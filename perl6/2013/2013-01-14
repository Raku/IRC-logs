[00:08] *** xinming_ left
[00:08] *** patspam left
[00:09] *** xinming joined
[00:11] <lue> I noticed in S03 -- Multiplicative Precedence that numeric bitwise and thru  numeric shift right seemingly randomly list those infixes as infix:['op'] instead of infix:<op> . Any reason as to why? (In particular, why not infix:¬´op¬ª?)

[00:18] <geekosaur> less confusing?

[00:22] *** patspam joined
[00:22] <geekosaur> also I think at one point (and still?) code was intended to be?) generated from the spec or vice versa and guillemots didn't work in some/all implementations

[00:24] <lue> Probably not anymore, considering it's the first I've heard mention of spec from code (or vice versa). In any case, I think in cases where <> can't be used ( e.g. the +> op ), ¬´¬ª would look better. But that's just me.

[00:31] *** slayer101_ joined
[00:35] *** spider-mario left
[00:44] *** slayer101_ left
[00:49] *** terrence joined
[00:56] *** hypolin joined
[01:00] *** anuby joined
[01:26] *** anuby left
[01:27] *** anuby joined
[01:31] *** terrence is now known as terrencehan

[01:33] *** _jaldhar joined
[01:34] *** benabik left
[01:44] *** Ayiko joined
[01:46] *** thou joined
[01:46] *** slayer101_ joined
[01:58] *** _jaldhar left
[01:59] *** benabik joined
[01:59] *** jaldhar joined
[02:11] *** jaldhar left
[02:11] *** FROGGS_ joined
[02:12] *** jaldhar joined
[02:18] *** dayangkun joined
[02:39] *** slayer101_ left
[02:42] *** thou left
[02:42] *** thou joined
[02:43] <grondilu> why STD.pm is called so?  Why not Perl6.pm?

[02:43] <geekosaur> because it's not actually a perl 6 implementation, just a parser test for the standard

[02:44] <geekosaur> or a validator if you prefer

[02:44] <grondilu> ok

[02:45] <geekosaur> (I think if you search the specs you'll find that dialects are perfectly acceptable; STD.pm defines the standard dialect which is IIRC named STD)

[02:57] *** tewk joined
[03:01] <tewk> https://gist.github.com/d9edb0871e19d2f915b5

[03:01] <tewk> Cannot look up attributes in a type object in method send at src/gen/CORE.setting:8084

[03:02] <tewk> I'm trying to teach myself perl6.  I don't understand the above error message.

[03:11] *** jaldhar left
[03:22] *** jaldhar joined
[03:28] *** thou left
[03:29] *** slayer101_ joined
[03:36] <skids> tewk: In Perl6 each class has its own undefined value, which is the class itself.  If you try to access an attribute in one of these, that is the error you get.

[03:36] <skids> r: class A { has $.a }; my A $defined_a .= new(); $defined_a.say; my A $undefined_a; $undefined_a.a.say;

[03:36] <p6eval> rakudo c3f565: OUTPUT¬´A.new(a => Any)‚ê§Cannot look up attributes in a type object‚ê§  in method a at src/gen/CORE.setting:1847‚ê§  in block  at /tmp/BvgehAewPV:1‚ê§‚ê§¬ª

[03:38] <skids> So the "Type Object" in the above that the error message is talking about is the class A, which is being used as the undefined value for the uninitialized variable $undefined_a

[03:39] *** benabik left
[03:42] <tewk> skids: that makes sense.

[03:43] <tewk> my new method isn't initializing the $!conn attribute.

[03:51] *** Pleiades` joined
[04:21] *** slayer101_ left
[04:25] *** slayer101_ joined
[04:31] *** preflex_ joined
[04:31] *** preflex_ is now known as preflex

[04:35] <tewk> IO::Socket::INET .get is returning a binary string.  How do I convert that to a string or number?

[04:43] <sorear> .decode(ENCODING)

[04:55] <tewk> No such method 'decode' for invocant of type 'Str'

[05:02] *** wtw joined
[05:04] <sorear> then it's not a binary string

[05:05] <sorear> binary strings have type 'Buf'

[05:07] <doy> i think there's a recent open rakudobug about socket reads returning binary data as Str

[05:08] <tewk> doy: Yeah I saw that,  I thought there might be a work around.

[05:09] <tewk> I essentially want to get the numeric value of the binary string or 'Str' or whatever it is.

[05:10] <tewk> I'm really liking perl6. is 

[05:10] <tewk> getrange: 1 3

[05:10] <tewk> niecza faster than rakudo?

[05:12] *** am0c joined
[05:18] *** xenoterracide joined
[05:18] <skids> r: my $a = "\x2567"; $a.encode("utf16").say # If we don't insert a BOM, rfc says big-endian encoding should be used, but Wikipedia notes that M$ has managed to make that a bad assumption.

[05:18] <p6eval> rakudo c3f565: OUTPUT¬´Buf:0x<67 25>‚ê§¬ª

[05:22] <skids> Hmm also 'For Internet protocols, IANA has approved "UTF-16", "UTF-16BE", and "UTF-16LE"' (case insensitive), so is there any good reason for Perl6 to buck that?

[05:24] <doy> r: my $a = "\x2567"; $a.encode("UTF-16").say

[05:24] <p6eval> rakudo c3f565: OUTPUT¬´encoding 'utf-16' not found‚ê§  in method encode at src/gen/CORE.setting:4556‚ê§  in block  at /tmp/uiCASzRq9A:1‚ê§‚ê§¬ª

[05:26] <tewk> https://github.com/supernovus/perl6-http-easy/issues/6 contains a workaround 

[05:27] *** xenoterracide left
[05:27] <skids> anyone got rakudo on a be machine?  Interested to know what .encode("utf16") does there.

[05:29] *** thou joined
[05:29] *** xenoterracide joined
[05:31] <skids> r: my $a = "\x2567"; $a.encode("binary").decode.say

[05:31] <p6eval> rakudo c3f565: OUTPUT¬´Lossy conversion to single byte encoding‚ê§  in method encode at src/gen/CORE.setting:4556‚ê§  in block  at /tmp/1XP32B4xgK:1‚ê§‚ê§¬ª

[05:31] <skids> not a good workaround.

[05:33] *** telex joined
[05:37] *** bluescreen10 left
[05:37] *** telex left
[05:37] *** alec joined
[05:39] *** telex joined
[05:42] *** alec left
[05:45] <lue> r: my $a = "\x2567"; $a.encode("iso-8859-1").decode.say

[05:45] <p6eval> rakudo c3f565: OUTPUT¬´Lossy conversion to single byte encoding‚ê§  in method encode at src/gen/CORE.setting:4556‚ê§  in block  at /tmp/JPq_J9M2oq:1‚ê§‚ê§¬ª

[05:50] *** alec__ joined
[05:50] *** alec__ is now known as alec

[05:53] *** terrencehan left
[05:56] <lue> erm, the table of precedences in S03 lists the feed operators as sequencers (one step above terminators), but their description is in the terminator section. Is this a mistake?

[06:09] <skids> r: Buf.new(0xe2,0x8d,0x85).decode.say; Buf.new(0xc3,0xa2,0xc2,0x8d).decode.say; # Typing a U+2345 into a telnet session connected to IO::Socket::INET yields the latter.

[06:09] <p6eval> rakudo c3f565: OUTPUT¬´‚çÖ‚ê§√¢¬ç‚ê§¬ª

[06:10] <FROGGS_> there is a new rakudo branch (froggs_multibyte), which fixes a bug when it comes to unicode chars

[06:11] <moritz> is it mergable?

[06:11] <moritz> good morning :-)

[06:11] <FROGGS_> I'd say yes, but it would be awesome if you take a look first

[06:11] <FROGGS_> morning ;o)

[06:11] <FROGGS_> tests are in roast in same branchname

[06:16] <FROGGS_> gtg to airport, yee ya later

[06:16] *** FROGGS_ left
[06:23] *** jaldhar left
[06:23] *** jaldhar joined
[06:29] *** stevan_ joined
[06:32] *** benabik joined
[06:41] *** preflex left
[06:43] *** preflex joined
[06:52] *** FROGGS[mobile] joined
[06:57] *** SamuraiJack joined
[07:07] *** isBEKaml joined
[07:09] *** quester joined
[07:10] <isBEKaml> hello, #perl6!

[07:11] <isBEKaml> Slightly OT: This made news on reddit - http://www.reddit.com/r/perl/comments/16h8cc/perl_is_not_dead_it_is_a_dead_end_forking_perl_5/

[07:13] <isBEKaml> I found his talk amusing, it'd be interesting to see what comes out of moe. :)

[07:13] *** thou left
[07:16] *** wk joined
[07:16] *** wk is now known as Guest67301

[07:17] *** Guest67301 is now known as wk_

[07:36] *** isBEKaml left
[07:46] <grondilu> rn: my @a = map { 1/$^k }, 1 .. *;  # isn't that supposed to be lazy and thus not time out?

[07:47] <p6eval> niecza v24-17-gd343a2a: OUTPUT¬´(timeout)Potential difficulties:‚ê§  @a is declared but not used at /tmp/OE7HXdB9xi line 1:‚ê§------> [32mmy [33m‚èè[31m@a = map { 1/$^k }, 1 .. *;  # isn't tha[0m‚ê§‚ê§¬ª

[07:47] <p6eval> ..rakudo c3f565: OUTPUT¬´(timeout)¬ª

[07:47] <quester> phenny: tell masak Thank you for submitting the macro call with $_ bug (#116370).  Later I tried checking whether any of the existing bugs that mention "quasi" were related and my brain exploded.  Now that I look at it again, I doubt if any of them are really related.

[07:47] <phenny> quester: I'll pass that on when masak is around.

[07:51] *** jokar joined
[08:06] *** slayer101_ left
[08:08] *** wtw left
[08:14] *** wtw joined
[08:26] *** quester left
[08:26] *** maja_ joined
[08:27] *** maja_ left
[08:39] <tadzik> "I had the feeling that in the long run (...) Perl 5 was a dead end". -- moritz++ august this year

[08:39] <tadzik> moritz: you predicted all this, didn't yuo :)

[08:39] <tadzik> (the discussion in http://perlmonks.org/index.pl?node_id=987033)

[08:41] <moritz> tadzik: I didn't predict the Scala part :-)

[08:43] <tadzik> details, details :)

[08:43] <nwc10> of course Perl 5's a dead end. What is Perl 6 all about? :-)

[08:45] *** dayangkun left
[08:51] *** FROGGS[mobile] left
[08:52] <moritz> nwc10: many people in the Perl 5 community believe otherwise (or don't care to admit it, or whatever)

[08:52] <moritz> or they think that Perl 6 is an even deader end than Perl 5 :-)

[08:52] *** FROGGS[mobile] joined
[08:54] <nwc10> I suspect that many people don't think. Or, more accurately, don't think through the implications of what they want.

[08:55] <nwc10> And, I am going to stick hard on "many". Given the sampling I've had from various smart constructive productive people who should know better.

[08:57] <moritz> to be honest, I didn't recognize Perl 5 as a dead end before I got involved with Perl 6

[08:57] <moritz> but then I knew little about programming languages back then

[08:58] <Su-Shee> well there is "dead end" in technical terms and "dead end" in terms of usage..

[08:59] <moritz> I mean in the technical evolution

[08:59] <nwc10> Su-Shee: yes, thanks. Forgot that. COBOL usage is just fine

[09:00] <Su-Shee> moritz: yes, that's what the slides are about.. just mentioning it that there are two discussion in the perl world...

[09:00] <Su-Shee> nwc10: I have no idea how dead-endish cobol is in technical terms..

[09:00] <moritz> Su-Shee: though in the (very) long run, technical dead-end implies usage dead-end too

[09:00] <nwc10> and if you believe the figures Tiobe pull from somewhere warm, dark and smelly, C is the most $something programming language again

[09:01] <nwc10> despite the fact that the new C11 standard is mostly "that bit of C99 we said is mandatory, but no-one implemented. Well, it's optional now"

[09:01] <Su-Shee> moritz: I agree.

[09:01] <moritz> well, Tiobe's methodology is just crap

[09:01] <nwc10> I don't know either, but I doubt that the language has changed in years

[09:01] <moritz> basically they search for "$language programming" on google, and count the results

[09:01] <nwc10> moritz: warm, dary and smelly. :-)

[09:01] <Su-Shee> moritz: just now I'm writing some install docs for python, perl and ruby.. with python and ruby for example things like the csv and json module are part of "core" - with perl I still have to install such common stuff

[09:02] *** Chillance joined
[09:02] <nwc10> moritz: No, I think that's what they *claim* they do. Real science can be replicated. They can't. http://blog.timbunce.org/2008/04/12/tiobe-or-not-tiobe-lies-damned-lies-and-statistics/

[09:02] *** FROGGS[mobile] left
[09:03] <Su-Shee> nwc10: I don't care for TIOBE; I go look for myself, especially when it comes to judging "tech" in europe. the typical anglosaxon discussion about "but there are plenty of perl jobs!" drives me crazy...

[09:03] *** FROGGS[mobile] joined
[09:03] <jnthn> morning o/

[09:03] *** cogno joined
[09:03] <moritz> \o jnthn 

[09:03] <nwc10> Su-Shee: depends where you are. There seem to be plenty of Perl jobs in Vienna and in London

[09:03] <nwc10> and that massive sucking noise from Amsterdam

[09:03] <Su-Shee> nwc10: that is ONE company.

[09:03] <nwc10> jnthn: it won't last :-)

[09:03] <Su-Shee> ONE

[09:03] <Su-Shee> nwc10: also, London is part of the anglosaxon world :)

[09:03] <nwc10> Su-Shee: I'm well aware that it's one company

[09:04] <nwc10> but, that ONE company actually causes problems for the other firms in Amsterdam that use Perl, as they can't recruit. So give up.

[09:05] <Su-Shee> nwc10: here - roughly speaking - it's split between tons of java jobs (really tons), pleny of PHP, plenty of c/c++ (though no domain perl has ever been in), and the startuppy stuff rails/node/sometimes python

[09:05] <jnthn> nwc10: ...the morning? :)

[09:05] <jnthn> nwc10: Good thing is, there's a new one each day :)

[09:06] <nwc10> jnthn: yes. Afternoon is already sneaking up from behind, ready to mug it

[09:06] <Su-Shee> though perl jobs on jobs.perl.org tripled in 2012.. a whopping 6 instead of 2. ;)

[09:06] <DrEeevil> haha, I know that One Company :)

[09:06] <nwc10> Su-Shee: and in two years time the startuppy stuff will be on something differently trendy?

[09:06] <Su-Shee> DrEeevil: by now, we all have friends and relatives there ;)

[09:06] <DrEeevil> hehe

[09:06] <Su-Shee> nwc10: as long as it's web based..

[09:06] <DrEeevil> Su-Shee: I've considered letting them absorb me, but I'm too lazy for that

[09:08] <Su-Shee> nwc10: another thing I'm looking at: which language is used as a "binding" for tools, apps, libs - that has been perl, now it's python usally. or what languages are used to be embedded? (lua, js). or what languages are books written in by language-independent subjects? (python)...

[09:08] <nwc10> I suspect it's not "anglosaxon world" I suspec that it's clustered.

[09:08] <nwc10> Cambridge has few to zero Perl jobs

[09:09] <Su-Shee> nwc10: or, the broad range of tools to use in everyday tech companies.. how many of those are perl-based? nagios certainly. spamassassin. and then it gets fewer and fewer...

[09:09] <Su-Shee> nwc10: doesn't cambridge count more as a typical university-influenced city?

[09:09] <nwc10> and who isn't writing them?

[09:09] <Su-Shee> nwc10: "me", so to speak.

[09:10] <Su-Shee> nwc10: thought the question is: would I write it in perl - having one eye on career and reputation and such - would you?

[09:10] <nwc10> I would. But also, I have a reputation. I'm not typical.

[09:11] <DrEeevil> Su-Shee: if the problem fits perl well ... why use something else?

[09:14] <Su-Shee> DrEeevil: because I wonder how many people choose a perl tool these days.. if you already have 3/4 of your toolchain and devops stuff and whatnot in e.g. ruby..

[09:14] <Su-Shee> nwc10: it was an example ;)

[09:15] <DrEeevil> Su-Shee: less and less, but for text processing it's still about the easiest and fastest 

[09:15] <DrEeevil> ruby ... bah ... 

[09:15] <DrEeevil> don't write shell in ruby, please. it only makes people sad.

[09:15] *** cogno left
[09:16] <Su-Shee> it's a very nice language.

[09:16] <Su-Shee> I've written some code in r, perl, python and ruby and js over the last weeks and the ruby stuff usally is not just shorter than perl but also very readable. ;)

[09:17] <Su-Shee> (unless it's R, but that's specifically made for my stuff.. :)

[09:17] <DrEeevil> no, it's not nice

[09:17] <DrEeevil> especially once you try to rely on the ecosystem (dare I say gem ?)

[09:18] <Su-Shee> DrEeevil: so, what is not nice about _the language_?

[09:18] <DrEeevil> Su-Shee: back read it wards! is brain not like order

[09:19] <Su-Shee> DrEeevil: ?!

[09:19] <DrEeevil> it is exactly how I would not write :)

[09:19] <DrEeevil> maybe I'm not japanese enough ...

[09:19] <Su-Shee> yeah because %hash.keys is UTTERLY different from hash.keys .. ;)

[09:19] <DrEeevil> 5.times( ...)

[09:19] <DrEeevil> *stab*

[09:20] <Su-Shee> what? it even reads out loud properly?!

[09:20] <DrEeevil> also most of the ruby I've had to read was written by people that found php too difficult

[09:20] <DrEeevil> "asdfgh".times() does what?

[09:20] <DrEeevil> :)

[09:20] *** isBEKaml joined
[09:21] <Su-Shee> DrEeevil: oh so now it's the language's fault if people write shitty code in it? didn't we have that exact same argument about perl? ;)

[09:21] <Su-Shee> DrEeevil: but whatever.. 

[09:22] <DrEeevil> Su-Shee: well, the grammar trips me up, and then it's bad code too

[09:22] <DrEeevil> at least perl tends to remove the bad coders because things just get unmaintainable :)

[09:23] <FROGGS[mobile]> the question is more: can you write good code in it

[09:23] *** cognominal joined
[09:24] <DrEeevil> FROGGS[mobile]: in theory yes, but like java you won't be able to use any thirdparty libs and so on

[09:24] <FROGGS[mobile]> you cant write beautiful and readable code in php for example

[09:24] <DrEeevil> which then makes it a very frustrating exercise 

[09:25] <FROGGS[mobile]> thats a point then

[09:25] *** bitonic joined
[09:26] <FROGGS[mobile]> but its the ppls fault if they write ugly stuff when it can be better

[09:26] <DrEeevil> hrm. most people learn by example

[09:26] <DrEeevil> so if you never see "good" code, how do you end up figuring out what it is?

[09:26] <FROGGS[mobile]> you dont want to see what my collegue is doing :o)

[09:26] <tadzik> yeah, and then they go to #perl and say "what's wrong with my ¬´open F, $user_input¬ª"

[09:27] <FROGGS[mobile]> hmm

[09:27] <tadzik> "people write bad code in it" is not an argument for anything

[09:27] <tadzik> imho

[09:28] <DrEeevil> tadzik: I've seen people use perl because "bash can't do string manipulation"

[09:28] <FROGGS[mobile]> DrEeevil: I believe you can imagine how it can look like by looking at the syntax

[09:28] <isBEKaml> I'd say it's not the language's fault that people write bad code in it. That feels like ranting to the wall, IMHO.

[09:28] <DrEeevil> so they just called perl to do $1 --blah $2 $3

[09:28] <tadzik> DrEeevil: I sometimes use Perl beacuse I can't write a loop in bash :>

[09:28] <DrEeevil> tadzik: ugh. uhm. bad boy ;) but at least you don't use ruby for bash loops

[09:28] <tadzik> I never remember the syntax

[09:29] <isBEKaml> tadzik: heck, I don't remember the syntax for anything. :)

[09:29] <isBEKaml> tadzik: I can't even (...)

[09:29] *** rhr joined
[09:29] <tadzik> bash is weird

[09:29] <FROGGS[mobile]> well, that might be the language's fault

[09:30] <tadzik> I usually refuse to call bash a programming language :)

[09:30] <DrEeevil> it's very useful glue :)

[09:30] <moritz> bash is primary a shell, only secondary a programming language

[09:30] <arnsholt> Shell script is evil. I write programs in shell only very reluctantly

[09:32] <DrEeevil> arnsholt: if everyone thought like that we'd have a lot less silly code around

[09:32] <nwc10> DrEeevil: the (frustrating) hosting company that ex-employer used (politics) wrote shell scripts that used perl as a better sed

[09:32] <DrEeevil> nwc10: that's not so bad ... 

[09:33] <nwc10> I should add that I approved of this foot in the door, and hoped that they'd end up using Perl for more

[09:36] <DrEeevil> it's better than cronjobs written in php

[09:37] <FROGGS[mobile]> we haz them √≥.√≤

[09:38] <FROGGS[mobile]> I replaced a few with perl5 jobs, but not all yet

[09:38] <DrEeevil> FROGGS[mobile]: do you need an angry german-yelling admin/devops person to clean up? ;)

[09:43] *** Psyche^ joined
[09:43] <FROGGS[mobile]> well, thats me, I'm all-in-one

[09:44] <FROGGS[mobile]> our admins are really just windows and network admins

[09:47] *** Psyche^ is now known as Patterner

[09:48] *** FROGGS[mobile] left
[09:48] *** dakkar joined
[09:49] *** kaleem joined
[09:56] <dalek> roast: 055cb13 | (Timo Paulssen)++ | S04-declarations/my.t:

[09:56] <dalek> roast: check for anonymous &, too.

[09:56] <dalek> roast: review: https://github.com/perl6/roast/commit/055cb137e0

[09:58] <bbkr__> good morning perl6

[09:59] <jnthn> o/ bbkr__ 

[09:59] <tadzik> hi bbkr__ 

[10:01] <dalek> roast: 60bc178 | (Timo Paulssen)++ | S04-declarations/my.t:

[10:01] <dalek> roast: remove warnings (use of Any in string context)

[10:01] <dalek> roast: review: https://github.com/perl6/roast/commit/60bc178bee

[10:09] *** anuby left
[10:09] *** hypolin left
[10:12] *** isBEKaml left
[10:15] *** pmurias joined
[10:15] <pmurias> hi

[10:17] <pmurias> jnthn: is the way you are supposed to use,get and release memory different in how JVM expects you too and nqp-jvm does different?

[10:17] *** daniel-s joined
[10:17] <pmurias> jnthn: that's what chromatic claims in his blog post

[10:20] <arnsholt> I asked about thata while back. It seems noone's entirely sure what he's thinking of, ATM

[10:21] <nwc10> that was my impression too

[10:21] <arnsholt> http://irclog.perlgeek.de/perl6/2013-01-10#i_6316569

[10:21] <jnthn> Uh, talking about how *the developer* releases memory on the JVM is a weird thing to do given that it has automatic memory management.

[10:21] <jnthn> And when you do .CREATE on a P6opaque, you create a single, perfectly normal, JVM object.

[10:22] <jnthn> Which uses fields (yes, JVM level fields) for storing attributes.

[10:22] <jnthn> Including "has num $!x;" mapping down to a double field.

[10:23] <nwc10> crazy talk. It will never catch on.

[10:23] <jnthn> About the only thing you could possibly complain about being unusual is that it creates that instance through the reflection interface. That, too, is something that can be optimized away to a normal "new" op if needed.

[10:23] *** SmokeMachine joined
[10:24] <jnthn> So, in summary, chromatic is - one again - talking bullshit about my work.

[10:24] <jnthn> *once

[10:25] <arnsholt> Oh, well. Development is proceeding nicely, which is good

[10:26] <arnsholt> And at the present speed, I may have to try to submit a Java talk after all =D

[10:26] <arnsholt> The call for speakers opens february 1st

[10:26] <nwc10> development would accelerate if more people played with it

[10:26] <arnsholt> Yeah, it's on my todo-heap

[10:26] <tadzik> arnsholt: call for what speakers?

[10:26] <arnsholt> tadzik: JavaZone

[10:27] <arnsholt> Big Norwegian Java conference =)

[10:27] <tadzik> will they show a new movie? :)

[10:27] <arnsholt> I sure hope so =D

[10:28] <arnsholt> At any rate, it might be amusing to submit a Perl talk to a Java conference

[10:28] <jnthn> arnsholt: When is the conference

[10:28] <jnthn> ?

[10:30] <nwc10> http://jz13.java.no/ -- 11-12th September, 2013

[10:30] <jnthn> Oh, that's ages in the future!

[10:30] <nwc10> what matters more is when the call for papers closes

[10:33] <arnsholt> I'm not sure, unfortunately

[10:33] <arnsholt> AFAICT, the website only says that it opens on the 1st of february

[10:40] <timotimo> ah, but of course nqp-jvm is written in nqp, too

[10:41] <arnsholt> Sure. The idea is to sell it as a "new JVM language" talk

[10:42] <arnsholt> And hope that the sheer unexpectedness of seeing Perl and JVM in the same sentence gets them to accept the talk ^_^

[10:43] *** SmokeMachine left
[10:44] <jnthn> :D

[10:44] <jnthn> It's very possible the NativeCall stuff could be ported by then also :)

[10:45] <arnsholt> Yeah, I'd kind of like it to be

[10:45] <arnsholt> 'Cause then the talk goes from "mildly interesting" to "has awesome features"

[10:46] <nwc10> which native is native? Java? Or C?

[10:46] <arnsholt> NativeCall is C-interop

[10:46] <moritz> we'll have a SemiNativeCall for calling Java then? :-)

[10:46] <arnsholt> Hehe

[10:46] <au> maybe we can call it Lingo or something :)

[10:47] <hoelzro> has anyone had a chance to try the pygments highlighter I wrote?

[10:47] <hoelzro> I was hoping for a little more feedback at this point =/

[10:47] <arnsholt> So, in nqp-jvm-prep, it wants src/*.java to compile to bin/*.class, and uses 3rdparty/bcel/bcel-5.2.jar as the only external dependency?

[10:48] <tadzik> hoelzro: I'll try it on some of my code once I get back home

[10:48] <jnthn> arnsholt: yeah

[10:48] <hoelzro> \o/

[10:48] *** SmokeMachine joined
[10:48] <jnthn> hoelzro: Linky?

[10:48] <arnsholt> Hmm. That shouldn't be too hard to hack into the Makefile

[10:49] <hoelzro> jnthn: https://bitbucket.org/hoelzro/pygments-main

[10:49] *** MayDaniel joined
[10:49] <jnthn> arnsholt: Go for it, the current build story is le suck, as nwc10++ found out ;)

[10:49] <hoelzro> I sent a link out 2 weeks ago to perl6-users and on perl.reddit.com

[10:49] <timotimo> hoelzro: any tips on how to try it out successfully?

[10:49] <nwc10> arnsholt: right now it's also hardcoding a call to `javac`, which I supplied as a shell scrip wrapping gcj

[10:49] <nwc10> but those seemed to be the only fun bits

[10:49] <hoelzro> timotimo: just download it and run python2 pygmentize -l perl6 $perl6_file

[10:50] <nwc10> oh, and you need a *really* new nqp. newer than Rakudo defaults to

[10:50] <timotimo> sounds good :)

[10:50] <tadzik> hoelzro: is it in this py-pan, so you can pip install it?

[10:51] <hoelzro> tadzik: I'm not familiar with python module installation (last I tried I started to cry blood), but it's not officially released yet if that's what you're asking

[10:51] <hoelzro> I want people to try it before I ask upstream to merge it

[10:51] <timotimo> pip can take a hg:// for installation

[10:52] <hoelzro> oh, neat

[10:52] *** SmokeMachine left
[10:52] <tadzik> kewl

[10:52] <hoelzro> does pip suck less than easy_install?

[10:52] <hoelzro> easy_install is a bit of an oxymoron, in my experience.

[10:53] <timotimo> jnthn: i asked a java-savvy friend how to best do the java building in nqp-jvm. he suggests sbt (scala build tool), because it doesn't need any configuration files or commandline args whatsoever

[10:54] <tadzik> I think pip is sort of a cpanm of python

[10:54] <timotimo> hoelzro: it sucks a bit less, but it doesn't handle binaries well. (actual binaries, that is. not python scripts with a #!)

[10:54] <hoelzro> I see

[10:55] *** SmokeMachine joined
[10:55] <timotimo> so for almost all projects you want to install, pip is good. it can even uninstall packages!

[10:56] <timotimo> hoelzro: the way $*W is highlighted is strange. the $ and W are dark red, the * in the middle is bright red and underlined 

[10:57] <hoelzro> interesting...can you paste the script you're highlighting?

[10:57] <hoelzro> I'd like to collect a body of examples for regression testing

[10:57] <hoelzro> I have a neat little suite of scripts to check for regressions

[10:57] <timotimo> it's just rakudo/src/Perl6/Actions.pm

[10:58] <jnthn> Good news:

[10:58] <timotimo> it can probably be very easily golfed

[10:58] <jnthn> On 04:58 PM, December 19, 2012 UTC, you have submitted a reclassification request to Trend Micro. We have processed your request and below is the result.

[10:58] <jnthn> URL 	hxxp://rakudo.org

[10:58] <jnthn> New Safety Rating (originally rated as "Dangerous" by Trend Micro)

[10:58] *** pmurias left
[10:58] <jnthn> Safe

[10:58] <hoelzro> interesting...

[10:59] <timotimo> hoelzro: $<colonpair> has got a problem, too. the $ and colonpair are dark red, the < is like the * in $*W and the > is white

[10:59] <jnthn> So now the RT ticket about rakudo.org being blacklisted can be closed :)

[10:59] <arnsholt> jnthn: Is compiling the Java code from the Makefile a must-have, or is ant an alternative as well?

[10:59] <hoelzro> how odd...I thought I tested that!

[10:59] <timotimo> other than that the highlighting seems pretty perfect

[10:59] <nwc10> is there a regression test for it? :-)

[10:59] <hoelzro> \o/

[11:00] <timotimo> (and now it turns out i've been checking out the branch *without* your work on it :P)

[11:01] <hoelzro> ?

[11:01] <jnthn> arnsholt: Makefile is probably what most people who build Rakudo today will expect/be ready for, I guess.

[11:01] <arnsholt> Yeah, and there's other stuff depending on the Makefile

[11:01] <jnthn> arnsholt: I'm not sure that telling people "please go install this other build tool" will help adoption...

[11:02] *** MayDaniel left
[11:02] <arnsholt> There is that, but it's complaining about ant would be kind of like complaining about make for building C libs

[11:02] <arnsholt> The thing is that doing it via the Makefile is likely to be brittle

[11:03] <timotimo> can't the makefile just call ant?

[11:03] <arnsholt> That was my idea

[11:03] <timotimo> ah, ok

[11:03] <arnsholt> Have a build.xml that compiles src/ to bin/ and then "bin: ; ant" in the Makefile

[11:03] <jnthn> ant doesn't come with a JVM install, though?

[11:03] <arnsholt> No, in that sense it's third-party

[11:04] <jnthn> Is ant easily installable?

[11:04] <arnsholt> It's possible to do in the Makefile, but then you'd have to communicate the dependency graph between Java files in the Makefile to get the code to compile properly I think

[11:04] *** bbkr_ joined
[11:04] <arnsholt> Yeah, ant is pretty straightforward

[11:06] <arnsholt> For Unixen it's in the package manager, but Windows as well isn't too hard IIRC

[11:06] *** Su-Shee_ joined
[11:07] <nwc10> which means you're assuming local root. Which is reasonable. But not 100%

[11:07] <nwc10> the machine I built it on, I'm not root

[11:07] <arnsholt> If you don't have root you'll have to install it to $HOME, yeah

[11:07] <nwc10> the clincher here seems to be "dependency graph between Java files"

[11:08] <arnsholt> Yeah

[11:08] <arnsholt> With ant you can just say "compile all the Java files in src/ to bin/"

[11:08] <arnsholt> Which cuts down on drudgery

[11:09] <nwc10> so, making it easy for the Makefile to use a locally installed ant if necessary feels like the trade off to shoot for

[11:11] <arnsholt> FWIW, installing Ant as non-root is a matter of downloading and unzipping, adding a directory to $PATH and adding an envvar (assuming you have a working Java)

[11:12] <tadzik> my experience with javac is that when you tell it to compile a .java file, it automagically compiles all the deps as well

[11:13] <arnsholt> I thought javac was supposed to do that, but I get lots of errors about symbols it can't find

[11:13] <arnsholt> Might be because of packages

[11:13] <jnthn> Can't you feed an entire list of .java files to javac?

[11:13] <arnsholt> Yeah, I can

[11:14] <arnsholt> But then I'd scavenge the list of files with `find src -name \*.java` which isn't terribly Windows-friendly

[11:16] <jnthn> dir src\*.java /b/s :)

[11:17] <tadzik> use perl -MFile::Find :P

[11:18] <nwc10> which would work on VMS too

[11:18] <jnthn> :)

[11:18] <nwc10> OK, except for the command line quoting being different again

[11:19] <tadzik> just harcode it and add a commit-hook :P

[11:19] *** Su-Shee_ is now known as Su-Shee

[11:25] *** Ulti joined
[11:27] *** SmokeMachine left
[11:27] <arnsholt> Yeah, looks like javac doesn't autoresolve across packages

[11:28] <arnsholt> javac -cp 3rdparty/bcel/bcel-5.2.jar -d bin src/org/perl6/nqp/{sixmodel{,/reprs},runtime}/*.java does the trick

[11:28] <jnthn> oooh!

[11:29] <jnthn> javac: file not found: src\org\perl6\nqp\{sixmodel{,\reprs},runtime}\*.java

[11:29] <jnthn> Dang!

[11:29] <arnsholt> I assume that kind of quoting doesn't work on Windows? =)

[11:29] *** whiteknight joined
[11:29] * arnsholt is overly familiar with bash

[11:29] <arnsholt> (Which is why I refuse to program in it unless I can't avoid it)

[11:30] <arnsholt> jnthn: Is there some documentation I can read about the Windows make?

[11:31] <arnsholt> So I at least can try to make my Makefile hacks compatible

[11:31] <jnthn> http://msdn.microsoft.com/en-us/library/dd9y37ha.aspx

[11:31] *** isBEKaml joined
[11:31] <isBEKaml> arnsholt++ # hacking with ants. :P

[11:32] <isBEKaml> tadzik: javac doesn't compile in all dependencies, it looks into the classpath you provide and if none of those files were compiled, compiles them. Maybe, since you talk of dependency management, you're looking for maven? :)

[11:33] <isBEKaml> tadzik: maven.apache.org

[11:34] *** bitonic left
[11:39] *** SmokeMachine joined
[14:48] *** ilogger2 joined
[14:48] *** ChanServ sets mode: +v ilogger2

[14:48] <arnsholt> Yeah, I'm not sure how feasible it is to replace the opcode emitting to something else

[14:50] *** SmokeMac_ joined
[14:50] <tadzik> ah well, it may be emiting code while running it, or whatnot

[14:51] <pmurias> just writing a new parser seems saner

[14:51] <tadzik> didn't TimToady++ write one during PRS?

[14:52] <arnsholt> Yeah, I think STD_P5 is a more viable approach

[14:52] <pmurias> there is Perlito5 

[14:52] *** stopbit joined
[14:55] *** SmokeMachine joined
[14:56] <rurban> tadzik: I want to rewrite the parser and keep it compatible. Larry also

[14:56] <PerlJam> you want to rewrite Larry and keep him compatible?

[14:57] <tadzik> may be hard to rewrite Larry in his runtime

[14:57] <rurban> I'll try Ian Piumarta's peg/leg for parsing

[14:58] <rurban> I think it will be better and cleaner. (And faster of course)

[14:58] *** isBEKaml joined
[14:58] *** SmokeMac_ left
[14:58] <tadzik> oh, that looks interesting

[14:59] <tadzik> I wish I knew about this before I stared my uni project in lex and yacc

[15:00] <rurban> look for potion (why the lucky stiff's project)

[15:00] <rurban> https://github.com/fogus/potion

[15:00] *** colomon joined
[15:04] <arnsholt> Doing it in lex and yacc you're going to run into a lot of the same problems that plague perl, really

[15:04] <arnsholt> The lexer is lex-based I think

[15:04] <arnsholt> Can't remember if yacc is involved as well, but it might be

[15:06] *** FROGGS joined
[15:09] <rurban> Did you guys also see Stevan Little's moe (perl5 in scala)?

[15:09] <Su-Shee> rurban: yes \o/ the slides and the repo are making the rounds. :)

[15:10] * PerlJam saw it this morning, in fact.

[15:10] <rurban> I'll have something more realistic and better some time soon.

[15:12] <PerlJam> better how?

[15:13] <rurban> smaller, faster, less insanity

[15:14] <rurban> no XS, only FFI. everything is an object (as in parrot) and typed. immutable strings. gc, auto-threaded

[15:14] <rurban> Jitted for intel

[15:15] *** SmokeMachine left
[15:15] <PerlJam> sounds awesome.

[15:15] <Su-Shee> rurban: BETTER AND more REALISTIC? that's.. gimme gimme gimme? :)

[15:15] <timotimo> rurban: your project is for perl5 compatibility, too, right?

[15:16] <rurban> better is easy. more realistic than scala and jvm is also easy.

[15:16] *** SmokeMachine joined
[15:16] * PerlJam tentatively believes in rurban's dream.

[15:16] <rurban> yes, codename p2 

[15:16] <Su-Shee> rurban: are you going to name it "country AND western Perl"? ;)

[15:16] <timotimo> it's that easy?

[15:16] <rurban> p2 - a modern perl

[15:16] <PerlJam> timotimo: it's just *THAT* easy!

[15:16] <rurban> floats and regex are hard

[15:16] <timotimo> sounds like something out of a steve jobs keynote

[15:17] <Su-Shee> rurban: I remember vaguely having read your name in context of FFI support some time ago already...

[15:17] <rurban> I'll just steal from the best

[15:17] *** awwaiid joined
[15:17] <PerlJam> rurban: That's the way to do it.  (After looking at the moe repo, I wondered why stevan didn't steal more)

[15:17] <rurban> But a nqp backend could also be possible

[15:18] <rurban> https://github.com/rurban/potion/blob/master/INTERNALS.md

[15:24] *** isBEKaml left
[15:30] *** SmokeMac_ joined
[15:33] *** SmokeMachine left
[15:39] *** SmokeMachine joined
[15:42] *** SmokeMac_ left
[15:43] *** SmokeMac_ joined
[15:43] <bluescreen10> rurban: how soon? any repo to have a sneak peak?

[15:43] <dalek> nqp-jvm-prep: 488ad0f | (Jonathan Stafford)++ | / (4 files):

[15:43] <dalek> nqp-jvm-prep: fixes documentation of nqp::sha1

[15:43] <dalek> nqp-jvm-prep: 

[15:43] <dalek> nqp-jvm-prep: Fixes documentation of nqp::sha1 (it's a serialization context opcode, not a

[15:43] <dalek> nqp-jvm-prep: string opcode), and reorganizes its test code.

[15:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/488ad0f6a8

[15:43] <dalek> nqp-jvm-prep: f76ad1b | (Jonathan Stafford)++ | / (4 files):

[15:43] <dalek> nqp-jvm-prep: implements nqp::exit

[15:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/f76ad1bfd0

[15:43] <dalek> nqp-jvm-prep: 5208842 | (Jonathan Stafford)++ | / (4 files):

[15:43] <dalek> nqp-jvm-prep: implements nqp::sleep

[15:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5208842563

[15:43] <dalek> nqp-jvm-prep: fa69397 | (Jonathan Stafford)++ | / (6 files):

[15:43] <dalek> nqp-jvm-prep: Merge remote-tracking branch 'upstream/master'

[15:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/fa69397fa8

[15:43] <dalek> nqp-jvm-prep: e2419b4 | jonathan++ | / (6 files):

[15:43] <dalek> nqp-jvm-prep: Merge pull request #6 from thecabinet/master

[15:43] <dalek> nqp-jvm-prep: 

[15:43] <dalek> nqp-jvm-prep: cleanup of nqp::sha1; implement nqp::exit and nqp::sleep

[15:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/e2419b4b5e

[15:44] <rurban> a month or so. perl examples/benchmarks/fib.pl 28 0.439s parrot examples/benchmarks/fib.pir 28 1.746s  potion examples/benchmarks/fib.pn 28 0.013s

[15:44] *** hash_table joined
[15:44] <rurban> jvm not yet

[15:45] <moritz> what's potion?

[15:45] <rurban> https://github.com/rurban/potion/

[15:45] <rurban> A fast little language

[15:45] <dalek> nqp-jvm-prep: 3be0d3b | jnthn++ | docs/LHF.md:

[15:45] <dalek> nqp-jvm-prep: arnsholt++ did this task.

[15:45] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/3be0d3ba83

[15:45] <rurban> by some famous ex-ruby guy

[15:45] <PerlJam> apparently something why did before he dropped off the face of the universe

[15:46] <rurban> felix is also good, but needs ocaml for bootstrapping

[15:46] *** SmokeMachine left
[15:46] <bluescreen10> rurban: and you trying to add p5 syntax and semantics to it?

[15:47] *** SmokeMachine joined
[15:47] <rurban> yes

[15:47] <rurban> plus more

[15:47] <[Coke]> p: say 9426 / 24593

[15:47] <p6eval> pugs: OUTPUT¬´0.3832797950636359939820274061724881063717‚ê§¬ª

[15:47] <rurban> types (str, int, num as objects), dlcall (ffi)

[15:47] <bluescreen10> rurban: that's an interesting experiment

[15:48] <rurban> and threads and a GC

[15:48] <PerlJam> rurban: beware the "pre-announcement"

[15:48] <rurban> DESTROY methods run at scope exit

[15:48] <rurban> it will under ofun.pm

[15:48] *** SmokeMa__ joined
[15:48] <rurban> it will be ...

[15:50] *** SmokeMac_ left
[15:50] <[Coke]> pugs'll be back to 38% tomorrow or so, I think.

[15:53] *** SmokeMachine left
[15:55] <Su-Shee> [Coke]: you're reactivating pugs? :)

[15:56] <[Coke]> Su-Shee: it's been on life support for a while. it runs a little under 40% of the number of spec tests that rakudo does at this point.

[15:56] <PerlJam> Su-Shee: he's keeping pugs on life-support

[15:56] <Su-Shee> oha :)

[15:56] <[Coke]> Su-Shee: see https://github.com/coke/perl6-roast-data/blob/master/perl6_pass_rates

[15:57] <[Coke]> making it easy for someone who speaks haskell to fix things up.

[15:58] <[Coke]> (and, to be fair, au++ is doing all the hard work on the haskell side. I just fudged a lot of tests and automated a test suite run.)

[15:58] * [Coke] thinks both he and au think they got the easy job on that one.

[15:59] <au> that's the best kind of division :)

[16:00] * PerlJam thinks both [Coke] and au are correct.  ;)

[16:00] <[Coke]> agreed!

[16:02] <[Coke]> au: I tried to get it running on my laptop, no love with the macport ghc.

[16:02] <[Coke]> Might I have better luck with http://www.haskell.org/platform/ ?

[16:02] <au> very probably.

[16:03] <au> also try "cabal install regex-pcre-builtin-0.94.4.4.8.31 Pugs" to get the UTF8 build

[16:04] * [Coke] will try that when he's off $work network. Danke.

[16:04] <au> glad to help :)

[16:05] *** SmokeMa__ left
[16:05] <au> have a good localtime hackers \o &

[16:05] <PerlJam> au: you too!

[16:06] *** SmokeMachine joined
[16:07] *** preflex joined
[16:09] <rurban> haskell ghc got much faster recently I heard. Are there benchmarks against parrot/rakudo?

[16:10] <[Coke]> pugs has historically been pretty fast in the subset of perl6 it provides. pretty sure there are no recent benchmarksl.

[16:21] *** uniejo joined
[16:21] *** SmokeMac_ joined
[16:24] *** SmokeMa__ joined
[16:24] *** SmokeMachine left
[16:24] *** SmokeMac_ left
[16:28] <dalek> roast: dee9fde | (Timo Paulssen)++ | S06-traits/is-copy.t:

[16:28] <dalek> roast: test for RT #74430: index and is copy interaction

[16:28] <dalek> roast: review: https://github.com/perl6/roast/commit/dee9fdeb68

[16:33] *** MayDaniel joined
[16:39] <timotimo> feels nice to close old bugs without having to change anything in the code, but something's lacking :|

[16:39] <timotimo> (my rakudo-internal-knowledge is, for instance)

[16:39] <FROGGS> timotimo: well, you learn the internals by looking/checking these tickets

[16:40] <timotimo> well, in this case i didn't even see the internals, i just wrote a test because the problem had already been fixed ;)

[16:40] <timotimo> usually the code to reproduce the bugs are in the ticket, too (which is great!), so i don't even have to hunt

[16:40] <timotimo> is the code itself the best (only?) place for learning how QAST works?

[16:41] <FROGGS> ya, I mean you learn about the traits and how they should work and how it is in real life...

[16:41] <timotimo> :D

[16:41] <jnthn> timotimo: https://github.com/perl6/nqp/blob/master/docs/qast.markdown is not complete, but a start

[16:41] <timotimo> (idly thinking about the rakudo internals tour screencast - wether or not creating a tiny language that emits QAST would be a good idea or silly/inappropriate-for-the-format)

[16:42] <timotimo> ah, i went straight for QAST::Want, and that's one of the few undocumented ones. just my luck! :D

[16:42] <timotimo> but thanks very much! seems like a good start indeed.

[16:43] *** SmokeMa__ left
[16:44] *** SmokeMachine joined
[16:46] *** SmokeMachine left
[16:48] *** alester joined
[16:48] *** SmokeMachine joined
[16:49] *** kaleem joined
[16:49] *** SmokeMachine left
[16:50] *** SmokeMachine joined
[16:51] *** FROGGS left
[16:52] *** SmokeMachine left
[16:52] *** cognominal joined
[16:53] *** SmokeMachine joined
[16:54] * [Coke] wonders what version of pugs the evalbot is running.

[16:54] *** SmokeMachine left
[16:54] *** SmokeMachine joined
[16:55] <timotimo> didn't it use to say that at the beginning of the result?

[16:55] <timotimo> pugs: say "hello coke"

[16:55] <p6eval> pugs: OUTPUT¬´hello coke‚ê§¬ª

[16:55] <timotimo> apparently not!

[16:56] *** kaleem left
[16:56] <[Coke]> r: say "eek"

[16:56] <p6eval> rakudo c3f565: OUTPUT¬´eek‚ê§¬ª

[17:01] *** SamuraiJack joined
[17:01] *** SmokeMachine left
[17:03] *** Targen joined
[17:03] *** SmokeMachine joined
[17:05] *** FROGGS joined
[17:07] *** SmokeMac_ joined
[17:08] *** SmokeMachine left
[17:09] *** Targen left
[17:10] <FROGGS> okay, so whats our plan for today?

[17:11] <jnthn> Mine is finish $dayjob tasks, cook some mushroom/bacon pasta stuff, nom it, then hack Perl 6 things :)

[17:11] <FROGGS> "nom it", I see a connection there

[17:11] *** SmokeMachine joined
[17:11] <jnthn> ;)

[17:11] <Su-Shee> I see more of a bacon connection.. ;)

[17:13] <skids> I have always suspected "nom" did not actually stand for "new object model"

[17:14] <timotimo> it was all a ruse!

[17:14] <TimToady> well, it's perfectly okay for something to mean more than one thing at once

[17:14] <FROGGS> --> http://de.webfail.com/dd0c76cf3a4

[17:15] <TimToady> Just because I'm tired when I yawn doesn't mean you're not boring... :)

[17:15] *** SmokeMac_ left
[17:18] <[Coke]> p: say 9475 / 24593

[17:18] <p6eval> pugs: OUTPUT¬´0.3852722319359167242711340625381206034237‚ê§¬ª

[17:18] *** SmokeMachine left
[17:19] *** SmokeMachine joined
[17:22] *** SmokeMachine left
[17:22] <nwc10> TimToady: do you remember which bugtracker the IDs such as NETaa13369 are? eg at this line http://perl5.git.perl.org/perl.git/blob/perl-5.001:/Changes#l661

[17:23] *** uniejo left
[17:23] *** SmokeMachine joined
[17:30] <TimToady> probably ClearCase

[17:30] *** SmokeMac_ joined
[17:31] <TimToady> the NET is for NetLabs

[17:31] * [Coke] has horrible CC flashbacks.

[17:34] *** SmokeMachine left
[17:38] <nwc10> TimToady: aha. thanks. So, all internal?

[17:39] *** SmokeMac_ left
[17:40] *** SmokeMachine joined
[17:41] <TimToady> yeah

[17:42] <nwc10> ah OK. thanks.

[17:42] *** SmokeMachine left
[17:42] <TimToady> data probably scrapped by Seagate Software or Veritas long ago

[17:43] *** SmokeMachine joined
[17:46] *** SmokeMac_ joined
[17:50] *** SmokeMachine left
[17:55] *** SmokeMac_ left
[18:00] *** SmokeMac_ joined
[18:02] *** uniejo joined
[18:07] *** uniejo left
[18:09] *** sjn joined
[18:10] *** SmokeMac_ left
[18:10] *** Pleiades` joined
[18:11] *** SmokeMachine joined
[18:13] *** SmokeMachine left
[18:14] *** SmokeMachine joined
[18:16] *** SmokeMachine left
[18:17] <diakopter> nqp-jvm could use a make clean

[18:17] <jnthn> Indeed. Go for it. :)

[18:17] <jnthn> (can make it portable same way the mkdir is)

[18:18] *** SmokeMachine joined
[18:19] *** thou joined
[18:19] *** SmokeMachine left
[18:20] *** SmokeMachine joined
[18:20] *** sjn left
[18:22] *** SmokeMachine left
[18:22] *** SmokeMachine joined
[18:23] *** Khisanth joined
[18:25] *** SmokeMachine left
[18:29] *** Pleiades` left
[18:30] *** FROGGS left
[18:32] *** preflex left
[18:32] *** SmokeMachine joined
[18:33] *** Pleiades` joined
[18:33] *** SmokeMachine left
[18:34] *** preflex joined
[18:34] *** SmokeMachine joined
[18:35] *** gogolum joined
[18:36] *** SmokeMachine left
[18:38] *** SmokeMachine joined
[18:38] *** FROGGS joined
[18:39] *** uniejo joined
[18:40] <diakopter> dalek lost my push to nqp-jvm

[18:41] *** SmokeMachine left
[18:42] *** SmokeMachine joined
[18:45] *** SmokeMachine left
[18:45] *** SmokeMachine joined
[18:46] <diakopter> jnthn: are you going to rename nqp-jvm-prep to nqp-jvm?

[18:47] *** jeffreykegler joined
[18:49] <jeffreykegler> Is there a Perl 6 spec for the format of its abstract syntax tress?

[18:49] *** sjn joined
[18:49] <jeffreykegler> I'd be interesting in the concrete ones too, but I read that there is no such thing in Perl 6

[18:49] <jeffreykegler> * tress -> trees

[18:50] <diakopter> see the classes here: https://github.com/perl6/nqp/tree/master/src/QAST

[18:51] <jeffreykegler> diakopter: thanks

[18:51] <nwc10> that's an answer for "Rakudo", not for "Perl 6". Because (you're right), it's not specified as part of Perl 6

[18:52] <jeffreykegler> diakoper read me right, I was interesting in anything Perl6-centric

[18:53] <jeffreykegler> * interesting -> interested

[19:00] *** groky joined
[19:00] *** Guest5388 joined
[19:00] *** Guest5388 left
[19:02] *** SmokeMachine left
[19:02] <TimToady> our intent was to let the various implementations negotiate that, but mostly only rakudo has been negotiating lately...

[19:04] <jeffreykegler> TimToady: as usual I am here trying to borrow ideas

[19:04] <jeffreykegler> I want to see how the Perl 6 folks are doing it

[19:04] <jeffreykegler> OO and all that

[19:05] <jeffreykegler> My idea is that my parser could get a start on the work of the semantics

[19:06] <jeffreykegler> Not finish it just start

[19:06] <jeffreykegler> The advantage is the "head start" could be coded in C and/or XS

[19:06] *** spider-mario joined
[19:06] * nwc10 thought that niecza was still on speaking terms

[19:07] *** SamuraiJack left
[19:08] *** SmokeMachine joined
[19:11] <TimToady> sure, but sorear++ is interested in many things, not just ASTs :)

[19:11] *** sjn left
[19:16] * jnthn back from dinner

[19:16] <jnthn> diakopter: no

[19:17] <jnthn> The repo description is still in sync with intent: "Preparatory work for NQP and Rakudo on JVM. Temporary repo; will be incorporated into NQP eventually" :)

[19:18] <diakopter> oh; missed that

[19:18] *** sjn joined
[19:18] <dalek> perl6-roast-data: 1617365 | coke++ | / (4 files):

[19:18] <dalek> perl6-roast-data: today (automated commit)

[19:18] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/16173653b3

[19:20] *** uniejo left
[19:21] *** SmokeMac_ joined
[19:24] *** SmokeMachine left
[19:25] *** Chillance joined
[19:28] *** japhb_ joined
[19:28] *** SmokeMachine joined
[19:31] *** jeffreykegler left
[19:31] *** SmokeMac_ left
[19:33] *** kivutar joined
[19:34] *** jeffreykegler joined
[19:37] *** jeffreykegler left
[19:41] *** arlinius joined
[19:44] *** SmokeMachine left
[19:46] *** wk joined
[19:46] *** wk is now known as Guest13411

[19:46] <Ulti> I wish you guys hadn't spoken about perl golfing... I've spent a whole day trying to get the best golf for nCk  ;___;

[19:48] <jnthn> .oO( ...the hole day... )

[19:49] <Ulti> lol

[19:50] *** SmokeMachine joined
[19:50] <nwc10> good news - he's here all week

[19:50] <huf> i thought he was jnthn 

[19:50] <Ulti> I really don't understand how the top golfers do it, unless they get around having to write 'print'

[19:51] <huf> say?

[19:51] <Ulti> I'm also hoping perl6 is a lot less golfable than perl5, I think the olde perl golf is probably what gives Perl the bad rap to the outside world

[19:51] <Ulti> huf its all perl 5.8 on codegolf.com

[19:51] <huf> hmm, it might count, but i think the insane amount of cargo culted broken perl4 code is more responsible

[19:52] <PerlJam> you're both wrong.  :)

[19:52] <huf> :)

[19:52] <Ulti> yeah I imagine perl4 is still wandering around in production some place (scary)

[19:52] *** b1rkh0ff joined
[19:53] <PerlJam> Ulti: there's an old node on perlmonks (I think) that explains how the best golfers do it.

[19:53] <nwc10> I've heard specific rumours of at least one place still using some Perl 4. Can't confirm it though

[19:53] <Ulti> I'm in the top 30% for this golf at least... yay

[19:55] <Ulti> PerlJam: I dont think I want to get too pro otherwise it will bleed into my every day programming :)

[19:55] <Ulti> I'd rather do some perl6 and write cleaner perl :D

[19:55] <nwc10> me too

[19:58] *** Khisanth left
[20:00] *** Guest13411 is now known as wk_

[20:02] *** SmokeMac_ joined
[20:03] *** SmokeMa__ joined
[20:05] *** SmokeMachine left
[20:07] *** SmokeMac_ left
[20:10] * jnthn grumbles about the API for SCs...

[20:11] *** SmokeMachine joined
[20:11] <jnthn> Guess I should actually take a moment to design it.

[20:12] <jnthn> (It...evolved...)

[20:12] <nwc10> a bad workman blames his tools. A bad programmer blames evolution? :-)

[20:13] <jnthn> Something like :)

[20:13] <nwc10> sure, it isn't intelligent design, but look on the bright side. At least it's not flying spaghetti monster code.

[20:13] * masak attempts to think of a joke about "unintelligent designer" that doesn't come across as a giant insult, but fails

[20:13] <phenny> masak: 07:46Z <quester> tell masak Thank you for submitting the macro call with $_ bug (#116370).  Later I tried checking whether any of the existing bugs that mention "quasi" were related and my brain exploded.  Now that I look at it again, I doubt if any of them are really related.

[20:13] <jnthn> It's also not spread over a bunch of places, so it's not hard to sort it out.

[20:14] <jnthn> .oO( The fact it isn't spread all over the place is probably a sign of at least something being right... :) )

[20:14] *** SmokeMa__ left
[20:14] <nwc10> masak: I had a hard enough time figuring out that response. There must be a better one, but it eluded me

[20:15] *** Khisanth joined
[20:20] *** Rotwang joined
[20:24] *** Targen joined
[20:28] <masak> 'night, #perl6

[20:28] <FROGGS> gnight

[20:29] *** Khisanth left
[20:32] *** kivutar left
[20:32] *** Chillance left
[20:33] *** hash_table left
[20:43] *** Khisanth joined
[20:46] <[Coke]> nwc10++ # latest perl5 status report.

[20:48] *** fgomez joined
[21:00] *** Rotwang1 joined
[21:03] *** Rotwang left
[21:05] *** SmokeMac_ joined
[21:07] *** kivutar joined
[21:07] *** mikemol joined
[21:09] *** SmokeMachine left
[21:14] <dalek> nqp: 7c8021d | jnthn++ | src/ (2 files):

[21:14] <dalek> nqp: Replace a couple of pir op uses with nqp ops.

[21:14] <dalek> nqp: 

[21:14] <dalek> nqp: Just some assorted ones where we already have the NQP op defined.

[21:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7c8021d9e4

[21:14] <dalek> nqp: 4e51b4c | jnthn++ | src/QAST/Operations.nqp:

[21:14] <dalek> nqp: Add an nqp:: op API for working with SCs.

[21:14] <dalek> nqp: 

[21:14] <dalek> nqp: It replaces a rather non-uniform mix of v-table calls, method calls

[21:14] <dalek> nqp: and pirops. Probably there are a few more needed, but this covers the

[21:14] <dalek> nqp: majority.

[21:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4e51b4c51b

[21:14] <dalek> nqp: aa64ea7 | jnthn++ | src/stage0/ (9 files):

[21:14] <dalek> nqp: Update bootstrap so we can use the SC ops in NQP.

[21:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/aa64ea7bfc

[21:14] <dalek> nqp: ff51c75 | jnthn++ | src/ (2 files):

[21:14] <dalek> nqp: Start using the nqp:: ops for SC handling.

[21:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ff51c75d9e

[21:14] <dalek> nqp: 9815308 | jnthn++ | t/serialization/0 (3 files):

[21:14] <dalek> nqp: Start updating SC tests to use new ops.

[21:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9815308a7f

[21:16] <Rotwang1> is there working LWP::Simple for rakudo 2012.12 somewhere on the internetz?

[21:17] <tadzik> I think moritz++'s version is the one closest to working

[21:18] *** Khisanth left
[21:18] <tadzik> not sure where it lives now though

[21:18] <japhb_> [Coke] or nwc10 : Link to perl5 status report in question?

[21:20] <nwc10> I assume that he means this: http://news.perlfoundation.org/2013/01/improving-perl-5-grant-report-12.html

[21:21] <japhb_> Thank you!

[21:21] <Rotwang1> tadzik: it is nowhere to be found, I'll just use sockets then

[21:22] <Rotwang1> [;

[21:23] <tadzik> :P

[21:23] <tadzik> moritz: ping-o

[21:23] <tadzik> or maybe the stock one just works with rakudo fresh enough

[21:23] <tadzik> Rotwang1: thing is, sockets were mostly broken recently

[21:23] <tadzik> Parrot changing API and this sort of crap

[21:24] <Rotwang1> ok

[21:24] *** mikemol left
[21:24] <Rotwang1> so is there anything I can use to fetch data from a webserver?

[21:25] <PerlJam> Is that really the interesting part that must be in Perl 6?

[21:25] <tadzik> well, does LWP::Simple not work for you?

[21:26] <tadzik> PerlJam: everything is interesting in Perl 6 :)

[21:26] <Rotwang1> tadzik: no it doesn't

[21:26] <tadzik> Rotwang1: how fresh is your rakudo?

[21:26] <PerlJam> If it were me, I'd usually just use curl or something to get the data I wanted and Perl 6 would then manipulate it in various ways.

[21:26] <Rotwang1> 2012.12 with parrot 4.10

[21:27] <tadzik> "RT #116288: $socket.read($bytes) now retruns $bytes btyes, if available" commit is from Wed Jan 9

[21:27] *** mikemol joined
[21:27] <tadzik> so you either have to go bleeding-edge-ish, or just use Perl as a glue and use curl like PerlJam says :)

[21:28] <Rotwang1> tadzik: what does panda use?

[21:28] <tadzik> Rotwang1: oh, it uses Parrot's LWP::UserAgent via pir

[21:28] <Rotwang1> ok

[21:28] <dalek> nqp-jvm-prep: 7cc3f08 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[21:28] <dalek> nqp-jvm-prep: Compile QAST::WVal.

[21:28] <dalek> nqp-jvm-prep: 

[21:28] <dalek> nqp-jvm-prep: Note that there's no SC support yet so it doesn't actually work when

[21:28] <dalek> nqp-jvm-prep: run. However, since compiling attribute access depends on it, it was

[21:28] <dalek> nqp-jvm-prep: obscuring the many other things that need work in nqp-mo.pm.

[21:28] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/7cc3f084bf

[21:29] <tadzik> Rotwang1: https://github.com/tadzik/panda/blob/master/lib/Panda/Ecosystem.pm#L12

[21:29] <tadzik> may be good enough for your purposes

[21:31] <timotimo> i don't really get why this function has to be PIR :|

[21:31] <tadzik> I should maybe release it as a module :P

[21:32] <tadzik> timotimo: well, couple of reasons

[21:32] <tadzik> 1) wget isn't available everywhere

[21:32] <tadzik> 2) LWP::Simple has quite a lot of dependencies

[21:32] <tadzik> 3) LWP::Simple is broken more often than I feel comfortable with

[21:32] <tadzik> 4) Panda runs only on Rakudo-on-Parrot anyway

[21:33] *** gfldex joined
[21:33] <Rotwang1> why "Panda runs only on Rakudo-on-Parrot"?

[21:34] <tadzik> because Niecza doesn't support typed exceptions, to which Panda moved some time ago

[21:34] <tadzik> and I didn't try any other implementation than those 2

[21:35] *** Khisanth joined
[21:35] *** slayer101_ joined
[21:35] <timotimo> i may have miscommunicated my confusion. why exactly is it PIR code, rather than perl6 code?

[21:35] <timotimo> is LWP::UserAgent written in raw PIR? who would do such a thing?

[21:35] <Rotwang1> isn't that the point of having man

[21:35] <tadzik> timotimo: it's a Parrot module, yes

[21:35] <Rotwang1> crap

[21:35] <PerlJam> welcome to the wonderful world of bleeding-edge software

[21:35] <tadzik> not a Perl 6 module

[21:36] <timotimo> all right

[21:36] <Rotwang1> isn't that the point of having many perl6 implementations, that you should actually abstract from how is it implemented?

[21:36] <tadzik> so it's either written in raw PIR... or worse

[21:36] <[Coke]> one of the points of parrot is provide libs that can be shared across multiple languages.

[21:36] <tadzik> Rotwang1: it is. But I think it was the best possible choice given the circumstances

[21:36] <tadzik> Rotwang1: if panda actually ran on anything other than Rakudo, I would figure out something else

[21:36] <Rotwang1> tadzik: ok

[21:37] <tadzik> like falling back to Perl 5 :>

[21:37] <tadzik> no, that wouldn't be to smart

[21:37] <tadzik> thing is, I can't quite rely on LWP::Simple currently

[21:38] <tadzik> http://feather.perl6.nl/~sergot/modules/module/HTTP::Client.html has some new branch which looks promising, but I don't think it's there yet

[21:39] <Rotwang1> I'll use curl for now then

[21:39] <tadzik> supernovus writes good stuff, so I hope HTTP::Client 2.0 will be there sooner than later :)

[21:39] <tadzik> and I'll happily move my code to it

[21:40] <tadzik> oh, Rotwang1 

[21:40] <tadzik> did you see https://github.com/azawawi/perl6-net-curl/?

[21:40] <tadzik> I didn't know we have such thing :)

[21:42] <timotimo> seen azawawi

[21:42] <aloha> azawawi was last seen in #perl6 21 days 6 hours ago saying "jnthn previously suggested adding a web API for perl6-debug... once that's there, i will be more than happy to integrate it.".

[21:42] <timotimo> oh, he's the one who worked on that web based perl6 editor, isn't that right?

[21:43] <Rotwang1> tadzik: looks like what I need, thanks

[21:43] <Rotwang1> I hope it works

[21:43] <tadzik> http://feather.perl6.nl/~sergot/modules/ indicates that smoketests pass for it

[21:43] <tadzik> last update 2012-12-13 though

[21:44] <tadzik> sergot: *poke* :)

[21:44] <Rotwang1> I like how examples are in c

[21:45] <timotimo> tadzik: there is only one test file and that tests if use The::Module works

[21:45] <tadzik> heh

[21:45] <tadzik> bah

[21:45] <timotimo> Rotwang1: it seems like those examples were taken from curl itself and partially translated to perl6

[21:45] <timotimo> (https.p6, for instance)

[21:45] <Rotwang1> indeed

[21:54] <timotimo> masak: hey, looking at https://rt.perl.org/rt3/Ticket/Display.html?id=77272 right now. rakudo now shows line number and file like you wished (although it's at the very end of the output". is that good enough for you or would you prefer the position info in front or something?

[21:54] <timotimo> (although the position indicator seems a bit off. it shows ------> and then nothing, although the line does have some content (doesn't even show BOL or EOL)

[21:55] *** gogolum left
[21:56] *** gogolum joined
[22:03] <[Coke]> rakudo: class A is NoSuchType {}

[22:03] <p6eval> rakudo c3f565: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Cannot call 'trait_mod:<is>'; none of these signatures match:‚ê§:(Mu:U $child, Mu:U $parent)‚ê§:(Attribute:D $attr, :rw(:$rw)!)‚ê§:(Attribute:D $attr, :readonly(:$readonly)!)‚ê§:(Attribute:D $attr, :box_target(:$box_target)!)‚ê§:(Routine:D $r, ‚Ä¶

[22:04] <timotimo> it doesn't show up in p6eval, because it's like 100 lines before it gets to the line/file

[22:04] <jnthn> 100? :)

[22:06] *** kivutar left
[22:12] *** SmokeMac_ left
[22:13] *** Rotwang1 left
[22:18] *** SmokeMachine joined
[22:19] *** rindolf joined
[22:19] *** rindolf left
[22:20] *** rindolf joined
[22:27] *** gogolum left
[22:32] *** slayer101_ left
[22:34] *** SmokeMachine left
[22:37] *** SmokeMachine joined
[22:38] *** bluescreen10 joined
[22:39] *** slayer101_ joined
[22:44] *** Pleiades` left
[22:46] *** MayDaniel left
[22:50] *** Pleiades` joined
[22:50] *** tgt joined
[22:52] *** snearch joined
[22:54] <dalek> nqp: fb2b87e | jnthn++ | src/how/NQPAttribute.pm:

[22:54] <dalek> nqp: Toss some dead code.

[22:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fb2b87e5e0

[22:54] <dalek> nqp: caa866f | jnthn++ | src/how/ (5 files):

[22:54] <dalek> nqp: Various cleanups and simplifications in MOP code.

[22:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/caa866f0d6

[22:54] <dalek> nqp: 8319c39 | jnthn++ | src/how/NQPModuleHOW.pm:

[22:54] <dalek> nqp: Eliminate a now-unrequired hack.

[22:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8319c39fd9

[22:54] <dalek> nqp: 4084b68 | jnthn++ | src/how/ (4 files):

[22:54] <dalek> nqp: A further round of MOP code simplifications.

[22:54] <dalek> nqp: 

[22:54] <dalek> nqp: We've relied in various places on methods that Parrot's PMCs provide,

[22:54] <dalek> nqp: but that it's not reasonable to expect a ground-up 6model runtime to

[22:54] <dalek> nqp: offer. In general, the only things that define internal methods are

[22:54] <dalek> nqp: the KnowHOW and KnowHOWAttribute, from which everything else is built.

[22:54] <dalek> nqp: By keeping the MOP simpler, it means we can keep the runtime leaner

[22:54] <dalek> nqp: and write more of NQP in NQP. This isn't the entire set of changes we

[22:54] <dalek> nqp: need, but many of them.

[22:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4084b683eb

[22:54] <jnthn> For the curious: every object-y thing in nqp-jvm is a 6model object of some kind.

[23:04] *** bluescreen10 left
[23:04] *** wk_ left
[23:12] *** slayer101_ left
[23:17] <japhb_> jnthn++ # I've been wondering which of the ways to push/count elements/etc in NQP was the "official"/"best" way, and which ones were historical.  Thanks for clearing that up!

[23:17] <jnthn> japhb_: Please note that the answer in MOP code is not automatically the answer in normal code.

[23:17] *** stopbit left
[23:18] <japhb_> *sigh*, you would have to say that, wouldn't you?

[23:19] <japhb_> japhb-- # Assuming simplicity where reality is involved

[23:19] <jnthn> japhb_: Well, NQP doesn't try to have all the conveniences that full Perl 6 does, but the NQP MOP code is a level below that.

[23:20] *** Pleiades` left
[23:20] <jnthn> That said, the ones in the MOP are probably the lowest level and probably the most efficient :)

[23:20] <japhb_> Sure, but I wondered whether '@foo[+@foo] := ', [email@hidden.address] or 'nqp::push(@foo,)' was most efficient ... and I would really hope the way that the MOP does it is in fact the most efficient.  ;-)

[23:21] <japhb_> ... and there we go.  :-)

[23:21] <jnthn> The @foo[+@foo] thing is a huge hack from the days when NQP did some funky things with regard to auto-viv.

[23:21] <jnthn> There's never a reason to do it these days.

[23:21] <japhb_> excellent

[23:21] <japhb_> It felt very PHP-ish

[23:23] <jnthn> I've one more round of MOP simplification to do (but not tonight) with regard to hash iteration.

[23:25] <jnthn> Then it'll mostly be a case of chugging through my heavily commented out version of it.

[23:25] <jnthn> It's nice how much I can uncomment already...

[23:26] *** Pleiades` joined
[23:27] *** Targen left
[23:28] * japhb_ was just discussing the progress today with a few people very interested in seeing Perl 6 on JVM.  They asked "Is this just being thought about, or in design, or what?"  It felt really good to say "Oh no, multiple commits a day, actually."

[23:29] <jnthn> Yeah, it's going fairly smoothly so far. Touch wood.

[23:30] * japhb_ knocks on his forehead

[23:30] <jnthn> The thing that's gonna be a pain in the butt to crank out is the deserialization code.

[23:31] *** skids joined
[23:32] <diakopter> what, parsing in java isn't super-fun?

[23:33] <jnthn> heh

[23:33] <jnthn> It's a binary format. I don't have to parse :D

[23:33] <jnthn> No, it's just keeping all the fixups straight.

[23:34] *** FROGGS left
[23:34] *** tgt left
[23:34] <jnthn> With a level of indirection less than I have to play with on the Parrot impl.

[23:34] *** slayer101_ joined
[23:34] *** Khisanth left
[23:35] *** Khisanth joined
[23:35] <japhb_> .oO( If any programming problem can be solved with another layer of indirection, what happens when you remove a layer? )

[23:35] <jnthn> That's why I'm not looking forward to it :P

[23:36] *** spider-mario left
[23:40] <timotimo> removing a layer is totally a programming problem, so ... :)

[23:42] *** thou left
[23:42] <huf> maybe there's always a fixed number of layers, and when you remove one from somewhere, it gets added somewhere else

[23:44] <timotimo> that doesn't seem right. i only seem to see examples of layers being added, almost never removed

[23:44] <huf> somewhere, there must be a pile of very simple, very performant code

[23:44] <huf> they sing a hymn to praise creation

[23:44] <huf> but nobody is there to hack on them, because we're all busy adding layers

[23:45] <timotimo> heh.

[23:47] *** FROGGS joined
[23:48] * colomon 's Chrome keeps on ramping up to 100% CPU usage and staying there.  :(

[23:49] <colomon> Any programming problem can be created by removing a layer of indirection?

[23:49] *** slayer101_ left
[23:51] <jnthn> :)

[23:51] <jnthn> OK, time for some rest here

[23:51] *** SmokeMachine left
[23:51] *** slayer101_ joined
[23:52] <jnthn> &

[23:53] <japhb_> o/

[23:54] <japhb_> huf: That very simple, very performant code is running in a Forth somewhere.  ;-)

[23:54] <sorear> colomon: have you played with the chrome task manager/

[23:55] *** FROGGS_ joined
[23:57] *** FROGGS left
