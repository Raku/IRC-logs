[00:02] *** Targen left
[00:06] *** [particle] joined
[00:10] <labster> timotimo:  can I request nqp::readlink while you're there?

[00:10] *** roll left
[00:10] *** roll joined
[00:15] <dalek> rakudo/nom: d2af402 | pmichaud++ | tools/build/NQP_REVISION:

[00:15] <dalek> rakudo/nom: Bump NQP_REVISION to get ?-quantifier update and is-prime fixes.

[00:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d2af4023cb

[00:21] *** grondilu left
[00:30] <timotimo> labster: i was going to make as many as i can until i fall over into a bed of some sort :)

[00:31] <labster> it's a new feature, though

[00:31] <labster> it looks like Files.readSymbolicLink is the thing, though

[00:32] <timotimo> it's new?

[00:32] <timotimo> well, i guess i can implement it for both VMs. except i really don't know how to implement it for parrot yet. i will investigate, though

[00:32] <labster> There's no readlink op in Parrot.  Though I am bugging them for one.

[00:33] <timotimo> right. you expect readline to return a new path?

[00:33] <timotimo> as a string, i suppose

[00:34] <labster> yes, so then we can pass it to our own version of Path later.

[00:34] *** araujo joined
[00:36] <labster> https://github.com/parrot/parrot/issues/967  Honestly, I have no idea how to respond to dukeleto here... I'm not a parrot dev.

[01:06] *** roll left
[01:07] *** MrMeek-afk joined
[01:09] *** MrMeek left
[01:20] *** thou left
[01:22] *** woosley joined
[01:29] <pmichaud> labster/timotimo:  just implement the readlink op as nqp_readlink in the nqp repository

[01:29] <pmichaud> much easier than waiting for Parrot to do it :)

[01:31] <pmichaud> assuming it needs to be an op, that is.

[01:31] *** daniel-s joined
[01:32] * pmichaud checks

[01:32] *** FROGGS_ joined
[01:34] <labster> I need it for IO::Path.resolve.  Though I imagine it would be useful elsewhere.

[01:34] <pmichaud> no, Parrot has it implemented as a method on the OS object.

[01:34] <pmichaud> so, it should likely be implemented that way

[01:34] <pmichaud> hmmmm

[01:35] *** jaldhar left
[01:35] <labster> does it?  I can't read parrot's source at all.

[01:35] *** jaldhar joined
[01:36] *** FROGGS left
[01:36] <pmichaud> sorry, I was being confusing above.

[01:36] <pmichaud> Parrot's symlink operation is written as a PCC method on the OS PMC type.

[01:37] <pmichaud> https://github.com/parrot/parrot/blob/master/src/pmc/os.pmc#L243

[01:37] <pmichaud> Parrot doesn't yet support a readlink operation.

[01:37] <pmichaud> If it's to get one, it should likely be written as a PCC method on the OS PMC type as well -- i.e,. as part of os.pmc

[01:38] <pmichaud> and to be fully consistent, should probably write Parrot_file_readlink in the same place that Parrot_file_symlink is written.

[01:38] <labster> can you comment here for me then?  https://github.com/parrot/parrot/issues/967 please?

[01:40] <pmichaud> I'll try.  Not sure I'll have much more success than you've had :)

[01:41] <labster> "Waiting for Parrot" would make a good play.

[01:42] <dalek> perl6-roast-data: e7df8e9 | coke++ | / (3 files):

[01:42] <dalek> perl6-roast-data: today (automated commit)

[01:42] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e7df8e99c7

[01:42] <dalek> perl6-roast-data: e3d56af | coke++ | / (3 files):

[01:42] <dalek> perl6-roast-data: today (automated commit)

[01:42] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e3d56af9e5

[01:46] <pmichaud> added comment as https://github.com/parrot/parrot/issues/967#issuecomment-17264702

[01:48] <labster> Thanks much.  Let's hope it works.

[01:57] *** kbenson left
[02:00] *** MrMeek-afk is now known as MrMeek

[02:04] *** thou joined
[02:07] *** FROGGS_ left
[02:16] *** prammer left
[02:17] *** prammer joined
[02:20] *** stevan_ joined
[02:27] *** thou left
[02:34] *** japhb_ left
[02:35] *** drbean joined
[02:37] *** orafu left
[02:38] *** orafu joined
[02:38] *** thou joined
[02:41] <colomon> nr: say "1,3..5,6".eval.perl

[02:41] <camelia> rakudo d2af40, niecza v24-37-gf9c8fc2: OUTPUT«(1, 3..5, 6)␤»

[02:42] <colomon> nr: my @a = "1,3..5,6".eval; say @a.perl

[02:42] <camelia> rakudo d2af40: OUTPUT«Array.new(1, 3, 4, 5, 6)␤»

[02:42] <camelia> ..niecza v24-37-gf9c8fc2: OUTPUT«[1, 3, 4, 5, 6].list␤»

[02:45] <colomon> n: say [(+)] set(1,2, 5);

[02:45] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: No value for parameter '$b' in 'infix:<(+)>'␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (infix:<(+)> @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2630 (reduceop @ 12) ␤  at /tmp/TWPQ9U446Y line 1 (mainline @ 4) ␤  at /hom…

[02:46] <colomon> whoops

[02:47] <colomon> n: say [+] 2

[02:47] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«2␤»

[02:57] * colomon just tried using Set in the ABC module, and is finding oodles of Set bugs as a results...

[02:58] <colomon> n: say Rat

[02:58] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«(Rat)␤»

[03:01] <colomon> rn: say Set

[03:01] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: Parameter '' in 'Set.gist' requires a defined argument␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Set.gist @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1362 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1364…

[03:01] <camelia> ..rakudo d2af40: OUTPUT«(Set)␤»

[03:03] *** pecastro left
[03:05] <colomon> trying to debug your code AND your perl6 implementation at the same time is a pain.

[03:06] *** lee_ joined
[03:10] *** kurahaupo left
[03:17] *** woosley left
[03:23] *** kurahaupo joined
[03:25] *** saxx joined
[04:06] *** saxx left
[04:15] *** thou left
[04:19] *** jeffreykegler joined
[04:21] *** thou joined
[04:24] *** jeffreykegler left
[04:25] *** Psyche^ joined
[04:28] *** Patterner left
[04:28] *** Psyche^ is now known as Patterner

[04:46] *** fgomez joined
[04:56] *** vsdvdsfvdfv joined
[04:58] *** vsdvdsfvdfv left
[05:03] *** araujo left
[05:04] *** drbean left
[05:06] *** drbean joined
[05:06] *** moritz_ joined
[05:06] *** araujo joined
[05:10] <moritz_> \o

[05:11] <pmichaud> moritz_: \o

[05:11] <perigrin> o/

[05:12] <diakopter> perigrin: O_O

[05:13] <moritz_> status update: I've ordered a VPS at my $work; today is a holiday, I hope it's ready tomorrow; then I'll set up the IRC logs and other stuff again

[05:13] <diakopter> moritz_: did you have a backup?

[05:13] <moritz_> diakopter: yes

[05:13] <diakopter> <whew!>

[05:14] <moritz_> nightly dumped into dropbox

[05:14] <diakopter> nice.

[05:15] <diakopter> is it a bad sign that my mailman-generated parrot-dev password is a bad word?

[05:15] <moritz_> and ilbot_bck runs on feather now to gather logs until the new host is up

[05:35] *** araujo left
[05:36] *** araujo joined
[05:44] *** hrbkid joined
[05:49] *** cognominal left
[05:49] *** fgomez left
[05:55] *** atroxaper joined
[05:58] *** kurahaupo left
[05:59] *** eternaleye left
[05:59] *** eternaleye joined
[06:14] *** eternaleye left
[06:15] <dalek> star: efbe3ad | pmichaud++ | modules/ (13 files):

[06:15] <dalek> star: Bring modules up-to-date for 2013.04 release.

[06:15] <dalek> star: review: https://github.com/rakudo/star/commit/efbe3adedf

[06:15] <dalek> star: e050eea | pmichaud++ | / (3 files):

[06:15] <dalek> star: Add draft 2013.04 announcement.

[06:15] <dalek> star: review: https://github.com/rakudo/star/commit/e050eea08f

[06:15] <dalek> star: baae3b6 | pmichaud++ | docs/announce/2013.03.md:

[06:15] <dalek> star: Remove 2013.03 draft announcement -- there was no 2013.03 Star release.

[06:15] <dalek> star: review: https://github.com/rakudo/star/commit/baae3b64ad

[06:15] *** dmol joined
[06:17] <dalek> nqp: 3d5e761 | pmichaud++ | src/vm/parrot/stage0/ (9 files):

[06:17] <dalek> nqp: Update parrot bootstrap with ?-quantifier changes.

[06:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3d5e7617b9

[06:36] *** FROGGS joined
[06:38] *** thou left
[06:40] <dalek> star: 8763435 | pmichaud++ | / (2 files):

[06:40] <dalek> star: Update release number.

[06:40] <dalek> star: review: https://github.com/rakudo/star/commit/8763435852

[06:47] <dalek> std: 316b40b | pmichaud++ | STD.pm6:

[06:47] <dalek> std: Add some explanation for :iffy and :diffy.

[06:47] <dalek> std: Hopefully someone can add explanations for :fiddly and :pure.

[06:47] <dalek> std: review: https://github.com/perl6/std/commit/316b40bb54

[06:51] <moritz_> pure doesn't seem to be checked during the parse

[06:52] <moritz_> so it's probably pure in the sense it's used in functional programming (side effect free, reproducible)

[06:53] <dalek> nqp: 1b11be1 | pmichaud++ | src/QRegex/Cursor.nqp:

[06:53] <dalek> nqp: Convert NQPRegex.ACCEPTS to be multimethods based on concrete-ness.

[06:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1b11be1b17

[06:55] *** Nom- joined
[06:56] *** moritz__ joined
[06:56] *** moritz_ left
[06:57] *** moritz__ is now known as moritz_

[07:10] <pmichaud> rakudo star release candidate at http://pmichaud.com/sandbox/rakudo-star-2013.04-rc1.tar.gz

[07:10] <moritz_> can sombody explain to me why commit 16fa719ecaa655688a37e5942eeadc96b18e3a30 in nqp was necessary?

[07:11] <moritz_> is it because otherwise no space for the result is allocated on the stack, with some compilers?

[07:11] <pmichaud> the candidate gives me a large number of errors when running "make modules-test" -- see https://gist.github.com/pmichaud/5494118

[07:12] <FROGGS> morning

[07:12] <nwc10> moritz_: what is the type of $1? If it's not the same size as int, then you can't (correctly) pass a pointer to the wrong-sized thing

[07:13] <nwc10> there was a chunk of code in the perl 5 core over a decade ago that did that sort of cast on pointers, which had to be fixed

[07:13] <nwc10> Jarkko tended to find most of them first, because he was using Alphas

[07:14] <moritz_> nwc10: ah, I don't really what the type of $1; might well have been wrong

[07:14] <pmichaud> moritz_: my best guess is that on some systems,  INTVAL != int

[07:14] <moritz_> from pmichaud's gist: Could not find file 'rfc3896IETF::RFC_Grammar::URI' for module rfc3896IETF::RFC_Grammar::URI

[07:14] <pmichaud> (INTVAL is Parrot's notion of what goes in an integer register, which might not be the same as the compiler's notion of the 'int' type)

[07:15] <moritz_> uhm, copy&paste gone wrong

[07:15] <moritz_> there seems to be a tab character in the error message

[07:15] <moritz_> which suggest that there's something funny going on in require

[07:16] <FROGGS> moritz: Could not find *file* ... for ....

[07:16] <FROGGS> it thinks it is a file, rather than a module

[07:16] <FROGGS> that is because there is a: use 'Module::Name' or require 'Module::Name', which is wrong

[07:16] <moritz_> so it needs to be fixed to use ::($modulename) ?

[07:16] <FROGGS> yeah

[07:17] <moritz_> and Bailador seems to be missing PSGI as a prerequisite

[07:17] <moritz_> same for jsonrpc

[07:17] <FROGGS> or better: ModuleName:file($modulename)

[07:17] <FROGGS> err, scratch that

[07:19] <pmichaud> bedtime here; leave suggestions for star fixes in backscroll... I'll try to look them over tomorrow morning

[07:20] <pmichaud> (which is really "later this morning" for most of us)

[07:20] <pmichaud> bbl

[07:20] <FROGGS> sleep well

[07:22] <moritz_> 1) add PSGI to star   2) fix the require(s) in URI

[07:27] *** snearch joined
[07:31] <dalek> v5/cool: a59247e | (Tobias Leich)++ | lib/Perl6/P5Grammar.pm:

[07:31] <dalek> v5/cool: I hope that fixes \x...

[07:31] <dalek> v5/cool: review: https://github.com/rakudo-p5/v5/commit/a59247e913

[07:31] <dalek> v5/cool: 7f24f01 | (Tobias Leich)++ | lib/Perl6/P5Actions.pm:

[07:31] <dalek> v5/cool: wrong approach for supporting chop, will be changed

[07:31] <dalek> v5/cool: review: https://github.com/rakudo-p5/v5/commit/7f24f011fc

[07:31] <dalek> v5/cool: 311d5e3 | (Tobias Leich)++ | lib/ (3 files):

[07:31] <dalek> v5/cool: a try to replace Cool from CORE.setting with our own fivy stuff

[07:31] <dalek> v5/cool: review: https://github.com/rakudo-p5/v5/commit/311d5e3bd0

[07:32] <dalek> v5: a59247e | (Tobias Leich)++ | lib/Perl6/P5Grammar.pm:

[07:32] <dalek> v5: I hope that fixes \x...

[07:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/a59247e913

[07:32] <dalek> v5: 7f24f01 | (Tobias Leich)++ | lib/Perl6/P5Actions.pm:

[07:32] <dalek> v5: wrong approach for supporting chop, will be changed

[07:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/7f24f011fc

[07:38] <moritz_> seems that rt.perl.org is down

[07:40] *** rindolf joined
[07:44] <hoelzro> ahoy #perl6!

[07:44] <FROGGS> hi hoelzro 

[07:47] <sorear> o/

[07:50] <FROGGS> \o

[07:52] *** rindolf left
[07:52] *** rindolf joined
[07:59] *** dmol left
[07:59] *** cognominal joined
[07:59] <rindolf> Hi hoelzro, FROGGS 

[08:00] <hoelzro> hello rindolf 

[08:01] <FROGGS> hi rindolf 

[08:02] <rindolf> What's up?

[08:02] <FROGGS> v5-hacking

[08:02] *** rindolf left
[08:03] *** rindolf joined
[08:03] *** berekuk joined
[08:04] <rindolf> FROGGS: nice.

[08:04] <masak> 8 hours until the #masakism workshop.

[08:05] <hoelzro> \o/

[08:06] *** dmol joined
[08:10] <FROGGS> masak++

[08:10] *** Nom- left
[08:10] <FROGGS> now it is like 9 hours

[08:11] *** Nom- joined
[08:13] *** spider-mario joined
[08:14] *** rindolf left
[08:14] *** rindolf joined
[08:15] <masak> ;)

[08:16] *** moritz_ left
[08:19] *** donaldh left
[08:21] *** Timbus left
[08:21] <timotimo> yaaaaawn

[08:22] *** Timbus joined
[08:22] <FROGGS> moin timotimo 

[08:23] *** donaldh joined
[08:24] *** Nom- left
[08:25] *** Nom- joined
[08:28] *** rindolf left
[08:28] *** rindolf joined
[08:30] *** woosley joined
[08:37] *** eternaleye joined
[08:40] <timotimo> hey froggs

[08:41] <FROGGS> o/

[08:43] *** berekuk left
[08:43] *** dakkar joined
[08:43] *** rindolf left
[08:44] *** rindolf joined
[08:45] *** berekuk joined
[08:47] *** kivutar joined
[08:49] *** rindolf left
[08:49] *** rindolf joined
[08:55] *** cognominal left
[08:56] *** cognominal joined
[08:57] *** rindolf left
[08:57] *** rindolf joined
[08:58] *** berekuk left
[09:07] *** berekuk joined
[09:08] *** rindolf left
[09:08] *** Chillance joined
[09:08] *** rindolf joined
[09:12] *** domidumont joined
[09:14] *** donaldh left
[09:15] *** berekuk left
[09:15] *** jerome_ left
[09:16] *** pecastro joined
[09:18] *** rindolf left
[09:18] *** rindolf joined
[09:19] *** atroxaper left
[09:27] *** rindolf left
[09:28] *** rindolf joined
[09:30] *** domidumont left
[09:30] *** domidumont joined
[09:37] *** rindolf left
[09:37] *** rindolf joined
[09:39] *** Nom- left
[09:40] *** Nom- joined
[09:46] *** rindolf left
[09:46] *** rindolf joined
[09:53] *** cognominal left
[09:53] *** cognominal joined
[09:54] *** rindolf left
[09:54] *** atroxaper joined
[09:54] *** rindolf joined
[09:58] <jnthn> o/

[09:58] <FROGGS> hi jnthn 

[09:59] <FROGGS> jnthn: that is the code with a Cool.pm, and load_module: https://github.com/rakudo-p5/v5/commit/311d5e3bd0

[10:03] <timotimo> i'm confused. nqp with -e works, but when i type it into stdin nothing happens

[10:03] <timotimo> this is known, yes?

[10:03] <timotimo> lack of readline library?

[10:03] <FROGGS> timotimo: nqp on parrot?

[10:04] *** rindolf left
[10:04] <jnthn> FROGGS: If you're putting it in a module you need to add "is export" to the lexical classes/subs.

[10:04] <FROGGS> jnthn: hmmm, I had that once.... will retest, thanks!

[10:04] *** rindolf joined
[10:04] <FROGGS> echo 'say(1)' | nqp

[10:04] <FROGGS> > 1

[10:04] <FROGGS> timotimo: ^^

[10:06] <timotimo> jvm version

[10:08] <jnthn> timotimo: I know the REPL is busted for some reason. I didn't yet have chance to work out why.

[10:08] <timotimo> OK. i'll be continuing to implement file and directory related ops for jvm

[10:08] <timotimo> they'll be needed eventually anyway, and so i'll bring about a quicker jakudo! yaaaaay

[10:08] <jnthn> I doubt it's anything too deep (probably mis-implemented something)

[10:11] <FROGGS> jnthn: btw, it would be cool if we had: perl6 -MMyModule:from<nqp> -e 'say something()'

[10:11] <FROGGS> dunno how well :<> work on the cmdline

[10:11] <FROGGS> okay, : should work everywhere

[10:14] <timotimo> java has no portable way to chdir?

[10:17] <jnthn> Um...wow.

[10:17] *** rindolf left
[10:17] *** rindolf joined
[10:17] <timotimo> it must! i'm just not finding it

[10:18] * jnthn didn't either on an initial google...

[10:18] <jnthn> I just found workarounds

[10:18] <timotimo> m(

[10:19] <timotimo> why not keep a "current directory" in the operations class! that's gotta work!!!!!

[10:22] <dalek> nqp/rak-jvm-support: 26f19d6 | (Timo Paulssen)++ | src/vm/jvm/ (2 files):

[10:22] <dalek> nqp/rak-jvm-support: implement unlink, cwd, rename, improve rmdir.

[10:22] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/26f19d61c1

[10:29] *** tgt joined
[10:29] <dalek> v5/rename: 60402f5 | (Tobias Leich)++ | / (11 files):

[10:29] <dalek> v5/rename: rename all Perl6::P5... to Perl5::...

[10:29] <dalek> v5/rename: review: https://github.com/rakudo-p5/v5/commit/60402f5541

[10:29] <dalek> nqp/rak-jvm-support: 6e192ab | (Timo Paulssen)++ | src/vm/jvm/ (2 files):

[10:29] <dalek> nqp/rak-jvm-support: copy, link and symlink. fix rename.

[10:29] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/6e192ab320

[10:29] <timotimo> that's all of the path related ops, except chdir.

[10:29] *** frdmn joined
[10:30] <dalek> nqp: 72df616 | (Timo Paulssen)++ | README (2 files):

[10:30] <dalek> nqp: let github render the readme prettily

[10:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/72df6169e1

[10:30] <dalek> v5/rename: 4e98e51 | (Tobias Leich)++ | rakudo.patch:

[10:30] <dalek> v5/rename: push rakudo changes

[10:30] <dalek> v5/rename: review: https://github.com/rakudo-p5/v5/commit/4e98e51804

[10:31] *** rindolf left
[10:31] *** rindolf joined
[10:43] *** rindolf left
[10:44] *** rindolf joined
[10:49] *** cognominal left
[10:49] *** roll joined
[10:54] *** muixirt joined
[10:56] *** rindolf left
[10:57] *** rindolf joined
[10:58] *** FROGGS[mobile] joined
[11:00] <dalek> v5/rename: bfce05c | (Tobias Leich)++ | lib/Perl5.pm:

[11:00] <dalek> v5/rename: remove .pm

[11:00] <dalek> v5/rename: review: https://github.com/rakudo-p5/v5/commit/bfce05c7cb

[11:02] *** jerome_ joined
[11:09] *** atroxaper left
[11:09] *** rindolf left
[11:09] *** rindolf joined
[11:09] *** atroxaper joined
[11:11] *** tgt left
[11:12] <sergot> hi! o/

[11:14] <tadzik> o/

[11:19] *** rindolf left
[11:19] *** rindolf joined
[11:22] *** tgt joined
[11:26] <masak> sergocie! \o/

[11:26] <masak> sergot: 4.5 hours to #masakism! :)

[11:29] <colomon> Ah, so it's during bell rehearsal.  :(

[11:30] <sergot> \o/

[11:30] <colomon> guess I can have my computer log it so I can backlog...

[11:32] <sergot> masak: how would it look like?

[11:32] *** eviltwin_b joined
[11:32] *** geekosaur left
[11:32] *** eviltwin_b is now known as geekosaur

[11:32] <masak> sergot: I guess we're all wondering that :)

[11:33] <sergot> masak: ok! :)

[11:34] *** rindolf left
[11:34] <sergot> good ;)

[11:34] *** rindolf joined
[11:34] <masak> sergot: short answer: I have some material, text and exercises. I expect some people to follow that in some manner, and some people to ad-lib and do their own thing and explore and improvise.

[11:35] <sergot> sounds good

[11:46] <Util> moritz: My last comment in the ticket explains my thinking on 16fa719.

[11:46] <Util> https://rt.perl.org/rt3//Public/Bug/Display.html?id=117731

[11:47] *** rindolf left
[11:47] *** rindolf joined
[11:47] *** tgt left
[11:48] *** woosley left
[11:48] *** tgt joined
[11:53] *** rindolf left
[11:54] *** rindolf joined
[11:54] *** census joined
[11:59] *** mavcunha joined
[12:00] *** cognominal joined
[12:00] *** skids left
[12:02] *** grondilu joined
[12:02] <colomon> rn: say set(1).perl

[12:02] <camelia> rakudo d2af40, niecza v24-37-gf9c8fc2: OUTPUT«set("1")␤»

[12:07] <masak> :/

[12:07] *** markov joined
[12:09] <masak> walk &

[12:09] *** rindolf left
[12:10] *** rindolf joined
[12:18] *** jaldhar left
[12:18] *** Nom- left
[12:19] *** Nom- joined
[12:19] <dalek> star: 1456211 | pmichaud++ | / (3 files):

[12:19] <dalek> star: Added PSGI to installed modules.

[12:19] <dalek> star: review: https://github.com/rakudo/star/commit/1456211a31

[12:19] *** crab2313 joined
[12:23] *** FROGGS[mobile] left
[12:24] *** sciurius joined
[12:25] *** rindolf left
[12:25] *** rindolf joined
[12:26] *** xinming left
[12:28] *** arnsholt_ is now known as arnsholt

[12:28] <colomon> rn: say set(1).WHAT

[12:28] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: Parameter '' in 'Set.gist' requires a defined argument␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Set.gist @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1362 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1364…

[12:28] <camelia> ..rakudo d2af40: OUTPUT«(Set)␤»

[12:31] *** Nom- left
[12:31] * colomon already has fixing that on his to-do list

[12:32] *** Nom- joined
[12:35] *** Nom- left
[12:35] *** Nom- joined
[12:37] <dalek> star: a944018 | pmichaud++ | modules/MODULES.txt:

[12:37] <dalek> star: Add note about jsonrpc dependency with PSGI.

[12:37] <dalek> star: review: https://github.com/rakudo/star/commit/a944018c81

[12:38] *** rindolf left
[12:38] *** rindolf joined
[12:39] <pmichaud> not sure what to do about the URI problems for Star :-|

[12:40] <pmichaud> oh

[12:41] <pmichaud> looks like what I have now isn't the current head for uri

[12:48] *** rindolf left
[12:48] <dalek> star: 8b4cf2d | pmichaud++ | / (2 files):

[12:48] <dalek> star: Update URI to point to new location.

[12:48] <dalek> star: review: https://github.com/rakudo/star/commit/8b4cf2d4bf

[12:49] *** rindolf joined
[12:49] *** domidumont left
[12:53] *** mathw_ is now known as mathw

[12:54] *** domidumont joined
[12:54] *** moritz_ joined
[12:59] *** rindolf left
[12:59] *** rindolf joined
[13:09] *** MrMeek-afk joined
[13:10] *** rindolf left
[13:10] *** MrMeek left
[13:10] *** rindolf joined
[13:11] *** rindolf left
[13:11] *** denisboyun joined
[13:13] <dalek> roast: 4f47ca9 | moritz++ | S16-filehandles/filestat.t:

[13:13] <dalek> roast: skip platform dependent tests

[13:13] <dalek> roast: review: https://github.com/perl6/roast/commit/4f47ca9fe8

[13:13] <moritz_> [Coke]: at your convenience, please check if this makes the failure from https://rt.perl.org/rt3/Ticket/Display.html?id=117685 go away

[13:19] *** deyan joined
[13:20] *** deyan is now known as LlamaRider

[13:20] *** kaare_ joined
[13:21] <timotimo> i'd like to get a bit of guidance with regard to my file operations. there may be some decisions that i made that aren't useful for nqp

[13:21] *** Targen joined
[13:25] *** Nom- left
[13:26] *** Nom- joined
[13:28] *** woosley joined
[13:29] *** woosley left
[13:31] *** skids joined
[13:54] <dalek> v5/rename: dd4090f | (Tobias Leich)++ | Makefile:

[13:54] <dalek> v5/rename: clean up the right dir

[13:54] <dalek> v5/rename: review: https://github.com/rakudo-p5/v5/commit/dd4090fa6d

[13:54] <dalek> v5/rename: 159f214 | (Tobias Leich)++ | / (2 files):

[13:54] <dalek> v5/rename: add the alien-statementlist at the end

[13:54] <dalek> v5/rename: 

[13:54] <dalek> v5/rename: So every module that changes $*MAIN, will trigger nibbling to this statementlist.

[13:54] <dalek> v5/rename: review: https://github.com/rakudo-p5/v5/commit/159f214bea

[13:54] *** crab2313 left
[13:54] <dalek> v5/experimental: dd4090f | (Tobias Leich)++ | Makefile:

[13:54] <dalek> v5/experimental: clean up the right dir

[13:54] <dalek> v5/experimental: review: https://github.com/rakudo-p5/v5/commit/dd4090fa6d

[13:54] <dalek> v5/experimental: 159f214 | (Tobias Leich)++ | / (2 files):

[13:54] <dalek> v5/experimental: add the alien-statementlist at the end

[13:54] <dalek> v5/experimental: 

[13:54] <dalek> v5/experimental: So every module that changes $*MAIN, will trigger nibbling to this statementlist.

[13:54] <dalek> v5/experimental: review: https://github.com/rakudo-p5/v5/commit/159f214bea

[13:57] *** denisboyun left
[14:03] *** ajr joined
[14:03] *** ajr is now known as Guest5462

[14:06] *** ilogger2 joined
[14:06] *** ChanServ sets mode: +v ilogger2

[14:15] *** espent joined
[14:24] *** ilogger2 joined
[14:24] *** ChanServ sets mode: +v ilogger2

[14:28] <LlamaRider> Hm, did the rakudo implementation of "dir" change intentionally?

[14:28] <LlamaRider> my @tests = dir 't/data', test => /'.txt' $$/;

[14:29] <LlamaRider> this guy used to return the bare filenames, now it also returns the 't/data/' prefix with them

[14:29] <moritz_> LlamaRider: it returns an IO::Path object, and did so before; it's just the default stringification of IO::Path that has changed

[14:30] *** chinaXing joined
[14:30] <moritz_> LlamaRider: use .basename if you just want the file name

[14:30] <LlamaRider> mkay, if it's intentional, I will refactor my test files.

[14:31] *** araujo joined
[14:31] <moritz_> sorry for the inconencience; the previous version was a hack to preserve backwards compatibility

[14:32] <LlamaRider> no worries :)

[14:36] <PerlJam> good $localtime all

[14:36] <jnthn> timotimo: What do you want some guidance with? :)

[14:36] * jnthn may be able to help

[14:38] <LlamaRider> So, Lingua::EN::Sentence installs with panda flawlessly again, moritz++ thanks for the quick response.

[14:42] *** chinaXing left
[14:45] <timotimo> just see if what i did is okay. maybe a hint for chdir would be great ;)

[14:47] <moritz_> LlamaRider++ # fixing Lingua::EN::Sentence

[14:47] *** tgt joined
[15:03] <GlitchMr> One hour to workshop in #masakism. Just mentioning.

[15:04] * geekosaur considers auditing... assuming something doesn't explode in his face (mmm, sev1s)

[15:06] <jnthn> timotimo: I can take a look at the patch you have

[15:06] <jnthn> timotimo: There is some user.dir thing, but it seems hacky

[15:06] <jnthn> timotimo: But it may be enough for now

[15:09] <timotimo> these "patches" are already in nqp/rak-jvm-support. i have nothing else

[15:10] <jnthn> timotimo: oh, you already pushed them

[15:10] <jnthn> timotimo: OK, then will review soon :)

[15:21] *** kivutar joined
[15:23] *** kivutar left
[15:26] *** birdwindupbird joined
[15:27] *** camelia joined
[15:28] *** ChanServ sets mode: +v camelia

[15:32] *** kivutar joined
[15:34] *** thou joined
[15:41] *** thundergnat joined
[15:42] *** isBEKaml joined
[15:57] <masak> three minutes until #masakism.

[16:01] *** japhb_ joined
[16:02] <colomon> masak++

[16:03] *** frdmn joined
[16:07] <masak> ...and we're off.

[16:07] <masak> man, that channel came alive.

[16:08] <sjn> yep :)

[16:09] <cognominal> :)

[16:12] *** benabik_ joined
[16:13] *** benabik_ is now known as benabik

[16:18] <gtodd> :)

[16:20] *** xinming joined
[16:21] <gtodd> ... if a piece of code walked through listed all the methods/functions available for every module in @INC  

[16:23] <gtodd> would that be exercising anything in rakudo that would show some useful improvement in speed performance?

[16:24] <flussence> the parser maybe

[16:25] <pmichaud> another rc candidate tarball for R* 2013.04:  http://pmichaud.com/sandbox/rakudo-star-2013.04-rc2.tar.gz

[16:25] <pmichaud> It still has errors in LWP::Simple and File::Tools

[16:25] <pmichaud> https://gist.github.com/pmichaud/5496339

[16:26] <pmichaud> if anyone wants to suggest fixes, let me know and I'll work on them.  (I know a lot of folks are playing in #masakism now. :-)

[16:31] <Util> labster: ping

[16:31] <gtodd> are: print $("reHTona tsuj".flip.tclc, Mu.^methods.grep(/p.**2l$/).tclc, "hacker\n");

[16:31] <labster> ahoy Util

[16:31] <gtodd> r: print $("reHTona tsuj".flip.tclc, Mu.^methods.grep(/p.**2l$/).tclc, "hacker\n");

[16:31] <camelia> rakudo d2af40: OUTPUT«Just another Perl hacker␤»

[16:31] <hoelzro> can you bind a RHS Pair to two variables on the LHS?

[16:32] <hoelzro> ex. my ( $first, $second ) := $pair?

[16:33] <Util> labster: Would a Parrot implementation of readlink() satisfy your needs, if it did not work (yet) on Win32?

[16:35] *** tgt left
[16:37] *** rindolf joined
[16:48] <PerlJam> hoelzro: why?

[16:48] <PerlJam> hoelzro: seems like an odd thing to want.  (why binding and not just assignment?)

[16:48] <dalek> nqp/rak-jvm-support: 66ea32d | pmichaud++ | src/ (4 files):

[16:48] <dalek> nqp/rak-jvm-support: "Temporarily" convert ?-quantified captures to use **0..1 instead.

[16:48] <dalek> nqp/rak-jvm-support: 

[16:48] <dalek> nqp/rak-jvm-support: This is in preparation for bringing the ?-quantifier in line with

[16:48] <dalek> nqp/rak-jvm-support: S05, such that ? is an "item quantifier" instead of a "list quantifier".

[16:48] <labster> Util: sure, for now.

[16:49] *** rindolf left
[16:49] <Util> labster: Good, for I wrote one last night :)

[16:49] <labster> Sorry, I'm a bit distracted by the #masakism class, y'know.

[16:49] *** dalek joined
[16:49] *** ChanServ sets mode: +v dalek

[16:49] <labster> In any case, it's part of the solution

[16:49] <Util> labster: predictable, given that moshpit :)

[16:49] <labster> Which is good, so Util++

[16:50] <Util> Polishing and tesing now. I expect to push within 70 min.

[16:50] <pmichaud> Util++

[16:51] <pmichaud> I really need to figure out how to get multiple windows to work in irssi...

[16:51] <Util> Written according to pmichaud's analysis (I was just typing), so pmichaud++ too!

[16:52] <Util> pmichaud: I will be glad to help. On my Mac, ssh'ed into Feather (and using Screen, but that is irrelevant I think), Esc+4 switches me to session 4, which is #parrot.

[16:53] <hoelzro> PerlJam: I have a list of Pairs

[16:53] <hoelzro> and I would like to do for @pairs -> ( $first, $second )

[16:53] <Util> Esc+Q switches to session 11 (the 11th channel I joined), which is #perl6, etc.

[16:53] <pmichaud> Util: oh, I can already switch between channels; I'm wanting multiple channels to appear at the same time

[16:54] <pmichaud> i.e., using /window show #n

[16:54] <PerlJam> hoelzro: oh!   for @pairs -> [ $first, $second ] { ... }  # IIRC

[16:54] <hoelzro> why [ ... ]?

[16:54] <Util> pmichaud: Oh, I have not done that, but I know that you can.

[16:54] *** berekuk joined
[16:54] <pmichaud> that works but there's no divider bar between the windows, which makes it hard for me to see where one window begins and another ends

[16:55] <flussence> the problem with irssi's split windows is you only get one statusbar for the lot, and then you have to pay attention to it all the time to make sure you're sending to the right channel...

[16:56] <pmichaud> flussence: I've seen pictures on the web where people have multiple statusbars

[16:57] <benabik> pmichaud: I *think* `/statusbar prompt type window` is what you're looking for.

[16:57] <pmichaud> and even with only one statusbar, if I just had a divider I'd be okay

[16:57] *** mtk joined
[16:57] <pmichaud> I'm opening up another irssi session now so I can experiment there without losing threads in my active irssi session :)

[16:57] *** birdwindupbird left
[16:57] <flussence> hm, maybe I'm misremembering...

[16:59] *** pmthium joined
[17:00] <flussence> .oO( would be nice if irssi was a client-server thing so all the windowy stuff could be done by tmux/screen... )

[17:00] <PerlJam> hoelzro: I was thinking about signature unpacking, but what I gave you doesn't work with Pairs apparently (just tried it)

[17:01] <PerlJam> hoelzro: maybe  for @p -> $p[:key($f), :value($s)] { ... }  # ??  

[17:02] <hoelzro> =(

[17:02] <PerlJam> aye, it's unweildy

[17:02] <jnthn> You don't need to take the $p, and you probably want (...) instead of [...]

[17:03] <TimToady> also want a space between

[17:03] <TimToady> (if you have the $p)

[17:03] <TimToady> otherwise it's gonna try to parse a subscript spec

[17:03] *** mtk left
[17:03] <jnthn> ah, and that :)

[17:03] <PerlJam> sorry, my brain isn't in the Perl 6 zone right now  :)

[17:06] <PerlJam> (I was secretly hoping you guys would chime in with the simpler syntax that looked something like  for @p -> [$f,$s] { ... } )

[17:06] *** mtk joined
[17:06] <Util> TimToady: I wish that for @pairs -> [ $first, $second ] { ... } worked as an alternative syntax to the proper (:key($f), :value($s)) syntax.

[17:07] <TimToady> @pairs».kv -> $first, $second might work

[17:07] <TimToady> r: say :foo.kv

[17:07] <Util> s/wish/have wished/; # While working on RC

[17:07] <camelia> rakudo d2af40: OUTPUT«foo True␤»

[17:08] <Util> TimToady: Noted. Thanks!

[17:08] <jnthn> oh, that's cute :)

[17:08] <jnthn> TimToady++

[17:09] <TimToady> well, it's also ugly

[17:09] <TimToady> one would like a better pair unpacker

[17:09] *** tgt joined
[17:10] <dalek> Heuristic branch merge: pushed 17 commits to rakudo/jvm-support by jnthn

[17:10] <TimToady> maybe [$first => $second] could be forced to work

[17:10] <PerlJam> Seems like it could be generalized such that "unpackers" could be defined in user space too  (so that custom objects could unpack nicely)

[17:10] <jnthn> PerlJam: You define a method Capture on the object to say how the object coerces to a capture.

[17:10] <PerlJam> for @points -> ($x,$y,$x) { ... }  # comes to mind immediately.

[17:10] <pmichaud> for @pairs { my ($first, $second) = .kv; ... }    # not too bad

[17:11] <TimToady> well, we're getting dangerously close to ADTs there...  :)

[17:11] <PerlJam> er, $z

[17:11] *** gtodd joined
[17:11] *** LordVorp left
[17:11] *** LordVorp joined
[17:12] <TimToady> but a special [$key => $value] syntax would be relative self documenting, if not terribly generalizable

[17:12] <PerlJam> aye

[17:12] *** test_____ joined
[17:12] *** pmthium left
[17:15] *** xinming left
[17:16] *** xinming joined
[17:21] <cognominal> is github slow or is this just for me?

[17:24] <diakopter> #masakism is slowing it down

[17:24] <cognominal> :)

[17:25] <tadzik> heh

[17:27] <PerlJam> TimToady: maybe {$k => $v} instead of [] since pairs are more aligned with hashes?   (something just bugs me about [$k=>$v] )

[17:29] * TimToady imagines an inside @array.kv expresses as {@keys => @values}

[17:29] <TimToady> *inside-out

[17:31] <sergot> n: my $s = "start\nsomething\nanything\nend"; for $s.split("\n") { $p = m:i/^start$/ ?? 1 !! m:i/^end$/ ?? 0 !! $_; .say if $p != 1|0; }

[17:31] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Variable $p is not predeclared at /tmp/OOgQPqYyny line 1:␤------> [32mg\nanything\nend"; for $s.split("\n") { [33m⏏[31m$p = m:i/^start$/ ?? 1 !! m:i/^end$/ ?? [0m␤␤Variable $p is not predeclared at /tmp/OOgQPqYyny line 1…

[17:31] *** toddr joined
[17:31] <sergot> r: my $s = "start\nsomething\nanything\nend"; my $p = 0; for $s.split("\n") { $p = m:i/^start$/ ?? 1 !! m:i/^end$/ ?? 0 !! $_; .say if $p != 1|0; }

[17:31] <camelia> rakudo d2af40: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏something' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10830␤  in sub infix:<==> at src/gen/CORE.setting:3008␤  in sub infix:<==> at src/gen/CORE.setting:3006␤…

[17:42] <diakopter> toddr: all the action is in #masakism

[17:44] *** toddr left
[17:50] *** tgt left
[17:52] *** orafu joined
[17:52] *** Woodi_ joined
[17:52] *** gtodd left
[17:53] *** dvj joined
[17:53] *** sizz joined
[17:53] *** gtodd joined
[17:54] *** `patch` joined
[17:56] *** tokuhirom joined
[17:59] *** autumn joined
[18:05] *** felher joined
[18:05] <Util> labster: readlink() for Parrot committed, and your ticket updated.

[18:05] <labster> thanks much, Util++

[18:09] *** gtodd left
[18:09] <Util> labster: You are very welcome.

[18:11] <dvj> r: (1, 2, 3, 4, 5, 10) >> say

[18:11] <camelia> rakudo d2af40: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of >> to do right shift;  in Perl 6 please use +> or ~>␤at /tmp/I7gwhpGqUm:1␤------> [32m(1, 2, 3, 4, 5, 10) >>[33m⏏[31m say[0m␤»

[18:11] <dvj> r: (1, 2, 3, 4, 5, 10) >>.say

[18:11] <camelia> rakudo d2af40: OUTPUT«[31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix > instead␤at /tmp/pdmZc6aMc_:1␤------> [32m(1, 2, 3, 4, 5, 10) >>[33m⏏[31m.say[0m␤»

[18:12] <dvj> r: (1, 2, 3, 4, 5, 10) >>.say

[18:12] <camelia> rakudo d2af40: OUTPUT«[31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix > instead␤at /tmp/SDdjtUOnn5:1␤------> [32m(1, 2, 3, 4, 5, 10) >>[33m⏏[31m.say[0m␤»

[18:12] <dvj> r: (1, 2, 3, 4, 5, 10)>>.say

[18:12] <camelia> rakudo d2af40: OUTPUT«10␤4␤2␤5␤3␤1␤»

[18:12] <dvj> r: (1, 2, 3, 4, 5, 10)>>.print

[18:12] <camelia> rakudo d2af40: OUTPUT«1042531»

[18:12] <dvj> r: (1..10)>>.print

[18:12] <camelia> rakudo d2af40: OUTPUT«10864297531»

[18:13] *** gtodd joined
[18:16] <TimToady> dvj: you shouldn't rely on the ordering of >> for things with side effects

[18:16] <TimToady> (like say or print)

[18:17] <TimToady> since hyper operators specifically promise you don't care, so it can do them in parallel

[18:18] <TimToady> r: .say for 1, 2, 3, 4, 5, 10

[18:18] <dvj> oh oops, I was just testing. Mixed windows with private chat with camelia 

[18:18] <camelia> rakudo d2af40: OUTPUT«1␤2␤3␤4␤5␤10␤»

[18:18] <TimToady> is how we usually get around that

[18:18] <TimToady> np

[18:19] <dvj> :)

[18:19] *** benabik left
[18:30] *** census joined
[18:30] *** mavcunha joined
[18:33] *** tgt joined
[18:42] *** euidzero joined
[18:47] * skids marvels that there are no less than 5 overloaded compsci expansions for "ADT"

[18:48] <skids> .oO(this acronym is now officially closed for new meanings)

[18:52] <jnthn> .oO( Apparently Delightful TLA )

[18:55] *** euidzero left
[18:59] <pmichaud> .oO( Already Did That )

[19:03] *** frdmn left
[19:03] *** frdmn joined
[19:06] *** frd|afk joined
[19:10] *** frdmn left
[19:12] *** Targen joined
[19:13] <dalek> perl6-roast-data: 4d55267 | coke++ | / (4 files):

[19:13] <dalek> perl6-roast-data: today (automated commit)

[19:13] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4d55267e75

[19:21] <dalek> roast: 27ead91 | pmichaud++ | S05-match/ (3 files):

[19:21] <dalek> roast: Result of a failed regex match is now Nil;  add test for it and

[19:21] <dalek> roast: remove some tests that wanted failed matches to be Match objects.

[19:21] <dalek> roast: review: https://github.com/perl6/roast/commit/27ead91d70

[19:21] <dalek> rakudo/nom: 5edb135 | pmichaud++ | src/core/Cursor.pm:

[19:21] <dalek> rakudo/nom: Failed regex matches should return Nil.

[19:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5edb1357be

[19:27] *** fgomez joined
[19:28] <FROGGS> kids are in bed \o/

[19:28] <tadzik> \o/

[19:28] <tadzik> ...for now... :>

[19:29] *** Targen left
[19:29] *** grondilu joined
[19:30] <FROGGS> *g*

[19:31] <timotimo> hm, i'd love to get EXPORT sub support into rakudo before the next star, so i can make ADT super shiny and suggest it be included in R* :)

[19:32] * grondilu failed to install LWP::Simple

[19:34] <FROGGS> r: sub test($s = CALLER::<$_> is rw) { $s.chop }; $_ = "abc"; test()

[19:34] <camelia> rakudo d2af40: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing block␤at /tmp/4aBP1urjlL:1␤------> [32msub test($s = CALLER::<$_> [33m⏏[31mis rw) { $s.chop }; $_ = "abc"; test()[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤»…

[19:34] <FROGGS> TimToady: is that supposed to work?

[19:34] <FROGGS> std: sub test($s = CALLER::<$_> is rw) { $s.chop }; $_ = "abc"; test()

[19:34] *** sqirrel joined
[19:34] <camelia> std 316b40b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Default expression must come last at /tmp/EkpsxexFb6 line 1:␤------> [32msub test($s = CALLER::<$_> [33m⏏[31mis rw) { $s.chop }; $_ = "abc"; test()[0m␤Unable to parse signature at /tmp/EkpsxexFb6 line 1:␤------> [32msub test[33m⏏…

[19:34] <FROGGS> std: sub test($s is rw = CALLER::<$_>) { $s.chop }; $_ = "abc"; test()

[19:34] <camelia> std 316b40b: OUTPUT«ok 00:00 46m␤»

[19:35] <FROGGS> ahh, cool

[19:35] <FROGGS> r: sub test($s is rw = CALLER::<$_>) { $s.chop }; $_ = "abc"; test()

[19:35] <camelia> rakudo d2af40: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot use 'is rw' on an optional parameter␤at /tmp/1OYwe2nb08:1␤------> ␤»

[19:35] * FROGGS is sad

[19:35] <timotimo> :(

[19:35] *** test_____ left
[19:35] <FROGGS> but np, I can make multis, one with an arg and one without

[19:37] *** pmurias joined
[19:37] <pmurias> what happened to the irc log?

[19:38] <FROGGS> server is dead

[19:38] <PerlJam> It broke.

[19:38] <FROGGS> so there is a backup log running

[19:42] *** awwaiid left
[19:42] *** awwaiid joined
[19:43] *** pecastro joined
[19:47] <diakopter> yes

[19:48] <dalek> nqp/rak-jvm-support: 7d9f0b9 | jnthn++ | src/vm/jvm/ (2 files):

[19:48] <dalek> nqp/rak-jvm-support: Case consistency with Parrot backend.

[19:48] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/7d9f0b98c2

[19:48] <dalek> nqp/rak-jvm-support: 1e2629a | jnthn++ | src/vm/jvm/QAST/Compiler.nqp:

[19:48] <dalek> nqp/rak-jvm-support: Add infrastructure for getting op result type.

[19:48] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/1e2629a01e

[19:48] <dalek> nqp/rak-jvm-support: 907a86c | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/CallFrame.java:

[19:48] <dalek> nqp/rak-jvm-support: Make 24-module.t less busted on JVM.

[19:48] <dalek> nqp/rak-jvm-support: 

[19:48] <dalek> nqp/rak-jvm-support: This also helps towards the Rakudo work.

[19:48] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/907a86cc9b

[19:53] <dalek> rakudo/jvm-support: e14ef54 | jnthn++ | src/ (2 files):

[19:53] <dalek> rakudo/jvm-support: Get hold of QAST compiler in more portable way.

[19:53] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/e14ef54d26

[19:53] <dalek> rakudo/jvm-support: 623d45e | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[19:53] <dalek> rakudo/jvm-support: Implement p6bool op for JVM.

[19:53] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/623d45eff2

[19:53] <dalek> rakudo/jvm-support: f5cd6d9 | jnthn++ | src/Perl6/Actions.nqp:

[19:53] <dalek> rakudo/jvm-support: Correct atkey that should be atpos.

[19:53] <dalek> rakudo/jvm-support: 

[19:53] <dalek> rakudo/jvm-support: Also remove an unrequired "my"; it's the default for subs.

[19:53] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/f5cd6d94a4

[19:53] <dalek> rakudo/jvm-support: 11c7841 | jnthn++ | src/Perl6/World.nqp:

[19:53] <dalek> rakudo/jvm-support: Replace a join with nqp::join.

[19:53] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/11c7841d60

[19:54] <jnthn> Well, now I get to line 77 of CORE.setting before it blows up... :)

[19:55] <[Coke]> 77 out of...

[19:56] <[Coke]> that sounds trollish, sorry. glad you're cutting into it at all.

[19:57] *** thundergnat left
[19:58] <jnthn> 13,000 or so :P

[19:59] <[Coke]> WOOT.

[19:59] <jnthn> Well, I suspect that the further in I get, the faster I'll be able to go.

[19:59] <jnthn> At the moment I'm hitting every little missing thing.

[20:01] <pmurias> would it make sense for me to submit a gsoc proposal for a rakudo/nqp javascript backend to the parrot foundation?

[20:01] *** frd|afk left
[20:02] <jnthn> Hah. Just hit "need signature binding". There's an interesting little project. :P

[20:02] <jnthn> pmurias: Hm, good question. :)

[20:02] <diakopter> if it's going to be re-absorbed, I'd say yes. If it's going to be dissolved, I'd say yes.

[20:03] <jnthn> pmurias: I'd be happy to see that worked on as a gsoc project.

[20:03] <[Coke]> did TPF get accepted? I'd submit it there first, parrot second.

[20:04] <pmurias> TPF didn't take part

[20:04] *** frdmn joined
[20:04] <[Coke]> O_o

[20:04] <[Coke]> I'm not sure parrot is a great place to submit that, since it has nothing to do with parrot.

[20:05] <[Coke]> I could see doing it as a backup, but not as a primary. But I'm just one guy. You should ask over in #parrot on irc.perl.org

[20:06] <pmurias> is there anyone else submiting a gsoc proposal to the parrot foundation?

[20:06] <[Coke]> Yes, though I haven't seen any perl6 proposals.

[20:07] <pmichaud> based on past discussions, I wouldn't expect the Parrot Foundation to be in favor of funding proposals to support alternate VMs

[20:08] <pmichaud> but I'd be hugely in favor of seeing a javascript-based backend for NQP.

[20:09] <diakopter> pmichaud: but it wouldn't be funded by the parrot foundation; it'd be funded by google

[20:09] <jnthn> If it's between trying to submit it through the Parrot foundation and not submitting it at all, it may be worth a try.

[20:10] <pmichaud> diakopter/jnthn:  the sticking point in the past hasn't been about money.

[20:10] <PerlJam> um ... if gsoc doesn't fit, maybe a normal TPF grant would?

[20:11] <pmichaud> there are still Hague grants, too :)

[20:11] <pmichaud> I'm not sure if javascript backend for nqp would qualify there, though; the Hague grants are traditionally about new Perl 6 features, not just porting what we have to other platforms

[20:12] <pmichaud> I'm not saying one can't apply for gsoc through the Parrot Foundation; just that some of the people involved have been negative towards the idea of doing anything that helps NQP be multi-platform.

[20:13] <pmichaud> so, more like saying "watch for landmines"

[20:18] <[Coke]> as a straight TPF grant, it would be considered, sure.

[20:19] <pmichaud> yeah, I suspect it'd get fair consideration as a straight TPF grant.

[20:19] <pmichaud> and wherever it's proposed, I'll be in favor of it.  :)

[20:19] <dalek> rakudo/jvm-support: 80f3017 | jnthn++ | src/Perl6/Actions.nqp:

[20:19] <dalek> rakudo/jvm-support: Make sure $*DISPATCHER is declared before use.

[20:19] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/80f3017154

[20:19] *** nikosv joined
[20:20] <[Coke]> diakopter: it's not just funding, it's time, energy (mentors required, etc.)

[20:20] <Util> 1. The Perl Foundation is about to umbrella the former elements of Parrot Foundation, needed due to temp lack of manpower.

[20:20] <Util> 2. The Perl Foundation failed to register as a GSoC org, due to temp lack of (one key) manpower.

[20:20] <Util> 3. GSoC tasks do not cost either group any money.

[20:21] <Util> 4. I am the GSoC backup admin for PaFo, and defacto primary admin while dukeleto is away.

[20:21] <Util> Therefore, I will look favorably and equitably on any Perl[56]-related tasks, students, mentors, or anything else related.

[20:21] <[Coke]> pmurias: http://www.perlfoundation.org/how_to_write_a_proposal

[20:21] <[Coke]> Util++

[20:22] <Util> Oh, and 5. Parrot is moving to focus on the current primary client: Rakudo.

[20:25] <lizmat> rn: use Test; diag Mu

[20:25] <camelia> rakudo 5edb13: OUTPUT«Nominal type check failed for parameter '$message'; expected Any but got Mu instead␤  in sub diag at lib/Test.pm:138␤  in block  at /tmp/ii8clYH8nv:1␤␤»

[20:25] <camelia> ..niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: Nominal type check failed in binding '$str' in 'diag'; got Mu, needed Any␤  at /home/p6eval/niecza/lib/Test.pm6 line 0 (diag @ 1) ␤  at /tmp/0x3xE84wmt line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4299 (ANON @ …

[20:25] <pmichaud> as a gsoc grant, I volunteer to be a mentor.  I suspect others would be willing mentors as well.  (Not that pmurias++ would need much in the way of mentoring, which is why I volunteer :)

[20:25] <lizmat> rn: use Test; diag Any

[20:25] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1356 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/Test.pm6 li…

[20:25] <camelia> ..rakudo 5edb13: OUTPUT«use of uninitialized value of type Any in string context  in sub diag at lib/Test.pm:140␤␤# ␤»

[20:25] * lizmat wonders if this behaviour of Test::diag is intentional ?

[20:26] *** isBEKaml left
[20:26] <lizmat> perl5: use Test::More; diag undef

[20:26] <lizmat> p5: use Test::More; diag undef

[20:27] <timotimo> eval: print("hello!");

[20:27] <lizmat> eval: use Test::More; diag undef

[20:27] <diakopter> rn: use Test; diag Any.new

[20:27] <camelia> rakudo 5edb13: OUTPUT«# Any<-820487277>␤»

[20:27] <camelia> ..niecza v24-37-gf9c8fc2: OUTPUT«# Any()<instance>␤»

[20:27] <timotimo> rest in peace, perl5 eval bot :(

[20:27] <jnthn> lizmat: Maybe diag should .gist it

[20:27] <pmichaud> lizmat: I think it has more to do with the printing of an undefined value.

[20:28] <pmichaud> r:  print Any

[20:28] <camelia> rakudo 5edb13: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/SBaB1jaMJ3:1␤␤»

[20:28] <pmichaud> r:  print "# " ~ Any

[20:28] <camelia> rakudo 5edb13: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/Tq8_EZzbtc:1␤␤# »

[20:28] <jnthn> But I'm not very surprised by the current behavior either.

[20:28] <lizmat> the thing is that I have a problem in my masakism code, trying to figure it out with "diag", and the "diag" stops the tests

[20:28] <masak> quick summary of today's #masakism workshop: it was a success. people appear to want to do it again. date not set for that, but we'll make sure people get the message.

[20:29] <jnthn> \o/

[20:29] <pmichaud> ...the diag stops the tests?  that seems odd.

[20:29] <masak> indeed.

[20:29] <pmichaud> diag throws a warning, but normally doesn't terminate the process.

[20:29] <flussence> p5eval: quack

[20:29] <p5eval> flussence: quack

[20:29] <masak> :)

[20:29] <masak> p5eval: blub blub blub

[20:29] <p5eval> masak: ERROR: Can't locate object method "blub" via package "blub" (perhaps you forgot to load "blub"?) at (eval 7) line 1.

[20:29] <flussence> .oO( quacks do echo... I've been lied to! )

[20:30] <lizmat> not so: https://gist.github.com/lizmat/5498119

[20:30] <jnthn> pmichaud: If you pass Mu to it then it fails to bind to the Any default of the parameter, maybe that's it.

[20:30] <pmichaud> yeah, that would be odd.  perhaps &diag should accept Mu as an argument.

[20:31] <pmichaud> that would make sense for something like

[20:31] <pmichaud> r:  use Test;  diag 2|3;

[20:31] <camelia> rakudo 5edb13: OUTPUT«# 2␤# 3␤»

[20:31] <lizmat> well, I wasn't passing Mu consciously to it, the value I wanted to show happened to be Mu (which was the error)

[20:31] <pmichaud> which probably ought to be

[20:31] <pmichaud> r:  use Test;  diag (2|3).Str;

[20:31] <camelia> rakudo 5edb13: OUTPUT«# any(2, 3)␤»

[20:31] * pmichaud changes &diag.

[20:32] <pmichaud> spectesting now

[20:33] <jnthn> pmichaud: Maybe .gist instead of .Str?

[20:33] <jnthn> pmichaud: so diag Mu emits "# Mu" not the warning?

[20:34] <lizmat> that would be consistent with Perl 5's Test::More::diag

[20:34] <pmichaud> jnthn: well, I don't think everything should be gist'ed there, no.

[20:34] <pmichaud> at least, I'm not certain of that yet.

[20:34] <lizmat> r: use Test; diag Mu.gist; diag Any.gist; diag "foo".gist

[20:34] <camelia> rakudo 5edb13: OUTPUT«# (Mu)␤# (Any)␤# foo␤»

[20:35] <lizmat> r: use Test; diag Mu.gist; diag Any.gist; diag "foo".gist; 1.gist

[20:35] <camelia> rakudo 5edb13: OUTPUT«# (Mu)␤# (Any)␤# foo␤»

[20:35] <lizmat> r: use Test; diag Mu.gist; diag Any.gist; diag "foo".gist; diag 1.gist

[20:35] <camelia> rakudo 5edb13: OUTPUT«# (Mu)␤# (Any)␤# foo␤# 1␤»

[20:35] <lizmat> seems right to me so far ;-)

[20:37] *** nikosv left
[20:38] <masak> I should probably blog about the workshop. some kind of summary.

[20:38] * masak will try to do that tomorrow evening

[20:43] <lizmat> I also wonder whether the same problem doesn't exist for Test::is:

[20:43] <lizmat> Nominal type check failed for parameter ''; expected Any but got Mu instead

[20:43] <lizmat>   in sub infix:<eq> at src/gen/CORE.setting:1286

[20:43] <lizmat>   in sub is at lib/Test.pm:81

[20:44] <diakopter> yapc austin registrations to date: http://i.imgur.com/70CYXPp.png

[20:45] *** geekosaur joined
[20:47] *** sqirrel left
[20:48] *** frdmn left
[20:52] <masak> lizmat: looks like.

[20:53] <masak> lizmat: putting junctions in the type system kinda sucks sometimes. this is one of those times.

[20:53] <lizmat> guess so…  :-)

[20:54] <PerlJam> diakopter: What was the expected number of registrations?

[20:54] <lizmat> anyways, I'm trying to grok why this is not a good way to pass a block with 1 parameter as a parameter:

[20:54] <lizmat> $promise.then( { $value= $^x } );

[20:54] <dalek> perl6-examples: c35ee7a | (David Warring)++ | parsers/CSSGrammar.pm:

[20:54] <dalek> perl6-examples: use separator operator (%) in CSS Grammar. e.g. for declarations

[20:54] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/c35ee7a4e5

[20:54] <masak> lizmat: looks kosher to me.

[20:54] <lizmat> well, it doesn't work  :-)

[20:55] <lizmat> that's where my Mu's are coming from

[20:55] <jnthn> r: my $value; my $b = { $value = $^x }; $b(42); say $value

[20:55] <camelia> rakudo 5edb13: OUTPUT«42␤»

[20:55] <jnthn> Looks working to me.

[20:55] <dalek> rakudo/nom: 8025743 | pmichaud++ | lib/Test.pm:

[20:55] <dalek> rakudo/nom: Switch Test.pm's &diag function to accept Mu arguments.  We may

[20:55] <dalek> rakudo/nom: also want to .gist the message, but I leave that to others to debate. :-)

[20:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8025743465

[20:55] <jnthn> Guess the bug is not exactly that.

[20:55] <masak> r: class Promise { method then(&fn) { say "before"; &fn(42); say "after" } }; my Promise $promise .= new; my $value = 0; $promise.then( { $value = $^x } ); say $value

[20:55] <camelia> rakudo 5edb13: OUTPUT«before␤after␤42␤»

[20:55] <masak> lizmat: wfm

[20:56] <grondilu> rn: say qqx{date -d {say GMT}}

[20:56] <diakopter> PerlJam: dunno.. that graph doesn't include the 50 or so speakers who aren't buying badges

[20:56] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: rungather may not be used in safe mode␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (rungather @ 0) ␤  at /tmp/HHbMKUDJKX line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4299 (ANON @ 3) ␤  at /home/p6eval/niec…

[20:56] <camelia> ..rakudo 5edb13: OUTPUT«qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:2␤  in sub QX at src/RESTRICTED.setting:9␤  in block  at /tmp/ZG7if4NpGf:1␤␤»

[20:56] <grondilu> can't I interpolate inside a qqx{} quote?

[20:56] <masak> grondilu: read the error message.

[20:57] <diakopter> PerlJam: I'm guessing maybe 75 more register, and another 25 show up without registering

[20:57] <grondilu> I know I can't do it *here*, but it seems that I can't even on my machine :/

[20:57] <jnthn> grondilu: What are you expecting to interpolate there? The return value of say?

[20:58] <grondilu> oh yeah

[20:58] <FROGGS> rn: say qq{date -d {say GMT}}

[20:58] <camelia> rakudo 5edb13, niecza v24-37-gf9c8fc2: OUTPUT«date -d {say GMT}␤»

[20:58] <FROGGS> that is what you execute

[20:58] <grondilu> rn: say qqx{date -d {"GMT"}}

[20:58] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: rungather may not be used in safe mode␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (rungather @ 0) ␤  at /tmp/2zOYykMcpZ line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4299 (ANON @ 3) ␤  at /home/p6eval/niec…

[20:58] <camelia> ..rakudo 5edb13: OUTPUT«qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:2␤  in sub QX at src/RESTRICTED.setting:9␤  in block  at /tmp/Zxsak8rvJg:1␤␤»

[20:58] <jnthn> Also, you need to use different quotes than { ... } if you want to interpolate a closure.

[20:58] <grondilu> oops sorry forgot to remove :x

[20:58] <grondilu> rn: say qq{date -d {"GMT"}}

[20:58] <camelia> rakudo 5edb13, niecza v24-37-gf9c8fc2: OUTPUT«date -d {"GMT"}␤»

[20:59] <jnthn> rn: say qq[date -d {"GMT"}]

[20:59] <camelia> rakudo 5edb13, niecza v24-37-gf9c8fc2: OUTPUT«date -d GMT␤»

[20:59] <jnthn> Nestings of the quote starter/stopper take precedence over escapes.

[20:59] <timotimo> r: say qq{ foo { bar } baz };

[21:00] <camelia> rakudo 5edb13: OUTPUT« foo { bar } baz ␤»

[21:00] <masak> grondilu: what jnthn said.

[21:00] <timotimo> so the nested braces will make no difference but be counted for equality for ending the quotation?

[21:00] <masak> grondilu: so it's work if you don't use {} on the outside.

[21:00] <grondilu> ok

[21:01] <jnthn> timotimo: yes

[21:02] <[Coke]> masak++ #ism

[21:02] * grondilu is trying to run something like qqx[echo $longDNAstring |grep -F "{join "n", @interwoven_patterns}"]

[21:03] <grondilu> because there is no fgrep version of grep in Perl6, is there?

[21:03] <grondilu> !  it actually worked

[21:04] * grondilu is now trying with the full length DNA string...

[21:05] *** mavcunha left
[21:07] *** mavcunha joined
[21:10] <lue> hello o/

[21:12] <dalek> v5/experimental: 3129123 | (Tobias Leich)++ | / (2 files):

[21:12] <dalek> v5/experimental: enable "use v6" and load Perl5::Terms (in a crappy way)

[21:12] <dalek> v5/experimental: review: https://github.com/rakudo-p5/v5/commit/312912342b

[21:12] <dalek> v5/experimental: 394a1c5 | (Tobias Leich)++ | / (4 files):

[21:12] <dalek> v5/experimental: move Cool.pm to Perl5/Terms.pm, which has a working sub chop

[21:12] <dalek> v5/experimental: review: https://github.com/rakudo-p5/v5/commit/394a1c50bf

[21:12] <dalek> v5/cool: 60402f5 | (Tobias Leich)++ | / (11 files):

[21:12] <dalek> v5/cool: rename all Perl6::P5... to Perl5::...

[21:12] <dalek> v5/cool: review: https://github.com/rakudo-p5/v5/commit/60402f5541

[21:12] <dalek> v5/cool: 4e98e51 | (Tobias Leich)++ | rakudo.patch:

[21:12] <dalek> v5/cool: push rakudo changes

[21:13] <dalek> v5/cool: review: https://github.com/rakudo-p5/v5/commit/4e98e51804

[21:13] <dalek> v5/cool: bfce05c | (Tobias Leich)++ | lib/Perl5.pm:

[21:13] <dalek> v5/cool: remove .pm

[21:13] <dalek> v5/cool: review: https://github.com/rakudo-p5/v5/commit/bfce05c7cb

[21:13] <dalek> v5/cool: dd4090f | (Tobias Leich)++ | Makefile:

[21:13] <dalek> v5/cool: clean up the right dir

[21:13] <dalek> v5/cool: review: https://github.com/rakudo-p5/v5/commit/dd4090fa6d

[21:13] <dalek> v5/cool: 159f214 | (Tobias Leich)++ | / (2 files):

[21:13] <dalek> v5/cool: add the alien-statementlist at the end

[21:13] <dalek> v5/cool: 

[21:13] <dalek> v5/cool: So every module that changes $*MAIN, will trigger nibbling to this statementlist.

[21:13] <dalek> v5/cool: review: https://github.com/rakudo-p5/v5/commit/159f214bea

[21:13] <FROGGS> hi lue

[21:13] <lue> what does "diag" mean/do, by the way? DIAGnostic? DIAGonal?

[21:13] <FROGGS> the former

[21:14] *** mavcunha left
[21:31] *** test__ joined
[21:31] *** test__ left
[21:37] <lizmat> rn: my @a; @a.push {...}; $_() for @a

[21:37] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unexpected block in infix position (method call needs colon or parens to take arguments) at /tmp/lHLWIerXVt line 1:␤------> [32mmy @a; @a.push [33m⏏[31m{...}; $_() for @a[0m␤␤Parse failed␤␤»

[21:37] <camelia> ..rakudo 802574: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?)␤at /tmp/7uUU26mse6:1␤------> [32mmy @a; @a.push [33m⏏[31m{...}; $_() for @a[0m␤    expecting any of:␤        method arguments␤      …

[21:38] <FROGGS> rn: my @a; @a.push: {...}; $_() for @a

[21:38] <lizmat> sub foo {...}; my @a; @a.push &foo

[21:38] <camelia> rakudo 802574: OUTPUT«Stub code executed␤  in method sink at src/gen/CORE.setting:10840␤  in method reify at src/gen/CORE.setting:5637␤  in method gimme at src/gen/CORE.setting:6058␤  in method eager at src/gen/CORE.setting:6037␤  in block  at /tmp/MJjP9mmGWq:1␤␤»

[21:38] <camelia> ..niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: >>>Stub code executed␤  at /tmp/Xub62wyPlo line 1 (ANON @ 4) ␤  at /tmp/Xub62wyPlo line 1 (mainline @ 8) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4299 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4300 (module-CORE …

[21:38] <lizmat> it should have been:

[21:38] <lizmat> rn: sub foo {...}; my @a; @a.push: &foo

[21:38] <camelia> rakudo 802574, niecza v24-37-gf9c8fc2:  ( no output )

[21:39] <FROGGS> same as: rn: my @a; @a.push {...}; $_() for @a

[21:39] <FROGGS> err, this: rn: my @a; @a.push: {...}; $_() for @a

[21:39] <lizmat> indeed, but the missing : stumped me for a long while

[21:39] <colomon> r: https://gist.github.com/colomon/5498600

[21:40] <camelia> rakudo 802574:  ( no output )

[21:40] <colomon> doh!

[21:40] <lizmat> rn: my @a; @a.push {*}; $_() for @a

[21:40] <camelia> rakudo 802574: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?)␤at /tmp/wX8lAP75Js:1␤------> [32mmy @a; @a.push [33m⏏[31m{*}; $_() for @a[0m␤    expecting any of:␤        method arguments␤        …

[21:40] <camelia> ..niecza v24-37-gf9c8fc2: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unexpected block in infix position (method call needs colon or parens to take arguments) at /tmp/AlXsfl09LW line 1:␤------> [32mmy @a; @a.push [33m⏏[31m{*}; $_() for @a[0m␤␤Parse failed␤␤»

[21:40] <colomon> r: https://gist.github.com/colomon/5498600

[21:40] <camelia> rakudo 802574: OUTPUT«Just another Perl hacker␤»

[21:40] <lizmat> sub foo {*}; my @a; @a.push &foo; $_() for @a

[21:40] <lizmat> rn: sub foo {*}; my @a; @a.push &foo; $_() for @a

[21:40] <camelia> rakudo 802574:  ( no output )

[21:40] <camelia> ..niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Niecza.Kernel.TypeDispatcher (Niecza.Frame th, Boolean tailcall) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.StandardTypeProtoC (Niecza.…

[21:41] <lizmat> the silence of rakudo stumped me

[21:41] <colomon> lizmat: you didn't tell it to say anything.

[21:41] <lizmat> rn: sub foo {say "foo"}; my @a; @a.push &foo; $_() for @a

[21:41] <FROGGS> r: sub foo { say 42 }; my @a; @a.push &foo; $_() for @a

[21:41] <camelia> rakudo 802574, niecza v24-37-gf9c8fc2: OUTPUT«foo␤»

[21:41] <camelia> rakudo 802574: OUTPUT«42␤»

[21:42] <colomon> well, maybe it should have given you an error.  hmm....

[21:42] <jnthn> @a.push &foo # parses as @a.push & foo()

[21:42] <FROGGS> weird, the : after push isnt always needed?

[21:42] <FROGGS> ahh, thats why

[21:42] <lizmat> FROGGS: it *is*

[21:42] <jnthn> FROGGS: not if it's argless, or you couldn't write $a.foo = 42;

[21:43] <jnthn> Well, it *is* needed if you want to give arguments to push :)

[21:43] <dalek> v5/experimental: 9ce1b77 | (Tobias Leich)++ | STATUS.md:

[21:43] <dalek> v5/experimental: status update after fudging op/chop.t

[21:43] <dalek> v5/experimental: review: https://github.com/rakudo-p5/v5/commit/9ce1b770ff

[21:44] <lizmat> anyway, I learned a lot from this…  :-)

[21:45] *** donaldh joined
[21:45] *** Targen joined
[21:50] *** kurahaupo joined
[21:52] <masak> lizmat: glad to hear it.

[21:52] <masak> that was the idea :)

[21:53] <donaldh> Is it possible to eval nqp here?

[21:53] <FROGGS> nqp: say("hello!")

[21:53] <camelia> nqp: OUTPUT«hello!␤»

[21:53] <masak> yes, now I see why @a.push &foo was legal.

[21:53] <masak> that kinda sucks...

[21:54] <donaldh> FROGGS: thanks.

[21:54] <FROGGS> you're welcome

[21:54] <FROGGS> r: my @a; @a.push

[21:54] <camelia> rakudo 802574:  ( no output )

[21:54] <FROGGS> r: $_ = 42; my @a; @a.push; say @a

[21:54] <camelia> rakudo 802574: OUTPUT«␤»

[21:54] * donaldh notes it is not mentioned in the banner

[21:54] <FROGGS> what does .push without an arg?

[21:54] <FROGGS> camelia: help

[21:54] <camelia> FROGGS: Usage: <(nqp-jvm|star|pugs|nqp|std|niecza|rakudo|b|nom|npr|n|r|perl6|prn|rn|p|rnp|nrp|pnr|rpn|p6|nr)(?^::\s) $perl6_program>

[21:55] <FROGGS> it is too much to put it in topic

[21:55] <lizmat> rn: class A { }; my $a= A.new( foo => 1 ) # shouldn't this complain about trying to initialize a non-existing attribute?

[21:55] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/9h2An7RCRL line 1:␤------> [32mclass A { }; my [33m⏏[31m$a= A.new( foo => 1 ) # shouldn't this c[0m␤␤»

[21:55] <camelia> ..rakudo 802574:  ( no output )

[21:55] <lizmat> rn: class A { }; my $a= A.new( foo => 1 ); $a # shouldn't this complain about trying to initialize a non-existing attribute?

[21:55] <camelia> rakudo 802574, niecza v24-37-gf9c8fc2:  ( no output )

[21:56] *** pecastro left
[21:57] <donaldh> nqp: nqp::say(nqp::isprime_I(nqp::box_i(-4, nqp::knowhow().new_type(:name('TestBigInt'), :repr('P6bigint'))), 0));

[21:57] <camelia> nqp: OUTPUT«0␤»

[21:58] <donaldh> nqp::say(nqp::isprime_I(nqp::box_i(-4, nqp::knowhow().new_type(:name('TestBigInt'), :repr('P6bigint'))), 1));

[21:58] *** pecastro joined
[21:58] <donaldh> nqp: nqp::say(nqp::isprime_I(nqp::box_i(-4, nqp::knowhow().new_type(:name('TestBigInt'), :repr('P6bigint'))), 1));

[21:58] <camelia> nqp: OUTPUT«0␤»

[21:58] * lizmat submits rakudobug

[21:59] <donaldh> nqp: nqp::say(nqp::isprime_I(nqp::box_i(-3, nqp::knowhow().new_type(:name('TestBigInt'), :repr('P6bigint'))), 1));

[21:59] <camelia> nqp: OUTPUT«0␤»

[21:59] <donaldh> nqp: nqp::say(nqp::isprime_I(nqp::box_i(3, nqp::knowhow().new_type(:name('TestBigInt'), :repr('P6bigint'))), 1));

[21:59] <camelia> nqp: OUTPUT«1␤»

[22:00] <donaldh> Sane. Saner than Java it seems.

[22:00] <jnthn> lizmat: No, there's nothing in the spec that says it should.

[22:01] <lizmat> hmmm…  so any typos in attribute names will remain unnoticed then

[22:01] <jnthn> lizmat: Or if there is, I've like to know where :)

[22:01] <donaldh> FROGGS: oh :-) 

[22:04] <donaldh> nqp: nqp::say(nqp::isprime_I(nqp::box_i(7, nqp::knowhow().new_type(:name('TestBigInt'), :repr('P6bigint'))), 0));

[22:04] <camelia> nqp: OUTPUT«0␤»

[22:05] <lizmat> jnthn: I don't think it is specced either, but I feel it should

[22:05] <lizmat> if you really want to be able to pass strange stuff to .new, you should either make your own .new or BUILD, no?

[22:05] <lizmat> anyways…  it's been a long evening

[22:05] *** fedor joined
[22:05] <lizmat> gnight #perl6

[22:06] *** mavcunha joined
[22:06] <labster> good night, lizmat 

[22:06] <jnthn> lizmat: The problem is how do we determine what went unused...

[22:06] <jnthn> 'night, lizmat 

[22:06] * lizmat will sleep on that

[22:08] <donaldh> jnthn: do we care that the bigint libs on parrot and Java give different results for negative numbers and zero certainty ?

[22:08] <donaldh> for negative numbers and also for zero certainty, not just the && case.

[22:09] <jnthn> Do you have any promises if you ask with zero certainty? :)

[22:09] <donaldh> e.g. should I bother special casing a return value of 0 for all numbers < 1?

[22:10] <donaldh> Or just provide the java.math.BigInteger behaviour?

[22:10] <jnthn> donaldh: If it's easy, I'd do it so we get consistency.

[22:10] <donaldh> I know, I know, zero certainty kind of begs undefined behaviour.

[22:10] <jnthn> Yeah, I'm not bothered about the zero certainty one, I don't think. But the negative one sounds worth doing.

[22:11] <donaldh> yep, agreed.

[22:24] *** kivutar left
[22:24] <FROGGS> r: my @s = <abc def ghi>; sub choop (*@s is rw) { for @s -> $s is rw { $s.=chop } }; choop(@s); say @s

[22:24] <camelia> rakudo 802574: OUTPUT«abc def ghi␤»

[22:24] <FROGGS> is "is rw" on a slurpy param supposed to be a noop?

[22:27] <masak> FROGGS: no, don't think so.

[22:28] <masak> FROGGS: that looks like a bug to me.

[22:28] *** skids joined
[22:28] <FROGGS> I mean, I can understand that it is hard to apply is rw, if you maybe get several scalars/arrays as input

[22:29] <FROGGS> r: my @s = <abc def ghi>; sub choop (@s is rw) { for @s -> $s is rw { $s.=chop } }; choop(@s); say @s

[22:29] <camelia> rakudo 802574: OUTPUT«ab de gh␤»

[22:32] <FROGGS> spec says: When applied to a variadic parameter, the rw trait applies to each element of the list:

[22:32] <FROGGS>     sub incr (*@vars is rw) { $_++ for @vars }

[22:34] <FROGGS> so, who fixes it? :D

[22:45] <masak> 'night, #perl6

[22:45] <FROGGS> night sir masak 

[22:53] *** pmurias left
[22:55] *** fedor left
[22:56] <jnthn> 'night, #perl6

[22:57] <TimToady> o/

[22:59] <FROGGS> gnight jnthn 

[22:59] <TimToady> n: my @s = <abc def ghi>; sub choop (*@s is rw) { for @s -> $s is rw { $s.=chop } }; choop(@s); say @s

[22:59] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«ab de gh␤»

[23:00] <TimToady> looks like niecza does it

[23:00] <TimToady> n: my @s = <abc def ghi>; sub choop (*@s) { for @s -> $s is rw { $s.=chop } }; choop(@s); say @s

[23:00] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«ab de gh␤»

[23:00] <TimToady> though in fact it's probably just ignoring the rw

[23:01] <FROGGS> n: my @s = <abc def ghi>; sub choop (*@s is readonly ) { for @s -> $s is rw { $s.=chop } }; choop(@s); say @s

[23:01] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«ab de gh␤»

[23:02] *** donaldh left
[23:06] <TimToady> r: my @s = <abc def ghi>; sub choop (*@s) { for @s -> $s is rw { $s.=chop } }; choop(@s); say @s

[23:06] <camelia> rakudo 802574: OUTPUT«abc def ghi␤»

[23:06] *** tgt left
[23:07] <Juerd> That's a lot of work for a noop :)

[23:07] <FROGGS> *g*

[23:13] *** mikemol joined
[23:22] *** mikemol left
[23:24] *** mikemol joined
[23:26] <FROGGS> gnight

[23:30] *** raiph joined
[23:41] *** berekuk left
[23:58] *** thou left
