[00:02] *** am0c joined
[00:14] * jnthn is safely back home :)

[00:15] <sorear> \o/ jnthn 

[00:16] <flussence> yay

[00:17] *** stevan_ joined
[00:19] <jnthn> Will be properly back into stuff again sometime tomorrow :)

[00:20] <dalek> nqp-jvm-prep: ccd0d69 | jonathan++ | / (2 files):

[00:20] <dalek> nqp-jvm-prep: Implement islist and ishash.

[00:20] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/ccd0d69a65

[00:20] <dalek> nqp-jvm-prep: b54b4fb | jonathan++ | t/qast_aggregate.t:

[00:20] <dalek> nqp-jvm-prep: Test islist and ishash.

[00:20] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/b54b4fbdf4

[00:20] <dalek> nqp-jvm-prep: 0c15d3d | jonathan++ | src/org/perl6/nqp/sixmodel/ (10 files):

[00:20] <dalek> nqp-jvm-prep: Start distinguishing concrete and type objects.

[00:20] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/0c15d3d593

[00:20] <dalek> nqp-jvm-prep: c966654 | jonathan++ | / (2 files):

[00:20] <dalek> nqp-jvm-prep: Implement isconcrete.

[00:20] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/c966654915

[00:20] <dalek> nqp-jvm-prep: 3894a9e | jonathan++ | t/qast_6model.t:

[00:20] <dalek> nqp-jvm-prep: Test isconcrete.

[00:20] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/3894a9eb50

[00:20] <dalek> nqp-jvm-prep: 0321ca1 | jonathan++ | src/org/perl6/nqp/sixmodel/TypeObject.java:

[00:20] <dalek> nqp-jvm-prep: Errors for various REPR funcs on type objects.

[00:20] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/0321ca147f

[00:20] <jnthn> These commits courtesy of a flight delay 

[00:26] *** _jaldhar_ joined
[00:27] *** jaldhar_ left
[00:29] <japhb> \o/ jnthn

[00:29] <japhb> (This delay courtesy of a See's run.  :-)

[00:42] *** ismail_ left
[00:53] <timotimo> i'm thinking maybe a guided tour through rakudo would be a good thing for a screencast

[00:53] <timotimo> of course, i'd have to do lots and lots of bothering all of you before i can do that :P

[00:54] *** dayangkun left
[00:55] <timotimo> a guided tour would be: where is the main entry point, where do scripts get parsed, where do they get compiled and when does what code in the rakudo source code get run etc etc etc

[01:03] *** anuby joined
[01:06] <jnthn> sleep, will have tuits again from tomorrow &

[01:06] <diakopter> o/

[01:09] *** bitonic left
[01:16] *** hypolin joined
[01:22] *** stevan_ left
[01:23] *** stevan_ joined
[01:36] *** MayDaniel left
[01:37] * diakopter stares at a wall of printf debug statements

[01:45] *** xinming_ joined
[01:47] *** xinming left
[02:10] *** dayangkun joined
[02:12] *** alec left
[02:13] *** alec joined
[02:17] <alec> i can't take call me maybe but i watched that for 2 minutes

[02:17] <alec> oh, wrong chatroom

[02:17] <alec> (talking about the time travel maybe parody)

[02:24] *** FROGGS_ joined
[02:28] *** FROGGS left
[02:40] *** mikemol joined
[02:51] <timotimo> i think i'd love to do a screencast in which i show how to build some extremely simple addition to perl6 in rakudo

[02:51] <timotimo> simple and silly, perhaps

[02:59] *** am0c left
[03:06] *** [particle]1 joined
[03:07] *** erkan left
[03:08] *** chimchim joined
[03:09] *** chimchim left
[03:09] *** [particle] left
[03:44] *** ifim joined
[03:49] <alec> timotimo, i would watch it

[03:49] <alec> are there any perl6 screencasts out there yet?

[03:52] *** orafu left
[03:52] *** orafu joined
[03:54] *** Chillance joined
[04:02] <au> alec: http://szabgab.com/perl6.html

[04:02] *** PacoAir left
[04:03] <au> timotimo: ^^^ the more screencasts the merrier

[04:03] *** quester joined
[04:03] <sorear> yo au

[04:03] <au> greetings sorear 

[04:10] *** MattMan_ joined
[04:10] <alec> ok, thanks au

[04:10] <alec> au++

[04:10] <MattMan_> p6eval "abcd efg" ~~ /(\w+) (\w+);

[04:11] <MattMan_> rakudo "abcd efg" ~~ /(\w+) (\w+);

[04:11] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) (\w+);

[04:11] <p6eval> rakudo e67fa9: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized regex metacharacter ; (must be quoted to match literally)‚ê§at /tmp/UqqNk4v0GZ:1‚ê§------> [32m"abcd efg" ~~ /(\w+) (\w+)[33m‚èè[31m;[0m‚ê§Unable to parse regex; couldn't find final '/'‚ê§at /tmp/UqqNk4v0GZ:1‚ê§------> [32m"abcd‚Ä¶

[04:11] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) (\w+)/;

[04:11] <p6eval> rakudo e67fa9:  ( no output )

[04:12] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) (\w+)/; say @().perl;

[04:12] <p6eval> rakudo e67fa9: OUTPUT¬´().list‚ê§¬ª

[04:12] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) (\w+)/; say @($/).perl;

[04:12] <p6eval> rakudo e67fa9: OUTPUT¬´(Match.new(orig => "abcd efg", from => 0, to => 3, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "abcd efg", from => 3, to => 4, ast => Any, list => ().list, hash => EnumMap.new())).list‚ê§¬ª

[04:13] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) (\w+)/; say $/;

[04:13] <p6eval> rakudo e67fa9: OUTPUT¬´ÔΩ¢abcdÔΩ£‚ê§ 0 => ÔΩ¢abcÔΩ£‚ê§ 1 => ÔΩ¢dÔΩ£‚ê§‚ê§¬ª

[04:13] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) \s+ (\w+)/; say $/;

[04:13] <p6eval> rakudo e67fa9: OUTPUT¬´ÔΩ¢abcd efgÔΩ£‚ê§ 0 => ÔΩ¢abcdÔΩ£‚ê§ 1 => ÔΩ¢efgÔΩ£‚ê§‚ê§¬ª

[04:14] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) \s+ (\w+)/; say @($/)[0];

[04:14] <p6eval> rakudo e67fa9: OUTPUT¬´ÔΩ¢abcdÔΩ£‚ê§‚ê§¬ª

[04:14] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) \s+ (\w+)/; say @($/)[0] $/[1];

[04:14] <p6eval> rakudo e67fa9: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row‚ê§at /tmp/NuPHPLB7g1:1‚ê§------> [32mefg" ~~ /(\w+) \s+ (\w+)/; say @($/)[0] [33m‚èè[31m$/[1];[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix or meta-infix‚ê§        infix stopper‚ê§        statement end‚ê§        s‚Ä¶

[04:15] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) \s+ (\w+)/; print @($/)[0]; print @($/)[1]; print "Hello";

[04:15] <p6eval> rakudo e67fa9: OUTPUT¬´abcdefgHello¬ª

[04:15] <MattMan_> rakudo: "abcd efg" ~~ /(\w+) \s+ (\w+)/; say @($/)[0]; say @($/)[1]; say "Hello";

[04:15] <p6eval> rakudo e67fa9: OUTPUT¬´ÔΩ¢abcdÔΩ£‚ê§‚ê§ÔΩ¢efgÔΩ£‚ê§‚ê§Hello‚ê§¬ª

[04:16] *** MattMan_ left
[05:18] *** telex left
[05:19] *** telex joined
[05:27] *** fgomez left
[05:30] *** grondilu left
[05:31] *** telex left
[05:38] *** raiph joined
[05:38] *** raiph left
[05:38] *** telex joined
[05:39] *** raiph joined
[05:39] *** raiph left
[05:40] *** raiph joined
[05:41] *** thou joined
[05:48] *** Chillance left
[06:06] *** anuby left
[06:09] *** anuby joined
[06:23] *** autark joined
[06:25] *** autark left
[06:28] *** GlitchMr joined
[06:29] *** fgomez joined
[06:30] *** kaleem joined
[06:36] *** am0c joined
[06:37] *** werwerwer joined
[06:40] *** GlitchMr left
[06:41] *** GlitchMr joined
[06:42] *** GlitchMr left
[06:43] *** GlitchMr joined
[06:54] *** anuby_ joined
[06:55] *** anuby left
[07:00] *** FROGGS_ left
[07:01] *** ifim left
[07:03] *** fgomez left
[07:03] *** fgomez joined
[07:11] *** anuby_ left
[07:13] *** anuby joined
[08:18] *** quester left
[08:20] *** anuby_ joined
[08:20] *** FROGGS joined
[08:21] *** anuby left
[08:23] <FROGGS> morning

[08:38] *** sevin joined
[08:39] *** sevin left
[08:41] <jnthn> o/ FROGGS 

[08:41] <moritz> \o jnthn 

[08:41] <moritz> FROGGS o/

[08:42] <jnthn> hi moritz 

[08:43] <jnthn> moritz: I realized that the phasers/sink bug has some...interesting...cases for the phasers that work as r-values. So fixing, say, LAST is a case of "just sink it", but BEGIN is...more interesting.

[08:44] <FROGGS> hi jnthn

[08:44] <FROGGS> hi moritz

[08:45] <moritz> jnthn: I have a local commit that adds a :sink parameter to run_phasers_code, which lets me fix FIRST and ENTER at least

[08:45] <jnthn> moritz: Yes, the trouble is that we also have a ticket that wants ENTER to work as an r-value one.

[08:45] <moritz> (as a side effect it moves sub sink() to World.pm and makes it a method)

[08:45] <FROGGS> jnthn, moritz: is there a chance that my froggs_mergemulti branch can make it into nom? IMO it does what it should and there is nothing that I know that breaks

[08:46] <moritz> FROGGS: did you fix it to merge only protos marked as onlystar?

[08:46] <jnthn> FROGGS: It's on my list of things to review now I'm back from doing visiting.

[08:46] <FROGGS> moritz: I did

[08:46] <moritz> FROGGS: ok, great

[08:47] <FROGGS> jnthn: no hurry, I just want it to gather dust ;o)

[08:47] <FROGGS> *not to*

[08:47] <jnthn> .oO( magic bugfixie dust )

[08:48] <moritz> jnthn: hm, we already have a solution for stuff that might or might not be an rvalue

[08:48] <moritz> QAST::Want($thing, 'v', ...)

[08:48] <moritz> jnthn: can we somehow apply that to the phasers too?

[08:49] <jnthn> moritz: Hmmm....

[08:50] <jnthn> moritz: Not entirely easily

[08:51] <jnthn> Oh my. And for BEGIN we don't actually know if it's r-value or not at the point we run it.

[08:51] <moritz> well, that's OK

[08:51] <moritz> if we know afterwards

[08:51] <moritz> a for-loop at the end of a subroutine also doesn't know if it's in sink context until after the routine has terminated

[08:52] <jnthn> True

[08:52] <jnthn> Oh, hm

[08:52] <moritz> I'm going to commit my stuff to a branch, so that I don't lose it

[08:53] <dalek> rakudo/sink-phasers: d30d7bc | moritz++ | src/Perl6/ (2 files):

[08:53] <dalek> rakudo/sink-phasers: sink FIRST and ENTER phasers

[08:53] <dalek> rakudo/sink-phasers: review: https://github.com/rakudo/rakudo/commit/d30d7bc1d4

[08:53] <jnthn> What if add_phaser's :sink flag did not actually do the sinking, but instead you tagged the QAST it produces in some way (maybe with the the actual thing that'd need sinking), and autosink would look at that...

[08:54] <jnthn> Oh, hm, maybe it's not quite that simple

[08:54] <jnthn> Or maybe it can work

[08:54] <jnthn> Gotta go for a meeting...

[08:54] * moritz too

[08:59] *** kresike joined
[08:59] <kresike> hello all you happy perl6 people

[09:05] *** bitonic joined
[09:12] *** am0c left
[09:28] *** dakkar joined
[09:28] *** nyuszika7h left
[09:30] *** nyuszika7h joined
[09:34] *** dayangkun left
[09:38] *** PacoAir joined
[09:39] *** jokar joined
[09:42] *** Psyche^ joined
[09:46] *** Patterner left
[09:46] *** Psyche^ is now known as Patterner

[09:46] *** PacoAir left
[09:50] *** JJ_Brain joined
[09:54] *** putau joined
[10:00] *** JJ_Brain left
[10:02] *** am0c joined
[10:08] *** SamuraiJack joined
[10:12] *** SmokeMachine joined
[10:12] *** PacoAir joined
[10:14] *** SmokeMac_ joined
[10:14] *** SmokeMachine left
[10:14] *** hypolin left
[10:14] *** anuby_ left
[10:17] *** PacoAir left
[10:17] *** cognominal joined
[10:29] *** sqirrel joined
[10:49] *** cognominal left
[10:53] *** JJ_Brain joined
[10:55] *** cognominal joined
[11:04] *** am0c left
[11:06] *** cognominal left
[11:11] *** _jaldhar_ left
[11:15] *** JJ_Brain left
[11:16] *** cognominal joined
[11:25] *** bitonic left
[11:26] *** Targen left
[11:33] *** dayangkun joined
[11:45] *** thou left
[11:48] *** cognominal left
[11:55] *** cognominal joined
[12:02] *** putau left
[12:06] *** cognominal left
[12:06] *** kaleem left
[12:13] *** PacoAir joined
[12:18] <colomon> o/

[12:18] *** PacoAir left
[12:19] *** FROGGS_ joined
[12:19] *** FROGGS left
[12:26] *** kivutar joined
[12:27] *** FROGGS_ is now known as FROGGS

[12:33] *** kivutar left
[12:33] *** FROGGS_ joined
[12:34] *** FROGGS left
[12:37] *** sqirrel left
[12:47] *** PacoAir joined
[13:01] *** jerome joined
[13:01] *** bitonic joined
[13:18] *** skids_ left
[13:20] *** erkan joined
[13:20] *** erkan left
[13:20] *** erkan joined
[13:22] *** kaleem joined
[13:42] <[Coke]> masak (solutions) do you want some even if a) we're not done with all the tasks, or b) an individual task isn't quite done?

[13:46] <dalek> perl6-roast-data: cc89173 | coke++ | / (4 files):

[13:46] <dalek> perl6-roast-data: today (automated commit)

[13:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/cc89173ef8

[13:46] <dalek> perl6-roast-data: 3e36b54 | coke++ | / (4 files):

[13:46] <dalek> perl6-roast-data: today (automated commit)

[13:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3e36b54628

[13:51] <masak> [Coke]: feel free to send in tasks at will, individually or all five.

[13:52] <masak> I will vet solutions individually, and provide feedback when I accept them.

[14:03] *** bitonic left
[14:05] *** SamuraiJack left
[14:06] *** bitonic joined
[14:07] *** SamuraiJack joined
[14:13] *** kaare_ joined
[14:15] *** wk joined
[14:16] *** wk is now known as Guest79427

[14:16] *** SamuraiJack_ joined
[14:16] *** SamuraiJack left
[14:16] <masak> the vast majority of participants send in no solutions at all. one easy way to counteract that is to send solutions early and often :)

[14:28] *** GlitchMr left
[14:28] <colomon> or to not sign up.  but that might be a little late for [Coke] .  ;)

[14:28] * moritz did so, ish

[14:28] <moritz> send in solutions early, that is

[14:29] *** GlitchMr joined
[14:30] <FROGGS_> if I would be able to solve these task I would sign up, but I know my strengths ;o)

[14:30] <moritz> oh come on. Generating those haikus isn't exactly rocket science

[14:31] <FROGGS_> well okay, that one might by solvable

[14:31] <FROGGS_> but I skimmed through the others and I thought I have to complete all

[14:36] <masak> what gave you that impression?

[14:39] *** stopbit joined
[14:41] <FROGGS_> well, the task with the water... if I dont quiet understand the task description it is not a good sign for solving it

[14:42] <FROGGS_> and at home with kids I dont have the brain to solve these kind of tasks ;o)

[14:43] *** cognominal joined
[14:45] <[Coke]> yah, the water one is currently over my head.

[14:45] <[Coke]> I get the feeling I'm missing some implied problem description.

[14:46] <FROGGS_> ohh good, I'm not alone

[14:46] * moritz feels like he's missing a simple approach to solve it

[14:48] <[Coke]> I really do wish :ignoremark worked so I could use some non english words in the haiku. :)

[14:51] *** skids_ joined
[14:55] *** cognominal left
[14:56] *** bluescreen10 joined
[14:59] * [Coke] tars up some files for masak.

[15:00] <[Coke]> masak: enjoy, sir.

[15:06] *** bitonic left
[15:10] * [Coke] tries not to freak out at the lack of instant masakfeedback!

[15:10] <FROGGS_> we need moar instant masakfeedback! now!

[15:11] <FROGGS_> √≤.√≥

[15:11] <moritz> [Coke]: fwiw the answers I got from masak had a delay of up to 2 or 3 days

[15:11] <moritz> [Coke]: so, no worries, all is normal

[15:14] *** kivutar joined
[15:16] *** sqirrel joined
[15:17] *** kivutar left
[15:20] *** Guest79427 left
[15:22] *** cognominal joined
[15:22] *** baest left
[15:23] *** baest joined
[15:26] <FROGGS_> what is this called: class A { * } and class A { ... }

[15:26] <FROGGS_> are both valid?

[15:26] <FROGGS_> both are stubs, right?

[15:27] <moritz> { ... } is a stub, and {*} is an onlystar

[15:27] <moritz> onlystar only makes sense in the context of routines, afaict

[15:27] <FROGGS_> k, thanks

[15:27] *** baest_ joined
[15:28] *** baest left
[15:32] *** baest_ left
[15:33] <FROGGS_> if someone is interested: https://github.com/FROGGS/p6-File-Inspector-Namespace

[15:34] <[Coke]> moritz: "onlystar" doesn't appear in specs on or doc site.

[15:35] <moritz> .oO( known to be incomplete )

[15:35] <FROGGS_> docs are always incomplete

[15:37] <FROGGS_> someone *cough*[Coke]*cough* should make a ticket or add a good text to the doc :P

[15:37] <moritz> fwiw 'onlystar' is just the name that we use in rakudo for those blocks

[15:37] <moritz> it's not an official term

[15:37] <moritz> but I don't think the specs have one

[15:38] *** baest joined
[15:46] *** cognominal left
[15:51] <[Coke]> moritz: that sequence of characters doesn't appear to be special from spec's POV either.

[15:51] * jnthn back

[15:52] <jnthn> iirc, STD uses the term onlystar for it.

[15:52] *** cognominal joined
[15:52] <[Coke]> looks like it's used a few times in nativecall refs.

[15:53] <arnsholt> Where in NativeCall did you see it?

[15:53] <[Coke]> S21-calling-foreign-code.pod

[15:53] *** am0c joined
[15:53] <FROGGS_> there is no proto that I'm aware of, so there cant be a { * }

[15:55] <arnsholt> No mention of onlystar in S21

[15:55] <FROGGS_> there is none in NativeCall.pm6

[15:56] <FROGGS_> [Coke]: dont see 'onlystar' in that pod

[15:56] <[Coke]> arnsholt: not "onlystar" - the literal text "{ * }"

[15:56] <FROGGS_> just the { * }

[15:56] <arnsholt> Ah, right, right

[15:57] <FROGGS_> thats because the trait does the work of the sub, not the subs body

[15:57] <arnsholt> Yeah, I think that's why jnthn prefers {*} over {...}

[15:58] <FROGGS_> right, because it is not a stub declaration

[15:58] <FROGGS_> it is more a kind of prototype for the C call

[15:59] *** pmurias joined
[15:59] *** SmokeMac_ left
[15:59] <pmurias> jnthn: hi

[15:59] <arnsholt> Yeah. {*} will explode when called, but {...} will return a Failure or something like that (can't remember right now)

[15:59] <jnthn> {*} in the multi case means "enter the dispatch". It the native call case it means about the same: enter the thingy that knows how to dispatch to C. :)

[16:00] <jnthn> o/ pmurias 

[16:00] <FROGGS_> r: sub a { ... }; a()

[16:00] <p6eval> rakudo e67fa9: OUTPUT¬´Stub code executed‚ê§current instr.: 'throw' pc 328671 (src/gen/CORE.setting.pir:146858) (src/gen/CORE.setting:9197)‚ê§called from Sub 'sink' pc 358070 (src/gen/CORE.setting.pir:158744) (src/gen/CORE.setting:10354)‚ê§called from Sub 'MAIN' pc 464 (src/gen/perl6.pir:170) ‚Ä¶

[16:00] <FROGGS_> r: sub a { * }; a()

[16:00] <p6eval> rakudo e67fa9:  ( no output )

[16:00] <pmurias> jnthn: I'm not sure what to do with the initial serialization context should I create it in javascript or am I supposed to (de)serialize it somehow?

[16:00] <jnthn> pmurias: Which one? __6MODEL_CORE__?

[16:00] <arnsholt> jnthn: Troo. But the way Zavolaj works, the Rakudo dispatcher is never reached, right?

[16:01] <jnthn> arnsholt: It uses wrap iirc

[16:01] *** SmokeMachine joined
[16:01] <jnthn> arnsholt: But yes, we never reach the * itself

[16:01] <jnthn> fwiw, if we did it'd just return whatever :)

[16:01] <FROGGS_> right, but a ... would still be misleading

[16:02] <pmurias> jnthn: yes

[16:02] <jnthn> pmurias: https://github.com/perl6/nqp/blob/master/src/6model/knowhow_bootstrapper.c#L248

[16:02] <jnthn> FROGGS_: Yes, a ... is a bad idea, since it implies "not implemented"

[16:03] <jnthn> pmurias: But yes, it's assembled as part of the 6model bootstrap.

[16:03] <jnthn> pmurias: And never actually gets serialized proper, but it's cross-ref'd from anything that involves a knowhow

[16:06] <pmurias> jnthn: would it be possible to serialize that?

[16:06] *** SmokeMachine left
[16:06] <jnthn> pmurias: It doesn't really make sense to, imo

[16:06] <pmurias> jnthn: or should I assemble it when doing the 6model bootstrap in javascript?

[16:07] <jnthn> I'd assemble it when doing the 6model bootstrap

[16:07] <jnthn> It's only a handful of lines of code in C anyway :)

[16:07] <jnthn> It's the way I'll go for JVM

[16:08] <arnsholt> jnthn: It overloads postcircumfix:<( )> with a role, but that might be a form of wrapping I guess

[16:08] <jnthn> arnsholt: ah...ok

[16:08] <jnthn> arnsholt: And that's how wrap is implemented also :) But yes, you're right...I remember now :)

[16:08] *** FROGGS_ left
[16:08] <arnsholt> I remember thinking "oh, that's clever" when I first saw it =)

[16:17] <kresike> bye folks

[16:17] *** kresike left
[16:18] <rurban> pmichaud: we plan to rename ops2c to parrot-ops2c until Saturday. nqp and rakudo need to check for it...

[16:20] <moritz> is there a configure option where we can get the name of the executable from?

[16:20] <moritz> otherwise it'll be very hard to make rakudo work on both the old and the new parrot

[16:20] <rurban> no, unfortunately not. maybe probe for both? the new one first

[16:21] <moritz> and then we accidentally mix up parrot installations?

[16:22] <rurban> hmm

[16:22] <jnthn> rurban: Motivation?

[16:22] <moritz> is this change really necessary?

[16:22] <jnthn> Why can't it just be left as it is?

[16:22] <rurban> ops2c is pretty much self-cointained. 

[16:22] <jnthn> Who does it hurt as it is?

[16:22] <rurban> because upstream packagers might worry about the namespace we took. and consistency with all parrot binaries

[16:23] <rurban> currently it hurts nobody. but we want to change it somewhen.

[16:23] <moritz> then I suggest adding a configure option for the name now, and do the actual changeover once somebody actually complains

[16:23] <[Coke]> +1

[16:23] *** FROGGS_ joined
[16:23] <rurban> ok, or maybe put into a private /usr/local/lib/parrot/version/ops2c

[16:24] <rurban> and keep a symlink to /usr/local/bin/ops2c

[16:24] <moritz> rurban: who would do that?

[16:24] <jnthn> How will that work on Windows?

[16:24] <rurban> no symlinks on windows. a batch file maybe

[16:25] <jnthn> I don't have enough tuits to solve things that ARE problems. I'm loathe to waste them on things that MIGHT become a problem.

[16:25] <rurban> I need to test that first

[16:26] <rurban> well, dyncall and threads are bigger problems now.

[16:27] <rurban> I'll try the ops2c config option for backwards compat and transition

[16:33] *** kaleem left
[16:34] *** kaleem joined
[16:40] *** kaleem left
[16:47] *** kaleem joined
[16:47] *** kaleem left
[16:49] *** Chillance joined
[17:03] <masak> [Coke]: thank you, sir.

[17:03] * masak tries to give the impression of always being online, but sometimes fails, like when he's on a train

[17:03] <[Coke]> ha! I caught you! ;)

[17:03] <masak> :D

[17:04] <[Coke]> contest-appropriate feedback most welcome.

[17:04] *** bitonic joined
[17:06] <masak> generally what you can expect is an email saying "solution passes base tests, and has been accepted".

[17:06] <masak> I'll get to it, hopefully during the day :)

[17:06] *** pmurias left
[17:08] *** cognominal left
[17:09] *** MayDaniel joined
[17:14] *** arkydo joined
[17:14] *** arkydo is now known as putau

[17:17] *** cognominal joined
[17:42] *** colomon left
[17:55] *** dakkar left
[17:57] *** thou joined
[18:02] *** ph1ur3 joined
[18:02] <ph1ur3> woah

[18:03] * TimToady stops galloping

[18:04] <FROGGS_> TimToady: reboot done?

[18:04] <jnthn> o/ TimToady :)

[18:04] <TimToady> no, seems to have regressed a bit, actually...

[18:05] <TimToady> checking data storage pass is back down to about 2% :)

[18:05] <skids_> .oO(runlevel now "prancing" instead of "galloping")

[18:05] <TimToady> as I mentioned, I expect the reboot to take several weeks...

[18:06] * TimToady is actually stuck at the runlevel of "able to make feeble wordplay"

[18:07] <[Coke]> jnthn: yikes. I had such a <adj> weekend, I forgot to look at nqp-jvm-prep at all.

[18:08] <[Coke]> I think "poker-filled" might be the correct adj. there.

[18:08] * TimToady is not going to say what he visualized

[18:08] *** wk joined
[18:09] *** wk is now known as Guest86237

[18:09] <jnthn> [Coke]: No worries, I was offline the whole weekend too, just about :)

[18:09] <jnthn> [Coke]: Am finally back home and back to some amount of normality now...or as normal as anything here ever gets. :)

[18:09] <TimToady> hmm, how does Estonia end up with .ee?

[18:10] <doy> Estonia /…®sÀàto äni…ô/ (Estonian: Eesti)

[18:10] <[Coke]> doy++

[18:10] <TimToady> figgered it was something like that, thanks

[18:10] *** bitonic left
[18:11] <jnthn> Convenient, given Spain got .es :)

[18:12] <TimToady> they very conveniently avoided giving .sp to Saint Pierre, to avoid confusion; some forethought there, or maybe just luck

[18:14] <TimToady> so two places where they avoided anglo cultural imperialism...TimToady wonders about examples of the opposite

[18:14] <timotimo> also, i hear, "eeeee" is a valid and semi-sensible word in eesti

[18:15] <skids_> You can say just about anything when falling from a great height and it would be considered sensible.

[18:16] <dalek> perl6-roast-data: 86d1451 | coke++ | / (3 files):

[18:16] <dalek> perl6-roast-data: today (automated commit)

[18:16] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/86d14517f7

[18:16] <TimToady> probably many of the contries in the southern hemisphere are at least colonially biased

[18:16] <TimToady> *countries

[18:17] * TimToady hopes he has stopped falling from a great height, and has already bounced...

[18:19] * TimToady hopes he has stopped bouncing, actually, but this is not clear yet

[18:19] <[Coke]> pugs: use Test; eval_lives_ok("{use v5;}", "RT #77596 - use v5 in a block lives");

[18:19] <p6eval> pugs: OUTPUT¬´pugs: *** Unsafe function 'use' called under safe mode‚ê§    at /tmp/tD7aD3zqaJ line 1, column 1‚ê§¬ª

[18:19] <[Coke]> there's some LHF for someone looking to get pugs afloat.

[18:19] <[Coke]> can probably write it in p6.

[18:20] * TimToady ==> outdoors to get some sunshine, and stop bothering the productive people...

[18:21] <[Coke]> (in fact, there is a eval_lives_ok already it seems. perhaps just needs some parameter cleanup)

[18:21] <[Coke]> TimToady: be well, enjoy the outside.

[18:24] <jnthn> shopping/dinner, bbl; should have some JVM backend tuits later on :)

[18:27] *** spider-mario joined
[18:28] *** FROGGS joined
[18:31] *** telex left
[18:31] *** am0c left
[18:31] <timotimo> is there any way to step through rakudo itself in some sort of debugging environment that shows the original nqp source lines and maybe even allows introspection?

[18:32] *** telex joined
[18:40] *** SmokeMachine joined
[18:45] *** mberends joined
[18:45] <mberends> o/

[18:50] * mberends plans to go to amsterdam.pm.org tomorrow :-)

[18:53] <jnthn> timotimo: No; in theory it may be possible to twist the Rakudo debugger into being an NQP debugger, but it's probably not a 1-pint hack... :)

[18:53] <jnthn> o/ mberends 

[18:53] <masak> mberends! \o/

[18:53] <mberends> o/ jnthn masak!

[18:55] <tadzik> mberends! \o/

[18:55] <mberends> \o tadzik

[18:57] <mberends> the Rakudo version in Debian Testing (wheezy) is 2012.01, any pointers as to how I can help bring this up to date?

[18:58] *** [particle]1 left
[18:59] <FROGGS> mberends: clone the repo from github or get the zipball from rakudo.org

[18:59] *** [particle] joined
[18:59] <FROGGS> mberends: then: perl Configure.pl --gen-parrot --gen-nqp

[19:00] <jnthn> Well, it's probably better to package a release.

[19:00] <FROGGS> if you wanna twiddle with some modules then you might choose to download rakudo star instead of rakudo

[19:00] <jnthn> Potentially, a Star one.

[19:00] <mberends> FROGGS: thanks, I'm doing one of those right now. I'm hoping to improve the result of 'sudo apt-get install rakudo'...

[19:02] *** japhb_ joined
[19:02] <japhb_> ++mberends

[19:03] <japhb_> Debian packages have the very nice side benefit of "flowing through" to a fair number of popular distros

[19:03] <mberends> o/ japhb yess

[19:05] <masak> rn: my $a = 0; repeat while False { say $a++; redo if $a < 10 }

[19:05] <p6eval> rakudo e67fa9, niecza v24-16-g89e47b6: OUTPUT¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[19:05] <masak> rn: my $a = 0; repeat while False { say $a++; next if $a < 10 }

[19:05] * japhb_ currently uses distros at three different layers of that flow, actually ...

[19:05] <p6eval> rakudo e67fa9, niecza v24-16-g89e47b6: OUTPUT¬´0‚ê§¬ª

[19:08] *** snearch joined
[19:10] <skids_> Using Star gives you panda as well.  Major bonus.

[19:11] *** snearch left
[19:11] <FROGGS> true

[19:11] *** snearch joined
[19:13] <japhb_> Has Star been fixed to register all installed modules with panda?

[19:14] <moritz> japhb_: no

[19:14] *** PacoAir left
[19:15] *** PacoAir joined
[19:17] *** snearch left
[19:18] <japhb_> moritz, :-/

[19:18] <japhb_> ETOOMANYPROJECTS

[19:20] *** colomon joined
[19:20] *** mberends left
[19:21] *** mberends joined
[19:23] *** snearch joined
[19:24] <FROGGS> if I read the following in nqp source, does it mean it maps a parrot function? QAST::Operations.add_core_pirop_mapping('sprintf', 'sprintf', 'SsP', :inlinable(1));

[19:24] *** snearch left
[19:24] *** snearch joined
[19:24] <moritz> FROGGS: it maps nqp::sprintf to pir::sprintf__SsP

[19:24] *** putau left
[19:25] <masak> QAST::Operations++

[19:25] <masak> (object-oriented compiler)++

[19:25] <FROGGS> ahh

[19:25] *** snearch left
[19:25] <FROGGS> thanks

[19:26] *** snearch joined
[19:27] <FROGGS> should I be able to find 'sprintf__SsP' in files? I only get one suspicious result

[19:27] *** rom1504__ is now known as rom1504

[19:27] <moritz> FROGGS: you'l find sprintf in parrot somewhere

[19:27] <FROGGS> k

[19:28] <moritz> FROGGS: it might use a different naame mangling convention than PIR

[19:28] <moritz> and it'll be in an .ops file

[19:28] <FROGGS> thanks

[19:33] <mberends> o/ moritz, how are @family?

[19:34] <FROGGS> meh, hunting down sprintf is a never ending story, I cant find its code

[19:34] *** PacoAir left
[19:35] <FROGGS> ohh, found it

[19:35] <FROGGS> one just has to argue ;o)

[19:35] *** PacoAir joined
[19:36] <skids_> Every time I open parrot source files I get thoroughly lost.

[19:36] <diakopter> src/string/sprintf.c and spf_vtable.c and spf_render.c and spf_private.h

[19:37] <FROGGS> parrot/src/string/spf_render.c:418

[19:42] <moritz> \o mberends 

[19:42] <moritz> mberends: @family is doing quite fine, thank you

[19:42] <moritz> mberends: the small one is turning 2 on Monday

[19:43] <moritz> mberends: how about yourself?

[19:43] <mberends> hip hip \o/ \o/

[19:43] <masak> \o/

[19:43] <tadzik> Array()!

[19:43] <masak> *lol*

[19:43] <tadzik> r: my @a = "hip" xx 2; say ~(@a, @a.WHAT.perl), "!"

[19:43] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array!‚ê§¬ª

[19:43] * masak loves that joke

[19:44] *** FROGGS_ left
[19:45] <mberends> moritz: also well thanks, just back from holiday visits to @family

[19:46] <tadzik> masak++ # the joke

[19:46] <masak> mberends: you in .uk these days? doing .co.uk things? :)

[19:47] <masak> r: my @a = "hip" xx 2; say ~(@a, @a.^name), "!"

[19:47] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array!‚ê§¬ª

[19:48] <mberends> masak: mainly, but currently in .nl, plan to see Liz and Wendy in Ams tomorrow

[19:48] <masak> nice.

[19:48] <masak> give hugs to Liz and Wendy from me. :)

[19:48] <moritz> from me too :-)

[19:48] <masak> r: say ~("hip" xx 2, (my @).^name), "!"

[19:48] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array!‚ê§¬ª

[19:49] <tadzik> niice

[19:49] <jnthn> r: say ~("hip" xx 2, [].^name), "!"

[19:49] <mberends> will do..

[19:49] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array!‚ê§¬ª

[19:49] <jnthn> ;)

[19:50] <masak> jnthn++

[19:50] <masak> (and it's growing more readable, too!)

[19:51] <timotimo> how come you can just write ~(a list) instead of having to write [~] a list?

[19:51] <masak> when you stringify a list, it gets spaces between the elements.

[19:51] <moritz> prefix ~  is just stringification

[19:51] <timotimo> oh, right

[19:52] <diakopter> r: say "hip "x 2, [].^name, "!"

[19:52] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array!‚ê§¬ª

[19:52] <masak> ooh

[19:52] <tadzik> r: say "hip "x 2, [].^name,"!"

[19:52] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array!‚ê§¬ª

[19:52] <tadzik> had to

[19:53] <tadzik> r: say "hip "x 2,[].^name,"!" #actually

[19:53] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array!‚ê§¬ª

[19:54] <mberends> parse challenge https://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo (my $son found this one)

[19:54] <masak> ooh, the Buffalo sentence!

[19:54] <tadzik> r: say "hip hip {[].^name}!"

[19:54] <masak> challenge *accepted*!

[19:54] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array!‚ê§¬ª

[19:55] <tadzik> that's sort of cheating :P

[19:56] <timotimo> r: say "hip hip [].^name()";

[19:56] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip [].^name()‚ê§¬ª

[19:56] *** mst left
[19:56] *** mst joined
[19:56] <timotimo> aaw, no amount of postcircumfix does that

[19:56] *** snearch left
[19:56] <tadzik> r: say "hip hip @_.^name()";

[19:56] <p6eval> rakudo e67fa9: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Cannot use placeholder parameter @_ in the mainline‚ê§at /tmp/Vaf3fnui_A:1‚ê§------> [32msay "hip hip @_[33m‚èè[31m.^name()";[0m‚ê§¬ª

[19:56] <tadzik> :(

[19:56] <masak> timotimo: no, it has to start with a sigil.

[19:56] <moritz> r: say "hip hip @*INC.WHAT.gist()"

[19:56] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array()‚ê§¬ª

[19:56] <moritz> r: say "hip hip @*INC.WHAT.gist.substr(0, *-2)!"

[19:56] <timotimo> heh :)

[19:56] <p6eval> rakudo e67fa9: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unable to parse expression in double quotes; couldn't find final '"'‚ê§at /tmp/ZuvDmjCZxg:1‚ê§------> [32mhip hip @*INC.WHAT.gist.substr(0, *-2)!"[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        double quotes‚ê§¬ª‚Ä¶

[19:56] <jnthn> r: say "hip hip @([]).^name()";

[19:56] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Array‚ê§¬ª

[19:57] <moritz> jnthn++

[19:59] <masak> r: say "hip hip @().^name()"

[19:59] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip List‚ê§¬ª

[19:59] <masak> :P

[19:59] <flussence> whee, I just managed to hang chrome by doing "print ([])" in the console...

[19:59] <masak> r: say "hip hip %().^name()"

[19:59] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Hash‚ê§¬ª

[19:59] <masak> r: say "hip hip $().^name()"

[19:59] <p6eval> rakudo e67fa9: OUTPUT¬´hip hip Parcel‚ê§¬ª

[19:59] <masak> hip hip Parcel! \o/

[20:00] <jnthn> r: sub prefix:<@@>($x) { $x }; say "omg @@"wtf".uc() bbq"

[20:00] <p6eval> rakudo e67fa9: OUTPUT¬´omg WTF bbq‚ê§¬ª

[20:00] * masak .oO( because, ya know, it's your birthday... )

[20:00] *** SamuraiJack joined
[20:00] *** SamuraiJack_ left
[20:01] <timotimo> that's pretty crazy, jnthn :)

[20:01] <jnthn> You learn a few things when you spend a bunch of time working on quote parsing :)

[20:03] <diakopter> r: sub prefix:<@@>($x) { $x }; say "omg @@@@@@@@@@@@@@@@@@@@@@@@@@"wtf".uc() bbq"

[20:03] <p6eval> rakudo e67fa9: OUTPUT¬´omg WTF bbq‚ê§¬ª

[20:04] *** REPLeffect left
[20:04] <masak> somehow that just doesn't feel uppercased enough.

[20:04] <timotimo> r: sub prefix:<@>($x) { $x }; my @a = 1, 2, 3; say @a;

[20:04] <p6eval> rakudo e67fa9: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    a used at line 1‚ê§‚ê§¬ª

[20:04] *** REPLeffect joined
[20:04] <timotimo> heh

[20:04] <timotimo> r: sub prefix:<@>($x) { $x }; my @a = 1, 2, 3; say @@a;

[20:04] <p6eval> rakudo e67fa9: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    a used at line 1‚ê§‚ê§¬ª

[20:05] <masak> timotimo: why do you try to call 'a'?

[20:05] <jnthn> masak: I think timotimo probably expected it to mean @ called on @a

[20:05] <masak> yes, I know :)

[20:05] <masak> just teasing him :)

[20:05] <timotimo> masak: that's like someone punching someone else with their own fist and asking them "why are you hitting yourself?"? ;)

[20:05] <jnthn> Which it never will since <prefix>* will swallow both @s before you get to parse a term.

[20:06] <masak> timotimo: yes... so... why? :P

[20:06] <timotimo> was just verifying if my intuition was correct - and it was

[20:06] <masak> timotimo: and it's not exactly like that, mind. you were punching yourself, and I was just commenting on it.

[20:06] <timotimo> :D

[20:07] *** SamuraiJack left
[20:08] <jnthn> Righty, time to write some code...

[20:08] <rurban> Found my nqp problem with an installed parrot: -L. -X. is needed for parrot

[20:09] <flussence> anyone willing to crash their browser to help me reproduce a bug? :D

[20:09] <tadzik> bring it on!

[20:10] <flussence> chrome/ium, hit f12, type "print()\n". It might freeze instantly

[20:10] <tadzik> with quotes?

[20:10] *** SmokeMachine left
[20:10] <flussence> nah, just the function

[20:10] <tadzik> nah, works

[20:11] <tadzik> Chromium Version 22.0.1229.94

[20:11] <flussence> hm, I'm on 24.something

[20:11] <tadzik> F12 opens the resource monitor and stuff, eh?

[20:11] <flussence> oh wait, 25

[20:11] <flussence> f12 opens the dev console here...

[20:11] <tadzik> yeah, this sort of thing

[20:11] <flussence> ok

[20:12] *** sftp left
[20:13] <flussence> on mine, it freezes the tab as soon as you hit enter, the tab bar starts acting weird, and opening the dev console on any other page also freezes that. I ended up having to kill processes from the command line to get it working again...

[20:14] *** sftp joined
[20:15] <skids_> \o/ Sum now installs clean with panda, jnthn++ for fixing pre-compiled curried roles.

[20:16] <skids_> Though, the tests run even slower under panda... 511 seconds.  I guess I have unintentionally created a new benchmark suite :-)

[20:18] <jnthn> Real world benchmarks are welcome :)

[20:18] <dalek> nqp/dot-libpath-gh71: 6a9828f | rurban++ | tools/build/Makefile.in:

[20:18] <dalek> nqp/dot-libpath-gh71: [GH #71] Add -L. -X. to parrot for newer parrots.

[20:18] <dalek> nqp/dot-libpath-gh71: 

[20:18] <dalek> nqp/dot-libpath-gh71: See https://github.com/parrot/parrot/issues/368

[20:18] <dalek> nqp/dot-libpath-gh71: review: https://github.com/perl6/nqp/commit/6a9828fbd1

[20:18] <rurban> nqp: Ok to apply? 

[20:18] <p6eval> nqp: OUTPUT¬´Confused at line 2, near "Ok to appl"‚ê§current instr.: 'panic' pc 13231 (src/stage2/gen/NQPHLL.pir:4687) (src/stage2/gen/NQPHLL.pm:328)‚ê§¬ª

[20:19] *** brrt joined
[20:22] <timotimo> :D

[20:22] <timotimo> wow, skids_, that looks like a lot of work, also high quality documentation!

[20:25] <skids_> Eh, it's just my equivalent of knitting.

[20:30] <FROGGS> skids_++ # well written code

[20:30] <masak> where is this code of which you speak?

[20:30] <skids_> You just haven't seen the hacky parts yet :-)

[20:31] <skids_> masak: panda install Sum... wait... wait... wait...

[20:31] <FROGGS> masak: https://github.com/skids/perl6sum

[20:31] <FROGGS> .oO( dary? )

[20:32] <masak> ooh

[20:33] <tadzik> skids_ | masak: panda install Sum... wait... wait... wait...

[20:33] <tadzik> for a moment I thought you wrote "panda install Sum<TAB>" and impllemented auto-completion :D

[20:34] *** nyuszika7h left
[20:34] <masak> and I thought you were speaking to skids_ and me in an or-junction...

[20:35] <skids_> That's how I read it too.

[20:35] <skids_> Sad.

[20:35] *** nyuszika7h joined
[20:35] <FROGGS> is that valid english? https://github.com/skids/perl6sum/blob/master/lib/Sum.pm6#L5-L6

[20:36] <PerlJam> s/does//

[20:36] <skids_> FROGGS++ thanks.

[20:37] *** brrt left
[20:39] *** brrt joined
[20:41] <FROGGS> rn: class A { method b {} }; my $c = A.new; say $c.^can('b')

[20:41] <p6eval> rakudo e67fa9: OUTPUT¬´b‚ê§¬ª

[20:41] <p6eval> ..niecza v24-16-g89e47b6: OUTPUT¬´True‚ê§¬ª

[20:41] <FROGGS> which one is right?

[20:42] *** Patterner left
[20:43] <doy> rakudo

[20:43] <jnthn> rn: class A { method b {} }; my $c = A.new; say $c.^can('b').WHAT

[20:43] <p6eval> niecza v24-16-g89e47b6: OUTPUT¬´Bool()‚ê§¬ª

[20:43] <p6eval> ..rakudo e67fa9: OUTPUT¬´Parcel()‚ê§¬ª

[20:44] <jnthn> The spec is not perfect, but it is at least clear that what comes back from can is something that indicates the available method(s), and will be boolean true/false.

[20:44] <jnthn> rn: class A { method b {} }; my $c = A.new; say $c.^can('b')[0].WHAT

[20:44] <FROGGS> okay, so both is not wrong

[20:44] <p6eval> rakudo e67fa9: OUTPUT¬´Method()‚ê§¬ª

[20:44] <p6eval> ..niecza v24-16-g89e47b6: OUTPUT¬´Bool()‚ê§¬ª

[20:45] <jnthn> No, because niecza only returns a bool, not a result that conveys the methods.

[20:45] <doy> S32 says that can should return a Callable

[20:45] <jnthn> yeah, that's the weird bit

[20:45] <rurban> rakudo also needs parrot -L. -X. for parrot 5.0

[20:46] <jnthn> S12 suggests it should return multiple results if they exist, iirc.

[20:46] <FROGGS> rurban: -X is executable search path?

[20:46] <masak> r: say Method ~~ Callable

[20:46] <p6eval> rakudo e67fa9: OUTPUT¬´True‚ê§¬ª

[20:46] <rurban> -X is the dynext path

[20:46] <jnthn> masak: Yes, but .^can returns a Parcel.

[20:46] <jnthn> masak: Of Method, each of which is callable.

[20:47] <skids_> Well, returning the dispatcher would also constitute returning a list of candidates, indirectly, via introspection, no?

[20:48] <jnthn> skids_: "the dispatcher"? It's only going to hand back stuff from the method table. If one of those is a proto controlling a bunch of multi-candidates, you can also get those, yes

[20:48] <doy> S32 says that it should return a sub that closes over $self and just redispatches, if i understand it correctly

[20:49] <jnthn> eek, and S12 wants it to return some kind of iterator...

[20:49] *** sqirrel left
[20:49] <jnthn> Of all the things that match the name.

[20:49] <jnthn> So yeah, the spec is inconsistent, as I remembered it.

[20:49] <jnthn> It'd be nice if we could settle on exactly what we'd like it to do :)

[20:50] <masak> what's inconsistent about a callable iterator? :P

[20:50] *** Psyche^ joined
[20:50] *** Psyche^ is now known as Patterner

[20:50] <jnthn> masak: heh :)

[20:50] <skids_> I guess I don't understand what else would be in the array -- shadowed methods from parent classes?

[20:50] <jnthn> I guess

[20:50] <jnthn> skids_: Yeah

[20:50] <jnthn> masak: Well, I *can* implement something like that I guess...

[20:51] <jnthn> Not sure it's a good idea

[20:51] <jnthn> Hm, guess it may not be too crazy

[20:51] * jnthn puts it on the to-try list 

[20:51] <masak> I was mostly kidding.

[20:51] <masak> but it doesn't seem impossible to me.

[20:51] <jnthn> No no, too late now :P

[20:51] <masak> and if that's what the spec *says*... :)

[20:52] <jnthn> I think at one point I considered something that did both to be crazy

[20:52] <jnthn> But it feels fairly do-able now

[20:52] <masak> must have been a less crazy version of you thinking that :P

[20:52] <jnthn> Either I'm just smarter or crazier by now :)

[20:52] <jnthn> meh, shoulda known it'd go the crazy way :P

[20:52] *** brrt left
[20:54] <masak> of course. it's like, everybody knows at this point what the light at the end of the tunnel really is. :)

[20:54] <masak> the world comes pre-loaded with a certain amount of pessimism.

[20:56] *** bitonic joined
[20:56] *** cognominal left
[20:57] *** cognominal joined
[21:06] <jnthn> Why the hell does eclipse-- still sometimes insert tabs instead of spaces even after I ticked the "Insert tabs instead of spaces" box... :/

[21:06] <flussence> per-file settings?

[21:06] <jnthn> It has...per-file settings?

[21:07] <flussence> I dunno, just throwing ideas around... (haven't used eclipse since 2003 :)

[21:08] <masak> jnthn: as I recall, it has different settings for "indentation" and "vertical alignment". might be something like that.

[21:08] <jnthn> ah, found it...

[21:08] <flussence> oh, separate :sw and :ts settings... :)

[21:09] <jnthn> But of course, I can't just change it.

[21:09] <jnthn> Oh no.

[21:09] <jnthn> Instead I have to clone a "formatter profile", then change the cloned one.

[21:10] <jnthn> Makes sense. Java, the language of excess verbosity, spawns a toolchain where everything requires more steps than is sanely needed.

[21:10] <diakopter> also yes there are project-specific settings

[21:10] <jnthn> o.O

[21:10] <masak> oh joy.

[21:11] *** cognominal left
[21:12] <skids_> Moral of this story: swiss army chainsaws should retract automatically.

[21:15] * masak fails to see what that metaphor would correspond to

[21:28] *** xinming_ left
[21:29] *** Chillance left
[21:29] <FROGGS> less steps needed?

[21:29] *** xinming joined
[21:32] <masak> well, it's tricky. I can see why someone would like per-project settings, or separate rules for indentation and vertical alignment...

[21:32] <masak> the trouble comes when a feature bites you that you didn't even know existed.

[21:33] <masak> I'm not even sure it's a trade-off so much as a difficult problem of design.

[21:35] *** mberends left
[21:37] <dalek> rakudo/nom: c072f82 | moritz++ | src/Perl6/World.pm:

[21:37] <dalek> rakudo/nom: implement the rest of require + indirect lookup

[21:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c072f82f96

[21:43] <moritz> timotimo: this works now on latest rakudo:   use lib "t/spec/packages"; my $name = "Util"; require Test::($name) <&throws_like>; throws_like "1 1", X::Syntax::Confused

[21:43] <timotimo> cool :)

[21:43] <jnthn> moritz++

[21:44] <dalek> rakudo/nom: ffde430 | moritz++ | docs/ChangeLog:

[21:44] <dalek> rakudo/nom: require + indirect names deserves a ChangeLog entry

[21:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ffde430e84

[21:44] <timotimo> so basically it generates code to join the components with :: and use that as the value

[21:44] <masak> moritz++

[21:44] <moritz> timotimo: correct

[21:44] <masak> 'night, #perl6

[21:45] <timotimo> night masak

[21:45] * moritz also retires

[21:45] <timotimo> so the basic principle is to create lots of QAST things if you want a feature to work

[21:46] <moritz> timotimo: if it requires codegen, yes

[21:46] <moritz> once you get used it, it's a rather cool approach

[21:46] <timotimo> if i do get to create that guided tour screencast, i'll make sure to explain where code needs to be generated and when you can just write code that gets run at run time

[21:46] <timotimo> that's a big confusion i have right now

[21:47] <timotimo> also, what code gets run at compile time and what code is still relevant at run-time (which would probably be mostly the same distinction?)

[21:47] <[Coke]> jnthn: we definitely want the settings to be in the project so we can share them.

[21:48] <[Coke]> I can do that part if you tell me what you want the settings to be.

[21:48] <flussence> random idea: a makefile target that precompiles all the spectests to catch precomp bugs

[21:48] <jnthn> [Coke]: If you know how to sort that out, it'd be great.

[21:48] <[Coke]> (or I can just pick saneish defaults)

[21:48] <jnthn> [Coke]: Well, spaces instead of tabs is the only thing I've tweaked from the default

[21:48] <[Coke]> jnthn: i just did this at work a little while ago for one of my projects. Sure.

[21:48] <moritz> timotimo: note that in this case, we just generate calls (to &infix:<,> and Parcel.join), and those calls happen at run time

[21:49] <moritz> flussence: precompiling scripts isn't supported

[21:49] <[Coke]> jnthn: I can add that to the project-specific settings, sure. Will do so after $DAYJOB

[21:49] <flussence> oh :(

[21:49] *** alec left
[21:49] <moritz> flussence: and most spectests have pretty simple cross-dependency chains, so it's not such a big help

[21:50] <dalek> nqp-jvm-prep: 7d90a20 | jnthn++ | t/qast_6model.t:

[21:50] <dalek> nqp-jvm-prep: Basic native attribute test.

[21:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/7d90a20e5f

[21:50] <dalek> nqp-jvm-prep: b16cdd9 | jnthn++ | src/org/perl6/nqp/sixmodel/ (3 files):

[21:50] <dalek> nqp-jvm-prep: Teach P6opaque about inlining native attrs.

[21:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/b16cdd9ecf

[21:50] <dalek> nqp-jvm-prep: 1268e9d | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[21:50] <dalek> nqp-jvm-prep: A little re-think that avoids code-dupe.

[21:50] <dalek> nqp-jvm-prep: 

[21:50] <dalek> nqp-jvm-prep: Also simplifies code generation for an error case that should never

[21:50] <dalek> nqp-jvm-prep: really occur.

[21:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1268e9dcc3

[21:50] <dalek> nqp-jvm-prep: e5b4604 | jnthn++ | src/org/perl6/nqp/sixmodel/reprs/P6 (3 files):

[21:50] <dalek> nqp-jvm-prep: Teach P6int, P6num and P6str how to inline.

[21:50] <dalek> nqp-jvm-prep: 

[21:50] <dalek> nqp-jvm-prep: This means that native int, num and str attributes now work with

[21:50] <dalek> nqp-jvm-prep: P6opaque.

[21:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/e5b46043ec

[21:50] <dalek> nqp-jvm-prep: 5ed35e9 | jnthn++ | t/qast_6model.t:

[21:50] <dalek> nqp-jvm-prep: Test native num and str attrs also.

[21:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5ed35e97ee

[21:51] <timotimo> at this pace, rakudo should run on the jvm in about a week's time!

[21:51] <jnthn> :P

[21:52] <tadzik> shush, timotimo. Don't spoil jnthn's surprises!

[21:52] <jnthn> There's still quite a bit to do :P

[21:52] <tadzik> yeah, right, you always say that ;)

[21:57] *** bluescreen10 left
[21:59] <diakopter> I'd estimate there's around 600 jnthn-hours left before rakudo runs on the jvm

[21:59] <diakopter> (that would be around 6000 me-hours)

[22:00] <PerlJam> either way, whenever it's done, rakudo-on-jvm will come as a surprise :)

[22:01] *** nyuszika7h left
[22:01] *** bluescreen10 joined
[22:02] *** nyuszika7h joined
[22:02] *** skids_ left
[22:10] *** kaare_ left
[22:13] *** bluescreen100 joined
[22:15] *** bluescreen10 left
[22:16] *** alec joined
[22:16] *** alec left
[22:16] *** alec joined
[22:19] *** alec left
[22:19] *** alec joined
[22:26] <dalek> nqp-jvm-prep: 6b81e0e | jnthn++ | t/qast_6model.t:

[22:26] <dalek> nqp-jvm-prep: Tests for P6opaque box_target handling.

[22:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/6b81e0e2bc

[22:26] <dalek> nqp-jvm-prep: f353a12 | jnthn++ | src/org/perl6/nqp/sixmodel/ (2 files):

[22:26] <dalek> nqp-jvm-prep: Give P6opaque box target handling.

[22:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/f353a12171

[22:26] <dalek> nqp-jvm-prep: 1099d65 | jnthn++ | src/org/perl6/nqp/sixmodel/reprs/P6 (3 files):

[22:26] <dalek> nqp-jvm-prep: Teach P6int/P6num/P6str to be box targets.

[22:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1099d65a47

[22:26] <dalek> nqp-jvm-prep: 1ffa9ab | jnthn++ | docs/ROADMAP:

[22:26] <dalek> nqp-jvm-prep: Remove some completed ROADMAP items.

[22:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1ffa9ab303

[22:35] *** mp____ joined
[22:44] *** zooks joined
[22:44] *** amkrankruleuen joined
[22:45] *** amkrankruleuen left
[22:46] *** zooks left
[22:47] *** mp____ left
[22:49] *** snearch joined
[22:50] *** MayDaniel left
[22:53] *** whiteknight joined
[23:06] *** amkrankruleuen joined
[23:06] *** amkrankruleuen left
[23:06] *** amkrankruleuen joined
[23:07] *** amkrankruleuen left
[23:11] <jnthn> 'night, #perl6

[23:14] <tadzik> good knight jnthn 

[23:23] *** grondilu joined
[23:24] <grondilu> I get this when trying to run panda:

[23:24] <grondilu> ===SORRY!===

[23:24] <grondilu> No object at index 332

[23:26] <slavik1> give it bamboo ...

[23:26] <slavik1> sorry, the best I can come up with :(

[23:28] <sorear> grondilu: delete stuff and reinstall panda.  you have a problem with your precompiled modules.

[23:28] *** stopbit left
[23:31] <grondilu> sorear: which stuff exactly?  There are so much.

[23:31] <grondilu> *many

[23:32] <flussence> first start by blowing away the rakudo install/ dir and doing a clean reinstall of that, then bootstrap panda, and when that doesn't work delete the .pir versions of installed panda modules. It'll work after that, slowly.

[23:32] *** spider-mario left
[23:33] * grondilu removes the install directory

[23:33] *** skids_ joined
[23:34] * grondilu runs make clean

[23:34] * grondilu runs make

[23:35] <grondilu> (that failed)

[23:35] * grondilu runs perl Configure.pl --gen-parrot --gen-nqp

[23:36] <japhb_> grondilu, make sure you don't still have modules hanging around in ~/.perl6 (the old location for panda installs)

[23:36] <grondilu> nope, nothing there

[23:42] *** amkrankruleuen joined
[23:42] *** amkrankruleuen left
[23:42] *** amkrankruleuen joined
[23:43] *** PacoAir left
[23:49] *** snearch left
