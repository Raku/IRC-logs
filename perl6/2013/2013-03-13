[00:00] * diakopter is curious why you can't use p6 in this instance

[00:00] <colomon> too damned slow

[00:00] <diakopter> how much slower?

[00:00] <diakopter> (dare I ask)

[00:00] <colomon> dunno

[00:01] <diakopter> "we'll never know; it never finishes"

[00:01] <timotimo_> :D

[00:01] *** xinming joined
[00:07] <colomon> the work involves scanning 3gigs worth of files.  I really doubt either p6 implementation can do that in a reasonable amount of time.

[00:08] <diakopter> well, how much ram do you have

[00:08] <colomon> 32 gigs on the new Linux box

[00:08] <diakopter> what kind of scanning? tokenizing? search/replace?

[00:08] <lue> How big's the largest file of the bunch? (Perhaps you can get away with a open/process/close loop)

[00:09] <colomon> well, in p5 I'm just going to scan it.  but ideally I'd parse the files if I was doing it in p6.

[00:12] <colomon> actually, I'm not at all certain how I can easily do this in p5.  parsing makes life a lot easier.

[00:12] <diakopter> usually several layers of split on regex can handle anything..

[00:14] <diakopter> (but of course it's extremely hard on the memory usage)

[00:14] <diakopter> .oO( .. tho if your strings implementation were ropey... )

[00:15] *** Liz joined
[00:15] *** Liz is now known as Guest71046

[00:16] <colomon> you know what?  I'm going to do the p6 implementation and see what I can learn from that.

[00:17] <colomon> awkwardly, I think step one may be "reboot laptop".

[00:17] <diakopter> your p6 is statically in your kernel?

[00:18] <colomon> errr... no

[00:18] <colomon> macfusion got wedged in a low memory situation, and I'd like to have it up and running so I can edit p6 scripts on the Linux box using TextMate

[00:23] *** colomon joined
[00:25] *** Guest71046 is now known as lizmat

[00:26] *** lustlife joined
[00:30] *** census left
[00:36] *** mberends_ joined
[00:36] *** japhb_ left
[00:36] *** grondilu left
[00:39] *** mberends left
[00:39] <labster> r: my $f = "."; say $f.=path.WHAT for ^6;

[00:39] <p6eval> rakudo a98aa7: OUTPUT«(IO::Path)␤(Str)␤(IO::Path)␤(Str)␤(IO::Path)␤(Str)␤»

[00:40] <labster> I feel like something is wrong about that.  Like, calling .Str on a Str is a no-op, and the same with .list, but this cycles.

[00:46] <colomon> rn: say "#341".substr(1)

[00:46] <p6eval> rakudo a98aa7, niecza v24-33-gfc6d5fd: OUTPUT«341␤»

[00:57] *** xilo left
[00:59] *** xilo joined
[01:01] *** anuby joined
[01:14] *** hypolin joined
[01:20] *** vaelxon joined
[01:24] <colomon> OMG this script is slow running in p6

[01:29] <colomon> I wonder why this particular file is so slow?

[01:34] *** mavcunha left
[01:43] <timotimo_> there's profiling in place, no?

[01:43] <timotimo_> would it work in niecza?

[01:44] *** lizmat left
[01:45] *** Liz joined
[01:46] *** Liz is now known as Guest88747

[01:47] <colomon> the script should work in niecza too, yes.

[01:49] <timotimo_> always interesting to know the factor

[01:54] *** am0c joined
[01:55] *** am0c left
[01:55] *** am0c joined
[01:57] <colomon> r: for lines() -> $line { say $line; }

[01:57] <p6eval> rakudo a98aa7: OUTPUT«Land der Berge, Land am Strome,␤Land der Äcker, Land der Dome,␤Land der Hämmer, zukunftsreich!␤Heimat bist du großer Söhne,␤Volk, begnadet für das Schöne,␤vielgerühmtes Österreich,␤vielgerühmtes Österreich!␤␤Heiß umfehdet, wild umstritten␤liegst dem Erdteil du inmi…

[01:58] * colomon is completely mystified by the error he is getting from Rakudo

[01:59] <colomon> aha!  thank you, niecza

[02:01] <colomon> woah, Match.perl is next to useless when you're matching against an entire file.

[02:18] <colomon> "here, let me print out this entire file for you, because you matched a line in it."

[02:19] <timotimo_> hahahaha, awesome :)

[02:34] <colomon> actually using .gist instead of .perl is satisfactory.

[02:40] *** rhinux joined
[02:41] *** rhinux is now known as rhinux_

[02:41] *** rhinux_ is now known as rhinux

[03:00] *** fgomez joined
[03:06] *** stevan_ joined
[03:07] *** orafu joined
[03:10] <raiph> colomon++ # you know what?  I'm going to do the p6 implementation

[03:10] <colomon> it's running now

[03:11] <raiph> wow. i only just read about it in the clogs. any estimates?

[03:11] <colomon> it's slow, for sure.

[03:11] <colomon> and it's gobbling up memory.

[03:12] <raiph> i'd love to see the code

[03:15] <colomon> https://github.com/colomon/perl6-ISO_10303-21/blob/master/bin/step-scan-for-trimmed-circles.pl

[03:17] <colomon> Basically, it's using the STEP file parser (in ISO_10303_21::Grammar) to go through the files looking for TRIMMED_CURVEs which trim CIRCLEs.

[03:18] <colomon> It makes a list of what curve each TRIMMED_CURVE trims, and a list of the CIRCLEs, and then it intersects them.

[03:24] <colomon> afk # sleep

[03:24] <raiph> thx. so you're currently seeing intermittent TRIMMED_CURVE: lines, right?

[03:24] *** rindolf joined
[03:24] <raiph> goodnight colomon++ and #prl6

[03:39] *** fgomez left
[03:39] <diakopter> wait so how long did it take

[03:41] * diakopter will ask again in a few days

[03:45] *** munavo joined
[03:49] *** fgomez joined
[03:51] *** fgomez left
[03:51] *** fgomez joined
[03:57] *** LlamaRider joined
[03:57] <rindolf> «Chuck Norris does not need to heat up food. The food is already hot right after he took it out of the fridge.»

[04:00] <japhb> Because of the constant pressure from his Total Gym sales pitch?

[04:10] <rindolf> japhb: what?

[04:15] *** LlamaRider left
[04:16] *** SamuraiJack joined
[04:26] <diakopter> heh

[04:48] *** preflex_ joined
[04:50] *** preflex_ is now known as preflex

[04:55] *** _jaldhar left
[05:00] *** munavo left
[05:10] *** Heather joined
[05:10] <Heather> hello there

[05:10] <Heather> I have a serious question

[05:10] <Heather> How can I speed up Perl6 ?

[05:41] *** kaleem joined
[05:42] <[Coke]> Heather: if you want to make rakudo on parrot go faster, you can run with --profile, generate a kcachegrind file, and use that to figure out where it's slow.

[05:44] <Heather> <[Coke]> is is parsebale? :)

[05:44] <Heather> let me paste

[05:45] *** kurahaupo left
[05:47] <Heather> <[Coke]> how to redirect output ...

[05:48] <Heather> there is something alike 2>1 but I don't remember

[05:49] <Heather> 2>&1 ?

[05:50] <Heather> 2>filename !

[05:50] <Heather> got it

[05:50] *** daniel-s joined
[05:51] <Heather> [Coke] So here is it: http://bpaste.net/show/83390/

[05:51] <Heather> it's 6558 lines !

[05:52] <[Coke]> if that's the --profile output, you need to feed it to kcachegrind.

[05:52] *** SamuraiJack left
[05:52] <Heather> [Coke] I need to get kcachegrind somewhere?

[05:53] <[Coke]> aye. what OS are you on?

[05:53] <Heather> [Coke] linux

[05:53] <[Coke]> should be available in your package manager.

[05:53] <Heather> [Coke] so it's KDE app ?

[05:53] <[Coke]> huh. #1 function is <cycle 2>

[05:53] <Heather> I see

[05:53] <[Coke]> (wtf?)

[05:54] <[Coke]> Heather: Aye.

[05:54] <[Coke]> er, I think so.

[05:54] <Heather> it is

[05:55] <[Coke]> ah, turn off cycle detection...

[05:56] <Heather> [Coke] how?

[05:57] <[Coke]> then you can sort by time spent in subs inclusively or exclusively to look for ones with a high percentage, or a high call count.

[05:57] <[Coke]> View -> Do Cycle Detection (unselect)

[05:58] <[Coke]> defined() is called 408 times, 4% of the app. (infinite is called 140 times, 3.33%)

[05:59] <Heather> [Coke] in kcachegrind?

[05:59] <Heather> defined() ?...

[05:59] *** rindolf left
[05:59] <[Coke]> "'2" in CORE.setting is 5.28%. not sure what that is.

[05:59] <[Coke]> Heather: I'm looking at your dataset in kcachegrind.

[05:59] *** rindolf joined
[05:59] <Heather> I'm still building it's deps -_-'

[06:05] <[Coke]> Heather++

[06:05] <Heather> [Coke] ++ ?

[06:07] *** wk left
[06:07] <diakopter> Heather: it's a karma signifier

[06:07] <diakopter> [Coke] was bumping yours

[06:08] <Heather> ah...

[06:08] <Heather> what is Core.settings anyways

[06:08] <diakopter> basically the standard library

[06:08] <Heather> it takes 96% -_-'

[06:09] <diakopter> what's the  '  there

[06:10] <Heather> rain drop

[06:13] <Heather> I'll try to find example

[06:14] <diakopter> example of what

[06:14] <Heather> diakopter smile...

[06:15] <Heather> diakopter http://media.animevice.com/uploads/0/66/159380-sweat_drop_super.jpg

[06:16] <rhinux> ah...

[06:18] *** rindolf left
[06:18] *** rindolf joined
[06:18] <Heather> [Coke] it's hard to understand what actually calls CORE.settings that much, but maybe it's perl6 loading basic environment?

[06:20] <[Coke]> Heather: the tab on the right shows you the calles.

[06:20] <[Coke]> *callers

[06:22] <Heather> [Coke] I see but it's still hard to detect what calls it because they are not alike a->b they are alike a->b->c->a->x ...

[06:23] <[Coke]> mmm.

[06:23] <Heather> when I use -e "say 1" it's 64 on metamodel and 33 on CORE

[06:24] <[Coke]> You are now at the point where I would normally say "hey, jnthn, what does this mean?"

[06:24] *** raiph joined
[06:24] <diakopter> I suspect it's seeing the interpreter loop

[06:25] <Heather> metamodel shows no callers

[06:25] *** rindolf left
[06:26] *** rindolf joined
[06:28] <Heather> profiling is not that easy here )

[06:30] <[Coke]> yah, it's not trivial, I don't think - definitely ping the .eu crowd when they wake up though.  (.eu crowd, consider yourself pinged!)

[06:31] <FROGGS> morning

[06:33] <Heather> morning

[06:34] <Heather> [Coke] and there is trouble, Ok I found big CORE call and I can see all the callers and can detect what caller is problematic but what if I have this caller used once if sub A and once 3000 times in another sub B ...

[06:35] <FROGGS> <Heather> when I use -e "say 1" it's 64 on metamodel and 33 on CORE

[06:35] <FROGGS> Heather: 64 what?

[06:35] <Heather> not sure if I can detect them too if I go to the caller and see if it is used by B much more then by A, but maybe, I should learn it

[06:35] <Heather> FROGGS percents

[06:35] <FROGGS> ahh

[06:36] <FROGGS> I guess this is about rakudo on parrot ?

[06:37] <Heather> yes

[06:37] <Heather> profiling

[06:37] *** rindolf left
[06:37] <Heather> originally looking for way to speed up the script

[06:37] *** rindolf joined
[06:37] <FROGGS> ya, tried something similar last week

[06:38] <FROGGS> but it is hard to speeden up parrot if you have no knowledge about it :/

[06:39] <Heather> FROGGS why picked parrot? :)

[06:39] <FROGGS> because you only see the parrot C-calls, no?

[06:39] *** toebu joined
[06:40] <Heather> FROGGS no I mean why perl6 main implementation is on parrot )

[06:41] <FROGGS> Heather: ohh I believe the implementation was originally meant to be a C impl., but then it was split up to be able to do Both Things Right(TM)

[06:42] <FROGGS> I'm pretty new to perl6, so it might not be 100% accurate

[06:42] <[Coke]> Heather: parrot was originally intended to be a (the) VM for perl6.

[06:43] <[Coke]> zzz.

[06:44] <Heather> I see...

[06:44] <Heather> [Coke] what about JIT?

[06:49] *** rindolf left
[06:50] *** rindolf joined
[06:56] *** wk joined
[07:01] *** odoacre joined
[07:02] *** quester_ joined
[07:04] *** rindolf left
[07:04] *** rindolf joined
[07:06] *** mberends__ joined
[07:09] *** toebu left
[07:09] *** mberends_ left
[07:10] *** quester_ left
[07:12] <Heather> What's major difference of parrot comparing to llvm and mono ? dynamic typing?

[07:16] *** rindolf left
[07:16] <sorear> yeah, parrot was designed to support late-bound languages at a time when mono didn't

[07:16] *** rindolf joined
[07:17] <sorear> llvm is kind of misnamed, it's not really the same kind of animal as { parrot, CLR, JVM }

[07:17] *** mberends__ left
[07:18] <sorear> llvm is a modular native code generator.  think "gcc as a library with a sane interface and license"

[07:18] <sorear> mono's JIT can be configured to use LLVM for generating native code

[07:18] <Heather> I'm making some googling... Allison is not in canonical, right? :)

[07:18] <sorear> mono also has an internal native code generator

[07:19] <Heather> sorear which is using gcc?

[07:19] *** domidumont joined
[07:19] <sorear> where did canonical come in to this?

[07:19] <sorear> Heather: nobody who can avoid it uses gcc

[07:20] <Heather> sorear it's just I was googing about parrot, it's developers ....

[07:22] *** _jaldhar joined
[07:23] *** sqirrel joined
[07:28] *** rindolf left
[07:29] *** rindolf joined
[07:30] *** domidumont left
[07:30] *** domidumont joined
[07:36] *** mberends joined
[07:40] *** pushkar joined
[07:40] <pushkar> hi all

[07:40] <Heather> hi

[07:40] <pushkar> hi Heather

[07:41] <pushkar> can someone please guide me with perl6 development

[07:41] <pushkar> I am interested to contribute

[07:42] <moritz> pushkar: hello and welcome

[07:42] <moritz> pushkar: what do you want to contribute?

[07:43] <moritz> pushkar: you can write modules, tests, documentation, help with the compilers, organize conferences, blog about Perl6

[07:43] <moritz> the possibilities are endless. It really depends on your strengths and preferences

[07:43] *** rindolf left
[07:44] <pushkar> Moritz.. thank you so much.. I have production exposure in perl... 

[07:44] *** rindolf joined
[07:45] <Heather> then good idea will be start with porting perl5 libraries :) Just my guess.

[07:45] <pushkar> i am interested in developing modules.. but i am really a newbie related to perl6 development procedures

[07:45] <pushkar> that sounds good to me..

[07:46] <moritz> the development procedure is just like in any other languages: write a bit of code and tests, run the tests, fix the code until the tests pass. Then iterate. :-)

[07:47] <pushkar> WOW.. Very good Moritz.. I will start here on :) thanks again....

[07:48] <moritz> http://wiki.perl6.org/Create%20and%20Distribute%20Modules might also be of interested

[07:48] <moritz> pushkar: and do feel free to ask questions here, we always try to be helpful

[07:49] <labster> pushkar: you can see what we already have at  http://modules.perl6.org/   If you need some inspiration, there's a list of most wanted modules here: https://github.com/japhb/perl6-most-wanted/blob/master/most-wanted/modules.md

[07:49] *** SamuraiJack joined
[07:50] <labster> I've been working on modules and it's been a lot of fun.

[07:50] <pushkar> It is of immense relief to me moritz.. You made me comfortable on this IRC.. I will surely get in touch with you.. Let me first  go through all links..

[07:51] <pushkar> Labster : Thanks alot

[07:53] *** FROGGS left
[08:04] *** rindolf left
[08:05] *** rindolf joined
[08:08] *** wk left
[08:14] *** FROGGS joined
[08:17] *** mberends left
[08:18] *** cognominal left
[08:19] *** Guest88747 left
[08:20] *** rindolf left
[08:20] <tadzik> good morning #perl6

[08:21] <Heather> tadzik morning

[08:21] *** rindolf joined
[08:21] *** fhelmberger joined
[08:22] *** cognominal joined
[08:27] *** xinming left
[08:31] *** xinming joined
[08:32] *** _jaldhar left
[08:35] *** rindolf left
[08:35] *** _jaldhar joined
[08:39] *** rindolf joined
[08:46] *** isomorphisms left
[08:51] *** kresike joined
[08:51] <kresike> hello all you happy and/or unhappy perl6 people

[08:53] *** wk joined
[08:53] *** rindolf left
[08:53] *** rindolf joined
[08:57] *** zby_home joined
[09:01] <jnthn> morning o/

[09:01] <moritz> \o jnthn 

[09:02] <arnsholt> 'lo jnthn 

[09:13] <hoelzro> JSON::Tiny takes 2 minutes to decode a 818K JSON file =(

[09:13] <tadzik> did you try profiling?

[09:13] <hoelzro> I intend to =)

[09:14] <hoelzro> ...does Rakudo Star come with a profiler?

[09:14] <tadzik> yes

[09:14] <tadzik> perl6 --profile

[09:14] <tadzik> then push the output in (k|q)cachegrind's throat :)

[09:15] <tadzik> we should advertise built-in profiler as a kickass feature :)

[09:15] *** Liz joined
[09:15] <hoelzro> I'll try it out in a bit!

[09:16] *** Liz is now known as Guest84995

[09:19] <moritz> mls++ deserves most credit for the profiler

[09:25] *** Guest84995 left
[09:25] <dalek> rakudo/nom: 73ca26a | (Timo Paulssen)++ | src/Perl6/Actions.pm:

[09:26] <dalek> rakudo/nom: this makes &?ROUTINE available in regex foo { ... }.

[09:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/73ca26a8b3

[09:26] <dalek> rakudo/nom: f440d46 | (Timo Paulssen)++ | src/Perl6/Actions.pm:

[09:26] <dalek> rakudo/nom: don't give &?ROUTINE to /.../ regexes.

[09:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f440d46722

[09:26] <dalek> rakudo/nom: 3536942 | jonathan++ | src/Perl6/Actions.pm:

[09:26] <dalek> rakudo/nom: Merge pull request #116 from timo/ROUTINE_in_regex

[09:26] <dalek> rakudo/nom: 

[09:26] <dalek> rakudo/nom: Routine in regex/token/rule

[09:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/35369421db

[09:26] <labster> JSON::Tiny is about 20% faster than XML for loading ~15kB number formatting files, so I translated the files and started using it instead.

[09:26] <Heather> yeah profiling

[09:27] <labster> But that's only a drop from 5 to 4 seconds.

[09:28] *** rindolf left
[09:28] *** d4l3k_ joined
[09:28] *** bruges_ joined
[09:31] *** Mikey_ joined
[09:31] *** jnthn_ joined
[09:32] <nwc10> moritz: nearest U-bahn to the German Perl Workshop - Moritzplatz

[09:36] *** lestaway joined
[09:36] *** hypolin left
[09:36] *** lestaway is now known as lestrrat

[09:36] *** labster left
[09:36] *** d4l3k_ is now known as dalek

[09:39] *** preflex_ joined
[09:40] *** preflex left
[09:40] *** preflex_ is now known as preflex

[09:40] *** jnthn_ is now known as jnthn

[09:42] *** hypolin joined
[09:43] *** lue joined
[09:43] *** Vlavv joined
[09:46] <hoelzro> what's the licensing for the Camelia logo?

[09:47] <jnthn> hoelzro: Click the image on perl6.org, it takes you to info about it

[09:47] <hoelzro> ah =/

[09:47] *** dakkar joined
[09:48] <hoelzro> well, that's good; I was thinking of using the logo for a site for Perl 6 help

[09:50] *** _jaldhar left
[09:50] *** _jaldhar joined
[09:52] *** hugme joined
[09:52] *** ChanServ sets mode: +v hugme

[09:53] *** zby_home left
[09:54] <Heather> tadzik I'm not sure but does all perl6 stuff must be installed in parrot site folder? panda too?

[09:54] <Heather> I mean /usr/lib/parrot/5.1.0/languages/perl6/site

[09:57] <tadzik> Heather: no, you can choose to install it elsewhere :)

[09:57] <tadzik> gtg now, bbl

[09:57] <jnthn> errand, bbi30, then should have time to do some Perl 6 stuff :)

[09:58] <nwc10> at which point the yellow light on the goalposts will start to rotate? And everyone should stand back?

[10:01] <Heather> elsewhere

[10:02] <Heather> where package manager must to install it ...

[10:04] *** hypolin left
[10:10] *** anuby left
[10:11] <hoelzro> I'm guessing .accepts_type is called on the HOW object when testing a value against a type signature?

[10:14] *** bowtie joined
[10:15] *** rindolf joined
[10:20] *** cognominal left
[10:23] <hoelzro> how can I create a class that uses a custom metaobject?  is there syntax for it, or should I just invoke a method on the metaobject to create the new class?

[10:26] <rindolf> Hi all.

[10:27] <moritz> hoelzro: the latter

[10:27] <hoelzro> ok, I figured =)

[10:27] <hoelzro> rindolf: ahoy

[10:28] <rindolf> hoelzro: what's up?

[10:29] <hoelzro> nothing much

[10:29] <hoelzro> just working, musing about Perl 6 stuff =)

[10:29] *** Liz joined
[10:30] *** Liz is now known as Guest13754

[10:32] <hoelzro> if I want to return multiple hashes, what's the right way to return them/destructure them?

[10:32] <hoelzro> ex. return (%server-filters, %client-filters)

[10:32] <hoelzro> my ( $server, $client ) = get-filters;

[10:32] <Heather> hoelzro panda doesn't support destdir aswell?

[10:32] <hoelzro> Heather: it does!

[10:32] <hoelzro> via DESTDIR

[10:33] <Heather> hoelzro it's prefix though

[10:33] <Heather> hoelzro prefix named wrong imo

[10:37] <Heather> hoelzro or am I wrong?

[10:37] <hoelzro> prefix is typically considered the "prefix" of the final install location

[10:38] <hoelzro> DESTDIR is typically where make install will install things

[10:38] <Heather> hoelzro what about $destdir  = $prefix;

[10:38] <hoelzro> if $prefix is '/usr/local'

[10:38] <hoelzro> then everything will be installed under /usr/local/usr/local/...

[10:39] <Heather> hoelzro no...

[10:39] <hoelzro> ?

[10:40] <Heather> hoelzro https://gist.github.com/tadzik/5132411

[10:40] <Heather> hoelzro actually it will be installed under /usr/local

[10:41] <hoelzro> I'm not sure how to interpret that gist...

[10:41] *** Guest13754 left
[10:42] <Heather> hoelzro ok ... let start with example. examine you want it on /usr/bin on your system and on /mounted/usr/bin

[10:43] <hoelzro> wait, why both?

[10:43] <Heather> no matters...

[10:43] <Heather> logically prefix is /usr/bin and destdir is / first time and /mounted second time

[10:44] <hoelzro> prefix is most likely /usr

[10:44] <Heather> yes

[10:44] <Heather> agreed

[10:44] <Heather> hoelzro but does prefix works for panda?

[10:45] <hoelzro> Heather: I don't know

[10:45] <hoelzro> I just know that DESTDIR does

[10:45] <Heather> hoelzro what do you use as destdir?

[10:45] <Heather> I hope that it is not /usr :)

[10:45] <hoelzro> Heather: I haven't tried it yet, but since I'll be using panda to create packages, I would use the packaging directiroy

[10:45] <hoelzro> *directory

[10:46] <Heather> I see...

[10:47] <Heather> what is cwd anyways?

[10:48] <hoelzro> for me, it's where I have the package spec file

[10:48] <jnthn> hoelzro: on meta-programming stuff, see http://jnthn.net/papers/2012-gpw-meta-programming.pdf

[10:50] <hoelzro> thanks jnthn 

[10:52] <Heather> hoelzro whats $!x

[10:52] <hoelzro> private member

[10:53] <Heather> thanks

[10:55] <Heather> hoelzro it's the problem because I want to make panda to use separated destdir and prefix but I'm not sure if I understand existing content, that's why I'm asking about that

[10:56] <hoelzro> ok, so what are you trying to accomplish?

[10:57] <Heather> hoelzro does it support destdir and must it be implemented or not

[10:57] <hoelzro> from what I've seen, it already supports destdir

[10:58] <Heather> then I need to know about custom prefix then

[11:00] <hoelzro> so what do you need custom prefix for?

[11:01] <Heather> hoelzro to install it somewhere alike /usr

[11:01] <hoelzro> Heather: ok, what's your final goal?

[11:01] <Heather> hoelzro nothing but clarity

[11:02] <hoelzro> so you're curious?

[11:02] <hoelzro> I'm just trying to understand what you're trying to do =)

[11:03] <Heather> hoelzro I should give you a freebsd link to this question

[11:04] <Heather> hoelzro http://www.freebsd.org/doc/en/books/porters-handbook/porting-prefix.html

[11:04] <Heather> hoelzro it's how things going in usual

[11:04] <colomon> diakopter: "How long did it take?"  I left it running before I went to bed.  It's still running now.  So far it's run against 59 files of 72, but I sorted them so the smallest went first.  It's found two files that actually have the characteristics I'm looking for.

[11:05] <nwc10> jnthn: :-(

[11:05] <nwc10> t/nqp/49-regex-interpolation.t .. 1/37 Unhandled exception: java.lang.NullPointerException in !INTERPOLATE_REGEX in <anon> in parse in ACCEPTS in <anon> in <anon>

[11:05] <Heather> portage (gentoo package manager) is designed to use destdir. all the source based package managers use it. and when destdir is the same as prefix then it's just prefix named wrong.

[11:05] <hoelzro> oooh ok

[11:05] <hoelzro> I'm not sure if panda supports prefix

[11:06] <hoelzro> I think it uses whatever prefix Rakudo was installed with

[11:06] <Heather> tadzik ping

[11:06] <Heather> hoelzro ufo does, but I can't see same on panda

[11:06] <hoelzro> I'm not sure about panda, but I remember that ufo indeed does

[11:06] <hoelzro> but ufo, iirc, doesn't support destdir =(

[11:07] <Heather> hoelzro O'rly? :)

[11:07] <hoelzro> (iirc)

[11:07] <Heather> hoelzro https://github.com/masak/ufo/pull/5

[11:07] <hoelzro> oh, I saw that =)

[11:08] <Heather> hoelzro and because of comment there I'm not sure if panda does :)

[11:09] <dalek> Heuristic branch merge: pushed 31 commits to rakudo/md-nqp by jnthn

[11:09] *** kaleem left
[11:10] <jnthn> nwc10: Which test target?

[11:10] <nwc10> good question. Working that out

[11:10] <jnthn> nwc10: I have a suspicion that file will only work on the self-host, not the cc

[11:10] <jnthn> nwc10: Because it basically does an eval.

[11:11] <nwc10> I think it's the cc

[11:11] <jnthn> nwc10: Which needs the compiler available in-process.

[11:11] <Heather> hoelzro I'm about to finish patch to make panda support prefix in the same way.

[11:11] <nwc10> given that it was just below a failure on test 46, which is the one that needs ICU for the cross compiler, but passes natively

[11:11] <Heather> hoelzro I hope that I do it correct

[11:11] <nwc10> but I'm checking

[11:11] <jnthn> nwc10: Maybe it's time for me to make "make test" be what "make selftest" is now

[11:11] <jnthn> nwc10: At this point, that's the target that really matters.

[11:11] <hoelzro> I'm not sure adding prefix to panda is such a good idea

[11:12] <Heather> hoelzro I'm not sure too

[11:12] <hoelzro> panda figures out its prefix from where the perl6 executable will find modules

[11:12] <Heather> hoelzro that's why I'm asking )

[11:12] <hoelzro> putting them elsewhere might get confusing

[11:12] <hoelzro> but it'd be nice for something like local::lib

[11:12] <Heather> ...

[11:13] <Heather> hoelzro basically final path is destdir + prefix so you still can use destidr as prefix if you wish

[11:14] <hoelzro> I don't know about that

[11:14] <hoelzro> if I set DESTDIR=~/perl6

[11:14] <hoelzro> and do a panda install something

[11:14] <hoelzro> something will be installed to ~/perl6//usr/local/Cellar/rakudo-star/2013.02/lib/parrot/4.10.0/languages/perl6/site/lib or something like that

[11:16] <Heather> hoelzro it's correct...

[11:17] <hoelzro> I would not consider that correct

[11:17] <hoelzro> how you are you supposed to know what to provide to use lib to use that path?

[11:17] <hoelzro> it's specific to the Rakudo star version, as well as the parrot version

[11:18] <hoelzro> you'd have to add ~/perl6/usr/local/Cellar/rakudo-star/*/lib/parrot/*/languages/perl6/*/lib to @*INC

[11:18] *** rhinux left
[11:18] <Heather> hoelzro it's added

[11:18] <hoelzro> where is it added?

[11:18] <Heather> hoelzro and it's default path.

[11:19] <Heather> hoelzro when you install rakudo or parrot it's added.

[11:19] <nwc10> jnthn: yes, it's nqptest that fails. test and selftest pass

[11:19] <hoelzro> Heather: but that path is not in @*INC

[11:20] <hoelzro> that's why I'm saying specifying a prefix is not a good idea

[11:20] <Heather> hoelzro it will be specified by default if you will not set it

[11:21] <Heather> hoelzro at least ufo makes so

[11:21] <hoelzro> I could specify ~/perl6, /tmp/, /var/tmp/perl6, /foo/bar/baz as the destdir

[11:21] <hoelzro> and @*INC wouldn't contain all of them

[11:21] <Heather> I don't get last point

[11:22] <hoelzro> I think I kind of lost track of what I was trying to say =P

[11:22] <hoelzro> ok, hang on

[11:22] <hoelzro> I have to think, heh

[11:23] <hoelzro> I know I read this: hoelzro basically final path is destdir + prefix so you still can use destidr as prefix if you wish

[11:23] <hoelzro> and that didn't seem right to me

[11:23] <Heather> hoelzro https://github.com/tadzik/panda/pull/37

[11:24] <hoelzro> ok

[11:25] <Heather> it needs some testing still and I'm not sure how is it now, both flags destdir and prefix must be optional for installer

[11:27] <moritz> regarding the destdir stuff

[11:27] <moritz> IMHO panda should install to the same destdir as rakudo was

[11:27] <moritz> because then rakudo will find the modules

[11:27] <moritz> so I don't see why panda need patches at all

[11:28] <moritz> what's the value of installing to some location where rakudo can't find the modules?

[11:28] <Heather> moritz another distribution

[11:28] * moritz doesn't understand that answer

[11:28] <Heather> moritz I can use same package manager to install package for several running operating systems

[11:29] <moritz> ah

[11:29] <moritz> bootstrapping, so to say

[11:29] <Heather> moritz ?

[11:34] <Heather> bonsaikitten what do you think?

[11:37] <Heather> hoelzro by the way it's possible to avoid conflicts with panda deps ( if we don't use --nodeps ) by using blocking packages. so user will be warned and will desire what to use filetools or panda.

[11:38] <hoelzro> ah

[11:39] <hoelzro> moritz: I think customizing destdir is ok, prefix I'm not sure

[11:39] <hoelzro> for building packages, I need to do DESTDIR=$pkgdir panda install $pkg

[11:40] <Heather> when you say destdir you mean prefix

[11:40] <hoelzro> I'll be back in a bit

[11:40] <hoelzro> lunch time

[11:40] <Heather> or not )

[11:40] <hoelzro> then we can discuss prefix vs destdir =)

[11:41] <Heather> we can't I will go to own birthday party -_-'

[11:42] *** Heather left
[11:48] <ruoso> hoelzro: DESTDIR is a well-defined installation override that is used specifically to say "pretend as if the root of the filesystem was here"

[11:49] *** pushkar left
[11:50] <ruoso> PREFIX has a meaning which I think was established by autotools, to specify the common things between the libdir, the bindir and the includedir. I.e.: $prefix/lib $prefix/include $prefix/bin

[11:51] <ruoso> moritz: the reason to allow separate installation of modules is the same reason why local::lib exists. You want to be able to say: "the dependencies for my application can be found in this directory"

[11:52] <ruoso> so you can manage and deploy such dependencies independently from the system-wide install as well as indepenedent from other applications.

[11:53] *** SmokeMachine joined
[11:53] <ruoso> this gets slightly more complicated if you have bytecode being generated as well as native bindings, because then your installation need to be made abi-awaer

[11:53] <ruoso> which is why perl5 has the arch-specific dir inside the deployment area

[12:06] *** Heather joined
[12:07] <ruoso> Heather: please backlog, I've made some comments about the previous discussion

[12:07] <Heather> ruoso backlog? how?

[12:07] <moritz> http://irc.perl6.org/

[12:09] <Heather> Heather I see

[12:10] * Heather is speaking with self

[12:11] *** rindolf left
[12:11] <Heather> rurban I only afraid install syntax and related stuff compatibility

[12:12] <jnthn> Heather: Did you mean ruoso? :)

[12:12] <Heather> yes

[12:13] <Heather> ruoso and early it was Panda::Installer.new(resources => $r, destdir => $destdir); now it's Panda::Installer.new(resources => $r, destdir => $destdir, prefix => $prefix);

[12:15] <Heather> but should be fine.... if :$ means optional and it is iirc

[12:15] <ruoso> I guess what I am trying to say is that it would be a shame if panda didn't incorporate the ability of local:::lib

[12:20] *** skids left
[12:33] <dalek> nqp: b0b3603 | jnthn++ | src/ops/nqp.ops:

[12:33] <dalek> nqp: Implement nqp::captureposprimspec.

[12:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b0b360312e

[12:33] <dalek> nqp: 079592c | jnthn++ | src/QAST/Operations.nqp:

[12:33] <dalek> nqp: Add nqp::captureexistsnamed.

[12:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/079592c6e1

[12:33] *** bowtie left
[12:37] <dalek> rakudo/md-nqp: ab0d7bd | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[12:37] <dalek> rakudo/md-nqp: Named args and constraints in NQP-based disptacher

[12:37] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/ab0d7bde47

[12:41] *** rindolf joined
[12:44] <timotimo_> thanks for merging my stuff :)

[12:44] *** lue left
[12:45] <jnthn> timotimo_: Thanks for your stuff :)

[12:49] <[Coke]> http://stackoverflow.com/questions/15382133/are-perl5-libraries-are-importable-in-perl6 

[12:52] <arnsholt> jnthn: To return to my question from last night (turned out that it was bedtime =), what I want is for nqp::list to return a new VMArray, rather than a QRPA. Should I do that as a new op in nqp.ops or by generating QAST in QAST/Operations.nqp?

[12:54] <jnthn> arnsholt: The way NQPJVM does it is by desugaring it to nqp::create(nqp::hlllist()) or so

[12:54] <jnthn> (and then adding the elements)

[12:55] <jnthn> arnsholt: That in turn hangs off having some configuration/mapping.

[12:56] <arnsholt> Yeah, that makes sense

[12:56] <jnthn> Largely, I'd say see the way we do it over in nqp jvm

[12:57] <jnthn> However, a word of caution: a lot of stuff currently depends on the thing being a PMC, not some 6model object.

[12:57] <jnthn> This is all gonna have to be solved Very Soon anyway because we need it for the JVM stuff

[12:57] <arnsholt> That's good to know. I've started a branch locally, so I shouldn't break stuff randomly

[12:57] <jnthn> *nod*

[12:57] <hoelzro> ruoso: I know, I was trying to relate that, but doing a poor job of it =/

[12:58] *** lue joined
[12:58] * ruoso commute &

[12:58] <hoelzro> I think local::lib (or something like it) support for panda would be nice, but it's not urgent

[12:58] <arnsholt> jnthn: But ripping out QRPA entirely is an acceptable goal, right?

[13:01] <jnthn> arnsholt: Yes, in so far as it'll promote things being more standard between backends.

[13:01] <jnthn> arnsholt: And of course we can start looking at native types.

[13:01] *** am0c left
[13:01] <jnthn> arnsholt: er, natively typed arrays I mean

[13:01] <arnsholt> Yeah, sure

[13:02] *** colomon left
[13:02] *** snuffles joined
[13:03] <arnsholt> I've noticed NQP/Parrot has list_i and friends. That the way you want to do it permanently, or something more parametric-y?

[13:04] <jnthn> I've ended up with them over on the JVM port too. They boil down to a handful of types that parameterize the REPR appropriately, though.

[13:06] <arnsholt> Right. I'll go with that for the time being, then

[13:08] *** Heather left
[13:14] *** SamuraiJack left
[13:14] *** lue left
[13:22] *** bluescreen10 joined
[13:25] <hoelzro> hmm

[13:26] <hoelzro> JSON::Tiny is pretty fast at parsing JSON if it's mostly whitespace.

[13:27] <jnthn> git diff

[13:27] <jnthn> oops

[13:27] *** nyuszika7h left
[13:27] *** lue joined
[13:28] <dalek> rakudo/md-nqp: c2fb4bc | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[13:28] <dalek> rakudo/md-nqp: Give NQP-based dispatcher support for 'is default'

[13:28] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/c2fb4bcaac

[13:28] <dalek> rakudo/md-nqp: 8f645ee | jnthn++ | src/ (2 files):

[13:28] <dalek> rakudo/md-nqp: Get junction failover into multi-dispatcher.

[13:28] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/8f645ee6cb

[13:29] *** nyuszika7h joined
[13:29] <nwc10> not sure if this is a stupid or RTFM question - rakudo/md-nqp is attempting to port as much of the multidispatch code as makes sense from PIR to NQP?

[13:29] <jnthn> nwc10: From *C* to NQP

[13:29] *** nyuszika7h left
[13:29] <nwc10> aha

[13:29] <nwc10> I like self hosting

[13:30] *** nyuszika7h joined
[13:31] <jnthn> The theory is that most multi-dispatches are simple enough to have the outcome cached

[13:31] <jnthn> And those that aren't involve invoking constraints or doing trial-bindings of signatures.

[13:32] <jnthn> So those where the cache applies get pretty much no extra overhead, and those where we are doing more work in NQP, not C, will have more work to lose the extra cost in.

[13:33] *** srini joined
[13:34] *** srini left
[13:35] *** lustlife left
[13:37] <jnthn> Also avoids a bunch of inferior runloops

[13:42] *** lue left
[13:45] *** kaleem joined
[13:45] *** JimmyZ joined
[13:48] <hoelzro> it would seem that JSON::Tiny is so slow because of object creation

[13:48] *** Mikey_ is now known as MikeyG

[13:48] <jnthn> "object creation" is pretty generic

[13:48] <jnthn> Match object creation?

[13:48] <jnthn> Or something more specific?

[13:49] <hoelzro> well, as a test, I decoded this:

[13:49] <hoelzro> '[' . join(',' ('{}') x 100_000) . ']'

[13:49] <hoelzro> which took a while

[13:49] <hoelzro> this one, however:

[13:49] <hoelzro> '[' . join(',' ('true') x 100_000) . ']'

[13:49] <hoelzro> took a lot less time

[13:49] *** JimmyZ_ joined
[13:50] <JimmyZ_> Good evening, #perl6

[13:50] <dalek> rakudo/md-nqp: f4b352b | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[13:50] <dalek> rakudo/md-nqp: Correct sentinel.

[13:50] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/f4b352b9dc

[13:50] <dalek> rakudo/md-nqp: 4c470a1 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[13:50] <dalek> rakudo/md-nqp: Invalidate sort order as needed.

[13:50] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/4c470a1e26

[13:50] <dalek> rakudo/md-nqp: 136dc0b | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[13:50] <dalek> rakudo/md-nqp: Fix compiler thunk checking.

[13:50] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/136dc0be30

[13:50] *** LlamaRider joined
[13:50] <jnthn> o/ JimmyZ_ 

[13:50] <nwc10> I'm getting spectests currently on Rakudo HEAD

[13:50] *** JimmyZ left
[13:51] <jnthn> nwc10: spectest *fils*?

[13:51] *** JimmyZ_ is now known as JimmyZ

[13:51] <jnthn> *fils*

[13:51] <jnthn> FAILS!

[13:51] <nwc10> them yes

[13:51] <nwc10> t/spec/S32-exceptions/misc.rakudo

[13:51] <jnthn> ...

[13:51] <nwc10> t/spec/S32-num/rat.rakudo

[13:51] <nwc10> plus a bunch of TODO passes

[13:51] *** am0c joined
[13:53] <timotimo_> nwc10: could you be more specific?

[13:53] <timotimo_> or i could just boot up my machine and do them myself

[13:53] <JimmyZ> hi jnthn ;)

[13:53] <nwc10> er, hangon, just nuked the build tree and rebuilding

[13:53] <nwc10> so "there will be a delay"

[13:55] <jnthn> My Rakudo tree just switched from using C-based mutli-dispatch to the NQP one, so you can imagine I have some failures ;)

[13:55] <nwc10> I do need to check *which* HEAD I was playing with

[13:56] *** lue joined
[13:58] *** lichtkind joined
[13:58] <lichtkind> ping jnthn 

[13:59] *** skids joined
[13:59] <lichtkind> have rakudo compile error just want to know where to post

[14:01] <JimmyZ> rt ?

[14:03] *** xinming_ joined
[14:03] *** xinming left
[14:03] <lichtkind> http://pastebin.com/35N6aaN8

[14:04] <lichtkind> yes your right jimmy

[14:04] *** xinming_ left
[14:04] *** xinming joined
[14:05] <JimmyZ> pastebin is blocked by gfw :(

[14:06] *** alester joined
[14:07] <JimmyZ> or https://gist.github.com/  ?

[14:07] <lichtkind> yes that is better

[14:08] <lichtkind> but i already submitted under rakudobug

[14:08] <hoelzro> ok, apparently hash creation is pretty expensive?

[14:09] *** PacoAir joined
[14:10] *** lichtkind left
[14:17] <LlamaRider> doing another P5 to P6 port here -- when I am in class Foo and "use Foo::Bar" with the usual P5 setup in which class Bar is in Foo/Bar.pm6, I get an error. 

[14:17] <LlamaRider> I am pretty sure I don't understand :: any longer

[14:18] <JimmyZ> what's the error message?

[14:18] <LlamaRider> the error is: Merging GLOBAL symbols failed: duplicate definition of symbol Bar

[14:19] <JimmyZ> could you paste the code?

[14:19] <moritz> "in which class Bar is in Foo/Bar.pm6"

[14:19] <moritz> that's not quite the usual setup

[14:19] <moritz> it's usual for Foo::Bar to be in Foo/Bar.pm6

[14:19] <LlamaRider> moritz: that's what I meant, Foo::Bar is in Foo/Bar.pm6

[14:20] <LlamaRider> JimmyZ: let me make a minimal example first

[14:20] <JimmyZ> or push the code to the github ;)

[14:22] <LlamaRider> never mind, I figured it out and it was something embarrassing :D

[14:23] *** Psyche^ joined
[14:23] <JimmyZ> ;P

[14:23] <LlamaRider> copy-pasted Bar in Baz and didn't rename it to Baz, so the error was to the point - I was loading class Foo::Bar twice

[14:24] *** Patterner left
[14:24] *** Psyche^ is now known as Patterner

[14:25] <jnthn> bbi30

[14:28] *** JimmyZ left
[14:28] <rindolf> LlamaRider: hi, are you new here?

[14:29] <LlamaRider> hi rindolf. I wouldn't say I am new-new, but I haven't been consistently around. I've ported one CPAN module to P6 until now, and am learning more by porting a few others.

[14:30] <rindolf> LlamaRider: ah, OK.

[14:30] <rindolf> LlamaRider: I've ported some code of my own (Project Euler/etc.)

[14:30] <rindolf> Not sure my P6 is very idiomatic.

[14:31] <LlamaRider> I'd love to port some of my projects to P6, but I need a lot of CPAN before I can get there... So doing that first

[14:32] <rindolf> LlamaRider: BTW, my /part message is still "Yay, I'm a llama again!" which is taken from http://www.youtube.com/watch?v=W5GjhMMPM00

[14:32] <rindolf> LlamaRider: I'm an individual of many species.

[14:33] <rindolf> LlamaRider: OK, put the horse before the cart.

[14:33] <LlamaRider> :D awesome

[14:33] <rindolf> LlamaRider: I like Llamas.

[14:35] *** colomon joined
[14:35] <LlamaRider> I'm afraid I am no Llama expert myself, but I'm quite fond of Perl :)

[14:36] * hoelzro has no idea how to interpret the results from perl6 --profile

[14:37] *** Heather joined
[14:40] *** kaare__ joined
[14:41] *** census joined
[14:42] <arnsholt> hoelzro: kcachegrind

[14:42] <hoelzro> arnsholt: ah, thanks!

[14:43] <LlamaRider> Are there export tags for P6? If not I will probably just export everything in the "all" tag. I'm not even sure how useful of a feature that is in P5.

[14:44] <moritz> LlamaRider: yes

[14:44] <moritz> you can say  sub foo() is export(:a, :b) { };

[14:44] <moritz> and then   use YourModule :a;

[14:45] <LlamaRider> moritz: cool! thanks

[14:52] *** szabgab joined
[14:54] <szabgab> hi,  I've tried to build Rakudo on Windows from source and failed, so I installed the Rakudo * MSI   - I think it suits my needs better anyway...

[14:55] <szabgab> A couple of things, I hope someone here might be able to help me:

[14:55] *** lichtkind joined
[14:55] <szabgab> http://rakudo.org/2013/02/24/rakudo-star-2013-02-released/  has an "href" that is not a real link, I wonder if that's on purposed?

[14:55] <szabgab> s/d//

[14:56] <LlamaRider> " Bug reports about missing and broken

[14:56] <LlamaRider> features are welcomed at href="mailto:rakudobug@perl.org">rakudobug@perl.org. "

[14:57] <LlamaRider> oh the irony

[14:57] *** Liz joined
[14:58] *** Liz is now known as Guest11539

[14:58] <szabgab> then I think it never told me it has finished to install ...

[14:58] <szabgab> and it has not changed my PATH to include c:\rakudo\bin    

[14:59] <nwc10> 3 spectest fails from nom: http://pasta.test-smoke.org/461

[15:01] *** Guest11539 is now known as lizmat

[15:02] <FROGGS> question to all: If I'd run a perl 5 service, how hard would it be to do same NativeCally-stuff in rakudo to call into that perl 5 service?

[15:02] <FROGGS> shouldn't take longer than a weekend, right?

[15:03] <lizmat> FROGGS: isn't that what blitzkost is / was?

[15:04] <moritz> it didn't go through NCI

[15:04] <szabgab> who usually builds Rakudo * for Windows?

[15:05] <FROGGS> lizmat: I must admin, I dont know

[15:05] <FROGGS> *admit

[15:06] <Heather> I plan do it in future

[15:06] <FROGGS> moritz: I dont really care if it is NCI or TCP or something else in the background

[15:06] <moritz> szabgab: pmichaud_

[15:07] <Heather> I think I already found some defect with rakudo on windows but I will try to explore it myself

[15:07] <szabgab> ok, so wait till pmichaud_ comes by with my complaints, right?

[15:07] <FROGGS> Heather: might be still nice to report it, even if you want to fix it yourself

[15:08] <moritz> szabgab: or you could build it yourself

[15:08] <szabgab> I couldn't

[15:08] <szabgab> the compilation failed for me 

[15:08] <Heather> FROGGS first I want to be sure if that's a bug

[15:08] <szabgab> but it is ok for me

[15:08] <szabgab> I just want to complain :)

[15:09] <FROGGS> Heather: sure

[15:12] <szabgab> Heather: do you have Rakudo * on Windows?

[15:13] <szabgab> Heather: have you installed the msi?

[15:13] <Heather> yes

[15:13] *** lizmat left
[15:13] <Heather> yes

[15:13] <szabgab> has it configured the PATH for you?

[15:13] <Heather> yes

[15:13] <Heather> C:\Rakudo )

[15:13] <szabgab> it installed in c:\rakudo

[15:13] <Heather> but doesn't add to ENV

[15:13] <szabgab> but it has not changed PATH

[15:14] <szabgab> right

[15:14] <Heather> yes )

[15:14] <szabgab> and have you managed to use p6doc?

[15:14] <Heather> didn't tryed this at all.

[15:14] <Heather> yet.

[15:15] <szabgab> ok, and have you tried any modules that come with Rakudo * ?

[15:15] <Heather> just tested my script and found strange reaction

[15:15] <szabgab> ok, as I dpm

[15:15] <Heather> so i tested tadzik's perl6-File-Tools

[15:15] <szabgab> as I don't see any modules

[15:15] <szabgab> how?

[15:15] <Heather> szbalint_ cloned my script which is using it :)

[15:16] <Heather> szabgab https://github.com/Cynede/ignore

[15:16] <szabgab> heh szbalint_ will be happy I am back on the channel :)

[15:16] <Heather> -_-'

[15:17] <Heather> szabgab btw I wonder about magical way it find libs on windows

[15:17] <szabgab> ok, I wrote a little .bat file so I can use p6doc from the command line

[15:17] <szabgab> do you mean the parrot libs or perl6 modules?

[15:18] <Heather> perl6 modules

[15:18] <szabgab> are there any perl6 modules that came with it?

[15:18] <Heather> seems like on windows it goes recursive to all folders from . and adds all the stuff

[15:18] <szabgab> Oh and have you tried panda?

[15:19] <Heather> szabgab not yet but I should because I've made some changes on panda in my fork

[15:19] *** isomorphisms joined
[15:20] <Heather> szabgab https://github.com/Cynede/panda/commit/230c7406fbdb05a213a81a5cb1d3db6eb9cf560b It will be good if someone else will also test it )

[15:21] *** arlinius joined
[15:24] *** wk left
[15:26] *** kaleem left
[15:28] * jnthn back

[15:29] <FROGGS> jnthn: if you have time, I'd like to talk about blitzkost

[15:30] *** Heather left
[15:31] <jnthn> r: $_ = '123'; s/2/x/; .say

[15:31] <p6eval> rakudo cee2f9: OUTPUT«1x3␤»

[15:31] <jnthn> r: $_ = '123'; s/2/x/; say $/

[15:31] <p6eval> rakudo cee2f9: OUTPUT«｢2｣␤␤»

[15:31] <jnthn> r: $_ = 123; s/2/x/; say $/

[15:31] <p6eval> rakudo cee2f9: OUTPUT«(Any)␤»

[15:31] <jnthn> hah!

[15:31] <jnthn> BUSTED

[15:32] <FROGGS> uhh

[15:32] <jnthn> I'll fix it

[15:32] <jnthn> I discovered it while hunting why my multi changes had broken loads of tests.

[15:32] <FROGGS> these things make me feel like we just have 10 tests in roast

[15:34] <jnthn> r: sub foo() { $/ := 42 }; foo()

[15:34] <p6eval> rakudo cee2f9: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot use bind operator with this left-hand side␤at /tmp/Ddm0ufiHc8:1␤------> [32msub foo() { $/ := 42 [33m⏏[31m}; foo()[0m␤    expecting any of:␤        postfix␤»

[15:34] <jnthn> That wants a fix also....

[15:34] <FROGGS> n: sub foo() { $/ := 42 }; foo()

[15:34] <jnthn> Though that one is RT'd

[15:34] <p6eval> niecza v24-33-gfc6d5fd:  ( no output )

[15:34] <FROGGS> hmmm, weird, I though niecza didnt get that right

[15:40] <LlamaRider> So is bitwise or ~| or +| in P6? And is bitwise negation still ~ ?

[15:41] <LlamaRider> I should get myself a "Learning Perl6" book

[15:43] <moritz> ~| is stringy bitwise OR

[15:43] <moritz> +| is integer bitwise OR

[15:43] <moritz> and iirc negation is ~^ abd +^

[15:45] <FROGGS> say 2 +| 1

[15:45] <FROGGS> r: say 2 +| 1

[15:45] <p6eval> rakudo cee2f9: OUTPUT«3␤»

[15:48] *** gdey joined
[15:55] <LlamaRider> rn: say (+^0b10).base(2);

[15:55] <p6eval> rakudo cee2f9, niecza v24-33-gfc6d5fd: OUTPUT«-11␤»

[15:57] <hoelzro> so alester showing up last night got me to thinking about roadblocks that Perl 6 has

[15:57] <hoelzro> and I think one of the biggest ones is that there's a lot of tribal knowledge

[15:58] <moritz> or phrased differently, lack of documentation

[15:58] <hoelzro> I often have questions that are difficult/impossible to answer by searching the specs (either because of organization or specificity to a given implementation)

[15:58] <hoelzro> moritz: yes =)

[15:58] <hoelzro> so I ask here, and I get a glowing answer from one of th devs right away

[15:59] <hoelzro> so I think if a post appears that highlights where Perl 6 needs help, that would be a good thing to point out

[15:59] <hoelzro> </2c>

[16:02] *** lichtkind left
[16:05] *** SunilJoshi joined
[16:05] *** pmurias joined
[16:05] <pmurias> is there a plugin to Plack/Catalyst to ban based on IP (preferably a ready made solution like CatalystX::AutoCRUD)?

[16:06] <jnthn> FROGGS: On Blizkost, what were you wanting to know?

[16:07] <jnthn> pmurias: This channel may not offer the highest chance of getting an answer to that... :)

[16:08] <Ulti> http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html  ruby overtakes perl :'(

[16:11] <hoelzro> huh; it's not creating objects that's slow

[16:11] <hoelzro> it's creating hashes

[16:15] *** lichtkind joined
[16:15] <Ulti> I dont think its a lack of documentation but documentation in different places in different formats aimed at different audiences

[16:16] <Ulti> a language spec isn't somewhere your average application developer goes to get some help

[16:16] <hoelzro> true

[16:16] <hoelzro> the example I was thinking of was "how do I profile a Perl 6 script"?

[16:16] <Ulti> a FAQ based on the IRC logs might be a plan

[16:17] <hoelzro> hmm

[16:17] <hoelzro> well, I have a project idea

[16:17] <hoelzro> called "Ask Camelia"

[16:17] <Ulti> like pick out every question, so IRC lines ending in ? then do TF-IDF or something to build some topics

[16:17] <hoelzro> it's just a simple text form, where you type "p5: $0" or "traits" or something

[16:17] <szabgab> does rakudo * come with its own "prove" ?

[16:17] <hoelzro> and it presents you with an example and a link to the spec

[16:18] <hoelzro> and links to other relevant documentation

[16:18] <hoelzro> I was thinking of initializing it with Q/A from IRC

[16:18] <Ulti> also what would be quite epic is if getting a compiler error you got asked if you wanted to jump on channel for some help with the error and source file uploaded as a gist

[16:18] <Ulti> we have a perl6 IRC interface after all

[16:19] <Ulti> maybe have some kind of hoop to jump through to prevent spam

[16:19] <hoelzro> hmm

[16:19] <szabgab> tadzik: the panda that comes with rakudo tells me first I need to give the options --notests and only at the end the command 'install'  that's quite confusing

[16:19] <hoelzro> well, that's another thing I wanted to add to AC

[16:19] *** lichtkind left
[16:19] <hoelzro> if the question doesn't have any answers yet, the web application could forward it here

[16:20] <Ulti> sounds good hoelzro 

[16:20] <hoelzro> now, I just need the time )

[16:20] <hoelzro> =)

[16:21] <Ulti> also keeping an index of compiler problems to solutions would be neat, so chatting from the compiler prompt everything said is logged with the gist and you get a list of previous problems that look similar

[16:21] *** lichtkind joined
[16:21] <Ulti> doesn't have to be in the compiler, just some friendly wrapper

[16:21] <hoelzro> hmm, that's interesting

[16:21] <Ulti> kidgloves perl6 program.p6

[16:21] <Ulti> could make it quite a general application

[16:22] <Ulti> where it just looks up what channel to use for the program

[16:22] *** SunilJoshi left
[16:22] <Ulti>  #perl6-kidgloves for example

[16:24] <Ulti> basically what everyone does with google and stack overflow anyway but automated

[16:25] <Ulti> also everything else under the sun has "gone social" why not compilers :)

[16:26] <Ulti> "10 of your friends are using perl6, would you like to message them?"

[16:26] *** lichtkind left
[16:26] <hoelzro> heh

[16:27] <Ulti> seriously though, why dont compilers do that... its the first thing everyone does when they give up fixing it themselves

[16:27] <Ulti> perhaps show someone this stuff after they get the exact same error after several consecutive compiles

[16:27] <Ulti> so its obvious they are failing

[16:30] *** not_gerd joined
[16:30] <not_gerd> o/

[16:31] <not_gerd> szabgab: what's your windows build environment and how does it fail?

[16:32] <pmurias> jnthn: sorry thought it was #perl ;)

[16:33] <pmichaud_> szabgab: pong

[16:33] <szabgab> not_gerd: do you mean how rakudo fails to build, sorry I am over that, I am a happy (sort of) Rakudo  * user :)

[16:33] *** snuffles left
[16:33] <szabgab> pmichaud: repong

[16:34] <szabgab> pmichaud: I sent a mail and a bug report with the issues I found so far - issues with  Rakudo * msi

[16:34] *** snuffles joined
[16:34] <pmichaud> szabgab: I saw the mail to the p6c list

[16:34] <pmichaud> bug report?

[16:35] <szabgab> [perl #117151]

[16:35] <szabgab> the lack of  "prove" and that panda blows up

[16:36] <pmichaud> szabgab: this is from the .msi ... ?

[16:36] <szabgab> yes

[16:36] <pmichaud> there is no 2013.02 msi yet, though.

[16:36] <pmichaud> at least, I didn't make one.

[16:36] <szabgab> hmm

[16:36] <szabgab> let me check then :)

[16:36] <jnthn> o/ pmichaud 

[16:37] <dalek> rakudo/md-nqp: e5208af | jnthn++ | src/Perl6/Actions.pm:

[16:37] <dalek> rakudo/md-nqp: Switch most dispatches to NQP-based dispatcher.

[16:37] <dalek> rakudo/md-nqp: 

[16:37] <dalek> rakudo/md-nqp: Next up will be hunting/fixing regressions.

[16:37] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/e5208af98d

[16:37] <pmichaud> o/ jnthn

[16:37] <dalek> rakudo/md-nqp: 23f38ed | jnthn++ | src/Perl6/Actions.pm:

[16:37] <dalek> rakudo/md-nqp: Allow binding to $/.

[16:37] <dalek> rakudo/md-nqp: 

[16:37] <dalek> rakudo/md-nqp: Because we need it now to fix other things, but also because it will

[16:37] <dalek> rakudo/md-nqp: fix an RT once this branch is merged.

[16:37] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/23f38ed658

[16:37] <dalek> rakudo/md-nqp: f81a127 | jnthn++ | src/core/ (2 files):

[16:37] <dalek> rakudo/md-nqp: Fix $/ setting and $_ lookup a bit.

[16:37] <dalek> rakudo/md-nqp: 

[16:37] <szabgab> 2013.01.msi

[16:37] <szabgab> pmichaud:  2013.01.msi  sorry for the confusion

[16:37] <pmichaud> not sure what to do about 'prove'

[16:38] <szabgab> If there is no perl6 based prove, and there is no perl 5 based prove installed then I think panda should fail (in a nice way)

[16:38] <pmichaud> seems like panda shouldn't use 'prove', unless we're going to make p5 a runtime requirement for p6

[16:38] <szabgab> and tell the user to run with --noinstall

[16:39] <FROGGS> sooooo, workshop break before lunsch

[16:39] <FROGGS> *lunch

[16:39] <szabgab> but yes, panda should not rely on any perl5 thing

[16:39] <FROGGS> jnthn: well, I'm at a workshop right now so my motivation is like 450%

[16:40] <pmichaud> I'll file a bug report for panda

[16:40] <FROGGS> jnthn: I'd like to know how the state is, and what I can do (I have some (or some more) Perl 5 knowledge)

[16:40] <FROGGS> jnthn: so I want to let you know that I wanna hook in, so we're able to use (simple) Perl 5 modules from within rakudo

[16:41] <szabgab> when do you expect to have 2013.02.msi ?   and will you include at least those batch files?

[16:41] <kresike> bye folks

[16:41] *** kresike left
[16:45] <pmichaud> which batch files?

[16:46] <pmichaud> p6doc and panda?

[16:46] <pmichaud> I suspect they might be long in the star repo.

[16:46] <pmichaud> I suppose it could be part of the .msi only, though.

[16:46] * not_gerd wonders if parrot-prove would work

[16:47] <jnthn> I think putting them in the Star repo and including them with Windows installs in general is good

[16:48] <pmurias> jnthn: we need a working use :from<perl5> so that perl5 questions are on topic here ;)

[16:48] *** SamuraiJack joined
[16:48] <jnthn> ;)

[16:48] <jnthn> Blizkost was built before any of the 6model stuff happened.

[16:49] <pmichaud> https://github.com/tadzik/panda/issues/38

[16:51] <pmichaud> szabgab: if you can provide the .bat scripts and other items as issue reports for star, they could likely make it into the 2013.03 release.

[16:51] <szabgab> pmichaud: thanks

[16:51] <szabgab> pmichaud:  the bat files are those one-liners I included in the email

[16:51] <FROGGS> jnthn: so we first need to get it working agein?

[16:51] <FROGGS> *again

[16:52] <pmichaud> https://github.com/rakudo/star/issues

[16:52] <FROGGS> jnthn: can you add a roadmap for me?

[16:52] <szabgab> I can commit them somewhere if you let me know the repo

[16:52] <pmichaud> https://github.com/rakudo/star

[16:52] <szabgab> ok, I'll open the issues there or send a pull :)

[16:52] <pmichaud> excellent, thanks

[16:53] <szabgab> should I create a directory called win32/bin  and put them there?

[16:53] <pmichaud> szabgab: looking

[16:54] <szabgab> maybe under ports ?

[16:54] <pmichaud> ports/ is good enough for now

[16:54] <pmichaud> we'll want to update the install script, undoubtedly

[16:55] <szabgab> which is where?

[16:55] <pmichaud> https://github.com/rakudo/star/blob/master/tools/build/Makefile.in

[16:56] <szabgab> oh I see I have commit bit to this repo

[16:56] <szabgab> so I can just add the bat files

[16:56] <szabgab> I feel empowered

[16:57] <pmichaud> I'll upload my "how to build star on windows" instructions tomorrow, too

[16:59] <szabgab> That's good but I am just a user here !

[17:00] *** bowtie joined
[17:00] *** fhelmberger left
[17:01] <dalek> star: d0e0a2e | (Gabor Szabo)++ | ports/win32/p (2 files):

[17:01] <dalek> star: Adding bat files for MS Windows installation. To be placed in the bin directory of Rakudo

[17:01] <dalek> star: review: https://github.com/rakudo/star/commit/d0e0a2e31b

[17:01] <szabgab> ok, that's enough harm done for today

[17:02] *** lichtkind joined
[17:02] *** wk joined
[17:04] *** lichtkind left
[17:05] *** szabgab left
[17:05] *** isomorphisms left
[17:06] *** SmokeMachine left
[17:07] *** SunilJoshi joined
[17:10] <mehwork> are there any good perl podcasts?

[17:12] *** SmokeMachine joined
[17:13] *** grondilu joined
[17:14] <masak> szabgab++ made some Perl 6 videos, I recall.

[17:14] <masak> screencasts.

[17:15] <masak> here's one of them: https://www.youtube.com/watch?v=tqxI7L5FQ4w

[17:15] <mehwork> i mean audio ones i can listen to on ipod

[17:15] <mehwork> i found one 'perlcasts' on itunes

[17:15] <masak> ok, sweet.

[17:15] <mehwork> thanks, i'll check those out too

[17:16] *** crab2313 joined
[17:16] <masak> make sure you check out FLOSS weekly #140: http://twit.tv/floss140

[17:16] <masak> with a very nice interview with our own pmichaud++

[17:17] <mehwork> cool

[17:20] *** pmurias left
[17:24] *** Liz joined
[17:24] *** Liz is now known as Guest79209

[17:25] *** Guest79209 is now known as lizmat

[17:29] <moritz> that's from 2010, right?

[17:30] *** isomorphisms joined
[17:30] <masak> something like that. but I bet it's still interesting.

[17:31] <timotimo_> October 29 2010, so very late 2010

[17:35] *** snuffles left
[17:36] *** Chillance joined
[17:37] *** snuffles joined
[17:43] *** spider-mario joined
[17:50] *** FROGGS left
[17:50] *** sqirrel left
[17:51] *** not_gerd left
[17:51] *** sqirrel joined
[17:52] *** yoleaux joined
[17:53] <masak> people, some time in the coming weeks I may hold a half-day Perl 6 course on IRC. (timed so that both US and Europe are awake during it.) I already have some people showing interest in such a course.

[17:53] <masak> anyone else who is/might be interested?

[17:56] * moritz might be

[17:57] <moritz> oh, and I'll provide logging if you want to do it another channel

[17:57] *** fgomez left
[18:00] <moritz> *in another channel

[18:02] *** dakkar left
[18:03] *** yoleaux left
[18:03] *** yoleaux joined
[18:06] *** fhelmberger joined
[18:07] *** SunilJoshi left
[18:12] <timotimo_> i wonder if careful parallelisation of parsing the grammar and calling the action methods would give any performance benefit rather than just a huge headache.

[18:13] <timotimo_> maybe an STM approach would be feasible some day

[18:13] *** davidagain joined
[18:13] <timotimo_> as in start the parsing of the next construct and if it accessed a piece of data that was just being created by an earlier action method (say, a lexical or world value or something), then abort the earlier parse and try again later

[18:14] <moritz> sounds scary

[18:15] <TimToady> trouble is you can't know whether there's a dependency, if the previous construct changed the language

[18:15] <TimToady> not until the lexer is recalculated

[18:15] <TimToady> *lexers are

[18:15] <timotimo_> so making the abort happen isn't going to be reliable?

[18:16] <TimToady> so I think the biggest win will be caching lexers from run to run

[18:16] <TimToady> the identity of the current language is the most important thing, and Perl 6 really, really hates to parse without knowing the current language

[18:18] <TimToady> if you can minimimize the lexer recalculation with a cache, then whenever you get a cache hit, you don't have to spend time recalculating the lexers, and then maybe you can think about parallelizing the actions

[18:19] <TimToady> of course, by the time you've cached all the langauges, it's a small step to remember the exact text of the next function, and if it matches, just use a cached parse of it

[18:19] <TimToady> and then you have an incremental compiler

[18:20] <moritz> sounds also scary :-)

[18:21] *** snuffles left
[18:22] <TimToady> it's only scary if you lose track of the identities and start guessing

[18:23] <masak> moritz: thanks. I will most likely take you up on that offer.

[18:24] <masak> I want to do it in another channel, because I don't want to expose everyone here to a Perl 6 course ;)

[18:24] *** fhelmberger left
[18:24] *** snuffles joined
[18:25] <alester> masak: I think a Perl 6 course isn't bad in channel.

[18:26] <alester> We don't want #perl6 to only be devs,right?

[18:26] <alester> heck, *i* could use a Perl 6 course.

[18:26] *** snuffles left
[18:27] <dalek> perl6-roast-data: 1caa659 | coke++ | / (4 files):

[18:27] <dalek> perl6-roast-data: today (automated commit)

[18:27] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1caa659ccf

[18:27] <arnsholt> alester: I think someone in #parrot said you might know about reasons for the choices of compiler warnings in Parrot. Am I remembering correctly?

[18:31] <[Coke]> nwc10: are your failures listed here: https://github.com/coke/perl6-roast-data/blob/master/rakudo_summary.out#L2419

[18:32] <[Coke]> Aoogh. rakudo has failed spectests six days in a row.

[18:32] <[Coke]> er, *AOOOGAH*

[18:33] <moritz> [Coke]: I'm doing a spectest run and see if anything fails for me too

[18:33] *** snuffles joined
[18:33] <moritz> and if yes, try to fix it

[18:34] <[Coke]> moritz++

[18:34] <jnthn> I'm getting some segfaults on some of the regex tests.

[18:35] *** snuffles left
[18:35] <jnthn> I thought it was in my branch only, then couldn't track them to anything in it, and found they're in nom too...

[18:35] <[Coke]> jnthn: which tests?

[18:35] <jnthn> regex-in-variable.t, litvar.t are two of them

[18:36] <[Coke]> (I'm not seeing those. failures I'm seeing are in S26-documentation/09-configuration.t and S32-num/stringify.t

[18:36] *** snuffles joined
[18:38] <masak> alester: in channel I would feel like I was drowning out ordinary development work, or newbie questions, or other discussion.

[18:39] <masak> alester: I've previously held a very pleasant 3-hour walkthrough of CQRS on a separate channel. wouldn't mind having a similar format for this course.

[18:41] *** bluescreen10 left
[18:43] *** fhelmberger joined
[18:44] *** fhelmberger left
[18:46] <moritz> [Coke]: I observe two test failures here, t/spec/S26-documentation/09-configuration.t and t/spec/S32-num/stringify.rakudo

[18:46] <moritz> plus some passing TODOs

[18:52] <dalek> roast: fdb4719 | moritz++ | S (3 files):

[18:52] <dalek> roast: fudge and unfudge tests for rakudo

[18:52] <dalek> roast: 

[18:52] <dalek> roast: also switches to planless testing in S32-num/stringify.t, because

[18:52] <dalek> roast: functions that run several tests are hard to fudge.

[18:52] <dalek> roast: review: https://github.com/perl6/roast/commit/fdb47197c0

[18:52] *** bluescreen10 joined
[18:53] <jnthn> I thnk the 09- one may be my fault

[18:53] <jnthn> Will look more in a bit

[18:53] <moritz> iirc tadzik said something along these lines

[18:55] *** _jaldhar left
[18:57] <davidagain> r: say 'r: say "r"'

[18:57] <p6eval> rakudo cee2f9: OUTPUT«r: say "r"␤»

[18:57] <davidagain> aww, that would have been fun

[18:58] *** LlamaRider left
[18:59] <moritz> davidagain: I was very careful to avoid bot cycles when writing p6eval :-)

[18:59] <moritz> davidagain: p6eval sending messages via phenny (or lambdabot, back in the days) etc.

[19:00] <timotimo_> that interview was nice and interesting

[19:00] *** crab2313 left
[19:01] <timotimo_> davidagain: sadly, that would only have caused one back and forth, not a cycle

[19:01] <timotimo_> so, try again? :)

[19:01] <davidagain> hmm

[19:02] <davidagain> quine the dilemma

[19:02] <timotimo_> r: my $str = "r: say $str"; say "r: say $str"; # this doesn't help either, no?

[19:02] <p6eval> rakudo cee2f9: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/CrxmnZwTT2:1␤␤r: say r: say ␤»

[19:02] <davidagain> let me think

[19:02] <timotimo_> r: my $str = 'r: say $str'; say "r: say $str"; # this doesn't help either, no?

[19:02] <p6eval> rakudo cee2f9: OUTPUT«r: say r: say $str␤»

[19:02] <davidagain> r: say r: say $str

[19:02] <p6eval> rakudo cee2f9: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/ijF1NeicGd:1␤------> [32msay r[33m⏏[31m: say $str[0m␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤        statement …

[19:03] <davidagain> nope

[19:03] <timotimo_> a y combinator perhaps?

[19:03] <davidagain> I think a simple contatenative quine should work

[19:03] <moritz> davidagain: the OUTPUT« prefix prevents it from ever taking input from itself

[19:03] <davidagain> yeah, I know

[19:03] <davidagain> (now)

[19:03] <davidagain> any other bots in here I can recruit to my cause?

[19:03] <timotimo_> yeah, this is a theoretical exercise only

[19:03] <moritz> .oO( you can quine any time you like, but you can never loop )

[19:04] *** fgomez joined
[19:05] <davidagain> what we need is a way to get p6 to ignore r: as a bareword

[19:05] <davidagain> ignore my bareness, p6.  don't be a perv.

[19:05] <moritz> davidagain: niecza already does it

[19:05] <moritz> (it's a label)

[19:05] <moritz> but only at statement begin

[19:05] <davidagain> r: goto r

[19:06] <p6eval> rakudo cee2f9: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routines:␤    goto used at line 1␤    r used at line 1␤␤»

[19:06] <moritz> n: goto n

[19:06] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤     'n' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ␤  at /home/p…

[19:06] <moritz> n: n: goto n

[19:06] <alester> arnsholt: Yes, I know all about the GCC warnings that Parrot uses.

[19:06] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«(timeout)»

[19:06] <davidagain> r: r: goto r

[19:06] <p6eval> rakudo cee2f9: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/mrk4E5Ba9r:1␤------> [32mr[33m⏏[31m: goto r[0m␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤        statement modifi…

[19:06] <davidagain> r: goto hell

[19:06] <p6eval> rakudo cee2f9: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routines:␤    goto used at line 1␤    hell used at line 1. Did you mean '&shell'?␤␤»

[19:06] <moritz> rakudo doesn't parse labels yet, and doesn't do goto either

[19:06] <alester> arnsholt: is this more appropriate here or in #parrot?

[19:06] <davidagain> n: say 'r: man up!'

[19:07] <arnsholt> alester: Excellent! The one I'm curious about is -Waggregate-return

[19:07] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«r: man up!␤»

[19:07] <alester> What about it?

[19:07] <arnsholt> Either, really. It's about Parrot, but because of Perl 6

[19:07] <arnsholt> Part of the C 6model API is a function that returns a struct

[19:07] <davidagain> I haven't played with Perl6 for a while.  Does either rakudo or niecza have a GUI frontend for the REPL?

[19:07] <arnsholt> Not a pointer to a struct, but the whole thing is returned. Which means that we get mandatory compiler warnings when compiling NQP and Rakudo

[19:07] <davidagain> (on Windows)

[19:08] <moritz> no

[19:08] <arnsholt> It's not a big deal, but it'd be nice to not have those warnings

[19:08] *** autumn joined
[19:08] <davidagain> p6

[19:08] <davidagain> maybe I can get the J REPL to talk 06

[19:08] <davidagain> the CLI is not fun here in Windowsland

[19:09] <davidagain> and I'm not keen on building for cygwin

[19:09] <alester> arnsholt: The reason I put -Waggregate-return in there is because A) the warning exists, and B) nothing complained.  My approach to setting up warnings was "turn everything on that we possibly can unless there is a reason not to have it on."

[19:10] *** sivoais joined
[19:10] <alester> If we now have stuff returning structs and the compiler warning doesn't make sense, then it may be time to get rid of the warning.

[19:10] <alester> Alternately, you could add -Wno-aggregate-struct to the Perl 6 options.

[19:11] <alester> (I think that's how GCC does negation)

[19:11] <alester> I mean -Wno-aggregate-return

[19:13] <TimToady> Pope Francis!

[19:14] <moritz> habemum francis!

[19:14] <alester> TimToady beats CNN.com

[19:16] *** autumn left
[19:18] *** sivoais left
[19:19] *** sivoais joined
[19:19] *** autumn joined
[19:21] *** Timbus joined
[19:27] *** sivoais left
[19:28] *** sivoais joined
[19:38] *** sivoais left
[19:39] *** sivoais joined
[19:40] *** sivoais left
[19:41] *** sivoais joined
[19:42] *** sivoais left
[19:45] *** LlamaRider joined
[19:45] <arnsholt> alester: Thanks! I'll keep it in mind when I return to my warning-squashing quest =)

[19:51] * masak .oO( clearly, 'francis' is some kind of genitive, and it should be 'hamemum Franceum' ) :P

[19:51] <arnsholt> =p

[19:52] *** sivoais joined
[19:52] *** fgomez left
[19:53] *** zby_home_ joined
[19:55] *** SamuraiJack left
[19:58] *** rindolf left
[19:58] *** szbalint_ left
[19:59] *** szbalint joined
[20:01] <dalek> nqp: 6c4dc29 | jnthn++ | src/guts/multi_dispatch.c:

[20:01] <dalek> nqp: Multi-cache should decontainerize.

[20:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6c4dc29615

[20:02] <dalek> rakudo/md-nqp: 383409d | jnthn++ | src/ (2 files):

[20:02] <dalek> rakudo/md-nqp: Fix $/ lookup more properly.

[20:02] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/383409d064

[20:02] <dalek> rakudo/md-nqp: ad805ff | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[20:02] <dalek> rakudo/md-nqp: A couple of performance tweaks.

[20:02] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/ad805ffc8f

[20:02] <dalek> rakudo/md-nqp: 3199f01 | jnthn++ | src/Perl6/ (2 files):

[20:02] <dalek> rakudo/md-nqp: Add back caching of dispatches.

[20:02] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/3199f01bc1

[20:04] *** fglock joined
[20:08] *** fgomez joined
[20:09] <fglock> I'm working on a module to generate code for a perlito5/perlito6 "jit" backend,

[20:09] <fglock> I wonder if somebody documented which subset of perl6/perl5 intersects

[20:09] <fglock> so I can write a module that works on both

[20:10] <fglock> I could also just try out and see what works

[20:17] <dalek> nqp: 6bd6a25 | jnthn++ | src/guts/multi_dispatch.c:

[20:17] <dalek> nqp: Fix buffer overrun.

[20:17] <dalek> nqp: 

[20:17] <dalek> nqp: The code relied on the check being done higher up, which it isn't any

[20:17] <dalek> nqp: more.

[20:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6bd6a25aa0

[20:20] *** domidumont left
[20:47] <alester> arnsholt++ Yay for warning squashing.

[20:47] <alester> That's why they're there.

[20:49] <arnsholt> Yeah. They've caught some things for me before, so I'd be very happy if I could kill all the warnings in NQP

[20:51] *** am0c left
[21:00] <tadzik> hello #perl6

[21:00] <tadzik> so many messages

[21:01] <arnsholt> Hmm. Maybe I should read some docs about QAST rather than semi-randomly cargo-culting stuff and seeing what happens

[21:02] *** skids left
[21:05] <arnsholt> It's alive!

[21:05] <arnsholt> *ahem*

[21:08] *** yoleaux left
[21:08] <arnsholt> jnthn: Am I right in thinking that I'll have to add a repr_push op to nqp.ops and a pirop mapping for that to use REPROps_Positional->push_boxed?

[21:08] *** yoleaux joined
[21:09] *** yoleaux left
[21:09] *** yoleaux joined
[21:09] <jnthn> arnsholt: The vtable method in SixModelObject is already set up to do the appropriate forwarding.

[21:09] <jnthn> For push at least

[21:09] <jnthn> May need some more filling out.

[21:09] <jnthn> So nqp::push should do it

[21:09] <diakopter> phenny: tell tadzik you've got mail

[21:10] <tadzik> diakopter: thanks, reading ;)

[21:10] <tadzik> I just got back home after the entire day, and it seems like the entire internet was looking for me :P

[21:10] * tadzik has seen RMS live today

[21:11] <arnsholt> jnthn: Right. Then it's probably something else (like a bug in VMArray =)

[21:13] <arnsholt> It's complaining about a zero-byte allocation somewhere

[21:16] <tadzik> diakopter: did I get something from yuo?

[21:16] <arnsholt> There we go. Braino number one in VMArray.c

[21:18] <tadzik> no phenny, no aloha. What do :(

[21:20] <arnsholt> Braino number two!

[21:21] *** arlinius left
[21:22] *** cognominal joined
[21:23] *** zby_home_ left
[21:27] *** zacts joined
[21:28] <diakopter> tadzik: nope; just teasing the lack of phenny

[21:29] <felher> phenny: tell phenny: we missed you. Welcome back. 

[21:30] <felher> The bot will never read it. How sad.

[21:31] *** cognominal left
[21:31] *** cognominal joined
[21:32] *** alester left
[21:35] <dalek> nqp/vmarray-list: 117931a | (Arne Skjærholt)++ | / (2 files):

[21:35] <dalek> nqp/vmarray-list: Add NQPArray type.

[21:35] <dalek> nqp/vmarray-list: review: https://github.com/perl6/nqp/commit/117931a894

[21:35] <dalek> nqp/vmarray-list: 9e4e480 | (Arne Skjærholt)++ | src/QAST/Operations.nqp:

[21:35] <dalek> nqp/vmarray-list: Add nqp::hlllist op.

[21:35] <dalek> nqp/vmarray-list: review: https://github.com/perl6/nqp/commit/9e4e480bd9

[21:35] <dalek> nqp/vmarray-list: 91b03ba | (Arne Skjærholt)++ | src/6model/reprs/VMArray.c:

[21:35] <dalek> nqp/vmarray-list: Fix a couple of brainos in VMArray.c.

[21:35] <dalek> nqp/vmarray-list: 

[21:35] <dalek> nqp/vmarray-list: There's still something broken in VMArray, but at least some of it seems to be

[21:35] <dalek> nqp/vmarray-list: working.

[21:35] <dalek> nqp/vmarray-list: review: https://github.com/perl6/nqp/commit/91b03baa32

[21:38] *** cognominal left
[21:40] <dalek> rakudo/md-nqp: 809cf09 | jnthn++ | src/ops/perl6.ops:

[21:40] <dalek> rakudo/md-nqp: Need to auto-thread shouldn't count as failure.

[21:40] <dalek> rakudo/md-nqp: 

[21:40] <dalek> rakudo/md-nqp: Fixes auto-threading regression with NQP-based multi-dispatch.

[21:40] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/809cf09c88

[21:40] <dalek> rakudo/md-nqp: c63943e | jnthn++ | src/Perl6/Ops.pm:

[21:40] <dalek> rakudo/md-nqp: Remove now-unused mappings.

[21:40] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/c63943ecea

[21:40] <dalek> rakudo/md-nqp: baf8b44 | jnthn++ | src/ops/perl6.ops:

[21:40] <dalek> rakudo/md-nqp: Don't build error strings just to discard them.

[21:40] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/baf8b44a51

[21:40] <dalek> rakudo/md-nqp: 3590914 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[21:44] *** cognominal joined
[21:47] *** bruges joined
[21:47] *** cognominal__ joined
[21:48] *** kaare__ left
[21:49] *** bruges_ left
[21:50] *** cognominal left
[21:52] *** cognominal__ left
[21:52] <timotimo_> ooooh this is amazing :D

[21:53] <timotimo_> i'm trying to make a non-lta error message for when you have this:

[21:53] <timotimo_> r: 1/2.''()

[21:53] <p6eval> rakudo cee2f9: OUTPUT«Method '' not found for invocant of class 'Int'␤  in block  at /tmp/kQspxZlBkL:1␤␤»

[21:53] <timotimo_> and i was wondering why it wouldn't turn it into a proper error:

[21:53] <timotimo_> r: try eval q{1/2.''()}; say $!.WHAT;

[21:53] <p6eval> rakudo cee2f9: OUTPUT«(X::AdHoc)␤»

[21:53] <timotimo_> r: try eval q{1/2.'foobar'()}; say $!.WHAT;

[21:53] <p6eval> rakudo cee2f9: OUTPUT«(X::Method::NotFound)␤»

[21:54] <timotimo_> turns out, this error comes from parrot or something and there's this regex match going on: nqp::p6box_s(nqp::atkey_s($parrot_ex, 'message')) ~~ /"Method '" (.+?) "' not found for invocant of class '" (.+)\'$/

[21:54] <timotimo_> :D

[21:54] <jnthn> haha!

[21:54] <jnthn> Well, it's close ;)

[21:54] <jnthn> We'll get typed exceptions for multi-dispatch failures soon, I expect

[21:55] <timotimo_> cool :)

[21:55] <timotimo_> in the mean time, i'll fix this regex to change + into * and make a test for that for roast

[22:01] *** SmokeMachine left
[22:01] *** not_gerd joined
[22:01] <masak> timotimo_++

[22:01] <not_gerd> o/

[22:02] <not_gerd> is there any reason why https://github.com/rakudo/rakudo/pull/110 shouldn't go in?

[22:02] <not_gerd> it saves a WHOLE CHARACTER when forcing exact signature matches ;)

[22:02] <not_gerd> | where !* -vs- *% where !*

[22:04] *** cognominal joined
[22:04] <jnthn> Hm. I guess it makes Capture more consistent with Array and Hash...

[22:05] <not_gerd> my reasoning is that it's just another container

[22:05] <not_gerd> so false if undefined or empty, true otherwise

[22:06] <timotimo_> hm, were there failures in S32-exceptions/misc.t? i may have broken something.

[22:07] <timotimo_> ok 23 - '$&' died  /  not ok 24 - right exception type (X::Obsolete)  /  # Got:      (X::Syntax::SigilWithoutName)  /  # Expected: (X::Obsolete)

[22:07] <timotimo_> huh?

[22:10] <timotimo_> ah, the latest roast-data commit isn't helpful, because it trips over the nonexisting Elsif exception :(

[22:12] *** spider-mario left
[22:12] *** bluescreen10 left
[22:14] <timotimo_> seems like my commits didn't break those. maybe i can find out where those failures come from, though

[22:14] <timotimo_> that could be nice

[22:14] <timotimo_> oh, perhaps they come from a too old version of nqp? i should build a master nqp i suppose

[22:15] <timotimo_> oh, i forgot to fudge

[22:15] <timotimo_> that was kind of silly

[22:15] *** raiph left
[22:21] <Ayiko> hi #perl6

[22:21] <Ayiko> grondilu: I start my scripts with :::perl

[22:23] <dalek> roast: cb80e7a | (Timo Paulssen)++ | S32-exceptions/misc.t:

[22:23] <dalek> roast: add a test for '' methods not found.

[22:23] <dalek> roast: review: https://github.com/perl6/roast/commit/cb80e7a813

[22:26] <timotimo_> pull request'd

[22:29] <dalek> rakudo/nom: 103481f | (Timo Paulssen)++ | src/core/Exception.pm:

[22:29] <dalek> rakudo/nom: raise X::Method::NotFound even for '' methods.

[22:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/103481fff6

[22:29] <dalek> rakudo/nom: 1c99395 | jonathan++ | src/core/Exception.pm:

[22:29] <dalek> rakudo/nom: Merge pull request #117 from timo/typed_exc_empty_method

[22:29] <dalek> rakudo/nom: 

[22:29] <dalek> rakudo/nom: raise X::Method::NotFound even for '' methods.

[22:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c993950b9

[22:29] <timotimo_> oh, i made the whitespace uglier by accident

[22:29] <timotimo_> oh well.

[22:30] *** zacts left
[22:32] *** zacts joined
[22:36] <dalek> rakudo/md-nqp: 56f7059 | jnthn++ | src/ (2 files):

[22:36] <dalek> rakudo/md-nqp: Optimizer updates for NQP-based dispatcher.

[22:36] <dalek> rakudo/md-nqp: 

[22:36] <dalek> rakudo/md-nqp: Will allow elimination of the MD thunk hack.

[22:36] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/56f70594fa

[22:36] <dalek> rakudo/md-nqp: 73880dd | jnthn++ | / (7 files):

[22:36] <dalek> rakudo/md-nqp: Fully kill off MD thunks.

[22:36] <dalek> rakudo/md-nqp: 

[22:36] <dalek> rakudo/md-nqp: Gets rid of 2 PMCs, 2 ops and an attribute in Routine.

[22:36] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/73880dd2f8

[22:36] *** PacoAir left
[22:43] *** zacts left
[22:43] <dalek> rakudo/md-nqp: 3309f5f | jnthn++ | src/core/Stringy.pm:

[22:43] <dalek> rakudo/md-nqp: Fix a proto.

[22:43] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/3309f5f727

[22:44] *** not_gerd left
[22:47] *** skids joined
[22:52] *** gdey left
[22:58] *** davidagain left
[23:01] <masak> 'night, #perl6

[23:11] *** Chillance left
[23:13] *** cognominal__ joined
[23:14] *** cognominal left
[23:18] <grondilu> Perl6 changes for 2013W10 mentions:  "Added colorcircumfixes."   What the hell is this?

[23:18] *** gdey joined
[23:18] <grondilu> I mean, "color"?

[23:19] <jnthn> typo

[23:19] <jnthn> shoulda said colon

[23:19] <jnthn> Also it makes it sound more than it is

[23:20] <jnthn> There's a parse rule in the grammar called coloncircumfix

[23:20] <jnthn> Which was incorporated. But it doesn't add much new, other than better error reporting.

[23:20] <grondilu> it's not supposed to be used by a Perl6 user, is it?

[23:20] <jnthn> For a very specific case.

[23:20] <jnthn> r: :<>

[23:21] <p6eval> rakudo 1c9939: OUTPUT«Potential difficulties:␤    Pair with <> really means an empty list, not null string; use :('') to represent the null string,␤      or :() to represent the empty list more accurately␤    at /tmp/oYku0bDXFV:1␤    ------> [32m:<>[33m⏏[31m<EOL>[0m␤»

[23:21] <jnthn> It's that error that was inaccurate before, I think.

[23:21] <grondilu> ok

[23:21] <sorear> jnthn: huh?  I thought rakudo could parse sub infix:<+>($a,$b) { ... } since forever

[23:22] *** araujo left
[23:22] <jnthn> sorear: It could

[23:23] <jnthn> sorear: At some point, rather than colonpair calling circumfix directly, STD got a refactor so that it called coloncircumfix and that called circumfix.

[23:23] <jnthn> sorear: It was, afaict, done to prevent giving a misleading error.

[23:24] <jnthn> sorear: All I did was align Rakudo's grammar with STD so we got the better error message. That was the whole of the change. :)

[23:26] <grondilu> Could I add OpenGL to the most wanted modules list or is it too optimistic?

[23:27] <tadzik> go ahed

[23:28] <sorear> even if it were outright impossible, that wouldn't eliminate the want

[23:29] * grondilu just did it

[23:30] <grondilu> One of these days I'd like to learn 3D programming, but I don't feel doing it with a boring programming language.  I'd like to do it in perl6.

[23:31] *** alec__ joined
[23:34] <timotimo_> i believe it wouldn't be terrifically hard to implement opengl with zavolaj

[23:34] <timotimo_> it's a rather simple C API, just a big amount of constants and functions

[23:34] <timotimo_> a good object-oriented (or at least assisted) binding, however, that could be trickier

[23:41] *** not_gerd joined
[23:41] * not_gerd wonders if grondilu knows that Parrot comes with OpenGL bindings that used to (and possibly still does) work with Rakudo

[23:42] <not_gerd> see eg https://github.com/parrot/parrot/blob/master/examples/opengl/triangle.p6

[23:42] <not_gerd> note that I removed these from the sixparrot branch last week

[23:46] *** cognominal__ left
[23:48] *** cognominal__ joined
[23:49] <jnthn> sleep &

[23:49] <dalek> rakudo/md-nqp: 62817b8 | jnthn++ | src/binder/multidispatch. (2 files):

[23:50] <dalek> rakudo/md-nqp: Remove some now-unused code.

[23:50] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/62817b8279

[23:50] <dalek> rakudo/md-nqp: 858cbe2 | jnthn++ | src/core/Stash.pm:

[23:50] <dalek> rakudo/md-nqp: Fix a wrong type constraint.

[23:50] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/858cbe2c97

[23:50] <dalek> rakudo/md-nqp: 6993950 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[23:50] <dalek> rakudo/md-nqp: Some more small optimizations.

[23:50] <dalek> rakudo/md-nqp: review: https://github.com/rakudo/rakudo/commit/6993950d11

[23:50] *** not_gerd left
[23:55] *** gdey left
[23:56] <tadzik> jnthn++ # wonderful commit spree

[23:56] *** davidagain joined
[23:57] <davidagain> quick question: is there a tutorial or writeup on implementing a toy programming language in p6?

[23:57] <davidagain> (not in nqp or anything, but directly on rakudo)

[23:57] *** Timbus|Away joined
[23:57] *** Timbus left
[23:57] *** Timbus|Away is now known as Timbus

