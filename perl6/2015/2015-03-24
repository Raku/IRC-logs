[00:05] *** BenGoldberg joined
[00:09] *** raiph left
[00:21] <timotimo> turns out today's (yesterday's?) p6weekly will be a tad late %)

[00:23] *** tinyblak left
[00:27] *** telex left
[00:28] *** telex joined
[00:31] *** kurahaupo1 joined
[00:31] <raydiak> m: say <1/2>.perl

[00:31] <camelia> rakudo-moar 9746e8: OUTPUT«0.5␤»

[00:32] <raydiak> m: say <1/2>.WHAT

[00:32] <camelia> rakudo-moar 9746e8: OUTPUT«(Rat)␤»

[00:32] <raydiak> m: say 0.5.WHAT

[00:32] <camelia> rakudo-moar 9746e8: OUTPUT«(Rat)␤»

[00:33] <raydiak> timotimo: ^^^ weekly item: rat literal syntax works now

[00:34] <raydiak> (not all the qw/val() stuff yet though)

[00:34] <timotimo> you made it work?

[00:34] <raydiak> yep

[00:34] <raydiak> Mouq++ was kind enough to suggest a refinement and merge it

[00:35] <timotimo> awesome :)

[00:36] <raydiak> m: say <0x1F/0o77>

[00:36] <camelia> rakudo-moar 9746e8: OUTPUT«0.492063␤»

[00:41] *** aindilis joined
[00:42] *** laouji joined
[00:45] *** larion joined
[00:48] *** Woodi left
[00:50] *** tinyblak joined
[00:53] *** tinyblak_ joined
[00:54] <timotimo> i wonder why rakudo executing -e 'say 1' is faster on my laptop than on my desktop

[00:56] *** tinyblak left
[01:00] *** aborazmeh joined
[01:00] *** aborazmeh left
[01:00] *** aborazmeh joined
[01:06] <hoelzro> timotimo: strace?

[01:09] *** larion left
[01:10] <dalek> rakudo/tab-completion: 3e3b22e | hoelzro++ | src/Perl6/Compiler.nqp:

[01:10] <dalek> rakudo/tab-completion: Eliminate redundant loads of linenoise when setting it up

[01:10] <dalek> rakudo/tab-completion: review: https://github.com/rakudo/rakudo/commit/3e3b22e82b

[01:10] *** `7stud joined
[01:11] <`7stud> Hi.

[01:11] <hoelzro> hello `7stud 

[01:12] <`7stud> I'm trying to follow the docs and create an iterator for an array.  That is not my ultimate goal, but here is the code: 

[01:13] <`7stud> 1. my @a = (1, 2, 3,);

[01:13] <`7stud> my $iter <== @a;

[01:13] <`7stud> print $iter.get;

[01:13] <`7stud> And the result is: No such method 'get' for invocant of type 'Array'

[01:13] <`7stud>   in block <unit> at 1.pl:16

[01:14] <`7stud> The docs I'm following are here: http://moritz.faui2k3.org/pugs/docs/Perl6/Spec/S07-iterators.pod.html#The%20Iterator%20Role

[01:15] <hoelzro> `7stud: you may want to look at the official, up-to-date docs: http://design.perl6.org/S07.html#Iterators

[01:15] <skids> `7stud: those are very old docs.

[01:15] <`7stud> hoelzro: Okay, I'll check those docs out.

[01:17] <skids> Also I think that there may be some not-yet-implemented things in that area of rakudo.

[01:18] <hoelzro> m: my @a <== grep { $_ %% 2 } (1..10); say @a.perl;

[01:18] <camelia> rakudo-moar 9746e8: OUTPUT«5===SORRY!5=== Error while compiling /tmp/QqnsouXycN␤Two terms in a row␤at /tmp/QqnsouXycN:1␤------> 3my @a <== grep { $_ %% 2 }7⏏5 (1..10); say @a.perl;␤    expecting any of:␤        infix stopper␤        infix or meta-infix␤      …»

[01:19] <hoelzro> m: my @a <== grep { $_ %% 2 }, (1..10); say @a.perl;

[01:19] <camelia> rakudo-moar 9746e8: OUTPUT«Array.new(2, 4, 6, 8, 10)␤»

[01:19] <hoelzro> huh, apparently feed operators are AI

[01:22] <`7stud> I looked at those docs, and there doesn't seem to be a way to get an iterator for an array.  Basically, I want an iterator that I can call get() or next() on so that I can control the iteration.  

[01:23] <skids> m: my @a <== map { .say }, 0..10; @a.shift.say; # hoelzro: I think feeds are not yet properly lazified.

[01:23] <camelia> rakudo-moar 9746e8: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤True␤»

[01:23] <hoelzro> ahhh

[01:24] <skids> `7stud: You are doing this for concurrency/coroutine type purposes?

[01:24] <`7stud> No. 

[01:24] <[Coke]> gather/take works.

[01:25] <[Coke]> er, that's to add to an array - if you want one element off the array, .pop?

[01:25] <`7stud> I just want to write a for loop over a lazy list, and then I want to write a while loop inside the for loop that kicks in at some point and can continue the iteration.

[01:27] <`7stud> In ruby, I would do that with an Enumerator type, eg. e = list.each, then I can call e.next when I want.

[01:28] <skids> Yes, that is what feeds are good for.  But unfortunately you are both too early and too late to use that feature -- pugs had it, but rakudo's is not working yet.

[01:29] <`7stud> Okay, thanks.

[01:29] <skids> In the meantime, I am sure we can find an equivalent feature.

[01:29] <skids> If you want to give us a look at a code snippet so we can answer better to your needs.

[01:30] <`7stud> I can implement it with a bunch of if statements and flags. 

[01:30] <[Coke]> m: my @stuff = 1..Inf; for @stuff -> $i { say $i; last if $i>10}

[01:31] <camelia> rakudo-moar 9746e8: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤»

[01:31] <hoelzro> whoa, why didn't that blow up? I thought you had to use := binding or it would try to fill the @stuff container

[01:31] <[Coke]> I don't think you can pull more $i's while you're in that particular kind of for loop.

[01:36] *** coffee` left
[01:37] <timotimo> feeds are working in rakudo partially

[01:42] *** rspr joined
[01:42] <rspr> I was checking on contributing to perl6

[01:43] *** zacts left
[01:43] <rspr> But I am not a perler...I am a java developer and outside that I work on python

[01:43] *** kurahaupo1 left
[01:45] *** aborazmeh left
[01:45] <rspr> anybody could answer my query it would be great 

[01:46] *** `7stud left
[01:46] <skids> m: my @bigarray = (1,2,3,4); my @a := gather for @bigarray { "take $_".say; take $_ }; loop { my $v = @a.shift; last unless $v.defined; "loop $v".say; if ($v == 2) { $w = @a.shift; "skip $w".say; } }; # gah seconds too late for `7stud

[01:46] <camelia> rakudo-moar 9746e8: OUTPUT«5===SORRY!5=== Error while compiling /tmp/za7JuMP_tu␤Variable '$w' is not declared␤at /tmp/za7JuMP_tu:1␤------> 3efined; "loop $v".say; if ($v == 2) { $w7⏏5 = @a.shift; "skip $w".say; } }; # gah s␤    expecting any of:␤        postfix␤»

[01:46] <timotimo> hey rspr

[01:46] <skids> whoops.

[01:46] <timotimo> i came directly from python to perl6, i have no perl5 experience whatsoever :)

[01:47] <rspr> That's encouraging

[01:47] <skids> m: my @bigarray = (1,2,3,4); my @a := gather for @bigarray { "take $_".say; take $_ }; loop { my $v = @a.shift; last unless $v.defined; "loop $v".say; if ($v == 2) { my $w = @a.shift; "skip $w".say; } }; # just for completeness

[01:47] <rspr> I found perl a bit syntactically complex..

[01:47] <camelia> rakudo-moar 9746e8: OUTPUT«take 1␤loop 1␤take 2␤loop 2␤take 3␤skip 3␤take 4␤loop 4␤»

[01:47] <timotimo> i'm now one of the greatest 100 contributors to the perl6 effort! :D

[01:47] <timotimo> i find at least perl6 to be quite logical in its makeup of operators

[01:48] *** larion joined
[01:48] <rspr> I would like to follow suit.. ☺

[01:48] <timotimo> like <, >, <=> for numbers, lt, gt, leg for strings

[01:48] <rspr> What can a beginner do r perl6f

[01:49] <timotimo> as well as: || for or, && for and, ... ?? ... !! ... for the ternary operator

[01:49] <timotimo> and having !, ?, &&, || have loose-precedence equivalents not, so, and, or

[01:50] <timotimo> well, you can give us feedback on our documentation while you learn, you can give us feedback on bugs and performance of rakudo for things you've tried, you can test or make modules; that'd be on the coding side

[01:50] <rspr> okay..sounds good

[01:50] <timotimo> i should stop procrastinating the perl6 weekly post :S

[01:51] <rspr>  Regarding setup and all I can revert back to site I guess

[01:52] *** kurahaupo1 joined
[01:58] *** rspr left
[02:00] *** Woodi joined
[02:00] *** yeahnoob joined
[02:02] *** aborazmeh joined
[02:02] *** aborazmeh left
[02:02] *** aborazmeh joined
[02:03] *** kurahaupo1 left
[02:05] *** aborazmeh left
[02:13] <timotimo> hm?

[02:23] *** chenryn joined
[02:29] *** risou is now known as risou_awy

[02:29] *** risou_awy is now known as risou

[02:30] *** adu_ joined
[02:30] <hoelzro> anyone know the licensing for the Rakudo logo (http://rakudoperl.org/wp/wp-content/uploads/2011/04/rakudo-1001.png)?

[02:34] *** zjmarlow__ joined
[02:37] *** ggoebel left
[02:38] *** zjmarlow_ left
[02:39] <hoelzro> I started a repo for Docker stuff, so that we can have an official rakudo-star repo: https://github.com/hoelzro/perl6-docker

[02:39] <hoelzro> it would be fantastic if someone could help me move it under the perl6 org tomorrow!

[02:39] <retupmoca> .tell FROGGS I successfully followed your msi build instructions (using strawberry perl), so they must be complete :)

[02:39] <yoleaux> retupmoca: I'll pass your message to FROGGS.

[02:41] <adu_> hi everyone

[02:41] <skids> o/

[02:41] <timotimo> hola adu

[02:43] *** ggoebel joined
[02:51] *** Woodi left
[03:01] <timotimo> m: say ":)".comb>>.uniname

[03:01] <camelia> rakudo-moar 9746e8: OUTPUT«No such method 'uniname' for invocant of type 'Str'␤  in method dispatch:<hyper> at src/gen/m-CORE.setting:1415␤  in block <unit> at /tmp/fzbpfAnCRM:1␤␤»

[03:01] <timotimo> m: say uniname ":"

[03:01] <camelia> rakudo-moar 9746e8: OUTPUT«COLON␤»

[03:03] *** BenGoldberg left
[03:07] *** Woodi joined
[03:08] *** larion left
[03:09] *** noganex joined
[03:11] *** salva left
[03:11] *** davido_ left
[03:12] *** noganex_ left
[03:12] *** davido_ joined
[03:15] *** zacts joined
[03:16] <adu_> what was >> again? map? fold? reduce?

[03:17] <timotimo> map

[03:17] <timotimo> damn, can't finish the weekly like this!

[03:18] *** Patterner joined
[03:18] <timotimo> the cat just came over onto the couch, slammed his body onto the comfy seat and presented his belly to me for rubbing reasons

[03:18] <timotimo> d'aaw

[03:19] <adu_> weekly?

[03:19] <timotimo> "come on, slave, it's time for you to earn your keep"

[03:19] <adu_> lol

[03:19] <timotimo> p6weekly.wordpress.com

[03:20] <adu_> negative arrays?

[03:20] <timotimo> hm?

[03:20] <adu_> I think I might have had a use case for negative arrays, once, 10 years ago

[03:20] <dalek> doc: 103c676 | skids++ | lib/Language/glossary.pod:

[03:20] <dalek> doc: Add "constraint" to glossary.

[03:20] <dalek> doc: review: https://github.com/perl6/doc/commit/103c676473

[03:20] <adu_> o wait, that says native arrays

[03:21] <adu_> oops

[03:21] <adu_> timotimo: I'm sorry I'm a bad reader

[03:21] <timotimo> hehe

[03:22] *** Psyche^ left
[03:24] *** Vlavv_ left
[03:27] <timotimo> ok, looks like the cat has had enough

[03:29] <adu_> awww

[03:31] <timotimo> the other cat is now licking a corner of a cardboard box

[03:31] <timotimo> i've seen (well, heard) her do that at least a dozen times in the short time i've gotten to know her

[03:31] <timotimo> cats are strange %)

[03:35] <timotimo> m: say <1+2i>.WHAT

[03:35] <camelia> rakudo-moar 9746e8: OUTPUT«(Str)␤»

[03:36] *** Vlavv_ joined
[03:41] <timotimo> since it's already crazy late, I just went ahead and published the post for monday (yes, yesterday) without asking for reviews before

[03:44] *** raiph joined
[03:45] *** laouji left
[03:45] *** zacts left
[03:45] <adu_> yey for lazy deserialization!

[03:45] *** laouji joined
[03:46] *** larion joined
[03:46] <timotimo> :)

[03:47] <adu_> Coke++ for macports work :)

[03:48] <adu_> [Coke]++

[03:48] *** pochi left
[03:49] *** pochi joined
[03:50] *** laouji left
[04:06] *** Sqirrel left
[04:18] *** larion left
[04:19] * skids wonders if RT#124162 which he filed tonight would happen on star (before lazy deserialization was turned on)

[04:19] * synopsebot Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=124162

[04:22] *** chenryn left
[04:25] *** Sqirrel joined
[04:27] <timotimo> skids: there's a #define in moarvm's "sc.h" that you can flip to try it out

[04:27] * timotimo goes to bed, finally

[04:34] *** skids left
[04:36] *** Foxcool joined
[04:46] *** larion joined
[04:48] *** laouji joined
[04:48] *** chenryn joined
[04:54] *** jack_rabbit joined
[04:57] *** larion left
[04:59] *** MadcapJake left
[05:05] *** nige joined
[05:09] *** raiph left
[05:31] *** jack_rabbit left
[05:40] *** jack_rabbit joined
[05:46] *** larion joined
[05:53] *** diana_olhovik_ joined
[05:56] *** jack_rabbit left
[05:59] *** larion left
[06:00] *** jack_rabbit joined
[06:09] *** zjmarlow__ left
[06:10] *** zjmarlow__ joined
[06:16] *** jack_rabbit left
[06:21] *** bjz joined
[06:23] <moritz> }o{

[06:25] <moritz> timotimo++ # p6weekly

[06:26] <FROGGS[mobile]> ohh, have to read

[06:26] <FROGGS[mobile]> morning o/

[06:27] *** anaeem1 joined
[06:27] *** bjz left
[06:30] *** diana_olhovik_ left
[06:35] *** [Sno] left
[06:35] *** kurahaupo1 joined
[06:38] *** adu_ left
[06:40] *** jack_rabbit joined
[06:47] *** anaeem1 left
[06:47] *** anaeem1 joined
[06:47] *** larion joined
[06:50] *** jack_rabbit left
[06:51] *** rindolf joined
[06:52] *** anaeem1 left
[06:52] *** bjz joined
[06:53] *** larion left
[06:54] *** kaleem joined
[07:00] *** kurahaupo1 left
[07:01] *** prime joined
[07:03] *** brrt joined
[07:05] *** xprime left
[07:06] *** gfldex joined
[07:08] *** diana_olhovik joined
[07:09] *** FROGGS joined
[07:12] *** jack_rabbit joined
[07:16] <FROGGS> .

[07:16] <yoleaux> 02:39Z <retupmoca> FROGGS: I successfully followed your msi build instructions (using strawberry perl), so they must be complete :)

[07:16] *** kaleem left
[07:16] <FROGGS> retupmoca: \o/

[07:19] <[Tux]> panda install Inline::Perl6 Slang::Tuxic

[07:19] <[Tux]> resolve stage failed for Inline::Perl6: Project Inline::Perl6 not found in the ecosystem

[07:19] <[Tux]>   in sub die at lib/Panda.pm:180

[07:19] <[Tux]> user error :) Inline::Perl5 of course passes 

[07:20] * [Tux] started from scratch after reading perl6weekly

[07:20] <[Tux]> \o/ RT#123597 also fixed

[07:20] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123597

[07:20] *** gfldex left
[07:25] *** kurahaupo1 joined
[07:26] *** espadrine joined
[07:28] *** virtualsue joined
[07:28] *** nige left
[07:28] *** jack_rabbit left
[07:42] <FROGGS> timotimo++ # weekly

[07:43] *** telex left
[07:44] *** telex joined
[07:45] *** brrt left
[07:47] *** larion joined
[07:48] *** anaeem1 joined
[07:53] *** virtualsue left
[07:53] *** Ven joined
[07:59] *** Rounin joined
[08:01] <nine_> .tell japhb I could not reproduce it with a freshly installed Ubuntu 14.04 LTS Server VM :( You're probably using the desktop version? I can try that, too, but have diminishing hopes of success. Could you maybe get me a backtrace? Might at least give me an idea what's going on.

[08:01] <yoleaux> nine_: I'll pass your message to japhb.

[08:02] *** risou is now known as risou_awy

[08:02] *** risou_awy is now known as risou

[08:04] *** Ven left
[08:05] *** kurahaupo1 left
[08:07] *** nige joined
[08:10] *** darutoko joined
[08:11] *** larion left
[08:19] *** grondilu joined
[08:21] *** EnergyCoffee joined
[08:26] *** rindolf left
[08:26] *** MadcapJake joined
[08:28] <bartolin> m: $_ = 0; s{^(\d+)$} = sprintf "%3d -", $_  # RT #123597

[08:28] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123597

[08:28] <camelia> rakudo-moar 9746e8: OUTPUT«use of uninitialized value of type Any in string context  in block <unit> at /tmp/CY4s_p_XwN:1␤␤Error while creating error string: No exception handler located for warn␤»

[08:29] <bartolin> [Tux]: ^^ this has changed, but doesn't look quite right so me

[08:36] *** kaleem joined
[08:38] <lizmat> timotimo++  # P6W

[08:42] <bartolin> yeah, timotimo++

[08:44] *** [Sno] joined
[08:45] *** fhelmberger joined
[08:58] *** Ven joined
[09:00] *** avalenn joined
[09:01] *** cschwenz joined
[09:09] *** kjs_ joined
[09:11] *** eli-se joined
[09:12] *** chenryn left
[09:12] *** eli-se left
[09:13] *** azawawi joined
[09:14] <azawawi> hi

[09:14] <yoleaux> 23 Mar 2015 22:08Z <FROGGS> azawawi: https://github.com/rakudo/star/blob/master/tools/star/windows-msi.pod

[09:15] *** espadrine left
[09:16] *** chenryn joined
[09:17] <dalek> rakudo/newio: bc08619 | usev6++ | src/core/operators.pm:

[09:17] <dalek> rakudo/newio: Do not return the previous value when generator function of sequence calls 'last'

[09:17] <dalek> rakudo/newio: 

[09:17] <dalek> rakudo/newio: fixes things like 'say 10,9,8, { diff - 1 || last } ... *'

[09:17] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/bc08619e1e

[09:17] <dalek> rakudo/newio: 9b5d4e2 | FROGGS++ | src/core/operators.pm:

[09:17] <dalek> rakudo/newio: Merge pull request #393 from usev6/nom

[09:17] <dalek> rakudo/newio: 

[09:17] <dalek> rakudo/newio: Don't return previous value when generator function of sequence calls 'last'

[09:17] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/9b5d4e256a

[09:17] <dalek> rakudo/newio: a57affe | lizmat++ | src/Perl6/World.nqp:

[09:17] <dalek> rakudo/newio: Don't curry if there's nothing to curry

[09:17] <dalek> rakudo/newio: 

[09:17] <dalek> rakudo/newio: This fixes the LTA error on e.g. Hash[]:

[09:17] <dalek> rakudo/newio: 

[09:17] <dalek> rakudo/newio:  Too few positionals passed; expected at least 3 arguments but got only 2

[09:17] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/a57affe8c2

[09:17] <dalek> rakudo/newio: 9746e88 | TimToady++ | src/Perl6/Grammar.nqp:

[09:17] <dalek> rakudo/newio: require existing character before peeking delims

[09:17] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/9746e88dd1

[09:17] <dalek> rakudo/newio: 6d97b03 | lizmat++ | src/ (3 files):

[09:17] <dalek> rakudo/newio: Merge branch 'nom' into newio

[09:17] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/6d97b032a4

[09:17] <FROGGS> hi azawawi 

[09:18] <azawawi> FROGGS: thanks :)

[09:19] *** laouji left
[09:20] *** risou is now known as risou_awy

[09:21] *** risou_awy is now known as risou

[09:22] <lizmat> .tell jnthn is STORE_AT_KEY supposed to be a public API or not ?

[09:22] <yoleaux> lizmat: I'll pass your message to jnthn.

[09:23] <bartolin> assuming, I provide an additional multi candidate for infix:<cmp> which matches when comparing a user defined class A with an Int with the following code:

[09:23] <bartolin> multi sub infix:<cmp> (A $x, Int $n) { $x.val cmp $n }

[09:23] <bartolin> is that supposed to be visible "everywhere"?

[09:23] <lizmat> no, only in the scope you define it, afaik

[09:24] *** larion joined
[09:24] <lizmat> or if exported from a module, where you use the module

[09:24] *** laouji joined
[09:24] <bartolin> more to the point: somewhere in 'sub SEQUENCE' there is code like '$value cmp $n' and it looks like my multi candidate is not used there

[09:25] <lizmat> is your candidate narrow enough?

[09:25] <moritz> that's what 'lift' is supposed to do

[09:25] <moritz> but it's NYI

[09:25] <bartolin> lizmat: I think so -- it works if I call it manually

[09:26] <bartolin> there is a (longish) gist for my problem: https://gist.github.com/usev6/2e43b83757e5c0e719fc

[09:26] <lizmat> moritz: lift isn't even speculated about anymore

[09:26] <moritz> lizmat: uhm, no, it seems I'm more than a year behind things

[09:27] * bartolin has never heard about 'lift'

[09:28] <lizmat> .oO( it was lifted from speculation )

[09:28] <bartolin> *g*

[09:29] <lizmat> moritz: spec commit eb0f21689e70b3280745e2  (4 nov 2013):

[09:29] <lizmat> unspec statement_prefix:lift

[09:29] <lizmat>     

[09:29] <lizmat>     This is going away in favor of better parameter declarations that can

[09:29] <lizmat>     implicitly default to operators as seen by the caller.

[09:30] <lizmat> afk for a few hours&

[09:30] <bartolin> o/

[09:31] <Ven> It's funny of one of emacs' most liked plugins, magit, uses the same "scheme" as vim...:)

[09:33] *** kjs_ left
[09:33] <azawawi> FROGGS: which visual studio are you using btw to build the msi?

[09:35] *** dakkar joined
[09:38] *** abraxxa joined
[09:40] *** yeahnoob left
[09:44] <FROGGS> azawawi: 2010 on the 32bit machine and 2012 on my 64bit

[09:45] <FROGGS> azawawi: but retupmoca++ just built using strawberry perl last night

[09:45] <azawawi> FROGGS: really? i just tried it and it didnt work

[09:45] <azawawi> FROGGS: using the 64-bit strawberry perl

[09:46] *** Woodi left
[09:47] * azawawi reads yesterday's irc logs

[09:53] * azawawi tries to build rakudo using VS2012

[09:54] <FROGGS> the build environment is the same as if you build rakudo from the git repositories...

[09:54] <FROGGS> except that you additionally need the WiX Toolset for the msi

[10:06] *** espadrine joined
[10:07] *** kjs_ joined
[10:09] *** Woodi joined
[10:16] *** virtualsue joined
[10:22] *** cygx joined
[10:24] *** houseboat left
[10:24] <cygx> azawawi: it is possible to build rakudo using Strawberry Perl, but you manually have to manually copy around some files that end up in the wrong places

[10:24] *** brrt joined
[10:24] *** virtualsue left
[10:24] <cygx> azawawi: also, the setting won't compile if JIT or optimizations are enabled

[10:27] *** sqirrel_ joined
[10:52] <moritz> cygx: a summary of files that end up in the wrong places would be very helpful (where they end up, where they should end up)

[10:54] *** kjs_ left
[10:54] *** mr-foobar left
[10:56] <azawawi> cygx: Thanks for the info. Could you please provide the file list?

[11:01] *** nige left
[11:02] <cygx> moritz, azawawi: it's a bit more involved than I remember

[11:02] <cygx> first, there's https://gist.github.com/cygx/bdd2e4b00706aad5d38b to get the import library into lib/

[11:03] <cygx> then, moar.dll should probably end up in bin/ instead of lib/ (if you don't want to add lib/ to your path)

[11:03] <cygx> the nqp and rakudo Configure.pl need to be made aware of MinGW's gmake

[11:03] *** coffee` joined
[11:09] <moritz> I'm pretty sure they can handle alternative 'make' names already, in some form or another

[11:11] *** risou is now known as risou_awy

[11:11] <cygx> moritz: MoarVM can, but as far as I can see, in Rakudo an NQP. it's just $^O eq 'MSWin32' ? 'nmake' : 'make'

[11:11] *** risou_awy is now known as risou

[11:12] <moritz> cygx: maybe it was the parrot backend that extracted config info from parrot

[11:15] *** chenryn left
[11:17] *** sqirrel_ left
[11:18] *** nige joined
[11:24] *** |Tux| left
[11:31] *** brrt left
[11:33] *** chenryn joined
[11:34] *** |Tux| joined
[11:35] <masak> timotimo++ # https://p6weekly.wordpress.com/2015/03/24/2015-12-a-release-also-lazy-deserialization-makes-a-comeback/

[11:35] <masak> timotimo: I like the idea about blogging about evals, btw.

[11:35] <masak> maybe in a separate blog post from the weekly one?

[11:37] <moritz> also note that the IR clogs have a summary feature which you can use for just such a purpose

[11:38] <moritz> that is, mark the eval and response lines as summary, then only view the summary, and copy&paste the summary HTML into your post

[11:38] <moritz> and yes, I'd like that too

[11:46] *** kjs_ joined
[11:52] *** zakharyas joined
[11:53] *** sqirrel_ joined
[11:54] <retupmoca> FROGGS, *: I build the msi using strawberry perl, but I was still using VS for the C compiler - not MinGW

[11:56] <FROGGS> ahh

[11:56] <FROGGS> that explains it

[11:59] <FROGGS> though, would be nice to be able to build with mingw without manually moving files around

[12:02] <moritz> is this a general Windows thing, that that libraries/dlls are searched in the same path as executables?

[12:03] *** kaleem_ joined
[12:03] *** kaleem left
[12:04] <cygx> moritz: yes (cf https://msdn.microsoft.com/en-us/library/7d83bc18.aspx )

[12:05] *** kjs_ left
[12:06] <azawawi> moritz: this article explains the DLL search order on win32 https://msdn.microsoft.com/en-us/library/windows/desktop/ms682586%28v=vs.85%29.aspx#search_order_for_desktop_applications

[12:07] <azawawi> moritz: so to simplify it... windows system, windows directory then your $PATH

[12:09] <azawawi> quick question, should site/lib be first before lib in @*INC?

[12:09] <azawawi> otherwise installing stuff from panda cannot override those installed in rakudo star

[12:10] *** larion left
[12:12] <azawawi> perl -e "print \"@INC\""  => C:/Strawberry/perl/site/lib/MSWin32-x64-multi-thread

[12:12] *** larion joined
[12:12] <azawawi> m: say @*INC

[12:12] <camelia> rakudo-moar 9746e8: OUTPUT«file:/home/camelia/rakudo-inst-1/share/perl6/lib inst:/home/camelia/rakudo-inst-1/share/perl6␤»

[12:14] *** laouji left
[12:33] <psch> \o

[12:33] *** rmgk left
[12:39] *** xfix joined
[12:40] *** rmgk joined
[12:42] *** lolisa joined
[12:42] *** gfldex joined
[12:44] *** pierrot left
[12:46] <dalek> nqp/no-readlineint: be10c79 | hoelzro++ | src/HLL/Compiler.nqp:

[12:46] <dalek> nqp/no-readlineint: Preserve interactive eval context as an attribute of the compiler

[12:46] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/be10c7967d

[12:47] <dalek> rakudo/tab-completion: 8494d41 | hoelzro++ | tools/build/NQP_REVISION:

[12:47] <dalek> rakudo/tab-completion: Bump NQP_REVISION

[12:47] <dalek> rakudo/tab-completion: review: https://github.com/rakudo/rakudo/commit/8494d41105

[12:59] *** anaeem1 left
[12:59] *** anaeem1_ joined
[12:59] *** azawawi left
[13:02] *** raiph joined
[13:03] *** Ven left
[13:04] *** anaeem1_ left
[13:08] *** brrt joined
[13:10] *** tinyblak_ left
[13:14] *** lumimies left
[13:23] *** tinyblak joined
[13:28] *** tinyblak left
[13:30] *** skids joined
[13:30] *** rindolf joined
[13:33] *** sqirrel_ left
[13:35] *** chenryn left
[13:35] *** brrt left
[13:35] *** brrt joined
[13:36] *** raiph left
[13:58] *** kjs_ joined
[13:59] *** tinyblak joined
[14:01] *** kaleem_ left
[14:06] *** kaleem joined
[14:11] *** Ven joined
[14:11] *** lucas___ joined
[14:13] <arnsholt> We're still using Panda to install modules and stuff, right?

[14:13] <timotimo> correct

[14:13] <timotimo> ufo is still usable, too

[14:13] <timotimo> (iirc)

[14:13] <PerlJam> I don't know about everyone else, but *I* use panda  ;)

[14:14] <timotimo> you can use panda-build and panda-test, too instead of ufo

[14:16] <hoelzro> o/ #perl6

[14:18] <timotimo> heyo hoelzro 

[14:18] <lucas___> Hello!

[14:19] <lucas___> Now that antipairs was added to S32/Containers, it's mentioned 2 times. One on its own and one with kv,pairs,etc.

[14:19] <hoelzro> hello timotimo 

[14:20] <lucas___> under the Hash entry...

[14:21] <retupmoca> timotimo: re: GTK .dll files: who do I need to talk to to get the .dll's rehosted? Also, I'd like to add a dep on LWP::Simple so we can automagically download them in Build.pm, if that makes sense

[14:21] <lucas___> also, why not rewrite Hash.{antipairs,invert} in terms of the pair methods?

[14:21] <lucas___> %hash.map: *.invert

[14:21] <lucas___> %hash.map: *.antipair

[14:22] <lucas___> what do you think?

[14:25] *** work_op joined
[14:25] *** kaare_ left
[14:26] *** brrt left
[14:27] <hoelzro> could someone do me a favor and help me move my docker repo under the perl6 org?

[14:28] <skids> .oO(do pairs and antipairs annihilate if they hit each other? :-)

[14:28] <FROGGS> hoelzro: what power do you need?

[14:28] * FROGGS has no idea about docker whatsoever

[14:29] <hoelzro> FROGGS: I just need to transfer github.com/hoelzro/perl6-docker to github.com/perl6/docker

[14:29] <FROGGS> hoelzro: can you rename it first?

[14:29] <FROGGS> or wait

[14:31] <timotimo> it always annoys me that github shows "forked from blah"

[14:31] <timotimo> i'd personally build a repo with the correct name and just let hoelzro push there

[14:31] <timotimo> unless there's wiki or issues

[14:31] <hoelzro> that's good with me

[14:31] <hoelzro> there's nothing but commits atm

[14:32] *** FROGGS[mobile] left
[14:34] *** FROGGS[mobile] joined
[14:35] <FROGGS> hoelzro: can you add that as a additional remote and then push everything? https://github.com/perl6/docker

[14:35] <FROGGS> does that work?

[14:36] <FROGGS> …or push an existing repository from the command line

[14:36] <FROGGS> git remote add origin [email@hidden.address]
[14:36] <arnsholt> How long should the "Fetching panda" step take?

[14:36] <FROGGS> git push -u origin master

[14:36] <FROGGS> arnsholt: depends on the size of that dir

[14:36] <timotimo> arnsholt: something's making panda's "grab all ze files" very, very slow

[14:36] <FROGGS> arnsholt: do you have an .panda-work dirs in it?

[14:36] <arnsholt> It's a fresh git clone

[14:36] <FROGGS> ahh

[14:36] <hoelzro> FROGGS: done, thanks!

[14:36] <FROGGS> \o/

[14:37] <arnsholt> Just checking, in case something has gotten stuck

[14:37] <timotimo> if nobody objects, i'd build a tiny little progress indicator for panda's stages

[14:37] <FROGGS> sounds interesting

[14:38] <arnsholt> Definitely

[14:38] *** zjmarlow joined
[14:39] <hoelzro> oh, does anyone know the license of the Rakudo logo?

[14:41] *** zjmarlow__ left
[14:41] *** muraiki joined
[14:43] *** tinyblak left
[14:43] <sergot> hi #perl6!

[14:43] <FROGGS> hi sergot 

[14:44] <hoelzro> hello sergot 

[14:45] *** zakharyas left
[14:46] *** Rounin left
[14:47] <timotimo> hoelzro: i do not :(

[14:47] <hoelzro> =(

[14:47] <hoelzro> maybe I should just use Camelia for the docker repo?

[14:47] <FROGGS> hoelzro: if in doubt it is this: https://github.com/rakudo/rakudo/blob/nom/LICENSE

[14:50] <masak> sergocie! \o/

[14:51] <skids> hoelzro: pmichaud might know.

[14:51] <TimToady> lucas___: yes, we could make the language more orthogonol there, but I prefer a fractal geometry closer to natural langauges

[14:51] <hoelzro> thanks folks; I'll stick around to see if pmichaud or others know

[14:51] <PerlJam> FROGGS: the logo isn't in that repo is it?

[14:52] *** larion left
[14:52] *** larion joined
[14:52] <masak> for once I agree with TimToady about orthogonality vs fractality.

[14:52] <masak> it makes sense to have those methods on Hash

[14:53] <PerlJam> .oO( for once? )

[14:54] <lucas___> TimToady, masak: thanks!

[14:54] <lucas___> I was just talking about the specs...

[14:54] <masak> PerlJam: I still think .ords is very silly

[14:54] <masak> PerlJam: when >>.ord exists

[14:55] <[ptc]> FROGGS: do you mean with "a great many links" that the text should be improved?

[14:55] <TimToady> masak: you mean .comb».ords

[14:55] *** tinyblak joined
[14:55] <masak> ah, yes. of course.

[14:55] <masak> anyway, that latter way is how I'd write it.

[14:56] <TimToady> er, .comb».ord

[14:56] <masak> :)

[14:56] <TimToady> I always thought it was a weird discontinuity to have ord on the first character but not on the rest of them

[14:57] <PerlJam> also seems like .ords is more optimizable than .comb».ord  (not that that's the primary concern)

[14:57] <FROGGS> [ptc]: is "a great many links" proper English?

[14:58] <TimToady> yes, that's fine English

[14:58] <FROGGS> ewww

[14:58] <FROGGS> English--

[14:58] <dalek> star: 438a4c3 | paultcochrane++ | README:

[14:58] <dalek> star: Fix minor typos

[14:58] <dalek> star: review: https://github.com/rakudo/star/commit/438a4c30ff

[14:58] <dalek> star: 1018ddd | paultcochrane++ | README:

[14:58] <dalek> star: Purge trailing whitespace

[14:58] <dalek> star: review: https://github.com/rakudo/star/commit/1018ddd327

[14:58] <dalek> star: fb9b17e | paultcochrane++ | README:

[14:58] <dalek> star: Wrap paragraphs and vertically separate sections consistently

[14:58] <dalek> star: review: https://github.com/rakudo/star/commit/fb9b17eb59

[14:58] <dalek> star: 1e4ea3a | FROGGS++ | README:

[14:58] <dalek> star: Merge pull request #44 from paultcochrane/pr/readme_fixups

[14:58] <dalek> star: 

[14:58] <dalek> star: Some README fixups

[14:58] <dalek> star: review: https://github.com/rakudo/star/commit/1e4ea3ad39

[14:58] <FROGGS> PerlJam: I thought it was :/

[14:59] <TimToady> more modern English would be "lots of links", but that's not particularly better by any measure except keystrokes

[15:00] <[ptc]> FROGGS: yeah, it's a bit old-fashioned, but it works

[15:00] <[ptc]> that's why I didn't change it

[15:00] <TimToady> so "a great many" is more impressive these days than "lots of"

[15:00] <TimToady> due to the vague archaicism

[15:01] <FROGGS> perhaps it is like "eine große Vielzahl" in German

[15:01] <TimToady> lots of links is just a fact, but a great many links make you open your eyes wider

[15:01] <FROGGS> yeah, I see now

[15:01] <[ptc]> FROGGS: hrm, I see what you mean, a bit doppelgemoppelt

[15:02] <FROGGS> exactly exactly!

[15:02] <FROGGS> :P

[15:02] * [ptc] grins

[15:02] <TimToady> you can say that again

[15:02] <TimToady> .oO(you can say that that again)

[15:02] <FROGGS> I really <3 that channel :D

[15:03] <FROGGS> TimToady: I hear your sentence(s) with echo effect in my voice

[15:03] <TimToady> hopefully like Enya!

[15:03] <TimToady> or is it more of gated reverb like Madonna?

[15:03] <FROGGS> ohh, more like Enya

[15:04] * TimToady wants some exciter and some chorus too, to make me sound like more people

[15:04] *** LonelyGM joined
[15:04] <TimToady> (those are actually the four effects I've been using lately on our church's sound board :)

[15:06] <FROGGS> hmmm, now I wanna hear Mike Oldfield :/

[15:06] *** Ven left
[15:07] *** cygx left
[15:07] <TimToady> the weird thing psychologically is that as you add more reverb, things sound farther away, so you actually have to turn down the reverb if you want something to sound more intimate

[15:08] <TimToady> .oO(here we are in the echo chamber being distant from each other...)

[15:09] * TimToady wanders off into the distance to get more coffee

[15:09] *** telex left
[15:10] *** Ven joined
[15:10] *** telex joined
[15:11] *** LonelyGM left
[15:16] <dalek> gtk-simple/dllfetch: 9c14014 | retupmoca++ | / (5 files):

[15:16] <dalek> gtk-simple/dllfetch: Fetch .dll files when installing on windows

[15:16] <dalek> gtk-simple/dllfetch: 

[15:16] <dalek> gtk-simple/dllfetch: Incomplete: still need to figure out where to host .dll files.

[15:16] <dalek> gtk-simple/dllfetch: review: https://github.com/perl6/gtk-simple/commit/9c1401431b

[15:18] <retupmoca> timotimo: ^ is this better than the binaries-in-git approach?

[15:18] *** kaleem left
[15:19] <retupmoca> (as it does add a dependency; albeit one that is installed already with star)

[15:22] *** Ven left
[15:26] <[ptc]> there don't seem to be Debian control files or RedHat .spec files inside the perl6 GitHub repos.  If one wanted to start updating, e.g. the relevant Debian control files, where should one put them?

[15:26] <[ptc]> Would a new repo be necessary?

[15:27] *** FROGGS left
[15:27] <hoelzro> [ptc]: I started on some debian control files if you want to have a look

[15:27] <hoelzro> they're not in a repo, though

[15:28] <[ptc]> hoelzro: yeah, that sounds good

[15:28] <[ptc]> hoelzro: I've got the old ones directly from Debian, but they rely on parrot, and are from 2014...

[15:29] <PerlJam> [ptc]: do you intend on collecting the various OS dist deployment options in one place?  (or just those two?)

[15:29] <[ptc]> PerlJam: I was wondering about that.  I'm not 100% sure.

[15:29] <hoelzro> I also have an Arch PKGBUILD, but it's pretty out of date

[15:29] <hoelzro> also, where did [Coke] put his work?

[15:30] <[ptc]> separate repos sounds like too much work

[15:30] <[ptc]> but then one would have unrelated changes within the same repo for different OSes

[15:30] <[ptc]> I think one repo is probably best (for a start) and then one can split them if necessary

[15:30] <masak> decommute &

[15:30] <PerlJam> [ptc]: agreed.

[15:30] <PerlJam> [ptc]++

[15:32] <[ptc]> can members of the perl6 GitHub team create new repos?

[15:33] <[ptc]> if so, then I'll make one and we can start swapping some code.  Need a good name though....

[15:33] <tadzik> I get "insufficient permission"

[15:33] <hoelzro> [ptc]: http://hoelz.ro/files/p6-debian.tar.xz

[15:33] <hoelzro> I tried last night and couldn't =/

[15:33] <[ptc]> hoelzro: thanks :-)

[15:33] <hoelzro> [ptc]: sure thing! the MoarVM one is the most complete

[15:34] <PerlJam> [ptc]: "owners" can.

[15:34] *** nige left
[15:34] <[ptc]> hoelzro: wow, several different configs.  Cool.

[15:35] <hoelzro> [ptc]: I'm no debian expert, so I apologize for the state of those files

[15:35] *** tinyblak left
[15:36] <retupmoca> someone-with-access-to-p6c-web-directories: can you help me rehost some GTK .dll files somewhere for GTK::Simple windows installs?

[15:36] <dalek> doc: 51cb139 | (Edwin Steiner)++ | lib/Language/setbagmix.pod:

[15:36] <dalek> doc: Remove some redundant words which probably remained from a copy&paste.

[15:36] <dalek> doc: review: https://github.com/perl6/doc/commit/51cb139f22

[15:36] <dalek> doc: bb4d9b3 | (Edwin Steiner)++ | lib/Language/setbagmix.pod:

[15:36] <dalek> doc: Attempt to clarify the description of set/bag intersection.

[15:36] <dalek> doc: 

[15:36] <dalek> doc: I found the phrase "maximum weight all of the arguments share" a bit

[15:36] <dalek> doc: confusing. Hopefully this new version is clearer. Your milage may

[15:36] <dalek> doc: vary, I guess.

[15:36] <dalek> doc: review: https://github.com/perl6/doc/commit/bb4d9b334a

[15:36] <dalek> doc: f64f3cf | paultcochrane++ | lib/Language/setbagmix.pod:

[15:36] <dalek> doc: Merge pull request #62 from edwinst/master

[15:36] <dalek> doc: 

[15:36] <dalek> doc: A couple of edits for "Sets, Bags, and Mixes"

[15:36] <dalek> doc: review: https://github.com/perl6/doc/commit/f64f3cf708

[15:37] *** tinyblak joined
[15:38] <[ptc]> hoelzro: neither am I :-)  No need to apologise!  We can clean up as necessary.  The main thing is they work ;-)

[15:38] <hoelzro> heh, we'll see about that =)

[15:38] <hoelzro> I think that the MoarVM build made lintian a little angry

[15:39] <hoelzro> I think something to do with MoarVM being built with -rdynamic, or something?

[15:39] <[ptc]> I'll have a play with debootstrap in a minute and see what it throws at me

[15:40] <timotimo> retupmoca: kind of weary of fetching binary files like .dll over a HTTP link

[15:42] <retupmoca> timotimo: SHA-256 check them on download? or https? other?

[15:42] <[ptc]> PerlJam, hoelzro: how does "os-build-configs" sound as a repo name?  Or maybe "linux-dist-build-configs"?

[15:43] <[ptc]> PerlJam, hoelzro: I don't want the name to be too long though...

[15:43] <skids> repodepot!

[15:43] <PerlJam> skids++  :)

[15:43] *** spider-mario joined
[15:43] <PerlJam> [ptc]: just "os-build" would work for me.

[15:43] <timotimo> retupmoca: a sha-256 check seems prudent

[15:44] <timotimo> https would be even better, but known hashsums also seem fine

[15:44] <PerlJam> [ptc]: with an appropriate README that explains what the repo is all about 

[15:44] <[ptc]> PerlJam: yeah, that would do.

[15:44] <PerlJam> [ptc]: or, you could go with a cute/catchy name  :)

[15:44] <[ptc]> PerlJam: for a while there I was thinking "os-build" could be to build different OSes...

[15:45] <timotimo> retupmoca: i do have an account on www.p6c.org; should i just pull the exact .dll files from the git repository?

[15:45] <[ptc]> PerlJam: repodepot is cool, however :-)

[15:45] <retupmoca> timotimo: please :)

[15:45] <PerlJam> [ptc]: I note that timotimo is an "owner" of perl6 too if you want to add the repo  there.

[15:46] <timotimo> oh, yeah i think i am

[15:46] <PerlJam> timotimo: I just looked, so I *know* you are  :)

[15:46] <PerlJam> (I was checking if I was an owner, and I'm not)

[15:46] <[ptc]> timotimo: could you make a new perl6 repo called "os-build", please?

[15:47] <hoelzro> os-build sounds good

[15:47] <[ptc]> timotimo: the plan is to store build configurations for different OSes there

[15:47] <hoelzro> or packages/packaging

[15:47] <timotimo> will do

[15:47] <PerlJam> timotimo++

[15:47] <[ptc]> timotimo: danke dir!

[15:48] <timotimo> or perhaps this may be better in rakudo/?

[15:49] <[ptc]> no idea.  I'd like it to be somewhere, where I can hack at the files...

[15:49] *** larks joined
[15:49] <timotimo> right

[15:49] <timotimo> https://github.com/perl6/os-build

[15:49] <[ptc]> and I don't have rakudo privs (which is probably a good thing ;-) )

[15:50] <[ptc]> \o/

[15:50] <PerlJam> timotimo: putting it in perl6 could aid in getting people to add non-rakudo builds (if there's ever a demand for such things)

[15:50] <[ptc]> timotimo++

[15:50] <timotimo> right, PerlJam++

[15:51] <[ptc]> timotimo: could you add a stub README in the repo, please?  That way it makes it easier to clone the repo

[15:51] <[ptc]> well, I'm guessing a bit about that, just that I can't see a link on GH atm

[15:52] <timotimo> it is done

[15:52] <[ptc]> ... or I could use my brain and stop typing

[15:52] <[ptc]> timotimo: cool, thanks :-)

[15:54] <dalek> infrastructure-doc: 01fa6a8 | PerlJam++ | hosts/hack.p6c.org.pod:

[15:54] <dalek> infrastructure-doc: Add other sudoers

[15:54] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/01fa6a8ae8

[15:55] <timotimo> retupmoca: did you force-push over the git repo and removed the commit that uploaded the .dll files? :)

[15:56] <retupmoca> no, there are two branches

[15:56] <timotimo> oh

[15:56] <timotimo> of course

[15:56] <retupmoca> one with the bundle, one with the fetch

[15:57] <retupmoca> hmm...Digest::SHA's pure-perl implementation is too slow for these files

[15:57] <timotimo> they probably haven't been updated to take advantage of cool new rw buf stuff?

[15:57] <timotimo> does windows' WinAPI have something that does sha256?

[15:58] <timotimo> since we already require NativeCall anyway - and it's in rakudo now - that'd be an option

[15:58] <retupmoca> not sure - I was pure-linux until a few months ago :)

[15:58] <skids> Sum does provide SHA1 through libmhash, librhash, or libcrypto.

[15:58] <skids> Or any sha actually.

[15:58] <skids> well not sha3

[16:02] <dalek> perl6-roast-data: d3ee0e5 | coke++ | / (8 files):

[16:02] <dalek> perl6-roast-data: today (automated commit)

[16:02] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d3ee0e5d8e

[16:05] *** zjmarlow left
[16:06] <skids> As currently constructed, you should be able to just take lib/Sum/librhash.pm6 (or one of the other native lib support files) out of Sum and use it more or less solo with a bit of massage.

[16:06] *** zjmarlow joined
[16:10] <flussence> I wouldn't use the sha3-branded version of keccak - I read that the algorithm authors weren't comfortable with the way NIST "tweaked" their stuff after the fact.

[16:11] <skids> I had read those concerns were a bit overblown.

[16:11] <flussence> yeah, they probably are. There's plenty of other hashes to play with all the same...

[16:11] *** sqirrel_ joined
[16:14] <flussence> (I like the new convention openbsd's been pushing - sha256 with base64, it creates only slightly larger strings than sha1 + hex)

[16:14] <timotimo> i'm not quite sure what i missed ... gtk-dlls.p6c.org isn't up yet

[16:14] *** lucas___ left
[16:15] <moritz> well, if you need a new p6c.org subdomain, I need to add it to the DNS first :-)

[16:15] *** hitchens left
[16:15] <timotimo> ah, i thought we had a wildcard and did the rest via apache virtualhosts

[16:15] <timotimo> so i'd like you to do that :)

[16:16] <moritz> timotimo: should it go to www?

[16:16] <timotimo> yes

[16:16] *** zjmarlow_ joined
[16:17] <moritz> timotimo: added, with 2001:780:101:ff00::80:6 as IPv6 address

[16:18] <moritz> timotimo: and fwiw we have a wildcard for perl6.org subdomains, which makes a lot of sense because I don't have control of its zonefile

[16:18] *** sqirrel_ left
[16:19] *** zjmarlow left
[16:19] *** tinyblak left
[16:20] *** SamuraiJack joined
[16:22] <timotimo> oh

[16:22] <timotimo> i could have put the vhost on perl6.org then ... i'll remember that for the next time

[16:22] <TimToady> m: https://gist.github.com/anonymous/48efcb021cc1dd55fdd2

[16:22] <camelia> rakudo-moar 9746e8: OUTPUT«Normal: Less␤Lifted: Same␤»

[16:22] <TimToady> bartolin, moritz, lizmat: ^^^

[16:23] <TimToady> we can actually do the right thing now, albeit without much sugar

[16:25] * lizmat tries it in SEQ

[16:25] <TimToady> though nowadays it looks more like lowering cmp than lifting it...

[16:25] <bartolin> oh, great! TimToady++

[16:25] * timotimo wonders about the performance implications

[16:26] <moritz> timotimo: well, it can't compile-time resolve, dispatch or inline anything

[16:26] <TimToady> well, it's a way to write code that is generic on your caller

[16:26] <TimToady> so we can spesh on caller

[16:26] <timotimo> oof

[16:26] <moritz> the real problem is that it doesn't go all the way for nested calls

[16:26] <TimToady> :D

[16:27] <timotimo> well, when we inline, we'll be able to spesh on caller

[16:27] <timotimo> so we'll capture the lexical environment of the caller early when entering the setting

[16:27] <TimToady> moritz: that's a problem of identity, not mechanism

[16:28] <TimToady> how do you know where to stop, if unspecified?

[16:28] <lizmat> maively adding my &infix:<cmp> = CALLER::LEXICAL::{ '&infix:<cmp>' }; to SEQUENCE does not make bartolin's example work

[16:28] <lizmat> afk again&

[16:28] <lizmat> *naively

[16:28] <moritz> where to stop inded

[16:28] <moritz> *ee

[16:28] <TimToady> nested calls might have to look further

[16:29] <TimToady> or the top call needs to store it someplace handy

[16:30] <TimToady> it's really the same interface that carp tries to find in P5

[16:30] *** larion left
[16:30] <TimToady> "my module" vs "their module"

[16:30] <TimToady> P5 does it by detecting the package change

[16:31] <TimToady> dunno if that'd work in P6

[16:32] <TimToady> we haven't though much about carp either...

[16:36] *** nige1 joined
[16:38] <TimToady> *thought

[16:41] *** anaeem1 joined
[16:42] *** diana_olhovik left
[16:42] *** Foxcool left
[16:43] <timotimo> retupmoca: http://gtk-dlls.p6c.org/ is now reachable from my box

[16:44] <TimToady> m: https://gist.github.com/anonymous/2fafaef93a43c3cb2dbe

[16:45] <camelia> rakudo-moar 9746e8: OUTPUT«Normal: Less␤Lifted: Same␤»

[16:45] <TimToady> ^^^ there's the "store it in a convenient place" approach

[16:45] <TimToady> in this case, a dynvar

[16:45] <TimToady> and force cmp to use the dynvar

[16:47] <TimToady> the only infix:<cmp> allows us to define a lexical cmp that is really generic on the original caller

[16:47] *** Perl6_newbee joined
[16:47] <TimToady> so the mechanisms are there for correctness, if not for efficiency or ease of expression

[16:48] <TimToady> note that in this case, the boundary is defined by the top-level routines that set $*CMP, not by a package change

[16:48] *** grondilu left
[16:50] <bartolin> I guess, I have to ponder about that a bit :)

[16:52] *** pierrot joined
[16:54] <TimToady> note that in this case the package boundary would've worked too, since I put the service routine into a class

[16:55] <TimToady> but we don't have a pseudo-package that means CALLER-FROM-DIFFERENT-PACKAGE::

[16:55] <TimToady> (yet... :)

[16:55] <TimToady> CLIENT:: or so

[16:56] <retupmoca> timotimo++ moritz++

[16:58] <hoelzro> if I have a PseudoStash $ps, I *should* be able to look at its containing scopes via $ps<OUTERS>, right?

[17:03] <TimToady> but CALLER doesn't appear to know the package the caller was compiled in :/

[17:03] *** anaeem1 left
[17:04] *** anaeem1 joined
[17:05] *** mr-foobar joined
[17:05] <TimToady> m: sub foo () { say callerframe(1) }

[17:05] <camelia> rakudo-moar 9746e8: OUTPUT«5===SORRY!5=== Error while compiling /tmp/7MpnxDADwA␤Undeclared routine:␤    callerframe used at line 1. Did you mean 'callframe', 'callsame'?␤␤»

[17:06] <TimToady> m: sub foo () { say callframe(1) }

[17:06] <camelia> rakudo-moar 9746e8: ( no output )

[17:06] <TimToady> m: sub foo () { say callframe(1) }; foo

[17:06] <camelia> rakudo-moar 9746e8: OUTPUT«CallFrame.new(level => 3, annotations => ("file" => "/tmp/ZzrW7S0Ayw", "line" => "1").hash, my => EnumMap.new("\$=pod" => Mu, "!UNIT_MARKER" => Mu, "GLOBALish" => Mu, "\$!" => Mu, "\$/" => Mu, "::?PACKAGE" => Mu, "EXPORT" => Mu, "\$_" => Mu, "\$?PACKAGE" =…»

[17:06] <TimToady> m: class Me; sub foo () { say callframe(1) }; foo

[17:06] <camelia> rakudo-moar 9746e8: OUTPUT«CallFrame.new(level => 3, annotations => ("line" => "1", "file" => "/tmp/v5YuIrDC_L").hash, my => EnumMap.new("\$_" => Mu, "::?PACKAGE" => Mu, "\&foo" => Mu, "\$?PACKAGE" => Mu, "\$?CLASS" => Mu, "::?CLASS" => Mu))␤»

[17:08] <TimToady> package being Mu there looks like a bug or a NYI

[17:09] *** anaeem1 left
[17:09] <TimToady> can't implement carp if that's wrong...

[17:14] <TimToady> m: class Me; sub foo () { say callframe(0) }; foo

[17:14] <camelia> rakudo-moar 9746e8: OUTPUT«CallFrame.new(level => 2, annotations => ("file" => "/tmp/_rxKjhLZ2b", "line" => "1").hash, my => EnumMap.new("RETURN" => Mu, "\$/" => Mu, "\$*DISPATCHER" => Mu, "\&?ROUTINE" => Mu, "\$_" => Mu, "\$!" => Mu))␤»

[17:16] *** diana_olhovik joined
[17:18] <japhb> .botsnack

[17:18] <yoleaux> :D

[17:18] <yoleaux> 08:01Z <nine_> japhb: I could not reproduce it with a freshly installed Ubuntu 14.04 LTS Server VM :( You're probably using the desktop version? I can try that, too, but have diminishing hopes of success. Could you maybe get me a backtrace? Might at least give me an idea what's going on.

[17:19] <japhb> .tell nine_ Gah, OK, I'll see what I can do, thanks for trying!

[17:19] <yoleaux> japhb: I'll pass your message to nine_.

[17:19] <arnsholt> So, um, "Fetching panda" has been running for 55 minutes and is using 2 gigs of memory. Still normal?

[17:20] *** tinyblak joined
[17:21] * arnsholt tries updating NQP and Rakudo

[17:22] <dalek> gtk-simple/dllfetch: 7161373 | retupmoca++ | Build.pm:

[17:22] <dalek> gtk-simple/dllfetch: Fix native lib test, add proper URL and SHA verify

[17:22] <dalek> gtk-simple/dllfetch: review: https://github.com/perl6/gtk-simple/commit/71613739c4

[17:23] <dalek> gtk-simple/dllfetch: b0d561a | retupmoca++ | Build.pm:

[17:23] <dalek> gtk-simple/dllfetch: Remove undeeded 'use'

[17:23] <dalek> gtk-simple/dllfetch: review: https://github.com/perl6/gtk-simple/commit/b0d561a22a

[17:24] <retupmoca> timotimo, *: does the above look decent?

[17:25] *** tinyblak left
[17:31] <flussence> looks pretty sane, imo

[17:31] *** raiph joined
[17:32] <pmichaud> hoelzro: (rakudo logo)  -- it can be treated under license terms similar to that of the camelia logo.  I'll put something "official" together for that next week.

[17:32] <flussence> (um, shouldn't gtk-dlls.p6c also provide a download of the source?)

[17:34] *** Rounin joined
[17:38] *** cschwenz left
[17:39] *** xdbr_ joined
[17:43] <[ptc]> timotimo: are you there?

[17:43] <[ptc]> timotimo: would it be possible to give perl6 team members write privs to the os-build repo?

[17:43] <timotimo> sure

[17:44] <[ptc]> timotimo: I just tried to push and was refused due to perms

[17:44] <timotimo> k

[17:44] <[ptc]> timotimo: sweet, cheers

[17:44] <timotimo> done

[17:44] <[ptc]> timotimo++

[17:48] *** abraxxa left
[17:49] *** awwaiid left
[17:50] * masak waves from a train

[17:51] *** eli-se joined
[17:51] <nwc10> a moving train?

[17:51] <eli-se> hi there

[17:52] <masak> nwc10: it moves most of the time.

[17:52] <masak> nwc10: but this *is* Sweden.

[17:52] <nwc10> I was about to check "forwards?"

[17:53] *** anaeem1_ joined
[17:55] <masak> that's a thorny issue. it's moving in the direction I want.

[17:55] <masak> it was delayed already as we left the station.

[17:56] <masak> now it stopped again.

[17:56] <nwc10> I had INVISBLE TRAM this evening

[17:56] <PerlJam> masak: but at least you have us!  :)

[17:57] <nwc10> the board counted down from 4 minutes to 1, then it blinked (meaning it should be going)

[17:57] <nwc10> then it went to 0 (which is *not* normal)

[17:57] <nwc10> (but by this point I'd figured that I was being lied to)

[17:57] <nwc10> and then it vanished

[17:57] <nwc10> I did find a tram later on going in the correct direction

[17:58] <[ptc]> nwc10: was it INVISBLE because "I" was missing in it?

[17:58] <nwc10> (problem seems to have been a serious acident further up, and things getting diverted etc)

[17:58] <nwc10> [ptc]: I guess so :-)

[17:58] <nwc10> I fail at both English and LOLCAT

[17:58] <nwc10> much errors, very fail, whoops.

[17:59] <flussence> it's spelled "INVIZIBL"!

[17:59] <flussence> (I think.)

[18:00] *** kjs_ left
[18:02] *** awwaiid joined
[18:02] <dalek> gtk-simple: 9c14014 | retupmoca++ | / (5 files):

[18:02] <dalek> gtk-simple: Fetch .dll files when installing on windows

[18:02] <dalek> gtk-simple: 

[18:02] <dalek> gtk-simple: Incomplete: still need to figure out where to host .dll files.

[18:02] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/9c1401431b

[18:02] <dalek> gtk-simple: 7161373 | retupmoca++ | Build.pm:

[18:02] <dalek> gtk-simple: Fix native lib test, add proper URL and SHA verify

[18:02] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/71613739c4

[18:02] <dalek> gtk-simple: b0d561a | retupmoca++ | Build.pm:

[18:02] <dalek> gtk-simple: Remove undeeded 'use'

[18:02] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/b0d561a22a

[18:02] <retupmoca> ^ GTK::Simple is now simpler to install on windows

[18:02] *** liztormato joined
[18:03] *** larion joined
[18:03] <liztormato> Isn't it spelled "                  "?

[18:03] <raydiak> retupmoca++

[18:03] *** zjmarlow_ left
[18:04] *** zjmarlow_ joined
[18:05] *** zjmarlow_ left
[18:05] <TimToady> liztormato: only if those are uppercase spaces

[18:06] *** dakkar left
[18:06] *** mohij joined
[18:06] *** liztormato left
[18:08] *** lolisa left
[18:08] *** larion left
[18:08] *** liztormato joined
[18:09] *** larion joined
[18:10] <hoelzro> pmichaud: awesome, thanks!

[18:11] <eli-se> There should be a phaser of which the name consists of uppercase spaces.

[18:12] <eli-se> It would be consistent with all other phaser names.

[18:16] *** liztormato left
[18:16] <TimToady> .u  

[18:16] <yoleaux> U+200A HAIR SPACE [Zs] ( )

[18:18] *** FROGGS joined
[18:18] <FROGGS> o/

[18:19] <FROGGS> a colleague on mine has HAIR SPACE

[18:20] <FROGGS> probably because of doing SAP every day

[18:20] *** FROGGS[mobile] left
[18:20] *** espadrine left
[18:21] *** lolisa joined
[18:21] <eli-se> ABAP best programming language

[18:23] <FROGGS> >.<

[18:23] <FROGGS> eli-se: should have been "ABAP best programming language."

[18:24] <timotimo> ABAP Best Application Proglang

[18:29] *** raiph left
[18:32] *** houseboat joined
[18:34] *** kjs_ joined
[18:38] <FROGGS> I am still not sure if we really want an "Inlined" REPR :/

[18:39] <FROGGS> sergot: are you going to work on updating pointers passed from P6?

[18:40] *** raiph joined
[18:43] *** xdbr_ left
[18:53] <timotimo> FROGGS: wouldn't just an option for the repr composition be enough?

[18:54] <FROGGS> timotimo: that'd mean that you have to declare a CStruct twice, one as the inlined one and one for other purposes

[18:55] <timotimo> actually

[18:55] <timotimo> through the magic of the MOP ... maybe you can have a CStruct repr'd object have a meta-method "inlined" that creates the equivalent inlining version?

[18:56] <FROGGS> and at what point do I call it?

[18:57] <moritz> IMHO the correct solution would be a trait

[18:57] <timotimo> hmm

[18:57] <timotimo> probably

[18:57] <FROGGS> moritz: it might be too late for a trait

[18:57] <moritz> class X { has OtherStruct $.x is inline; has Struct APointerNow }

[18:58] <moritz> FROGGS: then a separate declarator

[18:58] <moritz> class X { inline OtherStruct $.x }

[18:59] <FROGGS> I'd started to implement an 'is inlined' trait, but I do not see how to get at it when composing the class X in your case

[18:59] *** Perl6_newbee left
[18:59] <moritz> well, it'd have to alter something in the Attribute

[19:00] <moritz> and the attribute is available through introspection

[19:00] <moritz> http://doc.perl6.org/type/Metamodel::AttributeContainer#method_attributes

[19:02] <moritz> (you might need to add an attribute to Attribute)

[19:03] <FROGGS> I need to pull out some information like in here: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/CStruct.c#L146

[19:05] *** larion left
[19:07] *** larion joined
[19:09] *** _edwin joined
[19:10] <japhb> My response to "ABAP best programming language" is ABEND.

[19:10] <japhb> <-- Former SAP employee

[19:11] <FROGGS> okay, traits happen too late atm

[19:11] <moritz> japhb: to me, "ABAP" always looks like a variant of "ASAP", presumably "As Bureaucratic As Possible"

[19:11] <FROGGS> japhb: but the good thing is you escaped! :D

[19:12] <_edwin> hello! I noticed that in Rakudo, Set and Bag (and Mix) seem to preserve order of elements. Is this an accidental property of the implementation?

[19:12] <moritz> _edwin: yes; you shouldn't rely on it

[19:12] *** SamuraiJack left
[19:13] <FROGGS> http://rosettacode.org/wiki/Anagrams#ABAP *shudder*

[19:14] *** brrt joined
[19:14] <_edwin> moritz, ok, thanks. background: I'm thinking about emphasizing this difference of Set/Bag/Mix vs. List more in perl6/doc

[19:15] * masak thinks it'd be worthwhile to scramble the order of elements in Set/Bag/Mix, just so people don't get the wrong idea

[19:15] <moritz> _edwin: +1

[19:15] <moritz> masak: +1

[19:27] <[Coke]> I dislike the thought of performing extra cycles of work there.

[19:27] <TimToady> just do it one time out of 20 :)

[19:29] <TimToady> or just return things in the opposite order sometimes :)

[19:30] *** larion left
[19:31] <timotimo> yeah

[19:31] <timotimo> i thought about just moving one single item about

[19:31] <timotimo> like put the first item in a random place

[19:32] *** larion joined
[19:34] *** rindolf left
[19:34] <masak> haven't looked at the source, but... why is the order preserved in the first place?

[19:34] <timotimo> accidentally, i suppose

[19:35] <masak> every single time?

[19:35] <timotimo> i suppose it depends on what operations you do that accidentally preserve order

[19:42] *** mj41 joined
[19:42] <TimToady> m: say set(1,2,3) ∩ set(4,3,2)

[19:42] <camelia> rakudo-moar 9746e8: OUTPUT«set(2, 3)␤»

[19:42] <masak> I'm just saying that I wouldn't expect a hash-based collection to preserve insertion order in the first place.

[19:43] <TimToady> m: say set(4,3,2) ∩ set(1,2,3)

[19:43] <camelia> rakudo-moar 9746e8: OUTPUT«set(3, 2)␤»

[19:43] *** xdbr_ joined
[19:43] <masak> that intuitively feels like it would be slower than the fastest possible solution.

[19:43] *** xdbr_ left
[19:43] *** kaare_ joined
[19:43] <masak> since part of the charm of hash-based collections is that they sacrifice ordering for quick access.

[19:43] <TimToady> I believe lists of pairs are currently kept underneath, for some reason I don't understand

[19:43] <masak> ick.

[19:43] <masak> std: class GX {}; class C { has GY @.g }

[19:44] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤In has declaration, typename 'GY' must be predeclared (or marked as declarative with :: prefix) at /tmp/KbbhOuLEuy line 1:␤------> 3class GX {}; class C { has GY7⏏5 @.g }␤Malformed has at /tmp/KbbhOuLEuy line 1:␤------> 3class GX…»

[19:44] <masak> m: class GX {}; class C { has GY @.g }

[19:44] <camelia> rakudo-moar 9746e8: OUTPUT«5===SORRY!5===␤Type 'GY' is not declared␤at /tmp/v9aBBJBSzF:1␤------> 3class GX {}; class C { has GY7⏏5 @.g }␤Malformed has␤at /tmp/v9aBBJBSzF:1␤------> 3class GX {}; class C { has7⏏5 GY @.g }␤␤»

[19:44] <masak> I like STD's error message better here.

[19:44] <moritz> masak: it seems on moar, hashes are ordered

[19:44] <masak> but I'm curious why both Rakudo and STD feel they need to add "malformed has" -- doesn't feel like it adds something after the first error.

[19:44] <masak> moritz: :(

[19:45] <moritz> m: my %h = ('a'..'z') Z=> 0..*; say %h.keys eq %h.keys.sort

[19:45] <camelia> rakudo-moar 9746e8: OUTPUT«True␤»

[19:45] <masak> it's not so much that I like my hashes unordered -- it's that I think that making them ordered sets a bad precedent.

[19:45] <masak> we've seen Perl 5 people marry their code to hash order, and then cry foul when the order changes.

[19:45] *** nige1 left
[19:46] * arnsholt can haz Panda o/

[19:46] <TimToady> m: my %h = ('a'..'z').pick(*) Z=> 0..*; say %h.keys eq %h.keys.sort

[19:46] <camelia> rakudo-moar 9746e8: OUTPUT«False␤»

[19:46] <PerlJam> masak: moreover, perl 5 people did it *accidentally* without realizing.  Having ordered hashes invites that history to repeat

[19:46] <moritz> masak: agreed

[19:47] * TimToady wonders if moar internals depend on that anywhere...

[19:47] <moritz> m: my @k = ('a'..'z').pick(*); my %h = @k Z=> 0 xx *; say %h.keys eq @k

[19:47] <camelia> rakudo-moar 9746e8: OUTPUT«True␤»

[19:47] <arnsholt> Hmm. May have to do something to get DBDish::Pg to work though, since I don't have a libpq.so (only libpq.so.5)

[19:48] <TimToady> m: say ('a'..'z').pick(*)

[19:48] <camelia> rakudo-moar 9746e8: OUTPUT«v k w l a g q u e b r p t y x i n z c o s h m f d j␤»

[19:49] <TimToady> so does .pick imply .flat after the GLR?

[19:49] <TimToady> m: say ('a'..'z').elems

[19:49] <camelia> rakudo-moar 9746e8: OUTPUT«26␤»

[19:49] <TimToady> m: say ('a'..'z',).elems

[19:49] <camelia> rakudo-moar 9746e8: OUTPUT«1␤»

[19:49] <TimToady> m: say ('a'..'z',).pick(*)

[19:49] <camelia> rakudo-moar 9746e8: OUTPUT«o z k m u c p g t n l i s x w q j e a v y d r h f b␤»

[19:52] *** lolisa left
[19:52] <TimToady> after GLR that last one might just return 'a'..'z' as an item, unless we say .pick flattens

[19:53] *** lolisa joined
[19:54] *** darutoko left
[19:54] <skids> How many holes do we intend to poke in "mysub() flattens ().mymethod does not"?

[19:57] *** larion left
[19:59] *** larion joined
[20:00] <japhb> Speaking of the GLR ... is that in progress now, or still in queue?

[20:00] <TimToady> well, .for is already an exception

[20:01] <skids> I think the bar should be set pretty high personally, enough so that module authors are discouraged from eing wishy washy about their interface.

[20:02] <masak> japhb: I believe pmichaud is gearing up to do it.

[20:02] <masak> japhb: "during April" is what I've heard, I think.

[20:02] <skids> Because flattening behavior changes have accounted for over half the times things have broken under me.

[20:02] *** fhelmberger left
[20:07] *** larion left
[20:09] <_edwin> are both the method and the sub meant to be spelled "unique"? in S32 the sub is still listed as "uniq"

[20:09] <TimToady> uniq is a fossil

[20:10] <TimToady> we changed from 'uniq' because Unix's uniq is really a squish

[20:14] <_edwin> thanks, yes I saw squish today. this distinction is an example of the thoughtfulness that I love about Perl 6

[20:18] <dalek> specs: 74e3d75 | (Edwin Steiner)++ | S32-setting-library/Containers.pod:

[20:18] <dalek> specs: Replace "uniq" fossil with "unique".

[20:18] <dalek> specs: review: https://github.com/perl6/specs/commit/74e3d75319

[20:19] <_edwin> woo, my old commit bit still works :)

[20:22] *** bjz left
[20:23] <timotimo> cool!

[20:23] *** tinyblak joined
[20:25] <[Coke]> jnthn++

[20:26] * jnthn chuckles

[20:26] <yoleaux> 23 Mar 2015 23:17Z <japhb> jnthn: How scalable are supplies, in terms of sheer volume of Supplies and taps that I can have active before performance falls over or RAM gets prohibitive?  My use case is an entity-relationship model for which I'm considering having an "updates" supply on every Entity and Relation, tapped by all clients who care about those nodes.  At least thousands x dozens.

[20:26] <yoleaux> 09:22Z <lizmat> jnthn: is STORE_AT_KEY supposed to be a public API or not ?

[20:27] <jnthn> Wasn't there a discussion yesterday along the lines of "Should .perl sort hashes?" "Hm, yes, sounds OK" "The gist should to!"

[20:27] <jnthn> Today: "omgz the gist output of two set intersections is sorted" :P

[20:27] *** tinyblak left
[20:28] <masak> wait -- I thought it was that hashes are intrinsically sorted

[20:28] <eli-se> hashes are unordered

[20:29] <masak> eli-se: you don't say ;)

[20:30] <masak> eli-se: the dangers of jumping straight into a discussion without backlogging... ;)

[20:30] <jnthn> masak: The discussion came up after doing a "say" though :)

[20:30] <TimToady> jnthn: but the intersections I did weren't sorted

[20:30] <jnthn> Moar curerntly uses uthash

[20:30] <eli-se> It's not dangerous.

[20:30] <TimToady> one was 2,3, the other 3,2

[20:30] <masak> eli-se: no-one in the discussion is unaware that hashes are unordered.

[20:31] <masak> eli-se: trust me, people on this channel are likely to know that ;)

[20:31] <jnthn> Because it's (a) one of the faster off-the-shelf hash implementations there is, and (b) there was no reason to waste time writing custom hash code. :)

[20:31] <masak> jnthn: does uthash preserve insertion order?

[20:32] <masak> jnthn: and if it does, how in the world can it also be fast?

[20:32] <eli-se> std::unordered_map!

[20:32] <jnthn> masak: You're as capable of using google nad reading C code as I am.

[20:32] <jnthn> *and

[20:32] <jnthn> masak: Keeping insertion order doesn't imply not having O(1) lookup.

[20:33] <jnthn> masak: Finding a bucket = O(1). Adding to a linked list = O(1). O(1) + O(1) = O(1). :)

[20:33] <jnthn> Anyway, we won't keep it forever

[20:33] <nwc10> 1 plus 1 is 1.

[20:33] <jnthn> Not if you're in a big O :P

[20:34] <jnthn> Uh, yes if you're in a big O.

[20:34] <jnthn> :)

[20:34] <nwc10> use more sleep?

[20:34] <jnthn> bah, where did I put that ice cream... :)

[20:34] <nwc10> hopefully not on the keyboard

[20:34] <jnthn> Anyway, I suspect uthash being used in Moar won't last all that much longer.

[20:34] <jnthn> It's getting in the way of us representing ASCII strings more compactly for one.

[20:35] <masak> jnthn: I thank you for the confidence. I'm pretty sure I'm a fair bit less capable of reading C code than you are. :P

[20:35] * TimToady has read the C code, and still wonders how it compares with P5 hashes

[20:36] <TimToady> otoh, p5 hashes aren't trying to do anything other than utf8

[20:36] <skids> Is packages/Test in roast vestigial?

[20:38] <jnthn> TimToady: Well, for strings we only have to care about NFG :)

[20:38] <mj41> hoelzro: Hi. I read a bit of the docs. Now, I'm too tired :-). Let me know (or push) if you have any work in progress. Thx.  ... Useful links/repos are https://github.com/docker-library/official-images/pulls?utf8=%E2%9C%93&q=is%3Apr+label%3Alibrary%2Fperl https://github.com/Perl/docker-perl https://github.com/docker-library/docs/tree/master/perl

[20:38] <mj41> Dobrou noc.

[20:40] <dalek> rakudo/union: e8992fa | FROGGS++ | / (5 files):

[20:40] <dalek> rakudo/union: implement trait 'is inlined' for attributes

[20:40] <dalek> rakudo/union: 

[20:40] <dalek> rakudo/union: This has only an effect for CUnions so far, but is easily extendable.

[20:40] <dalek> rakudo/union: review: https://github.com/rakudo/rakudo/commit/e8992fa1ac

[20:40] <FROGGS> jnthn: has Onion $.foo is inlined; # works now

[20:41] <jnthn> FROGGS: ooh 

[20:41] <jnthn> Not sure "inlined" is the word we'll want in the end

[20:41] <jnthn> But the semantics are the hard part to make work, so if you have those... :)

[20:41] <jnthn> FROGGS++

[20:41] * FROGGS wants to have this now: has array[int8] $.bar[32] is inlined

[20:41] *** [Sno] left
[20:41] <jnthn> You'll have to wait a bit for that.

[20:42] <jnthn> It'd also be spelt has int8 @.bar[32] I think

[20:42] <FROGGS> jnthn: I am open for suggestions :o)

[20:42] <FROGGS> jnthn: bah! doit the Java style!

[20:42] * FROGGS .oO( verbose ftw! )

[20:42] <FROGGS> 'for the win' -- even more java

[20:43] *** mj41 left
[20:43] <FROGGS> jnthn: but serious, if you find a better word for 'inlined'...

[20:44] <TimToady> 'is here' :)

[20:44] <FROGGS> I.... I'll wait for jnthn :P

[20:44] <skids> Well the design docs use "compact".

[20:44] *** telex left
[20:45] <skids> But that doesn't capture the full semantic.

[20:45] <TimToady> if the whole thing defaults to compact, then you need 'is there' instead

[20:45] <TimToady> well, explicit Ptr or so

[20:45] <jnthn> TimToady: S09 as far as I remember doesn't actually define how something becomes a compact struct

[20:46] *** larion joined
[20:46] *** telex joined
[20:46] <jnthn> I mean, it has: "A class whose attributes are all low-level value types can behave as a struct."

[20:47] <TimToady> yeah, that's a bit wishy-washy

[20:47] <TimToady> certainly a 'struct' declarator would default that way though

[20:47] <TimToady> but maybe that's too C

[20:47] <jnthn> "Whether such a class is actually stored compactly is up to the implementation" is also kinda unhelpful given that for C interop it actually matters which is picked ;)

[20:48] <FROGGS> +1 for /class is REPR(CStruct)/struct/

[20:48] <jnthn> Well, class = reference type, struct = value type is actually very C# :)

[20:48] <FROGGS> though, I am used to 'class is REPR(CStruct)'

[20:48] <jnthn> FROGGS: Oh, I was considering this somewhat REPR-orthogonal.

[20:49] <jnthn> In so far as a P6opaque is something that could potentially flatten itself into the body of another also.

[20:49] <jnthn> The 6model impl on Moar is largely set up to cope with this

[20:49] <jnthn> On JVM it's...uh...a little more fun :)

[20:50] *** larion left
[20:51] * TimToady wonders how long till someone aliases a HAS declarator to 'has ... is inlined'

[20:51] <jnthn> I'd probably call it contains :)

[20:52] <psch> is ENDSTMT actually supposed to be hit for every full statement?

[20:52] <TimToady> too short, how 'bout incorporates :P

[20:52] <FROGGS> hehe

[20:52] <TimToady> HAZ

[20:52] <skids> inscribed?

[20:53] <TimToady> got @.arms;

[20:54] <jnthn> It's not as common as "has", so I'm not sure it needs to be so huffmanized...

[20:54] <skids> Or ingrained?  I should really put down aiksaurus now.

[20:54] <TimToady> but it often wants to line up with has, is all

[20:54] <jnthn> True

[20:54] <TimToady> actuallh HAS ain't so bad

[20:55] <timotimo> is HAS?

[20:55] <TimToady> no, for the declarator

[20:55] <TimToady> HAS Engine @.engine;

[20:55] <timotimo> .o( is can has be hugs time now? )

[20:55] <TimToady> er, $.

[20:56] <TimToady> assuming you only have one engine...

[20:56] *** colomon left
[20:58] <jnthn> All my transport today had more than one :)

[20:58] <TimToady> you can haz a @

[20:59] *** kjs_ left
[21:03] *** muraiki left
[21:03] *** skids left
[21:03] <FROGGS> what about 'own'? probably not I guess...

[21:03] <TimToady> problem with that one is that it implies indirection just about as much as 'has'

[21:04] <FROGGS> 'lay' has three letters...

[21:05] <jnthn> Well, yeah, the "very clearly not indirection" was what I was angling for with "contains"

[21:05] <FROGGS> what about 'ass' for assimilates :P

[21:05] <jnthn> That's butt-ugly :P

[21:05] <FROGGS> hehe

[21:07] <jnthn> The real question, I guess is if we want to put the semantic on the type or the usage, though.

[21:08] <jnthn> Or both. :)

[21:09] <TimToady> .oO(the bike, or the shed, or both...)

[21:10] <jnthn> Well, C puts it on the usage, and C# puts it on the type, so we've got examples out there of both :)

[21:10] <FROGGS> I hope we dont put it on the type

[21:11] <TimToady> I think if you want automatic memory management, your type had better know

[21:11] <jnthn> FROGGS: Why, ooc?

[21:11] <FROGGS> because that means I have to declare classes twice, one class for inlining, one class for referencing

[21:11] <TimToady> the ptr has to know that it's pointing into the middle of someone else's struct

[21:12] <TimToady> which is sort of neither the usage nor the type

[21:12] <jnthn> TimToady: Well, that's more about taking a reference to the thing

[21:12] <jnthn> That's actually yet another axis

[21:12] <jnthn> In C# you can't actually get a reference to the thing that's embedded. If you want to talk about it, you end up copying it out.

[21:12] <FROGGS> 'putting it on the type' was the reason I started with 'inlined by default'...

[21:13] <FROGGS> and year, needing to put Pointer[] everywhere sucks

[21:13] <jnthn> FROGGS: Do you have examples of APIs where you need to use the same type both ways?

[21:13] <FROGGS> jnthn: libBox2D

[21:14] <FROGGS> there is a Vec2 struct, that's often inlined but equally often referenced

[21:15] <jnthn> ok

[21:15] *** brrt left
[21:16] *** nige joined
[21:17] *** colomon joined
[21:17] *** kjs_ joined
[21:18] <FROGGS> jnthn: I rechecked.... b2Vec2 is always inlined, except for the cases it appears as an array...

[21:19] <jnthn> FROGGS: It's not inlined into the array?

[21:19] <jnthn> As in, not a comapct array, but array of pointers to b2Vec2s?

[21:20] <FROGGS> an array of pointers to, aye

[21:21] <FROGGS> err wait... inlined into an array in C?

[21:21] <jnthn> Thingy *arr; vs Thingy **arr; 

[21:22] <FROGGS> http://google.github.io/liquidfun/API-Ref/html/b2_rope_8h_source.html line 41

[21:22] <FROGGS> it is b2Vec2* vertices;

[21:23] <FROGGS> ahh, I got it

[21:24] <jnthn> So, it is inlined into the array too then

[21:25] <FROGGS> aye

[21:27] *** kjs_ left
[21:29] *** gfldex left
[21:37] *** anaeem1_ left
[21:38] *** anaeem1_ joined
[21:38] *** anaeem1_ left
[21:39] *** kjs_ joined
[21:40] *** kjs_ left
[21:43] *** retupmoca left
[21:44] *** J-L joined
[21:44] *** retupmoca joined
[21:44] *** nige left
[21:45] <J-L> If I'm using Perl6's REPL interface, is there a way to re-define a class without getting an error message telling me I'm redeclaring it?  (Maybe there's a way to "undefine" a class?)

[21:45] *** eli-se left
[21:45] *** xfix left
[21:47] *** raiph left
[21:48] <jnthn> J-L: Try "my class ..."

[21:48] *** mst left
[21:48] *** leedo left
[21:48] *** cursork left
[21:49] *** cursork joined
[21:49] *** mst joined
[21:49] *** leedo joined
[21:51] *** FROGGS left
[21:51] <hoelzro> what about people's thoughts on bundling Linenoise.pm with Rakudo vs having a star module?

[21:52] <hoelzro> it feels weird to bundle it, but it would greatly benefit Rakudo devs

[21:52] <jnthn> hoelzro: What's the great benefit? :)

[21:52] <vendethiel> repl completion :P

[21:53] <hoelzro> jnthn: having REPL completion and history

[21:53] <jnthn> ah

[21:53] <jnthn> :)

[21:54] <hoelzro> .tell mj41 I created a repo under github.com/perl6/docker; just waiting on word from the Docker folks

[21:54] <yoleaux> hoelzro: I'll pass your message to mj41.

[21:54] <psch> REPL completion and history \o/

[21:55] *** [Sno] joined
[21:55] <psch> now if i could just figure out a way to call moreinput only when i don't have a compilable statement

[21:55] <J-L> jnthn:  Your "my class ..." suggestion works great.  Thanks!

[21:56] <psch> i'm not sure what exactly MARKED and MARKER do, either

[21:56] <psch> what i have keeps reading lines until one is completely empty 

[21:57] <psch> and stuff the read line into self.target and self.orig

[21:57] *** debrowski joined
[21:57] *** work_op left
[21:57] *** lolisa left
[21:59] <jnthn> psch: MARKER "marks" the current position we're at with some "tag"

[21:59] *** colomon left
[21:59] <jnthn> psch: MARKED checks if the current position is tagged that way

[22:00] <jnthn> psch: It's used for stuff like avoiding duplicate whitespace parsing effort when we already know the current position is that, for example

[22:01] <psch> jnthn: that'd fit with how i'm trying to use it

[22:02] <psch> jnthn: but i think we're missing markers for ENDSTMT, in that case

[22:02] *** debrowski left
[22:02] <psch> or rather "this statement is now valid syntax"

[22:02] *** work_op joined
[22:05] *** diana_olhovik left
[22:06] <jnthn> psch: I think ENDSTMT is only one condition for "end of statement"

[22:07] *** BenGoldberg joined
[22:07] <jnthn> (The one where a } ends it, iirc)

[22:08] *** BenGoldberg left
[22:08] <jnthn> See eat_terminator for more ways

[22:08] *** BenGoldberg joined
[22:11] *** spider-mario left
[22:16] <[ptc]> hoelzro: I've got moarvm and nqp building .debs; the rakudo deb still doesn't work, but it's just a matter of time

[22:16] <[ptc]> hoelzro: thought you'd be interested :-)

[22:16] <hoelzro> [ptc]: awesome!

[22:16] <hoelzro> [ptc]++

[22:16] <hoelzro> [ptc]: let me know if you want my Arch PKGBUILDS

[22:16] <hoelzro> although I imagine I could just push them to the repo =)

[22:17] <[ptc]> hoelzro: do you have commit privs on perl6/*

[22:17] <[ptc]> ?

[22:17] <hoelzro> yes

[22:17] <[ptc]> ah, just what I was going to suggest :-)

[22:17] <[ptc]> I've added a README with directory layout etc, so hopefully it makes sense where to put things

[22:17] <hoelzro> cool

[22:17] <hoelzro> I'll try to update them when I get home

[22:18] <[ptc]> sounds good :-)

[22:18] * [ptc] hits the hay

[22:19] *** colomon joined
[22:20] *** kjs_ joined
[22:23] * jnthn gets some rest also &

[22:23] <psch> g'night jnthn

[22:24] <psch> also to [ptc] of course, if belated

[22:24] *** lolisa joined
[22:28] *** brrt joined
[22:36] *** kjs_ left
[22:39] *** work_op is now known as away_op

[22:44] *** skids joined
[22:47] *** _edwin left
[22:50] *** eli-se joined
[22:52] * psch &

[22:53] *** Tux__ joined
[22:53] *** |Tux| left
[22:57] *** lolisa left
[23:04] *** houseboat is now known as sirhouseboat

[23:13] <flussence> hashes are naturally ordered, but are hypers naturally randomized or do we still use the original hacky shuffle code for those?

[23:13] <flussence> (would be nice if we mere users had a fastness-security tweaking pragma for this...)

[23:21] *** Rounin left
[23:22] *** coffee` left
[23:23] *** raiph joined
[23:32] *** brrt left
[23:33] *** kurahaupo1 joined
[23:43] <dalek> rakudo-star-daily: 8754d88 | coke++ | log/ (9 files):

[23:43] <dalek> rakudo-star-daily: today (automated commit)

[23:43] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/8754d88985

[23:43] *** kurahaupo1 left
[23:48] <ugexe> you gonna eventually do docker images for a daily build or newer?

[23:49] <ugexe> it would make this p6 smoke test rpi cluster easier :O)

[23:53] <eli-se> bye!

