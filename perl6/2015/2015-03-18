[00:03] <skids> Hrm on a fresh laptop and I am getting some sort of cpmile-time problem with Sum.  Gonna freshen up rakudo and see if it is still there.

[00:05] *** kurahaupo1 joined
[00:05] *** Hor|zon joined
[00:09] <adu_> skids, is there a difference between panda install Sum and panda-install Sum?

[00:10] *** Hor|zon left
[00:12] <skids> I didn't even know panda-install existed actually.

[00:12] <osto> <skids> It runs a lot of tests though so plan for a hot lap.[[[[[[[[[[[[[[[[[[==========================================================================================================================

[00:13] <osto> Crap. My cat was on my keyboard........ Disregard my last message :P

[00:14] <skids> Cats prefer hot laps to hot laptops, but they will settle for the latter :-)

[00:17] *** Alina-malina left
[00:17] <osto> Here's the culprit, Archimedes: http://www.imgur.com/Yp1mCPK . Anyway, does anyone have an answer to my question earlier?

[00:18] *** Alina-malina joined
[00:18] *** Alina-malina left
[00:18] *** Alina-malina joined
[00:18] <skids> oh right.  lemme dig S05 for the opener/closer thing.

[00:19] <osto> cool

[00:22] *** kurahaupo1 left
[00:23] *** tinita_ left
[00:24] *** tinita joined
[00:24] *** mr-foobar left
[00:24] *** laouji joined
[00:28] *** yqt left
[00:38] *** mr-foobar joined
[00:39] *** laouji left
[00:42] *** laouji joined
[00:54] *** kurahaupo1 joined
[00:55] *** raiph joined
[00:56] <skids> osto: this is as far as I have gotten:

[00:56] <skids> m: say so "(a)" ~~ /(<:Ps>) ~ { my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ } a/

[00:56] <camelia> rakudo-moar 3c46c7: OUTPUT«)␤True␤»

[00:56] <skids> except it isn't right it should be something like this:

[00:56] <skids> m: say so "(a)" ~~ /(<:Ps>) ~ <{ my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ }> a/

[00:56] <camelia> rakudo-moar 3c46c7: OUTPUT«)␤True␤»

[00:58] <skids> m: say so "(a]" ~~ /(<:Ps>) ~ <{ my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ }> a/

[00:58] <camelia> rakudo-moar 3c46c7: OUTPUT«)␤Unable to parse expression in ; couldn't find final <{ my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ }> ␤  in method ACCEPTS at src/gen/m-CORE.setting:16240␤  in block <unit> at /tmp/YFYLz4wgf7:1␤␤»

[00:58] <skids> So it should not blow up in that last case.

[00:58] <skids> Oh wait.

[00:58] <skids> That's actually working

[00:58] <skids> m: say so "(a]" ~~ /:dba<my parens>; (<:Ps>) ~ <{ my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ }> a/

[00:58] <camelia> rakudo-moar 3c46c7: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/jurrQD__Uj:1␤------> 3say so "(a]" ~~ /:dba<my parens>7⏏5; (<:Ps>) ~ <{ my $c = uniname(~$0); $c ␤Unable to parse regex; couldn't find final '/'…»

[00:59] <skids> erm

[00:59] <skids> m: say so "(a]" ~~ /:dba("my parens"); (<:Ps>) ~ <{ my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ }> a/

[00:59] <camelia> rakudo-moar 3c46c7: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/CAx6B6co1k:1␤------> 3say so "(a]" ~~ /:dba("my parens")7⏏5; (<:Ps>) ~ <{ my $c = uniname(~$0); $c ␤Unable to parse regex; couldn't find final '…»

[01:00] <skids> ah

[01:00] <skids> m: say so "(a]" ~~ /:dba<my parens> (<:Ps>) ~ <{ my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ }> a/

[01:00] <camelia> rakudo-moar 3c46c7: OUTPUT«No such method 'my' for invocant of type 'Cursor'␤  in method ACCEPTS at src/gen/m-CORE.setting:16240␤  in block <unit> at /tmp/5tbow9s6Gk:1␤␤»

[01:01] <skids> m: say so "(a]" ~~ /:dba('my parens') (<:Ps>) ~ <{ my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ }> a/

[01:01] <camelia> rakudo-moar 3c46c7: OUTPUT«False␤»

[01:01] <skids> m: say so "(a)" ~~ /:dba('my parens') (<:Ps>) ~ <{ my $c = uniname(~$0); $c ~~ s/LEFT/RIGHT/; $c = EVAL "\"\\c\[$c\]\""; $c.say; rx/$c/ }> a/

[01:01] <camelia> rakudo-moar 3c46c7: OUTPUT«False␤»

[01:01] <skids> huf.

[01:01] <skids> back to my own shell

[01:01] <osto> ha. so close

[01:02] <skids> There has to be a better way than that to deduce the closing char.

[01:03] <raydiak> m: say :16(uniprop($_, "Bidi_Mirroring_Glyph")).chr R~ ":" for '(', '[', '{'

[01:03] <camelia> rakudo-moar 3c46c7: OUTPUT«:)␤:]␤:}␤»

[01:03] <osto> I know... I thought of that too, but there's a couple open/close characters without /LEFT|RIGHT/

[01:04] <skids> raydak++

[01:04] <raydiak> oh the R~ there was smoething I didn't need to copy, if that wasn't obvious

[01:04] *** aborazmeh joined
[01:04] *** aborazmeh left
[01:04] *** aborazmeh joined
[01:04] <osto> Ooh

[01:07] <skids> Man I hate these new chiclet keyboards: raydiak++

[01:07] <osto> m: say :16(uniprop($_, "Bidi_Mirroring_Glyph")).chr R~ ":" for '(', '[', '{', '\x{fd3f}'

[01:07] <camelia> rakudo-moar 3c46c7: OUTPUT«:)␤:]␤:}␤Cannot convert string to number: base-16 number must begin with valid digits or '.' in ':16<⏏>' (indicated by ⏏)␤  in method <anon> at src/gen/m-CORE.setting:15773␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2908␤  in …»

[01:08] <osto> m: say :16(uniprop($_, "Bidi_Mirroring_Glyph")).chr R~ ":" for '(', '[', '{', '﴿'

[01:08] <camelia> rakudo-moar 3c46c7: OUTPUT«:)␤:]␤:}␤Cannot convert string to number: base-16 number must begin with valid digits or '.' in ':16<⏏>' (indicated by ⏏)␤  in method <anon> at src/gen/m-CORE.setting:15773␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2908␤  in …»

[01:09] <raydiak> m: say "\x{fd3f}"

[01:09] <camelia> rakudo-moar 3c46c7: OUTPUT«5===SORRY!5===␤Unrecognized backslash sequence: '\x'␤at /tmp/0Gx0hMGJfW:1␤------> 3say "\7⏏5x{fd3f}"␤Undeclared routine:␤    fd3f used at line 1␤␤␤»

[01:09] <raydiak> m: say "\x[fd3f]"

[01:09] <camelia> rakudo-moar 3c46c7: OUTPUT«﴿␤»

[01:10] <osto> What's the \x[nnnn] syntax?

[01:10] <raydiak> that makes something that very nearly resembles the openbsd blowfish in my terminal font :P

[01:10] <skids> doc needs a uniprop cookbook section, cause funicode docs are not fun to read.

[01:11] <raydiak> lemme see if I can find \x in the design docs

[01:11] <colomon> m: say “ß”.uc

[01:11] <camelia> rakudo-moar 3c46c7: OUTPUT«ß␤»

[01:12] <colomon> m: say “ß”.uc.ord

[01:12] <camelia> rakudo-moar 3c46c7: OUTPUT«223␤»

[01:12] <colomon> m: say “ß”.ord

[01:12] <camelia> rakudo-moar 3c46c7: OUTPUT«223␤»

[01:12] <raydiak> S02:Radix_interpolation

[01:12] <colomon> .u ß

[01:12] <yoleaux> U+00DF LATIN SMALL LETTER SHARP S [Ll] (ß)

[01:12] <raydiak> hm guess synopsebot doesn't like that

[01:12] <raydiak> http://design.perl6.org/S02.html#Radix_interpolation

[01:12] <colomon> .u ẞ

[01:12] <yoleaux> U+0002 START OF TEXT [Cc] (␂)

[01:12] <yoleaux> U+000F SHIFT IN [Cc] (␏)

[01:12] <yoleaux> U+1E9E LATIN CAPITAL LETTER SHARP S [Lu] (ẞ)

[01:13] <colomon> m: say “ß”.tc

[01:13] <camelia> rakudo-moar 3c46c7: OUTPUT«ß␤»

[01:16] *** osto left
[01:18] *** yeahnoob joined
[01:21] *** aborazmeh left
[01:24] <skids> \o/ Sum builds after re-brewng.  Glad I didn't have to figure out that weird error.

[01:30] *** J-L left
[01:35] *** dayangkun joined
[01:36] *** b2gills left
[01:37] <hahainternet> isn't there a from 1 prefix ^ type operator?

[01:42] *** telex left
[01:44] *** telex joined
[01:44] <colomon> you mean 1..^N instead of 0..^N ?

[01:55] *** Hor|zon joined
[01:56] <dalek> perl6-roast-data: 7a0eaaa | coke++ | / (9 files):

[01:56] <dalek> perl6-roast-data: today (automated commit)

[01:56] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/7a0eaaa260

[01:57] <grondilu> m: sub infix:<°> { 1 .. $^n }; say °10

[01:57] <camelia> rakudo-moar 3c46c7: OUTPUT«5===SORRY!5=== Error while compiling /tmp/9rC56l8Gh8␤Preceding context expects a term, but found infix ° instead␤at /tmp/9rC56l8Gh8:1␤------> 3sub infix:<°> { 1 .. $^n }; say °7⏏0510␤»

[01:57] <grondilu> m: sub prefix:<°> { 1 .. $^n }; say °10

[01:57] <camelia> rakudo-moar 3c46c7: OUTPUT«1..10␤»

[01:57] <grondilu> hahainternet: none in the core, but easy to make your own.

[01:57] <hahainternet> colomon: yeah i could have sworn at some point i saw one

[01:58] <hahainternet> and yeah no worries i know you can define operators arbitrarily

[01:58] <dalek> ecosystem: 1b80ae4 | hoelzro++ | META.list:

[01:58] <dalek> ecosystem: Add Linenoise to ecosystem

[01:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/1b80ae47b1

[02:00] *** b2gills joined
[02:00] *** Hor|zon left
[02:10] *** zakharyas joined
[02:11] <dalek> rakudo/no-linenoise: 385d2e5 | hoelzro++ | tools/build/Makefile-Moar.in:

[02:11] <dalek> rakudo/no-linenoise: Remove reference to linenoise in Moar config

[02:11] <dalek> rakudo/no-linenoise: review: https://github.com/rakudo/rakudo/commit/385d2e5cc6

[02:11] <dalek> nqp/no-readlineint: 0200653 | hoelzro++ | / (6 files):

[02:11] <dalek> nqp/no-readlineint: Remove references to readlineint_fh

[02:11] <dalek> nqp/no-readlineint: 

[02:11] <dalek> nqp/no-readlineint: This corresponds to recent changes in MoarVM, in the no-moar-linenoise

[02:11] <dalek> nqp/no-readlineint: branch.

[02:11] <dalek> nqp/no-readlineint: 

[02:11] <dalek> nqp/no-readlineint: I haven't removed readlineintfh from the Parrot stage 0 stuff, because

[02:11] <dalek> nqp/no-readlineint: the tests are currently failing, and I don't want to bork Parrot worse

[02:11] <dalek> nqp/no-readlineint: than it already is.

[02:11] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/0200653145

[02:11] <dalek> nqp/no-readlineint: ccbf97d | hoelzro++ | src/HLL/Compiler.nqp:

[02:11] <dalek> nqp/no-readlineint: Restore prompt to REPL

[02:11] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/ccbf97dbe3

[02:18] <dalek> nqp/no-readlineint: aff1fff | hoelzro++ | src/HLL/Compiler.nqp:

[02:18] <dalek> nqp/no-readlineint: Break reading of lines out into a helper method

[02:18] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/aff1fff081

[02:26] *** ostomachion left
[02:30] *** ash_gti joined
[02:31] <hoelzro> is it possible to load a Perl 6 module from NQP code? I have a Linenoise module I wrote, and I'd like to use it from src/Perl6/Compiler.nqp

[02:42] <adu_> radiak!

[02:42] <adu_> grondilu, so clever :)

[02:46] *** BenGoldberg_ joined
[02:47] *** BenGoldberg_ left
[02:47] *** BenGoldberg_ joined
[02:49] *** Ben_Goldberg left
[02:57] *** laouji left
[02:58] *** laouji joined
[03:03] <[Coke]> I think you'd have to load all of perl6.

[03:12] *** adu_ left
[03:16] *** noganex joined
[03:18] *** Psyche^ joined
[03:19] *** noganex_ left
[03:22] *** Patterner left
[03:25] *** alini left
[03:26] *** cognominal joined
[03:27] *** raiph left
[03:43] *** skids left
[03:45] *** Hor|zon joined
[03:49] *** Hor|zon left
[03:58] <raydiak> yay took my laptop apart, cleaned it, and put it back together with no leftover parts

[04:04] *** Sqirrel left
[04:20] *** alpha- left
[04:20] *** Sqirrel joined
[04:22] *** BenGoldberg_ left
[04:22] *** anaeem1_ joined
[04:29] *** anaeem1_ left
[04:29] *** anaeem1_ joined
[04:31] *** vendethiel left
[04:40] *** vendethiel joined
[04:42] *** lsm01 left
[04:48] *** cognominal left
[04:53] *** lsm01 joined
[05:03] *** vendethiel left
[05:15] *** nige joined
[05:17] *** fraik joined
[05:21] *** vendethiel joined
[05:21] *** fraik left
[05:34] *** Hor|zon joined
[05:39] *** Hor|zon left
[05:57] *** ash_gti left
[05:58] *** diana_olhovik_ joined
[06:02] *** yeahnoob left
[06:06] *** tinyblak joined
[06:08] *** yeahnoob joined
[06:15] *** alini joined
[06:24] *** Peter_R left
[06:26] *** Peter_R joined
[06:29] *** diana_olhovik_ left
[06:31] *** pyrimidine left
[06:32] *** pyrimidine joined
[06:34] *** fhelmberger joined
[06:38] *** fhelmberger left
[06:39] *** bayprogrammer left
[06:46] *** madmuid joined
[07:02] *** madmuid left
[07:04] *** prime left
[07:06] *** diana_olhovik joined
[07:08] *** prime joined
[07:17] *** wicope joined
[07:17] *** zakharyas left
[07:22] * grondilu sent a patch to rakudobug to suggest having polymod return 0 whenever self is 0

[07:23] *** Hor|zon joined
[07:28] *** Hor|zon left
[07:29] *** zakharyas joined
[07:32] *** laouji left
[07:34] *** laouji joined
[07:37] *** kurahaupo1 left
[07:43] *** Madcap-Jake joined
[07:44] *** MadcapJake left
[07:45] *** alini left
[07:51] <grondilu> m: my @ = 1 .. *;  # ok

[07:51] <camelia> rakudo-moar 3c46c7: ( no output )

[07:51] <grondilu> m: my @ = 0, 1 .. *;  # still ok

[07:51] <camelia> rakudo-moar 3c46c7: ( no output )

[07:51] <grondilu> m: my @ = 0, map { $_ }, 1 .. *;  # not ok??

[07:52] <camelia> rakudo-moar 3c46c7: OUTPUT«(timeout)»

[07:52] <grondilu> really I'm not happy with &:<,> breaking lazyness

[07:53] *** FROGGS joined
[07:53] <grondilu> m: my @ = map { $_ }, 1 .. *;

[07:53] <camelia> rakudo-moar 3c46c7: OUTPUT«(timeout)»

[07:54] <grondilu> oh, my bad.  apparently it's not because of &:<,>

[07:55] <moritz> grondilu: the map makes us lose the information that the list is infinite

[07:55] <moritz> grondilu: and array assignment is eager

[07:55] <grondilu> ok

[07:56] *** Ven joined
[07:57] *** mr-foobar left
[07:57] <TimToady> map doesn't pass infinite yet, yes

[07:57] <TimToady> GLR, we hope

[07:58] <TimToady> one of the goals is end-to-end negotiation

[07:59] <moritz> the problem is that usually we don't know if the map block calls 'last'

[08:00] <TimToady> one assumes that something first-like would be used in that case, but yeah

[08:01] <TimToady> or we could notice a 'last' while compiling

[08:01] <TimToady> is just a smop

[08:01] <TimToady> as long as we aren't trying to solve the lasting^Whalting problem

[08:02] *** fhelmberger joined
[08:03] *** FROGGS left
[08:03] <grondilu> I had no idea a map could be stopped by a last

[08:03] <grondilu> m: say map { last if $_ > 5 }, ^10

[08:03] <camelia> rakudo-moar 3c46c7: OUTPUT«␤»

[08:03] <grondilu> m: say map { last if $_ > 5; $_ }, ^10

[08:03] <camelia> rakudo-moar 3c46c7: OUTPUT«0 1 2 3 4 5␤»

[08:04] <grondilu> well, I've learnt something today :)

[08:08] *** yeahnoob left
[08:12] *** Rounin joined
[08:16] *** eli-se joined
[08:16] <eli-se> hi

[08:16] *** Ven left
[08:17] <TimToady> heading to airport &

[08:17] *** darutoko joined
[08:17] <DrForr> Ciao, was great to have you here!

[08:18] *** FROGGS joined
[08:18] *** gfldex joined
[08:23] *** Akagi201 joined
[08:25] *** pdcawley joined
[08:30] *** yeahnoob joined
[08:31] *** eli-se left
[08:33] *** alini joined
[08:37] *** FROGGS left
[08:39] *** Hor|zon joined
[08:43] *** spider-mario joined
[08:44] *** Hor|zon left
[08:46] <timotimo> sadly, last can be dynamic, too

[08:50] *** FROGGS joined
[08:54] *** dayangkun left
[09:05] *** LonelyGM joined
[09:12] *** coffee` joined
[09:15] *** larion joined
[09:17] *** Hor|zon joined
[09:20] *** lizmat joined
[09:24] *** kjs_ joined
[09:25] *** Ven joined
[09:31] *** abraxxa1 joined
[09:34] *** yeahnoob left
[09:35] *** kjs_ left
[09:36] *** dakkar joined
[09:37] <moritz> what's the oposite of an entity in data modelling?

[09:37] * moritz can't remember the name

[09:37] <moritz> basically a value type, but the data modellers have a separate name for that, iirc

[09:37] *** Gothmog_ joined
[09:50] *** eli-se joined
[09:52] *** Foxcool_ joined
[09:55] *** eli-se left
[09:57] *** eli-se joined
[10:02] *** laouji_ joined
[10:02] *** laouji left
[10:06] *** espadrine joined
[10:07] *** rindolf joined
[10:08] <masak> 'antenoon, #perl6

[10:09] <masak> moritz: at Edument, we just call them "value objects". they intersect with the notion of immutability, but are distinct in various ways.

[10:11] <Ven> hi masak  :)

[10:11] *** abraxxa left
[10:11] <masak> alohahoy.

[10:11] <LonelyGM> guten morgen everyone :)

[10:15] <masak> LonelyGM! \o/

[10:15] <masak> LonelyGM: does the "GM" in your nick stand for "Game Master"?

[10:15] * masak knows next to nothing about tabletop games

[10:16] <sjn> masak: it means "General Motors" :)

[10:16] <sjn> maybe

[10:16] <sjn> oh, and hi, #perl6 o/

[10:16] <sjn> :)

[10:16] <Ven> masak: they're fun, though..:)

[10:17] <masak> Genearl Motors? :P

[10:17] <masak> General*

[10:17] *** eli-se left
[10:18] <Ven> masak: only drunk ones :P

[10:18] * sjn imagines being a legal person of GM's size can be pretty lonely

[10:18] <moritz> and an illegal person of GM's size too :-)

[10:19] * sjn should have maybe said "legal entity" or "corporate person" or something

[10:19] <tadzik> Lonely Game Master would be one without party

[10:19] *** Ven left
[10:19] <LonelyGM> masak :D hahha I see that you guys are in a creative mood today

[10:20] <LonelyGM> it stands from Grand Master, I am a chess fanatic and once was considered to be a decent player, with no intention to brag... 

[10:21] <tadzik> cool :)

[10:21] <sjn> it's lonely at the top

[10:21] <moritz> LonelyGM: did you make it to Grand Master?

[10:21] <moritz> or was that "just" ambition?

[10:22] *** pecastro joined
[10:22] <LonelyGM> no I never made it to actual GM I was on the edge of becoming an IM when I was 14 and lost  a very improtant game against a spanish guy in an international competition in Valencia

[10:23] <LonelyGM> and so I gave up for a year and since then I regret that decision because I couldn't get back

[10:23] *** vendethiel left
[10:24] <LonelyGM> my actual rating dropped heavily since then... I'm like 1900-2000 ELO currently... and my dream is to design a chess engine that would play exaclty like Bobby Fischer did once :) dreams haha

[10:24] <moritz> well, I have an ELO (or the German equivalent). It's 0 :-)

[10:25] <moritz> I played one rated game, and lost it

[10:25] *** pecastro left
[10:25] *** zakharyas left
[10:26] <LonelyGM> moritz: everony starts at 900 ELO and you rating is not "real" until you play a draw

[10:27] <LonelyGM> btw I think chess is very similar to what you guys are doing with perl6 I try to implement this into my chess strategy :)

[10:27] <masak> interesting.

[10:27] <masak> how is it similar_

[10:27] <masak> ?

[10:27] <moritz> a game is mostly searching and scoring, a compiler is translating/transforming

[10:28] * moritz doesn't see the similarity yet

[10:28] <LonelyGM> well, chess is just partly about discovering patterns and applying your strategy for that

[10:29] <moritz> ah, so you're saying it's similar to programming as a whole

[10:29] <moritz> I think I can agree with that

[10:30] *** vendethiel joined
[10:30] <LonelyGM> the essence of chess is basically to figure out what the opponent wants, you are language designers first and then coders, Larry told me that he might not be the best coder in the world he is good in finding out what other people wants and giving them the opportunity to do that

[10:30] <dalek> rakudo/nom: b9e7dbc | lizmat++ | docs/ChangeLog:

[10:30] <dalek> rakudo/nom: Mention native arrays

[10:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b9e7dbc053

[10:30] <LonelyGM> in chess you have to figure out what the other wants and not to give them the opportunity

[10:31] *** pecastro joined
[10:31] <LonelyGM> and of course when you are thinking of an attack and series of moves you are thinking in algorithms

[10:31] <LonelyGM> when you have a shady area after a move that could be a parameter which could change the further outcome of the algorithm

[10:32] <LonelyGM> if you could actually know how the compiler reacts to each and every code you wouldnt have to write the code bc you would no that it is faulty

[10:32] <LonelyGM> in chess you do these experiments in your head and hope that you are precise enough to succeed :) 

[10:33] <LonelyGM> m: say "I'm in love with chess"

[10:33] <camelia> rakudo-moar 3c46c7: OUTPUT«I'm in love with chess␤»

[10:33] *** Peter_R left
[10:34] *** Peter_R joined
[10:34] <grondilu> LonelyGM: I started a chess project in Perl 6.  So far just a PGN/FEN parser but if you feel like helping to do more, let me know.

[10:36] <LonelyGM> grondilu: I could probably help with the design, with the coding I might have difficulties but it would be a pleasure :)  but you are developing an engine or a game?

[10:36] <dalek> roast: 6290f50 | lizmat++ | S02-types/set.t:

[10:36] <dalek> roast: Fix tests so they don't pass for the wrong reason

[10:36] <dalek> roast: review: https://github.com/perl6/roast/commit/6290f5071c

[10:39] <grondilu> LonelyGM: I just started a github repo with anything chess related.  Lost motivation to do more than parsing PGN though

[10:39] <grondilu> writing a chess engine is kind of tough

[10:40] <grondilu> just checking move legality is a pain

[10:40] <grondilu> anyway:  https://github.com/grondilu/chess

[10:41] <dalek> roast: b4b82a0 | lizmat++ | S17-procasync/ (2 files):

[10:41] <dalek> roast: Todo what were thought to be flappers

[10:41] <dalek> roast: review: https://github.com/perl6/roast/commit/b4b82a0a5e

[10:42] <masak> "Although the Angular team said there would eventually be an upgrade path, I didn’t believe them. A framework rewrite almost always means rewriting apps that use the framework." -- http://blog.yodersolutions.com/why-i-recommend-emberjs-over-angularjs/

[10:42] <masak> reading this article, I have the distinct sense that Angular is Perl and Ember is Python.

[10:42] *** alini left
[10:43] <lizmat> reading that, I was reminded of the commercial of "Toilet Duck" in the NL

[10:43] <lizmat> "We of Toilet Duck recommend Toilet Duck!"

[10:43] <masak> hehe

[10:43] <lizmat> anyway, spectest on MoarVM is clean for me now

[10:44] <masak> \o/

[10:44] <lizmat> (and these were all nerdy men in lab coats saying that)

[10:44] <masak> lizmat: though I don't think that blogger is affiliated with Ember in any way...

[10:45] <lizmat> it was just about the quote, not about the actual blog post  :-)

[10:45] <masak> *nod*

[10:46] <masak> sometimes when I see the actions of the Angular core team(s), I think at some point someone must've decided to make it all look like the Perl 5 and Perl 6 upgrade path, and then arranged things so that it does *without telling anyone else*.

[10:46] <masak> like a massive multi-year troll on everyone.

[10:48] <lizmat> https://www.youtube.com/watch?v=YsvHeLUOoxs   # WC Eend

[10:58] <lizmat> CurtisOvidPoe: re http://irclog.perlgeek.de/perl6/2015-03-17#i_10296801, commit message 91f41bdcdd089d88bf06 says:

[10:58] <lizmat> Add Bag.kxxv (preliminary name)    (on 13 Apr 2014)

[10:58] *** Akagi201 left
[11:00] <CurtisOvidPoe> lizmat: ah, thanks!

[11:00] <lizmat> afk for a bit

[11:03] *** laouji_ left
[11:04] <masak> yeah, I wish we had a better name for that one, too

[11:04] <masak> I was thinking about it yesterday.

[11:05] <masak> it feels like there *should* be something pithy that catches the essence of what that method does.

[11:05] <masak> with a slightly higher vowel density :)

[11:05] <FROGGS> what does .kxxv?

[11:06] * masak .oO( <alien> no, my name is pronounced "kxxv"... -- <human> "kssshv" -- <alien> just drop it. call me Fred. )

[11:06] <masak> m: say Bag.new(A => 2, B => 5).kxxv

[11:07] <camelia> rakudo-moar b9e7db: OUTPUT«␤»

[11:07] <tadzik> . o O ( my name is pronounced Tadeusz Sośn.. ah, forget it )

[11:07] <FROGGS> ohh, that's helpful :o)

[11:07] <masak> m: say Bag.new((A => 2), (B => 5)).kxxv

[11:07] <camelia> rakudo-moar b9e7db: OUTPUT«A => 2 B => 5␤»

[11:07] <masak> er.

[11:07] <masak> m: say Bag.new(<A A B B B B B>).kxxv

[11:07] <camelia> rakudo-moar b9e7db: OUTPUT«A A B B B B B␤»

[11:07] <masak> FROGGS: there you go.

[11:07] <FROGGS> tadzik: you forgot to put the ascii replacement characters in there :P

[11:07] <tadzik> haha

[11:07] <masak> m: say Bag.new(<A B B A B B B>).kxxv

[11:07] <camelia> rakudo-moar b9e7db: OUTPUT«A A B B B B B␤»

[11:07] <tadzik> "we love unicode, we just don't use it"

[11:08] <tadzik> -- YAPC organizers

[11:08] <masak> hypocrites!

[11:08] <tadzik> it's like "I love science" :P

[11:08] <tadzik> related: https://pbs.twimg.com/media/BnoEAbDIEAA79db.png

[11:09] <FROGGS> hehe

[11:10] <FROGGS> m: say Bag.new(<A B B A B B B>)

[11:10] <camelia> rakudo-moar b9e7db: OUTPUT«bag(A(2), B(5))␤»

[11:10] <FROGGS> m: say bag(A(2), B(5)).kxxv

[11:10] <camelia> rakudo-moar b9e7db: OUTPUT«5===SORRY!5=== Error while compiling /tmp/D9CJFVZ_fL␤Undeclared names:␤    A used at line 1␤    B used at line 1␤␤»

[11:10] <FROGGS> m: say bag(:A(2), :B(5)).kxxv

[11:10] <camelia> rakudo-moar b9e7db: OUTPUT«Unexpected named parameter 'A' passed␤  in sub bag at src/gen/m-CORE.setting:21333␤  in block <unit> at /tmp/eq3t8ccSjG:1␤␤»

[11:11] <masak> m: <A B B A B B B>.Bag.kxxv

[11:11] <camelia> rakudo-moar b9e7db: ( no output )

[11:11] <FROGGS> m: say bag("A" => 2, "B" => 5).kxxv

[11:11] <camelia> rakudo-moar b9e7db: OUTPUT«A => 2 B => 5␤»

[11:11] <masak> m: say <A B B A B B B>.Bag.kxxv

[11:11] <camelia> rakudo-moar b9e7db: OUTPUT«A A B B B B B␤»

[11:11] <FROGGS> m: say bag("A" => 2, "B" => 5).Bag.kxxv

[11:11] <camelia> rakudo-moar b9e7db: OUTPUT«A => 2 B => 5␤»

[11:11] <FROGGS> gah

[11:11] <grondilu> that has to be the worst name for a method ever

[11:11] <masak> I'm glad we all agree.

[11:12] <masak> let's mock it a bit more before we think of the right name :P

[11:12] <FROGGS> :D

[11:12] <masak> lizmat++ # implementing it, even in the face of uncertainty about the name

[11:12] * FROGGS .oO( ===SORRY=== I can't adverb you )

[11:13] <masak> the "Can't adverb this" error message is a Lovecraftian abomination from the depths of the Perl 6 parser.

[11:13] <masak> I swear I'm getting it for things that look completely OK, and then I get rid of it by doing a random sacrifice in the code.

[11:17] <DrForr> Lose 1 SAN point.

[11:19] *** donaldh joined
[11:26] *** BenGoldberg_ joined
[11:30] *** Ven joined
[11:32] <FROGGS> I don't like user support today :o(

[11:37] *** Ven left
[11:37] <hoelzro> o/ #perl6

[11:38] *** Ven joined
[11:38] <Ven> Seems like the ruby community started their own version of the perl foundation (with grants and stuff), called "Ruby together"

[11:38] *** cschwenz joined
[11:38] *** Foxcool left
[11:42] *** BenGoldberg_ left
[11:45] <hoelzro> I wrote a Linenoise module with the intent of being able to enhance the builtin REPL, but I can't figure out how to load a Perl 6 module from NQP (in particular, main.nqp).  Is such a thing possible?

[11:47] <Ven> Someone pointed out to me that in the learnxinyminutes, I use "@array" and "array" instead of list. Should I change?

[11:48] <Ven> because an "array" is an "itemized list"

[11:49] <Ven> (so, "list assignment" instead of "array assignment", "@list = " instead of "@array =", etc)

[11:50] *** alini joined
[11:54] <Ven> m: 'a' ~~ /(a)/; say $0.WHAT.perl

[11:54] <camelia> rakudo-moar b9e7db: OUTPUT«Match␤»

[11:55] <Ven> m: 'a' ~~ /(a) +/; say $0.WHAT.perl

[11:55] <camelia> rakudo-moar b9e7db: OUTPUT«Array␤»

[11:56] <FROGGS> hoelzro: you'd need Perl6's ModuleLoader probably

[11:57] *** telex left
[11:57] <hoelzro> FROGGS: I figured, but I don't know the magic invocation to give load_module to make it work

[11:57] <hoelzro> namely, what to use for GLOBALish

[11:58] <FROGGS> {}

[11:58] <FROGGS> :o)

[11:58] *** telex joined
[11:58] <FROGGS> I don't know if that will work out though

[11:59] <hoelzro> I tried that first, heh

[12:15] *** zakharyas joined
[12:21] *** eli-se joined
[12:21] *** Sqirrel left
[12:26] *** raiph joined
[12:26] <eli-se> morning

[12:27] *** eli-se left
[12:29] <Ven> short morning there.

[12:32] *** nige left
[12:39] *** eli-se joined
[12:39] <lizmat> wrt to kxxv, I'm afraid I've had to become accustomed to ridicule wrt to naming classes and methods  :-(

[12:42] <lizmat> afk again, voting and cycling&

[12:42] *** eli-se left
[12:42] <Ven> lizmat: I think it's always better than nothing.

[12:43] <Ven> (plus, see "drip" vs "emit" that came from the discussion about "more")

[12:45] <FROGGS> it is quite hard to find something better than kxxv... and maybe it is the best name for that

[12:47] <colomon> would it be more obvious if it were k-xx-v ?  Though as is it  only took me a few moment to figure out what it must do.

[12:47] <nwc10> from the #london.pm hive mind, working on amusing pragmas:

[12:47] <nwc10> 12:46 <@pete> no wombles;

[12:47] <nwc10> 12:46 <@pete> disables garbage collection

[12:48] *** itz joined
[12:48] *** anaeem___ joined
[12:48] *** anaeem___ left
[12:48] <masak> Ven: I dunno, I hear people refer to arrays all the time in Perl.

[12:48] *** Ven_ joined
[12:49] *** Ven left
[12:49] *** itz_ left
[12:51] *** anaeem1_ left
[12:52] *** itz left
[12:53] *** Ven_ left
[12:56] *** Ven joined
[12:58] *** itz joined
[13:01] *** Ven left
[13:01] *** kaare_ left
[13:01] *** xfix joined
[13:02] <FROGGS> colomon: then we could argue that .kv should be .k-v

[13:02] <FROGGS> colomon: and I'd not favour that :o)

[13:03] <colomon> me neither

[13:03] *** cognominal joined
[13:03] *** Ven joined
[13:05] *** Woodi joined
[13:06] *** nige joined
[13:22] *** anaeem1_ joined
[13:25] * TimToady sitting in MUC now

[13:25] <Ven> TimToady: hi

[13:25] <FROGGS> TimToady: Grüß Gott :o)

[13:26] <TimToady> fortunately, ours is not one of the flights that has been cancelled to due to strike

[13:26] <TimToady> at least, not yet...

[13:26] <FROGGS> what's your destination? back home?

[13:26] <DrForr> Oh, yeah, Lufthansa long-haul on strike.

[13:27] <nwc10> is your flight still alledged to be on time?

[13:27] *** brrt joined
[13:28] <TimToady> seems to be

[13:29] <TimToady> but maybe they'll stage a work slowdown by crossing the Atlantic at 150mph or so...

[13:31] *** rurban joined
[13:39] *** anaeem1_ left
[13:41] <arnsholt> Le sigh. I've written so much more NQP than actual Perl 6 I continually have the urge to use := everywhere

[13:41] <arnsholt> (When writing Perl 6, obv)

[13:42] *** LonelyGM left
[13:49] *** cognominal left
[13:52] *** anaeem1_ joined
[13:52] <timotimo> %)

[13:54] *** molaf joined
[13:57] *** pullphinger joined
[13:59] *** donaldh left
[14:00] * TimToady notes again that bag() and .Bag are two entirely different things

[14:00] <TimToady> the bag composer will not turn pairs into internal counts, but .Bag will

[14:01] <TimToady> the bag composer will merely make a bag containing your two pairs

[14:01] <TimToady> FROGGS: ^^

[14:02] *** anaeem1_ left
[14:02] <Woodi> hallo #perl6 :)

[14:03] <Woodi> so do we have some theory of "shapes" ? :) lists, trees, sets, bags...

[14:03] * TimToady ==> gate

[14:04] *** CurtisOvidPoe left
[14:04] <[Coke]> DrForr++ # I have fond memories of playing Call of C'lthulhu

[14:07] *** FROGGS left
[14:10] *** eli-se joined
[14:12] *** anaeem1 joined
[14:26] *** anaeem1 left
[14:26] *** anaeem1_ joined
[14:28] *** pecastro left
[14:31] *** anaeem1_ left
[14:33] *** pecastro joined
[14:37] *** anaeem1 joined
[14:37] *** anaeem1 left
[14:37] *** anaeem1 joined
[14:38] *** tinyblak_ joined
[14:40] *** tinyblak left
[14:42] *** anaeem1 left
[14:44] *** lichtkind joined
[14:50] *** cdc joined
[14:51] <cdc> Hello #perl6

[14:52] <cdc> I'd like to keep a reference to an object method, something like this:

[14:52] <cdc> class A { method b { ... } }; my A $c; my $callback = &($c.b)

[14:53] <cdc> is it possible?

[14:54] *** spider-mario left
[14:54] <moritz> well, you can wrap it

[14:54] <rjbs> cdc: I am a p6 novice, but this appears to work: my $cb = {; $foo.bar }

[14:54] <moritz> my $callback = -> |c { $c.b(|c) }

[14:55] *** eli-se left
[14:55] <moritz> or if it doesn't take arguments, as rjbs++ just said

[14:55] <rjbs> What's the | doing there?

[14:55] <moritz> rjbs: capture the rest of the argument list

[14:55] <moritz> http://doc.perl6.org/type/Parameter#method_capture

[14:55] <cdc> rjbs, moritz: thanks!

[14:55] <rjbs> thanks

[14:56] <moritz> cdc: but methods aren't bound to to objects, which is why you have to wrap

[14:56] *** rmgk is now known as Guest27851

[14:56] *** rmgk_ joined
[14:56] *** Guest27851 left
[14:56] *** rmgk_ is now known as rmgk

[14:56] *** tinyblak_ left
[14:57] <cdc> ok

[14:57] *** tinyblak joined
[14:58] *** xinming_ joined
[15:01] *** xinming left
[15:01] *** tinyblak left
[15:02] *** _DrForr joined
[15:04] *** spider-mario joined
[15:09] *** FROGGS joined
[15:16] *** _DrForr left
[15:17] *** abraxxa1 is now known as abraxxa

[15:30] *** tinyblak joined
[15:39] *** spider-mario left
[15:41] *** spider-mario joined
[15:53] *** eli-se joined
[15:58] *** eli-se left
[16:04] *** zakharyas left
[16:10] *** cognominal joined
[16:12] *** raiph left
[16:12] *** Sqirrel joined
[16:13] *** raiph joined
[16:14] *** Rounin left
[16:18] *** brrt left
[16:19] *** raiph left
[16:24] *** raiph joined
[16:25] *** alini left
[16:26] *** raiph left
[16:27] *** raiph joined
[16:30] *** Smylers joined
[16:31] *** Smylers left
[16:32] *** Smylers joined
[16:33] *** rurban left
[16:33] *** larion left
[16:34] *** raiph left
[16:34] *** Smylers left
[16:34] *** FROGGS left
[16:35] *** raiph joined
[16:38] *** raiph left
[16:40] *** raiph joined
[16:41] *** cschwenz left
[16:43] *** cognominal left
[16:44] *** raiph left
[16:46] *** raiph joined
[16:48] *** xinming_ left
[16:49] *** Ven left
[16:51] *** raiph left
[16:51] *** spider-mario left
[16:53] *** spider-mario joined
[16:59] *** xinming joined
[17:02] *** madmuid joined
[17:03] *** donaldh joined
[17:07] *** cognominal joined
[17:09] *** perl6_newbee joined
[17:10] *** FROGGS joined
[17:14] *** cognominal left
[17:14] *** kjs_ joined
[17:15] *** b2gills left
[17:16] *** eli-se joined
[17:17] <eli-se> hi

[17:20] <dalek> nqp: d24d387 | donaldh++ | src/vm/jvm/QAST/Compiler.nqp:

[17:20] <dalek> nqp: Catch runtime exceptions (Throwable) inside 'handle' blocks on JVM

[17:20] <dalek> nqp: 

[17:20] <dalek> nqp: Fixes RT #123684 - one of the infamous UnwindException escapes.

[17:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d24d3872d7

[17:20] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123684

[17:24] *** donaldh left
[17:26] *** kjs_ left
[17:36] *** spider-mario left
[17:36] *** bayprogrammer joined
[17:45] *** grondilu left
[17:51] *** b2gills joined
[17:55] *** eli-se left
[18:04] *** dakkar left
[18:04] *** mohij joined
[18:09] *** pecastro left
[18:11] <abraxxa> with rakudo star 2015.02 i'm getting a test fail with DBDish in 10-mysql.t: postcircumfix:<{ }> not defined for type Failure

[18:11] <dalek> roast: 9bfc0bd | lizmat++ | S32-basics/xxKEY.t:

[18:12] <dalek> roast: We *can* now fudge :-)

[18:12] <dalek> roast: review: https://github.com/perl6/roast/commit/9bfc0bd1a8

[18:15] *** LonelyGM joined
[18:20] *** LonelyGM left
[18:20] *** kaare_ joined
[18:24] *** eli-se joined
[18:28] <dalek> roast: bf91b2b | lizmat++ | S32-basics/xxPOS.t:

[18:28] <dalek> roast: Add some AT-POS and friends sanity tests

[18:28] <dalek> roast: review: https://github.com/perl6/roast/commit/bf91b2b0f3

[18:29] <dalek> rakudo/nom: b9d6d3e | lizmat++ | t/spectest.data:

[18:29] <dalek> rakudo/nom: Add some AT-POS and friends sanity tests

[18:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b9d6d3e48c

[18:31] *** espadrine left
[18:32] *** Alina-malina left
[18:33] *** telex left
[18:33] *** Alina-malina joined
[18:33] <FROGGS> abraxxa: do you also see a line number or something more detailed?

[18:34] <abraxxa> FROGGS: i'll paste you the stacktrace

[18:34] * lizmat diverges for a bit in 3D

[18:34] *** telex joined
[18:34] <FROGGS> lizmat: I'm jealous

[18:34] <[Coke]> let me know if that's any good.

[18:35] <abraxxa> FROGGS: http://paste.scsys.co.uk/469873

[18:36] *** nige left
[18:38] *** rindolf left
[18:39] *** kjs_ joined
[18:41] *** nige joined
[18:41] <FROGGS> abraxxa: I have no clue :/

[18:41] <abraxxa> FROGGS: does it happen for you too?

[18:41] <FROGGS> I cannot test right now

[18:41] <abraxxa> ok

[18:44] <FROGGS> but I dont see similar reports here: http://testers.perl6.org/dist/D/DBIish/%3Cunknown%3E.html

[18:46] <abraxxa> wooh, that looks nice!

[18:47] *** mohij left
[18:47] *** eli-se left
[18:49] *** kjs_ left
[18:50] *** vendethiel left
[18:52] *** vendethiel joined
[18:52] *** Rounin joined
[18:56] <itz> "Ever since I learnt about confirmation bias, I've been seeing it everywhere"

[18:58] *** eli-se joined
[19:07] *** diana_olhovik left
[19:08] *** fhelmberger left
[19:09] <nine_> itz: instant classic :)

[19:11] *** dsm left
[19:12] *** dsm joined
[19:12] *** J-L joined
[19:14] <J-L> map {.say}, ((1,2),3,(4,5));

[19:15] <J-L> Sorry... meant for Camelia.

[19:15] <FROGGS> m: map {.say}, ((1,2),3,(4,5));

[19:15] <camelia> rakudo-moar b9d6d3: OUTPUT«1␤2␤3␤4␤5␤»

[19:15] <J-L> m: ((1,2), 3, (4,5)).map({.say});  # iterates over three elements (method call)

[19:15] <camelia> rakudo-moar b9d6d3: OUTPUT«1␤2␤3␤4␤5␤»

[19:15] <FROGGS> m: ((1,2), 3, (4,5)).map({ say 'A' });

[19:16] <camelia> rakudo-moar b9d6d3: OUTPUT«A␤A␤A␤A␤A␤»

[19:16] <FROGGS> no

[19:16] <J-L> According to http://learnxinyminutes.com/docs/perl6/ , ((1,2), 3, (4,5)).map({.say}) is supposed to iterate over three elements, not five.

[19:16] *** mohij joined
[19:16] <abraxxa> any advice how to debug segfaults with NativeCall?

[19:16] <FROGGS> m: map { say 'A' }, ((1,2),3,(4,5));

[19:16] <camelia> rakudo-moar b9d6d3: OUTPUT«A␤A␤A␤A␤A␤»

[19:16] <FROGGS> abraxxa: gdb and valgrind are usually good when hunting segfaults

[19:17] * abraxxa never touched any of these

[19:17] <J-L> My Windows Rakudo is matching Camelia's, but it doesn't match what it says on http://learnxinyminutes.com/docs/perl6/ about ((1,2), 3, (4,5)).map({.say}) .

[19:18] *** perl6_newbee left
[19:18] <FROGGS> I hope the GLR will help here

[19:18] * abraxxa wonders why he sees Compiling lib/DBDish.pm6 to mbc twice

[19:23] <abraxxa> never mind, DBDish and DBIish look very similar

[19:23] <J-L> Frankly, I kind of prefer the way it works now.  Flattening both is better than flattening one, but not the other.

[19:24] <[Coke]> No guarantee that xiny is kept up to date, and also, this smells like something that the GLR will change/touch

[19:26] *** anaeem1 joined
[19:27] *** silug joined
[19:35] <vendethiel> J-L: just ping me if something's wrong in the learnx :-)

[19:36] <vendethiel> J-L: I should remove that part. That's how it'll behave post-GLR

[19:36] *** darutoko left
[19:36] <vendethiel> [Coke]: yeah, I shouldn't have changed the learnx *before* the implementation, that was stupid

[19:37] <vendethiel> FROGGS: wanted to ask someone "on the team" about this -- should I change all references from "@array" to "@list" (and from "array" to "list") in the learnx?

[19:37] <vendethiel> because "array is an itemized list"

[19:39] *** pnu left
[19:39] *** lsm01 left
[19:40] <FROGGS> vendethiel: you are asking the wrong guy :o)

[19:40] *** pnu joined
[19:41] *** lsm01 joined
[19:42] <abraxxa> how do i pass a Buf as a pointer to a C lib with NativeCall?

[19:43] <abraxxa> i have this super-ugly construct which seems to not work

[19:43] <abraxxa> my $valuebuf = $v.Str.encode('utf8');

[19:43] <abraxxa>             my sb4 $value_sz = $valuebuf.bytes;

[19:43] <abraxxa>             my @valuep := CArray[int8].new;

[19:43] <abraxxa>             @valuep[$_] = $valuebuf.[$_]

[19:43] <abraxxa>                 for ^$value_sz;

[19:43] <vendethiel> FROGGS: ha :(

[19:44] <FROGGS> abraxxa: just pass that buf

[19:46] <FROGGS> abraxxa: passing a VMArray (what a buf is underneath) is implemented since 2015.02

[19:46] <abraxxa> so i have to define the parameter differently?

[19:46] <abraxxa> currently i've defined it as CArray[int8]    $valuep,

[19:47] <retupmoca> abraxxa: sub c_function(Buf) is native { ... }; my $buf = $v.Str.encode('utf8'); c_function($buf);

[19:47] <abraxxa> that would become OraText         $valuep is encoded('utf8'),

[19:48] <FROGGS> you can also put utf8 instead of Buf in the signature

[19:48] <FROGGS> because:

[19:48] <FROGGS> m: say "foo".encode('utf8') ~~ utf8

[19:48] <camelia> rakudo-moar b9d6d3: OUTPUT«True␤»

[19:48] <FROGGS> m: say "foo".encode('utf8') ~~ Buf

[19:48] <camelia> rakudo-moar b9d6d3: OUTPUT«False␤»

[19:48] <retupmoca> oh, right. Should probably use 'Blob' for the most general case

[19:49] <FROGGS> m: say "foo".encode('utf8').REPR # and that's why it is supported since https://github.com/MoarVM/MoarVM/commit/b38d2e5b5aee9e246b74f720e828b6cc576433fe

[19:49] <camelia> rakudo-moar b9d6d3: OUTPUT«VMArray␤»

[19:50] <abraxxa> still segfaulting

[19:50] <abraxxa> oh, but after the bind

[19:51] *** terahzer joined
[19:52] <FROGGS> abraxxa: is that good?

[19:52] <FROGGS> I mean, do you make progress?

[19:52] <abraxxa> i thought the bind causes the segfault but it seems the sql statement execution afterwards does

[19:52] <abraxxa> i have to look into that pointer passing change so i can remove my ugly workarounds

[19:53] <abraxxa> so if I pass a Buf that is an array of bytes internally and NativeCall passes it correctly

[19:53] <nine_> FROGGS: what would the NativeCall definition of a function taking a Blob look like?

[19:53] *** mj41 joined
[19:54] <nine_> FROGGS: oh, never mind. The answer is right there in the backlog

[19:56] <terahzer> are the BEGIN and END blocks still supported in Perl 6 ?

[19:56] <nine_> terahzer: yes, and the concept even got extended

[19:56] <abraxxa> statement execute without bind vars work, those with segfault

[19:56] <terahzer> nine_ how?

[19:57] <nine_> terahzer: they're called PHASERS now and there are more of them like FIRST and LAST for loops. You can also use them as statement modifiers like: BEGIN $foo = $bar;

[19:57] *** pnu left
[19:57] <dalek> Inline-Perl5: de093d0 | (Stefan Seifert)++ | lib/Inline/Perl5.pm6:

[19:57] <dalek> Inline-Perl5: Use recent NativeCall's Buf support for speedup

[19:57] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/de093d01b4

[19:58] *** pnu joined
[19:58] *** pnu left
[19:58] *** pnu joined
[19:59] <abraxxa> FROGGS: what about a pointer to a sb2 (int16)?

[20:00] <FROGGS> abraxxa: an int16*?

[20:00] <abraxxa> i'm doing a similar thing for those: my @indp := CArray[sb2].new; @indp[0] = -1;

[20:00] <abraxxa> void          *indp,

[20:00] <abraxxa> Pointer to an indicator variable or array. For all data types except SQLT_NTY, this is a pointer to sb2 or an array of sb2.

[20:00] <FROGGS> nowadays: sub foo(int16 $thing is rw) ... { * }

[20:01] <FROGGS> ahh

[20:01] <FROGGS> then: sub foo(Pointer) ... { * }; my Pointer $a .= new; foo($a); say nativecast(int16, $a)

[20:02] <FROGGS> and you do the nativecast conditionally

[20:02] <terahzer> I am reading the docu,entation of perl 6 on wikibooks; do you think it is usefull for somebody approaching the language to read the Apocalypses, Exeseges and Synopses?

[20:02] <abraxxa> i've defined it as CArray[sb2]

[20:03] <retupmoca> nine_: you may want 'Blob' in your p5_buf_to_sv signature, since blob8 ~~ Buf is false

[20:03] <FROGGS> well, define it as Pointer instead, and then do the cast... I believe that should work

[20:04] <FROGGS> and if you want to have an int16*, you'd do Pointer[int16]

[20:04] *** cognominal joined
[20:04] <FROGGS> hmmmm

[20:04] <abraxxa> constant sb2 = int16;

[20:04] <abraxxa> i don't need array support for now

[20:04] <FROGGS> but then I dunno how to set the value it points to...

[20:04] <abraxxa> not sure if I ever will

[20:06] <FROGGS> ahh, we need to support malloc directly to be able to pass Pointer[int16] to a C function

[20:07] <FROGGS> abraxxa: no, what I try describe will help soon

[20:07] <abraxxa> FROGGS: is there already something better than CArray[Type] to specify a pointer to something?

[20:08] <FROGGS> abraxxa: that is what I talk about the last ten lines of mine

[20:08] <abraxxa> is Pointer new?

[20:09] <FROGGS> typed pointers are new

[20:09] <nine_> terahzer: probably http://doc.perl6.org is a better entry point

[20:09] <abraxxa> so i can replace CArray with Pointer, great

[20:09] <FROGGS> before that we had a not very useful OpaquePointer type

[20:09] <FROGGS> abraxxa: for some things, yes

[20:09] <abraxxa> my OCIBindByName signature is wrong, I had the types instead of pointers to three of the params

[20:10] *** nige left
[20:10] <dalek> Inline-Perl5: b8cc190 | (Stefan Seifert)++ | lib/Inline/Perl5.pm6:

[20:10] <dalek> Inline-Perl5: Use a more appropriate type in p5_buf_to_sv signature

[20:10] <dalek> Inline-Perl5: 

[20:10] <dalek> Inline-Perl5: Thanks to retupmoca++

[20:10] <dalek> Inline-Perl5: < retupmoca> nine_: you may want 'Blob' in your p5_buf_to_sv signature, since blob8 ~~ Buf is false

[20:10] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/b8cc190bd0

[20:11] <abraxxa> FROGGS: i remember you told me that i don't need := any more, is that correct

[20:11] <dalek> doc: 9292957 | moritz++ | lib/Language/regexes.pod:

[20:11] <dalek> doc: regexes: elaborate on capture counting

[20:11] <dalek> doc: review: https://github.com/perl6/doc/commit/9292957d8e

[20:12] <FROGGS> abraxxa: if you work with CArrays and $-sigilled variables you can just use assignment, yes

[20:12] <abraxxa> and with Pointers?

[20:13] <FROGGS> you never needed binding there

[20:13] <FROGGS> you only ever needed binding in: my @foo := CArray.new

[20:13] <abraxxa> so instead of my $curelep := Pointer[ub4]; $curelep = 0; I can write my Pointer[ub4] $curelep = 0; ?

[20:13] *** cognominal left
[20:14] <FROGGS> m: use NativeCall; my Pointer[int32] $curelep = 0;

[20:14] <abraxxa> the stacktrace of 'Unhandled exception: Cannot unbox a type object' is not very helpful as it doesn't point to a line in my code

[20:14] <camelia> rakudo-moar b9d6d3: OUTPUT«Type check failed in assignment to '$curelep'; expected 'Pointer' but got 'Int'␤  in block <unit> at /tmp/geyxtas5ye:1␤␤»

[20:14] <FROGGS> no

[20:14] *** eli-se left
[20:15] <FROGGS> what you try here would require to malloc an int*, and that's not there yet

[20:15] <abraxxa> so still @curelep instead of $curelep and assign to @curelep[0] ?

[20:16] <FROGGS> either that, or: sub foo(ub4 $ is rw) ... { * }

[20:16] <FROGGS> and then just pass a variable containing your numeric value along

[20:16] <abraxxa> the 'is rw' makes the difference?

[20:16] <FROGGS> yes

[20:16] <abraxxa> ah!

[20:16] <FROGGS> 'is rw' implies pointer

[20:17] <moritz> ooh

[20:17] <FROGGS> (to the C half of it)

[20:17] <moritz> I didn't know that

[20:17] <FROGGS> it is new

[20:17] *** nige joined
[20:17] <FROGGS> since nativeref branch merge

[20:17] <FROGGS> I hope it already is in 2015.02...

[20:17] <FROGGS> but if not, it will be in 2015.03 tomorrow anyway

[20:18] *** diana_olhovik joined
[20:18] *** colomon left
[20:19] <abraxxa> is there something special for an out pointer too?

[20:19] <abraxxa> instead of is rw?

[20:19] <abraxxa> like is w?

[20:19] <FROGGS> out pointer?

[20:19] <FROGGS> like, returning a pointer from C?

[20:19] <abraxxa> yes

[20:20] <abraxxa> i can't find out from where this Unhandled exception: Cannot unbox a type object comes from

[20:20] <FROGGS> then you want 'returns Pointer[ub4]', and then you can do: say $ptr.deref

[20:20] <nine_> FROGGS: can you assign to $ptr.deref?

[20:20] <FROGGS> nine_: no

[20:20] <abraxxa> all the OCI functions return sword s but also lots of return by pointer

[20:21] <FROGGS> nine_: we need to implement .malloc or so for doing something similar

[20:21] <FROGGS> 'Cannot unbox a type object comes from' usually means that you forgot to call .new

[20:21] <nine_> FROGGS: darn...that would have allowed me to get rid of nativecast(CArray[OpaquePointer], $err)[0] = self.p6_to_p5($_);

[20:21] <FROGGS> err, 'Cannot unbox a type object'

[20:22] <abraxxa> is there a difference between my $bindpp = OCIBind; and my OCIBind $bindpp; ?

[20:22] <abraxxa> constant OCIBind = OpaquePointer;

[20:23] <FROGGS> abraxxa: there is no difference in my $bindpp = OCIBind; and my OCIBind $bindpp

[20:23] <moritz> well

[20:23] <abraxxa> great

[20:23] <moritz> the latter is also a type constraint

[20:23] <FROGGS> well, besides that :o)

[20:23] <moritz> the former just an initilization

[20:23] <abraxxa> moritz: right, but thats ok

[20:23] <FROGGS> abraxxa: but you probably want to call .new there... like you have to do with CArrays

[20:23] <abraxxa> oh look, it works!

[20:23] <abraxxa> HAHA

[20:23] <FROGGS> O.o

[20:24] <FROGGS> \o/

[20:24] <FROGGS> nine_: I'll make it easy to assign to typed pointers... but not until tomorrow :o)

[20:24] <abraxxa> at least the cannot unbox type error is gone

[20:24] <abraxxa> now the bind fails which didn't before

[20:24] <moritz> you cannot unbox this abraxxa 

[20:24] <abraxxa> FROGGS: how can i check if my 2015.02 supports is rw?

[20:25] *** pdcawley left
[20:26] <moritz> m: sub f(int $x is rw) { ++$x }; say f my int $a = 42

[20:26] <camelia> rakudo-moar b9d6d3: OUTPUT«Expected a native int argument for '$x'␤  in sub f at /tmp/bEwFe5Rqi9:1␤  in block <unit> at /tmp/bEwFe5Rqi9:1␤␤»

[20:26] <moritz> m: sub f(int $x is rw) { ++$x };  my int $a = 42; f $a; say $a

[20:26] <camelia> rakudo-moar b9d6d3: OUTPUT«43␤»

[20:26] <moritz> star-m: sub f(int $x is rw) { ++$x };  my int $a = 42; f $a; say $a

[20:26] <camelia> star-m 2015.02: OUTPUT«Cannot assign to an immutable value␤  in sub prefix:<++> at src/gen/m-CORE.setting:5570␤  in sub f at /tmp/RsnrRUdbpS:1␤  in block <unit> at /tmp/RsnrRUdbpS:1␤␤»

[20:27] <moritz> seems 2015.02 is too old :-)

[20:27] <abraxxa> for NativeCall that is

[20:27] <FROGGS> yes, the Changelog also indicates that 2015.02 is too old

[20:28] <abraxxa> how do i specify is rw and is encoded for a param?

[20:28] <abraxxa> then i'll go home now and continue with 2015.03

[20:28] <abraxxa> it compiles though

[20:29] <FROGGS> m: use NativeCall; sub foo(int32 is rw) is native { * }

[20:29] <camelia> rakudo-moar b9d6d3: ( no output )

[20:29] <FROGGS> m: use NativeCall; sub foo(int32 is rw is encoded('utf8')) is native { * }

[20:29] <camelia> rakudo-moar b9d6d3: ( no output )

[20:29] <FROGGS> abraxxa: just like this ^^

[20:29] <abraxxa> FROGGS: thanks

[20:32] <FROGGS> abraxxa: bitte :o)

[20:33] <jnthn> evening, #perl6

[20:33] <FROGGS> hi jnthn 

[20:33] <nwc10> heresy!

[20:33] <abraxxa> hi and bye jnthn!

[20:34] *** colomon joined
[20:34] <abraxxa> FROGGS: winning!

[20:34] <jnthn> Release day tomorrow, yes? :)

[20:34] <FROGGS> yes

[20:34] <FROGGS> :o)

[20:35] <jnthn> Then given I'll be being grilled tomorrow daytime too, I should probably cut the release tonight :)

[20:35] <jnthn> uh, the *MoarVM* release.

[20:36] <FROGGS> jnthn++

[20:36] <abraxxa> FROGGS: strings work, numbers fail

[20:36] <FROGGS> weird

[20:37] <jnthn> So...there are numerous bugs? :)

[20:38] <abraxxa> nah, i just need to bind them differently

[20:38] <abraxxa> not encode them to utf8

[20:39] <abraxxa> how do i get the size of a passed int?

[20:40] <FROGGS> m: use NativeCall; say nativesizeof(int32)

[20:40] <camelia> rakudo-moar b9d6d3: OUTPUT«4␤»

[20:41] <dalek> Heuristic branch merge: pushed 31 commits to perl6-examples by paultcochrane

[20:41] <[Coke]> (approaching the language) synopses maybe. Everything else is a historical document and will probably confuse.

[20:41] <[Coke]> jnthn: don't forget, there's a new step in the release.

[20:41] <jnthn> [Coke]: In...the MoarVM release?

[20:42] <FROGGS> signing it?

[20:42] <[Coke]> jnthn: ayup!

[20:42] <jnthn> [Coke]++ even put it in the release guide :)

[20:43] <[Coke]> I will consider this notice. :)

[20:45] *** eli-se joined
[20:46] <abraxxa> how do i change if $v ~~ Int { to also match Rat?

[20:46] <FROGGS> match against Numeric?

[20:47] <colomon> Real would be more appropriate.  But that’s more than just Int and Rat

[20:48] <Ulti> if $v ~~ Int|Rat {}  assuming you really do want to do what you're asking :3

[20:48] <abraxxa> FROGGS: never mind, i have to bind it with a different type anyway

[20:49] <abraxxa> ORA-03115: unsupported network datatype or representation

[20:49] <abraxxa> nice, starts to work

[20:50] *** skids joined
[20:50] <terahzer> Well I'm reqding them who care if they are not updated

[20:50] <abraxxa> i might have to tell it that i don't pass utf8 encoded data to it

[20:51] *** alini joined
[20:51] *** rurban joined
[20:52] <abraxxa> so, i'm really going now

[20:52] <abraxxa> good luck with the new release!

[20:52] <FROGGS> abraxxa: o/

[20:52] <[Coke]> abraxxa++ #oracle support.

[20:52] <abraxxa> hopefully!

[20:53] <terahzer> what is the sintax for array literals in perl6 when in perl5 would be (0) x 10 for instance?

[20:54] *** abraxxa left
[20:54] <rurban> Got a design question. Do you have the is hidden_from_backtrace trait already implemented? In perl5 context it would make much more sense to support both variants positive and negative. Some XSUBs need a flag to be added to backtraces, like Carp and XSLoader::load and some other functions need it negative to be hidden from backtraces. So implement it as :backtrace for xsubpp and the :-backtrace sub attribute which closely res

[20:55] <rurban> so maybe you want to support a negative trait, like "is !backtrace"

[20:56] <FROGGS> m: sub foo is hidden_from_backtrace { }

[20:56] <camelia> rakudo-moar b9d6d3: ( no output )

[20:56] <FROGGS> is implemented, aye

[20:56] <rurban> and negative in some form as perl5 :-attr?

[20:56] <FROGGS> rurban: !backtrace look almost like a private method

[20:56] <[Coke]> m: sub foo is notimplemented {}

[20:56] <camelia> rakudo-moar b9d6d3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/fmHTMfK5up␤Can't use unknown trait 'is notimplemented' in a sub declaration.␤at /tmp/fmHTMfK5up:1␤------> ␤    expecting any of:␤        rw parcel hidden-from-backtrace hidden-from-USAGE␤        pur…»

[20:57] <[Coke]> (making sure you didn't cheat. ;)

[20:57] *** pullphinger left
[20:57] <FROGGS> rurban: the native form '!backtrace' would only make sense if we had a positive form I guess

[20:57] <[Coke]> m: sub foo is hidden_from_backtrace { die "eek" }  ;sub bar() { foo } ; bar

[20:57] <camelia> rakudo-moar b9d6d3: OUTPUT«eek␤  in sub bar at /tmp/pImUxDwHYa:1␤  in block <unit> at /tmp/pImUxDwHYa:1␤␤»

[20:57] <terahzer> How would you do to do @list = (0) x 5; in perl 6 ?

[20:57] <FROGGS> terahzer: operator xx

[20:57] <FROGGS> m: say 1 xx 5

[20:58] <camelia> rakudo-moar b9d6d3: OUTPUT«1 1 1 1 1␤»

[20:58] <rurban> m: sub foo is not rw

[20:58] <camelia> rakudo-moar b9d6d3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/vurcl5LsVb␤Missing block␤at /tmp/vurcl5LsVb:1␤------> 3sub foo is not7⏏5 rw␤    expecting any of:␤        new name to be defined␤»

[20:58] <terahzer> cool

[20:58] <FROGGS> rurban: there is no negation form of traits

[20:58] <FROGGS> rurban: because you apply a trait... you can't un-apply it

[20:58] <FROGGS> rurban: like you cannot uncall a subroutine

[20:58] <FROGGS> a trait is a very generic thing

[20:58] <terahzer> m: @l = (1,2,3,4); @l »+=« 1 xx 4; say @l;

[20:58] <camelia> rakudo-moar b9d6d3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/swMn8Wo3_C␤Variable '@l' is not declared␤at /tmp/swMn8Wo3_C:1␤------> 3@l7⏏5 = (1,2,3,4); @l »+=« 1 xx 4; say @l;␤    expecting any of:␤        postfix␤»

[20:59] <rurban> yes, I thought just for shorter names

[20:59] <FROGGS> it is not just a hash like annotation

[20:59] <terahzer> m: my @l = (1,2,3,4); @l »+=« 1 xx 4; say @l;

[20:59] <camelia> rakudo-moar b9d6d3: OUTPUT«2 3 4 5␤»

[20:59] <terahzer> this thing »+=« is difficult to type on most keyboard, how do you do that ?

[20:59] <FROGGS> rurban: like the 'is inline("C")' trait wraps a routine and compiles+runs C code...

[21:00] <FROGGS> you cannot un-apply that

[21:00] <rurban> Do you have subs which do not record their calling context, like perl5 xsubs?

[21:00] <FROGGS> rurban: not that I know offhand

[21:00] <rurban> ok. So I will have a minor perl6 deviation on this one

[21:01] <rurban> It's just syntax, the concept is the same

[21:03] <rurban> sub inner is hidden-from-backtrace { die "OH NOEZ" };

[21:03] <rurban>  looked pretty lispy and unperly to me :)

[21:03] <skids> terahzer: First you make sure you have a compose key mapped.  Then compose > > .

[21:04] <vendethiel> skids: EIMONWINDOWS

[21:04] <vendethiel> terahzer: >>[+=]<<

[21:04] <vendethiel> (while the [] are not *necessary*, I certainly think they help reading)

[21:05] <FROGGS> I've got «» on alt-gr + x/y

[21:05] <vendethiel> FROGGS: how do you do that? :P

[21:05] <FROGGS> vendethiel: using ubuntu I guess :o)

[21:05] *** skids left
[21:06] <vendethiel> ha!

[21:06] <jnthn> m: my @l = (1,2,3,4); @l>>++; say @l

[21:06] <camelia> rakudo-moar b9d6d3: OUTPUT«2 3 4 5␤»

[21:06] <FROGGS> m: my @l = (1,2,3,4); @l >>+=<< 1 xx 4; say @l; # because it is hard to type we have texas style ops :o)

[21:06] <camelia> rakudo-moar b9d6d3: OUTPUT«2 3 4 5␤»

[21:07] <[Coke]> on mac it's alt-\ and alt-| to get «»

[21:08] <Ulti> lol who is @KruthikDhillon on Twitter? they appear to only tweet trollish comments about #perl6 and weird gushing messages about "Elavan"

[21:08] <Ulti> exclusively just those two topics x___X

[21:08] <[Coke]> your code editor may also have a way to insert them, even if your OS is unhelpful. but most OSes have some way for you to generate non-ascii.

[21:09] <terahzer> the original idea was to allowing @l = (1,2,3,4); @l >>+=<< 1 ; say @l; (list scalar operation) what was ambiguous about that?

[21:10] <jnthn> terahzer: You get that with >>+=>>

[21:10] <terahzer> Good, why was it deemed necessary to discriminate?

[21:10] <jnthn> Point the things outwards to get DWIM-y behavior.

[21:12] <FROGGS> discriminate?

[21:12] <jnthn> I think that was decided before I was around here. At a guess, so you have a way to indicate you expect the same size so you don't get caught out by the auto-extending behavior.

[21:12] <FROGGS> ahh

[21:13] <terahzer> by the way direction of arrows is intuitive

[21:13] <jnthn> It may be that the one form optimizes (e.g. to SIMD stuff) easier.

[21:13] <terahzer> let you do things like @l = 2 <<+<< @l

[21:13] <jnthn> Though we ain't do that just yet :)

[21:13] *** colomon left
[21:14] *** dalek left
[21:14] <terahzer> jnthn by my experience SIMD don't optimizes for anything in this simple cases

[21:14] <terahzer> even in C

[21:14] *** dalek joined
[21:14] *** ChanServ sets mode: +v dalek

[21:15] <retupmoca> vendethiel: https://github.com/SamHocevar/wincompose

[21:15] <dalek> rakudo/cpp: 051c602 | lizmat++ | src/core/native_array.pm:

[21:15] <dalek> rakudo/cpp: Make my int @a = Range about 1000x faster

[21:15] <dalek> rakudo/cpp: review: https://github.com/rakudo/rakudo/commit/051c602483

[21:15] <dalek> rakudo/cpp: 0f780b2 | timotimo++ | src/Perl6/Optimizer.nqp:

[21:15] <dalek> rakudo/cpp: BlockVarOptimizer's $!poisoned can be a native int

[21:15] *** dalek left
[21:15] *** dalek joined
[21:15] *** ChanServ sets mode: +v dalek

[21:19] *** cognominal joined
[21:20] *** kjs_ joined
[21:22] *** alini left
[21:24] *** osto joined
[21:30] *** yqt joined
[21:31] * lizmat de-diverged

[21:32] <lizmat> if you liked Divergent (1), you're going to like this one as well

[21:32] <lizmat> if you're into special effects, you're also in for a treat

[21:32] <lizmat> it made a lot more sense to me than Jupiter Ascending, for that matter  :-)

[21:33] <japhb> lizmat: What movie did you see?

[21:34] <lizmat> Divergent 2

[21:34] <lizmat> aka insurgence 3D, I believe

[21:34] <nine_> FROGGS++ # working on NativeCall

[21:34] <japhb> Ah, OK, I guessed as much, but didn't know it existed yet.

[21:34] <lizmat> it came out about a week ago here

[21:34] <japhb> (everyone-who-works-on-NativeCall)».++

[21:34] <terahzer> I don`t understand; to access an array element in p6 you do @l[0] ; but isn't it  a scalar?

[21:35] <lizmat> .oO( it's nice to live within walking distance of a very nice cinema )

[21:35] <japhb> Just saw the original last week.  Must be why it came up for streaming (to prime the audience).

[21:35] *** kjs_ left
[21:35] <lizmat> m: my @a = ^10; say @a[5].WHAT

[21:35] <camelia> rakudo-moar b9d6d3: OUTPUT«(Int)␤»

[21:36] <japhb> terahzer: In Perl 6, sigils don't change when you access an element of a collection, unlike in Perl 5.

[21:36] <lizmat> m: my @a = ^10; say @a[5,6].WHAT

[21:36] <camelia> rakudo-moar b9d6d3: OUTPUT«(Parcel)␤»

[21:36] <japhb> terahzer: It regularizes things with respect to what lizmat++ just showed.

[21:36] <lizmat> m: my @a = ^10; say @a[5].VAR.WHAT

[21:37] <camelia> rakudo-moar b9d6d3: OUTPUT«(Scalar)␤»

[21:37] <lizmat> m: my @a = ^10; say @a[5,6][0].VAR.WHAT

[21:37] <camelia> rakudo-moar b9d6d3: OUTPUT«(Scalar)␤»

[21:39] <terahzer> ok

[21:45] *** xfix left
[21:46] <lizmat> FROGGS: re http://irclog.perlgeek.de/perl6/2015-03-18#i_10302099 it is called hidden-from-backtrace now  :-)

[21:46] <lizmat> the other one still works, though  :-)

[21:46] <terahzer> more than SIMD on hyperoperators, I think that multithreads in the map function could be an huge performance boost

[21:46] *** anaeem1 left
[21:47] <japhb> terahzer: Do you know about the GLR?

[21:47] *** anaeem1_ joined
[21:47] <FROGGS> lizmat: yeah, I almost guess that when typing it :o)

[21:47] <terahzer> no, googling now

[21:48] <japhb> terahzer: It's the Great List Refactor -- we're rewriting how Rakudo (and for the user-visible portions, Perl 6) handles slinging lists around, which deeply affects how map and friends work -- and critically, how they perform.

[21:49] *** mj41 left
[21:49] <FROGGS> terahzer: http://pmthium.com/2014/10/apw2014/

[21:49] *** colomon joined
[21:50] <japhb> I think the GLR design meeting at APW was probably the most productive meeting I've been in where I was simultaneously frustrated out of my mind.

[21:51] *** anaeem1_ left
[21:52] <hoelzro> I did a fair amount of work last night to remove linenoise/readline from MoarVM, and I broke out the functionality into a Linenoise module

[21:53] <japhb> hoelzro++

[21:53] <hoelzro> we could direct users to install Linenoise via panda, or we could bundle Linenoise with rakudo; what would be the preferred approach?

[21:54] <FROGGS> I guess we want to continue shipping a REPL

[21:54] <japhb> Though, does that mean that nqp no longer has a REPL?

[21:54] <japhb> We definitely want a REPL for Rakudo.

[21:54] <hoelzro> there's still a REPL

[21:54] <japhb> (Standard, I mean.)

[21:55] <hoelzro> it just uses Linenoise.pm rather than nqp::readlineint_fh for reading lines

[21:55] <hoelzro> falling back to nqp::readline if the former isn't available

[21:55] <hoelzro> the cool thing is that the REPL in my fork now has tab completion

[21:55] <japhb> Oooh

[21:56] <hoelzro> which I think would have been too hard to do with readline at the VM level

[21:56] <hoelzro> (well, we would've needed a nqp::readlineint_completion_cb op, which seems like overkill)

[21:56] <FROGGS> hoelzro: and the REPL also works for nqp-m?

[21:56] * hoelzro checks

[21:56] <hoelzro> yup

[21:57] <hoelzro> although it doesn't have history like it used to =/

[21:57] <hoelzro> so that's a drawback

[21:58] *** diana_olhovik left
[22:04] <lizmat> I would think Linenoise.pm would be a nice addition to the core

[22:05] <hoelzro> I'm just not sure if it's core or star worthy'

[22:05] <jnthn> Well, doesn't the REPL depend on it?

[22:05] <jnthn> Or, or won't the REPL depend on it...

[22:06] <hoelzro> it tries to load it; if it can't, it falls back to nqp::readline

[22:06] <jnthn> *nod*

[22:06] <jnthn> Do we have a Readline.pm that can be tried also? :)

[22:06] <hoelzro> jnthn: I would like to have the REPL do that too

[22:06] <jnthn> *nod*

[22:07] *** nige left
[22:07] <jnthn> hoelzro++ 

[22:07] <hoelzro> I'll push up the bits and pieces I have after work tonight

[22:07] <jnthn> To a branch, yes?

[22:07] <hoelzro> the completion is extremely primitive and kludgey

[22:07] <hoelzro> oh my yes =)

[22:08] <hoelzro> I'm not confident enough in my Moar/NQP/Rakudo fu to push anything non-trivial to nom|master

[22:08] <hoelzro> the current work (which removes linenoise) is here:

[22:08] <hoelzro> https://github.com/rakudo/rakudo/tree/no-linenoise

[22:09] <hoelzro> https://github.com/perl6/nqp/tree/no-readlineint

[22:09] <FROGGS> hoelzro++

[22:09] <hoelzro> https://github.com/MoarVM/MoarVM/tree/no-moar-linenoise

[22:09] <hoelzro> and here's Linenoise.pm: https://github.com/hoelzro/p6-linenoise

[22:09] *** FROGGS left
[22:09] <jnthn> Well, also we don't want to land such a thing this side of the relese :)

[22:09] <jnthn> *release

[22:10] <hoelzro> >:)

[22:10] <hoelzro> I wouldn't expect that; it was (I think smls?) comment that inspired me

[22:10] <hoelzro> if it's in 2015.04, that's cool

[22:10] <hoelzro> the completion work is sitting uncommitted at home; it will need a fair amount of work

[22:11] <hoelzro> also, p6-linenoise doesn't bundle linenoise.so, and I needed to use a patched version of linenoise to re-enable blocking on STDIN

[22:14] <eli-se> I like hash tables.

[22:15] *** rurban left
[22:15] <jnthn> .oO( ...and I can not lie )

[22:15] <jnthn> hoelzro: Hm, that sounds like something we should find some other way to fix.

[22:15] <hoelzro> jnthn: agreed

[22:19] *** Rounin left
[22:19] <itz> completion! yay

[22:19] *** coffee` left
[22:20] <hoelzro> ah, it was you, itz, who brought it up yesterday

[22:20] <hoelzro> I just have a bad memory =)

[22:21] <jnthn> Time for some rest, now the Moar release is cut :)

[22:21] <jnthn> 'night, #perl6

[22:22] <hoelzro> night jnthn 

[22:22] * lizmat also takes a long nap

[22:22] *** noganex left
[22:26] *** noganex joined
[22:31] *** cognominal left
[22:35] *** terahzer left
[22:43] *** gfldex left
[22:45] *** MadcapJake joined
[22:45] *** vike left
[22:47] *** Madcap-Jake left
[22:59] *** vike joined
[22:59] *** Alina-malina left
[23:00] *** Alina-malina joined
[23:08] *** cognominal joined
[23:09] *** fhelmberger joined
[23:12] *** tbrowder left
[23:13] *** dabockster joined
[23:14] *** fhelmberger left
[23:15] *** eli-se left
[23:17] *** aborazmeh joined
[23:17] *** aborazmeh left
[23:17] *** aborazmeh joined
[23:24] *** aborazmeh left
[23:26] *** aborazmeh joined
[23:26] *** aborazmeh left
[23:26] *** aborazmeh joined
[23:28] *** BenGoldberg_ joined
[23:29] *** yeltzooo left
[23:30] *** yeltzooo joined
[23:33] *** mohij left
[23:34] *** madmuid left
[23:43] *** tinyblak left
[23:43] *** tinyblak joined
[23:48] *** tinyblak left
