[00:20] <raydiak> do we have a way to remove a non-empty directory without recursively emptying it one file at a time?

[00:24] *** tinyblak left
[00:30] <ugexe> you could do it the way steam did it... shell out a rm -rf and hope nothing bad ends up happening >:) 

[00:30] <TimToady> shell('rm -rf dir')

[00:33] <ugexe> then again, thats just recursively emptying the folder too

[00:35] <TimToady> there is no other way under Unix, unless you want to damage the filesystem

[00:36] <raydiak> guess that answers that, then (btw anyone reading along wanting to reliably and portably remove dirs could use rm_rf() from Shell::Command)

[00:38] <ugexe> using the hyperoperator you can do it in a few lines anyway

[00:39] *** yqt left
[00:40] *** nbdsp joined
[00:40] *** tinyblak joined
[00:40] <nbdsp> Greetings! Could someone advise please how to insert binary data into MySQL table with DBIish so that it wasn't interpreted as Unicode? When I try the following: my $q = "\x79\x80"; $st = $db.prepare("INSERT INTO main (hash) VALUES('$q')"); $st.execute(); I always get in the DB table 3 bytes: 0x79, 0xc2, 0x80

[00:46] *** laouji joined
[00:47] *** colomon left
[00:47] *** colomon joined
[00:51] <TimToady> .encode('latin-1') or so?

[00:52] <TimToady> or is the interface enforcing utf-8?

[00:57] <nbdsp> I can't find in the DBIsh connection parameters relating to charset. Maybe someone uses DBIish for such kind of tasks?

[00:59] *** simcop2387 joined
[01:00] <nbdsp> When I try the following: my $q = "\x79\x80"; $st = $db.prepare("INSERT INTO main (hash) VALUES('$q.encode('latin-1')"); $st.execute(); there is an error "Cannot use Bud as a string, but you called Stringy method on it."

[01:00] *** anaeem1_ joined
[01:00] <nbdsp> "Cannot use Buf as string..."

[01:00] <bobkare> nbdsp: have you tried passing the data via a placeholder instead?

[01:01] <nbdsp> Yes. The same result.

[01:01] *** aborazmeh joined
[01:01] *** aborazmeh left
[01:01] *** aborazmeh joined
[01:05] *** anaeem1_ left
[01:16] *** aborazmeh left
[01:16] <nbdsp> from mysql site: "mysql_query() cannot be used for statements that contain binary data;" and DBIish uses mysql_query. :(

[01:17] <gtodd> aww perl8.org is gone 

[01:22] *** laouji left
[01:22] *** laouji joined
[01:24] *** BenGoldberg joined
[01:24] *** vendethiel joined
[01:29] *** yeahnoob joined
[01:30] <cognominal> r: say []^.roles

[01:30] <camelia> rakudo-moar 8e96e4: OUTPUT«one(, (Any))␤»

[01:30] <camelia> ..rakudo-jvm 8e96e4: OUTPUT«cannot connect to eval server: Connection refused␤»

[01:31] <cognominal> r: say .WHAT for  []^.roles

[01:31] <camelia> rakudo-moar 8e96e4: OUTPUT«(Junction)␤»

[01:31] <camelia> ..rakudo-jvm 8e96e4: OUTPUT«cannot connect to eval server: Connection refused␤»

[01:49] *** nbdsp left
[01:53] *** cognominal left
[01:59] *** elf_ joined
[02:13] *** chenryn joined
[02:13] *** noganex joined
[02:16] *** noganex_ left
[02:26] *** SHODAN joined
[02:33] *** chenryn left
[02:34] *** aborazmeh joined
[02:34] *** aborazmeh left
[02:34] *** aborazmeh joined
[02:42] *** chenryn joined
[03:33] *** skids left
[03:43] *** chenryn left
[03:50] <tony-o> moritz: that event::emitter is available on panda now if you were looking to use it - if not thanks for the heads up that i boogered up the meta

[04:08] *** vendethiel left
[04:09] *** vendethiel joined
[04:14] *** Alina-malina left
[04:17] *** anaeem1 joined
[04:19] *** anaeem1 left
[04:20] *** anaeem1_ joined
[04:30] *** kaare_ joined
[04:44] *** chenryn joined
[04:49] *** chenryn left
[04:55] *** vendethiel left
[04:59] *** BenGoldberg left
[05:01] <moritz> tony-o: thanks for fixing it; I noticed it went missing when updating https://github.com/moritz/perl6-all-modules

[05:06] *** elf_ left
[05:13] *** chenryn joined
[05:22] *** KCL_ left
[05:23] *** KCL_ joined
[05:32] *** spider-mario left
[05:35] *** virtualsue joined
[05:43] *** chenryn left
[05:44] *** espadrine joined
[05:45] *** Psyche^ joined
[05:46] *** chenryn joined
[05:49] *** Patterner left
[06:05] *** chenryn left
[06:09] *** mr-foobar joined
[06:13] <jnthn> morning o/

[06:15] *** Woodi joined
[06:17] *** rindolf joined
[06:23] *** yvan1 left
[06:26] *** aborazmeh left
[06:30] *** risou is now known as risou_awy

[06:30] *** risou_awy is now known as risou

[06:33] <labster> \o morning jnthn 

[06:39] <dalek> roast: e6f9b8c | usev6++ | S02-literals/heredocs.t:

[06:39] <dalek> roast: Add reference to RT #117853

[06:39] <dalek> roast: review: https://github.com/perl6/roast/commit/e6f9b8c0e1

[06:39] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=117853

[06:45] <masak> morning, #perl6

[06:46] <moritz> \o

[06:48] <labster> m: say Str.chars

[06:48] <camelia> rakudo-moar 8e96e4: OUTPUT«use of uninitialized value of type Str in string context  in block <unit> at /tmp/HEdB8nACCY:1␤␤0␤»

[06:49] *** RabidGravy joined
[06:50] <labster> I suppose that seems like the right behavior.

[06:51] <masak> yes.

[06:51] <masak> the Str type object has 0 characters :)

[06:51] <masak> and a warning, because don't do that

[06:52] <labster> I was thinking of adding a method chars to Str.pm, because I think I can get 4% faster without the unboxing.

[06:53] <labster> which is not exactly LHF, but I still feel like .chars is a bit too slow

[06:53] *** chenryn joined
[06:55] <jnthn> Yes, Str.chars should exist

[06:56] <jnthn> Probably as a multi with :D and :U on the invocant

[06:56] <jnthn> Then the :D one is just nqp::chars(self)

[06:56] <jnthn> Or nqp::chars(nqp::unbox_s(self))

[06:58] *** chenryn left
[06:58] *** awwaiid joined
[06:58] <labster> :U is the confusing one.  multi method chars (Str:U) { self.Str; 0 }  ?

[06:59] <labster> well, that might happen automatically with Cool's version.  I'll give it a shot.

[06:59] *** chenryn joined
[06:59] <moritz> labster: I'd guess that the self.Str is there just to generate the warning

[06:59] <labster> that was my intent

[07:00] <jnthn> It's a fair enough way to generate it.

[07:00] <moritz> but please add a comment to it

[07:00] <dalek> roast: d561d49 | usev6++ | S04-declarations/my.t:

[07:00] <dalek> roast: Add test for RT #115916

[07:00] <dalek> roast: review: https://github.com/perl6/roast/commit/d561d4977c

[07:00] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=115916

[07:02] * jnthn notes we're down to 670 RTs

[07:02] *** laouji_ joined
[07:02] <masak> \o/

[07:02] <jnthn> I hope we can get down to 650 and below during April

[07:02] <bartolin> \o/ jnthn++

[07:02] <masak> it's been way higher than 670, hasn't it?

[07:02] <moritz> bartolin++ # relentless RT work

[07:02] <masak> have we ever pushed 1000?

[07:02] *** Ven joined
[07:02] <jnthn> It's been over 700 before, for sure

[07:02] <masak> oh, ok.

[07:02] <masak> bartolin++ indeed

[07:02] <labster> \o/ indeed

[07:03] <bartolin> it has been near 800 last autumn :-)

[07:03] <jnthn> Wow :)

[07:03] *** vendethiel joined
[07:03] * jnthn wonders if there's a way to get RT to spit out stats on that :)

[07:03] <masak> bartolin: ok, you push it to 0, I push it to Inf. first one to get there wins :P

[07:03] <bartolin> *g*

[07:04] <bartolin> would be a ... tie?

[07:04] <labster> bartolin++ keeps filling up my inbox with RT closures

[07:05] <bartolin> yeah, at times I think I'm a bit noisy at perl6-compiler

[07:05] * masak .oO( it's because of all these RT closures that we have to allocate stuff on the heap! ) :P

[07:05] <masak> bartolin: it's good noise.

[07:05] <masak> I don't mind p6c being noisy with RT stuff.

[07:06] *** zakharyas joined
[07:06] <masak> for each RT ticket, there's at least one person who cares about the ticket.

[07:06] *** laouji left
[07:07] <moritz> and if we do start to consider it noise, we'll simply have RT not send those mails to p6c

[07:07] *** Alina-malina joined
[07:07] *** Ven left
[07:07] <bartolin> moritz: I'm Cc:'ing p6c most of the time manually, though

[07:08] <jnthn> I thought they went to p6c automatically?

[07:09] * moritz too

[07:13] <jnthn> hm, seems my blog post didn't make it to pl6anet.org

[07:14] *** Ven joined
[07:15] <jnthn> itz_: Is pl6anet yours? Any chance of getting https://6guts.wordpress.com/ there, now I'm actively Perl 6 blogging again? :)

[07:15] <moritz> jnthn++ # https://6guts.wordpress.com/2015/04/12/this-week-unicode-normalization-many-rts/

[07:17] <RabidGravy> m: say homedir('.')

[07:17] <camelia> rakudo-moar 8e96e4: OUTPUT«Dynamic variable $*HOME not found␤  in method <anon> at src/gen/m-CORE.setting:16089␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2908␤  in any find_method at src/gen/m-Metamodel.nqp:1052␤  in sub homedir at src/gen/m-CORE.setting:19088…»

[07:18] <RabidGravy> where would $*HOME be best implemented?  In Process.pm with most of the dynvars?

[07:22] *** Rounin joined
[07:22] *** espadrine left
[07:24] *** awwaiid left
[07:26] *** vendethiel left
[07:29] *** FROGGS joined
[07:29] *** bjz joined
[07:34] *** awwaiid joined
[07:39] *** Ven left
[07:41] <nwc10> OMG bloggage

[07:42] *** abraxxa joined
[07:43] *** pecastro left
[07:43] *** virtualsue left
[07:46] *** Ven joined
[07:47] *** darutoko joined
[07:55] *** yvan1 joined
[07:57] *** yakudza joined
[08:04] *** chenryn left
[08:05] *** chenryn joined
[08:08] *** bjz left
[08:12] <FROGGS> .schnickschnack

[08:12] <yoleaux> 11 Apr 2015 16:25Z <jnthn> FROGGS: Please undo removing MODE_UNBOX_STR_NOT_EMPTY_OR_ZERO; it's probably useful for, for example, v5.

[08:12] <yoleaux> 11 Apr 2015 16:33Z <nwc10> FROGGS: Ooops you're innocent. Please try harder next time :-)

[08:12] <yoleaux> 11 Apr 2015 16:35Z <nwc10> FROGGS: Guess what, Problem *still* Exists Between (my) Keyboard And Chair.

[08:12] *** espadrine joined
[08:12] <FROGGS> is the jvm build still borken? and if so, how can I reproduce it?

[08:13] *** cschwenz joined
[08:15] <nwc10> FROGGS: I believe that jnthn was able to fix it

[08:15] <FROGGS> ahh cool

[08:15] <FROGGS> need to backlog the entire weekend...

[08:16] <nwc10> Friday's party was *that* good? :-)

[08:16] <moritz> python, python

[08:16] <moritz> ImportError: cannot import name 'OperationalLevel'

[08:16] <FROGGS> nwc10: I had to build a fence, almost all on my own :/

[08:16] <moritz> how about telling me *why* you can't import it?

[08:16] <nwc10> where "Almost" was a LTA thing, because you had small assistants?

[08:17] <[ptc]> moritz: PYTHONPATH?

[08:17] <FROGGS> I did not even know until then where one can have aching muscles

[08:17] <FROGGS> nwc10: no, the owner of the fence helped

[08:17] *** ab5tract_ joined
[08:17] <FROGGS> but there are things that only one person can do

[08:17] <FROGGS> and sadly that was me

[08:18] <moritz> [ptc]: I guess the symbol that I want to import simply isn't there in the file

[08:18] <moritz> [ptc]: but if that's the case, python could *tell me that*

[08:18] <FROGGS> and now I see who broke the jvm build :/

[08:18] <[ptc]> moritz: I feel your pain!  Python is my $dayjob

[08:18] <moritz> python's error message simply aren't written from a user's perspective

[08:19] <[ptc]> torture the user on behalf of the implementor

[08:20] <FROGGS> moritz: that's often the case

[08:20] <FROGGS> moritz: look at visual basic for example

[08:20] <dalek> roast: 223db17 | usev6++ | S14-roles/parameterized-type.t:

[08:20] <dalek> roast: Fix test for RT #68136

[08:20] <dalek> roast: ... Mouq++ for pointing out the correct syntax

[08:20] <dalek> roast: review: https://github.com/perl6/roast/commit/223db17d80

[08:20] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=68136

[08:21] *** Ven left
[08:28] <dalek> rakudo/nom: e28b43d | labster++ | src/core/Str.pm:

[08:28] <dalek> rakudo/nom: Add Str.chars instead of inheriting Cool.chars

[08:28] <dalek> rakudo/nom: 

[08:28] <dalek> rakudo/nom: .chars on strings now runs 41% faster

[08:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e28b43dc6a

[08:28] *** bjz joined
[08:29] <labster> I think that helped out the optimizer quite a bit more than I expected.

[08:29] *** dakkar joined
[08:29] *** azawawi joined
[08:29] <azawawi> hi

[08:30] <azawawi> What are the recommended Perl 6 syntax highlighter(s) these days?

[08:31] *** Ven joined
[08:36] <[ptc]> azawawi: the vim syntax highlighter is good, although you'll need to use the very latest version (https://github.com/vim-perl/vim-perl/blob/master/syntax/perl6.vim) since the one shipped with e.g. Debian is very slow

[08:36] *** bjz left
[08:37] <azawawi> i see thx

[08:38] *** mr-foobar left
[08:39] *** laouji_ left
[08:40] *** laouji joined
[08:41] *** maddingue joined
[08:42] <[ptc]> azawawi: if you just want to do syntax highlighting (in HTML, say), then pygments (pygments.org) provides a Perl6 highlighting module

[08:42] *** telex left
[08:42] <ab5tract_> wasn't someone getting a 'textmate' coloring going? which would theoretically give us our github coloring back?

[08:43] <RabidGravy> now a few more of you have woken up, where should $*HOME be implemented?

[08:44] <RabidGravy> m: homedir('.')

[08:44] <camelia> rakudo-moar 8e96e4: OUTPUT«Dynamic variable $*HOME not found␤  in method <anon> at src/gen/m-CORE.setting:16089␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2908␤  in any find_method at src/gen/m-Metamodel.nqp:1052␤  in sub homedir at src/gen/m-CORE.setting:19088…»

[08:44] *** telex joined
[08:47] *** ab5tract_ left
[09:02] *** bjz joined
[09:07] *** pecastro joined
[09:10] *** Woodi left
[09:10] *** Woodi joined
[09:18] *** pecastro left
[09:22] *** vendethiel joined
[09:31] *** cognominal joined
[09:32] *** cognominal left
[09:32] *** Ven left
[09:33] *** yeahnoob left
[09:34] *** mr-foobar joined
[09:36] <dalek> Heuristic branch merge: pushed 22 commits to rakudo/newio by lizmat

[09:41] *** pecastro joined
[09:44] *** vendethiel left
[09:44] *** rurban_ joined
[09:44] *** chenryn left
[09:45] *** yqt joined
[09:46] *** chenryn joined
[09:50] *** cognominal joined
[09:58] *** yqt left
[09:59] *** yqt joined
[09:59] *** laouji_ joined
[10:00] *** cognominal left
[10:04] *** laouji left
[10:26] *** tadzik left
[10:26] *** tadzik joined
[10:26] *** tadzik left
[10:27] *** tadzik joined
[10:27] *** yqt left
[10:30] *** kinslayer joined
[10:32] *** cognominal joined
[10:32] *** thilp joined
[10:37] *** chenryn left
[10:38] *** cschwenz left
[10:38] *** silug joined
[10:38] *** cschwenz joined
[10:41] *** yqt joined
[10:45] *** RabidGravy left
[10:47] *** raiph joined
[10:48] *** Ven joined
[10:49] *** Ven left
[10:52] * tadzik looks at https://github.com/tadzik/panda/issues/148, puzzled

[10:52] <tadzik> ...how did it ever work? Was it always that way?

[10:53] <tadzik> oh, withp6lib :)

[10:57] *** azawawi left
[10:57] <tadzik> thanks to ugexe++, rakudobrew now works on windows :)

[11:00] <colomon> ooooo

[11:00] <colomon> what does it need to build?

[11:00] <colomon> (or rather, maybe, what does Rakudo need to build?)

[11:01] <tadzik> Perl only, I think

[11:02] <tadzik> er, wait

[11:02] <tadzik> yeah, think so

[11:02] <tadzik> try it out, I don't have windows :)

[11:02] <|Tux|> tadzik, Text::CSV does not run the tests under panda and then does not install

[11:02] *** anaeem1_ left
[11:02] <tadzik> [Tux]: ok, looking

[11:02] <|Tux|> if you can spot the reason why, I owe you another beer

[11:03] <tadzik> :)

[11:03] <tadzik> [Tux]: is that related to the prove -Ilib ticket you opened?

[11:03] <|Tux|> yep

[11:03] <tadzik> and fixed by your patch?

[11:03] <|Tux|> that is why I came here

[11:03] <tadzik> [Tux]: it just tested and installed correctly for me

[11:03] <|Tux|> it fixed the panda install Text::CSV, but I saw core dumps later

[11:04] <tadzik> aside from the fact that it does not have provides

[11:04] <|Tux|> but I have no idea if that was related

[11:04] <tadzik> so it cannot be loaded properly

[11:04] <tadzik> let's see if I can fix that

[11:04] <|Tux|> it *does* have provides!

[11:04] <tadzik> oh?

[11:04] <tadzik> oh, it does! Very weird

[11:05] <|Tux|> https://github.com/Tux/CSV/blob/master/META.info#L13

[11:05] <tadzik> yeah

[11:05] <tadzik> wtf

[11:05] <tadzik> also, [Tux]++ for a nice, proper META.info :)

[11:05] *** diana_olhovik_ joined
[11:06] <tadzik> ok, this is crazy. When I install it with 'panda install .', it doesn't test anyore

[11:06] * |Tux| is unsure if the test-depends also requires the entries in depends

[11:06] <tadzik> 'panda install Text::CSV' works fine except it doesn't see "provides"

[11:06] *** chenryn joined
[11:06] <tadzik> [Tux]: I think test-depends is a superset of depends :)

[11:06] <tadzik> by definition

[11:07] <|Tux|> but you understand why I lost track

[11:07] <tadzik> clearly

[11:07] <tadzik> I'll set up my coffee and get on it

[11:12] <dalek> rakudo-star-daily: 7faca23 | coke++ | log/ (2 files):

[11:12] <dalek> rakudo-star-daily: today (automated commit)

[11:12] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7faca231bc

[11:12] <dalek> perl6-roast-data: ce236c5 | coke++ | / (9 files):

[11:12] <dalek> perl6-roast-data: today (automated commit)

[11:12] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ce236c5104

[11:12] *** pecastro left
[11:14] <raiph> .tell RabidGravy http://irclog.perlgeek.de/perl6/2015-02-14#i_10117483

[11:14] <yoleaux> raiph: I'll pass your message to RabidGravy.

[11:14] <[Coke]> 2 files failing on nqp parrot now.

[11:15] <[Coke]> integration/advent2012-day04.t failing on all rakudo backends

[11:15] <[Coke]> S12-attributes/native.t failing on rakudo-nojit

[11:16] <[Coke]> S17 flappers still present.

[11:16] *** thilp left
[11:16] <[Coke]> lots more failures on jvm still.

[11:17] <tadzik> grr, I should test PRs before merging them

[11:25] <tadzik> [Tux]: ok, this is quite interesting. Your tests segfault rakudo, but crash the debugger

[11:25] <tadzik> (perl6 debugger)

[11:25] <tadzik> with a mysterious yet scary "Unhandled exception: ctxlexpad needs an MVMContext"

[11:25] <|Tux|> yeah, that is where I stopped too

[11:25] <|Tux|> waaaaay out of my comfort zone

[11:26] <tadzik> haha

[11:26] <tadzik> at least it consistently crashes on Text::CSV.new

[11:29] <[Coke]> (rt, p6c - no, that's not automatic. you have to opt in every time you comment on a ticket via the webterface)

[11:31] <tadzik> |Tux|: it gets better: I can't even precompile Text::CSV

[11:31] <tadzik> perl6 --target=mbc -o blib/lib/Text/CSV.mbc lib/Text/CSV.pm says: Cannot dump this object; no dump method

[11:31] <tadzik> good news is, Text::CSV works perfectly fine when not precompiled

[11:31] * |Tux| looks over his shoulder, feeling haunted

[11:31] <tadzik> so it is *just* a precompilation bug

[11:32] <tadzik> I'm sure jnthn'll love it :P

[11:32] <|Tux|> LOL

[11:32] *** fhelmberger joined
[11:35] *** Ven joined
[11:39] <masak> I suspected precompilation might be involved somehow.

[11:39] <masak> nice detective work, |Tux|++ and tadzik++ 

[11:40] <masak> can you also manage to golf the precompilation thing, preferably with as few module dependencies as possible? kthx

[11:41] * masak doesn't even care all that much, he just likes it when things are golfed :>

[11:41] <tadzik> ah, masak, asking the hard questions...

[11:41] <masak> life is the hard teacher. I'm just a TA. :P

[11:42] <tadzik> TeAcher? :P

[11:42] <masak> teaching assistant

[11:42] <tadzik> . o O ( You can't have teacher without tea )

[11:42] <masak> tadzik: maybe "amanuensis" or something like that in your quaint language? :P

[11:42] <tadzik> :o

[11:42] <tadzik> An amanuensis (/əˌmænjuːˈɛnsɪs/) is a person employed to write or type what another dictates

[11:43] <tadzik> A student!

[11:43] <masak> haha

[11:43] <tadzik> too often in the school system I'm used too

[11:43] <tadzik> s:2nd/too/to/

[11:44] <tadzik> "Do you want some beer?" "Yeah, give me an IPA" "Do you want some /bɪə(ɹ)/?"

[11:45] <masak> \(ɹ)/

[11:45] <tadzik> ᕕ( ᐛ )ᕗ

[11:46] <masak> tadzik: you brighten my day by just being you. :)

[11:46] <tadzik> ᕕ( ᐛ )ᕗ

[11:46] <tadzik> oops

[11:46] <tadzik> http://media.tumblr.com/tumblr_m7n45immio1r6eqtv.jpg

[11:46] <masak> T.Haha

[11:46] <tadzik> also, look what I found in another window: Stage parse      : Internal error: invalid thread ID in GC work pass

[11:47] <sergot> it's my window, isn't it? :P

[11:47] <sergot> I mean, a windown with a chat with me

[11:47] *** aborazmeh joined
[11:47] *** aborazmeh left
[11:47] *** aborazmeh joined
[11:48] <sergot> tadzik: any ideas? :)

[11:48] <tadzik> no, it looks crazy

[11:49] <tadzik> and yes, it's from your window :)

[11:49] <masak> internal error (c) sergot 2015

[11:50] <sergot> :D

[11:52] <sergot> I can't get my rakudo working :'(

[11:53] *** nbdsp joined
[11:54] <sergot> .seen FROGGS 

[11:54] <yoleaux> I saw FROGGS 08:20Z in #perl6: <FROGGS> moritz: look at visual basic for example

[11:54] <FROGGS> wassup?

[11:55] <sergot> are you aware of anything that could have broken IO::Socket::SSL?

[11:55] <sergot> tadzik's just got this: https://gist.github.com/tadzik/22999b3fbb06069ab994

[11:56] *** yqt left
[11:58] <FROGGS> I can imagine what this is about, yeah

[11:58] <FROGGS> I guess one passes an Int to a subroutine that expects a native int

[11:59] <FROGGS> we should make MoarVM smarter about that

[11:59] <FROGGS> I mean, we can pass Ints to native numeric params as long as these params are not 'is rw'

[12:00] <sergot> thanks FROGGS I will fix it in IO::Socket::SSL as soon as I get my rakodu working

[12:01] <sergot> or, tadzik you can fix it on your own if you're in hurry :)

[12:04] <abraxxa> FROGGS: i'd like to see such a type coercion too

[12:04] <tadzik> sergot: I'll put it on my todo for today :)

[12:05] *** domidumont joined
[12:07] <domidumont> Hello. I trying to build nqp for Debian using a pre-installed moar. The command "perl Configure.pl --backends=moar --with-moar=/usr/bin/moar" works fine (well, it does not complain). But make fails with:

[12:07] <domidumont> make: /home/domi/debian-dev/perl6-stuff/nqp/install/bin/moar: Command not found

[12:07] <domidumont> Any clue ?

[12:08] *** diana_olhovik_ left
[12:08] <sergot> tadzik++ I will try to fix my rakudo anyway

[12:09] <FROGGS> abraxxa: aye

[12:10] *** yqt joined
[12:10] <FROGGS> domidumont: I'll check that, though I cannot do that now sadly :o(

[12:11] <FROGGS> domidumont: can you please open a gh issue? it's easier to track progress there

[12:11] <domidumont> no problem, I have to go back to $work also. What's gh ?

[12:12] <FROGGS> github

[12:12] <domidumont> heh :-)

[12:12] <FROGGS> :o)

[12:12] <FROGGS> domidumont: can I install that moar package somehow? (on my ubuntu box)

[12:13] <domidumont> Best bet is to download Debian source package (still in new queue) and build/install it on your system.

[12:15] <domidumont> well, using debian's git repo is probably faster: git://git.debian.org/git/pkg-rakudo/pkg-moarvm.git

[12:16] <FROGGS> ahh, that's probably what I am looking for... thanks

[12:17] *** rmgk left
[12:19] *** rmgk joined
[12:19] <domidumont> FROGGS: https://github.com/perl6/nqp/issues/231

[12:21] *** laouji_ left
[12:35] *** vendethiel joined
[12:38] *** caymanboy left
[12:42] *** cognominal left
[12:52] <tadzik> FROGGS: I wonder if the concepts of panda's --prefix and DESTDIR are even valid now that eleven is out

[12:53] <tadzik> or they just need to work a little bit differently

[12:53] *** mr-foobar left
[12:55] <FROGGS> tadzik: I dunno, really :o(

[12:55] <tadzik> :)

[12:55] <tadzik> something to talk about on perla

[12:55] <tadzik> perlqa*

[12:55] <FROGGS> my head is somewhere else right now, and I wish it were not

[12:55] <FROGGS> yeah

[12:57] *** chenryn left
[12:59] *** vendethiel left
[12:59] <tadzik> ohh, another precomp bug, this time in jvm %)

[13:01] *** Ven left
[13:04] *** vendethiel joined
[13:12] *** RabidGravy joined
[13:14] *** Irinaioana joined
[13:19] *** aborazmeh left
[13:19] *** Ven joined
[13:20] *** Irinaioana left
[13:24] *** vendethiel left
[13:26] *** yqt left
[13:31] *** aborazmeh joined
[13:31] *** aborazmeh left
[13:31] *** aborazmeh joined
[13:33] *** vendethiel joined
[13:34] <RabidGravy> is there a way of making for a module to see if any deprecations have been "raised" ?

[13:34] <yoleaux> 11:14Z <raiph> RabidGravy: http://irclog.perlgeek.de/perl6/2015-02-14#i_10117483

[13:36] <RabidGravy> right

[13:48] <RabidGravy> I think I'll carry on with what I am doing in Process.pm anyway as it's only small and it'll make homedir() work and can get backed out when/if newio gets merged

[13:49] *** skids joined
[13:51] <RabidGravy> is there a general injunction against using NativeCall in the rakudo core library? or is that no-one has got round to doing so?

[13:52] <RabidGravy> I think any implementation of $*HOME would enormously benefit from getpwuid() ;-)

[13:53] <arnsholt> I think using NativeCall in the core is probably a smell

[13:53] <arnsholt> If there's something you'd need NativeCall for, we're gonna want to support for it in NQP

[13:54] <moritz> +1

[13:54] *** mr-foobar joined
[13:54] <RabidGravy> that was my suspicion

[13:58] *** lolisa joined
[13:59] <RabidGravy> Anyhoo I have:

[13:59] <RabidGravy> [jonathan@coriolanus rakudo]$ ./perl6

[13:59] <RabidGravy> > say $*HOME;

[13:59] <RabidGravy> "/home/jonathan".IO

[13:59] <RabidGravy> > homedir("/tmp");

[13:59] <RabidGravy> "/tmp".IO

[14:00] <RabidGravy> versus

[14:00] <RabidGravy> > say $*HOME;

[14:00] <RabidGravy> Dynamic variable $*HOME not found

[14:00] <RabidGravy>   in method gist at src/gen/m-CORE.setting:15985

[14:00] <RabidGravy>   in sub say at src/gen/m-CORE.setting:18823

[14:00] <RabidGravy>   in block <unit> at <unknown file>:1

[14:00] <RabidGravy> > homedir("/tmp");

[14:00] <RabidGravy> Dynamic variable $*HOME not found

[14:00] <RabidGravy>   in method <anon> at src/gen/m-CORE.setting:15989

[14:00] <RabidGravy>   in any find_method_fallback at src/gen/m-Metamodel.nqp:2908

[14:00] <RabidGravy>   in any find_method at src/gen/m-Metamodel.nqp:1052

[14:00] <RabidGravy>   in sub homedir at src/gen/m-CORE.setting:18988

[14:00] <RabidGravy>   in block <unit> at <unknown file>:1

[14:00] *** Alina-malina left
[14:01] *** Alina-malina joined
[14:03] *** skids left
[14:03] *** mr-foobar left
[14:06] <[ptc]> does anyone use the --with-moar option when configuring nqp?

[14:07] *** mr-foobar joined
[14:08] <RabidGravy> just PR'd that with https://github.com/rakudo/rakudo/pull/406

[14:13] <lizmat> RabidGravy: there's $*DISTRO.is-win

[14:14] <lizmat> also, I would drop the check on definedness...now that "0" is true

[14:14] *** aborazmeh left
[14:15] <lizmat> if %*ENV<HOME> -> $home { $HOME = $home } elsif $*DISTRO.is-win { $HOME = .... }

[14:15] * sjn is looking forward to the qa hackathon, to hack on install/deploy stuff with lizmat and FROGGS and tadzik and anyone else :)

[14:16] *** pecastro joined
[14:16] <RabidGravy> lizmat++ # cheers

[14:18] <lizmat> afk again&

[14:21] <RabidGravy> I'll redo that PR after I've tested

[14:21] <RabidGravy> but y'know MacGyver is on and all

[14:25] <RabidGravy> done

[14:28] *** eternaleye joined
[14:33] *** espadrine left
[14:35] *** caymanboy joined
[14:41] *** espadrine joined
[14:41] *** vendethiel left
[14:45] *** vendethiel joined
[14:48] *** Ven left
[14:54] *** fhelmberger left
[14:54] *** molaf_ joined
[14:55] *** espadrine left
[14:56] *** fhelmberger joined
[14:57] *** molaf__ left
[14:58] * [Coke] wonders if any of the regulars have Diabetes.2, like Coke.

[15:00] *** fhelmberger left
[15:01] <domidumont> [ptc]: I've tried --with-moar and filled https://github.com/perl6/nqp/issues/231

[15:02] *** nornagest joined
[15:03] <nornagest> hi

[15:05] <tadzik> hello nornagest 

[15:05] <[ptc]> domidumont: ah, that's good to know.  I've managed to work out what's going wrong, but it'll be a while before I can make the relevant PR

[15:06] <[ptc]> domidumont: the issue is that the variable set in --with-moar isn't used to set any Makefile variables...  Hence even though --with-moar sets a configuration variable (and correctly), it still has no effect

[15:07] *** yvan1 left
[15:07] *** grondilu joined
[15:08] <[ptc]> domidumont: after having set the variable in the relevant Makefile.in file, NQP still can't compile since the Makefile.in assumes a path to an installed MoarVM and thus can't find files such as lib/MAST/Ops.nqp

[15:08] <[ptc]> domidumont: thus there's a bit of yak shaving to do before --with-moar will actually work

[15:09] * grondilu was looking at http://rosettacode.org/wiki/SHA-256#Perl_6 and tried to replace @Z = @Z Z[m+] @h by @Z [Z[m+]]= @h.  Amazingly enough, it worked.

[15:09] *** aborazmeh joined
[15:09] *** aborazmeh left
[15:09] *** aborazmeh joined
[15:09] <domidumont> [ptc]: right... unfortunately, this feature is required to provide nqp with moar for Debian. So an update of nqp package on Debian will be delayed until this problem is fixed

[15:09] *** vendethiel left
[15:11] <FROGGS> [ptc] / domidumont: what do we want here? additional option like --moar-libs= or MOARVM_LIBS env vars?

[15:11] <FROGGS> options*

[15:11] <domidumont> FROGGS: options are easier to handle in debian/rules

[15:11] <FROGGS> because I guess /usr/lib/MAST/Ops.nqp is not what you want

[15:11] <[ptc]> domidumont: hrm, that's strange as I've got nqp, moar, rakudo working for debian

[15:12] <[ptc]> domidumont: have a look in the os-build project for the (currently still very rough) control files

[15:12] <domidumont> [ptc]: you have the old versions (~ 2014.07) based on parrot. I'm working on the next version based on moar and nqp 2015.03 (as [email@hidden.address]
[15:13] <[ptc]> FROGGS: --moar-libs could help; I got things to build and test by hacking Makefile-Moar.in, editing the Makefile after it was built, and running Configure.pl as well as make with an updated LD_LIBRARY_PATH

[15:13] *** Rounin left
[15:13] <[ptc]> domidumont: no I don't have the old versions; I've updated them to use moar and nqp on 2015.03, just like you :-)

[15:13] <[ptc]> I've even got .debs floating around, however noone seems to want to test them for me

[15:13] <FROGGS> domidumont: so we need to get the install locations straight first for moarvm, before we can tackle nqp...

[15:14] <domidumont> ah ok.

[15:14] <[ptc]> ... well other than the tests that I've done

[15:14] <domidumont> FROGGS: so you mean that moar package sitting in debian new queue will need an update ?

[15:15] <[ptc]> domidumont: do you want any help, or any information from what I've learned?  It doesn't making sense with several people reinventing the wheel

[15:15] <FROGGS> domidumont: depends... where does it install install lib/MAST/Ops.nqp to?

[15:15] <FROGGS> s/install//

[15:15] *** Ven joined
[15:15] <domidumont> FROGGS: /usr/share/nqp/lib/MAST/Ops.nqp

[15:16] <[ptc]> domidumont: I managed to get everything to install under /usr in the debs that I built, however one big problem was a weird /usr/languages directory which gets installed.

[15:16] <[ptc]> domidumont: I'm pretty sure Debian isn't going to like that hanging around...

[15:17] *** Ven left
[15:17] <domidumont> [ptc]: indeed :-)

[15:18] <FROGGS> [ptc]: that has changed recently due to moritz++

[15:18] *** cognominal joined
[15:18] <[ptc]> domidumont: btw: the plan with the os-build repo (under the perl6/ project on github) was to collect all os-releated build scripts in one location

[15:18] <dalek> rakudo/nom: 0b1e4f1 | peschwa++ | t/02-rakudo/repl.t:

[15:18] <dalek> rakudo/nom: Add a few REPL tests.

[15:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0b1e4f171c

[15:19] <psch> hi #perl6 \o

[15:19] <[ptc]> domidumont: we already have files to build arch linux stuff, and things are in place to get Fedora RPMs working as well

[15:19] <[ptc]> domidumont: I just haven't had time recently to focus on that

[15:19] <FROGGS> hi psch 

[15:19] <[ptc]> FROGGS: ah, cool, that's good to know :-)

[15:19] <[ptc]> afk

[15:20] *** vendethiel joined
[15:20] *** aborazmeh left
[15:22] <domidumont> [ptc]: well, having the same repo for upstream and Debian package file is a work in progress. Some debian tools still need some work for that.

[15:23] <domidumont> [ptc] there's some tricky setup also: nqp master branch from your point of view must end up in upstream branch from my point of view. master is used for debian activities...

[15:24] <domidumont> [ptc] I'll think about it. I must get up-to-speed with the current state of the art regarding sharing a repo between upstream and Debian

[15:25] *** tinyblak left
[15:25] *** chenryn joined
[15:30] *** Ven joined
[15:32] <dalek> nqp: 16df8ce | paultcochrane++ | t/nqp/ (2 files):

[15:32] <dalek> nqp: Unlink temporary file after having used it in tests

[15:32] <dalek> nqp: 

[15:32] <dalek> nqp: This prevents a dirty working directory after having run the test suite.

[15:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/16df8ce14d

[15:32] <dalek> nqp: bbeb540 | paultcochrane++ | t/nqp/ (2 files):

[15:32] <dalek> nqp: Convert tmp_file variable to kebab-case

[15:32] <dalek> nqp: 

[15:32] <dalek> nqp: This is merely to be consistent with other variable names in the same files.

[15:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bbeb540a31

[15:32] <dalek> nqp: 8128fa0 | moritz++ | t/nqp/ (2 files):

[15:32] <dalek> nqp: Merge pull request #232 from paultcochrane/pr/unlink_tmp_file_after_tests

[15:32] <dalek> nqp: 

[15:32] <dalek> nqp: Unlink tmp file after tests

[15:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8128fa0f1e

[15:33] *** zakharyas left
[15:38] *** tinyblak joined
[15:38] <hoelzro> o/ #perl6

[15:40] <domidumont> [ptc]: err, forget what I said about shared repo, os-build repo does not fit this kind of setup.

[15:40] <[ptc]> domidumont: I'm also not sure about how to share things between upstream and Debian

[15:41] <[ptc]> domidumont: there was a discussion on irc a few weeks ago about where to put this kind of stuff and we came up with the os-build repo

[15:42] <TimToady> for fixing ([] ... []) I found a workaround to the **@lol problem

[15:42] <TimToady> m: sub foo (**@lol) { say nqp::iscont(@lol[0]) }; foo((1,2,3),(4,5,6))

[15:42] <camelia> rakudo-moar e28b43: OUTPUT«1␤»

[15:42] <[ptc]> domidumont: that might not be the best idea, however at least we were able to update the Debian control files ourselves and start to bring things back up to date with Rakudo, Moar etc

[15:42] <TimToady> m: sub foo (|lol) { my @lol := lol.list; say nqp::iscont(@lol[0]) }; foo((1,2,3),(4,5,6))

[15:42] <camelia> rakudo-moar e28b43: OUTPUT«0␤»

[15:42] <domidumont> [ptc] it's a good idea, but I'm worried about the work required to keep everything up to date

[15:42] <[ptc]> domidumont: definitely something one needs to think about carefully

[15:42] <[Coke]> NYC, NY, US May 2nd perl hackathon; any sixers in the area, please sign up and come down!

[15:42] <TimToady> but we'll need to figure out whether the **@lol notation should continue to itemize its sublists like that

[15:42] *** vendethiel left
[15:43] <domidumont> [ptc] Be sure that I will pay attention at your work for the next versions of nqp rakudo for Debian

[15:43] <TimToady> I know how to fix that, but lots of other things break when we do, so probably needs to be thunk along with the GLR

[15:43] <domidumont> [ptc] At least add a readme to link the packaging repo you're getting your info from

[15:44] <TimToady> so for now, the |lol workaround...

[15:44] <domidumont> [ptc] for instance git://anonscm.debian.org/pkg-rakudo/pkg-rakudo.git

[15:44] <domidumont> [ptc] gtg

[15:45] <[ptc]> domidumont: ok, thanks!

[15:45] <ugexe> m: my IO::Path $path = "/home/user".IO; $path = $path.resolve; # method resolve(--> IO::Path)

[15:45] <camelia> rakudo-moar e28b43: OUTPUT«Type check failed in assignment to '$path'; expected 'IO::Path' but got 'IO::Path'␤  in block <unit> at /tmp/cPpXnJtHii:1␤␤»

[15:46] <ugexe> am i doing something wrong here?

[15:48] <psch> m: my IO::Path $path = "/home/user".IO;

[15:48] <camelia> rakudo-moar e28b43: OUTPUT«Type check failed in assignment to '$path'; expected 'IO::Path' but got 'IO::Path'␤  in block <unit> at /tmp/7_lBLhwynk:1␤␤»

[15:48] *** domidumont left
[15:48] <ugexe> if i do it via perl6 -e with a perl from yesterday it says 'expected IO::Path but got Str'

[15:49] *** telex left
[15:50] <TimToady> m: my IO::Path $path = "/home/user".IO;

[15:50] <camelia> rakudo-moar 0b1e4f: OUTPUT«Type check failed in assignment to '$path'; expected 'IO::Path' but got 'IO::Path'␤  in block <unit> at /tmp/WryCe03411:1␤␤»

[15:50] <TimToady> that's the part that's failing

[15:50] *** telex joined
[15:51] <TimToady> m: say "/home/user".IO.WHAT;

[15:51] <camelia> rakudo-moar 0b1e4f: OUTPUT«(IO::Path)␤»

[15:51] *** Perl6_newbee joined
[15:51] <TimToady> m: my IO::Path() $path = "/home/user".IO;

[15:51] <camelia> rakudo-moar 0b1e4f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KgxcLTzd66␤IO::Path(Any) cannot be used as a type on a variable␤at /tmp/KgxcLTzd66:1␤------> 3my IO::Path() $path7⏏5 = "/home/user".IO;␤    expecting any of:␤        constraint␤»

[15:51] <ugexe> m: sub p(IO::Path $path) { say $path.WHAT; }; p("/home/user".IO);

[15:51] <camelia> rakudo-moar 0b1e4f: OUTPUT«Type check failed in binding $path; expected 'IO::Path' but got 'IO::Path'␤  in sub p at /tmp/XYk3HA2sGK:1␤  in block <unit> at /tmp/XYk3HA2sGK:1␤␤»

[15:51] <ugexe> ^ that works on my perl6 from yesterday

[15:52] <FROGGS> star-m: sub p(IO::Path $path) { say $path.WHAT; }; p("/home/user".IO);

[15:52] <camelia> star-m 2013.03: OUTPUT«Type check failed in binding $path; expected 'IO::Path' but got 'IO::Path'␤  in sub p at /tmp/mY019NWIw9:1␤  in block <unit> at /tmp/mY019NWIw9:1␤␤»

[15:52] <ugexe> if i add the $path = $path.resolve inside the sub p though, i get the type error

[15:53] <moritz> oh, I'm glad we're not the only ones that fail handling of recursive data structures

[15:53] * TimToady is not really awake/well enough yet to help much

[15:54] <moritz> python's unittest.TestCase method assertEqual reaches max recursion depth quickly for cycle data structures

[15:54] <moritz> s/recursive/cyclic/

[15:57] *** Ven left
[15:58] *** gfldex joined
[15:58] *** pecastro left
[15:59] <ugexe>  perl6 -e 'sub p(IO::Path $path) { say $path.WHAT; }; p("/home/user".IO);'                 (IO::Path)

[15:59] <ugexe> nickl@localhost:~/.rakudobrew/moar-nom$ git show

[15:59] <ugexe> commit 2cb72b2141f2e37c0df4fb04fc2f5b68e34cdf01

[15:59] *** vendethiel joined
[16:01] *** raiph left
[16:01] <ugexe> there was a commit related to type errors by jnthn on april 12

[16:02] <ugexe> still something funny going on before that though:

[16:02] <ugexe> nickl@localhost:~/.rakudobrew/moar-nom$ perl6 -e 'sub p(IO::Path $path is copy) { say $path.WHAT; $path = $path.resolve }; p("/home/user".IO);'

[16:02] <ugexe> (IO::Path) \n Type check failed in assignment to '$path'; expected 'IO::Path' but got 'Str'

[16:05] *** lolisa left
[16:05] *** spider-mario joined
[16:07] <raydiak> m: '.'.IO.resolve.WHAT.say

[16:07] <camelia> rakudo-moar 0b1e4f: OUTPUT«(Str)␤»

[16:09] <ugexe> .resolve is supposed to return a IO::Path

[16:10] <raydiak> yep

[16:11] *** FROGGS left
[16:11] *** chenryn left
[16:18] *** eli-se joined
[16:21] *** chenryn joined
[16:25] *** tinyblak left
[16:26] *** chenryn left
[16:27] *** chenryn joined
[16:28] *** aborazmeh joined
[16:28] *** aborazmeh left
[16:28] *** aborazmeh joined
[16:34] *** cognominal left
[16:36] *** abraxxa left
[16:38] *** cognominal joined
[16:41] *** aborazmeh left
[16:44] *** mr-foobar left
[16:51] <dalek> perl6-roast-data: 7d82b5c | coke++ | / (9 files):

[16:51] <dalek> perl6-roast-data: today (automated commit)

[16:51] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/7d82b5cfb2

[16:52] <[Coke]> no change in nqp test or rakudo spectest

[16:53] <RabidGravy> yep, the resolve method will return a String

[16:54] *** dakkar left
[16:56] <ugexe> ive regressed to march 30 and .resolve is still returning a string

[16:56] <ugexe> anyone know if it ever returned an IO::Path?

[16:58] <[Coke]> er, not true, some changes. S12-attributes/native.t stopped failing, added all the jnthn NF* tests.

[16:59] *** chenryn left
[16:59] <PerlJam> ugexe: looks like it was implemented at 61c59db4d5ac491d730311fbabb4ead71ec8798a and it returned a string then

[16:59] <ugexe> heh i was looking at that

[17:00] <RabidGravy> to be fair I can't even find the method documented

[17:02] <PerlJam> RabidGravy: S16:399

[17:02] <synbot6> Link: http://design.perl6.org/S16.html#line_399

[17:03] <raydiak> also http://design.perl6.org/S32/IO.html#.resolve

[17:03] <PerlJam> yep

[17:04] <PerlJam> S32:IO/951  # test

[17:04] <synbot6> Link: http://design.perl6.org/S32.html#IO

[17:04] <PerlJam> oops

[17:04] <PerlJam> S32/IO:951

[17:04] <synbot6> Link: http://design.perl6.org/S32/IO.html#line_951

[17:05] <PerlJam> that's some dyslexia I have with symbols :)

[17:05] <raydiak> S32/IO:.resolve ?

[17:05] <raydiak> guess not :)

[17:06] <RabidGravy> got it

[17:07] *** synbot6 left
[17:07] *** synbot6 joined
[17:08] <PerlJam> S32/IO:.resolve

[17:08] <synbot6> Link: http://design.perl6.org/S32/IO.html#.resolve

[17:08] <TimToady> .oO(the 6th voyage of synbot)

[17:08] <timotimo> ooooh a synbot <3

[17:08] <PerlJam> S32/IO:move()

[17:08] <synbot6> Link: http://design.perl6.org/S32/IO.html#move()

[17:08] <timotimo> meh, that doesn't turn into a single link in my terminal

[17:08] <timotimo> only the ( is linkified, not the )

[17:08] <PerlJam> timotimo: yeah, I just discovered that here to

[17:08] <PerlJam> er, too

[17:09] <PerlJam> but you can still copy and paste it as needed

[17:10] *** risou is now known as risou_awy

[17:10] *** beastd joined
[17:10] <timotimo> sure

[17:10] <timotimo> i just put the ) in the url manually

[17:10] *** risou_awy is now known as risou

[17:10] *** Perl6_newbee left
[17:14] *** mohij joined
[17:18] *** n0vacane joined
[17:18] *** kinslayer left
[17:19] *** n0vacane left
[17:22] <vendethiel> m: List[::T]{}; role Functor[::T where ???] {}; # how do I assure that List is a higher-order type? can I do that?

[17:22] <camelia> rakudo-moar 0b1e4f: OUTPUT«===SORRY!===␤Could not locate compile-time value for symbol T␤»

[17:23] *** KCL joined
[17:24] <vendethiel> m: List[::T]{submethod BUILD{say 'hi'~T.WHAT.perl;}}; role Invoke[::F, ::T] { method new { F[T].new; } }; Invoke[List, Int].new;

[17:24] <camelia> rakudo-moar 0b1e4f: OUTPUT«===SORRY!===␤Could not locate compile-time value for symbol T␤»

[17:24] <vendethiel> aw :[

[17:24] <moritz> vendethiel: are you trying to declare role List?

[17:24] <moritz> vendethiel: or are you trying to use it?

[17:24] *** mr-foobar joined
[17:25] <vendethiel> m: role List[::T]{submethod BUILD{say 'hi'~T.WHAT.perl;}}; role Invoke[::F, ::T] { method new { F[T].new; } }; Invoke[List, Int].new;

[17:25] <camelia> rakudo-moar 0b1e4f: OUTPUT«===SORRY!===␤Cannot find method 'parameterize'␤»

[17:25] <vendethiel> moritz: thanks!

[17:26] *** tinyblak joined
[17:26] *** KCL_ left
[17:27] <moritz> vendethiel: and, uhm, don't name a role List; that's a built-in type that the compiler references, and "funny" things are bound to happen when you override that without adhering to the core List API

[17:27] <vendethiel> m: role C[::T]{submethod BUILD{say 'hi'~T.WHAT.perl;}}; role Invoke[::F, ::T] { method new { F[T].new; } }; Invoke[C, Int].new;

[17:27] <camelia> rakudo-moar 0b1e4f: OUTPUT«===SORRY!===␤Cannot find method 'parameterize'␤»

[17:31] *** tinyblak left
[17:35] * masak .oO( don't name it X, don't name it List... the compiler gets all the good names! ) :P

[17:40] * PerlJam looks into the future and see that as the subject of an anti-p6 rant

[17:40] <PerlJam> s/see/sees/

[17:40] *** lucasb joined
[17:41] * masak .oO( oh yes, we luuurv lexical scoping. except for package-like things, which are global names )

[17:41] <TimToady> you can still declare it 'my' if you like

[17:42] <TimToady> m: my role List[::T]{submethod BUILD{say 'hi'~T.WHAT.perl;}}; my role Invoke[::F, ::T] { method new { F[T].new; } }; Invoke[List, Int].new;

[17:42] <camelia> rakudo-moar 0b1e4f: OUTPUT«===SORRY!===␤Cannot find method 'parameterize'␤»

[17:42] <TimToady> though I guess it doesn't help much here

[17:43] <PerlJam> All programming languages have a bias that they impose upon the programmer.  In Perl, the bias is that the programmer must *think* about what they are doing.   ;-)

[17:44] <itz_> jnthn: pl6anet.org is fixed (wordpress uses https now) .. sorry for delay I was behind corporate wall from hell

[17:44] *** eli-se left
[17:52] <ugexe> https://github.com/ugexe/rakudo/commit/4330f86cc81a7b452ad9cd861798adc3ed0eebfc this seems like it fixes the .resolve stuff

[17:54] <ugexe> probably overlooking something, but at least it looks easy enough to fix

[17:59] <raydiak> ugexe++

[18:00] <ugexe> im mostly unsure if i should be using absolute or not

[18:01] *** Ven joined
[18:08] <masak> jnthn: on consideration, I suspect you're right about RT #123894

[18:08] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123894

[18:08] <masak> synbot6! \o/

[18:09] <masak> jnthn: S04 says "C<FIRST>, C<NEXT>, and C<LAST> are meaningful only within the lexical scope of a loop, and may occur only at the top level of such a loop block."

[18:09] <masak> which could (easily) be taken to apply here, and actually make the ENTER { ...; NEXT { ... } } nesting illegal.

[18:09] <masak> (which is too bad, 'cus it was cute. but at least it's spec.)

[18:13] *** Foxcool_ joined
[18:18] *** FROGGS joined
[18:18] <vendethiel> ENTER { my Lock $lock .= new; NEXT { $lock.release } } #*g*

[18:19] *** yqt joined
[18:19] <masak> yeah, that's the essence of what I was doing.

[18:25] *** yvan1 joined
[18:26] <ugexe> m: my $io = "foo/./bar/..".IO.resolve; say $io;

[18:26] <camelia> rakudo-moar 0b1e4f: OUTPUT«/home/camelia/foo/bar/..␤»

[18:27] *** Ven left
[18:27] <ugexe> is that correct?

[18:29] <lucasb> Does resolve makes absolute? If not, then I would expect just "foo", right?

[18:29] <masak> "foo/"

[18:29] <lucasb> foo o/

[18:29] <lucasb> :)

[18:29] <ugexe> # bar is a symlink pointing to "/baz" my $io = "foo/./bar/..".IO.resolve;  # now "/" (the parent of "/baz")

[18:30] <ugexe> actually creating the symlinks doesn't change anything from camelias output

[18:30] <masak> m: say "f{"o" x $_} o/" for 0..*

[18:30] <FROGGS> masak: $_ in there is buggy

[18:30] <camelia> rakudo-moar 0b1e4f: OUTPUT«(timeout)f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f o/␤f …»

[18:30] <masak> so it is.

[18:30] <masak> hm.

[18:31] <masak> m: say "f$("o" x $_) o/" for 0..*

[18:31] <camelia> rakudo-moar 0b1e4f: OUTPUT«(signal XFSZ)f o/␤fo o/␤foo o/␤fooo o/␤foooo o/␤fooooo o/␤foooooo o/␤fooooooo o/␤foooooooo o/␤fooooooooo o/␤foooooooooo o/␤fooooooooooo o/␤foooooooooooo o/␤fooooooooooooo o/␤foooooooooooooo o/␤fooooooooooooooo o/␤foooooooooo…»

[18:31] *** domidumont joined
[18:31] <masak> \o/

[18:31] <masak> only known good use of $() :)

[18:32] <FROGGS> $(:-)

[18:33] <masak> that dollar hat suits you

[18:33] <cognominal> perljam: in most languages, there is a good way to do things that may be excellent but get in the way if you are not proficient enough. Very often, in Perl, my first idea is good enough meaning perfect for a kleenex script.

[18:35] <bobkare> I've been playing around with some parsing, but I keep stumbling on something I assume is pretty basic and simple. I can't seem to get an array to flatten out so I can pass it to a constructor, as seen in method TOP here: http://pastebin.com/KtbXKj2M

[18:38] *** rurban_ left
[18:41] *** lichtkind joined
[18:42] <PerlJam> bobkare: looks like you're making an array of strings rather than an array of Test::Foo  (as you've declared @!foos to be)

[18:42] *** domidumont left
[18:44] <bobkare> PerlJam: Huh? the debug print output of Foo AST: [[Test::Foo.new(foo => "bar "), Test::Foo.new(foo => "baz")]]<> makes me think it isn't strings

[18:44] <TimToady> does it work any better with .list.flat instead of just .flat?

[18:44] <PerlJam> yeah, I'm apparently not fully awake right now, sorry

[18:45] <bobkare> TimToady: nope, exactly same results

[18:46] <TimToady> well, seems like that constructor can't take a list because it's itemizing the array or so then

[18:47] <TimToady> either that or it's passing in an AoA somehow, but I don't see how

[18:49] <bobkare> It looks like it's becoming an AoA, if I replace the assignment to @a with this: my @a = [Test::Foo.new(foo => "bar "), Test::Foo.new(foo => "baz")].flat; it works. Add the extra set of brackets from the debug output and it fails.

[18:49] <TimToady> otoh, maybe it's just our typing of arrays difficulty

[18:50] <TimToady> and it wants Array[Test::Foo], not Array

[18:50] <TimToady> if you have access to the class code, take off the array type and see if it works

[18:51] <TimToady> oh, there it is, right there

[18:51] <TimToady> so change it to has Test::Foo @.foos;

[18:51] <TimToady> er

[18:51] <TimToady> has @.foos;

[18:51] <TimToady> or hash @.foos where all(Test::Foo) or some such

[18:52] <TimToady> since jnthn++ just fixed that (or was that in a branch?)

[18:52] <bobkare> That kinda works, but leaves foos as AoA which isn't what I want

[18:54] <ugexe> my @a = $<foo>».made>>.flat; ?

[18:54] <ugexe> Test::Result.new(foos => Array[Test::Foo].new(Test::Foo.new(foo => "bar "), Test::Foo.new(foo => "baz")))

[18:56] <ugexe> s/>>//

[18:56] <bobkare> Yes, finally something that works! ugexe++

[18:57] <bobkare> not without the extra » though, then it continues to throw the type check failure at me

[18:58] <vendethiel> m: $(4) ==> my $a; say $a # masak <- another *great* use of $().

[18:58] <camelia> rakudo-moar 0b1e4f: OUTPUT«4␤»

[18:59] <PerlJam> I guess that makes sense.   foo is plural in the regex, so you get an array of whatever each .foo creates, which is an Array of Test::Foo;

[18:59] *** eli-se joined
[19:02] *** perl666 joined
[19:02] *** perl666 left
[19:03] <bobkare> Oh, right, so I had » making a list of arrays and .flat needed to be applied to all the inner arrays of Test::Foo. I get it now.

[19:04] <eli-se> hi!!!

[19:04] * bobkare goes back to fix that in his real test script, which at this point is a rats mess with debug statements and extra .flat and .list calls added at random all over the place

[19:05] <PerlJam> bobkare: maybe printing   $<foo>.perl  and $<foo>».made.perl  (before the assignment to @a) would have helped?

[19:05] <FROGGS> hi eli-se 

[19:07] <PerlJam> bobkare: and/or put more than one foo-thing in your string to parse.  :)

[19:08] <vendethiel> o/ eli-se

[19:08] <timotimo> TimToady: do you know how big the performance improvement from $sawcaps was?

[19:09] *** virtualsue joined
[19:09] <FROGGS> ohh, it's Monday again :o)

[19:09] * moritz guesses timotimo++ will want to write about http://examples.perl6.org/

[19:11] <timotimo> oh, cool!

[19:11] <timotimo> huh, yahtzee.p6 seems to have the source code twice

[19:12] <timotimo> same thing for wizard.pl

[19:13] *** skids joined
[19:15] <timotimo> TimToady: is it just "a few %s" as stated in the very first commit regarding it?

[19:16] *** lucasb left
[19:17] <TimToady> I was picking up about 5% +/- 2% on a somewhat noisy system

[19:17] <TimToady> that's on stage parse, but that's been a rather noisy number lately for some reason

[19:18] * TimToady didn't bother turning off temp throttling, for instance

[19:18] <TimToady> but I ran it several times

[19:21] <timotimo> OK

[19:23] <timotimo> my desktop computer is not assembled/set up at the moment, so i'll have to wait a bit until i can run proper benchmarks again

[19:24] <timotimo> especially since the spec tests are a very bad place to test my recent reprop devirtualization work with

[19:27] *** Possum left
[19:28] *** Possum joined
[19:32] *** cschwenz left
[19:36] *** kaare_ left
[19:45] *** Sqirrel joined
[19:46] <timotimo> m: say <4+3i>.WHAT

[19:46] <camelia> rakudo-moar 0b1e4f: OUTPUT«(Complex)␤»

[19:49] *** rurban_ joined
[19:51] <masak> m: say <+4+3i>.WHAT

[19:51] <camelia> rakudo-moar 0b1e4f: OUTPUT«(Complex)␤»

[19:56] <dalek> rakudo/nom: 872d74c | TimToady++ | src/Perl6/Actions.nqp:

[19:56] <dalek> rakudo/nom: don't cache Rat literals

[19:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/872d74cd2c

[19:56] <dalek> rakudo/nom: af9a7ca | TimToady++ | src/core/operators.pm:

[19:56] <dalek> rakudo/nom: regularize list of list semantics of infix:<...>

[19:56] <dalek> rakudo/nom: 

[19:56] <dalek> rakudo/nom: All confusion between iscont and decont values is fixed, I hope.

[19:56] <dalek> rakudo/nom: []...[] now works and produces a list containing a single [].

[19:56] <dalek> rakudo/nom: () is now disallowed as either a start value or an endpoint.

[19:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af9a7caa1d

[19:56] <dalek> rakudo/nom: 49f168e | TimToady++ | src/core/operators.pm:

[19:56] <dalek> rakudo/nom: oops, don't use .elems to test for non-empty

[19:56] <dalek> rakudo/nom: 

[19:56] <dalek> rakudo/nom: (especially on lists that might not know their infinite)

[19:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49f168e42d

[19:56] <vendethiel> (s/their/they're/ :P)

[19:57] *** DrForr joined
[19:57] <TimToady> s/infinite/infinitenesslessness/

[19:58] <vendethiel> fun word!

[20:00] <DrForr> eval: "foo" ~~ /<[\x{0041}..\x{007f}]>/

[20:01] <DrForr> Or is it 'm:' to invoke the bot, I've lost backlog here.

[20:01] <vendethiel> it's m for rakudo-moar :)

[20:01] <DrForr> m: "foo" ~~ /<[\x{0041}..\x{007f}]>/

[20:01] <camelia> rakudo-moar 0b1e4f: OUTPUT«5===SORRY!5===␤Illegal reversed character range in regex: }..\x␤at /tmp/13KfIro5ta:1␤------> 3"foo" ~~ /<[\x{0041}..\x{007f}]7⏏5>/␤Other potential difficulties:␤    Repeated character ({) unexpectedly found in character class␤    at /…»

[20:01] <vendethiel> so you should go for that, unless you want to try other backends (which probably don't work nowadays anyway)

[20:02] <DrForr> Nod. Do I need to do something special to match ranges of Unicode characters? I'll dig in the synopses anyway.

[20:02] <TimToady> m: "foo" ~~ /<[\x[0041]..\x[007f]]>/

[20:02] <camelia> rakudo-moar 0b1e4f: ( no output )

[20:03] <TimToady> m: say "foo" ~~ /<[\x[0041]..\x[007f]]>/

[20:03] <camelia> rakudo-moar 0b1e4f: OUTPUT«｢f｣␤»

[20:03] <FROGGS> "Repeated character ({)" is a good hint

[20:03] <timotimo> can you use this link for previewing my weekly post? https://p6weekly.wordpress.com/?p=480&preview=true&preview_id=480&preview_nonce=5023d4a89f

[20:04] <FROGGS> timotimo: "

[20:04] <FROGGS> Oops! That page can’t be found.

[20:04] <FROGGS> "

[20:04] <timotimo> god fucking damnit wordpress

[20:04] <TimToady> DrForr: in P6 we try to avoid use of {} in spots where it doesn't mean a closure, and [] is the New Grouper in P6 regexen anyway

[20:05] <DrForr> Thanks. I'm back to delving in grammars again.

[20:05] <FROGGS> tadzik: "==> Successfully installed OpenSSL"... how do I reproduce this? https://gist.github.com/tadzik/22999b3fbb06069ab994

[20:05] <timotimo> it seems like they threw out the classic editor

[20:05] <timotimo> and there's no functionality any more to give out a link that lets people provide feedback on a draft post

[20:05] *** darutoko left
[20:07] <ugexe> FROGGS: that looks like its from an old rakudo

[20:07] <ugexe> i had that problem last week? and you fixed it

[20:08] <FROGGS> ugexe: well, I'd guessed that tadzik would upgrade before posting it...

[20:08] <timotimo> https://gist.githubusercontent.com/timo/f4e54c2e93703a8584ba/raw/dcab8f99f83c2dbbbc54629a7be57d70931aa71e/gistfile1.txt - feedback on my weekly post pls

[20:09] * timotimo will be AFK for a bit

[20:09] <dalek> roast: d962576 | TimToady++ | S03-sequence/ (2 files):

[20:09] <dalek> roast: tweaks for recent sequence changes

[20:09] <dalek> roast: review: https://github.com/perl6/roast/commit/d962576dd4

[20:10] <ugexe> well, ive had situations where rakudobrew messed up updating silently. so at least there is an excuse

[20:11] <DrForr> m: say "\x[236a]"

[20:11] <camelia> rakudo-moar 0b1e4f: OUTPUT«⍪␤»

[20:12] <ugexe> i wonder if it would be useful to put the perl -v in the Failure Summary

[20:12] <DrForr> m: say "\x{236a}"

[20:12] <camelia> rakudo-moar 0b1e4f: OUTPUT«5===SORRY!5===␤Unrecognized backslash sequence: '\x'␤at /tmp/UVzqPRUPEu:1␤------> 3say "\7⏏5x{236a}"␤Missing block␤at /tmp/UVzqPRUPEu:1␤------> 3say "\x{2367⏏5a}"␤    expecting any of:␤        whitespace␤␤»

[20:14] <TimToady> "Missing block" is rather wrong

[20:14] <psch> could be an artifact of my bad cheat for moreinput i think

[20:15] <TimToady> it's probably worth a .obs to catch this particular p5 carryover

[20:16] <DrForr> Also in passing, 'repeated character', while correct, isn't terribly edifying, though at this late hour I can't come up with a good wording.

[20:17] <FROGGS> timotimo: you could perhaps mention the perl6-gdb-m and perl6-valgrind-m runners...

[20:17] <nwc10> about 16 minutes, I think, http://www.spacex.com/webcast/

[20:17] <masak> nwc10++

[20:18] <FROGGS> but timotimo++ besides that :oO)

[20:18] <FROGGS> err, -O

[20:18] <TimToady> DrForr: the message usually shows up when someone says <[ "foo" | "bar" ]> or so

[20:18] <RabidGravy> nwc10++ # had forgotten

[20:18] *** rindolf left
[20:19] <DrForr> Aha.

[20:19] <TimToady> m: /<["foo"]>/

[20:19] <camelia> rakudo-moar 0b1e4f: OUTPUT«Potential difficulties:␤    Repeated character (") unexpectedly found in character class␤    at /tmp/IIOoj23v9M:1␤    ------> 3/<7⏏5["foo"]>/␤    Repeated character (o) unexpectedly found in character class␤    at /tmp/IIOoj23v9M:1␤    --…»

[20:19] <DrForr> Incidentally I'll be damned, the ECMAscript parser actually compiles now.

[20:20] <TimToady> well, you're in transylvania, what did you expect?

[20:20] <DrForr> More transvestites.

[20:21] <DrForr> (/Rocky Horror Picture Show/ reference, if that wasn't clear :) )

[20:23] *** Ven joined
[20:23] <masak> I don't think I'll ever tire of launches.

[20:23] <dalek> rakudo/nom: cc3e654 | peschwa++ | src/Perl6/Grammar.nqp:

[20:23] <dalek> rakudo/nom: Remove a few moreinput related bits.

[20:23] <dalek> rakudo/nom: 

[20:23] <dalek> rakudo/nom: It's not working well enough to be worth the troubles it shows.  Add to that

[20:23] <dalek> rakudo/nom: the fact that there shouldn't be any troubles and it should go back to

[20:23] <dalek> rakudo/nom: something that at least works for all other use-cases, if only limited for

[20:23] <dalek> rakudo/nom: multiline REPL input.

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc3e65405c

[20:24] <psch> eh

[20:24] <psch> i wanted to spectest first but got distracted :/

[20:24] <psch> i'll do that now

[20:34] <masak> aww

[20:34] <RabidGravy> nwc10: scrubbed due to weather :-(

[20:34] <masak> you will not go to space today

[20:34] <nwc10> try again tomorrow

[20:34] <masak> yeah

[20:34] <masak> ok, let me cheer you up with

[20:34] <RabidGravy> wanted to see the landing attempt

[20:34] <masak> today's mini-challenge :)

[20:34] <nwc10> me too

[20:34] <masak> solve http://www.theguardian.com/science/alexs-adventures-in-numberland/2015/apr/13/can-you-solve-the-singapore-primary-maths-question-that-went-viral using Perl 6 ;)

[20:35] <ugexe> hmmm Digest is failing tests on JVM today

[20:35] <ugexe> sub infix:<⊞>(\x, \y)    {  (x + y) % 2**32 } seems like unicode infix stuff

[20:37] <ugexe> or Nil related

[20:39] <FROGGS> ugexe: Digest always failed on JVM: http://testers.perl6.org/dist/D/Digest/Lucien%20Grondin.html

[20:41] <ugexe> ah. i could have swore i had openssl build on jvm sometime recently. too much caffeine this month apparently

[20:42] <FROGGS> m: my @a = <foo bar baz>; map( { s/a/A/ }, @a ); say @a;

[20:42] <camelia> rakudo-moar 49f168: OUTPUT«foo bar baz␤»

[20:42] <FROGGS> is that still supposed to change the content of the array? RT #116731

[20:42] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=116731

[20:42] <[Coke]> ugexe: you take that back.

[20:42] <timotimo> FROGGS: nothing like "VALGRINDARGS" or so for the launchers?

[20:42] <[Coke]> . o O (too much caffeine? heresy!)

[20:43] <ugexe> [Coke]: not till tomorrow morning

[20:43] <FROGGS> timotimo: I don't know... did you add it?

[20:43] <timotimo> no

[20:43] <FROGGS> s/did/didn't/

[20:43] <FROGGS> me neither...

[20:43] <timotimo> OK

[20:44] <timotimo> may be a thing to add later on

[20:44] <FROGGS> also the --cleanup-on-exit option or what it is called

[20:44] <FROGGS> I really thought you wanted to do it

[20:44] <timotimo> oh

[20:45] <timotimo> moi? :)

[20:45] <FROGGS> like with my wife... where "We should do X." means "DO X NAO!"

[20:46] <tadzik> FROGGS: huh, let me see. I thought I have it all up-to-date...

[20:58] <timotimo> well, at least the post is published now

[21:00] <psch> timotimo++ # great title

[21:01] <FROGGS> timotimo++

[21:01] <dalek> rakudo/nom: 8b639ba | TimToady++ | src/Perl6/Grammar.nqp:

[21:01] <dalek> rakudo/nom: catch use of braces on escapes

[21:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b639ba6f0

[21:04] <TimToady> timotimo: there's no h in jnthn's name, except for the second one

[21:05] <TimToady> also, nothing gets flipped when the length is known

[21:06] <tadzik> FROGGS: ...ok, it actually works

[21:06] <tadzik> must be me being stupid

[21:08] *** skids left
[21:09] *** rurban_ left
[21:10] <FROGGS> tadzik: that's actually the better option :o)

[21:13] <masak> 'night, #perl6

[21:14] *** risou is now known as risou_awy

[21:14] <tadzik> :)

[21:14] <tadzik> gnight masak 

[21:14] *** risou_awy is now known as risou

[21:16] *** cognominal left
[21:18] *** cognominal joined
[21:20] * flussence grumbles at browsers defaulting to latin-1 when so many .txt files I see these days are utf-8...

[21:20] <gfldex> timotimo++ for telling the truth

[21:21] <cognominal> r: < a b >.map: { return }  # this is probably stupid, but the error msg does not help

[21:21] <camelia> rakudo-jvm 8b639b: OUTPUT«cannot connect to eval server: Connection refused␤»

[21:21] <camelia> ..rakudo-moar 8b639b: OUTPUT«Unhandled exception: Cannot look up attributes in a type object␤   at src/gen/m-CORE.setting:9642  (/home/camelia/rakudo-inst-1/share/perl6/runtime/CORE.setting.moarvm::116)␤ from src/gen/m-CORE.setting:9632  (/home/camelia/rakudo-inst-1/share/perl6/ru…»

[21:26] *** FROGGS left
[21:26] *** Ven left
[21:27] *** pecastro joined
[21:28] *** nbdsp left
[21:28] *** telex left
[21:29] *** tinyblak joined
[21:30] *** telex joined
[21:32] <timotimo> TimToady: oh? so flipping already didn't happen when length was known before you wrote that patch?

[21:34] *** tinyblak left
[21:35] *** torbjorn_ joined
[21:36] *** jdv79_ joined
[21:36] *** orevdiabl joined
[21:38] *** agentzh joined
[21:38] *** agentzh left
[21:38] *** agentzh joined
[21:49] *** orafu joined
[21:55] <RabidGravy> cognominal, actually I think there is some underlying weirdness around that:

[21:55] <RabidGravy> m:  < a b >.map: { return $_ }

[21:55] <camelia> rakudo-moar 8b639b: OUTPUT«Unhandled exception: P6opaque: no such attribute '$!storage'␤   at src/gen/m-CORE.setting:9642  (/home/camelia/rakudo-inst-2/share/perl6/runtime/CORE.setting.moarvm::116)␤ from src/gen/m-CORE.setting:9632  (/home/camelia/rakudo-inst-2/share/perl6/runti…»

[22:00] <RabidGravy> m:  < a b >.map: { say $_.WHAT }

[22:00] <camelia> rakudo-moar 8b639b: OUTPUT«(Str)␤(Str)␤»

[22:00] <RabidGravy> not sure what it is though

[22:06] <cognominal> me neither

[22:07] <ugexe> it should just say cannot return outside of a routine

[22:09] *** rhr left
[22:09] *** RabidGravy left
[22:09] *** rhr joined
[22:21] *** virtualsue left
[22:29] <TimToady> timotimo: no, the part where you said "only part gets flipped now"; if the length is known, nothing gets flipped, it just turns it into a <?before> with an offset

[22:32] *** nbdsp joined
[22:34] *** yqt left
[22:35] *** orafu left
[22:37] *** work_op left
[22:39] <nbdsp> Greetings! Could someone advise please how to use nested enumerations? If I have:  class EnClass { my enum En <Sun Mon Tue>; } - how to refer to En members?

[22:39] *** eli-se left
[22:39] *** cognominal left
[22:40] <nbdsp> m: class EnClass { my enum En <Sun Mon Tue>; }; say EnClass::En::Sun;

[22:40] <camelia> rakudo-moar 8b639b: OUTPUT«Could not find symbol '&Sun'␤  in method <anon> at src/gen/m-CORE.setting:16099␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2908␤  in any find_method at src/gen/m-Metamodel.nqp:1052␤  in block <unit> at /tmp/KrBxEESH0H:1␤␤»

[22:40] *** skids joined
[22:40] <TimToady> m: class EnClass { enum En <Sun Mon Tue>; }; say EnClass::En::Sun;

[22:40] <camelia> rakudo-moar 8b639b: OUTPUT«Sun␤»

[22:41] <TimToady> m: class EnClass { my enum En is export <Sun Mon Tue>; }; import EnClass; say En::Sun;

[22:41] <camelia> rakudo-moar 8b639b: OUTPUT«Sun␤»

[22:41] <TimToady> m: class EnClass { my enum En is export <Sun Mon Tue>; }; import EnClass; say Sun;

[22:41] <camelia> rakudo-moar 8b639b: OUTPUT«Sun␤»

[22:41] <nbdsp> oh, without 'my' or with 'export'. thanks!

[22:44] *** lichtkind left
[22:48] *** bjz left
[22:52] *** BenGoldberg joined
[22:54] *** nornagest left
[22:55] *** vendethiel left
[23:26] <grondilu> sub f(uint32 $n) { $n + 2**32 }; say f 7;

[23:26] <grondilu> m: sub f(uint32 $n) { $n + 2**32 }; say f 7;

[23:26] <camelia> rakudo-moar 8b639b: OUTPUT«4294967303␤»

[23:26] <grondilu> ^not sure if that's ok

[23:27] <grondilu> m: say 4294967303.base(2)

[23:27] <camelia> rakudo-moar 8b639b: OUTPUT«100000000000000000000000000000111␤»

[23:28] <gfldex>  m: sub f(uint32 $n) { $n + 2**32 }; say (f 7).WHAT;

[23:28] <camelia> rakudo-moar 8b639b: OUTPUT«(Int)␤»

[23:28] <gfldex> magic o.0

[23:28] <grondilu> m: sub f(uint32 $n --> uint32) { my uint32 $ = $n + 2**32 }; say f 7

[23:28] <camelia> rakudo-moar 8b639b: OUTPUT«4294967303␤»

[23:29] <grondilu> m: say my uint32 $ = 2**32

[23:29] <camelia> rakudo-moar 8b639b: OUTPUT«4294967296␤»

[23:29] <grondilu> ^well that can't be right.

[23:29] <TimToady>  m: say (my uint32 $ = 2**32).WHAT

[23:29] <camelia> rakudo-moar 8b639b: OUTPUT«(Int)␤»

[23:30] <grondilu> m: say my uint32 $ = 2**100

[23:30] <camelia> rakudo-moar 8b639b: OUTPUT«0␤»

[23:30] <grondilu> m: say my uint32 $ = 2**60

[23:30] <camelia> rakudo-moar 8b639b: OUTPUT«1152921504606846976␤»

[23:30] <TimToady> it would appear to be returning the RHS, not the LHS

[23:30] <grondilu> m: say my uint32 $ = 2**64

[23:30] <camelia> rakudo-moar 8b639b: OUTPUT«0␤»

[23:30] <grondilu> m: say my uint32 $ = 2**63

[23:30] <camelia> rakudo-moar 8b639b: OUTPUT«-9223372036854775808␤»

[23:31] <gfldex> it

[23:31] * grondilu has no idea what's going on there

[23:31] <gfldex> it's confusing in a odd way

[23:31] <grondilu> the number of bits that seems critical is 64, when it should be 32.

[23:32] <grondilu> so it behaves like int64 instead of uint32?

[23:32] <gfldex> looks like it. Please rakudobug it.

[23:33] <grondilu> sure?

[23:37] <grondilu> also, in the REPL if I enter 'my uint32 $ = 1;' twice, I get:

[23:37] <grondilu> Unhandled lexical type in lexprimspec for '$ANON_VAR__1'

[23:37] <grondilu> but not with 'my uint $ = 1;', weirdly enough.

[23:40] *** aborazmeh joined
[23:40] *** aborazmeh left
[23:40] *** aborazmeh joined
[23:40] *** gfldex left
[23:42] * grondilu submitted the bug

[23:42] <grondilu> FYI, I found this while considering using native types for http://rosettacode.org/wiki/SHA-256#Perl_6

[23:49] *** aborazmeh left
[23:50] *** tinyblak joined
