[00:00] <n0tjack> g'night all, and thanks again

[00:00] *** n0tjack left
[00:01] *** llfourn left
[00:05] <softmoth> m: my $x = 3;  (&sin, &cos X $x :with({&^a($^b)})).perl.say; # I thought there was something like this :with adverb for Z and X?

[00:05] <camelia> rakudo-moar f3b535: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hnbnlZB1PK␤You can't adverb $x␤at /tmp/hnbnlZB1PK:1␤------> 3= 3;  (&sin, &cos X $x :with({&^a($^b)})7⏏5).perl.say; # I thought there was someth␤»

[00:07] *** leont left
[00:11] <softmoth> m: cross((&sin, &cos), 3, :with({&^a($^b)}))

[00:11] <camelia> rakudo-moar f3b535: OUTPUT«WARNINGS:␤Useless use of "cross((&sin, &cos), 3, :with({&^a($^b)}))" in expression "cross((&sin, &cos), 3, :with({&^a($^b)}))" in sink context (line 1)␤»

[00:12] <softmoth> m: cross((&sin, &cos), 3, :with({&^a($^b)})).perl.say

[00:12] <camelia> rakudo-moar f3b535: OUTPUT«(0.141120008059867e0, -0.989992496600445e0).Seq␤»

[00:12] *** NoRefill left
[00:14] *** hohoho joined
[00:14] <[Coke]> m: .say for .reals

[00:14] <camelia> rakudo-moar f3b535: OUTPUT«Method 'reals' not found for invocant of class 'Any'␤  in block <unit> at /tmp/IaG_qS1uZH:1␤␤»

[00:15] <[Coke]> m: given 42 { .say for .reals }

[00:15] <camelia> rakudo-moar f3b535: OUTPUT«Method 'reals' not found for invocant of class 'Int'␤  in block <unit> at /tmp/kwojiobzrB:1␤␤»

[00:16] *** laouji joined
[00:17] <softmoth> sub infix:<-$->(&a, $b) { &a($b) }; (&sin, &cos X[-$-] 3).say.perl

[00:17] <softmoth> m: sub infix:<-$->(&a, $b) { &a($b) }; (&sin, &cos X[-$-] 3).say

[00:17] <camelia> rakudo-moar f3b535: OUTPUT«(0.141120008059867 -0.989992496600445)␤»

[00:33] *** spider-mario left
[00:35] <kid51> This bug ticket, https://rt.perl.org/Ticket/Display.html?id=126349, lacks a meaningful Subject.  It just says '[BUG]'.  Can someone suggest a better Subject for it?  If so, I or someone with rt privileges can add that Subject.

[00:36] *** tokuhirom joined
[00:36] *** telex left
[00:38] *** telex joined
[00:39] *** laouji left
[00:39] *** CurtisOvidPoe left
[00:40] *** sufrostico left
[00:40] *** tokuhirom left
[00:41] *** softmoth left
[00:43] *** laouji joined
[00:45] *** CurtisOvidPoe joined
[00:47] *** Kogurr joined
[00:48] <BenGoldberg> m: sub infix:<of> { &^x($^y) }; say &cos of 3; say &sin, &cos, &tan Xof 3;

[00:48] <camelia> rakudo-moar f3b535: OUTPUT«-0.989992496600445␤(0.141120008059867 -0.989992496600445 -0.142546543074278)␤»

[00:52] *** hummeleBop left
[00:54] *** n0tjack joined
[00:55] <n0tjack> last annoying newb question of the day: is there a pointfree way of expressing map {'0123456789'.index($_)}, "string".comb?  ?

[00:55] <n0tjack> it just feels like overkill to introduce a new block context just to invoke a single function with a single unbound param

[00:55] *** ofzyh_ joined
[00:56] *** sQuEE left
[00:57] <[Coke]> kid51: perhaps you can ask the person who opened the ticket.

[00:58] *** sQuEE joined
[00:58] *** adhoc joined
[00:58] <gfldex> kid51: "substitution of Array of Str fails to provide backreferences" and i can understand why he left the subject out :)

[00:58] <gfldex> m: my @strs = ("11 22 33"); for @strs { $_ ~~ s/(\S+)\s(\S+)\s(\S+)/$0-$1-$2/; }; say @strs;

[00:58] <camelia> rakudo-moar f3b535: OUTPUT«Use of Nil in string context  in code  at /tmp/pq2S60RUgD:1␤Use of Nil in string context  in code  at /tmp/pq2S60RUgD:1␤Use of Nil in string context  in code  at /tmp/pq2S60RUgD:1␤[--]␤»

[00:58] <[Coke]> updating..

[00:58] *** ofzyh left
[00:59] <gfldex> m: my @strs = ("11 22 33"); for @strs { $_ ~~ s/\s(\S+)\s(\S+)/$0-$1-$2/; }; say @strs;

[00:59] <camelia> rakudo-moar f3b535: OUTPUT«Use of Nil in string context  in code  at /tmp/NG8WX_iNEp:1␤Use of Nil in string context  in code  at /tmp/NG8WX_iNEp:1␤Use of Nil in string context  in code  at /tmp/NG8WX_iNEp:1␤[11--]␤»

[00:59] <gfldex> m: my @strs = ("11 22 33"); for @strs { say $_ ~~ s/\s(\S+)\s(\S+)/$0-$1-$2/; }; say @strs;

[00:59] <camelia> rakudo-moar f3b535: OUTPUT«Use of Nil in string context  in code  at /tmp/MoBfYeEcUI:1␤Use of Nil in string context  in code  at /tmp/MoBfYeEcUI:1␤Use of Nil in string context  in code  at /tmp/MoBfYeEcUI:1␤｢ 22 33｣␤ 0 => ｢22｣␤ 1 => ｢33｣␤[11--]␤»

[00:59] <BenGoldberg> j: my @strs = ("11 22 33"); for @strs { $_ ~~ s/\s(\S+)\s(\S+)/$0-$1-$2/; }; say @strs;

[00:59] <ShimmerFairy> gfldex: if that's what it can be called, I could swear there's an existing ticket about s/// in a loop :)

[00:59] <camelia> rakudo-jvm f3b535: OUTPUT«Use of Nil in string context  in code  at /tmp/UtguVw6Bg0:1␤Use of Nil in string context  in code  at /tmp/UtguVw6Bg0:1␤Use of Nil in string context  in code  at /tmp/UtguVw6Bg0:1␤[11--]␤»

[00:59] <BenGoldberg> n: my @strs = ("11 22 33"); for @strs { $_ ~~ s/\s(\S+)\s(\S+)/$0-$1-$2/; }; say @strs;

[00:59] <camelia> niecza v24-109-g48a8de3: OUTPUT«sh: mono: command not found␤»

[01:00] <[Coke]> updated.

[01:02] <timotimo> n0tjack: time to build something like python's "itemgetter" or "methodcaller"? :P

[01:02] <gfldex> #118705 is dupe of #123005 is dupe of #123005

[01:02] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118705

[01:02] <gfldex> it's double duped twice! That's to much for me. Good night.

[01:03] <n0tjack> timotimo: I feel there's a whatever-star solution lurking, that I just can't see

[01:03] <n0tjack> maybe with .assuming?

[01:04] *** sufrostico joined
[01:04] <timotimo> putting a whatever star into the method list will not cause whatever currying

[01:04] *** sufrostico left
[01:04] <timotimo> m: (ord *)('a')

[01:04] <camelia> rakudo-moar f3b535: OUTPUT«5===SORRY!5=== Error while compiling /tmp/T6RywmNXwk␤Calling ord(Whatever) will never work with declared signature (Cool $s)␤at /tmp/T6RywmNXwk:1␤------> 3(7⏏5ord *)('a')␤»

[01:04] <timotimo> right

[01:05] <timotimo> not in that case, either

[01:09] <BenGoldberg> m {ord $^x}('a')

[01:09] <BenGoldberg> m: {ord $^x}('a').say

[01:09] <camelia> rakudo-moar f3b535: OUTPUT«97␤»

[01:09] <n0tjack> but it can't be order

[01:09] <n0tjack> I mean ord

[01:09] <n0tjack> it's gotta be a => 0, b => 1, etc

[01:10] <timotimo> well, you can subtract ord('0') from the values

[01:10] <n0tjack> and ord('a') - ord('0') won't work, because in the general case it won't be ASCII

[01:10] <n0tjack> ha, beat me by a millisecond

[01:10] <timotimo> you'll still have to check for out-of-bounds

[01:11] <n0tjack> yeah, but I have plans for that

[01:12] <BenGoldberg> m: my %lookup = ('0'..'9') X (0..9); my @whatever = %lookup{ "1234".comb }; @whatever.say;

[01:12] <camelia> rakudo-moar f3b535: OUTPUT«[(Any) (Any) (Any) (Any)]␤»

[01:13] <BenGoldberg> m: my %lookup = ('0'..'9') X (0..9); %lookup.say

[01:13] <camelia> rakudo-moar f3b535: OUTPUT«0 0 => (0 1), 0 2 => (0 3), 0 4 => (0 5), 0 6 => (0 7), 0 8 => (0 9), 1 0 => (1 1), 1 2 => (1 3), 1 4 => (1 5), 1 6 => (1 7), 1 8 => (1 9), 2 0 => (2 1), 2 2 => (2 3), 2 4 => (2 5), 2 6 => (2 7), 2 8 => (2 9), 3 0 => (3 1), 3 2 => (3 3), 3 4 => (3 5), 3 6 …»

[01:13] <timotimo> it's not getting any better :D

[01:13] * BenGoldberg headscratches

[01:13] <timotimo> X is a *bit* much :D

[01:13] <n0tjack> X is cartesian, no?

[01:13] <timotimo> yeah

[01:13] <BenGoldberg> m: my %lookup; %lookup{'0'..'9'} = 0..9; %lookup.say

[01:13] <camelia> rakudo-moar f3b535: OUTPUT«0 => 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9␤»

[01:14] <BenGoldberg> m: my %lookup; %lookup{'0'..'9'} = 0..9;  my @whatever = %lookup{ "1234".comb }; @whatever.say;

[01:14] <camelia> rakudo-moar f3b535: OUTPUT«[1 2 3 4]␤»

[01:14] <n0tjack> BenGoldberg: Yeah, I did that too, but it forces me to create intermediate vars.

[01:14] <n0tjack> I'm trying to stay as functional, pointfree, and clean as I can

[01:15] <n0tjack> I mean, I can achieve my ends, but I'm trying to make it hard for others to maintain my code ;)

[01:16] <n0tjack> If you want to see the kind of monsters I'm inflicting on the world: https://gist.github.com/anonymous/483ece62552981cb47dc

[01:16] <BenGoldberg> m: my %lookup = map { $_ => $_ } 0..9;  my @whatever = %lookup{ "1234".comb }; @whatever.say;

[01:16] <camelia> rakudo-moar f3b535: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ok5PJnAIZC␤Missing comma after block argument to map␤at /tmp/ok5PJnAIZC:1␤------> 3my %lookup = map { $_ => $_ }7⏏5 0..9;  my @whatever = %lookup{ "1234".c␤    expecting any of:␤        infix␤…»

[01:16] <BenGoldberg> m: my %lookup = map { $_ => $_ }, 0..9;  my @whatever = %lookup{ "1234".comb }; @whatever.say;

[01:16] <camelia> rakudo-moar f3b535: OUTPUT«[1 2 3 4]␤»

[01:17] <BenGoldberg> m: my @whatever = ((map { $_ => $_ }, 0..9).hash){ "1234".comb }; @whatever.say;

[01:17] <camelia> rakudo-moar f3b535: OUTPUT«[1 2 3 4]␤»

[01:21] <BenGoldberg> n0tjack, What about doing: $/.make(  :10[$/.comb]  );

[01:22] <BenGoldberg> On the one hand, it's not "doing it the hard way", but on the other, it restricts to base ten integers, just like your present grammar.

[01:22] <n0tjack> BenGoldberg:  That does work, but I need a more general solution for other situations (also, for this particular grammar, I'm trying to "do the work myself", build up the values from fundamental principles).

[01:24] <n0tjack> check out line 48, for example

[01:34] *** vendethiel joined
[01:36] *** n0tjack left
[01:37] *** softmoth joined
[01:42] *** tokuhirom joined
[01:42] *** softmoth left
[01:44] *** rhr joined
[01:46] *** tokuhirom left
[01:49] *** adu joined
[01:59] *** llfourn joined
[02:05] *** uruwi joined
[02:05] <uruwi> Ho!

[02:06] <awwaiid> How do I get a module of mine listed in panda? Do I need to have the master branch be the stable branch?

[02:07] <uruwi> I installed Rakudo* 2015.09, but can't find Panda, which is claimed to be packaged with the distribution, anywhere.

[02:07] <garu> ilmari: follow up on the HTTP::UserAgent issue. According to tokuhirom, current version expects a \r\n, not just \n. Since RFC2616 also says so, I wonder if it should be implemented at all

[02:07] <uruwi> Is there any kind of problem?

[02:12] *** dayangkun joined
[02:16] *** vendethiel left
[02:17] *** kid51 left
[02:18] <uruwi> Never mind, found it!

[02:19] *** noganex_ joined
[02:19] <awwaiid> Yeah. me too.

[02:22] *** noganex left
[02:24] *** colomon left
[02:25] *** colomon joined
[02:26] <dalek> ecosystem: 7f59a4f | (Brock Wilcox)++ | META.list:

[02:26] <dalek> ecosystem: Add LREP project

[02:26] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7f59a4f861

[02:26] <dalek> ecosystem: a775816 | (Zoffix Znet)++ | META.list:

[02:26] <dalek> ecosystem: Merge pull request #77 from awwaiid/patch-1

[02:26] <dalek> ecosystem: 

[02:26] <dalek> ecosystem: Add LREP project https://github.com/awwaiid/p6-lrep/

[02:26] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a7758169e0

[02:26] <awwaiid> In case anyone else doesn't know and wants to join the fun: to add a module to the ecosystem (ie panda) do a PR against https://github.com/perl6/ecosystem editing META.list

[02:35] <dalek> ecosystem: 889c8e5 | (Zoffix Znet)++ | README.md:

[02:35] <dalek> ecosystem: Suggest adding viewable URLs when adding modules to eco

[02:35] <dalek> ecosystem: 

[02:35] <dalek> ecosystem: For ease of viewing during announcements. Suggested by Issue #76

[02:35] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/889c8e5594

[02:37] <Zoffix> awwaiid, you'll also need to run `panda update` for it to refresh its modules list, if you want your module to be installable

[02:38] <Zoffix> (on your box)

[02:40] *** colomon left
[02:41] <dalek> modules.perl6.org: e5ad02f | (Zoffix Znet)++ | web/build-project-list.pl:

[02:41] <dalek> modules.perl6.org: Ensure sortable table "arrows" pics are copied to output dir

[02:41] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/e5ad02f075

[02:43] *** colomon joined
[02:45] <dalek> specs: 8fb3cd9 | (Nova Patch)++ | / (13 files):

[02:45] <dalek> specs: various minor casing/spacing/grammar/syntax fixes

[02:45] <dalek> specs: 

[02:45] <dalek> specs: ◦ unicode                    → Unicode [except unicode pragma]

[02:45] <dalek> specs: ◦ Perl6                      → Perl 6

[02:45] <dalek> specs: ◦ Perl5                      → Perl 5 [except Perl5ish]

[02:45] <dalek> specs: ◦ a                          → an [before vowel sounds]

[02:45] <dalek> specs: ◦ c<…>                       → C<…>

[02:45] <dalek> specs: ◦ $*ARGS                     → @*ARGS

[02:45] <dalek> specs: ◦ :p5                        → :P5

[02:45] <dalek> specs: ◦ Unicode database           → Unicode Character Database [http://unicode.org/glossary/#unicode_character_database]

[02:45] <dalek> specs: ◦ unicode normalisation form → Unicode normalization form [http://unicode.org/glossary/#normalization_form]

[02:45] <dalek> specs: 

[02:45] <dalek> specs: also minor punctuation changes on some of the lines modified

[02:45] <dalek> specs: review: https://github.com/perl6/specs/commit/8fb3cd9b33

[02:46] <timotimo> .u  

[02:46] <yoleaux> Search for a Unicode character by codepoint, name, or raw character

[02:46] <timotimo> .u l 6

[02:46] <yoleaux> U+1974 TAI LE LETTER TONE-6 [Lo] (ᥴ)

[02:46] <yoleaux> U+16F97 MIAO LETTER TONE-6 [Lm] (𖾗)

[02:46] <timotimo> damn, not what i meant

[02:49] *** aborazmeh joined
[02:49] *** aborazmeh left
[02:49] *** aborazmeh joined
[02:50] <ShimmerFairy> timotimo: what did you mean, ooc?

[02:50] <ShimmerFairy> m: say "◦".uniname

[02:50] <camelia> rakudo-moar f3b535: OUTPUT«WHITE BULLET␤»

[02:51] <timotimo> m: say "l 6".uniname

[02:51] <camelia> rakudo-moar f3b535: OUTPUT«LATIN SMALL LETTER L␤»

[02:51] <timotimo> m: say " ".uniname

[02:51] <camelia> rakudo-moar f3b535: OUTPUT«SPACE␤»

[02:52] <timotimo> that's not the right space to go between Perl and 6!

[02:52] <timotimo> m: say " ".uniname

[02:52] <camelia> rakudo-moar f3b535: OUTPUT«NARROW NO-BREAK SPACE␤»

[02:52] <timotimo> ^- has to be this!

[02:52] <uruwi> Just a question...

[02:52] <ShimmerFairy> timotimo: that's the space I use, not NBSP :)

[02:52] <timotimo> it's a NNBSP, though

[02:52] <uruwi> how do I make perl6 recognize an internally used module?

[02:52] *** adu left
[02:53] <timotimo> uruwi: can you be a little more specific?

[02:53] <ShimmerFairy> timotimo: I always saw NBSP in documents (a purple-ish underline on the space in emacs, which AFAIK is just for NBSP. maybe NNBSP is counted too)

[02:53] <uruwi> Is it possible to use a module internally?

[02:53] <uruwi> (within a project?)

[02:54] <Zoffix> uruwi, sure

[02:54] <ShimmerFairy> uruwi: yes it is. I've got quite a few projects where I may have a test file at the top level, module files in lib/, and I run the script with    perl6 -Ilib test.p6

[02:54] <timotimo> you may have to "use lib" for things

[02:54] <timotimo> or -I, yeah

[02:54] <Zoffix> uruwi, you should be able to just `use` it if the paths are right. If they aren't. Just `use lib 'foobar';` or add them with -I

[02:54] <ShimmerFairy> uruwi: you could also put  use lib "lib/";  in such a test script, as has been mentioned a couple times already :)

[02:54] <Zoffix> Answer all the things \o/

[02:55] * Zoffix goes to bed &

[02:56] <dalek> doc: a8437e9 | (Tokuhiro Matsuno)++ | doc/Language/5to6-perlvar.pod:

[02:56] <dalek> doc: $*PROGRAM_NAME was renamed to $*PROGRAM-NAME.

[02:56] <dalek> doc: review: https://github.com/perl6/doc/commit/a8437e9b74

[02:56] <dalek> doc: d4c4bfc | (Zoffix Znet)++ | doc/Language/5to6-perlvar.pod:

[02:56] <dalek> doc: Merge pull request #161 from tokuhirom/program_name

[02:56] <dalek> doc: 

[02:56] <dalek> doc: $*PROGRAM_NAME was renamed to $*PROGRAM-NAME.

[02:56] <dalek> doc: review: https://github.com/perl6/doc/commit/d4c4bfcafa

[02:57] <uruwi> So if I have a module with the source at lib/Terminal/Basic.pm6 then what would I type?

[02:57] <Zoffix> uruwi, use lib 'lib'; or perl6 -Ilib

[02:58] <ShimmerFairy> you'd use that as    use Terminal::Basic    , so long as you've told Perl 6 to look in that lib/ directory.

[02:59] <uruwi> It doesn't work in the REPL, does it?

[03:01] <ShimmerFairy> uruwi: I'm not sure, but you should be able to type  'use lib "lib/"' (replacing that string with the correct relative path to lib/), and then  use Terminal::Basic on the next line

[03:01] <ShimmerFairy> uruwi: you should also be able to start the REPL as  perl6 -Ilib  instead of the 'use lib' statement

[03:02] <uruwi> Thanks ShimmerFairy

[03:04] *** mr_ron left
[03:12] <uruwi> Any different for source files?

[03:18] *** atweiden joined
[03:25] *** softmoth joined
[03:30] *** softmoth left
[03:43] *** laouji left
[03:43] *** tokuhirom joined
[03:46] *** BenGoldberg left
[03:47] <atweiden> i'm testing this https://github.com/atweiden/nightscape/blob/develop/t/grammar/01-header.t#L99

[03:47] <atweiden> it passes in isolation here: https://github.com/atweiden/nightscape/blob/develop/t/grammar/01-header.t#L118

[03:47] <atweiden> and here: http://ix.io/lpw

[03:47] <atweiden> but the original test fails

[03:47] <atweiden> is this a rakudobug?

[03:48] *** BenGoldberg joined
[03:48] *** tokuhirom left
[03:51] <atweiden> (running latest nom)

[04:01] <uruwi> Is there any way to get a keypress without waiting for the user to press [Enter]?

[04:01] <uruwi> Ideally I'd use the NCurses module but at this time it doesn't work with Windows.

[04:17] *** WizJin joined
[04:23] <atweiden> oops, figured it out

[04:23] <dalek> ecosystem: b42c954 | lestrrat++ | META.list:

[04:23] <dalek> ecosystem: Add Apache::LogFormat

[04:23] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/b42c9540bc

[04:23] <dalek> ecosystem: 2c8368d | (Tokuhiro Matsuno)++ | META.list:

[04:23] <dalek> ecosystem: Merge pull request #78 from lestrrat/patch-1

[04:23] <dalek> ecosystem: 

[04:23] <dalek> ecosystem: Add Apache::LogFormat

[04:23] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/2c8368d6b5

[04:23] *** WizJin left
[04:28] *** atweiden left
[04:34] *** WizJin joined
[04:39] *** laouji joined
[04:57] <uruwi> another question: where does perl6 search for dlls on Windows?

[04:57] <moritz> in PATH I believe

[05:02] *** FROGGS[mobile] joined
[05:03] <FROGGS[mobile]> dlls are searched in CWD too I believe

[05:07] <uruwi> I'm trying to get the NCurses module to work on Windows.

[05:07] <FROGGS[mobile]> cool

[05:07] <uruwi> What does "No appropriate parametric role variant available for 'Native'" mean?

[05:07] <uruwi> I tried to search for it, but I got confused

[05:09] <FROGGS[mobile]> hmmm

[05:10] <uruwi> Does that mean that there's no function found with the appropriate signature in the dll?

[05:10] <FROGGS[mobile]> m: use NativeCall; sub foo is native(<foo bar>) { *} 

[05:10] <camelia> rakudo-moar f3b535: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Ji4wHTAxFh␤No appropriate parametric role variant available for 'Native'␤at /tmp/Ji4wHTAxFh:1␤»

[05:10] <FROGGS[mobile]> ha!

[05:10] *** khw left
[05:11] <FROGGS[mobile]> uruwi: pass a string to the is native trait, not a list or something else

[05:12] <uruwi> Ah, it was because $NCURSES_LOC didn't exist.

[05:14] *** softmoth joined
[05:14] <uruwi> Perl still can't locate the dll though

[05:14] <FROGGS[mobile]> ohh

[05:14] <uruwi> even if I add the directory to the WINDOWS %Path% variable

[05:14] <FROGGS[mobile]> yeah, traits run at compile time, which can be confusing

[05:16] <FROGGS[mobile]> do you add it to PATH before starting your script?

[05:17] <uruwi> Yes

[05:17] <uruwi> Not every time, though

[05:18] *** softmoth left
[05:18] <FROGGS[mobile]> setting it in the script it too late though 

[05:20] <FROGGS[mobile]> but you can also provide an absolut path to is native, without setting Path at all I think

[05:22] *** sQuEE is now known as sQuEE`

[05:22] <uruwi> Still no luck.

[05:24] <uruwi> Does it matter if I use a version from Cygwin?

[05:25] *** Jaglor left
[05:30] <uruwi> Tried to use a Windows binary and still doesn't work.

[05:31] <uruwi> oh, wrong file name

[05:32] <uruwi> unfortunately Murphy's law strikes back "Error opening terminal: xterm."

[05:35] <uruwi> This much work just to be able to read keypresses without pressing Enter.

[05:36] <uruwi> And even less luck on cmd

[05:38] <uruwi> On a break from all this madness, I've abandoned this project long long ago https://github.com/bluebear94/sun1p1

[05:45] *** tokuhirom joined
[05:45] *** bjz joined
[05:47] *** jkva joined
[05:49] *** tokuhirom left
[05:49] *** BenGoldberg left
[05:50] <uruwi> It's a problem with initscr()

[05:52] *** rindolf joined
[05:53] <uruwi> It seems I'll have to link a Cygwin-aware DLL, but I can't find libncursesw6.dll anywhere

[05:54] *** bjz left
[05:55] *** skids left
[06:01] *** kjones_ joined
[06:02] *** kjones_ left
[06:08] *** bjz joined
[06:08] *** kmel joined
[06:10] <kmel> m: say 'Hello' 

[06:10] <camelia> rakudo-moar f3b535: OUTPUT«Hello␤»

[06:12] <uruwi> say 99 ** 99

[06:14] <uruwi> m: say 99 ** 88

[06:14] <camelia> rakudo-moar f3b535: OUTPUT«41294967113388846862799854538691617968752357209343777782657514166985700076424987472478122770530747238801087245466136620792550517990555186110294214867126284223076111559302271201␤»

[06:14] <uruwi> m: say 99 ** 99

[06:14] <camelia> rakudo-moar f3b535: OUTPUT«369729637649726772657187905628805440595668764281741102430259972423552570455277523421410650010128232727940978889548326540119429996769494359451621570193644014418071060667659301384999779999159200499899␤»

[06:15] <TEttinger> m: say 99 ** 99 ** 99

[06:15] <camelia> rakudo-moar f3b535: OUTPUT«0␤»

[06:16] <TEttinger> m: say 99 ** 99 * 99

[06:16] <camelia> rakudo-moar f3b535: OUTPUT«36603234127322950493061602657251738618971207663892369140595737269931704475072474818719654351002695040066156910065284327471823569680179941585710535449170757427389035006098270837114978219916760849490001␤»

[06:16] <TEttinger> m: say 99 * 99 ** 99

[06:16] <camelia> rakudo-moar f3b535: OUTPUT«36603234127322950493061602657251738618971207663892369140595737269931704475072474818719654351002695040066156910065284327471823569680179941585710535449170757427389035006098270837114978219916760849490001␤»

[06:16] <TEttinger> interesting

[06:16] <TEttinger> so ** really does have the right priority for the exponentiation operator

[06:18] *** FROGGS[mobile]2 joined
[06:18] <ShimmerFairy> .tell jnthn just taking a quick glance at NQP's regex stuff, I notice case-insensitive stuff uses uc and lc variants. Now that we have nqp::fc, would it be beneficial to have regexes use fc for :i and :ii ? Or do those modifiers explicitly require just uc/lc checking in spec somewhere (nothing suggesting such in S05)?

[06:18] <yoleaux> ShimmerFairy: I'll pass your message to jnthn.

[06:20] *** bjz_ joined
[06:20] *** [Sno] left
[06:21] *** bjz left
[06:21] *** FROGGS[mobile] left
[06:24] *** kmel left
[06:25] <Hotkeys> I like how sequence generation looks when multiplying

[06:25] <Hotkeys> m: my @test = 1, 2, 3, * * * * * ... *; say @test[^10];

[06:25] <camelia> rakudo-moar f3b535: OUTPUT«(1 2 3 6 36 648 139968 3265173504 296148833645101056 135345882205792807436868315512832)␤»

[06:26] <uruwi> So that was the product of the 3 previous terms right?

[06:26] <Hotkeys> yeah

[06:26] <uruwi> m: my @test = 1, 1, 2, * * * * * ... *; say @test[^10];

[06:26] <camelia> rakudo-moar f3b535: OUTPUT«(1 1 2 2 4 16 128 8192 16777216 17592186044416)␤»

[06:26] <Hotkeys> just a line of asterisks

[06:27] <ShimmerFairy> Yeah, I think it's delightfully cryptic. I can't help but think it could also serve as a good tool for teaching the difference between "term" and "operator", at least for parser-writing things :)

[06:27] <Hotkeys> beauty

[06:27] <uruwi> m: my @test = 1, 2, 3 * ** * ** * ... *; say @test[^10];

[06:27] <camelia> rakudo-moar f3b535: ( no output )

[06:27] *** firstdayonthejob joined
[06:27] <uruwi> m: my @test = 1, 2, 3 * ** * ** * ... *; say @test[^5];

[06:27] <camelia> rakudo-moar f3b535: ( no output )

[06:27] <uruwi> m: my @test = 1, 2, 3, * ** * ** * ... *; say @test[^10];

[06:27] <camelia> rakudo-moar f3b535: OUTPUT«(1 2 3 1 8 3 1 512 3 1)␤»

[06:27] <Hotkeys> that's neat

[06:28] <ShimmerFairy> m: my @test = 1, 1, 2, {$^a * $^b * $^c} ... *; say @test[^10];    # the fun-ruining clearer version of that line of asterisks, fwiw

[06:28] <camelia> rakudo-moar f3b535: OUTPUT«(1 1 2 2 4 16 128 8192 16777216 17592186044416)␤»

[06:28] <Hotkeys> m: my @test = 1, 2, 3, * ** * ** * ... *; say @test[^20];

[06:28] <camelia> rakudo-moar f3b535: OUTPUT«(1 2 3 1 8 3 1 512 3 1 134217728 3 1 2417851639229258349412352 3 1 14134776518227074636666380005943348126619871175004951664972849610340958208 3 1 28240139587082174969491088422046278633513539118515775246834019308626938303611984999058739209952299969708978654…»

[06:28] <Hotkeys> interesting that it goes to 3 1 every time

[06:28] <uruwi> m: my @test = 2, 2, 2, * ** * ** * ... *; say @test[^10];

[06:28] <camelia> rakudo-moar f3b535: OUTPUT«(2 2 2 16 200352993040684646497907235156025575044782547556975141926501697371089405955631145308950613088093334810103823434290726318182294938211881266886950636476154702916504187191635158796634721944293092798208430910485599057015931895963952486337236720300291…»

[06:28] <uruwi> m: my @test = 2, 3, 4, * ** * ** * ... *; say @test[^10];

[06:28] <camelia> rakudo-moar f3b535: OUTPUT«(2 3 4 2417851639229258349412352 1 0 2417851639229258349412352 1 0 2417851639229258349412352)␤»

[06:28] <Hotkeys> I never knew perl 5, only started perl 6 a few days ago

[06:28] <Hotkeys> this is fun

[06:29] <uruwi> I broke Camelia

[06:29] <Hotkeys> m: 3 ** 4 ** 99999999999999999999999999

[06:29] <camelia> rakudo-moar f3b535: OUTPUT«WARNINGS:␤Useless use of "**" in expression "3 ** 4 **" in sink context (line 1)␤»

[06:29] <uruwi> Still trying to get NCurses module to work with Windows

[06:30] *** kmel joined
[06:30] *** n0xff left
[06:30] <uruwi> m: my @test = 2, 2, 2, * ** * ** * ... *; say @test[^10].map(&log);

[06:30] <camelia> rakudo-moar f3b535: OUTPUT«Attempt to divide Inf by zero using /␤  in block <unit> at /tmp/v2TkLbcMfT:1␤␤Actually thrown at:␤  in block <unit> at /tmp/v2TkLbcMfT:1␤␤»

[06:31] <uruwi> m: (1, 2).map(&log)

[06:31] <camelia> rakudo-moar f3b535: ( no output )

[06:31] <uruwi> m: say (1, 2).map(&log)

[06:31] <camelia> rakudo-moar f3b535: OUTPUT«(0)␤»

[06:31] <uruwi> m: say (1, 2, 3).map(&log)

[06:31] <camelia> rakudo-moar f3b535: OUTPUT«(0 1.09861228866811)␤»

[06:31] <uruwi> m: say (1, 2, 3, 4, 5).map(&log)

[06:31] <camelia> rakudo-moar f3b535: OUTPUT«(0 0.792481250360578 1.6094379124341)␤»

[06:32] <uruwi> say (1).map(&log)

[06:32] <uruwi> m: say (1).map(&log)

[06:32] <camelia> rakudo-moar f3b535: OUTPUT«(0)␤»

[06:32] <uruwi> m: my @test = 2, 2, 2, * ** * ** * ... *; say @test[^10].map(&length);

[06:32] <camelia> rakudo-moar f3b535: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XBTugJvACT␤Undeclared routine:␤    &length used at line 1. Did you mean '&elems', '&chars', '&graphs', '&codes'?␤␤»

[06:32] <uruwi> m: my @test = 2, 2, 2, * ** * ** * ... *; say @test[^10].map(&chars);

[06:32] <camelia> rakudo-moar f3b535: OUTPUT«(1 1 1 2 19729 1 1 19729 1 1)␤»

[06:33] <uruwi> m: my @test = 1, 3, 5, * * * * * ... *; say @test[^10].map(&chars);

[06:33] <camelia> rakudo-moar f3b535: OUTPUT«(1 1 1 2 3 5 8 15 27 49)␤»

[06:33] <Hotkeys> also lazy geometric sequences are nice too 

[06:33] <Hotkeys> m: my @geo = 1, 2, 4 ...^ * > 10000; say @geo

[06:33] <camelia> rakudo-moar f3b535: OUTPUT«[1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192]␤»

[06:33] <uruwi> m: my @test = 1, 3, 5, * * * * * ... *; say @test[^80].map(&chars);

[06:33] <camelia> rakudo-moar f3b535: OUTPUT«(timeout)»

[06:34] <uruwi> m: my @test = 1, 3, 5, * * * * * ... *; say @test[^40].map(&chars);

[06:34] <camelia> rakudo-moar f3b535: OUTPUT«(timeout)»

[06:34] <TimToady> m: my @geo = 1, 2, 4 ... 10000; say @geo

[06:34] <camelia> rakudo-moar f3b535: OUTPUT«[1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192]␤»

[06:34] <uruwi> m: my @test = 1, 3, 5, * * * * * ... *; say @test[^20].map(&chars);

[06:34] <camelia> rakudo-moar f3b535: OUTPUT«(1 1 1 2 3 5 8 15 27 49 90 164 302 555 1020 1875 3448 6342 11664 21453)␤»

[06:34] <Hotkeys> TimToady, oh

[06:34] <TimToady> intuited sequences don't have to match exactly any more

[06:34] <Hotkeys> neat

[06:35] <TimToady> m: my @geo = 1, -2, 4 ... 10000; say @geo

[06:35] <camelia> rakudo-moar f3b535: OUTPUT«[1 -2 4 -8 16 -32 64 -128 256 -512 1024 -2048 4096 -8192]␤»

[06:35] <TimToady> even if they change sign

[06:35] <Hotkeys> cool

[06:35] <Hotkeys> m: my @geo = -1, 2, -4 ... 10000; say @geo

[06:35] <camelia> rakudo-moar f3b535: OUTPUT«[-1 2 -4 8 -16 32 -64 128 -256 512 -1024 2048 -4096 8192]␤»

[06:35] <uruwi> m: my @what = 1, 6, 8, ... 10000; say @what

[06:35] <camelia> rakudo-moar f3b535: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CRSEYRiGhm␤Comma found before apparent series operator; please remove comma (or put parens␤    around the ... listop, or use 'fail' instead of ...)␤at /tmp/CRSEYRiGhm:1␤------> 3my @what = 1, 6, 8,7…»

[06:36] <uruwi> m: my @what = 1, 6, 8 ... 10000; say @what

[06:36] <camelia> rakudo-moar f3b535: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,6,8 (or did you really mean '..'?)␤  in block <unit> at /tmp/rF_mweXWcH:1␤␤»

[06:36] <uruwi> m: my @what = 1, 4, 9 ... 10000; say @what

[06:36] <camelia> rakudo-moar f3b535: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,4,9 (or did you really mean '..'?)␤  in block <unit> at /tmp/7sXfX4HhmV:1␤␤»

[06:36] <Hotkeys> so it ignores sign for the upper limit?

[06:36] <uruwi> m: my @what = 1, 4, 16 ... 10000; say @what

[06:36] <camelia> rakudo-moar f3b535: OUTPUT«[1 4 16 64 256 1024 4096]␤»

[06:36] <TimToady> yes, it takes absolute value for that

[06:37] <ShimmerFairy> That error message suddenly makes me think of what use something like    1, 2, 3, fail 10000    would have :P

[06:37] <TimToady> that's more to tell people what the ... was interpreted as than a serious suggestion

[06:37] *** FROGGS joined
[06:38] <ShimmerFairy> TimToady: I figured it's one of the less common intentions in that context, but it's still a funny expression to consider :)

[06:38] *** FROGGS[mobile]2 left
[06:38] <Hotkeys> so if you wanted to take into consideration the sign, 

[06:38] <Hotkeys> m: my @geo = -1, 2, -4, ...^ * > 10000; say @geo

[06:38] <camelia> rakudo-moar f3b535: OUTPUT«5===SORRY!5=== Error while compiling /tmp/eLM7NZ5w_8␤Comma found before apparent series operator; please remove comma (or put parens␤    around the ... listop, or use 'fail' instead of ...)␤at /tmp/eLM7NZ5w_8:1␤------> 3my @geo = -1, 2, -4,7…»

[06:38] <Hotkeys> m: my @geo = -1, 2, -4 ...^ * > 10000; say @geo

[06:38] <camelia> rakudo-moar f3b535: OUTPUT«[-1 2 -4 8 -16 32 -64 128 -256 512 -1024 2048 -4096 8192 -16384]␤»

[06:39] <uruwi> Anyone managed to build and run the NCurses module on Windows?

[06:39] <FROGGS> uruwi: I've never tried

[06:39] <uruwi> wb

[06:39] <FROGGS> uruwi: is there a Perl 5 version that works on windows?

[06:39] <FROGGS> maybe we can look what they do

[06:42] <uruwi> Well, not ncurses per se, but it has what I want https://metacpan.org/pod/Games::Roguelike::Console

[06:43] <Hotkeys> m: my @alphabet = 'a', 'b', ... 'z'; say @alphabet

[06:43] <camelia> rakudo-moar f3b535: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tG32An3I0Q␤Comma found before apparent series operator; please remove comma (or put parens␤    around the ... listop, or use 'fail' instead of ...)␤at /tmp/tG32An3I0Q:1␤------> 3my @alphabet = 'a', 'b'…»

[06:43] <Hotkeys> m: my @alphabet = 'a', 'b' ... 'z'; say @alphabet

[06:44] <camelia> rakudo-moar f3b535: OUTPUT«[a b c d e f g h i j k l m n o p q r s t u v w x y z]␤»

[06:44] <Hotkeys> neat

[06:44] <uruwi> m: my @hiragana = 'あ', 'い' ... 'ん'; say @hiragana

[06:45] <FROGGS> uruwi: so, port that instead?

[06:45] <camelia> rakudo-moar f3b535: OUTPUT«(timeout)»

[06:45] <Hotkeys> lol

[06:45] <uruwi> You know what, the framebuffer functionality would be useful too

[06:46] <ShimmerFairy> m: say "あ" ~~ /<rangechar>/

[06:46] <camelia> rakudo-moar f3b535: OUTPUT«Method 'rangechar' not found for invocant of class 'Cursor'␤  in block <unit> at /tmp/1R_5FaG3d_:1␤␤»

[06:46] <FROGGS> grr, I can't even copy+paste these properly in my chat client

[06:46] *** tokuhirom joined
[06:46] <ShimmerFairy> I could swear that was a rule name...

[06:46] <uruwi> m: my @alphabet = 'α', 'β' ... 'ω'; say @alphabet

[06:46] <camelia> rakudo-moar f3b535: OUTPUT«[α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω]␤»

[06:47] *** aborazmeh left
[06:48] <TimToady> m: say "あ"..."ん"

[06:48] <camelia> rakudo-moar f3b535: OUTPUT«(あ ぃ い ぅ う ぇ え ぉ お か が き ぎ く ぐ け げ こ ご さ ざ し じ す ず せ ぜ そ ぞ た だ ち ぢ っ つ づ て で と ど な に ぬ ね の は ば ぱ ひ び ぴ ふ ぶ ぷ へ べ ぺ ほ ぼ ぽ ま み む め…»

[06:49] *** [Sno] joined
[06:51] *** tokuhirom left
[06:52] *** ecocode joined
[06:52] <uruwi> FROGGS I probably should have used a frame buffer from the start

[06:53] *** bjz_ left
[06:54] <uruwi> Anyway, it's way too late at night for me to port this today.

[06:54] <uruwi> I'll probably begin tomorrow.

[06:54] <FROGGS> ++uruwi :o)

[06:55] *** bjz joined
[06:55] <uruwi> Yikes, what's been done for Win32...

[06:57] <kmel> m: say 'ا'...'ي'

[06:57] <camelia> rakudo-moar f3b535: OUTPUT«(ا ب ة ت ث ج ح خ د ذ ر ز س ش ص ض ط ظ ع غ ػ ؼ ؽ ؾ ؿ ـ ف ق ك ل م ن ه و ى ي)␤»

[06:58] <uruwi> m: say [+] 'ا'...'ي'

[06:58] <camelia> rakudo-moar f3b535: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '7⏏5ا' (indicated by 7⏏)␤  in block <unit> at /tmp/Ue8ms31u19:1␤␤Actually thrown at:␤  in block <unit> at /tmp/Ue8ms31u19:1␤␤»

[06:58] <uruwi> m: say [~] 'ا'...'ي'

[06:58] <camelia> rakudo-moar f3b535: OUTPUT«ابةتثجحخدذرزسشصضطظعغػؼؽؾؿـفقكلمنهوىي␤»

[06:59] <kmel> i see additional letters is this normal?

[06:59] <uruwi> say chr(0) .. chr(65535)

[06:59] <uruwi> m: say chr(0) .. chr(65535)

[06:59] <camelia> rakudo-moar f3b535: OUTPUT«"\x[0]".."\x{FFFF}"␤»

[06:59] <uruwi> m: say chr(0) .. chr(255)

[06:59] <camelia> rakudo-moar f3b535: OUTPUT«"\x[0]".."ÿ"␤»

[06:59] <uruwi> say chr(7)

[07:00] <uruwi> m: say chr(7)

[07:00] <camelia> rakudo-moar f3b535: OUTPUT«␤»

[07:00] <uruwi> m: for 0 .. ^100 {say chr(7);}

[07:00] <camelia> rakudo-moar f3b535: OUTPUT«Range objects are not valid endpoints for Ranges␤  in block <unit> at /tmp/AQvN6cHeEK:1␤␤»

[07:00] <uruwi> m: for 0 .. 100 {say chr(7);}

[07:00] <camelia> rakudo-moar f3b535: OUTPUT«␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤…»

[07:00] <uruwi> m: for 0 .. 100 {say "\a";}

[07:00] <camelia> rakudo-moar f3b535: OUTPUT«␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤…»

[07:00] <Hotkeys> oh

[07:00] <Hotkeys> I wondered where the bels were coming from

[07:01] <moritz> .u ␤

[07:01] <yoleaux> U+2424 SYMBOL FOR NEWLINE [So] (␤)

[07:01] <moritz> not a BEL

[07:02] <Hotkeys> oh

[07:02] *** softmoth joined
[07:02] <Hotkeys> well it's making me bel

[07:06] *** softmoth left
[07:10] *** CIAvash joined
[07:19] *** laouji left
[07:20] <ShimmerFairy> Hotkeys: one reason I disabled my system beep :)   (the main reason being that, using headphones as my speakers, there's never a time where I could hear system noises that won't also interrupt me listening to something)

[07:20] <ShimmerFairy> moritz: I'm sure it's the 0x07 being printed between those NL symbols, not the symbols themselves

[07:21] <ShimmerFairy> m: say "\a".uniname

[07:21] <camelia> rakudo-moar f3b535: OUTPUT«BELL␤»

[07:21] <moritz> ShimmerFairy: ah

[07:22] *** laouji joined
[07:22] *** abraxxa joined
[07:24] *** RabidGravy joined
[07:24] *** firstdayonthejob left
[07:31] <Hotkeys> night all

[07:31] *** Hotkeys left
[07:34] *** leont joined
[07:35] *** FROGGS left
[07:35] <masak> good morning, #perl6

[07:38] *** ely-se joined
[07:41] *** adhoc left
[07:41] *** cognominal left
[07:43] *** adhoc joined
[07:43] *** leont left
[07:46] *** RabidGravy left
[07:48] *** RabidGravy joined
[07:50] <[ptc]> o/ masak 

[07:50] *** eliasr joined
[07:54] *** WizJin left
[07:55] *** xinming joined
[07:57] *** ][Sno][ joined
[08:01] *** [Sno] left
[08:01] *** xinming left
[08:01] *** zakharyas joined
[08:02] *** FROGGS joined
[08:08] *** WizJin joined
[08:12] *** darutoko joined
[08:13] <kmel> m: 'good morning'.say

[08:13] <camelia> rakudo-moar f3b535: OUTPUT«good morning␤»

[08:15] *** labster joined
[08:21] *** Kogurr left
[08:25] <nine> FROGGS: Perl 5 for Windows is http://strawberryperl.com/

[08:26] <FROGGS> nine: hi, I know strawberry... why are you telling about this?

[08:26] *** jkva_ joined
[08:26] <FROGGS> I'm a windows + strawberry + activeperl user after all :o)

[08:27] <Timbus> he probably misinterpreted this: <FROGGS> uruwi: is there a Perl 5 version that works on windows?

[08:28] *** ely-se left
[08:28] <FROGGS> ohh

[08:28] <FROGGS> nine: this was about an ncurses lib for windows

[08:28] <nine> FROGGS: < FROGGS> uruwi: is there a Perl 5 version that works on windows?

[08:28] <nine> ok :)

[08:28] <FROGGS> :o)

[08:28] *** jkva left
[08:29] *** Hor|zon joined
[08:29] *** virtualsue joined
[08:29] <nine> Probably been skimming the backlog too fast. It's reeeeeally hard to keep up when one is afk for an evening.

[08:31] <FROGGS> aye

[08:32] *** ely-se joined
[08:34] *** adhoc left
[08:34] *** dakkar joined
[08:36] *** sivoais joined
[08:42] *** adhoc joined
[08:45] *** sivoais left
[08:46] *** sivoais joined
[08:47] *** tokuhirom joined
[08:50] *** luiz_lha joined
[08:50] *** softmoth joined
[08:50] *** luiz_lha is now known as Guest13051

[08:51] *** davido_ joined
[08:51] *** Guest13051 is now known as luizl_lha

[08:51] *** luizl_lha is now known as luiz_lha

[08:52] *** tokuhirom left
[08:54] *** sivoais left
[08:55] *** softmoth left
[08:57] *** sivoais joined
[08:59] <Ulti> how do you set the max threads for the thread pool?

[09:00] <Ulti> (and does that include GC threads or are they lower level)

[09:00] *** FireFly left
[09:00] <moritz> I don't think the GC runs in a separate thread

[09:01] <Ulti> oh really, I thought it runs in parallel itself when it gets called

[09:02] <moritz> maybe I'm wrong though

[09:02] *** davido_ left
[09:02] <moritz> m: say $*SCHEDULER

[09:02] <camelia> rakudo-moar f3b535: OUTPUT«ThreadPoolScheduler.new(initial_threads => 0, max_threads => 16, uncaught_handler => Callable)␤»

[09:03] <moritz> Ulti: you can assign a new ThreadPoolScheduler to $*SCHEDULER, and give it a max_threads

[09:03] <Ulti> okedoke thanks

[09:04] <Ulti> though sort of wonder what happens if there are already threads when you do that o___O

[09:04] *** jsnathan joined
[09:04] *** FireFly joined
[09:04] *** sivoais left
[09:06] *** virtualsue left
[09:06] *** rurban joined
[09:06] <kmel> what is the correct way of referencing perl 6: Perl 6 or Perl6 or perl 6 or perl6 ?

[09:06] *** rarara joined
[09:06] <moritz> kmel: Perl 6, preferably with a non-breaking space between Perl and 6 :-)

[09:07] *** sivoais joined
[09:07] <kmel> thanks moritz

[09:07] *** ][Sno][ is now known as [Sno]

[09:08] <Ulti> perl6 would be the actual compiler you call specifically rather than the language

[09:10] *** ely-se left
[09:12] *** chenryn_ joined
[09:12] <kmel> So Perl 6 is the language specification

[09:12] <kmel> and perl6 is the compiler

[09:12] *** diana_olhovik_ joined
[09:12] <ShimmerFairy> I personally don't think it matters how you write it ("the actual compiler" depends on the implementation, happens to be "perl6" for rakudo). I also don't believe NBSP is anything work worrying over :)

[09:13] <masak> kmel: yes. well, `perl6` is the name of the executable.

[09:13] <masak> kmel: people refer to the compiler+runtime as "Rakudo"

[09:13] *** brrt joined
[09:13] <chenryn_> how to use varibles in regex/token/rule?

[09:13] <masak> chenryn_: just use them

[09:14] <masak> m: my $s = "oo"; say so "foo" ~~ / f $s /

[09:14] <camelia> rakudo-moar f3b535: OUTPUT«True␤»

[09:14] <kmel> thanks

[09:14] *** ely-se joined
[09:14] <masak> m: my $s = /oo/; say so "foo" ~~ / f $s /

[09:14] <camelia> rakudo-moar f3b535: OUTPUT«True␤»

[09:14] <masak> m: my $s = /o+/; say so "foo" ~~ / f $s /

[09:14] <camelia> rakudo-moar f3b535: OUTPUT«True␤»

[09:14] <kmel> m: say 'thanks everyone :)'

[09:14] <camelia> rakudo-moar f3b535: OUTPUT«thanks everyone :)␤»

[09:15] *** sivoais left
[09:16] <RabidGravy> Ulti: also for convenience most of the methods that start new threads such as Promise.start take an optional scheduler argument

[09:16] *** espadrine_ joined
[09:17] *** sivoais joined
[09:17] *** TEttinger left
[09:18] <kmel> say 'hello world'; and 'hello world'.say yield the same result. Is it a valid example of Tim Toady? If I was to explain what Tim Toady is.

[09:18] <Ulti> RabidGravy does .race() ?

[09:19] <RabidGravy> I somewhat doubt it

[09:20] <baest> kmel: I would say so

[09:20] <brrt> good * #perl6, too

[09:20] <masak> kmel: sure

[09:21] <kmel> thanks baest and masak

[09:21] <masak> kmel: another example: `for @a -> $elem { ... }` vs `@a.map: -> $elem { ... }`

[09:21] *** virtualsue joined
[09:22] <moritz> constructing a hash from keys values: my %h; %h{@keys} = @values;  or   my %h = @keys Z=> @values;

[09:22] <masak> kmel: and you probably want to write it as TIMTOWTDI (There Is More Than One Way To Do It)

[09:22] <llfourn> m: say &say; say Str.^find_method('say').package;

[09:22] <camelia> rakudo-moar f3b535: OUTPUT«sub say (| is raw) { #`(Sub|60192304) ... }␤(Mu)␤»

[09:23] <llfourn> though they are not exactly the same thing under the hood :)

[09:23] <kmel> masak: ok 

[09:23] <rarara> time perl6 -e 'say "Ciao"' : user    0m0.156s ; time perl6 <<< 'say "Ciao"' : user    0m2.070s. Wow

[09:23] <masak> kmel: though, of course, there's more than one way to write it :P

[09:24] <chenryn_> p6: say "key=value" ~~ /$<key>=\N+ '=' $<value>=\N+/; 

[09:24] <camelia> rakudo-moar f3b535: OUTPUT«｢key=value｣␤ key => ｢key｣␤ value => ｢value｣␤»

[09:24] <chenryn_> p6: my rule field { $<key>=\N+ '=' $<value>=\N+ }; say "key=value" ~~ &field;

[09:24] <camelia> rakudo-moar f3b535: OUTPUT«Nil␤»

[09:24] <chenryn_> can't write named capture directly in rule?

[09:24] <kmel> masak :)

[09:25] *** diana_olhovik_ left
[09:25] *** sivoais left
[09:25] <DrForr_> rarara: Oddly I get the exact opposite. sys 0m0.053s without <<<, 0m0.008s with.

[09:25] <DrForr_> But I might be more up-to-date, maybe rebuild your rakudo?

[09:25] <rarara> I will

[09:27] *** sivoais joined
[09:30] *** mattprelude joined
[09:30] <ShimmerFairy> m: my regex field { $<key>=\N+ '=' $<value>=\N+ }; say "key=value" ~~ &field;

[09:30] <camelia> rakudo-moar f3b535: OUTPUT«｢key=value｣␤ key => ｢key｣␤ value => ｢value｣␤»

[09:30] <RabidGravy> It would be amusing to find the thread from clpm from about 1998 wherein someone asked "how do I find the length of a string" and it went on for a week with people posting ever more ludicruous ways of doing it

[09:30] <ShimmerFairy> chenryn_: 'rule' considers whitespace significant; 'regex' is equivalent to the ~~ / ... / example you used

[09:30] <RabidGravy> and then redo it as Perl 6

[09:30] <ShimmerFairy> (there's also 'token' , which is like 'regex' but disables backtracking behavior)

[09:31] *** tadzik joined
[09:31] * llfourn just learnt something new about token

[09:32] *** M-tadzik1 left
[09:33] <chenryn_> so, can't ~~ a rule but only regex?

[09:34] <ShimmerFairy> chenryn_: that's not it, the problem is that you had whitespace in that rule, but there's no whitespace in the text you were matching

[09:35] *** virtualsue left
[09:35] *** sivoais left
[09:37] *** tokuhirom joined
[09:38] *** sivoais joined
[09:38] <ShimmerFairy> chenryn_: oh, forgot to mention that 'rule' also doesn't do any backtracking (just like 'token'), so the first \N+ would've captured that entire string and left nothing for the rest of it to match.

[09:38] *** jsnathan left
[09:39] *** ely-se left
[09:40] *** vytas left
[09:40] *** margeas joined
[09:41] *** tokuhirom left
[09:43] <chenryn_> p6: my $field_split = ' ';my $value_split = '=';my regex field { $<key>=\N+ $value_split $<value>=\N+ };my regex kv { <field>+ % $field_split };say 'key=value k2=value2' ~~ &kv;

[09:43] <camelia> rakudo-moar f3b535: OUTPUT«｢key=value k2=value2｣␤ field => ｢key=value k2=value2｣␤  key => ｢key=value k2｣␤  value => ｢value2｣␤»

[09:43] <chenryn_> oh, yes...

[09:47] *** sivoais left
[09:48] *** sivoais joined
[09:48] *** sivoais left
[09:48] *** sivoais joined
[09:48] *** spider-mario joined
[09:52] *** jsnathan joined
[09:54] <rarara> Is it possible to tell rakudobrew to download all the packages and then to rakudobrew to build withoud downloading?

[09:54] <rarara> github.com[0: 192.30.252.128]: errno=Network is unreachable

[09:54] <rarara> this is what i get on the cluster

[09:57] *** sivoais left
[09:58] *** sivoais joined
[09:58] <rarara> because, btw, a simple rsync -av .rakudobrew me-there@where does also not work

[10:01] <carlin> colomon: any idea why Crypt::Bcrypt isn't listed on smoke.perl6.org ?

[10:02] <jnthn> afternoon, #perl6

[10:02] <yoleaux> 06:18Z <ShimmerFairy> jnthn: just taking a quick glance at NQP's regex stuff, I notice case-insensitive stuff uses uc and lc variants. Now that we have nqp::fc, would it be beneficial to have regexes use fc for :i and :ii ? Or do those modifiers explicitly require just uc/lc checking in spec somewhere (nothing suggesting such in S05)?

[10:05] <jnthn> .tell ShimmerFairy The regex stuff doesn't use fc 'cus we only just implemented fc. :) We should use it instead of lc.

[10:05] <yoleaux> jnthn: I'll pass your message to ShimmerFairy.

[10:06] <ShimmerFairy> ding!

[10:06] <yoleaux> 10:05Z <jnthn> ShimmerFairy: The regex stuff doesn't use fc 'cus we only just implemented fc. :) We should use it instead of lc.

[10:06] <ShimmerFairy> jnthn: I of course figured it's because fc is new, I was just wondering if that was something to be done, or if there was perhaps a specific reason to not change it over :)

[10:07] *** sivoais left
[10:07] <jnthn> m: grammar G { token TOP { <digit> <alpha> } }; class A { method TOP((:$digit, :$alpha)) { say $digit; say $alpha; } }; G.parse('1a', actions => A)

[10:07] <camelia> rakudo-moar f3b535: OUTPUT«｢1｣␤｢a｣␤»

[10:08] <jnthn> .tell n0tjack about your unpacking $/ question in the backlog that I don't think anyone answered: grammar G { token TOP { <digit> <alpha> } }; class A { method TOP((:$digit, :$alpha)) { say $digit; say $alpha; } }; G.parse('1a', actions => A)

[10:08] <yoleaux> jnthn: I'll pass your message to n0tjack.

[10:08] *** sivoais joined
[10:09] *** vytas joined
[10:11] *** risou_awy joined
[10:11] *** risou_awy is now known as risou

[10:14] *** hohoho left
[10:14] *** hohoho joined
[10:18] *** sivoais left
[10:19] *** sivoais joined
[10:23] *** ely-se joined
[10:23] <brrt> afternoon jnthn

[10:25] <jnthn> o/ brrt

[10:28] *** g5 joined
[10:28] *** sivoais left
[10:28] *** g5 left
[10:29] *** cygx joined
[10:29] <cygx> o/

[10:29] *** sivoais joined
[10:30] <cygx> any thoughts on adding a :$match flag to Str.split and have it retunr strings by default in case of :all?

[10:31] <cygx> I found it rather surprising to get back a list of mixed strings and Match objects...

[10:31] *** vytas left
[10:36] *** vytas joined
[10:37] <lizmat> good *, #perl6!

[10:37] <dalek> rakudo/nom: 5271fc7 | lizmat++ | src/core/ (4 files):

[10:37] <dalek> rakudo/nom: Use private methods for better optimizations

[10:37] <dalek> rakudo/nom: 

[10:37] <dalek> rakudo/nom: Well, at some point in the future.

[10:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5271fc7d69

[10:38] *** sivoais left
[10:38] *** ely-se left
[10:38] *** softmoth joined
[10:39] <jnthn> lizmat: I think we already do something with 'em :)

[10:39] <lizmat> well, I tested it yesterday, didn't see a difference in performance though  :-(

[10:39] *** sivoais joined
[10:40] <lizmat> class A { method a() {}; method b() { self.a } }; for ^1000000 { A.b }    # versus:

[10:40] <lizmat> class A { method !a() {}; method b() { self!a } }; for ^1000000 { A.b }

[10:41] <jnthn> It'll be hard to see

[10:41] <jnthn> I suspect in those cases everything gets inlined and it's a wash

[10:41] <jnthn> And non-privates get dynamic optimization

[10:42] <lizmat> ok, in any case, I thought it would be better that way :-)

[10:42] *** tokuhirom joined
[10:42] * lizmat starts backlogging

[10:42] <jnthn> So while the static code generation is perhaps a bit better for privates (a lookup by name less), once spesh gets its hands on the code it'll all be the same. :)

[10:43] <dalek> rakudo/nom: 9db48e9 | cygx++ | src/core/Str.pm:

[10:43] <dalek> rakudo/nom: Add missing Slip.new(...) to Str.split(:all)

[10:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9db48e945a

[10:43] <dalek> rakudo/nom: b16110d | lizmat++ | src/core/Str.pm:

[10:43] <dalek> rakudo/nom: Merge pull request #551 from cygx/patch-3

[10:43] <dalek> rakudo/nom: 

[10:43] <dalek> rakudo/nom: Add missing Slip.new(...) to Str.split(:all)

[10:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b16110d293

[10:43] *** softmoth left
[10:44] <cygx> lizmat++

[10:47] *** tokuhirom left
[10:48] *** sivoais left
[10:49] <|Tux|> test             50000    36.887    36.778

[10:49] <|Tux|> test-t           50000    37.560    37.452

[10:49] *** sivoais joined
[10:52] *** brrt left
[10:56] <nine> Regardless of performance considerations, making these methods private sounds like a good idea.

[10:56] <jnthn> Yes, agree

[10:57] *** diana_olhovik joined
[10:58] *** sivoais left
[10:59] *** sivoais joined
[11:01] *** diana_olhovik left
[11:03] *** ely-se joined
[11:04] *** cvxcv joined
[11:04] *** cvxcv left
[11:11] <|Tux|> lizmat, your CSV6 commit causes a syntax error (you do not even need to run the test suite)

[11:11] <|Tux|> ===SORRY!=== Error while compiling /pro/3gl/CPAN/Text-CSV6/lib/Text/CSV.pm

[11:11] <|Tux|> Missing block

[11:11] <|Tux|> at /pro/3gl/CPAN/Text-CSV6/lib/Text/CSV.pm:1680

[11:11] <lizmat> grrr  :-)

[11:15] *** hohoho left
[11:15] <dalek> ecosystem: c7f50ff | azawawi++ | META.list:

[11:15] <dalek> ecosystem: Add Selenium::WebDriver

[11:15] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/c7f50ffa2b

[11:16] *** larion joined
[11:16] <lizmat> m: class A { method a(@a) { @a.grep(self) } }; say A.a(A xx 5)  # [Tux]  not sure why that fails in CSV

[11:16] <camelia> rakudo-moar 5271fc: OUTPUT«((A) (A) (A) (A) (A))␤»

[11:18] <lizmat> [Tux]: better ?

[11:19] <|Tux|> yep

[11:20] <lizmat> I do so many recompiles, and needing to reinstall everything... I hope we get a better fix for that soon

[11:21] * jnthn too :)

[11:21] <jnthn> Hairy problem is hairy

[11:25] *** azawawi joined
[11:27] <ely-se> Hairy Potter

[11:27] <azawawi> hi

[11:27] <ely-se> hi azawawi!

[11:28] <azawawi> is there an http client library in Perl 6 that .post actually works?

[11:30] <RabidGravy> HTTP::UserAgent will happily do a POST

[11:31] <RabidGravy> though this may depend on what you want to actually post, lots of work going in at the moment

[11:31] <RabidGravy> if it doesn't work file an issue ;-)

[11:32] <RabidGravy> anyway, getting cabin fever - off out to the pub for a bit ;-)

[11:32] *** diana_olhovik_ joined
[11:32] *** ggoebel2 joined
[11:33] *** hohoho joined
[11:33] *** mayuresh joined
[11:33] <mayuresh> p6: say 3;

[11:33] <camelia> rakudo-moar b16110: OUTPUT«3␤»

[11:34] <mayuresh> p6: say "Hello, world!";

[11:34] <camelia> rakudo-moar b16110: OUTPUT«Hello, world!␤»

[11:34] <mayuresh> ah, the camelia bot is rather cool ...

[11:34] <mayuresh> :)

[11:35] *** mayuresh left
[11:36] *** araujo joined
[11:36] *** RabidGravy left
[11:37] *** kmel left
[11:37] *** araujo left
[11:37] *** eliasr left
[11:37] *** araujo joined
[11:38] *** pmurias joined
[11:39] <lizmat> m: Str.new(value => q/Hello, world!/ ~ "\n").print   # more complicated way

[11:39] <camelia> rakudo-moar b16110: OUTPUT«Hello, world!␤»

[11:39] <|Tux|> test             50000    36.255    36.146

[11:39] <|Tux|> test-t           50000    37.664    37.555

[11:39] <lizmat> .5 sec less ?

[11:40] <azawawi> https://github.com/sergot/http-useragent/blob/master/lib/HTTP/UserAgent.pm6 # doesnt contain even a post method :)

[11:42] <pmurias> hi

[11:42] *** diana_olhovik_ left
[11:43] <dalek> nqp: 1764d85 | (Pawel Murias)++ | src/vm/js/nqp-runtime/io.js:

[11:43] <dalek> nqp: [js] Fix bug in nqp::getenvhash.

[11:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1764d8599f

[11:43] <dalek> nqp: 0945366 | (Pawel Murias)++ | src/vm/js/ (3 files):

[11:43] <dalek> nqp: [js] Implement nqp::spawn using the nqp-js-io module (For now lives on github as pmurias/nqp-js-io).

[11:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0945366d7d

[11:43] <dalek> nqp: 7330628 | (Pawel Murias)++ | / (7 files):

[11:43] <dalek> nqp: [js] Load the setting in the bootstrapped nqp-js.

[11:43] <dalek> nqp: 

[11:43] <dalek> nqp: node nqp-bootstrapped.js t/nqp/01-literals.t passes.

[11:43] <dalek> nqp: 

[11:43] <dalek> nqp: It uses a bunch of hacks that need to be cleaned up.

[11:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7330628d94

[11:43] *** dayangkun left
[11:43] <jnthn> pmurias++

[11:44] *** doublec_ joined
[11:44] <CIAvash> azawawi: https://github.com/sergot/http-useragent/blob/master/lib/HTTP/Request.pm6

[11:44] *** kid51 joined
[11:45] *** travis-ci joined
[11:45] <travis-ci> NQP build failed. Pawel Murias '[js] Load the setting in the bootstrapped nqp-js.

[11:45] <travis-ci> https://travis-ci.org/perl6/nqp/builds/85310473 https://github.com/perl6/nqp/compare/6ac0c44f92ad...7330628d94a6

[11:45] *** travis-ci left
[11:47] *** doublec_ is now known as doublec

[11:49] <pmurias> hmm, nqp-js-io fails to build on travis for some reason :(

[11:51] *** loren joined
[11:52] <iv> looks like it's using a very old version of node 

[11:53] <loren> good evening, perl6

[11:54] <dalek> nqp: 16cd47d | (Pawel Murias)++ | src/vm/js/ (2 files):

[11:54] <dalek> nqp: [js] Implement nqp::getmessage.

[11:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/16cd47d1c2

[11:54] <dalek> nqp: de79fcf | (Pawel Murias)++ | t/nqp/44-try-catch.t:

[11:54] <dalek> nqp: Test nqp::getmessage.

[11:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/de79fcf514

[11:56] *** kid51 left
[11:57] *** travis-ci joined
[11:57] <travis-ci> NQP build failed. Pawel Murias 'Test nqp::getmessage.'

[11:57] <travis-ci> https://travis-ci.org/perl6/nqp/builds/85312361 https://github.com/perl6/nqp/compare/7330628d94a6...de79fcf514f8

[11:57] *** travis-ci left
[11:59] <nine> pmurias++ # still my lonesome hero :)

[12:05] *** uruwi left
[12:05] *** pierrot_ left
[12:08] *** ely-se left
[12:11] *** telex left
[12:12] *** ely-se joined
[12:12] *** telex joined
[12:12] *** laouji left
[12:16] *** pierrot joined
[12:16] *** hohoho left
[12:18] *** ZoffixW left
[12:18] *** hohoho joined
[12:18] *** espadrine_ is now known as espadrine

[12:19] *** Jaglor joined
[12:19] *** Jaglor left
[12:21] *** cognominal joined
[12:22] *** reneeb joined
[12:27] *** softmoth joined
[12:27] *** RaTTuS|BIG joined
[12:27] *** jkva joined
[12:28] *** margeas left
[12:29] *** CIAvash left
[12:30] *** jkva_ left
[12:31] *** softmoth left
[12:39] <azawawi> sergot: ping

[12:39] *** sufrostico joined
[12:39] *** sufrostico left
[12:42] *** kmel joined
[12:44] *** tokuhirom joined
[12:44] <moritz> ok, heretic question: python has inverted stack traces, and the error message at the bottom

[12:44] <moritz> what do you think of that? something to adopt? or rather avoid?

[12:45] <arnsholt> Confuses me endlessly, when it's been a while since I programmed in Python =)

[12:45] <arnsholt> But potentially a good idea, yeah

[12:45] <[Coke]> -1 from me; I like having the error be right next to the last output

[12:46] *** llfourn left
[12:46] <arnsholt> It's actually very ergonomic when the stack traces start getting long

[12:46] <lizmat> simple to add with an env variable. fwiw

[12:46] <lizmat> well, the non --ll-exception case

[12:48] *** tokuhirom left
[12:50] *** ZoffixW joined
[12:50] <azawawi> sigh, hit another http redirection bug with HTTP::UserAgent :(

[12:51] <azawawi> so far POST + HTTP redirection is not working. Nearly tried everything, LWP::Simple, HTTP::Client (hangs), HTTP::UserAgent(hangs)

[12:51] <ZoffixW> Hey. Does a "clock sequence" have meaning in Perl 6? What is it and how do I obtain it? It's mentioned in 4.1.5 of RFC 4122, but I'm not 100% sure what it is (http://www.rfc-base.org/txt/rfc-4122.txt)

[12:51] <ZoffixW> azawawi, how did HTTP::Tinyish fair?

[12:51] *** ely-se left
[12:52] <azawawi> let me check :)

[12:54] *** rurban left
[12:55] <[Coke]> .see curtisovidpoe

[12:55] <[Coke]> .seen curtisovidpoe

[12:55] <yoleaux> I saw CurtisOvidPoe 13 Oct 2015 13:44Z in #perl6: <CurtisOvidPoe> Heh.

[12:55] * CurtisOvidPoe looks for CurtisOvidPoe

[12:55] <[Coke]> FOUND HIM!

[12:56] <dalek> nqp: cc2b977 | (Pawel Murias)++ | / (2 files):

[12:56] <dalek> nqp: [js] Implement goal and dba rxtypes.

[12:56] <dalek> nqp: 

[12:56] <dalek> nqp: Pass rx_goal.

[12:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cc2b977852

[12:56] <dalek> nqp: e5c012a | (Pawel Murias)++ | / (3 files):

[12:56] <dalek> nqp: [js] Add a make js-test-bootstrapped target.

[12:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e5c012aeb1

[12:59] *** eone joined
[12:59] *** travis-ci joined
[12:59] <travis-ci> NQP build failed. Pawel Murias '[js] Add a make js-test-bootstrapped target.'

[12:59] <travis-ci> https://travis-ci.org/perl6/nqp/builds/85321737 https://github.com/perl6/nqp/compare/de79fcf514f8...e5c012aeb1d4

[12:59] *** travis-ci left
[13:01] *** ely-se joined
[13:03] * [Coke] shakes his fist at travis. 

[13:03] <azawawi> ZoffixW: i tried it with HTTP_TINYISH_DEBUG=1, it uses curl and gets stuck

[13:03] <azawawi> ZoffixW: This is working perfectly https://github.com/azawawi/perl6-selenium-webdriver/blob/master/examples/test_selenium_phantomjs.pl

[13:03] <azawawi> ZoffixW: this gets stuck https://github.com/azawawi/perl6-selenium-webdriver/blob/master/examples/test_selenium_phantomjs.p6

[13:05] <azawawi> hmmm even curl get stuck

[13:05] <ZoffixW> azawawi, what HTTP method does it redirect to?

[13:05] <ZoffixW> IIRC a POST should be only redirected to a GET

[13:05] *** brrt joined
[13:06] <azawawi> ZoffixW: https://gist.github.com/azawawi/e30986625e31cae4f2e9

[13:06] <azawawi> ZoffixW: it is basically against a `phantomjs --webdriver=5555`

[13:07] <azawawi> ZoffixW: it is installed via 'sudo apt-get install phantomjs'  # 1.9

[13:08] <azawawi> LWP::UserAgent from Perl 5 has no problem with it. i think it is doing a workaround.

[13:09] <ZoffixW> I don't have that package. But I'm guessing "* Disables POST, goes with GET" and "* Empty reply from server" are clues. It's expecting the redirect to follow with a POST, not GET.

[13:09] <ZoffixW> Oh, there's actually "> POST /wd/hub/session/185fea20-"... then maybe the other way around, it's expecting a GET, but receiving a POST :P

[13:10] <ZoffixW> In other words... ¯\_(ツ)_/¯

[13:12] <azawawi> well that's true because i added the following https://github.com/azawawi/perl6-selenium-webdriver/blob/master/examples/test_selenium_phantomjs.pl#L47

[13:13] <colomon> carlin: Crypt::Bcrypt got on my “skip” list because it was hanging too often.  I’ll try reinstating it.

[13:14] *** llfourn joined
[13:14] <ZoffixW> azawawi, aha! :)

[13:15] <sergot> azawawi: pong

[13:15] <sergot> it does not, we need to add it :)

[13:15] <sergot> you can build your post request using HTTP::Request

[13:16] <azawawi> sergot: i was trying to use HTTP::UserAgent and somehow hit a redirection bug

[13:16] <azawawi> sergot: already did :)

[13:16] <sergot> and then $useragen->request($your_request)

[13:16] <sergot> azawawi++

[13:17] <azawawi> the goal here is to run automate testing for websites over phantomjs as phase #1 and then go with firefox, ...

[13:17] <azawawi> s/automate/automated/

[13:18] <azawawi> im basically implementing https://code.google.com/p/selenium/wiki/JsonWireProtocol

[13:18] <kmel> is there a function I can call on a scalar that returns its type (Int, Str ect.)?

[13:18] <cygx> m: 42.WHAT

[13:18] <camelia> rakudo-moar b16110: ( no output )

[13:18] <ely-se> m: my $x = 42; say $x.WHAT

[13:18] <camelia> rakudo-moar b16110: OUTPUT«(Int)␤»

[13:19] <psch> m: say Int.^can('WHAT') # it's not quite a function though

[13:19] <camelia> rakudo-moar b16110: OUTPUT«()␤»

[13:19] <sergot> azawawi: what is the problem now?

[13:19] <sergot> could you show me the code?

[13:19] <psch> but i imagine that probably doesn't matter... :)

[13:20] <kmel> thanks ely-se cygx psch

[13:21] <azawawi> sergot: LWP::UserAgent is doing some magic with POST redirection. We're not. Same with curl.

[13:21] <azawawi> sergot: the Perl 5 version that is

[13:21] *** pmurias left
[13:23] <azawawi> sergot: basically phantomjs 1.9 which is now in debian stable responds with an HTTP status 303 to redirect

[13:23] *** rindolf left
[13:23] <azawawi> sergot: 2.0 fixed that

[13:23] <azawawi> sergot: let me update the script to use HTTP::UserAgent

[13:23] *** pmurias joined
[13:27] <dalek> modules.perl6.org: 05c783d | (Zoffix Znet)++ | web/js/main.js:

[13:27] <dalek> modules.perl6.org: Coerce sorter plugin to treat all module names as text

[13:27] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/05c783d171

[13:29] <azawawi> sergot: https://github.com/azawawi/perl6-selenium-webdriver/blob/master/examples/test_selenium_phantomjs.p6#L50

[13:30] <dalek> modules.perl6.org: 31e9990 | (Zoffix Znet)++ | web/ (2 files):

[13:30] <dalek> modules.perl6.org: Disable sort on columns that do not make sense

[13:30] <dalek> modules.perl6.org: 

[13:30] <dalek> modules.perl6.org: Use sorter plugin's options instead of half-fixing this with CSS

[13:30] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/31e9990811

[13:31] *** eone left
[13:33] * azawawi starts debugging HTTP::UserAgent

[13:33] <sergot> azawawi: hnn

[13:33] <sergot> hmm

[13:35] <sergot> What magic actually do you mean? :)

[13:35] <literal> spacebat: there's also perl6-mode, but it's not quite there yet in terms of highlighting

[13:36] <ZoffixW> sergot, I'm guessing this: https://github.com/azawawi/perl6-selenium-webdriver/blob/master/examples/test_selenium_phantomjs.pl#L47

[13:40] <sergot> oh, ok.

[13:41] *** skids joined
[13:43] *** sufrostico joined
[13:43] *** sufrostico left
[13:43] *** bjz left
[13:46] <azawawi> sergot: aha

[13:46] <azawawi> sergot: headers are not preserved on redirection in HTTP::UserAgent?

[13:46] *** bjz joined
[13:46] <sergot> azawawi: let me check

[13:47] <azawawi> sergot: they're not

[13:48] <sergot> azawawi: right

[13:49] *** bjz_ joined
[13:49] <sergot> azawawi: please create an issue for that

[13:49] <azawawi> sergot: im trying to fix it :)

[13:50] <sergot> azawawi++ that's nice! thank! :)

[13:50] *** bjz left
[13:50] <dalek> ecosystem: f30d76f | moznion++ | META.list:

[13:50] <dalek> ecosystem: Add Stream::Buffered

[13:50] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f30d76f614

[13:54] *** rurban joined
[13:55] *** margeas joined
[13:57] *** softmoth joined
[14:01] *** kmel left
[14:04] *** khw joined
[14:05] *** g4 left
[14:05] *** ely-se left
[14:06] *** ZoffixW left
[14:06] <[Coke]> .tell nine - please log out and log back in to RT.

[14:06] <yoleaux> [Coke]: I'll pass your message to nine.

[14:06] *** hohoho left
[14:06] <[Coke]> Also - if folks need help with RT that isn't "make me a perl 6 bug admin", there's an email addy at the bottom of each page, the rt bugadmins seem very helpful.

[14:09] <dalek> rakudo/nom: e3ab6cc | lizmat++ | src/core/Rakudo/Internals.pm:

[14:09] <dalek> rakudo/nom: Add WeightedRoll class

[14:09] <dalek> rakudo/nom: 

[14:09] <dalek> rakudo/nom: It might be of general usage, and was the only way to not have the code

[14:09] <dalek> rakudo/nom: live twice: once for Mix and once for MixHash

[14:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e3ab6ccb3c

[14:09] <dalek> rakudo/nom: 254c1a8 | lizmat++ | src/core/ (6 files):

[14:09] <dalek> rakudo/nom: Some more Bag/BagHash/Mix/MixHash reorganization

[14:09] <dalek> rakudo/nom: 

[14:09] <dalek> rakudo/nom: Basically, backport my experiment of using 2 hashes from last Monday

[14:09] <dalek> rakudo/nom: by taking only the good bits I did.

[14:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/254c1a881e

[14:09] *** rindolf joined
[14:09] *** cygx_ joined
[14:11] <dalek> roast: 08e8c9a | lizmat++ | S32-basics/xxKEY.t:

[14:11] <dalek> roast: Fix test because of simplified code

[14:11] <dalek> roast: 

[14:11] <dalek> roast: Previously, we had an ASSIGN-KEY for Bag/Mix, now we just let the

[14:11] <dalek> roast: fact that there is no container, take care of throwing the error.

[14:11] <dalek> roast: review: https://github.com/perl6/roast/commit/08e8c9adb0

[14:11] <lizmat> cycling&

[14:11] <azawawi> sergot: going to debug it @home. nearly there :)

[14:11] <azawawi> sergot: thanks for your help

[14:11] <azawawi> Zoffix: thanks :)

[14:12] *** cygx left
[14:12] *** azawawi left
[14:14] <sergot> azawawi: thank you too

[14:14] <[Coke]> RT: 1029: nom: 8; glr: 4; weird: 11; LTA: 87; testneeded: 9; xmas: 75

[14:17] *** reneeb left
[14:20] *** ely-se joined
[14:23] <tadzik> oh gods that Ovid's blog post is hilarous

[14:23] <tadzik> and a bit sad as well

[14:25] *** sufrostico joined
[14:25] <[Coke]> I hire consultants here. That rings pretty true, and I get the ones that have -already gone through- a consultanting company screener before they get to me!

[14:25] <[Coke]> *consulting

[14:27] *** loren left
[14:33] *** CJKinni joined
[14:34] *** weihan joined
[14:35] *** cognominal left
[14:42] *** muraiki joined
[14:42] <zostay> is react/whenever/supply documented somewhere? i'm not even finding them described in S17

[14:43] *** RabidGravy joined
[14:45] *** edehont joined
[14:45] *** tokuhirom joined
[14:45] *** ShimmerFairy joined
[14:48] *** cygx_ left
[14:48] *** llfourn left
[14:49] <[Coke]> jnthn++'s presentations are the best place to find that at the moment.

[14:50] *** tokuhirom left
[14:50] <[Coke]> try this: http://www.jnthn.net/papers/2015-spw-concurrency.pdf

[14:50] <jnthn> Also there's a gist somewhere that describes it in ratehr more detail that is to be incorporated into S17 at some point.

[14:50] *** ecocode left
[14:50] <[Coke]> and a todo for docs to get it in there.

[14:51] *** edehont left
[14:53] *** brrt left
[14:54] *** llfourn joined
[15:01] *** CJKinni_ joined
[15:03] *** sufrostico left
[15:04] *** CJKinni left
[15:05] *** blackcat_ joined
[15:05] *** blackcat_ is now known as loren

[15:06] *** ely-se left
[15:07] *** hohoho joined
[15:07] *** zakharyas left
[15:12] *** hohoho left
[15:14] *** spider-mario left
[15:14] <daxim> who is responsible for <https://p6weekly.wordpress.com/2015/10/12/2015-42-unveiling/>?   "# even though there are officially no words starting with ß" is a daxim bait if I've ever seen one

[15:15] <daxim> that only needs one counter example to disprove

[15:15] <daxim> "ßo"

[15:15] <daxim> (that's sorbian)

[15:16] <jnthn> m: "ßo".fc

[15:16] <camelia> rakudo-moar 254c1a: ( no output )

[15:16] <jnthn> m: say "ßo".fc

[15:16] <camelia> rakudo-moar 254c1a: OUTPUT«sso␤»

[15:16] *** ely-se joined
[15:16] <jnthn> m: say "ßo".uc

[15:16] <camelia> rakudo-moar 254c1a: OUTPUT«SSO␤»

[15:16] <jnthn> m: say "ßo".tc

[15:16] <camelia> rakudo-moar 254c1a: OUTPUT«Sso␤»

[15:16] <jnthn> :)

[15:17] * jnthn had to look up what sorbian is :)

[15:17] <daxim> no smiley, because that particular german orthographic rule does not apply

[15:17] <gfldex> Sso is most likely wrong in that case because ß is a legature of s and z (the so called round z)

[15:18] <daxim> it's a letter, not a ligature for at least 120 years

[15:18] <jnthn> Doesn't matter. Perl 6 implements the Unicode SpecialCasing/CaseFolding rules.

[15:18] <jnthn> If you want anything other than those, that's for module space.

[15:18] <daxim> and it combined ſ and s, not s and z

[15:19] <daxim> yeah, I' know, it's a bug in unicode

[15:19] <daxim> they cannot fix it because of reasons.  it's complicated

[15:19] <jnthn> :)

[15:19] <ShimmerFairy> daxim: I concur with you, it really should be ß <-> ẞ   :)

[15:19] <daxim> I have a p5 module that attempts to fix it

[15:19] <jnthn> Yeah, I started reading a little on it and was like...OK, I don't even have time for this, I'll just get on with doing what Unicode says.

[15:20] *** s34n left
[15:20] <jnthn> They seem to take compatability quite seriously... That's probably a good thing overall.

[15:20] <ShimmerFairy> daxim: AFAIU, the best/only solution would be if they just added two new symbols that implemented the proper casing, and deprecated the existing ones. (Though just changing the properties would be much simpler)

[15:20] *** jkva left
[15:20] <jnthn> Well, stability, not compatibility.

[15:21] <loren>  my $l = IO::Socket::INET.new(:listen, :localport(xxxx)); my $c = $l.accept; while my $buf = $c.recv(:bin) { $buf.decode('utf-8').say; }; $c.close;

[15:21] <loren>  The simple service will terminate when i press CTRL+C in the client side. 

[15:22] <zostay> thx [Coke]

[15:22] *** weihan left
[15:22] <ShimmerFairy> jnthn: btw, I do think we should be doing what Unicode says in core (as you've done), even if they let an erroneous application of NFKC slip through :P

[15:23] <daxim> at least now I have a strong motivation to write my first p6 module

[15:23] *** weihan joined
[15:24] *** uruwi joined
[15:24] <uruwi> Back

[15:25] *** weihan left
[15:25] *** weihan joined
[15:26] <uruwi> Still going to port Games::Rougelike

[15:27] *** liztormato joined
[15:27] *** sufrostico joined
[15:28] *** liztormato left
[15:28] *** liztormato joined
[15:28] *** ely-se left
[15:29] <loren> '$buf.decode('utf-8')' will throw a exception when $buf is not a string. the document not mention that.

[15:31] <jnthn> loren: It's still appropriate. You can't write robust code like that. What if you get a multi-byte UTF-8 sequence spread over a couple of packets?

[15:31] *** s_kilk joined
[15:32] <jnthn> The documentation for .decode should mention what happens if it can't decode though, so if it doesn't that deserves an doc issue

[15:33] <loren> ok, thks very much, jnthn 

[15:33] *** RabidGravy left
[15:33] *** jonathan__ joined
[15:33] <jnthn> (At some point we should also support things like inserting a replacement char too)

[15:33] <loren> i'll take more test 

[15:33] *** jonathan__ is now known as RabidGravy

[15:34] <mrf> jnthn: is there currently any way to decode streamed in bytes without waiting for the entire stream to complete?

[15:34] <jnthn> mrf: Use the string-level rather than byte-level API on sockets.

[15:34] <jnthn> mrf: I plan to expose a streaming API for it too

[15:35] *** jkva joined
[15:35] <jnthn> (Hopefully pre-xmas)

[15:35] <RabidGravy> while we're on the subject of sockets, does the NQP socket api expose timeout for connect?

[15:36] <jnthn> RabidGravy: Not afaik

[15:36] * jnthn will take a good pass over I/O things in November

[15:37] <dalek> nqp: 932548b | (Pawel Murias)++ | src/vm/js/ (2 files):

[15:37] <dalek> nqp: [js] avoid emitting a needless warning

[15:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/932548bcfe

[15:37] <dalek> nqp: b3a4cbf | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[15:37] <dalek> nqp: [js] Stringify the key value things we get while iterating on hash to the key.

[15:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b3a4cbf834

[15:37] <dalek> nqp: 25008c3 | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[15:37] <dalek> nqp: [js] Make nqp::istype work on the result of nqp::hash.

[15:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/25008c3d31

[15:37] <dalek> nqp: 7b61ed4 | (Pawel Murias)++ | t/nqp/89-istype.t:

[15:37] <dalek> nqp: Test calling nqp::istype on nqp::list() and nqp::hash().

[15:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7b61ed434d

[15:37] <dalek> nqp: a133692 | (Pawel Murias)++ | t/nqp/68-associative-for.t:

[15:37] <dalek> nqp: Test stringifying the keyvalue pair to the key.

[15:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a13369226b

[15:38] <jnthn> mrf: In more detail: MoarVM has a nice implementation of these things that can handle not only codepoints hanging over multi-byte sequences, but also graphemes hanging over multi-codepoint sequences, to get NFG stuff right. So I want to provide a Perl 6 level API for that stuff.

[15:38] <pmurias> jnthn: it's funny that I have to port over code from MoarVM to support doing some IO things synchronously on node.js

[15:39] *** FROGGS left
[15:40] <mrf> jnthn: that would be nice for Web Streaming stuff

[15:40] *** n0tjack joined
[15:40] *** travis-ci joined
[15:40] <travis-ci> NQP build failed. Pawel Murias 'Test stringifying the keyvalue pair to the key.'

[15:40] <travis-ci> https://travis-ci.org/perl6/nqp/builds/85354276 https://github.com/perl6/nqp/compare/e5c012aeb1d4...a13369226b28

[15:40] *** travis-ci left
[15:40] <jnthn> mrf: Indeed. I'll try to make it happen pre-xmas so everyone'll have an easier time implementing such things.

[15:42] <mrf> jnthn: is the idea that the methods would just return Str rather than Buf?

[15:42] *** jax joined
[15:43] *** virtualsue joined
[15:43] <dalek> nqp: a187d4c | (Pawel Murias)++ | .travis.yml:

[15:43] <dalek> nqp: Disable testing the js backend on travis as the node.js version is too old.

[15:43] *** liztormato left
[15:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a187d4c93f

[15:43] *** liztormato_ joined
[15:44] <jnthn> mrf: There's a char-based API there today; the use case here is more like when you need to start out working at byte level because you didn't work out what encoding the rest of the message has to be decoded in

[15:44] <jnthn> mrf: But the API will basically be something you can throw Buf/Blob into, and then ask for a Str with as many chars as it can completely decode/normalize at that point

[15:46] <timotimo> oh, neat

[15:46] *** tokuhirom joined
[15:47] *** travis-ci joined
[15:47] <travis-ci> NQP build passed. Pawel Murias 'Disable testing the js backend on travis as the node.js version is too old.'

[15:47] <travis-ci> https://travis-ci.org/perl6/nqp/builds/85355579 https://github.com/perl6/nqp/compare/a13369226b28...a187d4c93f69

[15:47] *** travis-ci left
[15:48] <gtodd1> hmm the "naive parsing benchmark" made a great leap forward in speed with GLR  ... but seems to have slowed down again 

[15:48] <gtodd1> http://www.perlmonks.org/?node_id=1098390

[15:48] <gtodd1> or perhaps I am imagining it all

[15:48] *** gtodd1 is now known as gtodd

[15:48] *** pierrot left
[15:49] <n0tjack> lear

[15:49] <yoleaux> 10:08Z <jnthn> n0tjack: about your unpacking $/ question in the backlog that I don't think anyone answered: grammar G { token TOP { <digit> <alpha> } }; class A { method TOP((:$digit, :$alpha)) { say $digit; say $alpha; } }; G.parse('1a', actions => A)

[15:49] <n0tjack> oh, neat

[15:49] *** jkva left
[15:49] * n0tjack goes off to refactor his grammar

[15:51] *** tokuhirom left
[15:51] *** Ven joined
[15:57] *** n0xff joined
[15:58] *** larion left
[16:00] *** virtualsue left
[16:00] *** yakudza left
[16:07] *** s_kilk left
[16:07] *** Ven left
[16:08] *** hohoho joined
[16:10] *** virtualsue joined
[16:10] *** liztormato_ left
[16:11] <timotimo> gtodd: what parts have you tried?

[16:11] *** liztormato joined
[16:11] *** liztormato left
[16:12] *** Ven joined
[16:12] *** hohoho left
[16:12] *** diana_olhovik_ joined
[16:13] <timotimo> like, which of these alternatives?

[16:14] <loren> good night, perl6

[16:14] <loren> also timotimo 

[16:15] <timotimo> good night loren 

[16:15] *** loren left
[16:15] *** virtualsue left
[16:16] <gtodd> timotimo: well I am not doing anything very formal .... I have a bunch of different command lines and some time a few weeks back compiled a post GLR perl6 and was shocked at how much it had sped up

[16:16] <timotimo> how did you reach the conclusion that it has slowed down again?

[16:16] *** yakudza joined
[16:16] <timotimo> just by compiling a newer rakudo and re-running?

[16:17] <gtodd> timotimo: yeah ... something like perl6 -n -e 'say $/ if m/<<\w**5>>/' logs.txt 

[16:17] <gtodd> had dropped from 40 to < 10 seconds ... unless I made a mistake

[16:18] <timotimo> can i has your logs.txt?

[16:18] <gtodd> recompiling from yestyerday it was back to something in the order of 30 seconds ...

[16:18] <timotimo> wow

[16:18] <gtodd> timotimo: ok just a sec trying with a freshly built rakudo again

[16:18] <timotimo> that'd be a big loss indeed

[16:20] *** Ven left
[16:22] *** ^elyse^ joined
[16:22] <TimToady> you might try it with 'say $/ if .simplematch(/<<\w**5>>/)' to see if it's the gather/take overhead or not

[16:22] <gtodd> ok

[16:22] <gtodd> timotimo: easiest explanation I must have made a mistake seeing the earlier speed up 

[16:23] <timotimo> oh

[16:23] <timotimo> that's actually a bit sad :(

[16:23] <gtodd> but

[16:24] <gtodd> one thing I notice is: 

[16:24] <gtodd>  time perl6 -e 'for lines(:eager) {  say ~$/ if  m/(<<\w**5>>)/}' 1k-lines.txt  0.67s   

[16:24] <TimToady> is the -n loop being lazy or batching?

[16:24] *** diana_olhovik_ left
[16:24] *** virtualsue joined
[16:25] <timotimo> :eager doesn't exist any more, though

[16:25] <gtodd> ah ok

[16:25] <gtodd> my script needs tweaking then :-)

[16:25] <jnthn> gtodd: What about just for lines() { ... } on a modern Rakudo?

[16:25] <tony-o_> m: say $?ENC

[16:25] <camelia> rakudo-moar 254c1a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/VjdRC4pxWx␤Variable '$?ENC' is not declared. Did you mean '@?INC'?␤at /tmp/VjdRC4pxWx:1␤------> 3say 7⏏5$?ENC␤»

[16:25] <jnthn> TimToady: I'm not sure -n has been looked at since GLR...

[16:26] <tony-o_> r: say $?ENC;

[16:26] <camelia> rakudo-{moar,jvm} 254c1a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Variable '$?ENC' is not declared. Did you mean '@?INC'?␤at /tmp/tmpfile:1␤------> 3say 7⏏5$?ENC;␤»

[16:26] <tony-o_> hm

[16:26] <gtodd> timotimo:  trying  with a file that's bigger doesn't errm "scale" ...  perl6 -e 'for lines(:eager) {  say ~$/ if  m/(<<\w**5>>)/}' 100k-lines.txt  30.90s 

[16:27] <timotimo> what happens if you drop the :eager?

[16:27] <gtodd> ie. it's less than 100 times the time for 100 times as many lines ... which I assume is good

[16:28] <timotimo> japhb: i'm getting some trouble with perl6-bench; after a ./bench setup i get Don't know how to process component ''

[16:28] <TimToady> how does it compare with slurp.lines?

[16:28] <timotimo> after "Setup complete."

[16:28] <tony-o_> timotimo: ugexe fixed a bug in it last night, if you haven't reinstalled since then

[16:28] <gtodd> same ... I now grok why :eager would not be needed post GLR

[16:28] <tony-o_> it being perl6-bench

[16:28] *** edehont joined
[16:29] <timotimo> i just git pull'd it i think?

[16:29] <timotimo> let me see.

[16:29] <timotimo> "already up to date"

[16:29] *** weihan left
[16:30] <timotimo> but the latest commit i see is 3 weeks old

[16:30] *** matt_ joined
[16:30] <gtodd> slurp.lines is ~ 2 seconds faster :-) 28.75 vs 31.25

[16:30] <gtodd> :-D

[16:30] <timotimo> and there's no pull requests or anything

[16:31] <timotimo> tony-o_: where did that commit disappear to?

[16:31] <ugexe> are you sure its not assuming its up to date based on the version in the meta.info file?

[16:31] <tony-o_> https://github.com/tony-o/perl6-bench/pull/8

[16:33] <tony-o_> timotimo: i just merged in the other two PRs from ugexe 

[16:33] *** Ven joined
[16:33] <tony-o_> so a git pull should pull down some killer stuff

[16:34] <timotimo> oh, ok

[16:34] <timotimo> oh, you have your own fork

[16:34] <gtodd> and the winner is Larry Wall (AKA TimToady) ....

[16:34] <timotimo> that explains it i guess

[16:35] *** captain-adequate joined
[16:35] <gtodd> time perl6 -n -e ' say ~$/ if .simplematch(/<<\w**5>>/)' 100k-lines.txt  7.49s user 0.08s system 98% cpu 7.681 total

[16:35] <timotimo> ... wait

[16:36] <timotimo> oh, it's about setting the outer's $/?

[16:36] <timotimo> no, hold on, that's in simplematch, too

[16:36] <TimToady> no, simplematch does that

[16:36] <gtodd> so 7.49 seconds versus 30 seonds ... cause of .simplematch .... maybe I will check to see if the output is the same :-P

[16:36] <TimToady> it's just all the rigamarole around handling multiple matches

[16:36] *** cygx_ joined
[16:36] <TimToady> was using it the other day to do my timings on the tweet database

[16:37] <gtodd> will m//   "know" when it is supposed to be .simplematch in some closer to Xmas variant of perl6 :-)

[16:37] <timotimo> merge conflict in readme.md

[16:37] <TimToady> where about ⅓ of the overhead was gather/take, and about ⅔ was :i

[16:38] <gtodd> wow perl5 -->  perl -wnl -E 'say $1 if /\b(\w{5})\b/' 100k-lines.txt   0.52seconds ... so it's only ~ 15 times faster

[16:38] <cygx_> Now that people are around, I'll ask again: Any thoughts on letting split(..., :all) return strings and only intermix Match objects in case of split(..., :all, :match)?

[16:38] <gtodd> wheee!! (it used to be 75-80 times faster)

[16:38] <cygx_> We're no supposed to be doing high-energy physics, where pulling things apart can spawn all kinds of crazily complicated things ;)

[16:38] <cygx_> *not

[16:38] *** pRiVi_ joined
[16:39] *** Ven left
[16:39] *** Shozan joined
[16:39] <TimToady> HLL::Compiler is very confused about what is the language name/version vs compiler name/version, and this shows up in both -v and -V

[16:40] *** Upasaka_ joined
[16:40] *** intrigue_ joined
[16:40] *** intrigue_ left
[16:40] *** intrigue_ joined
[16:40] *** iv_ joined
[16:40] *** btyler_ joined
[16:40] <TimToady> "This is perl6 version 2015.09-373-g254c1a8"

[16:41] *** ZoffixW joined
[16:41] <ZoffixW> Shouldn't this flatten?

[16:41] <ZoffixW> m: my @a = <foo bar baz>; my @b; @b.append: @a, 'mer'; say @b.perl

[16:41] <camelia> rakudo-moar 254c1a: OUTPUT«[["foo", "bar", "baz"], "mer"]␤»

[16:41] <timotimo> tony-o_: dooooood

[16:41] <timotimo> tony-o_: that's a totally different perl6-bench you have there

[16:41] * [Coke] stares at htmlify

[16:42] <TimToady> should be more like "This is rakudo version 2015.09-373-g254c1a8 implementing Perl v6b" or so

[16:42] <jnthn> TimToady: I susepct the code you're looking at predates us having much clue how such things would pan out :)

[16:44] *** apotheon_ joined
[16:46] * TimToady RT'd it, since it's fruit that's hanging somehwere

[16:46] * timotimo bonks tony-o_ for deceiving him so bad

[16:46] * gtodd reads about simplematch() and m/ and m:i etc.  ... argh :-)

[16:47] * ZoffixW doesn't follow the subleties between .push and .append:

[16:47] <TimToady> ZoffixW: no, that's two arguments under the one-arg rule

[16:47] <ZoffixW> m: my @a = <foo bar baz>; my @b; @b.push(@a, 'mer'); my @c; @c.append(@a, 'mer'); say [ @b, @c ].perl

[16:47] <camelia> rakudo-moar 254c1a: OUTPUT«[[["foo", "bar", "baz"], "mer"], [["foo", "bar", "baz"], "mer"]]␤»

[16:47] <TimToady> .push only pushes arguments, .append only pushes a list

[16:47] *** Ven joined
[16:48] <ZoffixW> Alright. I'll read up on the difference between the two. Thanks.

[16:48] <TimToady> because .push only pushes arguments, it doesn't care if any of those arguments are lists

[16:48] *** sftp_ joined
[16:48] <TimToady> because .append only pushes a list, it doesn't care whether that list was produced by argument comma or something else

[16:48] <timotimo> m: my $spec = "/home/oldhome/timo/perl6/fresh_bench/components/arane"; my $COMPONENTS_DIR = "/home/oldhome/timo/perl6/fresh_bench/components"; $spec .= subst(/^ $COMPONENTS_DIR '/' /, ''); say $spec.perl

[16:48] <camelia> rakudo-moar 254c1a: OUTPUT«"arane"␤»

[16:49] <timotimo> for some reason that doesn't remove the text locally

[16:49] *** Kogurr joined
[16:49] *** espadrine left
[16:49] *** jkva joined
[16:50] *** softmoth left
[16:50] *** margeas left
[16:50] *** skids left
[16:50] *** colomon left
[16:50] *** apotheon left
[16:50] *** Alina-malina left
[16:50] *** PerlJam left
[16:50] *** Upasaka left
[16:50] *** Humbedooh left
[16:50] *** go|dfish left
[16:50] *** SHODAN left
[16:50] *** jantore left
[16:50] *** oha left
[16:50] *** freeze left
[16:50] *** f3ew left
[16:50] *** spacebat left
[16:50] *** danstoner left
[16:50] *** pRiVi left
[16:50] *** sjohnson left
[16:50] *** mst left
[16:50] *** btyler left
[16:50] *** lucs left
[16:50] *** jdv79 left
[16:50] *** confuseAcat left
[16:50] *** bjz_ left
[16:50] *** adhoc left
[16:50] *** Woodi left
[16:50] *** jevin_ left
[16:50] *** |Tux| left
[16:50] *** woodruffw left
[16:50] *** Util left
[16:50] *** bbarker`` left
[16:50] *** tony-o_ left
[16:50] *** ingy left
[16:50] <timotimo> m: my @specs = "/home/oldhome/timo/perl6/fresh_bench/components/arane"; my $COMPONENTS_DIR = "/home/oldhome/timo/perl6/fresh_bench/components"; for @specs -> $spec is copy { $spec .= subst(/^ $COMPONENTS_DIR '/' /, ''); say $spec.perl }

[16:50] <ZoffixW> TimToady++ # That makes sense now. Thanks.

[16:50] <ZoffixW> Weeeeeeeeeeeeeeeeee \o/

[16:50] <camelia> rakudo-moar 254c1a: OUTPUT«"arane"␤»

[16:50] *** sftp_ is now known as sftp

[16:51] <TimToady> m: say 'foo' ~~ S/foo/bar/

[16:51] <camelia> rakudo-moar 254c1a: OUTPUT«Potential difficulties:␤    Smartmatch with S/// can never succeed because the subsequent string match will fail␤    at /tmp/TCGa4pn2jf:1␤    ------> 3say 'foo' ~~ S/foo/bar/7⏏5<EOL>␤False␤»

[16:51] <TimToady> which is not strictly true, but close enough

[16:51] <TimToady> m: say 'foo' ~~ S/foo/foo/

[16:51] <camelia> rakudo-moar 254c1a: OUTPUT«Potential difficulties:␤    Smartmatch with S/// can never succeed because the subsequent string match will fail␤    at /tmp/Ffuqn5y8DN:1␤    ------> 3say 'foo' ~~ S/foo/foo/7⏏5<EOL>␤True␤»

[16:52] <timotimo> damn

[16:52] <timotimo> we have a strange bug going on here

[16:52] *** jkva_ joined
[16:52] <timotimo> $COMPONENTS_DIR gets imported from a module "Bench::Globals"

[16:53] <timotimo> by puting a "my $COMPONENTS_DIR = OUTER::('$COMPONENTS_DIR')" at the beginning of this sub, i can get the regex to work

[16:54] *** jkva left
[16:54] <timotimo> wizards, figure this out. i'm too tired and would prefer to not move a single inch today (but still have to do grocery shopping)

[16:54] *** k2490klm joined
[16:55] *** k2490klm left
[16:56] <TimToady> does it also fail with $spec.subst-mutate instead of .=subst?

[16:56] <timotimo> i believe this is about the regex not matching because the $COMPONENTS_DIR doesn't get interpolated

[16:57] <TimToady> I'm just wondering about different code paths in the compiler

[16:57] <TimToady> I doubt the actual problem would be in .subst

[16:58] *** patrickz joined
[16:58] *** abraxxa left
[16:58] *** Ven left
[16:59] <TimToady> and does it fail with $spec ~~ s///?

[16:59] *** bjz_ joined
[16:59] *** adhoc joined
[16:59] *** Woodi joined
[16:59] *** jevin_ joined
[16:59] *** |Tux| joined
[16:59] *** woodruffw joined
[16:59] *** Util joined
[16:59] *** bbarker`` joined
[16:59] *** tony-o_ joined
[16:59] *** leedo joined
[16:59] *** agentzh joined
[16:59] *** mprelude joined
[16:59] *** breinbaas joined
[16:59] *** ssflying joined
[16:59] *** revdiablo joined
[16:59] *** sergot joined
[16:59] *** atta joined
[16:59] *** ingy joined
[17:00] * TimToady looks around for the backlog he dropped a few minutes ago...

[17:00] <timotimo> hold on

[17:01] <timotimo> i'm running ./bench build at the moment, so can't check immediately

[17:01] <TimToady> np

[17:02] *** firstdayonthejob joined
[17:06] *** softmoth joined
[17:07] *** bjz_ left
[17:07] *** adhoc left
[17:07] *** Woodi left
[17:07] *** jevin_ left
[17:07] *** |Tux| left
[17:07] *** woodruffw left
[17:07] *** Util left
[17:07] *** bbarker`` left
[17:07] *** tony-o_ left
[17:07] *** leedo left
[17:07] *** agentzh left
[17:07] *** mprelude left
[17:07] *** breinbaas left
[17:07] *** ssflying left
[17:07] *** revdiablo left
[17:07] *** sergot left
[17:07] *** atta left
[17:07] *** ingy left
[17:07] *** boggard joined
[17:07] *** mrf joined
[17:07] *** freeze joined
[17:07] *** Grrrr joined
[17:07] *** danstoner joined
[17:07] *** lucs joined
[17:07] *** yoleaux joined
[17:07] *** mst joined
[17:07] *** PerlJam joined
[17:07] *** f3ew joined
[17:07] *** oha joined
[17:07] *** jantore joined
[17:07] *** colomon joined
[17:07] *** margeas joined
[17:07] *** krakan joined
[17:07] *** spacebat joined
[17:08] *** yeltzooo joined
[17:08] *** burnersk joined
[17:08] *** sjohnson joined
[17:08] *** go|dfish joined
[17:08] *** skids joined
[17:09] *** Humbedooh joined
[17:09] <timotimo> i'll be doing a few nqp benchmarks now

[17:09] <timotimo> moar vs jvm

[17:10] *** Humbedooh left
[17:10] *** Humbedooh joined
[17:10] <timotimo> nine: need a bit more help with building the p6forloop desugar?

[17:10] *** jdv79 joined
[17:10] *** bjz_ joined
[17:10] *** adhoc joined
[17:10] *** Woodi joined
[17:10] *** jevin_ joined
[17:10] *** |Tux| joined
[17:10] *** woodruffw joined
[17:10] *** Util joined
[17:10] *** bbarker`` joined
[17:10] *** tony-o_ joined
[17:10] *** leedo joined
[17:10] *** agentzh joined
[17:10] *** mprelude joined
[17:10] *** breinbaas joined
[17:10] *** ssflying joined
[17:10] *** revdiablo joined
[17:10] *** sergot joined
[17:10] *** atta joined
[17:10] *** ingy joined
[17:11] <timotimo> as soon as that happens, i'll also do rakudo benchmarks

[17:11] *** virtualsue left
[17:12] *** llfourn left
[17:12] *** wtw joined
[17:12] *** confuseAcat joined
[17:12] *** avar joined
[17:12] *** avar left
[17:12] *** avar joined
[17:12] *** literal joined
[17:12] *** crux joined
[17:13] <timotimo> TimToady: with only ~~ it says Nil

[17:14] <timotimo> hold on, i mistaked

[17:14] *** FROGGS joined
[17:14] <timotimo> i get a match IFF i put in the OUTER:: thingie

[17:15] *** dakkar left
[17:16] * FROGGS tried yesterday to unbust s/// in for loops

[17:16] * FROGGS did this after banging the head against jvm for hours

[17:17] *** dha joined
[17:18] *** Alina-malina joined
[17:21] <dalek> doc/makefile: 6478396 | coke++ | t/pod-convenience.t:

[17:21] <dalek> doc/makefile: fix test that was passing for the wrong reason

[17:21] <dalek> doc/makefile: review: https://github.com/perl6/doc/commit/6478396ac5

[17:23] *** uruwi left
[17:24] *** jkva_ left
[17:25] *** Peter_R joined
[17:31] <TimToady> oh yeah, that's the old subst in loop bug, dur

[17:32] *** n0tjack left
[17:32] *** sufrostico left
[17:33] *** apotheon_ is now known as apotheon

[17:34] *** apotheon left
[17:34] *** apotheon joined
[17:34] <FROGGS> m: my @a = <a b c>; for @a { s[(.)] = "$0" }; say @a # it is as easy as this

[17:34] <camelia> rakudo-moar 254c1a: OUTPUT«Use of Nil in string context  in code  at /tmp/PD5OPjMW0F:1␤[ a b]␤»

[17:34] <FROGGS> m: my @a = <a b c>; for @a { my $/; s[(.)] = "$0" }; say @a

[17:34] <camelia> rakudo-moar 254c1a: OUTPUT«[a b c]␤»

[17:35] *** ^elyse^ left
[17:37] <nine> [Coke]: wooohooo...many thanks :)

[17:37] <yoleaux> 14:06Z <[Coke]> nine: - please log out and log back in to RT.

[17:37] <ab5tract_> .tell uruwi regarding Roguelike: I can recommend my own https://github.com/ab5tract/Terminal-Print

[17:37] <yoleaux> ab5tract_: I'll pass your message to uruwi.

[17:38] <dalek> doc: 1a0ecc6 | (David H. Adler)++ | doc/Language/5to6-perlvar.pod:

[17:38] <dalek> doc: Changed C<$*EXECUTABLE_NAME> to C<$*EXECUTABLE-NAME> in 5to6-perlvar.pod

[17:38] <dalek> doc: review: https://github.com/perl6/doc/commit/1a0ecc69f4

[17:40] <ab5tract_> .tell uruwi it doesn't yet do the 'capture character without printing it to screen' via any API, but you have access to all of the tput commands that you could need, and a peg to hang more from if desired: https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print/Commands.pm6

[17:40] <yoleaux> ab5tract_: I'll pass your message to uruwi.

[17:41] <ab5tract_> .tell uruwi keep in mind though, that I'm currently working on a rewrite of the internals to use a multidimensional array and a react/whenever loop so that we can have multiple threads modifying the screen independently

[17:41] <yoleaux> ab5tract_: I'll pass your message to uruwi.

[17:42] <dalek> doc: 9413f6c | (Zoffix Znet)++ | doc/Language/5to6-perlfunc.pod:

[17:42] <dalek> doc: Mention different flattening behaviour

[17:42] <dalek> doc: review: https://github.com/perl6/doc/commit/9413f6c222

[17:43] <ab5tract_> speaking of -- can anyone clarify the syntax for a multi-dimensional ASSIGN-POS ? I tried emulating core, but it didn't work. Unless it needs to be declared as a multi? But I only want to support a three arg form (x,y,v).

[17:43] *** kmel joined
[17:44] *** kmel left
[17:44] *** kmel joined
[17:45] <nine> timotimo: a look at Actions.nqp has made quite clear what you want :) What I have not yet figured out is what exactly the $qast argument of the block contains.

[17:46] <nine> timotimo: currently trying: method statement_control:sym<for>($/) { my $xblock := $<xblock>.ast; make QAST::Op.new( :op<p6for>, :node($/), $xblock,); }

[17:46] <FROGGS> we've got a p6for op?

[17:46] <dha> Zoffix - re that commit: how recent is that change? I may need to rebuild rakudo, but I'm not seeing that behavior.

[17:47] <ZoffixW> dha, pretty recent.

[17:47] <dha> Ah, I'll rebuild and see what happens.

[17:48] <ZoffixW> m: my @a = <foo bar>;  my @b.push: @a; my @c.append: @a; say [ @b, @c ].perl

[17:48] <camelia> rakudo-moar 254c1a: OUTPUT«[[["foo", "bar"],], ["foo", "bar"]]␤»

[17:48] *** tokuhirom joined
[17:49] <nine> FROGGS: I'm creating a p6for op_desugar

[17:49] <FROGGS> aha

[17:51] *** ^elyse^ joined
[17:51] <timotimo> nine: the thing you get in $qast is the qast node that you've put into the tree with the :op('p6forloop')

[17:51] <dha> Would @a be the first element of @b if @b already had elements

[17:52] <dha> ?

[17:52] <FROGGS> no, push goes at the end

[17:52] <ZoffixW> Nope

[17:52] <ZoffixW> m: my @a = <foo bar>;  my @b = <moo mar mer>; @b.push: @a; say @b.perl

[17:52] <camelia> rakudo-moar 254c1a: OUTPUT«["moo", "mar", "mer", ["foo", "bar"]]␤»

[17:52] *** tokuhirom left
[17:52] <dha> In that case, I find the wording there confusing.

[17:53] *** xfix joined
[17:53] *** jkva joined
[17:53] <dalek> doc: 3aa60c6 | (Zoffix Znet)++ | doc/Language/5to6-perlfunc.pod:

[17:53] <dalek> doc: Use clearer wording for flattening behaviour

[17:53] <dalek> doc: review: https://github.com/perl6/doc/commit/3aa60c688b

[17:54] <timotimo> nine: i can't help but notice the p6for seems to be lacking the thing to iterate about

[17:55] <El_Che> is it me or is the modules.perl6.org growing fast?

[17:55] <ZoffixW> El_Che, I notice that as well

[17:55] <TimToady> maybe you're both growing fast

[17:55] <timotimo> it's exploding

[17:56] <ab5tract_> m: class A { has @!a; method ASSIGN-POS(**@b) { my $v = @b.pop; @!a[ @b[0],@b[1] ] = $v }; method AT-POS(**@b) { @!a[ @b[0], @b[1] ] } }; my $t = A.new; $t[6;7] = "fooo"; dd $t[6;7]

[17:56] <camelia> rakudo-moar 254c1a: OUTPUT«("fooo", Any)␤»

[17:56] <ZoffixW> 15 new modules in the last 4 days

[17:57] <ab5tract_> TimToady: what's going on with that Any? am I wielding this right?

[17:57] <FROGGS> m: "abc".match(/./); say $/

[17:57] <camelia> rakudo-moar 254c1a: OUTPUT«｢a｣␤»

[17:57] <ab5tract_> also, happy belated 6.Birthday! :)

[17:57] <FROGGS> I'm considering breaking that...

[17:58] <nine> timotimo: isn't that $xblock?

[17:58] <nine> timotimo: oh

[17:59] <timotimo> :)

[17:59] <tony-o_> timotimo: did you get perl6-bench working?

[18:00] <timotimo> tony-o_: i wasn't interested in *that* perl6-bench, i was interested in japhb's :)

[18:00] <nine> timotimo: in the original code $xblock[0] is the thing iterated over and $xblock[1] is the loop body

[18:00] <timotimo> but yeah, i was able to get it working

[18:00] <nine> timotimo: so my assumption was that having $xblock as p6for's child will give me both

[18:00] <lizmat> FROGGS: not returning match objects by default?  

[18:00] <timotimo> nine: ah, right.

[18:01] <timotimo> in the desugar, you'll ge texactly that QAST::Op node back

[18:01] <timotimo> and you can work from that

[18:01] <FROGGS> lizmat: not setting $/ for method calls

[18:01] <FROGGS> the method returns the match anyway

[18:01] *** kmel left
[18:01] <FROGGS> and methods should not have side effects usually

[18:01] <lizmat> ah, ok

[18:01] <lizmat> true

[18:02] *** kmel joined
[18:02] <FROGGS> so, if the refactor I am attempting solves the bugs...

[18:02] <FROGGS> we'll see

[18:02] <timotimo> oof

[18:03] <nine> timotimo: ok, then it will be interesting to find out why exactly it's failing

[18:04] <timotimo> put more debug statements in :D

[18:05] <timotimo> would you like to push it to a branch so i can have a look?

[18:05] <timotimo> though, i'll be fooding soon

[18:05] <nine> What's the NQP equivalent of $foo.WHAT.say?

[18:05] <arnsholt> nqp::say(nqp::what($foo))

[18:05] <FROGGS> nqp::say($foo.HOW.name($foo))

[18:06] <nine> I definitely need to beef up my nqp debugging abilities. I want to contribute more in this area :)

[18:06] *** margeas left
[18:06] *** azawawi joined
[18:06] <arnsholt> Yeah, what FROGGS said is probably what you actually want

[18:06] <FROGGS> nqp-m: my $foo := nqp::list(); nqp::say(nqp::what($foo)); nqp::say($foo.HOW.name($foo))

[18:06] <camelia> nqp-moarvm: OUTPUT«␤NQPArray␤»

[18:06] <timotimo> debugging nqp stuff is really hard, aye

[18:07] <FROGGS> you get used to it :o)

[18:07] <dha> speak for yourself.

[18:08] <azawawi> hi

[18:08] <azawawi> sergot: ping

[18:10] *** luiz_lha left
[18:10] *** luiz_lha joined
[18:11] *** luiz_lha is now known as Guest33524

[18:12] <azawawi> .tell sergot just submitted a PR for the 303 redirection logic + preserve headers for HTTP::UserAgent. Thanks for your time.

[18:12] <yoleaux> azawawi: I'll pass your message to sergot.

[18:13] *** uruwi joined
[18:13] <uruwi> Ho!!!

[18:13] <yoleaux> 17:37Z <ab5tract_> uruwi: regarding Roguelike: I can recommend my own https://github.com/ab5tract/Terminal-Print

[18:13] <yoleaux> 17:40Z <ab5tract_> uruwi: it doesn't yet do the 'capture character without printing it to screen' via any API, but you have access to all of the tput commands that you could need, and a peg to hang more from if desired: https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print/Commands.pm6

[18:13] <yoleaux> 17:41Z <ab5tract_> uruwi: keep in mind though, that I'm currently working on a rewrite of the internals to use a multidimensional array and a react/whenever loop so that we can have multiple threads modifying the screen independently

[18:14] <uruwi> ありがとう

[18:14] <uruwi> 見ますよ

[18:14] <uruwi> (Thanks, I'll be watching it)

[18:15] <azawawi> .tell Zoffix it was the HTTP code 303 after all that caused the hanging. Now it is working :)

[18:15] <yoleaux> azawawi: I'll pass your message to Zoffix.

[18:15] <uruwi> Wait, I don't know you, do I?

[18:15] *** azawawi left
[18:16] <ZoffixW> botsnack

[18:16] <synbot6> om nom nom

[18:16] <uruwi> I can definitely recall several eaux people on a community I used to frequent long long ago

[18:16] <nine> How can a QAST::Op object have no op method?

[18:17] *** n0tjack joined
[18:17] <FROGGS> nine: what are you doing? :o)

[18:17] <FROGGS> nine: can you paste it?

[18:18] *** vendethiel joined
[18:18] <nine> FROGGS: oh, debug error. It's really an NQPMu

[18:18] <FROGGS> ahh

[18:20] *** leont joined
[18:20] *** s_kilk joined
[18:21] <s_kilk> hi, I'm new to perl, just started looking at perl6. One thing I can't figure out: what's the difference between an Array and a List? some of the documentation seems to use the terms interchangably

[18:22] <[Coke]> http://docs.perl6.org/type/Array : An Array is a List which forces all its elements to be scalar containers, which means you can assign to array elements.

[18:22] <FROGGS> and you can push/pop/unshift/shift an Array, but not a List

[18:23] <[Coke]> hurm. list says "Indexes into lists and arrays start at 0 by default." ... there is no way to override that, is there?

[18:23] <s_kilk> ah, so a List is immutable? in that the elements of the list are not containers you can assign to?

[18:23] *** punter joined
[18:23] <FROGGS> I think there was meant to be a way to customize the starting index...

[18:24] <punter> Is Ubuntu 16.04 going to include the Christmas version of Rakudo?

[18:24] <sergot> azawawi: looks awesome but also makes some tests failing 

[18:24] <yoleaux> 18:12Z <azawawi> sergot: just submitted a PR for the 303 redirection logic + preserve headers for HTTP::UserAgent. Thanks for your time.

[18:24] <FROGGS> s_kilk: if you put a literal value into a list, you cant assign to it.... if you put a (scalar) variable into a list, you probably can assign to that variable

[18:24] <sergot> .seen azawawi

[18:24] <yoleaux> I saw azawawi 18:15Z in #perl6: <azawawi> .tell Zoffix it was the HTTP code 303 after all that caused the hanging. Now it is working :)

[18:24] <[Coke]> punter: doubtful.

[18:25] <FROGGS> punter: we hope so... looks good so far

[18:25] <lizmat> s_kilk: same for Map vs Hash

[18:25] *** azawawi joined
[18:25] <[Coke]> But, that's really up to ubuntu.

[18:25] <azawawi> sergot: hi :)

[18:25] <s_kilk> thanks lizmat, not sure I understand containers yet, but that does help

[18:25] * [Coke] defers to FROGGS.

[18:26] <FROGGS> [Coke]: hmmm, well, let's get it into debian first and then I will hunt some ubuntu packagers down :o)

[18:26] <sergot> azawawi: hi :))

[18:26] <FROGGS> (with cake or beer or something)

[18:26] <lizmat> m: my $p = a => 42; $p.value = 666   # 42 is not a container

[18:26] <camelia> rakudo-moar 254c1a: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/NdR_kY50e2:1␤␤»

[18:27] <lizmat> m: my $a = 42; my $p = a => $a; $p.value = 666   # $a *is* a container

[18:27] <camelia> rakudo-moar 254c1a: ( no output )

[18:27] <vendethiel> ab5tract_: omg, your Terminal::Print looks amazing!

[18:27] <vendethiel> I was looking for something like this at the SPW

[18:27] <sergot> azawawi: looks like your PR makes some tests failing

[18:27] <sergot> azawawi: could you please check that?

[18:28] <azawawi> sergot: yeah im looking at them

[18:29] <sergot> azawawi++

[18:29] <azawawi> sergot: the funny thing is that they are random

[18:30] <sergot> azawawi: hmm, that's weird

[18:30] <azawawi> SSL?

[18:32] <sergot> I've just rerun travis build to see if it happens again

[18:32] <sergot> and it does :(

[18:32] <nine> It works!

[18:32] <lizmat> nine++ 

[18:32] * [Coke] tries to run the terminal print examples and ends up in panda hell.

[18:32] <vendethiel> nine++ lizmat++

[18:32] <sergot> ua-simple.t and ua.t are failing, so this is not SSL problem I think

[18:32] <sergot> brb azawawi 

[18:33] <kmel> It Works! => localhost :)

[18:33] <kmel> ;)

[18:33] <azawawi> sergot: sure i will take a look at it

[18:34] <kmel> wasn't this the apache welcome page 

[18:34] *** diana_olhovik_ joined
[18:35] <azawawi> sergot: found it... cloning headers is bad in redirection... my bad... fixing

[18:38] <dha> Ugh. installing Task::Star got shot down by File::Temp failure. Is that something I should be reporting somewhere?

[18:39] <dalek> rakudo/nom: 59d4c40 | ugexe++ | src/core/CompUnitRepo/Local/Installation.pm:

[18:39] <dalek> rakudo/nom: Supress CURLI warnings

[18:39] <dalek> rakudo/nom: 

[18:39] <dalek> rakudo/nom: If the manifest is missing precomp info for a module it shouldn't warn each time one is loaded/used in a script, or complain about trying to use a value from an uninitialized hash key.

[18:39] <dalek> rakudo/nom: 

[18:39] <dalek> rakudo/nom: This carries over the mistaken `:has_precomp` argument

[18:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59d4c40acc

[18:39] <moritz> dha: in the File::Temp repo's issue track

[18:39] <dalek> rakudo/nom: 3f3e032 | lizmat++ | src/core/CompUnitRepo/Local/Installation.pm:

[18:39] <dalek> rakudo/nom: Merge pull request #552 from ugexe/patch-4

[18:39] <dalek> rakudo/nom: 

[18:39] <dalek> rakudo/nom: Supress CURLI warnings

[18:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3f3e0328d7

[18:39] <[Coke]> panda is broken.

[18:39] <[Coke]> ------>     my $panda = Panda.new(:ecosystem(⏏make-default-ecosystem($prefix)));

[18:39] <[Coke]> Calling make-default-ecosystem(Str) will never work with declared signature ()

[18:39] <[Coke]> ^^ few dozen of those.

[18:40] <uruwi> Can't install any modules with Panda on cygwin. http://pastebin.com/XiNY0yqs

[18:40] <dha> Oh. so is this Panda's fault or File::Temp's fault?

[18:41] <uruwi> I have no idea.

[18:42] * [ptc] has seen that in association with File::Temp more than once

[18:42] <sergot> azawawi: why is it bad?

[18:42] *** ^elyse^ left
[18:43] <dha> Huh. also, the list of modules in Task::Star's META.info file on modules.perl6.org does not include File::Temp...

[18:43] <uruwi> ptc elaboration?

[18:43] <dha> Ah. It's installing it in order to install p6doc.

[18:44] *** telex left
[18:44] <[ptc]> uruwi: I wish I had the tracebacks, but unfortunately I don't.  Upon running e.g. ./rebootstrap.pl or simply installing the modules for perl6-examples, I'd noticed File::Temp failing

[18:44] <azawawi> sergot: it needs to exclude some headers as it broke some tests. I will revisit it.

[18:44] <azawawi> sergot: the main problem was the 303 redirection

[18:44] <uruwi> Is it the same error message?

[18:44] <[ptc]> uruwi: then when I tried again later, it seemed to work (usually I'd also updated the full rakudo stack, panda etc., thus it's very hard to nail down where the problem was

[18:45] <[ptc]> uruwi: sorry mate, I can't remember

[18:45] <uruwi> What version of Rakudo are you running?

[18:45] <uruwi> 2015.09?

[18:45] <ugexe> 303 redirection used to work correctly

[18:45] <[ptc]> uruwi: This is perl6 version 2015.09-363-g70eea19 built on MoarVM version 2015.09-81-g41002db

[18:46] *** telex joined
[18:46] <uruwi> Strangely enough, mine doesn't provide that much detail

[18:47] <uruwi> same problem in cmd.exe

[18:47] <sergot> azawawi: well, travis shows it still fails :(

[18:47] <uruwi> So it happens with Windows, period.

[18:47] <[ptc]> one thing I have had reasonably consistently is "Could not find file 'Build.pm' for module Build.pm" when installing Linenoise

[18:48] <[ptc]> this is also something which is a bit flappy

[18:51] <uruwi> Thinking of giving up on Cygwin and using full-on Linux instead...

[18:52] <uruwi> How does no one else have this error, by the way?

[18:53] <uruwi> Some person *has* to be running Perl6 on Windows

[18:53] <azawawi> sergot: it sometimes hangs on 08-ua.t . Is that normal?

[18:53] <kmel> m: say 'What is windows?'

[18:53] <camelia> rakudo-moar 254c1a: OUTPUT«What is windows?␤»

[18:54] <El_Che> uruwi: you got rakudo built on cygwin?

[18:54] <uruwi> No, I'm using the regular windows build

[18:54] <uruwi> Panda doesn't work from cmd either so this probably doesn't have anything to do with the shell

[18:54] <El_Che> ah ok (I tried and failed :) )

[18:55] *** s_kilk left
[18:55] <[ptc]> uruwi: afaik FROGGS and jnthn both use Windows

[18:55] *** jkva left
[18:56] <ugexe> i run perl6 on windows

[18:56] <FROGGS> and panda does work with latest star release (2015.09)

[18:56] <azawawi> sergot: i think it is now a problem with https://github.com/perlpilot/p6-File-Temp/

[18:56] <uruwi> Hmm

[18:56] <FROGGS> I've not checked a newer version of rakudo

[18:57] <El_Che> uruwi: starting a vm with windows 7, cygwin and rakudo

[18:57] <uruwi> Oh

[18:57] <FROGGS> why cygwin?

[18:57] <uruwi> I use Win10 :P

[18:57] <ugexe> im pretty sure its file::temp or file::directory::tree, and star is bundled what a specific version that still works

[18:58] <azawawi> sergot: File::Temp is actually failing its tests with the latest batch of commits

[18:58] *** jkva joined
[18:58] * azawawi wishes for panda module version dependency

[18:59] *** rindolf left
[19:01] <El_Che> uruwi: same result in the Win VM

[19:01] <El_Che> uruwi: same error message

[19:01] <El_Che> uruwi: latest rakudo installed

[19:02] <uruwi> Wait the modules in Rakudo* don't auto update do they.

[19:02] <uruwi> I infer not.

[19:03] <El_Che> however panda install Task::Star completed without errors (although it probably did nothing)

[19:03] *** jkva left
[19:04] <uruwi> Succeeds on my machine too

[19:06] <sergot> azawawi: looks so.. hmm.

[19:06] <El_Che> uruwi: skipping tests (--notests) builds and installs the modules succesfully

[19:06] *** [Sno] left
[19:06] *** jkva joined
[19:06] <ugexe> zef works fwiw

[19:06] <ugexe> task::star probably isnt trying to install a new File::Temp if you already have panda installed

[19:07] <dalek> rakudo/nom: 17987c6 | lizmat++ | src/core/Exception.pm:

[19:07] <dalek> rakudo/nom: Add 'type' to X::Adverb::Slice

[19:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17987c618d

[19:07] <dalek> rakudo/nom: 3cdaf9a | lizmat++ | src/core/Any.pm:

[19:07] <dalek> rakudo/nom: Handle unhandled named parameters to zen slice

[19:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3cdaf9a2be

[19:07] <uruwi> Panda still tries to test even with --notests

[19:07] <azawawi> sergot: so basically my headers fix was ok :)

[19:07] <El_Che> panda --notests install ...

[19:08] <El_Che> the params matching is a little basic it seems

[19:08] <dalek> roast: 29f5477 | lizmat++ | S32- (2 files):

[19:08] <ugexe> the thing is, we were cloning http::response like a week ago and it was removed

[19:08] <dalek> roast: Adapt test for zen slice with unknown adverb

[19:08] <dalek> roast: review: https://github.com/perl6/roast/commit/29f547712d

[19:08] <uruwi> oh --notests comes before install

[19:08] <ugexe> and its starting to get ugly with http::request generating other requests and modifying attributes instead of the transport/ua handling that

[19:09] <ugexe> whereas with the cloned history the transport/ua can handle that stuff

[19:09] *** punter left
[19:09] *** rotcpy joined
[19:10] *** llfourn joined
[19:10] *** jkva left
[19:10] <sergot> ugexe: we're talking about travis, it should install the latest File::Temp, right?

[19:11] *** jkva joined
[19:13] <ugexe> yes. but its not testing it so you cant see that its broke from your travis output

[19:14] <azawawi> m: $*SPEC.catpath('A', 'B');

[19:14] <camelia> rakudo-moar 254c1a: OUTPUT«Too few positionals passed; expected 4 arguments but got 3␤  in block <unit> at /tmp/Q5pTBq7vrM:1␤␤»

[19:14] <timotimo> a few push replaced with append and bench is a bit happier

[19:15] <azawawi> m: $*SPEC.catpath('', 'A', 'B');

[19:15] <camelia> rakudo-moar 254c1a: ( no output )

[19:15] *** n0tjack left
[19:15] <nine> timotimo: the desugar op breaks loop control statements and for's return value. Will need some restructuring to get that working

[19:15] *** llfourn left
[19:15] <azawawi> this commit broke File::Temp, https://github.com/perlpilot/p6-File-Temp/commit/626af3f740a7e7059bb650c05dd3116ed6056429

[19:16] <sergot> ugexe: oh, ok, right

[19:18] <uruwi> Different error message though

[19:18] <timotimo> nine: damn :(

[19:18] <timotimo> jnthn: do you have a hunch why a desugar for for loops in rakudo would break things like nine just described?

[19:18] *** ZoffixW left
[19:19] <nine> timotimo: I guess it breaks the return value because the QAST::Want must be the outermost op

[19:20] <nine> No idea where the "control exception without handler" comes from though

[19:21] <timotimo> so are you going to push it up so i can have a quick look?

[19:23] <nine> timotimo: current work in progress of trying to push the QAST::Want to the top: https://gist.github.com/niner/c08db40160de90a7c46b

[19:23] *** rindolf joined
[19:25] <timotimo> something's wrong with the perl5 portion of perl6-bench, it seems like o_O

[19:26] <azawawi> sergot: anyway, https://github.com/azawawi/perl6-selenium-webdriver/blob/master/examples/test_selenium_phantomjs.p6 is now working with the fix and it is controlling phantomjs :)

[19:27] <azawawi> sergot: thanks

[19:28] <timotimo> oh!

[19:28] <timotimo> could have something to do with the timings files for nqp-jvm being 260 megabytes big?

[19:29] <timotimo> huh. the ones in nqp-moar are just half that size

[19:30] <timotimo> japhb: anything we can do to make this less of a problem?

[19:30] <[Coke]> ooh, p6 selenium

[19:31] <azawawi> [Coke]: yup :)

[19:34] <sergot> azawawi++ : awesome! thank you! :) 

[19:34] * azawawi &

[19:34] *** johnjohn101 joined
[19:34] <johnjohn101> hi perl six peeps

[19:34] <sergot> johnjohn101 hi \o

[19:35] <PerlJam> johnjohn101: greetings

[19:35] <johnjohn101> what ever happened to the perl 6 on .net project?  seems like it hasn't had an update in a while.

[19:36] <PerlJam> johnjohn101: champions are hard to come by.

[19:36] <johnjohn101> i understand

[19:37] <moritz> in the past, I've wondered if writing a .NET backend for NQP was a good way to learn C#

[19:37] *** azawawi left
[19:37] <moritz> I came to the conclusion that it likely isn't :-)

[19:37] <dalek> rakudo/nom: ee96fc1 | lizmat++ | src/core/Any-iterable-methods.pm:

[19:37] <dalek> rakudo/nom: Make List.first/first-index 2x as fast

[19:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee96fc1190

[19:38] *** pmurias_ joined
[19:40] * [Coke] pokes the one guy he knows that works at microsoft about it.

[19:41] *** pmurias left
[19:42] <masak> m: class A { method m { "A" } }; class B is A { method m { "B"; } }; class C is A { method m { "C" } }; class D is B is C {}; say D.new.m

[19:42] <camelia> rakudo-moar 3cdaf9: OUTPUT«B␤»

[19:44] *** kmel left
[19:46] *** jkva left
[19:49] <masak> http://spec.perl6.org/ doesn't take me to http://spec.perl6.org/specification/ :(

[19:49] <masak> it takes me to the main page

[19:49] *** tokuhirom joined
[19:50] <timotimo> http://t.h8.lv/p6bench/2015-10-14-nqp_shootout.html - this was also supposed to have nqp-jvm in it, but it already took super long to do only the nqp-moar bits

[19:50] <timotimo> i'm going to re-run the analyze command with also jvm parts

[19:54] *** tokuhirom left
[19:59] <dalek> rakudo/nom: dd15d70 | lizmat++ | src/core/Supply.pm:

[19:59] <dalek> rakudo/nom: Give Supply.squish same semantics as List.squish

[19:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd15d70464

[20:00] <PerlJam> isn't http://spec.perl6.org/specification/ kind of a misnomer anyway?

[20:00] <dalek> roast: 7ed4852 | lizmat++ | S17-supply/squish.t:

[20:00] <dalek> roast: Add tests for 1 elem semantics of Supply.squish

[20:00] <dalek> roast: review: https://github.com/perl6/roast/commit/7ed48521e1

[20:03] *** larion joined
[20:03] <timotimo> well, it does link to the test suite

[20:04] *** ^elyse^ joined
[20:05] *** cygx_ left
[20:07] <timotimo> http://t.h8.lv/p6bench/2015-10-14-nqp_shootout_with_jvm.html

[20:07] *** s_kilk joined
[20:08] *** hohoho joined
[20:11] <uruwi> Ho!

[20:11] <timotimo> Hey!

[20:12] <lizmat> timotimo: that's pretty bad, no ?

[20:12] <[Coke]> have a 750 line or so perl6 script. add a multi MAIN("TEST") near a sub I'm trying to debug so I can quickly invoke a test without changing the rest of the code.

[20:12] <timotimo> what is?

[20:12] <lizmat> that shootout

[20:12] <lizmat> the while empty ones

[20:13] *** hohoho left
[20:13] <timotimo> why do you think so?

[20:13] <PerlJam> lizmat: bad for moar compared to jvm?

[20:13] <lizmat> well, the nqp::jvm does 4x more ?

[20:13] <FROGGS> head seems identical to 2015.07 and 2015.09

[20:13] <timotimo> when it warms up, yeah

[20:13] <FROGGS> lizmat: they payed more ppl to optimize that vm

[20:13] <FROGGS> paid*

[20:14] <lizmat> hehe: I bet there's some dieselgate in there as well  :-)

[20:14] <FROGGS> one could say that the JVM is optimized to do nothing :o)

[20:14] <FROGGS> hehe

[20:14] <gugod> or collecting garbage

[20:15] <dalek> roast: 364b771 | usev6++ | S (6 files):

[20:15] <dalek> roast: Unfudge some tests for rakudo.jvm

[20:15] <dalek> roast: review: https://github.com/perl6/roast/commit/364b7717ac

[20:15] <timotimo> i'm not sure those benchmarks are worth anything, tbh :)

[20:15] <timotimo> in a few hours i'll have some rakudo benchmarks

[20:15] <lizmat> looking forward to that :-)

[20:16] *** colomon left
[20:16] *** TEttinger joined
[20:18] <jnthn> Such benchmarks are mostly a good test of how good your optimizer is at getting rid of "junk" and spitting out concise machine code. So, some value. :)

[20:18] <[Coke]> if I have a parallel pipeline (e.g. something with .race.map.***) - what can I use to stop the pipeline? jnthn's example uses map...

[20:18] <timotimo> right

[20:18] <jnthn> 'night, #perl6

[20:18] <timotimo> gnite jnthn!

[20:19] <lizmat> gnight jnthn 

[20:23] *** darutoko left
[20:24] <[Coke]> er, uses 'max'

[20:25] <dalek> roast: 4a8cdeb | usev6++ | S02-literals/numeric.t:

[20:25] <dalek> roast: Add another test for RT #124559

[20:25] <dalek> roast: review: https://github.com/perl6/roast/commit/4a8cdebd44

[20:25] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124559

[20:33] <dha> List.eager doc says "Evaluates all elements in the list eagerly, and returns them as a list." What does that mean?

[20:34] <dha> specifically, what does it mean to evaluate something "eagerly"?

[20:34] *** colomon joined
[20:37] <PerlJam> some elements may be a "thunk" that generates list elements rather than actually be elements.  Eager evaluation will cause it to generate all of the values it can.

[20:38] <pink_mist> that may lead to out of memory problems with infinite lists =)

[20:38] <dha> ok. The docs should probably explain that. I'm not convinced I'm the person to do that, however.

[20:39] <psch> "Eager evaluation" is a wikipedia article

[20:39] <psch> that's not to say we don't need it in the docs, though

[20:42] *** DrForr_ left
[20:46] <dha> Ok, I'm confused. What is going on here: say (1, 2, 3).reduce: * - *;

[20:46] <dha> This results in -4, but I'm not clear why.

[20:46] <psch> m: say 1 - 2 - 3

[20:46] <camelia> rakudo-moar dd15d7: OUTPUT«-4␤»

[20:46] <psch> m: [-] 1, 2, 3

[20:46] <camelia> rakudo-moar dd15d7: ( no output )

[20:46] <psch> m: say [-] 1, 2, 3

[20:46] <camelia> rakudo-moar dd15d7: OUTPUT«-4␤»

[20:47] <dha> ok. I get that. What are the stars doing?

[20:47] <psch> just a different form of specifiying the operator or function

[20:47] <psch> '* - *' is a two-ary function that substracts the second argument from the first

[20:47] <dha> and where is that documented?

[20:48] <dha> Oh, placeholders. damn that looks weird.

[20:48] <psch> just like &infix:<-> is a two-ary function that substracts the second argument from the first

[20:48] <dha> C<*> means too many things, dammit.

[20:48] <PerlJam> aye, there is a little of that.

[20:49] <psch> m: say *.WHAT

[20:49] <camelia> rakudo-moar dd15d7: OUTPUT«(Whatever)␤»

[20:49] <PerlJam> same with { }

[20:49] <psch> Whatever should be somewhat documented, iirc

[20:49] <psch> yeah, pretty thoroughly even, it looks like

[20:49] <RabidGravy> http://doc.perl6.org/type/Whatever

[20:52] *** [Sno] joined
[20:53] <dha> Having to read a section of an entirely different doc page seems problematic for an example. :-/

[20:53] <skids> .oO(maybe .last-index should be renamed to .hind-index so we can have .hind which would not conflict with "last" and kinda rhymes with "find" anyway.)

[20:54] <psch> dha: you're doc'ing .reduce?

[20:54] * PerlJam would rather all of the *-index routines go away first

[20:54] *** FROGGS left
[20:54] <dha> I'm looking through List.pod for where I can put in examples, and reading the ones that have examples already as I go.

[20:54] <dha> That one caught my eye.

[20:55] <psch> ah, i see

[20:55] <lizmat> PerlJam: how would they be called then ?

[20:57] <PerlJam> lizmat: something like   grep :index, { ... }, @stuff;  

[20:57] <skids> .first(:k)?

[20:58] * masak .oO( .grep :kv, .grep :v )

[20:58] <PerlJam> in any case, some modifier that say we want the ordinals rather than the values.

[20:59] <lizmat> well, I'm fine with that: that's how I originally implemented them, I think

[20:59] <masak> PerlJam: also, some other modifier that says we want the mutable container rather than the value in the container

[20:59] <lizmat> but then the whole thing about named parameters are a smell came about

[20:59] <PerlJam> masak: that would be nice too

[21:00] <lizmat> masak: you get the container already if they are containers

[21:00] *** kmel joined
[21:00] *** niceperl joined
[21:01] <kmel> i am reading http://doc.perl6.org/language/control 

[21:01] <kmel> can someone explain what does 'with' actually do?

[21:02] <PerlJam> kmel: with $thing { ... }   is like if defined($thing) { ... }

[21:02] <masak> m: my @a = 1, 2, 3; @a.grep(2)[0] = 7; say @a

[21:02] <camelia> rakudo-moar dd15d7: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/lTm_2l8Fws:1␤␤»

[21:03] <masak> lizmat: don't look like it

[21:03] <lizmat> masak PerlJam : I will let TimToady rule on that, and make changes accordingly

[21:03] <kmel> oh ok. thanks PerlJam

[21:03] <skids> kmel: like if defined($thing) { ... }($thing) actually.

[21:04] <skids> or well if defined($thing) {{ ... }($thing)}

[21:04] <PerlJam> lizmat: yeah, he's the best person to ferret out any underlying commonality and unify it into a syntax that makes sense

[21:04] <lizmat> masak: oops, looks like they're some "is raw"'s missing

[21:04] <kmel> thanks skids

[21:05] <masak> lizmat: tbh, I think "just the values" is an excellent default for .grep

[21:05] <masak> lizmat: 99% of the time I use .grep, that's what I expect

[21:05] <PerlJam> lizmat: and I wouldn't hold up 6.christmas for it in any case.  :)

[21:05] <masak> probably great for optimization, too

[21:05] <lizmat> masak: what is ?

[21:05] *** uruwi left
[21:05] <masak> returning just the values, not their containers

[21:06] <masak> it's one less level of indirection to worry about

[21:06] <PerlJam> since you already have the containers, just returning them seems already "optimized"

[21:06] <lizmat> m: my @a = 1, 2, 3; $_ = 7 for @a.grep(2); say @a

[21:06] <camelia> rakudo-moar dd15d7: OUTPUT«[1 7 3]␤»

[21:07] <skids> Depends entirely on use case I would say.

[21:07] <lizmat> masak: I think this is really a problem of the iterator interface

[21:07] <lizmat> your example did a push-all, which pushes values into a buffer

[21:08] <lizmat> the for loop does pull-one, which gets the container

[21:08] <lizmat> not sure how to solve that

[21:09] <dalek> doc: 90ebc3c | (David H. Adler)++ | doc/Type/List.pod:

[21:09] <dalek> doc: Added examples for grep-index, first-index, and last-index

[21:09] <dalek> doc: review: https://github.com/perl6/doc/commit/90ebc3c9e3

[21:09] <dalek> doc: 1c87ed7 | RabidGravy++ | doc/Type/List.pod:

[21:09] <dalek> doc: Merge pull request #163 from dha/master

[21:09] <dalek> doc: 

[21:09] <dalek> doc: Added examples for grep-index, first-index, and last-index

[21:09] <dalek> doc: review: https://github.com/perl6/doc/commit/1c87ed7038

[21:09] <dha> I assume that there is a difference between Range.list and Range.flat, but they are documented identically. Or are they in fact  just synonyms?

[21:09] <skids> m: my @a = 1, 2, 2, 3; @a.grep(2)[0..1] = 7,8; say @a;

[21:09] <camelia> rakudo-moar dd15d7: OUTPUT«Unexpected named parameter 'eagerize' passed␤  in block <unit> at /tmp/fGpowvDynL:1␤␤»

[21:10] *** diana_olhovik___ joined
[21:10] * skids decommute

[21:10] *** llfourn joined
[21:10] *** diana_olhovik_ left
[21:10] <PerlJam> dha: I think .list gives you an actual List, but .flat gives you a Seq

[21:11] <dha> According to the docs, they both return a List.

[21:11] <dha> and they both just say "Generates the list of elements that the range represents."

[21:12] <lizmat> .tell jnthn couldn't we just not put a $no-sink in IterationBuffer.push ?

[21:12] <yoleaux> lizmat: I'll pass your message to jnthn.

[21:12] <masak> lizmat: I see. hm.

[21:13] *** xfix left
[21:14] *** colomon left
[21:14] *** skids left
[21:15] <RabidGravy> dha, it's entirely possible the docs weren't updated post-GLR

[21:15] <dha> That's what it looks like, yes.

[21:16] *** llfourn left
[21:17] <dha> So that should be changed to "returns Seq:D"? And the doc perhaps changed to "Generates a sequence of elements..."?

[21:18] <lizmat> well, not sure we want to expose Seq so clearly ?

[21:19] <PerlJam> m: (^10).flat.WHAT.say

[21:19] <camelia> rakudo-moar dd15d7: OUTPUT«(Seq)␤»

[21:19] <PerlJam> It's already exposed to some extent

[21:20] <dha> It certainly seems odd to have two methods that do the same thing. Also, since the function documentation has signatures, they should probably be correct...

[21:21] *** margeas joined
[21:22] *** diana_olhovik___ left
[21:22] <dha> I suppose you could just omit the return type from .flat, but that strikes me as inconsistent and weird. But maybe that's just me.

[21:22] <s_kilk>  The SCGI module appears to be broken currently, because its dependency Netstring doesn't build: http://pastebin.com/KaKrK7ku

[21:23] <s_kilk> Which means that Web::App::Dispatch is broken too, I think, or at least the examples are. will dig in a bit further

[21:24] <PerlJam> s_kilk: ping supernovus harder ... there's already a PR to fix it from back in May

[21:24] <dalek> rakudo/nom: d578a56 | lizmat++ | src/core/Supply.pm:

[21:24] <dalek> rakudo/nom: Introduce Supply.throttle

[21:24] <dalek> rakudo/nom: 

[21:24] <dalek> rakudo/nom: So you can throttle your supplies by number of elems per time-unit

[21:24] <dalek> rakudo/nom: (in seconds, or parts thereof)

[21:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d578a56c61

[21:24] <PerlJam> ptc++  (I'm pretty sure he did bunches of PRs to add unit declarations to most modules in the ecosystem)

[21:25] <s_kilk> Thanks PerlJam, I'll open an issue on the SCGI repo. I'm new to perl6 (new to perl actually), and have been digging around for a place to start contributing, looks like I found it :) 

[21:26] <PerlJam> s_kilk: alternatively, if no one can contact supernovus, someone can fork his repo, add the fix, then replace his repo in the ecosystem with their own.

[21:26] *** Peter_R left
[21:27] <PerlJam> .seen supernovus

[21:27] <yoleaux> I saw supernovus 30 Sep 2015 21:08Z in #perl6: <supernovus> I changed my build script so instead of using bootstrap.pl it uses rebootstrap.pl and it appears to work properly now.

[21:28] <PerlJam> He was here a couple of weeks ago apparently.

[21:28] <dha> Can I assume the examples for .floor, .ceiling, etc. from Cool.pod should be appropriate for, for instance, Real.pod?

[21:28] <s_kilk> I'm tempted to do that actually, what's the current state of HTTP/Web stuff in Perl6? As a newcomer it seems that supernovus is responsible for most of the web projects in the ecosystem, is he pulling the cart alone? Is there a group of contributors I could speak to about me pitching in? I'd be keen on even just doing doc work

[21:29] <dha> (Cool has lots of examples, Real, not so much)

[21:30] <RabidGravy> s_kilk, there's a few people sparked up recently - I think that stuff is going to grow a bit

[21:30] <s_kilk> Cool, I bet a handful of people could make some real progress with the right co-ordination

[21:31] <RabidGravy> Crust came in just recently and those guys have been patching a load of other stuff which is cool

[21:31] <s_kilk> The Web::App::Dispatch framework looks really promising, but it's currently broke.

[21:32] <s_kilk> Ah, thanks RabidGravy, I hadn't seen Crust before.

[21:36] <RabidGravy> I think in the fullness of time something really good will pop up, someone clever will have the urge to write the best web framework ever and actually have the time to try

[21:37] *** colomon joined
[21:37] *** ZoffixMobile joined
[21:38] *** virtualsue joined
[21:38] <ZoffixMobile> I really wish sri of the Perl 5's Mojolicious fame would finally decide to do a Perl 6 port. So far, they're unsure/need funding.

[21:39] *** AlexDaniel joined
[21:39] <RabidGravy> I don't, I want someone new to write something new

[21:39] <ZoffixMobile> Even aside from the web framework, I miss the Mojo Toolkit in P6 (Mojo::DOM in particular)

[21:40] <ZoffixMobile> RabidGravy, how come? sri knows the specs like the back of their hand and has creating two very successful web frameworks on their CV.

[21:41] <masak> ZoffixMobile: in the meantime, I'm pretty sure you can use Mojo from Inline::Perl5

[21:41] <ZoffixMobile> masak, yeah, you can (I tried).

[21:42] *** sufrostico joined
[21:42] *** sufrosti1o joined
[21:43] <RabidGravy> ZoffixMobile, that doesn't mean someone else can't make something better and more Perl 6 like :) It would be really nice if someone who wasn't an existing Perl 5 author did that :)

[21:44] <ZoffixMobile> But I wouldn't make a P6 module that has Inline::Perl5 and a Perl 5 module as a prereq; which is my more accurate feeling about missing Mojo :p

[21:45] *** pierrot joined
[21:46] *** muraiki left
[21:47] <ZoffixMobile> RabidGravy, that's definitely true. :)

[21:47] <tony-o_> ZoffixMobile: i'd be interested in feedback on https://github.com/tony-o/perl6-hiker

[21:47] *** ggoebel joined
[21:47] *** sufrostico left
[21:48] *** sufrosti1o left
[21:48] <s_kilk> so, what would it take to replace the Netstring module in the ecosystem with a forked version? 

[21:48] <ZoffixMobile> .tell Zoffix check out https://github.com/tony-o/perl6-hiker when you're sober

[21:48] <yoleaux> ZoffixMobile: I'll pass your message to Zoffix.

[21:48] <ZoffixMobile> :p

[21:48] *** ggoebel2 left
[21:48] <tony-o_> lol ZoffixMobile++

[21:48] <leont> integrating perl6's async power into a framework is where it starts being truly interesting to me, copying existing things is so-so

[21:49] <RabidGravy> I'm with leont :)

[21:49] <tony-o_> hiker uses the async stuff

[21:50] <ZoffixMobile> s_kilk, I suggest editing META.list in the https://github.com/perl6/ecosystem, while doing an @ mention of the original author of the intent to overtake. Wait 24 hours. Merge your overtake

[21:51] *** tokuhirom joined
[21:51] <s_kilk> Thanks ZoffixMobile, I've forked the project and patched it here: https://github.com/ShaneKilkelly/perl6-netstring . it seems to work, i think.

[21:52] <RabidGravy> I'm taking a more relaxed approach to Cache::Memcached - I sent a PR to make it actually work in May, emailed him yesterday and will wait a week or two

[21:53] <ZoffixMobile> Oh sure

[21:53] <ZoffixMobile> Sorry, I assumed s_kilk attempted to contact the original author with no avail.

[21:54] *** hohoho joined
[21:54] *** patrickz left
[21:55] <s_kilk> yeah, I think Netstring may be more broke than I realized, it installs now but crashes the server with "Invalid netstring stream data.". Not sure which side of the Web::App / SCGI / Netstring boundary is at fault there.

[21:55] *** tokuhirom left
[21:56] <s_kilk> sorry, I thought if it was an easy fix that it might be good to take some pressure off of supernovus. I've just wandered in off the street really, I'm quite taken with perl6, and was starting to play around with some of the web modules.

[21:57] <RabidGravy> well, sounds like Netstring may or may not be properly tested

[21:58] <RabidGravy> I'll put this on my TODO list for tomorrow

[21:58] <RabidGravy> (it's actually more of a stack than a list nowadays but hey)

[21:59] *** hohoho left
[21:59] *** virtualsue left
[22:00] *** kid51 joined
[22:00] <dalek> roast: ef6d4ee | lizmat++ | S17-supply/throttle.t:

[22:00] <dalek> roast: Add basic Supply.throttle tests

[22:00] <dalek> roast: review: https://github.com/perl6/roast/commit/ef6d4ee9a1

[22:01] <RabidGravy> right bed time

[22:01] <lizmat> gnight RabidGravy 

[22:01] <ZoffixMobile> s_kilk, yeah, Perl 6 is pretty cool :) If you haven't already, submit a PR to supernovus that fixes the issues. If they don't merge it soon enough, try to contact them about the merge, and if that fail, do the ecosystem editing stuff I suggested :) Sorry, my fault for not being clearer earlier :)

[22:01] <ZoffixMobile> gnight

[22:03] <s_kilk> Thanks ZoffixMobile, it looks like someone has had the same PR open for the last few months. I've added a comment to the PR too.

[22:04] * dha sees the Document All Modules message and looks for modules in need of documentation.

[22:06] *** RabidGravy left
[22:06] <dalek> rakudo/nom: 271e84c | lizmat++ | t/spectest.data:

[22:06] <dalek> rakudo/nom: Run the Supply.throttle tests

[22:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/271e84c731

[22:06] <ZoffixMobile> Thinking more of this, we probably need a more official guideline for module overtakes. I can imagine people getting touchy about someone just taking over their work willy-nilly

[22:06] *** bjz_ left
[22:07] <ZoffixMobile> dha, make a list! :)

[22:07] <dha> On what basis?

[22:07] <dha> That is, one what basis would I add something to this hypothetical list? :-)

[22:07] *** bjz joined
[22:08] <_sri> ZoffixMobile: thanks for the vote of confidence :)

[22:09] <ZoffixMobile> _sri, :) Join us! We have cookies! :p

[22:10] <_sri> RabidGravy: it's not like perl6 is full of new programming paradigms that could result in radically new ways of developing web apps

[22:10] <_sri> (and that doesn't mean it's bad at all!)

[22:10] <dha> We do? cookies++

[22:10] <ZoffixMobile> dha, does the documentation included with the module tell everything about how to use that module? The "this is a Port of Perl 5 blah" doesn't cut it. :)

[22:10] <dha> *nod* ok.

[22:11] <dha> Ooh. But now I have to get going. Something for tomorrow, I guess.

[22:11] <dha> later, all.

[22:11] *** dha left
[22:11] <ZoffixMobile> \o

[22:12] <dalek> doc: 913b7b8 | lizmat++ | doc/Type/Supply.pod:

[22:12] <dalek> doc: Document Supply.throttle

[22:12] <dalek> doc: review: https://github.com/perl6/doc/commit/913b7b8371

[22:12] <dalek> perl6-most-wanted: 8849c04 | (Nova Patch)++ | most-wanted/ (2 files):

[22:12] <dalek> perl6-most-wanted: add wanted i18n/NLP

[22:12] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/8849c04091

[22:12] <lizmat> good night, #perl6!

[22:13] <ZoffixMobile> night, lizmat

[22:15] <masak> 'night, lizmat 

[22:16] <lizmat> .tell daxim if you can give me a paragraph about why my statement re ß in the P6W was wrong, I will add it as an erratum next week

[22:16] <yoleaux> lizmat: I'll pass your message to daxim.

[22:16] <lizmat> really afk&

[22:17] *** ^elyse^ left
[22:17] <dalek> perl6-most-wanted: e1c1feb | (Nova Patch)++ | most-wanted/ (2 files):

[22:17] <dalek> perl6-most-wanted: i18n and NLP headers

[22:17] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/e1c1feb9ee

[22:18] *** s_kilk left
[22:19] <leont> _sri: I've seen few frameworks/languages handle concurrency and async well at the same time

[22:19] <leont> few meaning "I haven't seen it, though it might exist, it must have not broken through"

[22:20] <[ptc]> PerlJam: thanks :-)  Yes, I did.  I also wanted to fix kebab-case issues as well, but time sort of ran out on me

[22:20] <_sri> leont: phoenix is pretty phenomenal

[22:21] <_sri> i don't think anything in perl6 will ever be able to compete with that honestly

[22:21] <_sri> (which again, is not bad! ;p)

[22:21] <_sri> due to the erlang vm and otp

[22:23] <_sri> play framework should be closer to what a perl6 framework will ultimately look like i guess, it's pretty good at concurrency/parallelism

[22:24] <leont> I should look into that

[22:26] <_sri> but yea, if you wanted to make concurrency/parallelism your big selling point you'll have to compete with phoenix/elixir, which would be an uphill battle

[22:26] *** edehont left
[22:26] *** niceperl left
[22:26] <_sri> it's not even such a radically innovative framework, it just takes advantage of all the erlang infrastructure

[22:27] <leont> Only worked with erlang once, but yeah that was impressive

[22:28] *** vendethiel left
[22:28] <johnjohn101> erlang is ok but seems to me specialized usage

[22:29] * _sri would focus more on expressiveness, like in perl5

[22:31] *** johnjohn101 left
[22:32] *** firstdayonthejob left
[22:32] <_sri> totally take advantage of the awesome concurrency features (love await and whenever), but have perl-ish stuff like one-liner web apps

[22:33] <leont> Fair point

[22:35] <ugexe> m: use trace; my $x = { :ok(1), :nok(0) }; my @a; @a.append($x); say @a.perl

[22:35] <camelia> rakudo-moar 271e84: OUTPUT«2 (/tmp/WXFbbkbxjB:1)␤my $x = { :ok(1), :nok(0) }␤9 (/tmp/WXFbbkbxjB:1)␤my @a␤10 (/tmp/WXFbbkbxjB:1)␤@a.append($x)␤11 (/tmp/WXFbbkbxjB:1)␤say @a.perl␤[-> ;; $_? is raw { #`(Block|63458872) ... }]␤»

[22:35] <ugexe> m: my $x = { :ok(1), :nok(0) }; my @a; @a.append($x); say @a.perl

[22:35] <camelia> rakudo-moar 271e84: OUTPUT«[{:nok(0), :ok(1)},]␤»

[22:37] *** uruwi joined
[22:38] <uruwi> stupid mouse broke :(

[22:39] *** ZoffixMobile left
[22:40] *** kmel left
[22:45] *** mattprelude left
[22:48] *** intrigue_ is now known as intrigue

[22:49] *** bjz left
[22:52] <AlexDaniel> say '㎉'

[22:52] <AlexDaniel> m: say '㎉'

[22:52] <camelia> rakudo-moar 271e84: OUTPUT«㎉␤»

[22:52] *** tokuhirom joined
[22:52] <AlexDaniel> does anybody know any symbol with more than 4 letters?

[22:52] <AlexDaniel> ㌲ I'm not sure if japanese counts 

[22:54] <AlexDaniel> but if yes, then I'm searching for a thing with more than 5… ㌮

[22:56] <AlexDaniel> ㌖ or 6…

[22:56] *** tokuhirom left
[22:58] <masak> pretty sure those Japanese things you pasted don't contain any letters... :)

[23:00] <AlexDaniel> masak: well, the last one is “kiromeetoru” written with katakana, if I'm not mistaken

[23:01] <TimToady> funny they have that as well as ㎞

[23:01] *** skids joined
[23:01] *** pmurias_ left
[23:05] <timotimo> http://t.h8.lv/p6bench/2015-10-15-rakudo_moar_since_last_release.html - i don't really trust these measurements for some reason ...

[23:05] <TimToady> by some reckoning there's nine letters in 𒐎

[23:05] *** cognominal joined
[23:07] <AlexDaniel> TimToady: I wonder if there is any font that supports it

[23:08] *** rurban left
[23:08] *** kmel joined
[23:08] *** kmel left
[23:09] *** kmel joined
[23:10] <masak> 'night, #perl6

[23:10] <AlexDaniel> split_string_constant, split_string_regex – ouch!

[23:12] * timotimo tries to get some rest and get well

[23:12] <TimToady> AlexDaniel: shows up on my screen just fine :)

[23:13] <TimToady> timotimo++

[23:13] *** llfourn joined
[23:14] <TimToady> AlexDaniel: but maybe that's because:

[23:14] <TimToady> > ls .fonts/

[23:14] <TimToady> Aegean.ttf      Aegyptus_R.ttf  Analecta.ttf   Gardiner.ttf   HAN NOM B.ttf  Musica.ttf   Unidings.ttf

[23:14] <TimToady> Aegyptus_B.ttf  Akkadian.ttf    Anatolian.ttf  HAN NOM A.ttf  Maya.ttf       Symbola.ttf

[23:19] *** kmel left
[23:19] *** llfourn left
[23:23] *** EricMobiel joined
[23:30] <ShimmerFairy> m: say "𒐎".uniname

[23:30] <camelia> rakudo-moar 271e84: OUTPUT«CUNEIFORM NUMERIC SIGN NINE DISH␤»

[23:32] <AlexDaniel> m: say 'ﯹ'.uniname

[23:32] <camelia> rakudo-moar 271e84: OUTPUT«ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM␤»

[23:34] <AlexDaniel> OK, it seems like this one is 18 characters or so

[23:34] <AlexDaniel> m: say 'ﷺ'.uniname

[23:34] <camelia> rakudo-moar 271e84: OUTPUT«ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM␤»

[23:46] *** tokuhirom joined
[23:50] *** tokuhirom left
[23:51] <gfldex> m: my constant @a := map { .chr.chars }, 1..33500; say [max] @a;

[23:51] <camelia> rakudo-moar 271e84: OUTPUT«(signal SEGV)»

[23:51] <gfldex> i think that's my first segfault rakudobug :)

[23:53] <gfldex> sadly i cant think of a version that doesnt use map

[23:54] <gfldex> r: my constant @a := map { .chr.chars }, 1..33500; say [max] @a;

[23:54] <camelia> rakudo-moar 271e84: OUTPUT«(signal SEGV)»

[23:54] <camelia> ..rakudo-jvm 271e84: OUTPUT«1␤»

[23:56] <ugexe>  m: my constant @a := (1..33500)>>.chr>>.chars; say [max] @a;

[23:56] <camelia> rakudo-moar 271e84: OUTPUT«(signal SEGV)»

[23:57] *** bigrattus joined
[23:58] *** luiz_lha joined
[23:58] *** luiz_lha is now known as Guest93853

[23:58] *** [particle]1 joined
