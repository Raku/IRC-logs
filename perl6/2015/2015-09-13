[00:00] <ugexe> now that i've stated that im sure it will start giving me problems again

[00:00] *** n0tjack joined
[00:04] *** mprelude left
[00:04] *** pierrot joined
[00:09] *** vendethiel left
[00:09] *** pierrot left
[00:13] *** n0tjack left
[00:13] *** colomon joined
[00:14] *** n0tjack joined
[00:20] *** geekosaur joined
[00:27] <psch> ugexe: i was thinking gdb backtrace, actually

[00:27] <psch> ugexe: sorry for misspeaking

[00:39] *** aborazmeh left
[00:39] *** lolisa joined
[00:39] *** thou left
[00:40] *** n0tjack left
[00:42] <ShimmerFairy> .tell TimToady one thing about 'is raw' is that it's just one letter (and visually similar) to 'is rw', and I'm not sure if having such different behaviors be so close in name is a good idea (even worse, 'a' neighbors 'w' on QWERTY, so accidental 'rw'->'raw' is possible too if your fingers slip a bit :P)

[00:42] <yoleaux> ShimmerFairy: I'll pass your message to TimToady.

[00:48] <grondilu> ^that looks like a reasonable objection

[00:53] *** b2gills joined
[00:58] *** n0tjack joined
[01:00] * TimToady already considered it before deciding

[01:00] <yoleaux> 00:42Z <ShimmerFairy> TimToady: one thing about 'is raw' is that it's just one letter (and visually similar) to 'is rw', and I'm not sure if having such different behaviors be so close in name is a good idea (even worse, 'a' neighbors 'w' on QWERTY, so accidental 'rw'->'raw' is possible too if your fingers slip a bit :P)

[01:00] <colomon> Util: ping?

[01:01] <ShimmerFairy> TimToady: that's good to hear :) . I wonder if an 'is rw' slip-up would be caught if you weren't returning a Proxy ('is raw' slip-up would be caught as you tried assigning to the call)

[01:03] *** n0tjack left
[01:08] <colomon> .tell masak I’ve got a pull request to get Perl6::Literate passing tests again.

[01:08] <yoleaux> colomon: I'll pass your message to masak.

[01:12] <colomon> .tell Util I’ve got a pull request for you, too.  :)

[01:12] <yoleaux> colomon: I'll pass your message to Util.

[01:13] *** aborazmeh joined
[01:13] *** aborazmeh left
[01:13] *** aborazmeh joined
[01:31] *** n0tjack joined
[01:31] *** tokuhiro_ joined
[01:35] *** n0tjack left
[01:36] *** tokuhiro_ left
[01:42] *** skids joined
[01:48] *** thou joined
[01:52] *** thou left
[02:04] *** n0tjack joined
[02:05] *** TimToady joined
[02:08] *** n0tjack left
[02:09] *** colomon left
[02:13] *** BenGoldberg left
[02:14] <dalek> specs: 9855bfd | raiph++ | S07-lists.pod:

[02:14] <dalek> specs: typo

[02:14] <dalek> specs: review: https://github.com/perl6/specs/commit/9855bfdc46

[02:23] *** colomon joined
[02:33] *** kjs__ joined
[02:36] *** n0tjack joined
[02:40] *** n0tjack left
[02:55] *** noganex joined
[02:56] <dalek> specs: fb7cb20 | raiph++ | S07-lists.pod:

[02:56] <dalek> specs: simplify / improve non-technical language

[02:56] <dalek> specs: review: https://github.com/perl6/specs/commit/fb7cb20e2b

[02:58] *** noganex_ left
[02:58] *** kjs__ left
[03:02] <diakopter> arm warnings: http://pastebin.com/5V9vs6tA

[03:07] *** colomon left
[03:09] *** n0tjack joined
[03:14] *** n0tjack left
[03:20] *** colomon joined
[03:26] *** khw left
[03:32] *** khw joined
[03:33] *** tokuhiro_ joined
[03:36] *** thou joined
[03:38] *** tokuhiro_ left
[03:41] *** rangerprice left
[03:42] *** n0tjack joined
[03:46] <dalek> rakudo/nom: f7d8335 | TimToady++ | src/core/ (2 files):

[03:46] <dalek> rakudo/nom: Xop didn't set lazy right

[03:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f7d833552b

[03:47] *** n0tjack left
[04:12] *** khw left
[04:15] *** n0tjack joined
[04:16] <dalek> doc: 173717a | skids++ | lib/Language/functions.pod:

[04:16] <dalek> doc: Document conventional flattening style/single-argument-rule post-GLR

[04:16] <dalek> doc: review: https://github.com/perl6/doc/commit/173717abd5

[04:18] *** ggoebel left
[04:19] *** ggoebel joined
[04:19] *** n0tjack left
[04:26] <Util> colomon: pong

[04:26] <yoleaux> 01:12Z <colomon> Util: I’ve got a pull request for you, too.  :)

[04:28] <dalek> rakudo/nom: cc0c380 | TimToady++ | src/core/metaops.pm:

[04:28] <dalek> rakudo/nom: triangle reduce should pass on is-lazy

[04:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc0c380e38

[04:33] *** vendethiel joined
[04:35] <dalek> roast: 75dcd61 | TimToady++ | S03-metaops/reduce.t:

[04:35] <dalek> roast: test triangle laziness transitivity

[04:35] <dalek> roast: review: https://github.com/perl6/roast/commit/75dcd61569

[04:35] <dalek> roast: cd5a1af | TimToady++ | S03-metaops/cross.t:

[04:35] <dalek> roast: test Xop laziness transitivity

[04:35] <dalek> roast: review: https://github.com/perl6/roast/commit/cd5a1af2b9

[04:42] *** kaare_ joined
[04:47] *** n0tjack joined
[04:47] <Util> colomon: Merged. Thanks!

[04:51] *** n0tjack left
[04:56] *** thou left
[04:58] *** vendethiel left
[05:20] *** n0tjack joined
[05:20] *** aborazmeh left
[05:20] *** shinobi-cl joined
[05:22] <shinobi-cl> Hi

[05:22] <shinobi-cl> r: my @a=(1,2,(30,40),50); say @a.flat.perl;

[05:22] <camelia> rakudo-moar cc0c38: OUTPUT«(1, 2, $(30, 40), 50).Seq␤»

[05:22] <camelia> ..rakudo-jvm cc0c38: OUTPUT«Can't open perl script "/home/camelia/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[05:23] <shinobi-cl> What can i use to get (1,2,30,40,50) instead of (1, 2, $(30, 40), 50)?

[05:23] <shinobi-cl> r: my @a=(1,2,[30,40],50); say @a.flat.perl;

[05:23] <camelia> rakudo-moar cc0c38: OUTPUT«(1, 2, $[30, 40], 50).Seq␤»

[05:23] <camelia> ..rakudo-jvm cc0c38: OUTPUT«Can't open perl script "/home/camelia/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[05:24] *** n0tjack left
[05:25] *** lolisa left
[05:32] <TimToady> m: my @a=(1,2,[30,40],50); say @a»<>.flat.perl

[05:33] <camelia> rakudo-moar cc0c38: OUTPUT«(1, 2, 30, 40, 50).Seq␤»

[05:33] <TimToady> m: my @a=(1,2,[30,40],50); say @a»[].flat.perl

[05:33] <camelia> rakudo-moar cc0c38: OUTPUT«(1, 2, 30, 40, 50).Seq␤»

[05:34] <TimToady> an array itemizes its elements, so flat can't work directly on an array

[05:34] *** tokuhiro_ joined
[05:34] <TimToady> though perhaps Array.flat could imply deitemization of the elements

[05:38] *** tokuhiro_ left
[05:52] *** n0tjack joined
[05:57] *** n0tjack left
[06:01] <ShimmerFairy> TimToady: you could generally characterize .flat as "treat each Positional item as though it were really a Slip" if you went with that, I think. (That is, [1, [2, [3, 4], 5]].flat -> [1, |[2, [3, 4], 5]] -> [1, 2, [3, 4], 5]

[06:06] <TimToady> well, but flat is recursive ordinarily

[06:08] <TimToady> grr, just got a "Too many arguments in flattening array" trying to do [max] @values

[06:08] <ShimmerFairy> Ah. Was there a one-level version of flat? I seem to recall one.

[06:10] *** Alina-malina joined
[06:13] <TimToady> m: say [max] rand xx 65536

[06:13] <camelia> rakudo-moar cc0c38: OUTPUT«Too many arguments in flattening array.␤  in block <unit> at /tmp/82jmDsKdSj:1␤␤»

[06:13] <TimToady> "no arbitrary limits" used to be one of Perl's mantras...

[06:13] <TimToady> m: say [max] rand xx 65535

[06:13] <camelia> rakudo-moar cc0c38: OUTPUT«(signal SEGV)»

[06:13] <TimToady> kaboom!

[06:14] <TimToady> m: say [max] rand xx 32767

[06:14] <camelia> rakudo-moar cc0c38: OUTPUT«0.99997142410332␤»

[06:14] <TimToady> m: say [max] rand xx 32768

[06:14] <camelia> rakudo-moar cc0c38: OUTPUT«0.99996649321421␤»

[06:14] <TimToady> m: say [max] rand xx 32769

[06:14] <camelia> rakudo-moar cc0c38: OUTPUT«(signal SEGV)»

[06:25] *** n0tjack joined
[06:28] *** thou joined
[06:30] *** n0tjack left
[06:31] *** domidumont joined
[06:33] *** thou left
[06:36] *** tokuhiro_ joined
[06:36] *** domidumont left
[06:37] *** domidumont joined
[06:40] *** tokuhiro_ left
[06:40] *** rurban joined
[06:41] *** xfix joined
[06:41] *** xfix left
[06:41] *** xfix joined
[06:57] *** n0tjack joined
[06:58] <moritz> m: say <a b c>.map({ ($_, $_.uc).Slip }).join('|');

[06:58] <camelia> rakudo-moar cc0c38: OUTPUT«a|A|b|B|c|C␤»

[06:59] <moritz> m: say <a b c>.map({ $_, $_.uc }).join('|');

[06:59] <camelia> rakudo-moar cc0c38: OUTPUT«a A|b B|c C␤»

[07:01] <dalek> doc: e835af6 | skids++ | lib/Type/Signature.pod:

[07:01] <dalek> doc: Document **@ slurpies and "is raw", a few GLR tweaks, general cleanups

[07:01] <dalek> doc: review: https://github.com/perl6/doc/commit/e835af6a41

[07:01] <moritz> skids++

[07:02] <moritz> skids: I believe the Parameter docs also need adjustment

[07:02] *** n0tjack left
[07:02] <skids> Yes, and also I pointed people towards "sigilless" to understand "is raw" but sigilless is probably not there.

[07:03] <skids> But now I must sleep.

[07:04] <moritz> g'night skids 

[07:04] <dalek> doc: 6c65000 | moritz++ | / (2 files):

[07:04] <dalek> doc: Document Slip

[07:04] <dalek> doc: review: https://github.com/perl6/doc/commit/6c650002e2

[07:04] <skids> BTW, maybe you have a local tweak/branch but htmlify-glr errors for me on some fancy attempt to use a bound var ($fc) from a when clause. 

[07:06] <dalek> doc/htmlify-glr: 7cd718e | moritz++ | htmlify.p6:

[07:06] <dalek> doc/htmlify-glr: Fix syntax error

[07:06] <dalek> doc/htmlify-glr: review: https://github.com/perl6/doc/commit/7cd718ef3b

[07:06] <moritz> skids: ah yes, forgot to push

[07:06] <moritz> skids: now it errors out much later

[07:07] <skids> :-)

[07:07] <skids> It at least builds what I need to see :-)

[07:07] <skids> good night.

[07:08] *** skids left
[07:08] <dalek> rakudo/nom: 77cf273 | moritz++ | src/core/Iterator.pm:

[07:08] <dalek> rakudo/nom: Fix a comment

[07:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/77cf273eb5

[07:10] <dalek> doc/htmlify-glr: 96c51b5 | moritz++ | lib/Type/Parameter.pod:

[07:10] <dalek> doc/htmlify-glr: s:ii/parcel/raw/ in Parameter.pod

[07:10] <dalek> doc/htmlify-glr: review: https://github.com/perl6/doc/commit/96c51b59b6

[07:11] <moritz> ups, that should have gone into master

[07:13] <dalek> doc: fbead37 | moritz++ | lib/Type/Parameter.pod:

[07:13] <dalek> doc: s:ii/parcel/raw/ in Parameter.pod

[07:13] <dalek> doc: review: https://github.com/perl6/doc/commit/fbead37fe1

[07:13] <moritz> cherry-pick FTW

[07:29] *** n0tjack joined
[07:33] *** domidumont left
[07:34] *** n0tjack left
[07:38] <FROGGS_> .

[07:38] <yoleaux> 12 Sep 2015 22:16Z <psch> FROGGS_: 1) assign a <> quoted list of the int literals from 0 to 250 to an array

[07:38] <yoleaux> 12 Sep 2015 22:17Z <psch> FROGGS_: 2) assign a <> quoted list of the int literals from 0 to 251 to an array

[07:38] <yoleaux> 12 Sep 2015 22:17Z <psch> FROGGS_: 3) assign a <> quoted list of the int literals from 0 to 252 to an array

[07:38] <yoleaux> 12 Sep 2015 22:18Z <psch> FROGGS_: just to be clear, that is "<0 1 2 3 ... 248 249 250>" all typed (or generated of course :) ) literally in the program code

[07:38] *** FROGGS_ is now known as FROGGS

[07:38] <FROGGS> .

[07:38] <yoleaux> 12 Sep 2015 22:16Z <psch> FROGGS: if you're looking for a great WAT try the following three things on jvm:

[07:38] <yoleaux> 12 Sep 2015 22:22Z <psch> FROGGS: (the actual three things are .tell

[07:38] <yoleaux> 12 Sep 2015 22:22Z <psch> FROGGS: .tell'd to FROGGS_ )

[07:38] <FROGGS> :D

[07:42] *** darutoko joined
[07:44] *** laouji joined
[07:46] *** rindolf joined
[07:48] <[Tux]> Inline::Perl5 still broken

[07:54] <FROGGS> uhh

[07:59] <FROGGS> ahh, still the IntStr thing

[08:00] <[Tux]> test             50000    39.638    39.556

[08:00] <[Tux]> test-t           50000    39.341    39.259

[08:00] <ShimmerFairy> FROGGS: you can use qw// (note no :v) if you still want to use a quotewords list :)

[08:02] *** n0tjack joined
[08:03] <FROGGS> m: sub foo(IntStr:D $a) { say $a.WHAT }; foo <42>

[08:03] <camelia> rakudo-moar 77cf27: OUTPUT«(IntStr)␤»

[08:03] <FROGGS> m: sub foo(Int(IntStr:D) $a) { say $a.WHAT }; foo <42>

[08:03] <camelia> rakudo-moar 77cf27: OUTPUT«(IntStr)␤»

[08:03] <FROGGS> m: sub foo(Int(IntStr:D) $a) { say $a:Int.WHAT }; foo <42>

[08:03] <camelia> rakudo-moar 77cf27: OUTPUT«(IntStr)␤»

[08:03] <FROGGS> m: sub foo(Int(IntStr:D) $a) { say $a.Int.WHAT }; foo <42>

[08:03] <camelia> rakudo-moar 77cf27: OUTPUT«(Int)␤»

[08:03] <FROGGS> m: sub foo(Int(IntStr):D $a) { say $a.WHAT }; foo <42>

[08:03] <camelia> rakudo-moar 77cf27: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uDagI7FQ_7␤Missing block␤at /tmp/uDagI7FQ_7:1␤------> 3sub foo(Int(IntStr):D 7⏏5$a) { say $a.WHAT }; foo <42>␤»

[08:06] <FROGGS> nine: ping

[08:07] <FROGGS> nine: can I get a commit bit to I::P5?

[08:07] <FROGGS> [Tux]: I've got a patch

[08:07] *** n0tjack left
[08:07] <[Tux]> :)

[08:08] *** vendethiel joined
[08:09] <FROGGS> nine: I PR'd it so it wont get lost: https://github.com/niner/Inline-Perl5/pull/44

[08:10] <dalek> Inline-Perl5: 3d79bbd | FROGGS++ | lib/Inline/Perl5.pm6:

[08:10] <dalek> Inline-Perl5: handle {Int,Num,Rat}Str in p6_to_p5

[08:10] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/3d79bbd7ac

[08:10] <dalek> Inline-Perl5: 221f67c | lizmat++ | lib/Inline/Perl5.pm6:

[08:10] <dalek> Inline-Perl5: Merge pull request #44 from FROGGS/patch-3

[08:10] <dalek> Inline-Perl5: 

[08:10] <dalek> Inline-Perl5: handle {Int,Num,Rat}Str in p6_to_p5

[08:10] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/221f67c89d

[08:10] <FROGGS> thanks lizmat :o)

[08:10] <lizmat> FROGGS o/  and you're welcome  :-)

[08:10] <FROGGS> [Tux]: can you check if that helps?

[08:11] <[Tux]> was already doing so

[08:12] *** Alina-malina left
[08:12] <nine> Wow you people are too fast. While I was just fetching some coffee, you already fixed and merged it :)

[08:12] <yoleaux> 12 Sep 2015 22:49Z <TimToady> nine: re http://irclog.perlgeek.de/perl6/2015-09-12#i_11206412 there were more than 200 instances of .list in the pre-cache era that didn't actually need to set up the cache but did so accidentally, so it's a good thing for performance that .list no longer does that

[08:13] <nine> FROGGS: you now have a commit bit

[08:13] <lizmat> breakfast&    # this is your chance!   :-)

[08:13] <FROGGS> nine: thanks you :o)

[08:14] <FROGGS> breakfast &

[08:14] *** telex left
[08:14] <[Tux]> All tests successful.

[08:14] <[Tux]> Files=25, Tests=344, 93 wallclock secs ( 0.09 usr  0.02 sys + 90.82 cusr  1.63 csys = 92.56 CPU)

[08:14] <[Tux]> Result: PASS

[08:15] <dalek> perl6.org: a750b34 | (Ryan Siemens)++ | source/style.css:

[08:15] <dalek> perl6.org: Fixes layout for #col1 and #col2 (issue #20)

[08:15] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/a750b34ad8

[08:15] <dalek> perl6.org: 7ccbcd2 | niner++ | source/style.css:

[08:15] <dalek> perl6.org: Merge pull request #21 from Nudies/master

[08:15] <dalek> perl6.org: 

[08:15] <dalek> perl6.org: Fixes layout for #col1 and #col2 (issue #20)

[08:15] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/7ccbcd2a74

[08:16] *** telex joined
[08:17] *** thou joined
[08:21] *** thou left
[08:22] <[Tux]> https://gist.github.com/Tux/44e2e0341a56cdef022d

[08:23] *** cognominal joined
[08:32] <dalek> doc: 0a70add | (Stefan Seifert)++ | lib/Type/Iterator.pod:

[08:32] <dalek> doc: Fix typo and add clarification for Iterator::push-all

[08:32] <dalek> doc: review: https://github.com/perl6/doc/commit/0a70add133

[08:34] *** n0tjack joined
[08:37] *** tokuhiro_ joined
[08:39] *** n0tjack left
[08:41] *** tokuhiro_ left
[08:48] <nine> .tell TimToady I guess our disagreement comes from me just not seeing the performance penalty. If I don't store a Seq into a variable and .cache (previously .list) it, all that changes is that an additional reference to the new List is stored in the Seq that's gonna be collected anyway in the same GC run as the list. Persisting the Seq however only makes sense if I intend to call .cache on it again later on.

[08:48] <yoleaux> nine: I'll pass your message to TimToady.

[08:49] <nine> .tell TimToady But I'll stop arguing now. It may still be a tiny bit faster to avoid storing the reference and I lack experience with the new semantics to back up any claims to lower usability. And it's not that important a topic anyway :)

[08:49] <yoleaux> nine: I'll pass your message to TimToady.

[08:52] <dalek> roast: cafd4cd | usev6++ | S06-signature/multi-invocant.t:

[08:52] <dalek> roast: Mention RT #125486 in existing test

[08:52] <dalek> roast: review: https://github.com/perl6/roast/commit/cafd4cdae9

[08:57] *** Alina-malina joined
[08:58] *** n0tjack joined
[09:01] <dalek> roast/gmr: b5abf2b | (Stefan Seifert)++ | S (3 files):

[09:01] <dalek> roast/gmr: Rename EnumMap to Map

[09:01] <dalek> roast/gmr: review: https://github.com/perl6/roast/commit/b5abf2ba2c

[09:01] <dalek> roast/gmr: fde5712 | (Stefan Seifert)++ | S (7 files):

[09:01] <dalek> roast/gmr: Merge Enum into Pair

[09:01] <dalek> roast/gmr: 

[09:01] <dalek> roast/gmr: This should reduce the confusion around enum, Enum an Enumeration.

[09:01] <dalek> roast/gmr: Pair now implements shallow immutability like List. Pairs themselves are

[09:01] <dalek> roast/gmr: immutable, but containers used as values can be assigned to.

[09:01] <dalek> roast/gmr: review: https://github.com/perl6/roast/commit/fde5712594

[09:01] <dalek> roast/gmr: bc28422 | (Stefan Seifert)++ | S02-types/pair.t:

[09:01] <dalek> roast/gmr: Changing $pair.value now changes the contained $var

[09:01] <dalek> roast/gmr: 

[09:01] <dalek> roast/gmr: Pairs now behave in the same way as Lists. The values are mutable only if they

[09:01] <dalek> roast/gmr: are itemized. If they are, assigning to them assigns to the original variable.

[09:01] <dalek> roast/gmr: review: https://github.com/perl6/roast/commit/bc28422dbd

[09:01] <dalek> roast/gmr: e587a70 | (Stefan Seifert)++ | S (4 files):

[09:01] <dalek> roast/gmr: RT #124640 fixed by merging Enum and Pair

[09:01] <dalek> roast/gmr: review: https://github.com/perl6/roast/commit/e587a70dea

[09:01] <dalek> roast/gmr: f58b050 | (Stefan Seifert)++ | S06-advanced/return.t:

[09:01] <dalek> roast/gmr: RT #75118 is fixed now

[09:01] <dalek> roast/gmr: review: https://github.com/perl6/roast/commit/f58b050a72

[09:02] <nine> Karma pushing by rebase...

[09:02] *** n0tjack left
[09:06] *** AlexDaniel joined
[09:07] *** n0tjack joined
[09:11] *** n0tjack left
[09:19] <dalek> rakudo/gmr: 934c83f | (Stefan Seifert)++ | / (22 files):

[09:19] <dalek> rakudo/gmr: Rename EnumMap to Map

[09:19] <dalek> rakudo/gmr: 

[09:19] <dalek> rakudo/gmr: Suggested by jnthn++

[09:19] <dalek> rakudo/gmr: review: https://github.com/rakudo/rakudo/commit/934c83f45d

[09:19] *** dalek left
[09:20] *** dalek joined
[09:20] *** ChanServ sets mode: +v dalek

[09:21] <psch> FROGGS: that .tell'd WAT is actually not the greatest i have seen in the jvm spectests yesterday

[09:21] <psch> FROGGS: for some reason, our associative code throws ConcurrentModificationExceptions

[09:21] <psch> *that's* the WATtiest i've seen...

[09:22] <lizmat> nine: the new order of most commits list logic, only takes unique commit ID's into account, so no extra "karma" by rebase  :-)

[09:22] <nine> :)

[09:23] <nine> lizmat: what do you think about removing PairMap? That's the only missing step from the GMR proposal

[09:23] <lizmat> I only implemented PairMap because it was specced...

[09:23] <lizmat> I have no specific feelings about it

[09:24] <lizmat> so, removing PairMap is fine by me, if it is also removed from the spec  :-)

[09:24] *** mprelude joined
[09:24] <lizmat> (and roast ;-)

[09:25] <nine> I actually cannot find any spec tests for PairMap, except WHICH.t

[09:25] <lizmat> yeah, I didn't write any because of the iffy future of PairMap  :-)

[09:28] <nine> Well, removed code is debugged code ;)

[09:28] *** leont joined
[09:28] <dalek> roast/gmr: 31f3b82 | (Stefan Seifert)++ | S02-types/WHICH.t:

[09:28] <dalek> roast/gmr: Remove PairMap - it's use case is unclear and it's untested

[09:28] <dalek> roast/gmr: 

[09:28] <dalek> roast/gmr: We can revert this if a use case appears. Maybe after 6.0.0.

[09:28] <dalek> roast/gmr: review: https://github.com/perl6/roast/commit/31f3b82b6b

[09:29] <dalek> rakudo/gmr: 77e52ec | (Stefan Seifert)++ | / (4 files):

[09:29] <dalek> rakudo/gmr: Remove PairMap - its use case is unclear and it's untested

[09:29] <dalek> rakudo/gmr: 

[09:29] <dalek> rakudo/gmr: We can revert this if a use case appears. Maybe after 6.0.0.

[09:29] <dalek> rakudo/gmr: review: https://github.com/rakudo/rakudo/commit/77e52ec7fd

[09:29] *** espadrine joined
[09:30] <nine> PSA: the gmr branch is now complete. I think it's time we discuss the proposed changed.

[09:31] <nine> .tell jnthn the gmr branch is now ready for a closer look.

[09:31] <yoleaux> nine: I'll pass your message to jnthn.

[09:31] <nine> .tell TimToady the gmr branch is now ready for a closer look.

[09:31] <yoleaux> nine: I'll pass your message to TimToady.

[09:36] <dalek> Heuristic branch merge: pushed 20 commits to rakudo/cu_load by lizmat

[09:37] *** leont left
[09:37] *** shinobi-cl left
[09:39] *** n0tjack joined
[09:44] *** n0tjack left
[09:56] <FROGGS> psch: hmmm

[09:57] *** domidumont joined
[09:58] <psch> i'm about 1/3 through briefly looking closer at every file, just to collect which failures might be related...

[09:59] <psch> also nice are the (i think about 6 or so as off yet) "Unhandled exception: category $n" where $n is 4102, 4100 and 4104

[09:59] <psch> we're throwing those ourselves if we don't have a .msg on an exception...

[09:59] <FROGGS> ohh, that's about next/last/redo with labels

[09:59] <FROGGS> O.o

[09:59] <psch> yeah, fits with the files i've seen it in 

[09:59] <psch> also lots of "Expected Positional but got Seq"

[10:00] <FROGGS> I think I changed the payload stuff on moar... but only in a branch IIRC

[10:00] <FROGGS> so the binder needs love?

[10:00] <FROGGS> hmmm

[10:00] <psch> well, i'll finish the brief comments for every file and gist that

[10:00] <FROGGS> I just pulled all the things and am going to build perl6-j

[10:00] <psch> maybe an hours or so 

[10:00] <FROGGS> psch++

[10:01] <FROGGS> awesome

[10:04] <psch> S05 stuff has lots of UnwindExceptions o.o

[10:05] *** thou joined
[10:05] <lizmat> confirm gmr branch has the same spectest issues as nom  :-)

[10:08] <psch> FROGGS: i think the easiest thing we definitely need are the NYIs in the Binder that got there due to the glr

[10:09] <psch> FROGGS: e.g. "is copy on list NYI after glr" and whatever the other was... :)

[10:09] *** FROGGS left
[10:09] *** thou left
[10:11] *** FROGGS joined
[10:11] <psch> it's a bit unfortunate that i built r-j before "is parcel" became "is raw" but ran spectest after :/

[10:11] <psch> i have like 6 files already that fail due to that

[10:12] <FROGGS> psch: yeah, that also caused extra work at the spw...

[10:12] *** n0tjack joined
[10:12] <FROGGS> roast and rakudo changed that quickly that you could reliable test a fix

[10:13] <FROGGS> so I decided to change the makefile to not pull roast

[10:16] <masak> good noon, #perl6

[10:16] <yoleaux> 01:08Z <colomon> masak: I’ve got a pull request to get Perl6::Literate passing tests again.

[10:17] *** n0tjack left
[10:17] <masak> colomon: thank you. merged.

[10:17] <psch> hi masak o/

[10:18] <FROGGS> psch: btw, the 'array is copy' NYI'd thing also just has a die() on moar

[10:19] <psch> m: sub f(@a is copy) { }

[10:19] <camelia> rakudo-moar 77cf27: ( no output )

[10:19] <psch> m: sub f(@a is copy) { }; say f([1,2,3])

[10:19] <camelia> rakudo-moar 77cf27: OUTPUT«Nil␤»

[10:19] <psch> m: sub f(@a is copy) { @a[1] = 5; @a}; say f([1,2,3])

[10:19] <camelia> rakudo-moar 77cf27: OUTPUT«[1 5 3]␤»

[10:19] *** diana_olhovik_ joined
[10:20] <FROGGS> psch: I think it is about attribute binding, but I was unable to trigger that code path

[10:20] <psch> $ ./perl6-j -e'sub f(@a is copy) { @a[1] = 5; @a }; say f([1,2,3])'

[10:20] <psch> is copy on lists NYI after GLR

[10:20] <FROGGS> hmmm

[10:20] * masak merged the other three PRs on that repo, too

[10:21] <lizmat> FROGGS: we have at least: multi method push(Buf:D: @values is copy) { in core

[10:22] <FROGGS> lizmat / psch: but look: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/BOOTSTRAP.nqp#L408

[10:23] <lizmat> whoops... so we have at least some breakage in core on both jvm/moar

[10:24] <psch> huh

[10:24] <psch> but we have working logic for @ is copy somewhere in moar, apparently :P

[10:24] <FROGGS> lizmat: but it does not seem to trigger on moar, which is weird

[10:24] <FROGGS> psch: I fear the entire weirdness we see boils down to missing stuff like this: https://github.com/rakudo/rakudo/blob/nom/src/core/metaops.pm#L105

[10:24] <psch> $ ./perl6-j -e'sub f(@a is copy) { @a[1] = 5; @a }; my @b = 1,2,3; say f(@b); say @b

[10:25] <psch> m: sub f(@a is copy) { @a[1] = 5; @a }; my @b = 1,2,3; say f(@b); say @b

[10:25] <camelia> rakudo-moar 77cf27: OUTPUT«[1 5 3]␤[1 2 3]␤»

[10:25] <FROGGS> or at least that the jvm implementation is weird in general and needs these hacks

[10:25] <psch> mhm :/

[10:25] *** abaugher left
[10:25] <psch> i guess ripping out all the #?if jvm and *then* fixing everything is probably more sensible

[10:26] <lizmat> psch++  :-)

[10:26] <FROGGS> it will at least help us in future

[10:26] *** abaugher joined
[10:26] <lizmat> having #?if code in the core, always makes me sad  

[10:26] <psch> one of my favorite weirds on jvm is returning a sub from a sub

[10:27] <FROGGS> well, it can be sensible

[10:27] <psch> it just doesn't work :l

[10:27] <lizmat> psch: you need to containerize it apparently

[10:27] <psch> lizmat: it NPEs

[10:27] <psch> the value to assign isn't there

[10:27] <psch> which is the sub

[10:27] <lizmat> ===SORRY!=== Error while compiling lib/Pod/To/Text.pm

[10:27] <lizmat> java.lang.StackOverflowError

[10:27] <lizmat> at lib/Pod/To/Text.pm:14

[10:27] <lizmat> this is known, right ?

[10:28] <psch> that should actually be fixed..? :s

[10:28] <lizmat> or is this on OSX specific jvm error

[10:28] <psch> oh, right OSX

[10:28] <psch> well, we still have some SOEs even after the "don't check the SC" hack, but maybe OSX does something a tad different somewhere...

[10:29] <lizmat> i'll nuke install and start from scratch, just to be sure

[10:29] <psch> anyway, i guess a branch for "no #?if jvm in CORE" should be the next step

[10:30] <psch> well, maybe i'll just try it locally first and see if i can see any silver lining anywhere at all :P

[10:30] <psch> FROGGS: the test report is half finished, if you think it's worth looking from there i can upload

[10:30] <FROGGS> psch: sure

[10:30] <psch> FROGGS: but i think trying to bring jvm towards "what we actually want" is more useful

[10:31] <FROGGS> psch: ===SORRY!=== Error while compiling lib/Pod/To/Text.pm

[10:31] <FROGGS> java.lang.StackOverflowError

[10:31] <FROGGS> right now

[10:31] <psch> and "treat it differently" isn't what we want i guess :s

[10:31] <psch> ugh

[10:31] <FROGGS> I dont have the 'flat hhlize' => '|hllize' in there atm though

[10:31] <psch> well, it's only 7 commits to bisect... :)

[10:33] <psch> (i have a hunch that nqp c16481c6eeb2480ebc3dbbc9aeda74a9e72ba00c could be to blame though...)

[10:33] <psch> although it shouldn't be vOv

[10:33] <timotimo> o/

[10:34] <timotimo> slurpy giving us the problem of reaching the maximum argument number soon is ... unfortunate

[10:34] *** pmurias joined
[10:35] <psch> timotimo: slurpy?

[10:36] <psch> timotimo: oh, right qw// calls a sub

[10:36] <psch> FROGGS: https://gist.github.com/peschwa/eeeca39eef9d66db9e92

[10:36] <psch> timotimo: i think the codegen is doing bogus there, fwiw

[10:37] <psch> timotimo: as in, it shouldn't generate a method that has that many arguments..?

[10:37] <psch> i haven't looked too closely at it though, in any case...

[10:37] *** AlexDaniel left
[10:39] *** tokuhiro_ joined
[10:39] <FROGGS> $ ./perl6-j -e'sub f(@a is copy) { @a[1] = 5; @a }; say f([1,2,3])'

[10:39] <FROGGS> [1 5 3]

[10:39] <psch> the ConcurrentModificationException are the scariest ones imo :<

[10:39] <FROGGS> dunno if my implementation is sensible though

[10:40] <psch> eh, make it work, then wait until it bitrots and make it work again

[10:40] <psch> ... >_>

[10:40] <FROGGS> hmm?

[10:41] <psch> i was trying to be funny :)

[10:41] <FROGGS> *g*

[10:41] <FROGGS> "haha" :P

[10:42] <psch> i can have a look though, if you want :P

[10:42] <dalek> rakudo/nom: 5cc2563 | FROGGS++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[10:42] <dalek> rakudo/nom: implement @array is copy in binder on jvm

[10:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5cc25631ef

[10:43] *** tokuhiro_ left
[10:44] <JimmyZ> ^^ still NYI on moarvm?

[10:44] <FROGGS> psch: and it seems the Pod::To::Text SOE boils down to the 'flat hllize' thing, as it is gone now with local modifications

[10:44] <FROGGS> JimmyZ: yes, as we dont trigger it

[10:45] *** cschwenz joined
[10:45] <FROGGS> I'm looking at t/spec/S04-statements/last.t now

[10:45] *** n0tjack joined
[10:45] *** Ven joined
[10:45] *** TEttinger left
[10:45] <dalek> roast: b18e1cf | lizmat++ | S02-types/WHICH.t:

[10:45] <dalek> roast: Separate out the exceptions

[10:45] <dalek> roast: 

[10:45] <dalek> roast: So that we don't run into num of slurpy params limit on JVM

[10:45] <dalek> roast: review: https://github.com/perl6/roast/commit/b18e1cf5d8

[10:45] *** dalek left
[10:45] <cschwenz> is there a Perl6 equivalent to Time::HiRes?

[10:45] <cschwenz> (i need sub-second time info.  :-/)

[10:45] *** dalek joined
[10:45] *** ChanServ sets mode: +v dalek

[10:46] <jdv79> m: say now

[10:46] <camelia> rakudo-moar 77cf27: OUTPUT«Instant:1442141205.268170␤»

[10:46] <jdv79> good enough?

[10:46] <cschwenz> works for me :-)

[10:46] <cschwenz> thanks!

[10:46] <psch> FROGGS: that bug is so weird... and SOE is horrible to debug as well :/

[10:47] <FROGGS> I hope last LABEL will be less weird

[10:47] <cschwenz> m: my $x = now; sleep(0.5); my $y = now; my $z = $y - $x; say $z;

[10:47] <camelia> rakudo-moar 77cf27: OUTPUT«0.5027379␤»

[10:48] <lizmat> cschwenz: so is that good or bad ?

[10:48] <jdv79> pretty sure it'll only be skewed one way at least;)

[10:48] <cschwenz> it's good enough for me :-)

[10:49] <lizmat> m: my $x = now; sleep .5; say now - $x

[10:49] <camelia> rakudo-moar 77cf27: OUTPUT«0.5026144␤»

[10:49] <psch> m: my $x = now; sleep 1/2; say now - $x

[10:49] <camelia> rakudo-moar 77cf27: OUTPUT«0.5028343␤»

[10:49] <lizmat> m: my $x = now; sleep .501; say now - $x

[10:49] <camelia> rakudo-moar 77cf27: OUTPUT«0.50341172␤»

[10:49] <cschwenz> if i'm over by a bit it doesn't matter.  under leads to catastrophe.  :-P

[10:49] <jdv79> see Instant, DateTime, and those types on doc.perl6.org for more

[10:49] *** n0tjack left
[10:49] <lizmat> under would mean travelling back in time ?

[10:50] <cschwenz> thus catastrophe!  :-D

[10:50] <lizmat> fair enough  :-)

[10:53] <psch> hm

[10:53] <psch> removing the "#?if jvm" stuff is gonna be lots of fun with quite a few decisions behind it seems

[10:53] <psch> Distro.pm and VM.pm as two interesting first stops :P

[10:53] *** Peter_R left
[10:54] <FROGGS> psch: you cannot remvoe all

[10:54] <FROGGS> but you can/should remove the hacks

[10:54] <FROGGS> the #?jf jvm in Distro.pm probably need to stay

[10:54] <psch> FROGGS: i'm pretty sure i could make the Distro.pm stuff backend agnostic in rakudo, but i'm not sure it's worth the effort

[10:55] <psch> FROGGS: in any case, i'll look for hacks first :)

[10:55] <FROGGS> psch++ # :o)

[10:55] *** Ven left
[10:56] <FROGGS> um...

[10:56] <FROGGS> $ perl6-j t/04-nativecall/01-argless.t

[10:56] <FROGGS> 1..3

[10:56] <FROGGS> ok 1 - survived the call

[10:56] <FROGGS> ok 2 - called argless function

[10:56] <FROGGS> ok 3 - called long_and_complicated_name

[10:56] <FROGGS> psch: ^^

[10:56] <FROGGS> psch: do you get that too???

[10:57] * FROGGS is rather excited

[10:57] <psch> FROGGS: uh, i'm between builds with a few #?if jvm removals already done... :s

[10:58] <FROGGS> ahh, nvm then

[10:58] *** brrt joined
[10:58] <FROGGS> I just want to know if my '@array is copy' patch does that, or if it was working before or after my changes right now...

[10:58] <FROGGS> I changed the relative new ';;' in signatures to ';'

[10:59] <FROGGS> should be ',' actually

[10:59] <FROGGS> but I can imagine that jvm does not understand ';;' yet

[10:59] <timotimo> psch: wha?

[10:59] <timotimo> what were you refering to?

[11:00] <psch> timotimo: oh, i was thinking you were talking about jvm hitting max method arguments when assigning >251 literals in <> to an array

[11:01] <psch> 'cause i think QW has a slurpy :s

[11:03] *** Alina-malina left
[11:03] <timotimo> oh

[11:03] <timotimo> i was thinking of the thing timtoady pasted up there

[11:03] <timotimo> [max] rand() xx 65536

[11:05] *** brrt left
[11:06] <ab5tract> psch: I would imagine that replacing current Distro.pm with a backend-agnostic one would be significantly better than not doing so

[11:06] <yoleaux> 1 Aug 2015 00:15Z <psch> ab5tract: i'm unsure what classloading bit you're refering to.  classloading happens for interop and "normal" runtime in different ways (BootJavaInterop.java and LibraryLoader.java respectively)

[11:06] <yoleaux> 1 Aug 2015 00:16Z <psch> ab5tract: nqp commit d03863352f07a05fa68892997e417b62452cb34e simplifed the former significantly, and i suspect something similar should be possible for LibraryLoader.java too, but i haven't been able to dig in yet

[11:06] <yoleaux> 1 Aug 2015 00:17Z <psch> ab5tract: as for non-jdk interop, you usually need to supply :jar<$jarfile> to the use statement

[11:06] <yoleaux> 1 Aug 2015 00:20Z <psch> ab5tract: i'm not excluding the possibility that there might be something borked in CLASSPATH handling either, though, but i've been away from that bit quite a while...

[11:06] *** Ven joined
[11:07] *** Alina-malina joined
[11:07] <ab5tract> psch: also, thanks for ^^ :)

[11:08] <psch> timotimo: oh, yeah that's also somewhat unsettling...

[11:08] <psch> ab5tract: yeah, i'd like rakudo to be completely backend agnostic - nqp should deal with all of that

[11:09] <FROGGS> psch: okay, the nativecall tests pass without my ';;' changes in signatures

[11:09] <lizmat> ab5tract psch I can only agree  :-)

[11:09] <ab5tract> o/ lizmat :)

[11:09] <psch> ab5tract: but there's a more pressing problems, like type confusion or numerous workaround that shouldn't be neccessary (on first glance)

[11:09] <ab5tract> how's patch -p3?

[11:09] <psch> s/s a /s/

[11:10] <FROGGS> japhb: it seems the jvm backend is healthy enough that I can work on the C++ port

[11:10] *** brrt joined
[11:10] *** brrt left
[11:10] <lizmat> ab5tract: patch -p3 was only one day, and it was yesterday  :-)

[11:10] <ab5tract> psch: fair enough! prioiritization is key

[11:10] <lizmat> it was intensive and exhaustive (for me) but great fun!

[11:10] <ab5tract> glad to hear it :)

[11:10] *** qlx4r joined
[11:10] <lizmat> ab5tract: trying to answer Perl 6 questions while trying to follow discussions in French

[11:11] <psch> FROGGS: do you have any deals left in my why you needed the "my $clone := 1" workaround in Perl6/Actions.nqp?

[11:11] <psch> s/my/mind/

[11:11] *** Ven left
[11:11] <psch> (actually, i'm guessing that was you cause it's NativeCall...)

[11:11] * psch actually checks git blame 

[11:12] <psch> hah, guessed right! 

[11:12] <FROGGS> not always do cloning was an optimization on moar, but jvm did not like it

[11:12] <FROGGS> dunno if we still need it

[11:12] <FROGGS> psch: what was the commit?

[11:13] <psch> FROGGS: 393acf095d7a87e6843d8771d23be9634ce3a2ac

[11:13] <psch> looks like type confusion underneath as well, from the commit msg

[11:14] <psch> we have a bunch of "not sure what type this is" in Cursor.pm, although that's slightly different symptoms

[11:14] <FROGGS> ahh

[11:16] *** Ven joined
[11:17] <qlx4r> hi everybody, I hope I am right here. I am trying to install rakudo star on Linux via rakudobrew, as pointed out on rakudo.org. That all works, but `panda install Task::Star` fails at Digest::MD5. Am I the only one with this problem? http://pastebin.com/HSDYCig1

[11:18] <FROGGS> qlx4r: I've just fixed Digest::MD5 this morning...

[11:18] *** n0tjack joined
[11:18] <FROGGS> qlx4r: what rakudo revision do you build? how do you invoked that?

[11:19] <FROGGS> qlx4r: or in case the error is some hours old, can you try again?

[11:19] <qlx4r> FROGGS: great. I do the `rakudobrew build moar; rakudobrew build-panda`. I was under the impression it was always pulling the latest repos though. Any idea how the changes trickle downstream exactly? 

[11:19] *** Peter_R joined
[11:19] <qlx4r> FROGGS: no, I built it this very moment.

[11:19] <FROGGS> qlx4r: yes, that builds latest rakudo

[11:19] <qlx4r> FROGGS: any repos I need to pull manually? like rakudobrew itself?

[11:20] <FROGGS> no

[11:20] <FROGGS> can you try this please? panda install Digest::MD5

[11:20] <qlx4r> FROGGS: ok, building again for good measure

[11:20] <qlx4r> FROGGS: will do

[11:22] *** Ven left
[11:24] *** n0tjack left
[11:24] <qlx4r> FROGGS: same problem on manual install via `panda install DIGEST::MD5`. Same error as in the pastebin. output of `perl6 --version`: This is perl6 version 2015.07.1-868-g5cc2563 built on MoarVM version 2015.08-15-g4b427ed. 

[11:24] <qlx4r> FROGGS: Digest::MD5...

[11:26] <FROGGS> CArray representation does not implement elems - that was timotimo :o)

[11:27] <FROGGS> hmmmm

[11:28] *** BenGoldberg joined
[11:30] <FROGGS> qlx4r: it is weird, the test file passes on its own, but fails via panda

[11:30] <FROGGS> I'm back after lunch

[11:31] <timotimo> FROGGS: i implemented .elems, but not nqp::elems

[11:32] *** tokuhiro_ joined
[11:35] <psch> oh ffs

[11:35] <psch> adding two &say calls makes traits.pm compile fine

[11:35] <psch> /o\

[11:35] <psch> oh nvm

[11:36] <psch> wrong Configure.pl line from the history ._.

[11:37] *** tokuhiro_ left
[11:39] *** baest_ joined
[11:40] <nine> Why does ArgFiles.get fail with "End of argfiles reached" while ordinary file handles just return Str when reading past eof?

[11:41] *** baest left
[11:43] <dalek> DBIish: bbaa0fd | moritz++ | t/01-ConnectConfig-PG.t:

[11:43] <dalek> DBIish: s/done/done-testing/

[11:43] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/bbaa0fd0d2

[11:45] *** diana_olhovik_ left
[11:47] *** kjs__ joined
[11:52] *** n0tjack joined
[11:52] <moritz> nine: sounds like something that wants fixing

[11:53] *** pmurias left
[11:53] *** thou joined
[11:54] <moritz> am I right in assuming that Rakudo builds on the JVM again?

[11:54] <moritz> j: say 'version?'

[11:54] <camelia> rakudo-jvm 5cc256: OUTPUT«Can't open perl script "/home/camelia/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[11:55] *** camelia left
[11:55] *** camelia joined
[11:55] <nine> moritz: I activated camelia jvm build again. Let's just try it out

[11:56] <moritz> nine: ok, great

[11:56] <moritz> somebody please make a rakudo commit :-)

[11:56] <nine> working on it ;)

[11:56] *** mr-foobar left
[11:57] *** ChanServ sets mode: +v camelia

[11:57] *** mr-foobar joined
[11:57] *** n0tjack left
[11:57] *** raiph left
[11:57] <nine> I'm factoring out some code into a helper method. This code contains fail calls. What's the most elegant way to rethrow those from the caller?

[11:57] <psch> moritz: it used to a few commits ago, but doesn't anymore

[11:57] *** thou left
[11:58] <psch> moritz: it fails the same way it did before the temporary fix, which suggests the fix wasn't quite it...

[11:58] <moritz> psch: :(

[11:59] <moritz> nine: fail() just returns a Failure object; so the caller can also just return that

[11:59] <moritz> my \res = self!helper; return res unless defined res;

[11:59] <nine> And Failure objects are not defined which is perfect for my case. I do want to return Failures and undefined values as-is.

[12:03] <FROGGS> qlx4r: it should just work now

[12:03] <FROGGS> qlx4r: so do the 'panda install Task::Star' cmd now

[12:04] *** kjs__ left
[12:07] <dalek> rakudo/nom: 66c0809 | (Stefan Seifert)++ | src/core/IO/ArgFiles.pm:

[12:07] <dalek> rakudo/nom: Fix IO::ArgFiles failing instead of returning Str after EOF

[12:07] <dalek> rakudo/nom: 

[12:07] <dalek> rakudo/nom: IO::Handles return an undefined Str when reading after EOF. IO::ArgFiles should

[12:07] <dalek> rakudo/nom: probably just do the same instead of failing with "End of argfiles reached".

[12:07] <dalek> rakudo/nom: There doesn't seem to be a spectest for the failure anyway.

[12:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66c08096ce

[12:07] <dalek> nqp/js-merge-wip: c22753c | (Pawel Murias)++ | src/core/testing.nqp:

[12:07] <dalek> nqp/js-merge-wip: Revert "Temporarily workaround a .push bug in the js backend."

[12:07] <dalek> nqp/js-merge-wip: 

[12:07] <dalek> nqp/js-merge-wip: This reverts commit 485c2803c422c7246c1113689566ca06845aa9b9.

[12:07] <dalek> nqp/js-merge-wip: review: https://github.com/perl6/nqp/commit/c22753cac6

[12:07] *** pmurias joined
[12:08] <qlx4r> FROGGS: much better, Digest::MD5 no problem any more, but now JSON::RPC fails. But thanks already for fixing that so quickly.

[12:08] <FROGGS> :o)

[12:09] *** kjs__ joined
[12:09] *** pmurias_ joined
[12:09] <FROGGS> JSON::RPC probably needs fixes to work with the recent GLR semantics

[12:10] *** kjs__ left
[12:10] <qlx4r> FROGGS: the stacktrace seems to point at panda itself, not JSON::RPC. Want a paste? Or anybody else I could notify? 

[12:12] <FROGGS> qlx4r: perhaps I could guess what's wrong when seeing a paste...

[12:12] <FROGGS> qlx4r: opening an issue in the JSON::RPC repo might be the way to go

[12:14] <qlx4r> FROGGS: let me do that then. This the one? I do not understand (yet) how to infer the canonical repo from panda... https://github.com/bbkr/jsonrpc

[12:15] <FROGGS> qlx4r: go to modules.perl6.org and click on the distribution

[12:15] <qlx4r> FROGGS: cool

[12:15] <FROGGS> that's how I do it

[12:15] <qlx4r> FROGGS: indeed, it was the one. but thanks for the hint.

[12:19] <qlx4r> FROGGS: sorry to keep bothering you, but... how do I learn my version of panda for the bug report? --version or just 'version' as a param don't work

[12:19] <FROGGS> hmmm...

[12:20] <FROGGS> rakudobrew keeps the repositories somewhere... if you find the panda repository (with a .git directory in it), you can: git describe

[12:20] <FROGGS> or git describe --tags

[12:23] <qlx4r> FROGGS: great, all done, let's see what happens. https://github.com/bbkr/jsonrpc/issues/15

[12:24] <qlx4r> Thank y'all very much for working so hard on perl6 and being so supportive, I cannot wait to start hacking with perl6. It sure provides great new constructs I cannot wait to use.

[12:25] *** n0tjack joined
[12:25] <FROGGS> qlx4r: hmmm, it is hard to tell what's wrong from the output...

[12:28] *** aborazmeh joined
[12:28] *** aborazmeh left
[12:28] *** aborazmeh joined
[12:29] *** [Sno] left
[12:29] *** n0tjack left
[12:30] <moritz> TimToady++ # YAPC::EU keynote; I finally got around to watching it

[12:33] *** tokuhiro_ joined
[12:38] *** tokuhiro_ left
[12:43] <dalek> rakudo/nom: 0e3f2ee | peschwa++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[12:43] <dalek> rakudo/nom: Adjust Binder to look for RAW instead of RW.

[12:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0e3f2eef2d

[12:43] <psch> ^ that let's jvm build again

[12:44] <psch> s/\'// # o.o

[12:44] <psch> i'm not sure what the rational was to have "is rw" in those spots before, but the Binder relied on that to decide some semantics...

[12:45] *** diana_olhovik joined
[12:46] <psch> (just to be clear, i'm talking about "is rw" to "is raw" in 8837b6fe)

[12:47] <moritz> psch: I've noticed before that many places that should be raw/parcel were actually 'rw', so potentially just confusion

[12:47] <psch> moritz: i think those are mostly cleared up in 8837b6fe, the jvm Binder just didn't know yet :)

[12:50] *** Psyche^_ joined
[12:51] *** rurban left
[12:53] <dalek> doc/htmlify-glr: 9da3bba | moritz++ | lib/Perl6/Documentable/Registry.pm:

[12:53] <dalek> doc/htmlify-glr: Return empty list instead of Any from $*DR.lookup

[12:53] <dalek> doc/htmlify-glr: review: https://github.com/perl6/doc/commit/9da3bbafe2

[12:54] *** Psyche^ left
[12:57] <psch> FROGGS: without the $clone workaround i get a total of 25 test failures for t/04-nativecall

[12:57] <psch> FROGGS: that's 24 tests in 05-arrays.t and one in rt125408.t

[12:58] *** n0tjack joined
[12:58] <psch> FROGGS: ...nvm, the workaround is in, i apparently slightly mishandled git

[13:00] <FROGGS> psch: both the 05-arrays.t and rt125408.t are kinda expected

[13:00] <FROGGS> rt125408.t also fails for moar, and 05-arrays.t is about a recent change

[13:00] <psch> FROGGS: yeah, i guessed that 05-arrays.t is expected

[13:02] *** n0tjack left
[13:03] *** kjs__ joined
[13:06] *** Ven joined
[13:07] <psch> right, this time actually without the workaround...

[13:07] <psch> 10-cglobals.t and 16-rt125729.t pass :P

[13:11] *** diana_olhovik left
[13:11] *** laouji left
[13:11] <cognominal> I was not physically present at Lyon hackathon but my slang to produce AST is slowly getting there.  https://github.com/cognominal/nqp/commit/ad7a6a17bf1d6287b7d319aa3ef87649deb576a0

[13:12] *** Ven left
[13:20] <moritz> TimToady: it seems that missing a semicolon gives a "Bogus postfix" error these days; iirc there used to be a better error message

[13:27] *** espadrine left
[13:30] *** n0tjack joined
[13:33] *** khw joined
[13:35] *** n0tjack left
[13:36] *** n0tjack joined
[13:37] *** laouji joined
[13:41] *** n0tjack left
[13:41] *** thou joined
[13:46] *** thou left
[13:52] <dalek> doc/htmlify-glr: fd6abbe | moritz++ | htmlify.p6:

[13:52] <dalek> doc/htmlify-glr: A well-placed &flat brings us error-free through htmlify.p6 --sparse=20

[13:52] <dalek> doc/htmlify-glr: review: https://github.com/perl6/doc/commit/fd6abbee15

[13:56] *** pierrot joined
[13:56] <masak> \o/

[13:57] <psch> r: say "hi"

[13:57] <camelia> rakudo-{moar,jvm} 0e3f2e: OUTPUT«hi␤»

[13:59] <psch> huh, that gave ( no output ) for jvm in a /msg camelia o.o

[13:59] *** cognominal left
[14:00] <dalek> rakudo/nom: 2579cad | (Stefan Seifert)++ | src/core/IO/ArgFiles.pm:

[14:00] <dalek> rakudo/nom: 3.3x speedup for ArgFiles.lines()

[14:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2579cad2f4

[14:01] <nine> Note: this ^^^ breaks t/spec/S32-io/pipe.t because I use IO::Handle::lines now and that seems to return an additional empty line if the file ends in \n.

[14:02] <nine> So really the spec test regression is due to the IO::Handle::lines optimization.

[14:03] *** n0tjack joined
[14:04] <JimmyZ> ^^ there is 'use nqp', is it needed?

[14:06] <ShimmerFairy> no, core doesn't need 'use nqp'

[14:07] *** kaare_ left
[14:07] *** n0tjack left
[14:07] *** rurban joined
[14:08] <dalek> rakudo/nom: 5927b15 | (Stefan Seifert)++ | src/core/IO/ArgFiles.pm:

[14:08] <dalek> rakudo/nom: Remove unneeded use nqp;

[14:08] <dalek> rakudo/nom: 

[14:08] <dalek> rakudo/nom: Spotted by JimmyZ++

[14:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5927b15fa2

[14:09] *** kaare_ joined
[14:09] *** FROGGS_ joined
[14:10] *** aborazmeh left
[14:11] *** leont joined
[14:13] *** FROGGS left
[14:14] <TimToady> m: sub a (*@a) { @a.join("|").say };a(1,(1,2),((3,4),5));

[14:14] <camelia> rakudo-moar 0e3f2e: OUTPUT«1|1|2|3|4|5␤»

[14:14] <TimToady> m: sub a (*@a) { @a.join("|").say };a(1,[1,2],[[3,4],5]);

[14:14] <camelia> rakudo-moar 0e3f2e: OUTPUT«1|1|2|3 4|5␤»

[14:14] <TimToady> here's a bug; slurpy * is supposed to be recursive, which () does but [] doesn't

[14:15] <psch> r: sub a (*@a) { @a.join("|").say };a(1,(1,2),((3,4),5));

[14:15] <camelia> rakudo-{moar,jvm} 0e3f2e: OUTPUT«1|1|2|3|4|5␤»

[14:15] <psch> r: sub a (*@a) { @a.join("|").say };a(1,[1,2],[[3,4],5]);

[14:15] <camelia> rakudo-{moar,jvm} 0e3f2e: OUTPUT«1|1|2|3 4|5␤»

[14:16] * araujo looks around

[14:16] <dalek> doc: f57268e | TimToady++ | lib/Type/Signature.pod:

[14:16] <dalek> doc: slurpy * is not one-level, but recursive

[14:16] <dalek> doc: review: https://github.com/perl6/doc/commit/f57268efff

[14:18] <pmurias> hoelzro: should I merge the js branch into the js-merge-wip one?

[14:19] <JimmyZ> r: sub a(@ais copy) { ... }

[14:19] <camelia> rakudo-moar 0e3f2e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Missing block␤at /tmp/tmpfile:1␤------> 3sub a(@ais 7⏏5copy) { ... }␤»

[14:19] <camelia> ..rakudo-jvm 0e3f2e: ( no output )

[14:20] <JimmyZ> r: sub a(@a is copy) { ... }

[14:20] <camelia> rakudo-{moar,jvm} 0e3f2e: ( no output )

[14:20] <JimmyZ> jvm bug!

[14:21] <JimmyZ> r: sub a(@ais copys) { ... }

[14:21] <camelia> rakudo-{moar,jvm} 0e3f2e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Missing block␤at /tmp/tmpfile:1␤------> 3sub a(@ais 7⏏5copys) { ... }␤»

[14:23] *** Ven joined
[14:24] <timotimo> nine: cool that you ported jnthn's lines work to argfiles!

[14:26] <tony-o> sharista still in here?

[14:26] <timotimo> i wonder if we should revert that commit in nqp that removes closure taking from clases defined inside subs and mainline ... that's the commit that causes the data race for frames and refcounting to become much more visible

[14:27] <timotimo> so that people don't keep stumbling over it before jnthn implements "the right" fix in moar

[14:27] *** lichtkind joined
[14:30] <pmurias> MAIN works differently in nqp on moarvm and on the jvm?

[14:33] *** laouji left
[14:34] *** laouji joined
[14:34] *** diana_olhovik joined
[14:35] *** tokuhiro_ joined
[14:36] *** n0tjack joined
[14:37] <FROGGS_> pmurias: really?

[14:39] <psch> main.nqp has #?if jvm

[14:39] <psch> something about slurpies iirc

[14:39] *** tokuhiro_ left
[14:39] <psch> i hope "sub MAIN" doesn't work differently on the backends :S

[14:40] *** n0tjack left
[14:41] <ShimmerFairy> timotimo: not sure, I'm guessing it'll be easier to debug the fix if the visible-making change isn't reverted :)

[14:41] *** cognominal joined
[14:43] <timotimo> disagree

[14:43] <timotimo> jnthn has already figured out what's wrong

[14:43] <timotimo> until the fix lands, people will randomly encounter errors like "double free" and "corrupted blocklist"

[14:44] <ShimmerFairy> oh, so since the fix is already known, I don't really see a point in reverting (if it was unknown and no clear way to figure out, I'd be more on board with reverting)

[14:44] <timotimo> psch, pmurias, yeah, sadly MAIN on the one and on the other pass a slurpy vs a regular list

[14:45] *** tping joined
[14:50] <FROGGS_> psch: !!!

[14:50] <FROGGS_> I think I fixed something, that should let us get rid of the #?if jvm in the actions

[14:50] <FROGGS_> getNativeCallBody did not care about delegate

[14:51] *** Ven left
[14:51] <FROGGS_> psch: that also caused trouble having native methods in C++ structs

[14:52] *** kjs__ left
[14:53] <psch> FROGGS_: ahh, neat.  i had looked at the delegate, but apparently not closely enough...

[15:04] <dalek> nqp: 0c26f68 | FROGGS++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/NativeCallOps.java:

[15:04] <dalek> nqp: follow delegates in getNativeCallBody

[15:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0c26f68d57

[15:08] *** n0tjack joined
[15:13] *** n0tjack left
[15:14] <xinming_> r: my $l = [1,2,3]; for @$l -> $i { $i.perl.say }

[15:14] <camelia> rakudo-{moar,jvm} 5927b1: OUTPUT«1␤2␤3␤»

[15:15] *** diana_olhovik left
[15:18] *** diana_olhovik_ joined
[15:20] <nine> m: sub g(*@v) { say @v.infinite; }; g(|(4..*)); 

[15:20] <camelia> rakudo-moar 5927b1: OUTPUT«(timeout)»

[15:20] <nine> m: sub g(*@v) { say @v.is-lazy; }; g(|(4..*)); 

[15:21] <camelia> rakudo-moar 5927b1: OUTPUT«(timeout)»

[15:21] <nine> .tell [Coke] https://rt.perl.org/Public/Bug/Display.html?id=122948 is fixed as result of the GLR

[15:21] <yoleaux> nine: I'll pass your message to [Coke].

[15:22] <nine> m: my @s=(0,1,0.5,0.4)[^3]; my @t=((0,1,0.5,0.4) xx 1)[^3]; say @s == @t

[15:22] <camelia> rakudo-moar 5927b1: OUTPUT«False␤»

[15:25] <nine> .tell [Coke] https://rt.perl.org/Public/Bug/Display.html?id=120861 is fixed as result of the GLR, too.

[15:25] <yoleaux> nine: I'll pass your message to [Coke].

[15:28] *** laouji left
[15:28] *** laouji joined
[15:29] <moritz> m: my @s=(0,1,0.5,0.4)[^3]; my @t=((0,1,0.5,0.4) xx 1)[^3]; say @s == @t 

[15:29] <camelia> rakudo-moar 5927b1: OUTPUT«False␤»

[15:29] <moritz> m: my @s=(0,1,0.5,0.4)[^3]; my @t=((0,1,0.5,0.4) xx 1)[^3]; say @s.perl; say @t.perl

[15:29] <camelia> rakudo-moar 5927b1: OUTPUT«[0, 1, 0.5]␤[(0, 1, 0.5, 0.4),]␤»

[15:29] <nine> .tell [Coke] With https://rt.perl.org/Public/Bug/Display.html?id=111720 I'd argue, that the current behavior is correct due to the one item rule. Array.new(@a) essentially creates a copy of @a. Thus changing @a will not affect the new array.

[15:29] <yoleaux> nine: I'll pass your message to [Coke].

[15:29] *** thou joined
[15:29] *** skids joined
[15:30] <nine> m: my @s=(0,1,0.5,0.4)[^3]; my @t=(|(0,1,0.5,0.4) xx 1)[^3]; say @s == @t

[15:30] <camelia> rakudo-moar 5927b1: OUTPUT«True␤»

[15:32] <moritz> nine, [Coke]: I've rejected 120861

[15:33] <moritz> RT

[15:33] <nine> moritz: how does one get privileges for RT? When I'm logged in I cannot even look at those bugs.

[15:33] <moritz> nine: telll [Coke] your RT user ID; I believe he can give you the privs

[15:34] *** thou left
[15:34] <moritz> m: my $x; my @a = 1,2; $x = Array.new(@a) => 'x'; @a.pop(); say $x

[15:34] <camelia> rakudo-moar 5927b1: OUTPUT«[1 2] => x␤»

[15:34] <nine> .tell [Coke] I'm registered in RT as [email@hidden.address]  When you get tired of modifying tickets for me, just give me privileges :)

[15:34] <yoleaux> nine: I'll pass your message to [Coke].

[15:35] <moritz> nine: Inline::Python fails tests for me

[15:35] <nine> m: my $x; my @a = 1,2; $x = Array.new((@a,)) => "x"; @a.pop(); say $x;

[15:35] <camelia> rakudo-moar 5927b1: OUTPUT«[[1]] => x␤»

[15:35] <nine> moritz: oh, I think it needs some GLR updates

[15:36] <moritz> m: my $x; my @a = 1,2; $x = Array.new(@a); @a.pop; say $x

[15:36] <camelia> rakudo-moar 5927b1: OUTPUT«[1 2]␤»

[15:36] <moritz> m: my $x; my @a = 1,2; $x = Array.new(@a); $x.pop; say @a

[15:36] <camelia> rakudo-moar 5927b1: OUTPUT«[1 2]␤»

[15:36] <moritz> is there *any* case left where there's action-at-a-distance?

[15:36] <moritz> if not, I'd argue this is correct now

[15:38] <moritz> nine: Inline::Python would be nice for building doc.perl6.org with post-glr rakudo :-)

[15:39] *** kjs__ joined
[15:40] *** xfix left
[15:40] *** n0tjack joined
[15:42] <dalek> Inline-Python: 6fc1831 | (Stefan Seifert)++ | t/ (4 files):

[15:42] <dalek> Inline-Python: Adjust tests to post-GLR

[15:42] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/6fc18316eb

[15:42] <nine> moritz: done

[15:47] *** n0tjack left
[15:49] <dalek> rakudo-star-daily: 0a10711 | coke++ | log/ (9 files):

[15:49] <dalek> rakudo-star-daily: today (automated commit)

[15:49] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/0a1071185c

[15:50] <dalek> perl6-roast-data: d9635ff | coke++ | / (9 files):

[15:50] <dalek> perl6-roast-data: today (automated commit)

[15:50] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d9635ffb85

[15:50] <dalek> perl6-roast-data: 0804a8c | coke++ | / (9 files):

[15:50] <dalek> perl6-roast-data: today (automated commit)

[15:50] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/0804a8c737

[15:50] *** Ven joined
[15:50] *** cognominal left
[15:52] *** diana_olhovik_ left
[15:54] <nine> .tell [Coke] https://rt.perl.org/Public/Bug/Display.html?id=124082 seems to have been fixed in the meantime.

[15:54] <yoleaux> nine: I'll pass your message to [Coke].

[15:56] <moritz> thanks nine++

[15:57] *** kjs__ left
[15:59] <moritz> .tell [ptc] I've updated the rakudobrew on hack in /home/rakudobrew to a pots-glr rakudo (+modules); please check if the examples.perl6.org rebuild still works

[15:59] <yoleaux> moritz: I'll pass your message to [ptc].

[16:00] *** diana_olhovik_ joined
[16:00] <dalek> doc: d1363d6 | moritz++ | htmlify.p6:

[16:00] <dalek> doc: Fix fallout from the single-arg rule

[16:00] <dalek> doc: review: https://github.com/perl6/doc/commit/d1363d62cb

[16:00] <dalek> doc: 6770eb8 | moritz++ | htmlify.p6:

[16:00] <dalek> doc: Another GLR fix

[16:00] <dalek> doc: review: https://github.com/perl6/doc/commit/6770eb8e39

[16:00] <dalek> doc: 7cd718e | moritz++ | htmlify.p6:

[16:00] <dalek> doc: Fix syntax error

[16:00] <dalek> doc: review: https://github.com/perl6/doc/commit/7cd718ef3b

[16:00] <dalek> doc: 96c51b5 | moritz++ | lib/Type/Parameter.pod:

[16:00] <dalek> doc: s:ii/parcel/raw/ in Parameter.pod

[16:00] <dalek> doc: review: https://github.com/perl6/doc/commit/96c51b59b6

[16:00] <dalek> doc: b5633b1 | moritz++ | htmlify.p6:

[16:00] <dalek> doc: Merge branch 'htmlify-glr'

[16:00] <dalek> doc: review: https://github.com/perl6/doc/commit/b5633b114a

[16:02] <moritz> fwiw htmlify last took about 21 minutes (pre-glr) on hack

[16:02] *** raiph joined
[16:03] *** kjs__ joined
[16:03] <moritz> I'm quite interested in seeing the performance post-glr

[16:05] *** Ven left
[16:07] <moritz> I've profiled htmlify.p6 with --sparse=50; result at http://hack.p6c.org/~moritz/profile-1442160192.07429.html

[16:08] <moritz> (makes your browser use 2G of memory; you have been warned)

[16:08] *** raiph left
[16:08] <timotimo> moritz: i'm currently ankle-deep in the qt profiler

[16:09] <timotimo> trying to figure out what makes it give bogus results sometimes. and adding a list of GC runs to it as well

[16:11] <dalek> roast/gmr: ead4486 | (Stefan Seifert)++ | S02-names-vars/list_array_perl.t:

[16:11] <dalek> roast/gmr: Tests for RT 123072 - .perl on a List containting a single item

[16:11] <dalek> roast/gmr: review: https://github.com/perl6/roast/commit/ead4486bbc

[16:12] *** raiph joined
[16:12] <dalek> roast: 472a2d4 | (Stefan Seifert)++ | S02-names-vars/list_array_perl.t:

[16:12] <dalek> roast: Tests for RT 123072 - .perl on a List containting a single item

[16:12] <dalek> roast: review: https://github.com/perl6/roast/commit/472a2d4f02

[16:13] <dalek> rakudo/nom: e19c128 | (Stefan Seifert)++ | src/core/List.pm:

[16:13] <dalek> rakudo/nom: Fix .perl on a single item List not EVALing back to the List

[16:13] <dalek> rakudo/nom: 

[16:13] <dalek> rakudo/nom: Fixes RT #123072

[16:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e19c128b23

[16:13] <nine> .tell [Coke] https://rt.perl.org/Public/Bug/Display.html?id=123072 is fixed with commit e19c128

[16:13] <yoleaux> ...

[16:13] *** n0tjack joined
[16:14] <nine> Err...yoleaux overloaded?

[16:14] <moritz> nine: erm, wrong ticket number?

[16:14] <moritz> '[GLR] 'for' loop in sink context isn't invoking block in sink context'

[16:15] <moritz> m: class Sinker { method sink() { say "Blub" } }; for ^5 { Sinker.new(); }; 1

[16:15] <camelia> rakudo-moar 5927b1: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤»

[16:15] <timotimo> moritz: would you like to generate a json version of that, too? you have to set --profile-filename to something ending in .json (and you have to have a very recent nqp, otherwise the file will end up truncated)

[16:16] <timotimo> so that's what gave us the good performance since the glr ;)

[16:16] <moritz> timotimo: I can do that

[16:16] <nine> Darn...should have been 124342

[16:17] <moritz> timotimo: the HTML version seems to be pretty useless, since it builds so slowly :(

[16:17] <moritz> erm, responds

[16:17] <timotimo> yes

[16:17] <timotimo> that.s what made tadzik build the qt program :)

[16:17] <dalek> roast: ebd3ce2 | (Stefan Seifert)++ | S02-names-vars/list_array_perl.t:

[16:17] <dalek> roast: Fix ticket number for testcase

[16:17] <dalek> roast: review: https://github.com/perl6/roast/commit/ebd3ce2083

[16:18] *** n0tjack left
[16:18] <nine> .tell [Coke] wrong ticket number. 123072 is still open, 124342 is fixed

[16:18] <yoleaux> nine: I'll pass your message to [Coke].

[16:18] <colomon> Array $last = [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[9.0],],],],],],],],],],],],],],],],],],],],],],],],],],],],],]

[16:18] <colomon> :)

[16:23] <colomon> moritz: I just fixed Math::RungeKutta to work again.  However, thinking about it I’m not sure it was the best possible solution.  Seems like the code was doing some funky stuff to work around flattening before, and what I did was make it flatten again instead of straightening out the original issue.

[16:24] *** kjs__ left
[16:24] *** qlx4r left
[16:25] <cschwenz> colomon: nested 30 levels deep?!?   o_0

[16:25] <colomon> cschwenz: that’s what happens when you expect flattening and it’s not there any more.  :)

[16:25] <colomon> afk # nom-fetching

[16:26] <hoelzro> pmurias: go for it

[16:27] <hoelzro> you can merge js-merge-wip into master too

[16:27] *** laouji left
[16:28] *** cognominal joined
[16:31] *** thou joined
[16:33] <raiph> .tell skids .oO ( s:g/sigilless variable/raw variable/? )

[16:33] <yoleaux> raiph: I'll pass your message to skids.

[16:38] *** [Sno] joined
[16:45] *** pmurias__ joined
[16:46] *** n0tjack joined
[16:46] <pmurias__> hoelzro: I'll be away from my hacking machine till tomorrow

[16:47] *** diana_olhovik_ left
[16:48] *** xinming_ left
[16:51] *** n0tjack left
[16:57] <rindolf> hoelzro: hi, sup! Shanah Tovah.

[17:08] *** tm joined
[17:09] *** Ven joined
[17:10] *** kjs__ joined
[17:16] <timotimo> .tell usev6 thanks again for your tireless bug triage work!

[17:16] <yoleaux> timotimo: I'll pass your message to usev6.

[17:17] *** xfix joined
[17:19] *** n0tjack joined
[17:23] *** n0tjack left
[17:28] *** Ven left
[17:44] *** Ven joined
[17:48] <moritz> colomon: nonetheless, a pull request (or direct push) is welcome

[17:49] <moritz> ah, I see you already did that; colomon++

[17:49] <moritz> also colomon++ for Math::Model fixes

[17:50] <moritz> timotimo: http://hack.p6c.org/~moritz/htmlify.json

[17:50] <timotimo> cool, thanks

[17:50] <timotimo> a .gz would have done wonders on it, i bet

[17:51] *** n0tjack joined
[17:53] <timotimo> moritz: it looks like the json file lacks the last bit

[17:53] <timotimo> what's your nqp?

[17:55] *** n0tjack left
[17:55] <timotimo> moritz: sorry, i was wrong, the file seems all right

[17:56] <timotimo> it might be hitting the arbitrary file size limit related to ... something

[17:56] <timotimo> QJson or the binary buffer it uses or something

[17:58] *** Ven left
[18:01] *** Skarsnik joined
[18:02] *** Ven joined
[18:05] *** pmurias__ left
[18:05] <bartolin> timotimo: thanks (i'm usev6 on github). btw, i just noted that my first contribution to Perl 6 was about 1 year ago (september 2014). maybe I should blog about that ("one year of bug triage") ...

[18:05] <bartolin> on the other hand, i don't have a blog

[18:05] <timotimo> ah!

[18:08] *** Ven left
[18:09] *** n0tjack joined
[18:11] *** Ven joined
[18:13] *** Sqirrel joined
[18:15] *** n0tjack left
[18:15] *** Ven left
[18:16] <dalek> nqp: 239d6a3 | FROGGS++ | src/vm/jvm/runtime/org/perl6/nqp/ (14 files):

[18:16] <dalek> nqp: add and hook up CPPStruct repr on jvm

[18:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/239d6a3f7b

[18:16] <moritz> bartolin: if you want to, you can publish a guest post on my blog

[18:16] <colomon> moritz++: yeah, I pushed just for form’s sake and it turned out you’d given me a commit bit sometime in the distant past.  :)

[18:18] *** n0tjack joined
[18:19] <dalek> rakudo/nom: 1776eea | FROGGS++ | / (21 files):

[18:19] <dalek> rakudo/nom: re-apply patch to add C++/NativeCall support

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1776eeae1e

[18:19] <dalek> rakudo/nom: 2b05975 | FROGGS++ | t/04-nativecall/1 (2 files):

[18:19] <dalek> rakudo/nom: skip test file when we cannot compile C++

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b05975b01

[18:19] <dalek> rakudo/nom: 27d2629 | FROGGS++ | t/04-nativecall/ (3 files):

[18:19] <dalek> rakudo/nom: try cl, g++ and clang++ to build/test C++ libs

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27d26299f1

[18:19] <dalek> rakudo/nom: 77bbbea | FROGGS++ | lib/NativeCall.pm:

[18:19] <dalek> rakudo/nom: automatically guess C++ name mangler

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/77bbbea2d7

[18:19] <dalek> rakudo/nom: d9157c0 | FROGGS++ | tools/build/Makefile-JVM.in:

[18:19] <dalek> rakudo/nom: fix thinko in JVM's Makefile

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d9157c02bb

[18:19] <dalek> rakudo/nom: c759667 | FROGGS++ | tools/build/NQP_REVISION:

[18:19] <dalek> rakudo/nom: get nqp with CPPStruct support on jvm

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c759667558

[18:19] <dalek> rakudo/nom: 89dd4d5 | FROGGS++ | lib/NativeCall (2 files):

[18:19] <dalek> rakudo/nom: add missing checks for CPPStruct in CArray/HAS

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/89dd4d5b77

[18:21] *** kjs__ left
[18:21] *** kjs__ joined
[18:22] <bartolin> moritz: thanks for the offer! at the moment i'm a bit short of time. but i'll keep the idea in mind. (if i wait some more, it might be a post for the next P6 advent?!)

[18:22] <moritz> bartolin: ok; yes, would work for advent, but would work earlier too :-)

[18:22] <colomon> woah, that’s a mess of C++ nativecall stuff landing in nom!

[18:25] <dalek> doc/htmlify-glr: 7a83f6a | moritz++ | t/pod-convenience.t:

[18:25] <dalek> doc/htmlify-glr: Fix test; closes #123

[18:25] <dalek> doc/htmlify-glr: review: https://github.com/perl6/doc/commit/7a83f6a877

[18:25] <dalek> doc: 42649ba | moritz++ | t/pod-convenience.t:

[18:25] <dalek> doc: Fix test; closes #123

[18:25] <dalek> doc: review: https://github.com/perl6/doc/commit/42649ba93d

[18:25] * moritz and his wrong branches

[18:26] *** n0tjack left
[18:27] *** n0tjack joined
[18:29] <dalek> rakudo/nom: aceec21 | FROGGS++ | lib/NativeCall/Compiler/GNU.pm:

[18:29] <dalek> rakudo/nom: fix symbol mangling on darwin/clang

[18:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aceec219ec

[18:30] <moritz> huh, doc build failed

[18:31] <moritz> but, but, but, I tested it before pushing :(

[18:31] <timotimo> damn :(

[18:31] *** n0tjack left
[18:32] <dalek> doc: 01cb035 | moritz++ | htmlify.p6:

[18:32] <dalek> doc: A well-placed &flat brings us error-free through htmlify.p6 --sparse=20

[18:32] <dalek> doc: review: https://github.com/perl6/doc/commit/01cb0356e1

[18:32] <moritz> seems I missed this commit somehow

[18:33] <moritz> oh, I think I know what happened

[18:33] <moritz> I fixed it on one machine, and pushed

[18:33] <moritz> and merged the branch on another machine, without pulling first

[18:33] <moritz> or after pulling only master

[18:33] <moritz> or something

[18:33] *** kjs__ left
[18:38] <dalek> roast: d397bca | usev6++ | S06-multi/positional-vs-named.t:

[18:38] <dalek> roast: Add reference to RT #118467 to existing test

[18:38] <dalek> roast: review: https://github.com/perl6/roast/commit/d397bca9f2

[18:38] *** patrickz joined
[18:40] <timotimo> huh, dafuq?

[18:40] <dalek> rakudo/nom: 0cbba1b | FROGGS++ | lib/NativeCall/Types.pm:

[18:40] <dalek> rakudo/nom: re-add new/elems/list to CArray

[18:40] <dalek> rakudo/nom: 

[18:40] <dalek> rakudo/nom: They got lost when merging the cpp3 branch.

[18:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0cbba1bea3

[18:40] <timotimo> my num ($i, $j); - this is code-gen-ing a call to &infix:<,>

[18:40] <timotimo> every time it gets encountered

[18:42] <timotimo> in this random benchmark, the total of those &infix:<,> calls makes up 3.6% exclusive time :|

[18:43] <timotimo> 6.68% inclusive time, so it's actually calling still more unnecessary things

[18:44] <timotimo> ugh, find-best-dispatchee is also called from that

[18:44] *** telex left
[18:45] <dalek> nqp: 7a04389 | FROGGS++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/CArrayInstance.java:

[18:45] <dalek> nqp: implement CArray.elems on jvm

[18:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7a0438939d

[18:45] *** araujo left
[18:45] <dalek> rakudo/nom: 4472353 | FROGGS++ | tools/build/NQP_REVISION:

[18:45] <dalek> rakudo/nom: bump nqp/jvm for CArray.elems

[18:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4472353689

[18:45] *** FROGGS_ is now known as FROGGS

[18:45] <FROGGS> .tell japhb done

[18:45] <yoleaux> FROGGS: I'll pass your message to japhb.

[18:46] *** telex joined
[18:47] <FROGGS> timotimo: can't we compile a variable declaration without initializer to something less involved?

[18:47] <FROGGS> I mean, that can compile to Nil, no?

[18:49] <timotimo> hopefully yes

[18:51] <timotimo> oh COME ON!

[18:51] *** yqt joined
[18:51] <timotimo> turned the data structure from hashes to proper objects

[18:51] <timotimo> now the number 2 spot in the routines list is occupied by find_method

[18:52] <skids> m: my @letters = <a b c d e f>; for @letters[(0,1...*).map({die if ++$ > 30; $_ mod 6})] { $_.say; last if ++$ > 20 };

[18:52] <yoleaux> 16:33Z <raiph> skids: .oO ( s:g/sigilless variable/raw variable/? )

[18:52] <camelia> rakudo-moar e19c12: OUTPUT«Died␤  in block <unit> at /tmp/2NrsTPlPkS:1␤␤»

[18:52] <timotimo> holy wat!

[18:52] <timotimo> removing the "num" declaration from the attributes makes all find_method calls go away and makes the whole thing a whole bunch faster

[18:52] <timotimo> >:(

[18:52] <ugexe> did you try yelling at it?

[18:53] <FROGGS> try shaking it

[18:53] <timotimo> do we have a problem in our method cache?

[18:53] <FROGGS> not that I am aware of

[18:54] *** n0tjack joined
[18:55] *** lizmat left
[18:55] <timotimo> well, it'd only be a performance problem

[18:56] <moritz> timotimo: shouldn't it be the other way round?

[18:56] <timotimo> hm?

[18:56] <moritz> num attributes being more static, requiring less dynamic lookups?

[18:56] <timotimo> correct

[18:56] <timotimo> all of the code is going through accessors, though

[18:57] <timotimo> those are rw accessors for native attributes

[18:57] <timotimo> so they return attrref objects

[18:58] <timotimo> but unrelated to this, the methods should be findable without any calls to find_method at all

[18:58] *** n0tjack left
[18:59] *** lizmat joined
[18:59] <timotimo> and i really don't know why there's any calls to "find_best_dispatchee" at all in there

[19:01] <timotimo> in any case, let me try to golf this problem real quick

[19:01] <timotimo> i expect jnthn will be able to point me in the right direction

[19:02] <FROGGS> yeah, jnthn is a quite exceptional pointer

[19:06] *** aindilis left
[19:06] <rurban> timotimo: is this a regression?

[19:06] *** aindilis joined
[19:07] <timotimo> no clue

[19:07] <timotimo> i don't have a good golfed script yet

[19:07] <timotimo> trying to start from 0 didn't trigger it, so i'll have to cut the full script i saw it in into pieces

[19:09] *** ruoso left
[19:13] *** telex left
[19:14] *** telex joined
[19:15] <vendethiel> timotimo: I still need to golf down my gtk bug as well. and report it to #moarvm :D

[19:15] <timotimo> :(

[19:15] <timotimo> the error seems to require a -= to be in play

[19:15] <FROGGS> vendethiel: if you get the chance, can you build latest nqp+rakudo and do a make test?

[19:16] * timotimo looks at the generated code

[19:16] <vendethiel> FROGGS: --gen-nqp=master and --gen-moar=master, then?

[19:16] <FROGGS> I've bumped revisions

[19:16] <FROGGS> so just pull and build

[19:19] <timotimo> a-ha!

[19:20] *** telex left
[19:20] <lizmat> good *, #perl6!

[19:20] <timotimo> i think tthe find_method is actually not for the attributes

[19:20] <FROGGS> hi lizmat 

[19:20] <timotimo> it may be for sinking instead

[19:20] <lizmat> t/spec/S32-io/pipe.t started failing after the latest pull, is that known ?

[19:20] *** telex joined
[19:20] <FROGGS> huh

[19:20] <lizmat> not ok 11 - Can talk to subprocess bidirectional

[19:20] <lizmat> not ok 12 - Can capture stdout and stderr, and chain stdin

[19:20] <lizmat> not ok 13 - Can capture stdout and stderr, and chain stdin

[19:21] <timotimo> in the -= case we generate a want with a p6sink on the 'v' side; in the = case, we don't

[19:21] <bartolin> lizmat: http://irclog.perlgeek.de/perl6/2015-09-13#i_11210100

[19:21] <timotimo> potentially because we know how it'll end, or perhaps there's a bug that says we should actually be generating it?

[19:21] <FROGGS> lizmat: is it possible that you've not pulled within the last 24 hours or so?

[19:21] <lizmat> I just pulled and got all of the C++ goodies  :-)

[19:21] <FROGGS> ohh

[19:21] <FROGGS> nvm

[19:21] <timotimo> and the problem is potentially made worse by AttrRef not being a full class or something similar?

[19:21] <FROGGS> bartolin++

[19:22] <timotimo> m: IntAttrRef.new().sink

[19:22] <camelia> rakudo-moar aceec2: OUTPUT«(signal SEGV)»

[19:22] <FROGGS> lol

[19:22] <timotimo> m: IntAttrRef.new().^find_method("sink")

[19:22] <camelia> rakudo-moar aceec2: OUTPUT«(signal SEGV)»

[19:23] <timotimo> m: nqp::can(IntAttrRef.new(), "sink")

[19:23] <camelia> rakudo-moar aceec2: OUTPUT«(signal SEGV)»

[19:23] <timotimo> well, of course, just creating an attr ref like that

[19:23] <timotimo> that's problematic

[19:23] <timotimo> anything wants to decont it, i bet

[19:23] <timotimo> and if it doesn't have an object and offset set ... null pointer deref!

[19:23] *** blablabla joined
[19:23] <timotimo> m: nqp::can(IntAttrRef, "sink")

[19:23] <camelia> rakudo-moar 447235: ( no output )

[19:23] <timotimo> m: nqp::can(IntAttrRef, "sink").say

[19:23] <camelia> rakudo-moar 447235: OUTPUT«0␤»

[19:23] <timotimo> hm

[19:24] *** blablabla left
[19:25] <timotimo> m: nqp::can(Array, "sink").say

[19:25] <camelia> rakudo-moar 447235: OUTPUT«1␤»

[19:26] <timotimo> it shouldn't emit any "find_method" invocations if it doesn't can, should it?

[19:26] <timotimo> or does can actually call find_method to figure out if the class can the method?

[19:26] <timotimo> that would explain things, at least

[19:26] *** telex left
[19:26] *** n0tjack joined
[19:27] *** telex joined
[19:30] <timotimo> i've got a hunch that i could do something about this in spesh

[19:30] <timotimo> but it'd probably be better to do it earlier?

[19:30] <FROGGS> I dunno

[19:31] *** n0tjack left
[19:31] <timotimo> sinking things that can't even sink ... that's a performance problem i've seen pop up multiple times in the past

[19:32] *** n0tjack joined
[19:32] *** telex left
[19:33] <moritz> but doen't we cache the absence of a method as well?

[19:33] *** telex joined
[19:33] <timotimo> huh, actually ... it *could* be find_method on STORE instead

[19:34] * timotimo puts a print statement somewhere stupid

[19:36] *** DarthGandalf joined
[19:37] *** Sqirrel_ joined
[19:37] *** Sqirrel left
[19:38] *** telex left
[19:39] *** telex joined
[19:40] <timotimo> it's all findmeth for 'sink'

[19:43] <jnthn> I can haz messages?

[19:43] <yoleaux> 12 Sep 2015 19:33Z <moritz> jnthn: I've documented the Iterator/Iterable interface to the best of my knowledge in perl6/doc; feel free to steal anything you like for S07.

[19:43] <yoleaux> 12 Sep 2015 23:00Z <TimToady> jnthn: the specced syntax you were looking for is 'when * -> $a, $b, *@c { ... }' but that's not implemented yet

[19:43] <yoleaux> 09:31Z <nine> jnthn: the gmr branch is now ready for a closer look.

[19:43] *** n0tjack left
[19:44] *** nudies joined
[19:44] *** Peter_R left
[19:44] <jnthn> m: sub foo(*@a) { say @a.perl }; foo([1, [2, 3]])

[19:44] <camelia> rakudo-moar 447235: OUTPUT«[1, [2, 3]]␤»

[19:44] <jnthn> star: sub foo(*@a) { say @a.perl }; foo([1, [2, 3]])

[19:44] <camelia> star-m 2015.03: OUTPUT«Array.new([1, [2, 3]])␤»

[19:44] <timotimo> ohai jnthn :)

[19:44] <jnthn> TimToady: I'd argue that these are correct, since .flat does respect itemization, and an Array itemizes.

[19:44] *** telex left
[19:45] <jnthn> TimToady: And * has been defined in terms of .flat

[19:45] <jnthn> TimToady: If we want to define it another way we should find a name for the operation we do want it to do :)

[19:45] *** telex joined
[19:45] <jnthn> o/ timotimo 

[19:45] <timotimo> does giving NativeRefHOW a method find_method that only returns nqp::null() seem like a good idea for making trying to .sink it less expensive?

[19:45] *** telex left
[19:46] <lizmat> m: say \42; say 42.Capture   # what is the difference ?

[19:46] <camelia> rakudo-moar 447235: OUTPUT«Potential difficulties:␤    To refer to a positional match capture, just use $0 (numbering starts at 0).␤    Parenthesize as \(...) if you intended a capture of a single numeric value.␤    at /tmp/g5G7nXiahC:1␤    ------> 3say \7⏏0542; say 42.…»

[19:46] <jnthn> Uh, why are we trying to find_method on a native ref *at all*?

[19:46] <lizmat> apart from the warning

[19:46] <jnthn> It's a container type

[19:46] *** telex joined
[19:46] <jnthn> lizmat: Nothing? :)

[19:46] <jnthn> lizmat: Oh, wait...

[19:47] <jnthn> lizmat: 42.Capture probably isn't very useful at all

[19:47] *** Peter_R joined
[19:47] <jnthn> Since it probably falls back to the object approach to unpack

[19:47] <lizmat> yes, it does...

[19:47] <jnthn> But there's no public attributes on an Int

[19:47] <jnthn> I'm not sure I'd expect unpacking an Int to have a sensible interpretation though :)

[19:48] <moritz> fwiw http://doc.perl6.org/ is now generated by a post-glr rakudo

[19:48] <jnthn> \42 is equivalent to \(42) so it's just a positional arg

[19:48] <lizmat> m: say (42, a=> 666).Capture.perl; say \(42,a=>666).perl

[19:48] <camelia> rakudo-moar 447235: OUTPUT«\(42, :a(666))␤\(42, :a(666))␤»

[19:48] <moritz> real	13m11.531s

[19:48] <moritz> used to be 21min. Wow.

[19:48] <timotimo> jnthn: we're find_method sink on something and it seemed to be related to a native attribute ref

[19:48] <jnthn> I thought it'd be weed or an illegal pet monkey

[19:48] <jnthn> oops

[19:48] *** juiko joined
[19:48] <timotimo> but now i'm finding some doubts

[19:49] <jnthn> .oO( Guess the topic of discussion with *that* wrong window! )

[19:49] <lizmat> .oO( IPM  :-)

[19:49] <timotimo> for one, i don't find "find_method" in the profile any more ... >_>

[19:49] *** darutoko left
[19:49] <jnthn> moritz: Wow, GLR made things faster in a large real-world thing? ;)

[19:49] <timotimo> jnthn: oh btw, we're still calling &infix:<,> for a line like "my num ($foo, $bar);"

[19:50] <moritz> jnthn: seems like, yes :-)

[19:50] <timotimo> moritz: sweet!

[19:50] <jnthn> timotimo: If we are doing a find_method on the ref itself something's up...

[19:50] <moritz> m: say (21.5 - (13 + 11/60) / 21.5

[19:50] <camelia> rakudo-moar 447235: OUTPUT«5===SORRY!5=== Error while compiling /tmp/npRBco9Ue2␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/npRBco9Ue2:1␤------> 3say (21.5 - (13 + 11/60) / 21.57⏏5<EOL>␤    expecting any of:␤        st…»

[19:50] <jnthn> timotimo: I wonder if spesh is to blame

[19:50] <moritz> m: say (21.5 - (13 + 11/60)) / 21.5

[19:50] <camelia> rakudo-moar 447235: OUTPUT«0.386822␤»

[19:50] <timotimo> jnthn: we are generating a p6sink(...) around the code that our metaop "optimization" makes

[19:50] <jnthn> timotimo: And doesn't recognize it as a container and optimizes out the decont

[19:51] <timotimo> https://gist.github.com/timo/625d44afb452bf8b8469 - this is what it looks like in --target=optimize

[19:52] <jnthn> lizmat: Unless you've any better suggestions of what 42.Capture should do, I'm not especially sure it needs to change. .Capture is really "what should I do in an unpack scenario"

[19:52] <timotimo> FWIW, the p6sink is also in the --target=ast

[19:52] * moritz wants a way to declare that a class is a value type, and then teach the optimizer not to think any expressions of that type

[19:52] *** telex left
[19:52] <moritz> s/think/sink/

[19:52] <lizmat> jnthn: I'm just surprised there is a difference between 42.Capture and \42

[19:52] *** telex joined
[19:53] <lizmat> they look completely equivalent to me, and are as soon as something non-scalar/pair is involved

[19:53] <timotimo> jnthn: what would assign return in that context?

[19:54] <jnthn> lizmat: Oh, I'd expect them to differe

[19:54] <jnthn> *differ

[19:54] <jnthn> lizmat: \$obj will always be a 1-arg Capture, for $obj.Capture is the interpretation of that object for unpacking

[19:54] <timotimo> jnthn: another possible thing that's broken is that $b.vy = $b.vy - ...  generates a p6store, while the -= case generates an assign op

[19:54] *** benji_ joined
[19:54] <jnthn> s/for/but/

[19:55] *** benji_ left
[19:55] <skids> .oO(if [...] "itemizes" what do we call what $ does in $[...]?)

[19:55] <jnthn> skids: [[1,2],[3,4]] is identical to [$[1,2],$[3,4]]

[19:55] *** benzen joined
[19:55] *** cschwenz left
[19:55] <benzen> m: for 1 { LAST { say "last"; }; next; }

[19:55] <camelia> rakudo-moar 447235: ( no output )

[19:55] <lizmat> feels to me $obj.Capture in the unpacking sense, should maybe be called something else

[19:55] <skids> But [[1,2]] is not identical to [$[1,2]].

[19:56] <benzen> can i know if this ^^^ is a bug?

[19:56] <timotimo> that's single-arg-rule, skids, right?

[19:56] <skids> It is, but we need a word for what $ does  there other than "itemize"

[19:56] <lizmat> jnthn: anyways, I ran into this yesterday working with BooK on a Perl 6 version of Git::Repository

[19:56] <timotimo> skids: [..] itemizes its contents, $[...] itemizes the container as well

[19:57] <jnthn> skids: Why?

[19:57] <skids> Because it's hard to describe t people.

[19:57] <jnthn> skids: Calling the same operation two different things will surely confuse them.

[19:57] <FROGGS> benzen: aye... though I was under the impression that I fixed that just lately :/

[19:57] <benzen> shouldn't it print "last" even if it skips with next?

[19:57] <jnthn> lizmat: Why?

[19:58] <FROGGS> benzen: yes

[19:58] <lizmat> one of the options you can give in Git::Repository, is a list of options to give to git

[19:58] <jnthn> lizmat: I'd hope folks aren't using Capture itself all too often.

[19:58] <benzen> FROGGS: oh, didn't know it was already noticed.

[19:58] <lizmat> something like git => (foo => bar, baz => 42)

[19:58] *** telex left
[19:58] <benzen> it's is wuite some time (like 2 weeks) since i first saw it

[19:59] <FROGGS> benzen: no, it wasn't noticed, it just happen that it was temporarily not implemented because of a refactor

[19:59] <lizmat> jnthn: basically, you specify the parameters to an internal sub

[19:59] *** telex joined
[19:59] <FROGGS> benzen: and I fixed that, but obviously not good enough

[19:59] <lizmat> jnthn: the idea was to give the named param the following signature:  Capture() :$git

[20:00] <moritz> jnthn, lizmat: a big problem (IMHO) is that some docs still say that Capture fill the ecological niche of a reference, so many programmers familiar with references try to use them

[20:00] <timotimo> urgh, that's bad

[20:00] <moritz> wheras I'd argue that scalar containers are closers to references

[20:00] <timotimo> aye

[20:00] <lizmat> jnthn: if you pass a List, the coercion to Capture works fine

[20:01] <moritz> and even though one can argue that it's still true, it simply not a helpful comment for the user

[20:01] <lizmat> if you pass anything else, like git => (foo => bar)

[20:01] <colomon> where is the grammar construct defined in rakudo?

[20:01] <FROGGS> colomon: src/core/Grammar.pm?

[20:01] <lizmat> jnthn: you get into problems  :-(

[20:01] <jnthn> lizmat: So...use the construct that works? :)

[20:02] <colomon> FROGGS: no, that’s just where the methods for it are.

[20:02] <FROGGS> colomon: what are you searching for then?

[20:02] <jnthn> lizmat: I don't think we've *ever* made the claim that \(foo) and foo.Capture are the same

[20:02] <colomon> FROGGS: wanted to see what it looked like

[20:02] <FROGGS> colomon: the keyword definition?

[20:02] <colomon> FROGGS: yes

[20:02] <skids> m: sub foo (\a, \b) { join("+",a).say; join("+",b).say }; foo($[1,2],[3,4]) # really not exactly "the same"

[20:02] <camelia> rakudo-moar 447235: OUTPUT«1 2␤3+4␤»

[20:02] <lizmat> so you *must* specify git => (foo => bar,)

[20:02] <FROGGS> colomon: src/Perl6/Grammar.nqp and Actions.nqp

[20:02] *** cschwenz joined
[20:03] <skids> And why I ask is because I' trying to doc that better.

[20:03] <lizmat> jnthn: I realize that claim was never made, but at first sight it feels like a TIMTOWTDI

[20:03] <lizmat> dessert&

[20:04] *** kjs__ joined
[20:04] *** telex left
[20:04] <jnthn> skids: [...] is an array composer; it will obey the single argument rule to decide what values are going into the array, then then itemize each of them

[20:05] *** telex joined
[20:05] <jnthn> skids: The single argument rule is the other thing you're looking for, not two words for itemization.

[20:05] <dalek> doc: 4ea75ef | paultcochrane++ | type-graph.txt:

[20:05] <dalek> doc: Add Temporal entry to type-graph

[20:05] <dalek> doc: review: https://github.com/perl6/doc/commit/4ea75ef91d

[20:05] <skids> m: sub foo ([\a, \b]) { join("+",a).say; join("+",b).say }; foo([$[1,2],[3,4]]) # now I get what you wer saying

[20:05] <camelia> rakudo-moar 447235: OUTPUT«1 2␤3 4␤»

[20:05] <colomon> FROGGS: almost nothing there, eh?

[20:06] <FROGGS> colomon: there is also stuff about regex/token/rule etc... they check for their package IIRC

[20:07] <FROGGS> colomon: so it is not all in one spot

[20:07] <dalek> rakudo-star-daily: 8bf6f09 | coke++ | log/ (10 files):

[20:07] <dalek> rakudo-star-daily: today (automated commit)

[20:07] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/8bf6f092b8

[20:08] <[Coke]> jnthn: bummed. 21.02 miles, but surprise, no curry. :|

[20:08] <yoleaux> 15:21Z <nine> [Coke]: https://rt.perl.org/Public/Bug/Display.html?id=122948 is fixed as result of the GLR

[20:08] <yoleaux> 15:25Z <nine> [Coke]: https://rt.perl.org/Public/Bug/Display.html?id=120861 is fixed as result of the GLR, too.

[20:08] <yoleaux> 15:29Z <nine> [Coke]: With https://rt.perl.org/Public/Bug/Display.html?id=111720 I'd argue, that the current behavior is correct due to the one item rule. Array.new(@a) essentially creates a copy of @a. Thus changing @a will not affect the new array.

[20:08] <yoleaux> 15:34Z <nine> [Coke]: I'm registered in RT as [email@hidden.address]  When you get tired of modifying tickets for me, just give me privileges :)

[20:08] <yoleaux> 15:54Z <nine> [Coke]: https://rt.perl.org/Public/Bug/Display.html?id=124082 seems to have been fixed in the meantime.

[20:08] <yoleaux> 16:13Z <nine> [Coke]: https://rt.perl.org/Public/Bug/Display.html?id=123072 is fixed with commit e19c128

[20:08] <yoleaux> 16:18Z <nine> [Coke]: wrong ticket number. 123072 is still open, 124342 is fixed

[20:09] <skids> jnthn: And now I'll try to figure out how to explain that without confusing people like me :-)

[20:09] <jnthn> skids: I took a shot at explaing the single arg rule stuff in the updated S07

[20:09] <moritz> [Coke]: no curry sounds sad :(

[20:10] <jnthn> [Coke]: Oh noes! :(

[20:10] *** raiph left
[20:10] * jnthn cooked aloo dum this evening

[20:10] *** n0tjack joined
[20:10] <[Coke]> nine: i get tired quick in my old age. you're already a bugadmin, for some time.

[20:10] *** telex left
[20:10] *** raiph joined
[20:11] *** telex joined
[20:11] <jnthn> timotimo: The `my num ($i, $j);` think surely can get code-gen'd better

[20:11] <timotimo> does that sound like something that'd go into Actions? or Optimizer?

[20:12] <jnthn> No, I'd just at the point we spit out the Parcel spit out a QAST::Want that produces null in void context :)

[20:12] <jnthn> s/Parcel/List/ :)

[20:12] <jnthn> gah :)

[20:12] <jnthn> It'll be in variable_declarator somewhere I think

[20:13] <timotimo> ah

[20:13] <timotimo> that sounds sane

[20:13] <lizmat> m: sub a { dd @_, %_ }; sub b(List() :$git) { a |$git.Capture }; b git => (666); b git => (a => 42); b git => (666, a => 42)   # jnthn: a solution for now

[20:13] <camelia> rakudo-moar 447235: OUTPUT«[666]␤{}␤[]␤{:a(42)}␤[666]␤{:a(42)}␤»

[20:14] *** nudies left
[20:15] *** n0tjack left
[20:15] <nine> [Coke]: ah, now I get it. When I'm logged in, I cannot use the public interface anymore but can look up by ticket number and close via Reply.

[20:15] <[Coke]> smash++

[20:16] <lizmat> jnthn: should Capture(List()) :$git work as a sig in the future?

[20:16] <lizmat> m: sub a(Capture(List()) :$git) {}

[20:16] <camelia> rakudo-moar 447235: ( no output )

[20:16] <lizmat> doesn't generate any error atm

[20:16] <jnthn> lizmat: Uh...I'm not sure what nested coercion types mean :P

[20:17] <jnthn> lizmat: But if we decide to make them mean anything than probably they'll mean what you want, yes

[20:17] <lizmat> first coerce to List, then to Capture ?

[20:17] *** telex left
[20:17] *** telex joined
[20:19] <jnthn> lizmat: Yeah

[20:19] <nine> [Coke]: closed those tickets

[20:21] <cschwenz> when doing testing and you have a  plan $numtests;  , the docs say done-testing isn't needed.  is it still a good idea to have done-testing at the end of the test file?

[20:21] *** benzen left
[20:21] <nine> jnthn: I wrote an iterator for ArgFiles based on your IO::Handle::lines. Gives us a 3.4x speedup but it seems to have uncovered a bug: a newline at the end of a file gives us an empty string in the last iteration. I don't think it did that before.

[20:22] <[ptc]> cschwenz: done-testing is only needed if you don't want to specify the number of tests at the beginning (e.g. when the test suite is initially being developed)

[20:22] <yoleaux> 9 Sep 2015 14:27Z <itz> [ptc]: 99problems.t is more like 999glr-problems.t :)

[20:22] <yoleaux> 15:59Z <moritz> [ptc]: I've updated the rakudobrew on hack in /home/rakudobrew to a pots-glr rakudo (+modules); please check if the examples.perl6.org rebuild still works

[20:22] <jnthn> nine: oh, hmm

[20:22] <jnthn> Maybe we need to test for undefined as well as eof

[20:23] <[ptc]> moritz: the examples site uses a locally brewed rakudo, so everything should be using the current version atm

[20:23] *** telex left
[20:23] <jnthn> cschwenz: I tend to do either/or (that is, a plan *or* done-testing)

[20:23] <[ptc]> moritz: however, there are probably *lots* of examples which don't work atm :-)

[20:23] <cschwenz> [ptc]:  ok, thanks!  that's what i thought would be the case, but wanted to see what the perl6 community had to say about it.

[20:23] *** telex joined
[20:24] <cschwenz> so, plan 42; XOR done-testing;

[20:24] <[ptc]> cschwenz: I'd also like to echo what jnthn said.  It's more of an either/or thing

[20:25] <[ptc]> cschwenz: it's the same situation with Test::More in perl5, either one uses done_testing (e.g. if one is in the process of adding lots of tests), or there is a stable number of tests in which case one should use a specific test plan

[20:25] <[ptc]> moritz: thanks for the heads up btw :-)

[20:25] <[ptc]> _itz: thanks for letting me know :-)  I'll have a look-see tomorrow (hopefully)(

[20:26] *** xfix left
[20:26] <timotimo> bleh

[20:26] *** zakharyas joined
[20:26] <timotimo> the version of the benchmark that uses native type annotations all over the place does 2x as many garbage collections

[20:27] *** domidumont left
[20:27] <lizmat> cschwenz: if you have a plan, done-testing (which in itself is a test that all tests are done). is done automatically for you

[20:27] <jnthn> timotimo: If you can stick such a think into a gist I'd be interested to look forther

[20:27] <jnthn> Back to relaxing... I'll be about doing Perl 6 things tomorrow; how much depends how good I am at procrastinating writing slides for my talk on Thursday... :P

[20:27] <jnthn> &

[20:28] *** tokuhiro_ joined
[20:29] <timotimo> :)

[20:29] *** telex left
[20:29] *** telex joined
[20:29] *** telex left
[20:30] *** telex joined
[20:31] <dalek> Heuristic branch merge: pushed 17 commits to rakudo/cu_load by lizmat

[20:31] *** n0tjack joined
[20:32] <dalek> rakudo/nom: 0d47a43 | FROGGS++ | src/core/Any-iterable-methods.pm:

[20:32] <dalek> rakudo/nom: fire LAST phaser also when next-ing every loop

[20:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d47a436e6

[20:32] <cschwenz> https://github.com/perl6/doc/pull/124  <-- this is why i was asking about plan vs. done-testing

[20:32] <timotimo> jnthn: https://gist.github.com/timo/b52c874c07d27d631bb3 - there you go

[20:32] <dalek> doc: 4e39c1d | (Calvin Schwenzfeier)++ | t/ (2 files):

[20:32] <dalek> doc: As we have a plan, the deprecated "done;" can be removed.

[20:32] <dalek> doc: review: https://github.com/perl6/doc/commit/4e39c1d08b

[20:32] <dalek> doc: e25e58a | FROGGS++ | t/ (2 files):

[20:32] <dalek> doc: Merge pull request #124 from cschwenz/master

[20:32] <dalek> doc: 

[20:32] <dalek> doc: As we have a plan, the deprecated "done;" can be removed.

[20:32] <dalek> doc: review: https://github.com/perl6/doc/commit/e25e58a8ce

[20:32] *** tokuhiro_ left
[20:34] <FROGGS> .tell benzen just fixed the LAST issue with https://github.com/rakudo/rakudo/commit/0d47a436e6

[20:34] <yoleaux> FROGGS: I'll pass your message to benzen.

[20:34] <vendethiel> FROGGS: I can do that recompile now, do you still want that os x output?

[20:34] *** zakharyas left
[20:35] <[Coke]> jnthn++ # S07

[20:35] <FROGGS> vendethiel: I only want any output when the tests are failing :o)

[20:36] *** n0tjack left
[20:36] *** telex left
[20:36] *** Ven joined
[20:36] *** telex joined
[20:37] *** kaare_ left
[20:37] *** kaare_ joined
[20:38] *** juiko left
[20:38] <Ven> FROGGS: pulled, recompiling thusly

[20:38] <FROGGS> Ven++

[20:38] <timotimo> jnthn: lolwtf, a *big* chunk of time - 12% - was taken by repeatedly turning $*ARGS[0] into a Numeric to compare it to the number of iterations

[20:39] <Ven> *g*

[20:39] <FROGGS> 12%

[20:39] <FROGGS> much wow

[20:39] <Ven> .oO( count your enemies, but don't spend your time doing so )

[20:39] <moritz> timotimo: wtf where you debugging?

[20:39] <moritz> erm, profiling

[20:39] <timotimo> jnthn: and with a simple .Int at the right spot, the number of GCs goes down to 340 from 476

[20:39] <timotimo> moritz: an nbody benchmark

[20:39] <timotimo> look at the last gist link i gave to jnthn

[20:40] <timotimo> i'm in the mood for Igorrr now

[20:41] *** FROGGS left
[20:42] *** kaare_ left
[20:42] *** telex left
[20:42] *** FROGGS joined
[20:42] *** telex joined
[20:43] <timotimo> updated with the latest measurements

[20:43] <timotimo> removing the unnecessary re-parsing of the number cut the GC runs in half in the object-based version, too

[20:43] <timotimo> hum. but was i using the same number of runs?

[20:44] <FROGGS> :S

[20:44] <timotimo> yeah, i was

[20:44] <timotimo> this is ... ridiculous

[20:44] <FROGGS> +1

[20:44] <timotimo> i can't believe these numbers

[20:47] <timotimo> ah

[20:47] <timotimo> i've made the huge mistake of git pull-ing rakudo in between

[20:48] *** telex left
[20:49] <timotimo> it's only 110 vs 147 and 340 vs 379

[20:49] *** telex joined
[20:50] <[Coke]> nine++ ticket wrangling

[20:53] <dalek> rakudo/nom: 655a455 | FROGGS++ | src/core/Any-iterable-methods.pm:

[20:53] <dalek> rakudo/nom: fire LAST phaser also when next-ing every loop

[20:53] <dalek> rakudo/nom: 

[20:53] <dalek> rakudo/nom: Now properly. The patch before this one only fixed one of three spots.

[20:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/655a455f86

[20:54] *** telex left
[20:55] *** telex joined
[20:55] <timotimo> FROGGS: are you interested in finding a good solution for my ($a, $b) generating a call to &infix:<,> that's not needed? you'd be looking into Actions.nqp inside the if $<signature> branch i expect, and Mister J suggested a QAST::Want node that returns nqp::null in the 'v' case - my first attempt to just give it a branch with nqp::null didn't work out, though

[20:56] <FROGGS> timotimo: put in a QAST::Op.new(:op<null>) instead

[20:57] <timotimo> er, yeah

[20:57] <timotimo> that's what i did

[20:57] <FROGGS> ahh, hmmm

[20:57] <timotimo> ./perl6-m --target=mbc --output=lib/NativeCall.pm.moarvm -Ilib lib/NativeCall.pm

[20:57] <timotimo> ===SORRY!===

[20:57] <timotimo> Type check failed in binding $short-id; expected 'Str' but got 'Any'

[20:57] <timotimo> this is the symptom

[20:57] <timotimo> possibly not taking care of having a = and a RHS?

[20:58] <FROGGS> you should put the null in there when there is *no* RHS

[20:58] <dalek> doc: 5fff7bd | skids++ | lib/Language/subscripts.pod:

[20:58] <dalek> doc: Document post-GLR (pre-multidim) slicing behavior and truncation

[20:58] <dalek> doc: review: https://github.com/perl6/doc/commit/5fff7bd27a

[20:58] <dalek> doc: e086eb5 | skids++ | lib/Type/Signature.pod:

[20:58] <dalek> doc: Fix example to not confuse the topic at hand with []'s internal itemization

[20:58] <dalek> doc: review: https://github.com/perl6/doc/commit/e086eb5fb7

[20:58] <timotimo> right

[20:58] <FROGGS> timotimo: can you show the diff?

[20:58] <timotimo> hold on, i gotta try to restore it %)

[20:58] <FROGGS> *g*

[21:00] <timotimo> let's see if it still breaks or if that simple adjustment made it work

[21:00] *** telex left
[21:01] *** telex joined
[21:02] <timotimo> nope, still breaks

[21:04] *** n0tjack joined
[21:04] <Ven> FROGGS: https://gist.github.com/vendethiel/3dc31ccee7ba2fd4fbd2

[21:04] <timotimo> FROGGS: https://gist.github.com/timo/a9570cb6beee419ec2a1

[21:04] <FROGGS> :D

[21:05] <FROGGS> Ven: damnit.. it still does not seem to run a single test...

[21:06] <FROGGS> Ven: can I get the output of t/04-nativecall/11-cpp.t and t/04-nativecall/13-cpp-mangling.t again?

[21:06] *** telex left
[21:06] <Ven> FROGGS: https://gist.github.com/vendethiel/7415e61ffc4783b2dceb

[21:07] *** telex joined
[21:07] <moritz> m: say uniname(' ')

[21:07] <camelia> rakudo-moar 0d47a4: OUTPUT«OGHAM SPACE MARK␤»

[21:07] <Ven> .u space jam

[21:07] <yoleaux> No characters found

[21:07] <Ven> :(

[21:07] <timotimo> .u space balls

[21:07] <yoleaux> No characters found

[21:08] *** raiph left
[21:08] <FROGGS> Ven: okay, that means I must study more... or get my hands on an osx box

[21:08] <Ven> FROGGS: do you need me to run a piece of code?

[21:08] <moritz> m: say so ' ' ~~ /\s/

[21:08] <camelia> rakudo-moar 0d47a4: OUTPUT«True␤»

[21:09] *** n0tjack left
[21:09] <FROGGS> Ven: no, I'd need to experiment a bit to know what's going on

[21:09] <Ven> FROGGS: ok :). well, if you need me to, just ask

[21:09] <Ven> but for now, sleep &

[21:10] <lizmat> FROGGS: I can't give you access to an OS X box right now, but will be able to do so when we get home again

[21:10] <lizmat> by Thursday or so

[21:10] <FROGGS> lizmat: that'd be awesome

[21:10] <FROGGS> Ven: gnight and thanks :o)

[21:10] <FROGGS> timotimo: I'll play with your patch in a bit

[21:10] <FROGGS> I currently try to understand why cu_load does not build at all

[21:11] *** Ven left
[21:12] <timotimo> cool, FROGGS 

[21:12] <dalek> rakudo/nom: 1bd7278 | lizmat++ | src/core/IO/Path.pm:

[21:12] <dalek> rakudo/nom: Fix faulty prototype

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1bd72783c9

[21:12] *** telex left
[21:13] *** telex joined
[21:14] *** laben joined
[21:14] <laben> ohai #perl6

[21:14] <FROGGS> hi laben

[21:15] <laben> just a quick heads up before i go to bed, i'm smashed these weeks due to work

[21:15] <moritz> Internal error: invalid thread ID 1086710784 in GC work pass

[21:15] <moritz> while running htmlify

[21:15] <FROGGS> ewww

[21:15] <laben> for those interested in JSON::RPC, i pushed an easy fix at https://github.com/bbkr/jsonrpc/pull/16

[21:18] *** telex left
[21:18] *** abaugher left
[21:18] *** abaugher joined
[21:19] <timotimo> laben: don't worry about putting dayjob higher on the priority list; we don't want to get notifications like "laben aborted work: hunting vermin for food" ;)

[21:19] *** telex joined
[21:19] *** telex left
[21:19] <lizmat> m: sub a { .Int with $^a }; a(Str).perl.say  # somehow I expect this to say Str instead of ()

[21:19] <camelia> rakudo-moar 0d47a4: OUTPUT«()␤»

[21:20] *** telex joined
[21:21] <vendethiel> m: say Str.Int.perl

[21:21] <camelia> rakudo-moar 0d47a4: OUTPUT«Invocant requires an instance of type Str, but a type object was passed.  Did you forget a .new?␤  in block <unit> at /tmp/yFKn3e0pMl:1␤␤»

[21:21] *** kjs__ left
[21:21] <laben> timotimo: XD that was good! no, really, $dayjob problem is that my boss(es) asked me to switch to another project which uses Node.js and i had (or still have?) to instruct myself in JS which is not the happies moment of my life

[21:21] <timotimo> ah

[21:22] <FROGGS> vendethiel: you are supposed to sleep young man!

[21:22] <vendethiel> lizmat: the "with" is not traversed, that's correct, right? I don't think it should return its operand in the other case

[21:22] <timotimo> "hunting vermin for food" is from Dwarf Fortress

[21:22] <vendethiel> FROGGS: but mooom :(

[21:22] <timotimo> at least i think i saw it there

[21:22] <FROGGS> vendethiel: No!

[21:22] * vendethiel mumbles things about life being unfair

[21:23] <timotimo> https://40.media.tumblr.com/tumblr_lzsh37TAYu1r47y1go2_500.jpg

[21:23] <lizmat> vendethiel: I was thinking about this: 

[21:23] <vendethiel> timotimo: best excuse not to put on the table. "there are zombies in the house"

[21:23] <lizmat> .lines(:close, |c) with self.open(|c)

[21:23] <lizmat> if the open fails, I would like to see it returned 

[21:23] <vendethiel> lizmat: wouldn't .given be more useful there?

[21:24] <lizmat> .given ???

[21:24] <vendethiel> uhm. I mean given{} :P

[21:24] <vendethiel> well, I guess you could invent a .given...

[21:25] <lizmat> given self.open(|c) { .... and then ?

[21:25] <laben> mmh, i'm happy to see the great majority of Star modules work OOTB. are there any last broken ones?

[21:26] *** telex left
[21:26] *** telex joined
[21:27] <vendethiel> lizmat: you can "cling onto" the result with it (and just end the block with $_ I guess). But I was actually thinking of some closing mechanism (python-like "with"), so disregard my comment

[21:28] <lizmat> I think .method with $a returning the value of $a if not defined, would be a useful idiom

[21:29] <vendethiel> lizmat: seems a bit like andthen, in some way, maybe?

[21:29] <vendethiel> m: say Str andthen .Int

[21:29] <camelia> rakudo-moar 655a45: OUTPUT«(Str)␤»

[21:29] <vendethiel> m: say "3" andthen .Int

[21:29] <camelia> rakudo-moar 655a45: OUTPUT«3␤»

[21:30] <laben> \o/ seems like every Task::Star module is working now post-glr!

[21:31] <lizmat> vendethiel++

[21:31] <FROGGS> nice, cu_load builds again

[21:31] <timotimo> good!

[21:32] *** telex left
[21:32] * vendethiel goes to sleep for real

[21:32] <FROGGS> well, almost

[21:32] <lizmat> m: sub a { $^a andthen .Int }; a(Str).perl.say; a(42).perl.say   # still not quite what I want :-(

[21:32] <camelia> rakudo-moar 655a45: OUTPUT«()␤42␤»

[21:32] <laben> FROGGS++ you did it! you merged c++ native call support

[21:32] *** telex joined
[21:32] * vendethiel wats

[21:32] <FROGGS> laben: I did :o)

[21:33] <vendethiel> m: sub a { say $^a.perl; $^a }; a(Str).perl.say

[21:33] <camelia> rakudo-moar 655a45: OUTPUT«Str␤Str␤»

[21:33] <laben> FROGGS: do you have any planned feature for it?

[21:33] <vendethiel> m: sub a { say $^a.perl; $^a andthen 1 }; a(Str).perl.say

[21:33] <camelia> rakudo-moar 655a45: OUTPUT«Str␤()␤»

[21:33] <lizmat> bug?

[21:33] <vendethiel> m: sub a { say $^a.perl; say $^a andthen 1 }; a(Str).perl

[21:33] <camelia> rakudo-moar 655a45: OUTPUT«Str␤(Str)␤»

[21:33] <FROGGS> laben: you mean if I'm going to use it for something?

[21:33] <laben> i personally would like to know if it is possible to somehow map c++ overloading to perl6 MMD

[21:33] <vendethiel> lizmat: ...looks like a part of it isn't returned? idk

[21:33] <vendethiel> m: sub a { say $^a.perl; return $^a andthen 1 }; a(Str).perl.say

[21:33] <camelia> rakudo-moar 655a45: OUTPUT«Str␤Str␤»

[21:33] <vendethiel> lizmat: ^

[21:33] <vendethiel> seems like a bug

[21:34] *** tokuhiro_ joined
[21:34] <lizmat> m: sub a { return $^a andthen .Int }; a(Str).perl.say; a(42).perl.say

[21:34] <camelia> rakudo-moar 655a45: OUTPUT«Str␤42␤»

[21:34] <lizmat> aha...

[21:34] <lizmat> bug indeed

[21:34] <FROGGS> laben: ohh, that's not that high on my todo list actually... I'm about binding Box2D, and well see what I need

[21:34] <vendethiel> lizmat++ # golfing

[21:35] <laben> FROGGS: nice work there :) i was asking because it would make using many large-sized c++ libs (like Qt) much easier

[21:36] <FROGGS> we'll see what we can do :o)

[21:36] <laben> otherwise i fear we need to singlehandedly map every possible call to c-tile funcs

[21:36] *** n0tjack joined
[21:36] <laben> s/c-tile/c-style/

[21:37] <timotimo> laben: i suggest using something metadata-driven to bind Qt rather than manually going at it

[21:38] <FROGGS> my highest priority is to get the name mangling on osx right, which just seems to be a matter of a underscore

[21:38] *** telex left
[21:38] <laben> yeah, that's probably a better approach given its size

[21:38] <timotimo> i forgot what it's called, but there's something like a DB that you can query via regular C function calls that should give you everything you need to build a binding

[21:38] *** tokuhiro_ left
[21:38] *** telex joined
[21:40] <lizmat> commute to room&

[21:40] *** lizmat left
[21:41] <laben> ooh so much stuff could be done, so little time to do it :/

[21:41] *** n0tjack left
[21:44] *** telex left
[21:44] <laben> oh well, time to go to bed for real. have a good time, perl6'ers !

[21:44] *** telex joined
[21:44] *** laben left
[21:45] <skids> So, what's still special about prefix:<|> inside function call arguments? (wondering about new S07 line 159)

[21:45] <Ulti> https://twitter.com/rakudoperl  <--- looks mega out of date and unused...

[21:46] *** lizmat joined
[21:46] * lizmat submitted a bug report about andthen behaviour: #126050

[21:47] *** cognominal left
[21:48] <patrickz> timotimo,laben: https://wiki.qt.io/PySide_Binding_Generator <- Link to API Extractor (the tool PySide uses for automated Binding generation)

[21:50] <masak> patrickz++

[21:50] *** telex left
[21:50] *** telex joined
[21:53] <patrickz> gmake crashes here on Windows when building dyncall (during MoarVM compilation). Is that a known problem?

[21:53] <FROGGS> patrickz: it does not crash on my box, but there is an open pull request with a fix

[21:55] *** telex left
[21:55] *** n0tjack joined
[21:56] <dalek> rakudo/cu_load: 0d47a43 | FROGGS++ | src/core/Any-iterable-methods.pm:

[21:56] <dalek> rakudo/cu_load: fire LAST phaser also when next-ing every loop

[21:56] <dalek> rakudo/cu_load: review: https://github.com/rakudo/rakudo/commit/0d47a436e6

[21:56] <dalek> rakudo/cu_load: 655a455 | FROGGS++ | src/core/Any-iterable-methods.pm:

[21:56] <dalek> rakudo/cu_load: fire LAST phaser also when next-ing every loop

[21:56] <dalek> rakudo/cu_load: 

[21:56] <dalek> rakudo/cu_load: Now properly. The patch before this one only fixed one of three spots.

[21:56] <dalek> rakudo/cu_load: review: https://github.com/rakudo/rakudo/commit/655a455f86

[21:56] <dalek> rakudo/cu_load: 1bd7278 | lizmat++ | src/core/IO/Path.pm:

[21:56] <dalek> rakudo/cu_load: Fix faulty prototype

[21:56] <dalek> rakudo/cu_load: review: https://github.com/rakudo/rakudo/commit/1bd72783c9

[21:56] <dalek> rakudo/cu_load: 48d00b8 | FROGGS++ | src/core/ (2 files):

[21:56] <dalek> rakudo/cu_load: Merge branch 'nom' of github.com:rakudo/rakudo into cu_load

[21:56] <dalek> rakudo/cu_load: review: https://github.com/rakudo/rakudo/commit/48d00b8009

[21:56] <dalek> rakudo/cu_load: c0e290d | FROGGS++ | src/core/CompUnitRepo.pm:

[21:56] <dalek> rakudo/cu_load: unbreak build and fix loading modules

[21:56] *** telex joined
[21:56] <dalek> rakudo/cu_load: review: https://github.com/rakudo/rakudo/commit/c0e290d3af

[22:01] <FROGGS> sadly, the jvm does not like cu_load...

[22:01] *** n0tjack left
[22:01] <lizmat> FROGGS++

[22:01] * lizmat meanwhile gets some sleep&

[22:01] <FROGGS> that's still a showstopper

[22:01] <FROGGS> gnight lizmat 

[22:01] *** telex left
[22:02] *** telex joined
[22:04] <FROGGS> timotimo: I'm spectesting this now: https://gist.github.com/FROGGS/d27a6db2039e08364828

[22:04] <FROGGS> timotimo: looks good so far

[22:05] *** necrophcodr joined
[22:05] <necrophcodr> after searching a few around duckduckgo and google, only to find no real answers, i have come here. is there any way to easily compile perl6 or nqp to mast, using the moarvm backend with rakudo?

[22:06] <FROGGS> necrophcodr: yes

[22:06] <necrophcodr> FROGGS: how?

[22:06] <FROGGS> perl6 --target=mbc --output=Foo.pm.moarvm Foo.pm

[22:06] <necrophcodr> ah, the target is mbc

[22:06] <FROGGS> yeah

[22:07] <necrophcodr> i first caught on that it would be "post", then later "mast". neither of which of course worked. thank you so much!

[22:07] <FROGGS> you're welcome :o)

[22:07] *** necrophcodr left
[22:07] *** telex left
[22:08] *** telex joined
[22:08] *** patrickz left
[22:09] *** dalek left
[22:09] *** dalek joined
[22:09] *** ChanServ sets mode: +v dalek

[22:09] *** n0tjack joined
[22:10] *** mohij joined
[22:10] <FROGGS> .tell timotimo https://gist.github.com/FROGGS/d27a6db2039e08364828 is spectest clean... so if it improves your profile then please commit it

[22:10] <yoleaux> FROGGS: I'll pass your message to timotimo.

[22:10] <FROGGS> gnight #perl6

[22:11] <timotimo> o/

[22:11] <yoleaux> 22:10Z <FROGGS> timotimo: https://gist.github.com/FROGGS/d27a6db2039e08364828 is spectest clean... so if it improves your profile then please commit it

[22:11] *** FROGGS left
[22:13] *** mohij left
[22:13] *** telex left
[22:14] *** patrickz joined
[22:14] *** telex joined
[22:14] *** n0tjack left
[22:19] *** telex left
[22:20] *** telex joined
[22:20] *** cognominal joined
[22:20] *** telex left
[22:20] *** TEttinger joined
[22:22] <timotimo> oh

[22:22] <timotimo> well, find_method is back

[22:22] <timotimo> 24% of total time spent in find_method

[22:22] *** telex joined
[22:22] <timotimo> 2250000 entries in total for 30000 iterations

[22:23] *** vendethiel left
[22:28] *** telex left
[22:28] *** telex joined
[22:30] *** nowan_ joined
[22:30] *** pmurias__ joined
[22:32] *** rurban left
[22:33] *** telex left
[22:34] *** notostraca joined
[22:34] *** telex joined
[22:34] *** TEttinger left
[22:34] *** dalek left
[22:34] *** tping left
[22:34] *** khw left
[22:34] *** pmurias_ left
[22:34] *** nowan left
[22:34] *** kurahaupo_ left
[22:34] *** inokenty left
[22:34] *** salv0 left
[22:34] *** [Tux] left
[22:36] *** Peter_R left
[22:36] *** rurban joined
[22:38] *** rurban left
[22:39] <timotimo> in the native version of that benchmark the "advance" function - The Big One - doesn't get jitted because param_rp_o isn't implemented in the jit

[22:39] *** telex left
[22:40] *** pmurias__ left
[22:40] *** pmurias left
[22:40] *** telex joined
[22:40] <timotimo> oh

[22:40] <timotimo> no, it's not The Big One; the loop inside it is.

[22:41] <skids> m: my @a = 1,2,3,4; @a[0,(1,2),3].perl.say;  # Hehe, too funny, it looks like I'm the accidental "author" of this feature.

[22:41] <camelia> rakudo-moar 1bd727: OUTPUT«(1, (2, 3), 4)␤»

[22:41] <skids> Question is, do we want to keep it.  It does nicely eliminate the inside of [] as a magic flattening area.

[22:42] *** n0tjack joined
[22:42] *** rindolf left
[22:43] <ShimmerFairy> skids: I think it has a lot of potential for quite nicely pulling values out into another, non-flat structure. :)

[22:44] <timotimo> it's a tiny bit like hyper in that regard, eh?

[22:44] <masak> 'night, #perl6

[22:45] <timotimo> gnite masak!

[22:45] *** telex left
[22:46] *** telex joined
[22:47] *** n0tjack left
[22:47] <skids> It's kind of scary that the code even worked without the .flat, and not that I'm on top of everything, but didn't seem to be the source of breakage in the ecosystem.

[22:48] * skids wonders how it will play with multidim.

[22:49] <timotimo> needs a ; to do anything with multidim, for a start

[22:49] <timotimo> a fly in my bedroom >:(

[22:49] <timotimo> loud thing

[22:51] *** telex left
[22:52] <patrickz> Just put my first hit at bringing Windows support back to rakudobrew here: https://github.com/patzim/rakudobrew

[22:52] *** telex joined
[22:52] <timotimo> you typo'd "Windws" in the README :)

[22:52] *** kurahaupo_ joined
[22:53] <skids> m: my @a = [1,2,3,4; 5,6,7,8]; @a[0,1; 0,(1,2),3].perl.say; # different code path

[22:53] <camelia> rakudo-moar 1bd727: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8)␤»

[22:53] <timotimo> "%~dp0rakudobrew" this looks strange to my non-powershell-understanding eyes

[22:54] <patrickz> If anyone wants to give it a try, please do! I can't fully test myself (build ist currently broken for me on Windows due to some other bug).

[22:54] <patrickz> @timotimo: Typo is fixed.

[22:55] <patrickz> That strange line actually *is* tested and works.

[22:55] <patrickz> %~dp0 is the path (without filename) of the current script (%0 + ~dp modifiers)

[22:56] <patrickz> The / is already appended so it looks rather strange by sitting directly next to the "rakudobrew", but it works.

[22:56] <timotimo> mhm

[22:56] <patrickz> timotimo++ # Very fast feedback

[22:57] <timotimo> i can't feed back on the rest of the repo, because i don't know any perl5 and i don't have windows :|

[22:57] *** telex left
[22:58] *** telex joined
[22:58] <patrickz> Thanks anyways, less typos nonetheless :-)

[22:58] <patrickz> off to bed&

[23:00] *** patrickz left
[23:00] * leont was happier when he forgot about %~dp0

[23:01] <ugexe> why use a hardcoded `perl` instead of the value of $0? https://github.com/patzim/rakudobrew/commit/835c221a853e7ff70a0e4c60696611bb385db5f5#diff-eacca5be9253a97fbfa511b258281c7bR518

[23:01] <ugexe> oh missed him

[23:02] <ugexe> also $^X, not $0 :x

[23:02] <pink_mist> isn't those perl5 things anyway?

[23:03] <pink_mist> or are they still present in 6?

[23:03] <pink_mist> *aren't

[23:03] *** telex left
[23:03] <ugexe> rakudobrew is perl5

[23:04] *** telex joined
[23:04] <pink_mist> oh

[23:08] <leont> Possibly, it could use pl2bat instead of writing a batch script by hand

[23:09] *** yqt left
[23:09] *** telex left
[23:09] <ugexe> i keep waiting for someone to do Alien::Rakudo::[Moar|JVM] so i wont end up doing it. install rakudo via cpan

[23:10] *** telex joined
[23:10] <leont> mst: wrote it at some point, but removed it from CPAN later

[23:11] <leont> https://metacpan.org/release/MSTROUT/Rakudo-Star-2012.08002

[23:12] <leont> Apparently the machinery wasn't as complicated as one may imagine: https://metacpan.org/source/MSTROUT/Rakudo-Star-2012.08002/Makefile.PL

[23:15] *** n0tjack joined
[23:15] *** telex left
[23:16] *** telex joined
[23:17] <timotimo> jnthn: from the spesh log of the native variant of that benchmark i can tell we're not inlining many very simple subs like &infix:<+>, &infix:<->, &infix:</> and &infix:<*>

[23:17] <ugexe> nice. missing an important (to me anyway) part though... downloading rakudo and friends itself instead of being packaged into the module

[23:18] <timotimo> jnthn: could this be due to something along the way not understanding regref?

[23:18] <leont> That should not be that hard

[23:19] <timotimo> jnthn: not even postfix ++ is inlined :(

[23:19] <leont> HTTP::Tiny ships with perl5 nowadays (5.14+ I think), and untarring has been supported even longer

[23:19] *** khw joined
[23:19] *** salv0 joined
[23:19] *** inokenty joined
[23:19] *** n0tjack left
[23:20] <ugexe> right. i imagine if i did it i'd probably just use Alien because it handles all that. and having it on cpan you might as well not worry too much about staying strictly core

[23:21] *** lizmat left
[23:21] *** telex left
[23:22] *** telex joined
[23:22] <leont> Sounds reasonable

[23:22] *** telex left
[23:22] <leont> I haven't really used the Alian::Build infrastructure myself, but it seems to be working for people

[23:23] *** Skarsnik left
[23:23] <ugexe> im not sure if you can download from github without SSL either

[23:24] <ugexe> re: HTTP::Tiny

[23:24] *** dalek joined
[23:24] *** [Tux] joined
[23:24] *** telex joined
[23:24] *** ChanServ sets mode: +v dalek

[23:26] *** Peter_R joined
[23:26] <leont> Hmmm

[23:26] <leont> File::Fetch is your friend in that case, I suspect

[23:28] <ugexe> well i mean you likely need a dependency no matter what... Net::SSLeay or whatever

[23:29] <timotimo> yeah, you better be verifying the certificate when you're downloading some code

[23:30] *** telex left
[23:30] *** telex joined
[23:31] <ugexe> just use the ol [+] $source-file.ords checksum

[23:31] <ugexe> and they say crypto is hard

[23:31] <timotimo> urgh

[23:32] <leont> F::F can use wget or curl, though its documentation is silent on its SSL support

[23:34] <ugexe> no joke, when we were kids me and tony-o wrote a checksum program that did exactly that haha. there were even a couple of (clearly) fake reviews about it, all good

[23:35] *** tokuhiro_ joined
[23:36] *** telex left
[23:36] *** telex joined
[23:40] *** tokuhiro_ left
[23:41] <grondilu> totally off topic guys, but the other day I watched the documentary about the new Homo species found in South Africa.  It was awesome:  http://video.pbs.org/video/2365559270/

[23:41] *** telex left
[23:42] *** telex joined
[23:45] *** aborazmeh joined
[23:45] *** aborazmeh left
[23:45] *** aborazmeh joined
[23:47] <zostay> m: $_ = "x"; say "no" if ! /../

[23:47] <camelia> rakudo-moar 1bd727: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/oQhr3XPSuU:1␤␤»

[23:47] *** telex left
[23:47] *** cognominal left
[23:47] <zostay> what's the equivalent for !/.../ from perl?

[23:47] <timotimo> m: $_ = "x"; say "no" unless /../

[23:47] <camelia> rakudo-moar 1bd727: OUTPUT«no␤»

[23:48] <timotimo> m: $_ = "x"; say "no" if none(/../)

[23:48] <camelia> rakudo-moar 1bd727: OUTPUT«Method 'match' not found for invocant of class 'Regex'␤  in block <unit> at /tmp/yWOemtwqne:1␤␤»

[23:48] <timotimo> m: $_ = "x"; say "no" if m/../

[23:48] <camelia> rakudo-moar 1bd727: ( no output )

[23:48] <timotimo> m: $_ = "x"; say "no" if !m/../

[23:48] <camelia> rakudo-moar 1bd727: OUTPUT«no␤»

[23:48] <timotimo> m: say !/../

[23:48] <camelia> rakudo-moar 1bd727: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/PQx8fxZ61R:1␤␤»

[23:48] <timotimo> m: $_ = "hi"; say !/../

[23:48] <camelia> rakudo-moar 1bd727: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/_NSMwySoD9:1␤␤»

[23:48] *** telex joined
[23:48] *** n0tjack joined
[23:48] <timotimo> a bit curious

[23:48] <zostay> that error message seems odd at least

[23:48] * timotimo is past bedtime again

[23:48] <timotimo> gnite!

[23:48] <zostay> later

[23:48] <japhb> o/

[23:48] <yoleaux> 18:45Z <FROGGS> japhb: done

[23:49] <japhb> .tell FROGGS \o/

[23:49] <yoleaux> japhb: I'll pass your message to FROGGS.

[23:52] *** dayangkun joined
[23:53] *** telex left
[23:53] *** n0tjack left
[23:54] *** telex joined
[23:59] *** telex left
[23:59] *** laouji joined
