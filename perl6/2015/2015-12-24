[00:00] <krshn> timotimo: what is SSA? 

[00:00] <cygx> single static assignment

[00:00] <timotimo> "single ... " yes

[00:00] <cygx> but in this case, more like single static binding

[00:00] *** woolfy left
[00:01] <cygx> m: my \hello = my $ = "world"; hello ~= " world"; say hello

[00:01] <camelia> rakudo-moar 895546: OUTPUT«world world␤»

[00:01] <cygx> you can still assign if you bind something assignable

[00:01] *** firstdayonthejob left
[00:01] *** virtualsue left
[00:02] <gfldex> m: my @a = <mdash amp>; say ('&' xx * Z~ @a Z~ ';' xx *).join;

[00:02] <camelia> rakudo-moar 895546: OUTPUT«&mdash;&amp;␤»

[00:02] <timotimo> i've already shown that, cygx  :P

[00:02] <timotimo> m: my @a = <mdash amp>; say @a.fmt("&%s;").say

[00:02] <camelia> rakudo-moar 895546: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Hj_lvmmmnR␤Variable '%s' is not declared␤at /tmp/Hj_lvmmmnR:1␤------> 3my @a = <mdash amp>; say @a.fmt("&7⏏5%s;").say␤»

[00:02] <timotimo> m: my @a = <mdash amp>; say @a.fmt('&%s;').say

[00:02] <camelia> rakudo-moar 895546: OUTPUT«&mdash; &amp;␤True␤»

[00:02] <timotimo> m: my @a = <mdash amp>; say @a.fmt('&%s;')

[00:02] <camelia> rakudo-moar 895546: OUTPUT«&mdash; &amp;␤»

[00:02] <timotimo> too much say

[00:03] <krshn> interesting. thanks.

[00:03] <cygx> timotimo: repetition is an essential teaching tool :p

[00:03] <krshn> cygx: yes++

[00:03] <timotimo> yes yes

[00:04] <timotimo> am i doing it right?

[00:04] <cygx> oO( Build a man a fire, and he'll be warm for a day. Set a man on fire, and he'll be warm for the rest of his life. )

[00:04] <cygx> (Terry Pratchett)++   :'(

[00:05] <nebuchadnezzar> m: my @a = 1; @a[3] = 2; say @a.grep(.defined)

[00:05] <camelia> rakudo-moar 895546: OUTPUT«Cannot use Bool as Matcher with '.grep'.  Did you mean to use $_ inside a block?␤  in block <unit> at /tmp/1IeLr1Vs9X:1␤␤Actually thrown at:␤  in block <unit> at /tmp/1IeLr1Vs9X:1␤␤»

[00:06] <atweiden> timotimo: nom is currently not building

[00:06] <atweiden> No writeable path found in block <unit> at tools/build/install-core-dist.pl:12

[00:06] <atweiden> it compiled fine, but for this

[00:07] <krshn> so here.. \hello is more like a reference to some memory location ? 

[00:07] <timotimo> no

[00:07] <krshn> if it points to something that can change, it can be modified, else not? 

[00:08] <timotimo> delete the thought of "reference" from your brain right now :)

[00:08] <cygx> variable names are bound to a thing, normally a scalar container, an array or a hash, depending on whether you use $, @ or %

[00:09] <cygx> then, you can assign to that thing with = or re-bind the name with :=

[00:09] <nebuchadnezzar> erf, how could I grep all those “(Any)”?

[00:09] <cygx> native variables and sgilless ones are special

[00:09] <cygx> *sigilless

[00:09] <timotimo> nebuchadnezzar: you can .grep(*.defined)

[00:10] <timotimo> i'll go to sleep nao

[00:10] <nebuchadnezzar> erf, thanks

[00:10] <nebuchadnezzar> timotimo++

[00:10] <krshn> thanks.. lot of reading to do :-)

[00:11] <krshn> thanks timotimo++ gnite

[00:11] <nebuchadnezzar> lot of things to learn, Perl6++

[00:12] <krshn> nebuchadnezzar: yep.. I am prepared for the long haul. Ideally, I would like to program in perl6 for the next 25 years

[00:12] *** shmibs left
[00:12] <_nadim> hi, there a way to grep a list and get two lists, one that matches one that does not? And I means something that is syntaxically pleasant and perl6ish, not a for loop, and if and two lists.

[00:12] * nebuchadnezzar read the doc looking for what *.defined means

[00:12] <_nadim> s/there/Is there/

[00:13] <AlexDaniel> nebuchadnezzar: * is whatever star

[00:13] <AlexDaniel> nebuchadnezzar: you can probably do .grep({.defined}) as well

[00:13] *** shmibs joined
[00:13] <gfldex> it's WhateverCode see: http://doc.perl6.org/type/WhateverCode

[00:13] <cygx> m: m: my ($a, @b, %c); my int $d; say $a.VAR.WHAT, @b.VAR.WHAT, %c.VAR.WHAT, $d.VAR.WHAT

[00:13] <camelia> rakudo-moar 895546: OUTPUT«(Scalar)(Array)(Hash)(IntLexRef)␤»

[00:13] <cygx> krshn: ^^

[00:13] <AlexDaniel> nebuchadnezzar: or .grep({$_.defined}) if you wish

[00:14] <AlexDaniel> or .grep: { .defined }; …

[00:14] <timotimo> but never .grep(.defined)

[00:14] <AlexDaniel> hm I wonder, what about .grep(&defined) ?

[00:14] <cygx> just .grep(*.defined)

[00:14] <nebuchadnezzar> gfldex, AlexDaniel: ok, that's what I used to use in perl5

[00:14] <nebuchadnezzar> m: my @a = 1; @a[3] = 2; say @a.grep(&defined)

[00:14] <camelia> rakudo-moar 895546: OUTPUT«Cannot call ACCEPTS(Sub+{<anon|70088992>}: Int); none of these signatures match:␤    (Mu:U $: \topic, *%_)␤    (Mu:U $: Mu:U \topic, *%_)␤  in block <unit> at /tmp/zHLS744LX5:1␤␤»

[00:14] <nebuchadnezzar> m: my @a = 1; @a[3] = 2; say @a.grep(*.defined)

[00:14] <camelia> rakudo-moar 895546: OUTPUT«(1 2)␤»

[00:14] *** rickbike left
[00:15] <nebuchadnezzar> m: my @a = 1; @a[3] = 2; say @a.grep: .defined

[00:15] <camelia> rakudo-moar 895546: OUTPUT«Cannot use Bool as Matcher with '.grep'.  Did you mean to use $_ inside a block?␤  in block <unit> at /tmp/GvblBOeuGv:1␤␤Actually thrown at:␤  in block <unit> at /tmp/GvblBOeuGv:1␤␤»

[00:15] <nebuchadnezzar> m: my @a = 1; @a[3] = 2; say @a.grep: {.defined}

[00:15] <camelia> rakudo-moar 895546: OUTPUT«(1 2)␤»

[00:15] <nebuchadnezzar> ok, thanks guys

[00:16] <krshn> can someone point me to SSA doc? 

[00:16] <krshn> atleast what do I search for? 

[00:17] *** cpage_ joined
[00:17] <AlexDaniel> m: sub foo { defined $^a }; my @a = 1; @a[3] = 2; say @a.grep(&foo)

[00:17] <camelia> rakudo-moar 895546: OUTPUT«(1 2)␤»

[00:18] <AlexDaniel> honestly I don't understand why you have to wrap ｢defined｣ into your own sub

[00:18] <timotimo> m: say &defined.perl

[00:18] <camelia> rakudo-moar 895546: OUTPUT«Sub+{<anon|70088992>}.new␤»

[00:18] <krshn> https://en.wikipedia.org/wiki/Static_single_assignment_form ? 

[00:19] <timotimo> m: say &defined.signature

[00:19] <camelia> rakudo-moar 895546: OUTPUT«(Mu)␤»

[00:19] <timotimo> krshn: yeah

[00:19] <krshn> ok. thanks.

[00:19] *** Skarsnik left
[00:19] *** captain-adequate left
[00:19] <krshn> that wiki relevant to perl6 ?

[00:19] <cygx> timotimo: curious notion of 'sleep' you have there ;)

[00:19] <timotimo> yeah.

[00:19] * timotimo suspends computer

[00:19] <AlexDaniel> timotimo: which means?

[00:20] *** lucasb left
[00:21] <krshn> why do I have the feeling that once I learn a good chunk of perl6, I would have learnt a good chunk of computer science itself ? 

[00:22] <krshn> I am a electrical engineer btw :-)

[00:22] <krshn> so this is great

[00:22] <krshn> I would never have come across SSA otherwise

[00:22] <AlexDaniel> krshn: I'm not sure about that. But you will learn a bunch of stuff that you can also use in other languages, yes

[00:23] <krshn> sure.. :-) I am not so naive to think that cs == perl6 

[00:23] <AlexDaniel> krshn: which is why I like the idea of using Perl 6 for teaching. Basically anything that you want to show you can show in Perl 6

[00:24] <hankache> TimToady post is up

[00:24] <hankache> check the Advent

[00:24] <krshn> it definitely is overwhelming.. perl6 has everything and the kitchen sink thrown in 

[00:25] <AlexDaniel> hankache: nice :)

[00:25] <krshn> thanks hankache

[00:25] <krshn> was waiting for it

[00:25] <TimToady> at one time we had a type named KitchenSink, just so we could say that

[00:25] <hankache> TimToady++

[00:25] <TimToady> we still have the sink

[00:26] <cygx> krshn: documantation is at http://doc.perl6.org/language/variables#Sigilless_variables and https://design.perl6.org/S06.html#Term_binding

[00:26] <krshn> :-) first time on this channel.. can't believe I am chatting with you Larry. 

[00:26] <gfldex> m: my @a = 1, 2, 3; say @a >>~~>> Int:D;

[00:26] <camelia> rakudo-moar 895546: OUTPUT«[True True True]␤»

[00:26] <cygx> *documentation

[00:26] <gfldex> m: my @a = 1, Nil, 3; say @a >>~~>> Int:D;

[00:26] <camelia> rakudo-moar 895546: OUTPUT«[True False True]␤»

[00:27] <krshn> cygx: thanks

[00:27] *** RandalSchwartz joined
[00:27] <RandalSchwartz> what is panda?  Why doesn't it install from git?

[00:28] <hankache> can you please go to https://news.ycombinator.com/newest and https://www.reddit.com/r/perl6/ and upvote Larry's Post (An Unexpectedly Long-expected Party)

[00:28] *** raiph left
[00:28] <RandalSchwartz> I'm building git://github.com/rakudo/rakudo.git every day, but it doesn't have anything panda in it

[00:28] <_nadim> it installs modules, it needs to be bootstraped. clone repo, follow instructions.

[00:29] <_nadim> https://github.com/tadzik/panda/

[00:29] <RandalSchwartz> INSTALL.txt doesn't mention it, except to say to "use it"

[00:29] <RandalSchwartz> perhaps that INSTALL.txt needs to be updated to say what you just said

[00:30] <_nadim> Error message "Directives specify 0 arguments, but 2 arguments were supplied" could be more helpful, like where that occures to start with

[00:30] <skids> Most people install it using "rakudobrew build panda"

[00:30] <RandalSchwartz> what the heck is rakudobrew?  What would have told me about that?

[00:31] <RandalSchwartz> that's *also* not mentioned in INSTALL.txt .. I just read that

[00:31] <skids> All good questions.  https://github.com/tadzik/rakudobrew

[00:31] <RandalSchwartz> so there's a lot of folklore around rakudo already

[00:31] <tadzik> what is INSTALL.txt? :)

[00:31] <tadzik> there's some tribal knowledge

[00:31] <diakopter> what is reading?

[00:31] <AlexDaniel> cool.

[00:31] <RandalSchwartz> I'm being the guinea pig for christmas

[00:32] <RandalSchwartz> because I really want this to work when the crowds throng in

[00:32] <tadzik> well, panda and rakudobrew are not official stuff of any sort

[00:32] <tadzik> it's just what a lot of people tends to use

[00:32] <RandalSchwartz> is there a web page I should have read instead of INSTALL.txt?

[00:32] <RandalSchwartz> Nothing is official!

[00:32] <RandalSchwartz> this is perl6!

[00:32] <tadzik> does perl.org recommend perlbrew?

[00:32] <tadzik> or cpanminus?

[00:32] <skids> Well, I expect the crowds wil be using xmas's star release which will bundle that all.

[00:33] <RandalSchwartz> Oh - so when I download two days from now, I will get that?

[00:33] <AlexDaniel> RandalSchwartz: http://rakudo.org/how-to-get-rakudo/

[00:33] <RandalSchwartz> but just not today?

[00:33] <AlexDaniel> RandalSchwartz: this one does

[00:33] <_nadim> https://perl6.org/getting-started/

[00:33] <RandalSchwartz> "this" "one"

[00:33] <diakopter> RandalSchwartz: a rakudo.org post from February (on first page still) mentions panda

[00:33] <RandalSchwartz> not the current git?

[00:33] <skids> But, we shoud probably make some "developers install" instructions very easy to find.

[00:33] <RandalSchwartz> I don't see panda anywhere in today's build

[00:34] <gfldex> m: my @a = 1, Nil, 3; say [Z~~] @a, Int:D xx *;

[00:34] <camelia> rakudo-moar 895546: OUTPUT«(True False True)␤»

[00:34] <diakopter> RandalSchwartz: you're not building the star distribution

[00:34] <hankache> can you please go to https://news.ycombinator.com/newest and https://www.reddit.com/r/perl6/ and upvote Larry's Post (An Unexpectedly Long-expected Party)

[00:34] *** muraiki joined
[00:34] <_nadim> I started at https://perl6.org/getting-started/, was done within 10 mn. simple enough

[00:34] <diakopter> hankache: you already posted that

[00:34] <skids> panda isn't part of rakudo, so that's way it does not mention it, same way gcc does not mention dpkg.

[00:34] <hankache> diakopter i am spamming

[00:35] <diakopter> as a way of life?

[00:35] <RandalSchwartz> Is there a git archive I can build instead of using brew?

[00:35] <RandalSchwartz> brew conflicts with macports... I went crazy having both of them installed

[00:35] <diakopter> you can try https://github.com/rakudo/star

[00:35] <_nadim> start here: https://perl6.org/getting-started/

[00:35] <diakopter> RandalSchwartz: rakudobrew is not brew

[00:36] <RandalSchwartz> ... http://rakudo.org/how-to-get-rakudo/

[00:36] <RandalSchwartz> says brew install rakudo-star

[00:36] <RandalSchwartz> I don't want to do that

[00:36] <diakopter> very outdated

[00:36] <RandalSchwartz> again... this is festivus

[00:36] <RandalSchwartz> christmas is just around the corner

[00:36] <diakopter> ++

[00:36] <AlexDaniel> actually, I think that the debian package is going to be there

[00:36] <RandalSchwartz> people are going to swamp to this page

[00:36] <RandalSchwartz> s/swamp/swarm/

[00:37] <AlexDaniel> last time I complained about it being outdated somebody on this channel actually uploaded 2015.09

[00:37] <diakopter> who's building the debian package? is it in the pipeline?

[00:37] <AlexDaniel> diakopter: Dominique Dumont [email@hidden.address]
[00:37] <jdv79> just clone rakudo off github and perl Configure.pl --gen-moar && make install

[00:37] <cygx> RandalSchwartz: there's a section 'Building from source'

[00:37] <RandalSchwartz> so perl6 *isn't* ready for a "release on christmas" if the docs on how to get started aren't even correct.

[00:38] <diakopter> RandalSchwartz: start with the "To install rakudobrew" lines on that rakudo.org page

[00:38] <RandalSchwartz> ahh... thank you

[00:38] <RandalSchwartz> sorry, I got stuck on the brew command.

[00:38] <diakopter> it ends with panda install Task::Star

[00:38] <RandalSchwartz> yeah yeah, thanks.  OK, whining volume reduced.

[00:39] <RandalSchwartz> I'll give that a try tonight when I'm on a faster link

[00:39] <diakopter> I think only moritz and pmichaud can post to rakudo.org

[00:40] <krshn> great post

[00:41] <jdv79> that how-to-get-rakudo is a little verbose and rambly.  a TOC would help too.

[00:41] <jdv79> s//page/

[00:42] <RandalSchwartz> so rakudobrew will also do what my direct install from git://github.com/rakudo/rakudo.git has been doing?

[00:42] <RandalSchwartz> I've been doing it the hard way? :)

[00:42] <jdv79> i fee like it could be < 1/4 that size and then link off to more rambles if they are really needed

[00:42] <diakopter> RandalSchwartz: yes, but you need panda also to get the Star modules

[00:43] *** regreg left
[00:43] <diakopter> https://github.com/rakudo/star/blob/master/Configure.pl#L290

[00:43] <RandalSchwartz> ok... so I'll change my morning workflow

[00:43] <diakopter> someone should try running that lately

[00:44] <diakopter> tadzik: the problem with tribal knowledge is that non-tribal conflicting knowledge is unaware of it

[00:45] <jdv79> huh.  do we really need install/bin when we have install/share/perl6/site/bin?

[00:47] <jdv79> nm

[00:49] <krshn> I am not able to do "panda install Task::Star"

[00:49] <krshn>  ==> Installing Grammar::Debugger Cannot unbox a type object   in block  at /home/krshn/local/linux/share/perl6/site/sources/443265C9F8492658D1FECC3F5B7DAAC93EDF370F:61   in sub indir at /home/krshn/local/linux/share/perl6/site/sources/19FE314CF0CF0A0E3BC1A2E32118466C7984705D:20   in method install at /home/krshn/local/linux/share/perl6/site/sources/443265C9F8492658D1FECC3F5B7DAAC93EDF370F:42   in method install at /home/krshn/local/lin

[00:50] <krshn> this is on the latest version of perl6/8955469

[00:50] <jdv79> try it again

[00:50] <krshn> and latest version of panda/005eb66

[00:50] <jdv79> that is a currently difficult to repro bug

[00:50] <jdv79> it normally only happens the first time

[00:50] <jdv79> :(

[00:51] <krshn> ok again

[00:51] *** AndyDee left
[00:51] <jdv79> i thought that had been fixed.  maybe it should be bumped up in priority.  nine would know.

[00:52] <krshn> failing Template::Mustache 

[00:52] *** shmibs left
[00:53] <TimToady> URI also appears to be failing

[00:53] <krshn> ==> Installing Template::Mustache ==> Successfully installed Template::Mustache ==> Fetching URI ==> Building URI ==> Testing URI t/01.t ................... ok Use of the 'unpack' method is experimental; please 'use experimental :pack'   in sub uri-escape at /rhel5pdi/workplace/krshn/git/panda/.panda-work/1450918318_9/lib/URI/Escape.pm:18   in block <unit> at t/escape.t:18  # Looks like you planned 11 tests, but ran 4 t/escape.t .......

[00:53] <TimToady> oh, looks like it needs 'use experimental'

[00:54] <krshn> Sorry URI as TimToady pointed out

[00:54] <jdv79> krshn: is that literally failing?  looks like a warning only.

[00:54] <jdv79> oh, nm

[00:54] <krshn> URI failing .. Files=4, Tests=86,  5 wallclock secs ( 0.01 usr  0.00 sys +  5.39 cusr  0.40 csys =  5.80 CPU) Result: FAIL

[00:55] *** shmibs joined
[00:55] <TimToady> even though we don't promise Star by Christmas, we would do well to make this a bit smoother...

[00:57] <TimToady> hmm, I see a [DISLOCATED MESSAGE] Useless use of enter_result__1 symbol in sink context

[00:57] <TimToady> better fix that...

[00:58] *** leont left
[01:00] *** c_babbalage joined
[01:00] <_nadim> TimToady: Error message "Directives specify 0 arguments, but 2 arguments were supplied" could be more helpful, at least  where it occures

[01:00] <_nadim> or shall I report a bug?

[01:01] <jdv79> krshn: that's from a change made today.

[01:01] *** Ben_Goldberg left
[01:01] <krshn> ok

[01:01] <krshn> jdv79: ok

[01:01] *** raiph joined
[01:02] <TimToady> _nadim: it could at least mention 'printf' or some such

[01:03] <_nadim> yes, the error was %:2d, note the extra ':' in the format of a sprint. the line could be useful too if one has many sprintf

[01:03] <c_babbalage> _nadim: What makes it a bug? Is `Directives` a separate kind of thing, or the name of a sub/function/method/thingy? Sorry, I'm not helping, I just dropped in here because it's nearly Christmas and I wanted to try it out.

[01:04] <RandalSchwartz> TimToady - that's why I'm helping point out things before the masses approach

[01:04] *** yeahnoob joined
[01:04] <TimToady> nodnod

[01:04] <RandalSchwartz> since I've been mostly disconnected from everything, other than building moar every day

[01:04] <TimToady> we always need fresh viewpoints

[01:05] <RandalSchwartz> make.rakudo && perl6 -e 'say "Hello, World!"

[01:05] <jdv79> I don't get why most of the stuff is in Task::Star.  

[01:07] <krshn> When I started trying out perl6 about a month back, I was able to get rakudo compiling on gcc 5.2.0 only after: export CFLAGS="-Wno-error=declaration-after-statement"

[01:07] <jdv79> JSON::RPC, Test::Mock, HTTP::Status, ufo?  most of these aren't general purpose.

[01:07] <krshn> perl Configure.pl --gen-moar --gen-nqp --backends=moar --prefix=$HOME/local/linux

[01:07] <jdv79> krshn: what os?

[01:07] <krshn> it took me a while to figure out this flag

[01:08] <krshn> Linux <host> 2.6.18-164.el5 #1 SMP Tue Aug 18 15:51:48 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux

[01:08] <dalek> rakudo/nom: 93c6c9f | TimToady++ | src/Perl6/World.nqp:

[01:08] <dalek> rakudo/nom: suppress useless use of enter_result_1

[01:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/93c6c9f0ce

[01:08] <jdv79> is it redhat 5?

[01:08] <krshn> yes

[01:09] <jdv79> i think you hit a bug i did in the confif of moar

[01:09] <jdv79> its reported but aparrently not fixed

[01:09] <jdv79> *config

[01:09] <krshn> jdv79: now is it fixed? 

[01:09] <krshn> can I try removing it and trying? 

[01:09] <jdv79> i'm not sure.  last i tried i wasn't.

[01:10] <krshn> jdv79: so it only works after this declaration? is it documented? 

[01:10] <jdv79> https://github.com/MoarVM/MoarVM/issues/277

[01:10] <jdv79> that seems like it

[01:11] <krshn> jdv79: let me try removing it 

[01:11] *** llfourn joined
[01:11] <jdv79> its likely not fixed

[01:12] <c_babbalage> So.. I have a program that does the countdown game (it's pretty simple, and only does `(.... (a + b).... op n)` forms, not `(a / b) + (c / d)` forms fwiw). It fails bizarrely:

[01:13] <c_babbalage> With `Too few positionals passed; expected 2 arguments but got 1` -- but only after the first ordering of number has been checked (it's a brute force approach, I can share code if that'll help)

[01:13] <AlexDaniel> c_babbalage: that'll help, especially if you can golf it down to something short

[01:13] <skids> c_babbalage: code would help.

[01:13] <c_babbalage> It's about 40 lines...

[01:13] <c_babbalage> :/

[01:13] <skids> Make a github gist

[01:13] <c_babbalage> I am not a golfer

[01:14] <c_babbalage> kk

[01:15] <AlexDaniel> m: my \pi = pi; say pi

[01:15] <camelia> rakudo-moar 895546: OUTPUT«(Mu)␤»

[01:16] *** kanishka joined
[01:16] <krshn> jdv79: works without the flag -- confirmed

[01:16] <c_babbalage> AlexDaniel: https://gist.github.com/hughsimpson/eca3ddfcce69e56a5c97

[01:17] <c_babbalage> Probably I just don't know how to write perl6 yet

[01:17] <c_babbalage> But the error message is LTA

[01:17] <krshn> going to try panda after TimToady update

[01:18] <AlexDaniel> c_babbalage: meh no line number

[01:19] <jdv79> krshn: its fixed?

[01:19] <jdv79> doin a pr for a one line change is kinda a pita

[01:19] <c_babbalage> AlexDaniel: Well yeah, hence all the `say`s...

[01:19] <krshn> i am able to build rakudo with setting CFLAGS 

[01:19] <c_babbalage> Not a clue where it dies

[01:19] <jdv79> ok

[01:19] <TimToady> it's just suppressing a warning

[01:19] <dalek> doc: 770c7f8 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[01:19] <dalek> doc: add TODOs for Meta Operators so it's easier to spot that documenting

[01:19] <dalek> doc: Perl 6 supports lazyness too

[01:19] <dalek> doc: review: https://github.com/perl6/doc/commit/770c7f8b80

[01:19] <dalek> doc: ded6e00 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[01:19] <dalek> doc: Merge pull request #258 from gfldex/master

[01:19] <dalek> doc: 

[01:19] <dalek> doc: add TODOs for Meta Operators so it's easier to spot that documenting Perl 6 supports lazyness too

[01:19] <dalek> doc: review: https://github.com/perl6/doc/commit/ded6e00eae

[01:19] <TimToady> won't fix the big issue

[01:19] <krshn> TimToady: ok

[01:20] <jdv79> anyone with commit on URI - https://github.com/perl6-community-modules/uri/pull/28

[01:20] <TimToady> and won't add experimental to modules that need it...

[01:20] * gfldex self.tomorrow.push('doc Meta Operators'); self.sleep;

[01:21] <krshn> logging off. thanks.

[01:21] *** cygx_ joined
[01:21] <AlexDaniel> c_babbalage: I think that it dies here: for comp(@p, %{}) -> $k, $v {

[01:21] * grondilu suddenly realises it's December 24th already

[01:21] *** ellybelly joined
[01:21] *** ellybelly_ joined
[01:22] <AlexDaniel> c_babbalage: yes, I'm pretty sure that it is what happens

[01:22] <c_babbalage> AlexDaniel: What'd I get wrong there, then?

[01:22] <krshn> great channel btw. I can't believe I stayed away for so long -- bad experience in other channels in the past. 

[01:22] <AlexDaniel> c_babbalage: not so fast! Still trying to figure out :)

[01:22] <jdv79> nite

[01:22] <c_babbalage> :)

[01:23] <cygx_> AlexDaniel: c_babbalage: if you get LTA error messages, you can try with --ll-exception to get at least a backtrace

[01:23] *** ab6tract joined
[01:24] <AlexDaniel> cygx_: yeah and get a bunch of errors in m-CORE.setting. True, sometimes it is useful

[01:24] <cygx_> at troll.p6:23

[01:24] <c_babbalage> AlexDaniel: And that does indeed nail it to the line you mentioned. Nice, thanks :)

[01:24] <c_babbalage> Learning more here every time

[01:24] <AlexDaniel> cygx_: ah!!! Indeed!!

[01:24] *** cygx left
[01:24] *** cygx_ is now known as cygx

[01:25] <skids> m: my %d = :b; for %d -> $k, $v { say "$k $v" };

[01:25] <camelia> rakudo-moar 895546: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at /tmp/IhLnHC_UnS:1␤␤»

[01:25] <skids> m: my %d = :b; for %d.kv -> $k, $v { say "$k $v" };

[01:25] <camelia> rakudo-moar 895546: OUTPUT«b True␤»

[01:25] <AlexDaniel> yeah, that's what I figured too

[01:25] <skids> That's the issue I think.

[01:25] <AlexDaniel> missing .kv

[01:26] <TimToady> well, the real issue is the missing line number

[01:26] <TimToady> unfortunately binding is very low level

[01:27] *** krshn left
[01:27] <c_babbalage> Thanks so much for the help here

[01:27] <c_babbalage> knew I wouldn't regret dropping by :)

[01:28] <TimToady> oh, it does have a line number, nm

[01:28] <skids> c_babbalage: so for %hash will send one pair from the hash each iteration, if you ask for two via "-> $k, $v" it will fail with that message if the hash had an odd number of keys. 

[01:28] <TimToady> sometimes I think the filename:line# notation is a bit too terse

[01:29] <c_babbalage> skids: Yup, that clears it all up

[01:29] <grondilu> "Really, I feel sorry for the people who are only happy when they have something to be unhappy about."  That's a great quote.

[01:29] <TimToady> not only does the line# disappear into the filename visually, it also makes it hard to copy/past the filename

[01:30] *** krshn joined
[01:30] <TimToady> does anything depend on the foofile:42 format?

[01:31] <TimToady> if not, I'd like to expand it to 'in file foofile line 42' or so

[01:31] <krshn> how does one authenticate name on freenode? 

[01:31] <AlexDaniel> krshn: /msg NickServ HELP I think

[01:32] <AlexDaniel> I'm still trying to figure out why there is no line number…

[01:33] <c_babbalage> btw, after the fix, I now have `Type check failed in binding $x; expected Rat but got Num`. Aren't I fun today? Also no line number, but again `--ll-exception` helps

[01:33] <skids> krshn: https://freenode.net/faq.shtml#userregistration

[01:33] <jdv79> why does Bailador give panda such a workout?

[01:33] *** rickbike joined
[01:34] *** thomax_ joined
[01:34] <c_babbalage> I'm aliasing `perl6 --ll-exception` to `wtf` right now

[01:34] <krshn> AlexDaniel, skids: thanks

[01:35] <c_babbalage> AlexDaniel, skids: also thanks

[01:35] <c_babbalage> but for different reasons :)

[01:36] *** thomax left
[01:36] *** thomax_ is now known as thomax

[01:38] <krshn> Colloquy (mac) is asking for username/password which is not same as nick/username

[01:38] <krshn> i mean nick/password

[01:39] <AlexDaniel> c_babbalage: ok down to 30 lines… It's so weird

[01:39] <AlexDaniel> c_babbalage: basically if you change the code at least a bit then the line number suddenly appears!

[01:40] *** Tyrubias joined
[01:40] *** Tyrubias left
[01:41] <c_babbalage> AlexDaniel: If I remove all the` .Rat`s, then the code works

[01:41] <krshn> anyone logging into irc.freenode.net using mac? need help

[01:41] <c_babbalage> I have no clue with regards the line number, I've only spent a few days looking at the rakudo github ;)

[01:41] <AlexDaniel> c_babbalage: nah I don't know about this one, trying to figure out what makes it hide the line number

[01:42] <skids> krshn: you shouldn't need a password at all.  Try leaving it blank?

[01:42] <c_babbalage> `((((3 + 4) * 12) - 8) * 7)` \o/

[01:43] <jdv79> DBIish is pretty sluggish too

[01:43] <c_babbalage> AlexDaniel: You have fixed my code, you are a wizard, please have this wheel of cheese as a token of my goodwill O

[01:44] <krshn> skids: Colloquy client needs a username/pass. not the web interface that I am on now. 

[01:44] <c_babbalage> Sorry to leave you with a bug, of course. *egress*

[01:44] *** c_babbalage left
[01:44] <krshn> I don't really care for the client. I just need one that stores history.

[01:44] *** hankache left
[01:45] <skids> krshn: well, you sure you selected IRC as the protocol?  There should be a way to do that w/o a password.

[01:45] <skids> (I don't have a mac, so...)

[01:45] *** spannerMallet joined
[01:46] *** AndyDee joined
[01:47] <AlexDaniel> 7 lines!

[01:47] <krshn> skids: any GPL client that works on mac? (sorry not much into irc before)

[01:48] <skids> krshn: pidgin maybe?

[01:48] <jdv79> i'm gettin the feelin that DBIish isn't gonna finish installing

[01:49] <spannerMallet> skids: rejoined (was c_some-sodding-babbage-typo) but srsly, I was stuck for a week . Just realised you were the one who pointed out my .kv error and I may've been insufficiently gracious. Now I will lurk and say n'more. Anyway. Thanks a bunch too.

[01:51] <skids> ◔ I already ate most of AlexDaniel's cheese :-)

[01:51] <AlexDaniel> skids: and by that you mean?

[01:52] <skids> Nothing ust being silly

[01:52] *** _nadim left
[01:54] <AlexDaniel> m: gather for %{1 => ‘a’, 2 => ‘b’, 3 => ‘c’} -> $k, $v { take “him” }

[01:54] <camelia> rakudo-moar 93c6c9: OUTPUT«===SORRY!===␤Too few positionals passed; expected 2 arguments but got 1␤»

[01:54] <AlexDaniel> here

[01:54] *** twatmonger joined
[01:55] <TimToady> oh great, I broke ENTER...

[01:55] <AlexDaniel> m: gather for (1 => ‘a’, 2 => ‘b’, 3 => ‘c’) -> $k, $v { take 1 }

[01:55] <camelia> rakudo-moar 93c6c9: OUTPUT«===SORRY!===␤Too few positionals passed; expected 2 arguments but got 1␤»

[01:55] <dalek> rakudo/nom: 7f30326 | TimToady++ | src/core/Backtrace.pm:

[01:55] <dalek> rakudo/nom: say 'line' when we mean line, not colon

[01:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f30326850

[01:55] <dalek> rakudo/nom: 6471e82 | TimToady++ | src/Perl6/World.nqp:

[01:55] <dalek> rakudo/nom: Revert "suppress useless use of enter_result_1"

[01:55] <dalek> rakudo/nom: 

[01:55] <dalek> rakudo/nom: This reverts commit 93c6c9f0ce2ac9f4d4698268c686e34a1c500239.

[01:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6471e825c6

[01:56] *** krshn left
[01:57] <TimToady> WANTED isn't visible from World, alas...how to fix

[01:57] <AlexDaniel> uhh so it seems like gather-take is eating the line number somehow

[01:58] <TimToady> huh

[01:59] <AlexDaniel> m: my %h = <1 a 2 b 3 c>; gather for %h -> $k, $v { take 1 }

[01:59] <camelia> rakudo-moar 93c6c9: OUTPUT«===SORRY!===␤Too few positionals passed; expected 2 arguments but got 1␤»

[01:59] <jdv79> so I can install Task::Star sans DBIish, LWP::Simple and JSON::RPC.  also had to use my fork of URI for the pack exper thing.

[01:59] <jdv79> and with that goodnight

[01:59] <AlexDaniel> but it's funny

[02:00] <AlexDaniel> m: my %h = <1 a>; gather for %h -> $k, $v { take 1 }

[02:00] <camelia> rakudo-moar 93c6c9: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in code  at /tmp/HKVx8GP5cC:1␤  in block <unit> at /tmp/HKVx8GP5cC:1␤␤»

[02:00] <AlexDaniel> why? Why now it has no problem finding the line number?

[02:01] <AlexDaniel> anyway, I'll just rakudobug it

[02:02] *** xpen joined
[02:06] <skids> m: gather for 1,2,3 { $^k, $^v;  take 1;}

[02:06] <camelia> rakudo-moar 93c6c9: OUTPUT«===SORRY!===␤Too few positionals passed; expected 2 arguments but got 1␤»

[02:06] <skids> m: gather for 1 { $^k, $^v;  take 1;}

[02:06] <camelia> rakudo-moar 93c6c9: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in code  at /tmp/h3cDaNSv_Q:1␤  in block <unit> at /tmp/h3cDaNSv_Q:1␤␤»

[02:07] <AlexDaniel> m: gather for 1,2,3 -> $k, $v { take 1 }

[02:07] <camelia> rakudo-moar 93c6c9: OUTPUT«===SORRY!===␤Too few positionals passed; expected 2 arguments but got 1␤»

[02:07] <AlexDaniel> oh right, that is shorter

[02:11] <ab6tract> TimToady++ / camelia++ # nice blog post!

[02:11] <dalek> rakudo/nom: 1e5c2a4 | TimToady++ | src/Perl6/World.nqp:

[02:11] <dalek> rakudo/nom: suppress enter_result warning a better way

[02:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e5c2a49ba

[02:12] <llfourn> .tell tadzik PR for your consideration https://github.com/tadzik/Shell-Command/pull/8 :)

[02:12] <yoleaux> llfourn: I'll pass your message to tadzik.

[02:13] <TimToady> m: die "phoo"

[02:13] <camelia> rakudo-moar 6471e8: OUTPUT«phoo␤  in block <unit> at /tmp/M2lPyU5Jfg line 1␤␤»

[02:14] * TimToady claims another colon, in some sense or other

[02:15] <ab6tract> m: my $z; while ++$z < 5 { $z } # i thought that this leaves a list on the stack now?

[02:15] <camelia> rakudo-moar 6471e8: OUTPUT«WARNINGS for /tmp/qD1K7aExf2:␤Useless use of $z in sink context (line 1)␤»

[02:17] <ab6tract> m: my $z; say while ++$z < 5 { $z }

[02:17] <camelia> rakudo-moar 6471e8: OUTPUT«5===SORRY!5=== Error while compiling /tmp/pVvDKpyOcH␤Unsupported use of bare "say"; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at /tmp/pVvDKpyOcH:1␤------> 3…»

[02:19] *** shmibs left
[02:19] <ab6tract> TimToady: did I misunderstand your fixes from yesterday? i thought that it would fix this: 

[02:19] *** shmibs joined
[02:19] <ab6tract> m: sub f($x) { my $z; while ++$z < $x { $z }; say f(5)

[02:19] <camelia> rakudo-moar 6471e8: OUTPUT«5===SORRY!5=== Error while compiling /tmp/pa7WNLbPTI␤Missing block (taken by some undeclared routine?)␤at /tmp/pa7WNLbPTI:1␤------> 3 my $z; while ++$z < $x { $z }; say f(5)7⏏5<EOL>␤    expecting any of:␤        postfix␤        statem…»

[02:19] *** twatmonger left
[02:19] <ab6tract> m: sub f($x) { my $z; while ++$z < $x { $z } }; say f(5)

[02:19] <camelia> rakudo-moar 6471e8: OUTPUT«WARNINGS for /tmp/Bh1vER8cM3:␤Useless use of $z in sink context (line 1)␤sub infix:«<» (Mu $?, Mu $?) { #`(Sub+{<anon|58275344>}|57596376) ... }␤»

[02:20] *** CasketBase joined
[02:23] <TimToady> while at statementlist level is never wanted, you have to use parens

[02:23] <TimToady> m: sub f($x) { my $z; (while ++$z < $x { $z }) }; say f(5)

[02:23] <camelia> rakudo-moar 6471e8: OUTPUT«Cannot call prefix:<++>(Any); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num $a is rw)␤  in block <uni…»

[02:23] <TimToady> er, hmm

[02:23] <TimToady> that's...odd...

[02:24] <TimToady> m: sub f($x) { (while ++(my $z) < $x { $z }) }; say f(5)

[02:24] <camelia> rakudo-moar 6471e8: OUTPUT«Cannot call prefix:<++>(Any); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num $a is rw)␤  in block <uni…»

[02:24] <ab6tract> TimToady: i get () as the return value locally.. that almost looks like a autoviv bug??

[02:24] <TimToady> m: sub f($x) { my $z; do while ++$z < $x { $z } }; say f(5)

[02:24] <camelia> rakudo-moar 6471e8: OUTPUT«Cannot call prefix:<++>(Any); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num $a is rw)␤  in block <uni…»

[02:25] <TimToady> something's not right there

[02:25] <AlexDaniel> oh wow, these bug reports by zefram are awesome

[02:25] <TimToady> yeah, he's good

[02:25] *** FROGGS_ joined
[02:26] <TimToady> m: sub f($x) { my $z; do $z while ++$z < $x }; say f(5)

[02:26] <camelia> rakudo-moar 6471e8: OUTPUT«Cannot call prefix:<++>(Any); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num $a is rw)␤  in block <uni…»

[02:26] <ab6tract> m: ++(my $f)

[02:26] <camelia> rakudo-moar 6471e8: ( no output )

[02:26] <TimToady> m: sub f($x) { my $z; return do $z while ++$z < $x }; say f(5)

[02:26] <camelia> rakudo-moar 6471e8: OUTPUT«(5 5 5 5)␤»

[02:26] *** cpage_ left
[02:27] <TimToady> m: sub f($x) { my $z; return (while ++$z < $x { $z }) }; say f(5)

[02:27] <camelia> rakudo-moar 6471e8: OUTPUT«(5 5 5 5)␤»

[02:27] <ab6tract> interesting and bizarre :)

[02:27] <TimToady> works with explicit return, anyway

[02:27] <TimToady> so at least there's a workaround

[02:27] <ab6tract> indeed!

[02:27] <diakopter> m: sub f($x) { my $z; Nil while ++$z < $x }; say f(5)

[02:27] <camelia> rakudo-moar 6471e8: OUTPUT«sub infix:«<» (Mu $?, Mu $?) { #`(Sub+{<anon|58275344>}|77085112) ... }␤»

[02:28] <diakopter> ahh precedence

[02:28] <ab6tract> i have to admit that most times i get into golfing bugs, it's for cases that may never be useful :)

[02:28] <TimToady> well, that's just what happens to be sitting on the stack, I suspect

[02:28] <ab6tract> TimToady: shall I rakudobug?

[02:29] <TimToady> sure, we can decide if it's blocking later

[02:29] <TimToady> prolly not though

[02:29] <diakopter> m: sub f($x) { my $z; Nil while ++$z < $x }; say f(5)(4)

[02:29] <camelia> rakudo-moar 6471e8: OUTPUT«True␤»

[02:29] <TimToady> cute...that probably should not leak

[02:29] *** FROGGS left
[02:30] <diakopter> the sub is returning a sub

[02:30] <TimToady> kinda sorta by accident

[02:31] <TimToady> I can think of a way to fix that, which might or might not be the best way

[02:32] *** Su-Shee_ joined
[02:32] <AlexDaniel> “Sent by the Internet” woo! Marketing!!

[02:33] *** CasketBase left
[02:34] <diakopter> my signature is Sent by an Internet

[02:34] <ab6tract> also, that's a super interesting thunk form! 'do $z while ++$z < $x' 

[02:34] *** shmibs left
[02:34] <ab6tract> took me a minute to grok that

[02:34] <diakopter> it's not supposed to be

[02:34] *** shmibs joined
[02:35] <diakopter> until TimToady makes it work out with a few hundred cavitations

[02:35] *** Su-Shee left
[02:35] <diakopter> excavitations

[02:36] <ab6tract> diakopter: sorry, what?

[02:36] <diakopter> don't mind my loose association drivel. but it's not supposed to be a thunk

[02:37] <ab6tract> why is that not supposed to be a thunk?

[02:38] <diakopter> bc t's the statement form of do

[02:38] <diakopter> it's

[02:38] <TimToady> testing a patch for that bit of it

[02:38] <TimToady> well, compiling, then testing :)

[02:39] <diakopter> it's supposed to mean the same as $z while ++$z < $x, except the do emphasizes the immediate evaluation??

[02:40] <TimToady> do takes it out of statementlist context, which allows it to return a list value

[02:40] <ab6tract> ah, ok i think i'm starting to get it..

[02:40] <TimToady> at statementlist level it's always self-sinking

[02:41] <TimToady> and should return Nil

[02:41] <TimToady> patch dint werk, thinking

[02:42] <diakopter> we need proofs, not tests or uncertain fixes <- this is my new(ish) lifelong refrain

[02:42] <TimToady> could have something to do with botching the patch...

[02:44] <diakopter> TIL that livestream lost my password to a hack, and Hyatt hotels lost my payment card to "all our payment computers had/have malware"

[02:45] *** ilbot3 left
[02:45] *** ab6tract left
[02:45] <skids> m: start { sleep 3; "TO".say; exit }; sub f { ( loop { last if $++ > 3; 42; } ) }; f().perl.say;

[02:45] <camelia> rakudo-moar 1e5c2a: OUTPUT«TO␤»

[02:47] *** rurban left
[02:48] *** ab6tract joined
[02:48] <dpk> p6: say "happy birthday to me, happy birthday to me, happy birthday Perl 6, happy birthday to me"

[02:48] <camelia> rakudo-moar 1e5c2a: OUTPUT«happy birthday to me, happy birthday to me, happy birthday Perl 6, happy birthday to me␤»

[02:49] *** ilbot3 joined
[02:49] <ab6tract> i read that as a thunk-ing version of do { $z } while ++$z < 5 ...

[02:49] <diakopter> I actually suspect it's a parsing problem

[02:50] <diakopter> (the error about ++ not accepting candidates)

[02:50] <ab6tract> so i guess i'm still confused about why it's wrong, when thunking has been explained to be as auto-bracketing

[02:50] <ab6tract> but i can wait for the Butterfly Book to fully grok statementlist ;)

[02:51] * ab6tract is glad that no one is pushing the 'but camelia is actually a moth' position :)

[02:51] *** krshn joined
[02:51] *** orange_ joined
[02:53] *** krshn_ joined
[02:53] *** PoopyShoes joined
[02:53] <orange_> what's the latest news about Perl6

[02:54] <PoopyShoes> m: "5".Rat.FatRat

[02:54] <camelia> rakudo-moar 1e5c2a: ( no output )

[02:54] *** krshn_ left
[02:54] <PoopyShoes> m: say "5".Rat.FatRat

[02:54] <camelia> rakudo-moar 1e5c2a: OUTPUT«5␤»

[02:54] <PoopyShoes> m: say "5".FatRat

[02:54] <camelia> rakudo-moar 1e5c2a: OUTPUT«Method 'FatRat' not found for invocant of class 'Str'␤  in block <unit> at /tmp/VClNcqsU7r line 1␤␤»

[02:54] <TimToady> the ++ problem is likely having to do with sneaking an extra scope in there

[02:55] <ab6tract> TimToady: fwiw, the ++ issue doesn't happen locally with a rakudo i just built an hour ago..

[02:55] <PoopyShoes> is the above a bug guys? Why do I have to .Rat my Str before I can fatten it?

[02:56] <PoopyShoes> 's almost like some implicit conversion would be fun here....

[02:56] <skids> orange_: https://p6weekly.wordpress.com/2015/12/22/2015-52-closer-and-closer-to-the-release/

[02:57] <ab6tract> PoopyShoes: looks like there is no coercion to FatRat implemented in Str 

[02:57] <PoopyShoes> ab6tract: looks precisely like that, I'm just wondering why I have to go round the houses here

[02:57] <ab6tract> no reason for implicit anything... it's just a question of whether Str has a method FatRat { ... }

[02:58] <PoopyShoes> Implicit something would belie baving to implement the coercion on a crossproduct basis, though...

[02:58] <PoopyShoes> *baving == having

[02:58] <PoopyShoes> IDK how rakudo works, sorry

[02:59] <PoopyShoes> skids: Great.  Now I'm going to be reading blogs on perl6 for the next half hour. I hope you're happy.

[03:00] <PoopyShoes> I am :)

[03:00] *** labster left
[03:01] <skids> have fun :-)

[03:03] <ab6tract> PoopyShoes: https://perl6advent.wordpress.com/2014/12/04/composers-coercers-and-the-case-of-a-camels-curious-corner/

[03:03] *** Guest54696 left
[03:03] <ab6tract> it's a bit ramble-y but hopefully that will help get the hang of coercion in perl 6

[03:04] <ab6tract> m: use MONKEY-TYPING; augment class Str { method FatRat { self.Rat.FatRat } }; say "5".FatRat

[03:04] <camelia> rakudo-moar 1e5c2a: OUTPUT«5␤»

[03:04] <TimToady> FatRats are a little dangerous, and contagious, so we try not to let people get them by accident, but maybe this is a valid coercion, since it's explicit

[03:05] *** labster joined
[03:05] <thomax> why are they dangerous?

[03:05] <TimToady> m: say "5" + 0.FatRat

[03:05] <camelia> rakudo-moar 1e5c2a: OUTPUT«5␤»

[03:06] *** krshn left
[03:06] <TimToady> because they can slow down exponentially if you're not careful

[03:06] <thomax> ok.

[03:06] <TimToady> why we limit Rat denominators to 64 bits

[03:06] <diakopter> I've always wondered why unmatched parens aren't okay

[03:06] <thomax> i thought they could bite me in my..

[03:07] <TimToady> they'll just bite your ankles, hang on, and slow you down

[03:07] <AlexDaniel> TimToady: is it 64 bits on 32-bit system as well?

[03:08] <diakopter> why not let them imply a matching one at the beginning/end of the input (or just after/before the last one of that spin)

[03:08] <TimToady> yes

[03:09] <TimToady> diakopter: redundancy is good

[03:09] <diakopter> (say 55).say) # basically it eliminates any doubled/tripled parens ever

[03:09] <ab6tract> diakopter: wow. auto-matching parens? even perl has never been so insane as to help out with that

[03:09] <thomax> i hope p6 didn;t overdone the operator / syntax shuffle. << is now +<, ?: is now ??||, for is now loop, etc

[03:10] <ab6tract> thomax: for is not loop, only the why-would-you-ever-use-it C version is

[03:10] <TimToady> oh, we overdid it on purpose :)

[03:10] <diakopter> say 55).say

[03:11] <diakopter> I hate doubled up parens when the count can just be implied anyway

[03:11] <TimToady> now, even there it's ambiguous

[03:11] <TimToady> *no

[03:11] <uruwi> The TI-83+ does that.

[03:11] <cxreg> thomax: ??!! btw, not ??||

[03:11] <TimToady> though the effect comes out the same in this case

[03:12] <diakopter> why, just make it match as far back as possible

[03:12] <cygx> thomax: I've actually started to like ?? !! better than ? :

[03:12] <thomax> what does the book publisher think about the 6.c release?

[03:13] <cygx> curse you, perl6 - now my Perl5 and C coding 'feels' wrong!

[03:13] <uruwi> Well, someone could create a slang that autocloses parens.

[03:13] <diakopter> autocloses and opens

[03:13] *** ab6tract_ joined
[03:14] <diakopter> but yes, it would admittedly be much easier to imagine such an implmentation in the Perl 6 grammar

[03:14] <uruwi> Auto-opening... now even the TI-83+ doesn't do that!

[03:14] *** risou is now known as risou_awy

[03:14] *** risou_awy is now known as risou

[03:14] *** ab6tract left
[03:15] <skids> braces too?

[03:15] <uruwi> Probably

[03:16] <skids> well then "as far back as possible" is always the beginning of the compunit.

[03:16] <diakopter> or the previous opener

[03:17] <diakopter> XD

[03:18] *** ab6tract_ left
[03:18] * cxreg tries http://exercism.io/languages/perl6

[03:19] <TimToady> testing new patch over dinner...well, not *over* dinner...

[03:19] <TimToady> well, I guess the computer is upstairs to dinner, so maybe it is...

[03:19] <TimToady> afk &

[03:19] *** krshn joined
[03:20] *** noganex_ joined
[03:20] *** kid51 left
[03:21] * thomax hopes that epic, the eclipse plugin, will release a epic6 soon

[03:23] *** noganex left
[03:24] <PoopyShoes> Is there much scope for a FatRat with a particular precision? I'm thinking something like clojure's `(with-precision 10 (/ 1M 6))` --- which gives `0.1666666667M`

[03:25] <PoopyShoes> I'm sure it's implementable _within_ the framework of perl6, but it might be frustratingly slow... oh I don't know, I'm going back to flam people who didn't like the new Star Wars

[03:26] <skids> PoopyShoes: custom types are certainly possible, even MoarVM can be extended if someone wanted to go that deep.

[03:26] <krshn> Are there any Perl6 related talks scheduled for the upcoming year that we can look forward to ? 

[03:26] <thomax> PoopyShoes: i don't know anything about the new star wars. but i think i could hate it.

[03:26] <PoopyShoes> skids: It's beginning to sound like my family won't see much of me over Christmas. I'll explore that possibility. Ta

[03:27] <PoopyShoes> thomax: You might, but only if you meant to

[03:28] *** orange_ left
[03:28] <AlexDaniel> krshn: what about watching existing ones? :)

[03:32] <krshn> Finished most of them :-)

[03:33] *** atweiden left
[03:33] <thomax> junkie

[03:34] <krshn> Now.. but need to start writing more code in perl6. For some reason, perl5 has become so second nature, and because I am lazy ;)

[03:35] <krshn> Exaggerated when I said I saw most of them.. I saw a few of them but unless I actually coded more in perl6, I found it hard to follow may talks by jnthn for ex

[03:36] <PoopyShoes> krshm: perl5 is crazy and if it is second nature to you you are a crazy person ;) But you should look at scala. I've been learning perl6 by translating little scripts from one to the other. They're almost perfect analogues until you start getting into their 'killer features'.

[03:37] <krshn> but today, I have resolved to finish going through perl6intro

[03:38] <krshn> I have hard a lot about Scala -- also finished seeing this video: https://www.youtube.com/watch?v=LH75sJAR0hc

[03:40] <krshn> But I have my heart set on perl6, esp. because I love perl so much.

[03:40] <PoopyShoes> Yeah, I use scala every day, but I've already introduced one tiny text munging perl6 into the utils set, and want to add more :)

[03:41] <PoopyShoes> they're very similar, though

[03:41] <PoopyShoes> until you really need one or the other

[03:41] <dalek> rakudo/nom: eea4cb0 | TimToady++ | src/ (2 files):

[03:41] <dalek> rakudo/nom: more s/:/ line /

[03:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eea4cb0ad0

[03:41] <dalek> rakudo/nom: e34842f | TimToady++ | src/Perl6/Actions.nqp:

[03:41] <dalek> rakudo/nom: suppress accidental return of final loop

[03:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e34842fedb

[03:41] <PoopyShoes> hence using perl for text

[03:41] <krshn> PoopyShoes: cool

[03:42] <thomax> i just hope the industry will adopt p6, so that all the efforts in developing p6 will  be justified

[03:42] <PoopyShoes> I fully intend to secretly use it on my machine as much as possible. When things need to be shared -- oh, sorry, you'll just have to get used to p6

[03:42] <krshn> I somehow feel scientific computing will be perl6 calling card

[03:43] <AlexDaniel> thomax: I don't really care about this one

[03:43] <PoopyShoes> All the power of J, but not crap

[03:43] <AlexDaniel> thomax: Perl 6 is already extremely useful to me

[03:44] <PoopyShoes> AlexDaniel: What do you mainly use it for?

[03:44] <PoopyShoes> Or is that blogged already

[03:44] <krshn> atleast it is my secret wish ;-). then I can do away with coding in anything else

[03:45] <TimToady> me too, though that's not so secret :)

[03:45] <PoopyShoes> krshm: You'll need the performance wins before it becomes legit for those high-end tasks, though

[03:45] <krshn> TimToady: lol

[03:45] <PoopyShoes> I'm guestimating 2 years

[03:46] <AlexDaniel> PoopyShoes: small projects, throw-away scripts, tests for C code that I'm writing (using NativeCall). Stuff like that

[03:46] <PoopyShoes> Great for anything one off task that takes under a few minutes, though!

[03:46] <PoopyShoes> huh

[03:47] <PoopyShoes> AlexDaniel: never thought of writing tests _in_ it

[03:47] <PoopyShoes> probably because I still suck at p6

[03:47] <AlexDaniel> PoopyShoes: also whenever somebody asks me “how can I write code that does X” I just show them an example in Perl 6 and let them figure out how to do that in their language.

[03:47] <PoopyShoes> but that's a thought right there

[03:47] <AlexDaniel> PoopyShoes: it happens to be shorter than pseudo-code so…

[03:48] <PoopyShoes> AlexDaniel: I was trying to do that a few days ago with the countdown code :) Ended up doing it in scala because of that bug I couldn't find

[03:48] <PoopyShoes> (Yeah, sorry, haven't settled on a handle yet)

[03:48] <PoopyShoes> (This is my second outing here and I'm drunk anyway)(

[03:49] <krshn> PoopyShoes: today is my first :-). 

[03:49] <PoopyShoes> krshm: high five

[03:49] <PoopyShoes> krshn: high five (with more accuracy)

[03:49] <krshn> cheers

[03:50] <mspo> I'd like to see something like erlang's ranch + cowboy start to show up

[03:51] <TimToady> m: sub f($x) { my $z; while ++$z < $x { say "hi" } }; say f(5)

[03:51] <camelia> rakudo-moar 1e5c2a: OUTPUT«hi␤hi␤hi␤hi␤sub infix:«<» (Mu $?, Mu $?) { #`(Sub+{<anon|63105296>}|47520344) ... }␤»

[03:51] <TimToady> m: sub f($x) { my $z; while ++$z < $x { say "hi" } }; say f(5)

[03:51] <camelia> rakudo-moar e34842: OUTPUT«hi␤hi␤hi␤hi␤Nil␤»

[03:51] <TimToady> better

[03:51] <TimToady> now to see if I can do something about that ++ mess

[03:52] <krshn> why does the REPL in perl6 suck so bad? even sqlite3 has better REPL

[03:52] <AlexDaniel> m: my \pi = pi; say pi # by the way, what is happening here?

[03:52] <camelia> rakudo-moar e34842: OUTPUT«(Mu)␤»

[03:52] <TEttinger> what's different between those two lines, TimToady?

[03:52] <TimToady> it's better than perl5's, but that's not sayin' much

[03:52] <AlexDaniel> krshn: have you tried linenoise?

[03:52] <TimToady> TEttinger: nothing :)

[03:52] <TEttinger> wow, last second bugfixes ftw

[03:52] <TimToady> actually, if you look carefully, you'll see it's running a different version

[03:53] <TEttinger> ah yeah

[03:53] <PoopyShoes> AlexDaniel: I have the same complaint. What's linenoise?

[03:53] <TimToady> and I know just about how long a recompile takes, which makes it easy to do before/after

[03:53] <TimToady> it's a readline clone-ish

[03:54] <AlexDaniel> PoopyShoes, krshn: http://modules.perl6.org/#q=noise

[03:54] <TimToady> panda install Linenoise

[03:54] <TimToady> or use rlwrap

[03:54] <TimToady> I'm not sure any of them handles Unicode right, though

[03:55] <krshn> I just did on mac on top of rakudo 2015.11. I use vim key bindings and non of them work

[03:55] <krshn> when I try ctrl-p, it does not work 

[03:55] <krshn> sqlite3 handles them perfectly :-(

[03:56] <krshn> I should probably try on my linux with latest perl6/moar/panda

[03:56] <PoopyShoes> TimToady: IDK if this is inappropriate querying for IRC, but are you the real Larry Wall Timtowtd? Just, y'know, to confirm that this whole channel is a beautiful dream

[03:57] <krshn> I was gushing like a teenager a little while back for the same reason :-)

[03:57] <cygx> krshn: what about `rlwrap perl6`?

[03:57] <krshn> cygx: i have not tried it yet

[03:57] <krshn> will do now

[03:58] <TimToady> PoopyShoes: I would shoot myself if I were not the real me.

[04:00] <AlexDaniel> PoopyShoes: yes, we would shoot him if he is not real

[04:01] *** zengargoyle left
[04:02] <mspo> but how can you ever know which one is real?

[04:03] <TimToady> well, usually they're all me

[04:03] *** RandalSchwartz left
[04:03] <PoopyShoes> *swoons*

[04:04] <krshn> cygx, TimToady: rlwarp is perfect. Thanks

[04:05] <krshn> works perfectly with vim command line bindings

[04:06] *** zengargoyle joined
[04:08] <PoopyShoes> krshn: I tried to 'PM' you... did you get that? If you -- like me -- are using a browser, there may be an extra tab ?

[04:09] <PoopyShoes> But, like, under the real tabs. IRC is too hardcore for me

[04:10] <AlexDaniel> m: enum Animal (Cat => 2005, Dog => 3, Mouse => 25); my $x = Date.new(Cat, Dog, Mouse); say "{$x.year}-{$x.month}-{$x.day}"

[04:10] <camelia> rakudo-moar e34842: OUTPUT«Cat-3-25␤»

[04:10] *** joydong joined
[04:10] <AlexDaniel> damn, on my machine that's Cat-Dog-Mouse

[04:11] <AlexDaniel> but damn, that's very clever. Zefram++

[04:11] <cygx> 'night o/

[04:12] *** raiph left
[04:12] *** cygx left
[04:14] *** rurban joined
[04:14] *** rurban left
[04:15] *** telex left
[04:17] *** raiph joined
[04:19] *** telex joined
[04:21] <cxreg> if I accidentally declare class Foo when I've previously said "unit module Foo;" then Foo.can("bar") errors with Too many positionals passed; expected 2 arguments but got 3

[04:22] <cxreg> could be more helpful

[04:22] *** yqt left
[04:23] <AlexDaniel> cxreg: consider submitting rakudobug :)

[04:24] *** spannerMallet left
[04:24] <cxreg> not sure what the right thing would be?

[04:24] <cxreg> disallowing the class Foo ?

[04:24] <cxreg> fixing .can?

[04:25] <AlexDaniel> cxreg: list a couple of possible solutions then :)

[04:25] <skids> m: unit module Foo; class Foo { method bar { }}; Foo.can("bar").say

[04:25] <camelia> rakudo-moar e34842: OUTPUT«(bar)␤»

[04:25] <cxreg> actually it happens for any "unit module".  will look at submitting

[04:26] <AlexDaniel> m: unit module Foo; class Foo { }; Foo.can("bar").say

[04:26] <camelia> rakudo-moar e34842: OUTPUT«()␤»

[04:27] <cxreg> ... ?  hrm.

[04:27] <skids> what version rakudo?

[04:28] <AlexDaniel> cxreg: yeah, I usually try the golfed down code on camelia just in case :)

[04:28] <cxreg> 1e5c2a4

[04:28] <skids> oh so pretty much bleeding edge.

[04:29] <cxreg> just built it

[04:29] <cxreg> camelia is 2 commits ahead

[04:30] <cxreg> i'm gonna try scrapping all of brew, maybe i have something nasty

[04:35] <cxreg> i wonder if github suports git repack.  the repos are getting painful to clone

[04:36] *** PoopyShoes left
[04:39] *** krshn left
[04:48] <[Coke]> (bugfixes) those are ok, but they need passing tests in roast.

[04:48] <[Coke]> and probably eyes from one other committer.

[04:49] *** kanishka left
[04:50] *** ttflee joined
[04:56] <[Coke]> (star release) has anyone signed up to do the star release, or am I implicitly on the hook for that?

[04:58] <cxreg> AlexDaniel: so it repros from file but not with -e

[04:58] <cxreg> o.O

[04:59] <skids> Hrm I can't repro from file.

[05:00] <cxreg> https://gist.github.com/cxreg/ded31eeedf2d021c15d2

[05:01] <skids> Oh  the .can from another compunit OK.

[05:01] <cxreg> but it happens even if i remove the class

[05:03] * [Coke] catchs up and sees he is not on the hook for R*.

[05:04] <cxreg> skids: i discovered this trying to go through the exercism perl6 set

[05:04] <skids> m: unit module Foo; Foo.can("bar").say

[05:04] <camelia> rakudo-moar e34842: OUTPUT«Too many positionals passed; expected 2 arguments but got 3␤  in block <unit> at /tmp/CZGBnLKJ1h line 1␤␤»

[05:05] <skids> Which is probaby related to:

[05:05] <cxreg> ah there we go

[05:05] <skids> m: unit module Foo; Foo.HOW.WHAT.say;

[05:05] <camelia> rakudo-moar e34842: OUTPUT«(ModuleHOW)␤»

[05:06] *** ttflee left
[05:06] <skids> m: unit module Foo; Foo.HOW.WHAT.say; class Foo { }; Foo.HOW.WHAT.say;

[05:06] <camelia> rakudo-moar e34842: OUTPUT«(ModuleHOW)␤(ClassHOW)␤»

[05:07] <cxreg> and the fact that that "shadowing" acts differently across compunits?  not sure if even doing so should be allowed

[05:07] *** muraiki left
[05:11] *** krshn joined
[05:13] <skids> cxreg: I think it is actually correct behavior, just an LTA error.

[05:13] <skids> When you do "unit module Foo; class Foo { }" you are defining class Foo::Foo.

[05:15] <cxreg> oh, and in the other unit (outside of that lexical scope) Foo is the module but inside it becomes the class?

[05:15] <cxreg> ok that appears correct

[05:16] <skids> Right, but a module should probably have a better response to .can and such than "not enough args"

[05:17] <cxreg> hilariously, if you pass no args it says too few

[05:17] <skids> m: unit module Foo; Foo.^find_method("can").candidates».signature.say

[05:17] <camelia> rakudo-moar e34842: OUTPUT«((Mu \SELF: $name, *%_))␤»

[05:18] <skids> m: unit module Foo; Foo.can(Foo,"bar").say;

[05:18] <camelia> rakudo-moar e34842: OUTPUT«Too many positionals passed; expected 2 arguments but got 3␤  in block <unit> at /tmp/7oQB6CzE42 line 1␤␤»

[05:23] *** AndyDee left
[05:24] <skids> Ah, it's because ^can a.k.a. ModuleHOW.can defaults back to Mu's .can, where HOW methods get passed HOW,obj,<args>

[05:24] *** molaf joined
[05:24] <skids> But Mu's non-introspective form just wants obj,<args>

[05:32] <cxreg> skids++

[05:33] *** raiph left
[05:34] <skids> m: unit package Foo; Foo.can(Foo,"bar").say;

[05:34] <camelia> rakudo-moar e34842: OUTPUT«Too many positionals passed; expected 2 arguments but got 3␤  in block <unit> at /tmp/yJ8HQrnpRQ line 1␤␤»

[05:35] <skids> m: Str(Any).can("foo")

[05:35] <camelia> rakudo-moar e34842: OUTPUT«Method 'can' not found for invocant of class 'Perl6::Metamodel::CoercionHOW'␤  in block <unit> at /tmp/mbrRcP_CwR line 1␤␤»

[05:36] <skids> That does not inherit .can from Mu apparently

[05:38] <skids> m: (subset Foo of Str).can("foo").say

[05:38] <camelia> rakudo-moar e34842: OUTPUT«Too many positionals passed; expected 2 arguments but got 3␤  in block <unit> at /tmp/cOaqEq0HCQ line 1␤␤»

[05:41] *** felher left
[05:44] <[Coke]> t/spec/S32-array/adverbs.t failing test 21 for anyone else?

[05:44] <[Coke]> t/spec/S17-procasync/stress.t is dying.

[05:46] <[Coke]> t/spec/S32-io/IO-Socket-Async.t also dying

[05:46] <[Coke]> (even when run individually)

[05:46] *** labster left
[05:51] *** mohae left
[05:57] *** vendethiel joined
[05:57] <skids> [Coke] yesterday I remember adverbs fails on both array and hash IIRC

[05:57] <ugexe> did ranguard take license into consideration for the distributions he chose to upload to pause? should a 3rd party upload another authors unlicensed work to pause?

[05:58] <ugexe> s/unlicensed/no explicit license/

[06:02] <skids> cxreg: RT#127018

[06:03] <skids> https://rt.perl.org/SelfService/Display.html?id=127018 # synopsenonbot

[06:08] <AlexDaniel> .tell Skarsnik have you tried getting “timestamp”s from some table? Today I noticed that ｢.allrows｣ gives me “Any” instead of some meaningful timestamp

[06:08] <yoleaux> AlexDaniel: I'll pass your message to Skarsnik.

[06:10] <AlexDaniel> .tell Skarsnik that's on postgresql though

[06:10] <yoleaux> AlexDaniel: I'll pass your message to Skarsnik.

[06:10] <autarch> TimToady: I like your advent post

[06:10] *** regreg joined
[06:13] <tmw1> What's the best book for learning perl6 these days? Have a pretty good knowledge of 5, but not much OO experience

[06:14] *** geraud left
[06:14] <AlexDaniel> tmw1: no good enough book yet, I'm afraid

[06:15] <AlexDaniel> tmw1: though there are many other interesting resources

[06:15] <tmw1> that's a shame, I like a good book. What resources do you recommend?

[06:15] <AlexDaniel> tmw1: like http://doc.perl6.org/ or rosettacode or https://perl6advent.wordpress.com/

[06:16] <AlexDaniel> tmw1: though that's not what you wanted, I think

[06:16] <tmw1> thanks

[06:16] *** regreg left
[06:17] <AlexDaniel> tmw1: still, for example advent posts are very interesting to read and you learn about perl 6 itself

[06:17] <tmw1> yeah, I guess I'll have to take what I can get 

[06:18] *** regreg joined
[06:18] <AlexDaniel> tmw1: and on doc.perl6 there is this section: http://doc.perl6.org/language.html

[06:18] <AlexDaniel> tmw1: which is more structured, you might like it

[06:18] <tmw1> yeah, I think this will work, thanks

[06:18] <tmw1> maybe one day we'll get a new camel book

[06:18] <AlexDaniel> sure!

[06:19] *** xinming left
[06:20] *** vendethiel left
[06:20] <AlexDaniel> I think that there were attempts to write a book, but I don't think that those had any chance to succeed. Perl 6 was evolving quite fast before this Christmas, perhaps we will see less revolutionary changes next year, thus there will be a chance to write a book :)

[06:20] <tmw1> that makes sense

[06:21] <AlexDaniel> another thing is that we don't know yet how idiomatic Perl 6 will look like

[06:21] <awwaiid> tmw1: also, as you learn and find holes in doc.perl6.org, please file issues (or PRs). There are tons of holes, but having a TODO list is great

[06:22] <tmw1> will do!

[06:23] <AlexDaniel> tmw1++

[06:25] <awwaiid> I just discovered that `MAIN` isn't documented well on doc.perl6.org, for example, and so opened up an issue https://github.com/perl6/doc/issues/259 so I don't forget to do it

[06:27] *** regreg left
[06:30] *** Su-Shee_ is now known as Su-Shee

[06:30] *** kaare_ joined
[06:30] *** labster joined
[06:32] *** cpage_ joined
[06:32] *** cpage_ left
[06:32] <AlexDaniel> .tell Skarsnik Adding ｢1114  => 'Str',   # timestamp｣ to ｢lib/DBDish/Pg/Native.pm6｣ seems to solve the problem temporarily, but I don't think that it is right. Do you have any ideas how to make it better?

[06:32] <yoleaux> AlexDaniel: I'll pass your message to Skarsnik.

[06:32] *** cpage_ joined
[06:37] <AlexDaniel> .tell Skarsnik ah… OK, I open a new issue: https://github.com/perl6/DBIish/issues/41

[06:37] <yoleaux> AlexDaniel: I'll pass your message to Skarsnik.

[06:40] *** labster left
[06:45] *** skids left
[06:46] *** pierre-vigier joined
[06:54] <[Tux]> test             50000    23.661    23.549

[06:54] <[Tux]> test-t           50000    13.903    13.791

[06:54] <[Tux]> csv-parser       50000    50.787    50.675

[07:05] <[Tux]> https://www.facebook.com/419562134853848/photos/a.422241747919220.1073741828.419562134853848/804117353064989/?type=3&theater => https://scontent.xx.fbcdn.net/hphotos-xpa1/v/t1.0-9/12342531_804117353064989_830667485189581894_n.jpg?oh=8afabf05d0ef3c7c1e1dc1388a07b58d&oe=56DA2930

[07:11] <dalek> doc/phasers: 243908a | (Brock Wilcox)++ | doc/Language/phasers.pod:

[07:11] <dalek> doc/phasers: Further refinement of Phasers doc, maybe even useable

[07:11] <dalek> doc/phasers: review: https://github.com/perl6/doc/commit/243908a02c

[07:13] *** _nadim joined
[07:14] *** rickbike left
[07:16] <awwaiid> Someone might have said this before, but I feel like a lot of reference docs should live more alongside roast. Maybe I'll someday look into at least doing cross-checks for doc coverage

[07:23] <dalek> doc/phasers: 118835a | (Brock Wilcox)++ | doc/Language/phasers.pod:

[07:23] <dalek> doc/phasers: Modify subtitle a bit

[07:23] <dalek> doc/phasers: review: https://github.com/perl6/doc/commit/118835a87d

[07:25] <krshn> tmw1: Try http://perl6intro.com/. I asked the same question earlier today and was referred to this one. I am going through it as we chat. 

[07:26] <dalek> doc: 26e5b69 | (Brock Wilcox)++ | Makefile:

[07:26] <dalek> doc: Add make clean target based on gitignore

[07:26] <dalek> doc: review: https://github.com/perl6/doc/commit/26e5b69777

[07:30] *** cognominal joined
[07:30] *** krshn left
[07:31] *** regreg joined
[07:31] *** krshn joined
[07:32] *** harrison_ joined
[07:32] *** darutoko joined
[07:37] *** harrison_ left
[07:39] *** Stallker2003 joined
[07:40] *** Stallker2003 left
[07:41] *** jscripter joined
[07:42] *** jscripter left
[07:44] *** CIAvash joined
[07:44] *** fitz joined
[07:47] *** Fritz joined
[07:47] *** RabidGravy joined
[07:47] *** Fritz is now known as Guest4076

[07:47] *** Guest4076 left
[07:51] <awwaiid> Enough doc-ticket-smashing for tonight I guess.

[07:51] * awwaiid is getting psyched

[07:52] *** xtreak joined
[07:53] *** hankache joined
[07:53] <krshn> perl6intro mentions 3 naming conventions. The Kebab case seems very interesting. Never seen it before.

[07:53] <xtreak> Posted Larry's announcement to r/programming :)

[07:55] <AlexDaniel> krshn: yeah, well. A lot of programming languages don't allow dashes, that's probably why

[07:56] <AlexDaniel> m: my $what-about'quote'case = 5

[07:56] <camelia> rakudo-moar e34842: ( no output )

[07:56] <hankache> hello #perl6

[07:56] * hankache looks for his glasses

[07:56] <krshn> AlexDaniel: Is it very popular in perl6 community? I have not read much perl6 code yet.

[07:56] <AlexDaniel> krshn: definitely not rare

[07:56] <hankache> krshn yes kebab case is popular in Perl 6 community

[07:57] *** znpy left
[07:59] *** Actualeyes left
[08:00] <Su-Shee> good morning. when is official release hour? ;)

[08:02] <AlexDaniel> Eh! Wrote an email to debian maintainer of “rakudo” package and received an answer “next week or so”. Well, better next week than next year, right?

[08:03] <AlexDaniel> looking at the calendar… next week is also possibly next year :/

[08:04] <hankache> AlexDaniel next week is next year :)

[08:04] <AlexDaniel> hankache: only one half of it

[08:05] <krshn> How does perl6 calcuate 3 ** 19999 ? perl gives inf

[08:06] <AlexDaniel> krshn: well, Perl 6 has Rats

[08:06] <awwaiid> very carefully

[08:07] <AlexDaniel> krshn: instead of typical floating-point stuff

[08:07] <awwaiid> m: say 3 ** 19999

[08:07] <camelia> rakudo-moar e34842: OUTPUT«8871011424058065973260672374154714571421010996467885015115710929898310137452945851304429162059393570233821582653516803167382678594922333243233401114450897594812655850097238851933466017741150968631087784907969243102046747080031512493303046916206444127860450…»

[08:07] <krshn> Is there any promotion of types going on?

[08:07] <AlexDaniel> m: (3¹⁹⁹⁹).chars.say

[08:07] <camelia> rakudo-moar e34842: OUTPUT«954␤»

[08:07] <AlexDaniel> m: (3¹⁹⁹⁹⁹⁹⁹).chars.say

[08:07] <xtreak> http://perl6.org/compilers/features is not updated 

[08:07] <camelia> rakudo-moar e34842: OUTPUT«(timeout)»

[08:08] <AlexDaniel> krshn: promotion of types? No, it's just that everything is a Rat

[08:08] <AlexDaniel> m: (3¹⁹⁹⁹⁹).chars.say

[08:08] <camelia> rakudo-moar e34842: OUTPUT«9542␤»

[08:08] <awwaiid> krshn: I don't know how many bits it is allowing in it's integer

[08:08] <AlexDaniel> m: (3¹⁹⁹⁹⁹⁹).chars.say

[08:08] <camelia> rakudo-moar e34842: OUTPUT«95424␤»

[08:08] <AlexDaniel> krshn: hmmm I'm actually telling the wrong thing

[08:09] <AlexDaniel> krshn: if we are working with Int's then it's all about bigints

[08:09] <AlexDaniel> krshn: that is, unlimited, at least in theory

[08:09] <AlexDaniel> m: (3¹⁹⁹⁹⁹).WHAT.say

[08:09] <camelia> rakudo-moar e34842: OUTPUT«(Int)␤»

[08:09] <AlexDaniel> m: (3.5¹⁹⁹⁹⁹).WHAT.say

[08:09] <camelia> rakudo-moar e34842: OUTPUT«(Num)␤»

[08:09] <AlexDaniel> whoah!

[08:09] <AlexDaniel> m: (3.5¹⁹⁹⁹⁹).say

[08:09] <camelia> rakudo-moar e34842: OUTPUT«Inf␤»

[08:09] <krshn> So in the type hierarchy, BigInt is a Int

[08:09] <AlexDaniel> m: (3.0¹⁹⁹⁹⁹).say

[08:09] <camelia> rakudo-moar e34842: OUTPUT«8871011424058065973260672374154714571421010996467885015115710929898310137452945851304429162059393570233821582653516803167382678594922333243233401114450897594812655850097238851933466017741150968631087784907969243102046747080031512493303046916206444127860450…»

[08:10] <AlexDaniel> how come it silently changes it to Num?

[08:10] <krshn> interesting

[08:10] <AlexDaniel> krshn: no, it's just Int. That's how Ints work in perl6

[08:11] <AlexDaniel> krshn: if you want something more dumb then you can use native ints like

[08:11] <AlexDaniel> m: my int $x = 3; say $x¹⁹⁹⁹# let's see if it works

[08:11] <camelia> rakudo-moar e34842: OUTPUT«5826237505742172032199915397215535235096874958117295059372960039368954220757584964304954899548937036918696502320484255295904561452918362158381380673645461606243041266966590597938432094927735078397730475605014746864702967381668335492713119396419006351342018…»

[08:11] <AlexDaniel> nope. Well…

[08:11] <awwaiid> m: say (3.5 ** 19999).WHAT

[08:11] <camelia> rakudo-moar e34842: OUTPUT«(Num)␤»

[08:12] <awwaiid> m: say (3.0 ** 19999).WHAT

[08:12] <camelia> rakudo-moar e34842: OUTPUT«(Rat)␤»

[08:13] <AlexDaniel> m: say (3.5**63).WHAT

[08:13] <camelia> rakudo-moar e34842: OUTPUT«(Rat)␤»

[08:13] <AlexDaniel> m: say (3.5**64).WHAT

[08:13] <camelia> rakudo-moar e34842: OUTPUT«(Num)␤»

[08:13] <krshn> So a number is more constrained than a Int? 

[08:13] <AlexDaniel> krshn: yeah, it's just a normal floating point

[08:14] <krshn> AlexDaniel: with 64 bits ? 

[08:15] <krshn> (or a fixed number of bits)? 

[08:15] *** vv3 joined
[08:15] *** vv3 left
[08:15] <AlexDaniel> krshn: “On most platforms, it's an IEEE 754 64-bit floating point numbers, aka "double precision".”

[08:15] <AlexDaniel> krshn: http://doc.perl6.org/type/Num

[08:15] *** vv3 joined
[08:15] *** vv3 left
[08:16] <krshn> I really love perl6 -- it has got a Cool type .. How cool is that!

[08:16] *** xfix joined
[08:16] *** vv3 joined
[08:16] *** vv3 left
[08:16] <AlexDaniel> um, can anybody tell why 1.3⁶³ is a Num and not Rat?

[08:16] <awwaiid> "To prevent the numerator and denominator from becoming pathologically large, the denominator is limited to 64 bit storage. On overflow of the denominator a Num (floating-point number) is returned instead."

[08:17] <AlexDaniel> okay, right

[08:17] <awwaiid> So says http://doc.perl6.org/type/Rat

[08:17] <AlexDaniel> which means that we can use FatRat instead

[08:17] *** vv3 joined
[08:17] <AlexDaniel> m: say (3.5.FatRat ** 1999).WHAT

[08:17] <camelia> rakudo-moar e34842: OUTPUT«(FatRat)␤»

[08:17] <krshn> awwaiid, AlexDaniel: thanks for the clarifications

[08:17] * awwaiid hasn't heard of FatRat

[08:17] <AlexDaniel> m: say (3.5.FatRat ** 1999)

[08:17] <camelia> rakudo-moar e34842: OUTPUT«3908594856673225867459754002670259373811400266845456460424451885859793567912033986871842169304143622039379408590343278414508064984527132097640557167925452623259893176422086544770930264581232866044354347181678427624685940688247646486393149784812532366264677…»

[08:18] <awwaiid> m: (3.5.FatRat ** 1999).WHAT.say

[08:18] <camelia> rakudo-moar e34842: OUTPUT«(FatRat)␤»

[08:18] <awwaiid> fancy

[08:18] <AlexDaniel> awwaiid: I was aware of that but didn't expect the denominator to overflow

[08:18] <awwaiid> yeah -- also interesting that it goes Rat -> Num instead of Rat -> FatRat

[08:18] <krshn> say (3.5.FatRat ** 19999) is taking foreever on my computer

[08:19] <awwaiid> krshn: maybe that's why it falls back to Num :)

[08:19] <AlexDaniel> m: say (3.5.FatRat ** 19999).WHAT

[08:19] <camelia> rakudo-moar e34842: OUTPUT«(FatRat)␤»

[08:19] <AlexDaniel> m: say (3.5.FatRat ** 199999)

[08:19] <camelia> rakudo-moar e34842: OUTPUT«(timeout)»

[08:20] <AlexDaniel> krshn: well, 19999 should not be a problem

[08:20] <AlexDaniel> awwaiid: a good clue is that it turns into a Num when you do **64 and not when you do **63 :)

[08:20] <awwaiid> def

[08:21] <krshn> AlexDaniel: I finally got an answer

[08:21] <AlexDaniel> how did I miss that. Okay, I'd better get some sleep

[08:21] <awwaiid> me too

[08:22] <krshn> awwaiid: nice one

[08:22] <krshn> oh.. that was AlexDaniel

[08:22] *** vv3 left
[08:22] <AlexDaniel> awwaiid: that's not so interesting actually

[08:22] <AlexDaniel> awwaiid: I think that it was decided that FatRat math is opt-in

[08:23] <AlexDaniel> so that it does not blow up when you don't expect it to

[08:23] *** vv3 joined
[08:23] *** vv3 left
[08:23] <krshn> AlexDaniel: makes sense

[08:24] *** vv3 joined
[08:24] *** vv3 left
[08:24] <sjn> \o

[08:25] <sjn> good *, #perl6, and merry x-mas :)

[08:25] <timotimo> oh my. i merged that pull request for uri-escape even though people on the channel vetoed it

[08:25] <Su-Shee> sjn: hey ;)

[08:25] * sjn almost wrote merry z-mas, but I'm not sure we're quite at that stage yet :)

[08:26] <RabidGravy> ah, Shell::Command is broken by https://github.com/rakudo/rakudo/commit/4355eacf82 

[08:26] <awwaiid> ah timotimo, is that why random things are breaking like the doc build?

[08:26] <RabidGravy> "sub cp($from as Str, $to as Str, :$r) "

[08:26] <RabidGravy> hence, panda is broken

[08:27] *** vv3 joined
[08:28] <AlexDaniel> RabidGravy: just in time! :)

[08:28] <RabidGravy> let's just test again

[08:29] <AlexDaniel> RabidGravy: so according to the commit message it should be ｢cp(Str() $from, Str() $to, :$r)｣

[08:29] <AlexDaniel> RabidGravy: as simple as that

[08:29] <RabidGravy> yep

[08:30] <AlexDaniel> ahhh it is fixed already

[08:30] *** vv3 left
[08:31] <krshn> AlexDaniel: keyboard seq for superscript? 

[08:31] *** vv3 joined
[08:31] *** vv3 left
[08:31] <AlexDaniel> krshn: depends.

[08:31] <AlexDaniel> krshn: For example Compose, ^ 2 should give you ²

[08:32] <AlexDaniel> krshn: I have a dead key for that though

[08:32] <RabidGravy> AlexDaniel, just not in the version that panda bootstraps itself with

[08:32] <krshn> AlexDaniel: REPL? 

[08:32] *** vv3 joined
[08:32] *** vv3 left
[08:32] <AlexDaniel> krshn: it's a keyboard layout feature, that's everywhere. Not sure if there is any special way to do that in your terminal though

[08:32] <timotimo> i have a nice fix for uri escape now

[08:33] *** vv3 joined
[08:33] *** vv3 left
[08:33] <krshn> AlexDaniel: got it

[08:33] <timotimo> awwaiid: huh? i have no clue.

[08:33] <timotimo> i mean, i have no idea what you're talking about; can you show a travis log or something?

[08:33] <AlexDaniel> krshn: basically to use all the unicode stuff I highly recommend you to set your Compose Key to something

[08:33] *** vv3 joined
[08:34] <AlexDaniel> krshn: this way you can insert a lot of unicode stuff without changing your layout much

[08:34] <krshn> Compose key equivalent on Mac? 

[08:34] <krshn> I already have setup my caps lock to esc

[08:34] <krshn> (vi :-))

[08:35] <krshn> I will come up with something

[08:35] <krshn> so what is the idea here -- you set the compose key to what? 

[08:35] <timotimo> https://github.com/perl6-community-modules/uri/commit/089c2340abe45c2ce8c3633d36157bfb4971432a  -  check it!

[08:35] <timotimo> isn't it a good improvement?

[08:36] <RabidGravy> yes

[08:36] <Su-Shee> krshn: if mac supports the iso standard, you can just input the codepoint with a keyboard shortcut you'd have to google. it's ctrl-u on linux. 

[08:37] <Su-Shee> krshn: no configuration necessary.

[08:37] *** firstdayonthejob joined
[08:37] <stmuk> https://www.youtube.com/playlist?list=PLxavAW22r8Ams2hyXl2TfBsOcInCYStzK

[08:37] <stmuk> my slides will be updated and linked later

[08:38] <timotimo> stmuk: awesome!

[08:38] <timotimo> regretfully don't have time to watch stuff now, really

[08:38] <timotimo> oh, how was the emperor's new programming language?

[08:38] *** vv3 left
[08:38] <timotimo> the abstract sounded somewhat like uninformed ranting and uselessness in general

[08:39] <stmuk> its there so we can see (probably post xmas)

[08:39] <stmuk> I think it was supposed to be more positive than the summary suggested

[08:39] *** vv3 joined
[08:39] *** vv3 left
[08:39] <AlexDaniel> Su-Shee: Somehow I don't think that it is much easier to remember a bunch of numbers than to change your setup…

[08:40] <timotimo> stmuk: well, at least the illusion to "the emperor's new clothes" is a pretty negative thing in my eyes

[08:40] *** vv3 joined
[08:40] *** vv3 left
[08:40] <Su-Shee> krshn: oh you even get a nice menu: https://en.m.wikipedia.org/wiki/Unicode_input see macos.

[08:41] <timotimo>   ah well. i'd rather have a positive-ish talk than a terrible rant :)

[08:41] *** vv3 joined
[08:41] *** vv3 left
[08:41] <timotimo> BBIAB

[08:42] *** vv3 joined
[08:42] <krshn> Su-Shee: Cmd+Ctrl+Space seems to be what I should be looking for

[08:42] <krshn> Su-Shee: thanks for the link

[08:43] *** BenGoldberg joined
[08:43] *** vv3 left
[08:43] <Su-Shee> krshn: it should work almost everywhere. 

[08:45] <krshn> Su-Shee: still not sure how to get superscripts

[08:45] <krshn> still looking

[08:47] <timotimo> i liked the TT post again this year :)

[08:47] <stmuk> timotimo: yes I didn't attend that talk based on the summary

[08:47] <krshn> what code should I be searching for for superscript? 

[08:47] <timotimo> better not to attend than to stand in the back row and "boo!" or hold up a sign ;)

[08:48] <Su-Shee> krshn: some apps seem to use cmd ctrl + (and -)

[08:48] <timotimo> m: (0 .. 0x10000).grep( *.uniname ~~ / SUPERSCRIPT / ).map( .chr.print )

[08:48] <camelia> rakudo-moar e34842: OUTPUT«WhateverCode object coerced to string (please use .gist or .perl to do that)  in block <unit> at /tmp/BYn92MvYzJ line 1␤Method 'chr' not found for invocant of class 'Any'␤  in block <unit> at /tmp/BYn92MvYzJ line 1␤␤»

[08:48] <timotimo> i did that thing again!

[08:48] <timotimo> m: (0 .. 0x10000).grep({ .uniname ~~ / SUPERSCRIPT / }).map( .chr.print )

[08:48] <camelia> rakudo-moar e34842: OUTPUT«Method 'chr' not found for invocant of class 'Any'␤  in block <unit> at /tmp/9RVo7btpVf line 1␤␤»

[08:48] *** vendethiel joined
[08:49] <timotimo> m: (0 .. 0x10000).grep({ .uniname ~~ / SUPERSCRIPT / }).map( *.chr.print )

[08:49] <camelia> rakudo-moar e34842: OUTPUT«²³¹ٰܑ⁰ⁱ⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾ⁿﱛﱜﱝﱣﲐﳙ»

[08:49] <_nadim> good morning

[08:49] <timotimo> i did the other thing again, too!

[08:49] <timotimo> i should have BBIAB'd when i wrote "BBIAB" on the channel ...

[08:49] <_nadim> m: "abc123".=trans([0..9] => [<⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹>]) 

[08:49] <camelia> rakudo-moar e34842: OUTPUT«Cannot modify an immutable Str␤  in block <unit> at /tmp/mTr52gGAU_ line 1␤␤»

[08:50] <timotimo> m: say "abc123".trans([0..9] => [<⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹>])

[08:50] <camelia> rakudo-moar e34842: OUTPUT«abc¹²³␤»

[08:50] <_nadim> m: my $s = "abc123"; say $s.=trans([0..9] => [<⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹>]) 

[08:50] <camelia> rakudo-moar e34842: OUTPUT«abc¹²³␤»

[08:51] <AlexDaniel> ↑ which is faster than trying to do it by entering the hex code

[08:51] <Su-Shee> so, when is official release? #perl tries to be ready to send people to you.

[08:52] <timotimo> AlexDaniel: but how do you get the contents of that list without entering the hex code? :)

[08:52] <AlexDaniel> timotimo: google it

[08:52] <krshn> timotimo: thanks

[08:52] <_nadim> the code above seems to be a resource hog and I mean HOG, I put it in a loop and I watch my program become a sloth

[08:53] <timotimo> Su-Shee: well, the current release is mostly about the language becoming stable and us devs committing to not break stuff a lot any more. there'll be a rakudo-star release to go with it soon (though i don't actually know how soon. tomorrow? the day after tomorrow?)

[08:53] <timotimo> _nadim: is the "my $s = ..." inside the loop or outside?

[08:54] <nine> .tell TimToady That must be the lovliest announcement I've ever read.

[08:54] <yoleaux> nine: I'll pass your message to TimToady.

[08:55] *** pierre-vigier left
[08:55] *** zhi joined
[08:55] <Su-Shee> timotimo: are you telling me that after all the public announcement about a real release on christmas there won't be one on.. christmas? ;)

[08:55] <_nadim> timotimo: inside of course :) but that called, say, 30 times.

[08:56] <_nadim> run time went from 1 second to 3.5 secs

[08:56] *** user_9707 joined
[08:57] <timotimo> Su-Shee: i don't know much about the christmas release, actually

[08:57] *** user_9707 left
[08:57] <Su-Shee> who does?

[08:57] <krshn> m: say "abc678".trans([6..9] => [<⁶⁷⁸⁹>])

[08:57] <camelia> rakudo-moar e34842: OUTPUT«abc⁶⁷⁸⁹⁶⁷⁸⁹⁶⁷⁸⁹␤»

[08:58] <AlexDaniel> m: say "abc678".trans([6..9] => [‘⁶’..‘⁹’])

[08:58] <camelia> rakudo-moar e34842: OUTPUT«abc⁶⁷⁸␤»

[08:58] <krshn> oh. shace

[08:58] <krshn> <space>

[08:58] <AlexDaniel> though the range thing is not going to work from ¹ to ⁹

[08:58] <_nadim> timotimo: this on the other hand is faster  $subscript_level = "$level".comb(/./).map: { <⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹>[$_]} ;

[08:58] <krshn> say "abc678".trans([6..9] => [<⁶ ⁷ ⁸ ⁹>])

[08:58] <krshn> m: say "abc678".trans([6..9] => [<⁶ ⁷ ⁸ ⁹>])

[08:58] <camelia> rakudo-moar e34842: OUTPUT«abc⁶⁷⁸␤»

[08:58] <timotimo> please don't comb(/./). either .comb() or .comb(1)

[08:59] * RabidGravy starts on the 29 modules that probably all need fixubg

[08:59] <timotimo> fixbug?

[08:59] <AlexDaniel> m: say "abc678".trans([6..9] => ‘¹²³⁴⁵⁶⁷⁸⁹⁰’.comb)

[08:59] <camelia> rakudo-moar e34842: OUTPUT«abc¹²³␤»

[08:59] * timotimo BBIAB, for real this tim

[08:59] <AlexDaniel> m: say "abc678".trans([0..9] => ‘⁰¹²³⁴⁵⁶⁷⁸⁹’.comb)

[08:59] <camelia> rakudo-moar e34842: OUTPUT«abc⁶⁷⁸␤»

[08:59] <AlexDaniel> why [] by the way

[08:59] <_nadim> timotimo: old remains, it was combing more complicated stuff :)

[08:59] <RabidGravy> it's getting off to a bad start as LibraryCheck needs a change for the dll version thing

[08:59] <AlexDaniel> m: say "abc678".trans(0..9 => ‘⁰¹²³⁴⁵⁶⁷⁸⁹’.comb)

[08:59] <camelia> rakudo-moar e34842: OUTPUT«abc⁶⁷⁸␤»

[09:00] <nine> Su-Shee: we've done software releases for years. All that was missing was a promise of backwards compatibility. We at least try to give it now :)

[09:02] <Su-Shee> I know. I'm waiting since 2002. I already had pugs. I just need a rough time so people who are coming to #perl aren't left hanging.

[09:02] <AlexDaniel> hanging what. Just tell them to get rakudo and be happy :)

[09:02] <Su-Shee> and people expect something today or tomorrow.

[09:03] <nine> I think the plan is to create the release packages today and announce them tomorrow.

[09:03] <aigan_> perl6 --version

[09:04] <aigan_> ... expecting 6.0

[09:04] <nine> aigan_: the release is called 6.c

[09:04] <stmuk> Su-Shee: my guess is its Xmas EST sometime

[09:05] *** labster joined
[09:05] <Su-Shee> stmuk: ok. well that leaves it all to the estians. 

[09:05] <nine> Those yanks think christmas is on the 25th ;)

[09:06] *** domidumont joined
[09:06] <AlexDaniel> m: say $*PERL

[09:06] <camelia> rakudo-moar e34842: OUTPUT«Perl 6 (6.c)␤»

[09:07] <stmuk> oddly the British Royal Family exchange presents on the 24th .. almost as if they were once German!

[09:07] <Su-Shee> yeah well I just want to be able to send people over and not let them sit around waiting. ;) 

[09:09] *** Ben_Goldberg joined
[09:09] <aigan_> I guess this was the release then: https://github.com/rakudo/rakudo/commit/d995c87b5148b8325cfefc626fab427658a125c8 

[09:10] <Su-Shee> ok then we'll just wait for the announcement to go with it.

[09:10] *** pierre-vigier joined
[09:10] <AlexDaniel> aigan_: well not really: https://github.com/rakudo/rakudo/releases

[09:10] <stmuk> aigan_: more steps needed than that

[09:10] <aigan_> https://perl6advent.wordpress.com/2015/12/24/an-unexpectedly-long-expected-party/

[09:11] *** BenGoldberg left
[09:13] *** vendethiel left
[09:13] <stmuk> oh my VLC icon has a Xmas hat! I forgot it did that

[09:13] <RabidGravy> before I start fixing these modules, there aren't going to be any changes to nativecall before 6.c now are there?

[09:14] <Su-Shee> yeah I read that but I didn't see a download link?

[09:15] <diakopter> no, release hasn't occurred; see [Coke]

[09:16] <stmuk> RabidGravy: perl 6 isn't the sort of thing to rush in last minute changes .. or is it ;)

[09:17] <Su-Shee> diakopter: I'll wait then.

[09:19] <RabidGravy> well that's the first https://github.com/jonathanstowe/LibraryCheck/releases/tag/v0.0.6

[09:19] <RabidGravy> 28 more to do

[09:21] *** xinming joined
[09:27] *** rurban joined
[09:28] *** andreoss joined
[09:30] <nine> RabidGravy: you're safe from me ;(

[09:30] <nine> ;)

[09:33] <timotimo> wait wait wait ... christmas presents aren't always distributed on the 24th?!

[09:33] <timotimo> are you saying my whole life has been a lie!?

[09:35] <dalek> roast: 7e5f5db | lizmat++ | S32-temporal/Date.t:

[09:35] <dalek> roast: Test for RT #127010

[09:35] <dalek> roast: review: https://github.com/perl6/roast/commit/7e5f5db4e1

[09:35] *** brrt joined
[09:35] *** rindolf joined
[09:36] *** AlexDani` joined
[09:36] <brrt> cheers #perl6

[09:36] <dalek> rakudo/nom: fb475d2 | lizmat++ | src/core/Date (2 files):

[09:36] <dalek> rakudo/nom: Fix for RT #127010

[09:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb475d22ba

[09:38] *** st_iron joined
[09:38] <st_iron> hello

[09:39] *** AlexDaniel left
[09:40] *** AlexDani` is now known as AlexDaniel

[09:40] *** pierre-vigier left
[09:40] *** fitz left
[09:41] *** LLamaRider joined
[09:41] <st_iron> Merry Christmas My Friends!!!

[09:41] *** rurban left
[09:43] <timotimo> hello :)

[09:44] *** yeahnoob left
[09:44] <st_iron> good morning timotimo

[09:45] <timotimo> now this is surprising: today's advent calendar post already has more views and visitors than yesterday's. i wonder why that is!!

[09:45] <xtreak> I posted it to reddit r/programming

[09:45] <brrt> it's been on hn, too

[09:45] <brrt> although not very popular

[09:45] *** zhi left
[09:46] <timotimo> reddit has a significant lead over hn in the referrers

[09:46] <timotimo> with reddit at 163 views, twitter at 121 and hacker news at 97

[09:48] <xtreak> Is there a version bump on github or something when the release happens?

[09:48] <timotimo> well, rakudo already generates "6.c" as the version

[09:49] <RabidGravy> nine++ # that's good enough for me

[09:49] *** st_iron left
[09:49] *** el_amigo joined
[09:51] *** Skarsnik joined
[09:51] <el_amigo> hmm

[09:51] <el_amigo> I fell out

[09:51] <el_amigo> it is my alternate nick

[09:51] *** el_amigo is now known as st_iron

[09:52] <st_iron> way better

[09:55] <dalek> doc: 4ee960f | labster++ | doc/Type/DateTime.pod:

[09:55] <dalek> doc: document DateTime.new(Str) laxness, as brought up in RT #127002

[09:55] <dalek> doc: review: https://github.com/perl6/doc/commit/4ee960fa6e

[09:55] <timotimo> breakfast and celebration and family time! \o/

[09:56] *** FROGGS_ is now known as FROGGS

[09:56] <FROGGS> \o/

[09:56] <nine> Ah, time for the only christmas song I like: http://net.muddasheep.com/download/muddasheep_fallensheep/muddasheep%20-%2019%20-%20silent%20knight.mp3

[09:57] <st_iron> \o/

[09:58] <krshn> nine: thanks for sharing

[10:00] *** Ben_Goldberg left
[10:02] *** Begi joined
[10:03] *** BenGoldberg joined
[10:09] <xtreak> How can I profile my programs in perl6. Is there a flag that I can pass?

[10:10] <RabidGravy> --profie

[10:10] <jdv79> can anyone install DBIish?

[10:10] <RabidGravy> --profile even

[10:11] <jdv79> so I can install Task::Star sans DBIish, LWP::Simple and JSON::RPC.  also had to use my fork of URI for the pack exper thing.

[10:11] <RabidGravy> let me guess, the nativecall part needs updating

[10:12] <RabidGravy> I think timotimo removed the pack from URI just now

[10:12] <jdv79> just saw that

[10:12] <RabidGravy> LWP::Simple is broken and there is a PR someone reported earlier

[10:12] <RabidGravy> dunno JSON::RPC

[10:13] <jdv79> that had a dep on LWP is all i know

[10:13] *** znpy joined
[10:13] <jdv79> why stuff like that is in task star is beyond me

[10:14] <RabidGravy> I think it was the best there was when Task::Star was made

[10:14] <jdv79> but people seem to want to install star

[10:14] <RabidGravy> I'm going to make a Task::Audio and a Task::Author later

[10:15] <jdv79> best for what? i thought star was about gen purpose non-core type stuff

[10:15] <jdv79> HTTP::Status?

[10:15] <RabidGravy> anyway off out to get Mrs Gravy's  present

[10:15] <RabidGravy> ttfn

[10:16] *** pierre-vigier joined
[10:17] *** BenGoldberg left
[10:18] *** BenGoldberg joined
[10:18] *** krshn left
[10:20] *** RabidGravy left
[10:20] *** pierre-vigier left
[10:28] *** labster left
[10:30] *** znpy left
[10:31] *** andreoss left
[10:33] *** srvsh joined
[10:33] *** rurban joined
[10:35] <st_iron> christmas lunch is done

[10:35] <st_iron> family is done

[10:35] <st_iron> what else? yeah the christmas tree

[10:35] *** srvsh left
[10:40] *** domidumont left
[10:40] *** hlafarge joined
[10:40] *** user1 joined
[10:42] *** espadrine joined
[10:43] *** Ben_Goldberg joined
[10:44] *** BenGoldberg left
[10:44] *** Ben_Goldberg left
[10:45] *** xinming_ joined
[10:46] *** Ben_Goldberg joined
[10:46] *** MARTIMM joined
[10:48] *** andreoss joined
[10:48] *** BenGoldberg_ joined
[10:49] *** xinming left
[10:51] *** rurban left
[10:51] *** Ben_Goldberg left
[10:52] *** lustlife left
[10:52] *** lustlife joined
[10:52] *** rurban joined
[10:53] <dalek> DBIish: cd85faf | (Sylvain Colinet)++ | lib/DBDish/ (2 files):

[10:53] <dalek> DBIish: Added API version for sqlite/pg binding

[10:53] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/cd85faff15

[10:53] <dalek> DBIish: 32a0164 | (Sylvain Colinet)++ | lib/DBDish/ (3 files):

[10:53] <dalek> DBIish: Fix lib name for Pg/mysql/sqlite

[10:53] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/32a0164fd8

[10:53] <dalek> DBIish: 938cac8 | Skarsnik++ | lib/DBDish/ (3 files):

[10:53] <dalek> DBIish: Merge pull request #40 from Skarsnik/master

[10:53] <dalek> DBIish: 

[10:53] <dalek> DBIish: Added API version for sqlite/pg binding [Don't merge yet]

[10:53] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/938cac84c3

[10:54] <AlexDaniel> [Don't merge yet] – Merged! ✓

[10:55] <nebuchadnezzar> m: my $double = -> $x { return $x * 2 }

[10:55] <camelia> rakudo-moar fb475d: ( no output )

[10:55] <nebuchadnezzar> m: my $double = -> $x { return $x * 2 }; $double(2)

[10:55] <camelia> rakudo-moar fb475d: OUTPUT«Attempt to return outside of any Routine␤  in block <unit> at /tmp/ZfNu9lrLSX line 1␤␤»

[10:55] <nebuchadnezzar> could it be caught at compile time?

[10:55] <AlexDaniel> m: my $double = -> $x { $x * 2 }; $double(2)

[10:55] <camelia> rakudo-moar fb475d: ( no output )

[10:55] <AlexDaniel> m: my $double = -> $x { $x * 2 }; say $double(2)

[10:55] <camelia> rakudo-moar fb475d: OUTPUT«4␤»

[10:56] <nebuchadnezzar> AlexDaniel: yes, I'm reading https://github.com/rakudo/star/blob/master/docs/2015-spw-perl6-course.pdf so I saw the note about return in a pointy block

[10:56] <nebuchadnezzar> but I just wonder why it's caught at runtime and not at compile time

[10:57] <AlexDaniel> oh, let's see

[10:57] <AlexDaniel> m: my $double = -> $x { $x * 2 }; sub foo { say $double(2); say ‘test’ }; foo

[10:57] <camelia> rakudo-moar fb475d: OUTPUT«4␤test␤»

[10:57] <AlexDaniel> m: my $double = -> $x { return $x * 2 }; sub foo { say $double(2); say ‘test’ }; foo

[10:57] <camelia> rakudo-moar fb475d: OUTPUT«Attempt to return outside of any Routine␤  in block <unit> at /tmp/nLYuurvfu5 line 1␤␤»

[10:57] <AlexDaniel> no idea

[10:58] *** BenGoldberg_ left
[10:58] <AlexDaniel> m: sub foo { my $double = -> $x { return $x * 2 }; say $double(2); say ‘test’ }; foo

[10:58] <camelia> rakudo-moar fb475d: ( no output )

[10:59] <AlexDaniel> m: sub foo { my $double = -> $x { return $x * 2 }; say $double(2); say ‘test’ }; say foo

[10:59] <camelia> rakudo-moar fb475d: OUTPUT«4␤»

[10:59] <AlexDaniel> nebuchadnezzar: there we go

[10:59] *** BenGoldberg_ joined
[10:59] <AlexDaniel> m: sub foo { my $double = -> $x { return $x * 2 }; return $double }; say foo()()

[10:59] <camelia> rakudo-moar fb475d: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/iwJFSki4Vi line 1␤␤»

[10:59] <AlexDaniel> m: sub foo { my $double = -> $x { return $x * 2 }; return $double }; say foo()(2)

[10:59] <camelia> rakudo-moar fb475d: OUTPUT«Attempt to return outside of any Routine␤  in block <unit> at /tmp/X0kjqA7__k line 1␤␤»

[10:59] *** BenGoldberg_ left
[11:00] *** user1 left
[11:00] <nebuchadnezzar> ok, the return in the pointy block returns from the outer sub

[11:00] <AlexDaniel> nebuchadnezzar: yea… it's so weird

[11:00] *** krshn joined
[11:01] *** BenGoldberg_ joined
[11:01] *** regreg left
[11:03] *** brrt left
[11:03] *** kjs_ joined
[11:05] *** krshn left
[11:07] <BenGoldberg_> m: my $double = -> $x { leave($x * 2) }; say $double(2)

[11:07] <camelia> rakudo-moar fb475d: OUTPUT«leave not yet implemented. Sorry. ␤  in block <unit> at /tmp/Hfl85w9g2c line 1␤␤»

[11:19] <hankache> m: say (0, { $_ + 2 } ... 10);

[11:19] <camelia> rakudo-moar fb475d: OUTPUT«(0 2 4 6 8 10)␤»

[11:19] <hankache> m: say (0, { $_ + 3 } ... 10);

[11:19] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 2…»

[11:20] <hankache> why? ^^

[11:21] *** xpen left
[11:21] <hankache> why is it jumping after 10? weird thing is if you replace 10 with 9 or 12 it works fine

[11:21] <hankache> is this a bug or normal behavior??

[11:22] *** joydong left
[11:22] *** kjs_ left
[11:22] *** jcrespo joined
[11:23] <mre> m: say (0, {$_ + 3} ... 9)

[11:23] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9)␤»

[11:23] <mre> m: say (0, {$_ + 3} ... 10)

[11:23] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 2…»

[11:23] <mre> m: say (0, {$_ + 3} ... 11)

[11:23] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 2…»

[11:23] <mre> m: say (0, {$_ + 3} ... 12)

[11:23] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12)␤»

[11:23] <mre> m: say (0, {$_ + 3} ... 13)

[11:23] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 2…»

[11:23] <mre> m: say (0, {$_ + 3} ... 13)

[11:23] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 2…»

[11:23] <mre> m: say (0, {$_ + 3} ... 14)

[11:23] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 2…»

[11:24] <mre> hankache: that doesn't appear to be doing what I expected. It seems if the lhs of the range is a result of the $_ + 3 then it stops there

[11:24] <hankache> m: say (0,3 ... 10);

[11:24] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9)␤»

[11:24] <hankache> mre whenever we use a custom generator enclosed in {}, the endpoint seems to be skipped

[11:24] <timotimo> if you put a code object in there, all bets are off

[11:25] *** jcrespo left
[11:25] <timotimo> we don't intends on trying to solve the halting problem for you

[11:25] <hankache> timotimo is this by design?

[11:25] <hankache> or just a bug?

[11:25] <timotimo> so just use * > 10

[11:25] <timotimo> by design

[11:25] *** jp6 joined
[11:26] <hankache> m: say (0, { $_ + 3 } ... * <10);

[11:26] <camelia> rakudo-moar fb475d: OUTPUT«(0)␤»

[11:26] <timotimo> there are series that are not monotonic

[11:26] <timotimo> other way around

[11:26] <hankache> m: say (0, { $_ + 3 } ... * > 10);

[11:26] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12)␤»

[11:26] <timotimo> and you can exclude the final value by using ...^

[11:27] <mre> m: say (0, { $_ + 3 } ... ^ * > 10

[11:27] <camelia> rakudo-moar fb475d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/f9KYjLsWK0␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/f9KYjLsWK0:1␤------> 3say (0, { $_ + 3 } ... ^ * > 107⏏5<EOL>␤    expecting any of:␤        st…»

[11:27] <mre> m: say (0, { $_ + 3 } ... ^ * > 10)

[11:27] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12)␤»

[11:27] <hankache> but timotimo if one works why would the other not?

[11:28] *** okazu joined
[11:29] * hankache knows nothing about how hard it is.

[11:29] *** okazu left
[11:31] <mre> hankache: I believe that: In you ... 10 example there is now halt point. Its says "keep adding 3 until the result is 10" which is never true. It works for 12 as that is true.

[11:32] <mre> changing it to "unitl the result is greater than 10" makes it halt correctly

[11:32] *** kjs_ joined
[11:33] <hankache> mre indeed

[11:33] <dalek> rakudo/nom: 888ecd8 | lizmat++ | src/core/DateTime.pm:

[11:33] <dalek> rakudo/nom: Add max day check for moving years as well

[11:33] <dalek> rakudo/nom: 

[11:33] <dalek> rakudo/nom:   DateTime.new("2016-02-29T00:00:00").later(:1year)

[11:33] <dalek> rakudo/nom: 

[11:33] <dalek> rakudo/nom: now works and gives

[11:33] <dalek> rakudo/nom: 

[11:33] <dalek> rakudo/nom:   "2017-02-28T00:00:00Z"

[11:33] <dalek> rakudo/nom: 

[11:33] <dalek> rakudo/nom: just like

[11:34] <dalek> rakudo/nom: 

[11:34] <dalek> rakudo/nom:   DateTime.new("2017-01-31T00:00:00").later(:1month)

[11:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/888ecd85e6

[11:34] <hankache> what i was saying is that the average user will expect  ... 10 to behave like ... * > 10

[11:34] <mre> timotimo: t/01-sanity/55-use-trace.t is failing for me on latest nom. Seems that the line number output has changed from $filename:$line to $filename line $line. Should I change the test to match the new output

[11:35] <hankache> so why not *magically* make one equivalent to the other

[11:35] <hankache> not that i know how.

[11:35] <mre> hankache: I am not sure thats true. I was actually expecting ... 10 to be xx 10. Then when I realised what it was doing the ... * == 10 made sense

[11:36] *** jp6 left
[11:36] <dalek> roast: 70cca29 | lizmat++ | S32-temporal/DateTime.t:

[11:36] <dalek> roast: Add test for problem fixed with 888ecd85e63a3c1ed

[11:36] <dalek> roast: review: https://github.com/perl6/roast/commit/70cca29be8

[11:37] <hankache> well anyway i guess it's a matter of perspective. I have no issue using *>10 

[11:38] <mre> TimToady: timotimo: The above seems to be as a result of TimToady's change yesterday eea4cb0ad0

[11:38] <mre> hankache: it seems to be better to be explicit about what halts the loop in this case

[11:40] *** ZoffixWin joined
[11:40] *** lucasb joined
[11:40] <hankache> m: say (0,3 ... 10);

[11:40] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9)␤»

[11:40] <mre> TimToady: timotimo: Have fixed the test. Just checking everything passes now.

[11:40] <hankache> mre what confuses me is why then this ^^ halts?

[11:41] <ZoffixWin> TBH, this makes me think the "be explicit in ... end point" will become the recommended practice, simply because real-world examples would likely be something you can't be arsed calculating whether or not it'll halt on your end point

[11:41] <mre> hankache: I suspect that uses p6's cunning range generation logic. whereas if you use a code block it can't

[11:42] <ZoffixWin> Are there any usecases where making it halt if * > $end-point when lone $end-point is specified NOT what the user would've wanted?

[11:42] <Skarsnik> Hey ZoffixWin, can you merge my PR in xml, so it can install? x)

[11:42] <yoleaux> 06:08Z <AlexDaniel> Skarsnik: have you tried getting “timestamp”s from some table? Today I noticed that ｢.allrows｣ gives me “Any” instead of some meaningful timestamp

[11:42] <yoleaux> 06:10Z <AlexDaniel> Skarsnik: that's on postgresql though

[11:42] <yoleaux> 06:32Z <AlexDaniel> Skarsnik: Adding ｢1114  => 'Str',   # timestamp｣ to ｢lib/DBDish/Pg/Native.pm6｣ seems to solve the problem temporarily, but I don't think that it is right. Do you have any ideas how to make it better?

[11:42] <yoleaux> 06:37Z <AlexDaniel> Skarsnik: ah… OK, I open a new issue: https://github.com/perl6/DBIish/issues/41

[11:42] <hankache> ZoffixWin i don;t

[11:42] <ZoffixWin> Skarsnik: xml? You might got the wrong person :P

[11:43] <Skarsnik> and Hello there

[11:43] <hankache> ZoffixWin i don't think so

[11:43] <hankache>  * > end-point should work properly

[11:43] <Skarsnik> hm, I probably dreamed seeing merge on of my pr in it x)

[11:45] <mre> hankache: I think that is a req that would need to be dealt with by one of the architects. Unless you can find a spec that says otherwise.

[11:45] <ZoffixWin> This behaviour is especially pernicious, since there ARE conditions when it'll halt as expected (at least by me).

[11:46] <mre> ZoffixWin: it seems that it will halt in a "* == $endpoint" situation

[11:46] <ZoffixWin> m: say (0,3 ... 10);

[11:46] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9)␤»

[11:46] <lizmat> masak moritz is there a reason why "daycount" is not documented?  Is it supposed to be an implementation detail of Dateish and friends?

[11:46] <Skarsnik> someone know how the str (not Str) type is encoded?

[11:46] <ZoffixWin> m: say (0,{ 3+0} ... 10);

[11:46] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ...)␤»

[11:46] <ZoffixWin> m: say (0,{ *+3} ... 10);

[11:46] <camelia> rakudo-moar fb475d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/FJHQApzxqO␤Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *␤at /tmp/FJHQApzxqO:1␤------> 3say (0,{ *+3}…»

[11:47] <ZoffixWin> At this point changing it would have to be left until next language release, so we have plenty of time to think about it :P

[11:47] *** Ben_Goldberg joined
[11:47] <ZoffixWin> m: say 0, *+ 3 ... 10

[11:47] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 2…»

[11:47] <hankache> i don't mind * > endpoint. What i propose it to make it behave the same way in both cases. Either ... end point works everywhere or doesn't 

[11:47] <ZoffixWin> m: say (0,3 ... 10);

[11:47] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9)␤»

[11:48] <ZoffixWin> ^ that is a problem in my eyes

[11:48] <ZoffixWin> And...I'm late for my bus >_<

[11:48] <ZoffixWin> \o

[11:48] *** ZoffixWin left
[11:49] <hankache> m: say (0, { $_ + 3 } ... * > 10)

[11:49] <camelia> rakudo-moar fb475d: OUTPUT«(0 3 6 9 12)␤»

[11:49] <hankache> why does it stop at 12 not 9?

[11:49] *** BenGoldberg_ left
[11:50] <hankache> is this also by design?

[11:51] <mre> hankache: because ! 9 > 10

[11:51] <mre> so it halts at the first number after 10

[11:51] *** kaare_ left
[11:51] <hankache> m: say (0, { $_ + 3 } ... * > ^10)

[11:51] <camelia> rakudo-moar 888ecd: OUTPUT«(0 3 6 9 12)␤»

[11:51] *** Psyche^ left
[11:51] <hankache> m: say (0, { $_ + 3 } ... ^* > 10)

[11:51] <camelia> rakudo-moar 888ecd: OUTPUT«(0 3 6 9 12)␤»

[11:51] <mre> that I am not sure about

[11:52] *** Psyche^ joined
[11:52] <hankache> mre is there a way to tell it to stop before 10?

[11:52] <mre> the ^ * > 10 should I believe do that. Don't know why it isn't

[11:52] <hankache> m: say (0, { $_ + 3 } ... ^Inf > 10)

[11:53] <camelia> rakudo-moar 888ecd: OUTPUT«(0)␤»

[11:53] <hankache> :(

[11:54] *** ZoffixWin joined
[11:55] <mre> m: say (0, * + 3 ... ^ * > 10)

[11:55] <camelia> rakudo-moar 888ecd: OUTPUT«(0 3 6 9 12)␤»

[11:55] <ZoffixWin> You havta put the ^ as part of the ... operator, otherwise (I think) it's interpreted as a junction

[11:55] <ZoffixWin> m: say (0, { $_ + 3 } ...^ * > 10)

[11:55] <camelia> rakudo-moar 888ecd: OUTPUT«(0 3 6 9)␤»

[11:55] <mre> m: say (0, * + 3 ...^ * > 10)

[11:55] <camelia> rakudo-moar 888ecd: OUTPUT«(0 3 6 9)␤»

[11:55] <mre> ZoffixWin++ aha

[11:55] <hankache> mre ZoffixWin thanks  

[11:55] <mre> m: say (0, * + 3 ..^ * > 10)

[11:55] <camelia> rakudo-moar 888ecd: OUTPUT«(0 WhateverCode.new)␤»

[11:55] <mre> m: say (0, * + 3 ...^ * > 10)

[11:55] <camelia> rakudo-moar 888ecd: OUTPUT«(0 3 6 9)␤»

[11:56] <mre> ($work laptop)-- # Killed by running make spectest

[11:56] <dalek> DBIish: 39f65b8 | (Sylvain Colinet)++ | / (3 files):

[11:56] <dalek> DBIish: Should fix pg for timestamp and other missing type

[11:56] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/39f65b8564

[11:56] <dalek> DBIish: 6109493 | Skarsnik++ | / (3 files):

[11:56] <dalek> DBIish: Merge pull request #42 from Skarsnik/master

[11:56] <dalek> DBIish: 

[11:56] <dalek> DBIish: Should fix pg for timestamp and other missing type

[11:56] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/6109493de0

[11:56] *** pierre-vigier joined
[11:56] *** ZoffixWin left
[11:57] *** Ben_Goldberg left
[11:58] *** vv3 joined
[11:58] *** vv3 left
[11:59] <lucasb> stmuk++ for sharing the youtube link of LPW talks

[11:59] *** vv3 joined
[11:59] *** vv3 left
[12:00] *** vv3 joined
[12:00] *** vv3 left
[12:00] *** znpy joined
[12:01] *** vv3 joined
[12:01] *** rurban1 joined
[12:01] *** hlafarge left
[12:02] <dalek> rakudo/nom: 2ef8881 | lizmat++ | src/core/Date.pm:

[12:02] <dalek> rakudo/nom: Add max day check for Date.later as well

[12:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2ef8881e9e

[12:02] *** rurban left
[12:03] <dalek> roast: b54c7b9 | lizmat++ | S32-temporal/Date.t:

[12:03] <dalek> roast: Add test for problem fixed in 2ef8881e9e4b1a401

[12:03] <dalek> roast: review: https://github.com/perl6/roast/commit/b54c7b973e

[12:05] <dalek> doc: a3d9a03 | lizmat++ | doc/Type/Date.pod:

[12:05] <dalek> doc: Verify correctness of documented Date methods

[12:05] <dalek> doc: review: https://github.com/perl6/doc/commit/a3d9a03466

[12:06] *** kjs_ left
[12:06] *** vv3 left
[12:07] *** vv3 joined
[12:07] *** vv3 left
[12:07] *** vv3 joined
[12:07] *** vv3 left
[12:08] *** kjs_ joined
[12:08] *** vv3 joined
[12:08] *** vv3 left
[12:09] *** pierre-vigier left
[12:10] <lucasb> m: while $++ < 5 { FIRST { 42 } }

[12:10] <camelia> rakudo-moar 888ecd: OUTPUT«[DISLOCATED MESSAGE] Useless use of LOOP_BLOCK_1 symbol in sink context␤»

[12:10] <lucasb> ^^ just to show the dislocated message so that it can be fixed later

[12:11] *** vv3 joined
[12:12] <andreoss> .seen masak

[12:12] <yoleaux> I saw masak 22 Dec 2015 23:21Z in #perl6: <masak> 'night, #perl6

[12:13] <El_Che> -a

[12:13] *** znpy left
[12:13] *** vytas left
[12:14] *** vv3 left
[12:15] *** vv3 joined
[12:15] *** vv3 left
[12:15] <lizmat> m: loop { FIRST last }

[12:15] <camelia> rakudo-moar 2ef888: OUTPUT«[DISLOCATED MESSAGE] Useless use of LOOP_BLOCK_1 symbol in sink context␤»

[12:16] *** vv3 joined
[12:16] *** vv3 left
[12:16] <lizmat> golfed ^^^

[12:16] <dalek> DBIish: 1e86465 | (Sylvain Colinet)++ | lib/DBDish/Role/StatementHandle.pm6:

[12:16] <dalek> DBIish: Remove fetch_typedhash/fetch_alltypedhash, there were already marked as DEPRECATED

[12:16] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/1e86465d7f

[12:16] <dalek> DBIish: 19c6a1e | (Sylvain Colinet)++ | lib/DBDish/Role/StatementHandle.pm6:

[12:16] <dalek> DBIish: forget to remove something

[12:16] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/19c6a1efa5

[12:16] <dalek> DBIish: b6a92ad | Skarsnik++ | lib/DBDish/Role/StatementHandle.pm6:

[12:16] <dalek> DBIish: Merge pull request #43 from Skarsnik/master

[12:16] <dalek> DBIish: 

[12:16] <dalek> DBIish: Remove fetch_typedhash/fetch_alltypedhash, there were DEPRECATED

[12:16] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/b6a92ad019

[12:16] *** vv3 joined
[12:16] *** vv3 left
[12:16] <Skarsnik> PR are quite noisy x)

[12:17] *** zengargoylew left
[12:17] *** vv3 joined
[12:17] <mre> lizmat: is that issue just caused by using FIRST in a void context loop?

[12:18] *** zengargoylew joined
[12:18] *** hankache left
[12:19] <lizmat> m: my $a = loop { FIRST last }

[12:19] <camelia> rakudo-moar 2ef888: OUTPUT«5===SORRY!5=== Error while compiling /tmp/G_1SVpm7ig␤Undeclared routine:␤    loop used at line 1␤␤»

[12:19] <lizmat> m: my $a = do loop { FIRST last }

[12:19] <camelia> rakudo-moar 2ef888: OUTPUT«===SORRY!===␤Cannot find method 'CURSOR'␤»

[12:19] <lizmat> mre: not sure

[12:19] <mre> lizmat: could that be related to the fix for UNDO in while loops that was done the other day?

[12:20] <mre> lizmat: I am happy to write a test for it if you want.

[12:20] <mre> (when I understand what the expected result should be)

[12:20] <lizmat> tests are always good (well, generally :-)

[12:20] <lizmat> well, that's the problem, I'm not sure

[12:20] <mre> lizmat: (on that can you merge a pull request fixing a rakudo test)

[12:22] <lizmat> afk for a bit

[12:22] *** vv3 left
[12:23] *** vv3 joined
[12:23] *** vv3 left
[12:24] *** vv3 joined
[12:24] *** vv3 left
[12:25] *** vv3 joined
[12:25] *** vv3 left
[12:25] *** vv3 joined
[12:29] *** vv3 left
[12:30] *** kid51 joined
[12:33] <El_Che> I see the metamodel has an add_method and add_private_method method. It there something to replace a private method (e.g. for mocking a method doing external connections). I guess I could test a sub class for that

[12:34] <timotimo> mre, i think you were creating a range with ^*

[12:36] <timotimo> m: (1..10).map( ^* ).map(*.say)

[12:36] <camelia> rakudo-moar 2ef888: OUTPUT«^1␤^2␤^3␤^4␤^5␤^6␤^7␤^8␤^9␤^10␤»

[12:36] <timotimo> m: (1..10).map( ^* ).map(*.list.say)

[12:36] <camelia> rakudo-moar 2ef888: OUTPUT«(0)␤(0 1)␤(0 1 2)␤(0 1 2 3)␤(0 1 2 3 4)␤(0 1 2 3 4 5)␤(0 1 2 3 4 5 6)␤(0 1 2 3 4 5 6 7)␤(0 1 2 3 4 5 6 7 8)␤(0 1 2 3 4 5 6 7 8 9)␤»

[12:36] <timotimo> m: (1..10).map( ^* ).map({ $_.list.say; say $_ > 10 })

[12:36] <camelia> rakudo-moar 2ef888: OUTPUT«(0)␤False␤(0 1)␤False␤(0 1 2)␤False␤(0 1 2 3)␤False␤(0 1 2 3 4)␤False␤(0 1 2 3 4 5)␤False␤(0 1 2 3 4 5 6)␤False␤(0 1 2 3 4 5 6 7)␤False␤(0 1 2 3 4 5 6 7 8)␤False␤(0 1 2 3 4 5 6 7 8 9)␤False␤»

[12:36] <timotimo> m: (1..10).map( ^* ).map({ $_.list.say; say $_ > 5 })

[12:36] <camelia> rakudo-moar 2ef888: OUTPUT«(0)␤False␤(0 1)␤False␤(0 1 2)␤False␤(0 1 2 3)␤False␤(0 1 2 3 4)␤False␤(0 1 2 3 4 5)␤True␤(0 1 2 3 4 5 6)␤True␤(0 1 2 3 4 5 6 7)␤True␤(0 1 2 3 4 5 6 7 8)␤True␤(0 1 2 3 4 5 6 7 8 9)␤True␤»

[12:37] <timotimo> there you can see why it still aborted after 10

[12:37] <timotimo> because the > operator interpreted the list as the number of its elements

[12:38] <timotimo> and since you were getting ^* evaluated against the last element in the sequence, it was growing more and more

[12:38] *** ab6tract joined
[12:38] <ab6tract> El_Che: sounds like a use case for MONKEY-TYPING

[12:39] <mre> timotimo: ah makes sense

[12:40] <ab6tract> m: use MONKEY-TYPING; augment class Str { method Rat { "ooo you dirty rat! i'm mocking you lol " ~ self } }; "foo".Rat

[12:40] <camelia> rakudo-moar 2ef888: ( no output )

[12:40] <ab6tract> m: use MONKEY-TYPING; augment class Str { method Rat { "ooo you dirty rat! i'm mocking you lol " ~ self } }; say "foo".Rat

[12:40] <camelia> rakudo-moar 2ef888: OUTPUT«ooo you dirty rat! i'm mocking you lol foo␤»

[12:41] *** kjs_ left
[12:41] <ab6tract> El_Che: note that this does not populate to subclasses yet, afaik

[12:42] *** pierre-vigier joined
[12:45] <mre> https://gist.github.com/ungrim97/9434cc56e7544c1c59ae <-- Any one have any ideas why this if failing to install

[12:51] <lucasb> I've never hit this "Could not find symbol '&bool'" error because I always starting with a clean environment. But, by reading the backlog, the answer is always to nuke everything.

[12:53] *** pierre-vigier left
[13:02] <dalek> rakudo/nom: 8f1d504 | (Mike Eve)++ | t/01-sanity/55-use-trace.t:

[13:02] <dalek> rakudo/nom: Fixed test broken by 7f3032685

[13:02] <dalek> rakudo/nom: 

[13:02] <dalek> rakudo/nom: Line numbers in errors/trace are now "line $number" rather than

[13:02] <dalek> rakudo/nom: ":$number"

[13:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f1d5049ce

[13:02] <dalek> rakudo/nom: 939c94b | lizmat++ | t/01-sanity/55-use-trace.t:

[13:02] <dalek> rakudo/nom: Merge pull request #650 from ungrim97/nom

[13:02] <dalek> rakudo/nom: 

[13:02] <dalek> rakudo/nom: Fixed test broken by 7f3032685

[13:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/939c94b490

[13:05] <mre> lucasb: cheers will try that

[13:05] <mre> lizmat: thanks

[13:06] *** ab6tract left
[13:06] *** zhi joined
[13:07] *** kjs_ joined
[13:07] <timotimo> thank you, mre :)

[13:08] <Skarsnik> ok, time to get lost in bitsec hell!

[13:09] <dalek> rakudo/nom: 4af3ff0 | lizmat++ | docs/announce/2015.12.md:

[13:09] <dalek> rakudo/nom: Add Mike Eve to list of contributors

[13:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4af3ff072a

[13:10] <mre> lizmat: I suspect that I am in the list of contributers as Mike Francis (Finally got round to updating my name in gitconfig after almost a year of marriage)

[13:10] <lizmat> ah, ok, so which name would you like to have in there ?

[13:10] <mre> Mike Eve please

[13:10] <timotimo> the new one , i'd expect :)

[13:11] <mre> :D

[13:11] <Skarsnik> I am not in! (but who care!)

[13:12] <mre> Skarsnik: :(

[13:12] <dalek> rakudo/nom: 5b377cc | lizmat++ | docs/announce/2015.12.md:

[13:12] <dalek> rakudo/nom: Mike Eve was Mike Francis

[13:12] <dalek> rakudo/nom: 

[13:12] <dalek> rakudo/nom: As requested at http://irclog.perlgeek.de/perl6/2015-12-24#i_11770306

[13:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5b377cc15b

[13:13] <lizmat> Skarsnik: with which name would you like to be  in?

[13:13] <Skarsnik> Sylvain Colinet

[13:14] <dalek> rakudo/nom: da1ad00 | lizmat++ | docs/announce/2015.12.md:

[13:14] <dalek> rakudo/nom: Add Skarsnik to list of contributors

[13:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da1ad00b9d

[13:15] <lizmat> any new contributors that aren't in the list yet ?

[13:16] <Skarsnik> Thanks!

[13:18] *** rurban1 left
[13:19] *** jp6 joined
[13:19] *** rurban joined
[13:21] <BooK> lizmat: maybe add my nickname ;-)

[13:21] <BooK> so is Christmas today or tomorrow?

[13:21] <BooK> which TZ?

[13:21] *** xinming joined
[13:23] <lizmat> tomorrow

[13:24] <BooK> +0000 ?

[13:24] <lizmat> as BooK or as Philippe Bruhat ?

[13:24] *** xinming_ left
[13:24] <BooK> Philippe Bruhat (BooK)

[13:25] <lizmat> you were already in there :-)  but now corrected  :-)

[13:25] *** kjs_ left
[13:25] <BooK> I wouldn't have said anything if I wasn't already  in the list

[13:25] <dalek> rakudo/nom: 89cdb53 | lizmat++ | src/core/Dateish.pm:

[13:25] <dalek> rakudo/nom: Can use native ints in daycount calculation

[13:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/89cdb53246

[13:25] <dalek> rakudo/nom: 491f775 | lizmat++ | docs/announce/2015.12.md:

[13:25] <dalek> rakudo/nom: Philippe Bruhat is BooK

[13:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/491f775afe

[13:27] *** Actualeyes joined
[13:27] <lizmat> can anybody tell me why DateTime needs a dedicated clone method ?

[13:27] *** patrickas joined
[13:27] <BooK> now is the time where the more minor contributors become the more vocal :-)

[13:28] <Skarsnik> lizmat, what does the clone method do ? x)

[13:28] *** rindolf left
[13:28] *** kjs_ joined
[13:29] <lizmat> m: class A { has $.a; has $.b }; A.new(:42a,:666b).clone(:67a).say  # create a clone, with possibly changed attributes

[13:29] <camelia> rakudo-moar 939c94: OUTPUT«A.new(a => 67, b => 666)␤»

[13:30] *** badsanta joined
[13:30] <patrickas> Hello all, I just thought I drop by 5 years later and wish you all a merry christmas :-)

[13:30] <Skarsnik> Merry christams to you them ^^

[13:30] <timotimo> lizmat: maybe because it wants to verify the changes?

[13:31] <badsanta> m: 5⁸⁸ == 5 × × 88 

[13:31] <camelia> rakudo-moar 491f77: OUTPUT«5===SORRY!5=== Error while compiling /tmp/87Hki9ckVP␤Preceding context expects a term, but found infix × instead␤at /tmp/87Hki9ckVP:1␤------> 035⁸⁸ == 5 × ×7⏏5 88␤»

[13:32] <lizmat> timotimo: ah yes, I guess

[13:32] <badsanta> m: 5⁸⁸ == 5 ** 88 

[13:32] <camelia> rakudo-moar 491f77: OUTPUT«WARNINGS for /tmp/Q9jXvTdwYs:␤Useless use of "==" in expression "⁸⁸ == 5 **" in sink context (line 1)␤»

[13:33] <timotimo> m: say 5⁸⁸ == 5 ** 88

[13:33] <camelia> rakudo-moar 491f77: OUTPUT«True␤»

[13:34] *** rurban left
[13:35] *** vv3 joined
[13:35] *** vv3 left
[13:36] *** vv3 joined
[13:36] *** vv3 left
[13:36] *** vv3 joined
[13:36] *** vv3 left
[13:37] *** vv3 joined
[13:37] *** vv3 left
[13:38] *** vv3 joined
[13:38] *** jcrespo joined
[13:39] <timotimo> the last advent post has surpassed 2k views

[13:39] <timotimo> er, no

[13:39] <timotimo> the *day* has

[13:40] <timotimo> 1.3k direct views on the latest post, 525 views on the front page, which includes it

[13:41] <st_iron> and my comment is still under moderation :)

[13:41] <timotimo> oh

[13:41] <timotimo> let me have a look

[13:41] *** rindolf joined
[13:41] *** jp6 left
[13:42] <st_iron> ;)

[13:42] <timotimo> i didn' tget any notifications and on the page i looked at all the time it didn't even show comments

[13:42] *** RabidGravy joined
[13:42] <timotimo> i had to click the wp admin button on the bottom left

[13:43] <st_iron> yeah, I had the same problem with wp

[13:43] *** vv3 left
[13:43] <badsanta> m: say 5⁽⁸⁸⁾

[13:43] <camelia> rakudo-moar 491f77: OUTPUT«5===SORRY!5=== Error while compiling /tmp/vOdzYdvBI0␤Bogus postfix␤at /tmp/vOdzYdvBI0:1␤------> 3say 57⏏5⁽⁸⁸⁾␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statem…»

[13:43] *** jcrespo left
[13:43] <dalek> doc: c20d1c8 | lizmat++ | doc/Type/DateTime.pod:

[13:43] <dalek> doc: Check validity of documented DateTime methods

[13:43] <dalek> doc: review: https://github.com/perl6/doc/commit/c20d1c85ac

[13:44] <timotimo> wordpress has become so much better since i started using it for the weekly

[13:44] <timotimo> er

[13:44] <timotimo> i meant to say

[13:44] <timotimo> wordpress has become so much *worse* since i started using it for the weekly

[13:45] <lizmat> before / after, left / right, up / down,   it's all relative  :-)

[13:45] *** vv3 joined
[13:45] *** vv3 left
[13:46] <dalek> rakudo/nom: 09ca24c | lizmat++ | src/core/DateTime.pm:

[13:46] <dalek> rakudo/nom: No need to make YAH (YetAnotherHash) when cloning

[13:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/09ca24c284

[13:46] *** vv3 joined
[13:47] <lizmat> these conclude my commits for today

[13:47] <st_iron> let's write a great blog saas in perl6 :)

[13:48] *** jme` left
[13:50] *** patrickz joined
[13:50] <patrickz> Hi everyone and merry Christmas!

[13:51] *** vv3 left
[13:51] <patrickas> patrickz: I feel a great disturbance in the force!

[13:52] <patrickz> Oh nose!

[13:52] <patrickz> Right there in the middle of your face!

[13:52] *** vv3 joined
[13:52] *** vv3 left
[13:53] <patrickz> rakudo.org/how-to-get-rakudo/ should be updated: The rakudobrew installation instructions do not reflect what rakudobrew itself recommends.

[13:53] *** vv3 joined
[13:53] *** vv3 left
[13:53] <patrickz> git clone https://github.com/tadzik/rakudobrew %USERPROFILE%\rakudobrew

[13:53] <patrickz> SET PATH "%USERPROFILE%\rakudobrew\bin;%PATH%"

[13:53] <RabidGravy> st_iron, that's how I got in this mess in the first place

[13:53] <patrickz> echo 'eval "$(rakudobrew init -)"' >> ~/.profile

[13:53] <patrickz> would be better

[13:54] *** vv3 joined
[13:54] *** vv3 left
[13:54] <lizmat> brb

[13:54] *** vv3 joined
[13:55] <geekosaur> patrickz, the quoted stuff indicates Windows, there may not be a Unix-like shell in play

[13:56] <patrickz> geekosaur You're right!

[13:57] *** felher joined
[13:57] <patrickz> Then copying the "Installation" part from https://github.com/tadzik/rakudobrew might be the best idea.

[13:57] *** patrickas left
[13:58] *** zakharyas joined
[13:59] *** vv3 left
[13:59] *** AndyDee joined
[14:00] *** vv3 joined
[14:00] *** vv3 left
[14:01] *** vv3 joined
[14:01] *** vv3 left
[14:02] *** vv3 joined
[14:02] *** vv3 left
[14:02] *** perlpilot joined
[14:03] *** vv3 joined
[14:06] *** kjs_ left
[14:07] *** vv3 left
[14:08] *** felher left
[14:08] <lizmat> I wish everybody a very nice Christmas Eve...

[14:08] <lizmat> see you tomorrow

[14:08] <lizmat> afk for the rest of the day&

[14:08] <RabidGravy> :)

[14:08] <perlpilot> lizmat: you too!

[14:08] <st_iron> merry christmas to you too

[14:09] <RabidGravy> Just in case you're into a spot of classic techno and getting festive https://soundcloud.com/ibanzero/voltereta

[14:10] *** kjs_ joined
[14:10] *** felher joined
[14:11] *** vv3 joined
[14:12] *** patrickz left
[14:13] *** telex left
[14:13] <AlexDaniel> oh, 24th of December! What a great day for cycling

[14:14] <Skarsnik> AlexDaniel, hey, can you see if the last dbiish commit fix your timestamp issue? x)

[14:14] <AlexDaniel> well, I had exactly the same thing done locally

[14:14] *** telex joined
[14:14] <AlexDaniel> I can upgrade it just to make sure

[14:15] <AlexDaniel> Skarsnik: I don't really like that it is Str and not DateTime

[14:15] <AlexDaniel> Skarsnik: or any other type… Instant or whatever it should be

[14:15] <Skarsnik> Other people in dbiish seem to not like being too clever with type ^^

[14:16] *** vv3 left
[14:16] <Skarsnik> so I left it as discusion

[14:16] <Skarsnik> Because I already though of returning date for date field

[14:16] *** vv3 joined
[14:16] *** vv3 left
[14:17] <AlexDaniel> Skarsnik: fine, whatever. By the way, what is going to happen if some type is not listed in Native.pm6?

[14:17] <Skarsnik> I make it default to Str

[14:17] *** vv3 joined
[14:17] *** vv3 left
[14:17] <RabidGravy> I'm in the "leave it to a higher level abstraction" party by the way

[14:18] <AlexDaniel> Skarsnik: ok, great then

[14:18] *** vv3 joined
[14:18] *** vv3 left
[14:18] <Skarsnik> You could try removing the timestamp stuff, but it should be fine

[14:18] *** cpage left
[14:19] *** vv3 joined
[14:20] <Skarsnik> RabidGravy, I will need to have hight level abstraction have access to the native type

[14:20] <AlexDaniel> Skarsnik: “No appropriate parametric role variant available for 'NativeCall::Native'”

[14:20] <AlexDaniel> what the

[14:20] <Skarsnik> duh

[14:20] <AlexDaniel> that's when I try to install it

[14:22] <Skarsnik> old rakudo?

[14:22] <Skarsnik> like 4 days olds

[14:23] <AlexDaniel> g9a01b4b

[14:23] *** jcrespo joined
[14:23] <Skarsnik> because the lib version stuff make dbiish don't work with old rakudo

[14:24] *** vv3 left
[14:24] <AlexDaniel> 2 days old

[14:24] *** raiph joined
[14:24] <Skarsnik> hm

[14:25] <Skarsnik> check NC code if the NativeCall::Native role accept List in the where

[14:26] *** kjs_ left
[14:26] *** vv3 joined
[14:26] *** vv3 left
[14:27] *** vv3 joined
[14:27] <AlexDaniel> Skarsnik: I'll just build the newest version hoping that it will solve it somehow

[14:28] <Skarsnik> timotimo, I found the faulty commit: 02588190492349fabde00c5a15b873ea61a9333e is the first bad commit

[14:28] <Skarsnik>  so I can blame TimToady 

[14:30] *** xinming_ joined
[14:32] *** vv3 left
[14:32] *** xinming left
[14:33] *** vv3 joined
[14:33] *** vv3 left
[14:34] *** vv3 joined
[14:34] *** vv3 left
[14:34] *** kaare_ joined
[14:34] *** AlexDani` joined
[14:34] *** vv3 joined
[14:34] *** vv3 left
[14:35] *** vv3 joined
[14:36] *** CIAvash left
[14:37] *** tadzik left
[14:37] *** AlexDaniel left
[14:38] *** tadzik joined
[14:39] *** AlexDani` left
[14:40] <perlpilot> Does DBIish keep the original column information around somewhere?  (just thinking that if dates/timestamps come a cross as strings, you'd want the original type so that you could make something akin to DBIC::InflateColumn::DateTime)

[14:40] *** vv3 left
[14:41] *** vv3 joined
[14:41] *** vv3 left
[14:42] *** vv3 joined
[14:42] *** vv3 left
[14:42] *** duck_ joined
[14:42] <timotimo> Skarsnik: well, i'm glad it wasn't one of my (few) commits :)

[14:42] *** duck_ is now known as Guest85042

[14:42] *** Guest85042 left
[14:42] *** vv3 joined
[14:42] *** vv3 left
[14:43] *** vv3 joined
[14:44] *** jcrespo left
[14:45] *** pierre-vigier joined
[14:46] <lucasb> panda is taking forever to install some modules

[14:46] <lucasb> only some modules. I experienced it with Bailador and 007

[14:46] <tadzik> hmm

[14:46] <yoleaux> 02:12Z <llfourn> tadzik: PR for your consideration https://github.com/tadzik/Shell-Command/pull/8 :)

[14:47] <tadzik> which part of the process?

[14:47] <lucasb> the "==> Installing" part

[14:47] <tadzik> llfourn++, and lizmat++

[14:47] <tadzik> lucasb: ah, yes, copying files is notoriously slow

[14:47] <lucasb> but maybe it's not panda's issue

[14:47] <lucasb> maybe it has something to do with precomp

[14:48] <tadzik> that's about as precise as I nailed it down to

[14:48] *** vv3 left
[14:48] <lucasb> I run this cmdline: find ~/.perl6 -printf "%C+ %f\n" | sort | less

[14:48] <llfourn> :D merry christmas tadzik & all ( it is actually christmas where I am )

[14:49] <tadzik> llfourn: likewise, merry christmas!

[14:49] <lucasb> and I can see the *.rev-deps files are the ones getting modified last

[14:50] <lucasb> tadzik: by "notoriously slow" do you mean like more than 30 minutes? that's what is happening here :)

[14:50] <llfourn> lucasb: is it hanging?

[14:50] <tadzik> llfourn: wooo what

[14:50] <tadzik> lucasb: ^

[14:50] <tadzik> lemee try :)

[14:51] <llfourn> panda has has a few hanging issues in the past few days...

[14:51] <lucasb> llfourn, tadzik: idk if its hanging, it seems to be doing its job somehow :)

[14:51] <tadzik> :P

[14:51] <El_Che> hi

[14:51] <RabidGravy> Another one down https://github.com/jonathanstowe/Audio-Sndfile/releases/tag/v0.0.8 only 26 more to do

[14:52] <lucasb> I'm just hopefull it will end. because I waited very long for Bailador and it didn't end after a while

[14:52] *** vv3 joined
[14:52] <tadzik> RabidGravy: what's your quest?

[14:52] *** xpen joined
[14:52] <RabidGravy> fix all my modules before midnight ;-)

[14:52] <tadzik> ah :)

[14:52] <RabidGravy> only three work for sure at the moment

[14:53] <tadzik> I should teach smoker to only run stuff for github user X and then scream at me on the console

[14:53] <El_Che> so, what the plannig? Release at midnight at Larry's timezone or too optismistic?

[14:54] <RabidGravy> also at some point after the actual release I'm going to bounce all the modules to v0.1.0

[14:55] <lucasb> *I meant to say Bailador *did* end installing successfully, after a long while.

[14:55] <tadzik> lucasb: okay, panda is now "==> Installing Bailador" here

[14:55] <tadzik> let's see how it fares

[14:55] <tadzik> cpu is actually working hard

[14:56] <RabidGravy> El_Che, nothing much is broken. All the target RTs are done, no-one is going to push anything today so yeah I'd say

[14:56] <lucasb> I'll just abort the "==> Installing 007"... can't wait longer for this...

[14:56] *** vv3 left
[14:57] <tadzik> I'm now very interested in this

[14:57] *** vv3 joined
[14:57] *** vv3 left
[14:58] *** molaf left
[14:58] <lucasb> tadzik: I'll just repeat that I think this is not an issue with panda itself... It may be more like a precomp problem

[14:58] *** vv3 joined
[14:58] *** vv3 left
[14:58] <lucasb> because other modules install without any problem

[14:59] *** vv3 joined
[14:59] *** vv3 left
[14:59] <tadzik> yeah, I still want to know what's taking so long :)

[14:59] <tadzik> time for some print debugging

[15:00] <RabidGravy> I think that some low level stuff takes longer to compile

[15:00] *** vv3 joined
[15:00] <RabidGravy> I've noticed this with "trait heavy" stuff

[15:00] *** patrickz joined
[15:01] <mspo> many passes?

[15:02] <tadzik> argh

[15:02] <tadzik> now CUR doesn't allow installation of stuff with the same version

[15:03] <tadzik> I don't like that

[15:03] <tadzik> that makes module development a PITA

[15:03] *** AlexDani` joined
[15:03] <AlexDani`> Skarsnik: it didn't help

[15:03] *** bobv joined
[15:03] *** AlexDani` is now known as AlexDaniel

[15:04] *** bobv left
[15:04] <AlexDaniel> Skarsnik: same error on lines 14 and 52 in this file https://github.com/perl6/DBIish/blob/master/lib/DBDish/Pg/Native.pm6#L52

[15:04] <Skarsnik> dug

[15:04] *** vv3 left
[15:05] <Skarsnik> perlpilot, not for now

[15:05] *** vv3 joined
[15:05] *** vv3 left
[15:06] *** lichtkind joined
[15:06] <RabidGravy> tadzik, use the --force

[15:06] <Skarsnik> AlexDaniel, I am confused. did you check the file it point out?

[15:06] <Skarsnik> it should not fail like that x)

[15:07] <Skarsnik> tadzik, merge my pr so I can rework on Discord! x)

[15:07] <tadzik> Skarsnik: but you can make it work using the custom unmarshaler :)

[15:07] <tadzik> and it turns out to be easier than we both thought

[15:07] <Skarsnik> merge the null stuff at least x)

[15:08] <tadzik> oh, oh

[15:08] <Skarsnik> if you don't want to keep the Int

[15:08] <AlexDaniel> Skarsnik: uhmmh, which file?

[15:08] <Skarsnik> AlexDaniel, the error point you to a file (the sha of NC)?

[15:08] <tadzik> Skarsnik: yes, I'll do the null thing

[15:09] <AlexDaniel> Skarsnik: that's the same file that I've linked

[15:09] <tadzik> I still have mixed feelings about the automatic Str-Int conversion

[15:09] <Skarsnik> AlexDaniel, I mean your local (precompiled) file

[15:11] <AlexDaniel> Skarsnik: that's exactly the same file, I've diffed it

[15:12] <Skarsnik> The Int thing I can work around with, well not typing the attribute, but the null was more trickyt x)

[15:12] <AlexDaniel> Skarsnik: or what do you mean?

[15:12] <Skarsnik> AlexDaniel, yes but you must have the can't find role thingy error pointing to the NativeCall.pm?

[15:12] *** lustlife left
[15:12] <tadzik> Skarsnik: does it not work to name it as Int but have a is unmarshalled-by('Int') or so?

[15:12] <tadzik> as RabidGravy pointed out?

[15:12] *** RabidGravy left
[15:12] <Skarsnik> No idea

[15:12] <AlexDaniel> Skarsnik: nope, it points to this file

[15:13] *** hankache joined
[15:13] *** Su-Shee left
[15:14] <tadzik> argh, now my panda broke because of the 'as' changes

[15:14] <AlexDaniel> tadzik: just edit the file

[15:14] <tadzik> for some reason, even if I update it to HEAD

[15:14] <Skarsnik> it seem like it using an old NC file

[15:14] <tadzik> yeah

[15:14] <timotimo> tadzik: because a panda lib is still pre-installed?

[15:14] <tadzik> I just nuked my installation

[15:14] <timotimo> in the sources?

[15:14] <hankache> hola!

[15:14] <AlexDaniel> tadzik: $x as Str to Str() $x and it will work

[15:14] <timotimo> hola hankache

[15:14] <Skarsnik> did you nuke the installed stuff?

[15:14] <tadzik> timotimo: well, 'rakudobrew build panda' should overwrite them, no?

[15:15] <timotimo> not necessarily

[15:15] <AlexDaniel> Skarsnik: I didn't, but I probably should

[15:15] <AlexDaniel> jeez, these issues are annoying

[15:15] <AlexDaniel> Skarsnik: anyway, I have to go now. Thanks for your help

[15:15] *** regreg joined
[15:16] <Skarsnik> timotimo, Could I fill a rakudo bug for my bug, even if I don't golf it?

[15:18] *** xpen left
[15:18] *** patrickz left
[15:19] *** st_iron left
[15:19] *** Deepak_ joined
[15:19] *** AlexDaniel left
[15:19] *** st_iron joined
[15:19] *** Su-Shee joined
[15:23] <Skarsnik> use experimental :pack; it's from today? x)

[15:23] *** rurban joined
[15:23] *** muraiki joined
[15:24] <timotimo> Skarsnik: i forgot what bug you had where ...

[15:24] *** pierre-vigier left
[15:24] <Skarsnik> the Can't find infix < A in my Gumbo module (on a given switch)

[15:25] <timotimo> please golf it

[15:28] <Skarsnik> I have no idea where to start x)

[15:31] <timotimo> it's a parse error, right?

[15:31] <timotimo> just cut out things all over the place

[15:31] <timotimo> wait ... it's not a parse error, it's a parse mitsake or something like that

[15:32] *** rurban left
[15:32] <Skarsnik> it's a call error? "Cannot call infix:(Any, Int)"

[15:33] <nine> tadzik: it's not copying but precompilation onbinstall that's slow

[15:34] <nine> lucasb: ^^^

[15:34] <timotimo> Skarsnik: can you get rid of all but that one function and call it in isolation?

[15:36] * thomax waves & shouts Ho Ho Ho

[15:36] <tadzik> ah

[15:38] *** hankache left
[15:38] <thomax> is p6.c official now?

[15:38] <FROGGS> not yet I think

[15:39] <timotimo> not completely, no

[15:39] *** andreoss left
[15:39] <timotimo> wait for the tag in the perl6/roast repository

[15:39] <timotimo> that'll be the release of the language version

[15:39] *** xfix left
[15:39] <timotimo> and then we'll tag a rakudo version that does well enough with that language version

[15:39] <timotimo> and then a rakudo star, so that we also have panda and a few modules bundled

[15:40] <thomax> nice! what else is in the package?

[15:40] <awwaiid> thomax: https://github.com/tadzik/Task-Star/blob/master/META.info

[15:41] <awwaiid> some delicious stuff!

[15:41] <timotimo> rakudo star also comes with a lovely .pdf introduction course

[15:41] <timotimo> i wonder if we should also ship the perl6intro.com in rakudo star?

[15:41] <thomax> nice!

[15:41] <timotimo> .ask hankache if we should perhaps put the perl6intro text into rakudo star tarballs and such?

[15:41] <yoleaux> timotimo: I'll pass your message to hankache.

[15:42] <thomax> and don't forget to press release it!

[15:44] <timotimo> i expect the perl foundation would be able to do something like a press release?

[15:45] <timotimo> i personally have no clue how press releases work

[15:45] <thomax> let's hope the best

[15:46] *** Deepak_ left
[15:47] *** ChoHag joined
[15:49] <Skarsnik> hm, that work with just calling the method

[15:49] *** xinming_ left
[15:49] <Skarsnik> I updated rakudo too in between also x)

[15:49] *** xinming joined
[15:53] *** Su-Shee left
[15:54] <ChoHag> How can I set a value to the result of breaking early from looping over another value?

[15:55] <ChoHag> ie. better than my $result = sub { loop (...) { return processed($_) if $_.ok } }()

[15:55] <Skarsnik> last

[15:55] <Skarsnik> oh in a loop

[15:55] <grondilu> { value; last; }?

[15:56] <ChoHag> Does the last return the value of the previous expression?

[15:56] <grondilu> m: say do loop { pi; last }

[15:56] <camelia> rakudo-moar 09ca24: OUTPUT«WARNINGS for /tmp/iycH0KttNW:␤Useless use of constant value pi in sink context (line 1)␤()␤»

[15:56] <grondilu> apparently not, my bad

[15:57] <nine> Put the loop in a sub and return?

[15:57] <grondilu> javascript-style, basically

[15:57] <ChoHag> Well that's what I did, but it looks clunky.

[15:57] *** badsanta left
[15:57] <grondilu> I like it, personally

[15:57] <nine> subs should be small anyway ;)

[15:59] <perlpilot> m: my $v = do loop (my $i = 0; $i < 10; $i++) { say $i };

[15:59] <camelia> rakudo-moar 09ca24: OUTPUT«(timeout)0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0␤0…»

[15:59] <perlpilot> bug!

[15:59] <grondilu> took a while

[15:59] <TimToady> it loops forever

[15:59] <yoleaux> 08:54Z <nine> TimToady: That must be the lovliest announcement I've ever read.

[15:59] <grondilu> oh yeah, and wrong

[15:59] <konobi> happy perl6 day y'all!

[15:59] *** kjs_ joined
[16:00] <timotimo> merry sixmas

[16:00] *** pierre-vigier joined
[16:01] <timotimo> i must admit the last paragraph of the advent post reads a whole lot like "here you go. perl6 is released."

[16:01] <ChoHag> Oh is it?

[16:02] <perlpilot> timotimo:  Every month, like clock work  ;)

[16:02] *** pierre-vigier left
[16:02] <timotimo> my clock works more often than once a month, to be honest

[16:02] <perlpilot> If we'd been tagging roast every month too, we could call it "done"  (for some values done)

[16:04] *** vendethiel joined
[16:04] *** mohae joined
[16:05] <perlpilot> I bet on boxing day people are going to be like, "Where's my Perl 6 MSI?"  and "Where's my Perl 6 RPM?"  etc.

[16:05] <thomax> it's official?

[16:06] *** thowe joined
[16:06] * grondilu is always a bit confused when people talk about "boxing day".  Always thinks about the punching sport. 

[16:07] *** kjs_ left
[16:07] <flussence> perlpilot: I'm trying to make sure gentoo has some sort of perl6 package ready to go at release, even if nobody else has shown any interest :)

[16:08] <perlpilot> grondilu: For those people who don't quite get the Christmas spirit, that could be the result of the christmas festivities

[16:08] <perlpilot> grondilu: well ... less like "sport" and more like "fight"

[16:08] <timotimo> well, not everybody is aware that what's just been released is the spec test suite

[16:08] <Skarsnik> one of the dep of H:UA suffer from the as stuff

[16:08] *** zhi left
[16:09] <timotimo> which one is that?

[16:09] <Skarsnik> IO::Capture::Simple

[16:09] <LLamaRider> merry perl6 day to everyone! :)

[16:11] <konobi> grondilu: it originates from giving a box filled with stuff as a gift to the "help"

[16:11] <Skarsnik> sub prints-stdout-ok (Callable $code, $expected as Str, $reason = '') does the as keyword get removed?

[16:11] *** kjs_ joined
[16:12] *** jeturcotte joined
[16:12] <jeturcotte> ahoyhoy

[16:13] <perlpilot> greetings jeturcotte 

[16:14] *** pierre-vigier joined
[16:14] <vendethiel> merry sixy

[16:14] <vendethiel> also o/, #perl6.

[16:14] <jeturcotte> I come to poke around for wisdom, re: io::socket::async and why I can't telnet to the example given on perl6.org

[16:14] <jeturcotte> im missing out on some fundamental little bit

[16:15] <awwaiid> greetings jeturcotte

[16:16] <jeturcotte> *points*

[16:16] <awwaiid> lemme see if I can get it to work

[16:16] <nine> Skarsnik: yes

[16:16] <nine> use Str() ibstead

[16:16] <perlpilot> Skarsnik: apparently.  See 4355eacf825ff33f906ae75b2d613ed57e228390

[16:16] <perlpilot> Str() implies Str(Any), right?

[16:16] <jeturcotte> i can telnet to the inet version, but have had equally little luck separating it off onto a separate thread, whereas that works fine with the async one, but the communication back and forth is in some way different 

[16:16] <awwaiid> jeturcotte: er... which example?

[16:17] <jeturcotte> sample server on http://doc.perl6.org/type/IO::Socket::Async

[16:17] <lucasb> awwaiid: Hi. I'm sorry to be picky, but can you review your doc commit about hash literals?

[16:17] <Skarsnik> It's getting annoying having half the ecosystem that broke at each commit ~~

[16:18] *** cpage joined
[16:18] <jeturcotte> i can telnet TO it, but not have a conversation as is

[16:18] <awwaiid> ah sure lucasb 

[16:18] <jeturcotte> and i don't comprehend enough of the fundamentals yet to anticipate where the problem is

[16:19] *** dwarring left
[16:19] <FROGGS> o/

[16:19] *** xfix joined
[16:19] <jeturcotte> alternatively, their sample client DOES communicate, but I'd rather not make a client when telnet is sufficient

[16:19] *** pierre-vigier left
[16:19] <awwaiid> lucasb: mmm, I'm not sure to what you are referring

[16:20] <lucasb> awwaiid: :{} is syntax for an object hash

[16:20] *** pierre-vigier joined
[16:20] <awwaiid> ah great! Can you point me to the Synopsis or something for that so I can fix it?

[16:20] <lucasb> but to be honest, I don't know how to put it into words :)

[16:21] <awwaiid> I asked some folks about :{} but nobody answered so onward I drove :)

[16:21] <mre> how does one go about debugging nqp? (as in print string of something)

[16:21] <lucasb> it's ok. thanks for adding to the docs, awwaiid++

[16:22] *** skids joined
[16:22] <lucasb> idk if this :{...} has made it into the synopses... I'll take a look

[16:22] <awwaiid> but ya -- explain it to me or link it to meme and I'll fix

[16:23] *** kjs_ left
[16:24] <Skarsnik> I can't even insall Inline::Perl5 (╯°□°）╯︵ ┻━┻

[16:24] *** zakharyas left
[16:24] <mre> Skarsnik: I couldn't either

[16:25] <flussence> ooc, who's our designated driver for rakudo 2015.12 and/or star?

[16:26] <Skarsnik> Inline::Perl5 is in Star? x)

[16:28] <jeturcotte> reading rfc 854 ... might as well start from the beginning

[16:29] *** andreoss joined
[16:30] *** kjs_ joined
[16:31] *** Mosai joined
[16:31] <lucasb> awwaiid: http://design.perl6.org/S03.html#line_181

[16:31] <lucasb> iow, :{...} isn't to disambiguate between hash and blocks. it's a special hash composer.

[16:32] *** ghost_ joined
[16:32] <lucasb> and doing 'my %when = :{ ... }' results in a warning, just like normal 'my %h = { ... }'

[16:33] <TimToady> yes, that's a one-arg thing, not a type thing

[16:33] <TimToady> it'll iterate either {} or :{} for a list

[16:33] *** pierre-vigier left
[16:33] <TimToady> but it's probably not what was intended

[16:34] *** totimkopf joined
[16:34] <awwaiid> cool, thanks lucasb, I'll fix the doc

[16:35] *** xinming left
[16:35] *** xinming joined
[16:35] <awwaiid> jeturcotte: running the server and then telnetting into it isn't behaving how I expect either, so that's good

[16:36] <jeturcotte> aye; the INET one just works, but the async one cooperates with my having a separate process/thread going

[16:36] *** pierre-vigier joined
[16:36] <jeturcotte> i just get the feeling one end or the other doesn't understand the other

[16:36] <jeturcotte> as a connection is made

[16:37] <jeturcotte> but then there's no intelligible back and forth

[16:37] <jeturcotte> i need to understand how they're expected to work so I an diagnose

[16:37] <jeturcotte> reading in another screen

[16:38] *** kjs_ left
[16:38] <awwaiid> I'm surprised you can't assign a non-string-key hash to a %-var

[16:39] *** vv3 joined
[16:40] *** kjs_ joined
[16:40] *** jberger joined
[16:40] <jberger> I just read the p6advent post today and then read the backlog from the channel today

[16:41] <jberger> if there isn't some huge party popper popping, champaign pouring, release announcement today or tomorrow then you will have blown your chance for it

[16:41] <lucasb> iiuc, one *can* assign both {...} and :{...} to %-sigiled variables. it just emits a warning

[16:41] <jberger> this has to be the "get out the word" "its not vaporware" day(s)

[16:42] <lucasb> like I said the other day, a new user would maybe expect some symetry between 'my @a = [...]' and 'my %h = {...}'

[16:42] <jberger> and if its a dithering "we are committing to backwards compatibility" and "this is only for the test suite" then you lose the moment and no one will give you another such moment

[16:42] <jberger> land this one!

[16:42] <lucasb> that's why I suggested that this warning could be reconsidered

[16:44] *** vv3 left
[16:44] <jberger> right now I have nothing to link to hacker news

[16:44] <jberger> nothing to show a project manager

[16:44] <awwaiid> lucasb: ah, yes I see, does work with %h = :{ ... }, and seems totally fine despite the warning

[16:45] *** pierre-vigier left
[16:45] *** vv3 joined
[16:45] *** vv3 left
[16:45] *** darkstar joined
[16:45] *** darkstar is now known as Guest20490

[16:45] *** pierre-vigier joined
[16:45] <awwaiid> jberger: For myself, I'm holding back until we can point at a full Rakudo + Task::Star / toolchain release :)

[16:45] *** vv3 joined
[16:45] *** vv3 left
[16:46] <jberger> is that tomorrow?

[16:46] *** Su-Shee joined
[16:46] <jberger> I'm not kidding, this is the moment

[16:46] <jberger> that advent post can't be "the announcement"

[16:46] <flussence> why not?

[16:46] *** Guest20490 left
[16:46] <awwaiid> mmm. dunno. ASAP I guess; I've only been working on the docs and those aren't nearly as ready as the rest, sadly.

[16:47] <jberger> it was cute, but it doesn't say anything to those outside the community

[16:47] <awwaiid> flussence: because I can't link my friends over to something to give it a spin :)

[16:47] <flussence> ah, it's not farmable for upvotes. gotcha.

[16:47] <jberger> that's what you need, cynical as it sounds

[16:47] <jberger> we need to get eyeballs

[16:48] <perlpilot> mre: nqp has say()

[16:48] <awwaiid> well in my case I'm not looking for upvotes, I'm looking for something that my friend scott can run on his machine

[16:48] *** molok joined
[16:48] <jberger> no, you need upvotes or scott doesn't ever consider this language

[16:48] <awwaiid> that too

[16:48] <awwaiid> but I'll take the long view on that

[16:48] <jberger> nor does scott's boss or his boss

[16:49] <jberger> 15 years of promising christmas isn't long view enough?!

[16:49] <dalek> doc: 958ca8a | (Brock Wilcox)++ | doc/ (2 files):

[16:49] <dalek> doc: Fix reference to :{} syntax

[16:49] <dalek> doc: review: https://github.com/perl6/doc/commit/958ca8aaf3

[16:49] *** xfix left
[16:49] *** lostinfog joined
[16:49] *** vv3 joined
[16:50] <awwaiid> jeturcotte: well, i have to go for a bit, I'll see if I can construct a working example later

[16:50] <lucasb> awesome, thanks awwaiid++

[16:50] <awwaiid> thanks for helping me understand :)

[16:51] <jeturcotte> no prob; this isn't terrible important anyhow... trying their bind-udp by getting errors on that, like maybe the documation's a bit aged on that part.

[16:51] <jeturcotte> have a good eve

[16:51] <mre> perlpilot: what about for things that don't stringify (hashes)

[16:52] *** vv3 left
[16:53] <jberger> would you all like me to write the press release?

[16:53] *** vv3 joined
[16:53] *** vv3 left
[16:54] <ribasushi> TimToady: ^^ having a relative outsider write one is likely rather sensible, I'd "thumb up" that

[16:54] *** vv3 joined
[16:54] *** vv3 left
[16:54] <flussence> depends; do you understand the language and community well enough to do it right?

[16:54] <mre> jberger: You could write one and let us review it :D

[16:54] *** vv3 joined
[16:54] *** vv3 left
[16:55] <jberger> "I, Larry Wall, along with the tireless team of developers that have helped me, am very happy to announce that after 15 years of development, the Perl6 spec has now reached a stable release ..."

[16:55] <jdv79> its a good point - why isn't tpf doing promotion or something

[16:55] <jdv79> isn't that part of what they are for

[16:55] *** vv3 joined
[16:55] <jberger> "I expect that within days or hours, implementations of the Perl6 spec, such as the Rakudo project will make their announcements of their v6.c releases"

[16:56] *** isBEKaml joined
[16:56] <jdv79> when will the release(s) be cut?  is that [Coke] solely?

[16:56] <flussence> jdv79: think so...

[16:57] <jdv79> [Coke]: what's happenin?

[16:57] <jberger> "This represents thousands of hours of effort by hundreds of developers over 15 years. The language is like nothing you've ever seen before, providing such features as ..."

[16:57] *** kjs_ left
[16:57] <jdv79> jberger: mabe a gist or a blog post that's not chopped up into irc sized chunks:)

[16:57] <jdv79> *maybe

[16:58] <jberger> flussence: notice that I don't have to know anything about the development process nor the community to do this

[16:58] <isBEKaml> jdv79: there's already one. It's up there on perl6advent

[16:58] <jberger> because its not for us and its not about that

[16:58] <isBEKaml> jdv79: https://perl6advent.wordpress.com/2015/12/24/an-unexpectedly-long-expected-party/

[16:58] <mre> jberger++

[16:58] *** skyheights joined
[16:58] <jdv79> that's not what jberger is looking for

[16:58] <jberger> its something that we can proudly point to outside of the perl bubble and get them to look

[16:58] <jberger> jdv79: thanks

[16:58] <isBEKaml> Ah, okay

[16:59] <mre> Yeah it needs to be synically markitable

[16:59] <jberger> larry's post is cute, we all like it

[16:59] <jberger> but that's not going to sell on hackernews

[16:59] <jberger> its not going to get tech writers to write about it

[16:59] <jberger> this story is interesting

[16:59] <isBEKaml> HN is a dour crowd

[16:59] <flussence> that's fine, we aren't trying to sell anything :)

[16:59] <jberger> but we have to make it accessible

[16:59] <jberger> flussence: if you aren't then this is all a waste

[17:00] <jberger> your aren't selling it for cash, but you should be selling it for eyeballs

[17:00] <isBEKaml> Do we already have R* distributions up anywhere?

[17:00] <jberger> s/your/you/

[17:00] *** vv3 left
[17:00] <mre> flussence: We really are trying to sell it. Not financially but in terms of use. I would very much like it to be used in companies and they sadly only will do that if it becomes fashionable.

[17:00] *** lichtkind left
[17:01] *** lichtkind joined
[17:01] *** vv3 joined
[17:01] *** vv3 left
[17:01] *** lichtkind left
[17:02] *** vv3 joined
[17:02] *** vv3 left
[17:02] <flussence> in all seriousness, I'd nominate raiph++ to write a press release. He's done an amazing job of that sort of thing over the past few years IMO.

[17:02] <jberger> then let raiph do it

[17:03] *** lichtkind joined
[17:03] <jberger> but someone really should

[17:03] <jberger> for all your sakes

[17:03] <jberger> you have put in tons of time

[17:03] <jberger> I WANT to see this get the attention it deserves

[17:03] <andreoss> .seen masak

[17:03] <yoleaux> I saw masak 22 Dec 2015 23:21Z in #perl6: <masak> 'night, #perl6

[17:03] *** vv3 joined
[17:04] *** Khisanth joined
[17:04] <Begi> .seen azawawi

[17:04] <yoleaux> I saw azawawi 7 Dec 2015 10:00Z in #perl6: <azawawi> RabidGravy: hi

[17:05] <jdv79> it is a holiday so might have to settle based on availablity

[17:06] <Begi> Happy Christams #perl6 ! ++

[17:07] *** pierre-vigier left
[17:08] *** vv3 left
[17:09] *** vv3 joined
[17:09] *** vv3 left
[17:09] *** krshn joined
[17:10] *** vv3 joined
[17:10] *** vv3 left
[17:10] <dalek> rakudo/nom: b49aa3e | TimToady++ | docs/announce/2015.12.md:

[17:10] <dalek> rakudo/nom: Be very clear what's being delivered, or not

[17:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b49aa3ed2a

[17:10] *** peteretep joined
[17:11] *** Begi left
[17:11] *** vv3 joined
[17:11] *** vv3 left
[17:11] *** vv3 joined
[17:12] <andreoss> is it ready yet?

[17:12] <TimToady> ready for what?

[17:12] *** pierre-vigier joined
[17:12] <andreoss> for the release 

[17:13] <TimToady> well, we'll see if any last-minute bug fixes sneak in, but largely, yes

[17:13] <TimToady> we do need to figure why t/spec/S32-array/adverbs.t is failing

[17:14] <TimToady> that's the only test that fails for me when running a single test job

[17:14] *** xfix joined
[17:15] *** vendethiel left
[17:15] <TimToady> multiple jobs still get occasional hangs, but maybe the tests are assuming things they shouldn't about load

[17:15] <jdv79> jberger: oh yeah.  forgot about the announce that has all the contrib names.  that's probably what you are looking for.

[17:15] *** lichtkind left
[17:16] <skids> I actually found a circumstance where "use Test" hangs reliably

[17:16] *** kjs_ joined
[17:16] <jberger> jdv79: if you mean I'm looking to see my name in lights, no I'm not, I don't have a single p6 commit

[17:16] <TimToady> I guess I'm willing (given what I just put into the release notes above) to ship with tests passing in single file, but it'd be nice if we could do a little better

[17:16] *** lichtkind joined
[17:16] *** vv3 left
[17:17] <skids> Proc::Screen commit  ef49cd156 will hand on tests

[17:17] <jdv79> jberger: no.  the thing you can link to and such.

[17:17] <skids> hang even.

[17:17] <jberger> yeah, that's all I want

[17:17] *** vv3 joined
[17:17] *** vv3 left
[17:18] <jberger> give the press something to feed on

[17:18] *** vv3 joined
[17:18] *** vv3 left
[17:18] <jberger> hope for (or cajole) a tech journal to write a story on the release

[17:18] <jberger> this is how people who have long since moved beyond perl see it

[17:19] *** lostinfog left
[17:19] *** vv3 joined
[17:19] *** vv3 left
[17:19] *** lichtkind left
[17:19] <andreoss> there's still time to adopt eastern customs to gain two extra weeks

[17:19] <flussence> it's almost certain that the reputable ones (like LWN) will pick it up regardless :)

[17:19] <TimToady> well, Infoworld already ran an article

[17:20] <jberger> andreoss: greek orthodox christmas :-P (is that a thing? I know it is for Easter)

[17:20] *** vv3 joined
[17:20] <[Coke]> The christmas release is going to be on christmas, yes. tomorrow is christmas here.

[17:20] *** isBEKaml left
[17:21] <jberger> [Coke]: if something else is being said tomorrow then I'll shut up

[17:21] <btyler> although it is entertaining to think about perl6 shipping a day early :)

[17:21] <TimToady> yes, we're going to release on Christmas regardless of how many disclaimers we have to put in the release notes :)

[17:21] <araujo> hello, anybody knows where I can find information about interfacing perl6 with C libs?

[17:21] <jberger> [Coke]: I came here because of the advent calendar post, which, though cute, couldn't be the only release message

[17:21] <Su-Shee> I agree.

[17:22] <Su-Shee>  #perl is ready to send people over here tomorrow regardless. ;)

[17:23] <TimToady> if we have to put a big fat "We know of one or two stabiity issues in the multithreading and precompilation" then we will

[17:23] <TimToady> the rakudo release will serve as the official announcement of the frozen 6.c spec; see my edits above

[17:24] *** krshn left
[17:25] *** vv3 left
[17:25] <mre> araujo: the best place to start I think is http://doc.perl6.org/language/nativecall

[17:25] *** mohae_ joined
[17:25] *** vv3 joined
[17:25] *** vv3 left
[17:25] <thomax> huhu Su-Shee 

[17:26] *** vv3 joined
[17:26] *** vv3 left
[17:26] *** ZoffixW joined
[17:26] * ZoffixW is almost ready for party :)

[17:27] <ZoffixW> TimToady++ # awesome Advent post

[17:27] *** vv3 joined
[17:27] *** vv3 left
[17:28] *** mohae left
[17:28] <araujo> mre, Thanks!, pretty much what I was looking for

[17:28] *** vv3 joined
[17:28] <lucasb> That announce edit clarified a lot, thanks. If one does a "serious" announcement, people expect to find a polished product. I think that's why most P6 people prefers to not be sooo serious. :)

[17:29] *** vendethiel joined
[17:29] <[Coke]> jnthn: you have a link to your "what to do post release" in re: branches & spectests?

[17:30] <lucasb> this? https://gist.github.com/jnthn/f3a691016c20f0cc4cfa

[17:30] <Su-Shee> lucasb: well considering that the "release at christmas" bell rang a lot this year, people expect something more serious, yes.

[17:30] <Su-Shee> lucasb: and trust me they will ignore all disclaimers. ;)

[17:31] * awwaiid is totally psyched for some rakudo christmas

[17:31] *** jcrespo joined
[17:31] <TimToady> every time I announced christmas, I said "there will be bugs, it won't be as fast as we'd like"

[17:31] <peteretep> I personally will be taking credit for being a supporter all along :-P

[17:31] <TimToady> but we've pretty much hit the mark we set for ourselves, and we can never make everyone happy with that

[17:32] <peteretep> I al still interested in sponsoring some hackathons

[17:32] <awwaiid> totally. I think some folks are worried that the roast is the ONLY christmas gift they are getting

[17:32] * FROGGS raises his glass to TimToady 

[17:32] <|Tux|> I *do* have a X-mas present for you :)

[17:32] <Su-Shee> well I trust you made it nice enough to properly install and to make module installation not fail. if it's then not fast enough, nobody will really care.

[17:32] *** khw joined
[17:33] <ZoffixW> |Tux|, watisit? :)\

[17:33] *** vv3 left
[17:33] <jdv79> Su-Shee: well...:)

[17:33] <|Tux|> <drumrolllllll>…

[17:33] <peteretep> Does it still complain about installation in directories with soaces in?

[17:33] <Skarsnik> most of the ecosystem is broken probably x)

[17:33] <ZoffixW> Su-Shee, there's still some obscure panda issue where modules with prereqs fail on first try, but succeed on second

[17:33] <TimToady> Su-Shee: module installation doesn't *always* fail :)

[17:33] <ZoffixW> :P

[17:33] * Su-Shee stuffs her fingers in her ears and sings *lalalala* ;)

[17:34] <jdv79> progress i guess

[17:34] <Su-Shee> MODULE INSTALLATION WILL WORK, WON'T IT. ;) 

[17:34] <|Tux|> test             50000    22.561    22.439

[17:34] <|Tux|> test-t           50000    12.440    12.318

[17:34] <|Tux|> csv-parser       50000    50.349    50.227

[17:34] <stmuk> I did wonder whether panda should have a "please wait" message since some installs are *very* slow

[17:34] <|Tux|> UNDER 13! this is an all-time low

[17:34] <ZoffixW> |Tux|, what do those numbers mean?

[17:34] <TimToady> wow

[17:34] <flussence> 12 means fast(ish)

[17:34] <ZoffixW> heh... mkay :)

[17:34] <TimToady> maybe panda should have an autoretry when it sees that happen

[17:34] <awwaiid> what are they numbers of?

[17:34] <ZoffixW> I do notice rakudo is much faster than when I first started playing with it

[17:35] <skids> Post release I think some thought into how ecosystem module maintainers go about offering a works-with-6.c version and a works-with-nom version is in order.

[17:35] <flussence> considering it started at about... 250 or so that's quite good

[17:35] <|Tux|> ZoffixW, http://tux.nl/Talks/CSV6/speed4.html

[17:35] *** raiph left
[17:35] <awwaiid> fancy graphs |Tux|!

[17:35] * [Coke] hurls https://gist.github.com/coke/dc55e617e76a6f7082f9 for those who keep asking about the release.

[17:35] <|Tux|> time to go home and celebrate!

[17:36] <|Tux|> for those that have other/better things to do than hang around here, enjoy X-mas :)

[17:36] *** vv3 joined
[17:36] <ZoffixW> What we really need to ensure is there's something for Windows users to install and play with. I often noticed in the past the Windows R* was lagging significantly behind.

[17:37] <TimToady> [Coke]: are my edits above okay by you?

[17:37] <awwaiid> [Coke]++ # throwing release notes

[17:37] *** pierre-vigier left
[17:37] *** pierre-vigier joined
[17:37] <TimToady> maybe we want a specific link to roast?

[17:37] <nebuchadnezzar> time to make an unreasonable diner

[17:38] <ZoffixW> nebuchadnezzar, a whole diner? Use thick plywood :P

[17:38] <autarch> I'm trying to run "panda gen-meta" but it complains that it can't find Panda::DepTracker - when I try to install such a module, panda says it doesn't exist

[17:39] * [Coke] sees he needs to pull TimToady++'s insert into the release announcement - thank you, I was just composing something like that.

[17:39] <flussence> seems like DepTracker was deleted in panda commit a7040f8450

[17:40] <autarch> I just did "rakudobrew build-panda" to make sure I had the right version too

[17:40] <ZoffixW> Hm

[17:40] *** sftp left
[17:40] <autarch> and zef won't even build at all

[17:40] <ZoffixW> When I run this, I just get panda usage instructions: panda gen-meta --name=Foo::Bar --auth=Blah --ver=v0.1 --desc="A sec"

[17:40] <autarch> ZoffixW: yeah, I had that problem too

[17:40] <TimToady> who all has write access to the rakudobrew/panda stuff?  Do we need to fork versions of those that could have last-minute emergency patches applied?

[17:41] *** vv3 left
[17:41] <skids> lizmat has access to panda and a bunch of tadzik's stuff.

[17:41] <[Coke]> TimToady: I would love to be able to give a URL that says "here's the tests". I know our eventualy goal was a standalone copy of tests that didn't need fudging, but I think a tag of "6.c" as the "official" christmas spec is a reasonable place to start (or, more likely, a 6.c branch, since we expect there to be incremental clarifications that don't count as a new spec.)

[17:41] <autarch> it seems like it'd be good to move panda to the perl6 org, no?

[17:41] <stmuk> I don't think "gen-meta" has worked for months

[17:42] *** vv3 joined
[17:42] *** vv3 left
[17:42] <TimToady> yes, a 6.c branch will be sufficient for now; we can work out the 'unfudging' later

[17:42] <ZoffixW> autarch, agreed

[17:42] *** vv3 joined
[17:42] *** vv3 left
[17:43] *** virtualsue joined
[17:43] *** vv3 joined
[17:43] *** vv3 left
[17:44] *** vv3 joined
[17:44] *** virtualsue left
[17:44] *** RandalSchwartz joined
[17:44] <TimToady> well, it's tadzik++'s stuff, so it'd be nice to get preapproval of that, but he's been pretty busy lately

[17:44] *** sftp joined
[17:44] <RandalSchwartz> where is panda installing things?

[17:45] *** roguelazer left
[17:45] <TimToady> same install directory as rakudo, wherever that is

[17:45] <flussence> m: say $*REPO.writable-path

[17:45] <camelia> rakudo-moar b49aa3: OUTPUT«Method 'writable-path' not found for invocant of class 'CompUnit::Repository::Installation'␤  in block <unit> at /tmp/V0S2SQDFFc line 1␤␤»

[17:45] <lucasb> RandalSchwartz: on $PREFIX/share/perl6/site

[17:45] <RandalSchwartz> Oh, and installing Task::Star failed on Grammar::Debugger

[17:45] <autarch> TimToady: I'm not saying steal it, I'm saying it'd be good to ask him if it's cool to move it

[17:45] <[Coke]> ok. anyone planning any changes for the tests? If not, I'll cut a branch now, and remove any tests not explicitly listed in rakudo's t/spectest.data

[17:45] <flussence> m: say $*REPO.writeable-path

[17:45] <camelia> rakudo-moar b49aa3: OUTPUT«"/home/camelia/.perl6/2015.11-779-gb49aa3e".IO␤»

[17:45] <stmuk> RandalSchwartz: it should work if you try again

[17:45] <Skarsnik> RandalSchwartz> Oh, and installing Task::Star failed on Grammar::Debugger <= retry it should work x

[17:45] <RandalSchwartz> oh weirfd.

[17:46] <TimToady> and I'm saying if we have to steal it to fix a last minute issue, we will, but I'd rather not :)

[17:46] <RandalSchwartz> and yes, it did

[17:46] <TimToady> like, if we decided that we had to hack in an autoretry to panda, for instance :)

[17:46] *** pdcawley joined
[17:46] <ZoffixW> RandalSchwartz, that will happen for a few more modules. Just retry. It happens on any modules that have uninstalled prereqs

[17:46] <RandalSchwartz> would prefix there be moar-nom, or its parent

[17:47] <RandalSchwartz> heh... same error on URI

[17:47] *** jcrespo left
[17:47] <ZoffixW> Yup :)

[17:47] <Skarsnik> should xml be moved to perl6 or something like that? it's quite a nice module and the author see not that active x)

[17:48] *** rurban joined
[17:48] <pdcawley> Feeling slightly silly. I have sub example($a,$b,$c) { ... } and I want to do example( "2x3x4".split(/x/) ) and have it act in a perl 5ish manner. What's the syntax to turn the result of split into a capture?

[17:48] <ZoffixW> I think that type of stuff should be avoided as much as possible, or we'll be drowning in forks

[17:49] * flussence is watching `top` report 30% cpu usage while "==> Installing Net::HTTP" has been on screen for the past 15 minutes or so

[17:49] <jdv79> ZoffixW: huh?

[17:49] <ZoffixW> jdv79, sup?

[17:49] <awwaiid> Skarsnik: probably not -- that is more likely a work-with-author thing for xml, ultimately forking maybe but probably not a #perl6 ownership

[17:49] *** vv3 left
[17:49] <jdv79> just use a different auth, no?

[17:49] <jdv79> i don't get your commen is what i meant.

[17:49] <lucasb> pdcawley: maybe try ( |("2x3x4".split(/x/)) )

[17:49] <RandalSchwartz> ahh... moar-nom/install/share/perl6/site

[17:49] <jdv79> *comment

[17:49] <TimToady> git has taught us that forks are not evil, if there's the intent to remerge

[17:50] <TimToady> but it's still less efficient than non-fork

[17:50] <jdv79> or abandon

[17:50] *** vv3 joined
[17:50] *** vv3 left
[17:50] <flussence> strace shows this doing *something* precomp-related, but it seems to be looping over a huge number of files and I've no idea wtf's going on

[17:50] <Skarsnik> well you can replace exemel in ecosystem to my work to have an install copy x)

[17:50] <awwaiid> TimToady: profound thought! that's why some people prefer threads over forks! hahahaha

[17:50] <ZoffixW> jdv79, yeah, but then the author comes back and what's then? What if they don't like the direction the fork has taken? I see there has been activity on the repo 19 days ago. IMO that's a bit too early for hostile forks.

[17:50] *** roguelazer joined
[17:51] *** vv3 joined
[17:51] *** vv3 left
[17:51] <TimToady> well, emergency forks are a gray area

[17:51] <ZoffixW> jdv79, the :auth stuff is no different than simply using a different name. At the end, you still have two diverged forks.

[17:51] <ZoffixW> Sure, emergency is a different matter.

[17:51] <lucasb> flussence: I have experienced the same hang up on installing Bailador and 007 :(

[17:51] <jdv79> idk how that's hostile.  we have auth to ameliorate some of the issues.

[17:51] <Skarsnik> well we can just change the file in ecosystem6 to a working fork, the time the issue get fixed?

[17:51] <TimToady> and we aren't promising that anything downstream works, but it'd at least be nice if some of it works :)

[17:51] *** vv3 joined
[17:51] *** vv3 left
[17:52] <jdv79> some of it does work most of the time

[17:52] <ZoffixW> jdv79, maybe I don't understand the auth, but I see no difference between Foo:auth<zoffix>/Foo:auth<perl6> and Foo::Zoffix/Foo::Perl6

[17:52] <pdcawley> lucasb: Right... so... map { example(|(.split(/x/)) } lines...

[17:52] *** vv3 joined
[17:53] <autarch> I note that forking panda also requires everyone to update rakudobrew since it hard codes tadzik's repo

[17:53] *** nemsys joined
[17:53] <dalek> rakudo/nom: 9fcf651 | coke++ | docs/announce/2015.12.md:

[17:53] <dalek> rakudo/nom: Add a link to the roast branch with the Christmas

[17:53] <dalek> rakudo/nom: version of the tests.

[17:53] <dalek> rakudo/nom: 

[17:53] <dalek> rakudo/nom: Minor cleanup

[17:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9fcf65166f

[17:54] <skids> ZoffixW: module with the :auth will still work if you do not specify an :auth, that's the difference.

[17:54] <skids> One will be chosen.

[17:54] <ZoffixW> jdv79, and the hostility is in the form that if the fork was required to make some fix, then logically there will be X number of people using that fork. Now, when I come back from my vacation and fix my code (even assuming I approve of the change someone else made in their fork), what happens to the original fork? Will it be deleted? Will those X number of users have to change their code?

[17:55] *** espadrine left
[17:55] <Skarsnik> what happend if you put two Meta to the same module in ecosystem6?

[17:55] <TimToady> one would hope there's a way to say "pick the latest on from either auth"

[17:55] <TimToady> *one

[17:56] <RandalSchwartz> until panda install Task::Star; do echo retrying; done

[17:56] <TimToady> then it would automatically revert

[17:56] <TimToady> there you go :)

[17:56] <ZoffixW> Skarsnik, at the same location? Nothing (as far as modules.perl6.org is concerned)

[17:56] <Skarsnik> Like if I add my exemel fork. will panda try this one if the first one fail to install?

[17:57] <RandalSchwartz> does rakudobrew self-update also update installed modules?

[17:57] <Skarsnik> self-update only update rakudobrew I think

[17:57] <stmuk> RandalSchwartz: no

[17:57] <ZoffixW> skids, that's actually a real problem. A security problem I'd even say. All that tells me is if I don't explicitly specify an :auth<>, I open myself to action-at-a-distance errors if me or $evil-guy installs a same-named module with different auth

[17:57] *** vv3 left
[17:57] <RandalSchwartz> and the moar-vm?  or is that update separate

[17:57] <TimToady> ZoffixW: true, there are security implications if you don't nail down the identity

[17:57] <ZoffixW> So the "one will be chosen" is an unresolved ambiguity in my eyes, not a feature by a long shot.

[17:58] <Skarsnik> I don't even know if there is a way to update module in panda?

[17:58] *** vv3 joined
[17:58] *** vv3 left
[17:58] <pdcawley> It feels like map { example(|(.split(/x/))) } lines is a bit clumsy. Would like to write lines>>.split(/x/)>>

[17:58] <skids> ZoffixW: depends on your use case.  If your worried about security to that level you should be excercising change control on your systems.

[17:58] <pdcawley> Argh... don't it return when you mean to hit delete.

[17:59] *** vv3 joined
[17:59] *** vv3 left
[17:59] <ZoffixW> skids, that was just one of the examples. My general complaint is that { use Foo } is ambiguous be definition, since :auth<> is missing.

[17:59] <RandalSchwartz> it's been installing DBIsh for about 4 minutes.

[17:59] <RandalSchwartz> normal?

[17:59] <ZoffixW> RandalSchwartz, Not in my experience

[17:59] *** ghost_ left
[17:59] <TimToady> yes, unless you have some authoritative recommender that tells you what to trust

[18:00] *** vv3 joined
[18:00] *** vv3 left
[18:00] <flussence> RandalSchwartz: seems normal for that part to break lately...

[18:00] <jdv79> i ctrl-c'd it last night after 10min

[18:00] <RandalSchwartz> so I'm not going to be able to complete this task?

[18:00] <ZoffixW> RandalSchwartz, I've seen several commits fly through this morning into it tho. Maybe Skarsnik would know more.

[18:00] <jdv79> Bailador takes long but not that long

[18:00] <skids> ZoffixW: I view that as a feature.  You tune what you're willing to except in your installer/repo manager.

[18:00] <Skarsnik> err DBIish should install?

[18:00] <skids> *accept

[18:00] *** vv3 joined
[18:01] <jdv79> Skarsnik: you installed it today?

[18:01] <RandalSchwartz> yes I noticed that.  And DBIsh also failed because I don't have every possible server installed. :)

[18:01] <ZoffixW> skids, on a scale between -10 (complete misfeature) and 10 (good feature), I view :auth<> as -3

[18:01] <Skarsnik> Nop but travis build ok 

[18:01] <Skarsnik> maybe I should add a panda --install . at the end?

[18:01] <jdv79> its the install though

[18:01] <jdv79> the precomp its taking forever they say

[18:02] <skids> ZoffixW: if the ecosystem repos you are using are unstable or unreliable, that's a problem with the repo, to fixed on that end.

[18:02] <Su-Shee> if one of you gets to the press release/release notes for .. "us common folks" and the internet mob, I'd love to link, tweet, and spread it.. I'd need a simple "yay, awesome perl 6 features, unicode, numbers, threads, types, whatever now go make awesome things with it", just one page really. with a download link. 

[18:02] <Skarsnik> precomp is very slow latelty lol

[18:02] <jberger> Su-Shee++ me too

[18:02] <RandalSchwartz> oh, so it's actually compiling during this install into something intermediate?

[18:02] <ZoffixW> Su-Shee, jberger I'll ping ya :)

[18:03] <Su-Shee> ZoffixW: excellent.

[18:03] <ZoffixW> RandalSchwartz, yes, pre-compilation. Makes subsequent start ups for stuff using those modules faster

[18:03] <Su-Shee> ZoffixW: don't be shy, make it hip. ;)

[18:03] <stmuk> it all mostly works!  certainly the test suite is in better state than the last week to 10 days

[18:03] <Skarsnik> DBIish should install even if you have no working lib for t

[18:04] * ZoffixW & commute

[18:04] *** ZoffixW left
[18:04] *** jeturcotte left
[18:04] <RandalSchwartz> yes... it made it past that

[18:05] <RandalSchwartz> yeah... at least moar seems to be running something. :)

[18:05] *** pdcawley left
[18:05] <Skarsnik> Someone has an idea why Inline::Perl5 just fail all its test?

[18:05] *** vv3 left
[18:06] <TimToady> does it say anything?

[18:06] *** vv3 joined
[18:06] *** vv3 left
[18:07] <Skarsnik> https://gist.github.com/Skarsnik/5546acb9b7be2aaa2a8b

[18:07] *** vv3 joined
[18:07] *** vv3 left
[18:07] *** xtreak29 joined
[18:07] <Skarsnik> parse errors: no plan found? hm weird

[18:08] <awwaiid> sounds like no output at all

[18:08] *** vv3 joined
[18:08] *** vv3 left
[18:08] <TimToady> sounds like an old/corrupt Test precompile

[18:08] <TimToady> try blowing away install/share/perl6 maybe

[18:08] *** xinming_ joined
[18:08] <xtreak29> Are perl6 threads lightweight like goroutines?

[18:08] *** llfourn left
[18:09] *** vv3 joined
[18:09] <TimToady> Skarsnik: it's passing here, btw, so I suspect a local precomp issue

[18:10] <flussence> xtreak29: not familiar with go, but perl6 threads behave a lot like libgcd's in practice

[18:10] <flussence> s/libgcd/libdispatch

[18:11] <TimToady> xtreak29: yes, they're really an abstraction that gets run by various actual worker threads underneath

[18:12] *** xinming left
[18:12] <timotimo> how is zef these days btw?

[18:12] <TimToady> Skarsnik: so my Inline::Perl5 passes all its tests, then fails the install because it's already installed, which seems a bit off

[18:12] <xtreak29> goroutines are lightweight threads with 4kb at start and then expand on need.. I saw a talk where rob pike spinned up and killed a million of them in few seconds..

[18:12] <stmuk> panda --force install Inline::Perl5

[18:13] <skids> TimToady: That seems to be normal behavior these days for all modules

[18:13] <stmuk> will reinstall a module

[18:13] <flussence> is there an env var I can use to force-disable precomp?

[18:13] <dalek> roast: 1b0a10c | coke++ | README:

[18:13] <dalek> roast: Someday is here

[18:13] <dalek> roast: review: https://github.com/perl6/roast/commit/1b0a10c9dd

[18:13] *** vv3 left
[18:14] <stmuk> flussence: no I started to look at that but couldn't work it out

[18:14] <autarch> is there any way to get perl6 to tell me how it's trying to match a multi?

[18:14] <autarch> some sort of debugging output

[18:14] *** vv3 joined
[18:14] *** vv3 left
[18:14] <stmuk> flussence: you can use "no precompilation" pragmas

[18:15] <flussence> stmuk: that doesn't help when I'm trying to write an ebuild :)

[18:15] <[Coke]> Su-Shee: updated https://gist.github.com/coke/dc55e617e76a6f7082f9 to note that I'm going to post an advent post with the release announcement.

[18:15] *** vv3 joined
[18:15] *** vv3 left
[18:15] <TimToady> autarch: that would be difficult; it is, by necessity, very low-level code that has to run blazing fast

[18:15] <autarch> makes sense

[18:15] *** pierre-vigier left
[18:16] <TimToady> that being said, there's a fast path, and a slow path, so one could hope to instrument the slow path without slowing the fast path

[18:16] <autarch> I'm trying to figure out why panda's gen-meta isn't matching a specific multi when given arguments

[18:16] <TimToady> but I don't think it has much instrumentation of that nature

[18:16] *** vv3 joined
[18:16] *** vv3 left
[18:16] <RandalSchwartz> Hmm... moar is still moaring on DBIsh

[18:16] <RandalSchwartz> I'll give it a bit... uh.. more.

[18:17] <TimToady> I suspect it's hung

[18:17] <dalek> rakudo/nom: 313832d | FROGGS++ | src/Perl6/Actions.nqp:

[18:17] <dalek> rakudo/nom: fix explosion found by lucasb++ because missing .node

[18:17] <dalek> rakudo/nom: 

[18:17] <dalek> rakudo/nom: m: say ({ 42 } while $++ < 3)

[18:17] <dalek> rakudo/nom: rakudo-moar e34842: OUTPUT«===SORRY!===␤Cannot find method 'CURSOR'␤»

[18:17] *** vv3 joined
[18:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/313832d8e3

[18:17] <stmuk> no it's just very slow

[18:17] <awwaiid> autarch: one thing to note with panda is that the options come BEFORE the action, unlike git or other action-based cli

[18:17] *** RabidGravy joined
[18:17] <autarch> awwaiid: that could explain it

[18:17] <jdv79> coo.  IO::Capture::Simple is broke too?  so H::UA is a bust atm:(

[18:18] <autarch> yep, that was the problem - that's _really_ confusing and non-standard, it'd be nice to fix that somehow

[18:18] <dalek> roast/6.c: 485f471 | coke++ | README:

[18:18] <dalek> roast/6.c: Note which version of the spec this branch is for

[18:18] <dalek> roast/6.c: review: https://github.com/perl6/roast/commit/485f471c49

[18:18] <awwaiid> autarch: https://github.com/tadzik/panda/issues/256

[18:19] <autarch> seems like a core issue based on that issue discussion

[18:19] <autarch> but maybe the solution is to write a simple module that command-pattern scripts like this can use

[18:19] <awwaiid> autarch: my inclination is, now that there are more eyeballs, go ahead and "fix" panda, trying to talk tadzik into it :)

[18:19] *** zengargoyle left
[18:19] <awwaiid> yeah, shared command-pattern lib good idea

[18:20] <TimToady> or fix MAIN to support it

[18:20] <awwaiid> even better

[18:20] <TimToady> but probably not this side of xmas

[18:20] <awwaiid> but I don't know what that would look like

[18:20] <awwaiid> yeah

[18:21] <TimToady> it's actually been in my todo list for a while, but never bubbled up to the top

[18:21] *** muraiki left
[18:22] *** vv3 left
[18:22] <TimToady> one could write a shim in the mainline that moves all --foo to the front of @*ARGS before MAIN sees it, but that'd just be a hack

[18:22] <awwaiid> autarch: I bet with that and xmas in mind, tadzik would accept a normalization MAIN that then re-dispatched to the others

[18:22] *** zengargoyle joined
[18:22] <TimToady> but yeah, we really need the input processing to create multiple captures that dispatch at different levels

[18:22] *** vv3 joined
[18:22] *** vv3 left
[18:23] <TimToady> rather than just clumping all switches together

[18:23] *** jcrespo joined
[18:23] <dalek> roast/6.c: 3dea37e | coke++ | S (63 files):

[18:23] <dalek> roast/6.c: Remove any tests not currently part of Christmas

[18:23] <dalek> roast/6.c: 

[18:23] <dalek> roast/6.c: These files will remain on master and can be pulled

[18:23] <dalek> roast/6.c: into this branch if we determine they are part of the

[18:23] <dalek> roast/6.c: spec.

[18:23] <dalek> roast/6.c: review: https://github.com/perl6/roast/commit/3dea37e2c8

[18:23] <TimToady> would be nice if 'panda help' explained that switches need to go in front

[18:23] *** vv3 joined
[18:23] *** vv3 left
[18:24] <[Coke]> ok. There's a spec, such as it is. Feels anticlimactic. :)

[18:24] *** vv3 joined
[18:24] *** vv3 left
[18:25] *** andreoss left
[18:25] *** vv3 joined
[18:25] <stmuk> I added an example of the switches to panda 

[18:25] <RandalSchwartz> are there plans to make moar multi-threaded at some point?

[18:25] <stmuk> it's at the top and scrolls by I guess

[18:25] <mspo> isn't it?

[18:26] <RandalSchwartz> well, why is this panda install using only one thread?

[18:26] <timotimo> RandalSchwartz: yeah, we'v eplanned to make it multi-threaded more than a year ago, and actually also did make it multi-threaded

[18:26] <timotimo> zef installs stuff in parallel

[18:26] <timotimo> ugexe is responsible for that project. it's pretty cool, but i think it hasn't been updated to handle the newest changes yet

[18:27] <[Coke]> RandalSchwartz: because panda is a script that wasn't written to be multi-threaded.

[18:27] <jdv79> it seemed broke a few days ago

[18:27] <[Coke]> It could be, sure.

[18:27] *** nemsys left
[18:27] <RandalSchwartz> does zef work better installing DBIsh? :)

[18:27] <jdv79> perfect timing

[18:28] *** pierre-vigier joined
[18:28] <awwaiid> stmuk: TimToady: https://github.com/tadzik/panda/pull/268 -- made the note about switches in front louder :)

[18:28] *** darutoko left
[18:28] <[Coke]> Note! Any changes made to roast going forward are NOT part of christmas unless you merge those tests into the 6.c branch.

[18:29] <TimToady> were those test removed all outside of spectest.data?

[18:29] <[Coke]> We should probably have a soft rule about that. At least get another pair of eyes on any test changes to 6.c

[18:29] <TimToady> +1

[18:29] <[Coke]> TimToady: that was the plan. Someone might want to double check that, but i just ran the "update-passing..." test and removed all the unrun tests it found.

[18:29] <timotimo> RandalSchwartz: zef doesn't install anything at the moment

[18:30] <RandalSchwartz> oh... so, no.

[18:30] <[Coke]> Doing a test run with a 6.c checkout now.

[18:30] *** vv3 left
[18:30] <RandalSchwartz> do I need Task::Start, or can I just let anything that needs it install its own depends?

[18:30] <RandalSchwartz> I'm not doing anything with DBI at the moment

[18:30] <jdv79> it looks like it might be precomping the same file over and over

[18:30] <awwaiid> RandalSchwartz: you should be fine with just depends rather than full Task::Star

[18:31] <TimToady> someone should take out the auto-retry...oh wait...

[18:31] <[Coke]> Thanks to everyone trying to kick the tires before tomorrow, btw.

[18:31] <awwaiid> RandalSchwartz: ... and if there is a hidden dependency it should be fixed :)

[18:31] <timotimo> oh lord. the first "buggy interaction of features" zefram shows in his talk is just the REPL being dumb

[18:31] <timotimo> and i can't even read the damn code

[18:31] <RandalSchwartz> I really wanted to try Inline::Perl6, which requires building Inline::Perl5 for Perl 6. :)

[18:31] * TimToady wonders if it would help our launch to cut Task::Star way down for the moment

[18:32] *** krshn joined
[18:32] <RandalSchwartz> Oh - can't do that.  Still running with 5.16 on my laptop

[18:32] <jdv79> taking DBIish out is pretty obvious.

[18:32] <[Coke]> TimToady: I'm thinking that instead of saying "here's what we added in this release" like we normally do for the announcement, instead list various features/paradigms available in the spec/impl.

[18:32] <jdv79> most of task star is fine

[18:32] *** AndChat268400 joined
[18:32] <stmuk> a star release in a few days is fine I think

[18:32] <mspo> so does the announcement mean that the spec is stable for some amount of time?

[18:32] *** vv3 joined
[18:32] *** vv3 left
[18:32] <AndChat268400> Merry Xmas eve

[18:32] <TimToady> yeah, but a lot of people may try it before then and get frustrated, and if it works again in a few days, can be put back in

[18:32] <[Coke]> We don't have anyone on deck for a star release, that I know of.

[18:33] <[Coke]> mspo: yup

[18:33] *** vv3 joined
[18:33] <TimToady> mspo: that's the intention, we'll see how it works out after first contact with the enemy :)

[18:33] <mspo> where is are moar and rakudo in terms of compliance?

[18:33] *** cognominal left
[18:33] <[Coke]> we don't have a particular time frame, but you should be able to track the monthly releases now and get bug fixes and speedups instead of death and destruction.

[18:33] <timotimo> hey everybody

[18:33] <[Coke]> moar isn't perl6. it's a backend.

[18:33] <timotimo> should we kick out the REPL part of rakudo?

[18:33] *** aenaxi joined
[18:34] <timotimo> or just a big fat warning?

[18:34] *** ZoffixMobile joined
[18:34] *** cognominal joined
[18:34] <[Coke]> TimToady: what's wrong with the REPL?

[18:34] <[Coke]> er, timotimo.

[18:34] <TimToady> besides sucking?

[18:34] *** pierre-vigier left
[18:34] <timotimo> well, in this example here, zefram could assign CORE:: into my Int $a

[18:34] *** pierre-v_ joined
[18:35] <ZoffixMobile> cutting R* is definitely a good option. I rather people get something usable without errors than include all sorts of modules.

[18:35] * stmuk is going to see what subset of the current Task::Star works quickly

[18:35] <[Coke]> with linenoise, it's been tolerable.

[18:35] <TimToady> stmuk: thanks!

[18:35] <lucasb> m: my Int $x = CORE; say $x

[18:35] <camelia> rakudo-moar 313832: OUTPUT«(CORE)␤»

[18:35] <lucasb> it's not just in the REPL :)

[18:35] <timotimo> er, huh?

[18:35] <ZoffixMobile> [Coke], is it hard to cut R* release? I'm free for the next 4 days, but I dunno what to do

[18:35] <[Coke]> mspo: rakudo is (not quite tautologically) at 100% of spec compliance on 2 or 3 platforms at the moment.

[18:35] <timotimo> ah, i locally tried my Int $x = CORE::; that one blows up

[18:36] <timotimo> so ... how the fuck does that happen %)

[18:36] <TimToady> maybe a repl without history could come up with a suggesting to install linenoise or rlwrap

[18:36] <[Coke]> ZoffixMobile: if you've never done it before, christmas is probably not the time to cut your teeth on it.

[18:36] <lucasb> timotimo: I tried watching his talk, but couldn't read anything on the screen, so I gave up

[18:36] <[Coke]> TimToady++

[18:36] <timotimo> m: my Int $x = CORE; dd $x

[18:36] <camelia> rakudo-moar 313832: OUTPUT«CORE $x = CORE␤»

[18:36] <ZoffixMobile> [Coke], good point :)

[18:36] <timotimo> it changes the type of the variable, even

[18:36] * [Coke] ponders a faq, "no, dd is not part of the spec"

[18:37] <jdv79> 18 mins and counting so far

[18:37] <mspo> it isn't? :)

[18:37] <TimToady> that's a pretty amazing bug, but I wouldn't call it a blocker

[18:37] <jdv79> wonder if its an infiloopy thing

[18:37] <[Coke]> "There's always next month", said the overworked volunteers.

[18:38] <[Coke]> (which, btw, is a good thing)

[18:38] *** vv3 left
[18:38] *** krshn left
[18:38] *** AndChat268400 left
[18:38] *** sdo joined
[18:38] * geekosaur still thinks there's always Orthodox Christmas if necessary

[18:38] <lucasb> jdv79: what is hanging for you?

[18:39] <TimToady> DBIish precomp, I presume

[18:39] <timotimo> the next thing he brings up is "you can pull IterationEnd out of the CORE symbol table and it'll stop any map or grep that's run over multiple values containing that thing"

[18:39] <jdv79> ==> Installing DBIish

[18:39] <sdo> merry Xmas

[18:39] <jdv79> yeah, tis precomping over and over

[18:39] <lucasb> ah, ok. I waited more than 30 minutes to install 007, but then I gave up :(

[18:40] <jdv79> did DBIish install for you?

[18:40] <lucasb> didn't try DBIish

[18:40] <stmuk> I have seen DBIish install in the last day or so but it took ~20mins

[18:40] <stmuk> not sure if it always works

[18:40] <jdv79> i'm at 22mins now

[18:40] <jdv79> and the strace is a loop to my eyes

[18:41] *** sdo left
[18:41] *** rurban left
[18:41] <lucasb> It looks like precomp keeps re-generating the same *.rev-deps files

[18:42] <jdv79> i just see it precomping one of the SQLite files over and over

[18:42] *** AndyDee left
[18:43] <autarch> can someone tell me how to add a module to the ecosystem?

[18:43] <jdv79> because the 101st time will be different?!

[18:43] <jdv79> add it to the META.list file in the perl6 eco repo

[18:43] *** vv3 joined
[18:43] *** mfontani_ joined
[18:43] <awwaiid> autarch: PR on https://github.com/perl6/ecosystem

[18:43] <RabidGravy> is there an indirect circular dependency?

[18:44] <flussence> http://doc.perl6.org/language/modules#Distributing_Modules

[18:44] *** nemsys joined
[18:44] <[Coke]> autarch: http://doc.perl6.org/language/modules#Distributing_Modules

[18:44] <[Coke]> flussence++ # coke too slow

[18:44] <autarch> yeah, I had read that - the last step says "Ping someone on IRC (#perl6 at freenode) to either show you how to add your module to the ecosystem, or else ask them if they could please add it for you." - that's where I was

[18:45] <dalek> doc: f14aae5 | (Anthony Parsons)++ | doc/Language/modules.pod:

[18:45] <dalek> doc: Fix typo

[18:45] <dalek> doc: review: https://github.com/perl6/doc/commit/f14aae5ac0

[18:45] <awwaiid> autarch: I'm going to fix the doc for that right now.

[18:45] <autarch> since I have commit access is it ok to commit directly to master in that repo?

[18:45] <TimToady> the big question is at what point it's looping; does it actually finish and do the whole thing over?  if so, we can probably short-circuit the loop somehow and call it done

[18:45] <ZoffixMobile> autarch, yes

[18:45] <TimToady> if not, we can maybe at least abort precomp and install it without precomp

[18:46] <dalek> ecosystem: 7841fce | (Dave Rolsky)++ | META.list:

[18:46] <dalek> ecosystem: Add Pod::TreeWalker to ecosystem

[18:46] <dalek> ecosystem: 

[18:46] <dalek> ecosystem: <img class="alignnone  wp-image-2908" src="https://perl6advent.files.wordpress.com/2015/11/camelia-small.png" alt="Camelia-small" width="147" height="107" />

[18:46] <dalek> ecosystem: 

[18:46] *** dalek left
[18:46] *** jcrespo left
[18:46] <autarch> pood, done

[18:46] <autarch> poof*

[18:46] <flussence> TimToady: I ^C'ed it on Net::HTTP and the result seemed to run fine, so probably

[18:46] <timotimo> i don't think it's a valid complaint, but here's some code zefram threw up:

[18:46] <ZoffixMobile> heh, nice commit message :)

[18:46] *** vv3 left
[18:46] <timotimo> m: my @a = 1, 2, 3; @a[1] = slip(9, 9, 9); @a.map({ $_ }).perl.say

[18:46] <camelia> rakudo-moar 313832: OUTPUT«(1, 9, 9, 9, 3).Seq␤»

[18:46] *** dalek joined
[18:46] *** ChanServ sets mode: +v dalek

[18:46] <autarch> ZoffixMobile: that's automatically filled in for me when I do the edit directly on github - not sure how that was configured

[18:47] <ZoffixMobile> ahh

[18:47] <timotimo> zefram argues that .map({ $_ }) should be an identity map, but isn't because the resulting list isn't the same as the incoming list

[18:47] *** vv3 joined
[18:47] *** vv3 left
[18:47] <cxreg> when i'm installing all of Task::Star i sporadically get a "Cannot unbox a type object" error during installation

[18:47] <timotimo> he argues that this should be the boilerplate everybody should use to identity-map whatever data you get, because it could contain slips you don't want to slip:

[18:48] <ZoffixMobile> autarch, you've made 777th commit! :) too bad it's not a slot machine :p

[18:48] *** vv3 joined
[18:48] *** vv3 left
[18:48] <autarch> we're rich in code

[18:48] <timotimo> m: my @a = 1, 2, 3; @a[1] = slip(9,9,9); @a.map({ my @s = $_; @s.Slip }).perl.say;

[18:48] <camelia> rakudo-moar 313832: OUTPUT«(1, slip$(9, 9, 9), 3).Seq␤»

[18:48] <ZoffixMobile> cxreg, not sporadic: any dist with uninstalled prereqs. retrying fixes the issue

[18:48] <dalek> doc: b015b24 | (Brock Wilcox)++ | doc/Language/modules.pod:

[18:48] <dalek> doc: Direct people to open PR on ecosystem

[18:48] <dalek> doc: review: https://github.com/perl6/doc/commit/b015b245d9

[18:48] <cxreg> ZoffixMobile: parallelism bug?

[18:48] *** vv3 joined
[18:48] *** vv3 left
[18:49] <ZoffixMobile> cxreg, no clue :(

[18:49] *** mfontani_ left
[18:49] <cxreg> hm, i'm sure it'll get figured out eventually

[18:49] <jdv79> RabidGravy: i don't see one.  but could be.

[18:49] *** vv3 joined
[18:49] <jdv79> at 30mins i'm stopping

[18:50] <cxreg> any spoilers on the time of release?

[18:51] *** cognominal left
[18:51] <ZoffixMobile> cxreg, yes: "tomorrow" :)

[18:51] *** leont joined
[18:51] <cxreg> heh.  tomorrow GMT is in a few hours

[18:51] <awwaiid> cxreg: no more specific time is available to anyone

[18:52] <cxreg> roger that

[18:53] *** vendethiel left
[18:53] <timotimo> oh, this is an interesting bug:

[18:53] <timotimo> m: (1, 2, 3)[0] := 4

[18:53] <timotimo> (hangs)

[18:53] <lucasb> (suspense)

[18:54] <camelia> rakudo-moar 313832: OUTPUT«(timeout)»

[18:54] <cxreg> o_o

[18:54] <timotimo> ah, zefram even found out the cause of the problem

[18:54] <timotimo> and didn't tell us, i guess?

[18:54] *** vv3 left
[18:54] <cxreg> that's how you destroy a replicant

[18:57] <stmuk> grrr LWP::Simple is broken and is a dependency of quite a few Task::Star modules

[18:57] *** st_iron left
[18:58] <stmuk> oh nine fixed it in a PR .. its not applied though

[18:58] *** vv3 joined
[18:58] <lucasb> m: say $(slip).perl

[18:58] <camelia> rakudo-moar 313832: OUTPUT«slip$()␤»

[18:58] <stmuk> https://github.com/cosimo/perl6-lwp-simple/pull/67

[18:58] <stmuk> does anyone have access to https://github.com/cosimo/perl6-lwp-simple?

[18:58] <timotimo> the slip thing seems a bit like a DIHWIDT, though. dunno.

[18:58] <lucasb> ^^ just prepending 'slip' won't do the right thing with a itemized list

[19:00] <TimToady> cxreg: given the Moar-folk won't be spinning their release till tomorrow, I don't see anything coming out at midnight, but it should still be Christmas in *someone*'s timezone :)

[19:00] <cxreg> heh

[19:00] <TimToady> meaning the 25th

[19:01] <stmuk> I could hack the ecosystem to use nine's working LWP::Simple for a bit

[19:01] <cxreg> either way, it's a minor miracle

[19:01] <timotimo> TimToady: any comment on the "identity map" thing?

[19:01] <timotimo> and now i'm wondering how to not-implement BIND-POS inside List

[19:02] <TimToady> the point of a map is to *map* something, and the map is not the territory, duh

[19:02] <timotimo> since Any has a fallback that is supposed to handle multi-dim bind-pos, but it accidentally also handles single-dimension bind-pos by not checking if the argument list has two arguments in it

[19:02] <TimToady> one should use *.self if one wants and identity function

[19:02] <TimToady> *an

[19:02] *** vv3 left
[19:02] *** lucasb left
[19:03] *** aaaaaaaaaaaaaaaa joined
[19:03] <aaaaaaaaaaaaaaaa> yo

[19:03] *** vv3 joined
[19:03] *** vv3 left
[19:03] <timotimo> TimToady: well, mapping $_.self doesn't not-iterate the slip

[19:04] *** kjs_ left
[19:04] *** vv3 joined
[19:04] *** vv3 left
[19:04] *** sivoais left
[19:05] *** llfourn joined
[19:05] *** aaaaaaaaaaaaaaaa left
[19:05] *** vv3 joined
[19:05] *** vv3 left
[19:06] *** vv3 joined
[19:09] <dalek> ecosystem: c5bf53c | (Steve Mynott)++ | META.list:

[19:09] <dalek> ecosystem: migrate perl6-lwp-simple into perl6 for the moment

[19:09] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/c5bf53c81a

[19:09] *** cbk left
[19:09] <timotimo> stmuk: why not into perl6-community-modules instead?

[19:09] *** llfourn left
[19:09] *** Actualeyes left
[19:10] *** skyheights left
[19:10] <timotimo> anyway. binding to any subclass of Any that doesn't implement BIND-POS gives us an infinite recursion

[19:10] <stmuk> timotimo: I wasn't aware of that .. if you want to do that . please do

[19:10] *** labster joined
[19:10] <timotimo> whatever's least friction at the moment is fine with me

[19:10] *** vv3 left
[19:11] *** sivoais joined
[19:11] <timotimo> https://gist.github.com/timo/607c8de71020eebf68a3 - i suggest this patch for rakudo

[19:11] *** vv3 joined
[19:11] *** vv3 left
[19:11] <stmuk> grrr it doesn't work .. is the META.list cached?

[19:12] <timotimo> it takes a litle bit for the ecosystem website to update

[19:12] <timotimo> and "panda update" is also required

[19:12] <stmuk> ah I tried the "panda update" but need to wait for some cron I guess

[19:12] *** vv3 joined
[19:12] *** vv3 left
[19:12] <timotimo> yeah

[19:13] *** vv3 joined
[19:13] *** vv3 left
[19:14] *** vv3 joined
[19:14] <TimToady> oh lovely, Shell::Command uses 'as', and panda uses Shell::Command

[19:14] <skids> That was fixed earlier today

[19:14] <ZoffixMobile> yeah, it runs server/update-list.pl

[19:14] <timotimo> panda has to pull in new versions with the update-subtree script

[19:14] <timotimo> did anybody do that?

[19:15] <TimToady> apparently not

[19:15] * timotimo has been familying a lot today

[19:17] <skids> Before Shell::Command was fixed, lizmat pulled in 6073de4c which removed the "as" by hand.

[19:18] <skids> So I don't know why anyone is seeing it anymore.

[19:18] <skids> I'm not.

[19:18] *** kjs_ joined
[19:19] *** vv3 left
[19:19] <TimToady> I guess I'll try the nuclear option

[19:19] *** vv3 joined
[19:19] *** vv3 left
[19:20] <stmuk> I have a Task::Star installing with only two modules removed I think ..

[19:20] *** virtualsue joined
[19:20] *** vv3 joined
[19:20] *** vv3 left
[19:21] *** vv3 joined
[19:21] *** vv3 left
[19:21] *** sivoais left
[19:22] *** vv3 joined
[19:22] *** sivoais joined
[19:23] *** cbk joined
[19:23] <cxreg> "The MONKEY pragmas" sounds like a book series

[19:23] *** kjs_ left
[19:24] *** kjs_ joined
[19:24] <stmuk> trying on another platform 

[19:25] *** sivoais left
[19:26] <ChoHag> Can I print the call stack at a given point?

[19:26] <stmuk> say ~Backtrace.new

[19:26] <stmuk> http://ecosystem-api.p6c.org/projects.json still hasn't changed!

[19:27] *** kjs_ left
[19:27] *** vv3 left
[19:27] <stmuk> is anyone able to manually refresh that?

[19:27] *** hankache joined
[19:28] *** krshn joined
[19:28] *** vv3 joined
[19:28] *** vv3 left
[19:28] <RandalSchwartz> now DBIish is failing differently

[19:28] <RandalSchwartz> ... DBIish:ver<*>:auth<>:api<> already installed

[19:28] <RabidGravy> :-\

[19:28] <stmuk> RandalSchwartz: look at the panda examples at the top

[19:28] <stmuk> --force

[19:28] *** vv3 joined
[19:28] *** vv3 left
[19:29] <dalek> rakudo/nom: 986f98d | timotimo++ | src/core/Any.pm:

[19:29] <dalek> rakudo/nom: if multidim BIND-POS candidate fires for single-dim ...

[19:29] <dalek> rakudo/nom: 

[19:29] <dalek> rakudo/nom: we're in trouble, because that means the class we're a

[19:29] <dalek> rakudo/nom: part of doesn't implement binding. So we throw X::Bind.

[19:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/986f98d8c6

[19:29] *** quux joined
[19:29] <quux> is it realy happening??

[19:29] *** vv3 joined
[19:29] *** vv3 left
[19:29] <RandalSchwartz> and of course, I intuitively typed: panda install --force Task::Star

[19:29] <timotimo> that fixes the hang of (1, 2, 3)[0] := 4, but it also makes (Any.new())[1] := 5 not hang, but die, as it should.

[19:29] <RandalSchwartz> that argument is really in the wrong place

[19:30] * TimToady is testing a bandaid fix to the precompile loop

[19:30] *** vv3 joined
[19:30] <ChoHag> Is $foo[*-1] (where $foo does Positional) supposed to call $foo's list method?

[19:30] <RandalSchwartz> because --force is an adverb on install

[19:30] <ChoHag> The document suggests otherwise.

[19:30] <RandalSchwartz> not on panda

[19:31] <timotimo> ChoHag: it at least has to figure ou tthe number of elements

[19:31] <timotimo> not sure that should go through .list, though

[19:31] <ChoHag> http://doc.perl6.org/language/subscripts suggests is uses .elems, which exists.

[19:31] <timotimo> and $foo[1] doesn't call .list?

[19:32] <ChoHag> No.

[19:32] <timotimo> mhm mhm

[19:34] *** atweiden joined
[19:35] *** LLamaRider left
[19:35] <ChoHag> I don't mind - and having it work that way revealed an off-by-one bug in my .list - but not sure if the documentation is wrong or unclear.

[19:35] *** sivoais joined
[19:35] <krshn> I am testing perl6/panda/task::star on mac

[19:35] *** vv3 left
[19:36] *** vv3 joined
[19:36] *** vv3 left
[19:37] *** vv3 joined
[19:37] *** vv3 left
[19:37] <stmuk> can people try "panda update && panda --force install LWP::Simple" please?

[19:37] <TimToady> I can at least tell you that the rev-dep-id precompile is recompiling the same id over and over

[19:37] <TimToady> I do not yet know whether it's finite

[19:37] <cxreg> RandalSchwartz: i got that same DBIish error just now.  it hung and i killed it, and that happened on trying again

[19:37] *** vv3 joined
[19:37] *** vv3 left
[19:38] <krshn> Cannot unbox a type object

[19:38] <krshn>   in block  at /Users/krshn/local/osx/share/perl6/site/sources/54D6C35C8308A2355B72B5AB93E9C21E57E7E2AF line 61

[19:38] <ChoHag> TimToady: Get back to us after the heat death.

[19:38] *** vv3 joined
[19:38] <krshn> I ran "panda install Task::Star"

[19:38] <ChoHag> Universe or CPU. Whichever comes first.

[19:38] <TimToady> my attempted patch is to keep a %done array and skip precomps we've done, in the hopes that the input is finite

[19:39] *** asht joined
[19:39] <RabidGravy> krshn, run it again it should work

[19:39] <hankache> i think DBIish should be removed from star

[19:39] <yoleaux> 15:41Z <timotimo> hankache: if we should perhaps put the perl6intro text into rakudo star tarballs and such?

[19:39] <krshn> RabidGravy: yes -- doing it now

[19:39] *** woosley joined
[19:39] <stmuk> try removing both "DBIish" and "Bailador" from a local checkout of Task::Star .. that should now work

[19:39] <RabidGravy> it sometimes fails when there are deps that aren't yet installed

[19:39] *** brrt joined
[19:40] <hankache> .tell timotimo no problem. I have pdf copies if it's easier

[19:40] <yoleaux> hankache: I'll pass your message to timotimo.

[19:40] <timotimo> very cool.

[19:40] <yoleaux> 19:40Z <hankache> timotimo: no problem. I have pdf copies if it's easier

[19:40] <timotimo> .botsnack

[19:40] <yoleaux> :D

[19:40] <krshn> running again -- I get this 

[19:40] <krshn> ==> Installing URI

[19:40] <krshn> Cannot unbox a type object

[19:40] <stmuk> does anyone have access to https://github.com/tadzik/Task-Star

[19:41] <asht> Hi mates, new to Perl 6. just installed rakudo on mac os/x. panda is giving errors when installing module Inline::Perl5 prereq Pod::Coverage:

[19:41] <hankache> timotimo as a matter of fact I am finalizing it right now

[19:42] <timotimo> asht: we're currently very busy fixing last bits; i'm not sure, but i think your problem might be known

[19:42] <krshn> should I put Task::Star in the back-burner and test LWP::Simple instead?

[19:42] <stmuk> krshn: trying LWP::Simple would help .. you might have to "panda update"

[19:42] *** sivoais left
[19:43] <krshn> stmuk: ok trying panda update && panda --force install LWP::Simple

[19:43] *** vv3 left
[19:44] <krshn> How does LWP::Simple look on linux? I can test that too

[19:44] *** vv3 joined
[19:44] *** vv3 left
[19:44] <krshn> stmuk: worked on mac

[19:44] <krshn> no issues

[19:44] <krshn> using yosemite

[19:44] <stmuk> krshn: also "git clone [email@hidden.address] and "panda install ." in target might work

[19:44] <krshn> latest xcode

[19:45] <TimToady> now testing my patch on DBIish

[19:45] *** vv3 joined
[19:45] *** vv3 left
[19:45] <krshn> ok.. let me test

[19:45] *** sivoais joined
[19:46] *** vv3 joined
[19:46] *** vv3 left
[19:46] *** vv3 joined
[19:47] <TimToady> yatta!

[19:47] <krshn> stmuk: can you give me url without git@.. I have not setup git hub yet to use do authentication

[19:47] * TimToady should run a spectest before checking in the fix, however

[19:47] <stmuk> https://github.com/stmuk/Task-Star.git

[19:47] <krshn> thanks

[19:47] <TimToady> but think I've solved the hung install problem

[19:47] <krshn> I did a quick search and yours did not come up

[19:48] <TimToady> (my log of DBIish showed that it probably would have finished eventually, but after doing many, many unnecessary precomps)

[19:48] <timotimo> again and again and again ... :)

[19:49] <stmuk> I did see it finish once .. I guess I was lucky :)

[19:49] <timotimo> what's the function called again that has two arguments and grows incredibly fast?

[19:49] <timotimo> perhaps we were trying to implement that just with precompilation

[19:49] <timotimo> ackermann

[19:49] <hankache> woot! I added a new chapter on functional programming #perl6intro.com

[19:50] <krshn> stmuk: works on mac 

[19:50] <krshn> task::star

[19:50] <stmuk> krshn: thanks for your help .. just retesting on linux

[19:50] <krshn> no problems

[19:50] <krshn> anything else I can help

[19:50] <krshn> I have access to redhat 5, ubuntu, mac yosemite

[19:51] <FROGGS> TimToady: yesterday the install_core_dists.pl also recompiled stuff again and again... might that be related?

[19:51] <krshn> ubuntu 12.4 i think

[19:51] <krshn> pretty dated :-)

[19:51] <stmuk> testing on redhat 5 might be useful ... I guess of us use more recent debianish distros

[19:51] *** vv3 left
[19:51] <krshn> ok.. will do it on redhat 5

[19:51] <FROGGS> I used 12.4 until two weeks ago

[19:52] <TimToady> FROGGS: could well be

[19:52] <FROGGS> err, no, 14.4

[19:52] <hoelzro> o/ #perl6

[19:52] <brrt> i'm using fedora but that is quite Ala different beast

[19:52] <hoelzro> I don't have a whole lot of free time today, but is there anything I can help with?

[19:52] <TimToady> there will be a RAKUDO_LOG_PRECOMP envvar that you can watch what it's precomping while it's working

[19:52] *** vv3 joined
[19:52] *** vv3 left
[19:52] *** sivoais left
[19:52] <FROGGS> TimToady: nice

[19:52] <FROGGS> hoelzro: hi

[19:52] <hoelzro> o/ FROGGS 

[19:53] <TimToady> it works through panda too, that way

[19:53] *** vv3 joined
[19:53] *** vv3 left
[19:54] *** vv3 joined
[19:54] *** vv3 left
[19:54] <hankache> away for lunch

[19:54] <hankache> will be back later

[19:55] *** vv3 joined
[19:55] *** sivoais joined
[19:55] *** rurban joined
[19:56] <ugexe> timotimo: hey, regarding zef status: its still actively developed despite the lack of a recent public release. mostly waiting on precompilation issues and custom CUR loading (loaded before other modules so the custom CUR can not just install but load). I've been lucky to get most of this development time funded, but thats also why I won't release a partially finished result or change the milestones :(

[19:56] <Rotwang> Hi, could someone tell me why:

[19:56] <ugexe> on the plus side it does work with metacpan

[19:56] <Rotwang> m: my @a[0] = 1;

[19:56] <camelia> rakudo-moar 986f98: OUTPUT«Index 0 for dimension 1 out of range (must be 0..-1)␤  in block <unit> at /tmp/44JWEKl7_Z line 1␤␤»

[19:57] *** krshn left
[19:57] <nine> TimToady: what was wrong exactly?

[19:57] <quux> perl 6!

[19:57] <FROGGS> hi quux 

[19:57] <timotimo> ugexe: oh, sounds good!

[19:58] <quux> hi

[19:58] <FROGGS> Rotwang: you're declaring an array with a dimension there, an that cannot be zero

[19:58] <FROGGS> m: my @a[1] = 1;

[19:58] <camelia> rakudo-moar 986f98: ( no output )

[19:58] <Rotwang> FROGGS: ok, thanks

[19:59] *** hankache left
[19:59] <TimToady> the rev dependency lists produces lots of duplicates

[19:59] <jdv79> ugexe: is that usable in anh form?

[19:59] *** vv3 left
[19:59] <TimToady> nine: I'll go ahead and check in my "fix", and you can fix it better if you like

[19:59] <timotimo> TimToady: since things pretend they're a list of themselves, should $a[0] := 1 be the same as $a := 1, actually?

[20:00] <FROGGS> TimToady / nine: that fits, I got the feeling the install_core_dist.pl takes longer and longer every time

[20:00] *** vv3 joined
[20:00] *** vv3 left
[20:00] <dalek> rakudo/nom: 11040a7 | TimToady++ | src/core/CompUnit/Repository/Installation.pm:

[20:00] <dalek> rakudo/nom: dedup precomps

[20:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/11040a7a56

[20:00] <FROGGS> timotimo: is that sensible or does that just cover a braino?

[20:00] <TimToady> nine ^^

[20:01] <timotimo> TimToady: what "that" exactly?

[20:01] <timotimo> m: (1, 2, 3)[0] := 1

[20:01] <camelia> rakudo-moar 986f98: OUTPUT«Cannot use bind operator with this left-hand side␤  in block <unit> at /tmp/kR29jFz0aP line 1␤␤»

[20:01] *** vv3 joined
[20:01] *** vv3 left
[20:01] *** woosley left
[20:01] <timotimo> m: (Int)[0] := 1

[20:01] <camelia> rakudo-moar 986f98: OUTPUT«Cannot call BIND-POS(Int: Int, Int); none of these signatures match:␤    (Any:D $: **@indices is raw, *%_)␤  in block <unit> at /tmp/VytyU7jPn6 line 1␤␤»

[20:01] <timotimo> m: (10)[0] := 1

[20:01] <camelia> rakudo-moar 986f98: OUTPUT«Cannot use bind operator with this left-hand side␤  in block <unit> at /tmp/JUzgZehixi line 1␤␤»

[20:01] <jdv79> interesting.  wonder where all the dups come from.

[20:01] <timotimo> the first one and last one used to hang

[20:02] *** vv3 joined
[20:02] *** vv3 left
[20:03] *** sivoais left
[20:03] *** vv3 joined
[20:03] <timotimo> i'm just now writing tests that test that these things should throw X::Bind

[20:03] <timotimo> but i'm not entirely sure that's the right thing.

[20:03] <ugexe> jdv79: only as much as metacpan currently allows. im sure you know what the problems are regarding dists actually on metacpan. but it uses the metacpan API to obtain the metadata, and fetches/extracts the .tar.gz archive

[20:04] <jdv79> the p5 metacpan?

[20:04] <ugexe> yes, i couldnt figure out how to access the api for the version you have on hack (although I tried)

[20:04] <jdv79> ust curious how you are doing the resolving and recommendation parts

[20:05] <jdv79> with the auth, ver, api, and different collections to choose from

[20:05] *** labster left
[20:05] <nine> TimToady: there's already RAKUDO_MODULE_DEBUG with some infrastructure

[20:05] *** sivoais joined
[20:05] <jdv79> is there a collection hierarchy?  is there a way to force it to fetch from only one place or block a place.

[20:05] <TimToady> well, this is something a panda --verbose could set if it wanted to

[20:05] <jdv79> i'd like to get into that soon

[20:06] *** llfourn joined
[20:06] <TimToady> not sure panda --verbose would want all the debugging...

[20:06] <tadzik> stmuk: yes, me

[20:06] *** raiph joined
[20:06] <TimToady> nine: I was just trying the simplest thing that could possibly work :)

[20:07] <ugexe> it will use any ContentStorage that is configured in the configuration file (or explicity chosen with a command line flag)

[20:07] <TimToady> and it seems to've, wonder of wonders...

[20:07] <jdv79> nice

[20:07] * TimToady is quite certain he's never see the word "to've" before...

[20:07] <brrt> quite likely

[20:08] *** vv3 left
[20:08] <stmuk> https://github.com/tadzik/Task-Star/pull/9

[20:08] <brrt> twas understood though

[20:08] <nine> I'd prefer if we avoided writing redundant entries in the first place so repository implementations wouldn't have to deal with it

[20:08] <stmuk> I'm suggest removing Bailidor and DBIish unless other fixes work

[20:08] <ugexe> versions and auth are hacked together as much as i could do with the current state of metacpan, so as you probably guessed its just string concating to create the identity t should look for

[20:08] *** vv3 joined
[20:08] *** vv3 left
[20:08] <jdv79> stmuk: i think what TimToady just did may be the ticket, no?

[20:09] <ugexe> and then does some local filtering of meta data to get what you really want

[20:09] <jdv79> i'm rebuilding now

[20:09] <nine> TimToady: thanks for fixing my bug in any case

[20:09] *** vv3 joined
[20:09] *** vv3 left
[20:09] <jdv79> ugexe: ok

[20:09] <stmuk> jdv79: yes hence "unless other fixes work

[20:10] <stmuk> :)

[20:10] <TimToady> I successfully precomped DBIish, anyway

[20:10] <stmuk> yay

[20:10] <TimToady> though haven't tried it in my rakudobrew dir

[20:10] *** vv3 joined
[20:10] *** vv3 left
[20:10] <quux> I like the perl talk you gave about lord of the rigns

[20:10] <quux> i'm reading the silmarrilion

[20:11] *** llfourn left
[20:11] *** vv3 joined
[20:11] <ugexe> jdv79: is there a way to access the actual API to the metacpan stuff you have on hack?

[20:11] <TimToady> trying that now...

[20:11] <jdv79> its there.  port 5000 i think i what you are asking for

[20:11] <jdv79> what is normally api....

[20:11] <ugexe> api.metacpan.org/v0/$api-stuff

[20:12] <tadzik> stmuk: what's the problem with them, the installation time?

[20:12] *** sivoais left
[20:13] <jdv79> ugexe: http://hack.p6c.org:5000/v0/release/_search?q=distribution:DBIish

[20:14] *** ZoffixMobile left
[20:14] <nine> TimToady: don't know if I'll be able to sneak away from Christmas celebrations, so I guess we'll just go with your fix. To my shame the same problem appeared with the .deps files, too, so I could have anticipated rev-deps...

[20:14] <RabidGravy> I'm doing quite well here, only a quarter of the modules thus far have needed fixing

[20:14] <jdv79> ugexe: that download_url is unforunate - it should be the other port *sigh*

[20:14] <stmuk> tadzik: yes which may be fixed

[20:15] *** sivoais joined
[20:15] <ChoHag> What's the closest perl6 thing to perldoc Mod::ule?

[20:15] <tadzik> stmuk: but is it already dropped from Star itself? I try to have Task::Star follow that

[20:15] <ugexe> jdv79: ah cool, that will help. i was hoping the <metadata> would use meta-spec 6 (or whatever META6.json is)

[20:15] <jdv79> Bailadfor installed in 3m here

[20:15] <jdv79> way better than before ~ 10min

[20:16] *** vv3 left
[20:16] <jdv79> ugexe: in what way.  it is kinda shorhorned atm

[20:16] <stmuk> tadzik: ah I thought Task::Star was master

[20:16] *** brrt left
[20:16] <jdv79> one of those messy details for later unless its important to you sooner

[20:16] <jdv79> *shoehorned

[20:17] <tadzik> stmuk: it probably should be somehow integrated, I'm not very good at keeping it up-to-date

[20:17] *** vv3 joined
[20:17] *** vv3 left
[20:17] *** vv3 joined
[20:17] *** vv3 left
[20:17] <stmuk> OK will close PR

[20:17] <tadzik> I'm having a shameful shortage of tuits these... years

[20:17] <TimToady> RandalSchwartz: I think if you 'rakudobrew build moar' again you should be able to finish DBIish now

[20:18] <TimToady> and you can watch its progress now if you say: RAKUDO_LOG_PRECOMP=1 panda --force install DBIish

[20:18] <jdv79> now what are the chances of finding a resturant open now in berlin.  i'm pretty sure this mission wil fail.

[20:18] <flussence> tadzik: I know the feeling, been procrastinating on some projects since before I started using p6 :(

[20:18] *** vv3 joined
[20:18] *** vv3 left
[20:18] <jdv79> wow!  DBIish installed in 3m here as well

[20:18] <ugexe> jdv79: i was guessing that all the data was generated *from* the <metadata> field itself, and that the <metadata> field was the meta/makefile data as distributed in the actual distribution. i.e. <metadata> would be the literal META6.json of the distribution

[20:18] <jdv79> TimToady++

[20:19] <nine> TimToady++ indeed :)

[20:19] *** vv3 joined
[20:19] <cxreg> TimToady++ # merry 6mas

[20:19] <tadzik> flussence: in my case it embarrasingly coincided with the release of Steam for linux ;P

[20:19] <flussence> I've got no excuse, never got that damn thing to work right :)

[20:20] <jdv79> ugexe: well, for p5 its something like meta.json transformed into a meta obj thing

[20:20] * TimToady was just trying to help out his old pal RandalSchwartz++

[20:20] <jdv79> it could be different for p6, probably should be.

[20:20] <jdv79> its largely very similar as far as i've soon so far though

[20:21] <tadzik> Skarsnik: yt?

[20:21] <cxreg> once upon a time there was accomodation for multiple versions/authors of a module loaded at once.  is that still so?

[20:21] <jdv79> ugexe: what do you need from it?

[20:21] <jdv79> maybe that'll help give me or whoever direction 

[20:21] <jdv79> but i must at least look for food now.  later.

[20:22] <cxreg> i've become quite fond of nodejs's load-by-reference model that discards the symbol table

[20:22] *** sivoais left
[20:23] <TimToady> cxreg: in theory, using 'need' instead of 'use' just loads the module without import, but I dunno if we get name collisions anywhere that way

[20:23] <TimToady> it's possible we're still storing things under the short name, in which case, the short answer is "no"

[20:24] <TimToady> and the long answer is "not yet"

[20:24] <TimToady> :)

[20:24] <Skarsnik> tadzik, yes?

[20:24] *** vv3 left
[20:24] *** asht_ joined
[20:25] <stmuk> does Bailador install?

[20:25] *** vv3 joined
[20:25] *** vv3 left
[20:25] *** sivoais joined
[20:25] *** vv3 joined
[20:25] *** vv3 left
[20:26] <stmuk> and is the multiple install fix for "unbox" still needed?

[20:26] <stmuk> "fix" :)

[20:26] *** vv3 joined
[20:26] *** vv3 left
[20:26] <asht_> just installed rukudo on mac os x and windows. panda fails to install Inline::Perl5 on both platforms

[20:26] <cxreg> TimToady: cool.  maybe later?  is it crazy to imagine a version of need/use that skips the symbol table or returns some localized one to the caller?

[20:27] <cxreg> my $Foo-Bar = need Foo::Bar;

[20:27] *** vv3 joined
[20:27] <asht_> any one with ideas on what could be wrong? On windows it complains no program ccalled "git" when it tries to get module from goit:://github....

[20:28] <nine> TimToady: I think jnthn++ did some work in that direction, but there's a link missing between module loading and class naming

[20:28] *** pmurias joined
[20:28] <stmuk> asht_: http://doc.perl6.org/language/faq#As_a_Perl_6_beginner_what_should_I_install%3F

[20:28] <TimToady> ==> Successfully installed Task::Star  \o/

[20:28] <ugexe> jdv79: nothing in particular, mostly for ease of use. i have a fallback that tries to generate a meta6 without using the <metadata> field. but things like identity strings for prereqs/depends involving authority/api stuff would work better using the META6 spec i think. i think i might have run into something regarding replacing '::' with '-' like meta-spec 2 does when a module name actually has a '-' in it. 

[20:28] <stmuk> asht_: "You will need Windows Git to use panda"

[20:28] <stmuk> TimToady++

[20:29] <pmurias> is there a special christmas rakudo release today?

[20:29] <TimToady> tomorrow

[20:29] <asht_> where can I get windows GIT?

[20:30] <TimToady> sometime on the 25th, somewhere in the world :)

[20:30] <stmuk> asht_: http://lmgtfy.com/?q=windows+GIT

[20:30] *** MARTIMM left
[20:30] <Rotwang> What about this one:

[20:30] <Rotwang> m: say (**/2)(4,4)

[20:30] <camelia> rakudo-moar 11040a: OUTPUT«(2 2)␤»

[20:31] <Rotwang> what on earth just happened?

[20:31] *** virtualsue left
[20:32] *** vv3 left
[20:32] *** sivoais left
[20:32] *** Bleary joined
[20:33] <Rotwang> Two stars have special semantics?

[20:33] *** vv3 joined
[20:33] *** vv3 left
[20:34] <ranguard> http://www.cpan.org/authors/id/P/PS/PSIXDISTS/Perl6/ now being populated from modules.perl.org

[20:34] *** vv3 joined
[20:34] *** vv3 left
[20:34] <TimToady> Rotwang: yes, that's a HyperWhatever, works on a list

[20:34] <stmuk> ranguard++ 

[20:34] *** vendethiel joined
[20:34] *** vv3 joined
[20:34] *** vv3 left
[20:35] *** sivoais joined
[20:35] <TimToady> m: say WHAT **

[20:35] <camelia> rakudo-moar 11040a: OUTPUT«(HyperWhatever)␤»

[20:35] *** vv3 joined
[20:36] <Rotwang> TimToady: thanks, there is much to learn over christmas C:

[20:37] * vendethiel waves

[20:37] <rindolf> Hi all! To commemorate the release of Perl 6 , I think I'll translate my solution to the most recent Project Euler problem to Perl 6.

[20:38] <Skarsnik> i:p5 still does not want to install :(

[20:40] *** raiph left
[20:40] <TimToady> installed for me

[20:40] *** vv3 left
[20:40] <TimToady> did you rebuild moar?

[20:41] *** vv3 joined
[20:41] *** vv3 left
[20:42] *** vv3 joined
[20:42] *** vv3 left
[20:42] <perlpilot> Who is doing the PSIXDISTS uploads to CPAN?

[20:42] <ranguard> me

[20:43] *** vv3 joined
[20:43] *** vv3 left
[20:43] <nine> Skarsnik: what goes wrong?

[20:43] * stmuk confesses his ecosystem module stealing crime to cosimo

[20:43] <Skarsnik> Yes I just nuke and rebuild 10 min ago

[20:43] *** vv3 joined
[20:43] <Skarsnik> https://gist.github.com/Skarsnik/5546acb9b7be2aaa2a8b

[20:43] <perlpilot> ranguard: to what end exactly?

[20:44] <Skarsnik> could is be my perl5 version? (5.20)

[20:44] <ranguard> perlpilot: https://github.com/perl6modules/perl6-module-uploader

[20:44] <stmuk> ranguard++ # DoS protection from Chinese Govt

[20:45] <Bleary> Merry Christmas from Melbourne, AU.  Five sugar high children here...  I'm trying to explain my stocking has a programming language in it :-)

[20:45] <TimToady> Skarsnik: are you running this as root?

[20:45] <ranguard> perlpilot: slightly out of date - the version bit... as I need a version that gets indexed to help jdv79 with metacpan6

[20:46] <RabidGravy> stmuk, hey I've just copied a third of a module into one of mine since it never got fixed after the GLR and I only needed ten lines of code

[20:46] <perlpilot> ranguard: yeah, I understand what your doing now.  I had some lingering worries, but they've been answered.  Thanks.

[20:47] <ranguard> :)

[20:47] *** virtualsue joined
[20:48] <nine> Skarsnik: is your perl cimpiled with -fPIC like the README describes?

[20:48] *** vv3 left
[20:48] <perlpilot> So ... how do I upload my Perl 6 stuff to CPAN?  is it just as easy as provising a META6.json in the tarball?

[20:49] <perlpilot> s/provising/providing/

[20:49] <Skarsnik> Yes I am running stuff as root x)

[20:49] <Skarsnik> nine, How I can check that? it's perl5 from debian stable x)

[20:49] *** vv3 joined
[20:49] *** vv3 left
[20:49] <ranguard> perlpilot: and using a subdir of Perl6

[20:50] <ranguard> perlpilot: https://pause.perl.org/pause/authenquery?ACTION=add_uri has instructions

[20:50] *** vv3 joined
[20:50] *** vv3 left
[20:50] <perlpilot> cool.  I may try it in the next week or so.

[20:50] *** labster joined
[20:50] <nine> perl -V prints a lot

[20:51] <perlpilot> anyway ... Merry Christmas all!

[20:51] *** vv3 joined
[20:51] *** vv3 left
[20:51] * perlpilot has to run

[20:51] * perlpilot *poof*

[20:51] *** perlpilot left
[20:51] <Skarsnik> Dynamic Linking:

[20:51] <Skarsnik>     dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef, ccdlflags='-Wl,-E'

[20:51] <Skarsnik>     cccdlflags='-fPIC', lddlflags='-shared -L/usr/local/lib -fstack-protector'

[20:51] <Skarsnik> I guess it's fine?

[20:51] *** lucasb joined
[20:52] *** vv3 joined
[20:52] <cxreg> does panda pull from cpan?  i thought it was separate

[20:52] <TimToady> Skarsnik: it's possible that perl is automatically turning on tainting when run as root

[20:52] <ranguard> cxreg: not yet

[20:52] <TimToady> so try it outside of root

[20:52] <cxreg> ranguard: oh ok, still the case, thx

[20:54] *** rurban1 joined
[20:54] <Skarsnik> TimToady, sound like an issue if you can't install I:p5 system wide as root x)

[20:55] <TimToady> yeah, but it's not an xmas issue because we're not promising system-wide installation yet

[20:56] <atweiden> vim users of youcompleteme, i think i figured out why kebab case completions aren't working

[20:56] <atweiden> there needs to be a custom ruleset for p6 at: https://github.com/Valloric/ycmd/blob/master/ycmd/identifier_utils.py#L69

[20:56] * flussence dryly notes that smoke.perl6.org is massively more helpful than testers.p6c.org right now, because the former is showing 40% of the ecosystem broken while the latter is claiming everything's all green all the time...

[20:56] <leont> wait status 11 means segfault

[20:56] *** rurban left
[20:56] *** vv3 left
[20:57] <leont> Skarsnik: ^

[20:57] *** hallbjorn joined
[20:57] *** vv3 joined
[20:57] *** vv3 left
[20:58] <Skarsnik> damn smoke is interesting :)

[20:58] *** vv3 joined
[20:58] *** vv3 left
[20:59] *** vv3 joined
[20:59] *** vv3 left
[21:00] <leont> I'd advice running one of those tests with GDB and see what shows up

[21:00] *** vv3 joined
[21:01] *** hallbjorn left
[21:02] <dalek> doc: 8e543e3 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[21:02] <dalek> doc: doc Assignment Operators

[21:02] <dalek> doc: review: https://github.com/perl6/doc/commit/8e543e3c55

[21:02] <dalek> doc: 7c1a0c0 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[21:02] <dalek> doc: Merge pull request #262 from gfldex/master

[21:02] <dalek> doc: 

[21:02] <dalek> doc: doc Assignment Operators

[21:02] <dalek> doc: review: https://github.com/perl6/doc/commit/7c1a0c0fd1

[21:04] <RabidGravy> gah, sergot you in the house?

[21:05] *** vv3 left
[21:05] *** llfourn joined
[21:05] *** vv3 joined
[21:05] *** vv3 left
[21:06] <atweiden> rakudo nom fails at `make install`: http://ix.io/mYc

[21:06] <atweiden> tools/build/install-core-dist.pl at issue

[21:06] *** vv3 joined
[21:06] *** vv3 left
[21:07] *** bpmedley_ joined
[21:07] *** Atomic_Dz4vo joined
[21:07] *** vv3 joined
[21:07] *** vv3 left
[21:08] *** vv3 joined
[21:08] <moritz> PSA: http://shop.spreadshirt.de/rakudo/ now has lambdacamel t-shirts

[21:10] *** llfourn left
[21:10] *** ZoffixWin joined
[21:11] <ZoffixWin> flussence: note that smoke page is like 20 days old

[21:12] *** Guest11856 joined
[21:12] <ZoffixWin> .oO( second system? )

[21:12] <tadzik> Skarsnik: so I tried the Any/null test, and it works even wihtout the code changes

[21:12] *** hankache joined
[21:12] <dalek> doc: 12df7b2 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[21:12] <dalek> doc: explain Meta Operators

[21:12] <dalek> doc: review: https://github.com/perl6/doc/commit/12df7b20b6

[21:12] <dalek> doc: ad5fae0 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[21:12] <dalek> doc: Merge pull request #263 from gfldex/master

[21:12] <dalek> doc: 

[21:12] <dalek> doc: explain Meta Operators

[21:12] <dalek> doc: review: https://github.com/perl6/doc/commit/ad5fae0b36

[21:13] *** vv3 left
[21:14] *** vv3 joined
[21:14] *** vv3 left
[21:14] *** Bleary left
[21:14] *** vv3 joined
[21:14] *** vv3 left
[21:15] *** hallbjorn joined
[21:15] *** vv3 joined
[21:15] *** vv3 left
[21:15] * ZoffixWin wants a black mug with camelia and "Just another Perl 6 hacker" on it...

[21:16] *** vv3 joined
[21:17] <leont> tap-harness passes its tests again \o/ (though minus a feature until a rakudobug is fixed)

[21:17] *** asht left
[21:17] *** asht_ left
[21:18] *** yqt joined
[21:19] <flussence> ZoffixWin: that's a very good point (I assume it's been failing to complete a daily run since then), but at the same time, the other one doesn't even have timestamps!

[21:20] <ZoffixWin> flussence: well, at the bottom it says "generated at Dec 24"

[21:20] <atweiden> between 2015.11 release and now, did something change in https://github.com/rakudo/rakudo/blame/nom/src/core/CompUnit/Repository/Installation.pm#L7 to make it no longer take DESTDIR (`make DESTDIR=...`) into consideration when checking for path writeability?

[21:20] <Guest11856> why is perl 6 named "perl 6" if it's a completely new language, isn't it damanging both ecosystems?

[21:21] <ZoffixWin> Guest11856: the answer is "history"

[21:21] <flussence> Guest11856: why is C# named C#?

[21:21] *** vv3 left
[21:21] <ZoffixWin> Guest11856: as for damage, I'm not sure why you think there would be any damage.

[21:21] <ZoffixWin> Guest11856: if you care to elaborate, I can answer more questions.

[21:21] <dalek> rakudo/nom: 6c3e8ad | TimToady++ | src/Perl6/Optimizer.nqp:

[21:21] <dalek> rakudo/nom: Suppress usually harmless DISLOCATED MESSAGEs

[21:21] <dalek> rakudo/nom: 

[21:21] <dalek> rakudo/nom: The need for this bug flusher outer is largely past.

[21:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c3e8ad88f

[21:21] <dalek> rakudo/nom: 08ba7f5 | TimToady++ | tools/build/NQP_REVISION:

[21:21] <dalek> rakudo/nom: bump NQP to get sprintf message fix

[21:21] <dalek> rakudo/nom: 

[21:21] <dalek> rakudo/nom: and apparently a lot of other accumulated changes that we'd

[21:21] <dalek> rakudo/nom: better get some time on before release...

[21:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/08ba7f5041

[21:21] <tadzik> it's half a tone higher than C, duh

[21:21] <ZoffixWin> tadzik++

[21:21] <flussence> *groan* :)

[21:22] <dalek> nqp: b345d13 | TimToady++ | / (2 files):

[21:22] <dalek> nqp: improve LTA sprintf message

[21:22] <dalek> nqp: 

[21:22] <dalek> nqp: Otherwise people are clueless what "directives" mean...

[21:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b345d13341

[21:22] *** vv3 joined
[21:22] *** vv3 left
[21:23] *** vv3 joined
[21:23] *** vv3 left
[21:23] <Guest11856> ZoffixWin, it carries all the stigma that perl has over perl 6

[21:23] <RabidGravy> Skarsnik, you know everything about how NativeCall finds the libraries don't you

[21:23] <leont> How can I figure out why my Koalatee score isn't 100%? If I click on the number/link, I get a "Not Implemented Yet" error

[21:23] *** lichtkind joined
[21:23] *** lichtkind left
[21:23] <ZoffixWin> Guest11856: which stigma in particular?

[21:23] *** vv3 joined
[21:23] *** vv3 left
[21:23] *** Atomic_Dz4vo left
[21:23] <Guest11856> people also thing that perl 6 is just another version of perl, but they're completely different

[21:24] <ZoffixWin> Guest11856: true.

[21:24] <Guest11856> ZoffixWin, it's old, it's line noise, it's spaghetti, ...

[21:24] *** vv3 joined
[21:24] <RabidGravy> it works

[21:24] <flussence> I don't think we're targeting the sort of audience that base their entire prejudices on a number or name...

[21:24] <ZoffixWin> Guest11856: but for historical reasons, it's too late to change the name. We just have to make the best out of the situation and if the two communities join together, I believe we can clarify any confusion

[21:24] *** pierre-vigier joined
[21:25] *** labster left
[21:25] <ZoffixWin> Guest11856: those arguments can be applied equally to Perl 6, regardless of what it's named. The only one that's not quite true is "it's old." 

[21:25] *** Theophane joined
[21:25] <Theophane> o/

[21:26] *** n0xff joined
[21:26] <flussence> .oO( if you think the name is bad, wait 'til you bother to read the website for the first time... )

[21:26] <ZoffixWin> Guest11856: you're also leaving the beneficial aspects of the name. Perl is a well-known name. 

[21:26] <ZoffixWin> s/leaving/leaving out/;

[21:27] *** cognominal joined
[21:27] *** pierre-v_ left
[21:27] <Su-Shee> oh well why is javascript named after java and it quite emancipated from that...

[21:28] *** joydon joined
[21:28] <ZoffixWin> Guest11856: and since you mention that the damage is being done to both ecosystem, I disagree with that point. I think Perl 5 can get new users too. Users that haven't been following the Perl world and don't realize that P5 changed significantly. If they don't care about new P6 features, they could go and check out the improvements in P5.

[21:29] <Theophane> Su-Shee: because of commercial interests :)

[21:29] *** vv3 left
[21:29] <Su-Shee> Theophane: that was rhetorical to the subject. not a question.

[21:29] <ZoffixWin> Guest11856: what are your thoughts on my reasoning?

[21:30] *** hankache left
[21:30] <RabidGravy> dun trollin

[21:30] *** vv3 joined
[21:30] *** vv3 left
[21:30] <ZoffixWin> Ah :D

[21:30] <ZoffixWin> Oh

[21:30] *** hankache joined
[21:30] <Theophane> Su-Shee: :P okay

[21:30] <ZoffixWin> Guest11856: ronin! :) The name sounds familiar :)

[21:31] *** vv3 joined
[21:31] *** vv3 left
[21:31] *** vv3 joined
[21:31] *** vv3 left
[21:32] *** vv3 joined
[21:33] <Su-Shee> javascript managed very nicely to overcome its bad rep and become hip and clojure managed nicely to be a lisp finally used. perl 5&6 can only learn from that.

[21:34] <awwaiid> HyperWhatever! so many things to learn :)

[21:34] <rindolf> Hi all! With close to latest Rakudo moar, this program does not print the Discord line and instead starts consuming all CPU and RAM - http://www.shlomifish.org/Files/files/text/prob539-shlomif.p6.txt . Why?

[21:34] <hankache> awaiid you like it?

[21:35] <hankache> the hyper operator is one of my favorites, no more for loops

[21:36] *** labster joined
[21:37] * flussence saw hyperwhatever used for the first time a few days ago, and now can't remember what for

[21:37] *** vv3 left
[21:38] <awwaiid> hankache: I haven't digested it yet, but I have been fascinated by the "regular" WhateverStar for a while now :)

[21:38] *** vv3 joined
[21:38] *** vv3 left
[21:39] <rindolf> And happy holidays , everybody.

[21:39] *** vv3 joined
[21:39] *** vv3 left
[21:39] <RabidGravy> anyone in a position to help work out how to fix the library function in OpenSSL

[21:40] <rindolf> RabidGravy: the P6 module?

[21:40] <RabidGravy> happy everything rindolf

[21:40] *** vv3 joined
[21:40] *** vv3 left
[21:40] <rindolf> RabidGravy: thanks.

[21:40] <RabidGravy> yeah

[21:40] <leont> What are the Koalatee items anyway? The percentages suggest there are 5, but I can only find suggestions for 4 (has readme, has tests, has source-url and has provides)

[21:40] <dalek> rakudo-star-daily: dca119d | coke++ | log/ (8 files):

[21:40] <dalek> rakudo-star-daily: today (automated commit)

[21:40] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/dca119d533

[21:40] <rindolf> RabidGravy: ah, where is the code?

[21:40] *** vv3 joined
[21:41] <RabidGravy> this is the offending file https://github.com/jonathanstowe/openssl/blob/master/lib/OpenSSL/NativeLib.pm6

[21:42] <flussence> RabidGravy: try replacing the bare 'libssl' string with just 'ssl', I think it does some magic if there's no .so appended now

[21:43] *** virtualsue left
[21:44] <RabidGravy> no tried that, it doesn't do quite the same magic if it's a Routine in the native trait

[21:44] <flussence> ah, dunno then...

[21:45] <atweiden> rakudo isn't building on arch due to this commit: https://github.com/rakudo/rakudo/commit/e485cd8698ca00412aba932033aec8349a71a895

[21:45] <atweiden> DESTDIR is not being passed to https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/Repository/Installation.pm#L9, so the installer thinks a writeable path DNE

[21:45] <ZoffixWin> leont: not having a failing Travis is a point

[21:45] *** vv3 left
[21:45] <rindolf> Does anyone have any idea about my problem? Am I doing anything wrong?

[21:46] <leont> I see. Then I'm still not sure which ones I'm failing :-/

[21:46] <flussence> atweiden: thanks for tracking it down! exact same problem's happening on gentoo but I had no idea where to begin

[21:46] *** vv3 joined
[21:46] *** vv3 left
[21:47] <ZoffixWin> leont: which dist?

[21:47] <leont> YAMLish and Path::Iterator

[21:48] <leont> Ow wait, YAMLish is missing a README

[21:48] * leont is just blind -_-

[21:49] *** Su-Shee left
[21:49] <dalek> rakudo/nom: 70ab538 | TimToady++ | src/Perl6/Optimizer.nqp:

[21:49] <dalek> rakudo/nom: whoops, only comment the message, not the return

[21:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/70ab538678

[21:50] <rindolf> I see - I had a |= instead of a +|= - and it caused the runtime to FUBAR.

[21:50] <rindolf> Now it runs but yields the wrong result . :-(

[21:50] <awwaiid> rindolf: I'm practicing hitting it with LREP; one hting is that if you try to print out $mymin right at Pinkie it hangs; I don't know what is in there but seems bad

[21:50] <awwaiid> ahh

[21:50] <rindolf> awwaiid: ah,

[21:51] <awwaiid> yeah -- $mymin.WHAT -> (Junction)

[21:51] <awwaiid> interesting

[21:51] <dalek> doc: d82b06c | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[21:51] <dalek> doc: doc Assignment Operators

[21:51] <dalek> doc: review: https://github.com/perl6/doc/commit/d82b06c872

[21:51] <dalek> doc: c35787f | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[21:51] <dalek> doc: Merge pull request #265 from gfldex/master

[21:51] <dalek> doc: 

[21:51] <dalek> doc: doc Assignment Operators

[21:51] <dalek> doc: review: https://github.com/perl6/doc/commit/c35787feaf

[21:51] <awwaiid> with your change, $mymin is an Int == 864691128455135232

[21:52] * ZoffixWin got distracted

[21:52] <flussence> that looks vaguely 2**63ish

[21:52] <ZoffixWin> leont: YAMLish is losing 20% for missing README

[21:52] <flussence> m: say 2**63

[21:52] <camelia> rakudo-moar 08ba7f: OUTPUT«9223372036854775808␤»

[21:52] *** [Tux] left
[21:52] <dalek> roast: 57179ad | TimToady++ | S32-str/sprintf.t:

[21:52] <dalek> roast: test for upgraded printf directives message

[21:52] <dalek> roast: review: https://github.com/perl6/roast/commit/57179ad6a0

[21:52] <flussence> well, some of the digits match...

[21:52] *** travis-ci joined
[21:52] <regreg> is there any release date for final xmas rakudo on windows?

[21:52] <travis-ci> Rakudo build failed. TimToady 'bump NQP to get sprintf message fix

[21:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/98722290 https://github.com/rakudo/rakudo/compare/11040a7a564e...08ba7f504143

[21:52] *** travis-ci left
[21:52] <ZoffixWin> leont: and so is the other dist

[21:52] <rindolf> what's the equivalent of python -i (= run the script and then enter the REPL with all defs present) in perl6?

[21:52] *** [Tux] joined
[21:53] <atweiden> flussence: really want to figure this out before christmas

[21:53] <ZoffixWin> leont: sorry, I intend to make a proper Koaleety page that shows what's failing and why and how to fix it.

[21:53] <flussence> atweiden: yeah, me too :(

[21:53] <ZoffixWin> .... when I stop celebrating :)

[21:53] * ZoffixWin does another shot

[21:53] <atweiden> i did find this though: https://github.com/rakudo/rakudo/commit/f94c31e27bf58b6ca02ed95b1d9af4a43e700539

[21:53] <flussence> compunit stuff is way over my head atm...

[21:53] <awwaiid> don't think there is one, but you can try my LREP alternative REPL (which is not as good as the built in one for some definitions, but good for others). For this I did "panda install LREP", dropped "LREP::here" right after Pinkie, then perl6 -MLREP prob539-shlomif.p6 . Then you get a prompt

[21:53] <atweiden> am now rerunning with `make install DESTDIR=... PERL6_LANG_DIR=...`

[21:54] *** pdcawley joined
[21:54] <rindolf> awwaiid: are you talking to me?

[21:54] <TimToady> .tell [Coke] where are the 6.c tests?  I don't see a branch, and 57179ad needs to go over

[21:54] <yoleaux> TimToady: I'll pass your message to [Coke].

[21:54] <awwaiid> rindolf: biggest drawback right now is that newly defined stuff doesn't get kept

[21:54] *** rurban1 left
[21:54] <jdv79> ugexe: so obv you could walk deps one META6 file at a time like CPAN.pm does i think or maybe we could setup some special services off metacpan?...

[21:54] <awwaiid> rindolf: yeah sorry, forgot to prefix my reply

[21:54] <[Coke]> TimToady: I thought I pushed to a branch. checking.

[21:54] <yoleaux> 21:54Z <TimToady> [Coke]: where are the 6.c tests?  I don't see a branch, and 57179ad needs to go over

[21:54] <rindolf> awwaiid: OK.

[21:55] *** hankache left
[21:55] <[Coke]> https://github.com/perl6/roast/tree/6.c ?

[21:55] <rindolf> Maybe I'll just EVAL A cmd line arg.

[21:55] <TimToady> how come it doesn't show up here as a git branch?

[21:55] <flussence> TimToady: I see a remotes/origin/6.c in my local copy...

[21:55] <awwaiid> rindolf: "LREP::here;" will start a REPL at that line and you can execute many (but not all) things in the context of your script execution

[21:56] * [Coke] hopes he didn't screw up the branching.

[21:56] *** lichtkind joined
[21:56] *** lichtkind left
[21:57] <TimToady> I guess it doesn't show up here till I checkout it

[21:57] *** nemsys left
[21:57] <labster> good postnoon, #perl6

[21:57] *** halto joined
[21:58] <[Coke]> seems to be fine in a fresh checkout

[21:58] <[Coke]> oh, you found it? ok.

[21:58] <Skarsnik> RabidGravy, mostly, what is your issue?

[21:58] <[Coke]> probably needed a branch -r or -a to see it before you made a local one.

[22:00] <dalek> roast/6.c: 57179ad | TimToady++ | S32-str/sprintf.t:

[22:00] <dalek> roast/6.c: test for upgraded printf directives message

[22:00] <dalek> roast/6.c: review: https://github.com/perl6/roast/commit/57179ad6a0

[22:00] <dalek> roast/6.c: 0cb65f1 | TimToady++ | S32-str/sprintf.t:

[22:00] <dalek> roast/6.c: Merge commit '57179ad' into 6.c

[22:00] <dalek> roast/6.c: review: https://github.com/perl6/roast/commit/0cb65f1c94

[22:00] <TimToady> did I do it right?

[22:00] <RabidGravy> Skarsnik, actually I think it's cool - just use  $*VM.platform-library-name in the https://github.com/jonathanstowe/openssl/blob/master/lib/OpenSSL/NativeLib.pm6

[22:00] <TimToady> looks like, or it wouldn't have only listed one file

[22:00] <[Coke]> seems plausible. :()

[22:00] <[Coke]> er, :)

[22:00] <rindolf> awwaiid: thanks.

[22:01] <TimToady> funny that a branch is invisible till you co it

[22:01] <[Coke]> how were you looking for it?

[22:01] <TimToady> git branch

[22:01] <awwaiid> need "git branch -a" maybe

[22:01] <atweiden> flussence: it appears setting PERL6_LANG_DIR=... is necessary but not sufficient

[22:02] <Skarsnik> RabidGravy, hoo good find on openssl x) I did not manage to install h:ua so I did not stumble on that

[22:02] <[Coke]> yah, that only shows local branches.

[22:02] <labster> git branch -r

[22:02] <TimToady> ah, yeah, that lists a whole lot more of 'em

[22:04] <TimToady> well, gotta go play my fiddle at a Christmas Eve thingie, so I'd better go take a shower...

[22:05] <TimToady> afk &

[22:05] <El_Che> cheers TimToady , cheers #perl6

[22:06] *** llfourn joined
[22:06] <dalek> doc: 8fe1835 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[22:06] <dalek> doc: doc Reversed Operators, the question "why?" remains unanswered.

[22:06] <dalek> doc: review: https://github.com/perl6/doc/commit/8fe1835c1b

[22:06] <dalek> doc: 1cbb2cf | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[22:06] <dalek> doc: Merge pull request #266 from gfldex/master

[22:06] <RabidGravy> sergot, I've sent a PR for OpenSSL

[22:06] <dalek> doc: 

[22:06] <dalek> doc: doc Reversed Operators, the question "why?" remains unanswered.

[22:06] <dalek> doc: review: https://github.com/perl6/doc/commit/1cbb2cf820

[22:07] * flussence has a sinking realisation that most of the people who'd know how this compunit stuff works aren't gonna be around until tomorrow, if at all...

[22:08] <pmurias> Guest11856: The way 6 relates to 5 in Perl 6 vs Perl 5 is similiar to the way movies and computer games are versioned

[22:08] <RabidGravy> :)

[22:09] <Skarsnik> not a good day for me: Update Gumbo for nativecall change in lib, the module fail on a weird error now. I want to work on Discord module (for a bot of mine) http::ua does not install. I switch to write something to play with a movie format => inline:perl5 does not install xD

[22:11] <rindolf> http://www.shlomifish.org/Files/files/text/prob539-shlomif.p6.txt - I am getting an empty b_exp at the Griffon line.

[22:11] <Skarsnik> http://www.sandraandwoo.com/2015/12/24/0747-melodys-guide-to-programming-languages/ too bad, no perl in this x)

[22:12] *** llfourn left
[22:14] *** cygx joined
[22:14] <cygx> merry almost-christmas o/

[22:14] <vendethiel> *g*

[22:14] <rindolf> cygx: it's already 25-Dec here.

[22:15] <ZoffixWin> rindolf: stop bragging, future boy :P

[22:15] <cygx> re flags after arguments and MAIN, one of my scripts actually does this: https://gist.github.com/cygx/cd9d9e1ee0db7e680949

[22:15] <cygx> not a general solution, but good enough for what I was doing

[22:16] <cygx> rindolf: are you, like, from the future?

[22:16] <cygx> do you have flying cars yet?

[22:16] <rindolf> cygx: heh.

[22:17] <Skarsnik> rakudo does not like when the build fail in a middle for an external reason (not enought disk space)

[22:17] <Skarsnik> need to nuke everytime lol

[22:17] <labster> stop filling up your disk

[22:18] <rindolf> Anyone knows what the problem is ?

[22:18] *** ZoffixWin_ joined
[22:18] *** ZoffixWin_ is now known as Zoffix

[22:18] <rindolf> Griffon b_exp = <2..1> ==> this is wrong.

[22:19] *** Zoffix left
[22:19] *** Zoffix joined
[22:19] * [Coke] off-topicalyl hurls https://www.youtube.com/watch?v=rmi2orAKG3w - his kid's acapella group.

[22:19] *** kjs_ joined
[22:20] <dalek> rakudo/nom: 9cab516 | labster++ | Configure.pl:

[22:20] <dalek> rakudo/nom: document --make-install and --no-clean in Configure.pl

[22:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9cab5167d9

[22:20] <atweiden> flussence: sed -i 's/$.prefix.w/True/g' src/core/CompUnit/Repository/Installation.pm

[22:20] <atweiden> :)

[22:20] *** ZoffixWin left
[22:20] <rindolf> Oh, I needed triple dot.

[22:20] *** Zoffix is now known as ZoffixWin

[22:20] *** ZoffixWin left
[22:21] <Skarsnik> hm

[22:21] <Skarsnik> In file included from src/vm/moar/ops/perl6_ops.c:2:0:

[22:21] <Skarsnik>  #include <uv.h>

[22:21] <Skarsnik>  /home/piko/.rakudobrew/moar-nom/install/include/moar/moar.h:24:16: fatal error: uv.h: Aucun fichier ou dossier de ce type

[22:21] <flussence> atweiden: that looks... reeeeeeeally wrong but I'll give it a shot

[22:21] *** ZoffixWin__ joined
[22:21] <atweiden> flussence: what it's not proper sed regex? :)

[22:22] *** ZoffixWin__ is now known as ZoffixWin

[22:22] <flussence> if I understand it right, it's changing the code so it thinks all paths are installable to even if they're root-owned

[22:23] <flussence> that'll probably explode the first time someone tries to install a module as a regular user

[22:23] *** kjs_ left
[22:24] <flussence> (which, admittedly, is an improvement over right now...)

[22:24] *** noda joined
[22:24] <labster> m: '/'.IO.mkdir # if anyone feels like fixing this one while poking around moar, that would be nice

[22:24] <camelia> rakudo-moar 70ab53: OUTPUT«(signal SEGV)»

[22:25] <atweiden> good point

[22:25] *** xfix left
[22:25] <atweiden> yea it's not a fix

[22:26] <RabidGravy> ouch

[22:27] <dalek> doc: f12060a | ab5tract++ | doc/Language/operators.pod:

[22:27] <dalek> doc: Clarify about assignment meta op

[22:27] <dalek> doc: review: https://github.com/perl6/doc/commit/f12060a7f0

[22:27] *** kjs_ joined
[22:29] *** noda left
[22:29] *** hallbjorn left
[22:34] <dalek> perl6-examples: 26f59ff | (Shlomi Fish)++ | categories/euler/prob539-shlomif.p6:

[22:34] <dalek> perl6-examples: Add a solution to Euler #539.

[22:34] <dalek> perl6-examples: 

[22:34] <dalek> perl6-examples: It works but is incredibly crude.

[22:34] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/26f59ff919

[22:35] *** AlexDaniel joined
[22:36] <dalek> perl6-examples: a4a4673 | (Shlomi Fish)++ | categories/euler/prob539-shlomif.p6:

[22:36] <dalek> perl6-examples: Add missing trailing semicolons.

[22:36] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/a4a4673940

[22:36] *** uruwi left
[22:36] * rindolf nuzzles dalek 

[22:36] *** uruwi joined
[22:36] *** uruwi left
[22:36] <atweiden> flussence: hmm it still doesn't build

[22:37] <rindolf> Wow! these junction operators sure can yield subtle errors if used instead of the bitwise operators.

[22:37] <atweiden> could be because i didn't set PERL6_LANG_DIR

[22:41] <RabidGravy> All sorts of not installing action going on here

[22:42] *** Guest11856 left
[22:42] <leont> Style question: in enum values, would you use Foo-Bar or Foo-bar?

[22:44] <atweiden> nope this is fubar

[22:44] <flussence> :(

[22:45] <TimToady> leont: I'd use whatever looks best in the situation :)

[22:45] <atweiden> flussence: now it's breaking on `my $lock //= $.prefix.child('repo.lock').open(:create, :w);`

[22:46] <atweiden> (line 111 of Installation.pm)

[22:46] <flussence> looks like it's trying to write where it's not allowed to...

[22:46] <RabidGravy> I tend to go with CamelCase in enums, but that's just me

[22:47] <TimToady> yeah, as honorary types, I'd tend to CamelCase too

[22:47] <TimToady> I mean, yeah, they're really integers, but they parse like types

[22:47] <leont> My head wants to make Camel Kebab out of it, not sure yet if that's sensible

[22:48] <flussence> I've never used Arch, is it the same as in gentoo where things compile in a sandbox and the package manager merges the result to the live filesystem itself?

[22:48] <atweiden> yes

[22:48] <flussence> yup, guess we're both seeing the exact same problem then

[22:48] <leont> Debian likes to do a similar thing, AFAIK

[22:49] *** labster left
[22:49] <Skarsnik> still the same issue with i:p5 with a normal user :(

[22:50] <leont> Skarsnik: tried gdb?

[22:50] *** travis-ci joined
[22:50] <travis-ci> Rakudo build passed. Brent Laabs 'document --make-install and --no-clean in Configure.pl'

[22:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/98726639 https://github.com/rakudo/rakudo/compare/70ab538678ae...9cab5167d94b

[22:50] *** travis-ci left
[22:51] *** rickbike joined
[22:53] *** ZoffixWin left
[22:53] <Skarsnik> leont, How I can do that with panda?

[22:53] <atweiden> idk what rakudo/src/core/CompUnit/Repository/Installation.pm does exactly, but am strongly considering patching in an earlier version

[22:53] <atweiden> idk what that blows up though

[22:53] <RabidGravy> what do we do with a problem like maria

[22:53] <leont> perl6-m-gdb -Ilib t/whatever.t

[22:54] <flussence> it's part of the stuff responsible for precompiling on demand and loading the precomped files

[22:54] <flussence> problem is, it just puts those files wherever

[22:54] <leont> Not sure how to make panda get you there though, there must be a way

[22:54] <flussence> and wants to do so in the middle of compiling rakudo :(

[22:54] *** kjs_ left
[22:55] <RandalSchwartz> if I do "rakudobrew build moar", is that an incremental build with the latest commits?

[22:55] *** labster joined
[22:55] <atweiden> earlier version of tools/build/Makefile-Moar.in would probably be more sensical

[22:55] <atweiden> sensible*

[22:55] *** kjs_ joined
[22:56] <Skarsnik> leont, I mean I git clone I::perl5, I just need to run the configure to make it work?

[22:56] <leont> RandalSchwartz: it's an upgrade, yes

[22:56] <RandalSchwartz> ok thanks

[22:56] <leont> Skarsnik: I think the panda-build command will help you

[22:58] <Skarsnik> running autoload test it sigsev and with perl6-gdb it does nothing

[22:58] <Theophane> hmm

[22:59] <TimToady> hmm, on the throttle.t hangs, it appears to hang on the 8th test, which has these curious lines:

[22:59] <TimToady>     my @a; @a[9] = 0; # pre-size array to allow seamless multi-thread updates

[22:59] <TimToady>     (1..10).Supply.throttle( $n, { @a[$_] = 1 } ).wait;

[22:59] <TimToady>     is @a.sum, 10, "ok with $n at a time";

[22:59] <Theophane> does anyone know if someone released a module with a pipe operator?

[22:59] *** xtreak29 left
[22:59] <Theophane> (or if it's a native operator)

[23:00] *** palfrey joined
[23:00] <Skarsnik> Should work like any other operator x)

[23:00] <TimToady> is presizing an array really sufficient to allow multi-thread write access?

[23:00] *** palfrey left
[23:00] *** pmurias left
[23:02] <flussence> ...and ought code like that be able to work seamfully too?

[23:02] *** ZoffixWin joined
[23:02] *** ZoffixWin left
[23:02] *** ZoffixWin joined
[23:02] <TimToady> .ask jnthn see thread safety question I asked at https://irclog.perlgeek.de/perl6/2015-12-24#i_11773124 which might be related to hang of throttle.t

[23:02] <yoleaux> TimToady: I'll pass your message to jnthn.

[23:04] <nine> TimToady: it's a race condition that hits mostly when running parallel tests

[23:04] <nine> TimToady: the block passed to throttle runs too fast

[23:05] *** regreg left
[23:05] <TimToady> is there a safe way to write the test that still, er, tests?

[23:05] *** BenGoldberg joined
[23:05] <nine> I think it's a genuine bug.

[23:06] <TimToady> is it just load based, or something more structural?

[23:06] <TimToady> it's not like our parallel tests share an eval-server, at least on moar, ifaiu

[23:07] <TimToady> so how could it be anything but load based?

[23:08] <nine> It is load based. The block finishes before some thread handling or Supply's code finishes

[23:08] * cygx wonders if we should put the .precomp directories in a central location

[23:08] *** BenGoldberg left
[23:08] <nine> Typing on this phone is tedious

[23:08] *** llfourn joined
[23:09] <flussence> cygx: I tried writing a patch to do that, it didn't really solve anything

[23:09] *** molok left
[23:09] <cygx> flussence: what was the issue?

[23:09] *** BenGoldberg joined
[23:10] <rindolf> Good night everyone.

[23:10] <nine> cygx: please read jnthn++'s gist with the module handling design before speculating about changes :)

[23:10] <flussence> my initial reason was a petty "I don't want these cluttering up git-status output" :)

[23:10] *** Joy joined
[23:10] *** rindolf left
[23:10] <flussence> but also I think ugexe mentioned trying to load modules from a readonly filesystem doesn't work because of .precomp also

[23:11] <cygx> nine: there's nqp::const::STAT_PLATFORM_DEV and nqp::const::STAT_PLATFORM_INODE, so the physical location of the file doesn't matter

[23:11] *** biggy joined
[23:12] <nine> flussence: I thinkbthe read only issue can be fixed in a less drastic way

[23:13] <nine> cygx: I'm not sure I can follow you there

[23:13] <TimToady> cygx: and now's not the time to reorg things

[23:13] *** llfourn left
[23:15] <cygx> you can keep the design as-is, but instead of adding .precomp to the location in question, jst use the path's device and inode number to uniquely identify them

[23:15] <cygx> TimToady: sure, just musings about future directions

[23:15] <nine> TimToady: maybe Supply thinks the block is still running, because it only started listening to finish messages when it was already finished

[23:16] <nine> cynx inode number on Windows?

[23:16] <cygx> nine: sure

[23:16] <cygx> NTFS has an equivalent thing, and nqp supports it

[23:16] <_nadim> Merry Christmas, or whatever you belive in or like, to all of you. 

[23:16] <nine> and FAT32?

[23:17] <FROGGS> Merry Christmas _nadim :o)

[23:18] <cygx> nine: FAT32 might indeed be a problem

[23:19] <FROGGS> cygx: I don't favour solutions that ties us to filesystems

[23:19] <Skarsnik> ms drop suport for win xp and 7 is soon to come, I don't think there is still a lot of fat32 stuff x

[23:19] <FROGGS> Skarsnik: arn't usb sticks Fat32 usually?

[23:20] <nine> they are

[23:20] <Skarsnik> oh yeah... that

[23:20] <FROGGS> and what if the repo is located on a samba share?

[23:20] <dalek> doc: 381bd11 | skids++ | doc/Language/control.pod:

[23:20] <dalek> doc: Flesh out for loop docs a bit

[23:20] <dalek> doc: review: https://github.com/perl6/doc/commit/381bd110c3

[23:20] <cygx> whatif it's located somewhere you don'T have write access?

[23:20] <FROGGS> then you can install

[23:21] <FROGGS> I guess

[23:21] <FROGGS> and also cant precomp

[23:22] <flussence> okay I went and looked up where STAT_PLATFORM_foo values come from, it's libuv

[23:22] <nine> cygx: you ought to be able to write somewhere

[23:22] <TimToady> .oO(compile to memory)

[23:23] <flussence> their stuff makes no mention of ntfs/fat32 specifics, so I gave up looking

[23:23] <cygx> I'm not convinced central storage is the right things to do (additional complexity, garbage collecting the store, ....)

[23:23] <cygx> but at least i principle, it could be made to work

[23:23] <cygx> *in

[23:26] <jdv79> so is the precomp stuff considered an official part of the release?

[23:26] <nine> Sure, it's programming...it's usually just a matter of time, effort and patience (kudos to anyone catching the Babylon 5 reference there :)

[23:26] <jdv79> as in could it change "under the hood" in 6.c or is that 6.d

[23:26] <flussence> jdv79: it's going in 2015.12, but it's not part of 6.c

[23:26] <jdv79> stuff like moving file locations and having readable names and such

[23:26] <cygx> but then, creating a .precomp directory somewhere just because you used -I also is somewhat sketchy

[23:27] <skids> jdv79: I would assume only to the extent of what is tested in roast

[23:27] <jdv79> oh good cause not much is:)

[23:27] <TEttinger> so what happens after 6.z ? 6.alpha ? 6.aa ?

[23:27] <skids> By then everyone wil have gotten used to unicode

[23:27] <Skarsnik> the world end

[23:27] <cygx> TEttinger: unicode's the limit ;)

[23:27] *** kaare_ left
[23:27] <TimToady> m: say v6.z cmp v6.1

[23:27] <AlexDaniel> TEttinger: hold on, isn't it supposed to take some time between .c and .z?

[23:27] <camelia> rakudo-moar 9cab51: OUTPUT«Less␤»

[23:27] <flussence> after 6.z people start getting angry that the language that's supposed to last a century has gone through 25 changes already

[23:28] <TimToady> so we've just put off having version 6.6.6 for 25 years or so

[23:28] <ZoffixWin> :P

[23:28] <TEttinger> AlexDaniel: isn't perl 6 intended to last like 100 years?

[23:28] <Theophane> :D

[23:28] <AlexDaniel> TEttinger: yea, but first it has to last at least 25 :)

[23:29] <flussence> perl 5's only used a dozen or so major version numbers in the past while, I think we're safe

[23:29] <RabidGravy> I only care if it lasts ~30

[23:29] <geekosaur> keep in mind that it's only going to last 100 years if it continues to evolve

[23:30] <AlexDaniel> RabidGravy: hey, think about your kids!

[23:30] <geekosaur> humans are notoriously bad at predicting the future, after all >.>

[23:30] <RabidGravy> infact maybe only ~13 (until I retire)

[23:30] <RabidGravy> AlexDaniel, no kids

[23:30] *** khw left
[23:30] *** virtualsue joined
[23:30] <nine> cygx: -I makes most sense for development where you usually have write permission

[23:31] *** llfourn joined
[23:31] <AlexDaniel> geekosaur: not if we implement time travel in Perl 6! :)

[23:31] <Theophane> :D

[23:33] *** biggy left
[23:33] <dalek> doc: 1d0000d | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[23:33] <dalek> doc: show of with Hyper Operators

[23:33] <dalek> doc: review: https://github.com/perl6/doc/commit/1d0000dcda

[23:33] <dalek> doc: e4624b9 | (Wenzel P. P. Peppmeyer)++ | doc/Language/ (2 files):

[23:33] <dalek> doc: Merge remote-tracking branch 'upstream/master'

[23:33] <dalek> doc: review: https://github.com/perl6/doc/commit/e4624b9689

[23:33] <dalek> doc: 047a3cf | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[23:33] <dalek> doc: Merge pull request #267 from gfldex/master

[23:33] <dalek> doc: 

[23:33] <dalek> doc: show of with Hyper Operators

[23:33] <dalek> doc: review: https://github.com/perl6/doc/commit/047a3cfd88

[23:33] <flussence> .oO( the worst-case scenario is someone invents brain-uploading, and we'll end up being unwilling maintenance programmers trying to keep 6.c code working in 2115 )

[23:34] <AlexDaniel> flussence: we in 2115. You are rather optimistic

[23:34] <nine> Time for need. Good night all!

[23:34] <nine> for bed

[23:34] <flussence> o/

[23:34] <jdv79> later

[23:35] <cygx> flussence: sorry, but we'll likely be dead when that becomes a reality

[23:35] *** llfourn left
[23:35] <cygx> it's in fact one of the more plausible sci-fi technologies

[23:35] <jdv79> not if ray kurzweil is right

[23:35] <cygx> in contrast to, say, FTL travel

[23:36] <jdv79> iirc he believes we'll achive immmoratily before he _would have_ died

[23:36] *** kjs_ left
[23:38] <cygx> in the not-too-distant future (relatively speaking), it might be possible to fork a brain, so to speak

[23:38] <pdcawley> Hmm... what does 'Unknown QAST node type NQPMu' mean?

[23:38] <jdv79> my guess is "a serious problem"

[23:39] <AlexDaniel> cygx: yeah, would be great to use my right to fork in case of some people.

[23:39] *** BenGoldberg left
[23:40] *** cognominal left
[23:40] *** BenGoldberg joined
[23:40] <AlexDaniel> pdcawley: well, just another LTA error, I guess.

[23:40] <pdcawley> LTA?

[23:40] <AlexDaniel> pdcawley: report it if possible :)

[23:40] <AlexDaniel> pdcawley: Less Than Awesome

[23:41] <pdcawley> AlexDaniel: Ah.

[23:41] <pdcawley> Let's see if I can reduce it first.

[23:42] <pdcawley> Hmm... I think it might be me just making shit up and expecting the computer to understand it.

[23:43] <pdcawley> map { :w<$^w>, :h<$^h> } (1,2), (2,3), ... is all kinds of wrong isn't it?

[23:43] <AlexDaniel> pdcawley: basically, this error message is not wrong, possibly. But it is definitely less than awesome because someone ended up asking what it means here. That kind of stuff usually comes up when something weird happens internally.

[23:44] <flussence> needs a comma after the } in any case

[23:44] *** bpmedley_ left
[23:44] <flussence> m: map { :w<$^w>, :h<$^h> } (1,2), (2,3)

[23:44] <camelia> rakudo-moar 9cab51: OUTPUT«5===SORRY!5=== Error while compiling /tmp/LBal7cIYwE␤Missing comma after block argument to map␤at /tmp/LBal7cIYwE:1␤------> 3map { :w<$^w>, :h<$^h> }7⏏5 (1,2), (2,3)␤    expecting any of:␤        infix␤        infix stopper␤»

[23:44] <pdcawley> flussence: It actually _does_ in the code that caused the error.

[23:44] *** AndyDee joined
[23:44] <flussence> hrm

[23:44] <flussence> m: map { :w<$^w>, :h<$^h> }, (1,2), (2,3)

[23:44] <camelia> rakudo-moar 9cab51: OUTPUT«Cannot call map(Hash, List, List); none of these signatures match:␤    (&code, + is raw)␤  in block <unit> at /tmp/TQaXGrVWjH line 1␤␤»

[23:45] *** BenGoldberg left
[23:45] *** BenGoldberg_ joined
[23:45] <pdcawley> m: map { :w<$^w> :h<$^h> }, (1,2), (3,4)

[23:45] <camelia> rakudo-moar 9cab51: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[23:46] * pdcawley grins... that's my psychotic bit of code :)

[23:46] <flussence> m: dd map { :{ :$^w, :$^h } }, (1,2), (2,3)

[23:46] <camelia> rakudo-moar 9cab51: OUTPUT«Too few positionals passed; expected 2 arguments but got 0␤  in block  at /tmp/RAcxf7lpuS line 1␤  in block <unit> at /tmp/RAcxf7lpuS line 1␤␤»

[23:48] <TimToady> m: map { ; :w<$^w> :h<$^h> }, (1,2), (3,4)

[23:48] <camelia> rakudo-moar 9cab51: ( no output )

[23:48] <TimToady> m: say { :w<$^w> :h<$^h> }

[23:48] <camelia> rakudo-moar 9cab51: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[23:48] <TimToady> m: say { :w<$^w,> :h<$^h> }

[23:48] <camelia> rakudo-moar 9cab51: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[23:49] *** Ben_Goldberg joined
[23:49] <TimToady> m: say { :w<foo> :h<bar> }

[23:49] <camelia> rakudo-moar 9cab51: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[23:49] <TimToady> m: say { :w<foo> }

[23:49] <camelia> rakudo-moar 9cab51: OUTPUT«w => foo␤»

[23:49] <TimToady> m: say { :w<foo>, :h<bar> }

[23:49] <camelia> rakudo-moar 9cab51: OUTPUT«h => bar, w => foo␤»

[23:49] <cygx> m: { :w :h<42> }

[23:49] <camelia> rakudo-moar 9cab51: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[23:49] <AlexDaniel> m: say (:w<foo> :h<bar>)

[23:49] <camelia> rakudo-moar 9cab51: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[23:49] <diakopter> thar's a bug

[23:49] <TimToady> yah

[23:50] <diakopter> can you golf it any more? XD

[23:50] <AlexDaniel> m: (:w :h<x>)

[23:50] <camelia> rakudo-moar 9cab51: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[23:50] <diakopter> <kidding>

[23:50] <cygx> m: (:w :h<42>)

[23:50] <camelia> rakudo-moar 9cab51: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[23:50] *** BenGoldberg_ left
[23:50] <Skarsnik> m: (:w :h)

[23:50] <camelia> rakudo-moar 9cab51: ( no output )

[23:50] <cygx> no cigar .p

[23:50] <cygx> :p

[23:50] <jdv79> a comma isn't required there?

[23:50] <diakopter> it means the Actions is getting an empty capture and not handling the absence

[23:51] <AlexDaniel> jdv79: yeah, comma is not required to cause this error :D

[23:51] <diakopter> TimToady can fix it XD XD

[23:51] <AlexDaniel> m: say (:x :y :z)

[23:51] <camelia> rakudo-moar 9cab51: OUTPUT«(x => True y => 1 z => 1)␤»

[23:51] <diakopter> I don't have a dev env handy or else I would

[23:51] <RabidGravy> only two more modules to fix now

[23:52] <AlexDaniel> RabidGravy++

[23:52] <Skarsnik> :)

[23:52] <Skarsnik> why y and z are 1 and not True too ?

[23:53] *** AndyDee left
[23:53] <RabidGravy> I call bug on that

[23:53] <AlexDaniel> anybody going to fix that right away or should it be submitted?

[23:54] *** rurban joined
[23:54] <RabidGravy> I'd RT

[23:54] <TimToady> go ahead and submit it, not clear how quick the fix would be

[23:54] *** krshn joined
[23:55] *** firstdayonthejob left
[23:55] * leont was just going to add a readme, and now he's been hacking on that project for almost two hours and still doesn't have a readme yet :-p

[23:55] <AlexDaniel> done

[23:56] <RabidGravy> leont "echo 'Stuff' >README.md"  ;-)

