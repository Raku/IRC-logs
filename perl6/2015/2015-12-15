[00:00] <jdv79> i attempted a funny. fail.

[00:00] *** Psyche^_ left
[00:01] *** FreezerburnV joined
[00:01] <FreezerburnV> Evenin’

[00:01] <stmuk> ah

[00:02] <stmuk> well there is a single GLR post rule :P

[00:02] <jdv79> i apparently also failed strunk & white punc ws rules.  nothing but fail over here.

[00:02] <jdv79> yes...  nice.

[00:02] <jdv79> FreezerburnV: hello

[00:03] *** raiph joined
[00:03] <FreezerburnV> Question: Is there a way to qualify a needed/imported/used module to a specific namespace? e.g.: “use Long::Module::Name as foo; foo.bar();”

[00:03] <FreezerburnV> jdv79: Heya!

[00:05] <jdv79> FreezerburnV: good to have you.  i'm sorry but i do not know about that.  i don't remember reading about namespace aliasing but that means almost nothing of importance.

[00:05] *** Peter_R left
[00:06] <FreezerburnV> jdv79: Glad to be here. And no worries, hopefully someone around here knows about it. Just trying to figure out the module system so I don’t end up shooting myself in the foot somehow

[00:07] <FreezerburnV> E.g.: use a module in one module, which might end up importing that module’s exported items to whatever imports the original module (I don’t know if it does this without specially marking things or not), and end up with too many things in a default namespace

[00:07] <FreezerburnV> Or just organize items in one namespace for “neat code’s” sake or something

[00:08] <lucasb> who does one trigger that "seq can only be iterated once" error?

[00:09] <timotimo> FreezerburnV: i can already tell you that if you "use" a module inside another module, it doesn't re-export that used module unless you specify that

[00:09] <FreezerburnV> timotimo: Good to know! That’ll help keep things clean then

[00:10] <timotimo> aye

[00:10] <timotimo> i think re-exporting looks kind of like "use Foo::Bar :EXPORT" or something

[00:10] *** ChristopherBotto joined
[00:10] <jdv79> what doess this concept of re-exporting mean?

[00:11] <ChristopherBotto> m: spurt('foo','bar'); run('chmod','-w','foo'); say 'Deleted' if unlink('foo');

[00:11] <camelia> rakudo-moar 9e53fa: OUTPUT«spurt is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub spurt at src/RESTRICTED.setting:17␤  in block <unit> at /tmp/L_R_I4NAu6:1␤␤»

[00:11] <jdv79> a use is lexical, no?  

[00:11] <ChristopherBotto> m: spurt('/tmp/foo','bar'); run('chmod','-w','/tmp/foo'); say 'Deleted' if unlink('/tmp/foo');

[00:11] <camelia> rakudo-moar 9e53fa: OUTPUT«spurt is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub spurt at src/RESTRICTED.setting:17␤  in block <unit> at /tmp/EzaJ5nq71X:1␤␤»

[00:12] <ChristopherBotto> Anyway, that says "Deleted" when I run it on my CentOS 7 (64-bit) machine. It's on a cluster hard drive.

[00:12] <ChristopherBotto> Sorry I got to run. Thanks #perl6 for all your hard work!

[00:13] *** ChristopherBotto left
[00:13] <geekosaur> why is that surprising?

[00:13] <skids> jdv79: rexport means things that import from you get things you imported from something else.

[00:14] <jdv79> skids:  ah.  that sounds insane.

[00:14] <skids> Not really, it just means you can define a proxy for another module.

[00:15] <jdv79> explicitly, sure.  impliclity, not so much.

[00:16] <timotimo> jdv79: it means that something you import via "use" gets re-exported to your "user"

[00:17] <jdv79> cool

[00:18] <skids> jdv79: I think it's a pretty explicit mechanism: use Sense <&common> :EXPORT<@horse>; # &common is internally used, your module user gets @horse

[00:19] <geekosaur> .tell ChristopherBotto it's write access on /tmp that controls whether unlink of /tmp/foo works. permissions on /tmp/foo's inode are not relevant.

[00:19] <yoleaux> geekosaur: I'll pass your message to ChristopherBotto.

[00:19] <jdv79> i've not read that part of the docs/spec.  it sounds cool though.  thanks.

[00:24] <geekosaur> .tell ChristopherBotto GNU rm looks at the permission as a courtesy, more or less. Hard links imply that the directory entry is independent of the inode (file). I am not sure perl6 should be in the business of enforcing anything more than OS permissions.

[00:24] <yoleaux> geekosaur: I'll pass your message to ChristopherBotto.

[00:25] <lucasb> geekosaur++, that clarified things for me too, thanks

[00:28] *** firstdayonthejob left
[00:32] *** adu joined
[00:33] <b2gills> Is there an URL for a rendered S27? (should be prominently linked to on perl6.org) and why is it still only a draft?

[00:33] *** lolisa joined
[00:34] <b2gills> FreezerburnV: use Long::Module::Name; my constant foo = Long::Module::Name; foo.bar();

[00:34] *** patrickz left
[00:34] <FreezerburnV> b2gills: Awesome, thanks :)

[00:34] <jdv79> stmuk:  cool blurb.  end was perhaps abrupt.

[00:35] <jdv79> stmuk++

[00:40] <lucasb> say unlink('/non/existent').perl   #=> ["/non/existent"]

[00:40] <lucasb> say unlink('/no/permission').perl  #=> []

[00:40] <lucasb> ^^ I think those return values are a little strange...

[00:41] *** tipdbmp left
[00:44] *** lucasb left
[00:50] *** n0tjack left
[00:51] *** xpen joined
[00:54] * Juerd rewrites part of Net::MQTT to look more like jnthn's Stomp module.

[00:55] <Juerd> His code is much nicer, and stomp and mqtt look a lot alike :)

[00:55] *** xpen left
[00:58] <timotimo> jnthn's code has that property commonly :D

[01:00] * Juerd has to upgrade rakudo to do this :)

[01:00] <Juerd> Apparently the .share syntactic sugar is new

[01:00] <leont> Yeah, I should still adapt some of my code to the new supply blocks

[01:00] *** BenGoldberg joined
[01:01] *** n0tjack joined
[01:02] <leont> The share comment kind of made clear what the whole "on demand" thing was about, until now that wasn't quite clear to him.

[01:03] <Juerd> Which him?

[01:03] <timotimo> leont, i believe

[01:04] * leont forgot he wasn't talking in 3rd person, he's already brushing his teeth and should have been in bed already

[01:05] * Juerd thinks he understands on-demand vs live, but doesn't understand exactly what 'share' does

[01:05] <leont> (really, I've been doing this sort of thing all that, not my day apparently

[01:05] *** n0tjack left
[01:06] <Juerd> It creates a new supplier from the supply, I get that, but I don't really understand why that's necessary :)

[01:06] <Juerd> leont: Welterusten :)

[01:06] <skids> If you want two supplies of the same values from one tap of the on-demand.

[01:08] <Juerd> Oh, I think I get it. His !process-messages returns an on-demand supply, even if it itself whenevers a live one.

[01:08] <Juerd> Seems like all that's missing is a supplier { ... } block then :P

[01:09] *** Actualeyes joined
[01:15] *** yeahnoob joined
[01:18] *** leont left
[01:21] <skids> Well, and a way to get nonserial Supplies if that's what you want (the one way I know of got accidetally broken during the refactor) and maybe a module re-implementing nonserial versions of the nice composeable functionality.

[01:27] *** rurban left
[01:29] *** n0tjack joined
[01:32] *** corner90 joined
[01:33] *** n0tjack left
[01:35] *** Ben_Goldberg joined
[01:37] *** BenGoldberg left
[01:44] *** n0tjack joined
[01:44] *** aborazmeh joined
[01:44] *** aborazmeh left
[01:44] *** aborazmeh joined
[01:48] *** Actualeyes left
[01:48] *** n0tjack left
[01:51] *** aborazmeh left
[01:52] *** n0tjack joined
[01:55] *** Actualeyes joined
[01:56] <Juerd> https://github.com/Juerd/p6-mqtt/blob/master/lib/Net/MQTT.pm  # Done rewriting to look like jnthn's code :)

[01:56] *** n0tjack left
[01:56] <Juerd> Took an hour, including a full recompile of moar :)

[01:58] <Juerd> Not sure about those supply/whenever/emit patterns. Feels like grep/map matches what happens better.

[02:00] <Juerd> And I'm curious to know what jnthn's magic self!ensure-connected is like.

[02:01] *** kitesurf left
[02:04] *** corner90 left
[02:10] *** adhoc left
[02:12] *** adhoc joined
[02:13] *** tipdbmp joined
[02:13] *** parisba_ is now known as DrParis

[02:14] *** raiph left
[02:21] <FreezerburnV> Given a “new” method with a list of arguments, how would I properly call bless to initialize a private attribute that is a list? I tried both “my @inputs = [$input1, $input2]; self.bless(:@inputs);” where the class has “@!inputs”, and “self.bless([$input1, $input2]);”. A later method call shows that nothing is in the list

[02:22] <FreezerburnV> Also tried with “($input1, $input2)”

[02:22] *** labster left
[02:29] *** n0tjack joined
[02:29] *** Sqirrel left
[02:31] <dj_goku_> anyone else getting build failures with 3b4964b

[02:32] <skids> Yeah, install failures actually.

[02:33] <skids> FreezerBurnV: yeah that looks a bit broken.

[02:34] <skids> m: class A { has @!l; method new ($a, $b) { my @l = $a, $b; self.bless(:@l) }; submethod BUILD(:@!l) { }; method get_l { @!l } }; A.new(2,3).get_l.perl.say

[02:34] <camelia> rakudo-moar 9e53fa: OUTPUT«[2, 3]␤»

[02:35] <skids> m: class A { has @.l; method get_l { @!l } }; A.new(:l[2,3]).get_l.perl.say

[02:35] <camelia> rakudo-moar 9e53fa: OUTPUT«[2, 3]␤»

[02:35] <skids> Oh, I know -- it's because it is private.

[02:35] <skids> m: class A { has @!l; method get_l { @!l } }; A.new(:l[2,3]).get_l.perl.say

[02:35] <camelia> rakudo-moar 9e53fa: OUTPUT«[]␤»

[02:37] *** n0tjack left
[02:37] <Hotkeys> how does one make a safe eval-bot, is there a simple explanation without me reading camelia's source

[02:38] <skids> I think you may just have to use BUILD for private attrib inits.

[02:41] <skids> Well, there's "RESTRICTED.setting" but it is far from perfectly safe yet.

[02:42] <skids> Don;t quite know hoe to use it myself.

[02:43] <dj_goku_> Hotkeys: one thing I tried a week or so back is Proc::Async was disabled which was nice.

[02:44] <Hotkeys> I want to implement a repl in an IRC bot I'm working on that's written in p6

[02:44] <Hotkeys> or at least

[02:44] <Hotkeys> an evaler

[02:44] *** Zoffix joined
[02:44] <Hotkeys> but I doubt just doing 'EVAL' is very safe for that

[02:49] *** adu left
[02:49] *** kanishka left
[02:51] <FreezerburnV> skids: Alright, thanks for the help. I’ll add a BUILD method

[02:56] *** kid51 joined
[03:00] *** zostay left
[03:01] *** FreezerburnV left
[03:05] *** n0tjack joined
[03:07] *** gtodd joined
[03:13] *** n0tjack left
[03:17] *** n0tjack joined
[03:18] *** ilbelkitty joined
[03:18] *** kaare_ joined
[03:22] *** n0tjack left
[03:31] *** noganex_ joined
[03:33] *** AlexDaniel joined
[03:33] <AlexDaniel> m: my Int() $x

[03:33] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZETzLF2TbQ␤Coercion Int(Any) is insufficiently type-like to qualify a variable␤at /tmp/ZETzLF2TbQ:1␤------> 3my Int() $x7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[03:34] <AlexDaniel> “insufficiently type-like” means?

[03:34] *** noganex left
[03:35] <AlexDaniel> I mean, is it some kind of an interesting thing? Is there any way to make the compiler happy in this case without removing ()?

[03:36] <Hotkeys> what's wrong with removing ()

[03:37] <AlexDaniel> Hotkeys: nothing at all! I'm just curious

[03:38] <geekosaur> I would not think so; it looks like either one of C's corner cases or an attempt to define a function...

[03:39] *** pjscott joined
[03:39] *** kid51 left
[03:40] *** Ben_Goldberg left
[03:40] <AlexDaniel> Hotkeys: Well, um… I love to throw random stuff into it and see where would the error messages lead me.

[03:40] <Hotkeys> it might just be an intentional thing

[03:40] <Hotkeys> no type coercions in variable declarations or something

[03:41] <AlexDaniel> and it seems like Perl 6 is the only language that will actually guide me to the code that actually compiles

[03:41] *** Ben_Goldberg joined
[03:44] <geekosaur> I think that was speculated on but deferred

[03:46] <AlexDaniel> –“is perl6 production ready yet?” –“no” –“depends” –“People *are* using it in production” … what a beautiful set of answers!

[03:46] *** FreezerburnV joined
[03:57] *** AlexDaniel left
[04:03] <Ben_Goldberg> You left out, "Define production ready," and of course, "It'll be ready by Christmas!"

[04:08] *** pjscott left
[04:11] *** kaare_ left
[04:12] *** Ben_Goldberg left
[04:12] *** yqt left
[04:13] *** atta joined
[04:15] <FreezerburnV> Do enums always have their keys (I think that’s the correct way to reference the names of each possible enum?) put into the global namespace? e.g.: “enum Foo { :BAR(“bar”) };”, I would use it by doing “my $sillyEnum = BAR; say $sillyEnum.value;” (this seems to be the case for SDL2::Raw enums at least) Is there a way to reference

[04:15] <FreezerburnV> Woops, hit enter when I meant to hit backspace there

[04:15] *** pjscott joined
[04:15] <FreezerburnV> I answered that last bit of question myself

[04:15] *** pjscott left
[04:16] *** pjscott joined
[04:18] <pjscott> I did a rakudobrew build moar; rakudobrew build-panda and now 'panda' outputs:

[04:18] <pjscott> Useless use of "\\n\\t*$_" in expression "\\n\\t*$_" in sink context

[04:18] <pjscott> - QAST::Op(call &infix:<~>) \\n\\t*$_

[04:18] <pjscott>   - QAST::Want

[04:18] <pjscott>     - QAST::WVal(Str)

[04:18] <pjscott>     - Ss

[04:18] <pjscott>     - QAST::SVal(\n\t*)

[04:18] <pjscott>   - QAST::Op(callmethod Stringy)

[04:18] <pjscott>     - QAST::Var(lexical $_) $_

[04:18] <pjscott> WARNINGS for /Users/peter/.rakudobrew/moar-nom/install/share/perl6/site/resources/F4BE6820824798E18DA2B478C7F0B0ECCA322B27:

[04:18] <pjscott> Useless use of "\\n\\t*$_" in expression "\\n\\t*$_" in sink context (line 155)

[04:18] <pjscott> Panda -- Perl 6 Module Installer

[04:19] <FreezerburnV> And for a totally different question: Is there planned/currently a way to embed MoarVM/Rakudo/Perl6/whatever the execution environment actually is such that it would be possible to redistribute standalone binaries? (e.g.: a GUI or a game or something)

[04:20] *** skids left
[04:31] *** FreezerburnV left
[04:33] *** znpy left
[04:33] *** znpy joined
[04:39] *** vividsnow joined
[04:41] *** llfourn joined
[04:43] *** gtodd left
[04:43] *** gtodd joined
[04:48] <TimToady> pjscott: sorry, too busy working on the fix for that to answer :)

[04:55] *** cognominal left
[04:56] *** cognominal joined
[04:57] *** cognominal left
[05:00] *** cognominal joined
[05:02] *** woodruffw is now known as yossarian

[05:02] *** yossarian is now known as woodruffw

[05:05] *** cognominal left
[05:06] *** cognominal joined
[05:14] *** gtodd1 joined
[05:15] *** gtodd left
[05:17] *** pjscott left
[05:18] *** n0tjack joined
[05:20] *** psy_ left
[05:24] *** n0tjack left
[05:43] *** regreg joined
[05:51] *** Sqirrel joined
[05:53] *** aborazmeh joined
[05:53] *** aborazmeh left
[05:53] *** aborazmeh joined
[05:54] *** psy_ joined
[05:59] *** snarkyboojum_ joined
[06:01] <leat1> is it supported to run panda's bootstrap.pl by root?

[06:02] *** cognominal left
[06:03] *** cognominal joined
[06:03] *** bjz joined
[06:04] *** cognominal left
[06:04] *** cognominal joined
[06:06] *** bjz_ joined
[06:07] *** bjz left
[06:08] *** snarkyboojum_ left
[06:11] *** snarkyboojum_ joined
[06:12] <grondilu> ./perl6-m tools/build/install-core-dist.pl

[06:12] <grondilu> ===SORRY!=== Error while compiling /usr/local/share/perl6/sources/089D4EE67A13498C10F4839B92C697AA10019E85

[06:12] <grondilu> An exception occurred while evaluating a constant

[06:12] <grondilu> at /usr/local/share/perl6/sources/089D4EE67A13498C10F4839B92C697AA10019E85:13

[06:12] <grondilu> Exception details:

[06:12] <grondilu>   Could not find symbol '&bool'

[06:12] <grondilu>     in block  at /usr/local/share/perl6/sources/089D4EE67A13498C10F4839B92C697AA10019E85:13

[06:12] <leedo> leat1: i had to delete my install directory to get it working again

[06:14] *** leat1 left
[06:15] *** leat joined
[06:16] *** psy_ left
[06:17] *** darutoko joined
[06:21] *** bjz_ left
[06:23] *** khw left
[06:24] *** xfix joined
[06:27] *** labster joined
[06:28] *** bjz joined
[06:35] <leat> oh. I was going to make an ebuild for panda.

[06:36] *** bjz left
[06:43] *** geraud left
[06:45] <hahainternet> heh, hello leedo 

[06:47] *** rindolf joined
[06:54] *** bjz joined
[06:55] *** snarkyboojum_ left
[06:59] *** |Tux| left
[06:59] *** |Tux| joined
[06:59] *** suman joined
[07:00] *** novapatch left
[07:02] *** bjz_ joined
[07:02] *** adhoc left
[07:03] *** bjz left
[07:03] <suman> Why are there no MOOC (massive open online course) on Perl5? Hope there will be plenty of such mooc on perl6. This may be the reason for why very few new people are coming to our community :(

[07:03] <suman> Why are there no MOOC (massive open online course) on Perl5? Hope there will be plenty of such mooc on perl6. This may be the reason for why very few new people are coming to our community :(

[07:04] *** adhoc joined
[07:05] <diakopter> suman: Perl ranks fairly low on Github: http://githut.info/#Perl

[07:05] <suman> Why are there no MOOC (massive open online course) on Perl5? Hope there will be plenty of such mooc on perl6. This may be the reason for why very few new people are coming to our community :(

[07:05] <stmuk> is there an echo?

[07:07] <suman> diakopter Party explained due to lack of new people in our community :(

[07:08] <diakopter> suman: around 16,000 repos primarily using Perl compared to 324,000 of JavaScript and 222,000 of Java

[07:09] *** _nadim joined
[07:10] <diakopter> however, Swift and Scala have growth rates that will tip them past Perl very soon, pushing Perl down to 17th or so

[07:12] <suman> Swift has grown up due to hype of apple community while scala has grown due to its own strength.

[07:14] <suman> Scala has mooc on coursera https://www.coursera.org/course/progfun https://www.coursera.org/course/reactive. While there are NONE for Perl or Perl6.

[07:20] *** FROGGS joined
[07:20] <suman> So the answer is MOOC for perl. :)

[07:20] <suman> Why are there no MOOC (massive open online course) on Perl5? Hope there will be plenty of such mooc on perl6. This may be the reason for why very few new people are coming to our community :(

[07:21] <diakopter> suman: why do you keep repeating that question?

[07:23] <suman> Also Perl6 should also focus on graphics and analytics capability natively.

[07:23] <suman> This is data age. Data everywhere.

[07:23] <diakopter> ..but to complete my response, there are so few/no MOOC for Perl because there are so few people who want to learn Perl. http://goo.gl/uEwjdi compares job trends

[07:23] *** balazs left
[07:25] <suman> diakopter Yeah its disappointing.

[07:33] <suman> Is there any video may be in youtube on regular expression in Perl 6 for newcomers like me. Easy to understand?

[07:33] <diakopter> https://www.youtube.com/watch?v=oo-gA9Z9SaA

[07:34] <diakopter> this is a great overview though https://www.youtube.com/watch?v=lpu-3UF_b48

[07:36] *** firstdayonthejob joined
[07:38] *** rurban joined
[07:40] *** CIAvash joined
[07:45] *** bjz_ left
[07:48] *** bjz joined
[07:51] *** M-Illandan left
[07:51] *** eternaleye left
[07:57] <masak> good morning, #perl6

[07:58] <moritz> \o masak

[08:03] *** ollej joined
[08:07] *** M-Illandan joined
[08:15] *** M-eternaleye joined
[08:18] <abraxxa> good morning!

[08:24] *** RabidGravy joined
[08:24] *** ollej left
[08:25] <_nadim> Good morning all

[08:25] <jdrab> o/

[08:27] *** zakharyas joined
[08:27] <RabidGravy> marnin!

[08:30] *** n0tjack joined
[08:31] *** bjz left
[08:32] *** uruwi_ joined
[08:32] *** uruwi left
[08:33] *** firstdayonthejob left
[08:34] <dalek> nqp: 1c2c101 | TimToady++ | src/QAST/ (3 files):

[08:34] <dalek> nqp: support for dumping annotations

[08:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1c2c101424

[08:35] *** leat left
[08:35] *** n0tjack left
[08:36] * lizmat notes that she had to nuke install to be able to build the latest pull

[08:36] <yoleaux> 14 Dec 2015 21:02Z <jnthn> lizmat: Wish you a swift recovery!

[08:36] <yoleaux> 14 Dec 2015 21:04Z <masak> lizmat: aye; de-flu soon!

[08:37] <nine> lizmat: you're building. Is that a good sign?

[08:38] <lizmat> not really, it's a habit I have

[08:38] <lizmat> each morning I pull, build and spectest

[08:38] <lizmat> I don't have to think about that  :-)

[08:38] <abraxxa> m: my $foo = 4.85; say $foo.WHAT

[08:38] <camelia> rakudo-moar 9e53fa: OUTPUT«(Rat)␤»

[08:38] *** bjz joined
[08:38] <lizmat> probably will hit the hay again within the next half hour

[08:39] <abraxxa> this gives a Rat. In DBDish::Oracle i'm returning Real's, which one is correct?

[08:39] <nine> lizmat: hope you feel better soon

[08:39] <lizmat> thank you, also masak jnthn

[08:39] <nine> abraxxa: both are for their respective specifications

[08:41] *** jack_rabbit joined
[08:41] <TEttinger> the flu flew down the flue and into lizmat. but lizmat wasn't having any of it and was better in a day or so

[08:41] <TEttinger> the end

[08:42] <lizmat> TEttinger: I wish...

[08:42] <lizmat> bed&

[08:42] *** captain-adequate joined
[08:44] <dalek> rakudo/nom: db68963 | TimToady++ | src/Perl6/ (3 files):

[08:44] <dalek> rakudo/nom: great sink refactor refactor

[08:44] <dalek> rakudo/nom: 

[08:44] <dalek> rakudo/nom: Installed a mechanism so we can tell who actually marked which node

[08:44] <dalek> rakudo/nom: as wanted or unwanted.  (We might rip it back out later in the

[08:44] <dalek> rakudo/nom: interests of efficiency.)  Now distinguishes escape blocks via

[08:44] <dalek> rakudo/nom: a dynvar because all the other ways I tried didn't work.

[08:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/db68963adf

[08:44] <abraxxa> nine: what's their difference?

[08:45] <abraxxa> i get a float from Oracle, a num64 to be exact

[08:45] <TimToady> there's still a spurious Useless use reported during compilation, but hopefully the other spurious messages should be fewer

[08:46] <TimToady> I believe it will probably fix the panda issue, but can't test because I'm getting the Can't find '&bool' error that someone else reported

[08:47] <TimToady> the gsrr was fairly clean before I pulled, but now I'm gonna go to bed and let someone else figure out the bool issue

[08:47] <abraxxa> i don't want to lose precision

[08:48] <moritz> abraxxa: that would be a Num in Perl 6

[08:49] <abraxxa> moritz: none of the intro docs handles numeric datatypes and which to use when

[08:49] * TimToady has been hacking on the gsr solidly for about four days now, and is pretty confident the new ASTs have a much better (though not yet perfect) idea of whether they're in sink context or not.

[08:50] <abraxxa> moritz: the test case just does colname => 4.85 which results in a Rat and the comparision fails

[08:50] *** smls joined
[08:50] <moritz> abraxxa: then it should probablye use 4.85e0

[08:50] <smls> Hi #perl6

[08:50] <smls> Haven't been here in a while

[08:50] * TimToady apologizes in advance if the gsrr push screws anything up

[08:50] <TimToady> smls: o/

[08:50] <moritz> abraxxa: doc.perl6.org does document the numeric types, just not yet in a tutorial/intro style

[08:51] <abraxxa> moritz: yes

[08:51] <moritz> \o smls, great to have you back

[08:51] <smls> How is the 6.c release shaping up?

[08:51] *** lolisa left
[08:51] <smls> m: say ($_ * 5 for ^10);

[08:52] <camelia> rakudo-moar 9e53fa: OUTPUT«Useless use of "*" in expression "$_ * 5" in sink context␤- QAST::Op(call &infix:<*>) *␤  - QAST::Var(lexical $_) $_␤  - QAST::Want 5␤    - QAST::WVal(Int)␤    - Ii␤    - QAST::IVal(5)␤␤WARNINGS for /tmp/ggahjffn3h:␤Useless use of "*" in …»

[08:52] <moritz> smls: difficult, because everybody wants to get their last-minute favorite things in

[08:52] <smls> TimToady: Is "gsrr push screws anything up" responsible for ^^ ?

[08:52] <moritz> smls: I don't think camelia's rakudo is new enough

[08:52] <moritz> .tell nine Inline::Python tests complaining: http://perlpunks.de/paste/show/566fd4d4.7163.e4

[08:52] <yoleaux> moritz: I'll pass your message to nine.

[08:53] <smls> That bug is new though (introduced last 2 days). If it's not expected as part of ongoing refactors, I'll rt it.

[08:54] <moritz> smls: please check first if TimToady's last commit has fixed it

[08:54] <RabidGravy> The "useless use" TT just mentioned, and I think the debug output is just temporary

[08:56] <TimToady> smls: the bug is still there, but I probably know how to fix it

[08:56] <smls> ok

[08:57] <abraxxa> moritz: can you give ma a short overview aber the available numeric datatypes?

[08:57] *** brrt joined
[08:58] <abraxxa> Num reads like the Perl 6 equivalent of num64

[08:58] *** maddingu1 is now known as maddingue

[08:58] <abraxxa> oh, Real is a role

[08:59] <RabidGravy> m: say num64 ~~ Num

[08:59] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/FwI7f_1RRt:1␤␤»

[08:59] <RabidGravy> eh?

[08:59] <RabidGravy> but yes

[08:59] *** AndyDee left
[09:00] <abraxxa> m: use NativeCall; say num64 ~~ Num;

[09:00] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/RLsxImkxeM:1␤␤»

[09:00] <abraxxa> we need to fix this 'Cannot unbox a type object' before 6c release!

[09:00] <masak> TimToady: the only thing that worries me about the gsr is the word "great" ;)

[09:01] <abraxxa> this will seriously drive away interested people

[09:01] <abraxxa> GSR? Suzuki?

[09:01] <masak> abraxxa: that particular thing? oh, that's a relief! :P

[09:01] <abraxxa> masak: hm?

[09:01] <smls> By the way, I wasn't run() expected to get a redesign to "make the easy things easy" again (e.g. easily getting STDOUT into a string)? I guess there weren't enough tuits?

[09:01] <masak> abraxxa: ...will drive away interested people.

[09:02] <abraxxa> masak: in the month I've been working on DBDish::Oracle that was the most annoying, yes

[09:02] <masak> abraxxa: it doesn't look all that hard to fix.

[09:02] <RabidGravy> abraxxa, to be honest that one is sort of expected, it's unlikely you'll have a native num type in the wild

[09:02] <abraxxa> because typos, duplicate vars, missing vars all ended in this without --ll-exception

[09:02] <abraxxa> how can it be that I can declase a var as Real if that's only a role?

[09:02] <masak> abraxxa: fwiw, my expectation is that that one should just print True.

[09:02] <abraxxa> https://doc.perl6.org/type/Real

[09:03] <masak> abraxxa: because roles can instantiate as (anonymous) classes when needed.

[09:03] <RabidGravy> yes, that was my expectation, maybe I have NativeCall syndrome and just accept that I'm not in Kansas anymore

[09:03] *** dj_goku joined
[09:03] *** dj_goku left
[09:03] *** dj_goku joined
[09:03] <masak> m: role R {}; say R.new

[09:03] <camelia> rakudo-moar 9e53fa: OUTPUT«R.new␤»

[09:04] <abraxxa> masak: i see

[09:05] *** snarkyboojum_ joined
[09:06] *** dakkar joined
[09:06] <masak> m: my $n = num64; given $n { when Num { say "OH HAI" } }

[09:06] <camelia> rakudo-moar 9e53fa: OUTPUT«OH HAI␤»

[09:06] <masak> huh. that works

[09:08] *** flaviusb joined
[09:10] <dalek> rakudo/nom: 41ba549 | TimToady++ | src/Perl6/Actions.nqp:

[09:10] <dalek> rakudo/nom: fix for say ($_ * 5 for ^10);

[09:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/41ba5491eb

[09:10] <RabidGravy> infact I thought I had code that did that but it use a variable https://github.com/jonathanstowe/Audio-Sndfile/blob/master/lib/Audio/Sndfile.pm#L371

[09:11] *** leont joined
[09:11] <RabidGravy> because some of this stuff wouldn't work otherwise

[09:12] *** snarkyboojum left
[09:12] *** snarkyboojum_ left
[09:12] *** captain-adequate left
[09:14] *** DrForr joined
[09:17] *** snarkyboojum joined
[09:19] *** hankache joined
[09:19] *** captain-adequate joined
[09:20] *** hankache left
[09:21] <dalek> rakudo/nom: cc21892 | TimToady++ | tools/build/NQP_REVISION:

[09:21] <dalek> rakudo/nom: bump NQP to get .dump_annotations

[09:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc2189224b

[09:22] *** telex left
[09:24] *** telex joined
[09:27] <abraxxa> masak: is there anything I can do to help fix the 'Cannot unbox a type object' error?

[09:31] *** secwang joined
[09:33] *** suman left
[09:33] <abraxxa> die "unhandled type: {$v.WHAT}"; outputs only 'unhandled type' and a 'Use of uninitialized value of type Rat in string context' warning

[09:34] <abraxxa> and 'Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block'

[09:35] *** bjz left
[09:37] <masak> abraxxa: .^name is a good way to get the name of a type

[09:37] <masak> abraxxa: I've basically stopped doing .WHAT on things after I learned to like .^name

[09:37] <RabidGravy> the unbox thing is more fundamental than I thought as the obvious dumb ACCEPTS on Num doesn't help

[09:38] <abraxxa> i thought WHAT is the correct method

[09:38] <abraxxa> but in this case it seems to fail

[09:38] <abraxxa> ^name works

[09:38] *** yeahnoob left
[09:39] <abraxxa> m: my $foo = 4.85; say $foo.^name;

[09:39] <camelia> rakudo-moar 9e53fa: OUTPUT«Rat␤»

[09:39] <masak> thing is, .WHAT produces a type object, which by definition is undefined.

[09:39] <masak> so it doesn't always stringify well

[09:39] <abraxxa> i see!

[09:39] <RabidGravy> some types don't have all the gubbins required to make some of the intropspection stuff work nicely

[09:39] <abraxxa> that's a bit confusing: http://perl6intro.com/#_types

[09:40] <abraxxa> it says that it returns a type (object?) but the say seems to work there

[09:40] <masak> yes, "type object"

[09:40] <moritz> abraxxa: say() is smarter than normal stringification

[09:40] <masak> m: say 42 ~~ Int; my $i = Int; say 42 ~~ $i

[09:40] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤True␤»

[09:41] <masak> abraxxa: `Int` there is just an object that stands in for the type of all Ints

[09:41] <masak> abraxxa: it's an "undefined instance" of Int, at least conceptually

[09:41] <abraxxa> moritz: how is say smarter?

[09:42] <masak> m: say Int ~~ Int; my $i = Int; say $i ~~ Int

[09:42] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤True␤»

[09:42] <masak> m: print Int.gist(), "\n" # say comes down to this, I think

[09:42] <camelia> rakudo-moar 9e53fa: OUTPUT«(Int)␤»

[09:42] <nine> masak: yes, it does

[09:42] <yoleaux> 08:52Z <moritz> nine: Inline::Python tests complaining: http://perlpunks.de/paste/show/566fd4d4.7163.e4

[09:42] <El_Che> morning

[09:43] <masak> \o

[09:43] <grondilu> Stage optimize   : WARNINGS for /usr/local/src/rakudo/gen/moar/m-CORE.setting:

[09:43] <grondilu> Useless use of $compunit in sink context (line 35047) 98.431

[09:43] <TimToady> known problem, but benign

[09:43] <RabidGravy> chortle

[09:43] <abraxxa> when people use literal floats they get a Rat which automagically becomes a Num if the denominator is >64bit. I need to handle both as floats, whatfor should I check?

[09:43] <abraxxa> i thought the Real role but Int does that as well

[09:43] <El_Che> good, the christmas elves are working on my christmas present ;)

[09:44] <moritz> abraxxa: literal floats have an "e" in them

[09:44] <moritz> athat is, scientific notation

[09:44] <moritz> abraxxa: and "Real" is the common type that unifies Rat and Num (and also Int)

[09:44] <masak> m: say 4.2 ~~ Rat; say 4.2e0 ~~ Num

[09:44] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤True␤»

[09:44] <abraxxa> moritz: yes, I learned that today but I don't think it makes sense to enforce people to define all their floats that way because most won't care

[09:44] <masak> m: say Rat ~~ Real; say Num ~~ Real

[09:44] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤True␤»

[09:44] <grondilu> abraxxa: what you were thinking of was probably "decimal literal"

[09:45] <masak> abraxxa: the fact that most won't care is why the default is Rat.

[09:45] <RabidGravy> abraxxa, casting

[09:45] <abraxxa> i need to decide wheter to pass a var either as long or num64 to OCI

[09:47] *** leont left
[09:48] <abraxxa> should I pass it as long if it is an Int and as num64 if it is a Num?

[09:48] <abraxxa> s/Num/Real/

[09:48] <abraxxa> by checking for Int before I exclude them from matching the Real too

[09:49] <RabidGravy> m: sub foo(Numeric $a) { my $type = $a ~~ Real ?? Num !! Int;  $type($a) } say foo(1).WHAT; say foo(1.2).WHAT'

[09:49] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wDTJl6jraI␤Strange text after block (missing semicolon or comma?)␤at /tmp/wDTJl6jraI:1␤------> 3= $a ~~ Real ?? Num !! Int;  $type($a) }7⏏5 say foo(1).WHAT; say foo(1.2).WHAT'␤    expecting any of…»

[09:49] <RabidGravy> m: sub foo(Numeric $a) { my $type = $a ~~ Real ?? Num !! Int;  $type($a) }; say foo(1).WHAT; say foo(1.2).WHAT'

[09:49] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gb7CjaEhjp␤Two terms in a row␤at /tmp/gb7CjaEhjp:1␤------> 3a) }; say foo(1).WHAT; say foo(1.2).WHAT7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        s…»

[09:49] <RabidGravy> m: sub foo(Numeric $a) { my $type = $a ~~ Real ?? Num !! Int;  $type($a) }; say foo(1).WHAT; say foo(1.2).WHAT

[09:49] <camelia> rakudo-moar 9e53fa: OUTPUT«(Num)␤(Num)␤»

[09:49] <RabidGravy> or something like that

[09:50] <RabidGravy> m: sub foo(Numeric $a) { my $type = $a ~~ Int ?? Int !! Num;  $type($a) }; say foo(1).WHAT; say foo(1.2).WHAT

[09:50] <camelia> rakudo-moar 9e53fa: OUTPUT«(Int)␤(Num)␤»

[09:50] <RabidGravy> there

[09:51] *** bjz joined
[09:52] *** rindolf left
[09:52] <abraxxa> i hoped there is a role which matches all non-decimal and one for all decimal numbers

[09:52] <abraxxa> Int does the former but there is none for the later

[09:52] *** TEttinger left
[09:52] <abraxxa> because Int does Real

[09:53] <abraxxa> m: use NativeCall; my Rat $foo = 4.85; my num64 = $foo.Real;

[09:53] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hUerwNnp5a␤Malformed my␤at /tmp/hUerwNnp5a:1␤------> 3NativeCall; my Rat $foo = 4.85; my num647⏏5 = $foo.Real;␤»

[09:54] <masak> m: say Rat ~~ Rat | Num; say Num ~~ Rat | Num

[09:54] <abraxxa> huh?

[09:54] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤True␤»

[09:54] <abraxxa> m: use NativeCall;

[09:54] <camelia> rakudo-moar 9e53fa: ( no output )

[09:55] <masak> m: subset NonIntReal of Real where { $_ !~~ Int }; say Rat ~~ NonIntReal; say Num ~~ NonIntReal

[09:55] *** bjz_ joined
[09:55] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤True␤»

[09:55] <abraxxa> m: use NativeCall; my $foo = 4.85; my num64 = $foo.Real;

[09:55] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/7H_QNbc1kU␤Malformed my␤at /tmp/7H_QNbc1kU:1␤------> 3use NativeCall; my $foo = 4.85; my num647⏏5 = $foo.Real;␤»

[09:55] <abraxxa> what am i doing wrong?

[09:55] <masak> missing variable name

[09:55] <abraxxa> m: use NativeCall; my Rat $foo = 4.85; my num64 $bar = $foo.Real;

[09:55] <camelia> rakudo-moar 9e53fa: OUTPUT«This type cannot unbox to a native number␤  in block <unit> at /tmp/p6T9PgC_w_:1␤␤»

[09:55] <abraxxa> why does that happen?

[09:55] <masak> the .Real there is a no-op

[09:55] <moritz> abraxxa: because $foo.Real returns a Real, but not all Reals are num64

[09:55] <masak> since Rat is already Real

[09:55] <abraxxa> I check for ~~ Real but convert to .Num

[09:56] <masak> nope, no conversion

[09:56] <masak> only trying to cram a square peg in a round hole :)

[09:56] <abraxxa> how would you call it?

[09:56] *** bjz left
[09:56] <abraxxa> so which types to always fit in a num64 which is the largest I can pass to OCI?

[09:56] <moritz> num64

[09:56] <RabidGravy> m:  my $foo = 4.85; my num64 = Num($foo);

[09:56] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/dCuIZbEguk␤Malformed my␤at /tmp/dCuIZbEguk:1␤------> 3my $foo = 4.85; my num647⏏5 = Num($foo);␤»

[09:56] <abraxxa> Num should as the docs say it is the same as num64 internally

[09:57] <RabidGravy> m:  my $foo = 4.85; my num64 $baz = Num($foo);

[09:57] <camelia> rakudo-moar 9e53fa: ( no output )

[09:57] <moritz> so, use Num

[09:57] <moritz> but don't try to convert to Num by calling .Real

[09:57] <masak> RabidGravy++

[09:57] <abraxxa> moritz: it's not what I use but what the user passes to DBIish

[09:57] <RabidGravy> either cast to Int if it's an Int or Num oterwise

[09:57] <abraxxa> RabidGravy: that's what I currently do

[09:57] <smls> TimToady: I found another one - this time when creating a whatever code:

[09:57] <smls> m: say (64 + *).chr;

[09:57] <camelia> rakudo-moar 9e53fa: OUTPUT«Useless use of "+" in expression "64 + *" in sink context␤- QAST::Op(call &infix:<+>) +␤  - QAST::Want 64␤    - QAST::WVal(Int)␤    - Ii␤    - QAST::IVal(64)␤  - QAST::Var(lexical $whatevercode_arg_1)␤␤WARNINGS for /tmp/cISE1JzRNZ:␤Useles…»

[09:57] <abraxxa> but the check is against Real

[09:57] <abraxxa> which is confusing

[09:57] <RabidGravy> well Real is the wrong check

[09:58] <moritz> if the other side (C) wants a Num, convert to Num; don't check for Int first

[09:58] <abraxxa> when does a ~~?

[09:58] <abraxxa> moritz: it's not what it wants, its what I pass it

[09:58] <abraxxa> I can pass both

[09:59] <masak> abraxxa: pass Int if you can, Num if you must :)

[09:59] <abraxxa> given/when needs one more indention that if/elsif ;(

[10:00] <abraxxa> masak: yes, but what should I check for?

[10:00] <abraxxa> when Int, then when Real?

[10:00] *** xfix left
[10:00] <abraxxa> because I have to handle Rat too

[10:00] <moritz> yes

[10:00] <masak> abraxxa: when Int, else convert to Num

[10:00] <abraxxa> or should I check for both Num and Rat instead of the role Real?

[10:00] <masak> abraxxa: yeah, forget about Real

[10:00] <masak> abraxxa: Int is Real too

[10:00] <abraxxa> masak: there are stings too, and date(time)s...

[10:00] <abraxxa> masak: if I check for Int first that's not an issue

[10:00] <masak> abraxxa: match against Rat | Num, then

[10:01] <moritz> abraxxa: no, then you have to check FatRat too etc.

[10:01] *** jack_rabbit left
[10:01] <abraxxa> masak: i thought checking against Real is better if someone implements a Type that also does Real

[10:01] <moritz> masak: what's wrong with checking Int first, then Real?

[10:01] <abraxxa> that's why I've asked for a Role that says 'is a float number'

[10:02] <moritz> but Rat *isn't* a float number

[10:02] <moritz> it's just convertible into one

[10:02] <moritz> but, so is Int

[10:03] *** secwang left
[10:03] *** regreg left
[10:06] <stmuk> there is a new "unbox" error due to changed rakudo behaviour (not the "old" intermitaint panda one) or am I misunderstanding?

[10:06] <RabidGravy> no

[10:07] <RabidGravy> native number types don't smart match nicely

[10:08] <RabidGravy> but it doesn't matter here as there will be a value or at least a variable containing the type

[10:08] <stmuk> ok if it's simple and reproductable why does rerunning panda make the problem go away? is that unbox error a side effect?

[10:09] <abraxxa> moritz: that's an implementation detail, logically it's a number with decimal places

[10:09] <moritz> abraxxa: which is totally not the same as a float

[10:09] <moritz> m: say so 0.1e + 0.2e == 0.3e

[10:09] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/4cRwRmf6Fz␤Confused␤at /tmp/4cRwRmf6Fz:1␤------> 3say so 0.1e7⏏5 + 0.2e == 0.3e␤»

[10:09] <moritz> m: say so 0.1e0 + 0.2e0 == 0.3e0

[10:09] <camelia> rakudo-moar 9e53fa: OUTPUT«False␤»

[10:09] <RabidGravy> stmuk, you're not talking about the lasty hour of backlog, and it's just a coincidence

[10:09] <moritz> m: say so 0.1 + 0.2 == 0.3

[10:09] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤»

[10:10] <abraxxa> moritz: i know the technical difference and love it

[10:10] <stmuk> RabidGravy: that what I meant by the new "unbox" error

[10:10] <abraxxa> but there is no way to pass it to OCI in a native way

[10:11] <RabidGravy> stmuk, not sure what panda has to do with it then

[10:11] <RabidGravy> abraxxa, this is getting over complicated,  if it's a Rat or a Num cast it to a Num, if it's an Int cast it to an Int

[10:12] <abraxxa> what about FatRat?

[10:13] *** M-eternaleye left
[10:13] *** M-eternaleye joined
[10:13] <RabidGravy> there are only two basic native number types  int of various size and num of various size,  so if the cast fails then you're stuffed anyway

[10:13] <RabidGravy> FatRat would be a "double" say cast to a Num

[10:14] <RabidGravy> there may well be a loss of precision, but that's inherent in the difference between the way Perl does the numbers to how e.g. C does

[10:15] <stmuk> RabidGravy: panda has reported the same error since precomp was merged but not consistantly

[10:16] <RabidGravy> yeah, this is actually totally unrelated

[10:17] <stmuk> RabidGravy: so you are actually agreeing with my original question and just misunderstanding me?

[10:17] <RabidGravy> no, you've confused me

[10:17] *** espadrine joined
[10:17] <RabidGravy> m: num64 ~~ Num

[10:17] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/XUzNrkj6Dq:1␤␤»

[10:18] <RabidGravy> *that* is totally unrelated to what is happening with panda

[10:18] <stmuk> yes that's what I said

[10:18] * stmuk gives up

[10:19] <RabidGravy> stmuk, you said "ok if it's simple and reproductable why does rerunning panda make the problem go away? is that unbox error a side effect?" no?

[10:19] <stmuk> see line 10:06

[10:20] <RabidGravy> right

[10:21] <RabidGravy> the unbox error in panda is caused by an undefined variable being passed to an nqp:: function in the method files() without being checked

[10:22] <stmuk> I explicity asked if there were two unbox errors and you said "no" at 10:06

[10:24] <RabidGravy> yes, there is no "new" unbox error

[10:24] *** secwang joined
[10:24] <RabidGravy> and no it is not related to anything happening in panda

[10:25] *** labster left
[10:26] <RabidGravy> it is entirely possible that it has always done this one as long as the native types have existed

[10:28] <stmuk> % /opt/rakudo-2015.09/bin/perl6

[10:28] <stmuk> > say num64 ~~ Num

[10:28] <stmuk> True

[10:30] <RabidGravy> ah ha! do you still have the source for that version?

[10:31] *** cpage_ left
[10:31] *** vytas left
[10:31] <stmuk> probably not .. I am going to experiment a bit more

[10:31] <uruwi_> How to convert from an Int to an int

[10:31] <uruwi_> ?

[10:31] <RabidGravy> you don't have to

[10:32] *** n0tjack joined
[10:32] <uruwi_> Hmm, Type check failed in assignment to '@ingredients'; expected 'Array[int]' but got 'Int'

[10:32] <uruwi_> my int @this = +$0, +$1, +$2, +$3, +$4;

[10:32] <uruwi_>     @ingredients.push(@this);

[10:32] <RabidGravy> uruwi_, that's different

[10:32] <uruwi_> Never mind, already figured it out :P

[10:34] <stmuk> RabidGravy: what should say num64 ~~ Num return?

[10:35] <RabidGravy> stmuk, True

[10:35] <moritz> m: say num64 ~~ Num

[10:35] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/LC0i2CsWyv:1␤␤»

[10:35] *** Axord joined
[10:35] <moritz> m: say int32 ~~ Int

[10:35] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/DBkqU7ZM6Y:1␤␤»

[10:35] <stmuk> so why is the error not new if it doesn't do that now and it did it 2 months ago?

[10:35] <RabidGravy> I'm thinking there was a refactor around the native types at around a month or so ago which done broke it

[10:36] <stmuk> ok

[10:36] *** n0tjack left
[10:36] * stmuk wonders how Bend behaves

[10:38] *** aborazmeh left
[10:38] <dalek> Inline-Python: 64491c2 | (Stefan Seifert)++ | / (7 files):

[10:38] <dalek> Inline-Python: Update for CompUnitRepo changes

[10:38] <dalek> Inline-Python: 

[10:38] <dalek> Inline-Python: Use %?RESOURCES to find pyhelper.so

[10:38] <dalek> Inline-Python: Manual precompilation is no longer necessary. Rakudo automatically precompiles

[10:38] * moritz wonders how Bender behavers

[10:38] <dalek> Inline-Python: so in essence, every test is now a precompilation test, too.

[10:38] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/64491c2467

[10:38] <moritz> *behaves

[10:38] <nine> moritz: ^^^

[10:38] <moritz> nine: tusend takk

[10:38] <RabidGravy> the thing is that "my native num64 is repr('P6num') is Num is nativesize(64) { }" so there is some weird going on before the "normal" smartmatch mechanism kicks in

[10:39] <moritz> RabidGravy: might be just a specialized ACCEPTS that's missing a :D

[10:39] <moritz> nine: now I get

[10:39] <moritz> Cannot locate native library '/home/rakudobrew/.panda-work/1450175937_1/resources/pyhelper.so': /home/rakudobrew/.panda-work/1450175937_1/resources/pyhelper.so: cannot open shared object file: No such file or directory

[10:40] <moritz> This is rakudo version 2015.11-554-g3b4964b built on MoarVM version 2015.11-49-g27f15d9 implementing Perl v6.b.

[10:44] <RabidGravy> moritz, I cursorily attempted to augment Num with an ACCEPTS and it didn't appear to make a difference

[10:44] <nine> moritz: darn... that's because panda compiles into blib/lib and blib/resources while make test runs prove -Ilib

[10:45] <RabidGravy> yeah, it took me ages to get that right

[10:46] <stmuk> . o O ( 25th or 17th place your bets now )

[10:46] <RabidGravy> nine, https://github.com/jonathanstowe/p6-Sys-Lastlog/commit/52f62da2177a7d185d24295c19a0844f3c53851c - is how I fixed Sys::Lastlog

[10:47] <nine> RabidGravy: thanks! will try that

[10:48] <RabidGravy> stmuk, I'm not liking the 17th

[10:50] <stmuk> which month?

[10:50] *** Axord left
[10:50] <stmuk> I'm sure it will be fine in the wash :)

[10:53] *** Zoffix left
[10:53] *** Zoffix joined
[10:53] *** zakharyas left
[10:56] *** adhoc left
[10:57] *** cpage_ joined
[10:58] *** zakharyas joined
[10:59] <llfourn> m: .say for 1,3..5 # any easy way to get this all flattened out

[10:59] <camelia> rakudo-moar 9e53fa: OUTPUT«1␤3..5␤»

[11:00] <llfourn> m: .say for 1,(3..5).flat # better than

[11:00] <camelia> rakudo-moar 9e53fa: OUTPUT«1␤(3 4 5)␤»

[11:00] <llfourn> m: .say for 1,3...5)

[11:00] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/oLjmiL_71I␤Unexpected closing bracket␤at /tmp/oLjmiL_71I:1␤------> 3.say for 1,3...57⏏5)␤»

[11:00] <llfourn> m: .say for 1,3...5

[11:00] <camelia> rakudo-moar 9e53fa: OUTPUT«1␤3␤5␤»

[11:01] <stmuk> 2m to rocket launch!

[11:02] *** snarkyboojum left
[11:03] *** Khisanth left
[11:07] *** jnthn joined
[11:08] <jnthn> morning, #perl6 o/

[11:09] *** iH2O joined
[11:09] *** adhoc joined
[11:13] *** davercc left
[11:13] <jnthn> m: .say for flat 1,3..5

[11:13] <camelia> rakudo-moar 9e53fa: OUTPUT«1␤3␤4␤5␤»

[11:15] <jnthn> Juerd: MQTT refactor Looks nice :)

[11:15] *** Skarsnik joined
[11:18] *** iH2O left
[11:18] <stmuk>  CVE-2015-8557 python-pygments: Shell injection in FontManager._get_nix_font_path

[11:20] * grondilu looks at http://es6-features.org/ and can't help noticing similarities with Perl 6

[11:21] *** koo8 joined
[11:21] *** secwang left
[11:22] <llfourn> jnthn: thanks :)

[11:23] *** secwang joined
[11:24] *** leont joined
[11:29] *** brrt left
[11:30] *** pippo joined
[11:31] <grondilu> what would you think about adding a :$repetitions! multi for combinations?

[11:32] *** n0tjack joined
[11:32] <grondilu> (or :$repeat)

[11:33] <grondilu> ahh I still can't install rakudo:

[11:33] <grondilu> ./perl6-m tools/build/install-core-dist.pl

[11:33] <grondilu> ===SORRY!=== Error while compiling /usr/local/share/perl6/sources/089D4EE67A13498C10F4839B92C697AA10019E85

[11:33] <grondilu> An exception occurred while evaluating a constant

[11:33] <grondilu> at /usr/local/share/perl6/sources/089D4EE67A13498C10F4839B92C697AA10019E85:13

[11:33] <grondilu> Exception details:

[11:33] <grondilu>   Could not find symbol '&bool'

[11:33] <grondilu>     in block  at /usr/local/share/perl6/sources/089D4EE67A13498C10F4839B92C697AA10019E85:13

[11:34] <stmuk> grondilu: try from scratch

[11:34] <grondilu> don't know what you mean

[11:34] <RabidGravy> yeah, lizmat indicated that she had to nuke before successfully building earlier

[11:35] <grondilu> you mean rm -rf /usr/local/share/perl6/sources/ ?

[11:35] <RabidGravy> or make clean

[11:35] <stmuk> yes delete everything

[11:35] <RabidGravy> or "rakudobrew nuke moar"

[11:35] <RabidGravy> or whatever

[11:36] <timotimo> smls: seems like nobody answered you yet; there were improvements to run() and friends. where were you looking to get to that conclusion?

[11:36] <stmuk> and cross your fingers :)

[11:36] * grondilu tries 'make clean' first

[11:36] *** n0tjack left
[11:37] <Zoffix> stmuk, we're using that to build docs, don't we?

[11:37] <smls> timotimo: Trial and error, mostly. And introspection... ;)

[11:37] <Zoffix> (python-pygments)

[11:37] *** secwang left
[11:37] *** rindolf joined
[11:37] <jnthn> m: use Test; is ($(1, 2) Z <a b c>), (($(1, 2), 'a'),)

[11:37] <camelia> rakudo-moar 9e53fa: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/doxmR7OsxT line 1␤# expected: '1 2 a'␤#      got: '1 a 2 b'␤»

[11:37] <RabidGravy> I was going to suggest repurposing its-going-to-be-fabulous.com for Perl 6 earlier, but for some reason it had gone anyway

[11:38] <jnthn> m: use Test; is (<a b c> Z $(1, 2)), (('a', $(1, 2)),)

[11:38] <camelia> rakudo-moar 9e53fa: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/yGHOB7Rrlk line 1␤# expected: 'a 1 2'␤#      got: 'a 1 b 2'␤»

[11:38] *** rurban left
[11:38] <Zoffix> RabidGravy, what do you mean gone away? Still loads for me :)

[11:38] *** leont left
[11:38] <RabidGravy> I prodded it

[11:38] <Zoffix> http://i.imgur.com/6jhqk0K.png

[11:38] <Zoffix> Ah :D

[11:39] <RabidGravy> for some reason the DNS wasn't in the wild

[11:39] <RabidGravy> which is odd as I've had it for a very long time

[11:39] <stmuk> Zoffix: yes 

[11:40] <Zoffix> Well... as long as we aren't using Joomla

[11:41] <Zoffix> (https://blog.sucuri.net/2015/12/remote-command-execution-vulnerability-in-joomla.html)

[11:41] <Skarsnik> hm JSON::Marshal did not like the remove of has-accessor

[11:42] <smls> timotimo: Then how can I write this expression more easily:

[11:42] <smls> do { my $proc = run("some_program", :out); my $out = $proc.out.slurp-rest; $proc.out.close; $out }

[11:43] <smls> i.e. an expression that returns the STDOUT of a program invocation as a string, *but* throws an exception if the program couild not run successfully

[11:43] <RabidGravy> Skarsnik, on it when I've got a working rakudo again

[11:43] <timotimo> smls: i haven't touched run() at all yet, i think :|

[11:43] <RabidGravy> I did actually suspect that would be the case

[11:45] <timotimo> Skarsnik: i think it's not removed, just renamed, eh?

[11:45] <smls> timotimo: When you write  run("program", :out).out.slurp-rest;   you loose all the error handling - not to mention that it's still unfriendly to write.

[11:46] <Skarsnik> yes renamed

[11:46] <Skarsnik> RabidGravy, I make a PR for it

[11:47] <timotimo> how about qx?

[11:47] <smls> eew, shell quoting

[11:48] <timotimo> qx doesn't do quoting

[11:48] <smls> ?

[11:48] <timotimo> single q means no parsing happens

[11:48] <timotimo> er, interpolation

[11:48] <jnthn> No, but it does then call shell, not run

[11:48] <timotimo> ... or does qx give you "quotewords", too?

[11:48] <timotimo> ah!

[11:48] <timotimo> of course

[11:49] *** vytas joined
[11:50] <jnthn> smls: If you're writing the thing you wrote earlier a bunch of times, just factor it out into a sub. It's not *that* long. I agree sugar would be nice.

[11:50] <smls> I'm wondering if the .Str method on Proc could be made to do all the slurping and error handling for you

[11:50] <smls> se one could write:  my $output = ~run("some_program", :out);

[11:51] <jnthn> Feels a bit too magical.

[11:51] <smls> It's .Bool method is already special I think, so it might fit

[11:51] <jnthn> Though yeah, would probably be workable

[11:51] *** siriu5b joined
[11:52] <jnthn> m: say roundrobin($(1, 2), <a b c>).perl

[11:52] <camelia> rakudo-moar 9e53fa: OUTPUT«([1, "a"], [2, "b"], ["c"]).Seq␤»

[11:52] <jnthn> m: say roundrobin(((1, 2),), <a b c>).perl

[11:52] <camelia> rakudo-moar 9e53fa: OUTPUT«([(1, 2), "a"], ["b"], ["c"]).Seq␤»

[11:54] <smls> Another confusing thing about Proc is that .exitcode returns 0 if the program has not yet finished

[11:54] <smls> would be saner to have ot block for the process to finish, IMO

[11:57] <smls> Put another way, Proc feels a little too slanted towards async usage. It would be better if simple synchroneous usage was easy, and async use needed special care, rather than the other way around.

[11:57] <smls> Especially since there is already Proc::Async for full async flexibility.

[11:58] *** bjz_ left
[11:59] *** bjz joined
[11:59] <jnthn> m: say roundrobin(<a b c>, ((1, 2),)).perl

[11:59] <camelia> rakudo-moar 9e53fa: OUTPUT«(["a", (1, 2)], ["b"], ["c"]).Seq␤»

[12:00] *** [particle] left
[12:00] <jnthn> ah...duh :)

[12:00] *** siriu5b left
[12:01] *** [particle] joined
[12:01] *** [particle] left
[12:02] * jnthn has now got Z, X, their meta-op forms, and roundrobin respecting itemization

[12:02] <jnthn> Now if only the patch will pass spectest... :)

[12:02] *** rurban joined
[12:02] *** siriu5b joined
[12:02] <timotimo> :S

[12:02] <masak> jnthn: is that the expected reslut for roundrobin...?

[12:03] <jnthn> masak: The one above?

[12:03] <jnthn> Well, close.

[12:03] <jnthn> The problem was:

[12:04] <jnthn> m: use Test; is roundrobin($(1, 2), <a b c>), (($(1, 2), 'a'), ('b',), ('c',))

[12:04] <camelia> rakudo-moar 9e53fa: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/wlci6XInaO line 1␤# expected: '1 2 a b c'␤#      got: '1 a 2 b c'␤»

[12:04] <jnthn> I also threw a .List is as we probably shouldn't be returning mutable arrays from roundrobin.

[12:04] <jnthn> *in

[12:04] <masak> grondilu: re :$repetitions or :$repeat -- couldn't the same effect be had by casting to .Set before?

[12:06] <jnthn> .tell FROGGS t\04-nativecall\12-sizeof.t explodes on Win32/MSCV when compiling the test C lib, with "fatal error C1083: Cannot open include file: 'stdbool.h'"

[12:06] <yoleaux> jnthn: I'll pass your message to FROGGS.

[12:06] <jnthn> stdbool is apparently just not std enough :P

[12:07] * masak .oO( for very low values of "std"... )

[12:08] <timotimo> well, stdbool is std in C99

[12:08] <timotimo> i thought we had a check for that to make sure it actually exists?

[12:08] <jnthn> Not in that test C script, apparently

[12:09] <grondilu> m: say join '   ', <a b c>.combinations(3);

[12:09] <camelia> rakudo-moar 9e53fa: OUTPUT«a   b   c␤»

[12:10] <grondilu> m: say <a b c>.combinations(2);

[12:10] <camelia> rakudo-moar 9e53fa: OUTPUT«((a b) (a c) (b c))␤»

[12:10] <grondilu> m: say <a b c>.Set.combinations(2);

[12:10] <camelia> rakudo-moar 9e53fa: OUTPUT«((a => True c => True) (a => True b => True) (c => True b => True))␤»

[12:10] <FROGGS> jnthn: ahh

[12:10] <yoleaux> 12:06Z <jnthn> FROGGS: t\04-nativecall\12-sizeof.t explodes on Win32/MSCV when compiling the test C lib, with "fatal error C1083: Cannot open include file: 'stdbool.h'"

[12:10] <FROGGS> jnthn: you've got MSVC 2012 or older?

[12:11] <grondilu> masak: I'm not sure what you mean with casing to .Set

[12:11] <grondilu> *casting

[12:11] <FROGGS> jnthn: moarvm's config exposes the fact that a _Bool or bool is available, I should make the include conditionally somehow using that info

[12:11] <jnthn> C:\consulting\rakudo>cl

[12:11] <jnthn> Microsoft (R) C/C++ Optimizing Compiler Version 16.00.40219.01 for x64

[12:11] <FROGGS> that's 2011 IIRC

[12:11] <jnthn> wow :)

[12:12] <jnthn> I've a bunch of versions installed, that must just be what's in my path :)

[12:12] <FROGGS> I've got 2012 Express which tells it is v17

[12:12] <grondilu> <a b c>.combinations(2, :repeat) would give ((a, a), (a, b), (a, c), (b, b), (b, c), (c, c))

[12:13] <jnthn> FROGGS: Yowser, it's 2010

[12:13] <FROGGS> hehe

[12:13] <FROGGS> oldie but goldie

[12:13] <jnthn> I guess that's why debugging Moar feels so responsive compared to when I'm doing C# stuff in later versions :P

[12:14] <masak> grondilu: oh, I see. I misunderstood, then.

[12:14] <masak> grondilu: though to be honest, that no longer feels like .combinations to me

[12:14] <masak> grondilu: kind of a situation analogous to .pick/.roll -- it's too different to be just an option/adverb

[12:15] <jnthn> urgh...something that's recently happened has thrown off line number reporting in some cases

[12:15] <grondilu> masak: it's how it's called in http://rosettacode.org/wiki/Combinations_with_repetitions

[12:16] <grondilu> I don't know how else we could call it.

[12:16] <dalek> rakudo/nom: 2342871 | jnthn++ | src/core/ (2 files):

[12:16] <dalek> rakudo/nom: Make X, Z, and roundrobin respect items.

[12:16] <dalek> rakudo/nom: 

[12:16] <dalek> rakudo/nom: Includes fixing meta-op forms of X and Z.

[12:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/234287170c

[12:16] <masak> grondilu: feels almost like a kind of cross product to me (except with "unordered pairs")

[12:16] <dalek> roast: 127b86f | jnthn++ | S (3 files):

[12:16] <dalek> roast: Tests for RT #126522.

[12:16] <dalek> roast: review: https://github.com/perl6/roast/commit/127b86fbf5

[12:17] <grondilu> apparently on wikipedia it's called "multisubset".  Need to investigate.

[12:17] <grondilu> https://en.wikipedia.org/wiki/Combination#Number_of_combinations_with_repetition

[12:18] <Juerd> Why can't *.method ~~ regex be used with .grep?

[12:18] <Juerd> m: say (^10).grep: *.Str ~~ /<[123]>/

[12:18] <camelia> rakudo-moar 9e53fa: OUTPUT«WhateverCode object coerced to string (please use .gist or .perl to do that)  in block <unit> at /tmp/P8qZvQVJt9:1␤()␤»

[12:18] <Juerd> m: say (^10).grep: * ~~ /<[123]>/

[12:18] <camelia> rakudo-moar 9e53fa: OUTPUT«(1 2 3)␤»

[12:18] <Juerd> In my real world use case I have a list of hashes, and I want to grep on  *.<topic> ~~ $regex

[12:19] <masak> Juerd: that looks nice. it might well be that that should work.

[12:19] *** kanishka joined
[12:19] <masak> Juerd: but whatever mechanics are so hairy, so I'd simply Try It And See -- change the semantics of Rakudo, and then re-run the spectest suite.

[12:19] <Juerd> I expected it to work but had to rewrite it as { .<topic> ~~ $regex }

[12:20] <masak> aye.

[12:20] <grondilu> maybe we could call them "bags($n)", as in all bags of $n elements in total.

[12:20] <timotimo> jnthn: ah, i knew it! i was hoping to get some sort of debug output working to see more exactly what nodes get annotated with which line number to make the line coverage more better (by finding out why certain lines don't get mentioned; like lines containing signatures)

[12:20] * masak runs into these less often, because he tends to use blocks/$_ rather than whatever

[12:20] <masak> grondilu: sounds a bit too huffmanized next to "combinations", especially since it's a more complicated thing than combinations

[12:21] *** [particle] joined
[12:22] <Juerd> masak: The thing is, I don't know whether this is a bug or not... :)

[12:23] <Skarsnik> FROGGS, Hello, I wanted to tell you that the test will likly fail because of bool x)

[12:23] <masak> TimToady: getting a "useless use" warning (on latest Rakudo) on an `eq` directly in a `try` (in a statement_mod `if`)

[12:23] <FROGGS> Skarsnik: hehe

[12:23] <masak> TimToady: if you want, I can send you a minimized case of this. it looks like a false positive to me.

[12:23] <FROGGS> Skarsnik: I'm pushing a fix in a minute

[12:23] <sammers> Hi all, I am trying to rakudobrew build jvm on debian, but I get "no writable path found in block <unit> at tools/build/install-core-dist.pl:15"... any ideas?

[12:23] <masak> Juerd: my point was, I don't know either :P

[12:23] <masak> Juerd: in some sense, the limits of what can be whatever'd are a bit arbitrary

[12:24] <FROGGS> sammers: the jvm backend has quite a bunch of problems currently

[12:24] <Skarsnik> You also forget to add the stdbool.h header in case of _Bool does not exist but bool exist (probably a weird case)

[12:24] <FROGGS> sammers: can you use the moarvm backend in the meantime?

[12:24] <jnthn> m: say (* ~~ /foo/).WHAT

[12:24] <camelia> rakudo-moar 9e53fa: OUTPUT«(WhateverCode)␤»

[12:24] <jnthn> m: say (*.bar ~~ /foo/).WHAT

[12:24] <camelia> rakudo-moar 9e53fa: OUTPUT«WhateverCode object coerced to string (please use .gist or .perl to do that)  in block <unit> at /tmp/penqWRqDMW:1␤Nil␤»

[12:24] <Juerd> TimToady: Should "$hashes.grep: *.<foo> ~~ $regex" work?

[12:24] <FROGGS> Skarsnik: are you sure?

[12:24] <sammers> FROGS: thanks, no worries. just wanted to play around with it. moarvm is working fine here.

[12:24] <jnthn> Generally, anywhere we curry Whatever we should really curry WhateverCode too

[12:24] *** rurban_ joined
[12:24] <jnthn> So I'm inclined to think what Juerd wants should work

[12:25] <sammers> FROGGS: where is the best place to follow the jvm progress?

[12:25] <jnthn> lunch; bbiab :)

[12:25] <moritz> jnthn: iirc there are a few deliberate exceptions to that rule

[12:26] <moritz>         %curried{'&infix:<∘>'}   := 1;

[12:26] <moritz>         %curried{'&infix:<o>'}   := 1;

[12:26] <moritz>     # %curried == 1 means curry Whatever only

[12:26] <moritz>         %curried{'&infix:<~~>'}   := 1;

[12:27] <moritz> by TimToady in commit 292ef666d

[12:27] <moritz> m: say (a => 1) ~~ * eqv (a => 1)

[12:27] <camelia> rakudo-moar 9e53fa: OUTPUT«WhateverCode.new␤»

[12:28] *** koo8 left
[12:28] <stmuk> sammers: you also need to run rakudobrew from a writeable directory

[12:28] <moritz> seems it still curries on WhateverCode on the RHS

[12:28] <FROGGS> sammers: this channel I guess

[12:28] *** [particle] left
[12:28] <stmuk> sammers: I mean you have to have the cwd writeable when you type the command

[12:29] <FROGGS> sammers: also, psch++ is currently the most active jvm-backend hacker

[12:29] <RabidGravy> Skarsnik, merged cheers!

[12:32] <RabidGravy> Ah, I thought that JSON::Unmarshal would be broked by the same thing but it appears not

[12:32] <sammers> stmuk: cool thanks. it is running from a writable directory (with plenty of free space)... I will just lurk here for the next few months...

[12:32] <sammers> FROGGS: thanks, I will keep an eye out.

[12:32] <RabidGravy> careful with the lurking, you may find yourself volunteered to do something

[12:32] <RabidGravy> :)

[12:34] <timotimo> hum. how do i make the node objects available to lower_signature ...

[12:34] <timotimo> it's tempting to put the node into the %info hash, but that could - in the worst case - cause Match objects to reach the final output

[12:35] <sammers> RabidGravy: oh no!!!! ok, I will be careful... I am really having fun with perl6 atm. hopefully when I get a bit more comfortable I will be able to contribute...

[12:35] <RabidGravy> :)

[12:36] <dalek> rakudo/nom: 22e8b54 | FROGGS++ | t/04-nativecall/12-sizeof.c:

[12:36] <dalek> rakudo/nom: include stdbool.h conditionally to unbreak MSVC

[12:36] <dalek> rakudo/nom: 

[12:36] <dalek> rakudo/nom: This is not a perfect patch, ideally we would do the same magic that moar does.

[12:36] <dalek> rakudo/nom: cygx++ for this piece of magic.

[12:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22e8b548e4

[12:37] <smls> m: .say for (<2 1 3> .sort);

[12:37] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot find method 'map': no method cache and no .^find_method␤  in block <unit> at /tmp/Fj5E2PuIXu:1␤␤»

[12:37] <timotimo> m: say <2 1 3>.sort.WHAT

[12:37] <smls> ^^ wat ;)

[12:37] <camelia> rakudo-moar 9e53fa: OUTPUT«(List)␤»

[12:37] <timotimo> m: say <2 1 3>.sort.map(*.say)

[12:37] <camelia> rakudo-moar 9e53fa: OUTPUT«1␤2␤3␤(True True True)␤»

[12:37] <timotimo> m: say (<2 1 3> .sort).map(*.say)

[12:37] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot find method 'map': no method cache and no .^find_method␤  in block <unit> at /tmp/TRmB0MrgE8:1␤␤»

[12:37] <moritz> m: .say for (<2 1 3>.sort)

[12:37] <camelia> rakudo-moar 9e53fa: OUTPUT«1␤2␤3␤»

[12:37] <dalek> nqp: e94e95d | FROGGS++ | tools/build/MOAR_REVISION:

[12:37] <dalek> nqp: bump moar for stdbool.h fix

[12:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e94e95de16

[12:37] <smls> timotimo: it works without the space before the method call op

[12:37] <timotimo> m: say (<2 1 3>.sort).map(*.say)

[12:37] <camelia> rakudo-moar 9e53fa: OUTPUT«1␤2␤3␤(True True True)␤»

[12:37] <moritz> it really needs the space before the .sort

[12:37] <timotimo> wow, wat.

[12:38] <timotimo> that's not right

[12:38] <dalek> rakudo/nom: 8464eab | FROGGS++ | tools/build/NQP_REVISION:

[12:38] <dalek> rakudo/nom: bump nqp/moar for stdbool.h fix

[12:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8464eabc63

[12:38] <FROGGS> Skarsnik: better? https://github.com/MoarVM/MoarVM/commit/a677430d85

[12:40] <smls> timotimo: Should I RT it? It's not like it holds back the release so won't need immediate attention.

[12:40] <masak> m: say "OH HAI" if try 0 eq 0

[12:40] <camelia> rakudo-moar 9e53fa: OUTPUT«OH HAI␤»

[12:40] *** kid51 joined
[12:40] <masak> TimToady: ^ the above gives the "Useless use" warning locally.

[12:40] <timotimo> smls: that just means it doesn't need to go in the xmas list

[12:40] <masak> TimToady: and it's not a useless use, since `try` is transparent to values

[12:41] <moritz> smls: please RT, yes

[12:42] <smls> k

[12:42] *** bjz left
[12:47] <stmuk> f457007181bb6e2dcb6aefe857f36d648ae38401 broke num64 ~~ Num

[12:48] *** lucasb joined
[12:48] *** bjz joined
[12:50] <moritz> m: say Num.ACCEPTS(num64)

[12:50] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤»

[12:51] <RabidGravy> stmuk++ # bisecting

[12:51] *** rurban left
[12:52] <moritz> m: say 1 ~~ True

[12:52] <camelia> rakudo-moar 9e53fa: OUTPUT«True␤»

[12:52] <moritz> it broke that too

[12:52] <moritz> that used to warn/error

[12:52] *** kid51 left
[12:53] <stmuk> santa needs to bring me a faster bisecting machine :/

[12:54] <RabidGravy> Hmm, that might also explain a load of  Array[<nativetype>] fails I brushed under the carpet last week

[12:56] * RabidGravy finds another has-accessor

[12:57] <RabidGravy> me-- # cargo culting his own code

[12:57] <Juerd> RabidGravy: Example?

[12:57] <RabidGravy> Juerd, que?

[12:58] <RabidGravy> oh example of Array[<native>]

[12:58] <Juerd> I'm curious. What are you cargo culting?

[13:00] <RabidGravy> using has-accessor 

[13:00] <RabidGravy> it was in a test of META6

[13:00] <Juerd> Why's that bad?

[13:00] <RabidGravy> I'd just finished JSON::Marshal which also had it

[13:00] <Skarsnik> it had be removed to only have has_accessor

[13:01] <RabidGravy> well, it's bad now because what Skarsnik said

[13:01] <Skarsnik> All the MOP part of perl6 use _ in name :)

[13:01] <Juerd> Oh, wow. That's such a PHP-like issue :(

[13:02] <Skarsnik> Meh, It mark MOP  stuff at being something 'special'

[13:02] <Juerd> I disliked in tests that is_approx has _

[13:02] <RabidGravy> there are two I think

[13:03] <RabidGravy> weirdly is_approx and is-approx work somewhat differently

[13:03] <RabidGravy> or did that get changed

[13:04] <RabidGravy> no what I thought you meant was whatever it was that required https://github.com/jonathanstowe/Audio-Encode-LameMP3/commit/44f0c4c911845938d49bd13b7812e6a8d928d034

[13:04] <RabidGravy> which is "brushing under the carpet"

[13:04] <abraxxa> what can cause this error (or warning?) message? it doesn't include a line number: Use of uninitialized value @row of type Str in string context

[13:05] <Skarsnik> weird

[13:06] *** prammer joined
[13:06] <RabidGravy> m: my @a := Array; say "@a";

[13:06] <camelia> rakudo-moar 9e53fa: OUTPUT«@a␤»

[13:06] <RabidGravy> m: my @a := Array; say @a.Str;

[13:06] <camelia> rakudo-moar 9e53fa: OUTPUT«Use of uninitialized value of type Array in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/w2n4xOGOcg:1␤␤»

[13:06] <dalek> rakudo/better_line_coverage: 57b3506 | timotimo++ | src/Perl6/Actions.nqp:

[13:06] <dalek> rakudo/better_line_coverage: give parameter binding code nodes

[13:06] <dalek> rakudo/better_line_coverage: 

[13:06] <dalek> rakudo/better_line_coverage: this lets the signature line(s) show up in coverage

[13:06] <dalek> rakudo/better_line_coverage: output when generated via moarvm, as the code now has

[13:06] <dalek> rakudo/better_line_coverage: line number annotations.

[13:06] <dalek> rakudo/better_line_coverage: review: https://github.com/rakudo/rakudo/commit/57b350636c

[13:07] <RabidGravy> abraxxa, but I don't know how you get there without doing it deliberately

[13:08] <abraxxa> say @a.gist;?

[13:08] <abraxxa> hm, no

[13:09] <timotimo> m: sub test(@a) { say @a }; test(Array)

[13:09] <camelia> rakudo-moar 9e53fa: OUTPUT«(Array)␤»

[13:10] <timotimo> ^- that's how

[13:10] <moritz> uhm, that surprises me

[13:10] <moritz> I'd spect @a in a signature to actually mean Positional:D

[13:10] <timotimo> suspect*?

[13:10] <moritz> *expect

[13:10] <abraxxa> https://github.com/abraxxa/DBIish/blob/master/t/99-common.pl6#L21

[13:10] <abraxxa> this triggers it

[13:10] <timotimo> i had a branch to do that, but it caused some spec test fallout

[13:11] <timotimo> it did look like that had some agreement from the community, though

[13:11] <abraxxa> isn't using a und b as varnames discouraged or is that only in Perl 5?

[13:12] <moritz> only p5

[13:12] <Skarsnik> abraxxa, that's so weird is not the diag @a[] ?

[13:12] <abraxxa> might be

[13:12] <Skarsnik> :m my @a; say "hello @a[]";

[13:12] <Skarsnik> m: my @a; say "hello @a[]";

[13:12] <camelia> rakudo-moar 9e53fa: OUTPUT«hello ␤»

[13:13] <Skarsnik> m: my Str @a; say "hello @a[]";

[13:13] <camelia> rakudo-moar 9e53fa: OUTPUT«hello ␤»

[13:13] <abraxxa> nope

[13:13] <Skarsnik> m: my Str @a; diag "hello @a[]";

[13:13] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KtEik7QLtF␤Undeclared routine:␤    diag used at line 1␤␤»

[13:13] <RabidGravy> m: sub foo(@a, @b) { @a[0] eq @b[0] }; foo(Array, Array);

[13:13] <camelia> rakudo-moar 9e53fa: OUTPUT«Use of uninitialized value $v of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in sub foo at /tmp/ZjnRu1jve5:1␤Use of uninitialized value $v of type Any in string context␤Any of .^name, .p…»

[13:14] <RabidGravy> or something

[13:16] * jnthn back

[13:18] <jnthn> moritz: OK, so ~~ not dealing with WhateverCode does look deliberate. :) Guess only TimToady can answer at this point. :)

[13:19] <jnthn> I think the story of is-approx vs is_approx is that the latter is meant to go away, but stayed for a bit because the behavior was a bit different, but the is-approx behavior was considered preferable.

[13:19] <jnthn> But that means the migration is a bit more than just "rename it"

[13:19] *** dalek left
[13:20] *** dalek joined
[13:20] *** ChanServ sets mode: +v dalek

[13:21] <RabidGravy> poor dalek

[13:21] *** rurban joined
[13:21] <RabidGravy> I suppose I'd better start this advent post

[13:21] *** rurban left
[13:22] <jnthn> Advised. Starting it at 10pm by writing an async STOMP impl made for a late night :P

[13:22] <Skarsnik> jnthn, should it be tagged at is_approx?

[13:22] <jnthn> Skarsnik: What? 

[13:22] <Skarsnik> DEPRECATED

[13:22] <jnthn> Oh

[13:22] <Skarsnik> Sorry I can't type

[13:22] <jnthn> Keys are right to each other!

[13:23] <moritz> now that we have an approximate-equal operator, we should use that in is-approx

[13:23] <jnthn> If somebody wants to look into getting it cleared up, that'd be appreciated :)

[13:23] <Skarsnik> and nice advent post btw. I was curious how to write my Discord::Client class with Supply x)

[13:24] <jnthn> :)

[13:24] *** koo8 joined
[13:24] <Skarsnik> moritz, about DBIIsh are the names are fine for row and allrows? or do you want me to change them before I merge the PR ~~

[13:25] <Skarsnik> but I probably had to rewrite WebSocket first to use them :(

[13:25] <RabidGravy> I would have thought WebSocket was a natural for Supply

[13:25] <abraxxa> so does someone have an idea where that warning comes from?

[13:26] <smls> jnthn: Can you take a quick look at https://rt.perl.org/Ticket/Display.html?id=126576 to decide if that is expected behavior?

[13:26] <smls> If so, that's one more rt that can be closed. If not, it may actually want to go in the xmas list...

[13:27] <jnthn> smls: That looks inconsistent

[13:27] <jnthn> smls: Think it should preserve in the second case too

[13:28] <smls> that was my expectation as well

[13:29] *** pippo_ joined
[13:30] <abraxxa> FYI I changed what I push on the @row array when the DB value is NULL to @row.push(Num.new);

[13:30] <abraxxa> note the .new

[13:30] <timotimo> now to generate another coverage report ...

[13:30] *** pippo left
[13:31] <Skarsnik> how you have null value in the test? x)

[13:31] <El_Che> type contraints are only for sub/method signatures I guess? (I was thinking of Moose ad hoc subtype (where) )

[13:31] <timotimo> a C question: should i replace fprintf with snprintf + write if i want the result to not be split even when concurrent access happens? or do i have to use a mutex?

[13:32] <timotimo> actually ... there could be access from multiple programs

[13:32] <Skarsnik> there are not thread save?

[13:32] <Skarsnik> *safe

[13:32] <abraxxa> before I've pushed Num which is not an object but a ???

[13:32] <lucasb> abraxxa: Num.new is just 0e0

[13:33] *** rurban joined
[13:33] <abraxxa> Skarsnik: i've added two tests which only insert an Int and a Num

[13:33] <abraxxa> lucasb: that's bad, because that's not undef

[13:33] <masak> lots of test failures in `make spectest` -- I guess this is known?

[13:33] <abraxxa> m: say Num.new

[13:33] <camelia> rakudo-moar 9e53fa: OUTPUT«0␤»

[13:33] <abraxxa> m: say Int.new

[13:33] <camelia> rakudo-moar 9e53fa: OUTPUT«0␤»

[13:33] <timotimo> masak: not really "lots", but like 5 or 6 files :(

[13:33] <ilmari> abraxxa: Num is the type object, which is also used as undef of that type

[13:34] *** n0tjack joined
[13:34] <abraxxa> so I should really push Num and Int without new?

[13:34] <ilmari> yes

[13:34] <Skarsnik> abraxxa, maybe you should merge with my fork? I added test for typed stuff https://github.com/Skarsnik/DBIish/blob/master/t/99-common.pl6#L139

[13:35] <abraxxa> Skarsnik: I'll rebase when I've finished my work and commited it

[13:35] <abraxxa> Skarsnik: should happen today or tomorrow

[13:37] <lucasb> {Int,Num,Rat,Bool,Str}.new all have default values. can I haz Complex.new too, please?

[13:37] <masak> timotimo: 13 files here.

[13:37] *** pmurias joined
[13:37] <timotimo> ugh.paste please?

[13:37] <timotimo> last time i tried that was fewer

[13:38] *** n0tjack left
[13:38] <masak> https://gist.github.com/masak/191a495ee1d9ed5b5472

[13:39] <timotimo> um, yikes

[13:39] <timotimo> there was work recently in many of those

[13:39] <timotimo> are you sure your rakudo, nqp and moar are all up to date?

[13:40] <masak> $ perl6 --version

[13:40] <masak> This is rakudo version 2015.11-557-gcc21892 built on MoarVM version 2015.11-49-g27f15d9 implementing Perl v6.b.

[13:40] <timotimo> AFK for a bit

[13:40] <masak> the spectests did a pull right before running.

[13:40] <timotimo> that seems recent enough

[13:40] <masak> I built earlier today, an hour or so ago.

[13:41] <abraxxa> is there no test function which can be used instead of magic_cmp in the DBIish t/99-comon.pl6?

[13:41] <Skarsnik> is-deeply ?

[13:41] <Skarsnik> you have everything from Test

[13:42] <abraxxa> i wonder who wrote magic_cmp and why

[13:42] <abraxxa> can you pass arrays in Perl 6 as the magic_cmp signature says?

[13:43] <abraxxa> I don't see that in https://doc.perl6.org/language/functions

[13:43] <Skarsnik> there was probably not a is-deeply in Test

[13:43] <jnthn> masak: I think with cross/zip/roundrobin you pulled Rakudo, and while it was a building and before pulling spectests I pushed the Rakudo and roast patches

[13:44] <jnthn> (And I pushed the two around an hour ago)

[13:44] <[Coke]> masak: there have been about 10 files failing for days.

[13:45] <dalek> perl6-roast-data: 42b887e | coke++ | / (7 files):

[13:45] <dalek> perl6-roast-data: today (automated commit)

[13:45] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/42b887e3b0

[13:46] <jnthn> The line number ones seem to have regressed overnight; if I had to guess, something to do with TimToady's great sink refactor work

[13:46] <[Coke]> masak: looks like it got much worse since yesterday, yes:

[13:46] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.moar-jit_summary.out#L5212

[13:46] <[Coke]> jnthn: S32-io/IO-Socket-Async-UDP.t aborted 1 test(s)

[13:46] *** leat joined
[13:47] <leat> getting this trying to run panda: https://bpaste.net/show/2bd77d6a5f22

[13:47] <abraxxa> where are the Test docs?

[13:48] <jnthn> [Coke]: Yes, platform issue

[13:48] <[Coke]> abraxxa: http://docs.perl6.org/language/testing ?

[13:48] <Skarsnik> abraxxa, http://doc.perl6.org/language/testing

[13:48] <leat> rakudo+nqp+moar all 2015-11.

[13:48] <jnthn> [Coke]: It's run without failure for me in every spectest run I've done since I added it

[13:48] <Skarsnik> but I don't think there is everything

[13:48] <llfourn> m: loop (my $i = 0;$i < 10;$i++) {  } # another GSR regression

[13:48] <camelia> rakudo-moar 9e53fa: OUTPUT«WARNINGS for /tmp/guBsIKfdfa:␤Useless use of $i in sink context (line 1)␤»

[13:49] <leat> any advice?

[13:49] <[Coke]> What is the purpose of the GSR? this seems like a lot of churn in the last days before release. me no likey.

[13:49] <Skarsnik> leat, what did you do to build rakudo/moar, what commant did you try?

[13:49] <jnthn> FROGGS: The NaiveCall test fix worked, thanks

[13:49] <stmuk> leat: you probably have to wipe everything and start again

[13:50] <abraxxa> thanks

[13:50] <FROGGS> \o/

[13:50] <[Coke]> jnthn: nice typo. :)

[13:50] <[Coke]> (at least, I assume that's a typo)

[13:50] <lucasb> leat: sorry, idk. but maybe you are trying to use a recent enough panda with an old rakudo (yes, 2015.11 is old with regard to recent changes :)

[13:50] <jnthn> hah!

[13:50] <jnthn> Native :)

[13:50] <abraxxa> the searchbox in the upper right corner doesn't find 'is-deeply'

[13:50] <Skarsnik> use the source for Test ~~

[13:51] <[Coke]> abraxxa: please open an issue at https://github.com/perl6/doc/issues

[13:51] <jnthn> [Coke]: Well, I think it's trying to address https://rt.perl.org/Ticket/Display.html?id=125769 and missing "Useless use of" warnings

[13:51] <abraxxa> [Coke]: sure

[13:51] <RabidGravy> tbh I tend to do "vi ../rakudo/lib/Test.om" every time

[13:51] <RabidGravy> pm

[13:52] * llfourn also does this

[13:52] <[Coke]> seems like we could live with warnings about use uses of things showing up post christmas.

[13:52] <[Coke]> *uselss

[13:52] <[Coke]> typos abound.

[13:53] <[Coke]> If it comes to it, that is.

[13:53] <leat> Skarsnik: built rakudo with perl Configure.pl --backends=moar --prefix=/usr

[13:53] <abraxxa> [Coke]: https://github.com/perl6/doc/issues/244

[13:54] <llfourn> I noticed while messing around: my $str = ''; for 0..n { $str ~= $_ } seems to be Ο(n²)

[13:54] <llfourn> is this something worth RTing?

[13:55] *** regreg joined
[13:55] <jnthn> No

[13:55] <leat> lucasb: tried checking out panda to 2015.10 and 2015.09 and it didn't help ):

[13:55] <llfourn> jnthn: kk ;)

[13:56] <jnthn> We most likely can't really fix that on JVM

[13:56] <jnthn> On Moar we do a bit better

[13:56] <llfourn> this was on Moar

[13:56] <jnthn> But what you're doing *is* inherently Ο(n²) given Str is immutable

[13:57] <llfourn> jnthn: hmm, maybe I understand. anyway to work around?

[13:57] <jnthn> join

[13:58] <llfourn> gotcha

[14:01] *** Sqirrel left
[14:02] <dalek> rakudo/nom: a04c751 | jnthn++ | src/Perl6/ (3 files):

[14:02] <dalek> rakudo/nom: Support :ver<...> and :auth<...> on package decls.

[14:02] <dalek> rakudo/nom: 

[14:02] <dalek> rakudo/nom: These can now be introspected with .^ver and .^auth.

[14:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a04c7515d4

[14:02] *** pyrimidine joined
[14:02] <dalek> roast: e7252a2 | jnthn++ | S12-introspection/meta-class.t:

[14:02] <dalek> roast: Test for .^auth; fix test for .^ver and unfudge.

[14:02] <dalek> roast: review: https://github.com/perl6/roast/commit/e7252a2a12

[14:02] <lizmat> jnthn: I think that is a mistake!

[14:02] <lizmat> auth and ver should be a compunit type thing

[14:02] <jnthn> Um, what?

[14:02] <lizmat> not a package type thing!

[14:02] <lizmat> if you have 2 classes in your file, with different versions

[14:02] <lizmat> which one should curli select ?

[14:02] *** jevin_ joined
[14:02] <jnthn> I thought we already said that a compunit declaration of version would be contaigous on types?

[14:02] <jnthn> We don't actually have a way to specify that yet, though.

[14:02] <lizmat> well, fwiw, I think auth / ver are really meta at this level

[14:03] *** pyrimidi_ left
[14:03] <lizmat> but I'm to stuffy in the head to argue this correctly atm

[14:03] *** jevin left
[14:03] <lizmat> if nine is fine with this, I'm fine with this

[14:03] <lizmat> but it smells wrong to me

[14:04] <jnthn> It's surely less wrong than just dropping :auth and :ver adverbs on the floor

[14:04] <lizmat> that I agree with

[14:04] <lizmat> :-)

[14:05] <lizmat> but we should keep in mind that auth / ver are a compunit attribute. not a package attribute

[14:06] <lizmat> afk&

[14:08] *** pippo_ left
[14:08] *** Sqirrel joined
[14:10] *** FreezerburnV joined
[14:11] <jnthn> lizmat: I suspect it'll want to be both, in so far as compunits are a bit "abstract" in terms of things you can actually talk about, so Test.^ver is what people will actually be able to write.

[14:11] <dalek> rakudo/nom: 3aca1a1 | jnthn++ | src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp:

[14:11] <dalek> rakudo/nom: Make .^ver and .^auth work out on roles too.

[14:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3aca1a1c30

[14:12] <dalek> roast: 02cde50 | jnthn++ | S14-roles/basic.t:

[14:12] <dalek> roast: Test .^ver and .^auth on roles.

[14:12] <dalek> roast: review: https://github.com/perl6/roast/commit/02cde509d1

[14:13] <jnthn> Phew, back to the xmas RTs to do fitting on my screen without scrolling.

[14:14] <jnthn> Though not if I add https://rt.perl.org/Ticket/Display.html?id=126576 :)

[14:16] <moritz> IMHO https://rt.perl.org/Ticket/Display.html?id=126816 deserves to be on the xmas list

[14:16] *** n0tjack joined
[14:16] <moritz> because it breaks R*

[14:18] <RabidGravy> jnthn++ # now I can fix whatever hack I made that provoked me to make that RT

[14:18] <abraxxa> i've encountered something weird

[14:18] <jnthn> moritz: I'd thought nine++ fixed that already?

[14:19] <jnthn> moritz: I can't actually provoke it to do that error locally

[14:19] <abraxxa> http://paste.scsys.co.uk/502796

[14:19] <jnthn> perl6-m -Ilib -e "require ::('Pod::To::Text')" # works fine

[14:19] <moritz> jnthn: no, he started diagnosing, didn't actually fix anything

[14:20] <timotimo> jnthn: do i have to rely on libuv to do file locking cross-platform or does C have something for that? (i expect: no, it does not)

[14:20] <abraxxa> the ; at the end of the 'selected ... causes this

[14:20] <moritz> jnthn: I don't know what exactly triggers the error, if the package being required needs to "use" another module or anything

[14:21] <jnthn> timotimo: Think libuv; see syncfile.c

[14:21] *** skids joined
[14:21] <abraxxa> is this a parser failure?

[14:21] *** n0tjack left
[14:22] <timotimo> will do

[14:22] <timotimo> because my line-based coverage log file gets garbled lines ... i'll try an in-process mutex first, though

[14:24] <timotimo> http://t.h8.lv/great_coverage_report.html - we have a thing here!

[14:25] <timotimo> the grey lines are taken from a complete dump of all annotated lines, so we can see what pieces of code don't get a line number associated with them by our Actions and such

[14:25] *** n0tjack joined
[14:25] <timotimo> maybe they ought to be a bit less dark

[14:26] <timotimo> it looks kind of like no line that starts with "my" gets a line number annotation, for example

[14:26] <jnthn> timotimo: wow :)

[14:26] <jnthn> timotimo++

[14:26] <timotimo> it also seems like "last line of block" sometimes don't get an annotation, but sometimes they do

[14:26] *** cdg joined
[14:27] *** ZoffixW joined
[14:27] <ZoffixW> abraxxa, the ";" there is an error

[14:27] <ZoffixW> ab5tract, look on the following line, you're closing ); there

[14:27] <ZoffixW> err

[14:27] <abraxxa> ZoffixW: I know! but why does it not fail at compile time?

[14:27] <ZoffixW> sorry :)

[14:28] <nine> moritz: https://rt.perl.org/Public/Bug/Display.html?id=126816 should be fixed by commit 4391c9eeda3c4ba2a3a513e2b0bb3cce78434061

[14:29] <nine> Fixed it by removing the reason for doing the find_symbol call in the first place

[14:29] <abraxxa> ZoffixW: shouldn't that be a compile time error?

[14:29] <ZoffixW> abraxxa, weird. This doesn't fail at all. Just says the test doesn't pass: http://fpaste.scsys.co.uk/paste

[14:30] <nine> timotimo: output is just not thread safe. If multiple threads write to the same handle, they have to coordinate.

[14:30] *** n0tjack left
[14:30] <abraxxa> ZoffixW: wrong url

[14:30] <ZoffixW> abraxxa, http://fpaste.scsys.co.uk/502800

[14:30] <abraxxa> m: use Test; is-deeply("foo","foo","selected data matches what was written";);

[14:30] <camelia> rakudo-moar 9e53fa: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/O2ymTAqH2g line 1␤# expected: $()␤#      got: $("foo", "foo", "selected data matches what was written")␤»

[14:30] <jnthn> smls: spectesting a fix for https://rt.perl.org/Ticket/Display.html?id=126576

[14:31] <smls> nice

[14:31] <ZoffixW> m: use Test; is-deeply($(),$(),"selected data matches what was written";);

[14:31] <camelia> rakudo-moar 9e53fa: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/JAcupxRecZ:1␤Use of Nil in string context  in block <unit> at /tmp/JAcupxRecZ:1␤not ok 1 - ␤␤# Failed test at /tmp/JAcupxRecZ line 1␤# expected: $()␤#      got: $("", "", "selected data matc…»

[14:31] <ZoffixW> m: use Test; is-deeply(Nil,Nil,"selected data matches what was written";);

[14:31] <camelia> rakudo-moar 9e53fa: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/9M_D1UBYF3 line 1␤# expected: $()␤#      got: $(Nil, Nil, "selected data matches what was written")␤»

[14:32] <ZoffixW> m: use Test; is-deeply (Nil. Nil, "selected data matches what was written";;;;;;;;;;;;;;)

[14:32] <camelia> rakudo-moar 9e53fa: OUTPUT«Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Non-QAST…»

[14:33] <ZoffixW> m: sub foo ($, $, $) {}; foo('a', 'b', 'c';;;;;;;;;;;;;;;;:)

[14:33] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/q7Wrl0QCI7␤Unable to parse expression in argument list; couldn't find final ')' ␤at /tmp/q7Wrl0QCI7:1␤------> 3) {}; foo('a', 'b', 'c';;;;;;;;;;;;;;;;:7⏏5)␤    expecting any of:␤        colon pa…»

[14:33] <ZoffixW> weird

[14:35] * jnthn tries to work out what on earth https://rt.perl.org/Ticket/Display.html?id=112666 is about

[14:35] <ZoffixW> m: multi foo ($, $, $) {}; foo('a', 'b', 'c';)

[14:35] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot call foo(List, List); none of these signatures match:␤    ($,,)␤  in block <unit> at /tmp/8QUI8RAhot:1␤␤»

[14:35] *** cdg left
[14:36] <ZoffixW> m: multi foo ($, $, $) {}; multi foo ($, $) { say "zomg!"; }; foo('a', 'b', 'c';); say "ehehe"

[14:36] <camelia> rakudo-moar 9e53fa: OUTPUT«zomg!␤ehehe␤»

[14:36] <ZoffixW> Look ma! I broke Perl 6!

[14:37] <moritz> what does that ; inside the argument list do?

[14:37] <moritz> m: multi foo ($, $, $) {}; multi foo ($, $) { say "zomg!"; }; foo('a', 'b', 'c'); say "ehehe"

[14:37] <camelia> rakudo-moar 9e53fa: OUTPUT«ehehe␤»

[14:37] <jnthn> I have no idea...

[14:37] <moritz> ah

[14:37] <moritz> it creates a multi-dimensional list

[14:37] *** lichtkind joined
[14:37] <moritz> m: say ('a', 'b', 'c';)

[14:37] <camelia> rakudo-moar 9e53fa: OUTPUT«(a b c)␤»

[14:37] <moritz> m: say ('a', 'b', 'c';).perl

[14:37] <camelia> rakudo-moar 9e53fa: OUTPUT«("a", "b", "c")␤»

[14:37] <moritz> m: say ('a', 'b', 'c';).elems

[14:37] <camelia> rakudo-moar 9e53fa: OUTPUT«3␤»

[14:37] <jnthn> m: sub foo() { my @a; BEGIN { @a = 1,2,3 }; say @a; }; foo(); foo();

[14:37] <camelia> rakudo-moar 9e53fa: OUTPUT«[1 2 3]␤[1 2 3]␤»

[14:38] <ZoffixW> Ah

[14:38] <moritz> maybe only inside a signature?

[14:38] * timotimo sprinkles Actions.nqp with :node without thinking too much

[14:38] <moritz> m: sub f(|c) { say c.perl }; f('a', 'b', 'c';)

[14:38] <camelia> rakudo-moar 9e53fa: OUTPUT«\(("a", "b", "c"), ())␤»

[14:38] <moritz> thereyago

[14:39] *** CIAvash left
[14:39] <FreezerburnV> Mornin’ everyone

[14:39] <abraxxa> moritz: it's a typo that lead to this weird test fail

[14:39] <moritz> m: sub f(|c) { say c.perl }; f('a',)

[14:39] <camelia> rakudo-moar 9e53fa: OUTPUT«\("a")␤»

[14:39] <ZoffixW> m: multi foo ($, $, $) { say "lolmg"}; multi foo ($, $) { say "zomg!"; }; foo('a'; 'b', 'c';); say "ehehe"

[14:39] <camelia> rakudo-moar 9e53fa: OUTPUT«lolmg␤ehehe␤»

[14:39] <moritz> m: sub f(|c) { say c.perl }; f('a')

[14:39] <camelia> rakudo-moar 9e53fa: OUTPUT«\("a")␤»

[14:39] <abraxxa> but i've neither compiled it with -Dmultidimensional nor called use multidimensional; :)

[14:39] <moritz> one could argue that trailing comma vs. trailing semicolon in an argument list is inconsistent

[14:40] <moritz> because trailing comma doesn't magically append another element, but trailing semicolon does

[14:40] <ZoffixW> m: multi foo ($a, $b, $c) { say $a, $b, $c};  foo('a'; 'b', 'c';); say "ehehe"

[14:40] <camelia> rakudo-moar 9e53fa: OUTPUT«(a)(b c)()␤ehehe␤»

[14:41] <ZoffixW> m: multi foo ($a, $b, $c) { say $a.WHAT, $b.WHAT, $c.WHAT};  foo('a'; 'b', 'c';); say "ehehe"

[14:41] <camelia> rakudo-moar 9e53fa: OUTPUT«(List)(List)(List)␤ehehe␤»

[14:41] <jnthn> Oh...I think the last post in https://rt.perl.org/Ticket/Display.html?id=112666 is actually saying "look, it's fixed" :)

[14:43] <ZoffixW> Recalling on how many times I wrote abraxxa's typo, this "feature" would definitelly screw me over frequently enough :/

[14:43] <dalek> rakudo/nom: 572dcf0 | jnthn++ | src/core/List.pm:

[14:43] <dalek> rakudo/nom: Fix loss of structure in xx.

[14:43] <dalek> rakudo/nom: 

[14:43] <dalek> rakudo/nom: Plus another inconsistency between xx 2 and xx * with regard to

[14:43] <dalek> rakudo/nom: Seq.

[14:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/572dcf0680

[14:43] <timotimo> nine: all right, will do that

[14:43] <moritz> ZoffixW: maybe we really want an error/warning on a single trailing ; in argument list

[14:44] <dalek> roast: b111614 | jnthn++ | S03-operators/repeat.t:

[14:44] <dalek> roast: Tests for RT #126576.

[14:44] <dalek> roast: review: https://github.com/perl6/roast/commit/b111614c10

[14:44] <moritz> ZoffixW: I've done the same mistake in p5 a bazillion times

[14:44] <ZoffixW> Probably. I've no idea about multi-dimentional arrays, so I've no idea if there's some sort of a usecase where trailing ; is useful

[14:47] <moritz> m: loop(my $i = 0; $i < 10; $i++) { }

[14:47] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5===␤Word 'loop' interpreted as 'loop()' function call; please use whitespace around the parens␤at /tmp/MRItpSmRFN:1␤------> 3loop7⏏5(my $i = 0; $i < 10; $i++) { }␤Unexpected block in infix position (two terms in a row)␤at /tm…»

[14:47] <moritz> m: loop (my $i = 0; $i < 10; $i++) { }

[14:47] <camelia> rakudo-moar 9e53fa: OUTPUT«WARNINGS for /tmp/zRDRUTb9UK:␤Useless use of $i in sink context (line 1)␤»

[14:47] <moritz> bogus warning here

[14:47] *** Begi joined
[14:48] *** pippo joined
[14:49] *** ZoffixW left
[14:52] <Woodi> moritz: bugus becouse iterations are unnided or loop efect is null ?

[14:53] <moritz> m: loop(my $i = 0; $i < 10; $i++) { print $i }

[14:53] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5===␤Word 'loop' interpreted as 'loop()' function call; please use whitespace around the parens␤at /tmp/fHO_RI2v7U:1␤------> 3loop7⏏5(my $i = 0; $i < 10; $i++) { print $i }␤Unexpected block in infix position (two terms in a row)…»

[14:53] <moritz> m: loop (my $i = 0; $i < 10; $i++) { print $i }

[14:53] <camelia> rakudo-moar 9e53fa: OUTPUT«WARNINGS for /tmp/m91D8uLB3X:␤Useless use of $i in sink context (line 1)␤0123456789»

[14:54] <moritz> Woodi: loop body is irrelevant

[14:55] <Woodi> m: my $j; loop (my $i = 0; $i<10; $i++) { $j = $i }

[14:55] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_1buJgMW0A␤Whitespace required before < operator␤at /tmp/_1buJgMW0A:1␤------> 3oop (my $i = 0; $i<10; $i++) { $j = $i }7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[14:55] <Woodi> m: my $j; loop (my $i = 0; $i<10; $i++) { $j = $i };

[14:55] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/nmBKAUhv0D␤Whitespace required before < operator␤at /tmp/nmBKAUhv0D:1␤------> 3op (my $i = 0; $i<10; $i++) { $j = $i };7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[14:55] <Woodi> m: my $j; loop (my $i = 0; $i<10; $i++) { $j = $i; }

[14:55] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KFRsGFutnP␤Whitespace required before < operator␤at /tmp/KFRsGFutnP:1␤------> 3op (my $i = 0; $i<10; $i++) { $j = $i; }7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[14:55] <Woodi> what ?

[14:56] <moritz> Woodi: read the error message

[14:56] <moritz> "Whitespace required before < operator"

[14:57] <Woodi> right, thinked < is some brace...

[14:57] <Woodi> m: my $j; loop (my $i = 0; $i < 10; $i++) { $j = $i; }

[14:57] <camelia> rakudo-moar 9e53fa: OUTPUT«WARNINGS for /tmp/xBZSryaTTZ:␤Useless use of $i in sink context (line 1)␤»

[14:57] <Woodi> and green was green up to red END...

[14:57] <abraxxa> can we do something about that typo/feature problem?

[14:57] *** rurban left
[14:57] <Woodi> over-eager usefulnes here ?

[14:58] <abraxxa> maybe a warning if a multidimensional array is created where the last element is 'empty'?

[14:58] *** sammers left
[14:58] <abraxxa> how can I make a method call work in ""?

[14:59] <RabidGravy> I think TimToady knows about that consequence of what he is doing (from what I backlogged earlier) and is planning on doing something about it later if no-one else does

[14:59] <abraxxa> like say "$col<dty> $col<valuep> @row.tail"; to get the result of the tail call?

[14:59] *** loren joined
[14:59] <loren> Evening, Perl 6..

[14:59] *** zakharyas left
[14:59] <RabidGravy> abraxxa, " { @row.tail }"

[14:59] <abraxxa> from my simple user perspective i'd say using the statement end char (;) for something else too isn't a good idea

[15:00] <abraxxa> RabidGravy: thanks!

[15:00] <abraxxa> I knew something exists but couldn't find it in the docs

[15:00] *** roguelazer left
[15:00] <loren> m: grammar XX { rule TOP { ^<item> }; token item { (.*) }; }; say XX.parse("1+"); ## What's wrong with these code ??

[15:00] <camelia> rakudo-moar 9e53fa: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in regex item at /tmp/qID5GCdtwQ:1␤  in regex TOP at /tmp/qID5GCdtwQ:1␤  in block <unit> at /tmp/qID5GCdtwQ:1␤␤»

[15:00] <RabidGravy> I thought it was mentioned in the quotey thing document

[15:00] <abraxxa> Cannot call tail(Array: ); none of these signatures match:

[15:00] <abraxxa>     (Any:D $: Int:D $n, *%_)

[15:00] *** roguelazer joined
[15:02] *** zakharyas joined
[15:02] <RabidGravy> .tail(1) then

[15:02] <RabidGravy> or whatever number you want

[15:02] <abraxxa> Defaults to the last element seen if no NUMBER specified

[15:02] <abraxxa> https://doc.perl6.org/routine/tail#class_List

[15:02] <lucasb> abraxxa: is your rakudo old? the default argument for .tail was added later

[15:02] <abraxxa> 2015.11

[15:03] *** kaare_ joined
[15:03] *** pippo_ joined
[15:03] <RabidGravy> abraxxa, is it possble that your @row is jjust a type object?

[15:03] <abraxxa> my @row;

[15:04] <RabidGravy> m: my @row := Array; say @row.tail

[15:04] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot call tail(Array: ); none of these signatures match:␤    (Any:D $: Cool $n = { ... }, *%_)␤  in block <unit> at /tmp/OyqgGjJeq8:1␤␤»

[15:04] <abraxxa> this wannabe typing will drive people nuts...

[15:05] <abraxxa> m: my row; say @row.

[15:05] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/OtCLt9micQ␤Malformed my (did you mean to declare a sigilless \row or $row?)␤at /tmp/OtCLt9micQ:1␤------> 3my row7⏏5; say @row.␤»

[15:05] <moritz> abraxxa: we've had this topic before today

[15:05] <abraxxa> m: my @row; @row.push(4.85); say @row.tail;

[15:05] <camelia> rakudo-moar 9e53fa: OUTPUT«(4.85)␤»

[15:05] *** pippo left
[15:06] *** jme` joined
[15:06] <abraxxa> m: my @row; @row.push(4.85); say " { @row.tail } ";

[15:06] <camelia> rakudo-moar 9e53fa: OUTPUT« 4.85 ␤»

[15:06] <loren> *_* Anyone found that problem remind me .. /me bulabulabula... 

[15:06] <abraxxa> moritz: what exactly as we've talked about so much today

[15:07] <RabidGravy> abraxxa, I think somehow some of your @arrays is getting made into an Array type object

[15:07] <RabidGravy> a lot of what you are seeing is consistent with that

[15:08] <RabidGravy> I'd start by testing for .defined all the way up the call chain to see where it is coming from

[15:08] <moritz> abraxxa: that @-sigiled variables allow the variable to become a type object (and that I think this might be a design mistake, or simply not intentional)

[15:09] <abraxxa> RabidGravy: it fits on one screen and I'm pushing values onto the array without problems

[15:10] <abraxxa> does it help to initialize the array with my Array @row; or my Array @row = ();?

[15:10] <RabidGravy> it could be do a   sub foo(Array:D $row)

[15:10] <RabidGravy> Array @row is an array of array

[15:11] *** sammers joined
[15:14] <timotimo> should i try to make a @ or % sigiled parameter have a :D by default again?

[15:15] *** pecastro left
[15:15] <[Coke]> generic rant: referring to gists in RTs is problematic.

[15:16] <timotimo> i don't understand why so many lines with nqp::foo in them aren't getting line number information; term:sym<nqp::op> puts a :node in there :\

[15:17] <abraxxa> RabidGravy: there is no method call between the var declaration and the say

[15:17] <timotimo> hum. it's even in the ast output of the optimizer

[15:18] *** pmurias left
[15:18] <abraxxa> m: my @row; @row.push(4.85); say " { @row.tail(1).^name } ";

[15:18] <camelia> rakudo-moar 9e53fa: OUTPUT« Seq ␤»

[15:18] <FROGGS> jnthn: btw, I'm with lizmat about .^auth and .^ver

[15:18] <masak> loren: I think it's the name "item", which is sort of taken for other things in Perl 6.

[15:18] <abraxxa> that fails here as well

[15:19] <FROGGS> jnthn: it is okay if you query the distribution via its packages, but it feels odd

[15:19] <masak> loren: try renaming "item" to something safe, like "foo"

[15:19] <FROGGS> bbl &

[15:19] *** FROGGS left
[15:19] <abraxxa> m: my Array @row; @row.push(Str);

[15:19] <camelia> rakudo-moar 9e53fa: OUTPUT«Type check failed in assignment to @row; expected Array but got Str␤  in block <unit> at /tmp/Nc1ph8pk6Y:1␤␤»

[15:19] <abraxxa> i don't get it!

[15:20] <abraxxa> m: my @row; my Array @row2; say @row.^name; say @row2.^name;

[15:20] <camelia> rakudo-moar 9e53fa: OUTPUT«Array␤Array[Array]␤»

[15:20] <abraxxa> RabidGravy: ah, that was at me before

[15:20] <nine> abraxxa: my @row already declares an @row to be an array. my Int @row; declares an Array containing Ints. my Array @row; declares an array containing Arrays

[15:20] <abraxxa> nine: yeah, makes sense, somehow

[15:21] <abraxxa> though I'd prefer Array[Int] like Pointer[Int] is defined

[15:21] <jnthn> Way to think of it: sigils already imply a type

[15:21] <RabidGravy> you can, just not with a @ siggiled variable

[15:22] <abraxxa> omg, tail returns a Seq instead of the last element of the Array

[15:22] <abraxxa> m: my Array $foo; say $foo.^name;

[15:22] <camelia> rakudo-moar 9e53fa: OUTPUT«Array␤»

[15:22] <abraxxa> looks like sigils are useless then

[15:22] <RabidGravy> m: my Array[Int] $a; $a.push(10); say $a

[15:22] <camelia> rakudo-moar 9e53fa: OUTPUT«[10]␤»

[15:23] <abraxxa> because you can't infer a type from it, at least not from scalars

[15:23] *** n0tjack joined
[15:24] <timotimo> well, you can store anything you like in a scalar

[15:24] <abraxxa> the tail docs are wrong, how can I fix them?

[15:24] <timotimo> at the bottom is a link to the git repository

[15:24] *** sammers left
[15:24] <abraxxa> timotimo: i'd understand that i can store an arrayREF in it but not an array

[15:24] <abraxxa> timotimo: thanks. github fork + PR?

[15:25] <timotimo> yeah, that's how we usually do it :)

[15:25] <timotimo> we don't have a difference between arrayREF and array in perl6

[15:25] <timotimo> "everything's a reference", so to say

[15:26] <RabidGravy> the @ just implies default positional semantics without having to initialise it

[15:26] <RabidGravy> as % does Associative

[15:26] <abraxxa> what I wondered before is that $arrayref[2] works and $arrayref.[2] too

[15:26] *** molaf joined
[15:26] <abraxxa> although only the later matches the docs

[15:27] <timotimo> that's weird. they're supposed to be the same thing

[15:27] <jnthn> $a[0] and $a.[0] compile into the very same thing

[15:27] <abraxxa> is the wording correct: Returns a Seq containing the last NUMBER items of the list.?

[15:28] <timotimo> sounds good to me

[15:28] <abraxxa> yes, both work but I don't know why the former does

[15:28] *** n0tjack left
[15:28] <timotimo> it's weird to have NUMBER in allcaps

[15:28] <abraxxa> at least I didn't find it documented

[15:28] <timotimo> rather than something like C<number> or C<$number>

[15:28] <abraxxa> timotimo: that's how it is currently in the docs

[15:28] <loren> masak, Ok.

[15:28] <abraxxa> because LIST.tail(NUMBER)

[15:28] <timotimo> that's weird to me.

[15:28] <RabidGravy> the only place I have found the . necessary is with an attribute that contains a code object

[15:28] <abraxxa> how is a link defined in p6pod?

[15:28] <RabidGravy> ie.  $foo.code() is not the same as $foo.code.()

[15:28] <abraxxa> L<Seq> ?

[15:28] <timotimo> right, because attribute access is calling a method

[15:29] <RabidGravy> yes

[15:29] <abraxxa> ok

[15:29] <abraxxa> it also never returns an empty list, but an empty Seq, right?

[15:30] <jnthn> https://rt.perl.org/Ticket/Display.html?id=112666 did actually turn out to reveal an icky but that I think I've now squished

[15:30] <abraxxa> i'm also eliminating the 'seen'

[15:31] *** lucasb left
[15:32] <timotimo> i think it does return a Seq

[15:32] <loren> masak, U are right. I found that code on Rosetta code . I think we need more human error message, ^_^ ... 

[15:32] <timotimo> perhaps it returns an empty list?

[15:32] <abraxxa> PR sent

[15:33] <abraxxa> now I want a .last even more

[15:33] <abraxxa> back to @row[*-1]

[15:34] <dalek> doc: 33f3ed7 | (Alexander Hartmaier)++ | doc/Type/List.pod:

[15:34] <dalek> doc: fix tail docs

[15:34] <dalek> doc: 

[15:34] <dalek> doc: clarify that tail always returns a Seq as its signature already correctly shows

[15:34] <dalek> doc: review: https://github.com/perl6/doc/commit/33f3ed7dc7

[15:34] <dalek> doc: 1bf67d6 | (Zoffix Znet)++ | doc/Type/List.pod:

[15:34] <dalek> doc: Merge pull request #245 from abraxxa/master

[15:34] <dalek> doc: 

[15:34] <dalek> doc: fix tail docs

[15:34] <dalek> doc: review: https://github.com/perl6/doc/commit/1bf67d69eb

[15:34] <abraxxa> wow, awesome bot!

[15:35] * jnthn notes that .last and [*-1] are the exactly same number of chars :)

[15:36] *** sammers joined
[15:36] *** yakudza joined
[15:37] <abraxxa> jnthn: but .last is easier to type and read

[15:38] <abraxxa> something between code and tests transforms my Num's to Rat's

[15:39] <abraxxa> or is-deeply is f*** with me

[15:39] <jnthn> I dunno, pretty sure I can pattern-match [*-1] at least as fast as .last when reading :)

[15:40] *** virtualsue joined
[15:40] * abraxxa can't get his irc client, editor and shell onto a 24" screen so they don't overlap and are large enough

[15:41] *** n0tjack joined
[15:42] <geekosaur> this is why multiple screens

[15:42] <stmuk> or just screen(1)

[15:43] <moritz> screen(1), despite its name, can't magically create more screen real estate for multiple windows simultaneously

[15:43] <DrForr> Sure it can, just connect from another terminal :)

[15:44] <abraxxa> i have a GUI and I use it's advantages

[15:44] <stmuk> I think it's pretty magic

[15:44] <abraxxa> I can't stand screen with it myriads of key combinations you have to remember because I don't

[15:45] <DrForr> Which is why I use tmux :)

[15:45] <b2gills> abraxxa: use multi subs/methods: ｢multi sub example ( Int $e ){ $e.^name }; multi sub example ( Num(Real) $e ){ $e.^name }｣ (backlogging &)

[15:45] <abraxxa> DrForr: can you click on a tab with your mouse?

[15:46] <DrForr> Mouse? Why would you bother...

[15:47] *** n0tjack left
[15:48] *** yakudza left
[15:48] <nine> geekosaur: this is why 30" screen

[15:48] * loren go to sleep now ..

[15:48] <dalek> nqp: 4358ba8 | jnthn++ | src/core/NQPMu.nqp:

[15:48] <dalek> nqp: Support BUILDPLAN protocol extension.

[15:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4358ba8bfb

[15:49] *** jsimonet joined
[15:49] *** Begi left
[15:49] <loren> Night , Perl 6 , every one

[15:49] <RabidGravy> I've got a 17" screen and I get on all right

[15:49] *** loren left
[15:49] <abraxxa> how would I loop an arrayref?

[15:49] * diakopter 5.6"

[15:49] <abraxxa> diag ( .gist ~ ' ' ~ .^name ) for $arrayref.[$i].?;

[15:49] <dalek> rakudo/nom: cea3e99 | jnthn++ | / (3 files):

[15:49] <dalek> rakudo/nom: Avoid lazy allocation optimization on mixins.

[15:49] <dalek> rakudo/nom: 

[15:49] <dalek> rakudo/nom: We may be mixing in to a meta-object, such as a routine, which may be

[15:49] <dalek> rakudo/nom: cloned; the delayed allocation then can cause very weird behaviors

[15:49] <dalek> rakudo/nom: where simply accessing something make stuff magically work. Now it'll

[15:49] <dalek> rakudo/nom: not-so-magically work all the time.

[15:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cea3e99d83

[15:49] <geekosaur> actually I find that harder. I can focus on one monitor around 24", 30" is difficult unless I move far enough away that I'd have to use poster type to read it >.>

[15:49] <diakopter> abraxxa: what's an arrayref

[15:49] <nine> m: my $a = [1, 2, 3]; .say for $a;

[15:49] <camelia> rakudo-moar 9e53fa: OUTPUT«[1 2 3]␤»

[15:50] <nine> m: my $a = [1, 2, 3]; .say for $a.list;

[15:50] <camelia> rakudo-moar 9e53fa: OUTPUT«1␤2␤3␤»

[15:50] <nine> abraxxa: ^^^

[15:50] <diakopter> I see what you did there, but the array isn't any more of a ref than a list

[15:51] <dalek> roast: d1a2af4 | jnthn++ | S14-traits/routines.t:

[15:51] <dalek> roast: Test for RT #112666.

[15:51] <dalek> roast: review: https://github.com/perl6/roast/commit/d1a2af4895

[15:51] <nine> jnthn: is that the fix for the "right kinda thing"?

[15:52] <abraxxa> seems that's because they cloned the Perl 5 DBI interface

[15:52] <abraxxa> fetchrow returns @row, so an array, not an arrayref

[15:52] <diakopter> okay, but what's an arrayref

[15:52] <jnthn> nine: Um, what? :)

[15:52] <abraxxa> method fetchall_arrayref { [ self.fetchall-array.eager ] }

[15:53] *** yakudza joined
[15:53] <jnthn> nine: The patch I pushed is the fix for the thing in the test I pushed

[15:53] <jnthn> nine: Oh, the ticket title

[15:53] <jnthn> nine: Yes, it's that ticket.

[15:53] <nine> jnthn: I meant RT #112666 with it's curious title

[15:53] <jnthn> Took me half an hour to figure out what the ticket even was talking about...

[15:53] <jnthn> And get to something I could understand wanted fixing.

[15:54] <nine> I've been wondering that for months :)

[15:54] <abraxxa> diakopter: the docs mention it https://doc.perl6.org/language/5to6-nutshell#Reference_creation

[15:54] <diakopter> yeesh

[15:55] <abraxxa> $arrayref.[$i] returns an Array an I want to loop over its elements

[15:55] <jnthn> nine: I'm happy to got to the bottom of it at last :)

[15:55] <abraxxa> diag ( .gist ~ ' ' ~ .^name ) for $arrayref.[$i]; outputs # [(Str) (Str) 1 (Num) (Num)] Array

[15:55] <nine> jnthn: all it takes is the right kinda fix ;)

[15:56] *** Upasaka left
[15:56] <diakopter> abraxxa: nine answered your question (use .list), but it's still a misnomer to call it an arrayref

[15:56] <timotimo> a "kinda fix"? :P

[15:56] <abraxxa> fetchall_arrayref does return an arrayref as far as I see it because it uses []

[15:56] *** Upasaka joined
[15:57] <jnthn> [...] isn't even an itemized array in Perl 6.

[15:57] <jnthn> (Yes, it used to be, pre-GLR)

[15:57] <nine> abraxxa: please forget the distinction you know from Perl 5. Perl 6 has arrays and arrays are objects and all objects are passed by reference.

[15:57] <RabidGravy> m: my Int @a = [1,2,3]; say @a.join('*');

[15:57] <camelia> rakudo-moar 9e53fa: OUTPUT«1*2*3␤»

[15:57] <abraxxa> nine: ok, but then the docs need a great overhaul

[15:57] <RabidGravy> it doesn't make any difference

[15:57] <diakopter> the 5to6-huttsnell is older than I am

[15:58] <abraxxa> why does for $arrayref.[$i] return the Array instead of looping over its elements?

[15:58] <jnthn> m: my Int @a = $[1,2,3]; say @a.join('*'); # does, however

[15:58] <camelia> rakudo-moar 9e53fa: OUTPUT«Type check failed in assignment to @a; expected Int but got Array␤  in block <unit> at /tmp/A6y5JzaMtB:1␤␤»

[15:59] <hoelzro> good morning #perl6!

[15:59] <d^_^b> morning!

[15:59] <jnthn> abraxxa: An Array is a bunch of items.

[15:59] *** ZoffixW joined
[15:59] <hoelzro> o/ d^_^b 

[16:00] <ZoffixW> Found a bug:

[16:00] <ZoffixW> camelia, https://gist.github.com/zoffixznet/64c946cd529c8b0d1fe8

[16:00] <ZoffixW> m: https://gist.github.com/zoffixznet/64c946cd529c8b0d1fe8

[16:00] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Aknl7ELCw3␤Missing « or »␤at /tmp/Aknl7ELCw3:3␤------> 3    .flat».7⏏5Str;␤»

[16:00] <diakopter> m:

[16:00] <ZoffixW> m: my @a = ^10; say @a.sort.flat».Str;

[16:00] <camelia> rakudo-moar 9e53fa: OUTPUT«(0 1 2 3 4 5 6 7 8 9)␤»

[16:00] <ZoffixW> Splitting it onto lines causes the bug

[16:02] <diakopter> ZoffixW: this isn't C#

[16:02] <diakopter> you'd need an "unsqpce"

[16:02] <diakopter> "unspace"

[16:03] <nine> diakopter: actually we don't need that anymore in most cases.

[16:03] <diakopter> hm, oh

[16:03] *** khw joined
[16:03] <nine> But I guess the » makes it ambiuous here

[16:03] <nine> ambiguous even

[16:04] <timotimo> also, there's a really strange bug going on where after sort a space before the method call will cause no hllize to happen or something like that

[16:05] <FreezerburnV> How do I create an int32 for a NativeCall function? (or, more generally, how do I interact with the various native types and the Perl6 types correctly? such that if an int8 is returned, how do I package that up nicely for the rest of the code? and vice versa? should this be happening automatically?)

[16:05] <hoelzro> sub run(*@args ($, *@)) { ... } # the ($, *@) constraint on @args, what's that called?

[16:05] <hoelzro> a subsignature? a nested signature?

[16:05] <hoelzro> I can't seem to find a consistent name in the synopses

[16:06] <jnthn> FreezerburnV: Boxing/unboxing with Int will happen automatically

[16:06] <jnthn> FreezerburnV: Where Int is the non-native thing.

[16:08] <ZoffixW> m: https://gist.github.com/zoffixznet/018fa503db5bf628bfbb

[16:08] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/x7ngPsQetg␤Missing « or »␤at /tmp/x7ngPsQetg:3␤------> 3    .flat».7⏏5Str;␤»

[16:08] <ZoffixW> Same with unspace

[16:08] <FreezerburnV> jnthn: Gotcha. I see what I was doing wrong now, woops. Thanks!

[16:08] *** pecastro joined
[16:09] <ZoffixW> And I'm guessing qw{} simply doesn't support () parens or is it a bug?

[16:09] <ZoffixW> m: say qw(class test)

[16:09] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/5zMrUMIa_T␤Unable to parse class definition␤at /tmp/5zMrUMIa_T:1␤------> 3say qw(class test7⏏5)␤    expecting any of:␤        generic role␤»

[16:09] <jnthn> ZoffixW: None of the quoters do

[16:10] <ZoffixW> Gotcha

[16:10] <jnthn> It's unambiguously either a coercion type the the thing before it is a type, or a sub call otherwise.

[16:10] <jnthn> s/the the/if the/

[16:10] <ZoffixW> And this is the .sort bug I think:

[16:10] <ZoffixW> m: say ^10 .sort.flat.Str;

[16:10] <camelia> rakudo-moar 9e53fa: OUTPUT«Cannot find method 'flat': no method cache and no .^find_method␤  in block <unit> at /tmp/UdYHDOprMG:1␤␤»

[16:10] <jnthn> Missing hllize in the code-gen maybe

[16:12] <stmuk> I'm not seeing t/spec/S32-io/IO-Socket-Async-UDP.t pass on either linux or OS X

[16:12] <jnthn> stmuk: Works fine on Windows. :)

[16:12] <[Coke]> I think it's passing on windows only.

[16:13] <[Coke]> Which makes me think we need to mark it experimental for v6.c

[16:13] <jnthn> Or, you know, one of the dozens of you not primarily using Windows could do some debugging.

[16:13] *** vividsnow left
[16:14] <[Coke]> Sure. there's a lot of balls in the air to resolve before, theoretically, thursday.

[16:14] <stmuk> Unhandled exception in code scheduled on thread 3

[16:14] <stmuk> Unexplained error

[16:14] <stmuk> the latter looked particularly scary!

[16:14] <jnthn> Unexplaind error. Thanks, libuv :P

[16:14] <diakopter> [Coke]: I thought the 18th was the ambirtious goal to realize the realistic goal of rthe 25th

[16:14] <stmuk> it couldnt be nl related I suppose? 

[16:15] <jnthn> stmuk: I don't think so, there's no newlines involved in the patch

[16:15] <jnthn> uh, in the test

[16:15] <jnthn> Could somebody golf the test down a bit?

[16:15] <jnthn> To see what the minimum exploding program is?

[16:16] <stmuk> ok

[16:16] * nine really hopes we have till the 25th

[16:17] <jnthn> At least it explodes on Linux to, which I do have easy access to, unlike OSX.

[16:17] <jnthn> *too

[16:17] <abraxxa> jnthn: i thought that's a List ;)

[16:18] <lichtkind> jnthn : its fai to say that you still see plenty room for optimization so that  rakudo can par up with perl in foreseeable future?

[16:18] * TimToady blears into existence, and stops partway...

[16:18] <hoelzro> it's not a MoarVM falling behind issue, is it?

[16:18] <nine> lichtkind: yes

[16:18] <TimToady> ah well, 6 hours of sleep is twice as good as the 3 I got the night before...

[16:18] <lichtkind> thanks

[16:19] <[Coke]> diakopter: there shouldn't be any new code after the 18th, IMO.

[16:19] <jnthn> hoelzro: ooh, such that updating to latest libuv would magically fix it? :)

[16:19] <[Coke]> (even now is problematic for testing, etc.)

[16:20] * TimToady thanks everyone for (not) volunteering to be useless-use guinea pigs for him

[16:20] <hoelzro> jnthn: I mean I wonder if $(cat nqp/tools/build/MOAR_REVISION)..master has the fix

[16:20] *** n0tjack joined
[16:20] <jnthn> [Coke]: How is "new code" defined? I suspect we'll still have some fixes beyond then.

[16:20] <jnthn> hoelzro: For the UDP thing? Not unless somebody sneaked one in without me looking :)

[16:21] <jnthn> hoelzro: Which git log suggests not :)

[16:21] <jnthn> [Coke]: I deliberately picked off the things I'd count as "missing feature" first, though. Nothing left in https://rt.perl.org/Ticket/Display.html?id=123766 counts

[16:22] <hoelzro> jnthn: alright, just double checking =)

[16:22] <jnthn> [Coke]: Well, PRE/POST does, but that's going to be explicilty deferred.

[16:22] *** balazs joined
[16:22] * stmuk tries to golf linux udp

[16:22] <jnthn> stmuk: Thanks.

[16:26] <nine> hoelzro: can you still reproduce https://rt.perl.org/Ticket/Display.html?id=123272?

[16:27] <hoelzro> nine: I'll give it a try in a few

[16:27] <jnthn> m: say Version.new('6b')

[16:27] <camelia> rakudo-moar 9e53fa: OUTPUT«v6.b␤»

[16:27] <jnthn> m: say Version.new('6.b')

[16:27] <camelia> rakudo-moar 9e53fa: OUTPUT«v6.b␤»

[16:28] <ZoffixW> m: say Version.new('6*\')

[16:28] <camelia> rakudo-moar 9e53fa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MO3PwLc4S2␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/MO3PwLc4S2:1␤------> 3say Version.new('6*\')7⏏5<EOL>␤    expecting any of:␤        argument list␤      …»

[16:28] <ZoffixW> m: say Version.new('6*')

[16:28] <camelia> rakudo-moar 9e53fa: OUTPUT«v6.*␤»

[16:29] <FreezerburnV> How do I compile a module down to the *.moarvm version?

[16:30] *** pmurias joined
[16:30] <abraxxa> m: my @foo = (['foo', 'bar'],['baz', 3.4]); say .gist for @foo[0];

[16:30] <camelia> rakudo-moar 9e53fa: OUTPUT«[foo bar]␤»

[16:30] <lichtkind> the rakudo NCI works the same under jvm?

[16:31] <jnthn> lichtkind: Yes, modulo bugs :)

[16:32] <lichtkind> great :)

[16:33] <lichtkind> im just dreaming about rakudo as a platform if it runds on multi vm +  perl5 aka cpan +the perl 6 itself which can morph into any language

[16:34] <abraxxa> m: say 4.85.^name; say 4.85e0.^name;

[16:34] <camelia> rakudo-moar 9e53fa: OUTPUT«Rat␤Num␤»

[16:34] <abraxxa> i thought the advise yesterday was to use Num for floating point vars

[16:35] <abraxxa> and now i'm searching since hours why is-deeply fails to match just to find out its the other way round

[16:35] <jnthn> Num is floating point

[16:35] *** ZoffixW left
[16:35] <abraxxa> jnthn: Rat too

[16:35] <abraxxa> m: say 4.85.gist; say 4.85e0.gist;

[16:35] <camelia> rakudo-moar 9e53fa: OUTPUT«4.85␤4.85␤»

[16:36] <[Coke]> jnthn: (new) eh, it's all fuzzy. TimToady's changes are causing me the most concern at the moment.

[16:36] <abraxxa> http://paste.scsys.co.uk/502809

[16:36] <[Coke]> But it sounded like that might get cleared up today.

[16:36] <abraxxa> jnthn: ^^

[16:37] <jnthn> abraxxa: You seem to be confusing literals vs. representation vs. gist

[16:37] <jnthn> 4.85 as a literal produces a Rat

[16:37] <jnthn> 4.85e0 as a literal produces a Num

[16:37] <jnthn> Rat is represented as a rational

[16:37] <abraxxa> yes, i just swapped these too

[16:37] <jnthn> Num is represented as floating point

[16:38] <jnthn> Both .gist to 4.85 because that's what humans tend to like to see

[16:38] <jnthn> m: say 4.85.perl; say 4.85e0.perl;

[16:38] <camelia> rakudo-moar 9e53fa: OUTPUT«4.85␤4.85e0␤»

[16:38] <abraxxa> i thought Num is the 'regular' one which is generated when your use a 'plain' floating point value like 4.85

[16:38] <diakopter> [Coke]: I thought the gsr/gsrr just caused benign warnings about benign things

[16:38] <jnthn> abraxxa: Ah, then I guess your confusion is that 4.85 in Perl 6 does not mean floating point.

[16:38] <abraxxa> WHAT?

[16:39] <jnthn> It means a rational.

[16:39] <abraxxa> nope, translating to German doesn't explain this either

[16:39] <abraxxa> what is a rational?

[16:39] <jnthn> Something represented was a numerator and a denominator

[16:39] <jnthn> m: say 4.85.nude

[16:39] <camelia> rakudo-moar 9e53fa: OUTPUT«(97 20)␤»

[16:40] <jnthn> That is, precisely

[16:40] <abraxxa> as I said before that's an implementation detail a user coming from a untyped language like Perl 5 doesn't care about

[16:40] <abraxxa> and lets be honest most Perl 6 beginners will be Perl 5 users

[16:40] <[Coke]> diakopter: it's causing spectest failures.

[16:40] <abraxxa> i write my $foo = 4.85; and don't care

[16:41] *** rurban joined
[16:41] <TimToady> do you care if .1 + .2 == .3?

[16:41] <abraxxa> I'll only specify one of the three floating point types if I care

[16:41] <abraxxa> TimToady: absolutely and I find it awesome that Rat is the default!

[16:41] <abraxxa> don't get me wrong here

[16:42] <diakopter> abraxxa: actually, my experience observing Perl 6 the past 9 years indicates most Perl 6 learners who stick around for more than 2 seconds are not Perl 5ers

[16:42] * TimToady is tired, so don't expect both his eyes to see the same thing

[16:42] *** AndyDee joined
[16:42] <diakopter> abraxxa: #perl6, I mean

[16:42] <abraxxa> i'm just trying to get DBDish::Oracle right

[16:43] <abraxxa> what is a float in the DB will be returned as Rat, because that's the default type Perl 6 creates when i specify a floating point value

[16:43] <abraxxa> as input it will likely accept Num as well

[16:43] *** pmurias_ joined
[16:43] <abraxxa> for floating point number columns that is

[16:44] <diakopter> Perl 6 is just close enough to Perl 5 to be confusing, and just close enough in complexity to require a vast brain volume to keep them straight, imho

[16:44] * TimToady hopes a normal brain volume will work for that

[16:45] <TimToady> but now to collect my guinea pig droppings...

[16:45] <abraxxa> I'm just dealing with funny stuff like the type of a number(5,2) column multiplied with a number(2,0) column returning a NUM Oracle datatype (internal 21bit representation of the number datatype) and a precision and scale of 0

[16:45] <abraxxa> so now decide if you want to bind it as long or num64...

[16:46] <pmurias> I would assume that competent Perl 5 are good at remembering loads of tricky language details

[16:46] <pmurias> * Perl 5 users

[16:46] <TimToady> I see nobody fixed the build overnight, at least as far as camelia is concerned

[16:46] <abraxxa> # Failed test 'selected data matches what was written'

[16:46] <abraxxa> # at EVAL_0 line 170

[16:46] <abraxxa> # expected: $["BEOM", "Medium size orange juice", 2, 1.2, 2.4]

[16:46] <abraxxa> #      got: $["BEOM", "Medium size orange juice", 2, 1.2, 2.4]

[16:46] <abraxxa> so why does is-deeply report a mismatch?

[16:47] <TimToady> is there a workaround for 'Could not find symbol '&bool'' in NativeCall?  a 'make clean' is not good enough

[16:48] <TimToady> and I don't know what to remove anymore to nuke it...

[16:49] <diakopter> did you adopt panda's build tree as your dev tree?

[16:49] <diakopter> I mean rakudobrew, of course

[16:49] <TimToady> no, I do my rakudobrewing in a different tree to see the user viewpoint

[16:49] <TimToady> with an alternate path

[16:50] *** sno left
[16:50] <jnthn> TimToady: Try nuking your install directory, perhaps. Oddly I didn't actually run into the issue locally.

[16:51] *** pmurias_ left
[16:51] <dalek> nqp: b13205b | jnthn++ | src/HLL/Compiler.nqp:

[16:51] <dalek> nqp: Deconfuse language/implementation version.

[16:51] <dalek> nqp: 

[16:51] <dalek> nqp: For those cases where it matters. This will also let us keep the

[16:51] <dalek> nqp: current language version specified in one place.

[16:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b13205bf1b

[16:52] *** ZoffixW joined
[16:53] <ZoffixW> m: say (* * *)(7, 6)

[16:53] <camelia> rakudo-moar 9e53fa: OUTPUT«42␤»

[16:53] * ZoffixW chuckles

[16:53] <ZoffixW> We totally should have a Unicode version of the Whatever star :)

[16:53] *** FreezerburnV left
[16:53] <nine> TimToady: you don't have to nuke the whole install dir. install/share/perl6 is enough and will be repopulated with make install

[16:55] <ZoffixW> m: say (* * * ** *)(7, 6, 2)

[16:55] <camelia> rakudo-moar 9e53fa: OUTPUT«252␤»

[16:56] <TimToady> do we know why it got out of sync, and whether that indicates a missing dep?

[16:56] *** sno joined
[16:56] *** rurban left
[16:57] <ZoffixW> m: say (* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )(|^22)

[16:57] <camelia> rakudo-moar 9e53fa: OUTPUT«0␤»

[16:57] <ZoffixW> hm... 

[16:57] <abraxxa> i have to go, I hope I can finally commit everything tomorrow

[16:57] <abraxxa> bye!

[16:57] <ZoffixW> bye

[16:58] *** abraxxa left
[16:58] <jnthn> ZoffixW: ^22 starts with 0 :)

[16:58] <ZoffixW> Ahhh jnthn++ :D

[16:58] <TimToady> many of us have fallen into that trap :)

[16:58] *** psy_ joined
[16:59] <ZoffixW> m: say (* + * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )(|^22)

[16:59] <camelia> rakudo-moar 9e53fa: OUTPUT«51090942171709440000␤»

[16:59] <ZoffixW> hah

[16:59] *** psy_ left
[16:59] <nine> TimToady: the source of the issue is that install-core-dist.pl uses git describe to create a version. But those git versions don't sort well and even if they did, CompUnit::Repository::Installation::need actually doesn't load the highest installed version, but a merely sufficient version.

[16:59] *** psy_ joined
[16:59] <TimToady> perhaps it's worth adding × and ÷

[17:00] *** Actualeyes left
[17:00] *** rurban joined
[17:00] <jnthn> TimToady: It seems the "make \n logical" didn't really work out so well as hoped for dealing with newline issues on Windows. I'm thinking we'll actually have to do translation for (non-socket) I/O. Any objections to that? Also, if we do that, is there any reason to keep the \n being virtual, and the newline pragma, around any more, given we'd switch it to always be the classical meaning by default?

[17:00] <TimToady> then we can write * × * when we want to

[17:00] *** rurban left
[17:00] <nine> Both would probably have not made it into nom if we had 1) reviews, 2) no deadline

[17:01] *** xfix joined
[17:01] <TimToady> I'm fine with translation

[17:01] <Skarsnik> .tell abraxxa I have the same error with is-deeply, I think Num does not work correctly

[17:01] <yoleaux> Skarsnik: I'll pass your message to abraxxa.

[17:01] <jnthn> TimToady: OK, I think I already figured out an easy way to put it in.

[17:03] * TimToady has at one time or other considered highjacking a portion of the input scanner's mind to look for mentions of things like infix:<÷> to pre-install into the lexer

[17:04] <TimToady> so we don't have to relex on every new operator definition, just enable it to match

[17:04] <TimToady> kinda falls into the "cheating is technique" category...

[17:04] *** rurban_ left
[17:05] <jnthn> TimToady: I'd probably stick it in gen_op and just regex our way over the following however much text for them :)

[17:05] <TimToady> you mean on the first hit?  the trouble is you might be in a subscope by then

[17:06] <TimToady> anyway, just thought I'd drop the thought so I can, er, drop the thought

[17:06] *** zakharyas left
[17:06] <dalek> rakudo/nom: cd7f136 | jnthn++ | / (2 files):

[17:06] <dalek> rakudo/nom: Use new implementation/language version methods.

[17:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd7f136736

[17:06] <dalek> rakudo/nom: fe7b163 | jnthn++ | src/ (2 files):

[17:06] <dalek> rakudo/nom: Get language version from one place.

[17:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fe7b1639c3

[17:06] <TimToady> back useless use of useless use...

[17:06] * TimToady is glad he put in an easy bug for jnthn++ to fix :)

[17:06] <jnthn> I hope ^^ are sufficient to clear up the language version number duplication

[17:07] *** pmurias left
[17:07] <jnthn> Though the ticket mentions -V...what on earth does that do... :)

[17:07] <jnthn> oh...

[17:07] <TimToady> yeah, that...

[17:07] <jnthn> grr

[17:07] <jnthn> OK, so in the next refactor... :)

[17:07] <TimToady> I dunno if we have to fix that bit right now...

[17:08] <jnthn> I *think* I can see a 5 minute way to do it

[17:08] * TimToady again feebly attempts to backlog for uu fewmets

[17:09] *** rurban joined
[17:10] *** rurban_ joined
[17:12] <hoelzro> nine: LGTM

[17:12] <hoelzro> (re. that RT ticket)

[17:16] <nine> hoelzro: so either the Heisenbug hid again, or it just got fixed with all the refactoring

[17:16] *** sno left
[17:16] <hoelzro> seems so =/

[17:16] <hoelzro> we could bisect back to try to find what "fixed" it, to see if it makes sense

[17:16] <nine> Do you have a "known broken" version?

[17:17] <hoelzro> no, but in that case, I usually just hop back a few releases

[17:18] <hoelzro> so if I were to try this now, I would probably start with 2015.08 or 2015.09

[17:19] <nine> 6d9d0f11aba8e2f465c2958a9311d9d4016017ff is the commit before curli. Might be worth a try

[17:21] <hoelzro> *nod*

[17:21] *** AlexDaniel joined
[17:22] *** n0tjack left
[17:23] <ZoffixW> m: say [*] (1..*+0)($_) for ^10

[17:23] <camelia> rakudo-moar 9e53fa: OUTPUT«Useless use of ".." in expression "1..*+" in sink context␤- QAST::Op(call &infix:<..>) ..␤  - QAST::Want 1␤    - QAST::WVal(Int)␤    - Ii␤    - QAST::IVal(1)␤  - QAST::Op(call) ..␤    - QAST::Op(p6capturelex)␤      - QAST::Op(callmethod clo…»

[17:23] <ZoffixW> huh... I'm not getting that on my terminal :/

[17:24] <ZoffixW> Dammit, my awesome factorial function foiled by warnings

[17:24] <jnthn> m: my ($a, \b) := 1, 2; say b; say MY::<b> # aha

[17:24] <camelia> rakudo-moar 9e53fa: OUTPUT«(Any)␤2␤»

[17:24] <diakopter> camelia is behind

[17:25] <ZoffixW> I'm on "This is rakudo version 2015.11-311-gf94c31e built on MoarVM version 2015.11-21-g469ba64 implementing Perl v6.b."

[17:25] <dalek> rakudo/better_line_coverage: 127ee5b | timotimo++ | src/Perl6/Actions.nqp:

[17:25] <dalek> rakudo/better_line_coverage: randomly sprinkle Actions with node annotations

[17:25] <dalek> rakudo/better_line_coverage: review: https://github.com/rakudo/rakudo/commit/127ee5b08b

[17:26] <timotimo> this branch seems to be the wrong approach, though -^

[17:26] *** yqt joined
[17:26] <ZoffixW> Works on this one too: This is rakudo version 2015.11-477-gde52f97 built on MoarVM version 2015.11-34-gc3eea17 implementing Perl v6.b.

[17:27] <ZoffixW> m: say $*PERL

[17:27] <camelia> rakudo-moar 9e53fa: OUTPUT«Perl 6 (6.b)␤»

[17:27] *** renato joined
[17:27] <ZoffixW> -_-

[17:28] *** renato is now known as Guest71133

[17:28] *** Guest71133 left
[17:30] <ZoffixW> m: say $*PROGRAM-NAME

[17:30] <camelia> rakudo-moar : OUTPUT«No such file or directory»

[17:30] <ZoffixW> 0.o

[17:30] <RabidGravy> isn't it $*COMPILER or somesuch?

[17:31] <ZoffixW> heh... she messaged me "<camelia> rakudo-moar : OUTPUT«(timeout)Can't exec "./rakudo-m-inst/bin/perl6-m": No such file or directory at lib/EvalbotExecuter.pm line 194.␤cat: /home/camelia/rakudo-m-inst/revision: No such file or directory␤#perl6 <ZoffixW> rakudo-moar: say $*PROGRAM-NAME␤»"

[17:31] <dalek> rakudo/nom: 3e6cc4a | jnthn++ | / (2 files):

[17:31] <dalek> rakudo/nom: Include language version and impl in perl6 -V.

[17:31] <dalek> rakudo/nom: 

[17:31] <dalek> rakudo/nom: This moves the version a step back, so it still has a single source.

[17:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3e6cc4a1dd

[17:31] <TimToady> ZoffixW: redoing camelia at the moment

[17:31] *** dakkar left
[17:32] * diakopter anxiously awaits the new butterfly design

[17:32] <AlexDaniel> diakopter: what? What new butterfly design?

[17:32] <jnthn> heh :)

[17:32] <diakopter> teasing

[17:34] *** Guest0101 joined
[17:34] *** ajs_ joined
[17:35] *** n0tjack joined
[17:35] <TimToady> camelia updated

[17:35] <TimToady> m: my int $i = 0; $i++ while $i < 10_000_000; say $i; say now - INIT now

[17:35] <camelia> rakudo-moar fe7b16: OUTPUT«10000000␤4.4116645␤»

[17:35] <TimToady> that one has regressed

[17:35] <jnthn> m: my \b := 1,2; say b

[17:35] <camelia> rakudo-moar fe7b16: OUTPUT«(1 2)␤»

[17:35] <TimToady> except it doesn't say useless use of $i anymore :)

[17:35] <diakopter> eww

[17:36] <stmuk> I think the linux issue with t/spec/S32-io/IO-Socket-Async-UDP.t  is that the listener dies (probably with the "unhandled exception" after the 'print-to' I can get the test to pass by starting up a second listener 

[17:36] <TimToady> proper sinking is just one of those problems you have to gnaw to death...

[17:37] <stmuk> also both client blocks pass if the other is commented out

[17:37] <ZoffixW> m: say [*] (1..*+0)($_) for ^10

[17:37] <camelia> rakudo-moar fe7b16: OUTPUT«Useless use of ".." in expression "1..*+" in sink context␤- QAST::Op(call &infix:<..>)  ..␤  - QAST::Want :BY<EXPR/list WANTED unwanted> :WANTED 1␤    - QAST::WVal(Int) ␤    - Ii␤    - QAST::IVal(1) ␤  - QAST::Op(call)  ..␤    - QAST::Op(p6ca…»

[17:37] <ZoffixW> *lesigh*

[17:37] <jnthn> stmuk: Weird...

[17:37] <TimToady> m: my int $i = 0; ++$i while $i < 10_000_000; say $i; say now - INIT now

[17:37] <camelia> rakudo-moar fe7b16: OUTPUT«10000000␤0.0630897␤»

[17:37] <jnthn> stmuk: That narrows it down a good bit, though...

[17:38] * diakopter wonders if TimToady is experimenting with fixes on camelia

[17:38] <stmuk> actually correction the first listener doesn't die .. I had to explicitly close it

[17:38] <TimToady> ZoffixW: yes, that one is on my list

[17:38] <ZoffixW> Ah, k :)

[17:39] <stmuk> anway I tend to blame the listener

[17:39] <ZoffixW> Tell me about it! They sit and nod agreeably, but don't actually listen.

[17:39] * TimToady nods

[17:39] <stmuk> is there anyway of dumping thread ids for debugging?

[17:40] <ZoffixW> Yeah

[17:40] <RabidGravy> $*THREAD.id ?

[17:41] <ZoffixW> m: (^10)».&({say $*THREAD.id})

[17:41] <camelia> rakudo-moar fe7b16: OUTPUT«1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤»

[17:41] * TimToady is under the impression that » is not yet very related to .hyper

[17:42] <ZoffixW> m: (^10).hyper(:1batch)».&({say $*THREAD.id})

[17:42] <camelia> rakudo-moar fe7b16: ( no output )

[17:42] <ZoffixW> :(

[17:42] <ZoffixW> m: say $*THREAD.id  for ^10 .hyper: :1batch;

[17:42] <camelia> rakudo-moar fe7b16: OUTPUT«3␤4␤5␤3␤4␤3␤5␤4␤3␤6␤»

[17:42] <ZoffixW> There we go :)

[17:44] <stmuk> the "Unhandled exception in code scheduled on thread" is definitely the listener in IO-Socket-Async-UDP.t

[17:46] <ZoffixW> This is weird isn't it? http://i.imgur.com/ZnN3Oyl.png

[17:46] <ZoffixW> One thread returned (Any) for THREAD-ID

[17:46] <diakopter> m: say $*THREAD.id  for ^10 .hyper: :1batch;m: say $*THREAD.id  for ^10 .hyper: :1batch; say now - INIT now

[17:46] <camelia> rakudo-moar fe7b16: OUTPUT«3␤4␤4␤5␤3␤4␤5␤6␤4␤3␤4␤4␤3␤5␤3␤4␤5␤6␤5␤3␤0.01698216␤»

[17:49] <ZoffixW> Hmph.. and a sporadic segfault: http://i.imgur.com/HchYjj5.png

[17:49] <ZoffixW> m: for ^100 { say $*THREAD.id  for ^10 .hyper: :1batch; }

[17:49] <camelia> rakudo-moar fe7b16: OUTPUT«3␤4␤4␤3␤4␤3␤6␤4␤4␤6␤3␤3␤4␤3␤5␤5␤6␤5␤4␤3␤7␤7␤8␤7␤Memory allocation failed; could not allocate 14880 bytes␤»

[17:49] *** rurban_ left
[17:49] <ZoffixW> heh

[17:49] <ajs_> Hey folks, before I get too far into my evening side project, I want to make sure it's useful.... I want IO handles that read/write Str and Buf.

[17:49] <stmuk> it's a pity finding bugs is easier than fixing them :/

[17:49] <hoelzro> nine: rakudo@6d9d0f1 doesn't exhibit the behavior

[17:50] <ZoffixW> ajs_, I've used that a few times in P5, so sure, that might be useful

[17:50] <ajs_> This is my initial implementation for reading Str: https://github.com/ajs/work/blob/master/names/IOMem.pm6

[17:51] <ajs_> My thinking is IO::Mem is the generic entry point while IO::Str and IO::Buf will be specific to those types.

[17:51] <AlexDaniel> ajs_: I've been using it a lot in P5. Not sure if such need exists in Perl 6 though, but it probably does

[17:52] <ajs_> If it does exist, I'd love to know before I get any further in the implementation.... I spent last night on it, and was going to try to finish up IO::Str tonight.

[17:54] <diakopter> m: my $a; $a += $*THREAD.id for ^50000 .hyper: :1batch; say now - INIT now; say $a

[17:54] <camelia> rakudo-moar 3e6cc4: OUTPUT«(signal XCPU)»

[17:54] <ZoffixW> heh

[17:54] <diakopter> m: my $a; $a += $*THREAD.id for ^50000 .hyper: :1batch; say now - INIT now; say $a

[17:54] <camelia> rakudo-moar 3e6cc4: OUTPUT«(signal XCPU)»

[17:54] <ZoffixW> m: my $a; $a += $*THREAD.id for ^5000 .hyper: :1batch; say now - INIT now; say $a

[17:54] <camelia> rakudo-moar 3e6cc4: OUTPUT«0.9548537␤21945␤»

[17:54] <nine> hoelzro: so the bug has vanished before curli?

[17:55] <hoelzro> yup

[17:55] * hoelzro ¯_(ツ)_/¯ 

[17:55] *** sunnavy joined
[17:59] * jnthn seems to have fixed https://rt.perl.org/Ticket/Display.html?id=126626

[17:59] <ZoffixW> How come this doesn't reverse the pairs?

[17:59] <ZoffixW> m: say (0 => 3, 1 => 3, 2 => 5, 3 => 4, 4 => 3, 5 => 5, 6 => 3, 7 => 4, 8 => 5, 9 => 6).Seq».reverse

[17:59] <camelia> rakudo-moar 3e6cc4: OUTPUT«((0 => 3) (1 => 3) (2 => 5) (3 => 4) (4 => 3) (5 => 5) (6 => 3) (7 => 4) (8 => 5) (9 => 6))␤»

[17:59] <jnthn> m: say (0 => 1).reverse

[17:59] <ZoffixW> m: say (0 => 3, 1 => 3, 2 => 5, 3 => 4, 4 => 3, 5 => 5, 6 => 3, 7 => 4, 8 => 5, 9 => 6).Seq».antipair

[17:59] <camelia> rakudo-moar 3e6cc4: OUTPUT«(0 => 1)␤»

[17:59] <camelia> rakudo-moar 3e6cc4: OUTPUT«(3 => 0 3 => 1 5 => 2 4 => 3 3 => 4 5 => 5 3 => 6 4 => 7 5 => 8 6 => 9)␤»

[17:59] *** firstdayonthejob joined
[17:59] <jnthn> Because reverse doesn't reverse pairs? :)

[18:00] <jnthn> And yes, antipair is the one

[18:00] *** administrator joined
[18:00] <jnthn> Just part of the general deconfusing of things (like reverse and flip are different operations)

[18:00] *** administrator is now known as Guest2627

[18:01] <ZoffixW> jnthn, I see. I just saw in the docs "Routines supplied by Any": http://docs.perl6.org/type/Pair

[18:01] <ZoffixW> m: say (0 => 1).sort

[18:01] <camelia> rakudo-moar 3e6cc4: OUTPUT«(0 => 1)␤»

[18:01] <ZoffixW> m: say (1 => 0).sort

[18:01] <camelia> rakudo-moar 3e6cc4: OUTPUT«(1 => 0)␤»

[18:01] <jnthn> ZoffixW: Sure, because anything can act like a list of one item

[18:01] <ZoffixW> Ah, I see.

[18:01] <jnthn> Darn, my fix busted a test...

[18:01] * jnthn thinks he'll save this for after dinner :)

[18:01] <TimToady> m: say (1 => 2 => 3).antipair

[18:01] <camelia> rakudo-moar 3e6cc4: OUTPUT«(2 => 3) => 1␤»

[18:01] <TimToady> m: say (1 => 2 => 3).invert

[18:01] <camelia> rakudo-moar 3e6cc4: OUTPUT«Cannot modify an immutable Pair␤  in block <unit> at /tmp/msHcDivLRO:1␤␤»

[18:02] <TimToady> hmm, invert should just return a new pair

[18:02] <Skarsnik> hm, what was the git magic command to rebase without creating a merge commit?

[18:03] <jnthn> git pull --rebase ?

[18:03] <TimToady> m: say (1 => [2, 3]).invert

[18:03] <camelia> rakudo-moar 3e6cc4: OUTPUT«[2 => 1 3 => 1]␤»

[18:03] *** sno joined
[18:03] <TimToady> m: say (1 => [2, 3]).antipair

[18:03] <camelia> rakudo-moar 3e6cc4: OUTPUT«[2 3] => 1␤»

[18:03] <rindolf> TimToady: hi! sup?

[18:04] * grondilu fixed http://rosettacode.org/wiki/Combinations_with_repetitions#Perl_6 but it was quite painful

[18:04] <TimToady> been breakin' stuff

[18:04] <ZoffixW> m: say (3 => 0, 5 => 1, 4 => 2, 3 => 3, 5 => 4, 3 => 5, 4 => 6, 5 => 7, 3 => 8, 6 => 9).sort({$^a <=> $^b})

[18:04] <camelia> rakudo-moar 3e6cc4: OUTPUT«Cannot call Real(Pair: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at /tmp/7KJNaBsbhN:1␤␤»

[18:04] <ZoffixW> m: say (3 => 0, 5 => 1, 4 => 2, 3 => 3, 5 => 4, 3 => 5, 4 => 6, 5 => 7, 3 => 8, 6 => 9).sort({$^a.key <=> $^b.key})

[18:04] <camelia> rakudo-moar 3e6cc4: OUTPUT«(3 => 0 3 => 3 3 => 5 3 => 8 4 => 2 4 => 6 5 => 1 5 => 4 5 => 7 6 => 9)␤»

[18:05] <grondilu> m: m: say (3 => 0, 5 => 1, 4 => 2).sort(:by(*.key))

[18:05] <camelia> rakudo-moar 3e6cc4: OUTPUT«(3 => 0 4 => 2 5 => 1)␤»

[18:05] <dalek> doc: 142b4cf | (Sylvain Colinet)++ | doc/Language/nativecall.pod:

[18:05] <dalek> doc: Added bool and size_t to NC doc. Also add a bit of words on typed pointer

[18:05] <dalek> doc: review: https://github.com/perl6/doc/commit/142b4cff35

[18:05] <TimToady> m: say 3 => 1 cmp 3 => 0

[18:05] <camelia> rakudo-moar 3e6cc4: OUTPUT«3 => Less => 0␤»

[18:05] <TimToady> m: say 3 => 1 cmp 3 => 2

[18:05] <camelia> rakudo-moar 3e6cc4: OUTPUT«3 => Less => 2␤»

[18:05] <TimToady> hmm

[18:05] <grondilu> prority?

[18:06] <TimToady> it should at least be different

[18:06] <grondilu> precedence I meant

[18:06] <TimToady> I don't see a prec problem

[18:06] <ZoffixW> m: m: say (3 => 0, 5 => 1, 4 => 2).sort: *.key

[18:06] <camelia> rakudo-moar 3e6cc4: OUTPUT«(3 => 0 4 => 2 5 => 1)␤»

[18:06] <TimToady> I'd think pairs should sort first on key, then on value

[18:07] <grondilu> that would be intuitive

[18:07] <TimToady> but I shouldn't have got Less for the 2nd one above

[18:07] <TimToady> so looks like a buglet to me

[18:07] <TimToady> someone else can file it

[18:09] <ZoffixW> m: my @horses; @horses.append: $*THREAD.id  for ^3 .race: :1batch; say "Horse {@horses.pairs».antipair.sort(*.key).reverse[0].value} won!"

[18:09] <camelia> rakudo-moar 3e6cc4: OUTPUT«Horse 1 won!␤»

[18:09] <ZoffixW> Horse racing in Perl 6 :D

[18:09] <Skarsnik> lol

[18:10] <TimToady> at a guess, it's comparing object identities, so the first one created is always less

[18:10] *** petercommand left
[18:11] <TimToady> oh well, I'll file it if no one else is

[18:11] <masak> TimToady: oh hai, did you backlog http://irclog.perlgeek.de/perl6/2015-12-15#i_11719712 ?

[18:12] <masak> TimToady: (try is wrongly flagged up as a sink context)

[18:12] <ZoffixW> m: say "OH HAI" if try 0 eq 0

[18:12] <camelia> rakudo-moar 3e6cc4: OUTPUT«Useless use of "eq" in expression "0 eq 0" in sink context␤- QAST::Op(chain &infix:<eq>) :statement_id<?> eq␤  - QAST::Want :BY<EXPR/list WANTED unwanted> :WANTED 0␤    - QAST::WVal(Int) ␤    - Ii␤    - QAST::IVal(0) ␤  - QAST::Want :BY<EXPR/li…»

[18:12] <yakudza> hehe https://v1.std3.ru/71/b7/1450110575-71b77b2bd06f431f2bd0b4abb983738f.gif how perl6 will look like ? (:

[18:13] <TimToady> masak: yes, in my list

[18:13] <masak> ZoffixW: huh. I wonder why the warning worked in camelia now, and not back when I tried it...

[18:13] <ZoffixW> masak, she got refreshed a few dozen minutes ago

[18:13] <dalek> rakudo/nom: 4624f75 | (Stefan Seifert)++ | tools/build/install-core-dist.pl:

[18:13] <dalek> rakudo/nom: Use Perl's version for the CORE dist

[18:13] <dalek> rakudo/nom: 

[18:13] <dalek> rakudo/nom: Using git describe has been a workaround obsoleted by the :force flag to

[18:13] <dalek> rakudo/nom: install. Versions should be assigned manually and conciously.

[18:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4624f7575a

[18:13] <dalek> rakudo/nom: b7c6b58 | (Stefan Seifert)++ | src/core/CompUnit/Repository/Installation.pm:

[18:13] <dalek> rakudo/nom: Load the newest version of matching dists by default.

[18:13] <dalek> rakudo/nom: 

[18:13] <dalek> rakudo/nom: This should get rid of confusion caused by outdated installed versions and

[18:13] <dalek> rakudo/nom: matches what has actually be envisioned.

[18:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b7c6b58c0d

[18:13] <nine> This ^^^ should be the end of the &bool errors

[18:14] <TimToady> masak: because I nuked the install

[18:14] <masak> aha.

[18:15] <TimToady> so now we have a different set of bugs :)

[18:16] <ZoffixW> m: say ^10 .shuffle

[18:16] <camelia> rakudo-moar 3e6cc4: OUTPUT«Method 'shuffle' not found for invocant of class 'Range'␤  in block <unit> at /tmp/wls8JALrpN:1␤␤»

[18:16] <ZoffixW> Wasn't there a shuffle method?

[18:16] * ZoffixW might be confusing with one of Perl 5's List::* modules

[18:17] <masak> yakudza: Perl 6 looks like Perl, but with C#'s space helmet and a butterfly t-shirt

[18:18] *** koo8 left
[18:18] <ZoffixW> m: say ^10 .sort({rand <=> rand})

[18:18] <camelia> rakudo-moar 3e6cc4: OUTPUT«(0 1 3 4 5 7 8 2 6 9)␤»

[18:18] <masak> m: say (flat 1..5).pick(*)

[18:18] <camelia> rakudo-moar 3e6cc4: OUTPUT«(5 3 4 1 2)␤»

[18:18] <masak> ZoffixW: use .pick(*)

[18:18] <ZoffixW> Ah :) Thanks

[18:18] <ZoffixW> masak++

[18:18] <smls> masak: Why the 'flat'?

[18:19] <masak> smls: because a range is a single thing.

[18:19] <ZoffixW> (It was even in one of the Advent articles)

[18:19] <masak> smls: welcome to post-GLR

[18:19] <ZoffixW> m: say 1..10 .pick(*)

[18:19] <camelia> rakudo-moar 3e6cc4: OUTPUT«Seq objects are not valid endpoints for Ranges␤  in block <unit> at /tmp/xsGuV6Bkwz:1␤␤»

[18:19] <TimToady> m: say (1..5).pick(*)

[18:19] <camelia> rakudo-moar 3e6cc4: OUTPUT«(5 4 1 3 2)␤»

[18:19] <ZoffixW> m: say ^10 .pick(*)

[18:19] <camelia> rakudo-moar 3e6cc4: OUTPUT«(4 1 5 7 9 8 6 2 0 3)␤»

[18:19] <TimToady> why the 'flat'?

[18:20] <masak> TimToady: um.

[18:20] <masak> TimToady: because I tried it locally, got `(1 2 3 4 5)`, and concluded that it didn't shuffle :P

[18:20] <TimToady> try it again :)

[18:20] <masak> I did :)

[18:20] <smls> ;)

[18:20] <RabidGravy> that's randomness for you

[18:21] <TimToady> m: say ^5 .permutations .pick

[18:21] <camelia> rakudo-moar 3e6cc4: OUTPUT«(3 0 2 1 4)␤»

[18:21] <masak> m: sub postfix:<!>)($n) { [*] 2..$n }; say "you have a 1 in %d chance of getting the five numbers in order".fmt(5!)

[18:21] <camelia> rakudo-moar 3e6cc4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/W5L87rDmzT␤Missing block␤at /tmp/W5L87rDmzT:1␤------> 3sub postfix:<!>7⏏5)($n) { [*] 2..$n }; say "you have a 1 i␤    expecting any of:␤        new name to be defined␤»

[18:21] <masak> m: sub postfix:<!>($n) { [*] 2..$n }; say "you have a 1 in %d chance of getting the five numbers in order".fmt(5!)

[18:21] <camelia> rakudo-moar 3e6cc4: OUTPUT«Directives specify 0 arguments, but 1 argument was supplied␤␤»

[18:22] <masak> m: sub postfix:<!>($n) { [*] 2..$n }; say 5!.fmt: "you have a 1 in %d chance of getting the five numbers in order"

[18:22] <camelia> rakudo-moar 3e6cc4: OUTPUT«you have a 1 in 120 chance of getting the five numbers in order␤»

[18:23] <masak> m: sub postfix:<!>($n) { [*] 2..$n }; say (1/5! * 100).fmt: "you have a %5.2f%% chance of getting the five numbers in order"

[18:23] <camelia> rakudo-moar 3e6cc4: OUTPUT«you have a  0.83% chance of getting the five numbers in order␤»

[18:23] <TimToady> m: sub postfix:<!>($n) { [*] 2..$n }; say (⅕! * 100).fmt: "you have a %5.2f%% chance of getting the five numbers in order"

[18:23] <camelia> rakudo-moar 3e6cc4: OUTPUT«you have a 100.00% chance of getting the five numbers in order␤»

[18:23] <TimToady> oh, duh :)

[18:23] *** yqt left
[18:24] <TimToady> how come unicode doesn't have any vulgar fractions with ! in the denominator, huh?

[18:25] <TimToady> .oO(useless use of unicode)

[18:26] <TimToady> y'know, I could get to fixing the uu bugs faster if you folks hadn't frontlogged so much while I was asleep...

[18:26] <ZoffixW> ehehe

[18:26] *** espadrine left
[18:26] *** kyclark_ joined
[18:27] * masak .oO( 1. create language 2. create community 3. blame community for talking too much while you're hacking on language )

[18:27] <masak> :P

[18:28] <TimToady> it's a nice problem to have, really :)

[18:29] <TimToady> m: say ($_ * 5 for ^10);

[18:29] <camelia> rakudo-moar 3e6cc4: OUTPUT«(0 5 10 15 20 25 30 35 40 45)␤»

[18:29] <TimToady> at least that one fixed itself

[18:29] * nine gave up backlogging in favor of having more time for hacking

[18:30] <ZoffixW> m: say "You have a {100*1/[*] 1..5}% chance of getting the five numbers in order";

[18:30] <camelia> rakudo-moar 3e6cc4: OUTPUT«You have a 0.833333% chance of getting the five numbers in order␤»

[18:30] <dalek> rakudo/nom: 9be3cae | (Stefan Seifert)++ | src/ (3 files):

[18:30] <dalek> rakudo/nom: Fix use lib accidentally cutting the $*REPO chain short

[18:30] <dalek> rakudo/nom: 

[18:30] <dalek> rakudo/nom: If one used "use lib" to add a repository that has already been in the $*REPO

[18:30] <dalek> rakudo/nom: chain, it would get moved to the front and the part of the chain pointed to by

[18:30] <dalek> rakudo/nom: its .next-repo was lost.

[18:30] <dalek> rakudo/nom: 

[18:30] <dalek> rakudo/nom: We now properly remove it from the chain before putting it to the front.

[18:30] <dalek> rakudo/nom: 

[18:30] <dalek> rakudo/nom: Thanks to bartonlin++ for reporting!

[18:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9be3cae042

[18:30] * TimToady is sort of not allowed to give up backlogging, to keep up appearances of omniscience

[18:31] *** zakharyas joined
[18:31] <masak> nine: also known as "hacklogging" :)

[18:32] <nine> So much LHF, so few takers :/

[18:32] <ZoffixW> m: multi postfix:<!>(Int $n) { [*] 1..$n }; multi postfix:<!>(Rat $n) { 1 / [*] 1..$n.denominator }; say [⅕!, 1/5!]

[18:32] <camelia> rakudo-moar b7c6b5: OUTPUT«[0.008333 0.008333]␤»

[18:32] <ZoffixW> :D

[18:33] <ZoffixW> nine, well, I'd gladly hack on the LHF, but I don't even have an idea of how to start

[18:33] <TimToady> m: use NativeCall; say Num.ACCEPTS(num64);

[18:33] <kyclark_> Is there a good resource for learning how to write P6 grammars?  I've written Parse::RecDescent grammars (SQL::Translator, Bio::GenBankParser), and I want to start using P6 for parsing things like FAST[QA] (bioinformatics type stuff).

[18:33] <camelia> rakudo-moar b7c6b5: OUTPUT«True␤»

[18:33] <TimToady> m: use NativeCall; say num64 ~~ Num;

[18:33] <camelia> rakudo-moar b7c6b5: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/HlQ2dNwUz5:1␤␤»

[18:33] <TimToady> huh

[18:33] <TimToady> did that one get reported?

[18:33] *** leont joined
[18:33] <masak> don't think so

[18:33] <nine> ZoffixW: CompUnit::DependencySpecification::Str doesn't have to add the :ver and :auth if it's True anyway

[18:33] <kyclark_> I started with http://doc.perl6.org/language/grammars and want to go from there.

[18:33] * masak submits rakudobug

[18:34] <ZoffixW> nine, what repo is that in /rakudo ?

[18:34] <ZoffixW> nqp? MoarVM?

[18:34] <nine> ZoffixW: https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/DependencySpecification.pm

[18:34] <ZoffixW> Thanks

[18:35] <ZoffixW> Well, that's easy to fix

[18:36] <nine> exactly!

[18:36] <ZoffixW> nine, is that on the list somewhere (like an RT ticket?)

[18:36] <nine> I guess not

[18:36] <ZoffixW> List of LHFs

[18:37] *** gblade joined
[18:39] *** patrickz joined
[18:39] *** labster joined
[18:39] *** labster left
[18:40] *** smls_ joined
[18:41] *** kyclark_ left
[18:41] *** smls left
[18:44] *** kyclark_ joined
[18:46] <TimToady> m: use Test; is ($(1, 2) Z <a b c>), (($(1, 2), 'a'),)

[18:46] <camelia> rakudo-moar b7c6b5: OUTPUT«ok 1 - ␤»

[18:46] *** kyclark_ left
[18:48] *** gblade_ joined
[18:49] *** gblade left
[18:49] <d^_^b> jnthn: thanks for the awesome advent calendar post. I have started something similar, but need some more context around IO::Socket. I still need to spend a few days to familiarise myself with perl6 syntax.

[18:49] <gblade_> Hi! I have a question on the latest advent and S07.

[18:49] <d^_^b> whoops, this is my remote account.

[18:49] <ZoffixW> hm

[18:49] <ZoffixW> m: my $x = False; say ($x ~~ Bool and $x ~~ True)

[18:49] <camelia> rakudo-moar b7c6b5: OUTPUT«True␤»

[18:50] <gblade_> p6: [1,2,3].push: ['a','b']

[18:50] <camelia> rakudo-moar b7c6b5: ( no output )

[18:50] <gblade_> p6: say [1,2,3].push: ['a','b']

[18:50] <camelia> rakudo-moar b7c6b5: OUTPUT«[1 2 3 [a b]]␤»

[18:50] <dj_goku> I meant to use this account. :D

[18:50] <ZoffixW> m: my $x = False; say ($x ~~ Bool and $x)

[18:50] <camelia> rakudo-moar b7c6b5: OUTPUT«False␤»

[18:52] <gblade_> Seems S07 says that should be [1,2,3,'a','b']

[18:52] <smls_> p6: say [1,2,3].append: ['a','b']

[18:52] <camelia> rakudo-moar 9be3ca: OUTPUT«[1 2 3 a b]␤»

[18:53] <timotimo> could be the .push vs .append thing hasn't landed in S07 yet?!

[18:53] *** kyclark_ joined
[18:53] <TimToady> likely

[18:53] <TimToady> a lot of things haven't landed in the synopses yet

[18:53] <gblade_> Ah okay, I was just trying the examples. Thanks!

[18:53] <TimToady> at the moment, roast really is the spec

[18:56] <ZoffixW> huh... You don't need commas with named args 0.o who knew

[18:56] *** leont left
[18:57] <ZoffixW> m: class x { has $.a; has $.b; has $.c; method x { say "$.a $.b $.c"; } }; x.new( :2a :3b :4c ).x

[18:57] <camelia> rakudo-moar 9be3ca: OUTPUT«2 3 4␤»

[18:57] <nine> ZoffixW: :a :b without a comma is actually :a with an adverb

[18:58] <ZoffixW> m: class x { has $.a; has $.b; has $.c; method x { say "$.a $.b $.c"; } }; given x.new: :2a:3b:4c {.x}

[18:58] <camelia> rakudo-moar 9be3ca: OUTPUT«2 3 4␤»

[19:00] *** yqt joined
[19:02] <El_Che> m: $~MAIN

[19:02] <camelia> rakudo-moar 9be3ca: ( no output )

[19:02] <masak> nine: I don't believe that's true.

[19:02] <El_Che> m: say $~MAIN

[19:02] <camelia> rakudo-moar 9be3ca: OUTPUT«Slang.new(:grammar(Perl6::Grammar), :actions(Perl6::Actions))␤»

[19:02] <masak> nine: I think the simpler explanation is that the comma before a named arg is optional.

[19:02] <ZoffixW> nine, well, I made my fix. What's the standard way to proceed next? "make spectest"?

[19:02] <El_Che> m: say $~Regex

[19:02] <camelia> rakudo-moar 9be3ca: OUTPUT«Slang.new(:grammar(Perl6::RegexGrammar), :actions(Perl6::RegexActions))␤»

[19:02] <nine> masak: yeah you're probably right. I have forgotten what the reason for this feature is however

[19:03] <El_Che> accoriding to the doc (under the ~ Twigil). There is a note "Note: Slangs are NYI in Rakudo."

[19:03] <nine> I know I came across it (and was astonished) during the glr

[19:03] <El_Che> Tux has his own slang, therefor implemented?

[19:03] *** leat left
[19:04] <El_Che> m: augment slang Regex {token backslash:std<\Y> { YY };}

[19:04] <camelia> rakudo-moar 9be3ca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/W6erymh0U8␤augment not allowed without 'use MONKEY-TYPING'␤at /tmp/W6erymh0U8:1␤------> 3augment slang Regex7⏏5 {token backslash:std<\Y> { YY };}␤    expecting any of:␤        generic role␤»

[19:04] <TimToady> there's no way to get a slang at the P6 level, but you can do it by twiddling internals

[19:04] <El_Che> m: use MONKEY-TYPING; augment slang Regex {token backslash:std<\Y> { YY };}

[19:04] <camelia> rakudo-moar 9be3ca: OUTPUT«===SORRY!===␤QAST::Block with cuid cuid_1_1450206257.09382 has not appeared␤»

[19:04] <El_Che> TimToady: ok, I was juist ack'ing through the docs. So, I'll leave the Note in place

[19:05] <TimToady> and it's likely to break someday if you directly access %*LANG

[19:05] <TimToady> same goes for %*PRAGMAS, I suspect

[19:05] *** b7j0c joined
[19:05] <El_Che> TimToady: thx

[19:05] <TimToady> these things should go with the current langauge, not the current dynamic scope

[19:06] <TimToady> *guage

[19:06] <TimToady> a lan gauge is something else...

[19:06] <TimToady> and why didn't Noah Webster fix the spelling of that one...

[19:08] <El_Che> the urban dictionary has a funny quote: "I majored in Enlgish and speak two other langauges."

[19:08] <TimToady> surely that should be majered?

[19:09] <El_Che> well, there is more than one way to say it :)

[19:10] *** gblade_ left
[19:12] *** FROGGS joined
[19:13] *** labster joined
[19:15] *** virtualsue left
[19:17] *** muraiki joined
[19:19] *** FreezerburnV joined
[19:24] *** Peter_R joined
[19:28] *** vendethiel joined
[19:28] <nine> ZoffixW: yes, always make spectest

[19:29] <nine> ZoffixW: TEST_JOBS=8 make spectest # is a lot faster

[19:29] <ZoffixW> I'm guessing that makes the assumption there are 8 cores available? :)

[19:30] <ZoffixW> I think on this particular box, I only got 2

[19:30] *** kyclark_ left
[19:30] *** FreezerburnV left
[19:30] <nine> You can try with TEST_JOBS=4 as well. I guess it can't hurt unless you're very memory constrained

[19:31] <ZoffixW> Do I have to run plain "make" any time I make a change?

[19:31] <ZoffixW> seems to be taking forever...

[19:31] *** FreezerburnV joined
[19:32] <ZoffixW> 157 seconds

[19:32] <ZoffixW> "Useless use of $compunit in sink context (line 35107)"

[19:32] <ZoffixW> heh.. dat line number :P

[19:32] <nine> You probably need to make install after a change

[19:33] <nine> ZoffixW: that line number is actually correct. Have a look at gen/moar/m-CORE.setting

[19:33] <ZoffixW> I'm afraid to :P

[19:33] <nine> That file is almost all of rakudo's classes combined and ends up being the precompiled core

[19:34] *** zengargoyle left
[19:35] *** zengargoyle joined
[19:38] * [Coke] is glad that compiling the setting no longer takes hours. :)

[19:40] <masak> hooray for Moore's L^W^Woptimizations!

[19:41] <[Coke]> .u pencil

[19:41] <yoleaux> U+270E LOWER RIGHT PENCIL [So] (✎)

[19:41] <yoleaux> U+270F PENCIL [So] (✏)

[19:41] <[Coke]> .u edit

[19:41] *** bpmedley left
[19:41] <yoleaux> U+2E0E EDITORIAL CORONIS [Po] (⸎)

[19:42] <ZoffixW> How long does make spectest usually run for?

[19:42] * ZoffixW wonders if they should take a nap

[19:42] <Skarsnik> forever!

[19:42] <ZoffixW> damn

[19:42] <bartolin_> hmm, I get a build error for MoarVM (on FreeBSD witch clang): https://gist.github.com/usev6/86f025b89dd6d3e751b6

[19:44] <geekosaur> hm, yes, that looks like a bad idea

[19:44] <lizmat> looking at some spectest fallout, it looks like something with linenumbering has changed

[19:44] <geekosaur> fileno is a macro in traditional stdio

[19:44] * ilmari discvers there's a .christmas TLD, and that perl6.christmas is taken

[19:44] <ilmari> no, that one's free

[19:44] <lizmat> t/spec/S24-testing/line-numbers.t   fails all tests

[19:44] <ilmari> but perl.christmas is taken

[19:45] <ZoffixW> heh

[19:45] <ZoffixW> These TLDs are such a money grab

[19:45] <geekosaur> bartolin_, I think you want to ask in #moarvm, or just file a bug report

[19:46] <ZoffixW> What are all those numbers at the bottom of the spectest run?

[19:46] <Skarsnik> should like this function must be renamed x)

[19:46] * bartolin_ just found MoarVM issue #311 (build error already reported)

[19:46] <lizmat> .tell jnthn something with line numbering has changed, is this intemtional?

[19:46] <yoleaux> lizmat: I'll pass your message to jnthn.

[19:47] *** joe__ joined
[19:48] <Skarsnik> bartolin_, try a version from one week ago, it probably work. The fileno stuff is recent I think

[19:49] <bartolin_> Skarsnik: yes, it's from yesterday (commit 344113ce and maybe also 58b81ace)

[19:49] * bartolin_ runs daily spectests on that box ...

[19:49] <[Coke]> lizmat: the line numbering is impacting spectests, pretty sure it's a known issue. I thought it was related to larry's changes.

[19:50] <diakopter> lizmat: I thought timotimo was doing the annotation (line number) changes in a branch

[19:51] <timotimo> yes, i did

[19:51] <timotimo> er. i hope i did!

[19:51] <bartolin_> in case someone wants to have a look at the build error, I'll happily provide shell access to that system

[19:52] <lizmat> ok, just wanted to make sure it wasn't falling through the cracks

[19:53] <nine> lizmat: have you experienced the t/spec/S17-supply/throttle.t hangs?

[19:53] <timotimo> well, i'm convinced i have nothing to do with line number offness. so i'll not look into it now

[19:53] <timotimo> because i'm working on the line-based coverage tool thingie again

[19:54] <lizmat> nine: not recently, but I have had a syntax.t hang again earlier today

[19:54] <geekosaur> bartolin_, Skarsnik, access to raw fileno was just added yesterday IIRC

[19:54] *** adhoc left
[19:54] <nine> lizmat: I can easily reproduce it by having a TEST_JOBS=20 make spectest running while trying: perl6 -e 'my @a; @a[9] = 0; for 1..10 -> $n { say $n; (1..10).Supply.throttle( $n, { @a[$_] = 1 } ).wait; }'

[19:54] <Skarsnik> it's probably easy to fix with replacing fileno with like pfileno or something like this

[19:55] <geekosaur> yep

[19:55] <Skarsnik> in the c part

[19:55] * bartolin_ will try that

[19:55] <nine> lizmat: when it hangs, every thread is waiting on a cond var in ConcBlockingQueue's shift except for thread #1 which is waiting for a ReentrantMutex

[19:55] *** adhoc joined
[19:57] <lizmat> nine: doesn't sound nice

[19:58] *** FreezerburnV left
[19:58] <diakopter> dedlok!

[19:58] <nine> lizmat: futhermore, it happens because the { @a[$_] = 1 } is so fast. By slowing it down (like the next test does with the sleep rand or by adding a costly loop) the hangs disappear.

[19:59] <ZoffixW> hm hm... I'm getting a whole bunch of failures, but I've no idea if they're due to my change or not anyway, so I may be wasiting my time running the spectest

[19:59] <nine> ZoffixW: please gist those failures. I can tell you if they're to be expected

[20:00] <ZoffixW> And I need to do it on a faster box lol :D

[20:00] <ZoffixW> nine, so far it just says "Failed 13/13 subtests" without any details... I'm guessing those will be shown at the end?

[20:00] <lizmat> https://gist.github.com/lizmat/af2e1c6c3d27c7318410   # my current spectest status

[20:00] <hoelzro> jnthn, stmuk: interesting I noticed doing a strace on that UDP test; I see calls to socket() to establish a UDP socket, but not to bind()

[20:00] <hoelzro> s/(interesting)/$1 thing/

[20:01] <nine> ZoffixW: if you have a throttle.t test running (or rather waiting), kill it. It won't finish

[20:01] <geekosaur> hoelzro, bind() is not especially useful on UDP

[20:01] <nine> lizmat: same sorry state here :/

[20:01] <hoelzro> geekosaur: how does a UDP server say to the OS which port it wants to receive traffic on?

[20:02] <jnthn> d^_^b: Glad you enjoyed the post. :)

[20:02] <yoleaux> 19:46Z <lizmat> jnthn: something with line numbering has changed, is this intemtional?

[20:02] <geekosaur> ... sorry, I'm having A Day; I was thinking connect()

[20:02] <geekosaur> sogh

[20:02] <jnthn> lizmat: Not intentional

[20:02] <jnthn> lizmat: But afaik it's TimToady's ongoing sink work that did it

[20:02] *** joe__ left
[20:03] <lizmat> ok, if it's ongoing, I guess we should ignore the errors now 

[20:03] <nine> jnthn: I dug a bit into the throttle.t hangs: http://irclog.perlgeek.de/perl6/2015-12-15#i_11722674 and following

[20:03] <lizmat> ?

[20:03] *** darutoko left
[20:04] <hoelzro> ah, I didn't strace -f

[20:04] <lizmat> m: a => 1 cmp a => 0   # related to #126926

[20:04] <camelia> rakudo-moar 9be3ca: ( no output )

[20:05] <lizmat> m: say a => 1 cmp a => 0   # related to #126926

[20:05] <camelia> rakudo-moar 9be3ca: OUTPUT«Unexpected named parameter 'a' passed␤  in block <unit> at /tmp/j40bTvaBPh:1␤␤»

[20:05] <lizmat> m: say 3 => 1 cmp 3 => 0   # related to #126926

[20:05] <camelia> rakudo-moar 9be3ca: OUTPUT«3 => Less => 0␤»

[20:07] *** lucasb joined
[20:07] <ZoffixW> nine, how do I kill it? Just CTRL+C?

[20:08] <nine> ZoffixW: I usually find the process id using "ps xaf" and then use kill to kill it

[20:08] <dalek> rakudo/nom: d23a73d | jnthn++ | src/Perl6/World.nqp:

[20:08] <dalek> rakudo/nom: Don't confuse undef variables with constants.

[20:08] <dalek> rakudo/nom: 

[20:08] <dalek> rakudo/nom: This is what was keeping `my ($a, \b) = 1, 2; say b` from producing

[20:08] <dalek> rakudo/nom: the expected output (2).

[20:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d23a73da43

[20:08] <dalek> rakudo/nom: 205f30b | jnthn++ | src/core/control.pm:

[20:08] <dalek> rakudo/nom: nextsame and nextwith shouldn't recont.

[20:08] <dalek> rakudo/nom: 

[20:08] <dalek> rakudo/nom: We leave that to the semantics of the routine, which may have an

[20:08] <dalek> rakudo/nom: `is rw` on it.

[20:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/205f30bf6c

[20:08] <dalek> roast: 2718268 | jnthn++ | S06-advanced/wrap.t:

[20:08] <dalek> roast: Correct some busted tests; unfudge.

[20:08] <dalek> roast: review: https://github.com/perl6/roast/commit/271826866d

[20:08] <jnthn> oops, commit fail 

[20:09] <ZoffixW> oh, we can mix $a and \b now?

[20:09] <jnthn> Should have read `my ($a, \b) = 1, 2`

[20:09] <jnthn> shit!

[20:09] <jnthn> Should have read `my ($a, \b) := 1, 2`

[20:09] <jnthn> Only if you use :=

[20:09] * jnthn accidentally fixed RT #122259 as a result of looking into this...

[20:09] <ZoffixW> Ah

[20:09] <ZoffixW> jnthn++

[20:11] <ZoffixW> m: my ( $h, \Δ, $c_max ) := (1, 4, 5); say  $h, Δ, $c_max

[20:11] <camelia> rakudo-moar 9be3ca: OUTPUT«1(Any)5␤»

[20:11] <ZoffixW> m: my ( $h, \Δ, $c_max ) = (1, 4, 5); say  $h, Δ, $c_max

[20:11] <camelia> rakudo-moar 9be3ca: OUTPUT«1(Any)5␤»

[20:11] <jnthn> The first of those now works

[20:12] <jnthn> I want to make the second of those give an error, to avoid confusion

[20:12] <ZoffixW> Make it work :D

[20:12] <jnthn> It can't

[20:12] <jnthn> Sanely

[20:13] <ZoffixW> nine, here are my spectest results: https://gist.github.com/zoffixznet/d57da99209ddcd1bd3aa

[20:13] * jnthn bbl

[20:13] <Woodi> hey, do you know ? it's just two days until Perl6 release ! and it's late here so practically just 1 !

[20:14] <ZoffixW> Compared to lizmat's, my syntax and interval pass, but wait fails

[20:14] <lizmat> Woodi: pretty sure it won't be in two days

[20:14] <nine> ZoffixW: all known, you're fine

[20:14] <ZoffixW> \o/

[20:14] <Woodi> lizmat: damn ;)

[20:14] <lizmat> it *will* be before Chtristmas

[20:14] <lizmat> pretty sure of that

[20:16] <ZoffixW> nine, PR sent: https://github.com/rakudo/rakudo/pull/634

[20:16] * nine wouldn't mind having a month or two more

[20:16] <ZoffixW> nine, what other fruits are there?

[20:16] <lucasb> so, {moar,nqp,rakudo}-2015.12 will ship as usual? but will also ship a perl-6.c.tar.gz?

[20:17] <lucasb> will it include rakudo star modules and roast test too?

[20:17] <nine> ZoffixW: that fails if $.version-matcher is 0

[20:18] <ZoffixW> Ah right :) lol, I tried '0' but not 0 >_<

[20:18] <ZoffixW> Fixin'

[20:25] <ZoffixW> nine, k: https://github.com/rakudo/rakudo/pull/634/files

[20:26] <dalek> rakudo/nom: 69e18e8 | (Zoffix Znet)++ | src/core/CompUnit/DependencySpecification.pm:

[20:26] <dalek> rakudo/nom: CompUnit::DependencySpecification::Str doesn't have to add the :ver, :api :auth if it's True anyway

[20:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/69e18e8322

[20:26] <dalek> rakudo/nom: 95e7ac6 | niner++ | src/core/CompUnit/DependencySpecification.pm:

[20:26] <dalek> rakudo/nom: Merge pull request #634 from zoffixznet/fix-true-ver

[20:26] <dalek> rakudo/nom: 

[20:26] <dalek> rakudo/nom: CompUnit::DependencySpecification::Str doesn't have to add the :ver, :api, and :auth if it's True anyway

[20:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/95e7ac6f22

[20:27] <ZoffixW> weee \o/

[20:27] <nine> ZoffixW++ # fixing things

[20:27] <ZoffixW> nine, what other LHF are there?

[20:27] <nine> ZoffixW: panda has quite a few. For example the "Use of uninitialized value" warning when running perl6 bootstrap.pl

[20:27] <ZoffixW> Oh, right, I remember that. Gonna take a look

[20:28] <nine> Or that it creates directories like '(HANDLED) Failed to open file'

[20:28] <ZoffixW> But I though that was a feature, for the lulz! :D

[20:28] <nine> Or that it prints the "Please make sure inst#/whatever" is in your path

[20:29] <nine> like: https://gist.github.com/niner/a8441e1a4ee05a672eca

[20:29] * ZoffixW laughs

[20:29] <lucasb> nine: can you merge https://github.com/tadzik/panda/pull/264 ? I think it's the easiest fix that could possibly work

[20:29] <ZoffixW> It's a Christmas tree! :D

[20:29] *** cygx joined
[20:29] <nine> They actually seem to be related. Both come from panda using repo specs (the "inst#/..." strings) as path names

[20:29] <dalek> mu: 6b60df7 | (Carl Masak)++ | misc/perl6advent-2015/schedule:

[20:29] <dalek> mu: trade places with diakopter

[20:29] <dalek> mu: review: https://github.com/perl6/mu/commit/6b60df7713

[20:30] <cygx> cf https://github.com/rakudo/rakudo/pull/633 and https://github.com/tadzik/panda/pull/264 re the '(HANDLED) Failed to open file' directories

[20:30] <cygx> haven't had a chance to test it yet

[20:31] <dalek> rakudo/nom: 07af2d3 | TimToady++ | src/Perl6/Actions.nqp:

[20:31] <dalek> rakudo/nom: wantall does no good before you've attached kids

[20:31] <dalek> rakudo/nom: 

[20:31] <dalek> rakudo/nom: (also make EXPR fetch sym and O correctly for non-infixes)

[20:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/07af2d3728

[20:32] <nine> Then it's even lower hanging fruit. Just a good testing needed :)

[20:32] <ZoffixW> :D

[20:33] <hoelzro> I think I found the UDP problem

[20:33] <ZoffixW> sweet

[20:34] <hoelzro> https://github.com/MoarVM/MoarVM/blob/master/src/io/asyncsocketudp.c#L40

[20:34] <hoelzro> shouldn't that be nread >= 0?

[20:36] <hoelzro> on Linux, it's valid for recvmsg() to return 0

[20:36] <hoelzro> http://docs.libuv.org/en/v1.x/udp.html seems consistent

[20:36] <geekosaur> it should be valid anywhere

[20:37] <geekosaur> because presence of a packet is significant for UDP

[20:37] <geekosaur> 0-length packets are entirely valid and should be reported

[20:37] <nine> hoelzro++ # nice catch!

[20:37] <geekosaur> (it may be difficult to fit this into a stream-based file abstraction)

[20:38] <hoelzro> the other troubling aspect of this is the error, and how we didn't really have any data on what was really going on

[20:38] *** Rotwang joined
[20:39] <Rotwang> Hi

[20:39] <ZoffixW> hey

[20:39] <Rotwang> is perl6 close to being released?

[20:39] <ZoffixW> Rotwang, the language, yes.

[20:39] <ZoffixW> Rotwang, this Christmas

[20:39] <El_Che> or before :)

[20:39] <Rotwang> ;O

[20:40] <Rotwang> cool

[20:40] <ZoffixW> indeed :)

[20:40] <masak> not just cool, but frosty! :D

[20:40] <hoelzro> nine: btw, I'm closing to finding the commit that unbreaks that precomp thing

[20:41] <Rotwang> any good resources aside of advent calendar for learning perl6?

[20:43] <hoelzro> Rotwang:  http://perl6intro.com/ looks pretty nice

[20:43] <hoelzro> also, https://learnxinyminutes.com/docs/perl6/

[20:44] <lucasb> fwiw, reading libuv's ChangeLog, you can see they fixed some UDP bugs, but idk if it's related to these bugs in moar

[20:44] <lucasb> I mean, between libuv 1.0 (which is what moar uses) and the current 1.8.0

[20:45] <El_Che> Rotwang: if you know perl 5, I found the regular doc (tutorials + class info) get you started pretty fast: http://doc.perl6.org/language.html. However I found jnthn's presentation a very good start: http://www.jnthn.net/papers/2015-spw-perl6-course.pdf

[20:46] <ZoffixW> m: my $fac = [*] (1..*+0)(10000); say $fac.chars; my $now = now; $fac ~~ s/0+$//; say [$fac.chars, now - $now]

[20:46] <camelia> rakudo-moar 95e7ac: OUTPUT«Useless use of ".." in expression "1..*+" in sink context␤- QAST::Op(call &infix:<..>)  ..␤  - QAST::Want :BY<EXPR/list WANTED unwanted> :WANTED 1␤    - QAST::WVal(Int) ␤    - Ii␤    - QAST::IVal(1) ␤  - QAST::Op(call)  ..␤    - QAST::Op(p6ca…»

[20:47] <ZoffixW> ah right..

[20:47] <ZoffixW> m: my $fac = [*] 1..10000; say $fac.chars; my $now = now; $fac ~~ s/0+$//; say [$fac.chars, now - $now]

[20:47] <Rotwang> El_Che: hoelzro: I had a short "stints" with perl6 before, so http://doc.perl6.org/language.html should be good enough (at least for now), thanks

[20:47] <camelia> rakudo-moar 95e7ac: OUTPUT«35660␤[33161 2.3136354]␤»

[20:48] <ZoffixW> Interesting... on my box, it takes 17 seconds to run, with the s/// portion taking 10 seconds

[20:48] <ZoffixW> I wonder how much of that is my box being crappy and how much it is my perl6 being too old :P

[20:48] <Skarsnik> s/// is slow as hell when I tested a bit string once x)

[20:49] <ZoffixW> That's terrible :(

[20:50] <ZoffixW> m: my $x = '0' x 1000000000; say now - INIT now; $x ~~ s/0+$//; say now - INIT now;

[20:50] <camelia> rakudo-moar 95e7ac: OUTPUT«0.0032353␤Memory allocation failed; could not allocate 4000000000 bytes␤»

[20:50] <ZoffixW> 0_0

[20:51] <ZoffixW> m: say 4000000000 / 1024 / 1024

[20:51] <camelia> rakudo-moar 95e7ac: OUTPUT«3814.697266␤»

[20:51] <Skarsnik> I tried pruning html content with it. it was not a good idea x)

[20:51] <ZoffixW> wtf 3814GB of ram?

[20:51] <ZoffixW> *3.8

[20:51] <ZoffixW> m: my $x = '0' x 2000000000; say now - INIT now; $x ~~ s/0+$//; say now - INIT now;

[20:51] <camelia> rakudo-moar 07af2d: OUTPUT«repeat count > 1073741824 arbitrarily unsupported...␤  in block <unit> at /tmp/z0jHdIafVL:1␤␤»

[20:51] <ZoffixW> m: my $x = '0' x 500000000; say now - INIT now; $x ~~ s/0+$//; say now - INIT now;

[20:51] <camelia> rakudo-moar 07af2d: OUTPUT«0.0030152␤Memory allocation failed; could not allocate 2000000000 bytes␤»

[20:51] <ZoffixW> m: say 500000000  / 1024 / 1024

[20:51] <camelia> rakudo-moar 07af2d: OUTPUT«476.837158␤»

[20:52] <ZoffixW> I see. I'm just using really big numbers from the getgo

[20:52] * ZoffixW & commute

[20:52] *** ZoffixW left
[20:52] *** kyclark_ joined
[20:52] <[Coke]> (release) will be before Christmas is -over-. :)

[20:53] <Skarsnik> how the hell a 1GB str make it alloc 3.5GB x)

[20:53] <masak> [Coke]: I read that as "the release will be the best Christmas -ever-." :P

[20:53] <TimToady> m: 1 orelse 2 orelse 3  # dunno whether I broke this or someone else did

[20:53] <camelia> rakudo-moar 07af2d: OUTPUT«===SORRY!===␤Operation 'defor' needs 2 operands␤»

[20:54] <masak> TimToady: want me to rakudobug it?

[20:54] <TimToady> it's blowing up tests already, so no

[20:54] <masak> ah.

[20:54] <[Coke]> lucasb: there will be a compiler release called 2015.12 that will implement the language spec of v6.c

[20:54] <TimToady> wasn't my last patch, fershure

[20:55] *** dunkaist joined
[20:55] *** spider-mario joined
[20:56] <lucasb> [Coke]: ok, thanks.

[21:00] *** Rotwang left
[21:00] <RabidGravy> lawks, I've really gone rambling with this advent post.  I may have to just stop and write a concluding paragraph and post at midnight irrespective of whether I think I've finished

[21:01] <stmuk> Christmas is Jan 7th right? :)

[21:02] <TimToady> shh, or everyone will go on vacation

[21:03] <TimToady> and it's the 5th, I think

[21:04] <nine> Skarsnik: 1GB string or a string with 1 billion characters?

[21:04] <El_Che> stmuk: no sir. No Christmas relativism allowed. And if any -> winter solstice in less than a week :)

[21:05] *** Guest2627 left
[21:05] <sno> I took a HP to niederrhein.pm if anyone wants to see and play with cross compiled perl6 (luckily noone wanted today ^^), because:

[21:05] <sno> root@homepilot:~# perl6 --help

[21:05] <sno> Unhandled exception: java.lang.RuntimeException: Missing or wrong version of dependency 'gen/jvm/stage2/QRegex.nqp'

[21:05] <sno>   in

[21:05] <sno>   in load_module

[21:06] <gfldex> El_Che: but then, Any is undefined

[21:06] <geekosaur> that's not relativism, it's just orthodoxy >.>

[21:07] <sno> since it worked in a clean build (and that's one likely an incremental one), seems there is a problem on incremental builds

[21:07] <patrickz> Hey, does libmoar.so need executable stack? My provider has it turned off which prevents moar to work because the lib has the exec stack bit set.

[21:08] <patrickz> provider = remote server not administered by me.

[21:09] <RabidGravy> gfldex, do you have the direct link to your advent post on traits to hand?

[21:09] *** kaare_ left
[21:09] <gfldex> https://perl6advent.wordpress.com/2015/12/13/a-new-trait-for-old-methods/

[21:10] <El_Che> gfldex: I saw it. My 5 minutes of internet fame :)

[21:10] <gfldex> RabidGravy: if you have to, feel free to steal the html

[21:10] <El_Che> gfldex: it could be put in a module maybe?

[21:10] *** geraud joined
[21:10] <gfldex> El_Che: if you want to, you can do that. Maybe add a trait for subs too.

[21:11] <RabidGravy> gfldex, nah I'm just being slack, I mentioned traits in the post I'm doing and want to cite your post rather than explain further ;-)

[21:12] <stmuk> hoelzro: I tried "nread >= 0" and the test fails even more dramatically

[21:12] <El_Che> gfldex: thx

[21:13] <zengargoyle> ½ of panda's «(HANDLED …» directory creation thing is Shell::Command::mkpath getting passed a .IO object which it later .split causing the .IO object to be .open causing the Failure which is then .split on \/\\ and made into a directory tree.

[21:13] <RabidGravy> my post was supposed to be about how I ended up writing more modules to help me write the modules I wanted to make than the modules I wanted to make ;-)

[21:14] <RabidGravy> it's taken on a life of its own now

[21:14] * stmuk wonders how high the stack of empty Stellas is :)

[21:14] <gfldex> i'm toying with a concurrent pod2html right now and i did _not_ step on any rakudobugs so far. #perl6++

[21:14] <geekosaur> yak shaving in p6

[21:14] <zengargoyle> either pass a Str to mkpath or change mkpath to .Str incoming arguments...

[21:15] <RabidGravy> stmuk, I'm on the Afligem now, self limiting

[21:15] <zengargoyle> other ½ is the inst# in the path.

[21:18] *** regreg left
[21:19] <dalek> doc/zero-arg-funcs: 46b1ecb | (Brock Wilcox)++ | doc/Language/5to6-perlfunc.pod:

[21:19] <dalek> doc/zero-arg-funcs: Describe the new restrictions on some zero-argument funcs

[21:19] <dalek> doc/zero-arg-funcs: review: https://github.com/perl6/doc/commit/46b1ecb25a

[21:21] *** bjz left
[21:22] *** hankache joined
[21:24] *** Guest0101 left
[21:25] <[Coke]> (incremental builds) do a make install

[21:33] *** gtodd1 left
[21:34] <awwaiid> I've noticed a lot of "Use of uninitialized value of type Str in string context

[21:34] <awwaiid> Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in code  at /home/awwaiid/tlt/projects/perl6/lang/doc/lib/Perl6/Documentable.pm:30" lately -- is this new?

[21:35] <gfldex> awwaiid: try git checkout 3b4964b6d46e260947f54540ec2d20d64dcd7ffd

[21:35] <gfldex> TimToady++ is operating on the open heart right niw

[21:35] *** zakharyas left
[21:36] *** bjz joined
[21:37] <awwaiid> ahh, good to know. thanks gfldex 

[21:38] <awwaiid> ok. maybe I shouldn't be running off of nom nom nom

[21:39] <hoelzro> stmuk: I got failures because the promise is kept twice

[21:39] <hoelzro> because we get a packet with 26 bytes in it, then a packet with 0

[21:40] <hoelzro> nine: 59f7cb90f5d626f5e5bc0237e1ddff44e8c127eb seems to be the commit that makes or breaks that precomp issue

[21:41] *** bjz left
[21:41] <nine> hoelzro: well the commit at least has got something to do with module loading

[21:42] <hoelzro> true

[21:42] <hoelzro> I bet if we backported that change to an earlier rakudo+moarvm, it would mysteriously be broken =/

[21:43] <[Coke]> TimToady: build now warns at "src/core/CompUnit/RepositoryRegistry.pm" line 204 of 308 (... useless use of...)

[21:43] <nine> hoelzro: I fear so :/

[21:46] <dalek> rakudo/nom: 1761df4 | TimToady++ | src/Perl6/Actions.nqp:

[21:46] <dalek> rakudo/nom: pay attention to resultchild

[21:46] <dalek> rakudo/nom: 

[21:46] <dalek> rakudo/nom: fixes: say "OH HAI" if try 0 eq 0

[21:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1761df4164

[21:46] <jnthn> hoelzro: Oddness. I wonder where the extra empty packet comes from...

[21:46] *** hankache left
[21:46] <TimToady> [Coke]: known, benign, will fix

[21:47] <hoelzro> I wonder if it's something to do with closing the socket?

[21:47] <masak> TimToady: \o/

[21:47] * masak rebuilds

[21:47] *** kyclark_ left
[21:48] <hoelzro> sub run(*@args ($, *@)) { ... } # the ($, *@) constraint on @args, what's that called?

[21:48] <jnthn> sub-signature

[21:49] <hoelzro> thanks jnthn 

[21:49] <hoelzro> that's what I thought, but I've seen it referred to as "nested signature"

[21:49] <masak> I think it's called both

[21:49] *** kyclark_ joined
[21:50] *** xfix left
[21:51] <awwaiid> gfldex: thank you, that revision is working much better for me

[21:52] <jnthn> stmuk++ and hoelzro++ # looking into the UDP issue

[21:56] *** snarkyboojum joined
[21:58] *** kyclark_ left
[21:58] *** prammer left
[21:59] <nine> t/spec/S10-packages/precompilation.rakudo.moar really only fails in the harness, even if it's the only file in a make localtest

[21:59] <nine> WTH?

[22:00] <TimToady> jnthn: did you do anything that would cause EXPR to suddenly start EXPR parsing orelse as a list operator?  before, it was forced to left (despite having :prec<list> declared), so defor would only ever get two args

[22:00] <TimToady> m: 1 orelse 2 orelse 3

[22:00] <hoelzro> nine: does it have to do with @*INC setup?

[22:00] <camelia> rakudo-moar 1761df: OUTPUT«===SORRY!===␤Operation 'defor' needs 2 operands␤»

[22:00] <TimToady> that now shows up in actions EXPR with 3 args

[22:00] <TimToady> I don't think this one's my fault...

[22:01] <TimToady> mind, I think it's good that EXPR is now paying attention to list assoc, but the downstream can't handle it here

[22:01] *** Rotwang joined
[22:02] *** Rotwang left
[22:02] *** Rotwang joined
[22:02] *** rindolf left
[22:02] <b2gills> m: say sort (1,2,3).pick(*) X=> (1,2,3).pick(*) # TimToady: pairs do sort on key then on value

[22:02] <camelia> rakudo-moar 1761df: OUTPUT«(1 => 1 1 => 2 1 => 3 2 => 1 2 => 2 2 => 3 3 => 1 3 => 2 3 => 3)␤»

[22:04] <timotimo> Zoffix: the reason why your strings were allocating that much space is because NFG forces us to have 4 bytes per codepoint. if you have a whole lot of data, might be better off using Buf/Blob?

[22:04] <Rotwang> which editor do you use for p6? vim only?

[22:04] * hoelzro uses Vim

[22:04] <Zoffix> timotimo, I don't mind 4 bytes per codepoint :) (that code was just me playing around and not part of a program)

[22:05] <Skarsnik> no way to have trait on the Str instead?

[22:05] * Rotwang many sad, I know vim is cool, but there are editors out there that can actually edit text

[22:05] <Skarsnik> atom

[22:05] <Skarsnik> I use Kate ^^

[22:05] <timotimo> Zoffix: all right

[22:05] <stmuk> oh I see the 2nd sendmsg has =0 at the end not 26

[22:06] <stmuk> oh no it's resumed =26

[22:06] *** skids left
[22:07] <nine> # Cannot find method 'run_alt'

[22:07] <Skarsnik> hm, I wonder if NC should be patched to allow my $p is explicity-managed;

[22:07] <nine> That's the reason for precompilation.rakudo.moar failing ^^^

[22:07] <Zoffix> SysInfo: Linux 3.5.0-11-generic | Dual Intel(R) Core(TM) i5-3570K CPU @ 3.40GHz 1600.000 MHz | Mem: 1531/16550M [||||||||||] | Diskspace: 1398G Free: 68G | Bogomips: 27280.9 | Screen Res: 2560x1440 | Procs: 146 |   | Up: upy 11:15,w 1d user,h loadm | eth2: In: 35.88M Out: 8.39M

[22:07] <Zoffix> timotimo, I have plenty of RAM to go around :)

[22:07] *** dunkaist left
[22:07] <Skarsnik> 16GB? x)

[22:08] <Zoffix> (and yes, it took me that long to figure out which xchat command showed box info lol)

[22:08] <Zoffix> Skarsnik, yeah

[22:08] <nine> I don't have the slightest idea how that can be connected to the test harness

[22:08] <[Coke]> TimToady++, danke

[22:08] *** sno left
[22:08] <Skarsnik> I should buy extra 8GB ram to run all my vm at the same time x)

[22:08] <TimToady> m: say (64 + *).chr;

[22:08] <camelia> rakudo-moar 1761df: OUTPUT«WhateverCode.new␤»

[22:08] <TimToady> looks like we fixed that one already

[22:09] <hoelzro> is the JVM build currently working? I get an NPE during make install

[22:09] <timotimo> Zoffix: still, i'm worried people will have trouble working with quite big files (an apache access log, for example?) and getting that 4x size increase for strings ...

[22:09] <[Coke]> last I tried ( a week ago) it built but didn't install

[22:09] <hoelzro> =/

[22:09] <[Coke]> so you could run it out of ./perl6-j but not ./install/bin/perl6-j

[22:10] <[Coke]> (and then it had hanging tests, so I stopped ever building it daily)

[22:10] <[Coke]> *even

[22:10] <[Coke]> j: 3.say

[22:10] <camelia> rakudo-jvm 6c0f93: OUTPUT«3␤»

[22:10] <TimToady> m: say [*] (1..*+0)($_) for ^10

[22:10] <camelia> rakudo-moar 1761df: OUTPUT«1␤1␤2␤6␤24␤120␤720␤5040␤40320␤362880␤»

[22:10] <TimToady> and that one

[22:10] <nine> timotimo: I really really hope people won't read such log files all into memory for processing. We do have good tools now for making line by line processing painless

[22:11] <[Coke]> ^^ Date:   Sat Dec 5 16:10:58 2015

[22:11] <timotimo> nine: aye, we do. but people be stubborn :)

[22:11] <El_Che> Rotwang: https://perl6advent.wordpress.com/2015/12/03/day-3-atom-editor-support/

[22:11] <timotimo> and they'll be convinced perl6 sucks!!!!kkk

[22:11] <timotimo> god forbid they keep around match objects ... those hang on to the original string :S

[22:11] <[Coke]> * gonnna *

[22:11] <TimToady> well, it does suck.  it just sucks less than most other things

[22:12] <stmuk> hoelzro: is your 0 in a sendmsg or recvmsg?

[22:12] <El_Che> nine: slurp is very tempting

[22:12] <hoelzro> stmuk: neither =/

[22:12] <Zoffix> m: say [*] (1..*+0)(1000)

[22:12] <camelia> rakudo-moar 1761df: OUTPUT«4023872600770937735437024339230039857193748642107146325437999104299385123986290205920442084869694048004799886101971960586316668729948085589013238296699445909974245040870737599188236277271887325197795059509952761208749754624970436014182780946464962910563938…»

[22:12] <Zoffix> TimToady++ # fixing things

[22:12] <nine> El_Che: .lines auto-chomps

[22:12] <hoelzro> I have a sendmsg that returns 26, a recvmsg that returns 26s, and a recvmsg that gets EINTR

[22:13] <El_Che> nine: I rewrote my p6-work-in-progress-program a few time because I hit the memory limit of my VM

[22:13] <timotimo> i can imagine that

[22:14] <dalek> doc: 46b1ecb | (Brock Wilcox)++ | doc/Language/5to6-perlfunc.pod:

[22:14] <dalek> doc: Describe the new restrictions on some zero-argument funcs

[22:14] <dalek> doc: review: https://github.com/perl6/doc/commit/46b1ecb25a

[22:14] <dalek> doc: 77518c1 | (Zoffix Znet)++ | doc/Language/5to6-perlfunc.pod:

[22:14] <dalek> doc: Merge pull request #248 from perl6/zero-arg-funcs

[22:14] <dalek> doc: 

[22:14] <dalek> doc: Describe the new restrictions on some zero-argument funcs

[22:14] <dalek> doc: review: https://github.com/perl6/doc/commit/77518c1aa2

[22:14] <El_Che> importing 500 MB ldif files to make diffs and make sure the data is consistent

[22:15] <Rotwang> atom looks good, thanks

[22:15] *** b7j0c left
[22:16] <Skarsnik> Rotwang, you will need to not use the default p6 syntax coloration/tools, there is a advent post about that xà

[22:16] <El_Che> Skarsnik: I linked to that one :)

[22:17] <nine> hoelzro: indeed! It seems to be the PERL6LIB=lib,.

[22:18] *** molaf left
[22:18] <Skarsnik> timotimo, could str be a lighter alternative? or it's just totaly something else

[22:19] <timotimo> no

[22:19] <timotimo> Str is just an object that has a str boxed inside it

[22:19] <timotimo> both share the whole NFG thing

[22:19] *** cygx left
[22:21] <nine> hoelzro: PERL6LIB=lib seems to be enough to trigger it, while perl6 -Ilib doesn't, which is the reason why my prove6 alias was not enough

[22:21] <TimToady> m: p6 'given a => 1 { when * eqv a => 2 { say "a => 2" }; when * eqv a => 1 { say "a => 1" }; default { say "what now?" } }'

[22:21] <camelia> rakudo-moar 1761df: OUTPUT«5===SORRY!5=== Error while compiling /tmp/BSD87C49Ov␤Undeclared routine:␤    p6 used at line 1␤␤»

[22:21] <TimToady> a => 1

[22:22] <hoelzro> nine: interesting

[22:22] <TimToady> m: given a => 1 { when * eqv a => 2 { say "a => 2" }; when * eqv a => 1 { say "a => 1" }; default { say "what now?" } }

[22:22] <camelia> rakudo-moar 1761df: OUTPUT«a => 1␤»

[22:22] <TimToady> looks like it fixed that one too

[22:22] *** muraiki left
[22:22] * TimToady is glad when multiple bugs turn out to be the same bug

[22:23] <diakopter> someday all bugs will be the same bug

[22:23] <nine> Well, I'm gonna leave it be for today. Good night!

[22:23] <masak> 'night, nine

[22:23] <masak> 'night, #perl6

[22:23] <Zoffix> night

[22:24] <hoelzro> night nine

[22:24] <hoelzro> night masak 

[22:26] *** lucasb left
[22:26] <timotimo> gnite nine :)

[22:27] <timotimo> gnite masak 

[22:28] *** snarkyboojum_ joined
[22:29] *** espadrine joined
[22:31] *** zengargo1le joined
[22:31] *** zengargoyle left
[22:33] <dalek> rakudo/nom: 5bd6b98 | TimToady++ | src/Perl6/Actions.nqp:

[22:33] <dalek> rakudo/nom: initializers need to be wanted harder

[22:33] <dalek> rakudo/nom: 

[22:33] <dalek> rakudo/nom: fixes: my Int constant $default_stream_read_len = 2 * 1024;

[22:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5bd6b98cce

[22:33] <timotimo> ... "my Int constant"? i didn't know that's valid syntax?

[22:33] *** snarkyboojum_ left
[22:34] <dalek> tablets: 57447dc | (Herbert Breunung)++ | docs/appendix- (2 files):

[22:34] <dalek> tablets: lines doesnt work on bare file names

[22:34] <dalek> tablets: review: https://github.com/perl6/tablets/commit/57447dc84e

[22:34] <Zoffix> m: say "This box is {157/55.220} times faster than my other box"

[22:34] <camelia> rakudo-moar 1761df: OUTPUT«This box is 2.843173 times faster than my other box␤»

[22:35] <Zoffix> rakudo parse stage took just 55 seconds

[22:35] <timotimo> "just"

[22:35] <Zoffix> Compared to 157 seconds :)

[22:35] <timotimo> oh lord

[22:35] <Zoffix> That means...

[22:36] <timotimo> it'd be nice if someone could sponsor a box for you that's another 3x faster ...

[22:36] <Zoffix> m: say "It'll take spectest to finish in {45/2.84} minutes instead of 45"

[22:36] <camelia> rakudo-moar 1761df: OUTPUT«It'll take spectest to finish in 15.845070 minutes instead of 45␤»

[22:36] *** FreezerburnV joined
[22:36] <timotimo> you've done such good work in the past

[22:36] <nine> hoelzro: PERL6LIB=lib perl6 --ll-exception -e 'use lib "t/spec/packages"; for <C A B> { my $comp-unit = $*REPO.need(CompUnit::DependencySpecification.new(:short-name("Example::$_"))); say $comp-unit.precompiled; };'

[22:36] <timotimo> sadly, i can't just snap my fingers and it'll happen :)

[22:36] <hoelzro> nine: I thought you were going to bed? ;)

[22:37] <nine> While brushing my teeth I realized that it's PERL6LIB because that gets inherited by the test program run by precompilation.t ^^^

[22:37] <nine> And indeed, that's the easiest way to reproduce

[22:37] <hoelzro> ahhhhh

[22:37] <hoelzro> nice catch

[22:38] <hoelzro> !

[22:38] *** lucasb joined
[22:38] <nine> So it's confirmed: I spent the whole of yesterday's evening chasing one bug. I just didn't realize that both issues were the same :)

[22:39] <nine> But at least I've now got an easy way to reproduce and with this I can sleep better :)

[22:39] <nine> really off now...

[22:39] <Zoffix> \o :)

[22:39] <lucasb> m: my Int constant x = 'abc'; say x.perl

[22:39] <camelia> rakudo-moar 1761df: OUTPUT«"abc"␤»

[22:39] <Skarsnik> what

[22:42] <Zoffix> m: my Int constant x = 'abc'; say x.WHAT

[22:42] <camelia> rakudo-moar 1761df: OUTPUT«(Str)␤»

[22:42] <Skarsnik> Totaly Int x)

[22:42] <Zoffix> :D

[22:42] *** cpage_ left
[22:42] <timotimo> constants and typechecks aren't so good.

[22:43] <geekosaur> yeh, I think something like that was already rakudobugged

[22:43] <lucasb> at least it can be used as code documentation

[22:43] *** zengargo1le is now known as zengargoyle

[22:44] <Zoffix> hah, well, actually on this box the spectest took just 5 minutes instead of the 45 ± 0–10 minutes before I noticed the throttle one froze :0

[22:44] <Zoffix> twice as many cores and I believe they're nearly twice as speedier than my other box too :)

[22:44] <timotimo> mhh

[22:45] *** Zoffix left
[22:46] *** MadcapJake joined
[22:46] <Skarsnik> why my cpu is tagged 3.4gh and windows says 3.8ghz, it's weird x)

[22:47] *** sno joined
[22:47] <ilmari> modern CPUs can burst individual cores to higher than the rated speed, if the total package power and thermal budget allows

[22:47] <ilmari> s/rated/nominal/

[22:48] <timotimo> right

[22:48] <timotimo> usually when only a single core is busy with something

[22:51] <ilmari> according to powertop my 2GHz Core i7 can boost to 2.6GHz

[22:51] <dj_goku> boost == overclock!

[22:52] <dalek> rakudo/nom: 8decbf2 | TimToady++ | src/Perl6/Actions.nqp:

[22:52] <dalek> rakudo/nom: correctly propagate known sink to while block in

[22:52] <dalek> rakudo/nom: 

[22:52] <dalek> rakudo/nom: re-speeds up:

[22:52] <dalek> rakudo/nom:     loop (my int $i; $i < 10000000; $i++) {}; say $i

[22:52] <dalek> rakudo/nom:     my int $i = 0; $i++ while $i < 10_000_000; say $i;

[22:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8decbf218d

[22:56] <jnthn> 'night, #perl6

[22:56] <TimToady> jnthn: did you see the note above?

[22:57] <jnthn> TimToady: Missed it, fighting with a stupid airline booking site :/

[22:57] * jnthn looks

[22:57] <TimToady> about orelse and defor

[22:57] * timotimo also missed it

[22:58] <jnthn> TimToady: Can't think of anything I'd have done like that, no

[22:58] <TimToady> it's like EXPR started working right...

[22:58] <TimToady> oh well, maybe I can look at it later

[22:58] <jnthn> TimToady: According to git log, the last thing I did with EXPR (which matches my own memory) is adding the missing non-assoc check

[22:58] <jnthn> So ++$a++ is an error

[22:58] <TimToady> don't really wanna change list assocs back to left assoc

[22:59] <jnthn> That was in October

[22:59] <TimToady> this is something since the 7th

[22:59] <jnthn> Dec?

[22:59] <diakopter> jnthn: did you know about jetairfly.com

[22:59] <TimToady> maybe it's something I did, but I dunno how

[22:59] <TimToady> okay, go to sleep now

[23:00] <jnthn> None of my patches to Grammar.nqp in the last days are anywhere near it either

[23:00] <jnthn> So yeah, innocent your honor ;)

[23:00] <Skarsnik> Here goes nothing

[23:01] <jnthn> diakopter: Well, it doesn't seem to think Prague exists, so... :P

[23:01] <dalek> Heuristic branch merge: pushed 22 commits to DBIish by Skarsnik

[23:01] <jnthn> 'night o/

[23:02] <Skarsnik> Not big ass message x)

[23:03] <Skarsnik> Good night, here :)

[23:04] *** Skarsnik left
[23:06] *** kid51 joined
[23:06] <TimToady> obligatory nap &

[23:08] *** jme` left
[23:09] *** cpage_ joined
[23:10] <diakopter> jnthn: yeah it's a small belgian airline.

[23:10] <diakopter> but they have flights from Miami to Brussels for ... 140 euros

[23:11] <diakopter> jnthn: hopefull you use google flights

[23:15] *** virtualsue joined
[23:17] *** lucasb left
[23:18] *** _nadim left
[23:19] *** virtualsue left
[23:19] *** jme` joined
[23:26] *** FROGGS left
[23:27] *** labster left
[23:29] *** vendethiel left
[23:31] *** espadrine left
[23:32] *** smls_ left
[23:34] <autarch> who controls the perl6 subreddit?

[23:35] <autarch> I'd greatly appreciate whoever does changing the link colors to something more like standard - every time I look at it I have no clue which links I've followed and which I haven't

[23:37] <timotimo> autarch: i can see if i have any way to do that

[23:37] *** regreg joined
[23:37] <timotimo> oh, so the problem isn't that they are too similar, it's that it isn't clear which one is which?

[23:37] <autarch> timotimo: exactly

[23:38] <autarch> unfollowed links should always be blue - followed links should be something darker than unfollowed

[23:38] <autarch> people who think that their site requires them to change this pattern are wrong

[23:38] <autarch> I note that perl6.org has this backwards, followed links are _brighter_ than unfollowed :(

[23:39] <autarch> or has perl6.org made them the same? also sinful

[23:39] <autarch> yeah, they're the same :(

[23:39] *** spider-mario left
[23:40] <autarch> I wonder if that's a bootstrap thing

[23:41] <AlexDaniel> autarch: I agree

[23:42] * AlexDaniel hates this as well. … And also has this problem on a couple of his websites (can't get my hands on it, dammit)

[23:42] *** FreezerburnV left
[23:42] <timotimo> https://gist.github.com/timo/59896e1df0b1e559979c - this is the exact stylesheet used

[23:42] <timotimo> go nuts

[23:45] <RabidGravy> getting near to the time that I am going to have to finish the advent post

[23:46] <timotimo> yeah, midnight was three quarters of an hour ago :)

[23:46] <autarch> https://gist.github.com/autarch/b993686fd624fc3407f0 - that's the standard browser link colors

[23:46] <timotimo> did you find all of the :visited ones?

[23:47] <timotimo> there's multiple ones, which suggests to me the whole .css wants to be rewritten :)

[23:47] <autarch> https://gist.github.com/autarch/b993686fd624fc3407f0 - all fixed, I think

[23:48] <timotimo> yeah, did we actually want to change the link colors in the header aka .title?

[23:48] <timotimo> is that even what .title is about?

[23:48] <autarch> I should make a flowchart for web design - "Are you consider changing link colors?" ... Yes -> "Don't do it" ... No -> "You are a good person"

[23:49] <autarch> timotimo: yes, the title class is actually for each link on the page, not for the page title

[23:49] <timotimo> oh!

[23:49] <timotimo> that's fair, then

[23:50] <timotimo> saved

[23:50] <timotimo> have a look, please

[23:50] *** konobi left
[23:51] *** konobi joined
[23:51] <RabidGravy> timotimo, I think UTC is fairer

[23:51] *** konobi is now known as Guest28147

[23:53] <timotimo> no idea what the site things

[23:53] <timotimo> thinks

[23:53] *** zengargoyle left
[23:53] <timotimo> anyway, the stats page says it's already the new day. which is good, because when each post is published on its own day, wordpress gets less confused

[23:53] <timotimo> or confuses me less

[23:53] *** zengargoyle joined
[23:53] <timotimo> anyway, RabidGravy++ for advent posting! :)

[23:54] <autarch> I just noticed that a site I maintained was using red for visited links ;)

[23:54] <autarch> timotimo: that's much better, thank you!

[23:56] <timotimo> you're welcome

[23:56] *** Psyche^_ joined
[23:58] *** rurban left
[23:58] <AlexDaniel> autarch: what if you don't like the default colors/styles ?

[23:59] <autarch> AlexDaniel: I was joking somewhat - really, as long as links are some blue and visited links are darker blue or purple, it's all good

[23:59] <autarch> and hovering on links should always do something

[23:59] *** lichtkind left
