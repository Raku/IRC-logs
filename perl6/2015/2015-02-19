[00:00] <ingy> Util: that reminds me, I need to cron the daily extraction of RosettaCodeData.git

[00:01] <ingy> Util: do you have any time at the moment?

[00:01] *** mohij left
[00:02] *** raiph joined
[00:02] <Util> ingy: Heading out with family; I will be around most of tomorrow, except 10:30-13:00 Central. Want to set a time?

[00:03] <ingy> what time do you start your day?

[00:04] <ingy> I can start at 7am PST generally

[00:04] <Util> ingy: I will be on at that time.

[00:05] <ingy> ok ping me :)

[00:05] <Util> Will do

[00:08] *** kjs_ left
[00:13] *** telex left
[00:14] *** telex joined
[00:18] <[Coke]> I agree with Util. By the time that happened, tuits were in shorter supply.

[00:18] *** rurban left
[00:23] *** BenGoldberg joined
[00:31] *** adu joined
[00:33] *** cbk1090 left
[01:04] *** jack_rabbit joined
[01:29] *** espadrine_ left
[01:52] *** Mouq joined
[01:57] *** Mouq left
[02:09] *** lichtkind left
[02:23] *** colomon left
[02:24] *** pdcawley left
[02:25] *** colomon joined
[02:38] *** grettir left
[02:41] <dalek> roast: aa5202f | TimToady++ | S32-num/base.t:

[02:41] <dalek> roast: explicit digits should produce trailing 0s

[02:41] <dalek> roast: review: https://github.com/perl6/roast/commit/aa5202f6e2

[02:42] <dalek> rakudo/nom: dae3f20 | TimToady++ | src/core/R (2 files):

[02:42] <dalek> rakudo/nom: explicit digits should produce trailing 0s

[02:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dae3f20dac

[02:43] <TimToady> oh, and b2gills++ for spotting that

[02:46] *** ilbot3 left
[02:48] *** ilbot3 joined
[02:53] *** PuercoPop joined
[03:02] *** noganex joined
[03:05] *** noganex_ left
[03:33] *** ggoebel111111114 left
[03:37] *** ggoebel111111114 joined
[03:43] *** crux left
[03:43] *** crux joined
[04:00] *** noganex_ joined
[04:03] *** noganex left
[04:31] *** rmgk left
[04:31] *** rmgk_ joined
[04:31] *** rmgk_ is now known as rmgk

[04:40] *** skids joined
[04:44] *** crux left
[04:54] *** kurahaupo left
[05:12] *** jakesyl left
[05:13] *** diana_olhovik joined
[05:18] *** BenGoldberg left
[05:19] *** BenGoldberg joined
[05:19] *** BenGoldberg left
[05:20] *** BenGoldberg joined
[05:24] *** BenGoldberg left
[05:24] *** BenGoldberg joined
[05:25] *** BenGoldberg left
[05:25] *** BenGoldberg joined
[05:26] *** BenGoldberg left
[05:27] *** BenGoldberg joined
[05:27] *** BenGoldberg left
[05:28] *** BenGoldberg joined
[05:46] *** wicope joined
[05:54] <TimToady> Util: one other problem is that some of the RC entries have to run for an hour or two to produce their output, so you might need tweaks that shrink the problem attempted

[05:55] <TimToady> or plan to burn a lot of CPU running one pass of tests

[05:56] <TimToady> some things run a lot faster these days, of course, but some of the problems are just NP-completish

[06:03] *** raiph left
[06:16] *** jack_rabbit left
[06:30] *** diana_olhovik left
[06:31] *** silug left
[06:40] *** bjz joined
[06:42] *** gfldex joined
[06:42] *** [Sno] left
[06:52] *** silug joined
[06:59] *** bjz left
[07:06] *** diana_olhovik joined
[07:08] *** BenGoldberg left
[07:14] *** jack_rabbit joined
[07:23] *** gfldex left
[07:27] *** bjz joined
[07:27] *** darutoko joined
[07:30] <FROGGS_> lizmat: parrot-7.0.1 fails to build on windows... trying 7.1.0 now (the release from tuesday)

[07:30] <yoleaux> 16 Feb 2015 23:19Z <lizmat> FROGGS_: alas, still the same errors  :-(

[07:31] <FROGGS_> lizmat: I can't even configure 7.1.0 >.<

[07:32] <FROGGS_> trying 7.0.2 now...

[07:32] *** kjs_ joined
[07:33] <FROGGS_> lizmat: 7.0.2 also fails :o(

[07:33] <FROGGS_> auto::sizes -         Determine some sizes...Der Befehl ".\test_1812.exe" ist entweder falsch geschrieben oder

[07:33] <FROGGS_> konnte nicht gefunden werden.

[07:33] <FROGGS_> so... that's it for parrot?

[07:33] <FROGGS_> bbiab

[07:33] *** dg left
[07:34] *** FROGGS_ left
[07:35] *** jack_rabbit left
[07:39] *** kaleem joined
[07:40] *** Sqirrel left
[07:43] *** [Sno] joined
[07:50] *** fhelmberger joined
[07:52] *** kjs_ left
[07:54] *** abraxxa joined
[07:55] *** fhelmberger left
[07:55] *** rindolf joined
[07:57] *** FROGGS joined
[07:58] *** jack_rabbit joined
[08:02] *** prime- joined
[08:04] *** zakharyas joined
[08:05] *** prime left
[08:06] *** virtualsue joined
[08:09] *** virtualsue_ joined
[08:09] *** pecastro left
[08:09] *** Ven joined
[08:11] *** virtualsue left
[08:11] *** virtualsue_ is now known as virtualsue

[08:11] *** rurban joined
[08:12] *** jakesyl joined
[08:13] <Ven> o/, #perl6

[08:14] *** jack_rabbit left
[08:26] *** _mg_ joined
[08:28] *** Rounin joined
[08:34] <nwc10> FROGGS: IIRC there was a 7.0.2 of parrot

[08:34] <nwc10> good UHT, #perl6 :-)

[08:36] <FROGGS> nwc10: aye: <FROGGS_> lizmat: 7.0.2 also fails :o(

[08:36] <nwc10> oh, oops. I missed that.

[08:36] <FROGGS> yeah...

[08:36] <FROGGS> dunno what to do now

[08:37] <FROGGS> maybe we can patch 7.1.0 locally, just to be able to provide a star.msi later

[08:42] <lizmat> good *, #perl6!

[08:42] <lizmat> yes, parrot not building on Win definitely throws a spanner in the works

[08:42] <lizmat> otoh, nobody has seemed to notice that breakage until now  :-(

[08:45] *** pdcawley joined
[08:53] *** dg joined
[08:53] *** bjz left
[08:54] *** alini joined
[08:59] <dalek> rakudo/nom: 33c137f | lizmat++ | docs/release_guide.pod:

[08:59] <dalek> rakudo/nom: Volunteer FROGGS for the March release  :-)

[08:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/33c137f701

[09:01] <lizmat> FROGGS: perhaps we need to fall back to an earlier parrot on Win ?

[09:03] <jnthn> lizmat: http://www.moarvm.org/ now has the 2015.02 release in place; timotimo++ for making it :)

[09:03] <lizmat> jnthn: cool

[09:04] *** telex left
[09:04] *** telex joined
[09:04] <dalek> nqp: 2eee369 | lizmat++ | tools/build/MOAR_REVISION:

[09:04] <dalek> nqp: Bump MOAR_REVISION to 2015.02

[09:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2eee369afe

[09:09] <FROGGS> lizmat: I'll try RELEASE_6_10_0 now

[09:11] *** _mg_ left
[09:13] *** virtualsue left
[09:14] <dalek> rakudo/nom: d79cae3 | lizmat++ | docs/announce/2015.02.md:

[09:14] <dalek> rakudo/nom: Copy of previous announcement

[09:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d79cae3586

[09:20] *** dakkar joined
[09:27] *** Foxcool left
[09:27] <dalek> rakudo/nom: aae8fb5 | lizmat++ | docs/announce/2015.02.md:

[09:27] <dalek> rakudo/nom: Initial work on the release announcement

[09:27] <dalek> rakudo/nom: 

[09:27] <dalek> rakudo/nom: Comments welcome!

[09:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aae8fb551f

[09:28] <lizmat> put into a separate diff for easier comparison ^^^

[09:28] <lizmat> afk for a few hours

[09:28] <lizmat> expect start working on the actual release around 2pm CET (3.5 hours from now)

[09:29] <lizmat> &

[09:35] <ab5tract> lizmat++

[09:35] *** adu left
[09:50] *** Ven left
[09:54] *** _mg_ joined
[09:57] *** pdcawley left
[09:58] <masak> good antenoon, #perl6

[10:00] *** virtualsue joined
[10:03] *** Ven joined
[10:03] *** diana_olhovik left
[10:04] *** diana_olhovik joined
[10:04] *** espadrine_ joined
[10:05] *** kaleem left
[10:08] *** pdcawley joined
[10:10] *** pecastro joined
[10:14] <timotimo> hello

[10:16] <jnthn> o/ timotimo 

[10:17] <Ven> o/, #perl6

[10:17] <nwc10> lizmat: you have two "really"s in the section about "final-or-not?". I tried to find a better wording for it, but so far I've failed.

[10:18] <nwc10> Possibly "Whether Parrot support can be restored at some point really depends..."

[10:24] <timotimo> jnthn: in order to make CAPS have integers rather than floats, i'd just sprinkle https://github.com/perl6/nqp/blob/master/src/QRegex/P6Regex/Actions.nqp#L776 with nqp::coerce_ni calls?

[10:24] <timotimo> mostly around the +%... parts, i'd expect

[10:25] <timotimo> how about the literal 1s and 2s? are they going to be integers?

[10:26] *** Foxcool joined
[10:30] <timotimo> nqp: say(nqp::lexprimspec(1)) # is that how?

[10:30] *** kaleem joined
[10:30] <timotimo> m: say "test"

[10:30] <timotimo> :o

[10:31] <jnthn> timotimo: Or see if we can get it doing ints from the start.

[10:33] <jnthn> timotimo: e.g. take an int $count

[10:35] <jnthn> timotimo: You probably want objprimspec there :)

[10:35] <jnthn> timotimo: Around the +% thing I may instead replace the + with nqp::add_i

[10:35] <jnthn> timotimo: But may also be possible to avoid the + at all

[10:36] <timotimo> nqp::elems instead, eh?

[10:36] <timotimo> ISTR there's an opt i made somewhere that'll turn prefix + into elems

[10:37] <timotimo> yeah

[10:37] <timotimo> chars, ord and elems are special-cased to return 1 for returns_int inside num_to_int

[10:37] *** bjz joined
[10:37] <timotimo> but prefix+ doesn't seem to have anything yet

[10:38] <timotimo> oh, wrong again

[10:39] <timotimo> the op "numify" will .returns(int) if its argument is a % or @ var

[10:40] <FROGGS> gah

[10:40] <FROGGS> I cannot build rakudo on parrot on windows because I'd need ICU

[10:41] *** _mg_ left
[10:41] <timotimo> you mean "an older parrot"?

[10:42] <jnthn> FROGGS: I think you can get ICU binaries; I've not tried it in a long time.

[10:42] *** Ven left
[10:42] <timotimo> i'm not actually sure the returns(int) helps at all here

[10:44] <FROGGS> timotimo: aye, 6.8.0

[10:44] <FROGGS> jnthn: will give it a try

[10:55] *** Ven joined
[10:59] *** grondilu joined
[11:00] <grondilu> can I begin complaining about the unavailability of FOSDEM videos or is it too soon?

[11:02] <FROGGS> grondilu: no, go ahead

[11:03] <grondilu> ouch, your straightforward answer disarmed me :)

[11:04] <grondilu> more seriously though, I keep being puzzled by how long it always takes.

[11:06] *** virtualsue left
[11:22] <masak> due to regulation they have to feed each frame of the video through a Jacquard loom. takes time.

[11:23] <timotimo> grondilu: no worries, the videos will be up soon after the FOSDEM, or maybe even while the FOSDEM is still running!

[11:28] *** bjz left
[11:30] *** Ven left
[11:39] <DrForr_> What he doesn't mention is he means the *next* FOSDEM.

[11:40] *** fhelmberger joined
[11:44] *** kaleem left
[11:45] <nwc10> grondilu: APW videos were up very quickly. But that was a side effect of us only paying for the most basic work - recording, but no editing, or splicing in the slides.

[11:45] *** xfix joined
[11:46] <nwc10> "us" - the sponsors, which IIRC for videos were dijkmat and the Vienna.pm verein.

[11:53] *** bjz joined
[11:57] *** bjz left
[12:21] *** _mg_ joined
[12:21] <lizmat> nwc10: well, not dijkmat, actually  :-)

[12:22] *** Ven joined
[12:22] <dalek> rakudo/nom: 49fe2bf | lizmat++ | docs/announce/2015.02.md:

[12:22] <dalek> rakudo/nom: really-- nwc10++

[12:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49fe2bf6dd

[12:22] <nwc10> lizmat: "perl6"?

[12:22] <lizmat> yeah..  something like that  :-)

[12:23] <lizmat> it's not really important  :-)

[12:24] <nwc10> it's somewhat important - I like sponsors, because I want them to get a warm fuzzy feeling and sponsor again.

[12:24] <nwc10> keep them addicted :-)

[12:24] *** bjz joined
[12:25] <lizmat> so it appears we lost rakudo on Parrot on Win since at least 23 January, and nobody noticed ?

[12:26] <FROGGS> lizmat:  seems so

[12:27] <FROGGS> ohh, perhaps I have an icu build in a minute

[12:27] <lizmat> and it's actually Parrot itself that doesn't build on Win, right?

[12:27] <FROGGS> yes

[12:27] <lizmat> so Parrot abandoned Win in January

[12:28] <lizmat> and didn't tell anybody about it  :-)

[12:28] <lizmat> *sigh*

[12:29] <jnthn> lizmat: I guess the "other notable changes" section is still to do?

[12:29] <lizmat> jnthn: yeah...

[12:30] <lizmat> I thought I'd do the things most up for discussion first

[12:32] <lizmat> trying to build blead on parrot perl 6.8.0

[12:32] <lizmat> s/perl//

[12:33] <FROGGS> for anybody that wants to build nqp with parrot and icu on windows:

[12:33] <FROGGS> download icu from http://site.icu-project.org/download/52 then unpack it to C:\icu

[12:33] <FROGGS> then: perl Configure.pl --backends=moar,jvm,parrot --gen-parrot --parrot-option="--icushared=\"C:\icu\lib64\icudt.lib C:\icu\lib64\icuuc.lib\" --icuheaders=C:\icu\include" --prefix=C:\nqp\install --make-install

[12:34] <FROGGS> I also say that because that is need for the one (me?) building the next star.msi

[12:36] <lizmat> ++FROGGS++

[12:38] <FROGGS> hehe

[12:40] <moritz> lizmat: wasn't there an incompatible change in how postcircumfix:<( )> is invoked? or was that alread in 2015.01?

[12:40] <moritz> lizmat: apart from that, I really like the announcement so far

[12:41] <lizmat> moritz: not sure... 

[12:41] <moritz> ah yes, first changelog entry

[12:42] <lizmat> after 2015.01 you mean?

[12:43] <dalek> rakudo/nom: b003eb2 | moritz++ | docs/announce/2015.02.md:

[12:43] <dalek> rakudo/nom: Release announcement: copy incompatible change from ChangeLog

[12:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b003eb206b

[12:43] <moritz> lizmat: I mean the first line f changelog currently in docs/ChangeLog

[12:43] <lizmat> moritz: yeah, gotcha now

[12:43] <moritz> but I've updated the announcement, so no further action required from you :-)

[12:44] <lizmat> except pulling before I go on  :-)

[12:44] <moritz> fwiw the 'no strict' indicators (like 6;) are also an incompatible change

[12:44] <moritz> that they were removed, I mean

[12:44] <lizmat> ah, yes....

[12:44] <moritz> though I hope nobody relied on them :-)

[12:46] <dalek> rakudo/nom: 900574f | moritz++ | docs/announce/2015.02.md:

[12:46] <dalek> rakudo/nom: Announcement: mention removed "no strict" markers

[12:46] <dalek> rakudo/nom: 

[12:46] <dalek> rakudo/nom: also elaborate on the invoke changes

[12:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/900574fc6a

[12:46] <moritz> lizmat: one more pull please :-)

[12:47] <FROGGS> I was asked to forward a job announcement, please read here if you are interested: https://www.reddit.com/r/forhire/comments/2wdsfb/hiring_front_end_developer_for_web_application/

[12:48] <dalek> rakudo/nom: 0f1f5a3 | lizmat++ | docs/announce/2015.02.md:

[12:48] <dalek> rakudo/nom: Incompatible change: 6; no longer no stricts

[12:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f1f5a3614

[12:48] <dalek> rakudo/nom: bf26daf | lizmat++ | docs/announce/2015.02.md:

[12:48] <dalek> rakudo/nom: Merge of my change, moritz++

[12:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bf26daf56c

[12:53] *** molaf__ joined
[12:55] *** molaf_ left
[12:57] <lizmat> hmmm....  compiling with parrot 6.8.0 works, but has spectest failures

[12:57] <lizmat> I guess one solution would be to fudge those tests

[12:57] <lizmat> 14 test fails, 1 todo passed, oddly enough

[12:58] *** alini left
[12:59] <lizmat> afk for a bit

[13:06] <grondilu> so now the only way to get no strict is to type 'no strict'?

[13:12] <lizmat> or feed it through -e

[13:13] <lizmat> and the latter is also under debate

[13:19] * masak opposes lax -e

[13:20] * jnthn opposes lax...he's mildy alergic, even...

[13:20] *** alini joined
[13:21] <nwc10> is that a fishy pun?

[13:21] <jnthn> 'fraid so :P

[13:21] <nwc10> there's a time and a plaice for those sort of things..

[13:22] <lizmat> haai five  (this for the Dutch among us :-)

[13:23] <masak> works in Swedish, too

[13:23] <jnthn> I was angling for a better pun, but codn't think of one...

[13:24] <masak> this topic is already floundering...

[13:24] <jnthn> It'd be brill if you didn't carp about it...

[13:25] <masak> sorry, that was my sole contribution.

[13:25] *** Kristien joined
[13:25] <Kristien> hi

[13:26] <lizmat> Kristien o/

[13:26] <masak> Crestfish \o

[13:26] <jnthn> You'll be herring no more of them from me...

[13:26] <nwc10> everyone is too busy making puns to write any cod :-(

[13:26] <lizmat> in shark contract to me

[13:27] <lizmat> *contrast

[13:27] <lizmat> *sigh*

[13:27] *** raiph joined
[13:27] * masak .oO( Eiffel typo )

[13:28] <lizmat> so, that state wrt to parrot:

[13:28] <jnthn> .oO( I'm not sure that was by design... )

[13:28] <Kristien> is there a way to get signal numbers from their names?

[13:28] <moritz> Kristien: yes!

[13:28] <Kristien> currently I hardcode pr_set_pdeathsig 1; but pr_set_pdeathsig SIGHUP; or something would be nicer.

[13:28] <lizmat> Kristien: put a + in front of them?

[13:28] <moritz> m: say +Signal::SIGHUP

[13:28] <Kristien> neat, thanks. let's try :)

[13:28] * masak learns that there's a type of fish called "false cat shark", which is related to the "gollumshark", and he's not even making this up

[13:28] <moritz> ENOCAMELIA

[13:29] <jnthn> masak: I learned about the humuhumunukunukuāpuaʻa but I'm struggling on a pun...

[13:29] <lizmat> $ 6 'say +SIGTERM'

[13:29] <lizmat> 15

[13:29] <masak> jnthn: hum hum, yes.

[13:30] <lizmat> actions wrt to parrot for the release:

[13:30] <lizmat> 1. fall back to 6.8.0, fudge failing spec tests

[13:30] <lizmat> 2. keep 7.1.0, ignore fail on win completely

[13:30] <lizmat> 3. forget about parrot 2015.02

[13:31] <lizmat> my preference would be 1 at the moment

[13:31] <moritz> +1 to 1

[13:32] <jnthn> lizmat: If 1 is not too much work, sounds like the best way to ship a release that can be broadly built and used on Parrot.

[13:33] <nwc10> sorry if this is a daft question, but why/how do 6.9.0..7.0.2 fail?

[13:34] <Kristien> m: say 6.9.0..7.0.2

[13:34] <nwc10> and of the options presented, (1) seems most pragmatic

[13:34] *** Kristien left
[13:35] <lizmat> nwc10: I don't know, they fail on Win, I'm told by FROGGS

[13:35] <lizmat> to be clear: parrot *itself* doesn't build

[13:36] <lizmat> 6.8.0 was the last version I've seen FROGGS try on Win

[13:36] <FROGGS> true

[13:36] <FROGGS> no, 6.10.0 actually

[13:36] <FROGGS> Using C:/nqp/install/bin/nqp-p (version 2015.01-58-g7ebbcb0 / Parrot 6.10.0).

[13:36] <FROGGS> Using C:\nqp\install/bin/nqp-j.bat (version 2015.01-58-g7ebbcb0 / Java(TM) 1.8.0_25).

[13:36] <FROGGS> Using C:\nqp\install\bin\nqp-m.bat (version 2015.01-58-g7ebbcb0 / MoarVM 2015.01-78-g5121acd).

[13:37] <lizmat> ok, I'll try with 6.10.0 on my machine then

[13:37] <nwc10> FROGGS: but 6.11.0 and 7.0.x didn't "work on my machine"?

[13:37] <FROGGS> nwc10: I'll create a bug report for 7.1.0 after running sanity tests for rakudo

[13:38] <FROGGS> nwc10: I only tested 7.0.1, 7.0.2 and 7.1.0, and these fail for different reasons

[13:39] *** vendethiel- joined
[13:39] *** vendethiel left
[13:41] *** kaleem joined
[13:46] *** skids left
[13:48] <ab5tract> fwiw, just watching the discussion i would edge towards 3. but i don't have any historical connection to parrot, good or bad.

[13:48] <ab5tract> but it seems like these things pop up too often, when there are better places to put time and care into rakudo

[13:49] <lizmat> well, in this case you can blame me, as I insisted on testing this release on Win

[13:49] <lizmat> if I hadn't, the release would have just gone out

[13:50] <lizmat> and maybe nobody would have noticed it didn't work on Win after all  

[13:50] <FROGGS> aye

[13:50] <psch> i don't think 3 is an option, tbh

[13:50] <psch> if only because pmichaud++ explicitly stated "suspended shortly after the 2015.02 release" on his blog

[13:51] <FROGGS> like the jvm+osx problems... there are just a few ppl that can notice at all... and when these skip a release nobody will ever know

[13:51] <lizmat> yeah, psch, but that was before we know *parrot* has been broken on Win for at least a month

[13:51] <lizmat> *knew

[13:51] <ab5tract> psch: i think that a small errata on that post is better than any more cycles wasted from #perl6

[13:52] <psch> lizmat: i know, but having at least a working parrot beats breaking that statement imo, and from the looks of it 6.8.0 (or even 6.10.0?) works, right?

[13:52] <ab5tract> but again that's just my opinion, and it's a different discussion in the broader context of rakudo + parrot

[13:52] <lizmat> psch: running spectest on 6.10.0 now

[13:52] <psch> of course, this is from the perspective that parakudo is spectest clean with that version

[13:52] <psch> if it's not i'd side with ab5tract here

[13:57] *** Kristien joined
[13:57] <ab5tract> right, if 6.10.0 passes fine then i would lean towards 1

[13:57] <ab5tract> but i think i don't think the bird deserves any more fudge :/

[13:57] <lizmat> spectesting parrot just takes a bit longer

[13:57] <Kristien> m: my $x = 1; $x &&= 0; say $x

[13:58] <Kristien> oh right camelia is dead

[13:58] <lizmat> $ 6 'my $x = 1; $x &&= 0; say $x'

[13:58] <lizmat> 0

[13:58] * ab5tract carefully uses an awkward guarded phrase composition

[13:58] <lizmat> .oO( Camelia standin )

[13:58] <ab5tract> lizmatbot++

[14:02] <lizmat> only 4 failures with 6.10.0

[14:02] *** andreoss joined
[14:02] <lizmat> and minor ones at that

[14:03] <FROGGS> and I finally am able to run the sanity tests...

[14:03] <FROGGS> so, that looks good

[14:03] <Kristien> is native stuff resolved at compile time?

[14:03] *** _mg_ left
[14:03] <Kristien> I want to select a different set of functions depending on OS X vs Linux

[14:03] <lizmat> and recent ones relating to TimToady work ok base-repeating and such

[14:04] <andreoss> japhb: i wonder if you had a chance to take a look at my pool request for perl6-bench 

[14:04] <FROGGS> lizmat: so, RELEASE_6_10_0 seem really like what we want to do

[14:04] <lizmat> in fact, those errors were recently fixed by TimToady, and I haven't pulled those yet

[14:05] <FROGGS> nice

[14:05] <lizmat> so looks like a clean spectest on 6.10.0

[14:05] <FROGGS> I'm going to ticket the 7.1.0 fails in a bit

[14:05] <lizmat> so, one final double check and then revert to 6.10.0

[14:05] <FROGGS> lizmat++

[14:11] <psch> lizmat++

[14:12] <lizmat> that one test-file now passes, running full one again to be really sure  :-)

[14:16] *** Ven left
[14:18] <dalek> rakudo/nom: 6dddb06 | lizmat++ | docs/announce/2015.02.md:

[14:18] <dalek> rakudo/nom: Mention NativeCall as an incompatible change

[14:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6dddb0639d

[14:18] <dalek> rakudo/nom: 1d2b01c | lizmat++ | docs/announce/2015.02.md:

[14:18] <dalek> rakudo/nom: Added "Other notable changes"

[14:18] <dalek> rakudo/nom: 

[14:18] <dalek> rakudo/nom: That would be the list for me.  Please let me know if you think something

[14:18] <dalek> rakudo/nom: is missing here.

[14:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d2b01c307

[14:20] <jnthn> lizmat: May be worth calling out some of the major performance improvements (your trans and subst work, the mixin 10x faster work)

[14:22] *** kaare_ left
[14:22] *** kaare_ joined
[14:23] <dalek> rakudo/nom: 0fa78df | lizmat++ | docs/announce/2015.02.md:

[14:23] <dalek> rakudo/nom: Added major performance improvements

[14:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0fa78df5eb

[14:24] <lizmat> sanity/spectest on parrot 6.10.0 ok

[14:26] <grondilu> m: my @t = 60, 60, 24; say ([+] 1, 2, 3 Z* @t).polymod(@t)

[14:26] *** Ven joined
[14:27] <lizmat>  6 'my @t = 60, 60, 24; say ([+] 1, 2, 3 Z* @t).polymod(@t)

[14:27] <lizmat> > '

[14:27] <lizmat> 12 4 0 0

[14:28] <dalek> nqp: e433235 | lizmat++ | tools/build/PARROT_REVISION:

[14:28] <dalek> nqp: Revert Parrot to 6.10.0

[14:28] <dalek> nqp: 

[14:28] <dalek> nqp: During the release process of 2015.02, (which will be the last Rakudo compiler

[14:28] <dalek> nqp: release on parrot for quite some time to come), it became clear that the

[14:28] <dalek> nqp: Parrot 7.x series does *not* build on Windows.  In order to not hold up the

[14:28] <dalek> nqp: Rakudo release process, it was decided to revert the Parrot version to 6.10.0,

[14:28] <dalek> nqp: the last version known to build on Windows *and* pass the Rakudo sanity test

[14:28] <dalek> nqp: as well as the spectest.

[14:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e433235aea

[14:30] * grondilu does not understand this polymod function

[14:34] <lizmat> $ 6 'say 93784.polymod(60,60,24)'

[14:34] <lizmat> 4 3 2 1

[14:34] <lizmat> 93784 seconds is 1 day, 2 hours, 3 minutes and 4 seconds

[14:34] <grondilu> but here 4 is a remainder, not a quotient, isn't it?

[14:35] <lizmat> yes

[14:35] <grondilu> ok

[14:35] <lizmat> 1 x 60 x 60 x 24 + 2 x 60 x 60 + 3 x 60 + 4 = 93784

[14:37] <dalek> nqp: 2c6dfc3 | lizmat++ | VERSION:

[14:37] <dalek> nqp: bump VERSION to 2015.02

[14:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2c6dfc31b4

[14:37] <grondilu> ok, finally got it:

[14:37] <grondilu> $ perl6 -e 'my @t = 60, 60, 24; say ([+] 4, 3, 2, 1 Z* [\*] 1, @t).polymod(@t)'

[14:37] <grondilu> ^ 4, 3, 2, 1

[14:40] <lizmat> argh, I screwed up the version on parrot

[14:40] *** Kristien left
[14:41] <lizmat> moritz FROGGS : I'm thinking of reverting the last 2 nqp releases

[14:41] <lizmat> and then redo them properly

[14:41] <lizmat> jnthn ^^^ opinions ?

[14:41] <moritz> NOOOO

[14:41] <jnthn> lizmat: Huh, why?

[14:41] <moritz> releases are releases. They are released to the wild. You can't undo them

[14:42] <jnthn> lizmat: If something wasn't done right, juts do it right in this release.

[14:42] <moritz> people have installed them

[14:42] <lizmat> I bumped parrot to 6.10.1

[14:42] <lizmat> moritz: this is nqp, it was just a commit, not a tag

[14:42] <moritz> lizmat: the last two releases include 2015.01, no?

[14:42] <grondilu> hum, so polymod is something I can use to get the decomposition in a base > 36.  Good to know.

[14:42] <grondilu> my @t = 60, 60, 24; say ([+] 4, 3, 2, 1 Z* [\*] 1, @t).polymod(@t)

[14:42] <grondilu> oops

[14:42] <moritz> lizmat: or did you mean the last two commits?

[14:43] <grondilu> I meant:  say ([+] ^10 Z* [\*] 1, 256 xx *).polymod(256 xx *);

[14:43] <lizmat> the last 2 commitys

[14:43] <lizmat> commits

[14:43] <moritz> lizmat: did you push the tag already?

[14:43] <lizmat> no

[14:43] <moritz> good

[14:43] <moritz> then reverting or force-pushing them away is fair game, IMHO

[14:43] <lizmat> that's what I hoped  :-)

[14:44] <jnthn> Still don't get why to revert, though. The VERSION update is surely fine, and if the PARROT_REVISION one was wrong then can just fix it in a follow-up commit...unless you really do want what was there before.

[14:44] <moritz> I thought you meant to undo the 2015.01 and 2014.12 release

[14:44] <FROGGS> how? go back into time?

[14:44] <jnthn> No reason to revert VERSION though.

[14:45] <lizmat> jnthn: so ok to just update PARROT_REVISION, as it it still before the tag?

[14:45] <moritz> lizmat: that works

[14:45] <FROGGS> right, every commit before the tag is fine

[14:45] <moritz> lizmat: the tag is authorotative, not the commit that updates VERSION

[14:45] <lizmat> ok

[14:46] <jnthn> lizmat: Sure, if you updated it wrongly in the last commit, just make another one to fix it. It's only when you tag (well, push the tag strictly) that you identified "this is the released thing"

[14:46] <lizmat> ack, thanks everybody++

[14:47] <dalek> nqp: 33a16d2 | lizmat++ | tools/build/PARROT_REVISION:

[14:47] <dalek> nqp: Actually revert to 6.10.0, instead of 6.10.1

[14:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/33a16d2a3a

[14:48] *** Khisanth left
[14:49] *** Khisanth joined
[14:51] *** kaleem left
[14:55] * grondilu modified http://rosettacode.org/wiki/SHA-256#Perl_6 to use polymod.

[14:55] <grondilu> ^ quite possibly other hash functions can use this.

[14:58] <FROGGS> nwc10: I filed an issue for parrot 7.1.0: https://github.com/parrot/parrot/issues/1203

[15:00] <lizmat> moritz: I copied the manifest: and release: targets from the Parrot makefile to the Moar makefile

[15:00] <lizmat> now I get: $ make release 2015.02

[15:00] <lizmat> Makefile:344: *** missing separator.  Stop.

[15:00] <FROGGS> you did what?

[15:01] <lizmat> moritz: which is     echo MANIFEST >MANIFEST

[15:01] <lizmat> the parrot makefile was the only one with the "make release" target

[15:02] <lizmat> after this release, we won't be building parrot anymore, so we can't make the release tar anymore

[15:02] <moritz> lizmat: "missing separator" could mean that you have spaces instead of tabs somewhere

[15:02] <FROGGS> well, you configure for all backends, and then you run `make manifest` IIRC

[15:02] <FROGGS> or did I miss something?

[15:02] <lizmat> ah, that could be it...  checking...

[15:03] <lizmat> well, all backends won't include parrot anymore in the future

[15:03] <FROGGS> true

[15:03] <FROGGS> but I'm wondering why you do that now

[15:04] <lizmat> because I'm bored waiting for builds / tests to complete  :-)

[15:04] <FROGGS> ahh :o)

[15:05] <PerlJam> greetings #perl6-lings

[15:05] <lizmat> PerlJam o/

[15:05] <FROGGS> hi PerlJam 

[15:05] <moritz> lizmat: cut&paste-moving the 'manifest' and 'release' blocks from the Parrot to the Moar Makefile.in worked for me

[15:07] * PerlJam got a linkedin request from a "food supervisor at the Federal Beureau of Prisons"

[15:07] <PerlJam> That's totally bizarre.

[15:08] <FROGGS> hehe

[15:11] <lizmat> especially the "Beureau" part, that's truly PinkPantheresque

[15:12] <moritz> lizmat: should I commit+push the working, moved release generator code for you?

[15:12] <lizmat> moritz: please do

[15:13] <PerlJam> lizmat: ooc, what editor were you using to paste the makefile targets into?

[15:14] <lizmat> vi

[15:14] <lizmat> with a setting that converts tabs to spaces :-)

[15:14] <psch> :set paste

[15:14] <psch> ;)

[15:14] <psch> although i suppose if it converts on :w that doesn't help :)

[15:15] <dalek> rakudo/nom: 313ea7b | moritz++ | tools/build/Makefile- (2 files):

[15:15] <dalek> rakudo/nom: Move "manifest" and "release" targets to MoarVM Makefile template

[15:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/313ea7b6b0

[15:15] * moritz used vi, but only vi's cut&paste, not the OSes

[15:16] *** Rounin left
[15:17] <PerlJam> The makefile syntax highlighter for vi(m) shows the rules in a nice red color when there are leading spaces rather than tabs too.

[15:18] <PerlJam> (makes the invisible visible is one of the better uses of highlighting)

[15:19] <PerlJam> s/makes/making/

[15:20] <Util> FROGGS: I updated GH#1203

[15:20] <Util> ingy: ping

[15:20] * moritz also often search for t, and sets hls on

[15:21] *** Ven left
[15:21] *** Ven joined
[15:23] * grondilu did not know about :set paste and is a bit annoyed to acknowledge that he still has lot to learn about Vim

[15:24] <psch> grondilu: :set list fits the current discussion as well (which i also had to look up, i rarely need it)

[15:24] <moritz> grondilu: I have a feeling that vim offers about as many corners to learn as perl :-)

[15:25] *** ingy^ joined
[15:26] *** ingy^ is now known as ingy^util

[15:26] <PerlJam> grondilu: don't be annoyed.  There's always more to learn.

[15:27] * arnsholt even has a keybinding to toggle paste mode

[15:27] *** MadcapRusso joined
[15:28] <pmichaud> (Parrot RELEASE_6_10_0)   I never understood why we bumped the Parrot version from 6_10_0 in the first place.

[15:28] <yoleaux> 17 Feb 2015 05:47Z <[Coke]> pmichaud: do you have a list of tickets that will/should be addressed by the list work?

[15:28] <lizmat> pmichaud: because I am an optimist ?

[15:29] <pmichaud> lizmat: :)

[15:29] <pmichaud> the rule has always been to stick with the oldest version of parrot that will support current rakudo

[15:29] <pmichaud> and we only bump when a newer parrot has a capability we need

[15:29] <lizmat> well, the former was true on my system

[15:30] <lizmat> the latter, well, I guess I ignored that one

[15:30] *** MadcapJake left
[15:30] <abraxxa> someone knows more about a Perl 6 release than we do (in version 0.02): https://metacpan.org/changes/distribution/Net-IP-LPM

[15:30] <lizmat> anyway, we're going to have a release that includes NativeCall, on parrot nonetheless  :-)

[15:31] <FROGGS> Util: I replied... for some reason there is no test_3108.exe

[15:33] * grondilu modified http://rosettacode.org/wiki/SHA-1#Perl_6 to use polymod as well.

[15:37] <masak> TimToady: CHECK in a quasi? LINK in a quasi? do both of these run as soon as the Qtree returned from the macro has been spliced into the site of the call?

[15:39] * jnthn notes that NativeCall has made it into the Rakudo repo almost exacty 5 years after he and mberends++ began work on it :)

[15:40] <FROGGS> jnthn: wow, five years aleady...

[15:45] <jnthn> Yeah. Soon we should send it to get edukashuns...

[15:46] <FROGGS> I had to read it three times to get it :o)

[15:48] *** Kristien joined
[15:49] <Kristien> $ 6 { 0b10 => 'C', 0b01 => 'P', 0b00 => 'A' }{True +< 1 +| False}

[15:50] <Kristien> hmm

[15:50] <Kristien> very nice

[15:53] <Kristien> I was afraid at first that 0b10 would be the string "0b10" here

[15:56] <lizmat> BTW, do we know what happened to camelia ?

[15:59] *** telex left
[15:59] <Kristien> No.

[16:00] *** telex joined
[16:01] <masak> Kristien: that's the difference between how numbers are represented in code versus how they are represented when stored.

[16:01] <masak> or "when stringified", more exactly.

[16:01] <Kristien> I thought it may be a bareword.

[16:01] <Kristien> instead of an integer literal

[16:01] <Kristien> I know the difference between value and representation. :P

[16:01] <masak> it's only a bareword if it starts with an alpha, I think :)

[16:02] <masak> and even then, Perl 6 doesn't *really* have barewords, just an auto-quoting mechanism for pair keys.

[16:05] <Ven> "TimToady: 	of the four or five ways a compiler can cheat, Perl 5 uses about eight of them" hahahhaa

[16:05] * ingy and Util pairing on RosettaCodeData. Plan is to merge our code, and make https://github.com/acmeism/RosettaCodeData always up to date

[16:06] <ingy> and Util take over the project

[16:07] *** [Sno] left
[16:08] <dalek> perl6-roast-data: 81d36fe | coke++ | / (5 files):

[16:08] <dalek> perl6-roast-data: today (automated commit)

[16:08] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/81d36fe10d

[16:10] <Kristien> Ven: link

[16:11] <Ven> Kristien: http://irclog.perlgeek.de/perl6/2013-01-10#i_6318090

[16:11] <Kristien> lexing is the most boring job in the world

[16:14] <Kristien> speaking of which I have to make a lexer ASAP

[16:14] <Kristien> or rather generate one

[16:14] <arnsholt> In Perl 6, or just in general?

[16:14] <Kristien> C++

[16:15] <arnsholt> Just use flex

[16:15] <Kristien> but I'll probably just use flex

[16:15] <FROGGS> :D

[16:15] <arnsholt> Best way I know =)

[16:15] <lizmat> the nqp tar fiile doesn't allow build of JVM: https://gist.github.com/anonymous/c86c00b052cc3c4c724c

[16:15] <lizmat> suggestions welcome

[16:16] <jnthn> lizmat: All the things it can't find were recently added.

[16:16] <lizmat> so the manifest is incorrect ?

[16:17] <jnthn> That'd be my guess

[16:18] *** Kristien left
[16:18] <lizmat> https://gist.github.com/lizmat/b05e456a0a2c03907988  # the MANIFEST

[16:18] <jnthn> git ls-files certainly lists it

[16:19] *** abraxxa left
[16:19] <jnthn> lizmat: Agree it's missing from the gist you just pasted

[16:19] <jnthn> wat...

[16:19] <jnthn> You didn't have an old manifest file lying around, maybe?

[16:20] <lizmat> could well be

[16:20] <lizmat> lemme try that again

[16:21] <lizmat> yup, removing the MANIFEST file regenerated it

[16:21] <jnthn> ok :)

[16:22] * lizmat starts another cycle of building, making and testing

[16:23] <lizmat> yeah, this also solves the problem I saw with generating the tar-file for rakudo

[16:23] *** robinsmidsrod joined
[16:23] <lizmat> feels to me the MANIFEST should be regenerated always

[16:25] <jnthn> *nod*

[16:25] <jnthn> Though make clean clearing it away should help too

[16:27] <jnthn> Also it's not clear to me why it doesn't already work

[16:27] <jnthn> Oh...is your file system case-insensitive?

[16:27] <jnthn> manifest:

[16:27] <jnthn>    echo MANIFEST >MANIFEST

[16:27] <lizmat> jnthn: yes

[16:27] <jnthn> It may confuse manifest (target) and MANIFEST (generated file) if so.

[16:27] <lizmat> $ make manifest

[16:27] <lizmat> make: `manifest' is up to date.

[16:28] <jnthn> I guess changing the target name works

[16:28] <jnthn> maniparty or something

[16:28] <jnthn> :P

[16:28] <lizmat> I've added MANIFEST to realclean

[16:28] <jnthn> That also helps :)

[16:28] <lizmat> that is one of the steps

[16:29] <jnthn> Ah, then it's fine.

[16:32] *** gfldex joined
[16:34] *** zakharyas left
[16:34] <dalek> nqp: ec45651 | lizmat++ | tools/build/Makefile-Parrot.in:

[16:34] <dalek> nqp: Add MANIFEST to realclean

[16:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ec45651b06

[16:34] <dalek> nqp: 51dcca1 | lizmat++ | tools/build/Makefile- (2 files):

[16:34] <dalek> nqp: Move some make logic from Parrot to Moar

[16:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/51dcca1661

[16:35] *** jschulz is now known as dozer

[16:36] *** dozer is now known as jschulz

[16:36] <jnthn> dinner &

[16:37] <dalek> doc: b252e5d | moritz++ | lib/Language/functions.pod:

[16:37] <dalek> doc: Add examples for custom (post)circumfix operators

[16:37] <dalek> doc: review: https://github.com/perl6/doc/commit/b252e5d294

[16:39] <dalek> doc: 9f0fc40 | moritz++ | lib/Language/functions.pod:

[16:39] <dalek> doc: Precedence of custom operators

[16:39] <dalek> doc: review: https://github.com/perl6/doc/commit/9f0fc40e9d

[16:43] *** jschulz is now known as jny

[16:43] *** jny is now known as jschulz

[16:46] *** skids joined
[16:51] *** diana_olhovik left
[16:53] <dalek> rakudo/nom: b52ab63 | lizmat++ | tools/build/Makefile-common.in:

[16:53] <dalek> rakudo/nom: Make sure we realclean out any MANIFEST as well

[16:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b52ab632c3

[16:54] <dalek> rakudo/nom: ed906f6 | lizmat++ | src/core/tai-utc.pm:

[16:54] <dalek> rakudo/nom: We got a new leap second, hurray!

[16:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed906f6073

[16:56] *** amaliapomian joined
[16:56] *** Mouq joined
[16:57] <dalek> rakudo/nom: 50bf615 | lizmat++ | docs/announce/2015.02.md:

[16:57] <dalek> rakudo/nom: Add this month's contributors

[16:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/50bf615d70

[17:00] *** alini left
[17:04] *** zakharyas joined
[17:04] <dalek> rakudo/nom: fba6e2d | lizmat++ | tools/build/NQP_REVISION:

[17:04] <dalek> rakudo/nom: Bump NQP_REVISION for release 2015.02

[17:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fba6e2d908

[17:04] <dalek> rakudo/nom: 05f6396 | lizmat++ | VERSION:

[17:04] <dalek> rakudo/nom: Bump VERSION for release 2015.02

[17:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/05f63967a2

[17:05] *** FROGGS left
[17:07] *** Ugator joined
[17:11] <lizmat> afk for some r&r

[17:13] *** pecastro left
[17:17] <timotimo> no tag pushed yet, though?

[17:17] *** Ven left
[17:17] *** Ven joined
[17:17] *** Kristien joined
[17:20] <hoelzro> lizmat++

[17:20] <hoelzro> does anyone here know much about Debian packaging?

[17:21] <hoelzro> I created some package stuff for MoarVM, nqp, and rakudo last night, and I was wondering if I should stick them into the repos

[17:21] *** Ven left
[17:22] *** [Sno] joined
[17:24] <TimToady> masak: I would think that CHECK and LINK, when mentioned at compile time, just get processed at the same time as normal CHECK and LINK blocks, that is, just are queued up normally at splice time, awaiting the end of compilation phase for unit or application, respectively

[17:25] <TimToady> quasis are just another way to write generic code that doesn't mean anything specific till instantiated, which for a macro is splice time

[17:27] <Kristien> aloha!

[17:28] *** camelia joined
[17:29] <nine_> Feb 18 22:18:36 ns1 systemd[1]: [email@hidden.address] start request repeated too quickly, refusing to start.

[17:30] *** ChanServ sets mode: +v camelia

[17:31] <Kristien> m: say 'hi'

[17:31] *** camelia left
[17:32] <nine_> Feb 19 18:31:06 ns1 bash[7310]: Can't fork(): Resource temporarily unavailable at lib/EvalbotExecuter.pm line 109.

[17:34] *** Kristien left
[17:35] *** camelia joined
[17:36] <nine_> m: say "I'm back!"

[17:36] *** raiph left
[17:37] *** ChanServ sets mode: +v camelia

[17:37] <camelia> rakudo-moar 313ea7: OUTPUT«I'm back!␤»

[17:38] <nine_> Upped LimitNProc for the service from 20 to 30

[17:38] <TimToady> m: say 5e0.base(2,20)

[17:38] <camelia> rakudo-moar 05f639: OUTPUT«101.00000000000000000000␤»

[17:41] *** spider-mario joined
[17:41] *** espadrine_ left
[17:41] *** mohij joined
[17:42] <lizmat> timotimo: tag for NQP was pushed, not sure why dalek didn't tell

[17:43] <lizmat> afk again&

[17:46] <moritz> lizmat: dalek only reports commits, not tags

[17:47] *** robinsmidsrod left
[17:47] *** robinsmidsrod joined
[17:53] *** dakkar left
[17:59] <timotimo> for nqp, fair enough, but not for rakudo?

[18:01] *** smls joined
[18:01] <smls> o/

[18:03] <smls> Can some one who knows the Perl 6 grammar rules well, check if my reply here is factually accurate: http://www.perlmonks.org/?node_id=1117227

[18:05] <lizmat> timotimo: still testing the tarball for rakudo

[18:05] <lizmat> afk until that's done

[18:08] <Mouq> smls: Looks good to me :) "operator does not have a candidate for that object's type" might not be clear language to 5ers though

[18:09] *** diana_olhovik_ joined
[18:12] <smls> Mouq: "operator has not been overloaded for that object's type" maybe?

[18:13] *** espadrine_ joined
[18:13] <japhb> .tell andreoss Apologies for not getting back to you about the perl6-bench PR.  OK, blocking problems: The change to minibenchmarks.pl changes every line in the file (do you have auto-reformat on in your editor?), and the merge-sort files are missing

[18:13] <yoleaux> 18 Feb 2015 15:29Z <timotimo> japhb: can we somehow get a test into perl6-bench that's very different from the other tests? i'm thinking of "maxrss used for starting up a repl and immediately killing it" and "maxrss used for 'say(1)'"

[18:13] <yoleaux> japhb: I'll pass your message to andreoss.

[18:14] <japhb> .ask timotimo Do you know a portable way to capture maxrss?  If so, I'll just include that in the captured information about *every* test.

[18:14] <yoleaux> japhb: I'll pass your message to timotimo.

[18:15] *** grettir joined
[18:15] <itz> hoelzro: someone was asking about debian packaging on a mailing list a few months back

[18:15] <hoelzro> yeah?

[18:16] <itz> I'll see if I can find details

[18:16] <japhb> To anyone in general who is interested in getting more benchmarks (or features) into perl6-bench: I'm (very!) happy to take PR's.  I tend to be a bit scatterbrained about followup, so PLEASE feel free to ping me.  I'd rather have the contributions than people being overly-polite.  :-)

[18:19] *** Mouq left
[18:20] <timotimo> japhb: i do not, sadly

[18:20] <yoleaux> 18:14Z <japhb> timotimo: Do you know a portable way to capture maxrss?  If so, I'll just include that in the captured information about *every* test.

[18:20] <itz> hoelzro: https://ddumont.wordpress.com/2014/07/18/looking-for-help-to-package-perl6-moar-and-others-for-debian/

[18:20] <hoelzro> oh, I hadn't realized someone had done this

[18:21] <TimToady> m: sub infix:<＜>($a,$b) is equiv(&infix:<==>) { $a < $b }; say 42＜43

[18:21] <camelia> rakudo-moar 05f639: OUTPUT«True␤»

[18:21] <TimToady> m: sub infix:<＜>($a,$b) is equiv(&infix:<==>) { $a < $b }; say 42＜43＜44

[18:21] <camelia> rakudo-moar 05f639: OUTPUT«True␤»

[18:21] <itz> hoelzro: I doubt 

[18:21] <itz> oops

[18:21] <TimToady> .u ＜

[18:21] <yoleaux> U+FF1C FULLWIDTH LESS-THAN SIGN [Sm] (＜)

[18:21] <itz> hoelzro: I doubt its up to date even

[18:21] <hoelzro> probably not

[18:21] <hoelzro> but it's probably better than what I have =)

[18:21] <TimToady> we can get it down to halfspace on either side of < :)

[18:21] <hoelzro> I have working packages for 2015.01, but lintian is mad at them

[18:21] <TimToady> well, quarterspace on either side

[18:22] <hoelzro> and I had to do some stupid patches for MoarVM

[18:22] <itz> https://packages.debian.org/sid/rakudo

[18:23] <itz> wtf is "sh4" arch?

[18:23] <smls> TimToady: :P

[18:24] *** _mg_ joined
[18:24] <itz> looks like it was built on Dreamcast in 2011 :)

[18:25] <TimToady> m: sub infix:<＜>($a,$b) is equiv(&infix:<==>) { $a < $b }; say -2＜-1＜0

[18:25] <camelia> rakudo-moar 05f639: OUTPUT«True␤»

[18:25] <TimToady> yes, it really is chaining

[18:25] <japhb> timotimo: What is the (Unicode) reason for FULLWIDTH LESS-THAN SIGN?

[18:25] <japhb> er

[18:25] <japhb> TimToady: 

[18:25] <japhb> Dang tab-complete fail

[18:26] *** FROGGS joined
[18:26] <timotimo> japhb: if we can't portably do maxrss, what will we do? :(

[18:26] <japhb> (You can tell who is using irssi ...)

[18:26] <TimToady> they have fullwidth of most of ASCII

[18:26] <timotimo> also, the memory usage numbers reported by windows and linux seem to differ by the amount of shared memory in use or something like that

[18:28] <TimToady> .u fullwidth

[18:28] <yoleaux> U+FF01 FULLWIDTH EXCLAMATION MARK [Po] (！)

[18:28] <yoleaux> U+FF02 FULLWIDTH QUOTATION MARK [Po] (＂)

[18:28] <yoleaux> U+FF03 FULLWIDTH NUMBER SIGN [Po] (＃)

[18:28] *** Rounin joined
[18:28] <japhb> timotimo: Well, I can fall back to using a platform-dependent way of checking maxrss if there is still a reliable-way per-platform.  I've been trying to avoid any platform dependencies, but waddyagonnado if there is just no substitute?

[18:30] *** Mouq joined
[18:30] <smls> japhb: Probably so you can use those interpunctuation characters in Chinese text without breaking the layout

[18:33] *** Foxcool left
[18:34] <TimToady> yes, note that all CJK characters (except explicit HALFWIDTH) are supposed to be square

[18:34] <TimToady> so they work both vertically or horizontally

[18:34] *** Foxcool joined
[18:35] <andreoss> japhb: i just did one more commit that is supposed to fix the problems your mentions. is it ok? or should i redo it in a new branch?

[18:35] <yoleaux> 18:13Z <japhb> andreoss: Apologies for not getting back to you about the perl6-bench PR.  OK, blocking problems: The change to minibenchmarks.pl changes every line in the file (do you have auto-reformat on in your editor?), and the merge-sort files are missing

[18:37] <andreoss> auto-reformat was done by perl-tidy, this time i tried to visually stick with the style the code already has, but if you use perltidy, please provide .perltidyrc so i could indent my code iwth it. 

[18:37] <japhb> TimToady, smls: Ah, OK

[18:38] <TimToady> makes it easier to do crosswords too :)

[18:39] <japhb> andreoss: I don't use perltidy; I haven't actually tried, but I'd be somewhat surprised if any tidying program can handle the eccentric way I format most code.  :-)

[18:39] <japhb> TimToady: Heh

[18:39] <japhb> Looking at PR now

[18:44] <japhb> andreoss: Pretty good, just one more minor change: I don't think you want "scaling  => 'linear'," for those tests.  That's used for benchmarks whose running time is a fast-increasing function of SCALE (e.g. exponential), telling timeall to increase SCALE more slowly than its normal exponential ramp-up.

[18:44] *** alini joined
[18:44] <TimToady> m: print "$_\x20de" for "\xff21".."\xff3a"

[18:44] <camelia> rakudo-moar 05f639: OUTPUT«Ａ⃞Ｂ⃞Ｃ⃞Ｄ⃞Ｅ⃞Ｆ⃞Ｇ⃞Ｈ⃞Ｉ⃞Ｊ⃞Ｋ⃞Ｌ⃞Ｍ⃞Ｎ⃞Ｏ⃞Ｐ⃞Ｑ⃞Ｒ⃞Ｓ⃞Ｔ⃞Ｕ⃞Ｖ⃞Ｗ⃞Ｘ⃞Ｙ⃞Ｚ⃞»

[18:45] <TimToady> eh?

[18:45] <TimToady> major UTF-8 feyl

[18:45] <TimToady> is okay in the logfile though

[18:46] <moritz> my terminal doesn't like it

[18:46] <moritz> firefox does

[18:46] <TimToady> my terminal likes it locally, so maybe something in irssi

[18:46] <TimToady> looks like a very bug

[18:47] <TimToady> it's doing the boxed doublewidth okay, but then pulling a U+00ff out of somewhere

[18:47] *** Kristien joined
[18:47] *** [Tux] left
[18:47] <japhb> timotimo (and anyone else interested in getting maxrss from benchmarks): Can you paste the output somewhere of: /usr/bin/time -v perl6 -e 'await do for ^16 { start { my $i; while ++$i < 1_000_000 { }; say $i } }'

[18:47] <jdv79> am I correct when I say doc.perl6.org is missing exception handling?

[18:47] <japhb> on any unix-like platforms you have?

[18:48] <Kristien> jdv79: yes

[18:48] <TimToady> well, the box isn't lining up very well with the doublewidth anywhere though

[18:48] *** Foxcool left
[18:48] <Kristien> doc.perl6.org is a domain name and domain names don't handle exceptions

[18:48] * TimToady wonders if there's a CJK box somewhere

[18:48] <andreoss> japhb: with scaling => 'exponential' are any additional parametrs required?

[18:49] <japhb> andreoss: Just skip the scaling line completely.  Let it use the defaults.

[18:49] <japhb> timotimo: Also confirm if your /usr/bin/time supports -o FILE and -f FORMAT options

[18:49] <FROGGS> o/

[18:50] <moritz> \o FROGGS 

[18:50] <japhb> o/

[18:51] <TimToady> anyway, apart from alignment issues, looks like you could do a crossword with square characters and the combining enclosing square

[18:51] *** [Tux] joined
[18:51] * jnthn back

[18:51] <TimToady> dunno if there's a big enough black square though

[18:51] <FROGGS> these characters look good in my xchat on ubuntu

[18:52] <andreoss> japhb: done

[18:53] <TimToady> FROGGS: are the letters in the middle of the squares?

[18:53] <japhb> ooh, live-updated on the github page, no need to refresh.

[18:53] <dalek> perl6-bench: 0719587 | local++ | minibenchmarks.pl:

[18:53] <dalek> perl6-bench: Merge sort benchmark

[18:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/0719587286

[18:53] <dalek> perl6-bench: 01a52a7 | local++ | perl (2 files):

[18:53] <dalek> perl6-bench: Insertion sort benchmark

[18:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/01a52a7103

[18:53] <dalek> perl6-bench: 136a61e | (Andrei Osipov)++ | / (3 files):

[18:53] <dalek> perl6-bench: Added missing merge-sort files, fixed indendation in minibenchmarks.pl

[18:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/136a61ef77

[18:53] <dalek> perl6-bench: bb03ba1 | (Andrei Osipov)++ | minibenchmarks.pl:

[18:53] <dalek> perl6-bench: Remove unnecessary 'scaling' option for tests

[18:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/bb03ba1467

[18:53] <dalek> perl6-bench: 6c017e2 | japhb++ | / (5 files):

[18:53] <dalek> perl6-bench: Merge pull request #20 from andreoss/sorting-algs

[18:53] <dalek> perl6-bench: 

[18:53] <dalek> perl6-bench: Sorting algs

[18:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/6c017e2265

[18:53] <japhb> Thanks, andreoss!

[18:54] <flussence> whoa, I don't remember /usr/bin/time output being this verbose...

[18:54] <TimToady> scaling is unnecessary now?

[18:54] <flussence> japhb: https://gist.github.com/flussence/35adf69d41f81beb15c4

[18:56] <FROGGS> TimToady: no, left aligned

[18:56] <FROGGS> TimToady: but they are inside the squares

[18:57] <japhb> TimToady: The scaling option is not needed for the benchmark tests unless you are testing something whose performance is not a linear relation to SCALE

[18:57] <FROGGS> ...that reminds me of http://yapgh.blogspot.de/2011/03/sdl-perl-game-contest-week-2-roundup.html

[18:57] <FROGGS> I should do these minigames again :o)

[18:57] <japhb> flussence: uname -a? (Feel free to scrup your computer name from it)

[18:59] <flussence> ~ $ uname -a | sed -e "s/$(hostname)//" --> Linux  3.18.1-zen #2 ZEN SMP PREEMPT Mon Jan 12 21:39:25 GMT 2015 x86_64 AMD Phenom(tm) II X4 20 Processor AuthenticAMD GNU/Linux

[18:59] <japhb> Gee, AMD, advertise your processor a little more ....

[19:00] *** cschwenz joined
[19:00] <japhb> OK, anyone that can do the same with OS X or some BSD?

[19:00] <flussence> (model number 20 doesn't even exist, good job BIOS... :)

[19:00] *** amaliapomian left
[19:01] <TimToady> well, the snuck in a plug for GNU, so that's okay :P

[19:01] <geekosaur> Darwin [redacted].local 13.4.0 Darwin Kernel Version 13.4.0: Wed Dec 17 19:05:52 PST 2014; root:xnu-2422.115.10~1/RELEASE_X86_64 x86_64

[19:01] <TimToady> *they

[19:01] <geekosaur> FreeBSD [redacted] 10.1-RELEASE-p5 FreeBSD 10.1-RELEASE-p5 #0: Tue Jan 27 08:55:07 UTC 2015     root@amd64-builder.daemonology.net:/usr/obj/usr/src/sys/GENERIC  amd64

[19:02] <geekosaur> the former is OS X 10.9, note. I have a 10.10 VM around somewhere

[19:02] <japhb> geekosaur: Can you do the time output too?

[19:03] <japhb> For reference: /usr/bin/time -v perl6 -e 'await do for ^16 { start { my $i; while ++$i < 1_000_000 { }; say $i } }'

[19:03] <flussence> I've got a 32-bit box, if you want those numbers too

[19:03] <FROGGS> OpenBSD  5.5 GENERIC#276 i386

[19:03] <geekosaur> don't have perl6 on the freebsd box

[19:04] <geekosaur> (or much of anything else, it's a very minimal server)

[19:04] <japhb> flussence: Useful, thank you.  I'm really just trying to get an idea of what to be expecting, so I can code it up for perl6-bench, and maybe we can start graphing things like maxrss and cpu%

[19:04] <lizmat> we have a Rakudo release!   http://rakudo.org/downloads/rakudo/

[19:04] <hoelzro> \o/

[19:04] <Kristien> we already had one!

[19:04] <nine_> lizmat++ nice work!

[19:04] <japhb> lizmat++

[19:04] <lizmat> announcement sent out

[19:04] <Mouq> lizmat++

[19:04] *** Foxcool joined
[19:04] <FROGGS> OpenBSD  5.4 GENERIC#37 amd64

[19:04] <FROGGS> lizmat++

[19:05] <geekosaur> I will note that time does not take those parameters on fbsd or os x

[19:05] <japhb> Hmmm, uname -a is way more terse on OpenBSD

[19:05] <japhb> .oO( Why am I not surprised? )

[19:05] <nine_> So...when should we remove dependency on NativeCall from META.infos?

[19:05] *** zakharyas left
[19:05] <[Coke]> lizmat++ #release.

[19:05] <jnthn> lizmat++ \o/

[19:06] <japhb> geekosaur: Oh hell.  What parameters do you have available for /usr/bin/time?  And is there another binary I should be using instead on those platforms?

[19:06] <moritz> m: Thread.start(sub { say 42 }).finish

[19:06] <camelia> rakudo-moar 05f639: OUTPUT«42␤»

[19:06] <moritz> m: Thread.start(name => 'answer', sub { say 42 }).finish

[19:06] <camelia> rakudo-moar 05f639: OUTPUT«42␤»

[19:07] <FROGGS> japhb:      -l      The contents of the rusage structure are printed.

[19:07] <FROGGS>      -p      The output is formatted as specified by IEEE Std 1003.2-1992

[19:07] <FROGGS> that's openbsd

[19:08] <japhb> OpenBSD, I commend you for attempted standards performance, and stare at you crossly for user-hostile documentation on this one.  Especially since you pride yourself on complete docs.

[19:08] <lizmat> when was the last Rakudo* release??

[19:08] <lizmat> last month, right ?

[19:09] <geekosaur> os x: -l (include rusage), -p (POSIX output format)

[19:09] *** Mouq left
[19:09] *** davido__ left
[19:09] *** pdcawley left
[19:09] <geekosaur> fbsd: -o file, -a (append), -h (human friendly times), -l (rusage), -p (POSIX output format)

[19:09] <japhb> OK, so looks like OS X and OpenBSD at least are using a binary of common history.  Can you paste the ouputs of those two formats?  (And do they combine to make a third format, or does one "win"?)

[19:10] *** pdcawley joined
[19:10] <japhb> OK, so FreeBSD has -o at least, that's good.

[19:10] <Kristien> I made a gorgeous Perl 5 creation today

[19:10] <FROGGS> lizmat: yes, January

[19:11] *** davido__ joined
[19:12] <lizmat> WP article also updated

[19:13] <japhb> WP?

[19:13] <geekosaur> the only thing -p changes is wherther the basic times (real, user, system) are on one line or three. the rusage is separate (and formatted about the same on both)

[19:13] <FROGGS> wikipedia?

[19:13] <lizmat> WikiPedia

[19:13] * geekosaur updates rakudo on os x

[19:13] <japhb> OK, so what does that look like, with the rusage?  That's the thing that's more important for perl6-bench, I think

[19:14] <pmichaud> lizmat++ # release

[19:14] <geekosaur> http://lpaste.net/5226454412972523520

[19:14] * japhb does his last update-rakudo-on-all-backends run where all=moar,jvm,parrot

[19:15] <japhb> geekosaur: Which OS was that one?

[19:16] <geekosaur> it's been a while since I updated so can't run the thread stuff. updating now

[19:16] <dalek> Inline-Python: 892f400 | (Stefan Seifert)++ | lib/Inline/Python.pm6:

[19:16] <dalek> Inline-Python: Fix inherit.t failing due to wrong way to pass along arguments

[19:16] <dalek> Inline-Python: 

[19:16] <dalek> Inline-Python: Thanks to moritz++ for reporting!

[19:16] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/892f400eb0

[19:16] <dalek> Inline-Python: 4e1d908 | (Stefan Seifert)++ | lib/Inline/Python.pm6:

[19:16] <dalek> Inline-Python: Remove obsolete __getattr__ method

[19:16] <dalek> Inline-Python: 

[19:16] <dalek> Inline-Python: We don't need a Perl 6 __getattr__ anymore, since we now create a Python

[19:16] <dalek> Inline-Python: class with proxies for all the subclass' methods. Thus Python already

[19:16] <dalek> Inline-Python: knows all available methods including accessors for Perl 6 attributes.

[19:16] <dalek> Inline-Python: 

[19:16] <dalek> Inline-Python: Plus, __getattr__ was broken anyway since it was passed a Buf and it

[19:16] <dalek> Inline-Python: used it as Str.

[19:16] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/4e1d908b5f

[19:16] <dalek> Inline-Python: 1ec864e | (Stefan Seifert)++ | t/exceptions.t:

[19:16] <dalek> Inline-Python: Remove debug output from tests

[19:16] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/1ec864e46d

[19:16] <geekosaur> os x (should have been in paste description)

[19:16] <geekosaur> as I said, no p;erl6 on the fbsd box

[19:16] <geekosaur> nor infrastructure for building it

[19:16] <geekosaur> (and my network is now flapping, sigh)

[19:16] <japhb> geekosaur: Oh, duh (re: paste description), just not used to that paste site's formatting

[19:17] * lizmat is off for an appropriate amount of fun

[19:17] <jnthn> lizmat: Enjoy :)

[19:17] <japhb> FROGGS: Can you paste one for OpenBSD?

[19:17] <itz> japhb: whats the diff between mini and micro benchmarks?

[19:17] <japhb> And Windows users, if you have an equivalent command, I'm all eyeballs.

[19:17] <geekosaur> configuring so I can do the real test

[19:17] <FROGGS> japhb: one what?

[19:18] <japhb> itz: micro: essentially one-liners, mini: a few lines to about a page (that's the intent, anyway).

[19:18] <itz> ok

[19:18] <jnthn> japhb: Not aware of one :(

[19:19] <japhb> FROGGS: output from timing that command I posted (modified with s/-v/-l/ or s/-v/-l -p/)

[19:19] <japhb> jnthn: Dangit.  Another place where Windows has a really excellent infrastructure and GUI for that sort of thing, and really weak CLI support.  :-(

[19:20] <jnthn> japhb: There's tasklist that displays current memory use of all processes.

[19:20] <japhb> (perfmon and its modern equivalent are the only things I ever run on Windows -- because I use them when a Windows-using family member asks why their machine is running slowly.  :-)

[19:21] <FROGGS> japhb: I have no perl6 on these boxes though... but I guess its sister wo do too :o)

[19:21] <japhb> jnthn: Yeah, just can't get the data out from it.

[19:21] <jnthn> japhb: Well, tasklist is command line. But sadly it doesn't let you run a process under it nad find maximm memory afaik

[19:21] <japhb> FROGGS: Any long-running command will do.  I used that particular one just to see if Perl 6 was using multiple cores properly on each OS.

[19:21] <jnthn> japhb: Just shows you what is running at the time you take the snapshot.

[19:22] *** _mg_ left
[19:22] <japhb> jnthn: Oh, I misunderstood what you meant by tasklist, I thought you meant the task manager, didn't realize it was actually a CLI named `tasklist`.  :-)

[19:22] *** raiph joined
[19:22] <japhb> Still, since it's just a snapshot, :-(

[19:22] *** kurahaupo1 joined
[19:24] <jnthn> Yeah. Close, but no cigar.

[19:24] <japhb> jnthn: FWIW, changing the while loop to a similar for loop in the command I've been testing makes it sig-11.  But only if the loop maximum is large enough.  start + big for-range loops seems to make r-m very unhappy somehow 

[19:24] *** geekosaur left
[19:24] <jnthn> japhb: Odd...not seen that.

[19:25] <jnthn> Please submit an RT

[19:25] *** geekosaur joined
[19:25] <FROGGS> japhb: https://gist.github.com/FROGGS/d419dfdb707aad3d7f3d

[19:30] *** dalek left
[19:30] <flussence> japhb: 32-bit here (took a while because I just updated my rakudo) - https://gist.github.com/flussence/3e6badd23e0a8cc585e2

[19:30] <japhb> jnthn: rakudobug submitted.  Had to use last-month version of r-m, since current month is still rebuilding.

[19:31] *** dalek joined
[19:31] *** ChanServ sets mode: +v dalek

[19:31] <jnthn> japhb: but...but...what if we fixed it? :P

[19:31] <jnthn> japhb++ # ticket

[19:31] *** tgt joined
[19:32] <japhb> :-)

[19:32] <japhb> FROGGS, flussence: thank you!

[19:32] <geekosaur> here's the actual thread test http://lpaste.net/7768125692633415680

[19:32] <FROGGS> you're welcome

[19:34] <japhb> geekosaur: Oh now that's interesting ... it hids the CPU percent in the one line that requires real parsing

[19:34] <japhb> Also, thank you geekosaur as well.  :-)

[19:34] <geekosaur> oh, the last time? I think thats zsh

[19:34] <geekosaur> the 309% cpu line is zsh, not /usr/bin/time

[19:34] <japhb> ah

[19:35] <geekosaur> (I just slurped the whole thing, sorry)

[19:35] * japhb listens to his fan spin up and down at different build stages

[19:35] <japhb> No worries at all.

[19:36] <japhb> So it sounds like I basically can get most unix-likes with handling '-v' (linux) and '-l -p' (others).

[19:37] <japhb> No -o on some means I can't rely on a clean separation from the child program's output, sigh.

[19:40] <geekosaur> um, traditionally the timing output is on stderr

[19:41] <geekosaur> so redirect the program output elsewhere and you should still get timing

[19:41] <geekosaur> unless it spits errors of course

[19:41] <geekosaur> (and arguably your timing output is useless in that case anyway)

[19:43] <flussence> "*resolve stage failed for Grammar::Debugger: Dependency Term::ANSIColor is not present in the module ecosystem" - what's up with that? It's there in ecosystem.git but not in `panda list`

[19:44] <japhb> geekosaur: timeall (in perl6-bench) captures the stderr of the children in order to attempt to diagnose failure modes.  But this will cross the streams.

[19:45] <japhb> And I certainly agree with stderr being the default for time output; I just wish I could rely on the *option* to send it to a file.

[19:45] <itz> japhb: https://github.com/japhb/perl6-bench/pull/21

[19:45] <itz> not sure if it's correctly added to the json

[19:47] *** vendethiel- is now known as vendethiel

[19:47] <geekosaur> mm, /usr/bin/time ... sh -c '... 2>errors'

[19:48] <japhb> itz, can you change it so that $n is initialized from SCALE (by adding that argument to the minibenchmarks.pl perl5 and perl6 lines, and by pulling from the first arg in each of your scripts)?

[19:48] <itz> sure

[19:48] <japhb> If you want to have a starting scale (because small values are known to be wicked fast, you can set that too.

[19:49] <japhb> I generally set it to some power of two (like 1 << 10, for instance)

[19:55] *** darutoko left
[19:58] <dalek> Heuristic branch merge: pushed 22 commits to rakudo/cpp by FROGGS

[19:59] <dalek> rakudo/cpp: c856b8c | FROGGS++ | t/04-nativecall/11-cpp. (2 files):

[19:59] <dalek> rakudo/cpp: add test for passing args to C++ method

[19:59] <dalek> rakudo/cpp: review: https://github.com/rakudo/rakudo/commit/c856b8c379

[20:01] <japhb> flussence: Yeah, I'm seeing the same error.

[20:01] <[Tux]> m: $*IN.CAPS.perl.say

[20:01] <camelia> rakudo-moar 05f639: OUTPUT«No such method 'CAPS' for invocant of type 'IO::Handle'␤  in block <unit> at /tmp/3W6G_y2l4f:1␤␤»

[20:02] * [Tux] was trying to find the perl6 equiv of $/ and $\

[20:02] *** sqirrel_ joined
[20:02] <[Coke]> m: say $/, $\

[20:02] <camelia> rakudo-moar 05f639: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uHUYVIiKdc␤Missing semicolon.␤at /tmp/uHUYVIiKdc:1␤------> 3say $/, $\7⏏5<EOL>␤»

[20:02] <[Coke]> m: say $\ ;

[20:02] <camelia> rakudo-moar 05f639: OUTPUT«5===SORRY!5=== Error while compiling /tmp/EnhgVsTHHK␤Unsupported use of $\ variable; in Perl 6 please use the filehandle's .ors attribute␤at /tmp/EnhgVsTHHK:1␤------> 3say $\7⏏5 ;␤»

[20:03] <[Coke]> ^^ we try to help out in that regard.

[20:03] <jnthn> m: say $*IN.methods.grep({ .name ~~ /sep/ })

[20:03] <camelia> rakudo-moar 05f639: OUTPUT«No such method 'methods' for invocant of type 'IO::Handle'␤  in block <unit> at /tmp/LXWB31yP8v:1␤␤»

[20:03] <jnthn> m: say $*IN.^methods.grep({ .name ~~ /sep/ })

[20:03] <camelia> rakudo-moar 05f639: OUTPUT«input-line-separator␤»

[20:05] <[Tux]> and /me thought to be "clever" using CAPS :/

[20:07] <[Tux]> m: $*OUT.ors.perl.say

[20:07] <camelia> rakudo-moar 05f639: OUTPUT«No such method 'ors' for invocant of type 'IO::Handle'␤  in block <unit> at /tmp/w6ssQo0YgF:1␤␤»

[20:08] *** rurban left
[20:08] <[Tux]> [Coke], what do I not understand about that helpful message?

[20:09] *** rurban joined
[20:09] *** rurban left
[20:09] <flussence> m: say $*OUT.^attributes

[20:09] <camelia> rakudo-moar 05f639: OUTPUT«Mu $!path Mu $!PIO int $!ins Mu $!chomp Mu $!nl int $!pipe␤»

[20:09] <PerlJam> lizmat++  (release)

[20:10] <[Tux]> so, s/ors/nl/

[20:10] <[Tux]> yep, that works

[20:11] <moritz> avuserow: fwiw I've now installed Inline::Python hassle-free on hack.p6c.org

[20:11] <[Coke]> can you file a rakudobug about the helpful message that isn't so helpful?

[20:11] <[Tux]> m: $*OUT.nl = "\r\n";

[20:11] <camelia> rakudo-moar 05f639: OUTPUT«Cannot modify an immutable Str␤  in block <unit> at /tmp/IZcoW6DPaS:1␤␤»

[20:11] <[Coke]> ++[Tux]

[20:12] <[Tux]> thanks

[20:12] <moritz> avuserow: so I'm fine with integrating Inline::Python into htmlify, if it's optional

[20:12] <Kristien> vendethiel: what do you think of magic variables?

[20:13] <vendethiel> like $/?

[20:13] <Kristien> yes

[20:14] <[Tux]> http://rakudo.org/tickets/ takes ages to load :/

[20:14] <vendethiel> Kristien: I don't really mind so long they're lexical and uhm not part of the user-available identifiers

[20:15] <Kristien> [Tux] file a bug report!

[20:15] <vendethiel> I prefer when they're not here, ofcourse

[20:15] <Kristien> vendethiel: like it and that? :D

[20:15] <vendethiel> indeed...

[20:15] <vendethiel> LS is like, what if we tried to make all the mistakes we could, and make it a language...

[20:15] <[Tux]> Kristien, that is what I am trying to do :)

[20:16] <moritz> [Tux]: mailto:rakudobug@perl.org

[20:16] <Kristien> do all spam mails automatically get reported as bugs?

[20:17] <moritz> Kristien: there's some form of (partially manual) filtering

[20:17] <Kristien> I never got any spam until I signed up on CPAN.

[20:18] <vendethiel> :o)

[20:18] <Kristien> I think I'm allergic to oranges.

[20:18] <vendethiel> Kristien: did you ask me that just to get my opinion on LS' take?

[20:18] <Kristien> Every time I eat one my mouth starts aching and everything gets itchy.

[20:18] <Kristien> vendethiel: no

[20:20] *** rurban joined
[20:20] <[Coke]> spam to rakudobug@... gets mostly filtered. if it makes it to a ticket, there's a big red button we can press to mark it as spam and kill it.

[20:21] <[Tux]> ok, ors => nl sent

[20:21] <[Tux]> should I also file the fact that $*OUT.nl is readonly?

[20:21] *** rurban1 joined
[20:21] <[Coke]> I have no idea if it's supposed to be or not.

[20:21] <[Coke]> would have to check the syn.

[20:22] <moritz> jnthn, lizmat: what exactly is Thread.app_lifetime?

[20:22] *** cschwenz left
[20:22] <moritz> the comments in Thrad.pm say "Is the thread's lifetime bounded by that of the application, such that when it exits, so does the thread?"

[20:22] <lizmat> [Tux]: I'm not even sure IO::Handle.nl is even functional if different fro \n

[20:22] <moritz> what is "the application" in this context?

[20:22] <[Tux]> OUCH!

[20:22] <jnthn> moritz: Comment is accurate

[20:23] * [Tux] delays porting ty/45_eol.t for now

[20:23] <moritz> jnthn: is application === process?

[20:23] <jnthn> moritz: Yes

[20:23] * lizmat backlogs

[20:23] <moritz> there are threads that live beyond the lifetime of a process?

[20:23] <jnthn> moritz: No, there are threads that can block the end of the process evne if the main thread has finished, though.

[20:24] <moritz> jnthn: oh, that makes sense

[20:24] <jnthn> moritz: If app_lifetime is true then the thread does not block shutdown when the main thread is finished. We just tear everything down.

[20:24] <jnthn> Thread pool threads are that way.

[20:25] <jnthn> (Which is yet another reason to have something waiting on any async work you set off.)

[20:25] <jnthn> (The primary reason being if you don't, you'll never know if the thing failed.)

[20:26] <PerlJam> .oO( seems like app_lifetime should be named something like blocks_shutdown )

[20:26] <jnthn> I'm open to better names.

[20:27] <jnthn> I didn't like the Java and .Net namings for the concept fwiw.

[20:27] <jnthn> (IsDaemon and Background vs. Foreground)

[20:27] <jnthn> I still prefer what I came up with to those two, but I think there's room for improvement yet. :)

[20:28] <moritz> I'll document it as is for now

[20:28] <[Coke]> oh, tux is tux! Hi [Tux]. (just saw the name on the ticket)

[20:28] <moritz> otherwise I'll never finish documenting anything :-)

[20:28] * [Tux] waves back

[20:28] <lizmat> moritz: http://irclog.perlgeek.de/perl6/2015-02-19#i_10143169  re not reporting tags: seems like a useful function to have?

[20:28] <moritz> lizmat: +1

[20:29] <[Coke]> anyone here created a portfile for macports recently?

[20:30] <moritz> why do Thread.run and .finish return self, but .yield returns Nil?

[20:31] <[Tux]> does \s include Unicode whitespace like U+0000A0 NO-BREAK SPACE and U+00200B ZERO WIDTH SPACE ?

[20:31] <moritz> yes

[20:31] <[Tux]> that explains 

[20:31] <moritz> m: say so chr(0x200b) ~~ /\s/

[20:31] <camelia> rakudo-moar 05f639: OUTPUT«False␤»

[20:31] <moritz> huh

[20:31] <moritz> m: say so chr(0xA0) ~~ /\s/

[20:31] <camelia> rakudo-moar 05f639: OUTPUT«True␤»

[20:32] <jdv79> is there a way to get all signature binding failures instead of just the first one encountered?

[20:32] <PerlJam> moritz: 1/2 yes :)

[20:32] <[Tux]> is m{ <[ \t]> } what I should write to just test for space and tab?

[20:33] <moritz> [Tux]: whitespace isn't significant in char classes

[20:33] <moritz> <[\ \t]>

[20:33] <[Tux]> I was affraid for that

[20:33] <[Tux]> ok

[20:33] <[Tux]> thanks

[20:33] <lizmat> m: say uniprop chr(0x200b); say uniprop chr(0xA0)  # [Tux]  no "s" in the first one, so no match

[20:33] <camelia> rakudo-moar 05f639: OUTPUT«Cf␤Zs␤»

[20:33] <jnthn> jdv79: Any it figures out at compile time, it should report. At runtime it's an exception if we fail to bind.

[20:34] <jnthn> m: sub foo(Int $x) { }; foo(1.2); foo('omg')

[20:34] <camelia> rakudo-moar 05f639: OUTPUT«5===SORRY!5===␤Calling 'foo' will never work with argument types (Rat)␤    Expected: :(Int $x)␤at /tmp/qIAEM5Jexe:1␤------> 3sub foo(Int $x) { }; 7⏏5foo(1.2); foo('omg')␤Calling 'foo' will never work with argument types (str)␤    Expe…»

[20:34] <dalek> perl6-bench: f4c18a3 | (Steve Mynott)++ | / (3 files):

[20:34] <dalek> perl6-bench: import pi_sequential_iteration

[20:34] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/f4c18a38b7

[20:34] <dalek> perl6-bench: c394d33 | (Steve Mynott)++ | perl5/pi_sequential_iteration:

[20:34] <dalek> perl6-bench: tweaks to p5

[20:34] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/c394d33dd0

[20:34] <dalek> perl6-bench: 3d8c962 | (Steve Mynott)++ | / (5 files):

[20:34] <dalek> perl6-bench: scale fix

[20:34] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/3d8c962393

[20:34] <dalek> perl6-bench: da84654 | japhb++ | / (3 files):

[20:34] <dalek> perl6-bench: Merge pull request #22 from stmuk/master

[20:34] <dalek> perl6-bench: 

[20:34] <dalek> perl6-bench: SCALE added

[20:34] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/da84654518

[20:34] <jdv79> what i mean is if ther are multiple reasons the binding fails could i get that list instead of the first one

[20:35] *** cschwenz joined
[20:35] <FROGGS> m: say so chr(0x200c) ~~ /\s/

[20:35] <camelia> rakudo-moar 05f639: OUTPUT«False␤»

[20:35] *** smls left
[20:35] <jnthn> jdv79: Not at present, no. The bind check is also used for multi-dispatch dis-ambig, so it is currently optimized for fail fast.

[20:35] <jnthn> jdv79: We may be able to do something smarter.

[20:36] <dalek> rakudo/nom: 1146597 | lizmat++ | src/core/Exception.pm:

[20:36] <dalek> rakudo/nom: Fix for #123884, [Tux]++

[20:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1146597d0f

[20:36] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123884

[20:36] <jdv79> ok.  just curious about maybe using a sig for a (web/other) service arg validation

[20:36] <jnthn> jdv79: And if we throw a typed exception for such things then it can always re-bind if we request more info.

[20:36] <dalek> doc: b3f38d3 | moritz++ | / (2 files):

[20:36] <dalek> doc: Document Thread.

[20:36] <dalek> doc: 

[20:36] <dalek> doc: I love small classes.

[20:36] <dalek> doc: review: https://github.com/perl6/doc/commit/b3f38d3108

[20:37] <jdv79> in that cae i would like to report all errors with the args at once instead of forcing the client to retry after fixing the current error..

[20:37] <jnthn> jdv79: So there's nothing absolutely preventing us from doing some smarter thing here in the future...

[20:37] <jdv79> not a big deal 

[20:37] <jnthn> moritz: "...and I can not lie"? :)

[20:37] <jdv79> ok

[20:38] <moritz> jnthn: unresolved cultural reference at "...and I can not lie"

[20:38] <jnthn> Aww :)

[20:39] *** rindolf left
[20:39] <jnthn> Hm, is Thread.yield() actually on Thread:D...

[20:39] <[Coke]> Sr. Mix-a-lot reference.

[20:39] <jnthn> No

[20:39] <jnthn> method yield(Thread:U:) {

[20:39] <PerlJam> jdv79: you could probably do it manually with EVAL and a little manual dispatch if you *really* wanted to.  :)

[20:39] <moritz> jnthn: huh.

[20:39] <jnthn> moritz: You can only yield yourself.

[20:39] <skids> .oO(Sr mixin a lot?)

[20:39] <moritz> jnthn: what does it do then? yield the current thread?

[20:39] <jnthn> moritz: Yes.

[20:40] *** pecastro joined
[20:40] <jnthn> It's a pretty directly call down to pthread_yield() or sched_yield()

[20:40] <moritz> ah, that's why it doesn'T return self.

[20:40] <dalek> doc: f2559a6 | moritz++ | lib/Type/Thread.pod:

[20:40] <dalek> doc: Correct docs for Thread.yield, jnthn++

[20:40] <dalek> doc: review: https://github.com/perl6/doc/commit/f2559a6efe

[20:40] <jdv79> yeah, i guess just iterating on the bind while removing or resolving the current failure but seems too manual to be fun

[20:41] <jnthn> "Creates, returns and runs a new C<Thread>." may be clear as "Creates, runs, and returns..."

[20:41] <jnthn> Since returns is the last thing the method does. Can be worth a note that execute may or may not have commenced at the point the method returns.

[20:43] <dalek> doc: d50021e | moritz++ | lib/Type/Thread.pod:

[20:43] <dalek> doc: Improve Thread.start docs, jnthn++

[20:43] <dalek> doc: review: https://github.com/perl6/doc/commit/d50021e2ca

[20:44] <moritz> wouldn't it be nice if $thread.finish returned the return value from the thread code?

[20:45] *** _mg_ joined
[20:45] <dalek> doc: 0a0399f | moritz++ | lib/Type/Thread.pod:

[20:45] <dalek> doc: Document Thread.finish

[20:45] <dalek> doc: review: https://github.com/perl6/doc/commit/0a0399f9ae

[20:46] <jnthn> moritz: Maybe, otoh if you want "nice" then use something higher level...

[20:46] <moritz> jnthn: agreed

[20:46] <tgt> There're a couple of typos: new and start return Tread:D instead of Thread:D

[20:47] *** Mouq joined
[20:47] <moritz> tgt: will you fix it, or should I?

[20:47] <[Sno]> for the visitors of QAH:

[20:47] <[Sno]> I negotiated that with Rademacher - I get 6 developer boxes of Homepilot2 for Berlin

[20:47] <[Sno]> so we (interested people) can play with cross-compiling perl5 and perl6 and modules of both

[20:47] *** andreoss left
[20:49] <lizmat> [Sno]++  (tell me about Homepilot2 next week in Cologne :-)

[20:49] <dalek> doc: f0d6f43 | moritz++ | lib/Type/Thread.pod:

[20:49] <dalek> doc: Fix typos. tgt++

[20:49] <dalek> doc: review: https://github.com/perl6/doc/commit/f0d6f432e8

[20:49] <tgt> Heh. Beat me to it. :)

[20:49] <jnthn> moritz++ # documentation work

[20:49] <[Sno]> lizmat: it's the home-automation box I talked about

[20:50] <lizmat> ah, ok  :-)

[20:50] <PerlJam> lizmat++ (because I was reading the release announcement again and thought you deserved even more kudos :)

[20:50] <[Sno]> it runs java and perl5 now, so my goals for next 6 weeks are: build openjdk from source, build moarvm, build nqp and rakudo*

[20:54] *** diana_olhovik_ left
[20:55] <moritz> jnthn: now that the release is through, should I merge my birdless branch?

[20:55] <moritz> (the one that removes parrot support from rakudo)

[20:55] *** sqirrel_ left
[20:56] <lizmat> moritz: +1

[20:56] <El_Che> moritz: you're the type of guy that explains his jokes apparently :)

[20:56] <Kristien> I think grep on a type should create a subset!

[20:56] <[Coke]> why are we removing? I thought we were only going to deal with it as changes required.

[20:56] <grondilu> Can't I use unsigned integers with NativeCall?

[20:57] <grondilu> if I use uint32 I get an error, I have to use int32 apparently.

[20:57] <FROGGS> grondilu: what type of error?

[20:58] *** diana_olhovik joined
[20:58] <skids> Use int32 then once you have the result, +& with 0xffffffff, for now, is what I have done.

[20:58] <[Sno]> moritz: today I thought about NativeCall / AutoConf(Perlish) - and I mind a Perl6 requirement Perl5 doesn't have - name mangeling on loading c++ code

[20:58] <FROGGS> [Coke]: we will break perl6-p one way or the other... removing it at once cleanly is sane I think

[20:58] <FROGGS> [Sno]: that's what I am currently implementing

[20:58] <jnthn> moritz, [Coke]: In the next 1-2 weeks I'll merge the native-ref work. That *will* bust the build on r-p, short of anybody jumping up to do a bunch of not-easy work.

[20:59] <lizmat> as stated by pmichaud: support on parrot can only be revived by full nqp support

[20:59] <lizmat> in that sense, I don't think parrot is different from the work on the js backend, now

[20:59] *** cschwenz left
[20:59] <[Sno]> FROGGS: how do you guess the mangled names for aCC? or iCC?

[21:00] <FROGGS> [Sno]: I am currently implementing the naming scheme for g++, so, we will have compiler guessing at some point to guess the naming scheme

[21:01] <FROGGS> (g++ on linux I might need to say)

[21:01] <geekosaur> [Sno], as of C++11 it is not per compiler

[21:01] *** _mg_ left
[21:01] <[Sno]> geekosaur: but C++11 is far away in wildlife ;)

[21:02] <[Sno]> I check the reference manual tomorrow to see how it's specified machine independent

[21:03] <geekosaur> [Sno], not quite that simple. every platform (arch+OS, roughly) now has to define a C++ ABI to which all C++ compilers adhere

[21:03] <[Sno]> geekosaur: that makes sense :)

[21:03] <[Sno]> how does the loader from FROGGS guesses that API?

[21:03] <hoelzro> FROGGS: g++ >2 on Linux, I think, even =)

[21:04] <PerlJam> moritz: +1 to merging birdless

[21:04] <moritz> I'll do it as a squash merge, so that it'll be easier to revert, should it be necessary

[21:04] <geekosaur> the switch to c++11 actually causes breakaege on some platforms (e.g. OS X, where C++11 implies clang and libc++ but pre-C++11 uses gcc and LGPL2-ed versions of libstdc++)

[21:05] <geekosaur> (all the C++11-compatible libstdc++-s are GPL3 and Apple considers them toxic)

[21:05] <PerlJam> moritz: though, I'm not sure those glossary items should be removed rather than amended to note that they are only of historical significance.

[21:05] <[Sno]> geekosaur: btw, that's the typical situation nowadays - there is a mangling scheme per OS (vendor defined) and compilers support that - some compilers (g++) support the OSS type, too (additional)

[21:06] <[Sno]> Windows, AIX, Solaris, HPUX ... will have the same problems

[21:07] <[Sno]> and then there're legacy environments (OpenVMS, Tru64, IRIX) where most likely no c++11 will find the way on it ^^

[21:07] <grondilu> FROGGS: "Unknown type uint32 used in native call."

[21:08] *** sqirrel joined
[21:08] <FROGGS> grondilu: ohh, that's easily fixable I guess

[21:08] <PerlJam> moritz: I just noticed that birdless changed the copyright in LICENSE to read "2000-2006" for some reason.  Probably shouldn't do that either  ;)

[21:08] <[Sno]> geekosaur: we discussed with moritz and nine on FOSDEM the idea of perl6 template modules for native-calls combined with Config::AutoConf to determine the right basic types for unknown, complexer ones etc.

[21:08] <lizmat> PerlJam moritz : probably missed TimToady's update of that somehow

[21:09] <FROGGS> grondilu: rakudo/lib/NativeCall.pm line 76 or so just needs a mapping from uint32 to int

[21:09] <FROGGS> grondilu: the backends check for unsignedness IIRC

[21:09] <moritz> [Sno]: you must be confusing me with somebody else; I wasn't at FOSDEM

[21:09] <[Sno]> and in addition to that I think, a probe for the system (environments's) name mangling should be reasonable either

[21:09] <PerlJam> yeah, I didn't look to see where birdless branched

[21:09] <lizmat> moritz: or didn't you merge all changes to 2015.02 yet 

[21:09] *** Rounin left
[21:09] <moritz> lizmat: TimToady's update to what?

[21:10] <[Sno]> lizmat should know the name of him ;)

[21:10] <lizmat> the copyright date

[21:10] * [Sno] is bad in names

[21:10] <moritz> oh

[21:10] <lizmat> 0a7fba609b74299ab7357cefea5797d37f09c9e6

[21:10] <moritz> I have a local rebase of the birdless branch on top of nom

[21:10] <moritz> it's correct there

[21:11] <lizmat> :-)

[21:11] <dalek> Heuristic branch merge: pushed 25 commits to rakudo/birdless-2 by moritz

[21:11] <moritz> that's the one I want to squash-merge

[21:11] <grondilu> FYI, I'm trying to do some SDL2 mapping.  I was starting to the most simple stuff ever:  https://gist.github.com/grondilu/ef216b34bb650e8dd283 and failed to translate it into Perl6 with NativeCall: https://gist.github.com/grondilu/1112f854a5d66c993dc8

[21:12] <[Sno]> damn, the both were FROGGS and nine_ 

[21:12] <dalek> rakudo/nom: d386900 | lizmat++ | src/core/IO/Handle.pm:

[21:12] <dalek> rakudo/nom: Deprecate IO::Handle.input-line-separator for .nl

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d386900bf8

[21:12] <grondilu> strangely enough it displays a window with no error but the size of the window is wrong.

[21:12] <lizmat> sorry moritz

[21:12] <FROGGS> [Sno]: we sat together with nine, [Tux] and leont

[21:14] <PerlJam> moritz: looking at the diff that shows all of that parrot stuff removed makes me irrationally happy for some reason :)

[21:14] * lizmat will now go off to avoid further interference with moritz' work

[21:14] <jnthn> lizmat: I...don't know that you did? :)

[21:15] <lizmat> I committed to now just after moritz merged

[21:15] <lizmat> *nom

[21:15] <lizmat> so he needs to do it again?

[21:15] <jnthn> If he's doing a squash merge he only has to git pull --rebase and then no problem :)

[21:15] <moritz> t/spec/S06-other/introspection.t fails a test here

[21:15] <lizmat> *phew*

[21:16] <moritz> is that new?

[21:16] *** kurahaupo1 left
[21:16] <lizmat> it was clean when I released it  :-)

[21:16] <lizmat> (apart from known flappers)

[21:17] <moritz> not ok 7 - you can invoke through introspection

[21:17] <grondilu> oh apparently it works if I declare the parameters as 'int' and not 'Int'

[21:17] <lizmat> is ok with nom on moar / OSX

[21:17] * moritz retries on nom

[21:18] <dalek> rakudo/cpp: 9260d57 | FROGGS++ | / (3 files):

[21:18] <dalek> rakudo/cpp: add trait "is cpp-const"

[21:18] <dalek> rakudo/cpp: 

[21:18] <dalek> rakudo/cpp: This affects how parameter names are mangled when looking up symbols.

[21:18] <dalek> rakudo/cpp: review: https://github.com/rakudo/rakudo/commit/9260d572c0

[21:21] <FROGGS> gnight

[21:21] *** FROGGS left
[21:21] <moritz> lizmat: ok, merge will have to wait, there's a regression

[21:21] <moritz> lizmat: don't hold back on other stuff

[21:22] <masak> TimToady: right, you're right (about CHECK and LINK running later than splice time).

[21:22] *** raiph left
[21:22] <masak> TimToady: I was just thinking whether there is already a phaser that could be used to fire things off at splice time.

[21:22] <masak> (please don't go spec SPLICE just because I said this. need to think more.) :)

[21:23] <PerlJam> masak: what makes you think he *would* spec a SPLICE phaser?   How many times did we talk about a COMPOSE phaser before one was specced?  :)

[21:24] <lizmat> moritz: I won't, but first I'll get some sleep&

[21:24] <moritz> lizmat: good night then :-)

[21:24] <masak> PerlJam: I think I've been burned a bit by the "QBEGIN" discussions. ;)

[21:24] <masak> 'night, lizmat 

[21:24] <moritz> PerlJam: there's a COMPOSE phaser specced? :-)

[21:24] <masak> yes, I think so.

[21:25] <PerlJam> moritz: there is now

[21:25] <jnthn> o/ lizmat 

[21:25] * jnthn is vaguely aware of the COMPOSE phaser thingy

[21:25] *** bjz left
[21:25] <PerlJam> moritz: S04:1418

[21:25] <synopsebot> Link: http://design.perl6.org/S04.html#line_1418

[21:25] <PerlJam> FWIW

[21:27] <moritz> .tell FROGGS please remove NativeCall as a dependency from Inline::C. kthxbye

[21:27] <yoleaux> moritz: I'll pass your message to FROGGS.

[21:28] <moritz> arnsholt: please remove NativeCall as a dependecy from Net::ZMQ, it is now shipped with rakudo

[21:29] *** fhelmberger left
[21:29] *** telex left
[21:30] <moritz> avuserow: please remove NativeCall as a dependecy from perl6-audio-taglib-simple and perl6-compress-snappy, it is now shipped with rakudo

[21:30] *** telex joined
[21:30] * moritz has a feeling this doesn't scale

[21:30] <PerlJam> heh

[21:31] <dalek> DBIish: 1912800 | moritz++ | META.info:

[21:31] <dalek> DBIish: remove NativeCall as a dependency

[21:31] <dalek> DBIish: 

[21:31] <dalek> DBIish: it is now shipped with rakudo.

[21:31] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/1912800af2

[21:34] <dalek> rakudo/birdless-2: 5099385 | moritz++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[21:34] <dalek> rakudo/birdless-2: Partially revert "remove some parrot from BOOTSTRAP.nqp"

[21:34] <dalek> rakudo/birdless-2: 

[21:34] <dalek> rakudo/birdless-2: This reverts commit 6f5217ab26b23b39ae9353160003c1fd69fdd8e6.

[21:34] <dalek> rakudo/birdless-2: review: https://github.com/rakudo/rakudo/commit/5099385d38

[21:35] <moritz> (git bisect)++

[21:35] <vendethiel> moritz++

[21:36] <Kristien> (git bisect) is an rvalue

[21:37] <geekosaur> but they're implicitly used as keys...

[21:38] <Kristien> m: my $s = 'Hello, brutal world!'; substr($s, 7, 6) = 'gorgeous'; say $s;

[21:38] <camelia> rakudo-moar 114659: OUTPUT«Cannot modify an immutable Str␤  in block <unit> at /tmp/OQ8WyetDPk:1␤␤»

[21:38] <Kristien> :(

[21:39] <moritz> Kristien: substr-rw exists

[21:39] <Kristien> :O

[21:39] <moritz> m: my $s = 'Hello, brutal world!'; substr-rw($s, 7, 6) = 'gorgeous'; say $s;

[21:39] <camelia> rakudo-moar 114659: OUTPUT«Hello, gorgeous world!␤»

[21:40] *** xfix left
[21:40] <Kristien> m: my $s = 'Hello, brutal world!'; substr-rw($s, 14, 5) = 'gorgeous'; say $s;

[21:40] <camelia> rakudo-moar 114659: OUTPUT«Hello, brutal gorgeous!␤»

[21:40] <dalek> rakudo/nom: 9a75383 | moritz++ | / (79 files):

[21:41] <dalek> rakudo/nom: Remove parrot support from Rakudo.

[21:41] <dalek> rakudo/nom: 

[21:41] <dalek> rakudo/nom: Please see http://pmthium.com/2015/02/suspending-rakudo-parrot/

[21:41] <dalek> rakudo/nom: for some background information

[21:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a75383d91

[21:41] <moritz>  79 files changed, 201 insertions(+), 7175 deletions(-)

[21:41] <moritz> and with that, I'll go to sleep&

[21:42] <jnthn> 'night, moritz++

[21:42] * jnthn also rests o/

[21:42] <geekosaur> .oO { borgeous }

[21:43] <hoelzro> wow, I knew it was coming, but that's...momentous.

[21:45] <skids> .oO(I am apparently the only one using META6.json.  So lonely.)

[21:46] <hoelzro> .tell pmurias I'm interesting in trying my hand at implementing curlexpad; any pointers on how you want it done?

[21:46] <yoleaux> hoelzro: I'll pass your message to pmurias.

[21:46] <hoelzro> it would be nice if we had a dzil-like tool for generating things like META*

[21:47] <hoelzro> so NQP will continue to support Parrot, I take it?

[21:49] <japhb> hoelzro: If I'm understanding correctly, 1) It's not blocking progress to have partial NQP backends, and 2) It leaves a basis for someone to do the hard work and get back on the support path.

[21:49] <hoelzro> japhb: yeah, that was my understanding too

[21:50] *** sqirrel left
[21:50] <hoelzro> I was just a little giddy at seeing those #?if parrots removed =)

[21:51] *** dolmen joined
[22:02] *** skids left
[22:05] *** diana_olhovik left
[22:07] *** pmurias joined
[22:07] <pmurias> hoelzro: hi

[22:07] <yoleaux> 21:46Z <hoelzro> pmurias: I'm interesting in trying my hand at implementing curlexpad; any pointers on how you want it done?

[22:08] <pmurias> hoelzro: the first step would be to write a good test file for it

[22:10] <pmurias> hoelzro: the we will need to turn hash access from hash['foo'] = 123 to calling a method

[22:12] <pmurias> and then we can compile nqp::curlexpad to new nqp.Curlexpad({'foo':{set: function(value) {foo = value}, get: function() {return foo}})

[22:12] <jercos> I tried to read that as "curl exp ad" three times before it clicked >.>

[22:13] <pmurias> hoelzro: I hope to have a decent chunk of nqp-js hacking time on the weekend

[22:14] *** tgt left
[22:20] *** raiph joined
[22:21] *** raiph left
[22:24] *** coffee` left
[22:43] <avuserow> moritz: will work on making htmlify autodetect Inline::Python and pygments

[22:44] <avuserow> maybe the right thing to do is to write a Python::Pygments module that handles all of that?

[22:45] <avuserow> moritz: do you want running pygments as a subprocess as a fallback for not having Inline::Python? My thought is no, but I can try to keep that around if you want

[22:45] <avuserow> aww, and I just missed moritz++

[22:47] *** Kristien left
[22:50] *** espadrine_ is now known as espadrine

[22:59] <japhb> Did anyone figure out the "*resolve stage failed for Grammar::Debugger: Dependency Term::ANSIColor is not present in the module ecosystem" problem?

[23:01] <hoelzro> pmurias: ok, I understand now

[23:02] <hoelzro> I don't know how much time I'll have over the weekend (retreating to a cabin in the woods), so maybe I should back off and let you do your thing

[23:02] <hoelzro> unless you have different designs for your nqp-js hacking time?

[23:02] <masak> moritz++ # 7175 deletions

[23:04] <pmurias> hoelzro: curlexpad is not a priority for me

[23:04] <hoelzro> it's the next thing for QASTNode, isn't it?

[23:04] <raydiak> japhb: I just saw your error, but a panda update seems to have fixed it

[23:05] <TimToady> Missing test file: t/spec/S26-documentation/01-delimited.t S26-documentation/02-paragraph.t

[23:05] <pmurias> hoelzro: it's called but it's result is ignored

[23:05] <hoelzro> oh, really?

[23:05] <hoelzro> interesting

[23:05] <hoelzro> still could be good for me to implement =)

[23:06] <pmurias> it's used when having rules in roles

[23:07] <pmurias> so it's needed but not immediately

[23:08] <hoelzro> pmurias: is there somewhere else I should be concentrating?

[23:08] <pmurias> hoelzro: one whatever is the most fun for you

[23:08] <pmurias> s/one/on

[23:09] <hoelzro> =)

[23:09] <hoelzro> works for me!

[23:11] <pmurias> everything will need to be implemented in the end

[23:12] <hoelzro> good point =)

[23:12] <hoelzro> I would just like to help with a bootstrapping nqp, and then a rakudo-js

[23:12] <hoelzro> decommute&

[23:18] *** kurahaupo1 joined
[23:18] *** adu joined
[23:21] *** Mouq left
[23:21] *** espadrine left
[23:27] *** gfldex left
[23:28] *** BenGoldberg joined
[23:28] *** BenGoldberg left
[23:29] *** BenGoldberg joined
[23:29] *** fhelmberger joined
[23:29] *** mohij left
[23:30] <dalek> rakudo-star-daily: 125af49 | coke++ | log/ (14 files):

[23:30] <dalek> rakudo-star-daily: today (automated commit)

[23:30] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/125af49b5c

[23:34] *** fhelmberger left
[23:35] *** pmurias left
[23:35] <timotimo> all the modules look clean

[23:35] <timotimo> sounds good

[23:41] * grondilu wrote http://rosettacode.org/wiki/Image_noise#Perl_6

[23:42] *** alini left
[23:43] <timotimo> oh lord, you're using RenderDrawPoint for pixels? :)

[23:43] <[Coke]> so with something like nqp that can have multiple backends, if we were to create ports, should we create one per backend? so rakudo-moar would use nqp-moar would use MoarVM ?

[23:44] <grondilu> timotimo: could not figure out how to do it otherwise.

[23:45] <grondilu> the C code was in SDL1.2 and I could not translate it in SDL2 (I don't have 1.2 on my machine)

[23:45] <grondilu> s/was/is/

[23:47] *** wicope left
[23:53] <timotimo> grondilu: personally i'd suggest loading raw pixel data from a VMArray-repr'd thing (like a Buf) or a CArray into a texture and just presenting that

[23:55] <timotimo> also, i'd think having two nested for loops would be better, performance-wise, than having an X'd for loop

[23:56] <TimToady> could probably do the random stuff in another thread

[23:56] <timotimo> otherwise, SDL_RenderDrawPoints exists and can get you less overhead than calling SDL_RenderDrawPoint once per point

[23:57] <TimToady> timotimo: feel free to fix--it's a wiki, after all :)

[23:59] <TimToady> ooh, S17-scheduler/every.t appears to have flapped on JVM!

