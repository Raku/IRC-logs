[00:01] <virtualsue> timotimo: you'd have to ask ilmari. i gather he barely saw any of it even so. 

[00:02] *** raiph left
[00:03] <timotimo> holy wow.

[00:03] <timotimo> apparently just using at_pos instead of AT-POS (which has the burden of making sure the program will warn about its impending deprecation) makes farabi serving pages A WHOLE LOT slower

[00:03] <timotimo> that's a way to discourage deprecated methods

[00:08] *** gcole joined
[00:09] *** eli-se left
[00:20] <ugexe> i keep getting the following error during gen/jvm/BOOTSTRAP.nqp on win32 now: java.lang.LinkageError: loader (instance of  org/perl6/nqp/runtime/ByteClassLoader): attempted  duplicate class definition for name: "2298F07D3EE83B7B2FB42666D8F5903870D8701D"

[00:22] <ugexe> the hash(?) changes each time though

[00:27] *** laouji joined
[00:37] *** mr-foobar left
[00:38] *** mr-foobar joined
[00:39] *** laouji left
[00:40] *** laouji joined
[00:41] *** larion joined
[00:43] <dalek> rakudo-star-daily: 5a32219 | coke++ | log/ (9 files):

[00:43] <dalek> rakudo-star-daily: today (automated commit)

[00:43] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5a32219572

[00:43] <dalek> perl6-roast-data: c3b41a1 | coke++ | / (9 files):

[00:43] <dalek> perl6-roast-data: today (automated commit)

[00:43] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c3b41a10d7

[00:44] *** laouji left
[00:45] *** C0rruptor left
[00:48] *** larion left
[00:50] *** lichtkind left
[00:50] *** laouji joined
[00:55] <dalek> rakudo/tab-completion: fdb8ed9 | hoelzro++ | / (2 files):

[00:55] <dalek> rakudo/tab-completion: Decouple completion from linenoise

[00:55] <dalek> rakudo/tab-completion: review: https://github.com/rakudo/rakudo/commit/fdb8ed9433

[00:59] *** Foxcool left
[01:00] *** Foxcool joined
[01:05] <b2gills> nsharrok: I have my doubts that anyone has attempted that

[01:06] *** pecastro left
[01:08] *** raiph joined
[01:08] <Mouq> hoelzro: Is there some way to avoid doing self.eval("use Linenoise;…") over and over? maybe bind to a list of functions and then assign each variable to each position of the returned list?

[01:08] *** pecastro joined
[01:09] *** aborazmeh joined
[01:09] *** aborazmeh left
[01:09] *** aborazmeh joined
[01:10] *** thilp left
[01:10] * Mouq wonders if we could allow "use Linenoise:from<Perl6>" in NQP…

[01:10] *** aborazmeh left
[01:13] <[Coke]> Wouldn't you need to load Perl 6 to do that?

[01:21] *** larion joined
[01:22] <hoelzro> Mouq: I would like to find a way; I'll be refining it over time

[01:22] <hoelzro> I don't think NQP supports use ...:from<...>

[01:27] *** larion left
[01:35] *** mr-foobar left
[01:53] *** kaare_ left
[01:57] <nsharrok> Thanks Brad. I hadn't seen anything on IIS setup. I'm having a go at setting up a handler mapping. I'll let you know

[02:04] *** larion joined
[02:04] <dalek> gtk-simple/dllbundle: 3908285 | retupmoca++ | / (28 files):

[02:04] <dalek> gtk-simple/dllbundle: Bundle .dll files for windows

[02:04] <dalek> gtk-simple/dllbundle: 

[02:04] <dalek> gtk-simple/dllbundle: Note that this introduces a 300 line NativeLib.pm6 file to properly

[02:04] <dalek> gtk-simple/dllbundle: load the .dll files when they aren't in the system path. See the comment

[02:04] <dalek> gtk-simple/dllbundle: at the top of that file for details.

[02:04] <dalek> gtk-simple/dllbundle: review: https://github.com/perl6/gtk-simple/commit/390828537d

[02:06] <retupmoca> ^ can a couple of people look at that GTK::Simple branch and let me know if we want something like that?

[02:06] <retupmoca> or if it isn't worth it and we should just point people to the GTK download page

[02:08] *** larion left
[02:09] *** larion joined
[02:10] <retupmoca> (use case: I have a toy windows program that uses GTK::Simple. If I can distribute it without mucking with $PATH and 3rd-party installs, I would be very happy)

[02:11] *** virtualsue left
[02:14] *** larion left
[02:15] *** virtualsue joined
[02:17] <skids> m: my uint32 @s; my uint32 @t; @s »+« @t;

[02:17] <camelia> rakudo-moar af6bd0: OUTPUT«Cannot find method 'array[uint32]'␤  in sub hyper at src/gen/m-CORE.setting:22228␤  in block  at src/gen/m-CORE.setting:22094␤  in block <unit> at /tmp/hblT4N5yQN:1␤␤»

[02:20] *** azawawi joined
[02:20] <azawawi> hi

[02:21] <skids> o/

[02:25] *** adu joined
[02:28] *** raiph left
[02:33] *** virtualsue left
[02:39] *** kaare_ joined
[02:39] *** kaleem joined
[02:46] *** larion joined
[02:48] *** chenryn joined
[02:49] *** anaeem1 joined
[02:52] *** larion left
[02:52] *** C0rruptor joined
[02:52] <skids> m: my $i = 0; my @A = 1,2,3; @A.push(@A.map: { $_ }); @A.say; my uint32 @a = 1,2,3; @a.push(@a.map: { die(@a.gist) if $i++ > 10; $_ }); @a.say;

[02:52] <camelia> rakudo-moar af6bd0: OUTPUT«1 2 3 1 2 3␤1 2 3 1 2 3 1 2 3 1 2 3 1 2␤  in block <unit> at /tmp/kxA4JxTEJb:1␤␤»

[02:53] *** anaeem1 left
[02:58] *** karniel joined
[02:59] <adu> hi skarn 

[02:59] <adu> hi skids 

[03:00] <skids> o/

[03:00] <adu> how goes?

[03:00] *** C0rruptor left
[03:00] <skids> Having fun working some native sized types into Sum.

[03:00] <adu> skids: ooo the crypto digest thing?

[03:01] <skids> Not seeing much speedup, because I think my slowness is in the marshalling.

[03:01] <adu> skids: have you tried a disasm?

[03:01] <japhb> .botsnack

[03:01] <yoleaux> 21 Mar 2015 09:37Z <nine_> japhb: I cannot reproduce your MUTEX_LOCK Inline::Perl5 failure. Can you give me some information like which exact Perl 5 version with which configuration options you're using and maybe a backtrace?

[03:01] <yoleaux> :D

[03:01] <yoleaux> 22 Mar 2015 12:07Z <Ulti> japhb: let me know if there is anything I can do to make this worthy of perl-bench https://github.com/japhb/perl6-bench/pull/23

[03:02] <japhb> .tell Ulti OK, I replied to your perl6-bench pull request.

[03:02] <yoleaux> japhb: I'll pass your message to Ulti.

[03:02] <skids> adu: no, I did try to make sense of a profile run butI don't know enough guts to figure out what to look for.

[03:02] *** chenryn left
[03:03] <japhb> nine_: I'll run a fresh build now, and see if I can recreate the Inline::Perl5 problem with Rakudo HEAD

[03:04] *** karniel left
[03:04] <adu> skids: what's the difference between buf8 and blob8?

[03:04] *** C0rruptor joined
[03:04] <skids> blob8 ir ro, buf8 rw

[03:04] *** chenryn joined
[03:04] <skids> *is

[03:04] <adu> ah

[03:05] <skids> m: say buf8 ~~ blob8; say blob8 ~~ buf8

[03:05] <camelia> rakudo-moar af6bd0: OUTPUT«False␤False␤»

[03:05] <skids> hrm.  works for MMD.

[03:06] <adu> skids: hmm, I tried building it and got "lib/Sum/Recourse.pm6"

[03:06] <adu> skids: "Failed building" ...

[03:06] <skids> Yeah, jvm is messed up right now.

[03:07] <adu> I'm on moar

[03:07] <skids> Sure?  that's where jvm fails.

[03:07] <adu> I'm on moar, for sure

[03:08] <skids> I just did a panda install Sum and got through build stage just fine.  How old is your rakudo?

[03:08] <adu> pretty old

[03:08] <adu> 647fbd1

[03:08] <adu> I'm updating now

[03:10] *** noganex_ joined
[03:12] *** noganex left
[03:13] *** aborazmeh joined
[03:13] *** aborazmeh left
[03:13] *** aborazmeh joined
[03:20] <skids> Oh well, I don't have time to hunt down a "Must parameterize array[T]" mystery precomp problem before bed, so a push will have to wait.

[03:23] <adu> skids: so I just updated rakudo to latest, and rebuilt Sum, and no luck

[03:24] <skids> Is this Win?

[03:24] <adu> skids: Mac

[03:24] <skids> Ah.

[03:24] <adu> http://pastie.org/10046356

[03:25] <skids> Well, at least that is more helpful than the JVM.  Wonder why OSX has different nativecall.

[03:26] <adu> skids: macho?

[03:27] <adu> there are actually two major differences, linux uses ELF, mac uses Mach-O, and ELF files only contain 1 arch, whereas Mach-O files can contain x86-32, x86-64, ppc, ppc64, etc.

[03:28] <skids> Maybe Mach-O-specific code is lagging behind.

[03:30] <skids> I would expect if you were accidentally loading the out-of-tree older zavolaj stuff that it would blow up sooner than that, but might be worth checking.

[03:30] <adu> skids: I dunno

[03:32] <adu> skids: but userspace mac stuff is usually pretty portable to/from linux

[03:32] <adu> but the linker generally messes up any plans of portability

[03:33] <skids> Unfortunately no bsd or mac reports at testers.p6c.org lately.

[03:33] <adu> hmm

[03:35] <[Coke]> How does one submit reports to testers.p6c.org ?

[03:35] <[Coke]> (there's no docs on the home page)

[03:35] <skids> Yeah it's a magic env var when running panda.  It really needs to be put on the testers.p6c.org front page.

[03:36] <adu> what's the var?

[03:36] <skids> It's on a blog somewhere, looking.

[03:36] <[Coke]> or in the README on the fork-able site, that would help too

[03:37] <skids> PANDA_SUBMIT_TESTREPORTS

[03:37] <skids> It was in weekly.

[03:38] <[Coke]> IWBNI if rakudo-brew also dealt with panda's path.

[03:39] <adu> woah

[03:39] <adu> this might have something to do with it: http://pastie.org/10046387

[03:39] <[Coke]> I am just built Sum using rakudobrew on OS X with no errors

[03:39] <[Coke]> s/am //

[03:40] <skids> adu: it shouldn't fetch nativecall anymore.

[03:40] <adu> wtf is my problem

[03:40] <[Coke]> why are you fetching nativecall?

[03:40] <skids> adu: probably an old out of date panda cache.

[03:40] <[Coke]> have you upgraded your rakudobrew/panda recently?

[03:40] <adu> [Coke]: yes, about 5 mins ago

[03:41] <adu> how do I panda uninstall?

[03:42] <skids> [Coke]: yeah I was just about to script the necessary steps to refresh panda when you --configure-opts="--prefix=*" when it changed from languages/site to site so I punted today.

[03:44] *** telex left
[03:44] <skids> adu: it can get a bit messy, especially since the paths just changed.  I would first try mv'ing json/state out of site/panda

[03:44] <adu> I'll try deleting rakudobrew and starting again

[03:44] <skids> You'll probably have to do something in theinstall path as well as that.

[03:45] <adu> skids: install path?

[03:45] <adu> you mean ~/.rakudobrew/bin?

[03:45] <skids> Well, if that is where you installed, you might be OK.

[03:46] <adu> yeah I was going to remove ~/.rakudobrew and start over

[03:46] *** larion joined
[03:46] *** telex joined
[03:46] <[Coke]> building sum the first time failed. building it a second time with the special env var set for submitting reports, it worked and installed.

[03:46] <skids> but /usr/share/perl6 might exist or /usr/share/languages/perl6 from older stuff.

[03:47] <adu> nope

[03:47] <adu> it's all in ~/.rakudobrew

[03:47] <skids> [Coke] hah well at least I got the ood side of the coin in the stats :-)

[03:47] *** kaleem left
[03:47] <[Coke]> how long does it take for submittals to be recorded?

[03:47] <[Coke]> er, reported is a better word.

[03:48] <skids> I didn't remember there eing much delay.

[03:48] <[Coke]> and is "PANDA_SUBMIT_TESTREPORTS=1 panda install Sum" sufficient?

[03:48] <skids> should be I think.

[03:48] <[Coke]> ok, don't see anything at http://testers.p6c.org/dist/S/Sum/Brian%20S.%20Julin.html

[03:48] <[Coke]> nor any indication in the run that it sent anything

[03:49] *** laouji left
[03:50] <skids> I'm running the same now.

[03:50] <adu> oh no http://testers.p6c.org/dist/C/C::Parser/Andrew%20Robbins.html

[03:51] <adu> does that red mean that the perl6-j screwed up, or does that mean I need to write a fix for jvm?

[03:51] *** laouji joined
[03:51] <azawawi> how can one force panda into installing into core lib instead of site/lib?

[03:52] *** davido_ left
[03:52] <azawawi> e.g. panda install HTTP::Easy

[03:52] <skids> azawawi: I haven't figured that out yet myself.

[03:53] *** chenryn left
[03:53] *** davido_ joined
[03:53] *** chenryn joined
[03:54] <azawawi> skids: dual life modules pain...

[03:55] <adu> azawawi: symlinks?

[03:56] <azawawi> adu: what about windows?

[03:56] <japhb> .tell nine_ Yep, I get 'panic: MUTEX_LOCK (22) [op.c:697].' installing Inline::Perl5 on rakudo-moar-af6bd025a5e1028b4de047fdbf76da833e92d992 using Ubuntu LTS system perl5: 'This is perl 5, version 18, subversion 2 (v5.18.2) built for x86_64-linux-gnu-thread-multi'

[03:56] <yoleaux> japhb: I'll pass your message to nine_.

[03:56] <adu> azawawi: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363878%28v=vs.85%29.aspx

[03:57] <azawawi> adu: i know about mklink

[03:57] *** chenryn left
[03:58] <adu> azawawi: ah, I didn't

[03:58] <adu> I don't use windows

[03:58] <azawawi> adu: the real problem is with installing a newer version of HTTP::Easy on rakudo. You need to nuke lib/HTTP/*

[03:59] <azawawi> adu: im talking about rakudo star ofcourse

[03:59] * skids tried with "export PANDA_SUBMIT_TESTREPORTS=1; panda install" to no avail.

[03:59] <azawawi> skids: tried PANDA_SUBMIT_TESTREPORTS=1 panda install ?

[04:00] <skids> Tried that as well, but the latter would be more definitive if anything.

[04:01] *** tinyblak left
[04:02] <skids> I do note that is is 2/3 the way through march, and there are few 2015.3 entries compared to 2015.2.  So I'm guessing submissions are not being taken maybe.

[04:03] * azawawi takes a look at panda

[04:05] <skids> Anyway, bedtime.

[04:06] *** Sqirrel left
[04:07] <adu> the mac bug still hasn't gotten fixed

[04:07] <adu> http://pastie.org/10046425

[04:08] *** b2gills left
[04:13] *** BenGoldberg left
[04:13] <adu> o wait

[04:13] <adu> it has been fixed

[04:17] *** skids left
[04:20] *** azawawi left
[04:21] <adu> should I be using ./moar-nom/install/bin or ./moar-nom/install/share/perl6/site/bin or ./moar-nom/panda/bin?

[04:27] *** laouji left
[04:30] *** nsharrok left
[04:34] *** b2gills joined
[04:36] *** tinyblak joined
[04:41] *** laouji joined
[04:44] *** Akagi201 joined
[04:46] *** jack_rabbit left
[04:54] *** chenryn joined
[04:58] *** nige joined
[04:59] *** chenryn left
[05:05] *** aborazmeh left
[05:06] *** aborazmeh_ joined
[05:06] *** aborazmeh_ left
[05:06] *** aborazmeh_ joined
[05:06] *** aborazmeh_ is now known as aborazmeh

[05:25] *** diana_olhovik_ joined
[05:28] *** adu left
[05:28] *** chenryn joined
[05:30] *** aborazmeh left
[05:31] *** Sqirrel joined
[05:32] <Mouq> Heh. The profiler page doesn't much like hundred-ly recursed functions :P

[05:46] *** kaleem joined
[06:01] *** xinming_ joined
[06:04] *** jack_rabbit joined
[06:04] *** xinming left
[06:08] *** mr-foobar joined
[06:09] * Mouq just realized ideone.com has a Perl 6 option :O

[06:13] <Mouq> "say $*PERL.compiler" => "rakudo (2014.7)"; "say $*VM" => "parrot (6.6.0)"

[06:13] <Mouq> Could be worse

[06:14] *** mr-foobar left
[06:16] *** mr-foobar joined
[06:20] *** mr-foobar left
[06:20] *** bjz joined
[06:21] *** mr-foobar joined
[06:23] *** C0rruptor left
[06:28] *** diana_olhovik_ left
[06:33] *** rurban joined
[06:34] *** yeahnoob joined
[06:36] *** bjz left
[06:41] *** jack_rabbit left
[06:42] *** MadcapJake left
[06:46] *** espadrine joined
[06:48] *** jack_rabbit joined
[06:55] *** mr-foobar left
[06:58] *** mr-foobar joined
[06:58] *** jack_rabbit left
[07:02] *** mr-foobar left
[07:05] *** xprime left
[07:05] *** diana_olhovik joined
[07:06] *** aborazmeh joined
[07:06] *** aborazmeh left
[07:06] *** aborazmeh joined
[07:07] *** mr-foobar joined
[07:08] *** prime joined
[07:08] *** prime left
[07:08] *** prime joined
[07:10] *** jack_rabbit joined
[07:20] *** MadcapJake joined
[07:21] *** anaeem1 joined
[07:24] *** jack_rabbit left
[07:25] *** Rounin joined
[07:28] *** rindolf joined
[07:29] *** jack_rabbit joined
[07:36] *** bjz joined
[07:37] *** anaeem1 left
[07:46] *** andreoss joined
[07:49] *** Akagi201_ joined
[07:49] *** nige left
[07:50] *** bjz left
[07:51] *** Akagi201 left
[07:58] *** Ven joined
[08:01] *** jack_rabbit left
[08:01] *** Ven left
[08:03] *** Ven joined
[08:06] <nine_> .tell japhb Cannot repor using the same perl and rakudo version. Will get me an Ubuntu 14.04 LTS VM and try it there.

[08:06] <yoleaux> 03:56Z <japhb> nine_: Yep, I get 'panic: MUTEX_LOCK (22) [op.c:697].' installing Inline::Perl5 on rakudo-moar-af6bd025a5e1028b4de047fdbf76da833e92d992 using Ubuntu LTS system perl5: 'This is perl 5, version 18, subversion 2 (v5.18.2) built for x86_64-linux-gnu-thread-multi'

[08:06] <yoleaux> nine_: I'll pass your message to japhb.

[08:06] *** larion left
[08:07] *** fhelmberger joined
[08:11] *** darutoko joined
[08:13] <Ven> o/, #perl

[08:13] *** FROGGS joined
[08:13] <Ven> o/, #perl6*.

[08:13] *** abraxxa joined
[08:14] *** aborazmeh left
[08:16] <sergot> morning \o

[08:16] *** mr-foobar left
[08:17] *** bjz joined
[08:18] *** azawawi joined
[08:18] <azawawi> hi

[08:18] <FROGGS> morning

[08:18] <azawawi> im looking for the msi for rakudo starr 2015.03

[08:19] <azawawi> s/starr/star

[08:19] <moritz> if it's not on rakudo.org/download/star, it doesn't exit

[08:19] <moritz> *exist

[08:19] *** grondilu joined
[08:19] <FROGGS> I'll do that this evening

[08:20] <azawawi> FROGGS++

[08:21] <azawawi> how does one become a win32 release maintainer? :)

[08:21] <moritz> azawawi: by simply doing it

[08:22] <moritz> azawawi: when you have something to upload, I can upload it for you, or give you access directly

[08:22] <azawawi> moritz: i meant the release procedure :)

[08:22] <FROGGS> azawawi: there is an undocumented 10 step instruction list

[08:23] <FROGGS> I probably should put the steps I do online...

[08:23] * azawawi listens

[08:23] <moritz> FROGGS: please document it

[08:24] <abraxxa> morning

[08:25] <abraxxa> FROGGS: just saw that my git push halted at the github password prompt ;(

[08:25] <FROGGS> abraxxa: a push to your DBIish?

[08:25] <nwc10> good *, *

[08:25] <FROGGS> hi nwc10 

[08:25] <abraxxa> FROGGS: yes

[08:26] *** Ven left
[08:26] <FROGGS> azawawi: https://gist.github.com/FROGGS/6753acf3fe110f100782

[08:26] <masak> morning, #perl6

[08:27] <FROGGS> azawawi: we can get rid of one step or the other by creating the .bat files automagically...

[08:27] <azawawi> FROGGS: sure

[08:27] <FROGGS> azawawi: and I also need to document how your build environment has to look like

[08:28] *** zjmarlow joined
[08:31] *** brrt joined
[08:32] *** zjmarlow__ left
[08:33] *** zjmarlow left
[08:33] *** zjmarlow joined
[08:34] *** Akagi201_ left
[08:34] *** Akagi201 joined
[08:39] *** sivoais left
[08:40] *** Akagi201_ joined
[08:43] *** pdcawley joined
[08:43] *** sivoais joined
[08:43] *** coffee` joined
[08:43] *** Akagi201 left
[08:45] *** sirsleepalot left
[08:46] *** yeahnoob left
[08:48] *** sivoais left
[08:48] *** Alina-malina left
[08:49] *** Alina-malina joined
[08:51] *** sirsleepalot joined
[08:53] <abraxxa> great, the demo oci c apps all don't use floats...

[08:54] <azawawi> FROGGS: could you please send me the msi rakudo star build environment via .tell once you're finished with it?

[08:55] <moritz> abraxxa: have you looked on github for "example" code?

[08:55] <FROGGS> azawawi: will do

[08:55] *** espadrine left
[08:56] <abraxxa> moritz: not directly, duckduckgo didn't really bring up anything useful for SQLT_FLT. the datatype docs mention binding as string, but that lead to a segfault

[08:56] *** kjs_ joined
[08:56] <abraxxa> i've tried DBD::Oracle as template but as I'm no C programmer that code is way over my head

[08:56] <moritz> https://github.com/search?q=SQLT_FLT&type=Code&utf8=%E2%9C%93

[08:56] <abraxxa> i only say that it also binds using SQLT_FLT

[08:57] <moritz> no idea how useful that is

[08:57] <FROGGS> "bind_unsupported_1.phpt "

[08:57] <azawawi> FROGGS: thanks :)

[08:57] <abraxxa> moritz: thanks

[08:58] <FROGGS> abraxxa: https://github.com/nonrational/qt-everywhere-opensource-src-4.8.6/blob/6708f1b28d6a477c22dd8d4745e737e3b3b74339/src/sql/drivers/oci/qsql_oci.cpp#L324

[08:59] *** kurahaupo left
[09:00] *** sivoais joined
[09:00] *** zjmarlow left
[09:00] *** zjmarlow joined
[09:00] <abraxxa> looks like what I'm doing

[09:01] <abraxxa> i'll try to encode some form of OCI tracing

[09:01] <abraxxa> is it possible that signed/unsigned is a problem?

[09:01] <abraxxa> as far as I've seen NativeCall can't distinguish between the two

[09:02] <abraxxa> the error i'm getting is ORA-01024: invalid datatype in OCI call which according to the docs means that I've passed an illegal value to the datatype identifier

[09:02] <abraxxa> which is 1..7 and SQLT_FLT is 4

[09:02] *** kurahaupo joined
[09:02] <nwc10> http://lostinjit.blogspot.co.at/2015/03/hippyvm-goes-to-y-combinator-and-fails.html -- http://lostinjit.blogspot.co.at/2015/03/hippyvm-goes-to-y-combinator-and-fails.html

[09:02] <nwc10> whole post and comments are interesting.

[09:02] <abraxxa> i've defined ub2 as int16

[09:02] <FROGGS> no, signedness is about the value, not the type constant it complains about me thinks

[09:03] <moritz> abraxxa: 4 is the same bit pattern in int16 and uint16

[09:03] <moritz> so that doens't matter here

[09:03] <abraxxa> ok, thanks

[09:05] <dalek> roast: 307c450 | lizmat++ | S32-num/rat.t:

[09:05] <dalek> roast: Unfudge passing Rat tests

[09:05] <dalek> roast: review: https://github.com/perl6/roast/commit/307c45066b

[09:06] *** nige joined
[09:07] <dalek> Heuristic branch merge: pushed 45 commits to rakudo/newio by lizmat

[09:10] <abraxxa> is there debugging/tracing available in nativecall?

[09:10] *** Ven joined
[09:11] *** cschwenz joined
[09:11] <FROGGS> abraxxa: no

[09:12] *** larion joined
[09:13] *** Akagi201_ left
[09:14] *** Akagi201 joined
[09:25] *** zjmarlow left
[09:26] *** zjmarlow joined
[09:29] <dalek> roast: ff518a8 | lizmat++ | S02-types/WHICH.t:

[09:29] <dalek> roast: Add some native WHICH testing

[09:29] <dalek> roast: review: https://github.com/perl6/roast/commit/ff518a8fd0

[09:30] <moritz> interesting python precedence WTF

[09:31] <moritz> python recycles the + operator on strings for string concatenation

[09:32] <nwc10> is python sufficiently typed that that works? Or does it have the same mess as JS?

[09:32] <moritz> and the % operator with a string LHS for fmt-like string templating

[09:32] <moritz> nwc10: it never implicitly coerces, so it's less of a wtf

[09:32] <moritz> but

[09:32] <moritz> precedence of % is tighter than +

[09:32] <moritz> so if you have a longish string, and line-break it

[09:33] <moritz> you write that as "first half " + "second half"

[09:33] <moritz> and now you add templating

[09:33] <moritz> "%s half %s half" % ("first", "second")

[09:33] <moritz> splits to

[09:33] <moritz> "%s half " + "%s half" % ("first", "second")

[09:33] <moritz> and BOOM

[09:34] <moritz> because % is tighter than %

[09:34] *** sivoais left
[09:34] *** sivoais joined
[09:35] <moritz> so you have to write

[09:35] *** andreoss left
[09:35] <moritz> ("%s half " + "%s half") % ("first", "second")

[09:36] *** laouji left
[09:37] *** dakkar joined
[09:42] *** Akagi201 left
[09:43] *** Akagi201 joined
[09:44] <abraxxa> what's the correct method to check for 'not null' on a p6 var of any datatype?

[09:45] *** kaleem left
[09:46] <lizmat> m: say Int.DEFINITE; say 42.DEFINITE

[09:46] <camelia> rakudo-moar af6bd0: OUTPUT«False␤True␤»

[09:46] <lizmat> S12:1616

[09:46] <synopsebot> Link: http://design.perl6.org/S12.html#line_1616

[09:46] *** cdc joined
[09:47] <lizmat> abraxxa: ^^^

[09:47] *** kaleem joined
[09:47] <abraxxa> lizmat: thanks

[09:48] <abraxxa> the variable should allow undefined values too, i just need to check it

[09:48] *** laouji joined
[09:49] <Timbus> that seems awfully special, why not just `defined $var` ?

[09:49] <abraxxa> m: my Int $v = ''; say $v.chars; say $v.DEFINITE;

[09:49] <camelia> rakudo-moar af6bd0: OUTPUT«Type check failed in assignment to '$v'; expected 'Int' but got 'Str'␤  in block <unit> at /tmp/y0hxmWLSrU:1␤␤»

[09:50] *** espadrine joined
[09:51] <moritz> usually .defined works fine

[09:51] <moritz> no need to scream :-)

[09:51] *** brrt left
[09:52] <Timbus> a blank string though, is defined

[10:01] <dalek> roast: 04af9e7 | lizmat++ | S02-types/WHICH.t:

[10:01] <dalek> roast: Add Buf/Blob to WHICH type checking

[10:01] <dalek> roast: review: https://github.com/perl6/roast/commit/04af9e7f9a

[10:03] <dalek> Heuristic branch merge: pushed 101 commits to roast/newio by lizmat

[10:04] *** lolisa joined
[10:05] <lizmat> afk&

[10:07] *** chenryn left
[10:07] *** azawawi left
[10:08] *** virtualsue joined
[10:13] <abraxxa> m: my Str $v = ''; say $v.chars; say $v.defined;

[10:13] <camelia> rakudo-moar af6bd0: OUTPUT«0␤True␤»

[10:13] *** lolisa left
[10:13] <abraxxa> in case of Oracle I think I need to stay with .chars > 0

[10:15] <abraxxa> should a NativeCall sub be defined with { * } now instead of { ... }?

[10:15] <nwc10> moritz: (delayed) thanks

[10:15] <nwc10> but of course, your tests will catch that :-/

[10:17] *** zjmarlow left
[10:17] *** zjmarlow joined
[10:18] <FROGGS> m: my Str $v = ''; say $v.chars; say so $v

[10:18] <camelia> rakudo-moar af6bd0: OUTPUT«0␤False␤»

[10:19] <FROGGS> m: my Str $v = ''; say $v.chars; say ?$v

[10:19] <camelia> rakudo-moar af6bd0: OUTPUT«0␤False␤»

[10:19] <FROGGS> abraxxa: an empty string boolifies to false

[10:20] <FROGGS> abraxxa: so if it boolifies to true (in e.g. 'if $v {'), then it is a Str instance that has chars in it

[10:21] <FROGGS> abraxxa: and { * } vs. { ... } is up to your taste

[10:22] <moritz> nwc10: huh, what did I do? :-)

[10:23] <nwc10> moritz: answered my question about + and % in python about an hour ago

[10:24] <moritz> ah

[10:27] <dalek> rakudo/nom: bc08619 | usev6++ | src/core/operators.pm:

[10:27] <dalek> rakudo/nom: Do not return the previous value when generator function of sequence calls 'last'

[10:27] <dalek> rakudo/nom: 

[10:27] <dalek> rakudo/nom: fixes things like 'say 10,9,8, { diff - 1 || last } ... *'

[10:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc08619e1e

[10:27] <dalek> rakudo/nom: 9b5d4e2 | FROGGS++ | src/core/operators.pm:

[10:27] <dalek> rakudo/nom: Merge pull request #393 from usev6/nom

[10:27] <dalek> rakudo/nom: 

[10:27] <dalek> rakudo/nom: Don't return previous value when generator function of sequence calls 'last'

[10:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9b5d4e256a

[10:29] *** kjs_ left
[10:30] <bartolin> m: say 10,9,8, { $_ - 1 || last } ... *  # s/diff/$_/ in commit message

[10:30] <camelia> rakudo-moar af6bd0: OUTPUT«10 9 8 7 6 5 4 3 2 1 1␤»

[10:31] *** laouji left
[10:33] *** sqirrel_ joined
[10:37] *** kjs_ joined
[10:37] <dalek> roast: 311cf9d | usev6++ | S03-sequence/basic.t:

[10:37] <dalek> roast: Unfudge passing tests for 'sequence + last'

[10:37] <dalek> roast: review: https://github.com/perl6/roast/commit/311cf9d9f1

[10:45] <grondilu> "diff"?

[10:45] <grondilu> oh I see the s/diff/$_/ now

[10:46] <abraxxa> FROGGS: thanks

[10:46] <grondilu> not that it matter but I think you can use the amend git comment to change it

[10:47] <grondilu> s/comment/command/

[10:47] <abraxxa> FROGGS: i guess .chars > 0 better carries the information what I tried to achieve

[10:48] <bartolin> grondilu: that was a copy-and-pasto with github :/ 

[10:49] <grondilu> still, it should be possible to edit it with git commit --amend

[10:49] <grondilu> and the push again

[10:49] <grondilu> s/the/then/

[10:50] <bartolin> grondilu: I'd have to make a PR. do you think it's worth it?

[10:50] <grondilu> probably not

[10:50] <bartolin> I'll at least add a comment to the commit

[11:03] <Ven> grondilu: no, if you --amend you'll need to force-push

[11:03] <Ven> you shouldn't force push a repo so big

[11:04] *** lumimies left
[11:06] <grondilu> ok, noted

[11:07] *** kurahaupo left
[11:08] <Ven> m: say [].WHAT.perl

[11:08] <camelia> rakudo-moar 9b5d4e: OUTPUT«Array␤»

[11:14] *** sqirrel_ left
[11:17] *** lolisa joined
[11:19] *** rurban left
[11:26] <psch> \o

[11:27] <psch> is there a reason HLL::Grammar.integer doesn't parse negative integers?

[11:27] <psch> i've been looking at #123682, and that seems the most sensible spot to fix

[11:27] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123682

[11:27] *** zakharyas joined
[11:27] <psch> m: say :10<-1>

[11:27] <camelia> rakudo-moar 9b5d4e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/HB848L3x9H␤Malformed radix number␤at /tmp/HB848L3x9H:1␤------> 3say :10<7⏏5-1>␤    expecting any of:␤        number in radix notation␤»

[11:27] <psch> m: say :10<1*2**-64>

[11:27] <camelia> rakudo-moar 9b5d4e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/AvAC1jYzTC␤Malformed radix number␤at /tmp/AvAC1jYzTC:1␤------> 3say :10<1*2**7⏏5-64>␤    expecting any of:␤        number in radix notation␤»

[11:33] *** lumimies joined
[11:34] *** Akagi201_ joined
[11:35] <grondilu> m:say :10(-1)

[11:35] <grondilu> m: say :10(-1)

[11:35] <camelia> rakudo-moar 9b5d4e: OUTPUT«You have confused the number -1 with the textual representation "-1";␤if you wanted to render the number in the given base, use $number.base($radix)␤  in block <unit> at /tmp/iwpn8jZGp1:1␤␤»

[11:35] *** Akagi201 left
[11:36] <cdc> Hello #perl6

[11:36] <grondilu> that's quite a talkative error message (which is good)

[11:37] <cdc> I'd like to make yada exceptions distinguishable from user exceptions, ex. X::Stub::Executed vs. X::AdHoc.

[11:37] <cdc> I tried the following change, but it doesn't work: https://gist.github.com/anonymous/27da128ae72198ceb182 (warning: cargo-cult programming).

[11:38] <cdc> Any usggestion is welcomed!

[11:38] <cdc> *suggestion

[11:38] <psch> cdc: Perl6/World.nqp has a method that gives you a typed exception

[11:38] <psch> cdc: src/Perl6/World.nqp:2908

[11:39] <psch> cdc: using that instead of building the ast yourself should work

[11:39] <cdc> psch: thanks, I'll give it a try.

[11:43] *** chenryn joined
[11:46] *** chenryn left
[11:47] *** chenryn joined
[11:48] <psch> m: say 0xdeadbeef * 16 ** -1

[11:48] <camelia> rakudo-moar 9b5d4e: OUTPUT«233495534.9375␤»

[11:48] <psch> m: say :16<deadbeef> * 16 ** -1

[11:48] <camelia> rakudo-moar 9b5d4e: OUTPUT«233495534.9375␤»

[11:50] <nwc10> I'm curious about "Nuitka Python", which seems to be (yet another) Python re-implementation (and seemingly pretty cool): http://nuitka.net/posts/nuitka-release-0511.html

[11:50] <nwc10> anyone know why it's being written - just fun?

[11:50] <nwc10> because supporting everything from 2.6 to 3.4 seems pretty awesome

[11:50] *** zjmarlow left
[11:51] *** zjmarlow joined
[12:08] <bartolin> I've created another PR for sequences (394). it would be great if someone could take a look at it, since I'm not absolutely sure about it

[12:09] <bartolin> m: sub f (Int $n) { $n > 3 ?? "liftoff!" !! $n + 1 }; say 1, &f ... *

[12:09] <camelia> rakudo-moar 9b5d4e: OUTPUT«===SORRY!===␤Type check failed in binding $n; expected 'Int' but got 'Str'␤»

[12:09] <bartolin> as I understand S03 that should give '1 2 3 4 liftoff!'

[12:10] *** eli-se joined
[12:10] <psch> m: 1, { $^a.WHAT.say }, ... 6

[12:10] <camelia> rakudo-moar 9b5d4e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uPROEWWVjI␤Comma found before apparent series operator; please remove comma (or put parens␤    around the ... listop, or use 'fail' instead of ...)␤at /tmp/uPROEWWVjI:1␤------> 031, { $^a.WHAT.say },7…»

[12:11] <psch> m: 1, { $^a.WHAT.say } ... 6

[12:11] <eli-se> good day

[12:11] <psch> o/ eli-se 

[12:11] <camelia> rakudo-moar 9b5d4e: OUTPUT«(timeout)(Int)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool…»

[12:11] <eli-se> how does resource cleanup work in Perl 6?

[12:11] <eli-se> e.g. closing files. is there FINALLY?

[12:11] <psch> m: 1, 2, { $^a.WHAT.say } ... 6

[12:11] <psch> ah meh

[12:12] <psch> eli-se: there's LEAVE and UNDO

[12:12] <eli-se> nice

[12:12] <camelia> rakudo-moar 9b5d4e: OUTPUT«(timeout)(Int)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool)␤(Bool…»

[12:12] <eli-se> why not refcounting like in Perl 5?

[12:12] <psch> eli-se: i think because backends are free to do their GC stuff however they want

[12:12] <psch> s/backends/implementations/

[12:13] <psch> eli-se: consider that the test suite is the specification, and testing for GC behavior might not belong into the language

[12:16] <cdc> eli-se: for MoarVM -> http://jnthn.net/papers/2013-bs-secret-life-of-gc.pdf

[12:16] <eli-se> psch: I mean from a design PoV, since refcounting is typically deterministic whereas tracing GCs typically aren't

[12:17] <psch> eli-se: i don't see how that change my argument.  Perl 6 the language doesn't dictate GC behavior

[12:17] <eli-se> I'm asking why

[12:18] <psch> i don't know, but i think it's because the language isn't supposed to be tied to an implementation

[12:19] <psch> which is what some of Perl 5's problems came from, i.e. "if perl parses it, it's Perl"

[12:19] *** zjmarlow_ joined
[12:20] <cdc> psch: $*W.typed_exception($/, ['X', 'Stub', 'Executed']) complains during the parse stage: "Could not locate compile-time value for symbol X::Stub::Executed"

[12:20] <cdc> (this does not work either with ['X', 'Comp'], for instance)

[12:20] <cdc> I don't understand why

[12:20] <psch> eli-se: TimToady++ probably can go into more detail on the "why is GC behavior not part of the language", while jnthn++ will likely be able to tell you why moar does what it does

[12:21] <eli-se> ok

[12:21] <arnsholt> The problem with refcounting is that it fails horribly when there are cycles

[12:22] <psch> cdc: can you update your gist?

[12:22] *** eli-se left
[12:23] *** zjmarlow left
[12:23] <arnsholt> And if you mandate timely/predictable collection, you're basically requiring some kind of refcounting

[12:25] *** chenryn left
[12:27] *** ggoebel left
[12:29] *** kjs_ left
[12:32] *** chenryn joined
[12:33] <cdc> psch: https://gist.github.com/anonymous/2d5160e65ef9c12a5cd2 (I wasn't able to update the previous gist)

[12:35] *** Akagi201_ left
[12:36] *** Akagi201 joined
[12:38] *** Akagi201_ joined
[12:40] *** gfldex joined
[12:42] *** Akagi201 left
[12:46] <psch> cdc: actually, that's interesting

[12:46] <psch> cdc: we're stubbing things right at the start of CORE.setting

[12:47] <psch> cdc: and during compilation of that, your patch builds an X::Stub::Executed for every stub it encounters

[12:47] <psch> cdc: but the symbol doesn't exist yet, and you can't stub it either, because circularity

[12:48] *** Akagi201_ left
[12:48] *** Akagi201 joined
[12:50] <psch> cdc: i think it could work if you stub X::Stub::Executed in src/Metamodel/BOOTSTRAP.nqp, but i'm not sure it belongs there

[12:51] <cdc> psch: thanks for your help!

[12:51] <cdc> psch: I should ask to moritz if it belongs there?

[12:52] *** Akagi201_ joined
[12:53] <moritz> if what belongs where?

[12:53] *** kjs_ joined
[12:53] <moritz> no, it doesn't belong there

[12:54] <moritz> you can emit a symbolic lookup

[12:54] <moritz> and it'll exist by the time you throw such an error

[12:54] *** chenryn left
[12:55] *** sirsleepalot left
[12:55] <cdc> moritz: could you show me some examples of symbolic lookups, please?

[12:56] <cdc> I never wrote anything in NQP before.

[12:56] *** Akagi201 left
[12:57] *** colomon left
[12:59] <psch> oh

[13:00] <psch> yeah, the Actions code is wrong

[13:00] <psch> i think :P

[13:01] <psch> $*W.find_symbol looks during compile time, but make_yada should emit something that looks during runtime

[13:01] <psch> cdc: ^^^ 

[13:02] <cdc> psch: ok, how I can defer this action?

[13:03] <psch> cdc: $*W.symbol_lookup, defined at Perl6/World.nqp:2666 

[13:03] <cdc> thanks, I'm looking at it

[13:04] <psch> cdc: the bit you had before with :op<call> should take the result of symbol_lookup as argument i think

[13:04] *** telex left
[13:04] <cdc> ok, I give it a try

[13:06] *** telex joined
[13:10] *** nige left
[13:10] <moritz> for lexicals you can also do a QAST:Var.new(:name<...>)

[13:10] <moritz> but I fear that doesn't work with multi-joined class names

[13:11] *** rurban joined
[13:12] <Ven> .u         

[13:12] <yoleaux> U+0020 SPACE [Zs] ( )

[13:12] <yoleaux> U+2007 FIGURE SPACE [Zs] ( )

[13:13] *** Akagi201_ left
[13:13] *** PerlJam joined
[13:13] *** Akagi201 joined
[13:14] *** Akagi201_ joined
[13:15] <dalek> rakudo/no-linenoise: f04bcb6 | hoelzro++ | tools/build/NQP_REVISION:

[13:15] <dalek> rakudo/no-linenoise: DON'T MERGE ME Bump NQP revision

[13:15] <dalek> rakudo/no-linenoise: review: https://github.com/rakudo/rakudo/commit/f04bcb6ebc

[13:15] *** Akagi201 left
[13:16] <dalek> nqp/no-readlineint: 5cc28f9 | hoelzro++ | tools/build/MOAR_REVISION:

[13:16] <dalek> nqp/no-readlineint: DON'T MERGE ME Bump MoarVM version

[13:16] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/5cc28f9b11

[13:16] <dalek> rakudo/tab-completion: 7418f0a | hoelzro++ | / (2 files):

[13:16] <dalek> rakudo/tab-completion: Add rudimentary tab completion

[13:16] <dalek> rakudo/tab-completion: review: https://github.com/rakudo/rakudo/commit/7418f0a0ea

[13:16] <dalek> rakudo/tab-completion: 886d00b | hoelzro++ | / (2 files):

[13:16] <dalek> rakudo/tab-completion: Decouple completion from linenoise

[13:16] <dalek> rakudo/tab-completion: review: https://github.com/rakudo/rakudo/commit/886d00b3fa

[13:16] *** zakharyas left
[13:21] *** zakharyas joined
[13:23] *** coffee` left
[13:23] *** sivoais left
[13:23] *** lolisa left
[13:24] *** Akagi201_ left
[13:24] *** sivoais joined
[13:24] *** Akagi201 joined
[13:25] *** Akagi201_ joined
[13:25] *** fhelmberger left
[13:29] *** Akagi201 left
[13:31] *** ibo2perl joined
[13:32] <ibo2perl> m: my $x; say $x; $x  = 1/0; say "alive and " ~ ? $x; say $x

[13:32] <camelia> rakudo-moar 9b5d4e: OUTPUT«(Any)␤alive and True␤Divide by zero␤  in method Numeric at src/gen/m-CORE.setting:15820␤  in sub infix:<-> at src/gen/m-CORE.setting:5279␤  in method Str at src/gen/m-CORE.setting:13115␤  in method gist at src/gen/m-CORE.setting:5116␤  in sub…»

[13:33] <ibo2perl> it is not clear to me why the ? $x evaluates to true

[13:35] <psch> m: say ?1; say ?0

[13:35] <camelia> rakudo-moar 9b5d4e: OUTPUT«True␤False␤»

[13:35] *** sqirrel_ joined
[13:35] <psch> ibo2perl: prefix:<?> is prefix:<so> with looser precedence

[13:36] <psch> ibo2perl: it's the opposite of prefix:<!>, like prefix:<not> for prefix:<so>

[13:36] <ibo2perl> psch: yes, sure. But $x has 1/0 an exception

[13:36] <psch> m: say so 1/0

[13:36] <camelia> rakudo-moar 9b5d4e: OUTPUT«True␤»

[13:36] <psch> m: say so X::DivideByZero.new

[13:36] <camelia> rakudo-moar 9b5d4e: OUTPUT«Could not find symbol '&DivideByZero'␤  in method <anon> at src/gen/m-CORE.setting:15826␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2908␤  in any find_method at src/gen/m-Metamodel.nqp:1052␤  in block <unit> at /tmp/ymmgZb_AwB:1␤␤»

[13:37] <psch> m: say so X::Numeric::DivideByZero.new

[13:37] <camelia> rakudo-moar 9b5d4e: OUTPUT«True␤»

[13:37] <psch> m: say so die "foo"

[13:37] <camelia> rakudo-moar 9b5d4e: OUTPUT«foo␤  in block <unit> at /tmp/XL9ibnNhSB:1␤␤»

[13:37] <psch> m: say so fail "foo"

[13:37] <camelia> rakudo-moar 9b5d4e: OUTPUT«Unhandled exception: foo␤   at <unknown>:1  (/home/camelia/rakudo-inst-1/share/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:15830  (/home/camelia/rakudo-inst-1/share/perl6/runtime/CORE.setting.moarvm:sink:29)␤ from…»

[13:37] <psch> i see

[13:37] <psch> ibo2perl: i missed that, sorry

[13:38] *** colomon joined
[13:39] <ibo2perl> psch: np, may be it is like schrödingers cat. without looking you dont know whether it's alive or not

[13:40] <psch> ibo2perl: Mu.Bool calls self.defined, and Exceptions are marked as handled with a call to defined

[13:40] <psch> ibo2perl: it's definitely surprising though, and might want some kind of rethinking

[13:40] <psch> maybe Exception.Bool shouldn't call defined, but throw again, i'm not sure

[13:41] <psch> actually, no, that'd would likely be horrible

[13:43] *** ibo2perl left
[13:46] *** ibo2perl joined
[13:46] <ibo2perl> m: say (1/0).WHAT

[13:46] <camelia> rakudo-moar 9b5d4e: OUTPUT«(Rat)␤»

[13:47] <ibo2perl> supporting my like schrödingers cat theory

[13:47] <psch> schrödinger's Rat, surely :)

[13:48] *** ibo2perl left
[13:49] *** nige joined
[13:49] *** rurban left
[13:52] *** kaleem left
[13:55] *** xfix joined
[13:57] *** coffee` joined
[13:59] *** tinyblak left
[14:11] *** skids joined
[14:13] *** sqirrel_ left
[14:14] *** kaare_ left
[14:15] *** C0rruptor joined
[14:25] *** tinyblak joined
[14:41] <masak> m: say 1/0 > 5

[14:41] <camelia> rakudo-moar 9b5d4e: OUTPUT«True␤»

[14:41] <masak> m: say 1/0 < 5

[14:41] <camelia> rakudo-moar 9b5d4e: OUTPUT«False␤»

[14:41] <masak> m: say 1/0 == Inf

[14:41] <camelia> rakudo-moar 9b5d4e: OUTPUT«True␤»

[14:42] <masak> m: say Inf + 7 == Inf

[14:42] <camelia> rakudo-moar 9b5d4e: OUTPUT«True␤»

[14:45] *** zakharyas left
[14:46] *** Akagi201_ left
[14:46] *** Akagi201 joined
[14:47] <hoelzro> o/ #perl6

[14:48] <masak> \o

[14:52] <Tux__> m: sub foo (Any :$x){$x.WHAT.say;if ($x.WHAT eq "Array"){my@x=$x;@x[0].WHAT.say;}};foo(x=>[[1,2][3,4]]);

[14:52] <camelia> rakudo-moar 9b5d4e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/pIvmvXOCKv␤Missing block␤at /tmp/pIvmvXOCKv:1␤------> 3HAT eq "Array"){my@x=$x;@x[0].WHAT.say;}7⏏5};foo(x=>[[1,2][3,4]]);␤    expecting any of:␤        parameterized block␤»

[14:52] *** Tux__ is now known as |Tux|

[14:53] <masak> |Tux|: .WHAT gives back a type object

[14:53] <masak> dunno if type objects enjoy being string-comapred

[14:53] <|Tux|> I know most of you would not use parens there

[14:53] <masak> I don't care so much about that

[14:53] <masak> that's just superstitious, it's up to you ;)

[14:53] <|Tux|> masak: HAT vs WHAT

[14:53] <hoelzro> one of the next steps for my tab completion branch is going to be how Linenoise.pm is to be distributed; I was thinking that it belongs out of core, but in Star

[14:53] <hoelzro> any thoughts on that?

[14:54] <masak> |Tux|: that's just cutoff

[14:54] *** Ven left
[14:54] <|Tux|> ah, so I am being misguided there. will havbe to dig deeper

[14:55] <|Tux|> Chasing (and thus simplifying) this message: "Cannot look up attributes in a type object"

[14:56] <|Tux|> masak, what is a "better" way to check WHAT? WHICH?

[14:56] <masak> m: my @a; say @a.WHAT === Array

[14:56] <camelia> rakudo-moar 9b5d4e: OUTPUT«True␤»

[14:56] <|Tux|> of course!

[14:56] <masak> m: my @a; say @a ~~ Array

[14:56] <camelia> rakudo-moar 9b5d4e: OUTPUT«True␤»

[14:57] * |Tux| still has to get used to ===

[14:57] <masak> both are better, IMO

[14:57] <masak> depends if you tolerate subtypes of Array

[14:57] <masak> ~~ does

[14:57] <|Tux|> much better now. thanks (again)

[14:58] <masak> my pleasure :)

[14:59] *** Ven joined
[15:01] *** kaleem joined
[15:06] *** aborazmeh joined
[15:06] *** aborazmeh left
[15:06] *** aborazmeh joined
[15:13] *** rindolf left
[15:14] *** eli-se joined
[15:17] *** eli-se left
[15:19] *** rmgk_ joined
[15:19] *** rmgk left
[15:19] *** rmgk_ is now known as rmgk

[15:22] *** kaleem left
[15:23] *** kaleem joined
[15:26] *** rurban joined
[15:26] *** C0rruptor left
[15:31] *** C0rruptor joined
[15:35] *** risou is now known as risou_awy

[15:39] *** risou_awy is now known as risou

[15:40] *** kaleem left
[15:41] <TimToady> .bothealthymeal

[15:42] * moritz wonders whether that begins with 'bot' or 'both' :-)

[15:43] <Ven> .botsnack

[15:43] <yoleaux> :D

[15:43] <Ven> he prefers that :p

[15:46] *** vendethiel left
[15:48] *** colomon left
[15:48] *** vendethiel joined
[15:49] *** Akagi201_ joined
[15:50] *** aborazmeh left
[15:51] *** Akagi201 left
[15:54] *** fhelmberger joined
[15:55] <raydiak> g'mornin #perl6

[15:55] <masak> g'raydiak, mornin

[15:55] <TimToady> o/

[15:55] *** Woodi joined
[15:57] *** timotimo is now known as p6weekly

[15:57] <TimToady> .oO(G'raydiak: fantasy town in Alaska that never has good weather.)

[15:57] <p6weekly> .botsnack

[15:57] <yoleaux> :D

[15:57] <yoleaux> 21 Mar 2015 21:17Z <raiph> p6weekly: Tux++ RFC7111 finished http://irclog.perlgeek.de/perl6/2015-03-20#i_10312704

[15:57] *** p6weekly is now known as timotimo

[15:58] <moritz> also, I updated http://en.wikipedia.org/wiki/Perl_6

[15:58] <|Tux|> :)

[15:59] *** fhelmberger left
[16:00] * raydiak looks out the window and sees...dreary weather

[16:00] <moritz> (removed some out-of-date mentions of parrot, and made it clearer which compilers aren't actively developed anymore)

[16:00] *** aborazmeh joined
[16:00] *** aborazmeh left
[16:00] *** aborazmeh joined
[16:00] <masak> moritz++

[16:00] <masak> decommute &

[16:01] <moritz> also http://en.wikipedia.org/wiki/Rakudo_Perl_6

[16:01] <timotimo> moritz: you left "The Synopses (The official language specification)." intact?

[16:02] <moritz> timotimo: there's still lots to clean up

[16:02] <timotimo> fair enough :)

[16:05] * jnthn yawns

[16:05] <moritz> 17:05: jnthn slowly stands up, makes his morning coffee :-)

[16:05] *** donaldh joined
[16:07] <iv> Hm, should the release link on the wikipedia page link to http://rakudo.org/2015/03/21/announce-rakudo-star-release-2015-03/ instead of the tar.gz listing?

[16:08] <jnthn> moritz: This is yawn from having completed the day's work :)

[16:08] * TimToady yawns thinking about about starting the day's work...

[16:11] *** fhelmberger joined
[16:14] *** dombo joined
[16:17] *** Vlavv_ left
[16:29] *** diana_olhovik left
[16:30] *** Vlavv_ joined
[16:32] *** Ven left
[16:32] *** colomon joined
[16:33] *** sirsleepalot joined
[16:33] *** dombo left
[16:33] <timotimo> hmm

[16:35] *** Perl6_newbee joined
[16:35] *** fhelmberger left
[16:39] *** donaldh left
[16:39] *** rurban left
[16:39] <|Tux|> does "given" when still exist in perl6 (it cannot be found on http://doc.perl6.org) or does a new syntax exist for swutch (which also shows no hits)

[16:39] <|Tux|> switch

[16:40] *** Ven joined
[16:40] <masak> |Tux|: heh.

[16:40] *** molaf joined
[16:40] <masak> |Tux|: given/when comes from Perl 6 ;)

[16:40] <masak> m: given 42 { when Int { say "it's an Int! yaaay!" } }

[16:40] <camelia> rakudo-moar 9b5d4e: OUTPUT«it's an Int! yaaay!␤»

[16:40] <|Tux|> but you can change your minds! it happened before :P

[16:41] <masak> troo.

[16:41] <masak> in Perl 6, given/when doesn't suck, because smartmatching doesn't suck, because Perl 6 has types in a much deeper way than Perl 5.

[16:41] <|Tux|> so the "bug" is that I cannot use "given" in the search box on doc.perl6.org 

[16:41] *** fhelmberger joined
[16:41] <masak> yeah.

[16:45] <|Tux|> does «when Routine» also match Sub ?

[16:45] <|Tux|> yes, I can try

[16:46] <|Tux|> yes it does

[16:46] <Ulti> given '1.0' { when 1 {say "smart match";}; when 1.0 {say "doesn't suck";} }

[16:46] <yoleaux> 03:02Z <japhb> Ulti: OK, I replied to your perl6-bench pull request.

[16:46] <Ulti> m: given '1.0' { when 1 {say "smart match";}; when 1.0 {say "doesn't suck";} }

[16:46] <camelia> rakudo-moar 9b5d4e: OUTPUT«smart match␤»

[16:46] <Ulti> even

[16:47] * Ven would expect none to match, probably

[16:47] <Ven> it does try to be smart, tho..

[16:48] <TimToady> smartmatching is all about dwimmery, and trying to put most of the dwimmery in one spot

[16:48] <timotimo> m: given '1.0' { when 1 {say "smart match"; proceed;}; when 1.0 {say "doesn't suck";} }

[16:48] <camelia> rakudo-moar 9b5d4e: OUTPUT«smart match␤doesn't suck␤»

[16:48] <TimToady> there you go

[16:49] <timotimo> the type of matcher deciding how a match should be done makes a whole lot of sense to me in understanding how things go in smart matching

[16:49] <Ulti> oh so given has break by default I didn't even realise that :S

[16:50] <TimToady> more than that, relying primarily on the one type means such switches are optimizable

[16:50] <TimToady> why we had to break the symmetrical smartmatch good and hard

[16:50] <Ulti> wait so why does that work and my example a few days ago didnt work

[16:50] <TimToady> link?

[16:50] <Ulti> using first-index

[16:50] *** sirsleepalot is now known as houseboat

[16:52] <retupmoca> timotimo: can you look at http://irclog.perlgeek.de/perl6/2015-03-23#i_10323954 ? Let me know if it looks like it makes sense or if it isn't worth it?

[16:53] <retupmoca> jnthn: or you; since you're on windows?

[16:53] <Ulti> m: given 1.0 { when 1 {say "smart match"; proceed;}; when '1.0' {say "doesn't suck";} }

[16:53] <camelia> rakudo-moar 9b5d4e: OUTPUT«smart match␤»

[16:53] <Ulti> there we go

[16:54] <Ulti> it's that the match isn't commutative

[16:54] *** Ven left
[16:54] <Ulti> so its even less predictable

[16:54] <TimToady> wrong

[16:54] <Ulti> yeah I know why

[16:54] <TimToady> it's more predictable

[16:54] <Ulti> its that it isnt even doing what I think

[16:54] *** fhelmberger_ joined
[16:55] <TimToady> it's asking a string whether it matches something that can be coerced to a string

[16:55] <TimToady> but string coercion of a Rat doesn't not automatically add .0

[16:55] <masak> Henrik van Oers going "What part of 'private' did you mis[s]?" on p6u felt like a very non-#perl6 way to hit someone over the head with new juicy knowledge. :)

[16:55] <Ulti> TimToady which is fine because I could have written an arbitrary number of .0000s

[16:56] *** fhelmberger left
[16:56] <masak> I like how most of #perl6's attitude is more "you're one of today's lucky 10,000" -- https://xkcd.com/1053/

[16:56] <Ulti> the issue is I hadn't properly learnt smart match

[16:56] <timotimo> masak: i thought these mails were a bit unfriendly in their tone

[16:57] <masak> m: given '1.0' { say "smart match" when 1; say "doesn't suck" when 1.0 } # also works, because (in Perl 6) statement_mod when doesn't break/succeed

[16:58] <camelia> rakudo-moar 9b5d4e: OUTPUT«smart match␤doesn't suck␤»

[16:58] <masak> timotimo: oh, so it wasn't just me

[16:58] <masak> timotimo: I was wondering whether to call it out, but I didn't want to come across as hyper-sensitive

[16:59] *** Rounin left
[16:59] <Ulti> masak that would have held if I hadn't turned 30 ;___; or is the age of Perl6 mastery about 70

[16:59] *** vendethiel left
[16:59] <masak> Ulti: well, Perl 6 *is* meant to be a last language...

[16:59] *** larion left
[17:00] <Ulti> I doubt any of you have used my slang so you don't know all of Perl 6 :P

[17:00] <Ulti> which is going to be a fun future

[17:01] <Ulti> I can just see Perl 6 running into the same sorts of problems human languages have

[17:01] <Ulti> I guess the spec is like a dictionary

[17:01] <masak> Ulti: back in 2010, I tweeted about being a Perl 6 user for five years already. TimToady tweeted back, saying he'd been using Perl 6 for twice as long. :P

[17:01] <Ulti> anything else is just pidgin perl 6

[17:02] <masak> &

[17:02] *** vendethiel joined
[17:03] <Ulti> I've been doing a bit of Perl 6 since the first R* so 5-6 years?

[17:03] <Ulti> the problem is it's easy to go wide in Perl 6 rather than deep in your learning

[17:05] <Ulti> unless you are actually helping with the implementation I guess

[17:05] <|Tux|> FROGGS, HELP! https://gist.github.com/Tux/90b22dd241ab896cc392

[17:05] <TimToady> we need both approaches

[17:06] *** diana_olhovik joined
[17:06] <jdv79> isn't that called a "T shaped dev" or something these days?

[17:07] * TimToady thinks that leaves out a lot of hypotenuses

[17:09] <TimToady> ▼ is more like

[17:09] <TimToady> we also need people who go half-down and half-wide :)

[17:09] <TimToady> such as Yours Truly

[17:13] <|Tux|> FROGGS, ignore. I'll use parens on given

[17:14] <FROGGS> |Tux|: I'll look into it in a few hou... okay

[17:14] <|Tux|> it is your last reverted change (reserved words like if, sub, method, and given)

[17:15] <|Tux|> somehow for does not need the parens

[17:15] <FROGGS> gtg now, might look into it later

[17:15] *** FROGGS left
[17:15] <|Tux|> thanks in advance

[17:15] *** sqirrel_ joined
[17:18] <TimToady> m: say .so ?? ｢\o/｣ !! ｢/o\｣ for <1/3> ~~ Rat, <+1-2i> ~~ Complex

[17:18] <camelia> rakudo-moar 9b5d4e: OUTPUT«\o/␤/o\␤»

[17:19] *** fhelmberger_ left
[17:20] <TimToady> m: my $state = ｢\o/｣; $state .= flip for (^10).pick; say $state;

[17:20] <camelia> rakudo-moar 9b5d4e: OUTPUT«/o\␤»

[17:20] *** fhelmberger joined
[17:21] <TimToady> m: my $state = ｢\o/｣; $state .= flip xx 10.rand; say $state;

[17:21] <camelia> rakudo-moar 9b5d4e: OUTPUT«===SORRY!===␤Method call node requires at least one child␤»

[17:21] <TimToady> m: my $state = ｢\o/｣; $state.=flip xx 10.rand; say $state;

[17:21] <camelia> rakudo-moar 9b5d4e: OUTPUT«/o\␤»

[17:21] <TimToady> m: my $state = ｢\o/｣; $state.=flip xx 10.rand; say $state;

[17:21] <camelia> rakudo-moar 9b5d4e: OUTPUT«\o/␤»

[17:23] *** abraxxa left
[17:23] *** vendethiel left
[17:24] *** mr-foobar joined
[17:25] <iv> Hm, why doesn't `42.WHAT` print anything on the REPL, unlike `say 42.WHAT`?

[17:25] *** vendethiel joined
[17:27] <iv> Where `` are not part of the code… :P

[17:27] <TimToady> probably trying not to report a result from 'my $x;' and such

[17:29] <iv> Ah, okay.

[17:29] <iv> Maybe un-perlish to report a result (Any) from 'my $x'?

[17:34] <iv> Asking because my expectation for a REPL is that it tries to print whatever I give it

[17:34] <iv> learned from Other Languages 

[17:35] *** eli-se joined
[17:36] *** muraiki joined
[17:36] <timotimo> be cautious, our REPL is very bad at a few things, especially involving the := operator :(

[17:39] <eli-se> hola

[17:39] <eli-se> cola

[17:39] <timotimo> çola?

[17:40] <eli-se> Cool

[17:40] <|Tux|> m: sub foo(Any :$in){$in.list[0] ~="Boo";};my Str $s="";$s.say;foo(in=>\$s);$s.say;

[17:40] <camelia> rakudo-moar 9b5d4e: OUTPUT«␤Boo␤»

[17:40] <|Tux|> NICE!

[17:40] <|Tux|> is this to stay? can I rely on that?

[17:42] *** zjmarlow joined
[17:44] <timotimo> m: sub foo(Any :$in is rw) { $in ~= "Boo";}; my Str $s = ""; $s.say; foo(in => $s); $s.say;

[17:44] <camelia> rakudo-moar 9b5d4e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/V5OKvXpRRe␤Cannot use 'is rw' on an optional parameter␤at /tmp/V5OKvXpRRe:1␤------> ␤»

[17:45] <timotimo> ah, that's why you did that

[17:45] *** zjmarlow_ left
[17:45] <|Tux|> not really :)

[17:45] *** colomon left
[17:47] <timotimo> no?

[17:47] <|Tux|> have a sec. will give you a link in a few secs

[17:47] <TimToady> m: sub foo(Any :$in! is rw) { $in ~= "Boo";}; my Str $s = ""; $s.say; foo(in => $s); $s.say;

[17:47] <camelia> rakudo-moar 9b5d4e: OUTPUT«␤Boo␤»

[17:47] <timotimo> ah, much cleaner

[17:49] <|Tux|> https://github.com/Tux/CSV/blob/master/test-t.pl#L1194

[17:51] *** grondilu left
[17:52] *** FROGGS joined
[17:52] *** dakkar left
[17:53] *** virtualsue left
[17:54] <timotimo> that code doesn't speak for itself, at least not to me

[17:55] <|Tux|> in => "file.csv" should open that file and parse the data in it, in => \"some data" should parse the string itself

[17:56] <|Tux|> in => $io parses from an already opened IO etc etc

[17:56] <timotimo> yeah

[17:56] <timotimo> i got that much

[17:57] <timotimo> why would you rely on mutating arguments passed in via named parameters for that?

[17:57] <TimToady> that's P5-think fighting P6-think, I think; why not just multi-dispatch to IO vs Str?

[17:57] <|Tux|> Ah, that comes inportant for out

[17:58] <|Tux|> TimToady, because that would explode

[17:58] <|Tux|> out => "file.csv" write data to the file, out => \$s appends data to the string

[17:59] <|Tux|> TimToady, in can alse be Array, in which case it can be an Array of arrays or an array of hashes

[17:59] <|Tux|> used for out

[17:59] <TimToady> so why not out => "file.csv".IO vs out => $s vs out => @array

[18:00] *** C0rruptor left
[18:00] <TimToady> IO is short for a reason

[18:00] <|Tux|> I will ponder on that. Thanks

[18:00] <TimToady> Capture is long for a similar reason :)

[18:01] <timotimo> retupmoca: bundling the .dll files in the git repository feels a bit icky to me; i'd prefer not having such binary files in there. on the other hand, making dll files easily attainable during the build phase of gtk::simple would be nice to have for windows users

[18:01] <|Tux|> out => $s ... can that be said to *append* instead of just out?

[18:01] <timotimo> we can re-host the dll files on www.p6c.org and just download them via curl or HTTP::Client or what it's called

[18:02] <|Tux|> or just have Any :$out is rw (which doesn't works as just shown)

[18:03] <timotimo> Any :$out! is rw does work

[18:03] <timotimo> TimToady showed a working example of that a few lines above

[18:03] <|Tux|> but out is optional (defaults to $*OUT)

[18:03] <timotimo> oh

[18:04] <timotimo> when you said "multi dispatch would explode" you meant a combinatoric explosion?

[18:04] <|Tux|> yes

[18:05] *** kjs_ left
[18:06] <timotimo> you don't have to have a candidate for every single combination, though

[18:06] <TimToady> m: sub foo(\x) { say x.WHAT }; foo $_; foo VAR($_)

[18:06] <camelia> rakudo-moar 9b5d4e: OUTPUT«Nil␤(Scalar)␤»

[18:06] <TimToady> there's another approach

[18:07] <timotimo> ah, pass in the VAR of something if you want it to be changed

[18:07] <TimToady> out => VAR($foo) is even kinda self-documenting

[18:07] <timotimo> that's very close to what tux was doing with the $out.list[0] ~= ... trick

[18:07] *** avuserow joined
[18:07] <|Tux|> yes, but that puts the burdon on the caller instead of on me :)

[18:07] *** sqirrel_ left
[18:08] <TimToady> you were already putting the burden there with \

[18:08] <timotimo> imagine the fun when you pass in a variable that has a where clause attached to its type %)

[18:08] <|Tux|> and you are right: I still have to make the gap wider between perl5 think and perl6 think

[18:10] <|Tux|> but I'm just doing perl6 for 50 days or so and I think I got way further than imagined at the start

[18:10] *** aborazmeh left
[18:11] <timotimo> that's good to hear :)

[18:11] *** fhelmberger left
[18:12] <|Tux|> anyway, sorry to have stolen some time again. Now off to play badminton

[18:13] <avuserow> moritz: in Python, what you're "supposed" to do rather than `("a %d" + "b %d") % (1,2)` is use `"a %d" "b %d" % (1, 2)` (that is, no operator between string literals makes them concat with higher precedence, assuming you are only dealing with literals)

[18:14] * avuserow is glad that Perl 6 has no such implicit "operator"

[18:14] <TimToady> it's a low-leverage feature with many negative consequences

[18:15] *** espadrine left
[18:15] <TimToady> funny how languages cargo-cult these low-leverage features from other languages. concat with + also comes to mind

[18:18] *** mj41 joined
[18:20] <masak> I don't think there's a good understanding of the scope of the negative consequences most of the time.

[18:26] <eli-se> Woo, fixed six issues in a single commit.

[18:26] <masak> ok, I wrote an answer to the "Object Introspection" thread. I am literally unable to judge whether it'd be a net good to post it.

[18:26] <masak> therefore I'm posting it here first for general comment. https://gist.githubusercontent.com/masak/a788a742b70c47e46565/raw/7f10528f4c52ab2c0cf54b9482eab22a88feb542/reply.txt

[18:27] <masak> eli-se: o.O

[18:27] <masak> eli-se: you should come work on the RT queue :>

[18:27] <eli-se> what is the RT queue?

[18:27] <masak> all the rakudobugs.

[18:27] <eli-se> Are retweets processed to slowly?

[18:27] <eli-se> Oh, I see.

[18:27] <eli-se> I'm bad at C.

[18:28] <masak> ok, I'm going for dinner now. feel free to leave comments here or on the gist. https://gist.github.com/masak/a788a742b70c47e46565

[18:28] <eli-se> I'll probably introduce buffer overflows and memory leaks.

[18:28] <masak> eli-se: Rakudog is mostly Perl 6, actually.

[18:28] <masak> Rakudo*

[18:28] <masak> &

[18:28] <eli-se> oooot

[18:30] <arnsholt> Rakudog =D

[18:30] *** colomon joined
[18:31] <tadzik> <3

[18:31] <arnsholt> eli-se: There used to be a bit more C for compiler hackery, but even then you had to dig pretty deep before you ran into that

[18:32] <arnsholt> Heck, on the JVM backend there's no C

[18:32] <[Coke]> masak: +1; last paragraph is perhaps slightly too direct. Perhaps instead ask him to keep it in mind when he is representing the community.

[18:32] <arnsholt> You should probably know a decent amount of C if you're gonna work on the NativeCall bits, even on JVM, but outside of that there's no C

[18:33] <mj41> timotimo lizmat: hi. perl6-star 2015.03 docker image available  https://registry.hub.docker.com/u/mj41/perl6-star/ 

[18:33] <mj41> ~ $ docker run -i -t --rm --name my-perl6-star-2015.03 mj41/perl6-star:2015.03 perl6 -e'say "{$*PERL.compiler.gist} on {$*VM.gist} for {$*DISTRO.gist}"'

[18:33] <mj41> rakudo (2015.3) on moar (2015.3) for fedora (21.Twenty.One)

[18:33] <mj41> ~ $ 

[18:33] *** _edwin joined
[18:35] <eli-se> Alright, time to start working on my JIT compiler.

[18:36] *** nige left
[18:38] <_edwin> hello perl6 hackers! I have a problem with Rakudo Star 2015.2 on Windows: "AltGr" combinations on my (German) keyboard are not working in the REPL. Is this a known problem?

[18:40] *** Hor|zon left
[18:40] <vendethiel> _edwin: accents refusing to print is a known problem :)

[18:43] <_edwin> vendethiel, typing the accents at least works for me, I have the more basic problem that I cannot type {, [, etc. in the REPL :/

[18:43] <jdv79> nine_: around?  Inline::Perl6 failed to build for e.

[18:43] <vendethiel> ah yes, it was brackets not accents

[18:43] <jdv79> *me

[18:43] <vendethiel> _edwin: can you type accents and submit, tho?

[18:43] <vendethiel> it should be crashing

[18:44] <_edwin> I can type 'say "á"' for example, but executing it crashes with "Malformed UTF-8"

[18:45] <vendethiel> okay, so that's the known bug indeed.

[18:46] <_edwin> but the AltGr + * combinations are just completely dead, they do not even produce a wrong character

[18:46] <vendethiel> yep :)

[18:49] *** kjs_ joined
[18:49] <_edwin> does it make sense to submit this problem somewhere -- I did'nt find it in rt.perl.org or the rakudo/star github issues

[18:57] <vendethiel> i believe it's in RT

[18:58] *** Perl6_newbee left
[19:00] *** telex left
[19:02] *** telex joined
[19:04] *** Bucciarati left
[19:04] *** haroldwu left
[19:04] *** ingy left
[19:04] *** Bucciarati joined
[19:04] *** Celelibi left
[19:04] *** captain-adequate left
[19:04] *** petercommand left
[19:04] *** lestrrat left
[19:04] *** betterwo1ld left
[19:04] *** sftp left
[19:04] *** haroldwu joined
[19:04] *** ingy joined
[19:04] *** betterworld joined
[19:04] *** petercommand joined
[19:04] *** captain-adequate joined
[19:04] *** sftp joined
[19:04] *** Celelibi joined
[19:05] *** virtualsue joined
[19:07] *** lestrrat joined
[19:09] *** rindolf joined
[19:13] *** kjs_ left
[19:13] *** raiph joined
[19:23] *** kaare_ joined
[19:33] *** abraxxa joined
[19:36] *** abraxxa left
[19:37] *** Hor|zon joined
[19:39] *** abraxxa joined
[19:42] *** Hor|zon left
[19:42] *** bayprogrammer joined
[19:49] *** zjmarlow_ joined
[19:49] *** Hor|zon joined
[19:51] *** zjmarlow left
[19:58] *** danaj left
[19:59] <lizmat> mj41: I believe timotimo will be doing the P6W this week

[19:59] <lizmat> mj41: thanks for reminding nonetheless  :-)

[19:59] *** bayprogrammer left
[19:59] *** dombo joined
[20:01] *** raiph left
[20:02] *** zjmarlow_ left
[20:02] *** zjmarlow_ joined
[20:03] *** kjs_ joined
[20:04] *** kjs_ left
[20:04] *** molaf left
[20:04] <hoelzro> mj41: I didn't know someone else had made a docker image for R*

[20:05] *** darutoko left
[20:06] *** larion joined
[20:07] <dalek> star: 3df9a6f | FROGGS++ | tools/build/Makefile.in:

[20:07] <dalek> star: install panda's state and projects list

[20:07] <dalek> star: 

[20:07] <dalek> star: We do that so one can query what is installed by doing: panda --installed list

[20:07] <dalek> star: This also prevents panda to refetch and rebuild already installed stuff, which

[20:07] <dalek> star: can even break because the module in the ecosystem might already have changed,

[20:07] <dalek> star: triggered by a rakudo compiler change.

[20:07] <dalek> star: review: https://github.com/rakudo/star/commit/3df9a6fc44

[20:07] <dalek> star: da6cb95 | FROGGS++ | tools/build/bin-install.pl:

[20:07] <dalek> star: create windows .bat files for each script in bin/

[20:07] <dalek> star: review: https://github.com/rakudo/star/commit/da6cb959ac

[20:08] <nine_> jdv79: I'm here

[20:09] *** spider-mario joined
[20:10] <mj41> hoelzro: yes, I saw you image, but I prefer automated build

[20:10] <hoelzro> mj41: I changed mine to an automated build recently

[20:11] <hoelzro> cut down on my headaches a bit =)

[20:11] <mj41> :-) ... any chance to merge them?

[20:12] <jdv79> nine_: http://paste.scsys.co.uk/470160

[20:13] <hoelzro> mj41: sure! afaict, they're the same instead of distribution

[20:13] <hoelzro> your README is much better, though!

[20:13] <nine_> jdv79: is your perl compiled with multiplicity?

[20:13] <mj41> or maybe it's time to  create official one under https://github.com/perl6

[20:14] <nine_> jdv79: oh, I just noticed that I did fix building on a perl without multiplicity, but have not yet done a release containing the fix.

[20:14] <hoelzro> mj41: good idea

[20:14] <TimToady> "module in the ecosystem might already have changed" seems to violate the immutability principle of official modules, though I suppose what's really going on is loose versioning

[20:14] <jdv79> usemultiplicity=undef - i guess not

[20:14] <hoelzro> I'm not sure where packaging stuff is stored atm

[20:14] <hoelzro> probably in rakudo/star?

[20:14] <mj41> hoelzro: btw you are on collaborators list from the start https://github.com/mj41/docker-perl6-star/settings/collaboration

[20:15] <jdv79> i just installed the way the Inline::Perl5 docs said

[20:15] <hoelzro> oh, cool

[20:15] *** kjs_ joined
[20:15] <jdv79> perlbrew install 5.20.2 -Duseshrplib

[20:16] <TimToady> and, of course, immutable modules will depend somewhat on a stable VM, which we don't quite have yet

[20:16] <hoelzro> mj41: we should create an official perl6/rakudo repo on Docker hub, and push images there

[20:16] <mj41> hoelzro: there is a issue with automated build ... old images (tags) are rebuilded every time I add new tag :-(

[20:17] <hoelzro> I see

[20:17] <jdv79> oops - i could read a few lines farther - i'll try that.  thanks nine_.

[20:17] <hoelzro> I just have the Dockerfile, update it post-release, and docker build

[20:19] <vendethiel> .u star

[20:19] <yoleaux> U+0001 START OF HEADING [Cc] (␁)

[20:19] <yoleaux> U+0002 START OF TEXT [Cc] (␂)

[20:19] <yoleaux> U+0086 START OF SELECTED AREA [Cc] (<control>)

[20:19] <mj41> hobbs: our target should be official repo https://docs.docker.com/docker-hub/official_repos/

[20:19] *** anaeem1 joined
[20:19] <hoelzro> heh, I was just looking at that =)

[20:19] *** bjz left
[20:19] <mj41> s/hobbs/hoelzro/

[20:22] <vendethiel> .u crying cat

[20:22] <yoleaux> U+1F63F CRYING CAT FACE [So] (😿)

[20:27] *** larion left
[20:28] *** kurahaupo1 joined
[20:28] <mj41> hoelzro: maybe workaround is to use separate directory/dockerfile for each version/tag? https://github.com/docker-library/postgres

[20:29] *** larion joined
[20:29] <hoelzro> ah, interesting

[20:29] <hoelzro> mj41: which image should we use as the base?

[20:30] <mj41> hoelzro: not sure, I prefer Fedora :-)

[20:30] <hoelzro> I figured ;)

[20:30] <FROGGS> _edwin: I can confirm that AltGr+[ is a noop :o(

[20:30] <hoelzro> I picked Ubuntu because it seems to be pretty standard for Docker images

[20:33] <dalek> doc: 87bdef4 | moritz++ | lib/Type/Pair.pod:

[20:33] <dalek> doc: Pair.antipair

[20:33] <dalek> doc: review: https://github.com/perl6/doc/commit/87bdef42a0

[20:33] *** cschwenz left
[20:34] <dalek> Inline-Perl6: 8149f4d | (Stefan Seifert)++ | Perl6.xs:

[20:34] <dalek> Inline-Perl6: Be compatible with rakudo 2015.03

[20:34] <dalek> Inline-Perl6: 

[20:34] <dalek> Inline-Perl6: Rakudo installs in install/share instead of install/languages since

[20:34] <dalek> Inline-Perl6: commit 7920c16b8d81f0feaf16ed5ce9620c26ca67e63e

[20:34] <dalek> Inline-Perl6: Date:   Mon Mar 16 08:44:19 2015 +0100

[20:34] <dalek> Inline-Perl6: review: https://github.com/niner/Inline-Perl6/commit/8149f4df69

[20:34] <dalek> Inline-Perl6: 0d16f8e | (Stefan Seifert)++ | / (2 files):

[20:34] <dalek> Inline-Perl6: Version 0.04

[20:34] <dalek> Inline-Perl6: review: https://github.com/niner/Inline-Perl6/commit/0d16f8e5a2

[20:34] *** _edwin left
[20:35] <nine_> jdv79: I just uploaded Inline::Perl6 version 0.04. This contains the fix for perl without multiplicity and for compatibility with Rakduo 2015.03

[20:35] <jdv79> cool, i'll try it in a bit.

[20:36] <moritz> nine_++

[20:37] *** larion left
[20:38] <moritz> TimToady: I can't find any description in the design docs about what .antipairs is supposed to do. The only hint seems to be in the section about invert: "Produces a backmapping of values to keys, but unlike C<.antipairs>, expands list values

[20:38] <moritz> into multiple pairs."

[20:38] <moritz> but that seems pretty obscure to me

[20:39] *** larion joined
[20:39] *** nige joined
[20:39] <mj41> hoelzro: I'm not familiar with Ubuntu, so feel free to switch Dockerfile in 'develop' branch to Ubuntu/Debian if you think it's good idea :-)

[20:40] <hoelzro> ok

[20:41] <hoelzro> mj41: do you mind if I copy your README for the docker repo on GH?

[20:41] <jdv79> nine_: seems good to go

[20:42] *** bayprogrammer joined
[20:43] *** pdcawley left
[20:43] <nine_> jdv79: yeah :)

[20:44] *** zacts joined
[20:45] *** larion left
[20:45] *** larion joined
[20:46] <mj41> hoelzro: IMHO it's going to mystify users. I prefer to start new GitHub repo. We can transfer it under perl6 project/namespace later.

[20:46] <hoelzro> mj41: I'll create a new GH repo later tonight

[20:47] *** [Sno] left
[20:48] <mj41> hoelzro: ok, thx, good luck. I should get some sleep. See you/backlog tomorrow.

[20:49] <hoelzro> mj41: thanks, good night!

[20:50] *** mj41 left
[20:52] *** [Sno] joined
[20:53] <FROGGS> rakudo star 2015.03 for windows: http://rakudo.org/downloads/star/

[20:53] *** raiph joined
[20:54] <masak> [Coke]: thank you. exactly the kind of -- literally -- moderation I was looking for.

[20:54] <masak> [Coke]: is this last paragraph better? https://gist.github.com/masak/a788a742b70c47e46565

[20:57] <eli-se> wooo my JIT compiler works!

[20:58] <nwc10> FROGGS++

[20:58] <vendethiel> FROGGS++!

[20:58] <vendethiel> eli-se: gg!

[20:58] <nine_> Ok, first Ok, first attempt to install Ubuntu in a VM failed...

[20:59] <jdv79> nine_: so i have 5.20.1 without multiplcity and your 0.04 seems to work.  but i just installed 5.20.2 with multiplicity and your 0.04 seems to not:  http://paste.scsys.co.uk/470161

[20:59] <nine_> jdv79: did you install Inline::Perl5 for this new perl with multiplicity? You have to use the same perl for both Inline::Perl5 and Inline::Perl6

[21:00] <jdv79> different perls

[21:00] <jdv79> that's interesting

[21:01] <jdv79> i didn't see that in the docs but i probably missed it

[21:01] *** Peter_R left
[21:01] <nine_> jdv79: it's probably missing in the docs :/

[21:02] *** skids left
[21:03] <dalek> Inline-Perl6: d31cf6c | (Stefan Seifert)++ | lib/Inline/Perl6.pm:

[21:03] <dalek> Inline-Perl6: Document the need for using the same perl for Inline::Perl5 and 6

[21:03] <dalek> Inline-Perl6: review: https://github.com/niner/Inline-Perl6/commit/d31cf6cc1c

[21:03] <nine_> jdv79: corrected that

[21:05] <jdv79> thanks!  rebuilding rakudo takes a long time for me so i'll stick with the older p5 for now.

[21:05] *** yqt joined
[21:06] <nine_> jdv79: you don't have to re-install rakudo when switching perl 5 versions. Rakudo needs perl 5 only during the build. But you have to re-install Inline::Perl5.

[21:06] *** abraxxa left
[21:07] <jdv79> oh, duh.  that makes more sense.

[21:08] *** larion left
[21:10] *** larion joined
[21:11] <eli-se> vendethiel: https://github.com/mill-lang/mill/blob/feature/mill/jit/mill/src/jit.hpp :D

[21:11] <jdv79> and that worked as advertised.  very nice:)

[21:11] *** rindolf left
[21:14] *** dombo left
[21:15] *** larion left
[21:16] *** larion joined
[21:18] <[Coke]> masak: thanks, that seems nicer.

[21:19] *** virtualsue left
[21:19] * masak goes ahead and posts

[21:20] <masak> [Coke]++ # feedback

[21:20] <PerlJam> masak++

[21:20] <dalek> rakudo-star-daily: 49ba47c | coke++ | log/ (9 files):

[21:20] <dalek> rakudo-star-daily: today (automated commit)

[21:20] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/49ba47c77a

[21:20] <dalek> perl6-roast-data: 46202f5 | coke++ | / (9 files):

[21:20] <dalek> perl6-roast-data: today (automated commit)

[21:20] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/46202f5678

[21:23] * [Coke] heads hoe

[21:23] <[Coke]> *home

[21:23] *** Rounin joined
[21:24] <vendethiel> eli-se: I read it :P

[21:24] <eli-se> woot

[21:25] *** anaeem1 left
[21:25] *** anaeem1 joined
[21:27] <retupmoca> http://modules.perl6.org/ looks a little sparse from here

[21:27] <timotimo> so it does :\

[21:28] *** ggoebel joined
[21:29] *** anaeem1 left
[21:34] *** kjs_ left
[21:36] *** kurahaupo1 left
[21:36] <pmichaud> re  star issue #43....   if I precompile a module using a non-installed copy of rakudo-m, can I still use the precompiled module once rakudo-m has been installed?

[21:36] *** xfix left
[21:38] *** lolisa joined
[21:39] *** kjs_ joined
[21:40] *** muraiki left
[21:40] <[ptc]> masak++ # p6u post

[21:43] *** jschulz joined
[21:44] * masak puts on a weary smile

[21:44] <masak> I had a very good day teaching JavaScript today, by the way.

[21:44] <masak> my best kind of JavaScript class is the kind that goes "oh dear, this language is *weird*!" with me

[21:44] <eli-se> A day involving JavaScript is never a good day.

[21:45] <dalek> perl6-examples: 5f21112 | paultcochrane++ | t/004-website-basic.t:

[21:45] <dalek> perl6-examples: Correct spelling of "receiver"

[21:45] <dalek> perl6-examples: 

[21:45] <dalek> perl6-examples: (duh)

[21:45] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/5f2111288c

[21:45] <dalek> perl6-examples: 0e0a49e | paultcochrane++ | lib/Pod/Htmlify.pm6:

[21:45] <dalek> perl6-examples: Add base-dir argument to files-in-category()

[21:45] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/0e0a49e0b2

[21:45] <dalek> perl6-examples: ce1370c | paultcochrane++ | / (3 files):

[21:45] <dalek> perl6-examples: Convert write-example-files() into a method

[21:45] <dalek> perl6-examples: 

[21:45] <dalek> perl6-examples: This took a lot of work just to get the code tested.  It seems I'd written

[21:45] <dalek> perl6-examples: legacy code...  *sigh*  Nevertheless, it's now tested, which means it can be

[21:45] <dalek> perl6-examples: more safely refactored into something better.

[21:45] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/ce1370c843

[21:45] <dalek> perl6-examples: bd1b98b | paultcochrane++ | t/004-website-basic.t:

[21:45] <dalek> perl6-examples: Extract repeated examples mock data into single variable

[21:45] *** yqt left
[21:45] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/bd1b98baee

[21:45] <dalek> perl6-examples: 5d2b38c | paultcochrane++ | / (2 files):

[21:45] <dalek> perl6-examples: Convert collect-example-metadata into a method

[21:45] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/5d2b38cd9a

[21:45] <dalek> perl6-examples: 98ff1a8 | paultcochrane++ | / (2 files):

[21:45] <dalek> perl6-examples: Use $categories attr in collect-example-metadata

[21:45] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/98ff1a8ea2

[21:45] <masak> eli-se: I couldn't agree less. but you're entitled to feel that way.

[21:47] *** larion left
[21:48] <masak> quiz: anyone ever used `$.new` in a method? would you consider it a good idea? (as opposed to doing `CurrentClass.new`)

[21:50] <pmichaud> masak: I think I would prefer 'self.new' to '$.new'

[21:50] <eli-se> I prefer not to confuse types and values of types.

[21:50] <masak> pmichaud: fair point.

[21:50] <pmichaud> well, except that CurrentClass and  self.WHAT might not be exactly the same.

[21:50] <vendethiel> I'd definitely use self.new :-)

[21:51] <vendethiel> but that'd mean I'd "new" a subclass if I'm really inside a subclass, right?

[21:51] <eli-se> $?CLASS.new

[21:51] <pmichaud> to me, self.new means "make a new instance of whatever type I am"

[21:51] *** woolfy joined
[21:51] <pmichaud> and that's what "$.new" would mean. 

[21:51] *** woolfy left
[21:52] <masak> yeah.

[21:52] <masak> `$.` basically means `self.`, modulo itemization

[21:52] <pmichaud> and as far as "confusing types and values of types".... that's not exactly what is happening here.  :)

[21:52] <pmichaud> $?CLASS just happens to be an undefined value of the type.

[21:53] <pmichaud> it's not the "type"

[21:57] <masak> conclusion so far: some things are better written `$.foo`, and some things `self.foo`, and I'm not really sure what the rule is :)

[21:57] <masak> value-y things clearly look better as `$.foo`

[21:57] <masak> things that do things clearly look better as `self.foo` (like .new and .clone)

[21:58] <pmichaud> I tend to think of $.foo as being primarily for accessors.

[21:58] <masak> right.

[21:58] <pmichaud> I haven't wrapped my head around the idea of using it for general method calls.  It's obviously okay to do it that way... but it still looks like an accessor to me

[21:58] <masak> I think I'm basically using it for accessors.

[21:59] <masak> and slowly coming to terms with it not being all that appropriate/intuitive for other things :)

[21:59] <pmichaud> well, at one time there was a long design discussion about what   ".methodcall"  (no invocant) should mean/do.

[21:59] <pmichaud> i.e., should it default to "self.methodcall" or should it be "$_.methodcall".

[22:00] <pmichaud> it was finally decided to go to "self.methodcall", and there was also "$.methodcall" as an option.  

[22:00] <masak> that's one of the oldest discussions I remember. must've been around 2005.

[22:01] <pmichaud> in the case of "$.new", "self.new", "CurrentClass.new", and "$?CLASS.new",  I tend to think of them as actually doing different things.

[22:01] <pmichaud> well, "$.new" and "self.new" are equivalent.

[22:01] <masak> my http://strangelyconsistent.org/blog/the-dot-is-the-cutest-sigil is basically a celebration of the distinction we ended up with between `self` and `$_`

[22:02] <pmichaud> some people would prefer to think of  "self.new" as being more along the lines of "self.WHAT.new" (ensuring that .new is being handled by the type instance), but I think "self.new" is sufficient.

[22:02] <lizmat> MMD is your friend if you really want to distinguish between .new on a type object or an instantiation  :-)

[22:03] <masak> "keeping $_ and self separate from each other in Perl 6 was a really good idea"

[22:03] <pmichaud> I figure that anyone choosing between  "self.new",  "CurrentClass.new", and "$?CLASS.new"  ought to be sure they realize how these can be subtly different.  :)

[22:03] <lizmat> m: my %h := Hash[].new   # should this fail?  if so, we need to handle the LTAness of the error message

[22:03] <camelia> rakudo-moar 9b5d4e: OUTPUT«===SORRY!===␤Too few positionals passed; expected at least 3 arguments but got only 2␤»

[22:04] <jdv79> m: my @a = 1; for @a -> $a is rw { $a := 2; } # that error isn't clear as to why; at least to me

[22:04] <camelia> rakudo-moar 9b5d4e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/QHdJhkWUo0␤Cannot use bind operator with this left-hand side␤at /tmp/QHdJhkWUo0:1␤------> 3my @a = 1; for @a -> $a is rw { $a := 27⏏5; } # that error isn't clear as to why; ␤»

[22:05] <pmichaud> jdv79: good point... I don't know if the "error" here is because it's disallowed in Perl 6 or because Rakudo doesn't know how to do it yet.

[22:05] <pmichaud> I suspect the error message should read "We don't know how to do this yet."

[22:06] <lizmat> m: Hash[]   # shorter way for same error

[22:06] <camelia> rakudo-moar 9b5d4e: OUTPUT«===SORRY!===␤Too few positionals passed; expected at least 3 arguments but got only 2␤»

[22:06] <jdv79> is that a ticketable thing? or just ignore it for now?

[22:06] <dalek> star: 4fb39e4 | FROGGS++ | tools/star/windows-msi.pod:

[22:06] <dalek> star: add guide for MSI package creation

[22:06] <dalek> star: review: https://github.com/rakudo/star/commit/4fb39e444d

[22:06] <lizmat> I assume, for simplicity sake, that Hash[] should be the same as Hash[Str] aka Hash

[22:06] <pmichaud> jdv79: it's ticketable.

[22:06] <jdv79> ok, thanks 

[22:07] <FROGGS> please, review: https://github.com/rakudo/star/blob/master/tools/star/windows-msi.pod

[22:08] <pmichaud> FROGGS: reading

[22:08] <retupmoca> FROGGS: I have strawberry perl already installed; is that fine?

[22:08] <FROGGS> .tell azawawi https://github.com/rakudo/star/blob/master/tools/star/windows-msi.pod

[22:08] <yoleaux> FROGGS: I'll pass your message to azawawi.

[22:08] *** Foxcool left
[22:09] <FROGGS> retupmoca: I think were issues with strawberry, at least once there were IIRC

[22:09] <retupmoca> ah

[22:09] *** nige left
[22:09] <retupmoca> I shall have to test later

[22:10] *** kjs_ left
[22:10] <pmichaud> FROGGS: that's interesting, I used to do all of my .msi releases using Strawberry Perl

[22:10] <FROGGS> ahh, hmmmm

[22:10] <pmichaud> since I didn't have MS Visual C++

[22:11] <pmichaud> and I also wanted some potential compatibility with Strawberry

[22:11] <FROGGS> then my brane tricks me :o)

[22:12] <DrForr> Just a brief doucmentation note - I don't see a .pod on doc.perl6.org where looping constructs are mentioned explicitly. (They're used in sample source)

[22:12] *** virtualsue joined
[22:12] <pmichaud> FROGGS:  the guide looks really good to me.  I suspect someone going through the document will find a couple of things overlooked, but it has all of the pieces I can remember.

[22:14] <FROGGS> cool

[22:14] <FROGGS> yes, I also suspect that someone trying it will see glitches

[22:15] <FROGGS> gnight #perl6

[22:15] *** FROGGS left
[22:18] *** work_op joined
[22:18] *** ingy left
[22:18] *** ingy joined
[22:18] *** raiph left
[22:23] <pmichaud> I'm also afk... be back tomorrow

[22:24] <dalek> rakudo/nom: a57affe | lizmat++ | src/Perl6/World.nqp:

[22:24] <dalek> rakudo/nom: Don't curry if there's nothing to curry

[22:24] <dalek> rakudo/nom: 

[22:24] <dalek> rakudo/nom: This fixes the LTA error on e.g. Hash[]:

[22:24] <dalek> rakudo/nom: 

[22:24] <dalek> rakudo/nom:  Too few positionals passed; expected at least 3 arguments but got only 2

[22:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a57affe8c2

[22:26] *** spider-mario left
[22:28] *** Woodi left
[22:33] *** Woodi joined
[22:37] *** work_op left
[22:37] *** eli-se left
[22:38] *** Woodi left
[22:41] *** diana_olhovik left
[22:42] *** skids joined
[22:44] *** Woodi joined
[22:48] <TimToady> moritz: see Pair.antipair vs Pair.invert

[22:49] <TimToady> and note that the antipair definition contains no hyper

[22:50] *** gfldex left
[22:53] <TimToady> Oh, nevermind, you already found it

[22:53] * TimToady slinks back to the log

[23:02] *** lolisa left
[23:03] *** larion joined
[23:05] *** Woodi left
[23:07] *** hitchens joined
[23:08] *** larion left
[23:12] *** xprime joined
[23:13] *** prime left
[23:13] <dalek> specs: c340ab6 | TimToady++ | S32-setting-library/Containers.pod:

[23:13] <dalek> specs: document Hash.antipairs for moritz++

[23:13] <dalek> specs: review: https://github.com/perl6/specs/commit/c340ab68ec

[23:17] <rjbs> Woah.

[23:17] <japhb> .ask jnthn How scalable are supplies, in terms of sheer volume of Supplies and taps that I can have active before performance falls over or RAM gets prohibitive?  My use case is an entity-relationship model for which I'm considering having an "updates" supply on every Entity and Relation, tapped by all clients who care about those nodes.  At least thousands x dozens.

[23:17] <yoleaux> 08:06Z <nine_> japhb: Cannot repor using the same perl and rakudo version. Will get me an Ubuntu 14.04 LTS VM and try it there.

[23:17] <yoleaux> japhb: I'll pass your message to jnthn.

[23:17] <rjbs> I typed "s" at the REPL and it kept waiting for more input.

[23:17] <rjbs> What happened?

[23:17] <japhb> nine_: Dangit.

[23:22] <TimToady> rjbs: given my fan sped up when I did that, I'll bet it's infinitely looping somehow

[23:23] <TimToady> does if you feed a newline to perl6 -e too

[23:23] <TimToady> well "s\n"

[23:23] <TimToady> same for m

[23:24] <rjbs> My work here is done!

[23:24] <rjbs> (I tried things like a few /'s on subsequent lines, but only ^C seemed to help.)

[23:25] * TimToady guesses there's a problem in <.qok>

[23:25] <TimToady> or triggered by .qok

[23:26] <rjbs> Oh, now *that's* a useful thing to find: http://doc.perl6.org/images/type-graph-Associative.png

[23:26] <japhb> rjbs: Available in SVG as well.

[23:26] <rjbs> Yeah, but I couldn't link to that as well, so I chose the inferior png. :)

[23:26] <japhb> Should just be s/png/svg/

[23:26] <japhb> Yeah, WFM

[23:27] <rjbs> So it is!

[23:27] * japhb wonders how TypedHash gets a double role connection to Associative

[23:27] <rjbs> There must be a good talk to be built out of the list of core roles.

[23:28] <japhb> Some other core Roles/Classes like Numeric and Cool are interesting too.

[23:28] <rjbs> Yeah.  The good find was more "this kind of graph" than just that one.

[23:29] <japhb> Yeah, understood

[23:29] <masak> 'night, #perl6

[23:29] * japhb wonders why the type graph got moved to the bottom of the doc pages

[23:29] <japhb> Used to be right after the TOC

[23:36] <rjbs> Huh.  So a List is Cool, so I can use it as a string or number?

[23:36] <rjbs> I see!

[23:38] *** raiph joined
[23:39] <TimToady> that was not part of the original intent of Cool, actually

[23:40] <TimToady> but obviously it works out to some extent...

[23:41] <TimToady> I wonder where the WAT is though

[23:42] <b2gills> m: sub f (Int $n = 0) { $n > 3 ?? "liftoff!" !! $n + 1 }; say &f ... Str;

[23:42] * TimToady testing a fix for rjbs++'s looper

[23:42] <camelia> rakudo-moar a57aff: OUTPUT«1 2 3 4 liftoff!␤»

[23:44] <dalek> rakudo/nom: 9746e88 | TimToady++ | src/Perl6/Grammar.nqp:

[23:44] <dalek> rakudo/nom: require existing character before peeking delims

[23:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9746e88dd1

[23:47] <TimToady> oh, and removed a <.ws> that is always redundant

[23:48] <TimToady> (the problem was actually down in babble)

[23:50] <rjbs> TimToady++ Thanks!

[23:50] *** Rounin left
[23:51] *** Woodi joined
[23:53] <TimToady> m: m

[23:53] <camelia> rakudo-moar a57aff: OUTPUT«5===SORRY!5=== Error while compiling /tmp/A1tbxsIt2D␤Undeclared routine:␤    m used at line 1␤␤»

[23:53] <TimToady> arguably this message is LTA though

[23:54] <TimToady> well, probably not worth the effort to be awesomer, since it can only occur at the end of the program

[23:54] <TimToady> m: m 42

[23:54] <camelia> rakudo-moar a57aff: OUTPUT«5===SORRY!5=== Error while compiling /tmp/oDyTyruIxQ␤Alphanumeric character is not allowed as a delimiter␤at /tmp/oDyTyruIxQ:1␤------> 3m7⏏5 42␤»

[23:54] <TimToady> m: m;

[23:54] <camelia> rakudo-moar a57aff: OUTPUT«5===SORRY!5===␤Regex not terminated.␤at /tmp/Zvjm9i6dQi:1␤------> 3m;7⏏5<EOL>␤Regex not terminated.␤at /tmp/Zvjm9i6dQi:1␤------> 3m;7⏏5<EOL>␤Couldn't find terminator ;␤at /tmp/Zvjm9i6dQi:1␤------> 3m;7⏏5<EOL>␤    e…»

[23:54] <TimToady> it gets much more upset if there's anything after it

[23:56] <TimToady> .oO(I get upset where there's anything after me...)

[23:56] <TimToady> *when

[23:56] *** virtualsue left
