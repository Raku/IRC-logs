[00:09] *** Ugator left
[00:16] *** Peter_R left
[00:17] *** gfldex left
[00:26] *** Tux__ joined
[00:28] *** rurban joined
[00:30] *** raiph left
[00:31] *** Mouq joined
[00:32] *** raiph joined
[00:35] *** [Sno] left
[00:35] <dalek> rakudo-star-daily: 04f7943 | coke++ | log/ (9 files):

[00:35] <dalek> rakudo-star-daily: today (automated commit)

[00:35] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/04f7943fc7

[00:35] <dalek> perl6-roast-data: ff5c980 | coke++ | / (5 files):

[00:35] <dalek> perl6-roast-data: today (automated commit)

[00:35] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ff5c98038d

[00:46] *** Tux__ left
[00:49] <[Coke]> colomon: mojo6 is basically a skeleton, nothing usable, unless hoelzro is even more amazing than I thought. :)

[00:50] *** spider-mario left
[00:53] *** lizmat joined
[00:56] <dalek> roast: b354a93 | skids++ | S04-declarations/my.t:

[00:56] <dalek> roast: Add tests for RT#102414

[00:56] <dalek> roast: 

[00:56] <dalek> roast: Current status:

[00:56] <dalek> roast: 

[00:56] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=102414

[00:56] <dalek> roast: Original error fixed on moar and parrot, NullPointer on jvm.

[00:56] <dalek> roast: One of two errors added later to the ticket seem to be fixed.

[00:56] <dalek> roast: Spec clarification still needed as to one of the two syntaxes.

[00:56] <dalek> roast: However since that syntax is the one that now works, test it.

[00:56] <dalek> roast: review: https://github.com/perl6/roast/commit/b354a9304f

[00:57] *** andreoss left
[01:01] *** [Sno] joined
[01:08] *** kjs_ left
[01:08] <skids> m: loop (my $x = 1, my $y = 2; $x > 0; $x--) { $y.say }; # Gives "Useless use of , warning"

[01:08] <camelia> rakudo-moar ffbb70: OUTPUT«WARNINGS:␤Useless use of "," in expression "my $x = 1, my $y = 2" in sink context (line 1)␤2␤»

[01:09] <masak> m: my $x = 1, my $y = 2; say "$x $y"

[01:09] <camelia> rakudo-moar ffbb70: OUTPUT«WARNINGS:␤Useless use of "," in expression "my $x = 1, my $y = 2" in sink context (line 1)␤1 2␤»

[01:09] <masak> I contest that it's useless.

[01:09] *** espadrine_ left
[01:10] <skids> m: loop (my $x = 1; my $y = 2; $x > 0; $x--) { $y.say }; # Gives "Useless use of , warning"

[01:10] <camelia> rakudo-moar ffbb70: OUTPUT«===SORRY!=== Error while compiling /tmp/TdiW3990MA␤Missing block␤at /tmp/TdiW3990MA:1␤------> loop (my $x = 1; my $y = 2; $x > 0⏏; $x--) { $y.say }; # Gives "Useless use␤»

[01:10] <masak> may not be idiomatic, but skids++ just showed that it can be useful.

[01:11] <skids> Well, to C coders that is idiomatic :-).

[01:19] <Kristien> generating javascript code is difficult

[01:19] <Kristien> I wish JavaScript had goto.

[01:20] <timotimo> just make craptons of functions :P

[01:20] <timotimo> like you did for your SSA

[01:20] <Kristien> my new SSA doesn't have that!

[01:20] <Kristien> it also supports more than one basic block per function :P

[01:20] <Kristien> and there are conditional jumps that actually compile to if statements

[01:21] <skids> RT#69492 might be closeable?

[01:21] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=69492

[01:22] <Kristien> I bet φ instructions will be fun to implement.

[01:22] <masak> they usually are.

[01:23] <Kristien> the obvious implementation is having each jump set a variable that indicates the block it comes from, and have the phi instruction look it up in a table :P

[01:27] *** colomon left
[01:29] *** colomon joined
[01:33] <vendethiel-> m: say ^10

[01:33] <vendethiel-> uh? camelia?

[01:36] *** raiph left
[01:36] *** ilbot3 left
[01:36] *** Diederich left
[01:36] *** Timbus_ left
[01:36] *** jdv79 left
[01:36] *** amkrankr1leuen left
[01:44] *** ilogger2 joined
[01:44] *** ChanServ sets mode: +v ilogger2

[01:44] *** timo joined
[01:44] *** alinbsp_ joined
[01:44] *** alinbsp_ is now known as alinbsp

[01:45] *** timo is now known as Guest76060

[01:46] *** Mouq joined
[01:47] *** adu joined
[01:48] *** woshty joined
[01:48] *** jfried joined
[01:48] *** avar joined
[01:48] *** jantore joined
[01:48] *** colomon_ joined
[01:50] *** colomon_ is now known as colomon

[01:51] *** mtj_ joined
[02:04] *** Guest76060 is now known as timotimo

[02:15] *** Peter_R joined
[02:16] * Kristien goes to sleep

[02:16] <Kristien> bye

[02:20] *** bjz joined
[02:35] *** asdf12z_ joined
[02:35] *** andreoss joined
[02:36] *** Peter_R left
[02:42] *** Peter_R joined
[02:43] *** Peter_R left
[02:43] *** Peter_R joined
[02:43] *** Peter_R left
[02:43] *** Peter_R joined
[02:47] *** ilbot3 joined
[02:53] *** alinbsp left
[03:09] *** muraiki_ joined
[03:15] *** andreoss left
[03:24] <Mouq> I'm thinking the "my $x = 1, my $y = 2;" warning is to help people who don't yet know the difference between item and list assignment

[03:24] <Mouq> (still, LTA)

[03:24] <Mouq> m: my $y; my $x = 1, $y =2;

[03:24] <camelia> rakudo-moar ffbb70: ( no output )

[03:24] *** colomon left
[03:24] <Mouq> m: my $x; $x = 1, my $y = 2;

[03:24] <camelia> rakudo-moar ffbb70: ( no output )

[03:25] <Mouq> m: my $x = 1, my $y = 2;

[03:25] <camelia> rakudo-moar ffbb70: ( no output )

[03:25] <Mouq> Oh, last expression

[03:25] <Mouq> m: my $x = 1, my $y = 2; 1

[03:25] <camelia> rakudo-moar ffbb70: OUTPUT«WARNINGS:␤Useless use of "," in expression "my $x = 1, my $y = 2" in sink context (line 1)␤»

[03:25] <Mouq> m: my $y; my $x = 1, $y = 2; 1

[03:25] <camelia> rakudo-moar ffbb70: OUTPUT«WARNINGS:␤Useless use of "," in expression "my $x = 1, $y =" in sink context (line 1)␤»

[03:25] <Mouq> m: my $y; my $x = 1, say "side effects!"; 1

[03:25] <camelia> rakudo-moar ffbb70: OUTPUT«WARNINGS:␤Useless use of "," in expression "my $x = 1, say \"side effects!\"" in sink context (line 1)␤side effects!␤»

[03:25] *** colomon joined
[03:26] <Mouq> std: my $y; my $x = 1, say "side effects!"; 1

[03:26] <camelia> std f9b7f55: OUTPUT«ok 00:00 139m␤»

[03:30] *** muraiki_ left
[03:30] <skids> So in RT, I notice sometimes there are automated updates to tickets when roast updates are made.  But not for the ones I did.

[03:32] *** noganex joined
[03:33] <Mouq> skids: I've noticed that too, I'm not sure if that feature still works though. Or maybe there's some special incantation niether of us know for commit messages or something

[03:34] <Mouq> m: my @a; (0,1,2).map(-> $k {(2,3,4).map(->$k2 {@a[$k][$k2]})}).eager.Parcel = 4..12; say @a.perl

[03:34] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, Any, Any, Any, 6], [Any, Any, Any, Any, 9], [Any, Any, Any, Any, 12])␤»

[03:34] <Mouq> ^^ Notice, it autovivifies @a's elements, but the assignment is wrong

[03:34] <Mouq> m: my @a; (0,1,2).map(-> $k {(2,3,4).map(->$k2 {@a[$k][$k2]})}).eager.Parcel = 4..12; (0,1,2).map(-> $k {(2,3,4).map(->$k2 {@a[$k][$k2]})}).eager.Parcel = 4..12; say @a.perl

[03:34] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, Any, 4, 5, 6], [Any, Any, 7, 8, 9], [Any, Any, 10, 11, 12])␤»

[03:35] <Mouq> ^^ But doing it twice, it works fine

[03:36] <Mouq> The past few days I've been trying to get LoL assignment to a) do autoviv and b) do assignment correctly

[03:37] <Mouq> I'm not sure where the above bug comes from, but I'm guessing it's a bug in Parce.STORE

[03:38] <skids> (RT#64990 is an example of a ticket with the automatic roast notice.)

[03:38] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=64990

[03:38] <Mouq> Golfed:

[03:38] <Mouq> m: my @a; (@a[0][1], @a[0][2], @a[1][1], @a[1][2]) = 1,2,3,4; say @a.perl

[03:38] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, Any, 2], [Any, Any, 4])␤»

[03:39] <Mouq> skids: Right, but that was back in 2009 :/

[03:39] <skids> Yeah.

[03:39] <skids> The other thing is I mailed two followup emails to RT for tickets I had no comment in, and they did not seem to take.

[03:40] <psch> std: my $x = 1, my $y = 2; 1;

[03:40] <camelia> std f9b7f55: OUTPUT«ok 00:00 138m␤»

[03:40] <psch> aren't we just warning too much then for that assignment?

[03:40] <psch> m: my $x = 1, my $y = 2; 1;

[03:40] <camelia> rakudo-moar ffbb70: OUTPUT«WARNINGS:␤Useless use of "," in expression "my $x = 1, my $y = 2" in sink context (line 1)␤»

[03:41] <psch> or is that not a warning std would catch?

[03:41] <skids> Yes I think just the warning is the problem.  I noticed that because roast files were emitting them.

[03:42] <psch> m: my @a; @a[0][1] = 1; say @a.perl

[03:42] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, 1])␤»

[03:42] <psch> m: my @a; (@a[0][1],) = (1,); say @a.perl

[03:42] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, 1])␤»

[03:43] <psch> m: my @a; (@a[0][1], @a[0][2]) = (1, 2); say @a.perl

[03:43] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, Any, 2])␤»

[03:43] *** raiph joined
[03:44] <skids> m: my @a; (@a[0][2], @a[1][2], @a[0][1], @a[1][1]) = 1,2,3,4; say @a.perl

[03:44] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, 3], [Any, 4])␤»

[03:44] <psch> oh but there's an NPE on jvm

[03:44] <psch> i'll check that out

[03:47] <skids> m: my @a; my @b := (@a[0][1], @a[1][1], @a[0][2], @a[1][2]); @b = (1,2,3,4); @a.perl.say; # same behavior this way.

[03:47] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, Any, 3], [Any, Any, 4])␤»

[03:53] <psch> std: my (int $a)

[03:53] <camelia> std f9b7f55: OUTPUT«ok 00:00 137m␤»

[03:53] <psch> hm

[03:53] <psch> are those parens superstituous?

[03:54] <psch> oh, found it, S03:Declarators

[03:54] <synopsebot> Link: http://perlcabal.org/syn/S03.html#Declarators

[03:54] <psch> m: my :(int $a = 5)

[03:54] <camelia> rakudo-moar ffbb70: OUTPUT«===SORRY!=== Error while compiling /tmp/xE2UOAcy1a␤Malformed my␤at /tmp/xE2UOAcy1a:1␤------> my ⏏:(int $a = 5)␤»

[03:54] <psch> m: my :(Str $x = "foo")

[03:54] <camelia> rakudo-moar ffbb70: OUTPUT«===SORRY!=== Error while compiling /tmp/lXvt9KuXrV␤Malformed my␤at /tmp/lXvt9KuXrV:1␤------> my ⏏:(Str $x = "foo")␤»

[03:55] <psch> p: my :(Str $x = "foo")

[03:55] <camelia> rakudo-parrot ffbb70: OUTPUT«===SORRY!=== Error while compiling /tmp/UpOxwmm3le␤Malformed my␤at /tmp/UpOxwmm3le:1␤------> my ⏏:(Str $x = "foo")␤»

[03:56] <skids> Mouq: it looks to me like on that first list assignment, each autoviv nukes the existing array.

[03:59] <Mouq> skids: Ohh, nice! So @a[0] = [Any, 1]; and then @a[0] = [Any, Any, 2]

[03:59] *** |Tux| joined
[03:59] <psch> std: my :(Dog $foo is woof = 42)

[03:59] <camelia> std f9b7f55: OUTPUT«===SORRY!===␤Malformed my at /tmp/xONOC85Ix0 line 1:␤------> my ⏏:(Dog $foo is woof = 42)␤    expecting any of:␤       name␤   scoped declarator␤Parse failed␤FAILED 00:00 134m␤»

[03:59] <psch> huh, std and specs don't agree, apparently

[04:00] <psch> std: my (Dog $foo is woof = 42)

[04:00] <camelia> std f9b7f55: OUTPUT«===SORRY!===␤In parameter declaration, typename 'Dog' must be predeclared (or marked as declarative with :: prefix) at /tmp/ZPkSmA9Aac line 1:␤------> my (Dog⏏ $foo is woof = 42)␤Parse failed␤FAILED 00:00 136m␤»

[04:04] <Mouq> m: my @a; my \p := @a[0]; (p[1], p[2]) = 1,2; say @a.perl

[04:04] <camelia> rakudo-moar ffbb70: OUTPUT«Array.new([Any, 1, 2])␤»

[04:04] *** telex joined
[04:19] <asdf12z_> any good books, guides, or tours whatever you want to call them to perl6? 

[04:20] <psch> asdf12z_: http://learnxinyminutes.com/docs/perl6/ is a good introductory tour

[04:21] <asdf12z_> is supplies core to perl6 or is it part of it's standard lib?

[04:21] <Mouq> perl6 -e'my @a; @a[0,1;2,3] = 1,2,3,4; say @a.perl'

[04:21] <Mouq> Array.new([Any, Any, 1, 2], [Any, Any, 3, 4])

[04:21] <Mouq> \o/

[04:21] <psch> m: Supply.interval(1).tap(-> $s { say "{$s}th tap }); sleep 5

[04:21] <camelia> rakudo-moar ffbb70: OUTPUT«===SORRY!=== Error while compiling /tmp/9tdJhXEzOZ␤Unable to parse expression in double quotes; couldn't find final '"' ␤at /tmp/9tdJhXEzOZ:1␤------> .tap(-> $s { say "{$s}th tap }); sleep 5⏏<EOL>␤    expectin…»

[04:21] <psch> m: Supply.interval(1).tap(-> $s { say "{$s}th tap" }); sleep 5

[04:21] <camelia> rakudo-moar ffbb70: OUTPUT«0th tap␤1th tap␤2th tap␤3th tap␤4th tap␤5th tap␤»

[04:21] <asdf12z_> :(

[04:21] <skids> asdf12z_: Core, but only recently implemented, so you need the moarvm backend.

[04:22] <asdf12z_> seems like a lot of 'overloading' with sigils and things packaged into core

[04:22] <asdf12z_> wouldve been nice to see things like that be more explicitly imported in 

[04:22] <Mouq> asdf12z_: Can you give an example? I'm not sure what you mean

[04:22] <skids> For the most part, nothing gets in the way.

[04:23] <psch> why? async is hard.  having tools to make it easy is useful

[04:23] <asdf12z_> but what if i don't need it?

[04:23] <asdf12z_> it's for visibility purposes

[04:23] <asdf12z_> mostly

[04:23] <skids> Don't use it, then.

[04:23] <asdf12z_> still for visibility purposes

[04:23] <psch> what does visibility mean in this context?

[04:24] <asdf12z_> i should be able to understand by looking at some module or code what its using it its module/code

[04:24] <skids> I'm having a hard time imagining where visibility gets impaired.

[04:24] <asdf12z_> just by its imports

[04:24] <psch> that sounds rather C-ish to me

[04:25] <asdf12z_> it is, which i like, but not the way C does it

[04:25] <asdf12z_> but it's true in mostly every other modern/popular language too

[04:27] <psch> yeah, i find that confusing.  why is exponentiation a basic operation, but logarithms aren't?  - looking at python here

[04:27] <psch> i.e. i have to 'from math import log' to log()

[04:27] <asdf12z_> visibility in that if i look at a piece of code, i have to remember all of perl6 core vs things that are not part of core and having to process that

[04:28] <psch> maybe log() is special because people (probably?) want to log-to-file more often than log-base-e

[04:28] <asdf12z_> if you want a great example, i like the way golang does it

[04:29] <asdf12z_> very very little to remember that are part of golang's core, very little keywords

[04:29] * skids really hates includes, personally.

[04:29] <asdf12z_> everything else is part of its standard lib

[04:29] <psch> i haven't looked at golang at all

[04:29] <asdf12z_> makes reading code so much easier

[04:30] <psch> FWIW, i don't see any benefit in having a «list of stuff to expect in this file» at the top

[04:30] <asdf12z_> with perl6 i feel like i have to memorize a lot BEFORE i even touch any modules, libs

[04:30] <psch> i think i understand the argument for not having everything implicitely imported, but i don't understand the argument for having it in the stdlib (which is always there) but not imported

[04:31] <psch> because runtime exports mean that maybe we only import something later on, and that gets more confusing than having everything there from the start

[04:31] <psch> s/exports/imports/

[04:31] <psch> *the posibility of runtime...

[04:32] <asdf12z_> oh i guess thats true for runtime imports

[04:32] <asdf12z_> but i guess that can be solved by common coding practice?

[04:32] <psch> m: module Foo { constant TAU = 2 * pi }; BEGIN try EVAL "say TAU"; try EVAL "say TAU"; END { import Foo; say Foo::TAU }

[04:32] <camelia> rakudo-moar ffbb70: OUTPUT«6.28318530717959␤»

[04:33] <skids> Perhaps we'll eventually have a lot of "no" pragmas and then if you like, you can turn off parts of the language for visibility.

[04:33] <psch> m: module Foo { constant TAU = 2 * pi }; { say TAU; CATCH { default { say "no TAU :(" } } }; END { import Foo; say Foo::TAU }

[04:33] <camelia> rakudo-moar ffbb70: OUTPUT«===SORRY!=== Error while compiling /tmp/tcNNRvSi6a␤Undeclared name:␤    TAU used at line 1␤␤»

[04:33] <psch> grml

[04:33] <psch> can't push the constant to runtime like that

[04:34] <psch> m: module Foo { our \TAU = 2 * pi }; { say Foo::TAU; CATCH { default { say "no TAU :(" } } }; END { import Foo; say Foo::TAU }

[04:34] <camelia> rakudo-moar ffbb70: OUTPUT«===SORRY!=== Error while compiling /tmp/Ag9PltD_yY␤our scoped term definitions (only 'my' is supported at the moment) not yet implemented. Sorry. ␤at /tmp/Ag9PltD_yY:1␤------> module Foo { our \TAU = 2 * pi ⏏}; { sa…»

[04:34] <psch> ...and an NYI :)

[04:34] * psch stops noise-ing about

[04:35] <psch> asdf12z_: there might be an argument made for "don't do runtime imports", but i doubt the practice would achieve more than (potentially very) big BEGIN blocks

[04:36] <psch> or maybe INIT, i'm a bit fuzzy on phasers

[04:36] <asdf12z_> i mean to a newcomer that doesn't know perl, it just seems overwhelming in that there's a lot to remember for just using perl6 minus any libraries, you can say if you don't want it, don't use it, but i'm still forced to memorize it exists just in case later on i see it

[04:37] <asdf12z_> so i know Supplies isn't pulled in by some import

[04:37] <Mouq> m: module Foo { constant TAU is export = 2 * pi }; { say Foo::TAU; CATCH { default { say "no TAU :(" } } }; { import Foo; say TAU }

[04:37] <camelia> rakudo-moar ffbb70: OUTPUT«6.28318530717959␤6.28318530717959␤»

[04:37] <asdf12z_> or some kind of magical trickery some lib is doing

[04:37] <skids> But you also have to memorize what to exmplicitly include on the flip side, so...

[04:38] <asdf12z_> that's not true, i can just look up the standard lib in golang and find what i want to use

[04:38] <asdf12z_> so i don't have to memorize every lib's name

[04:38] <psch> asdf12z_: p6doc exists, albeit incomplete

[04:39] <asdf12z_> besides the naming of supplies is ambigious

[04:39] <psch> asdf12z_: the plan is to have it available in the REPL as well, for the self-documenting introspection

[04:39] <skids> But you can just look up identifiers you find in sources in the docs, when you don't know them, so I'm not seeing the difference.

[04:39] <asdf12z_> but i'd have to memorize it to know where to look is what im saying

[04:39] <skids> Right or through introspection.

[04:40] <psch> m: #| does the magicks␤sub foo() { warn "NYI" }; say &foo.WHY

[04:40] <camelia> rakudo-moar ffbb70: OUTPUT«does the magicks␤»

[04:40] <skids> why?  You see someone using class "fnord" and you look up "fnord"?

[04:40] <psch> m: say "Life, the Universe, and Everything".WHY 

[04:40] <camelia> rakudo-moar ffbb70: OUTPUT«42␤»

[04:40] <asdf12z_> skids: and then if fnord doesn't exist, i'd have to look at the libs its importing to see which one creates that namespace ?

[04:41] <skids> Wait what who put that in there.

[04:41] <psch> skids: lizmat++ iirc

[04:41] <asdf12z_> skids: unless i memorized every identifier to know it doesn't come from perl6 core, then i'd go look at the imports, otherwise i'd have to check in 2 places

[04:42] <skids> I... really don't see your point.

[04:43] <psch> m: module Foo { sub baz is export { } }; import Foo; say &baz.package

[04:43] <camelia> rakudo-moar ffbb70: OUTPUT«(Foo)␤»

[04:43] <psch> asdf12z_: ^^^ would that help?

[04:44] <asdf12z_> no

[04:45] <asdf12z_> because i can look at perl6 code and see something like `convert;`

[04:45] <asdf12z_> and i won't know (unless i memorized every identifier perl6 has) if convert is some macro or part of perl6

[04:46] <asdf12z_> or if*

[04:46] <asdf12z_> its a non-issue if it was small enough to memorize

[04:47] <asdf12z_> thats my point

[04:48] <psch> but it works the other way around as well.  if there's no «use» or «import» statement at the top you know nothing's been imported

[04:48] <psch> well, except for runtime imports, as mentioned

[04:48] <psch> if those exists you can check what they export, which is probably a smaller list that golang's stdlib

[04:49] <psch> i understand your point, but to me that's not a language design issue, it's a tooling issue

[04:49] <psch> and yes, the tools are lacking at the moment

[04:50] <psch> but thanks to p6doc/POD6 and introspection we can get that from the language itself

[04:51] <psch> i.e. it's probably not very hard to write a tool that you point at a file and ask it about an identifier and it gets you the package it comes from with the documentation that exists

[04:51] <psch> nobody's gotten around to that yet though

[04:51] <asdf12z_> in golang its very different, and i'm not trying to make perl6 like golang of course, it's just an example

[04:52] <asdf12z_> https://gobyexample.com/range-over-channels for instance

[04:52] <asdf12z_> anything that doesn't begin with fmt namespace is part of golang

[04:52] <Mouq> asdf12z_: And you may want to check out doc.perl6.org too. The search interface isn't perfect, and it doesn't know everying, but it should be able to identify the majority Perl 6 builtins

[04:52] <asdf12z_> anything that does, is part of the fmt lib

[04:52] <asdf12z_> so if i didn't know what `make` was, i do _know_ it comes from golang 

[04:53] <asdf12z_> its very easy to reason about

[04:53] <skids> How does it benefit you to know whether it comes from golang or a lib, exactly, other than telling you weher eto look for docs?

[04:54] <asdf12z_> knowing where to look is really really important man

[04:54] <skids> But if you had an search tool that could just find it across docs, that would solve the problem, no?

[04:54] <asdf12z_> especially if this code wasn't just some short example and 1,000+ lines of code

[04:55] <asdf12z_> depends on how good the search tool is

[04:58] <psch> that makes me wonder if our "did you mean" could extend to installed modules

[04:58] <psch> it probably could but would be expensive or need an index

[05:00] <asdf12z_> im just giving my impressions as an outsider of anything perl

[05:00] <skids> Well, expense really isn't as much of a concern in the error path.

[05:01] <asdf12z_> i've just been casually looking at perl6 talks on youtube whenever i have the time

[05:01] <asdf12z_> and sometimes it seems perl6 was made for perl users

[05:02] <skids> Another good way to cut your teeth is try the one-liners https://github.com/dnmfarrell/Perl6-One-Liners

[05:02] <psch> skids: right, but depending on the available CURs that could still be too expensive

[05:03] <psch> skids: wouldn't want my LWP one-liner to crawl all modules for "geptrint" :)

[05:04] <skids> Yeah, it sounds like something you'd want to turn on with an --ide flag or something.

[05:10] <psch> asdf12z_: well, perl6 is still perl, nobody ever denied that

[05:21] <psch> hrm, no idea how to fix the NPE in «my (int $x)», but the null-check that should've thrown a more specific error only created an Exception but didn't throw it

[05:21] <psch> that's at least something i suppose... :)

[05:36] *** fil_ joined
[05:36] <fil_> hellos

[05:36] <yoleaux> 30 Jan 2015 17:27Z <FROGGS> fil_: soon meant 7 hours later :o) (I had no idea when I would get around to it, and what it would involve... happily it is just about setting a flag to true)

[05:36] <skids> o/

[05:37] <fil_> is there a convention about putting classes in files like there is in java?

[05:38] <fil_> any1?

[05:38] <skids> Very often the easiest way to provide a single class module is to name it after the class, but files can contain multiple classes.

[05:39] <fil_> are the best practices about how to split your work up into multiple files documented anywhere?

[05:39] <fil_> it's not clear to me how I should be splitting up my work...

[05:39] *** adu left
[05:39] <fil_> in Java it's easy--the language forces you to have 1-to-1

[05:39] <skids> Well, not quite yet, but if you look at modules.perl6.org you can see what others are doing.

[05:40] <fil_> i spent the last half hour doing that

[05:40] <fil_> didn't see much consistency

[05:40] <fil_> ok, sounds like it's premature to be asking...

[05:40] <fil_> thx

[05:40] *** fil_ left
[05:44] *** adu joined
[05:50] *** konsolebox joined
[06:03] *** adu left
[06:05] *** jack_rabbit joined
[06:09] *** Mouq left
[06:28] *** adu joined
[06:35] *** khisanth_ joined
[06:36] <moritz> good morning

[06:38] <moritz> .tell fil_ IMHO it's best practice to put each class that is publicly accessible into a separate class. As for rest, use your best judgement :-)

[06:38] <yoleaux> moritz: I'll pass your message to fil_.

[07:01] <asdf12z_> niecza is no longer in development right?

[07:01] <asdf12z_> :( perl6 on the clr would be cool

[07:03] *** darutoko joined
[07:04] <moritz> asdf12z_: aye

[07:05] <moritz> asdf12z_: I still hope somebody starts a CLR backend for rakudo

[07:15] *** adu left
[07:18] *** raiph left
[07:24] *** [Sno] joined
[07:34] *** xfix joined
[07:40] *** FROGGS[mobile] joined
[07:41] <FROGGS[mobile]> o/

[07:42] *** Rounin joined
[07:43] *** yeahnoob joined
[07:51] <tadzik> o/

[07:54] *** Oe_eden joined
[07:55] *** Mouq joined
[07:56] <FROGGS[mobile]> tadzik: breakfast?

[08:01] *** nige joined
[08:07] <Oe_eden> is there a perl6 oreilly book in the making yet or will they update programming perl to accomidate perl6?

[08:14] <tadzik> FROGGS[mobile]: yep

[08:15] <FROGGS[mobile]> Oe_eden: I fear such an oreally book will take a fear years from now

[08:15] <FROGGS[mobile]> I dont think anybody is working at it atm, given that we want to get 6.0.0 out

[08:17] <FROGGS[mobile]> that said, I hope the Perl 6 book gets revived, and I'd like to write a chapter or two about topic I know well

[08:17] <Oe_eden> hmm also I own version 2 op PP but I noticed only yesterday at Fosdem that v3 is almost twice the size... what is that about?

[08:19] *** lizmat joined
[08:21] <FROGGS[mobile]> ask wendy :o)

[08:21] <FROGGS[mobile]> I honestly dont know

[08:24] *** sqirrel joined
[08:26] <dalek> rakudo/nom: 0959c68 | Mouq++ | src/core/ (2 files):

[08:26] <dalek> rakudo/nom: Try once more to do LoL assignment correctly

[08:26] <dalek> rakudo/nom: 

[08:26] <dalek> rakudo/nom: There shouldn't be any need to muck about with special cases in the case

[08:26] <dalek> rakudo/nom: of LoL assignment; that handling should be the same as in normal LoL

[08:27] <dalek> rakudo/nom: access. This patch makes sure we're returning the proper container after

[08:27] <dalek> rakudo/nom: an LoL access of any sort; this way, assignment is trivial.

[08:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0959c68566

[08:27] <dalek> rakudo/nom: 84ca774 | Mouq++ | src/core/ (2 files):

[08:27] <dalek> rakudo/nom: Merge branch 'nom' of http://github.com/rakudo/rakudo into nom

[08:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84ca7742b3

[08:27] <Mouq> Far too many hours went into that tiny patch

[08:27] <Mouq> Lists are hard :P

[08:27] *** denis_boyun joined
[08:27] <lizmat> Mouq++

[08:27] * lizmat is going to try that now

[08:30] <Mouq> lizmat++ for alerting me in the first place

[08:31] *** denis_boyun__ joined
[08:31] *** denis_boyun left
[08:36] *** labster_ joined
[08:37] *** mr-fooba_ joined
[08:37] *** denis_boyun__ left
[08:37] *** jdv79_ joined
[08:38] *** jschulz_ joined
[08:38] *** atta_ joined
[08:38] *** sven_123_ joined
[08:39] *** __rnddim__ joined
[08:39] *** __rnddim__ is now known as lue

[08:39] *** xinming_ joined
[08:39] *** xiaomiao joined
[08:40] *** petercom1and joined
[08:40] *** pochi_ joined
[08:40] *** avuserow_ joined
[08:41] *** petercom1and left
[08:41] *** petercom1and joined
[08:41] *** FROGGS[mobile] left
[08:42] *** colomon_ joined
[08:42] *** rmgk_ joined
[08:42] *** rmgk_ is now known as rmgk

[08:42] *** gfldex joined
[08:44] *** masak__ joined
[08:44] *** esaym joined
[08:45] <dalek> roast: 4954d43 | lizmat++ | integration/weird-errors.t:

[08:45] <dalek> roast: Unfudge passing test

[08:45] <dalek> roast: review: https://github.com/perl6/roast/commit/4954d43df4

[08:45] *** colomon left
[08:45] *** labster_ is now known as labster

[08:45] *** colomon_ is now known as colomon

[08:45] *** petercom1and is now known as petercommand

[08:46] *** mst joined
[08:47] *** _sri joined
[08:48] *** esaym left
[08:49] *** esaym153 joined
[08:49] <pmichaud> bonjour, #prl6

[08:49] <pmichaud> *#perl6

[08:50] *** awwaiid joined
[08:50] *** lestrrat joined
[08:54] *** rurban joined
[08:58] *** rurban1 joined
[09:02] *** alinbsp joined
[09:03] *** haroldwu left
[09:03] *** haroldwu joined
[09:03] *** kshannon_ joined
[09:04] *** rindolf joined
[09:06] *** rindolf left
[09:07] *** FROGGS joined
[09:07] *** FROGGS[mobile] joined
[09:09] *** sqirrel left
[09:09] *** simcop2387 joined
[09:13] *** [Sno] left
[09:20] *** kjs_ joined
[09:20] *** FROGGS[mobile] left
[09:21] *** FROGGS left
[09:23] *** atroxaper joined
[09:29] *** wilx left
[09:38] *** brrt joined
[09:39] *** anaeem1_ joined
[09:39] *** nige left
[09:42] <dalek> rakudo/nom: 27ebd7e | lizmat++ | src/ (3 files):

[09:42] <dalek> rakudo/nom: Implement the "aka" trait on methods

[09:42] <dalek> rakudo/nom: 

[09:42] <dalek> rakudo/nom: This basically aliases a method to other names in the same package.  This is

[09:42] <dalek> rakudo/nom: different (apparently) to the "handles" trait on method.

[09:42] <dalek> rakudo/nom: 

[09:42] <dalek> rakudo/nom: method foo aka <bar baz> { # can do $o.foo, or $o.bar or $o.baz for same effect

[09:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27ebd7e4b9

[09:50] *** anaeem1_ left
[09:51] *** anaeem1_ joined
[09:52] *** FROGGS joined
[09:53] <FROGGS> lizmat: that's my version: multi trait_mod:<is>(Routine $r, :$aka!) is export { $r.package.^add_method($aka, $r) };

[09:53] <FROGGS> @all: I want to improve the Perl 6 book, and write one or two chapters (regexes/grammars and perhaps something else I have knowledge of).... somebody also picks topics?

[09:54] <FROGGS> @all: would be nice if one or two ppl would subscribe to 1-2 topics

[09:55] *** [TuxCM] joined
[09:55] *** anaeem1_ left
[09:57] <tadzik> [Tux]: how's it going? :)

[09:57] <tadzik> I managed to get internets

[09:57] <tadzik> I'll also update rakudo and see if it breaks my stuff too

[10:02] <moritz> FROGGS: there are already regexes and grammar chapters in book

[10:03] <moritz> *the book

[10:03] <moritz> FROGGS: no objections to improvements though

[10:04] <moritz> do the live streams work today?

[10:04] *** brrt left
[10:06] *** rurban left
[10:06] <tadzik> in the room I'm in (graphics), there was a conversation like "we don't know, we only see this bar going up and down"

[10:07] * FROGGS sits in the Rust talk and sees that their development is identical to ours... just is put in different words

[10:07] <FROGGS> i.e. the speaker calls it "Empiric Iteration", we call it Whirlpool

[10:07] <tadzik> heh

[10:08] <tadzik> is it also in K?

[10:08] <FROGGS> in the Janson

[10:08] <tadzik> ah

[10:11] <nine> dj_goku: thanks!

[10:12] *** jack_rabbit left
[10:13] *** Kristien joined
[10:14] <dalek> rakudo/nom: 4dd6c91 | lizmat++ | src/core/traits.pm:

[10:14] <dalek> rakudo/nom: Better implementation of "aka" trait on methods

[10:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4dd6c91074

[10:16] *** dagurval joined
[10:18] *** masak__ is now known as masak

[10:18] <masak> good antenoon, #perl6

[10:18] <masak> big day today, huh?

[10:18] *** masak is now known as Guest26461

[10:18] *** rurban joined
[10:18] <FROGGS> masak: aye, Rust will be released this year :P

[10:18] *** Guest26461 is now known as masak_grr

[10:19] <masak_grr> \o/

[10:19] *** rurban2 joined
[10:19] <moritz> but that's no news, I thought?

[10:20] <moritz> I mean, they've had that timeline for several weeks now

[10:20] <moritz> or even months

[10:20] <FROGGS> moritz: to somebody like me that does not care about other languages it is :o)

[10:21] <masak_grr> hah! we've had our deadline for *years*, and it's always been "around 18 months from now" :P

[10:23] *** rurban2 left
[10:24] *** synopsebot joined
[10:24] *** spider-mario joined
[10:25] <moritz> masak_grr: what's _grr today? :-)

[10:30] *** _dolmen_ joined
[10:30] <FROGGS> use std::thread::Thread; -- Rust

[10:30] *** [TuxCM] left
[10:30] *** yeahnoob left
[10:32] <dalek> rakudo/nom: 6c957ba | lizmat++ | src/core/traits.pm:

[10:32] <dalek> rakudo/nom: Unbust the Method.handles trait

[10:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c957baf32

[10:32] <masak_grr> moritz: just the same old nickserv business.

[10:33] <masak_grr> moritz: it passes after a while.

[10:33] <tadzik> FROGGS: all I can think of is "use std::badger::Badger::BADGER" :P

[10:34] <FROGGS> *g*

[10:34] *** yeahnoob joined
[10:36] <cdc> moritz: rtmp://stream-a.fosdem.org:1935/play/janson_a

[10:37] *** jack_rabbit joined
[10:38] <alpha-> is there a page for Perl 6 which is equivalent to perlfunc in Perl 5 ?

[10:39] <FROGGS> alpha-: perhaps this? http://doc.perl6.org/routine.html

[10:39] <[ptc]> is the sound dropping out all the time for anyone else?

[10:39] <alpha-> thanks

[10:39] <FROGGS> you might want to highlight 'sub' using your browser in case you are searching for subs only...

[10:40] <alpha-> hmm

[10:40] <FROGGS> though, many stuff exists as methods only where it makes sense

[10:41] <alpha-> FROGGS I see that there is no 'async' keyword/function/operator/whatever

[10:41] <alpha-> perl6 has no 'async' ?

[10:41] *** lizmat left
[10:41] <FROGGS> it is a keyword

[10:41] <Kristien> green thread master race

[10:41] <TimToady> async is callled 'start' now, and returns a promise

[10:42] <alpha-> oh ok

[10:42] <moritz> cdc: thanks

[10:42] <TimToady> and it's really a statement prefix operator

[10:42] <moritz> [ptc]: sound is stable here

[10:42] <TimToady> so it might or might not take a block

[10:43] <[ptc]> moritz: thanks; must be just my settings

[10:43] <FROGGS> alpha-: here are slides about that topic: http://www.jnthn.net/articles.shtml look out for async and concurrency

[10:43] <alpha-> thanks FROGGS 

[10:44] <FROGGS> alpha-: I can also find talks (videos) in case you are interested

[10:44] <cdc> moritz: this stream doesn't work anymore here :'(

[10:45] <[ptc]> are the slides at least available?  The link doesn't appear on live.fosdem.org

[10:46] <cdc> it works again \o/

[10:46] <alpha-> FROGGS not atm, I will read the slides and try writing examples, thanks

[10:46] <cdc> [ptc]: I don't see them either

[10:46] <[ptc]> cdc: it's nice to know it's not just me :-)

[10:47] *** gfldex left
[10:47] <alpha-> what is the alternative to perlbrew for Perl 6? e.g. a non-root install of perl6 contained in some directory

[10:47] *** jack_rabbit left
[10:47] *** gfldex joined
[10:47] <FROGGS> there is rakudobrew

[10:47] <FROGGS> alpha-: but for rakudo we always do a non-root install by default

[10:48] <FROGGS> so, cloning rakudo will also get you set up, though rakudobrew also installs useful modules and the module installer

[10:48] <moritz> alpha-: https://github.com/tadzik/rakudobrew/

[10:49] *** raiph joined
[10:50] *** yeahnoob left
[10:50] *** kaare_ joined
[10:51] <alpha-> No suitable nqp executables found!

[10:51] <alpha-> I think I am missing something

[10:51] <tadzik> is that what rakudobrew said?

[10:51] <alpha-> no, it's from rakudo Configure.pl

[10:51] <FROGGS> alpha-: perl Configure.pl --gen-moar

[10:51] <alpha-> ok

[10:52] <FROGGS> alpha-: though I thought you get hints printed O.o

[10:52] <gfldex> try perl Configure.pl --backends=moar --gen-nqp --gen-moar

[10:53] <[ptc]> INSTALL.txt in the rakudo repo has good installation instructions

[10:53] <moritz> gfldex: --gen-nqp is implied by --gen-moar

[10:53] <moritz> gfldex: and --backend=moar too (unless you have more NQPs available)

[10:54] *** konsolebox left
[10:54] <alpha-> I can't figure out what NQP is even after reading the description page

[10:54] <alpha-> is it like llvm ?

[10:55] <FROGGS> alpha-: it is like a very simple version of Perl 6, that lets us write the very core Perl 6 compiler parts also in a Perl 6-ish language

[10:55] <FROGGS> nqp-m: say("hello world")

[10:55] <camelia> nqp-moarvm: OUTPUT«hello world␤»

[10:55] <alpha-> interesting

[10:56] <FROGGS> like in my example, the parenthesis are mandatory in nqp code

[10:56] <timotimo> o/

[10:57] <[ptc]> timotimo: \o

[10:57] <alpha-> are moarvm and nqp strictly perl6 stuff or there are any other projects using this ?

[10:57] <moritz> alpha-: there aren't

[10:57] <timotimo> we have toy interpreters for ruby and python

[10:58] <moritz> alpha-: well, there's a python compiler work-in-progress on nqp

[10:58] <timotimo> and there was a tcl implementation but that was more or less relying on many parrot internals

[10:58] <moritz> https://github.com/arnsholt/snake/

[10:58] <timotimo> the stream is giving me audio, no audio, audio, no audio etc etc

[10:58] <timotimo> actually, video is cutting out as well it seems

[10:58] <timotimo> but only sometimes

[10:59] <moritz> back now here

[10:59] <[ptc]> timotimo: same here

[10:59] <moritz> audio seems to be far ahead of video

[10:59] <alpha-> ok, looks like it built and runs, I think I have something to play with now, thanks

[10:59] <[ptc]> but there's no stream for the slides...

[10:59] <timotimo> this is going to be designing a perl number theory module?

[10:59] <[ptc]> yup

[10:59] <timotimo> OK

[11:00] <FROGGS> alpha-: have fun doing so :o)

[11:01] <TimToady> dana has started

[11:02] *** jack_rabbit joined
[11:02] <dalek> rakudo/nom: 92211ce | Mouq++ | INSTALL.txt:

[11:02] <dalek> rakudo/nom: Update INSTALL.txt; Parrot now needs ICU

[11:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/92211ce0dd

[11:02] <dalek> rakudo/nom: 6e182d3 | Mouq++ | src/ (3 files):

[11:02] <dalek> rakudo/nom: Merge branch 'nom' of http://github.com/rakudo/rakudo into nom

[11:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e182d306c

[11:02] <alpha-> is there a perl6 compiler that can output native code? eg. create .exe or elf ?

[11:02] <FROGGS> alpha-: that's in the works and is a GSoC project proposal for this year

[11:02] <alpha-> I see

[11:03] <Kristien> So many Perl 6 implementations.

[11:03] *** kaare_ left
[11:03] *** _dolmen_ left
[11:03] <timotimo> wow, i cannot at all understand anything the presenter's saying

[11:04] <jdv79_> where?

[11:04] <timotimo> "i think ... perl ... m ... interesti ... int fo ... envy ... ha ... for lo ... only ... progra ... lang ... island ... grea ... for now ..."

[11:04] *** jdv79_ is now known as jdv79

[11:05] <alpha-> timotimo link to stream ?

[11:05] <timotimo> rtmp://stream-a.fosdem.org:1935/play/janson_a

[11:05] <alpha-> looks fine here.

[11:05] <timotimo> i'm jealous

[11:06] <alpha-> 1080p too. nice

[11:06] <timotimo> i have a quite beefy internet connection, so ... 

[11:06] <timotimo> what's wrong? :(

[11:06] <alpha-> maybe their connectivity is not great

[11:07] <timotimo> that'd surprise me

[11:07] <alpha-> stream is only using 3-4 megabit per second

[11:07] <alpha-> try different player maybe?

[11:08] <[ptc]> video's coming through fine, just the audio keeps dropping out... frustrating

[11:08] <alpha-> everything 100% fine here,

[11:08] <timotimo> huh

[11:08] <alpha-> video and audio perfect 1080p

[11:08] <timotimo> mpalyer is working much better than vlc for this stream

[11:08] <alpha-> vlc is known to have warts in some places

[11:09] <timotimo> well, what do i know, apparently :)

[11:09] *** jack_rabbit left
[11:09] <alpha-> also mplayer is afaik abandoned

[11:09] <jdv79> yeah, smplayer is ok for me

[11:09] <alpha-> and so is mplayer2

[11:09] <jdv79> vls is choppy

[11:09] <alpha-> I recommend http://mpv.io/

[11:09] <timotimo> well, the mplayer2 fork spread a whole lot of FUD

[11:09] <alpha-> see link it's a fork of a fork

[11:10] <alpha-> seems to be alive

[11:11] <tadzik> wow, dat lazer

[11:11] *** kaare_ joined
[11:12] <timotimo> our is-prime is broken for very large numbers? =o

[11:12] <alpha-> perl6 has builtin is-prime?

[11:12] <timotimo> yes

[11:12] <alpha-> wow

[11:12] <FROGGS> he'll send a patch over :o)

[11:12] <timotimo> m: say 100121201203010120.is-prime

[11:12] <camelia> rakudo-moar 27ebd7: OUTPUT«False␤»

[11:12] <timotimo> m: say 100121201203010121.is-prime

[11:12] <camelia> rakudo-moar 27ebd7: OUTPUT«False␤»

[11:13] <timotimo> m: say 100121201203010123.is-prime

[11:13] <camelia> rakudo-moar 27ebd7: OUTPUT«False␤»

[11:13] <timotimo> m: say 100121201203010127.is-prime

[11:13] <camelia> rakudo-moar 27ebd7: OUTPUT«False␤»

[11:13] <timotimo> i don't know how to prime

[11:13] <alpha-> is it an approximate or definitive algorithm ?

[11:13] <[ptc]> m say 1.is-prime

[11:13] <[ptc]> m: say 1.is-prime

[11:13] <camelia> rakudo-moar 27ebd7: OUTPUT«False␤»

[11:13] <moritz> alpha-: probailistisc

[11:13] <[ptc]> m: say 2.is-prime

[11:13] <camelia> rakudo-moar 27ebd7: OUTPUT«True␤»

[11:13] <timotimo> m: say (1001212012030101..1001212012040101).grep(*.is-prime)

[11:13] <camelia> rakudo-moar 27ebd7: OUTPUT«1001212012030103 1001212012030187 1001212012030189 1001212012030273 1001212012030283 1001212012030319 1001212012030339 1001212012030367 1001212012030403 1001212012030421 1001212012030463 1001212012030471 1001212012030519 1001212012030537 1001212012030631 1…»

[11:14] <alpha-> moritz that's...

[11:14] <FROGGS> m: my $i = 10012120120301012787439875938749587398475; until $i.is-prime { $i++ }; say $i

[11:14] <camelia> rakudo-moar 27ebd7: OUTPUT«10012120120301012787439875938749587398503␤»

[11:14] <alpha-> brave

[11:14] <arnsholt> is-prime is approximate, but IIRC the probability of it being wrong is on the order of a bit in RAM being flipped by a cosmic ray, or some such

[11:14] <pmichaud> bon après midi, #perl6

[11:14] <FROGGS> pmichaud: o/

[11:14] <timotimo> wolframalpha agrees it's prime

[11:14] *** konsolebox joined
[11:14] <tadzik> m: 9.is-prime.say

[11:14] <camelia> rakudo-moar 27ebd7: OUTPUT«False␤»

[11:15] <tadzik> uff :)

[11:15] <FROGGS> pmichaud: we are in the Janson already, sitting in the middle first row

[11:15] <alpha->  /usr/bin/factor too

[11:15] <pmichaud> FROGGS: I'm seven seats to your left, one row back.

[11:15] <Kristien> m: sub sqrt($x) { PRE { $x >= 0 }; ??? }; say sqrt(9); say sqrt(-1);

[11:15] <camelia> rakudo-moar 27ebd7: OUTPUT«Stub code executed  in sub sqrt at /tmp/JO6oh8Ow8G:1␤␤0␤Precondition '{ $x >= 0 }' failed␤  in sub sqrt at /tmp/JO6oh8Ow8G:1␤  in block <unit> at /tmp/JO6oh8Ow8G:1␤␤»

[11:15] <tadzik> oh, *that*'s where you hid

[11:15] <timotimo> greetings, pmichaud 

[11:15] <Kristien> nice.

[11:15] <Kristien> preconditions

[11:17] <timotimo> i'm glad a really number-theory-savy is interested in perl6, too, so that our stuff can be put through its paces

[11:17] <[ptc]> yay, audio is working with mplayer2

[11:17] <FROGGS> timotimo: aye

[11:17] *** espadrine_ joined
[11:17] <FROGGS> dana++ # and he really know its stuff

[11:18] *** vendethiel joined
[11:18] <FROGGS> his*

[11:18] <jdv79> theres no slide feed?

[11:18] <[ptc]> jdv79: doesn't seem to be

[11:19] *** kaare_ left
[11:19] <Kristien> Can one access in a POST phaser the return value in a different way than assigning it to a variable first?

[11:19] *** kaare_ joined
[11:19] <moritz> Kristien: iirc it's passed in as $_

[11:20] <Kristien> m: sub abs($x) { return $x; POST { $_ >= 0 } }; say abs(-10)

[11:20] <camelia> rakudo-moar 27ebd7: OUTPUT«Postcondition '{ $_ >= 0 }' failed␤  in sub abs at /tmp/BniuO2z3tg:1␤  in block <unit> at /tmp/BniuO2z3tg:1␤␤»

[11:20] <Kristien> nice

[11:20] <Kristien> m: sub abs($x) { $x; POST { $_ >= 0 } }; say abs(-10)

[11:20] <camelia> rakudo-moar 27ebd7: OUTPUT«use of uninitialized value of type Nil in numeric context  in sub abs at /tmp/bp6TIjyFhS:1␤␤Nil␤»

[11:20] <Kristien> m: sub abs($x) { POST { $_ >= 0 }; $x }; say abs(-10)

[11:20] <camelia> rakudo-moar 27ebd7: OUTPUT«Postcondition '{ $_ >= 0 }' failed␤  in sub abs at /tmp/fc2dyQdXRF:1␤  in block <unit> at /tmp/fc2dyQdXRF:1␤␤»

[11:21] <Kristien> m: sub abs($x) { POST { $_ >= 0 }; $x }; say abs(10)

[11:21] <camelia> rakudo-moar 27ebd7: OUTPUT«10␤»

[11:21] <Kristien> most shiny

[11:21] <FROGGS> that makes sense I guess

[11:21] <Kristien> I love contract programming.

[11:22] <moritz> m: sub abs($x) { POST { $_ >= 0 }; $x }; try abs($x); say $!.perl

[11:22] <camelia> rakudo-moar 27ebd7: OUTPUT«===SORRY!=== Error while compiling /tmp/_BY72tB2j8␤Variable '$x' is not declared␤at /tmp/_BY72tB2j8:1␤------> $x) { POST { $_ >= 0 }; $x }; try abs($x⏏); say $!.perl␤    expecting any of:␤        postfix␤»

[11:22] <moritz> m: sub abs($x) { POST { $_ >= 0 }; $x }; try abs(-1); say $!.perl

[11:22] <camelia> rakudo-moar 27ebd7: OUTPUT«X::Phaser::PrePost.new(phaser => "POST", condition => " \{ \$_ >= 0 }")␤»

[11:23] <alpha-> does perl6 have arbitrary precision math ?

[11:24] *** denis_boyun joined
[11:24] <TimToady> m: say [\*] 1..*

[11:24] <camelia> rakudo-moar 27ebd7: OUTPUT«1 2 6 24 120 720 5040 40320 362880 3628800 39916800 479001600 6227020800 87178291200 1307674368000 20922789888000 355687428096000 6402373705728000 121645100408832000 2432902008176640000 51090942171709440000 1124000727777607680000 25852016738884976640000 62…»

[11:25] <TimToady> m: say 1,2,4 ... *

[11:25] <camelia> rakudo-moar 27ebd7: OUTPUT«1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736…»

[11:25] <pmichaud> I'm not sure our precision is arbitrary.  :)

[11:25] <TimToady> m: say 2 ** 1000

[11:25] <camelia> rakudo-moar 27ebd7: OUTPUT«1071508607186267320948425049060001810561404811705533607443750388370351051124936122493198378815695858127594672917553146825187145285692314043598457757469857480393456777482423098542107460506237114187795418215304647498358194126739876755916554394607706291457119…»

[11:25] <alpha-> cool so integers are there

[11:25] <alpha-> and fractions?

[11:25] <Kristien> m: say 2.6 ** 1000

[11:25] <camelia> rakudo-moar 27ebd7: OUTPUT«Inf␤»

[11:25] <Kristien> m: say (2+6/10) ** 1000

[11:26] <camelia> rakudo-moar 27ebd7: OUTPUT«Inf␤»

[11:26] <Kristien> lol ** fails on rationals

[11:26] <pmichaud> m: say 1 / 2**1000

[11:26] <camelia> rakudo-moar 27ebd7: OUTPUT«9.33263618503219e-302␤»

[11:26] <Kristien> m: (2+6/10).WHAT.say

[11:26] <camelia> rakudo-moar 27ebd7: OUTPUT«(Rat)␤»

[11:26] <pmichaud> m: say 1 / 2**100

[11:26] <camelia> rakudo-moar 27ebd7: OUTPUT«7.88860905221012e-31␤»

[11:26] <TimToady> we do rational arithmetic up to a denominator of 2**64

[11:26] <Kristien> oh OK

[11:26] <pmichaud> m: say (1 / 2**50)

[11:26] <camelia> rakudo-moar 27ebd7: OUTPUT«0.00000000000000089␤»

[11:26] <alpha-> m: 22/7

[11:26] <camelia> rakudo-moar 27ebd7: ( no output )

[11:26] <pmichaud> m: say (1 / 2**50).WHAT

[11:26] <camelia> rakudo-moar 27ebd7: OUTPUT«(Rat)␤»

[11:26] <TimToady> m: say .1 + .2 - .3

[11:26] <camelia> rakudo-moar 27ebd7: OUTPUT«0␤»

[11:26] <alpha-> m: say 22/7

[11:26] <camelia> rakudo-moar 27ebd7: OUTPUT«3.142857␤»

[11:27] <alpha-> how to get to 50 digits after . ?

[11:27] <pmichaud> m: say 355/113

[11:27] <camelia> rakudo-moar 27ebd7: OUTPUT«3.141593␤»

[11:27] <gfldex> m: say '0.', '0' x 50, '1';

[11:27] <moritz> say qx/pi/

[11:27] <camelia> rakudo-moar 27ebd7: OUTPUT«0.000000000000000000000000000000000000000000000000001␤»

[11:28] <gfldex> easy!

[11:28] <moritz> say qx/pi 50/ # actually

[11:28] <Kristien> m: say (22/7).perl

[11:28] <camelia> rakudo-moar 27ebd7: OUTPUT«<22/7>␤»

[11:28] <jdv79> did the video just freezw?

[11:28] <gfldex> jdv79: works for me

[11:28] <jdv79> maybe my conn

[11:28] <alpha-> once it froze, yes

[11:28] <alpha-> a bit earlier

[11:29] <cdc> same for me

[11:29] <Kristien> m: say (22/7).Num.perl

[11:29] <camelia> rakudo-moar 27ebd7: OUTPUT«3.14285714285714e0␤»

[11:29] <Kristien> m: say (22/7).Num

[11:29] <camelia> rakudo-moar 27ebd7: OUTPUT«3.14285714285714␤»

[11:29] *** denis_boyun left
[11:30] <moritz> m: say pi.Rat.perl

[11:30] <camelia> rakudo-moar 27ebd7: OUTPUT«<355/113>␤»

[11:30] *** manab joined
[11:30] <tadzik> :)

[11:30] <pmichaud> wow, pi.Rat gives back the 355/113 fraction.  

[11:30] <pmichaud> that's... neat.

[11:30] <manab> hello everyone

[11:30] <alpha-> wow, perl  has builtin pi

[11:30] <alpha-> haha

[11:30] <alpha-> nice

[11:30] <moritz> hi manab 

[11:30] <tadzik> is pi in settings ratified, or Numd?

[11:31] <manab> new to this community

[11:31] <moritz> tadzik: Num

[11:31] <Kristien> m: pi.WHAT.say

[11:31] <moritz> m: say pi.^name

[11:31] <camelia> rakudo-moar 27ebd7: OUTPUT«(Num)␤»

[11:31] <camelia> rakudo-moar 27ebd7: OUTPUT«Num␤»

[11:31] <tadzik> awesome that it comes up with the Rat representation

[11:31] <manab> can someone please help me out so i can start contributing for tpf projects

[11:31] <Kristien> m: sin(pi).say

[11:31] <camelia> rakudo-moar 27ebd7: OUTPUT«1.22464679914735e-16␤»

[11:31] <FROGGS> manab: how can I help you?

[11:31] <moritz> manab: find one that interests you

[11:32] <moritz> manab: http://rakudo.org/how-to-help/ for example

[11:32] <jdv79> my video has diverged from audio now

[11:32] <Kristien> m: class PI { }; method sin(PI $x) { 0 }; sin(PI).say

[11:32] <camelia> rakudo-moar 27ebd7: OUTPUT«Useless declaration of a has-scoped method in mainline (did you mean 'my method sin'?)␤Cannot call 'sin'; none of these signatures match:␤:(Numeric \x)␤:(Cool \x)␤:(num $x)␤  in block <unit> at /tmp/5lGzJ8PtX0:1␤␤»

[11:32] <jdv79> neat

[11:32] <manab> thanks a lot

[11:32] <Kristien> m: class PI { }; multi sub sin(PI $x) { 0 }; sin(PI).say

[11:32] <camelia> rakudo-moar 27ebd7: OUTPUT«0␤»

[11:32] *** denis_boyun joined
[11:32] <Kristien> :D

[11:32] <Kristien> m: class PI { }; multi sub sin(PI $x) { 0 }; sin(pi).say

[11:33] <camelia> rakudo-moar 27ebd7: OUTPUT«1.22464679914735e-16␤»

[11:33] <tadzik> m: my constant pi = 4; say sin(pi)

[11:33] <camelia> rakudo-moar 27ebd7: OUTPUT«-0.756802495307928␤»

[11:33] <tadzik> :-D-/-<

[11:33] <Kristien> write a CAS in Perl 6

[11:33] <moritz> manab: in general, you look for TODO files, or simply use the project, find something that could be improved, and do it

[11:33] <moritz> Kristien: iirc somebody started one. Was it raydiak?

[11:33] <manab> ohh okay

[11:33] <manab> thank u :)

[11:34] *** sqirrel joined
[11:34] <manab> i actually wanted to contribute for tpf gsoc15

[11:34] <FROGGS> look a sqirrel!

[11:34] *** anaeem1 joined
[11:34] <moritz> manab: why TPF?

[11:34] <moritz> manab: I'm just curious

[11:34] <cdc> jdv79: you can use "-" or "+" with mplayer to resync manually

[11:34] <sqirrel> :P

[11:35] <jdv79> oh. i restarted

[11:35] <FROGGS> manab: look at this, and (let) add ideas as needed: https://github.com/perl6/mu/blob/master/misc/gsoc-2015/ideas.md

[11:35] <Kristien> moritz: https://github.com/raydiak/Math-Symbolic

[11:35] <manab> moritz: i want to learn perl actually, curiosity

[11:35] <moritz> manab: that's a good motivation :-)

[11:36] <manab> i have done many projects on java , html, apps

[11:36] <jdv79> slides are now working

[11:36] <[ptc]> yay!

[11:36] <moritz> jdv79: stream URL?

[11:36] <manab> FROGGS: thanks a lot :)

[11:36] <colomon> are there ongoing p6 talks?

[11:36] <FROGGS> manab: you're welcome

[11:36] <[ptc]> mplayer rtmp://stream-a.fosdem.org:1935/play/janson_a

[11:36] <jdv79> ..._b

[11:36] <[ptc]> ups ... _b

[11:36] <FROGGS> colomon: larry's talk will come next

[11:36] <cdc> jdv79: thanks for this good news !

[11:36] <colomon> do we have audio?

[11:37] <tadzik> colomon: currently mostly Perl 5, but Larry comes in 25 minutes from now

[11:37] <jdv79> yes

[11:37] <colomon> \o/

[11:37] <jdv79> seems to all work atm in mplayer

[11:37] <Kristien> I learned a new programming language yesterday.

[11:37] <Kristien> I want to learn more soon.

[11:37] <FROGGS> Kristien++

[11:37] <moritz> \o/

[11:38] *** anaeem1 left
[11:38] <moritz> working streams

[11:38] <colomon> hmmm…. I’m getting audio with janson_a but not janson_b ?

[11:38] <Kristien> Such as Perl 6.

[11:38] *** alinbsp left
[11:38] <[ptc]> colomon: I don't think there is audio on janson_b

[11:39] <[ptc]> life.fosdem.org says that the presentation stream is without audio

[11:39] * moritz does a  mplayer -vo null jason_a  and an mplayer json_b

[11:39] * cdc same as moritz 

[11:40] <cdc> well "-ao null" for json_b because it has some sound glitch

[11:41] <[ptc]> cdc: thanks, that was a good idea

[11:41] *** ggoebel111111112 joined
[11:42] *** ggoebel111111111 left
[11:43] *** denis_boyun left
[11:43] *** kshannon_ left
[11:43] *** kshannon joined
[11:43] <pmichaud> Throwback sunday: https://picasaweb.google.com/lh/photo/o5ixkD7Y1b_6rSWwquNoLdMTjNZETYmyPJy0liipFm0?feat=directlink   # Pm presenting in Jansen at FOSDEM 2008

[11:43] <colomon> TimToady!

[11:44] <FROGGS> pmichaud: nice picture :o)

[11:45] *** rurban1 left
[11:45] <masak_grr> so, TimToady in 15 minutes?

[11:45] *** masak_grr is now known as masak

[11:45] <pmichaud> masak: that's the schedule

[11:46] <Kristien> :O

[11:46] *** djanatyn joined
[11:46] <pmichaud> There are butterflies on the main screen :)

[11:46] *** diana_olhovik joined
[11:46] <masak> \o/

[11:46] *** masak is now known as Guest34903

[11:46] *** Guest34903 is now known as masak_grr

[11:46] <jdv79> unless he's at the podium for another reason

[11:46] <Kristien> Is it Get ready to party!?

[11:46] <masak_grr> yes!

[11:46] <pmichaud> The main screen says we should get ready to party, yes.

[11:46] <pmichaud> Well, it did.

[11:46] <Kristien> nice haircut

[11:47] <pmichaud> Now it has some scary fibonacci code.

[11:47] <FROGGS> now it shows linenoise instead :P

[11:47] <tadzik> haha, we're hiring :)

[11:47] <FROGGS> err, what pmichaud++ said

[11:47] <pmichaud> Room is filling nicely

[11:47] <masak_grr> this is exciting

[11:47] <FROGGS> aye

[11:47] <Kristien> if only the stream worked

[11:48] <masak_grr> I don't have a feed, so I'm grateful for people reporting here on IRC

[11:48] <pmichaud> "Don't cross the streams."

[11:48] <colomon> I seem to have lost audio? 

[11:48] <masak_grr> if only

[11:48] <tadzik> all aboard the hype train!

[11:48] <Kristien> it shows just one frame

[11:48] <jdv79> is the a feed broke?

[11:48] *** denis_boyun joined
[11:48] <FROGGS> colomon: the mic has been muted

[11:48] *** torbjorn joined
[11:49] <cdc> the video is OK, but no audio here

[11:49] <pmichaud> I don't know how long I'll be able to report; my laptop battery is degraded and I don't know how much charge i'll have

[11:49] <colomon> I’m getting live TimToady but no audio

[11:49] <colomon> FROGGS++

[11:49] <sergot> hiho \o

[11:49] <jdv79> huh

[11:49] <rurban> was there audio with dana?

[11:49] <masak_grr> if TimToady announces Perl 7 today, I will switch to Ruby.

[11:49] <tadzik> :D

[11:49] <sergot> :D

[11:49] <FROGGS> rurban: there was

[11:49] * pmichaud runs powertop to try to save some power

[11:49] * colomon doesn’t know how long he’ll be able to watch … 

[11:49] <FROGGS> rurban: only on one of the streams of course

[11:50] * colomon needs to start shoveling snow sometime in the next hour

[11:50] <rurban> maybe they'll turn it on later

[11:50] *** diana_olhovik left
[11:50] <manab> FROGGS: can i talk to u on personal chat?

[11:50] <Kristien> eh how does mpv.io work

[11:50] <FROGGS> manab: sure

[11:50] <cdc> for mplayer users, on janson_b: -vf crop=844:698:216:21

[11:50] <timotimo> hum

[11:50] <timotimo> currently i'm seeing a still frame of lwall setting up

[11:51] <Kristien> let's try vlc instead

[11:51] <timotimo> ah, better now

[11:51] <pmichaud> it's not a still... TimToady is actually frozen.  :) :) :)

[11:51] <Woodi_> hallo #perl6 :)

[11:51] *** _dolmen_ joined
[11:51] <timotimo> twitter says "i'm hoping for dance moves"

[11:51] <sergot> hi Woodi_ 

[11:51] <Kristien> oh nice it works

[11:51] <timotimo> now i can't really tell if there's going to be sound or not

[11:51] *** Ugator joined
[11:52] <masak_grr> Dance Dance Perlvolution

[11:52] <pmichaud> lots of people taking pictures of TimToady at the podium with the cover slide behind him

[11:52] <rurban> vlc is good for me, just the audio is missing still

[11:52] <pmichaud> it's almost as if they expect this to be a historic announcement or something.

[11:52] <jdv79> is he ok?

[11:52] <rurban> NLPW?

[11:52] <pmichaud> I suspect audio is muted.  Wouldn't expect it to be on for another 5 minutes.

[11:53] <jdv79> frozen indeed

[11:53] <timotimo> you know shit just got real when there's two computers on the speaker's desk

[11:53] <timotimo> one balanced on a trolley, no less :)

[11:53] <masak_grr> does anyone have a URL directly to a stream? I'm so bad at this.

[11:53] * colomon hopes he successfully got VLC recording the stream

[11:53] <Woodi_> I switched vlc to mpv and voice is good. also I managed to discover that jason_a and _b are both one presentation :)

[11:53] <rurban> http://live.fosdem.org/watch.php?room=Janson

[11:53] <cdc> masak_grr: rtmp://stream-a.fosdem.org:1935/play/janson_a

[11:54] <alpha-> no audio on janson_a stream

[11:54] <timotimo> is this about ergonomic placement of laptops?

[11:54] <rurban> you can use HTML5, RTMP (the best) or FLV

[11:54] <cdc> alpha-: mic is muted

[11:54] <timotimo> or trying to get better wifi reception? %)

[11:54] <masak_grr> cdc: muchos gracias!

[11:54] <masak_grr> it's working \o/

[11:55] <alpha-> is that a thinkpad :)

[11:55] <rurban> yes

[11:55] <alpha-> cool

[11:55] <timotimo> can you really call it thinkpad if it doesn't have the red light-up dot in the corner any more?

[11:56] *** Mouq left
[11:56] <dylanwh> thinkpads don't even have three mouse buttons any more. :(

[11:56] <rurban> Stands this for "No Limit Pro Wrestling" or "Nederlandse Perl Workshop"?

[11:56] <masak_grr> my stream went black

[11:56] <jdv79> craigslist?

[11:57] <FROGGS> the hall is getting quite full it seems

[11:57] <alpha-> I think he works there

[11:57] <alpha-> for some time now

[11:57] <jdv79> o

[11:57] <Kristien> yay audio

[11:57] <timotimo> dylanwh: the x1 carbon seems to

[11:57] <masak_grr> ah, got it back by restarting it

[11:57] <cdc> sound !

[11:57] <jdv79> audio?

[11:58] <timotimo> SOUND!

[11:58] <masak_grr> AUDIO?

[11:58] <cdc> not any more

[11:58] <FROGGS> NOISE!

[11:58] <moritz> wow, two streams in parallel seem to really straini my laptop's battery

[11:59] <moritz> it says 1h remaining, before I started them it said 3h

[11:59] <FROGGS> moritz: you might better plug in your a/

[11:59] <FROGGS> a/c*

[11:59] * masak_grr .oO( <laptop> that was before I know you were gonna do THAT )

[11:59] <timotimo> air conditioning?

[11:59] <[ptc]> what was the command in mplayer to refresh?  was it + or something?

[11:59] *** Alina-malina joined
[11:59] <FROGGS> timotimo: well, it can keep you warm

[12:00] <cdc> [ptc]: do you mean to resync a!v ?

[12:00] <cdc> a/v

[12:00] <cdc> it's "-" and "+"

[12:00] <[ptc]> cdc: probably....

[12:00] <[ptc]> cdc: cool, thanks :-)

[12:00] <colomon> stream keeps freezing on me.  :\

[12:00] <cdc> audio is back

[12:00] <tadzik> all these people kill the wifi

[12:00] <masak_grr> colomon: same

[12:01] <Kristien> only the slide stream is broken for me

[12:01] <timotimo> i don't think they are brave enough to be running their streaming setups over wifi

[12:01] * masak_grr got audio o/

[12:02] <colomon> arrr!

[12:02] <masak_grr> you too, huh?

[12:02] <alpha-> much lag

[12:02] <masak_grr> the suspense is killing me!

[12:02] <jdv79> man

[12:02] <timotimo> noooo why is the stream now lagging? >:(

[12:02] <colomon> yes, audio and/or video cutting out every five seconds or so

[12:03] *** denis_boyun left
[12:03] <cdc> hint: use "-vo null" agains jason_a with mplayer

[12:03] <cdc> *against

[12:03] <timotimo> god damn it, stream :(

[12:03] <pmichaud> room continues to fill up

[12:03] <[ptc]> come on stream!  you can do it!

[12:04] <tadzik> you know the talk is popular when wifi ping is measured in minutes

[12:04] <tadzik> (almost)

[12:04] <timotimo> is there any way to get a look at the slides, too?

[12:04] <cdc> timotimo: rtmp://stream-a.fosdem.org:1935/play/janson_b

[12:04] <timotimo> oh

[12:05] <timotimo> nice

[12:05] <timotimo> transparent windows <3

[12:05] * colomon gives up on the stream of TimToady and looks at the stream of the slides

[12:05] * alpha- . o O ( whats this all about )

[12:05] <timotimo> the slide stream doesn't do audio, right?

[12:05] <[ptc]> timotimo: no

[12:05] <colomon> right

[12:06] * masak_grr sticks to TimToady

[12:06] *** espadrine_ left
[12:06] <timotimo> now i have audio and a still frame

[12:06] <[ptc]> you have to do -vo null on the video stream

[12:06] <cdc> colomon: use can use "mplayer -vo null rtmp://stream-a.fosdem.org:1935/play/janson_a"

[12:06] <timotimo> and it seems the slide stream is kind of waaayyyy delayed from the other stream

[12:06] <colomon> I don’t have mplayer here.

[12:06] <mst> timotimo: sycnrhonisation is hard

[12:06] <cdc> timotimo: use vlc against janson_b, it works better than with mplayer

[12:06] <mst> ... apparently also hard to spell

[12:07] <cdc> vlc resync automatically

[12:07] <cdc> to sumup a good setup:

[12:07] <cdc> mplayer -vo null rtmp://stream-a.fosdem.org:1935/play/janson_a

[12:07] <cdc> vlc rtmp://stream-a.fosdem.org:1935/play/janson_b

[12:07] <cdc> enjoy :D

[12:07] *** _dolmen_ left
[12:07] <alpha-> listening to audio only is a good idea

[12:07] <alpha-> no slides anyway

[12:08] *** brrt joined
[12:08] <cdc> and restarts mplayer if it says: "Too many buffered pts"

[12:08] <brrt> TimToady++'s talks is nearly watchable

[12:08] <brrt> at least on vlc

[12:08] <colomon> _b way ahead of _a, yes?

[12:09] <cdc> not here

[12:09] <timotimo> i have no clue actually

[12:09] <timotimo> in what direction it goes

[12:09] <Kristien> I should give Catalyst a try.

[12:10] <brrt> well, i'm in EU, so that may help

[12:10] <timotimo> me, too

[12:10] <timotimo> i don't seem to be benefiting greatly from that, though

[12:10] <[ptc]> me neither...

[12:12] <gfldex> Larry's popularity exceeds the capacity of my intartubes :(

[12:13] <timotimo> i'm already seeing things about perl6 itself on the slide stream, but still hearing talk about tolkiens stories on the other stream >_<

[12:13] <tadzik> it's stll about tolkien

[12:14] <tadzik> or is it :)

[12:14] <Kristien> Oh, it assumes a diredtory layout

[12:14] <Kristien> nvm then

[12:14] *** nige joined
[12:14] <cdc> Perl 6 makes you travel in time

[12:14] <masak_grr> tadzik: the whole Tolkien universe is all just a metaphor for the Perl 6 project.

[12:16] <timotimo> what is a FNORK

[12:16] <Kristien> let's try PSGI

[12:16] <dg> https://mobile.twitter.com/davidgl/status/561859962276941824 -- taken from the very back row

[12:16] <masak_grr> timotimo: it's what you get when you combine "fnord" with a spork?

[12:17] <timotimo> oh, that's a nice big hall

[12:17] <masak_grr> with a nice Wall

[12:17] <timotimo> damn you, stream

[12:17] <timotimo> still frame on wall since a minute or so

[12:18] <timotimo> but the audio is stable

[12:18] <timotimo> when i restart mplayer, the video is animated again, but audio stutters

[12:18] <timotimo> and i'm pretty sure the slide stream is hanging, too

[12:18] <masak_grr> well, we know one thing as of today: when TimToady says "I've got something to say", people come to listen.

[12:18] * masak_grr .oO( schedule it, and they will come )

[12:18] <[ptc]> timotimo: have found mplayer -vo null on the video stream helpful

[12:18] <[ptc]> timotimo: and vlc for the slide stream

[12:19] <[ptc]> timotimo: at least it works atm ...

[12:21] *** rindolf joined
[12:22] *** brrt left
[12:23] <pmichaud> I'm suddenly reminded of the Higgs boson announcements at CERN :)

[12:23] <masak_grr> pmichaud: TimToady is using Comic Sans!?

[12:23] <masak_grr> that's it, it's Ruby for me.

[12:24] <masak_grr> :P

[12:24] <pmichaud> currently not comic sans.  :)

[12:24] <cdc> to stream viewers: _b is about 1 minute ahead of _a

[12:24] <cdc> juste pause _b for 1 minute :)

[12:25] * masak_grr looks forward to watching this again in a few weeks without the sound going all i-a-i-i-a-y.

[12:26] * colomon has to give up and get ready.  Somebody post a summary he can read it after rehearsasl?

[12:26] * [ptc] is looking forward to seeing ovid's and jnthn's talks with audio...

[12:26] <tadzik> colomon: I'll write you a tl;dr :)

[12:26] *** sqirrel left
[12:27] <masak_grr> colomon: people will probably mention this in the blogosphere :P

[12:27] * masak_grr checks what twitter is saying currently

[12:27] <timotimo> i can easily adjust audio/video delay, but not video/reality delay

[12:28] <moritz> pause reality?

[12:28] <masak_grr> DON'T DO IT

[12:29] <moritz> well, who would resume it? :-)

[12:30] <cdc> TimToady has started to talk about Perl 6 :)

[12:30] <timotimo> i remember a show on tv when i was a kid about a girl whose father was an alien and that meant she could freeze and thaw time for everyone except her by clapping or touching the tips of her fingertips

[12:30] <masak_grr> no!

[12:30] <[ptc]> only seeing "companions" the whole time... *sigh*

[12:31] *** rindolf left
[12:31] <moritz> [ptc]: restart your player

[12:31] <[ptc]> moritz: been there, done that :0/

[12:31] *** sivoais joined
[12:31] <pmichaud> the "companions" slide was up for a long time

[12:31] <[ptc]> now I have "eagles"

[12:31] <pmichaud> "moonlight"

[12:32] <pmichaud> I can give the slide words here :)

[12:32] <pmichaud> "the nick of time"

[12:32] <masak_grr> yes, please

[12:32] <[ptc]> ah, ok, now I think I've caught up :-)

[12:32] <timotimo> %)

[12:32] <pmichaud> "where it goes"

[12:32] <cdc> pmichaud: with 1 minute of delay, please :)

[12:32] <kjs_> I keep expecting to see some p5/p6 source code

[12:32] <timotimo> thank you, pmichaud 

[12:32] <[ptc]> pmichaud: and we need all the code ;-)

[12:33] <timotimo> but those are undelayed apparently?

[12:33] <[ptc]> pmichaud++

[12:33] <pmichaud> "when it goes"

[12:33] * masak_grr lost audio

[12:33] <timotimo> "skew me"

[12:33] <pmichaud> "BEGIN END"

[12:34] <pmichaud> "CHECK INIT"

[12:34] <timotimo> i seem to be exactly synchronized with pmichaud 

[12:34] <pmichaud> "ENTER LEAVE"

[12:34] <timotimo> with my slide stream

[12:34] <pmichaud> "KEEP UNDO"

[12:34] <pmichaud> "FIRST NEXT LAST CATCH"

[12:35] <gfldex> pmichaud is about 5 minutes ahead of my intartubes :)

[12:35] <masak_grr> yes, that sounds right.

[12:35] <masak_grr> my streamed TimToady just said "eagles".

[12:35] *** Kristien left
[12:35] <masak_grr> looking forward to hearing a lot about phasers in 5 minutes :)

[12:36] <pmichaud> constant fib = 0, 1, * + * ... *;

[12:36] <timotimo> "meeting gollum as he just lost his ring"

[12:36] *** alinbsp joined
[12:36] <timotimo> save the dwarves from burning trees

[12:36] <timotimo> rescue gandalf at least twice

[12:36] <masak_grr> bloody eagles

[12:36] <timotimo> "phases of activity"

[12:36] <pmichaud> (switching to live demo stream)

[12:36] <vendethiel> oooh, it works!

[12:37] <timotimo> it's a console!

[12:37] <El_Che> do you guys have video?

[12:37] <timotimo> yes

[12:37] <El_Che> fantastic!

[12:37] <timotimo> well, for some value of "have"

[12:37] <masak_grr> it's a bit timey-wimey wibbly-wobbly, but it's definitely video

[12:38] <vendethiel> yes, video + sound. somewaht

[12:38] <masak_grr> there's some kind of native American on my screen, talking about phasers. I'm confused.

[12:38] <vendethiel> wow, that's a big crowd to talk before

[12:38] <timotimo> the slide stream is reconnecting every few seconds it seems

[12:38] *** rmgk_ joined
[12:38] <vendethiel> how do I get audio, video *and* slides? :P

[12:38] <El_Che> I am *so* glad we move Larry from the devroom to the main track

[12:38] <timotimo> you don't

[12:38] *** rmgk left
[12:38] *** rmgk_ is now known as rmgk

[12:38] <vendethiel> there can only be one vlc :(

[12:39] <pmichaud> "lazy context"

[12:39] <masak_grr> El_Che: yes, that was clearly a wise thing to do.

[12:39] <pmichaud> "lazy exceptions"

[12:39] <vendethiel> I want to see the slides, but then I don't hear the sound. dang!

[12:39] <timotimo> hyper operators <3

[12:39] <kjs_> vendethiel: use mplayer for one stream, vlc for another

[12:39] <timotimo> vendethiel: well, you have to receive both streams at the same time, duh

[12:39] <pmichaud> "lazy lexers"

[12:39] <vendethiel> kjs_: currently on windows

[12:39] * vendethiel lost the slides stream

[12:40] <pmichaud> "ANNOUNCEMENT!"

[12:40] <masak_grr> don't shake the camera!

[12:40] <timotimo> still frame on larry again ;(

[12:40] <cdc> ANNOUCEMENT!

[12:40] <pmichaud> "Christmas"

[12:40] <El_Che> Christmas

[12:40] <masak_grr> o.O

[12:40] <masak_grr> five minutes into the future seems awesome...

[12:40] <tadzik> I though he's going to say "I disappear", like Bilbo :P

[12:40] <masak_grr> haha

[12:40] <timotimo> christmas is going to be actual christmas this time?

[12:41] <tadzik> in september:P

[12:41] <pmichaud> "2015"

[12:41] <masak_grr> o.O

[12:41] <[ptc]> yay, Christmas in September :-)

[12:41] <El_Che> big applause

[12:41] <timotimo> well, we'll have a bit more time to work on stuff then

[12:41] <vendethiel> did someone say september?

[12:41] * vendethiel only sees 2015

[12:41] <pmichaud> Yes, September.

[12:41] <tadzik> Larry said about beta

[12:41] <masak_grr> quick, grab him and drive him away in a black van!

[12:41] <El_Che> ok, guys, stop chatting and go back to work ;)

[12:41] <[ptc]> TimToady mentioned September earlier in the talk

[12:41] <pmichaud> September is consistent with hallway discussions here

[12:41] <pmichaud> "buses"

[12:42] <pmichaud> "volunteers"

[12:42] *** konsolebox left
[12:42] <pmichaud> "snapshot"

[12:42] <[ptc]> hearing about Fib numbers still...

[12:42] <El_Che> hey, guys, yoi have the right to die

[12:42] <El_Che> according to larry about delays :)

[12:42] <masak_grr> he's too kind

[12:42] <timotimo> "I ha ... a ... a ... ve ... an ... an ... nn .. nn .. ounce ... ent ... lbo ... ys"

[12:43] <pmichaud> "there can be only one"

[12:43] <[ptc]> timotimo: are you using vlc for video?

[12:43] <timotimo> no

[12:43] <tadzik> ooooh

[12:43] <tadzik> this is big

[12:43] <pmichaud> moarvm: first among equals :)

[12:43] <masak_grr> come on, stream!

[12:43] <timotimo> tadzik: i hope you're talking about a cake

[12:43] <tadzik> timotimo: no, big declarations

[12:43] <timotimo> oh

[12:44] <timotimo> like MY $foo?

[12:44] * masak_grr caught the tail end of the applause

[12:44] <tadzik> tl;dr it's okay to leave other VMs behind if they slow down progress

[12:44] <pmichaud> "part way there on performance"

[12:44] <timotimo> or SSUUBB foobar?

[12:44] <vendethiel> the slides stream is totally dying on me

[12:44] <timotimo> same here

[12:44] <pmichaud> "6.0"

[12:45] <masak_grr> o.O

[12:45] <pmichaud> "-Ofun"

[12:45] <vendethiel> alright, I guess I'll pass on being so happy with that amazing announcement, and watch the video at some point in the future :-à

[12:45] <vendethiel> s/à/)/

[12:45] <pmichaud> "coming of age"

[12:45] <timotimo> i completely missed jnthn's talk, didn't i? it was yesterday, corrects

[12:46] <vendethiel> timotimo: yes

[12:46] <vendethiel> did miss it too, because the stream was really bad quality

[12:46] <vendethiel> tadzik: I just got to that part, so -- how's the future?

[12:46] <timotimo> did jnthn put up his slides yet?

[12:46] <pmichaud> "GLR"

[12:47] <tadzik> vendethiel: looking good, more details

[12:47] <timotimo> yes GLR

[12:47] <masak_grr> on twitter: "Larry Wall says Perl 6 will be released by Christmas - THIS Christmas. Taking bets."

[12:47] <pmichaud> "NSA"

[12:47] <pmichaud> There should be an under/over on that :)

[12:47] <pmichaud> "NFG"

[12:49] <pmichaud> "I FAIL GOOD"

[12:49] <masak_grr> :)

[12:49] <timotimo> oh, huh

[12:49] <timotimo> i've always pronounced "preface" as "pre-face"

[12:49] *** FROGGS left
[12:49] <masak_grr> timotimo: English is wonky.

[12:49] <[ptc]> masak_grr: oh yes

[12:50] <timotimo> i'm pretty hype for the GLR still

[12:50] <[ptc]> man, the audio is waaay behind the slides

[12:50] <[ptc]> my audio just got to NSA...

[12:50] * [ptc] restarts

[12:51] <timotimo> restarting many times didn't help me sync up slides and video at all :(

[12:51] <cdc> we are still stuck 3 minutes in Larry's past :)

[12:51] <cdc> *3 minutes back

[12:52] <El_Che> He just announced that the september date was a joke and the release will be in april

[12:52] <El_Che> (just kidding ;) )

[12:52] <timotimo> oh che you so silly

[12:52] <[ptc]> maybe the release should be at Easter - then it could be an Easter Egg

[12:53] <timotimo> %)

[12:53] <timotimo> i personally am not very interested in a fully perl6-bootstrapped rakudo

[12:53] <timotimo> but since it'd have to mean our perl6 compilation has to be at least as efficient as the nqp compilation we have now ... that would be nice to me

[12:54] <pmichaud> applause applause applause some standing o's

[12:55] <cdc> "»ö« http://perl6.org"

[12:55] <cdc> "NO SIGNAL"

[12:55] <cdc> :D

[12:55] <timotimo> »ö«

[12:55] <pmichaud> yeah, I skipped the last slide.  :)

[12:55] <pmichaud> EOT

[12:55] <cdc> Thanks pmichaud++ !

[12:55] <masak_grr> pmichaud++

[12:55] <[ptc]> audio still coming through...

[12:55] <[ptc]> pmichaud++

[12:56] *** masak_grr is now known as masak

[12:56] <Ugator> when will it be on youtube?

[12:56] <timotimo> huh, it's suddenly over?

[12:56] <timotimo> i just restarted mplayer so that i could listen better

[12:56] <timotimo> turns out the hour is already over :o

[12:57] <timotimo> signs of a good speaker, i suppose :3

[12:57] <btyler> just ended a minute ago

[12:57] <timotimo> there's a pretty person right in front of the camera

[12:57] <rurban> I'm still at 52:40 in vlc

[12:57] <masak> Ugator: that's a good question but not usually possible to answer with any certainty.

[12:57] *** KPTN joined
[12:58] <btyler> great talk, the message was just right. TimToady++

[12:58] <Ugator> sure:) so no one here has the original recording?

[12:58] <rurban> a fully perl6-bootstrapped rakudo would have a much easier to debug compiler

[12:59] <cdc> Ugator: last year it took 5 to 10 days to get the recordings on http://video.fosdem.org

[12:59] *** manab left
[12:59] *** clement joined
[12:59] *** KPTN left
[13:00] <jdv79> just ended here

[13:00] <jdv79> nice

[13:02] *** diana_olhovik joined
[13:03] <masak> we might need full Perl 6 bootstrapping for everything we want to do with macros. the jury is still out on that one.

[13:04] <arnsholt> Would definitely make things easier, yeah

[13:05] <timotimo> OK

[13:05] <masak> right. same reasons 6model bootstraps, basic'ly.

[13:05] <arnsholt> But I'd hope access to the compiler pipe-line will make most things possible

[13:06] *** rindolf joined
[13:06] <masak> that, too.

[13:06] *** diana_olhovik left
[13:10] *** diana_olhovik joined
[13:10] *** Kristien joined
[13:11] *** clement left
[13:12] <Woodi_> it is a bit silly to stream slides :) but presenter uploading slides up fron is no-no too (ruined announcements...)  some html pages with PUSH button in front of presenter would be nice...

[13:13] <timotimo> let's invent Yet Another Solution!

[13:13] <Woodi_> timotimo: yea ! :)

[13:14] *** diana_olhovik left
[13:14] <Kristien> I like what InfoQ does with slides.

[13:15] <Kristien> but those aren't livestreams

[13:17] <vendethiel> Kristien: agreed.

[13:22] <moritz> aye

[13:22] <masak> I realize I haven't been to SlashDot for ages. but now I'm visiting the place just to see if the Perl 6 announcement will show up there.

[13:22] <timotimo> do you really want to go to that place?

[13:23] <moritz> it's just a bit rusty, otherwise not too bad

[13:23] *** diana_olhovik joined
[13:23] <moritz> ... until you read the comments :-)

[13:23] <timotimo> i thought those sites were mostly about the comments ...

[13:23] <masak> yes. I have enjoyed SlashDot quite a bit over the years. I seem to have fallen out of the habit, but I don't really see how it's worse then, say, reddit or HN.

[13:23] <masak> even the comments are OK if you just stay above a certain score threshold.

[13:24] <timotimo> HN is terrible, too :)

[13:24] <moritz> http://science-beta.slashdot.org/story/15/02/01/0058237/physicists-make-a-mobius-strip-from-beams-of-light was done a by good friend of mine, btw

[13:24] <timotimo> reddit is a very mixed bag, depending on where you end up

[13:24] <moritz> I mean the science, not the article

[13:24] <masak> moritz: next up: Klein bottle from beams of light!

[13:25] <timotimo> it took me quite a bit of restraint to not make that comment, moritz :)

[13:25] <masak> moritz: (just take two Möbius strips made of light and glue them together)

[13:25] <moritz> :-)

[13:28] <timotimo> "light glue" is glue with reduced fat and sugar contents?

[13:29] <masak> no, it's the cheerful version of dark glue

[13:29] *** denis_boyun joined
[13:30] *** raiph left
[13:30] *** diana_olhovik left
[13:31] *** raiph joined
[13:32] *** rindolf left
[13:32] *** FROGGS joined
[13:34] *** denis_boyun left
[13:38] <nine> I'm trying to embed libmoar, but I then get "Unhandled exception: failed to load library '/home/nine/install/rakudo/install/languages/perl6/runtime/dynext/libperl6_ops_moar.so'". Any idea what I'm doing wrong?

[13:38] <masak> m: class Foo { has Hash of Hash $.foo = {} }; Foo.new

[13:38] <camelia> rakudo-moar 6e182d: OUTPUT«Type check failed in assignment to '$!foo'; expected 'Hash[Hash]' but got 'Hash'␤  in block  at src/gen/m-CORE.setting:1023␤  in method BUILDALL at src/gen/m-CORE.setting:978␤  in method bless at src/gen/m-CORE.setting:966␤  in method new at src/ge…»

[13:39] * masak resolves #116212

[13:39] * synopsebot Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=116212

[13:40] <FROGGS> nine: perhaps you have to preload that perl6_ops library

[13:44] *** Colomon_ joined
[13:45] <Colomon_> So the tl;dr is September release, maybe just of moar?

[13:46] <FROGGS> Colomon_: that seems to be the plan

[13:46] <tadzik> it's possible

[13:46] *** manav joined
[13:46] <nine> September beta release, Christmas 6.0.0

[13:46] *** Colomon_ left
[13:48] <masak> what will 6.0.0 mean in practice? how will the world be different after that?

[13:48] *** jschulz_ is now known as jschulz

[13:49] <FROGGS> masak: that depends on the reaction of the world I suppose

[13:49] <vendethiel> masak: does the world need to be different?

[13:49] <vendethiel> I'm fairly happy with the world in its current state (ok, I'm kidding)

[13:49] <FROGGS> but, for us it means that we perhaps have to be more about backwards compatibility

[13:49] <masak> vendethiel: it's an allowed answer to say "it won't be different"

[13:49] <vendethiel> masak: I'm Mu-ing your question, asking why that question :P

[13:50] *** brrt joined
[13:50] <masak> yes, got it.

[13:50] *** FROGGS left
[13:50] <masak> I'm pretty sure the difference for *me* will be fairly minimal, but only because I became an avid Perl 6 user long ago.

[13:53] *** FROGGS[mobile] joined
[13:54] <tadzik> hmm, "Too few/many positionals passed" is an X::AdHoc. Unexpected

[13:54] <tadzik> any reason why it doesn't have its type? moritz?

[13:55] <masak> the answer is probably "patches welcome"

[13:55] <tadzik> time to get to work then :)

[13:55] *** grondilu joined
[13:57] <tadzik> oh, it's at Moar level

[13:57] <grondilu> jeez why such high resolution for the FOSDEM livestream.  I can't watch that properly on my machine :(

[13:58] <tadzik> that probably makes it trickier

[13:59] <grondilu> I mean 1920x1088 come on, there is no need for that many pixels.

[14:00] *** _dolmen_ joined
[14:00] <sjn> \o

[14:01] <tadzik> oh hai sjn 

[14:01] <sjn> tadzik: where's everyone hanging out, btw? :)

[14:02] <tadzik> sjn: I'm in Jonsomething hall, on the typesetting talk

[14:02] <sjn> aah

[14:02] <sjn> Simon Cozen's thing

[14:02] <tadzik> I thinkmost of the 6folks are here

[14:02] <tadzik> yes

[14:03] *** manav left
[14:06] *** jschulz left
[14:08] *** rindolf joined
[14:14] <vendethiel> what's the current talk?

[14:15] <arnsholt> nine: Regarding the so loading, basically what FROGGS said. You need to make sure the so file is in the search path of the dynamic linker when your app with the embedded moar runs

[14:16] <tadzik> vendethiel: https://fosdem.org/2015/schedule/event/introducing_sile/

[14:18] <vendethiel> thanks

[14:19] *** sqirrel joined
[14:19] <nine> One step further: /home/nine/install/rakudo/install/languages/perl6/runtime/dynext/libperl6_ops_moar.so: undefined symbol: MVM_frame_inc_ref

[14:21] <grondilu> ok it seems to work not too bad with a proper filter:  mplayer -vf scale=800:-2 http://stream-a.fosdem.org:80/janson_a.flv

[14:23] <arnsholt> nine: When does that happen_

[14:23] <arnsholt> s/_/?

[14:23] * grondilu spoke too fast, increases cache

[14:24] *** muraiki_ joined
[14:24] *** brrt left
[14:26] <nine> Ok, If I LD_PRELOAD libmoar.so, it works. So I guess I have not made it sufficiently clear to Inline::C that I need to link libmoar.so

[14:27] <arnsholt> Yeah. That's what the error message made me think as well

[14:27] <arnsholt> Definitely looked like the moar lib wasn't loaded

[14:33] *** zebardy joined
[14:33] *** _dolmen_ left
[14:39] <nine> According to ldd, my .so is actually linked to libmoar.so:

[14:39] <nine> ldd /home/nine/Inline-Perl6/_Inline/lib/auto/Inline/Perl6_a71e/Perl6_a71e.so  linux-vdso.so.1 (0x00007fffa751d000) libmoar.so => /home/nine/install/rakudo/install/lib/libmoar.so (0x00007f4b036c5000)

[14:46] *** telex left
[14:47] <tadzik> sjn: plans for the next talk?

[14:47] <FROGGS[mobile]> what are we going to do now?

[14:48] <tadzik> hallway track? :)

[14:48] *** telex joined
[14:48] <tadzik> K building is always fun

[14:49] <FROGGS[mobile]> the booth, aye

[14:50] *** raiph left
[14:53] *** kjs_ left
[14:53] *** FROGGS[mobile] left
[14:55] <nine> jnthn: you around?

[14:56] <nine> Does anyone know where I might find jnthn?

[14:56] <vendethiel> nine: around FOSDEM? *g*

[14:57] *** rurban1 joined
[14:57] *** dj_goku joined
[14:57] *** dj_goku left
[14:57] *** dj_goku joined
[14:58] <Kristien> does moarvm use a stock GC or a custom one?

[14:58] <gfldex> custom

[15:04] <masak> there are stock GCs? o.O

[15:04] <pmichaud> nine:  jnthn is in the main talks room (sitting next to me)

[15:05] *** rurban1 left
[15:05] *** rurban1 joined
[15:05] *** FROGGS[mobile] joined
[15:07] *** rindolf left
[15:08] <Kristien> masak: there is Boehm

[15:09] <masak> ok, TIL

[15:12] <Woodi_> in September we can expect beta probably. but look what Perl6 did to spec and developmen time! imagine what could happen to the deadline date! ;)

[15:12] <masak> I'm imaginig a buncha git commits

[15:13] <Woodi_> it's technical detail :)

[15:13] <Woodi_> but moar is embaddable ??

[15:15] *** kjs_ joined
[15:16] *** skids joined
[15:17] *** Kristien left
[15:20] <grondilu> ok, it's official:  the FOSDEM livestream sucks.

[15:21] *** Oe_eden left
[15:23] *** FROGGS[mobile] left
[15:23] *** Arma joined
[15:24] *** Arma left
[15:24] *** rindolf joined
[15:25] *** raiph joined
[15:26] *** rurban left
[15:26] <vendethiel> :(

[15:27] *** zakharyas joined
[15:27] *** zebardy left
[15:30] *** BenGoldberg joined
[15:32] *** FROGGS[mobile] joined
[15:36] *** FROGGS[mobile] left
[15:42] *** kjs_ left
[15:46] * [Tux] is back home, leont slept the complete journey :)

[15:52] *** gfldex left
[15:54] <rindolf> [Tux]: meow!

[15:55] *** kaare_ left
[15:56] *** sqirrel left
[15:57] * skids wonders how long it takes a 3-liter bottle of cola to melt at room temperature.  And wants caffeine.

[15:58] *** grondilu left
[15:58] <skids> But if I open that bottle now, it will be nothing but foam and misery.

[16:00] *** spider-mario left
[16:07] <pierrot> Good afternoon. Has TimToady's talk been uploaded somewhere ? I couldn't watch it this morning.

[16:11] <vendethiel> pierrot: not yet. wait a few weeks

[16:25] *** molaf joined
[16:25] <masak> still nuthin' on Slashdot.

[16:31] <masak> and here I was looking forward a bit to reading lame comments about DNF and the Hurd...

[16:32] <ugexe_> can i iterate over a parse-tree (of type NQPMatch) without parsing the entire thing as a string? For instance, if i wanted to look for every instance of (in its dumped form) `'sym: use' 'module_name: (.*?)'` (*realizes how helpful perl6 object introspection is*)

[16:32] *** LLamaRider joined
[16:34] <masak> ugexe: sounds like a job for a well-placed multi sub.

[16:35] <masak> (a recursive one, that knows how to descend an NQPMatch)

[16:44] <ugexe> hmm maybe im going about my goal the wrong way. for trying to extract dependencies of a script, does looking at the QAST make sense (so I dont have to rely on my own regex to parse source code)?

[16:45] *** alinbsp left
[16:47] *** fil_ joined
[16:47] <fil_> hey

[16:47] <yoleaux> 06:38Z <moritz> fil_: IMHO it's best practice to put each class that is publicly accessible into a separate class. As for rest, use your best judgement :-)

[16:48] <fil_> I'm using Padre to run my perl6 script.  But it's not finding my own modules in ./lib.  What's best practice around this stuff?

[16:49] <fil_> in Eclipse, there's a concept of a project that has a classpath.  Does Padre have anything like this?

[16:49] <ugexe> use lib 'lib', or add -Ilib to its perl6 cmd line invocation

[16:49] * ugexe doesnt use padre, i just assume you can change the perl6 target command

[16:50] <fil_> all the online modules stick their submodules in "lib."  I assumed this meant there is a convention on perl6 that lib is automatically added to @INC

[16:50] *** espadrine_ joined
[16:50] <fil_> what IDE do you use?

[16:50] <ugexe> no, what if you want to use the installed module?

[16:50] <ugexe> i use sublime text

[16:51] <ugexe> also what if you want to test blib and not lib

[16:51] <ugexe> thats why you have to explicity include them

[16:51] <pierrot> vendethiel: thanks

[16:51] <ugexe> i.e. perl6 -Ilib t/00-basic.t

[16:52] <itz_> hmm warning to anyone just googling "La Bécasse" .. there are two and the correct one is by ULB

[16:52] <ugexe> perl6 t/00basic.t would make any modules loaded by 00basic.t be from installed versions

[16:54] *** anaeem1 joined
[16:55] *** konsolebox joined
[17:03] *** Kristien joined
[17:05] *** anaeem1 left
[17:06] *** anaeem1_ joined
[17:10] *** anaeem1_ left
[17:12] *** konsolebox left
[17:13] *** espadrine_ left
[17:13] <skids> r: role A does Positional { has @!children handles 'postcircumfix:<[ ]>'; }; my $tree = A.new; $tree[0] = 1; # RT#68138 code now golfs to this so it is no longer a parametric type problem.

[17:13] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=68138

[17:13] <camelia> rakudo-parrot 6e182d: OUTPUT«Cannot modify an immutable value␤  in method assign_pos at gen/parrot/CORE.setting:2093␤  in method assign_pos at gen/parrot/CORE.setting:2084␤  in sub postcircumfix:<[ ]> at gen/parrot/CORE.setting:3298␤  in sub postcircumfix:<[ ]> at gen/parrot…»

[17:13] <camelia> ..rakudo-moar 6e182d: OUTPUT«Cannot modify an immutable A␤  in method assign_pos at src/gen/m-CORE.setting:2083␤  in sub postcircumfix:<[ ]> at src/gen/m-CORE.setting:3287␤  in block <unit> at /tmp/tmpfile:1␤␤»

[17:13] *** anaeem1 joined
[17:15] *** FROGGS[mobile] joined
[17:15] <hzhou321> Is there any one who do not like perl6's regex syntax as much as perl5's?

[17:16] <moritz> hzhou321: with the number of people out there, I would be surprised if *everyone* liked the Perl 6 syntax better

[17:16] <skids> hzhou321: not sure it is implemented yet, but yes.

[17:17] <FROGGS[mobile]> hzhou321: unlikely... I mean, compare non-capturing groups, positive and negative lookahead of both

[17:17] <hzhou321> moritz: but I need to know whether it is my problem to conquer.

[17:17] *** Bucciarati joined
[17:17] <FROGGS[mobile]> m: say "foo" ~~ m:p5/foo/

[17:17] <camelia> rakudo-moar 6e182d: OUTPUT«===SORRY!=== Error while compiling /tmp/_AgZtd5KvI␤Adverb p5 not allowed on m␤at /tmp/_AgZtd5KvI:1␤------> say "foo" ~~ m:p5/foo/⏏<EOL>␤»

[17:18] <FROGGS[mobile]> grrr

[17:18] <moritz> m: say 'foo' ~~ rx:Perl5/foo/

[17:18] <camelia> rakudo-moar 6e182d: OUTPUT«｢foo｣␤»

[17:18] <moritz> m: say 'foo' ~~ m:Perl5/foo/

[17:18] <camelia> rakudo-moar 6e182d: OUTPUT«｢foo｣␤»

[17:19] <skids> m: say "foo" ~~ m:P5/foo/

[17:19] <camelia> rakudo-moar 6e182d: OUTPUT«｢foo｣␤»

[17:19] <moritz> hzhou321: if there is a problem, it's most likely yours to conquer, yes

[17:19] <skids> That's what the spec says.

[17:19] *** pmurias joined
[17:19] *** FROGGS[mobile]2 joined
[17:20] <hzhou321> moritz: taking that answer, I wouldn't really have any self-esteem :)

[17:20] <pmurias> is Perl 6 really planned for official release this christmas?

[17:21] *** LLamaRider left
[17:21] <moritz> pmurias: that's what TimToady said, yes

[17:21] <FROGGS[mobile]2> pmurias: don't has to be christmas, but yeah, this year

[17:22] <hzhou321> FROGGS: non-capturing groups, positive and negative lookahead is a bit awkard in perl 5, but on the other hand, they are not used often. And when they are used, they are often logically complex and it requires some comments anyway.

[17:22] <FROGGS[mobile]2> hzhou321: not so in P6

[17:22] *** FROGGS[mobile] left
[17:23] <FROGGS[mobile]2> I use them more often, because I can easier do so

[17:23] <geekosaur> I find I use non-capturing groups more often than captiring groups in p5

[17:23] *** FROGGS[mobile]2 left
[17:23] <geekosaur> but the syntax is awkward, which I am glad is fixed in p6

[17:23] <pmurias> is it just an estimate when it will be decently usable or are there any more specific plan for achiving that?

[17:23] <hzhou321> So I gather that every one here all prefers perl6's regex syntax to perl5's?

[17:24] <geekosaur> pretty much, yes

[17:24] <moritz> hzhou321: it takes a while to get used to if you've done a lot of perl/pcre regex

[17:24] <moritz> hzhou321: but it's totally worth it

[17:24] <geekosaur> p5's regex syntax is based on the original regex syntax, which has been twisted well beyond what it was originally intended to do

[17:24] <geekosaur> p6 reimagined regex syntax to be easier to understand and more convenient

[17:24] <moritz> hzhou321: not just the syntax, but also the possibilities for modularization

[17:25] <geekosaur> (perl isnt even the only thing that twistred the original regex syntax; traditional unix had a bunch of regex variants which POSIX boiled down to two main ones)

[17:25] <hzhou321> geekosaur: the original regex syntax is logically simple and I never need to re-learn even before Perl. Perl6's is like an new realm.

[17:26] <geekosaur> um, you've never had BRE vs. ERE confusion?

[17:26] <pmurias> hzhou321: yes, but it offer a bunch of possibilities

[17:26] <geekosaur> never had to deal with variant regex implementations like p5 vs. PCRE?

[17:26] <hzhou321> geekosaur: I avoid them, and it works for me.

[17:26] <geekosaur> you're very lucky if you can avoid them

[17:27] <masak> mdk++ blogged: http://blogs.perl.org/users/shadowcat_mdk/2015/02/fosdem-2015-its-christmas.html

[17:27] <geekosaur> I end up providing a lot of regex support, with BRE vs. ERE and PCRE vs. ERE vs. other variants, on some other channels

[17:27] <hzhou321> I use m/.../gcx a lot for complicated cases when full parsing is required

[17:27] <masak> and we have HN comments (currently empty): https://news.ycombinator.com/item?id=8980387

[17:28] <geekosaur> maybe you can just decree that everything shall be done in perl5 past some particular version that guarantees the existence of certain features. most people don't have that luxury

[17:28] *** FROGGS[mobile] joined
[17:28] <geekosaur> and, frankly, old style regex is a cesspool

[17:28] <geekosaur> long past time someone dumped chlorine in it

[17:29] <jdv79> Perl6 v1.0 - nice.  how about 6.0 or 6.0.0 like in reality.

[17:30] <FROGGS[mobile]> that's what I'd like to call it too

[17:31] <fil_> I'm just about ready to give up on perl6

[17:31] <fil_> Soooo disappointed

[17:31] <jdv79> you might be in the wrong chan then;)

[17:31] <fil_> For me the nail in the coffin is no IDE that lets me run tests

[17:31] <fil_> That's a showstopper

[17:32] <jdv79> that's a lame reason but ok

[17:32] * geekosaur generally thinks need for an IDE is a language smell

[17:33] <hzhou321> I agree with geekosaur. But with perl, you can whip up quick automation easily anyway.

[17:33] <fil_> I'm a hardcore perl fanboy.  I helped put one of the first newspapers of record in the world on the Internet using perl.  perl's recent assension on the TIOBE index got my hopes up.  But the tooling just isn't there.

[17:33] <Kristien> geekosaur: http://youtu.be/LH75sJAR0hc?t=10m12s

[17:34] <jdv79> fil_: maybe you could pen a ticket or an article or a blog post

[17:34] <jdv79> someone might be able to look into it eventually

[17:34] <hzhou321> Kristien: I like this guy :)

[17:34] <geekosaur> I will also note that if your criteria for a successful language include maturw tooling out of the box, then you will never be able to adopt any new language or technology

[17:34] <Kristien> yeah he's incredibly funny

[17:35] <fil_> Mature tooling is a sign of language adoption.

[17:35] <geekosaur> and the world will leave you behind, safely boxed in by your ancient tooling

[17:35] <geekosaur> that's still an impossible loop

[17:35] <fil_> Lack of tooling tells me that nobody except a few old vim hardcores is actually using perl6 for meaningful work.

[17:35] <geekosaur> it has to be adopted in order for it to ever be adopted?

[17:36] <Kristien> there are still languages that are widely adopted and still have no decent tooling whatsoever

[17:36] <pmurias> Kristien: listening to that guy for me is more annoying than tracking down segfaults in generated code

[17:36] <jdv79> that might be true cause its not mature yet

[17:36] <geekosaur> again, this leads to never being able to adopt anything new

[17:36] <jdv79> but you could help by enumerating exactly what you might like to have

[17:36] <fil_> Maybe it's just too early.  I was under the impression that perl6 has been out for a while.

[17:36] <geekosaur> uh, no

[17:37] *** FROGGS[mobile] left
[17:37] <pmurias> fil_: not in a useful form

[17:37] <geekosaur> there is no formal release yet, we're hoping for one sometime this year

[17:37] <fil_> oh ok

[17:37] <fil_> well my criticism is premature then

[17:37] <fil_> I'll check back in a couple of years.

[17:37] <fil_> I need a tool I can use today.

[17:37] <geekosaur> there are prereleases of various kinds, which one can typically expect to be played with by some folks but nobody's going to do anything serious with them

[17:37] <fil_> The Grammar / Actions stuff is amazing!

[17:37] <jdv79> yeah, didn't you hear?  the attempt is for 6.0 release on 2015-12-25:)

[17:37] <pmurias> but currently in terms of tooling we are not yet on 5.0.0 level

[17:38] *** xinming joined
[17:38] <pmurias> as writing Makefiles by hand is required :(

[17:38] <muraiki_> elixir has some incredible tooling for a new languge

[17:38] <fil_> I'm used to my IDE managing build paths, running tests etc.

[17:39] <fil_> Does perl6 even have a concept of a project?  Is there an equivalent of a "pom" file for perl6?

[17:39] <geekosaur> indeed, a formal release will make better tooling *possible* because there will finally be something that isn't likely to change radically at the drop of a hat

[17:39] <geekosaur> (we still have the GLR pending, right?)

[17:39] <jdv79> yes

[17:39] <jdv79> pmichaud said he'll shoot for march

[17:39] <fil_> While I'm waiting for an IDE, how should I run my tests?

[17:39] <moritz> ufo && make test

[17:39] <fil_> Does everyone just run their tests commandline?

[17:39] <Kristien> pmurias: I don't have that problem, since I don't have segfaults.

[17:40] <moritz> https://github.com/masak/ufo/

[17:40] <ugexe> prove -e 'perl6 -Ilib' t/ or just 'perl6 -Ilib t/file.t'

[17:40] * masak confesses that he does not use ufo much these days

[17:40] *** xinming_ left
[17:41] <moritz> PERL6LIB=lib prove -e perl6

[17:41] <jdv79> masak: what do you use?

[17:41] <moritz> PERL6LIB=lib prove -e perl6 t/

[17:41] <masak> I used it when compilation times were a big problem, and figuring out the compilation order mattered to bring the time down.

[17:41] <masak> jdv79: I use `prove -e 'perl6 -Ilib' -r`

[17:42] *** FROGGS[mobile] joined
[17:42] * masak should make a one-letter alias for that

[17:43] <pmurias> masak: ufo figures out in which order it should do precompilation?

[17:43] <masak> yes, that was its core feature once upon a time.

[17:43] <moritz> it doesn't anymore, though

[17:43] <moritz> it merely extracts dependencies

[17:44] <moritz> and lets 'make' figure out the order

[17:44] <pmurias> hopefull automatic precompilation is a part of 6.0.0 requirements

[17:44] <fil_> t\FormatQFX.t .. ''perl6' is not recognized as an internal or external command, operable program or batch file.

[17:44] <fil_> when I run prove -e 'perl6 -Ilib' t/

[17:44] *** anaeem1 left
[17:44] <masak> works here.

[17:44] <pmurias> do you have perl6 installed?

[17:45] <moritz> fil_: seems your perl6 is either not installed, or not in $PATH/%PATH

[17:46] <fil_> perl6 works commandline

[17:47] <fil_> it's installed

[17:47] <fil_> damn gtg

[17:47] <fil_> thanks for your help!

[17:47] *** FROGGS[mobile] left
[17:47] <ugexe> try double quotes depending on your OS

[17:47] <moritz> or if you don't run it through the shell, make sure that your launcher has the same environment as the shell

[17:49] <moritz> tadzik: most binder errors are X::AdHoc because the binders are backend specific, and thus hard / much work to port to typed exception

[17:52] *** FROGGS[mobile] joined
[17:55] *** atroxaper left
[17:55] *** rurban joined
[17:57] *** kurahaupo1 joined
[17:57] <vendethiel> hzhou321: coming in a bit late, if I had to choose, the simple fact that grammars exist would sell me on p6's syntax

[17:57] <vendethiel> I admit I don't know p5's regexes, I only know "PCRE" (the subset that every language, or almost, has, but often means no named captures (though ruby has them, yay))

[17:57] * vendethiel saw a talk at fpw14 about those and was impressed, but scared at the same time

[17:58] <Kristien> PCRE is good.

[17:59] <rurban> no named captures and unicode names, but it is jitted

[18:02] <jdv79> reaaly?  i've generally found the recent p5 re engine very fast

[18:02] *** alinbsp joined
[18:02] <jdv79> just mean i'm not sure jitting that would make much difference; to the cases i've seen

[18:03] *** FROGGS[mobile] left
[18:03] *** Vlavv_ joined
[18:03] <Kristien> But PCRE has support for Unicode right?

[18:03] <Kristien> I will most likely use it soon.

[18:04] *** andreoss joined
[18:10] *** FROGGS[mobile] joined
[18:17] *** prime joined
[18:18] <rurban> Sure

[18:18] *** FROGGS[mobile] left
[18:19] <rurban> UTF-8/16/32 encodings and  Unicode general  category  properties, However not our name aliases

[18:19] <rurban> It also contains a faster non-backref matcher (as in re2)

[18:21] <masak> inspired by Russ Cox's article?

[18:21] <fil_> ugexe: thanks you were right, it was the quotes

[18:22] <masak> http://swtch.com/~rsc/regexp/regexp1.html

[18:22] <rurban> probably. he was not the first, but the most prominent

[18:23] <rurban> and perl5 still has no simple backref detector to fallback to the faster version

[18:25] *** raiph left
[18:25] *** FROGGS[mobile] joined
[18:28] *** FROGGS[mobile] left
[18:28] <Kristien> rurban: nice

[18:36] <fil_> How do I get Grammar.parsefile to use relative paths?  It only ever works with absolute paths on filenames

[18:40] <Kristien> make the path absolute

[18:43] <fil_> If i publish a module, I can't use absolute paths

[18:43] <fil_> all the online examples use relative paths

[18:43] <fil_> there must be some way to get perl6 to know where you are

[18:43] <moritz> fil_: it works on relative paths, relative to the current working directory

[18:43] <moritz> m: say $*CWD

[18:43] <camelia> rakudo-moar 6e182d: OUTPUT«"/home/camelia".IO␤»

[18:44] <flussence> std: sub foo(Pair (:key($a), :value($b))) { say $a + $b } # Are any of these parens removable? Code works but it looks icky...

[18:44] <camelia> std f9b7f55: OUTPUT«ok 00:01 142m␤»

[18:45] <moritz> m: grammar A { token TOP { (. ** 10) .*? } }; say ~A.parsefile('evalbot.log')[0]

[18:45] <camelia> rakudo-moar 6e182d: OUTPUT«use of uninitialized value $v of type Any in string context  in block <unit> at /tmp/OrS_EGaU1L:1␤␤␤»

[18:45] <fil_> got it.  just realized that cwd is parent of t/ when running tests

[18:45] <vendethiel> fil_: cwd is "where you ran the command", usually :o)

[18:46] <moritz> ... unless somebody chdir()ed or assigned to $*CWD

[18:46] <flussence> fil_: if you want to know where your module is, use $?FILE

[18:46] <moritz> m: say $?FILE

[18:46] <camelia> rakudo-moar 6e182d: OUTPUT«/tmp/8Z_xUrlJMN␤»

[18:49] *** _dolmen_ joined
[18:53] <fil_> nice.  I like $?FILE much better.  thanks!

[18:56] <Kristien> m: say say.WHAT

[18:56] <camelia> rakudo-moar 6e182d: OUTPUT«===SORRY!=== Error while compiling /tmp/0sSacchkfa␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument␤at /tmp/0sSacchkfa:1␤------> say say⏏.WHAT␤ …»

[18:58] <raydiak> std: sub foo(Pair (:$key, :$value)) { say $key + $value } # flussence: if you can rename $a and $b, this is somewhat more readable

[18:58] <camelia> std f9b7f55: OUTPUT«ok 00:01 142m␤»

[18:58] <raydiak> good morning #perl6

[19:00] <fil_> can perl6 classes have private methods?

[19:00] <raydiak> fil_: yes, just start the method name with a !

[19:01] <fil_> thanks.  that should probably be mentioned on http://doc.perl6.org/language/classtut

[19:05] <raydiak> it's at https://github.com/perl6/doc/blob/master/lib/Language/classtut.pod if you want to help us improve it, or even just file issues

[19:10] <raydiak> m: say say('').WHAT; say &say.WHAT

[19:10] <camelia> rakudo-moar 6e182d: OUTPUT«␤(Bool)␤(Sub)␤»

[19:11] *** zakharyas left
[19:11] <Kristien> :O

[19:11] *** colomon left
[19:12] <masak> "From the bottom of my heart, thank you. I have been keenly looking forward to this for a long, long time." -- http://blogs.perl.org/users/shadowcat_mdk/2015/02/fosdem-2015-its-christmas.html#comment-1536111

[19:13] *** colomon joined
[19:18] * masak <3 .classify

[19:18] *** Mouq joined
[19:18] <colomon> masak wants to classify things less than 3?

[19:19] * masak 😻 .classify

[19:20] *** anaeem1_ joined
[19:20] <flussence> .oO( my terminal emulator doesn't support cat :( )

[19:21] *** Rounin left
[19:21] <vendethiel> .oO( but does it support 😻 ? )

[19:24] <Kristien> m: '😻'.classify.say

[19:24] <camelia> rakudo-moar 6e182d: OUTPUT«Cannot call 'classify'; none of these signatures match:␤:(Any $: Any $test, *%_)␤:(Any $: Any $test, Any :into($into)!, *%_)␤  in block <unit> at /tmp/Jtb5GTs13y:1␤␤»

[19:24] <masak> m: say {}.perl

[19:24] <camelia> rakudo-moar 6e182d: OUTPUT«{}␤»

[19:24] <Kristien> m: '😻'.perl.say

[19:24] <camelia> rakudo-moar 6e182d: OUTPUT«"😻"␤»

[19:24] <masak> m: say (1, 2, 3).classify(+*)

[19:24] <camelia> rakudo-moar 6e182d: OUTPUT«1 => 1, 2 => 2, 3 => 3␤»

[19:24] <Kristien> m: say {}.WHAT

[19:24] <camelia> rakudo-moar 6e182d: OUTPUT«(Hash)␤»

[19:24] <masak> m: say (1, 2, 3).classify(+*).perl

[19:24] <camelia> rakudo-moar 6e182d: OUTPUT«Hash[Any,Any].new(1 => [1], 3 => [3], 2 => [2])␤»

[19:24] <Kristien> How do you make the empty block?

[19:24] <Kristien> m: say ->{}.WHAT

[19:24] <camelia> rakudo-moar 6e182d: OUTPUT«(Block)␤»

[19:25] <raydiak> m: say {;}.WHAT # probably works too

[19:25] <camelia> rakudo-moar 6e182d: OUTPUT«(Block)␤»

[19:26] *** colomon left
[19:27] <Kristien> m: say { Nil }.WHAT

[19:27] <camelia> rakudo-moar 6e182d: OUTPUT«(Block)␤»

[19:27] <masak> why do we prefer `Hash[Any,Any].new(1 => [1], 3 => [3], 2 => [2])` in .perl over `{ 1 => [1], 3 => [3], 2 => [2] }` ?

[19:27] <Kristien> m: say (->{})().perl; say ({ Nil })().perl

[19:27] <masak> something to do with item context?

[19:27] <camelia> rakudo-moar 6e182d: OUTPUT«Nil␤Nil␤»

[19:29] <raydiak> well, a hash literal from  { ... } isn't a Hash[Any,Any], is it?  Hash[Str,Any], I thought

[19:29] <masak> hm, wait. Hash[Any,Any] isn't the default. Hash[Str,Any] is.

[19:29] <masak> raydiak: right.

[19:29] <masak> just realized.

[19:29] <raydiak> maybe it should do :{ ... } instead?

[19:29] <raydiak> in the specific case of [Any,Any], of course

[19:29] <Kristien> maybe it complicates nesting in other .perl methods from other types

[19:31] <raydiak> m: say :{ 1 => 2 }.perl

[19:31] <camelia> rakudo-moar 6e182d: OUTPUT«:{1 => 2}␤»

[19:31] <raydiak> hm

[19:32] *** kjs_ joined
[19:32] <masak> m: sub &foo() {}; say "alive"

[19:32] <camelia> rakudo-moar 6e182d: OUTPUT«===SORRY!=== Error while compiling /tmp/GE7JBiJGWP␤Missing block␤at /tmp/GE7JBiJGWP:1␤------> sub ⏏&foo() {}; say "alive"␤    expecting any of:␤        new name to be defined␤»

[19:32] <masak> (a) I'm wondering if this shouldn't be allowed, and mean the same as `sub foo`

[19:33] <masak> (b) the error message is LTA, but I don't have any good ideas for what it ought to be

[19:33] *** gfldex joined
[19:33] *** colomon joined
[19:39] *** _mg_ joined
[19:40] <raydiak> wrt (b), maybe "invalid sub name" or "invalid character in sub name" or along those lines? perhaps additionally a specific mention of no leading '&' if that's the first char it saw in the name?

[19:40] <raydiak> I guess it'll be the same message we see when botching the body of an anonymous sub too, though...

[19:41] * raydiak wouldn't mind allowing a leading &, either, but the message will still be LTA in other cases

[19:44] *** _dolmen_ left
[19:44] *** colomon left
[19:44] *** colomon joined
[19:45] <masak> troo

[19:45] * masak submits rakudobug

[19:46] <Kristien> I never understood typeglobs and file handles in Perl 5.

[19:46] <Kristien> They seem obscure.

[19:47] <geekosaur> they are obscure. worse, they're kinda retrospectively imposing a story on top of what was originally just syntax

[19:48] <masak> there's a reason nobody suggested having typeglobs in Perl 6 ;)

[19:48] <Kristien> masak: let's change that!

[19:48] <geekosaur> (perl3.000 had filehandles, but typeglobs were grafted in later)

[19:48] <Kristien> How about we add typeglobs to Perl 6?

[19:49] <geekosaur> let's not and say we did (p6 has more principled ways of doing it instead of abusing existing dubious syntax)

[19:50] * masak doesn't feel particularly compelled to repeat the typeglobs lesson in Perl 6

[19:50] <fil_> how do I get the type of an object?

[19:50] <masak> m: say 42.WHAT

[19:50] <camelia> rakudo-moar 6e182d: OUTPUT«(Int)␤»

[19:50] <masak> m: 42.^name

[19:50] <camelia> rakudo-moar 6e182d: ( no output )

[19:50] <masak> m: say 42.^name

[19:50] <camelia> rakudo-moar 6e182d: OUTPUT«Int␤»

[19:51] <masak> fil_: either of those ways.

[19:51] <fil_> I tried WHAT and got Cannot look up attributes in a type object

[19:51] <masak> fil_: the .WHAT is actually not a string, but an object representing the type which stringifies to "(<type>)"

[19:51] <masak> fil_: then you did something other than print it

[19:51] <_mg_> Hello all! I'm new here. Heard Larry today on FOSDEM, and Perl6 talks yesterday. Now I need to find my way to Perl6. :D I'll start by updating the homebrew formula (Mac OS) to the latest rakudo release (https://github.com/Homebrew/homebrew/pull/36437).

[19:51] <fil_> ^name worked.  thanks

[19:52] <masak> _mg_: welcome ;)

[19:52] <masak> _mg_: that sounds awesome \o/

[19:52] <_mg_> masak: thanks!

[19:52] <geekosaur> didn't someone say the other day that the homebrew formula was out of date?

[19:53] <masak> probably, but also probably no-one did anything about it.

[19:53] <masak> _mg_++

[19:54] *** colomon left
[19:54] <_mg_> With that a "brew install rakudo-star" is all you need to get it running on Mac OS.

[19:55] <raydiak> methinks we just pointed the person the other day at rakudobrew

[19:56] <Mouq> _mg_++: It looks like that only knows about jvm and parrot, and builds parrot by default

[19:56] <masak> ugh.

[19:56] <masak> build moar by default, please!

[19:58] *** rurban1 left
[19:58] *** darutoko left
[19:59] *** colomon joined
[20:00] <masak> an I the only one who finds it confusing to talk about "Perl 6 v1.0" ?

[20:01] <vendethiel> masak: no, I agree

[20:01] <_mg_> masak: ok I'll try

[20:03] <raydiak> agreed, 6.0 or 6.0.0 is much much better imo

[20:03] <b2gills> There has been talk of calling the latest release of Perl 5 "Perl 5 version 20"

[20:04] <masak> I mean, I can see where those people are coming from, making the "6" just part of the name.

[20:04] <masak> but it'll be even more confusing as we get to Perl 6.1

[20:04] <masak> what'd that be, version 1.1 of Perl 6?

[20:04] *** Kristien left
[20:05] <moritz> version 0.1 of Perl 6 :-)

[20:06] <masak> moritz: so we go from v1.0 to v0.1? no thanks...

[20:06] <masak> (I'm speaking purely hypothetically, by the way. I don't believe we should encourage this versioning at all.)

[20:06] <b2gills> It's about like talking about the first annual ___.

[20:07] <masak> I think we should be very clear that the version being released is called Perl 6.0.0

[20:07] <huf> b2gills: it's not just talk, perl -v reports itself like that 

[20:07] <huf> i dont think that's a new thing

[20:07] *** bcode joined
[20:07] * raydiak braces for more rounds of "you shouldn't have called it Perl 6" from outside the echo chamber as the year passes and release gets closer :P

[20:07] <b2gills> huf: I didn't realize they had actually made that change

[20:07] <masak> m: say "A B" ~~ /A B/

[20:07] <camelia> rakudo-moar 6e182d: OUTPUT«Nil␤»

[20:07] <masak> m: say "A B" ~~ /:s A B/

[20:07] <camelia> rakudo-moar 6e182d: OUTPUT«｢A B｣␤»

[20:09] *** kjs_ left
[20:09] *** rindolf left
[20:10] <pmurias> Perl6 v1.1 seems both descriptive and rather silly

[20:10] *** kjs_ joined
[20:10] <masak> m: "A, B, C" ~~ /(\w)* % ', '/; say $0.list.perl

[20:10] <camelia> rakudo-moar 6e182d: OUTPUT«Array.new(Match.new(orig => "A, B, C", from => 0, to => 1, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "A, B, C", from => 3, to => 4, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "A, B, C", from => 6, to…»

[20:10] <masak> m: "A, B, C" ~~ /(\w)* % ', '/; say ~>>$0

[20:10] <camelia> rakudo-moar 6e182d: OUTPUT«===SORRY!=== Error while compiling /tmp/f4_tR8JOQM␤Preceding context expects a term, but found infix ~> instead␤at /tmp/f4_tR8JOQM:1␤------> "A, B, C" ~~ /(\w)* % ', '/; say ~>⏏>$0␤»

[20:11] <masak> m: "A, B, C" ~~ /(\w)* % ', '/; say ~<<$0

[20:11] <camelia> rakudo-moar 6e182d: OUTPUT«A B C␤»

[20:11] <masak> m: "A, B, C" ~~ /(\w*) % ', '/; say ~<<$0

[20:11] <camelia> rakudo-moar 6e182d: OUTPUT«===SORRY!=== Error while compiling /tmp/htQFolDBz4␤Missing quantifier on the left argument of %␤at /tmp/htQFolDBz4:1␤------> "A, B, C" ~~ /(\w*) %⏏ ', '/; say ~<<$0␤»

[20:11] <masak> I expected those last two to be identical.

[20:11] <masak> usually it doesn't matter if I put the quantifier inside the parens, or outside.

[20:13] <masak> m: "ABC" ~~ /(\w)*/; say ~<<$0

[20:13] <camelia> rakudo-moar 6e182d: OUTPUT«A B C␤»

[20:13] <masak> m: "ABC" ~~ /(\w*)/; say ~<<$0

[20:13] <camelia> rakudo-moar 6e182d: OUTPUT«ABC␤»

[20:13] <masak> hrm :)

[20:14] <masak> ...never mind :)

[20:15] <b2gills> I think of % as being a modifier on * and +

[20:16] *** bjz left
[20:19] * vendethiel the same

[20:19] <Mouq> b2gills: So does the parser :9

[20:21] *** beastd joined
[20:21] <pmurias> masak: did TimToady call planned "big release" Perl 6.0.0 v1.0?

[20:21] *** andreoss left
[20:22] *** Kristien joined
[20:22] <Kristien> hi

[20:22] <pmurias> masak: a big problem with Perl 6.0.0 is what is the one before that?

[20:22] <pmurias> masak: Perl 5.9.0 already exists

[20:23] <pmurias> masak: with Perl6 v1.0 we could have Perl6 v0.9

[20:23] <moritz> fwiw debian version numbers use ~ to mean "slightly less than"

[20:24] <moritz> so a 6.0.0~0.1 would be smaller than 6.0.0

[20:24] <moritz> though I'd propose we call it "Perl 6 2014.12"

[20:24] *** jack_rabbit joined
[20:25] <moritz> and avoid haggling about the exact digits and semantics

[20:27] <colomon> perhaps 2015.12  ?

[20:27] <colomon> ;)

[20:27] <moritz> erm, yes. Still getting used to the 2015 thingy.

[20:28] *** araujo joined
[20:29] <masak> pmurias: TimToady hasn't been using v1.0 to my knowledge. I think it was mdk's wording in his blog post.

[20:30] <masak> pmurias: I have never and will never spell Perl 6 "Perl6".

[20:30] *** Kristien left
[20:30] *** raiph joined
[20:30] *** Kristien joined
[20:31] <b2gills> pmurias: with the way Perl5 handles versions the version before 6 would be 5.999.999

[20:33] <Kristien> I find * vs $_ confusing.

[20:34] *** bjz joined
[20:35] * Mouq .oO( PerlAmpersandEnBeEsPeeSix )

[20:37] <masak> Kristien: matter of habit, I believe.

[20:37] <pmurias> masak: were you at FOSDEM?

[20:37] <dalek> doc: 54d8707 | moritz++ | lib/Language/functions.pod:

[20:37] <dalek> doc: Write introduction to functions.pod

[20:37] <dalek> doc: review: https://github.com/perl6/doc/commit/54d8707e5a

[20:37] *** anaeem1_ left
[20:37] <masak> Kristien: I use both, frequently, and without confusion.

[20:37] <masak> pmurias: no :/

[20:38] <Kristien> masak: yeah, but you are competent!

[20:38] <moritz> well, it took me a few years to avoid too much confusion between 5 and 6

[20:38] <masak> pmurias: I am carrying around a currently inconsolable 3wo boy.

[20:38] <masak> Kristien: I believe competence, at least most of the time, is a prerequisite for programming.

[20:38] <Kristien> Me too.

[20:39] * moritz just managed his one commit per day to perl6/doc

[20:40] <pmurias> anyway wasn't Perl 6.0.0 supposed to refer to the spec version?

[20:40] <pmurias> so it should be Rakudo 1.0

[20:41] <moritz> pmurias: I'm pretty sure rakudo will keep up its monthly release cycle and version scheme

[20:41] <moritz> 1.0 < 2015.01

[20:41] <moritz> pmurias: also, larry mentioned that the version will primarily refer to the test suite, and the design documents count as accompanying material

[20:42] *** kjs_ left
[20:42] <moritz> pmurias: and that the idea is to snapshot the passing tests, and declare them (plus the compiler passing them) as 6.0

[20:43] *** anaeem1 joined
[20:44] *** bjz left
[20:45] *** jack_rabbit left
[20:49] *** nlfly joined
[20:49] <nlfly> Hi guys

[20:50] <raydiak> \o nlfly 

[20:50] <nlfly> can you help to understand the 'winner' keyword?

[20:50] <nlfly> winner * {more @channels ... }

[20:50] <nlfly> how exactly does it work? where do the threads come in?

[20:51] <raiph> first, it's been renamed to "earliest"

[20:51] <raiph> second, does that clear it up? :)

[20:52] *** zakharyas joined
[20:52] <_mg_> masak, Mouq: https://github.com/Homebrew/homebrew/pull/36439. This builds moar by default, and parrot is now optional. 

[20:53] <raiph> moritz: would it be reasonable for me to do `sudo apt-get install libperl-dev` logged in as me on hack?

[20:53] <masak> \o/

[20:53] *** bjz joined
[20:53] <nlfly> it is winner in the test suite, and earliest does not compile

[20:53] *** [Sno] joined
[20:53] <raydiak> then you have an old rakudo

[20:54] <nlfly> anyway: if i've got two channels,

[20:54] <nlfly> i have latest rakudo star

[20:54] <nlfly> anyway,

[20:54] <nlfly> two channels. how can i write independently in two threads and read in another one?

[20:54] *** bjz left
[20:55] <raiph> .ask moritz: I'd like to use Inline::Perl5 and modules from CPAN on hack; seems I need to do `sudo apt-get install libperl-dev`; would that be reasonable?

[20:55] <yoleaux> raiph: What kind of a name is "moritz:"?!

[20:55] <raiph> .ask moritz I'd like to use Inline::Perl5 and modules from CPAN on hack; seems I need to do `sudo apt-get install libperl-dev`; would that be reasonable?

[20:55] <yoleaux> raiph: I'll pass your message to moritz.

[20:55] *** kaare_ joined
[20:58] *** Kristien left
[20:58] *** Kristien joined
[20:59] <raiph> .tell nine http://www.reddit.com/r/perl/comments/2ubs24/transcript_of_todays_fosdem_talk_leapfrogging_the/co7sa9y

[20:59] <yoleaux> raiph: I'll pass your message to nine.

[20:59] <dalek> roast: 4d0d32b | usev6++ | S02-types/built-in.t:

[20:59] <dalek> roast: Add test for RT #122094

[20:59] <dalek> roast: (this creates a new file in S02-types)

[20:59] <dalek> roast: review: https://github.com/perl6/roast/commit/4d0d32b2b3

[20:59] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122094

[21:00] <raydiak> nlfly: Channel is thread-safe, so .send and .receive/.poll should do it. for reading from more than one channel easily, you'll likely want earliest (which is called "winner" in your version, but will be documented as "earliest" on the web, which is current)

[21:01] <Mouq> _mg_++ :D

[21:02] *** anaeem1 left
[21:02] <_mg_> I still have problems with the shebang line, for example when I run panda

[21:04] <dalek> roast: 6a639ce | usev6++ | S02-types/built-in.t:

[21:04] <dalek> roast: Fix syntax for ticket number

[21:04] <dalek> roast: review: https://github.com/perl6/roast/commit/6a639cef47

[21:04] <pmurias> raiph: and the first comment is wrong ;)

[21:05] <raydiak> nlfly: btw have you already looked over S17?

[21:05] <raiph> pmurias: audioen's comment?

[21:06] *** spollei joined
[21:09] *** _mg_ left
[21:10] *** bjz joined
[21:12] *** davercc joined
[21:13] <raydiak> after working with nativecall a bit, seems like I should have wrapped libpng and bundled a dll with it, instead of sloppily re-implementing a minscule portion of it in P6 for Image::PNG::Portable :P

[21:13] <raydiak> *miniscule

[21:14] <nlfly> how to create threads then? :-)

[21:14] <masak> raydiak: not too late for that ;)

[21:14] <pmurias> raiph: yes, that's simply not true

[21:15] <vendethiel> we need a C2P6

[21:15] <vendethiel> :P

[21:15] <Kristien> I just found this: http://search.cpan.org/~ether/Task-Kensho-0.38/lib/Task/Kensho.pm

[21:16] <Mouq> nlfly: What's your perl6 -v ? That might be why earliest isn't working

[21:16] <pmurias> C2P6?

[21:16] <nlfly> This is perl6 version 2014.09 built on MoarVM version 2014.09

[21:16] <masak> ooh, Task::Kensho is actually a pretty interesting target for Perl 6 compatibility.

[21:16] <masak> now there's a talk all in itself.

[21:16] <nlfly> aha, not the latest star as i thought

[21:16] <Mouq> nlfly: And you might want to look at the "start" keywork

[21:16] <Mouq> *keyword

[21:17] <nlfly> Mouq: cool, thanks, i forgot about that word

[21:18] <raiph> pmurias: I wanted to post working code that demonstrated (s)he was wrong but I'm waiting for an answer from moritz to my question ^^ a few minutes ago

[21:19] <raiph> pmurias: and I'd much rather see an answer by nine

[21:19] *** xfix left
[21:19] <raydiak> masak: true enough :) guess I'll chalk that one up to practice...just wondering if there is anything useful I could still squeeze out of it, but I really can't think of much, unless I wanted to make it pure perl by reimplementing zlib too heh

[21:19] <nlfly> yes, with 2014.12 earliest works

[21:20] *** bjz left
[21:22] * colomon has somehow lost his p6 script to convert a git log —status file to a rough changelog.

[21:24] * colomon searched for five minutes and finally found it 10 seconds after writing that.

[21:25] <masak> colomon: remember, it's always in the *last* place you look! :P

[21:26] * colomon doesn’t actually remember how to use it, either

[21:28] * raydiak used to use a trick when waiting for rakudo to compile, where whining about it manipulates it into finishing right then and proving him wrong :)

[21:29] *** nlfly left
[21:30] <colomon> “Saw 2 calls to deprecated code during execution.”  apparently it needs some patching, too

[21:37] *** kjs_ joined
[21:38] *** gr33n7007h joined
[21:38] *** kurahaupo1 left
[21:44] *** kurahaupo1 joined
[21:45] *** kjs_ left
[21:52] *** zakharyas left
[21:53] *** spider-mario joined
[21:53] *** nige left
[22:00] <moritz> raiph: libperl-dev installed

[22:00] <yoleaux> 20:55Z <raiph> moritz: I'd like to use Inline::Perl5 and modules from CPAN on hack; seems I need to do `sudo apt-get install libperl-dev`; would that be reasonable?

[22:01] <raydiak> perlbrew doesn't allow that?

[22:03] *** Ugator left
[22:04] <skids> m: say Grammar.^methods>>.name

[22:04] <camelia> rakudo-moar 6e182d: OUTPUT«parse subparse parsefile MATCH MATCH_SAVE INTERPOLATE DYNQUANT_LIMITS OTHERGRAMMAR INDRULE RECURSE orig target from pos prune CAPHASH !cursor_init !cursor_start_all !cursor_start !cursor_start_cur !cursor_start_fail !cursor_start_subcapture !cursor_capture…»

[22:04] <skids> m: say Grammar.^methods

[22:04] <camelia> rakudo-moar 6e182d: OUTPUT«No such method 'gist' for invocant of type 'NQPRoutine'␤  in method gist at src/gen/m-CORE.setting:8557␤  in sub say at src/gen/m-CORE.setting:17341␤  in block <unit> at /tmp/KV8yXwsB5h:1␤␤»

[22:04] <moritz> raydiak: I'm pretty sure it does

[22:05] <skids> I think that's just a matter of adding a .Str to NQPRoutine knowhow?

[22:05] <moritz> gist

[22:05] <moritz> though a more complete solution would fake the complete type Mu

[22:06] *** rurban left
[22:10] *** kjs_ joined
[22:13] *** Kristien left
[22:14] <raiph> moritz++ # :) gracious hosting

[22:18] <nine> Oh the horrors, the abuse, the hackery. But I made it. I can embed MoarVM in Perl 5 and call into Perl 6 code :)

[22:18] <yoleaux> 20:59Z <raiph> nine: http://www.reddit.com/r/perl/comments/2ubs24/transcript_of_todays_fosdem_talk_leapfrogging_the/co7sa9y

[22:19] <colomon> nine++

[22:20] <nine> raiph: that's true. But it's also quite possible to not copy hashes and arrays. Copying was just quicker to implement and there are probably not many useful APIs that need modifications of arguments.

[22:23] <dalek> Heuristic branch merge: pushed 17 commits to rakudo/birdless by moritz

[22:23] <masak> surprisingly positive comments at https://news.ycombinator.com/item?id=8980387

[22:23] *** brrt joined
[22:24] <brrt> masak: yes, except for chromatic for some reason

[22:24] <masak> a lot of people are already getting entangled in the whole "v1.0" thing, though.

[22:24] <masak> brrt: "for some reason"?

[22:24] <masak> brrt: you must be new here. ;)

[22:24] <brrt> i'm new enough not to know the reason

[22:24] <masak> right.

[22:24] <brrt> and honestly i don't care

[22:24] <colomon> rakudo/birdless ?

[22:24] <masak> it'd be a mistake to dismiss chromatic entirely.

[22:25] <brrt> that's not what i'm saying

[22:25] <masak> please read him for one of the most insightful critiques of the Perl 6 community.

[22:25] <masak> at least if you can stomach his way of expressing it without burning out.

[22:25] <brrt> what i'm saying is that i don't care about the reason of the bitterness

[22:25] <masak> (which I can on some days)

[22:25] <moritz> colomon: an experimental branch to see what happened if we dropped parrot support from rakudo

[22:25] <masak> brrt: I understand.

[22:25] <moritz> $ git diff --shortstat nom...birdless 73 files changed, 87 insertions(+), 6926 deletions(-)

[22:26] <colomon> !!

[22:26] <masak> moritz: is that... Rakudo sans Parrot?

[22:27] <brrt> :-)

[22:27] <moritz> masak: yes, though quite some docs still aren't adapted in that branch

[22:27] <pmurias> masak: re Perl6 v1.0, that's the price for doing the annoucement only in talk form

[22:27] <masak> moritz: we waste 7kLOC on Parrot support?

[22:27] <dalek> nqp-js: f71a04a | (Pawel Murias)++ | src/vm/js/bin/run_tests:

[22:27] <dalek> nqp-js: Add passing test 47 to run_tests.

[22:27] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/f71a04ae44

[22:27] <masak> pmurias: I believe you're right.

[22:28] <masak> pmurias: mdk basically got to pick the terms as he saw fit.

[22:29] <pmurias> I didn't see that TimToady talk

[22:30] <moritz> can somebody please reply to https://news.ycombinator.com/item?id=8981931 and say they should join #moarvm?

[22:30] <colomon> on it

[22:30] <moritz> I've reached my limit of allowed replies per time unit on hackernews, it seems

[22:30] <colomon> that’s on freenode?

[22:30] <moritz> yes

[22:30] <masak> yes.

[22:30] <masak> moritz++ # replying to the hilt!

[22:31] <pmurias> maybe you need moritz_sockpuppet?

[22:31] <colomon> moritz: just replied, let me know if you’d like me to tweak it.

[22:33] <hoelzro> o/ #perl6

[22:34] *** brrt left
[22:36] *** Ugator joined
[22:36] *** telex left
[22:38] *** telex joined
[22:47] *** beastd left
[22:48] *** raiph left
[22:51] <moritz> colomon++

[22:54] <moritz> time for sleep here&

[22:57] *** skids left
[22:57] *** raiph joined
[22:58] <El_Che> fosdem perl pictures: http://imgur.com/a/1ynV7#0

[23:00] <dalek> ecosystem: e1cd2fd | Mouq++ | META.list:

[23:00] <dalek> ecosystem: Add TOML to the ecosystem

[23:00] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e1cd2fd9ac

[23:02] *** skids joined
[23:03] *** pmurias left
[23:06] *** kjs_ left
[23:06] *** espadrine joined
[23:12] *** jack_rabbit joined
[23:16] *** skids left
[23:21] *** skids joined
[23:29] * raydiak notices that rakudo and moar are in their own organizations but any of us is allowed to break nqp :)

[23:34] <japhb> Besides TimToady++'s talk, any other cool announcements and/or "Just One More Thing"s out of FOSDEM?  I saw the link to nine++'s talk slides (I *love* that he included complete notes); any others posted?

[23:35] <timotimo> jnthn didn't update his "talks" page yet; it still says "i'll be talking at the apw2014, topic TBA"

[23:35] <timotimo> i was hoping i could find his slides soon-ish :)

[23:36] <japhb> Ditto.  I become the biggest fanboy nudge after his talks, asking for posted slides.  :-)

[23:38] *** skids left
[23:42] <timotimo> o/

[23:42] *** gfldex left
[23:48] *** gr33n7007h left
[23:48] *** skids joined
[23:53] *** gr33n7007h joined
[23:59] <masak> jnthn's slides are of consistently high quality. and they stand quite well on their own, in most cases.

