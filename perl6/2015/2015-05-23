[00:04] *** spintronic left
[00:17] *** tinyblak joined
[00:20] *** chazarvosky joined
[00:23] <chazarvosky> Hi, does anybody knows why the new logo is a Butterfly?

[00:23] <timotimo> on perl6.org you can click on the butterfly to get the explanation text if i remember correctly

[00:24] <chazarvosky> thank you!

[00:26] *** chazarvosky left
[00:33] *** raiph left
[00:36] *** raiph joined
[00:55] <chansen_> m: say sprintf '%.4d', -12;

[00:55] <camelia> rakudo-moar 2e63ee: OUTPUT«-12␤»

[00:56] <chansen_> ^^ shouldn't the above be -0012?

[00:57] <timotimo> doesn't the number after the . usually refer to after-decimal-point digits? which doesn't make sense for a %d, right?

[00:57] <timotimo> m: say sprintf '%04d', -12

[00:57] <camelia> rakudo-moar 2e63ee: OUTPUT«-012␤»

[00:57] <timotimo> m: say sprintf '%04d', 12

[00:57] <camelia> rakudo-moar 2e63ee: OUTPUT«0012␤»

[00:58] <geekosaur> timotimo, .n for %d was changed years ago to the above

[00:58] <geekosaur> because you can't specify the leading 0 in a *-spec (getting it from a variable)

[00:59] <geekosaur> (and I am continually astonished by how many people do not know of a change to printf specs that was made some 15 years ago)

[01:11] *** aborazmeh joined
[01:11] *** aborazmeh left
[01:11] *** aborazmeh joined
[01:11] *** gfldex left
[01:14] *** vendethiel joined
[01:16] <timotimo> oh?

[01:16] <timotimo> huh

[01:16] <timotimo> i don't know much about printf format beyond the simplest things

[01:17] <sjn> m: say sprintf '%.4f', -12;

[01:17] <camelia> rakudo-moar 2e63ee: OUTPUT«-12.0000␤»

[01:17] <sjn> m: say sprintf '%09.2f', -12;

[01:17] <camelia> rakudo-moar 2e63ee: OUTPUT«-00012.00␤»

[01:17] <sjn> m: say sprintf '%09.2d', -12;

[01:17] <camelia> rakudo-moar 2e63ee: OUTPUT«      -12␤»

[01:17] <sjn> m: say sprintf '%09d', -12;

[01:17] <camelia> rakudo-moar 2e63ee: OUTPUT«-00000012␤»

[01:19] *** adu joined
[01:23] <chansen_> I'll file a bug report tomorrow, (time for bed)

[01:25] <sjn> m: say sprintf '%.09d', -12;

[01:25] <camelia> rakudo-moar 2e63ee: OUTPUT«-12␤»

[01:25] <sjn> m: say sprintf '%.9d', -12;

[01:25] <camelia> rakudo-moar 2e63ee: OUTPUT«-12␤»

[01:26] <sjn> chansen_: '%.4d' really doesn't make much sense, so the bug is probably that a warning is missing

[01:27] <chansen_> sjn: .n specifies the minimum digits that should be outputted

[01:28] <chansen_> The sign doesn't count as a digit

[01:28] <chansen_> m: say sprintf '%04d', -12;

[01:28] <camelia> rakudo-moar 2e63ee: OUTPUT«-012␤»

[01:28] <geekosaur> another person whose printf knowledge is 20 years out of date...

[01:28] <chansen_> m: say sprintf '%.4d', -12;

[01:28] <camelia> rakudo-moar 2e63ee: OUTPUT«-12␤»

[01:29] <geekosaur> like i said, it's common that people don't know that was added years ago

[01:29] <geekosaur> everyone remembers what 1970s printf did

[01:29] <geekosaur> and 80s

[01:29] <adu> hi all

[01:29] <adu> m: 6.m(3)

[01:29] <camelia> rakudo-moar 2e63ee: OUTPUT«Method 'm' not found for invocant of class 'Int'␤  in block <unit> at /tmp/UwbRN1bssY:1␤  in any <unit-outer> at /tmp/UwbRN1bssY:1␤␤»

[01:29] <adu> m: 6.n(3)

[01:29] <camelia> rakudo-moar 2e63ee: OUTPUT«Method 'n' not found for invocant of class 'Int'␤  in block <unit> at /tmp/phl2S_3XWT:1␤  in any <unit-outer> at /tmp/phl2S_3XWT:1␤␤»

[01:32] <chansen_> m: say sprintf '%.4d', -12;

[01:32] <camelia> rakudo-moar 2e63ee: OUTPUT«-12␤»

[01:32] <chansen_> m: say sprintf '%+.4d', -12;

[01:32] <camelia> rakudo-moar 2e63ee: OUTPUT«-12␤»

[01:32] <chansen_> m: say sprintf '%+.4d', 12;

[01:32] <camelia> rakudo-moar 2e63ee: OUTPUT«+12␤»

[01:33] <chansen_> m: say sprintf '%+04d', 12;

[01:33] <camelia> rakudo-moar 2e63ee: OUTPUT«+012␤»

[01:33] <chansen_> m: say sprintf '%+04d', -12;

[01:33] <camelia> rakudo-moar 2e63ee: OUTPUT«-012␤»

[01:35] * chansen_ anyway, time for bed

[01:35] *** andreoss left
[01:37] <geekosaur> pyanfar:12490 Z$ printf '%+.4d\n' -12

[01:37] <geekosaur> -0012

[01:38] *** telex left
[01:39] *** aborazmeh left
[01:40] *** telex joined
[01:54] *** adu left
[02:04] <jdv79> where is anything about testing on perl6.org?  i don't see it.

[02:05] *** zcm joined
[02:05] <jdv79> oh, roast has one line under lang design

[02:07] *** zcm left
[02:07] <jdv79> but where would other testing stuff go like smoking, "cpan" reports, etc...

[02:08] *** zcm joined
[02:09] *** zcm left
[02:18] *** chenryn joined
[02:23] *** jack_rabbit joined
[02:25] *** AlexDaniel left
[02:33] *** vendethiel left
[02:42] *** raiph left
[02:52] *** noganex_ joined
[02:54] <ugexe> i imagine those things belong on whatever authority

[02:55] *** noganex left
[03:12] *** raiph joined
[03:16] *** aborazmeh joined
[03:16] *** aborazmeh left
[03:16] *** aborazmeh joined
[03:28] *** chenryn left
[03:46] *** FROGGS_ joined
[03:48] *** Sqirrel left
[03:50] *** FROGGS left
[03:58] <zostay> m: my Int(Any) $x = '4';

[03:58] <camelia> rakudo-moar 2e63ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1FE880fJh1␤Coercion Int(Any) is insufficiently type-like to qualify a variable␤at /tmp/1FE880fJh1:1␤------> 3my Int(Any) $x7⏏5 = '4';␤    expecting any of:␤        constraint␤»

[04:02] *** aborazmeh left
[04:03] *** aborazmeh joined
[04:03] *** aborazmeh left
[04:03] *** aborazmeh joined
[04:18] *** quester joined
[04:18] *** quester left
[04:18] *** quester joined
[04:25] *** Sqirrel joined
[04:28] <jdv79> "testing" is a whatever item - idk about that?

[04:48] *** virtualsue joined
[04:54] <ugexe> smoke testing and cpan reports? i dont imagine those things belong in the core of a language

[04:56] *** adu joined
[04:59] <jdv79> well, maybe from some version of a user perspective its not a top level category but in a cultural sense i'd say its deserving of a higher spot than "misc"/whatever.

[05:01] *** rindolf joined
[05:02] <jdv79> maybe the "modules" section could be changed to "dists" which could then include compiler dists and then it would all fall under there

[05:04] *** aborazmeh left
[05:06] <ugexe> are you going to defined what a failed or passed test is? or the proper number of test reports to send to a test server? That is where im confused. What exactly would you be defining

[05:40] *** diana_olhovik_ joined
[05:44] *** raiph left
[05:50] *** skids joined
[06:13] <dalek> rakudo-star-daily: 3786bdc | coke++ | log/MoarVM- (5 files):

[06:13] <dalek> rakudo-star-daily: today (automated commit)

[06:13] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/3786bdcb50

[06:13] <dalek> rakudo-star-daily: f1e86ba | coke++ | log/MoarVM- (5 files):

[06:13] <dalek> rakudo-star-daily: today (automated commit)

[06:13] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/f1e86ba4c8

[06:23] * [Coke] waves briefly.

[06:25] <[Coke]> lizmat: http://rjbs.manxome.org/rubric/entry/2082

[06:31] *** skids left
[06:41] *** diana_olhovik_ left
[06:43] *** kaare__ joined
[06:47] *** RabidGravy joined
[07:16] *** adu left
[07:17] *** darutoko joined
[07:22] *** xinming_ joined
[07:28] *** BenGoldberg_ left
[07:39] *** Alina-malina left
[07:39] *** Alina-malina joined
[07:40] *** lizmat left
[07:40] *** ][Sno][ left
[07:40] *** [Sno] joined
[07:42] *** lizmat joined
[07:42] <lizmat> good *, #perl6!

[07:43] <lizmat> [Coke]: thanks for the link

[07:48] *** diana_olhovik_ joined
[07:48] <dalek> Heuristic branch merge: pushed 71 commits to rakudo/newio by lizmat

[07:49] *** espadrine joined
[08:00] *** bartolin joined
[08:15] *** gfldex joined
[08:34] *** quester left
[08:59] <masak> 'antenoon, #perl6

[09:00] <RabidGravy> erp

[09:01] <lizmat> masak RabidGravy o/

[09:02] *** eli-se joined
[09:04] *** RabidGravy left
[09:11] <eli-se> hi

[09:12] <masak> \o

[09:13] <dalek> snake: 7b1aa76 | arnsholt++ | src/Snake/Actions.nqp:

[09:13] <dalek> snake: Add a TODO note.

[09:13] <dalek> snake: review: https://github.com/arnsholt/snake/commit/7b1aa76e13

[09:13] <dalek> snake: 157c5e9 | arnsholt++ | src/Snake/Actions.nqp:

[09:13] <dalek> snake: Temporarily create tuples as nqp::list.

[09:13] <arnsholt> Whoops!

[09:14] <arnsholt> I'm sorry, dalek!

[09:14] *** dalek joined
[09:14] *** ChanServ sets mode: +v dalek

[09:15] *** kaare__ left
[09:17] *** kaare__ joined
[09:17] <lizmat> arnsholt++

[09:17] <lizmat> # fighting the dalek

[09:19] *** gfldex left
[09:19] <jnthn> o/, #perl6

[09:21] <lizmat> jnthn o/

[09:21] <lizmat> Q: is there an op that works like "say" but prints on STDERR ?

[09:22] <lizmat> :op<note>,    # doesn't cut it  :-(

[09:24] <masak> \o, jnthn

[09:31] *** spider-mario joined
[09:31] <jnthn> lizmat: No, you'll have to compose it out of 2

[09:31] *** eli-se left
[09:31] <arnsholt> lizmat: nqp::sayfh(nqp::getstderr(), ...) probably

[09:31] <jnthn> :op<sayfh> with an :op<getstderr> or so as its first arg

[09:32] <lizmat> ok, let me play with that

[09:32] <lizmat> I'm about to reinstate Devel::Trace functionality as a full lexical "use trace"

[09:32] <lizmat> so you can switch it on / off 

[09:32] <lizmat> but I would like to see the output of "use trace" on STDERR rather than STDOUT

[09:33] <lizmat> so you can redirect

[09:33] <lizmat> hmmm   "sayfh" doesn't show up in any src/Perl6 file

[09:34] *** diana_olhovik_ left
[09:34] <arnsholt> I found it in nqp/docs/ops.markdown

[09:34] <lizmat> ah, ok

[09:34] <lizmat> :-)

[09:35] *** vendethiel joined
[09:36] <lizmat> ===SORRY!===

[09:36] <lizmat> Arg count 1 doesn't equal required operand count 3 for op 'say_fhs'

[09:36] <lizmat> hmmm...

[09:37] <lizmat> found it, I think

[09:37] <jnthn> you probably put the string to emit in the wrong place

[09:38] <lizmat> yeah, but now it does't print anything  :-(

[09:39] <lizmat>                     QAST::Op.new(

[09:39] <lizmat>                         :op<sayfh>,

[09:39] <lizmat>                         :op<getstderr>,

[09:39] <lizmat>                         QAST::SVal.new(:value( $id ~ ": " ~ $/))

[09:39] <lizmat>                     ),

[09:40] <lizmat> seems legit, no ?

[09:40] <jnthn> oops

[09:40] <jnthn> Second line needs to be QAST::Op.new( :op<sayfh> ),

[09:41] <lizmat> ahhhh

[09:43] <lizmat> eh, but this works:

[09:43] <lizmat>                    QAST::Op.new(

[09:43] <lizmat>                         :op<say>,

[09:43] <lizmat>                         QAST::SVal.new(:value( $id ~ ": " ~ $/))

[09:43] <lizmat>                     ),

[09:46] <dalek> rakudo/nom: d630193 | lizmat++ | src/Perl6/ (2 files):

[09:46] <dalek> rakudo/nom: Revive Devel::Trace as "trace"

[09:46] <dalek> rakudo/nom: 

[09:46] <dalek> rakudo/nom: While cleaning up, I found some leftover Devel::Trace functionality that

[09:46] <dalek> rakudo/nom: seemed useful to reinstate now that we have lexical pragma's.

[09:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d630193810

[09:47] <lizmat> jnthn: work so far ^^

[09:48] <lizmat> $ 6 'use trace; my $a; $a++'

[09:48] <lizmat> 1: use trace

[09:48] <lizmat> 2: my $a

[09:48] <lizmat> 3: $a++

[09:48] <lizmat> $ 6 'use trace; my $a; no trace; $a++'

[09:48] <lizmat> 1: use trace

[09:48] <lizmat> 2: my $a

[09:49] *** pmurias joined
[09:49] <pmurias> snake is back :)

[09:49] <jnthn> lizmat: Dunno if line number is better to emit than the statement ID thing, which is an internal compiler ID

[09:50] <lizmat> well, if line number, we would also need file name, no?

[09:51] <jnthn> Dunno :)

[09:51] <vendethiel> o/; #perl6

[09:51] <lizmat> in any case, the emit would be per statement, so statement ID seems in place

[09:51] <vendethiel> pmurias: snake :o)?

[09:56] <vendethiel> lizmat++

[10:03] <dalek> rakudo/nom: 2033bbb | lizmat++ | src/Perl6/Actions.nqp:

[10:03] <dalek> rakudo/nom: Make 'use trace' print on STDERR

[10:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2033bbbac2

[10:03] <lizmat> figgered it out :-)

[10:04] <jnthn> :-)

[10:04] * jnthn finds another couple of percent off startup

[10:04] <vendethiel> jnthn++

[10:04] <lizmat> now suppose we want to write to a file, other than by redirecting STDERR

[10:05] <vendethiel> jnthn: did you hear about Debugger::UI::CommandLine being broken? Do you have an idea off the top of your head of what might've broke it?

[10:05] * vendethiel would look at it, but didn't get the error message

[10:05] * vendethiel gets the laptop to triple check

[10:05] <lizmat> jnthn: given a file handle, how would I change QAST::Op.new(:op<getstderr>) then ?

[10:06] *** Ven joined
[10:06] <pmurias> vendethiel: arnsholt++'s python on QAST

[10:07] <vendethiel> pmurias: oh! yes, indeed :D

[10:07] <jnthn> vendethiel: Not sure without looking...

[10:09] *** raiph joined
[10:09] *** virtualsue left
[10:10] <jnthn> It looks like the module loading changes may have busted it...

[10:11] <jnthn> Or at least, I can't run it in its build directly, 'cus my -Ilib gets ignored...

[10:11] <lizmat> ??

[10:11] <Ven> https://gist.github.com/vendethiel/02b7fc9684c67b786ed8

[10:11] <yoleaux> 22 May 2015 16:13Z <brrt> Ven: thanks

[10:12] <jnthn> oh, but only at the debugger REPL. Odd.

[10:12] <lizmat> jnthn: could it be that -Ilib adds a "file#lib" to @*INC[0] instead of "lib"  ??

[10:14] <jnthn> Ven: Hm, what kinda program do you debug to see that? :)

[10:14] * jnthn guesses he needs a bit more than -e "1" :)

[10:14] <Ven> jnthn: a grammar

[10:15] <Ven> jnthn: https://github.com/undo-lang/frontend/blob/master/t/00-basic.t and https://github.com/undo-lang/frontend/blob/master/lib/Undo/Grammar.pm6

[10:16] *** Alina-malina left
[10:17] *** Alina-malina joined
[10:18] *** domidumont joined
[10:19] <jnthn> Ven: Reproduced it locally.

[10:19] <Ven> jnthn: to be fair, it hasn't been that much of an issue since I also had your great Grammar::Debugger to help me out :-)

[10:22] *** domidumont left
[10:22] *** domidumont joined
[10:26] *** TimToady left
[10:27] *** diana_olhovik joined
[10:27] <jnthn> Ven: Pushed a fix, thanks.

[10:28] *** TimToady joined
[10:28] <Ven> jnthn: amazing! I'm the thankful one :)

[10:28] <jnthn> Also sprinkled a "unit" in there so we don't get deprecation whines.

[10:29] <Ven> wow, yeah, I wasn't about to find how that happened. just for my information, how do you go about tracking this kind of stuff? do you skip some part of the backtrace?

[10:29] <jnthn> --ll-exception was informative in this case

[10:30] <Ven> really? it gave me the same stack trace :o

[10:30] *** Alina-malina left
[10:30] <jnthn> Oh? For me I got a way, way longer one.

[10:30] <Ven> amazing, it works for me

[10:30] <jnthn> \o/

[10:30] <Ven> jnthn++!

[10:30] *** Alina-malina joined
[10:31] <Ven> Oh, seems like python's PEP0484, "Type Hints", was accepted

[10:31] <Ven> ( https://www.python.org/dev/peps/pep-0484/ )

[10:35] *** virtualsue joined
[10:37] <Ven> .tell froogs are you still looking at c++ name (un)mangling? this: https://github.com/kirbyfan64/unmangler might be interesting (even though it's in C)

[10:37] <yoleaux> Ven: I'll pass your message to froogs.

[10:37] <Ven> .tell froggs are you still looking at c++ name (un)mangling? this: https://github.com/kirbyfan64/unmangler might be interesting (even though it's in C)

[10:37] <yoleaux> Ven: I'll pass your message to froggs.

[10:39] <lizmat> Ven: telling FROGGS might be better  :-)

[10:39] <Ven> lizmat: oh, case matters?

[10:39] <lizmat> .tell LIZMAT foo

[10:39] <yoleaux> lizmat: Talking to yourself is the first sign of madness.

[10:39] <Ven> .tell LIZMAT ++

[10:39] <yoleaux> Ven: I'll pass your message to LIZMAT.

[10:39] <lizmat> ah, I guess it *is* case insensitive

[10:39] <yoleaux> 10:39Z <Ven> lizmat: ++

[10:40] <Ven> good. sorry froogs, tho :P

[10:40] *** diana_olhovik left
[10:41] *** Alina-malina left
[10:44] <lizmat> jnthn: "finds another couple of percent off startup"  where?  in Moar or higher up ?

[10:44] <dalek> rakudo/nom: ab35a4e | lizmat++ | src/Perl6/World.nqp:

[10:44] <dalek> rakudo/nom: Generalize line number finding into a World method

[10:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab35a4ef0b

[10:45] *** diana_olhovik_ joined
[10:46] <dalek> rakudo/nom: 2a81b40 | jnthn++ | src/core/Compiler.pm:

[10:46] <dalek> rakudo/nom: Lazily construct a DateTime in Compiler.

[10:46] <dalek> rakudo/nom: 

[10:46] <dalek> rakudo/nom: This takes its BUILD from taking 6% of setting loading down to 2%.

[10:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a81b40bab

[10:46] *** Alina-malina joined
[10:47] <lizmat> also seems we should speed up DateTime.new  :-)

[10:48] <lizmat> jnthn: I did some work in that area yesterday

[10:49] <jnthn> ok :)

[11:00] <[ptc]> vendethiel: did you by any chance have the GitHub username 'Nami-Doc' once?

[11:01] <Ven> [ptc]: yes!

[11:01] <Ven> then FROGGS++ told me it was ugly, so I changed it :P.

[11:01] <[ptc]> Ven: aha, that explains that issue then :-)

[11:01] <Ven> issue?

[11:01] <[ptc]> right, I'll update the META.info in the Sprockets repo :-)

[11:01] <Ven> oh!

[11:01] <[ptc]> well, I'm going through the entire ecosystem atm, and found a repo that I couldn't fork automatically

[11:02] <[ptc]> and it turned out to be yours due to the name change :-)

[11:04] <Ven> alright. I havn't updated my name everywhere indeed...

[11:05] <[ptc]> it's not a problem.  I was just confused and thought I'd ask :-)

[11:07] *** isBEKaml joined
[11:09] *** chenryn joined
[11:09] <[ptc]> Ven: sweet!  Thanks for the quick merge!

[11:09] <Ven> thanks for the PR

[11:12] <[ptc]> no probs.  Just sent you another ;-)

[11:15] <Ven> it's merged already

[11:20] <dalek> rakudo/nom: 7261d4b | lizmat++ | src/Perl6/Actions.nqp:

[11:20] <dalek> rakudo/nom: Add file/line + cleanup to "use trace" output

[11:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7261d4bc45

[11:20] <dalek> rakudo/nom: 948ce64 | lizmat++ | docs/ChangeLog:

[11:20] <dalek> rakudo/nom: Mention 'use trace'

[11:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/948ce64b87

[11:21] <[ptc]> Ven: cool!  I like the cake emoji, that adds a nice touch to saying thanks to someone after merging a PR :-)

[11:22] *** Ven left
[11:23] <lizmat> afk&

[11:24] *** rindolf left
[11:24] *** rindolf joined
[11:33] *** sivoais left
[11:37] <[ptc]> m: sub finished( Code &callback(int) )        returns Int  is native('libSDL_mixer')

[11:37] <camelia> rakudo-moar 2a81b4: OUTPUT«5===SORRY!5===␤Shape declaration with () is reserved;␤  please use whitespace if you meant a subsignature for unpacking,␤  or use the :() form if you meant to add signature info to the function's type␤at /tmp/Vg2jUXWrzA:1␤------> 3sub finish…»

[11:38] <[ptc]> m: sub finished( Code &callback (int) ) returns Int  is native('libSDL_mixer')

[11:38] <camelia> rakudo-moar 2a81b4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/63xfWWPIII␤Missing block␤at /tmp/63xfWWPIII:1␤------> 3) returns Int  is native('libSDL_mixer')7⏏5<EOL>␤    expecting any of:␤        new name to be defined␤»

[11:38] <[ptc]> m: sub finished( Code &callback (int) ) returns Int

[11:38] <camelia> rakudo-moar 2a81b4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/HsAGSwFHVM␤Missing block␤at /tmp/HsAGSwFHVM:1␤------> 3shed( Code &callback (int) ) returns Int7⏏5<EOL>␤    expecting any of:␤        new name to be defined␤»

[11:41] *** spider-mario left
[11:43] *** sivoais joined
[11:43] <jnthn> Code &callback is a bit dubious in so far as the & already means Callable, so that'd be a callable thing that returns a Code

[11:45] <[ptc]> jnthn: yeah, I'm not 100% sure what the code is trying to do

[11:45] <[ptc]> jnthn: it's in the SDL module, which hasn't been touched in a few years and I was trying to get the test suite to pass

[11:48] <[ptc]> jnthn: ah, it seems that if I leave off the `Code` and add a space between `&callback` and `(int)` the test suite runs much better

[11:48] <[ptc]> jnthn: I was getting other errors that the NativeCall interface didn't know what to do with a `Code`, so I think your tip put me on the right track

[11:49] <[ptc]> jnthn: is putting a space between the sub name and its argument in such a situation correct?

[11:51] *** diana_olhovik_ left
[11:53] <jnthn> No, I think you want the colon

[11:53] <jnthn> &callback:(int)

[11:54] <jnthn> At least, I think that works nowadays

[11:55] <[ptc]> I'll give it a go

[11:55] <[ptc]> nope.  I got: Type check failed in binding $sig; expected 'Signature' but got 'Any'

[11:55] <[ptc]> with the space, all of the tests run but one

[11:56] <jnthn> OK, stick with the space then

[11:57] <[ptc]> what's the difference between the two?  What are they trying to say?

[11:58] <jnthn> &foo:(...sig here...) is meant to mean "a code object whose signature matches that specified"

[11:58] <jnthn> &foo (...) is meant to be an unpack

[11:59] <[ptc]> ok, thanks!

[11:59] <jnthn> However, 'cus NativeCall processes signatures differently, and 'cus at the time it was implemented we didn't parse the colon case, the unpack syntax was interpreted by NativeCall instead as a specification of the callback's signature

[11:59] <[ptc]> which is probably why it works with the space, and not the colon

[11:59] <jnthn> Right

[11:59] <jnthn> I thought we now supported both in NativeCall, but apparently not

[11:59] <[ptc]> maybe I just need to update my local stuff

[11:59] <jnthn> I'd really rather we were using the one with the colon. It's more consistent with Perl 6 semantics generally.

[12:00] <[ptc]> agreed

[12:00] <[ptc]> I'll do a full rebuild and see if that changes anything

[12:02] *** Ven joined
[12:04] *** AlexDaniel joined
[12:14] *** Sqirrel left
[12:17] *** diana_olhovik_ joined
[12:17] *** chenryn left
[12:21] *** Sqirrel joined
[12:22] *** diana_olhovik_ left
[12:24] <[ptc]> jnthn: just rebuilt Rakudo, rebootstrapped panda and am still getting the 'Type check failed ...' error.

[12:25] <[ptc]> jnthn: I'll stick with using the space and submit that as a PR

[12:27] *** Sqirrel left
[12:34] *** spider-mario joined
[12:35] *** raiph left
[12:35] *** atta joined
[12:36] *** Sqirrel joined
[12:36] <Ven> [ptc]: yeah, I think it's important to say thanks, it all matters

[12:41] <arnsholt> pmurias: (Re: Snake) Yeah, I got some new inspiration after OSDC.no. Currently working on what I'm calling The Great Objectmodel Refactor; basically getting class and object creation closer in line to how it's supposed to work

[12:44] *** aborazmeh joined
[12:44] *** aborazmeh left
[12:44] *** aborazmeh joined
[12:49] *** diana_olhovik_ joined
[12:52] *** andreoss joined
[12:53] *** Alina-malina left
[12:53] *** tinyblak_ joined
[12:53] *** Alina-malina joined
[12:57] *** tinyblak left
[13:01] *** Ven left
[13:06] *** Alina-malina left
[13:07] *** Alina-malina joined
[13:12] <dalek> gtk-simple: a0df606 | paultcochrane++ | lib/GTK/NativeLib.pm6:

[13:12] <dalek> gtk-simple: Add unit declarator to module declarations

[13:12] <dalek> gtk-simple: 

[13:12] <dalek> gtk-simple: As of Rakudo 2015.05, the `unit` declarator is required before using

[13:12] <dalek> gtk-simple: `module`, `class` or `grammar` declarations (unless it uses a block).  Code

[13:12] <dalek> gtk-simple: still using the old blockless semicolon form will throw a warning. This

[13:12] <dalek> gtk-simple: commit stops the warning from appearing in the new Rakudo.

[13:12] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/a0df6066de

[13:12] <dalek> gtk-simple: b191c89 | (Zoffix Znet)++ | lib/GTK/NativeLib.pm6:

[13:12] <dalek> gtk-simple: Merge pull request #10 from paultcochrane/pr/add-unit-declarator

[13:12] <dalek> gtk-simple: 

[13:12] <dalek> gtk-simple: Add unit declarator to module declarations

[13:12] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/b191c89341

[13:16] *** Alina-malina left
[13:17] *** FROGGS[mobile] joined
[13:23] <isBEKaml> [ptc]: (long commit messages)++ :-)

[13:23] *** xinming_ left
[13:25] *** Alina-malina joined
[13:27] *** Ven joined
[13:30] <zostay> m: class T { multi method f(Str $p, %o) { say "huzzah" }; multi method f(Pair $r) { my (Str $p, $o) = $r.kv; self.f($p, %($o)) } }; T.new.f("Foo" => { :bar(1), :baz(2) })

[13:30] <camelia> rakudo-moar 948ce6: OUTPUT«huzzah␤»

[13:30] <zostay> m: class T { multi method f(Str $p, %o) { say "huzzah" }; multi method f(Pair $r) { my (Str $p, $o) = $r.kv; samewith($p, %($o)) } }; T.new.f("Foo" => { :bar(1), :baz(2) })

[13:30] <camelia> rakudo-moar 948ce6: OUTPUT«Cannot call f(T: Str, Pair, Pair); none of these signatures match:␤    (T: Str $p, %o, *%_)␤    (T: Pair $r, *%_)␤  in method f at /tmp/4AdUXrIJO7:1␤  in block <unit> at /tmp/4AdUXrIJO7:1␤  in any <unit-outer> at /tmp/4AdUXrIJO7:1␤␤»

[13:44] *** Sqirrel left
[13:50] *** zakharyas joined
[13:52] *** aborazmeh left
[13:55] *** Sqirrel joined
[13:59] <chansen_> Who do you declare that a routine returns two Int's?

[13:59] <chansen_> First thought was, sub foo(Int $bar) returns (Int, Int)

[14:01] <moritz> m: sub f { return Int, Int }; say f().^name

[14:01] <camelia> rakudo-moar 948ce6: OUTPUT«Parcel␤»

[14:01] <moritz> camelia: you declare a sub that returns a Parcel (or Iterable, if you feel a bit more defensive)

[14:01] <moritz> sorry, meant chansen_ 

[14:02] <chansen_> moritz: ah, thanks

[14:04] *** diana_olhovik_ left
[14:04] *** xiaomiao left
[14:07] *** xiaomiao joined
[14:08] <timotimo> tadzik: when will file-find and shell-command get their pullrequests merged?

[14:24] <dalek> roast: 9252444 | usev6++ | S03-operators/precedence.t:

[14:24] <dalek> roast: Use existing ticket number, narrow down test for '3 !=3'

[14:24] <dalek> roast: review: https://github.com/perl6/roast/commit/925244448b

[14:26] <dalek> roast: 0f2f315 | usev6++ | S03-operators/precedence.t:

[14:26] <dalek> roast: Really use existing ticket number (RT #121108)

[14:26] <dalek> roast: review: https://github.com/perl6/roast/commit/0f2f315594

[14:28] *** tinyblak_ left
[14:40] *** telex left
[14:42] *** telex joined
[14:48] *** Sqirrel left
[14:48] *** cognominal left
[14:54] *** tinyblak joined
[14:59] *** Sqirrel joined
[15:01] *** diana_olhovik joined
[15:05] <chansen_> DateTime generates ill-formed ISO 8601 string representations, the zone designator should not be in basic format when the calendar date and time of day is in extended format.

[15:05] <chansen_> 2015-05-23T15:22:12+0200

[15:05] <chansen_>                     ^^^^

[15:06] <moritz> what does that mean?

[15:06] <moritz> how should it look like?

[15:06] <chansen_> 2015-05-23T15:22:12+02:00

[15:07] <chansen_> colon between hours and seconds in the zone designator

[15:07] <chansen_> s/seconds/minutes/

[15:10] *** andreoss left
[15:10] *** FROGGS[mobile] left
[15:11] *** kurahaupo1 left
[15:11] <chansen_> ISO 8601 defines two formats, basic (minimum number of separators necessary) and extended (additional separators)

[15:12] *** FROGGS[mobile] joined
[15:13] <chansen_> I have outlined several of the ISO 8601 date representations and formats in the p5 module Time::Monent, <https://metacpan.org/pod/distribution/Time-Moment/lib/Time/Moment.pod#EXAMPLE-FORMAT-STRINGS>

[15:14] <moritz> chansen_: reading the Wikipedia entry on ISO 8601, I agree with you

[15:16] <chansen_> Good, I read ISO 8601:2004(E)

[15:17] <chansen_> ISO 8601:2004(E) 4.3, the expression shall either be completely in basic format, in which case the minimum number of separators necessary for the required expression is used, or completely in extended format, in which case additional separators shall be used in accordance with 4.1 and 4.2.

[15:17] *** skids joined
[15:18] *** domidumont1 joined
[15:18] *** gfldex joined
[15:21] *** domidumont left
[15:24] *** kurahaupo1 joined
[15:25] *** FROGGS[mobile] left
[15:26] *** FROGGS[mobile] joined
[15:30] <Ven> jnthn: new bug with rakudo-debugger. typing "s" fails with the same error

[15:31] <Ven> Actually, --ll-exception gives me a very good error: "Cannot look up attributes in a type object"

[15:31] <dalek> perl6.org: 0fcd603 | paultcochrane++ | source/community/index.html:

[15:31] <dalek> perl6.org: Mention Perl 6 Testers on the community page

[15:31] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/0fcd603aae

[15:31] <dalek> perl6.org: 2cd2300 | paultcochrane++ | source/community/index.html:

[15:31] <dalek> perl6.org: Whitespace fixup

[15:31] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/2cd23004e4

[15:33] *** mj41 joined
[15:34] <Ven> .tell jnthn typing "s" in the debugger gives me (with --ll-exception) this stack trace: https://gist.github.com/vendethiel/80b612785402162de022 . It also seems, when stepping (via enter) that the "grammar mode" (that shows which part matched already/didn't match yet) is not appearing anymore

[15:34] <yoleaux> Ven: I'll pass your message to jnthn.

[15:37] <chansen_> moritz: should I file a report/pull request or will you take care of that? 

[15:37] <moritz> chansen_: I'm testing a patch locally right now

[15:38] <chansen_> ok

[15:42] <moritz> it seems that updating the tests is much more work than updating rakudo :-)

[15:44] <chansen_> ok, don't feel bad, php did the same mistake ;o)

[15:47] *** skids left
[15:47] *** FROGGS[mobile] left
[15:50] *** FROGGS[mobile] joined
[15:51] <dalek> roast: 1cd225a | moritz++ | S32-temporal/ (2 files):

[15:51] <dalek> roast: Correct formatting of ISO 8601 time zones, chansen_++

[15:51] <dalek> roast: review: https://github.com/perl6/roast/commit/1cd225a856

[15:51] *** diana_olhovik left
[15:51] <dalek> rakudo/nom: b200c70 | moritz++ | src/core/Temporal.pm:

[15:51] <dalek> rakudo/nom: Correct formatting of ISO 8601 time zones, chansen_++

[15:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b200c70819

[15:51] <chansen_> moritz++

[15:53] *** smls joined
[15:55] <smls> m: say [{x=>"foo", y=>1}, {x=>"foo", y=>2}, {x=>"bar", y=>3}].classify(*.<x>).map({; .key => [.value»<y>]}).perl

[15:55] <camelia> rakudo-moar 948ce6: OUTPUT«(:foo([1, 2]), :bar([3]))␤»

[15:56] <smls> ^^ is there a way to do the classify and map step in one go?

[15:56] <smls> seems like a common tthing, to want to classify according to a sub-value of each element AND take said sub-value out of the classified elements themselves

[15:57] <smls> maybe .classify could get a second parameter for mapping the value?

[15:57] <Ven> m: say [{x=>"foo", y=>1}, {x=>"foo", y=>2}, {x=>"bar", y=>3}].classify(*.<x>).map({ .key => [.value»<y>]}).perl

[15:57] <camelia> rakudo-moar 948ce6: OUTPUT«Method 'key' not found for invocant of class 'Any'␤  in block <unit> at /tmp/uVlxW0Pfw1:1␤  in any <unit-outer> at /tmp/uVlxW0Pfw1:1␤␤»

[15:57] <Ven> heh, I guess.

[15:57] <smls> So the above coul be written as  [...].classify(*.<x>, *.<y>)

[15:58] <smls> Failing that, could we possibly get an easier way to map a hash to another hash when you only want to modify the values (and not keys)?

[16:00] <smls> .map({; .key => ...})   always feels a little icky to me

[16:00] *** colomon left
[16:00] *** smls left
[16:00] *** colomon joined
[16:02] *** isBEKaml left
[16:04] *** colomon left
[16:05] *** colomon joined
[16:05] *** domidumont joined
[16:07] *** domidumont1 left
[16:11] *** FROGGS[mobile] left
[16:12] *** Ven left
[16:14] *** colomon left
[16:17] *** colomon joined
[16:18] *** RabidGravy joined
[16:23] *** colomon left
[16:23] *** tinyblak_ joined
[16:24] *** tinyblak left
[16:32] <b2gills> m: sub fib ( $a ){ state @fib := 0,1, &[+] ... *; @fib[$a] }; say fib 10000; say fib 10001;

[16:32] <camelia> rakudo-moar b200c7: OUTPUT«(signal SEGV)»

[16:32] <b2gills> m: sub fib ( $a ){ state @fib = 0,1, &[+] ... *; @fib[$a] }; say fib 10000; say fib 10001;

[16:32] <camelia> rakudo-moar b200c7: OUTPUT«3364476487643178326662161200510754331030214846068006390656476997468008144216666236815559551363373402558206533268083615937373479048386526826304089246305643188735454436955982749160660209988418393386465273130008883026923567361313511757929743785441375213052050…»

[16:33] *** FROGGS[mobile] joined
[16:37] *** grondilu joined
[16:39] *** colomon joined
[16:39] *** grondilu left
[16:41] *** colomon left
[16:42] *** colomon joined
[17:00] *** zakharyas left
[17:02] <timotimo> m: say (0, 1, &[+] ... *)[^6];

[17:02] <camelia> rakudo-moar b200c7: OUTPUT«0 1 1 2 3 5␤»

[17:04] <timotimo> b2gills: i'm investigating

[17:05] <timotimo> something seems to be working with int rather than Int ... perhaps

[17:05] *** diana_olhovik_ joined
[17:12] *** diana_olhovik_ left
[17:13] *** Ven_ joined
[17:13] *** vendethiel left
[17:13] <timotimo> i can't quite ...    at <unknown>:1  (/home/timo/perl6/install/share/nqp/lib/Perl6/BOOTSTRAP.moarvm::4294967295)

[17:14] <timotimo> is that -1, by chance?

[17:14] *** vendethiel joined
[17:18] <timotimo> well, iscont_* doesn't check for containers that are null pointers

[17:18] <timotimo> but i have no idea why that'd be in there

[17:18] <timotimo> especillly since we have VMNull

[17:22] *** BenGoldberg joined
[17:23] *** tinyblak_ left
[17:36] *** Foxcool left
[17:36] *** domidumont left
[17:39] <timotimo> hum. indeed, captureposargs gives us a c-level null value. how does it get in there?

[17:51] *** Alina-malina left
[17:52] *** Alina-malina joined
[17:59] *** Sqirrel left
[18:00] *** Foxcool joined
[18:05] <timotimo> well, i can't really get a good hint as to why something puts a null in there and replacing a null with the VMNull gives "Cannot call postcircumfix:<[ ]>(Any, Int); none of these signatures match:"

[18:05] <timotimo> that's kind of obviously wrong ... ish

[18:07] <timotimo> er ... huh? @fib ends up being Mu

[18:07] <timotimo> well, that explains a few things

[18:07] <timotimo> it might actually be a null underneath and we just have a problem with state vars and binding?

[18:08] * Ven_ doesn't remember any bug of the sort during his (admittedly relatively short) time here

[18:09] *** Sqirrel joined
[18:09] <timotimo> m: sub test { state $test := 1; say $test }; test

[18:09] <camelia> rakudo-moar b200c7: OUTPUT«(signal SEGV)»

[18:09] <timotimo> m: sub test { state $test = 1; say $test }; test

[18:09] <camelia> rakudo-moar b200c7: OUTPUT«1␤»

[18:09] <Ven_> m: state $x := 1;

[18:09] <camelia> rakudo-moar b200c7: ( no output )

[18:09] <Ven_> m: state $x := 1; say $x

[18:09] <camelia> rakudo-moar b200c7: OUTPUT«(signal SEGV)»

[18:10] <Ven_> guess you can even drop the sub, uh.

[18:10] <timotimo> for a golf, yeah

[18:10] <timotimo> well, at least i know where things come from

[18:10] <timotimo> after sniffing at the problem for an hour without much success

[18:10] <timotimo> i should have tried golfing *first*

[18:11] *** zakharyas joined
[18:11] <Ven_> .u ≅

[18:11] <yoleaux> U+2245 APPROXIMATELY EQUAL TO [Sm] (≅)

[18:15] *** smls joined
[18:16] *** vendethiel- joined
[18:16] *** vendethiel left
[18:17] *** Ven__ joined
[18:18] *** Ven_ left
[18:24] *** tinyblak joined
[18:25] <lizmat> m: state $x := 1; $x.gist   # just before the segv

[18:25] <camelia> rakudo-moar b200c7: OUTPUT«Cannot call method 'gist' on a null object␤  in block <unit> at /tmp/cNfCb3dUjk:1␤  in any <unit-outer> at /tmp/cNfCb3dUjk:1␤␤»

[18:27] *** spider-mario left
[18:29] *** spider-mario joined
[18:29] *** tinyblak left
[18:32] *** araujo joined
[18:33] *** araujo left
[18:37] *** diana_olhovik_ joined
[18:46] <smls> m: say [2, 2.0].classify(*.Int).perl

[18:46] <camelia> rakudo-moar b200c7: OUTPUT«Cannot call infix:<===>(Any, Mu); none of these signatures match:␤    (Any $?)␤    (Any $a, Any $b)␤    (Int:D \a, Int:D \b)␤    (int $a, int $b)␤    (Num:D \a, Num:D \b)␤    (Num $ where { ... }, Num $ where { ... })␤    (num $a, num $b --> …»

[18:46] <smls> ^^ .perl bug?

[18:47] <dalek> rakudo/nom: 73d6f72 | lizmat++ | src/Perl6/Actions.nqp:

[18:47] <dalek> rakudo/nom: Make sure we don't trace in precomped files

[18:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/73d6f72b23

[18:48] <[Tux]> $ perl -pi -e's/\bis_deeply\b/is-deeply/g' t/*

[18:48] <[Tux]> :(

[18:49] <lizmat> what is the problem?  That you must do that, or that it must be done?

[18:49] <smls> m: say Hash[Any,Any].new.perl;  # golfed

[18:49] <camelia> rakudo-moar b200c7: OUTPUT«Cannot call infix:<===>(Any, Mu); none of these signatures match:␤    (Any $?)␤    (Any $a, Any $b)␤    (Int:D \a, Int:D \b)␤    (int $a, int $b)␤    (Num:D \a, Num:D \b)␤    (Num $ where { ... }, Num $ where { ... })␤    (num $a, num $b --> …»

[18:49] <[Tux]> I don't like it. it's ugly. personal pref

[18:50] <dalek> roast: 33d835c | lizmat++ | integration/advent2010-day16.t:

[18:50] <dalek> roast: Adjust to time format correction

[18:50] <dalek> roast: review: https://github.com/perl6/roast/commit/33d835cb7a

[18:50] <[Tux]> That I must do it? No. it is already done committed and pushed

[18:50] <lizmat> :-)

[18:51] <[Tux]> what was it exactly you suggested me to do with the mail to you?

[18:51] <[Tux]> translate to English and post where?

[18:52] <lizmat> on perl6-users

[18:53] * lizmat is tired after cycling 80+ km and is taking the night off to see song and dance

[18:53] <japhb> .oO( Str.translate(:lang<English>)

[18:53] <yoleaux> 22 May 2015 21:51Z <tony-o_> japhb: i have this dimming dalek and camelia pretty well -  /hilight -regexp -line -color %K ^rakudo-.*?\s[\d\w]{6}:

[18:53] <yoleaux> 22 May 2015 21:54Z <tony-o_> japhb: i have this dimming dalek and camelia pretty well -  /hilight -regexp -line -color %K ^(m|r|p):

[19:05] *** rindolf left
[19:07] *** araujo joined
[19:07] *** araujo left
[19:08] *** colomon left
[19:10] *** grondilu joined
[19:11] <FROGGS_> o/

[19:12] *** FROGGS_ is now known as FROGGS

[19:12] *** AlexDaniel left
[19:13] *** [Tux] joined
[19:14] <FROGGS> were there any complains about the release?

[19:14] <yoleaux> 10:37Z <Ven> FROGGS: are you still looking at c++ name (un)mangling? this: https://github.com/kirbyfan64/unmangler might be interesting (even though it's in C)

[19:14] <FROGGS> Ven__: yes, hoelzro++ and me are still very interested

[19:15] <FROGGS> Ven__: we only need to mangle though

[19:17] <FROGGS> timotimo: you are doing the p6w on monday?

[19:17] * FROGGS would like to be entertained by light reading

[19:17] <timotimo> yeah, i'd like to

[19:17] <FROGGS> k :o)

[19:18] <FROGGS> hmmm

[19:18] *** Ven__ left
[19:19] <FROGGS> with the $~MAIN role mixin I did in NativeCall we could even fake 'augment slang MAIN'

[19:20] <FROGGS> ahh, perhaps not easily if that involves faking an EXPORT sub

[19:21] <dalek> rakudo/nom: 800f703 | moritz++ | docs/ChangeLog:

[19:21] <dalek> rakudo/nom: Changelog: DateTime timezone formatting change

[19:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/800f703ee4

[19:22] <cxreg> isn't name mangling an implementation detail of the compiler?  or is it standardized?

[19:23] <FROGGS> cxreg: it is compiler dependent, and not standardized, yes

[19:23] *** zakharyas left
[19:23] <FROGGS> cxreg: but there are not too many compilers per platform and we can guess the correct mangling scheme and continue

[19:24] <moritz> S17-lowlevel/lock.t occasionally aborts early on MoarVM

[19:24] <FROGGS> my stress- and spectest runs were clean for the release

[19:25] <FROGGS> and I did a lot

[19:25] <FROGGS> $ time perl6-m -e1

[19:25] <FROGGS> real	0m0.098s

[19:25] <moritz> only happens on concurrent runs

[19:25] <moritz> for i in $(seq 1 5); do make t/spec/S17-lowlevel/lock.t& done

[19:25] <FROGGS> first time below .1 ^^

[19:25] <cxreg> lots of thoughts about it here http://stackoverflow.com/questions/10127982/why-is-name-mangling-not-standardized

[19:25] <moritz> FROGGS: \o/

[19:26] <FROGGS> cxreg: I believe I read that already, but I'll put it on my list before continuing, thanks :o)

[19:28] *** Ven joined
[19:28] <Ven> FROGGS: ah, okay

[19:28] <Ven> well, I hope you can find something in that..

[19:30] <FROGGS> Ven: wikipedia is informative to get the basics, and the fine tunings happens with code samples and real libraries

[19:33] <cxreg> it looks like clang (libc++) does some weird stuff around short string optimization that you'll need to handle

[19:35] <zostay> m: "".split("/").perl.say

[19:35] <camelia> rakudo-moar 73d6f7: OUTPUT«("",)␤»

[19:37] *** koo6 joined
[19:39] *** Foxcool_ joined
[19:41] *** Foxcool left
[19:41] *** eli-se joined
[19:42] <eli-se> hi

[19:45] <masak> \o

[19:45] *** diana_olhovik___ joined
[19:47] *** diana_olhovik_ left
[19:47] <Ven> hi eli-se 

[19:49] *** zakharyas joined
[19:50] *** Foxcool_ left
[19:52] <dalek> roast: 55dbaf4 | usev6++ | S12-methods/parallel-dispatch.t:

[19:52] <dalek> roast: Use unique ticket number RT #124513

[19:52] <dalek> roast: review: https://github.com/perl6/roast/commit/55dbaf4579

[20:05] *** andreoss joined
[20:14] *** diana_olhovik___ left
[20:16] *** dolmen joined
[20:22] *** darutoko left
[20:32] *** diana_olhovik_ joined
[20:32] <itz> eurovision-- # good reason to be American

[20:34] *** zakharyas left
[20:35] <moritz> it's not like it's a compulsory event for all Europeans :-)

[20:36] <Juerd> moritz: I wish you would have told me that years ago!

[20:36] <Ven> I admit to never have watched a single eurovision

[20:36] <Ven> and I very much intend to keep it that way...

[20:37] * moritz kinda likes it, though not every song

[20:42] <andreoss> http://doc.perl6.org/language/5to6 

[20:43] <andreoss> what does syntax highlighting there?

[20:43] <[ptc]> andreoss: pygments

[20:43] <[ptc]> andreoss: to be more explicit: http://pygments.org/

[20:44] <[ptc]> gnight #perl6

[20:44] <andreoss> wouldn't Text::VimColor be more proper? 

[20:44] <andreoss> *colour

[20:45] <moritz> andreoss: feel free to port it Perl 6, then I'll use it :-)

[20:46] <itz> I'm off work shortly :D and was planning on trying to highlight examples.perl6.org to p6-Text-Vimcolour

[20:46] <itz> moritz: there is a port in progress

[20:46] <moritz> \o/

[20:47] <andreoss> itz: i almost finished it already 

[20:48] <itz> andreoss++

[20:56] <jdv79> looks like HTML::Parser::XML is forever looping on tests

[21:01] *** diana_olhovik_ left
[21:05] <dalek> roast: e1ee43f | usev6++ | S05-metachars/tilde.t:

[21:05] <dalek> roast: Use existing ticket number RT #62086

[21:05] <dalek> roast: review: https://github.com/perl6/roast/commit/e1ee43f6ee

[21:05] *** virtualsue left
[21:10] *** virtualsue joined
[21:37] *** adu joined
[21:37] <ugexe> hmm, if i try to submit a test report with Panda::Reporter it errors 'This type cannot unbox to a native string' inside its 'to-json' method. Specifically anything with $*KERNEL causes it (removing those keys allows it to work as expected). If I run method 'to-json' directory, it does not error... panda is able to submit test reports just fine with it... and if use $*KERNEL.* (for each method of $*KERNEL used

[21:38] <ugexe>  in to-json) before Panda::Reporter.submit it will work. Its as if $*KERNEL attributes and/or methods are being lazier than they should be?

[21:42] <ugexe> To be more clearn, if I delete these lines I can 'use Panda::Reporter' and Panda::Reporter.new a report from a script just fine: https://github.com/tadzik/panda/blob/master/lib/Panda/Reporter.pm#L68-L74

[21:44] *** [Sno] left
[21:44] *** [Sno] joined
[21:44] <andreoss> should rakudobrew break the current setup when rebuilding?

[21:45] <ugexe> andreoss: rakudobrew has been linking to the wrong directory for me since the last rakudobrew update

[21:45] *** diana_olhovik_ joined
[21:45] <ugexe> i've been manually coping .rakudobrew/moar-nom/install/bin/perl6 to .rakudobrew/bin

[21:49] <ugexe> suppose i better send a pr for that

[21:52] *** smls left
[21:53] *** diana_olhovik_ left
[22:07] *** pierrot joined
[22:11] *** rhr joined
[22:12] *** kurahaupo1 left
[22:13] *** espadrine left
[22:17] *** mj41 left
[22:42] *** adu left
[22:44] *** virtualsue left
[22:49] *** virtualsue joined
[22:54] <masak> 'night, #perl6

[22:56] <Ven> \o

[23:04] *** kaare__ left
[23:06] *** cognominal joined
[23:08] <andreoss> prove gets confused when finds ok inside quoted string 

[23:11] *** RabidGravy left
[23:13] *** kurahaupo1 joined
[23:14] *** dolmen left
[23:16] *** cognominal left
[23:18] *** spider-mario left
[23:29] <andreoss> https://paste.debian.net/182753/

[23:30] <andreoss> how do i investigate this segfault?

[23:36] *** grondilu left
[23:38] <timotimo> andreoss: please configure a moarvm with --debug=3

[23:39] *** pmurias left
[23:41] <andreoss> with Configure.pl?

[23:45] *** eli-se left
[23:57] *** telex left
[23:57] *** Ven left
[23:57] *** Ven joined
[23:58] *** telex joined
[23:59] *** Ven left
