[00:01] <timotimo> oh?

[00:01] <timotimo> you mean as in: "that's ugly"?

[00:01] <rjbs> http://irclog.perlgeek.de/perl6/2015-04-02#i_10382903

[00:01] <rjbs> I also have no idea what it means or why it needs to be there, but that may just mean that beginners need to learn more stuff than I have yet.

[00:02] *** mr-foobar left
[00:03] <timotimo> it's the difference between [1, 2, 3] and (1, 2, 3), for example

[00:03] <timotimo> m: my @test = 1, (4, 5, 6), 10; say @test.perl

[00:03] <camelia> rakudo-moar 87b1ee: OUTPUT«[1, 4, 5, 6, 10]<>␤»

[00:03] *** rarara left
[00:03] <timotimo> m: my @test = 1, [4, 5, 6], 10; say @test.perl

[00:03] <camelia> rakudo-moar 87b1ee: OUTPUT«[1, [4, 5, 6], 10]<>␤»

[00:03] <timotimo> m: my @test = 1, [4, 5, 6]<>, 10; say @test.perl

[00:03] <camelia> rakudo-moar 87b1ee: OUTPUT«[1, 4, 5, 6, 10]<>␤»

[00:03] <timotimo> the <> gets the (...) out of a [...], more or less

[00:04] <rjbs> Blah.

[00:04] <timotimo> so flattening vs non-flattenin, basically

[00:06] <rjbs> m: say {:a(1)}.perl; my %h = {:a(1)}.perl; say %h.perl

[00:06] <camelia> rakudo-moar 87b1ee: OUTPUT«{:a(1)}␤Odd number of elements found where hash initializer expected␤  in block <unit> at /tmp/Xu8ss4GztQ:1␤␤»

[00:06] <rjbs> oops

[00:06] <rjbs> m: say {:a(1)}.perl; my %h = {:a(1)}; say %h.perl

[00:06] <camelia> rakudo-moar 87b1ee: OUTPUT«{:a(1)}␤{:a(1)}<>␤Saw 1 call to deprecated code during execution.␤%h = itemized hash called at:␤  /tmp/Hz41QBqcm3, line 1␤Deprecated since v2014.7, will be removed with release v2015.7!␤Please use %h = %(itemized hash) instead.␤»

[00:06] <rjbs> Hm.

[00:07] <rjbs> Why don't I see that warning when I'm running my perl6?

[00:07] <rjbs> But the real thing I wanted ot ask is: why does only the latter get <>?

[00:07] <rjbs> Oh, because deprecations come outa at the end.

[00:09] *** mr-foobar joined
[00:10] *** Akagi201_ left
[00:15] *** vendethiel joined
[00:16] *** jack_rabbit left
[00:36] *** vendethiel left
[00:39] <rjbs> Here is the terrible perl6 program I wrote to build a "hello world" program binary that runs on the Z-Machine: https://github.com/rjbs/ZMachine-Whiz/blob/master/whiz.p6

[00:39] <timotimo> i know pretty much nothing about how a z machine works

[00:40] <timotimo> what is ZSCII?

[00:40] <rjbs> It's the internal string representation used by Z-Machine.  More in a sec...

[00:40] * rjbs pushes a tiny improvement.

[00:41] <rjbs> Z-Machine text has a character set with 10 bits of characters, but inpractice only 255 codepoints are used.  Characters are encoded into a five-bit-based representation, with three quints packed into a word, with the high bit marking end-of-string.

[00:43] <timotimo> ah, ok

[00:44] <timotimo> that probably works a bit better than pascal-style strings

[00:46] <rjbs> The high bit thing isn't bad, but everything else is a mild pita.

[00:47] <timotimo> mhm

[00:47] <timotimo> weird packing

[00:49] <rjbs> timotimo: ZSCII: http://rjbs.manxome.org/rubric/entry/2014

[00:50] *** BenGoldberg left
[00:51] <timotimo> thanks :)

[00:52] *** vendethiel joined
[01:04] <colomon> rjbs++

[01:04] <timotimo> i'm currently playing a lot with valgrind

[01:04] <rjbs> next, I may port p5 ZMachine::ZSCII to replace my lousy p6 one.

[01:04] <timotimo> the interaction between the GC and the nursery and such is ... interesting %)

[01:08] <timotimo> i may just call "no more error reports for now please" before the gc starts and "you can resume error reporting again!" after the gc is finished

[01:14] *** vendethiel left
[01:20] *** raiph joined
[01:21] *** Akagi201 joined
[01:46] *** Akagi201 left
[01:47] *** Akagi201 joined
[01:48] *** Akagi201_ joined
[01:48] *** Akagi201 left
[01:52] *** hobbs left
[01:54] *** hobbs joined
[01:58] <rjbs> I'm looking for, but failing to find, docs on an enumerated type.  What's the simplest way to declare an attribute that's known to be one of three values?

[01:58] <rjbs> Algebraic or choice-of-string, either way. :)

[02:01] <raiph> rjbs: http://doc.perl6.org/type/EnumMap ?

[02:07] <rjbs> Documentation is a bit thin, but I'm not sure that's what I want.  I want, say:  has OneOf<<pie cake pudding>> $.favorite;

[02:08] <rjbs> or: type Dessert = Pie | Cake | Pudding; if I may wax a bit MLish.

[02:09] <rjbs> I will read any reply happily in the morning.  I am falling asleep at my terminal.  Good night!

[02:10] <leedo_> rjbs: i think it could be done with a subtype, but i don't see a way to do it as one line

[02:14] <japhb> .tell rjbs If only keys matter: 'enum Foo < Bar Baz Quux >;' or if you need to pick specific values, use pairs: 'enum Foo :Bar(-12), Baz(16), Quux(42);'

[02:14] <yoleaux> japhb: I'll pass your message to rjbs.

[02:14] <japhb> Dangit

[02:14] <leedo_> ah, maybe has Str $.favorite where /Cake|Pie|Pudding/; ?

[02:14] <japhb> .tell rjbs (sorry, typo) If only keys matter: 'enum Foo < Bar Baz Quux >;' or if you need to pick specific values, use pairs: 'enum Foo :Bar(-12), :Baz(16), :Quux(42);'

[02:14] <yoleaux> japhb: I'll pass your message to rjbs.

[02:16] <japhb> .tell rjbs Then you can use the enum type in declarations:  'my Foo $choices;' or 'has Foo $subtype;'

[02:16] <yoleaux> japhb: I'll pass your message to rjbs.

[02:17] *** noganex joined
[02:18] *** cognominal left
[02:21] *** noganex_ left
[02:24] *** rmgk_ joined
[02:24] *** rmgk is now known as Guest69227

[02:24] *** Guest69227 left
[02:24] *** rmgk_ is now known as rmgk

[02:27] *** jack_rabbit joined
[02:36] *** dayangkun joined
[02:39] *** BenGoldberg joined
[02:50] *** jack_rabbit left
[02:57] *** jack_rabbit joined
[03:01] *** raiph left
[03:10] <ugexe> m: class A {}; class B {}; class C {}; class D {}; my $a where A|B|C; $a = A.new; say 1; my $b where A|B|C; $b = D.new;

[03:10] <camelia> rakudo-moar 87b1ee: OUTPUT«1␤Type check failed in assignment to '$b'; expected '<anon>' but got 'D'␤  in block <unit> at /tmp/TKohyOC9Xr:1␤␤»

[03:12] *** yeahnoob joined
[03:22] *** tinyblak joined
[03:24] *** kaare_ joined
[03:39] *** TimToady left
[03:43] <leedo_> ugexe: i noticed that when trying it on the repl as well

[03:44] <leedo_> m: my Str $a where /A/; $a = "B";

[03:44] <camelia> rakudo-moar 87b1ee: OUTPUT«Type check failed in assignment to '$a'; expected '<anon>' but got 'Str'␤  in block <unit> at /tmp/QIOhSPg7_H:1␤␤»

[03:44] <leedo_> oh, guess that is actually a better error message than i remembered!

[03:46] *** Sqirrel left
[03:47] *** Sqirrel joined
[03:54] *** yeahnoob left
[03:54] *** telex left
[03:56] *** telex joined
[04:12] *** TimToady joined
[04:17] *** TimToady left
[04:17] *** TimToady joined
[04:21] *** jack_rabbit left
[04:22] <BenGoldberg> m: class A {}; class B {}; class C {}; class D {}; my $a where A|B|C; $a .= new; $a.say;

[04:22] <camelia> rakudo-moar 87b1ee: OUTPUT«Type check failed in binding mutate; expected 'Any' but got '<anon>'␤  in block <unit> at /tmp/ZPA6sNVNr2:1␤␤»

[04:23] <BenGoldberg> m: class A {}; my $a where A; $a .= new;

[04:23] <camelia> rakudo-moar 87b1ee: OUTPUT«Type check failed in binding mutate; expected 'Any' but got '<anon>'␤  in block <unit> at /tmp/KhChI3MHYG:1␤␤»

[04:23] <BenGoldberg> m: class A {}; class B {}; my $a where A; $a = B.new;

[04:23] <camelia> rakudo-moar 87b1ee: OUTPUT«Type check failed in assignment to '$a'; expected '<anon>' but got 'B'␤  in block <unit> at /tmp/xQkN4YeBW7:1␤␤»

[04:28] *** hobbs left
[04:33] *** konsolebox joined
[04:34] *** hobbs joined
[04:36] *** vendethiel joined
[04:52] *** skids left
[05:25] *** BenGoldberg left
[05:36] *** araujo joined
[05:36] *** araujo left
[05:45] *** Psyche^ joined
[05:49] <[Tux]> o/ good morning perl6 crowd

[05:50] *** Patterner left
[05:51] <[Tux]> Though I am (very) happy to see panda (and thus Slang::Tuxic) back in business again, Inline::Perl5 shows some new fails

[05:52] *** vendethiel left
[05:56] <[Tux]> https://gist.github.com/Tux/8fc93bc87e4e60a1c83e

[06:00] *** rindolf joined
[06:04] *** araujo joined
[06:05] *** araujo left
[06:06] *** hobbs left
[06:06] *** domidumont1 joined
[06:08] *** hobbs joined
[06:10] *** domidumont1 left
[06:11] *** domidumont joined
[06:11] *** araujo joined
[06:12] *** araujo left
[06:13] *** cibs joined
[06:15] *** vendethiel joined
[06:16] *** diana_olhovik_ joined
[06:25] <masak> morning, #perl6! \o

[06:27] *** tinyblak left
[06:28] *** quester joined
[06:30] *** grondilu joined
[06:35] <moritz> \o masak

[06:37] *** vendethiel left
[06:40] *** TimToady left
[06:44] *** tinyblak joined
[06:48] *** tinyblak left
[06:48] *** tinyblak joined
[06:50] <labster> morning /^m/

[06:56] *** ribasushi left
[06:56] *** cognominal joined
[06:58] *** hobbs left
[06:59] *** hobbs joined
[07:00] *** konsolebox left
[07:00] *** ribasushi joined
[07:11] *** RabidGravy joined
[07:12] *** vendethiel joined
[07:14] *** TimToady joined
[07:15] *** Foxcool joined
[07:16] *** abraxxa joined
[07:16] *** Tux__ joined
[07:16] *** |Tux| left
[07:17] * masak is proud to be a card-carrying /^m/ member

[07:22] *** Rounin joined
[07:24] <nwc10> ENOEM :-)

[07:26] *** Sqirrel left
[07:27] <RabidGravy> marning

[07:29] <labster> morning /\d$/, *.condiment

[07:32] *** _mg_ joined
[07:34] *** rindolf left
[07:34] *** vendethiel left
[07:35] *** Tux__ is now known as |Tux|

[07:36] *** quester left
[07:38] <labster> I wrote a blog comparing the major revisions in Python 3 and PHP 6^H7 to Perl 6, mainly about the scope of the projects and the community response. http://blog.brentlaabs.com/2015/05/three-tales-of-second-system-syndrome.html

[07:38] <labster> Not sure if it's any good, but I was somewhat inspired after reading some insults about PHP on Hacker News.

[07:42] *** [Tux] left
[07:42] *** rurban joined
[07:47] *** rurban left
[07:48] *** Gruber joined
[07:50] *** kaare__ joined
[07:51] *** Grrrr left
[07:51] *** sue__ left
[07:51] *** sue_ joined
[07:51] *** kaare_ left
[07:51] *** rurban joined
[07:52] <dalek> doc: 7dcccbe | (Jonathan Stowe)++ | lib/Language/concurrency.pod:

[07:52] <dalek> doc: earliest

[07:52] <dalek> doc: review: https://github.com/perl6/doc/commit/7dcccbe355

[07:52] <dalek> doc: 2460f90 | (Jonathan Stowe)++ | / (3 files):

[07:52] <dalek> doc: Merge branch 'master' of github.com:perl6/doc

[07:53] <dalek> doc: review: https://github.com/perl6/doc/commit/2460f905a7

[07:53] <dalek> doc: ac5f0a4 | (Jonathan Stowe)++ | lib/ (4 files):

[07:53] <dalek> doc: Merge branch 'master' of github.com:perl6/doc

[07:53] <dalek> doc: review: https://github.com/perl6/doc/commit/ac5f0a4f2e

[07:53] <DrForr> If the insults are from "fractal of bad design" then I'd look for fresher insult material :)

[07:53] <dalek> doc: 679c478 | (Jonathan Stowe)++ | lib/Language/testing.pod:

[07:53] <dalek> doc: replace _ names with hyphen ones

[07:53] <dalek> doc: review: https://github.com/perl6/doc/commit/679c478f2e

[07:54] *** [Tux] joined
[07:59] *** Ven joined
[08:00] *** rurban left
[08:04] *** darutoko joined
[08:04] *** brrt joined
[08:07] <RabidGravy> labster, good article

[08:14] <RabidGravy> (shared to Perl Developers group on FB)

[08:14] <DrForr> So I just saw.

[08:15] <RabidGravy> if nothing else it lures out the strange PHP advocates

[08:16] *** Ven left
[08:16] *** Ven_ joined
[08:18] *** espadrine joined
[08:18] *** cibs left
[08:19] <lizmat> good morning, #perl6!

[08:19] <lizmat> labster++   # excellent blog post

[08:23] *** cibs joined
[08:26] *** bjz joined
[08:28] <masak> where? where? :)

[08:30] <labster> Thanks lizmat, RabidGravy.  I was a little worried that my article appeared in Perl Weekly before I had any feedback.

[08:31] <lizmat> masak: http://blog.brentlaabs.com/2015/05/three-tales-of-second-system-syndrome.html

[08:31] <labster> Also trolling PHP advocates is something I want to do after every time I have to program something in PHP.

[08:32] <DrForr> I'm convinced PHP has more to do with Stockholm Syndrome than actual programming.

[08:34] <jnthn> morning, #perl6

[08:34] <RabidGravy> marnin'

[08:35] <lizmat> jnthn o/

[08:36] <nwc10> dear Tiobe, where is last month's article? Oh, wait, I see...

[08:36] *** bjz left
[08:37] *** fhelmberger joined
[08:37] <jnthn> .oO( "This is our biased estimate" )

[08:37] <nwc10> I guess they're doing a year-on-year comparison because they've fixed a bug, as COBOL is now at 27

[08:38] <nwc10> you're too kind.

[08:38] <nwc10> science is stuff you can repeat.

[08:38] <nwc10> Tiobe is not science. It's not even close.

[08:38] <nwc10> at least you can put real shit on your roses.

[08:38] <DrForr> Voudoun.

[08:41] <RabidGravy> the PHP is most of the reason I started https://github.com/jonathanstowe/Emitria infact now given that it's likely not to be finished this year I am probably going to actually do it in P6

[08:42] <RabidGravy> of course more yak shaving in the latter course

[08:45] *** cognominal left
[08:46] <DrForr> Oh, that's why you were asking about icecast on that particular FB thread.

[08:46] <labster> RabidGravy: them yaks aren't gonna shave themselves.

[08:48] <RabidGravy> DrForr, yep ;-) I have an interim strategy based on a NativeCall binding to libshout but it would be nice to have it done completely natively

[08:49] <DrForr> I'll probably put up readline this weekend...

[08:49] *** vendethiel joined
[08:50] <RabidGravy> yay!

[08:50] *** risou is now known as risou_awy

[08:50] *** risou_awy is now known as risou

[08:51] <DrForr> I haven't gotten around to the callback setup, but the binding doesn't crash.

[08:52] <DrForr> It needs documentation, that'll be this week.

[08:52] <DrForr> And the ANTLR binding handles basic stuff as well.

[08:53] <RabidGravy> :-)

[08:53] <Ven_> \o, #perl6

[08:54] <RabidGravy> erp

[08:54] * DrForr considers a NativeCall binding for libmarpa.

[08:54] *** laouji joined
[08:55] *** [Sno] joined
[08:56] *** pauekn joined
[08:56] *** pauekn is now known as Pauekn

[08:59] <lizmat> jnthn: can I safely die in a Lock.protect block ?

[08:59] <btyler> DrForr: it would probably be a good thing to drop into #marpa and ask about that -- I know someone asking about python bindings recently received a message which wasn't quite "yes, go for it!", since there's a lot of work going on to modularize and de-XS the user-facing bits of marpa (as I understand it)

[09:00] <DrForr> Thanks.

[09:00] <|Tux|> who to poke for NativeCall (Inline::Perl5)?

[09:00] <jnthn> lizmat: Yeah, the LEAVE should make sure the lock is released.

[09:00] *** bjz joined
[09:01] <btyler> (I started lurking in #marpa because I had a similar brainwave about NativeCall bindings for it)

[09:01] <jnthn> lizmat: Or however Lock.protect implements it. But it has release-on-LEAVE semantics, anyway.

[09:01] <lizmat> and that LEAVE is added automagically, right ?

[09:01] <lizmat> ok

[09:01] <DrForr> Pretty tiny channel.

[09:02] <lizmat> jnthn: if a Lock.protect block is in a sub, I should be able to return out of it, or not?

[09:02] *** perlvim joined
[09:02] <btyler> yeah. mostly a message distribution point for the author to mention what's going on and solicit feedback on ideas for areas to focus on

[09:03] <btyler> but active more days than not, I'd say

[09:03] <lizmat> .oO( I just saw a 'Attempt to return outside of any Routine' :-( )

[09:04] <jnthn> lizmat: Should be able to provided you aren't doing something crazy like being in a start block :)

[09:05] <lizmat> hmmm... will try to reproduce later

[09:06] <jnthn> OK. I'm planning to work on concurrency things a bit later today

[09:06] <btyler> DrForr: here's the log about python bindings: http://irclog.perlgeek.de/marpa/2015-04-29#i_10521295

[09:06] <|Tux|> https://gist.github.com/Tux/8fc93bc87e4e60a1c83e just to draw jnthn's attention :P\

[09:07] <DrForr> Thanks, reading.

[09:09] <jnthn> [Tux]: Are those with RT #s considered still not fixed?

[09:09] <|Tux|> one sec. those are uncolored

[09:10] <jnthn> But the gist is colorless!

[09:10] <|Tux|> 1, 2, 4, 6, and 13 are fixed

[09:10] <|Tux|> https://gist.github.com/Tux/8fc93bc87e4e60a1c83e

[09:10] <RabidGravy> jnthn, I was going to look at Channel::EARLIEST later, if you're going to be in there I'll leave it a bit

[09:11] <jnthn> RabidGravy: No, I was planning to look for lower level issues than that.

[09:11] * |Tux| currently unale to create screenshot :(

[09:11] <RabidGravy> okay cool

[09:13] *** vendethiel left
[09:15] <|Tux|> screenshot /should/ be available on http://tux.nl/Files/20150504111202.png

[09:16] <jnthn> [Tux]: It ain't but no worries.

[09:16] * jnthn can delete lines from text :)

[09:16] <lizmat> can anybody tell me *why* PERL6LIB/RAKUDOLIB use ":" (or ";" on Win) as path separator, instead of just something like "," ?

[09:16] <lizmat> is that something todo with distributions needing that?  or some OS's ?

[09:17] <|Tux|> jnthn, I am more worried about the errors at the bottom of that gist than I am about the problems listed in the header

[09:18] <nwc10> dear wise ones, is there a thing for which the assumption is "as soon as you figure out the rules, they change them" ?

[09:19] <lizmat> Heisenbug ?

[09:21] <nwc10> anything more sentient than that?

[09:21] *** vendethiel joined
[09:21] <RabidGravy> nwc10, see Kafka's The Trial for reference

[09:21] <DrForr> 42.

[09:22] <moritz> nwc10: the card game Mao (which debian developers like to play during debconf)

[09:22] *** TimToady left
[09:22] <moritz> (though it's more like "if somebody has figured out the rules, and won this round, they change the rules")

[09:23] *** diana_olhovik_ left
[09:24] <jnthn> nwc10: The Perl 6 design :P

[09:26] <|Tux|> Fluxx changes the rules faster

[09:26] *** hobbs left
[09:27] *** hobbs joined
[09:30] <nwc10> on another channel on another network, Zefram stated that "the prologue to one of the HHGTTG books suggests that the universe does that"

[09:30] <nwc10> which was probably the thing in my head

[09:31] <DrForr> And that was the source of my 42 ref :)

[09:32] <nwc10> DrForr: too subtle.

[09:32] <nwc10> (sorrY)

[09:32] <DrForr> I regularly get accused of that. Or I would if I were less subtle.

[09:34] *** Ven_ left
[09:38] *** Tux__ joined
[09:39] *** |Tux| left
[09:40] *** rindolf joined
[09:48] <literal> labster: "In poker terms, Python 3 called, PHP 7 folded, and Perl 6 went all-in." <-- nice line, but wouldn't it make more sense to say "PHP 6 folded" ?

[09:49] *** perlvim left
[09:50] <labster> literal: Probably.  Fixing.

[09:52] <brrt> here's skepticism that 'this time, php7 will work'

[09:54] <dalek> doc: f5c65a2 | paultcochrane++ | htmlify.p6:

[09:54] <dalek> doc: Document svg-for-file()

[09:54] <dalek> doc: review: https://github.com/perl6/doc/commit/f5c65a25d3

[09:54] <dalek> doc: 15dc4a1 | paultcochrane++ | t/pod-htmlify.t:

[09:54] <dalek> doc: Add a test for svg-for-file()

[09:54] <dalek> doc: review: https://github.com/perl6/doc/commit/15dc4a12bf

[09:54] <dalek> doc: 2f987de | paultcochrane++ | / (2 files):

[09:54] <dalek> doc: Move svg-for-file() into Pod::Htmlify

[09:54] <dalek> doc: review: https://github.com/perl6/doc/commit/2f987de4dc

[09:54] <dalek> doc: a4f2932 | paultcochrane++ | lib/Pod/Htmlify.pm6:

[09:54] <dalek> doc: Remove superfluous use of file handle in svg-for-file

[09:54] <dalek> doc: review: https://github.com/perl6/doc/commit/a4f2932a11

[09:54] <dalek> doc: 086dcee | paultcochrane++ | lib/Pod/Htmlify.pm6:

[09:54] <dalek> doc: Document routines in Pod::Htmlify

[09:54] <dalek> doc: review: https://github.com/perl6/doc/commit/086dceef78

[09:54] <dalek> doc: fd8520f | paultcochrane++ | lib/Language/ (2 files):

[09:54] <dalek> doc: Merge branch 'master' of github.com:perl6/doc

[09:54] <dalek> doc: review: https://github.com/perl6/doc/commit/fd8520f359

[09:54] *** TimToady joined
[09:55] <lizmat> down to 1 failing spectest file  :-)

[09:56] <labster> :-) indeed

[09:56] <brrt> \o/

[09:56] *** brrt left
[09:59] <labster> good night, #perl6

[09:59] <lizmat> good night, labster!

[10:05] *** vendethiel left
[10:10] *** tinyblak left
[10:14] *** laouji left
[10:14] *** tinyblak joined
[10:16] <ab5tract_> lizmat: regarding ':' delimited paths, I would just assume that it reflects posix $PATH

[10:17] <lizmat> yeah, put PERL6LIB/RAKUDOLIB only have Perl6 internal uses, so it doesn't matter what delimiter is used, is my assumption

[10:17] <lizmat> *but

[10:19] <ab5tract_> lizmat: agreed. and one could argue that ':' is not a good choice because it is a directory delimiter in some OSes/FSes/

[10:19] <lizmat> and it is part of Foo::Bar notation  :-)

[10:19] <jnthn> I think making it follow the same convention for PATH makes some sense.

[10:19] <ab5tract_> we can make it futureproof with a unicode symbol :)

[10:19] <jnthn> For one 'cus we already have to deal with that separator

[10:19] <lizmat> making it different between OS's makes sense ?

[10:20] *** kd` joined
[10:20] <jnthn> i'd say so, then it's just "parsed the same way your OS's idea of PATH is"

[10:20] <jnthn> Rather than another different notation/convention

[10:21] <lizmat> well, I would like to make it a comma over all OS's

[10:21] <kd`> the documentation on http://rakudo.org/how-to-get-rakudo/ needs some love.  How do I contribute?

[10:24] <kd`> mostly seems the heading structure that is wrong

[10:25] *** Isp-sec joined
[10:26] <nine> lizmat: but comma is also a valid character in a directory name

[10:26] <Juerd> 12:20 < jnthn> i'd say so, then it's just "parsed the same way your OS's idea of PATH is"

[10:26] <Juerd> PATH is a shell thing, not an OS thing.

[10:26] <Juerd> And it's insane to even try and figure out which shell Perl was started from :D

[10:26] <nine> [Tux]: Inline::Perl5 tests fine here?

[10:27] <jnthn> Juerd: Is this pedantry or do you actually have a real world example we have to care about? :)

[10:27] <Tux__> the tests itself do, but when used with Text::CSV_XS it doesn't :/

[10:27] <Juerd> jnthn: Pure pedantry, of course

[10:27] <jnthn> Ah, phew :)

[10:27] *** Tux__ is now known as |Tux|

[10:27] <nine> Tux__: so I'm missing some test case there. Could you maybe golf it down?

[10:28] <|Tux|> I'll try that instantly :)

[10:28] <lizmat> nine: so is ":", at least on OS/X:

[10:28] <lizmat>  mkdir "foo:blah"

[10:28] <lizmat> LizyPro:rakudo.moar liz$ ls -lsd foo:blah

[10:28] <lizmat> 0 drwxr-xr-x  2 liz  macports  68 May  4 12:27 foo:blah

[10:29] <Juerd> jnthn: Although in fish, PATH is not colon separated.

[10:29] <nine> lizmat: same on Linux. So I wonder, why : was chosen for $PATH and how other programs deal with that

[10:30] *** Ven_ joined
[10:30] <jnthn> Probably DIHWIDT :)

[10:32] <Juerd> jnthn: http://juerd.nl/i/938760ddfbe892c194cc2ed6fa0b492b.png  fish has arrays.

[10:33] <Juerd> So, I guess it's both: I was being pedantic, but I do have a real world example. I don't know if you have to care about that one... :)

[10:33] <jnthn> Wow. :)

[10:34] <Juerd> I love fish but I use bash because fish doesn't have the reverse-incremental search (^R)

[10:42] *** TimToady left
[10:42] *** Akagi201_ left
[10:46] *** TimToady joined
[10:49] <RabidGravy> kd, rakudo.org is on wordpress it appears so I guess it's get someone to give you the keys ;-)

[10:50] *** TimToady left
[10:51] *** vendethiel joined
[10:59] <|Tux|> nine, is this enough? https://gist.github.com/Tux/9d34d87eea19aa7d5dd9

[10:59] <lizmat> spectest clean now, working on panda now: progress: https://gist.github.com/lizmat/8eb1c68396157f8897ca

[11:00] <|Tux|> lizmat++; # work on panda

[11:00] <|Tux|> may I suggest «panda Inline::Perl5» to mean «panda install Inline::Perl5», like cpan?

[11:01] <nwc10> if so, please "ban" (or at least refuse to index) any distro name which could be confused with a panda command.

[11:04] <lizmat> nwc10: why?  I mean, any serious installer would use "install $module" anyway

[11:04] <RabidGravy> hahaha, yeah I so remember that one from cpan about 10 years ago

[11:04] <lizmat> this is about making it easier for the casual user

[11:04] <RabidGravy> "cpan install Foo" would mysteriously try to install some package that had a module "install" in it

[11:04] <nwc10> for the avoidance of confusion. Which has existed in Perl 5

[11:05] <lizmat> and anyway, there will be no central index for P6 modules anyway

[11:05] <nwc10> so which index is panda using?

[11:05] <lizmat> well, a temporary one until we got S22 implemented  :-)

[11:05] <nwc10> the problem is as RabidGravy described better than I did.

[11:05] <lizmat> ok, so let's not make the same mistake

[11:06] <nwc10> exactly. I meant "not making the same mistake."

[11:06] <lizmat> |Tux|: perhaps you need to make an alias "pi" that does "panda install" ?

[11:06] <nwc10> the easier-for-the-user feels the right choice to me

[11:06] <nwc10> but the upshot is that to avoid ambugiuty, you can't then have certain distro names. At least, not as recognised by panda. Or life gets very confusing.

[11:08] <nine> |Tux|: thanks. Can repro with that and will have a look at it

[11:08] <lizmat> so we agree that to install a module Foo with panda, "panda install Foo" would be the only way ?

[11:09] *** RabidGravy left
[11:12] * |Tux| wisely holds his vote to himself

[11:12] <nwc10> no, I think was trying to say the other "panda Foo" is much better.

[11:12] <nwc10> But the upshot of permitting that, is that one needs to make a decision about what happens if someone names a module "bar", where "panda bar ..." is a valid command for panda

[11:13] <lizmat> indeed, and I don't want that ambiguity

[11:13] <lizmat> so if you want to install a module with panda, you will have to include the word "install"

[11:13] <lizmat> and all ambiguity is gone, or am I missing the point here?

[11:13] <lizmat> lunch&

[11:13] *** vendethiel left
[11:14] <|Tux|> user experience: if there is no ambiguity, why not support it?

[11:14] <|Tux|> «panda install» is minvalid as such (nothing to install)

[11:15] <|Tux|> so is «panda bar» currently

[11:15] <|Tux|> so, as a alternative, "install" could be default is only one single argument is passed

[11:18] * Ven_ far prefers an explicit "install" to mean "install" :-)

[11:18] *** TimToady joined
[11:20] <nine> |Tux|: I golfed it further down. Seems like passing empty strings to P5 is broken.

[11:21] <|Tux|> glad to have been of assistance

[11:21] <nine> perl6 -e 'use Inline::Perl5; my $p5 = Inline::Perl5.new; $p5.run(q/$| = 1; sub test { print $_[0]; };/); $p5.call("test", "");'

[11:21] <nine> xf{5

[11:22] <Ven_> haha

[11:24] *** xfix joined
[11:24] *** xfix left
[11:24] *** xfix joined
[11:42] *** rurban joined
[11:42] *** Akagi201 joined
[11:44] *** raiph joined
[11:49] <dalek> Inline-Perl5: 8b3af84 | (Stefan Seifert)++ | / (2 files):

[11:49] <dalek> Inline-Perl5: Fix passing empty strings and bufs to Perl 5.

[11:49] <dalek> Inline-Perl5: 

[11:49] <dalek> Inline-Perl5: A 0 len parameter passed to newSVpv makes perl5 use strlen() to

[11:49] <dalek> Inline-Perl5: determine len. We don't need this magic anymore, since we determine the

[11:49] <dalek> Inline-Perl5: length of the buffer in Perl 6 code already for binary safety.

[11:49] <dalek> Inline-Perl5: 

[11:49] <dalek> Inline-Perl5: Works around an apparent bug in Rakudo. The pointer to the supposedly

[11:49] <dalek> Inline-Perl5: empty string points to random garbage now.

[11:49] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/8b3af8457b

[11:49] <nine> |Tux|: ^^^

[11:50] * |Tux| (re)builds ...

[11:51] <|Tux|> sounds nasty

[11:52] <lizmat> nine: could you golf the apparent rakudo bug and rakudobug it ?   :-)

[11:52] <lizmat> does anybody use DESTDIR with panda??

[11:52] <nine> Well I'm not sure if it really is a bug in Rakudo. It's not an empty string but an empty blob8 at that point. And with Bufs/blobs one has to handle the length of the buffer by oneself anyway. Assumptions of NULL termination may be just off.

[11:55] <lizmat> %*ENV<RAKUDOLIB> = "$destdir.^name()=$destdir" if $destdir.^can('install');  # if $destdir isa Str, how can this ever fire ???

[11:58] *** Ven_ left
[12:00] *** airdisa joined
[12:09] *** xinming_ left
[12:09] *** xinming joined
[12:10] * lizmat is puzzled by "Missing or wrong version of dependency 'p6capturelex' (from 'lib/Shell/Command.pm')"

[12:10] <lizmat> p6capturelex?

[12:13] <jnthn> wtf...

[12:13] <jnthn> Looks like an error reporting fail of some kind

[12:13] <lizmat> yeah, a very confused panda

[12:14] <jnthn> Well, that error comes from the VM level

[12:14] *** Akagi201 left
[12:15] *** xinming left
[12:15] <lizmat> well, maybe it is all moot

[12:15] <lizmat> I have a diff for rakudo and a diff for panda, and together they work

[12:15] <jnthn> If you're getting that error, though, it probably is some version skew :)

[12:15] *** xinming joined
[12:16] <jnthn> But yeah, curious reported fail

[12:16] <lizmat> and take bare startup from .23 to .16 on my machine

[12:16] <lizmat> so I could push both now, or spend more time finding out why panda doesn't work with the diff on the rakudo without the diff

[12:17] <jnthn> lizmat: The win sounds worth it; I suspect we'll see the other issue again at some point

[12:17] <jnthn> lizmat: Do what you feel is best.

[12:17] <lizmat> I feel like pushing forward

[12:17] <lizmat> :-)

[12:20] <[Coke]> morningish

[12:21] *** Gruber is now known as Grrrr

[12:22] *** brrt joined
[12:22] <brrt> wow, hater news really deserved it's name today

[12:25] *** yoleaux left
[12:27] <tadzik> hmm, looks pretty civilized to me, if you're talking about labster's post

[12:28] <tadzik> for which a labster++ is well deserved :)

[12:28] <dalek> rakudo/nom: 3c5fe7f | lizmat++ | / (7 files):

[12:28] <dalek> rakudo/nom: Implement new @*INC handling

[12:28] <dalek> rakudo/nom: 

[12:28] <dalek> rakudo/nom: This reduces bare startup time by about 30% (.23 to .16 on my machine), and

[12:28] <dalek> rakudo/nom: running a spectest from 240 to 215 wallclock (1620 to 1435 CPU), again on my

[12:28] <dalek> rakudo/nom: machine.

[12:28] <dalek> rakudo/nom: 

[12:28] <dalek> rakudo/nom: List of features:

[12:28] <dalek> rakudo/nom: - @*INC / %*CUSTOM_LIB only contain strings, never any (other) object

[12:28] <dalek> rakudo/nom: - the separator between paths is now ","

[12:28] <dalek> rakudo/nom: - the separator between include path specification is now "#"

[12:28] <dalek> rakudo/nom: - all module loading code is now threadsafe (afaics)

[12:28] <dalek> rakudo/nom: - added RAKUDO_MODULE_DEBUG helper sub for module loading diag info

[12:28] <dalek> rakudo/nom: - added DISTRO.cur-sep to help with migration from older panda's

[12:28] <dalek> rakudo/nom: - adapted parse-include-spec sanity testing

[12:28] <dalek> rakudo/nom: 

[12:28] <dalek> rakudo/nom: We should now be ready to making 'use lib' a pragma and truly lexical.

[12:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3c5fe7f119

[12:28] <lizmat> *phew*

[12:28] <tadzik> :o

[12:28] <tadzik> lizmat++

[12:28] <nwc10> lizmat++

[12:28] *** rarara joined
[12:28] * colomon went through his (far too large) to-do list today, and discovered a bunch of to-do’s involving niecza still hanging around…

[12:28] <tadzik> so, how does that fix the panda problem?

[12:29] <nwc10> I'm not *comfortable* about the , bit, but it might turn out that I'm wrong and you're right.

[12:29] <nwc10> but that's not exactly a blocker on merging the awesomness

[12:29] <lizmat> tadzik: which panda problem?

[12:29] <lizmat> for the first time, an up-to-date perl6 and up-to-date panda actually work for me

[12:30] <lizmat> (in a long time)

[12:30] <tadzik> lizmat: the one we tried to track down on perlqah

[12:30] *** rarara left
[12:30] *** rararara joined
[12:30] <dalek> nqp: f8baa95 | jnthn++ | src/core/IO.nqp:

[12:30] <dalek> nqp: Make the join sub avoid boxing.

[12:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f8baa95871

[12:30] <dalek> nqp: a4d1d5f | jnthn++ | src/core/IO.nqp:

[12:30] <dalek> nqp: Make say/print/note do a single VM I/O op.

[12:30] <dalek> nqp: 

[12:30] <dalek> nqp: This means two operations on the same handle done by two threads will

[12:30] <dalek> nqp: come out ordered.

[12:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a4d1d5fbea

[12:30] <dalek> nqp: 3d9efcc | jnthn++ | src/core/testing.nqp:

[12:30] <dalek> nqp: Make 'ok' always do a single I/O operation.

[12:30] <dalek> nqp: 

[12:30] <dalek> nqp: Means t/concurrency/01-thread.t output will not be garbled.

[12:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3d9efccfc9

[12:31] <nine> wow, lizmat++ :)

[12:32] *** dayangkun left
[12:33] <lizmat> tadzik: my head hurts:  seen so many problem since, could you elaborate ?

[12:34] <tadzik> lizmat: about PERL6LIB not being respected, something

[12:34] <lizmat> ah, that should be fixed with the latest push to panda, I think

[12:34] <tadzik> well, the headhurt must be because of the memory of it, sorry for bringing it up

[12:34] <tadzik> oh, /me looks

[12:35] <tadzik> ok, awesome :)

[12:35] <lizmat> Ah, I see the Inline::Perl5 tests need some adjusting

[12:35] <jnthn> lizmat: My "make test" is rather explodey on everything doing a 'use Test'

[12:35] <brrt> maybe it's been reposted? the latest was just about as meanspirited / childish as i've read in a long time

[12:35] <lizmat> jnthn:  huh???

[12:36] <jnthn> lizmat: But when I run them individually at the command line with -Ilib they work out OK

[12:36] <lizmat> the only one failing for me is:

[12:36] <lizmat> t/04-nativecall/02-simple-args.t ..... Dubious, test returned 2 (wstat 512, 0x200)

[12:36] <lizmat> Failed 2/12 subtests 

[12:36] <lizmat> and that's a known issue ?

[12:36] <jnthn> lizmat: Everything from t\01-sanity\52-parse-include-spec.t on explodes here

[12:36] *** abraxxa left
[12:36] <lizmat> could you gist your ENV ?

[12:37] <Juerd> Verbing weirds language, but it greats anyway.

[12:37] *** abraxxa joined
[12:37] <jnthn> lizmat: https://gist.github.com/jnthn/4f8ea22ea1530259aa17

[12:37] *** Foxcool left
[12:37] <leedo_> perl6 starts up faster than perl -MMoose now :D

[12:38] <jnthn> lizmat: I notice these lines in t/harness:

[12:38] <jnthn> my $path_sep = $^O eq 'MSWin32' ? ';' : ':';

[12:38] <jnthn> $ENV{'PERL6LIB'} = join $path_sep, qw/ lib . /;

[12:38] <Juerd> leedo_: How much faster?

[12:38] <jnthn> lizmat: Was that the think you comma'd?

[12:38] <jnthn> *thing

[12:38] <leedo_> Juerd: 0.145 vs 0.164 here

[12:38] <lizmat> lemme check

[12:39] <Juerd> leedo_: Wow

[12:39] <lizmat> jnthn: yeah, that might be it

[12:40] <dalek> rakudo/nom: 31f3db1 | lizmat++ | t/harness:

[12:40] <dalek> rakudo/nom: Forgot to commafy one PERL6LIB ref

[12:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/31f3db1d9f

[12:42] <jnthn> lizmat: That helps. And "make test" down to 3s here now :)

[12:42] <jnthn> lizmat++ # nice startup improvement

[12:42] <timotimo> labster: is "to justify a much reduced scope new features for the next major version of PHP" a correct sentence? my brain has trouble parsing it

[12:44] <arnsholt> Accidentally a preposition, perhaps?

[12:48] *** raiph left
[12:50] <lizmat> nine: INline::Perl5 assumed @*INC contained objects, fixing that now

[12:50] <timotimo> Juerd: in fish you can just press arrow up after typing something and that'll give you something very similar to ^R

[12:50] <timotimo> i use that all the time

[12:50] <nine> lizmat: thanks. Had a quick look, but I'm not sure what the replacement for files() is in our IO system

[12:51] *** Foxcool joined
[12:51] *** risou is now known as risou_awy

[12:51] *** risou_awy is now known as risou

[12:52] *** raiph joined
[12:52] <Juerd> timotimo: Very unsimilar if you're actually used to ^R. The difference is that incremental search is incremental, while fish has no support for incremental searching. If you press the arrow and continue typing, it won't continue searching for the longer substring.

[12:53] <Juerd> timotimo: I use ^R because I *don't* remember what I did before, so I don't know how much I have to type in order to have a sufficiently long substring for fish to match the line I wanted.

[12:53] *** diana_olhovik_ joined
[12:56] <timotimo> fair enough

[12:57] <dalek> Inline-Perl5: c4292b5 | lizmat++ | lib/Inline/Perl5.pm6:

[12:57] <dalek> Inline-Perl5: Fix breakage caused by @*INC only containing Str

[12:57] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/c4292b50ae

[12:57] <lizmat> should work with both this rakudo and pre @*INC == Str ones

[12:57] <timotimo> leedo_: how exactly do you measure startup for both?

[12:58] <leedo_> timotimo: probably in a very unscientific way :P -e ''

[12:58] <timotimo> i think -e '' is all right

[12:59] <lizmat> afk for a bit&

[12:59] *** RabidGravy joined
[13:00] <timotimo> i always do -e 'say 1' so that there's some actual parsing and compiling rather than just the empty CompUnit

[13:00] <timotimo> the tricky thing is that if you echo '' | perl6 you'll get the REPL that only loads the compiler after the user has actually typed in a command, so that startup time is massively smaller

[13:01] *** cognominal joined
[13:04] <[Coke]> so, what's the current state of REPL readline/linenoise? Should things be working on nom now?

[13:08] *** FROGGS joined
[13:08] <FROGGS> hello from an hotel

[13:10] <dalek> nqp: 5c54c73 | jnthn++ | t/concurrency/01-thread.t:

[13:10] <dalek> nqp: Remove a comment, now latest Moar doesn't hang.

[13:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5c54c7347a

[13:11] <timotimo> removing that comment makes Moar not han gany more?

[13:11] <timotimo> hang any*

[13:11] <timotimo> that's amazing :P

[13:11] <jnthn> 50 chars is too short for good grammar :P

[13:12] <timotimo> %)

[13:12] <jnthn> .ask japhb I fixed the hang in 01-thread.t in NQP. Some tests now fail identically on JVM and Moar, but I think they're busted. yield is only a OS scheduler hint, it doesn't promise anything, so I feel the thread yield tests are bogus.

[13:12] <RabidGravy> oops, seems like HTTP::UserAgent tests b0rked by the "something not ordered anymore change"

[13:12] <jnthn> .tell japhb I fixed the hang in 01-thread.t in NQP. Some tests now fail identically on JVM and Moar, but I think they're busted. yield is only a OS scheduler hint, it doesn't promise anything, so I feel the thread yield tests are bogus.

[13:12] <RabidGravy> patchy, patchy

[13:12] <timotimo> thank you, RabidGravy 

[13:12] <jnthn> bah, where is the darn bot :P

[13:17] <timotimo> hm, so, did anything happen in the last week?

[13:18] <RabidGravy> duchess of cambridge had a child apparently

[13:19] <jnthn> timotimo: Many things :)

[13:19] <timotimo> is that the "royal baby" business i've heard so many people go out of their way to say "I DONT CARE ABOUT THAT"?

[13:19] <RabidGravy> there's also a possibility that "ufo" may have been shagged by recent CompUnitRepo changes, if anyone wants to prod whoever made it

[13:19] <timotimo> masak made it

[13:20] <timotimo> wowzers

[13:20] <timotimo> not only is -e '' now a whole bunch faster, it also uses up a bunch less memory

[13:21] <timotimo> 69 megs instead of 85 megs

[13:22] <FROGGS> is panda still broken on HEAD?

[13:22] *** konsolebox joined
[13:22] *** coffee` left
[13:24] <RabidGravy> FROGGS, works for me

[13:25] <timotimo> (and also: down to ~0.17s elapsed from 0.30s elapsed)

[13:26] *** tinyblak left
[13:26] <FROGGS> jnthn: is it possible that I get some jnthntime in the next days?

[13:26] <FROGGS> I want to tackle the CompUnitRepo+serialization stuff

[13:29] *** coffee` joined
[13:31] *** vendethiel joined
[13:32] *** konsolebox left
[13:32] *** Akagi201 joined
[13:32] *** dada joined
[13:33] *** Isp-sec left
[13:33] <jnthn> FROGGS: Yes; I do have 2 days of teaching (and the travel there tomorrow afternoon), but I'm doing Perl 6 things now and will have time at OSDC.no 

[13:34] <jnthn> FROGGS: I had one realization: there's a really easy way, after deserializatin, for an SC to "disclaim" all objects

[13:34] <FROGGS> ohh?

[13:34] <FROGGS> jnthn: do tell

[13:34] <FROGGS> I have an easy test case where I can try things

[13:34] <jnthn> FROGGS: It has them in its root set, so we can just make an nqp::scdisclaim($sc) or so that loops over all the objs/stables/codes in the SC and clears their ->sc pointer

[13:35] <jnthn> FROGGS: Then they'll be unowned

[13:35] <FROGGS> ahh!

[13:35] <FROGGS> that's something I have not tried yet :D

[13:35] <jnthn> FROGGS: And it means we can disclaim precisely the things in that SC that we deserialized.

[13:35] <jnthn> And it should be fast/cheap.

[13:35] <FROGGS> okay, that seems to exactly what I want it seems

[13:35] <FROGGS> to be*

[13:36] <jnthn> Only thing is we'll have to defeat the lazy serialization to make it happen

[13:36] <FROGGS> nice, 2 minutes worth of jnthntime probably solved my problem :D

[13:36] <jnthn> I can do an impl of the op in Moar later on today if you want

[13:36] <FROGGS> k

[13:36] <jnthn> (right now I'm hunting concurrency bugs)

[13:36] <FROGGS> no, I can do that, I stubbed a similar op...

[13:39] <dada> aloha

[13:39] <dada> is this place ok for stupid userland questions, or not?

[13:39] <FROGGS> there are no stupid questions...

[13:39] <FROGGS> just ask

[13:40] <dada> right :-)

[13:40] <FROGGS> :o)

[13:40] <dada> I installed rakudobrew (nom), but panda doesn't seem to work

[13:40] *** Akagi201_ joined
[13:40] <dada> as far as I can see, Shell::Command doesn't install because of "Missing or wrong version of dependency 'p6capturelex' (from 'lib/Shell/Command.pm')"

[13:41] <FROGGS> huh

[13:41] <FROGGS> dada: can make sure that everything is up to date?

[13:41] <dada> FROGGS: just used rakudobrew to get from git ~1h ago

[13:42] <dada> This is perl6 version 2015.04-151-g87b1eea built on MoarVM version 2015.04-57-g0c052ea

[13:42] <FROGGS> hmmm, I was away for almost 4 days, so I'm not sure what is going on there

[13:43] <nine> dada: that's ancient :)

[13:43] <nine> dada: seriously, there have been fixes in that time frame for exactly that problem.

[13:43] <FROGGS> m: say 1

[13:43] <camelia> rakudo-moar 87b1ee: OUTPUT«1␤»

[13:43] <FROGGS> but 87b1ee is HEAD

[13:43] *** Akagi201 left
[13:43] *** skids joined
[13:44] <dada> but maybe MoarVM is newer

[13:45] <nine> FROGGS: I see two commits since 87b1ee

[13:45] <dada> no, actually 31f3db1 is HEAD

[13:45] <FROGGS> ahh

[13:47] <dada> oh yeah, Shell::Command tests successfully now

[13:47] <dada> and panda works :-)

[13:48] *** Akagi201 joined
[13:48] <dada> nine: thanks

[13:48] <dada> cool stuff, guys

[13:48] *** tinyblak joined
[13:49] *** krunen left
[13:49] <FROGGS> \o/

[13:51] *** Akagi201_ left
[13:51] *** krunen joined
[13:53] *** zakharyas joined
[13:56] *** El_Che left
[13:56] *** vendethiel left
[13:56] <tadzik> yay :)

[13:59] *** coffee` left
[14:00] <[Coke]> several spectests with "#?rakudo skip "'is ObjectType' NYI"" ... which is not mentioned in the skipped tests or the syn. lizmat?

[14:01] <moritz> maybe this is about  'my @array is MyArrayImplementation' ?

[14:01] <moritz> which is indeed not yet implemented

[14:02] <timotimo> with our lovely arrays, why would you ever want to have a different array implementation?

[14:02] <[Coke]> my %h is BagHash, etc. ok.

[14:03] <[Coke]> timotimo: more on the hash end where we have like 80 hash types.

[14:03] <moritz> timotimo: whenever you want non-lazy arrays? :-)

[14:03] <[Coke]> ok, so this is really the same issue, it seems. thanks.

[14:03] *** camelia left
[14:04] <timotimo> right

[14:04] <brrt> m: my %h = BagHash.new; my @a = 1, 2, 3; my @a[3] := %h<foo>; my @a[^10] = ^10; say @a.perl; say %h.perl;

[14:04] *** camelia joined
[14:05] <brrt> aw man... haha

[14:06] *** ChanServ sets mode: +v camelia

[14:06] <brrt> m: my %h = BagHash.new; 

[14:06] <camelia> rakudo-moar 87b1ee: OUTPUT«Odd number of elements found where hash initializer expected␤  in block <unit> at /tmp/O4EQKSvCwF:1␤␤»

[14:06] <brrt> i can't initialize a baghash... at all

[14:06] <timotimo> you need to := it

[14:07] <brrt> why :-(

[14:07] <timotimo> because if you write my %h = ... it'll want to build a regular Hash 

[14:07] <brrt> oh...

[14:08] <masak> labster++ # "In poker terms, Python 3 called, PHP 6 folded, and Perl 6 went all-in."

[14:09] <timotimo> brrt: same way @a = ... behaves, actually

[14:09] <brrt> hmmm, yeah

[14:09] <brrt> ok

[14:10] *** airdisa left
[14:10] *** El_Che joined
[14:11] <masak> wow, the first comment jn HN about labster++'s article is attacking a "no-one uses py3" strawman. and getting called on it. nice.

[14:13] <RabidGravy> haha

[14:14] *** telex left
[14:15] *** Isp-sec joined
[14:16] *** telex joined
[14:17] <[Coke]> down to 1275 tickets. still no sign of davidnmfarrell

[14:17] <[Coke]> 1274, one of 'em was spam. :)

[14:26] *** Ven joined
[14:27] <arnsholt> masak: Yeah, turns out Python 3 is a bit of a lightning rod for the Perl 6 hate =)

[14:30] <timotimo> flussence: how far are you into making the profile json use arrays instead of hashes for the most common structure?

[14:33] <RabidGravy> I'm having a bit of a dumb brain moment with regular expressions, is there any sane way of saying "all of these things in any order but separated by ';'" ?

[14:33] *** _mg_ left
[14:34] <moritz> [ thing1 | thing2 | thing3 ] ** ';'

[14:34] <moritz> in p6 regexes

[14:34] <masak> arnsholt: who'd have thought? :P

[14:34] <[Coke]> note that that allows multiple thing1s, e.g.

[14:34] <timotimo> wait

[14:34] <RabidGravy> moritz++ # groovy

[14:34] <timotimo> shouldn't it be [ thing1 | thing2 | thing3 ] * % ';'

[14:34] <[Coke]> there isn't a way to say "A;B;C" for all n-combo permutations of elements.

[14:35] <timotimo> well, the * would cling to the ] probably

[14:35] <timotimo> you can still do it, but you have to put in a code assertion

[14:35] <timotimo> which the regex engine cannot be smart about :(

[14:35] * masak .oO( Python 2 programmers hate on Perl. Python 3 programmers have evolved a new, more modern and powerful hate on Perl 6 )

[14:36] <timotimo> hm. how about <!before $<firstthing>><!before $<secondthing>>[ thing1 | thing2 | thing3 ] for the last piece

[14:37] <timotimo> and the saem with only $<firstthing> for the second

[14:39] <mst> masak++

[14:40] <arnsholt> timotimo: If you just have three options, I'd just encode all six possibilities in the grammar. If you have more than that, not entirely sure how I'd do it

[14:40] <arnsholt> Perhaps check for duplicates in the action method

[14:42] <hoelzro> o/ #perl6

[14:42] <timotimo> if you put it into the action method, you won't get backtracking, if you want to do something like a search through a large portion of items for n unique items in a row or something

[14:42] <masak> how about `[ <t1> | <t2> | <t3> ] * % ';' <?{ $<t1> & $<t2> & $t<t3> == 1 }>` ?

[14:43] <masak> pretty short. haven't tried it, but should work.

[14:43] <masak> not much repetition. good use of junctions :)

[14:43] <moritz> m: say 1 & 2 == 1

[14:43] <camelia> rakudo-moar 87b1ee: OUTPUT«all(True, False)␤»

[14:43] <timotimo> that looks neat

[14:43] <masak> or even something like `all($<t1 t2 t3> == 1`

[14:43] *** cognominal left
[14:44] <masak> er, `all($<t1 t2 t3>) == 1`

[14:44] <moritz> all %($/).values == 1

[14:44] <moritz> 1 == all %($/).values

[14:44] <masak> yes, the latter.

[14:45] <masak> that even removes the `t1 t2 t3` repetition. moritz++

[14:45] <timotimo> m: say "F1a" ~~ / [ <digit> | <upper> | <lower> ]* { say +«$<digit upper lower> } /

[14:45] <camelia> rakudo-moar 87b1ee: OUTPUT«2 1  ␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏F' (indicated by ⏏)␤  in block <unit> at /tmp/oEwJJev2dM:1␤␤»

[14:45] <timotimo> m: say "F1a" ~~ / [ <digit> | <upper> | <lower> ]* { say $<digit upper lower>».elems } /

[14:45] <camelia> rakudo-moar 87b1ee: OUTPUT«1 1 1␤｢F1a｣␤ upper => ｢F｣␤ digit => ｢1｣␤ lower => ｢a｣␤»

[14:46] <timotimo> m: say "F1A" ~~ / [ <digit> | <upper> | <lower> ]* { say $<digit upper lower>».elems } /

[14:46] <camelia> rakudo-moar 87b1ee: OUTPUT«1 2 0␤｢F1A｣␤ upper => ｢F｣␤ digit => ｢1｣␤ upper => ｢A｣␤»

[14:46] <timotimo> oh, .values

[14:46] <timotimo> m: say "F1A" ~~ / [ <digit> | <upper> | <lower> ]* { say $<digit upper lower>».values } /

[14:46] <camelia> rakudo-moar 87b1ee: OUTPUT«｢1｣ ｢F｣ ｢A｣ ␤｢F1A｣␤ upper => ｢F｣␤ digit => ｢1｣␤ upper => ｢A｣␤»

[14:46] <masak> right.

[14:46] <timotimo> nah, not .values

[14:46] <masak> %($/).values

[14:46] <moritz> m: say "F1A" ~~ / [ <digit> | <upper> | <lower> ]* { %(/$).values>>.elems } /

[14:46] <camelia> rakudo-moar 87b1ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/5v_Vqow9RD␤Unable to parse regex; couldn't find final '/'␤at /tmp/5v_Vqow9RD:1␤------> 3 [ <digit> | <upper> | <lower> ]* { %(/$7⏏5).values>>.elems } /␤    expecting any of:␤        infix stoppe…»

[14:46] <moritz> m: say "F1A" ~~ / [ <digit> | <upper> | <lower> ]* { %($/).values>>.elems } /

[14:47] <camelia> rakudo-moar 87b1ee: OUTPUT«｢F1A｣␤ upper => ｢F｣␤ digit => ｢1｣␤ upper => ｢A｣␤»

[14:47] <rjbs> has $.x is rw; # now I can $obj.x = 123;

[14:47] <moritz> m: say so "F1A" ~~ / [ <digit> | <upper> | <lower> ]* { %($/).values>>.elems } /

[14:47] <camelia> rakudo-moar 87b1ee: OUTPUT«True␤»

[14:47] <moritz> m: say so "F1A" ~~ / [ <digit> | <upper> | <lower> ]* { say %($/).values>>.elems } /

[14:47] <camelia> rakudo-moar 87b1ee: OUTPUT«2 0 1␤True␤»

[14:47] <rjbs> How do I make a method such that I can ($obj.y = 123) through it?  i.e., what ruby would call "def x="

[14:47] <moritz> rjbs: method y() is rw { ... }

[14:47] <timotimo> rjbs: you want to "is rw" and return-rw (or just use the last-statement-of-block instead of returning)

[14:48] *** coffee` joined
[14:48] <timotimo> more precisely: or "is rw" + last-statement-of-block

[14:48] <hoelzro> you can also use a Proxy, iirc

[14:49] <timotimo> right, that's if you have something more complex than a simple container you want to have assignments tno

[14:49] <timotimo> to*

[14:49] <rjbs> So if I want to validate the thing being assigned, I must use a type on the thing I'm assigning?

[14:49] <rjbs> er, returning

[14:50] <timotimo> that's one way, aye

[14:50] <moritz> the other is to return a Proxy

[14:50] <moritz> which calls a callback for you on assignment

[14:51] * rjbs looks for PRoxy in http://doc.perl6.org/language.html

[14:51] <masak> Proxy objects define FETCH and STORE methods

[14:51] <masak> or perhaps it's better to think of them as functions

[14:51] <masak> (because you pass them in as constructor arguments)

[14:52] <dalek> doc: 11edcb0 | moritz++ | WANTED:

[14:52] <dalek> doc: Add Proxy to WANTED

[14:52] <dalek> doc: review: https://github.com/perl6/doc/commit/11edcb0f7b

[14:52] <rjbs> That page has a search box at the to pright, but it appears to do nothing.

[14:53] <rjbs> masak: With a proxy, the method shoudl still be is rw?

[14:53] <rjbs> Pardon my typos, the bus is bumpy. :)

[14:53] <masak> rjbs: no, the function doesn't have to be rw

[14:53] <masak> rjbs: let me dig you up an example from CORE

[14:53] <moritz> masak: I think rjbs meant the routine returning a Proxy

[14:54] <rjbs> I did.

[14:54] *** lolisa joined
[14:54] <masak> right. yes.

[14:54] <masak> it should be `is rw`

[14:54] <masak> rjbs: https://github.com/rakudo/rakudo/blob/nom/src/core/Buf.pm#L463

[14:54] <rjbs> method x is rw { return Proxy.new(STORE => {...}, FETCH => {...}) }

[14:55] <rjbs> Thanks.  Next question, then I think I'm done for a while...

[14:55] <masak> hm, shoulda done the link like this for posterity: https://github.com/rakudo/rakudo/blob/31f3db1d9f00b246c9478ea87da3c91873728354/src/core/Buf.pm#L463

[14:55] <rjbs> my $x = $obj.x;  my $y = $x;

[14:55] <rjbs> The method call returns a Proxy.  The copy does a FETC, right?  There is no action at a distance when later I reassign $y?

[14:56] <masak> to a first approximation, no.

[14:56] <masak> though of course, your FETCH could return a reference, etc...

[14:56] <masak> but likely no, no action at a distance.

[14:56] <rjbs> Great, thanks.

[15:01] <hoelzro> speaking of rw methods, I've often wondered what the semantics of https://gist.github.com/2f0b8ed59e684c59ca08

[15:01] <hoelzro> should be

[15:01] <timotimo> same as my Int $foo = "foo", i think?

[15:03] <lizmat> masak: I think jnthn said that a sub returning a Proxy *should*be marked "is rw"

[15:03] <lizmat> masak: the fact that it isn't needed right now, is a bug

[15:04] <timotimo> right; return is supposed to recont-ro things it returns

[15:04] *** Ven left
[15:04] <ab5tract_> hmmm.. that could explain why I wanted to bash my head in while coming up with a working example and the cognitive understanding to explain said example

[15:04] <ab5tract_> (tl;dr -- I failed)

[15:04] *** Ven_ joined
[15:04] <hoelzro> timotimo: except that the type check has to be deferred until runtime, right?

[15:05] <timotimo> correct

[15:05] *** muraiki joined
[15:05] <ab5tract_> in this case I am tlaking about a working example of Proxy

[15:05] <|Tux|> nine, http://tux.nl/Files/20150504170542.png

[15:07] <timotimo> oh, we install files under their original name again?

[15:07] <lizmat> timotimo: if in is an inst, it shouldn't  :0(

[15:07] <hoelzro> ok, thanks timotimo!

[15:07] <timotimo> lizmat: just what i see in tux' screenshot there

[15:08] <timotimo> "copying blib/lib/Inline/p5helper.so to /.../perl6/site/lib/Inline/p5helper.so"

[15:08] <timotimo> [Tux]: can you quickly verify that that path actually has that file?

[15:09] <dalek> rakudo/nom: 52bf35d | lizmat++ | src/core/CompUnitRepo.pm:

[15:09] <dalek> rakudo/nom: Make CompUnitRepo.new do something sensible

[15:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/52bf35df3b

[15:09] <|Tux|> $ find /pro/3gl/CPAN/rakudobrew/ -name p5helper.so

[15:09] <|Tux|>  /pro/3gl/CPAN/rakudobrew/moar-nom/install/share/perl6/site/lib/Inline/p5helper.so

[15:09] <masak> lizmat: right; agree.

[15:09] <timotimo> interesting!

[15:09] <timotimo> [Tux]: what's the date on that file?

[15:09] *** konsolebox joined
[15:09] <|Tux|> 2015-05-04 16:50:23

[15:09] <masak> lizmat: I was confused as to which routine we were talking about; the FETCH and STORE routines don't need to be thus marked.

[15:09] <|Tux|> MET

[15:09] <timotimo> so it's current

[15:10] <|Tux|> no, it is not

[15:10] *** fhelmberger left
[15:10] *** konsolebox left
[15:10] <literal> W/ 31

[15:10] <|Tux|> well, it is, but not as new as Inline::Perl5

[15:10] <colomon> woah, spectacular number of fails in the smoke test this morning.  :\

[15:10] <timotimo> oh?

[15:10] *** konsolebox joined
[15:11] *** fhelmberger joined
[15:11] <lizmat> probably something I did  :-(

[15:11] <colomon> http://smoke.perl6.org/report

[15:11] * |Tux| rebuilds from start ...

[15:12] *** konsolebox left
[15:12] <[Coke]> masak: I wonder if recent NFG work has fixed RT #107204 in moar.

[15:12] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=107204

[15:12] *** konsolebox joined
[15:13] *** konsolebox left
[15:13] <masak> [Coke]: either way, that RT ticket doesn't have a decent observable, and should be rejected on principle.

[15:14] *** konsolebox joined
[15:14] *** coffee` left
[15:14] <|Tux|> ll /pro/3gl/CPAN/rakudobrew/moar-nom/install/share/perl6/site/lib/Inline/p5helper.so

[15:14] <|Tux|> 59639010 -rw-rw-r-- 1 merijn 1966431 2015-05-04 17:14:24 /pro/3gl/CPAN/rakudobrew/moar-nom/install/share/perl6/site/lib/Inline/p5helper.so

[15:14] *** konsolebox left
[15:15] <|Tux|> csv-ip5xs   ===SORRY!===

[15:15] <|Tux|> unable to find Inline/p5helper.so IN @*INC

[15:15] *** lolisa left
[15:15] *** konsolebox joined
[15:17] *** konsolebox left
[15:18] *** konsolebox joined
[15:19] *** konsolebox left
[15:19] *** konsolebox joined
[15:20] <dalek> Inline-Perl5: 093878c | lizmat++ | lib/Inline/Perl5.pm6:

[15:20] <dalek> Inline-Perl5: Don't use rakudo internal subs

[15:20] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/093878c551

[15:20] <colomon> lizmat: Hmmm, I think it might indeed have been you.  At least, it looks like it happened in between your commits today.

[15:20] <lizmat> |Tux| could you retry with absolute latest rakudo and Inline::Perl5 ?

[15:20] *** konsolebox left
[15:20] <|Tux|> damn, I almost left :/

[15:20] <colomon> lizmat: and my latest attempt for one of them worked fine.

[15:20] <lizmat> ok, then I assume it's going to be better tomorrow

[15:21] * |Tux| tries anyway

[15:21] <colomon> lizmat: gonna fire off another smoke run now, actually. 

[15:21] *** konsolebox joined
[15:21] <lizmat> ok, cool!

[15:22] * |Tux| suggests lizmat to include '$ git pull && make test && make time' on Text::CSV :P

[15:22] *** konsolebox left
[15:22] *** coffee` joined
[15:22] <|Tux|> in your test/accept procedure

[15:22] *** konsolebox joined
[15:23] <lizmat> ok, I see it

[15:23] *** konsolebox left
[15:24] *** konsolebox joined
[15:25] *** konsolebox left
[15:25] <|Tux|> csv-ip5xs   ===SORRY!===

[15:25] <|Tux|> unable to find Inline/p5helper.so IN @*INC

[15:25] <|Tux|> off to home. back in 65

[15:25] *** konsolebox joined
[15:25] <lizmat> |Tux|: I see the panda install problem

[15:25] <lizmat> also off for a few hours

[15:25] <lizmat> so will look at it when I'm back

[15:26] *** konsolebox left
[15:27] *** konsolebox joined
[15:27] *** konsolebox left
[15:28] *** lolisa joined
[15:28] *** konsolebox joined
[15:29] *** konsolebox left
[15:29] *** konsolebox joined
[15:30] *** konsolebox left
[15:31] *** konsolebox joined
[15:31] *** konsolebox left
[15:32] *** konsolebox joined
[15:34] *** konsolebox left
[15:35] *** Rounin left
[15:39] <dalek> roast: 046e9f5 | jnthn++ | S17-promise/stress.t:

[15:39] <dalek> roast: Add test for RT #123883.

[15:39] <dalek> roast: review: https://github.com/perl6/roast/commit/046e9f5590

[15:39] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123883

[15:39] *** brrt left
[15:40] <dalek> nqp: a5b7ade | jnthn++ | tools/build/MOAR_REVISION:

[15:40] <dalek> nqp: Get MoarVM with some concurrency fixes.

[15:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a5b7ade559

[15:41] *** vendethiel joined
[15:42] <dalek> rakudo/nom: 5ebbd47 | jnthn++ | tools/build/NQP_REVISION:

[15:42] <dalek> rakudo/nom: Bump NQP_REVISION for Moar with concurrency fixes.

[15:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ebbd470d3

[15:42] <dalek> rakudo/nom: 66e15e5 | jnthn++ | t/spectest.data:

[15:42] <dalek> rakudo/nom: Add S17-promise/stress.t as a stress test.

[15:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66e15e5eab

[15:43] *** cognominal joined
[15:44] <raydiak> good morning, #perl6

[15:46] <[Coke]> r: my \do = 42; say do do ;

[15:46] <camelia> rakudo-{moar,jvm} 87b1ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Missing block or statement␤at /tmp/tmpfile:1␤------> 3my \do = 42; say do do7⏏5 ;␤»

[15:46] *** domidumont left
[15:46] <hoelzro> m: macro f { '1 + 1' } ; say f();

[15:46] <camelia> rakudo-moar 87b1ee: OUTPUT«===SORRY!===␤Too few positionals passed; expected 3 arguments but got 2␤»

[15:47] <hoelzro> do returning strings from macros no longer work?

[15:47] <[Coke]> from https://rt.perl.org/Ticket/Display.html?id=115230 if someone wants to mark that testneeded.

[15:48] *** [Sno] left
[15:49] *** zakharyas left
[15:50] <dalek> rakudo/nom: 4ad94f3 | jnthn++ | src/core/ThreadPoolScheduler.pm:

[15:50] <dalek> rakudo/nom: Don't assume time-based things won't hog threads.

[15:50] <dalek> rakudo/nom: 

[15:50] <dalek> rakudo/nom: Fixes RT #123520.

[15:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ad94f399e

[15:50] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123520

[15:51] <dalek> roast: db5a920 | jnthn++ | S17-promise/in.t:

[15:51] <dalek> roast: Fix and test for RT #123520.

[15:51] <dalek> roast: review: https://github.com/perl6/roast/commit/db5a9203ac

[15:51] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123520

[15:52] *** konsolebox joined
[15:53] *** Ven_ left
[15:53] *** konsolebox left
[15:53] *** konsolebox joined
[15:54] *** konsolebox left
[15:54] *** konsolebox joined
[15:55] *** konsolebox left
[15:56] *** konsolebox joined
[15:58] *** konsolebox left
[15:58] *** konsolebox joined
[15:59] *** konsolebox left
[16:00] *** abraxxa left
[16:04] *** dada left
[16:05] <hoelzro> I ask about the macros thing because that's the first example in S06, and I'm wondering if it needs amending

[16:06] *** vendethiel left
[16:06] *** gfldex joined
[16:07] <ab5tract_> \o/ concurrency patches :D

[16:08] <pmichaud> good morning, #perl6

[16:08] <timotimo> ohai pmichaud!

[16:09] *** cognominal left
[16:09] <RabidGravy> I hate regular expressions

[16:10] <RabidGravy> took me two hours to fix the tests for HTTP::UserAgent

[16:10] *** eternaleye left
[16:10] <flussence> timotimo: I had a look at that json stuff, but I don't feel confident about changing structural things around myself...

[16:10] <timotimo> oh

[16:11] <timotimo> we should start a brain trust :P

[16:12] <flussence> but afaik, my guess was right and 90% of it is a single hash repeated over and over. The only awkward part is that there's recursion in the middle that makes it variable length.

[16:12] *** eternaleye joined
[16:12] *** yoleaux joined
[16:12] *** ChanServ sets mode: +v yoleaux

[16:13] <timotimo> ... variable length?

[16:13] <timotimo> you mean one of the values in the hash is just more hashes/lists?

[16:14] <flussence> like, it's easy enough to pull the keys out, but the way it's naturally ordered means the last few indexes would jump around. I'm not sure shuffling things around is a good idea given how slow the --profile option can be sometimes...

[16:14] <timotimo> what is the last few things?

[16:15] <flussence> there's an allocations list at the end, and a nested call stack that may or may not appear before that

[16:15] <timotimo> ah, i see

[16:16] <timotimo> i think if you always allocate the list with empty slots and put the allocation list and call stack into a numbered slot of that list, you should be fine

[16:16] <timotimo> if we could get the profile of core setting compilation small enough to have the qt-based profiler load it, that'd be a nice win

[16:16] *** konsolebox joined
[16:17] *** konsolebox left
[16:18] *** konsolebox joined
[16:19] *** konsolebox left
[16:19] <flussence> I wonder if it'd be possible to turn this into a flat binary thing... every entry has an "id" field and the callees list doesn't *have* to recurse like that.

[16:19] *** konsolebox joined
[16:20] *** konsolebox left
[16:20] <timotimo> i'd be gladder if you could look into making my old-ish code for summarising call nodes after a given recursion depth work ... :)

[16:20] *** konsolebox joined
[16:21] *** konsolebox left
[16:22] *** konsolebox joined
[16:22] <flussence> I could take a look... point me to it?

[16:22] <timotimo> sure! :D

[16:22] <timotimo> https://github.com/MoarVM/MoarVM/commits/finite_callgraph_depth'- uppermost three commits

[16:23] *** konsolebox left
[16:23] *** konsolebox joined
[16:24] *** konsolebox left
[16:24] *** konsolebox joined
[16:25] <flussence> ooh, C code. this is gonna be fun...

[16:25] *** konsolebox left
[16:26] *** konsolebox joined
[16:26] <timotimo> you'd most probably also have to change C code to make the generated list/hash structure different, FWIW

[16:27] *** konsolebox left
[16:29] <timotimo> when does the "end" block for a variable fire? at the same time END would?

[16:29] <jnthn> timotimo: yes

[16:30] * jnthn away for abit

[16:31] <flussence> .oO( oh, so *that's* why the json is wrapped in []s, it's an array of threads... )

[16:32] <timotimo> yup, though the profiler doesn't really do multiple threads yet

[16:32] <timotimo> and i don't think the html frontend could deal with it yet

[16:33] *** vendethiel joined
[16:36] *** espadrine left
[16:42] <timotimo> could someone try to come up with a short piece of example code that looks good with RAKUDO_VERBOSE_STACKFRAME set to some number?

[16:42] *** jack_rabbit joined
[16:44] <dalek> perl6-roast-data: 47476f5 | coke++ | / (9 files):

[16:44] <dalek> perl6-roast-data: today (automated commit)

[16:44] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/47476f5175

[16:48] <hoelzro> I found some language in the specs that seems a little contradictory: http://design.perl6.org/S04.html#line_1507 vs http://design.perl6.org/S06.html#line_2331

[16:48] <hoelzro> the language in S06 about class invariants makes it sound like that's a definite language feature (just NYI)

[16:49] <timotimo> looks like a good catch

[16:50] <pmichaud> well, almost by definition, anything NYI is conjectural.  :)

[16:50] <rjbs> m: my @x := 0,2...*; @x[^10].perl.say

[16:50] <yoleaux> 02:14Z <japhb> rjbs: If only keys matter: 'enum Foo < Bar Baz Quux >;' or if you need to pick specific values, use pairs: 'enum Foo :Bar(-12), Baz(16), Quux(42);'

[16:50] <camelia> rakudo-moar 87b1ee: OUTPUT«(0, 2, 4, 6, 8, 10, 12, 14, 16, 18)␤»

[16:50] <yoleaux> 02:14Z <japhb> rjbs: (sorry, typo) If only keys matter: 'enum Foo < Bar Baz Quux >;' or if you need to pick specific values, use pairs: 'enum Foo :Bar(-12), :Baz(16), :Quux(42);'

[16:50] <yoleaux> 02:16Z <japhb> rjbs: Then you can use the enum type in declarations:  'my Foo $choices;' or 'has Foo $subtype;'

[16:50] *** konsolebox joined
[16:51] <rjbs> m: [0,2 .. *].perl.say

[16:51] *** jack_rabbit left
[16:51] <hoelzro> =)

[16:51] <camelia> rakudo-moar 87b1ee: OUTPUT«(timeout)»

[16:51] <rjbs> Oops. :-)

[16:51] <rjbs> m: [0,2 .. *].say

[16:51] <camelia> rakudo-moar 87b1ee: OUTPUT«0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 8…»

[16:51] <rjbs> So, why does the first one, with the @x, get 0,2,4,6,... and the other... not?

[16:52] <timotimo> you want "..." and not ".."

[16:52] <timotimo> in order to get the 0, 2, 4, ... i mean

[16:52] *** konsolebox left
[16:52] <timotimo> the reason is that .gist (which is what .say normally uses) will cut off a long list at some point and thus not fully reify that lazy list

[16:52] <timotimo> whereas .perl will try to print out the full list from start to finish

[16:53] <rjbs> Ha!  One sec.

[16:54] <rjbs> so, that was a foolish typo that I made repeatedly; but what is .. for?

[16:54] <rjbs> aha, I see

[16:54] <rjbs> Range constructor

[16:54] <timotimo> aye

[16:55] *** konsolebox joined
[16:56] <hoelzro> rjbs: I made that same mistake myself this morning =)

[16:59] *** jack_rabbit joined
[16:59] <rjbs> japhb: Thanks, re: enum type.

[16:59] <rjbs> japhb++

[17:01] <colomon> lizmat: you may be off the hook, everything is still broken

[17:04] *** [Sno] joined
[17:05] *** gtodd left
[17:06] *** gtodd joined
[17:08] *** atweiden joined
[17:12] *** liztormato joined
[17:12] <liztormato> colomon: doesn't that imply I'm on the hook?

[17:12] <colomon> well, still on the hook, I suppose.  not enough information yet.  :)

[17:14] <liztormato> Ok. I'll be back home in 1.5 hours or so. Will then look again

[17:17] <liztormato> In the smoketest, please double check how PERL6LIB and RAKUDOLIB are set up.

[17:18] <liztormato> If they are, of course

[17:22] *** romel joined
[17:22] *** _mg_ joined
[17:23] <colomon> liztormato: hmmm, indeed, emmentaler is messing with PERL6LIB in a suspicious looking way

[17:23] <liztormato> Try replacing : with ,    ;-)

[17:25] <colomon> rerunning now....

[17:26] *** _mg_ left
[17:37] <liztormato> Cycling again&

[17:37] *** liztormato left
[17:39] *** spider-mario joined
[17:39] <ugexe> im a fan of all the recent compunit changes :)

[17:40] *** jack_rabbit left
[17:40] <labster> what the hell happened on HN last night?  I'm thinking of replying, but ugh, where do I even start.

[17:42] <pmichaud> labster: reference?

[17:42] <vendethiel> labster: ??

[17:42] <labster> "This article is total FUD and garbage from yet another Python 2 ideological holdout dogmatist."  Wha?  I guess they stopped reading before I spent 10 paragraphs talking about Perl 6.

[17:42] <vendethiel> http://www.reddit.com/r/MoarVM/ lol. really.

[17:42] <labster> pmichaud: https://news.ycombinator.com/item?id=9484939

[17:43] <[Coke]> vendethiel: ah, squatter?

[17:43] <vendethiel> [Coke]: yeah.

[17:43] <DrForr> labster: TL;DR I'm guessing.

[17:44] <moritz> labster: there's somebody wrong on the Internet *shrug*

[17:45] <moritz> labster: it happens whenver something becomes sufficiently popular; somebody else it trying to drag it through the mud

[17:45] <pmichaud> In the Python community, there's an assumption that Python 3 will be successful when most people have migrated away from Python 2... i.e., Python 3 is an "upgrade" to Python 2.

[17:45] <rjbs> Oh, that php6/perl6/python3 article got HNed?

[17:45] <rjbs> I thought it was a pretty reasonable piece.

[17:46] <rjbs> so no wonder people are angry!

[17:46] <labster> DrForr: It was a pretty long way of saying "deploying breaking changes are really hard"

[17:46] <rjbs> ain't that the truth

[17:46] <pmichaud> However, we don't consider Perl 6 as an "upgrade" or "replacement" for Perl 5; i.e., our measure of success isn't dependent on the short-term migration way from Perl 5.

[17:46] <labster> Next time I'll just tweet it

[17:46] <pmichaud> *away

[17:47] <moritz> m: my $p = Proxy.new; say $p

[17:47] <camelia> rakudo-moar 87b1ee: OUTPUT«Cannot invoke this object (REPR: P6opaque, cs = 0)␤  in block <unit> at /tmp/Q81J3Pc0_k:1␤␤»

[17:47] <[Coke]> m: say byte(3); # that error looks familiar.

[17:47] <camelia> rakudo-moar 87b1ee: OUTPUT«Cannot invoke this object (REPR: P6int, cs = 0)␤  in block <unit> at /tmp/PnquapSX3a:1␤␤»

[17:47] <rjbs> labster: Oh, that was your article?  labster++ 

[17:48] <vendethiel> I must agree the PHP part of the article was pretty ... misinformed.

[17:49] <labster> pmichaud: I agree, and acknolwedge that Perl 5 is never going away.  But also Perl 6 is going to have a hard time catching on without the support of the Perl 5 developers.

[17:50] <dalek> doc: b371543 | moritz++ | / (2 files):

[17:50] <dalek> doc: document Proxy

[17:50] <dalek> doc: review: https://github.com/perl6/doc/commit/b371543f32

[17:50] <pmichaud> labster: I'm not sure I agree with the latter part of that.

[17:50] <labster> I read about 10 PHP articles.  It's much easier to find quality information about Python than PHP.

[17:50] <[Coke]> m: say 'ß'.uc, 'ß'.tclc, 'ΣΣΣ'.lc

[17:50] <camelia> rakudo-moar 87b1ee: OUTPUT«ßßσσσ␤»

[17:51] <pmichaud> And there are some other parts of the OP that I'm not sure I agree with.

[17:51] <rjbs> [Coke]: tclc?  is that like ucfirst?

[17:51] <pmichaud> "There is a very real possibility that six years from now, Perl 5 will still be the dominant form of an ever shrinking faction of Perl users. "     Is there evidence to support "ever shrinking faction of Perl users"?  I thought some of the metrics were pointing in the opposite direction.

[17:51] <moritz> rjbs: it's like ucfirst(lc($_))

[17:51] <rjbs> moritz: right, thanks :)

[17:51] <[Coke]> rjbs: sort of. ^^

[17:51] <moritz> rjbs: tc is like ucfirst

[17:52] <vendethiel> Just want to take a minute to say ruby1.9 went much better than others :P

[17:52] <rjbs> pmichaud: I found that sentence awkward and thought it meant that "while p5 will dominate, it will dominate a fraction of all p* users that is shrinking as people switch to p6"

[17:52] <rjbs> pmichaud: saying nothing about the absolute size of perl* users over time

[17:52] <pmichaud> it seems to me that the OP confuses "shrinking market share" with "shrinking population"

[17:53] <RabidGravy> I think there is an increasing balkanisation of the dynamic languages space

[17:53] <rjbs> also static languages space

[17:53] <labster> pmichaud: "possibility" is a key word there.  And I don't think we can pretend that Perl* has the dominance it had in the 1990s.

[17:54] <pmichaud> labster: does it need to have that dominance to be successful, though?

[17:54] <labster> No.

[17:54] <RabidGravy> all the hip young kids jump to whatever is the hot thing every year

[17:56] <pmichaud> I often keep in mind the model of Southwest Airlines -- they don't define success by being the biggest, or largest market share, or the traditional forms of "best".  They define it by "are we profitable?" and "are we serving the populations we want to serve?"

[17:57] *** xinming left
[17:57] <labster> Well, I wrote a lot of wrong things, but at least it's starting a conversation.  I had kinda hoped to bring it up here first for feedback, but Gabor emailed it out before I even brought it up here.

[17:57] <moritz> and "are we profitable?" for a programming language would be "are we a self-sustaining, growing community?"

[17:57] *** Entonian joined
[17:57] <pmichaud> moritz: +1   exactly

[17:58] *** xinming joined
[17:58] *** TimToady left
[17:58] *** TimToady joined
[17:59] *** zakharyas joined
[17:59] *** spider-mario left
[18:01] <baest> labster: I thought it was very interesting and yes it definitely started a conversation/discussion #labster++

[18:01] *** Entonian left
[18:03] <pmichaud> agreed, it's started some very useful conversations.  #labster++

[18:06] <labster> pmichaud moritz: A lot of the things that determine whether or not we have a growing community depend on how things appear from the outside.  So we can serve our people very well, but people are still going to make snap decisions based on whether or not the programmer believes the product was a success, whether or not it was a "successful upgrade".  Those decision moments are going to be determined in large part by our legac

[18:06] <labster> And I do fly Southwest.

[18:07] <[Coke]> "by our legac"

[18:07] <labster> ... by our legacy.  And I do fly Southwest.

[18:12] <RabidGravy> yeah there is an extent to which this is dependent on whether the ecosystem achieves sufficient critical mass that someone can take a casual look and go "yep I could do this project easily in Perl 6"

[18:13] <pmichaud> RabidGravy: and more to the point:  "I can do this in Perl 6 and I'd prefer that over other alternatives"

[18:13] <RabidGravy> (and I've never flown south west)

[18:17] <pmichaud> I agree that outside appearances have an impact.  It also depends on how we react.  For a long time Perl had a reputation of being a very ugly language, and people "on the outside" would mock it for being so cryptic and terse and the Perl community's reaction was "yeah, you're right, it's ugly and it gets the job done".

[18:19] *** konsolebox left
[18:25] *** zakharyas left
[18:26] *** raiph left
[18:27] <RabidGravy> I've never quite got the ugly thing (as long as you ignore regular expressions)

[18:27] *** [Sno] left
[18:27] *** [Sno] joined
[18:29] <pmichaud> RabidGravy: it's all of the sigils, too.

[18:29] <pmichaud> e.g., things like     for (0..@#array-1)

[18:29] *** domidumont joined
[18:29] <pmichaud> I'm afk

[18:33] <labster> RabidGravy: the other part of it was in the large amount of poor-quality scripts hacked together by sysadmins in the early days.  And some people just think anything with sigils is ugly.

[18:34] <PerlJam> And lots of marketing of poor quality scripts didn't help either (who remember's Matt's Script Archive?)

[18:35] <raydiak> I think it's the sigils, plus p5's -> instead of . for method calls, plus the number of operators, plus the regexes (not just the fact that they have their own special syntaxes, but also just how popular they are in Perl culture)

[18:35] <RabidGravy> oh yeah, Matt's Script Archive was a disaster

[18:36] <RabidGravy> the NMS project spent a lot of effort attempting to eradicate them well into the 21st century

[18:36] <PerlJam> raydiak: but Perl's regex were adopted by everybody eventually in one form or another

[18:36] <labster> and JAPHs on forum sigs

[18:36] <raydiak> PerlJam: surely, but not all those langs had their own special // and =~ syntax outside of the regex lang itself

[18:37] <RabidGravy> and JAPHs and the "elegant", er, succinct code 

[18:39] <labster> m: "Just another perl hacker".say  #golfed it

[18:39] <camelia> rakudo-moar 87b1ee: OUTPUT«Just another perl hacker␤»

[18:39] <RabidGravy> and software like majordomo that refused to die but no-one managed to replace

[18:39] <raydiak> PerlJam: but what I meant was, besides the various scary-looking regex syntaxes both inside and outside, they are deeply ingrained in perl culture and get (or got) used a lot more frequently than non-Perl programmers might be used to

[18:39] <PerlJam> raydiak: oh, yes indeed.

[18:40] <raydiak> so the end result of all those things I listed is an overall impression of "yikes!" I think :)

[18:40] *** brrt joined
[18:40] <brrt> (the inline::perl5 stuff is /really/ cool

[18:41] <brrt> nine++

[18:42] <raydiak> (also we should probably brace ourselves for patience with that perception; with a much longer list of operators, and meta and hypers on top of that, we are a lot more susceptible to "line noise" jokes than even P5 was)

[18:43] <brrt> let them joke :-)

[18:43] <brrt> i

[18:43] <labster> Everybody: only write clean code!

[18:43] *** LuxOcculta joined
[18:43] <brrt> am already having a lot of fun with perl6 now

[18:43] <RabidGravy> I'm too stupid to right objuscated code

[18:44] <LuxOcculta> Hello guys, 

[18:44] <RabidGravy> write

[18:44] <RabidGravy> obfuscated

[18:44] <colomon> lizmat: switching : to , for PERL6LIB in emmentaler literally broke EVERYTHING.  0 passing modules now.

[18:44] <LuxOcculta> I've been a perl dev for 4 years, and I enjoy perl5 a lot

[18:44] * raydiak could probably stand to clean up some scary corners of a couple of his ecosystem modules

[18:44] <RabidGravy> what is the matter with my typing

[18:45] <hoelzro> welcome LuxOcculta 

[18:45] <LuxOcculta> and I'm starting to get the perl6 hype :X

[18:45] <LuxOcculta> do you think it would be a good time to start writing production perl 6 code ?

[18:45] <RabidGravy> the more the merrier

[18:45] <labster> LuxOcculta: I too write a lot of Perl 5 for $dayjob, it's pretty fun.

[18:46] <RabidGravy> the more, the fewer yaks I have to shave

[18:46] <PerlJam> LuxOcculta: depends on what you mean by "production code", but I'd say "yes".

[18:46] <ugexe> perl6-j is also failing to build, and seems due to modules: ./perl6-j --target=jar --output=lib/Test.pm.jar -Ilib lib/Test.pm

[18:47] <LuxOcculta> iii :D, I'll get started :D

[18:47] <ugexe> ===SORRY!=== Don't know how to handle Makefile:423: recipe for target 'lib/Test.pm.jar' failed

[18:47] *** spider-mario joined
[18:49] <ugexe> i am able to test/compile on moar stil though

[18:49] <ugexe> test/compile modules

[18:51] <RabidGravy> LuxOcculta, I'd say due to the relative immaturity of the ecosystem you may find yourself with more work, but yeah it's definitely getting to that point

[18:52] <labster> LuxOcculta: Keep in mind that the module ecosystem isn't complete yet.  I'm a place where I use Perl 6 for development tasks, but I still use Perl 5 for code that needs to be deployed.

[18:53] *** rurban left
[18:55] <lizmat> colomon: looking at perl6-j not building report first

[18:56] <LuxOcculta> Thanks guys, I'll give perl6 a go on some non critical scripts that need to be updated, see how it goes :D

[18:56] *** espadrine joined
[18:57] <colomon> lizmat: and I got sidetracked with paying $work

[18:57] <colomon> lizmat: I still think PERL6LIB is probably issue, just the fix wasn’t right

[18:57] <lizmat> where does emmentaler live ?

[18:58] <ugexe> i dont see anything in the emmentaler smoker that should cause any problems, unless it has to do with absolute/relative file paths

[18:59] <ugexe> oh i was looking at SmokeResults

[19:00] <ugexe> %*ENV<PERL6LIB> = "{cwd}/installlib/lib:" ~ (%*ENV<PERL6LIB> // '');

[19:01] *** TimToady left
[19:01] <ugexe> s/:/,/ i imagine

[19:01] <colomon> ugexe: yes, that’s the line

[19:01] <colomon> no, that change made everything worse

[19:02] <colomon> or… not?

[19:02] <brrt> good luck LuxOcculta

[19:02] <brrt> if you hit any snags, please let us know :-)

[19:03] <ugexe> i imagine it should be

[19:03] <ugexe> file#/{cwd}/installlib/lib,some-other-path,some-other-path

[19:03] <colomon> no, that’s what I did and it broke everything

[19:03] <ugexe> but the file# looks like it should get tacked on by rakudo

[19:03] <brrt> inline REPL help would be a really awesome feature

[19:03] <lizmat> colomon: huh, that broke everything?

[19:04] <colomon> 100% module fail, yse

[19:04] <ugexe> its also pushing onto INC instead of unshift

[19:04] <lizmat> is the panda up to date ?

[19:05] <colomon> I dunno about panda

[19:05] <colomon> after the PERL6LIB assignment line, PERL6LIB is /home/colomon/emmentaler/installlib/lib,

[19:05] <colomon> could that be the problem?

[19:06] <lizmat> $ 6 'BEGIN @*INC.unshift("."); use Foo'

[19:06] <lizmat> ===SORRY!===

[19:06] <lizmat> Missing or wrong version of dependency 'src/gen/m-CORE.setting' (from 'Foo.pm')

[19:06] <lizmat> I think that's the pb

[19:07] <colomon> huh?  I mean, it’s definitely getting past that line.

[19:07] <lizmat> colomon: could you try this diff:

[19:07] <lizmat> -    @*INC.push("{cwd}/installlib/lib");

[19:07] <lizmat> -    %*ENV<PERL6LIB> = "{cwd}/installlib/lib:" ~ (%*ENV<PERL6LIB> // '');

[19:07] <lizmat> +    @*INC.push("file:{cwd}/installlib/lib");

[19:07] <lizmat> +    %*ENV<PERL6LIB> = "{cwd}/installlib/lib," ~ (%*ENV<PERL6LIB> // '');

[19:07] *** diana_olhovik_ left
[19:07] <lizmat> sorry

[19:08] *** TimToady joined
[19:08] <ugexe> isnt it file# now

[19:08] <lizmat> +    @*INC.push("file#{cwd}/installlib/lib");

[19:08] <lizmat> yeah

[19:08] <lizmat> perl6-j build confirmed broken here, looking at it now

[19:10] *** diana_olhovik_ joined
[19:10] *** yqt joined
[19:11] <ugexe> panda also seems to use PERL6LIB in a way that may not work correctly

[19:11] <ugexe> https://github.com/tadzik/panda/blob/81893bbb7c82b5b57570555f338221f38a2f6c89/lib/Panda/Common.pm#L24-L28

[19:11] <ugexe> i.e. it joins with a path seperator

[19:12] <lizmat> DISTRO.cur-sep is ',' if it exists

[19:12] <ugexe> ah

[19:12] <lizmat> that was part of code I did to mitigate the transition

[19:13] *** TimToady left
[19:15] <ugexe> panda smoke works fine (other than when it hits a segfault and skips all tests after)

[19:16] <ugexe> but that problem has been around for awhile

[19:17] <RabidGravy> ah that :/, thing seems to be what the problem with ufo is too

[19:17] <colomon> Hmmm, what I’m getting is messages that look like this:

[19:17] <colomon> ==> Fetching Nonongram

[19:17] <colomon> ==> Building Nonongram

[19:17] <colomon> Compiling lib/Nonogram.pm to mbc

[19:17] <colomon> ===SORRY!===

[19:17] <colomon> Don't know how to handle

[19:18] * moritz also doesn't know how to handle

[19:18] * lizmat neither

[19:18] <lizmat> same on jvm  :-(

[19:18] <lizmat> :q

[19:21] <ugexe> emmentaler seems to be smoke testing fine for me

[19:22] <ugexe> Inline::Perl5 is puking but thats the only thing sticking out so far (and i think thats been happening for a few days) unable to find Inline/p5helper.so IN @*INC

[19:28] *** rindolf left
[19:28] <colomon> ugexe: “stock” ennemtaler, or with the changes?

[19:28] * colomon ponders blowing away his rakudo build and starting from scratch

[19:29] <ugexe> stock. also your 'Dont know how to handle' is probably due to a comma getting placed at the end of the string

[19:29] <ugexe> %*ENV<PERL6LIB> = join ',', "file#{cwd}/installlib/lib",%*ENV<PERL6LIB> // ();

[19:29] <ugexe> that acts the same as stock for me

[19:29] <eiro> hello people 

[19:30] <lizmat> well, I guess the simple fix would be to ignore any empty specs

[19:30] <ugexe> well i assume he was doing "/some/path," ~ %*ENV<PERL6LIB>

[19:31] <ugexe> so the first time around you get the ','

[19:31] <lizmat> yeah, could be it indeed

[19:31] <ugexe> at the end. and it stays for everything else as it gets prepended

[19:31] <dalek> rakudo/nom: 5708c60 | lizmat++ | src/core/CompUnitRepo.pm:

[19:31] <dalek> rakudo/nom: Only complain about non-empty specs

[19:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5708c60191

[19:33] <lizmat> that's probably also the issue on the JVM, as it has a custom code path filling @*INC

[19:34] *** _mg_ joined
[19:34] *** tinyblak left
[19:35] *** TimToady joined
[19:36] <ugexe> so what happens when i have a file named 'bad,file#../../some-other-file'

[19:36] <vendethiel> a file name containing "/"?

[19:37] * colomon is getting more and more baffled by the proposed changes, and nothing works for him on hack.

[19:37] <ugexe> well, not an actual file. if i pass that as a filename

[19:37] <lizmat> my last fix fixed the JVM build

[19:38] <lizmat> together with the proposed emmentaler fixes, the smoke should run

[19:39] <[Tux]> Inline::Perl5 still fails 

[19:39] <lizmat> not in its testing, but in usage with Text::CVS, right ?

[19:39] *** cognominal joined
[19:39] <[Tux]> correct

[19:40] <[Tux]> csv-ip5xsio ===SORRY!===

[19:40] <[Tux]> unable to find Inline/p5helper.so IN @*INC

[19:40] <lizmat> colomon: I'm sorry about the confusion I created, but this fix was really badly needed wrt to performance

[19:40] <[Tux]> so I don't think it matters *what* module to load

[19:40] <ugexe> thats a compile time error

[19:40] <hoelzro> [Tux]: I think that's probably relating to the compunit stuff

[19:41] <[Tux]> likely

[19:41] <hoelzro> I have the same problem with linenoise =(

[19:41] * [Tux] wonders if RT#124298 will be adressed in the process of fixing

[19:42] <[Tux]> I also want to tak e alook at *DISTRO

[19:42] *** jack_rabbit joined
[19:44] <ugexe> Inline::Perl5 problem is likely due to its Build.pm file and in Tester.pm  @*INC.push('.');

[19:44] <lizmat> ugexe: wrt to :bad,file#: the idea is that externally delivered data is normalized (-I RAKUDOLIB PERL6LIB)

[19:44] <lizmat> so "bad" would become "file#bad"

[19:45] *** TimToady left
[19:45] *** LuxOcculta left
[19:45] *** TimToady joined
[19:45] <lizmat> if the creation of the CURLF on "bad" fails, we have 2 choices: complain or ignore

[19:46] <lizmat> |Tux|: confiirmed the Inline::Perl5 issue:

[19:46] <lizmat> $ perl6 -MInline::Perl5 -e 1

[19:46] <lizmat> ===SORRY!===

[19:46] <lizmat> unable to find Inline/p5helper.dylib IN @*INC

[19:46] <ugexe> what if the filename is actually 'file,bad'

[19:46] <lizmat> DIHWIDT

[19:47] <lizmat> and it's not a file, it's supposed to be a dir

[19:47] *** _mg_ left
[19:48] <[Coke]> Is there a ticket driving these changes?

[19:48] <[Coke]> (trying to follow along at home)

[19:49] <DrForr> https://gist.github.com/drforr/4a05d0dcf52cffb9b438 # Whitespace issue?

[19:51] <masak> DrForr: looks like.

[19:51] <masak> m: say ""

[19:51] <camelia> rakudo-moar 5708c6: OUTPUT«␤»

[19:51] <DrForr> With => on the previous line it's fine.

[19:51] <lizmat> [Coke] I *think* there is a ticket for startup slownes depending on number of modules installed

[19:52] <masak> m: foo␤=> 42

[19:52] <camelia> rakudo-moar 5708c6: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rUzddqAhnj␤Preceding context expects a term, but found infix => instead␤at /tmp/rUzddqAhnj:2␤------> 3=>7⏏5 42␤»

[19:52] <masak> golf'd a bit.

[19:52] <masak> std: foo␤=> 42

[19:52] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Preceding context expects a term, but found infix => instead at /tmp/5XB5B1vOvc line 2:␤------> 3<BOL>7⏏5=> 42␤Parse failed␤FAILED 00:00 136m␤»

[19:52] <masak> hm :)

[19:52] <masak> so maybe not a parsing bug after all.

[19:52] <jnthn> It appears deliberate:

[19:52] <masak> will have to wait for TimToady's input, now that STD fails, too.

[19:52] <jnthn>     token fatarrow {

[19:52] <jnthn>         <key=.identifier> \h* '=>' <.ws> <val=.EXPR(item %item_assignment)>

[19:52] <jnthn>     }

[19:53] <jnthn> Note the \h*

[19:53] <masak> right.

[19:53] <masak> yeah.

[19:53] <masak> ok, so notabug. until further notice, at least.

[19:53] <masak> mebbe it's one of them "heuristics".

[19:53] <jnthn> Easy workaround is to quote the string on the LHS

[19:53] <jnthn> (or put it on one line)

[19:53] <jnthn> Mebbe :)

[19:54] <jnthn> I *think* the parsing relies on the LTM being able to see the =>

[19:54] <jnthn> So we likely can't just throw <.ws> in place of the \h*

[19:55] <masak> and knowing TimToady, he didn't just put that \h* there for no reason.

[19:55] <jnthn> Aye

[19:55] <jnthn> I leave TimToady++ to call it, but I think you could liberalize it to \s* but not to <.ws>

[19:55] <jnthn> (without breaking the parse)

[19:58] <DrForr> I would hope so. I don't usually do foo\n=>blah, but in this case the indentation just seemed to work out.

[19:59] * masak .oO( I don't always do foon=>blah... but when I do, I break the parse )

[20:00] *** brrt left
[20:00] <ugexe> theres also :foo(␤ 42) but i doubt that has the asthetic appeal you are looking for

[20:01] <lizmat> nine: looking ath the loop in Inline::Perl5.native: shouldn't it "last" as soon as you found it ?

[20:01] <DrForr> Well, if someone wants to dub me the most ineresting programmer alive I ... won't stop them :)

[20:02] * PerlJam cites DrForr for excessive newlines

[20:02] <ugexe> did pushing onto @INC always clear @*INC out?

[20:02] <lizmat> no, never

[20:02] <lizmat> and still doesn't

[20:02] <lizmat> it's just that @*INC is supposed to contain sanitized entries

[20:03] * DrForr treats PerlJam to LoTR courtesy Newline Cinema :)

[20:03] <lizmat> before long, @*INC will only be settable through the "use lib" interface

[20:03] <ugexe> well pandas Tester.pm does @INC.push(".")

[20:03] <ugexe> which clears out @*INC

[20:03] * lizmat checks

[20:03] <japhb> DrForr: Dang it, now I'll never be able to unthink that when I watch one of their films

[20:04] <ugexe> pushing on @*INC does nto clear out @INC though

[20:04] <ugexe> er, does nto clear out @*INC

[20:05] <ugexe> damn dyslexia

[20:06] <ugexe> sorry, panda is only pushing onto @*INC. But the @INC thing is still strange behavior

[20:07] <lizmat> well, changes to @*INC should be compile time only

[20:07] <lizmat> that's one of the things I'll be able to fix soon now

[20:07] <bartolin> [Coke]: you started that gist for "dnmfarrell RT consolidation". I'd like to merge some of those new tickets (e.g. 124696-124736). what's the best way to do that? just merging the tickets and leaving a note on your gist?

[20:08] *** TimToady left
[20:08] *** romel left
[20:08] *** Rounin joined
[20:08] <ugexe> i've been using CompUnit.precomp(... :@TMP-INC)

[20:09] <ugexe> well, :INC(@TMP-INC)

[20:09] <lizmat> well, panda should start using CompUnit.precomp as well, but I thought I'd break only one set of features at a time :-)

[20:10] <ugexe> will there be a way to do 'use cur <$some-file>'?

[20:10] <[Coke]> bartolin: Yes, that's fine.

[20:10] <[Coke]> or .tell me here, or something.

[20:10] <lizmat> ugexe: it's really include spec that you specify with "use cur"

[20:11] <lizmat> (use lib in the future)

[20:11] <[Coke]> thank you. I did some yesterday and this morning, but there's a lot to get through.

[20:11] <lizmat> so, you can create a Module Foo, with a .short-id that returns "foo"

[20:11] <[Coke]> If possible, please use the same tags I'm using, (ok, resolved, rejected, merged <id>)

[20:11] <bartolin> [Coke]: yes, will do.

[20:11] <ugexe> im probably just handling dependency injection wrong, but ive ended up wanting to do use lib $some-lib or use cur $some-path-to-modules

[20:12] <lizmat> and you can refer to your CUR's as "foo#path_or_whatever_specifciation"

[20:12] <DrForr> masak: Should I file a bug, or will TimToady have to make a call?

[20:12] <DrForr> (headed to bed here shortly.)

[20:12] <ugexe> instead its a tangle of require $module, if ::($module) ~~ Failure { hope jvm doesnt crap itself }

[20:13] <[Coke]> bartolin++ Also, I heard from @perltricks, who will be trying to update his pull request this evening; at that point, once it's committed, we can just update roast when we do something with the tickets.

[20:13] <[Coke]> I think we still need to keep track of what we've touched though - someone has to review each of those automatically generated tix.

[20:13] <bartolin> [Coke]: great!

[20:14] <masak> DrForr: filing a ticket is almost never wrong :)

[20:14] <DrForr> Consider it done.

[20:16] <masak> ++DrForr

[20:16] *** atweiden left
[20:19] <lizmat> Inline::Perl5 issue seems to be a problem in CURLI.files

[20:19] <lizmat> zeroing in...

[20:24] <[Coke]> bartolin: we can move that list somewhere we you can commit to it too, also.

[20:25] <DrForr> rt#125101

[20:25] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125101

[20:26] *** TimToady joined
[20:27] <ugexe> that double slash

[20:27] <masak> right there in the source: https://github.com/tadzik/synopsebot/blob/b73166307078aa824315775f93739c5ca7353cbd/synopsebot.p6#L19

[20:28] <RabidGravy> a little slash with clogs on, there in the source right there

[20:28] <bartolin> [Coke]: what about misc/rt.perl.org in the perl6/mu repository?

[20:29] <bartolin> [Coke]: there lives the list of closed parrot tickets

[20:30] *** TimToady left
[20:32] *** Foxcool left
[20:34] <ugexe> personally i think it should use 4 slashes

[20:34] *** darutoko left
[20:34] <[Coke]> bartolin: sure, give me a minute to clone that.

[20:36] *** TimToady joined
[20:37] <ugexe> lizmat: ignoring the fact pushing @*INC is wrong, shouldn't panda be unshifting onto @*INC instead? seems like that could solve some possible problems related to compiling with an old previously installed module

[20:37] *** synbot6 left
[20:37] <lizmat> well, I'm not sure, I figured there was a reason for pushing

[20:38] <lizmat> instead of unshifting

[20:38] *** domidumont left
[20:39] *** diana_olhovik_ left
[20:40] <ugexe> from what i remember there is no reason, but thats just from going over the code and not from tadzik. and i think unshifting would solve some bugs ive encountered and fixed via deleting all modules and reinstalling.

[20:40] *** diana_olhovik_ joined
[20:41] <ugexe> sort of ashamed it took me until now to realize 

[20:41] <lizmat> it feels like CURLI.install doesn't create a MANIFEST

[20:44] <lizmat> ugexe: could well be

[20:45] <[Coke]> bartolin: done

[20:45] *** xfix left
[20:46] <dalek> mu: 41fc623 | coke++ | misc/rt.perl.org/c (2 files):

[20:46] <dalek> mu: bring files from rt cleanup gist

[20:46] <dalek> mu: review: https://github.com/perl6/mu/commit/41fc62320e

[20:46] <ugexe> i think CURLI.install is giving me MANIFEST... give me a few minutes

[20:46] <[Coke]> er, done.

[20:46] <bartolin> *g* [Coke]++

[20:50] <dalek> rakudo/nom: 198d9e7 | lizmat++ | src/core/CompUnitRepo/Local/Installation.pm:

[20:50] <dalek> rakudo/nom: Remove some more beautiful plumage

[20:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/198d9e7a7d

[20:51] <ugexe> yeah CURLI.install is failing to write the manifest/numbered files

[20:52] <lizmat> and after that it can't find any files

[20:53] *** telex left
[20:54] <ugexe> hmm in the MANIFEST that i moved to see if a new one gets generated it has: 2015.04-158-g5708c60

[20:54] *** telex joined
[20:54] <dalek> mu: 52ae744 | usev6++ | misc/rt.perl.org/cleanup_nyc_hackathon_tickets.txt:

[20:54] <dalek> mu: Mark merged tickets for S32-str/sprintf-b.t

[20:54] <dalek> mu: review: https://github.com/perl6/mu/commit/52ae744f88

[20:57] <dalek> mu: a1ab1a4 | usev6++ | misc/rt.perl.org/tickets_closed_parrot_only.txt:

[20:57] <dalek> mu: Add one ticket closed as 'parrot only'

[20:57] <dalek> mu: review: https://github.com/perl6/mu/commit/a1ab1a407b

[20:59] *** skids left
[21:03] *** dolmen joined
[21:03] <ugexe> I'm getting a few extra "Missing serialize function for REPR ReentrantMutex" on jvm when compiling modules now

[21:03] *** TimToady left
[21:03] <lizmat> jnthn might know

[21:04] <jnthn> I think I fixed that on Moar...

[21:04] <lizmat> jnthn: this is specificallly on JVM

[21:04] <lizmat> so NYI ?

[21:04] <jnthn> Yeah, the fix needs porting I guess

[21:05] <lizmat> ugexe: looks like CURLI.install is not called at all

[21:05] <jnthn> RT it and I'll get to it. I've developed a mild headache, so think I'll leave more coding until tomorrow...

[21:07] <[Coke]> bartolin++

[21:07] <masak> 'night, #perl6

[21:08] <lizmat> good night, masak!

[21:09] *** spider-mario left
[21:10] <ugexe> for me its returning True

[21:11] *** spider-mario joined
[21:14] <ugexe> ok it created the manifest as well

[21:19] *** TimToady joined
[21:19] <lizmat> I think the issue is that CUSTOM_LIB<site> now contains a Str, rather than a CURLI

[21:19] *** silug left
[21:20] *** Guest96 joined
[21:21] <lizmat> bingo

[21:21] <ugexe> sounds likely. i dont use CUSTOM_LIB/PERL6LIB which might explain why i dont encounter the same behavior

[21:22] <lizmat> testing a fix

[21:23] <dalek> mu: c8d9fa7 | usev6++ | misc/rt.perl.org/cleanup_nyc_hackathon_tickets.txt:

[21:23] <dalek> mu: Merge 8 tickets for ':: NYI' into existing ticket

[21:23] <dalek> mu: review: https://github.com/perl6/mu/commit/c8d9fa735e

[21:25] <bartolin> good night, #perl6

[21:26] <lizmat> good night. bartolin 

[21:29] <ugexe> m: say @*INC

[21:29] <camelia> rakudo-moar 198d9e: OUTPUT«file#/home/camelia/.perl6/2015.04-159-g198d9e7/lib inst#/home/camelia/.perl6/2015.04-159-g198d9e7 file#/home/camelia/rakudo-inst-2/share/perl6/lib file#/home/camelia/rakudo-inst-2/share/perl6/vendor/lib file#/home/camelia/rakudo-inst-2/share/perl6/site/lib…»

[21:29] <ugexe> m: say @*INC; @INC.push(".")

[21:29] <camelia> rakudo-moar 198d9e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/9KuQAYO7Sj␤Variable '@INC' is not declared␤at /tmp/9KuQAYO7Sj:1␤------> 3say @*INC; @INC.push(".")7⏏5<EOL>␤»

[21:30] <ugexe> well, on the command line that prints out nothing

[21:30] *** muraiki left
[21:30] <kd`> /w/w 11

[21:32] *** silug joined
[21:32] <ugexe> i guess non-strict is clobbering the INC name 

[21:32] *** bjz left
[21:34] <lizmat> m:  @*INC.push("."); say @*INC

[21:34] <camelia> rakudo-moar 198d9e: OUTPUT«file#/home/camelia/.perl6/2015.04-159-g198d9e7/lib inst#/home/camelia/.perl6/2015.04-159-g198d9e7 file#/home/camelia/rakudo-inst-2/share/perl6/lib file#/home/camelia/rakudo-inst-2/share/perl6/vendor/lib file#/home/camelia/rakudo-inst-2/share/perl6/site/lib…»

[21:34] <lizmat> m:  @*INC.push("."); say @*INC[*-1]

[21:34] <camelia> rakudo-moar 198d9e: OUTPUT«.␤»

[21:34] <lizmat> m:  @*INC.push("file#."); say @*INC[*-1]     # better

[21:34] <camelia> rakudo-moar 198d9e: OUTPUT«file#.␤»

[21:37] <ugexe> my confusion seemed to be from [email@hidden.address] not being declared, so i guess it automatically gets declared my @INC before the say @*INC but after @*INC was populated

[21:43] <lizmat> ok, I pushed a change to panda that will at least create the MANIFEST

[21:43] <lizmat> unfortunately, this breaks testing on Shell::Command

[21:43] <lizmat> in the panda bootstrap process

[21:44] <lizmat> and I'm getting too tired to look at this

[21:44] <lizmat> so, I will get me some sleep and look at it again in the morn

[21:44] <lizmat> *on

[21:47] <ugexe> on JVM the reentrant mutex error i can get trying to compile just 'use Perl6::Grammar:from<NQP>'

[21:47] <lizmat> &

[21:49] <ugexe> which yesterday it could

[21:51] <jnthn> 'night, lizmat 

[21:53] *** vendethiel left
[22:05] *** kaare__ left
[22:07] *** wtw left
[22:08] *** diana_olhovik_ left
[22:16] *** dolmen left
[22:20] *** Isp-sec left
[22:24] * raydiak looks out the window at the again-broken car sitting there, and wonders what software would be like if bytes were as costly as bolts and every recompilation required new gaskets and fluids

[22:24] *** jack_rabbit left
[22:26] *** RabidGravy left
[22:27] <ugexe> imagine if most software ran as long as most cars

[22:33] <raydiak> .oO( oh yeah? well MY uptime is 270k miles! )

[22:40] *** skids joined
[22:46] *** Rounin left
[23:13] *** Peter_R left
[23:13] *** lolisa left
[23:15] <TimToady> the \h* is intentional for LTM purposes, and it can't be liberalized to \s* without potentially breaking heredocs

[23:15] *** Peter_R joined
[23:16] *** vike left
[23:16] <TimToady> it also reduces the LTM lookahead greatly on identifiers without a subsequent =>

[23:17] <TimToady> if you let it go past \n then it probably has to scan a whole bunch of spaces on the next line on the offchance someone wanted to put a newline before the =>

[23:17] <TimToady> and you'll note that this is the first time in a decade that someone has actually attempted it :)

[23:18] <TimToady> so it's gonna stay \h*

[23:18] <labster> awww

[23:18] * labster doesn't actually care

[23:19] *** vike joined
[23:19] <labster> Actually that's all pretty reasonable.

[23:20] *** xiaomiao left
[23:22] *** xiaomiao joined
[23:27] *** spider-mario left
[23:27] *** cognominal left
[23:35] <tony-o> m: my $r = start { sleep 3; }; my $timeout = Promise.in(1); await Promise.anyof($r, $timeout); $r.break if $timeout.status ~~ Kept;

[23:35] <camelia> rakudo-moar 198d9e: OUTPUT«Access denied to keep/break this Promise; already vowed␤  in block <unit> at /tmp/Zx2vszPkZ9:1␤␤»

[23:39] <tony-o> is there a mechanism to break a start {} ?

[23:40] <pmichaud> good afternoon, #perl6

[23:40] <tony-o> hi pmichaud 

[23:48] *** gfldex left
[23:53] *** espadrine left
