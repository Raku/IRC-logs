[00:00] <mojca> I'm not saying that panda is a perl5 script

[00:00] <cygx> mojca: no, it's about mkpath calling .split on a path object, which tries to open that file

[00:00] <mojca> I'm saying that I see perl5.22 in the list of process names (like I see perl5.12 when I run autoconf)

[00:00] <cygx> (at least that yould be my guess from reading the code)

[00:00] <cygx> *would

[00:00] *** kjs_ joined
[00:01] *** grondilu joined
[00:01] <mojca> any suggestions what I should try? I haven't touched perl for about ten years, let alone perl6

[00:01] <cygx> kittenlips: the channel backlog contains ample testimony that installing rakudo isn't always painless

[00:01] <kittenlips> cygx: sorry didn't know that

[00:02] <TimToady> and 'several major architectures' would be more accurate than 'many architectures'

[00:02] <kittenlips> Should I change it to "fairly easy to install"?

[00:02] <_nadim> I'd like to split the code of a class in two or three files. no it des not make sense to have different classes or roles,  can one do that without getting a redeclaration of the class error?

[00:03] <TimToady> we just don't like to overpromise

[00:03] <kittenlips> TimToady++

[00:03] <TimToady> it will be very easy for most people on the same beaten track as we are

[00:03] <TimToady> not at all easy for people who stray from that track

[00:04] <RabidGravy> _nadim, no

[00:04] <kittenlips> TimToady: meaning straying from the rakudobrew track?

[00:04] <_nadim> too bad!

[00:04] <cygx> mojca: have you tried the change to panda I proposed earlier?

[00:04] <mojca> you mean adding '~'?

[00:05] <cygx> kittenlips: or trying to make rakudobrew do something it wasn't designed for

[00:05] <cygx> mojca: yes

[00:05] <ShimmerFairy> _nadim: sounds like an interesting thing to extend Perl 6 with in a module, assuming it's possible, though :)

[00:05] *** lichtkind left
[00:07] <_nadim> using roles is pretty easy but it force everything to be public

[00:07] <kittenlips> TimToady cygx OK SX and Quora updated

[00:08] <_nadim> which is kinda the point as roles should be just that extra roles, not somehting that deals with internal details

[00:08] <cygx> kittenlips++

[00:08] <kittenlips> changed as you recommended to "several major architectures" and "fairly straightforward to install"

[00:08] <mojca> cygx: it works better, but not properly

[00:08] <kittenlips> https://www.quora.com/When-is-Perl-6-coming-out http://stackoverflow.com/questions/2666428/what-is-the-current-state-of-perl-6/

[00:08] <mojca> the first time it stops with "Found no writable directory into which panda could be installed"

[00:08] <mojca> but the second time it is successful

[00:09] <mojca> the weird thing is that something already creates /Users/me/.perl6/2015.12 even if panda fails

[00:09] <mojca> so it's just the final "panda" dir that fails to be created

[00:10] <mojca> but the patch isn't complete/fully functional

[00:11] <mojca> I find it weird that perl6 doesn't have a shortcut for "try to make this folder unless one already exists"

[00:11] <ShimmerFairy> _nadim: yeah, the only thing advice I can offer is that maybe you can refactor your design into naturally smaller classes, so having more public classes wouldn't actually be an issue.

[00:12] *** ELBeavers_away is now known as ELBeavers

[00:12] <_nadim> There's always the preprocessor if this upsets me too much.

[00:13] *** jshy joined
[00:13] *** Praise left
[00:13] <mojca> if I replace "try mkpath $pandadir unless $pandadir ~~ :d;" with "mkpath ~$pandadir;" then it works the first time

[00:13] <mojca> If I put just "mkpath $pandadir;" then it fails as before

[00:14] <mojca> so probably the second occurence ("unless $pandadir") is also problematic

[00:14] *** Praise joined
[00:14] *** Praise left
[00:14] *** Praise joined
[00:15] *** jshy left
[00:15] <_nadim> ShimmerFairy: I understand the reason why one wants to have the whole class in a single compilation unit, it's simpler than implement dependencies and "link" stuff together before running

[00:16] *** RabidGravy left
[00:16] <cygx> I think plain mkdir already can create paths and does not fail on existing directories

[00:16] <cygx> we should probably change panda to use that instead of the custom mkpath

[00:17] <_nadim> but something one could have some mechanism that is used at the declaration time of the class that says "Hej, there are other bits of me in these files". like inheritance or mixins do.

[00:17] <bbkr> hi. https://travis-ci.org/bbkr/GeoIPerl6#L1177 - NativeCall forces me to use appropriate numeric type.  which one should I use if *.h file for this library says simply "int" ?

[00:17] <cygx> bbkr: int32

[00:17] <bbkr> cygx: thanks, trying it right now. \

[00:17] <Skarsnik> Like NC doc say x)

[00:18] <Skarsnik> int32          (int in C)

[00:18] *** shicheng joined
[00:19] <ShimmerFairy> _nadim: yeah, that's where my suggestion for a module that offered that kind of stuff comes in :)

[00:20] <Skarsnik> I though it was unit x√†

[00:20] <Skarsnik> *unit role

[00:21] <_nadim> there's  an --optimize option to perl6, anyone can say a word about this?

[00:21] <Skarsnik> lol

[00:21] <cygx> bbkr: assuming you're not using a Cray architecture - those use ilp64 :p

[00:21] <Skarsnik> Sorry you wanted a word ^^

[00:22] <_nadim> seems to be a no op

[00:22] <ShimmerFairy> _nadim: --optimize=3 is used to compile the CORE setting, so it's at least good enough for that :)

[00:22] <dalek> doc: a7ed560 | skids++ | doc/Type/Slip.pod:

[00:22] <dalek> doc: Flesh out Slip with examples, and fix a typo

[00:22] <dalek> doc: review: https://github.com/perl6/doc/commit/a7ed560864

[00:23] *** BenGoldberg joined
[00:24] *** Arrowhead left
[00:24] *** shichen__ joined
[00:24] <kittenlips> Non Perl 6 question, but may I ask does anyone know why there is nothing scheduled for Perl at FOSDEM this year? https://fosdem.org/2016/schedule/track/perl/

[00:24] <kittenlips> Yikes

[00:25] <kittenlips> doesn't look good, every other language has tons of speakers

[00:25] *** shicheng left
[00:25] *** shicheng_ left
[00:27] <timotimo> oooooh

[00:28] <timotimo> chmod -c shows you what actually changed

[00:28] *** Actualeyes joined
[00:30] <dalek> doc/cli-file-load: 59bf06a | (Brock Wilcox)++ | bin/p6doc:

[00:30] <dalek> doc/cli-file-load: Also allow p6doc <filename>

[00:30] <dalek> doc/cli-file-load: review: https://github.com/perl6/doc/commit/59bf06aa77

[00:32] <mojca> what exactly is the state file for panda meant for?

[00:32] <cygx> mojca: you could also try replacing the line in question with `try $pandadir.mkdir`

[00:33] <mojca> I would like to create a package for panda (so that users don't have to bootstrap it manually), so that panda would then put files under $HOME/.perl6

[00:33] <mojca> and I would like to know which files are needed for that

[00:33] <mojca> cygx: doing it now

[00:34] *** dotness left
[00:35] <_nadim> night all!

[00:35] *** shicheng joined
[00:35] <mojca> cygx: that works

[00:36] *** shichen__ left
[00:36] <cygx> \o/

[00:36] <mojca> thanks a lot

[00:36] *** kittenlips left
[00:36] *** xpen joined
[00:37] <mojca> one more question: can I somehow remove /opt/local/share/perl6/site/panda from the list of folders where panda would try to install things?

[00:37] <mojca> that is the space reserved for the package manager

[00:38] <mojca> putting there anything else without the knowledge of the package manager would be problematic and would lead into problems later on

[00:38] <gfldex> .seen hankache

[00:38] <yoleaux> I saw hankache 29 Dec 2015 21:24Z in #perl6: <hankache> see you tomorrow

[00:41] *** lnrdo joined
[00:41] *** cdg joined
[00:41] *** xpen left
[00:43] *** llfourn joined
[00:44] *** jme` joined
[00:45] *** kjs_ left
[00:46] *** lnrdo left
[00:47] *** llfourn left
[00:47] <cygx> mojca: could you check if https://github.com/tadzik/panda/pull/275/files was the changed that worked for you?

[00:48] <mojca> yes; do you want me to leave a comment?

[00:49] <cygx> sure

[00:49] <cygx> I'm coding blind here, so that would be appreciated

[00:52] *** SwellJoe joined
[00:52] <bbkr> cygx: can you please take a look at https://travis-ci.org/bbkr/GeoIPerl6/builds/99358922#L2236 ? I don't understand error message, NativeCall method stubs are defined correctly (i think) - https://github.com/bbkr/GeoIPerl6/blob/master/lib/GeoIP.pm .

[00:53] <bbkr> and I don't have "$type" variable anywhere in the code 

[00:53] *** _nadim left
[00:54] <Skarsnik> type is in NC code

[00:54] <bbkr> it was working on v6.c but stopped on HEAD

[00:54] <Skarsnik> Yes it's my fault

[00:55] <cygx> missing Mu?

[00:55] <Skarsnik> Hm

[00:56] * cygx hasn't actually looked at any code yet

[00:57] <Skarsnik> I know what is wrong

[00:58] <Skarsnik> but I have to go bed

[00:58] <bbkr> is it NativeCall issue or my code?

[00:58] <Skarsnik> it's in NC

[00:59] <Skarsnik> it's because of https://github.com/rakudo/rakudo/blob/nom/lib/NativeCall.pm6#L216 validnctype there is no HOW on the class yet

[01:00] <bbkr> thanks for checking. I also have to go to sleep, please leave me message when you commit the fix so I can restart Travis job.

[01:00] <bbkr> Skarsnik++

[01:00] *** mcmillhj joined
[01:01] <Skarsnik> Look tricky to fix :(

[01:01] *** Arrowhead joined
[01:02] *** regreg joined
[01:05] *** yeahnoob joined
[01:05] *** Arrowhead left
[01:08] <mojca> cygx: thanks a lot for helping me out :), I added the panda package to MacPort now, even though it will probably need a great deal of polishing

[01:10] <cygx> mojca: glad to be of help

[01:10] <cygx> and with that, good night o/

[01:10] <mojca> good night to you and from me as well

[01:11] *** cygx left
[01:11] *** mojca left
[01:13] *** SwellJoe left
[01:16] *** Actualeyes left
[01:17] *** Dee22 is now known as AndyDee

[01:18] *** lustlife joined
[01:19] *** shicheng left
[01:19] *** Skarsnik left
[01:23] *** itcharlie left
[01:24] *** itcharlie joined
[01:24] *** virtualsue left
[01:30] *** Actualeyes joined
[01:30] *** Ben_Goldberg joined
[01:32] *** cdg left
[01:33] *** BenGoldberg left
[01:33] <timotimo> published the weekly again

[01:33] <flussence> timotimo++

[01:36] <vendethiel> timotimo++

[01:37] *** xpen joined
[01:39] <jast> first working Perl 6 program written, yay! also, best christmas in years. ;)

[01:41] <Hotkeys> merry perlmas

[01:42] *** xpen left
[01:43] <awwaiid> Y'all should come to DC in April for DCBPW-2016! Also sign up to give talks :) http://dcbpw.org/

[01:44] *** llfourn joined
[01:47] *** muraiki left
[01:49] *** llfourn left
[01:53] *** CoconutCrab left
[01:57] *** CoconutCrab joined
[02:05] *** BenGoldberg_ joined
[02:06] *** Ben_Goldberg left
[02:06] *** AlexDaniel joined
[02:06] *** jshy joined
[02:07] *** jshy left
[02:07] *** kittenlips joined
[02:09] *** cdg joined
[02:10] *** addison left
[02:11] <a3r0> Can I use Perl5 modules with Inline::Perl5 in Perl6's Promise/Channels ?

[02:13] <awwaiid> a3r0: ooo interesting question. My _guess_ is ... maybe, depending on what the module is doing. You should try it :)

[02:14] <TimToady> a3r0: if the Perl 5 modules in question are not thread-safe, good luck!  :)

[02:15] <timotimo> that's how you write a random number generator ...

[02:15] *** itcharlie left
[02:15] *** itcharlie1 joined
[02:15] *** vendethiel left
[02:16] *** Ben_Goldberg joined
[02:18] *** BenGoldberg_ left
[02:28] *** ssotka joined
[02:29] *** addison joined
[02:29] *** lnrdo joined
[02:30] *** shicheng joined
[02:30] *** shicheng left
[02:31] <autarch> something in rakudo changed recently and broke File::LibMagic - https://travis-ci.org/autarch/perl6-File-LibMagic/builds/99276134 - not sure what's going on

[02:32] *** xpen joined
[02:33] *** kanishka joined
[02:34] *** sumdumgoi joined
[02:34] *** lnrdo left
[02:35] *** ssotka left
[02:37] *** itaipu joined
[02:40] *** llfourn joined
[02:42] <ShimmerFairy> m: say "AB" ~~ S/<alpha>/1/    # umm... how am I supposed to use S/// then?

[02:42] <camelia> rakudo-moar 477830: OUTPUT¬´Potential difficulties:‚ê§    Smartmatch with S/// can never succeed because the subsequent string match will fail‚ê§    at /tmp/qBkXHzPSyy:1‚ê§    ------> 3say "AB" ~~ 7‚èè5S/<alpha>/1/    # umm... how am I suppos‚ê§False‚ê§¬ª

[02:44] * flussence stares at that for a while to figure out why

[02:45] *** ilbot3 left
[02:45] <flussence> m: my $orig = $_ = "AB"; S/<alpha>/1/; say $orig ~~ $_; # it's doing something like this I guess?

[02:45] <camelia> rakudo-moar 477830: OUTPUT¬´True‚ê§¬ª

[02:45] <flussence> or not...

[02:45] *** protium joined
[02:47] *** itaipu left
[02:47] *** ilbot3 joined
[02:50] *** khw left
[02:51] <ShimmerFairy> m: my $orig = $_ = "AB"; say S/<alpha>/1/;

[02:51] <camelia> rakudo-moar 477830: OUTPUT¬´1B‚ê§¬ª

[02:51] *** thundergnat left
[02:51] <ShimmerFairy> since none of the other x/// things _require_ me to use the non-smartmatch form, I cry foul on this :)  (esp. since I don't ever want to use those things without ~~ )

[02:55] *** ssid joined
[02:56] *** aborazmeh joined
[02:56] *** aborazmeh left
[02:56] *** aborazmeh joined
[02:56] *** Su-Shee_ joined
[02:56] *** ssid left
[02:57] <flussence> I think the main reason for S/// is to make certain patterns of ¬´S[foo] = bar¬ª not-impossible... I can't imagine it's necessarily useful everywhere s/// is

[02:57] <AlexDaniel> what is S/// ?

[02:58] <cxreg> "This is because the placeholder variables are sorted in Unicode order. "  <- I gotta say that is highly non-intuitive

[02:59] <cxreg> regarding $^ twigils

[02:59] <ShimmerFairy> AlexDaniel: non-mutating version of s///

[02:59] <flussence> isn't that just $_.sort(*.NFKD) or something?

[02:59] <AlexDaniel> cxreg: I've always thought that they were in order of appearance

[02:59] *** Su-Shee left
[03:00] <cxreg> AlexDaniel: you'd think?  going by lexical sort is baffling.

[03:00] <ShimmerFairy> flussence: I don't really buy "not necessarily useful like s///" as an argument for not allowing "thing" ~~ S/// :)

[03:00] <flussence> and as far as twigils go, they're all ASCII anyway

[03:00] <flussence> <^ * = ?>.sort(*.ord).say

[03:00] <flussence> m: <^ * = ?>.sort(*.ord).say

[03:00] <camelia> rakudo-moar 477830: OUTPUT¬´(* = ? ^)‚ê§¬ª

[03:00] <flussence> m: <^ * = ?>.sort(*.ord).map(*.ord).say

[03:00] <camelia> rakudo-moar 477830: OUTPUT¬´(42 61 63 94)‚ê§¬ª

[03:00] <ShimmerFairy> cxreg: if your placeholder variables are beginning to get unwieldy, or you generally don't want "in lexicographic order", you should stop using placeholders :)

[03:01] <cxreg> flussence: it's saying that $^bar comes before $^foo as a positional parameter because "b" lt "f"

[03:01] <cxreg> ShimmerFairy: even if i could agree with that it's still a terrible decision

[03:01] <flussence> oh, that's clearer with context

[03:02] <flussence> for some reason my brain made up some imaginary thing where all kinds of twigil-variables were in a list...

[03:02] <ShimmerFairy> cxreg: I disagree. It makes supplying a sort lambda like  { $^b cmp $^a }  (reverse of default sort) really nice, for example :)

[03:03] <AlexDaniel> ShimmerFairy: what about $^a Rcmp $^b ?

[03:03] <cxreg> if that's the intended use then the example on doc.perl6.org should read that way.  it uses "$^second follows $^first" as an exampel

[03:03] <cxreg> which only highlights how awful it is

[03:03] <cxreg> $^a and $^b are possibly intuitive but just about nothing else is

[03:04] <ShimmerFairy> cxreg: as far as I have seen, you pretty much only ever use $^ vars as single-letter variables, where the sorting is a lot less obnoxious than it may appear to be.

[03:04] <cxreg> then the docs should absolutely reflect that

[03:04] <ShimmerFairy> cxreg: at the very least, I've never bothered with _descriptive_ $^ variables :)

[03:04] <cxreg> in fact, it should maybe only *allow* single letter placeholders

[03:04] <AlexDaniel> I've always did descriptive $^ variables

[03:04] <cxreg> but that's possibly going too far?

[03:04] <AlexDaniel> and now it turns out that by pure luck they were in correct order

[03:05] <cxreg> good lord.

[03:05] <cxreg> hate hate hate this "feature".   sorry.

[03:05] <flussence> the example definitely should use $^a and $^b, since that whole part of the language exists to get rid of perl5's magic $a and $b

[03:05] <cxreg> it's the kind of thing that makes the internet rage at perl's "read-only warts"

[03:06] <AlexDaniel> cxreg: I'm with you. Even if there are reasons for it to be this way, this is going to be a pitfall. A pretty common one actually‚Ä¶

[03:06] <ShimmerFairy> it's really meant for cases where you don't want to bother typing -> $a, $b { $b cmp $a }, because otherwise you should really take the time to do the -> ... bit.

[03:06] *** Ben_Goldberg left
[03:06] <cxreg> er, "write-only

[03:06] <AlexDaniel> ShimmerFairy: what's wrong with Rcmp, again?

[03:06] <ShimmerFairy> AlexDaniel: nothing, but as always TIMTOWTDI :)

[03:06] <AlexDaniel> m: say ‚Äòa‚Äô cmp ‚Äòb‚Äô

[03:06] <camelia> rakudo-moar 477830: OUTPUT¬´Less‚ê§¬ª

[03:06] <AlexDaniel> m: say ‚Äòa‚Äô Rcmp ‚Äòb‚Äô

[03:06] <camelia> rakudo-moar 477830: OUTPUT¬´More‚ê§¬ª

[03:07] *** Ben_Goldberg joined
[03:07] <cxreg> no perl hacker objects to TIMTOWTDI.  but fixing highly counterintuitive syntax is the whole reason perl 6 exists.

[03:07] <AlexDaniel> ShimmerFairy: fair enough. Either do Rcmp or take the time to do the -> bit‚Ä¶

[03:08] <cxreg> TimToady: ping.  would like your input on tihs.

[03:08] <ShimmerFairy> well, like or not the current behavior is part of Perl 6. There's no way it'll change by this point.

[03:08] <skids> ShimmerFairy: I had another couple thoughts on the whole binary grammar/unpack thing here https://gist.github.com/skids/cfb129509b0849f50deb

[03:08] <flussence> .oO( {"name":"Acme::RCMP",provides:["Moose"]} ) </acronympun>

[03:08] <cxreg> LOL

[03:08] <TimToady> it's for simple things; if you want to get fancy, don't use it, that is all

[03:08] <AlexDaniel> ShimmerFairy: not that we have to keep counter-productive behavior forever.

[03:10] <TimToady> "it can be abused" is not an argument here

[03:10] <AlexDaniel> .oO( notes for perl6critic: start complaining when you see non-single-character $^vars )

[03:10] <cxreg> it's not a matter of abuse, it's a question of "the casual user does it wrong because it's not obvious"

[03:10] <TimToady> the casual user will do all sorts of things wrong anyway

[03:10] <cxreg> oh well.  whatever.  it'll be among the language's more disliked parts, but if you don't care then ok.

[03:10] <ugexe> m: say $^1; 

[03:10] <camelia> rakudo-moar 477830: OUTPUT¬´one((Any), 1)‚ê§¬ª

[03:11] <TimToady> I think you're projecting :)

[03:11] <cxreg> talk to me in 2 years

[03:11] <flussence> if anyone can come up with a pack/unpack replacement that lets me do the equivalent of a perl5 "w/a" format, but with arbitrary objects instead of "w", I'll be very happy

[03:12] <cxreg> I'm a fairly decent straw man for the influx of users here

[03:12] <ShimmerFairy> It's admittedly unexpected when you use multi-char $^ vars, but in the simple case it's easy to intuit that $^b cmp $^a is comparing the second arg to the first, in my opinion.

[03:12] <flussence> (who'd'a thought I'd actually *need* the w format some day...)

[03:13] <cxreg> anyway, the docs need fixing.  where's the source code for http://doc.perl6.org/ ?

[03:13] <flussence> github.com/perl6/doc :)

[03:13] <ShimmerFairy> skids: seems a bit complicated, but then again my thoughts are more aligned with a separate 'grammar'-like construct than more "diffuse" arrangement of methods on a per-class basis :)

[03:13] <cxreg> flussence: ok thx

[03:13] *** rickbike joined
[03:13] *** noganex joined
[03:14] <ShimmerFairy> skids: in particular it feels like 'packing' would try to be too many things at once, where I'd prefer to separate those things (e.g. grammar-like matching vs. (de)serialization vs. ...)

[03:15] *** Ben_Goldberg left
[03:16] *** addison left
[03:16] <skids> ShimmerFairy: what I was trying to get at was extracting the common parts shared between classes and rules based around binary structures so the "code" could be shared -- that way the "too many things" can just draw from that common base and do their won things.

[03:16] <skids> *own

[03:16] *** noganex_ left
[03:16] *** Ben_Goldberg joined
[03:17] * flussence thinks we should just do the perl 5 thing here: implement ALL these designs and let the best one win

[03:17] <ShimmerFairy> skids: I see. I guess I just don't have a clear picture of how problematic the existing separation would be (since I can't help but think of pattern matching and serialization as completely different tasks)

[03:19] *** Ben_Goldberg left
[03:20] *** Ben_Goldberg joined
[03:23] *** kid51 left
[03:23] <yurivish> do you folks have recommendations for a perl6 repl? 

[03:26] <flussence> `panda install Readline` is as good as it gets right now

[03:27] <gfldex> i use camelia as my repl :)

[03:28] <hoelzro> I would also recommend Linenoise, as it includes tab completions

[03:29] *** Ben_Goldberg left
[03:31] <yurivish> tab completions sound nice. I'll check out out!

[03:32] <cxreg> AlexDaniel: ShimmerFairy: what do you think about this https://github.com/cxreg/doc/commit/9bdd74b

[03:35] <AlexDaniel> cxreg: it is great

[03:35] <skids> cxreg: That looks to be a good improvement to me, make a PR and I'll push it.

[03:36] <cxreg> just did

[03:37] <dalek> doc: c073e8e | (Dave Olszewski)++ | doc/Language/variables.pod:

[03:37] <dalek> doc: fix perL typo

[03:37] <dalek> doc: review: https://github.com/perl6/doc/commit/c073e8e5fb

[03:37] <dalek> doc: 9bdd74b | (Dave Olszewski)++ | doc/Language/variables.pod:

[03:37] <dalek> doc: improve example of placeholder variables

[03:37] <dalek> doc: 

[03:37] <dalek> doc: This better represents the intended usage, such as { $^b cmp $^a }, and

[03:37] <dalek> doc: cautions the reader against names that require mental sorting in order

[03:37] <dalek> doc: to properly write or understand the code.

[03:37] <dalek> doc: review: https://github.com/perl6/doc/commit/9bdd74bdc5

[03:37] <dalek> doc: 1b5a682 | skids++ | doc/Language/variables.pod:

[03:37] <dalek> doc: Merge pull request #292 from cxreg/master

[03:37] <dalek> doc: 

[03:37] <dalek> doc: docs improvement and placeholder enculturation cxreg++

[03:37] <dalek> doc: review: https://github.com/perl6/doc/commit/1b5a68272d

[03:37] <cxreg> thanks skids++

[03:42] <flussence> strange day; I've reported 7 bugs against my own code.

[03:44] <cxreg> wrong day to stop sniffing glue?

[03:44] <AlexDaniel> cxreg: thank *you*. It is a good remark :)

[03:46] <cxreg> I've had a number of thoughts about the docs as I read them.  now that i have a fork going i'll probably contribute a bit more

[03:50] *** itcharlie1 left
[03:51] *** itcharlie joined
[04:09] <ugexe> m: say get;

[04:09] <camelia> rakudo-moar 477830: OUTPUT¬´C√©ad sl√°n ag sl√©ibhte maorga Chontae Dh√∫n na nGall‚ê§¬ª

[04:10] <ugexe> m: say get("asdf");

[04:10] <camelia> rakudo-moar 477830: OUTPUT¬´Method 'get' not found for invocant of class 'Str'‚ê§  in block <unit> at /tmp/ZI8AH_faq5 line 1‚ê§‚ê§¬ª

[04:11] <ugexe> shouldn't that be an undeclared routine error?

[04:12] <kittenlips> doesn't perl6 have REPL built-in?

[04:13] <kittenlips> I would recommend Linenoise as well as it not only has tab completion but history

[04:13] *** kaare_ joined
[04:14] *** yqt left
[04:14] <kittenlips> panda install Linenoise

[04:15] *** kittenlips left
[04:16] <grondilu> is it still terribly slow though?  Last time I tried it really sucked.

[04:17] *** lnrdo joined
[04:21] *** lnrdo left
[04:28] *** SwellJoe joined
[04:28] <yurivish> Seems fine so far. It augments the built-in repl so things like the arrow keys work again, which was appreciated. The tab completion seems a bit hard to work with ‚Äì I was hoping it would do something like bash, where it lists the possible completions rather than completing with its best guess

[04:38] *** cdg left
[04:42] <zostay> hmmm... trying to build rakudobrew and i'm getting this: Could not find symbol '&bool' in block at ~/.rakudobrew/moar-nom/install/share/perl6/sources/7822BB220E20131A2CA9DDCBC27AB2A829F8C9CC line 13

[04:43] <skids> zostay: there was some bool related problem a week ago which could only be fixed by nuking previous installs.

[04:43] <zostay> i have been away from perl6 for a couple weeks or so... i'll try that, thx

[04:48] <zostay> yep, that worked, thx

[04:48] <skids> glad to help

[04:54] *** Sgeo left
[04:55] *** aborazmeh left
[04:55] *** Sgeo joined
[04:56] *** cdg joined
[04:56] *** cdg left
[04:56] *** cdg joined
[04:59] <sumdumgoi> m: die "foo";

[04:59] <camelia> rakudo-moar 477830: OUTPUT¬´foo‚ê§  in block <unit> at /tmp/tHV2yeXhjK line 1‚ê§‚ê§¬ª

[05:00] <sumdumgoi> m: my %h = (a=>1); for %h.values -> $v { $v = 2 }; # should choke

[05:00] <camelia> rakudo-moar 477830: OUTPUT¬´Cannot assign to a readonly variable or a value‚ê§  in block <unit> at /tmp/MyzuhxYiJ3 line 1‚ê§‚ê§¬ª

[05:01] <sumdumgoi> Interesting. On my local install I wasn't getting a unit or line number. :P

[05:01] *** cdg left
[05:04] <sumdumgoi> (or filename)

[05:14] *** psy_ left
[05:16] *** cdg joined
[05:21] *** molaf joined
[05:23] *** Cabanossi left
[05:25] *** Cabanossi joined
[05:31] <gfldex> m: dd $[["", 'abc', ""],].List.flat, $[["", 'abc', ""],].Array.flat, $[["", 'abc', ""],].Seq.flat;

[05:31] <camelia> rakudo-moar 477830: OUTPUT¬´("", "abc", "").Seq‚ê§($["", "abc", ""],).Seq‚ê§($["", "abc", ""],).Seq‚ê§¬ª

[05:31] <gfldex> why is there a difference between .List.flat and .Array.flat?

[05:33] <AlexDaniel> gfldex: could it be associated with this? ‚ÄúArrays itemize their elements. Itemized are never flattened, even when explicitly flattening the array.‚Äù

[05:33] <AlexDaniel> gfldex: from https://rt.perl.org/Public/Bug/Display.html?id=127036

[05:34] <gfldex> looks like it

[05:36] <AlexDaniel> well, such behavior is less than obvious‚Ä¶

[05:37] <gfldex> and it's causing me troubles because I can't tell rakudos pod parser that i would prefer List over Array

[05:38] <gfldex> i don't really understand why it returns arrays in the first place. I doubt anyone wants to change the Pod:: tree.

[05:38] <gfldex> may have been made pre-GLR

[05:43] *** lustlife left
[05:46] *** Arrowhead joined
[05:46] <flussence> lazyweb request (or message for Zoffix++): perl6.org has bizarrely ginormous margins between (768..991)px, and it's making the top menu wrap to two rows, over the top of the content.

[05:47] <flussence> (also there's a small whitespace gap to the right of the top h3.panel-title; my guess is it's relying on the width of the borders the others have)

[05:47] * flussence &

[05:50] *** Arrowhead left
[05:50] *** krshn joined
[06:06] *** lnrdo joined
[06:11] *** lnrdo left
[06:24] *** uvtc joined
[06:27] *** molaf left
[06:30] *** anthk_ left
[06:31] <AlexDaniel> ShimmerFairy: this music is making your post less negative :)  ‚Ä¶ La la de da la de da la de da‚Ä¶

[06:36] *** quester joined
[06:40] *** Arrowhead joined
[06:40] *** geraud left
[06:44] *** Arrowhead left
[06:44] *** Actualeyes left
[06:45] <uvtc> Just noticed, [this page](https://design.perl6.org/) still lists S08 as "Captures and Parcels", though my understanding is that Parcels are no more.

[06:46] <AlexDaniel> uvtc: right

[06:47] <AlexDaniel> uvtc: here is where you can change it: https://github.com/perl6/specs/blob/master/html/index.html

[06:49] *** adhoc left
[06:49] <AlexDaniel> uvtc: also, it looks like it is not marked as ‚ÄúDRAFT‚Äù anymore

[06:49] <dalek> specs: 6c54ce5 | (John Gabriele)++ | html/index.html:

[06:50] <dalek> specs: fix title of S08

[06:50] <dalek> specs: review: https://github.com/perl6/specs/commit/6c54ce5133

[06:50] <uvtc> Thanks, AlexDaniel .

[06:50] *** adhoc joined
[06:54] *** virtualsue joined
[06:59] *** AlexDaniel left
[07:02] *** rafl joined
[07:02] *** CIAvash joined
[07:02] *** virtualsue left
[07:09] *** kanishka left
[07:13] *** protium left
[07:13] *** SwellJoe left
[07:15] *** ccakes joined
[07:20] *** Averna joined
[07:26] <dalek> doc: ec41c3e | (John Gabriele)++ | doc/Language/containers.pod:

[07:26] <dalek> doc: fix typo: missing comma

[07:26] <dalek> doc: review: https://github.com/perl6/doc/commit/ec41c3ec2f

[07:32] *** protium joined
[07:36] *** uvtc left
[07:38] *** kjs_ joined
[07:39] *** itcharlie left
[07:40] *** kjs_ left
[07:40] *** itcharlie joined
[07:45] * sumdumgoi figured out how to use action objects :D

[07:46] *** pierre-vigier joined
[07:46] <dalek> doc: a07a779 | skids++ | doc/Type/List.pod:

[07:46] <dalek> doc: Document sub form of "flat"

[07:46] <dalek> doc: review: https://github.com/perl6/doc/commit/a07a779528

[07:50] *** domidumont joined
[07:53] *** skids left
[07:54] *** lnrdo joined
[07:54] *** uruwi_ joined
[07:54] <nine> .tell kittenlips https://github.com/niner/Grammar-Highlighter does what you described

[07:54] <yoleaux> 29 Dec 2015 23:38Z <ShimmerFairy> nine: if you did use git merge, I don't see it. I don't see any merge commits for the curi branch in gitk, just the signs of a rebase. The only thing I can think is if you used 'git merge' and it decided on a fast-forward merge, in which case my blame should be redirected towards git :)

[07:54] <yoleaux> nine: I'll pass your message to kittenlips.

[07:55] *** uruwi left
[07:55] *** domidumont left
[07:56] *** domidumont joined
[07:58] *** lnrdo left
[08:00] *** rjbs left
[08:01] *** rjbs joined
[08:05] *** nanlandetian joined
[08:06] *** nanlandetian left
[08:12] *** darutoko joined
[08:12] <sumdumgoi> hehe... I have an adventure game command parser now :D

[08:14] *** Averna left
[08:17] *** itcharlie1 joined
[08:18] *** itcharlie left
[08:23] *** blub` joined
[08:23] *** pierre-vigier left
[08:24] *** pierre-vigier joined
[08:26] *** blub left
[08:28] <dalek> doc: e25115a | vinc17fr++ | doc/Language/faq.pod:

[08:28] <dalek> doc: Clarified item on numeric computation.

[08:28] <dalek> doc: 

[08:28] <dalek> doc: Reason: rational numbers are not floating point and most math functions yield a Num.

[08:28] <dalek> doc: review: https://github.com/perl6/doc/commit/e25115abee

[08:28] <dalek> doc: 32d1be1 | niner++ | doc/Language/faq.pod:

[08:28] <dalek> doc: Merge pull request #293 from vinc17fr/master

[08:28] <dalek> doc: 

[08:28] <dalek> doc: Clarified item on numeric computation.

[08:28] <dalek> doc: review: https://github.com/perl6/doc/commit/32d1be16f2

[08:29] *** Arrowhead joined
[08:30] *** nexysno_ joined
[08:30] *** tipdbmp left
[08:31] *** pierre-vigier left
[08:31] *** pierre-vigier joined
[08:33] *** sumdumgoi left
[08:33] *** Arrowhead left
[08:34] *** RabidGravy joined
[08:38] *** cooper_ joined
[08:38] *** cooper_ left
[08:38] *** cooper_ joined
[08:38] *** cdg left
[08:39] *** rindolf joined
[08:41] *** hankache joined
[08:41] <hankache> good morning everyone

[08:41] *** cooper left
[08:42] <RabidGravy> marnin

[08:47] <dalek> doc: 59bf06a | (Brock Wilcox)++ | bin/p6doc:

[08:47] <dalek> doc: Also allow p6doc <filename>

[08:47] <dalek> doc: review: https://github.com/perl6/doc/commit/59bf06aa77

[08:47] <dalek> doc: 515499d | RabidGravy++ | bin/p6doc:

[08:47] <dalek> doc: Merge pull request #290 from perl6/cli-file-load

[08:47] <dalek> doc: 

[08:47] <dalek> doc: Also allow p6doc <filename>

[08:47] <dalek> doc: review: https://github.com/perl6/doc/commit/515499dbb3

[08:49] *** _nadim joined
[08:50] <hankache> how can i convert an instant to a datetime?

[08:51] <hankache> now returns an instance, i want to be able to view it as datetime

[08:51] <hankache> instant**

[08:51] <hankache> m: say now

[08:51] <camelia> rakudo-moar 477830: OUTPUT¬´Instant:1451465549.137139‚ê§¬ª

[08:52] <RabidGravy> m: DateTime.new(now)

[08:52] <camelia> rakudo-moar 477830: ( no output )

[08:52] <RabidGravy> m: say DateTime.new(now)

[08:52] <camelia> rakudo-moar 477830: OUTPUT¬´2015-12-30T08:52:15.732200Z‚ê§¬ª

[08:52] <hankache> m: say now.DateTime

[08:53] <camelia> rakudo-moar 477830: OUTPUT¬´2015-12-30T08:52:59.872715Z‚ê§¬ª

[08:53] <hankache> thanks RabidGravy

[08:54] <RabidGravy> though if that's all you want to do with it then

[08:54] <RabidGravy> m: DateTime.now

[08:54] <camelia> rakudo-moar 477830: ( no output )

[08:54] <RabidGravy> m: say DateTime.now

[08:54] <camelia> rakudo-moar 477830: OUTPUT¬´2015-12-30T09:54:22.943808+01:00‚ê§¬ª

[08:54] <hankache> m: say now.DateTime

[08:54] <camelia> rakudo-moar 477830: OUTPUT¬´2015-12-30T08:54:56.001425Z‚ê§¬ª

[08:55] <hankache> m: say DateTime.now

[08:55] <camelia> rakudo-moar 477830: OUTPUT¬´2015-12-30T09:55:03.353964+01:00‚ê§¬ª

[08:55] <hankache> huh! why is there a difference ?

[08:55] <RabidGravy> instants don't have a timezone

[08:56] <hankache> so they're GMT+0 ?

[08:57] <RabidGravy> yes

[08:57] <hankache> oki

[08:57] * hankache afk for 10 min

[08:58] <[Tux]> Inline::Perl5:

[08:59] <RabidGravy> well no actually really  the DateTime becomes GMT+0 but the Instant doesn't have a timezone

[08:59] <[Tux]> The returning type of 'p5_is_array' --> int is errornous. You should not return a non NativeCall supported type (like Int inplace of int32), truncating errors can appear with different architectures

[08:59] *** pmurias joined
[08:59] <masak> good morning, #perl6

[08:59] <RabidGravy> yes it went in yesterday

[08:59] <RabidGravy> marning

[09:00] *** tipdbmp joined
[09:00] <[Tux]> test             50000    23.972    23.856

[09:00] <[Tux]> test-t           50000    13.217    13.101

[09:00] <[Tux]> csv-parser       50000    52.819    52.703

[09:00] <nine> [Tux]: that's fixed in a newer Inline::Perl5

[09:02] <pmurias> masak: hi

[09:02] <RabidGravy> [Tux] is test-t the "one to watch"?  It seems to be making steady progress downward

[09:03] <pmurias> if I want to debug what looks like it might be a moarvm gc issue are there any tricks I should now about?

[09:06] <[Tux]> RabidGravy, yes: http://tux.nl/Talks/CSV6/speed4.html

[09:06] <masak> pmurias: \o

[09:07] *** pmurias left
[09:08] <masak> nowadays, a (statement form) while loop always yields Nil, right?

[09:08] <RabidGravy> wow what happened at the beginning of November

[09:09] *** itcharlie joined
[09:09] *** itcharlie1 left
[09:09] *** pinakirs joined
[09:09] *** pinakirs left
[09:10] <RabidGravy> anyone know if it is possible to persuade gcc to ignore an "inline" declaration?

[09:11] <RabidGravy> I'm thinking not and I'm going to have to make some stubs to realise them

[09:14] <[Tux]> RabidGravy, early november was lizmat's ¬´my @foo = split @needles, $foo;¬ª

[09:14] <RabidGravy> ah cool

[09:14] *** pmurias joined
[09:15] *** firstdayonthejob joined
[09:16] *** dr4ngd joined
[09:16] <dr4ngd> Anyone need a new project to work on?

[09:16] <pmurias> re issue I'm debugging when emitting (fairly large) javascript code, sometimes parts of strings are disappearing

[09:16] *** mattp__ joined
[09:17] <masak> dr4ngd: are you offering us some work? ;)

[09:17] <dr4ngd> masak: yeah its a big project with a great revenue projection

[09:18] *** itcharlie left
[09:18] *** pRiVi left
[09:18] *** itcharlie joined
[09:19] <dr4ngd> Fluent in pretty much any language and framework is appreciated

[09:19] *** lnrdo joined
[09:23] <RabidGravy> dr4ngd, Perl 6 then?

[09:25] *** molaf joined
[09:26] <hankache> m: sleep 5; now - INIT now;

[09:26] <camelia> rakudo-moar 477830: OUTPUT¬´WARNINGS for /tmp/X4Zfx4F3bW:‚ê§Useless use of "-" in expression "now - INIT now" in sink context (line 1)‚ê§¬ª

[09:26] *** pRiVi joined
[09:26] <hankache> m: sleep 5; say now - INIT now;

[09:26] <camelia> rakudo-moar 477830: OUTPUT¬´5.0019910‚ê§¬ª

[09:26] <hankache> is it normal that it =~= 5 and not == 5 ?

[09:26] <hankache> ^^

[09:29] <masak> dr4ngd: ah, so essentially you are here to hire Perl 6 developers?

[09:29] <masak> hankache: yes, I would say so.

[09:29] <yurivish> hankache: yes, it's normal. sleep calls are never completely, precisely exact ‚Äì but that one's very close!

[09:30] <masak> hankache: if you want exactness guarantees, you should use a library of some kind.

[09:30] *** dr4ngd left
[09:31] <hankache> masak yurivish i am fine with the current level of preciseness, i just want to able to explain where the difference is coming from.

[09:31] <nine> hankache: sleep in any language or system always only guarantees that processing is stopped for at least the given time, never that it resumes exactly on time out.

[09:32] <yurivish> hankache: here's one page that talks about it. there are many more if you search around. http://tldp.org/HOWTO/IO-Port-Programming-4.html

[09:33] <yurivish> it's not perl-specific, but most languages rely on the operating system for stuff like suspending themselves

[09:33] <hankache> masak yurivish nine thank you :)

[09:37] *** yeahnoob left
[09:37] *** molaf left
[09:39] *** pierre-vigier left
[09:40] <_nadim> Good morning

[09:41] *** lnrdo left
[09:41] *** dotness joined
[09:42] *** andrewalker joined
[09:43] *** pmurias left
[09:44] <masak> hankache: I can think of two things: (a) the program is doing other stuff between the INIT time and the `sleep`; (b) `sleep` is not exact and its only criterion is that it waits *at least* the specified amount of time

[09:45] <lizmat> good *, #perl6!

[09:45] <RabidGravy> marnin

[09:45] <lizmat> does anybody know when doc.perl6.org pages are regenerated ?

[09:46] <lizmat> did an addition to the faq yesterday, and it's still not visible  :-(

[09:46] <masak> good lizmorning!

[09:47] <lizmat> a project for which I didn't have time to finish before 2015.12, was fixing up ArgFiles handling

[09:48] <lizmat> I envisioned generalizing the $*ARGFILES behaviour into a IO::CatPath and IO::CatHandle class

[09:48] <masak> what does "Cat" connote here?

[09:48] <lizmat> so that <foo bar baz>.IO.open would give you a handle that would consider the files "foo" "bar" "baz" as a single file

[09:49] <masak> is it the same kind of "Cat" as the Stringy type?

[09:49] <lizmat> masak: almost

[09:49] <lizmat> so that you could run things like split, comb, words and lines on them

[09:50] <lizmat> I basically finished that yesterday, but now wonder how to go on with this

[09:50] <masak> lizmat: sounds like the Composite design pattern

[09:50] *** lnrdo joined
[09:50] <lizmat> well, we can bikeshed the naming...  :-)

[09:50] <masak> not my intent :)

[09:50] <masak> just pointing to possibly interesting prior art

[09:51] *** krunen joined
[09:51] <lizmat>  now, my problem is really, how do I handle this at this point

[09:51] <RabidGravy> lizmat, I think there is a log somewhere of the doc builds, but I think the travis now runs the whole build process so you can see if it is currently failing for some reason

[09:51] <lizmat> if I add it to the core now and make $*ARGFILES use it, it would be adding features to what is essentially 6.c

[09:51] *** _mg_ joined
[09:51] *** _mg_ left
[09:52] *** _mg_ joined
[09:52] <lizmat> which would mean that "use v6.c" could not tell you if you can use <a b c>.IO.open in that way

[09:52] <lizmat> so we would need to move to 6.d now?

[09:53] <lizmat> one way of handling this could be to have "use v6.d" set a local $*PERL to "6.d", which could then be inspected by the IO::Cat... code

[09:53] <lizmat> and fail if it was 6.c instead of 6.d

[09:54] <ShimmerFairy> you could develop it in a separate branch for now, if there's not a clear answer to how to go about it (I'm not quite sure myself) :)

[09:54] *** lnrdo left
[09:55] <lizmat> my experiences with developing stuff in a branch are not good  :-(

[09:56] *** Arrowhead joined
[10:01] <masak> lizmat: I've recently gotten really interested in developing under feature flags rather than in branches. keeping a unified codebase in master. but we don't have anything like that set up for rakudo right now.

[10:02] <[ptc]> masak: what do you mean by feature flags?  I'm intrigued

[10:03] <masak> [ptc]: in its simplest form, `if %build-settings<feature-X-enabled> { ... }`

[10:04] <masak> [ptc]: but there's a lot of interesting patterns around that, too. like running the tests with only your own feature switched on, or with all features switched on.

[10:04] <masak> [ptc]: once something goes into production, you can just strip out all the `if` statements for that feature flag

[10:04] *** quester left
[10:05] <ShimmerFairy> At first glance, that A) seems like something you want to do with macros, ideally, and B) feels a little... hackish? I'm not sure about a P6-ish version of #ifdef's all over the place :P

[10:05] <masak> it's not #ifdefs

[10:06] <masak> it's the same code base building the same everywhere. the same thing gets generated for everyone.

[10:06] <masak> it's only the settings that differ. people on a stable release run with experimental features off. developers run with them on.

[10:07] <masak> ShimmerFairy: I think you're right that macros might make things slightly more readable. but the basic idea doesn't require macros.

[10:07] <masak> I want to emphasize that I haven't tried feature flags myself. but the Ember.js project seems to use them to great effect.

[10:08] <ShimmerFairy> masak: well, it feels like the same sort of thing codebases do with #ifdefs, at any rate. And somehow I feel the macro-less solution of if %hash<...> { ... } would look really ugly really fast.

[10:09] <RabidGravy> to lizmat's earlier suggestion, maybe a "use feature :6d" rather than just use v6.d ?

[10:09] <[ptc]> it does sound a lot like #ifdefs though...  Wouldn't that cause a lot of code churn at release time when all of the ifs are removed and the code is reformatted around that?

[10:09] <[ptc]> I'm not trying to be negative, just trying to understand how it would be used

[10:09] <masak> see https://github.com/emberjs/ember.js/blob/master/packages/ember-metal/lib/features.js

[10:09] <[ptc]> ok, ta

[10:10] <rickbike> Perl 5 has use feature

[10:10] <ShimmerFairy> It's an obvious choice for language versions though, since it'd be the same as -std in g++ . I'm just not sure about using it to bypass our version control's branches :)

[10:10] <masak> [ptc]: I don't know about churn. I imagine it wouldn't be all that bad.

[10:10] <masak> [ptc]: but I'm wondering if some things are "too cross-cutting" to neatly fit under an `if`, or even several.

[10:11] *** icelesstea joined
[10:12] <RabidGravy> or you know, just create a 6d branch and treat nom as "maint"

[10:12] <[ptc]> masak: true.  It could be hard to isolate the new changes cleanly

[10:12] * [ptc] would love to see "nom" renamed to "master"...

[10:14] <nine> lizmat: I think jnthn++ posted his suggestions for handling language versions in a gist or something a couple of weeks back. Do you know where to find it?

[10:15] <masak> nine: https://gist.github.com/jnthn/f3a691016c20f0cc4cfa

[10:15] <nine> masak: thanks!

[10:15] *** iH2O joined
[10:18] <_nadim> is there a Unicode geek here that knows why nobody thought about making a complete ASCCI superscript and subscript. There a freaking Xmas tree but not superscript lowercase q. I really wonder what they were high on.

[10:18] <lizmat> ok, from that I get I should just commit to nom and have the release manager worry about including it in a release ?

[10:19] <lizmat> that doesn't feel very sociable...

[10:19] *** pmurias joined
[10:20] *** rickbike left
[10:20] <nine> lizmat: this looks interesting: "Additions to the setting will be made in a "nested" setting. That is, a "use v6.d" will load CORE.d.setting or so. It can use augment and supercede in order to effect changes."

[10:20] <RabidGravy> jnthn's plan seems sound

[10:22] <ShimmerFairy> yes, I like jnthn++'s plan as well :)

[10:23] <[ptc]> agreed, jnthn++'s plan looks well thought out

[10:24] *** espadrine joined
[10:25] <[ptc]> lizmat: the way I read it is that whatever goes into nom gets automatically moved to master, from which releases are cut.  I guess the social aspect is the release manager asking at which point the release should be cut...

[10:25] *** andreoss joined
[10:26] <masak> ok, so "nom" means "dev"

[10:26] <lizmat> I still don't understand when people would need to do "6.d" to get a new feature such as "IO::CatPath"

[10:26] *** pierre-vigier joined
[10:27] <nine> lizmat: I guess when adding the feature to 6.c would break some test in the 6.c test suite.

[10:27] <lizmat> ah, but that's just it: it wouldn't break any tests in 6.c

[10:27] <RabidGravy> if you're building from "nom" then you're not getting what might strictly called 6.c

[10:27] <lizmat> RabidGravy: exactly

[10:27] <nine> Or maybe even "would it break one of the chosen modules in the 6.c snapshots"

[10:28] <RabidGravy> but "production" isn't going to do that right? (chortles into his imaginary beer)

[10:28] <[ptc]> but then if you're building from master you're also not strictly getting 6.c ...

[10:28] *** iH2O left
[10:28] <stmuk> In 2016, Diwali is on October 30.

[10:28] <RabidGravy> but there is a 6.c release

[10:29] <lizmat> all releases until 6.d will be 6.c

[10:29] <lizmat> but if there are new features added in nom / master, then "use 6.c" becomes ambiguous

[10:29] <[ptc]> ah, ok

[10:29] <lizmat> *v6.c

[10:30] <lizmat> as it will not tell you whether you can use <a b c>.IO

[10:31] <hankache> m: my @array = (1..500_000);my @result = @array.map({-> $x { $x + 1}});say now - INIT now;

[10:31] <ShimmerFairy> lizmat: the ambiguity might be covered in part by 6.d.PREVIEW . And as stated I feel like it wouldn't be a problem to have a g++ -std style usage of 'use v6.c', 'use v6.d', etc.

[10:31] <camelia> rakudo-moar 477830: OUTPUT¬´6.8396321‚ê§¬ª

[10:31] <hankache> m: my @array = (1..500_000);my @result = @array.race.map({-> $x { $x + 1}});say now - INIT now;

[10:31] <nine> OpenGL seems to have done quite well with extensions that get bundled into versions from time to time. Really the same as Perl 5 does nowadays.

[10:31] <camelia> rakudo-moar 477830: OUTPUT¬´(signal XCPU)¬ª

[10:32] <hankache> huh?

[10:32] <nine> hankache: I guess there's an ulimit for CPU time in camelia's VM

[10:33] <hankache> nine ok. i wanted to showcase that in this example, race takes longer than the the normal expression without it

[10:33] <hankache> am i missing something?

[10:34] <hankache> m: my @array = (1..100_000);my @result = @array.map({-> $x { $x + 1}});say now - INIT now;

[10:34] <camelia> rakudo-moar 477830: OUTPUT¬´0.75741154‚ê§¬ª

[10:34] <hankache> m: my @array = (1..100_000);my @result = @array.race.map({-> $x { $x + 1}});say now - INIT now;

[10:34] <camelia> rakudo-moar 477830: OUTPUT¬´2.06172629‚ê§¬ª

[10:34] <nine> hankache: that doesn't surprise me. You're replacing a very tight and optimizable look with lots of threading overhead

[10:34] <hankache> see ^^

[10:35] <nine> The threading overhead quickly becomes negligible once you do real calculations in your loop, but for minimalistic examples like that, all you're measuring is threading and looping overhead.

[10:36] <hankache> nine thanks dear

[10:37] <nine> :)

[10:37] *** itaipu joined
[10:37] *** pierre-vigier left
[10:39] <[Tux]> Is this because Inline::Perl5 is already installed? (in which case panda could be a bit more friendly)

[10:39] <[Tux]> https://gist.github.com/Tux/0579fce4017ff8354191

[10:40] <Arrowhead> How do I make CArrays of float more usable? I can't assign anything but an actual Num and I can't make it Cool it seems:

[10:40] <Arrowhead> m: use NativeCall; my @floats := CArray[num32].new(); @floats[0] = 1e0; @floats[1] = 1;

[10:40] <camelia> rakudo-moar 477830: OUTPUT¬´This type cannot unbox to a native number‚ê§  in method <anon> at /home/camelia/rakudo-m-inst-2/share/perl6/sources/1F2C39A739CAA5158F1049489481BA8E6077C82B line 108‚ê§  in block <unit> at /tmp/FWh6yjFBsX line 1‚ê§‚ê§¬ª

[10:40] <Arrowhead> CArray[num32(Cool)] isn't allowed.

[10:42] <Arrowhead> I guess I need to create my own wrapper type?

[10:44] <[Tux]> try ¬´$ panda ?¬ª :/

[10:44] *** Averna joined
[10:45] <nine> [Tux]: no, that's because your panda seems to be out of date

[10:46] <nine> [Tux]: since Dec 21st

[10:47] *** hankache left
[10:50] *** lnrdo joined
[10:50] <andreoss> .seen masak

[10:50] <yoleaux> I saw masak 10:26Z in #perl6: <masak> ok, so "nom" means "dev"

[10:51] * [Tux] starts from scratch ‚Ä¶

[10:51] *** rickbike joined
[10:54] *** lnrdo left
[10:54] *** lnrdo joined
[10:58] *** hankache joined
[11:00] *** HoloIRCUser3 joined
[11:01] *** HoloIRCUser3 left
[11:01] *** Floyd-ATC joined
[11:04] *** _mg_ left
[11:04] <RabidGravy> Arrowhead, see a bunch of my Audio::* modules for examples of dealing with typed CArrays, but mostly it's just coerce the value

[11:05] <Arrowhead> RabidGravy: I'll take a look. I'm even having a hard time taking any list of numbers and transforming them to Nums.

[11:06] <RabidGravy> I tend to do something like:

[11:06] *** Begi joined
[11:07] <[Tux]> http://johan.vromans.org/articles/Perl/20151229.html :(

[11:07] <[Tux]> so hard to convince even perl(5) hard-liners that perl6 *is* real

[11:07] *** virtualsue joined
[11:08] <RabidGravy> m: use NativeCall;  my CArray[num32] $foo = CArray[num32].new;  my @a = (^10);   $foo[$_] = Num(@a[$_]) for ^@a.elems;  say $foo'

[11:08] <camelia> rakudo-moar 477830: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/BMFNnVWCYZ‚ê§Two terms in a row‚ê§at /tmp/BMFNnVWCYZ:1‚ê§------> 3] = Num(@a[$_]) for ^@a.elems;  say $foo7‚èè5'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        s‚Ä¶¬ª

[11:08] <RabidGravy> m: use NativeCall;  my CArray[num32] $foo = CArray[num32].new;  my @a = (^10);   $foo[$_] = Num(@a[$_]) for ^@a.elems;  say $foo

[11:08] <camelia> rakudo-moar 477830: OUTPUT¬´NativeCall::Types::CArray[num32].new‚ê§¬ª

[11:08] <Floyd-ATC> Can someone show me a working example of a DateTime formatter?

[11:09] *** V_S_C joined
[11:10] <llfourn> [Tux]: I personally don't think it's a good idea to even try. TBH I still use perl5 and there isn't much overlap between the projects that would be good to do in p5 vs something I would start in p6.

[11:10] <RabidGravy> Arrowhead, important to remember that because a CArray is not much of a Perl array you can only index it like that

[11:10] *** Begi2 joined
[11:11] <lizmat> m: DateTime.now(:formatter( { .hour ~ ":" ~ .minute } ).say

[11:11] <camelia> rakudo-moar 477830: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/tc8ID2YBUd‚ê§Unable to parse expression in argument list; couldn't find final ')' ‚ê§at /tmp/tc8ID2YBUd:1‚ê§------> 3rmatter( { .hour ~ ":" ~ .minute } ).say7‚èè5<EOL>‚ê§¬ª

[11:11] <lizmat> m: DateTime.now(:formatter( { .hour ~ ":" ~ .minute }) ).say

[11:11] <camelia> rakudo-moar 477830: OUTPUT¬´12:11‚ê§¬ª

[11:11] <RabidGravy> Arrowhead, also see NativeHelpers::Array which encapsulates a few of those kinds of hacks

[11:11] <lizmat> m: DateTime.now(:formatter( { .hour ~ ":" ~ .minute }) ).say   # Floyd-ATC 

[11:11] <camelia> rakudo-moar 477830: OUTPUT¬´12:11‚ê§¬ª

[11:11] <[Tux]> Fresh timings, started from scratch ‚Ä¶

[11:11] <[Tux]> csv-ip5xs        50000    18.059    17.948

[11:11] <[Tux]> test             50000    23.999    23.888

[11:11] <[Tux]> test-t           50000    12.564    12.453

[11:11] <[Tux]> csv-parser       50000    50.459    50.348

[11:12] <Arrowhead> RabidGravy: ooh, NativeHelpers. that sounds intersting.

[11:12] <RabidGravy> I got bored of typing that stuff ;-)

[11:12] <[Tux]> llfourn, Johan is not someone to convert from perl5 to perl5. Being the author of the perl5 QRG he knows what we are talking about

[11:13] <[Tux]> he is just very disappointed in the perl6 "release" not being released as the promised 6.0.0

[11:13] <Floyd-ATC> Thanks lizmat... an example like that really needs to be in the documentation because I've spent the last 30 minutes trying to wrap my brain around it in vain

[11:13] *** Begi left
[11:14] <llfourn> [Tux]: by that he meant version numbers or functionality?

[11:14] <RabidGravy> I think there needs to be at least two new pages in the language docs, one on lists and arrays, and one on dates and times

[11:14] <[Tux]> version number, marketing and announcement policy

[11:14] <llfourn> [Tux]: ah I see

[11:15] <V_S_C> Using ActiveState PERL I got rakudobrew to get MoaR & panda, then during Task::Star installation Linenoise failed with linker error

[11:15] <RabidGravy> :-\

[11:15] *** vendethiel joined
[11:16] <Floyd-ATC> One other thing that confuses the hell out of me, why does my script fail to compile if I try to "use" a module that happens to be in core?

[11:16] <RabidGravy> because they aren't modules

[11:16] <RabidGravy> in the sense they are loadable

[11:16] <RabidGravy> or rather aren't loadable

[11:17] <[Tux]> afk

[11:17] <RabidGravy> they're just types which are compiled into the setting

[11:17] <_nadim> Can someone help with this? I'd like to capture the kv of the pair. un this code http://nopaste.linux-dev.org/?912351, I get a pair in $A and one in $s; if I put them in parenthesis then I get "too few positional ... exp 2 got 1"

[11:17] <V_S_C> I made github pull request removing the extra space that seems to be originating from makefile.in

[11:17] <Floyd-ATC> So.. DateTime is not a module but DateTime::Format is... seems a bit arbitrary

[11:17] *** Skarsnik joined
[11:18] <RabidGravy> Floyd-ATC, not really

[11:18] <llfourn> Floyd-ATC: gotta draw the line somewhere

[11:18] <V_S_C> with that I guess rakudo star Christmas release works on Windows

[11:18] <RabidGravy> yay!

[11:19] <_nadim> Argg, capture expects named argument when it sees a pair!

[11:20] <Floyd-ATC> Same with IO::Socket::INET -> looks like a module and has been one for years but nope, crash and burn

[11:20] *** V_S_C left
[11:21] <RabidGravy> er, it's always been a core type in Perl 6 afaik

[11:21] <Floyd-ATC> in p6 probably, yes

[11:21] <RabidGravy> well

[11:21] <Floyd-ATC> but coming from p5 that's confusing as hell

[11:22] <nine> [Tux]: no one has ever promised a "6.0.0". Some people seem to have assumed, that the release would be called so.

[11:22] <lizmat> maybe we just make a bare use for a module in core die with a specific message

[11:22] <lizmat> m: use Int

[11:22] <camelia> rakudo-moar 477830: OUTPUT¬´===SORRY!===‚ê§Could not find Int in:‚ê§    /home/camelia/.perl6/2015.12-44-g477830a‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6‚ê§    CompUnit:‚Ä¶¬ª

[11:23] <ShimmerFairy> I don't think there are any 'module's in CORE, though :P

[11:23] <RabidGravy> a pretty good rule of thumb here is that if it's in "Types" on docs.perl6.org then it's not a module

[11:23] <RabidGravy> ShimmerFairy, with the exception of NativeCall and Test there aren't

[11:23] <ShimmerFairy> RabidGravy: that's not part of CORE, though :)

[11:23] <RabidGravy> right

[11:24] <RabidGravy> so there aren't

[11:25] <[Tux]> nine, /me doesn't need to be convinced :)

[11:25] <RabidGravy> The confusion seems to be that there are types defined in the core setting that have a similar name to Perl 5 modules

[11:25] <[Tux]> but this shows (many) others in the world do (somehow)

[11:25] *** cpage joined
[11:25] <nine> lizmat: how could we get at a list of Settings classes?

[11:25] <Floyd-ATC> Well, that and the fact that they have the same purpose and many of the same methods

[11:26] <Floyd-ATC> although that particular mo^H^Htype lacks several important methods like peer address etc.

[11:27] <RabidGravy> Floyd-ATC, I'm sure your patches ti implement them will gratefully received

[11:27] <ShimmerFairy> I personally don't see that it's worth the effort to say "no, we don't have a module named that in Perl 6, this really isn't Perl 5".

[11:27] *** _mg_ joined
[11:27] <RabidGravy> me too

[11:27] <Floyd-ATC> Yeah I'm sure you're eager to pull my patches, I can't even understand the current docs :-P

[11:28] <RabidGravy> documentation improvements are also welcomed :)

[11:28] *** blub` is now known as blub

[11:29] <Floyd-ATC> yup. Step 0 is to understand wtf is going on though

[11:31] <lizmat> nine: there lives one in roast, in WHICH.t

[11:31] <RabidGravy> on a completely other note, why is that, given all the dependencies being successfully installed, tests on travis fail with "Could not find Foo" where they don't locally

[11:33] * RabidGravy removes any last vestige of "use lib" from the test files and tries again

[11:34] <nine> nine@sunshine:~/install/rakudo (nom *=)> perl6 -e 'use Int'

[11:34] <nine> ===SORRY!===

[11:34] <nine> Int is a builtin type. You can use it without loading a module

[11:34] <nine> Could not find Int in:

[11:34] *** SwellJoe joined
[11:34] <RabidGravy> nine++

[11:35] <Floyd-ATC> As an exercise in figuring stuff out I tried to implement a simple HTTP server but I have trouble switching between .read() and .get(), presumably for reasons that have to do with buffering. No idea how to work around it except discard .get() completely and scanning lines manually in my own buffer. Am I on the completely wrong track?

[11:36] <nine> As this is a patch to X::CompUnit::UnsatisfiedDependency, it still allows for modules to have the same name as builtin types.

[11:36] *** jeteve joined
[11:36] <jeteve> Hi, and Happy C!

[11:37] <jeteve> Got a noob question

[11:37] <RabidGravy> Floyd-ATC, you'll find that most HTTP server like things use .read exclusively and decode bits as required

[11:37] <Floyd-ATC> Right.

[11:38] *** pierre-vigier joined
[11:39] <RabidGravy> (and indeed clients for the most part,)  the major reason being is that the encoding may be different between the headers and the body of a request

[11:39] <lizmat> nine: I would drop the "could not find Int in" bit

[11:39] <lizmat> nine: in that case

[11:40] *** sammers left
[11:40] *** nige1 joined
[11:40] <RabidGravy> jeteve, we're all noobs here, I'm actually a goat farmer in real life

[11:40] <nine> lizmat: but if the user really tried to load a module named Int.pm, the "Could not find" part would be the more important one.

[11:40] <RabidGravy> lizmat, nine, except if they were actually expecting to really load Int from a module

[11:41] <RabidGravy> what nine said

[11:41] <lizmat> nine: well, having a bare module load (without auth / version) with the same name as a built in class, would be a bad idea anyway, no ?

[11:41] <jeteve> Nice, I like goats

[11:41] <lizmat> I mean, only cut off if there is no auth / version specified

[11:43] *** pierre-vigier left
[11:43] <jeteve> Here's my question then: In perl5 w/Moose, I'm quite a heavy user of lazy building attributes. And I'm wundering what's the similar approach in Perl6

[11:43] * llfourn would like to know this too

[11:43] <jeteve> I've tried 'has $.bla = ->{ do and return stuff }();'

[11:44] <jeteve> but that seems to be evaluated ASAP

[11:45] <llfourn> jeteve: I don't know but I seem to remember that it "should be in a module" as some conclusion

[11:45] <nine> lizmat: it would. Yet I'm still nervous about removing module loading related features :/ The past few weeks have tought me that.

[11:45] <llfourn> jeteve: the metamodel is quite flexible so the idea is that someone is going to implement lazy attrs in a module

[11:45] <lizmat> I'm just worried that the extra text you added will be drowned out visually by the list of dirs in which it was not found

[11:46] <lizmat> nine ^^

[11:46] <jeteve> llfourn: cool

[11:46] <llfourn> jeteve: 

[11:46] <llfourn> yes :P

[11:46] <jeteve> I shall go and read more to see if I can write such a thing :)

[11:47] <llfourn> jeteve: yeah you wanna look at "traits" and EXPORTHOW (which is not in docs yet)

[11:48] <dalek> doc: f5c5ce3 | lizmat++ | doc/Type/DateTime.pod:

[11:48] <dalek> doc: Add example of formatter, Floyd-ATC++

[11:48] <dalek> doc: review: https://github.com/perl6/doc/commit/f5c5ce36af

[11:48] <jeteve> nice, thanks a lot for the pointers :)

[11:48] <llfourn> jeteve: there could be two approaches one where they only work if you use $.attr rather than $!attr (you mess with ClassHOW)

[11:48] <llfourn> jeteve: the other you mess with Attribute itself, in particular Attribute.get_value

[11:49] <jeteve> #2 would probably be cleaner

[11:50] <llfourn> jeteve: http://docs.perl6.org/type/Attribute#method_get_value (you will have to override it with a trait, is trait is rw below that for example)

[11:50] <jeteve> cause it keeps the lazyness orthogonal to the other concepts

[11:51] <_nadim> DrForr: Readline broken with the latest Rakudo

[11:51] <llfourn> jeteve: yes I agree try creating a trait "is lazy" and see what you can do is my advice

[11:51] <_nadim> .tell DrForr Readline broken with the latest Rakudo

[11:51] <yoleaux> _nadim: I'll pass your message to DrForr.

[11:51] <jeteve> excellent :)

[11:51] <jeteve> Thanks!

[11:51] <llfourn> no worries let us know how you go :D

[11:52] *** Psyche^_ joined
[11:53] <dalek> doc: b253dbf | lizmat++ | doc/Type/DateTime.pod:

[11:53] <dalek> doc: Better example using sprintf

[11:53] <dalek> doc: review: https://github.com/perl6/doc/commit/b253dbf426

[11:54] <dalek> rakudo/nom: 9cecde8 | (Stefan Seifert)++ | src/core/Exception.pm:

[11:54] <dalek> rakudo/nom: De-confuse people trying to load a module for a CORE type

[11:54] <dalek> rakudo/nom: 

[11:54] <dalek> rakudo/nom: Tell people who try to load a module when a similarly named internal

[11:54] <dalek> rakudo/nom: type is available. E.g. give a helpful message when someone tries to:

[11:54] <dalek> rakudo/nom: use IO::Socket::INET;

[11:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9cecde8517

[11:55] <nine> lizmat: you convinced me ^^^

[11:55] <RabidGravy> nine++

[11:56] *** Psyche^ left
[11:56] <Arrowhead> Why can I "perl6 -Ilib foo.pl" but do I have to do PERL6LIB="lib" perl6 for a repl with lib available?

[11:57] <stmuk_> I just ran "make html" in the doc repo successdully on my own system with 2015-12

[11:57] <stmuk_> http://doc.perl6.org/build-log/build-2015-12-30T11:55+0000.log

[11:58] <stmuk_> that suggests to me that hack is running an old rakudo for the doc processes

[11:58] *** rickbike left
[11:58] <hankache> normally race would be faster than hyper?

[11:59] <hankache> since it doesn't preserve the order so less overhead?

[11:59] <stmuk_> maybe the "dog food" processes should use 2015-12 

[12:00] <stmuk_> m: use experimental :pack;

[12:00] <camelia> rakudo-moar 477830: ( no output )

[12:01] <RabidGravy> I thought the "cannot unbox type object" in panda installdeps was fix0rificated

[12:01] <RabidGravy> or did I dream that?

[12:02] <lizmat> hankache: only if there is something to race with, otherwise you're just creating overhead

[12:02] <lizmat> try adding a 'sleep rand' in your code to be raced, and see the result then

[12:03] <lizmat> CPU will be more, wallclock should be less

[12:04] * RabidGravy wonders if flattening the dependencies of the dependencies will help

[12:04] *** lustlife joined
[12:04] *** itcharlie left
[12:05] *** itcharlie joined
[12:07] <Arrowhead> RabidGravy: nativesizeof doesn't work on CArray it seems. How do I match on the type of the CArray so I can implement it myself?

[12:08] <hankache> thanks lizmat

[12:09] *** joydo left
[12:10] *** zengargoylew left
[12:10] *** zengargoylew joined
[12:10] <RabidGravy> Arrowhead, it does work, what do you mean?

[12:10] <RabidGravy> m: use NativeCall;  say nativesizeof(CArray)

[12:10] <camelia> rakudo-moar 477830: OUTPUT¬´8‚ê§¬ª

[12:10] *** TEttinger left
[12:11] <RabidGravy> which is right as it is a 64bit pointer

[12:12] <RabidGravy> you can't know the number of elements in the CArray in the same way as you can't in C, it just doesn't have that information

[12:12] *** ccakes left
[12:12] <Arrowhead> ouch.

[12:13] <RabidGravy> almost any C API will require the array and the number of elements, unless they special case some value like say strings do

[12:14] <Arrowhead> yes, I'm using an api like that. And I'd hoped I could compute the numbers from the data structures I have...

[12:14] <Arrowhead> but it looks like the structure of my perl6 program will look more and more like C.

[12:14] <RabidGravy> you probably need to abstract it a layer up

[12:16] <RabidGravy> well look at e.g. Audio::Libshout and Audio::Encode::LameMP3 - they pass around either Perl arrays or [CArray, Int] arrays with the details (mostly multis in there)

[12:16] <Arrowhead> thanks. I'll now definitely take a look :-)

[12:17] *** hankache left
[12:17] <RabidGravy> for performance reasons I made the "native values" available to give to things that know about them, but for programmer reasons I also make normal arrays available

[12:18] <RabidGravy> I adjusted all those modules so that they would interoperate on both levels if required

[12:21] <RabidGravy> it seems like a pain in the bum but you'll develop your own internal pattern book for dealing with these things quite quickly

[12:22] <Skarsnik> Hello

[12:22] *** zakharyas joined
[12:22] <RabidGravy> rarr

[12:22] <Skarsnik> how many of your modules did I broke today? x)

[12:23] <RabidGravy> I haven't looked (because I haven't updated rakudo) but I'm fairly cool with the int thing I think

[12:23] *** xpen left
[12:24] <Skarsnik> grr, I am again stuck with unfinalized type ><

[12:24] *** jeteve left
[12:25] <RabidGravy> I'm getting nervous, we haven't had loads of questions about installing rakudo in cruel and unusual ways this morning

[12:25] <Skarsnik> How do I pass by ref?

[12:26] <RabidGravy> "is raw" ?

[12:26] <stmuk_> it's quiet .. too quiet

[12:26] <RabidGravy> (not completely understanding the context of the question)

[12:27] <RabidGravy> "It's newbies, sir, thousands of them"

[12:27] <Skarsnik> m: sub foo($a) {}; foo(Mu);

[12:27] <camelia> rakudo-moar 9cecde: OUTPUT¬´Type check failed in binding $a; expected Any but got Mu‚ê§  in sub foo at /tmp/U17ErXlHiS line 1‚ê§  in block <unit> at /tmp/U17ErXlHiS line 1‚ê§‚ê§¬ª

[12:27] <RabidGravy> it must be the end times that wasn't on the TV recently

[12:27] <Skarsnik> I have this kind of error x)

[12:28] <[ptc]> stmuk_: the version on hack being used for the docs is: This is Rakudo version 2015.11-722-g1088291 built on MoarVM version 2015.11-113-gbd56e2e implementing Perl 6.b.

[12:28] <Skarsnik> with thing that are not Mu

[12:28] <Skarsnik> but I still want to do stuff with $a x)

[12:28] *** ccakes joined
[12:28] <[ptc]> stmuk_: I forget how moritz updates everything, but I think you're right: it needs an update

[12:29] <pmurias> what should I write in the "Grant Deliverables ownership/copyright and License Information" section?

[12:29] *** kid51 joined
[12:29] <pmurias> (of the JavaScript backend Hague grant)

[12:29] <pmurias> the work itself will be under Artistic 2.0 (as rest of nqp/rakudo is)

[12:29] <[ptc]> stmuk_: btw: you added `*.un~` to the list of files to be ignored in the perl6-examples repo.  What kind of file are they?

[12:29] <[ptc]> stmuk_: just curious :-)

[12:30] *** hankache joined
[12:31] <RabidGravy> pmurias, can you refer to previous applications?

[12:32] *** ccakes left
[12:33] *** xpen joined
[12:34] *** xpen left
[12:34] *** Arrowhead left
[12:35] *** SwellJoe left
[12:36] <nine> RabidGravy: could be that installdeps needs the same fix as install

[12:37] <RabidGravy> could be

[12:37] <RabidGravy> let me have a look-see

[12:38] <pmurias> RabidGravy: they seems to be a mix of "I signed the CLA already/the TPF may of have the copyright but I don't know how it works legally/I will hand over the copyright"

[12:38] <RabidGravy> :-\

[12:40] *** pierre-vigier joined
[12:40] *** itcharlie left
[12:42] *** itcharlie joined
[12:43] *** AlexDaniel joined
[12:44] *** pierre-vigier left
[12:44] <Skarsnik> I can't find doc about different subroutine call x)

[12:46] *** lustlife` joined
[12:47] <RabidGravy> nine, was that the change to :$force?

[12:47] <RabidGravy> if so yeah probably

[12:48] <nine> yes

[12:49] *** lustlife left
[12:50] <Skarsnik> m: my Mu $a; say $a.is(Mu);

[12:50] <camelia> rakudo-moar 9cecde: OUTPUT¬´Method 'is' not found for invocant of class 'Mu'‚ê§  in block <unit> at /tmp/1lHhkWsEbB line 1‚ê§‚ê§¬ª

[12:50] *** kid51 left
[12:50] <Skarsnik> m: my Mu $a; say $a == Mu ;

[12:50] <camelia> rakudo-moar 9cecde: OUTPUT¬´Cannot call infix:<==>(Mu, Mu); none of these signatures match:‚ê§    ($?)‚ê§    (\a, \b)‚ê§    (Real \a, Real \b)‚ê§    (Int:D \a, Int:D \b)‚ê§    (int $a, int $b)‚ê§    (Num:D \a, Num:D \b --> Bool)‚ê§    (num $a, num $b --> Bool)‚ê§    (Rational:D \a, R‚Ä¶¬ª

[12:50] <nine> m: my Mu $a; say $a.isa(Mu);

[12:50] <camelia> rakudo-moar 9cecde: OUTPUT¬´True‚ê§¬ª

[12:50] <Skarsnik> m: my Mu $a; say $a === Mu;

[12:50] <camelia> rakudo-moar 9cecde: OUTPUT¬´Cannot call infix:<===>(Mu, Mu); none of these signatures match:‚ê§    ($?)‚ê§    ($a, $b)‚ê§    (Int:D \a, Int:D \b)‚ê§    (int $a, int $b)‚ê§    (Num:D \a, Num:D \b)‚ê§    (Num $ where { ... }, Num $ where { ... })‚ê§    (num $a, num $b --> Bool)‚ê§    (‚Ä¶¬ª

[12:50] <nine> m: my Mu $a; say $a ~~ Mu;

[12:50] <camelia> rakudo-moar 9cecde: OUTPUT¬´True‚ê§¬ª

[12:51] <Skarsnik> ~~ is not type equality x)

[12:51] *** SwellJoe joined
[12:52] <RabidGravy> nine, infact installdeps didn't have a force at all, that is remedied into the bargain :)

[12:53] <pmurias> .seen jnthn

[12:53] <yoleaux> I saw jnthn 25 Dec 2015 23:52Z in #perl6: <jnthn> Thanks! Really going, before I fall asleep on the keyboard :-)

[12:53] <RabidGravy> a well deserved break I guess :)

[12:58] <Skarsnik> I hope it's my last PR for NC sanity check

[12:59] <Skarsnik> well before I decide to have them for CStruct x)

[12:59] <dalek> rakudo/nom: d08e043 | lizmat++ | src/core/Argfiles.pm:

[12:59] <dalek> rakudo/nom: Make @*ARGS / *$ARGFILES initialization lazy

[12:59] <dalek> rakudo/nom: 

[12:59] <dalek> rakudo/nom: Should shave off a bit from bare startup time

[12:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d08e043f4a

[13:00] <lizmat> Skarsnik: it appears to have conflicts ?

[13:00] <Skarsnik> I am not sure why

[13:00] <Skarsnik> Probably a space issue

[13:01] *** Floyd-ATC left
[13:01] *** _mg_ left
[13:01] <RabidGravy> bastard space, it's just so big

[13:03] <kaare_> Space; The Last Frontier

[13:03] *** cygx joined
[13:03] <cygx> o/

[13:03] *** Arrowhead joined
[13:03] <cygx> Skarsnik: shouldn't all reprs from https://github.com/rakudo/rakudo/blob/nom/lib/NativeCall.pm6#L122 be whitelisted?

[13:04] <kaare_> hm, I'd like to know what replaces the select function in Perl6 ?

[13:05] <kaare_> ie, select(2)

[13:05] <dalek> infrastructure-doc: da78c59 | paultcochrane++ | hosts/hack.p6c.org.pod:

[13:05] <dalek> infrastructure-doc: Add notes about how to update rakudobrew on hack

[13:05] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/da78c59f91

[13:05] <Skarsnik> cygx, I should probably do it, yes x)

[13:07] <Skarsnik> execpt for CArray x)

[13:08] *** Arrowhead left
[13:09] <Skarsnik> I probably want to check the inside of a Pointer too maybe

[13:10] <Skarsnik> like to die on sub foo(Pointer[Int]

[13:10] *** brrt joined
[13:13] <andreoss> .tell masak consider my PR

[13:13] <yoleaux> andreoss: I'll pass your message to masak.

[13:14] *** rburkholder joined
[13:14] <RabidGravy> https://github.com/tadzik/panda/pull/276 - if anyone can and has a minute

[13:14] <[ptc]> nine: I'm getting weird errors when installing Inline::Python on hack

[13:14] <[ptc]> nine: In 'py_eval' routine declaration - Not an accepted NativeCall type for parameter [2]  : Int   -->For Numerical type, use the appropriate int32/int64/num64...

[13:15] <[ptc]> nine: any idea what could be causing that?

[13:15] <[ptc]> nine: on my local machine everything builds fine...

[13:15] <cygx> [ptc]: Skarsnik happened :p

[13:16] <[ptc]> cygx: ah.  Should I use specifically the 2015.12 version of Rakudo then?

[13:16] <RabidGravy> Skarsnik is having a rampage around the NC stuff

[13:16] <Skarsnik> nop I:python should be fixed

[13:16] <cygx> no, Inline::Python should be fixed to no longer use Int in native sub declarations

[13:17] <[ptc]> maybe panda doesn't know yet...

[13:17] <[ptc]> no, that's a silly comment.  Installing via panda on my box works, on hack it doesn't.  Odd.

[13:17] <[ptc]> I'll look into it further.  thanks for the help!

[13:18] <RabidGravy> or to get it moving, fix I::Python and in the meantime install the fixed version?

[13:19] <cygx> [ptc]: you need to check that https://github.com/niner/Inline-Python/blob/master/lib/Inline/Python.pm6#L51 and https://github.com/niner/Inline-Python/blob/master/pyhelper.c declarations match and only use valid NativeCall types

[13:20] <RabidGravy> it's almost certainly %s/int/int32/g

[13:20] <cygx> RabidGravy: no, there are some Int involved

[13:20] <RabidGravy> :-O

[13:21] <dalek> Inline-Python: 5c52d88 | (Stefan Seifert)++ | lib/Inline/Python.pm6:

[13:21] <dalek> Inline-Python: Fix type mismatches between Perl 6 and C code

[13:21] <dalek> Inline-Python: 

[13:21] <dalek> Inline-Python: Use Perl 6 int32 for C int consistently.

[13:21] <dalek> Inline-Python: Skarsnik++ for adding the check to NativeCall.

[13:21] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/5c52d883a1

[13:21] <cygx> well, it used to be just an alias for longlong

[13:21] <dalek> perl6.org: cbb9efa | (Zoffix Znet)++ | source/style. (2 files):

[13:21] <dalek> perl6.org: Fix main nav spillover

[13:21] <dalek> perl6.org: 

[13:21] <dalek> perl6.org: Due to recently added additional nav items, the main nav spills on two lines on browser widths 768px‚Äì991px

[13:21] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/cbb9efa092

[13:21] <nine> [ptc]: please upgrade to get the fix

[13:21] <[ptc]> nine: thanks.  Just upgrading now :-)

[13:23] <Skarsnik> I feel like I was the only one getting weird stuff on x86_32 because of Int xD

[13:23] <Juerd> Is it possible, either directly or indirectly, to have a CUnion of a Blob and, say, a uint32?

[13:23] <Skarsnik> hm why there is still a conflit 

[13:24] <dalek> perl6.org: 22f4017 | (Zoffix Znet)++ | README.md:

[13:24] <dalek> perl6.org: Clarify how and where to run sass command

[13:24] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/22f4017c98

[13:24] <nine> Skarsnik: who is still on x86_32?

[13:24] <Skarsnik> Juerd, no idea 

[13:24] <Skarsnik> my vm I use to work on/with perl6 x)

[13:24] <Juerd> It would be an easier implementation of unpacking to fill the blob in the Cunion and then just read the uint32 back.

[13:25] <Skarsnik> nine can you look at my last PR?

[13:26] <RabidGravy> anyone with commit on panda https://github.com/tadzik/panda/pull/276 ?  It would stop my tests failing on travis and I can get back to what I was doing

[13:26] <RabidGravy> :)

[13:26] *** Actualeyes joined
[13:26] <RabidGravy> lizmat++

[13:26] <lizmat> yw  :-)

[13:28] <nine> RabidGravy: actually...if you need --force for installdeps, it tells me that the authors of your dependencies should adopt proper versioning

[13:28] <dalek> specs: 325f7b2 | (Lucien Grondin)++ | S99-glossary.pod:

[13:28] <dalek> specs: fix syntax in the advent calendar entry

[13:28] <dalek> specs: review: https://github.com/perl6/specs/commit/325f7b2762

[13:28] <RabidGravy> this is true

[13:28] <[ptc]> the rakudobrew-ed perl6 on hack is now at 2015.12; the docs should build again now

[13:29] <RabidGravy> [ptc]++

[13:29] *** ccakes joined
[13:29] <nine> Skarsnik: please rebase #663 on current nom and extend your commit message by telling _what_ needed fixing and most importantly: _why_. Otherwise it's very hard to tell whether the fix is correct.

[13:30] <dalek> infrastructure-doc: 279e1d8 | paultcochrane++ | hosts/hack.p6c.org.pod:

[13:30] <dalek> infrastructure-doc: Simplify rakudobrew update docs on hack

[13:30] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/279e1d821f

[13:30] <RabidGravy> nine, in the particular case that always craps out, I can only complain a little as I am the author of most of the dependencies ;-)

[13:31] <nine> RabidGravy: so you're in the position to actually fix it :)

[13:32] <RabidGravy> they don't need force, it's just a side effect of passing a defined Bool (false) to the resolve()

[13:33] <Skarsnik> how I solve conflcit with git?

[13:33] <RabidGravy> in that in the installdeps case it wasn't passing :$force at all, so I could either do force => False in the call to resolve or add :$force = False to the args, I chose the latter

[13:33] *** ccakes left
[13:34] <nine> Skarsnik: git mergetool

[13:36] <tadzik> lizmat++

[13:36] <tadzik> (panda maintainers)++

[13:36] <brrt> hi #perl6

[13:36] <tadzik> hi brrt 

[13:37] <RabidGravy> tadzik++

[13:37] <brrt> hi tadzik :-)

[13:37] <RabidGravy> everyone++

[13:37] <brrt> any jit bugs reported, aside from the building bugs that i know about

[13:37] *** FritzZaucker joined
[13:37] *** Averna left
[13:37] *** lustlife` left
[13:38] <cygx> tadzik: the problem we talked about some time ago (not stringifying $pandadir before passing it to mkpath) did cause actual problems

[13:38] <RabidGravy> brrt, yeah it doesn't jit on ARM ;-)

[13:38] <cygx> tadzik: I've submitted a new pull request that works for mojca

[13:38] <brrt> :-P

[13:38] <tadzik> cygx: oh

[13:38] <tadzik> oh, so .mkdir is now recursive and all?

[13:38] <brrt> it will a bit more easily once i've merged even-moar-jit

[13:39] <tadzik> that's kewl

[13:39] <Skarsnik> let's hope that solve the conflict x)

[13:39] <RabidGravy> groovy

[13:39] <cygx> tadzik: I've also removed the chedk for existence before trying to mkpath, as supposedly that also caused a problem

[13:39] <RabidGravy> next stop was going to be getting Ban Ki Moon in on the job

[13:39] <cygx> I'm a bit doubtful about that, but I'm coding blind here ;)

[13:40] <tadzik> cygx: it seems fitting

[13:40] <lizmat> on .mkdir being recursive, probably need .rmdir to be then as well, to more easily cleanup oopses

[13:40] <lizmat> cycling&

[13:40] <Skarsnik> damn, no way to force a PR? (it's not for rakudo)

[13:40] <RabidGravy> isn't there an rmtree somewhere anyway?

[13:42] *** HoloIRCUser3 joined
[13:43] *** Zero_Dogg joined
[13:43] *** ChristopherBotto joined
[13:44] *** HoloIRCUser3 left
[13:44] <Skarsnik> .seen azawawi

[13:44] <yoleaux> I saw azawawi 28 Dec 2015 08:47Z in #perl6: <azawawi> Merry Christmas to #perl6 :)

[13:45] <Zero_Dogg> Is IO::Path suppose to be a core module? My perl6 install (using rakudobrew to install moar+panda) doesn't have it, and "panda install IO::Path" says it can't find it

[13:45] <Skarsnik> It's core

[13:45] <nine> It's core, it's no module.

[13:45] <Skarsnik> m: my IO::Path $a;

[13:45] <camelia> rakudo-moar d08e04: ( no output )

[13:45] <cygx> tadzik: jus fyi, I just checked: on moarvm, mkdir has been recursive since before the switch to libuv (it used to be implemented via apr_dir_make_recursive)

[13:46] <nine> nine@sunshine:~> perl6 -e 'use IO::Path'

[13:46] <nine> ===SORRY!===

[13:46] <nine> IO::Path is a builtin type. You can use it without loading a module.

[13:46] <cygx> git++ # you can look stuff up!

[13:47] <Zero_Dogg> oh, so core classes don't need to be loaded in 6 then. Thanks! I'm a long time v5 user, learning v6 now

[13:47] <Skarsnik> damn any idea how I can force to get some change from a fork than can't be merged?

[13:47] <ChristopherBotto> Thanks for all of your work #perl6!

[13:47] <yoleaux> 15 Dec 2015 00:19Z <geekosaur> ChristopherBotto: it's write access on /tmp that controls whether unlink of /tmp/foo works. permissions on /tmp/foo's inode are not relevant.

[13:47] *** Arrowhead joined
[13:47] <yoleaux> 15 Dec 2015 00:24Z <geekosaur> ChristopherBotto: GNU rm looks at the permission as a courtesy, more or less. Hard links imply that the directory entry is independent of the inode (file). I am not sure perl6 should be in the business of enforcing anything more than OS permissions.

[13:48] <nine> Skarsnik: what do you mean?

[13:48] <cygx> Zero_Dogg: most core classes are part of the setting and semantically part of an outer lexical scope surrounding your program

[13:48] <cygx> so you get lexical acces to the identifiers without use

[13:48] <RabidGravy> Zero_Dogg, an easy rule of thumb is that if it's on http://doc.perl6.org/type.html it's almost certainly compiled in the setting

[13:48] <[ptc]> m: require File::Temp

[13:48] <camelia> rakudo-moar d08e04: OUTPUT¬´Could not find File::Temp in:‚ê§    /home/camelia/.perl6/2015.12-46-gd08e043‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6‚ê§    CompUnit::Reposit‚Ä¶¬ª

[13:48] <Skarsnik> I want to get azawawi work on Pg Array on DBIish, merge them in my fork and make them work with the current DBIish before merging them in DBIis

[13:49] <Skarsnik> But I can't PR, since it conflict x)

[13:49] <Zero_Dogg> cygx: aha, thanks, that's nice. My perl6 just errored out on a missing module when I tried to use it which is what confused me

[13:50] *** Su-Shee_ is now known as Su-Shee

[13:50] *** ccakes joined
[13:50] <Skarsnik> it's weird File::Temp is not core x)

[13:50] <Skarsnik> but probably too Os dependant

[13:50] <[ptc]> Skarsnik: was just trying to test something...

[13:50] <FritzZaucker> The following NCurses example is working: https://gist.github.com/zaucker/aa14025a16edcd671e25  whereas a similar one using a interval supply doesn't properly display the text: https://gist.github.com/zaucker/aa14025a16edcd671e25 ... am I doing something wrong (running 6.c on Unbuntu 14.04) 

[13:50] <nine> Skarsnik: resolve the conflict before sending the pull request

[13:51] <Skarsnik> I don't have access to azawawi repo x)

[13:51] <nine> Zero_Dogg: I just today pushed a commit that gives a better error message in your case :)

[13:51] *** aborazmeh joined
[13:51] *** aborazmeh left
[13:51] *** aborazmeh joined
[13:51] <Zero_Dogg> nine: awesome :)

[13:51] <Skarsnik> Should get a git diff and work with that maybe?

[13:52] <nine> Skarsnik: no, git mergetool

[13:52] <nine> Skarsnik: learn how to use it (I'm using vimdiff, but there are others). It's really worth it.

[13:52] *** Arrowhead left
[13:52] <[ptc]> how can one work out what modules are available to camelia?

[13:53] <Skarsnik> there is a moar star on camelia

[13:53] <nine> [ptc]: I guess it just supports the CORE modules

[13:53] <Skarsnik> m-star:

[13:53] <Skarsnik> r-star:

[13:53] *** s_kilk joined
[13:53] <Skarsnik> r-star: say "hello"

[13:53] <[ptc]> I just want to test requiring a module, and want to see if it's my system which is odd, or if it's a general problem

[13:53] <cygx> Skarsnik: https://xkcd.com/1597/

[13:54] <RabidGravy> FritzZaucker, they're the same matey :)

[13:54] <hankache> can panda nuke a module ?

[13:54] <Skarsnik> nine, I guess I should add azawawi as a new remote to try to merge in my repos? since I can't github PR

[13:54] *** ccakes left
[13:55] <Skarsnik> I don't think panda have a uninstall feature x)

[13:55] *** Arrowhead joined
[13:55] <RabidGravy> .seen azawawi

[13:55] <yoleaux> I saw azawawi 28 Dec 2015 08:47Z in #perl6: <azawawi> Merry Christmas to #perl6 :)

[13:55] <[ptc]> any idea why `unless ( try {require URI::Escape} ) { say 'uri::escape missing' }` returns "uri::escape missing" even though it's installed?

[13:56] <[ptc]> I'm sure I'm doing something dumb here, but don't know yet what...

[13:56] <gfldex> m: my $pc = Pod::Config.new(type => "head1", config => {:numbered("0")}); dd $pc;

[13:56] <camelia> rakudo-moar d08e04: OUTPUT¬´Pod::Config $pc = Pod::Config.new(type => "head1", config => {:numbered("0")})‚ê§¬ª

[13:56] <Skarsnik> I am not sure try return a value?

[13:56] <gfldex> can you see the problem?

[13:56] <[ptc]> Skarsnik: it used to...

[13:57] <RabidGravy> it does

[13:57] *** awie joined
[13:57] <RabidGravy> m:  unless try require URI::Escape { say "boo" }

[13:57] <camelia> rakudo-moar d08e04: OUTPUT¬´Block object coerced to string (please use .gist or .perl to do that)  in any  at gen/moar/m-Perl6-Actions.nqp line 1809‚ê§5===SORRY!5===‚ê§Expression needs parens to avoid gobbling block‚ê§at /tmp/4DdP9KwkmR:1‚ê§------> 3ss try require URI::Escape { ‚Ä¶¬ª

[13:57] <gfldex> m: my $pc = Pod::Config.new(type => "head1", config => {:numbered("0")}); say $pc.config<numbered>.Bool; # filed as #127085

[13:57] <camelia> rakudo-moar d08e04: OUTPUT¬´True‚ê§¬ª

[13:58] <[ptc]>  my $out = try {require URI::Escape}; say $out;   gives (Escape), which evaluates as true

[13:58] <[ptc]> however as soon as it's wrapped in the unless it gets seen as false, which is od

[13:58] <[ptc]> *odd

[13:58] <tadzik> cygx: oh, neato

[13:58] <[ptc]> m: unless (try require URI::Escape { say "moo" }

[13:58] <camelia> rakudo-moar d08e04: OUTPUT¬´Block object coerced to string (please use .gist or .perl to do that)  in any  at gen/moar/m-Perl6-Actions.nqp line 1809‚ê§5===SORRY!5=== Error while compiling /tmp/Lmp7IgcVJT‚ê§Unable to parse expression in parenthesized expression; couldn't find fina‚Ä¶¬ª

[13:58] <Juerd> [ptc]: (Escape) is the stringification of a type object. A type object is an undefined value of that type.

[13:58] <[ptc]> m: unless (try require URI::Escape) { say "moo" }

[13:58] <camelia> rakudo-moar d08e04: OUTPUT¬´moo‚ê§¬ª

[13:58] <Juerd> [ptc]: Undefined values are false.

[13:59] <[ptc]> Juerd: that will explain that then, thanks

[13:59] <Juerd> m: my Str $foo; say $foo; say so $foo;

[13:59] <camelia> rakudo-moar d08e04: OUTPUT¬´(Str)‚ê§False‚ê§¬ª

[13:59] <Juerd> m: my Str $foo = "0"; say $foo; say so $foo;

[13:59] <camelia> rakudo-moar d08e04: OUTPUT¬´0‚ê§True‚ê§¬ª

[13:59] <Juerd> m: my Str $foo = ""; say $foo; say so $foo;

[13:59] <camelia> rakudo-moar d08e04: OUTPUT¬´‚ê§False‚ê§¬ª

[14:00] <nine> m: use Test; BEGIN { require DateTime::Formats; CATCH { when X::CompUnit::UnsatisfiedDependency { done-testing; exit; }; }; }; import DateTime::Format; strftime;

[14:00] <camelia> rakudo-moar d08e04: OUTPUT¬´1..0‚ê§¬ª

[14:00] <nine> [ptc]: ^^^

[14:00] <[ptc]> nine: danke!

[14:01] *** awie left
[14:01] <RabidGravy> nine++ # that's such a handy little idiom it should be written down somewhere

[14:01] <cygx> nine: is X::CompUnit::UnsatisfiedDependency the only error that can get thrown? Eg no IO errors?

[14:02] <araujo> I should be able to access a value from a CArray[String] directly using array indexing? , or do I need some special magic for that?

[14:02] <nine> Or....integrated into Test.pm as test-require function (like test-depends in the META.info)

[14:02] <Skarsnik> araujo, it should work

[14:02] <RabidGravy> araujo, yes.  

[14:02] *** lustlife joined
[14:02] *** smls joined
[14:02] <[ptc]> nine: interesting.  The tests for the doc modules have been using `unless (try require)` since February and it seems noone has noticed that it stopped working!

[14:02] <RabidGravy> if it isn't working for you show us what you are trying

[14:03] <nine> cygx: the user will want to see all other errors. IO errors should only occur if something is really wrong.

[14:03] <araujo> Skarsnik, RabidGravy Ok 

[14:04] <Skarsnik> I should add nativecast to the doc

[14:04] <cygx> nine: but if you check for an optional dependency, you generally want to keep going (after possibly emitting a warning)

[14:04] <Skarsnik> You can do stuff like https://github.com/Skarsnik/perl6-gumbo/blob/master/lib/Gumbo/Parser.pm6#L46

[14:05] <dalek> doc: 17fdcb5 | paultcochrane++ | t/pod-htmlify.t:

[14:05] <dalek> doc: Fix checking for URI::Escape dependency in tests

[14:05] <dalek> doc: 

[14:05] <dalek> doc: nine++ for the tip of how to do this with a current Rakudo.

[14:05] <dalek> doc: review: https://github.com/perl6/doc/commit/17fdcb505b

[14:05] <nine> cygx: I mean really majorly wrong. As in "this needs fixing or other things will break, too"

[14:06] <smls> Are Hash lookups thread-safe?

[14:06] <nine> And this require thing is why I really wanted to merge curli before 6.c. Because people will write code that uses this API.

[14:06] <Zero_Dogg> What's the perf difference between moar and jvm? Got some scripts to run on a raspi2, which isn't the fastest thing in the world

[14:06] <cygx> nine: because only one precomp store is active at a time, and you're hosed if you cannot access that?

[14:06] <nine> smls: nope

[14:06] <[ptc]> \o/ the docs pages are building again.  nine++

[14:06] * cygx shuold realy read up on that precomp thing

[14:06] <smls> ok

[14:07] <RabidGravy> Hmm ye olde "Missing serialize REPR function for REPR VMException" is back

[14:07] <Skarsnik> cygx, did you have any idea why replacing some nativecast with the correct Pointer[mystruct] .deref fail sometime?

[14:07] <nine> cygx: it's not only the precomp store. Could be the rest of the repository just as well. And if the rest is affected and you don't notice and install other modules, things could get even worse.

[14:07] <nine> brrt: actually, there may be a JIT or SPESH bug revealed by a panda problem

[14:08] *** Arrowhead left
[14:08] <RabidGravy> Zero_Dogg, moar is I believe faster to load and so on, it also works properly with 2015.12 jvm hasn't quite caught up

[14:08] <Skarsnik> Zero_Dogg, jvm is behind moar in term of feature, for perf I don't really know x)

[14:08] <cygx> Skarsnik: not specifically, but deref has issues with pointer-to-pointers, and nativecall generally assumes that you're dealing with pointers to structs instead of struct itself

[14:08] <Zero_Dogg> RabidGravy, Skarsnik: thanks

[14:08] <cygx> (imo a mistake as that's not how C does it)

[14:09] <nine> brrt: panda has a --force flag. That's just a named Bool on the MAIN routine that gets passed on several levels to CompUnit::Repository::Installation::install. In some cases we get an error about unboxing a native after installing a couple of modules.

[14:09] <RabidGravy> Zero_Dogg, I'm just working on something for the RPi at the moment

[14:09] *** _mg_ joined
[14:09] <nine> brrt: The error occurs in a simple if not $force, where $force is just a Bool type object. That's after the same code ran a couple of times.

[14:10] <Skarsnik> cygx, I mean .deref just call nativecast(ptr, type); but I get binding issue comparing to just calling nativecast the same

[14:10] <RabidGravy> I tend to get the basic thing working on a proper laptop then put it on the RPi to test

[14:10] <gfldex> .seen hankache 

[14:10] <yoleaux> I saw hankache 13:54Z in #perl6: <hankache> can panda nuke a module ?

[14:10] *** Arrowhead joined
[14:10] <cygx> Skarsnik: yes, that's still broken if no one has fixed it since I last looked into this

[14:10] <gfldex> .tell hankache I got something working now that I believe to be able to render perl6intro from pod

[14:10] <yoleaux> gfldex: I'll pass your message to hankache.

[14:11] <Zero_Dogg> RabidGravy: nice. I've got it installed through rakudobrew right now, but it uses quite a bit of time before it actually starts executing the script. Not a problem for this one, but a bit annoying while testing it :)

[14:11] <gfldex> .tell hankache https://github.com/gfldex/pod-to-bigpage see tmp/html.html for example output

[14:11] <yoleaux> gfldex: I'll pass your message to hankache.

[14:11] <RabidGravy> Zero_Dogg, there isn't a JIT for ARM at the moment, which has some impact

[14:11] <Skarsnik> feel like a Perl 6 bug or return should be a binding or something?

[14:11] <cygx> Skarsnik: workaround is to cast to pointer-to-uintptr (or size_t), read that, then create a enw pointer

[14:11] <timotimo> "return" reconts unless you return-rw

[14:12] <timotimo> (what am i missing?)

[14:12] <timotimo> o/

[14:12] <timotimo> i neglected backlog completely today

[14:12] <RabidGravy> a unicorn, everyone is missing a magical unicorn

[14:12] <Zero_Dogg> RabidGravy: ah

[14:12] <Skarsnik> hm, maybe I should try replacing with return-rw

[14:13] <RabidGravy> what was the C parser module thingy called, I'm failing to find it in the module list

[14:13] <Skarsnik> C::Parser ?

[14:14] <colomon>  what Skarsnik said

[14:14] <colomon> might be gone?

[14:14] <RabidGravy> oh yeah, nah I'm just going blind or stupid or both

[14:14] <colomon> well, it‚Äôs here: https://github.com/andydude/p6-c-parser/

[14:15] <Arrowhead> it's not compatible with 6.c

[14:16] <cygx> Skarsnik: a helper method I used to use: https://gist.github.com/cygx/5008871f68dc2cbf7e08

[14:16] <Skarsnik> rofl

[14:16] <cygx> if you don't have a uintptr type around, size_t should work as well

[14:19] <[ptc]> timotimo: \o

[14:20] <RabidGravy> oh, yes it won't even install with panda

[14:20] <RabidGravy> that sucks

[14:21] <RabidGravy> that'll be a yak too far, I think I'll ignore it for the time being

[14:22] <brrt> nine, /me was afk for a bit

[14:22] <timotimo> sup brrt :)

[14:22] <dalek> doc: 2fa7682 | paultcochrane++ | doc/ (4 files):

[14:22] <dalek> doc: Remove the Enum type

[14:22] <dalek> doc: 

[14:22] <dalek> doc: ... because it was removed from Rakudo in 2015.09

[14:22] <dalek> doc: review: https://github.com/perl6/doc/commit/2fa7682877

[14:23] <brrt> hmm ok

[14:23] <brrt> would be very awesome if we could golf that

[14:23] <dalek> perl6-roast-data: 89d24d7 | coke++ | / (7 files):

[14:23] <dalek> perl6-roast-data: today (automated commit)

[14:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/89d24d70e2

[14:23] <Ulti> only a couple of tests fail for p6-c-parser on 6.c

[14:26] <[ptc]> m: say sleep-till now+10

[14:26] <camelia> rakudo-moar d08e04: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/u8ZYaELdPX‚ê§Undeclared routine:‚ê§    sleep-till used at line 1. Did you mean 'sleep-until', 'sleep-timer'?‚ê§‚ê§¬ª

[14:27] <RabidGravy> Ulti, my panda is telling me it can't use the source-url in the meta file

[14:27] <nine> m: my Bool $foo; for ^1000 { if not $foo { }; };

[14:27] <camelia> rakudo-moar d08e04: OUTPUT¬´Cannot unbox a type object‚ê§  in block <unit> at /tmp/1h1Hpyc5P2 line 1‚ê§‚ê§¬ª

[14:27] <nine> brrt: lol now that was easy :)

[14:27] <brrt> that is easy

[14:27] <[ptc]> bummer!  sleep-till has gone :-/  And I had a use-case for that too!

[14:28] <cygx> Did you mean 'sleep-until'

[14:28] <nine> m: my Bool $foo; while (not $foo) {}

[14:28] <camelia> rakudo-moar d08e04: OUTPUT¬´Cannot unbox a type object‚ê§‚ê§¬ª

[14:28] <cygx> or has that different semantics?

[14:28] <hankache> computer, messages

[14:28] <yoleaux> 14:10Z <gfldex> hankache: I got something working now that I believe to be able to render perl6intro from pod

[14:28] <yoleaux> 14:11Z <gfldex> hankache: https://github.com/gfldex/pod-to-bigpage see tmp/html.html for example output

[14:28] <nine> brrt: even shorter ^^^

[14:28] <[ptc]> cygx: oh, did it get renamed?

[14:28] <brrt> oh, that one is cute

[14:28] <cygx> [ptc]: no idea, that was part of the error message ;)

[14:28] <timotimo> nine: i wonder if spesh makes that mistake

[14:29] <[ptc]> cygx: true!  Reading helps!

[14:29] <brrt> speshbug

[14:30] <nine> timotimo: yes, it's spesh

[14:30] <hankache> .tell gfldex i'll try it during the evening

[14:30] <yoleaux> hankache: I'll pass your message to gfldex.

[14:30] <RabidGravy> fwiw, I think my patch may have unintentionally unearthed a further infelicity in installdeps

[14:30] <timotimo> right. we probably specialize istrue in this case to unbox_i, but without making sure the incoming arg is known to be concrete

[14:30] <timotimo> seems like an easy fix; thanks for the golf!

[14:31] <smls> Can two threads use  chdir($dir);  without affecting each other?

[14:31] <nine> :)

[14:31] <perlpilot> smls: probably not.

[14:32] <timotimo> we have only a fake PWD in perl6

[14:32] <nine> brrt: thanks for asking about JIT bugs. Pushed me into the right direction. JIT and spesh are so stable that I completely forget, that they could interfere :)

[14:32] <smls> timotimo: But is the fake working dir thread-local?

[14:33] <timotimo> i sure hope so!

[14:33] <brrt> yw :-)

[14:33] <timotimo> it's implemented as a dynamic variable, i think it's called $*CWD

[14:33] <timotimo> otherwise you can my $*CWD = OUTER::('$*CWD') (or what the correct syntax would be)

[14:34] <llfourn> CALLERS::<$*CWD> # in my experience

[14:34] <timotimo> good

[14:34] <timotimo> oh, yeah, OUTER is BS

[14:35] *** VGA joined
[14:35] <smls> m: $*CWD = "/";

[14:35] <camelia> rakudo-moar d08e04: OUTPUT¬´Cannot modify an immutable IO::Path‚ê§  in block <unit> at /tmp/a24lQN0fQ8 line 1‚ê§‚ê§¬ª

[14:35] <smls> :/

[14:36] <llfourn> m: my $*CWD = "/";

[14:36] <camelia> rakudo-moar d08e04: ( no output )

[14:36] <timotimo> i have a fix for the Bool thing :)

[14:37] <nine> yeah!

[14:37] <masak> OT, but a nice read: https://queue.acm.org/detail.cfm?id=2724586

[14:37] <yoleaux> 13:13Z <andreoss> masak: consider my PR

[14:37] * masak looks

[14:37] <smls> rhanks llfourn

[14:37] <llfourn> m: my $*CWD = "/".IO # probably better :)

[14:37] <camelia> rakudo-moar d08e04: OUTPUT¬´Use of uninitialized value $CWD of type Any in string context‚ê§Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/WF5_oI9SwO line 1‚ê§¬ª

[14:37] <smls> *thanks

[14:37] <llfourn> erm...

[14:38] <timotimo> nine: i didn't yet run spec tests with the new fix, but it should be sane

[14:38] <llfourn> m: my $*CWD = "/etc".path; say $*CWD;

[14:38] <camelia> rakudo-moar d08e04: OUTPUT¬´Use of uninitialized value $CWD of type Any in string context‚ê§Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/q8U94jMpTo line 1‚ê§"/etc".IO‚ê§¬ª

[14:38] <smls> This works locally:  perl6 -e 'my $*CWD = "/"; run "pwd";'

[14:38] <llfourn> smls:  ok good :)

[14:39] *** psy joined
[14:40] *** pierre-vigier joined
[14:40] <smls> Looks like   indir "docs", { ... }   is thread-safe

[14:41] <dalek> doc: f3d013a | paultcochrane++ | doc/Type/Temporal.pod:

[14:41] <dalek> doc: Fix sleep-until documentation

[14:41] <dalek> doc: 

[14:41] <dalek> doc: sleep-till was renamed to sleep-until

[14:41] <dalek> doc: review: https://github.com/perl6/doc/commit/f3d013ac1c

[14:41] <dalek> doc: 05eb2fb | paultcochrane++ | doc/Type/ (2 files):

[14:41] <dalek> doc: Move sleep-related docs into Date docs

[14:41] <dalek> doc: 

[14:41] <dalek> doc: The sleep-related functions are actually part of the Date module, hence it

[14:41] <dalek> doc: is more sensible to hang the docs on the Date docs, rather than having a

[14:41] <dalek> doc: separate Temporal docs file.

[14:41] <dalek> doc: review: https://github.com/perl6/doc/commit/05eb2fb3d4

[14:41] <smls> But chdir() seems to change it globally for all threads

[14:41] <timotimo> i suppose it depends on whether or not you build your own $*CWD

[14:41] <RabidGravy> yeah, that was what I was going to say

[14:44] *** lucasb joined
[14:45] *** pierre-vigier left
[14:46] <timotimo> nine: i don't think i should bump nqp and moar for this, eh?

[14:46] <timotimo> especially since if we release a little bug fix release of rakudo before star we'd bump anyway

[14:46] <timotimo> which i recommend for the installation fix

[14:46] *** Arrowhead left
[14:47] <nine> timotimo: yeah, we do have workarounds in panda and there don't seem to be other real world cases

[14:47] *** Arrowhead joined
[14:47] <timotimo> oh?

[14:47] *** zakharyas left
[14:47] <timotimo> i thought the problem also appears in install-core-modules.p6?

[14:48] <nine> really?

[14:48] * araujo trying to get some bindings working .... but nothing so far

[14:48] <masak> andreoss: I left some comments in https://github.com/masak/007/pull/115

[14:48] <araujo> anybody knows a good lib (up to date) using NativeCall out there?

[14:48] <nine> timotimo: I guess with MVM_SPESH_NODELAY=1 it would break.

[14:48] <timotimo> nine: i know nothing :)

[14:49] <araujo> masak, hola there o/

[14:49] <araujo> :)

[14:49] <nine> araujo: Inline::Perl5 or RabidGravy's work

[14:49] *** xpen joined
[14:50] <masak> araujo: saluton!

[14:50] <masak> araujo: didn't you toy around with making your own language some years back?

[14:50] <RabidGravy> well in my case I wouldn't go as far as "good", but they exercise NativeCall quite heavily

[14:50] <[Coke]> [ptc]: why do we have to delete and re-download rakudobrew to run rakudobrew?

[14:50] *** ccakes joined
[14:50] <[Coke]> (re: infrastructure-doc: da78c59)

[14:51] <araujo> nine, where can I find RabidGravy's awesome work? 

[14:51] <araujo> :)

[14:51] <Skarsnik> nine, can you merge my PR now? x) It fix an issue someone has with a NC module yesterday

[14:51] <smls> timotimo: When assigning directly to ¬´my $*CWD¬ª it only accepts a Str, not an IO::Path. But then the next time you call chdir(), it complains "$*CWD is a Str, not an IO::Path!!!"

[14:52] <RabidGravy> araujo, all but one of the Audio::* modules in the ecosystem :)

[14:52] <Skarsnik> araujo, maybe paste a gist of what is causing your issue x)

[14:52] <timotimo> ugh, that's bad :)

[14:52] <araujo> Skarsnik, yeah, sorry, I will, checking something first

[14:52] <RabidGravy> (well one of those isn't actually using NativeCall because I never got round to making silan into a library)

[14:52] <araujo> RabidGravy, oohuh ok :P

[14:53] <smls> timotimo: Also, the specs say that ¬´temp $*CWD;¬ª sould work, but it doesn't because the default $*CWD is immutable.

[14:53] <smls> "Can only use 'temp' on a container"

[14:54] <RabidGravy> I think $*CWD is bound to a Proxy if my memory isn't failing me

[14:54] <smls> As long as you don't mix manual assignm,ent and chdir() though, they work fine... :)

[14:54] <cygx> smls: that's ok, the 'specs' are just 'design documents' now >:)

[14:54] *** Arrowhead left
[14:54] *** Arrowhead_ joined
[14:55] <smls> Also, indir() works correctly with chdir().

[14:55] <timotimo> m: say $*CWD.VAR.WHAT

[14:55] <camelia> rakudo-moar d08e04: OUTPUT¬´(Path)‚ê§¬ª

[14:55] <timotimo> hum

[14:55] *** ccakes left
[14:55] <RabidGravy> maybe my memory is failing me

[14:55] <RabidGravy> :)

[14:55] <timotimo> AFK for a bit

[14:56] <RabidGravy> which I wouldn't be majorly surprised about the amount of beer I've drunk in the last week

[14:56] *** ZoffixW joined
[14:58] <nine> Skarsnik: https://github.com/Skarsnik/rakudo/commit/ab9aefab85766d2bb518c28a5fce2b38174276d5 looks very, very wrong

[14:58] <ZoffixW> m: use lib <first second>; use Foo; 

[14:58] <camelia> rakudo-moar d08e04: OUTPUT¬´===SORRY!===‚ê§Could not find Foo in:‚ê§    /home/camelia/second‚ê§    /home/camelia/first‚ê§    /home/camelia/.perl6/2015.12-46-gd08e043‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /hom‚Ä¶¬ª

[14:58] <ZoffixW> My 2 cents ^ that should place "first" BEFORE "second" into search paths. Reasoning: 1) it's intuitive for them to end up in the order I specified it in my code. 2) Perl 5's use lib does it that way, so the reverse behavior could trip up Perl 5 converters.

[14:58] <Skarsnik> wtf

[14:59] <Skarsnik> I hate git

[14:59] <nine> ZoffixW: sounds reasonable. I'd be happy to merge a PR for that.

[14:59] <ZoffixW> \o/

[14:59] * ZoffixW proceeds to work on it

[14:59] *** itaipu left
[15:00] <Skarsnik> nine, can you guide me on how to reverse/fix this mess

[15:00] *** itaipu joined
[15:00] <nine> Skarsnik: why do you hate a tool when you just haven't mastered it yet? git is awesome and can help you so much. It simply takes a while to learn.

[15:01] <ZoffixW> Actually, I'll do it tonight on my better box. On this one it'll take me 40 minutes just to pull all the repos and 30 minutes to compile and run the spectest XD

[15:03] <Skarsnik> I just don't understand how he add file the commit without telling me

[15:03] *** jshy joined
[15:03] <nine> Skarsnik: 1. make sure your origin/nom is up to date. git remote update should do that. 2. do a git rebase -i origin/nom # remove the "solve conflict?" commit from the list. 3. when it reports a conflict, edit lib/NativeCall.pm6

[15:04] <nine> Skarsnik: there remove the part betweeen <<<< and ==== (inclusive) and remove the >>>>> line. Then git add lib/NativeCall.pm6 && git rebase --continue

[15:04] *** aborazmeh left
[15:07] <Skarsnik> It don't offer me to remove

[15:08] *** s_kilk left
[15:08] *** Arrowhead_ left
[15:08] <nine> Skarsnik: git rebase -i will open a text editor where the commits are listed. Simply remove the line with the offending commit

[15:08] <Skarsnik> it was noop

[15:08] *** Cabanossi left
[15:09] *** Arrowhead joined
[15:09] <nine> Skarsnik: oh, your origin is Skarsnik/rakudo, not rakudo/rakudo

[15:09] <Skarsnik> Oh yeah upstream

[15:09] <Skarsnik> not origin x)

[15:10] *** Cabanossi joined
[15:11] *** ccakes joined
[15:12] *** itcharlie left
[15:12] <Skarsnik> skarsnik@testperl6:~/devel/rakudo$ git rebase -i upstream/nom

[15:12] <Skarsnik> lib/NativeCall.pm6: needs merge

[15:12] <Skarsnik> Cannot rebase: You have unstaged changes.

[15:12] <Skarsnik> duh

[15:13] *** xxpor_lap left
[15:13] *** lucasb left
[15:14] <Skarsnik> great it reverted all my commit

[15:14] <Skarsnik> fuck this shit

[15:14] *** itcharlie joined
[15:14] <Skarsnik> sorry for language

[15:14] <geekosaur> it didn't revert it

[15:14] <geekosaur> it's waiting to finish it, you need to tell it how to deal with the conflict by editing and "git add"-ing the file with the merge conflict, or reset the merge to discard it

[15:15] <Skarsnik> it reverted my 3 commits

[15:15] <Skarsnik> only the last was faulty

[15:16] *** ccakes left
[15:16] <Skarsnik> now How I get back my 2 first commits ~~

[15:16] *** _mg_ left
[15:16] <Skarsnik> let go with the rm solution x)

[15:18] <RabidGravy> at times like this I find a good "git reset --hard ..." works ;-)

[15:18] *** orbus left
[15:18] <Arrowhead> Skarsnik: make a backup to prevent further damage, then explore "git reflog" and "git checkout ..." to go to a likely point

[15:20] <RabidGravy> yikes, someone got me some "peanuts from hell".  I was skeptical about the claim to be the hottest chilli nuts in the universe, I was wrong, can only just feel my lips after ten minutes and the application of beer

[15:20] <andreoss> masak: fixed that

[15:20] <Skarsnik> x)

[15:21] <[ptc]> [Coke]: it's only something which needs to be done once a release

[15:21] <[ptc]> [Coke]: also, it's something I saw in the history and thought it's probably a good idea to start from a clean slate

[15:21] *** khw joined
[15:22] *** protium left
[15:22] <Skarsnik> obviously having git revert last was too simple for git...

[15:22] *** CQ joined
[15:22] <geekosaur> easy revert is dangerous in a distributed vc system

[15:23] <[ptc]> [Coke]: also, I thought if one just uses update or nuke or similar, then there are often follow-on problems that can happen

[15:23] <geekosaur> it cannot know if others have received that commit, and if they have then your repo would no longer be compatible with theirs

[15:24] <[ptc]> [Coke]: anyway those were the reasons behind my decision to purge and recreate; I don't have problems with changing things if they can be done better

[15:25] <Skarsnik> geekosaur, I don't see the issue? there is a pull operation

[15:25] *** n0xff left
[15:25] <Skarsnik> he is dumb to not know a commit is pushed or not

[15:25] *** lnrdo left
[15:25] <ZoffixW> Any idea what this error is about? There's no line number or file or anything: https://gist.github.com/zoffixznet/107e9d6937d87357c7bb

[15:25] <moritz> \o

[15:25] <ZoffixW> o/

[15:26] *** lnrdo joined
[15:26] <Skarsnik> Err

[15:26] <Skarsnik> Weird error

[15:26] *** itcharlie left
[15:26] <geekosaur> Skarsnik, there are ways other than push

[15:26] *** itcharlie joined
[15:26] * geekosaur works with repos in AFS, there's no push there :)

[15:27] <Skarsnik> yes but it's not like it can give you a warning or not allow you something when it considered dangerous

[15:27] <ZoffixW> Ah. k. found it

[15:27] <ZoffixW> m: use Test:ver<42>;

[15:27] <camelia> rakudo-moar d08e04: OUTPUT¬´===SORRY!===‚ê§Cannot call Numeric(Version: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§¬ª

[15:28] <ZoffixW> How do I specify which version I want to use in my code?

[15:28] <[Coke]> [ptc]++ danke.

[15:28] <Skarsnik> m: use Test::ver<v42>;

[15:28] <camelia> rakudo-moar d08e04: OUTPUT¬´===SORRY!===‚ê§Could not find Test::ver in:‚ê§    /home/camelia/.perl6/2015.12-46-gd08e043‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6‚ê§    Com‚Ä¶¬ª

[15:28] <Skarsnik> m: use Test:ver<v42>;

[15:28] <camelia> rakudo-moar d08e04: OUTPUT¬´===SORRY!===‚ê§Could not find Test:ver<v42> in:‚ê§    /home/camelia/.perl6/2015.12-46-gd08e043‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6‚ê§   ‚Ä¶¬ª

[15:28] *** Cabanossi left
[15:29] *** ChristopherBotto left
[15:30] <ZoffixW> Use WWW::Google::Time:ver<v1.001001> also says "Could not find..." But I do have 1.001001 installed

[15:30] * ZoffixW skips explicit versions for now

[15:31] *** jshy left
[15:32] *** Cabanossi joined
[15:32] *** _mg_ joined
[15:33] <ZoffixW> whoa! Perl 6 makes spelling suggestions with imported subs! That's awesome. "Undeclared routine: conunction used at lines 23, 24. Did you mean 'conjunction'?"

[15:34] *** spider-mario joined
[15:35] <timotimo> of course it does

[15:35] <timotimo> the list of subs and multi candidates is known at compile time

[15:35] <timotimo> that's one of our main strengths when it comes to lexical scoping

[15:36] <cygx> ZoffixW: I believe that should read WWW::Google::Time:ver<1.001001>

[15:37] <ZoffixW> cygx, so the error I get is a bug then?

[15:39] <moritz> ZoffixW: I think what cygx is saying is that you should do "use WWW::Google::Time:ver<1.001001>;" not ":var<v...>"

[15:39] <pmurias> what does utf16str from nativecall map in c terms

[15:39] <pmurias> ?

[15:39] <pmurias> is it w_char*?

[15:39] <Skarsnik> it's just an encodaing

[15:39] <cygx> ZoffixW: what moritz++ said

[15:39] *** vendethiel left
[15:40] *** vendethiel joined
[15:40] <ZoffixW> Yeah, but that gives the error:

[15:40] <ZoffixW> m: use Test:ver<42>;

[15:40] <camelia> rakudo-moar d08e04: OUTPUT¬´===SORRY!===‚ê§Cannot call Numeric(Version: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§¬ª

[15:40] <ZoffixW> m: say 42.Version

[15:40] <camelia> rakudo-moar d08e04: OUTPUT¬´Method 'Version' not found for invocant of class 'Int'‚ê§  in block <unit> at /tmp/SDVwv1OALB line 1‚ê§‚ê§¬ª

[15:40] <ZoffixW> hm. 

[15:40] <Skarsnik> I want to give up on this git dumb thing...

[15:40] <ZoffixW> do it

[15:40] <b2gills> nine: When I compiled my own 32bit Perl 5s, I set the size of IV to 64bit. So basically you will have to inspect the output of `perl -V` on 32bit (backlogging)

[15:41] <Skarsnik> wtf Perl5

[15:41] *** lustlife left
[15:42] *** krshn left
[15:43] *** MadcapJake joined
[15:43] <hahainternet> Skarsnik: what's up with your git?

[15:44] <Skarsnik> Apparently reverting a commit it's too hard

[15:44] <MadcapJake> A fresh rakudobrew install, build moar, build panda, and then I tried `panda install Task::Star` and it fails at File::Find

[15:44] <hahainternet> what have you done so far, and what situation is it in? it should be as simple as git revert commit

[15:45] <cygx> pmurias: any pointer type will do, really

[15:46] <cygx> moarvm returns a char* from MVM_string_utf16_encode

[15:46] <MadcapJake> To install Linenoise I had to  `panda --force install File::Find` and then I had to `panda --force install Shell::Command` and now I tried `panda install Linenoise` and I get "P6M Merging GLOBAL symbols failed: duplicate definition of symbol Find"

[15:46] <cygx> note that the size of wchar_t is platform dependent (16-bit wchar_t is mainly a windows thing)

[15:47] *** zhi joined
[15:47] <cygx> pmurias: uint16_t* and char16_t* would be good choices if available

[15:48] <[Coke]> Rearding the calls to cut a 2015.12.1 ASAP - 2016.01 is due in about 2.5 weeks.

[15:48] <ZoffixW> cool

[15:48] *** Arrowhead left
[15:48] <[Coke]> And we are definitely going to have to spend some time figuring out what the releases (and release process) is going to look like before then.

[15:48] <ZoffixW> MadcapJake, running rakudobrew build-panda right this second and install succeeds. I notice rakudobrew build panda also starts doing something but I aborted it. Not sure what that does, but the correct command is build-panda with the hyphen

[15:48] *** Arrowhead joined
[15:49] <RabidGravy> MadcapJake, I think it's something to do with panda bundling those itself

[15:49] <ZoffixW> MadcapJake, those modules are installed during build-panda modules

[15:49] <ZoffixW> oh

[15:49] * ZoffixW actually runs panda install Task::Star -_-

[15:51] <RabidGravy> I don't quite now how but I think my change to installdeps may have triggered this

[15:51] <RabidGravy> know

[15:51] <brrt> i would like as many different people as possible test the libuv-1.8 branch of moarvm

[15:51] *** _mg_ left
[15:51] <ZoffixW> Aye, I'm getting File::Find error now too

[15:52] <brrt> especially on windows, os x, bsd, solaris, whatever

[15:52] *** Arrowhead left
[15:52] <brrt> it looks good to me, but that is not a sufficient criterion :-)

[15:52] <ZoffixW> I think the issue is panda bails out with an error when it detects the already installed module. This Issue in particular is the cause I believe: https://github.com/tadzik/panda/issues/274

[15:52] <ZoffixW> (no idea on the P6M merging stuff error)

[15:52] *** Arrowhead joined
[15:53] <RabidGravy> I think it tries to require it to see if it can or something

[15:53] *** shicheng joined
[15:53] *** zhi left
[15:55] *** CQ left
[15:55] <Skarsnik> nine, can you remove my PR? I think I will just delete my fork, recreate it and put the right files...

[15:55] <Woodi> brrt: never libuv just works/compiles or some tricks are needed ?

[15:55] <Woodi> hi today :)

[15:55] <Woodi> newer* ?

[15:56] <brrt> we've had funky failures on broken^W special platforms like os x

[15:57] <Skarsnik> or wait, it's seem to be fine

[16:01] *** Arrowhead left
[16:01] <ZoffixW> m: https://gist.github.com/zoffixznet/c2d531f6c652dd3b88dd

[16:01] <camelia> rakudo-moar d08e04: OUTPUT¬´(Hash)‚ê§{:countries($[:name("U.S. Minor Outlying Islands"), :cities($["Baker Island", "Howland Island"])]), :offset("-12")}‚ê§(Pair)‚ê§Method 'elems' not found for invocant of class 'Mu'‚ê§  in sub announce-hny at /tmp/cF3GfA0M1t line 11‚ê§  in block <uni‚Ä¶¬ª

[16:01] <ZoffixW> Any idea why I'm getting that error? I can't reproduce on a smaller testcase:

[16:01] <ZoffixW> m: my $x = {'countries' => [{'cities' => ['Bah'],'name' => 'Canada'},]}; for |$x<countries> -> $country { say $country<name>; say $country<cities>.elems }

[16:01] <camelia> rakudo-moar d08e04: OUTPUT¬´Canada‚ê§1‚ê§¬ª

[16:02] <RabidGravy> something really, really didn't like trying to install (a fixed version of) C::Parser

[16:03] <RabidGravy> ground the machine right down there for a minute

[16:04] <ZoffixW> Or rather, I guess my question is, why the hell $country ends up a Pair, when in the small case it works fine

[16:04] <ZoffixW> Ahhh

[16:04] <Skarsnik> try append() instead of : ? x)

[16:05] *** Arrowhead joined
[16:05] <Skarsnik> I never make the : form of stuff like push to work x)

[16:07] *** RabidGravy left
[16:07] <autarch> is there a way of getting the AST for a piece of Perl 6 code? something like "my $ast = EVAL-AST('path/to/file.pm6')" ?

[16:07] <llfourn> autarch: like QAST tree?

[16:07] <ZoffixW> autarch, add --target=AST to perl6

[16:08] <autarch> llfourn: I dunno, is that what I want?

[16:08] <autarch> ZoffixW: I meant programmatically, I don't want a file, I want objects

[16:08] <llfourn> yeah.... It's possible but it's not easy I think

[16:08] <perlpilot> autarch: I don't think there is yet.

[16:09] <llfourn> m: say $~MAIN.grammar.^name;

[16:09] <camelia> rakudo-moar d08e04: OUTPUT¬´Perl6::Grammar‚ê§¬ª

[16:09] <perlpilot> autarch: once masak's macro work comes to fruition, it should be not only possible, but easy-ish I would thinkg

[16:09] <ZoffixW> k, found the issue. It's the one arg thing

[16:09] <autarch> heh, two different answers

[16:10] <perlpilot> autarch: whether mine is correct or not, it's the one that will keep you saner ;)

[16:10] <ZoffixW> m: my $x = {'countries' => [{'cities' => [],'name' => 'Canada'}]}; for $x<countries> -> $country { say $country<name> }

[16:10] <camelia> rakudo-moar d08e04: OUTPUT¬´Type Array does not support associative indexing.‚ê§  in block <unit> at /tmp/MdA5gO4KGv line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at /tmp/MdA5gO4KGv line 1‚ê§‚ê§¬ª

[16:10] <ZoffixW> m: my $x = {'countries' => [{'cities' => [],'name' => 'Canada'},]}; for $x<countries> -> $country { say $country<name> }

[16:10] <camelia> rakudo-moar d08e04: OUTPUT¬´Type Array does not support associative indexing.‚ê§  in block <unit> at /tmp/W4maEnP9cO line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at /tmp/W4maEnP9cO line 1‚ê§‚ê§¬ª

[16:10] <llfourn> so you could try and .parse on that $~MAIN.grammar but it will not work out of the box you will have to init lots of $* variables and even then....

[16:10] <ZoffixW> wut

[16:10] <autarch> for what I'm doing now I can just use a hack of scanning line by line for use & require statements

[16:10] *** FROGGS joined
[16:10] *** luiz_lha left
[16:11] <FROGGS> o/

[16:11] <llfourn> m: say $~MAIN.grammar.parse('say "hello world"')

[16:11] <camelia> rakudo-moar d08e04: OUTPUT¬´Could not locate compile-time value for symbol Block‚ê§  in any find_symbol at src/Perl6/World.nqp line 3491‚ê§  in any stub_code_object at src/Perl6/World.nqp line 1919‚ê§  in any loading_and_symbol_setup at src/Perl6/World.nqp line 379‚ê§  in any comp_un‚Ä¶¬ª

[16:11] <ZoffixW> Well, yeah, it's the one arg thing. I just fail at typing: https://gist.github.com/zoffixznet/991b1a645d711ee57884

[16:11] *** RabidGravy joined
[16:11] <timotimo> llfourn: the grammar is not functional without a $*W

[16:11] <timotimo> m: BEGIN say $~MAIN.grammar.parse('say "hello world"')

[16:11] <camelia> rakudo-moar d08e04: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/viidDhz3rn‚ê§An exception occurred while evaluating a BEGIN‚ê§at /tmp/viidDhz3rn:1‚ê§Exception details:‚ê§  5===SORRY!5=== Error while compiling ‚ê§  Could not locate compile-time value for symbol Block‚ê§ ‚Ä¶¬ª

[16:12] <timotimo> mhm mhm

[16:12] *** ccakes joined
[16:12] <RabidGravy> well it probably needed a reboot anyway, don't know what that was all about

[16:12] *** pmurias left
[16:15] *** domidumont left
[16:15] *** shicheng left
[16:15] <ZoffixW> m: my $c = [{'cities' => ["Toronto"]}]; $c[0] ~~ Pair and $c[0] = %(@$c); for |$c { say $_<cities> }

[16:15] <camelia> rakudo-moar d08e04: OUTPUT¬´[Toronto]‚ê§¬ª

[16:15] <ZoffixW> m: my $c = [{'cities' => ["Toronto"]},{'cities' => ["NotToronto"]}]; $c[0] ~~ Pair and $c[0] = %(@$c); for |$c { say $_<cities> }

[16:16] <ZoffixW> This is pretty ugly, but does the job, I guess

[16:16] <camelia> rakudo-moar d08e04: OUTPUT¬´[Toronto]‚ê§[NotToronto]‚ê§¬ª

[16:16] *** sammers joined
[16:18] *** ccakes left
[16:18] *** itcharlie1 joined
[16:19] *** itcharlie left
[16:19] *** shicheng joined
[16:19] *** xpen left
[16:19] *** xxpor_lap joined
[16:19] *** hankache left
[16:21] *** Arrowhead left
[16:21] <MadcapJake> ZoffixW: the rakudobrew page says to build panda you type "rakudobrew build panda" so I just assumed that the `build-panda` command had changed

[16:21] *** cdg joined
[16:21] <ZoffixW> MadcapJake, oh. Maybe they both do the same thing

[16:22] *** Arrowhead joined
[16:22] *** pmurias joined
[16:24] <[Coke]> .ask mojca if the problem with perl6 in the shebang is that you can't have a shell script as the shebang command?

[16:24] <yoleaux> [Coke]: I'll pass your message to mojca.

[16:24] <MadcapJake> now `panda install Task::Star` is failing on "JSON::Fast:ver<v0.3>:auth<>:api<> already installed` if it's already installed, why doesn't it skip and move on?

[16:24] <geekosaur> [Coke], yeh, I pointed that out elsewhere (they were asking in #macports at the same time)

[16:25] <geekosaur> I pointed out the chained-#! thing you ran into

[16:25] <MadcapJake> weird, so there really must be something wrong with `build panda` because now after running `build-panda` it installs fine

[16:26] <geekosaur> "build panda" would mean looking for a "panda" bakend for rakudo

[16:26] <geekosaur> *backend

[16:26] <MadcapJake> geekosaur: but it's given as the way to "use Panda" on rakudobrew's readme

[16:27] <ZoffixW> Should this be rakudobugged? :

[16:27] <ZoffixW> m: my @c = ( [{foo => 'bar'}‚ê§,],);

[16:27] <camelia> rakudo-moar d08e04: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/Z9d5XsiVRu‚ê§Bogus statement‚ê§at /tmp/Z9d5XsiVRu:2‚ê§------> 3my @c = ( [{foo => 'bar'}7‚èè5<EOL>‚ê§    expecting any of:‚ê§        prefix‚ê§        statement end‚ê§        term‚ê§¬ª

[16:27] <geekosaur> it wasn't the last time read it (which would be last Sunday)

[16:27] <ZoffixW> m: my @c = ( [{foo => 'bar'},],);

[16:27] <camelia> rakudo-moar d08e04: ( no output )

[16:27] <MadcapJake> geekosaur: https://github.com/tadzik/rakudobrew#bootstrapping-a-perl-6-implementation

[16:27] *** regreg left
[16:27] *** cdg left
[16:27] <perlpilot> geekosaur: It changed yesterday.

[16:27] <geekosaur> yug

[16:27] *** ggoebel7 left
[16:27] <perlpilot> "build panda" and "build zef" do the same thing as "build-panda" and "build-zef" as I understand it.

[16:28] <geekosaur> then I guess you needed to upgrde rakudobrew first

[16:28] <ZoffixW> MadcapJake, but wasn't your issue installing Task::Star and not panda itself?

[16:29] *** VGA left
[16:30] <MadcapJake> right, panda still worked, but now it works *and* it successfully installs things :)

[16:30] *** itaipu left
[16:30] <MadcapJake> geekosaur: I just cloned my rakudobrew an hour ago

[16:31] *** FritzZaucker left
[16:31] *** shicheng left
[16:33] <ZoffixW> Well, I reported it. Close it if the behaviour is the way it's expected to be: https://rt.perl.org/Ticket/Display.html?id=127091

[16:34] *** Begi joined
[16:34] *** ccakes joined
[16:34] <Skarsnik> Time for some tea x)

[16:36] *** Begi2 left
[16:37] <[Coke]> News flash from perl6-users; everyone still not on board that Perl 6 is Perl, and are willing to spend a lot of time talking about it. we should add a FAQ so we can point people to it.

[16:39] *** ccakes left
[16:39] *** shicheng joined
[16:40] <ZoffixW> That's a confusing statement :P

[16:40] <MadcapJake> Can you install p6doc with rakudobrew?

[16:40] <ZoffixW> Perl === any('Perl 5', 'Perl 6'); # that's how I see it

[16:40] <llfourn> autarch: if you wanted some fun you could mixin %*LANG<MAIN-actions> and then slurp EVAL the file you are interested in. It will give you a callback everytime use is parsed by the compiler.

[16:40] <llfourn> though that will depend on your definition of fun

[16:40] <autarch> llfourn: heh, that sounds like a lot more work than is needed to prototype what I'm working on

[16:41] <smls> I think I found a bug in IO newline handling:

[16:41] <smls>     dd "\n\n\n".lines;    # ("", "", "").Seq

[16:41] <autarch> I'm try to write a very minimal version of Dist::Zilla and i need to extract "use" and "require" statements to find a distros prereqs

[16:41] <smls>     spurt 'a', "\n\n\n";

[16:41] <smls>     dd 'a'.IO.lines;      # ("", "").Seq

[16:41] <ZoffixW> MadcapJake, it's part of Task::Star: https://github.com/tadzik/Task-Star/blob/master/META.info#L28

[16:41] *** zakharyas joined
[16:42] <Skarsnik> NativeCall: Consider adding the api version of the library you want to use, sub foo is native(mysqlclient, v1). Should I force mysqlclient v18 or add a way for NC to no warn if specified?

[16:43] <llfourn> autarch: it is actually not that much work but it is kinda nasty because it uses nqp. Suit yourself :)

[16:43] <ZoffixW> autarch, what's it called and where is it? (I'm planning on writing my own dist helper, and I'd love to steal some ideas :P)

[16:43] <autarch> ZoffixW: I haven't pushed anything yet but I'm calling it Dist::Wocky

[16:43] <autarch> it'll be under my github as perl6-Dist-Wocky once I have something to ush

[16:44] <Skarsnik> hm, what is Dist::Zilla?

[16:44] <llfourn> I wonder if it's possible to tell what a module has used though compunit interface...

[16:44] <Skarsnik> dep are stored I think

[16:44] <Skarsnik> so it must be possible

[16:45] <llfourn> Skarsnik: if you know the variable name in UNIT:: that would be the best way

[16:45] *** alpha123 joined
[16:46] *** itaipu joined
[16:47] *** mojca joined
[16:47] *** sprocket joined
[16:47] <autarch> Skarsnik: http://dzil.org/ - basically it's a tool that helps you manage distros by turning a lot of boilerplate junk into config - like generating META.info, generating certain types of distro tests (for example Test::Meta tests), automating the release process, etc.

[16:47] *** _mg_ joined
[16:47] <MadcapJake> ZoffixW: well I thought that Task::Star was finishing correctly (exits with 0) but there there is a "JSON::FASt already installed" error and there is no p6doc in my rakudobrew/bin folder

[16:48] <autarch> as someone who maintains dozens of p5 distros I find it _very_ useful and I'm already getting annoyed trying to write META.info files by hand with p6

[16:48] <Skarsnik> I think mi6 was an attemps at that?

[16:48] <mojca> what does "P6M Merging GLOBAL symbols failed: duplicate definition of symbol Panda" mean?

[16:48] <yoleaux> 16:24Z <[Coke]> mojca: if the problem with perl6 in the shebang is that you can't have a shell script as the shebang command?

[16:48] <sprocket> question about Promises - is it possible to have a Promise that‚Äôs executed lazily, so that the computation doesn‚Äôt start until it‚Äôs await‚Äôed or .result is called?

[16:49] <mojca> yoleaux, I believe so, yes

[16:49] *** Tonik joined
[16:49] <ZoffixW> MadcapJake, right. It aborts Task::Star install https://github.com/tadzik/panda/issues/274

[16:49] <ZoffixW> Skarsnik, I consider it broken as it lacks any sensible docs

[16:49] <cygx> mojca: yoleaux is a message bot - you should address [Coke] 

[16:49] *** wollmers joined
[16:50] <autarch> Skarsnik: where is ml6?

[16:50] *** Arrowhead left
[16:50] <mojca> sorry; how exactly does the bot work? did I get an old message?

[16:50] *** shicheng left
[16:50] <ZoffixW> autarch, http://modules.perl6.org/repo/App::Mi6

[16:50] <Skarsnik> https://github.com/shoichikaji/mi6

[16:50] <cygx> .tell mojca Like this

[16:50] <MadcapJake> ZoffixW: any workaround available?

[16:50] <yoleaux> cygx: I'll pass your message to mojca.

[16:50] <autarch> ah, that's an I not an L

[16:50] <mojca> thanks

[16:50] <yoleaux> 16:50Z <cygx> mojca: Like this

[16:51] *** brrt left
[16:51] *** wollmers left
[16:51] <autarch> mi6 looks more like https://metacpan.org/release/Dist-Milla - which does similar things but is basically unconfigurable

[16:51] <Skarsnik> my main issue, if I did not get fixed is mi6 test run build x)

[16:51] <mojca> so [Coke], about shebang, yes, I believe so

[16:52] *** Arrowhead joined
[16:52] <Su-Shee> which module is the HTTP::Tiny/Mojo::UA etc equivalent? 

[16:52] <Skarsnik> Http::ua?

[16:52] *** lucasb joined
[16:53] <ZoffixW> Su-Shee, I use HTTP::Tinyish  but at some point it was just shelling out to curl, though I think I saw some other handlers the other day

[16:53] *** itcharlie joined
[16:53] <mojca> there are some problems with Panda on Mac OS X 10.6

[16:53] <mojca> http://trac.macports.org/ticket/50158#comment:4

[16:54] <Su-Shee> ZoffixW: ah. no, I want a proper thing. then I can just use curl. 

[16:54] *** itcharlie1 left
[16:54] <ZoffixW> *sigh* my New Years bot is annoying me with all problems I'm having that I can't repoduce in a small testcase

[16:54] <mojca> but maybe it's just compiler's fault (too old compiler)

[16:54] <Skarsnik> Su-Shee, what is your need exactly?

[16:54] <ZoffixW> mojca, MadcapJake is having similar issue ATM

[16:54] <Su-Shee> Skarsnik: async http client. 

[16:55] <Skarsnik> Oh

[16:55] <Su-Shee> Skarsnik: at least http client. anything which is en par with HTTP::Tiny or Mojo::UA is perfectly fine however.

[16:55] *** xinming_ joined
[16:55] <lucasb> ZoffixW: newline after "}" ends the statement

[16:55] <Skarsnik> should not be hard to write aside http::ua, there is already all the base stuff

[16:55] <ZoffixW> IO::Socket::Async ^__^

[16:55] <ZoffixW> MadcapJake, mojca and right now I'm running I'm running `panda --force install Task::Star` and it gotten further than before, but I see if it succeeds

[16:56] <Skarsnik> My guess will be to look at http::useragent class code and change for an async arch

[16:56] <ZoffixW> lucasb, thanks. I marked the ticket as rejected.

[16:56] <mojca> so "Merging GLOBAL symbols failed" is basically the same or at least related to https://github.com/tadzik/panda/issues/274?

[16:56] <Su-Shee> Skarsnik: I should probably add that SSL is a must.

[16:57] <Skarsnik> Maybe http::ua should be splitted?

[16:57] <lucasb> ZoffixW: you're fast... but maybe I'm not so certain :)

[16:57] <Su-Shee> ZoffixW: is it really shelling out to curl or is it a libcurl binding?

[16:57] <TimToady> such many backlag!

[16:58] <dalek> DBIish: 2b8ac56 | azawawi++ | examples/pg_arrays.p6:

[16:58] <dalek> DBIish: Add initial example for PG array

[16:58] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/2b8ac569a6

[16:58] <dalek> DBIish: e803bf8 | azawawi++ | / (3 files):

[16:58] <dalek> DBIish: merge pgarray step1

[16:58] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/e803bf891d

[16:58] <dalek> DBIish: a07a23b | azawawi++ | examples/parse_pg_array.p6:

[16:58] *** dalek left
[16:58] <lucasb> I mean... maybe newline after "}" should end the stament *if* the statment *can* end there. otherwise it could go on, and accepts the syntax

[16:58] <ZoffixW> Su-Shee, really shellying out: https://github.com/shoichikaji/perl6-HTTP-Tinyish/blob/master/lib/HTTP/Tinyish/Curl.pm6#L31

[16:58] <ZoffixW> TimToady, that's a good thing!

[16:58] <Su-Shee> ZoffixW: yeah ok, no, that's not acceptable.. :(

[16:58] *** dalek joined
[16:58] *** ChanServ sets mode: +v dalek

[16:59] *** xinming left
[16:59] <Skarsnik> Lol I made dalek flood

[16:59] *** shicheng joined
[16:59] <ZoffixW> Is there any reason @messages .= sort: :by(*.chars); NOT sort stuff by length?

[16:59] <ZoffixW> This line { @messages .= sort: :by(*.chars); .say for @messages[*-1].chars, @messages[*-9].chars; } gives me 55 139

[16:59] <[Coke]> .seen allison

[16:59] <yoleaux> I haven't seen allison around.

[16:59] <ZoffixW> m: my @a = <foo foooo fo fooooooo>; @a .= sort: :by(*.chars); for @a { say '';  .say; .chars.say; } # and YET -_-

[16:59] <camelia> rakudo-moar d08e04: OUTPUT¬´‚ê§fo‚ê§2‚ê§‚ê§foo‚ê§3‚ê§‚ê§foooo‚ê§5‚ê§‚ê§fooooooo‚ê§8‚ê§¬ª

[16:59] <Skarsnik> .= sort(*.chars) is not enought?

[17:00] <cygx> mojca: shouldn't a shebang line ``#!/bin/sh /opt/local/bin/perl6`` work?

[17:00] <ZoffixW> m: my @a = <foo foooo fo fooooooo>; @a .= sort: *.chars; for @a { say '';  .say; .chars.say; } # and YET -_-

[17:00] <camelia> rakudo-moar d08e04: OUTPUT¬´‚ê§fo‚ê§2‚ê§‚ê§foo‚ê§3‚ê§‚ê§foooo‚ê§5‚ê§‚ê§fooooooo‚ê§8‚ê§¬ª

[17:00] <ZoffixW> oh

[17:00] *** Arrowhead left
[17:00] <Skarsnik> Su-Shee, I think if you want an async http::ua, look at http::useragant (since it has all the http class) and write something using async api with this

[17:01] *** shicheng left
[17:01] <ZoffixW> Skarsnik++ I guess it's it's because * in a :by creates a closure without a sig so it makes :by behave as in two-arg mode or something

[17:01] <nine> b2gills: I feared as much :/ I will have a look if I can access sizeof(IV) at compile time.

[17:01] <mojca> cygx, bingo!

[17:01] <mojca> that works

[17:02] <Su-Shee> Skarsnik: I mostly just want to write a useful toyscript with Perl6, not first implement stuff. let's see how far I get with HTTP::UserAgent with SSL and all.

[17:02] *** Arrowhead joined
[17:02] <mojca> I believe it's horrible to see that, but it works

[17:02] * RabidGravy gives up on C::Parser *again* and goes in with a brute force solution *again*

[17:02] *** _mg_ left
[17:02] <ZoffixW> Skarsnik, Su-Shee to note: I recall Ovid Poe having issues on that matter that starting a get *inside* a Promise or something like that. And coversation on IRC mentioned it was due to libuv doing things

[17:02] <Skarsnik> Why you want to use C::Parser? x)

[17:02] * ZoffixW cues mst's vague cat URL

[17:03] *** virtualsue left
[17:03] <[Coke]> mojca: I'm pretty sure that's not a portable shebang, but if it works on OS X, awesome. (I just tried it here and got a failure...Unhandled exception: Missing or wrong version of dependency ')

[17:03] <Su-Shee> ZoffixW: how is libuv coming into play with HTTP::UserAgent?! 

[17:03] <Su-Shee> ZoffixW: or are you trying to make me use Node? ;)

[17:03] <RabidGravy> ZoffixW, wasn't it something odd to do with the URI module doing a require in a certain way, I think it was golfed to doing a require in a start

[17:03] <Skarsnik> damn no new commit on https://bitbucket.org/chrisburel/smokegen/branch/clang 

[17:04] <lizmat> Su-Shee: if you use rakudo on MoarVM, then you *are* using libuv

[17:04] *** V_S_C joined
[17:04] <Su-Shee> interesting to know. 

[17:04] <Su-Shee> hm. 

[17:04] <llfourn> autarch: it seems that CompUnit::Repository has a .loaded method which stores the names of the modules it's loaded if that excites you

[17:04] <mojca> [Coke], most likely it's not a portable way; env works; for anything else, it might help if perl6 was a binary

[17:04] <ZoffixW> RabidGravy, ah, I must've missed that part of the convo :P

[17:05] <[Coke]> mojca: I just did a fresh install of [email@hidden.address] got a precompiled version, and it's barfing.

[17:05] <RabidGravy> let me find the RT

[17:05] <[Coke]> $ /opt/local/bin/perl6 -e 'say 3'

[17:05] <[Coke]> Unhandled exception: Missing or wrong version of dependency 'gen/moar/stage2/QRegex.nqp' (from 'src/Perl6/Pod.nqp')

[17:05] <[Coke]> Is there a way when installing a macport to say don't use precompiled?

[17:06] <[Coke]> ah, -s

[17:06] <cygx> [Coke]: have you nuked everything that might need nuking?

[17:06] <RabidGravy> ZoffixW, https://rt.perl.org/Ticket/Display.html?id=126390

[17:07] <mojca> sudo port -s install <package>

[17:07] <mojca> but it would be *very* helpful to figure out the reason for the error

[17:07] <RabidGravy> a workaround at the time was to  do URI.new() *before* starting any threads

[17:07] <mojca> can you please open a ticket before you loose all details?

[17:07] *** harrison_ joined
[17:08] <mojca> I'm unable to get a precompiled version (the buildbot for my os version is defunct at the moment)

[17:08] <[Coke]> Sorry, I had already started trying to get a working version before I saw your request.

[17:09] *** Actualeyes left
[17:09] *** yqt joined
[17:09] <mojca> anyway, you can still uninstall everything and install again to get the precompiled version

[17:09] <[Coke]> typically that error is because there is a stale nqp version; I had inactive nqps & moarvms still installed.. I tried uninstalling them all, even the inactive ones.

[17:09] <Skarsnik> anyone has though on? https://github.com/perl6/DBIish/issues/44

[17:09] *** Arrowhead left
[17:09] *** cdg joined
[17:09] <ZoffixW> RabidGravy, neither this code nor the one below it hang for me now: https://rt.perl.org/Ticket/Display.html?id=126390#txn-1371906

[17:09] <[Coke]> ... and with that, it works fine, even with binary version.

[17:09] <[Coke]> Is there a way to say that a particular distro needs the old version uninstalled?

[17:09] <RabidGravy> ZoffixW cool

[17:10] <ZoffixW> Tried it on two boxes 32bit (couple-days old perl) and 64bit (freshly squeezed)

[17:10] <[Coke]> also: it's super awesome to have a precompiled version to install on a fresh mac box.

[17:10] <[Coke]> mojca++

[17:11] <ZoffixW> RabidGravy, oh, wait, is it an OSX bug only?

[17:11] <mojca> [Coke], when we switch to a new version, the old one will be removed

[17:11] <mojca> but MacPorts cannot touch anything that's not part of distribution

[17:11] <RabidGravy> ZoffixW, no I could reproduce on Linux

[17:11] <ZoffixW> RabidGravy, never mind, I see your note now

[17:12] <mojca> so if you have your own perl6 installed, MacPorts might end up calling *your* perl6 during installation from source in the worst case

[17:12] <mojca> and it certainly cannot uninstall components that you manually installed

[17:13] *** xinming joined
[17:14] <Skarsnik> RabidGravy, did you add leak issue with NC btw?

[17:14] <Skarsnik> *had

[17:14] *** nmp joined
[17:14] *** harrison_ left
[17:15] *** V_S_C left
[17:15] <RabidGravy> Skarsnik, not that I noticed

[17:16] *** xinming_ left
[17:17] <Skarsnik> I had a look the other day at Str returned by sqlite function and there was explictlymanaged (so the GC will not free them) but I think if you copy/clone the Str the role get cloned too

[17:17] <Skarsnik> so you create unfreeable Str

[17:19] <Skarsnik> It's cleared seeing in https://gist.github.com/Skarsnik/7f2fee97d56c5acc1587

[17:19] *** harrison_ joined
[17:19] <nine> mojca: the global symbol merging problem may be caused by loading a precompiled version of a module, then having a "use lib" somewhere and then loading modules again with this time a non-precompiled version of the earlier module

[17:20] *** sprocket left
[17:22] <mojca> nine, thanks; not that I understand though; when I tried to repeat "panda install Task::Star" today, it finished successfully

[17:23] <mojca> so I'm not even able to reproduce the problem (unless maybe if I nuke the whole folder with libraries and try again from scratch)

[17:23] *** nmp left
[17:23] <mojca> do you have any idea which package could be "guilty" of that error? Is there any way to get more verbose output next time?

[17:24] <mojca> (when I will be able to reproduce the problem)

[17:24] <cygx> is RAKUDO_MODULE_DEBUG=1 still a thing?

[17:25] <Su-Shee> ZoffixW: well I can tell you that HTTP::UserAgent is .. strange. I'm reading for the first time in a decade for an http client the documentation.

[17:25] <Woodi> mojca: when module is precompiled and then loaded it needs to put/merge itself (eg. global variable) into language so when something is loaded second time there is a conflict :)

[17:26] <diakopter> RabidGravy: are you sure the new force default on panda MAIN doesn't break anything

[17:26] <Woodi> nine: use lib  changes repository ?  but newly loaded module should load (replace) or don't load...

[17:26] <RabidGravy> diakopter, no I'm not sure

[17:26] <[Coke]> mojca: they weren't removed when I upgraded....

[17:27] <RabidGravy> I actually suspect there's something weirder going on

[17:27] <RabidGravy> so feel free to revert

[17:27] <[Coke]> they were just inactivated.

[17:27] <mojca> [Coke], what exactly did you have to manually remove then?

[17:27] <mojca> ah, ok, but inactivation is fine

[17:27] <[Coke]> I may be the only person who installed old versions of nqp or moar, though.

[17:27] <mojca> you don't see those files

[17:27] <[Coke]> I did 'sudo port uninstall [email@hidden.address] , e.g.

[17:28] *** Arrowhead joined
[17:28] *** harrison_ left
[17:28] <mojca> the only problem might be (I'm not sure if that is the case for perl) if moarvm would actually try to use some components from nqp, rakudo or panda

[17:28] <[Coke]> I'm willing to ignore it for now; we should make sure there are no issues when 2016.01 comes out, though.

[17:28] <mojca> [Coke], but unless [email@hidden.address] was actually installed *and* activated, you shouldn't have experienced any problems

[17:29] *** atta_ is now known as atta

[17:29] <mojca> you would probably get the problem if you would manually upgrade moarvm, but forget to upgrade nqp/rakudo

[17:29] <[Coke]> I get that. Just telling you what happened, what I did, and that it works now.

[17:29] <Woodi> brrt: libuv-1.8 branch compiles and tests for me (nqp and rakudo), debian 32bit

[17:30] <mojca> nevertheless I still don't understand how an old version could have interfered

[17:30] <[Coke]> moarvm and nqp should force an install of the corresponding version of nqp & moarvm.

[17:30] <[Coke]> ack. retry:

[17:30] <Woodi> mojca: module loader is under developmant :)

[17:30] <[Coke]> rakudo and nqp should force an install of the corresponding version of nqp & moarvm, respectively

[17:30] <[Coke]> mojca: I'm not asking you to explain it, I'm just telling you what I did.

[17:31] <mojca> [Coke]: I don't get exactly what you mean; that as soon as one installs moarvm 2016.01, one should also get nqp 2016.01?

[17:32] <mojca> I'm almost sure that this doesn't work.

[17:32] <mojca> But if users do "sudo port upgrade outdated", it should work as expected

[17:32] <mojca> and if users try to upgrade just nqp, moarvm will be upgraded first

[17:34] <mojca> Woodi: so I should simply stop worrying about the "P6M Merging GLOBAL symbols failed" error and assume it will get fixed?

[17:34] <mojca> not that I can do much as I'm not able to reproduce it anyway

[17:34] *** niceperl joined
[17:35] *** ccakes joined
[17:35] <ZoffixW> mojca, you can reproduce it with panda --force install Task::Star

[17:35] <mojca> What I *am* still "worried" about is a better way to install panda in our package manager

[17:35] *** dotness left
[17:35] <cygx> mojca: if it does happen again, you could try setting RAKUDO_MODULE_DEBUG=1

[17:35] <ZoffixW> In particular, it fails when installing Linenoise module

[17:36] <hoelzro> ZoffixW: is this related to that File::Find error that panda's been throwing? or is it something different?

[17:36] <ZoffixW> 0.o

[17:36] <ZoffixW> running panda install Linenoise did not show the error :/

[17:36] *** niceperl left
[17:36] <hoelzro> =/

[17:36] *** ggoebel7 joined
[17:36] <mojca> ZoffixW, no it no longer fails

[17:36] <ZoffixW> Or rather RAKUDO_MODULE_DEBUG=1 panda --force install Linenoise

[17:37] <ZoffixW> hoelzro, I think it's different. The File::Find error is just panda aborting the install the moment it encounters an installed module

[17:37] <ZoffixW> (instead of just proceeding further)

[17:38] <stmuk> .tell [ptc] yay updating docs.perl6.org .. BTW *.un~ is a vim undo file which my .vimrc has enabled

[17:38] <yoleaux> stmuk: I'll pass your message to [ptc].

[17:38] <mojca> ZoffixW, thanks. But I still get a successful run (with lots of output that would otherwise be helpful though)

[17:39] *** ccakes left
[17:39] <ZoffixW> mojca, I just nuked .rakudobrew and .perl6 and trying again

[17:39] <ZoffixW> From scratch

[17:40] <mojca> but I admit that I'm confused because I didn't change anything in my installation since yesterday when it was failing

[17:40] <mojca> Linenoise got a few commits in the meantime though

[17:41] *** itaipu left
[17:42] *** lucasb left
[17:45] <mojca> ZoffixW, which File::Find error are you talking about?

[17:45] <hoelzro> I just made one commit to Linenoise to fix it last night

[17:46] <hoelzro> it was working then =/

[17:46] <hoelzro> ZoffixW: what's the failure look like?

[17:48] <ZoffixW> hoelzro, "===SORRY!=== P6M Merging GLOBAL symbols failed: duplicate definition of symbol Panda"

[17:48] <hoelzro> yikes

[17:48] <hoelzro> that's (hopefully) not Linenoise's fault

[17:48] <hoelzro> it's probably got something to do with Build.pm

[17:48] <ZoffixW> hoelzro, but then I re-ran panda --force install Linenoise and it installed fine, so I'm 99.999999999% sure it's the issue in panda

[17:48] <ZoffixW> (or lower up the food chain)

[17:48] <hoelzro> ZoffixW++ # shaking out bugs in tooling

[17:49] <mojca> What's the role of "--norc" in lib/Panda/Tester.pm?

[17:49] <mojca> Is that a compiler flag?

[17:49] <dalek> ecosystem/add-inline-ruby: a4086f7 | (Brock Wilcox)++ | META.list:

[17:49] <dalek> ecosystem/add-inline-ruby: Add Inline::Ruby

[17:49] <dalek> ecosystem/add-inline-ruby: review: https://github.com/perl6/ecosystem/commit/a4086f77a7

[17:49] <Skarsnik> Inline::Ruby wow x)

[17:49] <ZoffixW> oh, sweet

[17:49] <awwaiid> it only barely works :)

[17:49] <MadcapJake> ZoffixW: force installing Task::Star got farther than not forcing but crashes at p6doc "P6M Merging GLOBAL symbols failed: duplicate definition of symbol Panda

[17:49] <awwaiid> but you can: EVAL 'puts "Hello!"', :from<Ruby>

[17:50] <ZoffixW> MadcapJake, yeah, though running a lone panda --force install Linenoise works

[17:50] <MadcapJake> yeah, is there a lone p6doc install?

[17:50] <ZoffixW> panda --force install p6doc

[17:51] <TimToady> lizmat: re 6d, no, we're not gonna switch to 6d till we're good and ready for Diwali; we can have 6.c.0 etc first if we really need intermediate language revisions; a feature-based approach also sounds sane, with the tradeoff of an infelicitous number of feature declarations that later want to be removed

[17:52] <lizmat> TimToady: so I guess we should be moving to 6.c.0 asap then ?

[17:52] <ZoffixW> mojca, this one https://gist.github.com/zoffixznet/e3b2d05d53414e5dbe43 but it's not a File::Find error but a panda error reported here: https://github.com/tadzik/panda/issues/274

[17:52] <TimToady> let's get jnthn's input before we do anything rash

[17:52] *** Tonik left
[17:53] <TimToady> use experimental is already a step in the features direction

[17:53] *** ellybelly left
[17:53] *** ellybelly_ left
[17:53] *** ellybelly_ joined
[17:53] *** ellybelly joined
[17:53] <lizmat> ok

[17:54] <TimToady> in fact, I'm hard put to figure out how experimental isn't already a features pragma

[17:55] <TimToady> in a sense, everything we put in between now and diwali is experimental anyway, and could get yanked out or modified

[17:55] <MadcapJake> is there any way to bypass the reader that p6doc opens?

[17:55] *** ccakes joined
[17:56] <ZoffixW> awwaiid, how come it's a PR and not an actual addition to ecosystem?

[17:56] * ZoffixW is ready to brag on Twitter ^_^

[17:57] *** tonye joined
[17:57] <dalek> rakudo/nom: 64c6e00 | (Sylvain Colinet)++ | / (2 files):

[17:57] <dalek> rakudo/nom: NC: fix and add other sanity check

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64c6e006c8

[17:57] <dalek> rakudo/nom: b4be44c | lizmat++ | / (2 files):

[17:57] <dalek> rakudo/nom: Merge pull request #664 from Skarsnik/nom

[17:57] <dalek> rakudo/nom: 

[17:57] <dalek> rakudo/nom: NC: fix and add other sanity check

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b4be44cc4d

[17:58] *** rindolf left
[17:58] <awwaiid> ZoffixW: *shrug*. Here, I'll merge

[17:58] <Zero_Dogg> are there any other database (mysql) interfaces than DBIish? DBIish is segfaulting on my pi

[17:58] <dalek> ecosystem: a4086f7 | (Brock Wilcox)++ | META.list:

[17:58] <dalek> ecosystem: Add Inline::Ruby

[17:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a4086f77a7

[17:58] <dalek> ecosystem: 9f900eb | (Brock Wilcox)++ | META.list:

[17:58] <dalek> ecosystem: Merge pull request #107 from perl6/add-inline-ruby

[17:58] <dalek> ecosystem: 

[17:58] <dalek> ecosystem: Add Inline::Ruby

[17:59] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9f900ebe4d

[17:59] *** itcharlie1 joined
[17:59] <ZoffixW> awwaiid++

[17:59] <awwaiid> ZoffixW: I don't know that it works on any machine but mine

[17:59] *** itcharlie left
[18:00] *** ccakes left
[18:00] <ZoffixW> awwaiid, it's a start :)

[18:00] <ZoffixW> \o/ https://twitter.com/zoffix/status/682259926261997568

[18:00] <Skarsnik> Zero_Dogg, there is sqlite and Pg?

[18:01] <Zero_Dogg> Skarsnik: hehe, true, but I need to talk to an existing mysql-based app

[18:01] <[Coke]> TimToady: (everything between now and diwali is experimental) but we can't rely on it being implicitly experimental in a 6.c release. has to be declared experimental, I think.

[18:01] *** Ven joined
[18:02] *** shicheng joined
[18:02] *** Arrowhead left
[18:02] <[Coke]> where 6.c release is shorcut for "a rakudo release targeting 6.c"

[18:02] <TimToady> well, there are probably gradations; some things are obviously just bug fixes

[18:03] <TimToady> like if I fix the loop outer context thing, that's not experimental, it's just something shoulda worked in the first place

[18:03] *** tonye left
[18:03] <[Coke]> oh, sure. it's just going to be on us to actually review everything before the release to make sure we're doing the right thing. (whatever that is)

[18:04] <[Coke]> torturing releng on behalf of the users.

[18:04] *** sprocket joined
[18:04] <TimToady> we've already tortured the users about as much as we can in one month :)

[18:05] <lizmat> so, generalizing IO::ArgFiles functionality into IO::CatPath/CatHandle, in which category does that fall if there are no spectest failures

[18:05] <TimToady> though fortunately it's still mostly early adopters and pioneers getting burned :)

[18:05] *** shicheng left
[18:05] <awwaiid> TimToady: the month rolls over soon and we can ramp up the torture again

[18:06] <nine> yeah torture!

[18:06] <ZoffixW> no moar torture :o

[18:06] <lizmat> so you can do <a b c>.IO.lines to get the lines of files a, b and c in one loop?

[18:06] <diakopter> bring on the pain

[18:06] <dalek> rakudo/nom: c268635 | coke++ | docs/release_guide.pod:

[18:06] <dalek> rakudo/nom: Make sure we're testing Christmas too

[18:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c268635f5f

[18:06] *** shicheng joined
[18:06] <nine> b2gills: thanks for the hint about your 64 bit IV on 32 bit. It prompted me to implement a proper solution and it's much easier than I feared :)

[18:06] *** itcharlie1 left
[18:07] *** andreoss left
[18:07] <perlpilot> lizmat: "experimental feature" until there are spectests :)

[18:07] <Skarsnik> nine, what did you do? I am curious

[18:07] <awwaiid> lizmat: maybe <a b c>.>>IO.>>lines ?

[18:07] <ZoffixW> Is there a more elegant way to write this code? I thought there was something with |c and things:      method irc-privmsg-me ($irc, $e) { me($irc, $e); }

[18:07] <Skarsnik> Zero_Dogg, do you have an output with the segfault?

[18:07] *** shicheng left
[18:08] <perlpilot> btw, awwaiid++  (Inline::Ruby)

[18:08] <Skarsnik> Zero_Dogg, and you can run perl6-gbd-m I think, to have more info

[18:08] *** shicheng joined
[18:08] <lizmat> awwaiid: that would work for lines, but not for .words or .comb or .split

[18:08] <nine> Skarsnik: will push a commit soon, but have to run for groceries before the shop closes

[18:09] *** shicheng left
[18:10] <TimToady> the real question to my mind is whether we need to split into an experimental dev track and a bug-fix-only maintenance track at some point

[18:10] *** shicheng joined
[18:11] *** shicheng left
[18:12] *** shicheng joined
[18:12] <ZoffixW> mojca, I can still reproduce the Linenoise panda failure with this set of commands: https://gist.github.com/zoffixznet/72a98c866a54e91e8207

[18:12] <ZoffixW> mojca, here's the output of the entire run: https://gist.github.com/zoffixznet/6a6f12e3b5139e4daead

[18:12] <MadcapJake> why does the p6doc file in /home/jrusso/.rakudobrew/moar-nom/install/share/perl6/site/bin completely different from the p6doc file in the github repo?

[18:13] <Zero_Dogg> Skarsnik: it's segfaulting on mysql_send_query according to the backtrace

[18:13] *** shicheng left
[18:13] <[Coke]> TimToady: ayup

[18:13] <hoelzro> MadcapJake: is the installed one a wrapper that uses resources to find the actual script?

[18:13] <ZoffixW> mojca, this is on a Debian GNU/Linux 7.9 (wheezy) 4.1.5-x86_64-linode61 #7 SMP Mon Aug 24 13:46:31 EDT 2015 x86_64 GNU/Linux

[18:13] <[Coke]> I think it's just a question of when.

[18:13] <perlpilot> TimToady: what [Coke] said.

[18:13] *** shicheng joined
[18:13] * TimToady should go reread jnthn's doc, however

[18:14] <Skarsnik> Zero_Dogg, can you paste the full backtrace?

[18:14] <MadcapJake> hoelzro: where is the one from the repo then? `locate p6doc` only gives me the wrapper script

[18:14] <Zero_Dogg> Skarsnik: sure, give me a minute

[18:14] <hoelzro> MadcapJake: it's probably got a SHA as its name

[18:14] <[Coke]> TimToady: if we have a plan by the end of the first week of january, we're fine.

[18:14] <hoelzro> MadcapJake: look for eaf6b11d202a0b88de9ae481b28b57019e49bbed, case insensitive

[18:14] <[Coke]> (we'll be fine))

[18:15] *** rindolf joined
[18:15] <TimToady> .oO(we need an epiphany by Epiphany...)

[18:15] <Skarsnik> a week in the middle of holiday seems not enought x)

[18:15] *** shicheng left
[18:15] <rindolf> TimToady: which Epiphany?

[18:15] <Zero_Dogg> Skarsnik: http://pastebin.com/ABV2tbUr

[18:16] <MadcapJake> hoelzro: not finding that, if this isn't my preferred route for trying to hack on p6doc, then can panda install a local module? or would I have to install it myself?

[18:16] <TimToady> whosever is most convenient, obviously

[18:17] <TimToady> and why is the word "whosever" missing from English, anyway?

[18:18] <Skarsnik> Zero_Dogg, that's instering there not send_query nor real_query in dbish binding for mysqlclient x)

[18:19] <hoelzro> MadcapJake: if you open up /home/jrusso/.rakudobrew/moar-nom/install/share/perl6/site/bin/p6doc, what's there?

[18:19] <hoelzro> panda is capable of installing local modules, if that's what you want

[18:19] <Zero_Dogg> Skarsnik: strange

[18:19] *** Ox0dea joined
[18:20] <MadcapJake> hoelzro: that's the wrapper script on my machine

[18:20] <Ox0dea> m: say True.succ # Why no Boolean ring?

[18:20] <camelia> rakudo-moar c26863: OUTPUT¬´True‚ê§¬ª

[18:20] <hoelzro> I figured =/

[18:20] *** domidumont joined
[18:20] <MadcapJake> hoelzro: yeah i want to try and add an option to p6doc to print to stdout instead of wrapping in a pager

[18:20] <Zero_Dogg> Skarsnik: all I'm doing is preparing a select and then execute()ing it, and on the execute the segfault is triggered

[18:21] *** shicheng joined
[18:21] <ZoffixW> TimToady, it's not :) http://dictionary.reference.com/browse/whosever

[18:21] <hoelzro> I see; you should probably stick with doing a local panda install

[18:21] <hoelzro> you can do panda install /path/to/module

[18:21] <Skarsnik> Zero_Dogg, I will look after dinner x)

[18:21] <Zero_Dogg> Skarsnik: almost all mysql tests are failing as well, so I'm guessing it's having trouble with arm

[18:21] <Zero_Dogg> Skarsnik: hehe, goodie

[18:22] <Ox0dea> ZoffixW: What'd I miss?

[18:22] <MadcapJake> hoelzro: cool, thanks! I'll give that a go!

[18:22] <ZoffixW> Ox0dea, <TimToady> and why is the word "whosever" missing from English, anyway?

[18:22] <Ox0dea> Ah.

[18:22] *** mojca left
[18:22] *** shicheng left
[18:22] * TimToady fires his dictionary

[18:22] <ZoffixW> :P

[18:22] <Ox0dea> I still which we had a better possessive form for "which".

[18:22] <Ox0dea> *still wish

[18:22] <Skarsnik> Zero_Dogg, test for mysql need a root access without password, there is no way they could work on a real install, Don't worry :)

[18:22] *** rindolf left
[18:22] <Ox0dea> "Whose" for non-people is weird, and "which's" looks funny.

[18:23] <Zero_Dogg> Skarsnik: ah, that explains that at least

[18:23] <dalek> rakudo/nom: 630a9b2 | lizmat++ | / (9 files):

[18:23] <dalek> rakudo/nom: Add IO::CatPath/CatHandle, remove IO::ArgFiles

[18:23] <dalek> rakudo/nom: 

[18:23] <dalek> rakudo/nom: Basically generalize and expand the functionality of IO::ArgFiles

[18:23] <dalek> rakudo/nom: into a generic IO::CatPath and IO::CatHandle class.  Features:

[18:23] <dalek> rakudo/nom: 

[18:23] <dalek> rakudo/nom: - $*ARGFILES is initialized using IO::CatHandle the same way it was

[18:23] <dalek> rakudo/nom:   before (assume strings are file names, use $*IN if no strings given)

[18:23] <dalek> rakudo/nom: - apart from .lines, can now also do .words, .comb, .split, and

[18:23] <dalek> rakudo/nom:   .Supply or any other IO::Handle method that relies on .read or

[18:23] <dalek> rakudo/nom:   .readchars.

[18:23] <dalek> rakudo/nom: - List.IO creates IO::CatPath, for easy streaming of multiple files.

[18:23] <dalek> rakudo/nom: 

[18:23] <dalek> rakudo/nom: Done as a single commit, that can be reverted/reapplied/trashed once

[18:23] <dalek> rakudo/nom: we figure out how we're going to do new features and we reached a

[18:23] <dalek> rakudo/nom: decision on this.  FWIW, I intended this to happen before 6.c, but

[18:23] <dalek> rakudo/nom: LPW Keynote and ~10 days of illness made this impossible  :-(

[18:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/630a9b20f9

[18:23] *** silasmariner joined
[18:24] <TimToady> Ox0dea: re Boolean rings, it was deemed to be more useful to have an idempotent $flag++ and $flag-- to turn $flag true or false, respectively

[18:24] <silasmariner> m: say ([+] map {$_ ** $_}, 1..1000).comb[*-10..*-1].join  ;   say ([+] map * ** *, 1..1000).comb[*-10..*-1].join

[18:24] <camelia> rakudo-moar c26863: OUTPUT¬´9110846700‚ê§6211390700‚ê§¬ª

[18:24] <TimToady> and no other enums guarantee any kind of modularity

[18:24] *** rindolf joined
[18:25] <TimToady> though I suppose traits could happen

[18:25] *** yqt left
[18:25] <silasmariner> shouldn't the whatever-stars give the same as the $_'s there?

[18:25] *** virtualsue joined
[18:25] <TimToady> whatever is not equivalent to $_, in general

[18:25] *** CIAvash left
[18:25] <dalek> roast: d042e87 | lizmat++ | S02-types/WHICH.t:

[18:25] <dalek> roast: Remove IO::ArgFiles now, until decision on 630a9b2

[18:25] <dalek> roast: review: https://github.com/perl6/roast/commit/d042e87ed5

[18:25] <TimToady> unless you change the number of {}

[18:26] <silasmariner> TimToady: oh right. I'll go read up more on that

[18:26] <ZoffixW> silasmariner, no, because the second WhateverStar is not the same as first

[18:26] <TimToady> and...that too

[18:26] <silasmariner> tnx

[18:26] <ZoffixW> silasmariner, in the first case, the first iteration is 1 ** 1, in the second case it's 1 ** 2

[18:26] <ZoffixW> s/iteration/example above/;

[18:26] <silasmariner> gotcha. It sorta iterates, then

[18:26] <ZoffixW> err

[18:26] <TimToady> whatever stars are more like { $^a ** $^b }

[18:26] <ZoffixW> s/example above/iteration/; s/case/example above/; -_-

[18:27] <Ox0dea> TimToady: Exactly equivalent to, no?

[18:27] <TimToady> depends on the operator

[18:27] <TimToady> for **, sure

[18:27] <TimToady> they're not completely interchangeable

[18:28] <ugexe> whoever was having problems with panda needing to run install twice to work: its because the CU stuff passes around a cached file object instead of a path string

[18:28] <Ox0dea> m: say map { $_ + $_ }, [1,2,3,4]

[18:28] <camelia> rakudo-moar c26863: OUTPUT¬´(2 4 6 8)‚ê§¬ª

[18:28] <TimToady> *..* doesn't mean { $^a .. $^b } ferinstins

[18:28] <Ox0dea> m: say map * + * , [1,2,3,4] # silasmariner 

[18:28] <camelia> rakudo-moar c26863: OUTPUT¬´(3 7)‚ê§¬ª

[18:28] <TimToady> so if *..* is a koala, and ^..^ is a fox, what is *^..^* ?

[18:29] <silasmariner> A bat?

[18:29] <TimToady> I can see that...

[18:29] <ZoffixW> Why does this say "Variable '$channel' is not declared. Did you mean 'Channel'?"  I got it in the sig! https://gist.github.com/zoffixznet/0eab66da3da94957c802

[18:29] <perlpilot> a fox with ear muffs

[18:29] <TimToady> a foxbat?

[18:29] <ZoffixW> TimToady, looks like a pig to me :P

[18:30] <silasmariner> foxbatpig

[18:30] <perlpilot> ZoffixW: you've got syntax error in the sig

[18:30] <Ox0dea> It's Pikachu!

[18:31] *** lnrdo left
[18:31] <ZoffixW> perlpilot, ah. I thought the comma-less named args could be used anywhere

[18:31] *** lnrdo joined
[18:32] <ugexe> is there a way we could make IO::Path with an option to not cache specific instances?

[18:32] <RabidGravy> can I define a CArray of a certain length in a CUnion?  somethings telling me no, but I thought I'd ask

[18:33] *** captain-adequate joined
[18:33] <ZoffixW> m: say DateTime.new: :2015years :12months :31days :23hours :59minutes :59seconds

[18:33] <camelia> rakudo-moar 630a9b: OUTPUT¬´Cannot make a DateTime object using .new‚ê§  in block <unit> at /tmp/g5VJ2Cbpb4 line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at /tmp/g5VJ2Cbpb4 line 1‚ê§‚ê§¬ª

[18:33] <ugexe> other than stringifying it on a per-use basis that is

[18:33] <ZoffixW> say DateTime.new: :2015year :12month :31day :23hour :59minute :59second

[18:33] <ZoffixW> well... the latter one works. LTA error

[18:34] *** nige1 left
[18:34] <ZoffixW> Hm

[18:35] *** llfourn left
[18:35] <ZoffixW> I guess it can be ignored, but my concern is .later *does* take plurals as args, which is where my confusion came from

[18:35] <perlpilot> speaking of LTA ... If I say "use DateTime;", why does rakudo bark at me?   Isn't it the same as if I'd said "use Test; use Test;"?  (i.e. it's already there, so using it again is a no-op)

[18:35] *** aigan left
[18:36] <ZoffixW> perlpilot, Test is a module. DateTime is a type

[18:36] *** aigan joined
[18:36] <lizmat> ZoffixW: good catch

[18:36] <awwaiid> Is there a difference between Pointer and OpaquePointer?

[18:36] <ZoffixW> m: say DateTime.new: :2015year :12months :31days :23hours :59minutes :59seconds

[18:36] <camelia> rakudo-moar 630a9b: OUTPUT¬´2015-01-01T00:00:00Z‚ê§¬ª

[18:37] <ZoffixW> lizmat, ^ that's even worse :P

[18:37] <perlpilot> ZoffixW: for the sake of argument, DateTime doesn't *have* to be built-in.  It *could* be a module that is used.   Why not make the built-ins behave the same as other modules?

[18:37] <lizmat> you mean, the lack of comma's makes the rest of the named disappear ?

[18:38] *** yurivish_ joined
[18:38] <ZoffixW> lizmat, no, the 'year' is singular and the rest are plurals. What .new sees is I provided a single arg‚Äîyear‚Äîbecause it's not watching for plural args

[18:38] <lizmat> ah, ok, gotcha

[18:39] *** FROGGS left
[18:39] <lizmat> m: say DateTime.new: :2015year :12month :31days :23hours :59minutes :59seconds

[18:39] <camelia> rakudo-moar 630a9b: OUTPUT¬´2015-12-01T00:00:00Z‚ê§¬ª

[18:39] <lizmat> ok

[18:39] * lizmat is fixing

[18:39] <AlexDaniel> m: my $link = ‚Äòtest‚Äô; my $bar = ‚ÄòZZZ‚Äô; $link ~~ s{ $ } = $bar; say $link

[18:39] <camelia> rakudo-moar 630a9b: OUTPUT¬´WARNINGS for /tmp/WfNIQ8CpRP:‚ê§Useless use of $bar in sink context (line 1)‚ê§testZZZ‚ê§¬ª

[18:39] <ZoffixW> lizmat++

[18:39] <AlexDaniel> TimToady: ‚Üë useless ‚Äúuseless use of‚Äù warning

[18:39] *** regreg joined
[18:40] <ZoffixW> perlpilot, I could counter that argument with: having a module named DateTime conflicts with type DateTime... What's called when DateTime.new is called? 

[18:40] <TimToady> hmm

[18:40] *** Begi left
[18:40] <ZoffixW> perlpilot, the barkage is a recent addition, I think if you backlog like 2-20 hours back, you'll see a discussion on this

[18:40] *** cooper_ is now known as cooper

[18:42] *** pierre-vigier joined
[18:43] *** Arrowhead joined
[18:43] <bbkr> Skarsnik: your "Meh fix" in NC works :)

[18:43] <pochi> m: my $a = method () {}; $a.set_name("bar"); $a.^methods;

[18:43] <camelia> rakudo-moar 630a9b: ( no output )

[18:43] <pochi> m: my $a = method () {}; $a.set_name("bar"); say $a.^methods;

[18:43] <camelia> rakudo-moar 630a9b: OUTPUT¬´(gist <anon> <anon> <anon> soft <anon> <anon> yada perl <anon> onlystar candidates unwrap wrap <anon> <anon> package leave <anon> <anon> cando <anon> <anon> <anon> <anon> multi <anon> <anon> add_phaser phasers assuming WHY set_why perl of <anon> returns fi‚Ä¶¬ª

[18:44] *** zed00 joined
[18:44] <TimToady> AlexDaniel: I was pasting that to the command line, and noticed the single quotes just as I was hitting return, so expected it to parsefail, but it didn't, because smartquotes++

[18:45] <dalek> Inline-Perl5: a3f7a29 | (Stefan Seifert)++ | / (2 files):

[18:45] <dalek> Inline-Perl5: Remove remaining difference of types between C and Perl 6 code

[18:45] <dalek> Inline-Perl5: 

[18:45] <dalek> Inline-Perl5: We now determine at compile time the size of a Perl 5 IV in C code and use

[18:45] <dalek> Inline-Perl5: the corresponding int32/int64.

[18:45] <dalek> Inline-Perl5: This should finally fix all 32 bit issues. If your IV is 16 bits, please just

[18:45] <dalek> Inline-Perl5: go away. If your IV is 128 bits, remember that donating such a machine to me

[18:45] <dalek> Inline-Perl5: may improve your chances for support!

[18:45] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/a3f7a29037

[18:45] <nine> Skarsnik: ^^^

[18:45] <ZoffixW> nine++ nice commit message :P

[18:45] <AlexDaniel> TimToady: yeah, that's one of the reasons I use these quotes

[18:46] *** lucasb joined
[18:46] *** FritzZaucker joined
[18:46] *** pierre-vigier left
[18:46] <El_Che> nine: great commit msg ;)

[18:47] <ZoffixW> El_Che, do you play Warframe? I could've swore I played with someone with your nick name the other day

[18:47] * flussence has a bashrc-updating command that uses those quotes to horribly effective effect:

[18:47] <flussence> ./perl6 -e 'put ‚ÄúPATH="{$*VM.config<bindir>}:{$*REPO.repo-chain[1].writeable-path.child(‚Äòbin‚Äô)}:\$PATH"‚Äù'

[18:47] <AlexDaniel> TimToady: well, let's just hope that shells will not support unicode quotes ever :D

[18:47] <AlexDaniel> though ‚Äò ‚Äò ‚Äô ‚Äô case should work fine if they do that correctly‚Ä¶

[18:48] <AlexDaniel> m: say ‚Äúhello ‚Äúworld‚Äù‚Äù

[18:48] <camelia> rakudo-moar 630a9b: OUTPUT¬´hello ‚Äúworld‚Äù‚ê§¬ª

[18:48] *** hankache joined
[18:49] <lucasb> m: @*ARGS = '/dev/null'; say $*ARGFILES.lines(5)

[18:49] <camelia> rakudo-moar 630a9b: OUTPUT¬´(Nil Nil Nil Nil Nil)‚ê§¬ª

[18:49] <ZoffixW> That's crazy

[18:49] <FritzZaucker> I'll try again: The following NCurses example is working: https://gist.github.com/zaucker/aa14025a16edcd671e25 whereas a similar one using a supply doesn't properly display the text: https://gist.github.com/zaucker/0290915997b1ddc3ad53 after a few iterations. 

[18:49] <ZoffixW> m: say "foo "foo""

[18:49] <camelia> rakudo-moar 630a9b: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/frKLqc6rfP‚ê§Two terms in a row‚ê§at /tmp/frKLqc6rfP:1‚ê§------> 3say "foo "7‚èè5foo""‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§        sta‚Ä¶¬ª

[18:49] <ZoffixW> :(

[18:49] <El_Che> ZoffixW: nope. I played 1998 commandos yesterday though ;)

[18:49] *** zakharyas left
[18:49] <ZoffixW> Must've been someone else then :)

[18:49] <dalek> Inline-Perl5: e0ae715 | (Stefan Seifert)++ | META.info:

[18:49] <dalek> Inline-Perl5: Version 0.2

[18:49] <dalek> Inline-Perl5: 

[18:49] <dalek> Inline-Perl5: Raising version to make it easier for people to upgrade.

[18:49] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/e0ae715dc0

[18:50] <AlexDaniel> ZoffixW: crazy? Well :)

[18:50] <lizmat> m: say Date.new: :2015year :12months :31days   # ZoffixW: same issue

[18:50] <camelia> rakudo-moar 630a9b: OUTPUT¬´2015-01-01‚ê§¬ª

[18:50] <yurivish_> is there a simple way to turn a list (1, 2, 3) into a hash (1 => True, 2 => True, 3 => True)?

[18:50] <ZoffixW> m: say Date.new( :2015year ).later: :12months :31days

[18:50] <camelia> rakudo-moar 630a9b: OUTPUT¬´More than one time unit supplied‚ê§  in block <unit> at /tmp/0awjr1sxRH line 1‚ê§‚ê§¬ª

[18:50] <ZoffixW> m: say Date.new( :2015year ).later: :12months

[18:50] <camelia> rakudo-moar 630a9b: OUTPUT¬´2016-01-01‚ê§¬ª

[18:50] <ZoffixW> wat

[18:50] <timotimo> yurivish_: many ways. among them you can use (1, 2, 3) X=> True

[18:50] <ZoffixW> oh right

[18:51] <AlexDaniel> m: say %{(1, 2, 3) Z True}

[18:51] <camelia> rakudo-moar 630a9b: OUTPUT¬´Odd number of elements found where hash initializer expected‚ê§  in block <unit> at /tmp/LUasxrayho line 1‚ê§‚ê§¬ª

[18:51] <Skarsnik> nine, nice :)

[18:51] *** Ox0dea left
[18:51] <yurivish_> timotimo: oh, I didn't think of that. cute. I was trying to assign into a hash variable, but that pairs the items up

[18:51] *** cdg left
[18:51] <lizmat> m: dd (1,2,3).Set

[18:51] <camelia> rakudo-moar 630a9b: OUTPUT¬´set(3,1,2)‚ê§¬ª

[18:51] <lizmat> yurivish_: sure you don't want Set ?  ^^^

[18:51] <yurivish_> and set is actually what I want in this case, yeah :)

[18:52] <ugexe> m: my @x; @x>>.Int; say @x>><xxx>

[18:52] <camelia> rakudo-moar 630a9b: OUTPUT¬´()‚ê§¬ª

[18:52] <masak> m: dd set 1, 2, 3

[18:52] <camelia> rakudo-moar 630a9b: OUTPUT¬´set(3,1,2)‚ê§¬ª

[18:52] <ugexe> m: my @x; say @x>><xxx>

[18:52] <camelia> rakudo-moar 630a9b: OUTPUT¬´This type does not support elems‚ê§  in block <unit> at /tmp/XSFl1r7PDw line 1‚ê§‚ê§¬ª

[18:52] <masak> m: dd set <1 2 3>

[18:52] <camelia> rakudo-moar 630a9b: OUTPUT¬´set(IntStr.new(1, "1"),IntStr.new(2, "2"),IntStr.new(3, "3"))‚ê§¬ª

[18:52] <yurivish_> what is dd?

[18:52] <ugexe> the first example does not error, but the second does

[18:52] <lizmat> yurivish_: tiny data dumper, so small, it even lost the t

[18:52] <ZoffixW> yurivish_, http://docs.perl6.org/routine/dd

[18:53] <nine> awwaiid: left some comments on your Inline::Python pull request

[18:53] <yurivish_> that looks incredibly useful

[18:53] <AlexDaniel> m: say 1, 2, 3 X=> True

[18:53] <camelia> rakudo-moar 630a9b: OUTPUT¬´(1 => True 2 => True 3 => True)‚ê§¬ª

[18:53] <Skarsnik> nine, ah now the test fail with real output

[18:53] <AlexDaniel> m: say 1, 2, 3 X<= True # haha

[18:53] <camelia> rakudo-moar 630a9b: OUTPUT¬´(True False False)‚ê§¬ª

[18:53] <AlexDaniel> m: say 1, 2, 3 X<=> True # haha

[18:53] <camelia> rakudo-moar 630a9b: OUTPUT¬´(Same More More)‚ê§¬ª

[18:54] <Skarsnik> nine, http://pastebin.com/44PSFp5e

[18:54] <yurivish_> also, what's the best way to look up documentation on things like operators, which are hard to search for?

[18:55] <AlexDaniel> yurivish_: doc.perl6.org

[18:55] <AlexDaniel> yurivish_: there's a search form on top right

[18:55] <ZoffixW> yurivish_, I usually consult http://docs.perl6.org/language/operators but I'm unsure it covers all of them

[18:55] <ZoffixW> The search is broken for many ops

[18:55] <yurivish_> searching for X seems a bit broken

[18:55] <ZoffixW> https://github.com/perl6/doc/issues/155

[18:55] <timotimo> well, it's a metaop, you see! :P

[18:55] <yurivish_> (i think it's cartesian-product, but wanted to check)

[18:56] <timotimo> but yeah ...

[18:56] <El_Che> doc is pretty good, but a work in progress. Once you fin

[18:56] <AlexDaniel> yurivish_: it is not broken, you just have to scroll down a bit‚Ä¶ :)

[18:56] <yurivish_> m: (1, 2) X (3, 4)

[18:56] <camelia> rakudo-moar 630a9b: OUTPUT¬´WARNINGS for /tmp/YwQzsrWgfV:‚ê§Useless use of "X" in expression "(1, 2) X (3, 4)" in sink context (line 1)‚ê§¬ª

[18:56] <El_Che> d something missing: PR

[18:56] *** ccakes joined
[18:56] <yurivish_> m: dd (1, 2) X (3, 4)

[18:56] <camelia> rakudo-moar 630a9b: OUTPUT¬´((1, 3), (1, 4), (2, 3), (2, 4)).Seq‚ê§¬ª

[18:56] <timotimo> well, PR or put it into TODO or MISSING

[18:56] <ZoffixW> yurivish_, what's the breakage? searching for X does give me a ton of results, but I do see it listed in the "Infix" section, linking to http://docs.perl6.org/routine/X

[18:56] <yurivish_> m: dd (1, 2) X (3, 4, 5)

[18:56] <camelia> rakudo-moar 630a9b: OUTPUT¬´((1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5)).Seq‚ê§¬ª

[18:56] *** silasmariner left
[18:57] <timotimo> m: dd <a b c> X~ <1 2 3>

[18:57] <camelia> rakudo-moar 630a9b: OUTPUT¬´("a1", "a2", "a3", "b1", "b2", "b3", "c1", "c2", "c3").Seq‚ê§¬ª

[18:57] <awwaiid> nine: awesomesauce, thanks! Comments addressed :)

[18:57] <ZoffixW> m: dd <a b c> X~ <1 2>

[18:57] <camelia> rakudo-moar 630a9b: OUTPUT¬´("a1", "a2", "b1", "b2", "c1", "c2").Seq‚ê§¬ª

[18:57] <ZoffixW> damn that's cool

[18:57] <yurivish_> ZoffixW: pressing X<enter> doesn't seem to do anything, and sometimes the menu doesn't come up (though I think that's because I'm on slow wifi), though there's no loading indicator or any indication something is happening

[18:58] *** SwellJoe left
[18:59] <autarch> it seems like the module loader _really_ doesn't like circular "use" - as in endless recursion

[18:59] *** kittenlips joined
[18:59] <ZoffixW> yurivish_, thanks. Created an issue for that. Might try to fix it sometime during New Years weekend https://github.com/perl6/doc/issues/295

[19:00] <autarch> and it's essentially a fork bomb (because of precomp being done in a child proc?)

[19:00] <yurivish_> awesome, thanks!

[19:00] <ZoffixW> autarch, that should be detected and error shown. That was fixed $x time ago

[19:00] <ZoffixW> Maybe a regression

[19:00] <AlexDaniel> yurivish_: search functionality is offline, if it does not show up then it is a bug

[19:00] <yurivish_> something good is coming of this slow wifi after all. I'm on a train.

[19:00] <lucasb> m: say +$*ARGFILES.lines(100)

[19:00] <camelia> rakudo-moar 630a9b: OUTPUT¬´100‚ê§¬ª

[19:00] <AlexDaniel> or am I wrong?

[19:00] <lucasb> star: say +$*ARGFILES.lines(100)

[19:00] <camelia> star-m 2015.09: OUTPUT¬´20‚ê§¬ª

[19:01] <dalek> roast: 991ff61 | lizmat++ | S32-temporal/DateTime.t:

[19:01] <dalek> roast: Remove warning

[19:01] <dalek> roast: review: https://github.com/perl6/roast/commit/991ff6161a

[19:01] *** espadrine left
[19:01] *** ccakes left
[19:02] <autarch> maybe it's time for me to try to hack on rakudo a bit

[19:02] <AlexDaniel> nah, I'm not wrong this time. This file contains everything: http://doc.perl6.org/js/search.js

[19:02] <ZoffixW> AlexDaniel, JS file loads after the page, so on slow conn it's possible to type "X" into search box and hit ENTER before it finished downloading and made the searchbox work. I think that's the issue at hand.

[19:02] <AlexDaniel> but if it is not loaded then you are going to see a loading icon in your browser

[19:02] <ZoffixW> AlexDaniel, loading icon where?

[19:02] <lucasb> lizmat: ^^ any idea on what should be the behavior from now on?

[19:03] <ZoffixW> AlexDaniel, like page loading thing?

[19:03] <AlexDaniel> ZoffixW: yes

[19:03] <lizmat> lucasb: there should be no change in $*ARGFILES behaviour

[19:03] <ZoffixW> I don't usually watch for it or wait for it to disappear before using the page :)

[19:03] <nine> Skarsnik: looks like some string issues

[19:03] <lizmat> it's just blessed into the IO::CatHandle class, instead of IO::ArgFiles

[19:04] *** zed00 left
[19:04] <ZoffixW> aktually

[19:04] <yurivish_> is the idioamtic way to check if a set contains an element $el eq any($set)?

[19:04] <lucasb> lizmat: what about the 20 vs 100 lines output above?

[19:04] <ZoffixW> AlexDaniel, you bring up a good point that we don't need a loading icon *while* searching...

[19:04] <lizmat> star: say $*IN.lines

[19:04] <camelia> star-m 2015.09: OUTPUT¬´(C√©ad sl√°n ag sl√©ibhte maorga Chontae Dh√∫n na nGall Agus dh√° ch√©ad sl√°n ag an Eireagal ard ina stua os cionn caor is coll; Nuair a ghluais mise thart le Loch Dh√∫n L√∫ich‚Äô go ci√∫in sa ghleann ina lu√≠ I mo dhiaidh bh√≠ gleannt√°in ghlas‚Äô Ghaoth Dob‚Ä¶¬ª

[19:05] <autarch> so what's the work around if I have two classes that require each other?

[19:05] <ZoffixW> yurivish_, yeah

[19:05] <lizmat> m: say $*IN.lines

[19:05] <camelia> rakudo-moar 630a9b: OUTPUT¬´(C√©ad sl√°n ag sl√©ibhte maorga Chontae Dh√∫n na nGall Agus dh√° ch√©ad sl√°n ag an Eireagal ard ina stua os cionn caor is coll; Nuair a ghluais mise thart le Loch Dh√∫n L√∫ich‚Äô go ci√∫in sa ghleann ina lu√≠ I mo dhiaidh bh√≠ gleannt√°in ghlas‚Äô Ghaoth‚Ä¶¬ª

[19:05] <ZoffixW> m: my @a = ^4; say 2 ~~ any @a

[19:05] <camelia> rakudo-moar 630a9b: OUTPUT¬´True‚ê§¬ª

[19:05] <autarch> like Foo has a Bar attr and Bar has a Foo attr

[19:05] *** uvtc_ joined
[19:05] <cygx> yurivish_: http://doc.perl6.org/routine/%28elem%29

[19:05] <lizmat> star: say $*IN.lines.elems

[19:05] <camelia> star-m 2015.09: OUTPUT¬´20‚ê§¬ª

[19:05] <lizmat> m: say $*IN.lines.elems

[19:05] <camelia> rakudo-moar 630a9b: OUTPUT¬´20‚ê§¬ª

[19:06] <ZoffixW> autarch, none that I know of. Last I needed to, the proposal was to use a   class Foo { ... }  stub. But that doesn't always work and complains that I didn't define the stub :(

[19:06] <lizmat> lucasb: looking into it

[19:06] <AlexDaniel> ZoffixW: we don't need a search icon before searching as well. ‚Äúsearch.js‚Äù is loaded with the rest of the page

[19:06] <autarch> oh, that's quite frustrating

[19:06] <lucasb> lizmat: thanks :)

[19:06] <yurivish_> cygx: that's awesome. I knew Julia used the unicode "in" operator but forgot all about it

[19:06] <uvtc_> Fresh rakudobrew install on Debian Testing. Unable to `panda install Readline`.

[19:06] <uvtc_> "In 'remove_history' routine declaration - Not an accepted NativeCall type for parameter [1]  : Int"

[19:06] <AlexDaniel> ZoffixW: so if you see that the page is still loading, well, you probably expect things not to work

[19:06] <dalek> rakudo/nom: 3dc7d55 | TimToady++ | src/Perl6/Actions.nqp:

[19:06] <dalek> rakudo/nom: RHS of subst needs to be wanted harder

[19:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3dc7d5503f

[19:07] <TimToady> AlexDaniel++

[19:07] <dalek> Inline-Python: 22b5fc9 | (Brock Wilcox)++ | / (3 files):

[19:07] <dalek> Inline-Python: Teach EVAL how to :from<Python>

[19:07] <dalek> Inline-Python: 

[19:07] <dalek> Inline-Python: Plus a bonus .gitignore

[19:07] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/22b5fc92bd

[19:07] <AlexDaniel> TimToady: nice! Did not expect it to be fixed so fast :)

[19:07] <cygx> .oO( where's the script that replaces all Texas variants of operators with the unicode onces? )

[19:07] <nine> awwaiid: ^^^ rebased a little

[19:08] <TimToady> well, part of the problem is that I didn't want to mark every single node as WANTED, so I set up a two-tiered system where only "important" nodes are marked by wanted(), and we use WANTED() to force it

[19:08] <yurivish_> AlexDaniel: ZoffixW: I think if you put search.js in the head of the page, it will load it before continuing? at any rate, it'll start loading it faster

[19:08] <TimToady> but sometimes something like a variable needs the mark

[19:08] <awwaiid> nine: did you mostly just squash them into one commit?

[19:08] <lizmat> ZoffixW: looking at the doc, years, months etc, are *not* documented as being valid

[19:08] <gfldex> m:  dd (5,6 Z‚àà ((1..100).pick(10),5).Set)

[19:08] <yoleaux> 14:30Z <hankache> gfldex: i'll try it during the evening

[19:08] <camelia> rakudo-moar 630a9b: OUTPUT¬´(Bool::True, Bool::False).Seq‚ê§¬ª

[19:09] <TimToady> we should probably move the wanted flag into the node structure at some point to make it cheaper, and just mark everything

[19:09] <gfldex> m:  dd any(5,6 Z‚àà ((1..100).pick(10),5).Set)

[19:09] <camelia> rakudo-moar 630a9b: OUTPUT¬´Method 'name' not found for invocant of class 'Bool'‚ê§  in any  at gen/moar/m-Metamodel.nqp line 3124‚ê§  in block <unit> at /tmp/aZSNAHO1wm line 1‚ê§‚ê§¬ª

[19:09] <yurivish_> that way whenever the search box is visible, it is functional

[19:09] <ZoffixW> yurivish_, no, the whole page would start loading much slower :P

[19:09] <ZoffixW> AlexDaniel, it's not an icon I'm adding but a...

[19:09] * ZoffixW git commits

[19:09] <nine> awwaiid: mostly

[19:10] <dalek> doc: 95647e9 | (Zoffix Znet)++ | template/ (2 files):

[19:10] <dalek> doc: Provide indication the search feature is still loading (Closes #295)

[19:10] <dalek> doc: review: https://github.com/perl6/doc/commit/95647e9d86

[19:10] <yurivish_> sure, a little. it's 12kb zipped.

[19:10] <awwaiid> nine: I'll try to remember you like 'em squished for next time (I tend away from squashing/rebasing myself -- lots of commits reminds me of how I got there in the end)

[19:10] <yurivish_> and the price of a network request.

[19:10] <AlexDaniel> ZoffixW: fine!

[19:10] <yurivish_> but the contents will get cached after the first load

[19:10] <ZoffixW> :(

[19:11] <nine> awwaiid: used to think so myself, but have never actually had any advantage of having the mistakes in the history

[19:12] <awwaiid> nine: yeah, I can see that. I think I'm just a data hoarder

[19:12] <uvtc_> Anyone else currently unable to panda install Readline? Known problem?

[19:12] <AlexDaniel> ZoffixW: yeah, I'm kinda thinking that, um, are you sure that the ‚ÄúLoading‚Ä¶‚Äù text will be replaced?

[19:13] <AlexDaniel> ZoffixW: ah yeah, that's what .attr does

[19:13] <AlexDaniel> ZoffixW: sorry :)

[19:13] <ZoffixW> :)

[19:13] <ZoffixW> uvtc_, what's the error

[19:14] <_sri> lizmat: just seen your comment at http://blogs.perl.org/users/jt_smith/2015/12/christmas-came-bah-humbug.html#comment-1644965

[19:14] <lizmat> _sri: did it make sense ?

[19:14] <_sri> lizmat: you mention specifically "event driven programming using supplies / async sockets / async file IO", why would that be faster in perl6 than perl5?

[19:15] <lizmat> well, syntactically, I don't think you can beat react / whenever / supply

[19:15] <lizmat> but from a performance point of view, it is really threaded

[19:16] *** SwellJoe joined
[19:16] <_sri> that only makes it sound like it should be bad for performance

[19:16] <lizmat> now, I'm not sure how Mojo handles this precisely, but I was under the impression that that was a select loop basically ?

[19:16] <Su-Shee> if I could log into blogs.perl.org I would give a business reason or two.. but I can't. 

[19:16] <uvtc_> ZoffixW: Error when trying to panda install Readline: https://gist.github.com/uvtc/03304823f8d03b3931f2

[19:16] <_sri> lizmat: mojolicious uses libev for scaling

[19:17] <ZoffixW> lizmat, yeah, it's not. I guess the best approach is to ignore this for now, unless more people experience my confusion, which is assuming plurals work for .new, just as they do for .later and not getting any errors when trying to use them in .new

[19:17] <lizmat> _sri: I didn't know that

[19:18] <Skarsnik> Zero_Dogg, still here? You can paste your code somewhere too?

[19:18] <_sri> lizmat: honestly, i would be very surprised if you could get close anytime soon performance wise

[19:18] <AlexDaniel> ‚ÄúPerl 6 is a bit sexier than Perl 5‚Äù. A *bit*. Right

[19:18] <ZoffixW> uvtc_, how old is your rakudo? I've seen a whole ton of NC fixes flying in in the past 20 hours

[19:18] <lizmat> _sri: well, we're going to try, that's for sure  :-)

[19:18] <lizmat> Su-Shee: if you want, I could channel you  :-)

[19:19] <flussence> I think, given node decided libuv is good enough for them, we can do pretty well with it too.

[19:19] <_sri> allright, was wondering if there was some async magic sauce i might have missed :)

[19:19] <uvtc_> ZoffixW: Just rm -f'd my ~/.rakudobrew and ~/.perl6 dirs. It's brand new.

[19:19] <lizmat> _sri: I think you're pretty much aware of everything going on here  :)

[19:19] <Su-Shee> lizmat: well I have an account and I'd love to write something useful. ;) anyways. the business case IMHO is "data". I usally sell perl6 is for text what julia is for numbers. 

[19:19] <ZoffixW> uvtc_, weird. Maybe Skarsnik would know. They were hacking on NC today

[19:20] <uvtc_> ZoffixW: Just curious, what's "NC"?

[19:20] <ZoffixW> uvtc_, NativeCall

[19:20] <[Coke]> NC is NativeCall

[19:20] <Su-Shee> lizmat: BUT it all means nothing without a proper set of modules doing.. "the usal stuff"

[19:20] <uvtc_> Ah. Thanks.

[19:20] <Skarsnik> In 'remove_history' routine declaration - Not an accepted NativeCall type for parameter [1]  : Int

[19:20] <Skarsnik> -->For Numerical type, use the appropriate int32/int64/num64...

[19:20] <Zero_Dogg> Skarsnik: I can, give me a moment

[19:20] <Skarsnik> Readline need to be fixed

[19:20] <ZoffixW> Ah

[19:20] <AlexDaniel> ‚ÄúNo such method 'chars-supply'‚Äù has anybody seen this error?

[19:21] <ZoffixW> AlexDaniel, yes, it's deprecated

[19:21] <ZoffixW> AlexDaniel, it's .Supply now

[19:21] *** Ven left
[19:21] <Su-Shee> lizmat: alternatively, I'd sell it as something like Scala or Clojure and point out that you just can use all the Java stuff out there.

[19:21] <ZoffixW> s/deprecated/removed in the Supply Refactor/;

[19:21] <Su-Shee> lizmat: and not mention moarvm however. ;)

[19:22] *** skids joined
[19:22] <lizmat> Su-Shee: well, with a broken JVM backend on 2015.12, I don't think I want to emphasize JVM interoperability

[19:22] <uvtc_> Skarsnik: ZoffixW : Thanks. Will file a bug report with Readline.

[19:22] <ZoffixW> *reads blogpost*  Huh? Picking JavaScript and node.js? -_- nothanks

[19:22] *** Ven joined
[19:23] <lizmat> fail X::Cannot::New.new(class => self) without my $year = %_<year> // %_<years>;   # first time I could use "without"  :-)

[19:23] <_sri> lizmat: just for completeness sake, mojolicious usually scales by using a manager process that spawns a bunch of processes that each run their own libev event loop

[19:23] <_sri> the traditional nginx model

[19:24] <lizmat> _sri: so there are no shared data structures ?

[19:24] <Su-Shee> lizmat: I'm selling perl6 here, not caring for underlying tech. :) I expect that to be fixed sooner rather than later because it actually brings perl6 en par with all the jvm based langs... otherwise, perl6 will soon get the question why it again wrote its own vm after all the parrot stuff. 

[19:24] <_sri> lizmat: nope, data is shared with databases or a pub/sub message bus

[19:25] <flussence> it's Apache2 that uses worker processes, and lighttpd uses libev, nginx doesn't ;)

[19:25] <lizmat> ok, so basically db or the forks::shared method

[19:25] *** shicheng joined
[19:25] *** shicheng left
[19:25] <lizmat> well, in Perl 6, all data structures *are* shared :-)

[19:26] *** shicheng joined
[19:26] <_sri> the way you run the event loop in a separate thread is really interesting, i wonder what the downsides will turn out to be

[19:27] *** uvtc_ left
[19:27] *** shicheng left
[19:27] <ilmari> that blog post also ignores Inline::Perl[56] for interop and gradual porting

[19:27] * _sri has not looked at how gc works in rakudo yet

[19:27] <Su-Shee> ilmari: that's not a business case either. 

[19:27] <[Coke]> We already have failures on roast/6.c with rakudo/no

[19:27] <lizmat> ilmari: woolfy is already writing a comment about that

[19:27] <[Coke]> m

[19:28] <Su-Shee> ilmari: and I think it's a really good question "what would I perl6 use for" beyond "cool tech" for real?

[19:28] *** shicheng joined
[19:28] <ZoffixW> Su-Shee, what would I use Python for?

[19:29] <skids> [Coke]: :(

[19:29] *** shicheng left
[19:29] <Su-Shee> ZoffixW: data, education, web for starters. thanks to the excellent data libraries combined with all the other stuff, it's taking over the R world at the moment.

[19:29] <[Coke]> perl6/doc - htmlify calls out to pygmentize; I have pygmentize-2.7 installed. Is the right approach for me to manually make a pygmentize alias, or to make htmlify try harder?

[19:29] <Su-Shee> ZoffixW: it is also by now THE language in education of all kinds.

[19:29] *** shicheng joined
[19:29] <ilmari> Su-Shee: one of the cons raised in the post was the lack of migration path, which Inline::Perl[56] helps with

[19:29] <Su-Shee> ZoffixW: there is no data related job ad without mentioning python.

[19:29] <ilmari> Su-Shee: and it's similar to your JVM argument: you can keep using all the cpan stuff

[19:30] <Su-Shee> ilmari: I see.

[19:30] <TimToady> nine: so...I run 'panda install Inline::Perl5', and it fails because Inline::Perl5 is "already installed", and then I do a make spectest, and it says: "Inline::Perl5 not installed: not running Perl 5 integration tests"...what's up with that?

[19:30] <Su-Shee> ilmari: on the other hand: why would I bother with perl6 then? I can use all the cpan stuff with perl5.

[19:30] <[Coke]> (6.c failures) https://gist.github.com/coke/5c138e2ce260f78fc2ac

[19:30] <autarch> if I have a class name in a scalar can I call "$class.new" on it?

[19:30] <Zero_Dogg> Skarsnik: http://pastebin.com/q8FdxaKf

[19:30] <ZoffixW> Su-Shee, last thing I ported from P5 to P6 ended up half as short :)

[19:30] <alpha123> Su-Shee: Maybe you're more productive in Perl6 than Perl?

[19:30] *** shicheng left
[19:31] *** llfourn joined
[19:31] <lizmat> TimToady: could it be that you had a core setting compile fail ?

[19:31] <alpha123> P6 is the scripting language of the future IMO, it does everything and it does it well

[19:31] <lizmat> TimToady: and/or an install?

[19:32] <Skarsnik> Zero_Dogg, look fine to me. It's the execute that fail?

[19:32] <Su-Shee> alpha123: well I'm trying for years now and I'm definitely not. but I'm really too stupid for perl6.

[19:32] *** nbrown joined
[19:32] <ZoffixW> Any answer for autarch? I'm curious as well.

[19:32] <ZoffixW> m: class Foo { method bar { say "barr1!" }}; my $class = 'Foo'; $class.new.bar # this doesn't work

[19:32] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Method 'bar' not found for invocant of class 'Str'‚ê§  in block <unit> at /tmp/mabtuEUFrx line 1‚ê§‚ê§¬ª

[19:33] <_sri> lizmat: btw. if you need an argument against node.js, v8 still has a 1.4gb memory limit for each process, the downside of using a js engine designed for browsers :)

[19:33] <RabidGravy> autarch,  ::($class).new

[19:33] <Su-Shee> alpha123: considering which languages so far have been "the scripting languages" or really "the languages" most in use it's certainly not the "doing something well" languages. "worse is better" applies a lot.

[19:33] <autarch> RabidGravy: thanks

[19:33] <ZoffixW> RabidGravy++

[19:33] <RabidGravy> does a "type lookup"

[19:33] <Zero_Dogg> Skarsnik: yep, that's when it segfaults

[19:34] <TimToady> nine: a force install makes it show up to spectest; is the already-installed check ignoring version number or something like that?

[19:35] <nine> TimToady: the already installed check really is just perl6 -e "exit !try { require Inline::Perl5; 1 }"

[19:35] <Su-Shee> but anyways, I'm not the marketing department for perl6, there's a perl foundation and what not which should be selling it and finding business arguments and use cases and all that jazz.

[19:35] *** llfourn left
[19:35] <TimToady> it should really understand that a new version needs to be forced, methinks

[19:36] <TimToady> anyway, just an observation...

[19:36] * TimToady goes back to his loopy cave

[19:37] <Skarsnik> Zero_Dogg, I can't really help you sadly, mysql server does not work on the system I am working. all I can offer you is git clone DBIish and put say in the code to find where it fail exacltly ~~

[19:37] <lizmat> Su-Shee: if nobody tells the TPF the business cases, they won't find any

[19:37] <autarch> does the bot that runs m have any modules installed?

[19:37] <lizmat> Su-Shee: TPF is just a bunch of people, like we're here

[19:37] <ZoffixW> autarch, Task::Star

[19:37] <alpha123> Su-Shee: Perl6 is better is worse is better :)

[19:38] <Skarsnik> there is a rakudo star on camelia I think

[19:38] <Skarsnik> if you figure the name of the command xD

[19:38] <lizmat> Su-Shee: please don't assign any super powers to them, they need as much help as anybody

[19:38] <autarch> m: my $module = 'Grammar::Debugger'; require $module

[19:38] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Could not find Grammar::Debugger in:‚ê§    /home/camelia/.perl6/2015.12-51-g3dc7d55‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6‚ê§    CompUnit::‚Ä¶¬ª

[19:38] <ZoffixW> m-star: use Grammar::Debugger; 

[19:38] <ZoffixW> star: use Grammar::Debugger; 

[19:38] <camelia> star-m 2015.09: ( no output )

[19:38] <autarch> star: my $module = 'Grammar::Debugger'; require $module

[19:38] <camelia> star-m 2015.09: OUTPUT¬´Could not find file 'Grammar::Debugger' for module Grammar::Debugger‚ê§  in block <unit> at /tmp/Idt957Zmnz:1‚ê§‚ê§¬ª

[19:39] <TimToady> if anything, working for TPF is even more thankless than working here...

[19:39] <autarch> so what's happening seems to be that it tries to look for 'path/to/lib/Grammar::Debugger' - using the literal string passed to require rather than translating the module name to a path

[19:39] <Zero_Dogg> Skarsnik: hehe, nod, I might do that later, don't have that much time to do it right now

[19:39] <TimToady> so a tip'o-the-hat to 'em

[19:39] *** webstrand joined
[19:39] *** brrt joined
[19:39] <autarch> now I know that's what p5 does but I was hoping p6 wouldn't do the same thing

[19:40] <autarch> ah, I need to do the ::($name) thing again

[19:40] <kittenlips> hi, question what is CORE.setting?

[19:40] <yoleaux> 07:54Z <nine> kittenlips: https://github.com/niner/Grammar-Highlighter does what you described

[19:40] *** smls left
[19:40] <lucasb> [Coke]: it's gonna be hard to grow a language while having to keep all those 6.c tests running and intact.  What should be done now?

[19:40] <autarch> coolio, that works - I'm always happy when p5 shortcomings are addressed

[19:40] <TimToady> autarch: we try to be very clear in the distinction between hard refs and symbolic in p6

[19:41] <autarch> TimToady: yeah, that's what I'm starting to figure out - it all makes sense, it's just new

[19:41] <TimToady> why we don't need 'strict refs' anymore

[19:41] <autarch> I'm used to the p5 "just fling stuff around and it'll work, sort of" approach ;)

[19:41] <Su-Shee> lizmat: well. you have my arguments. that's how I'd be selling perl 6. 

[19:41] <TimToady> same with $obj.$routine vs $obj."$routine"()

[19:41] <nine> TimToady: the installation process does consider versions just fine. You needed to to a panda update, because panda's meta data was out of date.

[19:41] <TimToady> okay

[19:41] <kittenlips> nine++ thanks a lot!!

[19:41] <autarch> TimToady: yep, that one also made sense once I realized that $routine could be a Routine object

[19:42] <autarch> I think a little extra typing is worth it for the clarity it provides

[19:42] <nine> TimToady: the spec test check failed because you had a version installed that wouldn't work anymore with rakudo nom

[19:42] <TimToady> funny thing is that we didn't actually anticipate that $obj.&subroutine would work, it just fell out that way :)

[19:43] <TimToady> nine: kind of a shame we can't just track all the dependencies with make...

[19:43] *** cognominal left
[19:43] <[Coke]> lucasb: we're working on a plan that will be in place before the next release.

[19:44] <TimToady> and anything more powerful than make isn't really very portable...

[19:44] <[Coke]> But we all signed up for that when we decided it was time to cut a "real" release.

[19:45] <TimToady> even if that was sort of a royal we :)

[19:45] <[Coke]> TimToady: btw, I think we already have one commit in nom that has to fork rakudo and keep a 6.c & 6.d track.

[19:45] <ZoffixW> nine, sounds like https://github.com/niner/Grammar-Highlighter should be added to the Ecosystem :)

[19:47] <TimToady> [Coke]: you mean it actively fails a 6.c test?

[19:47] <[Coke]> er, not fork, branch.

[19:47] <nine> ZoffixW: oh, indeed!

[19:47] <[Coke]> TimToady: https://gist.github.com/coke/5c138e2ce260f78fc2ac

[19:47] <yurivish_> ZoffixW: I tried searching for ".sort" on doc.perl6.org and got a a "no results found", but searching for "sort" found the routine. Maybe ".sort" should work too?

[19:48] <kittenlips> nine Grammar::Highlighter is exactly what I was looking for, a syntax highlighter that doesn't force wheel reinvention and parses the programming language's grammar to fully understand how to properly highlight the syntax

[19:48] *** rickbike joined
[19:48] <kittenlips> .ping MadcapJake

[19:48] <yoleaux> There is no ping command; nor can this be construed as a response.

[19:48] <[Coke]> the first is a change, the second is a segfault or so, the third is a change, the last is a flapper.

[19:49] <[Coke]> yurivish_: sure, can you add that as a ticket to docs/perl6/issues ?

[19:49] *** pierrot_ is now known as pierrot

[19:49] *** regreg left
[19:49] <yurivish_> sure. where is that?

[19:49] *** mempko_ joined
[19:49] *** mempko_ left
[19:49] <kittenlips> MadcapJake++ I think you did an excellent job creating the Atom package language-perl6fe syntax highlighter, also have a look at nine's https://github.com/niner/Grammar-Highlighter

[19:49] *** mempko_ joined
[19:50] <lizmat> ZoffixW: re DateTime.new( :years, etc) , not going to fix that, it gets *very* dirty and performing badly

[19:50] <yurivish_> https://github.com/perl6/doc/issues here?

[19:50] <lizmat> ZoffixW: fwiw, I'd rather remove support for plurals in .later

[19:50] <lizmat> ZoffixW: to be completely consistent

[19:51] <yurivish_> [Coke]: Is this where I should file the issue? https://github.com/perl6/doc/issues

[19:51] *** yqt joined
[19:51] <mempko_> For those interested, I am working on a perl 6 kafka library.

[19:51] <mempko_> Here is an example usage.

[19:51] <ZoffixW> lizmat, +1 on removing plurals; keep it nice and simple and consistent. They're in .truncated-to too

[19:51] <mempko_> https://gist.github.com/mempko/fc3f89d179d9a33a750d

[19:51] <ZoffixW> yurivish_, yes

[19:52] <mempko_> I'll publish the library on github as soon as it is usable. Maybe another week or so.

[19:52] <lizmat> ZoffixW: alas, removing plurals from later would not be backward compatible

[19:52] <[Coke]> lizmat: we already have non-backward compatible changes in nom, don't we?

[19:52] <[Coke]> I'm not saying add more, just thought that was the result of the test failure I saw.

[19:52] <ZoffixW> Really? That's kinda disappointing. 5 days after the release!

[19:53] <ZoffixW> :)

[19:53] <AlexDaniel> ZoffixW: it is PROGRESS

[19:53] <lizmat> [Coke]: well, with the removal of IO::ArgFiles, we break any code explicitely referencing that

[19:53] <[Coke]> ... which 6.c does

[19:53] <Skarsnik> damn travis does not propose for 32bits build

[19:53] <lizmat> [Coke]: but there no tests for IO::ArgFiles, apart from testing existence of the class

[19:54] <[Coke]> ... and now it doesn't?

[19:54] *** Begi joined
[19:54] <[Coke]> I mean, I get that's a trivial thing, but it's still a failing test in 6.c

[19:54] *** regreg joined
[19:54] <lizmat> [Coke]: 630a9b20f9e829bf15359 removed IO::ArgFiles, and made WHICH.t fail

[19:55] <[Coke]> there's also a datetime failure.

[19:55] <lizmat> ah, that one

[19:55] <cygx> .oO( add a dummy class that does nothing but FALLBACK to an error message )

[19:55] <lizmat> I think we agreed that was a faulty test

[19:55] <ZoffixW> lizmat, based on search results, the plurals are not tested in .later nor truncate to https://github.com/perl6/roast/search?utf8=%E2%9C%93&q=later https://github.com/perl6/roast/search?utf8=%E2%9C%93&q=truncate-to

[19:55] <lizmat> [Coke]: so in 6.c, that should be fixed and marked "todo:

[19:55] <AlexDaniel> m: say v1.0

[19:55] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´v1.0‚ê§¬ª

[19:55] <AlexDaniel> m: say v1.0.WHAT

[19:55] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´v1.0.WHAT‚ê§¬ª

[19:55] <Skarsnik> lol

[19:55] <ZoffixW> m: say (v1.0).WHAT

[19:56] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´(Version)‚ê§¬ª

[19:56] <AlexDaniel> :))

[19:56] <Skarsnik> m: say v1.0.a

[19:56] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´v1.0.a‚ê§¬ª

[19:56] <[Coke]> any changes to the 6.c tests are problematic.

[19:56] <Skarsnik> m: say v1.0.a < v1.0.b

[19:56] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Cannot call Real(Version: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in block <unit> at /tmp/GST3HMFi5x line 1‚ê§‚ê§¬ª

[19:56] <TimToady> yes, test suites should be considered immutable, just as modules are

[19:56] <ZoffixW> m: say v1.0.a before v1.0.b

[19:56] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´True‚ê§¬ª

[19:56] <[Coke]> We need some kind of review process to say "trivial change", "new version of 6.c here", or "6.d"

[19:56] <AlexDaniel> m: say v1.0.a cmp v1.0.b

[19:56] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Less‚ê§¬ª

[19:57] <[Coke]> We'll get it all sorted out before 2016.01, I'm sure.

[19:57] <lucasb> [Coke]++  # optimist

[19:57] *** ccakes joined
[19:57] <AlexDaniel> m: say v1.0.a < v1.0.b

[19:57] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Cannot call Real(Version: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in block <unit> at /tmp/FoELAhL1Ub line 1‚ê§‚ê§¬ª

[19:57] <TimToady> we have a wide dynamic range :)

[19:58] <TimToady> and on many different scales

[19:58] <perlpilot> [Coke]: 1/3 of that is easy.  There are no "new" versions of 6.c   ;)

[19:58] <TimToady> laziness vs diligence, impatience vs patience, hubris vs humility

[19:59] <[Coke]> perlpilot: yes, there are.

[19:59] <Skarsnik> nine, any idea why i:p5 does not work on 32bits?

[19:59] <TimToady> and we've had illustrations of all those wide ranges in the last month

[19:59] <[Coke]> there's a chance we'll have a 6.c.1, e.g.

[19:59] <nine> Skarsnik: not yet. Household chores to do

[19:59] <[Coke]> "Here's a bundle of minor changes that are technically not backward compatible, but we think you'll like"

[19:59] <Skarsnik> ok, let me know if you want me to test stuff

[19:59] <[Coke]> I hope we don't do that often. (and not in 2016.01)

[19:59] *** virtualsue left
[20:00] *** shicheng joined
[20:00] *** shicheng left
[20:00] <ZoffixW> ouch "Internal error: zeroed target thread ID in work pass"

[20:00] <[Coke]> is there a better way to get a file's POD than:         my $pod  = EVAL(slurp($file.path) ~ "\n\$=pod")[0];

[20:00] <ZoffixW> And didn't happen on re-run

[20:01] <flussence> ZoffixW: wow... haven't seen that error in a *long* time.

[20:01] *** Ven left
[20:01] *** ccakes left
[20:01] <nine> Well the goal is to never ever break user code by updating a published version of the language. One way to do that is to just never update. Though right now there's not that much code relying on 6.c. There still can be changes that are reasonably safe to do.

[20:02] <lnrdo> http://venturebeat.com/2015/12/30/debian-founder-and-docker-employee-ian-murdock-has-died-at-42/

[20:02] <TimToady> the basic assumption should be that we don't break 6.c by default, but that we can grant a "variance" in some circumstances, but only after due consideration of how best to introduce the change over time

[20:03] <dalek> doc: 9aa6832 | lizmat++ | doc/Type/Date (2 files):

[20:03] <dalek> doc: Undocument .later plurals

[20:03] <dalek> doc: review: https://github.com/perl6/doc/commit/9aa6832363

[20:03] <stmuk_> lnrdo: :(

[20:03] <nine> m: say True.Num, True.Int

[20:03] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´1True‚ê§¬ª

[20:03] <AlexDaniel> lizmat: can't really say that I like this change

[20:04] <lizmat> AlexDaniel: we can revert

[20:04] <nine> TimToady: as an exercise, would you consider removing the .Num candidate that's responsible for this ^^^ from Bool?

[20:04] <lizmat> :-)

[20:04] <yurivish_> why does this not work?

[20:04] <lizmat> dinner&

[20:04] <yurivish_> m: my %h = (1=>2, 3=>4); %h.sort(-*.value).map(.say);

[20:04] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´(Any)‚ê§Cannot call map(List: Bool); none of these signatures match:‚ê§    ($: Hash \h, *%_)‚ê§    (\SELF: &block;; :$label, :$item, *%_)‚ê§    (HyperIterable:D $: &block;; :$label, *%_)‚ê§  in block <unit> at /tmp/TmukOaCzHk line 1‚ê§‚ê§¬ª

[20:04] <AlexDaniel> lizmat: again, what's the reason to do so?

[20:04] <nine> TimToady: the only spec tests that fail depend on this completely by accident and are faulty to begin with

[20:04] <TimToady> how is that not what you'd expect?  True is an Int

[20:04] <TimToady> True isn't a Num

[20:05] <lucasb> m: say True.Numeric

[20:05] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´1‚ê§¬ª

[20:05] <lnrdo> stmuk_: It is not 27, but still 42 is a worth number match.

[20:05] <yurivish_> where is there a true? I was thinking this would sort the list by value and then print out the pairs

[20:05] *** nbrown left
[20:05] *** virtualsue joined
[20:06] <flussence> hasn't the rule always been "coercing to the same or looser type is a no-op"?

[20:06] <ZoffixW> AlexDaniel, consistency with other methods, such a .new that does not take plurals and silently ignores them. And adding them is expensive

[20:06] <yurivish_> oh, I didn't mean to map a say... That was me trying to reduce to a simpler test case

[20:06] <ZoffixW> m: say DateTime.new: :2015year :12month :31days :23hours :59minutes :59seconds

[20:06] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´2015-12-01T00:00:00Z‚ê§¬ª

[20:06] <ZoffixW> AlexDaniel, spot the bug ^ :)

[20:07] <AlexDaniel> doesn't it mean that plurals should be better supported?

[20:07] <AlexDaniel> and not that we should get rid of them

[20:07] <ZoffixW> It's messy and expensive

[20:07] <yurivish_> the actual code I was trying to write seems to work now

[20:07] <yurivish_> m: my %h = (1=>2, 3=>4); %h.sort(-*.value).map(*.key ~ ',' ~ *.value);

[20:07] <camelia> rakudo-moar 3dc7d5: ( no output )

[20:08] <AlexDaniel> as a user I don't really want to think whether it is ‚Äúday‚Äù or ‚Äúdays‚Äù, I'd prefer it to work either way

[20:08] <TimToady> seems to me, if you were really worried about performance, you'd have a position new for DateTime that avoids named entirely

[20:08] <[ptc]> [Coke]: re: POD extraction.  I don't think so :-(  I had issues with that when extracting the POD from the files in the perl6-examples repo

[20:08] <yoleaux> 17:38Z <stmuk> [ptc]: yay updating docs.perl6.org .. BTW *.un~ is a vim undo file which my .vimrc has enabled

[20:08] <awwaiid> https://github.com/raydiak/Inline-Lua/pull/1 -- more EVAL targets

[20:08] <perlpilot> yurivish_: that looks like a precedence problem to me.

[20:09] <bpmedley> No!! Damn you mortality!  Ian Murdock was all the awesome.

[20:09] <perlpilot> yurivish_: oh, maybe not.

[20:09] * perlpilot can't read

[20:09] <ZoffixW> Well, dunno :) I'm not the gut hax0r... <lizmat> ZoffixW: re DateTime.new( :years, etc) , not going to fix that, it gets *very* dirty and performing badly

[20:09] <yurivish_> perlpilot: now I'm confused too

[20:10] <Begi> I guess the link to the advent calendar can be removed from perl6.org, no ?

[20:10] <perlpilot> m: my %h = (1=>2, 3=>4); %h.sort(-*.value).map(*.key ~ ',' ~ *.value).say

[20:10] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´(3,2)‚ê§¬ª

[20:10] <perlpilot> yurivish_: what did you want from that ?

[20:10] <gfldex> Begi: it can be removed 2016-12-01

[20:11] <Begi> Ok good

[20:11] <ilmari> mempko_: does kafka do sharding, like amazon kinesis? it would be neat to have the consumer automatically spawn a consumer thread per shard

[20:11] <flussence> just in time to put it back up again :)

[20:11] <ZoffixW> Begi, I was thinking of living it in until like middle of January, just for the people who missed it

[20:11] <perlpilot> yurivish_: by mentioning * twice, you got two different parameters to .map

[20:11] <gfldex> Begi: or replaced when we get something better until then

[20:11] <ZoffixW> Begi, or keeping permanently and removing the "new article daily" blurb

[20:11] <[ptc]> [Coke]: moritz helped me with this solution:  my $perl-pod = qqx{perl6-m -Ilib --doc=Perl $file};   Where one also defines a Perl parser for the pod...

[20:11] <yurivish_> I want ['3,4', '1,2']

[20:11] <perlpilot> yurivish_: i.e. it's the same as if you'd done .map({  $^a.key ~ ',' ~ $^b.value });

[20:12] <[ptc]> stmuk_: cool, thanks for the info :-)

[20:12] <perlpilot> yurivish_: then use .map({ .key ~ ',' ~ .value })

[20:12] <yurivish_> perlpilot: I did not realize * would become different parameters and thought this would be a shorter way to write it

[20:12] <AlexDaniel> m: my \x = 42; say x √ó ‚Öπ x ‚Öπ

[20:12] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´420420420420420420420420420420‚ê§¬ª

[20:13] *** darutoko left
[20:13] <ZoffixW> m: say (* + * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * )(|^22)

[20:13] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´51090942171709440000‚ê§¬ª

[20:13] <ZoffixW> yurivish_, ^

[20:13] <ZoffixW> each one is a new thing

[20:14] <perlpilot> well ... only every other one starting from the second is a "new thing"  :)

[20:14] <yurivish_> ZoffixW: what does that output mean? is that parsed as something like +(*_1, *_2, ... *_20)?

[20:14] *** rindolf left
[20:14] <yurivish_> perlpilot: things work now!

[20:14] <ZoffixW> yurivish_, say 0 + 1 * 2 * 3 * 4 * 5 * 6....* 22

[20:15] <ZoffixW> yurivish_, say 0 + 1 * 2 * 3 * 4 * 5 * 6....* 21

[20:15] <AlexDaniel> ZoffixW: this example makes me cry. Perhaps consider using √ó next time :D

[20:15] <yurivish_> m: say (* + * * *)(1,3,5)

[20:15] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´16‚ê§¬ª

[20:15] <yurivish_> hah

[20:15] *** znpy joined
[20:15] <AlexDaniel> m: say (* + * √ó *)(1,3,5)

[20:15] <perlpilot> yurivish_: most times you don't want to use more than one Whatever.  If you think you need more than one, you probably want to use one of the other, more explicit methods

[20:15] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´16‚ê§¬ª

[20:16] <ZoffixW> AlexDaniel, nevar! It's my rebellion against there not being a Unicode variant of WhateverStar and HyperWhateverStar :)

[20:16] <yurivish_> perlpilot: lesson learned.

[20:16] *** FritzZaucker left
[20:16] <AlexDaniel> ZoffixW: right

[20:16] <flussence> m: say (Whatever + [√ó] Whatever xx 20)(^21)

[20:16] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Use of uninitialized value of type Whatever in numeric context  in block <unit> at /tmp/0DtMoKMzKU line 1‚ê§Use of uninitialized value of type Whatever in numeric context  in block <unit> at /tmp/0DtMoKMzKU line 1‚ê§Use of uninitialized value of type Whate‚Ä¶¬ª

[20:16] <flussence> m: say (WhateverCode + [√ó] WhateverCode xx 20)(^21)

[20:16] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Can not invoke a code type object‚ê§  in block <unit> at /tmp/weS0pgwaAK line 1‚ê§‚ê§¬ª

[20:16] <flussence> m: say (* + [√ó] * xx 20)(^21)

[20:16] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Cannot call Numeric(Whatever: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in block <unit> at /tmp/Nf32ER2Zw_ line 1‚ê§‚ê§¬ª

[20:16] <TimToady> whatevers never curry positional args

[20:16] <flussence> *sigh*

[20:17] <flussence> I'm no good at writing unreadable code :)

[20:18] <Begi> .seen azawawi

[20:18] <yoleaux> I saw azawawi 28 Dec 2015 08:47Z in #perl6: <azawawi> Merry Christmas to #perl6 :)

[20:18] *** ccakes joined
[20:18] *** rindolf joined
[20:18] <Begi> Easy thing that I can do : https://github.com/azawawi/perl6-browser-open/issues/2

[20:19] <Begi> Should I put the doc of the module ine the README file ?

[20:19] <Skarsnik> hm, I remember perl 6 having a State type, but I can't find it on the doc x)

[20:19] *** znpy left
[20:19] <skids> IMO IO::ArgFiles should be put back in and not removed till 6.d.  It is reasonable for a user of 6.c to interpret that test as "IO::ArgFiles is part of the spec" even if its internals are not tested.

[20:19] <mempko_> ilmari: Yes, kafka has the concept of partitions. I'll make sure to add support for consuming multiple partitions.

[20:20] <[Coke]> skids: docs and source disagree with you.

[20:20] <skids> How so?

[20:20] <Skarsnik> Begi, ideallt both sadly x)

[20:20] <[Coke]> whoops.

[20:20] <[Coke]> Skarsnik: docs and source disagree with you.

[20:20] <skids> Oh.

[20:20] <[Coke]> ETOOMANYNICKS

[20:21] *** itaipu joined
[20:21] <AlexDaniel> m: say ‡º´.base(36)

[20:21] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´1.I‚ê§¬ª

[20:21] <Skarsnik> all I found for State is the state stuff like my x)

[20:22] <perlpilot> what would the State type mean, if it were to exist?

[20:22] * TimToady has no recollection of a State type

[20:22] <TimToady> maybe you're thinking of when we had START blocks?

[20:22] *** ccakes left
[20:23] <lucasb> m: say (slip(1,2) Z slip(1,2)).perl

[20:23] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´((1, 2, 1, 2),).Seq‚ê§¬ª

[20:23] <lucasb> ^^ it's interpreting that as '[Z] 1,2,1,2'. is that expected?

[20:24] <[Coke]> m: say (1,2 Z slip 1,2).perl;

[20:24] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´((1, 1, 2),).Seq‚ê§¬ª

[20:24] <Skarsnik> TimToady, something like http://doc.qt.io/qt-4.8/statemachine-api.html 

[20:24] <AlexDaniel> m: say :5<1.I>

[20:24] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/LqsDStoR_m‚ê§Couldn't process entire number: 1/1 int chars, -1/1 fractional chars‚ê§at /tmp/LqsDStoR_m:1‚ê§------> 3say :5<1.I>7‚èè5<EOL>‚ê§¬ª

[20:24] <AlexDaniel> ‚Üë was it supposed to say 1/1 ?

[20:24] <AlexDaniel> or it is just that somebody forgot {} around it?

[20:24] <[Coke]> slightly modified htmlify.p6, I get this when running it on Christmas: moar(35746,0x7fff77064300) malloc: *** error for object 0x7ff5936b0750: pointer being freed was not allocated

[20:24] <[Coke]> *** set a breakpoint in malloc_error_break to debug

[20:24] <[Coke]> make: *** [html] Abort trap: 6

[20:25] <perlpilot> Skarsnik: All that Q* stuff in your link reminds me of 007.  Maybe you're thinking of that?  :)

[20:25] <AlexDaniel> and what does it mean ‚Äú-1/1‚Äù fractional chars?

[20:25] <Skarsnik> But it's more I want to keep track of the state of a statementhandle object in DBIish (like ready, running, finished)

[20:25] <TimToady> likely an error code back from nqp

[20:27] <TimToady> m: say :5<1.6>

[20:27] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/NOrFCdkVhj‚ê§Couldn't process entire number: 1/1 int chars, -1/1 fractional chars‚ê§at /tmp/NOrFCdkVhj:1‚ê§------> 3say :5<1.6>7‚èè5<EOL>‚ê§¬ª

[20:27] <autarch> what does this error mean - "Virtual call @.skip may not be used on partially constructed objects" ?

[20:27] <TimToady> I think that used to have a better message, but the innards are leaking somehow

[20:27] <autarch> I have a class with a BUILD submethod where I'm trying to set @.skip

[20:27] <perlpilot> autarch: you want to set @!skip

[20:27] <autarch> ah, that makes sense

[20:27] <TimToady> @.skip is really a call to self.skip

[20:28] <webstrand> When destructuring arrays, what's the use of the asterisk in my ($first, *@rest) = 1..20; It doesn't seem to change behaviour when missing like the documentation in Signature says it should.

[20:28] <perlpilot> autarch: the object isn't fully constructed in BUILD, so any calls to @.skip are ... what TimToady said

[20:28] <perlpilot> autarch: which can't work

[20:28] <autarch> yeah, that makes sense when I think about it

[20:28] <Skarsnik> . is an accessor x)

[20:28] <TimToady> which you can still do if you really mean it, but we don't want people falling into confusing virtual attributes with physical attributes by accident

[20:28] <autarch> I suspect the error message could probably add " - maybe you wanted to set @!skip directly?"

[20:28] <TimToady> that might help

[20:29] <ZoffixW> m: use Test:ver; # curious

[20:29] <camelia> rakudo-moar 3dc7d5: ( no output )

[20:29] <ZoffixW> m: use Test:blahblahblah; # curious

[20:29] <camelia> rakudo-moar 3dc7d5: ( no output )

[20:29] <TimToady> feel free to file an LTA on that

[20:29] <ZoffixW> Ah

[20:29] *** nexysno_ left
[20:29] <TimToady> and on the :5<1.I>

[20:29] <autarch> TimToady: is that directly at me?

[20:29] <TimToady> no, that was to the editorial "we" :)

[20:30] <TimToady> well, that second one was :)

[20:30] <TimToady> the first one was to you, since you brought it up...or you can just fix it, if it breaks no 6.c tests :)

[20:31] *** zengargoyle joined
[20:31] <zengargoyle> good * #perl6

[20:31] <ZoffixW> \o

[20:32] *** llfourn joined
[20:32] <zengargoyle> haven't been around for a week or so... things seem to be a bit borked.

[20:32] <TimToady> you'll have to nuke your install if you have one from before Christmas

[20:33] <zengargoyle> fresh build + panda... try to install Linenoise and it tries to install File::Find again... and fails 'cause it's allready installed.

[20:33] <zengargoyle> pands --installed list shows nothing installed.

[20:33] <TimToady> you can use --force for the moment as a workaround

[20:33] <zengargoyle> did nuke moar and rakudobrew selfupbrade.

[20:33] <zengargoyle> will try... TT

[20:34] <TimToady> unless there's some fresh thing I dunno about...

[20:34] <zengargoyle> figures i'd hit a momentary glitch of some sort. :)

[20:34] <ZoffixW> ISAGN for a way to tell a Promise to violently crash my program if it's broken. Right now it's really annoying to debug code inside Promises results of which I don't care about, since all the errors are silently ignored

[20:34] <ZoffixW> Is there a way to do that?

[20:35] <ZoffixW> zengargoyle, yeah, it's reported in this issue: https://github.com/tadzik/panda/issues/274

[20:35] <zengargoyle> ... Method 'get' not found for invocant of class 'Any

[20:35] <perlpilot> ZoffixW: even with try/CATCH they're silently ignored?

[20:36] <ZoffixW> zengargoyle, and there's ANOTHER issue with linenoze when installing via Task::Star, and that's fixed by simply running panda --force install Linenoise

[20:37] *** llfourn left
[20:37] *** kittenlips left
[20:37] <zengargoyle> guess i'll wait a bit.  laptop too flakey to dig too deeply (randomly just shuts down, video going bad after 7 years... :)

[20:37] <ZoffixW> perlpilot, like how? I'd need to call .result to get the result won't I?

[20:37] * zengargoyle waiting on new laptop from work shortly...

[20:38] <ZoffixW> m: try Promise.in(1).then: { die "a horrible death" }; sleep 2; say "uhum"

[20:38] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´uhum‚ê§¬ª

[20:38] <zengargoyle> 'tis why i haven't been following too closely last couple of weeks.  lack of patience for 'puter just going boom at random times.

[20:39] *** rburkholder left
[20:39] <zengargoyle> so belated kudos to everybody for 6.c :)

[20:39] <skids> m: try my $p = Promise.in(1).then: { die "a horrible death" }; start { await $p; $p.result.say }; sleep 2; say "uhum"

[20:39] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´uhum‚ê§¬ª

[20:40] <perlpilot> huh

[20:40] <AlexDaniel> ‚Äúwe‚Äù has submitted a bug report

[20:40] <TimToady> we++

[20:40] <ZoffixW> perlpilot, doesn't that away throws?

[20:41] <ZoffixW> *await

[20:41] *** lucasb left
[20:41] *** cygx left
[20:41] <ZoffixW> wrong nick too XD

[20:41] *** addison joined
[20:41] <ZoffixW> m: try my $p = Promise.in(1).then: { die "a horrible death" }; start({ await $p; $p.result.say }).result; sleep 2; say "uhum"

[20:41] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/bpNuBy2oNB‚ê§Undeclared routine:‚ê§    start used at line 1. Did you mean 'spurt', 'sort', 'sqrt'?‚ê§‚ê§¬ª

[20:42] <skids> m: my $p = Promise.in(1).then: { die "a horrible death" }; start { await $p; CATCH { $p.result.say } }; sleep 2; say "uhum"

[20:42] <ZoffixW> m: try my $p = Promise.in(1).then: { die "a horrible death" }; Promise.new({ await $p; $p.result.say }).result; sleep 2; say "uhum"

[20:42] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´uhum‚ê§¬ª

[20:42] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Default constructor for 'Promise' only takes named arguments‚ê§  in block <unit> at /tmp/HLgtVy7fGd line 1‚ê§‚ê§¬ª

[20:42] <ZoffixW> *old man yells at the cloud*

[20:42] <dalek> DBIish: be9eddf | (Sylvain Colinet)++ | README.pod:

[20:42] <dalek> DBIish: Document Pg Array

[20:42] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/be9eddfce8

[20:42] <ZoffixW> m: try my $p = Promise.in(1).then: { die "a horrible death" }; Promise.start({ await $p; $p.result.say }).result; sleep 2; say "uhum"

[20:42] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´a horrible death‚ê§  in block <unit> at /tmp/oLCXzTersU line 1‚ê§‚ê§¬ª

[20:43] <MadcapJake> .tell kittenlips thanks! glad you like it! My highlighter is just using Atom's builtin grammar engine and the builtin node-oniguruma regex engine.

[20:43] <yoleaux> MadcapJake: I'll pass your message to kittenlips.

[20:43] <ZoffixW> But that's way more code than I was hoping for :P

[20:43] <perlpilot> yeah, that's way more than I thought you'd need.

[20:43] <AlexDaniel> autarch: ‚Äúwe‚Äù didn't submit your bug report though, so perhaps some other ‚Äúwe‚Äù will do that :)

[20:43] <autarch> yeah, I can do that

[20:44] *** pierre-vigier joined
[20:45] <TimToady> We are amused.

[20:45] <webstrand> Is destructuring using `my` supposed to work like subroutine parameters? I.e. is `my ($a, @b) = (1,2)` supposed to result in an error?

[20:45] <perlpilot> TimToady: Are there any "rules" for writing good spec tests written down somewhere?  autarch's LTA discovery had me wondering if there were any spec tests relying on the contents of an error message (I sure hope not!) and if there was anything that would aid in preventing such travesty

[20:46] <TimToady> webstrand: you need to use := if you want sig-like destructuring

[20:46] <autarch> what is LTA?

[20:46] <TimToady> less than awesome

[20:46] <autarch> ah

[20:46] <TimToady> it's in the glossary

[20:46] <TimToady> awesome being our standard for error messages

[20:46] <japhb> .oO( Is "glossary" in the glossary? )

[20:47] <TimToady> lunch &~

[20:47] <japhb> As well it should be

[20:47] <AlexDaniel> http://design.perl6.org/S99.html

[20:47] <awwaiid> m: my (Int $n, Str $s) := 5, "fish" ; say $n, $s # webstrand

[20:47] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´5fish‚ê§¬ª

[20:47] <MadcapJake> anyone know bash? I'm trying to add an option to p6doc to just print right to stdout, but it just prints a blank line.  Any idea why?

[20:47] <skids> perlpilot: well recently all the tests that demanded that an error message be contained in an X::AdHoc were change to just Exception, and in general when testing error messages you just need to be tolerant and only test for the minimum details being present.

[20:48] <skids> perlpilot: throws-like tests are usually where those are found, for examples.

[20:48] <webstrand> TimToady: Do you know where the rules for non-sig-like destructuring are documented?

[20:48] <autarch> what does $thing¬ª.method do? I can't find any mention of this on the doc site

[20:48] *** domidumont left
[20:49] <[Coke]> MadcapJake: echo "some stuff"

[20:49] *** ZoffixW left
[20:49] <autarch> MadcapJake: you might also want to use cat

[20:50] <MadcapJake> [Coke]: i think the problem is, I am trying to do `echo "some stuff" | echo` and that really does print a blank line

[20:50] <perlpilot> skids: I was feeling pretty good until you said "when testing error messages"   :)

[20:50] <MadcapJake> autarch: that's a good idea

[20:50] <Hotkeys> autarch: it ESSENTIALLY calls the method on all of the items in a list/array like a map

[20:50] <Hotkeys> but it does it with hyper

[20:50] <autarch> MadcapJake: no need for the '| echo ' bit - I don't think piping stuff _into_ echo does anything

[20:50] <Hotkeys> so in the future you may get the results out of order

[20:50] <[Coke]> autarch: http://design.perl6.org/S03.html#Hyper_operators

[20:50] <[Coke]> ... crap, that's not quite right. dammit. :)

[20:50] <MadcapJake> autarch: true, i guess I could just remove the pipe and pager and just leave it blank

[20:51] <autarch> so @array¬ª.foo is more or less like @array.map( { .foo } )?

[20:51] <perlpilot> Hotkeys: no, you'll always get the results *in* order, they just won't necessarily be processed in order

[20:51] <zengargoyle> echo 'foo' | cat

[20:51] <Hotkeys> oh

[20:51] <[Coke]> just don't pipe it to anything unless you need it.

[20:51] <hankache> autarch yes

[20:51] <MadcapJake> autarch: but cat seems to work well for this

[20:51] <Hotkeys> So I assume that's why you can't do $foo¬ª.say

[20:51] <Hotkeys> because they'll be said out of order

[20:51] <Hotkeys> maybe

[20:51] <Hotkeys> in future

[20:51] <autarch> MadcapJake: cat seems like a good option if you have a file you want to print to stdout

[20:52] <MadcapJake> part of me feels like the default should be pagerless, people can add a pager if they want (what do others think about this?)

[20:52] <perlpilot> Hotkeys: right-ish.

[20:52] <hankache> Hotkeys hyper gets the results in order

[20:52] <hankache> it's race that doesn't

[20:52] <zengargoyle> usually something like: FILTER=less; ( echo stuff; someprog-more-output; echo more stuff ) | $FILTER

[20:53] <zengargoyle> and then sometimes FILTER=cat

[20:53] <awwaiid> webstrand: looks like that is a weakness in the docs. http://doc.perl6.org/routine/%3D says the left-hand-side decides, which suggests that destructuring on the left in parens is from Array (and there is a link), but no doc that I can find

[20:53] <[Coke]> autarch: http://design.perl6.org/S12.html#Parallel_dispatch

[20:53] <sprocket> hello all!

[20:53] <autarch> is the use of $match.ast in grammars considered bad form? the docs now just use .made

[20:53] <hankache> so logically (in the future) they should be in order no?

[20:53] <awwaiid> greetings sprocket!

[20:53] <nine> m: say True.Numeric, True.Int

[20:53] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´1True‚ê§¬ª

[20:53] <sprocket> perl5 used to have a select builting function, but i don‚Äôt believe it‚Äôs built into perl6 - is there something that has replaced the need for it?  or was it expected to be provided in a external library?

[20:53] <nine> TimToady: that's ^^^ what I meant before

[20:54] <perlpilot> autarch: I dunno.  I've wondered that myself.  Both "do the same thing" for now though

[20:54] <nine> TimToady: https://rt.perl.org/Ticket/Display.html?id=127019

[20:54] <skids> perlpilot: e.g. look at S32-io/open.t where the only demans on the message are that the filename appear.

[20:54] <nine> sprocket: what do you need select for?

[20:54] <nine> sprocket: select in Perl 5 has 3 completely separate uses

[20:55] *** ccakes joined
[20:55] <webstrand> awwaiid: Thanks. Perhaps it's documented here: http://doc.perl6.org/type/List#Items%2C_Flattening_and_Sigils . But slurpy parameters don't seem to flatten in destructuring assignment.

[20:55] <sprocket> nine: personally, I don‚Äôt - I‚Äôd started a basic POSIX lib in the ecosystem, and someone was asking me about select :)

[20:56] <Begi> Can't we use "or die" with module's routine ?

[20:56] <awwaiid> webstrand: destructuring here I think is the opposite of the bit there

[20:57] <Skarsnik> ?

[20:57] *** FROGGS joined
[20:57] <skids> perlpilot: btw, got time to look over PR's for File::Temp?

[20:59] * perlpilot looks

[21:00] <MadcapJake> looking at the p6doc script, i can't figure out where the `--help` result is constructed

[21:01] <hoelzro> nine: for that rejected RT about BEGIN say 'hi', how do you feel about me creating a new issue for the LTA error?

[21:01] <hoelzro> MadcapJake: --help is provided by rakudo itself, iirc

[21:01] *** rindolf left
[21:02] <MadcapJake> hoelzro: cool, it looks like it just added my flag automatically 0_0

[21:02] *** FROGGS left
[21:02] <hoelzro> it should =)

[21:02] <alpha123> MadcapJake: main() subs in Perl6 are pretty darn cool eh?

[21:02] <MadcapJake> alpha123: a thousand times yes!

[21:03] <perlpilot> skids: I applied yours and ugexe's

[21:03] * RabidGravy looks at sprocket's module as he has just about to type "int i2c_open(char *dev, int address) " ;-)

[21:03] <awwaiid> MAIN is amazing (minus the known argument ordering issue)

[21:03] <skids> perlpilot: thanks!

[21:03] <sprocket> RabidGravy: it‚Äôs pretty bare bones - I‚Äôd added just what I‚Äôd needed for another project, and hadn‚Äôt fleshed it out yet

[21:04] <Skarsnik> cygx has a lib C module that look neat x)

[21:04] <RabidGravy> if it's got open and ioctl it works for me ;-)

[21:04] <perlpilot> autarch: btw, your dzil-a-like for P6 live on github yet?

[21:04] <autarch> perlpilot: I could push the mess I have right now if you want to see it

[21:05] <dalek> doc: e41eda4 | lizmat++ | doc/Type/Date (2 files):

[21:05] <dalek> doc: Revert "Undocument .later plurals"

[21:05] <dalek> doc: 

[21:05] <dalek> doc: This reverts commit 9aa6832363dbd89ea28670e0a4cdbc88c0cea527.

[21:05] <dalek> doc: review: https://github.com/perl6/doc/commit/e41eda40f7

[21:06] <autarch> https://github.com/autarch/perl6-Dist-Wocky

[21:06] <autarch> my initial goal is just to get it to the point of generating a META.info for me

[21:06] <autarch> I really suck at writing JSON, I always leave extra commas and such lying around

[21:06] <RabidGravy> ah sprocket, I was just trying to remember who you were yesterday in regard to the RPi thing

[21:06] <perlpilot> autarch: an excellent goal (I have the same problem :)

[21:06] <RabidGravy> :)

[21:06] *** Idiosyncrat joined
[21:06] <sprocket> RabidGravy: ah, ok :)

[21:07] <sprocket> RabidGravy: should be getting back to that project soon as well, I got waylaid a bit over December

[21:07] <RabidGravy> just making an i2c thing at the moment

[21:07] <Idiosyncrat> Answering a question that Larry posed to me at http://irclog.perlgeek.de/perl6/2015-12-11#i_11699587

[21:07] <hoelzro> awwaiid: you mean panda --force install vs panda install --force ?

[21:08] <Idiosyncrat> Re the time complexity of Perl 6 grammars -- first my "answer", then its basis.

[21:08] <awwaiid> hoelzro: yes

[21:08] <sprocket> RabidGravy: were you able to use anything in RPi?

[21:08] <Idiosyncrat> The answer: I would characterize Perl 6 grammars as exponential worst case, and linear for LL(1)

[21:09] *** rindolf joined
[21:09] <dalek> doc: fc3c0d2 | lizmat++ | doc/Type/Date (2 files):

[21:09] <dalek> doc: Emphasize that plurals only work with .later

[21:09] <dalek> doc: review: https://github.com/perl6/doc/commit/fc3c0d2f21

[21:09] <Idiosyncrat> I've not gone through the Perl 6 grammar code like I have that for Perl 5, but here's the basis for my assertions:

[21:09] <RabidGravy> sprocket, I'm goint wrap the i2c-dev thing which provides all the methods I need :)

[21:09] <hoelzro> awwaiid: I was wondering if that would be best solved via a module

[21:10] *** FritzZaucker joined
[21:10] <hoelzro> you could easily do it via sub MAIN_HELPER(...) is export { }

[21:10] <Idiosyncrat> PEG is linear for LL(1), and I assume that the linear time complexity of Perl 6 grammars is no better and no worse.

[21:10] <lizmat> TimToady: there is a Date.new(year.month,day) candidate and similar DateTime candidate

[21:10] <awwaiid> hoelzro: short-term definitely; but the command pattern for cli is common enough it would be cool to have it in MAIN. I believe that TimToady or someone had specific ideas about some sort of sub-signature thing I didn't understand

[21:10] <hoelzro> ah, interesting

[21:10] <hoelzro> I'll have to look for that in the logs

[21:11] <dalek> ecosystem: 380302c | (Stefan Seifert)++ | META.list:

[21:11] <dalek> ecosystem: Add Grammar::Highlighter to the ecosystem

[21:11] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/380302cb9f

[21:11] <Zero_Dogg> Inline::Perl5 errors out with: Invalid version format (negative version number) at /usr/share/perl/5.20/overloading.pm line 9117161842131599360 - does anyone recognize this issue?

[21:11] <Idiosyncrat> I think this assumption is reasonable because the time complexity of parsing algorithms is not something you are likely to overcome unless you target it in a specific way, say via LL tables or some such.

[21:11] <nine> Zero_Dogg: is this with the absolutely current version?

[21:12] <FritzZaucker> Hi ... after failing with GTK::Simple I am trying NCurses now for a little Perl6 exercise. The following NCurses example is working: https://gist.github.com/zaucker/aa14025a16edcd671e25 whereas a similar one using a supply doesn't properly display the text: https://gist.github.com/zaucker/0290915997b1ddc3ad53 after a few iterations. Am I doing something wrong or am I hitting a bug somewhere?

[21:12] <Zero_Dogg> nine: yes, just installed now

[21:12] <nine> Zero_Dogg: how can I reproduce this issue?

[21:12] <Idiosyncrat> Similarly for the characterization of the worst case as exponential.  In general, top-down with backtracking goes exponential worst-case.

[21:13] <Zero_Dogg> nine: it's on my raspberry pi again, all I did was install it, and tried use Inline::Perl5;, resulting in that error

[21:14] <Zero_Dogg> nine: perl5 5.20.2, perl6 with rakudo on moar 2015.12, Inline::Perl5 installed through panda

[21:14] <RabidGravy> FritzZaucker, it's entirely possible the libcurses itself isn't entirely thread safe

[21:14] *** Arrowhead_ joined
[21:14] <Idiosyncrat> You can overcome this for top-down by using techniques like GLL, but even careful expert programming won't usually overcome the time complexity bound unless it uses special techniques targeted at the worse case bound.

[21:14] *** Arrowhead left
[21:15] <brrt> anybody had the chance to test branch libuv-1.8 anywhere?

[21:15] <brrt> before i merge it and it doesn't work and everybody's pissed? :-)

[21:15] <brrt> or at least annoyed

[21:15] * flussence would've, but a regular system update is eating all my CPU right now...

[21:16] <Skarsnik> brrt, I will wait for at least the next rakudo release before doing that x)

[21:16] <Idiosyncrat> TimToady: above is my response to http://irclog.perlgeek.de/perl6/2015-12-11#i_11699587

[21:16] <FritzZaucker> RabidGravy: thanks, so not much I can do about this, I guess (except perhaps implementing some simple-minded event loop in the main thread).

[21:18] <nine> Zero_Dogg: but Inline::Perl5's tests passed on installation?

[21:18] *** TEttinger joined
[21:18] <Idiosyncrat> If anyone has reason to believe my time complexities are wrong, I'm glad to hear them.  Either reply on #marpa or mention my handle on this log.

[21:18] <ugexe> m: use Test:auth<>:ver<>;

[21:18] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´Potential difficulties:‚ê§    Pair with <> really means an empty list, not null string; use :auth('') to represent the null string,‚ê§      or :auth() to represent the empty list more accurately‚ê§    at /tmp/NkCYeQ1EeX:1‚ê§    ------> 3use Test:auth<>7‚Ä¶¬ª

[21:18] <RabidGravy> FritzZaucker, you may try changing the .tap to an .act to  and see if it makes any difference (guarantees only on running at a time), unfortunately the NCurses guy isn't about

[21:18] <Idiosyncrat> Congratulations, and thanks for your good work!

[21:19] <Zero_Dogg> nine: nope, same error

[21:19] <nine> brrt: Unable to checkout '5467299450ecf61635657557b6e01aaaf6c3fdf4' in submodule path '3rdparty/libuv'

[21:19] <brrt> ah... damn

[21:20] <brrt> can you check what is in your .gitmodules for the libuv url?

[21:20] <brrt> the libuv repo was recently moved

[21:20] *** itaipu left
[21:20] <FritzZaucker> .act() doesn't help. I found http://stackoverflow.com/questions/29910562/why-has-no-one-written-a-threadsafe-branch-of-the-ncurses-library (there seems to be some thread support in version 5.7 and later).

[21:20] <nine> brrt: https://github.com/libuv/libuv.git

[21:20] <brrt> and... it doesn't have that commit? that's weird

[21:20] <brrt> oh

[21:20] <brrt> did you reconfigure?

[21:21] <brrt> it should do a git submodule sync

[21:21] <hankache> can someone kindly review this new chapter on parallelism http://perl6intro.com/#_parallelism

[21:21] <nine> no?

[21:21] <brrt> oh, you should

[21:21] <hankache> your comments would be highly appreciated

[21:22] <nine> brrt: works :)

[21:22] <brrt> ok, well, fortunately :-)

[21:22] <hankache> i hope what i wrote makes sense

[21:23] *** yurivish_ left
[21:23] <brrt> is there a way to make nativecall look in the current directory for a lib

[21:24] <Skarsnik> is native('./mylib') ?

[21:24] *** Su-Shee left
[21:24] <brrt> hmm

[21:24] <nine> it will look for ./libmylib.so

[21:24] <Skarsnik> Or you can always set LD_LIBRARY_PATH on unix

[21:25] <brrt> oh well, that works

[21:25] <brrt> thanks

[21:25] *** pierre-v_ joined
[21:25] <AlexDaniel> hankache: ‚Äú@result>>.say;‚Äù ‚ÄúIf you run both examples, you should notice that one is sorted and the other is not.‚Äù

[21:26] <AlexDaniel> hankache: both are not sorted?

[21:26] <AlexDaniel> hankache: because you are using ¬ª.say

[21:26] <RabidGravy> FritzZaucker, also doing clear() in the tap before the mvaddstr seems to help

[21:26] <Skarsnik> it add the lib on a path nine? you patched the test of NC then x)

[21:26] <autarch> if I have a string that contains a regex, how do I turn it into a regex without escaping the metacharacters it contains?

[21:27] <Ulti> hankache one of the common tasks is to turn a normal for loop into a parallel for loop I think the idiom is still something like: await do for { start {} }

[21:27] *** pierre-vigier left
[21:28] <MadcapJake> i'm not seeing any tests for command line flags in perl6/doc

[21:28] <RabidGravy> FritzZaucker, I think you could probably get it right if you take care with what you do with curses

[21:28] *** yurivish_ joined
[21:28] <RabidGravy> (i.e it's up to 220 and still readable)

[21:29] <FritzZaucker> RabidGravy: thanks, clear() indeed seems to work. I'll experiment a bit more then.

[21:29] <AlexDaniel> I wonder how many examples out there are doing ¬ª.say

[21:30] *** espadrine joined
[21:31] *** llfourn joined
[21:31] <RabidGravy> FritzZaucker, it's probably the curses internal screen map getting messed up (due to not being threadsafe) and the clear() fixes it

[21:32] <lizmat> MadcapJake: perl6/doc contains tests ?

[21:33] <FritzZaucker> RabidGravy: meaning that I would have to re-draw the entire screen inside the timer callback to be on the save side?

[21:33] <RabidGravy> autarch <$var>

[21:34] <RabidGravy> FritzZaucker, that's the best guess I can come up with at the moment

[21:34] <RabidGravy> haven't used curses in anger this century ;-)

[21:35] <hankache> AlexDaniel what is the problem with >>.say ?

[21:35] <MadcapJake> lizmat: well none of them seem related to actually the p6doc command :P

[21:35] <AlexDaniel> hankache: because it is unordered

[21:35] <Ulti> hankache the result of >> is ordered but whilst its executing its not

[21:35] *** itaipu joined
[21:35] <AlexDaniel> hankache: you are trying to demonstrate the difference between hyper and race, yet you are printing the results in random order‚Ä¶

[21:35] <Ulti> so .say executes out of order returning a bunch of trues "in order"

[21:36] *** llfourn left
[21:36] <Skarsnik> Good night here ^^

[21:37] <hankache> oh i see i, so >>. is the culprit

[21:37] <nine> brrt: everything I care about seems to work just fine :)

[21:37] <brrt> what platform are you on?

[21:37] <autarch> RabidGravy: thanks

[21:37] <nine> openSUSE

[21:37] <FritzZaucker> RabidGravy: thanks! Very nice to get answers to such simple-minded questions while you guys are extremly busy fixing and working on many much more fundamental things ...

[21:37] <brrt> okay thanks

[21:38] <brrt> i'm looking for windows / osx tests, too

[21:38] *** orq joined
[21:38] <orq> hi

[21:38] <brrt> hi orq

[21:38] <nine> Skarsnik: t/04-nativecall/04-pointers.t is failing: # Error: In 'TakeTwoPointersToInt' routine declaration - Not an accepted NativeCall type for parameter [1]  : NativeCall::Types::Pointer[Int]

[21:39] <Skarsnik> My mad, I was to angry at git to rebuild rakudo/nqp/moar x)

[21:40] <Skarsnik> *bad

[21:40] <Skarsnik> I added check for the content of Pointer

[21:40] <hankache> AlexDaniel Ulti but if i replace it with a foor loop it is still unordered!

[21:40] <Ulti> hankache what code?

[21:40] <hankache> AlexDaniel Ulti what should i use to *print in oder* ?

[21:40] <AlexDaniel> .say for @arr

[21:41] <Ulti> hankache I was suggesting the for loop construct in addition to the other things you have in the tutorial

[21:41] <RabidGravy> FritzZaucker, I'm just hacking some stuff upp so I can have blinken lights an a raspberry pi :)

[21:41] <FritzZaucker> RabidGravy: :-)

[21:41] <Ulti> hankache well you can't print "in order" whilst concurrently executing thats kind of the point you can print the result which is reordered to match the input order

[21:41] <Skarsnik> nine, etheir change this test to not have a Pointer[Int] or remove that in the sanity check routine x)

[21:42] <brrt> anyway, i'll try tomorrow

[21:42] <brrt> i'm a bit too sleepy now

[21:42] *** brrt left
[21:42] *** acrussell left
[21:43] <hankache> AlexDaniel .say for @arr still not ordered

[21:43] <Ulti> hankache the difference isn't that one ensures the order of execution it only ensures the order of the result of execution

[21:43] <Ulti> hankache: just a normal for loop?

[21:43] <Ulti> erk

[21:43] <hankache> Ulti yes but I stored it in an array

[21:43] <Ulti> stored what in an array?

[21:44] <Ulti> the result?

[21:44] <hankache> yes

[21:44] <Ulti> that should work 

[21:44] <hankache> so it should be stored in order

[21:44] *** acrussell joined
[21:44] <Ulti> throw in a m: here maybe?

[21:44] <hankache> m: my @array = (1..100); my @result = @array.hyper.map( {$_ + 1} ); .say for @result;

[21:44] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´66‚ê§67‚ê§68‚ê§69‚ê§70‚ê§71‚ê§72‚ê§73‚ê§74‚ê§75‚ê§76‚ê§77‚ê§78‚ê§79‚ê§80‚ê§81‚ê§82‚ê§83‚ê§84‚ê§85‚ê§86‚ê§87‚ê§88‚ê§89‚ê§90‚ê§91‚ê§92‚ê§93‚ê§94‚ê§95‚ê§96‚ê§97‚ê§98‚ê§99‚ê§100‚ê§101‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚Ä¶¬ª

[21:45] <AlexDaniel>  m: my @array = (1..100); my @result = @array.race.map( {$_ + 1} ); .say for @result

[21:45] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§26‚ê§27‚ê§28‚ê§29‚ê§30‚ê§31‚ê§32‚ê§33‚ê§34‚ê§35‚ê§36‚ê§37‚ê§38‚ê§39‚ê§40‚ê§41‚ê§42‚ê§43‚ê§44‚ê§45‚ê§46‚ê§47‚ê§48‚ê§49‚ê§50‚ê§51‚ê§52‚ê§53‚ê§54‚Ä¶¬ª

[21:45] <AlexDaniel>  m: my @array = (1..100); my @result = @array.map( {$_ + 1} ); .say for @result

[21:45] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§26‚ê§27‚ê§28‚ê§29‚ê§30‚ê§31‚ê§32‚ê§33‚ê§34‚ê§35‚ê§36‚ê§37‚ê§38‚ê§39‚ê§40‚ê§41‚ê§42‚ê§43‚ê§44‚ê§45‚ê§46‚ê§47‚ê§48‚ê§49‚ê§50‚ê§51‚ê§52‚ê§53‚ê§54‚Ä¶¬ª

[21:46] <Skarsnik> nine, wait travis build does not run make test in rakudo? It was showing no error

[21:46] <lizmat> hmmm... that looks like hyper and race are reversed ?

[21:46] <Ulti> m: my @array = (1..100); my @result = eager @array.hyper.map( {$_ + 1} ); .say for @result;

[21:46] <camelia> rakudo-moar 3dc7d5: OUTPUT¬´2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§26‚ê§27‚ê§28‚ê§29‚ê§30‚ê§31‚ê§32‚ê§33‚ê§34‚ê§35‚ê§36‚ê§37‚ê§38‚ê§39‚ê§40‚ê§41‚ê§42‚ê§43‚ê§44‚ê§45‚ê§46‚ê§47‚ê§48‚ê§49‚ê§50‚ê§51‚ê§52‚ê§53‚ê§54‚Ä¶¬ª

[21:46] <Ulti> need the eager

[21:46] <Ulti> which makes it look like the race isnt racing...

[21:46] <Ulti> or is eager

[21:47] <webstrand> Is there any meaning to the slurpy operator in assignment? For instance:`my (*@a) = (1,2),(3,4)` seems like it should flatten (and one tutorial say that it does)

[21:47] <AlexDaniel> lizmat: yea, I don't get it. What's wrong with hyper?

[21:47] <hankache> i think hyper is drunk

[21:47] <lizmat> insufficiently tested ?  :-)

[21:47] <dalek> rakudo/nom: adb1608 | (Stefan Seifert)++ | t/04-nativecall/04-pointers.t:

[21:47] <dalek> rakudo/nom: Fix test using invalid types for NativeCall

[21:47] <dalek> rakudo/nom: 

[21:47] <dalek> rakudo/nom: Pointer to Int doesn't make sense in NativeCall, since Int is no C type.

[21:47] <dalek> rakudo/nom: Use Pointer[int32] instead as that will translate to int* in C.

[21:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/adb16084ea

[21:47] <AlexDaniel> lizmat: I could understand it if race is not doing it randomly for some reason, but hyper?

[21:47] *** rburkholder joined
[21:48] <hankache> AlexDaniel if you use a bigger range race is unorderd so that's fine

[21:48] <dalek> doc: b4efa2c | lizmat++ | doc/Type/DateTime.pod:

[21:48] <dalek> doc: Make :timezone always be a named (optional) param

[21:48] <dalek> doc: review: https://github.com/perl6/doc/commit/b4efa2ca69

[21:48] <hankache> i tested on latest rakudo on my machine

[21:49] <Ulti> hankache then the answer there is you are late binding the map rather than getting the "list" not sure that is how it should be working though

[21:50] *** FritzZaucker left
[21:51] <Ulti> my @numbers = await do for 1..10 -> $n { start { return $n } }; say @numbers;

[21:51] <Ulti> m: my @numbers = await do for 1..10 -> $n { start { return $n } }; say @numbers;

[21:51] <camelia> rakudo-moar adb160: OUTPUT¬´Attempt to return outside of any Routine‚ê§  in block <unit> at /tmp/s_28_CAlJs line 1‚ê§‚ê§¬ª

[21:51] <Ulti> orly

[21:51] <hankache> so is hyper buggy or are we completely doing it wrong?

[21:52] <Ulti> hankache with the eager it does what is sort of expected

[21:52] <Ulti> might be a bug

[21:52] <Ulti> someone who knows the one true nature of Perl 6 will have to answer

[21:52] <AlexDaniel> TimToady: perhaps ‚Äúwe‚Äù can answer

[21:53] *** geraud joined
[21:53] <Ulti> hankache also the example you give is a bit more natural with a parallel grep which is currently not working... iirc

[21:54] *** Skarsnik left
[21:54] *** anaeem1 joined
[21:54] *** anaeem1 left
[21:55] <hankache> Ulti eager doesn't solve it

[21:55] <Ulti> orly? did just now :S

[21:55] <hankache> try it with big sets on your local machine

[21:56] <hankache> try this: my @array = (1..10000); my @result = eager @array.hyper.map( {$_ + 1} ); .say for @result;

[21:57] <Ulti> m: my @array = (1..5); my @result = eager @array.hyper.map( {sleep $_; $_ + 1 }); .say for @result;

[21:57] <nine> .tell Skarsnik does perl6 -e 'use Test::More:from<Perl5>; diag("foo")' # print "# foo"? If yes, we have established that passing strings from Perl 6 to Perl 5 works and it's the other way around that's the issue

[21:57] <yoleaux> nine: I'll pass your message to Skarsnik.

[21:57] <AlexDaniel> m: my @result = ^1000 .hyper.map: * + 10; say @result ~~ @result.sort

[21:58] <nine> Good night all!

[21:58] <camelia> rakudo-moar adb160: OUTPUT¬´2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§¬ª

[21:58] <camelia> rakudo-moar adb160: OUTPUT¬´False‚ê§¬ª

[21:58] <AlexDaniel> m: my @result = eager ^1000 .hyper.map: * + 10; say @result ~~ @result.sort

[21:58] <camelia> rakudo-moar adb160: OUTPUT¬´False‚ê§¬ª

[21:58] <Ulti> hmm wait a second that wont work

[21:58] <AlexDaniel> m: my @result = eager { ^1000 .hyper.map: * + 10 }; say @result ~~ @result.sort

[21:58] <camelia> rakudo-moar adb160: OUTPUT¬´False‚ê§¬ª

[21:58] <Ulti> m: my @array = (1..5); my @result = eager @array.hyper.map( {sleep 5 - $_; $_ + 1 }); .say for @result;

[21:58] <camelia> rakudo-moar adb160: OUTPUT¬´2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§¬ª

[21:58] <Ulti> nope still works

[21:59] <Ulti> that should be reverse sleep sorting them

[21:59] <AlexDaniel> m: my @result = eager ^5 .hyper.map: * + 10; say @result ~~ @result.sort

[21:59] <camelia> rakudo-moar adb160: OUTPUT¬´True‚ê§¬ª

[21:59] *** bitmap left
[21:59] <AlexDaniel> Ulti: 1..5 is not enough

[21:59] <Ulti> m: my @array = (1..5); my @result = eager @array.race.map( {sleep 5 - $_; $_ + 1 }); .say for @result;

[21:59] <camelia> rakudo-moar adb160: OUTPUT¬´2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§¬ª

[21:59] <Ulti> AlexDaniel what with a difference in seconds of their execution time?

[22:00] <hankache> m: my @array = (1..10000); my @result = eager @array.hyper.map( {$_ + 1} ); .say for @result;

[22:00] <camelia> rakudo-moar adb160: OUTPUT¬´2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§26‚ê§27‚ê§28‚ê§29‚ê§30‚ê§31‚ê§32‚ê§33‚ê§34‚ê§35‚ê§36‚ê§37‚ê§38‚ê§39‚ê§40‚ê§41‚ê§42‚ê§43‚ê§44‚ê§45‚ê§46‚ê§47‚ê§48‚ê§49‚ê§50‚ê§51‚ê§52‚ê§53‚ê§54‚Ä¶¬ª

[22:00] <Ulti> or is that micro seconds

[22:00] <AlexDaniel> Ulti: true-true

[22:00] <Ulti> though a bit odd both of them are sorted

[22:00] <hankache> run this ^^ on your machine it will not be sorted

[22:01] <hankache> try on using your local copy of rakudo

[22:01] *** kaare_ left
[22:01] <Ulti> comes out sorted on my machine hankache 

[22:02] <Ulti> hankache are you on the 2015.12 release or the latest commit?

[22:02] <AlexDaniel> m: my @array = (1..10000); my @result = eager @array.hyper.map( {$_ + 1} ); say @result ~~ @result.sort; # are you sure?

[22:02] <camelia> rakudo-moar adb160: OUTPUT¬´False‚ê§¬ª

[22:02] <hankache> Ulti this ==> ?? my @array = (1..10000); my @result = eager @array.hyper.map( {$_ + 1} ); .say for @result;

[22:02] <Ulti> yup

[22:02] <AlexDaniel> Ulti: even on camelia it is not sorted

[22:02] <Ulti> just copy pasted that direct into my p6 and it came out ordered, might be its only dual core 

[22:02] <hankache> Ulti This is Rakudo version 2015.12-46-gd08e043 built on MoarVM version 2015.12

[22:03] <RabidGravy> m: my @array = (1..10000); my @result-a = eager @array.hyper.map( {$_ + 1} ); .my @result-b = @array.map({$_ + 1}); say @result-a ~~ @result-b;

[22:03] <camelia> rakudo-moar adb160: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/iMPcFG8_Ww‚ê§Two terms in a row‚ê§at /tmp/iMPcFG8_Ww:1‚ê§------> 3 eager @array.hyper.map( {$_ + 1} ); .my7‚èè5 @result-b = @array.map({$_ + 1}); say @‚ê§    expecting any of:‚ê§        infix‚ê§        infi‚Ä¶¬ª

[22:03] <RabidGravy> m: my @array = (1..10000); my @result-a = eager @array.hyper.map( {$_ + 1} ); my @result-b = @array.map({$_ + 1}); say @result-a ~~ @result-b;

[22:03] <camelia> rakudo-moar adb160: OUTPUT¬´False‚ê§¬ª

[22:03] <RabidGravy> ~~

[22:03] *** Arrowhead joined
[22:04] <AlexDaniel> it is pretty clear that it does not really work‚Ä¶

[22:04] *** Begi left
[22:04] *** Arrowhead_ left
[22:04] *** FritzZaucker joined
[22:04] <Ulti> yeah there is defo something not right

[22:04] <hankache> Haa!

[22:04] *** bitmap joined
[22:04] <AlexDaniel> ‚ÄúThe order of elements are preserved.‚Äù ‚Äì oops, ‚Äúis preserved‚Äù

[22:04] <hankache> hyper == drunk

[22:05] *** perigrin left
[22:05] <Ulti>  m: my @array = (1..10000); my @result-a = eager @array.race.map( {$_ + 1} ); .my @result-b = @array.map({$_ + 1}); say @result-a ~~ @result-b;

[22:05] <camelia> rakudo-moar adb160: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/lHea3pq7Fl‚ê§Two terms in a row‚ê§at /tmp/lHea3pq7Fl:1‚ê§------> 3= eager @array.race.map( {$_ + 1} ); .my7‚èè5 @result-b = @array.map({$_ + 1}); say @‚ê§    expecting any of:‚ê§        infix‚ê§        infi‚Ä¶¬ª

[22:05] *** spider-mario left
[22:06] <Ulti> m: my @array = (1..10000); my @result-a = eager @array.race.map( {$_ + 1} ); my @result-b = @array.map({$_ + 1}); say @result-a ~~ @result-b;

[22:06] <camelia> rakudo-moar adb160: OUTPUT¬´False‚ê§¬ª

[22:06] <hankache> AlexDaniel ‚ÄúThe order of elements are preserved.‚Äù ‚Äì oops, ‚Äúis preserved‚Äù where in my text ??

[22:07] *** pierre-v_ left
[22:07] *** ugexe left
[22:07] <dalek> doc: 276e344 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/Iterable.pod:

[22:07] <dalek> doc: ‚ÄúOrder are preserved‚Äù ‚Üí ‚ÄúOrder is preserved‚Äù

[22:07] <dalek> doc: review: https://github.com/perl6/doc/commit/276e3442dd

[22:07] <AlexDaniel> hankache: not in your text!

[22:07] <hankache> ahhh

[22:07] *** spider-mario joined
[22:08] <hankache> Blasphemy ;)

[22:09] <webstrand> I'm guessing, since S02 says that declarators are parsed as signatures, that the signature information is discarded when the declarator is used in list context. Am I misunderstanding anything?

[22:09] *** rburkholder left
[22:10] *** regreg left
[22:11] <masak> tadzik, lizmat, @others: of interest -- http://blog.ezyang.com/2015/12/the-convergence-of-compilers-build-systems-and-package-managers/

[22:11] *** orq left
[22:11] <Rotwang> If I have something like my $s = Supply.interval(5); whenever $s { .say; }

[22:13] *** hankache left
[22:13] *** hankache joined
[22:15] <jdv79> im in @others i guess.  thanks.

[22:15] *** integral left
[22:15] *** Praise left
[22:15] <jdv79> though i might forget to read that

[22:16] *** stmuk left
[22:16] *** Rotwang left
[22:16] *** jnthn left
[22:16] *** smash left
[22:16] *** integral joined
[22:16] *** integral left
[22:16] *** integral joined
[22:19] *** Jonis left
[22:19] *** amoe left
[22:19] *** lnx left
[22:20] <hankache> good night #perl6

[22:20] <hankache> see ya tomorrow

[22:20] <jdv79> peace

[22:21] *** hankache left
[22:21] *** integral left
[22:22] * masak .oO( ‚òÆ )

[22:24] *** integral joined
[22:24] *** stmuk joined
[22:24] *** Praise joined
[22:24] *** Praise left
[22:24] *** Praise joined
[22:24] *** Praise left
[22:24] <jdv79> i cant see that

[22:25] *** smash joined
[22:26] *** Zero_Dogg left
[22:26] *** FritzZaucker left
[22:27] *** Jonis joined
[22:27] *** Zero_Dogg joined
[22:28] *** lnx joined
[22:28] *** spider-mario left
[22:28] *** amoe joined
[22:28] *** Rotwang joined
[22:28] *** jnthn joined
[22:29] *** Arrowhead left
[22:30] *** Arrowhead joined
[22:32] *** llfourn joined
[22:33] *** Idiosyncrat left
[22:34] *** ugexe joined
[22:34] *** spider-mario joined
[22:37] <lizmat> .u ‚òÆ

[22:37] <yoleaux> U+262E PEACE SYMBOL [So] (‚òÆ)

[22:37] <Rotwang> Hello again

[22:37] <lizmat> jdv79 ^^^

[22:37] <Rotwang> this looks like a bug?

[22:37] <Rotwang> m: react { Supply.interval(1).tap: -> { .say } }

[22:37] <camelia> rakudo-moar adb160: OUTPUT¬´Unhandled exception in code scheduled on thread 4‚ê§¬ª

[22:37] *** lucasb joined
[22:38] *** perigrin joined
[22:38] *** llfourn left
[22:38] *** SwellJoe left
[22:38] <lizmat> Rotwang: agree the error is LTA

[22:39] <lizmat> m: react { whenever Supply.interval(1) { .say } }   # correct syntax

[22:39] <camelia> rakudo-moar adb160: OUTPUT¬´(timeout)0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§21‚ê§¬ª

[22:39] *** itaipu left
[22:39] <Rotwang> lizmat: ok, thanks

[22:39] <lizmat> Rotwang: could you rakudobug that ?

[22:40] <Rotwang> lizmat: sure

[22:40] <lizmat> Rotwang++

[22:40] <zostay> m: my %v = x => rx/Foo/; my $smart = %v<x>; my $match = "Foo" ~~ $smart; dd $match

[22:40] <camelia> rakudo-moar adb160: OUTPUT¬´Bool $match = Bool::True‚ê§¬ª

[22:40] <zostay> shouldn't that be a Match?

[22:40] <zostay> m: my %v = x => rx/Foo/; my $smart := %v<x>; my $match = "Foo" ~~ $smart; dd $match

[22:40] <camelia> rakudo-moar adb160: OUTPUT¬´Bool $match = Bool::True‚ê§¬ª

[22:41] <lucasb> zostay: https://rt.perl.org/Public/Bug/Display.html?id=127071

[22:41] <lucasb> in other words, yes, I think it's a bug :)

[22:42] *** Praise joined
[22:42] *** Praise left
[22:42] *** Praise joined
[22:43] <jdv79> lizmat: thanks.  i guess irssi or connectbot or android or something else is fail.

[22:43] <zostay> the reason Path::Router is broken is that... :(

[22:44] *** jnthn left
[22:44] *** jnthn joined
[22:45] *** Jonis left
[22:45] <zostay> m: my %v = x => /Foo/; my $smart := %v<x>; my $match = "Foo" ~~ $smart; dd $match

[22:45] <camelia> rakudo-moar adb160: OUTPUT¬´Bool $match = Bool::True‚ê§¬ª

[22:45] *** Jonis joined
[22:45] *** stmuk left
[22:45] *** amoe left
[22:45] *** stmuk joined
[22:45] <zostay> m: my %v = x => /Foo/; my $smart = %v<x>; my $match = "Foo" ~~ $smart; dd $match

[22:45] <camelia> rakudo-moar adb160: OUTPUT¬´Bool $match = Bool::True‚ê§¬ª

[22:45] *** Rotwang left
[22:47] *** telex left
[22:47] <webstrand> What's the difference between `constant x = *` and `my \x = *` ?

[22:48] <zostay> m: my %v = x => /Foo/; my $smart = %v<x>; my $match = given $smart { when Regex { "Foo" ~~ /$smart/ } default { "Foo" ~~ $smart } }; dd $match

[22:48] <camelia> rakudo-moar adb160: OUTPUT¬´5===SORRY!5===‚ê§Word 'given' interpreted as a listop; please use 'do given' to introduce the statement control word‚ê§at /tmp/6_yTptgEKs:1‚ê§------> 3o/; my $smart = %v<x>; my $match = given7‚èè5 $smart { when Regex { "Foo" ~~ /$smart/‚ê§Unexpecte‚Ä¶¬ª

[22:48] <dj_goku> So I am building a enum, but the zeroth item isn't used so I put Nil. Is there a way to say start at 1 vs 0 indexing? What is the best way to skip an item?

[22:48] <zostay> m: my %v = x => /Foo/; my $smart = %v<x>; my $match = do given $smart { when Regex { "Foo" ~~ /$smart/ } default { "Foo" ~~ $smart } }; dd $match

[22:48] <camelia> rakudo-moar adb160: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/Xw_8GSLKAb‚ê§Strange text after block (missing semicolon or comma?)‚ê§at /tmp/Xw_8GSLKAb:1‚ê§------> 3smart { when Regex { "Foo" ~~ /$smart/ }7‚èè5 default { "Foo" ~~ $smart } }; dd $matc‚ê§¬ª

[22:48] <zostay> m: my %v = x => /Foo/; my $smart = %v<x>; my $match = do given $smart { when Regex { "Foo" ~~ /$smart/ }; default { "Foo" ~~ $smart } }; dd $match

[22:48] <camelia> rakudo-moar adb160: OUTPUT¬´Match $match = Match.new(ast => Any, list => (), hash => Map.new(()), orig => "Foo", to => 3, from => 0)‚ê§¬ª

[22:48] <dj_goku> by skip I mean say the 5 item isn't used?

[22:48] *** telex joined
[22:48] <zostay> that is a horrible work-around...

[22:48] <dj_goku> zostay: are you referring to me?

[22:48] <zostay> no

[22:49] <zostay> my convo with lucasb

[22:49] <dj_goku> ahh.

[22:49] *** Jonis left
[22:49] <dj_goku> zostay == sterling right?

[22:49] <zostay> sshhhh... ;^p

[22:49] <dj_goku> :D

[22:49] *** Notwang joined
[22:49] *** smash left
[22:49] *** stmuk left
[22:50] <Notwang> I'm getting disconnected all the time

[22:50] <dj_goku> Still in Manhattan?

[22:50] *** jnthn left
[22:50] *** lnx left
[22:50] *** stmuk joined
[22:50] *** jnthn joined
[22:50] <Notwang> here is what I want to do: http://paste.lisp.org/display/304214

[22:50] *** Jonis joined
[22:50] *** integral left
[22:50] <zostay> yes

[22:50] *** integral joined
[22:50] *** rindolf left
[22:50] <zostay> you still in kc?

[22:51] *** lnx joined
[22:51] <dj_goku> zostay: cool, yeah. a few of us are trying to revive kc.pm

[22:51] *** smash joined
[22:51] <Notwang> I want to have two "threads" and control one of them from the other

[22:51] <dj_goku> With perl6 I am super excited! my day job I am writing python so I have kind of lost touch with perl.

[22:52] <lizmat> Notwang: have you looked at Supply.throttle ?

[22:52] *** Rotwang joined
[22:52] *** mempko_ left
[22:53] <Notwang> lizmat: I think it is not what I am after

[22:53] <Notwang> I'd like to close the socket only when certain condition happens in other "thread"

[22:53] <lizmat> could you elaborate on what you *are* after?  :-)

[22:53] *** amoe joined
[22:54] <lucasb> m: say enum E (a=>1, |<b c d>); say E.enums

[22:54] <camelia> rakudo-moar adb160: OUTPUT¬´Map.new((:a(1),:b(2),:c(3),:d(4)))‚ê§a => 1, b c d => 2‚ê§¬ª

[22:54] *** spider-mario left
[22:54] <lizmat> perhaps a Promise with a then could do the trick ?

[22:54] <Notwang> lizmat: lets say I'm testing if file exists periodically, and when the file dissapears I want to close the socket

[22:54] <Notwang> that is simplified usecase

[22:55] *** spider-mario joined
[22:55] <lucasb> ^^ strange, the first line says it understand it's 4 elements, but then, the second line shows only 2 elements: "a" and "b c d"

[22:55] <lizmat> make a Promise that will be kept if the file disappears, and have a then on that promise that will close the socket ?

[22:56] <Notwang> lizmat: sounds good, I'll read more on that

[22:56] <dj_goku> m: say enum E (a=>1, |<b c d>); say b.Numeric

[22:56] <camelia> rakudo-moar adb160: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/wfyRE3m7aD‚ê§Undeclared routine:‚ê§    b used at line 1‚ê§‚ê§¬ª

[22:57] <El_Che> ian murdock:(

[22:57] *** newbie joined
[22:57] *** newbie is now known as Guest9702

[22:57] <Notwang> lizmat: however the docs on Async socket states that: "In order to close the underlying listening socket created by listen you can simply close the Supply."

[22:58] <Notwang> so the question is how do I even close the supply?

[22:58] <gfldex>  m: say enum E (a=>1, 'b', 'c', 'd'); dd E

[22:58] <camelia> rakudo-moar adb160: OUTPUT¬´Map.new((:a(1),:b(2),:c(3),:d(4)))‚ê§E‚ê§¬ª

[22:58] <Notwang> close method is not defined for it

[22:58] <perlpilot> Notwang: Supply.done IIRC

[22:58] <perlpilot> or $supply.done 

[22:58] <El_Che> http://blogs.perl.org/users/jt_smith/2015/12/christmas-came-bah-humbug.html <-- weird post, but probably somewhat reprentative

[22:58] <lizmat> what perlpilot says

[22:58] *** yqt left
[22:58] <lucasb> In other words, I was expecting the slip to just work there, inside enum lists, but it seems it doesn't.

[22:59] <lizmat> El_Che: yeah, already commented on it

[22:59] <lizmat> lucasb: perhaps worthy of a rakudobug

[22:59] <El_Che> oh I see

[22:59] <dj_goku> gfldex: ahh ha!

[22:59] <Notwang> perlpilot: No such method 'done' for invocant of type 'Supply'

[22:59] *** espadrine left
[23:00] <Notwang> close is also not defined for Supply

[23:00] <lizmat> ah, caught by the SSR  (Small Supply refactor(

[23:00] <lizmat> you need to call .done on the Supplier

[23:00] <Notwang> However http://doc.perl6.org/type/Supply state that close is available

[23:01] * Notwang is very confused

[23:01] * lizmat will fix the doc

[23:01] <perlpilot> ah, yes.  $supplier.done

[23:01] <perlpilot> lizmat++

[23:01] <Notwang> lizmat: who is the supplier in this case?

[23:01] <dalek> rakudo/nom: eca5df7 | lizmat++ | src/core/ (2 files):

[23:01] <dalek> rakudo/nom: Make timezone *always* a named on DateTime.new

[23:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eca5df7cc9

[23:01] <lizmat> Notwang: good question :-)

[23:03] <RabidGravy> oh I thought I had remove the close from Supply

[23:04] <Notwang> RabidGravy: what did you give instead? ;f

[23:05] <RabidGravy> no from the doc

[23:05] <RabidGravy> what are you trying to do?

[23:06] <Notwang> RabidGravy: general idea of what I want to do http://paste.lisp.org/display/304214

[23:07] <ugexe> how do i use a specific version of a module?

[23:07] <dj_goku> weird

[23:07] *** pierre-vigier joined
[23:07] <jdv79> ugexe: doesnt it work mow?

[23:07] <jdv79> now

[23:07] <dj_goku> m: say enum E <:a(1) b c d>

[23:07] <camelia> rakudo-moar adb160: OUTPUT¬´Map.new((":a(1)" => 0,:b(1),:c(2),:d(3)))‚ê§¬ª

[23:07] <dj_goku> m: say enum E <<:a(1) b c d>>

[23:07] <camelia> rakudo-moar adb160: OUTPUT¬´Map.new((:a(1),:b(2),:c(3),:d(4)))‚ê§¬ª

[23:08] <dj_goku> m: say enum E <<:a(1) b :c(4) d>>

[23:08] <camelia> rakudo-moar adb160: OUTPUT¬´Map.new((:a(1),:b(2),:c(4),:d(5)))‚ê§¬ª

[23:08] <jdv79> :ver<0.011>

[23:08] <jdv79> on a use

[23:08] <ugexe> m: use Test:ver<*>;

[23:08] <camelia> rakudo-moar adb160: OUTPUT¬´===SORRY!===‚ê§Could not find Test:ver<*> in:‚ê§    /home/camelia/.perl6/2015.12-52-gadb1608‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6‚ê§    C‚Ä¶¬ª

[23:08] <RabidGravy> Notwang, just put the last whenever inside the first and call $conn.close

[23:08] <jdv79> i think i tried it.  it worked.  but i couldnt install multiple vers yet.

[23:09] <ugexe> does * not work for ver then?

[23:09] <jdv79> maybe dony do that for now:)

[23:09] <Notwang> RabidGravy: thanks (also just came up with it)

[23:10] <Notwang> RabidGravy: how can I create "whenever" blocks at runtime? is whenever equivalent to tap?

[23:10] <jdv79> its supposed to take anything that can smartmatch so i tbink it should work

[23:10] <jdv79> eventually

[23:10] <RabidGravy> whenever is like tap in some ways yes

[23:10] <Notwang> okay, thanks

[23:11] <RabidGravy> it just covers a frequent use case

[23:11] <ugexe> use CSV::Parser:auth<github:tony-o>; does not work either

[23:11] *** pierre-vigier left
[23:12] <RabidGravy> you could just put a "Promise.in(15).then({$conn.close})" in outer whenever

[23:12] <jdv79> nine might be the only one at this point that knows

[23:12] <ugexe> i thought avoiding dependency hell was suppose to be a key point before release

[23:13] <jdv79> we have some serious bus factor factors round here

[23:13] <jdv79> who said that?

[23:14] <jdv79> cur landed slightly too late so id say no to that:(

[23:14] <jdv79> nobody's fault...

[23:15] <lizmat> .oO( too many takers, not enough givers )

[23:15] <jdv79> we all suck:(  sorry.

[23:15] <ugexe> there were other givers that were turned down

[23:16] <lizmat> ugexe: ??

[23:16] <jdv79> kudos to those that tried and or did though!

[23:16] <ugexe> tony-o explicity offered

[23:17] <lizmat> well, if there's anything I've learned here, is that you should do instead of offer

[23:17] <lizmat> and be prepared to flush it down the drain if it isn't accepted after alle

[23:17] <lizmat> *all

[23:18] <ugexe> he did, and then boilerplate was merged

[23:18] <ugexe> and thus he did flush it

[23:19] <dalek> rakudo-star-daily: d2f859a | coke++ | log/ (8 files):

[23:19] <dalek> rakudo-star-daily: today (automated commit)

[23:19] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d2f859a0d4

[23:20] <jdv79> good news is its barely tested so it might be fixable under cover of 6.c:)

[23:20] *** devans2 joined
[23:22] <devans2> hiya, so i've installed perl6 and gotten some modules to install, is there a perl6 version of perldoc that i can run from the command line?

[23:22] <RabidGravy> p6doc

[23:22] <dj_goku> devans2: https://github.com/perl6/doc

[23:22] <RabidGravy> you'll need to install it like "panda install p6doc"  

[23:23] <devans2> ah thank you

[23:23] <RabidGravy> it'll install the core documentation, I'm not quire sure what the state of getting the module docs is right at this moment

[23:23] *** araujo left
[23:24] <jdv79> last i checked it was not goid.

[23:24] <jdv79> good

[23:24] *** araujo joined
[23:24] *** webstrand left
[23:24] <jdv79> as is the path was needed.  not the name.

[23:24] <lizmat> looking at the Supply doc, it seems to have missed an overhaul after the SSR

[23:25] <devans2> yeah, looks like p6doc fails to pass the tests on install, guess that's an opportunity to learn some more perl6

[23:25] <jdv79> ussr!

[23:25] <lizmat> it will probably have to wait until jnthn is back from R&R

[23:25] <jdv79> whats a ssr!

[23:25] <lizmat> Small Supply Refactor

[23:25] <RabidGravy> lizmat, I looked at it and took out some stuff

[23:25] <jdv79> i keep hitting ! instead of ?

[23:25] <jdv79> sorry

[23:25] <lizmat> aka the splitting off of Supplier

[23:26] <jdv79> ah, that.

[23:26] <lizmat> I need to think about this after a good night sleep

[23:26] <lizmat> so good night, #perl6 !

[23:26] <RabidGravy> yeah, I moved the emit and stuff to a new Supplier doc

[23:27] *** Notwang left
[23:27] <RabidGravy> and changed the introductory text to reflect the new world order but may not have reflected all the changes

[23:27] *** pmurias left
[23:28] *** pmurias joined
[23:33] *** lucasb left
[23:33] *** ZoffixWin joined
[23:33] *** ZoffixWin left
[23:33] *** ZoffixWin joined
[23:34] <ZoffixWin> flussence, can you press CTRL+F5 and try perl6.org again? I fixed the wrapon-two-lines thing this morning in https://github.com/perl6/perl6.org/commit/cbb9efa09230f5117be84d8ae6fab3c8c0d7c54a

[23:34] <ZoffixWin> flussence, and if the issue is still there... what browser/OS are you using (and screenshot, if possible). I'll fix it tomorrow morning :)

[23:34] <flussence> looks much better now :D

[23:34] <ZoffixWin> Ah \o/

[23:35] *** llfourn joined
[23:35] <dj_goku> ZoffixWin: just who I wanted to see!

[23:36] <ZoffixWin> orly :)

[23:36] <ZoffixWin> Why? :)

[23:36] <jdv79> lizmat: later

[23:36] <flussence> the right edge of that blue box in the announcement looks slightly weird to me because of the way the box shadow's placed, I think that's just me being picky though

[23:36] <dj_goku> ZoffixWin: so I saw your mr for lxymin was merged. I wanted to add a few examples of enum.

[23:36] <dj_goku> I guess I should just open a new PR

[23:37] <ZoffixWin> dj_goku, yeah

[23:37] <ZoffixWin> vendethiel / Ven has merge powers, I believe.

[23:37] <vendethiel> hi?

[23:37] <vendethiel> (either will highlight me on both clients :).)

[23:37] <ZoffixWin> :P

[23:37] <dj_goku> lol

[23:38] <vendethiel> dj_goku: yeah, I do the merges on lxiny often

[23:38] <dj_goku> Alright I'll a few enum examples.

[23:38] <dj_goku> and submit a PR!

[23:39] *** llfourn left
[23:40] <AlexDaniel> hmm, nobody commented on hyper issue and nobody submitted a bug report

[23:41] <AlexDaniel> I'll submit it then‚Ä¶ if it is supposed to be this then ok, at least I'll get a nice email notification about that :)

[23:41] <ZoffixWin> Hyper issue?

[23:41] <AlexDaniel> m: my @result = eager ^10000 .hyper.map: * + 10; say @result ~~ @result.sort

[23:41] <camelia> rakudo-moar eca5df: OUTPUT¬´False‚ê§¬ª

[23:41] <AlexDaniel> m: my @result = eager ^5 .hyper.map: * + 10; say @result ~~ @result.sort

[23:41] <camelia> rakudo-moar eca5df: OUTPUT¬´True‚ê§¬ª

[23:41] <ZoffixWin> :o

[23:41] <AlexDaniel> hmm eager is not needed here

[23:41] <AlexDaniel> m: my @result = ^10000 .hyper.map: * + 10; say @result ~~ @result.sort

[23:41] <camelia> rakudo-moar eca5df: OUTPUT¬´False‚ê§¬ª

[23:42] <ZoffixWin> m: my @result = ^10000 .map: * + 10; say @result ~~ @result.sort

[23:42] <AlexDaniel> this should give True because hyper is supposed to give the results in the same order

[23:42] <camelia> rakudo-moar eca5df: OUTPUT¬´True‚ê§¬ª

[23:42] <AlexDaniel> at least that's how I understand it

[23:42] <ZoffixWin> Right

[23:43] <AlexDaniel> ZoffixWin: what did you win?

[23:44] <ZoffixWin> Win == Windows. My gaming "console" :P

[23:44] <AlexDaniel> Why not use ‚ÄúZoffixWindows‚Äù then :D

[23:44] <ZoffixWin> Are you sure it's .hyper that's the issue?

[23:45] <ZoffixWin> m: my @result = ^10 .hyper(:1batch).map: *+0; say @result ~~ @result.sort

[23:45] <camelia> rakudo-moar eca5df: OUTPUT¬´False‚ê§¬ª

[23:45] <AlexDaniel> ZoffixWin: I have no idea

[23:45] <ZoffixWin> m: my @result = ^10 .hyper(:1batch).map: *+0; say [@result, @result.sort]

[23:45] <camelia> rakudo-moar eca5df: OUTPUT¬´[[0 2 1 3 4 5 6 8 9 7] (0 1 2 3 4 5 6 7 8 9)]‚ê§¬ª

[23:45] <AlexDaniel> something is definitely wrong‚Ä¶

[23:45] <ZoffixWin> Oh, right, order's messed up

[23:45] * ZoffixWin had a few beers and is blind

[23:46] <ZoffixWin> m: my $wrong; for ^10 { my @result = ^10 .hyper.map: *+0; $wrong++ unless @result ~~ @result.sort }; say $wrong

[23:46] <camelia> rakudo-moar eca5df: OUTPUT¬´(Any)‚ê§¬ª

[23:46] <ZoffixWin> m: my $wrong; for 1..10 { my @result = ^10 .hyper.map: *+0; $wrong++ unless @result ~~ @result.sort }; say $wrong

[23:46] <camelia> rakudo-moar eca5df: OUTPUT¬´(Any)‚ê§¬ª

[23:47] <ZoffixWin> At least it's consistent at being wrong :P

[23:47] <ZoffixWin> or wait

[23:47] <AlexDaniel> I don't think so

[23:47] <AlexDaniel> but maybe it is

[23:48] <ZoffixWin> m: my $wrong; for 1..10 { .say; my @result = ^100 .hyper.map: *+0; $wrong++ unless @result ~~ @result.sort }; say $wrong

[23:48] <camelia> rakudo-moar eca5df: OUTPUT¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§Memory allocation failed; could not allocate 15016 bytes‚ê§¬ª

[23:48] <ZoffixWin> Interesting.

[23:48] <ZoffixWin> eh... night all :)

[23:48] *** ZoffixWin left
[23:49] <AlexDaniel> no, it is not consistent

[23:50] <flussence> that last one prints out 1..10 and 6 on separate lines here

[23:51] <flussence> (and I've also learned through experimentation that `ulimit -m` has zero effect on my system...)

[23:52] <AlexDaniel> hah

[23:53] <masak> 'night, #perl6

[23:55] *** yurivish_ left
[23:59] <jdv79> cya

[23:59] *** pmurias left
