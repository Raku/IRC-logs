[00:04] *** dp left
[00:09] <garu> El_Che: have you seen https://github.com/tokuhirom/p6-Getopt-Tiny? I'm not sure it does exactly that, but it could :)

[00:10] <ShimmerFairy> I saw a fleeting mention once somewhere in the docs about being able to replace the MAIN parser. But in any case, I don't think supporting '--option value' as an alternate syntax should be too much of a stretch for the default parser.

[00:17] *** dp joined
[00:24] *** laouji joined
[00:25] *** Peter_R left
[00:27] *** aborazmeh joined
[00:27] *** aborazmeh left
[00:27] *** aborazmeh joined
[00:36] *** laouji_ joined
[00:39] *** laouji left
[00:40] *** laouji_ left
[00:47] *** laouji joined
[00:49] *** mr_ron left
[00:53] *** leont left
[00:53] *** dp left
[00:54] *** kuzgun left
[00:57] <lichtkind> garu++

[01:11] <timotimo> El_Che: you can also preprocess the @*ARGS before your mainline runs to completion to fix up "--option value" pairs into "--option=value" pairs

[01:19] <ShimmerFairy> timotimo: would it be too much to support both by default? I've seen plenty of programs do so.

[01:20] <ShimmerFairy> I just noticed that short options require = too in P6, which seems especially weird. (I'd sooner try -ovalue or -o value instead of -o=value)

[01:36] *** laouji_ joined
[01:36] *** tokuhirom joined
[01:41] *** laouji_ left
[01:41] *** tokuhirom left
[01:44] *** vendethiel joined
[01:47] * [Coke] tries to convert the profiler html from jquery-bootstrap to angular-bootstrap. boom.

[01:57] *** mjp__ joined
[01:58] *** laouji left
[01:58] *** laouji joined
[02:06] *** laouji_ joined
[02:06] *** aborazmeh left
[02:08] *** vendethiel left
[02:10] *** lichtkind left
[02:10] *** laouji_ left
[02:12] *** kaare__ joined
[02:29] *** noganex_ joined
[02:31] *** colomon left
[02:32] *** noganex left
[02:33] *** kid51 left
[02:54] *** colomon joined
[03:18] *** diakopter left
[03:29] <dalek> nqp: e522c72 | coke++ | src/vm/moar/profiler/template.html:

[03:29] <dalek> nqp: use angular-bootstrap, not jquery-bootstrap

[03:29] <dalek> nqp: 

[03:29] <dalek> nqp: We're already using angular - use the ui.bootstrap module for all

[03:29] <dalek> nqp: our bootstrap needs; avoids loading two frameworks simultaneously.

[03:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e522c72da7

[03:29] *** diakopter joined
[03:30] * [Coke] un-booms it.

[03:32] *** travis-ci joined
[03:32] <travis-ci> NQP build failed. Will "Coke" Coleda 'use angular-bootstrap, not jquery-bootstrap

[03:32] <travis-ci> https://travis-ci.org/perl6/nqp/builds/83817866 https://github.com/perl6/nqp/compare/72b284cc0a31...e522c72da795

[03:32] *** travis-ci left
[03:38] *** aborazmeh joined
[03:38] *** aborazmeh left
[03:38] *** aborazmeh joined
[03:38] *** BenGoldberg left
[03:43] *** laouji left
[03:46] *** tokuhirom joined
[04:17] *** atweiden left
[04:21] *** laouji joined
[04:26] *** laouji left
[04:38] <zostay_> m: :16<deadbeef>

[04:38] <camelia> rakudo-moar 68f233: ( no output )

[04:38] <zostay_> m: :16<deadbeef>.say

[04:38] <camelia> rakudo-moar 68f233: OUTPUT«3735928559␤»

[04:39] <zostay_> m: :16<deadbeef>.perl.say

[04:39] <camelia> rakudo-moar 68f233: OUTPUT«3735928559␤»

[04:39] <zostay_> m: :16<deadbeefdeadbeefdeadbeefdeadbeef>.perl.say

[04:39] <camelia> rakudo-moar 68f233: OUTPUT«295990755083049101712519384020072382191␤»

[04:39] <zostay_> m: :16<deadbeefdeadbeefdeadbeefdeadbeef>.WHAT.say

[04:39] <camelia> rakudo-moar 68f233: OUTPUT«(Int)␤»

[04:40] <zostay_> m: :16{deadbeef}.say

[04:40] <camelia> rakudo-moar 68f233: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Bhjh0UAGl4␤Malformed radix number␤at /tmp/Bhjh0UAGl4:1␤------> 3:167⏏5{deadbeef}.say␤    expecting any of:␤        number in radix notation␤»

[04:40] <zostay_> are blob literals implemented at all?

[04:42] <ShimmerFairy> not currently

[04:43] *** laouji joined
[04:47] *** laouji left
[04:47] *** laouji joined
[04:47] *** Jaglor left
[04:56] *** khw left
[05:01] *** mattp__ left
[05:01] *** mattp__ joined
[05:02] *** kaare_ joined
[05:03] *** oka_ left
[05:03] *** oka_ joined
[05:03] *** grondilu left
[05:03] *** adhoc left
[05:03] *** grondilu joined
[05:03] *** kaare__ left
[05:03] *** cosimo left
[05:04] *** ssflying left
[05:04] *** shmibs left
[05:04] *** shmibs joined
[05:04] *** sjn joined
[05:04] *** ssflying joined
[05:05] *** adhoc joined
[05:05] *** skids left
[05:05] *** cosimo joined
[05:30] *** ][Sno][ left
[05:33] *** xfix joined
[05:33] *** xfix left
[05:33] *** xfix joined
[05:40] *** bjz joined
[05:44] *** bjz left
[05:51] *** llfourn joined
[05:54] *** ][Sno][ joined
[05:54] *** rurban joined
[05:55] *** aborazmeh left
[05:56] *** domidumont joined
[05:57] *** aborazmeh joined
[05:57] *** aborazmeh left
[05:57] *** aborazmeh joined
[06:00] *** domidumont left
[06:01] *** domidumont joined
[06:02] *** laouji left
[06:03] *** laouji joined
[06:14] <[Tux]> test             50000    38.657    38.547

[06:14] <[Tux]> test-t           50000    41.195    41.085

[06:14] <[Tux]> and Inline::Perl5 didn't build

[06:14] <[Tux]> http://tux.nl/Talks/CSV6/speed4.html

[06:14] *** diana_olhovik_ joined
[06:20] *** FROGGS left
[06:21] *** Calibellus left
[06:21] *** laouji_ joined
[06:25] *** laouji_ left
[06:27] *** domm_ left
[06:29] *** domm joined
[06:31] *** FROGGS joined
[06:33] *** darutoko joined
[06:35] *** Ven joined
[06:36] *** dylanwh_ left
[06:36] <FROGGS> masak: the precedece trait in the example existed in the old example (with the unicode "!") as well... I jusr re-borrowed it

[06:37] <Ven> hey

[06:37] <Ven> http://examples.perl6.org/categories/best-of-rosettacode/accumulator-factory.html <- seems like the code doesn't render. maybe someone has a clue? :)

[06:41] <FROGGS> Ven: can you file an issue?

[06:42] <Ven> FROGGS: what's the repo for examples.perl6.org?

[06:43] <ShimmerFairy> Ven: not sure, but it's certainly under the perl6/ organization, and probably has a sensible name :)

[06:43] <FROGGS> Ven: it shows it in the yellow box at the bottom: https://github.com/perl6/perl6-examples

[06:43] <Ven> heh? I typed "examples" in the github.com/perl6 "search" box, and it gave me no result... -.-

[06:43] <Ven> thanks FROGGS.

[06:44] <moritz> \o

[06:44] <FROGGS> Ven: we tend to put a link to the repos at the bottom of all our sites... to invite ppl to make small changes

[06:44] <Ven> o/ moritz 

[06:44] <FROGGS> morning moritz 

[06:45] *** domm left
[06:46] *** domm joined
[06:46] <Ven> WRT the website: I've seen some critics (here and on several websites) say that the code examples aren't all that telling

[06:47] <Ven> I'd like to say (yeah, I'm kinda repeating myself) that I think http://racket-lang.org/ has a nice solution here: an "explain" model, and each function(/method) used is a link to its documentation. What would people think about this?

[06:47] <FROGGS> IIRC the perl(5)docs also do that

[06:47] <FROGGS> so, +1

[06:48] <Ven> s/model/modal/

[06:49] <Ven> FROGGS: you're right! That's good. (I admit I didn't spend that much time in the online 5 docs :)..)

[06:51] <Ven> Do we really have an infix:< >? :P http://irclog.perlgeek.de/perl6/2015-10-05#i_11322893

[06:52] *** spider-mario joined
[06:52] <FROGGS> Ven: maybe we could use it to concat barewords into strings?

[06:54] <Ven> .tell ely-se I'm more likely to receive message under "ven", fwiw

[06:54] <yoleaux> Ven: I'll pass your message to ely-se.

[06:54] *** chenryn joined
[06:54] <FROGGS> m: sub infix:< >($a, $b) { "$a\x20$b"} # sad

[06:54] <camelia> rakudo-moar 68f233: OUTPUT«5===SORRY!5=== Error while compiling /tmp/3KxVvtQJ4U␤Null operator is not allowed␤at /tmp/3KxVvtQJ4U:1␤------> 3sub infix:< >7⏏5($a, $b) { "$a\x20$b"} # sad␤»

[06:55] <Ven> FROGGS: *g*

[06:56] *** rindolf joined
[06:57] <Ven> .tell ely-se WRT comefrom in perl6 – maybe ask masak about it :)

[06:57] <yoleaux> Ven: I'll pass your message to ely-se.

[06:59] *** chenryn left
[06:59] *** chenryn joined
[07:02] *** dylanwh_ joined
[07:05] *** laouji_ joined
[07:08] *** chenryn left
[07:10] *** laouji_ left
[07:17] *** bjz joined
[07:18] *** ely-se joined
[07:26] *** larion left
[07:26] *** AlexDaniel left
[07:28] *** pdcawley joined
[07:32] *** CIAvash joined
[07:39] <ely-se> morning

[07:39] <yoleaux> 06:54Z <Ven> ely-se: I'm more likely to receive message under "ven", fwiw

[07:39] <yoleaux> 06:57Z <Ven> ely-se: WRT comefrom in perl6 – maybe ask masak about it :)

[07:40] <ely-se> hmm

[07:44] <dalek> Inline-Perl5: 38241c4 | (Stefan Seifert)++ | lib/Inline/Perl5.pm6:

[07:44] <dalek> Inline-Perl5: "postcircumfix:<( )>" is now spelled "CALL-ME"

[07:44] <dalek> Inline-Perl5: 

[07:44] <dalek> Inline-Perl5: Fixes tests on current rakudo

[07:44] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/38241c49c6

[07:44] <nine> [Tux]: ^^^

[07:44] <nine> [Tux]: thanks for reporting!

[07:45] <moritz> sub CALL-ME-MAYBE(\c)

[07:45] <[Tux]> and what about the speed regression?

[07:46] <moritz> [Tux]: how big is it? how big is the standard deviation of your runs?

[07:46] <[Tux]> http://tux.nl/Talks/CSV6/speed4.html

[07:46] <moritz> [Tux]: that might be noise, or it might not be

[07:47] <[Tux]> 38 -> 41 is over the noise level

[07:47] *** zakharyas joined
[07:47] *** aborazmeh left
[07:48] <[Tux]> we've been under 36

[07:48] * [Tux] is rebuilding

[07:50] *** Ven left
[07:50] <moritz> [Tux]: so what's the noise level?

[07:50] <[Tux]> 2%?

[07:51] <[Tux]> 39 and up is a warning sign to me

[07:54] <lizmat> fwiw, bare startup time has gone down for me from 115 ms to 108 in the past days

[07:55] <lizmat> spectest below 210 secs for the first time in a week

[07:55] <lizmat> but still a lot slower than the <100 msecs I've seen before

[07:57] <nine> Japanese really are fast with everything. Even slides are visible less than a second :)

[07:57] *** [Tux] left
[07:58] <lizmat> there's a name for that style... but I forgot which one

[07:58] <DrForr> Takahashi, I think.

[08:00] <nine> When he showed the Java GUI cod example and the awesomeness came bam, bam, bam, one could feel the wow in the room even in the video :)

[08:01] <lizmat> https://gist.github.com/lizmat/2bf702c8c08587c3a231  # makes Optimizer infiniloop  :-(

[08:03] <nine> lizmat: I wonder if we should keep DEPRECATED as public interface? It seems to be very useful for module authors

[08:03] *** Ven joined
[08:03] <masak> morning, #perl6ers

[08:03] <lizmat> ah, perhaps...

[08:03] <lizmat> it would solve the problem at hand :-)

[08:04] *** mattprelude left
[08:06] *** cibs left
[08:06] <masak> I think the `is tighter` trait shouldn't be part of the postfix:<!> example. if we're aiming for simplicity, it's making things needlessly complicated. also (arguably), it's wrong.

[08:07] <nine> lizmat: in the weekly, shouldn't it be "where an Array would get popped off @b"?

[08:07] *** cibs joined
[08:07] *** sftp left
[08:09] *** chenryn joined
[08:09] *** rindolf left
[08:10] *** [Tux] joined
[08:10] <lizmat> nine: maybe even "popped off of @b" ?

[08:10] <Ven> o/ masak 

[08:10] <lizmat> nine: keeping it at "popped off" now

[08:10] <lizmat> nine++

[08:14] <dalek> perl6.org: a6a9749 | (Carl Masak)++ | source/index.html:

[08:14] <dalek> perl6.org: remove `is tighter` on custom operator

[08:14] <dalek> perl6.org: 

[08:14] <dalek> perl6.org: This may be highly subjective, but to me postfixes are naturally

[08:14] <dalek> perl6.org: tighter than prefixes. In other words, I'd expect `-1!` to mean

[08:14] <dalek> perl6.org: `-(1!)`, not `(-1)!`. Compensated a test accordingly.

[08:14] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/a6a974960d

[08:14] *** sftp joined
[08:14] *** chenryn left
[08:17] <DrForr> It's a pity gamma() isn't a core method :)

[08:18] <lizmat> .tell jnthn is there a runtime downside to a sub called from CORE, and a sub called from Rakudo::Internals:: ?

[08:18] <yoleaux> lizmat: I'll pass your message to jnthn.

[08:19] *** rurban left
[08:19] <lizmat> .tell jnthn if so, would it help to make the sub an only ?

[08:19] <yoleaux> lizmat: I'll pass your message to jnthn.

[08:20] <masak> Ven: \o

[08:20] <masak> DrForr: gamma() ?

[08:20] <DrForr> factorial for real numbers.

[08:21] <DrForr> (well, gamma(x) == factorial(x-1) for nonnegative integers.)

[08:21] <ShimmerFairy> surely Γ() though :)

[08:22] <DrForr> Yes, but I couldn't be arsed to find the compose-keystroke.

[08:22] <ShimmerFairy> masak: I agree with removing 'is tighter', but not necessarily the reasoning. That seems more a question of associativity than precedence.

[08:24] *** Ven left
[08:25] <dalek> rakudo/nom: c981530 | lizmat++ | src/core/ (3 files):

[08:25] <dalek> rakudo/nom: Move THE_END to Rakudo::Internals

[08:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c981530043

[08:25] *** dakkar joined
[08:26] *** rurban joined
[08:26] <dalek> Heuristic branch merge: pushed 31 commits to rakudo/curli by lizmat

[08:27] *** xfix left
[08:30] *** llfourn left
[08:33] *** skarn joined
[08:33] <lizmat> afk for a few hours&

[08:36] <Woodi> hallo today :)

[08:37] <Woodi> long time ago there was a mantra here that "core do not have any ...". I wonder how edges are placed ATM...

[08:37] *** Ven joined
[08:38] *** kaare_ left
[08:38] <nine> lizmat: moving THE_END to Rakudo::Internals makes a sad day for Perl 6 poetry ;)

[08:41] *** maziar joined
[08:42] <masak> ShimmerFairy: definitely not a question of associativity.

[08:42] <maziar> hi i want to write script to do snmp query to device , is there any example ?

[08:43] <masak> ShimmerFairy: recall that associativity only kicks in when two operators are on the same precedence level (and next to each other). there are no such operators here.

[08:43] <masak> ShimmerFairy: I give you partial points on pattern-matching the situation, though. half of the time, people *do* say "precedence" when they mean "associativity".

[08:44] <ShimmerFairy> masak: yeah, it's just that your reasoning in your commit message didn't make much sense to me, since the snippets looked to be showing associativity

[08:44] <nine> maziar: mullagainn did some work in that direction

[08:44] <masak> ShimmerFairy: it's not.

[08:44] <masak> ShimmerFairy: if you don't believe me, check the precedence table in S03.

[08:44] <maziar> nine what ?

[08:45] <ShimmerFairy> masak: sure, I'm just saying that the paren'd stuff seemed more associativity to me. (Maybe because I've thought about rakudo's bogus 'unary' associativity lately?)

[08:45] <nine> maziar: http://irclog.perlgeek.de/perl6/search/?nick=&q=SNMP

[08:45] *** [particle] left
[08:46] <masak> ShimmerFairy: then you need to update your perception of what's precedence and what's associativity against the normal use of those terms ;)

[08:47] *** larion joined
[08:47] <ShimmerFairy> masak: I think you're misunderstanding me. I'm saying the -(1!) examples didn't make sense at first because they look like talking about unary associativity to me, because that's been on my mind lately.

[08:47] <jnthn> morning, #perl6

[08:48] <jnthn> ely-se: Thanks for the link, was a fun read :)

[08:48] <masak> ShimmerFairy: it would only be unary associativity if prefix:<-> and postfix:<!> were on the same precedence level. which they're not.

[08:49] <ShimmerFairy> masak: yes, but as I've said a couple times now, it *looked* like something different to me at first, because that kind of snippet has been on my mind as about associativity rather than precedence lately.

[08:49] <masak> ely-se: should be able to implement COMEFROM with visitor macros and goodenough goto, yes.

[08:50] <ely-se> coooool

[08:50] <jnthn> .tell lizmat The startup speed improvement was due to a fix I did yesterday (2997e4db98)

[08:50] <ely-se> although I think an INTERCAL slang would be a better idea

[08:50] <masak> ShimmerFairy: if it looked like something else to you, then you need to adjust your perception so that it doesn't decieve you so easily

[08:50] <masak> you seem to be suffering from associativity hallucinations

[08:50] *** yoleaux left
[08:50] *** RabidGravy joined
[08:51] <ShimmerFairy> masak: I don't have a perception problem, for christ's sake. I wasn't thinking about precedence differences at first, and the last time I saw syntax like that was looking at the unary associativity table in S03, hence my initial connection and confusion.

[08:51] <masak> *nod*

[08:52] <masak> so this entire tangent we went on, is because something in my commit *reminded* you of something?

[08:52] <masak> thanks, now I know.

[08:52] *** Ven left
[08:54] <masak> your original sentence -- "That seems more a question of associativity than precedence." -- sounded to me like an assertion that it *was* associativity, not that it *felt to you* like associativity.

[08:54] *** Kcop left
[08:54] <ShimmerFairy> It's because my brain initially saw it as a talk about associativity, because that table in S03 was the last place I saw such a comparison. So I was initially confused because the words were talking about precedence, but your example snippets looked like associativity examples to me.

[08:55] <masak> and yet you maintain that you're not confused about what associativity looks like ;)

[08:55] <mathw> o/ masak

[08:56] <masak> \o mathw

[08:56] <jnthn> .oO( false associations about associativity )

[08:56] *** Loren_ joined
[08:57] <ShimmerFairy> masak: I'm not, however you seem to believe that the !($a!) syntax could _only_ be about precedence, and never about associativity.

[08:57] <masak> ShimmerFairy: earnest recommendation: implement an expression parser. makes things really really clear.

[08:57] <masak> ShimmerFairy: then we probably wouldn't be having this discussion at all.

[08:58] <masak> ShimmerFairy: no, I'm just saying that in the case of my commit, it *wasn't* about associativity, and never could be.

[09:00] <ShimmerFairy> masak: and my brain saw those snippets as being about assoc because that's the last time I saw that kind of syntax being used, and because "- and ! are inherently of different precedences" wasn't in my mind. For all I knew, the 'is tighter' could've put them on the same level.

[09:00] <masak> from my point of view, you've been *distracted* by what you saw in S03, and you feel compelled to tell me how my commit reminded you of associativity, when it has nothing to do with associativity.

[09:00] <jnthn> [Coke]++ # profiler feels faster :)

[09:00] <ShimmerFairy> So I was confused because my brain saw what looked like assoc examples in the midst of a precedence discussion, which is why I brought it up in the first place.

[09:00] <jnthn> Well, profiler UI does :)

[09:01] <masak> ShimmerFairy: got it.

[09:01] *** Xor_ joined
[09:01] <masak> ShimmerFairy: now you need to update your understanding of associativity and precedence ;)

[09:01] <masak> ShimmerFairy: otherwise, this might happen again.

[09:02] *** larion left
[09:02] *** larion joined
[09:02] <ShimmerFairy> masak: not really though, the fact that rakudo has been cheating with a 'unary' assoc is no reason my initial assumption was automatically invalid.

[09:03] <ShimmerFairy> masak: at best I just needed to magically remember that prefix:<-> and a custom postfix:<!> are inherently on different precedence levels.

[09:03] <masak> that's by spec, though

[09:03] <ShimmerFairy> "custom" means it's not by spec :)

[09:03] <masak> no, the spec tells you where custom ops go in the prec table

[09:03] <ShimmerFairy> really? Where?

[09:04] *** espadrine joined
[09:04] <masak> S06

[09:04] <masak> in the discussion about 'is tighter' et al

[09:05] <jnthn> Hm, also looking at a latest startup profile tells me that the patch I did yesterday to fix pseudo-package introspection managed to undo some lazy deserialization goodness

[09:05] *** laouji_ joined
[09:09] <ShimmerFairy> masak: I only see one mention on postfixes about "since equiv<++> is the default", but aside from that I don't see any confident statement about default precedences

[09:09] <ShimmerFairy> ah, I see now, the list above that.

[09:10] *** chenryn joined
[09:10] *** laouji_ left
[09:10] <masak> aye

[09:10] <ShimmerFairy> That's far too buried for my taste, I don't think I can be reasonably expected to have stumbled upon that :)    (since I've never sat down and carefully studied the entire synopses)

[09:11] <ShimmerFairy> It's just an unadorned code block, and the mention of what it is even further buried in the paragraph above it. Not really conducive to someone wondering about default precedences and whatnot.

[09:12] <masak> once you're done fuming about it, please update your understanding about precedence and associativity ;)

[09:14] <ShimmerFairy> masak: my understanding doesn't need changing, it's just a case of the last time I saw the !(a!) vs. (!a)! comparison, in the unary assoc table.

[09:14] *** chenryn left
[09:16] <masak> ShimmerFairy: you have a surface understanding of matters, which makes you look at the *syntax* and go "my! that look slike associativity to me!"

[09:16] <masak> ShimmerFairy: you can't do that. that's a category error. that's wrong. you need to update your understanding so that you don't do that.

[09:16] *** laouji left
[09:17] <Ulti> is Peter Sergeant on here?

[09:17] <masak> ShimmerFairy: whether something is or isn't associativity isn't a detail you find in the syntax. you can't reasonably do what you tried to do. that detail is in the precedence table, not in the syntax.

[09:17] <Ulti> was just wondering what the plans are for http://perl6.io :3

[09:17] <ShimmerFairy> masak: my understanding of precedence vs. associativity has nothing to do with it, just the fact that I saw the syntax generally because I didn't know the magic defaults of custom postfix ops versus prefix:<->

[09:18] <masak> you made a series of assumptions, yes. they were wrong.

[09:19] <masak> let's move past this. preferably in a learning direction.

[09:20] <masak> if you sincerely believe your understanding of prec/assoc has nothing to do with it, then I'm not sure I can be of further assistance to you anyway.

[09:21] *** laouji joined
[09:21] *** laouji_ joined
[09:21] *** mprelude left
[09:24] <ShimmerFairy> masak: it really isn't, it was just a mistaken first idea of what the syntax was demonstrating (again, due to the assoc table being the last place I saw it), and soon after I realized that it was, in fact, completely coherent with the rest of the commit.

[09:24] *** larion left
[09:24] <masak> *plonk*

[09:25] *** [particle] joined
[09:26] *** maziar left
[09:26] *** laouji left
[09:26] <dalek> rakudo/nom: 8709352 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[09:26] <dalek> rakudo/nom: Look at correct frame to see if we're in a PRE.

[09:26] <dalek> rakudo/nom: 

[09:26] <dalek> rakudo/nom: Fixes incorrect running of POST/LEAVE when a PRE fails.

[09:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8709352e4c

[09:26] <dalek> roast: e284033 | jnthn++ | S04-phasers/pre-post.t:

[09:26] <dalek> roast: Unfudge test for RT #121531.

[09:26] <dalek> roast: review: https://github.com/perl6/roast/commit/e284033560

[09:27] <ShimmerFairy> I'm honestly baffled you think I have some deficiency in knowledge (aside from the category defaults; thanks for pointing that out, I've wondered about it sometimes), and don't seem to get that I just made a bad connection with the last time I saw *(a*) vs. (*a)* in text on operator stuff.

[09:28] *** CIAvash left
[09:30] *** Psyche^ joined
[09:32] *** Psyche^_ left
[09:36] *** laouji_ left
[09:36] *** laouji joined
[09:40] *** Xor_ left
[09:40] *** Xor_ joined
[09:41] *** laouji left
[09:46] *** larion joined
[09:47] *** Ven joined
[09:47] *** Ven left
[09:51] *** larion left
[09:53] <lizmat> .botsnack

[09:53] <ely-se> :D

[09:53] *** rurban left
[09:53] <lizmat> hmmm... yoleaux is AWOL ?

[09:55] *** larion joined
[09:56] * grondilu searchs AWOL in S99 and finds nothing

[09:56] <ely-se> away without leave

[09:56] *** pmurias joined
[09:56] <ely-se> http://duckduckgo.com/?q=!ud+awol

[09:57] <grondilu> yeah fpund it eventually

[09:57] <ely-se> ! commands is the only reason I use DuckDuckGo :D

[09:57] *** Ven joined
[09:58] <lizmat> jnthn: I asked via yoleaux at http://irclog.perlgeek.de/perl6/2015-10-06#i_11324705

[09:59] <masak> ely-se: yes, ! commands rock

[09:59] <lizmat> whether there's a runtime penalty for calling our subs in other packages, like Rakudo::Internals

[10:00] *** maziar joined
[10:00] <jnthn> lizmat: Will "make it an only" help: almost certainly not

[10:00] <jnthn> Runtime penalty? Not sure.

[10:00] <jnthn> If Rakudo::Interals were a class with methods on it, then the answer is easily "no"

[10:00] <lizmat> I'd like to know before turning things like RETURN into a Rakudo::Internals::RETURN

[10:01] *** laouji joined
[10:01] *** domm_ joined
[10:02] <lizmat> (I mean: RETURN-LIST)

[10:03] <lizmat> and things like THROW :-)

[10:04] *** domm left
[10:05] * Ven notes the hugless discussion and shrugs :(

[10:07] *** maziar left
[10:07] *** maziar joined
[10:08] <maziar> is ther any sample script to do snmpwalk to a host ?

[10:08] *** andreoss joined
[10:11] *** chenryn joined
[10:12] <_itz> maziar: there isn't UDP support yet

[10:15] *** laouji_ joined
[10:15] *** chenryn left
[10:17] *** andreoss left
[10:17] <lizmat> jnthn: I did some benchmarks: calling an our sub from another package, is about 19x slower  :-(

[10:17] <jnthn> lizmat: Ouch

[10:17] <lizmat> I think I'll halt my "moving to Rakudo::Internals" actions for now

[10:17] <jnthn> lizmat: And if you make Rakudo::Interanls a class and make them methods?

[10:17] <lizmat> $ 6 'our sub a { 42 }; for ^100000 { a }'

[10:17] <lizmat> real	0m0.276s

[10:18] <lizmat> $ 6 'module A::B { our sub a { 42 } }; for ^100000 { A::B::a }'

[10:18] <lizmat> real	0m3.400s

[10:18] <El_Che> garu: timotimo : about my cmd param question. Both your suggestion are certainly valid, but I think the *default* of argument parsing should look UNIX native. Does that make sense?

[10:18] <jnthn> lizmat: We have a little bit of an issue with our subs in packages in that we kinda have to respect rebinding, I *think*

[10:19] <jnthn> lizmat: Which prevents spesh-time resolution/inlining

[10:19] <lizmat> $ 6 'class A::B { method a { 42 } }; for ^100000 { A::B.a }'

[10:19] <lizmat> real	0m0.324s

[10:19] <jnthn> And if you mark the class "is hidden"?

[10:19] *** laouji_ left
[10:19] <lizmat> no difference

[10:19] <ilmari> huh, don't sub calls get resolved at compile time?

[10:20] <lizmat> $ 6 'class A::B is hidden { method a { 42 } }; for ^100000 { A::B.a }'

[10:20] <jnthn> heh, our optimizer is too clever :)

[10:20] <lizmat> real	0m0.317s

[10:20] <jnthn> Yeah, not much

[10:20] <jnthn> Leixcal sub calls do

[10:20] <lizmat> within noise 

[10:20] <jnthn> *nod*

[10:20] *** bjz left
[10:21] <jnthn> m: package A { our sub foo() { 1 } }; A::foo(); A::<&foo> := { 2 }; A::foo();

[10:21] <camelia> rakudo-moar 870935: ( no output )

[10:21] *** laouji_ joined
[10:21] <jnthn> m: package A { our sub foo() { 1 } }; say A::foo(); A::<&foo> := { 2 }; say A::foo();

[10:21] <camelia> rakudo-moar 870935: OUTPUT«1␤2␤»

[10:21] <maziar> when i run this script i get this error : Use of uninitialized value in concatenation (.) or string at ./x.perl line 12.

[10:22] <DrForr> maziar: perl6 doesn't use '.', try one of the other perl channels.

[10:22] <jnthn> lizmat: I think the above needs to work. We can get clarification from TimToady on that I guess

[10:22] <dalek> perl6-most-wanted: 063ff07 | (Tokuhiro Matsuno)++ | most-wanted/modules.md:

[10:22] <dalek> perl6-most-wanted: Update modules.md

[10:22] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/063ff07091

[10:22] <ilmari> maziar: which script? and that's a perl5 error

[10:22] <DrForr> (well, it doesn't use '.' for *that* purpose.)

[10:23] *** rurban joined
[10:23] <lizmat> jnthn: that's the other thing: if I make Rakudo::Internals a package, all sorts of weird things happen :-(

[10:24] <lizmat> but settings won't compile 

[10:24] <lizmat> lemme try that again to be sure

[10:24] *** Ven left
[10:25] <jnthn> lizmat: Well, I used package, but would be same with module

[10:25] <lizmat> hmmm..  it builds now

[10:26] *** laouji_ left
[10:28] <lizmat> yeah, if I change the stub to package as well, I get:

[10:28] <lizmat> Stage parse      : Error while constructing error object:Could not locate compile-time value for symbol X::Package::Stubbed

[10:28] <lizmat> Error while compiling, type X::Package::Stubbed

[10:28] <lizmat>   packages: (unstringifiable object)

[10:28] <lizmat>  at line 32407, near ""

[10:29] <lizmat> which is basically a weird way of saying that it didn't see some package be filled out when stubbed

[10:29] <lizmat> weird, because Exception *does* have an X::Package::Stubbed it should now about

[10:29] <lizmat> so, changing it to a module fixed that

[10:29] *** andreoss joined
[10:31] <dalek> nqp: e8e9b08 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[10:31] <dalek> nqp: [js] when we don't have an outer context use null

[10:31] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e8e9b0882e

[10:31] <dalek> nqp: 7ae59c9 | (Pawel Murias)++ | / (3 files):

[10:31] <dalek> nqp: [js] Rewrite the test running script in Perl 5.

[10:31] <dalek> nqp: 

[10:31] <dalek> nqp: That should allow detecting the node version and skipping some tests that fail on travis.

[10:31] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7ae59c97bd

[10:32] <dalek> nqp: 09ae178 | cygx++ | src/vm/jvm/runtime/org/perl6/nqp/io/FileHandle.java:

[10:32] <dalek> nqp: Implement extended file open modes on JVM

[10:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/09ae178c1d

[10:32] <dalek> nqp: c2610de | cygx++ | src/vm/js/nqp-runtime/io.js:

[10:32] <dalek> nqp: [js] Minimal patch to make basic file open modes work again

[10:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c2610dedab

[10:32] <dalek> nqp: 867e81b | jnthn++ | src/vm/j (2 files):

[10:32] <dalek> nqp: Merge pull request #245 from cygx/openmodes-jvm

[10:32] <dalek> nqp: 

[10:32] <dalek> nqp: Implement extended file open modes on JVM

[10:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/867e81b4d6

[10:33] *** bjz joined
[10:36] *** travis-ci joined
[10:36] <travis-ci> NQP build passed. Pawel Murias '[js] Rewrite the test running script in Perl 5.

[10:36] <travis-ci> https://travis-ci.org/perl6/nqp/builds/83863172 https://github.com/perl6/nqp/compare/e522c72da795...7ae59c97bdb8

[10:36] *** travis-ci left
[10:37] *** ely-se left
[10:37] * jnthn spectests his patch to address one more of the xmas RTs

[10:38] *** travis-ci joined
[10:38] <travis-ci> NQP build passed. Jonathan Worthington 'Merge pull request #245 from cygx/openmodes-jvm

[10:38] <travis-ci> https://travis-ci.org/perl6/nqp/builds/83863246 https://github.com/perl6/nqp/compare/7ae59c97bdb8...867e81b4d68c

[10:38] *** travis-ci left
[10:46] *** pmurias left
[10:48] *** pmurias joined
[10:49] <dalek> rakudo/nom: 0689733 | lizmat++ | src/core/ (6 files):

[10:49] <dalek> rakudo/nom: Make Rakudo::Internals a class with methods

[10:49] <dalek> rakudo/nom: 

[10:49] <dalek> rakudo/nom: This should be about 18x as fast then calling our subs

[10:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0689733cd4

[10:50] <lizmat> bbiab

[10:50] <masak> "xmas RTs" ;)

[10:50] *** laouji_ joined
[10:51] <dalek> nqp: 48faa01 | jnthn++ | tools/build/MOAR_REVISION:

[10:51] <dalek> nqp: Bump MOAR_REVISION for UTF-8 BOM handling.

[10:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/48faa01233

[10:51] *** rindolf joined
[10:53] <dalek> rakudo/nom: 1ee7a96 | jnthn++ | tools/build/NQP_REVISION:

[10:53] <dalek> rakudo/nom: Bump NQP_REVISION for UTF-8 BOM, JVM I/O bits.

[10:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ee7a96c10

[10:54] <dalek> roast: e2a621c | jnthn++ | S16-io/bom.t:

[10:54] <dalek> roast: Add tests for UTF-8 BOM stripping.

[10:54] <dalek> roast: review: https://github.com/perl6/roast/commit/e2a621c882

[10:56] *** laouji_ left
[10:58] <dalek> rakudo/nom: 1f7a564 | cygx++ | src/core/IO/Handle.pm:

[10:58] <dalek> rakudo/nom: Enable extended file open modes on the JVM

[10:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1f7a564d7d

[10:58] <dalek> rakudo/nom: 462ab13 | jnthn++ | src/core/IO/Handle.pm:

[10:58] <dalek> rakudo/nom: Merge pull request #545 from cygx/openmodes-jvm

[10:58] <dalek> rakudo/nom: 

[10:58] <dalek> rakudo/nom: Enable extended file open modes on the JVM

[10:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/462ab13b1d

[10:58] <dalek> ecosystem: a4af5b9 | moznion++ | META.list:

[10:58] <dalek> ecosystem: Add Log::Minimal

[10:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a4af5b9261

[10:58] <dalek> ecosystem: 2ca19ca | (Zoffix Znet)++ | META.list:

[10:58] <dalek> ecosystem: Merge pull request #66 from moznion/log-minimal

[10:58] <dalek> ecosystem: 

[10:58] <dalek> ecosystem: Add Log::Minimal

[10:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/2ca19ca7ce

[10:59] <dalek> rakudo/nom: a26ecff | jnthn++ | t/spectest.data:

[10:59] <dalek> rakudo/nom: Run S16-io/bom.t.

[10:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a26ecffaf5

[11:04] *** kid51 joined
[11:08] *** grondilu left
[11:09] *** kid51 left
[11:11] *** Ven joined
[11:11] *** chenryn joined
[11:16] *** chenryn left
[11:20] *** laouji_ joined
[11:21] *** TEttinger left
[11:21] *** ely-se joined
[11:21] <jnthn> .ask TimToady What is the <colonpair> for in https://github.com/perl6/std/blob/master/STD.pm6#L2032 ? I've been looking through the synopses for some info on it and failed to find anything... Currently Rakudo parses it but has no clue what to do with it, and ends up with an internal compiler error... 

[11:23] *** telex left
[11:24] <jnthn> TimToady: Unless you have a strong idea of what it's meant to do, I'd vote for tossing it for 6.chirstmas.

[11:24] *** telex joined
[11:25] *** laouji_ left
[11:27] <ShimmerFairy> jnthn: is that meant to allow something like    class Foo :colon<pair> { , wherever trait_mods usually show up?

[11:27] *** llfourn joined
[11:27] <jnthn> ShimmerFairy: yeah

[11:27] <jnthn> Well

[11:27] <jnthn> It parses that

[11:27] <jnthn> But then it's like...what do we do with this? :)

[11:27] <ShimmerFairy> yeah, I'm not sure what it might do either :P

[11:28] <jnthn> I mean, it could feasibly be a shortcut for is

[11:28] <jnthn> sub foo($a :rw) { }

[11:28] <ShimmerFairy> jnthn: blame says that was last touched in 2009, was there some sort of annotation mechanism or anything back then?

[11:28] <jnthn> Well, traits certainly existed

[11:28] <jnthn> It's parsed as part of those

[11:29] <jnthn> My suspicion is we're going to end up tossing it from Rakudo's grammar, unless TimToady++ has a reason to want us to keep/fix it.

[11:29] <ShimmerFairy> right, for some reason the first thing in my mind was "oh, I wonder if you're were able to annotate stuff", like QAST's associative side (IIRC)  :)

[11:31] <nine> We can always add it back later without back comp issues

[11:32] *** llfourn left
[11:32] <ShimmerFairy> m: sub foo() :colon<pair> { }

[11:32] <camelia> rakudo-moar a26ecf: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1FEg6MG4bN␤Cannot invoke this object␤at /tmp/1FEg6MG4bN:1␤»

[11:34] <jnthn> nine: Aye

[11:38] *** nuc joined
[11:40] *** Ven left
[11:40] * jnthn is looking into RT #113544, which leads down into the bowels of the regex compiler...

[11:41] *** Lorphos joined
[11:42] <Lorphos> Hi. There was an example for a  custom unicode operator on the perl6 homepage yesterday, today it has been replaced. Where can I still find it?

[11:42] <jnthn> Yeah, it doesn't have a clue about nameds or flattens in those arglists...

[11:43] *** ely-se left
[11:43] <Lorphos> Got it, google cache still had the old copy

[11:43] <jnthn> Ah, phew. Also in the commit history for the site I guess: https://github.com/perl6/perl6.org/commits/master

[11:43] <jnthn> lunch time &

[11:44] *** babe joined
[11:45] <ShimmerFairy> .tell jnthn worth pointing that I've noticed   @var := nqp::list()  fails in main Perl 6 code, but works in regexes ( :my @var := nqp::list(); ). There's a good chance stuff like that is being handled by NQP rather than rakudo

[11:46] <jnthn> m: use nqp; say 'a' ~~ /:my @x := nqp::list(); a/

[11:46] <camelia> rakudo-moar a26ecf: OUTPUT«Type check failed in binding; expected Positional but got List␤  in block <unit> at /tmp/ZJFfxPALBq:1␤␤»

[11:46] <jnthn> Looks pretty failing to me

[11:47] <jnthn> We delegate to the Perl 6 parsing and code-gen for vars, iirc.

[11:47] * jnthn -> oven :)

[11:47] <masak> Lorphos: we changed it because the thing it was implementing (factorial) doesn't really need a Unicode character. much more approachable with just '!'

[11:47] <masak> Lorphos: having said that, Perl 6 still works very nicely with Unicode operators, and Unicode identifiers in general

[11:48] <btyler> approachable++ for frontpage examples

[11:48] <Lorphos> i thought it was pretty cool. Frightening but cool :)

[11:48] <btyler> unicode stuff is awesome, but yeah, frightening is the word

[11:49] <btyler> doesn't help the 'line noise' meme too much :)

[11:49] <btyler> (the new page looks _awesome_, btw)

[11:49] <Lorphos> yup. "Perl 6 now has an infinite new number of unicode characters that will let you create obfuscated code!"

[11:49] <masak> Lorphos: we want to be cool when possible and frightening only when necessary ;)

[11:49] <ShimmerFairy> m: use nqp; "A" ~~ / :my @*A := nqp::list(); /

[11:49] <camelia> rakudo-moar a26ecf: ( no output )

[11:50] <Lorphos> I like the page as well. It's not the same old boring stuff you see everywhere.

[11:50] <Lorphos> and it is highly informative while being entertaining

[11:50] <ShimmerFairy> m: use nqp; my @*A := nqp::list()

[11:50] <camelia> rakudo-moar a26ecf: ( no output )

[11:50] <masak> camelia: what are you doing?

[11:50] <ShimmerFairy> jnhtn: sorry, didn't know it was dynamic variables that let it happen, not the inside of a regex :)

[11:51] <jdv79> how come masak's uni op examples didnt get on the sitr?

[11:51] <jdv79> *site

[11:52] *** grondilu joined
[11:53] <masak> I didn't get a full picture of that either, except maybe http://irclog.perlgeek.de/perl6/2015-10-05#i_11321391

[11:54] <dalek> rakudo/nom: bad9be0 | lizmat++ | src/core/Setty.pm:

[11:54] <dalek> rakudo/nom: Fix Set/SetHash.kv

[11:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bad9be008d

[11:54] <masak> (or we could do both)

[11:54] *** rindolf left
[11:55] <dalek> roast: 9c5c7a3 | lizmat++ | S02-types/set (2 files):

[11:55] <dalek> roast: Make sure we test Set(Hash).kv (correctly)

[11:55] <dalek> roast: review: https://github.com/perl6/roast/commit/9c5c7a3f39

[11:55] <jdv79> how come a search in the irc logs for ± doesnt work

[11:55] * masak guesses $answer.contains("encodings") somehow

[11:56] <jdv79> :(

[11:57] <lizmat> m: 'my $s = <a b c>.SetHash; $_ = False for $s.values; dd $s   # should this work ?

[11:57] <camelia> rakudo-moar a26ecf: OUTPUT«5===SORRY!5=== Error while compiling /tmp/dwCcxBZFxP␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/dwCcxBZFxP:1␤------> 3 $s.values; dd $s   # should this work ?7⏏5<EOL>␤    expecting any of:␤        sing…»

[11:57] <lizmat> m: my $s = <a b c>.SetHash; $_ = False for $s.values; dd $s   # should this work ?

[11:57] <camelia> rakudo-moar a26ecf: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/ikSRAUAC6S:1␤␤»

[11:58] <andreoss> m: say 1±2

[11:58] <camelia> rakudo-moar a26ecf: OUTPUT«5===SORRY!5=== Error while compiling /tmp/e2LFGCaska␤Bogus postfix␤at /tmp/e2LFGCaska:1␤------> 3say 17⏏5±2␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modif…»

[11:58] <lizmat> m: my $s = <a b c>.SetHash; $s<a> = False; dd $s   # this does

[11:58] <camelia> rakudo-moar a26ecf: OUTPUT«SetHash $s = SetHash.new("c","b")␤»

[12:01] <[Coke]> jnthn: (profiler) Oh good.

[12:04] <masak> andreoss: http://irclog.perlgeek.de/perl6/2015-10-05#i_11321117

[12:05] *** laouji_ joined
[12:06] *** kaare_ joined
[12:06] <domidumont> Hello. Do optimize debian packages, I need to know if the moar files produced when building rakudo are the same whatever the architecture (i.e amd64, or arm ...) ? Can anyone confirm ?

[12:07] <pink_mist> why not build on the different architectures and diff?

[12:07] <pink_mist> seems the best way to be sure

[12:08] <moritz> domidumont: I think I recall they are the same

[12:08] <moritz> domidumont: but ask in #moarvm to be sure

[12:08] *** ely-se joined
[12:10] *** laouji_ left
[12:10] *** ely-se left
[12:12] *** ponbiki left
[12:12] *** chenryn joined
[12:12] <jdv79> i think having a uni op example on the front page may signal to some that p6 takes unicode seriously

[12:13] *** ponbiki joined
[12:13] <jdv79> esp since none of the other examples have uni

[12:13] *** ponbiki is now known as Guest74396

[12:14] *** rindolf joined
[12:16] *** rurban left
[12:17] *** chenryn left
[12:19] <dalek> faq: e56e0c9 | baest++ | answers.md:

[12:19] <dalek> faq: Fix spelling of dereferencing

[12:19] <dalek> faq: review: https://github.com/perl6/faq/commit/e56e0c985d

[12:19] <dalek> faq: 92cd9c2 | (Zoffix Znet)++ | answers.md:

[12:19] <dalek> faq: Merge pull request #4 from baest/patch-1

[12:19] <dalek> faq: 

[12:19] <dalek> faq: Fix spelling of dereferencing

[12:19] <dalek> faq: review: https://github.com/perl6/faq/commit/92cd9c2220

[12:20] <domidumont> moritz: ok. Thanks 

[12:21] *** Lorphos left
[12:21] *** flussence left
[12:25] <dalek> nqp: bd169fa | (Pawel Murias)++ | src/vm/js/ (2 files):

[12:25] <dalek> nqp: [js] Implement nqp::backendconfig so that we can check the int size

[12:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bd169fa7a9

[12:25] <dalek> nqp: a061c8f | (Pawel Murias)++ | t/serialization/01-basic.t:

[12:25] <dalek> nqp: In t/serialization/01-basic.t also detect when the js backend is using 32bit integers.

[12:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a061c8fa05

[12:25] <dalek> nqp: 0e78cd7 | (Pawel Murias)++ | t/serialization/01-basic.t:

[12:25] <dalek> nqp: Check for the correct class instead of a nonexisting one (which ends up being a check against NQPMu).

[12:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0e78cd7253

[12:25] <dalek> nqp: e11ec6e | (Pawel Murias)++ | src/vm/js/bin/run_tests.pl:

[12:25] <dalek> nqp: [js] Pass t/serialization/01-basic.t

[12:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e11ec6e82f

[12:35] *** adhoc left
[12:36] *** laouji_ joined
[12:38] <dalek> ecosystem: 3ba4ab0 | (Steve Mynott)++ | META.list:

[12:38] <dalek> ecosystem: Display and cache ecosystem README files for perl6

[12:38] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3ba4ab0412

[12:40] <dalek> nqp: 7719e1b | (Pawel Murias)++ | src/vm/js/bin/run_tests:

[12:40] <dalek> nqp: [js] Remove test running script we no longer need.

[12:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7719e1b182

[12:40] <dalek> nqp: afa4ca1 | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js:

[12:40] <dalek> nqp: [js] fix errors found by make js-lint

[12:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/afa4ca17e9

[12:40] *** laouji_ left
[12:43] <masak> pmurias: just curious: do you find js-lint to give needlessly harsh "errors"? (I did.)

[12:43] <masak> pmurias: for example, the one you just fixed doesn't really look erroneous to me.

[12:47] <jnthn> ShimmerFairy: Ah, interesting find (the dynamic binding thing). :)

[12:48] <ShimmerFairy> m: my @*A := 42

[12:48] <camelia> rakudo-moar bad9be: ( no output )

[12:48] <ShimmerFairy> jnthn: apparently, dynamics just don't care? :P

[12:48] <ShimmerFairy> m: my %*A := 42

[12:48] <camelia> rakudo-moar bad9be: ( no output )

[12:48] <jnthn> m: my Int $*A = 'oh noes'

[12:48] <camelia> rakudo-moar bad9be: OUTPUT«Type check failed in assignment to $*A; expected Int but got Str␤  in block <unit> at /tmp/qs6ymFxrPv:1␤␤»

[12:48] <jnthn> m: my Int $*A := 'oh noes'

[12:48] <camelia> rakudo-moar bad9be: ( no output )

[12:48] <ShimmerFairy> m: my &*A := 42

[12:48] <jnthn> Indeed. Fail.

[12:48] <camelia> rakudo-moar bad9be: ( no output )

[12:49] <jnthn> That one's RT-able :)

[12:49] * mathw just flicked past this window and saw "rakudo-badbaby"

[12:49] <ShimmerFairy> will do :)

[12:49] * masak submits rakudobug

[12:50] <jnthn> The race is on...who will submit to RT first? :)

[12:50] <ShimmerFairy> masak: already on it :)

[12:51] <masak> oh, ok. standing down :)

[12:52] <masak> m: my Int $A := 'oh noes'

[12:52] <camelia> rakudo-moar bad9be: OUTPUT«Type check failed in binding; expected Int but got Str␤  in block <unit> at /tmp/zI9Ehl2Xe5:1␤␤»

[12:56] *** felher left
[12:57] <_itz> did that .perl looping on circular data get fixed?

[12:58] <DrForr> m: my $x={}; $x.<a>=$x; say $x.perl

[12:58] <camelia> rakudo-moar bad9be: OUTPUT«(my \Hash_139926166332664 = {:a(Hash_139926166332664)})␤»

[12:58] <andreoss> m: my $b = 1 ; my Int $a := $b; $b = "abc"; say $a.WHAT;

[12:58] <camelia> rakudo-moar bad9be: OUTPUT«(Str)␤»

[12:59] <lizmat> _itz: afaik for .gist and .perl, yes

[12:59] *** felher joined
[13:00] <andreoss> m: my $b = { ... } ; my &a := $b; $b = "abc"; say &a.WHAT; say a

[13:00] <camelia> rakudo-moar bad9be: OUTPUT«(Str)␤Cannot find method 'CALL-ME'␤  in block <unit> at /tmp/9o8jGJneUF:1␤␤»

[13:00] <_itz> cool

[13:03] <dalek> faq: 426307d | util++ | answers.md:

[13:03] <dalek> faq: Fix spelling of modifier

[13:03] <dalek> faq: review: https://github.com/perl6/faq/commit/426307d6ce

[13:06] *** laouji_ joined
[13:06] <lizmat> jnthn: does this ring a bell? Stage mast       : Code ref 'BUILD' does not exist in serialization context

[13:07] <jnthn> lizmat: Sort of, but it's been a while and I fixed the source of that error I was aware of

[13:08] <jnthn> lizmat: It's deep/hairy enough I'd just not do whatever you did to cause it.

[13:08] <jnthn> Otherwise it probably costs me a day of debugging.

[13:09] * RabidGravy reboots

[13:09] *** RabidGravy left
[13:10] *** laouji_ left
[13:11] <lizmat> jnthn: ok, I'll just gist the changes and forget about it for now  (and you should as well)

[13:12] <jnthn> lizmat: Yeah, feel free to note it down somewhere, but...we've more pressing things

[13:12] *** Loren_ left
[13:12] <jnthn> lizmat: Last time it was something involving multi-dispatcher cloning

[13:13] <lizmat> https://gist.github.com/lizmat/f7abe2c542670b0e7b40

[13:13] *** maziar left
[13:13] *** chenryn joined
[13:14] *** aborazmeh joined
[13:14] *** aborazmeh left
[13:14] *** aborazmeh joined
[13:15] <jnthn> hm, but it was count-only it complained about there, not BUILD?

[13:15] <lizmat> it complained about BUILD when I removed count-only

[13:15] <jnthn> I wonder if it's about roles nested in roles

[13:16] <dalek> nqp: 5d01ca3 | jnthn++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp:

[13:16] <dalek> nqp: Preparatory refactor for fixing regex args.

[13:16] <dalek> nqp: 

[13:16] <dalek> nqp: No (intended) functional changes; this just gets the code into shape

[13:16] <dalek> nqp: for making subrule call arg lists cope with named and flattening args.

[13:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5d01ca3ba5

[13:16] *** sufrostico joined
[13:17] *** maziar joined
[13:18] *** chenryn left
[13:22] *** Ven joined
[13:22] <dalek> nqp: caf4c0f | jnthn++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp:

[13:22] <dalek> nqp: Compile flattening in regex subrule arg lists.

[13:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/caf4c0f967

[13:24] *** skids joined
[13:26] *** yoleaux joined
[13:26] *** ChanServ sets mode: +v yoleaux

[13:26] *** dpk joined
[13:28] <gfldex> m: my @l = (1,(2,3,(4,5)),6); @l.deepmap({|$_}).perl.say; 

[13:28] <yoleaux> 3 Oct 2015 10:11Z <AlexDaniel> gfldex: I find it a bit messy, but you are probably right. I've changed it as you recommended

[13:28] <camelia> rakudo-moar bad9be: OUTPUT«[1, (2, 3, $(4, 5)), 6]␤»

[13:28] *** maziar left
[13:28] <gfldex> why is only the inner most List Seq-ified?

[13:29] <lizmat> Seq-ified?

[13:29] <gfldex> i'm under the impression that $(4,5) is a Seq

[13:29] <masak> m: say (4, 5).^name

[13:29] <camelia> rakudo-moar bad9be: OUTPUT«List␤»

[13:29] <masak> m: say ($(4, 5)).^name

[13:29] <camelia> rakudo-moar bad9be: OUTPUT«List␤»

[13:30] <masak> nope; it's a List

[13:30] <jnthn> Well, an itemlized list

[13:30] <yoleaux> 08:18Z <lizmat> jnthn: is there a runtime downside to a sub called from CORE, and a sub called from Rakudo::Internals:: ?

[13:30] <yoleaux> 08:19Z <lizmat> jnthn: if so, would it help to make the sub an only ?

[13:30] * masak .oO( a caramelized List )

[13:31] <jnthn> mmmmm

[13:31] <gfldex> then why is only the innermost List itemlisted?

[13:31] *** RabidGravy joined
[13:31] *** pecastro left
[13:31] <masak> what gfldex asked :)

[13:32] <jnthn> I don't actually know.

[13:32] <jnthn> It looks a bit off

[13:32] * jnthn isn't sure what the deepmap impl looks like these days...

[13:32] <gfldex> at the moment rakudo is my favoured method of confusion. :)

[13:33] <masak> m: my @l = (1,(2,3,(4,(5,6))),7); @l.deepmap({|$_}).perl.say

[13:33] <camelia> rakudo-moar bad9be: OUTPUT«[1, (2, 3, $(4, $(5, 6))), 7]␤»

[13:33] <masak> it's not "just the innermost"

[13:33] <masak> it's "level N and below"

[13:33] * masak .oO( only-so-deep-map )

[13:33] *** tokuhirom left
[13:34] <masak> m: my @l = (1,[2,3,(4,(5,6))],7); @l.deepmap({|$_}).perl.say

[13:34] <camelia> rakudo-moar bad9be: OUTPUT«[1, [2, 3, (4, $(5, 6))], 7]␤»

[13:34] * gfldex .oO( by lazy we didnt mean ...)

[13:34] <masak> a-ha.

[13:34] <masak> .deepmap only talks to Arrays

[13:34] <masak> not Lists

[13:34] <masak> I think that dissolves the mystery

[13:34] <masak> whether it's *intended* behavior... I'm not the one to answer that, I think

[13:35] <moritz> it not only solves it, but actually dissolves it. I'm impressed! :-)

[13:36] <gfldex> my next question would be what is the current method of deep-flattening that works both List and Array

[13:36] <jnthn> So the mystery remains...dis-solved? :P

[13:36] <gfldex> i'm asking mostly because of http://rosettacode.org/wiki/Flatten_a_list#Perl_6

[13:37] *** pecastro joined
[13:38] <jnthn> m: my @l = (1,[2,3,(4,(5,6))],7); .perl.say given gather @l.deepmap(*.take) # one way

[13:38] <camelia> rakudo-moar bad9be: OUTPUT«(1, 2, 3, 4, 5, 6, 7).Seq␤»

[13:38] <jnthn> I had a cuter one but forgot it...

[13:38] *** user3 joined
[13:39] <dalek> nqp: eaa6350 | jnthn++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp:

[13:39] <dalek> nqp: Compile named args in regex subrule arglists.

[13:39] <dalek> nqp: review: https://github.com/perl6/nqp/commit/eaa63501fd

[13:39] <gfldex> if i post that on rosettacode small children might point fingers at perl6

[13:39] <gfldex> i can haz List|Array::deepflat plox?

[13:40] <DrForr> People are already pointing middle fingers at it, why would some more fingers matter? :)

[13:40] <gfldex> because perl6 is ment to be sexy!

[13:42] <user3> DrForr: I'm puzzled by your statement. why are people pointing middle fingers at perl6?

[13:44] <jnthn> gfldex: While I'd agree we can prolly do better than the one I gave, it's still a bunch better than most of the ones on that page ;)

[13:45] <DrForr> user3: Just forget it, I'm still sore and grumpy over here.

[13:46] <user3> thats alright doc

[13:46] *** laouji left
[13:47] * masak .oO( "what's up, doc?" -- "this middle finger here, see..." )

[13:48] <DrForr> "That's a rather personal question..."

[13:49] * [Coke] notes belatedly that the profile modal windows when you click "view" have an X that doesn't currently work. You can click away from it or press "ESC" to make it go away. I'll get that fixed shortly.

[13:50] <masak> ++[Coke]

[13:50] * gtodd installs Stats module with shiny GLR perl6 wheee!! ... 

[13:50] * _itz wonders if "spunky spokesbug" is negotiable

[13:51] <gtodd> when I do:   min @dataset   ... everything is grand!  but when I use Stats.pm6's "summary" method  https://github.com/MattOates/Stats/blob/master/lib/Stats.pm6#L148  

[13:52] * [Coke] would get buyin from TimToady before changing that word.

[13:52] <[Coke]> (for itz)

[13:52] <gtodd> no worky unless I change  'max'=>max($x)   to    'max'=>max($x.list)   (which is priobably wrong but I just wanted it to work)

[13:52] <jnthn> _itz: I suspect the whole intro paragraph wants a re-wording

[13:52] <pmurias> re deepmap (not deep-map) is there a naming convention for things in the setting?

[13:53] <_itz> https://github.com/perl6/perl6.org/issues/32

[13:54] <masak> pmurias: only that hyphens are generally avoided when something can be argued to be one word

[13:55] *** rurban joined
[13:55] *** ketadmin left
[13:55] *** Ven left
[13:56] *** user3 left
[13:57] <dalek> rakudo/nom: fbac827 | jnthn++ | tools/build/NQP_REVISION:

[13:57] <dalek> rakudo/nom: Get regex subrule arglist compilation fixes.

[13:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fbac827bf9

[13:57] <gtodd> I assume it's something to do with GLR ... Stats is an extremely simple module I'm sure that after Xmas it won't take long for it or something like it to get R-like

[13:58] <dalek> roast: c597341 | jnthn++ | S05-grammar/signatures.t:

[13:58] <dalek> roast: Tests to cover RT #113544.

[13:58] <dalek> roast: review: https://github.com/perl6/roast/commit/c597341f86

[13:59] <jnthn> gtodd: `max => $x.max` is probably the neater fix

[13:59] <gfldex> m: my @l = [1,[2,3,[4,5]],6]; @l.map({$_.Slip}).perl.say; @l.deepmap({$_.Slip}).perl.say; 

[13:59] <camelia> rakudo-moar bad9be: OUTPUT«(1, 2, 3, $[4, 5], 6).Seq␤[1, [2, 3, [4, 5]], 6]␤»

[14:06] <masak> m: my @l = [1,[2,3,[4,5]],6]; say @l.map(*.Slip).perl; say @l.deepmap(*.Slip).perl

[14:06] <camelia> rakudo-moar bad9be: OUTPUT«(1, 2, 3, $[4, 5], 6).Seq␤[1, [2, 3, [4, 5]], 6]␤»

[14:06] *** Guest74396 is now known as ponbiki

[14:07] <andreoss> is there an example of matching a quoted string with consideration of escaped quotes?

[14:09] <pmurias> masak: deepmap is one word?

[14:10] <masak> pmurias: arguably, since we make it a concept.

[14:10] <masak> pmurias: in the same way "substring" is one word, and hence not "subString"

[14:11] <pmurias> do we use camel case too?

[14:11] <gtodd> jnthn: thanks .... I discovered that in the repl and was trying to read up and figure out why it worked on the array but not the "reference"  :-)

[14:12] <masak> andreoss: https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Grammar.pm#L26

[14:13] <pmurias> masak: just looking at S32 there seems to be a lot of inconsistency in naming

[14:13] *** babe left
[14:13] <pmurias> which sucks really badly

[14:14] *** chenryn joined
[14:15] <masak> pmurias: I haven't thought that much about hyphens, but I imagine you're right.

[14:15] <masak> pmurias: the inconsistency I've been noticing is how some methods have a sub form, and some don't. with no actualy thought of system behind it.

[14:17] <pmurias> masak: we have both splitdir and is-hidden

[14:18] <pmurias> we need to enforce a naming convention before the christmas release

[14:18] <jnthn> JOY!!! More renaming...

[14:19] <masak> yeah, that was my gut reaction, too

[14:19] <masak> even though I agree with pmurias in principle

[14:19] <[Coke]> better now than post christmas

[14:19] <jnthn> Well, I can imagine that a bunch of the I/O related stuff does want a pass through naming wise.

[14:19] <moritz> and please with deprecations this time :-)

[14:19] <masak> the good thing is that we largely do have the infrastructure nowadays to handle the fallout of renaming in the ecosystem

[14:19] *** chenryn left
[14:19] <masak> the bad thing is that it's still churn, hassle, and tuits

[14:20] <masak> moritz++ # deprecations, +1

[14:20] * jnthn didn't even really know splitdir existed, and wonders where it is

[14:20] <andreoss> m: say '"abc \"xyz\" "'   ~~ / [ <-["]> | \\<["]> ]+  /;

[14:20] <camelia> rakudo-moar bad9be: OUTPUT«｢abc \"xyz\" ｣␤»

[14:20] *** laouji joined
[14:21] <jnthn> But yeah, I'm not really up for much more churn.

[14:21] <andreoss> good

[14:21] <masak> jnthn: no-one is "up for" churn :P

[14:22] *** bjz left
[14:22] <masak> it's like Eddie Izzard says "he does not suffer fools lightly" -- well, who does? who goes, "hey, come on in, fools! welcome, fools!" :P

[14:22] <andreoss> but if i use \" ~ \" it stops wotk

[14:22] *** Xor_ left
[14:22] <andreoss> m: say '"abc \"xyz\" "'  ~~ / \" ~ \" [ <-["]> | \\<["]> ]+  /;

[14:22] <camelia> rakudo-moar bad9be: OUTPUT«｢"abc \"｣␤»

[14:22] <pmurias> masak: some of the hassle could be removed if we had a grammar using 'fix-names foo.p6' script

[14:23] <masak> pmurias: I'd take a good deprecation warning any day over that, given the choice.

[14:23] *** Xor_ joined
[14:24] <pmurias> masak: isn't the optimal solution is to have both?

[14:24] *** ely-se joined
[14:25] *** aborazmeh left
[14:25] <pmurias> you see a deprecation warnings, run fix-names, run the test suit, look at 'git diff' and commit

[14:25] *** laouji left
[14:25] *** bjz joined
[14:26] <dalek> rakudo/nom: b6c528d | jnthn++ | src/core/traits.pm:

[14:26] <dalek> rakudo/nom: Routines declaring of/returns T are Callable[T].

[14:26] <dalek> rakudo/nom: 

[14:26] <dalek> rakudo/nom: So you can pass them to something wanting a `T &foo` parameter.

[14:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b6c528d2ce

[14:26] *** khw joined
[14:27] <dalek> rakudo/nom: e5612aa | lizmat++ | src/core/Set (3 files):

[14:27] <dalek> rakudo/nom: Make SetHash.pairs/values/kv left-valuable

[14:27] <dalek> rakudo/nom: 

[14:27] <dalek> rakudo/nom: Which means, that if you assign a False value to it, the key will

[14:27] <dalek> rakudo/nom: be removed from the SetHash.  Just like setting the value to 0 with

[14:27] <dalek> rakudo/nom: BagHash and MixHash.

[14:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e5612aac40

[14:27] <lizmat> commute to Amsterdam.pm&

[14:28] *** lizmat left
[14:31] <andreoss> m: say q/"abc \"xyz\"" .../ ~~ / \" ~ \" [ <-["]> | '\"' ]++ /;

[14:31] <camelia> rakudo-moar fbac82: OUTPUT«｢"abc \"xyz\"｣␤»

[14:32] <masak> pmurias: yes, both is better. but given the exclusive choice, I'd prefer the deprecation which told me what to do manually.

[14:32] <jnthn> m: sub f($x) returns Int { return $x }; say &f ~~ Callable[Int]

[14:32] <camelia> rakudo-moar fbac82: OUTPUT«False␤»

[14:32] *** bjz left
[14:33] *** bjz joined
[14:34] <dalek> roast: 4e9eb58 | jnthn++ | S06-signature/types.t:

[14:34] <dalek> roast: Add a test for RT #121426.

[14:34] <dalek> roast: review: https://github.com/perl6/roast/commit/4e9eb58e78

[14:36] *** laouji joined
[14:38] * grondilu wonders why panda is so slow

[14:39] <grondilu> (just launching "panda help" and I could almost make myself a coffee before I get any output :/  )

[14:39] <dalek> roast: 9d891a0 | jnthn++ | S06-multi/type-based.t:

[14:39] <dalek> roast: Further coverage of RT #121426.

[14:39] <dalek> roast: 

[14:39] <dalek> roast: Ensuring the fix interacts correctly with multi-dispatch.

[14:39] <dalek> roast: review: https://github.com/perl6/roast/commit/9d891a02b5

[14:40] <tadzik> grondilu: many factors :/

[14:40] <tadzik> grondilu: mostly it's just that panda is a big beast

[14:40] <tadzik> lots of code that gets compiled whenever you type 'panda'

[14:40] *** laouji left
[14:41] <grondilu> ok

[14:41] <[Coke]> could also stand to be profiled, maybe?

[14:42] <_itz> some suggestions for addition perl6.org home page content at https://github.com/perl6/perl6.org/pulls

[14:42] <_itz> ermm https://github.com/perl6/perl6.org/pull/38

[14:47] <dalek> perl6.org: 21e28de | (Steve Mynott)++ | source/index.html:

[14:47] <dalek> perl6.org: Some suggested new content for the home page intended to inspire

[14:47] <dalek> perl6.org: discussion.

[14:47] <dalek> perl6.org: 

[14:47] <dalek> perl6.org: Basically 5 bullet points of Perl 6 features which probably needs

[14:47] <dalek> perl6.org: review.

[14:47] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/21e28decdf

[14:47] <dalek> perl6.org: 97ff8f2 | (Zoffix Znet)++ | source/index.html:

[14:47] <dalek> perl6.org: Merge pull request #38 from stmuk/master

[14:47] <dalek> perl6.org: 

[14:47] <dalek> perl6.org: Some suggested new content for the home page intended to inspire discussion.

[14:47] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/97ff8f2e8f

[14:48] <pmurias> nqp-m: sub MAIN($arg) {say($arg, nqp::isstr($arg))}

[14:48] <camelia> nqp-moarvm: OUTPUT«/tmp/NgXQoV7ulj1␤»

[14:49] <pmurias> and yet in NQP.nqp we have sub MAIN(@ARGS) {...} on the moarvm backend

[14:51] <dalek> perl6.org: 2053fab | (Zoffix Znet)++ | source/index.html:

[14:51] <dalek> perl6.org: Take out feature list from "lead" paragraph

[14:51] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/2053fab1aa

[14:51] <gfldex> m: my @l = (1,(2,3,(4,5)),6); my @f = @l.deepmap({$_ * -1}); @f.perl.say;

[14:51] <camelia> rakudo-moar fbac82: OUTPUT«[-1, (-2, -3, $(-4, -5)), -6]␤»

[14:52] *** mspo left
[14:53] <skids> ^^ Every one in a while you have to step back and appreciate how menial it would be to "do that in C"

[14:53] <tadzik> :D

[14:53] *** ChoHag_ left
[14:54] <gfldex> m: my constant @l := (1,(2,3,(4,5,(6,7))),8); my $f = @l.deepmap({$_ * -1}); $f.perl.say;

[14:54] <camelia> rakudo-moar e5612a: OUTPUT«$(-1, $(-2, -3, $(-4, -5, $(-6, -7))), -8)␤»

[14:55] <ilmari> what's the difference between () [] and $()?

[14:55] <_itz> list, array and slip

[14:55] <skids> Though... where's that lone $() in the first example coming from?

[14:55] <skids> list, arrray, and item

[14:55] <skids> slip would be |()

[14:56] <_itz> oh sorry 

[14:56] <PerlJam> And you don't usually see slips.  :)

[14:56] <skids> Yeah, they tend to slip by :-)

[14:57] *** pyrimidi_ left
[14:57] <_itz> Zoffix: the smaller section looks a lot better but you collapsed the 3rd bullet point into the 2nd I think

[14:58] *** ely-se left
[14:58] *** ZoffixWork joined
[14:58] <ZoffixWork> _itz, yeah, I've noticed but my dev box froze up :) I'm on it! :)

[14:59] <ZoffixWork> _itz, are you stmuck on GitHub?

[14:59] <_itz> ZoffixWork: yes

[14:59] <jnthn> ilmari: () List, Array, $ just means "itemize" (put in an anonymous Scalar) so $() is an itemized list and $[] is an itemized Array

[14:59] *** laouji joined
[14:59] <_itz> it's a bullet point slip!

[14:59] <jnthn> oops, "[] Array"

[14:59] <PerlJam> m: $(7).perl.say;  $[7].perl.say;  $(3,4).perl.say;  $[3,4].perl.say;  # some useful differences

[14:59] <camelia> rakudo-moar e5612a: OUTPUT«7␤[7]␤$(3, 4)␤[3, 4]␤»

[15:01] <jnthn> masak: Did a past you that was a future you when you lasted updated https://rt.perl.org/Ticket/Display.html?id=77334 run into any use cases for not doing what the ticket wants? :)

[15:01] *** andreoss left
[15:01] <gfldex> m: say nqp::istype((class :: does SlippyIterator { method pull-one() is raw {}}).new, Iterable);

[15:01] <camelia> rakudo-moar e5612a: OUTPUT«0␤»

[15:01] <gfldex> i thinks that's where the lone $() comming from

[15:01] <masak> jnthn: let the present me check.

[15:02] <jnthn> gfldex: I'd not expect that to be Iterable

[15:02] <jnthn> gfldex: It's an Iterator, though

[15:02] <gfldex> jnthn: i think https://github.com/rakudo/rakudo/blob/4f7065226c4f28f88d70f91065be1e7bff0cb7cc/src/core/metaops.pm#L518 does expect it to be Iterable

[15:03] *** larion left
[15:04] *** domidumont left
[15:04] *** lichtkind joined
[15:05] <jnthn> gfldex: I'm not sure that line is wrong but the .item 2 lines below looks a bit suspect to me

[15:06] *** ChoHag joined
[15:06] <masak> jnthn: the answer to your question is "no". please decont away.

[15:06] <dalek> perl6.org: 7e2d6c6 | (Zoffix Znet)++ | source/ (3 files):

[15:06] <dalek> perl6.org: Fix up styles and alignment

[15:06] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/7e2d6c613f

[15:07] <jnthn> masak: OK. I pondered waiting for TimToady approval but I already have a queue of those things already, so... :)

[15:07] <jnthn> masak: Only tricky thing is that it may not be as simple as decont

[15:07] *** pierrot left
[15:07] *** pierrot joined
[15:08] <jnthn> m: say (1, 2, 3).map({ $['a' xx $_] }).perl

[15:08] <camelia> rakudo-moar e5612a: OUTPUT«($["a"], $["a", "a"], $["a", "a", "a"]).Seq␤»

[15:08] <jnthn> If I decont then we lose the itemization on those.

[15:09] <masak> ...hm.

[15:09] <jnthn> So we more need the return from sub semantics (recont if item)

[15:09] <jnthn> uh

[15:09] <jnthn> recont if Iterable

[15:09] <masak> I can see how that's related, but it *feels* like completely different thing.

[15:09] <masak> uh, ok

[15:09] <masak> I had no idea subs did that :P

[15:11] <jnthn> They did 'cus you filed a ticket when they didn't :P

[15:12] * PerlJam wonders if this falls in the category of tormenting the implementor ...

[15:12] <jnthn> Back when we had lots of implicit flattening and [...] was an item, it was rather more noticable.

[15:12] <jnthn> Nowadays I'd probably get through spectest with a patch that just deconts, but... :)

[15:13] * jnthn doesn't really have a great name for the decont if not Iterable, recont if it is... :)

[15:13] <moritz> autocont

[15:13] <jnthn> otoh

[15:13] <PerlJam> dwimcont

[15:13] <jnthn> I wonder if we need the magic any more

[15:14] <jnthn> (Because so much auto-flattening is gone.)

[15:14] *** diana_olhovik_ left
[15:15] <jdv79> who else thinks a custom unicode op example on the front page would be coool?

[15:15] <jdv79> c'mon;)

[15:15] <ZoffixWork> jdv79, we had it! :)

[15:16] <jdv79> the past is great but the future is more interesting ot me

[15:16] <ZoffixWork> jdv79, we had this one: http://perl6.xtatik.org/

[15:17] *** rurban1 joined
[15:17] <ZoffixWork> jdv79, there was one from masak that's cleaner.

[15:17] <jdv79> yes, something like masak's is cool

[15:17] *** rurban left
[15:17] <jdv79> even if just hte simple plus minus

[15:18] <jnthn> Filed this discussion on the ticket; will have to filter this one through TimToady++ also I guess :)

[15:18] <masak> jnthn: I can assure you that most of the time after filing a ticket, I *forget about the ticket completely*, instead of hanging around for the fix and then reviewing it and nodding sagely :P

[15:18] <masak> I *wish* I did the latter sometimes :P

[15:18] <PerlJam> masak: you can nod sagely at any time  :)

[15:18] <ZoffixWork> jdv79, this one? http://irclog.perlgeek.de/perl6/2015-10-05#i_11321117

[15:18] <ZoffixWork> jdv79, I don't like that one, 'cause I've no idea what's going on there :P

[15:19] *** chenryn_ joined
[15:19] <jdv79> the concept of "plus or minus" seems pretty easy to me 

[15:19] <jdv79> what is complicated about the example?

[15:20] <ZoffixWork> jdv79, what is it doing?

[15:20] <jnthn> Quite a few of the xmas tickets are things needing little design rulings :)

[15:20] <jdv79> its just op sugar for a range

[15:20] *** Xor_ left
[15:21] <jdv79> i'm sure masak or someone could write an "explain" for it

[15:21] <jdv79> i would but i'm not great at docs

[15:22] <ZoffixWork> jdv79, I like masak's example with "approx equals", but I'm miserably failing with searching the logs. It was mentioned yesterday

[15:23] <ZoffixWork> jdv79, as a Perl 6 outsider, I found it much clearer than the +/- sample.

[15:23] <jdv79> sounds perhaps highly subjective but ok

[15:23] <[Coke]>  ≈ at http://irclog.perlgeek.de/perl6/2015-10-05#i_11321129

[15:23] <jdv79> either is fine to me 

[15:24] <ZoffixWork> Oh that one also has the +/- bit

[15:24] <jdv79> esp since the approx is built on the plus minus:)

[15:24] <ZoffixWork> :D

[15:24] <[Coke]> +1 on the ≈ - it hides the smartmatch in the sub, making it less necessary to understand ~~ to understand adding an operator.

[15:24] <[Coke]> ... oh, I didn't notice that. Hurm.

[15:24] <[Coke]> eh, ship it

[15:25] *** Xor_ joined
[15:25] <jdv79> woohoo

[15:25] <ZoffixWork> [Coke]++

[15:25] <ZoffixWork> :D

[15:25] <jdv79> now if only that would be used in tests and provide col diagnostics

[15:25] <jdv79> *cool

[15:25] <PerlJam> except, as an example on perl6.org, don't we want "understanding"?

[15:25] <ZoffixWork> I would get rid of "epsilon" on that example and the +/- think

[15:26] <PerlJam> how would you get rid of epsilon?  Fix it to some tiny number?

[15:26] <jdv79> PerlJam: if there was a prose explanation attached what is not "understanding"?

[15:26] <ZoffixWork> m: sub infix:<≈>($l, $r) { $l-0.5 < $r and $l+0.5 > $r }; say 2.25 ≈ 2.3; say 3.25 ≈ 2.3

[15:26] <camelia> rakudo-moar e5612a: OUTPUT«True␤False␤»

[15:27] <ZoffixWork> Yeah, just have some pre-built thing

[15:27] <PerlJam> jdv79: is there a place for prose on the perl6.org?

[15:27] <PerlJam> jdv79: or do you mean in the comments of the code?

[15:27] *** chenryn_ left
[15:27] <jdv79> huh?  i'm talking about the suggestion about an explanation like some oether site

[15:27] <jdv79> racket?  i forget.

[15:27] <ilmari> sub infix:<≈>($l, $r) { $l-0.5 < $r < $l+0.5 }; say 2.25 ≈ 2.3; say 3.25 ≈ 2.3

[15:27] <ilmari> m: sub infix:<≈>($l, $r) { $l-0.5 < $r < $l+0.5 }; say 2.25 ≈ 2.3; say 3.25 ≈ 2.3

[15:27] <camelia> rakudo-moar e5612a: OUTPUT«True␤False␤»

[15:28] <ZoffixWork> Oh you can do that in Perl 6? Wow, sweet!

[15:28] <PerlJam> jdv79: oh!  yes, that would be excellent!

[15:28] <jdv79> http://irclog.perlgeek.de/perl6/2015-10-06#i_11324349

[15:28] <[Coke]> ilmari++

[15:29] *** llfourn joined
[15:29] <_itz> https://pbs.twimg.com/media/CQm-iaVUcAAERGc.jpg

[15:29] <jdv79> i still think masak's are better thought out  but if it has to be dumbed down that much to get on the page sure

[15:29] <_itz> dining philosophers?

[15:31] <PerlJam> jdv79: I don't know about "dumbed down", but I think we should have examples that are simple to read and understand.   We should also have some examples that are maybe not-so-simple to show off  :)

[15:31] <masak> I'm fine with removing the epsilon, though I put it there because I thought it was a nice, non-silly use of operator adverbs

[15:31] <masak> something that's sorely lacking outside of :exists and :delete

[15:32] *** chenryn_ joined
[15:32] <[Coke]> There isn't a lot of screen real estate there. I like the idea of each little block showing -a- feature.

[15:32] <PerlJam> masak: maybe it would look better as a ternary op.

[15:32] <masak> PerlJam: could you express that in code, please?

[15:32] <[Coke]> we have the examples page with more complex examples that we can link to

[15:32] <jdv79> yeah, ilmari's only shows one "interesting" thing.  masak's could be used a a jumping off point into many different topics

[15:33] <ZoffixWork> jdv79, yeah, but if you don't "dumb down", this will be happening, except without you there to explain it: http://irclog.perlgeek.de/perl6/2015-10-06#i_11326866

[15:33] <ZoffixWork> :)

[15:33] <_itz> I think the home page examples should be "ad examples" .. easy to understand and compelling

[15:33] <ZoffixWork> Agreed

[15:33] <ilmari> jdv79: and it still has an additional neat thing, the comparison chainging

[15:33] <PerlJam> masak: just as soon as I figure out how to do ternary ops :)

[15:34] *** llfourn left
[15:34] <ilmari> m:  say 1 < 3 < 5

[15:34] <camelia> rakudo-moar e5612a: OUTPUT«True␤»

[15:34] <ZoffixWork> Or maybe do a carusel(sp?) type of thing and shove more complex examples further down the line, so only the users interested enough in seeing them get to them

[15:34] <jdv79> yeah, as long as there's something showing unicode

[15:34] <ilmari> m:  say 1 == 1.0 == "1"

[15:34] <camelia> rakudo-moar e5612a: OUTPUT«True␤»

[15:34] <jdv79> for now

[15:34] <masak> PerlJam: please let me know how that goes.

[15:34] *** tokuhirom joined
[15:34] <ilmari> m:  say 4 == 4.0 == "4"

[15:34] <camelia> rakudo-moar e5612a: OUTPUT«True␤»

[15:34] *** FROGGS left
[15:34] <ilmari> m:  say 1 == 1.0 == Ttrue

[15:34] <jdv79> ilmari: true

[15:34] <camelia> rakudo-moar e5612a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/EIBEI9k7tP␤Undeclared name:␤    Ttrue used at line 1␤␤»

[15:34] <_itz> there probably should be a grammar as well 

[15:34] <ilmari> m:  say 1 == 1.0 == True

[15:34] <camelia> rakudo-moar e5612a: OUTPUT«True␤»

[15:35] <jdv79> yes, ad examples++

[15:35] <masak> m: say 4 == 4.0 == "four"

[15:35] <camelia> rakudo-moar e5612a: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '7⏏5four' (indicated by 7⏏)␤  in block <unit> at /tmp/C8mFLL5fK7:1␤␤Actually thrown at:␤  in block <unit> at /tmp/C8mFLL5fK7:1␤␤»

[15:35] <masak> m: multi prefix:<+>("four") { 4 }; say 4 == 4.0 == "four"

[15:35] <camelia> rakudo-moar e5612a: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '7⏏5four' (indicated by 7⏏)␤  in block <unit> at /tmp/cs_soyClJJ:1␤␤Actually thrown at:␤  in block <unit> at /tmp/cs_soyClJJ:1␤␤»

[15:35] <masak> m: multi prefix:<+>("four") { 4 }; say 4 == 4.0 == +"four"

[15:35] <camelia> rakudo-moar e5612a: OUTPUT«True␤»

[15:35] <masak> \o/

[15:35] <ZoffixWork> :D

[15:35] *** chenryn_ left
[15:37] *** lichtkind left
[15:38] *** tokuhirom left
[15:38] *** tm joined
[15:39] *** chenryn_ joined
[15:39] *** chenryn_ left
[15:40] <dalek> rakudo/nom: f04a24b | jnthn++ | src/core/Array.pm:

[15:40] <dalek> rakudo/nom: Fix BIND-POS type checking in typed arrays.

[15:40] <dalek> rakudo/nom: 

[15:40] <dalek> rakudo/nom: We accidentally allowed the unchecked candidates to get called due to

[15:40] <dalek> rakudo/nom: the missing proto.

[15:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f04a24bc1b

[15:40] *** chenryn_ joined
[15:40] <masak> m: multi infix:<+>(2, 2) { 5 }; say "2 + 2 == ", 2 + 2

[15:40] <camelia> rakudo-moar e5612a: OUTPUT«2 + 2 == 5␤»

[15:40] <masak> \o/

[15:40] <dalek> roast: 2e2b9fe | jnthn++ | S09-typed-arrays/arrays.t:

[15:40] <dalek> roast: Tests for RT #123769.

[15:40] <dalek> roast: review: https://github.com/perl6/roast/commit/2e2b9fe0c0

[15:43] <timotimo> i'm not 100% +1 on "lazy and eager evaluation", because people from a e.g. haskell background will expect pervasive lazyness throughout the whole language, whereas we only have lists that can be lazy

[15:46] *** ZoffixWork left
[15:49] *** laouji left
[15:50] <dalek> perl6.org: 4a11eaf | (Steve Mynott)++ | source/index.html:

[15:50] <dalek> perl6.org: only lists are lazy as suggested by timotimo

[15:50] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/4a11eafcbc

[15:50] *** laouji joined
[15:51] <timotimo> thanks :)

[15:55] *** laouji left
[15:55] <jnthn> I just wrote up a rejection of https://rt.perl.org/Ticket/Display.html?id=125762 - not sure if there's any nuggets in it worth nabbing for documentation somewhere.

[16:01] <jnthn> Hm. RT #125753. Back to the regex engine for me, I guess...

[16:01] *** synbot6 joined
[16:06] *** laouji joined
[16:07] <TimToady> such backlog...at least I dont have to write any more talks this year...

[16:07] <yoleaux> 5 Oct 2015 14:48Z <grondilu> TimToady: I'm curious to read your thoughts about &[o] being associative.  It bugs me a bit that we can't define something like [o] &f xx *

[16:08] <jnthn> TimToady: How went the talk?

[16:09] <TimToady> quite well, room was almost full

[16:09] <[Coke]> RT: 1037; xmas: 91; LTA: 88; weird: 12; glr: 4; nom regression: 8; testneeded: 10

[16:09] <TimToady> will be on video at some point

[16:10] <TimToady> use vim as my presenter :)

[16:10] <jnthn> [Coke]: yay, I was looking forward to seeing the xmas count...been attacking that some today :)

[16:10] <[Coke]> jnthn++

[16:11] *** laouji left
[16:11] <TimToady> found a bug during the talk

[16:11] <TimToady> m: say $[1,2,3].perl; say $(1,2,3).perl

[16:11] <camelia> rakudo-moar e5612a: OUTPUT«[1, 2, 3]␤$(1, 2, 3)␤»

[16:11] <jnthn> oops 

[16:11] <TimToady> where'd the $ go on the []?

[16:11] <jnthn> Beats me!

[16:11] <_itz> down the back of the sofa?

[16:11] <TimToady> likely

[16:12] <timotimo> well, i certainly didn't eat it!

[16:12] * timotimo chews inconspicuously

[16:12] <TimToady> maybe they said "buck" and you thought it was venison?

[16:14] *** Ven joined
[16:14] <gfldex> m: my @l = (1,(2,3,(4,5,(6,7))),8); my $f = @l.deepmap({$_ * -1}); $f.perl.say;

[16:14] <camelia> rakudo-moar e5612a: OUTPUT«[-1, (-2, -3, $(-4, -5, $(-6, -7))), -8]␤»

[16:14] <gfldex> m: my @l = (1,$(2,3,(4,5,(6,7))),8); my $f = @l.deepmap({$_ * -1}); $f.perl.say;

[16:14] <camelia> rakudo-moar e5612a: OUTPUT«[-1, (-2, -3, $(-4, -5, $(-6, -7))), -8]␤»

[16:14] <gfldex> that could be related

[16:14] *** ^elyse^ joined
[16:15] * [Coke] tries to git pull -rebase and gets a merge conflict. wtf.

[16:15] <[Coke]> (with, I thought, no local commits)

[16:16] *** zakharyas left
[16:17] <[Coke]> must have been an unpushed one, ah well.

[16:18] <timotimo> is the "can split method calls across multiple lines" thing in the latest release already?

[16:18] <timotimo> star-m: say $*PERL.version

[16:18] <camelia> star-m 2015.03: OUTPUT«vunknown␤»

[16:18] <timotimo> star-m: say $*VM.version

[16:18] <camelia> star-m 2015.03: OUTPUT«v2015.3␤»

[16:18] <timotimo> oh

[16:18] <timotimo> it's certainly not in that version!

[16:19] <[Coke]> use Test; is_approx (-1) ** -i, 23.1406926327793, "(-1) ** -i is approx 23.1406926327793";

[16:19] <[Coke]> m: use Test; is_approx (-1) ** -i, 23.1406926327793, "(-1) ** -i is approx 23.1406926327793";

[16:19] <camelia> rakudo-moar e5612a: OUTPUT«not ok 1 - (-1) ** -i is approx 23.1406926327793␤␤# Failed test '(-1) ** -i is approx 23.1406926327793'␤# at /tmp/K70AFpQH35 line 1␤# expected: 23.1406926327793␤# got:      NaN+NaN\i␤»

[16:20] <timotimo> it was committed before the change to 6.Birthday

[16:20] <jnthn> Pretty sure it was after the last monthly

[16:20] <TimToady> yes, it was

[16:21] <timotimo> right

[16:21] *** laouji joined
[16:21] <timotimo> i was about to rewrite the answer about "why do i have to use unspace for method calls across line breaks?"

[16:21] <jnthn> Oh grmbl, the charrange bug is 'cus the NFA engine doesn't know anything about charrange in the ignorecase and ignoremark case

[16:21] <timotimo> but if it's not yet in a release we've done, now is probably not the right moment to do it

[16:24] * jnthn wonders how to find out if there are places in unicode where CPx..CPy is contiguous but fc(CPx)..fc(CPy) isn't

[16:24] <jnthn> There surely are such cases.

[16:24] <TimToady> I know!  Write a program!

[16:24] <timotimo> you mean computers can do that?

[16:24] <jnthn> I need to implement fc first :)

[16:24] <TimToady> that's a program too

[16:25] <timotimo> nativecall into something that can do fc :)

[16:25] <jnthn> Though suspect we already have the data handy to do it...

[16:25] <jnthn> The other problem is

[16:25] <jnthn> The NFA engine as we have it today is all about codepoints

[16:25] <TimToady> ⴽ shaving

[16:25] <jnthn> Meaning that we almost certainly have weird bugs in the interaction of NFG and LTM

[16:25] <ilmari> jnthn: fc('ß') eq 'ss', for starters

[16:25] <timotimo> .u ⴽ 

[16:25] <yoleaux> U+2D3D TIFINAGH LETTER YAK [Lo] (ⴽ)

[16:25] <timotimo> cool

[16:25] <ilmari> jnthn: so using that as a range end point is nonsensical

[16:25] *** laouji left
[16:26] <jnthn> ilmari: Indeed

[16:26] <jnthn> ilmari: Though we don't actually implement the special casing stuff yet

[16:27] <ilmari> m: "BLAH".fc.say

[16:27] <camelia> rakudo-moar f04a24: OUTPUT«Method 'fc' not found for invocant of class 'Str'␤  in block <unit> at /tmp/OWe92tIfD_:1␤␤»

[16:27] <ilmari> m: "ß".uc.say

[16:27] <camelia> rakudo-moar f04a24: OUTPUT«ß␤»

[16:28] <ilmari> $ perl -Mutf8 -C -E 'say uc "ß"'

[16:28] <ilmari> SS

[16:28] <[Coke]> ilmari: FYI, there are RTs & tests about the ß and other more complicated casing issues.

[16:28] <jnthn> [Coke]: Indeed, the special casing one is on the xmas list too :)

[16:29] <timotimo> we totally need to turn that silly Ss thing into a grapheme cluster >_>

[16:29] *** pecastro left
[16:29] <jnthn> Only if the Unicode spec does :P

[16:29] <timotimo> pls unicode

[16:29] <TimToady> all is fair if you predeclare: use screw Unicode;

[16:30] <jnthn> m: say ord('ß')

[16:30] <camelia> rakudo-moar f04a24: OUTPUT«223␤»

[16:30] <jnthn> m: say ord('ß').base(16)

[16:30] <camelia> rakudo-moar f04a24: OUTPUT«DF␤»

[16:36] *** laouji joined
[16:37] *** Loren joined
[16:38] <nine> m: say ($[1,2]).perl

[16:38] <camelia> rakudo-moar f04a24: OUTPUT«[1, 2]␤»

[16:39] <dalek> rakudo/nom: 02e6198 | (Stefan Seifert)++ | src/core/Array.pm:

[16:39] <dalek> rakudo/nom: Fix ($[1,2]).perl missing the $

[16:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/02e6198009

[16:39] *** dakkar left
[16:39] <nine> I have to admit however, that I'm not sure why exactly this fixes it.

[16:40] <[Coke]> nine: lc self is used right after that - with SELF: in the signature, what does self mean?

[16:40] *** laouji left
[16:40] <[Coke]> anyone else getting failures in t/spec/S04-exceptions/fail.t, t/spec/S04-statements/try.t, t/spec/S32-io/move.t, t/spec/integration/error-reporting.t ?

[16:41] <TimToady> does 'self' do a decont for some reason/

[16:41] *** pecastro joined
[16:41] <TimToady> ?

[16:41] <jnthn> [Coke]: yes

[16:41] *** ZoffixWork joined
[16:41] <nine> Hah, seems like moritz++ fixed the exact same bug in List back in August

[16:41] <jnthn> TimToady: Yes, we've pretty much always had it that way

[16:42] <jnthn> TimToady: For one 'cus it means self is useful for attribute access without having to throw decont onto every single one

[16:42] <ZoffixWork> TimToady, timotimo I'm pretty sure the "methods on multiple lines" are in the latest Rakudo Star. I installed it late last week and all the examples in these docs work: https://github.com/stmuk/p6-Text-VimColour

[16:42] <nine> jnthn: regarding https://github.com/rakudo/rakudo/commit/f04a24bc1b so the takeaway is "when in doubt, add a proto"?

[16:43] *** Ven left
[16:43] <jnthn> nine: Only when you know you want to hide all inherited candidates

[16:43] <jnthn> nine: You often don't

[16:44] <nine> Ah, it's about multi dispatch and inheritance. Thanks for enlightening me :)

[16:44] *** yqt joined
[16:45] <TimToady> same thing for lexical scopes and multi subs

[16:46] <nine> It's quite obvious in hindsight, but this definitely has been a missing piece in my understanding of multi dispatch

[16:46] <TimToady> I wonder if we actually test that...

[16:48] <jnthn> TimToady: Oh, I had a question in that area...

[16:49] <jnthn> proto foo(|) { * }; sub foo($a) { }; sub foo($a, $b) { }

[16:49] <jnthn> Here, the synopses have us promote those two subs to multis

[16:49] <jnthn> But do I have to distinguish it from:

[16:49] <jnthn> multi sub foo($a) { }; sub foo($a, $b) { }

[16:49] <jnthn> (That is, we already installed a generated proto)

[16:50] <TimToady> otoh, it's much more likely to be a mistake

[16:50] <TimToady> well, but if it Just Works...

[16:51] <TimToady> but we could mark generated proto as not being quite that powerful

[16:51] <nine> If it Just Works it better always worked like intended...

[16:51] *** laouji joined
[16:51] <jnthn> Well, I can probably mark it in the compiler's symbol table rather than having to mark the code object itself

[16:51] <TimToady> "Need explicit proto to promote only sub to multi sub"

[16:52] <jnthn> Anyway, I can find a way to distinguish them; it's just a little extra effort, which I only wanted to do it it's needed. :)

[16:52] <jnthn> Or more like, didn't want to do and then have you tell me I didn't need to. :)

[16:52] *** ZoffixWork left
[16:52] *** atweiden joined
[16:52] *** ^elyse^ left
[16:53] <TimToady> m: proto foo(|) { * }; sub foo($a) { say "HERE" }; sub foo($a, $b) { say "THERE" }; foo(42)

[16:53] <camelia> rakudo-moar f04a24: OUTPUT«5===SORRY!5=== Error while compiling /tmp/7cbxO3We6a␤Redeclaration of routine foo␤at /tmp/7cbxO3We6a:1␤------> 3foo(|) { * }; sub foo($a) { say "HERE" }7⏏5; sub foo($a, $b) { say "THERE" }; foo(4␤    expecting any of:␤        horizontal…»

[16:54] <jnthn> Today we don't promote at all

[16:54] <TimToady> otgh, conservative thing might be to just disallow it for now

[16:54] <jnthn> Sure, I can change the design docs and resolve the ticket that way too :)

[16:55] <moritz> +1 to disallowing it

[16:55] <TimToady> I think it's that way to go with the design of 'my multi $var' allowing multiple 'my $var' which is motivated by making it easier to write macros

[16:56] *** laouji left
[16:56] <moritz> we have multi vars? :-)

[16:56] <TimToady> but we don't do that yet either, so I don't see much point; maybe a use case will come up when we do macros right

[16:56] <jnthn> OK

[16:57] <jnthn> Then I'll update design to say we're not doing that, clear out any tests, and resolve ticket that way

[16:57] <jnthn> Thanks :)

[16:57] *** diana_olhovik_ joined
[16:58] <TimToady> and it's not really quite the same either, multiple my $var are supposed to refer to the same variable, but multiple subs aren't, so it's kinda smelly anyway

[16:58] <jnthn> TimToady: There's 3 other RTs I wanted input on, with stuff scattered through the backlog, so unless it's more useful to ask it again now I'll leave you to discover 'em while catching up :)

[16:59] <TimToady> yes, I saw my name being taken in (hopefully not) vain when I skimmed, so I expect to run into them when I backlog For Reals

[16:59] <jnthn> *nod*

[16:59] <TimToady> backlog looks dense as opposed to fluffy this time :)

[17:00] <jnthn> I'm probably going to focus on the Unicode casing stuff and NFG related bits over the coming days

[17:00] <jnthn> There's a small cluster of xmas RTs in that area

[17:00] *** [TuxCM] joined
[17:01] <TimToady> maybe we can do better than linear scans of large sets of chars

[17:01] <jnthn> For char classes?

[17:01] <jnthn> We already do

[17:01] <jnthn> We have a charrange

[17:01] <ilmari> inversion lists?

[17:01] <TimToady> isn't that only a single range?

[17:01] <jnthn> But...how that intersects with :m and :i is kinda hairy

[17:02] <jnthn> Yes, like a..f

[17:02] <TimToady> hence the fc continuity question

[17:02] <TimToady> I think we need a better way to represent non-contig sets

[17:02] <jnthn> *nod*

[17:03] <TimToady> then you just switch if you notice your fc isn't contig

[17:03] <jnthn> ilmari: Yes, that's a useful data structure for it

[17:03] <ilmari> perl5 uses them heavily for unicode properties

[17:03] <TimToady> um, I don't think that's how perl5 does it

[17:04] <TimToady> it uses lazy hierarchical bitmaps

[17:04] <ilmari> unicode properties are compiled to inversion lists that are just mapped into memory

[17:04] *** diana_olhovik_ left
[17:04] <ilmari> the sets of codepoints matching a given unicode property, that is

[17:04] * jnthn should really get foldcase in place and the support for case changes that change the string length

[17:04] <TimToady> not really inversion lists, unless they changed

[17:04] <ilmari> TimToady: khw has been doing lots of work on that the last few years

[17:05] <TimToady> okay

[17:05] <ilmari> http://perl5.git.perl.org/perl.git/blob/HEAD:/regen/mk_invlists.pl

[17:06] <ilmari> some are compiled into regcomp.o, others into utf8.o

[17:08] <TimToady> thanks for the update

[17:08] * TimToady hasn't been trakcing p5 very closely, for some reason...

[17:10] *** ^elyse^ joined
[17:11] *** [TuxCM] left
[17:12] * TimToady wonders, though, if the performance on non-Latin scripts suffers from not caching recently used bitmaps

[17:13] <jnthn> Time for a break; bbl &

[17:15] *** rurban1 left
[17:16] *** n0tjack joined
[17:18] <grondilu> has anyone considered allowing functions to be algebric?   I mean, &f + &g would mean -> |arg { f(arg) + g(arg) }

[17:18] *** espadrine left
[17:18] <khw> Actually, perl5 uses a hybrid scheme.  For properties that have few enough entries in their inversion lists, binary searches are used to look things up; for larger ones, the old scheme

[17:18] <khw> is transparently used.  Keep in mind that these bitmaps are accessed through a hash, so there is that overhead.  I did some performance testing and didn't see significant differences

[17:18] <khw> but don't remember the details

[17:19] <timotimo> grondilu: you can implement &+& as a custom operator :)

[17:19] *** [TuxCM] joined
[17:19] <grondilu> yeah I guess.

[17:20] <grondilu> but the main idea was to shorten some code.  Having to define the operator myself would prevent that.

[17:20] *** laouji joined
[17:21] <grondilu> not to mention that I would also have to do it for *, -, / and stuff

[17:21] <grondilu> what I had in mind was http://rosettacode.org/wiki/Horner%27s_rule_for_polynomial_evaluation#Perl_6 for instance

[17:22] <grondilu> instead of map { $_ + $x / * }, @coeff,   I whish I could write @coeff X+ $x / *

[17:22] <TimToady> khw: thanks!

[17:23] <TimToady> yeah, hashes have a large k

[17:23] <[Coke]> -1 on functions using mathops.

[17:24] <grondilu> m: multi infix:<+>(&f, &g) { -> |a { f(a) + g(a) };  say ([o] (-19, 7, -4, 6) X+ 3 / *)(0)

[17:24] <camelia> rakudo-moar 02e619: OUTPUT«5===SORRY!5=== Error while compiling /tmp/axuJJii2l4␤Missing block␤at /tmp/axuJJii2l4:1␤------> 3;  say ([o] (-19, 7, -4, 6) X+ 3 / *)(0)7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier…»

[17:24] <grondilu> m: multi infix:<+>(&f, &g) { -> |a { f(a) + g(a) } };  say ([o] (-19, 7, -4, 6) X+ 3 / *)(0)

[17:24] <camelia> rakudo-moar 02e619: OUTPUT«Cannot call Numeric(WhateverCode: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at /tmp/jH2S3DZ7wd:1␤␤»

[17:24] *** domidumont joined
[17:25] <grondilu> m: multi infix:<+>($x, &g) { -> |a { $x + g(a) } };  say ([o] (-19, 7, -4, 6) X+ 3 / *)(0)

[17:25] <camelia> rakudo-moar 02e619: OUTPUT«-16␤»

[17:25] *** laouji left
[17:25] <grondilu> m: multi infix:<+>($x, &g) { -> |a { $x + g(a) } };  say ([o] (-19, 7, -4, 6) X+ 3 * *)(0)

[17:25] <camelia> rakudo-moar 02e619: OUTPUT«-16␤»

[17:26] <grondilu> m: multi infix:<+>($x, &g) { -> |a { $x + g(a) } };  say ([o] (-19, 7, -4, 6) X+ (3 * *))(0)

[17:26] <camelia> rakudo-moar 02e619: OUTPUT«-16␤»

[17:27] *** flussence joined
[17:28] <TimToady> masak, ven, nine: re http://irclog.perlgeek.de/perl6/2015-10-05#i_11317759 we could think about forcing $ = 42 to mean 'my', and leave non-assigned $ to be 'state'

[17:29] <TimToady> but then we get the question of whether = is the right twigil for pod, since people will want to write $=42 and such

[17:30] <TimToady> m: say $=42

[17:30] <camelia> rakudo-moar 02e619: OUTPUT«42␤»

[17:30] <TimToady> m: say $=sin 1

[17:30] <camelia> rakudo-moar 02e619: OUTPUT«5===SORRY!5=== Error while compiling /tmp/9tXvghvan9␤Pod variable $=sin not yet implemented. Sorry. ␤at /tmp/9tXvghvan9:1␤------> 3say $=sin7⏏5 1␤»

[17:33] *** [TuxCM] left
[17:35] *** kuzgun joined
[17:35] * [Coke] just read rethrown to pun with "retcon". whoops.

[17:37] <[Coke]> We have a test util to get temp file names for tests ,yes? (see custom logic in io/bom.t)

[17:40] *** Xor_ left
[17:44] *** Peter_R joined
[17:45] *** xfix joined
[17:45] *** xfix left
[17:45] *** xfix joined
[17:51] *** Xor_ joined
[17:52] *** diana_olhovik joined
[17:52] *** FROGGS joined
[17:55] <FROGGS> o/

[17:56] *** yqt left
[18:01] <gtodd>  Can anyone tell me the obviousness I am missing in this function/method:  https://github.com/MattOates/Stats/blob/master/lib/Stats.pm6#L153  it always falls through to default because it is returning the wrong type for the type check (I think)  ...  I don't want to finish it for now I just want htis(@data) to print out $bin-width for each adverb type 

[18:01] <atweiden> m: my DateTime $dt .= new(:year(1979), :month(5), :day(27), :hour(0), :minute(32), :second(0.999999), :timezone(-25200)); say $dt.perl; say $dt; say $dt.second; say so '1979-05-27T00:32:00.999999-07:00' ~~ $dt

[18:01] <camelia> rakudo-moar 02e619: OUTPUT«DateTime.new(year => 1979, month => 5, day => 27, hour => 0, minute => 32, second => 0.999999, timezone => -25200)␤1979-05-27T00:32:00-07:00␤0.999999␤False␤»

[18:01] <atweiden> is there a built-in way to stringify a DateTime with fractional seconds displayed by default?

[18:02] <gtodd> so  hist (@data, breaks => "Rice") would pruint the result of the given block (i.e.  $bin-width = abs($x.max - $x.min) / 2*($x.elems ** 1/3) ... with the sample data that would be 13.333)

[18:03] *** chenryn_ left
[18:05] <gtodd> hist(@data) that is ...

[18:08] <TimToady> grondilu: I think we can make ∘ left-associative, but note that [∘] in http://irclog.perlgeek.de/perl6/2015-10-05#i_11318069 makes no sense, though [\∘] works if ∘ is left-associative

[18:10] <gtodd> atweiden: $dt.seconds will show seconds ... you want the whole date string to just include that?

[18:10] <masak> since function composition is... associative, does it actually matter if it's left associative or right associative?

[18:11] <TimToady> pragmatically, yes

[18:11] *** abaugher left
[18:11] <TimToady> m: say [\o](&cos xx *)[^10]

[18:11] <camelia> rakudo-moar 02e619: OUTPUT«Cannot reverse a lazy list␤  in block <unit> at /tmp/lFjgEgi40c:1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp:2860␤  in block <unit> at /tmp/lFjgEgi40c:1␤␤»

[18:11] <TimToady> that works in my version

[18:12] <_itz>                             100% 3769     3.7KB/s   00:00

[18:12] <_itz> oops

[18:13] *** abaugher joined
[18:13] <ab5tract_> moznion++ ; IO::Blob

[18:14] *** paulmr joined
[18:17] <gtodd> atweiden: the way I understand it there is likely something like $dt.format(seconds => 1 ) and when you do the construction you could specify it ... but IANAPH

[18:21] *** laouji joined
[18:21] <chansen_> atweiden: IMO, If DateTime accepts any fractional seconds precision, it should also format it in a logical decimal unit: milli, micro, nano, pico ... yocto?

[18:21] <pink_mist> planck instants?

[18:22] <chansen_> heh

[18:22] <TimToady> roast seems to think someone brake backtracing

[18:24] <TimToady> roast also doesn't like the $[] fix

[18:25] <dalek> rakudo/nom: 164953b | FROGGS++ | src/ (3 files):

[18:25] <dalek> rakudo/nom: change some nqp::die's to $*W.throw to get file/line

[18:25] <dalek> rakudo/nom: 

[18:25] <dalek> rakudo/nom: This also means better testability. There are still a bunch of

[18:25] <dalek> rakudo/nom: nqp::die's left.

[18:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/164953b3de

[18:25] *** yqt joined
[18:25] *** laouji left
[18:29] <dalek> rakudo/nom: 54746f2 | TimToady++ | src/ (2 files):

[18:29] <dalek> rakudo/nom: make o left associative

[18:29] <dalek> rakudo/nom: 

[18:29] <dalek> rakudo/nom: This allows [\o] &cos xx * to work.

[18:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/54746f20f7

[18:30] <masak> oh, that's the pragmatic reason. got it.

[18:30] <moritz> FROGGS++ # I like it

[18:30] <masak> yes, then infix:<o> should definitely be left associative.

[18:30] <masak> I guess that generalizes, even. "when in doubt, make it left associative"

[18:30] <grondilu> oh yeah [o] &f xx * makes no sense indeed

[18:31] <grondilu> (well, at least no computing sense)

[18:31] <atweiden> m: my DateTime $dt .= new(:year(1979), :month(5), :day(27), :hour(0), :minute(32), :second(0.999999), :timezone(-25200)); say $dt.perl; say $dt; say $dt.second; say so '1979-05-27T00:32:00.999999-07:00' ~~ $dt

[18:31] <camelia> rakudo-moar 02e619: OUTPUT«DateTime.new(year => 1979, month => 5, day => 27, hour => 0, minute => 32, second => 0.999999, timezone => -25200)␤1979-05-27T00:32:00-07:00␤0.999999␤False␤»

[18:32] <TimToady> well, Ramanujan might have an opinion :)

[18:32] <chansen_> Why is DateTime is using the named parameter :timezone when it takes a offset from UTC in seconds, thats just plain wrong. An offset from UTC is not a timezone

[18:32] <atweiden> m: my DateTime $dt .= new(:year(1979), :month(5), :day(27), :hour(0), :minute(32), :second(0.999999), :timezone(-25200)); say $dt.perl; say $dt; say $dt.second; say so '1979-05-27T00:32:00-07:00' ~~ $dt

[18:32] <camelia> rakudo-moar 02e619: OUTPUT«DateTime.new(year => 1979, month => 5, day => 27, hour => 0, minute => 32, second => 0.999999, timezone => -25200)␤1979-05-27T00:32:00-07:00␤0.999999␤False␤»

[18:32] <atweiden> gtodd: p6 seems to treat the stringified output as having the fractional second but does not display it

[18:32] <atweiden> chansen_: i ask because for testing purposes, i had to specify a DateTime.new to compare results https://github.com/atweiden/config-toml/blob/master/t/grammar-actions/01-primitives.t#L1406

[18:32] <masak> chansen_: I think the value changed and the name stayed, something like that

[18:32] <grondilu> arguably [o] &f xx * is the limit of [o] &f xx $n for $n -> Inf

[18:32] <masak> chansen_: agree that it's wrong

[18:33] <masak> grondilu: but only arguably :P

[18:33] <TimToady> well, hard to find the limits of some functions, like infix:<->  :)

[18:34] * grondilu never said the limit is guaranteed to exist 

[18:35] * grondilu considered [o] 1/* xx * the other day and found this example amusing

[18:35] <gtodd> atweiden: hmm reading the docs it seems maybe you need a ":&formatter" ... the formatter parameter is something that accepts a format_datetime() method

[18:35] *** tokuhirom joined
[18:36] <dalek> roast: e5f7adc | (Stefan Seifert)++ | / (3 files):

[18:36] <dalek> roast: .perl on an itemized array should print the $

[18:36] <dalek> roast: review: https://github.com/perl6/roast/commit/e5f7adcdf3

[18:36] *** laouji joined
[18:36] <chansen_> masak: :timezone should probably renamed to :offset and it should probably only accept a minute duration instead of a second duration.

[18:36] <nine> Those spec test failures really make it harder to spot regressions

[18:37] <TimToady> you just know some tinpot dictator is going to want noon exactly when the sun is overhead, though

[18:38] *** kuzgun left
[18:39] <arnsholt> I think pre-standardization times are sometimes represented as second-accuracy timezones

[18:39] *** lsm-desktop left
[18:40] * TimToady wonders if a minute-accurate longitude runs through Kim Jong Il's house...

[18:40] *** tokuhirom left
[18:41] *** laouji left
[18:44] *** fling left
[18:45] *** fling joined
[18:45] *** telex left
[18:46] *** diana_olhovik left
[18:46] <jnthn> Given there's been at least one example of a timezone whose offset to UTC was specified in not just seconds, but fractions of a second...minutes seems a bit short-sighted :)

[18:46] <grondilu> m: say pi*12756e3 / 360 / 60

[18:46] <camelia> rakudo-moar 02e619: OUTPUT«1855.28499486997␤»

[18:46] *** telex joined
[18:47] *** yqt left
[18:48] <gtodd> TimToady: why are time zones so *stupid* ? why can't they be interrigent !?

[18:48] <nine> jnthn: I got to ask: WHAT?!

[18:49] <jnthn> nine: https://en.wikipedia.org/wiki/UTC%2B00:20

[18:51] *** laouji joined
[18:51] <nine> That's....actually at least logical, if incredibly self centered and short sighted

[18:52] <FROGGS> jnthn: what should 'my Int:D $a' complain about? we already have a 'Term definition requires an initializer'

[18:52] <gtodd> atweiden: eek specifying a :&formatter  for a DateTime object has cognitive load

[18:52] <gtodd> at least for me :-\

[18:53] <FROGGS> jnthn: 'To be defined variable definition requires an initializer'?

[18:53] <FROGGS> no, that's weird and wrong

[18:53] <jnthn> FROGGS: That's not quite it. More like "Must initialize a variable of type 'Int:D' with a defined value" or so

[18:53] <FROGGS> ahh, that works

[18:53] <FROGGS> thanks :o)

[18:53] <jnthn> Maybe without the quotes around the typename given it's already uppercase

[18:54] <FROGGS> yeah

[18:55] *** vendethiel joined
[18:55] <FROGGS> I'm attempting to force the initializer now, then we have less problems later

[18:55] *** laouji left
[18:58] <nine> jnthn: oh I just saw that I've never answered your question about Bool's key and value methods in BOOTSTRAP. I'm afraid they have to be there, because EnumHOW.add_enum_value expects the $value object to have them. Well, we could add a version of the method that takes the key and value separately. But I'm not sure it's worth it

[18:59] <jnthn> nine: OK, let's keep it as you have it.

[18:59] <atweiden> gtodd: there's an example in roast/S32-temporal/DateTime-Instant-Duration.t

[19:00] <gtodd> atweiden:  oh goodee ... would be nice to see a simple eg. in the docs  :-)

[19:03] <atweiden> source is rakudo/src/core/Temporal.pm

[19:03] *** chenryn_ joined
[19:06] <gtodd> atweiden: it seems a round about way to say you want seconds in the format ... but I guiess olde-fashioned strftime is round about  too

[19:08] *** chenryn_ left
[19:09] <atweiden> i notice the default-formatter has the optional arg Bool :$subseconds that would likely fix this

[19:09] *** yqt joined
[19:09] <atweiden> how do you pass :subseconds to DateTime.new rakudo default-formatter?

[19:10] <TimToady> m: [\o](1/* xx *)[$_](10).say for 0..10

[19:10] <camelia> rakudo-moar 54746f: OUTPUT«0.1␤10␤0.1␤10␤0.1␤10␤0.1␤10␤0.1␤10␤0.1␤»

[19:10] *** pierrot_ joined
[19:10] *** domidumont left
[19:11] *** pierrot left
[19:15] *** pierrot_ left
[19:15] *** pierrot joined
[19:16] <grondilu> well it's not much more amusing than say [\*] -1 xx *  but still

[19:16] <nine> m: enum Foo <a b>; say Foo.isa(Foo);

[19:16] <camelia> rakudo-moar 54746f: OUTPUT«True␤»

[19:19] *** pierrot left
[19:20] *** pierrot joined
[19:20] *** laouji joined
[19:24] *** AlexDaniel joined
[19:24] <jdv79> so, very _very_ prelim metacpan preview/prototype

[19:25] <jdv79> http://hack.p6c.org:5001/release/JDV/Data-Selector-1.02

[19:25] *** pierrot left
[19:25] *** laouji left
[19:25] <jdv79> please don't pound it or expect it to work well cause it where i'm working 

[19:25] *** pierrot joined
[19:25] <jdv79> maybe tomorrow i'll try to load more of the modules from the eco into instance

[19:25] <btyler> I think #perl6 might have death-hugged it :)

[19:26] <jdv79> its super slow 

[19:26] <btyler> oh, there it goes, loaded now

[19:26] <jdv79> but should come back in < 5s or so =

[19:26] <jdv79> i only loaded the one dist so far

[19:26] <jdv79> and that took a few hours 

[19:26] <jdv79> so dinner &

[19:26] <btyler> so is this a straight metacpan install that happens to have p6 in the db?

[19:26] *** sjn_phone joined
[19:26] <btyler> or just using the metacpan style/layout?

[19:27] <jdv79> yeah, its just minimal work to get p6 support

[19:28] <nine> jnthn: are the type objects defined in BOOTSTRAP somehow replaced later on?

[19:28] <btyler> cool, great start :)

[19:28] *** pdcawley left
[19:29] *** larion joined
[19:30] <gtodd> atweiden: I think the default formatter for DateTime constuctor doesn't groks subseconds you get iso-8601 so you'd need to have formatter function that does it

[19:30] <gtodd> but IANAP

[19:30] <gtodd> 6H

[19:30] <gtodd> :)

[19:30] <TimToady> nine: perhaps the BOOTSTRAP versions are counted in the { ... } category somehow and automatically augment?

[19:31] *** pierrot left
[19:31] *** pierrot joined
[19:31] *** llfourn joined
[19:32] <jnthn> nine: No, type objects are forever.

[19:33] <TimToady> are the boot classes counted as stubbed?

[19:33] <nine> jnthn: that's very odd, because use nqp; say Bool.WHERE; say Bool.^mro[0].WHERE; gives me 2 different WHEREs. But Bool.^mro[0] is definitely Bool

[19:33] *** ][Sno][ left
[19:33] <jnthn> o.O

[19:33] <jnthn> TimToady: Yeah, we don't compose them in BOOTSTRAP

[19:34] <jnthn> TimToady: So effectively stubbed

[19:34] <nine> That's why Bool.isa(Bool) gives False with EnumHOW using BaseType. With C3MRO, it worked however.

[19:34] <jnthn> nine: Yes, that is weird.

[19:36] *** llfourn left
[19:36] <nine> enum Foo <a b>; say Foo.WHERE; say Foo.^mro[0].WHERE; # gives the same address for both

[19:38] *** brrt joined
[19:38] <jnthn> o.O

[19:38] <jnthn> Very odd

[19:38] <nine> The only difference that comes to mind is that Bool is created in BOOTSTRAP while Foo isn't.

[19:38] <jnthn> Yeah, but lots of classes are created in BOOTSTRAP

[19:39] <TimToady> jnthn: re http://irclog.perlgeek.de/perl6/2015-10-05#i_11318366 I think we actually need to think about how to expose the metaop factories as HOP features, not just hide 'em

[19:39] *** lizmat joined
[19:39] <TimToady> at least, those that don't already have exposure

[19:40] <TimToady> triangle, cross...

[19:40] <jnthn> TimToady: I'm fine with choosing to expose things; it's the things we don't choose to that I'm worried about :)

[19:41] <pmurias> Zoffix: re perl6.xtatik.org, I think there are maybe better examples for someone new to the language then unicode operators and the infinite fibonacii sequence

[19:42] <atweiden> gtodd: https://github.com/atweiden/config-toml/commit/37894abfc7d74477e125ce07d00aa14b2f035bd8

[19:43] <pmurias> Zoffix: I would aim more towards "wow, that's useful"/"sounds sane and good" mix rather then "hmm, how peculiar"

[19:45] <gtodd> atweiden: yaya!  or that :-)

[19:49] <grondilu> pmurias: what example would you chose?

[19:49] <btyler> a simple class (maybe consuming a role), a grammar, and a non-blocking socket server (yes, I'm already poking at these :)

[19:52] <jnthn> Time for me to rest...be back tomorrow o/

[19:52] <lizmat> good night, jnthn 

[19:53] <lizmat> m: say .2 - .3 + .1 == 0

[19:53] <camelia> rakudo-moar 54746f: OUTPUT«True␤»

[19:53] <lizmat> ^^^  perhaps a small example for the home page ?

[19:53] <gtodd> heheh

[19:53] *** patrickz joined
[19:53] <gtodd> "we invite you to try the above in your current favourite language"

[19:54] <btyler> I think it is super cool (honestly it never struck me how wrong this was in most languages I used, I just accepted it), but it doesn't seem _inspiring_ (to me, at least)

[19:54] <btyler> and using as a put-down on other langs will just invite bickering

[19:55] <btyler> or petty questions about performance and memory usage

[19:55] <[Coke]> I think it's a good example for the front page.

[19:56] <lizmat> nine: http://irclog.perlgeek.de/perl6/2015-10-06#i_11328015   # I guess they fell in the cracks between timotimo and me

[19:58] <lizmat> will look at them tomorrow... unless someone beats me to it

[19:58] <brrt> good * #perl6

[19:59] <lizmat> brrt o/

[19:59] <nine> lizmat: if anyone's to blame, it's the people who don't work on Perl 6 :)

[19:59] <brrt> ohai lizmat

[20:00] <gtodd> btyler: good point

[20:00] *** ][Sno][ joined
[20:00] <btyler> gtodd: don't get me wrong, Ovid used this to _great_ effect in his FOSDEM talk :)

[20:01] <btyler> the whole room went: "....woah, you're right, that's so busted"

[20:01] <gtodd> btyler: maybe just have it presented more as a small (?!)  "attenton to detail ..." thing that makes perl6   likeable :-D

[20:01] <TimToady> I list some of those in my talk last night

[20:01] <TimToady> *ted

[20:02] <TimToady> %%

[20:02] <TimToady> now - INIT now

[20:02] <gtodd> just a bunch of little things ...  sort of how in in astronomy  little things like air and gravity can make a planet interesting :)

[20:03] <TimToady> m: say „a“ … „zz“

[20:03] <camelia> rakudo-moar 54746f: OUTPUT«(a b c d e f g h i j k l m n o p q r s t u v w x y z aa ab ac ad ae af ag ah ai aj ak al am an ao ap aq ar as at au av aw ax ay az ba bb bc bd be bf bg bh bi bj bk bl bm bn bo bp bq br bs bt bu bv bw bx by bz ca cb cc cd ce cf cg ch ci cj ck cl cm cn co cp…»

[20:03] *** darutoko left
[20:03] <gtodd> :-D

[20:04] <^elyse^> :-D

[20:04] <lizmat> I would not mention an invitation to try in other languages...  it should be implicit  :-)

[20:04] *** chenryn_ joined
[20:05] *** adhoc joined
[20:05] <brrt> hmmmm

[20:05] <brrt> i'm ambivalent about it

[20:06] <brrt> it's typical language boasting

[20:06] <gtodd> lizmat: yes

[20:06] <TimToady> last night I blew their mind with a simple 1,2,4 ... 2**32

[20:06] <lizmat> brrt: it's a USP of Perl 6

[20:07] <lizmat> m: say 1,2,4 ... 2**32

[20:07] <camelia> rakudo-moar 54746f: OUTPUT«(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296)␤»

[20:07] <brrt> i agree. i'm trying to imagine how i'd react to it if i didn't already think perl6 was cool

[20:07] <TimToady> "How does it know?!" someone cried out.

[20:08] <brrt> i think i read in the synopses how that is done

[20:08] <brrt> it's clever for sure :-)

[20:08] <brrt> constant ratios iirc

[20:09] *** chenryn_ left
[20:09] <TimToady> simple junctions are also kinda wow

[20:11] <lizmat> m: say now - BEGIN now

[20:11] <camelia> rakudo-moar 54746f: OUTPUT«0.0099340␤»

[20:11] <TimToady> simple mixins are also wow, though of course later we have to tell them not to do it :)

[20:12] <brrt> ooc, when do you consider a mixin simple?

[20:12] <TimToady> I try to discourage the BEGIN variant, because separate compilation

[20:12] <TimToady> well, 0 but True *looks* simple

[20:12] <btyler> I'd humbly suggest that there's a lot of value in showing things that we don't later need to say "but really that's a poor plan and your future colleagues will not be happy" :)

[20:12] <brrt> ah, yes

[20:13] <lizmat> m: say now - INIT now

[20:13] <camelia> rakudo-moar 54746f: OUTPUT«0.0020325␤»

[20:13] <brrt> btyler: depends on whether we want to continue the perl-is-write-only meme i'd think

[20:14] <brrt> and fwiw, i don't consider that true at all. but the cool tricks of perl5 are also the things that have made its reputation

[20:15] * PerlJam remembers a time when regex were black magic to most people and decried in Perl ... then every other language adopted them in some way.

[20:17] <TimToady> m: say bag(<a b c d c d e >).pairs

[20:17] <camelia> rakudo-moar 54746f: OUTPUT«(a => 1 c => 2 b => 1 e => 1 d => 2)␤»

[20:17] <btyler> personally I'd suggest that examples should emphasize concise manipulexity, and if some whipitupitude is also demonstrated, that's mostly a bonus

[20:17] <TimToady> that's pretty cool

[20:17] <^elyse^> PerlJam: and they all do it wrong :P

[20:17] <lizmat> m: <a b c d c d e>.Bag.pairs.say

[20:17] <camelia> rakudo-moar 54746f: OUTPUT«(a => 1 c => 2 b => 1 e => 1 d => 2)␤»

[20:17] <lizmat> I like the .Bag better  :-)

[20:17] <TimToady> I don't

[20:18] <PerlJam> ^elyse^: aye, but that's more a symptom of unevenly distributed future

[20:20] <AlexDaniel> ^elyse^: there is fuzzy matching in python's “regex” package. I have no idea whether that's a good idea or not, but it looks very promising.

[20:21] <AlexDaniel> at least enough for me to say “hm, wow”

[20:23] <[Coke]> ... Wow, I have to fix a bug that is impacting our IE8 users in production. Wish me luck.

[20:23] <btyler> alert("go download chrome already!") # wishful thinking

[20:23] <PerlJam> [Coke]: jetison the IE8 users; problem solved!  ;)

[20:24] <AlexDaniel> [Coke]: good luck! Yet it's not IE7, say thanks

[20:24] <[Coke]> oh, these people already have chrome -installed-, even.

[20:26] <AlexDaniel> .oO(… just symlink IE to Chrome)

[20:26] <pmurias> at least it's not IE6

[20:26] *** rindolf left
[20:27] <pmurias> grondilu: grammars, maybe some OO

[20:30] *** Kcop joined
[20:30] <pmurias> grondilu: if without parens is a small things that I like a lot

[20:31] *** Xor_ left
[20:37] *** tokuhirom joined
[20:38] * brrt hasn't seen the python regex module

[20:38] *** dalek left
[20:38] *** synbot6 left
[20:39] *** dalek joined
[20:39] *** ChanServ sets mode: +v dalek

[20:41] *** tokuhirom left
[20:41] <PerlJam> dir() looks like it's becoming File::Find-y.   It just needs the recursion bit and File::Find will no longer be needed I think

[20:43] *** sjn_phone left
[20:43] *** pnu left
[20:43] *** abaugher left
[20:43] *** Loren left
[20:43] *** [Tux] left
[20:43] *** dylanwh_ left
[20:43] *** camelia left
[20:43] *** ashleyde1 left
[20:43] *** psch left
[20:43] *** tadzik left
[20:43] *** Gardner left
[20:43] *** clkao left
[20:43] *** masak left
[20:43] *** hobbs left
[20:43] *** alpha- left
[20:44] <AlexDaniel> brtt: https://pypi.python.org/pypi/regex this one

[20:45] <brrt> oh thanks

[20:45] *** pnu joined
[20:46] *** abaugher joined
[20:46] *** Loren joined
[20:46] *** [Tux] joined
[20:46] *** dylanwh_ joined
[20:46] *** camelia joined
[20:46] *** alpha- joined
[20:46] *** ashleyde1 joined
[20:46] *** psch joined
[20:46] *** tadzik joined
[20:46] *** Gardner joined
[20:46] *** clkao joined
[20:46] *** masak joined
[20:46] *** hobbs joined
[20:46] *** kst joined
[20:46] *** asimov.freenode.net sets mode: +v camelia

[20:48] *** ][Sno][ left
[20:50] *** lichtkind joined
[20:50] *** adhoc left
[20:50] *** [Sno] joined
[20:50] *** leont joined
[20:50] *** colomon left
[20:51] *** tokuhirom joined
[20:52] *** simcop2387 left
[20:52] *** bjz left
[20:53] *** paulmr left
[20:53] *** kaare_ left
[20:53] *** brrt left
[20:53] *** raiph joined
[20:55] *** simcop2387 joined
[20:55] *** rurban joined
[20:57] *** bjz joined
[20:57] *** tokuhirom left
[20:59] <lichtkind> rurban: ich konnte dir nicht mal ne mail schreiben

[21:01] *** abaugher left
[21:03] <patrickz> .seen smls

[21:03] <yoleaux> I saw smls 14 Sep 2015 18:53Z in #perl6: <smls> and pre-GLR, X treated it that way

[21:05] *** chenryn_ joined
[21:06] *** skids left
[21:06] *** xfix left
[21:07] * FROGGS spectests a refactor of Foo:D/Foo:U

[21:08] <pink_mist> is the :U there meant to mean it needs to be undefined? 0_o what's the use of that?

[21:08] <FROGGS> pink_mist: the use to accept only types?

[21:09] <FROGGS> well, you can restrict subs/methods from receiving values

[21:09] <moritz> there are use cases for that in the setting

[21:09] <moritz> multi method ACCEPTS(Mu:U) { } implements type checking via smart matching, for example

[21:09] <pink_mist> ah, fair point

[21:10] *** chenryn_ left
[21:10] <moritz> git grep ':U\b' src/core/|wc -l

[21:10] <moritz> 145

[21:10] <FROGGS> I won't use :U on variables often I guess

[21:10] *** pmurias left
[21:12] *** n0tjack left
[21:13] <masak> m: role Foo[::T] { constant a = T.new }

[21:13] <camelia> rakudo-moar 54746f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/JijrN9FMqs␤An exception occurred while evaluating a constant␤at /tmp/JijrN9FMqs:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Method 'new' not found for invocant of class 'T'␤  …»

[21:13] <dalek> roast: 73fc8c3 | FROGGS++ | S11-modules/importing.t:

[21:13] <dalek> roast: adjust test for typed exception

[21:13] <dalek> roast: review: https://github.com/perl6/roast/commit/73fc8c3d37

[21:17] *** bakedb left
[21:17] *** bakedb joined
[21:17] *** colomon joined
[21:18] <dalek> rakudo/nom: 7f0e6a5 | FROGGS++ | src/ (4 files):

[21:18] <dalek> rakudo/nom: refactor Type:D so that it requires an initializer

[21:18] <dalek> rakudo/nom: 

[21:18] <dalek> rakudo/nom: Calling .new on the type internally seemed to makes sence when you think

[21:18] <dalek> rakudo/nom: of e.g. Int:D, but it will get problematic quickly when the constructor

[21:18] <dalek> rakudo/nom: would need arguments... Therefore, an initializer has to be specified.

[21:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f0e6a56ae

[21:19] <FROGGS> .tell jnthn the initializer is now required... works on vars, attrs but not in sigs: https://github.com/rakudo/rakudo/commit/7f0e6a56ae

[21:19] <yoleaux> FROGGS: I'll pass your message to jnthn.

[21:20] <FROGGS> .tell lizmat can you adjust the weekly so that it states that 'my Int:D $b' is an compile time error?

[21:20] <yoleaux> FROGGS: I'll pass your message to lizmat.

[21:20] <FROGGS> $ perl6 -e 'my Int:D $b'

[21:20] <FROGGS> ===SORRY!=== Error while compiling -e

[21:20] <FROGGS> Variable definition of type Int:D requires an initializer

[21:20] *** laouji joined
[21:21] <lizmat> FROGGS: will do

[21:21] <yoleaux> 21:20Z <FROGGS> lizmat: can you adjust the weekly so that it states that 'my Int:D $b' is an compile time error?

[21:21] <FROGGS> lizmat: thank you :o)

[21:21] <FROGGS> .tell #perl6 gnight

[21:21] <yoleaux> FROGGS: What kind of a name is "#perl6"?!

[21:21] <FROGGS> pfff

[21:21] <colomon> o/

[21:22] <lizmat> m: my Int:D $b

[21:22] <camelia> rakudo-moar 54746f: ( no output )

[21:22] <lizmat> FROGGS: is that something new?

[21:24] <lizmat> if it *is* something new, I'd rather mention it next week

[21:25] *** yqt left
[21:25] *** laouji left
[21:29] *** whowut joined
[21:29] *** whowut left
[21:33] <Ulti> gtodd sorry dont think I finished the histogram stuff in Stats

[21:33] <Ulti> if you need it I can get back to it :3

[21:34] <lizmat> decommute&

[21:34] *** lizmat left
[21:35] *** llfourn joined
[21:41] *** lichtkind_ joined
[21:45] *** literal left
[21:45] <masak> somewhat confused article with a misleading title, but still somehow nice: http://www.pigdog.org/auto/software_jihad/link/3138.html

[21:45] <masak> up on HN front page right now

[21:47] *** lichtkind_ left
[21:48] *** laubster joined
[21:49] *** bjz left
[21:51] *** laouji joined
[21:51] *** ribasushi left
[21:52] <Ulti> there was a bit of an under current of Perl 6 being the next small iteration of Perl in that article

[21:53] <Zoffix> I didn't feel it. I liked the article except for the title.

[21:53] *** ribasushi joined
[21:55] *** bjz joined
[21:55] *** laouji left
[21:56] *** ^elyse^ left
[21:57] *** bjz left
[22:00] *** colomon left
[22:01] *** spider-mario left
[22:03] <Ulti> I liked it too but comparing/contrasting only against Perl 5 to describe Perl 6 feels a little odd to me. In my mind I fit Perl 6 in some weird space between Perl 5, Icon/Unicon and Java

[22:04] *** bjz joined
[22:04] *** patrickz left
[22:05] <_itz> http://www.10zenmonkeys.com/2015/10/06/the-night-larry-wall-unveiled-perl-6/

[22:06] *** laouji joined
[22:06] *** AlexDaniel left
[22:06] *** chenryn_ joined
[22:08] <Ulti> Icon especially its like Perl 6 is riffing off of some of the ideas there even stuff like $* variables are like & prefix variables in Icon then you have all the generator lazy list and sequence stuff

[22:08] <Ulti> string scanning in Icon is a bit like a given block with a grammar etc.

[22:09] <kst> _itz: I can't access www.10zenmonkeys.com

[22:09] *** isacloud left
[22:09] *** preyalone left
[22:10] *** chenryn_ left
[22:11] <Ulti> Icon could have done with the concept of meta operators though, instead of just having an insane number of multi character operators for each built in type

[22:11] *** laouji left
[22:11] *** bjz left
[22:11] <_itz> http://downforeveryoneorjustme.com/http://www.10zenmonkeys.com

[22:11] *** woodruffw joined
[22:12] <_itz> http://developers.slashdot.org/story/15/10/06/217239/larry-wall-unveils-perl-600

[22:12] <Ulti> guess thats what you get with >20 year gap in language development, better abstractions

[22:12] <masak> Perl 600!

[22:13] <masak> it's so weird to read these outside-the-echo-chamber reports on something you're involved in.

[22:13] *** Moskon joined
[22:14] *** ex-parrot joined
[22:14] <masak> so far, these articles really enjoy making it seem (in the titles) that Perl 6 arrived Just Now.

[22:14] <_itz> https://www.reddit.com/r/programming/comments/3nr0xo/larry_wall_unveils_perl_600/

[22:14] <Ulti> heh fully formed from the hands of the gods

[22:15] *** eythian joined
[22:15] <pink_mist> to be fair, they've been waiting to use that headline for more than 10 years, so I wouldn't blame them for jumping the gun a bit :P

[22:16] <pink_mist> chomping at the bits, as it were

[22:16] <masak> it's using up a finite resource, is all. a bit like the boy who cried wolf did.

[22:17] <Ulti> also once I get my bioinformatics tests to fully pass again I suspect the runtime has gone from 10s to 3s post GLR...

[22:18] *** jevin joined
[22:18] <_itz> I wonder where the 6.0.0 meme started

[22:20] * leont spent yesterday back in bioinformatics land (PhD defence of a friend), gave me some ideas for perl 6

[22:21] <Ulti> leont well there are two different bioinfo repos in Perl 6 plenty of room for a third :D

[22:21] *** TEttinger joined
[22:22] *** PotatoGim left
[22:22] *** clkao left
[22:22] *** Spot__ left
[22:22] <leont> He made some interesting observations regarding big data

[22:23] <leont> Almost all current high level tools are based on loading data into ram and then processing them in a single process/thread

[22:23] <leont> This is suboptimal

[22:24] *** thowe joined
[22:24] <Ulti> huh... apart from all the big data tools which dont do that

[22:24] *** ex-parrot left
[22:25] <leont> Which aren't really high level tools

[22:25] <Ulti> unless you mean specifically sequence data and stuff like assemblers

[22:25] <leont> (I'm probably phrasing things imprecisely)

[22:27] <Ulti> but yeah research software in general its rare anyone would write it to not be architected in that way

[22:27] <Ulti> I think R now has a Hadoop back end but not sure how it works and what the limitations are?

[22:28] <Ulti> is there a special name for an elephant race? because that should be the name of method that takes a Perl 6 map and runs it via hadoop

[22:29] <thowe> The book "Footfall" might have that name in it.  The aliens were like elephants.

[22:30] <Ulti> well weirdly Germany is famous for elephant racing according to Wikipedia and they love giant weird words 

[22:30] <thowe> Oh, that kind of race...  I was thinking "race of beings" not "race to the finish" :P

[22:30] <Ulti> heh

[22:31] <Ulti> no as in .race() :)

[22:31] <Ulti> to the finish line

[22:31] <Ulti> .elefantenrennen()

[22:31] <Ulti> not as catchy as one might hope

[22:32] <masak> 'night, #perl6

[22:32] <Ulti> o/

[22:33] *** isacloud joined
[22:35] *** kid51 joined
[22:35] *** laouji joined
[22:38] *** preyalone joined
[22:39] *** laouji left
[22:40] *** laouji joined
[22:40] <dalek> rakudo-star-daily: 258ea01 | coke++ | log/ (9 files):

[22:40] <dalek> rakudo-star-daily: today (automated commit)

[22:40] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/258ea01f6e

[22:40] <dalek> rakudo-star-daily: 5528913 | coke++ | log/ (9 files):

[22:40] <dalek> rakudo-star-daily: today (automated commit)

[22:40] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/552891371f

[22:40] <dalek> rakudo-star-daily: d38bb61 | coke++ | log/ (9 files):

[22:40] <dalek> rakudo-star-daily: today (automated commit)

[22:40] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d38bb61d1e

[22:40] <dalek> perl6-roast-data: ad0835f | coke++ | / (9 files):

[22:40] <dalek> perl6-roast-data: today (automated commit)

[22:40] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ad0835fdde

[22:40] <dalek> perl6-roast-data: 3343257 | coke++ | / (9 files):

[22:40] <dalek> perl6-roast-data: today (automated commit)

[22:40] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/334325773f

[22:40] *** firstdayonthejob joined
[22:40] <thowe> Is the latest Rakudobrew a good way to get this new release?  Or no?

[22:41] <thowe> Last time I build Rakudo was YAPC::NA

[22:41] *** Moskon left
[22:41] <thowe> Where's the big official announcement?  Or is that still waiting for Chistmas?

[22:43] <[Coke]> still waiting. The version you get now is going to be pretty close, though, give it a spin.

[22:43] *** borkus joined
[22:43] <thowe> I want to.  I love that every number is rational.

[22:43] *** mattprelude joined
[22:43] <thowe> Is there a Pg module?

[22:44] <gfldex> thowe: list of modules that may or may not work with a newish rakudo http://modules.perl6.org/

[22:45] <gfldex> it's still pretty beta, expect bugs

[22:45] <pink_mist> there's a DBIish .. no clue if there's a Pg driver for it

[22:45] <gfldex> there is: https://github.com/perl6/DBIish/blob/master/lib/DBDish/Pg.pm6

[22:46] <pink_mist> https://github.com/perl6/DBIish/#pg-postgresql yeah, just found this =)

[22:46] *** borkus left
[22:46] <thowe> At this point, for me, it looks like a good place to learn some nifty programming concepts.

[22:46] <thowe> What I've read has blown my mind.

[22:47] *** atweiden left
[22:47] <gfldex> thowe: you may want to watch this video then https://www.youtube.com/watch?v=JpqnNCx7wVY

[22:48] <thowe> That might harm my fragile little head.

[22:48] *** PasserBy joined
[22:48] <thowe> Is Parrot just not gonna be a thing anymore?

[22:48] <gfldex> jnthn++ tends to be fairly gently with heads that are not his own

[22:48] <gfldex> it looks like Parrot went the way of the Dodo for now

[22:49] <thowe> They seem to continue to release...

[22:49] <thowe> I don't know what people are doing with it.

[22:49] <thowe> But I assume if it stays alive, that it will be one implemenation of Perl6 eventually(?)

[22:50] <gfldex> parrots object system doesnt fit that well to the one perl6 is using

[22:50] <[Coke]> parrot might still be a thing, but its path diverged from Perl 6's several years back.

[22:52] <thowe> oh, 7:30 tonight.

[22:52] <thowe> decent audio/video will be available I hope

[22:52] <ilmari> http://pmthium.com/2015/02/suspending-rakudo-parrot/

[22:52] *** cognominal left
[22:53] *** skids joined
[22:54] *** jevin left
[22:55] *** jevin_ joined
[22:56] *** dshahin joined
[22:58] *** pdurbin joined
[23:00] *** RabidGravy left
[23:00] *** grondilu left
[23:02] <pdurbin> ah. Carl Mäsak on Twitter: "Nope. Projected release date is still this Christmas. #perl6 https://t.co/sL2PsN9sNM" - https://twitter.com/carlmasak/status/651528795053268992

[23:03] *** lichtkind left
[23:04] *** firstdayonthejob left
[23:07] *** chenryn_ joined
[23:10] *** lsm-desktop joined
[23:11] *** BenGoldberg joined
[23:11] *** chenryn_ left
[23:12] <[Coke]> Perl 6 has been releasing every month for years now.

[23:12] *** PasserBy left
[23:13] <[Coke]> you just got caught up in the excitement. It's OK. :)

[23:14] <pdurbin> well, people on Twitter are excited. I started looking for things tagged as 6.0 but couldn't find anything :)

[23:14] <ilmari> the curren version is 6.Birthday

[23:14] <ilmari> +t

[23:17] *** gensym left
[23:18] *** moznion_ left
[23:20] *** eroc joined
[23:21] *** eroc left
[23:22] *** colomon joined
[23:23] *** pecastro left
[23:24] *** clkao joined
[23:26] *** doublec joined
[23:27] *** laouji left
[23:30] *** pecastro joined
[23:34] <gtodd> Ulti: I was using the Stats modulle's hist function to try and figure out how given/when would work toset and just print the $bin_size first then figure out how to select units etc. ... the rest of the function would be sort of mechanical (printing horizontal/vertical ascii/utf bars etc.

[23:34] *** Spot__ joined
[23:35] <gtodd> Ulti: maybe with an eventual plan to hook into a rendering backend/target like R does ? :-) SVG PDF etc etc

[23:35] *** laouji joined
[23:35] <gtodd> hehe

[23:40] *** pecastro left
[23:40] *** laouji left
[23:41] *** pecastro joined
[23:41] *** Praise joined
[23:45] *** leont left
[23:50] *** flussence left
[23:51] *** flussence joined
[23:55] *** heythee joined
[23:55] <heythee> hi there

[23:56] *** heythee left
[23:57] *** kk4vcz joined
