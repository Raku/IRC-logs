[00:00] <ZoffixMobile> Maybe the beer is making me too optimistic that everyone will play nice :D

[00:01] <dha> @unlocalblog seems determined not to play nice, so I think your optimism is doomed.

[00:01] * dha doesn't think anyone on twitter has ever blocked him before...

[00:02] *** ifim joined
[00:05] *** yakudza joined
[00:06] *** znpy left
[00:06] <Ulti> dha the best is his blog is about moving to Ruby on Rails *facepalm* http://blog.unlocalhost.com/

[00:06] <ZoffixMobile> rofl

[00:06] <Ulti> lol

[00:07] *** ifim left
[00:07] <Ulti> in 2013 with the specific sour message that Perl 6 doesnt exist yet...

[00:07] <Ulti> :'(

[00:08] <Hotkeys> it's okay

[00:08] <Hotkeys> 2016 is the year of perl 6

[00:08] <dha> I'm still really wondering how he thinks that brian's question about renaming LP has *anything* to do with competition between P5 and P6.

[00:08] <Ulti> which is odd since I picked up the first R* release on day 0 realised it was uber slow beyond all recognition, but the language was so utterly exactly what I wanted I was sold completely

[00:08] <Hotkeys> they even end in the same digit

[00:08] <Hotkeys> :p

[00:08] <dha> I'm honestly curious what the hell he's thinking.

[00:08] <Ulti> R* today is something I can actually use, it took 5 years but I had Perl 5 the whole time its not like I lost anything at all only gained

[00:09] <Ulti> hmm is it even 5 years?

[00:09] <Ulti> was it 2010?

[00:09] <Ulti> or later

[00:11] <Hotkeys> R* = Rakudo star?

[00:11] <Ulti> yeah

[00:11] <dha> Hm. I get the impression he doesn't like Perl 5 much either...

[00:11] <Hotkeys> for a second I thought you meant the stats language

[00:11] <Ulti> I guess I can just check the first rakudo.org post

[00:11] <Ulti> Hotkeys: :D

[00:11] *** Actualeyes joined
[00:11] <Hotkeys> I've just got bare rakudo rn because panda refuses to build

[00:11] <Hotkeys> because json gets angry

[00:11] <Hotkeys> or it did

[00:11] <Hotkeys> maybe the newline thing fixed it

[00:12] <Hotkeys> lets see

[00:13] <Ulti> night \o

[00:13] <Hotkeys> night

[00:14] <Hotkeys> I need to get my desktop on windows 10

[00:14] <Hotkeys> powershell/cmd are much nicer on 10 compared to 7

[00:15] <pink_mist> I always install cygwin on windows .. comes with a proper shell and terminal emulator =)

[00:15] <AlexDaniel> Hotkeys: there are operating systems with even better terminals and shells, you know :)

[00:18] *** raiph left
[00:18] *** ZoffixMobile left
[00:18] <Hotkeys> AlexDaniel: shush you

[00:18] *** ZoffixMobile joined
[00:19] <Hotkeys> I can't be bothered with setting up linux for personal use

[00:19] <Hotkeys> and while I hate the phrase: 'windows just works'

[00:19] <Hotkeys> it does more or less :p

[00:19] <AlexDaniel> .oO( there's Ubuntu for that… )

[00:20] <Hotkeys> pff

[00:20] <pink_mist> but ubuntu suffers from being ubuntu ... and I don't really see how it can solve that issue :P

[00:20] <dha> I have a Mac. I'm pretty happy with that. :-)

[00:20] <Hotkeys> I would get a mac if they weren't so expensive but I'm a college student so :p

[00:21] <dha> True, there is that.

[00:22] <Hotkeys> well at least installing task::star is failing in a different way now

[00:22] <AlexDaniel> pink_mist: I agree, but I think that it requires the least amount of thinking to set it up

[00:22] <Hotkeys> Digest::MD5 is failing its tests

[00:22] <dha> I just installed Task::Star without issue.

[00:22] *** raiph joined
[00:23] <Hotkeys> It's probably a windows thing

[00:23] <Hotkeys> I haven't been able to get task::star to build with panda since I started building stuff myself (instead of using the rakudo star binaries)

[00:24] <Hotkeys> http://pastebin.com/B73pNwFb

[00:25] <Hotkeys> for a while it was a line separator thing but I (with the help of psch and ugexe) fixed that one

[00:25] *** pmurias left
[00:25] <Hotkeys> now it's this

[00:26] *** Zoffix is now known as ZoffixW

[00:26] <ZoffixW> .botsnack

[00:26] <yoleaux> :D

[00:26] <yoleaux> 18 Nov 2015 23:01Z <diakopter___> ZoffixW: that's neat (demo modules site); really well done

[00:26] *** ZoffixW is now known as Zoffix

[00:26] <Zoffix> diakopter, thanks. If only my $work code was of the same level of quality :P

[00:27] <ugexe> Digest::MD5 fails tests on windows for me

[00:27] <Hotkeys> cool

[00:27] <Hotkeys> glad it isn't just a me problem

[00:28] *** ZoffixMobile left
[00:31] <retupmoca> on my windows build: $ perl6 -e 'say "\n".perl' --> "\r\n"

[00:31] <retupmoca> that seems a bit too eager to try and fix line endings

[00:32] <Hotkeys> afaik line ending stuff is curently all in Handle.pm

[00:32] <Hotkeys> not sure though

[00:32] <Hotkeys> actually that might be wrong

[00:32] <Hotkeys> the line ending stuff I was concerned with was

[00:33] *** tokuhiro_ joined
[00:37] *** tokuhiro_ left
[00:38] <Hotkeys> retupmoca: probably this https://github.com/rakudo/rakudo/commit/4f276be3c0f7c0d72da652f54f47f1cf5426533f

[00:39] <Hotkeys> not sure if that's a problem or that

[00:39] * Hotkeys is no expert

[00:39] <Hotkeys> s/or that/or not/

[00:40] *** risou is now known as risou_awy

[00:40] <retupmoca> yeah, that looks like the spot

[00:40] *** risou_awy is now known as risou

[00:42] <retupmoca> I'd prefer that happen in the I/O layer somewhere, but meh.

[00:42] <retupmoca> that just means Digest::MD5 needs a 'use newline :nl;'

[00:42] <retupmoca> in the test file

[00:45] <retupmoca> err, :lf

[00:45] <ugexe> if that doesnt work yet, the hard coded \n can be swaped out for $?NL

[00:46] <Hotkeys> but doesn't \n already get swapped for $?NL

[00:47] <Hotkeys> as seen above

[00:47] <retupmoca> yeah, it already gets swapped - the problem is that makes the md5 value change, since it's a different string

[00:47] <Hotkeys> ah

[00:47] <dalek> modules.perl6.org/mojo-app: 23f6189 | (Zoffix Znet)++ | web/lib/ModulesPerl6.pm:

[00:47] <dalek> modules.perl6.org/mojo-app: Fix up handlings of secrets

[00:47] <dalek> modules.perl6.org/mojo-app: review: https://github.com/perl6/modules.perl6.org/commit/23f618996f

[00:48] <retupmoca> so it needs to have a literal "\x0A" or 'use newline :lf;' in the test file

[00:50] <dalek> modules.perl6.org/mojo-app: b658cbc | (Zoffix Znet)++ | DEPLOYMENT.md:

[00:50] <dalek> modules.perl6.org/mojo-app: Update info about secrets

[00:50] <dalek> modules.perl6.org/mojo-app: review: https://github.com/perl6/modules.perl6.org/commit/b658cbc1b0

[00:52] *** BenGoldberg joined
[00:54] <dalek> modules.perl6.org/mojo-app: df747bb | (Zoffix Znet)++ | DEPLOYMENT.md:

[00:54] <dalek> modules.perl6.org/mojo-app: Update deployment docs

[00:54] <dalek> modules.perl6.org/mojo-app: 

[00:54] <dalek> modules.perl6.org/mojo-app: Some paths are different now that we merged the mojo app and the db builder script dirs into one

[00:54] <dalek> modules.perl6.org/mojo-app: review: https://github.com/perl6/modules.perl6.org/commit/df747bb6e7

[00:58] *** black_ant joined
[01:01] *** black_ant left
[01:01] *** kjs_ joined
[01:04] *** dha left
[01:06] *** uxfi joined
[01:07] *** yeahnoob joined
[01:12] <dalek> rakudo/nom: ba2446b | peschwa++ | src/vm/jvm/runtime/org/perl6/rakudo/RakOps.java:

[01:12] <dalek> rakudo/nom: Revert "Fix p6typecheckrv for r-j."

[01:12] <dalek> rakudo/nom: 

[01:12] <dalek> rakudo/nom: This reverts commit 019bf1b1673550a00a0ebb3b4d505b9e2b458050.

[01:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba2446b962

[01:12] <dalek> rakudo/nom: 7781481 | peschwa++ | src/vm/jvm/runtime/org/perl6/rakudo/RakOps.java:

[01:12] <dalek> rakudo/nom: Properly fix RT #126673.

[01:12] <dalek> rakudo/nom: 

[01:12] <dalek> rakudo/nom: Thanks to timotimo++ for pointing out that we want to let Nil through, which

[01:12] <dalek> rakudo/nom: automatically allows Failure because it recently became a subtype of Nil.

[01:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7781481936

[01:13] *** Kevin___ joined
[01:13] *** black_ant joined
[01:15] *** kjs_ left
[01:21] *** Kevin___ left
[01:23] *** black_ant left
[01:28] *** softmoth_ left
[01:34] *** abaugher left
[01:35] *** abaugher joined
[01:35] *** aborazmeh joined
[01:35] *** aborazmeh left
[01:35] *** aborazmeh joined
[01:48] *** sprocket left
[01:49] *** dayangkun joined
[01:51] *** MadcapJake left
[01:56] *** MadcapJake joined
[01:56] *** MadcapJake left
[02:13] *** Ben_Goldberg joined
[02:15] *** BenGoldberg_ joined
[02:15] *** BenGoldberg left
[02:18] *** AlexDaniel left
[02:19] *** Ben_Goldberg left
[02:21] *** dj_goku joined
[02:21] *** dj_goku left
[02:21] *** dj_goku joined
[02:21] *** lichtkind left
[02:23] *** ginkoms left
[02:23] *** zengargoyle left
[02:23] *** apejens left
[02:23] *** dbohdan left
[02:23] *** abaugher left
[02:23] *** breinbaas left
[02:23] *** cgfbee left
[02:23] *** dj_goku_ left
[02:23] *** dbohdan_ joined
[02:23] *** breinbaas joined
[02:24] *** gfldex joined
[02:24] *** emdashcomma joined
[02:24] *** gensym joined
[02:24] *** ggoebel joined
[02:24] *** _sri joined
[02:24] *** apejens joined
[02:24] *** zengargoyle joined
[02:24] *** abaugher joined
[02:24] *** SHODAN joined
[02:25] *** DrForr joined
[02:25] *** ginkoms joined
[02:26] *** sufrosti1o joined
[02:28] *** sprocket joined
[02:28] <dalek> doc: 9fe0eb0 | skids++ | doc/Language/classtut.pod:

[02:28] <dalek> doc: Fix sigil.

[02:28] <dalek> doc: review: https://github.com/perl6/doc/commit/9fe0eb03eb

[02:30] *** Khisanth joined
[02:30] *** cgfbee joined
[02:33] *** xpen joined
[02:34] *** sufrostico left
[02:34] *** sufrosti1o left
[02:35] *** BenGoldberg_ left
[02:35] *** tokuhiro_ joined
[02:39] *** tokuhiro_ left
[02:40] *** sprocket left
[02:46] *** ilbot3 joined
[02:50] *** uxfi left
[02:50] *** softmoth_ joined
[02:52] *** doublec_ joined
[02:54] *** kaare_ joined
[02:55] *** softmoth_ left
[02:55] *** doublec left
[02:57] *** doublec_ is now known as doublec

[02:57] *** eliasr left
[02:57] *** Upasaka left
[03:04] *** yqt left
[03:05] *** tokuhiro_ joined
[03:12] *** Actualeyes left
[03:13] *** softmoth_ joined
[03:14] *** doublec_ joined
[03:15] *** dj_goku left
[03:15] *** doublec left
[03:23] *** inokenty joined
[03:25] *** noganex_ joined
[03:28] *** noganex left
[03:29] *** aborazmeh left
[03:31] *** aborazmeh joined
[03:31] *** aborazmeh left
[03:31] *** aborazmeh joined
[03:33] <raiph> m: my @a[^4]; say @a[0]

[03:33] <camelia> rakudo-moar 778148: OUTPUT«Partially dimensioned views of arrays not yet implemented. Sorry. ␤  in block <unit> at /tmp/pYPJAusGjE:1␤␤»

[03:35] *** kid51 left
[03:36] <dalek> rakudo-star-daily: 264ae79 | coke++ | log/ (3 files):

[03:36] <dalek> rakudo-star-daily: today (automated commit)

[03:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/264ae79a65

[03:36] <dalek> perl6-roast-data: e38ff4e | coke++ | / (8 files):

[03:36] <dalek> perl6-roast-data: today (automated commit)

[03:36] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e38ff4eb16

[03:37] *** dj_goku joined
[03:37] *** dj_goku left
[03:37] *** dj_goku joined
[03:39] *** vendethiel joined
[03:39] <[Coke]> bartolin++

[03:45] *** kaare_ left
[03:48] * [Coke] is not looking forward to rehashing all the old arguments again in the upcoming eternal christmas.

[03:54] <diakopter> yay, eternal christmas

[03:55] <diakopter> [Coke]: it's just, how do you say a billion times in different ways "people already discussed that, both worse and better"

[03:57] <[Coke]> perhaps eventually we can harvest pointers to the best irc logs and feed them to bots who cna gently herd newcomers

[03:57] <[Coke]> all written in the finest perl 6, of course.

[03:59] <mst> diakopter: you don't. you turn it into a bot factoid and invoke the factoid

[03:59] <diakopter> quote from https://twit.tv/shows/triangulation/episodes/225

[03:59] <diakopter> "we have the most extensible language ever [ we like to think ] but ... "

[03:59] <mst> diakopter: it's not so much about frequenetly asked questions as frequently delivered answers

[03:59] <mst> hence why e.g. #perl has factoids for "no, we're not helping you until you 'use strict'"

[03:59] <mst> because after a certain number of repetations the explanation gets crankier

[03:59] <mst> whereas the bot factoid can be tuned to be polite and firm

[03:59] <mst> and remains that way indefinitely

[04:00] <mst> quite a few of my blog posts are designed for a similar purpose

[04:02] <diakopter> well, I'm not talking about questions, per se, these are "helpful suggestions/claims/assertions", that are usually based in vast misunderstanding, ignorance, and false beliefs, and so can't really be rephrased as cogent questions/inquiries

[04:03] *** vendethiel left
[04:05] <diakopter> but then again, that's most of everyone's utterances... :o

[04:07] *** atta joined
[04:14] *** atta left
[04:15] *** atta joined
[04:15] <mst> diakopter: you're missing the point completely by focusing on questions even when I told you not to :)

[04:16] <mst> diakopter: how about if you try considering it 'frequently delivered responses' and then re-run your train of thought? :)

[04:21] *** _28_ria joined
[04:32] *** Actualeyes joined
[04:33] <diakopter> i see

[04:42] *** zostay_ is now known as zostay

[04:49] *** woodruffw left
[04:52] *** woodruffw joined
[04:54] *** johan left
[05:03] *** Actualeyes left
[05:12] *** khw left
[05:14] *** _28_ria left
[05:15] *** znpy joined
[05:16] *** _28_ria joined
[05:18] *** modcure left
[05:19] *** pierrot left
[05:19] *** Actualeyes joined
[05:21] *** _28_ria left
[05:28] *** sno left
[05:34] *** xiaomiao left
[05:39] *** xiaomiao joined
[05:48] *** doublec_ is now known as doublec

[05:55] *** raiph left
[05:57] *** aindilis left
[05:57] *** znpy left
[06:04] *** skids left
[06:17] *** syohex joined
[06:18] *** syohex left
[06:27] <Hotkeys> is there a way to assign multiple named variables with a list 

[06:28] <Hotkeys> like how you can do 'my ($a, $b, $c) = (1, 2, 3)'

[06:28] <Hotkeys> but instead with named variables (eg in a .new)

[06:35] *** [particle]1 joined
[06:42] *** woodruffw left
[06:49] *** woodruffw joined
[06:57] *** cognominal left
[07:03] *** geraud left
[07:03] *** darutoko joined
[07:04] *** domidumont joined
[07:05] *** sno joined
[07:07] *** atweiden left
[07:09] *** domidumont left
[07:09] *** diana_olhovik_ joined
[07:09] *** domidumont joined
[07:14] *** esh left
[07:17] *** cognominal joined
[07:17] *** esh joined
[07:19] <dalek> roast: 8eafc4f | usev6++ | S (2 files):

[07:19] <dalek> roast: Fudge tests for '\r\n' on JVM

[07:19] <dalek> roast: review: https://github.com/perl6/roast/commit/8eafc4ff3f

[07:20] *** FROGGS joined
[07:23] *** CIAvash joined
[07:32] *** RabidGravy joined
[07:35] *** pierrot joined
[07:43] *** CIAvash left
[07:44] *** rurban joined
[07:59] <[Tux]> test             50000    22.064    21.950

[07:59] <[Tux]> test-t           50000    18.910    18.796

[07:59] <[Tux]> csv-parser       50000    29.349    29.236

[08:00] *** softmoth_ left
[08:08] <FROGGS> [Tux]: wasn't it usually twice as slow in the past?

[08:08] <FROGGS> or do I miss something...

[08:08] *** ecocode joined
[08:09] <[Tux]> yes it was. lizmat++ for split (@needles, …)

[08:10] <[Tux]> http://tux.nl/Talks/CSV6/speed4.html

[08:12] <FROGGS> wow

[08:12] <FROGGS> lizmat++ indeed

[08:14] *** brrt joined
[08:17] <Hotkeys> <Hotkeys> is there a way to assign multiple named variables with a list 

[08:17] <Hotkeys> <Hotkeys> like how you can do 'my ($a, $b, $c) = (1, 2, 3)'

[08:17] <Hotkeys> <Hotkeys> but instead with named variables (eg in a .new

[08:17] <Hotkeys> or with a hash

[08:19] <Hotkeys> lets say I've got a hash 'my %coords = x => 1, y => 3;'

[08:19] <Hotkeys> er

[08:19] <Hotkeys> this is a silly question

[08:19] <Hotkeys> nvm

[08:20] <moritz> m: my %coords = x => 1, y => 3; my (:$x, :$y) = %coords; say $x.perl; say $y.perl

[08:20] <yoleaux> 18 Nov 2015 22:45Z <ZoffixW> moritz: I submitted the PR to merge the mojo-app branch for modules.perl6.org: https://github.com/perl6/modules.perl6.org/pull/26

[08:20] <camelia> rakudo-moar 778148: OUTPUT«:x(1)␤:y(3)␤»

[08:20] <moritz> Hotkeys: they obvious way just works

[08:21] <Hotkeys> oh

[08:21] <moritz> .tell Zoffix I'll try to adjust the www server tonight; feel free to bug me if I forget

[08:21] <yoleaux> moritz: I'll pass your message to Zoffix.

[08:23] *** CIAvash joined
[08:26] <Hotkeys> moritz: but can you inline that in a .new somehow, something like 'Point.new((:x, :y) => %coords)' 

[08:26] <Hotkeys> er

[08:27] <nine> I felt kind of sad because lizmat++ did all those performance improvements but Tux' benchmark numbers stayed the same. Then she just blew off half the runtime with a casual "oh yeah, I guess we could improve that, too" (at least that's how I like to imagine it). lizmat is awesome :)

[08:27] <nine> .tell lizmat http://irclog.perlgeek.de/perl6/2015-11-19#i_11564686

[08:27] <yoleaux> nine: I'll pass your message to lizmat.

[08:28] *** abraxxa joined
[08:29] *** telex left
[08:30] *** telex joined
[08:33] <Hotkeys> moritz: never mind I figured it out

[08:34] <Hotkeys> you can just do eg. 'Point.new(|%coords)'

[08:34] <Hotkeys> forgot about the handy pipe thing

[08:36] <FROGGS> Hotkeys: the | is not a pipe there, imagine it something flat, so it flattens the hash into pairs (named args)

[08:36] <grondilu> in the last example of http://rosettacode.org/wiki/Permutations#Perl_6, apparently what is passed as argument is 'a', 'b', 'c', [] instead of just 'a','b','c'.  It's weird.  Making the function slurpy solves it.

[08:37] <Hotkeys> I know it isn't a pipe that's just what I call the character FROGGS 

[08:37] <FROGGS> sure

[08:38] <FROGGS> but at least for me it helps to look at their visual appearance to remember their meanign

[08:38] * grondilu wonders what is the actual name of this character

[08:38] <FROGGS> meaning*

[08:38] <FROGGS> .u |

[08:38] <yoleaux> U+007C VERTICAL LINE [Sm] (|)

[08:38] <grondilu> yeah, not too hard to guess

[08:38] <moritz> m: say uniname('|')

[08:38] <camelia> rakudo-moar 778148: OUTPUT«VERTICAL LINE␤»

[08:39] <grondilu> the other day I was amused to learn the French name of '@' : esperluette.  Very rarely used.  I wonder if we could have uniname('@', :$language)

[08:39] <Hotkeys> FROGGS: fair enough

[08:40] <TEttinger> grondilu: I wonder if that shares an etymology with spiral

[08:40] <grondilu> TEttinger: plausible

[08:40] <Hotkeys> grondilu: esperluette is an ampersand

[08:41] <grondilu> ahhh

[08:41] <Hotkeys> Arobase is the @ symbol

[08:41] <Hotkeys> une arobasr

[08:41] <Hotkeys> Rr

[08:41] <Hotkeys> Er

[08:41] <grondilu> you got me, I confused the characters

[08:41] <Hotkeys> une arobase

[08:41] <Hotkeys> Typing is hard

[08:41] <TEttinger> I've heard of the slang term for @ as "snail"

[08:41] <grondilu> esperluette is '&' indeed

[08:41] <Hotkeys> I believe it TEttinger 

[08:41] <TEttinger> and I'd guess there's similar terms in other languages for @

[08:42] <FROGGS> @ is Klammeraffe in German

[08:42] <TEttinger> I'd be curious what icelandic calls it. that language has almost no official terms that are loaned from another language, they try to coin new ones that are authentically icelandic

[08:42] <grondilu> TEttinger: just checked.  The ethymology does not share anything with "spiral"

[08:44] <Hotkeys> Swedish calls it snabel

[08:45] <Hotkeys> Which means trunk

[08:45] *** Actualeyes left
[08:45] <Hotkeys> Or proboscis

[08:45] *** ecocode left
[08:46] <TEttinger> https://is.wikipedia.org/wiki/At-merki

[08:46] <TEttinger> at-"thing that sounds like mark"

[08:48] <TEttinger> Interestingly, the polish article on @ mentions perl https://pl.wikipedia.org/wiki/Ma%C5%82pa_%28znak_pisarski%29

[08:50] <TEttinger> ah, very nice, english article has a section on what the names in other languages mean! https://en.wikipedia.org/wiki/At_sign#Names_in_other_languages

[08:51] *** zakharyas joined
[08:52] *** Timbus left
[08:53] *** black_ant joined
[08:54] <TEttinger> interesting, despite the definite similarity to an ear, only kazakh and ukrainian ever have terms that are related to "ear" for @

[08:55] *** zakharyas left
[08:56] *** Timbus joined
[08:56] <Hotkeys> AFAIK @ was pretty uncommon until email 

[08:57] <TEttinger> https://en.wikipedia.org/wiki/At_sign#/media/File:1674_liten.jpg

[08:58] <TEttinger> that may have some shorthand, since it's from a court, but it's been around a few centuries

[08:59] <TEttinger> it looks like on the bootom left they use "govt" but that may be a swedish word

[09:00] *** xiaomiao left
[09:00] *** mrf joined
[09:00] *** zakharyas joined
[09:01] *** xfix joined
[09:02] *** xiaomiao joined
[09:04] *** jonas1 joined
[09:05] *** softmoth_ joined
[09:09] *** softmoth_ left
[09:11] *** [Sno] joined
[09:14] *** sno left
[09:21] *** dakkar joined
[09:38] *** abaugher left
[09:39] *** abaugher joined
[09:46] <jnthn> morning, #perl6

[09:49] *** pmurias joined
[09:50] *** yeahnoob left
[09:50] <dalek> nqp: 1aee3c0 | (Pawel Murias)++ | src/vm/js/ (2 files):

[09:50] <dalek> nqp: [js] Fix method sigatures, to unbreak after MoarVM update.

[09:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1aee3c0a25

[09:50] <dalek> nqp: 78aba1b | (Pawel Murias)++ | src/vm/js/ (2 files):

[09:50] <dalek> nqp: [js] Implement nqp::isttyfh.

[09:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/78aba1be08

[09:51] <pmurias> jnthn: morning

[09:52] <Hotkeys> Morning jnthn

[09:52] <Hotkeys> I should be getting to sleep soon

[09:57] *** Upasaka joined
[09:58] <jonas1> Don't know if anybody is working on this. But this is sort of inconsistent:

[09:58] <jonas1> say \:a(1).perl,\(:a(1)).perl,|\:a(1).perl,|\(:a(1)).perl;

[09:59] <jnthn> m: say \:a(1).perl,\(:a(1)).perl,|\:a(1).perl,|\(:a(1)).perl;

[09:59] <camelia> rakudo-moar 778148: OUTPUT«\(:a(1))\(:a(1))a => 1\(:a(1))␤»

[10:00] <xfix> perl6: say "🇺🇸".chars

[10:00] <camelia> rakudo-jvm 778148: OUTPUT«4␤»

[10:00] <camelia> ..rakudo-moar 778148: OUTPUT«1␤»

[10:00] <xfix> Oh, it's 1 now. Nice :).

[10:01] <TEttinger> xfix: what is that? it renders in a different font for me, but looks like "us"

[10:01] <xfix> Emoji flag.

[10:02] <xfix> .u 🇺🇸

[10:02] <yoleaux> U+1F1F8 REGIONAL INDICATOR SYMBOL LETTER S [So] (🇸)

[10:02] <yoleaux> U+1F1FA REGIONAL INDICATOR SYMBOL LETTER U [So] (🇺)

[10:02] *** kjs_ joined
[10:02] <TEttinger> as if unicode wasn't confusing enough already...

[10:02] <xfix> This is one character representing an United States flag.

[10:03] <TEttinger> so those two become one symbol for a flag when rendered by an application that understands it?

[10:03] <xfix> Pretty much.

[10:03] <TEttinger> I'm guessing unicode isn't stepping in with an update to the database every time there's a new country

[10:03] <xfix> For me, it appears as [U][S] in my IRC client, but curiously enough, I cannot select the characters separately.

[10:03] <jnthn> Don't bet on it... :P

[10:04] <jnthn> But yeah, RIs form grapheme clusters.

[10:07] <xfix> perl6: say "🇺🇸🇺🇸".chars

[10:07] <camelia> rakudo-moar 778148: OUTPUT«1␤»

[10:07] <camelia> ..rakudo-jvm 778148: OUTPUT«8␤»

[10:07] <xfix> Unicode is complex.

[10:07] <xfix> ... that should be 2, right?

[10:07] <xfix> Or not?

[10:07] <jnthn> m: say uninames "����"

[10:07] <camelia> rakudo-moar 778148: OUTPUT«(REPLACEMENT CHARACTER REPLACEMENT CHARACTER REPLACEMENT CHARACTER REPLACEMENT CHARACTER)␤»

[10:07] <xfix> Eh, I guess not.

[10:08] <jnthn> gah

[10:08] *** dayangkun left
[10:08] <TEttinger> m: say uninames "🇺🇸🇺🇸"

[10:08] <camelia> rakudo-moar 778148: OUTPUT«(REGIONAL INDICATOR SYMBOL LETTER U REGIONAL INDICATOR SYMBOL LETTER S REGIONAL INDICATOR SYMBOL LETTER U REGIONAL INDICATOR SYMBOL LETTER S)␤»

[10:08] <jnthn> xfix: Annex #29 doesn't say you should break around pairs, no

[10:08] <xfix> I wonder how more than two regional indicators are supposed to be handled.

[10:09] <TEttinger> usca might be california's flag

[10:09] <jnthn> xfix: Mostly because they wanted you to be able to determine whether to break graphemes just by looking at the immediately surroudning chars.

[10:09] <xfix> I see.

[10:09] <jnthn> uh, codepoints

[10:09] <xfix> perl6: say "நிநி".chars

[10:10] <camelia> rakudo-jvm 778148: OUTPUT«4␤»

[10:10] <camelia> ..rakudo-moar 778148: OUTPUT«2␤»

[10:10] <TEttinger> m: say "🇺🇸🇺🇸🇺🇸🇺🇸🇺🇸🇺🇸🇺🇸🇺🇸🇺🇸🇺🇸".chars

[10:10] <camelia> rakudo-moar 778148: OUTPUT«1␤»

[10:10] <xfix> Wow, that's a huge single character.

[10:10] <TEttinger> haha indeed!

[10:10] <xfix> It appears really large in my client, but I cannot select a single character.

[10:10] <ginkoms> USUSUSUSUSUSUSUSUSUS

[10:11] <TEttinger> that could be a gnarly method of encryption

[10:11] *** ginkoms left
[10:11] *** ginkoms joined
[10:11] <TEttinger> using only regional indicator symbol letters in place of a-z

[10:12] <xfix> .m say "﷽".chars

[10:12] <TEttinger> a computer reading it might see only one char

[10:12] <xfix> perl6: say "﷽".chars

[10:12] <camelia> rakudo-{moar,jvm} 778148: OUTPUT«1␤»

[10:13] <xfix> (should be 22, not really)

[10:15] *** itz joined
[10:15] *** aborazmeh left
[10:15] *** itz is now known as stmuk

[10:18] <RabidGravy> right off to zummerzet

[10:19] <RabidGravy> so you all on the otherside

[10:19] *** kolikov joined
[10:19] <kolikov> hi perl6 !

[10:20] *** RabidGravy left
[10:23] *** erdic joined
[10:25] <dalek> nqp: bbf2eaf | (Pawel Murias)++ | src/vm/jvm/ (4 files):

[10:25] <dalek> nqp: Implement a guessing nqp::isttyfh on the JVM (the JVM doesn't allow us to implement a fully correct version).

[10:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bbf2eafc85

[10:27] *** kjs_ left
[10:28] *** go|dfish left
[10:30] <pmurias> jnthn: we now have isttyfh on moarvm, js, jvm. once the pull request is merged I can bump the MoarVM version in nqp and send a rakudo pull request

[10:31] <pmurias> ahh, there is a comment on the pull request. fixing

[10:32] <kolikov> [1,2,3].push({return 4});

[10:32] <kolikov> :m [1,2,3].push({return 4}); 

[10:34] *** espadrine_ joined
[10:35] <kolikov> m: [1,2,3].push({return 4}); 

[10:35] <camelia> rakudo-moar 778148: ( no output )

[10:35] <kolikov> m: say [1,2,3].push({return 4}); 

[10:35] <camelia> rakudo-moar 778148: OUTPUT«[1 2 3 -> ;; $_? is raw { #`(Block|64969528) ... }]␤»

[10:35] <zengargoyle> good * #perl6

[10:35] *** Actualeyes joined
[10:37] <pmurias> timotimo: updated my pull request

[10:39] <pmurias> timotimo: the message on top of the oplist file needs to be updated

[10:40] <timotimo> uh-oh. a highlight while i'm still backlogging ...

[10:40] *** Actualeyes left
[10:42] <pmurias> timotimo: the message told me to add the op *at the end* instead of before the spesh ops

[10:42] *** go|dfish joined
[10:43] <dalek> roast: 0c0b0a1 | jnthn++ | S12-methods/calling_sets.t:

[10:43] <dalek> roast: Tests codifying decision on RT #119193.

[10:43] <dalek> roast: review: https://github.com/perl6/roast/commit/0c0b0a174e

[10:43] *** kjs_ joined
[10:44] <kolikov> m: [1,2,3].push(1==2 ?? 0 !! 4);

[10:44] <camelia> rakudo-moar 778148: ( no output )

[10:44] <kolikov> m: say [1,2,3].push(1==2 ?? 0 !! 4);

[10:44] <camelia> rakudo-moar 778148: OUTPUT«[1 2 3 4]␤»

[10:47] <kolikov> [1,2,3].push(1==2 ?? 0 !! 4); ... code is interpreted as-is wheras passing {} pushes the code block itself inside the array, am I right ?

[10:47] <jnthn> Yes, {...} just pushes a closure

[10:47] <jnthn> Though note that {...} blocks are transparent to return; return is only for sub/method

[10:48] <kolikov> @jnthn : ok thank you !

[10:49] <jnthn> pmurias: Looking at your PRs now

[10:53] *** softmoth_ joined
[10:54] *** g5 joined
[10:54] *** g4 left
[10:55] <jnthn> pmurias: It missed an update to a table in procops.c, which I've fixed.

[10:55] <jnthn> And a whitespace oddness in oplist :)

[10:56] <JimmyZ> and the new  op is not in the order of interp.c 

[10:58] *** softmoth_ left
[10:59] <pmurias> how is interp.c ordered?

[10:59] <JimmyZ> op order

[11:01] *** avalenn_ joined
[11:01] *** avalenn left
[11:01] *** SHODAN left
[11:01] *** havenwood left
[11:01] <jnthn> Nice catch

[11:01] *** mephinet left
[11:01] *** havenn joined
[11:01] *** havenn left
[11:01] *** havenn joined
[11:01] <jnthn> Will probably end up generalizing that possibly_tty vtable later

[11:01] <jnthn> But it's OK for now

[11:02] *** havenn is now known as havenwood

[11:02] *** abaugher left
[11:02] *** mephinet- joined
[11:02] <jnthn> pmurias: Merged the Moar patch

[11:02] <jnthn> pmurias: Ordered same as in oplist

[11:03] *** abaugher joined
[11:03] *** SHODAN joined
[11:07] <pmurias> jnthn: thank you

[11:09] <jnthn> Thanks for the patch :)

[11:09] <JimmyZ> next: my pr:)

[11:14] *** pippo joined
[11:17] *** Skarsnik joined
[11:20] <timotimo> psch: actually all i wanted was for you to re-name "SixModelObject failure" to "SixModelObject nil" in the method signature %)

[11:21] *** riatre_ left
[11:22] *** riatre joined
[11:23] <kolikov> m: say [1,2,3].push(|[4,5,6]);

[11:23] <camelia> rakudo-moar 778148: OUTPUT«[1 2 3 4 5 6]␤»

[11:23] <kolikov> m: [1,2,3].push([4,5,6].flat);

[11:23] <camelia> rakudo-moar 778148: ( no output )

[11:24] <kolikov> m: say [1,2,3].push([4,5,6].flat);

[11:24] <camelia> rakudo-moar 778148: OUTPUT«[1 2 3 (4 5 6)]␤»

[11:24] <kolikov> ?? flat flatens ??

[11:26] <Zoffix> m: say [1,2,3].append([4,5,6].flat)

[11:26] <yoleaux> 08:21Z <moritz> Zoffix: I'll try to adjust the www server tonight; feel free to bug me if I forget

[11:26] <camelia> rakudo-moar 778148: OUTPUT«[1 2 3 4 5 6]␤»

[11:27] <Zoffix> m: say [4,(4, 5), 5,6].flat

[11:27] <camelia> rakudo-moar 778148: OUTPUT«(4 (4 5) 5 6)␤»

[11:27] <Zoffix> ¯\_(ツ)_/¯

[11:28] <jnthn> .flat flattens lists until it encoutners a Scalar container

[11:28] <jnthn> An Array is defiend as a bunch of things in Scalar containers.

[11:28] <jnthn> So .flat on an Array is identity

[11:28] <timotimo> okay, finally caught up

[11:29] <jnthn> Quick, make more backlog

[11:29] <timotimo> damn, that discussion about "omg perl6 is killing perl5" again ... not in word, but in spirit

[11:29] <Zoffix> jnthn++ thanks

[11:30] <nine> Well christmas will hopefully mark the end of the "rename it to something else" suggestions

[11:30] <Zoffix> timotimo, I think it was more about "what the hell do we name the new edition of this popular book we have now that Perl 6 is a thing" :)

[11:32] *** brrt left
[11:33] <kolikov> m: say [1,2,3].append([4,['hi'],5,6]);

[11:33] <camelia> rakudo-moar 778148: OUTPUT«[1 2 3 4 [hi] 5 6]␤»

[11:34] <kolikov> m: say [1,2,3].push([4,['hi'],5,6]);

[11:34] <camelia> rakudo-moar 778148: OUTPUT«[1 2 3 [4 [hi] 5 6]]␤»

[11:34] <dalek> modules.perl6.org/mojo-app: 69c8711 | (Zoffix Znet)++ | web/lib/ModulesPerl6 (3 files):

[11:34] <dalek> modules.perl6.org/mojo-app: Call FindBin the recommended way

[11:34] <dalek> modules.perl6.org/mojo-app: 

[11:34] <dalek> modules.perl6.org/mojo-app: Using it more than once is not supposed to work and the docs ask to use FindBin->again

[11:34] <dalek> modules.perl6.org/mojo-app: review: https://github.com/perl6/modules.perl6.org/commit/69c87111f6

[11:34] *** rindolf joined
[11:34] <kolikov> Ok !

[11:34] <jnthn> .push given one argument always treats it as one thing, so @foo.push(@bar.pop) won't doing weird things to you if you .pop an Array.

[11:38] <timotimo> Zoffix: that was only a tiny part of it

[11:40] *** znpy joined
[11:40] <znpy> g

[11:41] *** Amnez777_ joined
[11:41] *** Amnez777_ left
[11:42] *** Amnez777 left
[11:42] *** Amnez777_ joined
[11:43] <dalek> nqp: 11304c2 | (Pawel Murias)++ | tools/build/MOAR_REVISION:

[11:43] <dalek> nqp: Bump MoarVM for the isttyfh op.

[11:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/11304c24cb

[11:43] <dalek> nqp: 288c86b | (Pawel Murias)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[11:43] <dalek> nqp: Add op mapping for nqp::isttyfh.

[11:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/288c86b014

[11:43] <dalek> nqp: cbd65ce | (Pawel Murias)++ | t/nqp/19-file-ops.t:

[11:43] <dalek> nqp: Add a test for nqp::isttyfh on a regular file.

[11:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cbd65ce859

[11:43] *** Amnez777_ left
[11:43] *** Amnez777_ joined
[11:43] *** Amnez777_ left
[11:46] <timotimo> nice. isatty is a much-wanted feature. has been for a long time

[11:48] *** Amnez777 joined
[11:49] <jnthn> Indeed. It was on my todolist for next week. pmurias++ for making it not be :)

[11:49] *** Amnez777_ joined
[11:50] *** quietfanatic joined
[11:51] <quietfanatic> m: "1234" ~~ regex { <digit>* { $/.make: $<digit>.map({+$_}); say $/.made } };

[11:51] <camelia> rakudo-moar 778148: OUTPUT«This Seq has already been iterated, and its values consumed␤  in regex  at /tmp/iMuqggv1Bt:1␤  in block <unit> at /tmp/iMuqggv1Bt:1␤␤»

[11:51] <quietfanatic> bug?

[11:51] <stmuk> http://act.yapc.eu/lpw2015/news/1369

[11:51] <stmuk> :D

[11:52] <Zoffix> :)

[11:53] *** Amnez777 left
[11:53] <zengargoyle> m: "1234" ~~ regex { <digit>* { $/.make: [$<digit>.map({+$_})]; say $/.made } };

[11:53] <camelia> rakudo-moar 778148: OUTPUT«[1 2 3 4]␤»

[11:54] <jnthn> quietfanatic: Depends. If .make is spec'd to return the thing that was passed to it then it's going to end up sinking the Seq.

[11:54] <timotimo> stmuk: i have no idea who is involved in this, but could whoever is in charge please, please, please for the love of god make sure there's a proper microphone and recording setup for that keynote?

[11:54] <jnthn> But I'm not sure it's actually stated either way.

[11:54] *** kaare_ joined
[11:54] * jnthn just learned he's keynoting :)

[11:54] <nine> Ah maybe I should go to LPW after all :)

[11:55] *** ginkoms left
[11:55] *** Amnez777_ left
[11:55] *** Amnez777_ joined
[11:55] *** Amnez777_ is now known as Amnez777

[11:55] <timotimo> nine: i couldn't bear watching your latest talk because the audio quality was so shoddy ;(

[11:55] <quietfanatic> I guess I can see how that would be, but it's a bit surprising

[11:55] <jnthn> Guess I better get writing :-)

[11:55] <nine> timotimo: darn :/

[11:55] <quietfanatic> m: "1234" ~~ regex { <digit>* { $/.make: $<digit>.map({+$_}) } }; say $/.made

[11:55] <camelia> rakudo-moar 778148: OUTPUT«(1 2 3 4)␤»

[11:55] <timotimo> nine: did you have a look yet?

[11:55] <quietfanatic> also, that works.

[11:56] <nine> timotimo: a look at what?

[11:56] *** ginkoms joined
[11:57] <timotimo> that recording

[11:57] <dalek> rakudo/nom: c827c6f | jnthn++ | src/ (6 files):

[11:57] <dalek> rakudo/nom: Support `is BaseType` and shaped array attributes.

[11:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c827c6ffc1

[11:58] <dalek> roast: 013c609 | jnthn++ | S09-multidim/decl.t:

[11:58] <dalek> roast: Test shaped arrays as attributes.

[11:58] <dalek> roast: review: https://github.com/perl6/roast/commit/013c609a7e

[11:58] <dalek> roast: e23a3aa | jnthn++ | S02-types/is-type.t:

[11:58] <dalek> roast: Test `is BaseType` on state vars and attrs.

[11:58] <dalek> roast: 

[11:58] <dalek> roast: Passes for attributes, not yet for state vars.

[11:58] <dalek> roast: review: https://github.com/perl6/roast/commit/e23a3aac24

[11:58] <nine> Yes. Unfortunatley I couldn't find free echo cancellation software. However the sound could be improved by just increasing the volume except for the two places where it's really loud already.

[11:59] <Zoffix> Is there source code for camelia?

[11:59] <timotimo> really? just by making it louder?

[11:59] <moritz> Zoffix: perl6/evalbot on github

[11:59] <Zoffix> thanks

[11:59] *** Amnez777 left
[11:59] <jnthn> I guess nothing sinks it in that case

[11:59] <jnthn> Which is also kinda...interesting.

[12:00] *** Amnez777 joined
[12:00] <stmuk> timotimo: it's mdk Mark Keating

[12:01] <timotimo> not reachable in here?

[12:02] <jnthn> I'm not sure lpw is usually recorded, but I've not been for a couple of years.

[12:02] *** Amnez777 left
[12:02] *** Amnez777 joined
[12:02] <stmuk> timotimo: on the perl irc servers

[12:02] <stmuk> perl5 people use magnet not freenode

[12:03] <timotimo> right

[12:03] <jnthn> Maybe somebody can arrange to do a decent quality bootleg ;)

[12:04] <stmuk> I think they are (usually) recorded but where they go (youtube accn etc) is erratic

[12:04] <quietfanatic> m: my $x := (1,2).map({$_}); $x; say $x

[12:04] <camelia> rakudo-moar 778148: OUTPUT«WARNINGS:␤Useless use of variable $x in sink context (line 1)␤(1 2)␤»

[12:04] <stmuk> https://www.youtube.com/user/ShadowcatSystems 

[12:05] <stmuk> maybe there

[12:05] <nine> Darn....LPW conflicts with our company christmas party

[12:05] <quietfanatic> sinking the Seq doesn't clear it in this case.

[12:05] <stmuk> I'll be using an iphone with a 10EU/Pound tripod as a backup :)

[12:06] *** xpen left
[12:08] *** pmurias left
[12:09] *** kid51 joined
[12:10] *** rindolf left
[12:10] *** pmurias joined
[12:10] *** Amnez777 left
[12:10] *** Amnez777 joined
[12:12] <timotimo> stmuk: depending on the room it could be super bad :\

[12:13] <jdv79> stmuk: is something going on in london ia a few days?

[12:13] <stmuk> I figure bad is better than potentially nothing

[12:14] <timotimo> hmm. maybe

[12:14] <stmuk> jdv79: yes a large number of perl events check http://london.pm.org/

[12:14] <timotimo> someone with good patience could put subtitles up

[12:15] <jdv79> k

[12:16] *** cygx joined
[12:16] <cygx> o/

[12:16] <cygx> is there a demand for an asm-like interface to MAST?

[12:16] <cygx> specifically https://gist.github.com/cygx/f08da6caf35c7f3de1ff

[12:16] *** Amnez777 left
[12:17] <cygx> if so, I might put in the extra effort, parse the oplist and add it to the ecosystem

[12:17] *** kjs_ left
[12:17] <jdv79> why would that be useful?

[12:18] <pink_mist> I think he's asking if it would, not saying it would [be useful]

[12:18] <cygx> well, I'm using it as backend for a compiler that targets MoarVM specifically

[12:18] <timotimo> cygx: no need to parse the oplist

[12:18] <jnthn> cygx: I've not seen much demand for that, though it may make it easier to target Moar without using the NQP toolchain

[12:19] <timotimo> though to be fair, the p6 module that has the oplist data in it is inside moarvm's tools folder

[12:20] <Skarsnik> Hello. Should/Could I create a branch in rakudo to work on NC? I already has a fork for a pull request, and it's a bit different (And I can't compile in the fork, configure.pl refuse to work with the forked repository)

[12:20] <pmurias> jnthn: made a pull request to Rakudo that fixes #124017

[12:20] <jnthn> cygx: I decided early on that we'll not have an "official" MoarVM assembly langauge or integrate an assembler into the VM itself. But of course I've nothing against people building such an assembler. :)

[12:21] <cygx> jnthn: well, it's not a real assembler (no teaxtual input), just a convenience wrapper over MAST that looks like one ;)

[12:22] <jnthn> Any reason not to produce QAST?

[12:22] <jnthn> Or rather, what's the reason...I can think of legitimate ones :)

[12:22] <jnthn> Just curious :)

[12:23] <pmurias> jnthn: what would be a legitimate reason for that?

[12:23] <cygx> eventually, I want to be self-hosting, independent of NQP

[12:24] <jnthn> That's one. :)

[12:25] <dalek> rakudo/nom: 46c7c07 | jnthn++ | src/core/Array.pm:

[12:25] <dalek> rakudo/nom: .keys, .values, et al. on shaped arrays.

[12:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/46c7c07491

[12:25] <pmurias> cygx: what language are you writing a compiler for?

[12:26] <dalek> roast: d032537 | jnthn++ | S09-multidim/methods.t:

[12:26] <dalek> roast: Test .keys, .values, et al. on shaped arrays.

[12:26] <dalek> roast: review: https://github.com/perl6/roast/commit/d032537f78

[12:29] <cygx> pmurias: my own pet language

[12:31] <dalek> rakudo/nom: 7546b0d | (Pawel Murias)++ | tools/build/NQP_REVISION:

[12:31] <dalek> rakudo/nom: Bump NQP to get nqp::isttyfh.

[12:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7546b0d289

[12:31] <dalek> rakudo/nom: f9696dd | (Pawel Murias)++ | src/core/IO/Handle.pm:

[12:31] <dalek> rakudo/nom: Fix IO::Handle.t.

[12:31] <dalek> rakudo/nom: 

[12:31] <dalek> rakudo/nom: Fixes #123347.

[12:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9696dd15a

[12:31] <dalek> rakudo/nom: 3806c10 | jnthn++ | / (2 files):

[12:31] <dalek> rakudo/nom: Merge pull request #592 from pmurias/tty-checking

[12:31] <dalek> rakudo/nom: 

[12:31] <dalek> rakudo/nom: Fix IO::Handle.t.

[12:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3806c1011e

[12:31] *** rindolf joined
[12:32] <jnthn> pmurias: Thanks! If you've a moment to get some spectests in into roast for it, then we'll be another xmas RT down. :)

[12:32] <timotimo> jnthn: was there a decision about how/if assignment from list-of-list to shaped array would work?

[12:32] <cygx> pmurias: over the years, it's gone through several revisions, but has only ever had partial implementations

[12:33] <cygx> the current version is starting to look like a love child of Perl6 and Python

[12:33] <jnthn> timotimo: Kinda :) http://irclog.perlgeek.de/perl6/2015-09-11#i_11201188

[12:34] <timotimo> neat.

[12:35] <jnthn> Writing tests for that to explore it a bit more is one of my next tasks.

[12:36] <jnthn> But, lunch first :)

[12:36] <pmurias> jnthn: testing that is hard

[12:37] <pmurias> jnthn: I can easily test if it works on something that is not a tty, but there is no guarantee that while running a test we have a tty

[12:37] <jnthn> pmurias: Agree it's hard to do a positive test, but a negative test (a file certainly ain't a tty) is good

[12:37] <jdv79> mmm lunch

[12:37] <jnthn> Right.

[12:37] <jnthn> That'll do. I just want us to know in the tests it doesn't explode, like now.

[12:37] <jnthn> bbiab &

[12:41] *** softmoth_ joined
[12:43] <nine> timotimo: speaking of subtitles, I usually provide them for my own talks: http://niner.name/talks/Building%20Bridges/Building%20Bridges.pdf start at page 41

[12:43] <timotimo> nice

[12:44] *** CIAvash left
[12:44] <timotimo> nine: that's only slides; did you mean to link me to a version that also has the speaker's annotations?

[12:45] <timotimo> and god damn it, i keep using 's for genitive even though that's german, not english

[12:45] <nine> timotimo: starting at page 41 its slides + text

[12:46] <timotimo> something must be wrong on my end, then

[12:46] <timotimo> because i really only see the slides :\

[12:46] *** softmoth_ left
[12:46] *** Ven joined
[12:47] <nine> timotimo: there's also the original .odp file containing the notes: http://niner.name/talks/Building%20Bridges/

[12:50] *** kjs_ joined
[12:52] <dalek> roast: 90735d5 | (Pawel Murias)++ | S16-filehandles/io.t:

[12:52] <dalek> roast: Test .t on a file handle opened from a regular file. Bug from RT #123347

[12:52] <dalek> roast: review: https://github.com/perl6/roast/commit/90735d5b32

[12:52] *** Actualeyes joined
[12:53] <Ven> hi, #perl6 :)

[12:53] <pmurias> Ven: hi

[12:54] *** kid51 left
[12:55] <[ptc]> Ven: o/

[12:56] <timotimo> heya ven

[13:02] <timotimo> nine: nice slides :)

[13:05] <timotimo> nine: and of course: nice modules, too!

[13:14] *** rindolf left
[13:17] <pmurias> perl6: class Foo:no_such_adverbial {}

[13:17] <camelia> rakudo-moar 3806c1, rakudo-jvm c827c6: ( no output )

[13:17] <pmurias> adverbials when defining classes should be illegal?

[13:18] <jnthn> pmurias: Yeah. It's one of the xmas RTs

[13:18] <jnthn> pmurias: Exception: :ver and :auth

[13:19] <pmurias> jnthn: I'm trying to fix that RT

[13:22] <jnthn> pmurias: Nice :)

[13:22] <jnthn> pmurias: We can go with forbidding all for now; there's a seprate RT (not on the xams list (at least yet)) about ver/auth

[13:23] *** ginkoms left
[13:25] *** ZoffixW joined
[13:25] <ZoffixW> Is anyone available to pull camelia and restart her? I found a security hole that allows execution of arbitrary code.

[13:25] <ZoffixW> (pull after I push the commit that fixes the issue that is)

[13:26] <moritz> ZoffixW: yes

[13:26] <stmuk> POC? :)

[13:26] <dalek> evalbot: 196aa24 | (Zoffix Znet)++ | / (4 files):

[13:26] <dalek> evalbot: Escape special shell chars in qx//

[13:26] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/196aa24c89

[13:27] <ZoffixW> moritz, ^

[13:28] <ZoffixW> One of those is a hole, but I quotemetaed all other qx// just in case their code changes in the future.

[13:30] <moritz> huh, it resists restarting :(

[13:30] <Skarsnik> one nativecall test does not pass for me. (06-struct) anyone else?

[13:30] <ZoffixW> hm

[13:30] <ZoffixW> moritz, any error messages?

[13:31] <cygx> .oO( I'm sorry Dave, I'm afraid I can't do that )

[13:31] *** camelia joined
[13:31] <ZoffixW> m: say "Test"

[13:31] <ZoffixW> :/

[13:32] <gfldex> looks like you fixed all possible security holes in one go :->

[13:32] <ZoffixW> lol

[13:32] *** ChanServ sets mode: +v camelia

[13:32] <camelia> rakudo-moar : OUTPUT«Test␤»

[13:33] *** Actualeyes left
[13:33] <ZoffixW> stmuk, I couldn't think of anything non-destructive that would also produce the output. But if you're curious, the hole was on this line. You could simply append ";" after a github URL and type any shell command there: https://github.com/perl6/evalbot/blob/196aa24c8958b157ed85aa010eba306e91b7be74/lib/EvalbotExecuter.pm#L95

[13:35] <stmuk> I think technically \Q \E quotes regular expression metacharacters rather than shell ones

[13:36] <ilmari> the proper way is String::ShellQuote

[13:36] <ZoffixW> "Only Bourne shell quoting is supported"

[13:37] <ZoffixW> stmuk, it backslashes all \W. Regex is just one use :)

[13:38] <ZoffixW> Anyway. Time to do some work \o

[13:38] *** ZoffixW left
[13:40] <dalek> rakudo/nom: 1c0a07b | jnthn++ | src/core/Array.pm:

[13:40] <dalek> rakudo/nom: Fill out more methods on shaped arrays.

[13:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c0a07ba50

[13:40] <dalek> roast: 20160ee | jnthn++ | S09-multidim/methods.t:

[13:40] <dalek> roast: Test more methods on multi-dim arrays.

[13:40] <dalek> roast: review: https://github.com/perl6/roast/commit/20160ee6db

[13:41] <Skarsnik> damn working on rakudo/nqp/moar that I use to install system wide is a nightmare x)

[13:42] *** Amnez777 joined
[13:43] *** ifim joined
[13:45] <jnthn> Skarsnik: So work on a development copy? :)

[13:46] <Skarsnik> Well since moar/nqp/rakudo are 3 separate project they tend to mix the use of stuff in their directory with installed stuff

[13:47] *** Actualeyes joined
[13:47] <jnthn> Skarsnik: Being consistent with the --prefix you use to build them should avoid that, afaik.

[13:52] *** Ven left
[13:52] <mspo> Skarsnik: yes

[13:52] <mspo> two of them are missing DESTDIR support, iirc

[13:53] <mspo> I have been trying to get some round-toits to try and patch it in

[13:53] <Skarsnik> I had to remove the install on /opt to have something that work again x)

[13:53] <mspo> lack of DESTDIR also makes it difficult to package for pkgsrc, which is my main reason for wanting it

[13:55] <Skarsnik> I have a dumb question: If rakudo (and not panda) precompile package, how that can work with an user using a system wide installed perl6? rakudo will not have the right to create the precompile file? (espcially in a scenarii with the root doing panda install --notest Module)

[13:56] <mspo> I think MoarVM has full DESTDIR support, nqp has none, and rakudo support looking for (moar?) inside of DESTDIR but nothing else

[13:57] <jnthn> Skarsnik: The module will still be precompiled at install time, it's just that Rakudo will do that

[13:57] <nine> Skarsnik: if you're able to install a module (write a file into a system directory) you should be able to put the precompiled file there, too.

[13:58] <mspo> Skarsnik: it will use things in PREFIX during the build if it can find them

[13:58] <jnthn> (e.g. panda will call Rakudo to do it)

[13:58] <mspo> Skarsnik: caveat what I said about using destdir

[13:58] <pmurias> perl6: class Foo {}; augment Foo:auth<pmurias> {}

[13:58] <camelia> rakudo-moar, rakudo-jvm c827c6: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Invalid type smiley 'auth' used in type name␤at /tmp/tmpfile:1␤------> 3class Foo {}; augment Foo:auth<pmurias>7⏏5 {}␤»

[13:58] <pmurias> perl6: class Foo {}; augment class Foo:auth<pmurias> {}

[13:58] <camelia> rakudo-moar, rakudo-jvm c827c6: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤augment not allowed without 'use MONKEY-TYPING'␤at /tmp/tmpfile:1␤------> 3 Foo {}; augment class Foo:auth<pmurias>7⏏5 {}␤    expecting any of:␤        generic role␤»

[13:58] <Skarsnik> Oh ok, so it still get precompiled at installation. I understood it was only at the first use ^^

[13:59] <pmurias> jnthn: should an :auth/:ver be allowed with augment?

[13:59] <nine> Skarsnik: only FileSystem repositories precompile at first use. That's the ones you add with perl6 -I or PERL6LIB or use lib

[14:02] <jnthn> pmurias: No

[14:02] <mspo> oh are you talking about code compile/run and not actual rakudo compile run?

[14:03] <jnthn> Skarsnik: No, fisrst use is for things like -Ilib 

[14:03] <jnthn> When doing development

[14:03] <nine> Development or deployment by git checkout

[14:03] <Skarsnik> err, how do I force to recompile a lib? (should it check the date modified?)

[14:03] <nine> Skarsnik: it checks the modifcation date

[14:04] <nine> btw. jnthn Repository::FileSystem already checks the transitive dependencies :)

[14:04] <jnthn> nine: Nice!

[14:04] <jnthn> nine: What would you consider as remaining to do in the branch?

[14:05] <nine> jnthn: transitive checks in Repository::Installation. The rest should be just some detail and cleanup work. And of course much testing with an actual panda :)

[14:06] *** loren joined
[14:06] *** tokuhiro_ left
[14:06] <jnthn> Aye :)

[14:06] <jnthn> nine++ # awesome work

[14:06] <Skarsnik> perl6 -Ilib t/04-nativecall/06-struct.t

[14:06] <Skarsnik>  -> display a message from NC I just corrected 'Considere adding the api version of the library you want to use, eg' I corrected the 'Considere' spelling but it still use etheir the precompield file (or the installed one)

[14:07] <Skarsnik> NC.pm is in lib/ 

[14:07] <jnthn> nine: Recompiing the transitively impacted things is part of the work for Repository::Installation, yes?

[14:07] <nine> Skarsnik: to be clear, I was talking about my current development in the curli branch. Rakudo nom is different

[14:07] <nine> jnthn: yes

[14:07] <jnthn> Skarsnik: Jsut type "make"

[14:07] <jnthn> Cool

[14:07] *** xpen joined
[14:07] <Skarsnik> Ok thx ^^

[14:09] *** zengargoylew joined
[14:10] <Skarsnik> for my installation issue: What I did: 1 week ago I installed rakudo/nqp/moar in opt/. today I git pull each part and rerun make (and make install) but each part did a bad mix I think and it did not work. I had to remove /opt/* and recompile/reinstall

[14:14] <tadzik> https://metacpan.org/pod/install genius

[14:15] <Skarsnik> Nice module x)

[14:16] <tadzik> I just did a 'cpanm install App::Ack'

[14:16] <tadzik> and it Just Worked. By installing 'install' first

[14:16] <jnthn> :D

[14:17] <Skarsnik> Is there something to display message on std error (like warn) that does put the Module name/Line?

[14:18] <Skarsnik> *does not

[14:18] <tadzik> note, perhaps?

[14:18] <jnthn> note

[14:19] <jnthn> Note that you can't catch it with CONTROL or suppress it with quietly, though, since it just outputs to stderr, rather than being a warning control exception.

[14:19] <nine> note is one of my favourite features :)

[14:19] *** kaare_ left
[14:19] <jnthn> It may be notably faster because of that, though... :)

[14:21] *** lab_ left
[14:22] *** lab_ joined
[14:23] *** skids joined
[14:23] <Skarsnik> Maybe you can give me some feedback I work on https://rt.perl.org/Ticket/Display.html?id=126645 and if the user does not put the api version I warn (because it will probably not work) but the issue it warn for the tests that use a local lib file. They put ('./file') should I check the case where it look like a path and not a name and not warn? (it already don't warn if you write 'libfoo.1.so')

[14:24] <pmurias> jnthn: do we need a typed exception for the class Foo:D {} error?

[14:25] <jnthn> pmurias: Yes, if nothing else 'cus it lets us write a robust test 

[14:26] <nine> Skarsnik: please keep in mind that not all library files have versions in their name. Most notably libperl.so (which is /usr/lib/perl5/5.20.1/i586-linux-thread-multi/CORE/libperl.so here).

[14:26] <Skarsnik> what?

[14:27] <Skarsnik> it's not a symlink?

[14:27] <nine> Not a symlink, no.

[14:28] <pmurias> jnthn: I'm not sure how to call the exceptions, one for class Foo:adverb {}, other for augment class Foo:adverb {}

[14:28] <nine> Also libraries that are compiled as part of the Perl 6 module's installation probably won't have a version. Like Inline::Perl5's p5helper.so

[14:29] <pmurias> jnthn: X::Syntax::Augment::Adverb X::Syntax::Class::UnsupportedAdverb?

[14:29] *** softmoth_ joined
[14:30] <Skarsnik> That weird, all the document about creating lib (linux/bsd) say you should always have a so.apiversion

[14:30] <nine> should != must

[14:30] <nine> And perl5 is probably older than those documents ;)

[14:31] <jnthn> pmurias: First one is OK, second is a bit off since it applies to things other than classes

[14:31] *** cygx left
[14:32] <jnthn> pmurias: Ooh, you could just re-use X::Syntax::Adverb

[14:32] <jnthn> Though X::Syntax::Regex::Adverb's wording is closer

[14:32] <jnthn> Maybe for the second one an X::Syntax::Type::Adverb would be better

[14:33] <jnthn> So, X::Syntax::Augment::Adverb and X::Syntax::Type::Adverb

[14:33] <Skarsnik> yes, but for a normal lib (that ld will load) with just its name it will not work if you don't put the api version (the .so symlink is in the dev package for debian, and I think fedora is the same)

[14:33] *** FROGGS left
[14:34] *** softmoth_ left
[14:36] *** kaare_ joined
[14:39] <Skarsnik> hm, printf("%d\n", dlopen("libperl.so", RTLD_GLOBAL)); fail for me (print 0)

[14:40] <nine> Skarsnik: libperl.so is probably not in your LD_LIBRARY_PATH

[14:41] <Skarsnik> root@testperl6:~# apt-file search libperl.so

[14:41] <Skarsnik> libperl-dev: /usr/lib/i386-linux-gnu/libperl.so

[14:41] <Skarsnik> libperl5.20: /usr/lib/i386-linux-gnu/libperl.so.5.20

[14:41] <Skarsnik> libperl5.20: /usr/lib/i386-linux-gnu/libperl.so.5.20.2

[14:41] <Skarsnik> that an interesting issue x)

[14:42] <nine> Skarsnik: the way I handle it in Inline::Perl5 is that I compile a p5helper.so with gcc -Wall p5helper.c `perl -MExtUtils::Embed -e ccopts -e ldopts` -shared

[14:42] <timotimo> we should use ldconfig -p

[14:42] <nine> Skarsnik: this p5helper.so gets installed as a resource alongside Inline/Perl5.pm6 and I load it with the complete path

[14:43] <Skarsnik> That why it should not warn if you give it a full path

[14:43] <nine> Skarsnik: yep :)

[14:43] <Skarsnik> I just try to handle case with is native('libfoo') 

[14:43] <Skarsnik> in this case you are up for trouble without the api version

[14:45] <Skarsnik> the issue the test in NC call this like that: is native('./stuff') without the extension ~~

[14:46] <[Coke]> release today... if I ever make it home.

[14:46] <[Coke]> last RC candidate before christmas!

[14:47] <ugexe> :o

[14:48] <skids> m: my $a = Lock.new; $a.lock().say; $a.lock().say; 42.say; # Could have sworn I saw those being used, maybe deserves an NYI at least.

[14:48] <camelia> rakudo-moar : OUTPUT«Lock.new␤Lock.new␤42␤»

[14:48] *** khw joined
[14:48] <jnthn> skids: What?

[14:48] <timotimo> this time i have no crazy addition that i'll be sad about not getting into the release candidate

[14:48] <skids> Should the second one not deadlock?

[14:48] <jnthn> No

[14:49] <jnthn> Lock is reentrant.

[14:49] <timotimo> locks are reentrant by default

[14:49] <timotimo> do we have non-reentrant locks?

[14:49] <jnthn> No

[14:49] <jnthn> Only reentrant ones.

[14:49] <timotimo> k

[14:49] <skids> ah. ok.

[14:49] <jnthn> Locks are uncomposable enough as it is, without making them non-reentrant... :)

[14:50] <Skarsnik> hm, should I expose sub guess_library_name($lib) of NC with our? Make writing test less annoying and probably be useful for users?

[14:54] <jnthn> Skarsnik: Or maybe better export it under a tag so it can be optionally imported

[14:55] <Skarsnik> our make it available only with NC::mysub()?

[14:57] <dalek> roast: f14aab4 | jnthn++ | S09-multidim/assign.t:

[14:57] <dalek> roast: Tests for assigning to typed arrays.

[14:57] <dalek> roast: review: https://github.com/perl6/roast/commit/f14aab429a

[14:57] <jnthn> Skarsnik: Yes

[14:57] <jnthn> Skarsnik: But that's not very idiomatic in Perl 6.

[14:57] <jnthn> (IMO :))

[14:58] <dalek> rakudo/nom: dc40b1c | jnthn++ | src/core/ (2 files):

[14:58] <dalek> rakudo/nom: Implement assignment to shaped arrays.

[14:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dc40b1c562

[14:59] <Skarsnik> I need to came up with a name for the export now, debug? xD

[14:59] <dalek> rakudo/nom: e867b31 | jnthn++ | t/spectest.data:

[14:59] <dalek> rakudo/nom: Run S09-multidim/assign.t.

[14:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e867b313d2

[15:00] <jnthn> :libraries maybe

[15:02] <pmurias> jnthn: I made a pull request, the spectest is still running (propably should have waited). I have unpushed tests for roast.

[15:04] <jnthn> pmurias: Looking at it

[15:05] <jnthn> pmurias: We don't tend to put "." on the end of errors

[15:06] *** tokuhiro_ joined
[15:07] <jnthn> And I think a better wording is "Cannot put adverbs on a typename when augmenting" and "Cannot use adverb $.adverb on a type name (only 'ver' and 'auth' are understood)"

[15:07] <jnthn> pmurias: Want to tweak the PR, or shall I?

[15:08] <stmuk> in perl5 I used to use "undef" as a sink variable to throw away a result, what's the p6 version?

[15:08] <Skarsnik> hm, whre is the complete doc of Test? (like all the method and such?) Like if there a way to know if a warning occur? x)

[15:08] <timotimo> stmuk: you can assign Nil to a variable

[15:08] <pink_mist> timotimo: no, he's talking about assigning _to_ undef

[15:08] <pink_mist> timotimo: the other way around

[15:08] <timotimo> huh?

[15:08] <ugexe> $ = $result ?

[15:09] <timotimo> why would that do anything?

[15:09] <pink_mist> timotimo: it would discard the return value

[15:09] *** loren left
[15:09] <timotimo> so .. you want to prevent something from being sunk or do you explicitly want something to be sunk?

[15:09] <zengargoylew> Skarsnik: you have to look at either the specs or the source of Test.pm

[15:10] <zengargoylew> i haven't found any other 'real' documentation really vs looking at Test.pm

[15:10] <pink_mist> timotimo: he wants to assign some, and discard other values return by a subroutine

[15:10] <timotimo> ugexe: i'm confused why you're asking a musician about his thoughts on perl6 %)

[15:10] <timotimo> oh

[15:10] <zengargoylew> minor nit is that: p6doc Test does no good. :P

[15:10] <pink_mist> *returned

[15:11] <timotimo> ($a, $, $foo) = blah()

[15:11] *** softmoth_ joined
[15:11] *** tokuhiro_ left
[15:11] <[Coke]> It should eventually be on doc.perl6.org, but isn't yet.

[15:13] <nine> Skarsnik: if I want to import guess_library_name why not just write use NativeCall <guess_library_name>?

[15:13] <Skarsnik> oh that work?

[15:13] <pmurias> jnthn: I'll tweak it

[15:13] <timotimo> i think it does

[15:13] <nine> Export tags are code obfuscation. You look at a function name and the only way to find out where it's coming from is by going through the docs of all used modules.

[15:14] <timotimo> m: sub ret_many() { 1, 2, 3, 4 }; my ($a, $b, $c, $d) = ret_many; say $a; say $c; say $d;

[15:14] <camelia> rakudo-moar : OUTPUT«1␤3␤4␤»

[15:14] <timotimo> m: sub ret_many() { 1, 2, 3, 4 }; my ($a, $, $, $b) = ret_many; say $a; say $b

[15:14] <camelia> rakudo-moar : OUTPUT«1␤4␤»

[15:14] <pink_mist> nine: and that's assuming the module 1: has docs. 2: documents that function. 3: documents that function as being exported :P

[15:14] <zengargoylew> thought 'use <foo>' required custom EXPORT stuff

[15:14] *** yqt joined
[15:15] <jnthn> pmurias: Thanks. Lemme know when it's done and if the tests come out clean :)

[15:16] <Skarsnik> nine, use NativeCall <guess_library_name>;

[15:16] <Skarsnik>  call it after just don't work (it can find the routine)

[15:17] <nine> Skarsnik: I'm not sure about the syntax

[15:17] <zengargoylew> i believe you have to write your own &EXPORT routine to do that

[15:18] <pmurias> jnthn: still waiting for the tests (not re-running them with the tweaked msgs)

[15:21] *** silug left
[15:21] *** silug joined
[15:22] *** xpen left
[15:22] *** xpen joined
[15:22] <pink_mist> timotimo: in perl5 you can also use ($bar, (undef)x5, $quux) = foo for example to discard 5 values

[15:22] <zengargoylew> and it would be: use <&guess_library_name>;

[15:23] <timotimo> m: sub ret_many() { 1, 2, 3, 4, 5, 6, 7 }; my ($a, $b); ($a, |($ xx 6), $b) = ret_many; say $a; say $b

[15:23] <camelia> rakudo-moar : OUTPUT«1␤(Any)␤»

[15:23] <timotimo> not like that :\

[15:23] <timotimo> m: sub ret_many() { 1, 2, 3, 4, 5, 6, 7 }; my ($a, $b); ($a, |($ xx 5), $b) = ret_many; say $a; say $b

[15:23] <camelia> rakudo-moar : OUTPUT«1␤7␤»

[15:23] <timotimo> but like that!

[15:23] *** xpen left
[15:24] *** keix left
[15:24] *** xpen joined
[15:24] <pink_mist> a shame you need to predeclare there

[15:25] *** zakharyas1 joined
[15:25] <timotimo> m: sub ret_many() { 1, 2, 3, 4, 5, 6, 7 }; my ($a, |($ xx 5), $b) = ret_many; say $a; say $b

[15:25] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/BAQc8cx9pC␤Malformed parameter␤at /tmp/BAQc8cx9pC:1␤------> 3y() { 1, 2, 3, 4, 5, 6, 7 }; my ($a, |($7⏏5 xx 5), $b) = ret_many; say $a; say $b␤    expecting any of:␤        constraint␤»

[15:25] <timotimo> yeah

[15:26] <pmurias> jnthn: spectest passed

[15:27] *** zakharyas left
[15:27] *** espadrine_ is now known as espadrine

[15:28] * zengargoylew thought doc.perl6.org had a more complex example of custom EXPORT but i can't find it now...

[15:30] <jnthn> zengargoylew: use Foo <list of things> needs EXPORT sub; use Foo :tag; doesn't

[15:30] *** zakharyas1 left
[15:30] <dalek> rakudo/nom: e66c52e | (Pawel Murias)++ | src/ (2 files):

[15:30] <dalek> rakudo/nom: Throw exceptions when unsupported adverbs are passed during type definition or augmentation.

[15:30] <dalek> rakudo/nom: 

[15:30] <dalek> rakudo/nom: Fix ticket 124017.

[15:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e66c52e880

[15:30] <dalek> rakudo/nom: b591c88 | (Pawel Murias)++ | src/core/Exception.pm:

[15:30] <dalek> rakudo/nom: Tweak error messages.

[15:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b591c880e6

[15:30] <dalek> rakudo/nom: 7e3d0b8 | jnthn++ | src/ (2 files):

[15:30] <dalek> rakudo/nom: Merge pull request #593 from pmurias/restrict-adverbs-on-class

[15:30] <dalek> rakudo/nom: 

[15:30] <dalek> rakudo/nom: Throw exceptions when unsupported adverbs are passed during type defi…

[15:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e3d0b8369

[15:30] *** zakharyas joined
[15:31] <jnthn> pmurias: Push the tests when you're ready :)

[15:31] <jnthn> pmurias++

[15:31] <dalek> roast: a9d04f4 | (Pawel Murias)++ | S12-class/ (2 files):

[15:31] <dalek> roast: Test that adverbs are illegal when augmenting a class and only :auth/:ver are legal when declaring one.

[15:31] <dalek> roast: 

[15:31] <dalek> roast: Bug #124017.

[15:31] <dalek> roast: review: https://github.com/perl6/roast/commit/a9d04f4e99

[15:31] <pmurias> jnthn: pushed

[15:32] *** TEttinger left
[15:32] <jnthn> pmurias: Thanks; ticket resolved :)

[15:34] <jnthn> Down to 40 xmas RTs

[15:34] <jnthn> And I'm on course to close 2 more later today, or tomorrow morning failing that :)

[15:34] *** TEttinger joined
[15:36] <[ptc]> jnthn++  \o/

[15:37] <Skarsnik> hm, what more could I test? http://pastebin.com/UcYWyD5y (only unix test)

[15:40] <pmurias> m: my num $a; my num32 $b; my num64 $c; say $a;say $b;say $c;

[15:40] <camelia> rakudo-moar : OUTPUT«NaN␤0␤NaN␤»

[15:40] <pmurias> what should that return?

[15:41] *** Actualeyes left
[15:41] <Skarsnik> Interesting

[15:42] <Skarsnik> m: my num32 $a; my num64 $b; say $a == $b;

[15:42] <camelia> rakudo-moar : OUTPUT«False␤»

[15:42] *** rindolf joined
[15:42] *** jasanj joined
[15:44] <pmurias> m: say NaN == NaN

[15:44] <camelia> rakudo-moar : OUTPUT«False␤»

[15:44] <Skarsnik> m: my num32 $a; my num64 $b; say $a eq $b;

[15:44] <camelia> rakudo-moar : OUTPUT«False␤»

[15:48] *** znpy left
[15:50] <jnthn> pmurias: NaN, but I think those tickets will get really nasty and need some changes down in the Moar bytecode assembler

[15:50] <jnthn> pmurias: 'cus we're probably getting away with things we should not be in the code-gen

[15:52] *** MadcapJake joined
[15:52] <jnthn> m: say "{40 / 28} tickets / day"

[15:52] <camelia> rakudo-moar : OUTPUT«1.428571 tickets / day␤»

[15:53] *** brrt joined
[15:53] *** MadcapJake left
[15:54] *** MadcapJake joined
[15:54] *** MadcapJake left
[15:55] *** MadcapJake joined
[15:57] <MadcapJake> What are some commonly used delimiters for regexes? I have to explicitly support each one in language-perl6fe.

[15:57] <tadzik> I've mostly seen //, {} and [] used in the code

[15:58] <moritz> MadcapJake: s///, s!!!, s{...} = foo and s[...] = foo

[15:58] *** colomon left
[15:58] *** Actualeyes joined
[15:58] <MadcapJake> cool, four is a good start, I can always add another if anyone asks.

[15:58] *** pmurias_ joined
[15:59] <Skarsnik> I think I saw some ~~ ?

[15:59] <Juerd> I've seen s~~~ in Perl 5 code. Hated it.

[15:59] *** colomon joined
[16:02] *** pmurias left
[16:02] <MadcapJake> ok I can add support for that one as well. I've seen `|` used in sed before, I might just add that one as well ":)

[16:03] <dalek> perl6-roast-data: 71dc04a | coke++ | / (9 files):

[16:03] <dalek> perl6-roast-data: today (automated commit)

[16:03] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/71dc04a69c

[16:04] *** brrt left
[16:06] <timotimo> hum. how does IO::Socket::Async.connect actually work ...

[16:07] <Skarsnik> Can a create a branch on rakudo for my NC stuff? (I already have a fork with a pending PR)

[16:07] <[Coke]> NC?

[16:08] <Skarsnik> NativeCall

[16:08] *** diana_olhovik_ left
[16:08] *** tokuhiro_ joined
[16:08] <[Coke]> I see no problem with a branch, no.

[16:09] <timotimo> is IO::Socket::Async fully functional on our jvm backend?

[16:10] <[Coke]> timotimo: without knowing anything about it, guessing no. ;)

[16:10] <[Coke]> any incoming nqp changes soon?

[16:10] <stmuk> I sort of wish www.perl6.org/archive/* no longer existed since it seems to have too much google juice

[16:12] <jnthn> [Coke]: Not from me.

[16:13] <[Coke]> jnthn: I was just asking you. :)

[16:14] <jnthn> The shaped array stuff is all Rakudo level, and relatively low risk release wise since it's adding new things rather than changing existing things :)

[16:14] <jnthn> .oO( famous last words... )

[16:14] *** n0tjack joined
[16:14] <arnsholt> Well, it adding a new feature probably won't break any of the existing ones

[16:14] <arnsholt> Probably =)

[16:15] <Skarsnik> Oh rakudo is not in perl6. I can't do stuff with it x)

[16:15] *** tokuhiro_ left
[16:16] <hoelzro> o/ #perl6

[16:18] *** znpy joined
[16:22] *** kjs_ left
[16:23] *** xpen left
[16:23] *** xpen joined
[16:23] *** jpoehls_ joined
[16:25] *** silug left
[16:27] <psch> timotimo: i don't know about renaming, the type check was definitely wrong with my first commit re RT #126673 though...

[16:27] <psch> i mean, in general i think we're more likely to expect a Failure than Nil, except if people start returning Nil often

[16:28] <psch> i do have to admit that i found "failure" there a bit weird in general, but i didn't look too closely - i'd expected "returnValue" or something, but maybe that'd be semantically wrong

[16:28] * psch checks how p6typecheckrv is actually used...

[16:28] <timotimo> but Failure is derived from Nil now

[16:28] <timotimo> that's why we check against that, because both are supposed to go through

[16:29] <timotimo> and we pass the type to check against to the op

[16:30] <psch> ohh

[16:30] <psch> right, doesn't that mean that the original istype is just the wrong way around?

[16:30] <pmurias_> hoelzro: hi

[16:30] <psch> 'cause if rv contains a Failure and we check istype(Nil, Failure) 

[16:31] <hoelzro> o/ pmurias_ 

[16:31] *** pmurias_ is now known as pmurias

[16:31] *** xpen left
[16:32] <psch> hm, still missing an NQP_REVISION bump for isatty?

[16:33] *** ZoffixW joined
[16:34] <ZoffixW> Does anyone has edit perms on the wiki (or is willing to give them to my account) http://www.perlfoundation.org/perl6/index.cgi?perl_6 so we could close https://github.com/perl6/perl6.org/issues/14 ?

[16:35] <psch> IIOPossiblyTTY isn't in the NQP repository..?

[16:36] *** silug joined
[16:36] <MadcapJake> language-perl6fe updated to v0.5.0 (quoting constructs, heredocs, and pod formatting codes) Here's a screenshot of some of the quoting work https://twitter.com/MadcapJake/status/667380534708846592

[16:36] <psch> pmurias: did you overlook adding IIOPossiblyTTY.java to the git repo before pushing..? 

[16:36] <psch> 'cause that's what's not found and causing my nqp-j not to build

[16:37] <psch> or rather, the interface IIOPossiblyTTY isn't found, and i'd expect it to be in that file (and there's no inline class definition)

[16:38] <ZoffixW> MadcapJake, it's a plugin for atom right? How do I get/install it?

[16:40] <retupmoca> MadcapJake++

[16:41] <MadcapJake> ZoffixW: «Ctrl+,» opens the settings tab, then go to «Install» and type `perl6`.  There's one unfortunate caveat, you'll either need to disable `language-perl` (Which highlights perl 5 & 6) or you'll need to click on the `Perl 6` filetype on the modeline and search for `Perl 6 FE`.

[16:42] <MadcapJake> Personally I just like to disable it (each package enabled adds to startup time too) as I don't work with Perl 5 at all, but I am looking for a better solution.

[16:44] <Skarsnik> hm, still no perl6 in travis?

[16:44] <[ptc]> Skarsnik: there should be

[16:45] <Skarsnik> I mean can we stop building everything in the travis file? x)

[16:45] <[ptc]> Skarsnik: http://docs.travis-ci.com/user/languages/perl6/

[16:46] <Skarsnik> Oh neat

[16:46] *** cgfbee left
[16:46] <[ptc]> Skarsnik: if it doesn't work, let me know!

[16:46] <Skarsnik> I will check later, I have to go :)

[16:48] <ZoffixW> MadcapJake, well, I think it's got installed: http://i.imgur.com/kQ5fmW1.png

[16:48] *** cgfbee joined
[16:48] <hoelzro> not perl6, but I think Elm is a really cool language and they have some good advice re: compilers: http://elm-lang.org/blog/compilers-as-assistants

[16:48] *** jonas1 left
[16:48] <PerlJam> \

[16:48] <hoelzro> (which I think Perl6 does a good job at too =])

[16:50] <MadcapJake> ZoffixW: sweet! do you like it? Let me know if you find something that needs fixing, I'm a p6 noob!

[16:50] *** domidumont left
[16:51] <MadcapJake> Looks like I gotta add support for unicode to variables (your `$Δ` isn't captured)

[16:52] *** pdcawley left
[16:52] *** abraxxa left
[16:52] <ZoffixW> MadcapJake, well, I don't remember what it looked like with the default highlighter, so it's hard to say if I like it. I've no idea how to reinable the language-perl package :P

[16:52] *** abraxxa joined
[16:53] <ZoffixW> MadcapJake, my \x = 42; also doesn't highlight "x"

[16:53] <arnsholt> MadcapJake: If your regex language supports querying by Unicode property, getting P6 identifiers right should be pretty straightforward

[16:53] <MadcapJake> ZoffixW: just go back into the «Packages» menu in the Settings tab and scroll way down (they put all disabled packages at the bottom.

[16:54] <MadcapJake> I sometimes like to open a split and (with `language-perl` enabled) see the difference by selecting `Perl 6 FE` from the modeline for one of the buffers.

[16:54] *** abraxxa left
[16:54] <MadcapJake> ZoffixW: ok, those are sigiless variables right? Should they just be highlighted the same as sigiled ones?

[16:55] <moritz> IMHO it's OK to hilight them just like identifier (type names, constants etc.)

[16:57] <ZoffixW> MadcapJake, ah ok. I see yours highlights more stuff (version, ops in the multi infix<...>) and handles kebab case correctly: http://i.imgur.com/7hQub8f.png (yours is on the left)

[16:57] <ZoffixW> MadcapJake++ good job

[16:58] <ZoffixW> MadcapJake, oh, from the screenshot, I'm noticing "min" "max" is not highlighted

[16:59] <zengargoylew> oh, i wonder if travis caches builds of the tagged Perl 6 versions...

[16:59] <MadcapJake> ZoffixW: that's a weird one, is this code up in a gh repo?

[16:59] <ZoffixW> MadcapJake, yeah: https://github.com/zoffixznet/perl6-Color/blob/master/lib/Color/Operators.pm6

[17:02] <MadcapJake> Actually they are highlighted xD  Atom has this weird system for highlighting:  One the one end, the grammar writers (like me) try and capture everything via regex and apply some css selectors.  One the other end, the theme highlighters write css for whatever selectors they want.  So the problem is, there is no regularity in how theme writers (or even grammar writers) use the selectors.  So some themes highlight word operators

[17:02] <MadcapJake> (what `min` and `max` are selected as) and some don't.  TLDR: try another theme :)

[17:03] <ZoffixW> MadcapJake, what's the selector for them?

[17:03] <ZoffixW> Oh, I guess I can just inspect it myself

[17:03] * ZoffixW is an Atom noob

[17:05] * Juerd ♥ supplies

[17:05] <MadcapJake> I think that the original language-perl has a different selector for word ops, I chose to have them highlighted the same as symbol ops: "keyword.operator.word.perl6fe'  the key bit is `keyword.operator` the rest is just helpful for me (though it could be used if someone wanted to make an epic perl6 specific theme, some people have done work like this for python/javascript)

[17:06] <MadcapJake> If you're interested: «Ctrl+Alt+Shift+P» will pop-up a notification with all the selectors at your cursor.

[17:07] *** xfix left
[17:08] <MadcapJake> If you're *more* interested: You can run Atom like `atom -d` and then you get the full chromium developer window and you can right click anything and click "Inspect element" just as you would in a browser.

[17:09] *** pmurias left
[17:09] <ZoffixW> This reminds me of how annoyed I was last time I tried to configure atom

[17:09] * ZoffixW gives up

[17:09] <MadcapJake> ZoffixW: btw, those last two unicode infix ops for desaturate and saturate aren't fixed width :(  I think that's more than just an Atom problem though.

[17:10] <ZoffixW> Wouldn't that just be an issue of whether the font I'm using provides them as fixed width?

[17:10] <MadcapJake> ZoffixW: you can always shoot me a question if you want! I personally have the same frustration anytime I try and configure vim/emacs. :D

[17:11] <ZoffixW> I use Sublime Text 2 for non-Perl-6 stuff. BUT, there's no way to enter Unicode chars in it :P

[17:11] <ZoffixW> So I have to use Atom if I want the Unicode goodness :P

[17:11] <MadcapJake> ZoffixW: Maybe, but I think most fonts don't provide unicode operators and it fallsback to a deeper unicode font.

[17:12] <MadcapJake> If you're on linux doesn't «Ctrl+Shift+u» work?

[17:12] <Juerd> Perl 6 is blowing my mind.

[17:12] <dalek> nqp: cb57d0d | coke++ | / (2 files):

[17:12] <dalek> nqp: bump version to 2015.11

[17:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cb57d0d4cb

[17:12] <ZoffixW> MadcapJake, it works in everything BUT Sublime Text 2 :P

[17:13] <MadcapJake> lol that's awesome.

[17:13] <Juerd> First time I've ever liked writing asynchronous code.

[17:14] *** diana_olhovik joined
[17:14] <PerlJam> Juerd: yes, jnthn (and others) did an excellent job.

[17:15] <jnthn> Juerd: Are you using the supply/whenever syntax too?

[17:15] *** lab_ left
[17:15] *** lab_ joined
[17:17] *** domidumont joined
[17:18] <MadcapJake> What does it mean to prefix a method/field with `?` or `!`  I've seen both in P6 code before.

[17:19] <moritz> MadcapJake: ! is a private method

[17:19] <moritz> MadcapJake: and $var.?method doesn't die when there's no method "method"

[17:19] <MadcapJake> moritz: thanks!

[17:20] <TimToady> and $?foo has nothing to do with objects, but is a compile-time "constant variable"

[17:20] <Juerd> jnthn: In one place, copied from an example in the docs. I don't really understand it.

[17:20] <moritz> MadcapJake: also, awsome work on the syntax hilighting; I've seen some screenshots, and I'm ipressed

[17:20] <quietfanatic> Does anybody have any suggestions about where to start to get a little familiarity with moarvm?

[17:20] <moritz> getting heredocs right is tricky, for example :-)

[17:20] <Juerd> p5: https://github.com/Juerd/Net-MQTT-Simple/blob/master/lib/Net/MQTT/Simple.pm

[17:20] <PerlJam> quietfanatic: #moarvm :)

[17:20] <Juerd> p6: https://github.com/Juerd/p6-mqtt/blob/master/lib/Net/MQTT.pm

[17:20] <camelia> rakudo-moar: ( no output )

[17:21] <Juerd> Almost at the same amount of features :)

[17:21] <quietfanatic> PerlJam: Ah, of course :)

[17:22] *** sprocket joined
[17:22] <jnthn> Juerd: Yeah, I should really write the docs about it :)

[17:22] <MadcapJake> moritz: thanks! heredocs was just a nifty use of a really cool feature in node-oniguruma (js regexp engine)

[17:23] *** diana_olhovik left
[17:23] <Juerd> I have no idea how I could implement automatic reconnection yet...

[17:24] <MadcapJake> Just a few more tasks and I'll submit a PR to github/linguist to replace their current perl 6 highlighter.

[17:24] <ZoffixW> Juerd, what's has IO::Socket::Async $!socket; ? I don't see that module in the ecosystem

[17:25] <ugexe> its core

[17:25] <Juerd> ZoffixW: Found that at doc.perl6.org :)

[17:25] <ZoffixW> Thanks

[17:26] *** synbot6 joined
[17:27] <psch> i'm a bit hesitant pushing a commit on top of rakudo HEAD after having to revert a merge and rebasing that revert out of my local copy...

[17:29] <psch> as in (1) building HEAD doesn't work, (2) revert the breaking commit, (3) fix something unrelated, (4) rebase the revert away

[17:29] <[Coke]> error building nqp: src/vm/jvm/runtime/org/perl6/nqp/io/StandardReadHandle.java:15: error: cannot find symbol

[17:29] <psch> [Coke]: yeah, i mentioned that to pmurias++ already

[17:29] <[Coke]> lemme try to clean and try again. :|

[17:30] <psch> [Coke]: IIOPossiblyTTY is missing - i have no idea what should go in it, so i'm in the described situation...

[17:30] <[Coke]> is this from bbf2eaf?

[17:30] <psch> yeah

[17:31] <psch> i think pmurias accidentally didn't git add the new file, cause the interface is plainly not declared anywhere

[17:31] <[Coke]> I'll revert it then.

[17:31] <[Coke]> Oy.

[17:32] <n0tjack> anyone have any recommendations for a reasonably-sized but still useful English corpus?

[17:32] <n0tjack> the ANC is just huge.

[17:32] <psch> [Coke]: the corresponding rakudo commit is 3806c101

[17:32] <PerlJam> n0tjack: king james bible text?  one of the other books in project gutenberg?

[17:33] <[Coke]> psch: thank you.

[17:33] * PerlJam lunch &

[17:33] <n0tjack> PerlJam: KJV not represenative, unfortunately. Yeah, my backup plan is to cat a bunch of Gutenberg texts together.

[17:34] <n0tjack> Trying to implement Norvig's simple spelling corrector as a quick p6 exercise

[17:34] <[Coke]> .tell pmurias - had to revert your recent changes around StandardReadHandle.java because they broke the build.

[17:34] <yoleaux> [Coke]: I'll pass your message to pmurias.

[17:34] *** rurban left
[17:35] * [Coke] is looking forward to having a new branching strategy so we can be sure we have a good working branch most of the time.

[17:36] <MadcapJake> ZoffixW: u+25cf ● and u+25ef ◯ seem to be fixed-width for me, not that it really matters but looks a little cleaner.

[17:36] <TimToady> well, we'll need to split off a maint track for 6c as a language after xmas so we can start developing 6d, or whatever langauge versioning scheme we end up with

[17:37] <TimToady> or is that what you mean?

[17:37] <n0tjack> wouldn't it be 6.turtle-doves, 6.french-hens?

[17:37] <ZoffixW> MadcapJake, someone on FB mentioned a single brightness char and suggested doing a composite operator, like <-●> and <+●> for example, to be more clear. I ain't got tuits for that yet tho :P

[17:38] <[Coke]> https://github.com/perl6/nqp/issues/256

[17:38] <TimToady> n0tjack: we'd run out of versions after 12 that way

[17:38] <TimToady> leaving aside the fact that they wouldn't cmp right...

[17:39] <[Coke]> TimToady: in addition to that, we also need to think about having a 6c dev, 6c release, 6c stuff that hasn't been tested on any other backends yet...

[17:39] <psch> m: say v6 cmp v6.c

[17:39] <camelia> rakudo-moar : OUTPUT«More␤»

[17:39] <[Coke]> but at a minimum, yes, we need to start tracking spec versions.

[17:39] <psch> ^^^ this surprised me a tad

[17:39] <ZoffixW> Go the Ubuntu way... 6.double-duck

[17:40] <psch> i mean, semver-y it fits, but 6.christmas as 6.0 it wouldn't

[17:40] <psch> although maybe the 6 in 6.c is 6.0.0 vOv

[17:40] <psch> not that that would change much there...

[17:40] <[Coke]> if v6 is "newer" than v6.c, that's not bad.

[17:40] <[Coke]> ah, I read that backwards, didn't I.

[17:40] <[Coke]> m: say v6 gt v6.c

[17:40] <camelia> rakudo-moar : OUTPUT«False␤»

[17:40] <[Coke]> ayup.

[17:41] <psch> hmm, maybe i read it wrong, actually

[17:41] <TimToady> m: say v6 after v6.c

[17:41] <camelia> rakudo-moar : OUTPUT«True␤»

[17:41] <TimToady> don't use gt

[17:41] <[Coke]> someone who wants to hack on perl5/make stuff, removing the need to use parrot to cut an nqp release would be appreciated.

[17:41] <psch> ah, no, i read it right apparently

[17:41] <[Coke]> O_o?

[17:42] <TimToady> gt is for strings, not versions

[17:42] <ZoffixW> Did someone say hack on perl5 stuff? \o/

[17:42] <[Coke]> http://docs.perl6.org/routine/after - click on "cmp" - bad URL

[17:43] <ZoffixW> Yeah, there's an Issue already for that

[17:43] <ZoffixW> https://github.com/perl6/doc/issues/162

[17:43] <[Coke]> http://docs.perl6.org/routine/cmp should be updated to note that it works specially on version objects and point to the operator to use.

[17:44] <jnthn> TimToady: So, use v6.d; means "must have 6.d and don't give me any features added after that", use v6.d+ means "latest but must be at lesat v6.d", and use v6 means "latest"?

[17:45] <ZoffixW> [Coke], where is that nqp release cutting at? https://github.com/perl6/nqp/blob/master/Configure.pl ?

[17:45] <[Coke]> see docs/release* for the guide on the required steps.

[17:46] <[Coke]> step early: config with parrot. #if you don't do this, one of the later steps fails, I think it's "make release"

[17:46] <jnthn> bbiab &

[17:46] <TimToady> well, use v6.d just matches the head of the version, so it's more like v6.d.0+ or really I guess v6.d.a+

[17:46] <TimToady> but basically, yeah

[17:46] <stmuk> what comes after v6.z?

[17:47] <TimToady> v6.za

[17:47] <TimToady> m: say v6.za after v6.z

[17:47] <camelia> rakudo-moar : OUTPUT«True␤»

[17:48] <TimToady> m: say v6.0 after v6.z; # and of course this

[17:48] <camelia> rakudo-moar : OUTPUT«True␤»

[17:48] <n0tjack> TIL: PNC bank maintains a "christmas price index" which tracks a basket of the commodities mentioned in the 12 days of Christmas song. Current price of Christmas: $27,673.22

[17:48] <ZoffixW> m: say ('c'..'s').elems + ('a'..'e').elems + ('a'..'x').elems 

[17:48] <camelia> rakudo-moar : OUTPUT«46␤»

[17:49] <TimToady> so we could last a good long time with official P6 in "alpha" state, as it were :)

[17:49] <ZoffixW> That leaves 46 releases before we get an really awkward one :P

[17:49] <n0tjack> if you count each round of the song as an independent set of gifts (i.e. cumulative over the 12 days), the true price of Christmas is ~$117K

[17:49] <Hotkeys> Hello

[17:49] <TimToady> well, we could switch to 6.47.0 at that point :)

[17:49] <ZoffixW> :P

[17:49] *** AlexDaniel joined
[17:49] <n0tjack> seven swans a-swimming are surprisingly expensive

[17:49] <TimToady> bypassing the little 6.6.6 problem :)

[17:49] <ZoffixW> hah

[17:50] <n0tjack> TimToady: in China, you'd have to skip version 4.

[17:50] <n0tjack> I'm currently working on the floor between 3 and 5, obviously named "floor 3A"

[17:50] <[Coke]> is https://github.com/perl6/nqp/issues/258 enough to hold up the release?

[17:51] <[Coke]> I don't think https://github.com/perl6/nqp/issues/257 is.

[17:52] *** pdcawley joined
[17:52] <Hotkeys> Sometimes they just skip straight from 3 to 5 as well

[17:52] *** lab_ left
[17:53] *** Peter_R joined
[17:53] *** xiaomiao left
[17:53] <n0tjack> I always thought labelling the 13th floor on a 13-floor bldg "PH" was a clever hack.

[17:53] <ZoffixW> So what's parrot? A P6 compiler?

[17:53] <n0tjack> ZoffixW: it was a VM for dynamic languages, mostly p6

[17:53] <n0tjack> ZoffixW: not really a going concern anymore

[17:54] *** lab_ joined
[17:54] <ZoffixW> n0tjack, is this still accurate:? "Parrot is scheduled to release the third Tuesday of each month; Rakudo will generally issue its own development release soon after the scheduled Parrot release"

[17:55] <diakopter> no; it can be scrapped

[17:55] <n0tjack> ZoffixW: I can't speak with authority, but I don't think Parrot is actively maintained anymore. It's outlived its usefulness. Its spiritual successor is Moar.

[17:55] <ZoffixW> Ah ok :)

[17:55] <diakopter> TimToady gave a good summary in the TwiT talk this week

[17:55] <diakopter> (of parrot)

[17:55] <ZoffixW> I'll try to find the time to watch that then.

[17:57] <[Coke]> I'm going to update the parrot-related text and the release schedule after christmas.

[17:57] <diakopter> in case anyone needs the link: https://twit.tv/shows/triangulation/episodes/225?autostart=false

[17:58] <[Coke]> going to move to saturdays (if no objection) and pick a simple formula. (like, 3rd saturday)

[17:58] <[Coke]> bartolin, psch: what's your opinion on https://github.com/perl6/nqp/issues/257 ?

[17:58] <TimToady> we don't yet know how much JVM support will be there at christmas either

[17:58] <[Coke]> er, sorry, 258

[17:58] <[Coke]> TimToady: my goal is to at least STOP BREAKING IT.

[17:59] <[Coke]> beyond that, yes, no promises.

[18:01] <TimToady> well, I don't consider backtraces to be intrinsically worse than producing wrong results, so if we have to break jvm's semantics while making moarvm better, I know where my priorities lie this coming month

[18:02] *** molaf joined
[18:03] <psch> [Coke]: well, we're getting a CodeRef without an STable in decont there

[18:03] <psch> [Coke]: i don't have any immediate idea how to fix that

[18:05] *** pdcawley left
[18:05] *** lab_ left
[18:07] *** sufrostico joined
[18:07] *** znpy left
[18:08] *** xiaomiao joined
[18:09] <psch> on the upside, equivalent code on a p6-level doesn't seem to break

[18:10] <psch> j: use nqp; my $method := nqp::decont(nqp::findmethod(Mu.HOW, "methods")); $method(Mu.HOW, Mu) # approximately

[18:10] <camelia> rakudo-jvm c827c6: ( no output )

[18:10] <psch> the explicit decont is probably not needed there...

[18:11] <psch> j: use nqp; my $method := nqp::findmethod(Mu.HOW, "methods"); nqp::decont($method(Mu.HOW, Mu)) # better approximation

[18:11] <camelia> rakudo-jvm c827c6: ( no output )

[18:13] *** tokuhiro_ joined
[18:13] <psch> hm, that's not quite it i guess :/

[18:13] *** lab_ joined
[18:13] *** telex left
[18:14] *** telex joined
[18:14] *** dbrock- left
[18:15] *** xfix joined
[18:15] *** z448 joined
[18:15] <MadcapJake> This is how I am currently specififying the first char of a sigiled variable: (?:[a-zA-Z_\xc0-\xff\\$])

[18:16] <MadcapJake> How would I (and how far) expand that to allow for $Δ etc.)

[18:16] <moritz> MadcapJake: \w maybe?

[18:16] <n0tjack> MadcapJake: without knowing for sure .. the Unicode property "identifier character"?

[18:17] *** tokuhiro_ left
[18:17] *** z448 left
[18:17] <moritz> \w is word character, which maps pretty well to identifier

[18:17] <MadcapJake> http://oniguruma.rubyforge.org/oniguruma/files/Syntax_txt.html

[18:17] *** dakkar left
[18:18] <MadcapJake> I'm not quite sure what will give me the unicode in these character types

[18:19] *** Actualeyes left
[18:19] <n0tjack> MadcapJake: According to S06, the initial character in an identifier either has unicode prop L, or is an underscore.

[18:19] *** z8 joined
[18:19] <MadcapJake> moritz: haha looks like \w worked!

[18:19] <n0tjack> MadcapJake: and \w is "matches a character with unicode property L"

[18:19] <n0tjack> so moritz++

[18:20] <MadcapJake> ohh ok i gotcha n0tjack thanks! I didn't realize there was a rule on the initial char

[18:20] <n0tjack> check http://design.perl6.org/S15.html#Identifiers

[18:21] <MadcapJake> well that was easy, changed that large character set to (?:\\w)

[18:22] *** znpy joined
[18:22] <MadcapJake> n0tjack: thanks, this is helpful!

[18:23] <MadcapJake> hey there's a description of pragmas I was looking for too! S15 FTW!

[18:23] <n0tjack> m: say '_' ~~ /\w/;

[18:23] <camelia> rakudo-moar : OUTPUT«｢_｣␤»

[18:23] <n0tjack> m: say '_' ~~ /\w/ ?? "underscore is a letter" !! "no it ain't";

[18:23] <camelia> rakudo-moar : OUTPUT«underscore is a letter␤»

[18:24] <n0tjack> huh, didn't realize that

[18:25] <quietfanatic> Actually \w is letters, numbers, and _.  It's \a that's just letters

[18:25] <MadcapJake> yeah \w === [a-zA-Z0-9_] (plus unicode cat L, apprently!)

[18:25] <Skarsnik> [ptc], it's lastest in a travis.yml that make it rebuild rakudo and co each time?

[18:25] <quietfanatic> So an identifier would be [\a_]\w*

[18:27] *** z8 left
[18:27] <MadcapJake> quietfanatic: does \a include unicode though?

[18:27] *** spider-mario joined
[18:28] <quietfanatic> m: say 'あ' ~~ /\a/

[18:28] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/qKp1xdhTxo␤Unrecognized backslash sequence: '\a'␤at /tmp/qKp1xdhTxo:1␤------> 3say 'あ' ~~ /\7⏏5a/␤    expecting any of:␤        term␤»

[18:28] <quietfanatic> oh huh

[18:29] <n0tjack> m: say '_' ~~ /\p{ID_Start}/ ?? "Unicode says _ can start an identifier" !! "lol jk";

[18:29] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZsUyCOok9c␤Unrecognized backslash sequence: '\p'␤at /tmp/ZsUyCOok9c:1␤------> 3say '_' ~~ /\7⏏5p{ID_Start}/ ?? "Unicode says _ can star␤    expecting any of:␤        term␤»

[18:29] <MadcapJake> m: say 'Δ' ~~ /\a/

[18:29] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/gkMfXjWXZi␤Unrecognized backslash sequence: '\a'␤at /tmp/gkMfXjWXZi:1␤------> 3say 'Δ' ~~ /\7⏏5a/␤    expecting any of:␤        term␤»

[18:29] <MadcapJake> m: say 'Δ' ~~ rx|\a|

[18:29] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/yCAxPutJbh␤Unrecognized backslash sequence: '\a'␤at /tmp/yCAxPutJbh:1␤------> 3say 'Δ' ~~ rx|\7⏏5a|␤»

[18:29] <n0tjack> m: say 'Δ' ~~ rx|\a|;

[18:29] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/SMtdJc4qVS␤Unrecognized backslash sequence: '\a'␤at /tmp/SMtdJc4qVS:1␤------> 3say 'Δ' ~~ rx|\7⏏5a|;␤»

[18:30] <MadcapJake> either way, the re engine I'm using doesn't have a \a character class

[18:31] <quietfanatic> Well if you have unicode character classes, it'd be [:alpha:]

[18:31] <MadcapJake> it does have an Alpha property though... let me give it a try

[18:31] <moritz> m: say 'Δ' ~~ /\pL/

[18:31] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/Bzhx444xIe␤Unrecognized backslash sequence: '\p'␤at /tmp/Bzhx444xIe:1␤------> 3say 'Δ' ~~ /\7⏏5pL/␤    expecting any of:␤        term␤»

[18:32] <moritz> m: say 'Δ' ~~ /<:Letter>/

[18:32] <camelia> rakudo-moar : OUTPUT«｢Δ｣␤»

[18:32] <MadcapJake> sweet Alpha property worked, that way it won't capture number-beginning things as identifiers. (Alpha is probably what Letter is in P6)

[18:32] <moritz> p5 does the \pL or \p{Letter} property

[18:33] <n0tjack> m: say '_' ~~ /<:ID_Start>/;

[18:33] <camelia> rakudo-moar : OUTPUT«Nil␤»

[18:33] <n0tjack> m: say 'j' ~~ /<:ID_Start>/;

[18:33] <camelia> rakudo-moar : OUTPUT«｢j｣␤»

[18:34] <n0tjack> m: say '_' ~~ /<:XID_Continue>/;

[18:34] <camelia> rakudo-moar : OUTPUT«｢_｣␤»

[18:34] *** monger776 joined
[18:35] *** monger776 left
[18:36] <MadcapJake> ZoffixW: v0.5.1 supports highlighting $Δ now!

[18:36] <ZoffixW> MadcapJake++

[18:38] <hahainternet> quick question, why is for example, 100² not supported as an operator?

[18:39] <hahainternet> i assume there was some discussion at some point

[18:39] <Skarsnik> m: say 100²

[18:39] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/_nWI0UQD3t␤Bogus postfix␤at /tmp/_nWI0UQD3t:1␤------> 3say 1007⏏5²␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier…»

[18:39] <ZoffixW> hahainternet, you mean just the ²?

[18:39] *** cygx joined
[18:39] <hahainternet> ZoffixW: indeed, or any superscripted number

[18:40] <TimToady> m: say unival('²')

[18:40] <camelia> rakudo-moar : OUTPUT«2␤»

[18:40] <hahainternet> 2**30 is not as nice as 2³⁰

[18:40] <ZoffixW> m: sub postfix:<²> (Real $n) { $n ** 2 };  say 100²

[18:40] <cygx> OH NOES: https://www.youtube.com/watch?v=Sg4U4r_AgJU&t=57m32s

[18:40] <camelia> rakudo-moar : OUTPUT«10000␤»

[18:40] <cygx> dissed by Brian Kernighan 

[18:40] <ZoffixW> hahainternet, I guess because it's easy to do that ^ 

[18:40] <hahainternet> ZoffixW: oh i know you can add it, but it would be better if it supported the whole uni class

[18:41] <hahainternet> i assume operator names can contain some element of pattern matching, i should earn what would be required to make that apply

[18:42] <n0tjack> hahainternet: the cost would be additional complexity (in the compiler and in the user's head) and the benefit would be ... humor value? 

[18:42] <n0tjack> P6 is a metalanguage, so you can fold, spindle, twist, and mutilate it on your own.

[18:42] <ZoffixW> :)

[18:42] <timotimo> nnnooooooo, mister kernighan :(

[18:42] <hahainternet> n0tjack: the benefit is clarity

[18:43] <hahainternet> i understand that's why « and » exist for example

[18:43] <n0tjack> hahainternet: Clarity, methinks, is in the eye of the beholder. I personally can't stand implied operators (i.e. overloading juxtaposition with semantics).

[18:43] * ZoffixW releases Operators::Superscripts

[18:43] <ZoffixW> Oh

[18:44] <ZoffixW> [Coke], I've just "cut a release" of nqp and from what I can see parrot was not involved in the process

[18:44] <hahainternet> n0tjack: but to act as if this is not clear is to dismiss its use everywhere

[18:44] <hahainternet> n0tjack: i mean it's not like superscripts as powers is rare

[18:44] <n0tjack> I don't see intrinsic value in backwards compatibility with a notation which (a) developed organically, without oversight or overall design and (b) was optimized for a whiteboard, not a text file

[18:44] <ZoffixW> [Coke], without making changes to anything. Am I missing something? By "cut a release" I mean I generated the tarball

[18:44] <hahainternet> and is (c) in use in every school and formal education setting in the world i'm aware of

[18:44] <hahainternet> i mean, there is that going for it ;)

[18:45] <n0tjack> I also find 2**4 perfectly clear; if it were at all unclear I could see an argument for superscripts to supplement it.

[18:45] <ZoffixW> Ooooo... "Hey there! We're rolling out a faster, more streamlined repository experience and would love to give you early access."

[18:45] * ZoffixW feels special

[18:45] <hahainternet> n0tjack: but is not >> just as clear as » ?

[18:45] <hahainternet> is there not more than one way to do things? ;)

[18:45] <n0tjack> hahainternet: well, big-sigma {iterator declaration, index bounds} {expression} is used in every classroom the world over

[18:45] <n0tjack> but I prefer [+]  :)

[18:46] <n0tjack> hahainternet: yes, TMTOWTDI .. for the user!

[18:46] <hahainternet> n0tjack: sure, but i'm not suggesting ** be removed, just that i would have expected superscripts to work as lots of other unicode is supported

[18:46] <hahainternet> wondered if there had been a discussion about it previously

[18:46] <hahainternet> but as it stands i don't see a good reason for rejection, other than it doesn't seem that you can declare operators by unicode class :D

[18:47] <n0tjack> hahainternet: I'm a lowly user, not a designer or contributor, and a n00b to boot. But my general philosophy is that supporting features is like supporting arguments: the burden is on the proponent, not the defendent.

[18:48] <hahainternet> well i'm happy to be the advocate, but i was more hoping to find previous discussions than ignite something new, i am also just a lowly user

[18:48] *** cognominal left
[18:48] <n0tjack> IOW, there is a cost for every feature, so we'd have to see a corresponding benefit, and this reporter doesn't see a (meaningful) benefit of superscripts

[18:48] *** molaf left
[18:48] <n0tjack> I haven't been here long enough to know if it's been discussed previously.

[18:49] <hahainternet> all i could find was discussion of them in range operators/increment/decrement

[18:49] *** znpy left
[18:52] <MadcapJake> hahainternet: I could see maybe having a few basic ones like squared, cubed but beyond that it should just be handled with an exponentation operator (this is how calculators handle it too: Xʸ

[18:52] <hahainternet> timotimo: good update btw, i wasn't aware it was you + lizmat who do the 6 weeklys

[18:52] <timotimo> lizmat steps in regularly

[18:52] <hahainternet> well i knew it was someone in here

[18:52] <hahainternet> same with the advent calendars

[18:52] <hahainternet> which have been all i've used for christmas for a few years

[18:53] <hahainternet> so, thanks for the good work :)

[18:53] <timotimo> i could have done the last two, but liz was already half-done before the weekend even started

[18:53] <hahainternet> well as mostly a passive observer, it's fantastic to get distilled summaries

[18:53] <hahainternet> otherwise i'd be stuck reading commit logs or irc logs

[18:53] <timotimo> i'm glad to hear :)

[18:54] <hahainternet> and every year the advent calendar has blown my mind in one way or the other

[18:54] <timotimo> yup, the quality is quite good

[18:54] <timotimo> gotta catch some Zs for a little nap

[18:54] <stmuk> https://github.com/rakudo/rakudo/pull/594 Import a new CREDITS based on a new script CREDITS.p6

[18:54] <hahainternet> anyhow MadcapJake imho if you support one of 2³ or what-have-you, you might as well support them all

[18:55] <hahainternet> although it would be tricky if they were done individually, it'd have to be a grammar rule i would guess

[18:55] <hahainternet> nn timotimo, i'd make a list zip pun but i'd feel bad

[18:55] <timotimo> :)

[19:01] *** muraiki joined
[19:02] *** pdcawley joined
[19:05] *** espadrine left
[19:08] *** jasanj left
[19:08] *** jasanj joined
[19:09] <stmuk> now #595

[19:11] *** pdcawley left
[19:12] *** colomon left
[19:13] *** colomon joined
[19:13] *** silug left
[19:16] *** vendethiel joined
[19:19] *** cygx left
[19:24] *** lab_ left
[19:25] *** lab_ joined
[19:26] *** lmmx joined
[19:26] *** silug joined
[19:26] *** diakopter___ joined
[19:27] <diakopter___> at work in webchat

[19:28] <diakopter___> whee.

[19:28] <dalek> ecosystem: 3316f21 | (Zoffix Znet)++ | META.list:

[19:28] <dalek> ecosystem: Add Operators::Math::Superscripts to the ecosystem

[19:28] <dalek> ecosystem: 

[19:28] <dalek> ecosystem: Superscript numerical operators for raising to powers: https://github.com/zoffixznet/perl6-Operators-Math-Superscripts

[19:28] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3316f21eb0

[19:28] <ZoffixW> hahainternet, ^ :D

[19:29] <ZoffixW> It's really sad custom ops are so expensive to compile. "All tests successful. Files=1, Tests=19, 48 wallclock secs ( 0.05 usr  0.01 sys + 47.14 cusr  0.38 csys = 47.58 CPU)"

[19:29] <ZoffixW> That's just 19 defined ops

[19:29] <n0tjack> how do adverbs work with custom infix operators?

[19:29] <hahainternet> ZoffixW: :o

[19:29] <hahainternet> ZoffixW: and now to convince someone to make it core :D

[19:29] <moritz> n0tjack: they are just named arguments to the operator

[19:30] <n0tjack> I want to be able to say sub infix<↑> ($a, $b, :$n) { ...} and then call 4 ↑:n(2) 77 ... is that the general idea?

[19:30] <ZoffixW> hahainternet, nah. Why slow down the compiler with extra features and the burden core devs with extra maintenance?

[19:30] <moritz> ZoffixW: installing modules for the mojo-app now

[19:30] <hahainternet> ZoffixW: ah this would only work for singles anyway

[19:30] <ZoffixW> moritz, sweet. I'm around if anything starts exploding :)

[19:31] <hahainternet> as 2¹² would be 2**1**2

[19:31] <hahainternet> still 

[19:31] <moritz> ZoffixW: do you want root on the www server, so that you can also maintain stuff?

[19:31] <hahainternet> thans for the effort :)

[19:31] <ZoffixW> moritz, that would be nice sure

[19:31] <ZoffixW> This way I don't have to bug you all the time :)

[19:31] <[Coke]> ZoffixW: did you follow the directions?

[19:31] *** lab_ left
[19:32] <ZoffixW> hahainternet, yeah. I'd love to define a whole ton of them, but they're very expensive. 19 cost 40secs. 1000s would compile forever :P

[19:32] <n0tjack> moritz: I meant more the calling convention than the declaration. As in 88 ↑:n(2) 999 -- is that what I should expect to work?

[19:32] <[Coke]> (that had you configure parrot?)

[19:32] <moritz> ZoffixW: please /msg me your ssh pubkey

[19:32] *** lab_ joined
[19:32] <hahainternet> ZoffixW: it'd be part of the language grammar i'd assume

[19:32] <hahainternet> ZoffixW: i'll try and learn how to do that

[19:32] <moritz> n0tjack: I'm never quite sure where the adverb goes; might be after the second operand

[19:32] <n0tjack> thanks

[19:32] *** Sqirrel joined
[19:33] <ZoffixW> [Coke], oh, I think I may have skipped the three "make ..."s before I ran make release. Running now. 

[19:33] <moritz> heh, install perl 5 modules is sloooow compared to installing with pip

[19:33] <[Coke]> ZoffixW: ... did you run the configure step?

[19:33] <moritz> and then when I want to complain about it, I remember it's because pip doesn't run each test suite :-)

[19:33] <[Coke]> and/or start from a clean dir?

[19:34] <ZoffixW> [Coke], I started from a clean checkout. And I ran perl Configure.pl --gen-moar --backend=moar

[19:34] *** lmmx left
[19:34] <[Coke]> ok, then the fix may be as simple as just removing the reference to parrot. I know at one point this year, it was still required.

[19:35] *** kjs_ joined
[19:35] <[Coke]> (from parrot in the docs, that is.)

[19:36] <arnsholt> A question for the Rakudo internals folks: What kind of object are $*OUT and $*ERR?

[19:36] *** cognominal joined
[19:36] <moritz> m: say $*OUT.^name

[19:36] <camelia> rakudo-moar : OUTPUT«IO::Handle␤»

[19:36] <moritz> that's what I would have guessed too

[19:36] <arnsholt> Oh, derp. Should have thought of that =D

[19:36] <arnsholt> Cheers!

[19:37] <cognominal> m: say $*OUT.perl

[19:37] <camelia> rakudo-moar : OUTPUT«IO::Handle.new(path => IO::Special.new(what => "<STDOUT>"), chomp => Bool::True)␤»

[19:37] <diakopter___> cool

[19:38] <arnsholt> Now I can gobble up stdout and stderr for IPerl6 =D

[19:38] *** lab_ left
[19:39] *** lab_ joined
[19:42] <bartolin> [Coke]: sorry, I don't have a good idea about https://github.com/perl6/nqp/issues/258

[19:42] <n0tjack> hmm, this doesn't return

[19:42] <n0tjack> https://gist.github.com/dbron/245b6e2891c3bc3520cf

[19:43] <n0tjack> It was working when I was using regular subs instead of an infix operator

[19:43] <diakopter___> m: https://gist.github.com/dbron/245b6e2891c3bc3520cf

[19:43] <camelia> rakudo-moar : OUTPUT«(timeout)»

[19:44] <diakopter___> does its memory usage grow?

[19:45] <n0tjack> Let me check.

[19:45] <n0tjack> yep.

[19:45] *** vendethiel left
[19:45] <dalek> modules.perl6.org/mojo-app: 307ef07 | moritz++ | web/lib-db-builder/P6Project/Hosts/Github.pm:

[19:45] <dalek> modules.perl6.org/mojo-app: Remove debugging code

[19:45] <dalek> modules.perl6.org/mojo-app: review: https://github.com/perl6/modules.perl6.org/commit/307ef07b23

[19:45] <n0tjack> it's in an infinite recursion, I imagine. Somehow porting it from sub to operator screwed up how it understands its parameters.

[19:46] <diakopter___> so it is recursing more deeply, if the memory usage is growing

[19:46] *** lab_ left
[19:46] <n0tjack> Oh well, I can always port it back to a sub; the fact that the adverb can't come directly after the op kinda-sorta defeats the purpose of using an op anyway.

[19:46] <ZoffixW> Oh, moritz++ beat me to it :)

[19:46] <ZoffixW> Sorry about that one :P

[19:47] *** znpy joined
[19:49] *** lab_ joined
[19:49] <n0tjack> ah, dammit, I transposed my adverbs.

[19:49] <n0tjack> chalk that up to me being stupid.

[19:49] *** black_ant left
[19:50] <ZoffixW> [Coke], well, I ran perl Configure.pl --gen-moar --backend=moar; make; make m-test; make release ...; This is what it generated http://xtatik.org/temp/nqp-2015.11.tar.gz

[19:51] <ZoffixW> Not tried building the jvm, but so far, I don't see parrot being involved in the process (don't have it installed)

[19:51] *** lab_ left
[19:52] *** lab_ joined
[19:52] <[Coke]> ZoffixW: ok. historically, 'make release' only worked if you configured with parrot. thanks for the feedback, I'll double check and then fixup the docs and close the ticket. thanks.

[19:54] *** FROGGS joined
[19:55] <dalek> nqp: 9bb99ed | coke++ | src/vm/jvm/ (4 files):

[19:55] <dalek> nqp: Revert "Implement a guessing nqp::isttyfh on the JVM (the JVM doesn't allow us to implement a fully correct version)."

[19:55] <dalek> nqp: 

[19:55] <dalek> nqp: This reverts commit bbf2eafc85f3fa4e070a967ffd4c931e7609ce21.

[19:55] <dalek> nqp: 

[19:55] <dalek> nqp: It breaks the build on the JVM

[19:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9bb99edcd4

[19:55] <dalek> roast: 1f000d4 | usev6++ | S16-io/bom.t:

[19:55] <dalek> roast: Fudge tests for UTF-8 BOM stripping on JVM RT #124024

[19:55] <dalek> roast: review: https://github.com/perl6/roast/commit/1f000d46c7

[19:55] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124024

[19:56] <masak> evening, #perl6

[19:56] <ZoffixW> \o

[19:56] <[Coke]> nqp 2015.11 release done, uploaded.

[19:57] <ZoffixW> \o/ 

[19:57] <Hotkeys> releases are for nerds

[19:57] <Hotkeys> building from the latest commit is whewre it's at

[19:58] *** zakharyas left
[19:58] <masak> [Coke]++ # release

[19:59] <jnthn> o/ masak

[20:00] * arnsholt has beer and progress on IPerl6

[20:01] <ZoffixW> hm... I really hate GitHub's new "streamlined" layout :S

[20:01] *** vendethiel joined
[20:01] * jnthn hopes getting beer on IPerl6 won't make it sticky

[20:01] <arnsholt> Beer just makes the code more awesomer

[20:01] <arnsholt> I thought you'd know that =p

[20:04] *** black_ant joined
[20:05] *** petercommand joined
[20:05] *** lab_ left
[20:06] *** lab joined
[20:06] *** kjs_ left
[20:07] *** Actualeyes joined
[20:07] <dalek> roast: 4210e0c | jnthn++ | S09-multidim/methods.t:

[20:07] <dalek> roast: .flat on shaped array gives the leaves.

[20:07] <dalek> roast: review: https://github.com/perl6/roast/commit/4210e0cbc1

[20:11] *** brrt joined
[20:11] *** lab left
[20:12] <dalek> nqp: b7f3ccf | coke++ | docs/release_guide.pod:

[20:12] <dalek> nqp: No longer need to build parrot to cut a release

[20:12] <dalek> nqp: 

[20:12] <dalek> nqp: Other minor cleanups.

[20:12] <dalek> nqp: 

[20:12] <dalek> nqp: Closes #256

[20:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b7f3ccfd73

[20:13] <[Coke]> ZoffixW++

[20:13] *** lab joined
[20:13] <ZoffixW> \o/

[20:14] *** tokuhiro_ joined
[20:15] *** darutoko left
[20:16] *** diana_olhovik joined
[20:17] <zengargoylew> ah, made it through the first day of the rakudo/nqp workshop slides.

[20:19] *** tokuhiro_ left
[20:19] *** Sqirrel left
[20:21] *** lizmat joined
[20:21] <lizmat> .botsnack

[20:21] <yoleaux> 08:27Z <nine> lizmat: http://irclog.perlgeek.de/perl6/2015-11-19#i_11564686

[20:21] <synbot6> om nom nom

[20:21] <PerlJam> lizmat!  o/

[20:21] <yoleaux> :D

[20:21] *** lab_ joined
[20:21] <jnthn> zengargoylew: Congrats :)

[20:21] * lizmat waves from Hollywood

[20:21] <lizmat> (Florida :-)

[20:22] *** domidumont left
[20:22] <lizmat> PerlJam o/

[20:22] *** lab left
[20:23] <jnthn> Hollywood sure gets around... :)

[20:23] <jnthn> o/ lizmat 

[20:23] <lizmat> hehe.... yeah...

[20:23] <timotimo> oh hey lizmat :)

[20:24] <timotimo> i did the weekly in your absence - only one day late - and it seems like it was well received :D

[20:24] <lizmat> we  disembarked earlier this morning, just checked into our hotel for the next 2 days

[20:24] <lizmat> timotimo++

[20:24] <lizmat> it appears I have some backlog to check out  :-)

[20:25] <dalek> rakudo/nom: 0285870 | jnthn++ | src/core/Array.pm:

[20:25] <dalek> rakudo/nom: .gist on shaped arrays shows structure.

[20:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0285870011

[20:25] *** diana_olhovik left
[20:26] <nine> \o lizmat :)

[20:28] *** diana_olhovik joined
[20:30] <lizmat> nine++  o/

[20:33] <dalek> Heuristic branch merge: pushed 73 commits to modules.perl6.org by moritz

[20:33] *** lab_ left
[20:33] *** tokuhiro_ joined
[20:34] *** lab_ joined
[20:34] *** pecastro left
[20:35] <[Coke]> Anything major looming on rakudo/nom today before the release?

[20:35] *** sufrostico left
[20:36] <jnthn> [Coke]: One more patch from me, nothing big

[20:37] <[Coke]> ok. I'm not getting to it for a few hours, so I'm sure you'll beat me to it

[20:37] *** tokuhiro_ left
[20:38] <jnthn> I hope to be in bed and unconcious in a few hours :)

[20:39] <PerlJam> Everyone, don't forget to contribute to the Advent calendar!   With the impending "production release" of Perl 6, there may be more interest in neat Perl 6 things.

[20:39] * jnthn might supply a post...

[20:40] <jnthn> But like...after LPW and a few days to recover from it :P

[20:41] <dalek> rakudo/nom: f8f165b | jnthn++ | src/core/Array.pm:

[20:41] <dalek> rakudo/nom: Fix .perl on shaped arrays.

[20:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f8f165b5ac

[20:41] <PerlJam> jnthn: a nice post on supply/react/whenever would be great  :)

[20:41] <dalek> roast: bc0fca7 | jnthn++ | S09-multidim/methods.t:

[20:41] <dalek> roast: Test .gist and .perl on shaped arrays.

[20:41] <dalek> roast: review: https://github.com/perl6/roast/commit/bc0fca7aaa

[20:42] <PerlJam> ... and shaped arrays  ;)

[20:42] <ZoffixW> PerlJam, is it just 1 article per day or can more people write?

[20:42] <ZoffixW> I heard the "Advent" terms thrown around Christmas time before, but I never knew what that means actually :)

[20:43] <PerlJam> ZoffixW: historically it's been 1 article per day, but I'm not going to limit people if they want to do more :)

[20:43] <ZoffixW> All I can think of is those chocolates where you pop open one bit per day :)

[20:43] <jnthn> TimToady: I've largely fleshed out most of what you described wanting shaped arrays to do, with the exception of your wish that .map somehow be structre-retaining...

[20:43] <jnthn> TimToady: We'll find other holes too, I suspect.

[20:43] <ZoffixW> PerlJam, when does it start?

[20:43] <moritz> ZoffixW: it's like that, except that you get a blog post instead of a chocolate per day

[20:43] <PerlJam> ZoffixW: Dec 1.

[20:43] <ZoffixW> Aha.

[20:44] <jnthn> TimToady: The main/big thing that's missing is shaped native arrays.

[20:44] <jnthn> TimToady: So that's what I'll probably do tomorrow.

[20:45] *** kjs_ joined
[20:45] *** pippo left
[20:46] *** [Sno] left
[20:49] *** z8 joined
[20:49] <moritz> http://modules.perl6.org/ is now powered by a mojolicious app, ZoffixW++

[20:49] <dalek> roast: 1291a67 | usev6++ | S06-traits/misc.t:

[20:49] <dalek> roast: Fudge tests for correct exception on JVM, RT #126531

[20:49] <dalek> roast: review: https://github.com/perl6/roast/commit/1291a675f2

[20:49] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126531

[20:49] *** geraud joined
[20:50] <ZoffixW> \o/

[20:50] <ZoffixW> timotimo, I recall you wanted List of Modules -> List of links to repos. If you give me the spec of what the output should look like, I'll add that. Currently, stuff like this works: http://modules.perl6.org/repo/AccessorFacade

[20:50] *** rindolf left
[20:50] <ZoffixW> (note the /repo)

[20:51] <ZoffixW> commute &

[20:51] *** ZoffixW left
[20:56] *** pecastro joined
[20:58] *** kaare_ left
[21:02] *** z8 left
[21:05] *** FROGGS left
[21:09] *** cygx joined
[21:10] <cygx> note that the new modules.perl6.org shows a supefluous scrollbat in my firefox

[21:10] <cygx> one way to get rid of it is giving #dists_wrapper an overflow:visible

[21:10] <cygx> *scrollbar

[21:11] <PerlJam> I liked "scrollbat"  That should be a thing.

[21:12] *** diana_olhovik left
[21:13] *** pmurias joined
[21:13] <pmurias> [Coke]: with what error does the build fail?

[21:13] <yoleaux> 17:34Z <[Coke]> pmurias: - had to revert your recent changes around StandardReadHandle.java because they broke the build.

[21:14] <cygx> PerlJam: me too, but according to google image search, it's not - YET!

[21:15] <timotimo> pmurias: something doesn't exist

[21:15] <timotimo> pmurias: some file you forgot to git add perhaps

[21:15] <bartolin> pmurias: https://github.com/perl6/nqp/issues/258 see also http://irclog.perlgeek.de/perl6/2015-11-19#i_11567312

[21:16] <pmurias> yes it seems a missing file

[21:17] *** diana_olhovik joined
[21:17] <cygx> http://thumbs.dreamstime.com/z/halloween-bat-scroll-illustration-cute-cartoon-vampire-peeping-round-sign-showing-what-written-32082638.jpg # <-- a scrollbat

[21:17] <Skarsnik> duh what is the -I equivalent for perl5 ? x)

[21:17] <PerlJam> Skarsnik: -I

[21:18] <moritz> that was easy.

[21:19] <dalek> rakudo/curli: 8fd2c2c | (Stefan Seifert)++ | src/core/CompUnit/Repository/Installation.pm:

[21:19] <dalek> rakudo/curli: Fix installing distributions containing multiple modules

[21:19] <dalek> rakudo/curli: 

[21:19] <dalek> rakudo/curli: Precompiling in the order as they are listed in the distribution's meta data

[21:19] <dalek> rakudo/curli: for now.

[21:19] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/8fd2c2c9ea

[21:19] <jnthn> nine: Though given pre-comp is recursive these days, I guess that order doesn't strictly matter? :)

[21:20] <dalek> nqp: 765ef2c | (Pawel Murias)++ | src/vm/jvm/ (5 files):

[21:20] <dalek> nqp: Implement a guessing nqp::isttyfh on the JVM (the JVM doesn't allow us to implement a fully correct version).

[21:20] <dalek> nqp: 

[21:20] <dalek> nqp: This commit contains the file that was missing previously

[21:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/765ef2c10a

[21:20] <nine> jnthn: it's recursive with FileSystem repositories. Installation does precomp on install. Though I guess, I could detect that we are already precompiling and thus precompile on load there, too.

[21:21] <nine> jnthn: that might just be the solution to find the intra dist dependencies :)

[21:21] <jnthn> nine: I think that'd be wise

[21:21] <jnthn> Right, that also ;)

[21:21] *** zengargoylew left
[21:22] <nine> jnthn: I'm thinking about having one dependencies file per precompiled module. Would improve load performance in FileSystem repos, but would also be a bit of a headache (and performance penalty) for finding the reverse dependencies at install time in Installation repos.

[21:23] <nine> Maybe I should just do both a centralized dependencies file for Installation repos and a per module file in the precomp store.

[21:24] <jnthn> nine: You could do different...yeah. :)

[21:24] <Skarsnik> nice perl5 module: WARNING: Unknown struct item type 'gint'

[21:24] <Skarsnik>  I try to understand why Dumper display nothing after that, the WARNING dies ...

[21:25] <Skarsnik> sorry for this useless rant xD

[21:28] *** diakopter___ left
[21:28] <pmurias> nine: the centralized file would contain all the installed modules?

[21:29] <nine> pmurias: the ids of the installed modules and the ids of their dependencies

[21:31] *** diakopter___ joined
[21:33] *** raiph joined
[21:35] *** diana_olhovik left
[21:40] *** leont joined
[21:40] <leont> Is there a shorter way to do «CATCH { when Foo { return } }», it seems more wordy than needed

[21:41] <leont> (specially given usual indenting standards)

[21:41] <lizmat> CATCH { return when Foo }

[21:41] <lizmat> na

[21:41] <leont> I have a recollection of that not working

[21:42] <lizmat> yeah, was mixing it up with "with"

[21:42] *** kolikov left
[21:42] *** diakopter___ left
[21:42] <lizmat> sightseeing&

[21:43] <jnthn> m: sub foo() { die 'oops'; CATCH { return when 'oops' } }; foo()

[21:43] <camelia> rakudo-moar : ( no output )

[21:43] * grondilu realizes that his latest modification on permutations improves performance but loses lazyness :(

[21:43] <jnthn> Seems fine

[21:43] <jnthn> when is a statement mod too

[21:47] *** rurban joined
[21:47] <grondilu> m: say permutations(100)[0]

[21:48] <camelia> rakudo-moar : OUTPUT«(timeout)»

[21:48] *** pmurias_ joined
[21:48] <Zoffix> cygx, what's your OS and Firefox version?

[21:51] <leont> m: try { die False; CATCH { when Bool { say "Success" } } }

[21:51] <camelia> rakudo-moar : OUTPUT«False␤  in block <unit> at /tmp/r_34ZHztPj:1␤␤»

[21:51] *** pmurias left
[21:51] * leont is confused about that

[21:53] <jnthn> leont: You can't just throw any old object :)

[21:53] <jnthn> Needs to ~~ Exception

[21:53] <leont> Ah, I see

[21:53] <jnthn> Ah, and so why did mine work? 'cus die 'foo' makes an Exception whose message is 'foo', and it will .Str to the message 

[21:54] <cygx> Zoffix: Win7, FF 42.0

[21:55] *** xfix left
[21:55] <Zoffix> cygx, I don't see a scrollbar in Win7/FF42. Can you make a screenshot?

[21:58] <cygx> Zoffix: http://i.imgur.com/TWiM6EC.png

[21:58] <cygx> you can only scroll a pixel or three

[21:59] <Zoffix> :S What happened to your font aliasing? :)

[21:59] <cygx> don't like it

[21:59] <Zoffix> :O

[22:02] *** nightfrog left
[22:03] <leont> Is there a cleaner way to set the default value (in a class) of an attribute (from a role) than to defined a BUILD submethod?

[22:03] *** [Sno] joined
[22:04] <grondilu> moritz: https://github.com/rakudo/rakudo/commit/57b83f4ad7803bb2dc96313c42636229ca76bf6d#commitcomment-14513158

[22:04] <Zoffix> leont, has $.foo = 'bar';

[22:04] <Zoffix> oh from a role

[22:04] <Zoffix> dunno

[22:04] *** diakopter___ joined
[22:07] *** skids left
[22:09] *** brrt left
[22:14] <zengargoyle> oh, is modules.perl6.org the new one?

[22:14] <dalek> rakudo/curli: f8a5d5f | (Stefan Seifert)++ | src/core/CompUnit/PrecompilationRepository.pm:

[22:14] <dalek> rakudo/curli: Fix precompilation using an out of date repository list

[22:14] <dalek> rakudo/curli: 

[22:14] <dalek> rakudo/curli: @*INC is on the way out. Use $*REPO for the up-to-date list.

[22:14] <dalek> rakudo/curli: Fixes precompilation failing with "module not found" messages.

[22:14] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/f8a5d5f5ba

[22:14] <dalek> rakudo/curli: 2c8ab72 | (Stefan Seifert)++ | src/core/CompUnit/Repository/Installation.pm:

[22:14] <dalek> rakudo/curli: Handle intra-dist dependencies when precompiling on installation

[22:14] <dalek> rakudo/curli: 

[22:14] <dalek> rakudo/curli: Precompile recursively just like Repository::FileSystem does.

[22:14] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/2c8ab72260

[22:15] <Zoffix> zengargoyle, yeah

[22:16] <zengargoyle> it does that heinous activate search box and breake space/pgup/pgdown thing. :P

[22:16] <Zoffix> zengargoyle, you never complained when that was happening on the old version :P

[22:17] <Zoffix> And I'd assume you'll want to search 99% of the time on that page instead of scrolling :P

[22:17] <zengargoyle> i complaing when doc.perl6.org did it. :)  

[22:17] <zengargoyle> browsers will search on a page just fine, unless it's capable of searching for stuff that's not on the page...

[22:18] <zengargoyle> ctrl-f or / 

[22:18] <Zoffix> zengargoyle, if you're talking about modules.perl6.org stuff, it soon will. We have too many dists for a single page, so we'll be paginating.

[22:19] <Skarsnik> ctrl+f is bad too many noise you don't want between result

[22:19] <zengargoyle> yeah, thought a nice module count display of some sort, or graph of additions would be nice

[22:21] <zengargoyle> i never have a problem with ctrl-f.  so used to incremental search in vim etc.  just type until you find what you want.

[22:21] <Zoffix> cygx, I still couldn't reproduce. Can you try this page and see if the issue is still there? http://perl6.xtatik.org/

[22:22] <zengargoyle> still think that a web page should *rarely* auto-focus anything when loading.  breaks all keyboard navigation.

[22:22] <Zoffix> zengargoyle, tell it to google.com :P

[22:23] <zengargoyle> that's the rarely.  nothing on the page but the box.

[22:23] <zengargoyle> login boxes are ok too.

[22:23] <Zoffix> zengargoyle, but why do you want to use keyboard navigation?

[22:24] <Zoffix> Instead of searching.

[22:24] <Zoffix> And I mean during regular use and not you currently going there to check out how the new site looks :)

[22:24] <Zoffix> https://metacpan.org/ also focuses

[22:26] <zengargoyle> it focuses on the first page when you have nothing else to do.

[22:26] <zengargoyle> when you have results, it does not focus.

[22:26] <zengargoyle> hence space/pgup/pgdown work.

[22:26] <zengargoyle> if modules were an empty page with a search box... i wouldn't have as much ick about it.

[22:27] <cygx> Zoffix: the scrollbar's still there

[22:27] <Zoffix> crap

[22:27] <dalek> rakudo-star-daily: fa12ded | coke++ | log/ (3 files):

[22:27] <dalek> rakudo-star-daily: today (automated commit)

[22:27] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/fa12ded13c

[22:27] <Zoffix> cygx, what did you do to your Win7 that I can't reproduce the bug in mine? :)

[22:27] <cygx> if I zoom in so that a horizontal bar appears, the vertical one goes away ;)

[22:28] <Zoffix> Ven and you should form a club. I can't reproduce the issue they see either :P

[22:28] <cygx> Zoffix: nothing special, aside from setting classic themes

[22:28] * Zoffix did set classic theme

[22:28] <Zoffix> My firefox looks a bit different though. I have a "Firefox" button in top left

[22:29] *** n0tjack left
[22:29] <zengargoyle> horizontal bar is probably browser.  if my window is narrow enough it reflows and goes away, if it's wide it goes away.  if it's just the right width a horizontal scroll that does very little appears.

[22:29] <cygx> I'm using Classic Theme Restorer, though I would expect that doesn't affect the rendering area

[22:29] <cygx> but who knows

[22:29] <Zoffix> zengargoyle, No, that's not correct. It focuses on the first page because if you land there your most common use path is to search, not to scroll somewhere and if you land on a module page your most common use path would be to read documentation. It's all about anticipation of what most of the users visiting the page will do and trying to accomodate them

[22:31] *** muraiki left
[22:32] <Zoffix> BTW, this works too, if you want to link to search results: http://modules.perl6.org/#q=Test+meta

[22:33] <Zoffix> Eventually this will work too, but it's broken in a couple of places ATM http://modules.perl6.org/q/Test

[22:33] <cygx> what about de-focusing the search field on pg-up/pg-down and possibly space in cae of an empty field?

[22:33] <cygx> *case

[22:35] *** tokuhiro_ joined
[22:35] <timotimo> it seems like there's no benchmark in which our current rakudo is slower than the last release was

[22:35] <timotimo> i hope i didn't measure wrong.

[22:37] <leont> Was it possible to unpack a hash in a signature? The way you can with a list?

[22:37] <hoelzro> leont: you mean like my-sub(|%named-params)?

[22:37] <zengargoyle> should also de-focus on enter after search so you can scroll.

[22:37] <hoelzro> oh, you mean like sub my-sub(%params{$key1, $key2}) or something

[22:37] <leont> No like my-sub (@ [ $head, *@tail ])

[22:38] <leont> Yeah, something like that

[22:39] <cygx> m: sub foo(% ( :$k )) { say $k }; foo %( k => 42 )

[22:39] <camelia> rakudo-moar : OUTPUT«42␤»

[22:39] <hoelzro> oh, thanks cygx!

[22:39] *** tokuhiro_ left
[22:39] <hoelzro> I always forget that exact syntax

[22:40] <timotimo> http://t.h8.lv/p6bench/2015-11-19-release_10_11.html

[22:40] <dalek> modules.perl6.org: 3a2b7ac | (Zoffix Znet)++ | web/public/js/main.js:

[22:40] <dalek> modules.perl6.org: Defocus search box when pressed keys indicate user is attempting to scroll the page

[22:40] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/3a2b7ac549

[22:40] <Zoffix> cygx, zengargoyle ^

[22:40] <zengargoyle> m: my sub foo(% (:key($key), :hope($h))){ say "$key $h" }; foo(%(:key('test'),:ope('foo')));

[22:40] <camelia> rakudo-moar : OUTPUT«Unexpected named argument 'ope' passed in sub-signature␤  in sub foo at /tmp/bT4AUyJjPW:1␤  in block <unit> at /tmp/bT4AUyJjPW:1␤␤»

[22:40] <cygx> note that this gives an exact match - if you want to ignore additional keys, you need to add a *% (anonymous slurpy hash)

[22:40] <zengargoyle> m: my sub foo(% (:key($key), :hope($h))){ say "$key $h" }; foo(%(:key('test'),:hope('foo')));

[22:40] <camelia> rakudo-moar : OUTPUT«test foo␤»

[22:41] <cygx> Zoffix++

[22:43] *** espadrine joined
[22:43] <leont> cygx++ #thanks!

[22:43] * zengargoyle still wonders if there's a way to replace Linenoise with something more readline like.

[22:46] <timotimo> uh oh

[22:46] <cygx> zengargoyle: add rlwrap to the shellscript that invokes rakudo

[22:47] <timotimo> m: my ($s, $e, $n, $d) = 1, 2, 3, 4; say :10[$s, $e, $n, $d];

[22:47] <camelia> rakudo-moar : OUTPUT«1234␤»

[22:47] <timotimo> huh, what's gone wrong locally here

[22:47] <timotimo> oh, i see

[22:48] <timotimo> when did @$a_set start giving pairs instead of keys?

[22:48] <hoelzro> timotimo: what's 7e3d0b8?

[22:49] <hoelzro> zengargoyle: yes, it should be easy; I just haven't done it yet

[22:49] <hoelzro> DrForr++ wrote a readline module, so we just have to add the relevant bits to Perl6::Compiler

[22:49] <zengargoyle> cygx: yeah, was just perusing the rlwrap man page to see what sort of config it might take to make it approximate bash-like usage

[22:49] <zengargoyle> i.e. wrapping, history, external editing, etc.

[22:50] *** ifim left
[22:51] <timotimo> hoelzro: just a very recent commit

[22:51] <hoelzro> ah ha

[22:52] <zengargoyle> hoelzro: cool, didn't know if there was some technical reason for Linenoise or not.  guess the whole repl thing seema a prime candidate for post-xmas hackery.

[22:53] <timotimo> found a spec test that requires $a_set.list to be all Pair objects

[22:53] <hoelzro> zengargoyle: I picked linenoise because we used it at the time, and I had experience with the linenoise code base; readline has a fairly large API, and potential licensing issues

[22:53] <timotimo> late 2015-08 apparently

[22:53] <hoelzro> I may just be ignorant about that last part

[22:54] <cygx> hoelzro: no, you're correct

[22:54] <cygx> readline is GPL proper, not LGPL

[22:54] *** pippo joined
[22:55] <cygx> not an issue for us, but potentially for our 'customers' that want to re-ditribute

[22:55] <Hotkeys> > my @test = <a b c>

[22:55] <Hotkeys> [a b c]

[22:55] <Hotkeys> > @test.index('a')

[22:55] <Hotkeys> 0

[22:55] <Hotkeys> > @test.index('b')

[22:55] <Hotkeys> 2

[22:55] *** vendethiel left
[22:55] <Hotkeys> > @test.index('c')

[22:55] <Hotkeys> 4

[22:55] <Hotkeys> what is going on here

[22:55] <Hotkeys> is this what's supposed to happen?

[22:56] <timotimo> index is a method on strings

[22:56] <cygx> index operated on strings, I think

[22:56] <timotimo> so it stringifies the list

[22:56] <Hotkeys> ah

[22:56] <timotimo> m: @test = <a b c>; say @test.Str.perl

[22:56] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/apM2xlP5AN␤Variable '@test' is not declared␤at /tmp/apM2xlP5AN:1␤------> 3<BOL>7⏏5@test = <a b c>; say @test.Str.perl␤»

[22:56] <timotimo> oops

[22:56] <timotimo> m: my @test = <a b c>; say @test.Str.perl

[22:56] <camelia> rakudo-moar : OUTPUT«"a b c"␤»

[22:56] <Hotkeys> is there a list equivalent

[22:56] <timotimo> m: @test = <a b c>; say @test.first-index("a")

[22:56] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/SyRX1q5SaH␤Variable '@test' is not declared␤at /tmp/SyRX1q5SaH:1␤------> 3<BOL>7⏏5@test = <a b c>; say @test.first-index("␤»

[22:56] <timotimo> m: my @test = <a b c>; say @test.first-index("a")

[22:56] <camelia> rakudo-moar : OUTPUT«0␤»

[22:56] <timotimo> (god damn it)

[22:56] <timotimo> m: my @test = <a b c>; say @test.first-index("c")

[22:56] <camelia> rakudo-moar : OUTPUT«2␤»

[22:56] <timotimo> m: my @test = <a b c>; say @test.first-index(99)

[22:56] <camelia> rakudo-moar : OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '7⏏5a' (indicated by 7⏏)␤  in block <unit> at /tmp/8EmiWVyXtZ:1␤␤Actually thrown at:␤  in block <unit> at /tmp/8EmiWVyXtZ:1␤␤»

[22:56] <Hotkeys> ah

[22:57] <timotimo> ah, hehe.

[22:57] <hoelzro> I forget, which license is rakudo under? artistic?

[22:58] <Hotkeys> to kill actually

[22:58] <hoelzro> so in that case, we can't distribute Readline with Star?

[22:59] <timotimo> m)

[22:59] <Zoffix> .tell Ven could you look at http://modules.perl6.org/ and try pressing SPACE or Down Key. Does the same issue happen as on docs.perl6.org that you can't scroll?

[22:59] <yoleaux> Zoffix: I'll pass your message to Ven.

[23:00] <cygx> hoelzro: we can if all included modules come with licenses that are GPL-compatible

[23:00] *** spider-mario left
[23:00] <hoelzro> does that mean that code meant to be run on Star would have to be GPL'd too, though?

[23:01] <hoelzro> the GPL thing has always been a bit murky to me

[23:01] <cygx> hoelzro: I admit I'm a bit murkey on how exactly the GPL applies to non-compiled languages, but generally, no

[23:02] <cygx> otherwise all gcc-compiled programs would become GPL'd

[23:02] <hoelzro> oh, good point

[23:03] <hoelzro> since they're linked against any runtime stuff GCC provides

[23:03] <zengargoyle> but the runtime stuff is specially exempted.

[23:03] <hoelzro> oh, is it? by GCC or the GPL?

[23:03] <cygx> http://www.gnu.org/licenses/gcc-exception-3.1-faq.en.html

[23:03] <hoelzro> wow

[23:03] <hoelzro> TIL

[23:03] <grondilu> hoelzro: funny you guys are talking about the license, it so happens that I was looking at http://www.quickperm.org/ and was about to mail the author and ask for reuse authorization.  So I had to mention to him the licenses rakudo is published with.

[23:04] <hoelzro> zengargoyle: if you want to help with the Readline + Rakudo stuff, let me know; I can point you in the right direction

[23:05] <zengargoyle> hoelzro: i've got to figure out nqp/rakudo stuff first and fix POD =data sections (and maybe =finish). :)

[23:05] <hoelzro> zengargoyle: let me know if you would like help on that too; I did a bunch of stuff for S26 last summer

[23:05] * hoelzro is trying to get more involved with Rakudo/Moar dev

[23:05] <zengargoyle> which i'm currently stuck at.  and slogging through that old 2day course.

[23:06] <hoelzro> zengargoyle: what in particular are you stuck on? do you have a branch I can look at?

[23:06] <cygx> another relevant read: http://www.gnu.org/licenses/gpl-faq.html#IfInterpreterIsGPL

[23:06] <zengargoyle> basically, i can't figure out whether or not (or how) i can make a Perl 6-ish object and bind it into $*UNIT

[23:06] <hoelzro> cygx++ # information

[23:07] <hoelzro> zengargoyle: as opposed to a lexpad?

[23:07] <zengargoyle> i have half of the =data section gathered up into a list, and i can bind that list to $=data, but i need to do some work on the list first.

[23:10] <zengargoyle> i know how to do it in Perl, but not really in nqp.  with all the serialization and wrapping and compile_time_value stuff...

[23:10] <zengargoyle> https://gist.github.com/zengargoyle/18152f52ffce7fc03960

[23:10] *** camelia left
[23:10] <zengargoyle> i need $=data to be a Pod::Data object with Positional and Associative access initialized from the $*POD_BLOCKS_DATA.

[23:10] <zengargoyle> i can't make BUILD work.

[23:10] <zengargoyle> :(

[23:11] <hoelzro> =(

[23:11] <hoelzro> I can try to take a look at it

[23:11] <hoelzro> ooc, which TZ are you in?

[23:11] <Zoffix> cygx, well, I give up (at least for now) :) I can't reproduce the issue locally and constantly bugging you to test a fix is annoying :)

[23:11] <hoelzro> I'm UTC-6

[23:11] <dalek> perl6-bench: f4abc8e | timotimo++ | perl6/send-more-money-subs:

[23:11] <dalek> perl6-bench: at some point, Set.list became a list of Pair objects

[23:11] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/f4abc8e01f

[23:11] <dalek> perl6-bench: ace2bf8 | timotimo++ | minibenchmarks.pl:

[23:11] <dalek> perl6-bench: pi_sequential_iteration requires a SCALE parameter

[23:11] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/ace2bf86fd

[23:11] <dalek> perl6-bench: 67c5ae9 | timotimo++ | perl6/ (2 files):

[23:11] <dalek> perl6-bench: modernize insertion-sort and merge-sort

[23:11] <dalek> perl6-bench: 

[23:11] <dalek> perl6-bench: throws out feed-based construction in a loop for just xx,

[23:11] <dalek> perl6-bench: reformat with only spaces, no tabs mixed with spaces,

[23:11] <timotimo> i'm in UTF-8

[23:11] <dalek> perl6-bench: Slip a list properly in insertion-sort.

[23:11] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/67c5ae973b

[23:11] *** camelia joined
[23:11] <zengargoyle> what, -8 now?  PST, best coast US.

[23:12] <diakopter___> eww

[23:12] <hoelzro> I had never heard "best coast" until a few weeks ago

[23:12] <Zoffix> Nothing obvious jumps out at me. And I know you said overflow fixes it, but we can't use that there, because overflow is there for mobiles... and I think that's what's causing the issue :) I think I saw something similar earlier and it's an interaction with the DataTAbles plugins. I'll take a look later

[23:12] <timotimo> this fixes the 4 benchmarks that were missing from my last run

[23:12] <diakopter___> more like "left coast"

[23:12] <hoelzro> I'm guessing those of us in the midwest are spared that =)

[23:12] <timotimo> lest coast?

[23:12] <Zoffix> Time for some Fallout 4 :P

[23:12] <Zoffix> \o night all

[23:12] <timotimo> good luck, Zoffix! :)

[23:12] <hoelzro> zengargoyle: does that gist go with a rakudo change?

[23:12] *** kjs_ left
[23:12] <hoelzro> Zoffix: night, have fun!

[23:12] *** Zoffix left
[23:12] *** ChanServ sets mode: +v camelia

[23:14] <cygx> also clocks out o/

[23:14] <hoelzro> see you cygx 

[23:14] * timotimo re-runs the benchmarks to get the extra results

[23:14] <timotimo> hopefully in favor of our newest rakudo :3

[23:14] <zengargoyle> that's just my hacking on a local branch... some changes in Grammar/Actions to make Pod::Block::Data nodes and that bit in World trying to assemble them.

[23:14] *** cygx left
[23:15] *** lsm-desktop joined
[23:16] <zengargoyle> i had really hoped i could just do mumble('$=data', Pod::Data.new($*POD_BLOCKS_DATA)) and have it magically work.

[23:16] <hoelzro> it's the serialization bits that trip you up?

[23:17] <zengargoyle> seems so.  various trials get me "can't stringify blah" or no method Numeric or other unhelpful error messages.

[23:18] <zengargoyle> i think i don't quite get the border between nqp things and perl things.

[23:18] <hoelzro> it's a pretty blurry line

[23:18] <hoelzro> especially in Rakudo land

[23:18] <timotimo> yeah, also because things get hllized automatically at the border ... well, sometimes

[23:20] <zengargoyle> it's just a bit grrr that i can get to being able to access the list-of-things from the Perl side but can't quite figure out how to munge them into a more complex thing.

[23:24] <hoelzro> I think that's one of the bigger barriers to entry in working on rakudo

[23:24] <zengargoyle> prolly need to finish that workshop material and look at some of the other global-like things that are a bit more complicated like $*KERNEL

[23:24] <hoelzro> compile vs run time and nqp vs perl6

[23:25] <zengargoyle> and might have to implement {} and [] stuff as methods instead of trying to use the magic ... handles<> type of stuff.

[23:28] <zengargoyle> on the plus side, it wasn't that bad adding to Grammar/Actions to support gathering up the =data sections.

[23:29] *** kilofoot joined
[23:32] *** BenGoldberg joined
[23:35] <kilofoot> p6: $_ = 'file.txt'; my $name; say $name if /^ $name = [.+] '.txt' $/;

[23:35] <camelia> rakudo-moar: ( no output )

[23:37] <timotimo> m: my $name; say "file.txt" ~~ /^ $name=[.+] '.txt' $/; say $name

[23:37] <camelia> rakudo-moar : OUTPUT«Nil␤(Any)␤»

[23:37] <timotimo> m:say "file.txt" ~~ /^ $<name>=[.+] '.txt' $/; say $<name>

[23:37] <timotimo> m: say "file.txt" ~~ /^ $<name>=[.+] '.txt' $/; say $<name>

[23:37] <camelia> rakudo-moar : OUTPUT«｢file.txt｣␤ name => ｢file｣␤｢file｣␤»

[23:37] *** BenGoldberg left
[23:37] <timotimo> m: say "file.txt" ~~ /^ $<name>=[.+] '.txt' $/; say $<name>.Str

[23:37] <camelia> rakudo-moar : OUTPUT«｢file.txt｣␤ name => ｢file｣␤file␤»

[23:37] *** Peter_R left
[23:38] *** pmurias_ left
[23:39] *** BenGoldberg joined
[23:40] <kilofoot> timotimo: I want to capture to outer lexical variable

[23:40] <geraud> hum... URI broke.

[23:42] <jdv79> :(

[23:42] <jdv79> how so?

[23:43] <timotimo> kilofoot: i don't actually know if that works, i've never tried it

[23:44] <jdv79> i think i am catching a cold.  too much cokd rainy windy weather in the uk.

[23:44] <geraud> jdv79: disclaimer : I can't do Perl 6 so, I'm just good at reading error messages and making intuition-backed assumptions (ie. stupid guesses) but :

[23:44] <jdv79> *cold

[23:45] <geraud> it looks like jnthn's merge of pmurias 'excptions on wrong adverbs' about 8hrs ago broke a grammar include on URI.

[23:45] <jdv79> ... swollen glands ...

[23:45] <pink_mist> jdv79: if you don't want cold windy rainy weather, you really are in the wrong place, aren't you? :P

[23:45] <pink_mist> jdv79: that said: damn, sucks :/

[23:45] <jdv79> yup.  i was forced here.

[23:46] <geraud> error message says : 

[23:46] <geraud> ===SORRY!=== Error while compiling /SOME_PATH/.panda-work/1447976032_1/lib/IETF/RFC_Grammar/URI.pm

[23:46] <geraud> Cannot use adverb version on a type name (only 'ver' and 'auth' are understood)

[23:46] <geraud> at /SOMEPATH/.panda-work/1447976032_1/lib/IETF/RFC_Grammar/URI.pm:11

[23:46] <geraud> ------> version<0.02> is IETF::RFC_Grammar::IPv6⏏;

[23:46] <jdv79> geraud: ew

[23:46] <timotimo> yeah, it says "version", but it should be "ver"

[23:47] <timotimo> geraud: ^

[23:47] <jdv79> bug it please

[23:47] * timotimo goes to bed

[23:47] <hoelzro> night timotimo 

[23:47] <jdv79> nitey nite

[23:47] <Mouq> kilofoot: The spec says that's supposed to be allowed with $OUTER::name = …, but it's NYI

[23:47] <Mouq> s/spec/design documents/

[23:50] *** rurban left
[23:52] * BenGoldberg wonders whether that could be imlementable by secretly giving each lexical a "real" name like $0::name, $1::name, $2::name, where a bare $name is translated to the highest numbered container visible from that scope.

[23:52] <BenGoldberg> $OUTER::name would then be done by subtracting 1 from whatever $name would be aliased to.

[23:54] <BenGoldberg> s/"real"/secret (internal)/

[23:55] *** znpy left
[23:55] *** sprocket left
[23:56] *** espadrine left
[23:58] <mst> BenGoldberg: amusingly, that's -exactly- how lexical scoping works in the VM I'm currently building

[23:59] *** skids joined
[23:59] *** kilofoot left
