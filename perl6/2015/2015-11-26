[00:00] <RabidGravy> I can only barely read them to be honest

[00:00] <uruwi> why is there a ↉

[00:00] *** FROGGS joined
[00:00] <AlexDaniel> m: say ⅟

[00:00] <camelia> rakudo-moar : OUTPUT«1␤»

[00:00] <Hotkeys> Yeah at like 12pt Ican barely read the fractions

[00:00] <Hotkeys> with my laptop on my lap

[00:01] <AlexDaniel> Time to get glasses? :)

[00:01] <Hotkeys> sorry 10pt

[00:01] <Hotkeys> consolas

[00:01] <AlexDaniel> actually, I think that some of these fractions were added earlier than others: ½

[00:01] <uruwi> http://puu.sh/lyPO1/5800660bd2.png using IceChat 9 and setting the font to VL Gothic

[00:01] <Hotkeys> because I couldn't be bothered to get another font

[00:02] <Hotkeys> that text looks strange

[00:02] <AlexDaniel> unifont?

[00:02] <uruwi> ^

[00:02] <uruwi> though it's bitmap

[00:02] <uruwi> Not the best if you can't handle aliasing

[00:03] <Hotkeys> I do like smooth looking type

[00:03] *** rigsby left
[00:03] <hahainternet> the nice benefit of having these supported in p6 now

[00:03] <AlexDaniel> Hotkeys: you might want to have it installed anyway

[00:03] <hahainternet> is that no 'coding font' maker has any excuse anymore :)

[00:03] *** rigsby joined
[00:03] *** leont left
[00:03] <Hotkeys> I'm pretty sure I've tried having a just-in-case fallback font on windows for strange unicode

[00:03] <Hotkeys> and hexchat refuses to use it

[00:03] <AlexDaniel> so that you have a fallback for some rare characters :)

[00:04] <uruwi> 미

[00:04] <Hotkeys> are there any better windows irc clients

[00:04] <uruwi> I personally use IceChat

[00:05] *** RabidGravy left
[00:05] <uruwi> Seems to display that Hangul character fine, despite not having it in the default font

[00:05] <uruwi> 미마

[00:05] <Hotkeys> icechat has windows in the window

[00:05] <Hotkeys> what is this nonsense

[00:05] <Zoffix> m: say 2³²

[00:05] <camelia> rakudo-moar : OUTPUT«4294967296␤»

[00:05] <Zoffix> w00t!

[00:06] <AlexDaniel> m: say 2³2

[00:06] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/QAFEHhKsjS␤Two terms in a row␤at /tmp/QAFEHhKsjS:1␤------> 3say 2³7⏏052␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modif…»

[00:06] <AlexDaniel> m: say ²

[00:06] <camelia> rakudo-moar : OUTPUT«2␤»

[00:06] <AlexDaniel> m: say ³²

[00:06] <camelia> rakudo-moar : OUTPUT«9␤»

[00:06] <AlexDaniel> well…

[00:07] <uruwi> Well, well, well.

[00:07] <AlexDaniel> I don't even know what should happen in such case…

[00:07] <Hotkeys> I mean without a number to exponentiate it's just a number on its own

[00:07] <uruwi> Syntax error.

[00:08] <uruwi> It'll cause confusion if they're treated like ordinary digits.

[00:08] <AlexDaniel> or perhaps Perl 6 Obfuscated Code Competition should happen!

[00:08] <Hotkeys> lol

[00:08] <Hotkeys> using only subscript ints

[00:08] <uruwi> So I propose reserving those superscript ints for exponentiation

[00:08] <psch> m: say postfix:<ⁿ>(Mu, 3)

[00:08] <camelia> rakudo-moar : OUTPUT«Cannot call postfix:<ⁿ>(Mu, Int); none of these signatures match:␤    (\a, \b)␤  in block <unit> at /tmp/CjuTah_RuJ:1␤␤»

[00:08] <psch> m: say postfix:<ⁿ>(Any, 3)

[00:08] <camelia> rakudo-moar : OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/yyBN7RCOEZ:1␤0␤»

[00:08] <dalek> ecosystem: bdfb17e | (Zoffix Znet)++ | META.list:

[00:08] <dalek> ecosystem: Remove Operators::Math::Superscripts [obsoleted by addition to core]

[00:08] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/bdfb17e1ad

[00:09] <Hotkeys> heh

[00:09] *** Upasaka left
[00:09] <Zoffix> :)

[00:09] <Hotkeys> m: say ²³²

[00:09] <camelia> rakudo-moar : OUTPUT«4294967296␤»

[00:09] <AlexDaniel> well, that's probably LHF but I'll still submit it

[00:09] <uruwi> m: say ²⁺³

[00:09] <camelia> rakudo-moar : OUTPUT«8␤»

[00:09] <Zoffix> m: say ²³²²³²²³²²³²

[00:09] <camelia> rakudo-moar : OUTPUT«0␤»

[00:09] <Zoffix> m: say 2*(²⁺³)

[00:09] <camelia> rakudo-moar : OUTPUT«16␤»

[00:10] <Zoffix> .oO( I wonder if there are superscript brackets )

[00:10] <psch> not sure that's particularly LHF...

[00:10] <Hotkeys> ⁽⁾

[00:10] <Hotkeys> yep

[00:10] <uruwi> m: say ⁽²⁾

[00:10] <camelia> rakudo-moar : OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at /tmp/r7lBW9ikH1:1␤------> 3say7⏏5 ⁽²⁾␤Bogus postfix␤at /tmp/r7lBW9ikH1:1␤------> 3say 7⏏5⁽²⁾␤    expecting any of:␤        infix␤        infix stopper␤       …»

[00:10] <Zoffix> m: say 2*⁽²⁺³⁾

[00:10] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/P4Sz9lOJbe␤Missing required term after infix␤at /tmp/P4Sz9lOJbe:1␤------> 3say 2*7⏏5⁽²⁺³⁾␤    expecting any of:␤        prefix␤        term␤»

[00:10] <uruwi> Don't work, thoug

[00:10] <Zoffix> m: say 2⁽²⁺³⁾

[00:10] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/5PyjsnbmTs␤Bogus postfix␤at /tmp/5PyjsnbmTs:1␤------> 3say 27⏏5⁽²⁺³⁾␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement m…»

[00:10] <uruwi> Let's add them as alternatives to regular brackets!

[00:10] <Hotkeys> we can use them for the superliteral quoting

[00:11] <uruwi> Example?

[00:11] <Hotkeys> sorry just literals

[00:12] <Hotkeys> there are string with interpretation like "Answer is $foo"

[00:12] <Hotkeys> then string w just escaping using single quotes

[00:12] <Hotkeys> superscript brackets could be used for literal strings

[00:12] <Hotkeys> no escaping or interpretation

[00:12] <Hotkeys> s/interpretation/interpolation/

[00:12] *** raiph left
[00:13] *** Upasaka joined
[00:13] <Hotkeys> I think you already can as long as you also have the Q

[00:14] <Hotkeys> m: say Q⁽$hello wo\rld⁾;

[00:14] <camelia> rakudo-moar : OUTPUT«$hello wo\rld␤»

[00:14] <Hotkeys> :D

[00:15] <Zoffix> :-0

[00:15] *** telex left
[00:15] <AlexDaniel> m: my \n = 8; say 2ⁿ

[00:15] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/uLpBn7hTyV␤Confused␤at /tmp/uLpBn7hTyV:1␤------> 3my \n = 8; say 27⏏5ⁿ␤»

[00:15] <Hotkeys> no variables just literals

[00:16] <AlexDaniel> Hotkeys: perhaps that's what Perl 6 should say…

[00:16] *** telex joined
[00:17] <Hotkeys> I'm sure either a nice error will be put in or variables will be implemented

[00:17] <Hotkeys> It was only just put in like an hour ago

[00:17] <uruwi> For i and n, though.

[00:17] <uruwi> Too bad there are no superscript dollar signs

[00:18] <Hotkeys> yeah

[00:19] <uruwi> and

[00:19] <AlexDaniel> yeahᵎ

[00:19] <uruwi> DARN NO SUPERSCRIPT NEGATIVE ONE

[00:19] <uruwi> (said the person who tried writing a TI-Basic book)

[00:19] <Hotkeys> m: say 2⁻¹

[00:19] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/qJu5WwCBFK␤Bogus postfix␤at /tmp/qJu5WwCBFK:1␤------> 3say 27⏏5⁻¹␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier…»

[00:19] <Hotkeys> I saw it earlier

[00:20] <Zoffix> m: 2¯²

[00:20] <camelia> rakudo-moar : ( no output )

[00:20] <Zoffix> m: say 2¯²

[00:20] <camelia> rakudo-moar : OUTPUT«0.25␤»

[00:20] <uruwi> m: say 2¯¹

[00:20] <camelia> rakudo-moar : OUTPUT«0.5␤»

[00:20] <AlexDaniel> .u ⁻

[00:20] <yoleaux> U+207B SUPERSCRIPT MINUS [Sm] (⁻)

[00:20] <Hotkeys> m: say 2¯¹

[00:20] <camelia> rakudo-moar : OUTPUT«0.5␤»

[00:20] <AlexDaniel> .u ¯

[00:20] <yoleaux> U+00AF MACRON [Sk] (¯)

[00:20] <uruwi> .u ¯

[00:20] <yoleaux> U+00AF MACRON [Sk] (¯)

[00:20] * Zoffix is SMRT

[00:20] <uruwi> Yep, better support both of them

[00:20] <Zoffix> .u ¯

[00:20] <yoleaux> U+00AF MACRON [Sk] (¯)

[00:20] <Hotkeys> how do you do the macron

[00:20] <Zoffix> this is what I get with Compose -> ^-

[00:21] <AlexDaniel> .u ⁻

[00:21] <yoleaux> U+207B SUPERSCRIPT MINUS [Sm] (⁻)

[00:21] <AlexDaniel> .u ¯

[00:21] <yoleaux> U+00AF MACRON [Sk] (¯)

[00:21] <Hotkeys> weird

[00:21] <Zoffix> CTRL+SHIFT+u -> AF also works

[00:21] <Hotkeys> I get superscript minus

[00:21] <Hotkeys> although

[00:21] <Hotkeys> this is wincompose

[00:21] <AlexDaniel> Okay, macron is Compose key, ^, -

[00:21] *** FROGGS left
[00:21] *** lichtkind left
[00:22] <Hotkeys> ah

[00:22] <AlexDaniel> but ^- is superscript minus…

[00:22] <Hotkeys> I got it

[00:22] <Hotkeys> compose + _ + _ or compose + ^ + _

[00:22] <uruwi> ¯

[00:22] <uruwi> Yep

[00:22] <Hotkeys> er

[00:22] <Hotkeys> the second one is _ + ^

[00:22] <Zoffix> .u ¯

[00:22] <yoleaux> U+00AF MACRON [Sk] (¯)

[00:23] <Hotkeys> m: say 2¯³

[00:23] <camelia> rakudo-moar : OUTPUT«0.125␤»

[00:23] <Zoffix> This is so awesome :)

[00:23] <Zoffix> m: say (2¯³)¯³

[00:23] <camelia> rakudo-moar : OUTPUT«512␤»

[00:24] <Zoffix> This works too :O

[00:24] <uruwi> .tell TimToady Make the ⁿ operator take ⁻ (superscript minus) as well as ¯ (macron) for negative powers.

[00:24] <yoleaux> uruwi: I'll pass your message to TimToady.

[00:24] <AlexDaniel> honestly, I have no idea why macron is supported…

[00:24] <uruwi> Maybe it's a typo

[00:24] <Zoffix> wtf is a "macron" anyway?

[00:24] <Hotkeys> it's a diacritic

[00:24] <uruwi> A diacritic

[00:24] <Hotkeys> diacritical mark*

[00:24] <Zoffix> hm

[00:25] <Hotkeys> like Ē

[00:25] <uruwi> as in ā

[00:25] <Zoffix> Right

[00:25] <Hotkeys> or ā

[00:25] <hahainternet> might be my fault, those are the examples i gave

[00:25] <AlexDaniel> m: say 2⁺⁸

[00:25] <camelia> rakudo-moar : OUTPUT«256␤»

[00:25] <hahainternet> i used macron by mistake

[00:25] <AlexDaniel> okay, plus works

[00:25] <Hotkeys> lol

[00:25] <AlexDaniel> hahainternet: I'm glad that this feature is implemented!

[00:25] <AlexDaniel> hahainternet: thanks!

[00:26] <Hotkeys> .u ¯

[00:26] <yoleaux> ...

[00:26] <Hotkeys> ...

[00:26] <hahainternet> AlexDaniel: it is very cool

[00:26] <Hotkeys> m: say "¯".uniname

[00:26] <camelia> rakudo-moar : OUTPUT«MACRON␤»

[00:26] <Hotkeys> yeah

[00:26] <hahainternet> proper unicode adoption is only going to drive better unicode use

[00:26] <Hotkeys> it's just hardcoded in there

[00:26] <Hotkeys> $power := -$power if $<sign> eq '¯'

[00:27] <AlexDaniel> .tell TimToady or just drop macron…

[00:27] <yoleaux> AlexDaniel: I'll pass your message to TimToady.

[00:27] <Zoffix> hahainternet, TBH Compost ^6 gives me ⁶ so when I pressed Compose ^- and got a ¯, I expected it to be a minus. I think we should still support is as such

[00:27] <Zoffix> Noooo

[00:27] <Zoffix> .tell TimToady no don't drop macron. TBH Compost ^6 gives me ⁶ so when I pressed Compose ^-  and got a ¯, I expected it to be a minus. I think we should still support is as such

[00:27] <yoleaux> Zoffix: I'll pass your message to TimToady.

[00:27] <Zoffix> .botsnack

[00:27] <yoleaux> :D

[00:27] <synbot6> om nom nom

[00:27] <uruwi> Change your compose key configuration.

[00:27] <hahainternet> Zoffix: that is what made me do it

[00:27] <Zoffix> uruwi, it's default.

[00:27] <Hotkeys> We could just support both, no?

[00:27] <hahainternet> and uruwi it's more a matter for distributors and the like to manage

[00:27] <hahainternet> we should just support whatever makes sense

[00:28] <AlexDaniel> Zoffix: why don't you fix your keyboard instead?

[00:28] <Zoffix> AlexDaniel, it's not broken.

[00:28] <hahainternet> and a diacritic on its own isn't valid either i don't think

[00:28] <uruwi> It's a standalone diacritic.

[00:28] <hahainternet> so i'm ambivalent

[00:28] <Hotkeys> it technically isn't the combining macron

[00:28] <Hotkeys> just a macron

[00:28] <uruwi> It wouldn't make sense for a combining one.

[00:28] <Hotkeys> so it can be on its own

[00:28] <hahainternet> what i mean is, as part of a number or variable

[00:28] <hahainternet> so it remains unambiguous, i think

[00:29] <Hotkeys> ̄

[00:29] *** FROGGS joined
[00:29] <AlexDaniel> still it is not a minus…

[00:29] <AlexDaniel> m: say 2 ➕ 5

[00:29] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/S8UG1kkqqr␤Confused␤at /tmp/S8UG1kkqqr:1␤------> 3say 27⏏5 ➕ 5␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤  …»

[00:29] *** raiph joined
[00:29] <AlexDaniel> but this is a plus sign!

[00:29] <uruwi> m: say "t̋".chars

[00:29] <camelia> rakudo-moar : OUTPUT«1␤»

[00:29] <hahainternet> AlexDaniel: i see your point for sure

[00:29] <Hotkeys> m: say "̄̄̄̄̄̄̄̄"

[00:29] <camelia> rakudo-moar : OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at /tmp/7XwscKWzrv:1␤------> 3say7⏏5 "̄̄̄̄̄̄̄̄"␤Bogus postfix␤at /tmp/7XwscKWzrv:1␤------> 3say 7⏏5"̄̄̄̄̄̄̄̄"␤    expecting any of:␤        infix␤        inf…»

[00:29] <hahainternet> oh good point Hotkeys 

[00:29] <Hotkeys> I tried to put combining macrons in there

[00:29] <Hotkeys> kek

[00:29] <hahainternet> e and pi also valid exponents

[00:29] <Zoffix> Alright :) I better leave before the Great Unicode Fight starts :)

[00:30] <hahainternet> well i'm just happy there's some support in there

[00:30] *** Zoffix left
[00:30] <Hotkeys> is there a superscript pi?

[00:30] <hahainternet> what you just typed ;)

[00:30] <uruwi> No

[00:30] <hahainternet> but no, you just made me think

[00:31] <uruwi> What's the point

[00:31] <uruwi> m: say "く̥̣̯て̯̣͏͜り̃す̣̥　（ドア）".chars

[00:31] <camelia> rakudo-moar : OUTPUT«9␤»

[00:31] <hahainternet> uruwi: that's how things are written in mathematics?

[00:31] <hahainternet> if only it was as useful as latex :(

[00:31] <uruwi> Who raises numbers to the power of pi

[00:31] <AlexDaniel> only subscript one? ᵨ

[00:31] <AlexDaniel> .u ᵨ

[00:31] <yoleaux> U+1D68 GREEK SUBSCRIPT SMALL LETTER RHO [Lm] (ᵨ)

[00:31] <Hotkeys> let's implement latex parsing in perl 6

[00:31] <Hotkeys> :^)

[00:31] <uruwi> Maybe as a module

[00:32] <Hotkeys> all our sourcecode will be pdfs

[00:32] <uruwi> It's a bit too insane for core ;P

[00:32] <Hotkeys> with their own source code

[00:32] <Hotkeys> in plaintext latex

[00:32] <Hotkeys> the former for reading and the latter for parsing etc

[00:33] <uruwi> And don't forget the IDE that combines all these

[00:33] <hahainternet> :D

[00:33] <Hotkeys> yes of course

[00:33] <hahainternet> i have to write my new CV in latex later

[00:33] <hahainternet> there's a certain level of slightly masochistic enjoyment

[00:33] <Hotkeys> write it in the upcoming PerlTeX instead

[00:33] <hahainternet> in writing in latex

[00:33] <Hotkeys> :p

[00:33] <uruwi> I actually enjoy it

[00:34] <Hotkeys> if we can have lualatex why not perltex

[00:34] <Hotkeys> Yeah I write all of my papers in latex

[00:34] <uruwi> はい　はい　はい

[00:34] <Hotkeys> I used to do lab reports too but that was highschool and I don't have chemistry or physics anymore

[00:34] <Hotkeys> because uni

[00:34] <hahainternet> places that accept CVs only in .doc format

[00:34] <hahainternet> are awful

[00:35] <hahainternet> the worst thing is when they reformat CVs to send to you for interviews

[00:35] <hahainternet> the formatting of the CV tells me as much about the candidate as the contents :(

[00:35] <AlexDaniel> .oO( la6ex )

[00:36] <AlexDaniel> .oO( pronounced as lasex? )

[00:36] <geekosaur> lasix!

[00:36] <AlexDaniel> yeah, that's probably more appropriate

[00:37] <Hotkeys> but the tex part of latex is pronounced like tek

[00:37] <uruwi> lasick

[00:37] <uruwi> lasik

[00:37] <uruwi> 👀

[00:38] <Hotkeys> I think lasik is already taken

[00:38] <Hotkeys> by the laser eye surgery thing

[00:38] <Hotkeys> I like when subsequent lines match in length

[00:39] <uruwi> You ruined it

[00:39] <Hotkeys> I know

[00:39] <Hotkeys> : )

[00:39] <AlexDaniel> ha

[00:39] <uruwi> :) : )

[00:39] <Hotkeys> :    )

[00:39] <Hotkeys> haha

[00:39] <uruwi> hahaha

[00:40] <uruwi> I can!

[00:40] <uruwi> Say 1!

[00:40] <uruwi> More!!

[00:40] <uruwi> Ha!!!!

[00:40] <AlexDaniel> but yeah, it is also fun when the line is constantly growing

[00:40] <uruwi> Than!!

[00:40] <uruwi> You!!!

[00:40] <Hotkeys> cheats

[00:40] <uruwi> Cunning?

[00:40] <uruwi> カニング

[00:40] <Hotkeys> ouch

[00:41] <uruwi> But, anyway, hence the eyes.

[00:41] <Hotkeys> talking about euclids elements in philosophy class

[00:41] <Hotkeys> this is my jam

[00:44] *** uruwi is now known as uruwi[A]

[00:45] <TimToady> oops, I thought it was just a font glitch :)

[00:45] <yoleaux> 00:24Z <uruwi> TimToady: Make the ⁿ operator take ⁻ (superscript minus) as well as ¯ (macron) for negative powers.

[00:45] <yoleaux> 00:27Z <AlexDaniel> TimToady: or just drop macron…

[00:45] <yoleaux> 00:27Z <Zoffix> TimToady: no don't drop macron. TBH Compost ^6 gives me ⁶ so when I pressed Compose ^-  and got a ¯, I expected it to be a minus. I think we should still support is as such

[00:46] *** Actualeyes left
[00:47] <dalek> rakudo/nom: 05e94d7 | TimToady++ | src/Perl6/ (2 files):

[00:47] <dalek> rakudo/nom: allow superscript minus

[00:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/05e94d72c4

[00:48] *** FROGGS left
[00:48] <AlexDaniel> m: say 2¯1

[00:48] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/lWfehXHTvt␤Bogus postfix␤at /tmp/lWfehXHTvt:1␤------> 3say 27⏏5¯1␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤…»

[00:48] <hahainternet> TimToady: when you say 'no variables', you mean that say $x² is fine, but not say 2^$x (or equiv) right?

[00:48] <hahainternet> also did you make a decision on subscripts in variable names?

[00:49] <hahainternet> no pressure on either of those of course, just wanted to be clear in my mind

[00:49] <AlexDaniel> m: say 2¯¹

[00:49] <camelia> rakudo-moar : OUTPUT«0.5␤»

[00:49] <AlexDaniel> m: say 2¯¯¹

[00:49] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/Zc6HkETUlC␤Bogus postfix␤at /tmp/Zc6HkETUlC:1␤------> 3say 27⏏5¯¯¹␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier…»

[00:49] *** khw left
[00:49] <AlexDaniel> m: say 2¯⁺¹

[00:49] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/WwtQif1eCL␤Bogus postfix␤at /tmp/WwtQif1eCL:1␤------> 3say 27⏏5¯⁺¹␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifie…»

[00:49] <AlexDaniel> m: say 2¯

[00:49] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/DYabivpKiX␤Bogus postfix␤at /tmp/DYabivpKiX:1␤------> 3say 27⏏5¯␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤ …»

[00:50] <AlexDaniel> okay-okay

[00:50] <uruwi[A]> m: say 2⁻¹

[00:50] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/IaMrJXG083␤Bogus postfix␤at /tmp/IaMrJXG083:1␤------> 3say 27⏏5⁻¹␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier…»

[00:50] <AlexDaniel> uruwi[A]: not yet

[00:50] <TimToady> another minute or so

[00:51] <uruwi[A]> Also, any decision on standalone superscripts?

[00:51] <TimToady> m: say 2⁻¹

[00:51] <camelia> rakudo-moar : OUTPUT«0.5␤»

[00:51] <AlexDaniel> m: say 2²⁻¹

[00:51] <camelia> rakudo-moar : OUTPUT«0.25␤»

[00:51] <AlexDaniel> m: say 2²⁻⁺¹

[00:51] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/8p29S7P2Ot␤Bogus postfix␤at /tmp/8p29S7P2Ot:1␤------> 3say 2²7⏏5⁻⁺¹␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modi…»

[00:51] <TimToady> well, standalone superscripts fall under the :No rule

[00:51] <AlexDaniel> m: say 2⁺⁺¹

[00:51] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/IS584xfYsi␤Bogus postfix␤at /tmp/IS584xfYsi:1␤------> 3say 27⏏5⁺⁺¹␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifi…»

[00:52] <TimToady> only a single + or - is allowed

[00:52] <uruwi[A]> any plans to change?

[00:52] *** FROGGS joined
[00:52] <TimToady> no, it's not an expression

[00:52] <TimToady> it's just a literal

[00:53] <TimToady> Unicode doesn't really support anything beyond that very well

[00:54] <TimToady> we don't have raised $ for instance

[00:54] <TimToady> it's not really a place we can be productive

[00:55] <TimToady> hahainternet: subscripts don't tickle my fancy, but modules will happen...

[00:55] <hahainternet> TimToady: interesting, i wouldn't have thought they'd be too contentious

[00:55] <hahainternet> if others express an interest, would it change your mind?

[00:55] *** Hazim joined
[00:55] <Hazim> Hello, 

[00:56] <TimToady> hahainternet: I have to say "no", so as not to encourage rabble rousing. :P

[00:56] <uruwi[A]> Hazim, hi

[00:56] <Mouq> hahainternet: it gets silly quick :P

[00:56] <hahainternet> aww, well i'd like to leave it in your mind somewhere as a feature that shouldn't be too confusing, x_a is common enough notation

[00:56] <TimToady> blech

[00:56] <hahainternet> but obviously, no pressure :)

[00:57] <TimToady> I have resisted the urge to turn Perl 6 into many languages, so I guess I'll have to add TeX to the list...

[00:57] <AlexDaniel> hahainternet: yet superscripts are doing ** magic yet you want subscript to mean nothing? :)

[00:58] <hahainternet> AlexDaniel: no i just want it to be a permitted character in variable names

[00:58] <hahainternet> so you could have $x₁ and $x₂

[00:58] <Hotkeys> seems reasonable

[00:58] <hahainternet> both distinct, anyway it doesn't matter

[00:58] <hahainternet> it's up to TimToady and i don't want to push

[00:58] <uruwi[A]> I'd probably use $x1 and $x2 anyway

[00:58] <hahainternet> although i would like to know how to get the equiv of .u inside p6

[00:58] <hahainternet> i know about uninames and unival

[00:58] <AlexDaniel> well yeah… Still I'd say that $x₁ is $x[1] …

[00:58] <hahainternet> is there a nice succinct unicode description option?

[00:58] <hahainternet> nice use of … there AlexDaniel :)

[00:59] <Hotkeys> lol

[00:59] <Hotkeys> imagine

[00:59] <Hazim> Hello I lIke To Ask if there is a function to manage "picture, Sounds, Hardware" or talk to Hardware directly from perl 6

[00:59] <Hotkeys> $x₁…$x₂

[00:59] <hahainternet> Hotkeys: beautiful

[00:59] <Hotkeys> imagine

[01:00] <TimToady> Hazim: your best bet would be to use NativeCall to a C library

[01:00] <Hotkeys> $x₁+$x₂…$xₙ

[01:01] <Hotkeys> $x₁+$x₂…$xₙ₋₁+$xₙ I suppose

[01:01] <AlexDaniel> where ₙ could mean * I guess?

[01:01] <Hotkeys> if you want to be explicit

[01:01] <Hotkeys> it'd probably be better for an array notation

[01:02] <Hotkeys> @x₁ @x₂

[01:02] <AlexDaniel> right

[01:02] <Hotkeys> that was you could have @xₙ

[01:02] <Hotkeys> and it would make sense

[01:02] <Hotkeys> not sure if TimToady wants real subscripts for array subscripts though

[01:02] <TimToady> both these ideas belong in module space

[01:03] <TimToady> not really interested in having them built in at this point

[01:03] <Hotkeys> alriiiiight

[01:04] <Hazim> <TimToday> ok then i should learn C first,  sorry for interrupting, I'm not programmer yet, but I could not find answers on the web

[01:04] <TimToady> Hazim: well, even in C, you can't usually talk directly to hardware.  You have to use the operating system.

[01:05] <AlexDaniel> Hotkeys: which at this point means that you will sacrifice more than 1 second of startup time just to have subscripts. Oh, hey, look, superscript! It works!

[01:05] <Hotkeys> startup time shmartup time

[01:05] <Hotkeys> if I want subscripts I'll implement subscripts

[01:06] <Hotkeys> although I don't care enough to do it right now

[01:06] <Hotkeys> maybe later

[01:06] <Hazim> TimToday: Ok, How To Learn&Find All The Function in the Perl 6, 

[01:06] <AlexDaniel> Hotkeys: haha yeah, fork Perl 6! Let's start a revolution!

[01:07] <Hotkeys> With blackjack and subscripts

[01:07] <TimToady> Hazim: see http://doc.perl6.org/

[01:07] <Hotkeys> Game::Blackjack anyone?

[01:07] <AlexDaniel> Hotkeys: and ∞!

[01:07] <Hotkeys> lol

[01:08] <Hotkeys> neat ∞ is just compose 8 8

[01:08] <Hotkeys> I was thinking it'd be like ✈ (&airplane)

[01:08] <TimToady> that one will probably sneak in at some point

[01:09] <Hotkeys> I approve of it

[01:09] <Hotkeys> I will include it in Perlkeys

[01:09] <Hotkeys> Perlkeys 6?

[01:09] <hahainternet> m: say 2÷2

[01:09] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/tEpe1SAi8n␤Bogus postfix␤at /tmp/tEpe1SAi8n:1␤------> 3say 27⏏5÷2␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤…»

[01:09] <AlexDaniel> Hotkeys: look, they are catching up! Quick, add ≤ ≥ ≠ !

[01:10] <TimToady> .oO(use PERLKEY-TYPING;)

[01:10] <Hotkeys> those are all attractive symbols

[01:10] <Hotkeys> I'm always tempted to type =/= when programming even though I know it's very usually !=

[01:11] <Hazim> TimToday: Thanks Man, Last Thing About The Picture, Sounds,3d...! And C library"  i should learn C or no, COZ i like to Make Apps With GUI, so i ask this Q 

[01:11] <hahainternet> or <> (nnngh)

[01:11] <AlexDaniel> Hotkeys: compose = /

[01:11] <Hotkeys> ≠

[01:11] <Hotkeys> beauty

[01:11] <Hotkeys> Why did I not ever get wincompose before

[01:11] <Hotkeys> besides the fact I didn't know about it

[01:11] <AlexDaniel> try ≤ ≥ while you are at it

[01:11] <hahainternet> i didn't realise hovercar wrote it

[01:11] <hahainternet> i'll pass your thanks along

[01:11] <Hotkeys> ≥≤

[01:11] <Hotkeys> ≥.≤

[01:12] <Hotkeys> it's a face

[01:12] <hahainternet> i don't actually know how to type those

[01:12] <TimToady> Hazim: for GUI, you probably want to learn C first, then C++

[01:12] <hahainternet> ≤≥

[01:12] <hahainternet> figured it out

[01:12] <Hotkeys> yeah

[01:12] <hahainternet> compose is quite intuitive

[01:12] <Hotkeys> straightforward

[01:12] <hahainternet> also TimToady is totally right, learn a bit of C, when you come to C++ recoil in horror and write Perl instead :D

[01:12] <Hotkeys> haha

[01:12] <TimToady> Hazim: in a year, Perl 6 will be better at GUI though

[01:12] <Hotkeys> perl 6 is the universal language of the future

[01:13] <Hotkeys> look out c#

[01:13] <Hotkeys> and c++

[01:13] <uruwi[A]> I would use perl6 bindings to native libraries more if they worked on Windows :S

[01:13] <TimToady> well, our optimizer has to get a lot better to compete with C++

[01:13] <uruwi[A]> ^

[01:13] *** yeahnoob joined
[01:13] <AlexDaniel> Hotkeys: no! Perl₆ is!

[01:13] <Hazim> TimToday:  Ok i will wait, but when it will be released. 

[01:13] <Hotkeys> perfect name AlexDaniel 

[01:13] <Hotkeys> much better than Perlkeys

[01:14] <uruwi[A]> I think some people would avoid it just for performance reasons, even if they don't need that extra speed

[01:14] *** uruwi[A] is now known as uruwi

[01:14] <hahainternet> for context: https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode#Mathematical_Operators_block

[01:14] <hahainternet> there's quite a few here i've no idea how to type

[01:14] <hahainternet> quite a few of which could be reasonably adopted

[01:14] <uruwi> To say that all of these will eventually have a use in Perl 6...

[01:15] <Hazim> TimToday: And What About The Web Application, how Perl 6 Go with the web app.

[01:15] <Hotkeys> ☺

[01:15] <Hotkeys> oh compose is wonderful

[01:15] <AlexDaniel> hahainternet: set operations are already in, I guess

[01:15] <zengargoyle> if you're on Linux-ish and really using XCompose (and not some other input method rip-off) : /usr/share/X11/locale/en_US.UTF-8/Compose

[01:15] <yoleaux> 25 Nov 2015 16:18Z <TimToady> zengargoyle: yes, I decided to keep | where it was, and if we want a slipper at so/not precedence, call it something else, like "sl" or some such, but then its not really saving keystrokes over |(1..10)

[01:17] <Hotkeys> also if you're using wincompose there is a gui thing for viewing

[01:17] *** salva left
[01:17] <TimToady> Hazim: we already have several Web modules on modules.perl6.org

[01:17] <AlexDaniel> m: unit module Perl₆; sub foo { say ‘yeah!’ }

[01:17] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/rGr7qTCFat␤Unable to parse module definition␤at /tmp/rGr7qTCFat:1␤------> 3unit module Perl7⏏5₆; sub foo { say ‘yeah!’ }␤    expecting any of:␤        generic role␤»

[01:17] <AlexDaniel> noooo

[01:17] <zengargoyle> if using something like iBus/SCIM/UIM might want to look into the rfc1345 input method also.

[01:18] <Hotkeys> Σ would be attractive for sum

[01:18] <zengargoyle> sadly, iBus doesn't really use XCompose, just a subset (and doesn't honor .XCompose customization :( )

[01:18] <AlexDaniel> Hotkeys: well it seems like you managed to write a non-breaking space

[01:19] <Hotkeys> I mightve hit compose a second time

[01:19] <uruwi> Hotkeys, people will also want to use the Greek letter Σ too, then others will complain that they can't use it for variable names

[01:19] <Hazim> TomToday: Thanks Man I Will Look To the Modules and Doc, 

[01:19] <Hotkeys> fair enough

[01:19] *** salva joined
[01:19] <hahainternet> interesting zengargoyle 

[01:19] <hahainternet> i have an ibus service installed

[01:19] <hahainternet> but shift + altgr is my compose

[01:20] <hahainternet> and i can't find set contains in the compose list :(

[01:20] <uruwi> try compose I N

[01:20] <uruwi> A ∈ B

[01:20] <Hotkeys> ∈

[01:20] <Hotkeys> you tricked me

[01:20] <Hotkeys> it was compose i n

[01:20] <hahainternet> not for me it seems on debian, with either case

[01:20] <zengargoyle> if you use iBus, compose keys are in sqlite database: /usr/share/ibus-table/tables/compose.db

[01:20] <uruwi> What about the other set ops?

[01:21] <Hotkeys> ∋

[01:21] <Hotkeys> compose n i

[01:21] <Hotkeys> guessed that one

[01:21] <hahainternet> zengargoyle: nothing on mine, and damn Hotkeys now i feel left out

[01:21] <uruwi> wow

[01:21] <uruwi> ∉ !in

[01:21] <hahainternet> going to have to up my compose game on debian

[01:21] <uruwi> ∌ /ni

[01:22] <uruwi> ∌ /ni

[01:22] <Hotkeys> ∅

[01:22] <Hotkeys> is compose { }

[01:22] <AlexDaniel> ịn

[01:22] <uruwi> {^ {u ∩ ∪

[01:22] <Hotkeys> heh

[01:22] <hahainternet> ∅ works for me but that's about it :(

[01:22] <zengargoyle> Hotkeys: it's from ibus-table-compose package.

[01:22] <uruwi> {( }) ⊂ ⊃

[01:22] <uruwi> * {)

[01:24] <AlexDaniel> <Multi_key> <leftshoe> <U0338> 	: "⊄"

[01:24] <Hotkeys> ⊄

[01:24] <AlexDaniel> I wonder what is “leftshoe”

[01:24] <Hotkeys> it's the subset symbol

[01:24] <Hotkeys> I assume

[01:24] <uruwi> Probably what that symbol looks like

[01:24] <AlexDaniel> how does it expect me to type it?

[01:24] <Hotkeys> with compose I guess

[01:25] <AlexDaniel> compose in compose?

[01:25] <Hotkeys> I can do compose ! {(

[01:25] <AlexDaniel> I've never tried that

[01:25] <Hotkeys> I can do compose ! { (

[01:25] <Hotkeys> no I mean

[01:25] <Hotkeys> maybe it's a combination one

[01:26] <Hotkeys> ⊇

[01:26] <AlexDaniel> .u 0x0bda

[01:26] <yoleaux> No characters found

[01:26] <AlexDaniel> .u x0bda

[01:26] <yoleaux> No characters found

[01:26] <AlexDaniel> .u U+2282

[01:26] <yoleaux> U+2282 SUBSET OF [Sm] (⊂)

[01:27] <AlexDaniel> so that's a <leftshoe>

[01:27] <Hotkeys> ah

[01:27] <Hotkeys> is what I said :p

[01:29] <AlexDaniel> weird, so it expects me to have this character on my keyboard. Not a problem, but it is a weird assumption

[01:29] <Hazim> Goodbye and Have a nice day to all.

[01:29] <Hotkeys> .u U+2276

[01:29] <yoleaux> U+2276 LESS-THAN OR GREATER-THAN [Sm] (≶)

[01:29] <Hotkeys> that's a neat sign

[01:29] *** Hazim left
[01:30] <Hotkeys> never actually seen that

[01:30] <Hotkeys> .u U+2278

[01:30] <yoleaux> U+2278 NEITHER LESS-THAN NOR GREATER-THAN [Sm] (≸)

[01:30] <Hotkeys> wouldn't this be the same as '='

[01:30] <Hotkeys> mathematically speaking

[01:30] <uruwi> It would

[01:30] <Hotkeys> just checking

[01:30] <uruwi> Unless you're talking about JavaScript

[01:30] *** salva left
[01:30] * zengargoyle snorts

[01:31] <Hotkeys> .u U+2272

[01:31] <yoleaux> U+2272 LESS-THAN OR EQUIVALENT TO [Sm] (≲)

[01:31] <uruwi> .u U+2277

[01:31] <yoleaux> U+2277 GREATER-THAN OR LESS-THAN [Sm] (≷)

[01:32] <uruwi> .u U+2279

[01:32] <yoleaux> U+2279 NEITHER GREATER-THAN NOR LESS-THAN [Sm] (≹)

[01:32] <AlexDaniel> what about LESS-THAN OR GREATER-THAN AND NEITHER LESS-THAN NOR GREATER-THAN ?

[01:32] <uruwi> What about LESS-THAN AND GREATHER-THAN

[01:32] <uruwi> .u U+2280

[01:32] <yoleaux> U+2280 DOES NOT PRECEDE [Sm] (⊀)

[01:32] <Hotkeys> but

[01:32] <Hotkeys> but

[01:32] <Hotkeys> my brain hurts

[01:32] <uruwi> .u U+2273

[01:32] <yoleaux> U+2273 GREATER-THAN OR EQUIVALENT TO [Sm] (≳)

[01:32] <uruwi> .u U+2274

[01:32] <yoleaux> U+2274 NEITHER LESS-THAN NOR EQUIVALENT TO [Sm] (≴)

[01:33] <Hotkeys> .u U+227D

[01:33] <yoleaux> U+227D SUCCEEDS OR EQUAL TO [Sm] (≽)

[01:33] <uruwi> Hotkeys, please do not go into JavaScript

[01:33] <Hotkeys> does javascript have these symbols

[01:33] <uruwi> No

[01:33] <uruwi> But comparisons are weird

[01:33] *** salva joined
[01:33] <uruwi> Such a shame, because JavaScript deserves to use them

[01:34] <uruwi> JS U+2279 Java

[01:34] <Hotkeys> what does less than and greater than even mean

[01:34] <uruwi> It might not be false if you use an abysmal programming language

[01:35] <Hotkeys> I like perl comparisons

[01:35] <Hotkeys> specifically the ability to chain them

[01:35] <Hotkeys> perl 6*

[01:35] <Hotkeys> (never used 5)

[01:35] * uruwi used bits of 5 for golfing

[01:36] *** flussence left
[01:36] <uruwi> Mainly to improve on others' answers.

[01:36] *** cdg left
[01:36] <Hotkeys> I did a bit of perl 6 golfing a few weeks ago

[01:36] *** flussence joined
[01:36] <zengargoyle> x is < and > y if x.succ < y and x.pred > y ?

[01:36] <Hotkeys> it was never the shortest thanks to golf langs

[01:36] <Hotkeys> but

[01:36] <Hotkeys> but how zengargoyle 

[01:36] <uruwi> One of the shortest that isn't specifically designed for golf

[01:37] <uruwi> Hotkeys: if some idiot designs a language that makes this sometimes true

[01:37] <uruwi> of course

[01:37] <zengargoyle> in some field that is not as rational numbers?

[01:37] <Hotkeys> lol

[01:37] <zengargoyle> there's some weird stuff out there in maths... :)

[01:37] <uruwi> Maybe modular numbers?

[01:37] <Hotkeys> maybe

[01:37] <Hotkeys> I remember ordinal numbers blowing my mind

[01:38] <Hotkeys> and the different kinds of infinite in general

[01:39] <Hotkeys> er

[01:39] <Hotkeys> infinity

[01:41] <uruwi> Neither equal nor unequal

[01:41] <uruwi> ?

[01:41] <Mouq> OTOH, if ∞ = -∞, then ∞ ≶ 0 but ∞ ≠ 0

[01:41] <Hotkeys> they aren't equal usually are they?

[01:42] <uruwi> Nope

[01:42] <Mouq> (NEITHER LESS-THAN NOR GREATER-THAN, assuming I copied the right symbol)

[01:42] <Hotkeys> yeah

[01:42] <uruwi> Wrong symbol

[01:42] <Hotkeys> oh

[01:42] <Hotkeys> right wrong one

[01:42] <Mouq> Wait

[01:42] <uruwi> Which is different from the wrong right one

[01:43] <Mouq> all the wrongs

[01:43] <Mouq> vOv

[01:43] <Hotkeys> ≸

[01:43] <Mouq> nvm :)

[01:43] <uruwi> I think the food they delivered us was laced with...

[01:43] <uruwi> With...

[01:43] <Hotkeys> I like this one

[01:43] <TimToady> to me, ≸ looks like "incomparable" in a topological sort

[01:43] <Hotkeys> ⋘

[01:43] <Hotkeys> very much less than

[01:44] <Hotkeys> .u ⋘

[01:44] <yoleaux> U+22D8 VERY MUCH LESS-THAN [Sm] (⋘)

[01:44] <Hotkeys> :D

[01:44] <uruwi> ⋘←—

[01:44] * TimToady always wonders, how much is "very"?

[01:45] <Hotkeys> .u ≪

[01:45] <yoleaux> U+226A MUCH LESS-THAN [Sm] (≪)

[01:45] <Hotkeys> more than much apparently

[01:45] <uruwi> Let a AAAAAAAAAAAAAAAAAAAAAAAAA b = a ⋘ b ∧ a ⋙ b

[01:45] <Hotkeys> how to do the (not? or? I forget my logic symbols)

[01:46] <uruwi> Compose slash yen

[01:46] <Hotkeys> yen???

[01:46] <uruwi> And it's an AND

[01:46] * TimToady remembers using ⥁ and ⥀ for rotate right and left in a rosettacode entry...

[01:46] <uruwi> Those should definitely be the symbols for rotation operators

[01:46] <Hotkeys> I was close

[01:46] <Hotkeys> apparently it's compose / \

[01:46] <Hotkeys> ∧

[01:47] <grondilu> uruwi: it would not make it clear which is which

[01:47] <TimToady> well, Japanese keyboards still confuse \ and ¥, I suspect

[01:47] <uruwi> I said yen as a joke :P

[01:47] <Hotkeys> oh you

[01:47] <Hotkeys> okay lecture is over heading home

[01:47] *** BenGoldberg joined
[01:48] <Hotkeys> be back in ~45 minutes

[01:48] <uruwi> m: say 62 ⟲ 5

[01:48] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/npPQnj2Nbv␤Confused␤at /tmp/npPQnj2Nbv:1␤------> 3say 627⏏5 ⟲ 5␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤ …»

[01:48] <uruwi> What about +<< and +>>

[01:48] <uruwi> I can never remember: +< or <+

[01:49] *** BenGoldberg left
[01:49] <skids> m: my %a; %a.VAR.WHAT.say; my %b::a; %b::a.VAR.WHAT.say

[01:49] <camelia> rakudo-moar : OUTPUT«(Hash)␤(Scalar)␤»

[01:51] *** salva left
[01:52] *** dayangkun joined
[01:54] *** BenGoldberg joined
[01:54] *** Zoffix joined
[01:55] *** BenGoldberg left
[01:55] *** BenGoldberg joined
[01:55] <Zoffix> Is it possible to alter what a call to {now} returns? I have code that will function different based on what time it is and I want to have some easy way to test it without changing my system time.

[01:56] *** salva joined
[01:56] <uruwi> m: sub now {return 1;}; say now;

[01:56] <camelia> rakudo-moar : OUTPUT«Instant:1448503031.478328␤»

[01:56] <uruwi> Apparently now

[01:56] <uruwi> not

[01:57] <grondilu> maybe use the TZ env var?

[01:57] <Zoffix> Guessing by the name it's a time zone?

[01:57] <grondilu> m: say now; %*ENV<TZ>='Europe/Paris'; say now

[01:57] <camelia> rakudo-moar : OUTPUT«Instant:1448503100.303290␤Instant:1448503100.308322␤»

[01:58] <Zoffix> Won't be enough. I need to go through about 30 periods of time between Dec 31, 2015—Jan 1, 2016

[01:58] <grondilu> well it doesn't work

[01:58] <zengargoyle> m: sub now() { 1 }; say now;

[01:58] <camelia> rakudo-moar : OUTPUT«Instant:1448503127.863511␤»

[01:58] <uruwi> m: sub now {return 1;}; say now();

[01:58] <camelia> rakudo-moar : OUTPUT«1␤»

[01:58] <skids> m: my constant now = "OHAI"; now.say; # hrm WTH is bare "now"

[01:58] <camelia> rakudo-moar : OUTPUT«Instant:1448503153.312523␤»

[01:58] <zengargoyle> m: \now := 1; say now;

[01:58] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/O21LvNel5B␤Cannot use bind operator with this left-hand side␤at /tmp/O21LvNel5B:1␤------> 3\now := 17⏏5; say now;␤»

[01:59] <uruwi> m: my \now = 1; say now

[01:59] <camelia> rakudo-moar : OUTPUT«Instant:1448503192.080633␤»

[01:59] <zengargoyle> m: my \term:<now> := 1; say now;

[01:59] <camelia> rakudo-moar : OUTPUT«Instant:1448503202.164129␤»

[01:59] <uruwi> You'll have to use a sub with a different name

[01:59] <zengargoyle> lol

[02:00] <TimToady> that's a bug, I think

[02:00] <TimToady> testing a fix

[02:00] <zengargoyle> m: my &now := sub { return 1 }; say now;

[02:00] <camelia> rakudo-moar : OUTPUT«Instant:1448503288.789749␤»

[02:01] <grondilu> m: $*TZ=3600; say now; $*TZ=-18000; say now

[02:01] <camelia> rakudo-moar : OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/B13ShpAEAA:1␤␤»

[02:01] <zengargoyle> m: my &term:<now> := sub { return 1 }; say now;

[02:01] <camelia> rakudo-moar : OUTPUT«1␤»

[02:01] <zengargoyle> bingo!

[02:01] <Zoffix> not really

[02:02] <Zoffix> m: my &term:<now> := sub { return 1 }; say DateTime.now;

[02:02] <camelia> rakudo-moar : OUTPUT«2015-11-26T03:02:02+01:00␤»

[02:02] <Zoffix> heh

[02:02] <Zoffix> zengargoyle, thanks.

[02:02] <Zoffix> I think I'll just use an env var (or one of those "dynamic variables" and in my code use a $*TEST_TIME // now

[02:03] <grondilu> m: my $*TZ=3600; say now; my $*TZ=-18000; say now

[02:03] <camelia> rakudo-moar : OUTPUT«Potential difficulties:␤    Redeclaration of symbol $*TZ␤    at /tmp/tmKHYytBs4:1␤    ------> 3my $*TZ=3600; say now; my $*TZ7⏏5=-18000; say now␤Instant:1448503418.146657␤Instant:1448503418.148529␤»

[02:03] <grondilu> m: my $*TZ=3600; say now; $*TZ=-18000; say now

[02:03] <camelia> rakudo-moar : OUTPUT«Instant:1448503425.745172␤Instant:1448503425.749895␤»

[02:03] <grondilu> meh

[02:03] *** rwilson_py joined
[02:03] *** rigsby left
[02:04] <AlexDaniel> .u ⥀⟲

[02:04] <yoleaux> U+27F2 ANTICLOCKWISE GAPPED CIRCLE ARROW [Sm] (⟲)

[02:04] <yoleaux> U+2940 ANTICLOCKWISE CLOSED CIRCLE ARROW [Sm] (⥀)

[02:04] <zengargoyle> m: my &now := sub { return 1 }; say now; use MONKEY-TYPING; augment class DateTime { sub now() { return 1; } }; say DateTime.now;

[02:04] <camelia> rakudo-moar : OUTPUT«Instant:1448503511.871252␤2015-11-26T03:04:35+01:00␤»

[02:04] <skids> m: my $*TZ=3600; say DateTime.now; $*TZ=-18000; say DateTime.now;

[02:04] <camelia> rakudo-moar : OUTPUT«2015-11-26T03:04:36+01:00␤2015-11-25T21:04:36-05:00␤»

[02:04] <AlexDaniel> hahainternet: here is a crazy thought

[02:05] <AlexDaniel> what if subscripts are only allowed in scalar names, but forbidden in array names. Then both parties are satisfied

[02:05] <zengargoyle> m: my &term:<now> := sub { return 1 }; say now; use MONKEY-TYPING; augment class DateTime { sub now() { return 1; } }; say DateTime.now;

[02:05] <camelia> rakudo-moar : OUTPUT«1␤2015-11-26T03:05:42+01:00␤»

[02:05] <AlexDaniel> it will not work on array references, but…

[02:06] <uruwi> Too complicated now.

[02:06] <AlexDaniel> well, not much. $x₂ and @x₂

[02:07] <zengargoyle> m: my &term:<now> := sub { return 1 }; say now; use MONKEY-TYPING; augment class DateTime { method now() { return 1; } }; say DateTime.now;

[02:07] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/5XpR5EcaoM␤Package 'DateTime' already has a method 'now' (did you mean to declare a multi-method?)␤at /tmp/5XpR5EcaoM:1␤»

[02:08] <AlexDaniel> both are kinda DWIM, but yeah, not pretty

[02:08] <zengargoyle> m: my &term:<now> := sub { return 1 }; say now; use MONKEY-TYPING; augment class DateTime { multi method now() { return 1; } }; say DateTime.now;

[02:08] <camelia> rakudo-moar : OUTPUT«===SORRY!===␤Cannot have a multi candidate for 'now' when an only method is also in the package 'DateTime'␤»

[02:08] *** molaf left
[02:08] *** FROGGS left
[02:08] <Zoffix> m: say DateTime.new( $*TEST_TIME // now ).local.month

[02:08] <camelia> rakudo-moar : OUTPUT«11␤»

[02:08] <Zoffix> m: my $*TEST_TIME = 1428503546; say DateTime.new( $*TEST_TIME // now ).local.month

[02:08] <camelia> rakudo-moar : OUTPUT«4␤»

[02:09] <Zoffix> Sweet

[02:09] <zengargoyle> m: my &term:<now> := sub { return 1 }; say now; use MONKEY-TYPING; augment class DateTime { proto method new { * }; multi method now() { return 1; } }; say DateTime.now;

[02:09] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/y5Ntcfv0g_␤Package 'DateTime' already has a method 'new' (did you mean to declare a multi-method?)␤at /tmp/y5Ntcfv0g_:1␤»

[02:09] <Zoffix> Gonna see how painful it is to do timezone stuff with P6 :P

[02:09] <Zoffix> I never managed to Do It Right™ in P5.... always droves of bugs

[02:14] <Mouq> m: my &term:<now> := sub { return 1 }; say now; class DateTime { method now() { return 1; } }; say DateTime.now; # :P

[02:14] <camelia> rakudo-moar : OUTPUT«1␤1␤»

[02:18] *** Ben_Goldberg joined
[02:19] *** xpen joined
[02:21] *** BenGoldberg left
[02:24] <hahainternet> AlexDaniel: honestly i wouldn't mind either way, as long as it was something agreed upon

[02:25] <hahainternet> for now TimToady says he doesn't want it in core so it'd be down to whichever module you used :)

[02:26] <AlexDaniel> hahainternet: yeah right, if only it didn't affect the startup time so much.

[02:26] *** Ben_Goldberg is now known as BenGoldberg

[02:29] <Hotkeys> Hello I made it home

[02:29] *** rwilson_py left
[02:30] <Zoffix> \o

[02:33] <Zoffix> m: my \x = 42;  say x² - x² == x² - x²; say x*(x - x) == (x+x)*(x - x); my \z = (x - x); say x*z == (x+x)*z; # Therefore x == (x+x) or x == 2*x :)

[02:33] <camelia> rakudo-moar : OUTPUT«True␤True␤True␤»

[02:34] <Zoffix> hmm.. Actually, in Perl 6 it just *might* be true due to rats

[02:34] <uruwi> Divide by zero

[02:34] <Zoffix> m: my \x = 42;  say x² - x² == x² - x²; say x*(x - x) == (x+x)*(x - x); my \z = (x - x); say x*z/0 == (x+x)*z/0;

[02:34] <camelia> rakudo-moar : OUTPUT«True␤True␤True␤»

[02:34] * Zoffix lols

[02:34] <Zoffix> this is epic :) We broke math

[02:34] <uruwi> m: say 1/0

[02:34] <camelia> rakudo-moar : OUTPUT«Attempt to divide 1 by zero using div␤  in block <unit> at /tmp/yTpxMX7jvz:1␤␤Actually thrown at:␤  in block <unit> at /tmp/yTpxMX7jvz:1␤␤»

[02:35] <uruwi> m: say 0/0

[02:35] <camelia> rakudo-moar : OUTPUT«Attempt to divide by zero using div␤  in block <unit> at /tmp/0RGdULBSyZ:1␤␤Actually thrown at:␤  in block <unit> at /tmp/0RGdULBSyZ:1␤␤»

[02:35] <uruwi> m: say 1/0 == 2/0

[02:35] <camelia> rakudo-moar : OUTPUT«True␤»

[02:35] <Hotkeys> 1/0.nude

[02:35] <Zoffix> m: my \x = 42;  say x² - x² == x² - x²; say x*(x - x) == (x+x)*(x - x); my \z = (x - x); say x/0 == 2*x/0;

[02:35] <camelia> rakudo-moar : OUTPUT«True␤True␤True␤»

[02:35] <Hotkeys> m: say 1/0.nude

[02:35] <camelia> rakudo-moar : OUTPUT«Method 'nude' not found for invocant of class 'Int'␤  in block <unit> at /tmp/tE6LHTO_KQ:1␤␤»

[02:35] <uruwi> m: say 1/0.nude

[02:35] <camelia> rakudo-moar : OUTPUT«Method 'nude' not found for invocant of class 'Int'␤  in block <unit> at /tmp/DRf5zpsy_r:1␤␤»

[02:36] <Hotkeys> m: say (1/0).nude

[02:36] <camelia> rakudo-moar : OUTPUT«(1 0)␤»

[02:36] <Zoffix> it's stored as denominator=>0/numerator=>0 stuff

[02:36] <Hotkeys> I mean

[02:36] <Hotkeys> the comparison isn't wrong in the context of rats

[02:36] <Hotkeys> just isn't mathematically okay

[02:36] <Hotkeys> :P

[02:37] <uruwi> m: say (1/0 + 2/0).nude

[02:37] <camelia> rakudo-moar : OUTPUT«(3 0)␤»

[02:37] <Hotkeys> haha

[02:37] <Zoffix> I think this came up earlier and the decision was that is is ok :)

[02:37] <uruwi> m: say (1/0 + 2).nude

[02:37] <camelia> rakudo-moar : OUTPUT«(1 0)␤»

[02:37] <Hotkeys> seems fine to me

[02:37] <Zoffix> 'cause you can do Lim(x/0) == Lim(2*x/0)

[02:37] <Zoffix> or some such

[02:37] <Hotkeys> it's still doing the fractional addition etc. correctly

[02:38] <Hotkeys> you just gotta know

[02:39] <Hotkeys> m: say (1/0).denominator != 0 ?? "okay" !! "not okay"

[02:39] <camelia> rakudo-moar : OUTPUT«not okay␤»

[02:39] *** kaare_ joined
[02:39] <Zoffix> m: say (⅓+⅓+⅓).nude

[02:39] <camelia> rakudo-moar : OUTPUT«(1 1)␤»

[02:39] <psch> Rats are kind of lazy div

[02:40] <Zoffix> magical

[02:40] *** pierre-vigier joined
[02:40] <psch> i don't feel completely comfortable with that, fwiw

[02:40] *** pierre-vigier left
[02:40] *** pierre-vigier joined
[02:40] <Hotkeys> m: sub ok(Rat:D $n) { $n.denominator != 0 }; say ok 1/0;

[02:40] <camelia> rakudo-moar : OUTPUT«False␤»

[02:41] <psch> m: sub ok(Rat:D $n) { $n.denominator != 0 }; say ok <1/0>.Rat

[02:41] <camelia> rakudo-moar : OUTPUT«False␤»

[02:41] <psch> m: sub ok(Rat:D $n) { $n.denominator != 0 }; say ok <1/0>

[02:41] <camelia> rakudo-moar : OUTPUT«False␤»

[02:41] <psch> RatStr probably coerces or somesuch vOv

[02:41] <psch> m: say <1/0>.WHAT

[02:41] <camelia> rakudo-moar : OUTPUT«(Rat)␤»

[02:41] <psch> eh, or i messed up how to build them :/

[02:41] <psch> m: say < 1/0 >.WHAT

[02:41] <camelia> rakudo-moar : OUTPUT«(RatStr)␤»

[02:41] <psch> there

[02:41] <psch> m: sub ok(Rat:D $n) { $n.denominator != 0 }; say ok < 1/0 >

[02:41] <camelia> rakudo-moar : OUTPUT«False␤»

[02:41] <Hotkeys> I didn't know those existed

[02:41] <Zoffix> m: sub ok(Rat:D $n) { $n.denominator == 0 ?? "∞" !! $n }; say [ ok 1/0, ok 42/2 ];

[02:41] <camelia> rakudo-moar : OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in sub ok at /tmp/Wd6r9Ev7rE:1␤  in block <unit> at /tmp/Wd6r9Ev7rE:1␤␤»

[02:42] <psch> Hotkeys: what?  RatStr?

[02:42] <Zoffix> m: sub ok(Rat:D $n) { $n.denominator == 0 ?? "∞" !! $n }; say [ ok(1/0), ok(42/2) ];

[02:42] <camelia> rakudo-moar : OUTPUT«[∞ 21]␤»

[02:42] <uruwi> What's a RatStr?

[02:42] <Hotkeys> ^

[02:42] <Hotkeys> yeah

[02:42] <psch> well

[02:42] <Hotkeys> Zoffix: that isn't true though

[02:42] <psch> the *Str types come from a place of "on the CLI everything is a String"

[02:42] <Zoffix> Hotkeys, prove me wrong :P

[02:42] <uruwi> Why have both?

[02:42] <psch> (that is IntStr, RatStr and i think ComplexStr)

[02:43] <Hotkeys> at a stretch you could say ±∞

[02:43] <Hotkeys> but still not really

[02:43] <psch> m: my $x = < 1/0 >; say $x.Str; say $x.Rat

[02:43] <camelia> rakudo-moar : OUTPUT«1/0␤Attempt to divide 1 by zero using div␤  in block <unit> at /tmp/lAGOHUaQ30:1␤␤Actually thrown at:␤  in block <unit> at /tmp/lAGOHUaQ30:1␤␤»

[02:43] <psch> m: my $x = 1/0; say $x.Str

[02:43] <camelia> rakudo-moar : OUTPUT«Attempt to divide 1 by zero using div␤  in block <unit> at /tmp/wpklF989q1:1␤␤Actually thrown at:␤  in block <unit> at /tmp/wpklF989q1:1␤␤»

[02:43] <psch> ^^^ that's one point where RatStr is useful

[02:43] *** skids left
[02:43] <Zoffix> m: sub ok(Rat:D $n) { $n.denominator == 0 ?? "∞" !! $n }; say [ ok(abs 1/0), ok(abs 42/2) ];

[02:43] <camelia> rakudo-moar : OUTPUT«[∞ 21]␤»

[02:43] <Zoffix> There. Fixed it :P

[02:44] <psch> 'cause the RatStr (and IntStr and ComplexStr) knows the Str representation *without* evaluating the Rat (or Int or Complex) representation

[02:44] * Zoffix might be getting delirious from perpetual lack of sleep.

[02:44] <Hotkeys> I think you are

[02:44] <Hotkeys> :p

[02:44] <psch> m: say ComplexStr

[02:44] <camelia> rakudo-moar : OUTPUT«(ComplexStr)␤»

[02:45] <psch> uruwi: does that help with "why have both?" :)

[02:45] <Hotkeys> m: say (3 + 2i).Str; say (3 + 2i).ComplexStr

[02:45] <camelia> rakudo-moar : OUTPUT«3+2i␤Method 'ComplexStr' not found for invocant of class 'Complex'␤  in block <unit> at /tmp/b_R7w2Eh8r:1␤␤»

[02:45] <Zoffix> m: say sqrt -1

[02:45] <camelia> rakudo-moar : OUTPUT«NaN␤»

[02:45] <Zoffix> :(

[02:45] <psch> Hotkeys: no coercion type for those.  as i said, they come from either the CLI or from invoking &val on a Str

[02:45] <Hotkeys> RatStr etc. don't exist on the docs.perl6.org site it seems

[02:45] <Hotkeys> ah

[02:46] <psch> m: say val "3 + 2i"

[02:46] <camelia> rakudo-moar : OUTPUT«3 + 2i␤»

[02:46] <psch> m: say (val "3 + 2i").WHAT

[02:46] <camelia> rakudo-moar : OUTPUT«(Str)␤»

[02:46] <psch> hm, maybe not in that form

[02:46] <psch> m: say (val "3+2i").WHAT

[02:46] <camelia> rakudo-moar : OUTPUT«(ComplexStr)␤»

[02:46] <psch> there

[02:46] <psch> space are bad, cause the *Str types are for dense formes

[02:46] <psch> -e

[02:46] <Hotkeys> say (val 3 + 2i).WHAT

[02:46] <Hotkeys> m: say (val 3 + 2i).WHAT

[02:46] <camelia> rakudo-moar : OUTPUT«Value of type Complex uselessly passed to val()  in block <unit> at /tmp/YfkctHCv6e:1␤(Complex)␤»

[02:46] <Zoffix> m: say (2+1i).WHAT

[02:46] <camelia> rakudo-moar : OUTPUT«(Complex)␤»

[02:46] <Hotkeys> rip

[02:46] <Zoffix> cool.. I wonder how many langs have complex numbers out of the box

[02:46] <Hotkeys> not a ton

[02:46] <uruwi> Python

[02:47] <Zoffix> aw :(

[02:47] <Hotkeys> Factor

[02:47] * Hotkeys plugs factor

[02:47] * Hotkeys likes factor

[02:47] * Zoffix never heard of Factor

[02:47] <Hotkeys> It's a concatenative lang

[02:47] <psch> "out of the box" in python means what?

[02:47] <psch> 'cause < print(2i) > here complains :p

[02:47] <Hotkeys> think Forth

[02:47] <Hotkeys> but not

[02:47] <Hotkeys> :p

[02:48] <Zoffix> psch, seems like cmath module is needed: https://docs.python.org/2/library/cmath.html

[02:48] <uruwi> Python uses j instead of i, though

[02:48] <psch> ah, yeah that seems to work

[02:48] <Zoffix> m: say (0/0)+(0+1i)

[02:48] <camelia> rakudo-moar : OUTPUT«Inf+1i␤»

[02:49] <psch> somewhat loses meaning, though, considering j isn't i

[02:49] <Hotkeys> Factor is fun but I never did anything serious with it

[02:49] <Zoffix> This is kinda pushing it... (the Inf+1i)

[02:49] <psch> ...not that i really mind that, fwiw

[02:49] <Hotkeys> http://concatenative.org/wiki/view/Factor/Examples

[02:49] <uruwi> Well, complex numbers itself exist, but you have to use cmath instead of math math

[02:50] <Zoffix> m: say (0/0)+(0+1i)

[02:50] <camelia> rakudo-moar : OUTPUT«Inf+1i␤»

[02:50] <Hotkeys> psch: it is sometimes

[02:50] <Hotkeys> it's the other letter for the imaginary number

[02:50] <Zoffix> .tell masak you seem to know math well. Does this make any sense or should it be throwing due to division by zero? m: say (0/0)+(0+1i) <camelia> rakudo-moar : OUTPUT«Inf+1i␤»

[02:50] <yoleaux> Zoffix: I'll pass your message to masak.

[02:50] <psch> Hotkeys: i haven't encountered it, but i'm also not particularly deep into formal math

[02:50] <Zoffix> \o night all

[02:51] <psch> Hotkeys: usually just arithmetic to check if i can pay for groceries :P

[02:51] <Hotkeys> psch: it's used a lot in cases where there might be ambiguity

[02:51] <Hotkeys> like when i denotes electric current

[02:51] <psch> ISTR we used a capital i for current

[02:51] <psch> in school that is

[02:52] <psch> maybe that's unit vs dimension

[02:52] <Hotkeys> I've seen both

[02:52] <psch> well, not like it really matters :)

[02:52] <Hotkeys> even on the wiki page they use i in an image of a current and I in the formulae

[02:52] <Hotkeys> yeah

[02:53] <Hotkeys> you could use ɨ if you wanted

[02:53] <Hotkeys> or į

[02:53] * Hotkeys is finding uses for compose

[02:53] <Hotkeys> (just like https://xkcd.com/208/)

[02:54] <Zoffix> m: say (0+i) == sqrt -1 # this is kinda disappointing

[02:54] <camelia> rakudo-moar : OUTPUT«False␤»

[02:54] <Hotkeys> m: sqrt -1

[02:54] <camelia> rakudo-moar : OUTPUT«WARNINGS:␤Useless use of "sqrt -1" in expression "sqrt -1" in sink context (line 1)␤»

[02:54] <Hotkeys> m: say sqrt -1

[02:54] <camelia> rakudo-moar : OUTPUT«NaN␤»

[02:54] *** khw joined
[02:54] <Hotkeys> weird

[02:54] <psch> m: say &sqrt.candidates>>.signatures

[02:54] <camelia> rakudo-moar : OUTPUT«Method 'signatures' not found for invocant of class 'Sub'␤  in block <unit> at /tmp/3jv2zaTIot:1␤␤»

[02:54] <Hotkeys> m: say sqrt -1 + 0i

[02:54] <camelia> rakudo-moar : OUTPUT«6.12323399573677e-17+1i␤»

[02:54] <Hotkeys> kek

[02:54] <psch> m: say &sqrt.candidates>>.signature

[02:54] <camelia> rakudo-moar : OUTPUT«((Numeric \x) (Cool \x) (num $a --> num))␤»

[02:54] <Hotkeys> ComplexRat anyone?

[02:55] <Hotkeys> m: say sqrt -1.Complex

[02:55] <camelia> rakudo-moar : OUTPUT«6.12323399573677e-17-1i␤»

[02:55] <psch> not sure an Int candidate is worth the dispatch trouble just for making sqrt -i work out

[02:55] <Hotkeys> m: say sqrt (-1).Complex

[02:55] <camelia> rakudo-moar : OUTPUT«6.12323399573677e-17+1i␤»

[02:55] <Zoffix> m: say sqrt -1.0

[02:55] <camelia> rakudo-moar : OUTPUT«NaN␤»

[02:55] <psch> s/-i/-1/

[02:55] <Hotkeys> looks like strong typing strikes again

[02:55] <Hotkeys> or rather

[02:56] <Hotkeys> yeah I guess

[02:56] <Hotkeys> I'm tired

[02:56] *** vendethiel joined
[02:56] <psch> well, the problem is that you want to decide on the return type before evoking the sub

[02:56] <psch> as in, you'd want a sqrt --> Complex

[02:56] <Hotkeys> I know, it makes sense

[02:56] <Hotkeys> for the same reason that my Rat $foo = 1; isn't okay

[02:57] <psch> that's the path towards wantarray, fwiw :P

[02:57] <Hotkeys> (I think?)

[02:57] <colomon> yeah, making the sqrt of negative Reals NaN is very intentional.

[02:57] <Hotkeys> m: my Rat $foo = 1;

[02:57] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/Er0UpQaYw8␤Cannot assign a literal of type Int (1) to a variable of type Rat. You can declare the variable to be of type Real, or try to coerce the value with 1.Rat or Rat(1), or just write the value as 1.0␤at /t…»

[02:57] <Hotkeys> yeah okay

[02:57] <psch> similar, yes, except Rat = 1 is more of a type system thing

[02:57] <Hotkeys> just making sure I wasn't imagining things

[02:57] <Hotkeys> same idea though

[02:57] <Zoffix> colomon, why is it intentional?

[02:57] <Zoffix> I mean, why not return a Complex?

[02:57] <Hotkeys> Because in the reals there is no sqrt -1

[02:58] <psch> while "i want a Complex from sqrt here but not everywhere" is a "let me change semantics of a function by changing the callsite" on top of that

[02:58] <psch> ...kinda thing

[02:58] <colomon> sqrt Real generates a Real

[02:58] <colomon> sqrt Complex generates a Complex

[02:58] <Zoffix> m: say NaN.WHAT

[02:58] <camelia> rakudo-moar : OUTPUT«(Num)␤»

[02:58] <psch> m: say sqrt 1i

[02:58] <camelia> rakudo-moar : OUTPUT«0.707106781186548+0.707106781186547i␤»

[02:59] <Zoffix> m: say sqrt (-1+i)

[02:59] <camelia> rakudo-moar : OUTPUT«0.455089860562227+1.09868411346781i␤»

[02:59] <Zoffix> m: say sqrt (-1+0i)

[02:59] <camelia> rakudo-moar : OUTPUT«6.12323399573677e-17+1i␤»

[02:59] <Hotkeys> I'm sad that you can't do

[02:59] <Hotkeys> m: say i²;

[02:59] <camelia> rakudo-moar : OUTPUT«-1+1.22464679914735e-16i␤»

[02:59] <Hotkeys> WHAT

[02:59] <Hotkeys> oh waiut

[02:59] <uruwi> Floating point

[02:59] <Hotkeys> my local build isn't up to date

[02:59] <Hotkeys> no not that

[02:59] <Hotkeys> I forgot to rebuild rakudo

[02:59] <Hotkeys> to get superscripts

[03:00] <Zoffix> m: say (sqrt -1).WHAT

[03:00] <camelia> rakudo-moar : OUTPUT«(Num)␤»

[03:00] <Hotkeys> wtb ComplexRat type

[03:00] <Zoffix> OK.

[03:00] <uruwi> What kind of representation is being used for complex numbers?

[03:00] <Hotkeys> real + imaginary

[03:00] <psch> uruwi: nums for real and imaginary

[03:00] <Hotkeys> oh

[03:00] <Hotkeys> oops

[03:01] <Hotkeys> I misunderstood

[03:01] <uruwi> Then what's with the funky errors?

[03:01] <psch> Hotkeys: ComplexRat seems LHF-ish, not sure how to wire it up in a least-surprise way though

[03:01] <psch> uruwi: which errors?

[03:01] <uruwi> You're not by chance storing them in the form r^(e i θ)?

[03:01] <Zoffix> psch, what's LHF?

[03:01] <Hotkeys> LHF?

[03:01] <uruwi> Rounding errors

[03:01] <psch> Low Hanging Fruit

[03:01] <Hotkeys> is that a good thing?

[03:01] <psch> uruwi: num is native (i.e. IEE754) float

[03:01] *** xpen left
[03:02] <psch> Hotkeys: it means "it should be easy to implement" :P

[03:02] <uruwi> Yes, but why does (0+1i)**2 give -1 plus a small number i

[03:02] <Hotkeys> ah

[03:02] <uruwi> Shouldn't it work exactly to -1+0i?

[03:02] <BenGoldberg> Because it's implemented in terms of sin and cos

[03:02] <uruwi> I knew it

[03:02] <uruwi> So you're doing intermediate conversions from rect to polar when you multiply

[03:03] <psch> BenGoldberg++ 

[03:03] <Zoffix> BenGoldberg++ :)

[03:03] <psch> that's beyond my readily available math :)

[03:03] <Zoffix> Once you go i you never get real again :)

[03:03] <uruwi> BenGoldberg++

[03:03] <Hotkeys> m: say 0.1e0 + 0.2e0 - 0.3e0;

[03:03] <camelia> rakudo-moar : OUTPUT«5.55111512312578e-17␤»

[03:03] <Hotkeys> :D

[03:03] <Hotkeys> yay floating points

[03:04] <AlexDaniel> m: say 0/3 == 0/3

[03:04] <camelia> rakudo-moar : OUTPUT«True␤»

[03:04] <BenGoldberg> When you multiply, no conversion to polar should be done.  When you exponentiate a complex, then a polar conversion does need to be done.

[03:04] <uruwi> Fortunately you shouldn't have to resort to floating points often.

[03:04] <AlexDaniel> m: say ↉ == 0/3

[03:04] <camelia> rakudo-moar : OUTPUT«True␤»

[03:04] <Hotkeys> yeah

[03:04] <Hotkeys> rats make it nice

[03:04] <uruwi> Ah BenGoldberg

[03:04] <uruwi> That's it

[03:04] <Hotkeys> m: say 0.1 + 0.2 - 0.3;

[03:04] <camelia> rakudo-moar : OUTPUT«0␤»

[03:04] <Hotkeys> :D

[03:04] <Zoffix> m: say i * i;

[03:04] <camelia> rakudo-moar : OUTPUT«-1+0i␤»

[03:04] <Zoffix> w00t!

[03:04] <BenGoldberg> 0.1 is a rat, not a float ;)

[03:04] <Zoffix> BenGoldberg++ :)

[03:04] <Hotkeys> nice

[03:04] <Hotkeys> BenGoldberg: that's what I said

[03:04] <AlexDaniel> m: say ⅒ == 0.1

[03:04] <camelia> rakudo-moar : OUTPUT«True␤»

[03:05] <AlexDaniel> m: say ⅒⅒

[03:05] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/LPfXgrERzW␤Bogus postfix␤at /tmp/LPfXgrERzW:1␤------> 3say ⅒7⏏5⅒␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier…»

[03:05] <uruwi> m: say 0.1 == 0.1e0

[03:05] <camelia> rakudo-moar : OUTPUT«True␤»

[03:05] <BenGoldberg> m: ⅒.perl.say

[03:05] <camelia> rakudo-moar : OUTPUT«0.1␤»

[03:05] <Hotkeys> m: say 0.1 === 0.1e0;

[03:05] <camelia> rakudo-moar : OUTPUT«False␤»

[03:05] <psch> m: say 1e-1 ==  .1

[03:05] <camelia> rakudo-moar : OUTPUT«True␤»

[03:05] <psch> ...probably cheating somewhere

[03:05] <Hotkeys> I mean they have the same value

[03:05] <AlexDaniel> m: say 0.33 == 0.33e0

[03:05] <camelia> rakudo-moar : OUTPUT«True␤»

[03:06] <Zoffix> m: say i*i == i²;

[03:06] <camelia> rakudo-moar : OUTPUT«False␤»

[03:06] <Zoffix> heh

[03:06] <Hotkeys> m: say "0.3" == 0.3 == 3e-1;

[03:06] <camelia> rakudo-moar : OUTPUT«False␤»

[03:06] <Hotkeys> wow

[03:06] <Hotkeys> rude

[03:06] <uruwi> Gets more annoying when you do have to actually compare two complex numbers

[03:06] <BenGoldberg> m: say +"0.3"

[03:06] <camelia> rakudo-moar : OUTPUT«0.3␤»

[03:06] <uruwi> The Right Way™

[03:06] <AlexDaniel> m: say i**2 == i²

[03:06] <camelia> rakudo-moar : OUTPUT«True␤»

[03:06] <Hotkeys> m: say "0.3" == 0.3;

[03:06] <camelia> rakudo-moar : OUTPUT«True␤»

[03:06] <BenGoldberg> m: (+"0.3").WHAT.say

[03:06] <camelia> rakudo-moar : OUTPUT«(Rat)␤»

[03:07] <Hotkeys> m: say "0.3" == 3e-1;

[03:07] <camelia> rakudo-moar : OUTPUT«False␤»

[03:07] <psch> uruwi: i have a hunch a lot of what we have with Complex is ground work, and there hasn't been a real world use-case yet

[03:07] <BenGoldberg> m: (3e-1).WHAT.say

[03:07] <camelia> rakudo-moar : OUTPUT«(Num)␤»

[03:07] <Hotkeys> m: say 0.3 == 3e-1;

[03:07] <camelia> rakudo-moar : OUTPUT«False␤»

[03:07] <AlexDaniel> .oO( poor camelia. Peaple are poking too much stuff into her today)

[03:07] <AlexDaniel> people*

[03:07] <Hotkeys> but then why does

[03:08] *** yqt left
[03:08] <Hotkeys> m: say 0.1 == 1e-1;

[03:08] <camelia> rakudo-moar : OUTPUT«True␤»

[03:08] <Hotkeys> work?

[03:08] <BenGoldberg> Magic?

[03:08] *** TEttinger left
[03:08] <psch> m: say 1e-1.fmt("%.15f")

[03:08] <camelia> rakudo-moar : OUTPUT«0.100000000000000␤»

[03:08] <psch> m: say 3e-1.fmt("%.15f")

[03:08] <camelia> rakudo-moar : OUTPUT«0.300000000000000␤»

[03:08] <psch> hrm

[03:08] <uruwi> m: say 3e-1.fmt("%.18f")

[03:08] <camelia> rakudo-moar : OUTPUT«0.300000000000000000␤»

[03:08] <Zoffix> m: say 3e-1; say 1e-1

[03:08] <camelia> rakudo-moar : OUTPUT«0.3␤0.1␤»

[03:08] <uruwi> m: say 3e-1.fmt("%.21f")

[03:08] <camelia> rakudo-moar : OUTPUT«0.300000000000000000000␤»

[03:08] <Zoffix> :S

[03:08] <uruwi> m: say 3e-1.fmt("%.99f")

[03:08] <camelia> rakudo-moar : OUTPUT«0.300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[03:09] <psch> m: my num $x = 3e-1; printf("%.21f", $x)

[03:09] <camelia> rakudo-moar : OUTPUT«0.300000000000000000000»

[03:09] <uruwi> m: say (1e-1+2e-1).fmt("%.99f")

[03:09] <camelia> rakudo-moar : OUTPUT«0.300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[03:09] <uruwi> What magic is this

[03:09] <Hotkeys> haha

[03:09] <uruwi> m: say (1e-1+2e-1-3e-1).fmt("%.99f")

[03:09] <camelia> rakudo-moar : OUTPUT«0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[03:09] <Zoffix> m: say (3e-1-.3).fmt("%.99f")

[03:09] <camelia> rakudo-moar : OUTPUT«0.000000000000000055511151231257800000000000000000000000000000000000000000000000000000000000000000000␤»

[03:09] <Hotkeys> lol

[03:09] <Zoffix> There's your problem :)

[03:09] <Zoffix> m: say (1e-1-.1).fmt("%.99f")

[03:09] <camelia> rakudo-moar : OUTPUT«0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[03:10] <psch> m:  printf("%.21f", 3e-1)

[03:10] <camelia> rakudo-moar : OUTPUT«0.300000000000000000000»

[03:10] <psch> m:  printf("%.40f", 3e-1)

[03:10] <camelia> rakudo-moar : OUTPUT«0.3000000000000000000000000000000000000000»

[03:10] <psch> ...i dont get it :P

[03:10] <Hotkeys> me either

[03:10] * psch shrugs and goes to sleep

[03:10] <Zoffix> The ghost in the machine! :)

[03:10] * Zoffix does the same

[03:10] <psch> hf :P

[03:10] <pierre-vigier> m: say (0.1+0.2-0.3).fmt("%.20f")

[03:10] <camelia> rakudo-moar : OUTPUT«0.00000000000000000000␤»

[03:10] <AlexDaniel> m: my $x = 0.3.Num; printf("%.40f", $x)

[03:10] <camelia> rakudo-moar : OUTPUT«0.3000000000000000000000000000000000000000»

[03:10] <Hotkeys> I don't know enough about computer math magic to diagnose this

[03:10] <AlexDaniel> m: my $x = 0.3.Num; printf("%.90f", $x)

[03:10] <camelia> rakudo-moar : OUTPUT«0.300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000»

[03:11] <AlexDaniel> why does it work? It should be “broken”

[03:11] <Mouq> I'm late to the party, but Hotkeys:

[03:11] <AlexDaniel> m: my $x = 0.31235612.Num; printf("%.90f", $x)

[03:11] <camelia> rakudo-moar : OUTPUT«0.312356120000000000000000000000000000000000000000000000000000000000000000000000000000000000»

[03:11] <Mouq> m: say (-1).roots(2)

[03:11] <camelia> rakudo-moar : OUTPUT«(6.12323399573677e-17+1i -1.83697019872103e-16-1i)␤»

[03:11] <AlexDaniel> m: my num $x = 0.31235612.Num; printf("%.90f", $x)

[03:11] <camelia> rakudo-moar : OUTPUT«0.312356120000000000000000000000000000000000000000000000000000000000000000000000000000000000»

[03:12] <Hotkeys> m: say (-4).roots(2)

[03:12] <camelia> rakudo-moar : OUTPUT«(1.22464679914735e-16+2i -3.67394039744206e-16-2i)␤»

[03:12] <Hotkeys> those rounding errors are mighty ugly

[03:13] <Mouq> m: say (-4).roots(2)>>.round # taadaaaa :P

[03:13] <camelia> rakudo-moar : OUTPUT«(0+2i 0-2i)␤»

[03:14] <Hotkeys> m: say (-4).roots(2)>>.round>>.say;

[03:14] <camelia> rakudo-moar : OUTPUT«0+2i␤0-2i␤(True True)␤»

[03:14] <gfldex> m: say 0.3 == 3e-1, (0.3).WHAT, 3e-1.WHAT; # apples and oranges

[03:14] <camelia> rakudo-moar : OUTPUT«False(Rat)(Num)␤»

[03:14] <Hotkeys> that's nicer

[03:14] <Hotkeys> m: say (-4).roots(2)».round».say;

[03:14] <camelia> rakudo-moar : OUTPUT«0+2i␤0-2i␤(True True)␤»

[03:14] <Hotkeys> excuse to use compose

[03:16] <Hotkeys> now I can use » and « in my code

[03:16] <Hotkeys> this is exciting

[03:17] *** noganex joined
[03:18] <Mouq> m: say (-4).roots(2)>>.reals>>.Rat.map({.[0]+.[1]i})

[03:18] <camelia> rakudo-moar : OUTPUT«(0+2i 0-2i)␤»

[03:18] *** vendethiel left
[03:18] <uruwi> Is there any simple way of expressing function composition?

[03:19] <Mouq> I think we have an "of" operator

[03:19] *** adu joined
[03:19] <Mouq> .u COMPOSITION

[03:19] <yoleaux> U+2384 COMPOSITION SYMBOL [So] (⎄)

[03:19] <yoleaux> U+2A1F Z NOTATION SCHEMA COMPOSITION [Sm] (⨟)

[03:19] <yoleaux> U+2A3E Z NOTATION RELATIONAL COMPOSITION [Sm] (⨾)

[03:19] <Mouq> hrm

[03:20] <Mouq> .u RING

[03:20] <yoleaux> U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE [Lu] (Å)

[03:20] <yoleaux> U+00E5 LATIN SMALL LETTER A WITH RING ABOVE [Ll] (å)

[03:20] <yoleaux> U+016E LATIN CAPITAL LETTER U WITH RING ABOVE [Lu] (Ů)

[03:20] <adu> Mouq: are you looking for center circle?

[03:20] <uruwi> .u circle

[03:20] <yoleaux> U+05AF HEBREW MARK MASORA CIRCLE [Mn] (◌֯)

[03:20] <yoleaux> U+20DD COMBINING ENCLOSING CIRCLE [Me] (◌⃝)

[03:20] <yoleaux> U+20E0 COMBINING ENCLOSING CIRCLE BACKSLASH [Me] (◌⃠)

[03:20] <uruwi> .u center circle

[03:20] <yoleaux> No characters found

[03:20] <Mouq> Nope, it's U+2218 RING OPERATOR

[03:20] <geekosaur> or

[03:20] *** noganex_ left
[03:20] <geekosaur> .u composite

[03:20] <yoleaux> No characters found

[03:20] <uruwi> .u U+2218

[03:20] <yoleaux> U+2218 RING OPERATOR [Sm] (∘)

[03:20] <Mouq> But just o works actually

[03:21] <geekosaur> ah, no, that is description, sigh

[03:21] <uruwi> m: say (cos o sin)(2)

[03:21] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/_Cx44avJQs␤Unsupported use of bare "sin"; in Perl 6 please use .sin if you meant $_, or use an explicit invocant or argument, or use &sin to refer to the function as a noun␤at /tmp/_Cx44avJQs:1␤------> 3say (c…»

[03:21] <uruwi> m: say (&cos o &sin)(2)

[03:21] <camelia> rakudo-moar : OUTPUT«0.614300282116482␤»

[03:21] <Hotkeys> neat

[03:21] <uruwi> m: say cos(sin(2))

[03:21] <camelia> rakudo-moar : OUTPUT«0.614300282116482␤»

[03:21] <uruwi> TIL.

[03:21] <Hotkeys> m: say cos sin 2;

[03:21] <camelia> rakudo-moar : OUTPUT«0.614300282116482␤»

[03:22] <Hotkeys> parens are lame

[03:22] <adu> yeah RING OPERATOR is function composition

[03:24] <uruwi> .u ο

[03:24] <yoleaux> U+03BF GREEK SMALL LETTER OMICRON [Ll] (ο)

[03:24] <uruwi> .u ꙭ

[03:24] <yoleaux> U+A66D CYRILLIC SMALL LETTER DOUBLE MONOCULAR O [Ll] (ꙭ)

[03:24] <adu> you know what my favorite unicode symbol is?

[03:24] <uruwi> What

[03:25] <uruwi> .u 🍣

[03:25] <yoleaux> U+1F363 SUSHI [So] (🍣)

[03:25] <uruwi> ^ my favorite

[03:25] <adu> .u U+1F432

[03:25] <yoleaux> U+1F432 DRAGON FACE [So] (🐲)

[03:25] <adu> .u U+1F409

[03:25] <yoleaux> U+1F409 DRAGON [So] (🐉)

[03:25] *** Ben_Goldberg joined
[03:26] <adu> .u U+1F4A9

[03:26] <yoleaux> U+1F4A9 PILE OF POO [So] (💩)

[03:26] <uruwi> Don't know. Can't beat sushi.

[03:26] <uruwi> And another:

[03:26] <uruwi> .u 👀

[03:26] <yoleaux> U+1F440 EYES [So] (👀)

[03:26] *** Ben_Goldberg left
[03:27] <pierre-vigier> m: my &fct = &roots o &abs; say fct( -4 );

[03:27] <camelia> rakudo-moar : OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at /tmp/BiBH3l5noi:1␤␤»

[03:27] <Hotkeys> lol pile of poo

[03:27] <pierre-vigier> why??

[03:27] <Hotkeys> because of roots

[03:27] <Hotkeys> er

[03:27] <Hotkeys> no

[03:27] <Hotkeys> not that

[03:27] <Hotkeys> uh

[03:27] <uruwi> Poots?

[03:27] <pierre-vigier> m: roots(4).sayu

[03:27] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/Vq030q5DMj␤Calling roots(Int) will never work with proto signature ($,)␤at /tmp/Vq030q5DMj:1␤------> 3<BOL>7⏏5roots(4).sayu␤»

[03:27] <Mouq> m: my &fct = &sqrt o &abs; say fct( -4 );

[03:27] <camelia> rakudo-moar : OUTPUT«2␤»

[03:27] <pierre-vigier> m: roots(4).say

[03:27] <camelia> rakudo-moar : OUTPUT«5===SORRY!5=== Error while compiling /tmp/63p5i5ychG␤Calling roots(Int) will never work with proto signature ($,)␤at /tmp/63p5i5ychG:1␤------> 3<BOL>7⏏5roots(4).say␤»

[03:27] <Hotkeys> oh

[03:28] <Hotkeys> roots requires two

[03:28] <pierre-vigier> hum, indeed

[03:28] <uruwi> m: roots(4, 4).say

[03:28] <camelia> rakudo-moar : OUTPUT«(1.4142135623731+0i 8.65956056235493e-17+1.4142135623731i -1.4142135623731+1.73191211247099e-16i -2.59786816870648e-16-1.4142135623731i)␤»

[03:28] <Hotkeys> as in

[03:28] <Hotkeys> m:say 4.roots(4)

[03:28] <Hotkeys> m: say 4.roots(4)

[03:28] <camelia> rakudo-moar : OUTPUT«(1.4142135623731+0i 8.65956056235493e-17+1.4142135623731i -1.4142135623731+1.73191211247099e-16i -2.59786816870648e-16-1.4142135623731i)␤»

[03:28] <Hotkeys> or what uruwi did

[03:28] <pierre-vigier> makes sense

[03:29] *** Ben_Goldberg joined
[03:29] *** xpen joined
[03:29] *** BenGoldberg left
[03:29] <adu> .u U+1F6BD

[03:29] <yoleaux> U+1F6BD TOILET [So] (🚽)

[03:30] <pierre-vigier> m: my &fct = &sqrt o &abs; say fct( -4 );

[03:30] <camelia> rakudo-moar : OUTPUT«2␤»

[03:30] <Mouq> m: my &fct = &roots o {.abs,2}; say fct( -4 ); # a compromise :)

[03:30] <camelia> rakudo-moar : OUTPUT«(2+0i -2+2.44929359829471e-16i)␤»

[03:30] <adu> uruwi: anyways my favorite is a toss up between DRAGON and PILE OF POO

[03:30] <Hotkeys> lol

[03:31] <Hotkeys> I like pile of poo because it uses the word poo

[03:31] *** kaare_ left
[03:31] <Hotkeys> compared to something more official like feces

[03:31] <uruwi> SUSHI is one of mine because I like sushi

[03:31] <uruwi> And also

[03:31] <uruwi> .u ɬ

[03:31] <yoleaux> U+026C LATIN SMALL LETTER L WITH BELT [Ll] (ɬ)

[03:31] <adu> Hotkeys: although I think the Unicode consortium is required to add STREAM OF PISS for completeness

[03:31] <uruwi> .u STREAM

[03:31] <yoleaux> U+1F38F CARP STREAMER [So] (🎏)

[03:32] <uruwi> How would that be depicted

[03:32] <uruwi> And I think they'd opt for PEE instead

[03:32] <uruwi> .u PEE

[03:32] <yoleaux> U+1354 ETHIOPIC SYLLABLE PEE [Lo] (ፔ)

[03:32] <yoleaux> U+15EB CANADIAN SYLLABICS CARRIER PEE [Lo] (ᗫ)

[03:32] <yoleaux> U+333B SQUARE PEEZI [So] (㌻)

[03:32] <uruwi> .u PISS

[03:32] <yoleaux> No characters found

[03:32] <uruwi> .u POO

[03:32] <yoleaux> U+1434 CANADIAN SYLLABICS POO [Lo] (ᐴ)

[03:32] <yoleaux> U+1435 CANADIAN SYLLABICS Y-CREE POO [Lo] (ᐵ)

[03:32] <yoleaux> U+A576 VAI SYLLABLE POO [Lo] (ꕶ)

[03:32] <uruwi> .u POOP

[03:32] <yoleaux> No characters found

[03:32] <Hotkeys> .u URINE

[03:32] <yoleaux> U+1F755 ALCHEMICAL SYMBOL FOR URINE [So] (🝕)

[03:32] <uruwi> .u SHIT

[03:32] <yoleaux> U+1201F CUNEIFORM SIGN AK TIMES SHITA PLUS GISH [Lo] (𒀟)

[03:32] <yoleaux> U+121DD CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH PLUS ERIN2 [Lo] (𒇝)

[03:32] <yoleaux> U+121DE CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH TENU [Lo] (𒇞)

[03:33] <adu> uruwi: it doesn't exist, but the Unicode consortium is very concerned about completeness, that's why the next version is going to include MANTA RAY and SHARK

[03:34] <Hotkeys> oh no Digest::MD5 still hasn't been fixed

[03:34] <Hotkeys> for windows

[03:34] <adu> Hotkeys: I know a lot about MD5, but nothing about windows

[03:34] <Hotkeys> it's specifically due to newlines

[03:35] <adu> oh, you mean \r\n?

[03:35] <Hotkeys> basically because of the newline handling changes it expects a hash of a string with \n

[03:35] <Hotkeys> and gets a hash of the string with \r\n

[03:35] <Hotkeys> yep

[03:35] <adu> the \r\n

[03:36] <adu> are there two functions? like hash_binary and hash_string?

[03:36] <Hotkeys> idk

[03:36] <Hotkeys> I just know what's broken

[03:36] <adu> that's how I would do it

[03:36] <Hotkeys> I think there are though

[03:36] <adu> have the hash_string normalize newlines, and hash_binary is the raw version

[03:36] *** kid51 left
[03:37] <Hotkeys> it isn't the choice of the functions

[03:37] <Hotkeys> unless you specify with use newline <option>;

[03:37] <adu> so you're saying there is a hash_string-ish function, and it's not working?

[03:37] <Hotkeys> m: say "test\r\n"

[03:37] <camelia> rakudo-moar : OUTPUT«test

[03:37] <Hotkeys> er

[03:37] <Hotkeys> m: say "test\r\n".perl

[03:37] <camelia> rakudo-moar : OUTPUT«"test\r\n"␤»

[03:37] <Hotkeys> m: say "test\n".perl

[03:37] <camelia> rakudo-moar : OUTPUT«"test\n"␤»

[03:37] <Hotkeys> I can't make it break right now

[03:38] <Hotkeys> I'm bad at this

[03:38] <Hotkeys> > say "\n".perl

[03:38] <Hotkeys> "\r\n"

[03:38] <Hotkeys> this is why it breaks

[03:39] <Hotkeys> it tests the function with "Hello world\n"

[03:39] <Hotkeys> but before it even gets to the function

[03:39] <Hotkeys> it gets changed to \r\n

[03:40] <adu> that's bad

[03:40] <Hotkeys> well not entirely it's just that you have to expect it

[03:40] <Hotkeys> and I think this was written before the handling change

[03:40] <Hotkeys> you can specify that the newline is only \n

[03:40] <Hotkeys> but you have to specify

[03:40] <Hotkeys> with "use newline lf;"

[03:40] <Hotkeys> I think that would fix this

[03:40] <Hotkeys> but I'm not sure

[03:41] <Mouq> Hotkeys: Try it and make a pull request :)

[03:41] <Hotkeys> I guess so

[03:41] * Hotkeys is lazy

[03:42] *** rorx left
[03:42] * Mouq is pretty sure Hotkeys spent more time trying to explain the problem than it would take to fix ;)

[03:42] <Hotkeys> that is likely

[03:42] *** rigsby joined
[03:50] *** rigsby left
[03:51] <Hotkeys> alright I pull requested

[03:52] *** BenGoldberg_ joined
[03:53] <Hotkeys> meanwhile I installed the updated version locally

[03:53] <Hotkeys> will the be the first time I

[03:53] <Hotkeys> Task::Star will build for me?

[03:55] <Hotkeys> the answer is yes

[03:55] <Hotkeys> woo

[03:55] *** Ben_Goldberg left
[03:55] <Hotkeys> I apologize for filling up everyones chats, I have a bad habit of talking in many lines

[04:02] *** BenGoldberg_ left
[04:07] *** eliasr left
[04:10] *** risou left
[04:13] *** FROGGS joined
[04:15] <lucs> What would correspond to Perl5's  \K  in regexes?  (searched for 'keep' in S05, but found nothing relevant)

[04:19] *** pierre-vigier left
[04:19] <Mouq> lucs: )>

[04:20] <lucs> Um, not sure what you mean.

[04:20] <Mouq> m: "abcdefg" ~~ /abc)>defg/; say $/

[04:20] <camelia> rakudo-moar : OUTPUT«｢abc｣␤»

[04:20] <Mouq> m: "abcdefg" ~~ /a<(bc)>defg/; say $/

[04:20] <camelia> rakudo-moar : OUTPUT«｢bc｣␤»

[04:20] <lucs> Aha. Thanks.

[04:20] <Mouq> m: "abcdefg" ~~ /a<(bcdefg/; say $/

[04:20] <camelia> rakudo-moar : OUTPUT«｢bcdefg｣␤»

[04:21] *** Ribbit left
[04:22] <dalek> rakudo/nom: d3c278d | TimToady++ | src/Perl6/Grammar.nqp:

[04:22] <dalek> rakudo/nom: allow override of terms self/now/time

[04:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3c278d34e

[04:24] <uruwi> kok!

[04:26] *** risou joined
[04:33] <TimToady> m: my \now = 1; say now

[04:33] <camelia> rakudo-moar : OUTPUT«1␤»

[04:34] <TimToady> unfortunatly, couldn't use that on rand, since there's a &rand function

[04:34] *** yeahnoob left
[04:34] *** yeahnoob joined
[04:44] <ShimmerFairy> TimToady: somehow, a random inconsistency in the allowed overrides feels appropriate for 'rand' :P

[04:48] <TimToady> that was a randim comment :P

[04:48] *** FROGGS left
[04:48] *** FROGGS joined
[04:49] <TimToady> well, a rnddim comment, anyhoo...

[04:56] *** rigsby joined
[05:05] *** FROGGS left
[05:13] *** BlackNeko joined
[05:18] *** BlackNeko left
[05:19] *** quester joined
[05:22] *** rigsby left
[05:25] *** rigsby joined
[05:27] *** snarkyboojum joined
[05:36] *** xpen left
[05:36] *** xpen joined
[05:38] *** TEttinger joined
[05:41] *** khw left
[05:41] *** xpen left
[05:41] *** pierre-vigier joined
[05:42] *** adu left
[05:49] *** rigsby left
[05:55] *** rigsby joined
[06:05] *** pierre-vigier left
[06:07] *** xpen joined
[06:10] <grondilu> probably a typo in recent commit or something:

[06:11] <grondilu> make: /usr/locale/bin/moar: Command not found

[06:11] <grondilu> "locale"?

[06:11] <grondilu> oh wait, it's my Configure.pl line that has it

[06:11] *** pierre-vigier joined
[06:12] * grondilu must haved type 'e' by mistake before entering the command

[06:14] *** raiph left
[06:17] *** rigsby left
[06:28] *** Actualeyes joined
[06:34] *** doublec_ joined
[06:35] *** doublec left
[06:45] *** rurban joined
[06:51] *** doublec joined
[06:53] *** doublec_ left
[06:54] *** pierre-vigier left
[06:55] *** domidumont joined
[06:56] *** |Tux| joined
[07:02] *** bjz joined
[07:06] *** geraud left
[07:07] *** pierre-vigier joined
[07:07] *** doublec_ joined
[07:07] *** FROGGS joined
[07:08] *** doublec left
[07:12] *** CIAvash joined
[07:13] *** FROGGS left
[07:13] *** rindolf joined
[07:17] *** domidumont left
[07:35] *** xinming left
[07:36] *** freeze left
[07:36] *** ilogger2_ joined
[07:36] *** btyler joined
[07:36] *** freeze joined
[07:36] *** hacst_ joined
[07:36] *** esh_ joined
[07:36] *** ilbot3 joined
[07:37] *** havenwood joined
[07:37] *** havenwood left
[07:37] *** havenwood joined
[07:37] *** Gruber joined
[07:37] *** petercommand joined
[07:37] *** bakedb joined
[07:38] *** moritz_ joined
[07:38] *** zostay joined
[07:38] *** sjn_ joined
[07:38] *** mjgardner joined
[07:39] *** gensym joined
[07:39] *** lucs_ joined
[07:40] *** colomon_ joined
[07:40] *** colomon_ is now known as colomon

[07:40] *** psch joined
[07:41] *** pnu left
[07:41] *** hacst_ is now known as hacst

[07:41] *** mjgardner is now known as Gardner

[07:41] *** atta joined
[07:41] *** charsbar_ joined
[07:41] *** yeahnoob joined
[07:42] *** yakudza joined
[07:42] *** krakan joined
[07:43] *** ugexe joined
[07:43] *** kipd joined
[07:43] *** Timbus joined
[07:44] *** oka_ joined
[07:44] *** BooK joined
[07:44] *** gtodd joined
[07:45] *** pochi joined
[07:45] *** pierrot joined
[07:45] *** PerlJam joined
[07:45] *** mst joined
[07:45] *** TimToady joined
[07:46] *** darutoko joined
[07:46] *** pdcawley_ joined
[07:47] *** lizmat joined
[07:48] *** cognominal joined
[07:48] <TimToady> had a bit of a hiccup with freenode, apparently, and wondering if anyone else had trouble getting through over the last hour or so...

[07:48] *** tony-o joined
[07:49] *** flaviusb joined
[07:49] *** bjz joined
[07:49] *** Upasaka joined
[07:50] <nine> TimToady: there were lots of netsplits

[07:50] <TimToady> I couldn't even reconnect for a long time

[07:50] *** khisanth_ joined
[07:50] *** ShimmerFairy joined
[07:50] <TimToady> and I noticed dalek stopped reporting

[07:50] *** domidumont joined
[07:50] *** mathw joined
[07:50] *** stux|RC-only joined
[07:51] *** dustinm` joined
[07:51] *** hacst_ joined
[07:51] *** obra joined
[07:51] *** mattp__ joined
[07:51] *** zostay_ joined
[07:52] *** Jonis joined
[07:52] *** olinkl joined
[07:53] *** cgfbee joined
[07:54] *** domidumont left
[07:54] *** Ulti joined
[07:55] *** novapatch joined
[07:55] *** domidumont joined
[07:56] *** yeahnoob left
[07:56] *** zostay left
[07:56] *** hacst left
[07:56] *** btyler left
[07:56] *** tadzik left
[07:56] *** daxim left
[07:56] *** ribasushi joined
[07:56] *** hacst_ is now known as hacst

[07:56] *** leont joined
[07:56] *** moznion joined
[07:56] *** Zoffix joined
[07:57] *** rindolf joined
[07:57] *** revdiablo joined
[07:57] *** btyler joined
[07:57] *** raydiak joined
[07:57] <moritz_> TimToady: I'm restaring the IRC component from dalek

[07:58] *** JimmyZ joined
[07:58] *** daxim joined
[07:58] *** El_Che joined
[07:58] *** Possum joined
[07:59] *** yeahnoob joined
[07:59] <moritz_> Nov 26 07:59:24 hack systemd[12488]: Failed at step EXEC spawning /home/dalek/perl5/perlbrew/perls/perl-5.20.1/bin/perl: Resource temporarily unavailable

[07:59] *** apejens joined
[07:59] <moritz_> whatever that means

[07:59] *** rvchangue joined
[08:00] *** vike joined
[08:00] *** breinbaas joined
[08:01] *** DrPete_ joined
[08:02] *** domidumont left
[08:03] *** tadzik joined
[08:03] <nine> moritz_: seems like its running into some ulimit

[08:05] <moritz_> Connect to freenode failed, retry in 30 secs

[08:05] <moritz_> if I start it manually

[08:06] *** telex joined
[08:06] *** tinita joined
[08:07] *** clkao joined
[08:08] <moritz_> but why would it run into a ulimit now, when it worked fine all the time before?

[08:09] *** abraxxa joined
[08:09] *** Bucciarati joined
[08:11] *** dalek joined
[08:11] *** ChanServ sets mode: +v dalek

[08:11] <moritz_> LimitNPROC=5 in the service file seemed to have caued the error

[08:11] <moritz_> bumping it up to 8 helped

[08:11] *** leont left
[08:11] *** solarbunny joined
[08:12] *** PotatoGim joined
[08:12] *** pnu joined
[08:12] *** skarn joined
[08:13] *** corbyhaas joined
[08:13] *** frew joined
[08:13] *** n0xff joined
[08:13] <moritz_> the http process runs with 5 workers; that might be a tiny bit overkill

[08:15] *** doublec joined
[08:16] *** rurban joined
[08:20] *** f3ew joined
[08:22] *** advwp_ joined
[08:22] *** mls_ joined
[08:23] *** kipd left
[08:23] *** kipd joined
[08:23] *** olinkl left
[08:23] *** olinkl joined
[08:24] *** clkao left
[08:24] *** clkao joined
[08:24] *** bowtie joined
[08:24] *** PotatoGim left
[08:24] *** PotatoGim joined
[08:24] *** pnu left
[08:24] *** pnu joined
[08:24] *** corbyhaas left
[08:24] *** corbyhaas joined
[08:25] <hahainternet> moritz_: 5 workers is small time

[08:25] <hahainternet> and yes that error is as you spotted

[08:26] <hahainternet> but for a webserver, max numproc should be more like ~200, although maybe i'm just used to lots of horizontal scaling

[08:26] <moritz_> hahainternet: the http component receives a github web hook every few minutes or hours

[08:26] <moritz_> hahainternet: there's simply no need for more than one or two workers

[08:27] <moritz_> hahainternet: and since this is a very shared server, I like to limit my services very much

[08:27] <hahainternet> oh! i assume this was for the new perl modules site or similar :)

[08:27] <moritz_> no :-)

[08:27] <hahainternet> moritz_: well if the EXEC is actually a fork, you can fork as much as you like

[08:27] <hahainternet> as most of the ram is COW

[08:27] <hahainternet> unless you are one of those crazy cats that turns off overcommit

[08:27] *** moritz_ is now known as moritz

[08:28] <moritz> hahainternet: well, I limited the number of processes via systemd container/slice fu

[08:28] *** n0xff left
[08:28] <hahainternet> also, you're on my list of people to thank for writing awesome articles, but i can't remember which article

[08:28] <hahainternet> so thanks in general!

[08:28] <hahainternet> something i saw had your name on it though

[08:29] *** RabidGravy joined
[08:29] *** MilkmanDan joined
[08:30] *** pnu left
[08:30] <moritz> hahainternet: you're welcome :-)

[08:30] <moritz> hahainternet: usually at http://perlgeek.de/blog-en/ or on the perl 6 advent calendar

[08:30] *** pierre-vigier joined
[08:30] <hahainternet> moritz: advent has been a staple of my christmas for many years

[08:31] <hahainternet> i've been meaning since last year to get more involved, but it's hard to find time

[08:31] <Hotkeys> I'm excited for this years advent

[08:34] *** abraxxa1 joined
[08:36] *** n0xff joined
[08:37] <hahainternet> https://www.raspberrypi.org/wp-content/uploads/2015/11/rsz_img_0661.jpg 

[08:37] <hahainternet> ok that's pretty cool

[08:37] <hahainternet> free computer with magazine

[08:37] <hahainternet> we're officially in the future

[08:40] *** ely-se joined
[08:41] *** skarn left
[08:41] *** leont joined
[08:43] <Hotkeys> "Today, I’m pleased to be able to announce the immediate availability of Raspberry Pi Zero, made in Wales and priced at just $5."

[08:43] <Hotkeys> neat

[08:43] *** Ven joined
[08:43] <hahainternet> $5 is a really superb price point

[08:43] <hahainternet> that's less than i have paid for esp8266s

[08:44] *** abraxxa left
[08:44] *** Bucciarati left
[08:44] <hahainternet> and they're significantly less of a computer than an rpi

[08:44] *** solarbunny left
[08:44] *** dalek left
[08:45] *** sjn_ is now known as sjn

[08:47] *** g4 joined
[08:48] <lizmat> good *, #perl6!

[08:48] <nine> Hi lizmat!

[08:48] <lizmat> nine o/

[08:48] <Tux__> o/

[08:48] <Ven> \o

[08:49] <lizmat> Tux__ Ven o/

[08:49] <nine> I wonder what people see as requirement for merging curli

[08:49] *** zakharyas joined
[08:50] *** bjz left
[08:51] *** bjz joined
[08:52] <lizmat> personally, I think having the stuff in lib be installed using curli ?

[08:52] <lizmat> and having panda just work (TM)

[08:53] *** kjs_ joined
[08:53] *** g4 left
[08:53] <hahainternet> oh that reminds me, i have to see if i'm behind on Linenoise

[08:54] <hahainternet> cause it doesn't work so well with some unicode glyphs

[08:54] <lizmat> hmmm... new unicode plans that may affect NFG: http://blog.unicode.org/2015/11/new-character-property-for-prepended.html

[08:54] <|Tux|> No such method 'context' for invocant of type 'Inline::Perl5::Perl6Callbacks'

[08:54] <|Tux|>   in method invoke-parent at /pro/3gl/CPAN/Text-CSV6/.panda-work/1448527967_1/lib/Inline/Perl5.pm6:503

[08:54] <|Tux|>   in block  at /pro/3gl/CPAN/Text-CSV6/.panda-work/1448527967_1/lib/Inline/Perl5.pm6:991

[08:54] <|Tux|>   in block <unit> at t/v6.t:19

[08:54] <|Tux|> Inline::Perl5 fail

[08:55] <lizmat> if I scanned these unicode plans correctly, it would mean that the base codepoint of a synthetic would no longer be always the first codepoint

[08:56] <hahainternet> yeah linenoise still problematic, enter ² and then try and backspace over it

[08:56] <hahainternet> don't know where i'd file this

[08:58] <|Tux|> test             50000    22.252    22.142

[08:58] <|Tux|> test-t           50000    20.041    19.931

[08:58] <|Tux|> csv-parser       50000    27.576    27.466

[08:58] <hahainternet> https://github.com/antirez/linenoise/issues/25

[08:58] <Hotkeys> works fine for me I think

[08:58] <Hotkeys> in the repl

[08:58] <hahainternet> interesting, this is in tmux

[08:58] <hahainternet> lets try in a bare term

[08:59] <Hotkeys> I'm using windows and powershell

[08:59] <hahainternet> ah, fails with regular gnome-terminal

[08:59] <hahainternet> this issue is still open and no sign of merged fixes, so i'm going to blame the backing library

[09:06] *** dalek joined
[09:06] *** ChanServ sets mode: +v dalek

[09:06] *** skarn joined
[09:06] <nine> lizmat: both are already done

[09:06] <lizmat> nine++

[09:07] <lizmat> I'm afraid I'm not going to backlog the past 2 weeks: hoping for a P6W soon to get me up to speed again

[09:09] *** bjz left
[09:13] <lizmat> .tell jnthn the test fail in t/spec/S32-hash/adverbs.t seems to be caused by a MMD issue that only happens when running under the t/harness

[09:13] <yoleaux> lizmat: I'll pass your message to jnthn.

[09:14] <lizmat> .tell jnthn line 58 to be precise

[09:14] <yoleaux> lizmat: I'll pass your message to jnthn.

[09:18] *** g4 joined
[09:18] *** g4 left
[09:18] *** g4 joined
[09:24] *** thundergnat joined
[09:27] *** leont left
[09:27] <lizmat> afk for a few hours&

[09:28] *** pnu joined
[09:28] *** pnu left
[09:28] *** pnu joined
[09:28] *** solarbunny joined
[09:28] *** leont joined
[09:28] *** yeahnoob left
[09:31] *** brrt joined
[09:31] *** maddingu1 joined
[09:31] *** baest_ joined
[09:32] *** ribasushi left
[09:32] *** Bucciarati joined
[09:32] *** colomon_ joined
[09:32] *** El_Che left
[09:32] *** charsbar_ left
[09:33] *** jonas1 joined
[09:33] *** breinbaas left
[09:33] *** btyler left
[09:33] *** colomon left
[09:33] *** colomon_ is now known as colomon

[09:33] *** vytas joined
[09:33] *** gtodd1 joined
[09:33] *** ely-se left
[09:33] *** RabidGravy left
[09:33] *** g4 left
[09:33] *** obra left
[09:33] *** cognominal left
[09:33] *** PerlJam left
[09:33] *** gtodd left
[09:33] *** esh_ left
[09:34] *** esh joined
[09:34] *** RabidGravy joined
[09:34] *** zoosha joined
[09:34] *** El_Che joined
[09:34] *** btyler joined
[09:34] *** bowtie left
[09:34] *** stmuk joined
[09:34] *** breinbaas joined
[09:35] *** xinming joined
[09:35] *** cognominal joined
[09:35] *** ely-se joined
[09:38] *** ollej joined
[09:39] *** ribasushi joined
[09:41] *** obra joined
[09:42] *** PerlJam joined
[09:42] *** leont left
[09:47] <Zoffix> Wait what... they make $5 computers in Whales? 0.o

[09:47] *** charsbar_ joined
[09:47] *** mtj_ joined
[09:48] *** FROGGS joined
[09:48] *** iH2O joined
[09:50] <nine> Well you can build complete GSM phones for < $12, so it's not that surprising

[09:50] *** iH2O left
[09:55] *** bjz joined
[10:00] *** M-Illandan joined
[10:00] *** M-eternaleye joined
[10:01] <dalek> modules.perl6.org/new-db-builder: 52edb30 | (Zoffix Znet)++ | / (2 files):

[10:01] <dalek> modules.perl6.org/new-db-builder: Implement --interval option

[10:01] <dalek> modules.perl6.org/new-db-builder: 

[10:01] <dalek> modules.perl6.org/new-db-builder: defaulting to 5 seconds allows us to stay under GitHub"s rate limit of 5,000reqs/hr when builder is run continuously (Closes #36)

[10:01] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/52edb30ad8

[10:03] *** espadrine joined
[10:03] <dalek> modules.perl6.org/new-db-builder: 1c800f7 | (Zoffix Znet)++ | build-project-list.pl:

[10:03] <dalek> modules.perl6.org/new-db-builder: --github-token-file option must take an argument and not be a boolean

[10:03] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/1c800f70a7

[10:10] *** boegel joined
[10:14] *** g4 joined
[10:14] *** g4 left
[10:14] *** g4 joined
[10:15] *** ollej left
[10:27] *** Ven left
[10:27] *** Ven joined
[10:32] *** bowtie joined
[10:37] *** jesper_ joined
[10:39] *** pierre-vigier left
[10:39] *** bjz left
[10:40] *** Ven left
[10:40] *** scopesoft joined
[10:41] <scopesoft> Just downloaded the latest Perl6 using rakudobrew and wrote a simple program that pushed a million floating point numbers (which where calculated), onto a list and then re-read the list checking the values. With perl6 this took 24s, perl5 took 0.2s, with D 0.04s. Taking away the floating point calculation and simply pushing integers on the list the perl6 time was reduced to 4s. I'm hoping performance will improve before the release at Christmas.

[10:43] * Zoffix quotes self from another channel...

[10:43] <nine> scopesoft: very unlikely. Until the release it's all about making things correct so people may depend on the behavior. I guess pretty much everyone is very much looking forward to working on performance after the release :)

[10:43] <Zoffix> "I wouldn't hold breath for Christmas. There are lots of more important things to take care. Optimization will come later on :)"

[10:44] *** pecastro joined
[10:45] <scopesoft> Given that there will probably be a large interest in this release, not only in the Perl domain it could be the final nail in the Perl 6 coffin, even before it's got off the ground.

[10:47] <arnsholt> Shit being flat out wrong would be a nail in the coffin

[10:48] <arnsholt> Making something fast before it's right is completely pointless

[10:48] * mrf_ would much prefer a reliable language that can get faster that a fast language that will always change

[10:48] <Zoffix> scopesoft, we'll put a sticker on it "It's still slow. Patches welcome" :)

[10:49] <Zoffix> scopesoft, and I think allusions to coffins are overly pessimistic. It's a brand new language. It's a bit silly comparing it to Perl 5 that had more than a decade to optimize itself :)

[10:49] <scopesoft> That would be true in normal situations, but we've been waiting years for Perl 6, and when we finally get a date for a release, it's not a teeny bit slower than Perl 5 but light years slower

[10:50] <Zoffix> scopesoft, the above statement ignores the fact that Perl 6 is no longer an "update" to Perl 5. It's a brand new language now.

[10:50] <scopesoft> But comparisons will be made not only with Perl 5, but Ruby, Python, etc.

[10:51] <Zoffix> scopesoft, sure. I don't see a problem with that.

[10:51] <Zoffix> scopesoft, those langs are 20 years old. Perl 6 doesn't have a "stable" release yet.

[10:51] <Zoffix> scopesoft, we have a FAQ entry on speed, if you'd like to peruse it: http://doc.perl6.org/language/faq#Is_Perl_6_fast_enough_for_me%3F

[10:53] <Zoffix> scopesoft, you could also give a helping hand with optimization, if you can: https://github.com/perl6/nqp/   https://github.com/rakudo/rakudo/

[10:53] <scopesoft> Zoffix: Thanks for the link. 

[10:53] <Zoffix> We use a modern compiler, so optimization is definitely possible. We just haven't gotten to it, yet.

[10:55] *** pecastro left
[10:57] <DrForr_> Welcome to instant gratification. It's about to be released, so of course it must be perfect. Oh, no, it's not? Forget about it.

[10:58] <Zoffix> I also want it to make pancakes!

[10:58] <scopesoft> The reason I've brought this up, is due to a conversation I had with a mate this morning who writes a lot of Perl, but he said to he's not looking at Perl 6 at all, stay away from it, look at other languages such as Javascript. The company he works at are moving from Perl 5 to PHP !!! A Christmas release of Perl 6 which Larry has pre-announced with great fan-fare, with this sought of simple test will mean there is no chance it will be ever considered as an a

[10:58] <Zoffix> :S javascript? :S

[10:59] <DrForr_> So the company is moving to PHP. Ergo he isn't interested in Perl 6. WHAT A SHOCKER.

[10:59] <scopesoft> Recently I've done some work at the BBC and every time Perl or Perl 6 was mentioned it was just ridiculed.

[10:59] <Zoffix> scopesoft, well, first, I think PHP will lose quite a bit of its popularity since Wordpress is moving to node.js, so many companies who decide to use that objectively horrible language will have fewer reasons to do it.

[11:00] <Zoffix> scopesoft, and so far you offered few reasons to think Perl 6 is ill-fated from the start. Your Perl 5-coder mate told you not to look at it? C'mon. 

[11:00] <scopesoft> DrForr: he's supporting the Perl legacy code at the moment

[11:00] <Zoffix> scopesoft, Perl 6 has one of the most advanced object models and concurrency support among modern langs. It's a bit silly to say it's ill-fated just because your mate says so.

[11:01] <Zoffix> Plus, this works: 

[11:01] <Zoffix> m: say ⅓²

[11:01] <camelia> rakudo-moar : OUTPUT«0.111111␤»

[11:01] <Zoffix> ^_^

[11:01] <DrForr_> I could have used that during a talk a few months ago.

[11:01] <Zoffix> DrForr_, the powers are brand new. Added just last night :)

[11:02] <DrForr_> I know, saw on FB.

[11:02] <arnsholt> That's more of a novelty thing. More useful, IMO, is this:

[11:02] <scopesoft> Given my experience of management in companies they will simply look at such results and base the decision on this. Other languages have OO, are functional, etc Even D is a serious contender

[11:02] <arnsholt> m: say 3*0.3 == 0.9 ?? "equal" !! "not equal"

[11:02] <camelia> rakudo-moar : OUTPUT«equal␤»

[11:04] <DrForr_> scopesoft: perl5 was slow when it first came out too, as was Ruby, Python and whatever languages you choose to name. If they're that short-sighted then they're .. well, typical management.

[11:04] <Zoffix> m: sleep 1 for ^4 .hyper(:batch(1)); say now - INIT now

[11:04] <camelia> rakudo-moar : OUTPUT«1.0103883␤»

[11:04] <DrForr_> Perl5 has had 20 years of optimization to the point where it beats C in some cases. Perl 6 hasn't had 20 years of production yet.

[11:04] <Zoffix> scopesoft, ^ four concurrent 1-second sleeps finish in 1 second

[11:04] <mrf> m: say ⅓² * 9

[11:04] <camelia> rakudo-moar : OUTPUT«1␤»

[11:06] <mrf> ^ Only modern language to get this right

[11:06] <DrForr_> In other words, do *not* confuse release with production.

[11:06] *** ely-se left
[11:06] <arnsholt> mrf: Well, Common Lisp gets it mostly right too, to be fair =)

[11:06] <DrForr_> *cough* modern :)

[11:07] <mrf> mostly isn't really good enough. 0.999999 is mostly right

[11:07] <Zoffix> heh

[11:07] *** pierre-vigier joined
[11:07] <arnsholt> mrf: Mostly right in that decimal literals are still floating point arithmetic, not rats

[11:07] <arnsholt> Division creates rats though

[11:08] <arnsholt> DrForr_: If we're talking features, CL is pretty damn modern though (except the syntax, of course, which is atrocious =)

[11:08] <mrf> arnsholt: thats fair.

[11:08] <mrf> The Biologist in me would have killed for a language that could have done accurate maths

[11:09] *** pecastro joined
[11:09] <DrForr_> arnsholt: I know, but perception...

[11:09] <arnsholt> DrForr_: I know, I know =)

[11:09] <arnsholt> But CL and Perl 6 are actually very similar, IMO

[11:11] <Woodi> hallo today :)

[11:11] <Zoffix> \o

[11:11] <mrf> Hello yesterday

[11:11] <Woodi> mrf: can you give few examples/requirements ?

[11:11] <dalek> modules.perl6.org/new-db-builder: a41ca4e | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist (5 files):

[11:11] <dalek> modules.perl6.org/new-db-builder: Implement TravisCI PostProcessor

[11:11] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/a41ca4e2b7

[11:12] <mrf> Woodi: ?

[11:12] <Woodi> ...of precise math

[11:12] <mrf> m: say ⅓² * 9

[11:12] <camelia> rakudo-moar : OUTPUT«1␤»

[11:12] *** pierre-vigier left
[11:12] <Woodi> looks exact...

[11:13] <mrf> yes which is awesome. when I was doing BioInfo at uni most languages would give 0.9999 for that which is really annoying

[11:13] <mrf> (including calculators in some cases)

[11:14] <Woodi> but do biology curently lack high performance & prcise programming language ?

[11:15] <mrf> Most biologists use either Perl5, Python or Go.

[11:15] <mrf> There are hacks and libraries in all of these to make things mostly work but its a PITA

[11:18] *** ab6tract joined
[11:18] <ab6tract> o/ #perl6

[11:18] <Woodi> mrf: sorry for torturin you more but any idea for something better ? like some high level/specialized data types or other things ?

[11:18] <dalek> modules.perl6.org/new-db-builder: 3c23291 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source.pm:

[11:18] <dalek> modules.perl6.org/new-db-builder: Handle strings in "authors" meta (closes #41)

[11:18] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/3c232919be

[11:20] <Zoffix> m: say 0/0 + i

[11:20] <camelia> rakudo-moar : OUTPUT«Inf+1i␤»

[11:20] <Zoffix> :)

[11:21] <grondilu_> m: say 0/0

[11:21] <camelia> rakudo-moar : OUTPUT«Attempt to divide by zero using div␤  in block <unit> at /tmp/AxNT1KvhAd:1␤␤Actually thrown at:␤  in block <unit> at /tmp/AxNT1KvhAd:1␤␤»

[11:22] <mrf> Woodi: Its not something I have been involved in since Uni. As I understand it the maths in perl 6 is ideal as it gives accurate values and can thus be relied upon. I certainly would recommend a better outreach to the biological community in particular though

[11:22] <mrf> Coor vectors would be really handy for atom mapping in 3d space

[11:23] <DrForr_> We have quaternions available :)

[11:23] *** grondilu joined
[11:24] <grondilu> (and geometric algebra)

[11:24] <Woodi> I saw lastly discusions about Rakudo 6.c guessed performance... so, first: in "official" communication there is no need to mention "slowness", concentrate on good parts like correctness or niceness, etc.

[11:25] *** brrt left
[11:25] * mrf will investigate protein modeling in p6

[11:25] <Woodi> mrf: biology and atoms and 3D, wow :)

[11:27] *** rurban left
[11:27] <ab6tract> .tell jnthn i had a color to add to the supply/distribute naming .. what about receive / transmit ?

[11:27] <yoleaux> ab6tract: I'll pass your message to jnthn.

[11:28] <mrf> Woodi: http://predictioncenter.org/

[11:28] <ab6tract> .tell jnthn it has the advantage of conjuring to mind networks / radios / communication vs economics :)

[11:28] <yoleaux> ab6tract: I'll pass your message to jnthn.

[11:29] *** pierre-vigier joined
[11:29] *** pmurias joined
[11:29] *** jesper_ left
[11:30] <ab6tract> scopesoft: regarding performance.. you should really consider the historical performance trends for rakudo

[11:30] <ab6tract> when you can see all that has happened with performance *without even focusing one it*, i think you will get a better picture of where perl 6 can go after the language is finalized

[11:31] <ab6tract> *on it

[11:31] <Woodi> second: Rakudo is not very slow anymore. 30 x perl5 2 months ago (without jit) is "modern" :) and if you check benchmarks then perl5 is 90+ times slower then C# (Mono), sometimes perl5 wins 4 times...

[11:31] <Zoffix> Woodi, I disagree. It's the most straightforward comparison you can do to other languages, so I'd expect people to do that right away. And *being surprised* by the slowness might lead to wrong reaction. Sure, it makes sense for first release to be not-optimized, but people—especially language zealots—will take the announcement as "Perl 6 is ready to replace your favourite language X". We don't need to say "it's slow" but we should mention that opti

[11:31] <Zoffix> mization will be the next step.

[11:31] <ab6tract> we should also probably compile a list of "known slows"

[11:32] <Zoffix> 1) html parsing

[11:32] <Zoffix> 90s vs ~0.8s in P5 on a test pagew

[11:33] <ab6tract> m: my $start=now; my int $x = 0; while $x < 5_000_000 { $x += 1}; say "{now - $start} seconds"

[11:33] <camelia> rakudo-moar : OUTPUT«3.7304304 seconds␤»

[11:33] <Woodi> Zoffix: I was talking there about official communications/texts. this is like candidating for president position - you not need to make trobles to yourself :)

[11:33] <ab6tract> hm.... i had a nested set of native int while loops which would finish more than 2 or 3 times faster than perl 5

[11:34] <crux> m: say (-1+0i)**0.5

[11:34] <camelia> rakudo-moar : OUTPUT«6.12323399573677e-17+1i␤»

[11:34] <ab6tract> ah, crap, that's containerizing, right?

[11:35] <ab6tract>  m: my $start=now; my int $x = 0; while $x < 5_000_000 { $x = $x + 1}; say "{now - $start} seconds"

[11:35] <camelia> rakudo-moar : OUTPUT«0.0311954 seconds␤»

[11:35] <Woodi> mrf: looking

[11:35] <ab6tract> yeah, there we go

[11:35] <mrf> Woodi: no need to really. Just an example of how important protein folding prediction is in BioInfo

[11:36] <ab6tract> scopesoft: start doing some while loops with native ints and you can see that the performance "bottom" for perl 6 can really beat perl 5 significantly. the core devs just can't finalize the interior decorating *and* rewire the engine at the same time when there is a deadline looming

[11:37] <dalek> doc: ba5c2f0 | (Steve Mynott)++ | doc/Language/faq.pod:

[11:37] <dalek> doc: move immutable in p5 example ... oops

[11:37] <dalek> doc: review: https://github.com/perl6/doc/commit/ba5c2f066d

[11:38] <ab6tract> (in my opinion this native int while loop examples should be used as a counterpoint in our "we know it's slow but we can make it better" ... it's visceral, *extant* proof that the gradual typing thing can deliver

[11:39] * Zoffix has no idea what use those native ints have

[11:39] <ab6tract> Zoffix: that's not the point.

[11:39] <ab6tract> the point is the same language is capable of doing something 1000 times as fast

[11:40] <ab6tract> the same thing, from the programmer's perspective

[11:40] <ab6tract> so the only reason Int $x doesn't do it as fast as int does is because that hasn't been wired into the optimizer

[11:40] <ab6tract> most benchmarks are inanely arbitrary

[11:41] <ab6tract> sorry, 100x

[11:41] *** weihan joined
[11:42] <Woodi> mrf: nice pictures I can "understand" ;) but also found something about machine learning, do we have something about this in modules ?

[11:43] *** xpen joined
[11:43] <mrf> No that I am aware of. It has however been at least 5 years since I last looked at anything like this.

[11:43] <mrf> (There is usually at least a $5k prize each time for the best prediction model)

[11:44] <Zoffix> $5k?

[11:44] * Zoffix sets out to release Bio::Machine

[11:45] <arnsholt> The only ML module I'm aware of is my currently-broken Viterbi decoder for HMMs

[11:45] *** bjz joined
[11:45] <Zoffix> Interesting this topic came up. Toronto Perl Mongers just had a "Machine Learning" meeting last night. I'm yet to watch the vid

[11:45] <mrf> P5 has/had BioPerl which was popular at one time. NumPy is fairly big for lots of things

[11:45] * Woodi have book about machine learning but it was boring becouse only one topic there was statistical function regression...

[11:46] <arnsholt> Woodi: That's literally what machine learning is all about though

[11:46] *** Ven joined
[11:46] <arnsholt> There are a couple of exceptions (decision trees, for example), but apart from that it's all regression

[11:48] <mrf> DrForr_: did you get anywhere with social. Still not seen anything!

[11:49] <Woodi> arnsholt: this not sound very complicated but applications like hand writing recognition are very futuristic :) or maybe not any more...

[11:50] <DrForr_> Um, I still have to go through emails. I was buried doing proposals the night before last and just needed to crash last night.

[11:50] <DrForr_> And again, given that LPW is happening practically next week I'm not *too* concerned.

[11:51] <mrf> DrForr_: fair

[11:53] <DrForr_> Plus I do have some semiserious shopping to do anyhoo :)

[11:54] <mrf> Thats cool. just planing my weekend as I don't live in London so need to know if I will be travelling

[11:54] <mrf> If not I can go hack in brighton

[11:56] *** zakharyas left
[11:57] <DrForr_> No interest in the social apparently, which is cool.

[12:02] *** pierre-vigier left
[12:03] *** kjs_ left
[12:05] *** xpen left
[12:05] *** zakharyas joined
[12:10] *** Skarsnik joined
[12:14] *** kjs_ joined
[12:15] *** ely-se joined
[12:15] *** pierre-vigier joined
[12:15] *** Actualeyes joined
[12:16] <dalek> rakudo/shaped_nonnative_typed_arrays: 131367c | timotimo++ | src/core/Array.pm:

[12:16] <dalek> rakudo/shaped_nonnative_typed_arrays: teach TypedArray about shapes

[12:16] <dalek> rakudo/shaped_nonnative_typed_arrays: review: https://github.com/rakudo/rakudo/commit/131367c7da

[12:18] <Woodi> ok, deep learning is more complicated :)

[12:19] * moritz is a shallow learner

[12:20] *** |Tux| joined
[12:24] <jnthn> afternoon, #perl6

[12:24] <yoleaux> 09:13Z <lizmat> jnthn: the test fail in t/spec/S32-hash/adverbs.t seems to be caused by a MMD issue that only happens when running under the t/harness

[12:24] <yoleaux> 09:14Z <lizmat> jnthn: line 58 to be precise

[12:24] <yoleaux> 11:27Z <ab6tract> jnthn: i had a color to add to the supply/distribute naming .. what about receive / transmit ?

[12:24] <yoleaux> 11:28Z <ab6tract> jnthn: it has the advantage of conjuring to mind networks / radios / communication vs economics :)

[12:25] <jnthn> You don't actively receive in a push model though. Stuff just happens to you. :)

[12:25] <jnthn> lizmat: There's a test fail in adverbs.t? :)

[12:25] * jnthn didn't know that :)

[12:25] *** kaare_ joined
[12:28] <timotimo> RIP hard drive ?!?!

[12:30] <timotimo> nope. unplugging and re-plugging helped

[12:30] <lizmat> hi jnthn 

[12:31] <nine> jnthn: adverbs.t has been failing for weeks here

[12:31] <lizmat> the thing is, it only fails inside the harness.  since it is a subtest, I'm not sure *what* fails there

[12:31] *** baest_ is now known as baest

[12:31] <jnthn> OK. I've not seen it fail at all here

[12:31] <lizmat> m: my %h = a => 42; say %h<a>:zop

[12:31] <camelia> rakudo-moar : OUTPUT«Unexpected named parameter 'zop' passed␤  in block <unit> at /tmp/H4M6nAaRM3:1␤␤»

[12:31] <lizmat> that;s the expected failure...

[12:32] <lizmat> since the test is a throws-like on Exception

[12:32] <lizmat> it would seem to me code *doesn't* fail

[12:32] <lizmat> *the

[12:32] <jnthn> Maybe valgrind it.

[12:33] <lizmat> not really an option on OSX afaik

[12:33] <jnthn> Nor Windows ;)

[12:33] *** ab6tract left
[12:33] <lizmat> then I saw RT #126655

[12:33] <jnthn> lizmat: Will you be about still in 20 mins or so?

[12:33] <lizmat> yup

[12:33] * jnthn wants lunch, but wants to ask something about Test::TAP too :)

[12:33] <jnthn> ok, cool

[12:33] <jnthn> bbs then

[12:35] *** mls_ is now known as mls

[12:36] *** abraxxa1 is now known as abraxxa

[12:36] *** mst left
[12:36] *** mst joined
[12:38] *** maddingu1 is now known as maddingue

[12:42] *** molaf joined
[12:45] *** Actualeyes left
[12:47] <timotimo> lizmat: i think that comes from having to recompile the .c portions of rakudo

[12:48] <timotimo> wait

[12:48] <timotimo> i totally misread that

[12:48] <lizmat> I was wondering  :-)

[12:48] <timotimo> anyway. there's a test about typed shaped arrays that doesn't seem quite right

[12:48] <timotimo> it expects to be able to push and pop a my @foo[5] of Int

[12:48] <lizmat> well, this is a simpler test:

[12:49] *** rurban joined
[12:49] <lizmat> m: use Test; my %h = a => 42; throws-like '%h<a>:zop', Exception

[12:49] <camelia> rakudo-moar : OUTPUT«    1..2␤    ok 1 - '%h<a>:zop' died␤    ok 2 - right exception type (Exception)␤ok 1 - did we throws-like Exception?␤»

[12:49] <lizmat> so this can only fail if the code didn't fail, or threw something other than Exception

[12:50] <lizmat> both are weird

[12:51] *** kjs_ left
[12:53] * timotimo fixed his desktop somewhat

[12:58] <timotimo> m: my @foos[5] of Int = 1, 2, 3, 4, 5; say @foos.pop; say @foos.perl

[12:58] <camelia> rakudo-moar : OUTPUT«5␤Array[Int].new(1, 2, 3, 4)␤»

[12:58] <timotimo> ^- this only worked because the shape was ignored

[12:59] <timotimo> hmm

[12:59] <timotimo> where is that test that was blowing up with my changes?

[12:59] <jnthn> You can't .pop a shaped array

[12:59] <jnthn> Not until we support * in a shape, which we won't in 6.c

[12:59] <timotimo> right, "jagged arrays"

[12:59] <jnthn> So the best is le wrong.

[13:00] <timotimo> good to know! :)

[13:00] <jnthn> uh, test

[13:05] <dalek> modules.perl6.org/new-db-builder: 8ba0fa8 | (Zoffix Znet)++ | lib-db-builder/P6Project (5 files):

[13:05] <dalek> modules.perl6.org/new-db-builder: Sayōnara old db builder classes

[13:05] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/8ba0fa8422

[13:07] <jnthn> lizmat: So, in Test::Tap there's this line:

[13:07] <jnthn> for ^$timeout { last if $done or $s.done; sleep .1 }

[13:07] <jnthn> I can't figure out what $s.done is about there.

[13:07] <jnthn> It's a method not found error now.

[13:07] <jnthn> But before it would have been...well, I don't even really know. :)

[13:07] <lizmat> ah, I think a thinko

[13:07] <jnthn> Whether we'd tapped done?

[13:08] <jnthn> OK, but just removing it gives me a bunch of hangs

[13:08] <lizmat> no, whether the tap was done

[13:08] <jnthn> Ah

[13:08] <lizmat> sorry, whether the supply was done

[13:08] <lizmat> as in: had a .done on it 

[13:08] <lizmat> so, this is just bad, I think

[13:08] <jnthn> But since we .tap it with &done always?

[13:08] <jnthn> OK

[13:08] *** bjz left
[13:08] <jnthn> The other thing is

[13:08] <jnthn> We used .append in various places

[13:08] <lizmat> hmmm....

[13:09] <jnthn> Which made supplies magically flatten things

[13:09] <jnthn> I've changed them for .push

[13:09] <lizmat> fwiw, I have no memory of changing them to append

[13:09] <jnthn> So I think some test regressions may be about that too

[13:09] <jnthn> I don't think you did

[13:09] <dalek> modules.perl6.org/new-db-builder: 8a1be68 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder.pm:

[13:09] <dalek> modules.perl6.org/new-db-builder: Handle fatal errors for each dist

[13:09] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/8a1be683c9

[13:09] <jnthn> I think TimToady steamrollered through CORE.setting doing so :)

[13:10] <lizmat> so, yes...  change them as you see fit  :-)

[13:10] <lizmat> I mean, they were originally per-GLR pushes

[13:10] <lizmat> *pre

[13:10] <lizmat> afaict

[13:10] <jnthn> I can't remember what pre-GLR push actually did ;)

[13:11] <jnthn> But yeah, post-GLR having emit @foo magically flatten feels like a bad idea

[13:11] <lizmat> to come back to $s.done in Test::Tap: that is intended to check whether the supply is done *without* using the normal ways of checking

[13:11] <lizmat> perhaps we should just use await with a timeout Promise

[13:11] <lizmat> or the awaiterator  :-)

[13:12] *** bjz joined
[13:14] <jnthn> Supply.from-list( [1,2],[3,4,5] ).map( {.flat} )

[13:14] <jnthn> This test wanted the flattening behavior for example

[13:15] <lizmat> probably not a very good test

[13:15] <lizmat> :-(

[13:15] <ilmari> m: say 5²³

[13:15] <camelia> rakudo-moar : OUTPUT«11920928955078125␤»

[13:15] <ilmari> TimToady++

[13:19] <jnthn> eek, the Supply.map tests are also often testing map on lists taht are fed to from-list... o.O

[13:19] <dalek> modules.perl6.org/new-db-builder: e5b9e0e | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder.pm:

[13:19] <dalek> modules.perl6.org/new-db-builder: On Win32, exec instead of system because daemon does not daemonize itself

[13:19] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/e5b9e0e8c1

[13:19] *** ely-se left
[13:19] <jnthn> No wonder they didn't do what I expect :)

[13:19] <lizmat> .oO( maybe having no tests would have been better :-(  )

[13:20] <jnthn> The *majority* of the test files actually worked out pretty fine

[13:20] <jnthn> Seems that .from-list never got updated post-GLR, and was doing *@foo, when it probably should follow the single arg rule

[13:21] <lizmat> ah, ok...  :-)

[13:22] <dalek> rakudo/resupply: 1bce55f | jnthn++ | src/core/Supply.pm:

[13:22] <dalek> rakudo/resupply: Supply.from-list should follow 1-arg rule.

[13:22] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/1bce55ff34

[13:22] <dalek> roast/resupply: 6f1e17e | jnthn++ | S17-supply/map.t:

[13:22] <dalek> roast/resupply: Revise Supply.map tests.

[13:22] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/6f1e17ea13

[13:23] <jnthn> OK, that's map.t off the list :)

[13:23] *** ely-se joined
[13:23] *** doublec_ joined
[13:25] <dalek> modules.perl6.org/new-db-builder: f7d2e86 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder (2 files):

[13:25] <dalek> modules.perl6.org/new-db-builder: Infer author_id from GitHub username if META does not declare it (Closes #42)

[13:25] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/f7d2e864dd

[13:25] *** doublec left
[13:26] *** andreoss joined
[13:31] *** colomon left
[13:31] <jnthn> Urgh, flat.t shows up something nasty going on with .close closing wrong taps :(

[13:34] <FROGGS> IS THAT ABOUT BEER OR JUST PROGRAMMING??!!11

[13:34] <arnsholt> Why not both? =)

[13:35] <FROGGS> AAAAAAAHHHHH

[13:37] *** kjs_ joined
[13:37] *** pierre-vigier left
[13:38] *** lucasb joined
[13:38] <dalek> modules.perl6.org/new-db-builder: 685d801 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder.pm:

[13:38] <dalek> modules.perl6.org/new-db-builder: Check for and delete any logotype files for dists no longer in db

[13:38] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/685d801ba6

[13:41] *** kid51 joined
[13:41] <dalek> modules.perl6.org/new-db-builder: 1cbc13c | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder.pm:

[13:41] <dalek> modules.perl6.org/new-db-builder: Separate dist build log output from finishing messages

[13:41] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/1cbc13c536

[13:42] *** pierre-vigier joined
[13:45] <tadzik> if it's not beer-driven development, let it be at least beer-inspired :)

[13:50] <dalek> modules.perl6.org/new-db-builder: 525b1d1 | (Zoffix Znet)++ | lib/ModulesPerl6 (7 files):

[13:50] <dalek> modules.perl6.org/new-db-builder: Fix typoes / add stopwords for spellchecker

[13:50] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/525b1d18fe

[13:51] <dalek> modules.perl6.org/new-db-builder: 6e3a6d8 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Log.pm:

[13:51] <dalek> modules.perl6.org/new-db-builder: We do not need 5.020 here

[13:51] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/6e3a6d80e8

[13:53] <dalek> modules.perl6.org/new-db-builder: c65e1dc | (Zoffix Znet)++ | / (2 files):

[13:53] <dalek> modules.perl6.org/new-db-builder: Our code needs at least perl 5.014

[13:53] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/c65e1dc285

[13:53] *** kid51 left
[13:53] <jnthn> The further I golf the bug, the weirder it gets

[13:56] <Woodi> btw. about performance: if some simple script executes (from command line to comman line) faster then a blink then it is quite good, whatever a numbers are :) IMO

[13:56] *** domidumont joined
[13:58] *** Actualeyes joined
[13:59] <dalek> modules.perl6.org/new-db-builder: 3abc10c | (Zoffix Znet)++ | build-project-list.pl:

[13:59] <dalek> modules.perl6.org/new-db-builder: Do not bury constant logos dir in the code

[13:59] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/3abc10c501

[13:59] *** kjs_ left
[14:03] *** colomon joined
[14:07] <dalek> modules.perl6.org/new-db-builder: 7c11262 | (Zoffix Znet)++ | / (4 files):

[14:07] <dalek> modules.perl6.org/new-db-builder: Move all executables into /bin/

[14:07] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/7c11262ca5

[14:14] *** doublec joined
[14:14] *** skids joined
[14:15] <jnthn> D'oh, found it, I think.

[14:16] *** doublec_ left
[14:20] *** pmurias_ joined
[14:21] *** Actualeyes left
[14:21] *** weihan left
[14:23] *** pmurias left
[14:25] *** Actualeyes joined
[14:30] *** sno joined
[14:30] <lizmat> jnthn: sanity check: is .WHERE of an object guaranteed to be constant for its lifetime?

[14:30] <lizmat> jnthn: or can a gc change it ?

[14:31] <timotimo> jnthn: https://github.com/perl6/roast/blob/master/S02-types/array-shapes.t#L61-L74 - so i can basically throw this out?

[14:31] <jnthn> lizmat: .WHERE can (will :-)) change

[14:31] <jnthn> lizmat: nqp::objectid is the stable thing

[14:32] <jnthn> (Carries some cost to maek that promise)

[14:32] <dalek> roast/resupply: fc63260 | jnthn++ | S17-supply/grep.t:

[14:32] <dalek> roast/resupply: Fix now from-list follows 1-arg rule.

[14:32] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/fc63260a0f

[14:32] <lizmat> ok, that means that we have a problem in the way that gistseen/perlseen work

[14:33] <jnthn> Oh, it's not using .WHICH?

[14:33] <lizmat> it *is* for the key, but not for the representation in .perl and .gist

[14:33] <lizmat> m: my $a = [42]; $a[1] = $a; say $a.perl

[14:33] <camelia> rakudo-moar : OUTPUT«(my \Array_140146618956656 = $[42, Array_140146618956656])␤»

[14:34] <jnthn> oh

[14:34] <jnthn> yeah, I'd use objectid there

[14:34] <lizmat> ok, will fix that

[14:34] <dalek> rakudo/resupply: 7f8030b | jnthn++ | src/core/Supply.pm:

[14:34] <dalek> rakudo/resupply: Fix tap closing scoping bugs.

[14:34] <dalek> rakudo/resupply: 

[14:34] <dalek> rakudo/resupply: Could lead to closing of the wrong taps.

[14:34] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/7f8030b143

[14:37] <dalek> modules.perl6.org/new-db-builder: f3e1638 | (Zoffix Znet)++ | / (4 files):

[14:37] <dalek> modules.perl6.org/new-db-builder: Improve coverage tests

[14:37] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/f3e16386b0

[14:37] *** kjs_ joined
[14:37] <timotimo> those numbers look like unix timestamps to me for no particular reason

[14:37] <lizmat> jnthn: is there a reason to say 'my int = 0' when we know it's going to be 0 ?

[14:38] <jnthn> timotimo: If they are, I think they're from a good way into the future ;)

[14:39] <jnthn> lizmat: No more than "I like the explicitness"

[14:39] <lizmat> jnthn: ok

[14:39] <arnsholt> I was about to suggest "explicit is better than implicit" =)

[14:40] <dalek> roast/resupply: d2fccdf | jnthn++ | S17-supply/ (4 files):

[14:40] <dalek> roast/resupply: More fixes for .from-list fallout.

[14:40] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/d2fccdf0bb

[14:40] <lizmat> hmmm... oddly enough, explicite in this case seems to be faster as well

[14:41] <jnthn> Down to 9 S17-supply tests with issues now

[14:41] <jnthn> Most due to the Test::TAP done thing

[14:42] <jnthn> Uh, Tap

[14:42] <jnthn> heh

[14:42] <jnthn> That's an unfortunate confusion :)

[14:43] <lizmat> bikeshed away, I would say  :)

[14:43] <jnthn> Can't be bothered :)

[14:44] * jnthn removes the $s.done and sees what happens

[14:45] <lizmat> jnthn: the $s.done test is to prevent hanging

[14:45] <lizmat> if a test fails for some reason

[14:46] <lizmat> so if everything is ok, you won't see a difference

[14:46] <lizmat> if not, you might see a hang

[14:47] <dalek> nqp: ad87dc9 | (Ronald Schmidt)++ | tools/build/Makefile-common.in:

[14:47] <dalek> nqp: Update Makefile-common.in to work with mingw

[14:47] <dalek> nqp: 

[14:47] <dalek> nqp: Fix /bin/sh: C:Strawberryperlbinperl.exe: command not found errors with mingw build without (hopefully) breaking other builds.

[14:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ad87dc974b

[14:47] <dalek> nqp: 71c6fd4 | (Jimmy Zhuo)++ | tools/build/Makefile-common.in:

[14:47] <dalek> nqp: Merge pull request #259 from ronaldxs/master

[14:47] <dalek> nqp: 

[14:47] <dalek> nqp: Update Makefile-common.in to work with mingw

[14:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/71c6fd4d1e

[14:48] <jnthn> lizmat: ah, ok

[14:48] *** gtodd1 is now known as gtidd

[14:48] <jnthn> Hm, I busted zip and zip-latest, it seems

[14:49] *** gtidd is now known as gtodd

[14:50] <timotimo> at least zip-latest has always been problematic

[14:51] <timotimo> it kept oversharing values from earlier :|

[14:51] <gfldex> m: sub range_rand(\min, \max){ (max - min).rand + min }; sub range_roll(\min, \max, \times){ range_rand(min,max) xx times }; say range_roll(0.1,0.3,10); #126664

[14:51] <camelia> rakudo-moar : OUTPUT«(0.114553204786117 0.282474299596918 0.199445260961036 0.24923524175062 0.193473323053126 0.131453337177036 0.299215762973047 0.193697580865753 0.169199240435266 0.214324695974161)␤»

[14:52] <gfldex> lizmat: ^^^ that may be sensible too (re: #126664)

[14:52] <jnthn> duh, what a silly mistake...

[14:53] *** zacts joined
[14:53] * lizmat is curious

[14:54] *** xpen joined
[14:55] <zacts> yo perl6 hackers

[14:55] <zacts> and nerds and geeks et al...

[14:55] *** bjz left
[14:55] <tadzik> hello zacts 

[14:56] <zacts> lo

[14:56] <dalek> rakudo/resupply: 39db5e3 | jnthn++ | src/core/Supply.pm:

[14:56] <dalek> rakudo/resupply: whenever over correct supplies in zip.

[14:56] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/39db5e3d37

[14:57] <jnthn> So, zip is happy now

[14:58] <jnthn> hmm, I think the zip-latest fail is a thinko in the test

[14:58] <jnthn> it does a .done and then a .emit on the same supply

[14:58] <DrForr_> wr0d.

[14:59] <jnthn> Pretty sure that's a thinko. :)

[14:59] *** xfix joined
[14:59] <lizmat> I'll buy that

[15:00] <dalek> roast/resupply: 5eb47dc | jnthn++ | packages/Test/Tap.pm:

[15:00] <dalek> roast/resupply: Remove hang check that no longer works.

[15:00] <dalek> roast/resupply: 

[15:00] <dalek> roast/resupply: Shouldn't affect the timeout, though.

[15:00] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/5eb47dcd40

[15:00] <dalek> roast/resupply: cafea57 | jnthn++ | S17-supply/zip-latest.t:

[15:00] <dalek> roast/resupply: Fix zip-latest test thinko.

[15:00] <dalek> roast/resupply: 

[15:00] <dalek> roast/resupply: It likely meant to write to the not-yet-done supply; we now enforce

[15:00] <dalek> roast/resupply: protocol.

[15:00] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/cafea57499

[15:00] *** doublec_ joined
[15:01] *** doublec left
[15:04] *** g4 left
[15:15] *** doublec joined
[15:16] *** doublec_ left
[15:16] *** khw joined
[15:21] *** doublec_ joined
[15:21] *** doublec left
[15:27] *** MadcapJake joined
[15:37] *** pierre-vigier left
[15:38] <dalek> modules.perl6.org/new-db-builder: 9d01ad3 | (Zoffix Znet)++ | / (4 files):

[15:38] <dalek> modules.perl6.org/new-db-builder: Improve ::Root controller test coverage to 100%

[15:38] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/9d01ad3e84

[15:38] <dalek> roast: 5f938a6 | timotimo++ | S02-types/array-shapes.t:

[15:38] <dalek> roast: kick out wrong tests

[15:38] <dalek> roast: review: https://github.com/perl6/roast/commit/5f938a66e7

[15:39] <dalek> rakudo/nom: 131367c | timotimo++ | src/core/Array.pm:

[15:39] <dalek> rakudo/nom: teach TypedArray about shapes

[15:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/131367c7da

[15:39] <dalek> rakudo/nom: 8618f41 | timotimo++ | src/core/Array.pm:

[15:39] <dalek> rakudo/nom: Merge branch 'shaped_nonnative_typed_arrays' into nom

[15:39] <dalek> rakudo/nom: 

[15:39] <dalek> rakudo/nom: my Int @foo[10;20] and friends now work.

[15:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8618f41e48

[15:41] <jnthn> \o/

[15:42] <jnthn> timotimo++

[15:45] *** jonas1 left
[15:48] <dalek> roast/resupply: 8bd01a8 | jnthn++ | S17-supply/c (2 files):

[15:48] <dalek> roast/resupply: Mark "done" at right point in some tests.

[15:48] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/8bd01a8b0c

[15:48] <dalek> rakudo/resupply: d6ce4a4 | jnthn++ | src/core/Supply.pm:

[15:48] <dalek> rakudo/resupply: Add Supplier::Preserving.

[15:48] <dalek> rakudo/resupply: 

[15:48] <dalek> rakudo/resupply: If the supply has not been tapped yet, then preserves any emitted

[15:48] <dalek> rakudo/resupply: events (emit/done/quit) until a tap happens, then feeds them all to

[15:48] <dalek> rakudo/resupply: that tap. Follow-up taps continue to get the live supply.

[15:48] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/d6ce4a46a4

[15:49] <dalek> rakudo/resupply: abb5da2 | jnthn++ | src/core/Supply.pm:

[15:49] <dalek> rakudo/resupply: Use Supplier::Preserving in classify/categorize.

[15:49] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/abb5da2b71

[15:49] <dalek> rakudo/resupply: 420a716 | jnthn++ | src/core/Supply.pm:

[15:49] <dalek> rakudo/resupply: Fix arity bug in .tap's emit default.

[15:49] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/420a716e18

[15:49] <dalek> rakudo/resupply: b50f48c | jnthn++ | src/core/Supply.pm:

[15:49] <dalek> rakudo/resupply: Don't try and clean up a tap we don't have.

[15:49] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/b50f48c80f

[15:53] <dalek> roast/resupply: f5c1886 | jnthn++ | S17-supply/produce.t:

[15:53] <dalek> roast/resupply: Add tests for Supply.produce.

[15:53] <dalek> roast/resupply: 

[15:53] <dalek> roast/resupply: Which does what Supply.reduce used to, since produce is the "triangle"

[15:53] <dalek> roast/resupply: form on lists, so it should be on supplies too.

[15:53] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/f5c188676d

[15:55] <dalek> roast/resupply: af3d634 | jnthn++ | S17-supply/reduce.t:

[15:55] <dalek> roast/resupply: Update Supply.reduce tests to match semantics.

[15:55] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/af3d634561

[15:55] <lucasb> m: say '<--'

[15:55] <camelia> rakudo-moar : OUTPUT«<--␤»

[15:55] <lucasb> It took me some days to notice that camelia is not printing the revision number

[15:55] <jnthn> hmm

[15:55] *** FROGGS left
[15:56] <jnthn> Phew, down to 3 supply test files needing attention

[15:56] <lizmat> jnthn++

[15:56] <lizmat> afk for a few hours&

[15:56] <lucasb> maybe this commit changed something: https://github.com/perl6/evalbot/commit/196aa24c8958b157ed85aa010eba306e91b7be74

[15:57] *** xpen left
[15:58] *** xpen joined
[15:59] <dalek> roast/resupply: 569072c | jnthn++ | S17-supply/unique.t:

[15:59] <dalek> roast/resupply: Missing flat, .done calls.

[15:59] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/569072c15c

[16:01] <jnthn> Now it's 2.

[16:03] *** sjn_phone joined
[16:04] <jnthn> Darn, I've got to understand throttle

[16:04] *** samb1 joined
[16:05] * lizmat is not away after all

[16:05] <lizmat> can I help you with that ?

[16:05] <lizmat> jnthn: ^^^

[16:05] *** jonas1 joined
[16:07] <lizmat> http://doc.perl6.org/routine/throttle   # jnthn

[16:07] <lizmat> hmmm... needs a little cleanup

[16:07] <jnthn> lizmat: I think I can re-work it not to use "on"

[16:07] *** zakharyas1 joined
[16:08] *** n0xff left
[16:08] *** zakharyas left
[16:09] <dalek> doc: 2bc558b | lizmat++ | doc/Type/ (2 files):

[16:09] <dalek> doc: Cleanup some =over and =back

[16:09] <dalek> doc: review: https://github.com/perl6/doc/commit/2bc558bc99

[16:14] *** BenGoldberg joined
[16:15] *** sjn_phone left
[16:18] *** cschwenz joined
[16:18] *** cschwenz left
[16:19] <jnthn> lizmat: A couple of usage examples would be really great in the docs ;)

[16:20] * jnthn compiles the refactored-to-use-whenever version

[16:20] <lizmat> hmmm... I could have sworn I had done some

[16:21] <lizmat> will do after dinner

[16:21] <jnthn> Darn typo...

[16:21] <jnthn> :)

[16:21] * jnthn tries again

[16:21] <jnthn> I suspect I'll have to re-work the tests a bit

[16:22] <jnthn> 'cus of the supply/supplier distinction we now have

[16:22] <DrForr_> YAPC::EU Aug 24-26. Booking my flights now :)

[16:22] <jnthn> :)

[16:22] *** sQuEE` is now known as sQuEE

[16:23] * grondilu wonders if it would be reasonable to set [+] 1/2, 1/4, 1/8 ... * to be 1

[16:24] <grondilu> (or more generally to use the explicit formula for the sum of a geometric sequence)

[16:24] <grondilu> (I mean since it's been done for arithmetic sequences...)

[16:25] <lizmat> hmmm... another use for ^1  :)

[16:26] *** ely-se left
[16:27] <timotimo> grondilu: it's only useful if we have a prover for any given sequence, otherwise it'd really only be that literal sequence summed up that'd result in 1

[16:27] <lizmat> m: my \a = [23,42,a]; dd a  # this feels incorrect

[16:27] <camelia> rakudo-moar : OUTPUT«Array $var = $[23, 42, Mu]␤»

[16:28] <lizmat> dinner&

[16:29] <timotimo> there's no container we can put in there to have the array later, eh?

[16:30] *** xpen left
[16:31] *** baest_ joined
[16:31] <dalek> nqp/js-cps: dd4f0de | (Pawel Murias)++ | src/vm/js/bin/run_tests.pl:

[16:31] <dalek> nqp/js-cps: [js] Add test 87 to the list of run tests.

[16:31] <dalek> nqp/js-cps: review: https://github.com/perl6/nqp/commit/dd4f0de6f1

[16:31] <dalek> nqp/js-cps: 3dffa81 | (Pawel Murias)++ | src/vm/js/ (3 files):

[16:31] <dalek> nqp/js-cps: [js] Use the :ctx named parameter for ops that take a ctx.

[16:31] <dalek> nqp/js-cps: review: https://github.com/perl6/nqp/commit/3dffa8189c

[16:31] <dalek> nqp/js-cps: b272c80 | (Pawel Murias)++ | src/vm/js/ (4 files):

[16:31] <dalek> nqp/js-cps: [js] Start of work on compiling code in CPS transformed way.

[16:31] <dalek> nqp/js-cps: review: https://github.com/perl6/nqp/commit/b272c8039d

[16:32] *** kjs__ joined
[16:33] *** jesper_ joined
[16:33] *** kjs__ left
[16:34] *** Ven left
[16:34] *** moznion_ joined
[16:35] *** apejens_ joined
[16:35] *** Zoffix_ joined
[16:35] *** btyler_ joined
[16:35] *** yubimusubi joined
[16:35] *** perlpilot joined
[16:35] *** M-Illandan left
[16:35] *** zakharyas1 left
[16:35] *** moznion left
[16:35] *** vytas left
[16:35] *** baest left
[16:35] *** raydiak left
[16:35] *** rindolf left
[16:35] *** apejens left
[16:35] *** Zoffix left
[16:35] *** PerlJam left
[16:35] *** btyler left
[16:35] *** Possum left
[16:35] *** Actualeyes left
[16:35] *** Actualeyes joined
[16:36] *** kjs_ left
[16:36] <dalek> modules.perl6.org/new-db-builder: df6be01 | (Zoffix Znet)++ | / (3 files):

[16:36] <dalek> modules.perl6.org/new-db-builder: Increase test coverage to 100% for ModulesPerl6.pm

[16:36] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/df6be01b92

[16:36] *** rindolf joined
[16:36] *** vytas joined
[16:37] <grondilu> timotimo: all geometric sequence have an exact formula for their sum, and infix:<...> can recognize geometric sequences.

[16:37] *** M-Illandan joined
[16:38] <lucasb> Interesting, --target=ast can produce some errors that normal perl6 doesn't seem to suffer

[16:38] <lucasb> perl6 --target=ast -e 1 > /dev/null  #=> ===SORRY!=== Failed to flush filehandle: invalid argument

[16:38] <lucasb> perl6 --target=ast -e 'sub f {}'  #=> Sub object coerced to string ... in any dump_node_list at gen/moar/stage2/QASTNode.nqp:81

[16:38] <dalek> rakudo/resupply: 0a48b97 | jnthn++ | src/core/Supply.pm:

[16:38] <dalek> rakudo/resupply: Re-work throttle to use whenever.

[16:38] <dalek> rakudo/resupply: 

[16:38] <dalek> rakudo/resupply: At least, so far as the tests test it.

[16:38] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/0a48b973d8

[16:38] <timotimo> grondilu: and then the user relies on that, accidentally uses real instead of rat and wonders why there's an infinite loop in their program? :)

[16:39] *** ribasushi left
[16:40] <grondilu> not sure what you mean.  The formula remains true with reals.

[16:40] <jnthn> lucasb: Still outputs the AST in the second case though :)

[16:40] <jnthn> And the first is useless anyway

[16:40] <grondilu> as long as the geometric sequence is recognized, you're fine.

[16:40] <lucasb> jnthn: 'useless' is such a strong word :)

[16:41] *** colomon left
[16:43] *** domidumont left
[16:44] *** ribasushi joined
[16:47] <stmuk> is anyone seeing an odd error with ecosystem modules and prove being "unable to fork"?

[16:48] *** ZoffixW joined
[16:49] <ZoffixW> lucasb, yup, you're right. Fix incoming

[16:49] <lucasb> ZoffixW: yeah, tumuch shell escaping, thanks :)

[16:50] <dalek> evalbot: 0bc6e6f | (Zoffix Znet)++ | evalbot.pl:

[16:50] <dalek> evalbot: Give get_revisions_from_file proper path since now we are escaping shell stuff, so ~ is not special

[16:50] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/0bc6e6f94b

[16:50] <ZoffixW> ^ that should do it. If anyone can pull and restart

[16:55] <RabidGravy> stmuk, nope, though that's not to say it's not happening :)

[16:56] *** camelia joined
[16:56] <lucasb> m: say 'hi'

[16:58] *** ChanServ sets mode: +v camelia

[16:58] <camelia> rakudo-moar 8618f4: OUTPUT«hi␤»

[16:58] <arnsholt> jnthn: I've managed to segfault Moar with NativeCall. Investigating now, but looks like CStruct.c's initialize() gets called with an STable whose REPR data is 0x0

[16:58] <ZoffixW> \o/

[16:58] *** sQuEE is now known as sQuEE`

[16:58] <lucasb> ZoffixW: :D

[17:03] *** rigsby joined
[17:03] <dalek> roast/resupply: 6cde112 | jnthn++ | S17-supply/throttle.t:

[17:03] <dalek> roast/resupply: Updates for supply/supplier distinction.

[17:03] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/6cde112f35

[17:03] <dalek> roast/resupply: a819aa1 | jnthn++ | packages/Test/Tap.pm:

[17:03] <dalek> roast/resupply: A (over-simple) fake scheduler.

[17:03] <dalek> roast/resupply: 

[17:03] <dalek> roast/resupply: To allow us to write tests using virtualized time, rather than sleep.

[17:03] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/a819aa127e

[17:03] <dalek> roast/resupply: 1f11585 | jnthn++ | S17-supply/interval.t:

[17:03] <dalek> roast/resupply: Use virtual time in Supply.interval tests.

[17:03] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/1f11585d46

[17:04] <jnthn> .tell lizmat If you're looking for something to hack on with supplies, then re-working some of the supply tests that sleep to use virtual time would be good. Feel free to advance the scheduler a bit too; it's the simplest thing that could possibly work. :)

[17:04] <yoleaux> jnthn: I'll pass your message to lizmat.

[17:04] *** colomon joined
[17:05] <jnthn> At some point we'll want a good virtual time scheduler in the ecosystem too, so everyone can write decent tests :)

[17:05] *** pmurias_ left
[17:05] *** AlexDaniel joined
[17:07] *** rigsby left
[17:07] *** rigsby joined
[17:13] <dalek> roast/resupply: bcb3200 | jnthn++ | S16-io/supply.t:

[17:13] <dalek> roast/resupply: IO::Handle.Supply is not live.

[17:13] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/bcb32000e2

[17:13] <dalek> roast/resupply: 2408bce | jnthn++ | S02-types/WHICH.t:

[17:13] <dalek> roast/resupply: Fix WHICH.t: remove unknown type, add new one.

[17:13] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/2408bce935

[17:14] <dalek> doc: cf18697 | (Zoffix Znet)++ | CONTRIBUTING.md:

[17:14] <dalek> doc: Update CONTRIBUTING.md

[17:14] <dalek> doc: 

[17:14] <dalek> doc: Link to https://en.wikipedia.org/wiki/Active_voice for those who're not familiar with the concept

[17:14] <dalek> doc: review: https://github.com/perl6/doc/commit/cf186970e0

[17:14] *** kjs_ joined
[17:15] *** doublec_ left
[17:16] <dalek> roast/resupply: c82b01a | jnthn++ | integration/advent2013-day19.t:

[17:16] <dalek> roast/resupply: Update for supply/supplier distinction.

[17:16] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/c82b01af4b

[17:16] <jnthn> .oO( The active voice was encouraged. )

[17:17] *** doublec joined
[17:17] <ZoffixW> :D

[17:18] <dalek> doc: f94185e | (Zoffix Znet)++ | doc/Language/io.pod:

[17:18] <dalek> doc: Reword / typo

[17:18] <dalek> doc: review: https://github.com/perl6/doc/commit/f94185e4d6

[17:18] *** emdashcomma joined
[17:21] *** telex left
[17:21] *** gtodd left
[17:22] *** telex joined
[17:22] *** pat_js joined
[17:24] <dalek> doc: 8feb8de | (Zoffix Znet)++ | doc/Language/io.pod:

[17:24] <dalek> doc: Reword

[17:24] <dalek> doc: review: https://github.com/perl6/doc/commit/8feb8de8b7

[17:25] *** kjs_ left
[17:27] <TimToady> m: my (\d); d = 42; dd d

[17:27] <camelia> rakudo-moar 8618f4: OUTPUT«Int $var = 42␤»

[17:28] <TimToady> lizmat: this might be related to the $ that happens to the array

[17:28] <TimToady> my (\d) should probably fail without a bindee

[17:30] *** abraxxa left
[17:31] <dalek> doc: 94e045f | (Zoffix Znet)++ | doc/Language/io.pod:

[17:31] <dalek> doc: Reword

[17:31] <dalek> doc: review: https://github.com/perl6/doc/commit/94e045f850

[17:31] <dalek> doc: 2ca1886 | (Zoffix Znet)++ | doc/Language/io.pod:

[17:31] <dalek> doc: Do not explicitly suggest to check for file"s existence before reading

[17:31] <dalek> doc: 

[17:31] <dalek> doc: It"s not a suitable check due to race conditions and errors when opening for read aren"t as evil as the current wording suggests

[17:31] <dalek> doc: review: https://github.com/perl6/doc/commit/2ca1886d3a

[17:32] <lizmat> .botsnack

[17:32] <yoleaux> 17:04Z <jnthn> lizmat: If you're looking for something to hack on with supplies, then re-working some of the supply tests that sleep to use virtual time would be good. Feel free to advance the scheduler a bit too; it's the simplest thing that could possibly work. :)

[17:32] <yoleaux> :D

[17:32] <jnthn> m: module foo; sub foo() { say "OH HAI" }; foo; foo()

[17:32] <camelia> rakudo-moar 8618f4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/I3bZzMcWtU␤Semicolon form of 'module' without 'unit' is illegal.  You probably want to use 'unit module'␤at /tmp/I3bZzMcWtU:1␤------> 3module foo;7⏏5 sub foo() { say "OH HAI" }; foo; foo()␤»

[17:32] <jnthn> m: module foo { }; sub foo() { say "OH HAI" }; foo; foo()

[17:32] <camelia> rakudo-moar 8618f4: ( no output )

[17:33] <jnthn> TimToady: In ^^, foo() ends up being a coercion type literal

[17:33] <jnthn> TimToady: Not quite sure what we should do, if anything, here

[17:33] <jnthn> That's https://rt.perl.org/Ticket/Display.html?id=115608. And related is https://rt.perl.org/Ticket/Display.html?id=113892.

[17:34] <jnthn> m: module A { enum Day is export <Mon Tue>; sub Day is export { 'sub Day' } }; import A; say Day(0);

[17:34] <camelia> rakudo-moar 8618f4: OUTPUT«Mon␤»

[17:34] <jnthn> There's no symbol table collision in either case, 'cus subs go in as &foo and types as foo

[17:35] <lizmat> m: my %hash = a => 1; say item(%hash).perl  # I think this should be "${:a(1)}"

[17:35] <camelia> rakudo-moar 8618f4: OUTPUT«{:a(1)}␤»

[17:35] <lizmat> ^^^ TimToady jnthn do you agree ?

[17:35] *** pat_js left
[17:36] <dalek> doc: b59e3f3 | (Zoffix Znet)++ | doc/Language/io.pod:

[17:36] <dalek> doc: Reword / typos

[17:36] <dalek> doc: review: https://github.com/perl6/doc/commit/b59e3f39a3

[17:36] <jnthn> lizmat: I'd say so

[17:36] <lizmat> multi sub item(\x)    { my $ = x }    # the appropriate item() candidate

[17:36] <jnthn> Yeah, suspect the .perl is wrong

[17:36] <lizmat> ok, then I'll fix the test  :-)

[17:37] <lizmat> yeah, I'm reworking the perlseen bits, and after that this test failed

[17:37] *** rigsby left
[17:37] <lizmat> so it seems I also fixed a bug  :-)

[17:37] <zengargoyle> good * #perl6

[17:37] <lizmat> zengargoyle o/

[17:37] <dalek> doc: 8ecbc76 | (Zoffix Znet)++ | doc/Language/io.pod:

[17:37] <dalek> doc: Typo

[17:37] <dalek> doc: review: https://github.com/perl6/doc/commit/8ecbc76302

[17:37] <ZoffixW> \o

[17:39] <dalek> doc: 5c45e67 | (Wenzel P. P. Peppmeyer)++ | doc/Type/IO/Handle.pod:

[17:39] <dalek> doc: clarify IO::Handle.getc

[17:39] <dalek> doc: review: https://github.com/perl6/doc/commit/5c45e6715a

[17:39] <dalek> doc: 5473320 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod:

[17:39] <dalek> doc: Merge pull request #214 from gfldex/master

[17:39] <dalek> doc: 

[17:39] <dalek> doc: clarify IO::Handle.getc

[17:39] <dalek> doc: review: https://github.com/perl6/doc/commit/547332020b

[17:39] *** vendethiel joined
[17:40] <dalek> rakudo/nom: 1c36fb7 | lizmat++ | src/core/ (7 files):

[17:40] <dalek> rakudo/nom: Generalize .perlseen/.gistseen handling some more

[17:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c36fb7d57

[17:41] <dalek> roast: 6a16a67 | lizmat++ | S02-types/hash.t:

[17:41] <dalek> roast: Fix item %hash test

[17:41] <dalek> roast: review: https://github.com/perl6/roast/commit/6a16a67f32

[17:42] *** lucasb left
[17:43] *** sufrostico joined
[17:44] *** jesper_ left
[17:46] <dalek> modules.perl6.org/new-db-builder: b84aa37 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist.pm:

[17:46] <dalek> modules.perl6.org/new-db-builder: Handle case when Dist Source fails and returns undef

[17:46] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/b84aa37492

[17:47] *** khisanth_ is now known as Khisanth

[17:47] *** sufrostico left
[17:59] *** BenGoldberg left
[18:00] *** rindolf left
[18:02] <TimToady> jnthn: re foo vs &foo, it almost doesn't matter which way we do it, since you can work around with &foo() the one direction, and ().foo the other direction; a middle way would be to allow 'undeclaring' a typename in an inner scope, which we can't do right now, but the status quo seems okay to me, where type name declarations always take precedence

[18:03] <TimToady> m: module foo { }; { sub foo() { say "OH HAI" }; my \foo = &foo; foo; &foo() }

[18:03] <camelia> rakudo-moar 1c36fb: OUTPUT«OH HAI␤»

[18:03] <TimToady> m: module foo { }; { sub foo() { "OH HAI" }; my \foo = &foo; say foo; say &foo() }

[18:03] <camelia> rakudo-moar 1c36fb: OUTPUT«sub foo () { #`(Sub|59510816) ... }␤OH HAI␤»

[18:03] <dalek> rakudo/resupply: 986b6e9 | jnthn++ | src/core/Supply.pm:

[18:03] <dalek> rakudo/resupply: Rename last -> tail, align semantics.

[18:03] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/986b6e9b38

[18:03] <dalek> rakudo/resupply: d5ab9bf | jnthn++ | t/spectest.data:

[18:03] <dalek> rakudo/resupply: Chase test file renaming.

[18:03] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/d5ab9bfadb

[18:04] <TimToady> well, that almost works as a type override...

[18:04] <TimToady> m: module foo { }; { sub foo() { "OH HAI" }; my \foo = &foo; say foo; say foo() }

[18:04] <camelia> rakudo-moar 1c36fb: OUTPUT«sub foo () { #`(Sub|67694576) ... }␤OH HAI␤»

[18:04] <TimToady> lets you drop the & anyway

[18:04] <dalek> roast/resupply: 108337d | jnthn++ | S17-supply/ (2 files):

[18:04] <dalek> roast/resupply: Chase Supply.last -> Supply.tail.

[18:04] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/108337d810

[18:04] <jnthn> OK, thanks.

[18:05] <jnthn> Those'll be two very RTs to resolve them :)

[18:05] <jnthn> Just tests for current behavior and close 'em.

[18:05] <TimToady> so I'd say Not A Bug

[18:05] <jnthn> *very easy

[18:05] *** rindolf joined
[18:06] * TimToady now imagines 'anon class foo {}' as a way to hide the outer definition of foo

[18:07] <dalek> roast/resupply: a1eb506 | jnthn++ | S02-types/WHICH.t:

[18:07] <dalek> roast/resupply: Toss two types that are gone.

[18:07] <dalek> roast/resupply: review: https://github.com/perl6/roast/commit/a1eb5062d4

[18:07] <TimToady> you-don't-see-me class foo {}

[18:07] <jnthn> :)

[18:07] <jnthn> Gonna merge resupply after this spectest run

[18:08] <jnthn> May as well have the upheavel sooner rather than later

[18:08] *** TEttinger joined
[18:09] <zengargoyle> m: my \now = 1; say DateTime.now;

[18:09] <camelia> rakudo-moar 1c36fb: OUTPUT«2015-11-26T19:09:10+01:00␤»

[18:09] <dalek> rakudo/resupply: df06a24 | jnthn++ | t/spectest.data:

[18:09] <dalek> rakudo/resupply: Toss S17-supply/on.t, add S17-supply/produce.t.

[18:09] <dalek> rakudo/resupply: review: https://github.com/rakudo/rakudo/commit/df06a24290

[18:09] <nine> jnthn: speaking of merging: what do you see as requirements for merging curli?

[18:09] *** leont joined
[18:10] <jnthn> nine: Spectests in shape, Panda still installs modules (Task::Star is a good check)

[18:10] *** kjs_ joined
[18:10] <jnthn> If there has to be a Panda patch too that's also fine

[18:12] <zengargoyle> guess totally fooling the concept of now is a different matter.

[18:16] <dalek> modules.perl6.org/new-db-builder: 6cd62dd | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source.pm:

[18:16] <dalek> modules.perl6.org/new-db-builder: Use "url" throughout

[18:16] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/6cd62dde98

[18:17] <jnthn> nine: I'd generally prefer "sooner rather than later"

[18:17] <dalek> modules.perl6.org/new-db-builder: 29ec6ff | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source.pm:

[18:17] <dalek> modules.perl6.org/new-db-builder: Fix bug where dists can override private build info via rogue META keys

[18:17] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/29ec6ff3d6

[18:18] <jnthn> nine: So once you feel comfortable with the state of it, then I'm fine.

[18:20] <dalek> Heuristic branch merge: pushed 21 commits to rakudo/nom by jnthn

[18:20] <dalek> Heuristic branch merge: pushed 19 commits to roast by jnthn

[18:20] <nine> jnthn: ok :)

[18:20] <jnthn> resupply merged :)

[18:20] <RabidGravy> boom!

[18:21] <nine> Seems like there are modules in Task::Star that modify @*INC (at least in tests)

[18:21] <ZoffixW> \o/ jnthn++

[18:21] <ZoffixW> Pluggable relies on it

[18:21] <ZoffixW> (probably not in Task::Star tho)

[18:21] <jnthn> Ah, OK

[18:21] <jnthn> Well, we can't do much about that I guess.

[18:22] <ZoffixW> Yeah

[18:22] <jnthn> Better to break things sooner, so they can be fixed sooner.

[18:23] <RabidGravy> (breaking things)++

[18:23] *** domidumont joined
[18:23] *** AlexDaniel left
[18:23] *** kjs_ left
[18:23] <jnthn> At least folks know that in less than a month, the churn will be over. :)

[18:23] <nine> You mean I don't get to merge it the day before the release and vanish for a couple of weeks vacation?

[18:24] <jnthn> :P

[18:24] <ZoffixW> :P

[18:24] <jnthn> I'd rather we merge it soon, but vanishing for vacation after the release is quite sane. :)

[18:24] * jnthn sure as heck will be

[18:25] <jnthn> OK, off to cook :)

[18:25] *** vendethiel- joined
[18:26] <dalek> modules.perl6.org/new-db-builder: f6c3592 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source.pm:

[18:26] <dalek> modules.perl6.org/new-db-builder: Delete all rogue META keys that might interfere with our build code

[18:26] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/f6c35924bd

[18:32] *** lucasb joined
[18:32] *** rigsby joined
[18:33] *** adu joined
[18:33] <lucasb> merge all the things /o/

[18:33] <lucasb> and let's not forget to branch perl 7 development after xmas :D

[18:33] *** Bucciarati left
[18:34] *** vendethiel left
[18:37] *** kjs_ joined
[18:38] *** raydiak joined
[18:39] *** emdashcomma left
[18:41] *** emdashcomma joined
[18:46] *** emdashcomma left
[18:47] <Quom_> Did anyone else notice this issue:

[18:47] <Quom_> m: sub f($a) {$a**2}; say [+] (^100).hyper.map(&f)

[18:47] <camelia> rakudo-moar 51d695: OUTPUT«328350␤»

[18:47] <Quom_> m: multi f($a) {$a**2}; say [+] (^100).hyper.map(&f)

[18:47] <camelia> rakudo-moar 51d695: OUTPUT«0␤»

[18:47] <Quom_> m: multi f($a) {$a**2}; say [+] (^100).map(&f)

[18:47] <camelia> rakudo-moar 51d695: OUTPUT«328350␤»

[18:48] <TimToady> I think we noticed something like it the other day, dunno if anybody rakudobugged it

[18:49] *** bowtie left
[18:51] *** adu left
[18:53] *** charsbar__ joined
[18:56] *** zoosha_ joined
[18:58] <Quom_> RT #126597

[18:58] *** krunen_ joined
[18:58] <Quom_> I thought we had a bot for that?

[19:00] *** Timbus_ joined
[19:01] *** skaji_ joined
[19:02] <Quom_> TimToady: Looks like we encountered a race condition

[19:02] *** rurban left
[19:04] *** raydiak left
[19:04] *** lucasb left
[19:04] *** rindolf left
[19:04] *** ribasushi left
[19:04] *** vytas left
[19:04] *** moznion_ left
[19:04] *** zacts left
[19:04] *** skids left
[19:04] *** andreoss left
[19:04] *** molaf left
[19:04] *** espadrine left
[19:04] *** charsbar_ left
[19:04] *** zoosha left
[19:04] *** maddingue left
[19:04] *** vike left
[19:04] *** Ulti left
[19:04] *** mattp__ left
[19:04] *** Khisanth left
[19:04] *** Upasaka left
[19:04] *** Timbus left
[19:04] *** krakan left
[19:04] *** atta left
[19:04] *** bakedb left
[19:04] *** avar left
[19:04] *** confuseAcat left
[19:04] *** burnersk left
[19:04] *** jordman_ left
[19:04] *** yoleaux left
[19:04] *** Jonis left
[19:04] *** solarbunny left
[19:04] *** pnu left
[19:04] *** ZoffixW left
[19:04] *** MilkmanDan left
[19:04] *** corbyhaas left
[19:04] *** frew left
[19:04] *** vendethiel- left
[19:05] *** M-Illandan left
[19:05] *** jonas1 left
[19:05] *** mtj_ left
[19:05] *** breinbaas left
[19:05] *** stmuk left
[19:05] *** f3ew left
[19:05] *** tadzik left
[19:05] *** daxim left
[19:05] *** novapatch left
[19:05] *** stux|RC-only left
[19:05] *** lizmat left
[19:05] *** pdcawley_ left
[19:05] *** Gruber left
[19:05] *** grondilu left
[19:05] *** leont left
[19:05] *** telex left
[19:05] *** baest_ left
[19:05] *** samb1 left
[19:05] *** pecastro left
[19:05] *** boegel left
[19:05] *** skarn left
[19:05] *** JimmyZ left
[19:05] *** olinkl left
[19:05] *** dustinm` left
[19:05] *** kipd left
[19:05] *** clkao left
[19:05] *** revdiablo left
[19:05] *** zostay_ left
[19:05] *** ShimmerFairy left
[19:05] *** flaviusb left
[19:05] *** tony-o left
[19:05] *** TimToady left
[19:05] *** oka_ left
[19:06] *** yakudza left
[19:06] *** gensym left
[19:06] *** Gardner left
[19:06] *** ilbot3 left
[19:06] *** freeze left
[19:06] *** khw left
[19:06] *** M-eternaleye left
[19:06] *** obra left
[19:06] *** esh left
[19:06] *** dalek left
[19:06] *** PotatoGim left
[19:06] *** DrPete_ left
[19:06] *** cgfbee left
[19:06] *** hacst left
[19:06] *** mathw left
[19:06] *** pierrot left
[19:06] *** ugexe left
[19:06] *** sjn left
[19:06] *** havenwood left
[19:06] *** advwp_ left
[19:07] *** TEttinger left
[19:07] *** btyler_ left
[19:07] *** colomon left
[19:07] *** Zoffix_ left
[19:07] *** MadcapJake left
[19:07] *** xfix left
[19:07] *** Skarsnik left
[19:07] *** scopesoft left
[19:07] *** El_Che left
[19:07] *** thundergnat left
[19:07] *** tinita left
[19:07] *** darutoko left
[19:07] *** pochi left
[19:07] *** lucs_ left
[19:07] *** moritz left
[19:07] *** mls left
[19:07] *** yeltzooo left
[19:07] *** saaki left
[19:07] *** kjs_ left
[19:07] *** domidumont left
[19:07] *** doublec left
[19:07] *** bitmap joined
[19:08] *** Peter_R joined
[19:08] *** rjbs joined
[19:08] *** Humbedooh joined
[19:08] *** ribasushi joined
[19:08] *** rindolf joined
[19:08] *** jordman joined
[19:08] *** vytas joined
[19:08] *** diakopter joined
[19:08] *** brabo joined
[19:08] *** CAAA5FQ joined
[19:08] *** Jonis joined
[19:08] *** Celelibi joined
[19:08] *** Util joined
[19:08] *** mspo_ joined
[19:08] *** jantore_ joined
[19:08] *** emdashcomma joined
[19:08] *** krakan_ joined
[19:08] *** Hor|zon_ joined
[19:08] *** atta_ joined
[19:08] *** adhoc_ joined
[19:08] *** cxreg2 joined
[19:08] *** broquain1 joined
[19:08] *** Sgeo__ joined
[19:08] *** Ulti_ joined
[19:08] *** btyler joined
[19:08] *** adu joined
[19:08] *** leont joined
[19:08] *** telex joined
[19:08] *** ZoffixW joined
[19:08] *** M-Illandan joined
[19:08] *** baest_ joined
[19:08] *** jonas1 joined
[19:08] *** samb1 joined
[19:08] *** pecastro joined
[19:08] *** boegel joined
[19:08] *** mtj_ joined
[19:08] *** breinbaas joined
[19:08] *** stmuk joined
[19:08] *** solarbunny joined
[19:08] *** pnu joined
[19:08] *** skarn joined
[19:08] *** MilkmanDan joined
[19:08] *** f3ew joined
[19:08] *** frew joined
[19:08] *** corbyhaas joined
[19:08] *** clkao joined
[19:08] *** tadzik joined
[19:08] *** daxim joined
[19:08] *** JimmyZ joined
[19:08] *** revdiablo joined
[19:08] *** novapatch joined
[19:08] *** olinkl joined
[19:08] *** zostay_ joined
[19:08] *** dustinm` joined
[19:08] *** stux|RC-only joined
[19:08] *** ShimmerFairy joined
[19:08] *** flaviusb joined
[19:08] *** tony-o joined
[19:08] *** lizmat joined
[19:08] *** pdcawley_ joined
[19:08] *** TimToady joined
[19:08] *** oka_ joined
[19:08] *** kipd joined
[19:08] *** yakudza joined
[19:08] *** gensym joined
[19:08] *** Gardner joined
[19:08] *** Gruber joined
[19:08] *** ilbot3 joined
[19:08] *** freeze joined
[19:08] *** sftp joined
[19:08] *** Woodi joined
[19:08] *** Gothmog_ joined
[19:08] *** bonsaikitten joined
[19:08] *** huf joined
[19:08] *** tudorcon1tantin joined
[19:08] *** b2gills joined
[19:08] *** uruwi_ joined
[19:08] *** retupmoc_ joined
[19:08] *** DrForr_ joined
[19:08] *** grondilu joined
[19:08] *** leedo joined
[19:08] *** autarch joined
[19:08] *** garu_ joined
[19:08] *** sitaram_ joined
[19:08] *** domm joined
[19:08] *** CurtisOvidPoe joined
[19:08] *** noganex joined
[19:08] *** flussence joined
[19:08] *** Hotkeys joined
[19:08] *** hobbs joined
[19:08] *** DarthGandalf joined
[19:08] *** [Tux] joined
[19:08] *** royalkiran007 joined
[19:08] *** sammers joined
[19:08] *** ir2ivps4 joined
[19:08] *** gypsydave5 joined
[19:08] *** geekosaur joined
[19:08] *** simcop2387 joined
[19:08] *** ycaymanbo joined
[19:08] *** shamu_ joined
[19:08] *** Praise joined
[19:08] *** erdic joined
[19:08] *** gfldex joined
[19:08] *** ab5tract joined
[19:08] *** japhb joined
[19:08] *** Guest51288 joined
[19:08] *** DrParis joined
[19:08] *** cibs joined
[19:08] *** zhmylove_ joined
[19:08] *** isacloud joined
[19:08] *** riatre_ joined
[19:08] *** pyrimidine joined
[19:08] *** Psyche^_ joined
[19:08] *** arnsholt joined
[19:08] *** [Coke] joined
[19:08] *** BinGOs joined
[19:08] *** lsm-desktop joined
[19:08] *** silug joined
[19:08] *** Spot__ joined
[19:08] *** ponbiki joined
[19:08] *** ggherdov joined
[19:08] *** SmokeMachine_ joined
[19:08] *** xdbr joined
[19:08] *** hoelzro joined
[19:08] *** robinsmidsrod joined
[19:09] <TimToady> anyway, I reported the HyperSeq bug, should have an RT shortly

[19:09] *** xenu joined
[19:09] *** vendethiel joined
[19:09] *** zacts joined
[19:09] *** camelia left
[19:09] *** emdashcomma_ joined
[19:09] <TimToady> camelia, Excess Flood?

[19:09] *** molaf joined
[19:10] *** go|dfish joined
[19:10] *** abaugher joined
[19:10] *** sunnavy_ joined
[19:10] *** Upasaka_ joined
[19:10] *** dpk joined
[19:10] *** ssflying_ joined
[19:10] *** KotH_ joined
[19:10] *** bakedb_ joined
[19:10] *** kjs_ joined
[19:10] *** domidumont joined
[19:10] *** doublec joined
[19:10] *** ilbelkyr joined
[19:10] *** eiro joined
[19:10] <Quom_> TimToady: As I said before the netsplit ended, there's already a ticket in https://rt.perl.org/Ticket/Display.html?id=126597

[19:10] *** go|dfish left
[19:10] *** go|dfish joined
[19:10] *** ilbelkyr left
[19:10] *** skids joined
[19:11] <TimToady> ah, well, mine's a dup then

[19:11] *** xfix joined
[19:11] *** dgl joined
[19:11] *** nine_ joined
[19:11] *** rhr_ joined
[19:11] *** moznion joined
[19:11] *** Brock joined
[19:11] *** maddingu1 joined
[19:11] *** jnthn_ joined
[19:11] *** jojotus_ joined
[19:11] *** vike1 joined
[19:11] *** zengargo1le joined
[19:11] *** smash_ joined
[19:11] *** notostraca joined
[19:11] *** Zoffix_ joined
[19:11] *** MadcapJake joined
[19:11] *** Skarsnik joined
[19:11] *** scopesoft joined
[19:11] *** El_Che joined
[19:11] *** thundergnat joined
[19:11] *** tinita joined
[19:11] *** darutoko joined
[19:11] *** pochi joined
[19:11] *** lucs_ joined
[19:11] *** moritz joined
[19:11] *** mrf joined
[19:11] *** mls joined
[19:11] *** jevin_ joined
[19:11] *** salva joined
[19:11] *** johan joined
[19:11] *** nowan joined
[19:11] *** larion joined
[19:11] *** bbarker` joined
[19:11] *** bhm joined
[19:11] *** woodruffw joined
[19:11] *** hahainternet joined
[19:11] *** SHODAN joined
[19:11] *** _sri joined
[19:11] *** dbohdan joined
[19:11] *** nebuchadnezzar joined
[19:11] *** jdv79 joined
[19:11] *** Axord joined
[19:11] *** diegok joined
[19:11] *** ashleydev joined
[19:11] *** ingy joined
[19:11] *** Exodist joined
[19:11] *** yeltzooo joined
[19:11] *** saaki joined
[19:11] *** sergot joined
[19:11] <TimToady> better too many going for the ball than too few :)

[19:11] <Quom_> Hah, true :)

[19:11] *** ilbelkyr joined
[19:11] * Quom_ afk

[19:11] *** lucasb joined
[19:12] *** kjs_ left
[19:12] *** Khisanth joined
[19:13] *** notostraca is now known as TEttinger

[19:13] *** Amnez777 joined
[19:13] *** zengargo1le is now known as zengargoyle

[19:14] *** MadcapJake left
[19:14] *** raydiak joined
[19:14] *** MadcapJake joined
[19:14] *** khw joined
[19:14] *** M-eternaleye joined
[19:14] *** obra joined
[19:14] *** esh joined
[19:14] *** dalek joined
[19:14] *** PotatoGim joined
[19:14] *** DrPete_ joined
[19:14] *** cgfbee joined
[19:14] *** hacst joined
[19:14] *** mathw joined
[19:14] *** pierrot joined
[19:14] *** ugexe joined
[19:14] *** sjn joined
[19:14] *** havenwood joined
[19:14] *** advwp_ joined
[19:14] *** luis joined
[19:14] *** masak joined
[19:14] *** cfloare joined
[19:14] *** chewie_2082 joined
[19:14] *** risou joined
[19:14] *** avalenn joined
[19:14] *** jme` joined
[19:14] *** Juerd joined
[19:14] *** mephinet joined
[19:14] *** roguelazer joined
[19:14] *** jsimonet joined
[19:14] *** mrsolo joined
[19:14] *** ilmari joined
[19:14] *** integral joined
[19:14] *** zemmihates joined
[19:14] *** chansen_ joined
[19:14] *** timotimo joined
[19:14] *** [ptc] joined
[19:14] *** xnrand joined
[19:14] *** dylanwh joined
[19:14] *** orwell.freenode.net sets mode: +v dalek

[19:15] *** PotatoGim left
[19:15] *** cgfbee left
[19:15] *** Amnez777 left
[19:15] *** Amnez777 joined
[19:15] *** doublec_ joined
[19:16] <ZoffixW> Man, the search on http://irclog.perlgeek.de/perl6/today really sucks. It can't find what I want 70% of the time, even though I 100% know the terms I search for were said.

[19:16] *** Sgeo_ joined
[19:16] *** KotH_ is now known as KotH

[19:16] *** camelia joined
[19:16] <ZoffixW> Anyone remember who suggested "Koality" instead of "Kwalitee"?

[19:16] *** doublec left
[19:17] <TEttinger> like koala bears?

[19:17] <ZoffixW> Yeah :)

[19:17] *** lucasb_ joined
[19:17] <TEttinger> they're cute lil fellers

[19:18] *** sufrostico joined
[19:18] <ZoffixW> http://cdn.meme.am/instances/59188417.jpg

[19:18] <skids> ZoffixW: that search has its issues but considering the state of the art has been steadily regressing for the last decade, it is ahead by not getting worse. :-)

[19:18] <ZoffixW> heh

[19:19] *** molaf_ joined
[19:19] *** zacts_ joined
[19:19] *** cxreg joined
[19:19] <arnsholt> m: say "alive?"

[19:20] <arnsholt> Oh well

[19:20] <ZoffixW> Careful! Last time you did that we got a giant netsplit :P

[19:23] *** ponbiki_ joined
[19:24] *** PotatoGim joined
[19:24] *** emdashco- joined
[19:24] *** mspo joined
[19:25] *** jordman is now known as 16WAASGSD

[19:25] *** rjbs is now known as 18WAA8QTX

[19:26] *** Bucciarati joined
[19:26] *** vendethiel- joined
[19:26] *** emdashco| joined
[19:26] <RabidGravy> OOPS! https://travis-ci.org/sergot/http-useragent/builds/93413230

[19:26] *** emdashcomma_ left
[19:26] *** emdashcomma left
[19:26] <lucasb_> ZoffixW: I sometimes use google to search the irclog: https://www.google.com/search?q=site:irclog.perlgeek.de/perl6/2015-11+someword

[19:26] *** lucasb_ left
[19:26] *** ribasushi left
[19:26] *** vendethiel left
[19:26] *** 18WAA8QTX left
[19:26] *** broquain1 left
[19:26] *** mspo_ left
[19:26] *** jantore_ left
[19:26] *** adhoc_ left
[19:27] *** jantore joined
[19:27] *** rjbs joined
[19:27] *** literal joined
[19:27] *** jordman joined
[19:27] *** avar joined
[19:27] *** wtw joined
[19:27] *** mattp__ joined
[19:27] *** confuseAcat joined
[19:27] <ZoffixW> lucasb, I tried that, but did not find what I was looking for

[19:27] *** Actualeyes left
[19:27] *** Khisanth left
[19:27] *** lucasb left
[19:27] *** molaf left
[19:27] *** zacts left
[19:27] *** vytas left
[19:27] *** cxreg2 left
[19:27] *** Sgeo__ left
[19:27] <RabidGravy> anyone got an insight as to what that "MVMArray: Index out of bounds" might mean before I chase it down?

[19:27] *** wtw left
[19:27] <TimToady> looks like camelia didn't get voiced...

[19:27] *** ribasushi joined
[19:28] *** ChanServ sets mode: +v camelia

[19:28] <ZoffixW> m: say ¼²

[19:28] *** Peter_R left
[19:29] <TimToady> but maybe that's not the problemo

[19:29] *** xenu left
[19:29] *** rindolf left
[19:29] *** Hor|zon_ left
[19:29] *** atta_ left
[19:29] *** Ulti_ left
[19:29] *** btyler left
[19:30] *** Util left
[19:30] *** krakan_ left
[19:30] *** leont left
[19:30] *** telex left
[19:30] *** baest_ left
[19:30] *** pecastro left
[19:30] *** mprelude joined
[19:31] *** Hor|zon joined
[19:31] *** vytas joined
[19:31] *** sufrosti1o joined
[19:31] <Skarsnik> someone know why DBI do/execute return '0E0' instead of just ... 0 ?

[19:31] *** jordman_ joined
[19:31] *** Util joined
[19:31] <RabidGravy> 0 but true

[19:31] *** krakan joined
[19:31] *** telex joined
[19:32] *** adhoc joined
[19:32] <nine_> jnthn_: from a user's perspective the most annoying thing about curli is that it won't let me install an already installed dist. Like the CORE dist that's installed as part of the build process. Or when panda's module data is out of sync with the really installed dists...

[19:32] *** sjohnson joined
[19:33] <RabidGravy> Skarsnik, so it succeeded but returned 0

[19:33] <dalek> rakudo/curli: 7c948ef | (Stefan Seifert)++ | src/core/CompUnit/PrecompilationRepository.pm:

[19:33] <dalek> rakudo/curli: Fixup error message when precompilation failed

[19:33] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/7c948ef14e

[19:33] <Skarsnik> why not returning True?

[19:33] <ZoffixW> Skarsnik, because it's indicating that 0 things were affected

[19:34] <ZoffixW> Skarsnik, 0 and false would mean an error happened.

[19:34] *** nwc10 joined
[19:34] <ZoffixW> And I'm suspecting this might be an artifact from P5's implementation, if there's a saner way to do that sort of thing in P6

[19:34] <nwc10> jnthn_: you're aware that t/spec/S17-supply/categorize.t

[19:34] <nwc10> now aborts (for me)

[19:34] *** broquaint joined
[19:34] <nwc10> #2  0x00007ffff66ab9d1 in uv_mutex_destroy (mutex=0x604000528cd0) at 3rdparty/libuv/src/unix/thread.c:114

[19:34] <nwc10> #3  0x00007ffff6530a09 in gc_free (tc=0x61600000fc80, obj=0x7ffff2637ad8) at src/6model/reprs/ReentrantMutex.c:43

[19:35] *** rjbs- joined
[19:35] *** cgfbee joined
[19:35] <nine_> ZoffixW: well in Perl 6 we could have a 0 but True. However the same problem was discussed at length regarding Str.index and the solution was to add syntax as replacement for if

[19:35] <nwc10> jnthn_: http://paste.scsys.co.uk/501988

[19:35] *** burnersk joined
[19:35] *** literal left
[19:35] *** literal joined
[19:35] *** jordman left
[19:35] *** wtw joined
[19:35] *** mattp__ left
[19:35] *** rjbs left
[19:35] *** wtw left
[19:35] *** wtw joined
[19:35] <nwc10> no ASAN barfage

[19:36] *** sufrosti1o left
[19:36] *** literal left
[19:36] *** avar left
[19:36] *** literal joined
[19:36] *** Peter_R joined
[19:36] *** sufrostico left
[19:36] *** btyler joined
[19:37] *** avar joined
[19:37] *** avar left
[19:37] *** avar joined
[19:37] *** zacts_ is now known as zacts

[19:37] *** vendethiel- left
[19:37] *** Celelibi_ joined
[19:38] *** raiph joined
[19:38] *** sufrostico joined
[19:38] *** sufrostico left
[19:39] *** camelia left
[19:39] *** Sgeo_ left
[19:39] *** Humbedooh left
[19:39] *** 16WAASGSD left
[19:39] *** Celelibi left
[19:39] *** adu left
[19:39] *** ponbiki left
[19:39] <dalek> doc: 2f802c5 | (Zoffix Znet)++ | / (2 files):

[19:39] <dalek> doc: Hide home page logo on mobile (Closes #204)

[19:39] <dalek> doc: 

[19:39] <dalek> doc: I"m choosing to hide the logo entirely, since on screens that small, the logo in the header looks large enough to serve the role for the larger homepage logo as well

[19:39] <dalek> doc: review: https://github.com/perl6/doc/commit/2f802c5f51

[19:39] <Skarsnik> lol

[19:39] <Skarsnik> the split

[19:39] <dalek> modules.perl6.org/new-db-builder: a88b0bb | (Zoffix Znet)++ | lib/ModulesPerl6 (2 files):

[19:39] <dalek> modules.perl6.org/new-db-builder: Write docs for ModulesPerl6::DbBuilder::Dist::Source subclass

[19:39] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/a88b0bbd57

[19:39] <Skarsnik> nine_, what was the solution for .index?

[19:40] *** baest joined
[19:40] *** Khisanth joined
[19:40] *** telex left
[19:41] *** Celelibi_ is now known as Celelibi

[19:41] *** Ulti joined
[19:41] <nine_> Skarsnik: I think it's when "foo".index("f") -> $index { say $index };

[19:41] <nine_> m: when "foo".index("f") -> $index { say $index };

[19:42] *** yqt joined
[19:42] <Skarsnik> so if "foo".index('f') will be false?

[19:42] <nine_> yes

[19:43] <nine_> if checks boolean value, when checks definedness

[19:43] *** rindolf joined
[19:44] <Skarsnik> I really don't like the '0E0' it's ugly. especially I used select statement to see if an id was already in the DB and having to test against '0E0' irkked me x)

[19:44] *** emdashco- left
[19:45] *** atta joined
[19:45] *** pecastro joined
[19:46] <ZoffixW> Skarsnik, why do you test agains '0E0'?

[19:46] *** crux joined
[19:46] *** sufrostico joined
[19:46] *** confuseAcat left
[19:47] *** wtw left
[19:47] *** burnersk left
[19:47] *** wtw joined
[19:47] *** Peter_R left
[19:47] *** sufrostico left
[19:47] *** sufrostico joined
[19:47] *** wtw left
[19:47] *** wtw joined
[19:47] <ZoffixW> Skarsnik, perl6 -e 'my $ret_succ = "0E0"; my $ret_err = "0"; say "Success on zero rows!" if $ret_succ; say "Error!!" if $ret_err'

[19:47] *** confuseAcat joined
[19:47] <ZoffixW> well.. s/zero rows/possibly zero rows/;

[19:47] <moritz> 0 but True

[19:47] <ZoffixW> And I might be wrong

[19:48] <Skarsnik> funny thing in DBIsh nothing return 0 x)

[19:48] <ZoffixW> 'cause I recall P6 treats string "0" as true.

[19:48] *** leont joined
[19:48] *** burnersk joined
[19:49] *** sufrostico left
[19:49] <ZoffixW> Yeah, my example above is wrong.

[19:49] *** telex joined
[19:49] *** sufrostico joined
[19:50] <ZoffixW> So I don't think this type of "zero but true" works in P6.

[19:50] *** camelia joined
[19:50] <psch> m: with "foo".index("f") { .say }

[19:51] <ZoffixW> I get 0 in the terminal

[19:51] *** ChanServ sets mode: +v camelia

[19:51] <camelia> rakudo-moar 51d695: OUTPUT«0␤»

[19:51] <TimToady> that's correct

[19:51] <Skarsnik> I mean it's the right moment to break thing in DBIish x)

[19:51] <ZoffixW> Skarsnik, go for it :)

[19:51] <ZoffixW> m: say so "0"

[19:51] <camelia> rakudo-moar 51d695: OUTPUT«True␤»

[19:52] <psch> hm, downarrow on search results on doc.perl6.org doesn't work..?

[19:52] <ZoffixW> m: say so 0E0

[19:52] <camelia> rakudo-moar 51d695: OUTPUT«False␤»

[19:52] *** jnthn_ is now known as jnthn

[19:52] <ZoffixW> .oO( here we go again )

[19:52] <psch> as in, it directly selects the first option and colapses the drop-down

[19:52] * TimToady restarted camelia, and it seems to have fixed whatever indigestion it had connecting to the server

[19:52] <ZoffixW> That search box is evil :D

[19:52] <ZoffixW> psch, yeah and I know why.

[19:52] <psch> yes, just remove it and put a custom google search :P

[19:52] <raiph> m: sub postfix:<.now> ($) {say "" }; DateTime.now # for zengargoyle

[19:52] *** atta left
[19:52] *** rindolf left
[19:52] *** Celelibi left
[19:52] *** mprelude left
[19:52] *** rjbs- left
[19:52] *** jantore left
[19:52] *** diakopte1 joined
[19:52] <camelia> rakudo-moar 51d695: OUTPUT«␤»

[19:52] <psch> just kidding, actually :S

[19:53] <ZoffixW> TOO LATE! I"M GONNA FIX IT! :D

[19:53] *** rindolf joined
[19:53] <psch> uh, yes, but not with a google custom search i hope? :P

[19:54] *** emdashcomma joined
[19:54] *** Peter_R joined
[19:54] <raiph> m: with "foo".index("f") { .say };

[19:54] <camelia> rakudo-moar 51d695: OUTPUT«0␤»

[19:54] <psch> m: when "foo".index("f") { .say }

[19:54] <camelia> rakudo-moar 51d695: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/95n96BQsX3:1␤(Any)␤»

[19:54] *** sufrosti1o joined
[19:54] <ZoffixW> psch, not yet, with the down arrow... which I'm surprised is broken, based on the code.

[19:54] <Skarsnik> any though on? https://github.com/perl6/DBIish/issues/22 I currently fooling around with that x)

[19:54] <TimToady> nine_: yeah, 'when' is the wrong word that begins with 'w', but I didn't see anything better than 'with'

[19:54] <ZoffixW> psch, but as for google search... I kinda wish when "No results" is shown there were a button I could click that'd give me google search results for the term.

[19:54] <psch> m: $_ = "foo"; when .index("f") { .say }

[19:54] <camelia> rakudo-moar 51d695: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '7⏏5foo' (indicated by 7⏏)␤  in block <unit> at /tmp/hzdp_NFsJz:1␤␤Actually thrown at:␤  in block <unit> at /tmp/hzdp_NFsJz:1␤␤»

[19:55] <TimToady> don't use 'when'!!!

[19:55] *** Celelibi joined
[19:55] <TimToady> when is smartmatching, you want 'with'

[19:55] <psch> TimToady: i'm aware of this, i'm just trying to bend it until 'when' works... :S

[19:55] <TimToady> .index("f") is going to return 0, and the try "foo" == 0

[19:55] <TimToady> *then

[19:56] <psch> huh

[19:56] <TimToady> m: $_ = 0; when .index("0") { .say }

[19:56] <camelia> rakudo-moar 51d695: OUTPUT«0␤»

[19:56] <psch> is that a case where chaining ~~ kinda makes sense, maybe?

[19:56] *** jantore joined
[19:56] *** mprelude joined
[19:56] *** wtw left
[19:56] *** sufrostico left
[19:56] *** burnersk left
[19:56] *** wtw joined
[19:56] *** burnersk joined
[19:56] *** wtw left
[19:56] *** wtw joined
[19:56] <psch> 'cause the implicit smartmatch in when could chain with an e.g. infix:<==>

[19:56] *** atta joined
[19:57] <jnthn> nine_: So if you do "make" and then change something and "make" again, it complains about reinstalling the CORE dist? Or?

[19:57] *** sufrostico joined
[19:57] <jnthn> nwc10: No, it ran cleanly here... :S

[19:57] <psch> like < $_ = "foo"; when .index("f") == 0 { .say } > i suppose

[19:57] * Skarsnik don't want to install/config mysql to test stuff

[19:57] *** rjbs joined
[19:57] *** avar left
[19:57] *** Jonis left
[19:57] *** diakopter left
[19:57] *** brabo left
[19:57] *** sufrostico is now known as 5EXAALNQG

[19:57] *** confuseAcat left
[19:58] <psch> eh, no, that's probably too magical too :/

[19:58] <jnthn> nwc10: Any idea *why* it aborts?

[19:58] *** avar joined
[19:58] *** confuseAcat joined
[19:58] <nwc10> no. that's probably not the only test

[19:58] <psch> as in, it could maybe sensibly work with < when 0 == .index("f") >, but wouldn't or shouldn't the other way around

[19:58] <nwc10> I didn't dig into the other failures, but guessed that all concurrency related new failures were the same cause

[19:59] <nwc10> I'm building without ASAN to see if it doesn't abort()

[19:59] * TimToady is unmotivated to bend smartmatching into a with-shaped pretzel

[19:59] <psch> ah, no, i'm confusing the sides :/

[19:59] <nwc10> ie if it's a timing issue exposed by ASAN making stuff slow

[19:59] <jnthn> OK. I've no idea why it'd do that.

[19:59] <jnthn> categorize.t ran fine for me on repeated spectest runs

[20:00] <psch> TimToady: well, RT #81336 exists

[20:00] *** wtw left
[20:00] <psch> and i've been wondering about use-cases for chaining infix:<~~>

[20:00] *** wtw joined
[20:00] <dalek> doc: 42f7864 | (Zoffix Znet)++ | html/js/main.js:

[20:00] <dalek> doc: Unbreak arrow navigation of search results psch++

[20:00] <dalek> doc: review: https://github.com/perl6/doc/commit/42f7864450

[20:01] *** mattp__ joined
[20:01] *** burnersk left
[20:01] *** mprelude is now known as 5EXAALNCQ

[20:02] *** avar left
[20:02] *** 5EXAALNCQ left
[20:03] <Skarsnik> oooh is deprecated is not implemented?

[20:03] *** mprelude joined
[20:03] <Skarsnik> m: sub is deprecated('why') foo { say "Hello"}; foo();

[20:03] <camelia> rakudo-moar 51d695: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lmRxPw1gPe␤Missing block␤at /tmp/lmRxPw1gPe:1␤------> 3sub is7⏏5 deprecated('why') foo { say "Hello"}; f␤    expecting any of:␤        new name to be defined␤»

[20:04] <Skarsnik> m: sub foo is deprecated('why') { say "Hello"}; foo();

[20:04] <camelia> rakudo-moar 51d695: OUTPUT«5===SORRY!5=== Error while compiling /tmp/3TsWHI1tHE␤Can't use unknown trait 'is deprecated' in a sub declaration.␤at /tmp/3TsWHI1tHE:1␤    expecting any of:␤        rw raw hidden-from-backtrace hidden-from-USAGE␤        cached pure default D…»

[20:04] *** burnersk joined
[20:04] *** avar joined
[20:04] *** lichtkind joined
[20:04] <psch> m: sub f is DEPRECATED("old") { say "hello" }; f

[20:04] <camelia> rakudo-moar 51d695: OUTPUT«hello␤»

[20:05] <psch> Skarsnik: the trait is shouty

[20:05] <Skarsnik> Ok thx

[20:05] *** zengargoyle left
[20:05] *** zengargo1le joined
[20:07] *** kjs_ joined
[20:07] *** vendethiel joined
[20:07] *** ponbiki_ is now known as ponbiki

[20:09] *** zengargo1le is now known as zengargoyle

[20:11] *** darutoko left
[20:15] <dalek> modules.perl6.org/new-db-builder: 9a5a991 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source.pm:

[20:15] <dalek> modules.perl6.org/new-db-builder: Fix pod errors and typos

[20:15] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/9a5a991c19

[20:16] *** brabo joined
[20:16] <ZoffixW> m: class Foo { method f is DEPRECATED("old") { say "hello" }; }; Foo.new.f

[20:16] <camelia> rakudo-moar 51d695: OUTPUT«hello␤»

[20:16] <ZoffixW> What does it do? I'm assuming it'd cry when deprecated methods are used, but it seems to work as normal.

[20:21] <Skarsnik> aw 1 occurrence of deprecated code.

[20:21] <Skarsnik> ================================================================================

[20:21] <Skarsnik> Method fetchrow_array (from DBDish::Role::StatementHandle) seen at:

[20:21] <Skarsnik>   testtyped.pl, line 10

[20:21] <Skarsnik> Please use please use row() instead.

[20:21] <Skarsnik> --------------------------------------------------------------------------------

[20:21] <ZoffixW> I see.

[20:22] *** 5EXAALNQG left
[20:22] *** sufrosti1o left
[20:22] * MadcapJake is feeling dizzy from the irregularity of error messages that `perl6 -c` prints

[20:23] <autarch> is there no way to delete keys from a hash in Perl6?

[20:23] <MadcapJake> gonna have to write a whole bunch of javascript regexes X_X

[20:23] <flussence> m: my %foo = a => 1, b => 2; say %foo<a>:delete; dd %foo;

[20:23] <camelia> rakudo-moar 51d695: OUTPUT«1␤Hash $var = ${:b(2)}␤»

[20:23] <vendethiel> autarch: %a<b>:delete

[20:24] <autarch> why a colon and not a dot?

[20:24] <Skarsnik> hm, I don't see how to implement for $sth.row -> @row{} https://github.com/perl6/DBIish/issues/22 (last moritz comment) should I mark this as operator or something?

[20:24] <Skarsnik> *iterator

[20:25] *** lucasb joined
[20:25] <moritz> Skarsnik: method row { gather { while my @row = self.fetchrow { take @row } }

[20:25] <leont> Because it's a special case of accessing the element

[20:26] <nwc10> jnthn: also aborts for a regular debugging build. valgrind finds no problems before the abort

[20:26] <Skarsnik> moritz, Na I mean, you don't want to gather the whole rows, only at each loop iteration

[20:26] <moritz> Skarsnik: well, it's lazy

[20:26] *** emdashcomma left
[20:26] <moritz> Skarsnik: it only generates the rows as they are accessed

[20:27] *** sufrostico joined
[20:27] <MadcapJake> does `perl6 -c` only catch X::Syntax exceptions or will it catch others too?

[20:27] <moritz> my: my \rows = gather { for ^10 { say "generating $_"; take $_ } }; rows[2]

[20:27] <moritz> m: my: my \rows = gather { for ^10 { say "generating $_"; take $_ } }; rows[2]

[20:27] <camelia> rakudo-moar 51d695: OUTPUT«generating 0␤generating 1␤generating 2␤»

[20:28] <moritz> MadcapJake: it doesn't catch exceptions

[20:28] <MadcapJake> s/catch/print to stderr/

[20:28] <moritz> MadcapJake: I mean, not more or less than normal perl6

[20:28] <moritz> MadcapJake: all of them

[20:28] <Skarsnik> so I put gather around the whole code of the method?

[20:28] <MadcapJake> All that can be caught at compile time?

[20:28] <moritz> MadcapJake: try -c -e 'BEGIN die "oh noez"'

[20:29] <moritz> MadcapJake: it's just normal perl 6, except that it exits after compilation

[20:29] <nine_> jnthn: yes, we currently try to install the CORE dist on make install and it fails if it's already there

[20:29] <moritz> so it runs all BEGIN blocks, use etc.

[20:30] <MadcapJake> hmm, ok :P

[20:31] *** kjs_ left
[20:32] <MadcapJake> I'm trying to wrap the output of `perl6 -c` to provide errors to Atom's linter.  Looks like I'm going to have to write a separate rule for each error then xD

[20:33] *** sufrosti1o joined
[20:35] *** domidumont left
[20:36] <MadcapJake> moritz: is there any way to limit the scope of `perl6 -c` to just syntax checking?

[20:36] *** rigsby left
[20:37] <moritz> MadcapJake: no. You can't syntax-check without compiling

[20:38] *** zakharyas joined
[20:38] <Skarsnik> moritz, hm, I still get only oen result

[20:39] *** geraud joined
[20:40] <Skarsnik> ho you really need the while x)

[20:40] *** rigsby joined
[20:41] *** zengargo1le joined
[20:42] *** Sgeo joined
[20:42] *** [dpk] joined
[20:43] <MadcapJake> i wish that all error messages were single-line :(

[20:44] *** raydiak_ joined
[20:44] *** krakan_ joined
[20:44] <dalek> modules.perl6.org/new-db-builder: 6681d54 | (Zoffix Znet)++ | / (4 files):

[20:44] <dalek> modules.perl6.org/new-db-builder: Improve test coverage for ModulesPerl6::DbBuilder::Dist::Source

[20:44] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/6681d54bf9

[20:44] *** leont_ joined
[20:45] *** doublec joined
[20:45] *** [dpk] is now known as {dpk}

[20:45] *** ilbelkyr_ joined
[20:45] *** xfix_ joined
[20:46] *** mspo_ joined
[20:46] *** lucasb_ joined
[20:47] *** bakedb joined
[20:47] *** KotH_ joined
[20:47] *** uruwi_ left
[20:47] *** telex left
[20:47] *** dpk left
[20:47] *** {dpk} is now known as dpk

[20:47] *** telex joined
[20:47] *** ssflying joined
[20:48] *** mrsolo left
[20:48] *** emdashcomma joined
[20:48] *** jonas1 left
[20:48] *** ribasushi_ joined
[20:48] <jnthn> nwc10: Maybe helgrind has an idea?

[20:49] *** ZoffixW left
[20:49] *** shlomif joined
[20:50] *** dpk is now known as {dpk}

[20:50] *** rindolf left
[20:50] *** shlomif is now known as rindolf

[20:51] *** rindolf left
[20:52] *** Upasaka joined
[20:53] *** {dpk} is now known as dpk

[20:53] <nine_> jnthn: I think we need to have Repository::Installation precompile on load in addition to on install

[20:54] *** sunnavy joined
[20:55] <dalek> doc: c8ec94a | lizmat++ | doc/Type/Supply.pod:

[20:55] <dalek> doc: Slight Supply.throttle reorganization

[20:55] <dalek> doc: review: https://github.com/perl6/doc/commit/c8ec94a776

[20:55] <dalek> doc: 229ec9b | lizmat++ | doc/Type/Supply.pod:

[20:55] <dalek> doc: Add simple example of Supply.throttle (code)

[20:55] <dalek> doc: review: https://github.com/perl6/doc/commit/229ec9bb1e

[20:56] *** Mhoram joined
[20:56] *** sftp left
[20:57] *** zengargoyle left
[20:57] *** ilbelkyr left
[20:57] *** raydiak left
[20:57] *** Khisanth left
[20:57] *** krakan left
[20:57] *** leont left
[20:57] *** doublec_ left
[20:57] *** bakedb_ left
[20:57] *** xfix left
[20:57] *** sunnavy_ left
[20:57] *** ribasushi left
[20:57] *** KotH left
[20:57] *** emdashco| left
[20:57] *** go|dfish left
[20:57] *** lucasb left
[20:57] *** mspo left
[20:57] *** ssflying_ left
[20:57] *** lichtkind left
[20:57] *** abaugher left
[20:57] *** atta left
[20:57] *** eiro left
[20:57] *** Upasaka_ left
[20:57] *** Khisanth joined
[20:57] *** KotH_ is now known as KotH

[20:58] *** lichtkind joined
[20:59] *** kaare_ left
[21:00] *** b2gills left
[21:00] *** yoleaux joined
[21:00] *** ChanServ sets mode: +v yoleaux

[21:01] *** sftp joined
[21:01] *** eiro joined
[21:01] *** leont_ is now known as leont

[21:03] *** raiph left
[21:04] *** rigsby left
[21:04] *** sufrostico left
[21:04] *** sufrosti1o left
[21:11] <dalek> rakudo/curli: a51f6c7 | (Stefan Seifert)++ | src/core/CompUnit/Repository/Installation.pm:

[21:11] <dalek> rakudo/curli: Precompile on-demand in Repository::Installation, too.

[21:11] <dalek> rakudo/curli: 

[21:11] <dalek> rakudo/curli: CompUnit::Repository::Installation needs to precompile on-demand (when loading

[21:11] <dalek> rakudo/curli: a module) in addition to on installation. Consider:

[21:11] <dalek> rakudo/curli: use lib "lib"; # prepends a Repository::FileSystem to the repo chain

[21:11] <dalek> rakudo/curli: use Test; # installed in site, therefore not in lib's precomp store

[21:11] <dalek> rakudo/curli:           # therefore loaded from source

[21:11] <dalek> rakudo/curli: use Test::Mock; # loaded from lib/ therefore precompiled on-demand.

[21:11] <dalek> rakudo/curli: 

[21:11] <dalek> rakudo/curli: Since Test::Mock uses Test, the latter will be precompiled, too when

[21:11] <dalek> rakudo/curli: precompiling Test::Mock. But Test was already loaded from source before

[21:11] <dalek> rakudo/curli: precompilation of Test::Mock so when we finally load the latter, we get

[21:11] <dalek> rakudo/curli: a conflict.

[21:11] <dalek> rakudo/curli: 

[21:11] <dalek> rakudo/curli: If you precompile on-demand, you have to do it everywhere.

[21:11] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/a51f6c7abc

[21:12] *** atta joined
[21:12] *** go|dfish joined
[21:12] <nine_> I think this ^^^ was the source of the fleeting precompilation related failures I've seen from time to time. They appeared only on the first try since on the second the precompiled version of Test was already loaded from the start.

[21:13] *** tphilipp joined
[21:14] *** b2gills joined
[21:17] <jnthn> nine_: No, I don't think installation should do that...

[21:17] <jnthn> nine_: When we "make install" a new Rakudo version then it should go and produce precomp'd versions of installed modules at that point.

[21:17] <jnthn> (When, since we're in make install, it certainly has permissions to be doing such things)

[21:18] *** espadrine joined
[21:19] *** tphilipp left
[21:21] *** zakharyas left
[21:21] <jnthn> nine_: Well, or depends on the active pre-comp manager

[21:21] <nine_> jnthn: the on-load precomp is for the case where we have a FileSystem repo before the Installation repo in the chain. That also means that we use the FileSystem repo's precomp store.

[21:21] <jnthn> Yeah, I see

[21:21] <jnthn> OK, then it makes sense.

[21:22] *** eliasr joined
[21:23] *** doublec left
[21:23] <nine_> This fixed all strange errors of Task::Star modules. The remaining errors are all about @*INC in tests

[21:23] <jnthn> OK :)

[21:24] *** eliasr left
[21:25] *** xfix_ left
[21:25] *** doublec joined
[21:27] *** espadrine left
[21:27] *** n0xff joined
[21:28] *** espadrine joined
[21:28] *** AlexDaniel joined
[21:28] *** n0xff left
[21:33] <dalek> roast: 3966e1b | jnthn++ | S17-supply/basic.t:

[21:33] <dalek> roast: A bunch more supply protocol tests.

[21:33] <dalek> roast: 

[21:33] <dalek> roast: Including making sure that an observer will never see an emit after

[21:33] <dalek> roast: seeing a done or a quit - at least, not unless somebody goes out of

[21:33] <dalek> roast: their way to make this happen. Covers RT #123477.

[21:33] <dalek> roast: review: https://github.com/perl6/roast/commit/3966e1b2f9

[21:39] *** lucasb_ left
[21:40] *** lukasz joined
[21:41] *** lukasz left
[21:41] *** domidumont joined
[21:42] <dalek> roast: d430474 | jnthn++ | S02-names-vars/names.t:

[21:42] <dalek> roast: Tests for RT #113892 and RT #115608.

[21:42] <dalek> roast: review: https://github.com/perl6/roast/commit/d430474748

[21:46] *** espadrine_ joined
[21:46] *** espadrine left
[21:47] <lizmat> jnthn: is it correct that a number of supply related tests fail ?

[21:47] <jnthn> lizmat: It's platform specific.

[21:47] *** bjz joined
[21:47] <jnthn> lizmat: They're fine on Windows.

[21:47] <jnthn> I'd not have merged otherwise.

[21:47] <lizmat> :-(

[21:47] <jnthn> Probbly some stupid posixism

[21:47] <lizmat> ok, will check up on them on OSX

[21:47] <jnthn> I did enough debugging today.

[21:48] <jnthn> And libuv just does an abort(). Presumably there is an error string that comes back from pthreads.

[21:48] <lizmat> well, time to take it from you then

[21:49] <jnthn> OK :)

[21:49] <lizmat> argh, another harness related failure, it seems  :-(

[21:49] <jnthn> Note that a few tests still having timing-related issues that can fail under stress

[21:49] <jnthn> But nwc10 reported something that's different to that.

[21:49] <jnthn> I suspect helgrind will provide good diagnostics on that case.

[21:50] <jnthn> The tests for batch, elems, and unique (at least) could do with using the FakeScheduler that I used for interval.t.

[21:50] <jnthn> I can appreciate we want to test that ThreadPoolScheduler does, in fact, do something vaguely right with regard to wallclock time

[21:50] <jnthn> But we don't need to test that over and over again in the supply/promise tests.

[21:51] <jnthn> So I'm fairly comfortable writing those tests in "virtual time"

[21:53] *** raiph joined
[21:53] <lizmat> ok, will look at that tomorrow, don't think I'll be doing much more today

[21:54] *** lsm-desktop left
[21:54] <jnthn> Yeah, me either.

[21:54] *** domidumont left
[21:54] *** rindolf joined
[21:54] <jnthn> TimToady: Next little ruling request: https://rt.perl.org/Ticket/Display.html?id=120916 :)

[21:54] *** ilbelkyr_ is now known as ilbelkyr

[21:55] <lizmat> jnthn: Supply.tail defaults to 1, List.tail enforces the number

[21:55] <lizmat> jnthn: which one will I adapt ?

[21:55] <jnthn> TimToady: Ticket wants "has $.foo = ..." to mean...something...I don't even... :)

[21:56] <jnthn> TimToady: I don't actually see what it sensibly can mean. There's no way to actual provide that initializer in the class body.

[21:56] <jnthn> TimToady: So I'm happy enough with "current behavior is fine, if you put stub code there it'll just behave like stub code anywhere else".

[21:57] *** Zoffix_ is now known as Zoffix

[21:57] <jnthn> (With the exception of method bodies in roles, which become requirements I guess...but there's a way to provide those...)

[21:57] <lizmat> jnthn: should there be a "done" in a LAST block ?

[21:57] *** Zoffix left
[21:57] <lizmat> Supply.elems has one, Supply.tail doesn't ?

[21:58] <jnthn> lizmat: I think defaulting to 1 is nicely consistent with head...

[21:58] <lizmat> ok

[21:58] <lizmat> and wrt to "done"

[21:58] <lizmat> ?

[21:58] <arnsholt> jnthn: I have a super-weird segfault issue on MoarVM, but seemingly weird changes (like changing the name of the compilation unit) make it go away. Hopefully I'll find a reliable testcase

[21:58] <jnthn> lizmat: "It's complicated."

[21:59] *** rurban joined
[21:59] <jnthn> lizmat: Well, not really, but... :)

[21:59] <jnthn> lizmat: supply blocks try to have good defaults. The rule is: when you reach 0 active whenever blocks, then it automatically does "done" for you.

[21:59] <arnsholt> Somehow the REPR data of a CStruct type is NULL when initialize is called. I'm suspecting an uncomposed type, or some such

[21:59] <jnthn> lizmat: So elems probably doesn't need it either.

[22:00] <jnthn> lizmat: It doesn't hurt to have it, of course.

[22:00] <lizmat> well, if it isn't needed, then it shouldn't be there

[22:00] <jnthn> lizmat: The place you *need* it is if you want to issue "done" when other whenever blocks remain active.

[22:00] <lizmat> there's enough cargo cultiing in the world already  :-)

[22:00] <jnthn> Yeah, I ported them closely from the "on" syntax with an eye to keeping them working :-)

[22:01] <jnthn> But elems is a fairly clear "nah, don't need it" :)

[22:01] <lizmat> gotcha  :-)

[22:01] *** colomon joined
[22:01] <lizmat> makes the LAST easier as well:

[22:01] <lizmat> LAST emit($elems) if $elems != $last_elems;

[22:02] <jnthn> Yeah, but put a { ... } around it 

[22:02] <jnthn> I think there's a bug lingering :(

[22:03] <lizmat> ok, will check

[22:03] *** zengargo1le is now known as zengargoyle

[22:04] *** hankache joined
[22:04] <dalek> rakudo/nom: 05bd97c | lizmat++ | src/core/Supply.pm:

[22:04] <dalek> rakudo/nom: Model Supply.tail like List.tail

[22:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/05bd97ccb8

[22:04] *** noganex left
[22:05] *** lsm-desktop joined
[22:08] *** rigsby joined
[22:10] <hankache> good evening

[22:10] <lizmat> hankache o/

[22:11] <hankache> ohai lizmat

[22:11] *** doublec left
[22:12] <timotimo>                  │ src/6model/reprs/ReentrantMutex.c:43

[22:12] <timotimo>                  │ src/6model/reprs/ReentrantMutex.c:43

[22:12] *** llfourn joined
[22:12] <jnthn> timotimo: ? :)

[22:12] * jnthn can reliably reproduce RT #125515, and will work on that tomorrow

[22:13] *** doublec joined
[22:13] <dalek> rakudo/nom: 7d636cf | lizmat++ | src/core/Supply.pm:

[22:13] <dalek> rakudo/nom: Streamline Supply.elems

[22:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7d636cfc11

[22:17] *** Zoffix joined
[22:17] <dalek> rakudo/nom: 327cbf0 | lizmat++ | src/core/Any-iterable-methods.pm:

[22:17] <dalek> rakudo/nom: Allow for List.tail(), aligning with Supply.tail

[22:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/327cbf015a

[22:18] <dalek> roast: b599905 | lizmat++ | S32-list/tail.t:

[22:18] <dalek> roast: Add tests for List.tail()

[22:18] <dalek> roast: review: https://github.com/perl6/roast/commit/b599905b66

[22:20] <arnsholt> Ooooooooh.

[22:21] *** Zoffix left
[22:21] <arnsholt> jnthn: Having a class named Parameter breaks all the things. Bug?

[22:21] <Skarsnik> lol

[22:21] *** rindolf left
[22:21] <jnthn> arnsholt: We resolving a bunch of built-in names lexically

[22:21] <jnthn> So if you shadow them...

[22:21] <lizmat> m: say Parameter.WHAT

[22:21] <camelia> rakudo-moar 05bd97: OUTPUT«(Parameter)␤»

[22:22] <jnthn> Same with Code, fwiw

[22:22] <arnsholt> Right, right. Just wanted to make sure

[22:22] <jnthn> We could choose to always look directly in the setting for such symbols.

[22:22] <jnthn> But when I've floated it in the past I've never got a clear "yes" from TimToady 

[22:23] <arnsholt> That's more or less how Python works, FWIW

[22:23] <jnthn> Probably 'cus he can argue it both ways, like I can :P

[22:23] <lizmat> prefix this built-in with an R ?

[22:23] <jnthn> ?

[22:24] <lizmat> if the builtin Parameter would be called RParameter, there wouldn'r have been a conflict

[22:24] <jnthn> Yeah but that's ugly :P

[22:24] <lizmat> agree

[22:24] <lizmat> :-)

[22:25] <lizmat> but having bad things happen with common names such as Parameter and Code, is maybe worse

[22:25] <jnthn> Basically we'd just be forcing people to write a custom setting if they wanted to replace certain things

[22:25] <Skarsnik> but if you want to have a RParameter class!

[22:25] <lizmat> Skarsnik: less likely, but yeah, get your point :-)

[22:25] <jnthn> Who'd create a project that just puts an R at the start of something? :P

[22:25] *** espadrine_ left
[22:26] <Skarsnik> why not just warn/error when it's done?

[22:26] <Skarsnik> m: class Parameter {};

[22:26] <camelia> rakudo-moar 05bd97: ( no output )

[22:26] <jnthn> 'cus we don't want to totally prevent it

[22:26] <jnthn> I think for certain things having to write a custom setting to override them is fine though

[22:26] <Skarsnik> I mean a warning like when you write my $foo; my $foo

[22:27] <jnthn> And we'll skip looking through lexical scopes we're in and go straight to the setting scope.

[22:27] <jnthn> Because this situation isn't like tht

[22:27] <jnthn> It's like my $foo; { my $foo; }

[22:27] <jnthn> Because the built-ins are considered an outer scope to your program.

[22:28] <jnthn> I already made exception resolution do this 'cus people were writing a class X and hosing error reporting :)

[22:28] <jnthn> (For compiler-generated exceptions, that is)

[22:28] <timotimo> excuse the cat on the keyboard please

[22:28] <dalek> rakudo/nom: 4a5e549 | lizmat++ | src/core/Any-iterable-methods.pm:

[22:28] <dalek> rakudo/nom: Allow List.head() to align with List.tail()

[22:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4a5e549bbb

[22:29] <jnthn> timotimo: I don't mind the cat being on the keyboard, but can't he fix a bug or two while there?

[22:29] <dalek> roast: 76eac4d | lizmat++ | S32-list/head.t:

[22:29] <dalek> roast: Add tests for List.head()

[22:29] <dalek> roast: review: https://github.com/perl6/roast/commit/76eac4dd9b

[22:29] <timotimo> :)

[22:30] * jnthn notes we're down to 31 xmas RTs

[22:30] <jnthn> Should get under 30 tomorrow :)

[22:31] <jnthn> m: say "Need to fix {31 / 28} a day if we're to do 'em all by 24th :P"

[22:31] <camelia> rakudo-moar 05bd97: OUTPUT«Need to fix 1.107143 a day if we're to do 'em all by 24th :P␤»

[22:31] *** hankache left
[22:32] <dalek> doc: 15957e1 | lizmat++ | doc/Type/List.pod:

[22:32] <dalek> doc: Update doc on List.head/tail

[22:32] <dalek> doc: review: https://github.com/perl6/doc/commit/15957e1c6b

[22:34] <jnthn> 'night, #perl6

[22:34] <Skarsnik> good night

[22:34] *** raiph left
[22:34] *** vendethiel left
[22:37] <lizmat> gnight jnthn 

[22:42] *** TimToady left
[22:43] *** TimToady joined
[22:45] <dalek> roast: 397ddee | lizmat++ | S17-supply/head.t:

[22:45] <dalek> roast: Add tests for Supply.head

[22:45] <dalek> roast: review: https://github.com/perl6/roast/commit/397ddee20c

[22:46] *** sufrostico joined
[22:48] <timotimo>                  │ src/6model/reprs/ReentrantMutex.c:43

[22:48] <timotimo> ... ...

[22:48] <lizmat> .tell jnthn supply test fails on OS X seem to be related to setting $*SCHEDULER

[22:48] <yoleaux> lizmat: I'll pass your message to jnthn.

[22:48] <Skarsnik> You can can copy paste? x)

[22:48] <Skarsnik> *Your cat

[22:49] <stmuk> "staring like a cat at a perl advent calender"

[22:49] *** Khisanth left
[22:49] <lizmat> .tell jnthn could it be some missing decont on $*SCHEDULER maybe ?

[22:49] <yoleaux> lizmat: I'll pass your message to jnthn.

[22:51] *** isacloud left
[22:51] *** DrParis left
[22:51] *** bowtie joined
[22:53] *** sufrosti1o joined
[22:53] *** leont left
[22:54] *** Khisanth joined
[22:56] <dalek> rakudo/nom: 9baad52 | lizmat++ | / (2 files):

[22:56] <dalek> rakudo/nom: Add Supply.head + run tests

[22:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9baad52565

[22:57] <dalek> modules.perl6.org/new-db-builder: 7586865 | (Zoffix Znet)++ | t/03-app/00-startup-variants.t:

[22:57] <dalek> modules.perl6.org/new-db-builder: Fix incorrect test coverage

[22:57] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/75868659d7

[23:00] <dalek> modules.perl6.org/new-db-builder: 220a336 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source.pm:

[23:00] <dalek> modules.perl6.org/new-db-builder: Remove useless code

[23:00] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/220a336d3e

[23:07] <lizmat> .tell jnthn question: should you be able to last out of a whenever block without further consequences ?

[23:07] <yoleaux> lizmat: I'll pass your message to jnthn.

[23:08] <dalek> rakudo/nom: 39869f1 | lizmat++ | src/core/Supply.pm:

[23:08] <dalek> rakudo/nom: We don't need an empty whenever block

[23:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39869f1bc1

[23:10] <pink_mist> lizmat: "further consequences"? the whenever block should stop doing things

[23:11] <lizmat> well, it appears that the Supply.head tests run ok in the test harness if there is *no* last out of the whenever block

[23:13] <dalek> doc: a87a9b0 | lizmat++ | doc/Type/Supply.pod:

[23:13] <dalek> doc: Add doc stubs for Supply.head/tail

[23:13] <dalek> doc: review: https://github.com/perl6/doc/commit/a87a9b0fbc

[23:14] *** Skarsnik left
[23:14] *** snarkyboojum joined
[23:14] <lizmat> good night, #perl6!

[23:17] *** isacloud joined
[23:20] *** DrParis joined
[23:21] *** DrParis is now known as Guest84367

[23:23] <AlexDaniel> m: say 2**⁸

[23:23] <camelia> rakudo-moar 9baad5: OUTPUT«256␤»

[23:23] <dalek> modules.perl6.org/new-db-builder: c4ce087 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source/GitHub.pm:

[23:23] <dalek> modules.perl6.org/new-db-builder: Do not use GitHub"s repo desc as distro description

[23:23] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/c4ce0876af

[23:23] <AlexDaniel> m: my $y = 2; say ++$y²³;

[23:23] <camelia> rakudo-moar 9baad5: OUTPUT«5===SORRY!5=== Error while compiling /tmp/86Kdt5oAbM␤Operators '++' and '²³' are non-associative and require parentheses␤at /tmp/86Kdt5oAbM:1␤------> 3my $y = 2; say ++$y²³7⏏5;␤    expecting any of:␤        postfix␤»

[23:24] <AlexDaniel> m: my $y = 2; say $y++⁸;

[23:24] <camelia> rakudo-moar 9baad5: OUTPUT«256␤»

[23:27] *** yqt left
[23:30] *** RabidGravy left
[23:35] *** Khisanth left
[23:36] *** mrsolo joined
[23:37] *** noganex joined
[23:37] *** Khisanth joined
[23:43] *** n0xff joined
[23:43] *** n0xff left
[23:44] *** lichtkind left
[23:45] *** stmuk_ joined
[23:46] *** mattp_ joined
[23:47] <dalek> modules.perl6.org/new-db-builder: 69d956b | (Zoffix Znet)++ | / (3 files):

[23:47] <dalek> modules.perl6.org/new-db-builder: Improve test coverage for Dist Source baseclass (JSON parse errors and other)

[23:47] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/69d956b3ba

[23:47] *** krakan joined
[23:48] <dalek> modules.perl6.org/new-db-builder: 9147746 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source/GitHub.pm:

[23:48] <dalek> modules.perl6.org/new-db-builder: Remove debug code

[23:48] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/9147746ffb

[23:48] *** stmuk left
[23:50] *** telex left
[23:50] *** telex joined
[23:51] <gfldex> .tell moritz i would like to book a day in advent, but don't know how!

[23:51] <yoleaux> gfldex: I'll pass your message to moritz.

[23:53] <dalek> perl6-roast-data: 33fe841 | coke++ | / (9 files):

[23:53] <dalek> perl6-roast-data: today (automated commit)

[23:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/33fe84130a

[23:53] <dalek> rakudo-star-daily: 578d8c1 | coke++ | log/ (2 files):

[23:53] <dalek> rakudo-star-daily: today (automated commit)

[23:53] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/578d8c12d7

[23:53] <dalek> rakudo-star-daily: 5fd76ef | coke++ | log/ (2 files):

[23:53] <dalek> rakudo-star-daily: today (automated commit)

[23:53] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5fd76ef7b3

[23:54] *** isacloud left
[23:54] *** go|dfish left
[23:54] *** ilbelkyr left
[23:54] *** krakan_ left
[23:54] *** mattp__ left
[23:54] *** diakopte1 left
[23:56] *** telex left
[23:58] *** telex joined
[23:58] * [Coke] waves from a car /j

