[00:05] <dalek> rakudo/nom: e373fbf | TimToady++ | src/core/Any-iterable-methods.pm:

[00:05] <dalek> rakudo/nom: common listops should propage laziness

[00:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e373fbfc49

[00:05] <dalek> rakudo/nom: fee365b | TimToady++ | src/core/Any.pm:

[00:05] <dalek> rakudo/nom: lazy-if is a no-op on non-Iterables

[00:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fee365bc3e

[00:05] <dalek> roast: 4292ebe | TimToady++ | integration/advent2009-day23.t:

[00:05] <dalek> roast: map listop now propagates laziness

[00:05] <dalek> roast: review: https://github.com/perl6/roast/commit/4292ebe544

[00:05] <dalek> roast: bd8f5fa | TimToady++ | S02-literals/radix.t:

[00:05] <dalek> roast: missing colon on :2

[00:05] <dalek> roast: review: https://github.com/perl6/roast/commit/bd8f5facef

[00:05] <dalek> roast: be0c818 | TimToady++ | S02-names/pseudo.t:

[00:05] <dalek> roast: distinguish OUTERS from OUTER these days

[00:05] <dalek> roast: review: https://github.com/perl6/roast/commit/be0c818df0

[00:05] <dalek> roast: b318b44 | TimToady++ | S02-names-vars/list_array_perl.t:

[00:05] <dalek> roast: GLRify some fudges

[00:05] <dalek> roast: review: https://github.com/perl6/roast/commit/b318b44404

[00:05] <dalek> roast: fa1ebb1 | TimToady++ | S02-names-vars/perl.t:

[00:05] <dalek> roast: update tests on recursive structures

[00:05] <dalek> roast: review: https://github.com/perl6/roast/commit/fa1ebb1cfa

[00:06] <ShimmerFairy> mantovani: I'd recommend trying to compile MoarVM for your system, and seeing where it breaks, if anywhere. Even if you're not able to fix it, I'm sure we'd like to know where MoarVM needs improvement on other systems :)

[00:07] <ShimmerFairy> mantovani: http://moarvm.org/  website for MoarVM

[00:10] *** Alina-malina left
[00:11] *** Alina-malina joined
[00:14] *** zoosha_ joined
[00:15] *** CQ left
[00:16] *** CQ joined
[00:17] *** cosimo joined
[00:18] *** rurban left
[00:18] <dalek> roast: 3e0760f | TimToady++ | S02-types/baghash.t:

[00:18] <dalek> roast: bags no longer iterable

[00:18] <dalek> roast: review: https://github.com/perl6/roast/commit/3e0760f8bd

[00:18] <dalek> roast: 7e338ab | TimToady++ | S02-types/ (4 files):

[00:18] <dalek> roast: mixy things aren't Iterable

[00:18] <dalek> roast: review: https://github.com/perl6/roast/commit/7e338abafa

[00:23] <mantovani> ShimmerFairy: thank you

[00:23] <dalek> roast: 8088700 | TimToady++ | S03-metaops/cross.t:

[00:23] <dalek> roast: X is naturally chunky now

[00:23] <dalek> roast: review: https://github.com/perl6/roast/commit/8088700ce1

[00:23] <Zoffix> TimToady++ is on the roll! :)

[00:24] <ShimmerFairy> mantovani: you're welcome, and I hope you'll find P6 useful for you :)

[00:25] <mantovani> Perl6 the language is so good that there is not adjective to describe it.

[00:28] *** rurban joined
[00:32] *** lichtkind left
[00:38] <dalek> rakudo/nom: fe4d6ca | TimToady++ | src/Perl6/ (2 files):

[00:38] <dalek> rakudo/nom: implement hyper prefix

[00:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fe4d6cacdc

[00:38] <dalek> roast: 783eba7 | TimToady++ | S03-metaops/eager-hyper.t:

[00:38] <dalek> roast: hyper prefix parses now

[00:38] <dalek> roast: review: https://github.com/perl6/roast/commit/783eba7aa0

[00:38] <TimToady> well, but now I'm gonna be on a dinner roll :)

[00:38] <TimToady> afk &

[00:38] *** jack_rabbit_ left
[00:39] *** rurban left
[00:45] *** Peter_R left
[00:53] <ShimmerFairy> .ask TimToady oh, speaking of hyper, I've been wondering if »».foo would be a nice short version of .race.foo (like ».foo for .hyper.foo), or if that's too cute a syntax in this case.

[00:53] <yoleaux> ShimmerFairy: I'll pass your message to TimToady.

[01:06] *** vendethiel joined
[01:06] *** flipflop joined
[01:08] *** thundergnat left
[01:10] <flussence> jit was x86-64-only last I heard... has anything changed on that front recently?

[01:10] *** rurban joined
[01:13] *** adu left
[01:16] *** rurban left
[01:29] *** vendethiel left
[01:48] *** adu joined
[01:48] *** AlexDaniel left
[01:52] *** rurban joined
[01:59] *** BenGoldberg left
[02:14] *** aborazmeh joined
[02:14] *** aborazmeh left
[02:14] *** aborazmeh joined
[02:14] *** zakharyas joined
[02:16] *** kid51 left
[02:39] *** laouji joined
[02:42] *** renormalist left
[02:42] *** renormalist joined
[02:44] *** laouji left
[02:44] *** noganex_ joined
[02:44] *** rurban left
[02:46] *** tadzik joined
[02:47] *** noganex left
[02:48] *** laouji joined
[02:53] *** laouji left
[02:58] <JimmyZ> .tell lizmat re https://gist.github.com/li???zmat/b74af9a1d79a9f48bf8b, s/if $!todo/if $!todo >= 0/

[02:58] <yoleaux> JimmyZ: I'll pass your message to lizmat.

[03:01] *** kaare_ joined
[03:09] *** laouji joined
[03:13] *** laouji left
[03:14] *** makapa joined
[03:20] *** makapa left
[03:29] *** flipflop left
[03:32] *** adu left
[03:37] *** awwaiid left
[03:37] *** awwaiid joined
[03:38] *** laouji joined
[03:43] *** laouji left
[03:47] *** CQ2 joined
[03:49] *** CQ left
[03:49] *** CQ2 is now known as CQ

[03:59] *** laouji joined
[04:00] <dalek> rakudo/nom: e786ddd | TimToady++ | src/Perl6/ (2 files):

[04:00] <dalek> rakudo/nom: add race prefix while we're at it

[04:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e786ddd921

[04:21] *** prevost joined
[04:26] *** rmgk_ joined
[04:26] *** rmgk is now known as Guest62411

[04:26] *** Guest62411 left
[04:26] *** rmgk_ is now known as rmgk

[04:30] *** jack_rabbit_ joined
[04:31] *** khw left
[04:42] *** [Tux] joined
[04:51] *** baest_ is now known as baest

[04:52] *** laouji left
[04:53] *** laouji joined
[04:54] *** prevost left
[04:58] *** laouji left
[05:06] *** makapa joined
[05:07] *** makapa left
[05:18] <masak> morning, #perl6

[05:24] *** laouji joined
[05:29] *** laouji left
[05:39] *** laouji joined
[05:44] *** laouji left
[05:47] *** skids joined
[05:54] *** laouji joined
[05:57] *** aborazmeh left
[05:58] *** diana_olhovik_ joined
[06:03] *** domidumont joined
[06:04] *** salva left
[06:08] *** domidumont left
[06:08] *** aiacob joined
[06:09] *** domidumont joined
[06:10] *** skids left
[06:28] *** darutoko joined
[06:34] <[Tux]> test             50000    35.454    35.368

[06:34] <[Tux]> test-t           50000    36.665    36.579

[06:35] <nine> flussence: no, it's still x86_64

[06:51] *** Ven joined
[07:00] *** espadrine joined
[07:02] <moritz> \o masak, nine, [Tux], *

[07:02] <[Tux]> o/

[07:03] *** Ven left
[07:09] *** cfloare left
[07:09] *** cgfbee left
[07:10] *** cfloare joined
[07:15] *** cgfbee joined
[07:18] *** brrt joined
[07:20] *** Ven joined
[07:21] <Ven> not sure who to ping for http://www.slideshare.net/garux/introduo-ao-perl-6, but there's a typo in the `if` slide 97

[07:22] <mst> I would bet garu_

[07:22] <mst> garu_: ^^

[07:23] *** larion left
[07:23] *** Ven left
[07:31] *** telex left
[07:32] <lizmat> messages?

[07:32] <yoleaux> 02:58Z <JimmyZ> lizmat: re https://gist.github.com/li???zmat/b74af9a1d79a9f48bf8b, s/if $!todo/if $!todo >= 0/

[07:32] *** telex joined
[07:35] *** abraxxa joined
[07:39] *** g4 joined
[07:41] *** isacloud left
[07:41] *** pnu left
[07:41] *** preyalone left
[07:41] *** ggherdov left
[07:41] *** chansen_ left
[07:50] *** RabidGravy joined
[07:51] * RabidGravy is back

[07:51] <RabidGravy> Brrrr!

[07:56] <lizmat> RabidGravy o/

[08:02] <RabidGravy> are we all well?

[08:02] <lizmat> we're all a bit tired...  I guess  :-)

[08:04] *** brrt left
[08:14] *** pmurias joined
[08:14] <pmurias> hi

[08:16] <_itz> "the ibiza comedown, man?" :)

[08:21] <RabidGravy> :)

[08:21] <RabidGravy> brane wasn't entirely online yesterday

[08:21] *** jack_rabbit_ left
[08:27] <dalek> rakudo/nom: 3ae4f4f | lizmat++ | src/core/List.pm:

[08:27] <dalek> rakudo/nom: Cosmetic change on foo xx N

[08:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3ae4f4fb5a

[08:44] *** |Tux| joined
[08:49] *** rurban joined
[08:52] *** larion joined
[08:56] *** dustinm` left
[09:02] *** dustinm` joined
[09:11] *** laouji left
[09:20] *** laouji joined
[09:39] *** [Sno] left
[09:40] *** [Sno] joined
[09:45] *** chansen_ joined
[09:48] *** guest11534 joined
[09:49] *** pnu joined
[09:50] *** ggherdov joined
[09:50] *** clkao joined
[09:52] *** Spot__ joined
[09:52] *** SmokeMachine joined
[09:54] *** isacloud joined
[09:54] *** preyalone joined
[09:54] *** aiacob left
[09:54] *** RabidGravy left
[10:04] *** TEttinger left
[10:06] *** zakharyas left
[10:28] *** cognominal joined
[10:30] <dalek> rakudo/nom: b5a5bfe | lizmat++ | src/core/List.pm:

[10:30] <dalek> rakudo/nom: Make rand xx N about 2.5x faster

[10:30] <dalek> rakudo/nom: 

[10:30] <dalek> rakudo/nom: JimmyZ++ for the pointer on why it didn't work before

[10:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b5a5bfe023

[10:38] *** laouji left
[10:38] *** laouji joined
[10:44] *** laouji left
[10:51] *** aiacob joined
[10:56] *** rindolf joined
[11:03] *** Loren joined
[11:03] <Loren> Evening , #perl6 and everyone.

[11:04] *** Ven joined
[11:05] *** Ven left
[11:08] *** Ven joined
[11:09] *** laouji joined
[11:09] *** Ven left
[11:09] <moritz> jnthn++ # http://news.perlfoundation.org/2015/09/perl-6-release-goals-initial-g.html

[11:10] *** cognominal left
[11:11] *** cognominal joined
[11:12] *** Sqirrel left
[11:13] <CQ> Native and Shaped Arrays (NSA) .... maybe we can rename that? :)

[11:13] *** laouji left
[11:14] <JimmyZ> No Such Agency

[11:14] <nine> CQ: where would be the fun then?

[11:18] <_itz> wasn't classic perl written by the NSA anyway :)

[11:18] *** kid51 joined
[11:19] <moritz> no, JPL

[11:19] <moritz> a different TLA :-)

[11:19] <jnthn> moritz: heh, you just beat me to posting that here :)

[11:19] * jnthn was backlogging to see if anyone had posted it already ;)

[11:20] <moritz> jnthn: well, that was my advantage, I didn't backlog :-)

[11:21] <jnthn> TimToady: I was wondering if hyper and race as prefux are really going to work out well, in so far as .hyper and .race opt you into that processing model, and putting them "on the end" doesn't work quite so well

[11:22] *** brrt joined
[11:29] <jnthn> TimToady: Of note, I was thinking race for @a -> $x { } should be @a.race.map(-> $x { })

[11:29] <brrt> good *

[11:30] <brrt> have we any idea on the panda breakage yet?

[11:30] <nine> jnthn: can't the compiler generate the @a.race.map code for race for @a?

[11:30] <nine> brrt: not that I'm aware of

[11:30] <jnthn> nine: Prolly, though TimToady++'s patch didn't do that, which is why I'm moting it :)

[11:30] <jnthn> *noting

[11:30] <brrt> i've ruled out: reprop devirt, different compilation strategies, and i think i've ruled out extop misjit, but not 100%

[11:31] <brrt> i mean different compilation output

[11:31] <jnthn> Is it inline sensitive?

[11:31] <jnthn> OSR sensitive?

[11:31] <nine> brrt: are we sure that my code is actually correct? Maybe it works more or less by accident and the JIT just breaks what ought to be broken anyway?

[11:31] <brrt> it seems pretty correct to me

[11:31] <jnthn> nine: The JIT should not change semantics

[11:31] <brrt> jnthn: i'll test

[11:32] <jnthn> brrt: Figure you know already, but there's env vars for those also

[11:32] <brrt> i do :-)

[11:32] *** Ven joined
[11:33] <brrt> hmm, wait

[11:35] <_itz> GSK::Simple uses nqp to manipulate a queue and uses the obsolete "p6parcel", is that fairly simple to fix with a replacement nqp op or not?

[11:35] <brrt> insenstive to OSR (iirc, MVM_SPESH_OSR_DISABLE=1 should kill osr?)

[11:35] <brrt> it is, in fact, inline-sensitive

[11:36] <brrt> can't really claim that makes the searchspace much smaller

[11:38] *** Ven left
[11:38] <jnthn> Well, it means it's JIT + inline

[11:38] *** Goblin_ joined
[11:38] <Goblin_> How to deploy perl6 application?

[11:38] <jnthn> _itz: Try nqp::hllize

[11:38] <_itz> ty

[11:38] *** laouji joined
[11:41] *** Goblin_ left
[11:42] *** thou joined
[11:43] *** laouji left
[11:44] <_itz> that seems to work .. at least the test passes

[11:44] <brrt> hmmmmmmmmmm

[11:44] <brrt> do you know just how many frames are compiled in panda? :-(

[11:46] <brrt> 659 frames before this stuff is even run

[11:48] *** yqt joined
[11:49] <brrt> talking about needles and haystacks :-)

[11:49] <brrt> anyway, bbiab

[11:49] *** brrt left
[11:51] *** kid51 left
[11:52] <dalek> gtk-simple: 8102aba | (Steve Mynott)++ | lib/GTK/Simple.pm6:

[11:52] <dalek> gtk-simple: rename nqp::p6parcel to nqp::hllize as suggested by jnthn++ test now passes post GLR

[11:52] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/8102abae64

[11:52] <dalek> gtk-simple: 9bfe7e9 | niner++ | lib/GTK/Simple.pm6:

[11:52] <dalek> gtk-simple: Merge pull request #14 from stmuk/master

[11:52] <dalek> gtk-simple: 

[11:52] <dalek> gtk-simple: rename nqp::p6parcel to nqp::hllize as suggested by jnthn++ test now passes post GLR

[11:52] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/9bfe7e9da4

[11:54] <_itz> hmm I'm still seeing problems with nativecall not finding debian .so with .0 on the end

[12:01] <ShimmerFairy> _itz: make sure it's not really a linker script

[12:02] <_itz> I'm wondering if it's because I'm using multiarch

[12:08] *** laouji joined
[12:11] <colomon> Could not download module metadata: No such method 'host' for invocant of type 'HTTP::Request'

[12:11] <colomon> :/

[12:13] *** rurban left
[12:13] *** laouji left
[12:15] <timotimo> _itz: usually a -dev script will create the .so symlink

[12:22] <DrForr> Ooo, Gtk fixes, maybe once I get back in the swing of things it'll be time to resurrect a project...

[12:22] <lizmat> m: say [] xx 2   # under the one arg rule, shouldn't that be () ?

[12:22] <camelia> rakudo-moar b5a5bf: OUTPUT«([] [])␤»

[12:23] *** Ven joined
[12:23] <_itz> timotimo: ah I've never noticed that .. oddly aptitude installed 54 packages rather than just the -dev one in order to set that one sym link

[12:23] <lizmat> m: say $[] xx 2   # proper way to do this post GLR ?

[12:23] <camelia> rakudo-moar b5a5bf: OUTPUT«([] [])␤»

[12:24] <nine> lizmat: would one-arg make any sense at all with xx?

[12:24] *** Ven left
[12:24] <_itz> there is probably some clever debian dpkg configuration to automatically install -dev for everything

[12:24] <lizmat> m: say ((1,2) xx 2)

[12:24] <camelia> rakudo-moar b5a5bf: OUTPUT«((1 2) (1 2))␤»

[12:25] <lizmat> shouldn't that be (1 2 1 2) ?

[12:25] <lizmat> m: say (Slip(1,2) xx 2)

[12:25] <camelia> rakudo-moar b5a5bf: OUTPUT«((1 2) (1 2))␤»

[12:25] <moritz> lizmat: I would have expected a flat List/Seq too

[12:26] <nine> m: say flat (1,2) xx2

[12:26] <camelia> rakudo-moar b5a5bf: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wgPAyihMst␤Two terms in a row␤at /tmp/wgPAyihMst:1␤------> 3say flat (1,2)7⏏5 xx2␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        …»

[12:26] <nine> m: say flat (1,2) xx 2

[12:26] <camelia> rakudo-moar b5a5bf: OUTPUT«(1 2 1 2)␤»

[12:26] <lizmat> please note that my last commit may have broken this

[12:26] <lizmat> I'm going to revert

[12:28] <dalek> rakudo/nom: 4601fcd | lizmat++ | src/core/List.pm:

[12:28] <dalek> rakudo/nom: Revert "Make rand xx N about 2.5x faster"

[12:28] <dalek> rakudo/nom: 

[12:28] <dalek> rakudo/nom: Alas, some subtleties of xx are not covered by this patch.  And the easy

[12:28] <dalek> rakudo/nom: fix does not seem to re-introduce the original behaviour.  So reverting for

[12:28] <dalek> rakudo/nom: now until we get more info.

[12:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4601fcdf28

[12:28] *** aiacob left
[12:29] <lizmat> fwiw, giving up on speeding up xx for now...   it is a tangled web

[12:31] <nine> lizmat: it's strange that a 2 line implementation can contain such subtleties

[12:32] <lizmat> have you looked at the inside of GATHER lately?  :-)

[12:32] <lizmat> in any case, I'm not sure what the required semantics are anymore

[12:32] <lizmat> [] xx 2   should that be ([],[]) or () ?

[12:32] *** aiacob joined
[12:33] <nine> lizmat: good point :)

[12:33] <lizmat> with one arg rule, I would think ()  and that you need $[] xx 2 to get ([],[])

[12:33] <lizmat> but that's not the current (tested) behaviour, afaics

[12:36] <ShimmerFairy> I see xx as "take this thing, and copy it a bunch", so one-arg rule doesn't make much sense to me at first glance.

[12:36] <lizmat> m: dd (1,2) xx 2

[12:36] <camelia> rakudo-moar b5a5bf: OUTPUT«((1, 2), (1, 2)).Seq␤»

[12:36] <lizmat> m: say (1,2) xx 2

[12:36] <camelia> rakudo-moar b5a5bf: OUTPUT«((1 2) (1 2))␤»

[12:37] <lizmat> that's the wrong behaviour I introduced today

[12:37] <lizmat> (1,2) should get flattened

[12:38] <lizmat> however, if I add code to do that, [] gets flattened to () as well

[12:39] <lizmat> I guess I need smarter code than @!cached = $!x.()

[12:39] *** laouji joined
[12:39] <nine> Evaluates the left argument the number of times specified by the right argument. Each evaluation is in list context, and returns a Seq. The result of all these evaluations is returned as a list of arrays (which will behave differently depending on whether it's bound into a flat context or a lol context).

[12:39] *** brrt joined
[12:43] <brrt> on the other hand, there are only a few areas in which the JIT cares about inlining at all

[12:43] *** laouji left
[12:46] <_itz> fatal: could not create leading directories of '/etc/.panda-work/1442925884_1': Permission denied

[12:46] <_itz> !

[12:46] <timotimo> huh? why would you be running panda inside /etc ?!?

[12:46] <timotimo> or is that a bug inside "find writeble directory" somehow?

[12:46] <_itz> why does it create the directory relative and not under the ~?

[12:49] *** RabidGravy joined
[12:49] <timotimo> jnthn: "stabalizing" the concurrency support sounds pretty violent

[12:50] *** Ven joined
[12:51] <brrt> it doesn't sound violent to me. different linguistic assumptions? :-)

[12:53] *** Ven left
[12:54] <DrForr> Well, in biology stable often equates to 'dead' :)

[12:55] *** Loren_ joined
[12:55] <DrForr> Maybe 'metastabilizing' :) But that sounds too close to 'metastasizing' which is even worse.

[12:56] <brrt> hmmm

[12:56] <brrt> still not seeing it, sorry :-)

[12:57] *** Loren left
[12:57] *** mullagainn joined
[12:57] <geekosaur> typo? "stab-alising"

[12:58] <DrForr> Oh, didn't see the 'a'.

[12:58] <geekosaur> there is something about that typo that makes me focus on the stab- instead of seeing stable/stabile...

[12:59] <_itz> its like the ink blots :P

[12:59] <timotimo> brrt: i read it as "stab-alizing"

[12:59] * brrt didn't see the typo either

[12:59] <brrt> funny

[13:00] <brrt> hmm... as far as i can see everything looks pretty innocent

[13:01] <brrt> oh look at that, we compile 24 different news

[13:02] <timotimo> Ulti: do you remember the parallel primes benchmark?

[13:02] <timotimo> Ulti: it doesn't crash any more

[13:07] *** mprelude joined
[13:07] <_itz> what happened to star?

[13:07] <_itz> JVM?

[13:08] <moritz> _itz: I've ignored the JVM so far; I just didn't get around to writing a release announcement yet

[13:08] <moritz> help wanted :-)

[13:08] *** skids joined
[13:09] <_itz> OK I'll submit a PR for the release announcement shortly

[13:09] <timotimo> what is it that the perl6 community is this time?

[13:09] <timotimo> thrilled, perhaps?

[13:10] * _itz drinks moar coke zero

[13:10] <moritz> agonized

[13:10] <timotimo> hrhr

[13:10] <moritz> exuberant

[13:10] <timotimo> stabalized

[13:10] <moritz> cautiously optimistic

[13:12] <timotimo> acoustic

[13:12] <brrt> mad

[13:12] <brrt> but that may be just me

[13:13] <moritz> intrigued!

[13:13] <jnthn> timotimo: Parallel programming is hard, but I'll tkae a stab at it :P

[13:13] *** brrt left
[13:19] <JimmyZ> timotimo: looks like nfa_stat branch is hard :P

[13:22] * jnthn prolly away for the rest of the day &

[13:30] <dalek> rakudo-star-daily: 13e2e30 | coke++ | log/ (9 files):

[13:30] <dalek> rakudo-star-daily: today (automated commit)

[13:30] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/13e2e30498

[13:30] <timotimo> JimmyZ: i'm not aware of that branch?

[13:32] <timotimo> JimmyZ: you mean "nfa to statelist"?

[13:32] <timotimo> Ulti: unfortunately i cannot really figure out if it's making progress or just twiddling its thumbs; its memory usage has been constant for a while and its CPU time has just reached 2 hours %)

[13:37] *** manwar joined
[13:38] <JimmyZ> timotimo: yeah

[13:38] *** manwar left
[13:38] *** laouji joined
[13:39] <[Coke]> _itz++ proper drink choices.

[13:41] <timotimo> JimmyZ: you're trying to help out? :)

[13:43] *** laouji left
[13:46] *** aborazmeh joined
[13:46] *** aborazmeh left
[13:46] *** aborazmeh joined
[13:48] <JimmyZ> timotimo: I did take some time to try to understand nfa.nqp a bit. but I don't unstand it well enough yet to do some changes.

[13:48] <JimmyZ> *understand

[13:49] *** felher joined
[13:50] <timotimo> OK

[13:50] <_itz> https://github.com/rakudo/star/pull/51

[13:50] *** sufrostico joined
[13:50] <timotimo> yeah, i put some print statements all over the place to figure out what happens when

[13:50] <timotimo> but i was missing the very important point that it's all about before and after serialization

[13:51] *** xinming left
[13:51] *** rurban joined
[13:52] <timotimo> Ulti: i don't have a comparison value, but that benchmark runs its loop between 7 seconds and 7.5 seconds on my machine

[13:53] <lizmat> I'm wondering whether it would make sense to give Seq and List their own .grep candidates

[13:54] <lizmat> in the List/Array case, we wouldn't need to make an iterator to feed the values, right?

[13:54] *** laouji joined
[13:54] *** rindolf left
[13:54] <lizmat> anyways, running a spectest now on a patch that should make .grep about 2x as fast

[13:57] <[Coke]> RT: 1,027; testneeded: 9; GLR: 3; xmas: 108

[13:59] *** laouji left
[14:03] *** Ven joined
[14:04] *** Ven left
[14:06] *** xinming joined
[14:09] *** aborazmeh left
[14:10] <timotimo> huh, it kind of seems like the primes-parallel benchmark has a chance to get stuck somehow

[14:12] *** dustinm` left
[14:13] <timotimo> https://gist.github.com/MattOates/125009c88f6ee9f5f101 - this is the benchmark in question

[14:13] <timotimo> i wonder why replacing the ".elems == 0" with some boolification makes it b0rk

[14:14] *** hernanGOA joined
[14:17] <lizmat> because .elems vivifies ?

[14:17] <lizmat> *reifies ?

[14:17] <timotimo> fair enough, but isn't boolifying supposed to get the "does it give at least one item" as truth value?

[14:18] *** dustinm` joined
[14:20] *** Ven joined
[14:23] *** Ven left
[14:23] *** araujo_ joined
[14:23] *** araujo_ left
[14:24] *** laouji joined
[14:24] <lizmat> well, yeah, but for now, it just checks elems afaik

[14:24] <lizmat> I actually added a "bool-only" method to Iterator yesterday

[14:24] *** araujo_ joined
[14:25] <lizmat> that would allow to only fetch one value to determine truthness

[14:25] *** araujo_ left
[14:25] <lizmat> self.pull-one() !=:= IterationEnd;

[14:26] <timotimo> ah, neato

[14:26] <timotimo> that probably fits here

[14:26] <timotimo> we'd .Bool on the result of a .grep to get that, for example?

[14:27] <lizmat> timotimo: thing is, that method is not getting called just yet

[14:27] *** araujo left
[14:27] <lizmat> making Seq.Bool call that method, breaks quite a few spectests  :-(

[14:27] <timotimo> OK, that's for the future in that case

[14:27] <timotimo> oh? strange

[14:27] *** araujo joined
[14:27] <lizmat> a lot of cases of Seq has been consumed

[14:28] <timotimo> ugh, damn

[14:29] *** laouji left
[14:29] <nine> That's gonna be hard to avoid while retaining the performance gain :/

[14:29] <timotimo> perhaps things where you'd "if @foo { say @foo }" ?

[14:29] *** araujo left
[14:29] <Ulti> timotimo cool I can add it to the other ones and see how it does :)

[14:30] <timotimo> please do

[14:30] <timotimo> hm, though in that case we've assigned to a @var already

[14:30] *** araujo joined
[14:30] <timotimo> isn't that what triggers memoization?

[14:31] <lizmat> yes, assigning does that  :-)

[14:31] *** araujo left
[14:31] *** Ven joined
[14:32] *** araujo joined
[14:32] <timotimo> so my example is wrong already

[14:32] <timotimo> as in: rakudo would do the right thing

[14:32] *** gt9k joined
[14:32] *** araujo left
[14:33] *** rindolf joined
[14:33] <timotimo> in the code i pasted, we could use .first, though, right?

[14:33] *** yqt left
[14:33] <lizmat> hmm....  ok, forget the grep opt

[14:34] <lizmat> we appear to have to handle "last" in grep as well...

[14:34] *** Ven left
[14:34] <timotimo> hum, that explodes

[14:34] <lizmat> I don't see how I can pull that off in a pull-one (pun intended :-)

[14:34] * Ulti is just building a fresh rakudo and running all the primes benchmarks

[14:34] <timotimo> you can just have a CONTROL block, though?

[14:35] <lizmat> hmmm....

[14:35] <lizmat> I'm not sure how to set that up, actually...

[14:35] <timotimo> not quite as performant as having an "only handle LAST" thingie, though

[14:35] <Ulti> oh neat someone fixed the bug with panda?

[14:36] *** araujo joined
[14:36] <timotimo> yeah, i put in the cheap workaround

[14:36] <lizmat> Ulti: worked around, afaik

[14:36] <timotimo> we're still puzzled as to why that problem happens

[14:36] <Ulti> I forgot to turn off the JIT so thats good

[14:36] <Ulti> timotimo++

[14:37] *** gt9k left
[14:37] <dalek> star: 0c7abc9 | (Steve Mynott)++ | docs/announce/2015.09.md:

[14:37] <dalek> star: import of Sept 2015 release announce

[14:37] <dalek> star: review: https://github.com/rakudo/star/commit/0c7abc93dd

[14:37] <dalek> star: 447c714 | (Steve Mynott)++ | docs/announce/2015.09.md:

[14:37] <dalek> star: mention new tutorial

[14:37] <dalek> star: review: https://github.com/rakudo/star/commit/447c714597

[14:37] <dalek> star: 0b227e3 | lizmat++ | docs/announce/2015.09.md:

[14:37] <dalek> star: Merge pull request #51 from stmuk/master

[14:37] <dalek> star: 

[14:37] <dalek> star: import of Sept 2015 release announce

[14:37] <dalek> star: review: https://github.com/rakudo/star/commit/0b227e3d89

[14:39] *** laouji joined
[14:42] *** rvchangue joined
[14:43] *** laouji left
[14:46] *** Sqirrel joined
[14:46] *** vz_ joined
[14:47] *** g4 left
[14:50] <Ulti> well the parallel benchmark sure is demolishing my CPU

[14:50] <Ulti> but its about 70-100x slower than the others if the 7s is similar for me

[14:50] <timotimo> d'oh

[14:51] <timotimo> well, we're doing all numbes up to $max in any case

[14:51] <Ulti> I kind of expected that though since there is a lot of overhead added to something thats a very vectorisable cacheable numeric algorithm

[14:51] <Ulti> im sure if I tuned it a bit we could do better

[14:51] <Ulti> like batching up a lot more numbers per thread

[14:52] <Ulti> still cool that it now works at all :D

[14:54] *** laouji joined
[14:54] <xinming> Just curious, Is the Template::Mustache recommended template system for perl6? Or it's actively maintained ATM and most featureful?

[14:55] *** kanishka joined
[14:55] *** Ven joined
[14:55] <Ulti> primes-parallel: ran in 8.23010632768547 seconds (σ = 0.941242886454207 seconds)   

[14:56] <Ulti> thats a nasty standard deviation too

[14:56] <Ulti> primes-inline-loop-upto-sqrt: ran in 0.100610374864713 seconds (σ = 0.0121947911307684 seconds)

[14:56] <Ulti> for comparisson

[14:57] <Ulti> the native type version is marginally slower but with a much tighter standard deviation

[14:58] *** larion left
[14:58] *** Ven left
[14:59] <Ulti> timotimo I'll add in the sqrt constraint that might help :)

[14:59] *** laouji left
[14:59] <Ulti> rather than checking every number

[14:59] <timotimo> could make it better, aye

[15:01] <Ulti> primes-parallel: ran in 0.154561128526646 seconds (σ = 0.150724504577809 seconds)

[15:01] <Ulti> quite a bit better x____X

[15:02] <Ulti> guess I should maybe test this actually finds them

[15:02] <Ulti> heh

[15:02] <timotimo> haha

[15:02] <timotimo> yeah, i put that in in the middle,t oo

[15:02] <timotimo> when i made it a whole lot faster, i also made it wrong

[15:02] <Ulti> thats really nice

[15:02] <Ulti> if working

[15:04] <xinming> Ignore me, I understand what mustache means now.

[15:05] <timotimo> xinming: i do not know which templating system is the most recommended one

[15:06] <timotimo> but i think mustache is rather good

[15:06] *** rurban left
[15:07] <xinming> timotimo: Yes. Thanks for your reply. :-)

[15:07] <Ulti> timotimo none of these appear to be working :/

[15:08] <Ulti> they did before though so must need some post GLR attention I'm guessing

[15:08] *** rurban joined
[15:08] *** aiacob left
[15:09] *** laouji joined
[15:10] <hoelzro> o/ #perl6

[15:12] <timotimo> oh, none of what exactly?

[15:12] <timotimo> the other primality benchmarks?

[15:13] *** laouji left
[15:17] <Ulti> yeah

[15:17] <Ulti> in fact I can't work out what is wrong

[15:17] <Ulti> push looks to not be doing what you'd expect

[15:17] *** larion joined
[15:18] *** rurban left
[15:18] <timotimo> oh, huh?

[15:18] <timotimo> it only does what the spec tests expect it to :|

[15:18] <timotimo> which may or may not be enough

[15:19] <lizmat> whee   got the grep opt to work (I think): running final spectest

[15:19] *** domidumont left
[15:19] <dalek> nqp: 3863274 | (Pawel Murias)++ | tools/build/gen-js-makefile.nqp:

[15:19] <dalek> nqp: Remove dead code.

[15:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/386327474e

[15:19] <dalek> nqp: dc55987 | (Pawel Murias)++ | src/vm/js/ (4 files):

[15:19] <dalek> nqp: [js] start working on serialization

[15:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dc55987e8a

[15:19] <pmurias> hoelzro: \o

[15:19] <hoelzro> o/ pmurias 

[15:23] *** travis-ci joined
[15:23] <travis-ci> NQP build passed. Pawel Murias '[js] start working on serialization'

[15:23] <travis-ci> https://travis-ci.org/perl6/nqp/builds/81607366 https://github.com/perl6/nqp/compare/17b6555833df...dc55987e8ab2

[15:23] *** travis-ci left
[15:24] *** zakharyas joined
[15:24] *** laouji joined
[15:28] *** rurban joined
[15:28] *** laouji left
[15:30] <TimToady> moritz: actually, the first Perl was on a project for the NSA, and I moved to JPL shortly after Perl 1 came out

[15:30] <yoleaux> 00:53Z <ShimmerFairy> TimToady: oh, speaking of hyper, I've been wondering if »».foo would be a nice short version of .race.foo (like ».foo for .hyper.foo), or if that's too cute a syntax in this case.

[15:30] <lizmat> >>>>.foo   # texas race

[15:31] <TimToady> Perl 2 to Perl 4 came out at JPL

[15:31] *** perl6_newbee joined
[15:32] *** rurban left
[15:33] *** diana_olhovik_ left
[15:33] *** laouji joined
[15:35] * mrf is going to need to learn how to generate unicode chars from his keyboard to program p6

[15:35] <Ulti> so the parallel one is about ten times slower.... but its also doing a lot more work since all the others are only comparing to the primes already found below the square root the parallel one doesnt have any of that cache so actually its doing a lot more work and still got a reasonable time

[15:35] <Ulti> and it is working :)

[15:37] <timotimo> mrf: we have a piece in the doc about that

[15:37] <mrf> :D

[15:37] <timotimo> mrf: however, no need to write unicode characters

[15:38] <Ulti> https://gist.github.com/MattOates/c5879a07b1ef2c013097

[15:38] <timotimo> everything we have in the main language can be done with "texas" as well

[15:38] *** Loren_ left
[15:38] *** laouji left
[15:39] <hoelzro> mrf: if you use Vim, you can use digraphs

[15:39] <mrf> timotimo: I thought there was one operator that didn't have an ascii equiv?

[15:39] <hoelzro> but, as timotimo said, Perl 6 can be written entirely with ASCII characters

[15:39] *** laouji joined
[15:39] <timotimo> mrf: yeah, but you're not going to need that ever

[15:39] <timotimo> mrf: except very rarely in internals-hacking

[15:39] <timotimo> and even then you can spell it differently

[15:42] <mrf> I think I will avoid it

[15:45] *** oskie left
[15:48] *** zakharyas left
[15:52] <Ulti> timotimo wonder timotimo the grep without racing is 0.4 seconds rather than 1.4 :(

[15:53] *** larion left
[15:54] *** vz_ left
[15:54] *** Ven joined
[15:55] <Ven> .oO( we should have lazy numbers, so that `.elems == 0` could only check the first elem )

[15:55] <lizmat> Ven: that is what I think Seq.Bool should do

[15:55] <lizmat> but that will break too much atm

[15:55] <lizmat> cycling&

[15:56] <Ven> lizmat: that'd be very good (well, probably wreck havoc at the type-level though), but lazy ints are a tad more crazy :D

[15:57] *** Ven left
[15:59] <timotimo> Ulti: "the" grep? but there's two greps ... so perhaps the one that does less work just has too much overhead?

[16:00] <timotimo> i'm not 100% sure how the things work, but it's likely that a race that gets set up the very same way over and over again (i.e. the inner loop) doesn't re-use things it might be able to if it were hand-tuned?

[16:00] <Ulti> timotimo: yeah

[16:00] <Ulti> I think if I removed the inner loop it might work out better

[16:00] <Ulti> I'll give it a go

[16:03] *** pmurias left
[16:04] <Ulti> timotimo the parallel one with just the outer race ends up being about the same time

[16:05] *** yuvipanda joined
[16:06] <timotimo> oh?

[16:06] <timotimo> the same time as ... what exactly?

[16:06] <Ulti> as the greps without the race

[16:06] <Ulti> :(

[16:07] <timotimo> oh, damn

[16:07] <timotimo> but it uses more cpu time?

[16:08] <timotimo> as in: it maxes out more than one?

[16:08] <Ulti> oh yeah

[16:08] *** telex left
[16:08] <Ulti> its basically 4 times as bad since its using that much CPU for the same task

[16:08] <timotimo> argh, wtf?

[16:09] <timotimo> could it not be splitting up the tasks at all?

[16:09] <Ulti> well its got 4 threads and ends up being a little slower

[16:09] <Ulti> for the same load

[16:09] <timotimo> could it be giving all the work to all 4 threads?

[16:09] <Ulti> might be

[16:09] <Ulti> *shrug*

[16:09] <Ulti> that would be it not working as specced though right

[16:10] <timotimo> right

[16:10] <timotimo> but what do i know :)

[16:10] *** telex joined
[16:10] <Ulti> I suspect it might be something like batch says how much to consume before splitting out a thread? so it ends up just making threads and the first finishes before the second starts

[16:11] <Ulti> yeah going to 8 from 4 threads slowed it down

[16:12] <timotimo> i haven't looked at what the arguments to race do; i only remember that you can leave the arguments out and it'll try to come up with something sensible

[16:14] <Ulti> https://gist.github.com/MattOates/c5879a07b1ef2c013097 some updated numbers

[16:15] *** laouji left
[16:17] <timotimo> oh btw

[16:17] <timotimo> loop labels *are* implemented in rakudo nowadays

[16:18] <Ulti> sure thats just copy pasta from Tim King's code http://sd.jtimothyking.com/2013/09/17/how-fast-or-slow-is-perl-6/

[16:18] <Ulti> though 11 seconds was his best time before :D

[16:18] <Ulti> Rakudo demolishes that time

[16:18] <Ulti> 0.094 nowadays >:D

[16:18] <sjn> p6: sub test-me(:$str!) { say "$str"; }; test-me("gives error");

[16:18] <camelia> rakudo-moar 4601fc: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub test-me at /tmp/tmpfile:1␤  in block <unit> at /tmp/tmpfile:1␤␤»

[16:18] *** Ven joined
[16:19] <Ulti> m: say 11 / 0.094

[16:19] <camelia> rakudo-moar 4601fc: OUTPUT«117.021277␤»

[16:19] <sjn> can someone please explain that error message for me?

[16:19] <_itz> well I built a star 2015.09 and I get some fails with ./rakudo/t/spec/S32-num/power.t

[16:19] <sjn> p6: sub test-me(:$str!) { say "$str"; }; test-me(bar => "gives error");

[16:19] <camelia> rakudo-moar 4601fc: OUTPUT«Required named parameter 'str' not passed␤  in sub test-me at /tmp/tmpfile:1␤  in block <unit> at /tmp/tmpfile:1␤␤»

[16:19] <timotimo> sjn: you've declared $str as a named argument

[16:19] <PerlJam> sjn: you gave it a positional rather than the required named

[16:20] <Ulti> oh wait for those algos it was 2.2 seconds

[16:20] <Ulti> m: say 2.2 / 0.094

[16:20] <camelia> rakudo-moar 4601fc: OUTPUT«23.404255␤»

[16:20] <Ulti> still respectable

[16:20] <timotimo> 23x faster?

[16:20] <Ulti> yup

[16:20] <Ulti> for identical code

[16:20] <sjn> wouldn't it be better if the error said "got 1 positional argument, but expected a pair" or something?

[16:20] <Ulti> with all those loops and logic :D

[16:20] <PerlJam> sjn: aye, the error message was LTA

[16:21] <moritz> s/pair/named argument/

[16:21] <Ulti> that was September 2013!!!

[16:21] <Ulti> nice

[16:21] <Ulti> naw just missed the 17th to do a two years to the day blog reply

[16:21] <Ulti> probably still worth it

[16:22] *** Ven left
[16:22] <_itz> m: say 1i**NaN

[16:22] <camelia> rakudo-moar 4601fc: OUTPUT«NaN+NaN\i␤»

[16:23] <dalek> perl6-roast-data: c1c5d89 | coke++ | / (9 files):

[16:23] <dalek> perl6-roast-data: today (automated commit)

[16:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c1c5d89af0

[16:29] *** larion joined
[16:30] <timotimo> nan.... nani??!!?!

[16:31] <[Coke]> I am surprised we need a complex NaN as opposed to just NaN.

[16:32] <timotimo> m: say sqrt(NaN + NaN\i)

[16:32] <camelia> rakudo-moar 4601fc: OUTPUT«NaN+NaN\i␤»

[16:32] <timotimo> m: say sqrt(NaN)

[16:32] <camelia> rakudo-moar 4601fc: OUTPUT«NaN␤»

[16:32] <timotimo> m: say sqrt(-NaN)

[16:32] <camelia> rakudo-moar 4601fc: OUTPUT«NaN␤»

[16:32] * timotimo shrugs

[16:32] <timotimo> not like i understand NaN well at all :)

[16:32] <_itz> its an Indian bread I thought

[16:36] <ilmari> mm, inf nan

[16:39] <zostay> m: sqrt(i**2)

[16:39] <camelia> rakudo-moar 4601fc: OUTPUT«WARNINGS:␤Useless use of "sqrt(i**2)" in expression "sqrt(i**2)" in sink context (line 1)␤»

[16:39] <zostay> m: say sqrt(i**2)

[16:39] <camelia> rakudo-moar 4601fc: OUTPUT«6.12323399573677e-17+1i␤»

[16:47] *** yqt joined
[16:51] <psch> hi #perl6 o/

[16:51] <psch> anyone with some decent moar/gdb fu who can give me the REPRData for the IntStr STable?

[16:52] <psch> i've tried to figure out a way to BP in P6opaque.c in the right spot, but my C is insufficient :s

[16:52] <psch> for reference, this is what we get on the jvm: https://gist.github.com/peschwa/ea5b01f814d4dc46cee1

[16:53] <psch> and unbox{Int,Str}Slot *probably* should have useful values, but...

[16:54] *** abraxxa left
[17:00] *** domidumont joined
[17:06] *** patrickz joined
[17:09] <garu_> Ven, mst: thanks, I'll fix it right away

[17:10] <_itz> http://pl6anet.org/drop/rakudo-star-2015.09-RC0.tar.gz

[17:12] *** uvtc joined
[17:16] <uvtc> Not sure I commented on it in the right place (https://github.com/rakudo/star/pull/51), but it seems to me that it may be time to remove the "useful and usable" from the Star release announcements.  IMO, it makes it sound like there's a preconceived notion that it's not useful and usable.

[17:16] <[Coke]> +1

[17:18] *** uvtc left
[17:22] *** xfix joined
[17:30] <_itz> tony-o: why did you close the issue and PR on perl6-data-dump.  The test fails and the PR was the fix

[17:41] <timotimo> Ulti: will you use loop labels in your code now?

[17:46] *** rurban joined
[17:46] <tadzik> hmm, TimToady often says that Perl 6 is the language for the next 25 (?) years, does anyone remember the number in that sentence, or a source where it can be read? :)

[17:47] <PerlJam> 100 years

[17:47] *** yqt left
[17:48] <tadzik> thanks :)

[17:49] <PerlJam> also, I'm pretty sure the number came from Paul Graham ... http://www.paulgraham.com/hundred.html

[17:51] *** rurban left
[17:52] <sergot> m: say 42.WHICH.say

[17:52] <camelia> rakudo-moar 4601fc: OUTPUT«Int|42␤True␤»

[17:52] <sergot> m: say 42.WHAT.say

[17:52] <camelia> rakudo-moar 4601fc: OUTPUT«(Int)␤True␤»

[17:52] <sergot> i forgot again...

[17:53] <tadzik> m: Life, the Universe, and Everything.WHY.say

[17:53] <camelia> rakudo-moar 4601fc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6ZPmlY0sWH␤Undeclared names:␤    Everything used at line 1␤    Life used at line 1␤    Universe used at line 1. Did you mean 'Universal'?␤Undeclared routines:␤    and used at line 1. Did you mean 'r…»

[17:53] <tadzik> m: "Life, the Universe, and Everything".WHY.say

[17:53] <camelia> rakudo-moar 4601fc: OUTPUT«42␤»

[17:56] *** iH2O joined
[17:59] *** iH2O left
[17:59] <dalek> roast: 63ad4c4 | usev6++ | S03-metaops/eager-hyper.t:

[17:59] <dalek> roast: Add reference to existing RT #124517

[17:59] <dalek> roast: review: https://github.com/perl6/roast/commit/63ad4c454b

[17:59] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124517

[18:00] <_itz> tony-o: thanks!

[18:01] *** vendethiel joined
[18:08] <tony-o> _itz: are you stmuk?

[18:09] <_itz> yes!

[18:13] *** rurban joined
[18:16] <timotimo> the saint M of the UK

[18:17] *** rurban left
[18:18] *** frodwith left
[18:21] <moritz> http://hack.p6c.org/~moritz/rakudo-star-2015.03-rc0.tar.gz # please test!

[18:21] <moritz> _itz++ for the announcement PR

[18:21] <_itz> 03?

[18:22] <moritz> erm

[18:22] <moritz> http://hack.p6c.org/~moritz/rakudo-star-2015.09-rc0.tar.gz # better link. Please test!

[18:22] <_itz> mv++

[18:23] <moritz> nah, I just had the old RC tarball around, and gave the wrong link here

[18:24] *** yqt joined
[18:24] * _itz recovers his unoffical one from the internet

[18:25] <_itz> when I tried it .. power.t failed (which I believe may not be fixed in current nom)

[18:25] <_itz> m: say 1i**NaN

[18:26] <camelia> rakudo-moar 4601fc: OUTPUT«NaN+NaN\i␤»

[18:26] <_itz> etc

[18:26] <tony-o> _itz: no worries, thank you for mentioning that.  i thought i'd merged before i closed 

[18:26] *** vendethiel left
[18:27] *** Gothmog_ joined
[18:28] <_itz> ^ s/recovers/removes

[18:29] <bartolin> I consider going through roast and replacing all (or as many as possible) occurences of eval-dies-ok/dies-ok with throws-like.

[18:29] <bartolin> For code which fails with X::AdHoc, I wonder if it would be better to test for X::AdHoc or Exception. There was a short discussion about that yesterday: http://irclog.perlgeek.de/perl6/2015-09-21#i_11253577

[18:29] <bartolin> Since jnthn++ suggested to audit the remaining non-typed exceptions before christmas, I guess it would be better

[18:29] <bartolin> to test for X::AdHoc for now. That way we see failures in roast when upgrading to typed exceptions and can adjust the tests accordingly.

[18:30] <bartolin> Do you have any thoughts on that?

[18:31] <bartolin> Optionally, all X::AdHoc could be changed (back) to Exception shortly before releasing 6.christmas (to become more stable wrt throws-like)

[18:34] *** Peter_R joined
[18:36] *** rurban joined
[18:38] <dalek> roast: 9e8db55 | coke++ | S03-metaops/zip.t:

[18:38] <dalek> roast: less forceful fudge

[18:38] <dalek> roast: review: https://github.com/perl6/roast/commit/9e8db55a7f

[18:38] *** vendethiel joined
[18:40] <[Coke]> RT #122230 is noted as "not worth thinking about until after the GLR"

[18:40] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122230

[18:41] <TimToady> m: constant @stuff = <A B C>; enum Stuff (@stuff); say C

[18:41] <camelia> rakudo-moar 4601fc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/q3EaXm5Uor␤Undeclared name:␤    C used at line 1␤␤»

[18:46] *** pat_js joined
[18:47] *** rindolf left
[18:55] *** rindolf joined
[18:55] *** perl6_newbee left
[19:00] *** Sqirrel_ joined
[19:00] *** Sqirrel left
[19:06] *** domidumont left
[19:09] *** spider-mario joined
[19:23] *** CQ left
[19:24] *** diana_olhovik joined
[19:24] <dalek> roast: 7bad7f6 | usev6++ | S06- (6 files):

[19:24] <dalek> roast: Replace some eval-dies-ok in S06-* with throws-like

[19:24] <dalek> roast: review: https://github.com/perl6/roast/commit/7bad7f674d

[19:26] *** estrabd joined
[19:27] *** rurban left
[19:34] *** muraiki joined
[19:36] *** patrickz left
[19:40] *** patrickz joined
[19:45] <[Coke]> who is running https://www.facebook.com/Perl-6-122481354428937/timeline/ ?

[19:45] *** darutoko left
[19:46] *** rurban joined
[19:46] <timotimo> oh lord, that unicorn-butterfly-kitten picture is amazing

[19:48] *** brrt joined
[19:48] <sergot> wow, amazing

[19:49] <lizmat> [Coke]: why do you want to know ?

[19:51] <[Coke]> I want to make sure it's someone in the community. Having social media that is branded like our web site that isn't run by us is a bad thing.

[19:53] <woolfy>  [Coke] re https://www.facebook.com/Perl-6-122481354428937/timeline/   ->  I don't know who is "boss" of that page.  It's not the Perl 6 page on Facebook where DrForr and I and itz and others are a member of.  That one is https://www.facebook.com/groups/1595443877388632/

[19:55] <woolfy> [Coke] I just send the admin of that other page a message.  I hope (s)he will react.

[19:55] <dalek> rakudo/nom: 53fba2c | lizmat++ | src/core/Block.pm:

[19:55] <dalek> rakudo/nom: Add utility function "has-phasers"

[19:55] <dalek> rakudo/nom: 

[19:55] <dalek> rakudo/nom: So we can fallback more easily if there's funny stuff going on

[19:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/53fba2c17f

[19:56] <[Coke]> I pinged me.

[19:56] <[Coke]> ... them. It's not me. :)

[19:56] <[Coke]> woolfy++ happy to defer to you. :)

[20:00] <brrt> any news on the JITbug front

[20:02] <dalek> rakudo/nom: a66e930 | lizmat++ | src/core/Any-iterable-methods.pm:

[20:02] <dalek> rakudo/nom: Make grep about 2.5x faster

[20:02] <dalek> rakudo/nom: 

[20:02] <dalek> rakudo/nom: If you don't have any phasers inside the block if you give a block

[20:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a66e93084b

[20:02] <lizmat> brrt: none, afaik

[20:02] <brrt> hmm :-(

[20:03] <brrt> puzzling still

[20:03] <lizmat> jnthn did a presentation this morning and then said he'd be afk for probably the rest of the day

[20:03] <dalek> roast: d635f3a | usev6++ | S (4 files):

[20:03] <dalek> roast: Replace some eval-dies-ok in S02-types/* and S10* with throws-like

[20:03] <dalek> roast: review: https://github.com/perl6/roast/commit/d635f3a696

[20:03] <tadzik> lizmat++ :)

[20:03] <lizmat> tadzik: thank you

[20:03] <brrt> on the other hand, i maintain that jit+inline is a pretty small search space

[20:03] <lizmat> there is however 1 gotcha in my patch

[20:04] <lizmat> somehow, if you specify grep: { /a/ 

[20:04] <lizmat> somehow, if you specify grep: { /a/  }

[20:04] <tadzik> I'm happy for all things "Make $thing faster"

[20:04] <patrickz> tadzik: \o/

[20:04] <lizmat> you get an error (cannot find Any.natch)

[20:04] <tadzik> patrickz!

[20:04] <lizmat> *match

[20:04] <lizmat> if you specify grep { m/a/ }   it's ok

[20:05] <lizmat> and you probably *should* just say: grep: /a/   anyway (there is an optimised candidate that takes a Regex

[20:05] <lizmat> there are two advent tests that fail now

[20:05] <lizmat> that can be easily worked around by specifying m/a/ rather than /a/

[20:06] *** kaare_ left
[20:06] <patrickz> tadzik: We have working Windows shims now.

[20:06] <tadzik> patrickz: oh, awesome!

[20:06] <lizmat> but I would appreciate any other eyes on that now (before either fixing the tests or fiixing the code)

[20:07] <[Coke]> woolfy: they said they are "magical coding robot"

[20:07] <[Coke]> which makes me want to report them to facebook.

[20:07] <tadzik> patrickz: that's all in PR?

[20:08] <[Coke]> I suspect my initial reaction is over the top, so will hold off on that.

[20:08] <tadzik> I mean, the windows shims are all working there, or is there something non-requested yet?

[20:10] <tadzik> or I could just read what you wrote..

[20:10] <woolfy> [Coke]: I got a response: "Aloha. I created this page long time ago. Just for curiosity reasons."

[20:11] <patrickz> tadzik: AFAIK rakudobrew is currently completely broken on Windows.

[20:11] <patrickz> Well, the shims don't work.

[20:11] <tadzik> right

[20:11] <patrickz> This i fixed. :-)

[20:12] <woolfy> [Coke] Ehrm, "magical coding robot"?  That sounds ominous.

[20:14] *** rzxZNkFex joined
[20:14] <colomon> woolfy++

[20:15] <woolfy> colomon: welcome on https://www.facebook.com/groups/1595443877388632/  (I just accepted your request)

[20:15] <colomon> woolfy: I know, that’s why I ++’d you.  :)

[20:15] <colomon> that was super-fast

[20:16] <woolfy> Pure luck on my part.

[20:16] <brrt> ok, i'm going to think about it a bit more and hopefully we'll figure something out tomorrow

[20:17] *** Celelibi left
[20:17] <patrickz> tadzik: I did one more change (only README.md stuff).

[20:18] <dalek> rakudo/nom: 4bdad00 | lizmat++ | src/core/Any-iterable-methods.pm:

[20:18] <dalek> rakudo/nom: Oops, WhateverCode's are not blocks

[20:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4bdad00b4f

[20:20] *** hernanGOA left
[20:21] *** Celelibi joined
[20:21] <hahainternet> was there any work on 'native arrays'? i know nothing about them, just that allocating a big (say few million entry) array seems to use an awful lot of ram

[20:22] *** hernanGOA joined
[20:23] <moritz> hahainternet: yes

[20:23] *** diana_olhovik left
[20:24] *** rindolf left
[20:24] <moritz> hahainternet: but normal arrays aren't native arrays

[20:24] <hahainternet> moritz: where should i be reading?

[20:25] <tadzik> patrickz: merged, thanks!

[20:25] <patrickz> \o/

[20:25] <dalek> roast: 0da16cc | usev6++ | S12- (4 files):

[20:25] <dalek> roast: Replace some eval-dies-ok in S12-* with throws-like

[20:25] <dalek> roast: review: https://github.com/perl6/roast/commit/0da16ccce7

[20:27] *** mattprelude joined
[20:28] <moritz> hahainternet: http://design.perl6.org/S09.html (specifically about compact and typed arrays)

[20:28] <hahainternet> moritz: willdo

[20:29] <rzxZNkFex> every time I hit a p6 synopsis or blog entry I think "nice, qq// everywhere"

[20:29] <rzxZNkFex> <> was a good design decision

[20:33] *** xfix left
[20:38] *** brrt left
[20:39] *** gensym left
[20:39] *** gensym joined
[20:40] <avuserow> hi all. just wanted to drop in and say that I successfully used Perl6 to orchestrate some work tasks. It didn't result in much code, but it was a fun experience. much better than doing it by hand :)

[20:45] <hahainternet> moritz: what it was that i was noticing was that 'xx' is slow when it comes to big typed arrays etc

[20:45] <hahainternet> i'm sure optimisation will touch that eventually, i was only playing anyhow

[20:47] <[Coke]> avuserow: Danke.

[20:48] <lizmat> avuserow: I have a patch speed up xx significantly, but alas seems to have some spectest fallout

[20:49] *** leont joined
[20:50] *** colomon left
[20:53] *** TEttinger joined
[20:57] *** skids left
[20:58] <dalek> rakudo/nom: 198f84f | lizmat++ | src/core/Any-iterable-methods.pm:

[20:58] <dalek> rakudo/nom: Make .grep 0 to 2x faster still

[20:58] <dalek> rakudo/nom: 

[20:58] <dalek> rakudo/nom: When e.g. assigning to an array, with all the values being passed through,

[20:58] <dalek> rakudo/nom: expect a 2x increase of speed.  If no vaules are being passed through, this

[20:58] <dalek> rakudo/nom: change is neutral.  YMMV

[20:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/198f84f68c

[21:00] <avuserow> lizmat: I suspect that was meant to ping hahainternet :)

[21:00] <hahainternet> indeed, hola

[21:01] <patrickz> tadzik: What do you think about https://github.com/tadzik/rakudobrew/issues/53 ? Somehow related: What do we want the word "version" to mean in rakudobrew? Only rakudo, rakudo+nqp+backend? Are installed modules compatible across backends? Do we want separate lib handling as perlbrew does?

[21:03] *** pat_js left
[21:03] *** rzxZNkFex left
[21:07] <lizmat> avuserow: oops, indeed...

[21:11] <Ulti> timotimo just for you changed the prime stuff to labelled next :P

[21:12] <timotimo> Ulti: does it make any difference?

[21:12] <Ulti> tiny bit yeah

[21:12] *** woolfy left
[21:13] *** estrabd left
[21:13] <Ulti> nothing thats not really outside of the standard deviation of the previous version

[21:18] *** colomon joined
[21:24] <Ulti> timotimo re: parallel is slower its simply to do with overheads if I up the number of primes to find suddenly parallel looks great

[21:38] <dalek> rakudo/nom: 503c0fd | TimToady++ | src/Perl6/Actions.nqp:

[21:38] <dalek> rakudo/nom: fix compile-time evaluation of enum lists

[21:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/503c0fdb81

[21:44] *** gensym left
[21:44] *** gensym joined
[21:50] <timotimo> oh, neat -^

[21:51] *** cognominal left
[21:55] <Ulti> dont suppose anyone can see the bug in this https://gist.github.com/MattOates/c5879a07b1ef2c013097 bails at line 58 with 'Failed to unbox object to integer' havent done much apart from wrap the thing in a MAIN and pass the max prime to find around

[21:59] <dalek> roast: de3a3c5 | TimToady++ | S12-enums/misc.t:

[21:59] <dalek> roast: test enums from compile-time list

[21:59] <dalek> roast: review: https://github.com/perl6/roast/commit/de3a3c50c4

[21:59] *** colomon left
[22:05] <dalek> specs/zengargoyle-patch-1: fc0a29e | zengargoyle++ | S07-lists.pod:

[22:05] <dalek> specs/zengargoyle-patch-1: missing \n in say output

[22:05] <dalek> specs/zengargoyle-patch-1: 

[22:05] <dalek> specs/zengargoyle-patch-1: proofreading yay!

[22:05] <dalek> specs/zengargoyle-patch-1: review: https://github.com/perl6/specs/commit/fc0a29ea15

[22:05] *** muraiki left
[22:07] *** TimToady left
[22:07] *** TimToady joined
[22:08] *** vendethiel left
[22:08] *** RabidGravy left
[22:13] *** yeltzooo joined
[22:13] *** SmokeMachine left
[22:13] *** preyalone left
[22:13] *** skids joined
[22:14] *** SmokeMachine joined
[22:15] *** spider-mario left
[22:16] *** preyalone joined
[22:18] <dalek> specs: fc0a29e | zengargoyle++ | S07-lists.pod:

[22:18] <dalek> specs: missing \n in say output

[22:18] <dalek> specs: 

[22:18] <dalek> specs: proofreading yay!

[22:18] <dalek> specs: review: https://github.com/perl6/specs/commit/fc0a29ea15

[22:18] <dalek> specs: 8abcbe6 | (Zoffix Znet)++ | S07-lists.pod:

[22:18] <dalek> specs: Merge pull request #99 from perl6/zengargoyle-patch-1

[22:18] <dalek> specs: 

[22:18] <dalek> specs: missing \n in say output

[22:18] <dalek> specs: review: https://github.com/perl6/specs/commit/8abcbe6763

[22:19] *** rurban left
[22:21] *** spider-mario joined
[22:21] *** mattprelude left
[22:21] <dalek> rakudo/nom: 631ac40 | lizmat++ | src/core/Any.pm:

[22:21] <dalek> rakudo/nom: dd without parameters tells in which sub it is

[22:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/631ac4041d

[22:21] <lizmat> dd

[22:21] <lizmat> m: dd

[22:21] <camelia> rakudo-moar 198f84: ( no output )

[22:22] <lizmat> so we can just add a "dd" to code while debugging code to see where it goes

[22:23] <lizmat> especially handy when verifying which Iterator candidate is used while processing a Seq

[22:23] <timotimo> Ulti: that might come from our new IntStr (and friends) support?

[22:23] <timotimo> but i thought they unbox as ints just fine ...

[22:23] * lizmat goes to bed dreaming of Seqs  :-)

[22:25] *** espadrine left
[22:26] *** advwp left
[22:27] *** advwp joined
[22:29] *** colomon joined
[22:31] *** hernanGOA left
[22:38] *** khw joined
[22:45] *** patrickz left
[22:46] *** thou left
[23:13] <ShimmerFairy> timotimo: it appears to be an issue in Range.iterator, fwiw (at least, that's where the top line of an --ll-exception stacktrace points)

[23:13] <ShimmerFairy> specifically, a 'new' constructor for an anonymous class with native int attributes.

[23:20] *** zed_ joined
[23:24] *** spider-mario left
[23:24] *** BenGoldberg joined
