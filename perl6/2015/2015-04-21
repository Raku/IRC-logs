[00:03] *** telex left
[00:04] *** aborazmeh left
[00:04] *** telex joined
[00:06] *** aborazmeh joined
[00:06] *** aborazmeh left
[00:06] *** aborazmeh joined
[00:13] *** laouji joined
[00:25] <dalek> roast: 13f03e8 | skids++ | S04-statements/if.t:

[00:25] <dalek> roast: Add tests for result of conditional statements (10 tests, two rakudo todos)

[00:25] <dalek> roast: review: https://github.com/perl6/roast/commit/13f03e8c14

[00:31] *** vendethiel left
[00:39] *** laouji left
[00:40] *** laouji joined
[00:43] *** laouji left
[00:44] *** laouji joined
[00:53] *** labster left
[00:54] *** Ben_Goldberg joined
[00:54] *** labster joined
[00:57] *** BenGoldberg left
[01:08] *** grondilu left
[01:18] *** dayangkun joined
[01:29] *** grettis left
[01:41] <dalek> roast: 97e2405 | skids++ | S04-statements/do.t:

[01:41] <dalek> roast: Add some tests for do block result values.

[01:41] <dalek> roast: These are in regions of rast that are already fudged.

[01:41] <dalek> roast: review: https://github.com/perl6/roast/commit/97e24054ba

[01:41] <dalek> roast: a2a151b | skids++ | S04-statements/do.t:

[01:41] <dalek> roast: Adjust plan for prevous commit

[01:41] <dalek> roast: review: https://github.com/perl6/roast/commit/a2a151b0db

[01:50] <atweiden> m: sub deref(%h, *@k) is rw { my $h := %h; $h := $h{$_} for @k; $h }; deref(my %x, <one two three>) = 42; say %x.perl

[01:50] <camelia> rakudo-moar c4beed: OUTPUT«{:one({:two({:three(42)})})}<>␤»

[01:51] <atweiden> why does deref need `is rw`?

[01:53] <raydiak> because you want to be able to assign to the thing it returns

[02:05] *** noganex joined
[02:08] *** noganex_ left
[02:09] *** konsolebox joined
[02:13] *** Sqirrel left
[02:24] *** Sqirrel joined
[02:28] *** konsolebox left
[02:32] *** chenryn joined
[02:40] *** egrep joined
[02:40] *** jack_rabbit joined
[02:40] *** vendethiel joined
[02:40] *** araujo joined
[02:43] *** araujo left
[02:44] *** araujo joined
[02:56] *** aborazmeh left
[02:57] *** aborazmeh joined
[02:57] *** aborazmeh left
[02:57] *** aborazmeh joined
[02:59] <dalek> specs: a095cc4 | (Geoffrey Broadwell)++ | S99-glossary.pod:

[02:59] <dalek> specs: Fix a couple corruptions in previous commit

[02:59] <dalek> specs: review: https://github.com/perl6/specs/commit/a095cc4cd9

[03:00] <dalek> nqp/no-readlineint: 384b661 | hoelzro++ | / (6 files):

[03:00] <dalek> nqp/no-readlineint: Remove references to readlineint_fh

[03:00] <dalek> nqp/no-readlineint: 

[03:00] <dalek> nqp/no-readlineint: This corresponds to recent changes in MoarVM, in the no-moar-linenoise

[03:00] <dalek> nqp/no-readlineint: branch.

[03:00] <dalek> nqp/no-readlineint: 

[03:00] <dalek> nqp/no-readlineint: I haven't removed readlineintfh from the Parrot stage 0 stuff, because

[03:00] <dalek> nqp/no-readlineint: the tests are currently failing, and I don't want to bork Parrot worse

[03:00] <dalek> nqp/no-readlineint: than it already is.

[03:00] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/384b661a42

[03:00] <dalek> nqp/no-readlineint: 9158824 | hoelzro++ | src/HLL/Compiler.nqp:

[03:00] <dalek> nqp/no-readlineint: Restore prompt to REPL

[03:00] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/9158824404

[03:00] <dalek> nqp/no-readlineint: 6a06631 | hoelzro++ | src/HLL/Compiler.nqp:

[03:00] <dalek> nqp/no-readlineint: Break reading of lines out into a helper method

[03:00] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/6a06631d74

[03:00] <dalek> nqp/no-readlineint: 886c23c | hoelzro++ | tools/build/MOAR_REVISION:

[03:00] <dalek> nqp/no-readlineint: DON'T MERGE ME Bump MoarVM version

[03:00] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/886c23c60d

[03:00] <dalek> nqp/no-readlineint: 6ec6227 | hoelzro++ | src/HLL/Compiler.nqp:

[03:00] <dalek> nqp/no-readlineint: Preserve interactive eval context as an attribute of the compiler

[03:00] <dalek> nqp/no-readlineint: review: https://github.com/perl6/nqp/commit/6ec6227d5e

[03:01] <dalek> Heuristic branch merge: pushed 16 commits to rakudo/tab-completion by hoelzro

[03:05] *** vendethiel left
[03:07] *** xiaomiao joined
[03:30] *** cschwenz joined
[03:39] *** Sqirrel left
[03:45] *** Sqirrel joined
[03:47] *** chenryn left
[03:51] *** laouji left
[03:55] *** aborazmeh left
[04:04] *** aborazmeh joined
[04:04] *** aborazmeh left
[04:04] *** aborazmeh joined
[04:14] *** zjmarlow left
[04:23] *** aborazmeh left
[04:25] *** kaare_ joined
[04:28] *** anaeem1 joined
[04:30] *** cschwenz left
[04:32] *** anaeem1 left
[04:33] *** anaeem1_ joined
[04:35] *** Ben_Goldberg left
[04:47] *** alini joined
[04:47] *** aborazmeh joined
[04:47] *** aborazmeh left
[04:47] *** aborazmeh joined
[04:47] *** atweiden left
[04:47] *** chenryn joined
[04:51] *** chenryn left
[04:52] *** lolisa joined
[04:54] *** laouji joined
[05:03] *** chenryn joined
[05:05] *** timotimo left
[05:06] *** timotimo joined
[05:06] *** lolisa left
[05:09] <dalek> roast: bca773f | skids++ | S04-statements/for.t:

[05:09] <dalek> roast: Add a few tests and fudges for result-values of for loops

[05:09] <dalek> roast: Add comment to an RT test to mark it for fix when Nil vs () gets fixed

[05:09] <dalek> roast: review: https://github.com/perl6/roast/commit/bca773f6f1

[05:13] <dalek> rakudo/nom: d26daac | TimToady++ | src/Perl6/ (2 files):

[05:13] <dalek> rakudo/nom: notice when a sigil can't parse what's after

[05:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d26daac328

[05:19] *** skids left
[05:19] *** prammer left
[05:22] *** abraxxa joined
[05:25] *** vendethiel joined
[05:27] *** jack_rabbit left
[05:45] *** Psyche^ joined
[05:46] <dtscode> [/-\_/-\/-\/-\/-\/-\/-\/-\/-\/-\/-\/-\/\]

[05:46] <dtscode> oops

[05:49] *** Patterner left
[05:52] *** cschwenz joined
[05:53] *** vendethiel left
[05:54] *** diana_olhovik_ joined
[05:54] *** _mg_ joined
[05:59] *** FROGGS left
[06:12] *** aborazmeh left
[06:13] *** alini left
[06:15] *** chenryn left
[06:17] *** chenryn joined
[06:18] *** alini joined
[06:18] *** gfldex joined
[06:26] *** _mg__ joined
[06:27] *** yvan1 left
[06:27] *** _mg_ left
[06:27] *** _mg__ is now known as _mg_

[06:30] *** gfldex left
[06:31] <nwc10> [\o/\o/\o/\o/\o/\o/\o/\o/\o/\o/\o/\o/]

[06:38] <jnthn> morning, #perl6

[06:38] <cdc> o/ jnthn 

[06:38] *** brrt joined
[06:39] *** vendethiel joined
[06:39] <vendethiel> computer, messages.

[06:39] <yoleaux> 20 Apr 2015 22:35Z <eli-se> vendethiel: https://gist.github.com/rightfold/5b5ac73aaaf0d9ccd8bd ;)

[06:45] *** araujo left
[06:46] *** araujo joined
[06:47] *** RabidGravy joined
[06:54] *** FROGGS joined
[06:55] <masak> morning, #perl6

[06:55] *** yeahnoob joined
[06:55] <brrt> morning masak, #perl6

[06:57] *** anaeem1_ left
[06:58] *** rindolf joined
[06:58] *** rurban joined
[07:01] <FROGGS> morning

[07:08] *** pecastro left
[07:11] *** zakharyas joined
[07:14] *** leont joined
[07:14] *** Timbus joined
[07:15] *** rindolf left
[07:17] *** vendethiel left
[07:23] <sergot> morning \o

[07:24] <FROGGS> o/

[07:24] <dtscode> o/

[07:29] <[ptc]> jnthn++ # blog post

[07:30] <[ptc]> jnthn: btw: you meant the 2015.04 release, not the 2014.04 release, right?

[07:30] <jnthn> uh, yes

[07:31] <jnthn> fixed, thanks

[07:31] <[ptc]> no probs :-)

[07:35] *** spider-mario left
[07:40] *** Rounin joined
[07:42] <FROGGS> jnthn++

[07:44] *** yvan1 joined
[07:44] *** vendethiel joined
[07:46] *** cschwenz1 joined
[07:55] *** bjz joined
[07:57] <brrt> jnthn++

[07:58] <brrt> i somewhat doubt, now, that jnthn will have 5 months of work on the tasks he set out for the grant :-)

[07:59] <masak> you doubt it's that much, or that little?

[07:59] *** bjz left
[08:00] *** bjz joined
[08:01] <brrt> well, i'm just incredibly impressed by the pace

[08:04] *** leont left
[08:04] <masak> brrt: we've put jnthn in an isolation tank in a foreign country. it seems to have worked.

[08:06] *** bjz left
[08:06] <brrt> :-D

[08:06] <RabidGravy> just tracking down the modules in the META.list that don't appear on modules.perl.org

[08:09] *** vendethiel left
[08:12] *** eli-se joined
[08:13] <eli-se> Hello, world!

[08:13] <masak> eli-se! \o/

[08:16] *** darutoko joined
[08:20] *** mrf joined
[08:28] <dalek> doc: f810ab2 | (Heiko Jansen)++ | lib/Type/Failure.pod:

[08:28] <dalek> doc: Use correct method name within its section

[08:28] <dalek> doc: review: https://github.com/perl6/doc/commit/f810ab253a

[08:28] <dalek> doc: 049c71a | niner++ | lib/Type/Failure.pod:

[08:28] <dalek> doc: Merge pull request #75 from heikojansen/patch-1

[08:28] <dalek> doc: 

[08:28] <dalek> doc: Use correct method name within its section

[08:28] <dalek> doc: review: https://github.com/perl6/doc/commit/049c71acce

[08:30] *** wollmers joined
[08:33] <eli-se> is it possible to print the instructions a Perl 6 expression is compiled to?

[08:33] *** andreoss joined
[08:33] <RabidGravy> is the build-project-list.pl being used to make the modules.perl.org the one in the gh-pages branch?

[08:34] <eli-se> like the dis module in Python

[08:34] <jnthn> eli-se: You can compile it into a .moarvm or .jar file and then dump the bytecode.

[08:34] <jnthn> moar --dump somefile.moarvm

[08:35] *** andreoss` joined
[08:35] <eli-se> jnthn: is that human-readable or do I need a hex editor and decipher the bytes manually?

[08:35] <jnthn> --dump gives you human readable

[08:35] <eli-se> nice, let's see

[08:37] <eli-se> how do you compile it?

[08:37] *** vendethiel joined
[08:37] <jnthn> perl6-m --target=mbc --output=foo.moarvm -e "say 'hello world'"

[08:38] <eli-se> wonderful! thanks!

[08:38] *** andreoss left
[08:39] <wollmers> m: my $cp = Uni.new(0x0044, 0x0323, 0x0307); say $cp.Str.chars;

[08:39] <camelia> rakudo-moar d26daa: OUTPUT«1␤»

[08:39] <jnthn> eli-se: You may want to put the code you're interested in into a sub thingy() { ... } so you can spot it amongst the boilerplate.

[08:41] <wollmers> m: my $cp = Uni.new(0x0044, 0x0323, 0x0307); .say for $cp.Str.chars.list>>.uniname;

[08:41] <camelia> rakudo-moar d26daa: OUTPUT«START OF HEADING␤»

[08:42] <eli-se> I wonder how instruction sets are designed.

[08:43] <moritz> eli-se: you should talk to the Mill Architecture folks :-)

[08:43] <eli-se> moritz: funny; my VM is called "mill"

[08:43] <wollmers> m: my $cp = Uni.new(0x0044, 0x0323, 0x0307); .say for $cp.Str.list>>.uniname;

[08:43] <camelia> rakudo-moar d26daa: OUTPUT«should eventually be unreachable␤  in sub uniname at src/gen/m-CORE.setting:9032␤  in sub uniname at src/gen/m-CORE.setting:9031␤  in method uniname at src/gen/m-CORE.setting:4751␤  in method dispatch:<hyper> at src/gen/m-CORE.setting:1443␤  in b…»

[08:44] <jnthn> Str.list gives you a list with one Str

[08:44] <eli-se> the instruction set is minimal, though. e.g. arity check is emitted by compiler as push argcount, push integer, compare and then conditional jump

[08:44] <wollmers> m: my $cp = Uni.new(0x0044, 0x0323, 0x0307); .say $cp.Str.chars;

[08:44] <camelia> rakudo-moar d26daa: OUTPUT«5===SORRY!5=== Error while compiling /tmp/qQFTnPCpu0␤Two terms in a row␤at /tmp/qQFTnPCpu0:1␤------> 3 = Uni.new(0x0044, 0x0323, 0x0307); .say7⏏5 $cp.Str.chars;␤    expecting any of:␤        infix␤        infix stopper␤        state…»

[08:45] *** bjz joined
[08:45] <wollmers> m: my $cp = Uni.new(0x0044, 0x0323, 0x0307); say $cp.Str.chars;

[08:45] <camelia> rakudo-moar d26daa: OUTPUT«1␤»

[08:46] *** leont joined
[08:46] <jnthn> If you want to get back to a list of codepoints then .NFC or .NFD on a Str will do it

[08:47] <wollmers> m: my $a = Uni.new(0x0044, 0x0323, 0x0307).Str; say $a.chars;

[08:47] <camelia> rakudo-moar d26daa: OUTPUT«1␤»

[08:48] <wollmers> m: my $a = Uni.new(0x0044, 0x0323); my $b = Uni.new(0x0307).Str; say $a.chars;say $b.chars;

[08:48] <camelia> rakudo-moar d26daa: OUTPUT«Method 'chars' not found for invocant of class 'Uni'␤  in block <unit> at /tmp/1qLo_VxW8X:1␤␤»

[08:48] <wollmers> m: my $a = Uni.new(0x0044, 0x0323).Str; my $b = Uni.new(0x0307).Str; say $a.chars;say $b.chars;

[08:49] <camelia> rakudo-moar d26daa: OUTPUT«1␤1␤»

[08:50] <wollmers> m: my $a = Uni.new(0x0044, 0x0323).Str; my $b = Uni.new(0x0307).Str; my $c = $a ~ $b;say $a.chars;say $b.chars;say $c.chars;

[08:50] <camelia> rakudo-moar d26daa: OUTPUT«1␤1␤2␤»

[08:50] <wollmers> m: my $a = Uni.new(0x0044, 0x0323).Str; my $b = Uni.new(0x0307).Str; my $c = $a ~ $b;say $a.chars;say $b.chars;say $c.Str.chars;

[08:50] <camelia> rakudo-moar d26daa: OUTPUT«1␤1␤2␤»

[08:50] <jnthn> And that 2 exposes one of the things that is NYI :)

[08:51] <jnthn> (Should also come out as 1.)

[08:51] <wollmers> jnthn: that's what I tested;-)

[08:51] <jnthn> :)

[08:52] <moritz> wollmers: now turn that into tests in https://github.com/perl6/roast/

[08:52] <wollmers> jnthn: one of the others NYI is properties of NFG?

[08:52] <lizmat> Berlin -> Cologne &

[08:52] *** lizmat left
[08:53] *** eli-se left
[08:53] <jnthn> wollmers: Depends. Some bits work (the ones exercises in S15-nfg/regex.t)

[08:53] <jnthn> *exercised

[08:54] <jnthn> m: my $a = Uni.new(0x0044, 0x0323, 0x0307).Str; say $a ~~ /^\w$/;

[08:54] <camelia> rakudo-moar d26daa: OUTPUT«｢Ḍ̇␤»

[08:54] <jnthn> m: my $a = Uni.new(0x0044, 0x0323, 0x0307).Str; say $a ~~ /^<:L>$/;

[08:54] <camelia> rakudo-moar d26daa: OUTPUT«｢Ḍ̇␤»

[08:55] <wollmers> moritz: ACK, maybe someone can review, agree, disagree or rediscuss my notes at the end of S-15

[08:58] <wollmers> moritz: this was where I got stuck 2008 (defining the testcases for NFG). Now jnthn++ such work makes more sense.

[08:58] *** dakkar joined
[08:59] *** yeahnoob left
[09:00] *** yeahnoob joined
[09:00] *** vendethiel left
[09:00] <jnthn> wollmers: Is that the bit under "final considerations"?

[09:01] <moritz> wollmers: I fear that most of the Unicody intricacies are lost on me :/

[09:05] *** ab5tract_ joined
[09:05] *** espadrine joined
[09:06] <wollmers> jnthn: Yea, not all of it. This commit https://github.com/perl6/specs/commit/8702be6188b4f85bf031d39ec398bc8e09a80195#diff-6c777d1323dce061e59e325c870e4679

[09:07] <jnthn> wollmers: The "properties of graphemes" thing do at the moment, where implemented, take on the properties of the base character, which is indeed taken after putting it in NFC form.

[09:08] <jnthn> So the bit around 273 matches up with what's implemented and tested, and TimToady seems to think that's sane.

[09:08] <jnthn> The concatenation bit I agree needs dealing with, just didn't get there yet.

[09:09] <wollmers> moritz: now, 7 years after 2008, we have have sane properties in Perl5 and in Perl6. So I can get back, defining test cases.

[09:09] <moritz> wollmers: great

[09:10] <jnthn> As to the formal definition thing: maybe sync it with https://github.com/MoarVM/MoarVM/blob/master/src/strings/normalize.c#L425

[09:11] <jnthn> Which is defined as an extension to canonical composition.

[09:11] <jnthn> (And so tries to be couched in its language)

[09:19] <dalek> modules.perl6.org: 022f0df | (Jonathan Stowe)++ | web/lib/P6Project/Info.pm:

[09:19] <dalek> modules.perl6.org: Transitionally support $meta->{support}->{source} and

[09:19] <dalek> modules.perl6.org: $meta->{source-url}

[09:19] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/022f0df170

[09:19] <wollmers> jnthn: I am still not completely sure, if my idea of inheriting the properties from the first NFC/NFD character makes sense. Will try to find negative cases.

[09:20] <RabidGravy> there, still five errors in building the modules list but a bit better

[09:22] <RabidGravy> one appears to have gone away, one has weird source URL which I have sent PR for and the remaining three there is something weird about their repos

[09:32] <RabidGravy> right off out to get the car cleaned :-\

[09:32] *** andreoss` left
[09:36] *** RabidGravy left
[09:41] *** wollmers left
[09:42] <dalek> perl6-examples: ed4e187 | paultcochrane++ | categories/cookbook/10subroutines/10-01arguments.pl:

[09:42] <dalek> perl6-examples: Add missing author name

[09:42] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/ed4e187617

[09:43] *** Alina-malina left
[09:43] *** telex left
[09:44] *** pecastro joined
[09:44] *** telex joined
[09:45] *** alini left
[09:46] *** laouji_ joined
[09:46] <[ptc]> sorry in advance for the dim question: will META6.json supersede META.info?  Or should the spec simply be updated to replace META6.json with META.info?

[09:47] <[ptc]> also, should there be a copyright year in a module's metadata?

[09:48] <masak> why would a copyright year need to be in the module's metadata (as opposed to just in a comment in the code, or the LICENSE file)?

[09:48] *** laouji left
[09:49] <[ptc]> masak: well, Dist::Zill does it, so I just wondered

[09:50] <masak> I'm curious what that information *could* be used for. I don't see it.

[09:51] <[ptc]> I'm not saying it *should* be there, was just wondering, that's all.

[09:51] <[ptc]> I did mention dim questions ;-)

[09:59] *** rindolf joined
[09:59] *** alini joined
[09:59] *** laouji_ left
[10:02] *** Alina-malina joined
[10:02] *** laouji_ joined
[10:04] *** yeahnoob left
[10:07] *** brrt left
[10:08] <masak> [ptc]: it's a fine question. there might well be a use.

[10:08] <masak> I mean "copyright year" does sound like metadata. I'm not sure what consumer would be interested in it, is all.

[10:09] <[ptc]> masak: was in the middle of updating a module which has a p5 and a p6 version and wondered if the dzil 'copyright_year' would be meaningful in META.info

[10:09] <[ptc]> masak: other than probably to know at a glance how up to date the module is?

[10:10] *** vendethiel joined
[10:10] <masak> not convinced by that usage ;)

[10:10] <[ptc]> me neither :-)

[10:10] <masak> glance at the LICENSE file instead ;)

[10:10] <[ptc]> doesn't the LICENSE file simply contain the text of the Artistic License or the GPL?

[10:10] <masak> or the README, or whatever.

[10:11] <[ptc]> then the copyright date doesn't necessarily match up.

[10:11] <[ptc]> yeah, or that

[10:11] <masak> the human-readable metadata, not the machine-readable metadata.

[10:12] *** chenryn left
[10:16] *** |Tux| joined
[10:19] *** Alina-malina left
[10:20] *** |Tux| left
[10:21] *** |Tux| joined
[10:21] *** laouji_ left
[10:22] *** laouji joined
[10:25] *** laouji left
[10:25] *** laouji joined
[10:26] *** andreoss joined
[10:28] <andreoss> are state variables for infinite lists broken?

[10:28] <yoleaux> 20 Apr 2015 15:49Z <flussence> andreoss: .is-prime calls down to mp_prime_is_prime() in libtommath, so you're going to have no chance of beating it for speed using perl6 code.

[10:29] <andreoss> Im getting strage errors with lazy state http://pastebin.com/3UAX16tG 

[10:29] <jnthn> Don't see how they'd interact strangely. A stage variable just keeps the container initialized the first time around, and re-instates it next time.

[10:29] <jnthn> Oh

[10:29] <jnthn> Don't use state vars with binding.

[10:29] *** risou is now known as risou_awy

[10:30] *** risou_awy is now known as risou

[10:30] <jnthn> It's the contaienr that's kept, and if you re-bind it...

[10:30] *** Ven joined
[10:31] <andreoss> the error i get is about infix:<>> which is misleading

[10:31] <andreoss> state vars cannot be lazy lists at all? 

[10:32] *** vendethiel left
[10:32] <jnthn> Well, for your case I don't get why you are using state, when "my constant" would be better.

[10:32] *** laouji left
[10:33] <Ven> o/, #perl6

[10:33] <jnthn> Maybe after the GLR, you'll be able to use assignment there and have it not try to evaluate the infinite thing, and then the issue goes away.

[10:33] *** dayangkun left
[10:34] <jnthn> o/ Ven 

[10:34] <andreoss> my constant within sub definition is kept between sub calls?

[10:34] <jnthn> Yes, constant = BEGIN time

[10:35] *** Sqirrel_ joined
[10:35] <jnthn> So, once ever. state is once per closure.

[10:36] *** vendethiel joined
[10:36] *** laouji joined
[10:36] <andreoss> thanks

[10:37] *** Sqirrel left
[10:38] <Ven> I was working on sixcheck, and I realized I had wrongly assumed f(|x) would flatten for both positionals and named, but it seems it's not true.

[10:39] <Ven> Is there anything wrong with f(|@a.grep(Pair), |@a.grep({$_ !~~ Pair})? I'm probably missing something.

[10:39] <Ven> (also, this makes me wish we had grep-not :-). Since even * !~~ wouldn't work)

[10:39] <jnthn> You need to flatten a hash

[10:39] <jnthn> Not a list of pairs

[10:40] <jnthn> |%(@a.grep(Pair)) or so

[10:42] <Ven> m: my @a = 1, 2, 3, a => 5; sub f($x, $y, $z, :$a) { say $a.perl }; f(|@a.grep(Pair), |@a.grep({$_ !~~ Pair})) # I thought it didn't

[10:42] <camelia> rakudo-moar d26daa: OUTPUT«Too many positionals passed; expected 3 arguments but got 4␤  in sub f at /tmp/YQlPBotZMN:1␤  in block <unit> at /tmp/YQlPBotZMN:1␤␤»

[10:42] <Ven> m: my @a = 1, 2, 3, a => 5; sub f($x, $y, $z, :$a) { say $a.perl }; f(|%@a.grep(Pair), |@a.grep({$_ !~~ Pair})) # I stand corrected :)

[10:42] <camelia> rakudo-moar d26daa: OUTPUT«Too many positionals passed; expected 3 arguments but got 5␤  in sub f at /tmp/LmSqtP1aW1:1␤  in block <unit> at /tmp/LmSqtP1aW1:1␤␤»

[10:43] <Ven> m: my @a = 1, 2, 3, a => 5; sub f($x, $y, $z, :$a) { say $a.perl }; f(|@a.grep(Pair).hash, |@a.grep({$_ !~~ Pair})) # duh.

[10:43] <camelia> rakudo-moar d26daa: OUTPUT«5␤»

[10:43] *** Alina-malina joined
[10:44] <Ven> I forgot % would apply to @a before .grep

[10:45] <jnthn> Precedence bites :)

[10:45] <Ven> right :). Does grep-not seem like a good thing to have?

[10:46] <Ven> In this case, I first tried @a.grep(Pair), @a.grep(* !~~ Pair) and it didn't warn – it only did when I tried it in the REPL later for some reason...

[10:46] *** Ven left
[10:46] <jnthn> I think * !~~ Pair should work, since I think we made * ~~ Pair work recently

[10:47] *** chenryn joined
[10:51] *** Ven joined
[10:51] <Ven> jnthn: right, I'll upgrade my rakudo then. it's around 2 weeks old, and iirc that commit isn't that old

[10:53] <masak> no, I don't think we need a .grep-not

[10:54] <Ven> masak: why not :)?

[10:56] <masak> it seems a really low-powered feature for something we can already do in many other ways.

[10:56] <masak> we have a ! metaoperator for exactly this reason, so we won't have to invent .x-not methods

[10:56] <Ven> we can't .grep(!Pair)

[10:57] <jnthn> * !~~ Pair ain't so long

[10:59] <masak> Ven: define your own operator ¡ that means * !~~ $term

[11:00] <Ven> no unicode in my world :)

[11:00] <Ven> that didn't made sense

[11:00] <Ven> no characters I don't have on my keyboard :P.

[11:01] <masak> I used to think like that.

[11:03] <Ven> (coding in agda is an exception to that rule)

[11:04] <Ven> masak: well, why did your opinion change?

[11:08] <colomon> for me, it was when I discovered how easy it was to type characters not on the keyboard.  :)

[11:10] *** leont left
[11:11] <masak> what colomon said.

[11:11] <masak> it stopped being a good excuse for me.

[11:12] * colomon also programmed his editor to convert the Texas version of some of the Unicode operators he used most often to the proper Unicode version at a keystroke.

[11:14] *** gcole joined
[11:15] *** Alina-malina left
[11:18] *** Alina-malina joined
[11:21] *** vendethiel left
[11:23] *** rurban left
[11:25] *** vendethiel joined
[11:35] *** brrt joined
[11:41] <Ven> masak: I still work on window regularly :)

[11:41] *** Ven left
[11:46] *** Ulti left
[11:47] *** lolisa joined
[11:49] *** Ven joined
[11:52] *** rurban joined
[11:52] *** prammer joined
[11:55] <nine> What's a Texas version of an operator?

[11:56] <nwc10> an ASCII equivalent to the non-ASCII version

[11:56] *** kaare_ left
[11:56] <nwc10> I'm (a) not sure if it's in the glosarry

[11:56] <nwc10> (b) not sure what it would take to have a glossary-aware infobot here

[11:56] <nine> Ah, it's right there

[11:56] <nine> http://syn.perl6.org/S99.html#Texas_operator

[11:56] <nwc10> yoleaux: Texas?

[11:57] <nwc10> yoleaux: Texas operator?

[11:57] <nwc10> yoleaux: botsnack?

[11:57] *** kaare_ joined
[11:58] <moritz> >> is the "texas" version of »

[11:59] <nwc10> why is Texas more ASCII than the rest of the USA?

[11:59] <moritz> in Texas, everything is bigger

[12:05] *** Ulti joined
[12:05] <Ulti> nooo lost ops

[12:05] <Ulti> also I have follow.pl loaded 

[12:05] *** xfix joined
[12:05] <Ulti> :'(

[12:08] *** ggoebel joined
[12:08] <masak> Ulti: nice to see you too ;)

[12:12] *** Sqirrel_ left
[12:14] *** kaare__ joined
[12:14] *** kaare_ left
[12:16] *** chenryn left
[12:17] *** chenryn joined
[12:21] *** lolisa left
[12:22] *** lolisa joined
[12:23] *** chenryn left
[12:34] *** laouji left
[12:35] *** ggoebel left
[12:36] *** vendethiel left
[12:42] *** andreoss left
[12:42] *** vendethiel joined
[12:46] *** RabidGravy joined
[12:51] <dalek> rakudo-star-daily: 4a33a6a | coke++ | log/ (2 files):

[12:51] <dalek> rakudo-star-daily: today (automated commit)

[12:51] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/4a33a6ac9c

[12:52] *** leont joined
[12:54] <[Coke]> S99:Texas_Operator

[12:54] <[Coke]> aww.

[12:56] *** Ven left
[12:56] *** mjreed left
[12:59] *** cschwenz left
[13:03] *** Ven joined
[13:04] *** vendethiel left
[13:11] *** ab5tract_ left
[13:20] *** vendethiel joined
[13:38] *** ab5tract_ joined
[13:40] *** rurban left
[13:41] *** Ven left
[13:41] *** vendethiel left
[13:45] *** vendethiel joined
[13:47] *** ggoebel joined
[13:53] *** Ven joined
[13:55] *** khisanth_ joined
[13:57] *** Khisanth left
[13:57] *** xfix left
[13:57] *** brrt` joined
[13:59] *** brrt left
[14:03] * mephinet is just reading jnthn's post and is also wandering what list>> means...

[14:04] <jnthn> m: say (-1, 5, -6)>>.abs.perl

[14:04] <camelia> rakudo-moar d26daa: OUTPUT«(1, 5, 6)␤»

[14:04] <mephinet> I know understood that it's a Texas operator, but what does it do? I can't find it here: http://doc.perl6.org/language/operators

[14:04] <brrt`> i think it's the hyper operator

[14:04] <brrt`> m: ('a','b','c')>>.uc.say;

[14:04] <camelia> rakudo-moar d26daa: OUTPUT«A B C␤»

[14:04] <jnthn> It's a map that may do the method calls in parallel if it things it's worth it

[14:05] <jnthn> (But gives the results back in the same order as the increments)

[14:05] <mephinet> it shows up in the "operator precedence" chapter, but it has no mention later on.

[14:05] <brrt`> hmm... what's the unordered version then?

[14:05] <mephinet> jnthn: ah, cool, thanks1

[14:06] <mephinet> pretty cool, actually ;-)

[14:06] *** ggoebel left
[14:06] <jnthn> brrt`: race map ...

[14:07] <mephinet> the whole "hyper" thingie isn't mentioned in the operators list at all?

[14:08] <mephinet> here it is! http://design.perl6.org/S03.html#Hyper_operators

[14:09] *** vendethiel left
[14:11] *** Ven left
[14:12] <moritz> and where is it missing?

[14:18] <jnthn> moritz: I think mephinet meant in doc.perl6.org

[14:18] <timotimo> o/

[14:19] <mephinet> maybe I was looking at the wrong place, but I expected an entry for that in the http://doc.perl6.org/language/operators

[14:20] <brrt`> doesn't seem unreasonable to me

[14:20] <timotimo> indeed, i'll add it to the WANTED doc

[14:21] *** Ven joined
[14:21] <moritz> mephinet: it's not unreasonable; there's just the "known to be incomplete" part in the footer :/

[14:21] <dalek> doc: deb4ebb | timo++ | WANTED:

[14:21] <dalek> doc: add hyper operator wantedness

[14:21] <dalek> doc: review: https://github.com/perl6/doc/commit/deb4ebbca7

[14:21] <jnthn> Also yesterday I noticed Failure has nice documentation on Failure semantics, but the fail sub is missing. Could also go in WANTED.

[14:22] <timotimo> [wantedness intensifies]

[14:22] *** skids joined
[14:22] *** Rounin left
[14:23] <Ven> I think it'd be amazing for the learnx to go over things "lightly" then defer to the perl6 faq for more

[14:23] <mephinet> timotimo++

[14:24] <timotimo> do you really mean the faq?

[14:25] *** vendethiel joined
[14:25] <Ven> no, I mean doc.perl6.org*

[14:25] <mephinet> I meant: thanks for adding it to the wanted list

[14:25] <dalek> specs: 64b47f8 | (Stéphane Payrard)++ | S99-glossary.pod:

[14:25] <dalek> specs: pouring into the glossary Danaides barrel

[14:25] <dalek> specs: review: https://github.com/perl6/specs/commit/64b47f8a30

[14:26] *** rurban joined
[14:28] *** Alina-malina left
[14:33] <brrt`> \quit

[14:33] *** brrt` left
[14:35] *** abraxxa left
[14:36] <psch> hey #perl6 \o

[14:37] <RabidGravy> yo

[14:37] <psch> i have #116280 fixed with special casing for Inf and NaN, but i'm not sure it's really that sensible, considering #61602 (and https://github.com/perl6/specs/issues/27 ) exist

[14:38] <psch> (also i like the "extensible sprintf" idea, fwiw)

[14:40] <RabidGravy> anyone got a feeling whether there should be a page for "event driven"/"concurrent"/"reactive" (or whatever we call it) programming on http://doc.perl6.org/language.html ?

[14:41] <jnthn> RabidGravy: Probably.

[14:41] * jnthn would be open to writing such a page at some point

[14:42] <RabidGravy> you busy, I'll kick it off but it'll probably need some review as I'm a bit fuzzy on the guts

[14:43] <jnthn> *nod*

[14:43] <jnthn> I'll be improving the guts in the coming months also. :)

[14:45] *** xfix joined
[14:48] *** vendethiel left
[14:48] *** Ven left
[14:51] *** vendethiel joined
[14:52] <RabidGravy> jnthn, which of those is the established terminology, BTW?

[14:54] <jnthn> RabidGravy: They're all established in some sense but with slightly different meanings. :)

[14:54] <jnthn> (And not everyone agrees on the meanings.)

[14:54] <jnthn> Concurrency is the most general thing.

[14:54] <skids> concurrent is probably the more overarching of the three.

[14:54] <skids> jinx

[14:55] <jnthn> All fools think the same.

[14:55] <jnthn> No wait, the great minds one... :P

[14:55] <RabidGravy> :)

[14:55] <jnthn> The Supplies stuff is very much like the Reactive Extensions, as seen in .Net, Java, JavaScript, etc.

[14:55] <jnthn> But with a Perl design :)

[14:56] <arnsholt> jnthn: OOC, what's your plan for ord() where the character in question is an NFG synthetic grapheme?

[14:56] <timotimo> you can't ord that

[14:56] <timotimo> ord would force you into some "regular" composed form

[14:57] <jnthn> arnsholt: That's unresolved as of yet; we may define .ord as a codepoint operation though, so it gets you the first codepoint as if you had NFG

[14:57] <timotimo> hmm

[14:57] <jnthn> and .ords may go away now given we have .NFC/.NFD and friends.

[14:57] <arnsholt> Yeah, that makes sense

[14:57] <jnthn> We should not leak the syntheitcs out

[14:57] <jnthn> Because if we do and we start out with a global scheme, then someone, somewhere, will have the silly idea of comparing them.

[14:58] <arnsholt> I remember reading an older revision of the Unicode synopse which said that ord() could return negative codes, which would just give us such a leaky abstraction

[14:58] <arnsholt> Yeah, it's just gonna end in terrible, terrible tears

[14:58] <jnthn> And then we'll break this great evil on darkpan if we were to switch to a local scheme.

[14:58] <jnthn> So yeah, better imho to just not let the problem happen.

[14:59] <jnthn> I'm not quite sure what people's use cases for .ord usually are.

[14:59] <jnthn> Oh, I did have one in C# at some point but...it was ASCII-centric too.

[14:59] <timotimo> working with pieces of string "bytewise"

[15:00] <jnthn> timotimo: Buf! :P

[15:00] <jnthn> Or Uni :)

[15:00] <timotimo> yeah

[15:00] <timotimo> but ordat!

[15:00] <jnthn> oh gosh :)

[15:00] <timotimo> doesn't have to convert the whole thing

[15:00] <jnthn> Do we have that? :)

[15:00] <timotimo> (except of course god damn combining characters!)

[15:01] <timotimo> only if you nqp:: that :)

[15:01] <timotimo> because you want to write a fast json parser perhaps

[15:01] <jnthn> Not sure we do :)

[15:01] *** Ven joined
[15:01] <jnthn> If you're that speed-obsessed you're probably better working with codepoints (read, native integers) and pulling bits out as Str :)

[15:01] <timotimo> yeah

[15:02] <timotimo> there's still room for improvement in JSON::Fast

[15:02] <timotimo> like making junction unfolding work again

[15:03] <tadzik> hey, contents of feather disks are gone now, right?

[15:03] <timotimo> except for the backups, of course

[15:03] <tadzik> hm

[15:04] <tadzik> I lost access to my /home on my laptop

[15:04] <timotimo> uh-oh

[15:04] <tadzik> and everything I can think of that matters is backed up somewhere

[15:04] <tadzik> except the one big piece of work I did and never pushed to github: my bachelor's thesis program

[15:04] <timotimo> that can't be important

[15:04] <timotimo> ;(

[15:04] <tadzik> I found some copy from April 29, which is probably as good as it gets, but I remember that I kept a backup on feather too

[15:04] <timotimo> it used to be on feather?

[15:05] <timotimo> mhm, mhm

[15:06] <timotimo> well, "throw one away", right? :S

[15:06] <timotimo> the backup situation of my desktop and laptop is pretty terrible

[15:07] <tadzik> yeah :/

[15:07] <tadzik> the reviewer from the university got a copy on a CD too

[15:07] <timotimo> thanks to btrfs COW and subvolumes, i could theoretically build one backup every 10 minutes :)

[15:07] <tadzik> I'm pretty sure he never tried took it out of the envelope, but he may still have it...

[15:08] <skids> .oO(A file recovery app that outputs Zen platitudes.)

[15:08] <timotimo> i think i ought to buy a new hard driveto store backups on

[15:10] *** diana_olhovik_ left
[15:13] *** gfldex joined
[15:14] *** vendethiel left
[15:18] <itz_> with btrfs you *need* that backup every 10 mins ;)

[15:18] <timotimo> hah

[15:18] <timotimo> i haven't had problems with btrfs yet

[15:18] <timotimo> i only recently heard "oh gosh, btrfs is so unstable, how do you even manage?"

[15:19] <itz_> it lost all my data a year or two back but maybe its better now

[15:19] *** leont left
[15:20] <timotimo> oh

[15:20] <itz_> that was a power loss on SSD

[15:20] <timotimo> all the data :(

[15:21] *** yvan1 left
[15:23] <tadzik> my phone runs btrfs

[15:23] <timotimo> neato

[15:23] <tadzik> it works so far :P

[15:24] *** osfameron is now known as DottoreOsf

[15:24] <timotimo> how far away from home did it work yet? :P

[15:24] *** DottoreOsf is now known as osfameron

[15:27] *** lolisa left
[15:28] *** ab5tract_ left
[15:29] *** zakharyas left
[15:32] *** cschwenz joined
[15:37] *** rindolf left
[15:42] *** muraiki joined
[15:42] *** _mg_ left
[15:56] *** FROGGS left
[15:56] *** vendethiel joined
[16:05] *** ggoebel joined
[16:06] *** sftp left
[16:08] <japhb> tadzik: What distro are you running on your phone?

[16:09] <colomon> huh.  latest Rakudo seems to have broken the command line parser?  Seems like it’s throwing away quotes and splitting things up by spaces, so  —artist=“Sol Foster” because artist = Sol and another argument Foster

[16:10] <colomon> … hmm, except that’s not consistent with what I’m seeing

[16:13] *** rindolf joined
[16:13] <colomon> arrrgh

[16:14] *** eli-se joined
[16:14] <TimToady> um, shell not smart about smart quotes?

[16:14] <colomon> no

[16:14] *** rurban left
[16:15] <colomon> that’s not a cut-n-paste,  in my shell it’s right

[16:15] <colomon> At the moment, I’m starting to worry that it’s a pre-comp bug...

[16:15] <TimToady> shouldn't you worry about that before it's compiled?  <ba dump bumb>

[16:16] * TimToady goes to get another cuppa in hopes it will tamp down the free association

[16:17] <colomon> https://gist.github.com/colomon/d91cf51c0ca3ec6a636f

[16:18] <colomon> so, as far as I can tell those should both be the same version of the source.

[16:19] <PerlJam> same perl6?  Maybe one of them is old

[16:19] <hoelzro> o/ #perl6

[16:19] <masak> \o

[16:19] <timotimo> orzleoh \o

[16:20] <colomon> and my command line arguments are the same, the only difference is one uses perl6 and calls the script, the other uses the panda-installed version

[16:20] <colomon> This is perl6 version 2015.03-321-gaa99dd4 built on MoarVM version 2015.03-133-ga300558

[16:20] <colomon> how do i precompile by hand?

[16:21] <timotimo> perl6 --target=mbc --output=...moarvm foo.pm

[16:21] <TimToady> --ll-exception might also tell you moar

[16:22] <timotimo> in theory, a problem within the pregenerated launcher scripts could exist

[16:22] <timotimo> oh

[16:22] <timotimo> colomon: you're using --author?

[16:22] <colomon> yes

[16:22] <colomon> that’s not the (entire) problem

[16:22] <timotimo> that could be interpreted by the launcher to be a matcher for which module to load

[16:23] <timotimo> and it'd likely swallow it up

[16:23] <colomon> here’s the latest, author-free version of the issue https://gist.github.com/colomon/d9afb74d910000d0d44c

[16:24] <colomon> note that the launcher (?) based one isn’t properly handling spaces in a filename, but the perl6 launched one is.

[16:25] <colomon> and I switched to a panda-look-based version of the source, which should mean it’s exactly the same as the panda installed version.

[16:25] <TimToady> does someone have a $* instead of a "$@" somewhere?

[16:27] <PerlJam> colomon: what OS are you on?

[16:27] <colomon> Ubuntu

[16:28] <arnsholt> TimToady's suggestion sounds plausible, I think

[16:28] <colomon> my code is sub MAIN(*@files, :$title?, :$artist?, :$album?, :$track?)

[16:28] *** pecastro left
[16:29] *** cschwenz1 left
[16:29] <TimToady> you could print out @*ARGS at the top to see if it's getting to P6 correctly, since MAIN doesn't run till later

[16:29] <colomon> also, wasn’t —author, it was —artist

[16:30] <timotimo> mhm

[16:30] <TimToady> but I'm betting something is splitting the args before your program ever starts

[16:30] <colomon> TimToady++ (though that’s harder to do with panda-installed stuff)

[16:31] <japhb> The perl6 wrapper shell script?

[16:31] <TimToady> I did a recursive grep for '\$\*$' in rakudo's directory and only found configuration and 3rdparty files that had $* at the end of a lint

[16:31] <PerlJam> the wrapper uses "$@" though

[16:31] <TimToady> *line

[16:32] <japhb> PerlJam: That's good at least.

[16:33] <TimToady> why does the could-not-open error message still have backslashes?

[16:33] <PerlJam> TimToady: that's why I was asking about the OS, I was thinking it was a Macism or Windowsism or something

[16:33] <colomon> TimToady: yes, it’s splitting the args before my program starts.  

[16:34] <colomon> me-tags "$@"

[16:34] <geekosaur> if this is the freedesktop stuff then it's braindead and you won;t be able to use quoting to make it behave

[16:34] <colomon> errr… huh

[16:34] <PerlJam> colomon: could you have *another* indirection besides just the normal perl6 wrapper?

[16:34] <colomon> PerlJam: it’s panda doing the indirection

[16:35] <TimToady> if it's splitting the args, how is Taglib getting the whole filename, with extra backslashes?

[16:35] <colomon> https://gist.github.com/colomon/026184091012bf436995

[16:35] *** FROGGS[mobile] joined
[16:36] <PerlJam> colomon: what's in /home/colomon/.rakudobrew/bin/../moar-HEAD/install/share/perl6/site/bin/rename-tags  ?

[16:36] <colomon> here’s the arg dump: 

[16:36] <colomon> https://gist.github.com/colomon/b79b23f9852f40668b2f

[16:37] <eli-se> hi

[16:37] <PerlJam> eli-se: greetings

[16:38] <colomon> PerlJam: https://gist.github.com/colomon/be51d3c88133393ced5a is the file you have requested

[16:38] <FROGGS[mobile]> colomon: the wrapper in site/bin is generated by CUR::Installation

[16:39] <TimToady> what happens if you use ~/Albums/Jerry_McCarthy/"00001-A Blast of Reels from Jerry McCarthy of Scartaglin.mp3" instead?

[16:39] <colomon> just in case anyone is wondering what the file is https://soundcloud.com/patrick-cavanagh-2/mccarthy_reels

[16:40] <colomon> TimToady: that works “normally"

[16:40] <geekosaur> you aren't re-quoting stuff for that shell call

[16:40] <PerlJam> aye, what geekosaur said

[16:40] * geekosaur used to ab use quotemeta often as Q) for that in perl5 :)

[16:41] <colomon> that’s not “me”, that’s panda / rakudo’s script installation code

[16:41] <PerlJam> sure, but that's bound to be the problem : )

[16:41] <PerlJam> er, :)

[16:42] <FROGGS[mobile]> colomon: feel free to provide patches

[16:42] <TimToady> use run instead?

[16:42] <colomon> FROGGS[mobile]: :p

[16:42] <FROGGS[mobile]> :o)

[16:43] <FROGGS[mobile]> or at least ticket it...

[16:43] <colomon> where?

[16:43] <FROGGS[mobile]> RT

[16:44] <colomon> it’s a rakudobug and not a pandabug?

[16:44] <FROGGS[mobile]> aye

[16:45] * colomon is somewhat suspicious that figuring out how to coherently describe the bug might be harder than fixing it.

[16:46] <geekosaur> "strings that may contain spaces or shell special characters are being intepolated directly into a shell call with no quoting applied"

[16:46] <tadzik> japhb: SailfishOS

[16:46] <TimToady> there appears to be no reason it should be using shell rather than run

[16:46] <TimToady> and run would bypass the shell reparse

[16:47] <TimToady> someone just got lazy

[16:47] <colomon> afk # midday nomming

[16:47] <geekosaur> indeed

[16:51] <dalek> specs: b26bc2c | (Stéphane Payrard)++ | S99-glossary.pod:

[16:51] <dalek> specs: more entries to S99

[16:51] <dalek> specs: review: https://github.com/perl6/specs/commit/b26bc2cea9

[16:51] <TimToady> looks like it comes from ./src/core/CompUnitRepo/Local/Installation.pm

[16:57] <TimToady> heh, that line also says "exit shell(...).exit;"

[16:58] <geekosaur> yes, I was wondering if that thought it was recovering the exit-status part (as opposed to signal part) of the result or something

[16:59] <TimToady> is this something that is tested by the roast, such that if I specutalatively change it to a run, it woudl be spectested?

[17:01] *** Foxcool left
[17:01] <TimToady> well, shell is definitely wrong there, in any case

[17:02] <TimToady> testing...

[17:02] <TimToady> well, spectesting, dunno if that actually tests this code

[17:03] <TimToady> also didn't bother to remove the redundant exit

[17:03] <TimToady> if it is redundant, which it mightn't be

[17:03] <TimToady> but if it's not, .exit is badly named

[17:04] *** vendethiel left
[17:05] *** espadrine left
[17:06] <TimToady> badly named attribute, actually, should probably be $.exitcode

[17:06] *** Foxcool joined
[17:07] <timotimo> Cool totally needs a method exit

[17:08] <timotimo> 0.exit, yeah!

[17:09] <dalek> rakudo/nom: 2394bf2 | TimToady++ | src/core/CompUnitRepo/Local/Installation.pm:

[17:09] <dalek> rakudo/nom: missed a Can'tMeta -> CannotMeta

[17:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2394bf2375

[17:11] *** alini left
[17:12] <masak> oops, sorry about that.

[17:12] <masak> TimToady++

[17:12] <masak> as your friendly neighborhood release manager, I'd like to remind people about the upcoming release.

[17:12] <masak> it's on Thursday.

[17:13] <masak> please tend to the ChangeLog, the ROADMAP, and each other. :>

[17:13] <TimToady> oops, wrong message on that message

[17:13] <TimToady> that was the shell->run fix

[17:13] <masak> quick, --amend while no-one is looking! :P

[17:13] * masak is such a bad influence

[17:14] * TimToady has had terrible luck with --amend

[17:14] <masak> hehe

[17:14] <masak> I liked --amend so much, I made it a subcommand locally

[17:14] <masak> as in `git amend <files>`

[17:15] <TimToady> is there something you have to do after that to actually include the files?

[17:15] *** eli-se left
[17:15] <TimToady> 'cause when I do that, the amendments don't actually get checked in

[17:15] <masak> TimToady: yes, same principle with `git add` before `git commit --amend` as before an ordinary commit.

[17:16] *** konsolebox joined
[17:16] <TimToady> doesn't look very principled to me

[17:16] <masak> either that, or you list the files explicitly, as in `git commit --amend <files>`

[17:16] <masak> dinner &

[17:20] *** araujo left
[17:21] <dalek> rakudo/nom: 3b80788 | TimToady++ | src/core/CompUnitRepo/Local/Installation.pm:

[17:21] <dalek> rakudo/nom: don't use shell where run is more better

[17:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b80788609

[17:21] <dalek> rakudo/nom: 013cc02 | TimToady++ | /:

[17:21] <dalek> rakudo/nom: Merge branch 'nom' of github.com:rakudo/rakudo into nom

[17:21] <dalek> rakudo/nom: 

[17:21] <dalek> rakudo/nom: Seems like I need to merge to get an amendment upstream.  I could be rwong...

[17:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/013cc02990

[17:22] <TimToady> I think my 'gp' alias that rebases blows away amendments

[17:23] <TimToady> is probably what I've been running into repeatedly

[17:23] *** vendethiel joined
[17:24] <TimToady> colomon: I think I fixed it for you, but I dunno how upstream that fix is wrt your pandafication.

[17:27] *** dakkar left
[17:27] <dalek> perl6-roast-data: 5e42407 | (Heiko Jansen)++ | perl6_pass_rates.csv:

[17:27] <dalek> perl6-roast-data: Remove partial data from incomplete run

[17:27] <dalek> perl6-roast-data: 

[17:27] <dalek> perl6-roast-data: Once more with feel^-H^-H^-H backspace....

[17:27] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5e42407f9a

[17:27] <dalek> perl6-roast-data: d66e089 | (Will Coleda)++ | perl6_pass_rates.csv:

[17:27] <dalek> perl6-roast-data: Merge pull request #7 from heikojansen/patch-1

[17:27] <dalek> perl6-roast-data: 

[17:27] <dalek> perl6-roast-data: Remove partial data from incomplete run

[17:27] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d66e089fc6

[17:28] *** konsolebox left
[17:30] *** grettis joined
[17:30] *** leont joined
[17:34] *** Sysaxed joined
[17:35] <Sysaxed> so Larry's talk is _still_ not there, right?...

[17:37] <Ven> Sysaxed: I think it's one of *these* talks. (a dead talk)

[17:37] <Ven> I think nearly a third of all the talks were not recorded "correctly"

[17:37] <Sysaxed> :(

[17:37] <Sysaxed> ehh, well, okay

[17:38] <Sysaxed> still I wonder how did that happen

[17:38] <Sysaxed> I've read their article about recording stuff

[17:38] <Ven> no idea, but it's pretty sad. A *ton* of recording were lost :(

[17:38] <Sysaxed> still I don't understand how something could be missing

[17:39] *** lizmat joined
[17:40] <dalek> perl6-examples: 06b1612 | paultcochrane++ | categories/perlmonks/weighted-roll-731696.pl:

[17:40] <dalek> perl6-examples: [perlmonks] fix typo in title

[17:40] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/06b161231f

[17:40] <Sysaxed> and no one bothered to record it with a smartphone or something, right? :)

[17:40] <RabidGravy> oh well

[17:40] <Sysaxed> however, Larry's talk is not the only video I'd love to see, eh

[17:43] *** telex left
[17:43] <Sysaxed> I remember somebody said on this channel "your talk is currently being processed"...

[17:43] <Sysaxed> several months ago

[17:44] *** telex joined
[17:45] <timotimo> ;(

[17:45] <Sysaxed> cannot find it in the logs though

[17:45] *** Rounin joined
[17:48] *** eli-se joined
[17:49] <dalek> doc: 94a6654 | paultcochrane++ | util/missing-methods.p6:

[17:49] <dalek> doc: Remove perl6 shebang

[17:49] <dalek> doc: 

[17:49] <dalek> doc: It's not necessary in the missing-methods utility script; one can simply

[17:49] <dalek> doc: call the script with perl6.

[17:49] <dalek> doc: review: https://github.com/perl6/doc/commit/94a6654588

[17:49] <dalek> doc: ef84a44 | paultcochrane++ | / (3 files):

[17:49] <dalek> doc: Merge branch 'master' of github.com:perl6/doc

[17:49] <dalek> doc: review: https://github.com/perl6/doc/commit/ef84a44eb2

[17:49] <dalek> doc: f6a1eb5 | paultcochrane++ | lib/Type/Mu.pod:

[17:49] <dalek> doc: Document Mu.take()

[17:49] <dalek> doc: review: https://github.com/perl6/doc/commit/f6a1eb5441

[17:50] *** FROGGS joined
[17:51] <[ptc]> FROGGS: quick question: is META6.json still current for modules?  Or has it been replaced by META.info?

[17:51] <[ptc]> FROGGS: the spec still mentions META6.json and I was wondering if it needed updating

[17:51] <FROGGS> [ptc]: META6.json will be the new one

[17:51] <[ptc]> ah, ok

[17:52] <FROGGS> especially CPAN will care about META6.json only, while panda might support both for a while

[17:52] <[ptc]> good to know, thanks.  At least now I won't update things incorrectly :-)

[17:52] <FROGGS> :o)

[17:54] *** kaare__ left
[17:55] *** kaare__ joined
[17:58] *** _mg_ joined
[17:58] <dalek> perl6-roast-data: 86a723f | coke++ | / (9 files):

[17:58] <dalek> perl6-roast-data: today (automated commit)

[17:58] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/86a723f5ec

[17:59] <[Coke]> (larry's talk) I'm surprised 5 and 6 haven't banded together to just record larry all the time now.

[18:00] *** Ven left
[18:00] <lizmat> [Coke]: we thought it *was* being recorded  :-(

[18:00] <lizmat> especially in the main hall, we thought it would work  :-(

[18:01] <DrForr> NLPW failure?

[18:01] <[Coke]> oh, i thought this was referring to a previous talk.

[18:01] * [Coke] was not trying to give lizmat a hard time about anything!

[18:01] <FROGGS> El_Che: do you anybody we could ask regarding to larry's talk at the fosdem?

[18:01] <FROGGS> El_Che: do you know*

[18:02] <japhb> Actually, I'm with [Coke] on this one.  I can't imagine the Perl universe being short of Extremely Paranoid Sysadmins who have backup plans for their backup plans ... and thus have like 6 recording devices at every major talk.  :-)

[18:02] <japhb> Clearly lizmat is just too trusting.  ;-)

[18:03] *** konsolebox joined
[18:03] * japhb is suddenly reminded of the XKCD re: sysadmin v. terrorists

[18:04] <japhb> I tried to explain to a "normal" developer the contents of my SRE backpack, and they looked at me like I had grown extra limbs

[18:08] *** sftp joined
[18:09] <lizmat> not NLPW, but FOSDEM (at least so far  :-(  )

[18:09] <lizmat> NLPW I *hope* not, Theo should know

[18:11] *** vendethiel left
[18:16] *** zeleiadi joined
[18:17] <dalek> roast: 59f78ba | TimToady++ | S03-operators/assign.t:

[18:17] <dalek> roast: Can'tMeta -> CannotMeta

[18:17] <dalek> roast: review: https://github.com/perl6/roast/commit/59f78bae80

[18:17] <dalek> roast: 7953376 | TimToady++ | S (6 files):

[18:17] <dalek> roast: .exit is now .exitcode

[18:17] <dalek> roast: review: https://github.com/perl6/roast/commit/7953376f01

[18:17] <dalek> rakudo/nom: c35aa01 | TimToady++ | src/core/ (2 files):

[18:17] <dalek> rakudo/nom: should not have an exit method that doesn't

[18:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c35aa014b9

[18:18] *** nine joined
[18:18] *** nine left
[18:18] *** nine joined
[18:20] *** zlad joined
[18:20] <TimToady> this change unhides a failure in S17-procasync/basic.t where the exit code was being coerced from Any to 0 and being taken as success

[18:21] <TimToady> (exitcode is now initialized to -1 to prevent such a confusion)

[18:21] <FROGGS> nqp-m: say(nqp::join("\n", ["foo", 42, "bar"]))

[18:21] <camelia> nqp-moarvm: OUTPUT«This representation (P6int) cannot unbox to a native string␤   at /tmp/gcBkmuUnzY:1  (<ephemeral file>:<mainline>:39)␤ from gen/moar/stage2/NQPHLL.nqp:1279  (/home/camelia/rakudo-inst-2/share/nqp/lib/NQPHLL.moarvm:eval:190)␤ from gen/moar/stage2/NQPHLL.nqp:1…»

[18:24] <FROGGS> the exitcode change needs to be changed in panda as well

[18:24] <TimToady> lizmat: any idea why c35aa01 doesn't deprecate .exit method despite use of DEPRECATE()?

[18:25] <TimToady> FROGGS: I put in a temporary exit method, which seems to work, but doesn't actually deprecate

[18:25] <FROGGS> yeah, just spotted it, phew :o)

[18:25] * lizmat looking

[18:26] *** spider-mario joined
[18:26] *** cschwenz left
[18:26] <FROGGS> TimToady: maybe because we don't have 2015.04 yet?

[18:26] *** cschwenz joined
[18:27] <TimToady> oh, could be

[18:27] <lizmat> yes, that is the reason

[18:27] <lizmat> also very interesting: DEPRECATED('Proc::Status.exit', |<2015.04 2015.09>);

[18:27] <lizmat> 2015.09 ?

[18:28] <lizmat> so we're going to remove deprecations in Sep ?

[18:28] <FROGGS> the plan seems to be that at that point we are aiming for the RC1

[18:28] <cschwenz> September *is* before Christmas….  :-P

[18:28] <FROGGS> or RC0

[18:28] <cschwenz> FROGGS++

[18:29] *** vendethiel joined
[18:29] <dalek> rakudo/nom: 71ca036 | TimToady++ | src/core/OS.pm:

[18:29] <dalek> rakudo/nom: deprecate .exit now, not next month :)

[18:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/71ca03620e

[18:32] *** pecastro joined
[18:37] *** _mg_ left
[18:38] <dalek> rakudo/nom: 44d40c2 | lizmat++ | src/core/ (13 files):

[18:38] <dalek> rakudo/nom: Deprecate everything at 2015.09 at the latest

[18:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44d40c290e

[18:39] <dalek> specs: 372ff84 | (Steve Mynott)++ | S15-unicode.pod:

[18:39] <dalek> specs: uninames is uniname

[18:39] <dalek> specs: review: https://github.com/perl6/specs/commit/372ff84513

[18:39] *** _mg_ joined
[18:39] <itz_> can someone sanity check that ^^^^ 

[18:40] <[Coke]> the code lies:

[18:40] <[Coke]> m: say uniname("A\x[00]¶\x[2028,80]")

[18:40] <camelia> rakudo-moar 013cc0: OUTPUT«LATIN CAPITAL LETTER A␤»

[18:40] <[Coke]> but there's 5 lines of output in the spec.

[18:40] <itz_> uninames maybe is supposed to return multiple names?

[18:41] <[Coke]> plus there are many copies of uninames just below that one.

[18:41] <FROGGS> itz_: yes

[18:41] <itz_> ok I'll revert

[18:41] <itz_> itz--

[18:41] <[Coke]> m: say uninames("A\x[00]¶\x[2028,80]") # this don't work, though.

[18:41] <camelia> rakudo-moar 013cc0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/IGHSqhIMa0␤Undeclared routine:␤    uninames used at line 1. Did you mean 'uniname', 'univals'?␤␤»

[18:41] <TimToady> NYI

[18:41] *** _mg_ left
[18:41] <FROGGS> but LHF

[18:42] <TimToady> foorshoor

[18:42] <dalek> specs: b28668d | (Steve Mynott)++ | S15-unicode.pod:

[18:42] <dalek> specs: revert

[18:42] <dalek> specs: review: https://github.com/perl6/specs/commit/b28668daf0

[18:42] *** lizmat_ joined
[18:42] *** lizmat left
[18:44] *** yvan1 joined
[18:46] * [Coke] hacks on it for a bit.

[18:48] <[Coke]> > uninames("A\x[00]¶\x[2028,80]")

[18:48] <[Coke]> LATIN CAPITAL LETTER A NULL PILCROW SIGN LINE SEPARATOR

[18:48] *** diana_olhovik joined
[18:49] <[Coke]> > uninames("A\x[00]¶\x[2028,80]").perl

[18:49] <[Coke]> ("LATIN CAPITAL LETTER A", "NULL", "PILCROW SIGN", "LINE SEPARATOR", "")

[18:50] <[Coke]> looks like a bug in that uniname doesn't emit <control-0080> there.

[18:50] <dalek> Inline-Perl5: c85c4ce | (Stefan Seifert)++ | lib/Inline/Perl5.pm6:

[18:50] <dalek> Inline-Perl5: Tweak performance by using correct types

[18:50] <dalek> Inline-Perl5: 

[18:50] <dalek> Inline-Perl5: Thanks to lizmat++ for pointing this out

[18:50] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/c85c4cea20

[18:51] <dalek> rakudo/nom: eb86621 | coke++ | src/core/ (2 files):

[18:51] <dalek> rakudo/nom: Implement basic uninames on moar

[18:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb86621de2

[18:52] <dalek> roast: cdf7529 | coke++ | S15-unicode-information/uniname.t:

[18:52] <dalek> roast: Unfudge now passing tests for uninames

[18:52] <dalek> roast: review: https://github.com/perl6/roast/commit/cdf7529ccb

[18:53] <[Coke]> thankfully the tests were very forgiving. :)

[18:54] *** diana_olhovik left
[18:54] <dalek> perl6-examples: 944a264 | (Steve Mynott)++ | categories/cookbook/01strings/01- (3 files):

[18:54] *** zeleiadi left
[18:54] <dalek> perl6-examples: simple case, unicode and soundex examples

[18:54] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/944a264d3c

[18:54] <dalek> perl6-examples: cf85a86 | (Steve Mynott)++ | categories/perlmonks/weighted-roll-731696.pl:

[18:54] <dalek> perl6-examples: Merge branch 'master' of github.com:perl6/perl6-examples

[18:54] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/cf85a8625f

[18:54] <[Coke]> wow. https://rt.perl.org/Ticket/Display.html?id=122471 - bug was already reported by me in august of last year.

[18:54] *** zlad left
[18:57] *** diana_olhovik joined
[19:02] *** zeleiadi joined
[19:03] *** cschwenz left
[19:06] <itz_> m: constant pi="3.2"; say pi

[19:06] <camelia> rakudo-moar 71ca03: OUTPUT«3.2␤»

[19:06] <itz_> should that be possible?

[19:06] *** konsolebox left
[19:07] <moritz> sure

[19:07] <geekosaur> it's not a keyword, it's a constant defined in an outer scope

[19:07] <geekosaur> you can probably use scope escape games to get at the outer one

[19:07] <moritz> it's just a redeclaration in an inner scope

[19:08] <moritz> m: constant pi = 3; say CORE::pi

[19:08] <camelia> rakudo-moar 71ca03: OUTPUT«3.14159265358979␤»

[19:10] <TimToady> m: constant pi = 3; say SETTING::pi

[19:10] <camelia> rakudo-moar 71ca03: OUTPUT«(Any)␤»

[19:10] * TimToady thinks that SETTING should include its outers

[19:10] <TimToady> m: constant pi = 3; say SETTING::OUTERS::pi

[19:10] <camelia> rakudo-moar 71ca03: OUTPUT«3.14159265358979␤»

[19:11] <nine> .oO(TimToady wants to change the language to mask him misremembering something)

[19:11] <TimToady> m: constant pi = 3; say SETTING::LEXICAL::pi

[19:11] <camelia> rakudo-moar 71ca03: OUTPUT«3.14159265358979␤»

[19:12] <TimToady> nine: I expected it to say (Any) there

[19:12] <TimToady> I just don't like it

[19:12] *** tinita_ is now known as tinita

[19:13] <TimToady> well, probably not important, but I don't see much use case for getting things from the SETTING exclusive of the CORE

[19:13] <TimToady> m: constant pi = 3; say UNIT::OUTER::pi

[19:13] <camelia> rakudo-moar 71ca03: OUTPUT«(Any)␤»

[19:13] <TimToady> m: constant pi = 3; say UNIT::OUTERS::pi

[19:13] <camelia> rakudo-moar 71ca03: OUTPUT«3.14159265358979␤»

[19:14] <TimToady> and our usage of the term "setting" refers to the inclusion of CORE

[19:16] <masak> m: constant pi = 3; say SETTING::LEXICAL::pi - pi

[19:16] <camelia> rakudo-moar 71ca03: OUTPUT«0.141592653589793␤»

[19:16] <masak> m: module Foo { my $x = 42 }; say $Foo::LEXICAL::x

[19:16] <camelia> rakudo-moar 71ca03: OUTPUT«(Any)␤»

[19:16] * masak doesn't grok LEXICAL

[19:20] <TimToady> Foo is not a lexical scope

[19:21] <TimToady> it should probably be complaining that a package doesn't have a LEXICAL

[19:22] * skids tries to muster the patience to figure out how to put another PR in from a newer rakudo checkout than his current PR without including the ff in the PR.

[19:22] *** synbot6 joined
[19:23] <[Coke]> if you're doing a lot of PRs, different branches helps, no?

[19:23] <skids> Not sure.  If I create a branch, it will be at my current checkout, no?

[19:23] <[Coke]> you can branch from anywhere.

[19:25] <skids> I can't see anywhere, only the point at which I created the fork.

[19:26] <skids> (and back from there)

[19:27] <tony-o> skids: git branch -b <branch id> <commit id you want the branch to copy>

[19:27] <tony-o> sorry - git checkout -b <branch id> <commit id>

[19:28] <[Coke]> You probably should also be keeping your fork up to date, no?

[19:28] *** virtualsue joined
[19:28] <skids> My impression was, if you do that, then you end up sending merge commits along with all your PRs and it's a pain on the receiving end.

[19:33] <tony-o> skids: are you doing rebase or merging with upstream/master ?

[19:36] *** yqt joined
[19:37] *** brrt joined
[19:37] *** Rounin left
[19:39] <skids> tony-o: I have no clue what I'm doing, if it isn't obvious.

[19:40] <tony-o> skids: check this link out - https://robots.thoughtbot.com/keeping-a-github-fork-updated

[19:43] *** MARTIMM joined
[19:44] <skids> Yeah, I've done rebases before but not with hanging PRs.  So I don't know the consequences.

[19:45] *** virtualsue left
[19:50] <tony-o> https://help.github.com/articles/resolving-merge-conflicts-after-a-git-rebase/

[19:55] *** rindolf left
[19:56] *** zakharyas joined
[19:56] *** rindolf joined
[19:57] <skids> Ok that turned out to be less painful than I feared.

[19:59] *** rindolf left
[20:03] <dalek> specs: 10347ec | TimToady++ | S02-bits.pod:

[20:03] <dalek> specs: clarify that SETTING includes its outers

[20:03] <dalek> specs: review: https://github.com/perl6/specs/commit/10347ec021

[20:03] <dalek> rakudo/nom: 91156e3 | TimToady++ | src/core/PseudoStash.pm:

[20:03] <dalek> rakudo/nom: SETTING should chain outward to CORE

[20:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91156e3b15

[20:03] <dalek> rakudo/nom: a94d687 | TimToady++ | src/core/PseudoStash.pm:

[20:03] <dalek> rakudo/nom: some copy/pastos on WHOness

[20:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a94d687ee9

[20:04] <TimToady> there are currently no tests of how SETTING bahaves when SETTING is outside of CORE, btw

[20:04] <TimToady> not entirely sure what the best way to test that is...use the RESTRICTED setting maybe?

[20:05] * TimToady notes that RESTRICTED is entirely unspeculated

[20:07] <TimToady> and that rakudo does not use alternate settings to implement -n and -p

[20:12] <japhb> Is that way to handle -n and -p required or just an implementation detail?

[20:14] <TimToady> well, it will affect what SETTING means

[20:16] <TimToady> and doing -n and -p that way would give me more confidence that settings actually work right

[20:16] <masak> are -n and -p the only things which affect what SETTING means in that way?

[20:16] <TimToady> any alternate setting would do so, including RESTRICTED, as we saw above

[20:17] <colomon> TimToady++

[20:17] <colomon> # nothing like getting back from lunch and discovering things now work again.

[20:18] <TimToady> :D

[20:19] <FROGGS> jnthn: I think my problem boils down to: deserialize object O from SC A, create SC B and serialize object O with it

[20:19] <FROGGS> jnthn: I did try nqp::clone'ing the object, but that does not seem to help either

[20:20] <TimToady> m: say SETTING::pi

[20:20] <camelia> rakudo-moar a94d68: OUTPUT«3.14159265358979␤»

[20:20] <TimToady> YäY

[20:22] <FROGGS> can somebody please try this locally? perl6 foo

[20:22] <FROGGS> (with foo being not there)

[20:22] <TimToady> > perl6 nonesuch

[20:22] <TimToady> Could not open nonesuch. Malformed UTF-8 at line 1 col 21

[20:22] <FROGGS> yeah, same here

[20:22] <FROGGS> that feels like a regression

[20:23] *** andreoss joined
[20:23] <PerlJam> FROGGS: I get "Could not open foo. Failed to open file: no such file or directory" with This is perl6 version 2014.12-117-g2542c3d built on MoarVM version 2014.12-4-g7e95c05

[20:23] <andreoss> can a whatever value be a part of multi sub?

[20:24] <FROGGS> PerlJam: okay, now we know it *is* a regression, thanks :o)

[20:24] <leedo> i also get the UTF-8 message, on a fresh rakudo/moar

[20:24] <PerlJam> aye

[20:25] <TimToady> andreoss: your question doesn't seem quite well-formed; do you mean 'can I pass a whatever to a multi sub?' or 'can I write a signature that recognizes a whatever?'

[20:25] <andreoss> I meant in a signature.

[20:25] <TimToady> just use the Whatever type

[20:25] <andreoss> multi x(1, *, *) { 0 }

[20:25] <dalek> roast: f905674 | skids++ | S04-statements/do.t:

[20:25] <dalek> roast: Fix do-once result value test to properly test what it should.

[20:25] <dalek> roast: review: https://github.com/perl6/roast/commit/f9056745ba

[20:26] <TimToady> m: multi x(1, Whatever, Whatever) { 0 }; say x(1,*,*)

[20:26] <camelia> rakudo-moar a94d68: OUTPUT«0␤»

[20:26] <FROGGS>  m: sub foo(WhateverCode &c) { &c(2) }; say foo(* ** 2)

[20:26] <camelia> rakudo-moar a94d68: OUTPUT«5===SORRY!5=== Error while compiling /tmp/P38qjiMqN2␤Calling foo(WhateverCode) will never work with declared signature (WhateverCode &c)␤at /tmp/P38qjiMqN2:1␤------> 3sub foo(WhateverCode &c) { &c(2) }; say 7⏏5foo(* ** 2)␤»

[20:26] <FROGGS> should that work?

[20:27] <TimToady> &c doesn't return a WhateverCode

[20:27] <andreoss> WhateverCode implies any arity?

[20:27] <TimToady> m: sub foo(WhateverCode $c) { $c(2) }; say foo(* ** 2)

[20:27] <camelia> rakudo-moar a94d68: OUTPUT«4␤»

[20:28] <TimToady> the type on a &c declaration says what the return type of c is, not what c is

[20:28] <TimToady> generally you just want &c there anyway, so you don't overspecify that the user *must* use WhateverCode to implement the closure

[20:29] <TimToady> m: sub foo(WhateverCode $c) { $c(2) }; say foo({$_ ** 2})

[20:29] <camelia> rakudo-moar a94d68: OUTPUT«Type check failed in binding $c; expected 'WhateverCode' but got 'Block'␤  in sub foo at /tmp/UJ8O13BUpn:1␤  in block <unit> at /tmp/UJ8O13BUpn:1␤␤»

[20:30] *** nbdsp joined
[20:30] <TimToady> and if you want to manipulate the WhateverCode as a value to do further dwimmery, you probably don't want it in &c anyway, but in $c

[20:31] <nbdsp>  class B { method methB { say CALLER::<self>.WHAT.perl } }; class D is B { method methD { self.methB } }; D.new.methD; B.new.methB;

[20:31] <andreoss> can be arity be preserved with Whatever? x(1, Whatever, Wharever) is the same as x(1, Whatever)?

[20:31] * PerlJam sees a future FAQ in the making

[20:31] *** FROGGS[mobile] left
[20:31] <nbdsp> m: class B { method methB { say CALLER::<self>.WHAT.perl } }; class D is B { method methD { self.methB } }; D.new.methD; B.new.methB;

[20:31] <camelia> rakudo-moar a94d68: OUTPUT«Mu␤Any␤»

[20:31] <TimToady> andreoss: those are not the same

[20:32] <TimToady> m: multi x(1, Whatever, Whatever) { 0 }; say x(1,*)

[20:32] <camelia> rakudo-moar a94d68: OUTPUT«5===SORRY!5=== Error while compiling /tmp/RBD6rWYcaT␤Calling x(Int, Whatever) will never work with any of these multi signatures:␤    (Int $ where { ... }, Whatever, Whatever)␤at /tmp/RBD6rWYcaT:1␤------> 3lti x(1, Whatever, Whatever) { 0 }; s…»

[20:32] <nbdsp> Greetings! I wonder can one reliably use this difference to say whether a class method is called from within a class or outside a class?

[20:33] <TimToady> nbdsp: why not use a private method in that case, and then it isn't even visible from outside

[20:33] *** alini joined
[20:33] *** eli-se left
[20:34] <TimToady> if you also want a publicly visible method of the same name, you can do that

[20:34] <andreoss> m: multi z(1, Whatever) { 0 } ; multi z(Whatever, 0) {1}; say z(1,0);

[20:34] <camelia> rakudo-moar a94d68: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_MVavbU6A_␤Calling z(Int, Int) will never work with any of these multi signatures:␤    (Int $ where { ... }, Whatever) ␤    (Whatever, Int $ where { ... })␤at /tmp/_MVavbU6A_:1␤------> 3) { 0 } ; mul…»

[20:34] <TimToady> the namespaces are disjoint

[20:34] <nbdsp> TimToady: I want to emulate protected methods so that methB caould be called from D, but not from outside the class

[20:34] <TimToady> protected methods are a bad idea

[20:35] <TimToady> even Bjarne thinks so

[20:35] <nbdsp> Why? E.g. in class Exception - the exception string can be set by derived classes, but not from outside.

[20:36] <itz_> m: sqrt(3+4i)

[20:36] <camelia> rakudo-moar a94d68: ( no output )

[20:36] <itz_> m: say sqrt(3+4i)

[20:36] <camelia> rakudo-moar a94d68: OUTPUT«2+1i␤»

[20:37] <pmichaud_> hello, all

[20:37] *** pmichaud_ is now known as pmichaud

[20:37] <pmichaud> a pmichaud time update:   robotics ends this week.  I'm full-time #perl6 starting Apr 28.

[20:37] <muraiki> w00t

[20:38] *** darutoko left
[20:38] <jnthn> FROGGS: If the object was once in SC A then it will be marked as such. Further, the whole object graph will be recursively, so a clone at the top level won't help.

[20:38] <FROGGS> hmmmm

[20:38] *** andreoss left
[20:39] <FROGGS> I don't even know if that is my problem

[20:39] <skids> \o/ pmichaud++

[20:39] <FROGGS> pmichaud: \o/

[20:39] <pmichaud> hello, all.  :)

[20:39] <FROGGS> jnthn: though, I seem to be able to reproduce the issue outside of the setting now

[20:39] <FROGGS> hi :o)

[20:40] <jnthn> FROGGS: It probably is

[20:40] <El_Che> FROGGS: I just sent a friendly reminder to a few fosdem organizers I know

[20:41] <jnthn> FROGGS: Because it means if you serialize mention *any* of the objects you deserialized from A in another serialization context B, then it's going to emit a cross-reference and then get upset when you try and deserialize.

[20:41] <itz_> m: say sqrt(i*i)

[20:41] <camelia> rakudo-moar a94d68: OUTPUT«6.12323399573677e-17+1i␤»

[20:41] <jnthn> o/ pmichaud 

[20:41] <FROGGS> El_Che++

[20:41] <FROGGS> El_Che: please keep us posted :o)

[20:41] <jnthn> pmichaud: iiuc, you'll be in Oslo? :)

[20:41] <FROGGS> jnthn: exactly... and since I overwrite the file that contained SC A...

[20:42] <jnthn> FROGGS: That's the way SCs are designed to work. :)

[20:42] <jnthn> (To cross-reference)

[20:42] <jnthn> That's the "bounded" in bounded serialization.

[20:42] <jnthn> About nbdsp's question on self about, no, you can't reliably reach self using CALLER; it probably should never work already

[20:42] <FROGGS> yeah, BS :o)

[20:43] <jnthn> (Because things have to be marked "is dynamic" to be visible through CALLER)

[20:44] <El_Che> FROGGS: it seems to be in limbo: http://video.fosdem.org/2015/STATUS.txt 

[20:44] <El_Che> FROGGS: Not with the posted ones, not with the failures. Sigh

[20:44] <jnthn> FROGGS: So your only good bet is to build a fresh data structure.

[20:45] <FROGGS> jnthn: yes, I'm copying now by doing 'from-json to-json' >.<

[20:45] <jnthn> And that solves the issue?

[20:45] <nbdsp> jnthn: the code I cited is not reaching caller, but there are difference between trying it from within the class and from outside (different reported types of CALLER::<self>.WHAT)

[20:45] <FROGGS> jnthn: we'll see... compiling right now

[20:46] <jnthn> nbdsp: I'd not rely on that. :)

[20:46] *** xfix left
[20:46] <pmichaud> o/ jnthn

[20:47] <jnthn> pmichaud: Robotics prep going well?

[20:47] <FROGGS> nbdsp: isnt the cleanest way to make a multi method foo(::?CLASS:D) and multi method foo(::?CLASS:U) ?

[20:47] <FROGGS> nbdsp: so you'd know if it was called on the class or an instance

[20:48] <jnthn> FROGGS: I think he wants to know the identify of the caller

[20:48] <FROGGS> ohh

[20:48] <pmichaud> jnthn: it's hard to say.  We leave for the championship tonight (in about 3.5 hours)

[20:48] <jnthn> pmichaud: Oh wow, such soon!

[20:48] <pmichaud> yes, competition starts tomorrow

[20:49] <FROGGS> jnthn: hmpf, the from-json to-json "trick" did not help either...

[20:49] <FROGGS> I'll continue tomorrow...

[20:49] <pmichaud> by saturday, robotics 2014 season is finally _over_.

[20:49] <FROGGS> pmichaud: good luck!

[20:49] <jnthn> :)

[20:49] <jnthn> Have fun with it, and good luck!

[20:50] <FROGGS> gnight #perl6

[20:50] *** FROGGS left
[20:50] <jnthn> About OSDC.no, I'll be there in Oslo from before the conf 'cus teaching work. And I'll be around until the 11th late afternoon or early evening.

[20:50] *** zakharyas left
[20:50] <pmichaud> I arrive morning of may 8, depart morning of may 12

[20:52] <jnthn> OK :)

[20:54] *** eli-se joined
[20:56] <skids> My PR from today would add this:

[20:56] <skids> $ ./perl6 -e 'fail(X::NYI::Available.new(:feature<toads> :available<frogs::notquite ribbit noise::croak>))' # Unhandled exception: Please install frogs::notquite, ribbit or noise::croak for\

[20:56] <skids>  toads support.

[20:57] <skids> </advertisement> :-)

[20:59] <lizmat_> .botsnack

[20:59] <yoleaux> :D

[20:59] <synbot6> om nom nom

[20:59] *** dolmen joined
[21:00] <masak> .botsnack

[21:00] <yoleaux> :D

[21:00] <synbot6> om nom nom

[21:00] <masak> wow, two bots snacking.

[21:01] <skids> Wonder if we can get them to fight for the last botsnack.

[21:01] <synbot6> om nom nom

[21:02] <skids> Ah, damn, I guess that's a lost opportunity.

[21:02] * skids didn't know synbot6 could jump that high.

[21:03] *** MARTIMM left
[21:03] <lizmat_> .bot snack

[21:03] *** lizmat_ is now known as lizmat

[21:04] <[Coke]> arglebarglebotsnackgarble.

[21:04] <synbot6> om nom nom

[21:04] <pmichaud> I'm afk again, back on Monday.

[21:04] <skids> rotten 10 month old botsnack from between the couch cushions.

[21:04] <synbot6> om nom nom

[21:05] <jnthn> Bet you won't eat this bоtsnack!

[21:05] <jnthn> Hah!

[21:07] <lizmat> botsnack! ?

[21:07] <synbot6> om nom nom

[21:07] <lizmat> botsnack!

[21:07] <synbot6> om nom nom

[21:10] <dalek> perl6-examples: 7db1122 | (Steve Mynott)++ | categories/cookbook/0 (3 files):

[21:10] <dalek> perl6-examples: simple complex nos, base convert and tweaking

[21:10] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/7db1122edb

[21:10] <vendethiel> \o/

[21:12] <lizmat> commute to home&

[21:12] *** lizmat left
[21:12] *** skids left
[21:12] <nbdsp> Could someone tell please why this difference in CALLER::<self>.WHAT type in the following code?

[21:13] <nbdsp> m: class B { method methB { say CALLER::<self>.WHAT.perl } }; class D is B { method methD { self.methB } }; D.new.methD; B.new.methB;

[21:13] <camelia> rakudo-moar a94d68: OUTPUT«Mu␤Any␤»

[21:15] <jnthn> nbdsp: If I had to guess, it's an implementation accident that hinges on a method having a self lexical (though in that case its use has been optimized away) leading to a Mu, and a scope with no lexical and so the pseudo-hash just does what a Hash does and hands back a Scalar container, which by default contains an Any.

[21:16] <jnthn> nbdsp: You can run with --optimize=off or so to see if I'm right about the "optimized away" bit.

[21:17] <nbdsp> Ohh. I guess this is not reliable indicator then. Thanks.

[21:17] <jnthn> Not at all.

[21:18] <jnthn> If I wanted to implement some kinda protected thing robustly I'd probably look at how private methods work.

[21:18] <jnthn> (In the MOP)

[21:19] <jnthn> Writing a module that makes things automatically turst their subclasses may be possible.

[21:19] <jnthn> Well, it'll be posible, but it may be easily-ish possible

[21:20] *** brrt left
[21:20] <nbdsp> With MOP it probably can be done.

[21:23] *** virtualsue joined
[21:23] *** nbdsp left
[21:24] <japhb> .oO( Use the source^WMOP, Luke! )

[21:28] *** diana_olhovik left
[21:28] <psch> i'm confused :/

[21:28] <psch> i'm trying to properly deal with .WHAT on a Java interop wrapper

[21:29] *** dolmen left
[21:29] <psch> and it at least doesn't die anymore

[21:29] <psch> ugh

[21:30] *** muraiki left
[21:31] <psch> «say System.WHAT» gives me e.g. "org.perl6.nqp.sixmodel.TypeObject@1e3d098c"

[21:31] <psch> and «print System.WHAT» gives me e.g. "__P6opaque__68@71950f04"

[21:31] <psch> i'm installing the CR for the Java .toString() for both .gist and .Str

[21:33] <psch> so it seems to work ok-ish in &say, even if it's not particularly useful like that

[21:36] <psch> welp, i'm not sure anymore if i'm trying anything sensible anyway

[21:37] <jnthn> .tell nbdsp I did a quick MOP hack... https://gist.github.com/jnthn/d8c27741c7b0d25f340d

[21:37] <yoleaux> jnthn: I'll pass your message to nbdsp.

[21:37] <jnthn> psch: print should probably be warning about an undefined value...

[21:38] <jnthn> m: say Int;

[21:38] <camelia> rakudo-moar a94d68: OUTPUT«(Int)␤»

[21:38] <jnthn> m: print Int;

[21:38] <camelia> rakudo-moar a94d68: OUTPUT«use of uninitialized value <element> of type Int in string context  in block <unit> at /tmp/vr1UghWW61:1␤␤»

[21:38] <psch> jnthn: right, but doesn't that mean that i have to hook this up somehow differently in the first place?

[21:39] <jnthn> psch: Well, it hangs off a method Str being a multi method that only accepts :D iirc

[21:39] <jnthn> And the default set of candidates are inherited from Any

[21:41] <masak> 'night, #perl6

[21:41] <psch> g'night masak 

[21:41] * jnthn figures he'd better rest also

[21:41] <jnthn> o/

[21:41] <psch> jnthn: and :D depends on .defined, which i need to hook up to the java class iiuc?

[21:42] <jnthn> psch: No, it means "not a type object"

[21:42] <psch> right

[21:42] <jnthn> e.g. .CONCRETE

[21:44] <psch> nqp::isconcrete at least seems to work

[21:44] <psch> so i have to build a CodeRef that i can graft onto the JavaHOW that calls that i guess

[21:44] *** RabidGravy left
[21:44] <psch> hrm, there's so many wonky spots left in jvminterop 

[21:44] <TimToady> I thought it was .DEFINITE at the higher level

[21:45] <jnthn> oops, it is

[21:45] <TimToady> but nqp::isconcrete works too

[21:45] <psch> anyway, thanks and g'night jnthn

[21:45] <jnthn> TimToady++ # confirming I should actaully get off the keyboard and go to bed :)

[21:45] <jnthn> 'night

[21:45] <TimToady> o/

[21:45] <japhb> o/

[21:45] <psch> i'll have to dig deeper into the our MOP too, i think, considering we probably want to support subclassing from Java to Perl 6

[21:46] * TimToady digs deeper into the NAP... &

[21:50] <psch> what other methods are there that should exist?  HOW, WHAT, WHO etc. aren't methods and go through to nqp ops directly afaiu, so i kinda-sorta got those already

[21:50] <psch> i guess .gist is somewhat sensible to support

[21:51] <psch> oh, WHICH too

[21:55] *** gfldex left
[21:57] *** kaare__ left
[21:58] *** virtualsue left
[22:08] *** zeleiadi left
[22:12] *** Sysaxed left
[22:13] *** alini left
[22:19] *** yqt left
[22:41] *** eli-se left
[22:54] *** bowtie joined
[22:54] *** bowtie is now known as Guest29111

[22:57] *** cognominal joined
[22:58] *** flussence left
[22:59] *** flussence joined
[23:01] *** Guest29111 left
[23:02] *** skids joined
[23:03] *** rmgk is now known as Guest92113

[23:03] *** rmgk_ joined
[23:03] *** Guest92113 left
[23:03] *** rmgk_ is now known as rmgk

[23:06] *** bowtie_ joined
[23:09] *** bjz left
[23:13] *** bowtie_ left
[23:18] *** bowtie_ joined
[23:41] *** LLamaRider joined
[23:43] *** leont left
[23:45] *** bowtie_ left
[23:50] *** bowtie joined
[23:51] *** bowtie is now known as Guest88055

[23:55] *** Guest88055 left
