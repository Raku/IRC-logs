[00:00] <timotimo> ah, no, it's just some code that gets run on startup that uses postfix:<++> i suppose

[00:00] <diakopter_______> m: my int64 $x = 2**63; my int64 $y = -2**63; say $x + $y; say $x - $y;

[00:00] <camelia> rakudo-moar 20718a: OUTPUT«0␤0␤»

[00:00] <diakopter_______> timotimo: ^^

[00:01] <Zoffix> m: class テスト { method モー { say "モー" } }; テスト.new.モー

[00:01] <camelia> rakudo-moar 20718a: OUTPUT«モー␤»

[00:01] <Zoffix> \o/

[00:03] *** n0tjack left
[00:03] <timotimo> neato

[00:07] <zengargoyle> m: say 二十一 + 二十二;

[00:07] <camelia> rakudo-moar 20718a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/W6v6ySaXzM␤Undeclared routines:␤    二十一 used at line 1␤    二十二 used at line 1␤␤»

[00:07] <ilmari> .u 二十一

[00:07] <yoleaux> U+4E00 <CJK Ideograph, First> [Lo] (一)

[00:09] *** lucasb left
[00:09] <zengargoyle> m: for 一..十 -> { .say }

[00:09] <camelia> rakudo-moar 20718a: OUTPUT«5===SORRY!5===␤Function '十' needs parens to avoid gobbling block␤at /tmp/4fXQZ5oB8D:1␤------> 3for 一..十 -> { .say }7⏏5<EOL>␤Missing block (apparently claimed by '十')␤at /tmp/4fXQZ5oB8D:1␤------> 3for 一..十 -> { .say }7⏏…»

[00:10] <rjbs> Hi!

[00:10] <rjbs> Configure.pl loads tools/lib/NQP/Configure.

[00:10] <rjbs> pm, which requires perl 5.10.

[00:10] <rjbs> but instead of saying "use v5.10" it dies horribly on syntax errors

[00:10] <rjbs> What kind of PR would you prefer?  A better use line, or a fix for the syntax?

[00:10] <rjbs> (I'd prefer to supply the former.)

[00:10] <dalek> rakudo/nom: 5a9e0b1 | timotimo++ | src/core/ (2 files):

[00:10] <dalek> rakudo/nom: throw out a few expensive ++ in hot-ish pieces of code

[00:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5a9e0b161a

[00:13] <Zoffix> rjbs, do whatever you think is the best solution and submit that :)

[00:13] <Zoffix> I doubt a core P5 hacker can mess it up :P

[00:14] <rjbs> Hm.  Failing to pass the nqp/moar/build/probe.pm test on solaris with gnucc.

[00:14] <Zoffix> :(

[00:14] <zengargoyle> how big a thing is the 5.10 needing thing?

[00:14] <rjbs> zengargoyle: I'm not sure.  At minimum, it uses //

[00:15] *** mephinet joined
[00:15] <rjbs> I think it's fair to require 5.10.  That's system perl for years now.

[00:15] <rjbs> bbiab

[00:15] <zengargoyle> not sure if they started w/ 5.008 and just never noticed using 5.10isms

[00:16] <dalek> modules.perl6.org: a21fbfb | (Zoffix Znet)++ | / (2 files):

[00:16] <dalek> modules.perl6.org: Fix decoding JSON on raw bytes (flussence++) (Closes #48)

[00:16] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/a21fbfb1d5

[00:17] <zengargoyle> guess unless somebody wants to go back and make sure everything is 5.8 clean forevermore... 5.10 is probably ok.

[00:17] <timotimo> hm. what does CentOS have in its old-ish version?

[00:17] <zengargoyle> 5.8 in like CentOS 5.x IIRC

[00:17] <Zoffix> ew

[00:18] <zengargoyle> 5.8.8 thou i think.

[00:18] <zengargoyle> but CentOS/RedHat Perl is usually borked in some way or another even if recent. :)

[00:19] <timotimo> TimToady: i'm a bit surprised you called it STATEMENT_LIST and not STATEMENT-LIST

[00:19] <Zoffix> :O

[00:21] *** donaldh left
[00:21] <TimToady> it's still really an internal name, hence _

[00:22] <uruwi> Why can't I return a lowercase int from a method?

[00:23] * zengargoyle wonders if i should even think about trying to compile for Solaris 10 i86pc with Sun compilers.

[00:24] <Hotkeys> er

[00:24] <Hotkeys> nvm

[00:24] <dalek> modules.perl6.org: 8d3f016 | (Zoffix Znet)++ | lib/ModulesPerl6/Controller/Root.pm:

[00:24] <dalek> modules.perl6.org: Mention in docs that /total is now definitely used by http://www.modulecounts.com/ lest someone decides to toss it

[00:24] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/8d3f016996

[00:24] <uruwi> m: my int a {return 1;}; say a;

[00:24] <camelia> rakudo-moar 20718a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CFu_sK2OdF␤Malformed my␤at /tmp/CFu_sK2OdF:1␤------> 3my int7⏏5 a {return 1;}; say a;␤»

[00:24] <uruwi> m: sub int a {return 1;}; say a;

[00:24] <camelia> rakudo-moar 20718a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_NzOpX4_5n␤Did you mean to write "my int sub a" or put "returns int" before the block?␤at /tmp/_NzOpX4_5n:1␤------> 3sub int a7⏏5 {return 1;}; say a;␤»

[00:24] <uruwi> m: int sub a {return 1;}; say a;

[00:25] <camelia> rakudo-moar 20718a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/AwzZCao5q0␤Two terms in a row␤at /tmp/AwzZCao5q0:1␤------> 3int7⏏5 sub a {return 1;}; say a;␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        stateme…»

[00:25] <uruwi> m: sub a returns int {return 1;}; say a;

[00:25] <camelia> rakudo-moar 20718a: OUTPUT«1␤»

[00:25] <Zoffix> m: sub a returns int {return 1;}; say a.WHAT;

[00:25] <camelia> rakudo-moar 20718a: OUTPUT«(Int)␤»

[00:27] <TimToady> moritz: s/wroth/worth/

[00:27] <TimToady> "I am wroth a lot."  --Donald Trump

[00:30] *** Psyche^ joined
[00:33] <TEttinger> "I am become death, destroyer of worlds" --a GOTO label in a java function I wrote

[00:34] *** Psyche^_ left
[00:35] <timotimo> m: my int $a; say $a.WHAT

[00:35] <camelia> rakudo-moar 5a9e0b: OUTPUT«(Int)␤»

[00:35] <timotimo> uruwi: the .WHAT causes it to be boxed, i believe

[00:38] <[Coke]> m: my Int a = 3; say a ~~ int;

[00:38] <camelia> rakudo-moar 5a9e0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/34R5ARKA1b␤Malformed my (did you mean to declare a sigilless \a or $a?)␤at /tmp/34R5ARKA1b:1␤------> 3my Int a7⏏5 = 3; say a ~~ int;␤»

[00:38] <[Coke]> m: my Int \a = 3; say a ~~ int;

[00:38] <camelia> rakudo-moar 5a9e0b: OUTPUT«False␤»

[00:38] <[Coke]> m: my int \a = 3; say a ~~ int;

[00:38] <camelia> rakudo-moar 5a9e0b: OUTPUT«Type check failed in binding; expected int but got Int␤  in block <unit> at /tmp/IStRAFK0ll:1␤␤»

[00:43] <rjbs> Should this be fatal, or just "things won't be as fast": Configuring native build environment ................... JIT isn't supported on i86pc-solaris yet.

[00:44] <timotimo> definitely not fatal

[00:44] <rjbs> So, what I end up with is:

[00:44] <rjbs> probing whether your compiler thinks that it is gcc  Can't compile simple gcc probe, so something is badly wrong at build/probe.pm line 92

[00:44] *** molaf left
[00:44] <rjbs> both gcc and cc report: gcc (GCC) 3.4.6

[00:44] <timotimo> huh

[00:44] <rjbs> I don't see any option for verboser reporting.

[00:45] <timotimo> perhaps probe.pm is easy enough to look into?

[00:45] * timotimo has to go now

[00:46] <rjbs> yeah, working on that

[00:46] <rjbs> so far, ust Command failed (status 512):

[00:46] <diakopter_______> TEttinger: I thought java didn't have goto

[00:46] <rjbs> woah

[00:46] <TEttinger> diakopter: technically, no. but it does have labeled break

[00:46] <TEttinger> and it uses the same syntax for labels as GOTO

[00:46] <rjbs> Okay, surely this is a problem with my local install.  I'll sort tha tout.

[00:47] <diakopter_______> rjbs: well it should at least hint to use --no-jit

[00:48] <rjbs> maybe it isn't obvious; the error I get is: probing whether your compiler thinks that it is gcc  cc: installation problem, cannot exec `as': No such file or directory

[00:51] <diakopter_______> TEttinger: oh, yes, upwards goto... yeah

[00:52] <TEttinger> C# has actual goto, which is kinda interesting that of all the modernizing changes to java they made, they also add goto

[00:54] <geekosaur> rjbs, there's an OS package you need to install for that; which solaris version?

[00:54] *** diakopter____ joined
[00:54] <rjbs> illumos, I'll pkg in build-essential later tonight

[00:54] <rjbs> thanks

[00:55] <gtodd> rjbs: you're using illumos!?  

[00:55] <gtodd> wheee!

[00:55] <rjbs> Should I be ashamed? :)

[00:55] <gtodd> haha no

[00:55] *** diakopter_______ left
[00:56] <rjbs> Pobox runs on SmartOS, but I told a coworker I'd prove out building rakudo on illumos for him.

[00:56] <gtodd> it's some good stuff rbac zfs etc etc

[00:56] * geekosaur would actually have been able to help with actual solaris, being that he supports a couple customers that still use it extensively >.>

[00:56] <geekosaur> (I had a little smartos box installed here at one point, but it was too little; 2GB doesn't cut it for zfs root >.> )

[00:57] <gtodd> geekosaur: true ... it always "feels" small because I boot it from a USB key

[00:59] *** n0tjack joined
[00:59] *** AndyDee left
[01:02] *** njmurphy_ left
[01:04] *** n0tjack left
[01:07] *** yeahnoob joined
[01:15] *** BenGoldberg joined
[01:20] *** diakopter____ left
[01:22] *** diakopter___ joined
[01:39] *** znpy` joined
[01:40] *** shamu_ left
[01:41] <TimToady> pity we didn't name NativeCall something like "Nativity"...

[01:41] <gtodd> hehe

[01:42] <gtodd> and article describing it as part of the advent could use the title in a pun-like way ...

[01:42] <gtodd> an article

[01:43] *** diakopter___ left
[01:43] <geraud> How could I check that $something does a My::Role? with the smartmach operator?

[01:43] <TimToady> .oO(there is no pun-like way, only a pun-hate way)

[01:43] <TimToady> geraud: that works

[01:43] <TimToady> m: say Hash ~~ Associative

[01:43] <camelia> rakudo-moar 5a9e0b: OUTPUT«True␤»

[01:45] <geraud> hum...

[01:46] *** ShimmerFairy joined
[01:49] *** BenGoldberg left
[01:49] <rjbs> So, moarvm's build seems to always pass -mt on Solaris, even if using gcc.

[01:52] <rjbs> Then, it ends up trying to build moar's jit code, but it seemed to say it wasn't possible...

[01:53] *** dayangkun joined
[01:56] <rjbs> Can I use --moar-option somehow?  Doesn't seem documented.

[01:57] * rjbs uses --moar-option=--no-jit

[01:59] <psch> rjbs: if youre working on compiling for a new platform i'd recommend two things: (1) build things in separate steps and (2) for building moar, maybe join #moarvm and complain there if you stumble

[02:00] *** n0tjack joined
[02:00] <rjbs> I'm mostly trying to just get this done ASAP because it's a favor and not something actually helpful to me. ;)

[02:00] <psch> rjbs: Configure.pl should have checked out everything for you already, which means you have nqp/ below your rakudo clone and nqp/MoarVM for moar

[02:00] <psch> rjbs: oh, nevermind then :)

[02:01] * psch needs to get some rest anyway o/

[02:01] <rjbs> undefined symbol cfmakeraw :-/

[02:01] <rjbs> ni ni

[02:02] *** uruwi left
[02:04] *** cygx joined
[02:04] *** n0tjack left
[02:05] <cygx> rjbs: you need a more recent libuv version (cf https://github.com/libuv/libuv/commit/672b2047995e0f49f873999743a4158d70a75df7 )

[02:06] <cygx> probably worth a moarvm ticket

[02:08] *** csd_ left
[02:09] <cygx> 'night o/

[02:09] *** cygx left
[02:12] <ShimmerFairy> using modules: still broken

[02:15] <skids> Yeah.  Also panda rebootstrap.pl (easy fix, use ~$_ on the complaining line, but then dies on trying to install already-installed File::Find)

[02:16] *** sufrostico left
[02:17] <ShimmerFairy> skids: by using modules being broken, I mean trying anything that hasn't been "installed" (I guess). See  https://rt.perl.org/Public/Bug/Display.html?id=126765

[02:17] <ShimmerFairy> skids: so I have no clue about if/how rebootstrap.pl is broken, I haven't gotten that far :P

[02:19] <skids> Oh, I don't have that problem, I install in ~/.local and only run from one account (agree it's a problem of course.)

[02:19] <geraud> glad to see I'm not the only one having troubles with panda. Although, I'm struggling with bootstrap.pl believing CompUnit::Repository is a function.

[02:21] *** kaare_ joined
[02:24] <ShimmerFairy> skids: to anyone who might suggest I should just change install location, I can only say "remove the local/ bit and you'll have what every single package manager will end up doing"  :)

[02:24] *** FROGGS_ joined
[02:25] <lucs> Um, panda fails for me too.

[02:25] <skids> Yeah, pretty much.  My last laptop I was using /usr/local/

[02:25] <lucs> Is the culprit panda or rakudo?

[02:26] <skids> I guess it depends on what fails with an exit code when reinstallation fails, whether it should, and how panda should react when it does.

[02:26] <lucs> Oookay :)

[02:27] <skids> (but the "expected Str but got CompUnit::Local::Installation" one is a panda problem.)

[02:28] *** FROGGS left
[02:28] *** uruwi joined
[02:28] *** Herby_ joined
[02:28] <Herby_> Good evening, everyone!

[02:31] <skids> :/ so much indirection

[02:32] <Herby_> I'm having an issue with a simple 

[02:32] <Herby_> "spurt" example

[02:32] <Herby_> when I append a file, I can't get it to recognize a newline character

[02:32] <uruwi> Anyone care to help me?

[02:32] <uruwi> https://github.com/bluebear94/Math-Random/blob/master/lib/Math/Random/MT.pm6

[02:32] <uruwi> Apparently this class's new method doesn't accept a named parameter for w

[02:33] <uruwi> (Unexpected named parameter 'w' passed)

[02:34] <[Coke]> Herby_: newlines are special.

[02:34] <Herby_> Coke, how would I spurt append "blah blah \n another line"?

[02:36] <[Coke]> Zoffix: it would be nice if, when searching on docs, if I could type "spurt<enter>" and if only one thing came back for spurt, have it autoselect and go.

[02:36] <[Coke]> Herby_: checking.

[02:36] <Herby_> I swear I've looked :)

[02:36] <Herby_> spurt "datafile.txt", "blah blah \n another line", :append;

[02:36] <Herby_> that just puts everything on the same line

[02:37] <[Coke]> Herby_: "stuff".IO.spurt("lots of \n stuff", :append);

[02:37] <llfourn> uruwi: it looks like it should. FWIW I've also had odd errors like that, they were usually indicative of some other problem...

[02:37] <[Coke]> ^^ that works fine here.

[02:37] <[Coke]> Herby_: what version of rakudo are you using?

[02:37] <Herby_> 2015.11?

[02:37] <skids> What's .IO.nl-out set to?

[02:38] <llfourn> uruwi: if you can reproduce that bug it would be awesome

[02:38] <Herby_> skids, I'm not quite sure how to check that

[02:38] <[Coke]> m: say "stuff".IO.nl-out

[02:38] <camelia> rakudo-moar 5a9e0b: OUTPUT«␤␤»

[02:38] <skids> Herby: just say it

[02:38] <Herby_> coke, actually I'm on 2015.09

[02:39] <[Coke]> Herby_: that's ancient. :)

[02:39] <Herby_> I get an error when I say that

[02:40] <skids> Yeah it wasn't invented then.

[02:40] <Herby_> "Method 'nl-out' not found for invocant of class 'IO::Path'

[02:40] <Herby_> ok

[02:40] <Herby_> so I need to update my rakudo?

[02:40] <Hotkeys> might want to update

[02:40] <Herby_> another dumb question. I'm on Windows 7.  Is there an easier way to update Rakudo other than uninstall, reinstall?

[02:40] <AlexDaniel> m: say gather for ^10 { take take take take ^10 .pick }

[02:40] <camelia> rakudo-moar 5a9e0b: OUTPUT«(2 2 2 2 1 1 1 1 4 4 4 4 1 1 1 1 1 1 1 1 7 7 7 7 2 2 2 2 9 9 9 9 6 6 6 6 5 5 5 5)␤»

[02:41] <Hotkeys> Herby_: if you can get visual studio 2010

[02:41] <Hotkeys> via a method of your choosing

[02:41] <Hotkeys> you can use rakudobrew

[02:41] <Herby_> Will Visual Studio 2013 work, or is it special to 2010?

[02:41] <Hotkeys> you can try it

[02:41] <Hotkeys> it wouldn't build for me

[02:42] <Hotkeys> i've heard the same from others

[02:42] <Herby_> ok, and worst case scenario just uninstall rakudo and reinstall?

[02:42] <Herby_> the new version that is

[02:42] <Hotkeys> yeah

[02:42] <Hotkeys> rakudobrew is a script 

[02:43] <Hotkeys> you just run 'rakudobrew build moar' from the visual studio command prompt

[02:43] <Hotkeys> and it builds the latest version from the repo

[02:43] <AlexDaniel> m: say gather { take gather { take gather { take gather { take 42 } } } }; # that's fun

[02:43] <camelia> rakudo-moar 5a9e0b: OUTPUT«((((42))))␤»

[02:43] <Hotkeys> (or you can specify releases like 2015-11)

[02:43] <Hotkeys> https://github.com/tadzik/rakudobrew

[02:44] <skids> .oO(with curli in this state maybe we shouldn't be advising people to brew)

[02:44] <Herby_> ok, let me take a look

[02:44] <skids> or figure out a triple that is safe

[02:44] <ShimmerFairy> Huh, on my system using perl6's mkdir will respect my umask, despite having a 0o777 default parameter (even making it explicit). Is that intended behavior or not?

[02:45] <skids> isn't umask enforced by the OS?

[02:46] *** eternaleye is now known as M-eternaleye

[02:46] <ShimmerFairy> skids: I honestly don't know how that all works, so beats me :)

[02:47] <geekosaur> the mode is passed to the OS system call, which applies the umask

[02:47] <skids> yeah you have to chmod to defy your process umask.

[02:47] *** M-eternaleye is now known as eternaleye

[02:48] <ShimmerFairy> skids: alright, that modifies my complaint in the bug report somewhat :)

[02:48] <AlexDaniel> is there any recursion limit?

[02:49] <skids> not judging from some of the spins I've accidentally created :-)

[02:53] <Herby_> another beginners question...

[02:53] <uruwi> Oh, stray semicolon

[02:53] <Herby_> the rakudo website only has msi for 2015.09 it looks like: http://rakudo.org/downloads/star/

[02:54] <uruwi> I'd wait for the 2015.11 msi's

[02:54] <Herby_> okie dokie

[02:55] *** dayangkun left
[02:56] <dj_goku> anyone having issues building moar-nom on osx?

[02:56] <dj_goku> err it looks like there might be an issue with panda: Type check failed in assignment to $prefix; expected Str but got CompUnit::Repository::Installation

[02:56] <Herby_> well thanks for the help!

[02:56] *** Herby_ left
[02:57] <skids> dj_goku: yes, on the complaining line, use ~$_ instead of $_

[02:59] <Hotkeys> dj_goku it fails for me on windows too

[03:01] *** n0tjack joined
[03:01] <skids> Or well, maybe that's not the right fix.

[03:01] <skids> m: %*CUSTOM_LIB.perl.say

[03:01] <camelia> rakudo-moar 5a9e0b: OUTPUT«Failure.new(exception => X::Dynamic::NotFound.new(name => "\%*CUSTOM_LIB"), backtrace => Backtrace.new)␤»

[03:02] <dj_goku> skids: there are a few new commits on panda.

[03:03] <ShimmerFairy> m: say %*CUSTOM_LIB

[03:03] <camelia> rakudo-moar 5a9e0b: OUTPUT«Dynamic variable %*CUSTOM_LIB not found␤  in block <unit> at /tmp/BCtwCyLBjn:1␤␤Actually thrown at:␤  in block <unit> at /tmp/BCtwCyLBjn:1␤␤»

[03:03] <ShimmerFairy> The funny thing is that a recent commit claims to fix this.

[03:04] <dj_goku> skids: weird, made the change and re-ran rakudobrew build moar and it is moving along.

[03:05] <skids> Yeah the fix dslodges things but only by making a failure go unnoticed.

[03:05] <dj_goku> ahh failed further down the script.

[03:05] <dj_goku> :(

[03:05] <skids> Reinstalling File::Find?

[03:05] <Hotkeys> you can just rakudobrew build panda no?

[03:05] <Hotkeys> saves you from having to rebuild rakudo

[03:06] *** n0tjack left
[03:08] *** cdg left
[03:11] *** noganex_ joined
[03:12] *** kid51 left
[03:13] *** noganex left
[03:14] *** uruwi_ joined
[03:15] *** uruwi left
[03:16] *** kaare_ left
[03:17] <dj_goku> I just nuked moar-nom and all is good now.

[03:18] *** uruwi_ left
[03:19] <dj_goku> FROGGS_: did you ever finish the testers dancer changes for the unicode issue we discussed?

[03:20] *** uruwi joined
[03:24] <skids> Oh I guess that ~$_ fix was actually working -- hrm what are the conditions under which %*CUSTOM_LIB populates?

[03:25] <dj_goku> home => (Any), perl => inst#~/.rakudobrew/moar-nom/install/share/perl6, site => inst#~/.rakudobrew/moar-nom/install/share/perl6/site, vendor => inst#~/.rakudobrew/moar-nom/install/share/perl6/vendor

[03:26] <dj_goku> oh

[03:26] <dj_goku> sorry

[03:27] <diakopter> np. XD

[03:30] <skids> m: use Pod::To::Text; %*CUSTOM_LIB.perl.say

[03:30] <camelia> rakudo-moar 5a9e0b: OUTPUT«{:home(Any), :perl(CompUnit::Repository::Installation.new('/home/camelia/rakudo-m-inst-1/share/perl6')), :site(CompUnit::Repository::Installation.new('/home/camelia/rakudo-m-inst-1/share/perl6/site')), :vendor(CompUnit::Repository::Installation.new('/home/…»

[03:30] <skids> There we go.  %*CUSTOM_LIB only exists if you actually load something.

[03:31] <ShimmerFairy> I was going to suggest that perhaps we should revert the CURI merge what with all the problems, but as far as I can tell it was done as a rebase. What the fuck.

[03:31] <ShimmerFairy> (Please tell me I'm just missing the merge commit, and that I'm wrong about it being a rebase.)

[03:32] <dj_goku> m: say [1.3, 2.8, 32323423.4, 4.0]

[03:32] <camelia> rakudo-moar 5a9e0b: OUTPUT«[1.3 2.8 32323423.4 4]␤»

[03:34] <ShimmerFairy> skids: huh, my :home is unset as well.

[03:34] <skids> In retrospect it might have been best to have made a 2015.11 star before the CURLI merge.  I'm sure the pain will subside.

[03:34] *** dayangkun joined
[03:35] * ShimmerFairy decides to direct her frustration into writing a rant post :P

[03:35] *** vendethiel joined
[03:36] <dj_goku> timotimo: around?

[03:38] <diakopter> ShimmerFairy: better than a rant post would be a thorough explanation of the pain points and missed expectations, so when nine wakes up, he can calmly absorb the new information and best be able to use his limited time to fix them quickly :D

[03:40] <diakopter> ShimmerFairy: I say this because the complaints/symptoms are currently spread quite widely across the irc log and I'm not sure anyone's gathered them all together

[03:40] <diakopter> (perhaps you're exactly a right person to collate them?)

[03:40] <ShimmerFairy> diakopter: sure, I'm not in the business of writing incoherent ALL-CAPS RAGE, but I'm not in the mood to play nice anymore :) . So, in other words, I'm not gonna mince words or try and point out the positives (esp. since I can't _get_ to the potential positives)

[03:40] <ShimmerFairy> diakopter: essentially, I'd like said post to be informative, but also indicative of the displeasure I feel.

[03:42] <diakopter> well, displeasure is a problem of improper expectations, IFF it was feasible/plausible/reasonable to have had appropriate expectations felt :p

[03:43] <diakopter> in this case, primary head branch of rakudo should still be considered quite unpredictable on most platforms/systems, even a few weeks before release

[03:43] <ShimmerFairy> diakopter: I think the issue boils down to not nearly enough testing pre-actually-rebase. I'm not sure how that couldn't been achieved without an actually-rebase, aside from thinking about the old alpha/b/etc. days, so I'm not going to act like there could've been way more testing or something.

[03:44] <diakopter> no; it was a rushed rewrite, a necessary down-to-the-wire evil

[03:44] <AlexDaniel> “Unhandled exception: failed to load library 'dynext/libperl6_ops_moar.so'” huh?

[03:45] <diakopter> ShimmerFairy: not nearly enough testing, when all resources are donated/volunteered/sponsored, will always be the case

[03:45] *** znpy` left
[03:45] <ShimmerFairy> diakopter: so that's why I'm not going to write things with SEETHING RAGE; partly because that's not who I am, and partly because I'm too good at remembering the limitations in our development process :)

[03:45] <zengargoyle> did that ~/.perl6 location get configurable?

[03:46] <dalek> ecosystem: 7b74507 | bluebear94++ | META.list:

[03:46] <dalek> ecosystem: Add Math::Random

[03:46] <dalek> ecosystem: https://github.com/bluebear94/Math-Random

[03:46] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7b745077e4

[03:46] <dalek> ecosystem: d6da07d | (Zoffix Znet)++ | META.list:

[03:46] <dalek> ecosystem: Merge pull request #100 from bluebear94/master

[03:46] <dalek> ecosystem: 

[03:46] <dalek> ecosystem: Add Math::Random: https://github.com/bluebear94/Math-Random

[03:46] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/d6da07dde6

[03:46] <ShimmerFairy> (I do think having more people use the Universal Default Install Location™ would be nice, but alas MoarVM thinks it shouldn't do that default.)

[03:46] * zengargoyle actually shares a rakudobrew amongst multiple users...

[03:46] <diakopter> *boggles*

[03:47] <zengargoyle> they're both me, but ...

[03:47] *** uvtc joined
[03:47] <diakopter> *giggles*

[03:48] *** uvtc left
[03:48] *** yqt left
[03:48] <zengargoyle> i have $WORK name to make ssh/email easy and zen me for other stuff, and install stuff on one machine and rsync to other machines (vs building on each machine for each user)

[03:49] *** uvtc joined
[03:49] <zengargoyle> have a dread that it's going to be a PITA now.

[03:49] <uvtc> Oooh, nice. Tried rakudobrew this afternoon, and `rakudobrew build-panda` left me searching for where `panda` got installed, but just tried again now and it's there in ~/.rakudobrew/bin!

[03:50] <Juerd> I was going to "rakudobrew build moar" before I went to bed, but it failed.

[03:50] <Juerd> I'm just dropping this here in case it's useful to anyone

[03:50] <Juerd> Type check failed in assignment to $prefix; expected Str but got CompUnit::Repository::Installation

[03:50] <Juerd>   in sub MAIN at rebootstrap.pl:13

[03:50] <Juerd>   in block <unit> at rebootstrap.pl:8

[03:50] <Juerd> Not investigating it because I'm off to bed. Good any(night, $localtime), *

[03:50] <skids> Yeah, actually moar succeeded it was panda that failed.

[03:52] <uvtc> Is `panda install Linenoise` still the preferred way to get regular keyboard shortcuts working in the repl?

[03:52] <zengargoyle> uvtc: probably, but i'm liking not using Linenoise and just using rlwrap.

[03:53] <zengargoyle> it wraps better, handles unicode, keeps history across sessions, does completions on words it has seen.

[03:53] <uvtc> zengargoyle, how do I install rlwrap and make it work with perl6?

[03:54] <dj_goku> I was just going to ask the same thing. :D

[03:55] <zengargoyle> you on a linux system?  don't know if there's rlwrap for windows... # rlwrap == GNU readline wrapper

[03:55] <uvtc> zengargoyle, yes, Debian Testing.

[03:55] <zengargoyle> apt-get install rlwrap

[03:55] <uvtc> Ooof. Right. :)

[03:55] <uvtc> Thanks, zengargoyle 

[03:55] <uvtc> .

[03:55] <dj_goku> brew install rlwrap for osx

[03:56] <zengargoyle> then: rlwrap perl6 # for the basic usage.  Note, i believe you have to not install Linenoise (or remove the Linenoise.pm module for it to work right)

[03:56] <dj_goku> uvtc: rlwrap perl6

[03:56] <dj_goku> zengargoyle: whoops

[03:57] <uvtc> zengargoyle, thanks! Running system updates, but will try that after a few minutes.

[03:57] <zengargoyle> i've tweaked a bit...: rlwrap -m -M .pl6 -r -O'^> ' -pBlue  -S'> ' --no-warnings -R perl6

[03:58] <dj_goku> lol

[03:58] <zengargoyle> which makes Ctrl-^ to edit a line in $EDITOR work nicer...  there's still a bit of borkedness since the REPL is line oriented.

[03:58] *** Guest51288 left
[03:59] <zengargoyle> multiple lines from $EDITOR each get their own '> ' prompt sorta inserted in the output vs all running as one big chunk.

[03:59] <diakopter> are REPLs used to prototype ideas about little scripts? or to explore methods/syntax while learning? or what?

[04:00] <zengargoyle> both/all

[04:00] * skids only finds them useful in a debugger context

[04:00] <diakopter> do you frequently turn repl transcripts into persistent script files?

[04:01] <diakopter> or is it more for practice/memory

[04:01] <flussence> on a related note, perl6 supporting “”‘’ quotes is a godsend for shell one-liners, because bash doesn't notice them *at all* :)

[04:01] <uvtc> zengargoyle, rlwrap works great. Thanks again!

[04:01] * zengargoyle is bad for working with giant one-liners, then dropping them into $EDITOR and formatting/saving them. :)

[04:01] <zengargoyle> but with rlwrap, at least there's a history file you can copy/edit a bit.

[04:02] <zengargoyle> do that quite often with BASH work... futz around and then go back and delete the stuff that didn't work. :P

[04:02] <diakopter> ok, so it's more about using a line editor to approximate a multi-line editor where you can iteratively run it up to a certain point only

[04:02] * geekosaur often does "desk calculator" type things and quick checks

[04:03] *** n0tjack joined
[04:04] <diakopter> geekosaur: checking your memory of something? or checking whether something works the way you imagined it, in the course of problem solving?

[04:04] <mspo> http://doc.perl6.org/language/$_

[04:04] <geekosaur> either. or someone pops up in a channel asking for help and I see if I can reproduce it etc

[04:04] <zengargoyle> for bigger stuff, i'm a fan of mini-continuous-integration.  make the script with a MAIN('test') that does tests, or just outputs.

[04:05] <geekosaur> in any case it's not something I do development in

[04:05] <zengargoyle> and use inotify to run it after every save.  edit in editor, watch other window for results.

[04:05] <skids> Really they are *very* useful inside debuggers, and worth it just for that, so worth supportig in general.

[04:07] <zengargoyle> i *think* hoelzro?? is pondering having readline integration support built in.

[04:07] *** n0tjack left
[04:08] <flussence> last I heard, the main obstacle there is readline's license

[04:08] <zengargoyle> but it's some sort of licensing issue actually including it.  but use it if you have it is fine.

[04:08] <diakopter> an insurmountable license to be bundled by default, for sure.. but it would be nice if a module worked seamlessly

[04:09] <zengargoyle> yeah, that.  i think the hooking in part wouldn't be that difficult.

[04:11] <zengargoyle> i wrote a little filter for rlwrap to remove the extra '> 's, but it's sorta hacky.  plenty of filter examples come with the rlwrap install down in /usr/shar/doc/rlwrap or such.

[04:17] *** AlexDaniel left
[04:26] *** scottj joined
[04:27] <bzipitidoo> In http://doc.perl6.org/language/grammars under Action objects, how does the example work?  The class seems to have a a "make" subroutine or function, but the object calls "made". 

[04:28] <TimToady> made is the incoming ast data from the leaves, make is how you make a new outgoing ast node

[04:28] <bzipitidoo> ast?

[04:28] <TimToady> abstract syntax tree

[04:28] <skids> abstract syntax tree

[04:29] <TimToady> what you get from a parser :)

[04:29] <ugexe> are bin scripts and resources not considered part of a Distribution object?

[04:29] <TimToady> well, if you get fancy; by default you just get the match object tree

[04:29] *** balazs left
[04:30] <TimToady> ugexe: I dunno if we've thought much beyond modules

[04:32] <ugexe> what i mean is .install gets passed ($distribution, %resources, %scripts), but to me those seem like they would go in the Distribution object so i wonder if im overlooking something

[04:32] <diakopter> I dunno if TimToady's looked at the new precompile architecture XD

[04:32] <TimToady> I do :)

[04:33] <TimToady> I only read jnthn's gist design

[04:34] <diakopter> er, compunit repo installation architecture, I meant

[04:37] <bzipitidoo> hm... all I get when I try to change the example is  "No such method 'made' for invocant of type 'Any'"

[04:38] <TimToady> you have to call it on a Match object that matched

[04:38] <TimToady> (and that already did a make)

[04:41] *** vendethiel left
[04:55] *** keix joined
[04:56] *** skids left
[04:57] *** anaeem1 joined
[05:04] *** n0tjack joined
[05:04] *** cdg joined
[05:04] *** csd_ joined
[05:06] *** anaeem1 left
[05:06] *** anaeem1 joined
[05:06] *** anaeem1 left
[05:08] *** n0tjack left
[05:09] *** csd_ left
[05:23] *** khw left
[05:28] *** davmillar joined
[05:32] *** uvtc left
[05:46] <MadcapJake> Does the new function composition operator `o` support being written as unicode `∘`?

[05:47] <ShimmerFairy> MadcapJake: well, for every unicode-needing operator, we add another operator that uses ASCII only, so infix:<∘> gets defined along with another infix:<o> that just calls the unicode one

[05:47] <MadcapJake> but it does work?

[05:48] <ShimmerFairy> MadcapJake: of course it does :)

[05:49] <MadcapJake> just wondering because i looked over the gh repo, and various release notes and nowhere does it mention a unicode version of that op

[05:49] <ShimmerFairy> m: sub infix:<Γ>($a, $b) { $a + $b }; constant &infix:<G> := &infix:<Γ>; say 1 Γ 2; say 1 G 2;    # one way of doing it, that AFAIK lets them truly be synonyms

[05:50] <camelia> rakudo-moar 5a9e0b: OUTPUT«3␤3␤»

[05:51] <ShimmerFairy> MadcapJake: well, o is easier to type for most I imagine, and I think (but I don't speak for everyone) that both versions are typically thought of as the same operator, so "the o operator" implies all possible spellings.

[05:52] <MadcapJake> m: sub f($x) { $x + 1 }; sub g($x) { $x + 10 }; my &h = f o g; &h(2);

[05:52] <camelia> rakudo-moar 5a9e0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/TOpYsRXBLt␤Undeclared routine:␤    o used at line 1␤␤»

[05:53] <MadcapJake> m: sub f($x) { $x + 1 }; sub g($x) { $x + 10 }; my &h = f ∘ g; &h(2);

[05:53] <camelia> rakudo-moar 5a9e0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/enmliclFsH␤Preceding context expects a term, but found infix ∘ instead␤at /tmp/enmliclFsH:1␤------> 3 1 }; sub g($x) { $x + 10 }; my &h = f ∘7⏏5 g; &h(2);␤»

[05:53] <ShimmerFairy> m: sub f($x) { $x + 1 }; sub g($x) { $x + 10 }; my &h = &f ∘ &g; &h(2);

[05:53] <camelia> rakudo-moar 5a9e0b: ( no output )

[05:53] <ShimmerFairy> m: sub f($x) { $x + 1 }; sub g($x) { $x + 10 }; my &h = &f ∘ &g; say &h(2);

[05:53] <camelia> rakudo-moar 5a9e0b: OUTPUT«13␤»

[05:53] <gfldex> at the bottom of https://github.com/rakudo/rakudo/blob/nom/src/core/operators.pm#L655

[05:54] <ShimmerFairy> MadcapJake: you need to use &f form to refer to the routine as an object, otherwise it's seen as a call :)

[05:54] <MadcapJake> oh yeah :P

[05:55] <MadcapJake> gfldex: thanks! That's helpful!

[05:55] <MadcapJake> m: sub f($x) { $x + 1 }; sub g($x) { $x + 10 }; my &h = &f o &g; &h(2);

[05:55] <camelia> rakudo-moar 5a9e0b: ( no output )

[05:55] <MadcapJake> m: sub f($x) { $x + 1 }; sub g($x) { $x + 10 }; my &h = &f o &g; say &h(2);

[05:55] <camelia> rakudo-moar 5a9e0b: OUTPUT«13␤»

[05:55] <MadcapJake> I just had to check for my own sanity :D

[05:57] *** raiph left
[06:02] <MadcapJake> Just getting some of the latest additions into my perl6 highlighter, thanks for the help!  G'night all!

[06:02] *** MadcapJake left
[06:03] *** Actualeyes1 joined
[06:03] *** xfix joined
[06:04] *** n0tjack joined
[06:09] <hoelzro> zengargoyle: I have Readline integration on my TODO list, but ENOTUITS

[06:09] *** n0tjack left
[06:14] *** b7j0c joined
[06:25] *** darutoko joined
[06:27] *** bjz joined
[06:31] *** bjz left
[06:44] <ShimmerFairy> to whoever handles the advent site's look: it could really use a search feature :)

[06:45] *** geraud left
[06:47] *** bjz joined
[06:49] *** bzipitidoo left
[06:53] *** FROGGS_ left
[06:55] *** domidumont joined
[07:00] *** domidumont left
[07:01] *** domidumont joined
[07:03] *** quester joined
[07:03] *** quester left
[07:03] *** quester joined
[07:05] *** davmillar left
[07:05] *** n0tjack joined
[07:08] *** CIAvash joined
[07:10] *** n0tjack left
[07:10] <ShimmerFairy> .tell [Coke] looking at https://gist.github.com/coke/63c7bbb82f075c7bb1f5 , there's a spurious Lue line that needn't be there (line 356 of output), and neither the so-called aliases nor the svn-y email for ShimmerFairy should be there either :)

[07:10] <yoleaux> ShimmerFairy: I'll pass your message to [Coke].

[07:12] *** b7j0c left
[07:15] *** vendethiel joined
[07:17] *** kjs_ joined
[07:24] <dalek> rakudo/nom: ec41c2f | (Ricardo Signes)++ | Configure.pl:

[07:24] <dalek> rakudo/nom: Configure ends up requiring perl v5.10.0 for // op

[07:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec41c2f0e7

[07:24] <dalek> rakudo/nom: ba106f8 | FROGGS++ | Configure.pl:

[07:24] <dalek> rakudo/nom: Merge pull request #607 from rjbs/config-version

[07:24] <dalek> rakudo/nom: 

[07:24] <dalek> rakudo/nom: Configure ends up requiring perl v5.10.0 for // op

[07:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba106f8dbf

[07:27] *** FROGGS joined
[07:27] *** kjs_ left
[07:28] <Woodi> hallo #perl6 :)

[07:28] <nine> .tell FROGGS panda's rebootstrap is obsolete. You can now upgrade your rakudo and keep all installed distributions (including panda)

[07:28] <yoleaux> nine: I'll pass your message to FROGGS.

[07:29] <FROGGS> uh

[07:29] <yoleaux> 07:28Z <nine> FROGGS: panda's rebootstrap is obsolete. You can now upgrade your rakudo and keep all installed distributions (including panda)

[07:29] <FROGGS> nice :o)

[07:29] <Woodi> so which day is features-freeze day ? also: do we have some schema for 6.c errata ?

[07:29] <FROGGS> nine++

[07:29] <FROGGS> there will be a feature-freeze?

[07:30] <llfourn> Woodi: December 17 is the goal for the release

[07:30] <Woodi> FROGGS: I hope :)

[07:30] <FROGGS> Woodi: I don't :o)

[07:30] <nine> FROGGS: considering how many bugreports for rebootstrap were there last night, I think I'm gonna remove it right now.

[07:30] <llfourn> it will be a feature freeze for what is considered 6.0

[07:30] <El_Che> \o/

[07:30] <FROGGS> nine: it was just one ug though

[07:31] <FROGGS> bug*

[07:31] <ShimmerFairy> I hope Perl 6 will always walk a middle-road between "always chaotic" and "never change"; I think a healthy mix of keeping backwards compatibility and breaking it would be best :)

[07:31] <Woodi> yes, but pleas not +-3 days from 24 Dec :) 

[07:32] <nine> ShimmerFairy: don't we have all these lexical features so we don't have to break backwards compatibility?

[07:32] <ShimmerFairy> what are "these lexical features" ?

[07:32] <FROGGS> use v6.d ?

[07:34] <nine> Lexical classes, versioning support, lexical slangs, ...

[07:37] <El_Che> Hi. http://doc.perl6.org/type/IO::Handle#Newline_options describes how to use nl on a open to set a End Of Line marker (aka record). The documentation seems to suggest that not a lot of customizing is possible ("Defaults to "EOL", which implies accepting any combination of "\n", "\r\n" or "\r" or any other Unicode character that has the Zl (Separator, Line) property").In Perl5 I can set $\ to read by a record (eg separated by an empty line l

[07:37] <El_Che> (wow, that was long)

[07:39] <tadzik> hmm, new VS apparently supports Perl

[07:39] <Woodi> wow, snow is falling ! ;)

[07:39] <JimmyZ> .tell [Coke] for history author of specs : git log -p | grep -v Author | grep -v svn | grep -v @@ | grep -v Message | grep -oP '\S*\s*\S*\s*<.+?[a-z0-9]@[a-z0-9].+?>' | sort | uniq 

[07:39] <yoleaux> JimmyZ: I'll pass your message to [Coke].

[07:39] <tadzik> and if we come up with a TextMate-like grammars or so, it would also have Perl 6 support

[07:41] *** vendethiel left
[07:42] <moritz> TimToady: thanks, fixed (typo)

[07:46] <TEttinger> tadzik: visual studio code or visual studio?

[07:46] <TEttinger> the code one is kinda... not great

[07:46] <[Tux]> apart from Inline::Perl5 not being able to install due to Pod::Coverage hang, all seems healthy again

[07:46] <TEttinger> I had a lot of bugs when I tried it

[07:47] <tadzik> TEttinger: the visual-studio, not code

[07:47] <tadzik> the proper one :)

[07:47] <TEttinger> oooh

[07:47] <tadzik> Studio iirc even has perl 6 support

[07:47] <Woodi> yay, int main(int argc, char **argv, char **envp) is standard... didn't know...

[07:47] *** Ch0c0late joined
[07:47] <[Tux]> test             50000    23.073    22.957

[07:47] <[Tux]> test-t           50000    20.640    20.524

[07:47] <[Tux]> csv-parser       50000    26.104    25.988

[07:50] *** domm left
[07:50] <nine> [Tux]: so installing to site by default again fixed your issues?

[07:50] <[Tux]> I still have the ~/.perl6 link, but yes, it looks like that

[07:51] <[Tux]> bin                     40775  2 203 100       4096 Tue 01 Dec 2015 08:28:09

[07:51] <[Tux]> 2015.11-309-gba106f8    40775  4 203 100       4096 Tue 01 Dec 2015 08:39:55

[07:51] <nine> I'm currently working on creating all vendor and site directories at make install instead of at runtime, to ease permission problems

[07:51] <[Tux]> nine++

[07:52] <moritz> whoever did the perl6advent layout: I like it, but the contrast isn't good enough, IMHO

[07:52] *** sno left
[07:52] <[Tux]> .tell jnthn I still have a core dump on utf8-c8, but I now do not have the huge report anymore

[07:52] <yoleaux> [Tux]: I'll pass your message to jnthn.

[07:52] <moritz> gray text is hard to read :(

[07:53] *** kjs_ joined
[07:55] <ShimmerFairy> moritz: also needs a search tool :)

[08:06] *** domm joined
[08:06] *** n0tjack joined
[08:09] *** kjs_ left
[08:10] <CIAvash> Since it's a wordpress blog https://perl6advent.wordpress.com/search/something can be used. But it needs a search input. Apparently the theme shows a search box in 404 page.

[08:11] *** n0tjack left
[08:11] <dalek> rakudo/nom: 13564de | (Stefan Seifert)++ | src/core/Process.pm:

[08:11] <dalek> rakudo/nom: Bring back %CUSTOM_LIB<home>

[08:11] <dalek> rakudo/nom: 

[08:11] <dalek> rakudo/nom: Needs to be a repo-spec, so we can upgrade it to the repository object later.

[08:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/13564de714

[08:11] <dalek> rakudo/nom: f94c31e | (Stefan Seifert)++ | tools/build/Makefile- (2 files):

[08:11] <dalek> rakudo/nom: Create repository directories on make install to fix permission problems

[08:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f94c31e27b

[08:12] <nine> rakudo and panda now work again if you usually do sudo make install :)

[08:12] *** ely-se joined
[08:12] *** rurban joined
[08:13] *** RabidGravy joined
[08:17] <moritz> \o/

[08:20] <RabidGravy> Morning!

[08:20] *** cdg left
[08:22] <El_Che> moritz++ for the advent

[08:24] <moritz> if you want promote it a bit, please retweet https://twitter.com/nogoodnickleft/status/671594909313449984

[08:30] <ShimmerFairy> Finally finished that blog post I mentioned wanting to do earlier: https://shimmeryfairy.wordpress.com/2015/12/01/%E2%99%AAall-that-i-hear-doesnt-feel-right-dont-call-me-til-youre-all-right%E2%99%AB-curi-2/

[08:31] *** uruwi_ joined
[08:33] *** uruwi left
[08:34] <nine> ShimmerFairy: please give rakudo/nom and panda/master a try. The permission problems should be fixed.

[08:35] <ShimmerFairy> Yep, that's what the final note at the bottom mentions :)

[08:36] <nine> ShimmerFairy: if you had invested half of the time of writing the blog post in actually testing the curli branch (it was there in the open all the time!) or adding a couple of lines to Makefile-Moar.in, your blog post would have lost its basis.

[08:36] <moritz> ShimmerFairy: for the record, I'm not very happy with ecoysstem breakage so short before Christmas, breaking it *afterwards* would be much worse

[08:36] *** zakharyas joined
[08:38] *** molaf joined
[08:38] * JimmyZ likes the short break if it will make the future life better :P

[08:39] <moritz> JimmyZ: indeed

[08:39] <moritz> and Christmas without precompilation would be sad too

[08:39] <moritz> like a Christmas without Vanillekipferl

[08:39] <stmuk> nine++ # fixing up stuff quickly

[08:39] <nine> ShimmerFairy: I even asked on this channel what the requirements for merging are and it did fulfill all the requirements that people bothered to name.

[08:39] <JimmyZ> consider why parrot died.

[08:40] <moritz> nine++ indeed

[08:40] <stmuk> we need everyone ounce (gramme) of speed we can get and precomp is welcome

[08:40] <RabidGravy> can't make omelettes, etc, etc

[08:41] <JimmyZ> I like parrot, but it hate break, so it is died :(

[08:41] <stmuk> is there anyway of precomp scripts rather than modules (rather than putting script code in a module)?

[08:41] <ShimmerFairy> nine: well, I didn't catch that, and in general I didn't see calls for urgent testing. Hell, without touching the branch there's no way I could've known that this issue could come up.

[08:42] <lizmat> .botsnack

[08:42] <yoleaux> :D

[08:42] <synbot6> om nom nom

[08:42] <nine> ShimmerFairy: I will return the favor and not even bother to answer to the other points of your blog post. I think I'll rather spend the rest of the day off #perl6

[08:42] <ShimmerFairy> Well, panda still thinks it can't install my Parsefail module (where I'm fairly confident it did, with an https: source url), but it does work :)

[08:43] <lizmat> ShimmerFairy: use the source!

[08:44] <JimmyZ> anyone hates break rakudo should take a look at parrot :P

[08:46] <ShimmerFairy> lizmat: when the problem first came up, I couldn't find a single thing in panda or rakudo that could've broken it, so perhaps I just misremembered do a local  panda install ./  or something. Still seems weird that it has to be git://, not https://

[08:46] * stmuk wonders if aldi and lidil have Vanillekipferl

[08:47] <JimmyZ> good book :  http://www.amazon.com/Parrot-Died-Nancy-Gotter-Gates/dp/0985531304

[08:47] <lizmat> module management has been the elephant in the room for at least the past 3 years

[08:48] <lizmat> I have tried to get attention to it, but nobody wanted to touch it

[08:48] <lizmat> now that there was a sane design finally by someone who knew the ins-and-outs of precomp

[08:49] <lizmat> I tried to work on it, but realised I was completely burnt out on it

[08:49] *** dakkar joined
[08:49] <lizmat> I'm very glad nine took it upon him to implement the design

[08:49] *** sno joined
[08:49] <lizmat> in the past 6 weeks he has worked very hard to make this happen

[08:49] <RabidGravy> nine++ # doing it

[08:49] <lizmat> during this period, I don't think anyone really looked at his work

[08:50] <lizmat> (which is a feeling I recognize from my work on the newio branch)

[08:50] <stmuk> http://www.radiotimes.com/news/2014-07-14/giant-dead-parrot-unveiled-in-london-to-pay-tribute-to-monty-python

[08:50] <RabidGravy> I did look but it scared me so I didn't look again ;-)

[08:50] <JimmyZ> yeah, nine++ # I didn't looked at his branch though :(

[08:50] <lizmat> if you think the curli merge is disrupting, think about when we would have had to do this *after* christmas

[08:51] <lizmat> the mess would have been immeasurable

[08:51] * stmuk had a similar reaction to RabidGravy

[08:51] <lizmat> so instead of complaining on how the merge was done (technically, source wise, or at whatever level)

[08:51] <lizmat> I think it would be more constructive to find out what we need to do to make it work (TM)

[08:52] <ShimmerFairy> nine++ for fixing my bug, regardless of how I feel about the process the last couple days :)

[08:52] <RabidGravy> and fix the broken things in the ecosystem

[08:52] <lizmat> regardless of any purportedly eloquent blog posts

[08:52] <JimmyZ> help it instead of complaining :P

[08:52] *** molaf left
[08:53] <RabidGravy> make all the things work

[08:54] <El_Che> hi, I hear from Fosdem that there may be some spaces left on the maintrack to put "popular devroom speakers" there. With Christmas coming, it may be a good idea?

[08:54] *** molaf joined
[08:54] <ShimmerFairy> lizmat: well, I have pointed out what I needed fixed, and did try poking at rakudo's source to try and figure out what's going on, what it was trying to ask for, but I'm not nearly familiar enough with CURI stuff to have made the fix myself. And I kept going on about it because I couldn't just let such a serious problem get the chance to be ignored.

[08:55] <lizmat> ShimmerFairy: the problem existed for at least 3 years already, it is now finally surfacing, do you really think this would not get fixed asap???

[08:55] <stmuk> its usually best to wait at least 2 days before complaining about breakage (which most of us discover the hard way)

[08:56] <lizmat> if anything, your blog post impedes any fixing, as it has taken all of the -Ofun out of it for many people involved

[08:56] <moritz> (but report immediately)

[08:57] <lizmat> and, whether you like it or not, -Ofun is what fuels the development of Rakudo Perl 6

[08:57] <masak> good morning, #perl6

[08:57] <lizmat> masak o/

[08:57] <Woodi> nine: pleas back...

[08:58] <RabidGravy> I'd already started fixing the fallout by yesterday evening, after seeking out and fixing some Supply fall out during the day

[08:59] <RabidGravy> but hey

[08:59] <ShimmerFairy> lizmat: I do try to not be unreasonable (e.g. I've done my best to not claim that people working on CURI should've been able to predict all the problems), but on the other hand I refuse to pretend to be alright with a problem that, within seconds of trying a new build, reveals that I can't do Perl 6 until it was fixed.

[09:00] * JimmyZ hope this post will be deleted, because developer should be encouraged instead of being complained when they are doing hard work!

[09:01] <ShimmerFairy> lizmat: so on the one hand I don't _want_ to ruin anybody's fun, on the other hand I am not going to mince words when things have gone wrong. (I suppose I got that from my mother ☺)

[09:01] <stmuk> https://github.com/tadzik/rakudobrew/pull/66 is needed 

[09:01] <RabidGravy> anyhow I have a class Foo with a "multi method ACCEPTS(DateTime:D $d)" and DateTime.now ~~ Foo.new works as expected, is the only way of getting Foo.new ~~ DateTime.now to work is to get an ACCEPTS(Foo $f) into DateTime somehow?

[09:02] <RabidGravy> (monkey-patch, apply role to instance etc)

[09:02] <lizmat> re: the problem not being able to install again

[09:02] *** adhoc joined
[09:03] <lizmat> if *ANYBODY* would have taken the effort of trying out the curli branch, they would have known

[09:03] <masak> "ufo is an oooold program from way back, back when panda didn’t even exist, if I recall." -- ShimmerFairy: while that is entirely true, it's also largely irrelevant, as ufo was never in the same niche as panda.

[09:03] <lizmat> nobody did (and that includes myself, for which I'm very sorry)

[09:04] <ShimmerFairy> masak: yes, I was just pointing out my own personal reaction to the times where ufo comes up as a possibly better solution to using modules, because of its age and origin in the pre-module-manager days :)

[09:04] *** joli joined
[09:05] <masak> ShimmerFairy: your post comes over as very irate and quite unhelpful.

[09:05] *** joli is now known as Guest61878

[09:06] *** Guest61878 is now known as aigan

[09:06] <lizmat> .oO( seeing a sentence with quite and irate, makes me realize every sperm is sacred )

[09:06] <masak> ShimmerFairy: I skimmed it to check whether it was as bad as lizmat claimed, and I think it is. I'm a bit saddened that you would spend all that time on a long post to effectively bad-mouth some ongoing development.

[09:06] *** quester left
[09:07] <masak> ShimmerFairy: instead of, say, helping. :/

[09:07] <lizmat> or at least, create tickets!

[09:07] *** n0tjack joined
[09:07] <ShimmerFairy> masak: like I've said, I tried to be as helpful and restrained as possible, but the irate nature was intentional (most concentrated in the rebase part, in my view), since the whole ordeal feels like a bad screw-up in procedure.

[09:07] <ShimmerFairy> lizmat: I did create a ticket for my problem, so it's at least not my problem that others' problems weren't similarly handled.

[09:07] <masak> ShimmerFairy: I stopped reading at "fucking rebase", because it was clear to me you don't know what you're talking about with that one.

[09:08] <masak> ShimmerFairy: becoming upset about a merge actually being a rebase (for a branch you didn't contribute to yourself) is bad manners, and unhelpful.

[09:09] <stmuk> actually still ufo is useful when panda breaks :)

[09:10] <ShimmerFairy> masak: I'm still open to being shown where I stupidly missed the merge commit, and I did admit in that section that it's an overreaction because it was discovered in the context of "and now I can't even undo the 'merge' if I wanted to. Cool."

[09:11] <ShimmerFairy> (and I don't think my lack of contribution to the branch makes me less qualified to mention how bad it is to rebase publicly-pushed commits)

[09:11] <masak> ShimmerFairy: once you get a bit more experience with Git, you will realize that it's not all that bad and that you were indeed overreacting.

[09:11] *** n0tjack left
[09:11] <masak> ShimmerFairy: until then, I would advise you to be a bit less alarmist about things.

[09:12] <masak> ShimmerFairy: because it's not helping. I'd prefer you do things that are helping.

[09:12] <ShimmerFairy> masak: in this case, with a big feature that might need reversion, it was a mistake. I can only imagine how messy it would've been had I rebased instead of merged my allomorphs work when it turned out to be too slow still.

[09:13] <masak> it's not such a big deal.

[09:13] <masak> commits branches that were rebased can be reverted just as much as merges.

[09:13] <masak> reverting a merge commit is its own "fun" can of worms.

[09:14] <dalek> roast: 8b16ee6 | lizmat++ | S02-types/range.t:

[09:14] <dalek> roast: Add some Range.rand tests

[09:14] <dalek> roast: review: https://github.com/perl6/roast/commit/8b16ee66c8

[09:14] <JimmyZ> https://shimmeryfairy.wordpress.com/2015/12/01/%E2%99%AAall-that-i-hear-doesnt-feel-right-dont-call-me-til-youre-all-right%E2%99%AB-curi-2/comment-page-1/#comment-12 # my comments on this post :(

[09:16] <ShimmerFairy> masak: true, and reverting that merge a while back showed me how "fun" that can be, but regardless one merge commit is easier to handle than dozens of rebase commits :)

[09:16] *** bpmedley left
[09:16] <RabidGravy> tum-ti-tum

[09:17] * RabidGravy rudely augments DateTime

[09:27] *** vytas joined
[09:29] <masak> ShimmerFairy: your post stands out as a wild unnecessary rant that's obviously wounding people in the project who did good work, and is inviting outsiders to (unnecessarily) get a bad opinion about the Rakudo project. it's not doing much in the way of being constructive.

[09:29] <masak> ShimmerFairy: I guess what I'm saying is, please remove the post. or large parts of it. or rewrite it when you're feeling better.

[09:30] <masak> it is possible to use rants for great good. but that's not the way.

[09:31] <JimmyZ> masak: +1 , I am not hope this post make some people leaving #perl6

[09:31] <masak> :(

[09:31] <lizmat> masak: +1

[09:32] <ShimmerFairy> masak: what perplexes me is that I thought I was doing a good job of not sounding too angry (except for the part about rebasing, where I fully admit to not trying to be reasonable so much). I tried my best to listen to diakopter's advice when I mentioned wanting to write a rant post.

[09:32] <masak> definitely not doing a good job of not sounding too angry

[09:33] <btyler> ShimmerFairy: agree, that blog post is pretty dang blame-heavy and unconstructive

[09:34] *** xfix left
[09:34] <masak> lizmat++ FROGGS++ nine++ others++ # work on modules

[09:34] <btyler> totally understand being annoyed about software breaking when a disruptive branch lands, but yelling at volunteers isn't the way to make the situation better

[09:34] <lizmat> purport: appear to be or do something, especially falsely

[09:34] <masak> of course there are rough edges. and of course we still have ways to go with process.

[09:35] <Woodi> ShimmerFairy: I once bashed our ex-Prime Minister in very rude way on FB. then I apologised. I still thinking he is traitor - can be wrong on this - but still my post was was made in very sub-quality way... such life, hierarchy is important thing

[09:35] <stmuk> IRC is a better place to whine than blogs or talks IMO

[09:35] <masak> "it's hard to get others to look at my branch" should come as a surprise to no-one. we can get better in various ways.

[09:35] <ShimmerFairy> .tell Mouq now that I can use perl6, I'm also seeing the same strange parse fail in SUPERNOVA's test.p6 that wasn't there pre-CURI. Weird, I'll have to look into it when I have time.

[09:35] <yoleaux> ShimmerFairy: I'll pass your message to Mouq.

[09:35] <JimmyZ> ShimmerFairy: I replied you reply ;)

[09:35] <lizmat> afk for a few hours (and no, this has nothing to do with ShimmerFairy) &

[09:36] <btyler> (on a happier note: lizmat! missed you at AmsterdamX last night -- someone wrote a perl6 SQL schema change linter using grammars at the hackathon last week :)

[09:36] <masak> "While perhaps in another mood I’ll be willing to add some kind of warning/disclaimer to the top of the post, I won’t delete this post." -- ShimmerFairy: I hope you will reconsider.

[09:36] <lizmat> btyler: between CruiseToTheEdge, T-Dose, Amsterdam.pm and LPW, we just had to drop one meeting :-(

[09:36] <Hotkeys> Yeah I whined about the repl being broken in windows for at least a week before fixing it with help

[09:36] <btyler> no worries, you guys keep a crazy schedule :)

[09:36] <Hotkeys> Irc is good for it

[09:37] <masak> ShimmerFairy: half a dozen people have now kindly asked you to delete the post. please consider that.

[09:37] <masak> ShimmerFairy: you can put it up as a private gist or something for posterity.

[09:37] *** abraxxa joined
[09:39] <masak> ShimmerFairy: I'm just dreading that perl weekly or something will pick it up and go "oh, looks like the Perl 6 people are having some process problems of late" and your post will be disseminated far beyond what it deserves and create further bad assumptions among barely-involved outsiders.

[09:39] <masak> I'm not saying it makes the cut for inclusion in perl weekly at all, but it's still a risk.

[09:40] *** Nei joined
[09:40] <Nei> !@% I symlinked rakudobrew to my ~/bin and it wiped my bin folder ;(

[09:40] <ShimmerFairy> Well, I am considering taking down the post for "this isn't helping" reasons, but not for "what if this mess-up in the past couple days gets a bit more publicity" reasons. I still think it's a real problem that really happened, so I'm not concerned if more people than average become aware of it.

[09:44] <masak> yes, then please take it down for "this isn't helping" reasons

[09:44] <masak> the second reason would just be that too, but to a bigger audience :/

[09:45] <JimmyZ> ShimmerFairy: please see my second reply ;)

[09:45] <masak> I second JimmyZ's second reply :)

[09:45] <ShimmerFairy> JimmyZ: don't worry, I did, I get emailed on replies :)

[09:48] <RabidGravy> hey, let's get fixing things

[09:48] <Ulti> with =~= in mind is a +- operator that creates a range around an integer a worthwhile operator? So you can do stuff like if $thing ~~ $int +- 5 {}

[09:48] <stmuk> odd travis error with "panda not found" I had to hardcode a path to fix it but not sure why .. maybe a travis change rather than rakudo

[09:50] <El_Che> ShimmerFairy: I think your first reason is a valid reason (showing your good faith). About the second, I think this channel is a valid forum for that kind of discussions.

[09:50] <nadim> good morning, is it possible to have map extract arguments to the code block? I understand it is done when the code block is passed by reference but I wonder if one can do some thing like this: @.map: -> (a, $b, $c) { ...}

[09:52] <RabidGravy> stmuk, travis has been shagged for a few days, it went through a period of timing out on some random test

[09:52] *** Guest51288 joined
[09:52] <RabidGravy> nadim, yes

[09:54] <JimmyZ> ShimmerFairy: Thank you ;)

[09:54] *** brrt joined
[09:56] <RabidGravy> m: my @a = [<a b c>, <A B C>];  @a.map( -> $z ($a, $b, $c) { "$a - $b - $c"})>>.say ; # nadim

[09:56] <camelia> rakudo-moar f94c31: OUTPUT«a - b - c␤A - B - C␤»

[09:56] <RabidGravy> perl6++ # things of beauty

[09:56] <El_Che> If I want to give a hint to rakudo to free some memeory is it a good idea to @big_array = Nil ?

[09:56] <nadim> indeed

[09:58] <JimmyZ> nqp::force_gc ?

[09:58] *** csd_ joined
[10:02] *** sitaram left
[10:02] *** yeahnoob left
[10:03] *** csd_ left
[10:06] <sergot> hmm

[10:07] <sergot> does travis fail with p6 projects, or is it just me?

[10:07] <sergot> at least with those which use panda

[10:08] <masak> sergot: travis hasn't complained about 007, at least

[10:08] *** n0tjack joined
[10:09] <sergot> just pushed something, let's see

[10:10] *** espadrine joined
[10:10] *** CIAvash left
[10:11] <sergot> masak: 007, doesn't use panda, so it won't fail

[10:11] <sergot> /home/travis/build.sh: line 45: panda: command not found

[10:11] <sergot> 2 projects I've checked fail

[10:11] <timotimo> o/

[10:12] <sergot> hi timotimo !

[10:12] *** n0tjack left
[10:13] <brrt> ohai timotimo

[10:13] <stmuk> maybe its the shim code

[10:13] <stmuk> I have /bin/sh: 6: /home/travis/.rakudobrew/bin/panda: not found 

[10:14] <timotimo> travis isn't panda-happy at the moment, indeed

[10:14] <stmuk> ==> Please make sure that inst#/home/travis/.perl6/2015.11-282-gaf4d62e/bin is in your PATH

[10:14] <stmuk> Updating shims

[10:15] <timotimo> yeah

[10:15] *** rindolf joined
[10:15] <timotimo> it uses that interesting path to install in nowadays

[10:15] *** bpmedley joined
[10:16] <sergot> wow

[10:17] *** Ch0c0late left
[10:18] <timotimo> stmuk: -282 is quite a bit old already

[10:18] <timotimo> stmuk: can you ping travis again about this?

[10:18] <nadim> Any document about the piping ops (===>) that maybe cure my blues of not being able to do >> on arrays.

[10:19] <timotimo> dj_goku: i'm around now. i fear you might not be, though

[10:19] *** telex left
[10:20] <timotimo> nadim: worst-case you'll find info in the design.perl6.org and the spec test suite under perl6/roast

[10:20] *** telex joined
[10:21] *** lustlife joined
[10:26] <timotimo> ==> Please make sure that inst#/home/timo/perl6/install/share/perl6/site/bin is in your PATH

[10:27] *** CIAvash joined
[10:37] <nadim> timotimo: thanks, knowing the name of the operator (feed) did help a bit with the search, I need to find out if it cann feed in a code block, not supported is the message I get, next stop the test suite :)

[10:37] <timotimo> oh, i neglected to point out the name

[10:39] <masak> oh, 'inst#/', eh? :)

[10:39] <masak> I guess that's not actually part of the path, though. more like some namespace thingy.

[10:43] <brrt> is panda still dead?

[10:43] *** krakan left
[10:43] <brrt> i should have hoped it lived now

[10:43] <ShimmerFairy> nine, masak, JimmyZ, et. al.: https://shimmeryfairy.wordpress.com/2015/12/01/sorry/

[10:44] <timotimo> brrt: panda is rather happy today

[10:44] *** rudi_s_ joined
[10:44] <timotimo> brrt: i created new ops in the jit and didn't fail horribly! isn't that grate!

[10:44] <brrt> yay!

[10:44] <brrt> timotimo++

[10:44] <brrt> (i vaguely renember seeing that :-))

[10:45] <rudi_s_> Hi. I'm trying to use NativeCall with the following function from PAM: int pam_start(const char *service_name, const char *user, const struct pam_conv *pam_conversation, pam_handle_t **pamh); The problematic part (besides not being typesafe) is the pamh argument. How do I model that with NativeCall?

[10:45] <moritz> rudi_s_: preferably as an OpaquePointer

[10:45] <timotimo> rudi_s_: well, if you have a class PamH is repr('OpaquePointer') {} you can have Pointer[PamH] for **pamh

[10:46] <moritz> rudi_s_: that is, if you just pass it between pam_ functions without ever dereferncing

[10:46] <rudi_s_> But how does it differentiate between **pamh and *pam_conversation?

[10:46] <timotimo> brrt: this one's a good candidate for inclusion in the exprjit, too. but usages of it don't happen at the start of blocks. but it could potentially keep us from having to getlex twice for "$foo = $foo + 1"

[10:46] <moritz> rudi_s_: does it need to?

[10:46] <rudi_s_> From the docs I only found out how to use simple pointers, like struct pam_conv *pam_conversion.

[10:46] <brrt> oh, fwiw, i got a cannot invoke this object error for t/04-nativecall/cpp.t, linux/x64/master/master/nom

[10:46] *** lustlife` joined
[10:46] <brrt> which one are we talking about timotimo

[10:46] <moritz> rudi_s_: it's all just a pointer, so 64bit

[10:46] <rudi_s_> moritz: It's a pam_handle_t **pamh, so it will write to the pointer.

[10:47] <timotimo> brrt: the sp_deref_bind and sp_deref_get ones

[10:47] <brrt> all of it is going to the expression jit sooner or later

[10:47] <brrt> ah

[10:47] <moritz> rudi_s_: do you ever need to dereference that pointer in the Perl 6 code at all?

[10:47] <brrt> oh, you implemented those?

[10:47] <brrt> cool

[10:47] <brrt> i was going to say

[10:47] <brrt> *ahem*

[10:47] <timotimo> those are the ones i implemented, yes :)

[10:47] <rudi_s_> moritz: No. I don't. But the C function will do that.

[10:47] <timotimo> not for the exprjit, though

[10:47] <moritz> rudi_s_: then all you have to care is that it's a pointer

[10:47] <moritz> rudi_s_: and OpaquePointer is precisely for that use case

[10:47] <timotimo> actually

[10:48] <brrt> you could also simply use sp_get_i64 and friends to implement the same, provided you tag the intermediary results as an integer rather than an object pointer

[10:48] <timotimo> wouldn't the **pamh say something like "i'm going to change the value of that *pamh for you"?

[10:48] <rudi_s_> Yes.

[10:48] <rudi_s_> Which is my problem.

[10:48] <moritz> ah

[10:48] <brrt> timotimo++ at any rate

[10:48] <timotimo> in that case you want "PamHandleT $pamh is rw" in your signature, i think

[10:48] <moritz> rudi_s_: is there any pam function that initializes such a handle

[10:48] <moritz> ?

[10:48] <nine> ShimmerFairy: thanks!

[10:48] <timotimo> moritz: i think pam_start *is* the function that does that

[10:48] <rudi_s_> moritz: Yes. This function.

[10:48] *** lustlife` left
[10:49] <moritz> ah, but it doesn't return it

[10:49] <moritz> how nasty

[10:49] *** vytas left
[10:49] <rudi_s_> Yeah, many C API functions do that.

[10:49] <arnsholt> Yeah, it's a pretty standard pattern for C

[10:49] <moritz> rudi_s_: I'm spoiled by the sqlite and postgres C APIs, which are *very* friendly to FFIs :-)

[10:50] <nine> ShimmerFairy: please feel free to ping me about any remaining issues you see. But please keep in mind that I do in fact sleep pretty much every day and that I live in UTC+1.

[10:50] <rudi_s_> Well .. what do I now?

[10:50] *** lustlife left
[10:50] <moritz> rudi_s_: what timotimo said

[10:50] <mrf_> nine: You sleep....How rude :D

[10:51] <rudi_s_> moritz: Ah.

[10:51] <rudi_s_> Can I find documentation for that?

[10:51] <rudi_s_> http://doc.perl6.org/language/nativecall is not that helpfull.

[10:51] <moritz> huh, that doesn't mention "is rw"

[10:51] <moritz> we should fix that

[10:51] <rudi_s_> Yeah.

[10:51] <arnsholt> Yeah, the NativeCall docs are woefully inadequate, sadly

[10:52] <JimmyZ> ShimmerFairy: Thank you for your understanding  :P

[10:52] <rudi_s_> timotimo: How do I create PamHandleT? class PamHandleT is repr('CPointer') { }?

[10:52] <arnsholt> The best overview is probably the tests, sadly

[10:52] <rudi_s_> arnsholt: Can you give me a link to the tests?

[10:53] <moritz> rudi_s_: I opened https://github.com/perl6/doc/issues/216 for the lack of docs

[10:53] <arnsholt> https://github.com/rakudo/rakudo/tree/nom/t/04-nativecall

[10:53] <timotimo> rudi_s_: that's one way, yes

[10:53] <rudi_s_> timotimo: Is there a better/another way?

[10:53] <rudi_s_> arnsholt: Thanks.

[10:54] <timotimo> it'd be fine to have "constant PamHandleT = OpaquePointer"

[10:54] <RabidGravy> I actually thought the nativecall docs were reasonably good, I've only had occassion to improve them a couple of times

[10:54] <arnsholt> I'd recommend having it as a separate class

[10:54] <arnsholt> 'Cause then you can attach methods and such to it

[10:54] <RabidGravy> yeah, I'd go with that

[10:55] *** vytas joined
[10:55] <nadim> I find references of "caller" in some P6 docs but I get "undeclared routine", where is the caller information?

[10:56] <rudi_s_> Thanks, will do.

[10:56] <brrt> .tell rjbs i'm trying to get a solaris/illumos vm running, so far without success, because smartos etc. expect weird things from me, like a dns search host, and i have no idea what that all means

[10:56] <yoleaux> brrt: I'll pass your message to rjbs.

[10:56] <brrt> if *anybody* could help me get illumos on a vm, i'd be very very happy to check out the jit

[10:56] <RabidGravy> rudi_s_, see e.g. https://github.com/jonathanstowe/Audio-Libshout/blob/master/lib/Audio/Libshout.pm#L389 for what arnsholt is proposing

[10:58] <rudi_s_> Thanks.

[10:58] <timotimo> nadim: there is the CALLER:: namespace

[10:58] <El_Che> brrt: hi, I have a solaris background (although no more solaris on new job). Also, if you need solaris access for Perl6, I can point you in the right direction to get access to sparc and x64 machines

[10:59] <timotimo> m: sub foo() { say CALLER::&ROUTINE }; sub bar() { foo() }; bar()

[10:59] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MCc7eIo42T␤Malformed lookup of ::&ROUTINE; please use ::('&ROUTINE'), ::{'&ROUTINE'}, or ::<&ROUTINE>␤at /tmp/MCc7eIo42T:1␤------> 3sub foo() { say CALLER7⏏5::&ROUTINE }; sub bar() { foo() }; bar()␤»

[10:59] <timotimo> m: sub foo() { say CALLER::('&ROUTINE') }; sub bar() { foo() }; bar()

[10:59] <camelia> rakudo-moar f94c31: OUTPUT«No such symbol 'CALLER::&ROUTINE'␤  in sub foo at /tmp/4VfGKNZ4jI:1␤  in sub bar at /tmp/4VfGKNZ4jI:1␤  in block <unit> at /tmp/4VfGKNZ4jI:1␤␤Actually thrown at:␤  in sub foo at /tmp/4VfGKNZ4jI:1␤  in sub bar at /tmp/4VfGKNZ4jI:1␤  in block…»

[10:59] <timotimo> m: sub foo() { say CALLER::('&?ROUTINE') }; sub bar() { foo() }; bar()

[10:59] <camelia> rakudo-moar f94c31: OUTPUT«No such symbol 'CALLER::&?ROUTINE'␤  in sub foo at /tmp/WjjQGBLgXH:1␤  in sub bar at /tmp/WjjQGBLgXH:1␤  in block <unit> at /tmp/WjjQGBLgXH:1␤␤Actually thrown at:␤  in sub foo at /tmp/WjjQGBLgXH:1␤  in sub bar at /tmp/WjjQGBLgXH:1␤  in bloc…»

[10:59] <timotimo> ...

[10:59] <timotimo> what's it called again?

[10:59] <nadim> timotimo: thanks

[11:00] <timotimo> do note that you're only allowed to access variables that are marked "is dynamic" or have a * twigil from the CALLER::  ... that or pseudo-variables

[11:02] <RabidGravy> I'm being thick right now, how do you say "an array where all of the values are in this range" in a sub signature?

[11:02] *** xinming_ joined
[11:02] <timotimo> @foo where { all($_) ~~ 1..10 } would work

[11:03] <RabidGravy> ah ha!

[11:04] <nadim> timotimo: I went loooking for documentation about CALLER while you weretesting here. no much luck googling Perl6 caller namespace! what I want is information about the call site of the routine I am in.

[11:05] <RabidGravy> m: say callframe.perl

[11:05] <camelia> rakudo-moar f94c31: OUTPUT«CallFrame.new(level => 2, annotations => {:file("/tmp/xR50JP7FQ7"), :line("1")}, my => Map.new(("!UNIT_MARKER" => !UNIT_MARKER,"\$!" => Nil,"\$/" => Nil,"\$=finish" => Mu,"\$=pod" => [],"\$?PACKAGE" => GLOBAL,"\$_" => Any,"\$¢" => Nil,"::?PACKAGE" => GLOB…»

[11:05] <nadim> if that is with ROUTINE, where are all these defined, I guess that there are more interesting ones.

[11:05] *** molaf left
[11:05] <RabidGravy> or something like that

[11:06] *** xinming left
[11:06] <timotimo> right, "caller" is supposed to be a function

[11:07] <timotimo> m: sub a_sub { b_sub }; sub b_sub { try say caller.subname }; b_sub

[11:07] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/nCTIkWMmvs␤Undeclared routine:␤    caller used at line 1␤␤»

[11:07] <timotimo> i suppose rakudo doesn't run S06/advanced/caller.t at all in its spectest.data

[11:08] *** molaf joined
[11:08] <jnthn> Well, that made depressing backlogging :/

[11:08] <yoleaux> 07:52Z <[Tux]> jnthn: I still have a core dump on utf8-c8, but I now do not have the huge report anymore

[11:09] *** n0tjack joined
[11:09] * RabidGravy hands jnthn a pony

[11:10] <sergot> does anyone know what is lib/.precomp?

[11:11] <jnthn> ShimmerFairy: Thank you for apologizing. Please remember that taking on the really difficult tasks that need doing here is already hard enough, the people doing them are human, and if we create a culture of making people think twice before taking on such work then we'll just end up without those things getting done.

[11:11] <RabidGravy> jnthn++

[11:11] <stmuk> jnthn++

[11:11] <|Tux|> jnthn++

[11:11] <nine> sergot: I think, I do

[11:11] <nadim> RabidGravy: say callframe.perl  did not work here: Can't find method 'perl'.   but using callframe on its own works likish  P5 caller

[11:12] <RabidGravy> sergot, it's a sort of temporary inst# repository for the precompilation

[11:12] <sergot> nine: I got a problem with this - everytime I change a file and want to run test in my project I got something like: Missing or wrong version of dependency

[11:13] *** n0tjack left
[11:13] <sergot> also, installing panda failed on my box

[11:13] <jnthn> sergot: In theory it's meant to be looking at the file modification times to know the precomps are invalid.

[11:14] <sergot> is this a new feature?

[11:14] <jnthn> sergot: I'm guessing it is doing that, but getting something slightly wrong.

[11:14] <jnthn> Yes

[11:14] <nine> sergot: does it work after you delete lib/.precomp?

[11:14] <nine> work at least once?

[11:14] *** Nei left
[11:16] <rudi_s_> What is difference between Pointer and OpaquePointer?

[11:16] <sergot> nine: it does

[11:16] <timotimo> you can use Pointer like Pointer[int64] or Pointer[Somestruct]

[11:16] <sergot> after deleting .precomp

[11:16] <timotimo> whereas OpaquePointer doesn't let you do many things

[11:17] <rudi_s_> Ah, thank you.

[11:17] <timotimo> i *think* you can only do pointer arithmetic on Pointer[...] and not OpaquePointer

[11:17] <timotimo> because then you need to know the size of the thing pointed to

[11:17] <nine> sergot: does it work only once, or does it still work after you make additional changes?

[11:18] <sergot> nine: it works only once, I need to rm .precomp everytime I want it to work

[11:20] <nine> sergot: ok, then the modification timestamp check is faulty. What system are you on?

[11:20] <jnthn> sergot: If you run it a second time without chanigng anything, it still works? It breaks on first modification?

[11:20] <rudi_s_> Where can I find docs about creating a struct which contains a function pointer? E.g. struct pam_conv { int (*conv)(int num_msg, const struct pam_message **msg, struct pam_response **resp, void *appdata_ptr); } .. };

[11:21] <sergot> give me a sec

[11:24] <sergot> jnthn: it works after a second change

[11:25] <sergot> nine: Ubuntu 14.04: Linux c51255 3.13.0-68-generic #111-Ubuntu SMP Fri Nov 6 18:17:06 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux

[11:25] <gfldex> m: my enum E (:E1(0), :E2); sub f($p); f(E2);

[11:25] <camelia> rakudo-moar f94c31: OUTPUT«===SORRY!===␤Incompatible MROs in P6opaque rebless␤»

[11:26] <sergot> jnthn: I have new discoveries, give me a sec

[11:26] <sergot> jnthn: it fails on first run, works on second one

[11:26] *** Celelibi left
[11:26] <sergot> yes

[11:27] *** dayangkun left
[11:27] *** Celelibi joined
[11:28] *** rurban left
[11:29] <tadzik> damn, LPW looks interesting

[11:30] <timotimo> there will be at least one rant talk about perl6!

[11:31] <RabidGravy> tadzik, found one breakage from curli changes https://github.com/tadzik/JSON-Unmarshal/pull/14

[11:33] <rudi_s_> Does NativeCall support function pointers?

[11:33] <rudi_s_> *as members/variables

[11:33] <JimmyZ> I always saw "Missing or wrong version of dependency" before :)

[11:34] <JimmyZ> which means I need `git clean -xdf` for rakudo 

[11:36] *** cognominal_ joined
[11:39] <sergot> jnthn: also, sometime after the "Missing" error/warning it hangs and after a time it continues working well

[11:40] *** cbk left
[11:42] <mrf_> tadzik: yeah it should be fun. Mostly looking forward to socializing more than the talks

[11:43] <tadzik> not sure if I'll be able to come, but I'd very much like to see the talks :)

[11:44] <nine> sergot: can you upload the code somewhere so I could have a closer look?

[11:46] <sergot> nine: github.com/masak/007 :)

[11:46] <stmuk> there will be at least one lightening talk on perl6 as well at LPW!

[11:47] * mrf_ is pleased that there are talks on P6

[11:47] *** cbk joined
[11:47] <sergot> I just try to change a file, and run tests after the change. look at branch builtins maybe

[11:48] *** rurban joined
[11:49] <sergot> nine: for example, in lib/_007/Runtime/Builtins.pm change line 161 (on branch builtins) and then run perl6 -Ilib t/features/builtins/operators.t

[11:51] <lucs> I was having panda problems too yesterday -- I just pulled the recent source (as well as rakudo's, which I just rebuild), do I just need to 'bootstrap.pl' now?

[11:51] <lucs> *rebuilt

[11:52] *** g4 joined
[11:53] <nine> lucs: yes

[11:53] <RabidGravy> rudi_s_, not directly no

[11:54] <lucs> nine: Thanks.

[11:55] <nine> sergot: I can reproduce it here!

[11:55] <nine> sergot: may be connected to both the test file and _007::Test using Test

[11:56] *** ShimmerFairy left
[11:56] <rudi_s_> RabidGravy: I see, thanks. Then I'll have to come up with a workaround.

[11:56] *** Skarsnik joined
[11:57] <sergot> nine: hmm, that's interesting

[11:58] <RabidGravy> function callbacks do work, do maybe a small piece of C code that is passed a callback and returns the pointer, then "has Pointer $.func;" in the class

[11:58] <lucs> nine: The install is failing with "already installed" -- was I supposed to do something else, and/or would you like to see the detailed error?

[11:59] <nine> lucs: oh sorry, I was confused. Actually you shouldn't need to bootstrap anymore. panda should still work. The first run will probably take a lot longer due to precompilation happening.

[12:00] <lucs> Ah, okay. Hmm... So what should I do after pulling the recent source?

[12:00] <rudi_s_> RabidGravy: Will try that. Thanks.

[12:02] <arnsholt> rudi_s_: Do you need to invoke a function pointer, or pass a callback function?

[12:03] <arnsholt> Or just pass it around?

[12:03] <nine> lucs: oh my. I should really take more time for reading. There's no need for bootstrap after upgrading rakudo. Of course, you need to upgrade panda after pulling. Which it won't let you because it says, that the same version is already installed.

[12:03] *** rindolf left
[12:03] <moritz> can we generate a version from git?

[12:03] <nine> lucs: I think, we need a --force flag in panda for such situations. Or start doing versioning for real.

[12:04] <nine> moritz: git describe should give something useful, but that won't help with uncommitted local changes. Such as during panda development.

[12:04] <moritz> nine: right

[12:04] *** muraiki joined
[12:04] <nine> moritz: same reason install-core-dist.pl now forces installation

[12:04] <lucs> nine: For now, could I just delete a bunch of files or something and try the bootstrap again?

[12:05] <nine> lucs: yes, delete ~/.perl6/* and rakudo/install/share/perl6/* and do make install in rakudo again

[12:05] <lucs> nine: Okay, thanks. Trying...

[12:07] *** cbk left
[12:08] <stmuk> how do I work around the "already installed" if I'm test installing my own stuff locally?

[12:08] <stmuk> with panda I mean

[12:09] *** n0tjack joined
[12:09] <nine> stmuk: what I told lucs just now

[12:10] <stmuk> oh :)

[12:10] <lucs> nine: Okay, that worked fine. I'll try to install a module, but first, coffee! (back in a few minutes...)

[12:10] <nine> stmuk: or simply add the --force flag to panda. CompUnit::Repository::Installation::install already supports :force. It just needs to be hooked up

[12:10] *** csd_ joined
[12:11] <stmuk> dtrace: failed to execute panda: dtrace cannot control executables signed with  restricted entitlements

[12:11] <stmuk> wtf

[12:11] <RabidGravy> m: my Range $r = 0 .. 59; say $r.grep( * %% 2); # I don't surprise there is a sekrit operator that does that

[12:11] <camelia> rakudo-moar f94c31: OUTPUT«(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58)␤»

[12:11] <RabidGravy> suppose

[12:11] <stmuk> apple--

[12:12] <jnthn> restricted entitlements? o.O

[12:13] *** cbk joined
[12:14] *** kid51 joined
[12:14] *** n0tjack left
[12:15] *** csd_ left
[12:19] <lucs> nine: Turns out I'm getting the -- one of actually :) -- same problem as yesterday: "==> Testing Pod::Coverage" hangs (while doing "panda install Linenoise")

[12:20] <lucs> nine: I will have more info for you soon.

[12:20] <stmuk> I can't use apple dtrace on any /bin/sh scripts .. I have to replace all the shebang lines with my own compiled shell!

[12:20] * stmuk swears and rants at apple

[12:23] <RabidGravy> boom!

[12:24] * masak read that as "* stmuk swears and rants at an apple"

[12:24] <stmuk> hmmm I guess I can work around with a chroot

[12:26] *** csd_ joined
[12:26] <grondilu> my panda dies with:

[12:26] <grondilu> ===SORRY!===

[12:26] <grondilu> Could not find Shell::Command:ver<True>:auth<True>:api<True> in:

[12:27] <grondilu> (followed by various install path)

[12:27] <stmuk> or disable with some work :/

[12:27] <nine> grondilu: are you on current master of rakudo and panda?

[12:28] <brrt> restricted entitlements? :-o

[12:28] * brrt had never heard of such a thing

[12:28] <stmuk> http://internals.exposed/blog/dtrace-vs-sip.html

[12:30] *** csd_ left
[12:31] *** RabidGravy left
[12:33] *** lucasb joined
[12:35] <lucs> nine: http://fpaste.scsys.co.uk/502212

[12:37] *** zakharyas left
[12:38] <nine> The bottom part of the POD::Coverage backtrace: https://gist.github.com/niner/01c1c7109a79b110aa06

[12:39] <nine> lucs: The "Could not find Pod::Coverage" is because read_pod runs a new process but doesn't pass on the -I flag to perl6. I don't see how that could have worked even before curli.

[12:39] <masak> ShimmerFairy++ # https://shimmeryfairy.wordpress.com/2015/12/01/sorry/

[12:40] <lucs> nine: Hmm... Yet, did it not use to work?

[12:41] <lucs> nine: Just saying; I'm just a luser trying to get the stuff to run :)

[12:41] <rudi_s_> arnsholt: I need to store a function pointer in a struct (and pass that struct to a function).

[12:42] <nine> lucs: https://github.com/teodozjan/pod6-coverage/issues/16 could be read as "the problem has existed before"

[12:43] <lucs> nine: Oh :/

[12:44] <lucs> Am I the only one who can't install Pod::Coverage/Linenoise?

[12:44] <lizmat> fwiw, Pod::Coverage hangs for me as well

[12:44] <rudi_s_> Hm, how do I model a **foo. I have const struct pam_message **msg and I do have a class PamMessage { ... } and need to model that as callback, so I later have to dereference this twice.

[12:45] <nine> Posted my information at https://github.com/teodozjan/pod6-coverage/issues/20

[12:45] <rudi_s_> Can I do something like Pointer[Pointer[PamMessage]]?

[12:45] <arnsholt> rudi_s_: Then you can just make the function pointer an OpaquePointer

[12:46] <sergot> m: "One slide with <em>italics</em> in it.".split(/'<'(\w+)'>'.*?'</'$0'>'/, :all)

[12:46] <camelia> rakudo-moar f94c31: ( no output )

[12:46] <sergot> m: "One slide with <em>italics</em> in it.".split(/'<'(\w+)'>'.*?'</'$0'>'/, :all).perl.say;

[12:46] <camelia> rakudo-moar f94c31: OUTPUT«("One slide with ", " in it.")␤»

[12:46] <arnsholt> Your PamMessage class is already a struct pam_message *, so one level of Pointer is enough to make it a pointer-pointer

[12:46] *** kid51 left
[12:47] <sergot> looks like :all doesn't work, am I right?

[12:48] <lizmat> sergot: it's :v nowadays

[12:48] <masak> sergot: it's supposed to also capture the '<em>italics</em>' part, right?

[12:48] <masak> ooh

[12:48] <masak> ok, let's fix it :)

[12:48] <lizmat> it was deprecated for about 2 weeks, and I removed the deprecation in light of 6.c

[12:48] <sergot> lizmat++ thanks a lot!

[12:49] <lizmat> sergot: fwiw, you can now also specify :k, :kv and :p

[12:50] <sergot> lizmat++: ooh, nice! this is very useful for me right now :)

[12:50] <lizmat> ah, and :skip-empty

[12:51] <rudi_s_> arnsholt: Ah, so just Pointer[PamMessage]?

[12:51] <lizmat> "If specified, do not return empty strings before or after a delimiter"

[12:52] <lizmat> fwiw, the Str.split doc is up to date  :-)

[12:54] <sergot> lizmat++: great! will read, thanks again! :)

[12:55] *** TEttinger left
[12:56] <arnsholt> rudi_s_: Yup.

[12:58] <rudi_s_> Thanks.

[12:58] *** lustlife joined
[13:00] *** Gruber is now known as Grrrr

[13:01] <sergot> m: "One slide with <em>italics</em> in it.".split(/'<'(\w+)'>'.*?'</'$0'>'/, :v).perl.say;

[13:01] <camelia> rakudo-moar f94c31: OUTPUT«("One slide with ", Match.new(ast => Any, list => (Match.new(ast => Any, list => (), hash => Map.new(()), orig => "One slide with <em>italics</em> in it.", to => 18, from => 16),), hash => Map.new(()), orig => "One slide with <em>italics</em> in it.", to =…»

[13:01] <sergot> m: "One slide with <em>italics</em> in it.".split(/'<'(\w+)'>'.*?'</'$0'>'/, :k).perl.say;

[13:01] <camelia> rakudo-moar f94c31: OUTPUT«("One slide with ", 0, " in it.")␤»

[13:02] <lizmat> sergot: :k only really makes sense if you're using multiple string needles

[13:02] <Skarsnik> m: sub foo {gather {while my $a = bar() {take $a}}}; sub bar {my $b = (1..10).pick; $b == 10 ?? Any !! $b}; say foo()

[13:02] <camelia> rakudo-moar f94c31: OUTPUT«()␤»

[13:03] <Skarsnik> m: sub foo {gather {while my $a = bar() {take $a}}}; sub bar {my $b = (1..10).pick; $b == 10 ?? Any !! $b}; say foo()

[13:03] <camelia> rakudo-moar f94c31: OUTPUT«(3 3 5 2 3 8 6 7 8 5 7 8 1 3 6 7 3 1 7)␤»

[13:03] <Skarsnik> oups

[13:03] *** zakharyas joined
[13:03] <lizmat> m: "abcdef".split(<a c e>,:k).say   # sergot

[13:03] <camelia> rakudo-moar f94c31: OUTPUT«( 0 b 1 d 2 f)␤»

[13:03] <Skarsnik> how to have this only return 1 result for one foo call?

[13:03] <jnthn> walk &

[13:03] <lizmat> Skarsnik: foo().[0] ?

[13:03] <Skarsnik> bar here is just a dumb example

[13:04] <diakopter> giggle 😂

[13:05] <lizmat> Skarsnik: while bar() -> $a    # more perl6y

[13:05] <Skarsnik> I try to have a .row method in DBIis that work like a fetchrow but also work used as for $sth.row() -> @row {}

[13:06] *** domm left
[13:06] <diakopter> does anyone make emoji animations that tell stories? 

[13:07] *** domidumont left
[13:08] <rudi_s_> arnsholt: How can I mark that Pointer[PamMessage] as read-only?

[13:10] <arnsholt> You can't, really

[13:10] *** n0tjack joined
[13:10] <arnsholt> At least not a single instance

[13:10] *** nadim left
[13:10] *** domidumont joined
[13:10] <arnsholt> You can factor the Perl-side API so that instances are immutable, though

[13:11] <rudi_s_> Hm.

[13:11] <arnsholt> But if you're looking for something for the const declaration in some API calls, it's not really necessary

[13:15] *** n0tjack left
[13:17] *** csd_ joined
[13:21] *** domm joined
[13:21] <Ulti> I can't use panda atm is that a known thing?

[13:21] *** lustlife left
[13:21] *** csd_ left
[13:22] *** lustlife joined
[13:23] *** ZoffixW joined
[13:24] <ZoffixW> Where do I get the "bootstrap.pl" from? I rebuilt my rakudo and it ended with ".rebootstrap is obsolete. You can upgrade your rakudo while keeping all installed distributions including panda. Please run bootstrap.pl instead." and installing modules with panda currently doesn't work, so I'm guessing I need to rebuild it, but how?

[13:24] <ZoffixW> By doesn't work I mean I get this error: "Could not find Shell::Command:ver<True>:auth<True>:api<True> in:"

[13:25] <vytas> Zoffix, just logged this issue https://github.com/tadzik/panda/issues/252

[13:25] <vytas> ZoffixW*

[13:26] *** kaare_ joined
[13:28] <nine> Who is maintaining rakudobrew?

[13:28] <rudi_s_> Hm, still having NativeCall issues. C-part: testme(void **x) { printf(">%p<\n"; }, P6-part: my OpaquePointer $xxx; sub testme(OpaquePointer $xxx is rw) is native('./wtf') { * }; testme($xxx);

[13:28] <rudi_s_> However x is null when the C testme() is called.

[13:28] <nine> Ulti: today's rakudo and today's panda?

[13:28] <diakopter> nine: the answer can be found within

[13:28] <rudi_s_> How can I tell P6 to give me a pointer so I can write into it from C.

[13:29] *** lustlife left
[13:29] <lucs> nine: My panda installed 'p6doc' successfully, but any opinion on this result?: https://gist.github.com/lucs/93b561ef4d576a0257cc

[13:29] *** lustlife joined
[13:30] <nine> lucs: p6doc clearly needs updating and maybe a rakudo patch, too

[13:30] <ZoffixW> @*INC is no moar :P

[13:30] <lucs> D'oh! :)

[13:31] <TimToady> PSGI tests fail on @*INC too

[13:31] *** perl6257 joined
[13:31] <Ulti> nine yeah

[13:32] * ZoffixW is now building rakudo on a production box for the first time evar :P

[13:32] <Ulti> fresh built after I had problems

[13:32] <Ulti> Could not find Shell::Command:ver<True>:auth<True>:api<True> in: /Users/con-mo8/.perl6/2015.11-311-gf94c31e

[13:33] <ZoffixW> I get same thing

[13:33] * ZoffixW nukes .rakudobrew and re-tries from scratch

[13:33] *** Ven joined
[13:33] <Ven> m: sub f(--> BEGIN Int) { 5 }; say f;

[13:33] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/2bQUy33sFd␤Type 'BEGIN' is not declared␤at /tmp/2bQUy33sFd:1␤------> 3sub f(--> BEGIN7⏏5 Int) { 5 }; say f;␤»

[13:33] <ZoffixW> and ~/.perl6

[13:33] <Ven> m: sub f(--> x()) { 5 }; say f;

[13:33] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/9IVkZIODa3␤Type 'x' is not declared␤at /tmp/9IVkZIODa3:1␤------> 3sub f(--> x7⏏5()) { 5 }; say f;␤»

[13:33] <Ven> m: sub x { Int }; sub f(--> x()) { 5 }; say f;

[13:33] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Xb7GUs1Bmc␤Type 'x' is not declared␤at /tmp/Xb7GUs1Bmc:1␤------> 3sub x { Int }; sub f(--> x7⏏5()) { 5 }; say f;␤»

[13:34] <Ven> right.

[13:34] <nine> Ulti: that error comes when you run perl6 bootstrap.pl?

[13:34] * Ven ticks off a check in his "Weird Ideas" notepad

[13:34] <Ven> nine++: great job on CURLI! I'll take any speed improvements we can get, especially on the loading/compiling part :-).

[13:35] <stmuk> I had to https://github.com/tadzik/rakudobrew/pull/66 to get rakudobrew working but otherwise have had few problems (apart from not being enable to reinstall)

[13:35] <Ulti> nine no when I try to install Linenoise after everything was ok

[13:36] *** perl6257 left
[13:36] <Ven> m: constant x = Int; sub f(--> x) { 5 }; say f;

[13:36] <camelia> rakudo-moar f94c31: OUTPUT«5␤»

[13:36] <stmuk> TimToady: there is a PR to fix PSGI

[13:36] <ZoffixW> Note to Weekly writers: it'd be nice to include people's IRC nicknames along with their real names.

[13:37] <Ulti> nine rakudobrew build-panda was error free afaik

[13:37] <Ven> nice, nice... but then, how to overload a constant? *g*

[13:37] <ZoffixW> I've no idea who most of the mentioned names are, even though all of them are likely in this channel :P

[13:40] <ZoffixW> "Stage parse: Killed"... so much for my P6 on production :(

[13:41] <ZoffixW> Full error, if anyone's curious: https://gist.github.com/zoffixznet/c3985c03df5b01bf28f7

[13:43] <nine> ZoffixW: do you have ulimits on that machine? Stage parse eats > 1.5 GiB of RAM.

[13:43] *** abaugher_ left
[13:44] <ZoffixW> Oh :( I only have 1GB of RAM

[13:44] * ZoffixW cries salty tears

[13:44] <nine> ZoffixW: then you need swap and loads of time ;)

[13:44] <Skarsnik> it should use the swap

[13:45] <stmuk> at least 1GB of swap

[13:45] <ZoffixW> "KiB Swap:   262140 total"... seems like using Linode's pre-build, pre-setup Debian was a bad idea :P

[13:46] *** domidumont left
[13:47] *** cognominal_ left
[13:47] <CIAvash> cd ~/.rakudobrew/moar-nom/panda/ then ./bootstrap.pl fixed the panda problem for me

[13:47] *** cognominal joined
[13:47] <ZoffixW> sweet

[13:48] <vytas> CIAvash, tried it didn't work for me.

[13:49] *** rurban left
[13:49] <ZoffixW> But luckily, it lets you resize your disks if you powerdown. Gonna retry with 3256MB of swap

[13:51] <Ulti> ZoffixW why not use Docker in production?

[13:52] <ZoffixW> No idea what that is :P

[13:52] <ZoffixW> Well, I heard of it, but didn't bother learning what it is

[13:53] <Ulti> conceptually think light weight virtual machines that can inherit from each other and have versioning and easy distribution 

[13:54] <Ulti> but there is an official rakudo one on docker hub so deployment is as tricky as doing   docker pull rakudo-star && docker run -it rakudo-star

[13:57] *** cdg joined
[13:57] <ZoffixW> I'll keep that in mind for the future :)

[13:57] <stmuk> I have been experimenting with a "jumbo perl build" docker as well .. intended to be perl5 with Task::Kenso and Perl6 with Inline;:Perl5 and many modules

[13:57] <lizmat> commute to Amsterdam.pm meeting&

[13:58] <ZoffixW> \o

[13:58] *** lizmat left
[13:58] <Ven> o/

[13:58] <ZoffixW> "Rakudo has been built and installed."  nine++ Thanks. Adding more swap fixed the issue

[13:58] *** aindilis joined
[13:59] <arnsholt> FROGGS: Any objections to killing the .gist() tests on NativeCall's Pointer type?

[13:59] <nine> ZoffixW: cool! Didn't take all that long after all :)

[13:59] <arnsholt> Tight constraints on the exact stringification of a type is almost always wrong...

[13:59] <FROGGS> arnsholt: why... ohh?

[13:59] <jnthn> rudi_s_: If using "is rw" on the thing you want to use with pointer of pointer doesn't work, there's always the "pass a 1-element array" trick

[14:00] <FROGGS> arnsholt: we have similar tests in roast too

[14:00] <arnsholt> Those tests really feel like they're actually testing something else

[14:00] <FROGGS> okay, then I'm fine with turning them into something else, rather then to just kill'em

[14:00] <arnsholt> I'm not sure what they're testing though =)

[14:01] <rudi_s_> jnthn: Hm. I'm not really convinced. Sounds like quite a hack.

[14:01] <rudi_s_> I guess I'll write this in C ...

[14:01] <Ulti> stmuk yeah a bumper perl all batteries included would be good

[14:01] <ZoffixW> vytas, maybe because it's building new panda into a different dir? I nuked all and ran bootstrap.pl, but panda is now a not-found command and I see at the end of panda build it tells me to ensure this path is is PATH "/home/zoffix/.rakudobrew/moar-nom/install/share/perl6/site/bin"

[14:02] <ZoffixW> and new panda is in there. Type `type panda` and see whether it's running for the new built panda and not the old panda

[14:02] <nine> rudi_s_: ironically passing a 1-element array is exactly what you'd do in C

[14:02] <vytas> after nuking it all it works, you can find panda binary at ~/.rakudobrew/moar-nom/panda/bin/panda

[14:02] <arnsholt> FROGGS: Nm. I think I found a better set of tests

[14:02] <FROGGS> nine: yes, though the '$pointer is rw' is meant to work, and I think I know why it does not

[14:03] <rudi_s_> nine: No. I'd pass a pointer (to a pointer).

[14:03] <vytas> but making rakudobrew to run boostrap.pl instead of rebootstrap.pl throws errors...

[14:03] <rudi_s_> foo(int **x); foo(&bla) ..

[14:03] <jnthn> rudi_s_: They're equivalent in C :)

[14:03] <rudi_s_> Well, yes.

[14:04] <Skarsnik> rudi_s_, pointer are just int :)

[14:04] <rudi_s_> But it's semantically different IMHO.

[14:04] <rudi_s_> No.

[14:04] <Ven> What's the use for "is raw"? I can't comprehend it from the docs. I mean, what's the purpose when we have is rw and "\" ?

[14:04] <rudi_s_> Anyway, no need to waste time discussing it. Would've been nice if Perl6's FFI supported it.

[14:04] *** aigan left
[14:05] <Skarsnik> rudi_s_, write a test case

[14:05] <vytas> and panda list shows 3 modules, can't find Task::Star etc.

[14:05] <FROGGS> rudi_s_: I'll ticket it if you have a short example

[14:05] <jnthn> Ven: \foo is sugar for "is raw", so you don't need it in that case :)

[14:05] <rudi_s_> Skarsnik: A test case? Sure.

[14:05] <FROGGS> rudi_s_++

[14:05] <jnthn> Ven: It's more for the places you want those semantics and aren't declaring a parameter

[14:06] <Ven> jnthn: hm, that's a bit confusing. Not declaring a parameter?

[14:06] *** donaldh joined
[14:06] <FROGGS> rudi_s_: you can also write a test case in this style: https://github.com/rakudo/rakudo/tree/nom/t/04-nativecall

[14:06] <Ven> m: sub f($x is raw){say $x.perl); my @x; f(@x);

[14:06] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZKVDp5jX21␤Missing block␤at /tmp/ZKVDp5jX21:1␤------> 3sub f($x is raw){say $x.perl7⏏5); my @x; f(@x);␤    expecting any of:␤        postfix␤        statement end␤        statement modifier…»

[14:06] <rudi_s_> FROGGS: That was the plan.

[14:06] <Ven> m: sub f($x is raw){say $x.perl}; my @x; f(@x);

[14:06] <camelia> rakudo-moar f94c31: OUTPUT«[]␤»

[14:06] <jnthn> Ven: sub foo(\x) { } # x is raw automatically using the \ syntax

[14:06] <Ven> jnthn: yes, but that's declaring a parameter

[14:06] <ZoffixW> Yey solved my issue with panda saying "Could not find Shell::Command:ver<True>:auth<True>:api<True> in:" with these steps: rm -fr ~/.rakudobrew; rm -fr ~/.perl6; git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew; rakudobrew build moar; rakudobrew build-panda; cd ~/.rakudobrew/moar-nom/panda/; ./bootstrap.pl; source ~/.bashrc

[14:07] <jnthn> Ven: sub foo(**@x is raw) { } # but here you really need it to be "is raw"

[14:07] <jnthn> Ven: sub foo() is raw { } # same on return values

[14:07] <Ven> ah, that one makes sense

[14:07] <tadzik> ZoffixW: so it looks like the change related to curli basically break existing installations

[14:07] <jnthn> As there's not an alternative syntax for those other two

[14:08] <ZoffixW> tadzik, considering the existing installations are not precompiled, I'd not be surprised. But... that said, I haven't tried running that ./bootstrap.pl *without* nuking anything :P

[14:09] <Ven> jnthn: I gather. I find it weird that it keeps its sigil, though, but it makes sense in the cases of **@

[14:09] <ZoffixW> Hm. Text::VimColour now fails its tests :( 

[14:09] <ZoffixW> The fails are harder to debug now too with hex numbers instead of module names :P https://gist.github.com/zoffixznet/f93d2658d500198124e6

[14:11] *** n0tjack joined
[14:11] *** domidumont joined
[14:12] <Skarsnik> it's annoying to get a Unhandled exception: Cannot unbox a type object when you have an error in code that is loaded with a require xD

[14:12] <stmuk> ZoffixW: the tests pass .. it doesn't play well with panda I don't think

[14:12] <stmuk> ZoffixW: try prove -e 'perl6 -Ilib' t

[14:13] <arnsholt> Can anyone else pull from GitHub right now?

[14:13] <FROGGS> Skarsnik: ohh, might that be my patch to require that tries to return a type object (on successful require)?

[14:13] <stmuk> ZoffixW: I mean "I think" :)

[14:13] <ZoffixW> arnsholt, I managed to clone 30 seconds ago...

[14:13] <Skarsnik> hm maybe

[14:13] <FROGGS> arnsholt: I can

[14:13] <Skarsnik> It's really annoying when working with DBI x)

[14:13] <FROGGS> Skarsnik: yeah...

[14:14] <FROGGS> Skarsnik: you can revert my patch locally if you've got time

[14:14] <arnsholt> 'k. Then it's my wifi at work being crap, not GitHuib being crap

[14:14] <arnsholt> Thanks =)

[14:15] <rudi_s_> Skarsnik: FROGGS: https://pbot.rmdir.de/HH3so1QioVLORumS2C1F3g

[14:15] <rudi_s_> I haven't tested it, but should work and check what I expect (from the discussions today).

[14:15] <ZoffixW> stmuk, nope, still fails: https://github.com/stmuk/p6-Text-VimColour/issues/9#issuecomment-160980630

[14:15] *** n0tjack left
[14:16] <FROGGS> rudi_s_: ahh, it is not 100% correct but I see what you want

[14:16] <stmuk> ZoffixW: I will try rakudobrew nuke etc

[14:17] <FROGGS> rudi_s_: I'll work on this this evening

[14:17] <nine> sergot: I may have an idea on the 007 issue.

[14:17] <rudi_s_> FROGGS: Awesome, thank you. Just curious, what is wrong?

[14:18] <FROGGS> rudi_s_: we need to "refresh" a variable when we suspect it was changed by C, and I think we do it for e.g. CArrays, but we don't do it for Pointers yes

[14:18] <FROGGS> yet*

[14:18] <stmuk> does anyone have a quick work around for installing the same module more than once?

[14:18] <ZoffixW> stmuk, I believe I located the issue

[14:19] <rudi_s_> FROGGS: Thanks.

[14:19] <rudi_s_> FROGGS: I guess function pointers are too complicated to implement?

[14:19] <ZoffixW> stmuk, the failing test is looking for '<span class="PreProc">use</span> <span class="Statement">', but the output is actually <span class="PreProc">use</span> <span class="Special">v6</span>

[14:19] <FROGGS> stmuk: you could hack Panda::Installer to pass :force to $repo.install

[14:19] <rudi_s_> Having support for a struct with a function pointer would be really nice.

[14:19] <nine> jnthn: we currently check if the precomp file or any of its dependencies are older than the source file Repository::FileSystem is expected to load. This check however misses if any of the dependencies' source files changed. We will only discover that on loading the dependency itself.

[14:20] *** rurban joined
[14:20] <stmuk> FROGGS: ty

[14:20] <arnsholt> rudi_s_: And you want to assign a Perl function to that struct slot, presumably?

[14:20] <FROGGS> rudi_s_: we support callbacks in both directions, so function pointers should be doable, even when they are tricky

[14:20] <rudi_s_> arnsholt: Yes.

[14:20] <rudi_s_> Would be awesome.

[14:20] <arnsholt> That's pretty much just a question of implementing it, I think. Most of the machinery is there in the guts

[14:20] <jnthn> nine: Oh...I'd thought when we said dependencies we were meaning the source files, not just the precomp ones :)

[14:21] <arnsholt> FROGGS: We support invoking C function pointers from Perl too?

[14:21] <FROGGS> arnsholt: problem mit be the signature though, Perl 6 level wise

[14:21] <CIAvash> ZoffixW: I should've mentioned that I'd reinstalled rakudobrew :|

[14:22] <FROGGS> arnsholt: isnt that what a simple native sub does?

[14:22] <arnsholt> No, I mean invoking a pointer that points to a function

[14:22] <nine> jnthn: checking the dependencies' source files requires me to map from the precomp-id back to the source file which I don't know yet how to do in Repository::FileSystem

[14:22] <FROGGS> arnsholt: no, we dont support it yet

[14:23] <arnsholt> Yeah, that's what I thought

[14:24] <jnthn> nine: Ah, I'd somehow thought that was being recorded somewhere as we produced the precomps.

[14:24] *** _nadim joined
[14:24] <ZoffixW> stmuk, this PR fixes my issue: https://github.com/stmuk/p6-Text-VimColour/pull/10

[14:25] <FROGGS> bbl

[14:25] *** FROGGS left
[14:26] *** domidumont left
[14:26] <stmuk> ZoffixW: I think our vims are outputting slightly different markup and a better test would be a less matchy regexp

[14:26] <nine> jnthn: Repository::Installation maintains the mapping (by using the precomp id for the source files, too)

[14:27] *** skids joined
[14:27] <jnthn> Yeah, we'd need an explicit mapping in this case

[14:27] <jnthn> The cheeky way is to write a <precompid>.src file that contains the file name :)

[14:28] <nine> jnthn: that was my first idea, too :)

[14:28] <ZoffixW> stmuk, hm. A while back I successfully installed that module. Let me try with the syntax files freshly-squeezed from sauce.

[14:31] * zengargoyle was wondering last night if curli/precomp stuff could eventually lead to creation of standalone executables.

[14:31] <stmuk> ZoffixW: really the module should embedd known syntax files as pinched from the most recent upstream

[14:32] <jnthn> zemmihates: The API was designed with eventually supporting that, yes

[14:32] <jnthn> *in mind

[14:32] <stmuk> ZoffixW: https://github.com/stmuk/p6-Text-VimColour/issues/4

[14:32] <ZoffixW> stmuk, tried with fresh syntax files; vim version 7.4.488. Tests pass only with my patch

[14:33] <zengargoyle> cool

[14:34] *** rurban left
[14:35] <sergot> nine: what is it? :)

[14:35] *** ely-se left
[14:36] <lucs> nine: Re. https://github.com/teodozjan/pod6-coverage/issues/16, where does he get the 'prove' he mentions? (I don't seem to have one in my installation)

[14:36] <lucs> nine: (If you happen to know)

[14:37] <ZoffixW> lucs, "type prove; prove is hashed (/home/zoffix/perl5/perlbrew/perls/perl-5.20.2/bin/prove)"

[14:37] <_nadim> I took a few minutes to test callframe as it seemed to work in expected ways in some case. http://nopaste.linux-dev.org/?870317

[14:38] <_nadim> there is probably a better frmat and a it should be in the tests but I hope someone is curious enough about this. either I am completely wrong, whcih is most robable, or callframe needs sme polishing

[14:38] <stmuk> hmm the FAQ probably should list Perl 5, Test::More and git as dependencies for effective rakudo use

[14:38] <lucs> ZoffixW: Um, how do I use it? (from the command line, the 'prove' found is my P5 one, in the PATH)

[14:38] <nine> sergot: we currently check if the precomp file or any of its dependencies are older than the source file Repository::FileSystem is expected to load. This check however misses if any of the dependencies' source files changed. We will only discover that on loading the dependency itself.

[14:38] <lucs> ZoffixW: Oh wait, it uses the P5 one?

[14:38] <nine> lucs: prove is Perl 5's prove

[14:38] <_nadim> timotimo:  does http://nopaste.linux-dev.org/?870317 looks like what you would have expected?

[14:38] <lucs> Oh, I see.

[14:39] <nine> lucs: perl6 -Ilib should do the same

[14:39] <ZoffixW> lucs, yeah. You just tell it to use the perl6 executable:   prove -e 'perl6 -Ilib' -vlr t

[14:39] <sergot> nine: ooh, I understand

[14:39] <ZoffixW> That's what I use

[14:39] <stmuk> leont has a p6 prove doesn't he?

[14:39] <lucs> Ah, I see., thanks

[14:40] *** raiph joined
[14:41] <Skarsnik> :m say 4.20 == 4.20e0

[14:41] <Skarsnik> m: say 4.20 == 4.20e0

[14:41] <camelia> rakudo-moar f94c31: OUTPUT«True␤»

[14:41] <stmuk> ZoffixW: try p6-Text-VimColour now

[14:42] <Skarsnik> m: say 4.20 eq 4.20e0

[14:42] <camelia> rakudo-moar f94c31: OUTPUT«True␤»

[14:43] *** lustlife left
[14:43] <ZoffixW> stmuk, All tests successful.

[14:43] <Skarsnik> hm, what is not the same in http://pastebin.com/chfkDVUD ?

[14:44] *** AlexDaniel joined
[14:45] <ZoffixW> m: say 1.2.WHAT, 1.2e0.WHAT;

[14:45] <camelia> rakudo-moar f94c31: OUTPUT«(Rat)(Num)␤»

[14:45] <ZoffixW> Skarsnik, ^ IIRC that's the issue. I recall having similar issues with my Color module and "1" not being same as "1.0"

[14:46] <Ven> hm, sometimes `qqx` does output buffering, sometimes it doesn't... I don't get it

[14:46] <Skarsnik> should I map float type in DB to Rat so?

[14:47] <moritz> Skarsnik: no, to Num

[14:48] <Skarsnik> still does not pass is-deeply, hm

[14:52] *** ely-se joined
[14:52] *** ely-se left
[14:52] <Skarsnik> I am blind? it's exactly the same: http://pastebin.com/BZ6PJkh6

[14:53] <dalek> perl6-roast-data: 6f4cbce | coke++ | / (9 files):

[14:53] <dalek> perl6-roast-data: today (automated commit)

[14:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/6f4cbcedb3

[14:54] <ZoffixW> Not blind. doing 'eq' on those two strings says they're exactly same :/

[14:54] <dalek> doc: 06e2b54 | (Steve Mynott)++ | doc/Language/faq.pod:

[14:54] <dalek> doc: mention dependencies on Perl 5 etc.

[14:54] <dalek> doc: review: https://github.com/perl6/doc/commit/06e2b54a81

[14:55] <lucasb> m: use Test; is 1.0, 1e0

[14:55] <camelia> rakudo-moar f94c31: OUTPUT«ok 1 - ␤»

[14:55] <lucasb> m: use Test; is-deeply [1.0], [1e0]

[14:55] <camelia> rakudo-moar f94c31: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/34aT1pxDkk line 1␤# expected: $[1e0]␤#      got: $[1.0]␤»

[14:55] <ZoffixW> :o

[14:55] <ZoffixW> stmuk++ # Fixing @*INC fallout

[14:56] <Skarsnik> m: use Test; is-deeply [1.0e0], [1.0e0];

[14:56] <camelia> rakudo-moar f94c31: OUTPUT«ok 1 - ␤»

[14:56] <lucasb> I don't know if this is the right way to use, however

[14:56] <ZoffixW> Managed to install Bailador thanks to your fixes in its deps :)

[14:56] <Ven> ShimmerFairy++'s Grammar::Parsefail looks really nice :o)

[14:56] <Skarsnik> lucasb, I put the e0 in the code ^^

[14:56] <Skarsnik> I don't really get why I get Rat actually

[14:57] <Skarsnik> *Num

[14:57] <Ven> m: my rule a { :dba('xx') 'x' }; say 'x' ~~ (my token :: { /<a> });

[14:57] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter / (must be quoted to match literally)␤at /tmp/9oFc6HwSSY:1␤------> 3a('xx') 'x' }; say 'x' ~~ (my token :: {7⏏5 /<a> });␤Unrecognized regex metacharacter < (must be quoted to match literally…»

[14:57] <Ven> m: my rule a { :dba('xx') 'x' }; say 'x' ~~ (my token :: { <a> });

[14:57] <camelia> rakudo-moar f94c31: OUTPUT«Nil␤»

[14:57] <TimToady> m: say [1.0] ~~ [1e0]

[14:57] <camelia> rakudo-moar f94c31: OUTPUT«True␤»

[14:57] <Ven> m: my rule a { 'x' }; say 'x' ~~ (my token :: { <a> });

[14:57] <camelia> rakudo-moar f94c31: OUTPUT«｢x｣␤ a => ｢x｣␤»

[14:57] <Ven> ..wut?

[14:58] <Skarsnik> m: use Test; is-deeply (amount => [4.95e0, 4.85e0, 2.40e0]), (amount => [4.95e0, 4.85e0, 2.40e0]);

[14:58] <camelia> rakudo-moar f94c31: OUTPUT«ok 1 - ␤»

[14:58] <[Coke]> .tell Shimmerfairy yes, some dupes are not collapsing yet; the Lue's will be combined at some point. the aliases are from the logs. they won't be in the final result, only the "preferred" name (the one listed first).

[14:59] <yoleaux> 07:10Z <ShimmerFairy> [Coke]: looking at https://gist.github.com/coke/63c7bbb82f075c7bb1f5 , there's a spurious Lue line that needn't be there (line 356 of output), and neither the so-called aliases nor the svn-y email for ShimmerFairy should be there either :)

[14:59] <yoleaux> [Coke]: I'll pass your message to Shimmerfairy.

[14:59] <yoleaux> 07:39Z <JimmyZ> [Coke]: for history author of specs : git log -p | grep -v Author | grep -v svn | grep -v @@ | grep -v Message | grep -oP '\S*\s*\S*\s*<.+?[a-z0-9]@[a-z0-9].+?>' | sort | uniq

[14:59] <Skarsnik> my rakudo is from the last month x)

[14:59] <ZoffixW> nine, we no longer have the ability to look for available modules based on partial name, do we? Like finding all modules whose names begin with 'Module::Plugin::'? The old way was to scan all the dirs in @*INC

[15:00] <nine> ZoffixW: not yet, no. I think it will be rather easy to bring it back though.

[15:00] <ZoffixW> k

[15:00] * ZoffixW files an issue on http://modules.perl6.org/repo/Pluggable

[15:00] <[Coke]> .tell JimmyZ - that dies with "usage: grep...." - what are you trying to solve there?

[15:00] <yoleaux> [Coke]: I'll pass your message to JimmyZ.

[15:01] <geekosaur> .tell JimmyZ grep's -P option is only in recentish gnu grep, won't be in non-gnu or some older distributions

[15:01] <yoleaux> geekosaur: I'll pass your message to JimmyZ.

[15:02] <Ven> nine: can you explain what https://github.com/rakudo/rakudo/commit/13564de7142e6c1e8841423d2e4002f641b2beea does? I'm not sure I get the fix :)

[15:03] <nine> Ven: line 132: $_ = %repos{$_} for %CUSTOM_LIB.values;

[15:04] <Ven> nine: ah, I was only misled by the commit comment then :). thanks

[15:04] <nine> Ven: for that to work the path in %CUSTOM_LIB has to be the full inst#/home/whatever instead of just /home/whatever

[15:04] *** domidumont joined
[15:05] <jdv79> Util_: i wrote one (well, just copied masak's) - is it worht being in core?  its pretty short.

[15:05] <AlexDaniel> Hello! I'm having a problem with my perl6 installation. I am using rakudobrew and the error I'm getting is “Unhandled exception: failed to load library 'dynext/libperl6_ops_moar.so'”. This even happens if I do “perl6 -e 'say "hello world"'”. But I noticed that if I run exactly the same command from “moar-nom” folder then everything is working correctly. Any ideas?

[15:06] <AlexDaniel> geekosaur: “recentish” is hard to define. I've been using -P for years! :)

[15:06] <AlexDaniel> geekosaur: but you are right

[15:06] <lucasb> grep -P, --perl-regexp  PATTERN is a Perl regular expression

[15:06] *** rindolf joined
[15:06] <geekosaur> debians can be pretty ancient though

[15:06] <lucasb> for those, like me, who didn't know what -P was for :)

[15:06] *** lestrrat left
[15:07] <jdv79> nine: i think i'm in UTC+1 as well.  are you near Berlin?

[15:07] <AlexDaniel> and for those who don't know if that is any useful: grep -Po 'Something: \K\w+' logfile

[15:07] *** rurban joined
[15:07] <AlexDaniel> that is, \K works!

[15:07] <nine> jdv79: Linz, Austria

[15:08] <japhb> Europe: I am here.  Fear my continued presence.  Pray I do not stay (much) longer.

[15:08] <japhb> Hi all!

[15:08] <geekosaur> -o is also a bit nonportable... (only output the matched part of the line)

[15:08] *** csd_ joined
[15:09] <AlexDaniel> .oO( or just keep using both -P and -o so that it gets implemented everywhere… )

[15:09] <jdv79> ah

[15:09] <japhb> nine: I saw in lizmat++'s weekly that the curli branch is merged.  Congrats!

[15:09] <ZoffixW> m: say "Perl 6's Bailador is {714.29/1250}% as fast as Perl 5's Mojolicious"

[15:09] <camelia> rakudo-moar f94c31: OUTPUT«Perl 6's Bailador is 0.571432% as fast as Perl 5's Mojolicious␤»

[15:09] <ZoffixW> Not bad at all.

[15:09] <nine> japhb: thanks :)

[15:10] <japhb> ZoffixW: Did you really mean a fraction of a percent?  Or did you mean 57%?

[15:10] *** lestrrat joined
[15:10] <ZoffixW> Oh

[15:10] <ZoffixW> m: say "Perl 6's Bailador is {714.29/1250 * 100}% as fast as Perl 5's Mojolicious"

[15:10] <camelia> rakudo-moar f94c31: OUTPUT«Perl 6's Bailador is 57.1432% as fast as Perl 5's Mojolicious␤»

[15:10] <ZoffixW> :)

[15:10] <ZoffixW> With a rudimentary "Print hello world" app :)

[15:10] <japhb> Fastest way to get a 100x speedup I've ever seen.

[15:10] <ZoffixW> ehehe

[15:10] <mspo> mojo is pretty big ;)

[15:11] <_sri_> ZoffixW: how did you measure that?

[15:11] <mspo> does your router do reverse?

[15:11] <mst> not really

[15:11] <japhb> I was wondering when sri would comment on that ...  :-)

[15:11] <mst> mojo is actually relatively small, due to repeated passes deleting any features that aren't used internally

[15:12] <mst> this has huge advantages for new build code, and noticeable disadvantages for older code that was using those features

[15:12] *** n0tjack joined
[15:12] <mst> programming: trade-offs all the way down

[15:12] <japhb> s/programming/computer science/

[15:12] <ZoffixW> _sri_, no way that gives the results any true meaning. This was mostly my test for "is Bailador even usable" :)

[15:12] <_sri_> ZoffixW: benchmark war!

[15:12] <jdv79> be nice if Cat did taht.  it was nice to work with in the beginning.  now its a maze to me sometimes.

[15:12] <gtodd> if only it was 60%

[15:12] <ZoffixW> _sri_, actually, I've even used morbo instead of hypnotoad :P

[15:12] * ZoffixW braces 

[15:13] <_sri_> ...

[15:13] <ZoffixW> I forgot lol! :)

[15:13] <Juerd> jnthn: $supply.emit seems to still exist. I changed my code to use a supplier and a supply, but then didn't realise I had to move the emit calls to the supplier. Nothing broke, and it took some time to figure this out.

[15:13] <_sri_> don't even know what to say to that

[15:13] <mst> jdv79: yeah, the trouble there is there are multi-year-old apps we want to still upgrade

[15:13] <japhb> gtodd: Clearly that's an important threshold for production use.

[15:13] <ZoffixW> Mostly because I get "Premature connection close" from Bailador

[15:13] <gtodd> :-D

[15:14] <mst> jdv79: I'm tempted to 'fix' it by producing a Catalyst::UseTheseBits or something ;)

[15:14] <_sri_> for the record, mojolicious is killing it on most reasonable micro-benchmark we have currently https://www.techempower.com/benchmarks/#section=data-r11

[15:14] <jdv79> isn't that was web::simple was - i only noticed it.  never used it.

[15:14] <_sri_> +the

[15:14] <gtodd> I just hope if/when Mojo is "ported" to perl6 we get to keep the names hypnotoad mojo etc. 

[15:14] <mst> sooort of. Web::Simple is basically just enough glue to wrap a much much better dispatcher

[15:15] <AlexDaniel> can anybody help with my installation problem? What can I check to find the problem? By the way, the error is happening at <unknown>:1  (/home/alex/git/rakudobrew/moar-nom/perl6.moarvm:<dependencies+deserialize>:81)

[15:15] <nine> jdv79: No Catalyst does already too many backwards incompatible changes! And of course it's Catalyst to blame. We only poked around at internals, misused them and programmed to an exact implementation. There's surely nothing wrong with that...

[15:15] <mst> I've not done anything large scale enough with it to have good patterns for catalyst scale apps

[15:16] <jdv79> meh.  maybe the p6 version of cat will take the backcompat stance of p6..

[15:16] *** n0tjack left
[15:17] <mst> for the moment, I'm happy enough with Web::Simple for small stuff, Catalyst for large stuff, and Mojo for things where the async integration matters

[15:17] <mst> but I'm very much using a subset of Catalyst based on a sort of mental style guide

[15:18] <ZoffixW> hah

[15:18] <mst> which is the thing I think might be worth writing up

[15:18] <ZoffixW> _sri_, well, I'm actually getting worse results with hypnotoad than with morbo :P

[15:18] <japhb> _sri_: I'm not deeply familiar with that benchmark suite -- in what way is mojolicious "killing it"?  (Certainly it's the top thing with Lng=Prl, but that doesn't seem to put it that high in the overall rankings, so I'm wondering if there's a non-obvious bit of info I need to take into account.)

[15:18] <jdv79> mst: nice

[15:19] <ZoffixW> m: say "bailador is {909.09/555.56*100} as fast as hypnotoad"

[15:19] <camelia> rakudo-moar f94c31: OUTPUT«bailador is 163.634891 as fast as hypnotoad␤»

[15:19] <mst> I have some ideas about a sort of meta-framework that I keep circling around; I was planning to build it atop Mojo, but since I'm apparently too evil to be allowed to file bugs on it I'm probably going to end up with Web::Simple + IO::Async instead

[15:19] <_sri_> japhb: it's very very high compared to other scripting language frameworks

[15:19] <ZoffixW> m: say "bailador is {555.56/909.09*100} as fast as hypnotoad"

[15:19] <camelia> rakudo-moar f94c31: OUTPUT«bailador is 61.111661 as fast as hypnotoad␤»

[15:19] <_sri_> japhb: the python ones that are higher actually cheat with lots of C code

[15:21] <_sri_> pretty much just lua can compete with the compiled languages

[15:21] <japhb> _sri_: Oh, you mean, very fast among pure-dynamic-language engines.

[15:21] <jdv79> i'm kinda hoping p6 allows for smaller well composable pieces for stuff like a web server

[15:21] <jdv79> i think RabidGravy mentioned that idea

[15:21] <ZoffixW> _sri_, this is how I benched it: http://fpaste.scsys.co.uk/502215 mind you, I'm getting "Problem loading URL "http://localhost:3000": Premature connection close" even though it works in the browser, so I don't know if the requests are getting aborted or something

[15:22] <_sri_> ZoffixW: that is not a valid benchmark at all

[15:23] <_sri_> first thing you do is get wrk for measuring

[15:23] <ZoffixW> _sri_, as stated above, I wasn't doing a benchmark, but simply seeing if Bailador was even usable.

[15:24] <ZoffixW> And yes, I can see how my initial m: say "" can be misinterpreted, but I hope now I clarified what I was actually doing.

[15:24] <jnthn> Juerd: Looking at the source file, I can't see a method emit in there.

[15:25] <_sri_> ZoffixW: i'm actually very interested in real benchmark comparisons

[15:25] <_sri_> to see where perl6 stands right now

[15:25] <jnthn> m: my $p = Supplier.new; my $s = $p.Supply; $s.emit(42)

[15:25] <camelia> rakudo-moar f94c31: OUTPUT«Method 'emit' not found for invocant of class 'Supply'␤  in block <unit> at /tmp/x7OInj61xv:1␤␤»

[15:25] <jnthn> Juerd: Any chance you've a golf of the odd case you ran into?

[15:26] <_sri_> but you need comparable server implementations and a good testing tool like wrk

[15:26] <ZoffixW> _sri_, I think it'll widely depend on what you're doing. I ran a Perl 6's HTML parsing module on a test page and it took 1.66 minutes, but Mojo::DOM parsed it in less than a second.

[15:26] * ZoffixW & # meeting

[15:26] <jdv79> ZoffixW: that's likely XML because grammars are slow

[15:27] <jdv79> :(

[15:27] <AlexDaniel> uhm, so how can I make my perl6 work again? I am getting “failed to load library 'dynext/libperl6_ops_moar.so'” error

[15:27] <_sri_> ZoffixW: if the parsers are comparable, i guess that might actually be a sensible benchmark

[15:28] <AlexDaniel> one option would be to put all my perl6 projects into moar-nom folder… but…

[15:29] <_sri_> Mojo::DOM does not use a grammar though, which i think might not be as fast even in perl5

[15:29] <El_Che> \o/ for Channels + Promises: spend some cpu by reducing the memory usage drastically when reading/parsing/converting big files

[15:29] <jnthn> AlexDaniel: You did "make install" and are running the installed Perl 6?

[15:29] <AlexDaniel> jnthn: no, I am using rakudobrew

[15:29] <_sri_> at least from what i've seen (merlyn's json regex comes to mind)

[15:30] *** skids left
[15:30] <Skarsnik> Damn, i know why is-deeply fail, the Num are num64 ~~

[15:30] <AlexDaniel> jnthn: last time I rebuilt it was less than a week ago, everything was fine

[15:31] <AlexDaniel> jnthn: yesterday I thought I'd get the most recent version and it started throwing some errors. So I deleted the rakudobrew folder and tried again, now the error is different but I don't know what to do

[15:31] <AlexDaniel> jnthn: as I've mentioned earlier, it works when I run it in rakudobrew/moar-nom/ folder

[15:32] <Juerd> jnthn: I'll try if I can reproduce it, probably tomorrow

[15:33] <jnthn> Juerd: Thanks

[15:33] <Juerd> jnthn: There may be other weird thing going on. I mistyped $m.messages as $m.message and that hangs as well. There is no method 'message' in my class. So maybe it has to do with non-existing methods in general.

[15:34] <Skarsnik> is there something like is-deeply that just check if type are compatible?

[15:37] <ZoffixW> is $a.WHAT eq $b.WHAT? X)

[15:37] <ZoffixW> I've no idea :P

[15:37] <jnthn> What do you mean by "compatible"?

[15:38] <Skarsnik> It fail my test because I have num64 and I compare to Num

[15:38] <Skarsnik> *it

[15:38] <mspo> anyway I would love to see mojo on perl6

[15:38] <mspo> mojo is very good

[15:39] *** RabidGravy joined
[15:39] <Skarsnik> m: my num64 $a = 2.0; my Num $b = 2.0; say $a eqv $b;

[15:39] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uiuzcePkIv␤Cannot assign a literal of type Rat (2e0) to a variable of type Num. You can declare the variable to be of type Real, or try to coerce the value with 2e0.Num or Num(2e0), or just write the value as…»

[15:39] *** nadim joined
[15:39] *** _nadim left
[15:39] <Skarsnik> m: my num64 $a = 2.0e0; my Num $b = 2.0e0; say $a eqv $b;

[15:39] <camelia> rakudo-moar f94c31: OUTPUT«True␤»

[15:39] <Skarsnik> hm

[15:40] <TimToady>  probably boxes the num64 for eqv

[15:40] <TimToady> since both args aren't native

[15:41] <jnthn> Yes, it will be

[15:41] <jnthn> Heh, TimToady is wearing an '@ on IRC now too :)

[15:42] <RabidGravy> Boom!

[15:42] <Skarsnik> I don't get why this test fail them x)

[15:43] <brrt> mspo: yes, mojo6 would be awesome :-)

[15:45] <RabidGravy> people keep saying these things, I'd prefer there not to be cult frameworks ported from Perl 5, I want clever people who like Perl 6 to make new things

[15:46] <[Coke]> mspo: yes, I'm planning on diving back into mojo in 2016Q1

[15:46] <[Coke]> and to RabidGravy's point, I want to do a mojo6, not a mojo5-to-6

[15:46] <japhb> _sri_: Clicking around that TechEmpower benchmark suite a bit, I'm curious: Did you find out why mojolicious had a non-zero error rate on several tests?

[15:49] <mspo> yeah not a translation but the feature set and ease-of-use aspects hit a very sweet spot in mojo

[15:49] <Skarsnik> I don't get why that fail ~~ http://pastebin.com/Ch17J7G8

[15:50] * [Coke] sighs again tha pastebin is blocked here.

[15:51] <mspo> 6paste.io must be made

[15:53] <RabidGravy> I'm actually not in favour of monolithic frameworks at all, but lots and lots of bits that can be used to make good software

[15:53] *** _nadim joined
[15:54] <mspo> go-lang style router + middleware frameworks are cool too

[15:54] <Skarsnik> I don't know, it's hard to test if all these differents bits will work together well

[15:54] <RabidGravy> It's not make Perl 6 a scripting language for the "approved frameworks" that the Modern Perl people made "Perl 5"

[15:56] <mspo> not sure what that means :)

[15:56] *** khw joined
[15:57] *** nadim left
[15:58] <_sri_> japhb: nope

[16:00] <jdv79> i think i agree RabidGravy.  if its possible/practical.

[16:00] <jdv79> feels like a pipe dream though

[16:00] <[Coke]> my goal with something like mojo6 is to be able to use it at work. That's pretty much it.

[16:01] *** nadim joined
[16:01] <[Coke]> biggest thing I'm going to need is Oracle DB support, which I agree should be a separate thing. :)

[16:02] <ZoffixW> I think it'll happen when there'll be a ton of useless and broken bits and pieces like in P5 and people will get fed up and make a list of approved frameworks :P

[16:02] <jdv79> [Coke]: I::P5 and DBI! :)

[16:02] *** _nadim left
[16:03] *** ely-se joined
[16:04] <_sri_> RabidGravy: you do realize that web frameworks these days are like 90% the same no matter what language you use?

[16:05] *** Axord left
[16:05] <RabidGravy> yes

[16:05] <ely-se> web frameworks these days are 90% quickstart guides and 10% other forms of cargo-culting

[16:05] <gtodd> speaking of trying/learning 2 things at once :-D  does the ecosystem have any IoT orieinted modules ?  I'm not sure what the latest/greatest  "protocol" is in the IoT space only really looked at mosquito/MQTT ... does AMPQ fall into that category?

[16:06] * gtodd does not know really know why IoT is "a thing"

[16:06] <_sri_> hearing this stuff is really disheartening, mojolicious actually started as a thought experiment for how i would have built a new perl6 framework back in 2011

[16:07] <_sri_> it was designed for perl6 back then

[16:07] <ely-se> gtodd: Internet of Things? https://twitter.com/internetofshit

[16:08] <mspo> who can fix broken links on doc.perl6.org?

[16:08] <gtodd> _sri_: I wouldn not count mojo among cargo-culting frameworks ... 

[16:08] <ugexe> in my experience the best small, composable pieces are born from a monolith

[16:08] <gtodd> ely-se: hah hah

[16:09] <RabidGravy> very probably

[16:09] <jdv79> i would look at using a mojo6 if it was somewhat uncomplicated/bloaty seeming

[16:09] <mrf_> gtodd: why not. It does much the same as every other major web framework. Including all the same mistakes 

[16:09] <jdv79> *unbloaty - is that a word?

[16:09] <gtodd> mrf_: uhh ... barfing dynosaur

[16:09] <Skarsnik> a good framework has good documentation x)

[16:10] <_sri_> not that mojo6 is likely to happen, my motivation to invest in perl6 is at an all time low i'm afraid

[16:10] <RabidGravy> er AMQP is a message queuing protocol not a web framework

[16:10] <RabidGravy> oh well

[16:11] <ely-se> just write AMQP on Rails

[16:11] <mspo> I had a big MQ-using website at a previous job

[16:11] <mspo> it was a disaster ;)

[16:11] <_sri_> especially the anti perl5 culture around here is a huge turnoff for me

[16:12] <ely-se> I use ZeroMQ a lot.

[16:12] <mspo> this was JEE + ActiveMQ

[16:12] <jdv79> oh, its safe to ignore them:)  most of us are very pro-p5!

[16:12] <mspo> mostly to queue up db transactions for page rendering (bad idea)

[16:12] <mspo> switching to 0MQ for things like solr queries would probably be really smart

[16:12] <RabidGravy> I'm mostly anti-bullshit

[16:12] <gtodd> mspo: I think MQTT  is all I really want ... something sub/pub that easier to set up than  XMPP 

[16:12] <mrf_> RabidGravy++

[16:13] <mspo> gtodd: there's a mojo for that, actually ;)

[16:13] *** n0tjack joined
[16:13] <Skarsnik> m: my @t; @t.push:1..10; say @t;

[16:13] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1s1hwgV2ZC␤Confused␤at /tmp/1s1hwgV2ZC:1␤------> 3my @t; @t.push:7⏏051..10; say @t;␤    expecting any of:␤        colon pair␤»

[16:13] <gtodd> _sri_: /me not anti perl5!  :-)

[16:13] <mspo> gtodd: but rabbitmq is genuinely high quality software, fwiw

[16:13] <brrt> on the topic of the (rather nice) perl6-is-fun article

[16:13] <Skarsnik> m: my @t; @t.push:(1..10); say @t;

[16:13] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/b9KqQP1C0M␤Malformed parameter␤at /tmp/b9KqQP1C0M:1␤------> 3my @t; @t.push:(17⏏5..10); say @t;␤    expecting any of:␤        constraint␤        formal parameter␤»

[16:13] <brrt> i noticed a lot of people trying to compare the perl5/perl6 with python2/python3

[16:13] *** frobnicator left
[16:13] <mrf_> Mostly I just want a web toolkit that actually allows me to write HTTP spec compatible services without having to hack all wround the house

[16:13] <RabidGravy> I used AMQP heavily with Perl in my last job, fabulous fun

[16:14] <_sri_> jdv79: i think it's a problem that will increase with early adopters trying out perl6 in the next few months

[16:14] <RabidGravy> I'm sure it was the same when Perl 5 came out

[16:15] <_sri_> you'll get more folks that have never used perl5 or not been using it for many years, and that are used to hating on perl5

[16:15] <Skarsnik> I can't write perl5 after writing perl6 code x)

[16:15] <_sri_> language war is coming :p

[16:15] <RabidGravy> I think more people should write Perl 4

[16:16] <gtodd> _sri_: will p5 haters try p6 ?  I mean perl6 has .... sigils and twigils!

[16:16] <lucasb> yay, php-7.0.0 has been tagged in its repo! \o/

[16:16] <lucasb> oops, wrong channel

[16:16] <_sri_> RabidGravy: so, you're equating the perl4/perl5 relationship to the perl5/perl6 relationship?

[16:16] <_sri_> RabidGravy: that is bullshit!

[16:16] <RabidGravy> no you are

[16:17] <gtodd> personally I hope for quadrigils 

[16:17] <_sri_> perl5 is a healthy language that will co-exist with perl6

[16:17] <[Coke]> m: if 3 { 4 } elseif 5 { 6};

[16:17] <camelia> rakudo-moar f94c31: OUTPUT«5===SORRY!5=== Error while compiling /tmp/g38BXuLW51␤In Perl 6, please use "elsif' instead of "else if"␤at /tmp/g38BXuLW51:1␤------> 3if 3 { 4 } elseif7⏏5 5 { 6};␤»

[16:17] <AlexDaniel> elsif?

[16:17] *** n0tjack left
[16:17] <[Coke]> ^^ LTA error.

[16:17] <mspo> I never met anyone who used perl(5) for anything who genuinely didn't like it

[16:17] <RabidGravy> yes, I can forsee making Perl 5 code for a very long time, I've been doing it for twenty years

[16:18] <mspo> just a lot of people who never used it

[16:18] <mspo> one fun thing I've noticed on rosettacode is that perl6 solutions seem to be the shortest :)

[16:18] <AlexDaniel> ah, the error message said it

[16:18] <AlexDaniel> [Coke]: and why is it LTA?

[16:18] <gtodd> mspo: good point (about the non users)

[16:18] *** domidumont left
[16:18] <[Coke]> AlexDaniel: because it says "instead of" something I didn't use.

[16:18] <[Coke]> I said "elseif" not "else if"

[16:19] <AlexDaniel> well…

[16:19] <gtodd> if we get perl6 for Christmas I wonder if stevans p5-mop will arrive in time for boxing day ...

[16:19] <Ulti> _sri_ anti perl5 culture? :'( perhaps some very specific overly outspoken individuals around here

[16:19] <mspo> perl has always been great for getting your damned work done

[16:19] <AlexDaniel> .oO( why can't we allow both? )

[16:19] <flussence> .oO( I wish the anti-perl6 culture was one percent as nice as the anti-perl5 "we have" )

[16:19] <mspo> less great for wanking, maybe ;)

[16:19] *** mr-foobar left
[16:19] <Ulti> _sri_ would you be against someone attempting to port some of mojo?

[16:20] <_sri_> Ulti: not at all, just use a different name

[16:20] <Ulti> k k

[16:20] * geekosaur regularly encounters anti-perl5 who demonstrate where anti-perl6 came from

[16:20] <Ulti> hodor.pm6 sounds like a likely web framework

[16:20] <geekosaur> in fact they just pile on perl6 without even looking, because anything even remotely perl is unforgivable evil to them

[16:20] <Ulti> it will only echo

[16:21] *** mr-foobar joined
[16:21] <[Coke]> _sri_: I thought you were on board with a perl 6 mojo.

[16:21] <abraxxa> Mojo should be way easier to implement with Perl 6's great async features in core

[16:21] <_sri_> [Coke]: it's currently not a project goal

[16:22] *** skids joined
[16:22] *** ely-se left
[16:22] <Ulti> tempted to see how good/bad mojo is through Inline::Perl5 not sure anyone has taken a look yet

[16:23] <Ulti> if its not too bad I'd rather just use Mojolicious as it stands

[16:23] <Ven> Ulti: didn't nine++ make a lightning talk about that? I'm not sure it was Mojo.

[16:23] <flussence> lucasb: it'll be years before it's generally usable, because a lot of their C extensions are still on 5.4/5.5 :)

[16:24] <_sri_> [Coke]: it was a project goal like twice in the last few years though, but then the perl6 got delayed again and again... and folks kinda lost interest

[16:25] <_sri_> now it's hard to justify a perl6 port when we could be working on http/2 support

[16:25] <gtodd> _sri_: that would be a great new feature 

[16:26] *** AlexDaniel left
[16:27] <_sri_> *+release

[16:27] <gtodd> _sri_:  I'm guessing the way Mojo is written and the fact works so well just inspires people to want to "port" it or write a similar framework for Perl6

[16:29] <Ulti> Ven he might have showed its possible, but I mean performance wise if it works relatively well

[16:29] <Ven> ah, well, I don't know how costly crossing the bridge is :)

[16:30] <dj_goku> timotimo: hey I saw you commited the SEQ change, but did you see my test change (roundtrip)?

[16:31] <[Coke]> _sri_: I certainly wasn't expecting the mojo 5 team to work on it.

[16:32] <[Coke]> but if you don't want a mojo 6, I'm happy to not use that name.

[16:32] *** bpmedley left
[16:32] <_sri_> [Coke]: ah, i figured you mean official because you said i was "committed to it"

[16:32] <brrt> i'd think that it'd be fair if the mojo people had a say in that

[16:32] <[Coke]> I didn't say committed.

[16:33] <[Coke]> I said "on board"

[16:33] <flussence> IMO Mojo isn't just "a thing you can port". 80% of it exists in the polish and glue and little details. It'd be kind of like... backporting smartmatch.

[16:33] <RabidGravy> to get back to normal, if I had a WhateverCode in hand how would one work with it

[16:33] <_sri_> [Coke]: anyway, yea, i prefer a different name for unofficial ports

[16:33] *** YP-QMUL-W joined
[16:33] <brrt> good point flussence

[16:34] *** rindolf left
[16:34] <jnthn> TimToady: So, I went through what needs to change in Rakudo and roast to make the finite (well, really non-lazy) ranges not auto-truncate. Here's the patches: https://gist.github.com/jnthn/ad7aff3a06679fe2ed9b

[16:34] <_sri_> flussence: indeed

[16:34] <brrt> and at any rate, perl6 has it's whole own story wrt to {async,paralellism,concurrency}

[16:34] <dj_goku> does .tell notify only NICK or does it notify NICK_?

[16:34] <flussence> dj_goku: the first oen

[16:35] <flussence> s/en/ne/

[16:35] <dj_goku> ok thanks

[16:35] <brrt> and..... a framework with mojo's aims for perl6 would consequently look very different

[16:35] *** brrt left
[16:35] *** Ven left
[16:35] <dj_goku> .tell FROGGS did the unicode loading issue with testers.p6.org for raw json get fixed?

[16:35] <yoleaux> dj_goku: I'll pass your message to FROGGS.

[16:35] <_sri_> flussence: when i say port i always mean something like an 80% port with 20% new perl6 idioms to make things elegant

[16:36] <_sri_> i would very very heavily use promises and supplies for example

[16:36] <jnthn> TimToady: If it looks OK to you, I can commit/push

[16:38] <_sri_> the native event loop in perl6 will already replace like a third of mojolicious

[16:39] <JimmyZ> .tell [Coke] https://gist.github.com/zhuomingliang/c6c54981be747e1c7101

[16:39] <yoleaux> JimmyZ: I'll pass your message to [Coke].

[16:39] <yoleaux> 15:00Z <[Coke]> JimmyZ: - that dies with "usage: grep...." - what are you trying to solve there?

[16:39] <yoleaux> 15:01Z <geekosaur> JimmyZ: grep's -P option is only in recentish gnu grep, won't be in non-gnu or some older distributions

[16:39] <ZoffixW> mspo, RE: "<mspo> who can fix broken links on doc.perl6.org?" not seen a response, but I could. Though note that some are known issues: https://github.com/perl6/doc/issues/155 

[16:39] <ZoffixW> mspo, what is it?

[16:40] <[Coke]> JimmyZ: ok. I still ahve no idea what you're trying to fix.

[16:40] <yoleaux> 16:39Z <JimmyZ> [Coke]: https://gist.github.com/zhuomingliang/c6c54981be747e1c7101

[16:40] <[Coke]> I see lots of +/- in that diff output that seem to be changing nothing.

[16:40] <dalek> rakudo/nom: cdc3fb0 | arnsholt++ | lib/NativeCall/Types.pm:

[16:40] <dalek> rakudo/nom: Adapt code from native_array.pm to CArray ^parameterize.

[16:40] <dalek> rakudo/nom: 

[16:40] <dalek> rakudo/nom: This removes the need for monkey typing, since the typed array roles no longer

[16:40] <dalek> rakudo/nom: have to inherit from CArray.

[16:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cdc3fb041a

[16:40] <dalek> rakudo/nom: 518b46f | arnsholt++ | / (2 files):

[16:40] <dalek> rakudo/nom: Update NativeCall::Types::Pointer definition to not need MONKEY_TYPING.

[16:40] <dalek> rakudo/nom: 

[16:40] <dalek> rakudo/nom: Also cleans up some tests to not rely on exact stringifications.

[16:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/518b46feb9

[16:40] <JimmyZ> [Coke]: that's some author removed in specs

[16:41] <JimmyZ> but not in git 

[16:41] <[Coke]> ah! thank you.

[16:41] <[Coke]> do me a favor do a git log --all to catch branches.

[16:41] <mspo> ZoffixW: the link to // here: http://doc.perl6.org/routine.html

[16:41] *** emdashcomma left
[16:42] <[Coke]> We can make sure that everyone on that list appears in the list, and if not, we can add them to a CREDITS file somewhere.

[16:43] <mspo> also there was a link to 'http://doc.perl6.org/language/$_' which didn't work but I forget where I clicked it

[16:43] <[Coke]> JimmyZ: ":auth" appears to always be a false positive.

[16:43] <ZoffixW> mspo, thanks, I've added those to the Issue #155 as well. 

[16:43] <[Coke]> (as does devnull)

[16:43] <JimmyZ> [Coke]: git log --all -p is the same result

[16:43] <ugexe> [Coke]: im sure you have more people to add, but i didn't see tony-o in the credits although i know he has a pr or two merged

[16:43] <[Coke]> JimmyZ++ thanks.

[16:44] <[Coke]> ugexe: what repo?

[16:44] <ugexe> rakudo

[16:44] <[Coke]> ugexe: https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contribs-out-L627

[16:44] *** emdashcomma joined
[16:44] <[Coke]> you're probably looking at the old WIP in the release announcement, my bad.

[16:44] <ugexe> [Coke]: oh thanks

[16:46] <ZoffixW> That contrib list will need some manual weeding out methinks :P

[16:46] * ZoffixW sees their own name duplicated and a contributor named "root"

[16:46] <dj_goku> .tell timotimo hey I saw you commited the SEQ change, but did you see my test change (roundtrip)?

[16:46] <yoleaux> dj_goku: I'll pass your message to timotimo.

[16:46] <ZoffixW> Though maybe that's an actual user *shrug*

[16:48] <[Coke]> ZoffixW: it's technically not duplicated.

[16:48] <[Coke]> ZoffixW: it is a work in progress.

[16:48] * ZoffixW lols at purl <purl@localhost>

[16:48] <JimmyZ> purl is a old robot

[16:48] <ZoffixW> I say we live it in and declare Perl 6 to be the first language whose development was helped by an AI :P

[16:49] <ZoffixW> I think purl is dead. 'been ages since I've seen her.

[16:49] <ZoffixW> s/live/leave/;

[16:49] <ZoffixW> [Coke], sure, that's understandable... I was just making observations :)\

[16:50] <abraxxa> ZoffixW: that would be 'm' then

[16:50] *** iH2O joined
[16:50] <abraxxa> you can definitely say that it has helped development!

[16:50] <ZoffixW> abraxxa, "m"?

[16:50] <abraxxa> evalbot

[16:50] <ZoffixW> Ah :)

[16:51] <abraxxa> m: say 'Hello ZoffixW!'

[16:51] <camelia> rakudo-moar f94c31: OUTPUT«Hello ZoffixW!␤»

[16:51] <ZoffixW> But "m" is just a tool.. purl.. purl had a soul :P

[16:51] <RabidGravy> m: multi sub foo(Whatever $) { say "whatever" }; multi sub foo("*") { nextwith(*) }; foo("*"); # I thought this should work

[16:51] <camelia> rakudo-moar 518b46: ( no output )

[16:52] <RabidGravy> m: multi sub foo(Whatever $) { say "whatever" }; multi sub foo("*") {foo(*) }; foo("*"); # whereas this does actually work

[16:52] <camelia> rakudo-moar 518b46: OUTPUT«whatever␤»

[16:52] <nadim> Too few positional arguments! Can someone explain to me why the first works and the second not? http://nopaste.linux-dev.org/?870346

[16:52] *** MadcapJake joined
[16:53] <nadim> it does work with two, three, ... elements but not one

[16:53] <TimToady> jnthn: looks good to me

[16:53] <ZoffixW> nadim, $entries doesn't have enough elements to satisfy the -> ... stuff, would be my guess

[16:53] <ZoffixW> Oh, never mind. I misread

[16:54] <nadim> that would also have been my guess but  there are enough elements

[16:54] <ZoffixW> m: my $entries = ( (0 , 0), (1, 1) ) ; say $entries; $entries = ( (0,0 ) ); say $entries

[16:54] <camelia> rakudo-moar 518b46: OUTPUT«((0 0) (1 1))␤(0 0)␤»

[16:55] <ZoffixW> m: my $entries = ( (0 , 0), (1, 1) ) ; say $entries[0]; $entries = ( (0,0 ) ); say $entries[0]

[16:55] <camelia> rakudo-moar 518b46: OUTPUT«(0 0)␤0␤»

[16:55] <ZoffixW> Looks like the ((0,0)) version gets "unfolded" or whatever the terminology is

[16:55] *** n0tjack joined
[16:56] <lucasb> m: my $e = ((0,0),); say $e  # for nadim

[16:56] <camelia> rakudo-moar 518b46: OUTPUT«((0 0))␤»

[16:56] <lucasb> I think it needs the trailing comma

[16:56] <ZoffixW> lucasb++

[16:56] <nadim> the error says 2 arguments expected but got 0. like if it wasn't there at all

[16:56] <ZoffixW> m: my $entries = ( (0 , 0), ) ; for $entries Z 0 .. * -> (($h, $v), $i) { say "$h $v $i" ; }

[16:56] <camelia> rakudo-moar 518b46: OUTPUT«0 0 0␤»

[16:56] <nadim> lucasb: the trailing comma does fix the problem, I tried that

[16:57] <nadim> but that sucks

[16:57] *** donaldh left
[16:58] *** iH2O left
[16:59] *** abraxxa left
[16:59] <RabidGravy> I've got used to the trailing comma

[17:00] <nadim> At least, I would have like to read "if you forget the (you thought optional) comma, your data will be squirelled away. an URL about that would be welcome, there may be other very susprising things to learn

[17:00] *** n0tjack left
[17:01] <nadim> RabidGravy: I'll get used but i have spend some time guessing it. That on top of non flattening, < ( and [ working not the "natural" P5 made a not so exciting afternoon.

[17:01] <ugexe> m: use Test; plan 2; skip-rest; subtest { ok 1; }, "xxx"; ok 1;

[17:01] <camelia> rakudo-moar 518b46: OUTPUT«1..2␤ok 1 - # SKIP <unknown>␤ok 2 - # SKIP <unknown>␤    ok 1 - ␤    1..1␤ok 3 - xxx␤ok 4 - ␤# Looks like you planned 2 tests, but ran 4␤»

[17:02] <ZoffixW> nadim, well, P5 is a different language :) 

[17:02] <dalek> rakudo/nom: 88a8a00 | jnthn++ | src/core/ (4 files):

[17:02] <dalek> rakudo/nom: Make @a[^2] consistent with @a[0,1].

[17:02] <dalek> rakudo/nom: 

[17:02] <dalek> rakudo/nom: That is, it doesn't auto-truncate. Only lazy ranges will now truncate.

[17:02] <dalek> rakudo/nom: An infinite range is automatically lazy; the existing behavior is now

[17:02] <dalek> rakudo/nom: available as @a[lazy ^2].

[17:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/88a8a009b9

[17:02] <ZoffixW> nadim, I'm yet to tell JavaScript folks to support trailing commas without errors :P

[17:03] <dalek> roast: dce936b | jnthn++ | / (8 files):

[17:03] <dalek> roast: Change range indexing semantic tweaks.

[17:03] <dalek> roast: review: https://github.com/perl6/roast/commit/dce936b7f7

[17:05] <nadim> ZoffixW: another language or not, not having a comma at the end of a list with one element making fail when extracting from it is pretty unnatural and unintuitive. the opposite of what any language should be

[17:07] <flussence> sometimes you run out of pegs to hang things on...

[17:07] <ZoffixW> nadim, I'd be interested to know why it behaves like that first. There's likely a good reason why unboxing the way it did makes more sense than not unboxing.

[17:07] <jnthn> Lists are formed by commas, not parentheses. 

[17:07] <ZoffixW> Aha! jnthn++

[17:08] <dalek> roast: e28702a | jnthn++ | S03-operators/assign.t:

[17:08] <dalek> roast: Test for RT #124316.

[17:08] <dalek> roast: review: https://github.com/perl6/roast/commit/e28702a1e0

[17:08] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124316

[17:08] <lucasb> maybe someone can put this trailing comma thing in the language/traps document

[17:08] <ZoffixW> I was about to suggest that

[17:09] <flussence> fwiw, the purpose of perl6's trailing comma strikes me as slightly less insane than perl5's {;…} or rust's {…;}

[17:09] <jnthn> We've been through most combinations of list/array stuff you can imagine, and probably a few you can't, in Perl 6 history :)

[17:09] <ZoffixW> nadim, will you be willing to submit a PR to http://docs.perl6.org/language/traps to https://github.com/perl6/doc/blob/master/doc/Language/traps.pod ?

[17:09] * ZoffixW never had to do the {;...} in P5 in a decade 

[17:10] <flussence> I've used it... once, I think

[17:10] *** _nadim joined
[17:10] <flussence> something gnarly in a map block iirc

[17:10] <ZoffixW> +{ ... } on the other hand -_-

[17:10] <ZoffixW> and +( ) 

[17:11] *** telex left
[17:12] *** telex joined
[17:12] *** moises joined
[17:12] *** Su-Shee joined
[17:13] *** espadrine left
[17:13] <Su-Shee> hi folks, that shortly before christmas release you should maybe add this year's advent calendar on perl6.org :)

[17:13] <ZoffixW> We probably should

[17:13] <ZoffixW> :)

[17:14] * ZoffixW clicks the "self-assign" button

[17:14] *** nadim left
[17:14] <masak> ++ZoffixW

[17:15] *** rurban left
[17:16] <Su-Shee> I made a factoid in "the other channel" with perl6intro and this channel as destination? or are you planning to create a user's channel? 

[17:17] <ZoffixW> I recall TimToady suggesting we split up into multiple channels, but I'd suggest keeping #perl6 as the user's channel, because it's advertised as "the Perl 6 channel" in a ton of places.

[17:18] <jnthn> Su-Shee: Since this is the place most people will come first (and will guess to come first), this should be the users channel :)

[17:18] *** isolation75 joined
[17:18] * dj_goku is a user and is here.

[17:18] <Su-Shee> I agree. also, it'll be very difficult to change later. 

[17:18] <jnthn> Those darn compiler hackers should go make a channel to talk aobut their weird stuff. :)

[17:18] <Su-Shee> jnthn: totally!1! ;)

[17:19] <Su-Shee> ok, we are prepared for the masses flocking on 24th ;)

[17:19] <Ulti> nine yeah so it is bootstrap.pl in panda sorry

[17:20] *** isolation75 left
[17:20] <Ulti> if the masses find IRC at all I'd be surprised 

[17:21] <Ulti> though I guess perl people are a special kind of people

[17:21] <Su-Shee> usally bigger publicity about perl6 finds us in #perl. 

[17:21] <RabidGravy> oh enough of them will to make it quite busy here

[17:21] <RabidGravy> I think I'll be out of here at around that point

[17:23] <flussence> the worst people seem to stick to highly visible areas like reddit, though it does leak sometimes

[17:23] <RabidGravy> never use reddit

[17:23] <Su-Shee> well the n00bs have to be hugged somewhere...

[17:24] <RabidGravy> someone else can do that though eh :)

[17:24] <Su-Shee> anyhow. we're ready to send them over and point them to perl6intro for docs. 

[17:26] <ugexe> anything to avoid Matts Script Archive 2.0

[17:27] <Su-Shee> ha. unavoidable. that WILL happen :)

[17:27] <Su-Shee> also, matt's script archive 6. ;)

[17:29] *** kaare_ left
[17:29] <lucasb> what should the other channel be? #p6p, #perl6porters, #perl6gang, etc.

[17:30] <flussence> #rakudo?

[17:30] *** rindolf joined
[17:30] <jnthn> #perl6guts is one option

[17:31] <Su-Shee> #perl6-devel? perl6-guts? I think that's common with other channels..

[17:31] <jnthn> Or with the hyphen :)

[17:31] <ilmari> #p6p?

[17:31] <flussence> .oO( #perl6-guts, #perl6-entrails, #perl6-digestive-system... )

[17:31] <ilmari> #perl6-bowels

[17:32] <Su-Shee> perl6-plummers :)

[17:32] <Su-Shee> plumbers?

[17:32] <stmuk> #perl6-sausage-factory

[17:32] * jnthn leaves folks with their bikeshed and goes for dinner :)

[17:32] <Su-Shee> plumbers.

[17:33] <jnthn> .oO( by the time I get back it'll be #perl6-dugongs or something )

[17:33] <Su-Shee> perl6-meat-district. 

[17:33] <masak> #perl6-chthulu

[17:33] <ilmari> #perl6-fthagn

[17:34] <ilmari> #perl6-bikeshed

[17:35] <stmuk> #perl6-31337

[17:35] <dalek> perl6.org: f69ac9e | (Zoffix Znet)++ | source/ (3 files):

[17:35] <dalek> perl6.org: List P6 Advent Calendar on home page (Su-Shee++)

[17:35] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/f69ac9eed3

[17:36] <dalek> perl6.org: f47fea6 | (Zoffix Znet)++ | source/camelia-advent.png:

[17:36] <dalek> perl6.org: Add file missed in the last commit

[17:36] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/f47fea6b04

[17:36] <ZoffixW> This is what the above commit looks like, for the curious: http://i.imgur.com/TthJqGX.png

[17:36] <masak> ZoffixW++

[17:37] *** zakharyas left
[17:38] <Su-Shee> one question: I'm looking through the docs - is there any nice tutorial how to create bindings to perl6? and, how to use it with the jvm and incorporate existing java classes "like in clojure"?

[17:39] <dalek> perl6.org: 1580c87 | (Zoffix Znet)++ | source/index.html:

[17:39] <dalek> perl6.org: 2+3+6 is 11, not 12 :) (Fix too-short column grid)

[17:39] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/1580c87b57

[17:40] <stmuk> front-end-devs++ # mad math skillz

[17:41] <ZoffixW> :)

[17:41] <masak> http://act.yapc.eu/lpw2015/talk/6436 -- heh

[17:41] <masak> p6weekly post lists that one as not being about Perl 6

[17:41] <masak> but the tags would suggest it is

[17:42] * stmuk knows nothing about the tags :)

[17:42] <masak> the tags on that description page.

[17:42] *** dakkar left
[17:42] <masak> given that it's Zefram, I would go listen to that talk :> but I'm not going to LPW :/

[17:42] * ZoffixW grins at "whining" tag

[17:46] <dalek> DBIish: a3c20f7 | (Sylvain Colinet)++ | lib/DBDish/SQLite/Native.pm6:

[17:46] <dalek> DBIish: Fix the last native binding Int-> int32e in SQLite

[17:46] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/a3c20f77fc

[17:48] *** kaare_ joined
[17:48] <_nadim> is there a better way to write: my Dog $d;   $d.can(jump) ?? $d.jump !! jump_via_sub($d)

[17:48] *** kjs_ joined
[17:49] *** JimmyZ_ joined
[17:49] <ugexe> $d.?jump // jump_via_sub($d)

[17:50] <ugexe> thats one different way anyway

[17:50] *** skids left
[17:50] <JimmyZ_> .tell [Coke] : I forgot, some commit message with '++', didn't be showed.

[17:50] <yoleaux> JimmyZ_: I'll pass your message to [Coke].

[17:52] *** [TuxCM] joined
[17:52] *** lucasb left
[17:55] *** ZoffixW left
[17:55] <JimmyZ_> .tell [Coke] And should RT reporter be listed, for those who help testing. 

[17:55] <yoleaux> JimmyZ_: I'll pass your message to [Coke].

[17:56] *** JimmyZ_ left
[18:06] *** moises left
[18:12] *** uruwi_ left
[18:16] *** xfix joined
[18:18] <Juerd> Hoi |Tux| 

[18:18] *** edehont joined
[18:18] <[Coke]> m: say "Hi there".fc;

[18:18] <yoleaux> 17:50Z <JimmyZ_> [Coke]: : I forgot, some commit message with '++', didn't be showed.

[18:18] <camelia> rakudo-moar 88a8a0: OUTPUT«hi there␤»

[18:18] <yoleaux> 17:55Z <JimmyZ_> [Coke]: And should RT reporter be listed, for those who help testing.

[18:19] <[Coke]> (perl6-bikeshed) abbreviates nicely to perl6-bs

[18:19] <diakopter> giggle

[18:20] <[Coke]> JimmyZ: anonymous RT submitters don't usually have a name, do they?

[18:20] <[Coke]> even if they do all have names... -1 from me on adding them.

[18:23] *** CIAvash left
[18:24] <[Coke]> Anyone have a perl6 sub for the mark version of .fc ?

[18:25] <[Coke]> so I could have äb, Ab, and áN all canonicalize to the same thing?

[18:25] <[Coke]> dammit. that last one should have a B not an N. ;)

[18:28] <ab5tract> .hug moritz

[18:29] <ab5tract> i hope my comments on the DBIish PR don't come off as too offensive

[18:30] <flussence> is there any possibility of the one feature of the core reading module paths from META6.json coming back post-curli? it was kinda nice to have a free metadata sanity check when running tests...

[18:32] <Skarsnik> there is a Test::Meta

[18:32] *** AlexDaniel joined
[18:32] <ab5tract> DBIish is a crucial module in the ecosystem and i think it deserves a lot of respect. i just have a feeling that there's a more "fully P6" db library hiding in the shadows further down the cave.

[18:32] <Skarsnik> But it's probably not what you mean x=

[18:33] <jnthn> [Coke]: Can't you do that with samemark (admittedly, not very succinctly)?

[18:33] *** kjs_ left
[18:34] *** kjs_ joined
[18:38] *** FROGGS joined
[18:38] *** kjs_ left
[18:39] *** vendethiel joined
[18:39] <FROGGS> o/

[18:39] <yoleaux> 16:35Z <dj_goku> FROGGS: did the unicode loading issue with testers.p6.org for raw json get fixed?

[18:39] <jnthn> o/ FROGGS 

[18:40] <FROGGS> .tell dj_goku not that I'm aware of, last thing I found out is that rakudo's to_json implementation does it right while JSON::Fast's implementation doesnt

[18:40] <yoleaux> FROGGS: I'll pass your message to dj_goku.

[18:40] <FROGGS> hi jnthn 

[18:42] *** domidumont joined
[18:42] <dj_goku> hi FROGGS!

[18:42] <yoleaux> 18:40Z <FROGGS> dj_goku: not that I'm aware of, last thing I found out is that rakudo's to_json implementation does it right while JSON::Fast's implementation doesnt

[18:43] <dj_goku> FROGGS: interesting.

[18:44] <FROGGS> dj_goku: I have no idea where that BELL byte comes from though

[18:44] <FROGGS> so, the best approach might be to fix JSON::Fast

[18:44] <dj_goku> FROGGS: but I thought it was using a dancer app and not p6?

[18:45] <dj_goku> or is there a JSON::Fast for p5?

[18:45] <FROGGS> dj_goku: but panda creates the json blob and transfers it, and this blob is to blame

[18:46] <colomon> Could not find Panda:ver<True>:auth<True>:api<True> in:

[18:46] <colomon>     /home/colomon/.perl6/2015.11-311-gf94c31e

[18:46] <colomon>     /home/colomon/.rakudobrew/moar-nom/install/share/perl6/site

[18:46] <colomon> :\

[18:46] <diakopter> [OT] anyone message me if you know anything about the Qlik Sense product

[18:46] <[TuxCM]> If I remove the dep to Pod::Coverage from LibraryMake and install that from the git checkout (PASS)

[18:47] *** Actualeyes1 left
[18:47] <[TuxCM]> the Inline::Perl5 still FAILs:

[18:47] <[TuxCM]> ==> Testing Inline::Perl5

[18:47] <[TuxCM]> ===SORRY!=== Error while compiling /pro/3gl/CPAN/rakudobrew/Inline-Perl5-git/.panda-work/1448995538_1/lib/Inline/Perl5.pm6

[18:47] <[TuxCM]> Undeclared name:

[18:47] <[TuxCM]>     EnumMap used at line 836

[18:48] <[Coke]> jnthn: ENODOC on samemark. pointer?

[18:48] <[Coke]> (I'm having to avoid m:i:m// because it's slow, and because i and m together with $vars explodes)

[18:49] <dj_goku> FROGGS: ahh, is there anyway I can help? Is all the code available?

[18:50] * [Coke] finds a bunch of samemark NYI in the spec tests.

[18:50] <[Coke]> m: &samemark.WHAT.say

[18:50] <camelia> rakudo-moar 88a8a0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/OKXp84LPIW␤Undeclared routine:␤    samemark used at line 1. Did you mean 'samecase'?␤␤»

[18:50] * flussence grumbles at github *still* requiring me to compile openssh client with RSA support...

[18:51] *** Su-Shee_ joined
[18:51] <FROGGS> dj_goku: it is here: https://github.com/timo/json_fast

[18:51] *** ZoffixW joined
[18:51] *** Su-Shee left
[18:52] <ZoffixW> colomon, that's due to recent major packaging change. Panda will now precompile stuff. I solved it like this, but I suggest you try this fix first without nuking rakudobrew/perl dirs: http://irclog.perlgeek.de/perl6/2015-12-01#i_11634091

[18:52] *** muraiki left
[18:52] *** zakharyas joined
[18:53] <colomon> ZoffixW: I don’t mind starting by nuking my current build of moar under rakudobrew

[18:53] <colomon> nuking the entire thing seems somewhat extreme

[18:53] <ZoffixW> It really might be as simple as running that bootstrap.pl script

[18:53] <ZoffixW> NUKE EVERYTHING!

[18:53] <ZoffixW> sorry... that just slipped out...

[18:54] <FROGGS> m: say to-json "\x07\b" # this might be a nice test case... I bet JSON::Fast outputs both differently

[18:54] <camelia> rakudo-moar 88a8a0: OUTPUT«"\u0007\b"␤»

[18:54] *** lostinfog joined
[18:55] <FROGGS> dj_goku: ^^

[18:56] <colomon> ZoffixW: “I say we take off and nuke the entire site from orbit. It's the only way to be sure.”

[18:56] *** edehont left
[18:57] * ZoffixW tries to remember the reference and fails

[18:57] <geekosaur> one of the "alien" movies

[18:57] <ZoffixW> Ah http://knowyourmeme.com/memes/nuke-it-from-orbit

[18:58] <dj_goku> FROGGS: I get this: > to-json("\x07\b")

[18:58] <dj_goku> "

[18:58] <dj_goku> I don't get that that means.

[18:58] *** Su-Shee_ is now known as Su-Shee

[18:58] <ZoffixW> I get "\u0007\b" on my perl6, built fresh today

[18:59] <dj_goku> sorry that is JSON::Fast to-json

[18:59] <FROGGS> dj_goku: it means that these special chars dont get converted to valid json

[18:59] <dj_goku> ahh

[18:59] <dj_goku> welp, that isn't good.

[19:01] <[Coke]> m: my $a=${:email($["unknown"]), :name($["Zoffix Znet", "zoffix"])}; say $a.perl; for $a<name> -> $name { say $name}

[19:01] <camelia> rakudo-moar 88a8a0: OUTPUT«${:email($["unknown"]), :name($["Zoffix Znet", "zoffix"])}␤[Zoffix Znet zoffix]␤»

[19:01] <[Coke]> what dumb thing am I doing here that makes that one line of output, not two?

[19:01] <arnsholt> FROGGS: See my latest commit to Rakudo for the tweaked Pointer tests. Look good to you?

[19:02] <FROGGS> arnsholt: aye :o)

[19:02] <arnsholt> Excellent

[19:03] <geekosaur> [Coke], doesn't the $[] make it a single item as far as the for is concerned?

[19:03] <arnsholt> Another thing that struck me is that with the current implementation, there are two ways to represent a NULL pointer: the Pointer type object itself, and Pointer.new(0)

[19:03] <arnsholt> We should probably fix that

[19:03] <dj_goku> how can I find out which method I am using, as in what is it tied to.

[19:03] <flussence> m: my $a=${:email($["unknown"]), :name($["Zoffix Znet", "zoffix"])}; say $a.perl; for $a<name>.flat -> $name { say $name}

[19:03] <camelia> rakudo-moar 88a8a0: OUTPUT«${:email($["unknown"]), :name($["Zoffix Znet", "zoffix"])}␤Zoffix Znet␤zoffix␤»

[19:03] *** lizmat joined
[19:03] <arnsholt> And of course Pointer[int32] is a different NULL pointer from Pointer[int64], but that's arguably a feature rather than a bug =)

[19:04] <rindolf> FROGGS: hi, sup?

[19:04] <dj_goku> if I import JSON::Tiny which exports to-json, how do I know I am using JSON::Tiny vs built-in

[19:04] <[Coke]> got that from - my $a; $a<name>.push("thing"); $a<name>.push("thing2") , wasn't expecting to have to flatten. ah well.

[19:04] <[Coke]> flussence++ geekosaur++

[19:05] <colomon> hmmm, even after blowing moar-nom away and starting from scratch, I still get that message.

[19:05] <FROGGS> m: say &to-json === CORE::<&to-json> # dj_goku: try that

[19:05] <camelia> rakudo-moar 88a8a0: OUTPUT«True␤»

[19:07] <dj_goku> FROGGS: ahh thanks.

[19:08] <flussence> m: say %*CUSTOM_LIB

[19:08] <camelia> rakudo-moar 88a8a0: OUTPUT«Dynamic variable %*CUSTOM_LIB not found␤  in block <unit> at /tmp/Tc0xJT9_Nj:1␤␤Actually thrown at:␤  in block <unit> at /tmp/Tc0xJT9_Nj:1␤␤»

[19:08] <flussence> m: say $*REPO; say %*CUSTOM_LIB # weird

[19:08] <camelia> rakudo-moar 88a8a0: OUTPUT«inst#/home/camelia/.perl6/2015.11-314-g88a8a00␤home => inst#/home/camelia/.perl6/2015.11-314-g88a8a00, perl => inst#/home/camelia/rakudo-m-inst-2/share/perl6, site => inst#/home/camelia/rakudo-m-inst-2/share/perl6/site, vendor => inst#/home/camelia/rakud…»

[19:11] *** spider-mario joined
[19:14] <ZoffixW> erm

[19:16] *** uruwi joined
[19:16] <MadcapJake> I haven't gotten an email yet about gaining access to the Perl 6 advent blog.

[19:16] <ZoffixW> MadcapJake, did you register a wordpress account?

[19:16] <japhb> flussence: Isn't $*REPO a linked list?  ISTR seeing that deep in the commit messages

[19:17] <diakopter> (and did you ask moritz for an invite)

[19:17] <japhb> m: say DUMP($*REPO)

[19:17] <camelia> rakudo-moar 88a8a0: OUTPUT«Method 'id' must be implemented by CompUnit::Repository because it is required by a role␤  in any compose_method_table at gen/moar/m-Metamodel.nqp:2680␤  in any apply at gen/moar/m-Metamodel.nqp:2690␤  in any compose at gen/moar/m-Metamodel.nqp:2826…»

[19:17] *** skids joined
[19:17] <MadcapJake> I messaged moritz my email, I already have a WP account

[19:17] <japhb> m: dd $*REPO

[19:17] <camelia> rakudo-moar 88a8a0: OUTPUT«CompUnit::Repository::Installation $var = CompUnit::Repository::Installation.new('/home/camelia/.perl6/2015.11-314-g88a8a00')␤»

[19:17] <japhb> dd $*REPO.^methods

[19:17] <japhb> m: dd $*REPO.^methods

[19:17] <camelia> rakudo-moar 88a8a0: OUTPUT«Method 'iterator' must be implemented by Iterable because it is required by a role␤  in any compose_method_table at gen/moar/m-Metamodel.nqp:2680␤  in any apply at gen/moar/m-Metamodel.nqp:2690␤  in any compose at gen/moar/m-Metamodel.nqp:2826␤  in…»

[19:18] <japhb> Sometime since GLR our debugging tools got less effectual.

[19:18] <ZoffixW> MadcapJake, are you able to go to this page and edit it? https://perl6advent.wordpress.com/

[19:19] <japhb> m: dd $*REPO.^methods>>.name

[19:19] <camelia> rakudo-moar 88a8a0: OUTPUT«List $var = $("BUILD", "writeable-path", "can-install", "install", "files", "need", "load", "id", "short-id", "loaded", "precomp-repository", "path-spec", "repo-chain", "new", "installed", "Str", "gist", "perl", "WHICH", "<anon>", "<anon>")␤»

[19:19] <MadcapJake> The blog selection on the left side of the post page does not have perl6advent listed

[19:19] <ZoffixW> MadcapJake, what's your username?

[19:20] <MadcapJake> wennefer

[19:20] *** ggoebel7 left
[19:20] *** nadim joined
[19:20] <ZoffixW> MadcapJake, "Invitation(s) sent."

[19:21] <MadcapJake> ZoffixW: thanks!

[19:21] *** ggoebel7 joined
[19:21] <japhb> m: my $repo = $*REPO; repeat { say $repo; $repo .= repo-chain; } while $repo;

[19:21] <camelia> rakudo-moar 88a8a0: OUTPUT«inst#/home/camelia/.perl6/2015.11-314-g88a8a00␤(inst#/home/camelia/.perl6/2015.11-314-g88a8a00 inst#/home/camelia/rakudo-m-inst-2/share/perl6/site inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor inst#/home/camelia/rakudo-m-inst-2/share/perl6)␤Met…»

[19:21] <japhb> flussence: ^^

[19:22] *** _nadim left
[19:22] <japhb> Actually, I guess you can just do:

[19:23] <japhb> m: msay $*REPO.repo-chain;

[19:23] <camelia> rakudo-moar 88a8a0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/t2dgpzwQni␤Undeclared routine:␤    msay used at line 1. Did you mean 'say'?␤␤»

[19:23] <japhb> m: say $*REPO.repo-chain;

[19:23] <camelia> rakudo-moar 88a8a0: OUTPUT«(inst#/home/camelia/.perl6/2015.11-314-g88a8a00 inst#/home/camelia/rakudo-m-inst-2/share/perl6/site inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor inst#/home/camelia/rakudo-m-inst-2/share/perl6)␤»

[19:23] <japhb> Yeah, that does it.

[19:24] *** [TuxCM] left
[19:25] <flussence> the thing I'm trying to figure out now is... which of those are going to have a populated */bin/? Yesterday it was .[0], right now it's .[1].

[19:26] <moritz> flussence: panda tries to install into site if it's writable, and into home otherwise

[19:27] <stmuk> why does panda run itself as odd hashes under site/resources?

[19:30] *** cdg left
[19:31] <flussence> stmuk: precomp

[19:32] <flussence> it looks like the `panda` command itself is generated by something else now

[19:32] <japhb> Has the fallout from the curli merge mostly finished now?  Or is there still active fixing going on?

[19:33] <stmuk> AFAIK it mostly works with a few oddities - some of which may be features :)

[19:33] <flussence> some things still glow in the dark, but it seems usable enough to write code again

[19:34] <AlexDaniel> … if only I could get my perl6 to work…

[19:34] *** uruwi left
[19:34] <diakopter> stmuk: did you hear from tadzik on your rakudobrew PR?

[19:34] <ZoffixW> japhb, in my experience there are PRs for fixes, but they're yet unmerged.

[19:34] <stmuk> diakopter: nope

[19:34] <AlexDaniel> aaahh

[19:35] <AlexDaniel> well, perhaps my problem is associated with this PR

[19:35] <diakopter> https://github.com/tadzik/rakudobrew/pull/66

[19:35] <ZoffixW> AlexDaniel, probably not

[19:36] <stmuk> the sha2 hash files are source not bytecode though?

[19:36] <ZoffixW> That is if your problem is still what I saw you mention a few ours back about some sort of .so

[19:36] <AlexDaniel> ZoffixW: :(

[19:37] <AlexDaniel> what does this PR fix then?

[19:37] <flussence> aack, setting PERL6LIB=lib makes «use newline» not work.

[19:37] <ZoffixW> AlexDaniel, when you rakudobrew build moar or build-panda it tries to run "rebootstrap.pl" which is now called "bootstrap.pl"

[19:38] <AlexDaniel> ZoffixW: yes I see that in the diff, but what is going to happen if it attempts to call the wrong thing?

[19:38] <ZoffixW> AlexDaniel, it just stops.

[19:39] <ZoffixW> AlexDaniel, and panda throws an error about :ver<True>:auth<True> etc, which is fixed by running that bootstrap.pl manuall (though likely you have to nuke your install first). I nuked .rakudobrew/.perl6 this morning and installed stuff fresh and ran that bootstrap.pl manuall and everything works great for me so far

[19:40] <AlexDaniel> let's see… maybe it is associated

[19:40] *** [TuxCM] joined
[19:40] <stmuk> or just modify your rakudobrew by deleting the two chars from rebootstrap.pl

[19:41] <AlexDaniel> that's what I did

[19:43] <diakopter> ZoffixW: any other fixes/PRs pending that you know of?

[19:43] *** jferrero joined
[19:45] <ZoffixW> diakopter, PSGI (https://github.com/supernovus/perl6-psgi/pull/4) and HTTP::Easy (https://github.com/supernovus/perl6-http-easy/pull/29) on which Bailador depends. and http://modules.perl6.org/repo/Pluggable is now FUBAR,as it relies on @*INC and there's [currently] no way to fix its functionality

[19:45] <diakopter> what does FUBAR stand for

[19:46] <Hotkeys> Fucked Up Beyond All Repair

[19:46] <diakopter> oic.

[19:46] <ZoffixW> https://en.wikipedia.org/wiki/Military_slang#Acronym_slang_in_US_Military :)

[19:46] *** uruwi joined
[19:47] <Hotkeys> military slang is so aggressive

[19:47] <flussence> m: use newline :crlf;

[19:47] <camelia> rakudo-moar 88a8a0: OUTPUT«===SORRY!===␤Could not find newline:ver<True>:auth<True>:api<True> in:␤    /home/camelia/.perl6/2015.11-314-g88a8a00␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-…»

[19:47] <flussence> okay, nothing to do with PERL6LIB then...

[19:48] <RabidGravy> hoo

[19:49] *** yqt joined
[19:51] * ZoffixW just stole someone's IRC password

[19:51] <ZoffixW> :P

[19:51] <Hotkeys> rude

[19:51] <[TuxCM]> hdg77^7##-_=1!

[19:51] <ZoffixW> Won't use it, but still titillating :P

[19:52] * flussence jumped through ssl cert hoops for an hour just to not have to do that

[19:52] <AlexDaniel> https://en.wikipedia.org/w/index.php?title=List_of_military_slang_terms&oldid=562764463

[19:52] *** cpage_ left
[19:52] <AlexDaniel> “BOHICA (bend over, here it comes again)” oh well…

[19:52] <ZoffixW> :S

[19:53] <stmuk> oh the hashes are when panda installs itself

[19:53] <ab5tract> guh.. change topics? we've got plenty of our own in the hacker's dictionary :)

[19:53] *** cpage_ joined
[19:55] *** uruwi_ joined
[19:55] <Juerd> lizmat: Hoi

[19:55] <moritz> [Coke]: I'm subscribed to a service that's supposed to notify me when one of my accounts is compromised. It just sent me an email because my email address showed up in a pastbin paste :-)

[19:55] <ab5tract> acronyms, that is. can't open that army slang link myself.

[19:55] <ab5tract> triggers

[19:55] <diakopter> moritz: that's pretty neat

[19:55] <ZoffixW> moritz, hoa! :) Was pasted by someone who compromized you tho?

[19:55] <moritz> [Coke]: seems it was related to contributors to perl6/spec, and maybe your doing :-)

[19:55] <ZoffixW> lol

[19:56] <awwaiid> greetings!

[19:56] <moritz> and they say that email addresses showing up in pastebins is "often" an early warning sign of a leak :-)

[19:56] <moritz> hi awwaiid 

[19:56] <lizmat> for the Dutch inclined: http://www.nllgg.nl/sites/default/files/lezingen/Perl%206%20Introductie.pdf   # T-Dose slides

[19:56] <awwaiid> Happy Tuesdayish

[19:57] <[Coke]> Ok. https://gist.github.com/coke/63c7bbb82f075c7bb1f5 is now also processing Rakudo's Credits file, which helps collapse a bunch of nicks/names and get better names in some cases. Down to 675 authors from 699. shimmerfairy's record, for example, is now collapsed.

[19:57] <[Coke]> moritz: sorry. :|

[19:58] <[Coke]> I swear these emails are all culled from git repos & CREDITS files. 

[19:58] *** uruwi left
[19:58] <moritz> [Coke]: no worries at all, my email address is public in the git repos

[19:59] <moritz> [Coke]: I just found it amusing that the "hacking" notification was set off by gathering credits :-)

[19:59] <AlexDaniel> Worthington@. <Worthington@.(none)> jworthington <jworthington@c213334d-75ef-0310-aa23-eaa082d1ae64>

[20:00] <AlexDaniel> I think that these are duplicates

[20:00] <[Coke]> AlexDaniel: yes, that's probably jnthn.

[20:00] <b2gills> [Coke]: Now can I tell you that I want ｢b2gills｣ associated with ｢Brad Gilbert｣?

[20:00] <[Coke]> by adding it to Rakudo's CREDITS file.

[20:01] <[Coke]> add a line of U: b2gills

[20:01] <diakopter> stmuk: I merged those two rakudobrew PRs; can you test it

[20:02] <[Coke]> ah, nevermind.

[20:02] <[Coke]> b2gills: the email address you have listed there should already cover this.

[20:02] *** domidumont1 joined
[20:02] <jnthn> AlexDaniel: Wonder what on earth machine I was committing that from... :)

[20:02] <[Coke]> b2gills: are you looking at the latest version?

[20:02] <jnthn> But yeah, looks like me

[20:03] <b2gills> https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contribs-out-L209

[20:03] <stmuk> diakopter: ok

[20:03] <[Coke]> I'll just skip anyone whose name ends in a literal "@."

[20:03] <AlexDaniel> There is also a good chance that this is TimToady: larry <larry@c213334d-75ef-0310-aa23-eaa082d1ae64>

[20:03] <[Coke]> b2gills: in the announcement, that line will show up as Brad Gilbert

[20:04] <[Coke]> AlexDaniel: adding "larry" to larry's credits file will handle that.

[20:04] <[Coke]> is that not what you want?

[20:04] *** Peter_R joined
[20:04] <b2gills> Which is very non-unique ( and  associated with a tennis player )

[20:04] <[Coke]> Make your CREDITS entry name look like what you want.

[20:04] <MadcapJake> What is the difference between `!===` and `!=` operators?

[20:05] *** domidumont left
[20:05] <MadcapJake> Is `!===` just oppositve value identity?

[20:05] <[Coke]> there are 2 standards, e.g.: 'Will "Coke" Coleda' or "Jim Keenan (kid51)". right now I'm eliding anything in parens, but I can keep that.

[20:05] <flussence> !=== is the ! metaop on ===, isn't it?

[20:06] <flussence> (I think there's already a !== defined for that)

[20:06] <b2gills> I didn't know how you wanted it typed out if it wasn't in the middle

[20:06] <MadcapJake> In the docs I only see `!=` and `===` operators

[20:06] *** kaare_ left
[20:07] <moritz> you can negate any sufficiently bool-y infix op with a leading !

[20:07] <moritz> m: say 5 !> 5

[20:07] <camelia> rakudo-moar 88a8a0: OUTPUT«True␤»

[20:07] <b2gills> I was thinking of placing it inside of ｢｣ <> or «»

[20:07] <flussence> --target=ast tells me !=== and !== both generate a METAOP_NEGATE, while != doesn't

[20:08] <moritz> flussence: yes, that's special-cased, because it doesn't negate the assignment operator :-)

[20:08] <MadcapJake> flussence: what's that mean?

[20:08] *** zakharyas left
[20:08] <FROGGS> rudi_s_: I've got a fix btw

[20:09] <MadcapJake> moritz: oh so it's a prefix operator for operators :D

[20:10] <MadcapJake> So then `!=` is just a numeric not-equal operator and `===` is a value identity operator (which can be negated with a bang)

[20:10] <moritz> MadcapJake: right

[20:10] * gfldex .oO( Perl6 is fully operational )

[20:10] <moritz> m: say 3 !!= 3

[20:10] <camelia> rakudo-moar 88a8a0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tRWm1JJtxd␤Confused␤at /tmp/tRWm1JJtxd:1␤------> 3say 37⏏5 !!= 3␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifie…»

[20:10] <moritz> m: say 3 !!== 3

[20:10] <camelia> rakudo-moar 88a8a0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/588CprLrbm␤Confused␤at /tmp/588CprLrbm:1␤------> 3say 37⏏5 !!== 3␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifi…»

[20:10] <moritz> heh, it doesn't like that :-)

[20:11] <moritz> MadcapJake: we have more meta operators also :-)

[20:11] <moritz> m: say 1 + 2; say [+] 1, 2, 3, 4 5

[20:11] <flussence> m: say 1 != '1', 1 !== '1', 1 !=== '1'

[20:11] <camelia> rakudo-moar 88a8a0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MtQCUv4wkY␤Two terms in a row␤at /tmp/MtQCUv4wkY:1␤------> 3say 1 + 2; say [+] 1, 2, 3, 47⏏5 5␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement e…»

[20:11] <camelia> rakudo-moar 88a8a0: OUTPUT«FalseFalseTrue␤»

[20:11] <moritz> m: say 1 + 2; say [+] 1, 2, 3, 4,  5

[20:11] <camelia> rakudo-moar 88a8a0: OUTPUT«3␤15␤»

[20:11] <AlexDaniel> m: say "5" R== 5

[20:11] <camelia> rakudo-moar 88a8a0: OUTPUT«True␤»

[20:11] <moritz> the [] turn the infix + operator into a list operator (reduce)

[20:11] <AlexDaniel> m: say "5" RRRRR== 5 # …

[20:11] <camelia> rakudo-moar 88a8a0: OUTPUT«True␤»

[20:11] <moritz> m: say 1, 1, 1 Z+ 2, 3, 4

[20:11] <camelia> rakudo-moar 88a8a0: OUTPUT«(3 4 5)␤»

[20:12] <moritz> the Z meta operator threads it through two or more lists

[20:12] <AlexDaniel> m: say 1, 1, 1 RRRRRRZ+ 2, 3, 4

[20:12] <camelia> rakudo-moar 88a8a0: OUTPUT«(3 4 5)␤»

[20:12] <MadcapJake> So `!==` is equivalent to `!=` then right?

[20:12] <moritz> right

[20:13] <flussence> m: say [>] 2, 1, 3; say [R<=] 2, 1, 3; # bug?

[20:13] <camelia> rakudo-moar 88a8a0: OUTPUT«False␤True␤»

[20:13] *** darutoko left
[20:14] <TimToady> m: say 3 ![!==] 3

[20:14] <camelia> rakudo-moar 88a8a0: OUTPUT«True␤»

[20:14] <TimToady> that's how you have to write that

[20:14] <MadcapJake> cool, meta-operators are really slick, for sure! Just have to special-case a couple of these equality ones so that Fira Code doesn't ligaturize things that don't make sense to be ligaturized.

[20:14] <TimToady> m: say 3 ![!=] 3

[20:14] <camelia> rakudo-moar 88a8a0: OUTPUT«True␤»

[20:14] <TimToady> or that

[20:15] <TimToady> m: say 3 !! 3

[20:15] <camelia> rakudo-moar 88a8a0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/dqVQvQtldN␤Confused␤at /tmp/dqVQvQtldN:1␤------> 3say 37⏏5 !! 3␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier…»

[20:15] *** vendethiel left
[20:15] <TimToady> I think STD complained about missing ?? on that one

[20:15] <AlexDaniel> std: say 3 !! 3

[20:15] <camelia> std : OUTPUT«No such file or directory»

[20:16] <camelia> std : OUTPUT«(timeout)cat: /home/camelia/std/snap/revision: No such file or directory␤msg <diakopter> rakudo-moar: say 3 !=![!=] 3␤msg <diakopter> rakudo-moar: say 3 !==![!=] 3␤msg <diakopter> rakudo-moar: say 3 !==!==!==![!=] 3␤»

[20:16] <AlexDaniel> m what

[20:16] <diakopter> m: say 3 !===![!=] 3

[20:16] <camelia> rakudo-moar 88a8a0: OUTPUT«True␤»

[20:16] <ZoffixW> hah

[20:16] <diakopter> yah itsa hilarity

[20:17] <stmuk> rakudobrew works fine for me (at least from scratch)

[20:17] <AlexDaniel> stmuk: it was merged

[20:17] <TimToady> m: say 3 ![!=]![!=] 3

[20:17] <camelia> rakudo-moar 88a8a0: OUTPUT«False␤»

[20:17] <MadcapJake> fira code turns `!=` into `≠` but it looks weird when done with `==` or `===` (`≠=` or `≠==`), but I can use the syntax highlighter to prevent them from providing ligatures in those situations (I've done that for a number of other operators too)

[20:18] *** vendethiel joined
[20:18] <AlexDaniel> oh wow!

[20:18] *** sufrostico joined
[20:18] <AlexDaniel> .u ≔

[20:18] <yoleaux> U+2254 COLON EQUALS [Sm] (≔)

[20:18] <TimToady> yup

[20:18] <AlexDaniel> .u ≕

[20:18] <yoleaux> U+2255 EQUALS COLON [Sm] (≕)

[20:18] <ZoffixW> :o

[20:18] <ZoffixW> m: my $x ≔ 42; say $x

[20:18] <camelia> rakudo-moar 88a8a0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sISwA1Osco␤Confused␤at /tmp/sISwA1Osco:1␤------> 3my $x7⏏5 ≔ 42; say $x␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤     …»

[20:18] <AlexDaniel> m: my $a ≔ 5;

[20:18] <camelia> rakudo-moar 88a8a0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0PsY9GCJsF␤Confused␤at /tmp/0PsY9GCJsF:1␤------> 3my $a7⏏5 ≔ 5;␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        state…»

[20:18] <TimToady> a little hard to distinguish in this font

[20:19] <ZoffixW> same here.

[20:19] <TimToady> and it's not like we actually want to encourage binding all over the place...

[20:19] <MadcapJake> Fira Code automatically turns `:=` into a ligature that looks like `≔`, no need to use unicode.

[20:20] <flussence> m: say (([R<] (^10).pick(*)) xx 100).classify(*.so).map(+*.value.elems) # without the «R», this contains 100 Falses

[20:20] <camelia> rakudo-moar 88a8a0: OUTPUT«(79 21)␤»

[20:20] <AlexDaniel> .u ⧤

[20:20] <yoleaux> U+29E4 EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE [Sm] (⧤)

[20:20] <TimToady> looks pretty odd in firefox too

[20:21] <AlexDaniel> OH WELL

[20:21] <AlexDaniel> .u ⩵

[20:21] <yoleaux> U+2A75 TWO CONSECUTIVE EQUALS SIGNS [Sm] (⩵)

[20:21] <AlexDaniel> .u ⩶

[20:21] <yoleaux> U+2A76 THREE CONSECUTIVE EQUALS SIGNS [Sm] (⩶)

[20:21] <TimToady> now if only we could learn to program in proportional fonts...

[20:21] <AlexDaniel> yes :(

[20:22] <stmuk> . o O ( or use colour like the new FORTH )

[20:22] <MadcapJake> https://github.com/tonsky/FiraCode

[20:22] <mspo> I can't figure out how to type a unicode character into vi over ssh

[20:23] <TimToady> can't use ^K for some reason?

[20:23] <TimToady> there are lots of digraphs in vim

[20:23] <mspo> what does that do?

[20:23] <TimToady> ^K>> makes » for instance

[20:23] <AlexDaniel> anyone who nuked their rakudobrew, what do you have in rakudobrew/bin directory?

[20:23] <TimToady> I doubt you'll find a digraph for ⧤ though :)

[20:23] <flussence> <ctrl+v> u <xdigit>**4 works in vim

[20:24] <TimToady> I usually use gnome's ctrl/shift u for that

[20:24] <TimToady> does vim allow 5 digit hex tehre?

[20:24] <ZoffixW> AlexDaniel, http://fpaste.scsys.co.uk/502230

[20:24] <TimToady> *there

[20:25] <AlexDaniel> ZoffixW: okay, correct

[20:25] <AlexDaniel> that's what I had before I started having issues

[20:25] <MadcapJake> AlexDaniel: moar, nqp-m, perl6-debug-m, perl6-m, rakudobrew, nqp, perl6, perl6-gdb-m, perl6-valgrind-m, rakudobrew.bat

[20:25] <AlexDaniel> now I only have rakudobrew and rakudobrew.bat

[20:25] <TimToady> the gnome sequence works in irssi too, is why I prefer it

[20:25] <AlexDaniel> what could be wrong?

[20:25] <AlexDaniel> I saw no errors during the installation process…

[20:25] <mspo> <shrug> terminal.app + ssh + netbsd + screen + vim seems like too much to get any of these fancy key sequences to work :)

[20:26] <TimToady> but mostly I don't use ^K in vim 'cuz I just use my compose key consistently

[20:26] <TimToady> well, you sure you have vim there, and not nvi?

[20:26] <mspo> TimToady: yeah I'm explicitly using vim

[20:26] <mspo> instead of vi (nvi)

[20:27] <TimToady> does it display unicode okay?

[20:27] <mspo> I just got it working in this channel recently (at least somewhat)

[20:28] <TimToady> and your terminal doesn't, like, use ^K for an escape?

[20:28] <mspo> I see the n/l

[20:28] * flussence checked the help files, looks like vim's is a fixed 4 hex char input...

[20:28] <flussence> but gvim does the ctrl+shift+u thing, so that helps

[20:29] <TimToady> can you insert a ^K into your vim with ^V^K?

[20:29] *** Ch0c0late joined
[20:30] <TimToady> also, there are variants of vim that are compiled without various features, so you might've got one of those

[20:30] <mspo> TimToady: yes.  I just did ^k >> in vim and it gave me a '?' so I think it did something

[20:30] <mspo> cat -vet shows: M-;$

[20:30] <TimToady> maybe it's confused between latin-1 and utf-8 somehow

[20:31] <TimToady> what does it say the fileencoding is?

[20:31] <mspo> foo: ISO-8859 text

[20:31] <TimToady> that's latin-1

[20:33] <TimToady> that's file's output right? what does vim say for encoding when you :set all

[20:33] * AlexDaniel feels so happy that a lot of stuff is UTF8 by default nowadays

[20:34] <mspo> latin1

[20:35] <TimToady> you want that to default to utf-8, maybe your LANG is set wrong; mine is LANG=en_US.UTF-8

[20:35] *** _mg_ joined
[20:35] <TimToady> (the env var)

[20:35] <mspo> thanks

[20:36] <mspo> playing around with it

[20:36] <TimToady> well, that should give you some knobs to tweak anyway :)

[20:38] *** domidumont1 left
[20:38] <Skarsnik> moritz, hm I have issue with git. I am trying to recommit, I reset, change some stuff and recommit, but It does want to rebase because I changed stuff

[20:39] <AlexDaniel> Skarsnik: well… uhm… perhaps you can --force it, but it sounds like you are doing something scary

[20:40] *** jeffa joined
[20:40] <Skarsnik> root@testperl6:~/piko/DBIish# LC_ALL=C git rebase -i HEAD~1

[20:40] <Skarsnik> Cannot rebase: You have unstaged changes.

[20:40] <Skarsnik> Please commit or stash them.

[20:40] <Skarsnik> how I stash them? x)

[20:40] <geekosaur> git stash

[20:40] <geekosaur> and then git stash pop to reapply after

[20:40] <Skarsnik> Oh ok, thx :)

[20:43] <AlexDaniel> OK I think that I got it working!

[20:43] <Skarsnik> He refuse to push now, saying it's behind...

[20:43] <AlexDaniel> Skarsnik: well, that's what I said…

[20:44] <AlexDaniel> Skarsnik: are you sure that you want to change the history?

[20:45] <AlexDaniel> It seems like the problem is that you can only have rakudobrew in ~/.rakudobrew

[20:45] <jeffa> git rebase, not git revisionist ;)

[20:45] <geekosaur> ...why would you want to push something based on HEAD~1?

[20:45] <mspo> TimToady: got it fixed up a little bit and also discovered screen's ctrl-a ctrl-v

[20:45] <AlexDaniel> it is kinda weird, because it was working just fine previously

[20:46] <Skarsnik> I wanted to cancel a commit

[20:46] <Skarsnik> I think I will just do another commit to remove stuff

[20:46] <FROGGS> Skarsnik: just revert it, no?

[20:46] <mspo> now the output form camelia looks even better

[20:47] <Skarsnik> FROGGS, I revert and repush?

[20:48] <FROGGS> revert and push, there is no repush

[20:48] <AlexDaniel> mspo: ｢｣〈〉αβγΔ←↑↓→↔⟲≤≥≈≠∘⋅⋆∙∞✓✗ :)

[20:48] <FROGGS> git revert creates a new commit that undoes the said changes

[20:48] *** sQuEE is now known as sQuEE`

[20:49] <[Coke]> b2gills: I've added a local CREDITS file to help with this preferred name thing so we don't have to go to rakudo/CREDITS if we don't want to.

[20:49] <mspo> AlexDaniel: looks good :)

[20:50] <Skarsnik> pff, How I revert to the last push that worked?

[20:50] <ZoffixW> Skarsnik, https://xkcd.com/1597/

[20:50] <ZoffixW> :)

[20:51] <geekosaur> if you haven't pushed that commit upstream then stash changes again and "git reset --hard HEAD~1" to wipe that commit.

[20:51] * geekosaur has had to do that a few times on other projects

[20:51] *** abaugher_ joined
[20:52] <Skarsnik> Zoffix, so true x)

[20:53] <timotimo> sooo much backlog

[20:53] <yoleaux> 16:46Z <dj_goku> timotimo: hey I saw you commited the SEQ change, but did you see my test change (roundtrip)?

[20:53] *** ZoffixW left
[20:53] <timotimo> i feel like not reading all of it d|

[20:54] <timotimo> dj_goku: i saw it, but the tests are stolen pretty much 1:1 from JSON::Tiny and I'd really like to understand the test a bit more rather than just "fixing" the test; it's talking about an "array of num", but there are only "Rat" objects in there ...

[20:54] <Skarsnik> rah he use his local stuff, not the server stuff, *** this ***

[20:55] <flussence> mildly useful discovery of the day: `D=~/.config/git/ignore; mkdir -p $D; echo '**/.precomp' | tee -a $D/ignore` gets rid of the curli nag in every repo

[20:55] <flussence> whoops, s:1st/'/ignore'//;

[20:55] <AlexDaniel> flussence: quotes around "$D" please :)

[20:56] <flussence> that too... geez I'm usually better at shell than this :)

[20:56] <jnthn> https://gist.github.com/jnthn/f3a691016c20f0cc4cfa is a proposal for how we'll handle branches, releases, the spectests, and language versioning around and after 6.c. I've passed it around a few people for initial private review; feel free to leave comments on the gist if you have 'em.

[20:57] <jnthn> (Or discuss here, but I'm teaching the next few days and liable to miss things in the backlog.)

[20:57] <[Coke]> jnthn++ Thank you!

[20:57] *** n0tjack joined
[20:57] <AlexDaniel> “Dynamic variable @*INC not found” oh no…

[20:57] <TimToady> jnthn: surely samemark is NYI?

[20:58] <[Coke]> m: $_ = "yee haw" ; say +?/\s/ * 1000;

[20:58] <camelia> rakudo-moar 88a8a0: OUTPUT«1000␤»

[20:59] *** _mg_ left
[21:00] *** Peter_R left
[21:02] <MadcapJake> How do you include code blocks in wordpress? Their web interface won't let me change a block of text to `preformatted` without changing the rest of the text after the block to preformatted also.

[21:02] <AlexDaniel> flussence: well, it also makes sense to put -- like ｢tee -a -- "$D/ignore"｣

[21:03] <jnthn> m: sub samemark($a, $b) { my $pattern = $b.comb.map(*.NFD[1..*]); $a.comb.kv.map({ Uni.new($^v.NFC[0], |$pattern[$^k]).Str }).join }; say samemark('jnthn', '_ä__ä')

[21:03] <camelia> rakudo-moar 88a8a0: OUTPUT«jn̈thn̈␤»

[21:03] <jnthn> It is now :P

[21:03] <AlexDaniel> assuming that home folders can contain spaces and leading dashes…

[21:03] <AlexDaniel> although the rest of the system will probably blow up if you do that

[21:05] <jnthn> uh, expect NFD instead of NFC ;)

[21:05] <TimToady> nobody expects the Spanish NFD!

[21:06] <RabidGravy> boom!

[21:06] <TimToady> nobody expects the Spanish Decomposition!

[21:06] <dalek> nqp: 9baf227 | FROGGS++ | / (3 files):

[21:06] <dalek> nqp: handle "is rw" pointers in native routines on jvm, bump moar

[21:06] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9baf22734e

[21:07] <RabidGravy> things I love today are Junctions, ranges and multi dispatch

[21:07] *** dolmen joined
[21:07] <[Coke]> https://gist.github.com/coke/63c7bbb82f075c7bb1f5 updated with a few more name fixes. I now have an easy way to map data that was weird/archaic in the git logs. Feel free to msg me if you find another one. (working on jonathan's now...)

[21:07] <MadcapJake> Does everyone just use the html Wordpress editor (for Perl 6 advent)? The visual one does not want to let me do headings or code blocks without fudging everything up.

[21:07] <AlexDaniel> “Could not find DBDish::Role::Connection:ver<True>:auth<True>:api<True> in:” okay, I am progressing…

[21:07] *** geraud joined
[21:07] <TimToady> .oO(what I tell you three times is "True"...)

[21:08] <dalek> rakudo/nom: 2b5c41e | FROGGS++ | t (3 files):

[21:08] <dalek> rakudo/nom: add tests for "Pointer is rw", bump nqp/moar

[21:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b5c41e94f

[21:08] *** kjs_ joined
[21:08] <FROGGS> .tell rudi_s_ please pull all the things and rebuild rakudo, Pointer is rw works now like shown in this test: https://github.com/rakudo/rakudo/commit/2b5c41e94f

[21:08] <yoleaux> FROGGS: I'll pass your message to rudi_s_.

[21:09] <FROGGS> .tell rudi_s please pull all the things and rebuild rakudo, Pointer is rw works now like shown in this test: https://github.com/rakudo/rakudo/commit/2b5c41e94f

[21:09] <yoleaux> FROGGS: I'll pass your message to rudi_s.

[21:09] <ab5tract> TimToady: "nobody expects the Spanish Decomposition!" <---- it's for phrasings like these that we should have a quote bot :)

[21:09] <jnthn> FROGG++

[21:09] *** kjs_ left
[21:09] <jnthn> uh, FROGGS++ too :)

[21:09] *** rindolf left
[21:09] <FROGGS> *g*

[21:11] *** lestrrat left
[21:12] <ab5tract> hm, DBIish compilefails a test during 'panda install DBIish'

[21:12] <ab5tract> this is from fresh everything

[21:13] <ab5tract> it's quite exciting to see the CURLI stuff settling :D

[21:13] <jnthn> Indeed; nine++

[21:13] <AlexDaniel> ab5tract: :(

[21:14] <ab5tract> AlexDaniel: "Invalid typename 'DBDish::Role::Connection'"

[21:14] <AlexDaniel> ab5tract: actually I'm trying to install DBIish for the last 20 minutes…

[21:14] <AlexDaniel> ab5tract: yes, well… similar problem

[21:15] <dalek> Inline-Perl5: 11b628e | (Stefan Seifert)++ | lib/Inline/Perl5.pm6:

[21:15] <dalek> Inline-Perl5: Some adaptions for new CompUnit architecture

[21:15] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/11b628eb93

[21:15] <ab5tract> "# Using PGDATABASE: (none)"  <-- this made me assume it was about a missing pg dependency

[21:15] *** lestrrat joined
[21:16] <masak> brrt++ # http://brrt-to-the-future.blogspot.se/2015/11/moar-jit-news.html

[21:16] <Skarsnik> hm

[21:17] <Skarsnik> maybe some issue with the 'hotplug' of drivers for DBIish?

[21:17] <RabidGravy> it's all going to be good, I've just not rebuilt rakudo on this laptop for several days :)

[21:17] <Skarsnik> and DBI tests are weird

[21:17] *** sno left
[21:17] <ab5tract> masak++ # pointing it out

[21:17] <ab5tract> brrt++ # awesome post!

[21:18] *** kjs_ joined
[21:18] <jdv79> who uses the bleeding edge anyway!

[21:18] <jdv79> ihavent rebuilt in days.  maybe weeks...

[21:18] <ab5tract> jdv79: crash test dummies :D

[21:19] <AlexDaniel> ab5tract: any idea what to do about it?

[21:19] *** Su-Shee_ joined
[21:19] <ab5tract> well, it is compile time

[21:19] *** Su-Shee left
[21:19] *** kjs_ left
[21:19] *** Su-Shee_ is now known as Su-Shee

[21:19] <ab5tract> whenever you get an apology, you know you never even got to runtime

[21:20] <AlexDaniel> ab5tract: DBDish ?

[21:20] <AlexDaniel> ab5tract: it should be DBIish, right?

[21:20] <AlexDaniel> ah no

[21:21] <ab5tract> yeah, it's the driver. part that's choking.

[21:21] <jdv79> and all my stuff still works:)

[21:21] *** sQuEE` left
[21:21] <ab5tract> AlexDaniel: do you have pg installed?

[21:21] <AlexDaniel> yes

[21:21] <MadcapJake> hmm, I already have over 500 words in this advent article but I wanted to talk about using ctags with atom, should I skip it? Mention it briefly in passing? Or go the whole nine yards?

[21:21] <jdv79> nine ++ # though

[21:21] <ab5tract> let me install postgres locally and see where i get

[21:22] <ab5tract> MadcapJake: do not concern yourself with post length!

[21:22] <Skarsnik> just install the lib

[21:22] <moritz> MadcapJake: that's really up to you.

[21:22] <Skarsnik> the testshould just be skipped

[21:22] <Skarsnik> if no server

[21:22] *** sQuEE joined
[21:22] <ab5tract> i say that personally, because advent is always the core of the perl 6 update. there is no reason to not tell as much as there is

[21:23] <moritz> MadcapJake: skimming it, I'd say it's fine as it is now, but more content wouldn't hurt either

[21:23] <ab5tract> no one ever mentioned a 500 word limit to me

[21:23] <AlexDaniel> Skarsnik: I installed it with --notests but it does not work

[21:23] <MadcapJake> I think I'll skip it because I think I had to edit a package to make it use universal ctags instead of exuberant ctags. :P

[21:23] <moritz> MadcapJake: also please set the category to 2015

[21:24] <ab5tract> are there still slots?

[21:24] <moritz> ab5tract: yes

[21:24] <AlexDaniel> Skarsnik: Could not find DBDish::Role::Connection:ver<True>:auth<True>:api<True>

[21:24] <Skarsnik> Oh

[21:24] *** kjs_ joined
[21:24] <moritz> ab5tract: for Dec 4th, 6th and 7th

[21:24] <MadcapJake> ab5tract: no word limit given to me either, but I just skimmed previous years and most aren't terribly long

[21:24] <moritz> ab5tract: though masak++ said he was open to trades

[21:24] <jdv79> ab5tract: do you have a slot?

[21:25] <ab5tract> not yet

[21:25] <ab5tract> i'd love the 7th

[21:25] <masak> I am open to trades

[21:25] <moritz> oh, and 10th is also free

[21:25] <jdv79> do it!

[21:25] <Skarsnik> there is ver/author in this class lol

[21:25] <moritz> ab5tract: do you already have a topic?

[21:25] <AlexDaniel> Skarsnik: alright!

[21:25] <ab5tract> hmm. it's supposed to publish at which point in the day? :)

[21:25] <Skarsnik> no

[21:25] <Skarsnik> there no is ver/author in this class

[21:25] <jdv79> before?

[21:26] <moritz> ab5tract: it's best if you finish it on the day before, and schedule for publishing at midnight

[21:26] <nine> I just pushed two commits to panda that should make life somewhat simpler again:

[21:26] <nine> 9aac409 Support --force flag to get around "is already installed" check

[21:26] <Skarsnik> I don't really know how the precompiled stuff

[21:26] <nine> ddf2f82 Force installation of panda when running bootstrap.pl

[21:26] <moritz> nine++

[21:26] <jdv79> nine++

[21:26] <moritz> shouldn't dalek report panda commits here?

[21:26] <Skarsnik> Aaah

[21:26] <Skarsnik> All the role are not in the META.json

[21:27] <Skarsnik> could that be the issue with DBI?

[21:27] <ab5tract> ok, i can do the 7th

[21:27] <nine> Skarsnik: yes, quite possible. All module files have to be in there

[21:27] <ab5tract> as long as you don't mind a bit of in the trenches gonzo journalism

[21:28] <ab5tract> from an already-scheduled perl 6 learnathon on friday night

[21:29] <masak> learnathon! \o/

[21:30] <ab5tract> honestly a bit of leeway with the deadline would be appreciated. i would feel better about it if i could give it a morning read over rather than posting while drinkcoding (<-- only smashcase whenyouhidingsumtin ;) )

[21:30] <ab5tract> i'm still +6 EST

[21:31] <jdv79> wut?  arent you an adult?

[21:31] <jdv79> :)

[21:31] *** cdg joined
[21:32] <ab5tract> jdv79: confused but rolling with it ;P

[21:32] *** kjs_ left
[21:33] <[Coke]> "Who let me adult?" - my son's t-shirt.

[21:33] <ab5tract> ah, i get you. not hiding the drinkcoding from anyone but the code itself :)

[21:33] <timotimo> ab5tract: is +6 EST a lot of alcohol?

[21:33] <jdv79> im just confused myself.  posting a draft a bit before the day change seems s great idea to me.

[21:34] *** rurban joined
[21:34] <jdv79> so it can be reviewed

[21:34] <ab5tract> right but where do you draw the line? where the white man did? :P

[21:34] <jdv79> :)

[21:34] <[Coke]> JimmyZ++  - all the specs people are added, along with a few conversions of nicks to names. also made sure to add Jon O.

[21:34] <Skarsnik> *listing all pm for DBIis*

[21:34] <dalek> roast: 47beba9 | jnthn++ | S06-advanced/wrap.t:

[21:34] <dalek> roast: You can't return a block.

[21:34] <dalek> roast: 

[21:34] <dalek> roast: Correcting this test in preparation for correcting some failure to

[21:34] <dalek> roast: identify illegal returns.

[21:34] <dalek> roast: review: https://github.com/perl6/roast/commit/47beba9d55

[21:35] <mspo> can nqp run Configure.pl if I want to not need perl5 for building perl6?

[21:35] <jnthn> uh, return *from* a block. Duh

[21:35] <ab5tract> jdv79: then the 6th would be a better day for me

[21:35] <jnthn> mspo: Not yet

[21:36] <jdv79> theres a file in mu somewhere.  make it so:)

[21:36] <ab5tract> i feel like it would be a fun post to show what a "friday night in amsterdam" can produce in perl 6

[21:36] *** avalenn left
[21:37] *** avalenn joined
[21:38] <ab5tract> but i can do that somewhere else :)

[21:39] <ab5tract> jnthn: the can the returned block return a block which never returned?

[21:40] *** Su-Shee_ joined
[21:40] <jnthn> ab5tract: Um...I'm confused. :)

[21:40] *** njmurphy_ joined
[21:41] <MadcapJake> moritz: any chance you'd look over my advent article for errors? Also, do I set it to publish on the 3rd at 0:00 GMT?

[21:41] <ab5tract> "You can't return a block" # 10 Block Commandments :)

[21:41] <Skarsnik> is there a quick way to test if a json is valid?

[21:41] <ab5tract> (well, Block non-Commandments in that case)

[21:41] <jnthn> :P

[21:42] <jdv79> what is "a json"?

[21:42] <AlexDaniel> Skarsnik++ # for trying to fix DBIish

[21:42] *** Su-Shee left
[21:42] <Skarsnik> *file

[21:42] <jdv79> try to parse it?

[21:42] <RabidGravy> json_xs < somejsonfile

[21:42] *** bjz left
[21:42] <ab5tract> so about the post

[21:43] <ab5tract> it's totally draftable before midnight

[21:43] <havenwood> jdv79: A String that contains something serialized to JavaScript Object Notation (JSON).

[21:43] <RabidGravy> give me, give me, give me a draft about midnight

[21:43] <havenwood> jdv79: Oh, sorry I should have looked at context. Nevermind me. :O

[21:43] <jdv79> i have never had a json

[21:44] <jdv79> haha

[21:44] <diakopter> I split a json for lunch

[21:44] <RabidGravy> json and the argonauts

[21:44] <dalek> roast: 3230782 | jnthn++ | S06-signature/closure-parameters.t:

[21:44] <dalek> roast: Fix another return-outside-of-routine thinko.

[21:44] <dalek> roast: review: https://github.com/perl6/roast/commit/3230782184

[21:44] <dalek> roast: 61729a3 | jnthn++ | integration/advent2010-day14.t:

[21:44] <dalek> roast: nextsame returns, so needs to be in a routine.

[21:44] <dalek> roast: review: https://github.com/perl6/roast/commit/61729a3f82

[21:45] <jdv79> Skarsnik++ # sorry.  just f'in around

[21:46] <[Coke]> I wonder how long until we have a colleague named Json (pronounced Jason)

[21:46] <RabidGravy> Skarsnik, if this is a META.info, META6.json then Test::META is go

[21:46] <jeffa> i juse use this: perl -MData::Dumper -MJSON -MFile::Slurp -e"print Dumper decode_json read_file shift"

[21:46] <[Coke]> Given that I know kids named Ada and Perl.

[21:47] <Hotkeys> [Coke]: don't forget Robert'); DROP TABLE students;--

[21:48] <dalek> DBIish: 9aeecff | (Sylvain Colinet)++ | META.info:

[21:48] <dalek> DBIish: List nearly all the file, does Testmock is supposed to be distribued?

[21:48] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/9aeecff8bc

[21:48] <dalek> DBIish: 8a02252 | (Sylvain Colinet)++ | lib/DBDish/SQLite/Native.pm6:

[21:48] <dalek> DBIish: Merge branch 'master' of https://github.com/perl6/DBIish

[21:48] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/8a0225278e

[21:48] <dalek> rakudo/nom: a4ca12a | jnthn++ | src/vm/ (2 files):

[21:48] <dalek> rakudo/nom: Fix some failures to catch return outside routine.

[21:48] <dalek> rakudo/nom: 

[21:48] <dalek> rakudo/nom: We actually ended up returning from the first thing we found down the

[21:48] <dalek> rakudo/nom: call stack that could be returned from, which led to some rather odd

[21:48] <dalek> rakudo/nom: behaviors. RT #123732 was a great example; this:

[21:48] <dalek> rakudo/nom: 

[21:48] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123732

[21:48] <lizmat> .oO( little bobby tables )

[21:48] <dalek> rakudo/nom:     for ^5 { .say; NEXT { return } }

[21:48] <dalek> rakudo/nom: 

[21:48] <dalek> rakudo/nom: Ended up with the return binding to the run_phasers method that runs

[21:48] <dalek> rakudo/nom: the NEXT phasers. This also makes return a tad cheaper, and will let

[21:48] <dalek> rakudo/nom: us make return a multi sub too, for further performance win. But this

[21:48] <dalek> rakudo/nom: patch just corrects the semantics.

[21:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a4ca12afa3

[21:48] <Hotkeys> that's a ;pt pf sbseqemt cp,,ots

[21:48] <Hotkeys> er

[21:48] <Hotkeys> that's a lot of subsequent commits

[21:48] <jnthn> Keys getting a bit too hot? :)

[21:49] <Skarsnik> I hope git didnot break anything, it complained my repo was behind the main one and when I pull it complain at was 2 commit ahead *facepalm*

[21:49] *** kjs_ joined
[21:49] *** rindolf joined
[21:49] <dalek> mu: d458b81 | moritz++ | misc/perl6advent-2015/schedule:

[21:49] <dalek> mu: ab5tract++ claims spot 10

[21:49] <dalek> mu: review: https://github.com/perl6/mu/commit/d458b81471

[21:49] <dalek> roast: 99ab03c | jnthn++ | S32-exceptions/misc.t:

[21:49] <dalek> roast: Tests for RT #123732.

[21:49] <dalek> roast: review: https://github.com/perl6/roast/commit/99ab03cecb

[21:49] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123732

[21:49] <Hotkeys> jnthn: yeah

[21:50] <jnthn> The commits! They won't stop!

[21:50] <Hotkeys> These keys are too damn hot

[21:51] <RabidGravy> three more and no more advent

[21:51] <jdv79> jimmy mcmillan would approve

[21:51] *** xfix left
[21:51] <Skarsnik> does DBIish still can be installed? x)

[21:51] <lizmat> Amsterdam.pm shutting down&

[21:51] <jdv79> nobody can accuse this group of being non-commital:)

[21:51] *** lizmat left
[21:52] *** donaldh joined
[21:52] *** colomon left
[21:52] *** njmurphy joined
[21:53] <Hotkeys> no more advent?

[21:53] <dalek> roast: dda235a | jnthn++ | S04-statements/return.t:

[21:53] <dalek> roast: Unfudge return semantics test we now pass.

[21:53] <dalek> roast: review: https://github.com/perl6/roast/commit/dda235ab1b

[21:54] *** Fleurety joined
[21:54] <jnthn> Down to 22 xmas RTs

[21:54] *** Deepak joined
[21:55] <jnthn> Hotkeys: Probably "no more free advent calendar slots for anyone who wants to write"

[21:55] <Deepak> Hello All, I am playing with Perl6 and quite enjoying it so far..

[21:56] <Hotkeys> oh

[21:56] <Hotkeys> that's fine

[21:56] <Hotkeys> I just want to read advent

[21:56] <jnthn> :)

[21:56] *** kst joined
[21:56] <jnthn> Well, in some years it took some effort to get enough authors together to have a post a day. Seems we don't have too many problems this year.

[21:56] <Deepak> especially love the string implementation, but I have a doubt - my $str2 = "caf\x65\x301";

[21:56] <Deepak> for $str2.encode('UTF-8').contents() -> $code_point {     printf("%x ", $code_point); }  say();

[21:57] <Deepak> this prints: 63 61 66 c3 a9 

[21:57] <Deepak> is there a way to get back the "original" codepoints?

[21:58] <jnthn> Deepak: Strings work at grapheme level, and are normalized as part of that

[21:58] <jdv79> i think multiples would be ok, no?

[21:58] <Deepak> yup.. I get that - it's pretty handy that this works: my $str = "café"; my $str2 = "caf\x65\x301";  say $str eq $str2;

[21:58] <Hotkeys> m: say "caf\x65\x301".codes

[21:58] <camelia> rakudo-moar 2b5c41: OUTPUT«4␤»

[21:58] <Hotkeys> oops

[21:58] <Hotkeys> that's just a count

[21:59] <jnthn> But now, we don't keep around what things used to be

[21:59] <AlexDaniel> Skarsnik: I'll test it

[21:59] <jnthn> *no

[22:00] *** raiph left
[22:00] <jnthn> Otherwise every single string would have to carry that kind of information around.

[22:00] <Deepak> exactly... I wonder if it should.. but anyway.. if that's a design decision we made, that's what it is

[22:00] <jnthn> Yes, it's intentional.

[22:01] <Skarsnik> hm, unrelated to DBIish, I want to write soemthing to play with a web API (http/rest? http://discordapi.readthedocs.org/en/latest/reference/auth/signin.html#login), do I need to poll to get new messages from the server? *noob in this kind of stuff*

[22:01] <Deepak> FWIW, Swift (the other language I am playing with) keeps around the original.. the comparison happens at grapheme level but if you do str2.utf8, you get the original code points back

[22:01] <[Coke]> Deepak: there are buffer types that can work on bytes if you prefer to do that instead of characters.

[22:02] <AlexDaniel> hm, how can I tell panda to remove something?

[22:02] <Skarsnik> how str (not Str) are encoded? the same?

[22:03] *** n0tjack left
[22:03] *** sno joined
[22:03] <[Coke]> m: str;

[22:03] <camelia> rakudo-moar 2b5c41: ( no output )

[22:03] <Deepak> <Skarsnik> in Perl6 or Swift?

[22:03] <jnthn> Deepak: Yes, though Swift's model is a bit different; in Perl 6 we actually use graphemes as the primary represenatoin of strings.

[22:03] <[Coke]> I don't think str::Str is the same as int::Int

[22:03] <jnthn> *representation

[22:03] <jnthn> [Coke]: Close. :)

[22:04] <jdv79> close was an interesting parrot "based" lang

[22:04] <Skarsnik> m: my str $a = "caf\x65\x301"; for $str2.encode('UTF-8').contents() -> $code_point {     printf("%x ", $code_point); }

[22:04] <camelia> rakudo-moar 2b5c41: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Kq6McfcCKm␤Variable '$str2' is not declared␤at /tmp/Kq6McfcCKm:1␤------> 3my str $a = "caf\x65\x301"; for 7⏏5$str2.encode('UTF-8').contents() -> $cod␤»

[22:04] <geekosaur> hm, that makes me wonder...

[22:04] <Skarsnik> m: my str $a = "caf\x65\x301"; for $a.encode('UTF-8').contents() -> $code_point {     printf("%x ", $code_point); }

[22:04] <camelia> rakudo-moar 2b5c41: OUTPUT«63 61 66 c3 a9 »

[22:04] <jnthn> str is just an unboxed Str

[22:04] <jdv79> he was a cool guy.

[22:04] <geekosaur> pyanfar:63388 Z$ touch $(printf 'fil\303\251\n') $(printf 'file\314\201\n')

[22:04] <geekosaur> pyanfar:63389 Z$ ls

[22:04] <geekosaur> filé  filé

[22:05] <Skarsnik> lol

[22:05] <Deepak> yeah.. Swift's model has upside but downsides too.. there is a runtime cost to comparison, extracting substrings involves doing a Dance with ranges etc.

[22:05] <AlexDaniel> “Support --force flag to get around "is already installed" check” 41 minutes ago – oh, that's what I need!

[22:05] <geekosaur> (inevitable result of Unix being byte strings, not Unicode)

[22:05] <geekosaur> but I wonder how, if at all, we deal with this...

[22:06] *** skids left
[22:07] <Deepak> MacOS filesystem stores accented characters in decomposed form (or used to in 2010)

[22:07] <jnthn> Deepak: Yeah...we picked the easy comparison, O(1) indexing, etc.

[22:07] *** zengargoyle left
[22:08] *** zengargoyle joined
[22:08] <geekosaur> yes, HFS+ specifically stores normalized names

[22:08] <geekosaur> ufs, zfs, ext4, etc. do not

[22:08] <AlexDaniel> “panda:ver<*>:auth<>:api<> already installed” now how do I get around this…

[22:08] <Zoffix> rm -fr .perlbrew/ .... *oh crap*

[22:09] <arnsholt> geekosaur: Yeah, because Unix filenames have to be blobs of bytes, I think

[22:09] <diakopter> Zoffix: oops

[22:09] *** jeffa left
[22:09] <arnsholt> (Non-HFS+ not normalizing, that is)

[22:09] <jnthn> Time for sleep...'night, #perl6

[22:09] <diakopter> o/

[22:09] <Zoffix> Wanted to toss rakudobrew :/

[22:09] <Zoffix> night

[22:09] <donaldh> PR for more awesome USAGE https://github.com/rakudo/rakudo/pull/608

[22:10] <AlexDaniel> donaldh++

[22:11] <Deepak> but when I readdir say: e.g. @stuff = readdir($dir); (perl5), @stuff will have a bunch of strings in the "original" form

[22:11] <Deepak> which I can get back as: unpack("U*", $stuff);

[22:11] <Deepak> I'll try this in Perl6 and see what gives

[22:12] <Deepak> so Perl6 equivalent of this: http://www.deepakg.com/prog/2010/09/unicode-characters-on-macos-linux-filesystem/

[22:12] <Deepak> this one place where I think "preserving" the original code points might be important

[22:12] <Deepak> but I don't know Perl6 well enough yet to know what readdir equivalent will return

[22:13] <Skarsnik> there is probably a workaround?

[22:13] <jdv79> jnthn: nite

[22:13] <Deepak> anyway.. thanks all for your help, I need to be sleeping as well

[22:13] <geekosaur> yes, that's exactly what I was getting at

[22:14] <geekosaur> (the example shell thing was not to see if that command would work --- I knew it would --- but to demonstrate that this is something perl6 must be prepared to deal with)

[22:14] <geekosaur> or at least perl6 programmers

[22:14] *** dolmen left
[22:14] <geekosaur> gtk+ and a few other toolkits have already had run-ins with this issue

[22:16] <Skarsnik> Oh I think I had weird issue with Qt for this

[22:16] <Deepak> geekosaur agreed there has to be a way to read filenames "as stored on the native os"

[22:16] <Skarsnik> Or it was passing unicode (file path) to a gtk executable under windows

[22:16] <Skarsnik> with Qt

[22:17] <dj_goku> Is there a reason to limit it to 25 posts on the advent calendar?

[22:17] *** colomon joined
[22:18] <gtodd> hmm so does tweaking docs.perl6.org  to make something appear in search.js as { label: "Reference: ... whatever } make the term "searchable" or just appear in the dropdown?

[22:18] <Zoffix> dj_goku, no and I believe PerlJam mentioned they would accept more than 1 post per day

[22:18] <dj_goku> I mean this is the "Christmas".

[22:18] <nadim> hi, I thought my @l = 'a', 'b' x 1 .. Inf ; would have given me a lazy list that I can shift from but no. is there a simple way to do that?

[22:18] <Zoffix> gtodd, what's the difference between being "searchable" and "just appear in the dropdown"?

[22:18] <Deepak> g'night all

[22:18] <gtodd> I guess there is none :-D

[22:18] <Zoffix> night

[22:19] <gtodd> but I thought there might be some way it was wired up 

[22:19] <Zoffix> m: my @l = 'a', 'b' x 1 .. Inf ; say shift @l

[22:19] <camelia> rakudo-moar a4ca12: OUTPUT«a␤»

[22:19] <gtodd> for p6doc and the site at the same time

[22:19] <Zoffix> nadim, ^ what's the issue?

[22:19] <Zoffix> gtodd, oh, no idea for the p6doc

[22:19] <jdv79> Zoffix: canada?

[22:19] <Zoffix> jdv79, verb?

[22:19] *** Deepak left
[22:19] <Zoffix> :)

[22:19] <Zoffix> jdv79, what do you mean canada?

[22:20] <nadim> Zoffix: on the second shift I get error "Can not shift from empty array"

[22:20] *** [TuxCM] left
[22:20] <Zoffix> jdv79, I'm in canukistan yes

[22:20] <jdv79> where do you eake and sleep?

[22:20] <jdv79> wake

[22:20] <Zoffix> nadim, oh. That sounds a familar issue

[22:20] <Zoffix> jdv79, Brampton

[22:20] <nadim> m: my @l = 'a', 'b' x 1 .. Inf ; say shift @l ; say shift @l

[22:20] <camelia> rakudo-moar a4ca12: OUTPUT«a␤"b"..Inf␤»

[22:21] <jdv79> is that ET

[22:21] <Zoffix> nadim, how old is your rakudo? I recall this issue cropping up and I believe it might've been also fixed

[22:21] <jdv79> ?

[22:21] <Zoffix> jdv79, yes

[22:21] <jdv79> danke

[22:21] <Zoffix> jdv79, 40 minute drive away from Toronto

[22:21] <nadim> Zoffix: I build from source a few days ago

[22:21] <jdv79> kul

[22:21] <gtodd> well I guess with docs.p6.org just adding pull requests with a decent explanation seeing if they are welcome or not is what you can do with git ... there's no real slush or freeze just because Christmas is coming

[22:21] <Zoffix> nadim, no idea then, sorry

[22:21] <nadim> thanks anyway :)

[22:23] <Zoffix> .tell PerlJam I've seen several times today people who [I assume want to write] disappointed that Advent list is full. Maybe there's some sort of "official" way we can have a free-for-all and launch a bunch of articles per day, if people wanna write, since this Christmas is THE Christmas?

[22:23] <yoleaux> Zoffix: I'll pass your message to PerlJam.

[22:24] <jdv79> Zoffix: so when im home we tz the same

[22:24] <jdv79>   

[22:24] <jdv79> weird

[22:25] <jdv79> touchscreens--

[22:26] <gtodd> Zoffix:  trying to point "search terms" like $! $. &! at twigils entry etc. etc. on the site ti seems straightforward but I'm not sure how p6doc indexes things

[22:26] * Zoffix neither

[22:28] <jdv79> Zoffix: we should talk soon.

[22:28] <Zoffix> :S

[22:29] <jdv79> bout searchy stuffs

[22:29] <Zoffix> About what?

[22:29] <Zoffix> :\

[22:29] <jdv79> but im tired now

[22:29] <Zoffix> don't tell me it's about the Curse of The Searchbox.

[22:29] <jdv79> (and prolly drank a bit too much to be useful)

[22:30] <Zoffix> That I'm now the "search box guy" :P

[22:30] <jdv79> thats for later

[22:30] <jdv79> ha

[22:30] <Zoffix> k

[22:31] <dalek> DBIish: 4a5b064 | (Sylvain Colinet)++ | META.info:

[22:31] <dalek> DBIish: Travis build failed because of TestMock, adding it to Meta.info

[22:31] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/4a5b064789

[22:33] *** molaf left
[22:33] <Zoffix> heh

[22:34] * Zoffix is tempted to launch a P6 modules.perl6.org site on meatcpan.org

[22:34] <Zoffix> forgot I owned that domain

[22:35] <uruwi_> :P

[22:35] <uruwi_> Still, the P6 people are trying to add P6 support to cpan

[22:36] <konobi> meat cpan?

[22:36] <Zoffix> konobi, result of someone saying "I can't believe still no one registered meatcpan.org! I just made that typo" while I was a few beers deep :P

[22:37] <RabidGravy> I still own perlmonkeys.org

[22:37] <Hotkeys> it's a reference to meatspin

[22:37] *** mr-foobar left
[22:37] <Zoffix> Hotkeys, lol, no it's not :P

[22:37] <Hotkeys> seems like it

[22:37] <Hotkeys> it definitely could be

[22:37] <Hotkeys> I was just making assumptions

[22:37] * Hotkeys goes back into his hideyhole

[22:38] *** mr-foobar joined
[22:39] *** yubimusubi is now known as Possum

[22:39] <konobi> Zoffix: =0P

[22:43] *** Su-Shee_ is now known as Su-Shee

[22:44] <dalek> mu: 7bee91b | ab5tract++ | misc/perl6advent-2015/schedule:

[22:44] <dalek> mu: Adding topics to Advent 2015 Schedule

[22:44] <dalek> mu: review: https://github.com/perl6/mu/commit/7bee91b8f9

[22:44] <Zoffix> Oh, lovely... panda install . ; "Failed to open file /home/zoffix/.perl6/2015.11-316-ga4ca12a/precomp/5AF218BA645645038917D5D9018B5BE9758143B3.1449009305.7512/BA/BA3121F61FEB38394BEA74E6B2D1E37B64DFB75B.deps: no such file or directory"

[22:44] <ab5tract> gfldex: grateful to see a binding related post@

[22:45] <ab5tract> !

[22:45] *** YP-QMUL-W left
[22:45] <tadzik> :)

[22:45] <Zoffix> Oh damn. I get that even when I just run `panda` :S

[22:45] <tadzik> stuff broke

[22:46] <tadzik> I'll look at stuff tomorrow :)

[22:46] <Zoffix> hehe :)

[22:47] *** kjs_ left
[22:47] <Zoffix> Hm, I now see when I ran first install after rakudobrew build-panda, it outputted "Probable version skew in pre-compiled '/home/zoffix/.rakudobrew/moar-nom/install/share/perl6/site/sources/1DFE685402E5E769238D3FDC622C129BB2C0B0FB' (cause: no STable at index 4532)"

[22:49] <Skarsnik> I love curli, it's entairtaining to see the error at least x)

[22:49] <Zoffix> I did notice stuff working faster today tho

[22:51] *** raiph joined
[22:53] <Zoffix> tadzik, never mind. Running rakudobrew build-panda again fixed the issue.... whatever it was :S

[22:53] <AlexDaniel> Skarsnik: it does not look like DBIish is fixed…

[22:53] <tadzik> crazy. Typical :)

[22:54] <Skarsnik> AlexDaniel, same as https://travis-ci.org/perl6/DBIish/builds/94277790 ?

[22:55] *** rurban left
[22:55] <RabidGravy> there may be a "special number" in ranges

[22:55] <AlexDaniel> Skarsnik: yes

[22:55] <RabidGravy> 1 .. 12

[22:55] *** rurban joined
[22:55] *** rurban left
[22:55] <Skarsnik> this test pass for me ~~

[22:57] <Skarsnik> well I have to go to bed :(

[22:57] <Zoffix> night

[22:58] *** gugod joined
[22:59] *** n0tjack joined
[22:59] <Skarsnik> there was not an issue with prove and stuff loaded?

[23:00] *** gugod left
[23:00] *** gugod joined
[23:00] *** colomon left
[23:01] <jdv79> Zoffix: nite

[23:02] *** cdg left
[23:03] <jdv79> who types meat in place of meta?

[23:03] *** Skarsnik left
[23:03] *** n0tjack left
[23:03] <jdv79> fairlt distinct to me

[23:03] <ab5tract> hehe

[23:04] <ab5tract> "he who questions others, to others, questions himself to others"

[23:05] <jdv79> i dont... ok.

[23:05] <jdv79> nye amsterdam.  ab5tract: where?

[23:05] <jdv79> i plan to be "there"

[23:05] *** donaldh left
[23:06] <ab5tract> never seen a ticket sold to this place. but a plan can get you there, sure.

[23:07] <ab5tract> not the road i took, mind you.

[23:07] <jdv79> what does it all mean?!

[23:10] *** vendethiel left
[23:10] <[Coke]> we talked about "use v6" in the past few days, and someone suggestion "better perl5 errors" - that's broken with "use v6.c, that's just a syntax error"

[23:11] <[Coke]> (quote mismatch there, sorry)

[23:11] <ab5tract> jdv79: who knows

[23:11] <ab5tract> i've heard rumors that the trick is not to care

[23:13] *** Zoffix left
[23:13] *** rindolf left
[23:16] *** dolmen joined
[23:18] *** colomon joined
[23:19] *** [TuxCM] joined
[23:21] *** dolmen left
[23:21] * ab5tract finally parses 'nye'

[23:22] <ab5tract> hope to you see you around jdv79 :)

[23:22] <jdv79> thanks

[23:23] <ab5tract> o/ #perl6 ! and a very merry advent to us all!

[23:24] * [Coke] wonders if "adamk" in the logs is adam kennedy

[23:26] *** TEttinger joined
[23:27] *** Ch0c0late left
[23:30] *** lostinfog left
[23:30] <autarch> moritz: any suggestions for a Perl 6 advent calendar entry I should write - I could probably have one ready next week some time

[23:32] *** kid51 joined
[23:32] <RabidGravy> autarch, as it stands only the 4th and the 7th left

[23:33] <autarch> ah, that's a little soon for me

[23:33] <[Coke]> there has been talk of doing more than one post per day.

[23:33] <Hotkeys> What is the method I need to define in a class for the "say" representation

[23:33] <[Coke]> I'm sure we can shuffle things.

[23:33] <[Coke]> Hotkeys: say uses .gist

[23:33] <RabidGravy> Hotkeys, .gist

[23:33] <Hotkeys> so 'method gist {...}'

[23:34] <RabidGravy> autarch, I'll swap you the 11th

[23:34] <autarch> RabidGravy: sure, that'd work

[23:36] <autarch> but I still need a topic

[23:36] <[Coke]> pulled in parrot's credits file as well.

[23:37] *** Zoffix joined
[23:37] <[Coke]> up to 761 entries in the contributor list. a few known dupes. More eyes to spot more dupes welcome.

[23:37] <[Coke]> https://gist.github.com/coke/63c7bbb82f075c7bb1f5 - also pointers to other sources of names we should consider.

[23:37] <Zoffix> Dam, more fallout from curli: https://gist.github.com/zoffixznet/7cd03ed84dbbb4db8fa3

[23:38] <[Coke]> oh, I see more CREDITS Files in the repos I'm using, grabbing those...

[23:38] <RabidGravy> autarch, elaborate on the thread / scheduler thing from your blog post

[23:38] <autarch> yeah, that could work

[23:39] <Zoffix> [Coke], this and line below it are dupes: https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contribs-out-L100

[23:39] <RabidGravy> I'll stick you in for the 11th

[23:39] <[Coke]> Zoffix: yes, already listed in the README.

[23:39] *** dfcarpenterak joined
[23:39] <[Coke]> Danke.

[23:39] <autarch> the 11th is good

[23:40] <Zoffix> [Coke], chromatic wishes not to be included, yet they're in the list: https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contribs-out-L114

[23:40] <dalek> mu: 6bffa21 | RabidGravy++ | misc/perl6advent-2015/schedule:

[23:40] <dalek> mu: Update schedule

[23:40] <dalek> mu: review: https://github.com/perl6/mu/commit/6bffa214b7

[23:40] *** jevin_ joined
[23:40] <[Coke]> Zoffix: yes, I'm not writing code to rip him out, I'll remove him manually when I put it in the release announcement.

[23:40] <[Coke]> Thank you, though.

[23:40] <Zoffix> ah :) k 

[23:41] <[Coke]> (unless I write code to also pull out bots or unknowns, then I might add him to that list)

[23:42] <[Coke]> another push, we're now processing all the CREDITS files in the repos we're checking.

[23:42] *** pierrot left
[23:42] *** pierrot joined
[23:42] *** jevin left
[23:43] <RabidGravy> I may well have commits in parrot under [email@hidden.address]
[23:43] <[Coke]> RabidGravy: https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contribs-out-L642

[23:44] <[Coke]> One step ahead of you?

[23:46] <RabidGravy> cool

[23:48] <AlexDaniel> [Coke]: another possible source of contributors to Perl 6 effort is bug reports, though that might be a bit too inclusive

[23:48] <[Coke]> fixed the formatting in the README

[23:48] <[Coke]> JimmyZ asked that earlier. My thought is that it's too inclusive, yes.

[23:49] <TimToady> though it might give us some nick->realname mappings

[23:49] <[Coke]> If you get consensus, I'll see about doing it. I'm happy to add a sentence to the release announcement in place of enumerating them, however.

[23:49] <[Coke]> TimToady: we have quite a few of them. many of the remaining once are from old svn2git conversions that lazily didn't get emails.

[23:50] <[Coke]> like "eric256" or "exodist"

[23:50] * Zoffix finishes looking through the entire list

[23:50] *** csd_ left
[23:50] <[Coke]> crap, found mstevens & Michael stevens, consolidating...

[23:50] <TimToady> "We would also like to thank everyone who submitted bug reports or dropped in on the various forums to discuss things.  Finally, we'd like to extend a special thanks to everyone who we accidentally left out of this list, or who requested that they be left out."  :)

[23:50] <Exodist> wait, what?

[23:51] <Exodist> not sure why I was pinged?

[23:51] <Zoffix> [Coke], I only found two entries that *might* refer to same humans, but the rest looks fine to me. These are the lines (and the dupes are a  line below): https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contribs-out-L592 and https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contribs-out-L748

[23:51] <Exodist> [Coke], what about me?

[23:51] <[Coke]> Ha! I found him!

[23:51] *** hankache joined
[23:51] <[Coke]> exodist <exodist@c213334d-75ef-0310-aa23-eaa082d1ae64>

[23:51] <[Coke]> ^^ you committing something to some perl6-related repo sometime.

[23:52] <[Coke]> If you want, I can show your name instead of that nick.

[23:52] <Exodist> oh, is this about contributions? I think I contributed a test a couple years back

[23:52] <Exodist> sure, thats fine

[23:52] <Zoffix> Oh  Ahmed Zawawi is already listed in the README

[23:52] <[Coke]> Zoffix: Probably added on a recent refresh. Thank you for the eyes!

[23:52] <hankache> evening

[23:52] *** njmurphy_ left
[23:53] <masak> hankache: \o

[23:53] <[Coke]> I am now tempted to pick all the nick-only entries and compare them against /names! (someone else feel free to do that. :)

[23:53] <hankache> hi masak

[23:54] <[Coke]> I'm heading out. feel free to .ask me with any other suggestions on the list.

[23:54] *** Zoffix left
[23:58] * masak yawns

[23:58] <masak> 'night, #perl6

[23:58] <RabidGravy> yo

