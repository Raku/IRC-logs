[00:00] <AlexDaniel> I wonder if there is anything similar to https://metacpan.org/pod/less in Perl 6?

[00:02] <nadim> how do I tel if a variable is type object or it it is an instance of a type?

[00:03] <p6_nb> lizmat: thanks 

[00:03] *** p6_nb left
[00:04] *** p6_nb joined
[00:06] *** p6_nb left
[00:07] *** virtualsue left
[00:07] <cygx> 'night o/

[00:07] <geraud> I seem to remember that @*INC was gone... Did I imagine that?

[00:08] <Skarsnik> nop

[00:08] *** cygx left
[00:08] <Skarsnik> it's gone

[00:09] <geraud> okay, so I'm sane. that's nice to know. 

[00:10] <geraud> If I found code that used @*INC, is there a construct I should replace it with?

[00:11] <jdv79> geraud: i think not yet

[00:11] <Skarsnik> $*REPO I think

[00:11] <Skarsnik> but depend what you want to do

[00:13] <geraud> Skarsnik: I just want to majke p6doc work. Right now 'p6doc Type::Str' croaks with : 

[00:13] <geraud> Earlier failure:

[00:13] <geraud>  Dynamic variable @*INC not found

[00:13] <geraud>   in sub search-paths at /home/geraud/local/share/perl6/site/resources/1AF4CBA7DE6DE70558B631FA6737B5B5C96C7FFA:31

[00:13] <geraud> also the '1AF4CBA7DE6DE70558B631FA6737B5B5C96C7FFA' is not so fun...

[00:14] <geraud> the offending line is :   @*INC.map({CompUnitRepo.new($_)})».IO».Str.map({ /\/$/ ?? $_ !! $_ ~ '/' }).list).flat.list;

[00:14] <Skarsnik> what

[00:16] <dalek> specs: 0391e7c | (Juerd Waalboer)++ | S32-setting-library/Numeric.pod:

[00:16] <dalek> specs: Provide tau constant

[00:16] <dalek> specs: 

[00:16] <dalek> specs: The Tau Manifesto <http://tauday.com/tau-manifesto>

[00:16] <dalek> specs: 

[00:16] <dalek> specs: See also

[00:16] <dalek> specs: <https://en.wikipedia.org/wiki/Turn_(geometry)#Tau_proposal>

[00:16] <dalek> specs: and

[00:16] <dalek> specs: <http://tauday.com/state-of-the-tau>

[00:16] <dalek> specs: review: https://github.com/perl6/specs/commit/0391e7ce8e

[00:16] <dalek> specs: c6e70b6 | (Juerd Waalboer)++ | S32-setting-library/Numeric.pod:

[00:16] <dalek> specs: Add constants τ and π (aliases for tau and pi)

[00:16] <dalek> specs: 

[00:16] <dalek> specs: π is already provided by Rakudo; a patch for τ is on its way.

[00:16] <dalek> specs: review: https://github.com/perl6/specs/commit/c6e70b6bd1

[00:16] <dalek> specs: 2ed4112 | (Aleks-Daniel Jakimenko)++ | S32-setting-library/Numeric.pod:

[00:16] <dalek> specs: Merge pull request #103 from Juerd/master

[00:16] <dalek> specs: 

[00:16] <dalek> specs: Provide tau constant, include unicode aliases in spec

[00:16] <dalek> specs: 

[00:16] <dalek> specs: Since tau is now in rakudo, I see no problem including it in the spec.

[00:16] <dalek> specs: review: https://github.com/perl6/specs/commit/2ed4112331

[00:16] * zengargoyle has a feeling p6doc is going to be borked for a while.

[00:17] <geraud> I just wiped every perl6-related file from my system, build rakudo, cloned panda, bootstrap'd it and panda install'd p6doc. That's all I did.

[00:17] <zengargoyle> it relies on plain *.pod files that are installed to the old moar-nom/install/share/perl6/site/lib/ file space

[00:18] <zengargoyle> can a plain *.pod file even be a CompUnit by itself?

[00:18] <geraud> zengargoyle: is there an alternative to p6doc? 

[00:19] <zengargoyle> perl6 --doc ~/.rakudobrew/moar-nom/install/share/perl6/site/lib/Type/Str.pod | less

[00:19] <zengargoyle> :P

[00:20] <geraud> Oh, I see... :)

[00:21] <zengargoyle> i have long held unsubstanciated worries over the common Perl 5 POD usage of things like: Module::Cookbook::Index or Module::Manual::Intro type documentations.

[00:22] <zengargoyle> and it not going to be easy to just ls a directory and less a file and read the POD when things are broken.

[00:23] <AlexDaniel> .oO( How many people does it take to introduce τ to the language? One to prepare all pull requests, three to merge these pull requests… )

[00:23] <zengargoyle> 'cause there's no Module.pm file anymore, its some locked up bytcode thing in a repo under a sha1 somewhere that has to be loaded up into the VM to be accessible.

[00:25] <autarch> zengargoyle: if that stuff ships in a distro won't it just get installed like everything else?

[00:26] <Skarsnik> AlexDaniel, 10 to agree on the spec

[00:26] <autarch> and assuming it's installed there should be a way to write p6doc Module::Cookbook

[00:26] <AlexDaniel> Skarsnik: well, 

[00:26] <zengargoyle> autarch: what stuff?

[00:26] <autarch> zengargoyle: any file with pod in it

[00:26] <AlexDaniel> Skarsnik: as far as I know the specs are not holy, but tests are :)

[00:26] <autarch> given that the compiler actually parses pod now, pod is just more code, right?

[00:27] <zengargoyle> right, what gets installed though is a .moarvm byte blob right..  you can't read the pod directly without perl6/p6doc working.

[00:27] <autarch> right

[00:28] <autarch> it would be nice to keep a copy of the "text" version around too

[00:28] <autarch> I mean for everything

[00:28] <zengargoyle> or when you get an error: died with foo at line 1 in blah... you can't actually look at blah.pm and see what's going on.

[00:29] <zengargoyle> you get to hunt down the *source* of blah, install the repo or whatnot, find the right version matching the one you have installed, just to look at the source.

[00:30] *** Psyche^ joined
[00:30] *** Psyche^_ left
[00:30] <autarch> yeah, sounds like a use case that needs to be thought through

[00:30] <zengargoyle> it just breaks that niceness of dynamic stuff that the source is easily findable and look-at-able.

[00:30] <autarch> yep

[00:30] <awwaiid> In https://gist.github.com/awwaiid/7ae087830e31cfb02809#file-parse-p6-L21 if I leave in the { } I get a nice parse, and if I take it out I do not -- what is the empty { } doing? If this was a rule then I'd guess somewhitespace thing, but this is a token

[00:31] <awwaiid> (this is a whitespace-indent parser)

[00:33] *** leont left
[00:33] <japhb> .ask ShimmerFairy Wouldn't the strings that require escapes in your advent post require double quotes instead of single quotes?

[00:33] <yoleaux> japhb: I'll pass your message to ShimmerFairy.

[00:34] <ShimmerFairy> japhb: what strings?

[00:34] <yoleaux> 6 Dec 2015 22:45Z <cygx> ShimmerFairy: I had to do some emergency surgery on your Day7 posting as something went wrong with HTML-encoding the code samples; cf https://gist.github.com/cygx/0ac6aa9922627cc2c2ea for what I did in case I messed up somewhere

[00:34] <yoleaux> 00:33Z <japhb> ShimmerFairy: Wouldn't the strings that require escapes in your advent post require double quotes instead of single quotes?

[00:34] <geekosaur> ewps... that first message might explain the second...

[00:35] <ShimmerFairy> japhb: ah, yes, I see now. I guess &quot; means " then?

[00:35] *** pierre-vigier joined
[00:35] <japhb> ShimmerFairy: yes, IIRC you what &dquot; but it's been a while.

[00:36] <japhb> *want

[00:36] <japhb> Sheesh

[00:36] <ShimmerFairy> so either my mangled " chars were mis-replaced, or I mistyped in the first place :P

[00:36] <jdv79> is panda not able to install non-eco modules anymore?

[00:37] <jdv79> iirc that used to work, no?

[00:37] <japhb> Hmmm, nope, I'm wrong, it's &quot ...

[00:37] <japhb> I was thinking of the typographical variant

[00:38] <japhb> Yeah, something is definitely goofy.  I cut and pasted some of the code, and it is as incorrect as it appears (so it's not a goofy font issue, it's actually wrong)

[00:39] <japhb> Looks like raw single quotes in the HTML, not &apos;

[00:39] *** bakedb left
[00:40] <japhb> How are you inserting source into the WP post?

[00:40] <zengargoyle> sorta seems like there needs to be a %?RESOURCE thing that's just a filesystem path for storage of thing the old way for stuff that if changed wouldn't break a compunit.. like docs/icons/etc.

[00:43] * zengargoyle will ponder more when the compunit stuff is more stable... :P

[00:45] <awwaiid> that post is messed up yeah - like it has / &lt;:Alpha&gt;+ /

[00:45] <awwaiid> in the "Not Just Strings" section, as an example

[00:46] <awwaiid> (in the advent day 7 post)

[00:46] *** Zoffix is now known as ZoffixW

[00:46] <ZoffixW> .botsnack

[00:46] <yoleaux> 6 Dec 2015 23:34Z <AlexDaniel> ZoffixW: basically I care about two things: 1) Can I do async stuff? and 2) If one of the plugins receives a message and interprets it in some way, is there any way for it to tell other plugins to ignore this message? Because when making a bot you can throw in a bunch of stuff, but you probably don't want your bot to answer twice for some message if both plugins trigger on it. That being said, sometimes you want 

[00:46] <yoleaux> it…

[00:47] <yoleaux> 6 Dec 2015 23:34Z <AlexDaniel> ZoffixW: implement these and I will be a happy man

[00:47] *** ZoffixW is now known as Zoffix

[00:47] <yoleaux> 6 Dec 2015 23:41Z <AlexDaniel> ZoffixW: maybe there has to be some sort of big dispatch thing with priorities and stuff, I don't know actually. But basically the reason I said that Net::IRC::Bot needs some reworking was because my plugins were conflicting and I was unable to find any non-ugly solution to this. One simple example: you want your bot to reply to “MyBot: !commands” message and at the same time you might want it to reply to any 

[00:47] <yoleaux> other message that was

[00:47] <yoleaux> 6 Dec 2015 23:42Z <AlexDaniel> ZoffixW: not handled, e.g. “MyBot: hi bot” should answer with “Please don't talk to me!”. That's just something to consider, maybe it will give you some ideas for better implementation.

[00:47] <yoleaux> :D

[00:47] <Zoffix> AlexDaniel, thanks for the comments. I saved them and will be sure to consider them while I hammer down the API

[00:50] <Zoffix> m: sub term:<(╯°□°）╯︵┻━┻> export { say "Noes" }; (╯°□°）╯︵┻━┻

[00:50] <camelia> rakudo-moar f24d2e: OUTPUT«===SORRY!===␤Cannot find method 'has_compile_time_value'␤»

[00:50] <Zoffix> m: sub term:<(╯°□°）╯︵┻━┻> { say "Noes" }; (╯°□°）╯︵┻━┻

[00:50] <camelia> rakudo-moar f24d2e: OUTPUT«Noes␤»

[00:50] <Zoffix> Oh 

[00:51] <zengargoyle> wow, is advent supposed to be light-grey text on white bg... terribly hard to read.

[00:51] <Zoffix> zengargoyle, configure your monitor correctly :P

[00:51] <Zoffix> It's nearly black on my screen TBH

[00:51] <Zoffix> Titles are slightly lighter

[00:52] <Zoffix> And code examples are black (at least on this one https://perl6advent.wordpress.com/2015/12/07/day-7-unicode-perl-6-and-you/ )

[00:54] <japhb> Zoffix: It's quite possible his monitor just has a different gamma setting, which is a perfectly normal thing.  Mac v. Windows gamma was a painful thing for a very long time, until image formats started specifying expected gamma (and the renderers actually honoring it)

[00:54] <japhb> The great thing about actual black and white (as opposed to greys) is they map to themselves no matter the gamma.  :-)

[00:55] <Zoffix> I'm not so sure about the "normal" bit.

[00:55] <japhb> Zoffix: What OS and hardware are you using?

[00:55] <Zoffix> If you can't see the difference between X shades of gray on your monitor, it's either a shitty monitor or it's misconfigured.

[00:56] *** zengargo1le joined
[00:56] *** zengargoyle left
[00:57] <Zoffix> japhb, Bodhi Linux, GeForce GTX 970 card, Asus ROG PG278Q monitor... and the site looks fine on my $work box too, which is a Win7 on crappy hardware

[00:57] <japhb> Zoffix: Who says zengargoyle can't differentiate many shades of gray?  They may just not be the *same* shades of gray you see.  Plus there's human vision; there are lots of people that have contrast issues, such that they essentially need to posterize to see it.

[00:58] <Zoffix> Because if they were able to see that many shades of gray, there would be too many shades between the dark gray the text actually is and white :P

[00:58] <japhb> Zoffix: Neither of those is a Mac, whose display hardware is configured differently (or it was; it's possible they adopted a different standard to match the industry, but somehow I have problems believing The Company That Steve Built doing that)

[00:59] <jdv79> what is up with having to scroll every code part in today's advent?

[00:59] <jdv79> i gave up 1/2 way through:(

[00:59] <japhb> Oh, and ... not everyone has a good monitor.

[01:00] <japhb> Sorry, I'm just a bit sensitive to people making assumptions about vision and graphics, given that I'm color blind, and I have friends with low acuity, contrast problems, you name it.

[01:00] <Zoffix> I really doubt the boxes preferred by "hipster designers" render much differently than my $work box I use for design :)

[01:00] <Zoffix> I'm colourblind too.

[01:01] <awwaiid> er... is someone going to fix the &gt; stuff? :)

[01:01] <Zoffix> heh

[01:01] <zengargo1le> http://imgur.com/59O4loH

[01:01] <Zoffix> awwaiid, what is it supposed to be?

[01:01] <japhb> Yes, but hipster designers often have perfect vision or even better-than-"normal" vision, and usually very good hardware, and they can have trouble realizing not everyone does.

[01:01] <Zoffix> zengargo1le, weird. It's much darker on my screen

[01:03] <Zoffix> zengargo1le, http://i.imgur.com/khU5e99.png

[01:03] <zengargo1le> i'm just going by comparison...  majority of sites look OK to Fine... then advent is WTF?  it's not like i complain about every single site. :P

[01:04] <japhb> Both of those are actually *way* less contrasty than I have on my monitor.  In fact, if someone hadn't mentioned it, I'd have assumed the grey was actually black.

[01:05] <awwaiid> Zoffix: in the "Not Just Strings" section a lot of < and > are &lt; and &gt; instead

[01:06] *** zengargo1le is now known as zengargoyle

[01:06] *** cygx joined
[01:07] <japhb> It appears the body text color is #666, which is supposedly a darker-than-medium gray.

[01:07] <cygx> awwaiid: I fixed those already once (but messed up by replacing &quot; with ' instead of ", my bad)

[01:07] <cygx> then, ShimmerFairy fixed the quotes and re-broke < >

[01:09] <autarch> I agree the colors on the advent calendar could be easier on the eyes

[01:09] *** Zoffix left
[01:09] <autarch> darkening the text would be a good step

[01:10] <ShimmerFairy> cygx: goddammit, wordpress is the worst about technical writing :)   (I was in HTML mode if it makes a difference)

[01:11] <jdv79> I vote for green or orange on black:)

[01:11] <cygx> ShimmerFairy: will you take another shot, or should I?

[01:11] <lucs> (high contrast)++

[01:11] <zengargoyle> i read the post in my rss reader first and didn't notice any HTML entity weirdness...

[01:11] <autarch> if we could make crayon syntax highlight perl 6 wordpress would be ok

[01:12] <jdv79> i haven't used crayons in years

[01:13] <zengargoyle> and no contrast probs since the reader strips most of that away... only saw weirdness when visiting the actual page in a browser

[01:13] <ShimmerFairy> cygx: if you can, great, otherwise I can get to it in a few minutes :)

[01:13] <ShimmerFairy> (advent also needs a search bar, last I checked)

[01:14] <ShimmerFairy> Or more generally, the advent site currently seems to be designed around "what's happening now?", and doesn't give any consideration to digging through its archives :)

[01:15] <jdv79> who does that?

[01:16] <jdv79> i found it odd that some questions were only answered in the advent pieces

[01:18] <cygx> ShimmerFairy: I'm on it, just a sec

[01:19] <awwaiid> probably a lot should be lifted into doc.perl6.org

[01:19] <awwaiid> cygx: it's looking better already :)

[01:19] <Juerd> m: tau.Rat.nude

[01:19] <camelia> rakudo-moar f24d2e: ( no output )

[01:20] <Juerd> m: tau.Rat.nude.say

[01:20] <camelia> rakudo-moar f24d2e: OUTPUT«(710 113)␤»

[01:20] <cygx> ShimmerFairy: ok, that *should* now look as originally intended

[01:26] <cygx> 'night, #perl6 - if there are still problems with the post, someone else needs to fix them ;)

[01:27] *** cygx left
[01:30] <Juerd> m: say (-1).Complex.sqrt

[01:30] <camelia> rakudo-moar f24d2e: OUTPUT«6.12323399573677e-17+1i␤»

[01:30] <Juerd> Shouldn't that be i?

[01:31] <Juerd> Or, well, 0+1i

[01:31] <Juerd> 6.12e-17 is tiny, but not quite 0

[01:32] *** yeahnoob joined
[01:32] <ShimmerFairy> m: say (-1).Complex.sqrt ≅ i

[01:32] <camelia> rakudo-moar f24d2e: OUTPUT«Type check failed for return value; expected Bool but got Slip␤  in block <unit> at /tmp/NYljak_YPz:1␤␤»

[01:32] <ShimmerFairy> m: say )(-1).Complex.sqrt) ≅ i

[01:32] <camelia> rakudo-moar f24d2e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/B0eQAVeg2_␤Unsupported use of bare "say"; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at /tmp/B0eQAVeg2_:1␤------> 3…»

[01:32] <ShimmerFairy> m: say ((-1).Complex.sqrt) ≅ i

[01:32] <camelia> rakudo-moar f24d2e: OUTPUT«Type check failed for return value; expected Bool but got Slip␤  in block <unit> at /tmp/4hXctfHLnY:1␤␤»

[01:32] <ShimmerFairy> huh, that's weird

[01:34] <ShimmerFairy> looks like ≅ doesn't like 'i' or certain kind of Complex numbers for whatever reason

[01:35] *** Skarsnik left
[01:41] <skids> m: my $p = Supplier.new; my $s = $p.unsanitized-supply; $s.serial.say; $s.tap({ sleep 1; now.say}); $p.emit(42); $p.emit(43); sleep 2; # Looks like the "make supplies serial" stuff went a little overboard

[01:41] <camelia> rakudo-moar f24d2e: OUTPUT«False␤Instant:1449452545.083135␤Instant:1449452546.087158␤»

[01:42] <japhb> .tell cygx Looks to me like you fixed it, thanks!

[01:42] <yoleaux> japhb: I'll pass your message to cygx.

[01:50] *** TimToady_ is now known as TimToady

[01:50] *** TimToady left
[01:50] *** TimToady joined
[01:51] *** mr_ron joined
[01:54] <mr_ron> ShimmerFairy: say 0 ∈ «42 -5 1».map(&amp;log ∘ &amp;abs); - the &amp; entity shows through on two lines of your advent post

[01:54] <ShimmerFairy> screw you, wordpress!

[01:55] <mr_ron> thanks for the interesting post btw

[02:00] <ShimmerFairy> you're welcome :)

[02:03] *** zacts left
[02:04] *** kaare_ joined
[02:05] *** mr_ron left
[02:06] <dalek> doc/qualified-names: 86d7824 | (Brock Wilcox)++ | doc/Language/packages.pod:

[02:06] <dalek> doc/qualified-names: Remove unnecessary details and misc cleanup

[02:06] <dalek> doc/qualified-names: review: https://github.com/perl6/doc/commit/86d78248ea

[02:10] *** zacts joined
[02:18] *** herby_ joined
[02:18] <herby_> Good evening, everyone!

[02:23] <flussence> ShimmerFairy++ # that's a great article! (WP ate your footnote btw)

[02:24] <ShimmerFairy> thanks :)   (and for the love of...)

[02:24] <flussence> cygx++ too # making &open saner

[02:24] <flussence> (that's one part of programming I usually avoid, because it's so *easy* to cause data loss by getting it wrong)

[02:25] * ShimmerFairy ponders advent using a perl6-powered blogging platform next year :P

[02:26] <dalek> doc/qualified-names: aab793f | (Brock Wilcox)++ | doc/Language/syntax.pod:

[02:26] <dalek> doc/qualified-names: Actually provide a few random examples

[02:26] <dalek> doc/qualified-names: review: https://github.com/perl6/doc/commit/aab793f85b

[02:26] *** gtodd left
[02:26] <ShimmerFairy> flussence: I just realized I didn't finish the thought in the footnote, so it's good my attention had to be drawn to it :P

[02:26] *** yqt left
[02:29] <SmokeMachine__> Hi! Shouldn't this work? https://www.irccloud.com/pastebin/TZTJDtyW/

[02:30] <flussence> the link? or whatever it's meant to link to?

[02:30] <flussence> argh, who hides a *pastebin* behind js?

[02:30] <SmokeMachine__> m: multi bla(--> Str){ 42.Str } multi bla(--> Int){ 43 } my Int $a = bla; my Str $b = bla; $a.say; $b.say;

[02:30] <camelia> rakudo-moar f24d2e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/c8LeIqObE1␤Strange text after block (missing semicolon or comma?)␤at /tmp/c8LeIqObE1:1␤------> 3multi bla(--> Str){ 42.Str }7⏏5 multi bla(--> Int){ 43 } my Int $a = bl␤    expecting any of:␤    …»

[02:31] <SmokeMachine__> flussence: ^^ that's the code

[02:31] <SmokeMachine__> the pastern code

[02:31] <flussence> I don't think multis are smart enough to multi on the return type like that yet.

[02:31] <SmokeMachine__> flussence: will they be?

[02:33] <SmokeMachine__> m: multi bla(--> Str){ 42.Str }; multi bla(--> Int){ 43 }; my Int $a = bla; my Str $b = bla; $a.say; $b.say;

[02:33] <camelia> rakudo-moar f24d2e: OUTPUT«Ambiguous call to 'bla'; these signatures all match:␤:( --> Str)␤:( --> Int)␤  in block <unit> at /tmp/prcwRvqDeb:1␤␤»

[02:33] <zacts> b 1

[02:34] <TimToady> SmokeMachine__: no, it is impossible without time travel

[02:34] <yoleaux> 6 Dec 2015 21:30Z <[Coke]> TimToady: if it's late enough to update our HEAD revision to v6.c

[02:35] <SmokeMachine__> TimToady: So, let's start working on time travel? Just kidding... but why is it impossible?

[02:35] <TimToady> the context is not known at the time of the return

[02:35] <flussence> that'd basically be reintroducing perl5's wantarray with all the complexity of perl6 smartmatching

[02:35] <TimToady> you could bind it to something half an hour later

[02:36] <TimToady> the best you can do is return an object that behaves polymorphically depending on context

[02:36] <TimToady> s/poly/allo/

[02:38] <TimToady> and while (as Perl 5 demonstrates) it's possible for a compiler to pass some context information in, in Perl 6 this would basically make multiple dispatch to the next call impossible

[02:38] <SmokeMachine__> but, is it needed to know the context on time of the return? shouldn't the context to be needed on time to choose the function?

[02:39] <TimToady> yes, it's basically just never gonna work

[02:40] <TimToady> suppose you call your bla function, and then want to call something else that differentiates on Str vs Num, but you don't know what you got back if you returned both things :)

[02:41] <TimToady> multiple dispatch can only work in one direction, and Perl 5 kinda chose the wrong direction, in my (deeply humble) estimation

[02:41] <SmokeMachine__> but if i know the type of the variable that I got the result...

[02:42] <skids> .tell jnthn Questions that arose while updating S17 https://gist.github.com/skids/fabd0304f40e24db33d0

[02:42] <yoleaux> skids: I'll pass your message to jnthn.

[02:42] <TimToady> it would be possible to predict occasionally, but it's not worth it

[02:43] <SmokeMachine__> TimToady: thanks for your the explanation

[02:43] <ShimmerFairy> SmokeMachine__: if you called bla in any context that didn't specify a constraint (e.g.  my $a = bla  , that is without the type), it wouldn't be able to know. C++ has the same issue, if you're curious (C++ doesn't differentiate on return type either)

[02:45] *** ilbot3 left
[02:46] <SmokeMachine__> ShimmerFairy: IMHO, that would be an error... but ok, I understand...

[02:46] *** ilbot3 joined
[02:48] <SmokeMachine__> ShimmerFairy: I mean: call in Any context should be an error (again IMHO) but it should (IMHO) work when getting the return on the "right" var type...

[02:49] <SmokeMachine__> (and probably a compiler error)

[02:49] <SmokeMachine__> but ok, thanks for listening...

[02:49] <ShimmerFairy> that's of course a possible design choice, but the issue in general is that there's no constraint on where to use function calls like there is for arguments (that is, the language enforces constraints on arguments, but doesn't/can't enforce constraints on where to call functions), as far as I understand it :)

[02:50] <SmokeMachine__> ShimmerFairy: thanks!

[02:51] <ShimmerFairy> The way I saw it worded when I looked this up in C++-land went something like "because nothing says you _have_ to do anything with the return type, so there's no way to reliably differentiate on it"

[02:52] <SmokeMachine__> ShimmerFairy: that makes sense...

[02:52] <ShimmerFairy> s/return type/return value/, but mostly the same meaning :P

[02:54] *** kaare_ left
[02:57] <ugexe> m: use Test; subtest { if 1 { return 1; }; }; # curious what changed recently that results in this no longer working?

[02:57] <camelia> rakudo-moar f24d2e: OUTPUT«Attempt to return outside of any Routine␤  in block <unit> at /tmp/Q_s6Z1jVm4:1␤␤»

[02:58] <TimToady> what is a subtest?

[02:59] <TimToady> I think jnthn just made return work correctly, is all

[02:59] <TimToady> return has always been specced as purely lexotic, but rakudo gave up on did a dynamic return, which is against spec, so jnthn++ fixed it

[02:59] <TimToady> *on that and did

[03:00] <ugexe> yea im not saying it was correct before, just curious what the change was. subtest is from Test.pm, and it takes a &code

[03:00] <TimToady> if there isn't an explicit Routine declaration, return can't see it

[03:01] <TimToady> I mean, it'll keep looking outward for one

[03:01] <TimToady> and if found, that is the only routine that return can return from

[03:02] <TimToady> this is so that we make no distinction between built-in and user-defined control structures

[03:02] <TimToady> a dynamic return could very easily find the wrong sub to return from

[03:03] <ugexe> m: sub subtest(&code) { &code(); }; subtest { return 1; } # this is the golf

[03:03] <camelia> rakudo-moar f24d2e: OUTPUT«Attempt to return outside of any Routine␤  in block <unit> at /tmp/FNDxkhPNtw:1␤␤»

[03:04] *** noganex_ joined
[03:05] <TimToady> well, { return 1 } is golf :)

[03:06] *** noganex left
[03:07] <TimToady> m: return

[03:07] <camelia> rakudo-moar f24d2e: OUTPUT«Attempt to return outside of any Routine␤  in block <unit> at /tmp/OEh2HMoMFE:1␤␤»

[03:07] <TimToady> that's golfer :)

[03:07] <TimToady> so, bad test

[03:10] <flussence> m: use Test; use nqp; is(nqp::sprintf('%#b', [0]), '0', 'simple %b with zero value'); # half a dozen of the tests surrounding this one in nqp's test suite currently fail

[03:10] <camelia> rakudo-moar f24d2e: OUTPUT«This type does not support positional operations␤␤»

[03:11] <ShimmerFairy> TimToady++ for making the language not treat itself as a special case (something I've been recently reminded C++ doesn't do, when looking into user-defined literals)

[03:11] <flussence> nqp: say(nqp::sprintf('%#b', [0]));

[03:11] *** camelia left
[03:12] <flussence> huh. anyway, that line prints "0b" for me here

[03:12] *** camelia joined
[03:12] *** pierre-vigier left
[03:13] <ShimmerFairy> flussence: don't use bare nqp:, it kills camelia on account of nqp-p

[03:13] <flussence> oh, whoops sorry

[03:13] <flussence> nqp-m: say(nqp::sprintf('%#b', [0]));

[03:13] <flussence> looks like I really killed it :(

[03:13] <camelia> nqp-moarvm: OUTPUT«0␤»

[03:13] <camelia> ..nqp-jvm: OUTPUT«#␤# There is insufficient memory for the Java Runtime Environment to continue.␤# pthread_getattr_np␤# An error report file with more information is saved as:␤# /tmp/jvm-7308/hs_error.log␤»

[03:14] <camelia> ..nqp-parrot: OUTPUT«Can't exec "./rakudo-inst/bin/nqp-p": No such file or directory at lib/EvalbotExecuter.pm line 194.␤exec (./rakudo-inst/bin/nqp-p /tmp/tmpfile) failed: No such file or directory␤Server error occurred! Closing Link: ns1.niner.name (Quit: camelia)␤Lost connect…»

[03:14] *** ChanServ sets mode: +v camelia

[03:14] <camelia> nqp-moarvm: OUTPUT«0␤»

[03:14] *** pierre-vigier joined
[03:14] <flussence> huh, works there...

[03:15] <flussence> I wonder if it's because I'm building with system libs and the bundled ones aren't vanilla

[03:16] *** pierre-vigier left
[03:16] *** kid51 left
[03:17] <ugexe> i wanted to demonstrate where the return value was coming from before vs what happens now with it

[03:19] *** pierre-vigier joined
[03:21] *** pierre-vigier left
[03:27] <uruwi> question: how to allocate a buffer of a certain size?

[03:28] *** herby_ left
[03:33] *** csd_ left
[03:35] *** lustlife joined
[03:40] *** aborazmeh joined
[03:40] *** aborazmeh left
[03:40] *** aborazmeh joined
[03:44] <dalek> rakudo/nom: 1e1556b | TimToady++ | src/ (3 files):

[03:44] <dalek> rakudo/nom: provide thunk info for possible metaop thunking

[03:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e1556b1a2

[03:46] *** lolisa left
[03:52] *** lolisa joined
[04:02] *** yeahnoob left
[04:07] *** yeahnoob joined
[04:08] *** pierre-vigier joined
[04:11] *** pierre-vigier left
[04:18] *** MadcapJake left
[04:26] *** WizJin joined
[04:30] *** pierre-vigier joined
[04:30] *** mohae_ joined
[04:31] *** pierre-vigier left
[04:32] *** mohae left
[04:36] *** mephinet left
[04:40] *** pierre-vigier joined
[04:48] *** mephinet joined
[04:50] <lucs> With panda, obtained "==> Successfully installed Debugger::UI::CommandLine".

[04:50] <lucs> But where is the module, the .pm file?

[04:52] *** pierre-vigier left
[04:55] *** M-eternaleye left
[04:55] *** M-eternaleye joined
[04:55] *** M-eternaleye is now known as eternaleye

[04:56] *** MadcapJake joined
[04:57] * lucs goes to bed; tomorrow will be better.

[04:59] <robnox> overall is the moar or jvm faster?

[05:07] *** MadcapJake left
[05:07] *** khw left
[05:09] <AlexDaniel> robnox: try it and see

[05:09] <AlexDaniel> robnox: startup time on jvm is slower for sure, but everything else depends I think

[05:15] *** dcmertens joined
[05:15] <robnox> is there an easy way to toggle between the backends?

[05:16] <AlexDaniel> perl6-j and perl6-m

[05:16] <robnox> sweet, ty

[05:16] *** census joined
[05:16] <AlexDaniel> these commands should be avaialable if you've built both

[05:16] <census> hi is anybody around?

[05:17] <skids> o/

[05:17] <AlexDaniel> census: sure, but everyone is kinda asleep at the moment. Not too crowdy :)

[05:17] <robnox> I just woke up, but im an odd one.. lol

[05:17] <census> AlexDaniel I'm in urgent need of some mac help

[05:17] <census> i know it's the wrong room

[05:17] <AlexDaniel> robnox: 7:17 AM, did not sleep yet

[05:17] <robnox> I can help you.. step 1. uninstall OSX. step 2, install linux. ;)

[05:18] <AlexDaniel> robnox: that's gonna take some time, but it's urgent

[05:18] <census> robnox i can't do that because it's a school computer

[05:18] <AlexDaniel> census: ouch… that sucks

[05:18] *** znpy left
[05:18] <AlexDaniel> census: anyway, what's your question? :)

[05:18] <dcmertens> Hello everyone. In case you missed it, the NSF just released a program solicitation that I thought might be of interest on this channel

[05:18] <dcmertens> http://www.nsf.gov/pubs/2016/nsf16515/nsf16515.htm?WT.mc_id=USNSF_179

[05:19] <census> My mac has a flashing ? mark

[05:19] <census> the ? is in a flashing folder

[05:19] <census> i'm not good with macs at all. i usually use pc

[05:19] <census> is there a way to take the battery out and reboot ?

[05:21] <robnox> sounds like fs corruption, I would try to repair the disk

[05:21] <dcmertens> census, is this the bootup screen?'

[05:21] <AlexDaniel> census: #mac perhaps?

[05:21] <census> i don't have a repair disk

[05:21] <census> it is my school computer

[05:21] * dcmertens seconds AlexDaniel's suggestion

[05:22] <robnox> fsck is your friend

[05:22] <census> robnox what can i do with fsck ?

[05:23] <AlexDaniel> “To force restart your Mac: On some Macs, press control-command and the power button or control-command-eject at the same time. On most Macs, hold the power button for five seconds to force shutdown, and then push the power button again to restart.” – or this?

[05:23] <robnox> fsck = "filesystem check".. tool that can sometimes fix problems with fs corruption, it's ancient but i'm going to assume macs support it since they run on code stolen from BSD

[05:24] <dcmertens> census, the only time I saw this on my mac was in bootup, and it meant my system wouldn't boot

[05:24] <dcmertens> if you're in the same boat, you'll need a recovery disk of some sort

[05:25] *** rhr left
[05:26] <robnox> now that I think about it, most of windows was stolen from BSD too.. lol

[05:26] <dcmertens> robnox, I was just wondering about that

[05:27] <dcmertens> do you have any good links about the history?

[05:27] <adhoc> robnox: there were folks from VMS that helped implement things in windows nt, IIRR

[05:27] *** lolisa left
[05:28] <adhoc> robnox: also a bunch of stuff was jopintly developed with IBM OS/2, and Windows program manager

[05:29] <moritz_> .botsnack

[05:29] <yoleaux> 6 Dec 2015 22:31Z <autarch> moritz_: I need access to the advent calendar blog to post my article at some point

[05:29] <yoleaux> :D

[05:29] <yoleaux> 6 Dec 2015 22:34Z <ZoffixW> moritz_: never mind, I sent autarch an invite

[05:29] <robnox> OS/2 wow, that's something I haven't heard of in a while!

[05:29] *** moritz_ is now known as moritz

[05:29] <robnox> dcmertens, don't have any links but if you look in the windows.h you should see some BSD licenses still there

[05:29] *** skids left
[05:29] <robnox> mostly in the network stack

[05:30] <robnox> probably some basic kernel structures as well like linked lists etc

[05:31] *** rhr joined
[05:31] <census> is there a way to take a battery out of a mac?

[05:35] <AlexDaniel> Like this: https://s-media-cache-ak0.pinimg.com/736x/2f/5c/8d/2f5c8d1e2c863c2989a5587137f0c269.jpg

[05:37] <adhoc> robnox: yes, thats cuase they outsourced that bit.

[05:37] <census> AlexDaniel you are telling me that the battery is inside the computer?

[05:38] <adhoc> well, for NT 3.5 and onwards, IIRR, there are articles explaining about why their implementation of ipconfig was quite similar to bsd 4.x

[05:38] <AlexDaniel> census: you didn't tell us which model it is, so we don't know :)

[05:39] *** aborazmeh left
[05:39] <census> MacBook Air

[05:39] <census> i don't know more because the computer isn't working

[05:39] <AlexDaniel> well, then… where else would it be? :)

[05:41] <robnox> adhoc: years ago the windows source code was leaked, and everyone that got a copy was able to confirm that the network stack was indeed directly copied.  I may or may not have seen this source, but am not at liberty to discus. lol

[05:41] <robnox> s/discus/discuss/

[05:43] <census> i just drained the battery

[05:43] <census> and now it is not going to a white apple screen

[05:48] <robnox> census, what happens when you hold shift at startup?

[05:51] <census> hold one shift robnox?  how long?

[05:52] <robnox> while it boots..

[05:53] <robnox> that should get you into safe mode, which supposedly will automatically run fsck.  if that doesn't work you will probably need to reinstall from media. that's all the pointers i'll give you, if you still need help try #mac

[05:55] *** lolisa joined
[05:55] <adhoc> robnox: if thats the case, then the license allows that. whats the problem ?

[05:58] <census> robnox, do i hit shift once or many times?

[05:59] <census> robnox it didn't work with shift

[06:00] <census> i tried hitting it many times

[06:01] <robnox> the problem is I can't say whether I've seen the windows source or not.  and I've worked as a contractor for Microsoft in the past so I'd rather not burn bridges, but if you are curious google it and make your own conclusion

[06:02] *** adhoc left
[06:02] <robnox> census: #mac

[06:03] *** WizJin left
[06:04] *** adhoc joined
[06:06] <census> robnox it does not seem to go into safe mode

[06:08] *** xfix joined
[06:08] *** dcmertens left
[06:09] <xfix> https://github.com/perl6/specs/commit/2ed41123316eccee65a76206a4df3863d8a26435

[06:09] <robnox> What is the current status of DBI with perl6?

[06:09] <xfix> Hm, I wonder what should I do about Math::Tau module I made 2 year sago.

[06:11] *** WizJin joined
[06:18] *** sno left
[06:20] *** pierre-vigier joined
[06:23] <dalek> ecosystem: b5270f6 | (Konrad Borowski)++ | META.list:

[06:23] <dalek> ecosystem: Remove Math::Tau obsoleted by perl6/specs@2ed4112

[06:23] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/b5270f6ab2

[06:25] *** [Tux] left
[06:27] *** Khisanth left
[06:29] *** CIAvash joined
[06:30] *** csd_ joined
[06:31] <census> thanks robnox for your help.  i'm not good with macs

[06:33] <robnox> your welcome.  I'm not really a mac guy either, but I've been forced to work with them at school.  That and I live less than a mile from Apple:P

[06:34] *** csd_ left
[06:36] *** [Tux] joined
[06:44] *** Khisanth joined
[06:44] *** geraud left
[06:53] *** bjz joined
[06:55] *** zengargoyle left
[06:57] *** bjz left
[06:58] *** bjz joined
[06:59] *** abaugher_ left
[07:00] <robnox> cool, got some basic stuff working with DBIish and perl6.  Is that really the only current option for perl6 idioms and database interface?

[07:01] *** abaugher_ joined
[07:01] <AlexDaniel> robnox: interesting… DBIish is currently broken

[07:01] <dalek> rakudo/nom: 0a2303c | TimToady++ | src/ (5 files):

[07:01] <dalek> rakudo/nom: implement transitive thunkiness for ! && R metaops

[07:01] <dalek> rakudo/nom: 

[07:01] <dalek> rakudo/nom: For the moment, we disable it for X and R because it breaks things.

[07:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0a2303c0f6

[07:02] <AlexDaniel> xfix: you could have kept the module for those who are against tau addition :D

[07:03] *** Khisanth left
[07:03] <xfix> AlexDaniel: It was already added to Perl 6 core.

[07:03] *** ribasushi left
[07:04] *** domidumont joined
[07:04] <AlexDaniel> well, yeah, I know… 

[07:06] *** adu joined
[07:08] *** bjz left
[07:08] <robnox> AlexDaniel, thanks for the heads up.  I'll now expect to encounter some brokenness soon, lol

[07:08] *** domidumont left
[07:09] <AlexDaniel> robnox: well, there's nothing wrong with DBIish itself, as far as I can see

[07:09] <AlexDaniel> robnox: something somewhere else is broken…

[07:09] <robnox> ahh

[07:09] <AlexDaniel> robnox: what's your rakudo version?

[07:09] <AlexDaniel> robnox: pre curli or not?

[07:10] <robnox> should be the latest

[07:10] <AlexDaniel> robnox: rakudobrew?

[07:10] <robnox> rakudostar

[07:10] <AlexDaniel> 2015.11 then

[07:10] <robnox> aye

[07:10] *** Khisanth joined
[07:10] <robnox> about a week old

[07:12] <AlexDaniel> robnox: okay, DBIish should break when you upgrade, but there is a workaround

[07:12] *** pierre-vigier left
[07:12] <robnox> what's the workaround?

[07:13] <AlexDaniel> robnox: the problem is that this line fails https://github.com/perl6/DBIish/blob/master/lib/DBIish.pm6#L14

[07:13] <AlexDaniel> robnox: here is the error: https://travis-ci.org/perl6/DBIish#L962

[07:14] <TimToady> m: say 3 Rxx rand

[07:14] <camelia> rakudo-moar 0a2303: OUTPUT«(0.0592491323031192 0.00578079871473254 0.290929631967117)␤»

[07:14] <AlexDaniel> robnox: the ugly workaround is to change that line to ｢use DBDish::Pg;｣ or whatever database you are using

[07:15] <dalek> ecosystem: 72bb079 | ugexe++ | META.list:

[07:15] <dalek> ecosystem: Sort::Naturally: s/META.info/META6.json/

[07:15] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/72bb079e22

[07:16] <robnox> that doesn't seem too bad.  why ugly?

[07:16] *** WizJin left
[07:17] <AlexDaniel> robnox: well, it shouldn't use DBish::pg if you are not using Pg…

[07:17] <robnox> oh.. im using pg lol

[07:18] <AlexDaniel> this problem with ｢require｣ is beyond me, I hope somebody has better brains to dive into it

[07:19] <robnox> yeah, going to have to shelve this code for the moment.. can't believe the weekend is already over, have to study integrals for finals week

[07:20] <robnox> I got a 95 on the last exam. never really considered myself a math person, but most of this is just memorizing the integral formulas and recognizing when they occur/when to apply

[07:23] *** FROGGS joined
[07:24] *** bjz joined
[07:24] <dalek> roast: 1a09681 | usev6++ | S32-str/samemark.t:

[07:24] <dalek> roast: Skip tests for samemark on JVM

[07:24] <dalek> roast: review: https://github.com/perl6/roast/commit/1a096816e8

[07:24] <dalek> roast: aac0489 | usev6++ | S32-num/power.t:

[07:24] <dalek> roast: Fudge tests for vulgar fractions and big exponents on JVM

[07:24] <dalek> roast: review: https://github.com/perl6/roast/commit/aac048965b

[07:24] <dalek> roast: 877fa65 | usev6++ | S15-literals/numbers.t:

[07:24] <dalek> roast: Fudge tests for unival literals on JVM

[07:24] <dalek> roast: review: https://github.com/perl6/roast/commit/877fa65a9b

[07:24] <ugexe> ive "fixed" 2 modules that were failing due to precomp by putting "no precompilation" in every single .pm and .t file of the project

[07:24] *** WizJin joined
[07:25] *** lolisa left
[07:26] *** hankache joined
[07:28] <hankache> ShimmerFairy++ #Advent post

[07:30] *** tarski joined
[07:32] *** hankache_ joined
[07:33] *** hankache_ left
[07:33] *** hankache_ joined
[07:34] *** hankache_ left
[07:35] *** hankache left
[07:35] <nadim> Good morning, Can I tel if a variable is type object or it is an instance of a type?

[07:35] *** tarski left
[07:36] *** tarski joined
[07:37] <nadim> arf, I hate it when I ask a question, after l looked for the answer, and then find the answer a second later!

[07:37] <TimToady> m: say Int.DEFINITE; say Int.new.DEFINITE

[07:37] <camelia> rakudo-moar 0a2303: OUTPUT«False␤True␤»

[07:37] <TimToady> though usually you can just use .defined

[07:38] <nadim> TimToady: thank you

[07:38] <robnox> nadim, that's how it usually goes!

[07:40] <nadim> robnox: Yup! make one look a bit silly (/me takes pointy hat out)

[07:40] *** xfix left
[07:42] *** pierre-vigier joined
[07:45] *** darutoko joined
[07:45] <masak> goooood morning :)

[07:45] * masak .oO( perl6etnam )

[07:48] *** census left
[07:52] <moritz> \o

[07:56] *** ribasushi joined
[07:59] *** Khisanth left
[08:01] <dalek> rakudo/nom: 67202d6 | TimToady++ | src/Perl6/Actions.nqp:

[08:01] <dalek> rakudo/nom: make sure nested metaops see inner meta's thunky

[08:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/67202d697d

[08:01] <dalek> roast: 44804e7 | TimToady++ | S03-metaops/reverse.t:

[08:01] <dalek> roast: test that RRxx and RRRxx flip thunky transitively

[08:01] <dalek> roast: review: https://github.com/perl6/roast/commit/44804e7bf6

[08:01] <AlexDaniel> robnox: yeah, that's why I've never had high scores on this stuff

[08:02] <AlexDaniel> robnox: my brain refuses to memorize when I know that I will forget it after the exam

[08:03] <AlexDaniel> robnox: I love math though, just not the part when you have to memorize a bunch of stuff just to pass the test

[08:03] *** km3 joined
[08:06] <moritz> math school teaching is notoriously bad at motivating

[08:07] <moritz> for me that usually wasn't a problem, but a lot of my peers struggled

[08:08] <moritz> (for me, bad motivation was a problem in other subjects, such as history; I liked to learn how things lead to each other, but I was very bad at memorizing date, and so had quite some trouble with tests)

[08:12] <El_Che> moritz: that a classic. History at university level is all about relations and not about memorizing data. In my first year only 33% passed.

[08:12] <El_Che> moritz: a lot of people thought it was about learning phonebooks by heart :)

[08:13] *** Khisanth joined
[08:13] <AlexDaniel> well, my solution was to ignore scores completely and just focus on learning

[08:13] *** Khisanth is now known as Guest98452

[08:13] <AlexDaniel> that is, I was setting my own goals. I think that worked

[08:15] <AlexDaniel> by worked I mean I got highest stuff learned/time spent ratio, though some people around me were not so happy about some of my marks

[08:15] <moritz> I hope that when my daughters are in school, I'll be sufficiently relaxed as long as they get passing grades

[08:16] <moritz> s/are/will be/

[08:17] <AlexDaniel> moritz: what about homeschooling?

[08:18] <moritz> AlexDaniel: not practical

[08:18] <AlexDaniel> moritz: why?

[08:18] <moritz> AlexDaniel: because I work, and my wife works part time

[08:19] <moritz> AlexDaniel: and I don't think the two of us could cover all topics well either

[08:19] *** CIAvash left
[08:19] <moritz> AlexDaniel: and then there's the social aspect to consider

[08:19] <moritz> and I don't consider myself to be a good teacher either

[08:19] *** sno joined
[08:19] <moritz> (maybe for very motivated pupils in subjects I love, but certainly not for many of the topics covered in school)

[08:20] <AlexDaniel> moritz: yeah, well. I wonder if I will be able to pull it off

[08:21] <moritz> even though some of my school education was shitty, I don't think I could offer my kids a better experience if I did it myself

[08:23] *** RabidGravy joined
[08:25] *** bjz_ joined
[08:26] *** zakharyas joined
[08:26] *** bjz left
[08:31] *** pierre-vigier left
[08:33] <dalek> doc: e2054c9 | (Brock Wilcox)++ | doc/Language/ (2 files):

[08:33] <dalek> doc: Add basic info on qualified names, taken from S02

[08:33] <dalek> doc: review: https://github.com/perl6/doc/commit/e2054c9c5c

[08:33] <dalek> doc: ea23fcd | (Brock Wilcox)++ | doc/Language/ (3 files):

[08:33] <dalek> doc: Move into a dedicated Packages doc

[08:33] <dalek> doc: review: https://github.com/perl6/doc/commit/ea23fcd7e1

[08:33] <dalek> doc: 86d7824 | (Brock Wilcox)++ | doc/Language/packages.pod:

[08:33] <dalek> doc: Remove unnecessary details and misc cleanup

[08:33] <dalek> doc: review: https://github.com/perl6/doc/commit/86d78248ea

[08:33] <dalek> doc: aab793f | (Brock Wilcox)++ | doc/Language/syntax.pod:

[08:33] <dalek> doc: Actually provide a few random examples

[08:33] <dalek> doc: review: https://github.com/perl6/doc/commit/aab793f85b

[08:33] <dalek> doc: 353e898 | RabidGravy++ | doc/Language/ (2 files):

[08:33] <dalek> doc: Merge pull request #224 from perl6/qualified-names

[08:33] <dalek> doc: 

[08:33] <dalek> doc: Add package (namespace) documentation, taken from S02

[08:33] <dalek> doc: review: https://github.com/perl6/doc/commit/353e8985bd

[08:35] *** pierre-vigier joined
[08:37] *** sarya joined
[08:37] <sarya> hii

[08:37] <masak> sarya: hi

[08:37] <masak> sarya: you are here for the Perl 6, I take it?

[08:37] * masak grins

[08:38] <sarya> ok

[08:38] <sarya> what  to do

[08:38] <masak> install it!

[08:38] <masak> write a blog engine! :D

[08:38] <masak> take over the world

[08:38] <masak> MWHAHAHA

[08:38] <sarya> how

[08:38] <masak> oh, hm

[08:38] <sarya> yes

[08:38] <masak> go to http://perl6.org/

[08:39] <masak> press the big blue friendly "Download Rakudo Perl 6" button

[08:39] <sarya> i did

[08:39] <masak> didn't work? :/

[08:39] <sarya> nopes

[08:39] *** rurban joined
[08:40] <sarya> anyone?

[08:41] <masak> could you describe your problem in more detail, please?

[08:41] <masak> in what way did it not work?

[08:41] *** csd_ joined
[08:42] <sarya> i have already a perl 5.22

[08:42] <masak> that should be fine

[08:43] <masak> so do I

[08:43] <masak> are you on Windows?

[08:43] <sarya> i want to do something in 6

[08:43] <sarya> yes

[08:43] <masak> great!

[08:43] * RabidGravy wonders what perl 5 version there is on this machine

[08:43] *** ollej left
[08:43] <masak> m: say "try this :)"

[08:43] <camelia> rakudo-moar 67202d: OUTPUT«try this :)␤»

[08:43] <masak> sarya: ^

[08:44] *** abraxxa joined
[08:44] <sarya> yes

[08:44] <masak> did you try one of the .msi files on http://rakudo.org/downloads/star/ ?

[08:44] <sarya> masak

[08:44] <sarya> wait a minute

[08:45] * masak takes on an air of infinite patience

[08:45] <AlexDaniel> RabidGravy: try this: perl6 -e 'run «perl --version»' # :D

[08:45] <masak> :P

[08:45] *** csd_ left
[08:46] <TimToady> m: say 43 Rand 0

[08:46] <camelia> rakudo-moar 67202d: ( no output )

[08:47] <TimToady> m: say 43 Rand 1

[08:47] <camelia> rakudo-moar 67202d: OUTPUT«43␤»

[08:47] <masak> Rand! o.O

[08:47] * masak .oO( TimTatlas Shrugged )

[08:47] <AlexDaniel> phaha :D

[08:48] <sarya> masak wat is this file msi?

[08:48] <sarya> i didn't get it

[08:48] <masak> sarya: better now? :)

[08:48] <sarya> y

[08:48] <masak> sarya: those are install files. should be able to just run them.

[08:48] <masak> well, one is enough

[08:48] <masak> take the latest! :D

[08:49] <AlexDaniel> RabidGravy: perl6 -e '.flip.say for run(«perl --version», :out).out.lines.list.reverse'

[08:49] <sarya> ok thanks

[08:49] *** Ven joined
[08:50] *** g4 joined
[08:50] *** g4 left
[08:50] *** g4 joined
[08:51] <masak> sarya: best of luck »ö«

[08:51] <sarya> :)

[08:52] <AlexDaniel> actually, I wish there was Rfor

[08:53] *** rindolf joined
[08:53] <AlexDaniel> otherwise, how can you make this left-to-right without sacrificing anything? .flip.say for run(«perl --version», :out).out.lines.list.reverse

[08:54] <AlexDaniel> oh right you can use { }!

[08:54] <AlexDaniel> ｢for run(«perl --version», :out).out.lines.list.reverse { .flip.say }｣ # stupid me

[08:54] <moritz> do you even need the .list?

[08:54] <AlexDaniel> moritz: it is Seq otherwise

[08:55] <AlexDaniel> hm, it works, indeed

[08:55] <moritz> m: say <a b c>.Seq.reverse

[08:55] <camelia> rakudo-moar 67202d: OUTPUT«(c b a)␤»

[08:55] <AlexDaniel> The reason I wrote .list is because ｢reverse｣ is not listed here: http://doc.perl6.org/type/Seq

[08:56] <moritz> ah, it's an Any method

[08:57] *** csd_ joined
[09:00] *** sarya left
[09:00] *** [ptc] left
[09:01] *** aigan joined
[09:01] *** csd_ left
[09:02] *** [ptc] joined
[09:05] <timotimo> the doc page for "Stringy" mentions "Cat"

[09:05] *** Actualeyes left
[09:07] <sjn> \o

[09:07] * sjn notes it's tadzik's birthday today. Happy birthday! o/

[09:07] <sjn> tadzik: ^^

[09:07] <masak> tadzik.age++ \o/

[09:07] <timotimo> oooh!

[09:08] <timotimo> tadzik, happy birthday :)

[09:08] <masak> and the "Happy Birthday to You" song is in the public domain now, so we can actually...

[09:08] <AlexDaniel> tadzik.age++ \o/

[09:08] <masak> 𝅘𝅥 happy birthday to youuuuuu ♫

[09:09] <masak> 𝅘𝅥 happy birthday to you! ♫

[09:09] * masak apparently doesn't know the lyrics so well

[09:09] <gfldex> m: with Seq.^find_method("reverse") { say .file, .line }

[09:09] <camelia> rakudo-moar 67202d: OUTPUT«gen/moar/m-CORE.setting1878␤»

[09:09] <masak> actually, since the third line is meant to be parametric on the name of the recipient...

[09:09] <masak> ...could you actually *patent* "Happy Birthday"? :P

[09:10] <masak> "Technique for creating a person-adaptive birthday celebration song"

[09:10] <gfldex> if you find a patent office that takes your money, you can patent anything

[09:10] <timotimo> this is critical to my business and my competitors must not benefit from my money and time spent in research without me getting compensated.

[09:12] <Ven> mh, mh, my `make install` fails with "No writeable path found"... did I miss some directions?

[09:14] <tadzik> \o/ thanks everyone :)

[09:15] <RabidGravy> HB tadzik !

[09:15] <Ven> happy birthday tadzik  :)

[09:15] <tadzik> thank you :)

[09:15] <Woodi> hi #perl6 :)

[09:16] <Woodi> timotimo: moust of the world just waits few years until patents are outdataed :)

[09:16] <RabidGravy> Anyone in a position to put nine's %?RESOURCES stuff back? (If you weren't following at home, it got partially reverted by accident last night)

[09:16] *** dakkar joined
[09:17] <gfldex> m: with Seq.^find_method("reverse") { say .file, .line }

[09:17] <camelia> rakudo-moar 67202d: OUTPUT«gen/moar/m-CORE.setting1878␤»

[09:17] <gfldex> ^^^ where is this bugger declared?

[09:17] <gfldex> i can't doc what i can't see :(

[09:20] <FROGGS> Happy Birthday tadzik <3

[09:20] *** cdc joined
[09:21] <Woodi> as for education: it is broken seence thousands of years... Socrates was sentenced to death becouse his students dropped democratic ideals... I hear Edison was banned from his school (and it was quite common practice in that times), there was famous german discipline later we had do not press your childrens!

[09:23] <timotimo> Woodi: how did the world go for "a few years" without double-clicking?

[09:23] <tadzik> FROGGS: thank you :}

[09:23] <timotimo> Woodi: "drücke deine kinder nicht"?

[09:23] <Woodi> many years ago I hear north Europe is perfect place for childrens and now there is epidemy of suiciding teenagers... (but I would like to hear "insiders" voice on this)

[09:24] <Woodi> timotimo: translating, pleas wait ;)

[09:24] <gfldex> those insiders are all dead, no?

[09:24] <pdcawley> m: my $foo′ = 10; say $foo′

[09:24] <camelia> rakudo-moar 67202d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/7Ub2nHdDIe␤Bogus postfix␤at /tmp/7Ub2nHdDIe:1␤------> 3my $foo7⏏5′ = 10; say $foo′␤    expecting any of:␤        constraint␤        infix␤        infix stopper␤        postfix␤      …»

[09:25] <pdcawley> Dang... kind of hoped that, what with the unicodeness I might be able to get away with a prime at the end of a variable name.

[09:25] <Woodi> timotimo: yes, keybouard and rulers are prohibited :)

[09:26] <gfldex> i found .reverse, it's declared in Any. I shall doc!

[09:27] <timotimo> pdcawley: the rule isn't "if its unicodeness is sufficient, it's allowed in an identifier", you know? ;)

[09:27] <pdcawley> Sure, but prime doesn't really make sense as an operator...

[09:28] <timotimo> why not?

[09:28] <pdcawley> Unless, I suppose, I made it an operator on a variable name :)

[09:28] <pdcawley> timotimo: generally used in notation as a 'like the variable named 'foo', but modified in some way'

[09:28] <pdcawley> s/variable/thing/

[09:30] <timotimo> the thing is, we leave the decision to the unicode consortium ... mostly

[09:30] *** hankache joined
[09:30] <timotimo> we just implement a decision based on "general category"

[09:30] <timotimo> however, you can make it a slang

[09:30] <timotimo> just like Piersing

[09:30] <hankache> o/ 

[09:32] <hankache> who owns the twitter handle @perl6 ?

[09:32] <hankache> shouldn't we have an *official* twitter account?

[09:33] <hankache> I think we should get ready to trend 6.c when it's out

[09:33] *** vytas joined
[09:34] <nadim> two terms in a row across lines (missing semicolon or comma) is a fun error message for something that starts with an elsif (IE no if block before it). I like the new message but they get time to get used to

[09:34] <hankache> twitter/facebook/HN/reddit

[09:34] *** yeahnoob left
[09:34] *** Jonis joined
[09:34] <timotimo> we also should get some content onto twitter.com/perlhex, because we do control that

[09:34] *** TEttinger left
[09:35] <hankache> perlhex?

[09:36] <timotimo> yes

[09:36] <timotimo> you know, like a hexagon has 6 corners?

[09:37] <hankache> aha

[09:37] *** lolisa joined
[09:37] *** Skarsnik joined
[09:38] <hankache> but wouldn't it be better if we take control of @perl6?

[09:38] <timotimo> sure

[09:38] <timotimo> we probably do, but whoever has it just didn't care about twitter enough? ;)

[09:38] <timotimo> i mean, last tweet's back in 2012, when twitter wasn't that big yet

[09:39] <Ulti> ooc there was talk of splitting Rakudo dev chat into another channel did that happen?

[09:40] <timotimo> i can privmsg you some bug reports, then we'll have #perl6 and our privmsg; does that count? :)

[09:41] <timotimo> sorry, read to much SMBC

[09:42] <RabidGravy> If it became necessary I'd go with making a #perl6-users

[09:43] *** bakedb joined
[09:43] <timotimo> you think so? then people would stumble in here to discuss using perl6 and we'd be sending them off to #perl6-users

[09:43] <timotimo> if we have #perl6 and #perl6-dev, we'd have to send people over who are interested in dev talk

[09:43] <timotimo> so if we expect more users than core devs, we should go the one way

[09:43] <RabidGravy> this is also true

[09:43] <timotimo> otherwise, the other

[09:44] <RabidGravy> it won't make a difference to the noise either way

[09:44] <timotimo> that depends on whether you decide to do your backlogging and main reading in #perl6 or "the other channel" ;)

[09:45] <RabidGravy> as people, even if they know there is a split, will want to jump the queue and go where the "big kids are"

[09:47] <timotimo> so we'll instead make a second channel that is populated only by markov bots to keep noisy people away from us?

[09:47] <RabidGravy> :)

[09:47] <hankache> if #perl6 is still manageable why make another?

[09:48] <timotimo> we're approaching a point where suddenly #perl6 may become "unmanagable"

[09:48] <RabidGravy> I'm actually surprised it isn't already unusable but I'm a cynic when it comes to people's behaviour on the internet

[09:49] <El_Che> RabidGravy: you're just like Hitles <--- see what I dead there? :)

[09:49] <El_Che> r

[09:49] <timotimo> ideally, we'd be infecting every new person coming in here with our ... what do you call that?

[09:49] <El_Che> saliva?

[09:50] <Ven> am I the only one with a failing `make install`?

[09:50] <Ven> I should backlog more

[09:50] <hankache> how does perl irc function?

[09:50] <hankache> one channel?

[09:50] <timotimo> the perl irc channel is a terrible place, if i'm not mistaken

[09:51] <Skarsnik> Hello, I am for a #perl6-ecosystem channel too x)

[09:51] <RabidGravy> haven't been in the #perl for years

[09:51] <hankache> we can try mimicking what they  did. if it is good

[09:51] <El_Che> isn't this an academic discussion? Something for when perl6 is big? #perl6 is pretty cozy as it is

[09:52] <RabidGravy> it's a different thing, most of p5 development is done on the mailing list

[09:52] <nine> #perl has improved a lot in recent years

[09:52] <yoleaux> 6 Dec 2015 22:05Z <lizmat> nine: I've given up on fixing the merge/revert mess that killed %?RESOURCES

[09:52] <yoleaux> 6 Dec 2015 22:48Z <masak> nine: this may help a bit, too: https://gist.github.com/masak/32f236bca8f2857d82fc -- I spent some time building various combinations of parts of the commit that fails.

[09:52] *** AlexDaniel left
[09:52] *** Actualeyes joined
[09:53] *** adu left
[09:53] <timotimo> El_Che: either you have an "academic discussion" up front and know at least 5 ways that don't work when reality catches up to your fears & expectations ...

[09:53] <RabidGravy> nine, just the person - you may want to check whether parts of what made %?RESOURCES work didn't get reverted by accident last night

[09:53] <timotimo> or you don't discuss it up front, things suddenly happen, and you end up going with one of these 5 ways that don't work that you could have figured out in advance :)

[09:54] <hankache> my fear is that #perl6 will not be attractive anymore

[09:54] <RabidGravy> because it stopped working last night

[09:54] <hankache> if a split happens

[09:54] <hankache> people want to hang out with the *big boys*

[09:54] <timotimo> put some make-up on it. by which i mean, turn it into a "slack" chatroom

[09:55] <RabidGravy> frankly I'll just return to my default position and ignore IRC altogether at some point

[09:55] <El_Che> How do you make the split? what about non core-dev people that just want to program and do the ocassional commit (code, doc) for things they encouter after checking on the channel?

[09:56] <nine> RabidGravy: I'm on it. May take a while though. Haven't had a coffee yet and was up late celebrating my birthday :)

[09:56] <El_Che> you'll loose the paper cuts fixes

[09:56] * timotimo hasn't a clue and is just being obnoxious

[09:56] <RabidGravy> hay, happy birthday for yesterday nine :)

[09:56] *** azawawi joined
[09:56] <azawawi> hi

[09:56] <nine> Thank you :)

[09:57] <hankache> hi azawawi

[09:57] <Skarsnik> hm, where is stdout? the spec (old spec?) says $STDOUT but it's not that x)

[09:57] <RabidGravy> $*OUT?

[09:58] <azawawi> when I see an error message mentioning ./.rakudobrew/moar-nom/install/share/perl6/site/sources/BF0504AF8F51E3C7D2286B7FA5CDF41EB923632D (i.e. Panda::Common on my machine), does that look sane to you? :)

[09:58] <Skarsnik> Oh thx :)

[09:58] <timotimo> i didn't know!

[09:59] <timotimo> happy birthday nine!

[09:59] <nine> :)

[09:59] <hankache> happy birthday nine :)

[09:59] <RabidGravy> azawawi, it could probably be improved :)

[09:59] <timotimo> Skarsnik: where is that comment about $STDOUT?

[09:59] * nine blushes a little

[09:59] <azawawi> well it was improved lol... that's a regression :)

[09:59] *** pierre-vigier left
[10:00] <azawawi> RabidGravy: hi

[10:00] <Skarsnik> http://www.perl6.org/archive/rfc/30.html x)

[10:00] <hankache> haaaaaaappppyyy birthdaaaaaaaay

[10:00] <timotimo> lol.

[10:00] <timotimo> Skarsnik: why are you looking there?! :)

[10:00] * hankache start singing

[10:00] <Skarsnik> well google perl6 stdout

[10:01] <timotimo> right. well, it says "This file is part of the Perl 6 Archive" at the top

[10:01] <timotimo> in big bold letters :)

[10:01] <timotimo> but that probably makes it less visible :D

[10:01] <dalek> rakudo/nom: 6f85793 | ronaldxs++ | tools/build/Makefile-common-macros.in:

[10:01] <dalek> rakudo/nom: Update Makefile-common.in to work with mingw

[10:01] <dalek> rakudo/nom: 

[10:01] <dalek> rakudo/nom: Fix "/usr/bin/sh: C:Strawberryperlbinperl.exe: command not found" type error the same way we did for nqp about a week ago by effectively setting the SHELL to cmd under windows and 'sh' for posix environments.

[10:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6f85793b50

[10:01] <dalek> rakudo/nom: fd8e7a9 | lizmat++ | tools/build/Makefile-common-macros.in:

[10:01] <dalek> rakudo/nom: Merge pull request #616 from ronaldxs/nom

[10:01] <dalek> rakudo/nom: 

[10:01] <dalek> rakudo/nom: Update Makefile-common.in to work with mingw

[10:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fd8e7a926c

[10:02] *** pierre-vigier joined
[10:02] <Skarsnik> timotimo, well searching stdout on docs.perl6.org did not help me so... x)

[10:02] <hankache> can we not force old documents not to be indexed by google?

[10:03] <hankache> .htaccess

[10:03] <timotimo> right, it should probably mention the word "stdout" in there somewhere

[10:03] <timotimo> "Error due to tapping a Proc::Async stream before spawning its process" - this is the description of X::Proc::Async::TapBeforeSpawn

[10:03] <timotimo> however

[10:03] <hankache> or robots.txt

[10:03] *** lustlife left
[10:03] <timotimo> You must call stdout before you call method start. Otherwise an exception of class X::Proc::Async::TapBeforeSpawn is thrown.

[10:04] <Skarsnik> hm not even mentionned in http://doc.perl6.org/language/io

[10:05] <timotimo> i don't actually even have a X::Proc::Async::TapBeforeSpawn in my rakudo ... not anywhere to be found :o

[10:05] <timotimo> um, there it is

[10:05] <timotimo> ah, searched from the wrong base directory

[10:05] <Ven> ShimmerFairy: http://irclog.perlgeek.de/perl6/2015-12-07#i_11667977 technically wrong, because of SFINAE.

[10:06] <hankache> see you later everyone

[10:06] *** hankache left
[10:06] <Ven> but then, SFINAE is probably one of the worst thing ever :P

[10:07] <dalek> doc: bc26214 | timotimo++ | doc/Type/X/Proc/Async/TapBeforeSpawn.pod:

[10:07] <dalek> doc: TapBeforeSpawn was described the wrong way around

[10:07] <dalek> doc: review: https://github.com/perl6/doc/commit/bc262144db

[10:07] *** pierre-vigier left
[10:08] <lizmat> m: (1..5).Supply.throttle( 4, { say "$*THREAD.id(): start $_"; $_ } ).wait;

[10:08] <camelia> rakudo-moar 67202d: OUTPUT«(timeout)3: start 1␤4: start 2␤3: start 3␤4: start 4␤5: start 5␤»

[10:09] <lizmat> m: (1..5).Supply.throttle( 2, { say "$*THREAD.id(): start $_"; $_ } ).wait;  # does not hang

[10:09] <camelia> rakudo-moar 67202d: OUTPUT«3: start 1␤4: start 2␤5: start 3␤6: start 4␤7: start 5␤»

[10:09] <lizmat> m: (1..5).Supply.throttle( 4, { say "$*THREAD.id(): start $_"; sleep 0.01; $_ } ).wait;   # doesn't hang

[10:09] <camelia> rakudo-moar 67202d: OUTPUT«3: start 1␤4: start 2␤5: start 3␤6: start 4␤7: start 5␤»

[10:09] *** brrt joined
[10:09] <lizmat> .tell jnthn I think there's a race condition in supply syntax exposed by "(1..5).Supply.throttle( 4, { say "$*THREAD.id(): start $_"; $_ } ).wait;"

[10:09] <yoleaux> lizmat: I'll pass your message to jnthn.

[10:10] <lizmat> .tell jnthn fwiw, I've seen S17-supply/syntax.t hang occassionally: feels like the throttle example is exposing this more reliably

[10:10] <yoleaux> lizmat: I'll pass your message to jnthn.

[10:11] <Skarsnik> duh, http::message, why sometime your $.content is Buf, sometime Str x)

[10:11] <dalek> doc: fdb6c21 | timotimo++ | doc/Language/variables.pod:

[10:11] <dalek> doc: make $*OUT & friends more discoverable for google

[10:11] <dalek> doc: 

[10:11] <dalek> doc: by mentioning their more common names "stdout" and such.

[10:11] <dalek> doc: review: https://github.com/perl6/doc/commit/fdb6c21ffd

[10:12] <timotimo> Skarsnik: do you think this will help? ^

[10:12] <timotimo> in general, doc.perl6.org ought to get a better pagerank than learningperl6.com and the archives.

[10:12] <timotimo> and by "ought to" i mean "we should make it so", not "it's likely the case"

[10:12] <nine> RabidGravy: %?RESOURCES looks fine here?

[10:13] <nine> .tell tadzik Happy birthday to you :)

[10:13] <yoleaux> nine: I'll pass your message to tadzik.

[10:13] <lizmat> nine: I can't install Inline::Perl5 because it cannot find the helper

[10:13] <RabidGravy> nine, that's odd. let me prod this a bit harder

[10:13] <lizmat> nine: Unhandled exception: Cannot locate native library '/Users/liz/Github/panda/.panda-work/1449483191_1/resources/p5helper.dylib': dlopen(/Users/liz/Github/panda/.panda-work/1449483191_1/resources/p5helper.dylib, 1): image not found

[10:15] <RabidGravy> yeah, I'm seeing the same behaviour (albeit with  Sys::Utmp) which worked earlier yesterday

[10:15] <Skarsnik> timotimo, add it in language/io maybe? it's a likely place where it interesting or a way to find it?

[10:16] <brrt> good * #perl6

[10:16] <timotimo> right. i can do tthat later. will be AFK for a bit first

[10:22] <nine> lizmat: oh, that's to be expected!

[10:23] <Skarsnik> Can I remove @*INC from the doc?

[10:23] <nine> lizmat: I'm sorry! We do have %?RESOURCES now, but we still don't know how to handle the platform dependentness of the shared object file. Currently the META.info has p5helper.so hard coded which won't work on OS X or Windows

[10:25] <Skarsnik> nine, you should have typed ressource declaration in the meta file. like Ressource : [ dynlib : "filewithoutext" ]. there is so weird way to find the extension (NC does it)

[10:26] <nine> Yes, I was thinking about "resources": [ { "dynlib": "p5helper" } ]

[10:27] <nine> S22 says on this: "If a leaf of the "resource" hash is a hash, it indicates files with special properties (such as being provided by the builder, so not part of the distribution). This will allow a good MANIFEST to be created from the META6.json information."

[10:27] <nine> But in this case, it would be nice, to tell the builder, too, that this is platform dependent.

[10:27] *** geekosaur left
[10:28] <nine> Except if we want panda to guess that from the file extension.

[10:29] <Skarsnik> I think everything that help distrib packager is better

[10:29] <nine> Or you specifiy just the base name, panda notices that there's no file with that name but one with the dynlib extension added, so it automatically adds that to the name.

[10:29] <Skarsnik> like https://rt.perl.org/Ticket/Display.html?id=126744

[10:29] <tadzik> nine: thank you :)

[10:29] <yoleaux> 10:13Z <nine> tadzik: Happy birthday to you :)

[10:29] <nine> That would work in the cases we know but I'm nervous about such automatisms while we have so little experience with actual use cases.

[10:29] <tadzik> yay, double happy birthday :)

[10:31] <nine> Skarsnik: external dependencies are something the Perl 5 people also still struggle with. I strongly recommend talking to them about such issues.

[10:31] *** espadrine joined
[10:31] *** aborazmeh joined
[10:31] *** aborazmeh left
[10:31] *** aborazmeh joined
[10:32] <Ven> Interesting that http://irclog.perlgeek.de/perl6/search/?nick=&q=No+writeable+path+found doesn't have any result with the sentence I searched :(

[10:33] <Skarsnik> I did not do a perl5 module in a while, but I remember that you have nothing to even be informative about this kind of stuff x)

[10:33] <RabidGravy> nine, you can probably ignore me too the "Cannot locate native library '/home/jonathan/.panda-work/1449484225_2/resources/lib/utmphelper.so': /home/jonathan/.panda-work/1449484225_2/resources/lib/utmphelper.so: cannot open shared object file: No such file or directory" seems to suggest that I'm not quite doing the right thing with the paths

[10:34] *** eviltwin_b joined
[10:34] <RabidGravy> that is, when one does "panda install ." (which works) it is subtley different to doing "panda install Sys::Utmp"

[10:35] *** Actualeyes left
[10:36] <gfldex> .seen ZoffixW

[10:36] <yoleaux> I saw ZoffixW 00:46Z in #perl6: <ZoffixW> .botsnack

[10:36] <Skarsnik> so what is the new @*INC? (so I can remove it from the doc ~~)

[10:36] <Skarsnik> it's @*REPO?

[10:36] <lizmat> $*REPO   

[10:37] <lizmat> but it's a different beast altogether

[10:37] <Skarsnik> m: say $*REPO.perl

[10:37] <camelia> rakudo-moar fd8e7a: OUTPUT«CompUnit::Repository::Installation.new('/home/camelia/.perl6/2015.11-404-gfd8e7a9')␤»

[10:38] *** pierre-vigier joined
[10:38] *** eviltwin_b is now known as geekosaur

[10:38] *** rindolf left
[10:38] <gfldex> .tell ZoffixW does htmlify.p6 work for you right now? I'm asking because after updating rakudo/panda (precomp fallout) it got a type check error in Perl6::Documentable::new .

[10:38] <yoleaux> gfldex: I'll pass your message to ZoffixW.

[10:40] *** simcop2387 left
[10:41] <dalek> doc: 172351c | (Wenzel P. P. Peppmeyer)++ | doc/Language/classtut.pod:

[10:41] <dalek> doc: link type/Method in Language/classtut

[10:41] <dalek> doc: review: https://github.com/perl6/doc/commit/172351cc63

[10:41] <dalek> doc: 3e69312 | (Wenzel P. P. Peppmeyer)++ | doc/Language/functions.pod:

[10:41] <dalek> doc: Merge remote-tracking branch 'upstream/master'

[10:41] <dalek> doc: review: https://github.com/perl6/doc/commit/3e693123f2

[10:41] <dalek> doc: ed94543 | (Wenzel P. P. Peppmeyer)++ | / (6 files):

[10:41] <dalek> doc: Merge remote-tracking branch 'upstream/master'

[10:41] <dalek> doc: review: https://github.com/perl6/doc/commit/ed94543a1a

[10:41] <dalek> doc: 5031508 | (Wenzel P. P. Peppmeyer)++ | / (21 files):

[10:41] <dalek> doc: Merge remote-tracking branch 'upstream/master'

[10:41] <dalek> doc: review: https://github.com/perl6/doc/commit/5031508679

[10:41] <dalek> doc: bc7876b | (Wenzel P. P. Peppmeyer)++ | doc/Type/Any.pod:

[10:41] <dalek> doc: doc Any::reverse

[10:41] <dalek> doc: review: https://github.com/perl6/doc/commit/bc7876b294

[10:41] <dalek> doc: c774629 | (Wenzel P. P. Peppmeyer)++ | doc/ (2 files):

[10:41] <dalek> doc: Merge pull request #226 from gfldex/master

[10:41] <dalek> doc: 

[10:41] <dalek> doc: doc Any::reverse and fix a link problem

[10:41] <dalek> doc: review: https://github.com/perl6/doc/commit/c774629c06

[10:42] <Skarsnik> $*REPO             A variable holding information about modules installed/loaded

[10:42] <Skarsnik>  - is that enought? (yes it's rather none descriptive)

[10:43] <lizmat> Skarsnik: I guess that will do for now

[10:43] *** pierre-vigier left
[10:44] *** geekosaur left
[10:45] <|Tux|> test             50000    22.123    22.016

[10:45] <|Tux|> test-t           50000    20.297    20.190

[10:45] <|Tux|> csv-parser       50000    24.296    24.189

[10:46] <dalek> doc: d2ddc1a | (Sylvain Colinet)++ | doc/Language/variables.pod:

[10:46] <dalek> doc: Remove @*INC from language/variables.pod. Replaced with a small description about REPO

[10:46] <dalek> doc: review: https://github.com/perl6/doc/commit/d2ddc1a4ba

[10:46] <dalek> doc: 69799f8 | (Sylvain Colinet)++ | doc/ (2 files):

[10:46] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[10:46] <dalek> doc: review: https://github.com/perl6/doc/commit/69799f8a63

[10:46] <Skarsnik> dafuq this dumb additionnal commit

[10:46] <Skarsnik> git is really confusing

[10:48] * gfldex .oO( in soviet git bad tools blame the craftsman )

[10:49] <gfldex> Skarsnik: does htmlify.p6 work for you?

[10:49] <Skarsnik> probably? my rakudo is still from october

[10:50] <Skarsnik> but I don't get it. I try to push, it tell me I am behind master. I pull to update, it create me a commit

[10:51] <gfldex> i merged a commit 9 min ago

[10:51] <Skarsnik> Yes, but why it created me another commit just by merging my copy with master?

[10:51] <brrt> Skarsnik; git pull is git fetch + git merge

[10:52] <brrt> that's what git pull does

[10:52] <brrt> if you want the other behaviour, i.e., pull-and-apply-my-commit-on-top, you want to do git pull --rebase

[10:52] <brrt> it's not like svn in that way

[10:52] <Skarsnik> git update was to complicated to have x)

[10:53] <dalek> rakudo/nom: 29ba648 | lizmat++ | src/core/Supply.pm:

[10:53] <dalek> rakudo/nom: Fix race condition in Supply.throttle

[10:53] <dalek> rakudo/nom: 

[10:53] <dalek> rakudo/nom: Although I'm not sure why this fixes it, it appears that the order of the

[10:53] <dalek> rakudo/nom: whenevers is important.

[10:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29ba6482ac

[10:53] <brrt> yes, it was :-)

[10:54] <brrt> exactly because of the distinction i mentioned just now

[10:54] *** Actualeyes joined
[10:54] <brrt> your branch on your local computer, it's really only symbolically connected to the same-named branch on another repo

[10:55] *** pecastro left
[10:55] <brrt> there may be the same tree objects and the same commit objects, and that redundancy may be used to optimize the traffic between to git repos

[10:55] *** simcop2387 joined
[10:56] <brrt> but there is no such thing as update because that would assume there to be a single source of commit truth, and there is none

[10:57] <arnsholt> Cf. distributed systems =)

[10:57] <yoleaux> 6 Dec 2015 22:05Z <lizmat> arnsholt: I've given up on fixing the merge/revert mess that killed %?RESOURCES

[10:57] *** Ven left
[10:58] <lizmat> .tell autarch could you test Supply.throttle again and tell me if it fixed your problem?

[10:58] <yoleaux> lizmat: I'll pass your message to autarch.

[10:58] <nadim> The documentation of can, and candidates, is a bit sparse. Can I ask if a class does a method with specific signature, including return type?

[10:58] <nadim> of course they are multis

[10:59] <arnsholt> lizmat: Does that mean something's still broken post-reverting the precomp-singleprocess merge, or is that that notification that you reverted the merge?

[10:59] <lizmat> arnsholt: I reverted the merge, but after that certain things still appeared to be broken

[11:00] <arnsholt> Weird

[11:00] <lizmat> today, it turns out, they may have been broken already and I spent several hours on fixing something that was broken to begin with  :-(

[11:01] <lizmat> that Inline::Perl5 doesn't install on OS X, was apparently a known problem  :-(

[11:01] <arnsholt> Ah, right

[11:03] <lizmat> brunch&

[11:03] *** pecastro joined
[11:03] *** geekosaur joined
[11:03] <RabidGravy> lizmat, I'm pretty certain now that my "%?RESOURCES not working" is actually my fault

[11:03] <gfldex> nadim: you can get hold of all candidates of a method and their signatures, then create your own signature object and ~~ them. If that makes sense for a dynamic language is a different matter.

[11:04] <gfldex> nadim: if you want to i can dig that out for you

[11:04] <brrt> can you .^can with a signature?

[11:04] <arnsholt> Usually when people call .can they just want to ensure it exists before calling it. Shouldn't $obj.?method(...) work?

[11:05] <brrt> anyway, lecture 

[11:05] <brrt> ^

[11:05] <brrt> &

[11:05] *** brrt left
[11:05] <Skarsnik> actually I have a similar question. how to get the signature of a sub/method?

[11:05] <gfldex> if you .?method your don't know if there is no such method (name) or if the signature didn't match

[11:05] <nadim> gfldex: that would be great

[11:06] <nadim> gfldex: I can't .ĉan with a signature but it is exactly what I want

[11:06] *** SmokeMachine__ left
[11:07] *** SmokeMachine__ joined
[11:07] *** aborazmeh left
[11:07] *** km3 left
[11:07] *** pierre-vigier joined
[11:08] <gfldex> m: class C { multi method m(Int){}; multi method m(Str){}; }; say .signature for C.^methods[0].candidates;

[11:08] <camelia> rakudo-moar fd8e7a: OUTPUT«(C $: Int, *%_)␤(C $: Str, *%_)␤»

[11:08] <gfldex> ^^^ step one

[11:09] <nadim> testing ...

[11:10] <Skarsnik> m: class C { multi method m(Int){}; multi method m(Str) returns Bool{True}; }; say .signature for C.^methods[0].candidates;

[11:10] <camelia> rakudo-moar fd8e7a: OUTPUT«(C $: Int, *%_)␤(C $: Str, *%_ --> Bool)␤»

[11:11] <Skarsnik> and Discord, y u change your webapi (╯°□°）╯︵ ┻━┻

[11:11] <DrForr> Skarsnik: Because it's true to its name?

[11:12] <Skarsnik> yes that's too

[11:14] *** _nadim joined
[11:14] *** nadim left
[11:16] <lucs> With panda, obtained "==> Successfully installed Debugger::UI::CommandLine".

[11:16] <lucs> But where is the module, the .pm file?

[11:17] <Skarsnik> It should not exist if I understand correctly? There is a SHAencoded filename that is the prcompiled version of the file

[11:17] <lucs> :/

[11:18] <_nadim> can one get the methods by name rather than going through an indexed list?

[11:18] *** nadim joined
[11:18] <Skarsnik> m: class C { multi method m(Int){}; multi method m(Str) returns Bool{True}; }; say .signature for C.^methods<m>.candidates;

[11:18] <camelia> rakudo-moar 29ba64: OUTPUT«Type List does not support associative indexing.␤  in block <unit> at /tmp/lr6rMj7rsO:1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp:2883␤  in block <unit> at /tmp/lr6rMj7rsO:1␤␤»

[11:19] *** zengargoyle joined
[11:20] <gfldex> m: class C { multi method m(Int){}; multi method m(Str){}; }; my $sig = (my method (C: Int) {}).signature; say $sig; say .signature, ' ', so .signature ~~ $sig for C.^methods[0].candidates;

[11:20] <camelia> rakudo-moar 29ba64: OUTPUT«(C $: Int, *%_)␤(C $: Int, *%_) False␤(C $: Str, *%_) False␤»

[11:20] <gfldex> that should work but doesn't

[11:21] <gfldex> may be a bug or may be a disagreement between me and Perl 6

[11:21] <gfldex> nadim: you may have to as jnthn for details

[11:22] *** _nadim left
[11:22] <lucs> Skarsnik: As far as you know, how can I look at the module's code?

[11:23] <lucs> (re. Debugger::UI::CommandLine for example)

[11:23] <gfldex> m: class C{}; my $sig1 = (my method (C: Int) {}).signature; my $sig2 = (my method (C: Int) {}).signature; say so $sig1 ~~ $sig2;

[11:23] <camelia> rakudo-moar 29ba64: OUTPUT«False␤»

[11:23] *** pierre-vigier left
[11:24] <gfldex> m: class C{}; my $sig1 = (my method (C: Int) {}).signature; my $sig2 := $sig1; say so $sig1 ~~ $sig2;

[11:24] <camelia> rakudo-moar 29ba64: OUTPUT«False␤»

[11:24] <gfldex> i'm quite sure that the very same signature should smartmatch :)

[11:24] <Skarsnik> lucs, no idea, sorry :(

[11:25] <lucs> Skarsnik: Ok, thanks.

[11:25] <lucs> So, I installed Debugger::UI::CommandLine, and when using it, I get "Circular module loading detected involving module 'Debugger::UI::CommandLine'"

[11:25] <lucs> How do I find out what the heck is going on?

[11:27] <Skarsnik> blame nine

[11:27] <lucs> :)

[11:28] <lucs> By the way, this procompiling, is it done for performance reasons?

[11:28] <Skarsnik> *like his patch on http::ua* my $a = HTTP::UserAgent.new(:debug) # debug on stdout; my $a = HTTP::UserAgent.new(:debug($*ERR)) # debug on stderr; my $a = HTTP::UserAgent.new(:debug("file")) # debug on file;

[11:29] <nine> lucs: yes

[11:29] <Skarsnik> hm, how could I say to append to file.txt actually x)

[11:30] <lucs> nine: Okay, but is there no way be able to see the source somehow?

[11:30] <nine> Skarsnik: the :append flag to .open

[11:30] <nine> lucs: what do you mean by "to see the source"? Rakudo does need the source to be able to precompile, so the source is available anyway

[11:30] <Skarsnik> I mean interface wise? like having a way to tell to append or not. I could not bother since I can give you a IO::Handle but

[11:30] <gfldex> rakudobugged as #126835

[11:31] <lucs> nine: I guess rakudo saw it, but how can _I_ see it?

[11:31] <RabidGravy> Skarsnik, I'm pondering changing that :debug on H::UA so that it can also be an object that has a .debug() method

[11:31] <gfldex> Skarsnik: see: https://perl6advent.wordpress.com/2015/12/06/day-6-on-opening-files-and-contributing-to-open-source-projects/

[11:32] <nadim> gfldex: thanks, I'll play a bit and get back if I find out, or if I havent ;)

[11:32] <nine> lucs: Debugger::UI::ComandLine does "use nqp;" twice. This may trigger a bug in Rakudo complaining about the circular module loading

[11:32] <gfldex> nadim: for the time being you could .Str and compare those. I have the feeling that you will bump into problems in any case because of where-clauses.

[11:32] <lucs> nine: Ah, could be. How do you (or I) find out that it's doing that?

[11:33] *** kid51 joined
[11:33] <DrForr> https://github.com/jnthn/rakudo-debugger/blob/master/lib/Debugger/UI/CommandLine.pm # lines 3 and 5 :)

[11:33] <gfldex> nadim: what do you actually want to do in the end anyways? I'm asking because the answer you be "Have a role noob!"

[11:33] <Skarsnik> RabidGravy, if you are willing to do that, add a .Debug or something to http::Message x) for now I use .Str but it's ugly

[11:33] <nine> lucs: I cloned the git repo ;) But rakudo also prints file names in backtraces.

[11:34] <nine> lucs: pm files should usually end up in your rakudo/install/share/perl6/site/sources

[11:34] <DrForr> ^^ for lucs - Looks like a tyop in the file but it could be an obscure requirement of Terminal::ANSIColor.

[11:36] <RabidGravy> me-- # totally didn't test his %?RESOURCES amendments properly

[11:36] <lucs> nine: Aha, I see. Hmm... Does each file there correspond to a single original perl file, or are they mangled somehow?

[11:37] <nine> lucs: they are 1:1 - only the names change

[11:37] <nadim> gfldex: I amm writing a dumper, either the class to be dumped implements a method for the dump or the dumper itself implements it. I need to know if the dumper implements it.

[11:38] <lucs> nine: Okay. So currently, if I want to look at some of that source, I need to go throught those files and see what I can find?

[11:38] <lucs> *through

[11:38] <nadim> gfldex: I agree that were clauses will be a problem if I just compare strings, it's already frustrating in the error message one get from P6 to not see the clauses. it will work for what I want to do rigt now though :)

[11:38] <nine> lucs: unless the error message already told you the file name, which it should

[11:39] <nadim> a super newbie question, why does map take a semi colon but for doesn't? I absolutely hated python semicolon, now I almost want it to be added to P6 for consistency.

[11:40] <gfldex> nadim: if the dumper are all witten by you, you should have them do a role with that method and match against the role. Otherwise you may end up with some object that implements a method that looks like it might be the right one.

[11:40] <nadim> gfldex: that's how it works

[11:40] <gfldex> for is syntax, map is a method or sub

[11:41] <nadim> gfldex: but the end user can also add a role, thus I need to know if the dumper has had the role added

[11:41] <lucs> nine: In this case, it turns out that the error only mentions 'Debugger::UI::CommandLine' (which, ack'ing trough that directory you mentioned, is found in my "3982B8FE2[...]" file)

[11:42] <gfldex> roles have identity that goes beyond their name, you can even hide the name with some anonymous role or by not exporting it

[11:43] <lucs> nine: Would it be a good idea to have .../Debugger/UI/CommandLine somewhere be a symlink to "3982B8FE2..."

[11:43] <lucs> ?

[11:43] <lucs> (...CommandLine.pm even)

[11:44] * lucs can't be the only one who wants to be able to easily look at installed modules code, can he?

[11:47] <nine> lucs: we're using those SHAs because different distributions may contain files with similar names. Also it helps with file systems that don't support non-ASCII file names and it makes lookup of sources of precompiled files trivial.

[11:48] <RabidGravy> I think I have detected a new variant of Godwins law in the wild: "... because the right wing media made you think that"

[11:48] <nine> lucs: and not all systems support symlinks. That said, we may utilize them for such convenience features on systems that do.

[11:49] <lucs> nine: I understand, and it all makes sense.

[11:49] <RabidGravy> nine, lizmat everyone you are all entirely exhonerated regarding Sys::Utmp not installing, entirely my stupidity

[11:49] <Skarsnik> maybe have a perl6 --display ModuleName ?

[11:50] <nine> RabidGravy: thanks

[11:51] *** vividsnow joined
[11:51] <nine> Skarsnik: or just a separate tool. I use perldoc -l to find the sources of installed Perl 5 modules. And I have a pmversion alias to find the version of an installed module. We could ship similar helpers with rakudo.

[11:52] <nine> Maybe a p6mod tool that queries the repositories

[11:56] <nadim> gfldex: I will look more into the role's identity. my problem is a bit simplified by the fact that the signature of my multis has a single element but even if I get all the signatures I need to know if the object being dumped is derived from on of those signature types.

[11:57] <DrForr> There's a perl6 --doc flag, maybe 'perl6 --doc -MFoo' to look at Foo's documentation? Probably just meant to work on individual .pm6 files, haven't looked closely yet.

[11:57] <nadim> gfldex: I honnestly think that it is better to eval the whole thing, P6 can handle it already, I am not re-inventing the wheel, and an exceptions can handle the whole multi with the right signature does not exist

[11:58] <nadim> are eval and exceptions terribly expensive?

[11:58] *** RabidGravy left
[11:58] <gfldex> eval is, exceptions can be

[11:59] <nadim> thx

[12:06] <zengargoyle> good * #perl6

[12:12] <Skarsnik> nine, do you think is there a way to exploit the compile unit with stuff like Mojo::Template6? (that allow for perl6 code in the template file)

[12:15] <nine> Skarsnik: I'm not sure I can follow you?

[12:17] <Skarsnik> Mojo::Template6 file look like http://www.nyo.fr/~skarsnik/story.tm . There is clearly perl6 code. I was wondering is there was a way to precompile that?

[12:19] <nine> If you turn the whole template into perl6 code, you surely can precompile it. And without having looked, I guess that's what Mojo::Template6 does anyway

[12:19] *** zakharyas left
[12:19] <nadim> if someone is interested in code that segfaults http://nopaste.linux-dev.org/?877888 the redeclaration warning point at the problem which is more than trivial to fix but maybe this should be handled somewhere.

[12:19] <dalek> rakudo/nom: b668da5 | (Stefan Seifert)++ | src/core/CompUnitRepo.pm:

[12:19] <dalek> rakudo/nom: Fix "Circular module loading detected" failure with use Foo:from<Perl5>

[12:19] <dalek> rakudo/nom: 

[12:19] <dalek> rakudo/nom: When encountering a use Foo:from<Perl5> the Perl5ModuleLoaderStub first loads

[12:19] <dalek> rakudo/nom: Inline::Perl5 and then calls CompUnitRepo.load_module again to try give the

[12:19] <dalek> rakudo/nom: real Perl5ModuleLoader a chance. At this point "Foo" is already in the list of

[12:19] <dalek> rakudo/nom: modules to load and would get added again, triggering the "Circular module

[12:19] <dalek> rakudo/nom: loading detected" error. Fixed by tidying up the load stack before trying the

[12:19] <dalek> rakudo/nom: second time.

[12:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b668da5123

[12:20] <nine> Now there's only one of Inline::Perl5's test files still failing :)

[12:21] *** ZoffixMobile joined
[12:21] <ZoffixMobile> TIL proto.perl6.org is a thing... m.slashdot.org/story/303623

[12:23] <ZoffixMobile> so much hate in the comments of that article :p

[12:23] <lizmat> m: my @a; @a[1] = Any; say @a.sum

[12:23] <camelia> rakudo-moar 29ba64: OUTPUT«X::Multi::NoMatch exception produced no message␤  in block <unit> at /tmp/K_G4saOp0i:1␤␤»

[12:26] *** azawawi left
[12:26] <nadim> ZoffixMobile: it's always easier to write a hateful comment than write code!

[12:27] <ZoffixMobile> Eh, they're referencing perl 4 of all things. :)

[12:27] *** ZoffixMobile is now known as ZoffixW

[12:27] <ZoffixW> .

[12:27] <yoleaux> 10:38Z <gfldex> ZoffixW: does htmlify.p6 work for you right now? I'm asking because after updating rakudo/panda (precomp fallout) it got a type check error in Perl6::Documentable::new .

[12:27] <ZoffixW> glfdex, no idea. has been a million years since I've ran htmlify.p6

[12:30] *** rindolf joined
[12:31] *** [ptc] left
[12:33] *** [ptc] joined
[12:33] <gfldex> ZoffixW: i opened an issue on github with versions and stacktrace

[12:33] *** pierre-vigier joined
[12:35] <nadim> ZoffixW: Perl3, the good old days of perl 3 ;)

[12:36] <Skarsnik> I only knew perl 5.6 I think x)

[12:36] <Skarsnik> gfldex, want me to run htmlfy on the doc?

[12:37] <dalek> rakudo/nom: 9b336d6 | lizmat++ | src/core/List.pm:

[12:37] <dalek> rakudo/nom: Make List.sum handle sparse arrays correctly

[12:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9b336d6356

[12:38] *** rurban left
[12:41] <psch> m: say :($: $)

[12:41] <camelia> rakudo-moar b668da: OUTPUT«5===SORRY!5=== Error while compiling /tmp/JsrfOEyPkh␤Can only use the : invocant marker in the signature for a method␤at /tmp/JsrfOEyPkh:1␤------> 3say :($: $7⏏5)␤    expecting any of:␤        constraint␤»

[12:41] <psch> not sure i like that :/

[12:42] <psch> i mean, i get that a sub or multi signature shouldn't allow the invocant marker, but a bare signature..?

[12:42] *** ZoffixW left
[12:43] <psch> nadim: fwiw, you don't need eval to catch MMD failures

[12:43] <psch> m: class A { method f() { } }; { A.new.f(1); CATCH { default { .perl.say } } }

[12:43] <camelia> rakudo-moar b668da: OUTPUT«X::AdHoc.new(payload => "Too many positionals passed; expected 1 argument but got 2")␤»

[12:44] <gfldex> psch: you may want to rakudobug that signature thing

[12:45] <psch> gfldex: well, i know why and how it was changed, and i'm not sure it's actually wrong

[12:45] <nadim> psch: MMD? multi ??? dispatch?

[12:45] <psch> gfldex: it is admittedly inconvenient when trying to match a made-up sig against a method, but maybe that's not really something one should (have to) do because MMD is pretty great, actually

[12:45] <psch> nadim: multi method dispatch

[12:46] <psch> nadim: ...not quite right in this context, 'cause method f in my example wasn't a multi... :)

[12:46] *** ChoHag joined
[12:46] <nadim> inconvenient till one need it then whateverway if convenient ;)

[12:46] <gfldex> psch: i can create some anon mathod and steal it's signature to get hold of the signature object, not being able to create one with :() is silly

[12:47] *** Ven joined
[12:49] <psch> gfldex: yeah, that still hides some magic from you though, as seen in your attempts to compare earlier

[12:49] <psch> gfldex: as in, a non-class bound anon method doesn't get the implicit *%_ for interface consistency

[12:49] <nadim> I have bee trying to create  local method with its signature created from an object, doesn't seem to do what I want. my SomeClass $o;  (my method($o)).signature.say. 

[12:50] <psch> ...or does it? o.O

[12:50] <psch> m: (my method f($: $) { }).signature.perl.say # 'cause this *does*

[12:50] <camelia> rakudo-moar b668da: OUTPUT«:($: $, *%_)␤»

[12:51] <psch> oh duh

[12:51] <psch> Signature.ACCEPTS is "can we dispatch the LHS against the Signature?" not "are these Signatures equivalent"... :P

[12:51] <psch> m: class A { method f(A:D $a: $b) { } }; my $sig = (my method f(A:D $a: $b) { }).signature; say $sig.perl; say A.can('f')[0].signature.perl; say $sig eqv A.can('f')[0].signature

[12:51] <camelia> rakudo-moar 9b336d: OUTPUT«:(A:D $a: $b, *%_)␤:(A:D $a: $b, *%_)␤True␤»

[12:52] *** kid51 left
[12:52] *** [ptc] left
[12:52] <psch> m: class A { method f(A:D $a: $b) { } }; \(A.new(), 2, 2) ~~ A.can('f')[0].signature

[12:52] <camelia> rakudo-moar 9b336d: ( no output )

[12:52] <psch> m: class A { method f(A:D $a: $b) { } }; say \(A.new(), 2, 2) ~~ A.can('f')[0].signature

[12:52] <camelia> rakudo-moar 9b336d: OUTPUT«False␤»

[12:54] *** kaare_ joined
[12:54] <gfldex> and even if i cant just ~~ signatures, it would be nice to have a proper error message

[12:55] *** [ptc] joined
[12:56] <psch> gfldex: well, infix:<~~> does "smart" things (FSVO).  i understand being surprised by some of them, but i don't think always warning with "this might not do what you assume" is useful

[12:56] <psch> gfldex: if you want equivalence, use infix:<eqv> vOv

[12:56] <nadim> psch: as of http://nopaste.linux-dev.org/?877908  I am surely doing it right what I want is the new method to accept and object of the type of the argument I used

[12:58] <psch> nadim: i don't understand your code example.  you want to create a method at compile time with a typed parameter that has the type derived from a value you fetch at runtime..?

[12:58] <gfldex> m: class C { multi method m(Int){}; multi method m(Str){}; }; my $sig = (my method (C: Int) {}).signature; say $sig; say .signature, ' ', so .signature eqv $sig for C.^methods[0].candidates;

[12:58] <camelia> rakudo-moar 9b336d: OUTPUT«(C $: Int, *%_)␤(C $: Int, *%_) True␤(C $: Str, *%_) False␤»

[12:59] <nadim> psch: I want to do it at run time of course, but do I need to eval it? and can I do it altogether?

[12:59] *** zakharyas joined
[12:59] <gfldex> nadim: see my last m: (s/~~/eqv/)

[13:00] <nadim> gfldex: trying it

[13:01] <gfldex> psch: every time i see some oddity in Perl 6 i ask myself: "How would I document that?". Sometimes the answer smells.

[13:01] *** brrt joined
[13:02] *** pierre-vigier left
[13:06] <dalek> roast: 614d76a | lizmat++ | S02-types/array.t:

[13:06] <dalek> roast: Add basic Array.sum tests

[13:06] <dalek> roast: review: https://github.com/perl6/roast/commit/614d76aade

[13:07] <psch> gfldex: this is about smartmatch in particular right now?

[13:07] <psch> gfldex: 'cause ACCEPTS (and thus smartmatch) behavior should be documented with the class that implements it

[13:07] *** n0tjack joined
[13:07] *** pierre-vigier joined
[13:07] *** csd_ joined
[13:08] <psch> gfldex: as in, the Signature should probably say something like "using a Signature as the RHS to infix:<~~> checks if the LHS can be dispatched against the given Signature" or so

[13:08] <gfldex> indeed, and in a dynamic language you may not now what the LHS might be

[13:08] <psch> s:1st/Signature/Signature docs/

[13:08] <gfldex> how do you look that up?

[13:08] <psch> ...why does that matter?  you know the signature, you know what dispatching against a signature means

[13:09] <psch> so if it fails you know it's something that doesn't fit the signature

[13:09] <psch> and if it matches it's something that can be passed to a Routine with that signature and dispatch successfully

[13:09] <gfldex> it doesn't fail, it return False

[13:10] *** pierre-vigier left
[13:10] <psch> yes, to indicate that passing the LHS to a Routine with the given signature would fail the dispatch

[13:10] *** lucasb joined
[13:13] <gfldex> psch: do i understand the 2nd halve of the following right? http://doc.perl6.org/type/Signature#method_ACCEPTS

[13:14] <Skarsnik> the search bar does not find this btw x)

[13:14] <psch> m: say :($, $) ~~ :($, $, $?)

[13:14] <camelia> rakudo-moar 9b336d: OUTPUT«True␤»

[13:14] <dalek> roast: d557444 | lizmat++ | S02-types/list.t:

[13:14] <dalek> roast: Add some basic List.sum tests

[13:14] <dalek> roast: review: https://github.com/perl6/roast/commit/d557444bdf

[13:14] <psch> gfldex: that gets a bit more interesting now...

[13:14] <gfldex> "may not work with methods" smells :)

[13:15] <psch> m: class A { method f($) { } }; say A.can('f')[0].signature ~~ A.can('f')[0].signature

[13:15] <camelia> rakudo-moar 9b336d: OUTPUT«False␤»

[13:15] *** pierre-vigier joined
[13:15] <psch> gfldex: right, thanks for clarifying 

[13:15] <psch> m: class A { method f($) { } }; say A.can('f')[0].signature.ACCEPTS(A.can('f')[0].signature)

[13:15] <camelia> rakudo-moar 9b336d: OUTPUT«False␤»

[13:16] <psch> hm, i wonder if we just mistreat invocant markers there

[13:17] <gfldex> infix:<eqv> is defined for Signature but not documented

[13:18] <psch> m: class A { method f($, *%) { } }; say A.can('f')[0].signature.ACCEPTS(A.can('f')[0].signature)

[13:18] <camelia> rakudo-moar 9b336d: OUTPUT«False␤»

[13:18] <psch> m: class A { method f($, %) { } }; say A.can('f')[0].signature.ACCEPTS(A.can('f')[0].signature)

[13:18] <camelia> rakudo-moar 9b336d: OUTPUT«False␤»

[13:18] <psch> m: sub f(*%) { }; say &f.signature ~~ &f.signature

[13:18] <camelia> rakudo-moar 9b336d: OUTPUT«False␤»

[13:18] <gfldex> looking at how eqv is implemented i can understand why :)

[13:19] <psch> slurpy hashes are wrong in Signature.ACCEPTS

[13:19] <psch> m: sub f(*@) { }; say &f.signature ~~ &f.signature

[13:19] <camelia> rakudo-moar 9b336d: OUTPUT«True␤»

[13:19] *** pierre-vigier left
[13:19] *** zakharyas left
[13:20] <lucasb> m: say :(*@a) ~~ :(*@a)

[13:20] <camelia> rakudo-moar 9b336d: OUTPUT«True␤»

[13:20] <lucasb> m: say :(*%h) ~~ :(*%h)

[13:20] <camelia> rakudo-moar 9b336d: OUTPUT«False␤»

[13:22] <Skarsnik> m: say int32.perl;

[13:22] <camelia> rakudo-moar 9b336d: OUTPUT«int32␤»

[13:22] <psch> m: :(*%).signature.params.classify({.named}).perl.say

[13:22] <camelia> rakudo-moar 9b336d: OUTPUT«Method 'signature' not found for invocant of class 'Signature'␤  in block <unit> at /tmp/5hZCxSF_tX:1␤␤»

[13:22] <psch> m: :(*%).params.classify({.named}).perl.say

[13:22] <camelia> rakudo-moar 9b336d: OUTPUT«(my Any %{Any} = Bool::True => $[*%])␤»

[13:22] <Skarsnik> m: say int32.REPL.perl;

[13:22] <camelia> rakudo-moar 9b336d: OUTPUT«Method 'REPL' not found for invocant of class 'int32'␤  in block <unit> at /tmp/3HxjNJ5dPH:1␤␤»

[13:23] <psch> m: :(*%).params.classify({.named}).grep({.slurpy}).say

[13:23] <camelia> rakudo-moar 9b336d: OUTPUT«Method 'slurpy' not found for invocant of class 'Pair'␤  in block <unit> at /tmp/50ik98fYI5:1␤␤»

[13:23] <psch> hm, i'll look closer at this later, got an appointment in a bit o/

[13:23] <Skarsnik> does the int32 and co type have a specific trait to distinct them from like Int?

[13:24] *** zakharyas joined
[13:24] <dalek> roast: b327867 | lizmat++ | S17-supply/ (43 files):

[13:24] <dalek> roast: add some perl6 vim markers

[13:24] <dalek> roast: review: https://github.com/perl6/roast/commit/b327867d2d

[13:25] <lucasb> m: class C { method m($,$,$,$,$) {} }; say C.can('m')[0].signature

[13:25] <camelia> rakudo-moar 9b336d: OUTPUT«(C $:,,,,, *%_)␤»

[13:26] <lucasb> I was thinking that the parameters was getting ignored, but they just don't show up in the output (psch: ^^) :)

[13:27] *** znpy joined
[13:28] <Skarsnik> m: say Int.^roles

[13:28] <camelia> rakudo-moar 9b336d: OUTPUT«((Real))␤»

[13:28] <[Coke]> m: say ‘g'day’

[13:28] <camelia> rakudo-moar 9b336d: OUTPUT«g'day␤»

[13:28] <Skarsnik> m: say int32.^roles

[13:28] <camelia> rakudo-moar 9b336d: OUTPUT«Method 'roles' not found for invocant of class 'Perl6::Metamodel::NativeHOW'␤  in block <unit> at /tmp/nufBOHJjk_:1␤␤»

[13:28] <Skarsnik> m: say int32.^can('Native')

[13:28] <camelia> rakudo-moar 9b336d: OUTPUT«()␤»

[13:29] <Skarsnik> m: say int32.^can('NativeHOW')

[13:29] <camelia> rakudo-moar 9b336d: OUTPUT«()␤»

[13:30] *** zakharyas1 joined
[13:30] *** vividsnow left
[13:32] *** zakharyas left
[13:32] *** rurban joined
[13:34] <dalek> doc: 22c9d07 | [email@hidden.address] | doc/Language/functions.pod:

[13:34] <dalek> doc: Remove typo

[13:34] <dalek> doc: review: https://github.com/perl6/doc/commit/22c9d076df

[13:34] <dalek> doc: b388df6 | nxadm++ | doc/Language/functions.pod:

[13:34] <dalek> doc: Merge pull request #228 from nxadm/master

[13:34] <dalek> doc: 

[13:34] <dalek> doc: Remove typo

[13:34] <dalek> doc: review: https://github.com/perl6/doc/commit/b388df6b52

[13:34] <El_Che> crap, I need to change my git email

[13:39] <brrt> yes, that happens

[13:44] <masak> maybe add a user.name too :)

[13:56] <El_Che> on the other hand, f*ck the nsa. Try to catch me now :)

[13:56] *** ChristopherBotto joined
[13:58] <El_Che> It has been fun to write p6. Although it takes a lot longer than p5. Not because of the language missing batteries, but because wanting to try out al the new goodies :)

[13:59] *** ChristopherBotto left
[14:00] <FROGGS> El_Che: they won't try to catch you directly... they'll organise weapons for .lu :o)

[14:00] <El_Che> :)

[14:00] *** n0tjack left
[14:02] *** cdg joined
[14:03] <El_Che> what the overhead of functions in perl6, btw? compared to perl6? better due to types?

[14:04] <llfourn> m: say sub foo:bar {};

[14:04] <camelia> rakudo-moar 9b336d: OUTPUT«sub foo:bar () { #`(Sub|58055904) ... }␤»

[14:04] <lizmat> El_Che: well, small functions already get inlined on heavy use, so YMMV

[14:04] <llfourn> m: say sub foo:bar(){};

[14:04] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/FwEwsl9CXd␤Null operator is not allowed␤at /tmp/FwEwsl9CXd:1␤------> 3say sub foo:bar()7⏏5{};␤»

[14:04] <llfourn> bug or LTA error?

[14:04] <lizmat> El_Che: but in general, there's an overhead for every scope, just as in P5

[14:04] <El_Che> thx

[14:05] <lizmat> but with a lot more introspectability, so after 6.c, we can optimize a lot of stuff to be *much* faster

[14:05] <El_Che> \o/

[14:07] <llfourn> m: say sub foo:bar () {}; # seems like spaces needed for : routine names

[14:07] <camelia> rakudo-moar 9b336d: OUTPUT«sub foo:bar () { #`(Sub|65318704) ... }␤»

[14:08] <El_Che> in an unrelated note, in my use case IO seemed fine (certainly to the easy use of channels).

[14:09] *** pmurias joined
[14:15] <llfourn> std: say sub foo:bar () {}; # seems like spaces needed for : routine names

[14:15] <camelia> std : OUTPUT«No such file or directory»

[14:15] * llfourn wonders if he did it wrong

[14:15] <camelia> std : OUTPUT«(timeout)cat: /home/camelia/std/snap/revision: No such file or directory␤»

[14:15] * llfourn thinks std is broken

[14:17] *** MilkmanDan left
[14:18] <moritz> looks like it

[14:20] *** Some-body_ joined
[14:22] *** csd_ left
[14:23] *** skids joined
[14:23] *** burnersk left
[14:23] *** eiro left
[14:23] *** DarthGandalf left
[14:23] *** matt_ left
[14:23] *** burnersk joined
[14:23] *** Some-body_ is now known as DarthGandalf

[14:24] <[Coke]> ... You should get that STD checked out.

[14:24] *** xjrK joined
[14:24] <[Coke]> seriously, though, we can probably drop std from camelia at this point.

[14:25] <timotimo> aye, especially since it's not being kept up to date any more

[14:26] <moritz> if the fix is trivial, I'll try to fix it.

[14:26] <moritz> or it seems somebody is already on it?

[14:27] <timotimo> i'm not

[14:27] <[Coke]> gah. I have RSS feeds for the various projects, and try to review commits. I'm currently 445 commits behind on nom.

[14:27] *** corbyhaas left
[14:28] *** eiro joined
[14:29] *** matt_ joined
[14:29] *** matt_ is now known as Guest50923

[14:29] *** aborazmeh joined
[14:29] *** aborazmeh left
[14:29] *** aborazmeh joined
[14:30] *** corbyhaas joined
[14:35] *** lucasb left
[14:35] *** hankache joined
[14:37] <xjrK> p6 emacs syntax highlighting?

[14:37] <xjrK> https://github.com/hinrik/perl6-mode works? anyone confirm?

[14:38] <moritz> xjrK: I'm not an emacs user, but that's the thing that we recommend when somebody asks

[14:38] <hankache> ohai moritz

[14:38] <xjrK> moritz: awesome, figured that. cheers (-:

[14:38] <hankache> hi xjrK

[14:39] <xjrK> hi hankache, how are you

[14:39] <hankache> xjrK all good mate, how are you?

[14:39] <moritz> \o hankache, *

[14:39] <xjrK> hankache: not too bad, updating emacs plugins currently... waiting for class to start

[14:40] <hankache> xjrK good luck :)

[14:40] *** nowan left
[14:40] <xjrK> hankache: thanks! (-:

[14:40] <xjrK> Now starts the commit from p5 to p6....

[14:43] <hankache> any volunteers to translate perl6intro.com to your native language?

[14:43] * moritz hates writing technical content in German

[14:43] *** nowan joined
[14:44] <dalek> roast: 19bbd5c | lizmat++ | S17-supply/throttle.t:

[14:44] <dalek> roast: Add some more Supply.throttle tests

[14:44] <dalek> roast: review: https://github.com/perl6/roast/commit/19bbd5cfb0

[14:44] <moritz> I know all the words and phrases and English, and have to search and translate endlessly to express something in German

[14:44] <lizmat> .oO( Datenfernübertragungsanlage )

[14:44] <hankache> moritz indeed, I am translating to French and I can tell you it's a pain in the ass 

[14:45] <El_Che> hankache: it's a difficult group you're looking for. People that know enough english to attempt the translation, imho, read their technical documentation in english, so the native terms would sound strange for them

[14:45] <hankache> i have to search each technical term

[14:45] *** Ven left
[14:46] <hankache> indeed El_Che

[14:46] *** ZoffixW joined
[14:46] <lucs> hankache: Fabrique un glossaire et envoie-le moi! :)

[14:46] <hankache> salut lucs

[14:46] <lucs> Allo

[14:47] * lucs also sometimes struggles with finding appropriate French technical computer terms.

[14:48] <hankache> merci lucs

[14:48] <El_Che> start with megaoctets and numeration :)

[14:48] <ZoffixW> I don't get it, how do I catch "fail" exceptions?

[14:48] <ZoffixW> m: sub foo { fail "kaboom!"; my %h = 1 => 2, foo => 'bar'; return %h };   try my %h = foo; CATCH { exit };  say %h<foo>

[14:48] <camelia> rakudo-moar 9b336d: OUTPUT«(Any)␤»

[14:48] <Skarsnik> maybe use some know dictionary like kde? (but there are probably more user oriented)

[14:48] <Skarsnik> CATCH { fail {} } ?

[14:49] <Skarsnik> or X::Something?

[14:49] <hankache> afk for 15 min

[14:49] <hankache> brb

[14:49] <lucs> hankache: You're welcome, but I'm not sure for what :)

[14:49] <ZoffixW> m: sub foo { fail "kaboom!"; my %h = 1 => 2, foo => 'bar'; return %h };   my %h = try { foo(); CATCH { default { exit } } };  say %h<foo>

[14:49] <camelia> rakudo-moar 9b336d: ( no output )

[14:49] <ZoffixW> This is sooo messy. Weren't there a cleaner syntax without a ton of curlies?

[14:50] <ZoffixW> m: sub foo { fail "kaboom!"; my %h = 1 => 2, foo => 'bar'; return %h };   my %h = try { foo() } or exit;  say %h<foo>

[14:50] <camelia> rakudo-moar 9b336d: OUTPUT«Odd number of elements found where hash initializer expected␤  in block <unit> at /tmp/fr8naZnpXm:1␤␤»

[14:50] <ZoffixW> :(

[14:50] *** aigan left
[14:51] <Skarsnik> yes execptin syntax is weird

[14:51] <ZoffixW> It's way too verbose

[14:51] *** virtualsue joined
[14:52] <ZoffixW> m: sub foo { fail "kaboom!"; my %h = 1 => 2, foo => 'bar'; return %h };   my %h = foo() or exit;  say %h<foo>

[14:52] <camelia> rakudo-moar 9b336d: OUTPUT«kaboom!␤  in sub foo at /tmp/nmfp9H9UNS:1␤  in block <unit> at /tmp/nmfp9H9UNS:1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp:2883␤  in block <unit> at /tmp/nmfp9H9UNS:1␤␤»

[14:52] <ZoffixW> The docs suggest that should work, since I'm checking the returned failure for truth: http://docs.perl6.org/type/Failure

[14:52] <ZoffixW> m: sub foo { fail "kaboom!"; my %h = 1 => 2, foo => 'bar'; return %h };   my %h = foo() || exit;  say %h<foo>

[14:52] <camelia> rakudo-moar 9b336d: ( no output )

[14:52] <ZoffixW> Yey \o/

[14:53] *** tyrus joined
[14:53] <moritz> yes, precedence

[14:53] <lucs> ZoffixW: By the way, after unsuccesfully trying to build a greasemonkey script to bypass the doc.perl6.org search box, I decided to clone the repo and build the HTML at home.

[14:53] *** hankache left
[14:53] <ZoffixW> Now, if I could get the error message from failure, then I'll cream myself

[14:53] <moritz> ZoffixW: "use fatal;"

[14:53] *** xjrK left
[14:54] <[Coke]> <steve>Language.</steve>

[14:54] <lucs> ZoffixW: But: make html ... 15/32: doc/Language/grammars.pod => language/grammars -- Type check failed in assignment to @!categories; expected Str but got Array

[14:54] <ZoffixW> lucs, that seems like an overkill

[14:54] <ZoffixW> m: use fatal; sub foo { fail "kaboom!"; my %h = 1 => 2, foo => 'bar'; return %h };   my %h = foo() || exit;  say %h<foo>

[14:54] <camelia> rakudo-moar 9b336d: OUTPUT«kaboom!␤  in sub foo at /tmp/BR7k9x4XKO:1␤  in block <unit> at /tmp/BR7k9x4XKO:1␤␤»

[14:54] <lucs> ZoffixW: Perhaps, but there it is.

[14:55] *** aborazmeh left
[14:55] <Skarsnik> hm

[14:55] <Skarsnik> How do I test if a sub has a specific trait?

[14:56] <ZoffixW> moritz, well, I have two types of fails "Network error" and "Location not found"... I'm really hoping for something nice and clean like:  my %h = foo() || $! ~~ /Network/ ?? die "Network error" !! die "Location not found"

[14:56] <moritz> m: sub f { fail 'kaboom' }; my %h = f() orelse die "Oh noez: $_.message()\n"; say 42

[14:56] <camelia> rakudo-moar 9b336d: OUTPUT«kaboom␤  in sub f at /tmp/xv7usNGlBY:1␤  in block <unit> at /tmp/xv7usNGlBY:1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp:2883␤  in block <unit> at /tmp/xv7usNGlBY:1␤␤»

[14:56] <cdc> Skarsnik: &foo.does(MyTrait) I suppose.

[14:56] <ZoffixW> .oO( orelse?? )

[14:56] <moritz> std: 42

[14:56] <camelia> std : OUTPUT«No such file or directory»

[14:56] <vytas> m: use Readline;

[14:56] <camelia> rakudo-moar 9b336d: OUTPUT«===SORRY!===␤Could not find Readline:ver<True>:auth<True>:api<True> in:␤    /home/camelia/.perl6/2015.11-407-g9b336d6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo…»

[14:56] <ZoffixW> Learn something new every day

[14:56] <camelia> std : OUTPUT«(timeout)cat: /home/camelia/std/snap/revision: No such file or directory␤#perl6 <vytas> rakudo-moar: use Readline;␤»

[14:56] <ZoffixW> m: sub f { fail 'kaboom' }; my %h = f() orelse say "Oh noez: $_.message()\n"; say 42

[14:56] <camelia> rakudo-moar 9b336d: OUTPUT«kaboom␤  in sub f at /tmp/PFLcbYDTmW:1␤  in block <unit> at /tmp/PFLcbYDTmW:1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp:2883␤  in block <unit> at /tmp/PFLcbYDTmW:1␤␤»

[14:57] <cdc> m: &foo.does(Callable)

[14:57] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8_3iErr_4Y␤Undeclared routine:␤    foo used at line 1␤␤»

[14:57] *** csd_ joined
[14:57] <cdc> m: sub foo() {}; &foo.does(Callable)

[14:57] <camelia> rakudo-moar 9b336d: ( no output )

[14:57] <cdc> m: sub foo() {}; &foo.does(Callable).say

[14:57] <camelia> rakudo-moar 9b336d: OUTPUT«True␤»

[14:57] *** uruwi left
[14:57] <Skarsnik> Oh thx

[14:57] <cdc> you're welcome :)

[14:59] <moritz> m: sub f { fail 'kaboom' }; my %h = f() orelse die "Oh noez: $_\n"; say 42

[14:59] <camelia> rakudo-moar 9b336d: OUTPUT«kaboom␤  in sub f at /tmp/9qde_ZEzkP:1␤  in block <unit> at /tmp/9qde_ZEzkP:1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp:2883␤  in block <unit> at /tmp/9qde_ZEzkP:1␤␤»

[14:59] *** uruwi joined
[14:59] <moritz> m: sub f { fail 'kaboom' }; my %h = (f() orelse die "Oh noez: $_\n"); say 42

[14:59] <camelia> rakudo-moar 9b336d: OUTPUT«Oh noez: (HANDLED) kaboom␤  in sub f at /tmp/KKu_wuyyo9:1␤  in block <unit> at /tmp/KKu_wuyyo9:1␤␤␤  in block <unit> at /tmp/KKu_wuyyo9:1␤␤»

[14:59] *** khw joined
[14:59] <moritz> precedence strikes again.

[15:00] <vytas> how does Perl6 know what i have installed, I just rebuild my perl, panda. and perl -e 'use Readline' gives me "[..]/dist/B6EB284194164A4B20F99B6D70B0E6CC6CCC5E18: no such file or directory"

[15:01] <lizmat> cycling&

[15:01] <ZoffixW> vytas, it's because its META file is broken. See this PR: https://github.com/drforr/perl6-readline/pull/2/files

[15:01] <ZoffixW> vytas, pull it and install with panda install .

[15:02] <DrForr> Woopsie.

[15:02] <ZoffixW> Tun-tun-tuuuun

[15:02] <vytas> ZoffixW, i appreciate this issue https://github.com/drforr/perl6-readline/issues/3

[15:02] <DrForr> Merged.

[15:02] <vytas> but why the hell Rakudo thinks I got it installed?

[15:03] <DrForr> I've been focusing on perl6-ANTLR4 because I'm mentioning it in talks.

[15:03] <moritz> vytas: because you installed it before?

[15:03] <vytas> i did not, cause I couldn't because of that issue, so I nuked rakudo and built it again

[15:04] <ZoffixW> vytas, yes, that issue can be closed now. The "Failed to copy '/tmp/.panda-work/1449234898_1/lib/Readline.pm6' to '/home/" is due to the wrong META, which just got fixed

[15:04] <tyrus> DrForr Long time!

[15:04] <ZoffixW> m: sub f { fail 'kaboom' }; my %h = (f() orelse die "Oh noez: $_.message\n"); say 42

[15:04] <camelia> rakudo-moar 9b336d: OUTPUT«Oh noez: (HANDLED) kaboom␤  in sub f at /tmp/DVnk9HddGV:1␤  in block <unit> at /tmp/DVnk9HddGV:1␤.message␤␤  in block <unit> at /tmp/DVnk9HddGV:1␤␤»

[15:05] <ZoffixW> m: sub f { fail 'kaboom' }; my %h = (f() orelse die "Oh noez: $_.message()\n"); say 42

[15:05] <camelia> rakudo-moar 9b336d: OUTPUT«kaboom␤  in sub f at /tmp/lpvGY4hNZB:1␤  in block <unit> at /tmp/lpvGY4hNZB:1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp:2883␤  in block <unit> at /tmp/lpvGY4hNZB:1␤␤»

[15:05] * ZoffixW shrugs

[15:05] * DrForr rubs a few neurons together... uh... good *god*. Yes.

[15:05] <vytas> all i care is should i worry and report a bug - if so I need to know what to include in bug report, or should I just carry on and install Readline ?

[15:05] <moritz> ZoffixW: it's $_ or $_.Str(), not .message

[15:06] <moritz> ZoffixW: my mistake

[15:06] <DrForr> vytas: Please report the bug.

[15:06] <ZoffixW> m: sub f { fail 'kaboom' }; my %h = (f() orelse die "Oh noez: $_.Str()\n"); say 42

[15:06] <camelia> rakudo-moar 9b336d: OUTPUT«Oh noez: (HANDLED) kaboom␤  in sub f at /tmp/XbrUf72LgM:1␤  in block <unit> at /tmp/XbrUf72LgM:1␤␤␤  in block <unit> at /tmp/XbrUf72LgM:1␤␤»

[15:06] <ZoffixW> I kinda hate the (HANDLED) is in there

[15:06] <ZoffixW> vytas, what's the bug? The Issue you opened? Try again, it's just been fixed

[15:07] <Skarsnik> hm, is that a bug? https://gist.github.com/Skarsnik/bae6082aa16fb6c20b4b (same erreor with is(native)

[15:07] <timotimo> can't you get the original exceptino object out of the failure and get its message?

[15:07] <vytas> ZoffixW, nope, issue is that rakudo falsely thinks i got readline installed

[15:08] <moritz> timotimo: yes, .exception.message should also work

[15:08] <ZoffixW> m: sub f { fail 'kaboom' }; my %h = (f() orelse die "Oh noez: {$_.exception.message}\n"); say 42

[15:08] <camelia> rakudo-moar 9b336d: OUTPUT«Oh noez: kaboom␤␤  in block <unit> at /tmp/O4NtxGOdiB:1␤␤»

[15:08] <ZoffixW> timotimo++ moritz++ thanks.

[15:09] *** cdg left
[15:09] <Skarsnik> vytas, try reinstalling readline?

[15:09] <Skarsnik> vytas, it probably get lost because the filename was wrong

[15:09] <vytas> Skarsnik, that way i would loose environment where it's broken

[15:10] <DrForr> I'd better reinstall it myself to see what broke during GLR :(

[15:10] *** virtualsue left
[15:10] <ZoffixW> vytas, I suspect your issue is there because panda failed to copy the files *when the META was broken*. So it marked it as installed, but failed to copy actual files. Just reinstall it with --force

[15:11] *** cdg joined
[15:11] <Skarsnik> fill an issue for panda

[15:11] <Skarsnik> it should not have did that x)

[15:11] *** xjrK joined
[15:11] <vytas> thanks all :)

[15:11] <Skarsnik> probably

[15:12] *** cdg left
[15:12] <Woodi> hankache: from perl6intro, jargon: rakudobrew isn't *Perl6* installer

[15:12] <Woodi> *manager

[15:13] *** tyrus left
[15:13] *** znpy left
[15:15] *** MilkmanDan joined
[15:15] *** cdg joined
[15:21] <dalek> doc: 8dc82a5 | (Zoffix Znet)++ | doc/Language/testing.pod:

[15:21] <dalek> doc: Add actual code examples for like/unlike

[15:21] <dalek> doc: review: https://github.com/perl6/doc/commit/8dc82a55e3

[15:23] *** RabidGravy joined
[15:24] *** lolisa left
[15:25] *** jkva joined
[15:25] *** nadim left
[15:25] <Skarsnik> hm, how to work around to test if a sub has the native trait ~~

[15:25] *** nadim joined
[15:27] *** Ven joined
[15:27] <timotimo> "work around"?

[15:27] *** cdg left
[15:27] <timotimo> m: use NativeCall; sub printf() is native(*); say &printf ~~ does Native

[15:27] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tWmT_DfpN_␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form.␤at /tmp/tWmT_DfpN_:1␤------> 3e NativeCall; sub printf() is native(*);7⏏5 say &printf ~~ does…»

[15:28] <Skarsnik> https://gist.github.com/Skarsnik/bae6082aa16fb6c20b4b 

[15:28] <timotimo> ah, it's private to NativeCall

[15:28] <timotimo> m: use NativeCall; sub printf() is native(*); say &printf.^roles.perl

[15:28] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/cdApVt978A␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form.␤at /tmp/cdApVt978A:1␤------> 3e NativeCall; sub printf() is native(*);7⏏5 say &printf.^roles.…»

[15:28] <timotimo> m: use NativeCall; sub printf() is native(*) { }; say &printf.^roles.perl

[15:28] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/fK4_QK6FN5␤No appropriate parametric role variant available for 'NativeCall::Native'␤at /tmp/fK4_QK6FN5:1␤»

[15:28] <timotimo> m: use NativeCall; sub printf() is native(*) { }; say &printf.^roles>>.name.perl

[15:28] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/W48jmJ8lzZ␤No appropriate parametric role variant available for 'NativeCall::Native'␤at /tmp/W48jmJ8lzZ:1␤»

[15:28] <timotimo> darn, it tries to pun that role

[15:28] <timotimo> however

[15:29] <timotimo> m: use NativeCall; sub printf() is native(*) { }; say &printf.native_symbol()

[15:29] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/5hqYxaTgEh␤No appropriate parametric role variant available for 'NativeCall::Native'␤at /tmp/5hqYxaTgEh:1␤»

[15:29] <timotimo> ... huh?

[15:29] <timotimo> oh, it's the whatever star

[15:29] <timotimo> m: use NativeCall; sub printf() is native(Str) { }; say &printf.^roles.perl

[15:29] <camelia> rakudo-moar 9b336d: OUTPUT«(NativeCall::Native[Sub,Str], Callable)␤»

[15:29] <timotimo> m: use NativeCall; sub printf() is native(Str) { }; say &printf.native_symbol()

[15:29] <camelia> rakudo-moar 9b336d: OUTPUT«Method 'native_symbol' not found for invocant of class 'Sub+{NativeCall::Native[Sub,Str]}'␤  in block <unit> at /tmp/aZuy9PE7rt:1␤␤»

[15:29] <timotimo> ah, that's only for when you "is symbol(...)"

[15:30] <timotimo> Skarsnik: the thing after "is" isn't what gets mixed in; it's what trait_mod:<is> gets called with

[15:30] <timotimo> Skarsnik: that's why it complains about "native" as a term

[15:30] <ZoffixW> m: use Test; cmp-ok 42, '<=', 100, 'ayup'

[15:30] <camelia> rakudo-moar 9b336d: OUTPUT«not ok 1 - ayup␤␤# Failed test 'ayup'␤# at /tmp/sv26hSqRuk line 1␤# Could not use '<=' as a comparator␤»

[15:30] <ZoffixW> :(

[15:31] <ZoffixW> Why not?

[15:31] <ZoffixW> m: use Test; cmp-ok 42, '==', 100, 'ayup'

[15:31] <camelia> rakudo-moar 9b336d: OUTPUT«not ok 1 - ayup␤␤# Failed test 'ayup'␤# at /tmp/si1MVL3pcB line 1␤# expected: '100'␤Sub+{<anon|73581040>}+{Precedence} object coerced to string (please use .gist or .perl to do that)  in block  at /home/camelia/rakudo-m-inst-1/share/perl6/sources…»

[15:31] <Skarsnik> should does(NativeCall::Native) work?

[15:31] <moritz> m: use Test; cmp-ok 42, &infix:[ '<=' ], 100, 'ayup'

[15:31] <camelia> rakudo-moar 9b336d: OUTPUT«ok 1 - ayup␤»

[15:31] <moritz> ZoffixW: because it's not callable

[15:32] <ZoffixW> m: use Test; cmp-ok('my spelling is apperling', '~~', /perl/, "bad speller");

[15:32] <camelia> rakudo-moar 9b336d: OUTPUT«ok 1 - bad speller␤»

[15:32] <Skarsnik> m: use NativeCall; sub printf() is native(Str) { }; say &printf does NativeCall::Native;

[15:32] <camelia> rakudo-moar 9b336d: OUTPUT«Could not find symbol '&Native'␤  in block <unit> at /tmp/saVdKhHOOA:1␤␤Actually thrown at:␤  in block <unit> at /tmp/saVdKhHOOA:1␤␤»

[15:32] <ZoffixW> Bottom of these docs suggest that at least '==' should work: http://docs.perl6.org/language/testing#Comparison_of_expected_and_actual_output

[15:32] <ZoffixW> m: use Test; cmp-ok 42, &infix:[ '==' ], 42, 'ayup'

[15:32] <camelia> rakudo-moar 9b336d: OUTPUT«ok 1 - ayup␤»

[15:34] <Skarsnik> m: use NativeCall; sub printf() is native(Str) { }; say &printf ~~ does NativeCall::Native;

[15:34] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/dSHdpscUgA␤Undeclared routine:␤    does used at line 1␤␤»

[15:34] <timotimo> Skarsnik: it should not. that role is private to the NativeCall module

[15:35] <moritz> ZoffixW: ah yes, it's a bug in cmp-ok

[15:35] <moritz> if $op ~~ Callable ?? $op !! try EVAL "&infix:<$op>" -> $matcher {

[15:35] <moritz> of course &infix:<$op> won't work if < is part of the operator name

[15:35] <DrForr> &infix:<< ... >> for those, no?

[15:36] <Skarsnik> m: use NativeCall; sub printf() is native(Str) { }; say &printf.^roles.Str ~~ /NativeCall/;

[15:36] <timotimo> my first thought was it'd have to be because "&infix:<foo>" already tries to interpolate

[15:36] <camelia> rakudo-moar 9b336d: OUTPUT«Use of uninitialized value of type NativeCall::Native[Sub,Str] in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in any  at gen/moar/m-Metamodel.nqp:1693␤Use of uninitialized value of type Callable in st…»

[15:36] <moritz> DrForr: that won't work for << in the operator name

[15:36] <Skarsnik> m: use NativeCall; sub printf() is native(Str) { }; say &printf.^roles.Str ~~ rw/NativeCall/;

[15:36] <camelia> rakudo-moar 9b336d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tloixOWK5w␤Missing required term after infix␤at /tmp/tloixOWK5w:1␤------> 3say &printf.^roles.Str ~~ rw/NativeCall/7⏏5;␤    expecting any of:␤        prefix␤        term␤»

[15:36] <moritz> probably easier to use use &CLIENT::something or so

[15:37] <moritz> m: my $name = '<='; say &infix:[ $name ]

[15:37] <camelia> rakudo-moar 9b336d: OUTPUT«Use of uninitialized value <element> of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in any canonicalize_pair at src/Perl6/World.nqp:4012␤Use of uninitialized value <element> of type Any in…»

[15:38] <moritz> m: my $name = '<='; say &infix:[ $name ].^name

[15:38] <camelia> rakudo-moar 9b336d: OUTPUT«Use of uninitialized value <element> of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in any canonicalize_pair at src/Perl6/World.nqp:4012␤Use of uninitialized value <element> of type Any in…»

[15:38] <timotimo> Skarsnik: you really want to use >>.name rather than .Str

[15:38] <Skarsnik> m: use NativeCall; sub printf() is native(Str) { }; say &printf.^roles>>.name ~~ /NativeCall/;

[15:38] <camelia> rakudo-moar 9b336d: OUTPUT«Method 'name' not found for invocant of class 'NativeCall::Native[Sub,Str]'␤  in block <unit> at /tmp/96vcDaLYnE:1␤␤»

[15:39] <Skarsnik> m: use NativeCall; sub printf() is native(Str) { }; say &printf.^roles.perl ~~ /NativeCall/;

[15:39] <camelia> rakudo-moar 9b336d: OUTPUT«｢NativeCall｣␤»

[15:39] <timotimo> BBL

[15:39] *** lucasb joined
[15:40] *** FROGGS left
[15:41] *** g4 left
[15:41] <moritz> ZoffixW: I'm currently testing a fix that escapes < in operator names

[15:42] <ZoffixW> cool

[15:42] <ZoffixW> But == also doesn't work

[15:42] <ZoffixW> m: use Test; cmp-ok 100, '==', 100

[15:42] <camelia> rakudo-moar 9b336d: OUTPUT«ok 1 - ␤»

[15:42] <ZoffixW> Oh :S

[15:42] <moritz> m: say &infix:<==>.perl

[15:42] <camelia> rakudo-moar 9b336d: OUTPUT«sub infix:<==> (Mu $?, Mu $?) { #`(Sub+{<anon|73581040>}+{Precedence}|64656048) ... }␤»

[15:42] <ZoffixW> Ah, I was comparing 42 == 100 and that's why it failed, not because of the issue

[15:42] <autarch> lizmat: looks like Supply is fixed now

[15:42] <yoleaux> 10:58Z <lizmat> autarch: could you test Supply.throttle again and tell me if it fixed your problem?

[15:42] <ilmari> m: use Test; cmp-ok 100, &infix:<==>, 100

[15:42] <camelia> rakudo-moar 9b336d: OUTPUT«ok 1 - ␤»

[15:42] <ZoffixW> The error is LTA tho

[15:43] <ZoffixW> m: use Test; cmp-ok 42, '==', 100

[15:43] <camelia> rakudo-moar 9b336d: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/qShrj579lG line 1␤# expected: '100'␤Sub+{<anon|73581040>}+{Precedence} object coerced to string (please use .gist or .perl to do that)  in block  at /home/camelia/rakudo-m-inst-1/share/perl6/sources/E44B9B5D5CB949…»

[15:43] <ZoffixW> The anon stuff.

[15:43] <ilmari> moritz: say ~&infix:<==>

[15:43] <ilmari> m: say ~&infix:<==>

[15:43] <camelia> rakudo-moar 9b336d: OUTPUT«Sub+{<anon|73581040>}+{Precedence} object coerced to string (please use .gist or .perl to do that)  in block <unit> at /tmp/S5xMSbAL0e:1␤infix:<==>␤»

[15:44] <ilmari> moritz: sorry, tab-complete habit, please ignore

[15:45] <[Coke]> is https://rt.perl.org/Ticket/Display.html?id=126805 rejectable since a fresh checkout worked?

[15:46] <Skarsnik> http://doc.perl6.org/routine/signature the link on Signature (grey text) is not there btw x)

[15:48] *** Guest98452 left
[15:49] *** xpen joined
[15:49] <lucasb> If I have PERL6LIB=/path/to/lib set at installation time, it seems precomp ends in /path/to/lib/.precomp instead of ~/.perl6/* . Is this intended/expected?

[15:51] *** oka^ left
[15:51] *** zakharyas1 left
[15:52] *** Khisanth joined
[15:55] <Skarsnik> not bad x)

[15:55] <Skarsnik> Mu gumbo_destroy_output - You should not return a non NC type (like Int inplace of int32), truncating errors can appear with different architectures

[15:55] <Skarsnik> gumbo_normalized_tagname - Not a valid parameter type for parameter [0]  : Int

[15:55] <Skarsnik> -->For Numerical type, use the appropriate int32/int64/num64...

[15:55] <Skarsnik> root@testperl6:~/piko/nativecall-typediag#

[15:57] *** xjrK left
[15:57] <moritz> m: say &::("infix:<\\<=>")

[15:57] <camelia> rakudo-moar 9b336d: OUTPUT«No such symbol '&::infix:<\<=>'␤  in block <unit> at /tmp/UgpON2O8WH:1␤␤Actually thrown at:␤  in block <unit> at /tmp/UgpON2O8WH:1␤␤»

[15:57] <moritz> I believe this is a bug :(

[15:58] *** abraxxa left
[15:58] <dalek> ecosystem: 6b5251c | (Zoffix Znet)++ | META.list:

[15:58] <dalek> ecosystem: Add WWW::Google::Time to eco

[15:58] <dalek> ecosystem: 

[15:58] <dalek> ecosystem: Get time for various locations using Google: https://github.com/zoffixznet/perl6-WWW-Google-Time

[15:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/6b5251c1d8

[15:58] <moritz> TimToady: what's the proper name to look up an infix operator by name if it happens to contain a < or «?

[15:59] <Skarsnik> Ho interesting

[15:59] <Skarsnik> ZoffixW, should it be webservice::Google:Time?

[16:00] <ZoffixW> Skarsnik, why?

[16:00] <Skarsnik> Well there is already some WebService:: module

[16:01] <ZoffixW> ¯\_(ツ)_/¯ I really don't see any additional clarity offered by the additional verbosity.

[16:02] <[Coke]> does https://rt.perl.org/Ticket/Display.html?id=126718 still matter post-precomp?

[16:02] <ZoffixW> I was even this ->| |<- close to naming it Google::Time

[16:02] <Skarsnik> Well WWW for me imply you scrap some html x)

[16:02] <Skarsnik> but I am weird

[16:02] <ZoffixW> Skarsnik, well... I am

[16:02] <lucasb> m: say &infix:['<']

[16:02] <camelia> rakudo-moar 9b336d: OUTPUT«sub infix:«<» (Mu $?, Mu $?) { #`(Sub+{<anon|73581040>}|65095944) ... }␤»

[16:03] <ZoffixW> [Coke], IIRC there's still an issue where use lib conflicts with -I... lemme test real quick

[16:03] *** xpen left
[16:08] <hoelzro> o/ #perl6

[16:09] <ZoffixW> [Coke], couldn't reproduce what I thought the issue was. I closed that ticket.

[16:11] <hoelzro> .seen MadcapJake

[16:11] <yoleaux> I saw MadcapJake 5 Dec 2015 03:07Z in #perl6: * MadcapJake is off to bed!

[16:12] <ZoffixW> Skarsnik, but I think I already talked about the whole namespace thing. In most cases, these generic namespaces add nothing but extra characters into your source code... Like this: http://backpan.perl.org/authors/id/Z/ZO/ZOFFIX/POE-Component-IRC-Plugin-CPAN-LinksToDocs-No404s-Remember-0.001.tar.gz

[16:13] <Skarsnik> great win7 that open me tar.gz with snes9x xD

[16:13] <ZoffixW> m: say 'use POE::Component::IRC::Plugin::CPAN::LinksToDocs::No404s::Remember 0.001;'.chars

[16:13] <camelia> rakudo-moar 9b336d: OUTPUT«75␤»

[16:13] <ZoffixW> 75 chars! That's almost at the line limit :)

[16:13] <hoelzro> .tell MadcapJake do you need more help on your changes to Perl6::Compiler? I would be happy to help you out with it!

[16:13] <yoleaux> hoelzro: I'll pass your message to MadcapJake.

[16:13] *** uruwi left
[16:14] <moritz> use shorter::identifiers;

[16:14] <ZoffixW> Skarsnik, and there's plenty more examples in http://backpan.perl.org/authors/id/Z/ZO/ZOFFIX/

[16:14] <Skarsnik> use PCIPCLNR

[16:14] <ZoffixW> moritz, way ahead of you: http://backpan.perl.org/authors/id/Z/ZO/ZOFFIX/Acme-Shorten-ZoffixsModuleNames-0.001.tar.gz

[16:14] <ZoffixW> Skarsnik, which is why I'm now more reluctant to use extra-long-winded module names :D

[16:14] *** Actualeyes left
[16:15] *** adu joined
[16:16] <Skarsnik> Where is Acme::Alltheunicodecodeinthename ?

[16:16] <RabidGravy> right finally fix0rificated Sys::Utmp and Sys::Lastlog

[16:17] <RabidGravy> nine++ # resources stuff

[16:17] <ZoffixW> Skarsnik, won't work, the indexer has like 32-char limit

[16:17] <ZoffixW> Oh wait never mind, that's for the version

[16:20] * ZoffixW really wish to see more modules per day for P6 on http://www.modulecounts.com/

[16:20] <Skarsnik> zoffix: say Module-count;

[16:20] <ZoffixW> Go is pretty insane 252 modules per day. Talk about wheel reinvention factory.

[16:20] <Skarsnik> lol

[16:20] *** MilkmanDan left
[16:21] *** Ven left
[16:22] <moritz> ZoffixW: well, they have no generics, so they probably need an Int32BTree, an Int64BTree, a StrBTree, ... :-)

[16:23] <arnsholt> m: EVAL("say Parameter.WHERE"); say Parameter.WHERE

[16:23] <camelia> rakudo-moar 9b336d: OUTPUT«47722176␤47722176␤»

[16:23] <ZoffixW> :D

[16:24] *** MilkmanDan joined
[16:25] *** abaugher_ left
[16:26] *** abaugher_ joined
[16:26] <RabidGravy> I think the modules *will* pick up when people start making applications in it

[16:27] <grondilu> are those modules written by humans though?

[16:27] *** adu left
[16:27] <RabidGravy> depends whether you consider go programmers human or not ;-)

[16:27] <Skarsnik> *wrote 3 modules, patched 6-8.. to do stuff with ponies*

[16:28] <pmurias> the future according to modulecounts doesn't seem especially good for Perl5 :/

[16:28] <yoleaux> 4 Dec 2015 21:34Z <[Coke]> pmurias: https://github.com/coke/perl6-roast-data/blob/master/log/nqp.js_summary.out Cannot find module 'tap', so everything dies.

[16:30] <ZoffixW> pmurias, how do you figure? If you look at the CPAN chart its climb barely tapers off, which is understandable since there's a module for everything so there's not much new to make...

[16:30] *** molaf joined
[16:31] *** uruwi joined
[16:31] *** pmurias left
[16:31] <ZoffixW> okay then :P

[16:31] <RabidGravy> I'm actually thinking of *removing* some modules

[16:32] <ZoffixW> RabidGravy, from P6 or P5?

[16:32] <RabidGravy> from P5

[16:32] <RabidGravy> Linux::Svgalib will never work again for instance

[16:32] <ZoffixW> Oh yeah. I think I've made ~250 modules in my lifetime, but currently there are only ~100 listed.

[16:33] *** pmurias joined
[16:33] <Juerd> RabidGravy: Because it's the CP**A**N, I'm reluctant to remove modules.

[16:33] *** brrt left
[16:33] <Juerd> RabidGravy: Someone, some day, may still need your modules or like to be inspired by it.

[16:34] <Juerd> RabidGravy: This feeling was made stronger when I visited a Retro Gaming space (like a hackerspace), and learned how hard it is to get drivers and libraries from 10 or 20 years ago.

[16:35] <Juerd> RabidGravy: Storage and bandwidth are incredibly cheap, so why remove anything?

[16:35] <RabidGravy> oh there's some twenty year old modules in there that aren't going anywhere

[16:35] <Juerd> http://awesomeretro.org/ by the way

[16:35] <ZoffixW> Because there's not much use for bit-rotten code that you don't wish to maintain anymore. There's always BackPan

[16:36] *** tyrus joined
[16:36] <pmurias> ZoffixW: it's just the impression from the numbers without actually looking what's inside the repos

[16:36] <Juerd> And http://awesomespace.nl/

[16:36] <Juerd> ZoffixW: I hate the whole "there's always backpan" thing that keeps popping up.

[16:36] *** micxjo joined
[16:36] <Juerd> ZoffixW: Backpan isn't mirrored as much, is hardly indexed, hard to search through, etc.

[16:37] <pmurias> ZoffixW: the other "dynamic" languages seem to have more modules and faster growth

[16:37] <RabidGravy> yeah, it's useful for getting the older versions of things

[16:37] <Juerd> It's a solution to a problem that didn't have to exist, but now because there's a solution, people seem to be very motivated to make the problem bigger :)

[16:37] <ZoffixW> Juerd, I've just spent too much time digging through CPAN search results before realizing the module is broken in some way and the author is long AWOL

[16:37] <Juerd> ZoffixW: A simple boolean would have done that job so much better.

[16:38] <ZoffixW> Boolean?

[16:38] <Juerd> Yeah.. Let's call it is_maintained

[16:38] <Juerd> It could even be a datetime.

[16:38] <ZoffixW> I think mst has given this issue more thought with the MSTPan thing

[16:38] <Juerd> I don't know mstpan

[16:38] <RabidGravy> could even put an "I want to abandon this" button on PAUSE

[16:39] <Juerd> RabidGravy: Yep, that would be good.

[16:39] <ZoffixW> Datetime? Some modules' authors are well and active and the module iself works well without updated

[16:39] *** tyrus left
[16:39] <Juerd> ZoffixW: Still, though, I'd like to indicate for DBIx::Simple that it's still relevant.

[16:39] <ZoffixW> RabidGravy, there is. Just give perms to ADOPTME 

[16:39] <ZoffixW> Juerd, http://shadow.cat/blog/matt-s-trout/mstpan-1/

[16:40] <Juerd> I'm not putting my modules up for adoption because I fear that the future maintainer will remove them and depend on backpan.

[16:40] <RabidGravy> :)

[16:40] <ZoffixW> hahaha

[16:40] <Juerd> ZoffixW: tl;will read another time, but thanks for the link )

[16:40] <Juerd> :)

[16:44] *** jkva left
[16:50] *** ZoffixW left
[16:52] *** telex left
[16:57] *** telex joined
[16:59] *** Hor|zon left
[17:01] *** nowan left
[17:03] *** nowan joined
[17:03] *** nowan left
[17:06] *** nowan joined
[17:08] <dalek> rakudo/nom: 7fe2481 | TimToady++ | docs/announce/2015.12.md:

[17:08] <dalek> rakudo/nom: remove a couple of dups

[17:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7fe24818fd

[17:08] <dalek> rakudo/nom: f650749 | TimToady++ | docs/announce/2015.12.md:

[17:08] <dalek> rakudo/nom: nick format preference

[17:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f650749fa0

[17:08] <zostay> so... is perl6 going to continue using an oldish version of libuv for the foreseeable future?

[17:09] <zostay> i ask because i suspect i've run into a bug in libuv that is causing aborts in my work with supplies when it tries to cleanup one of the threads it's using

[17:09] <lucasb> I've been saying this for months now :)

[17:09] <zostay> and by perl6 i actually mean MVM

[17:09] *** TEttinger joined
[17:10] <lucasb> I wish it updated to the latest libuv... but now, before the release, it seems risk

[17:10] <zostay> there's always the point release ;)

[17:13] <nine> Well we do have the spectest suite for the risk

[17:13] <TimToady> which regularly blows up on threading things... :/

[17:13] <dj_goku> is there a reason, you couldn't, git pull the most recent, build, run a roast against it?

[17:14] <nine> TimToady: which could be a reason to upgrade if it helps with those

[17:14] <TimToady> troo

[17:14] <dj_goku> oh btw libuv has moved from https://github.com/joyent/libuv to  github.com/libuv/libuv

[17:15] <nine> Today's advent post made it into the lwn.net news!

[17:17] <lucasb> nine: Can you give me a hand with precomp? If I install rakudo with 'PERL6LIB=/some/path make install', it installs the precomp modules into /some/path/.precomp . Is this intended/expected?

[17:17] <nine> lucasb: yes, that's intended

[17:17] <lucasb> nine: oh, ok. I wasn't sure.

[17:18] <nine> lucasb: we always store the precompiled modules into the precomp store of $*REPO, i.e. the head repository of the chain.

[17:19] <lucasb> nine: thanks

[17:19] <nine> lucasb: modules are precompiled for a certain chain of repositories which satisfy the module's dependencies. If the chain changes, other versions of those dependencies may be used, invalidating the precompiled modules.

[17:20] <lucasb> I'm still figuring it out this whole precomp thing. It just seemed strange

[17:21] <lucasb> One example is: 'PERL6LIB=/no/permission make install' fails to install because the user doesn't has permission to mkdir that dir

[17:22] <nine> lucasb: well we assume that PERL6LIB or -I or use lib (they're all the same) are for development purposes where you usually have write permissions. System wide installations of modules go into CompUnit::Repository::Installation repos

[17:23] *** cognominal_ joined
[17:23] *** xjrK joined
[17:23] *** AlexDaniel joined
[17:23] <nine> However we should probably make those precompilation failures non-fatal. That would probably be an easy patch for anyone annoyed enough to give it a try.

[17:24] <lucasb> Another unrelated thing is that there are 3 repos: share/perl6, share/perl6/site, share/perl6/vendor. What is your opinion about making the first one be share/perl6/core?

[17:24] *** cdg joined
[17:24] <zostay> if you install a new version of rakudo, should it fail on old .precomps?

[17:24] <zostay> or even just rebuild the same version

[17:25] *** cognominal left
[17:25] <nine> lucasb: I would very much like that. Or even remove it entirely. What we have right now is nothing but a mirror of Perl 5's directory layout.

[17:26] <lucasb> nine: ah, ok. thanks again

[17:26] <nine> zostay: the SHA hashes in the names of precompiled files include the compiler-id which changes on every rakudo build. If you rebuild rakudo, it won't use those files anymore.

[17:30] <ugexe> lucasb: i had the same problem... a read only network share where the modules can't use each other via -I unless they have actually been installed. it makes testing the validitity of multiple packages before installing a huge pain

[17:31] <zengargoyle> can one say: PERL6LIB=/path1 make install; then move the repo: mv /path1 /path2/elsewhere; and then PERL6LIB=/path2/elsewhere perl6 ...; ??

[17:31] <ugexe> paths are hard coded in the byte code i believe

[17:33] <geekosaur> hrm

[17:34] <jnthn> You can't relocate it.

[17:34] <yoleaux> 02:42Z <skids> jnthn: Questions that arose while updating S17 https://gist.github.com/skids/fabd0304f40e24db33d0

[17:34] <yoleaux> 10:09Z <lizmat> jnthn: I think there's a race condition in supply syntax exposed by "(1..5).Supply.throttle( 4, { say "$*THREAD.id(): start $_"; $_ } ).wait;"

[17:34] <yoleaux> 10:10Z <lizmat> jnthn: fwiw, I've seen S17-supply/syntax.t hang occassionally: feels like the throttle example is exposing this more reliably

[17:34] <zengargoyle> that's sad. :(

[17:35] <geekosaur> not so good for staged deployment (binary OS packages, AFS/staged NFS, etc.)

[17:35] <jnthn> Then...submit patches!

[17:35] <jnthn> I've nothing against it being relocatable provided it's done in a sane way

[17:36] * zengargoyle strangely enough, my one Perl 5 contribution was related to relocation.

[17:36] <jnthn> ;-)

[17:36] <TimToady> do you count putting each path into a padded 1k buffer and providing a binary patcher as "sane"?

[17:37] <jnthn> TimToady: I tried to binary patch Parrot like that but it didn't go too well :P

[17:37] <jnthn> I'd prefer if we could find a better way, but I can probably live with that option :)

[17:38] <geekosaur> (-headerpad-max-install-names)

[17:38] <vytas> perl6 doesn't have goto, does it ?

[17:38] <[Coke]> m: HERE: goto HERE;

[17:38] <camelia> rakudo-moar f65074: OUTPUT«Label.goto() not yet implemented. Sorry. ␤  in block <unit> at /tmp/cjf9tmH_ul:1␤␤»

[17:38] <zengargoyle> is there a reason paths can't be relative?

[17:39] *** silug joined
[17:40] *** pistacchio joined
[17:41] <TimToady> m: say 3 RRRxx rand

[17:41] <camelia> rakudo-moar f65074: OUTPUT«(0.33914404302382 0.618942086312358 0.188375246650337)␤»

[17:41] <TimToady> jnthn: ^^

[17:41] <TimToady> ! works too, but still thinking about Z and X...

[17:41] <TimToady> and [&&]

[17:42] <TimToady> I can naïvely make rand Xxx 1,2,3 work, but that sort of approach breaks <a b c> Xxx 1,2,3

[17:43] <nadim> hi, is cached is not implemented yet on methods,  wouldn't it be better t have a warning (that one can hide somehow) rather than a compile error? This will mean modifying the code when is cached is available rather than just use it when available. 

[17:44] <jnthn> TimToady: \o/

[17:44] <jnthn> nadim: I'm going to make "is cached" experimental in the next week or so, and we'll get it fixed up for 6.d or something.

[17:44] <[Coke]> nadim: going from an error to providing an implementation is ok. going from being quiet to dying is bad.

[17:45] <[Coke]> jnthn++

[17:45] <jnthn> We didn't figure out what the cache keying mechanism should be, there's a difficult to fix issue with its interaction with multis, and the method semantics need a decent bit of thought. I'd rather just postpone it and get it right than rush it now and live with it being broken forever.

[17:46] <nadim> Thank you for the explanation :)

[17:46] <jnthn> Also, this may encourage exploration of the issue in module space, and then we may get to pick a better solution from there :)

[17:46] *** domm left
[17:48] <TimToady> "use experimental" should probably be "use MONKEY-BUSINESS" or so

[17:48] <nadim> You know better, I'll implemet a little, specific, cache in the mean time

[17:51] *** virtualsue joined
[17:51] *** dakkar left
[17:56] <[Coke]> monkey-wrench? monkey-bread? monkey-island? monkey's-uncle/

[17:56] <dj_goku> running through a promise example I got this error: http://fpaste.scsys.co.uk/502519

[17:59] *** vendethiel joined
[18:00] <TimToady> monkey-hear-no-evil?

[18:00] <dalek> doc: 2dcd172 | (David H. Adler)++ | doc/Language/5to6-perlfunc.pod:

[18:00] <dalek> doc: Adjusted entry on <fc> in 5to6-perlfunc to reflect that it is now

[18:00] <dalek> doc: implemented

[18:00] <dalek> doc: review: https://github.com/perl6/doc/commit/2dcd1729a6

[18:00] *** dha joined
[18:03] <dj_goku> m: my $p = Promise.new; $p2.break('bad'); say 'result ' ~ $p2.result;

[18:03] <camelia> rakudo-moar f65074: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gVifQpnoNB␤Variable '$p2' is not declared␤at /tmp/gVifQpnoNB:1␤------> 3my $p = Promise.new; 7⏏5$p2.break('bad'); say 'result ' ~ $p2.re␤»

[18:04] <flussence> zostay: you can build moarvm with --has-libuv, it runs fine with 1.7.5

[18:04] <dj_goku> ug

[18:04] <dj_goku> m: my $p = Promise.new; $p.break('bad'); say 'result ' ~ $p.result;

[18:04] <camelia> rakudo-moar f65074: OUTPUT«bad␤  in block <unit> at /tmp/875uSn1GQD:1␤␤»

[18:05] *** hankache joined
[18:05] <dj_goku> m: my $p = Promise.new; $p.break('bad'); say $p.status; say $p.result;

[18:05] <camelia> rakudo-moar f65074: OUTPUT«Broken␤bad␤  in block <unit> at /tmp/pNZ2FII_vF:1␤␤»

[18:05] *** llfourn left
[18:07] <dj_goku> am I doing something wrong to get that error?

[18:08] <[Coke]> you're trying to get the result of a promise that died, and when you try to access it, it dies for you right then. I -think- that's desired behavior.

[18:08] *** pmurias left
[18:09] <flussence> m: my $p = Promise.new; $p.break('bad'); say $p.result.WHAT;

[18:09] <camelia> rakudo-moar f65074: OUTPUT«bad␤  in block <unit> at /tmp/U2FBSklZAX:1␤␤»

[18:09] <[Coke]> m: my $p = Promise.new; $p.keep('yay!'); say $p.result;

[18:09] <camelia> rakudo-moar f65074: OUTPUT«yay!␤»

[18:10] <[Coke]> m: my $p = Promise.new; $.break('bah!'); { say $p.result; CATCH { say "oh, it died" } }

[18:10] <camelia> rakudo-moar f65074: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wDJgKW1LiR␤Variable $.break used where no 'self' is available␤at /tmp/wDJgKW1LiR:1␤------> 3my $p = Promise.new; $.break('bah!')7⏏5; { say $p.result; CATCH { say "oh, it d␤»

[18:10] <[Coke]> m: my $p = Promise.new; $p.break('bah!'); { say $p.result; CATCH { say "oh, it died" } }

[18:10] <camelia> rakudo-moar f65074: OUTPUT«oh, it died␤bah!␤  in block <unit> at /tmp/3t4AEusqKs:1␤␤»

[18:10] <[Coke]> ^^

[18:10] *** pistacchio left
[18:12] <dj_goku> [Coke]: so then this example should be updated accoridingly? http://doc.perl6.org/language/concurrency#Promises

[18:13] <dj_goku> m: my $p = Promise.new; $p.break('bad'); say $p.status; {TRY say $p.result; CATCH { say "oh, it died" } }

[18:13] <camelia> rakudo-moar f65074: OUTPUT«5===SORRY!5=== Error while compiling /tmp/YS1t9KbAIZ␤Undeclared name:␤    TRY used at line 1␤␤»

[18:13] <RabidGravy> no TRY

[18:13] <RabidGravy> don't need it

[18:14] <dj_goku> m: my $p = Promise.new; $p.break('bad'); say $p.status; {say $p.cause; CATCH { say "oh, it died" } }

[18:14] <camelia> rakudo-moar f65074: OUTPUT«Broken␤bad␤»

[18:15] <dj_goku> m: my $p = Promise.new; $p.break('bad'); say $p.status; {say $p.result; CATCH { say "oh, it died" } }

[18:15] <camelia> rakudo-moar f65074: OUTPUT«Broken␤oh, it died␤bad␤  in block <unit> at /tmp/hc0zOttF6A:1␤␤»

[18:15] <dj_goku> RabidGravy: interesting. :D

[18:15] <RabidGravy> that CATCH still dies though

[18:16] <dj_goku> why is that?

[18:16] <RabidGravy> m: my $p = Promise.new; $p.break('bad'); say $p.status; {say $p.result; CATCH { default { say "oh, it died - $_ " } } }

[18:16] <camelia> rakudo-moar f65074: OUTPUT«Broken␤oh, it died - bad ␤»

[18:17] <RabidGravy> CATCH is like a magic "given" for exceptions

[18:17] <RabidGravy> you need to match the exception to stop it being thrown

[18:18] <timotimo> well, anything that sets a $_ acts as a given, no?

[18:18] <psch> m: with "foo" { when "foo" { say "dunno" } }

[18:18] <camelia> rakudo-moar f65074: OUTPUT«dunno␤»

[18:18] <psch> well, maybe :P

[18:18] <RabidGravy> so without at least a default it will throw

[18:19] *** spider-mario joined
[18:22] <timotimo> the thing is, the failure stores a "handled" flag, which gets set to True when it gets matched against and returns true

[18:22] <timotimo> so if a "when" with the right type or a default (not sure how exactly that part works, tbh) checks against it, it'll be handled

[18:22] <timotimo> when a check for the wrong exception type comes up, the flag won't be set

[18:23] <timotimo> ah

[18:24] <timotimo> default calls "succeed" on the exception payload

[18:24] <psch> m: 5 + "foo"; CATCH { say $_.defined }

[18:24] <camelia> rakudo-moar f65074: OUTPUT«WARNINGS:␤Useless use of "+" in expression "5 + \"foo\"" in sink context (line 1)␤True␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5foo' (indicated by ⏏)␤  in block <unit> at /tmp/MWTTrwPKqS:1␤…»

[18:24] *** uruwi left
[18:25] <flussence> ooh, green eject

[18:27] <Skarsnik> I should install my modules: root@testperl6:~/piko/Ferrel# perl6 -I ../perl6-gumbo/lib -I . -I /home/skarsnik/devel/http-useragent/lib -I ../Discord/lib/ -I ../config-simple/lib/ Ferrel.p6

[18:27] <Skarsnik> x)

[18:29] <timotimo> hehe

[18:29] <flussence> just put them in a big META6.json somewhere and -I that :)

[18:30] <timotimo> at some point we have to have something like FatPacker

[18:31] <dj_goku> alright just to make sure I got everything. I need a default given option else it'll still throw an exception.

[18:32] <dj_goku> ahh: Waits for the promise to be kept or broken. If it is kept, returns the result; otherwise throws the result as an exception. from http://doc.perl6.org/type/Promise#method_result

[18:34] <dj_goku> I guess that is why $p.cause is there.

[18:36] *** hankache left
[18:42] <timotimo> hum.

[18:42] <timotimo> the http://perl6advent.wordpress.com/ theme is super pretty, but now it's impossible to find the yearly summary/linklist posts without scrolling all the way down

[18:43] <dj_goku> timotimo: maybe tag by year? add the ability to filter by year?

[18:45] <timotimo> https://perl6advent.wordpress.com/?s=Table%20of%20Contents <- btw.

[18:45] *** ZoffixW joined
[18:45] <dj_goku> ahh

[18:45] <ZoffixW> m: 0/0 or "kabloom"; say "No crisis"

[18:45] <camelia> rakudo-moar f65074: OUTPUT«No crisis␤»

[18:45] <ZoffixW> :)

[18:45] <timotimo> but nothing links to that - except for the perl6weekly i'm writing right now

[18:45] <timotimo> ZoffixW: did you select the wordpress theme for the advent calendar?

[18:46] <grondilu> m: say 0/0

[18:46] <camelia> rakudo-moar f65074: OUTPUT«Attempt to divide by zero using div␤  in block <unit> at /tmp/0iij_1c0Iv:1␤␤Actually thrown at:␤  in block <unit> at /tmp/0iij_1c0Iv:1␤␤»

[18:46] <ZoffixW> timotimo, yeah

[18:46] <ZoffixW> m: 0/0; say "No crisis"

[18:46] <camelia> rakudo-moar f65074: OUTPUT«No crisis␤»

[18:46] <grondilu> it ignores it in sink context or something?

[18:46] <flussence> it returns a failure

[18:47] <ZoffixW> Yeah

[18:47] <timotimo> can we get either a link to the search for "Table of Contents" somewhere near the top or side, or ... something else?

[18:47] *** yqt joined
[18:47] <timotimo> actually

[18:47] <timotimo> 0/0 gives you a Rat object

[18:47] <timotimo> m: say (0/0).WHAT

[18:47] <camelia> rakudo-moar f65074: OUTPUT«(Rat)␤»

[18:47] <timotimo> m: say (0/0).nude

[18:47] <camelia> rakudo-moar f65074: OUTPUT«(0 0)␤»

[18:47] <timotimo> it only explodes when you try to do something else with it

[18:47] <flussence> oh, I guess .Str gives you the failure then

[18:47] <timotimo> m: 0e0/0e0; say "no problem"

[18:47] <camelia> rakudo-moar f65074: OUTPUT«Attempt to divide by zero using /␤  in block <unit> at /tmp/2OAzWr5mXS:1␤␤Actually thrown at:␤  in block <unit> at /tmp/2OAzWr5mXS:1␤␤»

[18:47] <flussence> m: 0/0 .Str

[18:47] <camelia> rakudo-moar f65074: ( no output )

[18:47] <flussence> m: 0/0 .Str.WHAT

[18:47] <camelia> rakudo-moar f65074: OUTPUT«===SORRY!===␤Method call must either supply a name or have a child node that evaluates to the name␤»

[18:47] <timotimo> ^- Num does it immediately

[18:48] <flussence> m: say (0/0).Str.WHAT

[18:48] <camelia> rakudo-moar f65074: OUTPUT«Attempt to divide by zero using div␤  in block <unit> at /tmp/hIPcOGf5Of:1␤␤Actually thrown at:␤  in block <unit> at /tmp/hIPcOGf5Of:1␤␤»

[18:48] <timotimo> wow, how did ... %)

[18:48] <grondilu> m: (0/0)*0

[18:48] <camelia> rakudo-moar f65074: OUTPUT«WARNINGS:␤Useless use of "*" in expression "(0/0)*0" in sink context (line 1)␤»

[18:48] <grondilu> m: say (0/0)*0

[18:48] <camelia> rakudo-moar f65074: OUTPUT«Attempt to divide by zero using div␤  in block <unit> at /tmp/6vxwzlXXWg:1␤␤Actually thrown at:␤  in block <unit> at /tmp/6vxwzlXXWg:1␤␤»

[18:48] <timotimo> ZoffixW: also, for some reason, the wordpress extra bar that logged-in people get at the top ... it lags behind when scrolling

[18:49] <flussence> yay presentational javascript!

[18:49] <timotimo> very yay indeed

[18:50] <flussence> there are many reasons to use js for positioning, emulating position:fixed is not one

[18:50] <ZoffixW> It is if you're an ancient code base that powers 30% of the web :)

[18:51] <ZoffixW> timotimo, TBH I don't see any way to mangle anything in there. There's an option to use a static home page (so no recent posts) or to choose another theme.

[18:51] *** koo8 joined
[18:51] <timotimo> ugh.

[18:52] <ZoffixW> Unless I simply don't know how to use Wordpress :)

[18:52] <timotimo> wordpress has things like "aside" or something that show up differently in the blog. maybe something like that could work? pinned to the top, linking to all table of contents posts?

[18:53] <ZoffixW> I'll take a look later today, when I'm on my fast box at home.

[18:54] <timotimo> cool. TYVM

[18:54] *** zengargoylew joined
[18:56] <dalek> rakudo/nom: fb957f8 | grondilu++ | src/core/native_array.pm:

[18:56] <dalek> rakudo/nom: improve permutations

[18:56] <dalek> rakudo/nom: 

[18:56] <dalek> rakudo/nom: avoid using C<first> for better performance

[18:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb957f815d

[18:56] <dalek> rakudo/nom: d7dfa68 | grondilu++ | src/core/native_array.pm:

[18:56] <dalek> rakudo/nom: Update native_array.pm

[18:56] <dalek> rakudo/nom: 

[18:56] <dalek> rakudo/nom: use native integers in permutations

[18:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7dfa6898b

[18:56] <dalek> rakudo/nom: 6af4098 | lizmat++ | src/core/native_array.pm:

[18:56] <dalek> rakudo/nom: Merge pull request #621 from grondilu/patch-3

[18:56] <dalek> rakudo/nom: 

[18:56] <dalek> rakudo/nom: improve permutations

[18:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6af40981c0

[18:58] <ZoffixW> .tell MadcapJack Found a really annoying breakage of the syntax highlighter: apostrophes in regexes: say so "You're wrong" ~~ /'You\'re wrong'/;   That breaks all the following code after that line :(

[18:58] <yoleaux> ZoffixW: I'll pass your message to MadcapJack.

[18:58] <timotimo> grondilu: i think you might be able to get a tiny bit more performance out of "permutations" by replacing  "if !@!a { return (@!a = ^$!n).List }"  with  "return (@!a = ^$!n).List if !@!a"  (because we avoid an inner scope that would likely get a closure taken)

[18:58] *** patrickz joined
[19:00] <timotimo> grondilu: also i have no clue if our .= code-gen is any good

[19:01] *** virtualsue left
[19:01] *** virtualsue joined
[19:02] *** Peter_R joined
[19:02] <patrickz> Hey, rakudo master on moarvm fails to install Inline::Perl5 on linux here. Tests fail with p5helper.sh not found. Is that a known error?

[19:02] <dalek> ecosystem: cf45f31 | (Zoffix Znet)++ | META.list:

[19:02] <dalek> ecosystem: Add WWW::You'reDoingItWrong to eco

[19:02] <dalek> ecosystem: 

[19:02] <dalek> ecosystem: Why say someone is doing it wrong when you can SHOW it?: https://github.com/zoffixznet/perl6-WWW-You-reDoingItWrong

[19:02] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/cf45f31e7c

[19:02] <ZoffixW> :)

[19:03] * ZoffixW is pleased with an obvious troll of apostrophes in identifiers for the naysayers :P

[19:03] *** rurban left
[19:03] <Skarsnik> what

[19:03] *** llfourn joined
[19:03] <timotimo> hm. what name does cygx want to appear with in the weekly i wonder?

[19:04] <ZoffixW> Skarsnik, there was a discussion a while back that apostrophes should not be allowed in identifiers and there's no use for them :)

[19:04] <dalek> rakudo/nom: 2d3bb09 | lizmat++ | docs/announce/2015.12.md:

[19:04] <dalek> rakudo/nom: dolmen === Olivier Mengué

[19:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2d3bb09b05

[19:04] <Skarsnik> Oh yeah lol

[19:04] <AlexDaniel> m: my @a = [ [1800, 20], [2800, 40] ]; for @a -> [ $foo, $bar ] { say “$foo ↔ $bar” } # didn't expect [ ] thingy to work, nice!

[19:04] <camelia> rakudo-moar f65074: OUTPUT«1800 ↔ 20␤2800 ↔ 40␤»

[19:05] *** domm joined
[19:05] <dalek> rakudo/nom: 7e0a4fc | lizmat++ | docs/announce/2015.12.md:

[19:05] <dalek> rakudo/nom: Simplify daxim

[19:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e0a4fc73f

[19:06] <dalek> rakudo/nom: ce64674 | lizmat++ | docs/announce/2015.12.md:

[19:06] <dalek> rakudo/nom: Add nicks for lizmat and woolfy

[19:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ce64674a27

[19:07] *** llfourn left
[19:11] <timotimo> ShimmerFairy: do you want me to put your full name into the weekly where i link to your advent post?

[19:12] <psch> m: say :(*%).params.classify(*.named && *.slurpy){True}[0].type # this doesn't fit the expectation of src/core/Signature.pm:66, i think...

[19:12] <camelia> rakudo-moar ce6467: OUTPUT«(Associative)␤»

[19:13] <psch> m: say so :(*%).params[0] ~~ { !(.type =:= Mu) }

[19:13] <camelia> rakudo-moar ce6467: OUTPUT«True␤»

[19:13] <psch> m: :(*@).params[0].type.say

[19:13] <camelia> rakudo-moar ce6467: OUTPUT«(Positional)␤»

[19:14] <psch> hm, a named slurpy has to be (a sub class of) Associative, doesn't it?

[19:15] * psch .oO( or is that "hasn't it"..? )

[19:15] <psch> m: say Associative.HOW.^name

[19:15] <camelia> rakudo-moar ce6467: OUTPUT«Perl6::Metamodel::ParametricRoleGroupHOW␤»

[19:16] <ZoffixW> timotimo, BTW, my complaint with the last Weekly was that real names without nicks were used. So all the bunch of seemingly random people were named, even though I see them all the time here under nicks

[19:16] <awwaiid> why does panda on nom hate me?

[19:16] <awwaiid> (retorical)

[19:16] <ZoffixW> awwaiid, try feeding it eucalyptus

[19:16] <awwaiid> bamboo

[19:17] <lizmat> ZoffixW: I thought I *did* add the nicks in the last P6W ?

[19:17] <awwaiid> I don't want to kill my panda!

[19:17] <timotimo> ZoffixW: lizmat prepared a bit for the weekly and it had both full names and nicknames in parens

[19:17] <dha> awwaiid - you are insufficiently covered in bamboo

[19:18] <timotimo> oh there liz is :)

[19:18] <Skarsnik> moar hate everything and make panda angry x)

[19:18] <lizmat> ah, yes, for this week's...

[19:18] <lizmat> hehe

[19:18] * lizmat was a bit timewarped

[19:18] <ZoffixW> :P

[19:19] <dha> If Perl 6 doesn't give you a TARDIS, what good is it?

[19:19] <timotimo> https://github.com/masak/tardis

[19:19] <ZoffixW> :o

[19:19] <dha> :-p

[19:20] <DrForr> o/ Drinking / Those moments when o/

[19:21] <dha> I am slightly annoyed that I'm going to be in London in a period where Doctor Who is not airing.

[19:21] <El_Che> dha: use your tardis to go to the right time

[19:21] <awwaiid> I've implemented some fork() based timetravel debuggers as well, which can serve as an alternate theory of time travel to build upon

[19:21] <timotimo> gfldex, ZoffixW, are you all right with appearing with your realnames in the weekly?

[19:21] <awwaiid> (haven't ported to perl6 yet)

[19:21] <DrForr> El_Che: But that trick *never* works!

[19:22] <psch> it might work if he releases the hand brake..?

[19:22] <ZoffixW> timotimo, I'm fine :)

[19:22] <dha> I don't think time travel debuggers actually have traveling in time and space implemented as yet.

[19:22] <dha> We have names??

[19:22] <Skarsnik> timotimo, you did not mention http://skarsnik-stuff.blogspot.fr/2015/11/scrapping-web-with-perl6-so-you-want-to.html (if it's interesting enought that it)

[19:22] <timotimo> move all variables half a meter to the right

[19:23] <timotimo> i did not? but i didn't rite last weeks' post!

[19:23] <timotimo> i'll include it this time, though!

[19:23] *** espadrine left
[19:23] <DrForr> timotimo: You forgot. Variables don't, constants aren't and functions won't.

[19:24] *** uruwi joined
[19:24] <dha> "scrapping"?

[19:24] *** lolisa joined
[19:24] <DrForr> I'd like to do that ... pretty much every working day.

[19:24] <dha> No offense, but shouldn't that be scraping?

[19:25] <Skarsnik> maybe?

[19:25] <El_Che> I had to secretly propose something small so that the kids could buy for xmas. I suggested a miniature weeping angel and dalek :)

[19:25] <Skarsnik> https://fr.wikipedia.org/wiki/Web_scraping ah yes, thx

[19:26] <ZoffixW> Skarsnik, "scraping" is like scraping a barrel. "scrapping" is like... recycling :)

[19:26] * ZoffixW is reminded of Fallout 4

[19:26] <flussence> .oO( the dalek activates in the middle of the night and yells out commit ids )

[19:26] <Skarsnik> the url will stay the same probably :(

[19:26] <timotimo> i found the post extra amusing when it still said "scrapping" everywhere

[19:27] *** micxjo left
[19:27] <ZoffixW> :P

[19:27] <Skarsnik> I just edit it x)

[19:29] <dha> El_Che -  I'm pretty sure I've seen christmas tree ornament versions of both.

[19:29] <El_Che> dha: I want them for the office. So I can filter people dropping by :)

[19:29] <ZoffixW> "weeping angel"? That's a helluva ornament.. very festive :S

[19:30] <El_Che> it's not for a tree :)

[19:30] <ZoffixW> Ah

[19:30] <ZoffixW> Hah :D

[19:30] <DrForr> They have those in the new LEGO release, I think.

[19:30] <El_Che> my kids got me a bunch of the simpsons one :)

[19:31] <DrForr> Which I need to see if they have down at Forbidden Planet when I get back.

[19:31] <El_Che> s

[19:31] <dha> Yeah, I'm sure you can find figures for your desk. Certainly Daleks. Those come in all kinds of sizes. Some even talk.

[19:31] *** tipdbmp joined
[19:32] <El_Che> does perl6 has a similiar shortcut like perl5's moose for an attribute: init_arg => undef? (it made de argument no settable by new, but it generates a getter)

[19:32] <El_Che> dha: no, I alread send the amazon links to my wife :)

[19:33] <flussence> El_Che: «has $.attr is readonly»?

[19:33] <timotimo> flussence: that'll still let you initialize it, though

[19:33] <El_Che> (is readonly the default?)

[19:33] <Skarsnik> Yes

[19:34] <Skarsnik> for $.foo

[19:34] *** lucasb left
[19:34] <El_Che> I can of course use a $! var and create a getter myself

[19:34] <El_Che> just wondering is there was an not-yet-documented-shortcut :)

[19:34] <El_Che> weeping angel: http://www.amazon.de/Doctor-Who-Light-Up-Weeping-Illustrated/dp/076245461X/ref=sr_1_8?ie=UTF8&qid=1449516780&sr=8-8&keywords=weeping+angel

[19:34] <flussence> .oO( maybe we should copy IO.open's mode flags wholesale for attrs )

[19:34] <timotimo> should be possible to write such a thing as a module

[19:35] <El_Che> dalek: http://www.amazon.de/gp/product/0762449314?psc=1&redirect=true&ref_=od_aui_detailpages00

[19:35] <El_Che> timotimo: the getter will not be a lot longer than the import of the module

[19:36] <timotimo> yeah, but if you have more than one attribute of that sort ... :)

[19:36] <El_Che> I liked that feature about Moose, hence the question

[19:36] <dj_goku> timotimo: RabidGravy so my confusion about Promises earlier. Would updating the doc/Language/concurrency.pod be worth stating to use $p.cause to get the cause of the failure vs $p.result which will throw an exception?

[19:36] <Skarsnik> m: class A { has $.foo; method foo() {$!a = 42}} class B { has A $.a }; my B $f = B.new; $f.a.foo();

[19:36] <camelia> rakudo-moar ce6467: OUTPUT«5===SORRY!5=== Error while compiling /tmp/DlScwSX5KK␤Attribute $!a not declared in class A␤at /tmp/DlScwSX5KK:1␤------> 3 A { has $.foo; method foo() {$!a = 42}}7⏏5 class B { has A $.a }; my B $f = B.new;␤    expecting any of:␤        h…»

[19:36] <Skarsnik> m: class A { has $.foo; method foo() {$!foo = 42}} class B { has A $.a }; my B $f = B.new; $f.a.foo();

[19:36] <camelia> rakudo-moar ce6467: OUTPUT«5===SORRY!5=== Error while compiling /tmp/50SwVrqOIm␤Strange text after block (missing semicolon or comma?)␤at /tmp/50SwVrqOIm:1␤------> 3 { has $.foo; method foo() {$!foo = 42}}7⏏5 class B { has A $.a }; my B $f = B.new;␤    expecting an…»

[19:36] <timotimo> dj_goku: um, i don't remember talking to you about that?

[19:36] <Skarsnik> m: class A { has $.foo; method foo() {$!foo = 42}}; class B { has A $.a }; my B $f = B.new; $f.a.foo();

[19:36] <camelia> rakudo-moar ce6467: OUTPUT«Cannot look up attributes in a type object␤  in method foo at /tmp/SfpnP3RMfx:1␤  in block <unit> at /tmp/SfpnP3RMfx:1␤␤»

[19:37] <Skarsnik> oups

[19:37] <Skarsnik> m: class A { has $.f; method foo() {$!f = 42}}; class B { has A $.a }; my B $f = B.new; $f.a.foo();

[19:37] <camelia> rakudo-moar ce6467: OUTPUT«Cannot look up attributes in a type object␤  in method foo at /tmp/RxtYAw578T:1␤  in block <unit> at /tmp/RxtYAw578T:1␤␤»

[19:37] <dj_goku> timotimo: oh I guess I asked [Coke] 

[19:37] <timotimo> Skarsnik: the "scrapping" typo is still alive in the URL <3

[19:37] <Skarsnik> timotimo, I don't know if blogger will let me change it

[19:38] <flussence> Cool URLs Don't Change™

[19:38] <timotimo> dj_goku: but that text already tells you about try $promise.result and say $promise.cause

[19:38] <Skarsnik> Can't change it :(

[19:38] <ZoffixW> Just leave it :)

[19:39] <timotimo> though ... huh

[19:39] <timotimo> why is the comment mentioning the output where say $promise.cause is?

[19:39] *** daniel90 joined
[19:41] *** jkva joined
[19:44] <daniel90> Why does "my int @grid[10,10];" work but "my Int @grid[10,10];" does not? The error message is "Method 'gist' not found for invocant of class 'NQPMu'"

[19:45] <Skarsnik> what?

[19:45] <jnthn> m: my Int @grid[10,10];

[19:45] <camelia> rakudo-moar ce6467: ( no output )

[19:45] <jnthn> m: my Int @grid[10,10]; say @grid

[19:45] <camelia> rakudo-moar ce6467: OUTPUT«Method 'gist' not found for invocant of class 'NQPMu'␤  in block <unit> at /tmp/XttDCgyQNM:1␤␤»

[19:45] <jnthn> m: my Int @grid[10,10]; say @grid.WHAT

[19:45] <camelia> rakudo-moar ce6467: OUTPUT«(Array)␤»

[19:45] <jnthn> m: my Int @grid[10;10]; say @grid.WHAT

[19:45] <camelia> rakudo-moar ce6467: OUTPUT«(Array)␤»

[19:45] <jnthn> m: my Int @grid[10;10]; say @grid

[19:45] <camelia> rakudo-moar ce6467: OUTPUT«Method 'gist' not found for invocant of class 'NQPMu'␤  in block <unit> at /tmp/Fv61lgOwqF:1␤␤»

[19:45] <jnthn> wtf

[19:45] <jnthn> I have no ide

[19:46] <jnthn> *idea

[19:46] <El_Che> (I wanted to yell: netbeans!) :)

[19:46] *** lolisa left
[19:47] *** sno left
[19:48] <timotimo> m: my Int @grid[10;10]; say @grid.shape

[19:48] <camelia> rakudo-moar ce6467: OUTPUT«(10 10)␤»

[19:48] <timotimo> m: my Int @grid[10;10]; say @grid.Str

[19:48] <camelia> rakudo-moar ce6467: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/CY_LU1RSBr:1␤␤»

[19:49] <timotimo> m: my Int @grid[2;2] = (1, 2), (5, 6); say @grid.Str

[19:49] <camelia> rakudo-moar ce6467: OUTPUT«1 2 5 6␤»

[19:49] <timotimo> m: my Int @grid[2;2] = (1, 2), (5, 6); say @grid

[19:49] <camelia> rakudo-moar ce6467: OUTPUT«[[1 2] [5 6]]␤»

[19:49] <timotimo> so if nothing gets assigned, things go boom?

[19:49] <ZoffixW> m: use MONKEY-TYPING; augment class Mu { method WTF { self.gist } }; say Mu.WTF

[19:49] <camelia> rakudo-moar ce6467: OUTPUT«(Mu)␤»

[19:49] <ZoffixW> Skarsnik, ^

[19:49] <ZoffixW> Skarsnik, though that doesn't make it available on everything :(

[19:49] <timotimo> yeah

[19:50] <ZoffixW> Skarsnik, how did you manage to have Test::META in prereqs and yet have a failing META? :D

[19:51] <ZoffixW> m: say "6" before v6.c

[19:51] <camelia> rakudo-moar ce6467: OUTPUT«True␤»

[19:51] <ZoffixW> m: say v6 before v6.c

[19:51] <camelia> rakudo-moar ce6467: OUTPUT«False␤»

[19:51] <ZoffixW> hm. I wonder what values are acceptable for "perl" key in META. Seem a lot of folks are putting "v6" or just "6"

[19:52] <flussence> m: say Version.new("6") eqv Version.new("v6")

[19:52] <camelia> rakudo-moar ce6467: OUTPUT«False␤»

[19:53] <ZoffixW> m: say Version.new("6") before Version.new("v6")

[19:53] <camelia> rakudo-moar ce6467: OUTPUT«False␤»

[19:54] <ZoffixW> Skarsnik, PR sent: https://github.com/Skarsnik/acme-wtf/pull/1

[19:54] <timotimo> m: say Version.new("6"); say Version.new("v6")

[19:54] <camelia> rakudo-moar ce6467: OUTPUT«v6␤vv.6␤»

[19:54] <timotimo> ^-

[20:00] <hoelzro> is there an advantage to using the SHA-1 of a name for the compunit files? it kind of makes it hard to figure out which files belong to which distribution

[20:00] <dj_goku> timotimo: I see a couple examples down yes it does try $promise.results and then say $promise.cause. I was referring to the first example though. I should have read the comment that it was going to die/throw an exception.

[20:00] <ZoffixW> This is funny: ecosystem's META.list has 474 lines. modules.perl6.org build log says it found 473 dists. Two are errored out and the final site says we have 470 dists in the ecosystem :(

[20:00] <ZoffixW> "There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors."

[20:01] <flussence> http://modules.perl6.org/#q=foo

[20:01] <ZoffixW> Well, 474 <-> 473 is just my Wrong module not built yet, but where is that 1 missing dist going off to *squints*

[20:01] <Juerd> ZoffixW: The hardest thing for me as a programmer continues to be estimating work time.

[20:01] <dalek> rakudo/nom: 328e95e | TimToady++ | docs/announce/2015.12.md:

[20:01] <dalek> rakudo/nom: unicodify name

[20:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/328e95e216

[20:02] <Juerd> ZoffixW: Something that feels like it should take a few days is sometimes completely done in an hour, and some things that really shouldn't take more than 15 minutes can easily take a week.

[20:02] <ZoffixW> Yeah, I hear ya

[20:03] <timotimo> definitely

[20:03] <flussence> hoelzro: it's a mixture of not having to deal with IO::Spec limitations of various OSes and needing a unique ID keyed on VM+source so we don't get those old "wrong version of serialization blah" errors

[20:03] <[Coke]> Juerd: I've been getting estimates wrong for 20 years!

[20:03] <Skarsnik> thx ZoffixW++

[20:04] <psch> uhm, help

[20:04] <Juerd> [Coke]: I've stopped estimating most projects. Clients hate that, but I feel so much better. And everything gets done faster because I'm not wasting time on estimations.

[20:04] <psch> m: say :(*%).params.classify({.named}){True}.SetHash.keys[0] ~~ { !( .type.does(Associative) ) } # junction-less

[20:04] <camelia> rakudo-moar ce6467: OUTPUT«False␤»

[20:04] <psch> m: say any(:(*%).params.classify({.named}){True}.SetHash.keys[0]) ~~ { !( .type.does(Associative) )} # lhs junctioned

[20:04] <camelia> rakudo-moar ce6467: OUTPUT«True␤»

[20:04] <psch> there clearly is only one element, right..?

[20:04] <timotimo> i thought i'd take quite a long time to get the basic line-coverage reporting thing in moar done and then a bit of extra time to make it work well .. turned out the first working version was done very quickly

[20:04] <ZoffixW> flussence, thanks, I only now realized what your link meant. Still dists should be indexed by name + auth + url

[20:05] * ZoffixW suspects some part just makes it all about name + auth

[20:05] <hoelzro> flussence: that makes sense; I was just wondering if something two-way (so I could tell what dist I'm looking at) would be better

[20:05] <hoelzro> but maybe it's just the lack of tooling for dealing with compunit repos

[20:05] <ZoffixW> Oh wait.

[20:05] <timotimo> psch: i wonder if you get the junction on the RHS of ~~ as the $_

[20:05] <timotimo> m: say any(1, 2) ~~ { $_.WHAT.say }

[20:05] <camelia> rakudo-moar ce6467: OUTPUT«(Junction)␤True␤»

[20:05] <timotimo> psch: there you go. that's your problem

[20:05] <ZoffixW> That should—correctly—be one dist, right? 'cause author is the same and the name are the same

[20:05] <psch> m: my $x = 0; say any($x) ~~ { .defined }; say $x ~~ { .defined }

[20:05] <camelia> rakudo-moar ce6467: OUTPUT«True␤True␤»

[20:05] <ZoffixW> k, mystery solved

[20:06] <Skarsnik> yep definitly need a tool for compiled stuff x)

[20:06] <psch> timotimo: well, not "mine" particularly, but yes, seems junction dispatch to ACCEPTS in that case is wrong...

[20:06] <psch> m: my $x = 0; say any($x) ~~ { .isa(Junction) }; say $x ~~ { .isa(Junction }

[20:06] <camelia> rakudo-moar ce6467: OUTPUT«5===SORRY!5=== Error while compiling /tmp/05graXxRJu␤Unable to parse expression in argument list; couldn't find final ')' ␤at /tmp/05graXxRJu:1␤------> 3(Junction) }; say $x ~~ { .isa(Junction 7⏏5}␤»

[20:06] <psch> m: my $x = 0; say any($x) ~~ { .isa(Junction) }; say $x ~~ { .isa(Junction) }

[20:06] <camelia> rakudo-moar ce6467: OUTPUT«True␤False␤»

[20:06] <timotimo> yeah, we explicitly allow ~~ to check for junctions on the LHS

[20:07] <timotimo> so ~~ dispatches on Mu, not on Any

[20:07] <psch> timotimo: as in every ACCEPTS has to deal with Junction itself?

[20:07] <timotimo> aye

[20:07] <psch> that seems brittle :/

[20:07] <Hotkeys> how terrible of an idea would it be to have ≈ as a pretty unicode alternative to ~~

[20:07] <psch> Hotkeys: i don't think the not-Perl-6 pragmatics for ≈ match what infix:<~~> does particularly well

[20:08] <ZoffixW> .u ≈

[20:08] <yoleaux> U+2248 ALMOST EQUAL TO [Sm] (≈)

[20:08] <Hotkeys> fair enough

[20:08] <timotimo> psch: wait ... this could actually be about { } having $_ as Mu

[20:08] <timotimo> m: ({ $_ }).signature.perl.say

[20:08] <camelia> rakudo-moar ce6467: OUTPUT«:(;; $_? is raw)␤»

[20:09] <timotimo> m: ({ $_.perl.say })(any(1, 2))

[20:09] <camelia> rakudo-moar ce6467: OUTPUT«any(1, 2)␤»

[20:09] <timotimo> m: (-> Any $_ { $_.perl.say })(any(1, 2))

[20:09] <camelia> rakudo-moar ce6467: OUTPUT«1␤2␤»

[20:09] <timotimo> m: any(1, 2, 3) ~~ -> Any $_ { .perl.say }

[20:09] <nadim> can someone help me re-write this unsigtly code http://nopaste.linux-dev.org/?878167, specially with those nifty '>>' that i haven't well understood yet and that I haven't found documentation for either.

[20:09] <camelia> rakudo-moar ce6467: OUTPUT«1␤2␤3␤»

[20:09] <timotimo> psch: there you go. this is your *actual* problem :)

[20:09] <gfldex> timotimo: my realname is very weekly friendly

[20:09] *** davercc joined
[20:10] <psch> timotimo: right, that seems cleaner.  as in, we still have something fundamentally WAT-y with parametricity of an implicit $_ in any block, but at least ACCEPTS is still sensible

[20:10] <Hotkeys> speaking of hyperoperators, does any documentation of them exist on the docs.perl6.org site exist?

[20:10] <nadim> what's the name of the >> operator?

[20:10] <psch> m: say $_.VAR

[20:10] <camelia> rakudo-moar ce6467: OUTPUT«Any␤»

[20:10] <Hotkeys> >> and << are hyperoperators

[20:10] <psch> m: say { $_.VAR }(0)

[20:10] <camelia> rakudo-moar ce6467: OUTPUT«0␤»

[20:11] <moritz> nadim: it's "hyper", and it's a meta operator

[20:11] <timotimo> RabidGravy is Jonathan Stowe, right?

[20:11] *** Peter_R left
[20:11] <RabidGravy> yes

[20:11] *** Sqirrel joined
[20:11] <Hotkeys> nadim: https://perl6advent.wordpress.com/2009/12/06/day-6-going-into-hyperspace/

[20:12] <Hotkeys> pretty old but I think the information is still accurate

[20:12] *** darutoko left
[20:12] <dha> A troll through the doc directory shows almost no information relating to the world "hyper operator"

[20:12] <Hotkeys> at least wrt syntax and usage

[20:12] <dha> bah, autocorrect put in that space.

[20:12] <nadim> Hotkeys: thanks, don't know where it is on doc.P6

[20:13] <Hotkeys> dha: they are technically metaoperators, according to moritz (see above) they're just referred to as 'hyper'

[20:13] <psch> timotimo: { } implicitly getting a signature of Mu $_ is worth an RT, isn't it?

[20:13] <psch> timotimo: 'cause i remember one about $_ in the mainline being Mu and that being wrong...

[20:13] <psch> (well, unless it's already bugged...)

[20:13] <dha> And the two instances that *are* there are not terribly informative.

[20:13] <timotimo> psch: it's designed that way

[20:14] <timotimo> except if you mean {} without any code in it

[20:14] <timotimo> well, has to be {;} in that case

[20:14] <timotimo> otherwise it'd be a hash literal

[20:14] <psch> timotimo: no, i'm talking about a block with one or more statements in it

[20:14] <dha> Hotkeys -  looking just for "hyper" doesn't look like it gives much more of use.

[20:14] <timotimo> you're saying it shouldn't be Mu?

[20:14] <Hotkeys> /o\

[20:15] <Hotkeys> brb

[20:15] <Hotkeys> getting on the bus

[20:15] <psch> timotimo: i think it should be Any, yes

[20:15] <psch> timotimo: to allows Junctions ~~ Block to DWIM

[20:15] <El_Che> related to my question about unsettable attributes (like "init_args => undef" in Moose):

[20:15] <psch> s/Junctions/Junction/

[20:15] <El_Che> m: class Foo { has $!priv = 42 }; Foo.^add_method('priv', my method priv(Foo:) { Foo!priv }); Foo.^comp; my $foo = Foo.new(); $foo.priv

[20:15] <camelia> rakudo-moar 328e95: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wyDHTcuDPP␤Private method call to priv must be fully qualified with the package containing the method␤at /tmp/wyDHTcuDPP:1␤------> 3('priv', my method priv(Foo:) { Foo!priv7⏏5 }); Foo.^comp; my $foo …»

[20:15] <El_Che> so, what would be the MOP syntax for Foo!priv ?

[20:16] <El_Che> (was checking of I would change the behaviour by trait_mod)

[20:16] <El_Che> (not a lot of doc on the subject)

[20:16] <dha> There are a couple of places where it says hyper operators can be used, with an example, but at a glance, I'm not seeing an actual section that explains hyper operators in any detail.

[20:17] <El_Che> m: class Foo { has $!priv = 42 }; Foo.^add_method('priv', my method priv(Foo:) { 'stringthing' }); Foo.^comp; my $foo = Foo.new(); $foo.priv

[20:17] <camelia> rakudo-moar 328e95: OUTPUT«Method 'comp' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in block <unit> at /tmp/M_2kBWWGO5:1␤␤»

[20:17] <timotimo> psch: i can't find where in the design it says that { $_ } should have Mu, but i think it's explicitly wanted

[20:18] <jnthn> El_Che: Think it's add_private_method

[20:19] <El_Che> jnthn: same

[20:19] <El_Che> jnthn: the idea was to add a public method as a getter for a private attribute

[20:20] <psch> timotimo: similarly, i remember an RT ticket that complains about $_ being Mu when it should be Any, which i also can't find right now... :)

[20:20] <timotimo> here's an idea: just fix it in the code, find which spec tests break. that'll show you what exact synopsis requires that :)

[20:20] <ZoffixW> m: my @a = 4, 8, * + 4  ... *; say @a

[20:20] <camelia> rakudo-moar 328e95: OUTPUT«[...]␤»

[20:20] <ZoffixW> m: my @a = 4, 8, *  ... *; say @a

[20:20] <camelia> rakudo-moar 328e95: OUTPUT«[...]␤»

[20:20] <psch> i don't think i want to dig into that.  i'm gonna work-around in Signature.pm for now

[20:21] <ZoffixW> :/

[20:21] <psch> as in, provide the -> Any $_ signature for the block on the smartmatch RHS

[20:21] <jnthn> El_Che: Oh...then you don't want add_private_method at all, you need to get the Attribute meta-object and use get-value on it

[20:21] <Hotkeys> Hello

[20:21] <Hotkeys> Made it to the bus

[20:21] <El_Che> jnthn: thx, I'll give it a try

[20:21] <timotimo> congrats, Hotkeys 

[20:21] <Hotkeys> Thanks

[20:22] <Hotkeys> I got to the stop just as it was arriving

[20:22] <ZoffixW> m: my @a = 4, 8, 12  ... *; say @a

[20:22] <camelia> rakudo-moar 328e95: OUTPUT«[...]␤»

[20:22] <timotimo> m: my @a = 4, 8 ... *; say @a[^10]

[20:22] <camelia> rakudo-moar 328e95: OUTPUT«(4 8 12 16 20 24 28 32 36 40)␤»

[20:22] <timotimo> m: my @a = 4, 8 ... *; say @a.perl

[20:22] <camelia> rakudo-moar 328e95: OUTPUT«Cannot .elems a lazy list␤  in block <unit> at /tmp/jqsVeX_OA5:1␤␤Actually thrown at:␤  in block <unit> at /tmp/jqsVeX_OA5:1␤␤»

[20:22] <timotimo> m: my @a = 4, 8 ... *; say @a.gist

[20:22] <camelia> rakudo-moar 328e95: OUTPUT«[...]␤»

[20:22] <timotimo> ..right

[20:22] <ZoffixW> weird

[20:23] <ZoffixW> k, got it

[20:23] <ZoffixW> m: my @a =  2, 4, 6 ... 12; @a >>/=>> 2; say @a

[20:23] <camelia> rakudo-moar 328e95: OUTPUT«[1 2 3 4 5 6]␤»

[20:23] <ZoffixW> Pretty neat linenoise :)

[20:24] *** labster joined
[20:25] <Hotkeys> Looks nicer when you use the pretty version

[20:25] <psch> ...wait

[20:25] *** espadrine joined
[20:25] <psch> actually, i don't get what that line is supposed to do in the first place?

[20:25] *** sno joined
[20:26] <ZoffixW> m: my @a =  2, 4, 6 ... 12; @a »/=» 2; say @a

[20:26] <camelia> rakudo-moar 328e95: OUTPUT«[1 2 3 4 5 6]␤»

[20:26] <ZoffixW> psch, how about now?

[20:26] <timotimo> psch: look better than ^6, i suppose?

[20:26] <Hotkeys> Does it need to be /=?

[20:26] <ZoffixW> m: my @a =  2, 4, 6 ... 12; @a »/» 2; say @a

[20:26] <camelia> rakudo-moar 328e95: OUTPUT«[2 4 6 8 10 12]␤»

[20:26] <ZoffixW> m: my @a =  2, 4, 6 ... 12; say @a »/» 2;

[20:26] <camelia> rakudo-moar 328e95: OUTPUT«[1 2 3 4 5 6]␤»

[20:26] <psch> ZoffixW, timotimo: uhm, sorry.  i'm talking about src/core/Signature.pm:66 :)

[20:26] <ZoffixW> lol

[20:26] <Hotkeys> Ah

[20:26] <ZoffixW> m: my @a =  2, 4, 6 ... 12; say @a «/» 2;

[20:26] <camelia> rakudo-moar 328e95: OUTPUT«[1 2 3 4 5 6]␤»

[20:27] <Hotkeys> I would've tried it but my phones irc client is bad at copy pastint

[20:27] <timotimo> psch: oh! that's definitely a bug, then

[20:27] <Hotkeys> And yet andchat is still the best option for irc on Android iirc

[20:27] * ZoffixW points Hotkeys to IRC::Client

[20:27] <psch> timotimo: huh?  yes, the bug caused by that line is :(*%) ~~ :(*%) giving False

[20:27] <ZoffixW> May the force be with you

[20:28] <Hotkeys> Do you want me to write a perl 6 app for android

[20:28] <Hotkeys> Is that even possible

[20:28] <ZoffixW> Hotkeys, YES!

[20:28] <psch> timotimo: further it also showed me the Blocks-without-Sig-get-Mu-typed-topic

[20:28] <ZoffixW> Yes, I want you to. Possible? Probably

[20:28] <timotimo> yeah

[20:28] <psch> timotimo: but i think that's not even needed to fix the bug in Signature smartmatch, and line 66 can just be removed

[20:28] <psch> 'cause it doesn't actually do anything useful

[20:28] <Hotkeys> Also I've been making a bot with janky irc stuff for a little while now why did you have to make me aware of this module

[20:29] <psch> as in, we know the RHS has a slurpy named, we're in the conditional for a slurpy named for the LHS, so we can just match

[20:29] <psch> well, except for the case that we don't know the order of nameds..?

[20:29] <Hotkeys> Does IRC::Client support irc v3 stuff?

[20:29] <psch> m: say :(:$a, *%) ~~ (:$b, *%) # probably False, and should be?

[20:29] <camelia> rakudo-moar 328e95: OUTPUT«5===SORRY!5=== Error while compiling /tmp/BXAB8mUrBu␤Variable '$b' is not declared␤at /tmp/BXAB8mUrBu:1␤------> 3say :(:$a, *%) ~~ (:7⏏5$b, *%) # probably False, and should be?␤»

[20:30] <psch> m: say :(:$a, *%) ~~ :(:$b, *%) # probably False, and should be?

[20:30] <camelia> rakudo-moar 328e95: OUTPUT«False␤»

[20:30] <Hotkeys> If not should I make an IRC::Client::v3 module

[20:30] <dalek> roast: 6757126 | usev6++ | S05-substitution/subst.t:

[20:30] <dalek> roast: Fudge for JVM (samemark, ordbaseat NYI)

[20:30] <dalek> roast: review: https://github.com/perl6/roast/commit/6757126cb6

[20:30] <Hotkeys> :p

[20:30] <psch> m: say :(:$a, *%) ~~ :(:$a, *%) # probably False, and shouldn't be!

[20:30] <camelia> rakudo-moar 328e95: OUTPUT«False␤»

[20:30] *** _nadim joined
[20:30] <moritz> iirc we had a bug report about that today

[20:30] *** nadim left
[20:31] <psch> moritz: yeah, i was around then.  i'm just not quite sure how to solve 

[20:31] <psch> it'll probably come to me over the next day or so, i don't feel quite thinky enough anymore anyway... :)

[20:32] <ZoffixW> m: sub infix:<❤> ($a, $b) { "$a ❤ $b" }; say ^6 »❤» 'Perl 6'

[20:32] <camelia> rakudo-moar 328e95: OUTPUT«(0 ❤ Perl 6 1 ❤ Perl 6 2 ❤ Perl 6 3 ❤ Perl 6 4 ❤ Perl 6 5 ❤ Perl 6)␤»

[20:32] <ZoffixW> \o/

[20:32] *** hankache joined
[20:33] <ZoffixW> Hotkeys, ATM it's a barebones socket really :P Stay tuned for January 2016

[20:33] <timotimo> ZoffixW: https://travis-ci.org/zoffixznet/perl6-WWW-Google-Time

[20:34] <Hotkeys> Should I stick with my janky bot irc functions for now then

[20:34] <timotimo> ZoffixW: also, shouldn't that go into the WebService:: namespace?

[20:34] <Skarsnik> funny you say that x)

[20:34] <Hotkeys> My irc bot is currently one file and is in my opinion a mess of spaghetti

[20:35] <ZoffixW> timotimo, but why? http://irclog.perlgeek.de/perl6/2015-12-07#i_11671157

[20:35] <Hotkeys> But that's okay

[20:35] <Hotkeys> For my eyes only right now

[20:35] <Hotkeys> One day I will dejankify it

[20:35] <ZoffixW> timotimo, and travis hasn't yet indexed it (same goes for WWW::You'reDoingItWrong)

[20:35] <timotimo> OK

[20:35] <timotimo> i didn't realize it's that new

[20:36] <ZoffixW> m: say 'WebService'.chars - 'WWW'.chars

[20:36] <camelia> rakudo-moar 328e95: OUTPUT«7␤»

[20:36] *** geraud joined
[20:37] <awwaiid> How do you pass a 3rd param to an infix operator, like =~= tolerance?

[20:37] <timotimo> with =~= we have a dynamic variable that it looks up

[20:37] <timotimo> otherwise you can append an adverb

[20:38] <awwaiid> adverb was my suspect, tell me more

[20:39] <awwaiid> (how to do an adverb on =~=)

[20:39] <timotimo> m: sub infix:<^-^>($a, $b, :$carefully) { $a + $b + ($carefully ?? 10 !! 0) }; say 10 ^-^ 5 :carefully; say 10 ^-^ 5

[20:39] <camelia> rakudo-moar 328e95: OUTPUT«25␤15␤»

[20:39] <ugexe> i vote for InternetSuperHighway::Google::Time

[20:39] <Hotkeys> I'm disappointed my keyboard on Android doesn't have the Unicode =~=

[20:39] <psch> infix:<=~=> doesn't take an adverb, it uses $*SIGNIFICANCE (iirc)

[20:40] <timotimo> m: say &infix:<=~=>.candidates>>.signature

[20:40] <camelia> rakudo-moar 328e95: OUTPUT«((|c is raw))␤»

[20:40] <timotimo> can't tell from this, but yeah, i think it only accepts the dynamic variable

[20:40] <ZoffixW> I was kinda eyeing InternetSuperHighwayOfInformation::GoogleTheInformationGiant::TimeLookupInVariousLocations

[20:40] <awwaiid> m: say 0.1e0 + 0.2e0 =~= 0.3e0 :tolerance(1e-16)

[20:40] <camelia> rakudo-moar 328e95: OUTPUT«5===SORRY!5=== Error while compiling /tmp/kTyzwPGDoQ␤You can't adverb &infix:<=~=>␤at /tmp/kTyzwPGDoQ:1␤------> 3.1e0 + 0.2e0 =~= 0.3e0 :tolerance(1e-16)7⏏5<EOL>␤»

[20:40] <Hotkeys> I support this idea ZoffixW 

[20:40] <timotimo> not bad

[20:41] <awwaiid> well looking at the code ≅ does

[20:41] <Hotkeys> But ZoffixW keep in mind the internet is less a highway and more a series of tubes

[20:41] *** abaugher_ left
[20:41] <ZoffixW> ehehe

[20:41] <awwaiid> m: say &infix:<≅>.candidates>>.signature

[20:41] <camelia> rakudo-moar 328e95: OUTPUT«(($?) (\a, \b, :$tolerance = { ... }) (Complex:D \a, Complex:D \b --> Bool) (Complex:D \a, Real \b --> Bool) (Real \a, Complex:D \b --> Bool))␤»

[20:41] <awwaiid> m: say 0.1e0 + 0.2e0 ≅ 0.3e0 :tolerance(1e-16)

[20:41] <camelia> rakudo-moar 328e95: OUTPUT«5===SORRY!5=== Error while compiling /tmp/z92dB0tqcd␤You can't adverb &infix:<≅>␤at /tmp/z92dB0tqcd:1␤------> 3 0.1e0 + 0.2e0 ≅ 0.3e0 :tolerance(1e-16)7⏏5<EOL>␤»

[20:41] <psch> ah, TOLERANCE it is

[20:41] <psch> well, $*TOLERANCE

[20:42] <psch> m: say 1e-10 =~= 1e-9; my $*TOLERANCE = 5; say 1e-10 =~= 1e-9 # somewhat..? vOv

[20:42] <camelia> rakudo-moar 328e95: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/lzYHBJbxmU:1␤False␤True␤»

[20:42] *** abaugher_ joined
[20:42] <psch> not sure what the uninit warning does there...

[20:43] <awwaiid> I mean ... ≅ signature has :$tolerance...

[20:43] <psch> m: say infix:<=~=>(1e-10, 1e-9, :tolerance(1))

[20:43] <camelia> rakudo-moar 328e95: OUTPUT«True␤»

[20:44] <psch> m: sub infix:<foo>($, $, :$a) { $a ?? "yup" !! "nup" }; say 1 foo 2 :a

[20:44] <camelia> rakudo-moar 328e95: OUTPUT«yup␤»

[20:44] <psch> well, i'm off to bed o/

[20:44] <Hotkeys> Nighty night

[20:45] <Hotkeys> Don't let the perl bugs bite

[20:45] <Hotkeys> (I assume the major contributors here sleep in the codebase)

[20:45] <ZoffixW> \o

[20:45] <Hotkeys> I need to contribute more

[20:46] <Hotkeys> My only contribution is a single line removal in nqp

[20:46] <ZoffixW> Hotkeys, go wild :) https://rt.perl.org/Search/Results.html?Query=Queue%20%3D%20%27perl6%27%20AND%20%28Status%20%3D%20%27new%27%20OR%20Status%20%3D%20%27open%27%20OR%20Status%20%3D%20%27stalled%27%29

[20:46] <Hotkeys> Oh nooooo

[20:46] <Juerd> Hotkeys: That's still more than > 99,9999% of all people ever did for Perl 6 :)

[20:47] <timotimo> why doesn't Acme::WTF appear in the ecosystem site?

[20:47] <Hotkeys> ZoffixW: are you trying to xss me because the site thinks you are

[20:47] <timotimo> hahaha

[20:47] <Skarsnik> Meta was wrong?

[20:48] <timotimo> yeah, rt.perl.org thinks supplying search parameters for you is a very dangerous thing

[20:48] <Skarsnik> not sure why

[20:48] <timotimo> if you don't fix it soon, it won't appear in the weekly!

[20:48] <ZoffixW> Stupid RT

[20:48] <dalek> roast: bc4b127 | usev6++ | / (3 files):

[20:48] <dalek> roast: Some more fudging for JVM

[20:48] <dalek> roast: review: https://github.com/perl6/roast/commit/bc4b127c42

[20:48] <Skarsnik> It's fixed x)

[20:48] <ZoffixW> timotimo, it was already fixed! :) It will appear on next modules.perl6.org rebuild

[20:48] <timotimo> oh, ok

[20:48] <timotimo> when is that?

[20:48] * ZoffixW looks

[20:49] <timotimo> there it is

[20:49] <ZoffixW> Aha! :)

[20:50] <timotimo> Skarsnik, ZoffixW, you'll appear as "Skarsnik" and "Zoffix" in the post, unless you tell me you want your realname there, too

[20:50] <Skarsnik> I don't mind if you use my real name

[20:50] <ZoffixW> timotimo, "Zoffix Znet"

[20:50] <El_Che> jnthn: no get-value or similiar (with ^methods(:all) or something from here: doc.perl6.org/type/Metamodel::ClassHOW). Adding methods works, but I am not every to retrive the value from a private attribute in the MOP: Private method call to priv must be fully qualified with the package containing the method

[20:51] <El_Che> I'll try tomorrow. Will do the dishes now :)

[20:51] *** ZoffixW left
[20:51] <El_Che> thx everyone for the help

[20:55] *** hudo joined
[20:56] <awwaiid> so... psch just demonstrated that it _should_ work but doesn't?

[20:57] *** Sqirrel left
[20:59] <Hotkeys> m: say 2³²; say ²³²;

[20:59] <camelia> rakudo-moar 328e95: OUTPUT«4294967296␤4294967296␤»

[20:59] <Hotkeys> That seems like it would be easy enough to fix

[21:00] <Hotkeys> Inb4 not at all easy to fix

[21:00] <Hotkeys> m: say 42 + ²

[21:00] <camelia> rakudo-moar 328e95: OUTPUT«44␤»

[21:01] <Hotkeys> Just to confirm superscripts on their own probably shouldn't be treated as regular numbers right?

[21:01] <Juerd> On their own they're pretty weird

[21:02] <Juerd> m: ².WHAT

[21:02] <camelia> rakudo-moar 328e95: ( no output )

[21:02] <Juerd> m: ².WHAT.say

[21:02] <camelia> rakudo-moar 328e95: OUTPUT«(Int)␤»

[21:02] <Hotkeys> I'll take a look-see when I get home

[21:02] <dha> How would you treat them other than as regular numbers? Aren't they just numbers being used in a particular way?

[21:03] *** hankache left
[21:03] <Hotkeys> m: say ³²; # just kinda weird imo

[21:03] <camelia> rakudo-moar 328e95: OUTPUT«9␤»

[21:03] <Hotkeys> Since we also have them used for exponentiation

[21:04] *** leont joined
[21:04] <dha> Hrm. Ok, I can certainly see that in that case, superscript as exponentiation is not applied consistently.

[21:04] *** pwd_ left
[21:05] <dha> Which generates two different responses for me. 1) "huh. weird." 2) "don't do that"

[21:05] <Hotkeys> Don't do what?

[21:05] <diakopter> well superscript shouldn't mean exponentation if the base is also superscript

[21:06] <timotimo> the rule that parses that should actually give you 32 for ³² i think

[21:06] <Juerd> I'd say that if ³ == 3, then ³² == 32 makes sense.

[21:06] <Juerd> But I'm not sure that ³ == 3 is sane

[21:06] <timotimo> but it seems like fater the ³ it's satisfied that it has a number and then it makes it an exponentiation

[21:07] <lizmat> feels to me a lone ³ should be a compile time error

[21:07] <vendethiel> agreed with lizmat :)

[21:07] <Hotkeys> I agree too

[21:07] <dalek> roast: 484803b | usev6++ | S (2 files):

[21:07] <dalek> roast: Unfudge two passing tests for JVM

[21:07] <dalek> roast: review: https://github.com/perl6/roast/commit/484803b24b

[21:08] <dha> Hotkeys -  I guess what I'm thinking is don't use a number in superscript if you don't want some kind of special behavior for it. Or maybe I think something else. I'm not sure I know anymore.

[21:09] <Hotkeys> I agree with lizmat's idea

[21:09] <lizmat> at https://news.ycombinator.com/item?id=10690499 someone is say that "say "नि".codes" gives 3

[21:09] <lizmat> m: say "नि".codes

[21:09] <camelia> rakudo-moar 328e95: OUTPUT«2␤»

[21:09] <lizmat> could someone mention that they were probably using an outdated rakudo for the 3 answer ?

[21:10] <dha> Perhaps I am unaware of something. Is there some behavior superscripting confers on a number other than exponentiation?

[21:10] *** Skarsnik left
[21:10] <timotimo> nah

[21:10] <dha> If not, I'd say using a superscripted number without a non-superscripted number for it to act upon should be an error.

[21:11] <timotimo> m: say 2²3

[21:11] <dha> YMMV, of course.

[21:11] <camelia> rakudo-moar 328e95: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_XqgVnClhK␤Two terms in a row␤at /tmp/_XqgVnClhK:1␤------> 3say 2²7⏏053␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement…»

[21:12] <jnthn> The ligatures comment in that post is interesting, in so far as something that worked at codepoint level will also say that a ligature is one codepoint...

[21:12] <Hotkeys> lizmat: got it

[21:12] <AlexDaniel> m: say 6.perl

[21:12] <camelia> rakudo-moar 328e95: OUTPUT«6␤»

[21:12] <Juerd> m: Ⅳ.say

[21:12] <camelia> rakudo-moar 328e95: OUTPUT«4␤»

[21:13] <Juerd> dha: I think the full blown unicode digit support is at work here :)

[21:13] <jdv79> dha:  thanks for talking to mr doy

[21:13] <Juerd> m: ↂ.say

[21:13] <camelia> rakudo-moar 328e95: OUTPUT«10000␤»

[21:13] <jdv79> i appreciate it

[21:13] <dha> jdv79 -  sure.

[21:13] <AlexDaniel> .u ↂ

[21:13] <jnthn> .tell skids Thanks for the S17 gist; I look through it tomorrow when I've (hopefully) more brane :)

[21:13] <yoleaux> U+2182 ROMAN NUMERAL TEN THOUSAND [Nl] (ↂ)

[21:13] * Juerd sees interesting new opportunities for code obfuscation :)

[21:13] <yoleaux> jnthn: I'll pass your message to skids.

[21:13] <lizmat> m: say uniname ↂ

[21:13] <camelia> rakudo-moar 328e95: OUTPUT«UPPER RIGHT PENCIL␤»

[21:13] <AlexDaniel> dha: there's also a bug report

[21:13] <jdv79> dha++

[21:14] <Juerd> m: 

[21:14] <Juerd> argh

[21:14] <lizmat> m: say uniname "ↂ"

[21:14] <camelia> rakudo-moar 328e95: OUTPUT«ROMAN NUMERAL TEN THOUSAND␤»

[21:14] <AlexDaniel> dha: https://rt.perl.org/Public/Bug/Display.html?id=126732

[21:14] *** MadcapJake joined
[21:14] <dha> jdv79 -  I get the impression that the page will probably see some updating after perl 6 actually exists and a book proposal can actually be put together. :-)

[21:15] <lizmat> m: say uniname 10000

[21:15] <camelia> rakudo-moar 328e95: OUTPUT«UPPER RIGHT PENCIL␤»

[21:15] <dalek> roast: b517276 | usev6++ | S10-packages/precompilation.t:

[21:15] <dalek> roast: Keep ticket number (RT #122773)

[21:15] <dalek> roast: review: https://github.com/perl6/roast/commit/b517276b5b

[21:15] <lizmat> should uniname be taking ints like that ?

[21:15] <MadcapJake> .botsnack

[21:15] <yoleaux> :D

[21:15] <yoleaux> 16:13Z <hoelzro> MadcapJake: do you need more help on your changes to Perl6::Compiler? I would be happy to help you out with it!

[21:15] <jnthn> Yeah

[21:15] <AlexDaniel> lizmat: why not?

[21:15] <Juerd> m: say ↈ/ↅ²*६

[21:15] <camelia> rakudo-moar 328e95: OUTPUT«16666.666667␤»

[21:15] <jnthn> It's got a codepoint and string form

[21:15] <jnthn> as a multi iirc

[21:15] <dha> AlexDaniel -  I would probably agree with that bug report. But I'm not that strong on unicode. It's possible something is relevant here that I don't know about. *shrug*

[21:16] <lizmat> m: say uniname ↂ   # was a WAT to me

[21:16] <camelia> rakudo-moar 328e95: OUTPUT«UPPER RIGHT PENCIL␤»

[21:16] <AlexDaniel> dha: nah it's just that perl 6 treats all number-like things as real numbers, and superscript stuff acts like a postfix or something

[21:16] *** rindolf left
[21:16] <AlexDaniel> dha: so since it does not expect a postfix there, it treats the first digit as just a number…

[21:16] <Juerd> AlexDaniel: Yes, &postfix:sym<ⁿ>

[21:17] <AlexDaniel> dha: and only then it's like “oh, here's a superscript thing!”

[21:17] *** dha left
[21:17] *** dha joined
[21:17] <MadcapJake> hoelzro: Yeah I wasn't able to get the change to work, it just keeps falling back to the CATCH block, It was giving me "cannot invoke this object", iirc  and it was a NQPMu.  Not sure where to go from there but I would definitely appreciate the help!

[21:18] <MadcapJake> some part of me feels like it's a non-issue if panda is installing .so files now (Thought I read that it was again)

[21:18] <AlexDaniel> m: say ½

[21:18] <camelia> rakudo-moar 328e95: OUTPUT«0.5␤»

[21:18] *** virtualsue left
[21:18] <Juerd> mQ say ₃⁴

[21:18] <AlexDaniel> m: say ½²

[21:18] <camelia> rakudo-moar 328e95: OUTPUT«0.25␤»

[21:19] <Juerd> m: say ₃⁴

[21:19] <camelia> rakudo-moar 328e95: OUTPUT«81␤»

[21:19] <jdv79> sehr gut herr adler.  danke.

[21:19] <dha> bitte

[21:19] <AlexDaniel> m: say ₃₃

[21:19] <camelia> rakudo-moar 328e95: OUTPUT«5===SORRY!5=== Error while compiling /tmp/HtdTpOZaDQ␤Bogus postfix␤at /tmp/HtdTpOZaDQ:1␤------> 3say ₃7⏏5₃␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement mod…»

[21:19] <hoelzro> MadcapJake: panda can handle that now, but I think it wouldn't be a bad thing to be robust

[21:19] * lizmat wonders why jdv79 starts talking german to dha ?

[21:19] <hoelzro> otherwise, a bad Linenoise install busts the REPL

[21:19] <RabidGravy> MadcapJake, yes it is installing .so files, you need to put a resources key in the META.info

[21:19] <Juerd> Given that ₃₃ == 33, shouldn't ³³ == 33 for consistency, instead of 27 or a compile time error?

[21:20] <jdv79> im in berlin.  osmosis?

[21:20] <jdv79> idk...

[21:20] <MadcapJake> RabidGravy: cool, good to know!

[21:20] <AlexDaniel> Juerd: but ₃₃ is not 33

[21:20] <timotimo> but it should be!

[21:20] *** rurban joined
[21:20] <Juerd> Oh, it's not

[21:20] <Juerd> Why not?

[21:20] <Juerd> ₃ == 3

[21:20] <AlexDaniel> I don't think that it should be

[21:21] <timotimo> huh.

[21:21] <Juerd> TBH I don't really understand why all these things are supported anyway.

[21:21] <AlexDaniel> what if you write ½½ – what would that mean?

[21:21] <MadcapJake> hoelzro: I don't mind following through, I'm just not sure what the next course of action would be.  To me, it seems that really the problem is actually not being caught further up when it was getting obtained via that `eval` call (but I'm a Perl6 noob and a NQP n00b!)

[21:21] <RabidGravy> I'm quite happy that I can't type these superscript numbers anyway so it'll probably never trouble me

[21:21] <Juerd> I don't really see use cases for ⅺ

[21:21] <AlexDaniel> Juerd: one reason to support weird digits is because ½ was requested so many times

[21:21] <Juerd> m: Ⅿ.say

[21:21] <camelia> rakudo-moar 328e95: OUTPUT«1000␤»

[21:22] <AlexDaniel> Juerd: and if support that, why not the whole unicode? :)

[21:22] *** morlock joined
[21:22] *** molaf left
[21:22] <TimToady> that it can be abused is not a strong argument here

[21:23] <Juerd> AlexDaniel: If you support ½ then supporting ¹⁄₂ makes equal sense

[21:23] <Juerd> There's no end to that :)

[21:23] <dalek> roast: 9800a63 | usev6++ | S32-str/lines.t:

[21:23] <dalek> roast: Fudge some more tests for \r\n for JVM

[21:23] <dalek> roast: review: https://github.com/perl6/roast/commit/9800a639bb

[21:23] <hoelzro> MadcapJake: if we could accomplish that, I would prefer we test Linenoise for functionality in the eval

[21:23] <hoelzro> perhaps history loading

[21:24] <AlexDaniel> Juerd: well, you are right, we could support that too :)

[21:24] <Juerd> I don't understand what Ⅿ is, by the way. Is it a digit or a constant?

[21:24] <hudo> i like to have in a hash or an array only the newest version of each file in a directory, the files look like 2015-12-07_105935_user3.csv

[21:24] *** mohae_ is now known as mohae

[21:24] <timotimo> Juerd: it's the digit

[21:24] <lizmat> Juerd: well, I guess it's really a number

[21:24] <AlexDaniel> timotimo: then why can't you write Ⅿ42?

[21:25] <Juerd> m: ⅭⅯ

[21:25] <camelia> rakudo-moar 328e95: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CIItF7XtO_␤Bogus postfix␤at /tmp/CIItF7XtO_:1␤------> 3Ⅽ7⏏5Ⅿ␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statem…»

[21:25] <Juerd> I'd expect digits of the same class to be composable, like how 4 and 2 make 42

[21:25] <lizmat> but the composing rules for roman numerals are different 

[21:25] <Juerd> Yep.

[21:26] <timotimo> now that i think about that stuff, it makes sense that we can only ever put one single "special" digit in a row

[21:26] <Juerd> I'm not saying I like the support for roman numerals to begin with

[21:26] <Juerd> I like it because it's quirky but it doesn't seem worth any CPU cycles or memory to begin with, it being kind of outdated and all :)

[21:26] <lizmat> I think pre 6.c roman numerals should be considered a number, so not composable

[21:27] <Juerd> Why have Roman numerals at all?

[21:27] <lizmat> after 6.c, we could consider multi-char roman numerals to do the right thing

[21:27] <Juerd> Or subscript digits

[21:27] <lizmat> it came with the rest of the numeric codepoints

[21:27] <lizmat> afaik

[21:27] <AlexDaniel> hudo: Hmm, do you expect it to be a built-in feature? :)

[21:28] <AlexDaniel> hudo: I'm just thinking that you can just code it traditionally

[21:28] <AlexDaniel> hudo: like loop over the files, parse the filename, see if that file already exists… if not, add it. If it exists, then what you are seeing now is an older version

[21:29] <Juerd> Serious question: do these things (supporting all those weird Unicode digits) cause actual performance slowdowns, and if so, is it something that's ever going to be optimizable?

[21:29] <AlexDaniel> hudo: given that your file format is sortable, and it is!

[21:29] <Juerd> Or are they practically free to support?

[21:29] <AlexDaniel> Juerd: I don't think that it causes any slowdown if you don't use these things

[21:30] <AlexDaniel> Juerd: in fact, even if you use them, it is probably converted just once during the compilation

[21:30] <Juerd> Does it noticeably affect parsing speed?

[21:30] <lizmat> Juerd: I would think they only cause compilation slowdown, which would be unnoticeable when precomped

[21:30] <AlexDaniel> at least that would make sense, I don't know the implementation

[21:30] *** kaare_ left
[21:31] <AlexDaniel> and even if it causes any compilation slowdown, then why not get rid of everything else… like fancy quotes, texas versions and so on

[21:31] <Juerd> I would not oppose that

[21:31] <timotimo> Juerd: i think we're just looking for the unicode property, so it's not very expensive

[21:31] <timotimo> there is, of course, no run-time performance impact

[21:31] <Juerd> I don't know if it's a package deal where if you support fancy quotes you get fancy digits for free, or if it's perhaps no performance hit at all...

[21:32] <Juerd> I understand it's not relevant for runtime

[21:32] <AlexDaniel> I think that it is not something you should worry about

[21:32] <_nadim> is there a place where any, the junction, is examplified. wat I'd like to write is something like  if any(@list) .name ¨¨ 'something'

[21:33] <Juerd> What's ¨¨?

[21:33] *** morlock left
[21:33] <jnthn> char classes are things you can resolve in log(n) where n is the number of things in the char class, so the effect of adding more things that could be matches is increasingly less costly per thing :)

[21:33] <Juerd> jnthn: Great explanation, thanks :)

[21:34] <RabidGravy> you mean @list.grep( { $_.name eq 'something'})

[21:34] <hudo> http://paste.ee/p/CrpNj

[21:34] <Juerd> _nadim: any(@list».name), perhaps?

[21:34] <hudo> AlexDaniel, i did it somehow, but im sure there are better ways 

[21:34] <dalek> rakudo/nom: e2e23fb | TimToady++ | src/ (3 files):

[21:34] <dalek> rakudo/nom: use only lc thunk types to allow uc for listy ops

[21:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2e23fb885

[21:35] <RabidGravy> let me take you down to thunky town

[21:35] <AlexDaniel> hudo: hmm this does not look like Perl 6

[21:35] <_nadim> I'll try

[21:35] <hudo> no it is not

[21:36] <RabidGravy> nope definitely Perl 5

[21:36] <hudo> wrong channel ?

[21:36] <AlexDaniel> hudo: depends!

[21:37] <RabidGravy> if your question is a Perl 5 question then it's the wrong channel

[21:37] <AlexDaniel> hudo: maybe you want to try writing the same thing in Perl 6 and see if it ends up being much shorter, who knows!

[21:37] <jdv79> #perl is goid for p5

[21:37] <jdv79> good

[21:37] <dha> No, actually, it really isn't. :-)

[21:38] <dha> #perl-help maybe.

[21:38] *** bjz_ left
[21:38] <hudo> hm, i was never occupied with perl6

[21:38] <RabidGravy> I wouldn't have thought so either but hey what do I now

[21:38] <hudo> what would be an appropiate start ?

[21:38] <AlexDaniel> RabidGravy: actually, it would be fun to answer #python questions here :)

[21:38] <AlexDaniel> hudo: download and install rakudo!

[21:39] <jdv79> on freenode?

[21:39] <timotimo> https://p6weekly.wordpress.com/2015/12/07/2015-50-adventing-commences/ - with the password "hello#perl6", you can give me feedback on the weekly before i publish it!

[21:39] <dha> AlexDaniel -  because we would answer them wrongly? :-)

[21:39] <RabidGravy> the docs.perl6.org

[21:39] <jdv79> #perl on freenode is cool.

[21:39] <AlexDaniel> hudo: http://perl6.org/ there is a download button

[21:40] <AlexDaniel> dha: well, it might not compile for them but it is definitely not wrong :)

[21:40] <dha> :-)

[21:41] *** ZoffixMobile joined
[21:41] <[Coke]> timotimo: weird font issue on some bullet points.

[21:41] <[Coke]> starting with "on opening files"

[21:41] <timotimo> ah, probably things i pasted got a bad font

[21:41] <ZoffixMobile> timotimo, lol, don't use Peter Evans for me

[21:41] <timotimo> ZoffixMobile: lizmat did :)

[21:42] <timotimo> will change.

[21:42] <timotimo> [Coke]: huh, could it be the   rel="bookmark"   attribute that does that?!

[21:42] <ZoffixMobile> heh, not sure how that percolated from Facebook lol :)

[21:42] <[Coke]> ShimmerFairy: the say "नि".codes; error mentioned on ycombinator is copied from your advent post. Can you update it?

[21:43] <timotimo> pushed an update

[21:43] <[Coke]> actually, any advent author could probably update that.

[21:43] <leont> nine: did you do more work on the loading since you fixed that bug? (wondering if I should recompile and test further)

[21:43] <timotimo> ARGH

[21:43] <timotimo> why are the texts so gigantic

[21:43] *** bjz joined
[21:44] <ZoffixMobile> timotimo, alsp, the last two posts seem to have an issue: m.imgur.com/CKiOrQ0

[21:44] <AlexDaniel> timotimo: hmmm, maybe you can add something for those who are experiencing post-curli regressions. Like “if you still see any bugs, please report them”… otherwise it sounds like everything is running smoothly right now, which is not

[21:44] <ZoffixMobile> and thanks  for updating :)

[21:44] <timotimo> OK, fixed-ish

[21:45] <timotimo> AlexDaniel: sure

[21:46] <jnthn> 'night, #perl6

[21:46] <nine> leont: err...which bug?

[21:46] <Juerd> Ciao :)

[21:46] <lizmat> good night, jnthn 

[21:46] <timotimo> gnite jnthn 

[21:47] *** ZoffixMobile left
[21:47] <timotimo> oh god damn it

[21:47] <timotimo> did wordpress send out the post via mail to all my readers?

[21:47] <leont> «Missing or wrong version of dependency '/home/leon/Code/rakudo/Foo.pm' (from '/home/leon/Code/rakudo/Foo.pm')»

[21:47] <lizmat> didn't see anything yet in my email

[21:48] * leont should probably rakudobug it

[21:48] *** bjz left
[21:48] <lizmat> ++leont

[21:49] *** labster left
[21:49] <nine> leont: I guess I didn't

[21:49] <leont> You fixed it from hanging (which is very much improvement)

[21:50] <lizmat> timotimo: perhaps mention the HN discussion about ShimmerFairy's advent blog post ?

[21:50] <lizmat> https://news.ycombinator.com/item?id=10690499

[21:50] <timotimo> ah, sure

[21:52] <timotimo> i was only 3/4 finished with the post, so it'd be bad if it'd appear in feed readers and such and people would just see the password prompt

[21:52] *** bjz joined
[21:53] <lizmat> m: say "\x1f1f3\x1f1f1"    # funny

[21:53] <camelia> rakudo-moar e2e23f: OUTPUT«🇳🇱␤»

[21:53] <leont> Sent

[21:54] <lizmat> m: say "\x1f1f3\x1f1f1".chars

[21:54] <camelia> rakudo-moar e2e23f: OUTPUT«1␤»

[21:55] <leont> #126839 it is

[21:55] <timotimo> i think i should link to some peoples' advent of code perl6 stuff

[21:56] <AlexDaniel> lizmat: huh! :D

[21:56] <timotimo> i don't think anybody posted it

[21:57] *** bjz left
[21:57] <lizmat> AlexDaniel: something I picked up from https://www.mikeash.com/pyblog/friday-qa-2015-11-06-why-is-swifts-string-api-so-hard.html

[21:58] <lizmat> I think I'm going to like Perl 6's grapheme support better  :-)

[21:59] <diakopter> at least until Unicode goes 64-bit

[22:00] *** hankache joined
[22:00] <hoelzro> timotimo: posted their solutions, or posted links to solutions?

[22:00] <timotimo> none of us did, it seems

[22:01] <lizmat> timotimo: is it correct that the P6W is now published ?

[22:01] <timotimo> no

[22:01] <timotimo> it's set to "password protected" because i want feedback from people

[22:01] <lizmat> hmmm... maybe because I'm logged in already with pw

[22:01] <Juerd> lizmat: Probably the most interesting sentences in that article: "I think that having different conceptual kinds of strings be distinct types would eliminate a lot of bugs. I'm not aware of any language or standard library that does this, though." :)

[22:02] <Juerd> lizmat: Perl 6 has everything that make that happen already present. I wonder what the first application for it will be :)

[22:02] <_nadim> how do I transform an object into one of its base class objects? In this case I want to call a multi with the object as an Any.

[22:02] <lizmat> so that's one thing Perl 6 does right  :-)

[22:02] <Juerd> s/that/that can/

[22:02] <timotimo> _nadim: you can $myObject.Any::foobar()

[22:04] <_nadim> can I  $o ; some_sub($o.Any) ?

[22:04] <hoelzro> timotimo: if you're looking for examples of solutions, I've been keeping mine in a gist

[22:04] <hoelzro> the code may be LTA, though =/

[22:06] <leont> _nadim: /achieve?

[22:06] *** ChristopherBotto joined
[22:06] <_nadim> leont: got stuck on Error message for fun and profit: No appropriate parametric role variant available for 'name'

[22:07] <ChristopherBotto> m: my $today = Date.new(now); $today.say; my $two_weeks_later = $today + 14; $two_weeks_later.say;

[22:07] <camelia> rakudo-moar e2e23f: OUTPUT«2015-12-07␤2015-12-21␤»

[22:07] <MadcapJake> hoelzro: the whole block at https://github.com/MadcapJake/rakudo/blob/nom/src/Perl6/Compiler.nqp#L130 isn't running.

[22:07] <hoelzro> MadcapJake: in the case of Linenoise.pm but no .so?

[22:07] <MadcapJake> hoelzro: yeah

[22:08] <hoelzro> hmm

[22:08] <hoelzro> how odd

[22:08] <hoelzro> try throwing some printing into the CATCH block on L127

[22:08] <hoelzro> see what the error is

[22:09] * leont got an error message when using Proc::Async «Unhandled exception in code scheduled on thread 6nCan only perform big integer operations on concrete objects», anyone a clue

[22:10] <ChristopherBotto> camelia: help

[22:10] <camelia> ChristopherBotto: Usage:

[22:10] <camelia> ..<(nqp-js|star-j|rakudo-MOAR|niecza|nqp-parrot|rakudo-moar|p5-to-p6|debug-cat|pugs|nqp-jvm|nqp-moarvm|star-m|prof-m|std|rakudo-jvm|rPn|nPr|r-jvm|rj|rn|nrP|r-j|nqp|perl6|rakudo|Prn|star|n|nqp-m|nr|sm|nom|rnP|nqp-mvm|P|M|p56|Pnr|m|r|rm|sj|p6|nqp-q|r-m|nqp-p|nqp-j|j)(?^::\s(?!OUTPUT)) $perl6_program>

[22:10] <diakopter> leont: have you tried the exact same code running in just one thread?

[22:10] <leont> Doing that right now

[22:11] <flussence> m: use newline :crlf; # did I miss the memo, was this pragma just a temporary workaround?

[22:11] <camelia> rakudo-moar e2e23f: OUTPUT«===SORRY!===␤Could not find newline:ver<True>:auth<True>:api<True> in:␤    /home/camelia/.perl6/2015.11-417-ge2e23fb␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-…»

[22:11] <leont> Or actually, yes, depending on what you mean

[22:11] <eternaleye> There seems to be a formatting error in today's Perl 6 Advent Calendar post:  "will match multiple alphabetic characters ( will do almost the same thing, just with the addition of matching underscore)"

[22:11] <timotimo> hoelzro: no, we shall never show people your ugly code! :P :P

[22:11] <leont> I have a non Proc::Async codepath, and a Proc::Async codepath

[22:11] <eternaleye> Nothing following the open paren

[22:11] <leont> The former works fine

[22:11] <leont> The latter give the above error with two concurrent PA's

[22:11] <leont> With one Proc::Async, it doesn't give that error, but seems to hang

[22:11] <hoelzro> =P

[22:11] <diakopter> sounds blocker-worthy to me

[22:11] <eternaleye> ShimmerFairy : ^^

[22:12] <flussence> eternaleye: that *was* <alpha> last time I read it...

[22:12] <MadcapJake> where will nqp look for my so file? I'm actually not getting a different response whether it's in /usr/lib or not

[22:12] * flussence throws rotten fruit at wordpress

[22:12] <diakopter> blocker, as in, not as if it would push back some milestone, but "feels pretty important"

[22:13] <eternaleye> Clearly, we need a POD6-based static blog engine!

[22:13] <leont> It's https://github.com/rakudo/rakudo/pull/578, when running TEST_JOBS=2 ./perl6-m --ll-exception -Ilib t/harness6 t/01-sanity

[22:13] *** labster joined
[22:14] <_nadim> type casting, is it possible to cast an object to Any (the reason why is that there are handler for different types and I want an object of type xxx to be handled like an Any)

[22:15] <flussence> (wordpress's php heritage is really showing: parsing something foreign in angle brackets? don't escape it, just silently truncate!)

[22:15] <timotimo> _nadim: we don't have something for that built-in, no

[22:16] *** skids left
[22:16] <MadcapJake> hoelzro: I'm a bit confused, I have only done `make` and not `make install`.  The panda I used to install the linenoise module is inside `~/.rakudobrew/bin`,  is it looking for my module/so files in the wrong place?

[22:16] <_nadim> timotimo: and not built-in? worth digging in or better to wait

[22:17] <hoelzro> MadcapJake: it looks in all of the standard library locations, plus the MoarVM rpath

[22:17] <timotimo> _nadim: you can create a class that forwards all method calls via FALLBACK to $!object."Any::$methodname"(capture)

[22:18] <_nadim> timotimo: what happens if I say my Any $any  = $some_class? is $any of some_class?

[22:18] <timotimo> yes, it'd be of some_class

[22:18] <dj_goku> timotimo: p6weekly goods to me. /me I still have a lot to learn in P6 land.

[22:18] <timotimo> that's just a type check to see if $some_class derives from Any or not

[22:18] <timotimo> dj_goku: thank you!

[22:18] <timotimo> i just published it ... hopefully

[22:18] *** mr_ron joined
[22:19] * [Coke] chuckles that the commit message "avoid using C<first> for better performance" showed up in his feed as "Avoid using C fo..."

[22:19] <MadcapJake> hoelzro: is it looking in my $PATH?

[22:19] <_nadim> timotimo: that's how I understood it too. There are other ways to achieve what I want, I just notice a bigger error in my module :)

[22:19] *** mr_ron left
[22:19] <hoelzro> MadcapJake: if you didn't install Linenoise recently (since Friday night), the so file isn't installed

[22:19] <hoelzro> MadcapJake: nope

[22:19] <timotimo> [Coke]: in mine, too! LOL. now i get it! :)

[22:19] <MadcapJake> right, i haven't; however I did build and install the linenoise repo, so it's available inside `/usr/lib`

[22:20] <MadcapJake> will it not look there for the .so, is my question.

[22:20] <hoelzro> it should

[22:20] <AlexDaniel> m: my $today = Date.new(now); $today.say; my $t = $today.later(weeks => 2); $t.say

[22:20] <camelia> rakudo-moar e2e23f: OUTPUT«2015-12-07␤2015-12-21␤»

[22:20] <[Coke]> For a moment, I was thinking that it was related to nativecall, and that passing things back and forth between C & perl6 was a problem. (I've problems like that in the past with going between, say, sql & pl/sql)

[22:20] <hoelzro> by that I mean, I would be awfully surprised if it didn't =)

[22:20] <AlexDaniel> ChristopherBotto: ^

[22:21] <ChristopherBotto> AlexDaniel: Thanks!

[22:22] <MadcapJake> hoelzro: ok :) then I'm again at a loss for what's going on.  linenoise the p6 module is installed, linenoise the shared object is available in /usr/lib, and yet Compiler.nqp fails to set @symbols.

[22:22] <hoelzro> MadcapJake: did you print $_ in the CATCH block?

[22:22] <hoelzro> to see what the issue is?

[22:22] <leont> Is there a reason why "Unhandled exception in code scheduled on thread X" doesn't give a backtrace?

[22:22] <MadcapJake> compiling now

[22:22] <AlexDaniel> ChristopherBotto: you might also like Date.today instead of Date.new(now), but these two are different

[22:23] * flussence logs in and fixes that one day 6 thing so ShimmerFairy doesn't have to again

[22:24] <AlexDaniel> leont: perhaps, but it is still less than awesome. So maybe it will make sense to submit it as LTA

[22:25] <ChristopherBotto> AlexDaniel: AlexDaniel++. Thanks! I like Date.today better.

[22:26] <AlexDaniel> ChristopherBotto: keep in mind though that Date.today will give you your local time

[22:26] <AlexDaniel> ChristopherBotto: while Date.new(now) seems to be based on UTC

[22:26] <MadcapJake> `panda list installed` doesn't work

[22:26] <AlexDaniel> m: say Date.new(now)

[22:26] <camelia> rakudo-moar e2e23f: OUTPUT«2015-12-07␤»

[22:27] <AlexDaniel> m: say Date.today

[22:27] <camelia> rakudo-moar e2e23f: OUTPUT«2015-12-07␤»

[22:27] <MadcapJake> that is `panda list --installed`

[22:27] <AlexDaniel> m: say now

[22:27] <camelia> rakudo-moar e2e23f: OUTPUT«Instant:1449527281.988911␤»

[22:27] <AlexDaniel> hm

[22:27] <zengargoylew> panda --installed list

[22:27] <timotimo> m: say nom

[22:27] <camelia> rakudo-moar e2e23f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/VYDw44aYJs␤Undeclared routine:␤    nom used at line 1. Did you mean 'not'?␤␤»

[22:27] <zengargoylew> unless that got fixed...

[22:27] <AlexDaniel> m: say DateTime.now

[22:27] <camelia> rakudo-moar e2e23f: OUTPUT«2015-12-07T23:27:50+01:00␤»

[22:27] <timotimo> ^- should perhaps also know about terms?

[22:27] <timotimo> m: say DateTime.new

[22:27] <camelia> rakudo-moar e2e23f: OUTPUT«Required named parameter 'year' is missing for DateTime.new()␤  in block <unit> at /tmp/dwxrmgFNEn:1␤␤Actually thrown at:␤  in block <unit> at /tmp/dwxrmgFNEn:1␤␤»

[22:28] <MadcapJake> zengargoylew: thanks that worked

[22:28] <ChristopherBotto> AlexDaniel: Thanks

[22:28] <AlexDaniel> ChristopherBotto: in other words, Camelia will start giving different results in 33 minutes :)

[22:28] <ChristopherBotto> timotimo: Thanks

[22:29] <flussence> oh ffs, wordpress absolutely butchered that post and lied to me on the preview. thank god there's a revert button.

[22:29] <dalek> roast: ad7263a | lizmat++ | S17-supply/throttle.t:

[22:29] <dalek> roast: Some more Supply.throttle tests

[22:29] <dalek> roast: review: https://github.com/perl6/roast/commit/ad7263a9d5

[22:29] <flussence> never mind, I ain't touching this thing with a 12 parsec pole.

[22:30] *** uruwi left
[22:33] <|Tux|> http://www.perlmonks.org/?node_id=1149576 :(

[22:34] <MadcapJake> where are perl6 modules installed?

[22:35] *** obra_ is now known as obra

[22:35] <AlexDaniel> MadcapJake: perl6 -e 'use blergh'

[22:35] <AlexDaniel> and it will tell

[22:35] <ChristopherBotto> AlexDaniel: Thanks for all of your help. I'm going to read http://design.perl6.org/S32/Temporal.html now.

[22:36] <AlexDaniel> ChristopherBotto: actually, I'll recommend the docs

[22:36] <AlexDaniel> ChristopherBotto: e.g. http://doc.perl6.org/type/DateTime

[22:36] <timotimo> [Tux]: "oh no, a butterfly!" ... so what?

[22:36] <diakopter> |Tux|: is that person influential?

[22:36] <MadcapJake> is there first one where panda installed them to?

[22:37] <MadcapJake> i.e., `~/.perl6/2015.11-347-g47d2daf`

[22:37] <ChristopherBotto> AlexDaniel: Thanks again!

[22:38] <MadcapJake> oi, I have so many versions in here and the one that perl6 is looking for isn't the newest one o_O

[22:38] <AlexDaniel> MadcapJake: It's more like install/share/perl6/

[22:38] *** espadrine left
[22:38] <MadcapJake> but what is this directory for?

[22:38] <hoelzro> |Tux|: btw, I was looking at incorporating your changes for IO::String, but panda-build and panda-test are broken atm =/

[22:38] <AlexDaniel> MadcapJake: though the folder that you've mentioned contains some precomp stuff. It is a bit complicated :/

[22:39] <timotimo> [Tux]: note also the little piece that basically says "god damn you, perl6 people, for taking away all the good people who used to work on perl5!"

[22:39] * hoelzro is it [Tux] or |Tux| ?

[22:39] <AlexDaniel> MadcapJake: also, it looks like the filenames are now mangled… honestly, I don't know what would be the right answer for your question

[22:39] *** jkva left
[22:39] <diakopter> timotimo: yeah, it's absurd and ridiculous and uninformed, as rants go

[22:40] <MadcapJake> AlexDaniel: but the other three paths given don't seem to contain any modules

[22:40] <MadcapJake> /home/jrusso/.rakudobrew/moar-nom/install/share/perl6, /home/jrusso/.rakudobrew/moar-nom/install/share/perl6/vendor, /home/jrusso/.rakudobrew/moar-nom/install/share/perl6/site

[22:41] *** ChristopherBotto left
[22:41] <timotimo> diakopter: and i'm glad about that fact.

[22:42] <timotimo> diakopter: Jun 13, 2015 at 07:00 UTC

[22:43] <timotimo> diakopter: is when that person joined perlmonks

[22:43] <diakopter> the site was static for a long time, I think many people lost their logins

[22:43] <timotimo> oh

[22:43] <timotimo> i did not know that

[22:43] <MadcapJake> ok maybe actually the problem is, linenoise was never installed, panda thinks it was, but i can't locate it anywhere! just the so file.

[22:43] <hoelzro> ah ha

[22:44] *** hudo left
[22:44] <MadcapJake> weird, i wonder why panda would say it's installed

[22:44] <lizmat> sometimes I think Camelia acts as a brown M&M: http://www.snopes.com/music/artists/vanhalen.asp

[22:45] <MadcapJake> wait, now it's actually crashing on install (Linenoise already installed)

[22:45] <hoelzro> o_O

[22:45] <hoelzro> MadcapJake: what's the exact error message you get in the CATCH block?

[22:46] <lizmat> good night, #perl6!

[22:46] <MadcapJake> Here's the error that my rakudo fork gives:

[22:46] <MadcapJake> Could not find Linenoise:ver<True>:auth<True>:api<True> in:

[22:46] <MadcapJake>     /home/jrusso/.perl6/2015.11-423-g3a798bd

[22:46] <MadcapJake>     /home/jrusso/github/rakudo/install/share/perl6/site

[22:46] <MadcapJake>     /home/jrusso/github/rakudo/install/share/perl6/vendor

[22:46] <MadcapJake>     /home/jrusso/github/rakudo/install/share/perl6

[22:46] <hoelzro> eesh

[22:47] <MadcapJake> is there a panda uninstall?

[22:47] <MadcapJake> Oh I suppose I could force it

[22:47] <hoelzro> I don't think so =/

[22:47] <hoelzro> give that a shot

[22:48] <MadcapJake> interestingly, liblinenoise was now installed: /home/jrusso/.rakudobrew/moar-nom/install/share/perl6/site/lib/liblinenoise.so  but still no Linenoise.pm o_O

[22:48] <hoelzro> I don't know if Linenoise.pm is installed into .perl6

[22:49] *** vendethiel left
[22:49] <hoelzro> maybe just the pre-comp'd version with a SHA-1 sum as its filename

[22:50] <RabidGravy> |Tux|, timotimo that article and most of the responses is an examplar of why I stopped reading perlmonks years ago

[22:51] <RabidGravy> infact why I largely ignore the "perl community"

[22:51] <MadcapJake> well it really has to be somewhere because my main perl6 install uses it and it works :P

[22:51] <timotimo> RabidGravy: lol. for a really short moment when i saw the line end in "I stopped reading" my brain connected that with perl6weekly

[22:51] <RabidGravy> well that too but hey ;-)

[22:52] <hoelzro> ¯\_(ツ)_/¯ 

[22:52] <MadcapJake> i wish modules were installed in a more obvious, accessible way

[22:53] <hoelzro> MadcapJake: I agree, but I think it's partially growing pains of the CURLI implementation and us getting used to the new deal

[22:54] <|Tux|> hoelzro, [Tux] is my home-PC, |Tux| is my $work PC

[22:54] <hoelzro> ahhh

[22:55] <|Tux|> FWIW my IO::String implementation is byfar perfect (yet)

[22:55] <RabidGravy> "far from perfect"?

[22:55] <|Tux|> but for now it serves its purpose. Thanks for providing me the basics to dare to start

[22:55] <|Tux|> RabidGravy, yes

[22:56] <RabidGravy> :)

[22:56] <|Tux|> shows it is (too) late. Just back from badmintoncompetition and ready to drive home

[22:57] <|Tux|> sleep tight all, hope to be back tomorrow

[22:57] <RabidGravy> have fun

[22:57] *** ChristopherBotto joined
[22:58] <hoelzro> good night

[22:58] <timotimo> RabidGravy: i don't think i understand your last reply :\

[22:59] <hankache> http://www.perlmonks.org/?node_id=1149576 seriously!!

[22:59] <ChristopherBotto> m: Date.today

[22:59] <camelia> rakudo-moar e2e23f: ( no output )

[22:59] <timotimo> hankache: tux just linked that here :)

[22:59] <hankache> all that hate?!

[22:59] *** doublec left
[23:00] <hankache> man people are sick

[23:00] <ChristopherBotto> m: Date.today();

[23:00] <camelia> rakudo-moar e2e23f: ( no output )

[23:00] <RabidGravy> which last reply, I usually dob't make sense so I'm not surprised

[23:00] <flussence> hankache: hilarious, isn't it? that's the sort of toxic, superficial trolling we're leaving behind for good thanks to one simple image :)

[23:00] <RabidGravy> ChristopherBotto, say Date.today

[23:00] <timotimo> hankache: who cares, let that person alone with their misery

[23:00] <hankache> all that hate for an image!!

[23:01] <timotimo> and what the image represents

[23:01] <dalek> rakudo/nom: 97ef742 | TimToady++ | src/Perl6/Actions.nqp:

[23:01] <dalek> rakudo/nom: extend meta-thunking to comma-listy X and Z args

[23:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/97ef742f35

[23:01] <hankache> if people hate us then we're doing the right thing

[23:01] <RabidGravy> I *like* camelia, it's cheerful

[23:02] <Juerd> I love the weird words that keep popping up. But... is there a dictionary somewhere? I'd love to look up terms like 'meta-thunking' :)

[23:02] <hankache> RabidGravy camelia is waaaay better than an onion :)

[23:02] <ChristopherBotto> M: Date.today

[23:02] <camelia> rakudo-MOAR 273e89: ( no output )

[23:03] <ChristopherBotto> m: say Date.today

[23:03] <camelia> rakudo-moar e2e23f: OUTPUT«2015-12-08␤»

[23:03] <timotimo> Juerd: we have S99, for one

[23:03] <flussence> Juerd: "meta" would be the X/Z and "thunking" would be... using them on xx I guess?

[23:03] <ChristopherBotto> RabidGravy: Thanks. I guess I'm too used to the REPL.

[23:03] <RabidGravy> isn't some Sly and the Family Stone thing? (thunking that is)

[23:03] <Juerd> Ah, S99 is great. Thanks :)

[23:04] <flussence> looking at that commit, I think I guessed right

[23:05] <lucs> What's the "@0>>.lc" in "if $l ~~ / :s ^ '[' (\S+) + ']' $/ { @foo = @0>>.lc; }"?

[23:06] <timotimo> puts all contents of the first capture group into @foo upper-cased

[23:06] <Juerd> lucs: @0 is shorthand for @( $0 )

[23:06] <lucs> Aha, thanks guys.

[23:06] <Juerd> lucs: @foo>>.lc applies .lc on each element of @foo

[23:06] <Juerd> timotimo: Upper? :)

[23:07] <timotimo> er. yes, lower case

[23:07] <timotimo> sorry

[23:07] <lucs> The other upper.

[23:07] <lucs> Thanks

[23:07] <timotimo> no, that's foldcase!

[23:08] <Juerd> I don't know what an upper is, but an up-goer is a rocket: https://www.youtube.com/watch?v=2p_8gx-XHJo

[23:08] <lucs> Okay, okay, my problem was with the @0 actually :)

[23:08] *** ZoffixGaming joined
[23:09] <lucs> And come to think of it, with the  >>  too.

[23:09] <TimToady> m: say 4,5,6 Zxx 1,2,3

[23:09] <camelia> rakudo-moar e2e23f: OUTPUT«((4) (5 5) (6 6 6))␤»

[23:09] <TimToady> m: say 4,5,6 RZxx 1,2,3

[23:09] <camelia> rakudo-moar e2e23f: OUTPUT«((1 1 1 1) (2 2 2 2 2) (3 3 3 3 3 3))␤»

[23:09] <Juerd> lucs: $0 is the first capture, like $1 in several other languages.

[23:09] <TimToady> m: say rand Xxx 1,2,3

[23:09] <camelia> rakudo-moar e2e23f: OUTPUT«((0.526625786782889) (0.526625786782889 0.526625786782889) (0.526625786782889 0.526625786782889 0.526625786782889))␤»

[23:09] <TimToady> m: say (rand,) Xxx 1,2,3

[23:09] <camelia> rakudo-moar e2e23f: OUTPUT«((0.442517361025756) (0.442517361025756 0.442517361025756) (0.442517361025756 0.442517361025756 0.442517361025756))␤»

[23:09] <TimToady> that last one will fix in 2 minutes

[23:09] *** b7j0c joined
[23:10] <ZoffixGaming> hanekomu: heh, I love that those rants always go with "You want to attract serious Perl programmers with this"... well, maybe I don't! I want the quirky and fun and non-serious programmers :P

[23:10] <ZoffixGaming> timotimo: what was the thing you wanted on the Advent added called?

[23:10] <ZoffixGaming> "table of posts"? "archive"? (/me wants to know what to google for)

[23:10] <timotimo> ZoffixGaming: you mean somethin glike an "aside"?

[23:10] <Juerd> lucs: So here, @0 is a list of the several (\S+) that were matched (note the + after the capture group)

[23:10] * ZoffixGaming looks that up

[23:10] <timotimo> "Table of Contents" is the search term that gives you the posts we want, but that's just because that's the title these posts have

[23:11] <lucs> Juerd: Ah, I see. Nice.

[23:11] <b7j0c> in a CATCH block, is there a way to get the message for a caught Exception type...i.e., where i normally have a `when` clause, i want to actually be able to access the members of the Exception i caught instead of simply matching its type

[23:11] <hankache> ZoffixGaming?!

[23:11] <TimToady> m: say (rand,) Xxx 1,2,3

[23:11] <camelia> rakudo-moar 97ef74: OUTPUT«((0.578100359876706) (0.585752122516995 0.834068598028611) (0.816395699874 0.802171392461199 0.424036099637496))␤»

[23:11] <TimToady> there we go

[23:11] <hankache> how many nicks do u have? lol

[23:11] <timotimo> hankache: nicks are cheap

[23:11] <TimToady> next step, thunking reductions correctly...

[23:12] <ZoffixGaming> Jesus... I've used 10% of this ramen spice packet and my mouth is burning >_<

[23:12] <Juerd> lucs: » is a meta-operator, it changes the way the . works. Specifially, in ». it lets the method be called on each element of the list. @foo».bar is somwhat like @foo.map(*.bar)

[23:12] <Juerd> ZoffixGaming: I'm not sure if Jesus reads IRC.

[23:12] <ZoffixGaming> Juerd++

[23:12] *** patrickz left
[23:12] <timotimo> it's similar to .map, but it may happen in parallel, so it mixes up the order of execution (but the order of results stays the same)

[23:12] *** mr_ron joined
[23:13] <Juerd> timotimo: Is that actually implemented yet? :)

[23:13] <hankache> he doesn't? lets turn IRC into a brothel

[23:13] * leont uses ». all the time, but more as a short map than ass a hyper per-se

[23:13] <ZoffixGaming> hankache: ZoffixW for $work box, ZoffixMobile for phone, Zoffix for my main box, ZoffixLappy, for my laptop, ZoffixGaming for when I'm booted into Windows on my main box :) I also have some exotic nicknames registered, like sexy-coder-girl, for when I wanna troll people :P

[23:13] <timotimo> m: <a b c d e>>>.say

[23:13] <camelia> rakudo-moar 97ef74: OUTPUT«a␤b␤c␤d␤e␤»

[23:13] <timotimo> we used to intentionally mix up the order. seems like we don't do that any more

[23:13] <Juerd> Sounds like a good idea to randomize the order

[23:13] <hankache> ZOffixGaming #sexy-coder-girl hahahahahahahaha

[23:14] <Juerd> Or at least swap the first two, if a full shuffle is too much work :)

[23:14] <mr_ron> m: class URI { has $.scheme is rw; has $.host is rw; method gist { "$!scheme://$!host" } }; my $u = URI.new; $u.scheme = '\\//'; $u.host = '?'; say $u

[23:14] <camelia> rakudo-moar 97ef74: OUTPUT«\//://?␤»

[23:14] *** dha left
[23:14] <lucs> Juerd: Thanks for spelling it out for me (on doc.perl6.org, I didn't find the >> documentation (apart from regex word boundary matching).

[23:14] * ZoffixGaming waves to mr_ron

[23:14] <mr_ron> ZoffixGaming: your idea for URI sort of works but not quite right

[23:14] <timotimo> lucs: yeah, hyper operators is in the WANTED :(

[23:14] <ZoffixGaming> mr_ron: oh, what is not right?

[23:15] <mr_ron> m: class URI { has $.scheme is rw; has $.host is rw; method gist { "$!scheme://$!host" } }; my $u = URI.new; $u.scheme = '\\//'; $u.host = '?'; say $u

[23:15] <camelia> rakudo-moar 97ef74: OUTPUT«\//://?␤»

[23:15] <lucs> timotimo: Oh :)

[23:15] <masak> 'night, #perl6

[23:15] <ZoffixGaming> mr_ron: if that code sample is meant to illustrate what's not right, then I'm not following...

[23:15] <mr_ron> with real mutators I could check the scheme for validity and throw a exception in a case like my example

[23:15] <ZoffixGaming> Ahh

[23:17] <ZoffixGaming> m: class URI { has $.scheme is rw; method scheme (Str $s) { $s ~~ /\\/ and fail "You shall not pass!"} has $.host is rw; method gist { "$!scheme://$!host" } }; my $u = URI.new; $u.scheme = '\\//'; $u.host = '?'; say $u

[23:17] <camelia> rakudo-moar 97ef74: OUTPUT«5===SORRY!5=== Error while compiling /tmp/UHDwyAkq32␤Strange text after block (missing semicolon or comma?)␤at /tmp/UHDwyAkq32:1␤------> 3 ~~ /\\/ and fail "You shall not pass!"}7⏏5 has $.host is rw; method gist { "$!sche␤    expecting an…»

[23:17] <ZoffixGaming> :(

[23:18] <ZoffixGaming> mr_ron: IMO that can be done when stringification (or full URL) is requested. It doesn't matter if scheme is wrong until you get the actual URL.

[23:18] <ZoffixGaming> m: 0/0; say "eh, whatever"; # sorta like this

[23:18] <camelia> rakudo-moar 97ef74: OUTPUT«eh, whatever␤»

[23:18] *** uruwi joined
[23:18] *** b7j0c left
[23:18] *** kid51 joined
[23:19] <timotimo> ZoffixGaming: just a ; that's missing

[23:19] <ZoffixGaming> timotimo: but i won't be able to assign to a method, would I?

[23:19] <ZoffixGaming> OTOH:

[23:20] <mr_ron> I could parse the whole URI and throw an exception when .gist is called and the URI doesn't parse - that is true and sort of works ...

[23:20] <ZoffixGaming> m: subset ValidScheme of Str where !/\\/; class URI { has ValidScheme $.scheme is rw; has $.host is rw; method gist { "$!scheme://$!host" } }; my $u = URI.new; $u.scheme = '\\//'; $u.host = '?'; say $u

[23:20] <camelia> rakudo-moar 97ef74: OUTPUT«Type check failed in assignment to $!scheme; expected ValidScheme but got Str␤  in block <unit> at /tmp/dXV2ilFvGP:1␤␤»

[23:20] <ZoffixGaming> Tada

[23:20] <timotimo> that works, yeah

[23:21] <timotimo> if you want to assign to a method, you'll mark the method "is rw" and put the container as the last thing

[23:21] *** adu joined
[23:21] <timotimo> alternatively use "return-rw"

[23:22] <mr_ron> token scheme { <.uri-alpha> <[\-+.] +uri-alpha +digit>* }; - from https://github.com/perl6-community-modules/uri/blob/master/lib/IETF/RFC_Grammar/URI.pm

[23:22] <ZoffixGaming> timotimo: ah, neat

[23:24] <ZoffixGaming> timotimo: don't see how to add that thing back. All the things I have on a the only off-wordpress.com-hosted wordpress site aren't there on the Advent.

[23:25] <ZoffixGaming> Maybe someone who's more experienced with Wordpress could add it back. Or someone with enough patience could find a different decent-looking theme that has that posts list included

[23:26] <timotimo> right.

[23:29] <ZoffixGaming> :(

[23:31] *** virtualsue joined
[23:33] <RabidGravy> right that's me done for the day

[23:33] <RabidGravy> catch y'all later

[23:33] <ZoffixGaming> \o

[23:35] *** rurban left
[23:39] <mr_ron> timotimo: if I put the container as the last thing or return-rw how do I validate before assigning?

[23:40] <timotimo> mr_ron: in that case you need a Proxy

[23:40] *** RabidGravy left
[23:40] <mr_ron> that's what I explained to ZoffixGaming here: https://github.com/perl6-community-modules/uri/issues/27

[23:41] <timotimo> but with a subset, that'd also work

[23:42] <Hotkeys> Sometimes I forget to disconnect from my other irc clients and then i get on my computer and have no context (ZNC gives me up to a 50 line history when I connect the first client)

[23:43] <Hotkeys> and it makes me sad

[23:43] <Hotkeys> I could make znc always tell me but that would get annoying with unintentional disconnects

[23:43] *** hankache left
[23:43] <timotimo> only 50 lines? that's pretty weak

[23:43] <Hotkeys> I mean

[23:43] <Hotkeys> I can make it more

[23:43] *** spider-mario left
[23:43] <Hotkeys> 50 is usually enough

[23:43] <ZoffixGaming> mr_ron: I do thinking validating each component individually is over-engineering things a bit. Just validate when the full URL is requested.

[23:43] <ZoffixGaming> my two cents

[23:43] * ZoffixGaming leaves to play Fallout 4

[23:44] <ZoffixGaming> night all \o

[23:44] *** ZoffixGaming left
[23:45] <tony-o> screen + irssi

[23:46] <tony-o> forever history

[23:46] <timotimo> no. screen + weechat

[23:46] <timotimo> actually

[23:46] <timotimo> tmux + weechat

[23:46] <timotimo> + weechat remote protocol

[23:46] <timotimo> + glowing bear

[23:46] <tony-o> tmux is nice but i have an uptime to maintain

[23:46] <timotimo> tmux has never crashed on me

[23:46] *** virtualsue left
[23:46] <timotimo> unless you mean you don't want to switch between screen and tmux becasue that'd mean you'd have to close irssi once

[23:46] <tony-o> nor me, i just started using screen before i actually experienced the full power of tmux

[23:47] <timotimo> i wonder if you can reptyr a program from a screen session into a tmux session ...

[23:47] <flussence> hasn't crashed on me, but it has broken the pipe protocol between updates more than once

[23:47] *** csd_ left
[23:47] <timotimo> that's true.

[23:47] <tony-o> [15:47] Uptime: 404d 4h 39m 48s

[23:47] <tony-o> i have that going on

[23:47] <timotimo> i bet your kernel is still super secure, though

[23:47] <tony-o> probs

[23:48] <tony-o> this thing isn't a productive server, just something i screw around on

[23:48] <timotimo> :)

[23:48] <diakopter> m: say (rand,) Xxx ^99**99

[23:48] <camelia> rakudo-moar 97ef74: OUTPUT«(() (0.790520055025987) (0.8513212235925 0.491482906034424) (0.600896884200228 0.799362530141523 0.298255295298534) (0.484338858622959 0.99495079214283 0.234830354056885 0.766573864783707) (0.859617055848472 0.612114303608827 0.866768992417288 0.3844211538…»

[23:48] <tony-o> probably still has the ssh bug

[23:48] <timotimo> which one? :)

[23:48] <timotimo> insecure debian keys or heartbleed?

[23:48] <mr_ron> m-star: subset ValidScheme of Str where IETF::RFC_Grammar::URI::scheme; class URI2 { has ValidScheme $.scheme is rw; has $.host is rw; method gist { "$!scheme://$!host" } }; my $u = URI2.new; $u.scheme = q!\\//!; $u.host = "?"; say $u

[23:48] <timotimo> i think it's gotta be star-m:

[23:49] <mr_ron> star-m: subset ValidScheme of Str where IETF::RFC_Grammar::URI::scheme; class URI2 { has ValidScheme $.scheme is rw; has $.host is rw; method gist { "$!scheme://$!host" } }; my $u = URI2.new; $u.scheme = q!\\//!; $u.host = "?"; say $u

[23:49] <camelia> star-m 2015.09: OUTPUT«Could not find symbol '&scheme'␤  in any accepts_type at gen/moar/m-Metamodel.nqp:3237␤  in block <unit> at /tmp/BAt_7xvfPi:1␤␤Actually thrown at:␤  in any accepts_type at gen/moar/m-Metamodel.nqp:3237␤  in block <unit> at /tmp/BAt_7xvfPi:1␤␤»

[23:49] <timotimo> yeah, you'd need to use IETF::RFC_Grammar::URI first

[23:50] <tony-o> hearbleed

[23:50] <mr_ron> star-m: use IETF::RFC_Grammar::URI; subset ValidScheme of Str where IETF::RFC_Grammar::URI::scheme; class URI2 { has ValidScheme $.scheme is rw; has $.host is rw; method gist { "$!scheme://$!host" } }; my $u = URI2.new; $u.scheme = q!\\//!; $u.host = "?"; say $u

[23:50] <camelia> star-m 2015.09: OUTPUT«Could not find symbol '&scheme'␤  in any accepts_type at gen/moar/m-Metamodel.nqp:3237␤  in block <unit> at /tmp/sNWeCaUGzY:1␤␤Actually thrown at:␤  in any accepts_type at gen/moar/m-Metamodel.nqp:3237␤  in block <unit> at /tmp/sNWeCaUGzY:1␤␤»

[23:51] *** abaugher_ left
[23:52] <mr_ron> I'm interested if someone has a way to make the subset work ...

[23:53] <timotimo> i don.t know what ::URI looks like and what "scheme" is inside that

[23:53] *** cdg left
[23:53] <timotimo> you may have to do it like / <IETF::Blah::scheme> / perhaps.

[23:53] <mr_ron> token scheme { <.uri-alpha> <[\-+.] +uri-alpha +digit>* }; - from https://github.com/perl6-community-modules/uri/blob/master/lib/IETF/RFC_Grammar/URI.pm

[23:54] <mr_ron> star-m: use IETF::RFC_Grammar::URI; subset ValidScheme of Str where /<IETF::RFC_Grammar::URI::scheme>/; class URI2 { has ValidScheme $.scheme is rw; has $.host is rw; method gist { "$!scheme://$!host" } }; my $u = URI2.new; $u.scheme = q!\\//!; $u.host = "?"; say $u

[23:54] <camelia> star-m 2015.09: OUTPUT«Type check failed in assignment to '$!scheme'; expected 'ValidScheme' but got 'Str'␤  in block <unit> at /tmp/EiEhZYitx4:1␤␤»

[23:54] <mr_ron> fantastic ... it worked ...

[23:54] <timotimo> you can always count on me!*

[23:55] <mr_ron> timotimo: thanks much

[23:55] <timotimo> (not a guarantee. some terms & conditions apply. only valid during official office hours)

