[00:02] *** oetiker joined
[00:09] *** BenGoldberg joined
[00:12] <ugexe> jeez, it was because support.source is being preferred over source-url :/

[00:13] *** vendethiel left
[00:18] *** BenGoldberg left
[00:18] *** jdv79_ is now known as jdv79

[00:20] *** vendethiel joined
[00:23] *** BenGoldberg joined
[00:24] *** labster joined
[00:32] *** oetiker left
[00:35] *** espadrine left
[00:40] *** vendethiel left
[00:47] *** gcole joined
[00:51] *** vendethiel joined
[00:51] *** gcole left
[00:59] *** lolisa joined
[01:01] *** skids joined
[01:08] *** raiph joined
[01:12] *** ShimmerFairy left
[01:13] <labster> m: dir("/nope")

[01:13] <camelia> rakudo-moar d0a84b: OUTPUT«Unhandled exception: Failed to get the directory contents of '/nope': chdir failed: Unknown system error␤   at src/gen/m-CORE.setting:14561  (/home/camelia/rakudo-inst-2/share/perl6/runtime/CORE.setting.moarvm:throw:121)␤ from src/gen/m-CORE.setting:16…»

[01:17] <grondilu> m: say dir('/')

[01:17] <camelia> rakudo-moar d0a84b: OUTPUT«"/run".IO "/home".IO "/lib64".IO "/usr".IO "/root".IO "/dev".IO "/selinux".IO "/sbin".IO "/backup".IO "/success".IO "/opt".IO "/sys".IO "/proc".IO "/lib".IO "/var".IO "/etc".IO "/mnt".IO "/lost+found".IO "/boot".IO "/srv".IO "/.readahead".IO "/tmp".IO "/bi…»

[01:17] *** vendethiel left
[01:24] *** colomon left
[01:25] *** ShimmerFairy joined
[01:25] *** colomon joined
[01:31] *** vendethiel joined
[01:49] *** colomon left
[01:52] *** tinyblak left
[01:53] *** tinyblak joined
[01:54] *** kst` joined
[01:55] *** raiph left
[01:55] *** perlpilot joined
[01:56] *** pierrot_ joined
[01:57] *** tinyblak left
[01:58] *** nwc10_ joined
[01:58] *** baest_ joined
[01:59] *** kst left
[01:59] *** DarthGandalf left
[01:59] *** nwc10 left
[01:59] *** pierrot left
[01:59] *** Patterner left
[01:59] *** Patterner joined
[02:00] *** ab5tract joined
[02:01] *** DarthGandalf joined
[02:05] *** tinyblak joined
[02:05] *** tinyblak_ joined
[02:07] *** egrep joined
[02:09] *** mr-foobar left
[02:09] *** tinyblak left
[02:16] *** mr-foobar joined
[02:22] *** grondilu left
[02:25] *** egrep left
[02:26] *** vendethiel left
[02:29] *** egrep joined
[02:30] *** vendethiel joined
[02:36] *** gcole joined
[02:40] *** gcole left
[02:43] *** colomon joined
[02:52] *** mr-foobar left
[02:54] *** vendethiel left
[02:55] *** mr-foobar joined
[02:57] *** noganex_ joined
[03:03] *** perlpilot is now known as PerlJam

[03:10] *** lolisa left
[03:11] *** vendethiel joined
[03:17] *** mr-foobar left
[03:18] *** mr-foobar joined
[03:23] *** lolisa joined
[03:24] *** kst` is now known as kst

[03:31] *** colomon left
[03:36] *** vendethiel left
[03:39] *** mr-foobar left
[03:40] *** mr-foobar joined
[03:42] <b2gills> m: say (({ $++ * ++$ } ... *)[2..6,9] :p).perl ; # http://cheezburger.com/8481296128/funny-facebook-fail-math-school

[03:42] <camelia> rakudo-moar d0a84b: OUTPUT«(2 => 6, 3 => 12, 4 => 20, 5 => 30, 6 => 42, 9 => 90)␤»

[03:44] *** FROGGS_ joined
[03:44] *** colomon joined
[03:47] *** FROGGS left
[03:49] *** atweiden joined
[03:51] <atweiden> in a grammar, i have a list of reserve words

[03:51] <atweiden> is it possible to write <[<target>] - [<reserved>]>   ?

[03:51] *** vendethiel joined
[03:52] <atweiden> current workaround http://ix.io/i7b

[03:53] *** colomon left
[03:53] <skids> <!before> maybe?

[03:54] *** bjz left
[03:56] *** bjz joined
[04:01] *** dnmfarrell joined
[04:03] *** lolisa left
[04:03] *** lolisa joined
[04:06] <dnmfarrell> hey all, good evening :) My Perl 5 pod grammar (https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/Grammar.pm) is taking shape, it can parse 100% of pod directives now. One thing I'm stuck on though - how to parse lists within lists? Anyone got any ideas? Thanks!

[04:10] *** telex left
[04:12] *** telex joined
[04:13] *** vendethiel left
[04:25] *** gcole joined
[04:29] *** gcole left
[04:33] <skids> dnmfarrell: just putting an <over_back> in <over_back>'s alternatives does not work?

[04:35] <dnmfarrell> skids: I could be wrong, but wouldn't that make an infinite loop?

[04:35] <dnmfarrell> (as in a reference to the definition is in the definition) 

[04:36] <skids> Only if it encounters one, or if it can match ''.

[04:36] <dnmfarrell> well, only one way to find out! Let me give it a shot

[04:37] *** quester joined
[04:42] <dnmfarrell> skids: damn! looks like it works :D

[04:43] <skids> Yeah recursive grammar rules are fairly common actually.

[04:46] *** cbk1090 joined
[04:46] *** lolisa left
[04:46] <dnmfarrell> skids: that's awesome!

[04:46] *** lolisa joined
[04:47] <dnmfarrell> ok now I'll try the same trick for formatting directives

[05:21] *** atweiden left
[05:27] <moritz> dnmfarrell: fwiw recursion only leads to infinite loop if a level of recursion doesn't use up any characters

[05:30] <quester> m: $x=((10..19).item, (30..39).item).any; say 15 ~~ $x; say 35 ~~$x; say (<15 35>.all ~~ $x).perl

[05:30] <camelia> rakudo-moar d0a84b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/xEX8gZLy8q␤Variable '$x' is not declared␤at /tmp/xEX8gZLy8q:1␤------> 3$x7⏏5=((10..19).item, (30..39).item).any; say␤    expecting any of:␤        postfix␤»

[05:31] <quester> m: my $x=((10..19).item, (30..39).item).any; say $; say 15 ~~ $x; say 35 ~~$x; say (<15 35>.all ~~ $x).perl

[05:31] <camelia> rakudo-moar d0a84b: OUTPUT«(Any)␤True␤True␤Bool::False␤»

[05:31] <quester> m: my $x=((10..19).item, (30..39).item).any; say $x; say 15 ~~ $x; say 35 ~~$x; say (<15 35>.all ~~ $x).perl

[05:31] <camelia> rakudo-moar d0a84b: OUTPUT«any(10..19, 30..39)␤True␤True␤Bool::False␤»

[05:34] <quester> ... does anyone know smartmatch is supposed to handle List.all ~~ List-of-Range.any?  It seems to me that the last result would have been True fairly recently... in the March Rakudo* IIRC.

[05:36] <quester> ... the use case is checking that all of a list of IP addresses, converted into Int, are in a specific network... for example, all of them are private addresses per RFC 1918.

[05:38] <skids> m: say <15 35>.all == <15 35>.any

[05:38] <camelia> rakudo-moar d0a84b: OUTPUT«all(any(True, False), any(False, True))␤»

[05:38] <skids> m: say <15 35>.all ~~ <15 35>.any

[05:38] <camelia> rakudo-moar d0a84b: OUTPUT«False␤»

[05:39] <skids> star: my $x=((10..19).item, (30..39).item).any; say $x; say 15 ~~ $x; say 35 ~~$x; say (<15 35>.all ~~ $x).perl

[05:39] <camelia> star-m 2015.03: OUTPUT«any(10..19, 30..39)␤True␤True␤Bool::False␤»

[05:40] <quester> Oh.  Oops... maybe that code wasn't really working!  Thank you, skids.

[05:41] <skids> m: say <15 35> X== <15 35>.any

[05:41] <camelia> rakudo-moar d0a84b: OUTPUT«any(True, False) any(False, True)␤»

[05:41] <skids> m: say so any(<15 35> X== <15 35>.any)

[05:41] <camelia> rakudo-moar d0a84b: OUTPUT«True␤»

[05:44] <quester> m: $x=((10..19).item, (30..39).item).any; say $x; say so all <15 35>.map( * ~~ $x )

[05:44] <camelia> rakudo-moar d0a84b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/dd3SxO9vaF␤Variable '$x' is not declared␤at /tmp/dd3SxO9vaF:1␤------> 3$x7⏏5=((10..19).item, (30..39).item).any; say␤    expecting any of:␤        postfix␤»

[05:45] <quester> m: my $x=((10..19).item, (30..39).item).any; say $x; say so all <15 35>.map( * ~~ $x )

[05:45] <camelia> rakudo-moar d0a84b: OUTPUT«any(10..19, 30..39)␤True␤»

[05:49] <quester> m: my $x=((10..19).item, (30..39).item).any; say $x; say so all <15 35> X~~ $x )

[05:49] <camelia> rakudo-moar d0a84b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/NQIMxiy2uL␤Unexpected closing bracket␤at /tmp/NQIMxiy2uL:1␤------> 3.any; say $x; say so all <15 35> X~~ $x 7⏏5)␤»

[05:49] <quester> m: my $x=((10..19).item, (30..39).item).any; say $x; say so all <15 35> X~~ $x;

[05:49] <camelia> rakudo-moar d0a84b: OUTPUT«any(10..19, 30..39)␤True␤»

[05:52] *** mr-foobar left
[05:56] * quester afk

[05:56] *** kaare_ joined
[05:59] *** skids left
[06:13] *** gcole joined
[06:19] *** gcole left
[06:23] *** hobbs left
[06:24] *** hobbs joined
[06:35] *** vendethiel joined
[06:37] *** xfix joined
[06:48] *** bjz left
[06:48] *** bjz_ joined
[06:50] *** pierrot_ left
[06:51] *** rindolf joined
[06:57] *** pierrot joined
[07:08] *** lolisa left
[07:11] *** BenGoldberg left
[07:21] *** rindolf left
[07:41] *** vendethiel left
[07:51] *** mr-foobar joined
[07:58] *** renormalist joined
[07:59] *** vendethiel joined
[08:00] *** Rounin joined
[08:01] *** Ven joined
[08:02] *** gcole joined
[08:07] *** gcole left
[08:11] *** laouji joined
[08:12] *** darutoko joined
[08:22] *** vendethiel left
[08:24] *** vendethiel joined
[08:25] <lizmat> good *, #perl6!

[08:26] <lizmat> b2gills: re http://irclog.perlgeek.de/perl6/2015-04-25#i_10501228 , that's because of TimToady's change to List.rotor's API

[08:30] <jnthn> o/

[08:30] <lizmat> jnthn o/

[08:30] <lizmat> is there an easy way to ask for the repr of a class ?

[08:31] <Ven> \o, #perl6

[08:31] <lizmat> jnthn: well, class, something  :-)

[08:31] <lizmat> my native   int is repr('P6int') is Int { }

[08:34] <jnthn> .REPR

[08:34] <lizmat> aha!

[08:34] * lizmat is putting a NYI in the "my int %h" codepath

[08:35] <jnthn> Oh

[08:35] <jnthn> There's a better way for that

[08:35] <lizmat> bad idea ?

[08:35] <jnthn> I'ts a good idea, just that .REPR ain't the way :)

[08:35] <jnthn> In Perl6::World there is a method called somethin glike container_info

[08:35] <jnthn> And it has a codepath that decides whether to use Array or array

[08:35] <jnthn> You can re-use that one.

[08:36] <jnthn> uh, re-use it's approach, I meant.

[08:36] <lizmat> if %cont_info<container_type>.REPR eq 'P6opaque' { ?

[08:37] <lizmat> container_type_info

[08:38] <lizmat> fwiw, I was going to put the check in Array.^parameterize, is that the wrong place as well then ?

[08:39] <lizmat> I guess  :-)

[08:40] <nine> No more coffee in the channel :/

[08:40] <FROGGS_> :~(

[08:41] *** coffee` joined
[08:43] <moritz> nine: ☕

[08:43] <moritz> m: say 42.REPR.^name

[08:43] <camelia> rakudo-moar d0a84b: OUTPUT«BOOTStr␤»

[08:43] *** laouji left
[08:43] *** RabidGravy joined
[08:43] *** laouji joined
[08:43] <moritz> does anybody else find it weird that REPRs are just strings?

[08:44] <moritz> like, "everything is an object, except REPRs"? :-)

[08:44] <lizmat> the turtles stop somewhere ?

[08:46] *** laouji left
[08:46] *** laouji joined
[08:47] <dalek> rakudo/nom: 2da5bb2 | lizmat++ | src/Perl6/World.nqp:

[08:47] <dalek> rakudo/nom: Mark "my int %h" as NYI, jnthn++ for pointers

[08:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2da5bb2b1f

[08:48] *** EnergyCoffee left
[08:49] *** laouji left
[08:49] *** laouji joined
[08:53] *** FROGGS_ is now known as FROGGS

[08:53] <jnthn> Pretty much.

[08:53] <FROGGS> I love these NYI markers

[08:54] <jnthn> Also only a handful of the REPRs you see are part of the Perl 6 design, and the rest are (for now) implementation defined.

[08:54] <FROGGS> well, you cannot draw a clear line as long as there is only one implementation

[08:54] <jnthn> But yeah, sometimes a string identifier is the right level of coupling. :)

[08:55] <moritz> and I guess user-defined REPRs exist just in my dream?

[08:55] *** mr-foobar left
[08:55] <jnthn> moritz: Pretty much

[08:55] <jnthn> I always had REPR in my mind as being about memory management and binding to the underlying VM

[08:55] <jnthn> And the MOP stuff as being where all the flexibility is.

[08:56] <FROGGS> there might be the need to have certain memory layout though

[08:56] <jnthn> FROGGS: How you achieve that is still going to vary by VM.

[08:56] <FROGGS> troo

[08:58] <FROGGS> m: my $foo = "alpha"; say "bar" ~~ / <::($foo)>+ /

[08:58] <camelia> rakudo-moar d0a84b: OUTPUT«｢bar｣␤»

[08:58] <FROGGS> I'm kinda proud to have done something S05ish :o)

[08:58] <jnthn> oh, neat :)

[08:58] <jnthn> FROGGS++

[08:59] <FROGGS> I'm also tempted to implement this: m: say '¼' ~~ / <:NumericValue(0..1)> 

[08:59] <FROGGS> errr

[08:59] <FROGGS> m: say '¼' ~~ / <:NumericValue(0..1)> 

[08:59] <camelia> rakudo-moar d0a84b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rnDq6NAmzy␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ␤at /tmp/rnDq6NAmzy:1␤------> 3say '¼' ~~ / <:NumericValue7⏏5(0..1)>␤    expecting any of:␤        term␤»

[09:00] <FROGGS> ohh

[09:00] <FROGGS> m: my $foo = "alpha"; say "bar" ~~ / <::Flubber::($foo)>+ /

[09:00] <camelia> rakudo-moar d0a84b: OUTPUT«Method 'Flubber::alpha' not found for invocant of class 'Cursor'␤  in method INDMETHOD at src/gen/m-CORE.setting:16811␤  in method ACCEPTS at src/gen/m-CORE.setting:16874␤  in block <unit> at /tmp/X3pzpuGjlq:1␤␤»

[09:00] <FROGGS> is that supposed to work too?

[09:01] <lizmat> FROGGS: could you give me a commit bit on Slang::Tuxic ?

[09:01] <lizmat> .oO( it needs a "use nqp" )

[09:01] <nine> Can I export CHECK and INIT blocks?

[09:01] <FROGGS> lizmat: done

[09:02] <lizmat> FROGGS: use nqp added :-)

[09:02] <labster> m: say ("-AAAA-").map( { .subst(/(A+)/, { $0.chars } ) });  say "-AAAA-".subst(/(A+)/, { $0.chars });  #Why are these different?

[09:02] <FROGGS> nine: I bet the answer is 'no'

[09:02] <camelia> rakudo-moar d0a84b: OUTPUT«-0-␤-4-␤»

[09:02] <FROGGS> lizmat++

[09:02] *** eli-se joined
[09:02] <nine> FROGGS: that's...unfortunate

[09:02] <lizmat> nine: why would you need to export them?

[09:03] <FROGGS> labster: I think we have an open issue about $/ in for loops and map

[09:03] <lizmat> they'll run anywhere they exist?

[09:04] <nine> FROGGS: modules that use Inline::Perl5 during BEGIN have to do some cleanup before precomp and initialization on load. jnthn++ told me CHECK and INIT would be closest to that. But we're talking about CHECK and INIT of the module using Inline::Perl5

[09:05] <nine> Would be sucky to have use DBI:from<Perl5>; be so minimal, just to have the user add strange CHECK and INIT blocks, too.

[09:06] <moritz> fwiw I'm all in favor of being able to export phasers

[09:06] *** lolisa joined
[09:06] <lizmat> moritz: problem is that phasers don't exist in any namespace

[09:07] <labster> thanks FROGGS (looks like it is RT #123005)

[09:07] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123005

[09:07] <lizmat> they're attributes of the block they exist for

[09:07] <moritz> being able to export CATCH blocks would allow us to export custom backtrace printers, for example

[09:07] <lizmat> fwiw, I would be in favour of setting phasers in an outer scope

[09:07] <moritz> lizmat: then maybe we need some kind of proxy object

[09:08] <lizmat> at compule time

[09:08] <lizmat> *compile rather

[09:08] <nine> If they're attributes of a block, can I access the use'ing block from my module and set these attributes?

[09:08] <lizmat> yes, you can actually

[09:08] <FROGGS> nine: that would be handy for 'use lib' also

[09:08] *** vendethiel left
[09:09] <FROGGS> but I dunno how to make it work

[09:09] <lizmat> *but* if it's the first phaser, we also need to inform the compiler that it needs to run phasers at all

[09:09] <moritz> good that 'use' runs at compile time :-)

[09:09] <lizmat> for that block (as that is switched off for performance reasons normally)

[09:09] <lizmat> wrt to "use lib"

[09:09] <lizmat> I'm working on making that work like a pragma

[09:10] <lizmat> rather than a module

[09:10] <eli-se> morning

[09:10] <lizmat> and make @*INC a compile time constant aka: @?INC

[09:11] <labster> m: say ("-AAAA-").map( { my $/; .subst(/(A+)/, { $0.chars } ) });

[09:11] <camelia> rakudo-moar d0a84b: OUTPUT«-4-␤»

[09:12] *** pierrot left
[09:13] *** torbjorn joined
[09:13] *** rindolf joined
[09:14] <Ven> labster: my $/ ?

[09:15] <labster> Ven: apparently manually declaring the match variable in that block makes it update $0

[09:16] <labster> m: say ("-AAAA-").map( { .subst(/(A+)/, { $0.chars } ) });

[09:16] <camelia> rakudo-moar d0a84b: OUTPUT«-0-␤»

[09:18] *** laouji left
[09:18] <torbjorn> I have a grammar that parses my input text, but only if I use Grammar::Tracer. If I comment out use Grammar::Tracer, it no longer parses it (all of it)

[09:19] *** pierrot joined
[09:21] <FROGGS> labster: I guess it is about how we access the caller's $/ in method subst

[09:22] <FROGGS> labster: I think we might want to pass the correct $/ from Perl6::Actions to method subst, instead of doing the opposite

[09:22] <labster> Doing the opposite of correct does sound suboptimal.

[09:23] <FROGGS> ?

[09:23] *** domidumont joined
[09:23] <FROGGS> we currently aren't doing it right

[09:23] <torbjorn> also the grammar contains several rules, and the one im debugin, if i change it to .* , which should be as generic as can be, the grammar matches less than it used to

[09:23] * labster agrees, the wording just made me laugh

[09:23] <torbjorn> putting in a more specific pattern makes it match more

[09:24] <FROGGS> labster: ahh, gotcha :o)

[09:27] *** domidumont left
[09:27] *** domidumont joined
[09:28] *** laouji joined
[09:33] <FROGGS> hmmm, I guess /<:Foo>/ wants to be parsed as a proper colonpair

[09:39] *** oetiker joined
[09:40] *** vendethiel joined
[09:41] *** laouji left
[09:50] *** quester left
[09:51] *** gcole joined
[09:52] *** Ven left
[09:53] *** lolisa left
[09:54] *** laouji joined
[09:55] *** oetiker left
[09:56] <dalek> rakudo/nom: b34447e | paultcochrane++ | lib/Test.pm:

[09:56] <dalek> rakudo/nom: Rename test functions to use hyphens instead of underscores

[09:56] <dalek> rakudo/nom: 

[09:56] <dalek> rakudo/nom: The old test function names have been left as they are for the time being

[09:56] <dalek> rakudo/nom: and redirect to the new function names internally.

[09:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b34447e097

[09:56] <dalek> rakudo/nom: 7da357d | (Jonathan Stowe)++ | lib/Test.pm:

[09:56] <dalek> rakudo/nom: Merge branch 'pr/hyphenate_test_functions' of github.com:paultcochrane/rakudo into hyphenate_test_functions

[09:56] <dalek> rakudo/nom: 

[09:56] <dalek> rakudo/nom: Conflicts:

[09:56] <dalek> rakudo/nom: 	lib/Test.pm

[09:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7da357d15b

[09:56] <dalek> rakudo/nom: 6e278a7 | (Jonathan Stowe)++ | lib/Test.pm:

[09:56] <dalek> rakudo/nom: Add deprecations for underscore names in Test.pm

[09:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e278a726e

[09:56] <dalek> rakudo/nom: 302475c | paultcochrane++ | / (177 files):

[09:56] <dalek> rakudo/nom: Merge pull request #1 from jonathanstowe/hyphenate_test_functions

[09:56] <dalek> rakudo/nom: 

[09:56] <dalek> rakudo/nom: Hyphenate test functions

[09:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/302475cf42

[09:56] <dalek> rakudo/nom: 4bd8670 | lizmat++ | lib/Test.pm:

[09:56] <dalek> rakudo/nom: Merge pull request #371 from paultcochrane/pr/hyphenate_test_functions

[09:56] <dalek> rakudo/nom: 

[09:56] <dalek> rakudo/nom: Rename test functions to use hyphens instead of underscores

[09:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4bd86701e2

[09:56] *** gcole left
[09:57] *** oetiker joined
[10:01] *** oetiker left
[10:02] *** oetiker joined
[10:07] *** lolisa joined
[10:10] *** xfix left
[10:19] *** kaare__ joined
[10:23] *** kaare_ left
[10:24] *** Vlavv joined
[10:27] *** pierrot left
[10:27] *** FROGGS[mobile] joined
[10:28] <FROGGS[mobile]> got further with /<:Foo(/bar/)>/... can hopefully push later

[10:29] *** Ven joined
[10:30] *** Ven left
[10:35] *** pierrot joined
[10:37] <[Tux]> https://gist.github.com/Tux/6e06f3a455a8995adda4 <= WHO BROKE IO?

[10:37] * lizmat guesses jnthn  :-)

[10:37] <lizmat> perhaps rakudobug it

[10:38] <lizmat> oddly enough, slurping the file shows only 1 +

[10:39] <[Tux]> This is something I have no workaround for :/

[10:39] <lizmat> this is something that is *bad* need of a fix

[10:41] <lizmat> building latest jvm, to make sure it *is* Moar related

[10:43] *** kaare__ is now known as kaare_

[10:43] <lizmat> .IO.spurt("+"),.IO.open.get.perl.say for "t.csv";    # further golf

[10:44] *** Ven joined
[10:44] <lizmat> fwiw, even a null byte gets copied

[10:44] <lizmat> $ 6 '.IO.spurt("\0"),.IO.open.get.perl.say for "t.csv"'

[10:44] <lizmat> "\x[0]\x[0]"

[10:45] <lizmat> feels like an off-by-one error deep in the bowels of Moar

[10:46] *** pierrot left
[10:46] <lizmat> [Tux]: will you rakudobug it or shall I ?

[10:47] <Ven> FROGGS:: # or ++, ymmv

[10:50] <[Tux]> please do (not me)

[10:51] <lizmat> $ perl6-j -e '.IO.spurt("*"),.IO.open.get.perl.say for "t.csv"'

[10:51] <lizmat> "*"

[10:51] <lizmat> so confirmed, a Moar only bug

[10:52] *** gcole joined
[10:57] *** gcole left
[10:57] *** laouji left
[11:01] *** laouji joined
[11:01] *** mr-foobar joined
[11:03] *** laouji left
[11:09] *** Ven left
[11:10] *** eli-se left
[11:12] <dalek> rakudo/nom: 339917c | lizmat++ | src/core/Supply.pm:

[11:12] <dalek> rakudo/nom: Saner way to deprecate Suppl.rotor features

[11:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/339917c88d

[11:12] *** colomon joined
[11:12] <dalek> roast: c010071 | lizmat++ | S17-supply/rotor.t:

[11:12] <dalek> roast: Test for deprecations differently

[11:12] <dalek> roast: review: https://github.com/perl6/roast/commit/c010071a04

[11:13] <lizmat> .tell jnthn this may requires some attention: #124394

[11:13] <yoleaux> lizmat: I'll pass your message to jnthn.

[11:13] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124394

[11:24] *** dayangkun joined
[11:25] *** lolisa left
[11:34] <dalek> rakudo/nom: 7ac24e4 | lizmat++ | src/core/Supply.pm:

[11:34] <dalek> rakudo/nom: Allow for positive gaps in Supply.rotor

[11:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7ac24e42e2

[11:34] <dalek> roast: 2a4bf77 | lizmat++ | S17-supply/rotor.t:

[11:34] <dalek> roast: Add tests for positive gap in Supply.rotor

[11:34] <dalek> roast: review: https://github.com/perl6/roast/commit/2a4bf77025

[11:36] <FROGGS[mobile]> Ven: um, what?

[11:36] *** araujo joined
[11:36] *** araujo left
[11:36] *** araujo joined
[11:36] *** araujo left
[11:36] *** pierrot joined
[11:37] *** araujo joined
[11:40] *** laouji joined
[11:45] *** diana_olhovik joined
[11:46] <dalek> roast: 57d2717 | lizmat++ | / (34 files):

[11:46] <dalek> roast: Kebabcase tap_ok

[11:46] <dalek> roast: review: https://github.com/perl6/roast/commit/57d2717d70

[11:50] *** Ven joined
[11:51] *** colomon left
[11:52] *** bjz joined
[11:52] *** bjz_ left
[11:52] *** colomon joined
[11:55] *** rarara joined
[11:56] *** kaare_ left
[11:57] *** ssqq joined
[12:00] <dalek> roast: 09fbd75 | lizmat++ | fudge:

[12:00] <dalek> roast: Make sure we will fudge kebabcased test functions

[12:00] <dalek> roast: review: https://github.com/perl6/roast/commit/09fbd75918

[12:00] <ssqq> P6: 1.^mro.say

[12:01] <lizmat> m: 1.^mro.say

[12:01] <camelia> rakudo-moar 7ac24e: OUTPUT«(Int) (Cool) (Any) (Mu)␤»

[12:03] <ssqq> Where I could see the documents about `object.^mro` usage?

[12:07] <lizmat> http://doc.perl6.org/language/mop is a more general intro into the MOP

[12:07] <lizmat> that might be a good starting point

[12:07] <lizmat> other than that, I'm not sure atm

[12:08] <lizmat> perhaps moritz or [ptc] may know

[12:08] <lizmat> I should say moritz++ or [ptc]++

[12:08] <lizmat> as they've done a lot of documentation recently

[12:10] <ssqq> lizmat: I would check it in /src of rakudo

[12:11] <lizmat> ssqq: the core is *not* documentation :-)

[12:15] *** eli-se joined
[12:15] <lizmat> ssqq: but feel free to use it as a source of inspiration :-)

[12:23] *** pippo joined
[12:23] <pippo> o/ #perl6

[12:25] <pippo> Anybody could help me? Seems that building scripts fail to detect libreadline on my system. The resulting REPL does not have command history. Anyway to force use of libreadline?

[12:25] <psch> pippo: i think you have to install Linenoise with panda

[12:25] <psch> pippo: or you could supply --with-readline (or similar) to the moar build process

[12:26] <psch> the former got tab completion recently, curtesy of hoelzro++

[12:26] <pippo> psch: I'll try Linenoise. Thank you!

[12:27] *** BenGoldberg joined
[12:27] <ssqq> psch: Hi, Where you get the usage of `object.^mro`. I could not find it everywhere.

[12:27] *** mr-foobar left
[12:28] <psch> ssqq: http://doc.perl6.org/type/Metamodel::C3MRO

[12:29] <ssqq> psch: thank you!

[12:31] <pippo> psch: BTW I have tried perl Configure.pl --with-readline --gen-moar --gen-nqp --with-backends=moar but it says that it does not reconize --with-readline

[12:32] <pippo> *recognize 

[12:35] <psch> pippo: i remember there having been a "--with-readline" or similar flag for Moar, but maybe that got removed when linenoise got removed

[12:35] <dalek> roast: bb0a8fa | lizmat++ | / (211 files):

[12:35] <dalek> roast: Use isa-ok instead of isa_ok

[12:35] <dalek> roast: 

[12:35] <dalek> roast: This is really a test to check out support for this change.  If a Perl 6

[12:35] <dalek> roast: implementation is using a Test.pm that is not supporting isa-ok, then this

[12:35] <dalek> roast: will cause a lot of breakage.  OTOH, it *is* dogfooding, so I think it is

[12:35] <dalek> roast: worth it.

[12:35] <dalek> roast: review: https://github.com/perl6/roast/commit/bb0a8fa55d

[12:36] <psch> yeah, moar commit 0bff0279b7928eab32cb09314d898aab3683fa8d

[12:36] <psch> pippo: fwiw, it would have been «--moar-option='--with-readline'», but that's gone, as above

[12:37] <pippo> psch: :-(

[12:38] <psch> pippo: now you need panda and Linenoise from there

[12:38] <psch> but you get tab completion for free :)

[12:40] <pippo> psch: installed and working well. Thank you!!

[12:40] <pippo> :-)

[12:40] <[Tux]> :) panda installs under jvm

[12:41] <[Tux]> :( but it still doesn't run

[12:41] <[Tux]> Function X::Panda needs parens to avoid gobbling block

[12:41] <[Tux]> at /pro/3gl/CPAN/rakudobrew/jvm-nom/install/share/perl6/site/34:21

[12:41] <[Tux]> ------> Panda { %failed{$x}.push($_) && say $_ }⏏ };

[12:41] *** gcole joined
[12:45] *** mr-foobar joined
[12:46] *** gcole left
[12:46] <lizmat> [Tux]: could you try adding a "use Panda::Common" in bin/panda ?

[12:46] <[Tux]> yes. gimme a sec

[12:48] *** mr-foobar left
[12:49] <[Tux]> same

[12:49] <[Tux]> afk

[12:49] *** ssqq left
[12:49] <lizmat> :-(

[12:49] *** mr-foobar joined
[12:50] *** Ven left
[12:52] <FROGGS> tadzik: had the same issue just recently (at the qa)

[12:52] <dalek> roast: 9c1ad15 | lizmat++ | S16-filehandles/io.t:

[12:52] <dalek> roast: Add todo for #124394

[12:52] <dalek> roast: review: https://github.com/perl6/roast/commit/9c1ad15517

[12:52] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124394

[12:56] <lizmat> m: CATCH { when X::Panda { ... } }   # the issue, really   seems X::Panda is somehow not known on JVM in bin/panda

[12:56] <camelia> rakudo-moar 7ac24e: OUTPUT«5===SORRY!5===␤Function X::Panda needs parens to avoid gobbling block␤at /tmp/9W8k24cmS0:1␤------> 3CATCH { when X::Panda { ... }7⏏5 }   # the issue, really   seems X::Pand␤Missing block (apparently taken by 'X::Panda')␤at /tmp/9W8k24cm…»

[12:56] <jepeway> 'lo, again, p6peeps.

[12:57] <lizmat> 'lo to u2, jepeway 

[12:57] <jepeway> m: is(1,1,1) # Test.pm loaded into camelia?

[12:57] <camelia> rakudo-moar 7ac24e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uktaYyQN7C␤Undeclared routine:␤    is used at line 1␤␤»

[12:58] <lizmat> m: use Test; ok 1

[12:58] <camelia> rakudo-moar 7ac24e: OUTPUT«ok 1 - ␤»

[12:58] <jepeway> ah, thanks.

[12:58] *** mr-foobar left
[12:58] *** rindolf left
[12:59] <jepeway> m: use Test; is(DateTime.new(0, :timezone(3600)).later(seconds => 0).timezone, 3600, ".later preserves timezone"); # more play with DateTime

[12:59] <camelia> rakudo-moar 7ac24e: OUTPUT«not ok 1 - .later preserves timezone␤␤# Failed test '.later preserves timezone'␤# at /tmp/fLuoAeHQAY line 1␤# expected: '3600'␤#      got: '0'␤»

[13:00] <jepeway> looks like a couple-few methods in DateTime will slice off $.timezone

[13:03] <jepeway> I'm thinking forking & fixing would be the most helpful thing to do...well, trying to fix.

[13:03] <psch> jepeway: it looks rather straight forwards, for .later at least

[13:03] <psch> i'm not sure there's other methods though

[13:04] <jepeway> yup, 'tis.

[13:05] <jepeway> I think tz gets sliced off in at least one .new, too

[13:06] <jepeway> haven't dug deeply, yet.

[13:07] <jepeway> so...mention here?  bug the general "timezone sliced" prob?  or bug each slice?

[13:07] <jepeway> hm.

[13:08] <jepeway> mebbe bug the general prob with a set of illustrative tests.

[13:08] <dalek> rakudo/nom: dc910b6 | lizmat++ | docs/ChangeLog:

[13:08] <dalek> rakudo/nom: Add some ChangeLog entries

[13:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dc910b63eb

[13:09] <RabidGravy> I'm just having a bash at the concurrency doc.  Is it fair to say that Thread.start(...) will always hand off directly to the VM facilities or is it more "probably"?

[13:10] <lizmat> RabidGravy: please, don't use Thread directkly

[13:10] <psch> jepeway: there's a bunch of DateTime bugs around on RT, maybe timezone stuff is already there, i didn't look closely

[13:10] <lizmat> please use higher level abstractions such as Supply, Channel, Promises, start { }  

[13:10] <jepeway> will check RT, then.

[13:11] <psch> lizmat: i don't think that "we have high-level constructs" should mean we don't want to document the lower level ones

[13:11] <RabidGravy> lizmat, I am writing the missing Language/concurrency.pod - it needs to document Thread as well as say that :)

[13:12] <lizmat> ok ok ok  :-)

[13:12] <lizmat> "Plain Threads are the GOTO of todays computing"

[13:13] <RabidGravy> :)

[13:13] * psch can't «rakudobrew build-panda»

[13:13] <psch> https://gist.github.com/peschwa/d43698c3b7d7d3fabf23

[13:13] <lizmat> "Whatever underlies it, a C<Thread> should always be backed by something that is capable of being scheduled on a CPU core (that is, it may I<not> be a "green thread" or similar)"

[13:13] <lizmat> is that an answer ?

[13:13] <psch> the test results made me smirk though heh

[13:14] <lizmat> need to be afk&

[13:14] *** mr-foobar joined
[13:16] *** dayangkun left
[13:23] <jepeway> psch: I'm searching RT as an anonymous guest, and I get 0 hits on "DateTime", 1 on "timezone" (which I bet masak would close, now)

[13:23] <masak> I think I will end up writing a blog reply to http://blog.plover.com/prog/haskell/monad-search.html -- showing how to implement mjd's Haskell solution in very similar Perl 6 code using next-gen macros. (which are still vaporware, but which we are aiming for.)

[13:23] <psch> jepeway: i mostly search rt via google, with e.g. "site:rt.perl.org DateTime"

[13:24] <masak> happily accepting suggestions, in the form of gists, of how to translate that Haskell/monad/do-notation code to appropriately macro'd Perl 6.

[13:25] <psch> jepeway: so it may well be that most of the hits i got are closed already

[13:26] <jepeway> psch: well, first few are.

[13:27] <masak> by the way, I notice that there's not one concrete usage of the `let` prefix operator in the whole spec.

[13:28] <masak> am I right in assuming that it can only operate on already declared variables? it doesn't declare the variables itself?

[13:29] <psch> std: let $x = 5; 

[13:29] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Variable $x is not predeclared at /tmp/pRYTyUAKYt line 1:␤------> 3let 7⏏5$x = 5;␤Check failed␤FAILED 00:00 137m␤»

[13:30] *** dnmfarrell_ joined
[13:30] *** dnmfarrell left
[13:35] *** kaare_ joined
[13:43] *** lolisa joined
[13:44] *** Ven joined
[13:49] *** colomon left
[13:51] *** dnmfarrell_ left
[13:53] <jepeway> could somebody delete RT #124392?  It's a dup from when I e-mailed rakudobug@ w/o [BUG] in Subject: header

[13:53] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124392

[13:54] <jepeway> also, RT #124391 is really a [Moar] bug, not a [BUG]. anybody fixy?

[13:54] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124391

[13:56] *** tinyblak_ left
[13:57] *** gcole joined
[13:58] *** Rounin is now known as Ninuor

[14:01] *** gcole left
[14:02] *** tinyblak joined
[14:08] *** rindolf joined
[14:10] *** Ninuor is now known as Rounin

[14:11] *** zeleiadi joined
[14:11] <jepeway> masak: got time, inclination & headspace for DateTime questions? they're general "how do I contribute" q's, so nothing fiddly...I hope.

[14:12] <moritz> jepeway: I might be able to answer them too

[14:12] <moritz> (depending on the actual questions, of course :-)

[14:12] <jepeway> moritz: ah, cool.

[14:13] <jepeway> so...I found some funkiness in DateTime wrt how it handled $.timezone.

[14:14] <jepeway> I thought to just subclass DateTime and override methods where I was having trouble, writing tests that showed where the trouble was.

[14:14] <moritz> jepeway: can you give a very short example of a funkiness?

[14:14] <jepeway> now, I'm thinking the thing to do is fork, gin up tests that show the DateTime vs. timezone integration problems, fix those if I can, and send a pull request.

[14:15] <moritz> yes, pull request sounds right

[14:15] <jepeway> Sure, it's in today's backlog.

[14:15] <jepeway> Just a sec.

[14:15] <tony-o> FROGGS: is the intention of branch ofjson to get rid of JSON::Pretty from core?

[14:16] <moritz> m: say DateTime.new(0, :timezone(3600)).later(seconds => 0).

[14:16] <camelia> rakudo-moar dc910b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/aoWUFwTsNg␤Confused␤at /tmp/aoWUFwTsNg:1␤------> 030, :timezone(3600)).later(seconds => 0).7⏏5<EOL>␤    expecting any of:␤        dotty method or postfix␤»

[14:16] <moritz> m: say DateTime.new(0, :timezone(3600)).later(seconds => 0)

[14:16] <camelia> rakudo-moar dc910b: OUTPUT«1970-01-01T00:00:00Z␤»

[14:16] <moritz> m: say DateTime.new(0, :timezone(3600))

[14:16] <camelia> rakudo-moar dc910b: OUTPUT«1970-01-01T01:00:00+0100␤»

[14:16] <jepeway> http://irclog.perlgeek.de/perl6/2015-04-26#i_10505262

[14:16] <moritz> yes, that does look funky

[14:16] <moritz> a fix would be very welcome

[14:17] <jepeway> there are a few other instances of when $.timezone is sliced off.

[14:17] <jepeway> ok, will try.

[14:17] <FROGGS> tony-o: the intend is to have something faster for the common case

[14:17] *** araujo left
[14:17] <jepeway> I've forked rakudo, created a branch for this work, and am now thinking I need to fork roast, too.

[14:17] <jepeway> sound right?

[14:17] *** ShimmerFairy left
[14:17] <moritz> jepeway: no

[14:17] <jepeway> ok, set me straight.

[14:17] <moritz> jepeway: tell me your github username, and I'll give you direct access to roast

[14:18] <jepeway> uh...wowsers.

[14:18] <moritz> jepeway: then you need to branch only, not fork, branch + pull request

[14:18] <jepeway> it's cjepeway.

[14:18] <moritz> jepeway: invitation sent

[14:18] <jepeway> moritz: but I should keep the rakudo fork & its branch, though?

[14:19] <moritz> jepeway: yes

[14:19] <moritz> jepeway: for legal reasons (The Perl Foundation owns the rakudo code) we aren't as freely with our rakudo access

[14:19] <jepeway> moritz: gotcha.  re: invite: does it show up on gh or via e-mail.

[14:20] <jepeway> moritz: sure, understood.

[14:20] <moritz> jepeway: typically both; might depend on your github email settings

[14:20] *** raiph joined
[14:20] *** ShimmerFairy joined
[14:20] <El_Che> this is a funny book cover: http://allperlbooks.com/book/en/the-perl-community

[14:22] <FROGGS> hehe

[14:24] <jepeway> moritz: hm. how do y'all handle "some things on gh I do for $dayjob and some things I don't?"  2 different accounts? [gh newbie, here].

[14:25] <moritz> jepeway: I have one account, but the work stuff lives in organizations on github, not under my personal account

[14:25] <moritz> (though the account is a member of the organizations, of course)

[14:26] <jepeway> moritz: oh, right.  do you attach your personal e-mail to your account then?  or can it have >1?

[14:27] <moritz> jepeway: you can tell github about several e-mail-addreses that will be recognized as your own

[14:27] <moritz> jepeway: though it'll only ever send notifications to the primary email address

[14:28] <tony-o> FROGGS: so is the json:pretty going to stay in core even when that gets merged in?

[14:28] <FROGGS> tony-o: I think so, yes

[14:29] <FROGGS> because we need a fallback, for example

[14:29] *** colomon joined
[14:29] <tony-o> awesome - thanks

[14:32] <jepeway> moritz: accepted. tyvm.

[14:33] <jepeway> moritz: so, create a roast branch, switch to that inside my local copy of rakudo, and carry on?

[14:33] <moritz> jepeway: yes

[14:33] * jepeway is kinda freaking out, here, over this...privilege, I guess.

[14:34] <moritz> jepeway: don't freak out. It's all under version control. If you screw up, we can just revert.

[14:34] <moritz> jepeway: also you're hardly special; there are 173 members in the team I just invited you to :-)

[14:35] <jepeway> moritz: understood.  the freakout is more...wow, me, too?

[14:35] <moritz> jepeway: and I feel like I've sucked you into the Perl 6 community successfully :-)

[14:35] *** mr-foobar left
[14:35] <FROGGS> jepeway: welcome on board :o)

[14:37] *** mr-foobar joined
[14:37] <jepeway> moritz: heh & thanks.

[14:39] <jepeway> moritz: so, first foobar to correct - gh or browser ate my branch name. was going for date-time-slices-tz but got just a plain 'date'.  how do i either rename it or kill it & branch again

[14:39] *** zeleiadi left
[14:39] <moritz> jepeway: rename the branch

[14:40] <moritz> git branch -m date date-time-slices-tz

[14:43] <jepeway> moritz: got it. hrm... 'error: refname refs/heads/date not found'

[14:43] <moritz> jepeway: how did you create the branch?

[14:44] <moritz> jepeway: on github, somehow? or locally in your git repo?

[14:44] <moritz> ah, it's on github

[14:44] <jepeway> moritz: from gh, yes.

[14:44] <moritz> jepeway: don't worry about that; just create a local branch with the name you want

[14:44] <jepeway> moritz: check.

[14:45] <moritz> jepeway: and do your changes there, commit, and then 'git push origin <thebranchname>' once you're done

[14:45] <moritz> and I just did a   git push --delete origin date  to get rid of the wrongly named branch on github

[14:46] <jepeway> moritz: again, thankee.

[14:46] <jepeway> well, off to write some tests...

[14:46] <RabidGravy> going back to the concurrency doc briefly would it be fair to say that Scheduler is the lowest level api that is recommended for user code?

[14:47] <RabidGravy> (but even the with caveats)

[14:48] *** |Tux| joined
[14:49] <moritz> RabidGravy: the only thing a typical user will need is occasionally passing CurrentThreadScheduler to the :$scheduler param of some methods

[14:50] *** lolisa left
[14:51] *** ggoebel left
[15:02] *** molaf__ joined
[15:05] *** molaf_ left
[15:06] *** mr-fooba_ joined
[15:06] *** mr-foobar left
[15:11] *** ggoebel joined
[15:19] *** mr-fooba_ left
[15:21] *** telex left
[15:22] *** telex joined
[15:30] *** diana_olhovik left
[15:32] *** MARTIMM joined
[15:37] * moritz blug: http://perlgeek.de/blog-en/perl-6/2015-writing-docs.html

[15:39] *** eli-se left
[15:39] *** rarara left
[15:40] *** colomon left
[15:40] <dalek> rakudo/nom: 265c009 | peschwa++ | src/vm/jvm/ (2 files):

[15:40] <dalek> rakudo/nom: Simplifiy JavaHOW.

[15:40] <dalek> rakudo/nom: 

[15:40] <dalek> rakudo/nom: Instead of reimplementing partial functionality from MethodContainer we might

[15:40] <dalek> rakudo/nom: as well just C<does> it.

[15:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/265c009da5

[15:41] *** beastd joined
[15:41] *** skids joined
[15:42] *** konsolebox joined
[15:42] <jepeway> moritz: do I still 'git push origin <branch>' if I have previously 'git checkout <branch>'?  or will 'git push' DTRT?

[15:44] <psch> moritz++ # blog

[15:44] <psch> moritz: the "kinda" made me stumble a bit, it feels a bit too casual for the rest of the post

[15:45] <RabidGravy> jepeway, yes you should specify the branch unless you have explicitly  --set-upstream on the local branch

[15:46] <jepeway> RabidGravy: check.

[15:46] <psch> the sentiment in general seems to mirror what i got from pmichaud++'s spec talk slides

[15:46] *** gcole joined
[15:46] <psch> i.e. "go back and rethink, if it makes your current task easier" applies to language design and documentation and implementing and...

[15:47] <psch> (which, coincidinkly, is what my last commit is about \o/ )

[15:48] *** Ven left
[15:48] *** _mg_ joined
[15:51] *** gcole left
[15:51] *** ggoebel left
[15:52] *** Ven joined
[15:52] *** btyler joined
[15:55] *** _mg_ left
[15:56] <nine> Are there any stats on the #perl 6 user count?

[16:02] *** ggoebel joined
[16:03] *** Vlavv left
[16:04] *** eli-se joined
[16:04] *** _mg_ joined
[16:04] <dalek> roast/date-time-slices-tz: d5b51d1 | (Chris Jepeway)++ | S32-temporal/DateTime.t:

[16:04] <dalek> roast/date-time-slices-tz: Test that DateTime.later() will preserve $.timezone

[16:04] <dalek> roast/date-time-slices-tz: review: https://github.com/perl6/roast/commit/d5b51d1565

[16:05] <masak> nine: do you mean Rakudo users? or people on the IRC channel?

[16:07] *** _mg_ left
[16:08] *** konsolebox left
[16:11] <nine> masak: people on the channel

[16:11] <nine> moritz: I just wonder about all those new names in the past few months :)

[16:15] *** Vlavv joined
[16:16] <masak> well, the obvious guess is that people were enthused or drawn in by TimToady++'s announcement.

[16:17] <masak> same thing happened quite clearly with Rakudo Star, back in the day.

[16:18] <DrForr> Pugs as well, to an extent.

[16:18] *** lizmat joined
[16:19] <b2gills> lizmat: the problem wasn't with the arguments to `.rotor` it was with the flattening of the results

[16:20] *** yqt joined
[16:32] <jdv79> maybe a spell checker wouldnt be a bad idea - from http://doc.perl6.org/type/List#method_rotor:  "method rotor(*@cylce, Bool() :$partial)"

[16:35] *** espadrine joined
[16:37] *** tinyblak left
[16:42] *** dnmfarrell joined
[16:43] <dnmfarrell> omg I just realized grammars can be inherited ... mind *blown*

[16:44] <dnmfarrell> I was struggling through writing a custom pseudopod parser using XML::Simple. Now I can just override my grammar for the custom tokens

[16:46] <arnsholt> Yup. It's a class like any other

[16:51] *** tinyblak joined
[16:52] *** molaf__ left
[17:07] *** mr-foobar joined
[17:11] <PerlJam> m: (1..10).rotor(3,-2).perl.say;  # A new "feature"  ;)

[17:11] <camelia> rakudo-moar 265c00: OUTPUT«((1, 2, 3), (), (2, 3, 4), (), (3, 4, 5), (), (4, 5, 6), (), (5, 6, 7), (), (6, 7, 8), (), (7, 8, 9), (), (8, 9, 10), ())␤»

[17:12] *** dnmfarrell left
[17:13] <TimToady> we'll probably disallow negatives there

[17:15] <TimToady> hmm, I think the junctional methods are still flattening

[17:15] <TimToady> m: say ((1,2,3),(4,5,6)).any == 2

[17:15] <camelia> rakudo-moar 265c00: OUTPUT«any(False, True, False, False, False, False)␤»

[17:15] <TimToady> ayup

[17:18] *** Ven left
[17:22] *** mr-foobar left
[17:22] <TimToady> from a GLR point of view it's troubling to see both (@array) and (*@array) signatures to Junction.new, which means you could never make a junction of arrays without worrying about the degenerate case of a single array stripping the arrayness

[17:22] <TimToady> this is not a place where we should be guessing

[17:24] *** mr-foobar joined
[17:31] *** yqt left
[17:35] *** gcole joined
[17:35] *** hobbs left
[17:37] *** hobbs joined
[17:39] *** yqt joined
[17:40] *** gcole left
[17:40] *** raiph left
[17:42] *** nwc10_ is now known as nwc10

[17:44] <TimToady> the flattening assumptions run deep inside junctions...

[17:45] <b2gills> m: (1..10).rotor( 3 => -2, 0 ).perl.say;

[17:45] <camelia> rakudo-moar 265c00: OUTPUT«((1, 2, 3), (), (2, 3, 4), (), (3, 4, 5), (), (4, 5, 6), (), (5, 6, 7), (), (6, 7, 8), (), (7, 8, 9), (), (8, 9, 10), ())␤»

[17:46] <TimToady> the assumptions run deep in the tests, too...

[17:49] <dalek> roast/date-time-slices-tz: 16ce2be | (Chris Jepeway)++ | S32-temporal/DateTime.t:

[17:49] <dalek> roast/date-time-slices-tz: Use fixtures with more distinctive values in .later() test

[17:49] <dalek> roast/date-time-slices-tz: review: https://github.com/perl6/roast/commit/16ce2bef22

[17:52] *** espadrine left
[17:57] *** BenGoldberg left
[17:57] *** BenGoldberg joined
[18:05] *** raiph joined
[18:05] <jdv79> what's wrong with a negative overlap on rotor?  though i can't think of a use case it makes sense.

[18:08] <raydiak> that's not an overlap any more

[18:11] <jdv79> yeah, wording might need help but besides that

[18:12] <raydiak> we now express it in terms of gap (which is a negative overlap the old way), and it goes in the value of a pair...so rotor(3,-2) is now written rotor(3=>2) because (3,-2) now means (3=>0, -2=>0)

[18:12] <raydiak> if I understand correctly

[18:13] <FROGGS> TimToady: S05 mentions <:!Blk<ASCII>> but that's an illegal colonpair... but I guess we still want to support it?

[18:17] <dalek> doc: d24d64d | (Justin DeVuyst)++ | lib/Type/List.pod:

[18:17] <dalek> doc: Fix Typos.

[18:17] <dalek> doc: review: https://github.com/perl6/doc/commit/d24d64d0c0

[18:19] <jdv79> oh, i missed that distinction.  i guess "feature" should have clued me in to look closer.  thanks.

[18:20] <raydiak> yw :)

[18:22] <dalek> rakudo/nom: 6a40b9f | lizmat++ | / (2 files):

[18:22] <dalek> rakudo/nom: Bring same API to Supply.rotor (from List.rotor)

[18:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a40b9fe5b

[18:23] <dalek> roast: 02522ce | lizmat++ | S17-supply/rotor.t:

[18:23] <dalek> roast: Test new Supply.rotor multiple gap functionality

[18:23] <dalek> roast: review: https://github.com/perl6/roast/commit/02522cec9c

[18:27] <raydiak> m: 0.rotor: 0

[18:28] <camelia> rakudo-moar 265c00: OUTPUT«(timeout)»

[18:29] <lizmat> raydiak: it's the other wat around

[18:29] <lizmat> *way

[18:29] <lizmat> previously, you could specify an overlap (aka , steps backward)

[18:29] <lizmat> now you should specify a gap, which is intrinsically forward

[18:30] <lizmat> if you want overlap, you need a negative gap

[18:30] *** espadrine_ joined
[18:30] <raydiak> isn't that what I said?

[18:31] <raydiak> well, with less detail...I was just describing the present situation relative to the old one

[18:31] <lizmat> previously, rotor only took 2 params: elems / overlap

[18:31] <lizmat> now it takes a whole range of values

[18:31] <lizmat> if a Pair, then the key is the elems and the value is the gap

[18:32] <lizmat> if something else, then it is the elems, and the gap is 0

[18:32] <lizmat> m: (1..10).rotor(3,-2).perl.say   # should probably die on negative number of elems

[18:32] <camelia> rakudo-moar 265c00: OUTPUT«((1, 2, 3), (), (2, 3, 4), (), (3, 4, 5), (), (4, 5, 6), (), (5, 6, 7), (), (6, 7, 8), (), (7, 8, 9), (), (8, 9, 10), ())␤»

[18:33] <lizmat> m: (1..10).rotor(3,0).perl.say   # same

[18:33] <camelia> rakudo-moar 265c00: OUTPUT«((1, 2, 3), (), (4, 5, 6), (), (7, 8, 9), ())␤»

[18:33] <lizmat> huh?

[18:33] <b2gills> the old `.rotor(3,-2)` is now `.rotor( 3 => 2 )` just like radiak wrote

[18:33] <raydiak> 3 elems, no elems, 3 elems ... *

[18:34] <b2gills> m: (1..10).rotor(3 => -2, 0).perl.say

[18:34] <camelia> rakudo-moar 265c00: OUTPUT«((1, 2, 3), (), (2, 3, 4), (), (3, 4, 5), (), (4, 5, 6), (), (5, 6, 7), (), (6, 7, 8), (), (7, 8, 9), (), (8, 9, 10), ())␤»

[18:35] *** espadrine_ is now known as espadrine

[18:35] <FROGGS> what is TR18 which is referenced from S05?

[18:36] <raydiak> (my explanation would have been better if I'd realized that the third major change is that it takes multiple inputs now, like lizmat++ clued me in on)

[18:36] <raydiak> FROGGS: maybe this? http://www.unicode.org/reports/tr18/

[18:36] <FROGGS> ahh, yeah

[18:37] <lizmat> m: (1..10).rotor(3 => 1, 2 => -1).perl.say

[18:37] <camelia> rakudo-moar 265c00: OUTPUT«((1, 2, 3), (5, 6), (6, 7, 8))␤»

[18:37] <lizmat> m: (1..10).rotor(3 => 1, 2 => -1,:partial).perl.say

[18:37] <dalek> perl6-roast-data: 66079ed | coke++ | / (9 files):

[18:37] <dalek> perl6-roast-data: today (automated commit)

[18:37] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/66079ed369

[18:37] <camelia> rakudo-moar 265c00: OUTPUT«((1, 2, 3), (5, 6), (6, 7, 8), (10,))␤»

[18:39] <eli-se> so many obscure methods

[18:43] <[Coke]> NYC perl mongers hackathon this coming saturday. there is at least one person signed up for the perl 6 track (which is: clean up roast)

[18:44] <jdv79> that's lonely ole me:(

[18:44] <jdv79> party of one is always a blast

[18:45] <jdv79> esp since i move out of my apt of 7 years 2 days earlier and have to commute 2 hours in and out for the hackathon

[18:45] *** mr-foobar left
[18:48] *** mr-foobar joined
[18:49] <lizmat> afk again&

[18:49] <moritz> Debian Jessie released! \o/

[18:49] <moritz> hack et al now run stable again :-)

[18:50] *** pippo left
[18:50] <[Coke]> Note: putting [moar] i the subject does not set the moar vm flag on the ticket.

[18:51] <[Coke]> jepeway: tagged 124391 as Moar

[18:52] *** hobbs left
[18:53] *** hobbs joined
[18:55] <jdv79> hobbs: you coming?

[18:57] *** BenGoldberg left
[18:57] *** BenGoldberg joined
[18:58] <[Coke]> jdv79: looking forward to meeting you in person!

[18:58] <[Coke]> I don't think there's enought perl 5 interest in albany to get anyone else down there, let alone perl 6 interest.

[19:00] *** mr-foobar left
[19:01] <jepeway> [Coke]: thankee.

[19:03] *** coffee` left
[19:06] *** gcole joined
[19:06] *** coffee` joined
[19:10] *** gcole left
[19:11] <dalek> perl6-examples: 3d447fe | paultcochrane++ | categories/rosalind/dna-gerdr.pl:

[19:11] <dalek> perl6-examples: Make dna-gerdr.pl calculate the correct result

[19:11] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/3d447fe64b

[19:15] <b2gills> m: <a b c c>.unique>>.^name

[19:15] <camelia> rakudo-moar 6a40b9: ( no output )

[19:15] <b2gills> m: say <a b c c>.unique>>.^name

[19:15] <camelia> rakudo-moar 6a40b9: OUTPUT«List␤»

[19:15] *** domidumont left
[19:16] <dalek> perl6-examples: 1f1c8df | paultcochrane++ | t/categories/rosalind.t:

[19:16] <dalek> perl6-examples: [rosalind] test examples c*..e*

[19:16] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/1f1c8df358

[19:21] *** zakharyas joined
[19:24] *** raiph left
[19:24] *** diana_olhovik joined
[19:28] <b2gills> m: say Int.^roles(:transitive)

[19:28] <camelia> rakudo-moar 6a40b9: OUTPUT«Cannot find method 'roles'␤  in any roles at src/gen/m-Metamodel.nqp:2834␤  in block <unit> at /tmp/B5r7TYcdZr:1␤␤»

[19:28] *** rindolf left
[19:30] <b2gills> m: say Int.^roles; say Real.^roles

[19:30] <camelia> rakudo-moar 6a40b9: OUTPUT«(Real)␤Method 'roles' not found for invocant of class 'Perl6::Metamodel::ParametricRoleGroupHOW'␤  in block <unit> at /tmp/3gA4M8Db_A:1␤␤»

[19:37] <RabidGravy> are there any other Scheduler implementations other than ThreadPoolScheduler and CurrentThreadScheduler in existence?

[19:41] <jnthn> RabidGravy: The GTK::Simple one has a scheduler that promises to run code on the UI thread.

[19:41] <yoleaux> 11:13Z <lizmat> jnthn: this may requires some attention: #124394

[19:41] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124394

[19:42] <jnthn> lizmat: That's hilarious. I add 1000s of tests to get NFG stuff right, pass just about all existing spectests except a tiny handful that are NFG-incompatible...and then this sneaks through. :P

[19:43] <RabidGravy> jnthn, ah got ya 

[19:55] *** mr-foobar joined
[19:55] *** raiph joined
[20:01] *** FROGGS[mobile] left
[20:06] <RabidGravy> I can't think of another, even hypothetical, reason to implement a different scheduler

[20:06] *** tinyblak_ joined
[20:06] <RabidGravy> oh well

[20:07] *** tinyblak left
[20:07] <jnthn> RabidGravy: Maybe you want to implement some kind of custom priority mechanism.

[20:08] <RabidGravy> ah yes good one

[20:08] <moritz> or one that binds threads to particular CPUs or something

[20:10] <RabidGravy> yep

[20:14] <lizmat> jnthn: leave it to Tux to find the sneaky ones

[20:14] <jnthn> lizmat: Aye. Already got a test added to spectest, working on fix now

[20:15] <lizmat> jnthn: I also added a test for it

[20:15] <lizmat> t/spec/S16-filehandles/io.t

[20:15] <lizmat> 335:# RT #124394

[20:15] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124394

[20:15] <RabidGravy> you can never have too many tests

[20:16] <lizmat> .oO( jnthn just wants to increase the number of todo's passing :-)

[20:16] <jnthn> lizmat: ok, then we'll have two I guess :P

[20:18] *** mr-foobar left
[20:18] *** virtualsue joined
[20:20] <lizmat> jnthn: what is the reason for the existence of World.nqp?  Why aren't all those methods just subs in Actions.nqp ?

[20:21] <dalek> perl6-examples: ac44bbc | paultcochrane++ | categories/rosalind/lcsq-grondilu.pl:

[20:21] <dalek> perl6-examples: Sample output matches that on Rosalind web site

[20:21] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/ac44bbca2b

[20:21] <dalek> perl6-examples: bc1834a | paultcochrane++ | t/categories/rosalind.t:

[20:21] <dalek> perl6-examples: [rosalind] test examples f*..l*

[20:21] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/bc1834a2bf

[20:21] <dalek> perl6-examples: 938ad49 | paultcochrane++ | .travis.yml:

[20:21] <dalek> perl6-examples: Add LWP::Simple to list of modules to install

[20:21] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/938ad49796

[20:21] <dalek> perl6-examples: 468031e | paultcochrane++ | t/categories/rosalind.t:

[20:21] <dalek> perl6-examples: [rosalind] test problem solutions m*..r*

[20:21] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/468031e02a

[20:21] <dalek> perl6-examples: f5fb057 | paultcochrane++ | README.md:

[20:21] <dalek> perl6-examples: Mention build status in README on GitHub

[20:21] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/f5fb0572ac

[20:22] *** mohij joined
[20:23] <labster> Added Perl 6 to http://testanything.org/testing-with-tap/perl.html

[20:23] <masak> labster++

[20:23] <jnthn> lizmat: Actions is about operations (and so building QAST), World is about declarations that result in objects (that may get serialized)

[20:23] <FROGGS> m: say 1 ~~ 0 ^..^ 1

[20:23] <camelia> rakudo-moar 6a40b9: OUTPUT«False␤»

[20:23] <jnthn> lizmat: It's equally legit to call methods on $*W from Grammar too

[20:23] <FROGGS> m: say 0 ~~ 0 ^..^ 1

[20:23] <camelia> rakudo-moar 6a40b9: OUTPUT«False␤»

[20:24] <jnthn> Tangling operation and declaration was one of the biggest design problems in earlier versions of Rakudo.

[20:24] <jnthn> (and a large part of what was sorted out during the "nom" swtich)

[20:24] <jnthn> *switch

[20:25] *** darutoko left
[20:26] <lizmat> I;m about to move sub import from Grammar to World and make it a method

[20:26] <lizmat> would you consider that a good thing or not ?

[20:27] <lizmat> (along with the new "do_pragma" for that matter)

[20:27] <lizmat> trying to more generalize module loading

[20:29] <masak> I confess to not knowing those parts well, so let me ask a general question: what makes it feel like `sub import` belongs more in World than in Grammar?

[20:29] <lizmat> for one, do_import calls World methods already

[20:30] <jnthn> import happens at compile time and results in declarations

[20:30] <jnthn> So to be it'd feel natural in World

[20:31] <jnthn> Most of the compiler-related use stuff lives in World already

[20:31] <moritz> +1 to import in World

[20:31] <lizmat> ok, then I'll proceed: the diff sofar: https://gist.github.com/lizmat/692ba866a8677451bf8f

[20:31] <masak> yeah, sounds like `import` is already feature-envious of World.

[20:32] <masak> ++lizmat

[20:34] * skids points out PR#411 while World is being worked on.

[20:34] <FROGGS> $ perl6 -e 'say "½¼" ~~ / <:NumericValue(0 ^..^ 1)>+ /'

[20:34] <FROGGS> ｢½¼｣

[20:34] <FROGGS> ^^ that's what I push tomorrow, have to port it to jvm also

[20:36] <masak> FROGGS: nice :)

[20:36] <FROGGS> gnight

[20:36] *** FROGGS left
[20:36] <dalek> rakudo/nom: 1826173 | skids++ | src/ (2 files):

[20:36] <dalek> rakudo/nom: Add typed exception X::NYI::Available for "Please install X for Y support."

[20:36] <dalek> rakudo/nom: Use it for Inline::Perl5

[20:36] <dalek> rakudo/nom: This is more for the ecosystem's use than internal, though.

[20:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/18261735f5

[20:36] <dalek> rakudo/nom: df04346 | lizmat++ | src/ (2 files):

[20:36] <dalek> rakudo/nom: Merge pull request #411 from skids/xnyi

[20:36] <dalek> rakudo/nom: 

[20:36] <dalek> rakudo/nom: Add typed exception X::NYI::Available

[20:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/df043469b6

[20:36] <skids> lizmat++

[20:36] <labster> +1 for import in World, even though I don't know anything about it, because all of the $*W become self

[20:37] * jnthn testing a fix for the 1-byte IO bug

[20:37] <lizmat> yes, there was that as well  :-)

[20:37] <jnthn> (Turns out it was all the way down in the UTF-8 decoder.)

[20:38] <labster> code is screaming "I belong elsewhere" :O

[20:38] <lizmat> jnthn: yeah, I figured it'd be somewhere deep in the bowels

[20:38] <jnthn> Well, I was expecting it to be in the normalization code. :)

[20:38] *** mohij left
[20:39] <jnthn> Turns out I had a thinko when integrating the normalization stuff into the UTF-8 decode stream stuff.

[20:40] * lizmat is glad Tux found it now

[20:40] <jnthn> Me too

[20:40] <jnthn> But this is why I prefer to land Big Things a little after releases.

[20:41] <lizmat> yeah...  confusing times, but better that way

[20:41] <labster> jnthn++ for finding it.

[20:43] <labster> Does anyone use the releases?  I would assume that most people inside the development process use the latest commit, and most people outside use the Star releases.

[20:43] <jnthn> labster: The Star releases pick compiler releases.

[20:43] <jnthn> labster: So anyone using a Star is basically using a release.

[20:44] <labster> jnthn: Ah, OK.  Never did the Star release process, maybe some day.

[20:45] * jnthn almost had heart failure on seeing the number of spectest failures, then realizes his Rakudo is behind and they're all because he needs the isa-ok :)

[20:46] <skids> labster: right now I am updating my module to latest commit but post xmas I may go back to only updating on releases, and then later only to star.  It is good to have milestones.

[20:47] <dalek> perl6-examples: cf570b2 | paultcochrane++ | categories/rosalind/tran-grondilu.pl:

[20:47] <dalek> perl6-examples: Output expected number of decimal places

[20:47] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/cf570b2096

[20:47] <dalek> perl6-examples: 32484f9 | paultcochrane++ | t/categories/rosalind.t:

[20:47] <dalek> perl6-examples: [rosalind] add tests for remaining problem solutions

[20:47] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/32484f928f

[20:48] <labster> skids: Milestones are good.  I assume we use them informally for regression testing as well, when a git-bisect seems like a bit much.

[20:52] *** gcole joined
[20:55] <lizmat> jnthn: sorry about that

[20:56] <labster> .oO ( isa-ok Mario; )

[20:56] <jnthn> lizmat: No worries, I thought I'd pulled but somehow forgot.

[20:56] *** beastd left
[20:56] *** gcole left
[20:58] *** diana_olhovik left
[21:00] *** MARTIMM left
[21:01] <jepeway> so, I wrote a little thing to stuff call sites into back traces: https://gist.github.com/42215154aff709d3efd7.git

[21:02] <jepeway> and I'm looking for pointers on making it more idiomatic p6.

[21:04] <dalek> nqp: 15b3ef9 | jnthn++ | tools/build/MOAR_REVISION:

[21:04] <dalek> nqp: Bump MOAR_REVISION for IO fixes.

[21:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/15b3ef993a

[21:08] <jepeway> er...call site == source code of line in backtrace

[21:08] *** cognominal joined
[21:11] <dalek> rakudo-star-daily: 98e8ad5 | coke++ | log/ (2 files):

[21:11] <dalek> rakudo-star-daily: today (automated commit)

[21:11] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/98e8ad5343

[21:12] <dalek> rakudo/nom: 58213db | jnthn++ | tools/build/NQP_REVISION:

[21:12] <dalek> rakudo/nom: Bump NQP_REVISION to get MoarVM IO fixes.

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/58213db079

[21:14] *** noganex_ left
[21:14] <dalek> roast: c765b8c | jnthn++ | S16-io/basic-open.t:

[21:14] <dalek> roast: Test file not found error includes filename.

[21:14] <dalek> roast: 

[21:14] <dalek> roast: Hopefully covers RT #124391, where a use-after-free resulted in errors

[21:14] <dalek> roast: or corruption when doing this error reporting.

[21:14] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124391

[21:14] <timotimo> hi

[21:14] <dalek> roast: review: https://github.com/perl6/roast/commit/c765b8cea2

[21:14] <dalek> roast: 45e3fdf | jnthn++ | S16-io/basic-open.t:

[21:14] <dalek> roast: Test for RT #124394 (.get on 1-byte file).

[21:14] <dalek> roast: review: https://github.com/perl6/roast/commit/45e3fdf9e9

[21:14] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124394

[21:14] <dalek> roast: e37e241 | jnthn++ | / (252 files):

[21:14] <dalek> roast: Merge branch 'master' of git://github.com/perl6/roast

[21:14] <dalek> roast: review: https://github.com/perl6/roast/commit/e37e241942

[21:15] <jnthn> oops 

[21:15] *** noganex joined
[21:15] <RabidGravy> I'm minded to push this half finished concurrency.pod to docs to attract early criticism unless anyone has any objections

[21:15] <jnthn> otoh, I've still introduced a couple of orders of magnitude less merge commits than us merging github pull requests :P

[21:15] <timotimo> go for it! gravy

[21:16] *** TomHyer joined
[21:16] <dalek> doc: 7f69b64 | (Jonathan Stowe)++ | lib/Language/concurrency.pod:

[21:16] <dalek> doc: add concurrency doc

[21:16] <dalek> doc: review: https://github.com/perl6/doc/commit/7f69b643c5

[21:16] <dalek> doc: acc32f7 | (Jonathan Stowe)++ | lib/Language/concurrency.pod:

[21:16] <dalek> doc: Re-jig headings

[21:16] <dalek> doc: review: https://github.com/perl6/doc/commit/acc32f77cb

[21:16] <dalek> doc: 149bca4 | (Jonathan Stowe)++ | lib/Language/concurrency.pod:

[21:16] <dalek> doc: document threads

[21:16] <dalek> doc: review: https://github.com/perl6/doc/commit/149bca4868

[21:16] *** bjz left
[21:16] <dalek> doc: 81bdd75 | (Jonathan Stowe)++ | lib/Language/concurrency.pod:

[21:16] <dalek> doc: Add scheduler stuff

[21:16] <dalek> doc: review: https://github.com/perl6/doc/commit/81bdd75bce

[21:16] <dalek> doc: cd40d42 | (Jonathan Stowe)++ | lib/Type/List.pod:

[21:16] <dalek> doc: Merge branch 'master' of github.com:perl6/doc

[21:16] <dalek> doc: review: https://github.com/perl6/doc/commit/cd40d4268a

[21:17] <dalek> doc: 1eb9518 | (Jonathan Stowe)++ | lib/Language/concurrency.pod:

[21:17] <dalek> doc: Done with schedulers

[21:17] <dalek> doc: review: https://github.com/perl6/doc/commit/1eb9518f43

[21:17] <TomHyer> I would like to mention what looks to me like an implementation bug in Rakudo (but maybe just user error)

[21:17] <TomHyer> Gist is at https://gist.github.com/TomHyer/19fc6729b97bceb858b2

[21:18] <TomHyer> The program merges text files, with a separator string so they can be de-merged

[21:18] <TomHyer> nothing sophisticated

[21:19] <TomHyer> the symptom is that, no matter what I put in the separator string, I cannot get a carriage return between it and the next line

[21:19] *** espadrine left
[21:19] <TomHyer> i.e., the "\n" seen in the program has no effect

[21:21] <jnthn> TomHyer: It's not that you're on Windows and viewing the file in something like Notepad that doesn't recognize a lone \n, and wants \r\n instead?

[21:22] <TomHyer> checking

[21:22] *** zakharyas left
[21:23] <RabidGravy> isnt't there a .nl somewhere that would make that partoble?

[21:23] <RabidGravy> portable

[21:23] <TomHyer> jnthn:  got it in one thanks

[21:24] <TomHyer> I have been using Perl (4 and 5 not 6) on Windows for a long time and don't remember being bitten by this

[21:24] <timotimo> how do i get access to my irc via this compjter i dont trust sufficiently...

[21:25] <jnthn> I think 5 may magically do some re-writing of \n. We may yet do that in 6 too.

[21:25] <TomHyer> you have my vote already

[21:26] <TomHyer> even in C I don't have to add \r

[21:26] <TomHyer> anyway, thanks for figuring it out

[21:27] *** kaare_ left
[21:30] *** Rounin left
[21:32] *** zeleiadi joined
[21:32] <masak> 'night, #perl6

[21:33] <b2gills> Perl 5 does this with a :CRLF layer on a file-handle ( which is the default on Windows )

[21:33] <lizmat> goodnight masak 

[21:34] *** raiph left
[21:34] <lizmat> I recently specced "nl-saying" in the newio branch

[21:35] <lizmat> that could be set to \r\n if $*DISTRO.is-win

[21:40] *** tinyblak joined
[21:42] <lizmat> good night, #perl6!

[21:42] * jnthn sleeps also; 'night o/

[21:43] *** tinyblak_ left
[21:44] *** raiph joined
[21:53] *** zeleiadi left
[21:53] <TimToady> .tell moritz ss/need to much/need to know much/

[21:53] <yoleaux> TimToady: I'll pass your message to moritz.

[21:57] *** yqt left
[22:04] <dalek> doc: 3c3ce18 | (Jonathan Stowe)++ | lib/Language/concurrency.pod:

[22:04] <dalek> doc: typo

[22:04] <dalek> doc: review: https://github.com/perl6/doc/commit/3c3ce183d4

[22:09] *** bjz joined
[22:21] <RabidGravy> I'll be finishing that over the week

[22:30] *** colomon joined
[22:32] *** RabidGravy left
[22:34] *** bjz left
[22:41] *** gcole joined
[22:41] *** rurban joined
[22:45] *** gcole left
[22:47] *** hobbs left
[22:54] *** eli-se left
[22:54] *** telex left
[22:55] *** hobbs joined
[22:56] *** telex joined
[23:04] *** rmgk is now known as Guest32182

[23:04] *** rmgk_ joined
[23:04] *** Guest32182 left
[23:04] *** rmgk_ is now known as rmgk

[23:09] <raiph> ++jepeway++ # source code in backtraces hack :) https://gist.github.com/cjepeway/42215154aff709d3efd7 (<-- removed `.git`)

[23:11] <jepeway> raiph: ty, ty.

[23:12] <jepeway> raiph: any thoughts re: style improvements, by any chance?

[23:23] <dalek> roast/date-time-slices-tz: 1ba8a0d | (Chris Jepeway)++ | S32-temporal/DateTime.t:

[23:23] <dalek> roast/date-time-slices-tz: Add test for non-short-circuited code path in .later

[23:23] <dalek> roast/date-time-slices-tz: review: https://github.com/perl6/roast/commit/1ba8a0d13f

[23:29] *** cognominal left
[23:39] <jepeway> well, gtg.  see y'all.later(days => (1..6).pick)

[23:40] *** virtualsue left
[23:41] *** cognominal joined
[23:42] *** gcole joined
[23:46] <TimToady> o/

[23:46] *** gcole left
[23:46] *** tinyblak left
[23:51] *** gfldex left
[23:55] *** dayangkun joined
[23:56] <dalek> rakudo/nom: b80de35 | TimToady++ | src/core/ (2 files):

[23:56] <dalek> rakudo/nom: no flattening for .and/.all/.one/.none methods

[23:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b80de35c21

