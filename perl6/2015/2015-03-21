[00:00] *** BenGoldberg joined
[00:03] *** eli-se left
[00:05] <Ulti> m: my $s = 'CamelCase'; $s ~~ s:g/(<A..Z>)/{ lc $0 }/; say $s;

[00:05] <camelia> rakudo-moar ffd661: OUTPUT«5===SORRY!5=== Error while compiling /tmp/FkILOov0Mm␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ␤at /tmp/FkILOov0Mm:1␤------> 3my $s = 'CamelCase'; $s ~~ s:g/(<A7⏏5..Z>)/{ lc $0 }/; say $s;␤»

[00:05] <Ulti> m: my $s = 'CamelCase'; $s ~~ s:g/(<[A..Z]>)/{ lc $0 }/; say $s;

[00:05] <camelia> rakudo-moar ffd661: OUTPUT«camelcase␤»

[00:05] <Ulti> weird

[00:05] <Ulti> locally thats not what I get

[00:06] <Ulti> from the REPL though

[00:06] *** rurban_ left
[00:07] <Ulti> wow that's an annoying difference between the REPL and not

[00:08] <Ulti> I spent an hour just thinking I didn't /get/ P6 regex and watched masak++ tutorial talk just to be sure :S

[00:09] *** Khisanth joined
[00:10] <Ulti> so if you have $s ~~ s:g/(<[A..Z]>)/{ "_" ~ lc $0 }/; on a line on its own in the REPL $0 is always populated with the first match by the looks of it

[00:11] *** ostomachion left
[00:21] *** skids joined
[00:23] *** gcole_ left
[00:49] *** Khisanth left
[00:50] *** Khisanth joined
[00:56] <TimToady> m: multi foo(Int $x) { }; foo(1 x 10000)

[00:56] <camelia> rakudo-moar cfa497: OUTPUT«Cannot call foo(Str); none of these signatures match:␤    (Int $x)␤  in sub foo at /tmp/kD35riuroE:1␤  in block <unit> at /tmp/kD35riuroE:1␤␤»

[01:02] * skids grumbles at the ever encroaching WATs of bash_completion.

[01:06] *** yqt left
[01:15] *** sunnavy joined
[01:21] *** kurahaupo joined
[01:38] <jdv79> [Coke]: what about tne nyc hackythrong?

[01:43] *** larion left
[01:55] *** adu joined
[01:58] *** ash_gti joined
[01:59] *** larion joined
[02:01] *** ash_gti left
[02:06] *** ash_gti joined
[02:07] *** ash_gti left
[02:09] *** khisanth_ joined
[02:11] *** Khisanth left
[02:20] *** ash_gti joined
[02:23] *** ggoebel left
[02:36] *** mr-foobar left
[02:37] *** mr-foobar joined
[02:38] *** mr-foobar left
[02:39] *** mr-foobar joined
[02:45] *** ash_gti left
[02:46] *** tinyblak joined
[02:49] *** ash_gti joined
[03:08] *** mr-fooba_ joined
[03:08] *** mr-foobar left
[03:10] *** cdc_ left
[03:11] <Mouq> m: my $s = 'CamelCase'; $s ~~ s:g/(<[A..Z]>)/{ lc $_ }/; say $s;

[03:11] <camelia> rakudo-moar cfa497: OUTPUT«camelcaseamelcamelcasease␤»

[03:11] <Mouq> Ulti: ^^ should always work in REPL

[03:11] <Mouq> Otherwise

[03:11] <Mouq> m: my $s = 'CamelCase'; $s ~~ s:g/(<[A..Z]>){}/{ lc $0 }/; say $s;

[03:11] <camelia> rakudo-moar cfa497: OUTPUT«camelcase␤»

[03:11] <Mouq> Should work

[03:11] *** colomon left
[03:11] <Mouq> Yes this is a bug

[03:11] <Mouq> This gets brought up ~once a week

[03:13] *** noganex_ joined
[03:14] *** ash_gti left
[03:15] *** colomon joined
[03:15] *** noganex left
[03:46] *** fhelmberger joined
[03:50] *** fhelmberger left
[03:51] *** uvtc joined
[03:53] <uvtc> m: say 0.2 + 0.1 - 0.3; say i ** 2;

[03:53] <camelia> rakudo-moar cfa497: OUTPUT«0␤-1+1.22464679914735e-16i␤»

[03:54] <uvtc> Not that I'm a heavy (or light) user of complex numbers.

[03:54] *** ash_gti joined
[03:55] *** vendethiel left
[03:58] *** vendethiel joined
[04:02] *** FROGGS_ joined
[04:06] *** Sqirrel left
[04:06] *** FROGGS left
[04:06] *** ash_gti left
[04:07] *** ash_gti joined
[04:07] *** ash_gti left
[04:21] *** vendethiel left
[04:25] *** vendethiel joined
[04:27] <uvtc> Or, if you prefer:

[04:27] <uvtc> m: say i ** 2 + 1; # expecting 0

[04:27] <camelia> rakudo-moar cfa497: OUTPUT«0+1.22464679914735e-16i␤»

[04:28] *** uvtc left
[04:43] *** zacts joined
[04:43] *** adu left
[04:45] *** molaf left
[05:00] *** BenGoldberg left
[05:04] *** skids left
[05:08] *** nige joined
[05:14] *** Sqirrel joined
[05:25] *** jack_rabbit joined
[05:31] *** vendethiel left
[05:39] *** vendethiel joined
[05:45] *** grondilu joined
[05:45] * grondilu agree i**2 != -1 is LTA

[05:46] <grondilu> *agreees

[05:46] <grondilu> **agrees

[05:46] <moritz> that won't change as long as Complex is based on num

[05:46] <grondilu> why is it anyway?

[05:46] <moritz> because that's efficient

[05:47] <grondilu> ok

[05:47] <moritz> and most Complex math involves trigonometric of exp functions, which can't be mapped exactly to Rats anyway

[05:48] <grondilu> shouldn't we have a 'complex' class as well as a 'Complex' one though?

[05:48] <grondilu> ('complex' being the native version of 'Complex')

[05:49] <moritz> in fact, the generic way to compute a power of a complex is to bring into the form ($magnitude * exp(i * $phase)) and then it*s ($magnitude ** $power * exp(i * $phase * $power ) )

[05:49] <moritz> grondilu: yes

[05:51] <grondilu> if $power is integer it may be not so silly to just repeat multiplications.

[05:52] * grondilu did something like that for its Clifford module once.

[05:52] *** l30n1du5 joined
[05:56] <grondilu> using $x**$n == ($x**2)**($n/2) where $n %% 2

[06:04] *** anaeem1 joined
[06:12] <dalek> rakudo/nom: dfad9ca | Mouq++ | src/core/Complex.pm:

[06:12] <dalek> rakudo/nom: Optimize Complex a bit: Use coercers and Num (not Int) constants

[06:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dfad9ca1a9

[06:13] *** zacts left
[06:15] <moritz> Mouq++

[06:25] <dalek> DBIish: fb13502 | moritz++ | lib/DBDish.pm6:

[06:25] <dalek> DBIish: s/hidden_from_backtrace/hidden-from-backtrace/

[06:25] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/fb13502bc9

[06:25] <dalek> DBIish: 28eb16d | moritz++ | .gitignore:

[06:25] <dalek> DBIish: Update .gitignore

[06:25] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/28eb16d978

[06:25] *** vendethiel left
[06:26] *** vendethiel joined
[06:27] <dalek> star: ed8c5e5 | moritz++ | modules/DBIish:

[06:27] <dalek> star: Bump DBIish version

[06:27] <dalek> star: review: https://github.com/rakudo/star/commit/ed8c5e57cb

[06:31] <moritz> http://home.p6c.org/~moritz/rakudo-star-2015.03-rc0.tar.gz release candidate of the upcoming star release

[06:36] <dalek> rakudo-star-daily: f0c3295 | coke++ | log/ (10 files):

[06:36] <dalek> rakudo-star-daily: today (automated commit)

[06:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/f0c3295efd

[06:36] <dalek> perl6-roast-data: 0642fd1 | coke++ | / (9 files):

[06:36] <dalek> perl6-roast-data: today (automated commit)

[06:36] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/0642fd15fa

[06:36] *** diana_olhovik_ joined
[06:36] *** bayprogrammer left
[06:38] <[Coke]> jdv79: I'm upstate, I could swing down for a weekend or something.

[06:47] *** vendethiel left
[06:48] *** jack_rabbit left
[06:51] *** vendethiel joined
[06:53] <dalek> roast: d4b9bb8 | Mouq++ | S06-signature/errors.t:

[06:53] <dalek> roast: Add test for RT #78670

[06:53] <dalek> roast: review: https://github.com/perl6/roast/commit/d4b9bb8094

[06:53] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=78670

[07:03] *** diana_olhovik_ left
[07:04] <[Coke]> nqp-parrot still failing the index tests.

[07:04] *** prime| joined
[07:05] *** prime left
[07:08] *** jack_rabbit joined
[07:16] *** gfldex joined
[07:22] <moritz> has anybody proof-read the R* release announcement?

[07:22] <moritz> https://github.com/rakudo/star/blob/master/docs/announce/2015.03.md

[07:25] <dalek> star: af337e2 | moritz++ | docs/announce/2015.03.md:

[07:25] <dalek> star: More markup

[07:25] <dalek> star: review: https://github.com/rakudo/star/commit/af337e2b66

[07:25] <Mouq> moritz: "threads and concurrency (in progress for the JVM and MoarVM backend)"

[07:26] <moritz> Mouq: good catch

[07:28] <raydiak> moritz: in "Add a array[T]," maybe either change the "a" to "an" or just remove it

[07:29] <dalek> star: 833870c | moritz++ | docs/announce/2015.03.md:

[07:29] <dalek> star: announce: feedback from Mouq++ and raydiak++

[07:29] <dalek> star: 

[07:29] <dalek> star: also linkify PairMap

[07:29] <dalek> star: review: https://github.com/rakudo/star/commit/833870c00e

[07:30] <moritz> somehow my laptop feels slow/slushy, even though I test star-j on hack, not on my laptop :/

[07:30] <raydiak> also rc0 installs and spectests clean here; moritz++

[07:31] <moritz> raydiak: the interesting part is 'make modules-test'

[07:31] <moritz> the spectest is just the same as with the compiler release

[07:31] <raydiak> moritz: started...how long is that compared to the spectest?

[07:32] <moritz> raydiak: quicker, I think

[07:32] <moritz> though not parallelized, iirc

[07:35] <raydiak> well everything it ran passed, but it ended with a "...no t/ directory found." and no further output, makes me wonder if there was supposed to be more

[07:36] <raydiak> that's on debugger-ui-commandline

[07:36] *** tinyblak left
[07:37] <moritz> raydiak: that's expected behavior. Thanks.

[07:37] *** tinyblak joined
[07:37] <raydiak> glad to help

[07:39] *** jack_rabbit left
[07:40] *** Sir_Ragnarok left
[07:42] *** l30n1du5 left
[07:43] *** diana_olhovik_ joined
[07:44] *** Sir_Ragnarok joined
[07:50] <dalek> doc: 83b681a | moritz++ | lib/Type/Any.pod:

[07:50] <dalek> doc: Any.pairup

[07:50] <dalek> doc: review: https://github.com/perl6/doc/commit/83b681a703

[07:54] *** coffee` joined
[07:56] * itz_ waits for clang and rc0

[07:56] *** jack_rabbit joined
[07:58] <jdv79> [Coke]: oh, i didn't know that.  i might be there.

[08:03] *** tinyblak left
[08:06] *** lizmat left
[08:08] *** lizmat joined
[08:08] <dalek> star: 73bd45a | moritz++ | docs/announce/2015.03.md:

[08:08] <dalek> star: Linkify another changelog entry

[08:08] <dalek> star: review: https://github.com/rakudo/star/commit/73bd45a917

[08:15] *** darutoko joined
[08:21] *** darutoko- joined
[08:23] *** vendethiel left
[08:24] *** jack_rabbit left
[08:24] *** darutoko left
[08:26] *** vendethiel joined
[08:27] *** eli-se joined
[08:28] *** vike left
[08:30] *** jack_rabbit joined
[08:31] *** anaeem1 left
[08:32] *** anaeem1 joined
[08:33] <dalek> rakudo/nom: ae043cc | Mouq++ | src/Perl6/Actions.nqp:

[08:33] <dalek> rakudo/nom: Remove action method for complex literal, as per commit 362f3fd

[08:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae043ccfc3

[08:36] *** vike joined
[08:36] *** anaeem1 left
[08:38] <[Tux]> dammit travis https://travis-ci.org/Tux/CSV/builds/55272423

[08:42] <raydiak> good night #perl6

[08:43] <Mouq> 'night raydiak :)

[08:48] *** gfldex left
[08:49] *** jack_rabbit left
[08:54] *** nige left
[08:54] *** jack_rabbit joined
[08:56] *** telex left
[08:58] *** telex joined
[09:08] *** jack_rabbit left
[09:09] *** koo6 left
[09:10] *** xfix joined
[09:11] *** vendethiel left
[09:14] *** myp left
[09:27] *** vendethiel joined
[09:27] *** kjs_ joined
[09:28] *** rindolf joined
[09:28] *** LonelyGM left
[09:34] *** rurban joined
[09:34] <psch> o/

[09:34] <psch> java.lang.StringIndexOutOfBoundsException: String index out of range: -195364057

[09:34] <psch> /o\

[09:35] <psch> that's from wrongly trying to have TypeObjects for Java classes with interop

[09:37] <nine_> .tell japhb I cannot reproduce your MUTEX_LOCK Inline::Perl5 failure. Can you give me some information like which exact Perl 5 version with which configuration options you're using and maybe a backtrace?

[09:37] <yoleaux> nine_: I'll pass your message to japhb.

[09:37] <psch> although i'm starting to wonder how much sense that actually makes...

[09:43] *** koo6 joined
[09:48] *** spider-mario joined
[09:50] *** rurban left
[09:50] *** nige joined
[09:50] *** vendethiel left
[09:50] *** rurban joined
[09:53] <lizmat> ,tell Mouq t/spec/S32-num/real-bridge.t hangs for me on ok $zero == $zero.Complex, "0 == 0.Complex"

[09:53] <lizmat> .tell Mouq t/spec/S32-num/real-bridge.t hangs for me on ok $zero == $zero.Complex, "0 == 0.Complex"

[09:53] <yoleaux> lizmat: I'll pass your message to Mouq.

[09:55] *** vendethiel joined
[10:03] <dalek> roast: 50d2fcb | lizmat++ | S32-num/real-bridge.t:

[10:03] <dalek> roast: Fudge hanging tests

[10:03] <dalek> roast: review: https://github.com/perl6/roast/commit/50d2fcb659

[10:04] <lizmat> .tell Mouq these are the hanging tests: https://github.com/perl6/roast/commit/50d2fcb659

[10:04] <yoleaux> lizmat: I'll pass your message to Mouq.

[10:08] <jnthn> o/ #perl6

[10:08] <psch> o/ jnthn 

[10:12] <lizmat> jnthn psch o/

[10:13] <lizmat> .tell moritz wrt 179d453cff1e91 , I don't read that PairMaps are ordered from the speculation, only that they are frozen

[10:13] <yoleaux> lizmat: I'll pass your message to moritz.

[10:13] <lizmat> .tell moritz: so perhaps we should sort them?

[10:13] <yoleaux> lizmat: What kind of a name is "moritz:"?!

[10:14] <lizmat> .tell moritz so perhaps we should sort them?

[10:14] <yoleaux> lizmat: I'll pass your message to moritz.

[10:16] *** myp joined
[10:21] *** geever joined
[10:26] *** rindolf left
[10:27] <dalek> rakudo/nom: 4976e47 | lizmat++ | src/core/natives.pm:

[10:27] <dalek> rakudo/nom: code esthetics for better readability

[10:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4976e47ab4

[10:27] <dalek> rakudo/nom: 8e29ea7 | lizmat++ | src/core/natives.pm:

[10:27] <dalek> rakudo/nom: Add nibble, for old times sake

[10:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e29ea7bfe

[10:29] <dalek> rakudo/nom: 1835085 | lizmat++ | t/spectest.data:

[10:29] <dalek> rakudo/nom: Activate lowlevel thread tests again

[10:29] <dalek> rakudo/nom: 

[10:29] <dalek> rakudo/nom: We need coverage for these features, and we need to make them stable.

[10:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/18350851b9

[10:30] <jnthn> lizmat: I'm too young to appreciate nibble :P

[10:31] <jnthn> (We got bit and byte 'cus S09 speculated about them, fwiw :))

[10:32] <lizmat> fwiw, I'm looking forward to being able to use a true bit array

[10:32] *** travis-ci joined
[10:32] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add nibble, for old times sake'

[10:32] <travis-ci> http://travis-ci.org/rakudo/rakudo/builds/55278417 https://github.com/rakudo/rakudo/compare/ae043ccfc31b...8e29ea7bfef8

[10:32] *** travis-ci left
[10:33] <jnthn> Yeah, I started looking at the moar bits of supporting those on the train last night :)

[10:34] <jnthn> I'll continue next time I'm hacking on my laptop, rather than dragging the half-done patch off it :)

[10:34] <dalek> rakudo/nom: edb5d9f | lizmat++ | src/core/natives.pm:

[10:34] <dalek> rakudo/nom: Fix typo

[10:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/edb5d9fddc

[10:35] *** rurban left
[10:36] <nine_> Nibble? Haven't heard that in a long time :)

[10:37] *** travis-ci joined
[10:37] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Activate lowlevel thread tests again

[10:37] <travis-ci> http://travis-ci.org/rakudo/rakudo/builds/55278455 https://github.com/rakudo/rakudo/compare/8e29ea7bfef8...18350851b91a

[10:37] *** travis-ci left
[10:37] * psch was thinking of the grammar nibble at first

[10:40] *** nige left
[10:41] <moritz> lizmat: "The implementation of C<PairMap>

[10:41] <moritz> associativity is not guaranteed to be as efficient as a C<Hash> lookup.

[10:41] <moritz> (A brute force linear scan for the matching key is allowed.  Optimization

[10:41] <yoleaux> 10:13Z <lizmat> moritz: wrt 179d453cff1e91 , I don't read that PairMaps are ordered from the speculation, only that they are frozen

[10:41] <yoleaux> 10:14Z <lizmat> moritz: so perhaps we should sort them?

[10:41] <moritz> to something like an ordered hash is also allowed."

[10:42] <nine_> I'm starting to wonder what I should actually work on at the QA hackathon. What would help Perl 6 the most that fits with the theme?

[10:43] *** eli-se left
[10:43] *** travis-ci joined
[10:43] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix typo'

[10:43] <travis-ci> http://travis-ci.org/rakudo/rakudo/builds/55278781 https://github.com/rakudo/rakudo/compare/18350851b91a...edb5d9fddc5c

[10:43] *** travis-ci left
[10:54] <dalek> rakudo/nom: d835c8e | jnthn++ | src/core/Inc.pm:

[10:54] <dalek> rakudo/nom: Avoid $*VM initialization at startup.

[10:54] <dalek> rakudo/nom: 

[10:54] <dalek> rakudo/nom: This shaves around 30ms off CORE.setting loading (under the profiler,

[10:54] <dalek> rakudo/nom: so a bit less in reality - but still very measurable).

[10:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d835c8e3d5

[10:54] <timotimo> uuuh

[10:54] <timotimo> i must build that

[10:55] <jnthn> The profiler also tells me that we no longer perform an GCs during initial loading now. :)

[10:55] <timotimo> \o/

[10:55] <timotimo> that's very good

[10:56] *** FROGGS[tab] joined
[10:56] <arnsholt> I assume we achieve it by some other means than simply turning off GC during loading? O:)

[10:57] <timotimo> well, we could, in theory, turn off GC during loading, we'd just have to turn the nursery into a chain of nurseries ...

[10:57] <FROGGS[tab]> nine_: look at the project list in the wiki

[10:57] <timotimo> 0.09user 0.02system 0:00.11elapsed 100%CPU (0avgtext+0avgdata 69572maxresident)k

[10:57] <timotimo> that's a very, very good value

[10:57] <timotimo> both for startup speed and memory usage

[10:57] <timotimo> (this is -e 'say 1')

[10:58] <jnthn> arnsholt: Yes, we achieve it by allocating less :)

[10:58] <jnthn> arnsholt: Which is the good way to achieve it :)

[10:59] <jnthn> timotimo: Nice, guess that's a combination of the lazy deserialization (which we didn't bump MOAR/NQP revisions to see yet) plus what I just did :)

[10:59] *** nige joined
[10:59] *** kjs_ left
[11:01] <timotimo> i assume so

[11:10] *** Ven joined
[11:22] <lizmat> jnthn++

[11:22] *** fhelmberger joined
[11:24] *** mr-fooba_ left
[11:26] <lizmat> psch: not sure we need work in the grammar to make nibble work:

[11:26] <lizmat> m: my @a := array[nibble].new

[11:26] <camelia> rakudo-moar d835c8: OUTPUT«===SORRY!===␤MVMArray: Unsupported uint size␤»

[11:26] <lizmat> m: my @a := array[bit].new

[11:26] <camelia> rakudo-moar d835c8: OUTPUT«===SORRY!===␤MVMArray: Unsupported uint size␤»

[11:26] <lizmat> m: my @a := array[uint1].new

[11:26] <camelia> rakudo-moar d835c8: OUTPUT«===SORRY!===␤MVMArray: Unsupported uint size␤»

[11:26] <lizmat> m: my @a := array[uint4].new

[11:26] <camelia> rakudo-moar d835c8: OUTPUT«===SORRY!===␤MVMArray: Unsupported uint size␤»

[11:26] *** rurban_ joined
[11:26] *** rurban joined
[11:26] <lizmat> afk for most of the day&

[11:26] <moritz> m: array[bit].new

[11:26] <camelia> rakudo-moar d835c8: OUTPUT«===SORRY!===␤MVMArray: Unsupported uint size␤»

[11:26] <psch> lizmat: Perl6/Grammar.nqp has a method nibble :)

[11:27] <psch> lizmat: it nibbles a string in a given language

[11:29] <psch> eugh, there goes the hack load again :/

[11:30] *** dalek left
[11:30] <FROGGS_> :o(

[11:30] <FROGGS_> Timeout, server hack.p6c.org not responding.

[11:31] <psch>  11:31:05 up 1 day, 19:19, 20 users,  load average: 38.59, 18.35, 7.65

[11:31] <moritz> not again :(

[11:31] <psch> can't ps or top or htop

[11:37] *** dalek joined
[11:37] *** [Coke] left
[11:37] *** sergot left
[11:37] *** psch left
[11:37] *** ChanServ sets mode: +v dalek

[11:37] *** Mouq left
[11:37] *** avuserow left
[11:37] *** Util left
[11:38] *** masak left
[11:38] *** fhelmberger_ joined
[11:38] *** psch joined
[11:40] <itz_> is niecza defunct?

[11:40] *** itz_ is now known as itz

[11:40] <moritz> itz_: yes

[11:41] *** fhelmberger left
[11:41] *** rurban left
[11:42] * itz wonders if removing a 

[11:42] <itz> "#?niecza todo" from roast which he can't work out how to use with "#?rakudo emit" is ok then

[11:43] <moritz> itz: it is

[11:47] *** fhelmberger_ left
[11:52] *** anaeem1 joined
[11:57] *** anaeem1 left
[12:00] *** youngg joined
[12:00] *** eli-se joined
[12:00] *** eli-se left
[12:02] *** eli-se joined
[12:05] <itz>   GitHub is offline for maintenance. See http://status.github.com for more info.

[12:05] <itz> grrr

[12:07] <Ven> yep

[12:07] *** masak joined
[12:07] <masak> good afternoon, #perl6

[12:12] *** Ven left
[12:13] <jnthn> o/ masak

[12:15] *** espadrine joined
[12:20] *** rurban_ left
[12:24] *** Rounin joined
[12:28] *** virtualsue joined
[12:52] *** Ven joined
[12:53] *** virtualsue left
[12:55] *** larion left
[12:56] *** larion joined
[13:03] *** anaeem1 joined
[13:04] *** fhelmberger joined
[13:04] *** xinming left
[13:05] *** xinming joined
[13:08] *** anaeem1 left
[13:11] *** Ven left
[13:12] <grondilu> https://github.com/vim-perl/vim-perl/issues/181  # =finish is used to end a file now, right?

[13:13] *** mr-foobar joined
[13:14] *** larion left
[13:14] *** rindolf joined
[13:15] *** larion joined
[13:17] *** virtualsue joined
[13:24] <TimToady> I think that *if* we add them, they should be spelled "nybble", because we have a different meaning for "nibble" these days...but I'm not at all convinced we need an alias for uint4, since they aren't used nearly as often as bit or byte

[13:29] <TimToady> and while I'm at it, =finish is bad because it's primarily a verb, not a noun, unlike "end" which is primarily a noun.  how 'bout =fini or =eof or =data instead?

[13:29] <masak> we've been through a few iterations on this word already

[13:30] <TimToady> I wasn't here when it was iterated

[13:30] <masak> we shouldn't make a decision about a new name without absorbing all the knowledge of our predecessors

[13:30] <masak> I believe it was some YAPC::Europe (maybe 2011) with tadzik and TheDamian

[13:30] <masak> here, let me go fetch the relevant commit

[13:30] <masak> I remember making it on TheDamian's behalf

[13:31] * TimToady agrees that we should probably avoid =end, but =finish has always struck me as bogus

[13:31] <masak> https://github.com/perl6/specs/commit/3e1a9a5a576b90e9eeabdb7083d16431513513f2

[13:31] *** zakharyas joined
[13:32] <masak> oh, less of a rationale than I remembered.

[13:32] <masak> it was just that `=END` was lower-cased, and then we couldn't use `=end`, which was taken already as an end marker for delimited blocks.

[13:32] <TimToady> =ending

[13:32] <masak> so we went with `=finish` after, as I remember it, some deliberation back and forth.

[13:32] <masak> well, `=ending` doesn't strike me as a great improvement on `=finish`...

[13:33] <masak> let's go back to what this marker is meant to accomplish.

[13:33] <TimToady> =fake-eof

[13:33] <masak> :)

[13:34] <masak> well, that's honest, anyway

[13:34] <masak> I wish there were an as-good alternative without the dash

[13:34] *** Ven joined
[13:34] <masak> maybe `=eof` captures it, actually

[13:34] <TimToady> might

[13:34] <masak> it clearly makes it a noun, in any case

[13:35] <masak> and it's not like "eof" is a weird unknown term. I think.

[13:35] <masak> in fact, it's a very short, standard way to say "end of file"

[13:35] * masak likes it

[13:35] <TimToady> and why does it have to be lower-case, except for hobgoblins?

[13:36] <masak> because the Pod specification itself points out what upper-case directives mean.

[13:36] <Ulti> EoF 

[13:36] <Ulti> :P

[13:37] <masak> TimToady: I don't like your "except for hobgoblins" counter-argument. with it, one can create a counter against *any* type of consistency. there's something to be said for following one's own rules.

[13:39] <hoelzro> jnthn, FROGGS[mobile]: I did some bisecting, and I found the *rakudo* commit that fixes the MoarVM precomp bug: a59393246f74eaef9b185b0c7964ba9ff2b0f922

[13:39] <hoelzro> I haven't narrowed it down to NQP/Moar yet; I'll have a chance tomorrow

[13:47] <jnthn> hoelzro++

[13:47] <TimToady> quiz meet today, so largely afk &

[13:48] *** gfldex joined
[13:58] *** nige left
[13:59] *** nige joined
[14:00] <grondilu> was =stop considered?

[14:02] <masak> grondilu: also too verb-y.

[14:04] *** Ven left
[14:07] <moritz> =theend

[14:07] <moritz> =itsover

[14:07] <literal> =qed

[14:07] <moritz> =nofurther

[14:07] <moritz> fwiw I've added some process protocoling to hack

[14:07] <literal> =done

[14:08] *** rindolf left
[14:09] *** rindolf joined
[14:10] <masak> =nevermore

[14:10] <moritz> =lastwords

[14:10] <masak> =imma-let-you-finish

[14:10] <grondilu> =die

[14:11] <masak> =bikeshed

[14:11] <grondilu> (verby I know, but I like it still)

[14:11] <moritz> =slut # the Swedish one :-)

[14:11] <masak> yeah, that'll go over well

[14:11] <grondilu> =done

[14:11] <masak> already done =done :)

[14:11] <grondilu> oh yeah

[14:12] <grondilu> =bye

[14:12] *** tinyblak joined
[14:12] *** rindolf left
[14:12] <masak> grondilu: I dislike =bye a lot less than most others

[14:12] <jnthn> =kthxbai :P

[14:12] <masak> grondilu: but I still think =eof is my favorite

[14:12] *** rindolf joined
[14:12] <moritz> =over-and-out

[14:12] <masak> =ten-four

[14:13] <masak> =fat-lady-sings

[14:13] <masak> imagine the horror of someone backlogging this (either in the presence or in the future) and going, "omg, those Perl 6 designers are *insane*!"

[14:13] <grondilu> =eop (end of program)

[14:13] <masak> =eob (end of bugs)

[14:14] <masak> =eos (end of suffering)

[14:14] <moritz> =ender

[14:14] <grondilu> =finished

[14:14] *** Ven joined
[14:14] <masak> =terminator

[14:15] <moritz> =iknowadeadparrotwheniseeone

[14:16] <Ven> masak: fwiw, I don't think "stop" is more verby than "end" or "finish"

[14:16] <Ven> I'm first thinking about "full stop". but maybe it's because of how we use french around here :)

[14:16] <grondilu> =exit

[14:17] <moritz> =elvishasleaftthebuilding

[14:19] <grondilu> =comments-from-here-up-to-eof

[14:19] <masak> Ven: I definitely have `=stop` as being primarily verby.

[14:20] <masak> =wovon-man-nicht-sprechen-kann-darüber-muss-man-schweigen

[14:21] *** rindolf left
[14:21] *** rindolf joined
[14:22] <masak> .u σ

[14:22] <yoleaux> U+03C3 GREEK SMALL LETTER SIGMA [Ll] (σ)

[14:22] <masak> m: my $σ0;

[14:22] <camelia> rakudo-moar d835c8: ( no output )

[14:23] * masak is surprised by https://rt.perl.org/Ticket/Display.html?id=124120 failing on Windows

[14:24] *** skids joined
[14:24] <masak> m: multi foo(Int $x, Str $b) {}; my $a = "bcd"; foo $a, "bar"

[14:24] <camelia> rakudo-moar d835c8: OUTPUT«Cannot call foo(Str, Str); none of these signatures match:␤    (Int $x, Str $b)␤  in sub foo at /tmp/NJbdO2GdWx:1␤  in block <unit> at /tmp/NJbdO2GdWx:1␤␤»

[14:24] <masak> TimToady: are you fine with the order of things in the above error message?

[14:25] <masak> TimToady: I remember you mentioning that the preferred order tends to be "expected X, but got Y"

[14:27] <masak> this Tom Browder guy seems very active, judging from p6u. nice.

[14:27] <masak> is he here on #perl6 too?

[14:28] <psch> .seen tbrowder

[14:28] <yoleaux> I saw tbrowder 17 Mar 2015 16:46Z in #perl6: <tbrowder> Thanks TimToady and [Coke].

[14:28] <masak> \i/^H^Ho/

[14:28] <masak> er, \o/

[14:29] <masak> psch++ tbrowder++

[14:32] *** grondilu left
[14:33] *** nige left
[14:34] *** nige joined
[14:38] <jdv79> the moar build still kills my sad vm

[14:38] *** kjs_ joined
[14:40] *** kjs_ left
[14:42] *** larion left
[14:45] *** zjmarlow_ joined
[14:45] *** Util joined
[14:48] *** zjmarlow left
[14:50] <masak> .u sad vm

[14:50] <yoleaux> No characters found

[14:50] *** larion joined
[14:51] <jnthn> .u sad cat

[14:51] <yoleaux> No characters found

[14:51] <jnthn> aww

[14:51] <masak> .u crying cat

[14:51] <yoleaux> U+1F63F CRYING CAT FACE [So] (😿)

[14:52] <masak> jnthn: there you go :)

[14:52] <jnthn> :)

[14:52] *** anaeem1 joined
[14:52] <masak> .u loudly

[14:52] <yoleaux> U+1F62D LOUDLY CRYING FACE [So] (😭)

[14:53] <jdv79> oh wow - its done.  only took 15mins.

[14:57] *** anaeem1 left
[15:03] <dalek> rakudo/moar-gen2-frame-opts: c5e32f6 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[15:03] <dalek> rakudo/moar-gen2-frame-opts: Chase API change in Moar for frame/gen2 opts.

[15:03] <dalek> rakudo/moar-gen2-frame-opts: review: https://github.com/rakudo/rakudo/commit/c5e32f6911

[15:04] *** zakharyas left
[15:05] *** larion left
[15:06] *** skids left
[15:10] *** diana_olhovik_ left
[15:13] *** kurahaupo left
[15:16] *** j1n3l0 joined
[15:17] *** rurban_ joined
[15:19] *** rmgk_ joined
[15:19] *** rmgk left
[15:19] *** rmgk_ is now known as rmgk

[15:20] <timotimo> did somebody change something about Test and printing?

[15:20] <timotimo> write string requires an object with REPR MVMOSHandle

[15:20] <timotimo> ^- i get this for all modules now

[15:23] *** Ven left
[15:23] <jdv79> ditto

[15:27] *** kurahaupo joined
[15:28] *** kjs_ joined
[15:30] *** rurban joined
[15:31] <itz> I would expect this to fail under fudge and it doesn't :/

[15:31] <itz> ?rakudo emit if 0 { skip("foo",1); #

[15:31] <itz> ok 1==0, "fail";

[15:31] <itz> #?rakudo emit }

[15:32] <masak> was just bitten by a bug (in my code) that amounted to .map flattening things less than I naïvely assumed.

[15:37] <DrForr> When trying to run the perl6 binary out of my rakudo Git repo, I get an 'Unhandled exception: While looking for...' error on Perl6/Grammar.moarvm - It seems that Perl6::Grammar is a module that shouldn't need to be specified.

[15:37] *** darutoko- left
[15:38] *** fhelmberger left
[15:39] *** darutoko joined
[15:40] <masak> DrForr: this error only occurs when you're standing inside the rakudo/ directory?

[15:40] <DrForr> No, I'm outside the directory.

[15:40] <moritz> DrForr: did you do a 'make install'?

[15:40] <masak> that was going to be my next question :>

[15:41] <moritz> and read the README, for that matter

[15:41] <masak> it should work without `make install`, but sometimes... it doesn't :/

[15:41] <DrForr> Earlier perls worked without 'make install', I was just being foolish.

[15:43] <eli-se> my compiler works!

[15:43] *** nige left
[15:44] <DrForr> I take it most people use rakudobrew anyway?

[15:44] <masak> eli-se: \o/

[15:44] <masak> DrForr: actually, I still build from git.

[15:44] <masak> DrForr: but I always `make install`

[15:44] <moritz> DrForr: I use rakudobrew for a developing modules, and build directly from git for experimenting/hacking on the compiler itself

[15:45] <DrForr> moritz: That sounds reasonable.

[15:45] <masak> that's probably what I *should* do. :)

[15:45] *** raiph joined
[15:47] <j1n3l0> hi all o/

[15:47] <j1n3l0> question from a (returning) perl6 newb :)

[15:47] <j1n3l0> should "augment class ClassName" be lexical?

[15:48] <j1n3l0> i was under the impression it should be :)

[15:48] <moritz> j1n3l0: it's not

[15:49] <j1n3l0> thanks

[15:49] <moritz> (and it can't be)

[15:49] *** Ven joined
[15:50] <j1n3l0> moritz: thanks for the response

[15:50] *** BenGoldberg joined
[15:51] *** kjs_ left
[15:51] <moritz> j1n3l0: I'm curious, what's your use case for (lexical) augment=

[15:51] <moritz> s/'='/?/

[15:53] <dalek> star: 143239c | moritz++ | tools/star/release-guide.pod:

[15:53] <dalek> star: Add 2015.03 to the list of releases

[15:53] <dalek> star: review: https://github.com/rakudo/star/commit/143239c45e

[15:53] *** xfix left
[15:53] <psch> m: class A { }; { constant A := A but role { method foo { "bar" } }; A.new.foo.say }; A.new.foo.say # huh

[15:53] <camelia> rakudo-moar d835c8: OUTPUT«bar␤No such method 'foo' for invocant of type 'A'␤  in block <unit> at /tmp/T94RU9wJw5:1␤␤»

[15:53] <psch> i'm a bit surprised that works :P

[15:54] <moritz> 'but' clones the type object

[15:55] <psch> oh, okay

[15:55] <moritz> 'does' doesn't

[15:55] <psch> i remembered the constant binding for runtime class declarations

[15:55] <psch> i think the Metamodel docs have that in a snippet

[15:55] <j1n3l0> moritz: i was thinking of adding methods to existing classes within test scope

[15:55] <masak> if you want to lexically extend a class, maybe subclass with a `my` declaration?

[15:56] <j1n3l0> masak: okay ...

[15:56] <moritz> right, seems to be a saner approach

[15:56] <j1n3l0> let me see if that works

[15:56] <j1n3l0> thanks

[15:56] <moritz> my MyTestClass is TestClass { ....}

[15:57] <moritz> ok, R* tarball uploaded, release tagged

[15:59] <FROGGS_> moritz++

[15:59] <psch> moritz++

[16:00] <dalek> nqp: f99b014 | peschwa++ | src/vm/jvm/runtime/org/perl6/nqp/tools/EvalServer.java:

[16:00] <dalek> nqp: Correct typo.

[16:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f99b0148bb

[16:00] <dalek> nqp: dce84ec | peschwa++ | src/vm/jvm/runtime/org/perl6/nqp/tools/EvalServer.java:

[16:00] <dalek> nqp: Correct another typo.

[16:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dce84ecda3

[16:00] <dalek> nqp: c8e73b9 | peschwa++ | src/vm/jvm/runtime/org/perl6/nqp/tools/EvalServer.java:

[16:00] <dalek> nqp: Add the command 'run_limited' to the EvalServer.

[16:00] <dalek> nqp: 

[16:00] <dalek> nqp: Send via eval-client.pl with an integer as next argument limits the execution

[16:00] <dalek> nqp: time of the Perl 6 interpreter to that many seconds.

[16:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c8e73b92c5

[16:01] <dalek> nqp: 004206b | peschwa++ | tools/build/gen-jvm-properties.pl:

[16:01] <dalek> nqp: Move prefix from jvmconfig.properties.runtime to jvmconfig.properties.

[16:01] <dalek> nqp: 

[16:01] <dalek> nqp: An optimization for $*VM in Rakudo relies on this.

[16:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/004206b360

[16:01] <dalek> rakudo/nom: e0976f9 | peschwa++ | Configure.pl:

[16:01] <dalek> rakudo/nom: Read prefix from jvmconfig.properties root.

[16:01] <dalek> rakudo/nom: 

[16:01] <dalek> rakudo/nom: An optimization for $*VM access by jnthn++ relies on prefix existing.

[16:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e0976f99fe

[16:01] <dalek> rakudo/nom: d9294a9 | peschwa++ | tools/build/NQP_REVISION:

[16:01] <dalek> rakudo/nom: Bump NQP_REVISION.

[16:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d9294a9c12

[16:02] <psch> moritz: i haven't looked closely at the evalbot, but the run_timed in nqp.tools.EvalServer seemed like a should-work-anyway approach

[16:02] <moritz> psch++

[16:02] <psch> err, run_limited

[16:02] <moritz> psch: does that work for rakudo too?

[16:03] <psch> moritz: yeah, the perl6-eval-server starts the nqp.tools.EvalServer with perl6.jar as -app

[16:03] <moritz> psch: ok, I'll have to experiment with that

[16:04] <psch> moritz: the RakudoEvalServer is (in hindsight) maybe a bit misnomed.  it's currently more of a use-this-to-integrate-a-r-j-interpreter-into-your-java-programm

[16:04] <psch> *thing

[16:04] *** nige joined
[16:05] <psch> moritz: from the looks of it evalbot.pl:149 ~~ s/run/run_limited $timeout-in-seconds/ should be enough

[16:06] <psch> moritz: although we might want to look closer at RESTRICTED.setting, jvminterop alone is quite open

[16:06] *** rindolf left
[16:08] <j1n3l0> within a role, how do you specify required methods (like you would in Moose)?

[16:08] <moritz> j1n3l0: method you-need-this { ... }

[16:08] <moritz> j1n3l0: with literal ...

[16:08] <j1n3l0> ta :)

[16:08] <moritz> m: role R { method x() { ... } }; class A does R { }

[16:08] <camelia> rakudo-moar d835c8: OUTPUT«===SORRY!===␤Method 'x' must be implemented by A because it is required by a role␤»

[16:09] *** Ven left
[16:09] <j1n3l0> cool

[16:12] *** fhelmberger joined
[16:14] *** rindolf joined
[16:20] *** xfix joined
[16:25] *** eli-se left
[16:26] *** rurban left
[16:28] <timotimo> the rakudo commit that prevents $*VM from being allocated at startup causes the REPR problem on my machine

[16:28] <dalek> roast: 4f0676b | (Steve Mynott)++ | S03-operators/arith.t:

[16:28] <dalek> roast: this reveals a bug in NetBSD libm - skip

[16:28] <dalek> roast: review: https://github.com/perl6/roast/commit/4f0676bfb0

[16:28] <dalek> roast: d1a25ac | (Steve Mynott)++ | S03-operators/arith.t:

[16:28] <dalek> roast: correct text

[16:28] <dalek> roast: review: https://github.com/perl6/roast/commit/d1a25ac3b6

[16:28] <dalek> roast: 0cbceec | (Steve Mynott)++ | S03-operators/arith.t:

[16:28] <dalek> roast: Merge pull request #54 from stmuk/master

[16:28] <dalek> roast: 

[16:28] <dalek> roast: Skip test on NetBSD

[16:28] <dalek> roast: review: https://github.com/perl6/roast/commit/0cbceeceeb

[16:31] *** [Sno] left
[16:31] *** [Sno] joined
[16:31] <psch> timotimo: i pushed a fix for jnthn++'s $*VM opt 

[16:32] <psch> oh

[16:32] <psch> nvm

[16:32] <jnthn> psch: But that was for JVM, no?

[16:32] <psch> if it's broken on moar i don#t have anything to do with that :)

[16:32] <psch> s/#/'/

[16:34] *** colomon left
[16:34] *** kjs_ joined
[16:41] *** colomon joined
[16:41] *** larion joined
[16:42] *** raiph left
[16:45] *** eli-se joined
[16:48] *** colomon left
[16:51] <j1n3l0> last question :)

[16:51] <j1n3l0> how do i get the attributes on a class and their types?

[16:51] <j1n3l0> given the $?CLASS?

[16:52] <moritz> j1n3l0: http://doc.perl6.org/type/Metamodel::AttributeContainer#method_attributes

[16:52] <j1n3l0> moritz: thanks :)

[16:52] <moritz> so, $?CLASS.^attributes

[16:53] <j1n3l0> cheers :)

[16:54] <moritz> psch: it would be nice if eval-client.pl would/could indicate it when it runs into the timeout set with run_limited

[16:55] <dalek> evalbot: fba2a50 | moritz++ | runtime/run-rakudo-jvm-evalserver:

[16:55] <dalek> evalbot: Chase directory layout change

[16:55] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/fba2a501e4

[16:55] <moritz> psch: currently there's no "(timeout)" output or so, and exit status is 0

[16:55] <moritz> psch: on the plus side, it works \o/

[16:55] <moritz> psch++

[16:59] <moritz> m: say 1

[16:59] <camelia> rakudo-moar d9294a: OUTPUT«1␤»

[17:01] *** rurban joined
[17:01] *** raiph joined
[17:01] <dalek> evalbot: 67a91f9 | moritz++ | runtime/run-rakudo-jvm-evalserver:

[17:01] <dalek> evalbot: cleanup run-rakudo-jvm-evalserver

[17:01] <dalek> evalbot: 

[17:01] <dalek> evalbot: * fewer hardcoded paths

[17:01] <dalek> evalbot: * restart eval server every 4 hours

[17:01] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/67a91f9502

[17:02] *** rurban left
[17:03] <TimToady> masak: yes, but in this case I think endweight puts the list of candidates last; also, with signatures, we have kind of a ~~ situation of the pattern being on the right

[17:05] <TimToady> one can also justify the inconsistency by saying there's a specific order of constructing the capture for the call vs making the call and binding

[17:06] <TimToady> you'll note I also removed the "Expected" from the new messages, since that's more a testing metaphor

[17:06] <TimToady> and the 'any of' is now part of the first line of message

[17:08] <dalek> evalbot: 1cfc4c5 | moritz++ | build-scripts/rebuild-rakudo.pl:

[17:08] <dalek> evalbot: Build rakudo-jvm again

[17:08] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/1cfc4c568a

[17:09] <TimToady> \o/

[17:11] <dalek> evalbot: cc0cee4 | moritz++ | build (2 files):

[17:11] <dalek> evalbot: Option for force-rebuilding rakudo

[17:11] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/cc0cee430b

[17:12] * TimToady resists the urge to recompile rakudo while using it to run his quiz editor, which, despite Unix process semantics, causes it to blow up for some reason

[17:12] <TimToady> is something in our build process overwriting an existing file rather than replacing it?

[17:12] <moritz> TimToady: you can still rebuild in another directory :-)

[17:13] <TimToady> that would require more of my scant brainpower :P

[17:14] <moritz> git clone rakudo rakudo2; cd rakudo2

[17:14] <TimToady> and more of my scant SSD

[17:14] *** diana_olhovik_ joined
[17:14] *** `7stud joined
[17:14] <TimToady> well, back to scorekeeping &

[17:15] <`7stud> hello

[17:15] *** rurban joined
[17:15] <moritz> hi

[17:16] <`7stud> Is anyone aware of bug in reading a file in paragraph mode using latest Rakudo/MoarVM?

[17:16] <`7stud> This is perl6 version 2015.03-21-gcfa4974 built on MoarVM version 2015.03

[17:16] <moritz> I'm not even ware of a paragraph mode :-)

[17:16] <moritz> *aware

[17:17] <`7stud> For example: for $infile.lines(nl => "\n\n") -> $para {...

[17:17] <masak> ooh

[17:17] <`7stud> That code still reads line by line, i.e. with input line separator as "\n"

[17:18] <masak> does that DTRT even for Windows newlines?

[17:18] <`7stud> What is Windows?

[17:18] <moritz> `7stud: you have to specify nl in open, not in lines

[17:18] <psch> moritz: i don't see an easy way to prepend (timeout) as it happens for m: currently, but i can append it

[17:18] <`7stud> @moritz, I did both--neither work.

[17:18] <moritz> psch: that'd be fine

[17:18] <masak> `7stud: I'm looking at the source now, and none of the .lines methods have a :$nl parameter

[17:19] <`7stud> The docs say there is an nl parameter in both lines() and open().

[17:19] <itz> hmm I'm having panda issues related to Shell::Command 

[17:19] <itz> ==> Testing Shell::Command

[17:19] <itz> write string requires an object with REPR MVMOSHandle

[17:19] <moritz> `7stud: which docs?

[17:19] <psch> (there is probably some way, but that would need a bit more effort than i'm able to put into that atm)

[17:19] <itz> is that me not cleaning up or should I wait?

[17:20] <flussence> itz: broken for me too

[17:20] <`7stud> @mortiz, let me fine the docs I was looking at.  Give me a minute.

[17:20] <`7stud> fine = find

[17:22] *** sqirrel_ joined
[17:22] <j1n3l0> last question - i promise :)

[17:22] <j1n3l0> i'm getting the following error:

[17:22] <j1n3l0> # Default constructor for 'Person' only takes named arguments

[17:22] <masak> (no, please do keep asking questions) :)

[17:23] <j1n3l0> :)

[17:23] <masak> j1n3l0: you passed something to .new that wasn't a named parameter

[17:23] <j1n3l0> this is what i am passing to Person.new()

[17:23] <masak> j1n3l0: like, .new($foo) instead of .new(foo => $foo)

[17:23] <j1n3l0> ("age" => 201, "name" => "baz").list

[17:23] <j1n3l0> according to ...

[17:24] <masak> what's the exact line of code with Person.new() in it?

[17:24] <j1n3l0> MY_CALCULATION..perl.say

[17:24] <j1n3l0> umm 

[17:24] <j1n3l0> 1 sec ...

[17:24] <j1n3l0> $?CLASS.new( ?CLASS.^attributes.map({ $_.name.split(/'!'/).[*-1] => $_.type.sample }) );

[17:24] * j1n3l0 i know .. hideous

[17:25] * j1n3l0 wip

[17:25] <masak> yeah, that's... not a named argument.

[17:25] <masak> that's, at most, a list of pairs.

[17:25] <j1n3l0> how do i turn that into a named argument?

[17:25] <masak> keep in mind Perl 6 doesn't auto-flatten the way Perl 5 does.

[17:25] <jnthn> $?CLASS.new(|%( ...all the stuff... ))

[17:26] <masak> j1n3l0: what jnthn said works, but may I recommend you put the .map stuff in a hash, and then just do |%args in the .new ?

[17:26] *** telex left
[17:26] <`7stud> @moritz, lines() docs: https://github.com/perl6/specs/blob/master/S32-setting-library/IO.pod

[17:26] <`7stud> open docs: http://doc.perl6.org/type/IO#sub_open

[17:26] <j1n3l0> will do - once i have something working :)

[17:27] <j1n3l0> thanks :)

[17:27] <j1n3l0> that worked!

[17:27] <masak> \o/

[17:28] *** telex joined
[17:28] <`7stud> In any case, I was unable to read a file in paragraph mode, using either open() or lines(), so before filing a bug report, I thought I'd check here if it was  known issue.

[17:29] <masak> not known by me, and I'm not aware it's in RT

[17:29] <masak> please submit

[17:29] *** kjs_ left
[17:30] <flussence> that «:$nl = "EOF"» in the spec is a bit... ew

[17:30] <`7stud> Someone at SO looked at the source code and said *it* was reading only the last character of the nl string.

[17:30] <`7stud> I looked at the source code, and I couldn't understand it.

[17:31] <dalek> nqp: 018a450 | peschwa++ | src/vm/jvm/runtime/org/perl6/nqp/tools/EvalServer.java:

[17:31] <dalek> nqp: Emit "\n(timeout)" when run_limited exceeded the limit.

[17:31] <dalek> nqp: review: https://github.com/perl6/nqp/commit/018a4500df

[17:31] <FROGGS_> SO seems right then

[17:31] <`7stud> The lines cited were: syncfile.c:38, syncfile.c:119 and syncfile.c:91

[17:31] <jnthn> FROGGS_: Didn't you have a branch at some point working on multi-char seps?

[17:31] <FROGGS_> I patched it, but that sleeps in a branch atm :o(

[17:31] <FROGGS_> yes

[17:32] <FROGGS_> needs review + discussion

[17:32] <jnthn> Aye. Well, can try the late end of next week if you've time...I'm going to be largely tied up until Wed or so...

[17:33] *** raiph left
[17:37] * psch afk &

[17:37] <FROGGS_> jnthn: I'll have time

[17:37] <jnthn> OK, cool :)

[17:37] <FROGGS_> ;o)

[17:39] <`7stud> masak: What about the source code for open()?

[17:39] *** diana_olhovik_ left
[17:39] <dalek> rakudo/no-vm-at-startup: 0e56328 | jnthn++ | src/core/Inc.pm:

[17:39] <dalek> rakudo/no-vm-at-startup: Revert "Avoid $*VM initialization at startup."

[17:39] <dalek> rakudo/no-vm-at-startup: 

[17:39] <dalek> rakudo/no-vm-at-startup: This reverts commit d835c8e3d5810ad6c6efae3a52d377311ba32bb4, which

[17:39] <dalek> rakudo/no-vm-at-startup: causes inexplicable bustage to Panda bootstrap.

[17:39] <dalek> rakudo/no-vm-at-startup: review: https://github.com/rakudo/rakudo/commit/0e563284f3

[17:39] <dalek> rakudo/no-vm-at-startup: d90a6da | jnthn++ | src/core/Inc.pm:

[17:39] <dalek> rakudo/no-vm-at-startup: Avoid $*VM initialization at startup.

[17:39] <dalek> rakudo/no-vm-at-startup: 

[17:39] <dalek> rakudo/no-vm-at-startup: This shaves around 30ms off CORE.setting loading (under the profiler,

[17:39] <dalek> rakudo/no-vm-at-startup: so a bit less in reality - but still very measurable).

[17:39] <dalek> rakudo/no-vm-at-startup: review: https://github.com/rakudo/rakudo/commit/d90a6da688

[17:39] <dalek> rakudo/nom: 0e56328 | jnthn++ | src/core/Inc.pm:

[17:39] <dalek> rakudo/nom: Revert "Avoid $*VM initialization at startup."

[17:39] <dalek> rakudo/nom: 

[17:39] <dalek> rakudo/nom: This reverts commit d835c8e3d5810ad6c6efae3a52d377311ba32bb4, which

[17:39] <dalek> rakudo/nom: causes inexplicable bustage to Panda bootstrap.

[17:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0e563284f3

[17:40] <jnthn> bbiab

[17:42] <j1n3l0> thanks guys

[17:42] <j1n3l0> this is what i was working on - https://gist.github.com/9fb24a4e8e15c26cf25a

[17:43] <j1n3l0> it's only a proof of concept

[17:43] <j1n3l0> was thinking about generative testing for perl6

[17:43] <j1n3l0> something along the lines of quickcheck :)

[17:44] <`7stud> moritz: The lines docs I looked at are here: https://github.com/perl6/specs/blob/master/S32-setting-library/IO.pod

[17:44] <`7stud> mortiz: The open docs I looked at are here: http://doc.perl6.org/type/IO#sub_open

[17:45] <j1n3l0> hacked on this thanks to the london.pm :)

[17:46] *** diana_olhovik_ joined
[17:47] *** colomon joined
[17:48] *** eternaleye left
[17:50] *** eternaleye joined
[17:51] *** kjs_ joined
[17:59] *** j1n3l0 left
[18:00] *** virtualsue left
[18:00] *** kjs_ left
[18:01] *** kjs_ joined
[18:02] *** virtualsue joined
[18:02] *** virtualsue left
[18:03] <dalek> specs: c1a2f0b | moritz++ | S32-setting-library/IO.pod:

[18:03] <dalek> specs: S32::IO: lines does not have :nl, open does. `7stud++ for noticing

[18:03] <dalek> specs: review: https://github.com/perl6/specs/commit/c1a2f0bd4b

[18:03] <moritz> `7stud: fixed the docs

[18:05] <`7stud> moritz: Should I file a bug report about open() not being able to use "\n\n" as the input line separator?

[18:05] <moritz> `7stud: yes please

[18:06] <`7stud> mortiz:  Okay.  Thanks for the responses.

[18:06] <`7stud> dalek: Thanks.

[18:06] <`7stud> masak: Thanks.

[18:06] *** colomon left
[18:07] *** zjmarlow__ joined
[18:07] *** mr-foobar left
[18:08] *** mr-foobar joined
[18:10] <dalek> evalbot: ad15762 | moritz++ | evalbot.pl:

[18:10] <dalek> evalbot: update rakudo-jvm target

[18:10] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/ad157626cf

[18:10] *** zjmarlow_ left
[18:11] *** camelia left
[18:12] <timotimo> is that one of the things froggs' linesep branch will be able to fixify?

[18:13] <timotimo> "bustage" read as a german word is a little funny

[18:15] *** kjs_ left
[18:18] *** camelia joined
[18:18] *** camelia left
[18:19] *** BenGoldberg left
[18:20] *** BenGoldberg joined
[18:21] *** kjs_ joined
[18:21] <moritz> fwiw I have trouble starting camelia via systemd

[18:21] <moritz> Mar 21 19:18:29 ns1 systemd[32137]: Failed at step EXEC spawning /bin/bash: Resource temporarily unavailable

[18:22] *** BenGoldberg left
[18:23] *** BenGoldberg joined
[18:23] <moritz> works now, with PrivatedDevices=yes commented out. weird.

[18:23] *** BenGoldberg left
[18:23] <FROGGS_> moritz: the testers.perl6.org stuff is disabled since three hours though (on hack)

[18:23] <FROGGS_> ahh

[18:23] <moritz> FROGGS_: different host

[18:23] <FROGGS_> k

[18:24] *** BenGoldberg joined
[18:27] *** colomon joined
[18:29] *** nige left
[18:30] *** camelia joined
[18:32] *** ChanServ sets mode: +v camelia

[18:32] *** rurban left
[18:33] *** tinyblak left
[18:39] *** rurban joined
[18:41] *** colomon left
[18:41] <moritz> boo, the JVM seems to severly dislike memory limits

[18:41] <moritz> j: say 42

[18:41] *** camelia left
[18:41] *** colomon joined
[18:42] <moritz> *drumroll*

[18:42] <moritz> ENOCAMELIA

[18:47] *** sqirrel_ left
[18:48] <TimToady> Dreadful sorry, Cameliantine...

[18:49] *** camelia joined
[18:49] <moritz> j: say 42

[18:50] *** ChanServ sets mode: +v camelia

[18:50] <camelia> rakudo-jvm 0e5632: OUTPUT«Can't open perl script "/home/camelia/jvm-rakudo/eval-client.pl": No such file or directory␤»

[18:51] <dalek> evalbot: e338022 | moritz++ | evalbot.pl:

[18:51] <dalek> evalbot: Fix path

[18:51] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/e338022f41

[18:51] *** camelia left
[18:51] *** davido_ joined
[18:51] *** camelia joined
[18:53] *** ChanServ sets mode: +v camelia

[18:53] <moritz> m: say 42

[18:53] <camelia> rakudo-moar 0e5632: OUTPUT«42␤»

[18:53] <moritz> j: say 42

[18:53] <camelia> rakudo-jvm 0e5632: OUTPUT«Can't open perl script "/home/camelia/rakudo-inst/eval-client.pl": No such file or directory␤»

[18:53] <moritz> eeks

[18:54] <dalek> evalbot: 095e6ed | moritz++ | evalbot.pl:

[18:54] <dalek> evalbot: yet another attempt at fixing eval-client.pl path

[18:54] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/095e6edf12

[18:54] *** camelia left
[18:54] * masak .oO( write once, run nowhere )

[18:54] *** camelia joined
[18:54] *** Ven joined
[18:54] <moritz> masak: except it's "write 15 times", judging the amounts of commits (and local service file modifications) I need

[18:54] <moritz> m: say 42

[18:55] * masak .oO( write 15 times, run nowhere )

[18:55] <moritz> now we observe pocoirc's rate limiting

[18:55] *** ChanServ sets mode: +v camelia

[18:55] <camelia> rakudo-moar 0e5632: OUTPUT«42␤»

[18:55] <moritz> j: say 42

[18:55] <camelia> rakudo-jvm 0e5632: OUTPUT«Can't open perl script "/home/camelia/rakudo-inst/eval-client.pl": No such file or directory␤»

[18:56] <moritz> forgot the pull before the reload :(

[18:56] *** camelia left
[18:56] *** camelia joined
[18:56] * masak wonders if there would be a way to automate this...

[18:57] <moritz> probably.

[18:57] <arnsholt> .oO(If only there were a simple way of specifying a sequence of steps to be taken by a machine...)

[18:57] <arnsholt> =)

[18:57] <moritz> m: say 'baseline'

[18:57] *** ChanServ sets mode: +v camelia

[18:57] <masak> arnsholt: I'm sure I read something about that in an article somewhere.

[18:57] <camelia> rakudo-moar 0e5632: OUTPUT«baseline␤»

[18:57] <moritz> j: say 'j-line'

[18:57] <camelia> rakudo-jvm 0e5632: OUTPUT«Could not open /tmp/yy8ImJg5s5. java.nio.file.NoSuchFileException: /tmp/yy8ImJg5s5␤»

[18:58] <masak> improvement.

[18:58] <masak> maybe?

[18:58] <moritz> yes

[18:58] <moritz> masak: now please automate a way to fix this :-)

[18:59] *** anaeem1 joined
[18:59] * masak .oO( we have shown a solution for n = 1. now please generalize to all transfinite n )

[18:59] *** camelia left
[18:59] *** camelia joined
[19:00] <moritz> ok, the camelia systemd file had PrivateTmp=yes

[19:00] <moritz> and it seems that the eval client and server communicate through temp files :(

[19:00] <moritz> or communicate by passing the command line (including file names) around

[19:00] *** ChanServ sets mode: +v camelia

[19:00] <moritz> m: say 'baseline'

[19:00] <camelia> rakudo-moar 0e5632: OUTPUT«baseline␤»

[19:01] * moritz too tired for this whole ops shit

[19:01] <moritz> j: say 'jline'

[19:01] <camelia> rakudo-jvm 0e5632: OUTPUT«jline␤»

[19:01] <raydiak> \o/

[19:01] <masak> moritz++ # doing thankless ops work

[19:01] <masak> j: say "JVM, my nemesis. we meet again"

[19:01] *** fhelmberger left
[19:01] * TimToady thanks moritz++ for doing thankless work...oh wait...

[19:01] <camelia> rakudo-jvm 0e5632: OUTPUT«JVM, my nemesis. we meet again␤»

[19:02] <masak> TimToady: also, people never buy and sell priceless items.

[19:02] <moritz> I was so >.< close to giving up

[19:03] <psch> j: use System:from<Java>; System.get_out.println("i wonder...")

[19:03] <camelia> rakudo-jvm 0e5632: OUTPUT«===SORRY!===␤java.lang.ClassNotFoundException: System␤»

[19:03] <masak> moritz: just imagine how often that must happen to people. they give up that >.< close to the solution in solution space

[19:03] <`7stud> moritz: "I'm not even ware of a paragraph mode" => In perl5,  "slurp mode":  local $/ = undef;, or just: local $/; and for  "paragraph mode": local $/ = '';

[19:03] <masak> moritz: a higher-dimensional being outside of solution space would shake their head and go "oh, well..."

[19:03] <moritz> `7stud: yes, I know p5's paragraph mode

[19:04] <psch> moritz++

[19:04] <`7stud> moritz:  Well, if you are the same moritz on perlmonks, then I thought you must know that!

[19:04] <TimToady> note that $/ = "\n\n" is specifically not paragraph mode, since it should be /\n\n+/

[19:04] <moritz> `7stud: I am

[19:05] *** Alina-malina left
[19:05] <moritz> it seems I have a reputation to uphold :-)

[19:06] <`7stud> Anyway, I tried perl6 with nl => '', and it still wouldn't read a file in paragraph mode.

[19:06] <`7stud> Bug report filed. 

[19:07] <masak> `7stud: fwiw, that '' thing is one aspect of that I hope we don't inherit from p5 :)

[19:07] *** spider-mario left
[19:07] <masak> `7stud: it makes not-enough-sense that '' would mean "two newlines, except be lenient about whitespace"

[19:08] *** Alina-malina joined
[19:10] <moritz> well, $handle.paragraphs could exist

[19:11] <moritz> or, once we have Cat, $handle.Cat.split(/\n\n+/)

[19:14] *** `7stud_ joined
[19:14] <psch> j: say $*VM.config<runtime.classpath>

[19:14] <camelia> rakudo-jvm 0e5632: OUTPUT«/home/camelia/rakudo-inst-2/share/nqp/lib␤»

[19:14] <psch> j: say $*VM.config<runtime.bootclasspath>

[19:14] <camelia> rakudo-jvm 0e5632: OUTPUT«-Xbootclasspath/a:.:/home/camelia/rakudo-inst-2/share/nqp/runtime/asm-4.1.jar:/home/camelia/rakudo-inst-2/share/nqp/runtime/asm-tree-4.1.jar:/home/camelia/rakudo-inst-2/share/nqp/runtime/jline-1.0.jar:/home/camelia/rakudo-inst-2/share/nqp/runtime/jna.jar:/h…»

[19:14] *** `7stud__ joined
[19:16] *** `7stud left
[19:16] *** `7stud__ is now known as `7stud

[19:16] *** [Tux] left
[19:16] *** `7stud left
[19:17] <dalek> doc: 5f9e753 | paultcochrane++ | lib/Type/IO.pod:

[19:17] <dalek> doc: Document rmdir

[19:17] <dalek> doc: review: https://github.com/perl6/doc/commit/5f9e7536da

[19:17] <dalek> doc: 46e6edf | paultcochrane++ | lib/Type/List.pod:

[19:17] <dalek> doc: Document roundrobin

[19:17] <dalek> doc: 

[19:17] <dalek> doc: ... wantonly stealing from the specs

[19:17] <dalek> doc: review: https://github.com/perl6/doc/commit/46e6edf082

[19:18] *** `7stud_ left
[19:19] *** Ven left
[19:22] <timotimo> when i hear "but be lenient about whitespace" i think of splitting at /\s*[\n\s*]+/ tbh

[19:23] *** [Tux] joined
[19:24] <masak> oh, the actual semantics -- I had forgotten the details -- is that $/ = "" reads /\n ** 2..*/ between paragraphs

[19:24] <TimToady> that pattern is equivalen to /\s+/

[19:25] <TimToady> oh, wait that's p6

[19:25] <TimToady> /\n[\h*\n]+/ seems more like

[19:27] <sivoais> masak: have you seen OCaml's ppx? <https://blogs.janestreet.com/extension-points-or-how-ocaml-is-becoming-more-like-lisp/>. I'm not well-versed in Perl6 macros, but does it have something similar

[19:28] <sivoais> more info <http://www.lexifi.com/blog/ppx-and-extension-points>, <http://whitequark.org/blog/2014/04/16/a-guide-to-extension-points-in-ocaml/>

[19:28] <vendethiel> "Or can you? Lisp has a rich syntactic macro system but just one parser" sorry, what?

[19:29] <vendethiel> ah, I see what they mean

[19:29] <raydiak> updated https://github.com/rakudo/rakudo/pull/392 with a suggestion from Mouq++...anyone else have any input or feel good about merging it?

[19:30] <masak> sivoais: hm, seems on first blush to be quite unlike Perl 6's situation -- in that we won't be doing a separate parser frontend; we'll just be parsing and running macros all at the same time.

[19:30] *** colomon left
[19:30] *** amaliapomian joined
[19:31] *** Ven joined
[19:32] *** kjs_ left
[19:33] *** diana_olhovik_ left
[19:36] *** darutoko left
[19:36] <psch> j: use java::lang::System:from<Java>; System.get_out.println("i wonder...") # we don't get java.lang as CORE...

[19:36] <camelia> rakudo-jvm 0e5632: ( no output )

[19:37] <psch> welp, that goes to the term it seems

[19:37] <sivoais> masak: right, many of these things just aren't needed in Perl6 because it already has traits and quasiquotes. Maybe the bit that might be most useful is how they provide an API to the AST

[19:38] *** rurban left
[19:39] <masak> that could be very interesting, yes.

[19:39] * masak checks the other links

[19:39] *** mr_ron joined
[19:40] <masak> hm, looks interesting.

[19:40] <masak> I skimmed the "A Guide..." post. I will read it in depth later.

[19:43] <mr_ron> perl6: multi want-b-or-c('b'){ say 'got letter b' }; multi want-b-or-c('c'){ say 'got letter c' }; want-b-or-c('c');try {want-b-or-c(5);}

[19:43] <camelia> rakudo-moar 0e5632: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Calling want-b-or-c(int) will never work with any of these multi signatures:␤    (Str $ where { ... }) ␤    (Str $ where { ... })␤at /tmp/tmpfile:1␤------> 3'got letter c' }; want-b-or-c('c')…»

[19:44] <mr_ron> perl6: multi want-b-or-c('b'){ say 'got letter b' }; multi want-b-or-c('c'){ say 'got letter c' }; want-b-or-c('c');try {want-b-or-c('d');}

[19:44] <camelia> rakudo-moar 0e5632: OUTPUT«got letter c␤»

[19:45] <mr_ron> second one caught OK ... how to catch exception in first example ??

[19:45] *** diana_olhovik_ joined
[19:48] <dalek> Heuristic branch merge: pushed 17 commits to perl6-examples by paultcochrane

[19:48] <psch> mr_ron: your second code snippet is a compile time error, try only suppressed runtime exceptions

[19:50] <mr_ron> first snippet gave compile time error.  Why is mismatch on string run time but mismatch on type compile time.  Couldn't the mismatch on type be runtime too so we could try/catch

[19:51] <psch> m: sub f(Str(Cool) $ where 'c') { "got c" }; try f(5); say "alive"

[19:51] <camelia> rakudo-moar 0e5632: OUTPUT«alive␤»

[19:52] <psch> m: sub f(Str(Cool) $ where 'c') { "got c" }; f(5)

[19:52] <camelia> rakudo-moar 0e5632: OUTPUT«Constraint type check failed for parameter '<anon>'␤  in sub f at /tmp/8d6TItjEEv:1␤  in block <unit> at /tmp/8d6TItjEEv:1␤␤»

[19:52] <psch> mr_ron: that's the only way i can think of, there might be a better one

[19:53] <mr_ron> thanks ... that helps ... not as familiar with "where".  Helps with what I was trying to do though ...

[19:59] *** raiph joined
[19:59] <mr_ron> perl6: multi want-b-or-c(Str $s where 'b'){ say 'got letter b' }; multi want-b-or-c(Str $s where 'c'){ say 'got letter c' }; want-b-or-c('c');try {want-b-or-c(5);}

[19:59] <camelia> rakudo-moar 0e5632: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Calling want-b-or-c(int) will never work with any of these multi signatures:␤    (Str $s where { ... }) ␤    (Str $s where { ... })␤at /tmp/tmpfile:1␤------> 3'got letter c' }; want-b-or-c('c…»

[20:00] <mr_ron> its not the "where" that's helping it's the Cool

[20:02] <psch> mr_ron: but 'where' is how you write 'i want only one specific value' in a signature when you need an explicit type

[20:02] <psch> m: sub f(Str 'c') { }

[20:02] <camelia> rakudo-moar 0e5632: OUTPUT«5===SORRY!5=== Error while compiling /tmp/b2R4_kBcs8␤A parameter may only have one prefix type constraint␤at /tmp/b2R4_kBcs8:1␤------> 3sub f(Str 'c'7⏏5) { }␤»

[20:02] <psch> m: sub f(Str $ 'c') { }

[20:02] <camelia> rakudo-moar 0e5632: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uAUBY7ZTZx␤Missing block␤at /tmp/uAUBY7ZTZx:1␤------> 3sub f(Str $ 7⏏5'c') { }␤»

[20:02] <psch> m: sub f(Str $ where 'c') { }

[20:02] <camelia> rakudo-moar 0e5632: ( no output )

[20:03] <psch> mr_ron: and Cool is the type that allows translation of e.g. Numeric to String

[20:03] <mr_ron> m sub f('c'){}

[20:03] <mr_ron> m: sub f('c'){}

[20:03] <camelia> rakudo-moar 0e5632: ( no output )

[20:07] <mr_ron> m: multi want-b-or-c(Str $s where 'b'){ say 'got letter b' }; multi want-b-or-c(Str $s where 'c'){ say 'got letter c' }; want-b-or-c('c');try {want-b-or-c('d');}

[20:07] <camelia> rakudo-moar 0e5632: OUTPUT«got letter c␤»

[20:07] <mr_ron> m: multi want-b-or-c(Str $s where 'b'){ say 'got letter b' }; multi want-b-or-c(Str $s where 'c'){ say 'got letter c' }; want-b-or-c('c');try {want-b-or-c(5);}

[20:07] <camelia> rakudo-moar 0e5632: OUTPUT«5===SORRY!5=== Error while compiling /tmp/HH9c4ymFdM␤Calling want-b-or-c(int) will never work with any of these multi signatures:␤    (Str $s where { ... }) ␤    (Str $s where { ... })␤at /tmp/HH9c4ymFdM:1␤------> 3'got letter c' }; want-b-o…»

[20:08] <mr_ron> still think it might be nice to catch type collisions as exceptions too ...

[20:09] <psch> m: my &f = sub ('c') { "c" }; try f(5) # this works too

[20:09] <camelia> rakudo-moar 0e5632: ( no output )

[20:13] *** kurahaupo left
[20:13] *** rindolf left
[20:14] *** kurahaupo joined
[20:15] <mr_ron> m: multi want-b-or-c(Str $s where 'b'){ say 'got letter b' }; multi want-b-or-c(Str $s where 'c'){ say 'got letter c' }; want-b-or-c('c'); my $f = &want-b-or-c; try {$f('b'); $f(5);}

[20:15] <camelia> rakudo-moar 0e5632: OUTPUT«got letter c␤got letter b␤»

[20:15] <mr_ron> works but a little obscure ...

[20:16] <TimToady> just write an extra multi with Any instead of 'b' or 'c', and complain if you get there

[20:16] <TimToady> there's no reason to write Str $x where 'b'

[20:16] <TimToady> that's what a simple 'b' means

[20:16] *** adu_ joined
[20:18] <TimToady> notice in your first error message that it expanded 'b' to Str $ where {...}

[20:22] <mr_ron> Still working away at it but think multi with Any will work ... thanks ...

[20:29] *** anaeem1 left
[20:29] <TimToady> afk

[20:29] *** anaeem1 joined
[20:32] <mr_ron> m: multi want-b-or-c(Any) {fail "bad param"}; multi want-b-or-c('b'){ say 'got letter b' }; multi want-b-or-c('c'){ say 'got letter c' }; want-b-or-c('c');try {want-b-or-c(5); CATCH { when "bad param" {say "caught it"} }}; try {want-b-or-c('d');}

[20:32] <camelia> rakudo-moar 0e5632: OUTPUT«got letter c␤caught it␤Unhandled exception: bad param␤   at <unknown>:1  (/home/camelia/rakudo-inst-2/share/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:15830  (/home/camelia/rakudo-inst-2/share/perl6/runtime/COR…»

[20:32] <mr_ron> wfm I think

[20:32] *** anaeem1 left
[20:32] *** anaeem1 joined
[20:38] *** adu_ left
[20:47] *** rurban_ left
[20:53] *** kurahaupo left
[20:56] *** mr_ron left
[20:57] *** youngg left
[20:59] *** Ven left
[21:01] <masak> m: class C { has @.foo }; my @bar = 1, 2, 3; my C $c .= new; $c.foo = @bar; say $c.perl

[21:01] <camelia> rakudo-moar 0e5632: OUTPUT«C.new(foo => Array.new(1, 2, 3))␤»

[21:02] <masak> I'm always a little uneasy in situations like the above, afraid I'll get double layers of array. but this seems to work; nice :)

[21:03] *** yqt joined
[21:03] <jnthn> Yes, it behaves like you did @!foo = @bar inside of C, if you want a way to remember it :)

[21:04] <masak> I also note that all the 'is hidden-from-backtrace' work seems to be in vain, because I keep getting these useless reify/gimme/sink lines in my stacktraces :(

[21:04] <masak> jnthn: oh, that's a useful mnemonic

[21:06] <jnthn> masak: I expect a load of those will go away in the GLR

[21:06] <dalek> faq: 77cda34 | moritz++ | answers.md:

[21:06] <dalek> faq: Add naming FAQ

[21:06] <dalek> faq: review: https://github.com/perl6/faq/commit/77cda344c3

[21:07] <moritz> feedback/additions very welcome

[21:17] <raiph> .tell p6weekly Tux++ RFC7111 finished http://irclog.perlgeek.de/perl6/2015-03-20#i_10312704

[21:17] <yoleaux> raiph: I'll pass your message to p6weekly.

[21:21] *** adu_ joined
[21:21] *** anaeem1 left
[21:21] *** anaeem1 joined
[21:22] *** adu_ left
[21:23] <masak> moritz: "...hurts Perl 5 somehow" -- the "somehow" at the end makes it seem like the notion that Perl 6 hurting Perl 5 is somewhat far-fetched or ludicrous. is long as you meant it that way, it's fine, but it doesn't seem all that consistent with detached, objecting answering. maybe s/shoehow/simply by having the same name and a larger version number/ ?

[21:24] <masak> (which more closely identifies the renamingists' critique, too)

[21:25] *** adu_ joined
[21:25] <masak> moritz: ss/alternative name <(instead)>//, p'haps

[21:26] *** anaeem1 left
[21:30] *** adu_ left
[21:31] *** pierrot left
[21:35] *** pierrot joined
[21:36] <dalek> faq: 103e3b8 | moritz++ | answers.md:

[21:36] <dalek> faq: Incorporate feedback from masak++

[21:36] <dalek> faq: review: https://github.com/perl6/faq/commit/103e3b8521

[21:41] *** amaliapomian left
[21:41] <literal> shoehow? :P

[21:52] <masak> oops!

[21:53] * masak .oO( getting corrected by someone called "literal", just my luck ) :P

[21:54] *** espadrine left
[21:56] <jnthn> ShoeHOW sounds like the object behind a "shoe" package declarator :)

[21:57] *** adu joined
[22:00] <Ulti> |Tux|: is your csv.pl getting faster just from compiler changes?

[22:08] <masak> jnthn: "I give you this whole wonderful MOP, and all you come up with is... ShowHOW!?" :P

[22:08] <timotimo> feels kind of shoehorned to me

[22:11] <jnthn> masak: Exactly. Now you're really put your foot in it. :P

[22:12] <Ulti> hmm my tests have gotten 4s slower which is +50% runtime

[22:13] <Ulti> 0.5 seconds is just more frequent and longer GC

[22:14] <Ulti> by the looks of it

[22:19] *** rurban joined
[22:20] <jnthn> Ulti: That's probably a product or more allocations...

[22:20] <jnthn> (As in, that's probably a symptom rather than the cause)

[22:21] * jnthn afk for a bit

[22:21] <timotimo> right, but at least we can look at allocations in the profiler

[22:24] *** xfix left
[22:25] *** coffee` left
[22:26] *** anaeem1_ joined
[22:30] *** anaeem1_ left
[22:33] *** ggoebel joined
[22:36] <masak> 'night, #perl6

[22:36] <timotimo> gnite masak 

[22:49] *** camelia left
[22:50] *** camelia joined
[22:52] *** ChanServ sets mode: +v camelia

[22:53] *** |Tux| left
[22:54] *** Tux__ joined
[22:58] <timotimo> we can't --profile-compile unless the target is running the actual code

[22:59] <timotimo> oh

[22:59] <timotimo> i might have used --profile, in which case that behavior is completely justified

[23:10] *** jack_rabbit joined
[23:14] *** skids joined
[23:17] *** jack_rabbit left
[23:25] *** adu left
[23:29] *** adu joined
[23:29] *** prime| left
[23:33] *** xprime joined
[23:34] <Ulti> https://github.com/perl6/doc/blob/3085663cace74d0e051e23f225e2c349a9da48ac/lib/Type/PairMap.pod  odes -> does typo needs fixing especially as its linked from the release announcement

[23:39] <dalek> doc: 1db56d7 | timo++ | lib/Type/PairMap.pod:

[23:39] <dalek> doc: odes -> does, Ulti++

[23:39] <dalek> doc: review: https://github.com/perl6/doc/commit/1db56d7a9d

[23:43] <geekosaur> ...it odes not well?

[23:44] <timotimo> beware the odes of march

[23:46] <Ulti> an ode to Perl 6 http://www.thomasgray.org/cgi-bin/display.cgi?text=pppo

[23:46] *** bjz joined
[23:49] *** diana_olhovik_ left
[23:50] *** yqt left
[23:52] *** larion left
