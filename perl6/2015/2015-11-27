[00:00] <[Coke]> gfldex: what day?

[00:00] *** zacts_ joined
[00:01] <gfldex> [Coke]: it's pretty much finished, just has to be turned into html, so day 2 will do

[00:01] *** zacts left
[00:01] <[Coke]> gfldex: edit the schedule here: https://github.com/perl6/mu/tree/master/misc/perl6advent-2015

[00:02] <dalek> mu: b981588 | (Wenzel P. P. Peppmeyer)++ | misc/perl6advent-2015/schedule:

[00:02] <dalek> mu: Update schedule

[00:02] <dalek> mu: review: https://github.com/perl6/mu/commit/b9815883c2

[00:02] <gfldex> [Coke]: done

[00:03] * gfldex .oO( Was I just overtaken by a bot? )

[00:03] <[Coke]> so, the official release date is the 17th. I suspect that, combined with a need to cram as much dev & testing time, alnog with advent, along with style points, we should aim for the 25th instead, yes?

[00:03] <[Coke]> I'll probably be able to handle the compiler release that day, we'll see what my personal schedule looks like. might have to do it from the car.

[00:04] <gfldex> i suspect that the 17th was chosen to hit the 25th :)

[00:04] *** isacloud joined
[00:04] *** go|dfish joined
[00:04] *** ilbelkyr joined
[00:04] *** diakopte1 joined
[00:04] <[Coke]> it was just based on the old formula, nothign special.

[00:06] *** n0xff joined
[00:12] *** zacts_ left
[00:16] <[Coke]> .ask lizmat - should we again remove all deprecations before xmas?

[00:16] <yoleaux> [Coke]: I'll pass your message to lizmat.

[00:18] *** doublec left
[00:19] *** doublec joined
[00:21] *** rurban left
[00:23] *** yqt joined
[00:26] *** Peter_R left
[00:27] *** snarkyboojum left
[00:30] *** pierre-vigier joined
[00:34] <grondilu> m: multi infix:<*>($r, @a) { $r Z* @a }; say pi * [1, 1];

[00:34] *** Mhoram left
[00:34] <camelia> rakudo-moar 39869f: OUTPUT«(3.14159265358979)␤»

[00:35] * grondilu was expecting (pi, pi)

[00:35] <grondilu> oh wait

[00:35] *** abaugher joined
[00:35] <grondilu> I should have used X*.  My bad.

[00:36] <TimToady> .tell jnthn I rejected RT #120916 because it suffices to stub the accessor instead.

[00:36] <yoleaux> TimToady: I'll pass your message to jnthn.

[00:37] *** cognominal left
[00:37] *** cognominal joined
[00:37] <[Coke]> Speaking of speed (in review) I'll craft something in the compiler release announcement about speed.

[00:38] <[Coke]> Haters gonna hate, but we can try to get in front of it.

[00:42] <Hotkeys> are there functions that do the same as some of the operators?

[00:42] <Hotkeys> not sure where it would be useful

[00:42] <Hotkeys> for example +

[00:42] <TimToady> the operators *are* functions

[00:42] <Hotkeys> er

[00:42] <TimToady> m: say &infix:<+>(1,2)

[00:42] <camelia> rakudo-moar 39869f: OUTPUT«3␤»

[00:42] <TimToady> m: say infix:<+>(1,2)

[00:42] <camelia> rakudo-moar 39869f: OUTPUT«3␤»

[00:42] <Hotkeys> I meant like 

[00:43] <Hotkeys> is there an add(...) function as well or is the operator the only function that does this

[00:43] <Hotkeys> as well as '+'

[00:43] <Hotkeys> (I realize I could just define one but I don't actually need one)

[00:43] <TimToady> infix:<+> is its proper name

[00:43] *** Guest84367 is now known as parisba

[00:43] <Hotkeys> alright

[00:43] <TimToady> though in this one case there does happen to be a sum function

[00:43] *** pierre-vigier left
[00:43] <Hotkeys> oh

[00:43] <TimToady> but that's so we can optimize Range.sum

[00:44] <Hotkeys> right

[00:44] <TimToady> in general, we dont go out of our way to come up with letter-only names for our operators

[00:44] <TimToady> many of them do call into methods though

[00:51] *** doublec_ joined
[00:52] *** doublec left
[00:54] *** sno left
[00:54] *** pierre-vigier joined
[00:59] *** CurtisOvidPoe_ joined
[01:00] *** CurtisOvidPoe left
[01:00] *** CurtisOvidPoe_ is now known as CurtisOvidPoe

[01:06] *** yeahnoob joined
[01:07] *** raiph joined
[01:09] *** Zoffix joined
[01:13] *** zacts joined
[01:14] <dalek> rakudo/nom: f6b3bf3 | coke++ | docs/announce/2015.12.md:

[01:14] <dalek> rakudo/nom: Add preliminary xmas release announcement

[01:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6b3bf32ae

[01:14] <Zoffix> w00t

[01:14] <Zoffix> So close now \o/

[01:14] <Zoffix> We're actually gonna call it "коледа"? :)

[01:14] <Zoffix> mmmkay :)

[01:15] <Zoffix> Sounds totally weird to my Cyrillic ear, but I don't mind.

[01:15] <[Coke]> Zoffix: I'm open to suggestions.

[01:15] * [Coke] hurls https://en.wikipedia.org/wiki/Koliada

[01:16] <Zoffix> Oh, k, my ear would hear it as "коляда" then :) That sounds OK :)

[01:16] <[Coke]> I might have picked the serbian one. I reserve the right to change which one i use. :)

[01:17] <Zoffix> :P sounds good to me

[01:23] <TEttinger> followed one day later by EMERGENCY KWANZAA BUGFIX release

[01:24] <TEttinger> fitting since kwanzaa is on the 26th

[01:24] <Hotkeys> I'd like to suggest aiming for the 23rd and calling it the Festivus release

[01:25] <TEttinger> for the rest of us

[01:25] <Zoffix> [Coke], there's a typo on line 66 fwiw: s/insure/ensure/; https://github.com/rakudo/rakudo/commit/f6b3bf32ae#diff-2da02ce361ccee00e5de8de605e63be3R66

[01:25] <Zoffix> We also got superscript powers, tho I guess that's covered by "see doc/ChangeLog"

[01:25] <Zoffix> m: say ⅓⁶

[01:25] <camelia> rakudo-moar 39869f: OUTPUT«0.001372␤»

[01:25] <TEttinger> no way

[01:25] * Zoffix 'll never get tired of playing with that :P

[01:26] <TEttinger> m: say 2⁶

[01:26] <camelia> rakudo-moar 39869f: OUTPUT«64␤»

[01:26] <Zoffix> m: say 2⁶⁶

[01:26] <camelia> rakudo-moar 39869f: OUTPUT«73786976294838206464␤»

[01:26] <TEttinger> ha nice

[01:26] <Zoffix> :)

[01:26] <TEttinger> u: superscript 9

[01:27] <TEttinger> m: say "\C[SUPERSCRIPT NINE]"

[01:27] <camelia> rakudo-moar 39869f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XmyDkTcawV␤Unrecognized backslash sequence: '\C'␤at /tmp/XmyDkTcawV:1␤------> 3say "\7⏏5C[SUPERSCRIPT NINE]"␤    expecting any of:␤        argument list␤        double quotes␤        term␤»

[01:27] <Hotkeys> ⁹

[01:27] <Zoffix> m: say "\c[SUPERSCRIPT NINE]"

[01:27] <camelia> rakudo-moar 39869f: OUTPUT«⁹␤»

[01:27] <Hotkeys> .u superscript 9

[01:27] <yoleaux> No characters found

[01:27] <TEttinger> sah

[01:27] <Zoffix> .u ⁹

[01:27] <yoleaux> U+2079 SUPERSCRIPT NINE [No] (⁹)

[01:27] <dalek> rakudo/nom: 1ae6805 | coke++ | docs/announce/2015.12.md:

[01:27] <dalek> rakudo/nom: remove leftovers from previous release note

[01:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ae680522a

[01:27] <Hotkeys> ah

[01:27] <Hotkeys> 'nine'

[01:27] <[Coke]> Zoffix: removed.

[01:27] <TEttinger> m: say 9⁹

[01:27] <camelia> rakudo-moar 39869f: OUTPUT«387420489␤»

[01:28] <Hotkeys> instead of 9

[01:28] <Zoffix> :S

[01:28] <Zoffix> hehe OK :)

[01:28] *** doublec joined
[01:28] <Zoffix> I'm excited \o/

[01:29] <TEttinger> * contributed? but that guy's horrible

[01:29] <Zoffix> :P

[01:30] <[Coke]> Whatever.

[01:30] <TEttinger> haha

[01:30] *** doublec_ left
[01:30] <Hotkeys> 6.xisnunsla anyone?

[01:30] * Hotkeys lojbans it up

[01:30] <TEttinger> * is in prison for every crime ever committed by a living person convicted of a crime

[01:31] <Hotkeys> but * is also praised for all the good anyone has ever done

[01:32] <TEttinger> the weight of *'s soul(s) must be weighed against a feather or they get eaten by a crocodile

[01:32] <TEttinger> "can it be a very large feather?"

[01:33] <Hotkeys> but what is heavier

[01:33] <Hotkeys> a pound of soul or a pound of feather

[01:33] <Hotkeys> ???

[01:33] <TEttinger> I dunno, soul can get pretty heavy, like much R&B as well

[01:33] *** doublec_ joined
[01:34] <Hotkeys> gotcha

[01:34] *** doublec left
[01:34] <Hotkeys> oldest trick in the book

[01:34] <Hotkeys> a pound of feathers is always lighter

[01:34] <Zoffix> Hotkeys, a pound of feather, 'cause souls don't exist!@

[01:34] <Zoffix> :)

[01:34] <Hotkeys> yes but if we had an existant pound

[01:35] <TimToady> r: say "a" ~~ m/<![a]>/

[01:35] <TEttinger> it depends I suppose on the density

[01:35] <camelia> rakudo-moar 1ae680, rakudo-jvm f6b3bf: OUTPUT«False␤»

[01:35] <Hotkeys> of soulstuff

[01:35] <Hotkeys> (existent?)

[01:35] <TimToady> I have a fix for this one for moar, but not for jvm

[01:35] <TEttinger> if if souls are extremely non-dense, then they might weigh less than the feather by extending above the scale and out of earth orbit

[01:36] <TEttinger> to the heavens, as it were

[01:36] <Hotkeys> lol

[01:36] <Zoffix> TEttinger, a pound is a pound, bruh, extending or not :P

[01:36] *** pecastro left
[01:36] <TEttinger> but a pound only makes sense in context of earth's gravity

[01:36] <TEttinger> weightless in space

[01:37] <Hotkeys> what is more massful

[01:37] <Zoffix> no, it doesn't :) A pound of mass is a pound of mass anywhere

[01:37] <Hotkeys> a kilogram of souls

[01:37] <TEttinger> haha

[01:37] <Hotkeys> or a kilogram of feathers

[01:37] <Hotkeys> :p

[01:37] <Hotkeys> Zoffix: depends if it's a unit of mass or weight

[01:37] <Zoffix> :o

[01:37] <Zoffix> :)

[01:37] <TEttinger> morality, in this case

[01:37] <TEttinger> in the ancient egyptian sense

[01:37] <Hotkeys> it's immoral to use the imperial system

[01:38] <TEttinger> the weight of a soul vs. a feather is a concept in the ancient egyptian mythological afterlife

[01:38] <TEttinger> I think that croc was far

[01:38] <TEttinger> fat

[01:38] *** doublec joined
[01:39] <TEttinger> it's interesting reading about rarely-mentioned mythologies. it makes you wonder about rarely-mentioned programming language concepts

[01:39] *** doublec_ left
[01:40] *** pierre-vigier left
[01:40] *** pierre-vigier joined
[01:40] <Hotkeys> completely unrelated but often unmentioned

[01:40] <Hotkeys> I'm a fan of conlangs

[01:40] <Hotkeys> (constructed languages)

[01:40] <TEttinger> https://en.wikipedia.org/wiki/Shamanism_among_Eskimo_peoples#Secrecy_.28or_novelty.29_and_the_neutralizing_effect_of_publicity

[01:40] <Hotkeys> (human languages not programming ones)

[01:41] <TEttinger> it's interesting that many northern north american people believed in almost a formal set of rules for the supernatural

[01:42] <Hotkeys> some people really dislike conlangs but idk why

[01:42] <Hotkeys> I don't like them for their use

[01:42] <TEttinger> in western belief, magic is the "rule-breaker" typically

[01:42] <TEttinger> i like conlangs

[01:42] <Hotkeys> I know esperanto or lojban will likely never be used

[01:42] <Hotkeys> or in the extreme

[01:42] <Hotkeys> ithkuil

[01:42] <Hotkeys> (my fav)

[01:42] <TEttinger> oh that one is familiar

[01:42] <Hotkeys> I don't really know any ithkuil

[01:43] <Hotkeys> I just like it in concept

[01:43] <Hotkeys> it's so dense

[01:43] <Hotkeys> "Tram-mļöi  hhâsmařpţuktôx." translates to "‘On the contrary, I think it may turn out that this rugged mountain range trails off at some point.’ "

[01:44] <Hotkeys> oops I copied the quotes

[01:45] <Timbus_> oh cool. spoken APL

[01:45] <Hotkeys> the first word is On ... that

[01:45] <TEttinger> could also be perl

[01:45] <Hotkeys> and the second is this ... point.

[01:45] <Hotkeys> (i am lazy)

[01:46] <Hotkeys> it isn't that they are defined as those things specifically

[01:46] <Hotkeys> like in a dictionary

[01:46] <TEttinger> conjugated?

[01:46] <Hotkeys> it's just a highly agglutinative/synthetic languages

[01:46] <Hotkeys> language**

[01:46] <TEttinger> or agglutinated like german?

[01:46] <TEttinger> ah

[01:46] <Hotkeys> http://www.ithkuil.net/00_intro.html

[01:46] <Hotkeys> scroll down a bit

[01:46] <Hotkeys> it breaks down the sentence

[01:47] <TEttinger> neat

[01:48] *** pierre-vigier left
[01:48] <Hotkeys> root stems in ithkuil are each clusters of 1-5 consonants

[01:48] <Hotkeys> :D

[01:48] <Hotkeys> wonderfully ridiculous

[01:49] <Hotkeys> also it, according to wikipedia, has 92 grammatical cases

[01:49] *** uruwi joined
[01:50] *** cognominal left
[01:50] <Hotkeys> would be wonderful for telegrams

[01:50] *** cognominal joined
[01:50] <Hotkeys> assuming you had an extended morse code for all the characters

[01:52] <AlexDaniel> .u …

[01:52] <yoleaux> U+2026 HORIZONTAL ELLIPSIS [Po] (…)

[01:53] <AlexDaniel> no character with two dots?

[01:53] <AlexDaniel> .u ᳞

[01:53] <yoleaux> U+1CDE VEDIC TONE TWO DOTS BELOW [Mn] (◌᳞)

[01:55] *** yqt left
[01:59] <TEttinger> AlexDaniel: there's at least 28, braille

[02:00] *** rigsby left
[02:00] <Hotkeys> also it has other things that let it be more annoying and dense

[02:00] <Hotkeys> both tone and stress

[02:06] <AlexDaniel> m: say join '', ((0..0x1FFFF ==> grep { .uniname ~~ m/BRAILLE/ }) ==> map { .chr })

[02:06] <camelia> rakudo-moar 1ae680: OUTPUT«⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿⡀⡁⡂⡃⡄⡅⡆⡇⡈⡉⡊⡋⡌⡍⡎⡏⡐⡑⡒⡓⡔…»

[02:06] <AlexDaniel> well, here it is fully:⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿⡀⡁⡂⡃⡄⡅⡆⡇⡈⡉⡊⡋⡌⡍⡎⡏⡐⡑⡒⡓⡔⡕⡖⡗⡘⡙⡚⡛⡜⡝⡞⡟⡠⡡⡢⡣⡤⡥⡦⡧⡨⡩⡪⡫⡬⡭⡮⡯⡰⡱⡲⡳⡴⡵⡶⡷⡸⡹⡺⡻⡼⡽⡾⡿⢀⢁⢂⢃⢄⢅⢆⢇⢈⢉⢊⢋􏿽xE2􏿽xA2

[02:07] *** dayangkun joined
[02:07] <AlexDaniel> hhmm ⠔⠕⠖⠗⠘⠙

[02:10] <AlexDaniel> actually, it is a bit too ordered. It is more fun if you add “.pick: *”

[02:10] <AlexDaniel> ⣎⣃⢙⡛⠄⠳⠆⢫⠻⣈⡓⢝⡋⢃⢻⠕⡂⠃⢈⢯⠮⡡⠭⣛⢏⡨⡾⡊⡢⡰⡜⣒⢞⣗⢄⡼⡅⢀⢉⣫⡘⢅⠒⣋⢾⠉⢷⣠⡮⣴⣘⢍⠸⡤⡵⡫⡌⡻⣁⢜⢳⠱⣰⠵⣣⣷⡸⡝⢗⢒⣦⡲⣕⠬⣢⡄⢎⢤⢛⣚⡿⢶⣐⣧⣞⣻⡞⢇⡏⢌⣙⠢⣱⠁⣬⢴⠛⢿⠑⠲⢁⢡⢚⡈⠊⠏⠙⣇⡍⡶⣏⠺⢰⢘⣲⢓⡑⢖⠎⢋⠤⠌⡒⠰⢑⣨⣺⠧⢟⣸⢩⡭⡥⢢⣮⣂⣍⢊⡳⡙⣩⣑⣶⠓⠣⢵⠩⣝􏿽xE2

[02:12] <AlexDaniel> m: say +((0..0x1FFFF ==> grep { .uniname ~~ m/BRAILLE/ }) ==> map { .chr })

[02:12] <camelia> rakudo-moar 1ae680: OUTPUT«256␤»

[02:12] <AlexDaniel> so basically you can represent any byte stream with Braille

[02:17] *** mspo_ is now known as mspo

[02:21] *** kaare_ joined
[02:21] *** sno joined
[02:28] <AlexDaniel> .u ⟩􏿽xE2􏿽x8C􏿽xAA

[02:28] <yoleaux> U+232A RIGHT-POINTING ANGLE BRACKET [Pe] (􏿽xE2􏿽x8C􏿽xAA)

[02:28] <yoleaux> U+27E9 MATHEMATICAL RIGHT ANGLE BRACKET [Pe] (⟩)

[02:31] *** sno left
[02:31] *** colomon left
[02:33] *** xpen joined
[02:33] *** zacts left
[02:37] *** molaf__ joined
[02:37] *** zacts joined
[02:38] <TimToady> AlexDaniel: a couple of the rosettacode entries use Braille graphics

[02:40] <TimToady> http://rosettacode.org/wiki/Draw_a_clock#Perl_6

[02:40] <TimToady> http://rosettacode.org/wiki/Draw_a_cuboid#Perl_6

[02:41] *** molaf_ left
[02:41] <TimToady> http://rosettacode.org/wiki/Fibonacci_word/fractal#Perl_6

[02:42] *** Actualeyes joined
[02:42] *** perlpilot is now known as PerlJam

[02:43] <TimToady> somebody should turn that braille-graphics support code into a module

[02:43] <AlexDaniel> cuboid does not compile

[02:44] <TimToady> aww

[02:45] <AlexDaniel> well, it says “niecza”…

[02:46] *** raiph left
[02:46] <AlexDaniel> OH

[02:46] *** doublec_ joined
[02:46] <AlexDaniel>     my Bool %t;

[02:46] <AlexDaniel> change that to “my %t” and boom, it works

[02:47] <TimToady> yup

[02:48] <psch> m: my Bool %t; %t<a> = True;

[02:48] <camelia> rakudo-moar 1ae680: ( no output )

[02:48] *** doublec left
[02:49] <psch> oh

[02:49] <AlexDaniel> psch: %t{$Y     }{$X + $_}

[02:49] <psch> looks like that should be Hash[Bool] %t

[02:49] <AlexDaniel> which doesn't really make any sense to me…

[02:49] <psch> as in, hash of hash of bool

[02:49] <autarch> handling pod would be _so_ much easier if the compiler generated start & end nodes for lists of items

[02:49] <AlexDaniel> yeah, perhaps!

[02:49] <AlexDaniel> psch: actually, I've already edited it. Just removed the type alltogether

[02:49] <autarch> otherwise you have to track a whole bunch of state to figure out when an item is part of an existing list vs a new list

[02:49] <psch> AlexDaniel: yeah, that's probably fine too

[02:49] <autarch> this is one place where Perl 5 POD is much easier to parse, although more painful to write

[02:51] <psch> m: my %t of Hash of Bool # curious..

[02:51] <camelia> rakudo-moar 1ae680: ( no output )

[02:51] <psch> m: my %t of Hash of Bool; %t<f> = { a => True }

[02:51] <camelia> rakudo-moar 1ae680: OUTPUT«Type check failed in assignment to %t; expected Hash[Bool] but got Hash␤  in block <unit> at /tmp/VDgF5nK_B3:1␤␤»

[02:51] <psch> huh

[02:51] <psch> so it does already work like that, neat

[02:51] <psch> m: my %t of Hash of Bool; %t<f> = my % of Bool = a => True 

[02:51] <camelia> rakudo-moar 1ae680: ( no output )

[02:52] <psch> m: my %t of Hash of Bool; %t<f> = my % of Bool = a => True ; say %t.perl

[02:52] <camelia> rakudo-moar 1ae680: OUTPUT«(my Hash[Bool] % = :f((my Bool % = :a)))␤»

[02:52] <psch> hm, that actually touches on something i often stumbled over

[02:53] <psch> as in, the declarator (obviously) parses on-pass, but the actions kind of go RTL

[02:53] <psch> ...not sure i can formulate that clearer right now :)

[02:53] <TimToady> m: my Bool %t{Int;Int};

[02:53] <camelia> rakudo-moar 1ae680: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Gk0rPEIGTx␤coercive type declarations not yet implemented. Sorry. ␤at /tmp/Gk0rPEIGTx:1␤------> 3my Bool %t{Int;Int}7⏏5;␤    expecting any of:␤        constraint␤»

[02:53] <TimToady> why does it think it's coercive?

[02:54] <psch> s/on-pass/one-pass/

[02:54] <psch> m: my Bool %t{Int}

[02:54] <camelia> rakudo-moar 1ae680: ( no output )

[02:54] <psch> i'd guess the slice (or multi-dim or whatwasit) is misparsed there..?

[02:55] <uruwi> m: my Bool %t{Int}{Int};

[02:55] <camelia> rakudo-moar 1ae680: OUTPUT«5===SORRY!5=== Error while compiling /tmp/YzzWWQiJ6q␤Multiple shapes not yet understood␤at /tmp/YzzWWQiJ6q:1␤------> 3my Bool %t{Int}{Int}7⏏5;␤    expecting any of:␤        constraint␤»

[02:55] <uruwi> m: my Bool %t{Int,Int};

[02:55] <camelia> rakudo-moar 1ae680: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Mds3HRWOm3␤coercive type declarations not yet implemented. Sorry. ␤at /tmp/Mds3HRWOm3:1␤------> 3my Bool %t{Int,Int}7⏏5;␤    expecting any of:␤        constraint␤»

[02:55] <psch> m: my Bool() $x

[02:55] <camelia> rakudo-moar 1ae680: OUTPUT«5===SORRY!5=== Error while compiling /tmp/raz4GoBq0d␤Coercion Bool(Any) is insufficiently type-like to qualify a variable␤at /tmp/raz4GoBq0d:1␤------> 3my Bool() $x7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[02:56] <psch> anyway, gonna try and catch some shuteye o/

[02:57] <TimToady> so if I fix the <![a]> bug at end-of-string in moarvm, I discover that <-[a]> has been relying on the bug not to match at the end, rather than actually checking its position

[02:57] <TimToady> and if I fix that, the compiler loops compiling the setting, grr

[02:58] *** raiph joined
[03:01] *** vendethiel joined
[03:03] *** kjs_ joined
[03:06] *** doublec_ is now known as doublec

[03:09] *** kaare_ left
[03:14] *** sufrosti1o left
[03:14] *** sufrostico left
[03:15] *** noganex_ joined
[03:18] *** noganex left
[03:24] *** vendethiel left
[03:32] *** BenGoldberg joined
[03:38] <gfldex> m: sub foo (::T $t, $not-T --> T) { ($not-T.comb>>.ord.sum / $not-T.chars).Int }; say foo(Int.new, 'abc');

[03:38] <camelia> rakudo-moar 1ae680: OUTPUT«Type check failed for return value; expected T but got Int␤  in sub foo at /tmp/edZS5LRcfb:1␤  in block <unit> at /tmp/edZS5LRcfb:1␤␤»

[03:39] <gfldex> are type captures for return types supposed to work?

[03:43] <gfldex> m: sub foo (::T $t, $not-T) { my T $foo; my $type-string = $foo.WHAT.perl; ($not-T.comb>>.ord.sum / $not-T.chars)."$type-string"() }; say foo(Int.new, 'abc');

[03:43] <camelia> rakudo-moar 1ae680: OUTPUT«98␤»

[03:44] <gfldex> and is there a way to do a type cast to a type capture's type without fooling around with ."<type-name"() ?

[03:45] *** kjs_ left
[03:51] *** geraud left
[03:52] *** geraud joined
[03:56] *** ycaymanbo left
[04:00] *** pierre-vigier joined
[04:03] <Hotkeys> hola

[04:06] <TimToady> well, there's also ::($type-string)(), but we oughta fix the T to be properly generic there

[04:08] <dalek> nqp: 2661d27 | TimToady++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp:

[04:08] <dalek> nqp: Force <![a]> to always match at EOS.

[04:08] <dalek> nqp: 

[04:08] <dalek> nqp: Fixes RT #126746 by explicit test of EOS for <![a]> (because

[04:08] <dalek> nqp: fixing nqp::indexnat to return true at EOS ran into difficulties).

[04:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2661d275d2

[04:09] <dalek> rakudo/nom: 50c3155 | TimToady++ | tools/build/NQP_REVISION:

[04:09] <dalek> rakudo/nom: bumb nqp to get patch for RT #126746

[04:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/50c31553a0

[04:09] *** Ben_Goldberg joined
[04:13] *** BenGoldberg left
[04:13] <TimToady> r: say "a" ~~ m/<![a]>/

[04:13] <camelia> rakudo-jvm 1ae680: OUTPUT«Error while reading '/home/camelia/p6eval-token': No such file or directory at /home/camelia/rakudo-j-inst/bin/eval-client.pl line 10.␤»

[04:13] <camelia> ..rakudo-moar 50c315: OUTPUT«｢｣␤»

[04:14] <TimToady> well, that fixes it for moarvm, anyway

[04:16] *** sno joined
[04:17] <uruwi> Is ab5tract here?

[04:18] <TimToady> .seen ab5tract 

[04:18] <yoleaux> I saw ab5tract 25 Nov 2015 23:14Z in #perl6: <ab5tract> ahh. cool :)

[04:19] <uruwi> Interesting

[04:21] *** sno left
[04:23] <uruwi> I wonder if for (^1000000) could be optimized into loop (my $i = 0; $i < 1000000; ++$i)

[04:26] <TimToady> already supposedly is

[04:27] *** pierre-vigier left
[04:29] *** MadcapJake left
[04:45] *** doublec left
[04:47] *** doublec joined
[04:55] <b2gills> .tell lizmat did you mean `emit $elems = $elems + 1` instead of `emit ++$elems` ? https://github.com/rakudo/rakudo/commit/7d636cfc11

[04:55] <yoleaux> b2gills: I'll pass your message to lizmat.

[04:57] *** rigsby joined
[05:06] <uruwi> 1.76 vs 3.81 secs

[05:09] <TimToady> m: for ^1000000 {}; say now - INIT now

[05:09] <camelia> rakudo-moar 50c315: OUTPUT«0.2576046␤»

[05:09] <TimToady> m: for loop (my $i = 0; $i < 1000000; $i = $i + 1) {}; say now - INIT now

[05:09] <camelia> rakudo-moar 50c315: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0WV5pbND9Z␤Undeclared routine:␤    loop used at line 1␤␤»

[05:10] <TimToady> m: loop (my $i = 0; $i < 1000000; $i = $i + 1) {}; say now - INIT now

[05:10] <camelia> rakudo-moar 50c315: OUTPUT«0.1774705␤»

[05:10] <TimToady> m: loop (my $i = 0; $i < 10000000; $i = $i + 1) {}; say now - INIT now

[05:10] <camelia> rakudo-moar 50c315: OUTPUT«1.6700395␤»

[05:10] <TimToady> m: for ^10000000 {}; say now - INIT now

[05:10] <camelia> rakudo-moar 50c315: OUTPUT«2.4554113␤»

[05:10] <TimToady> m: loop (my int $i = 0; $i < 10000000; $i = $i + 1) {}; say now - INIT now

[05:10] <camelia> rakudo-moar 50c315: OUTPUT«0.061372␤»

[05:10] <TimToady> I guess it doesn't

[05:11] <uruwi> Auto-optimizing Int's to int's whenever possible is another possibility

[05:11] <TimToady> m: loop (my int $i = 0; $i < 10000000; ++$i) {}; say now - INIT now

[05:11] <camelia> rakudo-moar 50c315: OUTPUT«4.6867952␤»

[05:11] <TimToady> ++ is a lot slower

[05:11] <skids> Hrm, my panda seems to not be installing .moarvm files anymore, is that just interim curli WIP?

[05:11] <uruwi> m: loop (my $i = 0; $i < 10000000; ++$i) {}; say now - INIT now

[05:11] <camelia> rakudo-moar 50c315: OUTPUT«1.68555317␤»

[05:12] <uruwi> Weird

[05:12] <TimToady> ++ on natives is not optimized yet

[05:12] <uruwi> Yeah

[05:12] *** bpmedley joined
[05:12] <TimToady> m: loop (my $i = 0; $i < 10000000; $i++) {}; say now - INIT now

[05:12] <camelia> rakudo-moar 50c315: OUTPUT«1.4500430␤»

[05:12] <TimToady> huh

[05:12] <uruwi> ++ on natives and range fors to loop are LHF

[05:13] <uruwi> optimization of Int's to int's will be harder

[05:13] <uruwi> will require static analysis

[05:13] <TimToady> well, easy enough to tell that ^10000000 is limited, but it depends on how much unboxing is then needed inside

[05:14] <uruwi> Not to mention dead/unreachable code elimination

[05:15] <dalek> nqp: f17e8c5 | TimToady++ | src/vm/jvm/QAST/Compiler.nqp:

[05:15] <dalek> nqp: Also fix RT #126746 on the jvm

[05:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f17e8c56ff

[05:16] <uruwi> m: loop (my $i = 0; $i < 10000000; ++$i) {}; say now - INIT now

[05:16] <camelia> rakudo-moar 50c315: OUTPUT«1.645288␤»

[05:16] <uruwi> m: loop (my $i = 0; $i < 10000000; $i++) {}; say now - INIT now

[05:16] <camelia> rakudo-moar 50c315: OUTPUT«1.64997290␤»

[05:17] <dalek> rakudo/nom: 7c54722 | TimToady++ | tools/build/NQP_REVISION:

[05:17] <dalek> rakudo/nom: bump nqp again for jvm's patch to RT #126746.

[05:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c54722591

[05:19] <dalek> roast: aef8ea1 | TimToady++ | S05-metasyntax/charset.t:

[05:19] <dalek> roast: test that <![a]> always matches at eos

[05:19] <dalek> roast: review: https://github.com/perl6/roast/commit/aef8ea1df4

[05:21] <TimToady> okay, I think that was an xmas bug, even if it was never on the official list :)

[05:23] *** khw left
[05:24] <Quom_> TimToady++

[05:25] <autarch> so I've completely rewritten Pod::To::HTML by bulding it on top of my new Pod::NodeWalker module - https://github.com/autarch/perl6-Pod-NodeWalker

[05:25] <autarch> Pod::NodeWalker handles walking the POD tree for you, as well as working around some current compiler bugs and generating synthetic start-list and end-list events to make it easier to handle lists

[05:25] *** raiph left
[05:26] <autarch> This all started because I wanted to bring the doc.perl6.org design in line with the main perl6.org site, but the HTML Pod::To::HTML generated was basically hard-coded

[05:26] <autarch> so ... does anyone want to code review all of this?

[05:27] <Quom_> autarch: Have you compared performance?

[05:27] <autarch> Quom_: not yet

[05:27] <autarch> though it runs ok in the tests

[05:28] <autarch> it's also _way_ more correct - it's handling a lot more pod and doing it more correctly in some cases

[05:29] <autarch> the new Pod::To::HTML is at https://github.com/autarch/Pod-To-HTML/tree/autarch/use-pod-nodewalker - there's no point in a PR since it's essentially a rewrite

[05:29] <TimToady> .oO(first make it run, then make it run right...)

[05:29] <Quom_> autarch: I don't doubt it :)

[05:30] <autarch> is OO code notably slower than functions? the rewritten code is OO with some multi methods - the old code with FauxO - I'm guessing it was created before OO was really working in Perl 6

[05:30] <Quom_> autarch: I did a lot of work on the docs and Pod. It's been a mess for some time now…

[05:31] <JimmyZ> autarch: nope. :)

[05:32] * TimToady is very glad people other than him are looking after the docs :)

[05:32] <autarch> I actually want to work on the docs themselves too but I've been diving down various rabbit holes that keep distracting me

[05:32] <TimToady> funny how that happens...

[05:32] <Quom_> autarch: Yup!

[05:33] * Quom_ is curious what the compile time is like for the docs nowadays

[05:33] <autarch> TimToady: my first project after the site design is to work towards better organization of the Language overview - then filling in various docs - then writing some new ones

[05:33] <autarch> Quom_: _SLLOOOWWWW_ last time I tried it :(

[05:33] <TimToady> you want slow, try compiling the jvm backend...

[05:33] <autarch> I do wonder if it'd be possible to thread or fork the HTML generation to speed things up - it should be easily parallelizable

[05:34] <Quom_> OOC, is weirdness of NQPLock wrt exceptions known? It seems to be the cause of #126724 having the wrong error

[05:34] <Quom_> Really, what happened to that bot? https://rt.perl.org/Ticket/Display.html?id=126724

[05:35] <autarch> to clarify organizing Language - Mean basically doing what this issue lays out - https://github.com/perl6/doc/issues/114

[05:36] <TimToady> Quom_: no kloo for either question

[05:36] *** rigsby left
[05:37] <Quom_> autarch: The original Pod::To::HTML library relie[d|s?] on global vars and so couldn't be parallized. That was the case a year ago, anyway

[05:37] <autarch> Quom_: ah, then my rewrite will fix that - it's now an object that's entirely self-contained

[05:37] <autarch> so I imagine that this will speed up doc generation a bit

[05:37] <Quom_> autarch: I tried a few times to rewrite the library to be OO, but never found something that I was satisfied with

[05:37] <Quom_> autarch: Sweet :)

[05:37] <autarch> Quom_: please take a look at my branch then

[05:38] <Ben_Goldberg> m: multi foo () returns Int { 42 }; multi foo () returns List { 43 }; say foo; # I relize that this is unrelated to the current discussion, but why can't perl's multi dispatch make use of the return type?

[05:38] <camelia> rakudo-moar 7c5472: OUTPUT«Ambiguous call to 'foo'; these signatures all match:␤:( --> Int)␤:( --> List)␤  in block <unit> at /tmp/UjaA2KIdJU:1␤␤»

[05:38] <Quom_> Well, I'm still trying to figure out where Pod::To::HTML is defined?

[05:39] <nwc10> yoleaux: tell jnthn valgrind didn't show anything other than the abort

[05:39] <Quom_> nvm, found the repo ^^

[05:39] <nwc10> .tell jnthn valgrind didn't show anything other than the abort

[05:39] <yoleaux> nwc10: I'll pass your message to jnthn.

[05:39] *** nwc10 left
[05:40] <uruwi> Ben_Goldberg because allowing it might create ambiguity

[05:40] <TimToady> Ben_Goldberg: because that would take time travel to know the context in many cases

[05:40] <uruwi> for instance, if you have foo return Int for one, and String for another, then what happens if you say my $bar = foo()

[05:41] <autarch> TimToady: since you're here can you take a look at https://rt.perl.org/Ticket/Display.html?id=124393 - I think it may be Christmas list worthy - it makes it very hard to use multi methods in roles in any useful way

[05:41] <Ben_Goldberg> Return a superposition? ;)

[05:41] <autarch> the ticket is a little crufty - if someone wants to close it I could make a new one that more clearly describes the problem

[05:42] <uruwi> Ben_Goldberg possibly even more confusing

[05:43] <Quom_> +1

[05:43] <Ben_Goldberg> I suppose that the better example would be if there were multi bar(Int) and multi bar(Str), then bar(foo) would be ambiguous.

[05:43] <autarch> Quom_: you'll also want to look at Pod::NodeWalker since that does some of the heavy lifting for my PTH rewrite - https://github.com/autarch/perl6-Pod-NodeWalker - it's pretty minimal code, actually

[05:43] <Quom_> Right :)

[05:43] <autarch> except for the insanity around lists :(

[05:44] <autarch> we really need the compiler to generate start & end list markers or something

[05:45] <konobi> mmm?

[05:45] <Quom_> autarch: That's been a continual pain point

[05:45] <autarch> yeah, I think maybe 25% of the code in P::NW is about synthesizing start-list and end-list events

[05:46] <autarch> if it's incomprehensible I think the tests may clear up what the goal is

[05:46] <autarch> also re: tests - I wrote a whole bunch for P::T::HTML too - it was nearly untested before

[05:48] <Quom_> autarch: Would it be better for it to have start & end markers or just to have Pod::ItemGroup.new(contents => [Pod::Item.new xx *])

[05:49] <Quom_> In your judgement

[05:49] <autarch> Quom_: yeah, a container would be better, you're right

[05:49] <autarch> as long as containers end up container other containers ... so =item1 followed by =item2 means that the =item1 container contains the =item2 container

[05:50] <autarch> yo dawg, I heard you like containers ...

[05:51] <Quom_> Actually, it should probably be more like Pod::ItemGroup.new(level => 1, contents => ["blahblah", Pod::SomeText.new])

[05:51] <autarch> also, if you have an =item2 without a preceding =item1 it needs to have two containers - without that I still need all the crazy logic I wrote around list levels

[05:51] <Quom_> (while we're breaking things)

[05:51] <autarch> the compiler is in a much better position to figure this stuff out than any developer is who's just looking at some random chunk of POD later

[05:52] <Quom_> autarch: I'm not convinced

[05:52] <autarch> ot

[05:53] <Quom_> wrt two containers without precedence

[05:53] <autarch> it's very painful to handle levels jumps for something like an HTML generator - you need to actually write out all the missed levels of <ul><li><ul><li> etc

[05:53] <autarch> so either the compiler does this for me or I have to keep constant track of the last level I was in (like I'm doing now in Pod::NodeWalker)

[05:53] <autarch> if the compiler isn't going to do that than the groups really aren't that helpful

[05:55] *** rigsby joined
[06:07] *** AlexDaniel left
[06:18] <Quom_> autarch: Off the bat, you need to predeclare 'class Renderer' and rename the classes so that they aren't Pod::To::HTML::Pod::To::HTML::

[06:18] <autarch> Quom_: yeah, I don't really understand the unit stuff or how module vs class works re: namespaces

[06:18] <ShimmerFairy> =item2 stuff shouldn't end up inside =item1 stuff, since Pod is explicitly designed so that it's wrong for the writer to do that (thus it'd be weird for the compiler to turn around and do that)  :)

[06:19] <autarch> ShimmerFairy: I'm not sure what you mean

[06:19] <ShimmerFairy> autarch: the spec for Pod6 explicitly says that  =begin item1 ... =item2 ... =end item1  is not how you use sub-items, so having the compiler do that anyway would feel incredibly wrong to me.

[06:20] <Quom_> ShimmerFairy: That's not it

[06:20] <ShimmerFairy> Quom_: yeah, I just saw  Item(level => 1, contents => Item( level => 2 ) )  as an idea above, which'd be wrong

[06:20] *** pierre-vigier joined
[06:21] <Quom_> ShimmerFairy: The proposal is =item1 … =item1 … =item2 … =item2 … =item1 … gets folded into ItemGroup[…,…,ItemGroup[…,…],…]

[06:21] *** BenGoldberg_ joined
[06:22] *** mattp__ joined
[06:22] <autarch> just providing the sequence of events makes it very difficult for consumers of this information - we really need to know how the =itemX blocks relate to each other

[06:22] <Quom_> ShimmerFairy: I think =begin item1 ... =item2 ... =end item1 would become ItemGroup[Block[…,ItemGroup[…],…]

[06:22] <autarch> any output format I can think of requires that

[06:22] <Quom_> ]

[06:23] *** ssflying left
[06:23] <ShimmerFairy> Quom_: huh, turns out I haven't messed with lists at all in my Pod parser rewrite yet, so I've not come up with a solution myself :P

[06:23] <ShimmerFairy> (also, I'm reminded again to _really_ get back to working on that more than I have been)

[06:23] *** mattp_ left
[06:23] <autarch> ShimmerFairy: are you working on the parsing in rakudo?

[06:23] *** zacts left
[06:23] *** xpen left
[06:23] *** abaugher left
[06:23] *** bowtie left
[06:23] <autarch> cause there are some bugs I'd like to point you at ;)

[06:23] <Quom_> ShimmerFairy: Parser or walker?

[06:24] *** Ben_Goldberg left
[06:24] *** uruwi left
[06:24] *** Zoffix left
[06:24] *** sunnavy left
[06:24] <ShimmerFairy> autarch: yeah, I've been working on developing a new parser out of core (since that's so much easier) over the last couple/few months, off and on. Countless other projects I like working on have slowed things a bit :P

[06:24] *** ssflying joined
[06:24] <autarch> why would we need a parser outside of core? I really appreciate being to get objects from $=pod versus the Perl 5 way (which is "use some module off CPAN to read a bunch of text")

[06:25] <ShimmerFairy> autarch: only out-of-core because it's much easier than recompiling rakudo every time one makes a change, it's supposed to go in when it's ready enough :)

[06:25] <autarch> I see

[06:26] <ShimmerFairy> (it's not uncommon for rakudo devs to do this for new big-ish features in general, IIRC)

[06:26] *** CurtisOvidPoe_ joined
[06:26] <autarch> I see

[06:26] <autarch> I'm not very familiar with how any of the Perl 6 core dev works

[06:27] *** uruwi joined
[06:27] <ShimmerFairy> autarch: it's just something you do because waiting 100-odd seconds to recompile rakudo to test if your typo fix actually works tends to slow down things too much in the "rapid development" phase of something :)

[06:28] <autarch> makes sense

[06:28] <ShimmerFairy> It's a useful strategy for any project where you'd rather like to prototype some new component without trying to put in a larger context at the same time, I think. :)

[06:29] <autarch> some bugs to look at - https://rt.perl.org/Ticket/Display.html?id=114480 - https://rt.perl.org/Ticket/Display.html?id=126740 - https://rt.perl.org/Ticket/Display.html?id=126742

[06:30] <autarch> https://rt.perl.org/Ticket/Display.html?id=126651

[06:31] <ShimmerFairy> about those table bugs, =tables have been a sticking point for me for quite a while as well. And incidentally getting some tiny bit of table parsing implemented is the last thing keeping me from wanting to make my project public :)

[06:32] <autarch> I also note that S26 talks about every named block having its own class like Pod::Block::Named::Image but that's not happening right now - named blocks all seem to be Pod::Block::Named

[06:32] <Quom_> timotimo and I, and probably others, have tried to implement tables as well. PITA

[06:32] <autarch> ShimmerFairy: I ended up just forcing the table contents to become POD in my NodeWalker code - https://github.com/autarch/perl6-Pod-NodeWalker/blob/master/lib/Pod/NodeWalker.pm6 - look for self!podify

[06:33] <ShimmerFairy> autarch: yeah, the Pod "AST" structure is something I find woefully under-defined in S26, so part of my fix-up project is to make a more defined structure

[06:34] <autarch> FWIW I don't think having Named::X classes is really very useful - it might be better to just update S26 here ;)

[06:34] *** noganex joined
[06:35] <ShimmerFairy> Quom_: my current idea is to set up an "interruptible" version of how implicit paragraphs are processed, namely because of one-pass parsing, and because doing too much grammar work actions-side feels like a code smell to me :)

[06:37] *** zacts joined
[06:37] <autarch> that also reminds me - the way things like "=head1 Foo" generates a Para node seems very gross and requires a lot of dumb hacks to generate sane HTML

[06:37] <autarch> I'm constantly flipping a $!render-paras attribute back and forth - very dumb

[06:37] *** noganex_ left
[06:37] *** CurtisOvidPoe left
[06:37] *** telex left
[06:37] *** krakan left
[06:38] *** eiro left
[06:38] *** CurtisOvidPoe_ is now known as CurtisOvidPoe

[06:38] *** Zoffix joined
[06:38] <autarch> again, this is something that the compiler knows better than I do - "=item1 Foo" - no para - "=begin item1\n\nFoo\n\n=end item1" - has a para

[06:38] <Quom_> ShimmerFairy: Oh it can absolutely be done in pass, it's just hard to get that to work in NQP

[06:39] <Quom_> autarch: And what's your proposed behavior?

[06:40] <autarch> Quom_: well, I haven't worked out _every_ corner case - but it seems like "=foo Text on same line" should never generate a Para

[06:40] <Quom_> Oh, I misunderstood.

[06:40] <autarch> and probably the same goes for "=foo\nText on line immediately after block start"

[06:40] <ShimmerFairy> autarch: well, implied paras are something =head has, as I recall. I did however set up a way for the Pod writer (but _not_ the renderer) to tell the compiler not to imply =para :)

[06:41] <autarch> ShimmerFairy: it seems like some reasonable defaults are in order here

[06:41] <autarch> no one writes "=head2 Thingy" and expects HTML like "<h2><p>Thingy</p></h2>"

[06:41] <autarch> in fact, that's not even legal HTML

[06:42] *** abaugher joined
[06:42] *** krakan joined
[06:42] <ShimmerFairy> I don't think we can expect all potential rendering formats to support exactly what Pod does, so the fact that HTML supposedly can't handle a paragraph in a header isn't Pod6's fault to me :)

[06:42] <Quom_> autarch: I was going to throw together a PR for ItemGroup, but I forgot how messy the Rakudo code is, and implementing without cleaning up would make a much bigger mess. So sorry, not tonight :9

[06:43] <autarch> that's ok, I already spent the time to work around it and test my workarounds

[06:43] <autarch> now you'd just be making _more_ work for me ;)

[06:43] <ShimmerFairy> Quom_: if I work fast enough, I'll be able to make my code finally public tonight :)

[06:43] *** sunnavy joined
[06:43] <Quom_> ShimmerFairy: Well, if it's public in any form I could assist :)

[06:44] <Quom_> Tonight, though, it seems I've run up against my fair share of dead-ends

[06:44] <Quom_> (half-dead-ends? wilted-ends? sprouting-ends?)

[06:44] <ShimmerFairy> Quom_: sure, the only reason it isn't atm is because of my tendency to want something "good enough", or something representative enough of where my ideas are headed, plus other interests taking my attention :)

[06:45] <Quom_> understandable :)

[06:51] *** geraud left
[06:52] <autarch> ok, bed time, but feel free to have the bots send me messages - if people like the new Pod::To::HTML I'll try using it for doc.perl6.org before I write API docs and submit a PR

[07:00] *** FROGGS joined
[07:01] *** telex joined
[07:03] *** snarkyboojum joined
[07:04] *** zacts left
[07:11] *** BenGoldberg_ left
[07:19] *** pierre-vigier left
[07:22] *** skids left
[07:26] *** abraxxa joined
[07:29] <[Tux]> lizmat, what changed for me to get this:

[07:29] <[Tux]> ===(   17210;53  14730/?  0/?  0/? )====================================Cannot directly create a Supply. You might want:

[07:29] <[Tux]>  - To use a Supplier in order to get a live supply

[07:29] <[Tux]>  - To use Supply.on-demand to create an on-demand supply

[07:29] <[Tux]>  - To create a Supply using a supply block

[07:29] <[Tux]>   in sub in at t/90_csv.t:78

[07:29] <[Tux]>   in block <unit> at t/90_csv.t:104

[07:32] <[Tux]> test             50000    23.383    23.268

[07:32] <[Tux]> test-t           50000    20.935    20.820

[07:32] <[Tux]> csv-parser       50000    29.589    29.474

[07:32] *** FROGGS left
[07:34] <arnsholt> [Tux]: jnthn recently changed some parts of how Supplies work; that's probably it

[07:35] <[Tux]> s/Supply/Supplier/ => hang, so it is not that simple

[07:36] <arnsholt> There's a Rakudo commit with a long commit message that details what live and on-demand is, I think

[07:37] <[Tux]> s/Supply.new; start/supply/ => No such method 'emit' for invocant of type 'Supply'

[07:37] *** noganex left
[07:38] <[Tux]> a8231f14b2d5400e06

[07:42] *** cgfbee left
[07:42] *** dpk left
[07:44] *** dr4ngd joined
[07:44] <dr4ngd> hi

[07:44] *** apejens_ left
[07:46] <[Tux]> reading the commits and the docs, it looks like I would need https://gist.github.com/Tux/ccaa53f28b5744ead7ee but that causes the tests to hang

[07:46] <moritz> hi dr4ngd 

[07:46] <yoleaux> 26 Nov 2015 23:51Z <gfldex> moritz: i would like to book a day in advent, but don't know how!

[07:48] *** dpk joined
[07:48] *** rurban joined
[07:48] *** dpk left
[07:51] *** sno joined
[07:51] *** pierre-vigier joined
[07:51] *** dr4ngd left
[07:51] <[Tux]> jnthn, why does Supply::Preserving not have .from-list ???

[07:51] <[Tux]>     my $sup = Supplier::Preserving.new;

[07:51] <[Tux]>     $sup.from-list (@data,);

[07:52] <[Tux]> should DWIM?

[07:53] <moritz> .tell gfldex claim a spot on https://github.com/perl6/mu/blob/master/misc/perl6advent-2015/schedule and /msg me your email address (unless you already have write access to the blog)

[07:53] <yoleaux> moritz: I'll pass your message to gfldex.

[07:53] <moritz> .msg gfldex claim a spot on https://github.com/perl6/mu/blob/master/misc/perl6advent-2015/schedule and /msg me your email address (unless you already have write access to the blog)

[07:53] <yoleaux> moritz: Sorry, this command is admin-only.

[07:54] *** Celelibi left
[07:54] *** dpk joined
[07:54] <moritz> m: my $sub = Supplier::Preserving.from-list((1, 2, 3))

[07:54] <moritz> what's up with the bots today? bad net wheather?

[07:54] <camelia> rakudo-moar 7c5472: OUTPUT«Method 'from-list' not found for invocant of class 'Supplier::Preserving'␤  in block <unit> at /tmp/D2GaiJAK1d:1␤␤»

[07:54] <[Tux]> Method 'from-list' not found for invocant of class 'Supplier::Preserving'

[07:54] <[Tux]>   in sub in at t/90_csv.t:78

[07:55] <masak> m: say .subst(/h/, "") and say .subst(/a/, "") given "wheather"

[07:55] <yoleaux> 26 Nov 2015 02:50Z <Zoffix> masak: you seem to know math well. Does this make any sense or should it be throwing due to division by zero? m: say (0/0)+(0+1i) <camelia> rakudo-moar : OUTPUT«Inf+1i␤»

[07:55] *** rindolf joined
[07:55] <masak> Zoffix: I think that's conformant with IEEE 754.

[07:56] <camelia> rakudo-moar 7c5472: OUTPUT«weather␤whether␤»

[07:56] *** dpk is now known as {dpk}

[07:56] <[Tux]> m: my $sup = Spplier::Preserving.from-list((1, 2, 3));

[07:57] <[Tux]> m: my $sup = Supplier::Preserving.from-list((1, 2, 3));

[07:57] <camelia> rakudo-moar 7c5472: OUTPUT«Could not find symbol '&Preserving'␤  in block <unit> at /tmp/RbxhuE_MyV:1␤␤Actually thrown at:␤  in block <unit> at /tmp/RbxhuE_MyV:1␤␤»

[07:57] <camelia> rakudo-moar 7c5472: OUTPUT«Method 'from-list' not found for invocant of class 'Supplier::Preserving'␤  in block <unit> at /tmp/tt_wVxeREr:1␤␤»

[08:00] *** RabidGravy joined
[08:01] *** MilkmanDan left
[08:01] *** MilkmanDan joined
[08:01] *** darutoko joined
[08:03] *** Celelibi joined
[08:05] *** dayangkun left
[08:08] *** dayangkun joined
[08:12] *** M-eternaleye is now known as eternaleye

[08:12] *** eternaleye left
[08:12] *** eternaleye joined
[08:15] *** cgfbee joined
[08:15] *** pierre-vigier left
[08:20] *** xpen joined
[08:20] *** bowtie joined
[08:22] *** Humbedooh joined
[08:29] *** bjz left
[08:29] *** rindolf left
[08:29] *** doublec left
[08:29] *** Actualeyes left
[08:29] *** yeahnoob left
[08:29] *** n0xff left
[08:29] *** stmuk_ left
[08:29] *** Khisanth left
[08:29] *** llfourn left
[08:29] *** b2gills left
[08:29] *** yoleaux left
[08:29] *** bakedb left
[08:29] *** Sgeo left
[08:29] *** avar left
[08:29] *** mprelude left
[08:29] *** burnersk left
[08:29] *** wtw left
[08:29] *** confuseAcat left
[08:29] *** jantore left
[08:29] *** crux left
[08:29] *** literal left
[08:30] *** n0xff joined
[08:30] *** llfourn joined
[08:30] *** bakedb joined
[08:30] *** doublec joined
[08:30] *** Khisanth joined
[08:30] *** rindolf joined
[08:30] *** Sgeo joined
[08:30] *** mprelude joined
[08:31] *** bjz joined
[08:31] *** ir2ivps4 left
[08:34] *** yeahnoob joined
[08:34] *** Actualeyes joined
[08:36] *** bjz_ joined
[08:38] *** Sgeo_ joined
[08:40] *** maddingu1 is now known as maddingue

[08:41] <[Tux]> .tell jnthn my $sup = Supplier::Preserving.from-list((1, 2, 3));

[08:41] *** MilkmanDan left
[08:41] *** bowtie left
[08:41] *** xpen left
[08:42] *** Bucciarati left
[08:42] *** rindolf left
[08:42] *** mprelude left
[08:42] *** bakedb left
[08:42] *** corbyhaas left
[08:42] *** frew left
[08:42] *** bjz left
[08:42] *** Sgeo left
[08:42] *** Khisanth left
[08:42] *** n0xff left
[08:44] *** FROGGS joined
[08:47] <moritz> http://perlpunks.de/paste/show/56581877.355a.147

[08:47] <moritz> somehow the rebuild is b0rked

[08:49] *** rurban left
[08:50] *** corbyhaas joined
[08:52] <moritz> never mind, that's an old one

[08:55] *** bonsaikitten left
[08:59] *** uruwi_ joined
[09:01] *** Axord left
[09:01] *** Bucciarati joined
[09:02] *** corbyhaas left
[09:02] *** FROGGS left
[09:02] *** Sgeo_ left
[09:02] *** bjz_ left
[09:02] *** Actualeyes left
[09:02] *** yeahnoob left
[09:02] *** doublec left
[09:02] *** llfourn left
[09:02] *** cgfbee left
[09:02] *** dayangkun left
[09:03] *** Celelibi left
[09:03] *** darutoko left
[09:03] *** RabidGravy left
[09:03] *** sno left
[09:03] *** sunnavy left
[09:03] *** abaugher left
[09:03] *** uruwi left
[09:03] *** ssflying left
[09:03] *** mattp__ left
[09:03] *** bpmedley left
[09:03] *** molaf__ left
[09:03] *** isacloud left
[09:03] *** go|dfish left
[09:03] *** ilbelkyr left
[09:03] *** diakopte1 left
[09:04] *** bjz joined
[09:11] *** uruwi_ left
[09:12] *** bjz left
[09:13] *** stmuk joined
[09:13] *** corbyhaas joined
[09:13] *** Sgeo_ joined
[09:13] *** Actualeyes joined
[09:13] *** doublec joined
[09:13] *** cgfbee joined
[09:13] *** Celelibi joined
[09:13] *** darutoko joined
[09:13] *** RabidGravy joined
[09:13] *** abaugher joined
[09:13] *** isacloud joined
[09:13] *** go|dfish joined
[09:13] *** ilbelkyr joined
[09:13] *** diakopte1 joined
[09:13] *** jantore joined
[09:13] *** ilbelkyr left
[09:13] *** cgfbee left
[09:14] *** pierre-vigier joined
[09:14] *** sno joined
[09:15] *** molaf__ joined
[09:15] *** dayangkun joined
[09:17] *** TEttinger left
[09:18] *** ilbelkyr joined
[09:19] *** ssflying joined
[09:20] *** brrt joined
[09:20] *** Ven joined
[09:20] *** xiaomiao joined
[09:20] *** ely-se joined
[09:21] *** llfourn joined
[09:22] *** bjz joined
[09:22] *** mattp__ joined
[09:22] *** sunnavy joined
[09:22] *** cgfbee joined
[09:24] *** Ven_ joined
[09:24] *** ir2ivps4 joined
[09:25] *** mprelude joined
[09:25] *** [Sno] joined
[09:25] *** noganex joined
[09:28] *** ely-se_ joined
[09:33] *** cgfbee left
[09:33] *** ely-se left
[09:33] *** xiaomiao left
[09:33] *** Ven left
[09:33] *** dayangkun left
[09:33] *** molaf__ left
[09:33] *** sno left
[09:33] *** pierre-vigier left
[09:33] *** jantore left
[09:33] *** stmuk left
[09:33] *** corbyhaas left
[09:33] *** Sgeo_ left
[09:33] *** Actualeyes left
[09:33] *** doublec left
[09:34] *** Celelibi left
[09:34] *** darutoko left
[09:34] *** RabidGravy left
[09:34] *** abaugher left
[09:34] *** isacloud left
[09:34] *** go|dfish left
[09:34] *** diakopte1 left
[09:34] *** cgfbee joined
[09:34] *** xiaomiao joined
[09:34] *** stmuk joined
[09:34] *** corbyhaas joined
[09:34] *** Sgeo_ joined
[09:34] *** Actualeyes joined
[09:34] *** doublec joined
[09:34] *** darutoko joined
[09:34] *** RabidGravy joined
[09:34] *** abaugher joined
[09:34] *** isacloud joined
[09:34] *** go|dfish joined
[09:34] *** diakopte1 joined
[09:35] *** ely-se_ left
[09:35] *** cgfbee left
[09:39] *** Celelibi joined
[09:41] *** domidumont joined
[09:41] *** telex left
[09:42] *** eiro joined
[09:43] *** uruwi joined
[09:43] *** scopesoft left
[09:43] *** telex joined
[09:44] *** jantore joined
[09:45] <jnthn> morning, #perl6

[09:45] *** Amnez777 left
[09:47] <nine_> Good morning, jnthn 

[09:47] <nine_> It's a quiet morning

[09:47] <jnthn> [Tux]: .from-list is still used as Supply.from-list. It's only when you had a Supply.new that things need to change.

[09:48] <[Tux]> reading the commits and the docs, it looks like I would need https://gist.github.com/Tux/ccaa53f28b5744ead7ee but that causes the tests to hang

[09:48] <[Tux]> that is when I started to read the commit messgaes and concluded I needed Supplier::Preserving instead

[09:49] <jnthn> If you had Supply.new before you just want Supplier.new now

[09:49] <[Tux]> then the tests hang, so it is not 100% compatible

[09:49] <jnthn> Oh, wait

[09:49] <jnthn> *sigh* I think there was some weird notion of "paused" things...that was horrible.

[09:49] <jnthn> :)

[09:50] <[Tux]> that *was* the first thing I tried. I learned how to read the errors by now :)

[09:50] <jnthn> So it could be you need Supplier::Preserving after all.

[09:51] *** molaf joined
[09:51] <jnthn> @i.push: $sup;

[09:51] <jnthn> That probably wants to be

[09:51] <jnthn> @i.push: $sup.Supply;

[09:51] <jnthn> The Supplier is the thing you emit with

[09:51] <jnthn> The Supply is what you want the outside world so they can tap into the things you emit

[09:51] *** FROGGS joined
[09:51] <[Tux]> ah, makes sense

[09:51] <jnthn> uh, what you *give* the outside world

[09:52] <[Tux]>     @i.push: Supplier::Preserving.from-list (@data,);

[09:52] <[Tux]> that would DWIM

[09:53] <jnthn> No, that one is still Supply.

[09:53] <jnthn> You only ever need a Supplier if you will be calling .emit yourself

[09:54] <jnthn> Supply.from-list gives an on-demand supply, as it always has, meaning that it starts feeding you the list every time you tap it.

[09:54] *** uruwi left
[09:54] <[Tux]>     my $sup = Supplier::Preserving.new.Supply;

[09:54] <[Tux]>     $sup.from-list (@data,);

[09:54] <[Tux]>     @i.push: $sup;

[09:54] <[Tux]> like that?

[09:54] *** ir2ivps4 left
[09:55] *** cgfbee joined
[09:55] <jnthn> No

[09:55] <jnthn> from-list is a factory method

[09:55] <jnthn> Supply.from-list(@data) is all you need

[09:55] *** FROGGS left
[09:55] *** molaf left
[09:56] *** jantore left
[09:56] *** telex left
[09:56] *** ir2ivps4 joined
[09:56] <[Tux]> won't that bork on the one-arg rule?

[09:56] <jnthn> You only need a Supplier at all if you will do .emit calls yourself

[09:57] <jnthn> .from-list follows the 1-arg rule now (didn't before, though)

[09:57] <jnthn> I'm assuming you want a supply that, when tapped, will emit each item in @data?

[09:57] *** olinkl_ joined
[09:58] <[Tux]> yes

[09:58] *** olinkl left
[09:58] *** olinkl_ is now known as olinkl

[09:59] <jnthn> Then it should work fine (now)

[09:59] <jnthn> m: my @a = 1..10; Supply.from-list(@a).tap(*.say)

[09:59] <jnthn> Aww...netsplits probably upset dalek :(

[10:00] <camelia> rakudo-moar 7c5472: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[10:01] <jnthn> heh, 2 minutes :)

[10:02] <[Tux]>     @i.push: Supply.from-list (@data);

[10:02] <[Tux]> tests pass. it is that simple

[10:03] <[Tux]> jnthn++

[10:05] <gfldex> .tell moritz post posted, set to private and to be published on 2015/12/02@00:01

[10:06] *** bowtie joined
[10:06] *** molaf joined
[10:07] <jnthn> \o/

[10:07] <gfldex> .botsnack

[10:07] *** dayangkun joined
[10:08] *** uruwi joined
[10:08] *** Amnez777 joined
[10:08] *** dayangkun left
[10:08] *** snarkyboojum left
[10:08] *** royalkiran007 left
[10:08] *** brrt left
[10:08] *** rurban joined
[10:09] *** jantore joined
[10:09] *** rurban left
[10:09] *** Amnez777 left
[10:10] *** rurban joined
[10:10] *** Amnez777 joined
[10:10] *** Amnez777 left
[10:11] *** Amnez777 joined
[10:11] <RabidGravy> who was it that was complaining that HTTP::UserAgent didn't have a .post() method?  I just implemented it.

[10:11] *** telex joined
[10:13] <RabidGravy> after a bit of refactoring I did yesterday, it became too easy to avoid

[10:15] *** kjs_ joined
[10:16] *** Amnez777_ joined
[10:19] *** brrt joined
[10:20] *** revdiablo left
[10:20] *** Amnez777 left
[10:20] *** garu_ left
[10:20] *** garu joined
[10:20] *** espadrine_ joined
[10:24] *** brrt left
[10:24] *** pierre-vigier joined
[10:27] *** espadrine_ is now known as espadrine

[10:29] *** Actualeyes1 joined
[10:29] *** pierre-vigier left
[10:31] *** sftp left
[10:32] *** uruwi_ joined
[10:32] *** bonsaikitten joined
[10:33] *** darutoko- joined
[10:33] *** jonathan__ joined
[10:33] *** Skarsnik joined
[10:34] *** Celelibi_ joined
[10:34] *** jonathan__ is now known as yvarGdibaR

[10:34] <yvarGdibaR> what's all that about

[10:34] *** Amnez777_ left
[10:34] *** kjs_ left
[10:34] *** telex left
[10:34] *** jantore left
[10:34] *** uruwi left
[10:34] *** molaf left
[10:34] *** bowtie left
[10:34] *** olinkl left
[10:34] *** ir2ivps4 left
[10:34] *** cgfbee left
[10:34] *** Celelibi left
[10:35] *** xiaomiao left
[10:35] *** stmuk left
[10:35] *** corbyhaas left
[10:35] *** Sgeo_ left
[10:35] *** Actualeyes left
[10:35] *** doublec left
[10:35] *** darutoko left
[10:35] *** RabidGravy left
[10:35] *** abaugher left
[10:35] *** isacloud left
[10:35] *** go|dfish left
[10:35] *** diakopte1 left
[10:35] <yvarGdibaR> SPLITTERS!

[10:36] *** yvarGdibaR is now known as RabidGravy

[10:38] *** ilbelkyr_ joined
[10:38] *** Ven_ left
[10:40] *** Actualeyes1 left
[10:40] *** ilbelkyr left
[10:40] *** solarbunny left
[10:40] *** pnu left
[10:40] *** MilkmanDan joined
[10:42] *** olinkl joined
[10:42] *** corbyhaas joined
[10:42] *** doublec joined
[10:42] *** abaugher joined
[10:42] *** isacloud joined
[10:42] *** diakopte1 joined
[10:44] *** jantore joined
[10:45] *** jantore left
[10:45] *** olinkl left
[10:46] *** corbyhaas left
[10:46] *** doublec left
[10:46] *** abaugher left
[10:46] *** isacloud left
[10:46] *** diakopte1 left
[10:46] *** jantore joined
[10:46] *** olinkl joined
[10:46] *** corbyhaas joined
[10:46] *** doublec joined
[10:46] *** abaugher joined
[10:46] *** isacloud joined
[10:46] *** diakopte1 joined
[10:51] *** Celelibi_ is now known as Celelibi

[10:57] *** telex joined
[10:57] *** molaf joined
[10:57] *** sftp joined
[10:58] *** Psyche^_ left
[11:00] *** simcop2387 left
[11:01] <RabidGravy> is this thing on?

[11:03] <jnthn> Stormy morning on the internets, it seems...

[11:05] *** xinming left
[11:10] <dalek> rakudo/nom: 916b01b | lizmat++ | src/core/Supply.pm:

[11:10] <dalek> rakudo/nom: We want the todo per tap, jnthn++

[11:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/916b01b35b

[11:10] <lizmat> .botsnack

[11:11] <lizmat> aww

[11:11] <lizmat> :-)

[11:11] *** kipd left
[11:12] <jnthn> lizmat: Did you see the "need the empty whenever for side-effects" one too? :)

[11:12] *** kipd joined
[11:12] <lizmat> was just about to ask

[11:12] * jnthn thinks he's figured out a bunch of the Proc::Async and IO::Socket::Async data loss flappiness

[11:12] <lizmat> so, we should not last out of a whenever also ?

[11:13] <jnthn> You can

[11:13] <jnthn> last in a whenever means "close the tap on this whenever"

[11:13] <jnthn> done in a whenever means "emit done and close the taps on all whenevers in this supply block"

[11:13] <lizmat> ok, so then re 39869f1bc15b2f03fd8a , I could just do: whenever self -> \val { last } ?

[11:13] *** SmokeMachine_ left
[11:14] *** SmokeMachine_ joined
[11:14] <jnthn> This is about tail, right?

[11:14] <jnthn> Imagine

[11:14] <lizmat> *and* head, in the case of number <= 0

[11:15] <jnthn> m: Supply.from-list(1..10).do(&say).last(5).tap

[11:15] <camelia> rakudo-moar 7c5472: OUTPUT«Method 'last' not found for invocant of class 'Supply'␤  in block <unit> at /tmp/xThmNUkCuF:1␤␤»

[11:15] *** cgfbee joined
[11:15] <jnthn> m: Supply.from-list(1..10).do(&say).tail(5).tap

[11:15] <camelia> rakudo-moar 7c5472: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[11:15] <jnthn> m: Supply.from-list(1..10).do(&say).tail(1).tap

[11:15] <camelia> rakudo-moar 7c5472: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[11:15] <jnthn> m: Supply.from-list(1..10).do(&say).tail(0).tap

[11:15] <camelia> rakudo-moar 7c5472: ( no output )

[11:15] <jnthn> That's the problem.

[11:16] <lizmat> aha, so I *shouldn't* last out of it

[11:16] <jnthn> Right

[11:16] <lizmat> ok

[11:16] <jnthn> It was right as I had it, though I really shoulda put a comment explaining why it's not pointless :)

[11:16] <lizmat> I will

[11:16] <jnthn> Thanks

[11:16] *** yoleaux joined
[11:16] *** ChanServ sets mode: +v yoleaux

[11:17] *** ir2ivps4_ joined
[11:19] <lizmat> jnthn: so: basically we can never "last" out a built-in / library type of Supply method

[11:19] <yoleaux> 00:16Z <[Coke]> lizmat: - should we again remove all deprecations before xmas?

[11:19] <yoleaux> 04:55Z <b2gills> lizmat: did you mean `emit $elems = $elems + 1` instead of `emit ++$elems` ? https://github.com/rakudo/rakudo/commit/7d636cfc11

[11:20] <jnthn> lizmat: Well, .head can last, for example

[11:20] <yoleaux> 26 Nov 2015 22:48Z <lizmat> jnthn: supply test fails on OS X seem to be related to setting $*SCHEDULER

[11:20] <yoleaux> 26 Nov 2015 22:49Z <lizmat> jnthn: could it be some missing decont on $*SCHEDULER maybe ?

[11:20] <yoleaux> 26 Nov 2015 23:07Z <lizmat> jnthn: question: should you be able to last out of a whenever block without further consequences ?

[11:20] <yoleaux> 00:36Z <TimToady> jnthn: I rejected RT #120916 because it suffices to stub the accessor instead.

[11:20] <yoleaux> 05:39Z <nwc10> jnthn: valgrind didn't show anything other than the abort

[11:20] <lizmat> yoleaux is back!

[11:20] <jnthn> lizmat: The issue with tail is simply that it's an odd discontinuity that going towards zero you get all the side-effects, but when you hit zero you get none

[11:21] <jnthn> Whereas with head, 0 immediately meaning "done" is fine, because 1 will be done with just one thing processed, etc.

[11:21] <lizmat> m: Supply.from-list(1..10).do(&say).head(0).tap

[11:21] <camelia> rakudo-moar 7c5472: ( no output )

[11:21] <lizmat> isn't that the same issue ??  ^^^

[11:21] <jnthn> But it's fine there 'cus it's not a weird discontinuity :)

[11:22] <jnthn> m: Supply.from-list(1..10).do(&say).head(1).tap

[11:22] <camelia> rakudo-moar 7c5472: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[11:22] <jnthn> uh...

[11:22] <jnthn> That's wrong though.

[11:22] <jnthn> That should just do 1

[11:22] <lizmat> why?  the .do is before the .head ?

[11:23] <jnthn> .head should close the tap once it's seen enough though

[11:23] *** simcop2387 joined
[11:23] <jnthn> I'm not sure why that isn't happening "for free" with the code already there

[11:23] <yoleaux> jnthn: Sorry, that command (.head) crashed.

[11:23] <lizmat> m: Supply.from-list(1..10).head(1).do(&say).tap

[11:23] <camelia> rakudo-moar 7c5472: OUTPUT«1␤»

[11:23] <lizmat> this makes sense to me

[11:23] <jnthn> yoleaux: I didn't really want head from you, tbh :P

[11:24] <lizmat> the .head is *before* the .do, so the .do only sees 1

[11:24] *** jantore left
[11:24] *** olinkl left
[11:24] *** corbyhaas left
[11:24] *** doublec left
[11:24] *** abaugher left
[11:24] *** isacloud left
[11:24] *** diakopte1 left
[11:24] *** darutoko- left
[11:24] <jnthn> But it's a pipeline, that values are meant to be pushed through one at a time.

[11:25] <jnthn> Think of the lazy list dual

[11:25] <jnthn> m: (1..10).map(&say).head(1)

[11:25] <camelia> rakudo-moar 7c5472: OUTPUT«1␤»

[11:25] *** ir2ivps4_ left
[11:25] *** cgfbee left
[11:25] <jnthn> m: (1..10).map(&say).head(2)

[11:25] <camelia> rakudo-moar 7c5472: OUTPUT«1␤2␤»

[11:25] *** molaf left
[11:25] *** telex left
[11:25] *** Celelibi left
[11:25] *** Skarsnik left
[11:25] *** RabidGravy left
[11:25] *** bonsaikitten left
[11:25] *** uruwi_ left
[11:26] <lizmat> jnthn: gotcha

[11:27] <jnthn> I really don't know why it doesn't Just Work though. I can't see anything you've done wrong in head.

[11:27] * jnthn can take a look

[11:27] <lizmat> well, lemme test some changes  :-)

[11:27] <jnthn> OK :)

[11:27] <jnthn> I need to debug/fix something weird happening with async sockets

[11:28] <lizmat> yeah, and I should be preparing my slides for tomorrow  :-)

[11:28] <jnthn> ;)

[11:30] *** Skarsnik joined
[11:30] *** pnu joined
[11:30] *** solarbunny joined
[11:32] <lizmat> jnthn: looks like lasting out of a whenever doesn't close the ta[

[11:32] <lizmat> *tap

[11:33] *** sftp left
[11:35] <jnthn> lizmat: OK, that's prolly the isuse then

[11:35] <lizmat> jnthn: can I leave that to you?

[11:36] *** d4l3k_ joined
[11:36] *** olinkl joined
[11:36] *** corbyhaas joined
[11:36] *** doublec joined
[11:36] *** abaugher joined
[11:36] *** isacloud joined
[11:36] *** diakopte1 joined
[11:36] *** jantore joined
[11:37] <jnthn> lizmat: Yeah, it'll probably be in SUPPLY somewhere, or some other nasty place.

[11:38] *** sftp joined
[11:38] <lizmat> ok, I will have a stab at it

[11:38] <lizmat> BTW, shouldn't that live in Rakudo::Internals ??

[11:38] <jnthn> Maybe. :)

[11:38] <jnthn> Rakudo::Internals didn't exist at the time I added it :)

[11:38] *** integral_ joined
[11:38] *** integral_ left
[11:38] *** integral_ joined
[11:39] <jnthn> Feel free to move 'em.

[11:39] <jnthn> Though Actions.nqp will need an update.

[11:39] <lizmat> not clear how to change Actions.nqp, tbh

[11:39] *** Juerd_ joined
[11:39] <lizmat> find_method in Rakudo::Internals ?

[11:40] <jnthn> Probably just a callmethod node instead of a call node

[11:40] *** xdbr left
[11:40] <jnthn> And with first child being a WVal holding Rakudo::Internals (which you get with find_symbol)

[11:40] <lizmat> ok

[11:41] *** kipd left
[11:41] <jnthn> Socket tests showed up my first fix wasn't so smart.

[11:41] <jnthn> Now I've got it working nicely :)

[11:42] *** kipd joined
[11:42] *** SmokeMachine_ left
[11:42] *** dpk joined
[11:43] *** yx_ joined
[11:43] *** yoleaux left
[11:43] *** {dpk} left
[11:43] *** eternaleye left
[11:43] *** obra left
[11:43] *** esh left
[11:43] *** dalek left
[11:43] *** DrPete_ left
[11:43] *** hacst left
[11:43] *** mathw left
[11:43] *** pierrot left
[11:43] *** ugexe left
[11:43] *** sjn left
[11:43] *** havenwood left
[11:44] *** advwp_ left
[11:44] *** luis left
[11:44] *** masak left
[11:44] *** cfloare left
[11:44] *** chewie_2082 left
[11:44] *** risou left
[11:44] *** avalenn left
[11:44] *** jme` left
[11:44] *** Juerd left
[11:44] *** mephinet left
[11:44] *** roguelazer left
[11:44] *** jsimonet left
[11:44] *** ilmari left
[11:44] *** integral left
[11:44] *** zemmihates left
[11:44] *** chansen_ left
[11:44] *** timotimo left
[11:44] *** [ptc] left
[11:44] *** xnrand left
[11:44] *** dylanwh left
[11:44] *** Juerd_ is now known as Juerd

[11:44] *** d4l3k_ is now known as dalek

[11:44] *** ChanServ sets mode: +v dalek

[11:45] *** yx_ is now known as xnrand

[11:46] *** dalek left
[11:46] *** [ptc] joined
[11:46] <lizmat> jnthn: hmmm... S17-supply/syntax.t now gives me an "Abort trap: 6"

[11:46] *** ggherdov left
[11:48] <jnthn> After changing things?

[11:48] *** yoleaux joined
[11:48] *** obra joined
[11:48] *** DrPete_ joined
[11:48] *** ugexe joined
[11:48] *** advwp_ joined
[11:48] *** chewie_2082 joined
[11:48] *** risou joined
[11:48] *** jme` joined
[11:48] *** jsimonet joined
[11:48] *** zemmihates joined
[11:48] *** chansen_ joined
[11:48] *** timotimo joined
[11:48] *** dylanwh joined
[11:48] *** orwell.freenode.net sets mode: +v yoleaux

[11:48] *** obra left
[11:48] * jnthn can try looking at the patch

[11:48] <lizmat> not sure

[11:49] * lizmat stashes and rebuilds

[11:49] *** dpk is now known as Guest57557

[11:49] *** dalek joined
[11:49] *** ChanServ sets mode: +v dalek

[11:49] *** ilmari joined
[11:50] *** roguelazer joined
[11:51] *** advwp_ left
[11:51] *** chewie_2082 left
[11:51] *** sftp left
[11:51] *** Guest57557 is now known as {dpk}

[11:52] *** hacst joined
[11:52] <lizmat> jnthn: before my changes, could have been a while already so

[11:53] <dalek> nqp: 2253c07 | jnthn++ | tools/build/MOAR_REVISION:

[11:53] <dalek> nqp: Bump MOAR_REVISION for async I/O protocol fix.

[11:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2253c07d27

[11:53] <dalek> nqp: d9545f4 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/io/AsyncSocketHandle.java:

[11:53] <dalek> nqp: Tweak async socket sequence number emission.

[11:53] <dalek> nqp: 

[11:53] <dalek> nqp: Matches a fix in MoarVM. Enables fixing various data loss bugs.

[11:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d9545f4d91

[11:55] *** PotatoGim left
[11:56] *** hacst left
[11:56] *** mephinet joined
[11:57] *** hoelzro left
[11:57] <dalek> rakudo/nom: 139be68 | jnthn++ | / (5 files):

[11:57] <dalek> rakudo/nom: Fix various data loss bugs with async I/O.

[11:57] <dalek> rakudo/nom: 

[11:57] <dalek> rakudo/nom: In some cases, async sockets and processes could lose data from the

[11:57] <dalek> rakudo/nom: end of the stream. Further, there was a data race in the sequencing

[11:57] <dalek> rakudo/nom: code, which was duplicated in a couple of places also. This factors

[11:57] <dalek> rakudo/nom: the sequence logic out to a single place, removes the data race, and

[11:57] <dalek> rakudo/nom: uses protocol changes in Moar/JVM backend code to fix the data loss

[11:57] <dalek> rakudo/nom: issue.

[11:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/139be68194

[11:59] *** ggherdov joined
[12:01] *** sftp joined
[12:01] *** hacst joined
[12:03] *** xdbr joined
[12:03] <dalek> roast: 1971ba1 | jnthn++ | S (2 files):

[12:03] <dalek> roast: Test for RT #125515.

[12:03] <dalek> roast: review: https://github.com/perl6/roast/commit/1971ba1ffa

[12:03] <jnthn> oops, an unfudge slipped into that commit too

[12:04] *** kipd left
[12:04] <dalek> rakudo/nom: ee1dbdd | jnthn++ | t/spectest.data:

[12:04] <dalek> rakudo/nom: Run S17-procasync/stress.t as stress test.

[12:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee1dbdddef

[12:05] *** Hotkeys left
[12:06] *** hoelzro joined
[12:06] *** hacst left
[12:09] *** literal joined
[12:09] *** wtw joined
[12:11] <jnthn> .tell leont I fixed a Proc::Async issue that could cause data loss in various cases, which was quite likely responsible for your harness issues.

[12:11] <yoleaux> jnthn: I'll pass your message to leont.

[12:11] *** rigsby left
[12:11] *** avar joined
[12:11] *** avar left
[12:11] *** avar joined
[12:11] *** bowtie joined
[12:11] *** Ven joined
[12:11] *** crux joined
[12:11] *** lucasb joined
[12:11] *** luis joined
[12:11] *** uruwi joined
[12:11] *** cfloare joined
[12:12] *** RabidGravy joined
[12:12] *** molaf joined
[12:12] <moritz> \o/

[12:12] <yoleaux> 11:17Z <gfldex> moritz: post posted, set to private and to be published on 2015/12/02@00:01

[12:12] *** xinming joined
[12:12] *** SmokeMachine_ joined
[12:12] *** havenwood joined
[12:12] *** M-eternaleye joined
[12:12] *** havenwood left
[12:12] *** havenwood joined
[12:12] <lucasb> freenode still unstable for me :( very hard to connect

[12:12] *** Celelibi joined
[12:12] *** revdiablo joined
[12:12] *** cgfbee joined
[12:12] *** avalenn joined
[12:12] *** confuseAcat joined
[12:13] *** hacst joined
[12:13] *** pierrot joined
[12:14] *** Actualeyes joined
[12:14] *** masak joined
[12:14] *** masak is now known as Guest7129

[12:15] *** Spot__ left
[12:16] <RabidGravy> what larks

[12:16] <jnthn> lunch &

[12:18] <dalek> roast: f013d55 | lizmat++ | integration/no-indirect-new.t:

[12:18] <dalek> roast: Apparently the exception type has changed

[12:18] <dalek> roast: review: https://github.com/perl6/roast/commit/f013d55d71

[12:18] *** kipd joined
[12:18] *** mathw joined
[12:18] *** n0xff joined
[12:19] *** pierrot left
[12:19] *** advwp joined
[12:22] <lizmat> .tell jnthn looks like most of the problems I see in supply tests, are related to "done" and lasting out of a whenever (which should do a "done" I assume)

[12:22] <yoleaux> lizmat: I'll pass your message to jnthn.

[12:22] *** M-eternaleye is now known as eternaleye

[12:22] *** eternaleye left
[12:22] *** eternaleye joined
[12:22] <lizmat> .tell jnthn since I have no idea where "done" is being done, I have no idea how to debug this further  :-(

[12:22] <yoleaux> lizmat: I'll pass your message to jnthn.

[12:23] *** confuseAcat left
[12:26] *** nmp joined
[12:27] *** xiaomiao joined
[12:27] *** Khisanth joined
[12:30] *** kaare_ joined
[12:31] <RabidGravy> testing oauth stuff is a mammoth pain in the arse

[12:32] *** chewie_1982 joined
[12:33] *** sftp left
[12:33] *** mrsolo left
[12:36] *** Spot__ joined
[12:36] *** Ven_ joined
[12:36] *** sftp joined
[12:37] *** obra joined
[12:38] *** uruwi left
[12:38] *** luis left
[12:38] *** havenwood left
[12:38] *** SmokeMachine_ left
[12:38] *** sjn joined
[12:39] *** SmokeMachine_ joined
[12:39] *** advwp left
[12:39] *** avalenn left
[12:39] *** xinming left
[12:39] *** eternaleye left
[12:39] *** lucasb left
[12:39] *** kaare_ left
[12:39] *** uruwi joined
[12:39] *** mathw left
[12:39] *** cgfbee left
[12:39] *** revdiablo left
[12:39] *** Celelibi left
[12:39] *** stmuk joined
[12:40] *** RabidGravy left
[12:40] *** cfloare left
[12:40] *** bowtie left
[12:40] *** Ven left
[12:40] *** avalenn joined
[12:40] *** rindolf joined
[12:40] *** advwp joined
[12:40] *** pierrot joined
[12:41] *** cfloare joined
[12:41] *** revdiablo joined
[12:42] <dalek> rakudo/nom: ae5bc14 | lizmat++ | src/core/Supply.pm:

[12:42] <dalek> rakudo/nom: Remove done() / Replace by last

[12:42] <dalek> rakudo/nom: 

[12:42] <dalek> rakudo/nom: This seems to fix a large number of the supply test breakage on OSX

[12:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae5bc141cc

[12:42] *** kaare_ joined
[12:43] *** ir2ivps4_ joined
[12:43] *** frew joined
[12:44] *** bowtie joined
[12:44] <dalek> rakudo/nom: 3ce3df5 | lizmat++ | src/core/Supply.pm:

[12:44] <dalek> rakudo/nom: Fix semantics of Supply.head/tail, jnthn++

[12:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3ce3df5c11

[12:44] <dalek> rakudo/nom: 8a2f0c7 | lizmat++ | src/core/Supply.pm:

[12:44] <dalek> rakudo/nom: Adopt suggestion by Brad Gilbert++

[12:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a2f0c7c99

[12:44] *** luis joined
[12:45] *** hoelzro left
[12:45] *** M-eternaleye joined
[12:45] *** Celelibi joined
[12:45] *** llfourn left
[12:46] *** havenwood joined
[12:46] *** havenwood left
[12:46] *** havenwood joined
[12:46] *** hoelzro joined
[12:46] *** Guest7129 is now known as masak_grr

[12:48] *** telex joined
[12:51] *** mephinet left
[12:54] *** mephinet joined
[12:54] *** pierre-vigier joined
[12:56] <jnthn> lizmat: I assume all those places you removed done don't have more than one whenever?

[12:56] <yoleaux> 12:22Z <lizmat> jnthn: looks like most of the problems I see in supply tests, are related to "done" and lasting out of a whenever (which should do a "done" I assume)

[12:56] <yoleaux> 12:22Z <lizmat> jnthn: since I have no idea where "done" is being done, I have no idea how to debug this further  :-(

[12:57] <jnthn> lizmat: I think they're OK except the one in throttle

[12:58] <jnthn> Which will now fail to "done" the supply and keep the timer alive, by the looks of it

[13:00] <lizmat> jnthn: ok, will put that one back

[13:00] <jnthn> The others seem like nice simplifications

[13:00] <jnthn> done throws a control exception btw

[13:00] *** boegel left
[13:00] <jnthn> Which means that control flow ends at a done

[13:02] *** Hotkeys joined
[13:03] *** hacst left
[13:03] *** RabidGravy joined
[13:03] * jnthn is looking at https://rt.perl.org/Ticket/Display.html?id=123949

[13:03] <[Tux]> Inline::Perl5 still FAILs

[13:04] <jdv79> RabidGravy: i did.  just never got around to doing it myelf

[13:04] * jdv79 should check if the headers bug(s) i found are fixed yet..

[13:04] <RabidGravy> unlikely

[13:05] *** ilmari left
[13:05] *** boegel joined
[13:05] *** cgfbee joined
[13:06] *** lucasb joined
[13:06] *** pierre-vigier left
[13:06] *** mephinet left
[13:07] *** confuseAcat joined
[13:07] <lucasb> Does it make sense to say that .head and .tail are "non-destructive" versions of shift and pop?

[13:07] *** mathw joined
[13:08] <jnthn> lucasb: Well, aside from the numeric parameter, kinda :)

[13:08] *** woolfy joined
[13:08] *** woolfy left
[13:08] <lucasb> What is your opinion about making shift and pop accept an integer argument, meaning the number of elements to be shifted/poped? Another argument is that you can push and unshift more than one element, not just one.

[13:09] *** xinming joined
[13:10] <jnthn> I'd like to think we're mostly done with features before Christmas. 

[13:10] <lucasb> moar features! moar features! :D

[13:10] <lucasb> just kidding :)

[13:10] <lucasb> jnthn: thanks

[13:11] <nine_> [Tux]: does it happen with Inline::Perl5's tests or with your own code?

[13:11] <[Tux]> basic tests

[13:11] <[Tux]> t/use.t ....................... ok

[13:11] <[Tux]> No such method 'context' for invocant of type 'Inline::Perl5::Perl6Callbacks'

[13:11] <[Tux]>   in method invoke-parent at /pro/3gl/CPAN/rakudobrew/.panda-work/1448628920_4/lib/Inline/Perl5.pm6:503

[13:11] <[Tux]>   in block  at /pro/3gl/CPAN/rakudobrew/.panda-work/1448628920_4/lib/Inline/Perl5.pm6:991

[13:11] <[Tux]>   in block <unit> at t/v6.t:19

[13:11] *** hacst joined
[13:12] *** domidumont left
[13:12] *** isacloud left
[13:12] *** parisba left
[13:12] *** mephinet joined
[13:12] *** hoelzro left
[13:12] *** SmokeMachine_ left
[13:13] *** pierre-vigier joined
[13:13] <Ulti> m: say 􏿽xB3􏿽xB2

[13:13] <camelia> rakudo-moar 8a2f0c: OUTPUT«9␤»

[13:14] <Ulti> get why that's happening but maybe not the best outcome

[13:14] *** Hotkeys left
[13:15] *** SmokeMachine_ joined
[13:16] *** Hotkeys joined
[13:16] *** hoelzro joined
[13:16] *** Psyche^ joined
[13:17] *** colomon joined
[13:18] <dalek> rakudo/nom: 72d0970 | lizmat++ | src/core/Supply.pm:

[13:18] <dalek> rakudo/nom: Fix timer reset on Supply.throttle, jnthn++

[13:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/72d0970661

[13:18] <dalek> rakudo/nom: 62ddc6d | lizmat++ | src/core/Any-iterable-methods.pm:

[13:18] <dalek> rakudo/nom: Remove grep-index/first-index/last-index

[13:18] <dalek> rakudo/nom: 

[13:18] <dalek> rakudo/nom: Please use grep(:k), first(:k), first(:k,:end) instead

[13:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/62ddc6db33

[13:19] *** pierre-vigier left
[13:21] *** dalek left
[13:21] *** sftp left
[13:22] *** dalek joined
[13:22] *** ChanServ sets mode: +v dalek

[13:22] *** Hotkeys left
[13:24] *** SmokeMachine__ joined
[13:25] *** SmokeMachine_ left
[13:26] *** Psyche^ left
[13:26] *** sftp joined
[13:26] *** Hotkeys joined
[13:27] *** PotatoGim joined
[13:27] *** Psyche^ joined
[13:28] *** isacloud joined
[13:28] <timotimo> lucasb: you can't push and unshift more than one element, though :)

[13:29] <timotimo> lucasb: that was recently changed; we have append and prepend to put more than one element at the beginning or end, but pop is always a single element

[13:29] <timotimo> so that push and pop can be symmetric

[13:29] <dalek> rakudo/nom: 842010f | jnthn++ | src/core/IO/Socket/Async.pm:

[13:29] <dalek> rakudo/nom: Missing space in an error.

[13:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/842010f8b9

[13:30] <lizmat> .tell [Coke] maybe the contributor list for 2015.12 should contain *all* contributors we can cull from the git logs ?

[13:30] <yoleaux> lizmat: I'll pass your message to [Coke].

[13:30] *** avalenn left
[13:31] <timotimo> oh my word! my ipv6 connectivity issues have been resolved!

[13:31] <lucasb> timotimo: I'm not sure I understand

[13:31] *** avalenn joined
[13:31] <timotimo> m: my @foo; @foo.push(1, 2, 3, 4); say @foo.perl

[13:31] <camelia> rakudo-moar 62ddc6: OUTPUT«[1, 2, 3, 4]␤»

[13:31] <timotimo> that's not ... huh?

[13:31] *** ilmari joined
[13:31] <timotimo> m: my @foo; @foo.push(1, 2, 3, 4); @foo.push("hi"); say @foo.perl

[13:31] <camelia> rakudo-moar 62ddc6: OUTPUT«[1, 2, 3, 4, "hi"]␤»

[13:32] <lucasb> timotimo: ^^ see? :)

[13:32] <timotimo> didn't ... huh?

[13:32] *** parisba joined
[13:32] <jnthn> timotimo: The difference is that it doesn't follow the 1-arg rule

[13:32] <timotimo> oh

[13:32] <jnthn> timotimo: One argument = one item

[13:32] <timotimo> m: my @foo; @foo.push((1, 2, 3, 4)); @foo.push("hi"); say @foo.perl

[13:32] <camelia> rakudo-moar 62ddc6: OUTPUT«[(1, 2, 3, 4), "hi"]␤»

[13:32] <timotimo> that's how

[13:32] <timotimo> yeah, that makes sense

[13:32] *** parisba is now known as Guest77425

[13:33] <dalek> rakudo/nom: dee63c3 | lizmat++ | src/core/Str.pm:

[13:33] <dalek> rakudo/nom: Remove support for Str.split(:all)

[13:33] <dalek> rakudo/nom: 

[13:33] <dalek> rakudo/nom: Please use Str.split(:v) instead

[13:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dee63c3de5

[13:33] <dalek> roast: e3c4965 | lizmat++ | S32-str/split-simple.t:

[13:33] <dalek> roast: Fix Str.split tests using :all, use :v instead

[13:33] <dalek> roast: review: https://github.com/perl6/roast/commit/e3c4965ba4

[13:34] <lucasb> timotimo: so.. it *can* push and unshift more than element, right? I was just asking that .shift(5) and .pop(5) shifted and poped 5 elements

[13:34] <timotimo> oh!

[13:34] <timotimo> how did i misread that?

[13:34] <timotimo> my quality of sleep must be declining or something

[13:34] <timotimo> on that note: how do i find a topic to write about for the advent calendar? :\

[13:35] *** go|dfish joined
[13:35] <lizmat> lucasb: an argument against multiple elements being popped/unshifted, is that it would change the return signature

[13:36] <timotimo> we should make types in perl6 pretend they are a list of that type %)

[13:36] <lizmat> timotimo: they already are

[13:36] <lizmat> m: say Int[0]

[13:36] <camelia> rakudo-moar 62ddc6: OUTPUT«5===SORRY!5=== Error while compiling /tmp/zi5V51GrNY␤Int cannot be parameterized␤at /tmp/zi5V51GrNY:1␤------> 3say Int[0]7⏏5<EOL>␤»

[13:36] <lizmat> ah?

[13:36] <lizmat> hmmm...

[13:36] <timotimo> values are, but types aren't

[13:36] <lucasb> lizmat: oh, ok. I didn't thought about that :)

[13:36] <timotimo> you can assign 1 to a my Int @foo only because of list assignment/STORE semantics

[13:36] *** dpk joined
[13:36] <timotimo> not because Int also matches Positional[Int]

[13:37] * lizmat is not touching on DEPRECATED IO features until jnthn is done

[13:37] <timotimo> and that would quite frankly be insane... probably

[13:37] *** {dpk} left
[13:38] *** dpk is now known as {dpk}

[13:39] *** mrsolo joined
[13:39] <dalek> rakudo/nom: e270327 | lizmat++ | docs/ChangeLog:

[13:39] <dalek> rakudo/nom: Mention Supply.new -> Supplier.new change

[13:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2703274c2

[13:42] *** Juerd left
[13:43] *** zakharyas joined
[13:45] *** mr-foobar joined
[13:47] *** Psyche^_ joined
[13:50] <timotimo> we didn't end up releasing last month's rakudo star that moritz prepared?

[13:52] <jnthn> I need some input on a few IO API things: https://gist.github.com/jnthn/9d8b2e22882d7f7a871e

[13:52] *** Psyche^ left
[13:52] *** PotatoGim left
[13:52] *** SmokeMachine__ left
[13:52] <lucasb> lizmat: idk if I undestand you correctly, but shift and pop doesn't have a 'return signature', there is no contract about what they return

[13:52] <jnthn> 2 xmas RTs and 2 other RTs depend on it! :P

[13:52] <lucasb> their signature says 'is nodal', but idk what that means :)

[13:54] <jnthn> moritz, hoelzro # ^^ these involve tickets you filed :)

[13:55] <timotimo> "nodal" defines how things operate when used in a hyper context

[13:55] <lucasb> timotimo: oh, ok. thanks. ...and do you know what does 'is raw' means?

[13:56] *** kjs_ joined
[13:56] <timotimo> that's about re-containerization, especially with lists  -  i think

[13:58] <lizmat> m: sub a is raw { state $a = 42 }; say a; a++; say a

[13:58] <camelia> rakudo-moar e27032: OUTPUT«42␤43␤»

[13:58] <lizmat> m: sub a { state $a = 42 }; say a; a++; say a

[13:58] <camelia> rakudo-moar e27032: OUTPUT«42␤Cannot call postfix:<++>(Int); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool:U $a is rw)␤    (Bool:D $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    …»

[13:58] <lizmat> lucasb timotimo ^^^

[13:59] *** Ven_ left
[14:00] <lucasb> lizmat: thanks, made it somehow clear to me :)

[14:00] <moritz> timotimo: not yet; it's still on my TODO

[14:02] <timotimo> can i do something to help you?

[14:02] <timotimo> i didn't test the tarball yet; would that help?

[14:03] <timotimo> http://hack.p6c.org/~moritz/rakudo-star-2015.11-rc0.tar.gz  -  the link from the backlog

[14:03] <moritz> jnthn: I'm OK with your proposals, including not unifying the things for you do't have good ideas how to unify them

[14:03] <moritz> timotimo: it would. So far I haven't received a single bit of feedback on the tarball (only on the announcement)

[14:03] <jnthn> moritz: Any feeling on the print-async thing?

[14:03] <timotimo> damn.

[14:04] <timotimo> i still find it a bit annoying that Configure.pl --gen-moar doesn't try to set a -j on the moar build

[14:04] * jnthn could go either way on that

[14:04] <timotimo> given that it has interp.c somewhat early in the build and that takes a phenomenal amount of time compared to the other individual files

[14:04] <timotimo> parallelization by -j2 would already help a whole lot there

[14:04] *** Ven joined
[14:04] *** bpmedley joined
[14:04] <moritz> jnthn: I'd be fine with 'print' being async, and that you have to explicitly await for it

[14:05] <timotimo> it's still less than a mintue on my box, but not sure if it's a good first impression... also this isn't feedback on the starball

[14:05] <jnthn> moritz: OK, so that's the status quo.

[14:05] <jnthn> moritz++ # feedback

[14:05] <moritz> jnthn++ # proposal

[14:06] <moritz> timotimo: also, there's a rakudo/star PR for including linenoise; testing that would also help

[14:07] <arnsholt> I've never used async stuff before, but intuitively I agree with moritz, it makes sense that output would be async like input is. Convenience methods for synchronous output might make sense though

[14:08] *** doublec left
[14:08] <jnthn> Well, you'd just write await $foo.print ...

[14:08] <jnthn> I'm not sure putting that into the method name is a win :)

[14:09] <arnsholt> Yeah, I guess it's not possible to shorten much =)

[14:09] <timotimo> you can also .print(...).await to make it look a bit more LTR

[14:10] *** zacts joined
[14:10] <timotimo> ===SORRY!=== Error while compiling /tmp/rakudo-star-2015.11-rc0/install/share/perl6/lib/DBDish/TestMock/Connection.pm6

[14:10] <timotimo> Invalid typename 'DBDish::Role::Connection'

[14:11] <timotimo> that happens during the precompilation

[14:11] <moritz> timotimo: with moar or JVM?

[14:11] <timotimo> moar

[14:12] <moritz> :(

[14:12] <moritz> why didn't that happen for me?

[14:12] <moritz> timotimo: do the tests still pass?

[14:14] <timotimo> oh, make test, eh?

[14:14] <timotimo> ah

[14:15] *** doublec joined
[14:16] *** lichtkind joined
[14:19] <timotimo> DBIish tests are very unhappy

[14:19] <timotimo> https://gist.github.com/timo/39e793ad327c917c721b

[14:20] *** jantore_ joined
[14:20] *** SmokeMachine__ joined
[14:20] <moritz> timotimo: make modules-test

[14:21] <moritz> timotimo: and you did a 'make install' first?

[14:21] <timotimo> i did make install

[14:21] <timotimo> "make test" doesn't suggest "make modules-test", it probably should

[14:22] *** mr-fooba_ joined
[14:23] <timotimo> with make modules-test everything everywhere is happy

[14:23] *** Actualeyes left
[14:23] <timotimo> but "make test" suggests invoking prove on modules/foo/t

[14:23] <timotimo> that's perhaps what breaks dBIish?

[14:24] <moritz> timotimo: does 'make modules-test' work for you?

[14:24] <timotimo> yes

[14:24] <timotimo> all tests succeed everywhere

[14:25] <moritz> then I guess we should not recommend the prove/ step

[14:25] <moritz> which assumes that stuff is installed, and thus doesn't set paths

[14:26] <moritz> which won't file test-only modules

[14:26] <timotimo> oh?

[14:26] <timotimo> but i ran the prove thing post-make-install

[14:27] *** kjs_ left
[14:27] *** mr-foobar left
[14:27] *** ilmari left
[14:27] *** isacloud left
[14:27] *** sftp left
[14:27] *** jantore left
[14:27] *** olinkl left
[14:27] *** corbyhaas left
[14:27] *** abaugher left
[14:27] *** diakopte1 left
[14:27] *** ely-se joined
[14:28] <moritz> timotimo: yes, but make install doesn't install test-only modules

[14:28] <moritz> (under t/lib/ or so)

[14:28] <timotimo> ah!

[14:28] <timotimo> of course

[14:29] *** telex left
[14:30] *** telex joined
[14:31] *** donaldh joined
[14:32] <donaldh> I have been experimenting with MAIN and USAGE - I would really like to document the command-line params

[14:32] <donaldh> How is this for a proposal https://gist.github.com/donaldh/478814e68ab9d674eab9

[14:32] *** avalenn left
[14:32] <donaldh> hat-tip to jnthn++ for pointing out declarator pod

[14:33] <moritz> donaldh: +1

[14:34] *** avalenn joined
[14:36] <donaldh> worth putting in core ?

[14:37] *** domidumont joined
[14:38] <timotimo> http://examples.perl6.org/categories/cookbook/13classes-objects-and-ties/13-01constructing-an-object.html - urgh! recommending the use of .isa("Foo") is a terrible, terrible idea IMO

[14:39] <jnthn> Yes, .isa(Foo) or just ~~ Foo

[14:39] <timotimo> yes

[14:39] <timotimo> should i just go ahead and change that?

[14:39] *** inokenty joined
[14:39] <jnthn> Aye

[14:40] *** inokenty left
[14:40] <dalek> perl6-examples: 61ebb06 | timo++ | categories/cookbook/13classes-objects-and-ties/13-01constructing-an-object.pl:

[14:40] <dalek> perl6-examples: do not recommend the use of .isa("Foo").

[14:40] <dalek> perl6-examples: 

[14:40] <dalek> perl6-examples: use ~~ Foo instead

[14:40] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/61ebb061f3

[14:41] <timotimo> it wouldn't be terrible if the examples site would directly link to a folder or file on github at the very bottom

[14:42] <timotimo> how about this: the yahtzee game example has this line: sub roll-dice { map { (1..6).pick }, 1..$^rolls };

[14:42] <lizmat> upgrading&

[14:42] <timotimo> should i just go into the source and replace roll-dice with (1..6).roll($num) where it used to be used?

[14:42] *** lizmat left
[14:43] *** inokenty joined
[14:44] <jnthn> Or keep the sub roll-dice but put that inside of it

[14:44] <timotimo> that's definitely less intrusive

[14:44] <timotimo> also, it'll document more clearly what it is about

[14:46] <dalek> perl6-examples: 243ac3c | timo++ | categories/games/yahtzee.p6:

[14:46] <dalek> perl6-examples: use .roll instead of .pick in a map

[14:46] <dalek> perl6-examples: 

[14:46] <dalek> perl6-examples: leaving it in the roll-dice sub for enhanced clarity

[14:46] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/243ac3c0cd

[14:48] *** Juerd joined
[14:48] *** ilmari joined
[14:48] *** isacloud joined
[14:48] *** sftp joined
[14:48] *** olinkl joined
[14:48] *** corbyhaas joined
[14:48] *** abaugher joined
[14:48] *** diakopte1 joined
[14:48] *** xpen joined
[14:49] <timotimo> ugh. http://examples.perl6.org/categories/shootout/n-body.html extends past the right margin of the code box

[14:49] <timotimo> i should file an issue

[14:50] *** AlexDaniel joined
[14:51] <JimmyZ> donaldh: +1 # looks awesome

[14:51] * RabidGravy wonders if soundcloud oauth authorisation grant codes expire themselves

[14:52] <dalek> perl6-examples: a718f31 | timo++ | template/head.html:

[14:52] <dalek> perl6-examples: remove reference to jquery custom css that 404s

[14:52] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/a718f31e90

[14:52] <donaldh> JimmyZ: note I just added the 5 lines of code to emit the arg docs after the usage docs.

[14:53] <JimmyZ> donaldh: I like it about adding .WHY docs 

[14:54] *** lizmat joined
[14:55] <jnthn> phew, lizmat survived her upgrade ;)

[14:55] <lizmat> :-)

[14:55] <lizmat> yup

[14:55] <timotimo> \o/

[14:55] <timotimo> up all the grades

[15:04] <hoelzro> o/ #perl6

[15:04] <jnthn> o/ h\o/elzr\o/

[15:05] <hoelzro> =)

[15:05] <hoelzro> morning jnthn 

[15:05] <AlexDaniel> Ulti: (³²) this thing is reported, so yeah

[15:05] <jnthn> There's some IO API stuff in recent backlog

[15:05] <jnthn> Input would be welcome, when you get chance :)

[15:05] <hoelzro> jnthn: regarding the Proc::Async API, I think print-async and co. are the right way forward

[15:05] <timotimo> argh!!

[15:06] <timotimo> why is this http://www.learningperl6.com/Chapters/11.filehandles.html placed first on a google search for "perl6 file handle"

[15:06] <timotimo> it says you get a line from a file handle with =$filehandle

[15:06] <jnthn> Not for like 5 years it ain't :)

[15:06] <timotimo> Last Modified: Tue May 1 09:34:54 2007

[15:06] <jnthn> hoelzro: OK. Not everyone else feels that way...

[15:07] <timotimo> File Handles- Cooksongold - buy now and get 15% off. use code "NOVEMBER" offer ends 30th nov!

[15:08] <timotimo> yeah, people, hear that? get your file handles at an exquisite price!

[15:09] <JimmyZ> .oO(IO API backlog)... I have a PR for it :P

[15:10] * timotimo pinged bdfoy on twitter

[15:10] <timotimo> JimmyZ: i'm +1 on getting that in

[15:10] <timotimo> but i didn't review the code. i can't imagine what could go wrong, though

[15:10] <timotimo> so there's that ...

[15:10] *** khw joined
[15:12] <JimmyZ> well, it is waiting for jnthn++ IO work.

[15:12] <timotimo> ah!

[15:13] <hoelzro> moritz, jnthn: so the P::A resolution is to leave the API as is, and just make sure people know to await() what print() returns?

[15:14] <moritz> hoelzro: aye

[15:14] <timotimo> i think so, too

[15:14] <timotimo> make it very clear in the documentation

[15:15] <timotimo> if you ask for async, you should not be surprised by getting async; but it should still be pointed out prominently

[15:15] *** Axord joined
[15:15] <daxim> inviting you to chip in:  https://www.reddit.com/r/perl/comments/3ugm8r/dataeither_in_perl_6_exist/

[15:17] <hoelzro> alright

[15:18] <hoelzro> thanks jnthn, moritz, timotimo, and others for weighing in!

[15:18] <jnthn> hoelzro: I note it doesn't disorder the writes themselves, which would be nuts.

[15:18] <hoelzro> right

[15:18] * hoelzro .oO( write? )

[15:18] <hoelzro> I think as long as everything returns promises and the documentation is very clear that everything is async, that should work fine

[15:20] <Skarsnik> daxim, http::useragent return a http::response object for his example, wish make sense for http since there can be some additionnal stuff that just error x)

[15:21] <jnthn> daxim: If you want to return something indicating failure, but that the caller can work with as a value, then "fail" is the typical way. You can fail with a typed exception to include more data, and there are various constructs to support processing either case (and if you ignore the failure it'll end up blowing up just like an exception)

[15:22] <jnthn> m: sub foo($ok) { fail 'oops' unless $ok; 42 }; with foo(1) { .say } else { say "failed: $_" }

[15:22] <camelia> rakudo-moar e27032: OUTPUT«42␤»

[15:22] <jnthn> m: sub foo($ok) { fail 'oops' unless $ok; 42 }; with foo(0) { .say } else { say "failed: $_" }

[15:22] <camelia> rakudo-moar e27032: OUTPUT«failed: (HANDLED) oops␤  in sub foo at /tmp/TzRxtu1jYc:1␤  in block <unit> at /tmp/TzRxtu1jYc:1␤␤»

[15:23] *** cdg joined
[15:24] <lucasb> oh, a '(HANDLED)' gets prepended in the stringfication of a failure?

[15:25] <lichtkind> cheers

[15:26] <lucasb> m: fail; say 'hi'  # <-- I think this is a serious one to get fixed before xmas, isn't it?

[15:26] <camelia> rakudo-moar e27032: ( no output )

[15:27] <lucasb> I mean, someone will certainly put a fail in the toplevel scope and will not know what happened

[15:28] *** skids joined
[15:30] <jdv79> but does fail make sense for a http ua?

[15:31] <Skarsnik> http ua does not fail

[15:32] *** gtodd1 joined
[15:32] <gtodd1> .u 228E

[15:32] <yoleaux> U+228E MULTISET UNION [Sm] (⊎)

[15:33] *** gtodd1 is now known as gtodd

[15:33] <jdv79> Skarsnik: huh?

[15:33] <Skarsnik> my $rep = $ua.get($url);if ! $rep.is-success {die "Can't contact $url" ~ $rep.status-line;

[15:33] <Skarsnik> }

[15:34] <lizmat> fetching a van&

[15:36] *** lab joined
[15:36] <gtodd>  "U+" is Unicode "bootstrapping" itself from ASCII ? :-) 

[15:36] <gtodd> http://stackoverflow.com/a/8891122/2019415   http://unicode.org/mail-arch/unicode-ml/y2005-m11/0060.html

[15:36] <jdv79> but thats not relevant to my question.

[15:37] <jdv79> i was asking if returning fail sounds like a good idea

[15:37] <dalek> perl6-examples: 34da7ab | (Zoffix Znet)++ | html/css/style.css:

[15:37] <dalek> perl6-examples: Fix: long code lines are hidden by the right margin (Closes #37)

[15:37] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/34da7ab42a

[15:39] <lab> Hi all. Is there a module equivalent to Devel::Size for P6?

[15:41] <jnthn> Not yet, though --profile includes information on how many objects are allocated and which subs/methods allocate them.

[15:41] <jnthn> And also stats on garbage collectino.

[15:42] <jnthn> *collection

[15:42] <Skarsnik> jdv79, I don't know, I don't know enought about http, but the request can fail but does not mean it's a failure, like you do a get, you can receive 404/403 that are failure but you can maybe get a redirect response too

[15:42] *** llfourn joined
[15:43] *** PotatoGim joined
[15:44] <hoelzro> jnthn: I guess the remaining issue for kill.t is that kill doesn't return a promise; should I RT that separately?

[15:46] <lab> jnthn: thanks, looking forward to some fun devel::XXX modules and htat one in particular.

[15:46] *** lab is now known as nadim

[15:47] *** llfourn left
[15:48] * jnthn quite wants a "heap explorer" style tool also :)

[15:52] <jnthn> hoelzro: Does kill work asynchronously?

[15:52] <hoelzro> jnthn: it sets up something to run in the cancel task queue, so it seems so

[15:52] *** jernster joined
[15:53] <jnthn> ah, ok

[15:53] <jnthn> Then yeah, it should

[15:54] *** lizmat left
[15:54] *** go|dfish left
[15:54] *** Hotkeys left
[15:54] *** lichtkind left
[15:54] *** DrPete_ left
[15:54] *** risou left
[15:54] *** jme` left
[15:54] <timotimo> then the problematic code example should read $proc.write("hi").then(*.kill).then(*.write("oh my gosh")) ?

[15:55] *** bpmedley left
[15:55] *** lizmat joined
[15:55] <jnthn> timotimo: No, just with await before each line. :)

[15:55] <timotimo> pff. timtowtdi

[15:59] *** Hotkeys joined
[16:00] *** ely-se left
[16:07] *** risou joined
[16:08] *** DrPete_ joined
[16:08] *** ely-se joined
[16:09] *** lichtkind joined
[16:13] *** go|dfish joined
[16:18] <skids> I think the Supply work may have made $fh.watch.Promise not fire anymore.

[16:19] *** ilbelkyr_ is now known as ilbelkyr

[16:19] *** donaldh left
[16:20] <skids> watch.tap still works.

[16:21] <jnthn> The semantics of Supply.Promise changed

[16:21] *** xpen left
[16:21] <jnthn> You'll need $fh.watch.head(1).Promise to get the original ones

[16:21] <skids> Ah that would explain it.  jnthn++

[16:22] <skids> Hrm that doesn't seem to do it though.

[16:25] *** ely-se left
[16:25] *** zakharyas left
[16:25] *** ilbelkyr left
[16:26] *** Ven left
[16:27] *** ilbelkyr joined
[16:28] *** Ven joined
[16:34] <jnthn> Hm, head doesn't seem to be filing the "done"

[16:34] *** Amnez777 joined
[16:34] * zengargoyle missed the great POD debate of last nite. sigh.

[16:34] <nine_> There was a POD debate?

[16:34] *** nadim left
[16:36] <zengargoyle> a lot of talk about Pod::ToHtml, Pod::Walker, item lists and such.

[16:41] <dalek> perl6-roast-data: f384ba5 | coke++ | / (9 files):

[16:41] <dalek> perl6-roast-data: today (automated commit)

[16:41] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f384ba5da6

[16:43] *** gtodd left
[16:44] *** risou_ joined
[16:45] *** lucasb left
[16:45] <nine_> How can I get verbose output of the spectests?

[16:46] *** Ven left
[16:46] *** go|dfish left
[16:46] *** lichtkind left
[16:46] *** DrPete_ left
[16:46] *** risou left
[16:46] *** Hotkeys left
[16:46] *** lizmat left
[16:46] *** jernster left
[16:46] *** skids left
[16:46] *** Axord left
[16:46] *** ilmari left
[16:46] *** isacloud left
[16:46] *** sftp left
[16:46] *** olinkl left
[16:46] *** corbyhaas left
[16:46] *** abaugher left
[16:46] *** diakopte1 left
[16:47] <autarch> zengargoyle: if you want to take a look at my code, I'd appreciate feedback - https://github.com/autarch/perl6-Pod-NodeWalker and https://github.com/autarch/Pod-To-HTML/tree/autarch/use-pod-nodewalker

[16:47] <jnthn> nine_: Not sure there's a Makefile entry for it, you'd need to run t/harness directly, and pass --verbosity=1 or so

[16:48] <nine_> ok

[16:48] *** domidumont left
[16:51] *** skids joined
[16:51] *** lizmat joined
[16:52] <moritz> search for "loud" in the makefile

[16:53] <flussence> half of the old pod::to::html was my fault :D

[16:56] *** gtodd1 joined
[16:56] *** go|dfish joined
[16:56] *** DrPete_ joined
[16:56] *** Hotkeys joined
[16:56] *** Axord joined
[16:56] *** ilmari joined
[16:56] *** isacloud joined
[16:56] *** sftp joined
[16:56] *** olinkl joined
[16:56] *** corbyhaas joined
[16:56] *** abaugher joined
[16:56] *** diakopte1 joined
[16:56] <flussence> (I wish we'd had that ::NodeWalker module 5 years ago...)

[16:57] <zengargoyle> autarch: in DESCRIPTION: object that your[you] provide ; do something without[with] a Pod document without having to know

[16:57] *** lichtkind joined
[16:57] <autarch> zengargoyle: thanks, fixed

[16:58] *** colomon left
[16:58] *** Begi joined
[16:58] <autarch> flussence: I kind of assumed that OO wasn't really up to the task 5 years back or else PTH would not be written the way it was

[16:58] <moritz> OO was quite usable 5 years ago

[16:58] *** abraxxa left
[16:59] <TimToady> it was usable 10 years ago if you didn't need a MOP :)

[16:59] <jnthn> Was gonna say, that was one of the earlier things to be in decent shape. :)

[16:59] <jnthn> ooh, a TimToady :)

[16:59] * TimToady hides behind a cricket

[17:00] <zengargoyle> i'm sorta less concerned about various processing methods, more about specification things at the moment.  luckily most of the hard POD stuff isn't in roast so isn't set in stone at christmas. :)

[17:00] <moritz> TimToady: uhm, 10 years ago we only had pugs, and that barely; I don't think it was very usable

[17:00] <jnthn> :)

[17:00] <TimToady> but it did OO

[17:00] <jnthn> The cricket?

[17:00] <flussence> autarch: it was more a case of refactoring itself being horrible; the only real world user we had was S26.pod, and rendering that took about half an hour

[17:00] <jnthn> oh

[17:00] * jnthn should learn to read :)

[17:01] <jnthn> TimToady: When you get to backlogging, there's a few I/O API cleanups I proposed to address 4ish RTs that you may like to glance over.

[17:02] *** xfix joined
[17:02] <zengargoyle> TimToady: and when you're not pondering something terribly important... i'd like to pick your brains on POD if you have any thoughts..

[17:02] * TimToady tries to delegate all the POD stuff :)

[17:02] <TimToady> (except insofar as it relates to syntax)

[17:04] <zengargoyle> well sorta syntax...  like it seems =finish has morphed into __DATA__ and unspecial blocks are treated as paragraphs.

[17:04] *** zacts left
[17:06] <TimToady> I'd think a __DATA__ thing should be conveyed by =data

[17:06] <TimToady> (and I've never particularly liked =finish, maybe it should be =eof)

[17:07] * zengargoyle has been meaning to write up a current implementation vs S26 doc to try and figure out what's supposed to be and what isn't.

[17:07] <zengargoyle> well spec is =finish is the same as a <<=begin pod>> that doesn't end.  implying that =finish if full of POD documentation.

[17:07] <[Coke]> messages?

[17:07] <yoleaux> 13:30Z <lizmat> [Coke]: maybe the contributor list for 2015.12 should contain *all* contributors we can cull from the git logs ?

[17:08] <TimToady> but as for reducing the impedance mismatch of Pod and various rendering engines, I haven't much of a clew, just a crew :)

[17:08] <[Coke]> lizmat: Or another sentence indicating that this is just one month and we're going on 15 years of hacking.

[17:08] <lizmat> [Coke]: so also from *way* back ?

[17:08] *** pmurias joined
[17:08] <lizmat> well, maybe both ?

[17:09] <lizmat> seems to me there are many more people on whose shoulders we are standing now that should be mentioned for 6.c

[17:09] <zengargoyle> and it seems to me that <<=unknownthing>> are useless to post-processing if they're treated like Paragraph blocks and munged/folded like regular Para.

[17:09] *** domidumont joined
[17:10] <lizmat> m: say my $ = do { 1 until 42 }   # not sure what this should say, but the current error is LTA

[17:10] <camelia> rakudo-moar e27032: OUTPUT«Cannot call method 'gist' on a null object␤  in block <unit> at /tmp/PIOFzX_vXh:1␤␤»

[17:11] <TimToady> I would not be against listing everyone who contributed to pugs/parrot/niecza as well, since we learned a great deal from those projects, and this is more of a language release than a compiler release

[17:12] *** abraxxa joined
[17:12] *** pdcawley_ left
[17:12] * TimToady prefers to err on the side of inclusiveness...

[17:13] <gtodd1> inclusiveness++

[17:13] <jnthn> +1

[17:13] <gtodd1> espcially for Christmas :-D

[17:13] *** gtodd1 is now known as gtodd

[17:13] <TimToady> and if anyone asks to have his name removed, we'll refuse :)

[17:14] <gtodd> what about tricking famous people to contribute and then including their names ? :-D

[17:15] <TimToady> well, we gave Guido a commit bit, but he never did anything with it :)

[17:15] <TimToady> well, he threw a cream pie, I guess

[17:15] <TimToady> we could thank him for that :)

[17:15] <gtodd> ha 

[17:15] <zengargoyle> maybe a case for <<=data>> in a <<=finish|end>> being like <<=finish>> in not needing termination to cover the __DATA__ usage where you can just `echo new data >> file.p6` to append.

[17:16] * jnthn bbl 

[17:16] <TimToady> how 'bout =eof pod|data|comment  where the default is comment

[17:17] <timotimo> that's ... a bit weird

[17:17] <timotimo> "end of file pod"?

[17:17] <TimToady> and =eof pod would allow a subsequent =eof data or =eof

[17:18] <TimToady> =eof <mumble> says there's only <mumble> from here to end-of-file

[17:18] <timotimo> ah ... hmm.

[17:18] <TimToady> and to the code parser, it's an effective EOF

[17:18] *** lizmat_ joined
[17:18] <zengargoyle> =pod :to<eof> ; =data :to<eof> ; =comment :to<eof>

[17:18] <timotimo> so <![a]> must also be allowed to match before \n=eof? :)

[17:19] <TimToady> =eof is just a =begin that doesn't need an end

[17:19] *** vytas left
[17:20] <timotimo> so let's call it =endless :D

[17:20] <TimToady> I don't see a need for a :to

[17:20] *** Skarsnik_ joined
[17:20] <dalek> rakudo/nom: 61ea661 | lizmat++ | src/core/Range.pm:

[17:20] <dalek> rakudo/nom: Implement Range.rand, as suggested by pmichaud++

[17:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61ea661d8d

[17:20] <TimToady> well, there are other possibilties =code =fini =owari  :)

[17:21] <zengargoyle> yeah, =eof == unclosed =begin makes sense.

[17:21] <TimToady> =終

[17:22] <dalek> rakudo/nom: c33fdac | coke++ | docs/announce/2015.12.md:

[17:22] <dalek> rakudo/nom: lizmat++'s idea of listing EVERYONE

[17:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c33fdac261

[17:23] <TimToady> er s/'code='/=coda/

[17:23] <TimToady> but I still kinda lean toward =eof

[17:23] <timotimo> why the hell doesn't =over mean the same as =eof? :P

[17:23] <zengargoyle> should <<=data Abbreviated Form␤>> include the newline when used as $=data[N]

[17:24] <JimmyZ> and repo specs? ;)

[17:24] <[Coke]> is 唐鳳 Audrey ?

[17:24] <JimmyZ> since specs is not in mu :)

[17:24] <TimToady> yes

[17:24] *** pnu left
[17:24] *** Skarsnik left
[17:24] *** lichtkind left
[17:24] *** ilbelkyr left
[17:24] <zengargoyle> and trim leading spaces or not?

[17:25] <TimToady> zengargoyle: my yes was to [Coke], dunno about your Q

[17:25] *** lichtkind joined
[17:25] *** ilbelkyr joined
[17:26] <zengargoyle> seems somewhow that =data Abbreviated/Paragraph/Block should be alike in leading space/trailing space/nl to be consistent.

[17:26] *** Skarsnik_ left
[17:27] *** skids left
[17:27] *** solarbunny left
[17:27] *** lizmat left
[17:28] <dalek> rakudo/nom: f302159 | coke++ | docs/announce/2015.12.md:

[17:28] <dalek> rakudo/nom: Add authors from Pugs

[17:28] <dalek> rakudo/nom: 

[17:28] <dalek> rakudo/nom: https://github.com/perl6/Pugs.hs

[17:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f302159964

[17:28] *** skids joined
[17:28] <zengargoyle> specs make things like <<say $=data[0]>> seem weird if ␤

[17:29] *** Skarsnik_ joined
[17:30] <zengargoyle> is kept (double newlines) but makes it consistent when using just $=data (all un-keyed data as string) 

[17:31] <zengargoyle> guess =data Abbreviated could trim leading whitespace... use =for data or =begin data if you have a problem with that.

[17:31] <Quom_> jnthn, or someone, is this right?

[17:32] <Quom_> m: NQPLock.new.protect({ nqp::say("attempting to die: "); nqp::die("...") })

[17:32] <camelia> rakudo-moar f30215: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0fDARGF9j2␤Undeclared name:␤    NQPLock used at line 1␤␤»

[17:32] <Quom_> nqp-m: NQPLock.new.protect({ nqp::say("attempting to die: "); nqp::die("...") })

[17:32] <camelia> nqp-moarvm: OUTPUT«attempting to die: ␤»

[17:32] <dalek> rakudo/nom: 35f88bd | coke++ | docs/announce/2015.12.md:

[17:32] <dalek> rakudo/nom: Add authors from niecza

[17:32] <dalek> rakudo/nom: 

[17:32] <dalek> rakudo/nom: ... that weren't already listed

[17:32] <dalek> rakudo/nom: 

[17:32] <dalek> rakudo/nom: https://github.com/sorear/niecza

[17:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/35f88bd864

[17:32] <zengargoyle> then again <<=data Bob>> <<=data Alice>> keeping the ␤

[17:32] <Quom_> The latter is the cause of https://rt.perl.org/Ticket/Display.html?id=126724

[17:32] <zengargoyle> makes simple usage a bit odd... need to chomp...

[17:34] <dalek> rakudo/nom: 8228e7e | coke++ | docs/announce/2015.12.md:

[17:34] <dalek> rakudo/nom: remove dupe author

[17:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8228e7e055

[17:35] <zengargoyle> guess <<=eof data>> would best be accessed with $=data[*-1] ?

[17:36] <zengargoyle> or maybe just $=eof since pod would get pushed to $=pod and comment would vanish..

[17:36] *** pmurias left
[17:37] *** Skarsnik_ left
[17:38] * zengargoyle sorta thinks having =data support formatting codes that include static data like A<> E<> might be cool

[17:39] *** ilbelkyr left
[17:41] *** ilbelkyr joined
[17:41] <timotimo> Quom_: good catch; do you feel confident enough to propose a patch?

[17:44] *** masak_grr is now known as masak

[17:45] <skids> WRT inclusiveness is everyone who worked on "smop" listed already?

[17:46] <dalek> rakudo/nom: 015965e | (Matthew Wilson)++ | docs/announce/2015.12.md:

[17:46] <dalek> rakudo/nom: adapt my name

[17:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/015965e7e3

[17:48] <dalek> rakudo/nom: 0de0671 | coke++ | docs/announce/2015.12.md:

[17:48] <dalek> rakudo/nom: keep sorted

[17:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0de0671c96

[17:48] <TimToady> jnthn: I may be old-fashioned, but I think of listen and connect as having positional parameters, not that we have to stick with *nix culture necessarily, but a lot of people will expect a positional interface

[17:48] *** ZoffixWeb joined
[17:49] *** espadrine left
[17:49] <ZoffixWeb> Hey check it out :) https://github.com/edebill/modulecounts/issues/29

[17:49] <diakopte1> how does one pronounce коледа

[17:49] <ZoffixWeb> And it's live already even: http://www.modulecounts.com/

[17:50] <ZoffixWeb> diakopte1: https://en.wikipedia.org/wiki/Koliada

[17:50] *** diakopte1 is now known as diakopter

[17:50] <diakopter> heh

[17:52] *** xpen joined
[17:54] *** nadim joined
[17:55] * masak .oO( I learned the pronunciation from a коллега ) :P

[17:55] *** ilbelkyr left
[17:56] * pink_mist thinks he gets that one :P

[17:56] <diakopter> [Coke]: are you named from that

[17:57] *** xpen left
[17:57] *** kid51 joined
[17:57] <TimToady> jnthn: everything else looks okay to me, don't really have a formed opinion on the print-async thing, unless maybe it should use "start" somehow instead, since we did s/async/start/ in the language

[17:57] <TimToady> start-print maybe

[17:58] *** Peter_R joined
[17:58] <TimToady> family stuff &

[17:58] *** ilbelkyr joined
[18:00] <timotimo> TimToady is stuffing his family for thanksgiving?!

[18:00] *** [ptc] left
[18:00] <diakopter> today is the day after

[18:00] <timotimo> oh, right

[18:01] *** lucasb joined
[18:01] <timotimo> thanksgiving makes me cynical

[18:03] *** [ptc] joined
[18:04] *** xfix left
[18:04] *** skids left
[18:05] *** xfix joined
[18:05] *** MadcapJake joined
[18:06] *** lucasb left
[18:06] <autarch> if I have a hash var and I want to pass that to a method that takes named ags, how does that work?

[18:07] <zengargoyle> |%whatever

[18:07] *** Peter_R left
[18:07] <moritz> autarch: obj.meth(|%hash)

[18:07] <autarch> moritz: thanks

[18:07] <autarch> what does | do?

[18:07] <zengargoyle> flatten

[18:07] <pink_mist> flattens

[18:07] *** lucasb joined
[18:08] *** skids joined
[18:08] <zengargoyle> in argument lists |% goes to named |@ goes to positional as i grok it.

[18:08] <moritz> aye

[18:09] <autarch> that makes sense

[18:10] <timotimo> and you can put named parameters after the flattening to override keys from the hash

[18:11] <jnthn> Quom_: No, that lock swallowing the exception thing looks wrong

[18:11] <autarch> how about if I have a method that takes named params and I want to pass them all on to another method? is there an equivalent of this in Perl 5 - "sub foo { my %p = @_; bar(%p) }" ?

[18:12] <autarch> specifically, I want to define a "sub MAIN" with named params that are the same as an object's constructor params

[18:14] <timotimo> you can just take *%foo as an argument

[18:14] <timotimo> then you'll end up with a hash containing all named arguments that were passed

[18:15] <autarch> timotimo: but then "script --help" isn't useful

[18:15] <autarch> I really want a Perl6 equivalent of MooseX::Getopt here

[18:15] <moritz> autarch: you can do sub f(*%x) { g(|%x) }

[18:16] <autarch> moritz: again, I need to actually name all the params for sub f here, because it's sub MAIN

[18:16] <moritz> autarch: if you want to pass on named and positional, sub f(|c) { g(|c) }

[18:17] <timotimo> will the usage be correct if you multi sub MAIN(|c, :$key, :$val) { ... }?

[18:18] *** lucasb_ joined
[18:19] *** MadcapJake left
[18:19] *** Peter_R joined
[18:19] *** skids left
[18:19] *** skids1 joined
[18:19] *** Peter_R left
[18:19] *** Peter_R joined
[18:19] *** MadcapJake joined
[18:19] *** lucasb left
[18:19] *** nadim left
[18:19] *** nadim joined
[18:19] <zengargoyle> somehow i'm remembering a problem with MAIN and slurpy... maybe i was doing it wrong at the time.

[18:21] *** skids1 left
[18:21] *** skids joined
[18:21] <lizmat_> dinner&

[18:21] *** pnu joined
[18:21] *** lizmat_ is now known as lizmat

[18:22] <[Coke]> .seen quietfanatic

[18:22] <yoleaux> I saw quietfanatic 24 Nov 2015 04:13Z in #perl6: <quietfanatic> https://twitter.com/dadgumjames/status/668999214685376512  https://twitter.com/dadgumjames/status/668999737790566400

[18:23] <[Coke]> diakopter: don't know for sure, but it's very plausible, yes. Family emigrated from Belarus and anglicized the name about 3 generations back.

[18:24] <skids> .oO(anglicide)

[18:28] *** solarbunny joined
[18:29] <dalek> rakudo/nom: f6fe538 | coke++ | docs/announce/2015.12.md:

[18:29] <dalek> rakudo/nom: add parrot authors

[18:29] <dalek> rakudo/nom: 

[18:29] <dalek> rakudo/nom: https://github.com/parrot/parrot

[18:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6fe538290

[18:29] <[Coke]> ok, that's enough of that for the moment.

[18:30] *** hankache joined
[18:35] *** colomon joined
[18:39] <autarch> what's the best API to use in order to thread no more than N operations at a time? For example, I have a list of 100 items and I want to do an operation on each with 4 threads active at a time.

[18:40] <autarch> or does the interpreter itself figure out the best number of threads to use and just DTRT?

[18:40] <timotimo> if you use "hyper" then it will, you can tell it what number of things to batch and such

[18:41] <moritz> the other method is to instantiate your own scheduler with max 4 threads

[18:41] <moritz> and then do a 'start' for each task, and the scheduler will use just those four threads

[18:42] <autarch> so something like "for @list.hyper( :batch(4)  ) -> $item { ... }" ?

[18:42] <timotimo> right

[18:42] <timotimo> i'm not sure if for just picks it up, i know it'll work with .map

[18:43] <timotimo> m: my @l = <1 2 3 4> X~ <foo bar baz>; @l.list.hyper(:4batch).map({ .say; sleep 1 });

[18:43] <camelia> rakudo-moar 0de067: OUTPUT«2bar␤3baz␤1foo␤2baz␤4foo␤1bar␤3foo␤4bar␤1baz␤3bar␤4baz␤2foo␤»

[18:43] <timotimo> m: my @l = <1 2 3 4> X~ <foo bar baz>; @l.list.hyper(:4batch).map({ .say; sleep 0.5; say "wakeup" });

[18:43] <camelia> rakudo-moar 0de067: OUTPUT«2bar␤3baz␤1foo␤wakeup␤wakeup␤4foo␤2baz␤wakeup␤1bar␤wakeup␤4bar␤wakeup␤3foo␤wakeup␤1baz␤wakeup␤4baz␤wakeup␤3bar␤wakeup␤2foo␤wakeup␤wakeup␤wakeup␤»

[18:44] <autarch> that's easy enough, thanks!

[18:45] *** abraxxa left
[18:45] *** kid51 left
[18:47] <moritz> m: my @l = <1 2 3 4> X~ <foo bar baz>; @l.list.hyper(:4batch).map({ .say; sleep 0.1; say "wakeup $_" })

[18:47] <camelia> rakudo-moar 0de067: OUTPUT«2bar␤3baz␤1foo␤wakeup 2bar␤2baz␤wakeup 3baz␤4foo␤wakeup 1foo␤1bar␤wakeup 2baz␤3foo␤wakeup 4foo␤4bar␤wakeup 1bar␤1baz␤wakeup 3foo␤3bar␤wakeup 4bar␤4baz␤wakeup 1baz␤2foo␤wakeup 3bar␤wakeup 4baz␤wakeup 2foo␤»

[18:50] *** zacts joined
[18:51] <dalek> rakudo/nom: d310001 | coke++ | docs/announce/2015.12.md:

[18:51] <dalek> rakudo/nom: don't forget these repos

[18:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d310001d8d

[18:51] <dalek> rakudo/nom: 22b4ea7 | coke++ | docs/announce/2015.12.md:

[18:51] <dalek> rakudo/nom: consolidate 2 sections of authors

[18:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22b4ea7165

[18:53] *** xpen joined
[18:53] <autarch> is it just me is it weird that IO::Spec returns plain Str instead of IO::Path for its various operations?

[18:57] <skids> ISTR Spec is supposed to let you manipulate other-os filenames, and Path is your-OS-only.

[18:57] <skids> Or something like that.

[18:58] *** xpen left
[19:02] *** domidumont left
[19:04] <autarch> skids: that's not how the docs make it seem

[19:04] <autarch> it seems like $*SPEC if your native OS and you should use

[19:04] <autarch> use it*

[19:06] <dalek> rakudo/nom: 4dd8062 | coke++ | docs/announce/2015.12.md:

[19:06] <dalek> rakudo/nom: consolidate 2 sections of authors

[19:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4dd80620d0

[19:06] <dalek> rakudo/nom: c1ad9fe | coke++ | docs/announce/2015.12.md:

[19:06] <dalek> rakudo/nom: de-asciify a name.

[19:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1ad9fe446

[19:07] *** hankache left
[19:08] *** rigsby joined
[19:10] <ugexe> m: my $s = Supplier.new; $s.Supply.act: {.say}, done => {say "done"}; $s.emit(1); $s.done;

[19:10] <camelia> rakudo-moar f6fe53: OUTPUT«1␤»

[19:10] <ugexe> m: my $s = Supplier.new; $s.Supply.tap: {.say}, done => {say "done"}; $s.emit(1); $s.done;

[19:10] <camelia> rakudo-moar f6fe53: OUTPUT«1␤done␤»

[19:12] <ugexe> .done is broken for .act

[19:14] *** nadim left
[19:15] *** zacts left
[19:15] *** nadim joined
[19:15] *** hankache joined
[19:16] <hankache> is there any plan to make the windows installer automatically add C:\rakudo\bin to the PATH?

[19:20] <ugexe> m: my $s = Supplier.new; $s.Supply.interval(1); $s.tap{.say};

[19:20] <camelia> rakudo-moar c1ad9f: OUTPUT«Invocant requires a type object of type Supply, but an object instance was passed.  Did you forget a 'multi'?␤  in block <unit> at /tmp/2KKV7iXPe9:1␤␤»

[19:21] <jnthn> ugexe: Did act ever pay attention to done?

[19:21] * jnthn checks

[19:21] <ugexe> jnthn: yeah

[19:22] <autarch> any idea why File::Temp spits out weird warnings when run in a hyper op? https://gist.github.com/autarch/a701c62a40643169913f

[19:23] *** AndyDee joined
[19:23] <autarch> I'm guessing this is some sort of low-level bug of the sort I'd prefer to let someone else figure out ;) it seems to be working even when it spits out the warning

[19:23] <jnthn> eek, wait, it did it how... :)

[19:23] <jnthn> ugexe: Fixing.

[19:26] <ugexe> m: Supplier.new.Supply.interval(1)

[19:26] <camelia> rakudo-moar c1ad9f: OUTPUT«Invocant requires a type object of type Supply, but an object instance was passed.  Did you forget a 'multi'?␤  in block <unit> at /tmp/qkgW162TtC:1␤␤»

[19:26] <ugexe> is there a different way to do supply intervals now?

[19:27] <lizmat> ugexe: Supply.interval is unchanged, afaik

[19:29] <jnthn> No, all the factor methods are still on Supply. Because they give you a Supply.

[19:29] <jnthn> It's only code that did Supply.new that needs much changing.

[19:29] <jnthn> Testing .act fix now

[19:29] <jnthn> And already written a test for it :)

[19:30] <ugexe> m: my $s = Supply.interval(1); $s.done # so how do i tell the supply im finished with it?

[19:30] <camelia> rakudo-moar c1ad9f: OUTPUT«Method 'done' not found for invocant of class 'Supply'␤  in block <unit> at /tmp/wc28_jX4n_:1␤␤»

[19:32] *** spider-mario joined
[19:32] <dalek> rakudo/nom: 6403ca0 | jnthn++ | src/core/IO/Socket/INET.pm:

[19:32] <dalek> rakudo/nom: Remove two empty methods.

[19:32] <dalek> rakudo/nom: 

[19:32] <dalek> rakudo/nom: No point in pretending we support these things, then returning Nil.

[19:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6403ca0921

[19:32] <dalek> rakudo/nom: e42b109 | jnthn++ | src/core/Supply.pm:

[19:32] <dalek> rakudo/nom: .act should support emit and done

[19:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e42b1095f8

[19:33] <jnthn> m: my $s = Supply.interval(0.5); my $tap = $s.tap({ say 42 }); sleep 2; $tap.close; sleep 2;

[19:33] <camelia> rakudo-moar c1ad9f: OUTPUT«42␤42␤42␤42␤»

[19:34] <jnthn> ugexe: That's the right way to turn things off. Calling .done to "inject" a message into the stream owned by another supply was never really an intended feature. In the case of doing it with an interval, you'd leak the timer and it'd go on emitting values to nowhere forever.

[19:35] <dalek> roast: 64f7ee4 | jnthn++ | S17-supply/act.t:

[19:35] <dalek> roast: Test :done argument to act.

[19:35] <dalek> roast: review: https://github.com/perl6/roast/commit/64f7ee45d7

[19:43] *** zakharyas joined
[19:44] <zengargoyle> hrm... adding «dd $tempfile;» in File::Temp gives interesting error: *** Error in `/opt/rakudobrew/moar-nom/install/bin/moar': double free or corruption (fasttop): 0x0000000005dab9a0 ***

[19:44] *** hankache left
[19:44] <dalek> rakudo/nom: d091ca8 | coke++ | docs/announce/2015.12.md:

[19:44] <dalek> rakudo/nom: add nqp authors & use sane temp format

[19:44] <dalek> rakudo/nom: 

[19:44] <dalek> rakudo/nom: Put each author on a line; otherwise our sort contortions are insane.

[19:44] <dalek> rakudo/nom: 

[19:44] <dalek> rakudo/nom: We'll combine this into a single list as part of the release, and can

[19:44] <dalek> rakudo/nom: now easily sort and add more as we go.

[19:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d091ca8ba6

[19:45] <zengargoyle> $tempfile is correct '"**********' for first 4 dd's, then the Use of Nil error followed by the moar Error.

[19:48] <zengargoyle> $tempfile is set in tempdir() signature: tempdir($tmpl? = '*' x 10, ..., :$template = $tmpl)

[19:48] * [Coke] hopes he didn't too eagerly turn github nicks into names.

[19:48] <zengargoyle> maybe that isn't getting done correctly when hypering...

[19:50] <zengargoyle> setting $template outside of signature makes it get the Nil warning less often and sorta randomly and someties warning is incomplete...

[19:50] * zengargoyle dunno

[19:53] *** _mg_ joined
[19:54] <ugexe> thats a lot of dependence on side effects

[19:54] <ugexe> and order

[19:55] <zengargoyle> sometimes the $/.chars is returning 0.  looks like the: $tempfile ~~ s/ '*' ** 4..* /{ dd $/.chars; @filechars.roll($/.chars).jo

[19:55] <ugexe> without looking at it i would wonder how it knows it can use a specific file name if you are using it in a hyper where the side effect order isnt guarenteed and thus any checks for file existence arent guarenteed to occur when you think they would if the effects were executed in order

[19:56] <zengargoyle> the file is created with open ... :rw, :exclusive which should be atomic.  if that fails it trys again.

[19:57] <zengargoyle> if that somehow maps down to the system level open O_RW|O_WHATEVER ...

[19:58] <ugexe> https://github.com/perlpilot/p6-File-Temp/blob/master/lib/File/Temp.pm#L17

[20:00] <zengargoyle> that the next if $name.IO ~~ :e line?  don't see an issue there, probably could be left out and just let the open fail.

[20:02] <zengargoyle> seems it's just sometimes... $tempfile = '*' x 10; $tempfile ~~ s/ '*' ** 4..* /{ dd $/.chars; @filechars.roll($/.chars).jo

[20:02] <zengargoyle> seems it's just sometimes... $tempfile = '*' x 10; $tempfile ~~ s/ '*' ** 4..* /{ dd $/.chars; @filechars.roll($/.chars).join }/; # bah cut-n-paste

[20:03] <zengargoyle> $/.chars is 0 instead of 10....

[20:03] <zengargoyle> when it should always be 10 assuming defaults

[20:04] <jnthn> Hmm, https://rt.perl.org/Ticket/Display.html?id=126315 is curious

[20:04] <jnthn> It claims that Moar sits in a loop when reading from sockets, but in fact it seems it only does one read.

[20:05] <zengargoyle> dd [ $tempfile, $/.chars ]; # should not be: Array $var = $["**********", 0]

[20:05] <dalek> modules.perl6.org/new-db-builder: 8f6564e | (Zoffix Znet)++ | lib/ModulesPerl6/ (9 files):

[20:05] <dalek> modules.perl6.org/new-db-builder: Use Mew instead of Moo/Mojo::Base for consistency and more concise code

[20:05] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/8f6564ed0c

[20:06] <zengargoyle> seems regex / $/ is borkded over hyper.

[20:07] <zengargoyle> wtf? : Array $var = $["PB_rmld5ng", 0]

[20:08] <zengargoyle> that looks like $template from another thread *after* substitution happened..

[20:13] <zengargoyle> pretty much at the end of my diagnostic abilities.  put «dd [$template,$/.chars]» inside the replacement block of File/Temp.pm:15 or on the next line and you can see that things aren't always what they should be.

[20:13] *** nadim left
[20:16] <ugexe> jnthn: is there still a way to emit into the Proc::Async supplies without access to the Supplier itself? ie. `my $proc = Proc::Async.new("ls"); $proc.stdout.tap: {.say}; $proc.stdout.emit("xxx");`

[20:16] <autarch> zengargoyle: sounds like threading is a little buggy here - which is sad/scary because by threading the docsite generation I could make it _way_ faster

[20:16] *** zakharyas left
[20:17] *** nadim joined
[20:18] <timotimo> zengargoyle: you may want to give your multi-threaded code your own $/ variable?

[20:19] <jnthn> ugexe: No, you'll need to explicitly do it with .merge or so now

[20:19] <zengargoyle> m: sub foo() { my $x = "*" x 2; $x ~~ s/ "*" ** 1..* /{ "+" x $/.chars }/; $x}; (1..100).map({say foo});

[20:19] <camelia> rakudo-moar d091ca: OUTPUT«++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤+…»

[20:19] <timotimo> otherwise it may happen that multiple things share the same $/ scalar and that's bad

[20:19] <jnthn> ugexe: What's the use case, ooc?

[20:19] <zengargoyle> m: sub foo() { my $x = "*" x 2; $x ~~ s/ "*" ** 1..* /{ "+" x $/.chars }/; $x}; (1..100).hyper.map({say foo});

[20:19] <camelia> rakudo-moar d091ca: OUTPUT«++␤++␤++␤++␤++␤Use of Nil in string context++␤++␤++␤++␤++␤++␤  in block  at /tmp/CWKir_YoI3:1␤++␤␤++␤++␤++␤++␤++␤++␤++␤Use of Nil in string context++␤++␤++␤  in block  at /tmp/CWKir_YoI3:1␤␤++␤Use of Ni…»

[20:19] <zengargoyle> timotimo: not my code :)

[20:19] <timotimo> k

[20:19] <zengargoyle> is File::Temp

[20:20] <ugexe> jnthn: stdmuxing. i prefix every line from multiple processes with their file name to differentiate the otherwise jumbled lines from multiple process output

[20:20] <ugexe> every stdout line^

[20:20] <ugexe> er no sorry, thats a different thing. this is just for outputting the command that Proc::Async executed

[20:21] <zengargoyle> the previous seems to be a minimal test case... considering randomness of failure.

[20:21] <ugexe> so everytime Proc::Async starts, it would .emit('perl6 -Ilib some-cmd') to show what was ran

[20:21] <timotimo> m: sub foo() { my $/; my $x = "*" x 2; $x ~~ s/ "*" ** 1..* /{ "+" x $/.chars }/; $x}; (1..100).hyper.map({say foo});

[20:21] <camelia> rakudo-moar d091ca: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $/␤    at /tmp/Ks3yjL26N6:1␤    ------> 3sub foo() { my $/7⏏5; my $x = "*" x 2; $x ~~ s/ "*" ** 1..* ␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++␤++…»

[20:21] <jnthn> ugexe: Hm, so you really want a supply concat.

[20:21] <timotimo> hm, so it already has its own $/?

[20:21] <jnthn> m: Supply.concat

[20:21] <camelia> rakudo-moar d091ca: OUTPUT«Method 'concat' not found for invocant of class 'Supply'␤  in block <unit> at /tmp/D2haGCSBYT:1␤␤»

[20:21] <timotimo> yeah, because it's a sub

[20:21] <jnthn> Which we should have but don't.

[20:22] <ugexe> ah yeah

[20:22] <jnthn> I'll implement it, once I'm done writing tests for socket read vs recv... :)

[20:22] <jnthn> I fixed a nasty Proc::Async bug earlier today also, that could cause occasional data loss.

[20:24] <zengargoyle> should i rakudobug that?

[20:24] <jnthn> zengargoyle: Yes, that's a really nice golf of it

[20:24] <jnthn> I can guess what it might be too

[20:27] *** TEttinger joined
[20:31] *** nadim left
[20:32] <zengargoyle> RT #126752

[20:38] <dalek> roast: 647468a | jnthn++ | S32-io/socket-recv-vs-read.t:

[20:38] <dalek> roast: Tests for semantics of read and recv on sockets.

[20:38] <dalek> roast: review: https://github.com/perl6/roast/commit/647468af7a

[20:39] <dalek> rakudo/nom: 8430b22 | jnthn++ | t/spectest.data:

[20:39] <dalek> rakudo/nom: Run S32-io/socket-recv-vs-read.t.

[20:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8430b22cbf

[20:40] *** nadim joined
[20:41] *** p6curious joined
[20:43] <MadcapJake> I have a working linter plugin for Atom https://github.com/MadcapJake/linter-perl6

[20:43] <autarch> does anyone have an example of how Supply and Scheduler interacts in some real code?

[20:44] <MadcapJake> It needs more errors supported.  I could really use some help with this as I don't really know how to trigger many of the errors in rakudo/src/core/Exception.pm

[20:47] <moritz> MadcapJake: have you loooked into t/spec/S32-exceptions/misc.t ?

[20:47] <moritz> MadcapJake: it contains a great many examples

[20:47] <moritz> MadcapJake: also, the docs at doc.perl6.org often include examples of how to provoke each error

[20:47] <moritz> (though the tests are more comprehensive)

[20:48] <MadcapJake> moritz: where is that spec file in perl6/spec or perl6/roast repo?

[20:48] *** ZoffixWeb left
[20:48] <moritz> MadcapJake: perl6/roast in S32-exceptions/misc.t

[20:51] <moritz> the other way round :-)

[20:51] <lizmat> jnthn: if I find more problems in the SPW slides, should I still let you know ?

[20:52] *** nadim left
[20:52] <jnthn> lizmat: yes, but maybe collect them and mail them to me

[20:52] <lizmat> yup, will do

[20:52] <lizmat> nits like .WHAT    # Str  instead of (Str)

[20:52] <lizmat> that kinda stuff

[20:54] <MadcapJake> moritz: how do i read these throws-like statements? just copying into a file, I'm not getting any syntax errors printed (it has to be something caught by `perl6 -c`)

[20:55] <MadcapJake> i even tried placing a block of em into a `BEGIN` block

[20:56] <MadcapJake> wait nvm, I am getting something

[20:57] <MadcapJake> no, that's incorrect, I am *not* getting something xD

[20:57] <timotimo> MadcapJake: can you put up a screenshot or two? :)

[20:57] <MadcapJake> yeah sure!

[20:57] <timotimo> mhhh

[20:57] <timotimo> i don't have a tom

[20:57] <moritz> MadcapJake: for example throws-like 'my $a::::b', X::Syntax::Name::Null;

[20:58] <moritz> MadcapJake: means that the string   my $a::::b  as a program will throw an exception of type X::Syntax::Name::Null

[20:58] <moritz> m: my $a::::b

[20:58] <camelia> rakudo-moar 8430b2: OUTPUT«5===SORRY!5=== Error while compiling /tmp/djtjXD5o6D␤Name component may not be null␤at /tmp/djtjXD5o6D:1␤------> 3my $a::7⏏5::b␤»

[20:58] <moritz> m: try EVAL 'my $a::::b'; say $!.^name

[20:58] <camelia> rakudo-moar 8430b2: OUTPUT«X::Syntax::Name::Null␤»

[20:58] <zengargoyle> not sure if -c will get you exceptions in all cases...

[20:58] <MadcapJake> sweet! what's the third paremeter mean? e.g., `throws-like { Buf.new().Str }, X::Buf::AsStr, method => 'Str';;`

[20:59] *** bitmap left
[20:59] <moritz> MadcapJake: that's more criteria for which we test the exception

[20:59] <moritz> MadcapJake: in this case, that $!.method eq 'Str'

[21:00] *** bitmap joined
[21:01] *** yqt joined
[21:03] <MadcapJake> timotimo: https://twitter.com/MadcapJake/status/670346844761751552

[21:03] <jnthn> MadcapJake: Wow! :D

[21:03] <MadcapJake> Right now it just catches X::Syntax::Confused, X::Undeclared, X::Undeclared::Routine, and X::Parameter::Twigil, but I'm working on a generic one

[21:04] <timotimo> neat

[21:04] <jnthn> MadcapJake: btw, did you see the highlighter issues I mentioned a few days back?

[21:04] <MadcapJake> oh no, i missed it! what is it?

[21:05] <jnthn> http://irclog.perlgeek.de/perl6/2015-11-21#i_11578807

[21:05] *** Skarsnik joined
[21:05] <autarch> does this look like the correct pattern to iterate over an array of items with a fixed number of threads? https://gist.github.com/autarch/5ddae1da5bce447d45f4

[21:07] <dalek> rakudo/nom: b2e6ca0 | jnthn++ | src/core/IO/Socket/Async.pm:

[21:07] <dalek> rakudo/nom: Change IO::Socket::Async reading API.

[21:07] <dalek> rakudo/nom: 

[21:07] <dalek> rakudo/nom: To bring it inline with IO::Handle. You now just .Supply for chars,

[21:07] <dalek> rakudo/nom: and .Supply(:bin) for bytes. Deprecations will be short lived, but

[21:07] <dalek> rakudo/nom: may help somebody in the coming days.

[21:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b2e6ca0150

[21:07] <dalek> roast: cfd61e5 | jnthn++ | S32-io/IO-Socket-Async.t:

[21:07] <dalek> roast: Chase API changes.

[21:07] <dalek> roast: review: https://github.com/perl6/roast/commit/cfd61e58ac

[21:08] <ugexe> sweet, i hated bytes-supply/chars-supply

[21:08] <autarch> it does seem to be working if I print out each item that is tapped - they're not in the original order which suggests that they're getting threaded

[21:09] *** kid51 joined
[21:09] <MadcapJake> jnthn: thanks for putting it through the wringer! I'll get cracking on these right now. What did you mean by `And emit took.`? http://irclog.perlgeek.de/perl6/2015-11-21#i_11578814

[21:10] <jnthn> oops

[21:10] <jnthn> "And emit too"

[21:10] <MadcapJake> ohhh lol

[21:10] <moritz> on an unrelated note, I finally managed to patch a bug for $work that I simply couldn't leave be before the weekend (took me to 10pm)

[21:10] <jnthn> MadcapJake: emit/done are keywords

[21:11] <jnthn> moritz: Eww. And congrats for nailing it.

[21:11] <MadcapJake> alright! I'll get them added in as well.

[21:11] *** rindolf left
[21:11] *** vendethiel joined
[21:13] <timotimo> moritz: damn, that sucks :(

[21:13] <diakopter> moritz++ # congrats, by 10 pm only!

[21:16] *** espadrine joined
[21:21] <moritz> it was one of these "the fix is just around the corner", but the fix breaks something else, in several iterations

[21:24] *** cdg left
[21:26] <ugexe> star: my constant CAN-TEST = (try require Test) // False; say CAN-TEST

[21:26] <camelia> star-m 2015.09: OUTPUT«True␤»

[21:26] <ugexe> m: my constant CAN-TEST = (try require Test) // False; say CAN-TEST

[21:26] <camelia> rakudo-moar b2e6ca: OUTPUT«False␤»

[21:26] <ugexe> which behavior is correct?

[21:33] <ugexe> m: say (try require Test); say (try require TestXXX);

[21:33] <camelia> rakudo-moar b2e6ca: OUTPUT«(Test)␤Nil␤»

[21:33] *** Sgeo joined
[21:33] *** _mg_ left
[21:33] <ugexe> m: say (try require Test) // False

[21:33] <camelia> rakudo-moar b2e6ca: OUTPUT«False␤»

[21:34] <ugexe> i dont understand that

[21:35] <moritz> first of all, require always returns something undefined, so // False at the end just confuses you

[21:35] <moritz> second, FROGGS++ patched require to return the required type, but that wasn't very long ago

[21:35] <moritz> certainly after star 2015.09

[21:36] <ugexe> yes, it happened sometime in the last week or so

[21:36] <moritz> commit 95558bb58e4f7ad47153c0b9c3f6e4e6f0179f5d

[21:36] <moritz> Author: Tobias Leich [email@hidden.address]
[21:36] <moritz> Date:   Sat Nov 21 21:54:07 2015 +0100

[21:36] <moritz> make "require PAKAGE/STRING" return said PACKAGE/STRING

[21:36] *** kjs_ joined
[21:37] <dalek> rakudo/nom: c542888 | jnthn++ | src/core/IO/Socket/INET.pm:

[21:37] <dalek> rakudo/nom: Give IO::Socket::INET connect/listen methods.

[21:37] <dalek> rakudo/nom: 

[21:37] <dalek> rakudo/nom: For convenience and consistenty with IO::Socket::Async.

[21:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c542888154

[21:37] <dalek> roast: 22c6057 | jnthn++ | S32-io/IO-Socket-INET. (2 files):

[21:37] <dalek> roast: Test .connect/.listen on IO::Socket::INET.

[21:37] <dalek> roast: review: https://github.com/perl6/roast/commit/22c6057b2b

[21:38] <MadcapJake> What is `<?{ ... }>` in a regex? Is it a multiline block of regular perl6 code?

[21:39] <TimToady> it's evaluated as a zero-width assertion

[21:39] <TimToady> <!{...}> is the negative assertion

[21:39] <jnthn> But yes, it's Perl 6 code inside the block.

[21:39] <TimToady> that returns something with a boolean interpretation, which is almost anything

[21:40] <MadcapJake> cool, I don't think I was capturing either of those (or least it isn't working currently).

[21:40] <lucasb_> moritz, ugexe: can't I use require in a runtime expression?

[21:40] <lucasb_> m: say require Test

[21:40] <camelia> rakudo-moar b2e6ca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/o8WrIHQdll␤Undeclared name:␤    Test used at line 1␤Undeclared routine:␤    require used at line 1␤␤»

[21:40] <lucasb_> m: say do { require Test }

[21:40] <camelia> rakudo-moar b2e6ca: OUTPUT«(Test)␤»

[21:40] <ugexe> m: say "ok" if (try require Test) ~~ ::("Test") # this newer way seems cumbersome

[21:40] <MadcapJake> jnthn: thanks for the mention of this grammar.nqp file, lots of things to fix in there!

[21:40] <camelia> rakudo-moar b2e6ca: OUTPUT«ok␤»

[21:41] *** kjs_ left
[21:41] <jnthn> MadcapJake: Yes, the grammar for Perl 6 itself is a rather good stress test. ;-)

[21:42] *** kjs_ joined
[21:42] <moritz> m: say do require Test;

[21:42] <camelia> rakudo-moar b2e6ca: OUTPUT«(Test)␤»

[21:42] <moritz> no need for braces

[21:43] <lucasb_> I just didn't understand why plain 'say require Test' sees Test as a subname

[21:44] <MadcapJake> jnthn: Atom takes a couple seconds to render all of it on my machine! I'm actually quite pleased with that, I wrote a grammar for an indentation-blocked language and it takes 5-10 seconds for files half as big as grammar.nqp

[21:45] <lucasb_> oh, 'require' is a statement, not an expression... right? so it can't be used in an expression context... ?

[21:46] <moritz> right

[21:47] <moritz> and 'do' turns statements into expressions

[21:48] *** ZoffixMobile joined
[21:49] <jnthn> Down to 27 xmas RTs. :)

[21:49] <ZoffixMobile> MadcapJake, isn't your linter kinda dangerous? BEGIN { *delete wrong dir by mistake* }

[21:49] <ZoffixMobile> jnthn++ sweet!

[21:49] <MadcapJake>  ZoffixMobile: yes I guess it is! Is there any way I can make it safer? Or should I put a warning or something?

[21:50] <pink_mist> have it in a restricted setting?

[21:50] <ZoffixMobile> MadcapJake, no fix that I know of. I had a similar problem in P5's Test::Synopsis

[21:50] <jnthn> Restricted setting may do it, in the longer run we'll want something to enforce such things VM-level.

[21:53] *** zacts joined
[21:53] *** lucasb_ left
[21:54] <MadcapJake> pink_mist: how do I do that?

[21:54] *** ZoffixMobile left
[21:54] <pink_mist> ¯\(°_o)/¯

[21:55] *** xpen joined
[21:56] <pink_mist> MadcapJake: I don't actually know perl 6 .. I just follow along with things mentioned in here so I've heard of stuff that's useful :P

[21:57] <MadcapJake> seems I would add `--settings=RESTRICTED` as a command line flag, is that accurate jnthn?

[21:57] <timotimo> yeah, something like that

[21:58] <MadcapJake> cool, that's a simple fix then

[22:00] *** xpen left
[22:02] <jnthn> I think just --setting

[22:02] *** nadim joined
[22:02] <jnthn> uh, --setting=RESTRICTED

[22:02] <jnthn> (not settings plural)

[22:03] <timotimo> ah

[22:03] <timotimo> i didn't see that little s there

[22:03] <jnthn> :)

[22:04] * jnthn realies that for the first time, we have less xmas RTs than we have days from now until Christmas day :)

[22:04] <Zoffix> woohoo \o/

[22:04] <jnthn> *realizes

[22:04] <Zoffix> *fewer :P

[22:04] *** kjs_ left
[22:05] <jnthn> :P

[22:06] * jnthn just can't instinctively feel that distinction

[22:08] <colomon> \o/

[22:08] <Zoffix> jnthn, if it's countable, then it's fewer :) 

[22:09] *** Begi left
[22:09] <colomon> if it’s uncountable, it’s less?  ;)

[22:09] *** vendethiel left
[22:10] <skids> .oO(less mess, fewer sewers)

[22:11] <colomon> fewer rationals, less irrationals?

[22:11] <Zoffix> fewer eggs and less milk, yes :)

[22:12] <Zoffix> Time to go offline to drink beer and be productive hacking on stuff :) \o have a good night

[22:12] *** Zoffix left
[22:13] *** vendethiel joined
[22:13] <jnthn> .oO( maybe I should drink less beers...oh wait... )

[22:13] <pink_mist> isn't it like this: "we have few RTs left" so -> fewer ... vs "we have little milk left" so -> less

[22:13] <jnthn> pink_mist: Yes. :)

[22:13] *** p6curious left
[22:14] <jnthn> pink_mist: For some reason, there's a bunch of cases where my brain doesn't feel like it wants to make the distinction, so I have to conciously think about it. Which at 11pm on IRC isn't that likely to happen. :)

[22:15] <pink_mist> right :P

[22:15] *** molaf left
[22:15] <jnthn> I wonder if it's partly dialect or something, and that I grew up around folks not caring about the distinction much.

[22:15] <jnthn> It's also one way; "I should drink fewer beer" sounds obviously wrong to me. :)

[22:16] <timotimo> "we are the borg. your distinctiveness will be added to our species" - "nope, no distinctiveness to be found here!"

[22:16] <pink_mist> well, beer is uncountable there ... 'beers' is countable though :P

[22:17] * jnthn remembers a local supermarket making the news for putting up a sign by a checkout lane reading "10 items or less" :)

[22:17] <huf> the distinction doesnt *really* exist

[22:17] <huf> and never has

[22:17] <huf> but it got entrenched as a thing so people worry about it

[22:18] <pink_mist> doesn't "it got entrenched as a thing" imply it now does exist? =)

[22:18] <pink_mist> language does change

[22:18] <huf> but not as an actual rule. just as a rule people think is a rule.

[22:18] <autarch> jnthn: are you taking nominations for things to add to the christmas list?

[22:18] <huf> some people obey it more than others, sure

[22:19] <pink_mist> huf: who decides which rules are 'actual'? 0_o

[22:20] <huf> the fact that people so often get it "wrong" decides

[22:20] <pink_mist> I want to tipi his house

[22:20] <jnthn> autarch: I'm trying to keep it as something we might realistically make it through. :)

[22:20] <autarch> https://rt.perl.org/Ticket/Display.html?id=124393 is my nomination

[22:21] <jnthn> autarch: The criteria is "semantic issue" and "we won't be able to easily fix it after 6.c"

[22:21] <autarch> hmm, probably doesn't qualify - it's just _really_ annoying but since it makes certain things impossible it won't cause anyone to do something that a fix will break later

[22:22] *** xfix left
[22:23] <jnthn> It's certainly substantive and worth considering.

[22:23] <jnthn> At some point, I need to do a pass through the RTs opened since I made the xmas list.

[22:24] <jnthn> Part of the consideration is "do we actually have the ability to do anything about this before 6.c"

[22:24] <jnthn> For this one it may be possible to deal with with relatively little work, which also helps.

[22:24] *** nmp left
[22:24] <jnthn> Anyway, will consider it.

[22:25] <autarch> can someone explain what this error means - This Seq has already been iterated, and its values consumed

[22:25] <jnthn> A Seq is a one-shot source of values; that error shows up if you try to use it twice

[22:25] <autarch> I'm really sure I haven't used it!

[22:26] <jnthn> m: my @a = gather { .take for ^10 }; for @a { }; for @a { } # this is fine because list assignemnt copies into the array

[22:26] <camelia> rakudo-moar c54288: ( no output )

[22:26] <jnthn> m: my \a = gather { .take for ^10 }; for a { }; for a { } # this isn't

[22:26] <camelia> rakudo-moar c54288: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/MrqEHZm7oM:1␤␤»

[22:26] <autarch> I'm calling .Supply on a variable, but I only do it once

[22:27] <jnthn> Got an isolated exaple?

[22:27] <jnthn> *example

[22:27] <jnthn> m: my \a = gather { .take for ^10 }; a.Supply.tap(&say)

[22:27] <camelia> rakudo-moar c54288: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[22:28] <autarch> jnthn: no, I'm having a hell of a time making one

[22:28] *** cognominal left
[22:28] <autarch> m: my %h = (:a(42)); %h.pairs.Supply.tap(&say)

[22:28] <camelia> rakudo-moar c54288: OUTPUT«a => 42␤»

[22:28] <autarch> that's comparable to what I'm doing and of course it works there ;)

[22:29] <nine_> So there's some detail that's different and important

[22:29] <skids> Maybe there's an element being flattened that is a used-up Seq?

[22:29] <autarch> aha, it's probably because I have $items.elems before I have $item.Supply?

[22:29] <jnthn> nine_: How's things with the curi branch?

[22:29] <jnthn> autarch: Yes

[22:29] <nine_> autarch: it's easy to use up a Seq by accident. Debug output is one way :)

[22:29] <skids> That'd do it.

[22:30] <autarch> so what's the solution here?

[22:30] <jnthn> But .cache on the end of the expression that gives you the Seq

[22:30] <jnthn> *Put

[22:30] <nine_> jnthn: having a look at the tests. There's some failures that disappear when I run the files manually. Spectest output is still not verbose enough to be useful :/

[22:31] <jnthn> nine_: Urgh, ok.

[22:31] *** telex left
[22:31] <nine_> It's hard to say if it's curli that's at fault. Haven't had a clean spectest in a long while :(

[22:32] <autarch> ok, looks like .cache did the trickl

[22:32] *** david_cassel joined
[22:32] <autarch> maybe the error message could recommend that?

[22:32] <jnthn> Yes, nice idea

[22:32] *** telex joined
[22:34] <nine_> I'm doing a run with TEST_JOBS=1. Seems to be the only way to get the full output. Will be interesting if the failures are still there.

[22:34] * jnthn wonders how to word it

[22:36] <nine_> "A Seq is a one-shot source of values. Use .cache or assign to an array to re-use to be able to re-use the values."

[22:36] <pink_mist> s/to re-use //

[22:37] <pink_mist> (the first 'to re-use' that is)

[22:37] <dalek> modules.perl6.org/new-db-builder: 216d712 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source/GitHub.pm:

[22:37] <dalek> modules.perl6.org/new-db-builder: Add docs for ModulesPerl6::DbBuilder::Dist::Source::GitHub

[22:37] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/216d7121c9

[22:37] <nine_> pink_mist: of course :)

[22:37] <dalek> rakudo/nom: fec2b52 | jnthn++ | src/core/Exception.pm:

[22:37] <dalek> rakudo/nom: Add suggestion of .cache to Seq consumed error.

[22:37] <dalek> rakudo/nom: 

[22:37] <dalek> rakudo/nom: autarch++

[22:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fec2b5226d

[22:37] <jnthn> Mentioned the array option too

[22:37] <jnthn> Feel free to wordsmith it

[22:38] <jnthn> Time for me to get some rest :)

[22:38] <autarch> it'd be nice to find a way to say that "if you call methods like .X or .Y you have already exhausted the sequence"

[22:40] *** rvchangue left
[22:40] <nine_> autarch: or just a link to the documentation

[22:40] <autarch> nine_: yeah, that could work too

[22:40] <autarch> I think a lot of this is just that I don't understand Array vs List vs Seq very well (at all?) in Perl 6

[22:41] *** rvchangue joined
[22:42] <skids> "Values already iterated from this Seq are gone... maybe you wanted to .cache them for re-use as a List, or assign them to an array?"

[22:43] *** b2gills joined
[22:44] <RabidGravy> gosh I appear to have soundcloud OAuth working, still a pain in the arse to test though

[22:44] *** cognominal joined
[22:46] *** cognominal left
[22:52] *** kaare_ left
[22:59] <MadcapJake> what are the postcircumfix parentheses on this non-captured group doing: <.malformed("$*SCOPE (did you mean to declare a sigilless \\{~$<ident>} or \${~$<ident>}?)")>

[23:00] <skids> passing the args to the rule.

[23:01] <MadcapJake> but i thought the `.` made it an uncaptured group?

[23:01] <skids> Right, but that does not mean the rule does not get called.

[23:01] <MadcapJake> oh ok, but rules like that can take arguments then eh?

[23:02] <skids> Yes they are essentially subs/methods.

[23:02] <MadcapJake> good to know, thanks skids!

[23:05] *** cognominal joined
[23:09] *** BenGoldberg_ joined
[23:16] *** uruwi left
[23:16] *** cognominal left
[23:21] *** pecastro joined
[23:30] *** Guest77425 is now known as parisba_

[23:32] *** xpen joined
[23:37] *** xpen left
[23:37] *** kjs1 joined
[23:41] *** rurban left
[23:42] <dalek> doc: 8d3c195 | (Wenzel P. P. Peppmeyer)++ | doc/Language/containers.pod:

[23:42] <dalek> doc: mention sigilless variables and 'is raw' for binding

[23:42] <dalek> doc: review: https://github.com/perl6/doc/commit/8d3c1952b3

[23:42] <dalek> doc: fe4b4a1 | (Wenzel P. P. Peppmeyer)++ | doc/Language/containers.pod:

[23:42] <dalek> doc: mention and provide example for Proxy in Containers

[23:42] *** dalek left
[23:43] *** dalek joined
[23:43] *** ChanServ sets mode: +v dalek

[23:47] *** spider-mario left
[23:47] *** d4l3k_ joined
[23:48] * diakopter cackles wildly at `purl` being listed as a contributor

[23:49] *** d4l3k_ left
[23:49] *** dalek left
[23:49] *** pnu left
[23:52] *** b2gills left
[23:53] *** kjs1 left
[23:55] *** dalek joined
[23:55] *** ChanServ sets mode: +v dalek

[23:55] *** dalek left
[23:57] *** solarbunny left
[23:57] *** BenGoldberg joined
[23:57] *** RabidGravy left
[23:57] *** lichtkind left
[23:58] <lizmat> diakopter: I'm afraid the humour of 'purl' being listed as a contributor is lost on me

[23:58] <lizmat> diakopter: would you care to elaborate ?

[23:58] *** yqt left
[23:58] *** yqt joined
[23:59] *** BenGoldberg_ left
[23:59] <diakopter> I thought purl was a bot

[23:59] *** dalek joined
[23:59] *** ChanServ sets mode: +v dalek

