[00:01] *** tokuhiro_ joined
[00:05] *** tokuhiro_ left
[00:06] <dalek> rakudo/nom: a275685 | hoelzro++ | docs/announce/2015.09.md:

[00:06] <dalek> rakudo/nom: Fix release announcement typo

[00:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a275685af4

[00:10] *** cognominal left
[00:11] *** telex left
[00:11] *** telex joined
[00:13] *** telex left
[00:14] *** telex joined
[00:20] *** telex left
[00:21] *** telex joined
[00:23] *** aborazmeh left
[00:24] *** araujo_ joined
[00:25] *** araujo left
[00:28] *** pochi joined
[00:30] <flussence> has anyone tried to implement The Algorithm in p6 yet? https://html.spec.whatwg.org/multipage/syntax.html#parsing

[00:30] <flussence> (I've made a start on section 12.5...)

[00:32] *** adu left
[00:39] *** sufrostico joined
[00:45] *** laouji joined
[00:51] *** AlexDaniel left
[00:52] <tony-o> its mostly in html parsee xml with the exception of script execution

[00:53] *** aborazmeh joined
[00:53] *** aborazmeh left
[00:53] *** aborazmeh joined
[00:59] *** tokuhiro_ joined
[01:02] *** mr-foobar left
[01:03] *** kernel joined
[01:03] <flussence> this module code scares me, it looks eerily similar to one I wrote in PHP years ago, tag-closing stuff and all...

[01:03] <flussence> (probably works better than mine, mind.)

[01:03] *** kernel is now known as Guest22461

[01:05] *** lichtkind left
[01:06] *** araujo__ joined
[01:08] <flussence> I take that back, mine was way harder to read :(

[01:09] *** araujo_ left
[01:12] *** telex left
[01:12] *** telex joined
[01:13] *** prevost joined
[01:28] *** vendethiel joined
[01:42] *** adu joined
[01:45] *** mr-foobar joined
[01:51] <psch> gosh

[01:51] <psch> finally

[01:51] <psch> $ ./perl6-j --ll-exception -e'say grep { True }, %(a => 1, b => 2).pairs'

[01:51] <psch> (b => 2 a => 1)

[01:52] <psch> now just run a few test files and then commit and then sleep :P

[01:52] *** vendethiel left
[01:52] *** sufrostico left
[01:55] *** maverick87 joined
[01:56] <psch> aww shugs

[01:56] <psch> it doesn't actually *really* work

[01:56] <psch> the patch that is

[01:56] * psch shrugs and goes to bed

[02:02] *** telex left
[02:03] <adu> what's "The Algorithm"?

[02:03] *** telex joined
[02:06] <adu> if I were writing a browser, I would make document.write evaluate to "undefined"

[02:09] * [Coke] just realized he's never seen weird al and larry wall in the same room.

[02:13] <flussence> /o\

[02:13] <japhb> [Coke]: For some reason, that thought makes me want to listen to Word Crimes

[02:15] <flussence> and, adu: that megabyte-long subsection of the HTML spec is The Algorithm. 25 years of parsing mistakes codified in one massive document.

[02:15] *** perlawhirl joined
[02:16] <adu> pretty verbose

[02:16] <adu> [Coke]: lolol

[02:18] <flussence> I've seen one implementation of a draft version of it, a 6000 line file. I think it's grown significantly since then...

[02:21] *** stanrifkin_ joined
[02:22] *** stanrifkin_ left
[02:26] <ShimmerFairy> how do you set stuff for the :auth<> field? There's nothing about META6.json that would set it.

[02:30] <flussence> that's a good question... I just try to manually keep mine consistent with what goes in %.<support><source>.

[02:37] <ugexe> http://design.perl6.org/S22.html#auth ?

[02:38] <ShimmerFairy> ugexe: that part doesn't describe META6.json, though

[02:38] <ShimmerFairy> (that's just a section describing terminology, not offering anything about how stuff works yet)

[02:39] <ugexe> i see. i think the majority of modules simply do "auth" : "github:username"

[02:39] <ShimmerFairy> that's not spec though, so I can't do that :)

[02:40] <ugexe> probably half of s22 isnt up to spec

[02:40] <ugexe> er, rakudo

[02:41] <ShimmerFairy> Point is, I'll need to hear from the people who know about modules before I just blindly throw in an "auth" field :)

[02:42] <ugexe> rakudo will set it for you spec or not for instance (from author and authority). no emulates/supercedes, .content, excludes, %*RESOURCE, hooks/

[02:42] <ugexe> well i would consider myself one of those people

[02:44] <ShimmerFairy> well, AFAIK it's lizmat and FROGGS who've done a lot of work on modules in P6.

[02:45] <ugexe> who do you think is 3rd after them?

[02:46] <ugexe> i mean jeez

[02:46] <ShimmerFairy> I didn't know, sorry.

[02:47] <ShimmerFairy> In any case, I need a more definitive answer before I can do anything about :auth<>, since I've no idea how it's supposed to work (as S22 is silent on the matter) :)

[02:50] *** noganex joined
[02:52] *** noganex_ left
[02:52] *** maverick87 left
[02:53] <flussence> afaik it just boils down to a hash key so that you can have two same-named modules from different authors installed... though I don't think we've had that actually happen yet, so it's fine to omit for now.

[02:58] <ugexe> i imagine you wouldnt set auth. request auth sure, but it would be constructed from the required content storage and author

[03:02] *** kaare_ joined
[03:09] <tony-o> i wouldn't call it blindly throwing it in if it's spec'd..

[03:12] <adu> flussence: upon first inspection it looks like something that coroutines would be useful in implementing

[03:13] <ShimmerFairy> tony-o: sure, but the point is that an "auth" field for META6.json *isn't* spec'd :)

[03:13] <ugexe> and it shouldnt be

[03:13] <ugexe> if you hard code the content storage portion of the auth, then you are stuck maintaing a branch for each content storage

[03:14] <ugexe> requesting an auth is a different story

[03:14] <ShimmerFairy> ugexe: if "auth" is meant to be pulled from another source, it'd be nice if that was explained somewhere (either under S22/TERMINOLOGY/auth, or before describing the META6.json fields), preferably also explaining how auths are supposed to be constructed

[03:15] <ShimmerFairy> Before the META6.json fields, the description would explain the question of "why can I specify name and ver here, but not auth?", to clarify.

[03:19] *** colomon left
[03:43] *** telex left
[03:44] *** telex joined
[03:45] *** prevost left
[04:05] <dalek> rakudo/nom: 2266f4a | TimToady++ | src/core/List.pm:

[04:05] <dalek> rakudo/nom: simplify +args binding code

[04:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2266f4a5d3

[04:05] <dalek> roast: 12dc2eb | TimToady++ | S06-signature/slurpy-params.t:

[04:05] <dalek> roast: add some tests for +args binding

[04:05] <dalek> roast: review: https://github.com/perl6/roast/commit/12dc2eb3da

[04:09] <tony-o> i think the intent is implied that you dont want to maintain a hardcoded value in auth, even if you disagree at the implication it seems intuitive that youd not want to do that

[04:20] *** adu left
[04:20] *** rjb joined
[04:21] *** rjb left
[04:23] <tokuhiro_> how do i use string-io like `open my $io, "<", \$buffer;`?

[04:26] *** rmgk is now known as Guest44882

[04:26] *** rmgk_ joined
[04:26] *** Guest44882 left
[04:26] *** rmgk_ is now known as rmgk

[04:28] <flussence> tokuhiro_: there isn't a module for that yet :(

[04:28] <tokuhiro_> orz

[04:28] <flussence> (there's an IO::String, but reading from the string is a todo)

[04:30] *** perlawhirl left
[04:37] *** cdc left
[04:57] *** khw left
[05:02] *** araujo__ left
[05:03] *** araujo joined
[05:03] *** araujo left
[05:03] *** araujo joined
[05:04] <ugexe> maybe IO::Capture::Simple can do what you want

[05:06] *** thou left
[05:24] *** skids left
[05:38] *** vendethiel joined
[05:46] *** Guest38636 left
[05:47] *** bowtie joined
[05:47] *** bowtie is now known as Guest72901

[05:54] *** simcop2387 joined
[05:58] *** domidumont joined
[05:58] *** domidumont left
[05:59] *** domidumont joined
[06:02] *** domidumont left
[06:02] *** vendethiel left
[06:03] *** domidumont joined
[06:05] *** diana_olhovik_ joined
[06:05] *** aborazmeh left
[06:07] *** aborazmeh joined
[06:07] *** aborazmeh left
[06:07] *** aborazmeh joined
[06:09] *** telex left
[06:10] *** telex joined
[06:29] *** thou joined
[06:33] *** thou left
[06:34] *** chenryn joined
[06:41] *** [Sno] joined
[06:44] <dalek> rakudo/nom: 63a883f | TimToady++ | src/core/Any-iterable-methods.pm:

[06:44] <dalek> rakudo/nom: start using +args to glrify common listops

[06:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/63a883fcce

[06:44] <dalek> roast: 9679da8 | TimToady++ | S32-list/reduce.t:

[06:44] <dalek> roast: reduce won't flatten anymore

[06:44] <dalek> roast: review: https://github.com/perl6/roast/commit/9679da8e4a

[06:53] *** FROGGS joined
[06:53] <FROGGS> o/

[06:54] <FROGGS> ShimmerFairy / ugexe: I expect that a module installer will set the auth/author/authority for you when downloading dists from a location that provides this information

[06:54] <FROGGS> ShimmerFairy / ugexe: github and cpan surely do that

[06:55] <FROGGS> ShimmerFairy / ugexe: though, one can and perhaps should add that field to the META6.json, at least as a fallback

[06:57] *** ShimmerFairy left
[07:02] *** ShimmerFairy joined
[07:06] *** abraxxa joined
[07:06] *** Peter_R left
[07:15] *** rurban joined
[07:18] <[Tux]> o/

[07:18] <yoleaux> 16 Sep 2015 17:23Z <nine> [Tux]: I tried bisecting your performance regression but could not find it. If anything, Rakudo seems to have become faster

[07:19] <[Tux]> nine, I get a fluctuation between 37 and 40.5 depending on the moonphase squared by the daytime in milliseconds

[07:20] <moritz> which again shows that measurements without error bars are mostly worthless

[07:22] *** chenryn left
[07:25] *** chenryn joined
[07:25] *** jack_rabbit_ joined
[07:25] <nine> [Tux]: I've found that when I do "cpupower frequency-set -g performance" my benchmarks give much more reliable results.

[07:26] <[Tux]> cpupower: Command not found.

[07:26] <nine> CPU frequency scaling is really an extremely complicated matter nowadays

[07:27] <nine> [Tux]: it's in the cpupower package on openSUSE. Originally part of http://www.kernel.org/pub/linux/utils/kernel/cpufreq/cpufrequtils.html

[07:27] * [Tux] just installed it

[07:27] <[Tux]> re-running

[07:29] <FROGGS> [Tux]: you're doing your benchmarks still on that hp-ux box? :o)

[07:30] <[Tux]> no, OpenSUSE 13.1 - Linux 3.11.10-29-desktop [openSUSE 13.1 (Bottle)]  HP Z220CMT Xeon(R) CPU E3-1245 V2 @ 3.40GHz/3706(8) x86_64  11914 Mb

[07:30] <ShimmerFairy> FROGGS: would it make sense to have META6.json ask for an "owner" field, so that the fallback auth could be constructed as  "fallback:JRANDOM"  or whatever? (Instead of letting someone pick whatever they want for the left side of the colon?)

[07:31] <FROGGS> ShimmerFairy: hmmmmm

[07:31] <FROGGS> ShimmerFairy: it is hard to tell how that works in the real world

[07:33] <ugexe> different content storage might not let you have the same author name as another

[07:38] <FROGGS> true

[07:39] <ShimmerFairy> that's why I'm unsure about letting you specify whatever content storage you want :)   (and the section on the "authors" field mentions that only the "owner" should be used for whatever, but there is no current "owner" field)

[07:41] <[Tux]> test             50000    38.048    37.967

[07:41] <[Tux]> test-t           50000    40.237    40.156

[07:41] <ugexe> you arent supposed to set the content storage yourself. thats just what happens

[07:41] * [Tux] => $work

[07:41] <ugexe> right now

[07:42] <FROGGS> that's problematic either way

[07:42] <ShimmerFairy> ugexe: of course, we're discussing a fallback auth (which I think should be a fallback "owner", so you can't specify whatever content storage), in the event that an auth can't be constructed.

[07:42] <ugexe> that should be implied by the person installing

[07:43] <ShimmerFairy> ? We're not talking about module users, but module authors

[07:43] <ugexe> yes

[07:43] <FROGGS> ugexe: how will that work out with the use statements in your large $work application that require a certain :auth?

[07:44] <ugexe> i dont see how its a problem

[07:44] <ShimmerFairy> ugexe: then I still don't understand "should be implied by the person installing"

[07:44] <FROGGS> well, if the auth in the META6.json (or in the CURLI database) changes so much, you can't use :auth filters in your use statements at all

[07:45] <FROGGS> right now I think I'd better use:  use Foo:md5<z2397846298437602364z203zo>

[07:45] <moritz> md5 *shudder*

[07:46] <FROGGS> moritz: was just an example

[07:46] <FROGGS> :o)

[07:46] * moritz good at bikeshuddering

[07:46] <FROGGS> shudder up!

[07:46] <FROGGS> :P

[07:46] <moritz> :-)

[07:47] <ShimmerFairy> FROGGS: I think the issue may be that :auth<> is actually a pretty open thing. Something feels off about how it works, I can't place my finger on it.

[07:47] * FROGGS nods

[07:47] <BooK> wouldn't using md5 prevent quick local patches to the source?

[07:47] *** aborazmeh left
[07:48] <FROGGS> BooK: aye

[07:48] <FROGGS> BooK: it is pain, whatever we do

[07:48] <ShimmerFairy> FROGGS: It feels like :auth<> would work better if Perl 6 handled authorship (some sort of 'author registry'), instead of letting *everyone else* handle it. But, I don't think making people register their auth somewhere is ideal either :)

[07:49] <FROGGS> ShimmerFairy: that occoured to me as well

[07:49] <ShimmerFairy> Perhaps the mere fact that it doesn't easily make sense in META6.json is a clue that it doesn't currently work as a filter on modules :)

[07:50] <BooK> what problem is that trying to solve?

[07:50] <ugexe> ah i was speaking for the recommendation manager. for using the module there should be no problem with :auth

[07:51] <ugexe> as in, if i want my recommendation manager to install from github content storage only, it shouldnt jump to a fallback (the recommendation manager)

[07:51] <ShimmerFairy> BooK: the idea is that we don't require a globally-unique module name in Perl6-land

[07:56] <BooK> I thought the idea was to be able to load multiple version of "almost the same thing" at once, and use different ones in different cases/other modules

[07:57] <BooK> so that one could be very picky about what they want, while others would use *

[07:58] <ShimmerFairy> Well yeah, it helps with doing that when everyone can just name their module JSON::Fast, with different auth/vers, instead of  JRANDOM::v0_1::JSON::Fast  and such :)

[07:58] <mst> so far, we've mostly done fine with requiring unique names

[07:58] <BooK> mst: my thought exactly

[07:59] *** aborazmeh joined
[07:59] *** aborazmeh left
[07:59] *** aborazmeh joined
[07:59] <mst> I can see multiple completely different JSON::Fast dists being a complete disaster

[07:59] <mst> essentially you'd then have to -talk- about them as JRANDOM::JSON::Fast

[07:59] <BooK> but as soon as JRANDOM's version is installed and has a incompatible interface, every module saying "I'm fine with using whatever JSON::Fast" will blow up 

[07:59] <mst> which, well, PAUSE already supports

[08:00] <BooK> well, mst and I are already talking about diffrent JRANDOM::JSON::Fast :-)

[08:00] <ShimmerFairy> FROGGS: what if, instead of a registered list of auths, it was just a registry of content storages? Could it help if we had a well-defined list of things for the LHS of the auth colon? (With perhaps an internal: or something set aside for whenever some company has an internal storage system)

[08:01] <ShimmerFairy> Using JSON::Fast wasn't the best example, but in general we need some way to neatly bring together different "universes" of modules, where any number of them from each universe have a name clash.

[08:02] <dalek> roast: 48999d9 | TimToady++ | S32-list/reduce.t:

[08:02] <dalek> roast: reduce doesn't automatically flatten now

[08:02] <dalek> roast: review: https://github.com/perl6/roast/commit/48999d9c32

[08:02] <mst> ShimmerFairy: why?

[08:02] <mst> actually, no, wrong question

[08:02] <mst> why is this any different to JRANDOM::JSON::Fast

[08:03] <mst> in theory, I understand the idea

[08:03] <ugexe> i mostly found it nice for when joe shmoe puts his boiler plate code in an otherwise good root namespace

[08:03] <mst> but in practice, trying to do this stuff involves more complexity than useful, IME

[08:03] <BooK> ugexe: but isn't that better solved with non-technical means?

[08:04] <ShimmerFairy> mst: I don't know the reasoning for those who originally came up with it, but for me having a specified :auth<> is better for conveying an author than some sort of "top level name is author" convention

[08:04] <mst> ok, but then, what happens when the releaser changes?

[08:04] <FROGGS> mst: the problem we are actually trying to solve is: dist Foo is popular, gets forked, other one (also Foo) gets more popular, so people switch auths

[08:04] <ShimmerFairy> mst: in a sense, I myself think having a "named" package name component is better than a "positional" one for this sort of thing :)

[08:05] <mst> consider DBIx::Class, which in the early days often had eight releasers across eight releases

[08:05] <FROGGS> mst: like, allowing evolution

[08:05] <mst> how is an author name even sensical at that point?

[08:06] <FROGGS> mst: can also be an authority, like TheDBIxClassGroup

[08:06] <dalek> rakudo/nom: 32ce653 | TimToady++ | src/core/allomorphs.pm:

[08:06] <dalek> rakudo/nom: allomorphic .gist will just print the string

[08:06] <dalek> rakudo/nom: 

[08:06] <dalek> rakudo/nom: Fears of user confusion are less well founded than fears of users rampaging

[08:06] <dalek> rakudo/nom: because they just wanted to print out the values, and got extra crap.  This

[08:06] <dalek> rakudo/nom: includes me, trying to run a rosettacode entry on a <> list of integers.

[08:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32ce653aaf

[08:07] * TimToady --> zzz &

[08:10] *** aborazmeh left
[08:17] *** thou joined
[08:20] *** dakkar joined
[08:20] *** telex left
[08:20] *** telex joined
[08:21] *** thou left
[08:22] *** frodwith left
[08:40] *** anaeem1_ joined
[08:40] *** laouji left
[08:41] *** darutoko joined
[08:43] *** espadrine joined
[08:45] *** laouji joined
[08:46] *** sergot joined
[08:49] *** anaeem1_ left
[08:53] *** jack_rabbit_ left
[08:59] *** zakharyas joined
[09:04] *** morjo joined
[09:15] *** cognominal joined
[09:28] <timotimo> m: my $s = Channel.new; $s.close; say $s.poll;

[09:28] <camelia> rakudo-moar 32ce65: OUTPUT«Nil␤»

[09:28] <psch> r: my $a = Bag.new("a", "b", "b"); say $a.roll(2)

[09:28] <camelia> rakudo-jvm 32ce65: OUTPUT«Type check failed in binding @pairs; expected 'Positional' but got 'Seq'␤  in block <unit> at /tmp/tmpfile:1␤␤»

[09:28] <camelia> ..rakudo-moar 32ce65: OUTPUT«(a b)␤»

[09:29] <psch> i got past the type check failure, but now i'm getting "This Seq has already been consumed" :/

[09:29] <psch> it points at the for in the gather in ROLLPICKGRABN, which i find confusing

[09:29] <moritz> psch: how did you get past it?

[09:30] <psch> moritz: correcting the .cache invocation in the Binder

[09:30] *** geekosaur joined
[09:30] <psch> moritz: https://gist.github.com/peschwa/6fff3a7c51bc27fa67bd

[09:30] <moritz> psch: huh, then you need to debug where it has been consumed

[09:30] <nine> mst: I'm hoping for the :auth mechanism to fix the ambiguity of Perl 5 and Perl 6 modules sharing a name

[09:32] <psch> moritz: right, i'm trying :)

[09:34] <moritz> m: my \seq = gather { take 1; take 2 }; my @list = seq.cache; .say for seq

[09:34] <camelia> rakudo-moar 32ce65: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/LRByNouMYm:1␤␤»

[09:35] <nine> m: my \seq = gather { take 1; take 2 }; my @list = seq.cache; .say for seq.cache

[09:35] <camelia> rakudo-moar 32ce65: OUTPUT«1␤2␤»

[09:36] <moritz> nine: I know that's possible; I just wonder if Seq.iterator should be smart enough to fall back to Seq.cache.iterator

[09:37] <timotimo> m: try die "oh noes" orelse say "test"

[09:37] <camelia> rakudo-moar 32ce65: ( no output )

[09:37] <timotimo> m: die "oh noes" orelse say "test"

[09:37] <camelia> rakudo-moar 32ce65: OUTPUT«oh noes␤  in block <unit> at /tmp/wrbcRN2G11:1␤␤»

[09:37] <timotimo> m: (try die "oh noes") orelse say "test"

[09:37] <camelia> rakudo-moar 32ce65: OUTPUT«test␤»

[09:37] <timotimo> m: try die "oh noes" // say "test"

[09:37] <camelia> rakudo-moar 32ce65: ( no output )

[09:37] <timotimo> m: (try die "oh noes") // say "test"

[09:37] <camelia> rakudo-moar 32ce65: OUTPUT«test␤»

[09:39] <timotimo> movable type doesn't let me edit my comment :(

[09:39] <timotimo> i should have preview'd

[09:41] <timotimo> http://blogs.perl.org/users/aaron_baugher/2015/09/concurrency-and-channels-in-perl-6.html ← this is what i replied to

[09:45] <morjo> Anyone know of an easy to understand guide to Rules?

[09:45] <Timbus_> not me; they're so hard  to follow.

[09:47] <timotimo> have you read http://doc.perl6.org/language/regexes ?

[09:49] <nine> moritz: that would be just https://gist.github.com/niner/e82fd8f33ca4c465477c which works and passes spec tests. I wonder about the performance implications though.

[09:50] <morjo> Not everyting. Guess I should just start from the top :)

[09:52] <timotimo> morjo: it's not much, but i would try to answer any questions you have

[09:55] <morjo> timotimo: Thanks, I'll read that doc and try to make a test case and see how that goes. If I cant manage, I'm sure to come back :)

[09:56] <timotimo> the most common problem i encounter is "significant whitespace" as "rule" gives you being less than helpful

[09:56] <timotimo> so if you put mostly "regex" into your grammar, you'll not be so surprised

[09:56] *** telex left
[09:56] <moritz> or 'token' if you don't want backtracking

[09:57] <timotimo> right

[09:57] *** telex joined
[09:57] *** telex left
[09:57] <timotimo> oh, look!

[09:57] <timotimo> wordpress has made another post i've spent some time on disappear out of the blue!

[09:58] *** telex joined
[09:59] <timotimo> it's nice that wordpress' editor saves in-progress posts in the local storage of the browser, but it seems like they are using the session storage, rather than the general local storage?

[10:00] <timotimo> i'm not happy right now

[10:01] *** andreoss joined
[10:01] *** chenryn left
[10:05] *** thou joined
[10:07] *** colomon joined
[10:10] *** thou left
[10:31] <andreoss> m: my $x; say "hi" with $x;

[10:31] <camelia> rakudo-moar 32ce65: ( no output )

[10:31] *** cdc joined
[10:31] <cdc> m: 1 »+» (2, 3)

[10:31] <camelia> rakudo-moar 32ce65: OUTPUT«Lists on either side of non-dwimmy hyperop of infix:<+> are not of the same length␤left: 1 elements, right: 2 elements␤  in block <unit> at /tmp/jcNHIdXWtc:1␤␤»

[10:32] <cdc> m: (1, 2) »+» 3

[10:32] <camelia> rakudo-moar 32ce65: ( no output )

[10:32] <cdc> ^^ LTA error

[10:32] <timotimo> huh, that message seems not-right

[10:32] <cdc> patch: https://gist.github.com/anonymous/3758973094fe2a3a1fe3

[10:32] <cdc> :)

[10:33] <cdc> this is just s/same/expected/

[10:34] <timotimo> mhm mhm

[10:37] <andreoss> m: say "hi" with False

[10:37] <camelia> rakudo-moar 32ce65: OUTPUT«hi␤»

[10:37] <psch> m: my $x; say $x.defined; say False.defined

[10:37] <camelia> rakudo-moar 32ce65: OUTPUT«False␤True␤»

[10:38] <andreoss> say Nil.defined; say Empty.defined; 

[10:38] <andreoss> m: say Nil.defined; say Empty.defined;                         

[10:38] <camelia> rakudo-moar 32ce65: OUTPUT«False␤False␤»

[10:40] *** Ven joined
[10:42] <ilmari> m: say( ("hi" with False) ?? "True" !! "False" )

[10:42] <camelia> rakudo-moar 32ce65: OUTPUT«True␤»

[10:48] <moritz> m: say( ("hi" does False) ?? "True" !! "False" )

[10:48] <camelia> rakudo-moar 32ce65: OUTPUT«Cannot mix in non-composable type Bool into object of type Str␤  in block <unit> at /tmp/mk64YT9eSt:1␤␤»

[10:48] <moritz> m: say( ("hi" but False) ?? "True" !! "False" )

[10:48] <camelia> rakudo-moar 32ce65: OUTPUT«False␤»

[10:50] <andreoss> say False but True

[10:50] <andreoss> m: say False but True

[10:50] <camelia> rakudo-moar 32ce65: OUTPUT«True␤»

[10:58] <Ven> o/, #perl6!

[10:58] *** andreoss left
[11:06] <[ptc]> Ven: o/

[11:07] <timotimo> o/

[11:14] *** rindolf joined
[11:15] *** mprelude joined
[11:16] <ilmari> m: say( (True but False) ?? "True" !! "False" )

[11:16] <camelia> rakudo-moar 32ce65: OUTPUT«False␤»

[11:17] <timotimo> yeah, mixing in an instance of the class "Bool" will override the ".Bool" method to return that exact value

[11:17] *** chenryn joined
[11:17] <timotimo> so when the ?? !! operator tries to boolify the value it got, it calls .Bool and that returns False

[11:17] <timotimo> ^- that's my interpretation of the result

[11:17] <timotimo> of course it's strange that we call .Bool on something that we know is already a Bool

[11:18] *** TEttinger left
[11:19] <ilmari> m: my $x = "42" but 37; say $x + 5

[11:19] <camelia> rakudo-moar 32ce65: OUTPUT«47␤»

[11:20] <[ptc]> m: my @moo = []; @moo.push(1); @moo.say; @moo.push([1]); @moo.say

[11:20] <camelia> rakudo-moar 32ce65: OUTPUT«[1]␤[1 1]␤»

[11:20] <timotimo> oh, huh?

[11:20] <[ptc]> why does pushing an array onto an array not result in an array of arrays?  What am I misunderstanding here?

[11:21] *** andreoss joined
[11:21] <psch> m: my @moo = []; @moo.push(1); @moo.say; @moo.push(([1],)); @moo.say

[11:21] <camelia> rakudo-moar 32ce65: OUTPUT«[1]␤[1 [1]]␤»

[11:21] <[ptc]> it seems that .push(1) and .push([1]) do the same thing

[11:21] <psch> single arg rule i think?

[11:21] <[ptc]> ah, ok, could be

[11:21] <nine> yes

[11:21] <nine> m: my @moo = []; @moo.push(1); @moo.say; @moo.push($[1]); @moo.say

[11:21] <camelia> rakudo-moar 32ce65: OUTPUT«[1]␤[1 [1]]␤»

[11:21] <nine> Use itemization to get around that

[11:22] <[ptc]> nine: that looks better.

[11:22] * [ptc] wonders where we need to update the docs now...

[11:22] <nine> It's the difference between @moo.push(@new_values) and @moo.push($@additional_array)

[11:24] <[ptc]> ah, that's a nice way to think about it!  Thanks :-)

[11:24] <[ptc]> one can see in that example why one would need the $ in the single arg case

[11:29] <[Coke]> Ugh. Forgot there was a child school thing tonight. gonna be up laaate with the release.

[11:33] *** chenryn left
[11:34] <lizmat> [Coke]: fwiw, one more day wouldn't hurt much, I don't think  :-)

[11:40] <[Coke]> eh. releases are most easy.

[11:40] <[Coke]> and there's enough coffee. Maybe.

[11:41] <[ptc]> do we have a pre-GLR camelia?

[11:42] *** telex left
[11:42] <[Coke]> there was a tag so one can be setup.

[11:42] *** telex joined
[11:42] <[ptc]> [Coke]: thanks.  Just wondered if I could save myself some work :-)

[11:43] <ilmari> m: my $a = Nil; say Nil; say $a; say $a eqv Nil;

[11:43] <camelia> rakudo-moar 32ce65: OUTPUT«Nil␤(Any)␤False␤»

[11:43] <timotimo> we have star-m: 

[11:43] <timotimo> but by now that's rather old

[11:45] <[ptc]> timotimo: might be good enough.  thanks

[11:48] <[ptc]> star-m: my @directions = (1, -1 X 2, -2), (2, -2 X 1, -1); @directions.say

[11:48] <camelia> star-m 2015.03: OUTPUT«1 2 1 -2 -1 2 -1 -2 2 1 2 -1 -2 1 -2 -1␤»

[11:48] <[ptc]> m: my @directions = (1, -1 X 2, -2), (2, -2 X 1, -1); @directions.say

[11:48] <camelia> rakudo-moar 32ce65: OUTPUT«[((1 2) (1 -2) (-1 2) (-1 -2)) ((2 1) (2 -1) (-2 1) (-2 -1))]␤»

[11:48] <ilmari> huh, the first hit on https://duckduckgo.com/?q=perl6+eqv is http://doc.perl6.org/routine/eqv, but that 404s

[11:51] <timotimo> http://doc.perl6.org/language/operators#infix_eqv

[11:51] <[Coke]> searching for eqv fails. (as does ==)

[11:53] <ilmari> reorganised recently?

[11:53] * [Coke] addeed https://github.com/perl6/doc/issues/129 for a new 404 handler.

[11:53] <timotimo> hm, potentially

[11:53] *** thou joined
[11:54] <ilmari> http://doc.perl6.org/language/operators#infix_=== links to http://doc.perl6.org/type/WHICH, which als o404s

[11:54] <[Coke]> and 130, 131 for the missing eqv/== terms

[11:54] <[ptc]> timotimo: I think it's now in language/operators

[11:54] *** larion joined
[11:54] <timotimo> huh, WHICH should not be in /type/ at all

[11:54] <[ptc]> timotimo: http://doc.perl6.org/language/operators#infix_eqv

[11:55] <timotimo> i pasted that link up there already :)

[11:57] * [ptc] is just too slow today...

[11:58] *** thou left
[12:00] *** Skarsnik joined
[12:02] <ilmari> http://doc.perl6.org/language/operators#postcircumfix_%C2%AB_%C2%BB links to http://doc.perl6.org/routine/%C2%AB%20%C2%BB#circumfix_%C2%AB_%C2%BB

[12:02] <ilmari> that's « » for those who don't read uri-encoded utf8 fluently

[12:03] <ilmari> circumifx « » isn't mentioned in /language/operators at all

[12:03] <ilmari> s/ifx/fix/ # pesky laggy mobile data

[12:03] *** rurban left
[12:05] *** ShimmerFairy left
[12:12] <dalek> doc: 26441e3 | paultcochrane++ | lib/Language/operators.pod:

[12:12] <dalek> doc: Update cross product output post-GLR

[12:12] <dalek> doc: review: https://github.com/perl6/doc/commit/26441e35b5

[12:12] <dalek> doc: 9da60a0 | paultcochrane++ | lib/Language/operators.pod:

[12:12] <dalek> doc: Fix zip operator examples post GLR

[12:12] <dalek> doc: review: https://github.com/perl6/doc/commit/9da60a0348

[12:15] *** abraxxa left
[12:17] <andreoss> should rakudobrew exec run command for all installed compilers or just one? 

[12:18] <tadzik> imho just one, but there should be a way to run it on all of them

[12:18] <yoleaux> 15 Sep 2015 18:26Z <patrickz> tadzik: you can merge the PR now. Did some more testing and fixing and am confident this is loads better than before.

[12:18] *** ShimmerFairy joined
[12:18] <tadzik> .tell patrickz ok, I'll look into it :)

[12:18] <yoleaux> tadzik: I'll pass your message to patrickz.

[12:18] *** abraxxa joined
[12:22] <andreoss> why run it with just one compiler? what's the point of exec then if one could just type perl6 instead? 

[12:24] <moritz> which perl6?

[12:24] *** ZoffixWork joined
[12:25] <moritz> what if it's not in $PATH?

[12:25] <moritz> perl6-m vs. perl6-j ?

[12:25] <moritz> and I hope we'll have a perl6-js (or perl6-q) one day

[12:25] <ZoffixWork> Hey, I've just came across this ancient commit of mine and I think it's wrong. People shouldn't change "The Perl Foundation" text since the name refers to the copyright owner of the *license itself* and not the module, right? https://github.com/perl6/doc/commit/48564569710f175d8baa61b4ef1038e78a3fcca5

[12:33] *** carlin joined
[12:33] <psch> heh, trying to fix the Binder *and* adjusting jvm to not need the workaround in ROLLPICKGRABN at the same time wasn't particularly great an idea...

[12:34] <psch> also grrr:

[12:34] <psch> # expected: 'foofoofoobarbarfoobarbar'

[12:34] <psch> #      got: 'barbarbarfoofoobarfoofoo'

[12:34] <FROGGS> :/

[12:34] <psch> there's probably a dozend or so tests that fail exclusively due to hash elem ordering...

[12:34] <carlin> m: my $module = "Test"; require $module; say 'alive';

[12:34] <camelia> rakudo-moar 32ce65: OUTPUT«Could not find file 'Test' for module Test␤  in block <unit> at /tmp/ll_qx9VedB:1␤␤»

[12:34] <carlin> m" require Test; say 'alive';

[12:35] <carlin> m: require Test; say 'alive';

[12:35] <camelia> rakudo-moar 32ce65: OUTPUT«alive␤»

[12:35] <carlin> I'm sure that used to work ... :/

[12:35] <carlin> until quite recently?

[12:35] <psch> star-m: my $m = "Test"; require $m; say "alive"

[12:35] <camelia> star-m 2015.03: OUTPUT«alive␤»

[12:35] <psch> that's not particularly recent, i guess

[12:36] <psch> but it is a point for "it used to work" :)

[12:36] <psch> might be cu_load changes?

[12:39] *** Ven left
[12:39] <ZoffixWork> Larry wrote the original 1.0 license... cool. I guess he'd know best the answer to my question.

[12:39] <ZoffixWork> TimToady, no idea whether this commit is right or wrong :) You be the judge :) https://github.com/perl6/doc/commit/48564569710f175d8baa61b4ef1038e78a3fcca5

[12:39] *** ZoffixWork left
[12:40] *** Ven joined
[12:41] *** JimmyZ joined
[12:41] <ilmari> m: my $foo = foo; my @bar = <bar blat>; say «$foo @bar baz»

[12:41] <camelia> rakudo-moar 32ce65: OUTPUT«5===SORRY!5=== Error while compiling /tmp/L990QZYSAy␤Undeclared routine:␤    foo used at line 1␤␤»

[12:41] <ilmari> m: my $foo = 'foo'; my @bar = <bar blat>; say «$foo @bar baz»

[12:41] <camelia> rakudo-moar 32ce65: OUTPUT«(foo @bar baz)␤»

[12:43] <psch> m: my $foo = 'foo'; my @bar = <bar blat>; say «$foo @bar[] baz»

[12:43] <camelia> rakudo-moar 32ce65: OUTPUT«(foo bar blat baz)␤»

[12:43] *** abraxxa left
[12:47] *** tokuhiro_ left
[12:48] *** laouji left
[12:52] <moritz> m: my $foo = 'foo'; my @bar = <bar blat>; say «$foo @bar[] baz».perl

[12:52] <camelia> rakudo-moar 32ce65: OUTPUT«("foo", "bar", "blat", "baz")␤»

[12:52] *** Loren joined
[13:01] *** abraxxa joined
[13:10] *** skids joined
[13:12] *** rurban joined
[13:18] *** Ven left
[13:25] <dalek> rakudo/nom: 7a2b4a8 | peschwa++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[13:25] <dalek> rakudo/nom: Fix PositionalBindFailover binding code.

[13:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a2b4a8bb6

[13:26] <psch> progress \o/ 

[13:26] *** larion left
[13:26] <moritz> \o/

[13:26] <moritz> psch++

[13:27] <psch> there's two more things that are probably behind a lot of test failures

[13:27] *** hernanGOA joined
[13:28] <psch> one is the mystery StackOverflowError, the other is the allomorph mishandling

[13:28] <psch> (and then there's of course the written-with-assumed-hash-element-ordering tests...)

[13:28] *** Ven joined
[13:29] *** Ven left
[13:31] <moritz> those need fixing, yes

[13:31] *** larion joined
[13:34] *** sufrostico joined
[13:39] *** aborazmeh joined
[13:39] *** aborazmeh left
[13:39] *** aborazmeh joined
[13:40] <dalek> rakudo-star-daily: 904d162 | coke++ | log/ (2 files):

[13:40] <dalek> rakudo-star-daily: today (automated commit)

[13:40] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/904d1629b4

[13:41] <[Coke]> moritz: is docs.perl6.org a mojo5 app at the moment?

[13:41] *** thou joined
[13:42] <[Coke]> or is it a static site?

[13:42] <[Coke]> wondering how we'd do the 404.

[13:42] <[ptc]> [Coke]: I believe it's a mojo5 app

[13:43] <[ptc]> [Coke]: no, sorry, it's not.  The mojo5 app is for local use

[13:43] <[ptc]> [Coke]: the files get copied to the server via rsync and thus it's just a static site

[13:45] <moritz> [Coke]: it's a static page

[13:45] <moritz> [Coke]: and 404 pages can be just a 404.html, and I can tell Apache to use that as the error document

[13:46] *** thou left
[13:47] *** tokuhiro_ joined
[13:48] * moritz idle wonders if he should name his facade classes "ThingFaçade", just to annoy cow-orkers :-)

[13:49] <psch> r: say [max]()

[13:49] <camelia> rakudo-moar 32ce65: OUTPUT«-Inf␤»

[13:49] <camelia> ..rakudo-jvm 32ce65: OUTPUT«Too few positionals passed; expected 1 arguments but got 0␤  in block <unit> at /tmp/tmpfile:1␤␤»

[13:50] <psch> r: my @a; say @a.max

[13:50] *** andreoss left
[13:50] <camelia> rakudo-{moar,jvm} 32ce65: OUTPUT«-Inf␤»

[13:51] <psch> r: say ().WHAT

[13:51] <camelia> rakudo-{moar,jvm} 32ce65: OUTPUT«(List)␤»

[13:51] <psch> r: sub f(@a) { say @a.WHAT }; f ()

[13:51] <camelia> rakudo-{moar,jvm} 32ce65: OUTPUT«(List)␤»

[13:52] *** tokuhiro_ left
[13:52] *** Ven joined
[13:54] <[Coke]> moritz: ok. I'll add a 404.html at some point today, and you can do the apache magic?

[13:55] <moritz> [Coke]: sure

[13:55] <dalek> doc: ec82f33 | (David H. Adler)++ | lib/Language/control.pod:

[13:55] <dalek> doc: Added docs for with/without

[13:55] <dalek> doc: May want to change it to a =head2 heading, but for now have put it as a

[13:55] <dalek> doc: =head3 under the =head2 for C<if>

[13:55] <dalek> doc: review: https://github.com/perl6/doc/commit/ec82f33537

[13:55] *** dalek left
[13:56] *** dalek joined
[13:56] *** ChanServ sets mode: +v dalek

[13:57] <dalek> rakudo/nom: 61022e7 | FROGGS++ | / (3 files):

[13:57] <dalek> rakudo/nom: make C++ NativeCall tests work on darwin

[13:57] <dalek> rakudo/nom: 

[13:57] <dalek> rakudo/nom: Sadly clang and gcc cannot export symbols of purely virtual functions when the implementation

[13:57] <dalek> rakudo/nom: of the function (or rather method) is inside of the class body.

[13:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61022e73bc

[13:58] *** PerlJam joined
[13:58] *** nucp6 joined
[13:59] <psch> oh

[13:59] <psch> that's the new param thingy, +args

[13:59] <psch> can't even catch up before new bugs get introduced /o\

[13:59] <nucp6> hi perl6

[13:59] <psch> hi nucp6 o/

[14:03] *** telex left
[14:03] *** telex joined
[14:04] <Ven> FROGGS: do you need me to test some stuff:)? 

[14:05] *** aborazmeh left
[14:06] <Ven> heh, I guess I can abstract "if %a<b>:exists { $_ = %a<b>; }" into `with %a<b>`, if I'm sure the key isn't null

[14:06] *** rurban left
[14:07] <moritz> s/abstract/simplify/

[14:09] *** carlin left
[14:09] *** cognominal left
[14:10] <lizmat> m: my %h = a => Any; say h<a>:exists; .say with %h<a>

[14:10] <camelia> rakudo-moar 7a2b4a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CuRF8wGxVc␤Undeclared routine:␤    h used at line 1␤␤»

[14:10] <lizmat> m: my %h = a => Any; say %h<a>:exists; .say with %h<a>

[14:10] <camelia> rakudo-moar 7a2b4a: OUTPUT«True␤»

[14:10] <lizmat> Ven ^^^ *and* the value is defined  :-

[14:10] <lizmat> )

[14:10] <FROGGS> Ven: would be nice if you could pull rakudo and run 'make test', the two C++ tests should now pass

[14:10] <moritz> lizmat: I guess that's what Ven meant with "if the kye isn't null"

[14:10] <Ven> moritz: yar. not sure why I put that word there

[14:11] <Ven> also yes, "null" was meant for Nil/general undefinedness

[14:11] <Ven> FROGGS: am doing it :)

[14:12] *** Sqirrel_ left
[14:12] *** pyrimidi_ joined
[14:15] *** telex left
[14:16] *** telex joined
[14:16] <nucp6> racudo: 29*1

[14:16] <nucp6> .

[14:16] *** Sqirrel joined
[14:17] <moritz> m: say 29 * 1; # for nucp6 

[14:17] <camelia> rakudo-moar 7a2b4a: OUTPUT«29␤»

[14:18] *** thou joined
[14:18] <nucp6> thx moritz :)

[14:19] <dalek> rakudo/nom: b94b49d | peschwa++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[14:19] <dalek> rakudo/nom: Implement one-arg slurpies for the jvm.

[14:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b94b49da00

[14:19] <psch> r: say [max]() # fixes this, soonish probably

[14:19] <camelia> rakudo-jvm 7a2b4a: OUTPUT«Too few positionals passed; expected 1 arguments but got 0␤  in block <unit> at /tmp/tmpfile:1␤␤»

[14:19] <camelia> ..rakudo-moar 7a2b4a: OUTPUT«-Inf␤»

[14:20] <psch> and when the spectest is clean i get to fix the interop list handling \o/

[14:20] <FROGGS> spectest clean?

[14:21] <psch> eventually, hopefully :P

[14:21] <FROGGS> psch: how many spectest files are left?

[14:22] <psch> FROGGS: something between 55 and 70 i guess

[14:22] *** telex left
[14:22] <psch> FROGGS: i'm running spectest now after the onearg slurpies

[14:22] <FROGGS> k

[14:22] *** telex joined
[14:22] <psch> FROGGS: eh, upper bound is actually 68, that's from before the onearg slurpies

[14:22] *** morjo left
[14:23] <psch> FROGGS: i'm pretty confident at least 4 or 5 files is hash ordering, i.e. bad tests

[14:23] <FROGGS> psch: can you gist the summary then?

[14:23] <FROGGS> bbiab &

[14:23] <psch> FROGGS: sure, i'll gist the new one after this run

[14:23] *** FROGGS left
[14:25] *** pyrimidi_ is now known as pyrimidine

[14:26] *** MilkmanDan joined
[14:34] <Ven> .tell FROGGS t/04-nativecall/13-cpp-mangling.t .... ok  

[14:34] <yoleaux> Ven: I'll pass your message to FROGGS.

[14:46] *** telex left
[14:47] *** telex joined
[14:49] *** tokuhiro_ joined
[14:51] *** FROGGS joined
[14:53] *** khw joined
[14:53] <FROGGS> \o/

[14:53] <yoleaux> 14:34Z <Ven> FROGGS: t/04-nativecall/13-cpp-mangling.t .... ok

[14:53] *** tokuhiro_ left
[14:53] <[Coke]> anyone else "the regex guy" at work?

[14:53] <Ven> FROGGS++

[14:54] <[Coke]> release today! Make sure Changelog keeps up to date. Don't sneak in any last minute big changes.

[14:54] * psch held a 2h regex workshop at one job

[14:54] <FROGGS> [Coke]: customers even call and say: I just need to talk to somebody sane about regexes...

[14:55] <geekosaur> implied contradiction?

[14:55] <PerlJam> "sane" and "regexes" are often mutually exclusive  (See Damian ;)

[14:55] * TimToady just snuck in a last-minute big change, and hasn't been updating the Changelog :)

[14:55] * lizmat looking forward to that entry :-)

[14:56] <geekosaur> (and yes, I am very much "the regex guy" at work and elsewhere)

[14:56] <PerlJam> TimToady: I think 63a883fccec95c692b1fd4b3f4f6e5b641dab5a7 broke panda  (But I don't understand the difference between +args and *args yet)

[14:56] <[Coke]> TimToady: I think everyone is used to you cheating. :P

[14:57] <[Coke]> TimToady: tell you what, let me know when you think it's safe to release with your latest stuff. :)

[14:57] <TimToady> you might need to throw a flat in somewhere on one of the affected listops

[14:57] <PerlJam> aye, that's what I'm thinking.

[14:57] <TimToady> less likely, itemize a one-arg argument

[14:58] <jdv79> what big change?

[14:58] *** cognominal joined
[14:59] <PerlJam> So,  *foo is a "flattening slurpy" and +foo does no flattening?

[14:59] * [Coke] tries to get a key for the release. (PGP will only build on PowerPC Macs.) wow, that's showing its age.

[14:59] <TimToady> +foo is one-arg semantics

[14:59] <TimToady> so it's more like **, but if there's a single arg, expands it to be multiple (unless itemized)

[15:00] <PerlJam> ok

[15:00] <FROGGS> I guess that's what I only can understand through examples

[15:01] <TimToady> or looking at it the other way, it always takes the rest of the argument list as a single thing to be iterated, and sometimes the top-level iteration is commas, and sometimes it's just some object

[15:01] *** nucp6 left
[15:02] <TimToady> m: sub foo (+@args) { say @args.elems }; foo [1..4]; foo [1..4],2

[15:02] <camelia> rakudo-moar b94b49: OUTPUT«4␤2␤»

[15:02] <TimToady> there's some examples

[15:03] <TimToady> that's the caching form; here's the non-caching form:

[15:03] <TimToady> m: sub foo (+args) { say args.elems }; foo [1..4]; foo [1..4],2

[15:03] <camelia> rakudo-moar b94b49: OUTPUT«4␤2␤»

[15:04] <PerlJam> m: sub foo (*@args) { say @args.elems }; foo [1..4]; foo [1..4],2;  # a contrasting example for me (should be 4,5 I think)

[15:04] <camelia> rakudo-moar b94b49: OUTPUT«4␤5␤»

[15:04] <PerlJam> cool

[15:04] <TimToady> at least, it's supposed to be non-caching, haven't actually tested that :)

[15:04] <skids> FROGGS: The +@args replaces the first box of code currently at http://doc.perl6.org/language/functions#Slurpy_Conventions and the +args does the same thing but gives you a one-shot Seq so you can handle massive things with low memory.

[15:04] <FROGGS> .tell jnthn How hard would it be to allow rw attributes on CStructs?

[15:04] <yoleaux> FROGGS: I'll pass your message to jnthn.

[15:07] <[Coke]> when creating a key to sign releases with, should I pick a key with an expiration date? 

[15:08] * lizmat is looking at #126073 trying to get it fixed before release

[15:10] <[Coke]> lizmat++

[15:13] * Ven reads about +

[15:14] * Ven doesn't get the difference between +a and +@a yet :)

[15:14] <Ven> is + a ... pregil?

[15:14] <psch> FROGGS: 54 files show up in the summary, but at least one is a TODO PASS

[15:14] <TimToady> it's a slurpy

[15:14] <psch> gisting it now...

[15:14] *** diana_olhovik_ left
[15:14] <Ven> right. * would have to be considered a pregil for + to even be.

[15:14] <Ven> it's a funny word, though :P.

[15:15] <psch> https://gist.github.com/peschwa/90c8dcc516ea934a17be # latest j-spectest, for the curious

[15:15] <Ven> so, *@a is non-flattening, **@a is total-flattening, and +@a/+a is one-arg-rule-style flattening..?

[15:15] <FROGGS> psch: thanks

[15:15] <TimToady> you got * and ** backwards

[15:16] <Ven> whoops. thanks.

[15:16] <psch> not happy about all the "Bad plan"s :/

[15:16] <psch> cause that's usually leaking jvm-level stuff

[15:16] <Ven> I wonder why you didn't go with *** and label 6.0 "Dancing with the stars" *g*

[15:16] <dalek> rakudo/nom: 0fca4dc | coke++ | docs/release_guide.pod:

[15:16] <dalek> rakudo/nom: fix typo

[15:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0fca4dcdca

[15:16] <dalek> rakudo/nom: bcde489 | coke++ | docs/release_guide.pod:

[15:16] <dalek> rakudo/nom: use moar Unicode

[15:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bcde4896c8

[15:19] <skids> m: sub f(+a) { a.WHAT.say }; f((1,2,3).grep({$_})); # not Seq?

[15:19] <camelia> rakudo-moar b94b49: OUTPUT«(List)␤»

[15:20] <TimToady> patches welcome :)

[15:21] <skids> :-)

[15:22] *** Loren left
[15:24] <psch> r: my ::foo $x;

[15:24] <camelia> rakudo-{moar,jvm} b94b49: ( no output )

[15:24] <psch> r: my ::foo $x, say $x

[15:24] <camelia> rakudo-jvm b94b49: OUTPUT«java.lang.RuntimeException: java.lang.StackOverflowError␤␤»

[15:24] <camelia> ..rakudo-moar b94b49: OUTPUT«Method 'gist' not found for invocant of class 'foo'␤  in block <unit> at /tmp/tmpfile:1␤␤»

[15:25] <psch> r: my $x, say $x

[15:25] <camelia> rakudo-{moar,jvm} b94b49: OUTPUT«(Any)␤»

[15:27] <rindolf> Hi all. https://paste.debian.net/312188/ - this code gives me Method 'count' not found for invocant of class 'Range'

[15:27] <rindolf>   in block <unit> at prob329-shlomif.p6:28

[15:27] <rindolf>  - what should I do?

[15:32] <rindolf> Anyone?

[15:33] *** telex left
[15:33] *** telex joined
[15:35] <[Coke]> First, patience.

[15:35] <PerlJam> rindolf: are you using a recent version of rakudo?

[15:35] <rindolf> PerlJam: possibly not.

[15:35] <rindolf> PerlJam: let me upgrade.

[15:35] <[Coke]> I get a different error.

[15:36] <[Coke]> Cannot call map(Block: Range); none of these signatures match:

[15:37] <[Coke]> m: map { 1.say }: 1..2

[15:37] <camelia> rakudo-moar b94b49: OUTPUT«Cannot call map(Block: Range); none of these signatures match:␤    (\SELF: &block;; :$label, :$item, *%_)␤    (HyperIterable:D $: &block;; :$label, *%_)␤  in block <unit> at /tmp/UkqDfSZuT3:1␤␤»

[15:37] <rindolf> m: map { 1.say }: (1,2,3)

[15:37] <camelia> rakudo-moar b94b49: OUTPUT«Cannot call map(Block: List); none of these signatures match:␤    (\SELF: &block;; :$label, :$item, *%_)␤    (HyperIterable:D $: &block;; :$label, *%_)␤  in block <unit> at /tmp/9ldDRUOstN:1␤␤»

[15:37] <[Coke]> m: map { 1.say }, 1..2

[15:37] <camelia> rakudo-moar b94b49: OUTPUT«1␤1␤»

[15:38] <[Coke]> ^^ you'll need to change that, also.

[15:38] <[Coke]> line 34

[15:38] *** larion left
[15:38] <PerlJam> or use the indirect object notation correctly  :)

[15:39] <PerlJam> m: (1..2).map: { .say };

[15:39] <camelia> rakudo-moar b94b49: OUTPUT«1␤2␤»

[15:39] <lizmat> m: Supply.new.grep(1).grep(1).unique.tap: *.say   # shortest golf for #126073 so far

[15:39] <camelia> rakudo-moar b94b49: OUTPUT«Memory allocation failed; could not allocate 58608 bytes␤»

[15:39] <[Coke]> ... and then there's a ton of uninitialized value warnings, and it dies with an another error.

[15:39] <lizmat> it needs two greps, 1 unique and a tap to go into never never land

[15:40] <lizmat> even *without* any value needing to be emitted

[15:40] <dalek> doc: 591a8a5 | TimToady++ | lib/Language/modules.pod:

[15:40] <dalek> doc: Revert "Added note that raw license copy/paste needs modification of copyright owner"

[15:40] <dalek> doc: 

[15:40] <dalek> doc: This reverts commit 48564569710f175d8baa61b4ef1038e78a3fcca5.

[15:40] <dalek> doc: 

[15:40] <dalek> doc: As Zoffix++ suspected, the copyright is on the license itself, not on what is being licensed.

[15:40] <dalek> doc: review: https://github.com/perl6/doc/commit/591a8a5c12

[15:42] <rindolf> [Coke]: done.

[15:43] * FROGGS finally starts to work on XML::Compile

[15:43] <dakkar> FROGGS: in perl6? are you going to bind libxml2?

[15:43] <dakkar> (because I started looking into libxml and libxslt bindings)

[15:43] <|Tux|> FROGGS, markov's suite?

[15:44] <FROGGS> |Tux|: aye

[15:44] <|Tux|> FROGGS++; # brave guy

[15:44] <FROGGS> dakkar: have already started ages ago

[15:44] <rindolf> [Coke], PerlJam : thanks! I mixed up ":" and "," - now can you please tell me how to get a list/array/etc. of characters from a string  ? .chars() only does a count, and .split('') adds an empty string at beginning and end.

[15:45] <PerlJam> m: "string".comb.perl;

[15:45] <lizmat> m: Supply.new.grep(1).grep(1).unique.tap  # even shorter, jnthn any ideas on what might going on here ?

[15:45] <camelia> rakudo-moar b94b49: ( no output )

[15:45] <camelia> rakudo-moar b94b49: OUTPUT«Memory allocation failed; could not allocate 640 bytes␤»

[15:45] <FROGGS> dakkar: well, months, the basics work... now I want to start to work on XML::Compile to see what is needed from XML::LibXML and how it is used

[15:45] <dakkar> FROGGS: I'm clearly not paying enough attention :) link?

[15:45] <PerlJam> m: "string".comb.say.perl;

[15:45] <camelia> rakudo-moar b94b49: OUTPUT«(s t r i n g)␤»

[15:45] <FROGGS> ... to get the interface straight

[15:45] <PerlJam> blah

[15:45] <PerlJam> rindolf: anyway ... use comb

[15:45] <dakkar> I was going to mirror Shlomy's work for the perl5 bindings

[15:45] <FROGGS> dakkar: https://github.com/FROGGS/p6-XML-LibXML # though I've got unpushed changes....

[15:45] <dakkar> Shlomi, even

[15:46] <FROGGS> dakkar: if you intend to look more closely, I'll push more often

[15:46] <rindolf> dakkar: I am Shlomi Fish.

[15:46] <dakkar> rindolf: hi!

[15:46] <rindolf> dakkar: hi.

[15:46] <dakkar> sorry for mistyping your name

[15:47] <dakkar> FROGGS: https://www.thenautilus.net/cgit/WebCoso-p6/tree/lib/XML/LibXML.pm ← that's my exploratory attempt

[15:48] <dalek> perl6-examples: f1f8dc8 | (Shlomi Fish)++ | categories/euler/prob329-shlomif.p6:

[15:48] <dalek> perl6-examples: Add a solution to Euler #329

[15:48] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/f1f8dc82b3

[15:48] <FROGGS> dakkar: nice

[15:49] <dakkar> I was aiming to get the same API in perl5 and perl6 (eventually)

[15:50] <dalek> nqp: d96dcc1 | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (3 files):

[15:50] <dalek> nqp: Split cclass ops into a separate file.

[15:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d96dcc1b87

[15:50] <dalek> nqp: 84386f3 | (Pawel Murias)++ | src/vm/js/nqp-runtime/nfa.js:

[15:50] <dalek> nqp: [js] fix nfa bug

[15:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/84386f304c

[15:50] <dalek> nqp: d3b3e62 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[15:50] <dalek> nqp: [js] Fix regex bugs.

[15:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d3b3e62e41

[15:50] <rindolf> OK, it's working now and even runs under a minute here.

[15:50] *** domidumont left
[15:50] <rindolf> But my machine is pretty fast.

[15:50] <TimToady> skids: actually, I think I know how to fix the Seq thing

[15:51] <PerlJam> rindolf: maybe make youre #! line say "/usr/bin/perl6" or "/usr/bin/env perl6"  instead of "/usr/bin/perl"   :-)

[15:52] *** frodwith joined
[15:52] <rindolf> PerlJam: sure.

[15:52] <FROGGS> dakkar: I hope to not end up with the same api as in P5, because for one it is not very Perl 6ish and some stuff is just weird

[15:52] *** pmurias joined
[15:52] <rindolf> https://paste.debian.net/312199/ - seems like Perl 5 and Perl 6 execute it in roughly the same time.

[15:53] <tony-o> PerlJam++ on the env thing

[15:54] <FROGGS> dakkar: like I think that parse_string, parse_file, parse_fh etc etc do not make much sense in Perl 6

[15:54] <FROGGS> dakkar: I can give you a commit bit if you want...

[15:54] <FROGGS> dinner &

[15:55] *** travis-ci joined
[15:55] <travis-ci> NQP build passed. Pawel Murias '[js] Fix regex bugs.'

[15:55] <travis-ci> https://travis-ci.org/perl6/nqp/builds/80855483 https://github.com/perl6/nqp/compare/4740820dddbb...d3b3e62e41b2

[15:55] *** travis-ci left
[15:55] <dalek> perl6-examples: 3974007 | (Shlomi Fish)++ | categories/euler/prob329-shlomif.p6:

[15:55] <dalek> perl6-examples: Correct she-bang and use v6.

[15:55] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/3974007c89

[15:55] <rindolf> PerlJam: thanks!

[15:56] <dakkar> FROGGS: agree, we have multi-methods now ☺ I was mostly thinking about all the other methods and classes

[16:01] <nine> lizmat: endless recursion in live

[16:02] <nine> lizmat: called from add_source

[16:03] *** perl6_newbee joined
[16:03] *** pmurias left
[16:03] *** andreoss joined
[16:04] <lizmat> nine L823 ?

[16:05] *** Ven left
[16:05] <nine> lizmat: yes, looks like it

[16:05] <andreoss> perlbrew's exec runs command for each of perls, rakudbrews's exec runs it only for currently selected compiler 

[16:05] <andreoss> i believe it's wrong 

[16:06] <andreoss> can rakudobrew run command for all compilers? 

[16:10] <lizmat> nine: think I found t

[16:10] <nine> cool :)

[16:12] <lizmat> SupplyOperations, L48: I think it should refer to the source tap, not to the source

[16:12] <lizmat> L148 rather

[16:13] <nine> Sounds reasonable

[16:13] <dalek> roast: c2c13fb | TimToady++ | S06-signature/slurpy-params.t:

[16:13] <dalek> roast: make sure +args passes through Seq directly

[16:13] <dalek> roast: review: https://github.com/perl6/roast/commit/c2c13fbbf8

[16:13] <lizmat> hmmm.. wrong  :-(

[16:15] <dalek> rakudo/nom: 25c8d24 | TimToady++ | src/core/List.pm:

[16:15] <dalek> rakudo/nom: +args should bind a Seq directly, not via List

[16:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25c8d24c8e

[16:17] <lizmat> m: Supply.new.flat.flat.squish.tap   # weirder still, then maybe not

[16:17] <camelia> rakudo-moar bcde48: OUTPUT«Memory allocation failed; could not allocate 58608 bytes␤»

[16:17] *** larion joined
[16:17] <lizmat> if we have 2 identical methods out of SupplyOperations, followed by one from Supply, and tap that, this happens

[16:18] <lizmat> feels like a scoping issue on the SupplyOperations methods

[16:18] <moritz> does SupplyOperations uses roles that reference outer lexicals?

[16:19] <lizmat> yes to roles, but I don't see any outer lexical references (yet)

[16:19] *** telex left
[16:20] *** Sqirrel left
[16:20] *** telex joined
[16:21] <nine> lizmat: method live in SupplyOperations does indeed access the outer lexical scope

[16:21] <timotimo> are they supposed to scope over any lexicals?

[16:21] <timotimo> don't we usually have to push values in through the parameters?

[16:21] <nine> $source is the argument of grep, not available in the anonymous class

[16:21] <timotimo> i've recently been taught classes don't do closure semantics

[16:22] <nine> exactly that's the problem here

[16:22] <lizmat> ah, duh...

[16:22] <nine> Should be $!source, not $source

[16:23] * lizmat is testing

[16:23] <nine> Confirmed, bug fixed :)

[16:24] <timotimo> nice

[16:24] <timotimo> good job

[16:24] * timotimo afk for a bit

[16:24] <nine> moritz++ # excellent hint!

[16:24] <lizmat> thanks all: will commit fix (to other methods that suffer the same issue)

[16:30] <dalek> perl6-roast-data: f791d0f | coke++ | / (9 files):

[16:30] <dalek> perl6-roast-data: today (automated commit)

[16:30] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f791d0fd75

[16:32] <[Coke]> tools/contributors.pl6 is broken.

[16:32] <[Coke]> needs some post-GLR love.

[16:32] <lizmat> [Coke]: will do

[16:33] *** vendethiel joined
[16:33] <thou> hi, i'm wanting to do something like $match = Perl6::Grammar.parse($src); then use the parse to read out a list of identifiers, method names, pod chunks, etc. for making an indexed code browser. I've looked at Rakudo::Perl6::Parsing module but it's not working and seems to be a tough way to go (mucking with nqp-level stuff). Is there a better way to go about this?

[16:35] <dalek> rakudo/nom: d25a07a | lizmat++ | src/core/SupplyOperations.pm:

[16:35] <dalek> rakudo/nom: Fix for RT #126073

[16:35] <dalek> rakudo/nom: 

[16:35] <dalek> rakudo/nom: Problem was caused by thinko: when checking for a live source, the anonymous

[16:35] <dalek> rakudo/nom: class should check the attribute, not the original parameter being passed.

[16:35] <dalek> rakudo/nom: 

[16:35] <dalek> rakudo/nom: nine++ moritz++ timotimo++ for support in fixing this bug

[16:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d25a07a09d

[16:35] <timotimo> the grammar class is unable to function without the actions and a world object

[16:35] <timotimo> and then you will have something that also runs begin blocks and such

[16:36] <dalek> rakudo/nom: fb9f788 | lizmat++ | src/core/IO/Notification.pm:

[16:36] <dalek> rakudo/nom: Add convenience .IO to .IO.watch generated objects

[16:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb9f788fed

[16:37] <timotimo> thou, i have no good suggestion sadly

[16:38] <timotimo> but if you take care to properly handle quoting, you can basically just do a simple search through the code i imagine

[16:40] <nine> Perl cannot be properly parsed without running Perl code. That's been true for Perl 5 and is still true with Perl 6. It's where much of its power comes from.

[16:41] *** larion left
[16:41] <thou> Yeah, I was thinking of making a custom :actions() that would generate something more accessible, but I'm not sure how to proceed w/ that.

[16:42] <thou> Or run STD from Inline::Perl5 and get something from there? :-D

[16:44] *** telex left
[16:45] *** telex joined
[16:45] *** espadrine left
[16:45] <nine> thou: that would probably have been the very last use case I could have come up with for Inline::Perl5 ;)

[16:48] *** spider-mario joined
[16:49] <vendethiel> timotimo: another way would be to wait until runtim e and collect info there

[16:50] *** tokuhiro_ joined
[16:50] *** dakkar left
[16:52] *** abraxxa left
[16:52] <dalek> rakudo/nom: 3dfa856 | TimToady++ | src/core/List.pm:

[16:52] <dalek> rakudo/nom: call .cache on Seq if +@args used

[16:52] <dalek> rakudo/nom: 

[16:52] <dalek> rakudo/nom: Also, avoid returns in hot code.

[16:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3dfa85697c

[16:53] <dalek> roast: a78f857 | TimToady++ | S06-signature/slurpy-params.t:

[16:53] <dalek> roast: test +args vs +@args distinctions

[16:53] <dalek> roast: 

[16:53] <dalek> roast: +@args must be repeatable, while +args must not be

[16:53] <dalek> roast: review: https://github.com/perl6/roast/commit/a78f857c62

[16:54] *** tokuhiro_ left
[16:55] *** patrickz joined
[16:58] <masak> evening, #perl6

[17:00] <dalek> roast: 3165b8c | lizmat++ | S17-supply/on.t:

[17:00] <dalek> roast: Add test for #126073

[17:00] <dalek> roast: review: https://github.com/perl6/roast/commit/3165b8c85b

[17:00] <patrickz> Hi. I'm currently trying to build MoarVM on Windows using MSVC. It builds successfully, but the resulting moar.exe fails with exitcode -1073741819 when doing `MoarVM\moar.exe --libpath="src/vm/moar/stage0" "src/vm/moar/stage0/nqp.moarvm" -e "print('hi')"`

[17:00] <yoleaux> 12:18Z <tadzik> patrickz: ok, I'll look into it :)

[17:00] <patrickz> When running without arguments it does give the usage.

[17:01] *** tokuhiro_ joined
[17:01] <patrickz> Giving wrong paths for libpath or the nqp.moarvm file gives error messages.

[17:02] <patrickz> I suspect it's failing on some higher level but I have no idea how to look deeper. Any hints/ideas?

[17:02] <patrickz> tokuhiro_: plenv is quite an awesome tool. Thanks for building it!

[17:03] <lizmat> [Coke]: will look at contributors.pl after dinner&

[17:03] <patrickz> tokuhiro_: I'm currently trying to mimic some of it for Perl6 in rakudobrew

[17:06] *** tokuhiro_ left
[17:08] <[Coke]> lizmat++

[17:13] *** zakharyas left
[17:16] <cdc>  /pos

[17:16] *** muraiki joined
[17:20] *** espadrine joined
[17:24] *** thou left
[17:24] *** thou joined
[17:25] *** espadrine left
[17:30] *** lichtkind joined
[17:34] *** Sqirrel joined
[17:35] *** thou left
[17:36] *** domidumont joined
[17:36] <dalek> rakudo/nom: 25fed44 | TimToady++ | docs/ChangeLog:

[17:36] <dalek> rakudo/nom: added TimToady changes since last release

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25fed44462

[17:37] * TimToady has been busy...

[17:38] <muraiki> "New `supply`, `whenever` and `react` blocks for easy reactive programming" neat

[17:38] <muraiki> where can I find more info on those :D

[17:38] <flussence> just noticed in the backlog a mention about `cpupower frequency-set -g performance`... I just have a shell alias that does `echo performance | sudo tee /sys/devices/system/cpu/*/cpufreq/scaling_governor` for the same result, if that helps anyone :)

[17:38] <flussence> (on gentoo, installing cpupower downloads an entire kernel tarball...)

[17:39] <moritz> m: say 42

[17:39] <camelia> rakudo-moar 3dfa85: OUTPUT«42␤»

[17:39] <moritz> m: say 42␤say 43

[17:39] <camelia> rakudo-moar 3dfa85: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sQcATCcOCM␤Bogus postfix␤at /tmp/sQcATCcOCM:2␤------> 3say 427⏏5<EOL>␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement mo…»

[17:39] <moritz> TimToady: ^^ have you seen that error message?

[17:39] *** Ven joined
[17:39] <moritz> TimToady: I'm pretty sure it used to say something like "two terms in a row" and hint that there might be a forgotten semicolon

[17:40] <TimToady> yeah, I remember you mentioned it before

[17:40] <moritz> ok, then I'll stop bugging you :-)

[17:41] <TimToady> it's in my personal todo

[17:41] *** patrickz left
[17:42] <moritz> are +arg and +@arg in a signature the same?

[17:43] <TimToady> the latter caches

[17:43] <moritz> ok

[17:43] <TimToady> there's even tests for it now :)

[17:43] <moritz> m: sub f(+@arg) { say @arg }; f()

[17:43] <camelia> rakudo-moar 3dfa85: OUTPUT«[]␤»

[17:43] * moritz had hoped for a "slurpy but at least one argument" syntax, and that would naturally have been +@arg

[17:44] *** Ven left
[17:44] <TimToady> I decided this was worth stealing the + for

[17:45] <TimToady> there wasn't really any other good character left on the keyboard, and I got tired of typing *|

[17:45] <TimToady> and it just looks a lot cleaner

[17:46] <FROGGS> TimToady: do you also have the feeling that current rakudo+roast (including GMR) feels pretty RC0ish?

[17:46] *** patrickz joined
[17:48] *** perl6_newbee left
[17:48] *** mullagainn joined
[17:48] <mullagainn> so DBI has not been ported to perl6 yet?

[17:49] <FROGGS> mullagainn: only DBIish

[17:49] <mullagainn> ok

[17:49] <ilmari> or you can use DBI via Inline::Perl5

[17:50] <mullagainn> I know this question is asked a lot, but when will rakudo be stable?

[17:51] <jnthn> Stability (e.g. "won't break my code a few months down the line") is more a property of the language than the implementation

[17:51] <yoleaux> 15:04Z <FROGGS> jnthn: How hard would it be to allow rw attributes on CStructs?

[17:51] *** telex left
[17:51] <FROGGS> that too, yes

[17:51] *** telex joined
[17:51] <jnthn> So "when the language design is", and that's what we're aiming to commit to by December this year.

[17:51] <mullagainn> well let me re-phrase. When will it be production ready?

[17:52] <jnthn> Given a bunch of people already seem to be using it in production, "now"? :)

[17:52] <mullagainn> ok, so finalization of the language hopes to be done by December

[17:52] <mullagainn> Oh, I did not know that

[17:52] <flussence> .oO( has DBDI gone the way of parrot? )

[17:54] <FROGGS> mullagainn: given that we are preparing "The Release™", i expect that all will settle down in the next three months

[17:54] <jnthn> mullagainn: Trouble is that people's requirements for "production ready" vary a good bit. But are people using it to do stuff useful to their $dayjob? Sure.

[17:55] * colomon has actually been using p6 to do useful $dayjob work for about six years now…

[17:56] <mullagainn> I dont see a lot of XS modules out there.

[17:56] <muraiki> yeah, "production ready varies." I've found a few bugs but am essentially using p6 in production (well, I will be once this product launches)

[17:57] <TimToady> XS modules may only be accessed via Inline::Perl5

[17:57] <TimToady> Perl 6 has a different way to get to C

[17:57] <mullagainn> oh ok

[17:57] <TimToady> much, much cleaner

[17:58] *** Sqirrel_ joined
[17:58] <muraiki> yeah, the perl6 C stuff is hardcore

[17:58] *** Sqirrel_ left
[17:58] <muraiki> a beauty to behold

[17:58] <mullagainn> yeah. I use a lot of it though

[17:58] *** Sqirrel_ joined
[17:58] <mullagainn> SNMP vs Net::SNMP is about a 300% difference in speed

[17:58] <arnsholt> NativeCall (the C interaction stuff) is similar to Python's cffi, if you're familiar

[17:59] *** Sqirrel left
[17:59] <_itz> or perl5 NCI

[18:00] <muraiki> mullagainn: https://github.com/jnthn/zavolaj#getting-started

[18:00] <skids> ergh now I'm reminded that in addition to multidim and the new async stuff I also wanted to check out the new C++ thing.  Much indecision.

[18:01] <mullagainn> So are there any major performance upgrades in p6, specifically in the realm of network io?

[18:02] <FROGGS> mullagainn: we currently focus more on getting the semantics right... I expect that we care more about performance in a few months, not much earlier

[18:02] <mullagainn> That is actually a really bad question lol.

[18:02] <mullagainn> poorly worded i guess.

[18:02] <skids> More potential for performance than actually-optimized so far.  But the async code is likely to work out well in that area.

[18:03] <mullagainn> I have been using async for years in p5.

[18:03] <raiph> mullagainn: have you tried using Inline::Perl5 with one or more of the XS modules you regularly use with Perl 5?

[18:03] <mullagainn> But for almost everything I have to handle everything myself.

[18:04] <mullagainn> No. I am really just trying to learn more before I get started.

[18:04] <mullagainn> Kind of assess my challenges.

[18:04] <muraiki> coming from perl5, the async stuff in perl6 is, in my opinion, the best part :)

[18:05] <mullagainn> and at least we get real threads now :)

[18:05] <raiph> mullagainn: it would be very helpful to the P6 effort, even if not to yourself, if you simply hammered on being able to use your existing P5 mainstays with P6

[18:06] <mullagainn> Oh like re-writing all those modules I know and love?

[18:06] <muraiki> I should try loading our p5 stack via Inline::Perl5 again. I made it fairly far a few months ago... but something was causing it to die

[18:06] <muraiki> mullagainn: no, you can simply use them via Inline::Perl5

[18:06] <skids> mullagin: no just trying to use them with Inline::Perl5 and keeping nine++ very busy fixing anything that's broke :-)

[18:06] <muraiki> I was using Perl 5's YAML in Perl 6 without a problem

[18:06] <raiph> mullagainn: and in particular seeing if you can wrap P6 PAC (parallelism/async/concurrency) around your existing P5 codebase

[18:06] <muraiki> raiph: I think that's where my things started exploding

[18:07] <mullagainn> hmm, that is a good idea

[18:08] <mullagainn> any good reads on p6 PAC?

[18:08] <raiph> https://www.reddit.com/r/perl6/comments/3ittve/parallelism_concurrency_and_asynchrony_in_perl_6/

[18:10] <mullagainn> What is all this in the Rakudo Readme about Java?

[18:11] *** Peter_R joined
[18:11] <nine> muraiki: I still don't know if I need to adapt Inline::Perl5 better to the post GLR world. I works fine, but Perl 5 APIs may have become a bit more difficult to use due to the new (non-)flattening rules.

[18:11] <nine> muraiki: feedback would be greatly appreciated

[18:12] <raiph> mullagainn: in the near term the Rakudo Perl 6 compiler is focused on running on a VM designed for P6 called MoarVM

[18:13] <mullagainn> what on earth is that?

[18:13] <raiph> mullagainn: you could treat that as an unimportant implementation detail if you prefer

[18:14] <raiph> http://moarvm.org

[18:14] <jnthn> mullagainn: Rakudo can target different VMs; one of them is the JVM.

[18:15] <jnthn> If you don't want to do that, you can ignore those bits of the README :)

[18:17] <raiph> mullagainn: what are some examples of the P5 XS modules you regularly use?

[18:18] <mullagainn> SNMP (which is packaged in the net-snmp toolset)

[18:18] <mullagainn> JSON::XS

[18:18] <[Coke]> (christmas) we need to decide what platforms we are officially targeting, also, as we don't have parity on OS X at the moment.

[18:18] <mullagainn> Redis::Fast

[18:19] <jnthn> [Coke]: In what areas, ooc?

[18:19] <raiph> mullagainn: Could you try, say, JSON::XS with your Rakudo and confirm it works fine for you?

[18:20] <mullagainn> yes, I am compiling Rakudo now

[18:20] <mullagainn> want me to pm you or group?

[18:20] <tony-o> i'd be interested to know

[18:21] <mullagainn> k

[18:23] *** leont joined
[18:24] <FROGGS> [Coke]: I'd think we target windows, linux and osx (64bits, as usual) mainly

[18:24] <[Coke]> jnthn: many nativecall failures in make test.

[18:24] <raiph> mullagainn: to this channel at least at first

[18:24] <mullagainn> getting issues using panda

[18:24] <mullagainn> Use of uninitialized value of type Str in string context  in method update at

[18:24] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=124351

[18:25] <FROGGS> [Coke]: isnt there just one about an rt...?

[18:25] <FROGGS> [Coke]: weird... that did work on lizmat++'s box

[18:25] <raiph> mullagainn: do you know about rakudobrew?

[18:25] * [Coke] adds that one to the christmas ticket...

[18:25] <mullagainn> I do not

[18:25] <[Coke]> FROGGS: happy to give you more diagnostic info from my box.

[18:26] <mullagainn> like perlbrew but p6?

[18:26] <[Coke]> I am on 10.10.5. Just updated xcode today, will double check that.

[18:26] <FROGGS> [Coke]: ahh nvm, the original output is outdated...

[18:26] <mullagainn> This is perl6 version 2015.07.2 built on MoarVM version 2015.07

[18:26] <FROGGS> [Coke]: t/04-nativecall/16-rt125408.t fails everywhere

[18:26] <FROGGS> [Coke]: and the C++ tests do pass now

[18:26] <raiph> mullagainn: sorta, https://perl6advent.wordpress.com/2014/12/02/day-2-rakudobrew/

[18:27] * [Coke] double checks.

[18:27] <FROGGS> [Coke]: I'm going to look into t/04-nativecall/16-rt125408.t now

[18:27] <FROGGS> [Coke]++

[18:27] <[Coke]> FROGGS++!

[18:27] <muraiki> nine: sounds good, I'll hopefully have some time to test post-GLR Inline::Perl5 stuff soon

[18:29] <[Coke]> FROGGS: closed 124351.

[18:30] <FROGGS> cool :o)

[18:30] <[Coke]> RT: 1,015 tickets; 3 [GLR] tickets, 3 Christmas blockers, 8 testneeded

[18:33] <[Coke]> is there a consensus that RT should be for bugs, NYIs that are spec'd, but not for feature requests?

[18:33] <moritz> FROGGS: I've notices there aren't any module loader changes in docs/ChangeLog

[18:33] <FROGGS> moritz: ups

[18:34] <moritz> FROGGS: is there anything user-visible worthy of a changelog entry?

[18:34] <[Coke]> (basically asking for RT #61602)

[18:34] <FROGGS> I'll add a line

[18:34] <[ptc]> m: my (1, -1 X 2, -2)

[18:34] <camelia> rakudo-moar 25fed4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/b1e8BilGbf␤Malformed parameter␤at /tmp/b1e8BilGbf:1␤------> 3my (1,7⏏5 -1 X 2, -2)␤    expecting any of:␤        formal parameter␤»

[18:34] <moritz> [Coke]: feature requests should be issues on perl6/specs on github

[18:34] <[ptc]> m: my say(1, -1 X 2, -2)

[18:34] <camelia> rakudo-moar 25fed4: OUTPUT«5===SORRY!5===␤Type 'say' is not declared␤at /tmp/gAo_eL__sh:1␤------> 3my say7⏏5(1, -1 X 2, -2)␤Malformed my␤at /tmp/gAo_eL__sh:1␤------> 3my7⏏5 say(1, -1 X 2, -2)␤␤»

[18:34] <[ptc]> m: say(1, -1 X 2, -2)

[18:34] <camelia> rakudo-moar 25fed4: OUTPUT«((1 2) (1 -2) (-1 2) (-1 -2))␤»

[18:34] <FROGGS> moritz: a user can now CompUnit.new(...).load

[18:35] <[ptc]> m: say (1, -1 X 2, -2).flat

[18:35] <camelia> rakudo-moar 25fed4: OUTPUT«(1 2 1 -2 -1 2 -1 -2)␤»

[18:35] <[Coke]> ok. I'm going to close 61602 with a final note pointing back to the already extant spec ticket.

[18:36] *** andreoss left
[18:37] <FROGGS> uhh, github has issues

[18:37] <[Coke]> m: say :10(':16<99>')

[18:37] <camelia> rakudo-moar 25fed4: OUTPUT«153␤»

[18:38] * jnthn is glad to see TimToady++ decided the .gist behavior for allomorphs was just the string representation :)

[18:38] <[Coke]> m: say :10('99'), :16('99'), :10('0x99'), :10(':16<99>') #RT #77624

[18:38] <camelia> rakudo-moar 25fed4: OUTPUT«99153153153␤»

[18:38] <[Coke]> m: say (:10('99'), :16('99'), :10('0x99'), :10(':16<99>')).join(":") #RT #77624

[18:38] <camelia> rakudo-moar 25fed4: OUTPUT«99:153:153:153␤»

[18:39] <[ptc]> m: (1, -1 X 2, -2), (2, -2 X 1, -1)

[18:39] <camelia> rakudo-moar 25fed4: ( no output )

[18:39] <[ptc]> m: say (1, -1 X 2, -2), (2, -2 X 1, -1)

[18:39] <camelia> rakudo-moar 25fed4: OUTPUT«((1 2) (1 -2) (-1 2) (-1 -2))((2 1) (2 -1) (-2 1) (-2 -1))␤»

[18:40] <[ptc]> sorry for the mistakes; I must be tired...

[18:40] <[ptc]> any ideas how I could flatten that nicely?

[18:40] <[ptc]> I've tried ((1, -1 X 2, -2).flat, (2, -2 X 1, -1).flat).flat  which works, but is horrible...

[18:40] <TimToady> jnthn: well, ShimmerFairy++ for pushing the allomorph stuff through

[18:40] <moritz> m: say flat (1, -1 X 2, -2), (2, -2 X 1, -1)

[18:40] <camelia> rakudo-moar 25fed4: OUTPUT«(1 2 1 -2 -1 2 -1 -2 2 1 2 -1 -2 1 -2 -1)␤»

[18:40] <moritz> [ptc]: ^^ like this?

[18:40] <[Coke]> m: say <1 2 3 4 5 10>.max

[18:40] <camelia> rakudo-moar 25fed4: OUTPUT«10␤»

[18:41] <jnthn> TimToady: Oh, indeed. I'm generally happy with it, just wasn't with that part :)

[18:41] <[ptc]> moritz: yes.  I'm just blown away that I never stumbled across that option!

[18:41] <[Coke]> m: <1 2 3>[2].WHAT.say

[18:41] <camelia> rakudo-moar 25fed4: OUTPUT«(IntStr)␤»

[18:42] <[ptc]> m: my @directions = (1, -1 X 2, -2), (2, -2 X 1, -1); say flat @directions

[18:42] <camelia> rakudo-moar 25fed4: OUTPUT«(((1 2) (1 -2) (-1 2) (-1 -2)) ((2 1) (2 -1) (-2 1) (-2 -1)))␤»

[18:43] <[ptc]> moritz: ^^ that's the original problem I'm trying to solve.  Maybe the code doesn't need to be an array anymore?

[18:43] <dalek> rakudo/nom: 78c4805 | FROGGS++ | docs/ChangeLog:

[18:43] <dalek> rakudo/nom: mention CompUnit changes, moritz++

[18:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/78c48056d7

[18:44] <moritz> m: my @directions = (1, -1 X 2, -2), (2, -2 X 1, -1); say flat |@directions

[18:44] <camelia> rakudo-moar 25fed4: OUTPUT«(((1 2) (1 -2) (-1 2) (-1 -2)) ((2 1) (2 -1) (-2 1) (-2 -1)))␤»

[18:44] <moritz> huh

[18:44] <moritz> m: my @directions = (1, -1 X 2, -2), (2, -2 X 1, -1); say @directions.flat

[18:44] <camelia> rakudo-moar 25fed4: OUTPUT«(((1 2) (1 -2) (-1 2) (-1 -2)) ((2 1) (2 -1) (-2 1) (-2 -1)))␤»

[18:44] * moritz thorougly surprised

[18:44] <[ptc]> another question: why does .flat seem to work differently to the flat function?

[18:45] <[Coke]> m: say ("foo" & "a nice old foo") ~~ /foo/

[18:45] <camelia> rakudo-moar 25fed4: OUTPUT«｢all(Failure.new(exception => X::OutOfRange.new(what => "Start argument to substr", got => "5", range => "0..3", comment => "use *5 if you want to index relative to the end"), backtrace => Backtrace.new), "e o")｣␤»

[18:45] <[ptc]> m: my $directions = (1, -1 X 2, -2), (2, -2 X 1, -1); say $directions.flat

[18:45] <camelia> rakudo-moar 25fed4: OUTPUT«(1 2 1 -2 -1 2 -1 -2)␤»

[18:45] <[ptc]> hrm, my rakudo doesn't give that output...

[18:45] <jnthn> moritz: An Array already is flat, so it returns identity

[18:45] * [ptc] thinks an update of rakudo is probably in order

[18:46] <[Coke]> r: say "foo"[1..*]

[18:46] <camelia> rakudo-{moar,jvm} 25fed4: OUTPUT«()␤»

[18:47] <[Coke]> r: say "foo"[2]

[18:47] <[ptc]> s/update/local update/

[18:47] <camelia> rakudo-{moar,jvm} 25fed4: OUTPUT«Index out of range. Is: 2, should be in 0..0␤  in block <unit> at /tmp/tmpfile:1␤␤Actually thrown at:␤  in block <unit> at /tmp/tmpfile:1␤␤»

[18:47] <[Coke]> r: say "foo"[2..*]

[18:47] <camelia> rakudo-{moar,jvm} 25fed4: OUTPUT«()␤»

[18:47] <raiph> mullagainn: I have a panda error following a rakudobrew refresh; investigating

[18:47] <[Coke]> (RT #112216)

[18:48] <[Coke]> m: use MONKEY_TYPING; augment class Any { method foo {say "FOO"}}; "barf".foo

[18:48] <camelia> rakudo-moar 25fed4: OUTPUT«===SORRY!===␤Could not find MONKEY_TYPING in any of:␤  file#/home/camelia/.perl6/2015.07.1-973-g25fed44/lib␤  inst#/home/camelia/.perl6/2015.07.1-973-g25fed44␤  file#/home/camelia/rakudo-inst-2/share/perl6/lib␤  file#/home/camelia/rakudo-inst-2/s…»

[18:48] <[Coke]> m: use MONKEY-TYPING; augment class Any { method foo {say "FOO"}}; "barf".foo

[18:48] <camelia> rakudo-moar 25fed4: OUTPUT«Method 'foo' not found for invocant of class 'Str'␤  in block <unit> at /tmp/c5n5raKkz3:1␤␤»

[18:48] <[Coke]> jnthn: ^^ should that work?

[18:49] <[Coke]> (if not, please gently reject RT #115618)

[18:49] <FROGGS> it would have to clear the method cache somehow, right?

[18:49] <psch> for sub-classes even

[18:49] <FROGGS> m: use MONKEY-TYPING; augment class Any { method foo {say "FOO"}}; augment class Str { }; "barf".foo

[18:49] <camelia> rakudo-moar 25fed4: OUTPUT«FOO␤»

[18:50] <psch> ISTR some discussion that it will never cascade downwards automatically

[18:50] <jnthn> [Coke]: Eventually, yes

[18:50] <jnthn> But we're not so smart at the cache invalidation yet

[18:50] * psch probably misunderstood or misremembers the discussion then

[18:51] <dalek> rakudo/nom: f0044bc | (Stefan Seifert)++ | docs/ChangeLog:

[18:51] <dalek> rakudo/nom: Add ChangeLog entry for backwards incompatible lines() fix

[18:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0044bc2b6

[18:51] <FROGGS> cache invalidation is probably the biggest problem in software engineering space :o)

[18:51] <dalek> rakudo/nom: 1e70188 | TimToady++ | src/Perl6/World.nqp:

[18:51] <dalek> rakudo/nom: notice TTIAR across line before Bogus postfix

[18:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e70188c60

[18:52] <TimToady> moritz: ^^

[18:52] *** brrt joined
[18:53] <TimToady> lunch &

[18:53] *** clearkruti joined
[18:53] <[Coke]> RT: 1,014 tickets; 4 [GLR] tickets, 3 Christmas blockers, 11 testneeded

[18:53] *** brrt left
[18:53] *** brrt joined
[18:57] *** mullagainn left
[19:02] *** tokuhiro_ joined
[19:02] <nine> m: my $a = 1; my $b = 2; $a = (|$a, $b); say $a[0]

[19:02] <camelia> rakudo-moar 25fed4: OUTPUT«1␤»

[19:03] <nine> m: my $a = 1; my $b = 2; $a = ($a, $b); say $a[0]

[19:03] <camelia> rakudo-moar 25fed4: OUTPUT«(\List_139651993582776 = (List_139651993582776 2))␤»

[19:04] <nine> I think we can safely reject this ticket. The bug has never been in list assignment and always in .perl. And it's fixed even there.

[19:04] <[ptc]> this is weird.  I just rebuilt moar, nqp, rakudo, however this code works...

[19:04] <[ptc]> m: my $directions = (1, -1 X 2, -2), (2, -2 X 1, -1); say $directions.flat

[19:04] <camelia> rakudo-moar 25fed4: OUTPUT«(1 2 1 -2 -1 2 -1 -2)␤»

[19:04] *** FROGGS left
[19:04] <[ptc]> whereas in my rakudo I get This Seq has already been iterated, and its values consumed  (within the repl)

[19:05] *** diana_olhovik_ joined
[19:06] <[ptc]> m: my $directions = (1, -1 X 2, -2), (2, -2 X 1, -1); my $blah = $directions.flat;

[19:06] <camelia> rakudo-moar 25fed4: ( no output )

[19:06] <nine> [ptc]: I can see why: the repl prints the result of the last statement, thereby consuming the Seq returned by X

[19:06] <nine> psch: when you then try to print them again, the Seq will rightfully complain

[19:06] <brrt> .tell FROGGS i'm very interested to see what code has a JIT bug

[19:06] <yoleaux> 14 Sep 2015 22:05Z <meisl> brrt: oh-wow...

[19:06] <yoleaux> brrt: I'll pass your message to FROGGS.

[19:06] <yoleaux> 14 Sep 2015 22:05Z <meisl> brrt: never had such a nice welcome - and such an immediate one!

[19:06] <PerlJam> someone mentioned earlier about p6 smartly calling .cache   Maybe this is why

[19:06] <yoleaux> 14 Sep 2015 22:06Z <meisl> brrt: I *am* interested in Aho-style tiling, will have a look.

[19:06] <[ptc]> nine, psch: thanks.  Was wondering what I was missing...

[19:07] <brrt> .botsnak

[19:07] *** tokuhiro_ left
[19:07] <brrt> .botsnack

[19:07] <yoleaux> :D

[19:07] <psch> nine, [ptc]: ...i'm not sure how i got involved in that discussion :S

[19:08] <psch> oh, probably inattentive tabbing!

[19:08] <muraiki> hrm, I just updated rakudobrew, built perl6, and build panda. if I try to `panda install` anything, I get a type check failure. is anyone else running into this?

[19:08] <dalek> perl6-examples: 5963e85 | paultcochrane++ | categories/99-problems/P91-edpratomo.pl:

[19:08] <dalek> perl6-examples: [99probs] fixed P91-edpratomo post GLR

[19:08] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/5963e85a00

[19:08] *** brrt left
[19:09] *** FROGGS joined
[19:09] <PerlJam> [ptc]: That code would work in the repl too as long as you put them on one line  :)

[19:09] <raiph> muraiki: same here

[19:09] <muraiki> raiph: :(

[19:10] <muraiki> I'll open an issue on panda

[19:10] <raiph> muraiki: just installed zef (for first time) to see how that does...

[19:10] <PerlJam> bah!

[19:10] * [Coke] finds https://i.imgur.com/uW4Zhm7.png which may be relevant to this discussion.

[19:10] *** brrt joined
[19:10] <PerlJam> muraiki: I think I just fixed it, if someone would merge my PR

[19:10] <dalek> rakudo/nom: ecdf815 | skids++ | src/Perl6/ (2 files):

[19:10] <dalek> rakudo/nom: Do not shortcut anon capture param if it has subsig or post constraint

[19:10] <dalek> rakudo/nom: 

[19:10] <dalek> rakudo/nom: Fixes :(| ($f)) but due to a parse issue, not :(|($f))

[19:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ecdf8152b6

[19:10] <dalek> rakudo/nom: fb852ed | niner++ | src/Perl6/ (2 files):

[19:10] <dalek> rakudo/nom: Merge pull request #536 from skids/binder2

[19:10] <dalek> rakudo/nom: 

[19:10] <dalek> rakudo/nom: Do not shortcut anon capture param if it has subsig or post constraint

[19:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb852ed905

[19:10] <muraiki> PerlJam: oh, thanks!

[19:10] <PerlJam> or give me a commit bit on the panda repo

[19:11] *** patrickz left
[19:11] *** domidumont left
[19:11] <muraiki> weird

[19:11] <psch> so S03-metaops/hyper.t breaks on test 312 (l:907) but writing lines 904 to 908 to a file and running that files on the equivalent of l:908...

[19:11] <muraiki> it says your commit was merged 3 hours ago

[19:11] <[ptc]> PerlJam: thanks :-)  I think I'm a bit mentally tired to think 100% straight atm.

[19:11] <PerlJam> muraiki: that was a different one.   I just realized that the same fix was needed in multiple places.

[19:11] *** thou joined
[19:11] <[ptc]> probably time to avoid the keyboard

[19:11] <muraiki> perljam: oh, I get it. thanks again

[19:12] <psch> s/that files on/that file breaks on/ 

[19:13] <FROGGS> PerlJam: done

[19:13] <yoleaux> 19:06Z <brrt> FROGGS: i'm very interested to see what code has a JIT bug

[19:14] <PerlJam> FROGGS++ danke

[19:14] <FROGGS> PerlJam: gern geschehen :o)

[19:17] <psch> https://gist.github.com/peschwa/149552262ee830d90fc5 # spooky state hiding somewhere in HYPER..?

[19:18] *** [Sno] left
[19:18] *** mullagainn joined
[19:18] <mullagainn> back

[19:18] <mullagainn> still getting erros with panda

[19:19] <mullagainn> Type check failed in assignment to '$prefix'; expected 'Str' but got 'List'

[19:19] <muraiki> mullagainn: it was just fixed, hehe

[19:19] <mullagainn> lolol

[19:19] <muraiki> muraiki: do `rakudobrew build-panda` assuming you are using rakudobrew

[19:19] <mullagainn> ok

[19:19] <mullagainn> lol

[19:21] <mullagainn> SInce I just did, do I need to clear it out or anything?

[19:21] <PerlJam> Maybe "rakudobrew nuke moar" to start from scratch, but I wouldn't think you'd need to.

[19:21] <raiph> hmm. panda still not working for me; doing rakudobrew nuke moar and trying over

[19:22] <dalek> rakudo/nom: 9363e00 | (Steve Mynott)++ | src/core/Deprecations.pm:

[19:22] <dalek> rakudo/nom: remove Sept part of deprecated message

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9363e002de

[19:22] <dalek> rakudo/nom: 0b47248 | (Will Coleda)++ | src/core/Deprecations.pm:

[19:22] <dalek> rakudo/nom: Merge pull request #537 from stmuk/nom

[19:22] <dalek> rakudo/nom: 

[19:22] <dalek> rakudo/nom: remove Sept part of deprecated message

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0b4724857c

[19:23] *** brrt left
[19:24] *** mullagainn left
[19:26] <nine> psch: what do you mean?

[19:27] <psch> nine: i think "< nine> psch: when you then try to print them again, the Seq will rightfully complain" was mis-addressed to me :)

[19:28] <psch> (the gist is pretty clear, but that's probably not what you're asking about...)

[19:29] <raiph> mullagainn, muraiki, PerlJam: needed a nuke for me, panda now seems to be working again

[19:29] <nine> psch: oh the first message was a tab completion screw up. The second however was about the spooky state thing

[19:30] <muraiki> raiph: yeah, FROGGS merged PerlJam's fix. :)

[19:30] <psch> nine: oh, okay.  the first three evals in the gist show <<+>>, <<+<< and >>+>> not-failing when run alone

[19:30] <raiph> muraiki: just sayin' I had to do a nuke to get it to work

[19:31] <PerlJam> doesn't "rakudobrew build-panda" fetch the latest one?

[19:31] <psch> nine: the last two show different orders of those three hypers fail

[19:31] <muraiki> PerlJam: raiph: Yeah, `rakudobrew build-panda` fixed it for me without a nuke

[19:31] <muraiki> assuming nuke means erase everything and start over from scratch

[19:31] <nine> psch: I cannot reproduce those failures here

[19:31] <psch> nine: are you running r-j? :)

[19:32] <nine> psch: ah, that's it!

[19:32] <psch> j: my @a = 1, 2, 3; @a >>+>> (); @a <<+>> (); @a <<+<< ()

[19:32] <camelia> rakudo-jvm 1e7018: OUTPUT«Cannot call HYPER(Sub+{<anon>}+{Precedence}, Int, Int, Int); none of these signatures match:␤    (&op, \left, \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \left, Associative:D \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \l…»

[19:34] <nine> j: my @a = 1, 2, 3; @a >>+>> (); @a <<+>> ();

[19:34] <camelia> rakudo-jvm 1e7018: ( no output )

[19:34] <nine> j: my @a = 1, 2, 3; @a >>+>> (); @a <<+<< ()

[19:34] <camelia> rakudo-jvm 1e7018: ( no output )

[19:34] <nine> j: my @a = 1, 2, 3; @a <<+>> (); @a <<+<< ()

[19:34] <camelia> rakudo-jvm 1e7018: ( no output )

[19:34] <nine> weird

[19:37] <psch> yeah

[19:37] <psch> it's the third one that triggers it

[19:37] <psch> but like, not really i guess

[19:37] <nine> j: my @a = 1, 2, 3; @a >>+>> (); @a >>+>> (); @a >>+>> ();

[19:37] <camelia> rakudo-jvm 1e7018: OUTPUT«Cannot call HYPER(Sub+{<anon>}+{Precedence}, Int, Any, Int); none of these signatures match:␤    (&op, \left, \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \left, Associative:D \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \l…»

[19:37] <psch> 'cause in hyper.t there's a lot more than three

[19:37] <nine> j: my @a = 1, 2, 3; @a >>+>> (); @a >>+>> ();

[19:37] <camelia> rakudo-jvm 1e7018: OUTPUT«Cannot call HYPER(Sub+{<anon>}+{Precedence}, Int, Any, Int); none of these signatures match:␤    (&op, \left, \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \left, Associative:D \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \l…»

[19:37] <nine> twice in the same direction?

[19:38] <psch> oh

[19:38] <nine> j: my @a = 1, 2, 3; @a <<+<< (); @a <<+<< ();

[19:38] <psch> i hadn't looked for that yet!

[19:38] <camelia> rakudo-jvm 1e7018: ( no output )

[19:38] <dalek> doc: b0a6ed3 | (David H. Adler)++ | lib/Language/variables.pod:

[19:38] <dalek> doc: Fixed code example for C<state>

[19:38] <dalek> doc: review: https://github.com/perl6/doc/commit/b0a6ed3cf7

[19:38] <psch> j: my @a = 1, 2, 3; @a <<+>> (); @a <<+>> ();

[19:38] <nine> j: my @a = 1, 2, 3; @a >>+<< @a; @a >>+<< @a;

[19:38] <camelia> rakudo-jvm 1e7018: OUTPUT«Cannot call HYPER(Sub+{<anon>}+{Precedence}, Int, Int, Int); none of these signatures match:␤    (&op, \left, \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \left, Associative:D \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \l…»

[19:38] <camelia> rakudo-jvm 1e7018: ( no output )

[19:38] <psch> uhh

[19:38] <psch> oh

[19:39] <raiph> mullagainn: PerlJam++'s fix plus muraiki++'s `rakudobrew build-panda` worked for me; are you too now up and running with panda?

[19:39] <psch> j: my @a = 1, 2, 3; @a <<+<< (); @a <<+>> ();

[19:39] <camelia> rakudo-jvm 1e7018: ( no output )

[19:39] <psch> j: my @a = 1, 2, 3; @a >>+>> (); @a <<+>> ();

[19:39] <camelia> rakudo-jvm 1e7018: OUTPUT«Cannot call HYPER(Sub+{<anon>}+{Precedence}, Int, Int, Int); none of these signatures match:␤    (&op, \left, \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \left, Associative:D \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \l…»

[19:40] <TimToady> j: my @a = 1, 2, 3; @a >>+>> (); $@a <<+>> ();

[19:40] <camelia> rakudo-jvm 1e7018: OUTPUT«Cannot call HYPER(Sub+{<anon>}+{Precedence}, Int, Int, Int); none of these signatures match:␤    (&op, \left, \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \left, Associative:D \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \l…»

[19:40] <psch> that looks like it's about two dwimmy rhs..? (assuming "it points outward to dwim" is the right semantics)

[19:40] <TimToady> j: my @a = 1, 2, 3; $@a >>+>> (); $@a <<+>> ();

[19:40] <camelia> rakudo-jvm 1e7018: OUTPUT«Cannot call HYPER(Sub+{<anon>}+{Precedence}, Int, Int, Int); none of these signatures match:␤    (&op, \left, \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \left, Associative:D \right, :$dwim-left, :$dwim-right)␤    (&op, Associative:D \l…»

[19:43] *** hlelo joined
[19:43] *** mullagainn joined
[19:43] <mullagainn> panda worked

[19:43] *** telex left
[19:44] *** telex joined
[19:45] <mullagainn> use Inline::Perl5;

[19:45] <mullagainn> use JSON::XS::from<Perl5>;

[19:45] <mullagainn> my $json = JSON::XS.new();

[19:45] <TimToady> m: say 42␤say 43

[19:45] <camelia> rakudo-moar 1e7018: OUTPUT«5===SORRY!5=== Error while compiling /tmp/HfGJNIZa9Z␤Two terms in a row across lines (missing semicolon or comma?)␤at /tmp/HfGJNIZa9Z:2␤------> 3say 427⏏5<EOL>␤    expecting any of:␤        infix␤        infix stopper␤        postfi…»

[19:46] <mullagainn> ===SORRY!===

[19:46] <mullagainn> Could not find JSON::XS::from in any of:

[19:46] <raiph> mullagainn: single colon before the 'from'

[19:46] <mullagainn> aah

[19:46] <mullagainn> ok

[19:46] <mullagainn> thanks

[19:47] <PerlJam> That could probably use a more awesome message as it's likely to be a commonish error.

[19:47] <mullagainn> no errors

[19:47] <mullagainn> slow to start though

[19:48] <mullagainn> I tried to load SNMP.pm and I got a Do no know how to load code from perl5

[19:48] <mullagainn> grr

[19:48] <mullagainn> another typo

[19:48] <mullagainn> I am not used to using capital P in perl

[19:49] *** colomon left
[19:49] *** colomon_ joined
[19:49] <raiph> mullagainn: fwiw, decent Rakudo module loading performance needs module precompilation but precomp was disabled a week or so ago pending changing where it happens

[19:50] <mullagainn> oh, so it will be fixed eventaually

[19:50] <PerlJam> all things will be "fixed" eventually :-)

[19:51] *** hlelo left
[19:51] <mullagainn> lol

[19:51] <skids> Ohhh... I *thought* something seemed slower these last couple of days but couldn't put my finger on it.

[19:54] <dalek> doc: 2fda12d | paultcochrane++ | lib/Type/List.pod:

[19:54] <dalek> doc: Fix example output for map post GLR

[19:54] <dalek> doc: review: https://github.com/perl6/doc/commit/2fda12d948

[19:54] * [Coke] wonders why the first part of the nqp build step is to tag and push. That seems premature.

[19:54] <[Coke]> er, nqp -release- steps

[19:56] <[Coke]> I'm going to remove parrot from the nqp release information. No one is currently maintaining that, and there are known test failures.

[19:56] <raiph> mullagainn: do you think either or both of the ::from and <perl5> errors need a better error message?

[19:57] <[Coke]> ... ugh. except there's stuff that exists only in the parrot Makefile.

[19:57] *** telex left
[19:57] <mullagainn> is there something wrong with this syntax?

[19:58] <mullagainn> y $sess = SNMP::Session.new( 'DestHost' => $ip, 'Community' => $community, 'Version' => 2 );

[19:58] <mullagainn> my**

[19:58] *** telex joined
[19:59] <mullagainn> raiph: yes probably

[20:00] <mullagainn> I am getting this.

[20:00] <mullagainn> Could not find symbol '&Session'

[20:00] <mullagainn>   in method AT-KEY at /opt/nms/.rakudobrew/moar-nom/install/share/perl6/runtime/CORE.setting.moarvm:1

[20:00] <mullagainn>   in block <unit> at ./json:15

[20:01] <[ptc]> m: say ((1, 2), <a b>).flatmap(&uc).join('|');

[20:01] <camelia> rakudo-moar 0b4724: OUTPUT«1 2|A B␤»

[20:01] <[ptc]> m: say ((1, 2), <a b>).map(&uc).join('|');

[20:01] <camelia> rakudo-moar 0b4724: OUTPUT«1 2|A B␤»

[20:02] <[ptc]> hrm, according to the docs, flatmap should give 1|2|A|B as output

[20:03] <nine> mullagainn: that's a nown limitation. Try use SNMP:from<Perl5>; use SNMP::Session:from<Perl5>;

[20:03] <nine> mullagainn: I only create a Perl 6 class for the use'd package, not any sub-packages that may load.

[20:06] <mullagainn> oooh

[20:06] <mullagainn> ok

[20:06] <nine> Unfortunately it's not exactly straight forward to find out which packages are loaded in a use statement.

[20:07] <mullagainn> Can't locate SNMP/Session.pm in @INC (

[20:07] <dalek> rakudo/nom: 643eb6d | TimToady++ | src/Perl6/Grammar.nqp:

[20:07] <dalek> rakudo/nom: correctly detect malformed parameters

[20:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/643eb6d9f5

[20:07] <mullagainn> SNMP::Session is within SNMP

[20:08] <nine> mullagainn: ok, till that's fixed, you can always do; use Inline::Perl5; my $p5 = Inline::Perl5.new; my $session = $p5->invoke('SNMP::Session', 'new', DestHost => $ip, Community => $community, Version => 2);

[20:09] <mullagainn> ok.

[20:09] <mullagainn> thanks. That will work ok

[20:10] <nine> This worked for me: perl6 -e 'use Inline::Perl5; my $p5 = Inline::Perl5.new; $p5.use("SNMP"); my $session = $p5.invoke("SNMP::Session", "new", DestHost => "127.0.0.1", Community => "public", Version => 2)'

[20:14] *** darutoko left
[20:14] <[Coke]> raiph: when opening a ticket, if there's not that much text, inline the text so it's easy for someone to write a test or retry the bug without having to click through.

[20:14] <[Coke]> linking back for more discussion is always awesome, keep doing that.

[20:14] <[Coke]> raiph++

[20:15] <PerlJam> nine: how do you create Perl 6 classes at all?  I mean, someone could name a file Foo.pm that only has package Bar in it (no Foo package)

[20:15] *** telex left
[20:16] *** telex joined
[20:16] *** telex left
[20:18] <nine> PerlJam: currently I just create a Foo class. Once I implement support for actually trying to figure out which packages were loaded, this will be gone.

[20:18] *** telex joined
[20:19] <muraiki> nine: I got a "*** longjmp causes uninitialized stack frame ***" crash when trying to run the same perl5 function in two different start blocks :(

[20:20] *** diakopter joined
[20:20] *** kenhat joined
[20:20] <muraiki> unfortunately this is proprietary code so I can't share it... I'm not really certain what I can give you to help diagnose what happened

[20:21] <dalek> roast: a8f9dca | TimToady++ | S13-overloading/typecasting- (3 files):

[20:21] <dalek> roast: remove obsolete overloading tests

[20:21] <dalek> roast: review: https://github.com/perl6/roast/commit/a8f9dca88a

[20:22] <dalek> rakudo/nom: be0fdeb | TimToady++ | t/spectest.data:

[20:22] <dalek> rakudo/nom: remove obsolete overloading tests

[20:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/be0fdebdf6

[20:22] <nine> muraiki: short answer: don't run Perl 5 code from different threads. Perl 5 code is not thread safe.

[20:23] *** espadrine joined
[20:23] <muraiki> ah, I thought somebody before said to try using perl5 code with the various async/concurrent features :(

[20:23] <muraiki> that's what I figured, though

[20:23] <nine> muraiki: you may create multiple Perl 5 objects (provided your Perl is compiled with -DMULTIPLICITY) and use them in different threads. I haven't tried that in almost a year though, so there may be bugs.

[20:24] <nine> multiple Inline::Perl5 objects that is

[20:24] <muraiki> ah yeah, I think I had done that about 6 months ago

[20:24] <leont> Yeah, using one interpreter in multiple threads would be "fun"

[20:24] <PerlJam> nine: you could inspect (keys %::) recursively to see what symbols show up when you use a P5 module.  I don't know if you'll have enough information to decide which you should create as P6 classes though.

[20:24] *** pyrimidine left
[20:24] <muraiki> it makes sense now; I assumed I'd automatically get one interpreter per p6 thread

[20:24] <nine> PerlJam: certainly worth a try

[20:24] *** pyrimidine joined
[20:24] <nine> Ok, off to bed now. Good night #perl6!

[20:24] <muraiki> night

[20:25] <PerlJam> nine: good night

[20:25] <TimToady> o/

[20:25] <dalek> roast: c702610 | usev6++ | S02-literals/radix.t:

[20:25] <dalek> roast: Mention RT #77624 for existing test

[20:25] <dalek> roast: review: https://github.com/perl6/roast/commit/c702610633

[20:25] *** telex left
[20:25] *** kaare_ left
[20:26] <masak> good nine, night

[20:26] *** telex joined
[20:26] <muraiki> night nine good

[20:26] *** lizmat left
[20:27] *** lizmat joined
[20:28] <btyler_> muraiki: one thing I was playing around with a while ago was to use OO::Monitors to manage a perl5 object worker pool, which is nice if you don't want to have an unbounded number of perl5 interpreters in your process :)

[20:28] <btyler_> maybe I can find the gist, moment

[20:28] <muraiki> btyler_: oh, that sounds really nice

[20:28] <masak> m: use Test; done

[20:28] <camelia> rakudo-moar 643eb6: ( no output )

[20:28] <dalek> rakudo/nom: 47b4c1a | lizmat++ | tools/contributors.pl6:

[20:28] <dalek> rakudo/nom: Fix contributers script, it needed a slip

[20:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47b4c1a5dd

[20:28] <masak> ...why doesn't `done` output "1..0" in the above case?

[20:29] <lizmat> [Coke]   ^^^

[20:29] <masak> m: use Test; ok 1; done;

[20:29] <camelia> rakudo-moar 643eb6: OUTPUT«ok 1 - ␤»

[20:29] <masak> this seems to be a recent regression.

[20:29] <lizmat> masak: because it's called "done-testing" nowadays

[20:29] <lizmat> m: done

[20:29] <camelia> rakudo-moar 643eb6: ( no output )

[20:29] <masak> lizmat: :( :( :(

[20:29] <lizmat> done is part of the supply sugar

[20:29] <masak> lizmat: back several years ago we managed to rename it from `done_testing` to `done` :(

[20:30] <lizmat> m: use Test; done-testing

[20:30] <camelia> rakudo-moar 643eb6: OUTPUT«1..0␤»

[20:30] <lizmat> yes, I know

[20:30] <lizmat> but it was felt that the syntactic sugar for supplies was more needed than "done" from Test.pm

[20:30] <masak> ok.

[20:30] <lizmat> since you probably shouldn't be using "done", but plan your tests anyway  :-)

[20:31] <jnthn> Yes, I think the suply sugar deserved the keyword

[20:31] <[Coke]> lizmat++ #contribs

[20:31] *** diakopter left
[20:31] <masak> lizmat: whether to plan one's tests or to use `done` still seems like a matter of taste to me.

[20:31] <lizmat> I disagree: a plan will make sure that all tests are actually run

[20:32] <masak> so will `done`.

[20:32] <lizmat> and give you a fail if they didn't

[20:32] <dalek> rakudo/nom: 1fdf9df | (Steve Mynott)++ | docs/ChangeLog:

[20:32] <dalek> rakudo/nom: ChangeLog now has `dd` now displays variable type

[20:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1fdf9df16a

[20:32] <dalek> rakudo/nom: 48c03ad | (Will Coleda)++ | docs/ChangeLog:

[20:32] <dalek> rakudo/nom: Merge pull request #538 from stmuk/nom

[20:32] <dalek> rakudo/nom: 

[20:32] <dalek> rakudo/nom: ChangeLog now has `dd` now displays variable type

[20:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48c03adc54

[20:32] <[ptc]> masak: isn't it done-testing now?

[20:32] <masak> [ptc]: yes. I still haven't quite updated my brain.

[20:32] <[Coke]> jnthn: https://github.com/rakudo/rakudo/pull/306 may be rejectable as pre-GLR.

[20:33] <lizmat> masak: no, it doesn't, it only means you don't expect any tests after

[20:33] *** telex left
[20:33] <lizmat> if for some reason a loop decides to run fewer tests than you thought, done-testing will *not* catch that

[20:33] <jnthn> masak: I have ran into cases where the number of tests run actually changed due to a bug

[20:33] <jnthn> masak: And the explicit plan in the file caught it.

[20:33] <masak> I agree that an explicit `plan` makes sense in the spectests.

[20:33] <PerlJam> (explicit plan)++

[20:34] <masak> for my module tests, I've tended to prefer `done`.

[20:34] <jnthn> I think done-testing is useful when developing a test file

[20:34] <jnthn> Then when it's "stable" drop a plan in

[20:34] <PerlJam> jnthn++ exactly

[20:34] *** telex joined
[20:34] <lizmat> jnthn: problem with that approach, is that by the time it's stable, you forget to put a plan in

[20:35] <FROGGS> also true

[20:35] <raiph> Thanks [Coke]++ # for RT guidance

[20:35] <lizmat> so personally, I *always* put a plan in from the start, and ignore the wrong number of tests message in the beginning

[20:35] <jnthn> lizmat: Do I? :P :P

[20:35] <jnthn> lizmat: Sure, people should do what works for them :)

[20:35] <leont> One other advantage of done is that it prevents merging errors

[20:35] <skids> ok 0, "you will always fail 1 test until you put a plan in"; done-testing();

[20:35] <lizmat> jnthn: well, *I* tend to forget, so I taught myself to use a plan from the very beginning  :-)

[20:35] <leont> You can't get a conflict on the number if there is no number

[20:36] <arnsholt> I usually put in a plan at the top, and just keep updating the numbers when the test harness reminds me to =)

[20:36] <arnsholt> That's what TDD is for, no? =)

[20:36] <lizmat> arnsholt++  :-)

[20:36] <jnthn> Anyways, if we didn't steal "done" for the supply stuff, we'd have had to go rename *that*, which would also have cauesd breakage...

[20:36] <jnthn> (we were already using the name "done", just didn't have a function with that name)

[20:37] * skids remembers Array.plan is still XX GLR.

[20:37] <masak> so what does `done` actually do outside of a `supply` block?

[20:37] <dalek> nqp: b3d6658 | coke++ | VERSION:

[20:37] <dalek> nqp: bump VERSION to 2015.09

[20:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b3d6658df7

[20:37] <dalek> nqp: f50929a | coke++ | docs/release_guide.pod:

[20:37] <dalek> nqp: Explicitly test the 2 backends we expect to pass

[20:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f50929a7dc

[20:37] <dalek> nqp: 885986b | coke++ | docs/release_guide.pod:

[20:37] <dalek> nqp: Fix typo

[20:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/885986bf19

[20:37] <dalek> nqp: 67653b8 | coke++ | tools/build/MOAR_REVISION:

[20:37] <dalek> nqp: Use latest MOAR release

[20:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/67653b8ee2

[20:37] <jnthn> masak: Nothing, just as "last" doesn't do anything outside of a loop

[20:37] <PerlJam> masak: throws a CONTROL_DONE

[20:37] <masak> m: last

[20:37] <camelia> rakudo-moar 643eb6: OUTPUT«last without loop construct␤  in block <unit> at /tmp/boWVx0Xrit:1␤␤»

[20:37] <jnthn> Well, yeah, it whines you used it in the wrong place

[20:37] <masak> jnthn: at least it warns.

[20:37] <masak> `done` does nothing.

[20:37] <jnthn> Doesn't do anything *useful*

[20:37] <jnthn> m: done

[20:37] <camelia> rakudo-moar 643eb6: ( no output )

[20:37] <jnthn> Hm

[20:38] <raiph> mullagainn: I've added RTs #126087 and #126088 to cover the ::from and :from<perl5> surprises you had

[20:38] <lizmat> m: emit

[20:38] <camelia> rakudo-moar 643eb6: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8lnsfK4qIr␤Calling emit() will never work with declared signature (\value)␤at /tmp/8lnsfK4qIr:1␤------> 3<BOL>7⏏5emit␤»

[20:38] <jnthn> m: emit 1;

[20:38] <camelia> rakudo-moar 643eb6: ( no output )

[20:38] <lizmat> m: emit 42

[20:38] <camelia> rakudo-moar 643eb6: ( no output )

[20:38] <lizmat> :-)

[20:38] <masak> jnthn: which is unfortunate, because I suddenly had a lot of failing tests but no reason why.

[20:38] <jnthn> Wonder why that gets dropped

[20:38] <masak> well, confused test files, rather.

[20:38] <jnthn> It *is* throwing a control exception

[20:38] <masak> if you say so :P

[20:39] <jnthn> Read the bloody code if you don't belive me

[20:39] <masak> anyway, it seems you agree with me it should do something ;)

[20:39] <lizmat> .oO( stop stabbing the code!  )

[20:39] *** erxeto joined
[20:39] <jnthn> Aye

[20:40] * masak submits rakudobug

[20:41] *** TimToady left
[20:42] <jnthn> oh, damn

[20:42] <jnthn> print_control just drops unknown control exceptions on the floor

[20:42] <[Coke]> nqp release done, including gpg signing.

[20:43] *** diakopter joined
[20:43] *** TimToady joined
[20:43] *** telex left
[20:43] <[Coke]> don't see any difference in the signed tag on github.

[20:44] <dalek> rakudo/nom: 3091699 | FROGGS++ | t/04-nativecall/16-rt125408.t:

[20:44] <dalek> rakudo/nom: skip test, the fix is not in the 2015.09 release

[20:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3091699043

[20:44] *** telex joined
[20:44] <FROGGS> [Coke]: it is not visible there

[20:44] <jnthn> masak: I'll try and sneak a patch in for this ahead of the release, if [Coke] permits :)

[20:45] <[Coke]> jnthn: JEZU, I just did the nqp release.

[20:45] <FROGGS> okay, that was the last thing I committed today

[20:45] <jnthn> [Coke]: This is in Rakudo

[20:45] <[Coke]> that isf ine.

[20:45] <[Coke]> I ONLY did the nqp release. :)

[20:45] <jnthn> What does JEZU mean? :P

[20:45] <FROGGS> [Coke]++ # :o)

[20:45] <masak> [Coke]++ # release

[20:46] <[Coke]> and I can't start on rakudo until about 4 hours out.

[20:46] <PerlJam> [Coke]: did you end up keeping the parrot stuff?

[20:46] <[Coke]> some scifi author used that instead of "jesus" when swearing.

[20:46] *** [Sno] joined
[20:46] <masak> jnthn: https://rt.perl.org/Ticket/Display.html?id=126089

[20:46] <jnthn> Ah

[20:46] * masak detrains &

[20:46] <[Coke]> PerlJam: had to, we need to build the parrot makefile to release nqp

[20:47] <[Coke]> I just removed the bit that tried to run parrot's tests for now.

[20:47] <FROGGS> btw, on my box is all clean... nqp, rakudo and roast

[20:48] <jnthn> Well, darn...the change to print_control shows we don't actually make it into there :S

[20:49] <mullagainn> BTW JSON::XS worked using Inline::Perl5

[20:49] <mullagainn> SNMP is half working

[20:49] <dalek> rakudo/nom: bc9ec3a | coke++ | tools/build/NQP_REVISION:

[20:49] <dalek> rakudo/nom: [release] bump NQP revision

[20:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc9ec3ac74

[20:49] <FROGGS> half?

[20:49] <raiph> mullagainn: thanks for that update, was just typing a message to ask :)

[20:49] <vendethiel> is the beta release happening? :o)

[20:50] <[Coke]> vendethiel: a release of the compiler is happening. :P

[20:50] <FROGGS> vendethiel: of the compiler, yes :o)

[20:50] <jnthn> m: say 0xFFE

[20:50] <camelia> rakudo-moar 643eb6: OUTPUT«4094␤»

[20:50] <vendethiel> when is TimToady++'s bday?

[20:50] *** erxeto left
[20:50] <_itz> is this a pre-alpha beta?

[20:51] <FROGGS> I still think that I've got a good feeling about roast... and would consider its state worthy a RC0

[20:51] <jnthn> m: say 0xFFFE

[20:51] <camelia> rakudo-moar 643eb6: OUTPUT«65534␤»

[20:51] <pink_mist> vendethiel: 27th according to wikipedia

[20:51] <FROGGS> BOM

[20:51] * [Coke] finds another bug in tools/contributors.pl6

[20:52] <FROGGS> [Coke]: fwiw, panda and Inline::Perl5 are doing well as well

[20:52] <jnthn> Bad news, it seems that there *is* an NQP level bug wrt the disappearing done control exception

[20:52] <FROGGS> :S

[20:52] <FROGGS> how come it appears now?

[20:52] <FROGGS> it is not like the GLR changed the way our mainline works

[20:52] <PerlJam> bad luck

[20:52] <FROGGS> or how exceptions are handled outside of loops...

[20:52] <[Coke]> jnthn: bad news in that it won't make it to 2015.09, or bad news in that I have to cut another release in an hour? ;)

[20:53] <jnthn> It's that I added extra control exceptions and they were outside the mask

[20:53] <lizmat> [Coke]: what's the pb in contributors.pl ?

[20:53] <[Coke]> lizmat: it assumes we release every month.

[20:53] <jnthn> [Coke]: Depends how seroius you consider the issue

[20:53] <[Coke]> I will work around it with a hardcoded run instead of letting it pick a date, and then pretend we release every month again.

[20:54] <lizmat> yea, you can specify a date with YYYY-MM-DD  as the parameter

[20:54] <[Coke]> jnthn: what's the symptom? does done work, except in masak's case? That seems like something we can live with for a month.

[20:54] <jnthn> [Coke]: Basically, we stole "done" from Test.pm for something else

[20:55] <[Coke]> I have to head out shortly - I have no problem doing another nqp release today if this is fixable.

[20:55] <FROGGS> [Coke]: things like last or done do not explode when used outside of their blocks/loops

[20:55] <skids> .oO(irony of a feature named "done" holding up a release)

[20:55] <_itz> :)

[20:55] <FROGGS> *g*

[20:55] <jnthn> [Coke]: And the incorrect use of "done" doesn't explode, so we silently do nothing

[20:55] <jnthn> FROGGS: No, last is fine

[20:55] <jnthn> FROGGS: It's only for emit and done that we have an issue

[20:55] <[Coke]> travis says that I broken nqp by updating to moar 2015.09

[20:56] <FROGGS> jnthn: ahh, that's fine then isnt it?

[20:56] *** clearkruti left
[20:56] <lizmat> m: "emit".flip.say   # :-)

[20:56] <camelia> rakudo-moar 48c03a: OUTPUT«time␤»

[20:56] <[Coke]> if the failure is failure to explode in the bad path, rather than failure to work in the happy path, I think we can live with that.

[20:56] <jnthn> lizmat: I noticed that and thought it was wonderfully appropriate for async :)

[20:57] <jnthn> [Coke]: It may just cause some confusion for people is all

[20:57] <bartolin> lizmat: would you mind to take a look at https://github.com/usev6/rakudo/commit/bf1537daa9 ? i tried to fix RT #124205 but my patch feels smelly. i couldn't think of a clean way to execute special case for the first element of a lazy list (and so i added a my hack within .map) ...

[20:58] <FROGGS> [Coke]: travis just reports that the javascript backend failed a test

[20:58] *** skids left
[20:58] <[Coke]> FROGGS: I can't get travis to tell me what failed.

[20:58] <[Coke]> looks like it's thinking about it, then just ... . . . ...

[20:59] <FROGGS> [Coke]: https://travis-ci.org/perl6/nqp/jobs/80904368#L924

[20:59] <jnthn> bartolin: Could use a state var instead

[20:59] <FROGGS> err, now I clicked on the redo button and travis starts over again...

[21:00] <FROGGS> but anyway, was just a problem with js

[21:00] <lizmat> bartolin: looking at it now

[21:01] <bartolin> jnthn, lizmat: thanks!

[21:02] <dalek> nqp: ac856c1 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[21:02] <dalek> nqp: Fix control exception mask for new additions.

[21:02] <dalek> nqp: 

[21:02] <dalek> nqp: Now CONTROL also handles AWAIT/EMIT/DONE.

[21:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ac856c144a

[21:02] <timotimo> how do people feel about building speculative tests for UDP sockets?

[21:03] * timotimo goes to bed :P

[21:03] <FROGGS> gnight timotimo 

[21:03] <bartolin> jnthn: i'm unhappy with the extra conditional within the map block. could a state var help to avoid that block?

[21:04] * bartolin has to think about that some more

[21:04] *** tokuhiro_ joined
[21:05] *** sufrostico left
[21:05] <lizmat> bartolin: looking at the ticket, I think it should be rejected

[21:05] <bartolin> lizmat: oh! 

[21:05] <lizmat> if you provide a :with that is stupid enough to always return 1, then you get what you deserve ?

[21:06] <lizmat> now, maybe the initialization of $last should be a bit smarter

[21:06] <[Coke]> jnthn: that was quick.

[21:06] <bartolin> m: my @rt124205_b = "", "", "b", "b", "B", "B"; say @rt124205_b.squish(:with(*.Str eq *.Str)).perl

[21:06] <camelia> rakudo-moar 48c03a: OUTPUT«("b", "B").Seq␤»

[21:07] *** telex left
[21:07] <bartolin> m: my @rt124205_b = "", "", "b", "b", "B", "B"; say @rt124205_b.unique(:with(*.Str eq *.Str)).perl

[21:07] <camelia> rakudo-moar 48c03a: OUTPUT«("", "b", "B").Seq␤»

[21:07] <[Coke]> leaving now, but I guess I'll cut 2015.09.01 for nqp when I get back. toodles.

[21:07] <jnthn> [Coke]: OK. I'm getting a Rakudo patch in with further improvement too

[21:07] <lizmat> bartolin: this was about squish ?

[21:07] <lizmat> ah, ok

[21:08] <bartolin> lizmat: that's from S32-list/squish.t -- so it's not only a :with that always returns 1

[21:08] *** tokuhiro_ left
[21:08] *** telex joined
[21:08] <bartolin> yeah, i think squish should return the same thing as unique here

[21:08] <lizmat> bartolin: ok, clear now, lemme try something

[21:10] *** Peter_R left
[21:11] <FROGGS> good night #perl6

[21:11] *** FROGGS left
[21:11] <jnthn> 'night, FROGGS

[21:12] <jnthn> .oO( he really shouldn't spill his beer on his connection like that...it's a waste of beer! )

[21:12] *** Peter_R joined
[21:12] <PerlJam> bartolin: why wouldn't you use  $last = self[0];  and gather self[1..*].map: { ... }   ?

[21:13] <jnthn> PerlJam: If self is a Seq that won't go well

[21:13] <PerlJam> I suppose that would still return the empty list

[21:13] <dalek> rakudo/nom: 6afd267 | lizmat++ | src/core/Any-iterable-methods.pm:

[21:13] <dalek> rakudo/nom: Fix for #RT 124205, usev6++ bartolin++

[21:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6afd267caa

[21:14] <bartolin> PerlJam: I think I tried that and it didn't work out.

[21:15] <lizmat> hmm.... not so good after all  :-(

[21:18] *** rurban joined
[21:19] *** rurban left
[21:19] *** colomon_ left
[21:20] *** pmurias joined
[21:20] *** kenhat left
[21:21] *** colomon joined
[21:21] *** rindolf left
[21:22] <lizmat> hmmm.. 20,21 now passing, 22-23 not yet

[21:22] <pmurias> arnsholt: if you don't count the tests manually but just make the test harness do the counting doesn't it defeat the purpose of having a plan?

[21:24] <jnthn> pmurias: Not the anti-regression one, know

[21:24] <bartolin> lizmat: 22 and 23 don't have their itemization right, do they? looks GLR related to me

[21:25] <lizmat> yeah, fixed that now as well, all tests passing

[21:25] <pmurias> in the spec tests where weird stuff can happen due to a buggy compiler plans make a lot more sense

[21:25] <bartolin> \o/ lizmat++

[21:25] <dalek> rakudo/nom: 0921fa4 | lizmat++ | src/core/Any-iterable-methods.pm:

[21:25] <dalek> rakudo/nom: Better fix for #RT 124205, usev6++ bartolin++

[21:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0921fa43f8

[21:26] <dalek> rakudo/nom: e25cbf4 | jnthn++ | src/core/Exception.pm:

[21:26] <dalek> rakudo/nom: Don't leak unexpected control exceptions.

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e25cbf4430

[21:26] <dalek> rakudo/nom: f435959 | jnthn++ | src/core/Exception.pm:

[21:26] <dalek> rakudo/nom: Good errors for unhandled emit and done.

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f435959e8b

[21:26] <dalek> rakudo/nom: e95a7f3 | jnthn++ | src/core/Exception.pm:

[21:26] <dalek> rakudo/nom: Remove superstitious parens.

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e95a7f3369

[21:26] <jnthn> There we goes

[21:26] <bartolin> lizmat: ahh, 'once' was what i wanted :-)

[21:26] <dalek> roast: 729f46f | lizmat++ | S32-list/squish.t:

[21:26] <dalek> roast: Fix GLR-busted initialization

[21:26] <dalek> roast: review: https://github.com/perl6/roast/commit/729f46f922

[21:28] <lizmat> hmmm.. have my suspicions about the scoping of once though

[21:28] *** telex left
[21:30] *** telex joined
[21:34] <dalek> roast: f2199d3 | lizmat++ | S32-list/squish.t:

[21:34] <dalek> roast: Unfudge #RT 124205 related tests

[21:34] <dalek> roast: review: https://github.com/perl6/roast/commit/f2199d354e

[21:36] <lizmat> jnthn: a bare "done" and "emit 42" are still silent for me ?

[21:36] <jnthn> You need a newer NQP

[21:37] <jnthn> detrain and then sleep at last! :)

[21:37] <jnthn> back tomorrow &

[21:37] <lizmat> good night, jnthn 

[21:37] <dalek> rakudo-star-daily: ae04bda | coke++ | log/ (2 files):

[21:37] <dalek> rakudo-star-daily: today (automated commit)

[21:37] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/ae04bda359

[21:37] *** muraiki left
[21:38] * [Coke] finds a network connection but probably can't get a lot done here. :)

[21:39] <bartolin> g'night, #perl6

[21:42] *** diana_olhovik_ left
[21:48] *** spider-mario left
[21:48] *** espadrine left
[21:50] *** telex left
[21:51] *** araujo left
[21:52] *** telex joined
[21:56] <dalek> nqp: 8fd2e96 | coke++ | docs/release_guide.pod:

[21:56] <dalek> nqp: avoid weird git error that bit me on last release

[21:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8fd2e96edc

[21:56] *** hernanGOA left
[21:58] * lizmat goes to bed while it is still today...

[21:59] *** telex left
[21:59] *** telex joined
[21:59] *** travis-ci joined
[21:59] <travis-ci> NQP build failed. Will "Coke" Coleda 'avoid weird git error that bit me on last release'

[21:59] <travis-ci> https://travis-ci.org/perl6/nqp/builds/80918921 https://github.com/perl6/nqp/compare/ac856c144a38...8fd2e96edc66

[21:59] *** travis-ci left
[21:59] <[Coke]> ~~

[22:00] <[Coke]> that was a doc only bug.

[22:00] *** telex left
[22:00] <[Coke]> er, commit. travis-- # noise

[22:02] *** telex joined
[22:06] *** Sqirrel_ left
[22:19] *** cognominal left
[22:21] <lichtkind> good night lizmat 

[22:23] <lichtkind> i clearly not huged you enough in spain

[22:23] *** pmurias left
[22:31] *** telex left
[22:32] *** telex joined
[22:32] *** kid51 joined
[22:41] *** skids joined
[22:44] *** Skarsnik left
[22:45] *** Gruber joined
[22:51] *** Sqirrel joined
[22:54] <raiph> m: class A { has $.a; }; say A.new(a => 5) eqv A.new(a => 5); #=> False        # <-- from http://doc.perl6.org/language/operators#infix_eqv

[22:54] <camelia> rakudo-moar e95a7f: OUTPUT«True␤»

[23:01] *** leont left
[23:04] *** telex left
[23:05] *** tokuhiro_ joined
[23:06] *** telex joined
[23:08] <raiph> star: class A { has $.a; }; say A.new(a => 5) eqv A.new(a => 5);

[23:08] <camelia> star-m 2015.03: OUTPUT«False␤»

[23:10] *** tokuhiro_ left
[23:12] *** telex left
[23:13] *** labster joined
[23:14] *** telex joined
[23:14] *** larion joined
[23:20] <ShimmerFairy> Something that's been on my mind: is there any way to make the output more useful for test failures (when using 'make spectest', at least)? I've personally never found the summary helpful when mentioning "Tests 15, 20-25, 31", since tests aren't numbered in the actual file. Could the summary output possibly reference line numbers instead?

[23:22] *** telex left
[23:22] *** telex joined
[23:22] <pink_mist> +1 to that idea

[23:26] <ShimmerFairy> Taking a quick look at `man prove`, it doesn't seem to be something it does offhand. I honestly wonder how the summary from `prove` has ever been considered useful -- maybe P5 tests have test numbers in source, or maybe rakudo uses the most tests with it out of anyone :P

[23:30] *** telex left
[23:32] *** telex joined
[23:33] <pink_mist> I've been annoyed with p5 tests before that I had to manually count the tests :/

[23:33] <pink_mist> prove -v helps if the tests are given names though

[23:33] <pink_mist> which isn't always the case

[23:34] <ilmari> without -v the summary is less necessary, since that only outputs the failures

[23:34] <ilmari> (with line numbers)

[23:34] <ilmari> the summary is more useful with -v, if there's lots of passes between/after the fails

[23:38] <ShimmerFairy> pink_mist: with P6's Test at least, failed tests give a line number in the error reporting, IIRC. It's just the summary that isn't so helpful :)

[23:38] <ShimmerFairy> pink_mist: When I get failures from "spectest", I always end up running the files individually so I can see the errors printed amongst the passes.

[23:39] <pink_mist> if the test failed because it die()d I'd get line numbers in perl5 :P

[23:39] <pink_mist> ... but it's getting late, and I must sleep

[23:40] <pink_mist> good night #perl6

[23:40] <vendethiel> \o pink_mist

[23:41] *** telex left
[23:42] <ShimmerFairy> ♞ pink_mist o/

[23:42] *** telex joined
[23:44] *** skids left
[23:53] *** lichtkind left
[23:55] *** TEttinger joined
