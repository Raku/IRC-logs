[00:00] *** telex left
[00:02] *** telex joined
[00:02] *** mohij left
[00:03] <ugexe> probably needs a more modern TAP::Harness

[00:08] *** dolmen left
[00:26] *** vendethiel joined
[00:37] *** ir2ivps4 left
[00:39] * rjbs starts to bring perl v5.22.0 in for a landing.

[00:39] <rjbs> That's the last v5 we need to make, right? :)

[00:44] <labster> rjbs: yes :P

[00:47] *** laouji joined
[00:47] *** vendethiel left
[00:56] *** adu joined
[00:59] *** koo6 left
[01:00] *** ssqq joined
[01:00] <timotimo> i may do the weekly after sleep rather than before

[01:02] *** mdinger left
[01:02] <ssqq> How to get one subroutine name? sub get-it-name { say &?ROUTINE.^name }

[01:03] <ssqq> m: get-it-name { say &?ROUTINE.^name }; get-it-name()

[01:03] <camelia> rakudo-moar 00723c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PU8nGyN6Xh␤Undeclared routines:␤    &?ROUTINE used at line 1␤    get-it-name used at line 1. Did you mean 'gethostname'?␤␤»

[01:03] <ssqq> m: sub get-it-name { say &?ROUTINE.^name }; get-it-name()

[01:03] <camelia> rakudo-moar 00723c: OUTPUT«Sub␤»

[01:03] <timotimo> m: sub get-it-name { say &?ROUTINE.name }; get-it-name()

[01:03] <camelia> rakudo-moar 00723c: OUTPUT«get-it-name␤»

[01:04] <ssqq> tomotimo: thanks

[01:05] <timotimo> %)

[01:07] *** rhr left
[01:07] *** rhr joined
[01:11] *** fhelmberger joined
[01:12] *** kurahaupo joined
[01:15] *** fhelmberger left
[01:29] *** kurahaupo left
[01:31] *** aborazmeh joined
[01:31] *** aborazmeh left
[01:31] *** aborazmeh joined
[01:37] <ssqq> Editor `Atom` now support Perl 6 syntax highlight:)

[01:38] <timotimo> has for a while; even the new visual studio has it now

[01:39] <timotimo> because it was put into perl.tmbundle which is in upstream textmate

[01:40] <timotimo> by visual studio i actually mean the new IDE microsoft put out there

[01:43] <ssqq> Visual studio is too large ...

[01:43] <jdv79> how come rakudo isn't panda-able?

[01:44] <jdv79> or rakudo star - i guess that's the only regular dist atm

[01:44] <timotimo> Task::Star is panda-able

[01:44] *** colomon left
[01:44] <jdv79> does that include rakudo?

[01:44] *** colomon joined
[01:45] <jdv79> i don't see it in there

[01:45] <timotimo> no

[01:45] <timotimo> but how are you supposed to install rakudo with a perl6 program? :S

[01:45] <jdv79> what i'm getting at is cpan testers for perl6 which would include rakudo just as cpan testers smoke the perl dist

[01:45] <timotimo> have you been working on a perl6 implementation in secret?

[01:46] <jdv79> no, just occurred to me

[01:46] <timotimo> we have rakudobrew, which is most probably what you'd be using for something like that

[01:46] *** laouji_ joined
[01:46] <jdv79> rakudobrew isn't cpan and cpantesters

[01:46] *** raiph joined
[01:47] <timotimo> well, we do have http://testers.perl6.org/

[01:49] *** laouji left
[01:52] *** laouji_ left
[01:52] *** laouji joined
[02:00] *** aborazmeh left
[02:00] <jdv79> is there a regular report of test/pass of rakudo t, spectest, stresstest, etc?

[02:01] <timotimo> yes, coke has that in his perl6-roast-data repository on github

[02:03] <timotimo> it doesn't do stresstest and it doesn't do rakudo's own t, i believe

[02:04] *** AlexDaniel left
[02:12] *** tinyblak joined
[02:19] *** ssqq left
[02:20] *** ssqq joined
[02:28] *** kurahaupo joined
[02:29] *** rmgk is now known as Guest76179

[02:29] *** rmgk_ joined
[02:29] *** Guest76179 left
[02:29] *** rmgk_ is now known as rmgk

[02:38] *** laouji left
[02:39] *** laouji joined
[02:57] *** noganex joined
[03:00] *** noganex_ left
[03:01] *** ssqq left
[03:03] *** bayprogrammer joined
[03:10] *** koo6 joined
[03:36] <dalek> rakudo/nom: aadd29c | hoelzro++ | docs/running.pod:

[03:36] <dalek> rakudo/nom: Fix source reference for PERL6LIB/RAKUDOLIB

[03:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aadd29c9f6

[03:36] <dalek> rakudo/nom: b30ef2e | hoelzro++ | docs/running.pod:

[03:36] <dalek> rakudo/nom: Add documentation for other env vars used by Rakudo

[03:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b30ef2e027

[03:41] *** risou is now known as risou_awy

[03:41] *** laouji left
[03:41] *** risou_awy is now known as risou

[03:41] *** laouji joined
[03:44] *** sprinkles joined
[03:45] *** sprinkles left
[03:46] *** laouji left
[03:48] *** Sqirrel left
[04:10] *** jack_rabbit joined
[04:13] *** BenGoldberg_ left
[04:21] *** zcm left
[04:25] *** quester joined
[04:27] *** kaare_ joined
[04:36] *** laouji joined
[04:46] *** vendethiel joined
[04:59] *** skids left
[05:12] *** koo6 left
[05:15] *** yubimusubi left
[05:32] *** yubimusubi joined
[05:45] *** Psyche^ joined
[05:49] *** Patterner left
[05:54] *** anaeem1 joined
[05:55] <adu> pong

[05:59] *** diana_olhovik_ joined
[05:59] *** aborazmeh joined
[05:59] *** aborazmeh left
[05:59] *** aborazmeh joined
[06:00] *** vendethiel left
[06:01] <jack_rabbit> ping?

[06:06] *** _mg_ joined
[06:07] <Ulti> timotimo the Atom and VS Code syntax hilighting is fairly bad though :( nowhere near as good as vim. I think the main upside is that it means p6 is detected and you have a language name to hook plugins onto.

[06:15] *** rindolf joined
[06:17] *** espadrine joined
[06:17] <Ulti> ooc is there a way to get Rakudo to output more machine readable error messages?

[06:25] *** vendethiel joined
[06:43] *** FROGGS joined
[06:45] <FROGGS> o/

[06:47] *** pierrot joined
[06:48] *** vendethiel left
[06:49] *** domidumont joined
[06:49] <FROGGS> Ulti: what do you meant by output? all exceptions have a type and inherit from Exception... if you want an error code-ish like thing, you might mess with Exception to always print the exception type upfront

[06:51] <Ulti> I was thinking more like output JSON to make it easier to write IDE linters

[06:52] <Ulti> just took a look at core/Exception.pm shouldnt be impossible to just abstract out the .gist in there a bit 

[06:52] <Ulti> maybe have a cli option like --error=json and default to --error=human or something?

[06:53] *** domidumont left
[06:53] *** domidumont joined
[06:55] <FROGGS> hmmm, that sounds like a good idea

[06:56] <Ulti> {line: x, pos: y, message: 'yay', type: 'PairMap::DoesNotExist'}

[06:56] <FROGGS> yeah

[06:57] <Ulti> --error=perl could just be the .perl of the exception which is nice

[06:57] *** gfldex left
[06:57] <Ulti> guess you might want file: in there too ;3

[06:58] *** Ven joined
[06:58] * Ulti was looking at adding a rakudo p6 linter to Atom/Sublime

[06:58] <FROGGS> IMO the exception should jsonify to: { "message" : "OHH NOES!", "data" : { "file" : ..., "line" : ..., "pos" : ..., "backtrace" : ... }

[06:59] <Ulti> parsing the human readable error output feels wrong 

[06:59] <FROGGS> so you'd just need to set its "code" property, and use it in http://www.jsonrpc.org/specification

[06:59] <FROGGS> err, http://www.jsonrpc.org/specification#error_object

[07:00] <Ulti> standards++

[07:00] <Ulti> ok I might have a play with that tonight since I only have to touch Perl 6 in Rakudo :)

[07:01] <FROGGS> yeah :o)

[07:02] *** raiph left
[07:02] *** labster left
[07:02] *** RabidGravy joined
[07:07] *** zakharyas joined
[07:08] *** Ven left
[07:11] <masak> morning, #perl6

[07:13] <lizmat> good *, #perl6!

[07:13] <lizmat> only 2 more days until the next release!

[07:15] <sjn> yay!

[07:16] <sjn> and good *, #perl6 

[07:16] *** dolmen joined
[07:18] <masak> it will be the best Rakudo release so far!

[07:19] <masak> top 'o the morning to ye, lizmat & sjn 

[07:19] <lizmat> masak sjn o/

[07:19] *** bayprogrammer left
[07:20] * lizmat is enjoying the < 100 ms startup time

[07:21] *** dolmen left
[07:22] *** espadrine left
[07:22] *** ribasushi left
[07:25] <dalek> rakudo/nom: a552010 | lizmat++ | docs/ChangeLog:

[07:25] <dalek> rakudo/nom: Add some more entries

[07:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a552010d4f

[07:26] *** vendethiel joined
[07:32] *** aborazmeh left
[07:38] *** abraxxa joined
[07:38] *** bjz joined
[07:41] *** Sqirrel joined
[07:41] *** Ven joined
[07:44] *** quester left
[07:45] *** tinyblak_ joined
[07:46] <FROGGS> yes, only two more days :o(

[07:48] *** tinyblak left
[07:49] <lizmat> FROGGS: something I can do to help (apart from committing radical changes? :-)

[07:49] <lizmat> *not

[07:49] *** vendethiel left
[07:50] <FROGGS> pheww

[07:50] <FROGGS> :P

[07:50] <Ven> "Unhandled exception: ctxlexpad needs an MVMContext" trying to run perl6-debug-m (rakudo g72a187e)

[07:51] *** ribasushi joined
[07:51] <FROGGS> lizmat: hmmm, I need to get a jvm issue with wrt (de)serialization, dunno if you can help me there

[07:52] <FROGGS> fixed*

[07:52] <lizmat> my JVM foo is limited...

[07:52] <FROGGS> yeah, mine too

[07:52] <lizmat> but if you have some pointers, I can do the grunt work of testing

[07:53] <FROGGS> nah, it is not that easy... I think I can't even explain without understanding better what the issue is

[07:53] <FROGGS> I just know that bootstrapping panda does not work with CURLI and that it explodes in a strange way

[07:53] <lizmat> in any case, your (de)serialization must have improved the past weeks  :-)

[07:53] *** aborazmeh joined
[07:53] *** aborazmeh left
[07:53] *** aborazmeh joined
[07:54] <FROGGS> okay, I do know something: the string heap look very weird on the jvm, compared to moar

[07:54] <FROGGS> lizmat: yes, I learned a lot :o)

[07:54] <nwc10> http://en.wikipedia.org/wiki/ZingZillas -- Every Zingbop performed is of course "the best Zingbop ever".

[07:55] <nwc10> however, I doubt that FROGGS has had massive exposure to CBeebies

[07:55] <nwc10> er, or masak

[07:55] <nwc10> masak: "so far" - but aren't they always? :-)

[07:56] <FROGGS> nwc10: no contact whatsoever :o)

[07:56] <Ven> can someone confirm debugger::ui::commandline works/doesn't work for them :)?

[07:57] <FROGGS> Ven: I have a busted build, so I cannot help here

[07:57] <dalek> Heuristic branch merge: pushed 24 commits to rakudo/newio by lizmat

[07:59] *** laouji_ joined
[08:02] *** laouji left
[08:03] *** adu left
[08:03] *** laouji_ left
[08:03] *** rindolf left
[08:05] <masak> nwc10: yes, that's the joke

[08:06] <masak> nwc10: I watched a Guido talk, where he introduced Python 3.4 as "the best Python release ever"

[08:07] *** tinyblak_ left
[08:07] *** tinyblak joined
[08:07] <nwc10> I didn't know that. Does Guido use the phrase as a running gag?

[08:09] *** laouji joined
[08:10] <masak> not sure. I'm pretty sure there was some self-awareness as he said it.

[08:11] <masak> just because it's always true doesn't mean it's not worth stating.

[08:11] <masak> *especially* in the Python 3.4 vs Python 2.7 situation that's currently the fact.

[08:17] *** FROGGS left
[08:18] *** fhelmberger joined
[08:18] *** darutoko joined
[08:25] *** dakkar joined
[08:33] *** average joined
[08:33] <average> perl6, the language everyone's talking about

[08:33] <average> (along with 999 other languages)

[08:33] <[ptc]> Ven: yes, I can confirm that it doesn't work for me as well

[08:34] <Ven> thanks [ptc] 

[08:34] <average> http://modules.perl6.org/ <-- I just looked at this, pretty nice eco-system you guys have going on

[08:34] <[ptc]> I even asked the same question in irc, but noone bit  :-/

[08:34] <average> how are threads doing in Perl6 ? how's async I/O doin' in Perl6 ?

[08:34] <[ptc]> the issue has been around for a while too.

[08:34] <average> coming along ?

[08:34] *** mr-foobar left
[08:35] *** laouji left
[08:35] <RabidGravy> average, the concurrency piece is good enough to write code for right now

[08:36] <average> RabidGravy: is the interface stable ?

[08:36] <average> to be clear, I'm refering to the API, and the parts of the language that deal with concurrency

[08:37] <RabidGravy> yeah, largely I believe, to the extent that is documented and all

[08:37] <average> is it stable from an API perspective ? (that's my perspective as an end-user)

[08:37] <RabidGravy> yes

[08:37] <average> ok, thank you

[08:38] <RabidGravy> what is documented in http://docs.perl6.org/language/concurrency all works right now and is stable

[08:40] *** laouji joined
[08:41] <dalek> rakudo/nom: 29a4089 | lizmat++ | src/core/Deprecations.pm:

[08:41] <dalek> rakudo/nom: Allow for :file/:line in DEPRECATED

[08:41] <dalek> rakudo/nom: 

[08:41] <dalek> rakudo/nom: This should make it easier to issue DEPRECATED messages at compile time

[08:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29a4089ff6

[08:41] <dalek> rakudo/nom: c53b603 | lizmat++ | src/Perl6/World.nqp:

[08:41] <dalek> rakudo/nom: DEPRECATE use MONKEY_TYPING

[08:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c53b6031cc

[08:41] <dalek> rakudo/nom: a6e5e93 | lizmat++ | src/Perl6/Actions.nqp:

[08:41] <dalek> rakudo/nom: Use new World.current_file convenience method

[08:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a6e5e93eb9

[08:42] *** bjz left
[08:42] <lizmat> afk for a few hours&

[08:43] *** bjz joined
[08:43] *** espadrine joined
[08:50] <masak> surely this list of examples breaks the rules set up in the paragraphs before? https://en.wikipedia.org/wiki/Unit_testing#Language-level_unit_testing_support

[08:51] <masak> specifically, Go, Java, Python, Racket, Ruby, Rust don't have *language-level* testing support

[08:51] <masak> (and probably more)

[08:51] <masak> it's as if someone wanted to add their favorite language to that list but forgot to read the rules...

[08:52] <masak> slightly off-topic, sorry. :) just happened to be on that page and saw it.

[08:52] <masak> does anyone know if *any* language on that list merits its place there?

[08:52] *** tinyblak left
[08:53] *** tinyblak joined
[09:00] *** FROGGS joined
[09:05] *** khisanth__ joined
[09:05] *** gargamel_ left
[09:08] *** khisanth_ left
[09:08] *** koo6 joined
[09:13] <masak> oh, this is pointed out in the Talk page, too.

[09:13] <masak> apparently D and Cobra have built-in testing support in the language.

[09:14] *** tinyblak left
[09:21] *** bjz left
[09:21] *** tinyblak joined
[09:21] *** Ven left
[09:23] *** bjz joined
[09:25] *** dayangkun joined
[09:26] <profan> D has it's place at least, unittest and invariant blocks :) (very handy, especially the invariant blocks: http://dlang.org/contracts.html#Invariants)

[09:27] <masak> I would make a distinction between unit tests and things like invariant blocks.

[09:27] <average> hey masak , and everyone who's contributing

[09:27] <profan> I suppose the second ones are closer to assertions

[09:27] <average> to Perl6

[09:27] <masak> average: hey! ÖD

[09:27] <masak> :D

[09:27] <profan> rather than just for testing purposes

[09:27] *** tinyblak left
[09:27] <average> I don't understand how you guys are pulling this off, but it's great..

[09:27] <masak> profan: well, it's a sliding scale, I guess.

[09:28] <profan> masak: I'd guess perl6 doesn't have any plans for language level testing support?

[09:28] <masak> average: 8 years ago, we figured out how to clone jnthn, and we keep 100 copies of him locked in the basement...

[09:28] <masak> profan: no, I think we're fine with it in the Test.pm module :)

[09:29] <average> what's your secret though ?

[09:29] <masak> profan: but it's already possible to write an `assert` macro.

[09:29] <profan> The language is already quite the beast, so that's probably sane :)

[09:29] <average> you seem to have more tranction and more long-term commitment than many commercial projects that make loads of money

[09:29] <average> how does it work ?

[09:29] <average> *traction

[09:29] <masak> average: passion.

[09:29] <average> nice :)

[09:29] *** dayangkun left
[09:29] <masak> average: this channel is full of people who really enjoy Perl.

[09:30] <RabidGravy> passion and sheer bloody mindedness

[09:30] <masak> average: and who want to see it have a future through Perl 6.

[09:30] <average> that's very nice :)

[09:30] <masak> but yeah, we're feeling the second system syndrome vibes sometimes :P

[09:30] <masak> guess that's unavoidable

[09:31] <profan> looking forward to the language stabilizing around 1.0, bit hesitant to jump in until then :)

[09:32] <profan> from the little perl6 i've written, i already miss many parts of perl6 whenever i write in other languages, so i wish you guys the best :D

[09:33] <itz_> jumping in now will help the language stablise quicker! :)

[09:37] <profan> itz_: haha, my passion for p6 isn't quite as strong as yours ;)

[09:39] *** bjz left
[09:44] <masak> itz_ has a point, though.

[09:44] <masak> the only thing that makes the language more stable is use.

[09:44] <masak> (in my experience)

[09:44] <masak> the "6.0" point will mostly be a ceremonial thing.

[09:47] <RabidGravy> and the broadening of the contribution base to people who want to do things that nobody else wants to do is important IMO

[09:49] <masak> yeah.

[09:50] <masak> for the rest of 2015 at least, we can say this: we are looking for people who want to explore, get into trouble, and help fix the trouble :)

[09:50] <masak> after the arbitrary "6.0" point, there will of course be no bugs :P

[09:51] <RabidGravy> ;-O

[09:51] * masak pokes fun, but will probably be just as giddy as the rest of the channel once we reach those dates

[09:52] <DrForr> To misappropriate Barbara Woodhouse, there are no bugs, only inappropriate behavior.

[09:52] <RabidGravy> WALKIES!

[09:55] *** bjz joined
[09:57] <FROGGS> for me the "6.0" point is what happens after a lot of testing, fixing and cleaning up (the latter mostly for roast)

[10:03] *** average left
[10:04] <masak> *nod*

[10:04] <masak> so that's what we focus on.

[10:04] *** jack_rabbit left
[10:05] <FROGGS> besides getting the last required bits in a good shape :S

[10:05] <profan> i suppose that part about maturity is true, might poke at it a bit earlier than scheduled then :)

[10:08] <masak> \o/

[10:08] *** bjz left
[10:08] <masak> my part of the work is not a blocker for 6.0, but I'd still like to do a fair bit of the planning in 2015.

[10:08] <masak> maybe even some implementation somewhere in a branch.

[10:08] <masak> Real Actual Macros.

[10:09] <FROGGS> masak: well, would be nice to know the final quasi quoting syntax later this year

[10:09] <FROGGS> so we can at least reserve it or so

[10:10] *** bjz joined
[10:15] *** bjz left
[10:18] *** Sqirrel left
[10:18] *** araujo left
[10:18] *** telex left
[10:19] *** Sqirrel joined
[10:20] *** telex joined
[10:23] <masak> aye.

[10:24] <masak> there's no good answer to that particular one.

[10:24] <masak> at least not yet.

[10:24] <masak> mostly because unquoting/hole syntax is nasty business.

[10:25] <FROGGS> aye

[10:25] <masak> I mean, the most lightweight I can think of would be

[10:25] <masak> my $ast = `say "OH HAI"`;

[10:26] <masak> (that is, instead of 'quasi { ... }', we do '`...`'

[10:26] <masak> )

[10:26] <masak> but that doesn't address how to spell the holes.

[10:27] <FROGGS> that feels like variabel interpolation

[10:27] <FROGGS> variable*

[10:27] *** rindolf joined
[10:27] <FROGGS> problem is, that this is code, not a string or regex :/

[10:28] *** jack_rabbit joined
[10:28] <masak> well, you bring a nice point of view to it

[10:28] <masak> (that I hadn't considered)

[10:28] <masak> quasis are like a Perl 6 slang inside of Perl 6

[10:29] <FROGGS> yeah

[10:29] <masak> the only grammatical difference is that there are holes

[10:30] <FROGGS> a macro can fill holes with lexicals from the outer scope?

[10:31] <masak> oh yes. very yes.

[10:31] <FROGGS> dang :P

[10:31] <DrForr> We've already got twigils, what's one more character among friends? $`^x, $,^x, $@^x

[10:31] <FROGGS> would be easy otherwise

[10:31] <FROGGS> DrForr: that was what I was thinking

[10:31] <FROGGS> which does not help when outer lexicals are involved

[10:32] <FROGGS> it is like you need an interpolation syntax like {{{ }}}, just shorter

[10:33] <FROGGS> though, I dunno if that is the biggest issue here

[10:33] <DrForr> $x = `$a,$,^b,@@^b`; # remembering only now the fact that context now uses the type sigil.

[10:33] <literal> make it lispy? `() :P

[10:34] <DrForr> That was why I mentioned $`x, $,x, $@x inasmuch as they're the quasiquoted versions.

[10:34] *** andreoss joined
[10:34] <masak> interpolated ASTs don't have to come from variables.

[10:34] <masak> they're arbitrary expressions.

[10:35] <masak> FROGGS: simplest example of "lexicals from the outer scope" is... macro parameters. :)

[10:36] * masak .oO( Plan 9 From the Outer Scope )

[10:36] <FROGGS> masak: yes, but you have the naming of these params under control, so we could have interpolating twigils or so

[10:36] *** vendethiel joined
[10:37] <FROGGS> though, we usually have circumfixes for that, and it probably wants to be that

[10:37] <DrForr> (defmacro foo(body) `(list 'a ,body)) (foo `(+ 1 55)) # and such. If we had to use {{{ }}} for delineating blocks it'd start to look like we added trigraphs from C.

[10:39] <DrForr> There are some [[ .. ]] that look like doubled characters in Unicode, but I can't find them and imagine people would want alternatives in ASCII anyway to avoid copying from a UTF-8 text file.

[10:39] *** aborazmeh left
[10:40] <DrForr> ⋘$x + $y⋙

[10:40] <DrForr> (guillemots with one extra < > added, essentially)

[10:42] *** jack_rabbit left
[10:44] *** jack_rabbit joined
[10:49] *** bjz joined
[10:50] <andreoss> m: #`⦕ comment ⦖ say 1

[10:50] <camelia> rakudo-moar a6e5e9: OUTPUT«1␤»

[10:50] <FROGGS> not in my font :o(

[10:51] <andreoss> http://xahlee.info/comp/unicode_matching_brackets.html 

[10:51] *** kurahaupo left
[10:52] *** RabidGravy left
[10:52] <masak> one thing I dislike about {{{ }}} is that it has very little to do with blocks.

[10:53] <masak> also, quasi blocks are meant to be writable with other delimiters, like <> [] 〖〗

[10:54] <masak> which -- contrariwise -- makes little sense for blocks.

[10:54] <dalek> rakudo/nom: 56e4733 | lizmat++ | src/Perl6/World.nqp:

[10:54] <dalek> rakudo/nom: Generalize a World.DEPRECATED method, and use it

[10:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/56e47332cd

[10:55] <masak> I once thought that the great idea behind quasi blocks having different delimiters was that they could *nest*, and that at a certain depth you'll be interested in specifying a *certain* quasi block's hole

[10:55] <andreoss> m: sub x {{{ 1 }}}; say x.perl;

[10:55] <camelia> rakudo-moar a6e5e9: OUTPUT«1␤»

[10:55] <masak> much in line with `next` et al. and loops/loop labels

[10:56] <masak> andreoss: oh, that's another thing. {{{ }}} is *allowed* in non-quasi Perl 6. it's just that it doesn't mean much.

[10:56] <masak> I'd much prefer if we found a hole syntax that wasn't already allowed in mainline Perl 6.

[10:56] * masak is glad about this discussion

[10:56] <masak> at least I'm getting a clearer picture of my kvetches :)

[11:02] *** vendethiel left
[11:06] *** jack_rabbit left
[11:06] *** berekuk joined
[11:07] <FROGGS> damn, we are caching file stats, right?

[11:08] *** _mg_ left
[11:10] *** vendethiel joined
[11:11] *** yqt joined
[11:11] *** yqt left
[11:12] *** yqt joined
[11:12] <FROGGS> for example:

[11:12] <FROGGS> $ perl6 -e 'my $io = "foo".IO; mkdir $io unless $io.d; say $io.d'

[11:12] <FROGGS> Failed to find 'foo' while trying to do '.d'

[11:12] <FROGGS> lizmat: any idea?

[11:12] <FROGGS> lizmat: is there something in IO::Path that can clear $!e?

[11:13] <lizmat> IO::Path doesn't guarantee something exists

[11:13] <FROGGS> that's not the point

[11:13] <lizmat> that's one of the things I tried to fix in newio branch

[11:13] <FROGGS> problem is that it lies

[11:13] <lizmat> until I realised that having symlinks work the way thay work now

[11:13] <FROGGS> it created the directory but .d does not attempt to check it

[11:14] <lizmat> means that a directory entry doesn't mean something exists

[11:14] <FROGGS> hmm?

[11:14] <FROGGS> I don't get it

[11:14] *** _mg_ joined
[11:14] <lizmat> not important right now

[11:14] <FROGGS> it is for me

[11:14] <lizmat> well, not for your problem at hand

[11:14] <FROGGS> because I cannot bootstrap panda

[11:15] <FROGGS> is there something that can reset $!e in IO::Path?

[11:15] <lizmat> so, let me get straight what you want:

[11:15] <FROGGS> k

[11:16] <lizmat> 1. if there is a dir already by that name, do nothing

[11:16] <lizmat> 2. if there's nothing there, create directory

[11:16] <FROGGS> correct

[11:16] <lizmat> 3. if there is something there, and it's not a directory, fail

[11:16] <FROGGS> no

[11:16] <FROGGS> 3. bail out if there is still no dir

[11:16] *** pauluu joined
[11:17] <lizmat> then I would just do a mkdir unconditionally and check afterwards if it iexists and is a dir

[11:17] <lizmat> mkdir $io; die unless $io.e && $io.d

[11:17] <FROGGS> :/

[11:17] <lizmat> checking for existence is a race condition anyway

[11:18] <lizmat> (or non-existence)

[11:18] <FROGGS> okay, so since panda is using Shell::Command my only choice is to convert between strings and IO::Paths it seems

[11:18] <FROGGS> quite smelly

[11:19] <lizmat> many parts of panda are not the most hygienic  :-)

[11:19] <FROGGS> nah, that's not true

[11:20] <FROGGS> panda is quite well designed

[11:20] <lizmat> pushing to @*INC ?

[11:20] <FROGGS> that was your temp hack

[11:20] <lizmat> huh?

[11:20] <lizmat> did I?

[11:21] <FROGGS> ups: https://github.com/tadzik/panda/commit/df8c11ee46e9a3b100510a5dc7ce5a7db78a57eb

[11:21] <FROGGS> I thought these @*INC pushed were not there at all

[11:22] <FROGGS> pushes*

[11:22] <lizmat> :-)

[11:22] <lizmat> *phew*  :-)

[11:22] <FROGGS> hmmm :o(

[11:23] <FROGGS> so these @*INC pushes are about the case when somebody installs to DESTDIR (and env var)

[11:23] <FROGGS> an*

[11:24] <lizmat> I have no idea...  and when I asked tadzik, he didn't know either

[11:24] <FROGGS> the comment talks about the destdir not being in @*INC, and only DESTDIR can trigger that

[11:25] <FROGGS> bootstrap.pl sets up @*INC indirectly via PERL6LIB

[11:27] <lizmat> yeah, not sure whether that is correct either...

[11:28] <FROGGS> "==> Successfully installed panda" phew

[11:28] <lizmat> because @*INC will still include the "normal" entries as well

[11:32] *** vendethiel left
[11:38] <masak> FROGGS++ # panda care and feeding

[11:40] *** andreoss left
[11:41] *** andreoss joined
[11:44] *** colomon left
[11:46] *** andreoss` joined
[11:48] *** andreoss left
[11:50] *** colomon joined
[11:50] *** Ven joined
[11:51] <Ven> masak: what counts as language-level testing support?

[11:51] <Ven> is java's "assert" considered enough for that list? haha. (D has "unittest" blocks)

[11:52] <masak> Ven: my criterion when reading that list was "shouldn't have to import something"

[11:52] <Ven> well, then that's true for, say, rust.

[11:52] <masak> oh, ok.

[11:52] <masak> Java's assert is close, I guess. but it doesn't behave like a unit testing construct. after an `ok` fails in Test.pm, more tests keep running after that.

[11:53] <Ven> it has #[test] attribute

[11:53] <masak> cute.

[11:53] <Ven> Yeah, java's `assert` is pretty bad :-). Scala doesn't have anything, why is it in that list?

[11:54] <Ven> Ruby has something *included*, but not quite special syntax

[11:56] <Ven> > functional languages (Lisp, scheme, haskell) can be good for testing when their functions are side effect free -its very easy to test functions when their whole output is visible and testable.

[11:56] * Ven sighs

[11:57] <masak> call that "TDD overconfidence"

[11:57] <masak> well.

[11:57] <masak> it *is* made easier by that, I guess.

[11:57] <Ven> masak: it seems that list includes every language that includes a *module* for unit testing in its main distribution

[11:57] <Ven> then, is that true of c# which has a testing package *under visualstudio*?

[11:57] <masak> yeah. which breaks the rules stated above the list.

[11:57] *** FROGGS[mobile] left
[11:58] *** FROGGS[mobile] joined
[11:59] <Ven> (I mean, literally under the "visualstudio" namespace)

[12:00] <FROGGS> lizmat: panda just wants to add entries to upfront, and an ENV var is quite handy when shelling out

[12:00] *** vendethiel joined
[12:01] * masak gave in and fixed the list

[12:01] *** Ven left
[12:03] *** berekuk left
[12:05] *** berekuk joined
[12:08] <dalek> rakudo/nom: 7803bf0 | lizmat++ | src/core/Deprecations.pm:

[12:08] <dalek> rakudo/nom: Generalize deprecation message re compile time use

[12:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7803bf0b68

[12:08] <dalek> rakudo/nom: 5278e45 | lizmat++ | src/Perl6/Grammar.nqp:

[12:08] <dalek> rakudo/nom: Make lack of unit a 'real' deprecation message

[12:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5278e45fb8

[12:08] <dalek> rakudo/nom: 236b089 | lizmat++ | docs/ChangeLog:

[12:08] <dalek> rakudo/nom: Add some more ChangeLog entries

[12:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/236b08994a

[12:10] *** dolmen joined
[12:11] *** mazeTemporal joined
[12:13] *** Ven joined
[12:13] <Ven> masak++

[12:13] *** yqt left
[12:14] * Ven thinks we're in a really good shape with 1) PRE/POST 2) subsets/where

[12:14] <Ven> (probably my favorite features of perl6... and sixcheck was a pleasure to write)

[12:15] *** yqt joined
[12:15] <dalek> roast: f6e598f | lizmat++ | S02-types/ (2 files):

[12:15] <dalek> roast: Follow latest deprecation wording changes

[12:15] <dalek> roast: review: https://github.com/perl6/roast/commit/f6e598f306

[12:16] * Ven looks at trigils in fear (and awe)

[12:16] <mazeTemporal> Coke 2015-5-18 23:55 : Yes, with just perl6 but not prove, the tests worked as expected.  The error is thrown when prove tries to execute: perl -x -S prove -e perl6 hellotest

[12:17] <Ven> http://irclog.perlgeek.de/perl6/2015-05-19#i_10625744 masak, people used to think lisp's nested macros were behavior wrong. then someone came and (ab)used it, and everyone rejoiced

[12:17] * Ven thinks he's gotten this "history bit" from Let over lambda or On lisp

[12:19] *** laouji left
[12:19] <mazeTemporal> Does anyone know if there is a simple way to panda install a module but skip the testing?

[12:20] <masak> Ven: well, TimToady has explained to me that quasis don't nest that way.

[12:20] <Ven> masak: oh, seems I missed that in the backlog

[12:20] <masak> Ven: ...so I really don't understand why quasis should have configurable delimiters.

[12:21] <masak> I think I meant to arrive at that point, but I got derailed by the subsequent discussion :)

[12:21] <masak> mazeTemporal: `panda install <module>` ?

[12:21] <masak> oh wait

[12:22] <masak> mazeTemporal: `panda --notests install <module>` ?

[12:22] *** xfix joined
[12:22] <mazeTemporal> masak: ah, I should have checked for flags.  Excellent

[12:24] *** vendethiel left
[12:28] *** tinyblak joined
[12:29] <masak> mazeTemporal: I found out by reading https://github.com/tadzik/panda/blob/master/bin/panda#L18

[12:31] *** tinyblak_ joined
[12:31] *** tinyblak left
[12:32] *** tinyblak joined
[12:33] <mazeTemporal> masak: was there a way for you to know to pick bin/panda rather than any of the other items in bin/ ?

[12:34] *** domidumont left
[12:34] <masak> because `panda` is the command I (and everyone) run all day ;)

[12:34] <dalek> rakudo/nom: 8ab32b8 | lizmat++ | src/ (2 files):

[12:34] <dalek> rakudo/nom: Make 'winner' a compile time deprecation

[12:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ab32b8afe

[12:35] *** tinyblak_ left
[12:38] *** mazeTemporal left
[12:38] *** domidumont joined
[12:38] *** anaeem1 left
[12:50] <dalek> rakudo/nom: 4924f04 | lizmat++ | src/core/VM.pm:

[12:50] <dalek> rakudo/nom: Remove expired deprecations for 2015.05 release

[12:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4924f04662

[12:51] <dalek> roast: db4b007 | lizmat++ | S02-types/deprecations.t:

[12:51] <dalek> roast: Follow expired deprecation removal

[12:51] <dalek> roast: review: https://github.com/perl6/roast/commit/db4b0079b9

[12:56] <dalek> specs/newio: 7a0cb02 | lizmat++ | S32-setting-library/Numeric.pod:

[12:56] <dalek> specs/newio: Concur with implementation of Complex.roots

[12:56] <dalek> specs/newio: review: https://github.com/perl6/specs/commit/7a0cb02b53

[13:07] *** araujo joined
[13:07] *** araujo left
[13:07] *** araujo joined
[13:08] *** vendethiel joined
[13:08] *** araujo left
[13:10] *** raiph joined
[13:12] *** dayangkun joined
[13:16] *** dayangkun left
[13:16] *** dayangkun joined
[13:17] *** rarara joined
[13:17] *** dayangkun left
[13:18] *** dayangkun joined
[13:18] *** dayangkun left
[13:18] *** dayangkun joined
[13:22] <dalek> rakudo/curly: 7b6caee | FROGGS++ | src/core/Distribution.pm:

[13:22] <dalek> rakudo/curly: restructure Distribution; do work once

[13:22] <dalek> rakudo/curly: review: https://github.com/rakudo/rakudo/commit/7b6caee64a

[13:22] <dalek> rakudo/curly: 74a03d0 | FROGGS++ | src/core/CompUnitRepo/Locally.pm:

[13:22] <dalek> rakudo/curly: do no create CURL directories "automagically"

[13:22] *** dalek left
[13:22] *** dalek joined
[13:22] *** ChanServ sets mode: +v dalek

[13:23] <FROGGS> what dalek did not show was this: " use CURLI on moar but not on jvm " - https://github.com/rakudo/rakudo/commit/2d5b07c

[13:24] <FROGGS> with this I'm considering merging rakudo/curly and panda/curly, to get feedback if there is any to get

[13:29] <masak> I just realized that, as much as I like Moose and Perl 5, mentally I have these pegged as "more cumbersome/boilerplate-y ways to do Perl 6"

[13:29] <masak> if that makes sense

[13:29] <masak> probably most p5 people don't think of it this way :>

[13:30] <FROGGS> I don't think it is boilerplately, I think it is only half awesome because they don't have jnthn\W6model

[13:31] <masak> Perl 5 OO without Moose is definitely boilerplate-y.

[13:31] <PerlJam> masak: only those that are familiar with Perl 6  :)

[13:31] <FROGGS> masak: I just know it from code snippets... so don't listen to me :o)

[13:31] *** skids joined
[13:32] <FROGGS> masak: you've not yet seen Carrot :D

[13:32] <[Coke]> timotimo: it runs everything in t/spectest.data, so it's effectively stresstest, yes. doesn't do t/

[13:33] <FROGGS> masak: you need to look at that and tell me opinion: skim that: http://www.carrot-programming.org/ and scroll down this page: http://www.carrot-programming.org/perl/tutorial.html

[13:34] <FROGGS> [Coke]: star does t though, right?

[13:37] <masak> FROGGS: invoking https://en.wikipedia.org/wiki/Poe%27s_law

[13:37] <masak> FROGGS: I literally don't know whether to twitch the corners of my mouth into a smile, or to be very very disturbed by what I just read

[13:37] <[Coke]> FROGGS: supposed to, but:

[13:37] <[Coke]> https://github.com/coke/rakudo-star-daily/blob/master/log/jvm-test-rakudo.log

[13:38] <masak> which I guess means that the artist in question did a good job.

[13:38] <[Coke]> apparently it's been failing since Mar 30th

[13:38] <FROGGS> masak: the creator of carrot gave a talk at the german perl workshow this month...

[13:38] <FROGGS> masak: the audience was more than puzzled so to say

[13:38] <FROGGS> [Coke]: ewww

[13:39] <masak> FROGGS: someone gave a talk about this? that's amazing.

[13:40] <moritz> very good trolling

[13:40] <FROGGS> masak: yes yes... and he could not explain why somebody should use it, or what it is for, or what it gives you... even after three question of the audience

[13:41] <masak> FROGGS: but the SYNOPSIS explains it so clearly already!

[13:41] <masak> I don't understand the source of your confusion

[13:41] <masak> here, let me quote

[13:41] <masak> "higher quality code through systematic expressiveness"

[13:41] <PerlJam> FROGGS: it gives you a carrot!

[13:41] <masak> what part of this don't you understand?

[13:42] <PerlJam> or ...  it doesn't give you a stick!

[13:42] <masak> and if you understand it, what part would you *not* want? :P

[13:42] <moritz> the consistent use of "Perl 5" instead of just "Perl" suggests that the author might be involved with Perl 6

[13:42] <moritz> "normal" Perl 5 people just write "Perl" when they mean Perl 5

[13:42] <FROGGS> masak: the part where I write a huge block of code and don't know what *it* does with it :o)

[13:42] <FROGGS> s/code/comments/

[13:43] <FROGGS> moritz: no, he's a Perl outsider I think

[13:43] <FROGGS> like he asked: Is the magic constant in return(PERL_FILE_LOADED); still needed?

[13:44] <masak> he's a good Samaritan

[13:44] <masak> he saw the Perl 5 people suffering, and he swooped in to give them systematic expressiveness

[13:45] <masak> kind of like someone decided to make "Perl 5 the good parts"

[13:45] <masak> but without knowing much about Perl 6

[13:45] <masak> Perl 5*

[13:45] *** andreoss` left
[13:45] <masak> or good parts

[13:45] *** andreoss` joined
[13:46] <moritz> I liked the PDF, with the first example being a class representing monadic names

[13:51] <masak> he's mis-using the name "monad" for something that means "not quite a singleton".

[13:52] <masak> looks like he's built a Perl 5 preprocessor. for some reason I don't understand.

[13:52] <dalek> perl6-examples: 66ad4a2 | andreoss++ | / (2 files):

[13:52] <dalek> perl6-examples: [euler] solution for problem 80

[13:52] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/66ad4a2310

[13:54] <FROGGS> I think his goal is to have enough boilerplate in the source as some sort of documentation to state very very clearly what it does

[13:54] <FROGGS> though, it is not quite readable for me

[13:55] <masak> I think I might be able to have an interesting conversation with him over beer or so.

[13:55] <masak> seeing the examples, I don't see what this would give me over, say, Moose.

[13:55] <masak> I already write nice and descriptive variable names, and I don't need a framework for that.

[13:56] <dalek> rakudo/nom: f4de5f3 | lizmat++ | src/core/ (2 files):

[13:56] <dalek> rakudo/nom: Eat our own unicode operator dogfood

[13:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f4de5f3645

[13:56] * moritz thinks it's very artful trolling

[13:56] <FROGGS> sad that we are not writing VB, we could have varying names instead :P

[13:57] <masak> moritz: except it's been extracted from some production system he has called Mica.

[13:57] <masak> FROGGS: you mean case-insensitive names?

[13:57] <masak> *surely* there must be an Acme:: CPAN module for that?

[13:57] <masak> otherwise we owe it to ourselves to produce a slang for it :P

[13:57] <FROGGS> masak: aye

[13:57] <masak> FROGGS: you know what to do... :>

[13:58] <FROGGS> nooooo! /o\

[13:58] <masak> :)

[13:58] <FROGGS> though, should be fairly easy to do btw :o)

[13:59] <FROGGS> damn

[13:59] <FROGGS> Program received signal SIGSEGV, Segmentation fault.

[13:59] <FROGGS> gc_mark (tc=0x6036f0, st=<optimized out>, data=<optimized out>, worklist=0x3984e30) at src/6model/reprs/SCRef.c:75

[13:59] <FROGGS> curly segfaults when used with EVALs

[13:59] <FROGGS> >.<

[14:00] * masak .oO( the three stoogefaults )

[14:04] * FROGGS cries

[14:05] * lizmat resists slapping FROGGS repeatedly on the head

[14:06] *** yqt left
[14:06] <andreoss`> m: my @e := (2; gather take 1,$_,1 for 2,4 ... *); say @e[^20];

[14:06] *** anaeem1 joined
[14:08] <moritz> masak: ... or so he claims

[14:08] <masak> troo

[14:09] <moritz> masak: "Not paranoid enough!"

[14:09] *** newbie joined
[14:09] *** newbie left
[14:09] <FROGGS> I need some distance between and curly now

[14:10] <FROGGS> me*

[14:11] <masak> moritz: ;)

[14:11] *** anaeem1 left
[14:11] <FROGGS> :P

[14:11] <FROGGS> lizmat: how kind of you :o)

[14:12] <FROGGS> m: say '(timeout)'

[14:14] <FROGGS> no timeout?

[14:17] <DrForr> 'FROGGS' ~ "\n" xx 10e100 ~ 'DrForr'

[14:18] <DrForr> s/DrForr/{/ :)

[14:20] <lizmat> commute to NRPM meeting&

[14:20] *** lizmat left
[14:20] <FROGGS> *g*

[14:23] *** Erendis42d joined
[14:23] <Erendis42d> apa<3

[14:23] <masak> Swedish for "monkey"

[14:23] <Erendis42d> monkey<3

[14:23] <masak> :)

[14:24] <masak> Erendis42d: are you in .hu ?

[14:24] <Erendis42d> oops

[14:24] * Erendis42d zipp

[14:24] <Erendis42d> x)

[14:25] <masak> ok, got it :)

[14:26] <camelia> rakudo-moar 4924f0: OUTPUT«2 1 2 1 1 4 1 1 6 1 1 8 1 1 10 1 1 12 1 1 14 1 1 16 1 1 18 1 1 20 1 1 22 1 1 24 1 1 26 1 1 28 1 1 30 1 1 32 1 1 34 1 1 36 1 1 38 1 1 40 1 1 42 1 1 44 1 1 46 1 1 48 1 1 50 1 1 52 1 1 54 1 1 56 1 1 58 1 1 60 1 1 62 1 1 64 1 1 66 1 1 68 1 1 70 1 1 72 1 1 74 1…»

[14:26] <camelia> rakudo-moar 4924f0: OUTPUT«(timeout)␤»

[14:27] <masak> andreoss`: interesting. what is that?

[14:31] <masak> oh, it's the continued fraction for e.

[14:31] *** yubimusubi is now known as Possum

[14:31] <masak> http://oeis.org/A003417

[14:31] <masak> oeis++

[14:31] <andreoss`> it is. 

[14:32] <masak> now that Java 8 interfaces can have default method implementations, Java interfaces feel a lot more like Perl 6 roles.

[14:32] <andreoss`> m: my @e := gather { take 2;  take (1; $_; 1) for 2,4 ... * }; say @e[^10];

[14:32] <camelia> rakudo-moar f4de5f: OUTPUT«2 1 2 1 1 4 1 1 6 1␤»

[14:33] <dalek> rakudo-star-daily: e816fe3 | coke++ | bin/git.p5:

[14:33] <dalek> rakudo-star-daily: Don't need to pull parrot at this time

[14:33] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/e816fe33c5

[14:33] <andreoss`> is there a nice way to put something before gather without forcing to eager context?

[14:34] <andreoss`> m: my @e := 2, gather take (1; $_; 1) for 2,4 ... * ; say @e[^10]; #eager

[14:34] <camelia> rakudo-moar f4de5f: OUTPUT«(timeout)»

[14:36] *** andreoss` left
[14:36] *** andreoss joined
[14:38] <andreoss> *forcing it to

[14:38] *** RabidGravy joined
[14:40] *** vendethiel left
[14:40] <[Coke]> rakudo-star-daily failure seems to begin with this:

[14:40] <[Coke]> perl6 tools/build/panda-state.p6 >>MANIFEST

[14:40] <[Coke]> Failed to connect: host is unreachable

[14:41] *** anaeem1_ joined
[14:42] <[Coke]> ... because it's hardcoded to go to http://feather.perl6.nl:3000/projects.json

[14:43] <[Coke]> When did feather die?

[14:44] <FROGGS> end of march

[14:44] <FROGGS> [Coke]: use http://ecosystem-api.p6c.org/projects.json

[14:44] <skids> glasses to glasses, rust to rust

[14:46] <FROGGS> andreoss: wait for the GLR I'd say

[14:46] <FROGGS> m: my @e := 2, lazy gather take (1; $_; 1) for 2,4 ... * ; say @e[^10];

[14:46] *** _mg_ left
[14:46] <camelia> rakudo-moar f4de5f: OUTPUT«(timeout)»

[14:47] *** lolisa joined
[14:49] *** anaeem1_ left
[14:50] *** anaeem1 joined
[14:56] <dalek> star: f704eda | coke++ | tools/build/panda-state.p6:

[14:56] <dalek> star: Update projects list, feather is no more.

[14:56] <dalek> star: review: https://github.com/rakudo/star/commit/f704edacef

[14:56] *** FROGGS left
[14:57] <[Coke]> FROGGS++ # interestingly, we updated the changelog in star to mention it, but not the feather links themselves.

[14:57] *** domidumont left
[14:58] *** domidumont joined
[14:59] <dalek> perl6-examples: 4430880 | andreoss++ | / (3 files):

[14:59] <dalek> perl6-examples: [euler] solution for problem 65

[14:59] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/44308808d1

[14:59] *** berekuk left
[15:00] <[Coke]> now getting: perl6 tools/build/panda-state.p6 >>MANIFEST

[15:00] <[Coke]> No such method 'ast' for invocant of type 'Any'

[15:00] <[Coke]> will dig more after dayjob

[15:10] *** dolmen left
[15:17] *** dolmen joined
[15:23] *** gfldex joined
[15:26] *** anaeem1 left
[15:26] <dalek> perl6-examples: 009e71b | andreoss++ | / (4 files):

[15:26] <dalek> perl6-examples: [euler] solution for problem 66

[15:26] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/009e71b7e8

[15:27] <Ven> if I use a proto in a grammar, will the modifiers be applied... "naturally"? What I'm thinking of: if I have several variants, but they're not ordered in any way, can I use a "proto regex" (with all actual regexes be "token"s) and will it backtrack upon failing to match the first one?

[15:29] *** zakharyas left
[15:30] <Ven> oh, obviously, <.ws> matches newlines as well...

[15:31] <skids> token foo:<sym> is specced to be equivalent to an alternation I believe.

[15:32] *** lolisa left
[15:32] <Ven> really? I changed the order and some of my stuff suddenly matches

[15:33] <skids> *foo:sym<bar>

[15:33] <Ven> wow, ws handling is core is kind of crazy...

[15:33] <Ven> skids: ah, thanks

[15:34] <Ven> s05 doesn't talk about sym

[15:35] <Ven> (it *mentions* it without explaining if it means anything special)

[15:35] <skids> The language says: "All of them will be matched in parallel when you try to match" based on longest token, with ties causing an actual dispatch using any formal parameters.

[15:36] <skids> I think the :sym is just the name of the $sym inside the rule if you need to self-reference it.

[15:36] <skids> And the magic is in the colon :-)

[15:37] <skids> *<sym> not $sym apparently.  It autmakes a subrule name.

[15:37] * Ven goes and writes "token sp { ' '* }"

[15:39] <Ven> skids: then I might have a LTM issue :)

[15:40] *** TimToady left
[15:42] *** TimToady joined
[15:42] *** dayangkun left
[15:50] <hoelzro> is there a way to add custom type adverbs?

[15:50] <hoelzro> instead of just Type:U and Type:D?

[15:51] <skids> well, constraints.

[15:52] <[Coke]> m:         my $s = IO::Socket::INET.new(:host<ecosystem-api.p6c.org>, :port(80));

[15:52] <[Coke]>         $s.send("GET /projects.json HTTP/1.0\n\n");

[15:52] <[Coke]>     my ($buf, $g) = '';

[15:52] <[Coke]>     $buf ~= $g while $g = $s.get;

[15:52] <camelia> rakudo-moar f4de5f: OUTPUT«IO::Socket::INET is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in method new at src/RESTRICTED.setting:32␤  in block <unit> at /tmp/v3WxcpXK4c:1␤  in any <unit-outer> at /tmp/v3WxcpXK4c:1␤␤»

[15:52] <[Coke]> whoops.

[15:53] <[Coke]> https://gist.github.com/coke/822e10edcc7a89526294 - this gets a 404 from design.perl6.org

[15:53] <[Coke]> Guessing we need a host: line here as well.

[15:54] *** dolmen left
[15:54] <[Coke]> that doesn't seem to help.

[15:55] <Ven> ...is it expected that "dba" makes a rule fail?

[15:56] <TimToady> I would not expect it

[15:56] <[Coke]> er, 400, not 404.

[15:57] <[Coke]> so, that gist is currently blocking anyone building a Star.

[15:57] *** Ven left
[15:58] <tadzik> oh hai

[15:58] <[Coke]> ah, got it.

[15:58] *** xfix left
[15:59] *** lizmat joined
[16:01] <dalek> star: 6ed4ca0 | coke++ | tools/build/panda-state.p6:

[16:01] <dalek> star: Unify get request for proxy/non-proxy

[16:01] <dalek> star: 

[16:01] <dalek> star: ecosystem host confused by the http/1.0 attempt there

[16:01] <dalek> star: (used to work fine against feather)

[16:01] <dalek> star: review: https://github.com/rakudo/star/commit/6ed4ca07b2

[16:02] *** xfix joined
[16:02] * japhb wierds out at servers failing to understand HTTP/1.0

[16:04] <[Coke]> japhb: I have no idea what about that request was wonky.

[16:05] <[Coke]> but the 1.1 version worked fine, so why even have the 1.0 attempt.

[16:06] *** khisanth__ is now known as Khisanth

[16:07] <[Coke]> that fixed it. next rakudo-star-daily run should be fine again.

[16:09] *** vendethiel joined
[16:09] <[Coke]> (the NEXT one, not the one I just pushed.)

[16:09] *** [Sno] left
[16:12] <andreoss> m: say True ¿¿ 1 ¡¡ 2;

[16:12] <camelia> rakudo-moar f4de5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/aTsqg1zZXt␤Two terms in a row␤at /tmp/aTsqg1zZXt:1␤------> 3say True7⏏5 ¿¿ 1 ¡¡ 2;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤   …»

[16:15] *** eli-se joined
[16:16] <eli-se> hi

[16:16] <FROGGS[mobile]> how wrong is it to merge a branch that one is confident enough when jnthn wanted to review it first?

[16:17] <TimToady> std: say True ¿¿ 1 ¡¡ 2;

[16:17] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Confused at /tmp/saIuFP9Xbk line 1:␤------> 3say True 7⏏5¿¿ 1 ¡¡ 2;␤    expecting any of:␤   feed_separator␤ infix or meta-infix␤    infixed function␤       statement modifier loop␤Parse failed␤FAILED 00:00 136m␤»

[16:17] <TimToady> I coulda sworn I fixed rakudo to say "Confused" there rather than TTIAR, which is misleading

[16:18] <hoelzro> if someone wanted to modify smoke.perl6.org to include dists whose tests passed but raised warnings, what would be the best way to go about that? I saw last night that smoke.perl6.org uses emmentaler (sp?), which uses panda

[16:20] *** abraxxa left
[16:20] *** berekuk joined
[16:25] *** berekuk left
[16:26] <FROGGS[mobile]> I'd record the output of 'panda smoke' if it is meant for single use

[16:27] *** anaeem1_ joined
[16:28] <dalek> roast: a87fde4 | lizmat++ | / (95 files):

[16:28] <dalek> roast: s/is_deeply/is-deeply/g

[16:28] <dalek> roast: review: https://github.com/perl6/roast/commit/a87fde4e98

[16:38] *** domidumont left
[16:38] *** isBEKaml joined
[16:40] <hoelzro> FROGGS[mobile]: I didn't know about panda smoke, thanks!

[16:40] *** mohij joined
[16:41] <hoelzro> I think I would just need to capture $*ERR and see there's anything in there

[16:42] <FROGGS[mobile]> in a subprocess?

[16:43] <hoelzro> yeah

[16:43] <FROGGS[mobile]> O.o

[16:44] <hoelzro> FROGGS[mobile]: not a good idea?

[16:45] <FROGGS[mobile]> tbh, I hack the deprecation printer in rakudo...

[16:45] <FROGGS[mobile]> I'd*

[16:46] *** lolisa joined
[16:48] <[Coke]> if jnthn has requested to review something, I'd leave it until then.

[16:48] *** diana_olhovik_ left
[16:49] *** berekuk joined
[16:49] *** mr-foobar joined
[16:50] <[Coke]> looks like dalek missed a push to rakudo-star-daily.

[16:50] *** berekuk left
[16:51] <lizmat> FROGGS[mobile] hoelzro : RAKUDO_NO_DEPRECATIONS=1 will also kill any deprecation messages

[16:51] *** [Sno] joined
[16:51] <andreoss> how do i put math formulas in pod? 

[16:53] <japhb> lizmat: Does that also apply to the "compile time deprecations" you added recently?

[16:53] <lizmat> yes

[16:53] <lizmat> except for the nqp one

[16:53] <lizmat> lemme check

[16:53] <japhb> cool beans.  lizmat++

[16:53] <japhb> Which is the nqp one?

[16:53] <lizmat> m: nqp::say("hello")

[16:53] <camelia> rakudo-moar f4de5f: OUTPUT«The use of nqp::operations has been deprecated for non-CORE code.  Please␤change your code to not use these non-portable functions.  If you really want␤to keep using nqp::operations in your Perl6 code, you must add a:␤␤  use nqp;␤␤to the outer …»

[16:53] <lizmat> m: use nqp; nqp::say("hello")

[16:53] <camelia> rakudo-moar f4de5f: OUTPUT«hello␤»

[16:54] <japhb> Oh, gotcha

[16:54] *** dakkar left
[16:54] *** domidumont joined
[16:55] <japhb> I'm just trying to get my local build-and-install-modules script to stop spitting a thousand warnings about "unit" during the install modules phase, just so I can concentrate on the actual *failures*.

[16:56] *** vendethiel left
[16:57] *** lichtkind joined
[16:57] <lizmat> yeah, missing unit warning should be stoppable with RAKUDO_NO_DEPRECATIONS=1 now as well

[16:58] <lizmat> working on the nqp one

[16:58] *** vendethiel joined
[16:59] *** anaeem1_ left
[17:01] *** espadrine left
[17:06] *** ShimmerFairy left
[17:14] *** eli-se left
[17:16] *** Hor|zon left
[17:17] *** lichtkind left
[17:18] <hoelzro> lizmat: I'd like to detect deprecation warnings rather than prevent them

[17:18] <hoelzro> FROGGS[mobile]: I would also like to detect nqp:: usage, and iirc, that goes through a different mechanism that deprecations

[17:19] <lizmat> that's fine too...  just don't do RAKUDO_NO_DEPRECATIONS=1 then

[17:19] <hoelzro> noted =)

[17:19] *** ShimmerFairy joined
[17:19] <lizmat> yes, but it will be switch-offable in the same way soon

[17:19] *** Hor|zon joined
[17:21] <hoelzro> lizmat, FROGGS[mobile]: do either of you think there are other warnings I should try to detect?

[17:21] *** vendethiel left
[17:21] <lizmat> hoelzro: also, calling Deprecation.report in e.g. an END block, will give you all deprecations (and clean them out)

[17:24] <dalek> rakudo/nom: 27e531b | lizmat++ | src/Perl6/Actions.nqp:

[17:24] <dalek> rakudo/nom: nqp:: message stoppable by RAKUDO_NO_DEPRECATIONS

[17:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27e531b2d1

[17:25] *** _mg_ joined
[17:30] *** vendethiel joined
[17:30] *** diana_olhovik joined
[17:33] *** woolfy joined
[17:34] *** woolfy left
[17:35] *** virtualsue joined
[17:36] *** tinyblak left
[17:37] *** tinyblak joined
[17:37] *** anaeem1 joined
[17:39] *** muraiki joined
[17:39] <dalek> json: 532723d | paultcochrane++ | lib/JSON/Tiny (3 files):

[17:39] <dalek> json: Add unit declarator to module, class and grammar declarations

[17:39] <dalek> json: 

[17:39] <dalek> json: As of Rakudo 2015.05, the `unit` declarator is required before using

[17:39] <dalek> json: `module`, `class` or `grammar` declarations (unless it uses a block).  Code

[17:39] <dalek> json: still using the old blockless semicolon form will throw a warning. This

[17:39] <dalek> json: commit stops the warning from appearing in the new Rakudo.

[17:39] <dalek> json: review: https://github.com/moritz/json/commit/532723d613

[17:39] <dalek> json: 42df6e0 | moritz++ | lib/JSON/Tiny (3 files):

[17:39] <dalek> json: Merge pull request #15 from paultcochrane/pr/add-unit-declarator

[17:39] <dalek> json: 

[17:39] <dalek> json: Add unit declarator to module, class and grammar declarations

[17:39] <dalek> json: review: https://github.com/moritz/json/commit/42df6e029d

[17:44] *** fhelmberger left
[17:45] *** FROGGS joined
[17:45] <FROGGS> o/

[17:45] <lizmat> FROGGS o/

[17:47] <FROGGS> hoelzro: every warning is interesting

[17:47] <hoelzro> FROGGS: works for me

[17:50] *** tinyblak left
[17:51] *** raiph left
[17:56] <Erendis42d> ❤

[17:56] <dalek> nqp: 2844001 | FROGGS++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[17:56] <dalek> nqp: map new scdisclaim op on moar

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2844001093

[17:56] <dalek> nqp: e7b8aef | FROGGS++ | src/vm/jvm/ (3 files):

[17:56] <dalek> nqp: first stab at implementing scdisclaim for jvm

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e7b8aef15f

[17:56] <dalek> nqp: 3135dfa | FROGGS++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[17:56] <dalek> nqp: Check owning object wasn't disclaimed.

[17:56] <dalek> nqp: 

[17:56] <dalek> nqp: Port of https://github.com/MoarVM/MoarVM/commit/1a36596

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3135dfa6bb

[17:56] <dalek> nqp: 3776246 | FROGGS++ | tools/build/MOAR_REVISION:

[17:56] <dalek> nqp: bump moar rev for scdisclaim op

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3776246d77

[17:56] <Erendis42d> ❤

[17:56] *** Erendis42d left
[17:56] <vendethiel> o/

[17:57] <FROGGS> hi ven

[18:00] *** ycaymanbo left
[18:07] <vendethiel> http://irclog.perlgeek.de/perl6/2015-05-19#i_10627114 TimToady: I'll try to get a reproducible test case

[18:08] <vendethiel> I ended up using jnthn++'s Grammar::Debugger, as Debugger::UI::CommandLine was busted

[18:08] <vendethiel> .oO( duplication is GREAT )

[18:08] *** eli-se joined
[18:09] *** [Tux] left
[18:09] *** telex left
[18:10] *** telex joined
[18:11] <hoelzro> dammit, I was using JSON::Tiny as a guinea pig for warnings =/

[18:11] *** andreoss left
[18:14] *** raiph joined
[18:15] <timotimo> oh hey everybody

[18:15] <FROGGS> hi timotimo 

[18:16] <hoelzro> o/ timotimo 

[18:18] *** anaeem1 left
[18:19] *** anaeem1 joined
[18:20] *** [Tux] joined
[18:21] *** _mg_ left
[18:21] *** berekuk joined
[18:21] *** berekuk left
[18:22] *** berekuk joined
[18:23] *** berekuk left
[18:24] *** anaeem1 left
[18:28] *** _mg_ joined
[18:28] *** berekuk joined
[18:37] *** Hor|zon left
[18:44] *** eli-se left
[18:46] *** Woodi left
[18:47] *** rindolf left
[18:56] <dalek> rakudo/nom: f17b413 | lizmat++ | src/Perl6/World.nqp:

[18:56] <dalek> rakudo/nom: Don't load -M specs for each EVAL

[18:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f17b4138be

[19:00] *** lolisa left
[19:02] *** lolisa joined
[19:05] <itz_> is there no Czech or Polish Workshop this year?

[19:06] *** anaeem1 joined
[19:07] <lizmat> I've heard rumours about a Polish PW to be there one way or another

[19:08] <lizmat> haven't heard anything about a 2nd Czech PW just yet

[19:08] *** anaeem___ joined
[19:08] *** anaeem1 left
[19:09] <itz_> k

[19:12] *** domidumont left
[19:13] * colomon thinks he has a $work trip lined up that will allow him to attend the Swiss Perl Workshop

[19:13] <FROGGS> colomon: \o/

[19:13] *** _mg_ left
[19:13] <colomon> nothing official yet

[19:13] <dalek> perl6-examples: 7c839b9 | paultcochrane++ | categories/cookbook/09directories/09-10-filename-splitting.pl:

[19:13] <dalek> perl6-examples: [cookbook] remove extra semicolon

[19:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/7c839b9ed8

[19:13] <dalek> perl6-examples: f496d51 | paultcochrane++ | / (4 files):

[19:13] <dalek> perl6-examples: Merge branch 'master' of github.com:perl6/perl6-examples

[19:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/f496d5173c

[19:13] <dalek> perl6-examples: 310934e | paultcochrane++ | t/categories/euler.t:

[19:13] <dalek> perl6-examples: [euler] update test plan after added tests

[19:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/310934ea0b

[19:14] <timotimo> i wonder if i should postpone the weekly until the release?

[19:14] <FROGGS> aww

[19:17] <japhb> timotimo: I know I would be sad, but I understand if you're feeling overloaded

[19:18] <timotimo> "overloaded" sounds a bit too extreme :)

[19:20] <lizmat> timotimo: please don't hesitate to call for backup  :-)

[19:20] <timotimo> hm, i wonder

[19:26] *** kst`` is now known as kst

[19:28] <[Coke]> is dwarring here?

[19:28] <[Coke]> (under an alias?)

[19:29] <timotimo> he used to be "dwarring"

[19:29] <[Coke]> roast tip: don't need to put a separate fudge for .moar and .jvm before the same test. just "rakudo" is fine in that case, it'll todo or skip both backends if you don't specify

[19:30] <timotimo> correct

[19:30] <timotimo> perhaps you want a different message, though?

[19:31] <[Coke]> sure, but in the commit of his I saw, it was the same.

[19:32] <timotimo> ah

[19:33] <dalek> roast: 08b5de5 | lizmat++ | / (156 files):

[19:33] <dalek> roast: s/throws_like/throws-like/g

[19:33] <dalek> roast: review: https://github.com/perl6/roast/commit/08b5de53c2

[19:38] *** andreoss joined
[19:40] <timotimo> .tell jnthn do we want to destroy/clean-up the sc reader when we do scdisclaim? since we demand every object in the sc anyway

[19:40] <yoleaux> timotimo: I'll pass your message to jnthn.

[19:40] <dalek> rakudo/cunion: 67245d3 | FROGGS++ | / (4 files):

[19:40] <dalek> rakudo/cunion: add support for unions in NativeCall using CUnion repr

[19:40] <dalek> rakudo/cunion: review: https://github.com/rakudo/rakudo/commit/67245d37d4

[19:40] <dalek> rakudo/cunion: bf3a3be | FROGGS++ | t/04-nativecall/13-union. (2 files):

[19:40] <dalek> rakudo/cunion: add tests for C union support for NativeCall

[19:40] <dalek> rakudo/cunion: review: https://github.com/rakudo/rakudo/commit/bf3a3be043

[19:40] <dalek> rakudo/cunion: 9186fdf | FROGGS++ | t/04-nativecall/13-union. (2 files):

[19:40] <dalek> rakudo/cunion: test inlined CStructs in CUnions

[19:40] <dalek> rakudo/cunion: review: https://github.com/rakudo/rakudo/commit/9186fdf821

[19:40] <dalek> rakudo/cunion: 0d075f3 | FROGGS++ | t/04-nativecall/13-union. (2 files):

[19:40] <dalek> rakudo/cunion: fix bogus test (wrong alignment)

[19:40] <dalek> rakudo/cunion: review: https://github.com/rakudo/rakudo/commit/0d075f315d

[19:40] <vendethiel> FROGGS++!

[19:41] <FROGGS> just a rebase + a new commit :o)

[19:41] <FROGGS> (because I want to merge in a bit)

[19:41] <TimToady> have you checked that out with the release manager :)

[19:41] <vendethiel> ah, I thought you merged it all. misread!

[19:41] <FROGGS> TimToady: ;o)

[19:42] <FROGGS> one last test and then it goes in

[19:42] <timotimo> very cool

[19:43] <FROGGS> would be nice if an apple device owner could test it afterwards

[19:43] <timotimo> i'm not sure any of these people actually own their device

[19:43] <timotimo> :P

[19:43] <FROGGS> (I did get a confirmation of the branch on osx two days or so ago)

[19:43] <FROGGS> hehe

[19:43] <FROGGS> timotimo: maybe that is why it is often called 'user'

[19:43] <FROGGS> ?

[19:43] <timotimo> hehe

[19:44] <colomon> FROGGS: you want confirmation that cunion branch works on OS X?

[19:44] <FROGGS> colomon: that'd by cool, yes

[19:44] <FROGGS> colomon: MoarVM/cunion, nqp/master, rakudo/cunion

[19:45] <colomon> just did rakudobrew build moar cunion, should that work or no?

[19:45] <timotimo> i don't think that gives you moarvm/cunion as well as rakudo/cunion

[19:45] <dalek> rakudo/nom: 97b4db0 | lizmat++ | t/0 (5 files):

[19:45] <dalek> rakudo/nom: Some more kebabcasing test functions

[19:45] <dalek> rakudo/nom: 

[19:45] <dalek> rakudo/nom: Except is_approx, because it needs special attention?

[19:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/97b4db0030

[19:46] <FROGGS> colomon: yeah, that wont pick up the right moarvm

[19:46] <colomon> bother

[19:46] *** brrt joined
[19:46] *** eli-se joined
[19:46] <FROGGS> colomon: np, you can test nom/master in a sec :o)

[19:46] *** ollinator joined
[19:46] <colomon> FROGGS: oh, sure, that’s easy enough.  ;)

[19:47] <timotimo> hehehe

[19:47] <TimToady> we hope...

[19:47] * colomon is trying “rakudobrew triple cunion master cunion" in the meantime

[19:47] <timotimo> you'll hardly break anything by merging that; it should only touch new code, right?

[19:47] <colomon> and “triple” fails early on.

[19:47] <timotimo> huh

[19:47] <dalek> nqp: a56e469 | FROGGS++ | tools/build/MOAR_REVISION:

[19:47] <dalek> nqp: bump moar for CUnion repr

[19:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a56e46928f

[19:47] <colomon> I think it’s a triple bug, not cunion

[19:48] <FROGGS> timotimo: the Wurst that could happen is that make test fails

[19:48] <FROGGS> ohh wait...

[19:48] <FROGGS> let's not merge the rakudo branch until I've implemented it on JVM O.O

[19:48] <timotimo> mhm

[19:49] <FROGGS> damn

[19:49] <FROGGS> I tend to forget that

[19:49] <lizmat> FROGGS: well, at least you won't make the release manager angry  ;-)

[19:49] <colomon> the good news is that “rakudobrew build moar cunion” ought to get the correct nqp/moar now, right?

[19:49] <lizmat> at least, I hope

[19:50] <FROGGS> colomon: no, domt think so either

[19:50] <FROGGS> dont*

[19:50] <colomon> well bother

[19:51] <FROGGS> colomon: it is okay, it will get tested at some point

[19:51] <ollinator> does anybody know how far perl6 is? can one use it for production scripts - or should you use perl5 instead?

[19:51] <brrt> ehm

[19:52] <lizmat> ollinator: yes

[19:52] <brrt> we're releasing this christmas, so i'd guess you can use it already

[19:52] <brrt> but it depends really on what you mean by production

[19:52] <lizmat> brrt++ for a more friendly answer

[19:53] <masak> the answer depends on the person, and that person's uses/requirements

[19:53] <brrt> amd what you consider 'production ready'

[19:53] <masak> that's a less "fun" answer than just yes/no. but it's more accurate

[19:54] <ollinator> okay, well i'm using perl5 to automate data transmission, e.g. sftp, and logging everything to a mysql db, that works perfectly. But I'd like to upgrade to perl6, don't know how compatible it is to version 5

[19:54] <FROGGS> using it for on/off scripts, data mangling tasks etc: ohh yes! - using it for daemons: well, maybe not yet

[19:54] <ollinator> Well okay, I have to read around about it, thanks anyway

[19:55] <timotimo> FROGGS: i think the term you're looking for is "one-off" rather than "on/off"

[19:55] <masak> ollinator: sounds like Perl 6 might be ready for you :)

[19:55] <FROGGS> ahh, perhaps

[19:56] <brrt> ollinator: i think perl6 can do that and more; but i would also point out that perl6 is not a dandified perl5

[19:56] <ollinator> okay, but it's a daemon that i wrote, using net::sftp::foreign, dbi as modules, that kind of stuff

[19:56] <literal> ollinator: it would not be an upgrade in the traditional sense, any more than "upgrading" from Javascript to Lua. Perl 5 and 6 are very separate languages, with a common root

[19:57] <ollinator> okay, i see

[19:57] <ollinator> thanks a lot for this introduction

[19:57] <brrt> i'm not very familiar with net::sftp::foreign, is that using an external program?

[19:57] <literal> especially performance-wise, at this stage. Perl 6 is not quite there yet

[19:57] *** lolisa left
[19:57] <masak> well, Perl 6 is very much an "upgrade" (just a non-backwards-compatible one) on Perl 5 from 2000. but, crucially, so is Perl 5 of today -- except it's backwards-compatible.

[19:58] <ollinator> yes it is using the native openssh client that ships with the linux distro

[19:58] <dalek> roast: d36a7d8 | usev6++ | S04-phasers/pre-post.t:

[19:58] <dalek> roast: Make some tests more specific

[19:58] <dalek> roast: ( s/lives_ok/is/ and s/dies_ok/throws-like/ )

[19:58] <dalek> roast: review: https://github.com/perl6/roast/commit/d36a7d88b4

[19:58] <FROGGS> bartolin++

[19:58] <brrt> ollinator: then I supsect we can get there already somewhat using Proc::Async

[19:59] <brrt> http://doc.perl6.org/type/Proc::Async is the default class for communicating with subprocesses

[20:00] <timotimo> could still be nice to have someone build a port of that module

[20:01] <FROGGS> .tell someone Please port that module

[20:01] <yoleaux> FROGGS: I'll pass your message to someone.

[20:01] *** Woodi joined
[20:01] <timotimo> haha

[20:01] * FROGGS .oO( Owl post again. )

[20:02] *** virtualsue_ joined
[20:02] *** virtualsue left
[20:02] *** virtualsue_ is now known as virtualsue

[20:03] <timotimo> .. owl ... post?

[20:03] <ollinator> okay i see perl6 is quite different from previous versions. but i'm interested in learning, so i'll have a closer look. thanks for the hint

[20:04] <ollinator> thanks @everybody

[20:04] <timotimo> cool

[20:04] <brrt> good luck

[20:04] <timotimo> keep us posted with your progress and questions :)

[20:04] <masak> come back soon!

[20:04] <timotimo> input about our learning material is always welcome

[20:04] <timotimo> we know there's some rough edges 

[20:05] <FROGGS> timotimo: that's a Harry Potter chapter

[20:05] <timotimo> ah!

[20:05] <timotimo> eulenpost

[20:05] <dalek> roast: 4005f4d | lizmat++ | S (12 files):

[20:05] <dalek> roast: s/cmp_ok/cmp-ok/g

[20:05] <dalek> roast: review: https://github.com/perl6/roast/commit/4005f4d098

[20:05] <FROGGS> aye

[20:06] * masak .oO( cat-head eagle post )

[20:08] <jdv79> is all the testing stuff doc'd in a central place?

[20:08] <jdv79> it would be nice if we tested all the things and it was easily knowable/findable

[20:09] *** ollinator left
[20:09] <jdv79> basically like p5's cpantesters but with better reports maybe - idk

[20:13] <jdv79> [Coke]: ^^^ (forgot to address that burst)

[20:14] <japhb> jdv79: I was literally in the middle of suggesting you talk to [Coke] when you sent that last line.  :-)

[20:16] <[Coke]> I don't think such a thing exists, no.

[20:17] <dalek> roast: b19b0bf | usev6++ | S04-phasers/pre-post.t:

[20:17] <dalek> roast: Fix precedence for fudged test

[20:17] <dalek> roast: review: https://github.com/perl6/roast/commit/b19b0bfddb

[20:17] *** darutoko left
[20:18] *** diana_olhovik left
[20:18] <FROGGS> jdv79: we have something like cpantesters, testers.perl6.org - feel free to create feature request issues

[20:18] *** raiph left
[20:19] <jdv79> docs

[20:19] <jdv79> all i know about that is that if i go to that url i see reports in a semi-confusing UI

[20:20] <andreoss> [ptc]: i want add a handler for =RESULT section to p6-examples, in order to place results of PE tasks under a spoiler tag, is it ok?

[20:20] <jdv79> who runs that stuff?

[20:20] *** diana_olhovik joined
[20:20] <FROGGS> jdv79: so you are missing information like these? http://wiki.cpantesters.org/

[20:21] <FROGGS> jdv79: me

[20:23] *** xfix left
[20:24] *** anaeem___ left
[20:24] <[ptc]> andreoss: go for it

[20:24] *** anaeem1 joined
[20:24] <[ptc]> andreoss: if you can add tests for the new feature, that'd be good too :-)

[20:25] <jdv79> the first thing that comes to mind is having all the major rakudo smokes (moar,jvm x t,spec,stress) somewhere

[20:25] <jdv79> also where is there info about what happened here: http://testers.perl6.org/reports/47409.html

[20:26] <[ptc]> andreoss: thanks for adding more examples and tests for them!  However, could you update the plan in the tests as well?  It was missed the last few times

[20:26] *** diana_olhovik left
[20:26] *** al2o3-cr joined
[20:27] <jdv79> where are the reports sourced?

[20:28] <jdv79> i guess docs and rakudo smoking are my main interests

[20:28] <FROGGS> jdv79: for report 47409, the report client (panda) did not record any data... dunno why, would be interesting to reproduce and fix

[20:29] <jdv79> is that what happens when panda was run with --notests?

[20:29] <[ptc]> andreoss: also, I've been wondering if we should remove the expected results from the Euler examples, since the Euler people actually really don't like it having the results being published publically

[20:29] <dalek> roast: 0cbc065 | lizmat++ | S (134 files):

[20:29] <dalek> roast: s/eval_dies_ok/eval-dies-ok/g

[20:29] <dalek> roast: review: https://github.com/perl6/roast/commit/0cbc065a46

[20:29] <jdv79> and does panda always report?

[20:29] <FROGGS> rakudo smoking happens in [Coke]++'s repositories, and docs are at http://doc.perl6.org/language/testing

[20:29] <timotimo> not always; you need to set an env var

[20:29] <FROGGS> jdv79: might be about --notests... dunno offhand

[20:29] *** anaeem1 left
[20:30] <FROGGS> like in: PANDA_SUBMIT_TESTREPORTS=1 panda install Flubber

[20:30] <jdv79> is that doc'ed somewhere?

[20:30] <FROGGS> I fear not

[20:30] <FROGGS> only mentioned in a blog post

[20:30] <bartolin> jdv79: I also run daily rakudo smoke tests (on FreeBSD), based on [Coke]++'s scripts: https://github.com/usev6/perl6-roast-data

[20:31] <FROGGS> I know I need to add pages to testers.perl6.org that explain that

[20:31] * jdv79 misses the maturity of the p5 world

[20:31] <FROGGS> no time yet though :o(

[20:31] <jdv79> :(

[20:31] <jdv79> much to be done!

[20:31] <jdv79> hopefully not too much

[20:31] <FROGGS> jdv79: yes, and we are just a handful of ppl

[20:31] <jdv79> i can work on this stuff

[20:31] <bartolin> ++jdv79

[20:32] <FROGGS> ++jdv79

[20:32] <FROGGS> gnight #perl6

[20:32] <brrt> any help is highly appreciated :-)

[20:32] *** FROGGS left
[20:32] <bartolin> g'night, FROGGS

[20:33] <lizmat> gnight FROGGS[mobile] 

[20:33] <andreoss> [ptc]: i guess removing them would be even better than hiding them under a spoiler tag 

[20:33] <[ptc]> andreoss: most certainly much easier :-)

[20:33] <[ptc]> andreoss: one could certainly look in the tests for the answers, however they are somewhat "hidden" there and then don't turn up on the website

[20:34] <[ptc]> andreoss: sorry if I spoiled your fun!

[20:34] <brrt> goodnight, all

[20:35] *** brrt left
[20:38] *** kurahaupo1 joined
[20:39] <andreoss> [ptc]: is the site updated automatically or manually?

[20:41] <TimToady> another protip, you don't have to put #?USES on every call to a function; you're supposed to be able to put it onto the function itself, as long as it parses like one of the built-in tests

[20:42] <TimToady> at least, I hacked that into fudge at one point, so maybe it still works

[20:43] <[ptc]> andreoss: automatically.  There's a cron job which checks for new updates every 5 min

[20:44] *** woolfy joined
[20:44] *** woolfy left
[20:45] <andreoss> [ptc]: it's been almost 2 weeks since last updated 

[20:49] <dalek> roast: a4cac76 | usev6++ | S04-phasers/ (2 files):

[20:49] <dalek> roast: Use unique ticket number for similiar test failures

[20:49] <dalek> roast: review: https://github.com/perl6/roast/commit/a4cac76f60

[20:51] <[ptc]> andreoss: hrm, that's good to know

[20:51] *** chansen joined
[20:52] <[Coke]> (rakudo smoking) I need to be fix this so I can run the perl5 integration tests. :P

[20:52] <[Coke]> same issue as being able to run the linenoise repl out of the ./install dir

[20:53] *** kbenson_ left
[20:53] <[ptc]> andreoss: http://examples.perl6.org/build-log/ is a good place to look for errors.  Wish I'd looked earlier...

[20:54] *** atweiden joined
[20:54] *** dolmen joined
[20:54] <dalek> roast: 709e414 | lizmat++ | S (200 files):

[20:54] <dalek> roast: s/dies_ok/dies-ok/g

[20:54] <dalek> roast: review: https://github.com/perl6/roast/commit/709e414201

[20:57] *** kurahaupo1 left
[20:59] <itz_> I bought this thinking it would be more reliable than wikipedia

[20:59] <itz_> http://www.britannica.com/EBchecked/topic/899428/Perl

[21:00] <itz_> Canadian-born programmer and linguist Larry Wall 

[21:00] <itz_> eh

[21:01] *** skids left
[21:02] *** kurahaupo1 joined
[21:03] <[ptc]> andreoss: great work with the lisp interpreter!

[21:03] *** koo6 left
[21:03] <andreoss> x

[21:03] <andreoss> thanks

[21:03] <isBEKaml> [ptc]: what? where's the lisp interpreter?

[21:04] <isBEKaml> :-)

[21:04] <[ptc]> isBEKaml: in the perl6-examples repo, in the categories/interpreters dir :-)

[21:05] <[ptc]> andreoss: it seems that the perl6 on hack.p6.org is too old for the perl6 code in the examples *sigh*

[21:05] *** mephinet- is now known as mephinet

[21:05] *** mephinet left
[21:05] *** mephinet joined
[21:05] <isBEKaml> [ptc]: Ah, it's been a while since I gpull'd anything.. Let me do this now :-)

[21:06] *** raiph joined
[21:06] <[ptc]> andreoss: looks like I'll have to do some testing on hack in order to get things back going again

[21:06] <andreoss> [ptc]: though i guess implementing list interpreter as a slang would be more perl6 way

[21:06] *** mephinet left
[21:06] *** mephinet joined
[21:06] *** raiph left
[21:06] *** raiph joined
[21:07] <dalek> perl6-examples: 34504cc | paultcochrane++ | categories/interpreters/lisp.pl:

[21:07] <dalek> perl6-examples: [interpreters] replace tabs with spaces

[21:07] <dalek> perl6-examples: 

[21:07] <dalek> perl6-examples:  - add vim coda

[21:07] <dalek> perl6-examples:  - remove trailing whitespace

[21:07] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/34504cceae

[21:07] <dalek> perl6-examples: ed9570f | paultcochrane++ | categories/euler/prob0 (3 files):

[21:07] <dalek> perl6-examples: [euler] further whitespace, formatting cleanups

[21:07] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/ed9570f78d

[21:07] <timotimo> [ptc]: don't you just need to update the interpreter?

[21:07] <isBEKaml> andreoss++ # 8 day old lisp interpreter!

[21:08] <timotimo> or downgrade the Pod::To::HTML distro?

[21:09] <isBEKaml> [ptc], andreoss: Not a problem really - just thought I'd let you know that lisp.pl has mixed tabs and spaces. Looks a bit funny in (old) vi

[21:11] <andreoss> isBEKaml: oh, it's probably because i've edited with both vim and emacs (for indenting)

[21:12] <[ptc]> timotimo: do you mean on hack?

[21:12] <timotimo> yos

[21:12] <[ptc]> ähm, I just use the one moritz++ installed there

[21:12] <isBEKaml> andreoss: no worries - hack away on lispy!

[21:12] <[ptc]> my guess is that it'll be updated after Thursday

[21:13] <timotimo> well, rakudobrew is installed there, too :)

[21:13] <lizmat> commute home&

[21:13] <[ptc]> true

[21:13] *** lizmat left
[21:13] <timotimo> i would have petitioned to replace the "class Foobar;" form with braces for the time being

[21:13] <[ptc]> maybe that's something for the morrow

[21:13] <timotimo> because that will work on older and newer versions of rakudo

[21:14] <[ptc]> the discussion with masak and FROGGS ended with a consensus for the blockless form...

[21:14] <[ptc]> at least I haven't updated all of the modules I'd planned to have submitted PRs for by now :-)

[21:14] <timotimo> oh

[21:14] <timotimo> OK

[21:14] <timotimo> BBIAB

[21:15] *** kurahaupo1 left
[21:15] *** chansen left
[21:16] <jdv79> nine: around?

[21:18] *** muraiki left
[21:19] <[ptc]> andreoss: should I not have removed the tabs from lisp.pl?

[21:19] <[ptc]> andreoss: sorry if I've broken anything!

[21:37] <dalek> perl6-examples: 889bd65 | andreoss++ | categories/euler/prob06 (2 files):

[21:37] <dalek> perl6-examples: [euler] pod formating

[21:37] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/889bd65303

[21:37] <RabidGravy> does nqp::watchfile() poll or does it use some inotify thing if it's available

[21:43] <jdv79> .tell nine please see the PR on I::Py

[21:43] <yoleaux> jdv79: I'll pass your message to nine.

[21:44] * flussence would like it if `panda smoke` also accepted --auth= so I could be super-lazy about keeping my own stuff un-bitrotted

[21:44] <timotimo> RabidGravy: it uses whatever libuv offers

[21:48] <[ptc]> hacked, hack.  Now the examples build and deploy again.

[21:48] <[ptc]> unfortunately, it's a hack :-/

[21:49] <RabidGravy> which is what I suspected, but it doesn't tie up with the cpu usage I am seeing, I'm wondering if it is built in such a way as not to use inotify

[21:50] <tony-o_> m: https://gist.github.com/tony-o/ad52076865a21edec940

[21:50] <camelia> rakudo-moar 97b4db: OUTPUT«IO::Socket::INET is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in method new at src/RESTRICTED.setting:32␤  in block <unit> at /tmp/f1aLK_iZoo:5␤  in any <unit-outer> at /tmp/f1aLK_iZoo:1␤␤»

[21:52] *** espadrine joined
[21:54] <RabidGravy> flussence, you could parse the modules list and grab the ones with the appropriate auth

[21:54] *** kaare_ left
[21:55] *** [Sno] left
[21:56] <flussence> oh, didn't notice --verbose there. That'll do fine.

[21:57] <flussence> .oO( next job: actually *finish* a few of these half-baked modules sitting on disk so I can put them up there... )

[22:00] <timotimo> RabidGravy: we currently have something in place that makes the event loop unable to not spin

[22:00] <RabidGravy> right

[22:00] <timotimo> RabidGravy: jnthn is going to solve it. on my local moarvm i have an usleep in the function that spins the most and it makes the cpu usage almost 0

[22:01] *** berekuk left
[22:04] <RabidGravy> with more than one core it isn't a problem

[22:04] <RabidGravy> ;-)

[22:10] *** RabidGravy left
[22:11] *** eli-se left
[22:11] *** vendethiel left
[22:15] *** labster joined
[22:29] *** [Sno] joined
[22:31] *** vendethiel joined
[22:35] *** mohij left
[22:40] *** andreoss left
[22:43] *** skids joined
[22:44] *** raiph left
[22:46] *** zcm joined
[22:46] *** bjz left
[22:51] *** gfldex left
[22:55] <dalek> rakudo/nom: 03bf80f | TimToady++ | src/Perl6/World.nqp:

[22:55] <dalek> rakudo/nom: don't say TTIAR unless next thing looks like term

[22:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03bf80f2a4

[22:59] *** dayangkun joined
[23:03] *** zcm left
[23:07] *** virtualsue left
[23:16] *** vendethiel left
[23:19] *** spider-mario left
[23:19] *** spider-mario joined
[23:20] <TimToady> m: say True ¿¿ 1 ¡¡ 2;

[23:20] <camelia> rakudo-moar 03bf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8Po7V7DShH␤Confused␤at /tmp/8Po7V7DShH:1␤------> 3say True7⏏5 ¿¿ 1 ¡¡ 2;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        state…»

[23:20] <TimToady> m: say True¿;

[23:20] <camelia> rakudo-moar 03bf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/NX9jVCyVye␤Bogus postfix␤at /tmp/NX9jVCyVye:1␤------> 3say True7⏏5¿;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement mo…»

[23:20] <TimToady> those are both better than TTIAR

[23:31] *** Vlavv left
[23:34] <dalek> rakudo/nom: 4ed69d2 | TimToady++ | src/Perl6/Grammar.nqp:

[23:34] <dalek> rakudo/nom: "parameterized" is misleading

[23:34] <dalek> rakudo/nom: 

[23:34] <dalek> rakudo/nom: When the parameters to block are optional and, in fact, not supplied by

[23:34] <dalek> rakudo/nom: the user, it's rather confusing to say you were expecting a "parameterized

[23:34] <dalek> rakudo/nom: block", which sounds as though the parameters are required.

[23:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ed69d224b

[23:38] <TimToady> specifically, in regard to:

[23:38] <TimToady> m: if 1.so? {...}

[23:38] <camelia> rakudo-moar 03bf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0FlafOJJYV␤Missing block␤at /tmp/0FlafOJJYV:1␤------> 3if 1.so7⏏5? {...}␤    expecting any of:␤        infix␤        infix stopper␤        parameterized block␤»

[23:38] <TimToady> "Why does the block need parameters?"

[23:42] *** zcm joined
[23:42] *** zcm left
[23:43] *** Vlavv joined
[23:44] *** zcm joined
[23:44] *** [Sno] left
[23:44] <TimToady> anyway, will now say 'block or pointy block'

[23:45] *** [Sno] joined
[23:47] *** zcm left
[23:49] *** zcm joined
[23:49] *** zcm left
[23:50] *** zcm joined
[23:50] *** zcm left
[23:51] *** zcm joined
[23:51] *** zcm left
[23:52] *** zcm joined
