[00:08] *** nebuchad` is now known as nebuchadnezzar

[00:18] *** Juerd left
[00:18] *** Juerd joined
[00:19] *** laouji joined
[00:21] *** TimToady joined
[00:31] *** TimToady left
[00:31] *** TimToady joined
[00:34] *** mr-foobar left
[00:41] *** dha left
[00:46] *** khw left
[00:49] *** TimToady left
[00:50] *** TEttinger joined
[00:50] *** TimToady joined
[00:54] *** BenGoldberg joined
[00:56] *** Exodist joined
[00:59] *** llfourn joined
[01:01] <tony-o> timotimo: array is .01/s faster for json::faster

[01:02] <tony-o> err, 2.4

[01:03] *** aborazmeh joined
[01:03] *** aborazmeh left
[01:03] *** aborazmeh joined
[01:04] *** llfourn left
[01:05] <tony-o> timotimo: changing Str to str and Int to int made it 5 seconds faster though

[01:20] *** dayangkun joined
[01:33] <flussence> .oO( I get the semantic difference between Int and int, but what's special about the str type? No NFG? )

[01:34] *** zacts|lib joined
[01:35] *** aborazmeh left
[02:00] *** zacts|lib left
[02:04] <dalek> roast/glr: c7bf5f5 | skids++ | S04-statement (4 files):

[02:04] <dalek> roast/glr: GLRify and defatalize tests.  Make new test for one removed GLRism.

[02:04] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/c7bf5f5f99

[02:10] *** dwarring left
[02:18] *** gfldex left
[02:19] *** noganex joined
[02:22] *** noganex_ left
[02:37] *** vendethiel joined
[03:00] *** llfourn joined
[03:02] *** kaare_ joined
[03:05] *** llfourn left
[03:14] *** grondilu left
[03:16] *** grondilu joined
[03:18] <rangerprice> i drink water

[03:21] *** KCL left
[03:26] *** raiph left
[03:40] *** xzenfar joined
[03:45] *** telex left
[03:46] *** telex joined
[03:53] *** vendethiel left
[03:55] <dalek> roast/glr: b59c475 | skids++ | S04-statements/gather.t:

[03:55] <dalek> roast/glr: GLRify tests using an assortment of valid GLR idioms

[03:55] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/b59c4752d2

[03:55] *** BenGoldberg left
[04:02] *** pyrimidi_ joined
[04:02] *** skids left
[04:05] *** pyrimidine left
[04:10] *** khw joined
[04:12] *** AlexDaniel left
[04:30] *** aborazmeh joined
[04:30] *** aborazmeh left
[04:30] *** aborazmeh joined
[04:36] *** L joined
[04:36] *** aborazmeh left
[04:37] *** L is now known as Guest74445

[04:37] *** Guest74445 left
[04:59] *** rangerprice left
[05:13] *** khw left
[05:25] *** freeze left
[05:36] *** ChoHag joined
[05:37] <ChoHag> What does 'Too many positionals passed' to a token in a grammar mean?

[05:51] <dalek> rakudo/nom: df589cd | (David Warring)++ | lib/Test.pm:

[05:51] <dalek> rakudo/nom: new does-ok test assertion

[05:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/df589cd91a

[05:51] <dalek> rakudo/nom: deb7b86 | lizmat++ | lib/Test.pm:

[05:51] <dalek> rakudo/nom: Merge pull request #513 from dwarring/does-ok

[05:52] <dalek> rakudo/nom: 

[05:52] <dalek> rakudo/nom: add does-ok test assertion

[05:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/deb7b86cf0

[05:52] *** lizmat joined
[05:56] *** CIAvash joined
[06:09] *** diana_olhovik joined
[06:23] *** Sgeo left
[06:28] *** colomon joined
[06:30] <dalek> rakudo-star-daily: b424ff6 | coke++ | log/ (8 files):

[06:30] <dalek> rakudo-star-daily: today (automated commit)

[06:30] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/b424ff6c28

[06:32] *** espadrine joined
[06:33] *** rurban joined
[06:34] <lizmat> good *, #perl6!

[06:35] <[Coke]> lizmat: hello from ... somewhere.

[06:35] <lizmat> .oO( not just anywhere :-)

[06:37] * lizmat hasn't backlogged for a few days

[06:37] <tadzik> ChoHag: can you show us the code?

[06:37] <tadzik> that doesn't sound right

[06:38] <moritz> \o

[06:38] <tadzik> hello hello

[06:42] <colomon> o/

[06:42] <colomon> Swiss Perl Workshop tomorrow!

[06:42] <tadzik> it started today as far as I'm concerned :)

[06:43] <[Coke]> I'll be in olten in about 20m.

[06:43] <tadzik> one of the few times a year when I consider waking up at 7 to be worth it :)

[06:43] <[Coke]> It's still tuesday, right?

[06:43] * colomon has to $work in St. Gallen for the rest of the day.

[06:43] <tadzik> it's now wednesday

[06:44] <tadzik> I think

[06:44] <colomon> tadzik: 8 hour flights east mess up your days quite nicely.  

[06:44] <colomon> ;0

[06:44] <colomon> ;)

[06:45] * colomon is still suffering jet lag several days into his trip....

[06:46] <lizmat> colomon: expect to be in Olten in about 12 hours

[06:46] <lizmat> and yes, it's Wednesday, I looked it up

[06:47] <lizmat> (well, it isn't technically for the folks on the US westcoast just yet)

[06:47] *** laben joined
[06:47] <tadzik> zsh: Input/output error: ping

[06:47] <tadzik> goodbye cruel world

[06:48] *** domidumont joined
[06:49] <laben> good $*LOCALTIME.part-of-the-day() perl6'ers

[06:50] *** colomon left
[06:51] *** llfourn joined
[06:53] *** domidumont left
[06:55] *** anaeem1 joined
[06:55] <lizmat> laben o/

[06:57] *** anaeem1 left
[07:01] *** colomon joined
[07:05] *** domidumont joined
[07:06] *** anaeem1_ joined
[07:07] *** anaeem1_ left
[07:10] *** larion left
[07:10] *** domidumont left
[07:11] *** domidumont joined
[07:18] *** cdc_ left
[07:19] *** cdc_ joined
[07:30] *** cognominal joined
[07:31] *** freeze joined
[07:36] <dalek> rakudo/glr: 74e7147 | skids++ | src/core/Parameter.pm:

[07:36] <dalek> rakudo/glr: Make Parameter.perl handle **@ correctly

[07:36] <dalek> rakudo/glr: 

[07:36] <dalek> rakudo/glr: It seems that the flag used for slurpy blocks has been reused in NQP

[07:36] <dalek> rakudo/glr: for **@ slurpies.

[07:36] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/74e7147c7a

[07:36] <dalek> rakudo/glr: 2a52091 | FROGGS++ | src/core/Parameter.pm:

[07:36] <dalek> rakudo/glr: Merge pull request #514 from skids/glr3

[07:36] <dalek> rakudo/glr: 

[07:36] <dalek> rakudo/glr: Make Parameter.perl handle **@ correctly

[07:36] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/2a52091bf7

[07:37] * colomon just realized the reason my $work build wasn’t working was I was running on moar-glr instead of moar-nom

[07:43] *** Ven joined
[07:43] *** RabidGravy joined
[07:43] *** Ven left
[07:44] *** Ven joined
[07:53] *** sunnavy joined
[07:53] *** petercommand joined
[07:54] *** petercommand left
[07:54] *** petercommand joined
[07:54] <timotimo> o/

[07:54] <Ven> \o

[07:55] *** darutoko joined
[07:56] *** petercom1and joined
[08:05] *** CIAvash left
[08:06] *** petercommand left
[08:06] *** petercom1and left
[08:06] *** petercommand joined
[08:06] *** petercommand left
[08:06] *** petercommand joined
[08:06] *** dakkar joined
[08:12] *** abraxxa joined
[08:22] <timotimo> oh wow

[08:23] <timotimo> we'll be expecting 30 degC on pretty much every day of the SPW

[08:23] <timotimo> i hope the venue has AC :)

[08:28] *** larion joined
[08:29] *** laouji left
[08:30] *** laouji joined
[08:34] <nine> I'll be spending the next 7 hours on a train to Olten. I really hope that I will spend some of those on my talk and not all on GLR :)

[08:36] *** CIAvash joined
[08:38] <timotimo> https://www.biostars.org/p/155717/ - a voice from the perl6  community would probably be helpful here

[08:40] *** freeze left
[08:42] *** freeze joined
[08:59] *** oetiker left
[09:00] *** espadrine left
[09:00] <lizmat> packing and commute to Olten&

[09:00] *** lizmat left
[09:03] <nine> timotimo: I added a comment

[09:04] <timotimo> cool

[09:04] <timotimo> i bet you're answering about how great our p5/p6 interop already is? :)

[09:05] <nine> of course I a m :)

[09:05] <nine> That's the whole reason I've been working for a year on this ;)

[09:07] *** oetiker joined
[09:08] *** FROGGS left
[09:11] *** zakharyas joined
[09:12] <[Coke]> very pleasant in olten. though I appear to be the only one in shorts.

[09:13] <Ven> does anyone know if SPW will be livestreamed?

[09:18] *** [Sno] left
[09:20] <[Coke]> Dunno. I'l ask around when I find any other perlers. (2pm local time, probably)

[09:24] *** Ven left
[09:24] *** nebuchad` joined
[09:25] *** espadrine joined
[09:26] *** kaare__ joined
[09:26] *** CIAvash_ joined
[09:27] *** [Sno] joined
[09:27] *** nowan_ joined
[09:28] *** arnsholt_ joined
[09:28] *** CIAvash_ left
[09:28] *** nebuchadnezzar left
[09:28] *** timotimo left
[09:28] *** CIAvash left
[09:28] *** nowan left
[09:28] *** arnsholt left
[09:28] *** timotimo joined
[09:28] *** kaare_ left
[09:31] *** xinming_ joined
[09:32] *** user3 joined
[09:33] *** user3 left
[09:33] <colomon> [Coke]: I was paying attention while I walked around in St. Gallen yesterday.  I walked for an hour, I believe I saw two people in shorts.

[09:34] *** xinming left
[09:34] * colomon also brought shorts.  :)

[09:34] <nine> shorts FTW!

[09:35] *** bin_005 joined
[09:35] *** bin_005 left
[09:39] *** bin_005 joined
[09:41] <dalek> rakudo/glr: 465b18b | (Stefan Seifert)++ | src/core/Seq.pm:

[09:41] <dalek> rakudo/glr: Fix "Seq has already been iterated" sinking a spent Seq

[09:41] <dalek> rakudo/glr: 

[09:41] <dalek> rakudo/glr: The sink-all is only there to actually run lazily executed code when the

[09:41] <dalek> rakudo/glr: results are sunk. If the Seq has already been iterated we don't have to

[09:41] <dalek> rakudo/glr: bother.

[09:41] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/465b18b7bf

[09:41] *** llfourn left
[09:41] <dalek> roast/glr: f35a02d | (Stefan Seifert)++ | integration/99problems-61-to-70.t:

[09:41] <dalek> roast/glr: GLRify 99problems-61-to-70.t

[09:41] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/f35a02d096

[09:41] <nine> Fixes powered by Paradise Lost :)

[09:41] *** rindolf joined
[09:46] *** llfourn joined
[09:52] <dalek> roast/glr: 3d5ee1f | (Stefan Seifert)++ | S16-io/bare-say.t:

[09:52] <dalek> roast/glr: GLRify S16-io/bare-say.t

[09:52] <dalek> roast/glr: 

[09:52] <dalek> roast/glr: Z returns (('a', '1'), ('b', '2'), ('c', '3')). Need to explicitly

[09:52] <dalek> roast/glr: flatten that before passing to the hash constructor.

[09:52] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/3d5ee1f592

[09:58] <dalek> roast/glr: be28de7 | (Stefan Seifert)++ | S32-array/ (2 files):

[09:58] <dalek> roast/glr: .perl no longer has to add the ugly <> for arrays :)

[09:58] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/be28de77e8

[10:01] <nine> Yes, thse two ^^^ were LHF, but I'm pretty much picking failures at random, so I still have a good conscience :)

[10:06] <Ulti> timotimo I replied with a biggish post to that BioStars thing

[10:06] <timotimo> cool

[10:09] <nine> m: my %h = a => 1, b => 2; say %h<a>:delete; say %h.perl;

[10:09] <camelia> rakudo-moar deb7b8: OUTPUT«1␤{:b(2)}<>␤»

[10:09] <GLRelia> rakudo-moar 465b18: OUTPUT«1␤{:b(2)}␤»

[10:09] <nine> m: my %h = a => 1, b => 2; say %h<*>:delete; say %h.perl;

[10:09] <camelia> rakudo-moar deb7b8: OUTPUT«(Any)␤{:a(1), :b(2)}<>␤»

[10:09] <GLRelia> rakudo-moar 465b18: OUTPUT«(Any)␤{:a(1), :b(2)}␤»

[10:18] *** bin_005_u joined
[10:20] *** bin_005 left
[10:21] *** gfldex joined
[10:21] <|Tux|> still no strict on one-liners :(

[10:26] *** arnsholt_ is now known as arnsholt

[10:27] *** llfourn left
[10:35] *** rurban left
[10:35] <|Tux|> niner, the glr branch of panda doesn't build on glr

[10:35] <|Tux|> # Failed test 'Correct data structure for «[{ "a" : 3, "b" : 4 }]»'

[10:35] <|Tux|> # at t/02-structure.t line 65

[10:35] <|Tux|> # expected: $[:a(3), :b(4)]

[10:35] <|Tux|> #      got: $[${:a(3), :b(4)}]

[10:36] <|Tux|> nine

[10:40] *** nowan_ left
[10:41] *** cgfbees joined
[10:41] *** Ven joined
[10:45] *** nebuchad` is now known as nebuchadnezzar

[10:45] <laben> |Tux|: let me check

[10:47] <laben> |Tux|: did you update JSON::Tiny? i think it's that

[10:48] <|Tux|> I updatez everyzing :)

[10:48] *** FROGGS[mobile] joined
[10:48] <|Tux|> rakudowbrew build glr

[10:48] <|Tux|> rakudowbrew build moar glr

[10:48] <|Tux|> rakodobrew switch glr

[10:49] <|Tux|> cd panda

[10:49] <|Tux|> git pull --all

[10:49] <|Tux|> git co glr

[10:49] <|Tux|> perl6 bootstrap.pl

[10:49] * FROGGS[mobile] is sitting at the SXF and is waiting for his delayed flight

[10:50] <|Tux|> that will give you extra time to hack^Wfix things

[10:50] * |Tux| is looking forward seeing most of you in Granada

[10:50] <FROGGS[mobile]> <|Tux|>: if I would turn my laptop on...

[10:50] <laben> |Tux|: is there a way to update the git submodules? it seems it's stuck pulling an old commit of JSON::Tiny

[10:51] <|Tux|> maybe, lemme check

[10:51] *** cgfbees left
[10:51] <hoelzro> o/ from Switzerland

[10:51] <laben> |Tux|: git submodule foreach git pull origin master

[10:51] <FROGGS[mobile]> hoelzro: will see you for dinner!

[10:52] <hoelzro> \o/

[10:52] <FROGGS[mobile]> I'll probably arrive at 6pm

[10:52] <|Tux|> that does not do anything in panda's glr branch

[10:53] <FROGGS[mobile]> and we can also meet jnthn's wife 

[10:53] <laben> sorry, that cmd doesnt seem enough, you need to cd directly inside ext/JSON__Tiny and pull

[10:53] <|Tux|> there is no git in JSON__Tiny

[10:53] * |Tux| checked that

[10:54] <FROGGS[mobile]> these are not submodules anymore afaik

[10:54] <hoelzro> ah, yes

[10:54] <hoelzro> FROGGS[mobile]: are you flying or taking a train?

[10:54] <laben> were they commited entirely? then you need to update the copy manually

[10:55] <FROGGS[mobile]> hoelzro: both, in that order

[10:55] <hoelzro> heh, good point =)

[10:56] <FROGGS[mobile]> flying to Basel and then doing a ~1 hour train ride 

[10:56] <|Tux|> laben, replacing JSON__Tiny with git checkout works!

[10:57] <laben> |Tux|: good, it's good to see the work i did on panda is fine on other machines :)

[10:57] * |Tux| now installs the other required modules

[10:57] <|Tux|> Inline::Perl5 OK

[10:58] <|Tux|> Copying blib/lib/Inline/Perl5.pm6 to /pro/3gl/CPAN/rakudobrew/moar-nom/install/share/perl6/site/lib/Inline/Perl5.pm6

[10:59] <|Tux|> that does not look ok. that should be moar-glr

[10:59] * |Tux| investigates

[11:00] <FROGGS[mobile]> hoelzro: you bought a broadband card?

[11:00] <hoelzro> FROGGS[mobile]: I did not, why do you ask?

[11:00] <FROGGS[mobile]> because you are online

[11:01] <hoelzro> oh, I'm on the hotel WiFi

[11:02] <FROGGS[mobile]> ahh, I see

[11:05] *** nowan joined
[11:05] <pflanze> How could I use a method (dereferenced from an object) as a function? I.e. curried by the object. E.g. I've got some code that allows to $x.foo($y), now I want to hold off passing $y and instead get a function that can take $y,

[11:06] <pflanze> i.e. &f= $x.foo; &f($y)

[11:06] <pflanze> I realize I really have to install Perl6 now.

[11:08] <pflanze> (I'm asking because I've got a function in Perl5 that does this and I'm trying to find a name for it.

[11:08] <pflanze> Currently:  my $f= the_object_method $x, "foo" )

[11:08] <hoelzro> I wonder if you can use .can + .assuming

[11:08] <FROGGS[mobile]> pflanze: there is a find_method meta method

[11:09] <pflanze> FROGGS[mobile], does it do the Perl5 UNIVERSAL::can thing? Since what I'm asking is also retaining (currying on) the object, not just returning a code pointer to the method.

[11:09] *** cgfbee left
[11:09] <FROGGS[mobile]> m: my &foo = Str.^flip; say foo("bar")

[11:09] <camelia> rakudo-moar deb7b8: OUTPUT«Method 'flip' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in block <unit> at /tmp/EK2PC42H0G:1␤␤»

[11:09] <GLRelia> rakudo-moar 465b18: OUTPUT«Method 'flip' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in block <unit> at /tmp/KIZzFqcIF4:1␤␤»

[11:09] <FROGGS[mobile]> err

[11:10] *** cognominal left
[11:10] <pflanze> Looks like it's the "can" thing.

[11:10] <hoelzro> m: my $s = 'foo bar'; my $m = $s.^find_method('split'); $m.assuming($s); say $m(' ')

[11:10] <camelia> rakudo-moar deb7b8: OUTPUT«Cannot call split(Str: ); none of these signatures match:␤    (Cool $: Regex $pat, $limit = { ... }, :$all, *%_)␤    (Cool $: Cool $pat, $limit = { ... }, :$all, *%_)␤    (Str:D $: Regex $pat, $limit = { ... }, :$all, *%_)␤    (Str:D $: Cool $delim…»

[11:10] <GLRelia> rakudo-moar 465b18: OUTPUT«Cannot call split(Str: ); none of these signatures match:␤    (Cool $: Regex $pat, $limit = { ... }, :$all, *%_)␤    (Cool $: Cool $pat, $limit = { ... }, :$all, *%_)␤    (Str:D $: Regex $pat, $limit = { ... }, :$all, *%_)␤    (Str:D $: Cool $delim…»

[11:10] <FROGGS[mobile]> pflanze: I can help you with that this evening... it is too hard on the phone 

[11:10] <hoelzro> m: my $s = 'foo bar'; my $m = $s.^find_method('split'); $m .= assuming($s); say $m(' ')

[11:10] <camelia> rakudo-moar deb7b8: OUTPUT«foo bar␤»

[11:10] <GLRelia> rakudo-moar 465b18: OUTPUT«foo bar␤»

[11:11] <hoelzro> ah, that should do

[11:11] <hoelzro> pflanze: ^

[11:11] <|Tux|> laden, nine, does this help you getting to the next step? https://gist.github.com/Tux/273f894ef62807a6a8c1

[11:11] <FROGGS[mobile]> pflanze: but you might want to search the docs for find_method and assuming

[11:11] <pflanze> Aha, assuming is currying it seems.

[11:11] <FROGGS[mobile]> hoelzro++

[11:12] <pflanze> Still leaves the actual search for a name for the combination of the two features open.

[11:13] *** llfourn joined
[11:13] <pflanze> I'm kind of looking for a   split.assuming($s, ' ')

[11:14] <timotimo> [Tux], laben: there's a script in panda that does the subtree update for you

[11:14] <pflanze> (Perhaps that would even work? [Thinking about where to install Perl6])

[11:14] <|Tux|> timotimo, I can now build (and install) panda in GLR, but it won't install all my required modules

[11:15] *** cgfbee joined
[11:15] <|Tux|> because of File::Temp fail

[11:15] <laben> |Tux|: unfortunately, it is known that File::Temp does not work on GLR for now. i may check it out, but i need to do work first

[11:15] <timotimo> we're making progress, though. which is good.

[11:16] * |Tux| was just trying. I am SO curious if Text::CSV will be faster

[11:16] <|Tux|> progress++

[11:17] <timotimo> i'm very curious, too

[11:17] <timotimo> and even if not, the GLR changes are mostly just "make it work" so far

[11:17] <timotimo> there's lots of possibilities to "make it fast" still on the plan

[11:17] <|Tux|> so maybe you can forgice me trying even it has not yet been announced

[11:17] *** pmurias joined
[11:17] <timotimo> of course i forgive you

[11:17] <|Tux|> forgive

[11:17] <timotimo> i'm glad you're interested in the bleeding edge and pointing out what's the closest blocker to your module

[11:18] <timotimo> even if it's already known; it can still help motivate people :)

[11:18] * |Tux| like to have /some/ results before my talk at YAPC

[11:18] <pmurias> did the format of the state description passed to nfafromstatelist change?

[11:18] <timotimo> how long is it until yapc?

[11:18] <|Tux|> next wednesday

[11:18] <pmurias> timotimo: yapc::eu?

[11:18] <timotimo> oh, that soon!

[11:19] <|Tux|> I'll be in Ganada this monday

[11:19] <DrForr> Not long enough :/ :)

[11:19] <timotimo> pmurias: i remember timtoady did some work on the nfa implementation a few months ago

[11:19] <timotimo> i think it was about propagating some more info between different in-lined regexes or something

[11:19] <timotimo> i'm not sure if it changed anything about the format

[11:19] <timotimo> but there's some debug code in there that can either be uncommented or triggered via an environment variable, if i'm not mistaken

[11:21] <pmurias> timotimo: yes, I'm trying it right now

[11:21] <laben> |Tux|: ooc, how did you fix panda installing in the wrong dir?

[11:22] <|Tux|> putting the real path in front of my $PATH :P

[11:22] <|Tux|> that is not a vital problem at the moment imho

[11:24] *** bin_005_u left
[11:24] <dalek> rakudo/glr: 5dae3e3 | (Stefan Seifert)++ | src/core/hash_slice.pm:

[11:24] <dalek> rakudo/glr: Allow for indexing hashes by Iterables instead of just Positionals

[11:24] <dalek> rakudo/glr: 

[11:24] <dalek> rakudo/glr: Fixes %h{%h.keys} and %h{%h.keys.grep(* gt 'h')} and friends.

[11:24] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/5dae3e3291

[11:25] <dalek> rakudo/glr: c4a122b | (Stefan Seifert)++ | src/core/Exception.pm:

[11:25] <dalek> rakudo/glr: Remove obsolete X::Syntax::ArgFlattener

[11:25] <dalek> rakudo/glr: 

[11:25] <dalek> rakudo/glr: Since commit 0b1722b40ec464a627e345ede103e3b7e5f5efce | is now a generic

[11:25] <dalek> rakudo/glr: flattener instead of only an argument flattener. So no one is gonna

[11:25] <dalek> rakudo/glr: throw an X::Syntax::ArgFlattener exception anymore.

[11:25] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/c4a122b712

[11:25] <dalek> roast/glr: a554c9f | (Stefan Seifert)++ | S32-exceptions/misc.t:

[11:25] <dalek> roast/glr: Remove tests for now obsolete X::Syntax::ArgFlattener

[11:25] <dalek> roast/glr: 

[11:25] <dalek> roast/glr: | is now a generic flattener instead of only an argument flattener.

[11:25] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/a554c9f3aa

[11:25] *** rurban joined
[11:26] *** nowan left
[11:31] <pmurias> TimToady++ # NFA debugging flag

[11:35] <timotimo> now all we need is a nfa -> graphviz tool :P

[11:44] <JimmyZ> nine: how about this one https://github.com/rakudo/rakudo/blob/glr/src/core/metaops.pm#L354 :P

[11:45] <JimmyZ> well, it is two

[11:47] <nine> JimmyZ: you mean changing it to Iterable? Will probably work out just fine. But I'd rather fix the remaining spec test failures first so we can spot regressions more easily.

[11:48] <laben> |Tux|: i think this should be enough to make File::Temp work https://gist.github.com/919dd7d05cb8962eac87

[11:49] <laben> i will make a proper PR later today

[11:49] <nine> File::Temp seems to work fine here?

[11:50] <laben> nine: did you fix it yourself? here and on |Tux| machine it did not work

[11:50] <JimmyZ> nine: there is a comment, but since Parcel is gone ...

[11:50] <nine> laben: I just ran the update-subtree.pl script in panda/glr and did perl6 bootstrap.pl

[11:51] <nine> laben: I nuked my rakudo/install/share/perl6/site dir first. Maybe there was some leftover non-working stuff there?

[11:52] <laben> nine: i always rm site dir before bootstrapping, else it becomes a hello of reinstalling revdeps

[11:52] *** cfloare joined
[11:52] <laben> s/hello/hell/ darn pacifist pc

[11:53] <nine> m: ("ABC".ords xx 2).perl.say; ("ABC".ords xx 2).Str.say;

[11:53] <camelia> rakudo-moar deb7b8: OUTPUT«()␤␤»

[11:53] <GLRelia> rakudo-moar c4a122: OUTPUT«((65, 66, 67).Seq, (65, 66, 67).Seq).Seq␤This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/q1xFUjxuAO:1␤␤»

[11:54] <nine> I don't get it. Why does .perl on the Seq work while .Str fails?

[11:56] <timotimo> could be that .perl copies the seq before iterating over it?

[11:56] <nine> ==> Successfully installed CSV::Parser

[11:57] <|Tux|> CSV::Parser != Text::CSV

[11:59] <nine> |Tux|: Method 'iterator' must be implemented by Iterable because it is required by a role at lib/Text/CSV.pm:288

[12:00] *** Ven left
[12:00] *** notch joined
[12:00] <tadzik> so, who's in Olten already?

[12:00] * hoelzro raises a hand

[12:00] <hoelzro> I was just about to go stop by the venue and say hi

[12:01] <|Tux|> nine, that clas *does* have a method iterator!

[12:01] <|Tux|> class CSV::Row is Iterable does Positional {

[12:01] <|Tux|>     method iterator        { [ @.fields ].iterator; }

[12:01] <|Tux|> or is it missing in glr's Iteratable

[12:01] <tadzik> hoelzro: I just arrived at the hotel, any plans for lunch?

[12:01] <|Tux|> or is it missing in glr's Iterable

[12:02] <hoelzro> tadzik: not yet, wanna stop by the venue and then grab something?

[12:02] <nine> timotimo: Seq.perl does self.map({.perl}).join(', ') while it's .Str does self.list.join

[12:02] <tadzik> hoelzro: sure

[12:02] <nine> |Tux|: Iterable is now an abstract role

[12:02] <tadzik> hoelzro: is there already action at the venue?

[12:04] <nine> |Tux|: changing method iterator to method iterator() seems to help

[12:04] <laben> |Tux|: were you able to install File::Temp with that patch?

[12:04] <hoelzro> tadzik: apparently maettu and others are there?

[12:04] <hoelzro> tadzik: wanna meet down in the lobby?

[12:04] <tadzik> oh, it's very close

[12:04] <tadzik> hoelzro: yeah, be there in a minute

[12:05] <hoelzro> cool

[12:05] <hoelzro> lunch &

[12:05] <nine> |Tux|: and change is Iterable to does Iterable

[12:06] <|Tux|> Iterable is not composable, so CSV::Row cannot compose it

[12:06] <|Tux|> in nom

[12:06] <nine> I suggest you create a glr branch for that

[12:07] <|Tux|> what is the ATA of glr?

[12:08] <nine> We can't say the ATA until it has arrived ;) ETA is probably a week

[12:08] <nine> Of course a Perl 6 hackathon might speed that up ;)

[12:08] * |Tux| too curious not to try

[12:08] <|Tux|> branch created

[12:09] <FROGGS[mobile]> dang, fixing subst is not a LHF

[12:11] <nine> |Tux|: oh my, seems like I could have run the benchmark more than a week ago. All I was missing was the hello.csv

[12:11] <|Tux|> :)

[12:11] <nine> I just thought there's still too much broken, so I didn't look to closely at the messages

[12:12] <|Tux|> I still have no File::Temp

[12:13] *** laouji left
[12:14] <nine> timotimo: correction, List.perl does that. Seq just delegates to .list for both methods.

[12:14] *** xzenfar left
[12:15] <timotimo> sometimes i wish it were easier to figure out what something calls

[12:15] <|Tux|> ==> Testing File::Temp

[12:15] <|Tux|> # Failed test 'file /tmp/0 1 2 3 4 5 6 7 8 9A B C D E F G H I J K L M N O P Q R S T U V W X Y ZA B C D E F G H I J K L M N O P Q R S T U V W X Y Z0 1 2 3 4 5 6 7 8 9__A B C D E F G H I J K L M N O P Q R S T U V W X Y ZA B C D E F G H I J K L M N O P Q R S T U V W X Y Z0 1 2 3 4 5 6 7 8 9_ still exists'

[12:15] <|Tux|> # at t/tempfile.t line 12

[12:15] <|Tux|> # Looks like you failed 1 test of 14

[12:16] <laben> |Tux|: for File::Temp, please try this: (1) git clone File::Temp (2) apply this patch https://gist.github.com/919dd7d05cb8962eac87 (3) panda-build && panda-test && panda-install (4) profit

[12:16] <|Tux|> running panda install . on git checkout

[12:16] <laben> if it doesn't work, please gist the error

[12:17] <|Tux|> ==> Successfully installed File::Temp

[12:19] <nine> |Tux|: how long does csv typically take?

[12:19] *** eiro joined
[12:19] <|Tux|> nine, one sec, timer running

[12:20] <|Tux|> $ make time - typical on my box for is test ± 43, test-t ± 42 with nom

[12:21] <|Tux|> with a hello.csv of 10000 lines

[12:21] <|Tux|> test             50000    44.965    44.885

[12:21] <|Tux|> test-t           50000    43.975    43.895

[12:21] <|Tux|> with glr

[12:21] <|Tux|> :(

[12:21] <nine> So pretty much no difference?

[12:21] <|Tux|> correct

[12:21] <FROGGS[mobile]> there was no optimization work yet

[12:21] <nine> Took some 441 seconds here for a million lines

[12:21] <|Tux|> I do not have the patience for that long run

[12:22] <nine> for lines() { } seems to be a bit faster than for lines() :eager { } now btw.

[12:22] <nine> Which I see as a very good sign

[12:23] <|Tux|> panda Inline::Perl5 still fails on GLR

[12:23] <|Tux|> laden, I think it still used the wrong panda with that inlall path problem

[12:25] *** notch left
[12:25] <nine> |Tux|: you need to install Inline::Perl5's glr branch

[12:26] <|Tux|> ok

[12:32] <laben> |Tux|: when you use panda-build, panda-test and panda-install, you will need to apply the same fix that you apply to "normal" panda

[12:33] * |Tux| doing java for $work now with a higher prio than fun with perl6 :(

[12:34] *** Ven joined
[12:35] <nine> |Tux|: after hacking for three hours on a shaky train my stomach starts taking out the fun, too. :(

[12:35] <jdv79> [Coke]: i just arrived but may take a nap.

[12:37] <laben> |Tux|: if you prefer "panda install ." you can use it, the important thing to do was a local patched checkout

[12:44] *** llfourn left
[12:44] *** yqt joined
[12:48] *** FROGGS[mobile] left
[12:48] *** dayangkun left
[12:49] <maettu> already spotted the first Perl 6 hackers in Olten :-)

[12:49] <jdv79> where?

[12:50] <maettu> just outside the venue

[12:50] <maettu> ..of the Perl 6 hackathon starting tomorrow

[12:50] <jdv79> and this dinner thing tonight is at this venue place?

[12:51] <nine> What does thunk/thunked mean in infix:<xx>(Mu \x, Int() $n, :$thunked!)? The dictionary meaning makes no sense in this context.

[12:51] <maettu> jdv79: yes dinner thing at the venue

[12:51] *** telex left
[12:51] <moritz> nine: it means that the LHS has been stored as a piece of code, not its value

[12:51] <moritz> nine: so that rand xx 5 gives you five different random numbers

[12:52] <nine> moritz: why do we do that?

[12:52] <nine> oh

[12:52] * maettu is just wondering how many are coming to the dinner.. 

[12:52] <moritz> and [1, 2, 3] xx 3 doesn't share the same array ref thrice

[12:52] *** telex joined
[12:52] <moritz> and a "thunk" is an implicitly created code object without its own scope

[12:52] <maettu> ..to have enough food&drinks

[12:52] <nine> So that's the reason why ('ABC'.map(*.ord) xx 2).perl does not die horribly.

[12:53] <moritz> default values are typically also stored as thunks, for example  has $.x = self.foo * 2

[12:53] <nine> The resulting list does contain two distinct Seq objects.

[12:53] <moritz> the RHS

[12:53] <moritz> nine: aye

[12:54] <nine> Leaving only the mystery of why 'ABC'.map(*.ord).Str works as expected while ('ABC'.map(*.ord) xx 2).Str somehow tries to iterate over the same Seq twice

[12:55] <moritz> m: say ('ABC'.map(*.ord) xx 2).join

[12:55] <camelia> rakudo-moar deb7b8: OUTPUT«␤»

[12:55] <GLRelia> rakudo-moar c4a122: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/qg9kZoVBtf:1␤␤»

[12:55] <moritz> m: say ('ABC'.map(*.ord) xx 1).join

[12:55] <camelia> rakudo-moar deb7b8: OUTPUT«␤»

[12:55] <GLRelia> rakudo-moar c4a122: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/OnNemAkq81:1␤␤»

[12:55] <moritz> nine: golf'ed a bit further :-)

[12:56] <moritz> m: say ('ABC'.map(*.ord), ).join

[12:56] <camelia> rakudo-moar deb7b8: OUTPUT«65␤»

[12:56] <GLRelia> rakudo-moar c4a122: OUTPUT«65␤»

[12:56] <nine> m: say ('ABC'.ords xx 1).join

[12:56] <camelia> rakudo-moar deb7b8: OUTPUT«␤»

[12:56] <GLRelia> rakudo-moar c4a122: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/0mUwr_v6_x:1␤␤»

[12:56] <moritz> m: say (Seq.new('ABC'.map(*.ord), ).join

[12:56] <camelia> rakudo-moar deb7b8: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XDlwebn2Sz␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/XDlwebn2Sz:1␤------> 3say (Seq.new('ABC'.map(*.ord), ).join7⏏5<EOL>␤    expecting any of:␤    …»

[12:56] <GLRelia> rakudo-moar c4a122: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PFrDGZhJrP␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/PFrDGZhJrP:1␤------> 3say (Seq.new('ABC'.map(*.ord), ).join7⏏5<EOL>␤    expecting any of:␤    …»

[12:56] <nine> m: say 'ABC'.ords.join

[12:56] <camelia> rakudo-moar deb7b8: OUTPUT«656667␤»

[12:56] <GLRelia> rakudo-moar c4a122: OUTPUT«656667␤»

[12:56] <moritz> m: say (Seq.new('ABC'.map(*.ord), )).join

[12:56] <camelia> rakudo-moar deb7b8: OUTPUT«5===SORRY!5=== Error while compiling /tmp/5lCGhChGMo␤Undeclared name:␤    Seq used at line 1. Did you mean 'Set'?␤␤»

[12:56] <GLRelia> rakudo-moar c4a122: OUTPUT«Type check failed in binding $iter; expected 'Iterator' but got 'Seq'␤  in block <unit> at /tmp/JfoHr8Qnxe:1␤␤»

[12:58] *** xfix joined
[12:59] <moritz> m: say <a b c>.sort.join

[12:59] <camelia> rakudo-moar deb7b8: OUTPUT«abc␤»

[12:59] <GLRelia> rakudo-moar c4a122: OUTPUT«abc␤»

[12:59] <moritz> m: say (<a b c>.sort xx 1).join

[12:59] <camelia> rakudo-moar deb7b8: OUTPUT«a b c␤»

[12:59] <GLRelia> rakudo-moar c4a122: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/FAxh1KaeP1:1␤␤»

[12:59] <moritz> m: say (<a b c>.sort xx 1).^name

[12:59] <camelia> rakudo-moar deb7b8: OUTPUT«List␤»

[12:59] <GLRelia> rakudo-moar c4a122: OUTPUT«Seq␤»

[12:59] <moritz> .join on a Seq of Seqs, right?

[12:59] <yoleaux> moritz: Sorry, this command is admin-only.

[13:00] <moritz> m: say (<a b c> xx 1).join

[13:00] <camelia> rakudo-moar deb7b8: OUTPUT«a b c␤»

[13:00] <GLRelia> rakudo-moar c4a122: OUTPUT«a b c␤»

[13:00] <moritz> m: .say for (<a b c>.Seq xx 1)

[13:00] <camelia> rakudo-moar deb7b8: OUTPUT«Method 'Seq' not found for invocant of class 'Parcel'␤  in block <unit> at /tmp/aJU9xJ9twq:1␤␤»

[13:00] <GLRelia> rakudo-moar c4a122: OUTPUT«a b c␤»

[13:00] <moritz> m: .say for (<a b c>.sort xx 1)

[13:00] <camelia> rakudo-moar deb7b8: OUTPUT«a b c␤»

[13:00] <GLRelia> rakudo-moar c4a122: OUTPUT«a b c␤»

[13:01] *** llfourn joined
[13:08] * moritz takes a shot at squish

[13:11] <timotimo> http://patrick.georgi-clan.de/2014/03/07/random-hack-calculations-in-gnu-make/ %)

[13:13] <dalek> roast/glr: acb9760 | moritz++ | S32-list/squish.t:

[13:13] <dalek> roast/glr: GLR-ify squish.t

[13:13] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/acb9760220

[13:13] *** rmgk left
[13:13] *** rmgk_ joined
[13:14] *** rmgk_ is now known as rmgk

[13:14] <dalek> rakudo/glr: 0bfeaff | moritz++ | src/core/Any-iterable-methods.pm:

[13:14] <dalek> rakudo/glr: .squish on a lazy iterable returns something lazy

[13:14] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/0bfeaff8ae

[13:14] <nine> moritz: yes, .join on a Seq of Seq somehow ends up iterating a Seq twice

[13:15] <moritz> m: (<a b c>.sort xx 1).list.join('')

[13:15] <camelia> rakudo-moar deb7b8: ( no output )

[13:15] <GLRelia> rakudo-moar c4a122: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/c2NeT7uNEV:1␤␤»

[13:15] *** pullphinger joined
[13:15] *** pullphinger left
[13:15] *** pullphinger joined
[13:16] *** pullphinger left
[13:16] *** pullphinger joined
[13:17] *** pullphinger left
[13:17] <moritz> m: say <a b c>.sort.Str

[13:17] <camelia> rakudo-moar deb7b8: OUTPUT«a b c␤»

[13:17] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«a b c␤»

[13:18] *** pullphinger joined
[13:18] <|Tux|> In GLR I get "Use of uninitialized value @args of type Str in string context  in block  at ..." on this code line: «defined $f and $cf.add($f.Str);»

[13:19] * |Tux| does not understand

[13:19] <moritz> |Tux|: might be a warning from within the setting

[13:19] <|Tux|> FWIW $cf is the result of a Class.new on the line before and it is not null

[13:20] <|Tux|>     method add (Str $chunk) {

[13:20] <|Tux|>         $!text ~= $chunk;

[13:20] <|Tux|>         self;

[13:20] <|Tux|>         }

[13:20] <|Tux|> not really rocket science

[13:22] <|Tux|> adding «defined $!text or $!text = "";» as first line there does not change the behavior

[13:24] <nine> m: say [1, 2].map({"ABC".ords}).Str;

[13:24] <camelia> rakudo-moar deb7b8: OUTPUT«65 66 67 65 66 67␤»

[13:24] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/uNbOydKePv:1␤␤»

[13:24] <laben> |Tux|: what code is that? can you link it?

[13:26] * timotimo booked a roaming data package for .ch

[13:26] <timotimo> 100 mb for 5 eruos :\

[13:29] <Ven> timotimo: uh, that's even worse than me...

[13:29] * colomon is just happy his cell phone gets voice in .ch — pretty sure his former phone did not last time he was here.

[13:30] <timotimo> oh no, ven, you're the worst <3

[13:31] <moritz> heh, when my wife wanted data roaming in Norway, she had to buy an add-on contract which runs until the end of her main contract

[13:31] <|Tux|> laben, modules.perl6.org Text::CSV

[13:33] * colomon has never had affordable data roaming in a foreign country, even with the “reasonable” package for Canada.

[13:34] <Ven> timotimo: ha! I forgot about that one ;-)

[13:34] <nine> moritz: .join seems to be called even before it get's to the .Str

[13:34] *** rurban left
[13:34] <moritz> colomon: when staying for more than just a few days, it often pays off to buy a local SIM card

[13:37] *** nowan joined
[13:41] *** skids joined
[13:45] *** domidumont left
[13:47] <laben> |Tux|: is it during the tests? sorry to ask like this but i'm a bit swamped with work

[13:47] <timotimo> soon i'll be picked up by a car full of lovely perlers :)

[13:48] *** Sgeo joined
[13:49] <maettu> timotimo: yey!

[13:50] <nine> Ok, closing in on the border to Switzerland. Will probably be out of contact soon.

[13:51] <|Tux|> laben, yes: t/21_combine

[13:55] <|Tux|> laben, CLI fail: p6 -MText::CSV -e'my@args=(1, "foo", "a b", Str, 3, "");Text::CSV.new(:quote-empty).combine(\(@args));'

[13:55] <|Tux|> Capture related?

[13:55] <skids> m: my &a = Str.^find_method("split"); &a.signature.say; my &b = &a.assuming("OHAI"); b("H").say; my &c = &a.assuming(*,"/"); c("f/h").say # pflanze

[13:55] <camelia> rakudo-moar deb7b8: OUTPUT«(Cool $: |)␤O AI␤f h␤»

[13:55] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«(Cool $: |)␤O AI␤f h␤»

[13:56] *** domidumont joined
[13:56] *** Ven left
[13:57] <|Tux|>         for flat @f -> $f {

[13:57] <|Tux|>  => PASS 21

[13:58] <|Tux|> I think I need to scatter a few flat's 

[14:02] *** nowan left
[14:02] <masak> hello #perl6 from .ch

[14:02] <tadzik> masak! \o/

[14:04] <hoelzro> o/ masak

[14:07] <skids> timotimo: (backlogging) https://www.abrij.org/~bri/perl6_big_nfa.svg is a biomesh of the big perl6 NFA.  A graphvis would be pretty darn huge.

[14:08] <skids> *biofabric

[14:08] <masak> I confess to not knowing what a 'biofabric' is. where can I find out?

[14:09] <skids> biofabric.org

[14:10] <masak> that page doesn't resolve for me :/

[14:10] <masak> oh, http://www.biofabric.org/

[14:11] * maettu wonders: is there live-tracking on Perl 6 hackers travelling to .ch? ;-)

[14:11] <masak> oh, that's clever

[14:11] <skids> Though I didn't fully implement the sorting algorithm, and the code I used to make that was pretty ugly.

[14:11] <masak> maettu: hi! I'm in your country!

[14:13] <masak> discovery #1: I am going to have to buy a converter.

[14:13] <masak> these wall sockets look like they could fit a Europlug, but they don't

[14:13] *** zakharyas left
[14:13] <jdv79> my hotel let me borrow one

[14:14] <jdv79> so i have a us plug into a euro one into this swiss thing

[14:14] <jdv79> its kinda precarious but it works 

[14:14] <masak> I guess I should start by asking reception.

[14:14] <masak> at the very least, they'll know where to buy one.

[14:14] * [Coke] wakes up. Whoops.

[14:15] <masak> [Coke]! \o/

[14:15] <tadzik> my phone charger with euro plug worked

[14:15] <masak> I'm re-reading http://pmthium.com/2014/10/apw2014/ -- it's interesting from a historical perspective how Perl 6 has been slowly trekking between optima re things like flattening.

[14:16] <masak> tadzik: verifying. yes.

[14:16] <masak> so it's only the shape of the plug that's off.

[14:16] <tadzik> because it's small :)

[14:17] <[Coke]> oh, hey, apparently my company's international data plan isn't -that- international. whoops.

[14:17] <masak> [Coke]: "oh, you meant *outside* the States. ...no." :P

[14:18] * masak .oO( "Switzerland? that's in Africa, right?" )

[14:19] <maettu> masak: welcome to my country! :-)

[14:20] <tadzik> nine: laben ping

[14:21] <masak> is a laben ping like an ordinary ping, but you're striking laben against a metal bell?

[14:22] * [Coke] thanks at&t for at least telling him how many hundreds of dollars he'd racked up within a few hours. :)

[14:22] * laben just got through a big chunk of work at $daily-job

[14:23] <masak> m: my @a = 1, 2, 3; my @b = 4, 5; for @a, @b { .say }

[14:23] <camelia> rakudo-moar deb7b8: OUTPUT«1␤2␤3␤4␤5␤»

[14:23] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«1 2 3␤4 5␤»

[14:23] <laben> what is it?

[14:23] <[Coke]> anyone at the venue?

[14:23] <masak> "`for @a,@b { ... }` flattens `@a,@b`" according to http://pmthium.com/2014/10/apw2014/ -- guess that changed since?

[14:23] <laben> |Tux|: i'm a bit free now, how did you fix Text::CSV to build?

[14:23] <masak> [Coke]: I'm in the hotel, does that count?

[14:25] *** Ven joined
[14:26] *** Ven left
[14:26] <|Tux|> I only fixed 21 by changing for @f -> $f to for flat @f -> $f

[14:27] <|Tux|> but e.g. t/50 is baffling me

[14:27] <laben> |Tux|: i mean the "method iterator must be implemented", what did you do?

[14:27] <|Tux|> is => does

[14:27] <|Tux|> twice

[14:28] <|Tux|> ETOOMANYOPENWINDOWS

[14:30] <maettu> [Coke] /me @venue (kitchen)

[14:30] <laben> |Tux|: you mean, CSV::Row and CSV::Diag, right? with those fixed it builds

[14:32] <hoelzro> [Coke]: tadzik and I are also here

[14:32] <masak> oh, people are hanging out at the venue already?

[14:32] <laben> |Tux|: oh my, a ton of test failing :/

[14:32] <tadzik> https://github.com/tadzik/Bailador/issues/28 -- interesting point re the ecocystem

[14:32] <tadzik> masak: yep

[14:32] <tadzik> come join the fun

[14:33] <tadzik> while there's still water >:)

[14:33] <masak> ok, coming &

[14:33] <timotimo> i car!

[14:34] *** yqt left
[14:35] *** laouji joined
[14:35] <tadzik> :o

[14:38] <|Tux|> laben, I added flat in «multi method string (CSV::Field:D @fld) returns Str {» to fix 21

[14:39] <|Tux|> have a sec, I'll push

[14:40] *** xfix left
[14:41] <timotimo> the big one? yikes

[14:41] <|Tux|> flat in «multi method combine (@f) returns Bool { » fixed 21

[14:41] <|Tux|> now pushed

[14:41] *** muraiki joined
[14:42] <[Coke]> masak - you still here? I can meet in the lobby in 5m or so.

[14:42] <|Tux|> perl6 -I. -Ilib t/21_combine.t => PASS

[14:43] <laben> |Tux|: you did not push the is->does change

[14:43] <|Tux|> checkout the glr branch

[14:46] *** khw joined
[14:48] *** dha joined
[14:51] *** colomon left
[14:55] <moritz> down to 95 test file failures

[14:58] <muraiki> when I have two greps on a single supply that each have a .act which simply does say, if only one of the greps matches I get the output of that matching grep twice

[14:58] <muraiki> each additional grep I add results in an additional line of the same output

[14:58] <muraiki> am I doing something wrong? sample code: https://gist.github.com/muraiki/f0b2b0c2a9e2aa370970

[14:59] <moritz> muraiki: looks like a rakudobug to me

[14:59] <moritz> muraiki: would be nice if you could try if it also happens with a normal supply (not from IO::Notifications)

[15:00] <muraiki> moritz: I'll get it a try

[15:00] *** larion left
[15:01] *** colomon joined
[15:01] <moritz> m: say Empty.defined

[15:01] <camelia> rakudo-moar deb7b8: OUTPUT«False␤»

[15:01] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«True␤»

[15:02] <ChoHag> ...

[15:04] <muraiki> moritz: couldn't reproduce it with a normal supply

[15:05] <dha> Eep. Is defined changing with the GLR?

[15:05] * masak rezzes at venue

[15:06] <moritz> dha: no, Empty is just not a type anymore

[15:06] <masak> m: say Empty

[15:06] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«␤»

[15:06] <camelia> rakudo-moar deb7b8: OUTPUT«Empty␤»

[15:06] <muraiki> also, if I click the "List of all new and open tickets" at http://rakudo.org/tickets/ I get a page that says "Possible cross-site request forgery..."

[15:07] <dha> oh. ok.

[15:07] <masak> moritz: it's not a type, but it's defined as a stopgap?

[15:07] <tony-o> timotimo: how do you want to merge the two json::fast[er]? should i submit a PR ?

[15:07] <moritz> masak: yes

[15:08] <dalek> roast/glr: 44d375f | moritz++ | S02-types/undefined-types.t:

[15:08] <dalek> roast/glr: untest that Empty should be undefined

[15:08] <dalek> roast/glr: 

[15:08] <dalek> roast/glr: S07-glr-draft.pod calls it "temporary" anyway

[15:08] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/44d375f351

[15:09] <timotimo> that would be nice

[15:10] <tony-o> okay, i'm going to gut `fast` of all the to-json stuff

[15:10] <tony-o> i'll submit it later when i'm not doing paying work :-p

[15:11] <dha> Empty and stopgap do not seem to be documented, fwiw.

[15:11] <dalek> roast/glr: 43b86f4 | moritz++ | S03-operators/context.t:

[15:11] <dalek> roast/glr: Remove outdated test

[15:11] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/43b86f436a

[15:11] <dha> As I'm not sure what a "stopgap" is in this context, I'm not sure how important that is.

[15:11] <timotimo> the join not being faster than string concatenation is a good sign that our ropes are doing their job right

[15:12] <tony-o> timotimo: the join was slightly faster than using Str concats

[15:12] <tony-o> the join was much slower than doing `str` concats, though

[15:12] <tony-o> not sure which or what the 'ropes' would affect

[15:14] <dalek> perl6-roast-data: 19c16ae | coke++ | / (10 files):

[15:14] <dalek> perl6-roast-data: today (automated commit)

[15:14] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/19c16aeffa

[15:15] <dalek> roast/glr: 6f8b7a3 | moritz++ | S03-operators/context-forcers.t:

[15:15] <dalek> roast/glr: One "flat" gains us four more tests

[15:15] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/6f8b7a3035

[15:17] <[Coke]> https://github.com/coke/cjbot/blob/master/bin/cj.pl for tadzik 

[15:17] <dalek> roast/glr: e9f0300 | moritz++ | S03-sequence/arity0.t:

[15:17] <dalek> roast/glr: Replace .munch(N) with [^N]

[15:17] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/e9f03008f3

[15:18] *** diana_olhovik left
[15:19] *** rurban joined
[15:19] <timotimo> where will the dinner tonight happen?

[15:19] <tadzik> read https://twitter.com/internetofshit to feel like at the SPW hackathon :)

[15:19] <masak> m: my @a = flat 1..10; say @a.munch(3); say @a[^3]

[15:19] <camelia> rakudo-moar deb7b8: OUTPUT«1 2 3 4 5 6 7 8 9 10␤␤»

[15:19] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«␤The 'munch' method was an internal method used by rakudo before the Great␤List Refactor.  The fact that you are seeing this message, means that you␤have code that was using that unsupported rakudo internal API.␤␤Please refactor this code using t…»

[15:20] <masak> sorry, GLRelia :)

[15:20] <tony-o> tadzik: lol

[15:21] <tadzik> woow, that error message

[15:21] <muraiki> nice

[15:22] <masak> m: try [].munch(3)

[15:22] <camelia> rakudo-moar deb7b8: ( no output )

[15:22] <GLRelia> rakudo-moar 0bfeaf: ( no output )

[15:22] <masak> m: try [].munch(3); say $!.index("Please")

[15:22] <camelia> rakudo-moar deb7b8: OUTPUT«Method 'index' not found for invocant of class 'Any'␤  in block <unit> at /tmp/P15PaBbP5T:1␤␤»

[15:22] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«Method 'index' not found for invocant of class 'X::AdHoc'␤  in block <unit> at /tmp/4ACjbiwueh:1␤␤»

[15:22] <masak> m: try [].munch(3); say $!.Str.index("Please")

[15:22] <camelia> rakudo-moar deb7b8: OUTPUT«Use of uninitialized value $! of type Any in string context  in block <unit> at /tmp/AJtUpG78Yy:1␤Nil␤»

[15:22] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«213␤»

[15:23] <masak> m: try [].munch(3); say $!.Str.substr(213) if $!

[15:23] <camelia> rakudo-moar deb7b8: ( no output )

[15:23] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«Please refactor this code using the new Iterator / Seq interface.␤␤»

[15:23] <masak> :)

[15:24] <dalek> roast/glr: dca7f19 | moritz++ | S03-sequence/nonnumeric.t:

[15:24] <dalek> roast/glr: Remove the last usage of .munch

[15:24] <dalek> roast/glr: 

[15:24] <dalek> roast/glr: .oO( not munch more to do after this )

[15:24] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/dca7f19d02

[15:25] <moritz> m: say 'ZZ'.pred

[15:25] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«ZY␤»

[15:25] <camelia> rakudo-moar deb7b8: OUTPUT«ZY␤»

[15:25] <moritz> m: say 'AA'.pred

[15:25] <camelia> rakudo-moar deb7b8: OUTPUT«Decrement out of range␤  in block <unit> at /tmp/VripPo0sj8:1␤␤Actually thrown at:␤  in block <unit> at /tmp/VripPo0sj8:1␤␤»

[15:25] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«Decrement out of range␤  in block <unit> at /tmp/0IUJZLA9mH:1␤␤Actually thrown at:␤  in block <unit> at /tmp/0IUJZLA9mH:1␤␤»

[15:26] <moritz> m: for 1..4 { FIRST say 42 }

[15:26] <camelia> rakudo-moar deb7b8: OUTPUT«42␤»

[15:26] <GLRelia> rakudo-moar 0bfeaf: ( no output )

[15:27] <moritz> m: for 1..4 { NEXT say 42 }

[15:27] <camelia> rakudo-moar deb7b8: OUTPUT«42␤42␤42␤42␤»

[15:27] <GLRelia> rakudo-moar 0bfeaf: ( no output )

[15:28] * masak .oO( in GLR, phasers have been greatly simplified ) :P

[15:29] * masak 's role in the GLR work: court jester

[15:30] <dha> Have they been set to stun?

[15:30] <[Coke]> heh.

[15:30] <[Coke]> |Tux|: what is the great deficiency in the $this check you were mentioning?

[15:30] <[Coke]> ... oh.

[15:30] <|Tux|> that -e does not have strict enabled

[15:31] * [Coke] 's deficiency is lack of coffee. BRB

[15:31] <|Tux|> :)

[15:31] *** zakharyas joined
[15:31] *** domidumont left
[15:34] * |Tux| has to go commute as very stormy weather is approaching and I want to be home before it queues up all traffic

[15:34] <|Tux|> see y'all later

[15:37] <masak> happy decommuting!

[15:42] <[Coke]> m: my $var := lazy { 42 };

[15:42] <camelia> rakudo-moar deb7b8: ( no output )

[15:42] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«Method 'lazy' not found for invocant of class 'Int'␤  in block <unit> at /tmp/vVt2WAL4ko:1␤␤»

[15:44] <masak> pmichaud: http://pmthium.com/2014/10/apw2014/ -- there's an `until not` in a code snipped which I think should be a `while not`.

[15:45] <masak> m: LoopIter

[15:45] <camelia> rakudo-moar deb7b8: OUTPUT«5===SORRY!5=== Error while compiling /tmp/cjD0BxxfzD␤Undeclared name:␤    LoopIter used at line 1␤␤»

[15:45] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rwAJj9ngZA␤Undeclared name:␤    LoopIter used at line 1␤␤»

[15:45] *** laouji left
[15:45] <masak> ok, that type doesn't exist (yet?)

[15:45] <masak> or would it be internals-only, visible only at the compiler/nqp level?

[15:47] <dalek> perl6-roast-data: d7043c4 | coke++ | / (2 files):

[15:47] <dalek> perl6-roast-data: another glr run for today

[15:47] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d7043c47e7

[15:47] *** aindilis joined
[15:48] * masak .oO( in Perl 6, `wantarray` has been renamed to (the much more appropriate term) `want`, and removed ) :P

[15:50] *** Ven joined
[15:52] *** domidumont joined
[15:53] <tadzik> DO WANT

[15:53] <tadzik> std: do want

[15:53] *** GLRelia left
[15:53] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Undeclared routine:␤     'want' used at line 1␤Check failed␤FAILED 00:00 135m␤»

[15:53] <tadzik> booo

[15:53] <tadzik> lies

[15:54] * masak .oO( `want` is wanting )

[15:54] *** GLRelia joined
[15:54] <GLRelia> std : OUTPUT«Can't chdir to '/home/steve/std/snap': No such file or directory at lib/EvalbotExecuter.pm line 171.␤      EvalbotExecuter::_auto_execute(HASH(0x253d638), "do want", GLOB(0x2851cd8), "/tmp/aF4oO6nTCu", "std") called at lib/EvalbotExecuter.pm line 119␤        EvalbotExecuter::_f…»

[15:55] <japhb> o/ from a traffic jam

[15:55] <japhb> .oO( Commute time freeway interchange is worst freeway interchange )

[15:56] <masak> \o japhb

[15:57] <masak> take the extra time to release a module! :D

[15:57] <masak> it'll be the first module written and released from a traffic jam :P

[15:59] *** domidumont left
[15:59] <timotimo> dinner will be at the venue

[15:59] <tadzik> does anyone have an http proxy I could use for testing?

[15:59] <timotimo> are you on the way to spw, too, japhb?

[15:59] <tadzik> or knows how can I install one easily?

[15:59] *** domidumont joined
[15:59] <timotimo> privoxy is simple to install i recall

[16:00] <Ven> http://irclog.perlgeek.de/perl6/2015-08-26#i_11118348 masak: we decided a.b() wouldn't be different from b(a), and we decided not to have a "map" and "for" methods

[16:00] *** lea joined
[16:00] <tadzik> looks easy enough, thanks

[16:01] <japhb> masak: An interesting idea, if it weren't for the fact that the traffic jam is also in an almost-dead-zone for cell traffic (and thus bus wifi)  :-/

[16:01] <japhb> timotimo: I was unable to make it this time due to $day-job

[16:01] * japhb wishes he was there

[16:01] <tadzik> I once used such circumstances to fix some "panda not working offline" bugs :)

[16:01] <japhb> tadzik: *chuckle*

[16:05] <masak> tadzik++ # bugfixes from adversity

[16:05] *** lea left
[16:05] *** lea joined
[16:08] *** perigrin joined
[16:14] *** lea left
[16:14] *** lea joined
[16:15] <japhb> Is there going to be a release of nom this month?  ISTR people were trying to see if we could do glr instead, but if my rough scan of the backlog is any indication, there's still too much breakage to do that before EOM.

[16:16] *** perigrin left
[16:17] <tony-o> timotimo: does 04-roundtrip test in JSON::Fast work for you?

[16:20] <masak> japhb: as just another spectator, I second that sense/guess.

[16:20] <moritz> I'm absolutely sure there won't be a GLR release this month.

[16:21] <moritz> 95 failing spectest files down in 5 days, plus who knows how much ecosytem fallout? no way.

[16:22] <PerlJam> btw, I volunteered to do the release this month, but after waiting to see if we can get the GLR merged prior to release, I no longer have much time until the weekend.

[16:23] <PerlJam> Also, I just happened to look at my IRC window just in time to see japhb's question.  I probably won't be around much today.

[16:24] <masak> someone wants to task-steal PerlJam's release tomorrow?

[16:25] <moritz> maybe I can do it tonight or tomorrow

[16:26] <Ven> does someone know if SPW will have a livestream?

[16:26] <dalek> perl6-roast-data: ca8c546 | coke++ | / (2 files):

[16:26] <dalek> perl6-roast-data: another glr run for today

[16:26] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ca8c546ff3

[16:27] <masak> Ven: I... don't think so.

[16:27] <maettu> SPW will not have any stream at all

[16:28] <Ven> okay! no recording either then. thanks :)

[16:32] <dalek> rakudo/nom: a7c845c | coke++ | src/core/Main.pm:

[16:32] <dalek> rakudo/nom: RT #115744 - "--" should stop MAIN arg processing

[16:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7c845cc00

[16:32] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=115744

[16:32] <dalek> roast: 15a2728 | coke++ | S06-other/main-usage.t:

[16:32] <dalek> roast: rakudo unfudge

[16:32] <dalek> roast: review: https://github.com/perl6/roast/commit/15a2728e9f

[16:33] *** Ven left
[16:34] <masak> what happens in Olten stays in Olten :P

[16:35] <japhb> Is bandwidth cheap/plentiful at the SPW venue?  We could do a Hangout or similar using a spare laptop ... it's not clear to me how many participants are able to join the public version, but I'd guess maybe a dozen?

[16:36] <masak> we're currently experiencing some wifi problems, ironically enough

[16:36] <japhb> That might satisfy the needs of channel regulars who couldn't be there, at least.

[16:36] <japhb> Ah, shucks.

[16:37] *** FROGGS joined
[16:37] <FROGGS> \o/

[16:37] <FROGGS> I made it!

[16:38] <FROGGS> hoelzro / tadzik: where are you?

[16:38] <hoelzro> FROGGS: welcome! we're at the venue with [Coke] and masak 

[16:38] <tadzik> FROGGS: venue

[16:39] *** dha left
[16:39] *** virtualsue joined
[16:39] <masak> FROGGS: you should come over!

[16:40] <FROGGS> masak: first I need a shower :o)

[16:40] <hoelzro> you'll be just in time for dinner =)

[16:40] <virtualsue> \o/

[16:41] <tadzik> virtualsue! \o/

[16:42] <masak> \o/

[16:48] <tony-o> timotimo: PR submitted for JSON::Fast

[16:48] *** pmurias left
[16:50] *** virtualsue left
[16:51] <rindolf> FROGGS: hi , can I PM You?

[16:53] <masak> rindolf: he's in the shower.

[16:53] <rindolf> masak: ah, i see.

[16:53] <rindolf> masak: then i'll wait.

[16:53] <laben> |Tux|: now i'm free and i'm making some serious progress on your module

[16:54] *** Ven joined
[16:54] <nine> Olten!

[16:54] <masak> Olten! \o/

[16:54] <tadzik> Olsztyn!

[16:54] <masak> :P

[16:55] <FROGGS> nine: you arrived at the hotel?

[16:56] <laben> |Tux|: tests up to 50_utf8.t now pass

[16:56] *** Ven left
[16:57] *** abraxxa left
[16:58] <FROGGS> rindolf: I'm about to go to the dinner where I'll be offline...

[16:58] <rindolf> FROGGS: ah, ok.

[16:59] *** Ven joined
[17:00] <FROGGS> k, leaving the room now...

[17:00] *** FROGGS left
[17:00] <masak> I do hope he makes it.

[17:00] <masak> it's a long 4-minute trek from the hotel to the venue.

[17:01] <tadzik> to boldly go where 6-ish men have gone before

[17:01] <[Coke]> m: my $i=0; while $i < 6 { FIRST { say "Here"; last }; say $i++ } # RT #121147

[17:01] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=121147

[17:01] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«0␤1␤2␤3␤4␤5␤»

[17:01] <camelia> rakudo-moar a7c845: OUTPUT«0␤1␤2␤3␤4␤5␤»

[17:01] <[Coke]> j: my $i=0; while $i < 6 { FIRST { say "Here"; last }; say $i++ } # RT #121147

[17:01] <GLRelia> rakudo-jvm 0bfeaf: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[17:01] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=121147

[17:01] <camelia> rakudo-jvm a7c845: OUTPUT«0␤1␤2␤3␤4␤5␤»

[17:02] *** zakharyas left
[17:03] *** virtualsue joined
[17:05] *** _itz is now known as itz

[17:06] *** dakkar left
[17:08] *** rangerprice joined
[17:09] *** domidumont left
[17:10] <itz> I think the meta ticket mentioned is

[17:11] *** domidumont joined
[17:11] <itz> https://rt.perl.org/Ticket/Display.html?id=123766

[17:11] <itz> (and probably outdated)

[17:11] <masak> ah, yes. that looks like the one. itz++

[17:12] <nine> Hackathon!

[17:12] <masak> yeah, suddenly the spirit of entrepreneurship fills the room!

[17:13] * masak just met timotimo in meatspace o/

[17:14] * hoelzro .oO( meetspace? )

[17:14] <tadzik> . o O ( teamspace )

[17:14] *** FROGGS joined
[17:15] <tadzik> I should write myself a /think so I can do this faster next time

[17:15] <FROGGS> I'm not offline /o/

[17:15] <tadzik> \o\

[17:15] <timotimo> o/

[17:15] *** xfix joined
[17:15] <masak> /o\

[17:16] <timotimo> [Coke]: ohai from over here! o/

[17:16] <hoelzro> tadzik: are you on irssi?

[17:16] *** smls joined
[17:16] <tadzik> hoelzro: no, weechat

[17:16] <smls> o/

[17:17] <masak> \o

[17:18] *** domidumont left
[17:18] *** rurban left
[17:19] <timotimo> so on the ride here i was thinking of start-up time and the idea came up that perhaps moarvm could just spit out every cuid of things it lazily deserializes and then we could perhaps grab exactly the objects that were mentioned from the serialized blob and introspect what exactly it is

[17:19] <timotimo> so we can see things like "wth is it deserializing SetHash.from-pairs for startup?!"

[17:19] <laben> |Tux|: seems like "alias" is not working...

[17:19] <timotimo> and perhpas stumble upon some things that are not supposed to be done during startup

[17:20] <[Coke]> timotimo: OHAI!

[17:20] <masak> timotimo: sounds like it would be informative

[17:20] <timotimo> \o/

[17:20] <hoelzro> timotimo++

[17:22] <[Coke]> m: "\X[200B]".say

[17:22] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«5===SORRY!5=== Error while compiling /tmp/4eeriz7RLw␤Unrecognized backslash sequence: '\X'␤at /tmp/4eeriz7RLw:1␤------> 3"\7⏏5X[200B]".say␤    expecting any of:␤        double quotes␤        term␤»

[17:22] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/bsNBe2F8po␤Unrecognized backslash sequence: '\X'␤at /tmp/bsNBe2F8po:1␤------> 3"\7⏏5X[200B]".say␤    expecting any of:␤        double quotes␤        term␤»

[17:23] <[Coke]> m: "\U[200B]".say

[17:23] <GLRelia> rakudo-moar 0bfeaf: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gIK_8rRuYR␤Unrecognized backslash sequence: '\U'␤at /tmp/gIK_8rRuYR:1␤------> 3"\7⏏5U[200B]".say␤    expecting any of:␤        double quotes␤        term␤»

[17:23] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Fb_rIBPIAk␤Unrecognized backslash sequence: '\U'␤at /tmp/Fb_rIBPIAk:1␤------> 3"\7⏏5U[200B]".say␤    expecting any of:␤        double quotes␤        term␤»

[17:24] *** Calibellus joined
[17:25] <masak> so. for those who are not fortunate enough to be at the hackathon:

[17:26] <tadzik> WE HAVE CATS

[17:26] <masak> around the table we now have itz, virtualsue, nine, FROGGS, timotimo, hoelzro, tadzik, wendy, [Coke], masak, and lizmat.

[17:26] <[Coke]> Does anyone agree with Tux's request at RT #123889?

[17:26] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123889

[17:27] *** llfourn left
[17:27] <masak> [Coke]: not sure I agree, no.

[17:28] <masak> why should those particular ones be escaped in .perl output?

[17:28] <masak> .perl's contract with the world is basically that you should be able to pass it to a Perl 6 compiler, and it will generate out the original value.

[17:28] <masak> it does, in this case, even without escaping

[17:29] <[Coke]> Maybe because they're not visually distinctive, but then, a lot of unicode ain't.

[17:29] <masak> yeah, I don't see why these should get special treatment

[17:29] <dalek> rakudo/glr: c87c203 | (Stefan Seifert)++ | src/core/ (4 files):

[17:29] <dalek> rakudo/glr: Fix mysterious "Seq already iterated" errors for Seq containing Seqs

[17:29] <dalek> rakudo/glr: 

[17:29] <dalek> rakudo/glr: When a Seq contains another Seq, the latter often throwed errors about

[17:29] <dalek> rakudo/glr: having already been iterated even if the code (like List.join) really

[17:29] <dalek> rakudo/glr: only iterated once.

[17:29] <dalek> rakudo/glr: 

[17:29] <dalek> rakudo/glr: The reason is that a Seq when sunk will iterate and sink all its items.

[17:29] <dalek> rakudo/glr: We need to take care whenever we push values while iterating because

[17:29] <dalek> rakudo/glr: push returns the pused value and thus may .sink it.

[17:29] <dalek> rakudo/glr: 

[17:29] <dalek> rakudo/glr: Fixes for example ('ABC'.ords xx 1).join

[17:29] <dalek> rakudo/glr: 

[17:29] *** lizmat joined
[17:29] <dalek> rakudo/glr: Regressions in S05-modifier/counted.t and counted-match.t but I really

[17:29] <dalek> rakudo/glr: have no idea how that could happen.

[17:29] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/c87c203701

[17:29] <masak> [Coke]: does Data::Dumper do something like this?

[17:30] <pink_mist> if you set options

[17:30] <masak> aha.

[17:32] <[Coke]> Tux?

[17:32] <[Coke]> |Tux|, I men?

[17:32] <[Coke]> ... I MEAN

[17:32] <nine> moritz: I found the source of the strange .join problem ^^^

[17:32] <Ven> uh, it took me some time to understand what that THROW was doing there... but then I realize

[17:33] *** rangerprice left
[17:33] <itz> carot? ^

[17:33] <itz> ^ caret

[17:34] <laben> |Tux|: i was wrong, alias does work, investigating further...

[17:34] * masak .oO( this caret is no more. it has met its maker. )

[17:34] <FROGGS> m: say 42 for Nil

[17:34] <GLRelia> rakudo-moar c87c20: ( no output )

[17:34] <camelia> rakudo-moar a7c845: OUTPUT«42␤»

[17:34] <tadzik> carrot

[17:35] <FROGGS> Nil is not supposed to vanish there, right?

[17:35] *** Gardner left
[17:35] *** Gardner joined
[17:36] <FROGGS> nine: ?

[17:38] *** diana_olhovik joined
[17:39] <nine> FROGGS: no, I don't see a reason for Nil to vanish there

[17:43] <laben> .tell |Tux| i fixed up to test file 50_utf8.t, i'm now at 55_combi.t where the problem is trying to assign a list of chars (instead of Str) to both $!esc and $!quo. what did you mean to do?

[17:43] <yoleaux> laben: I'll pass your message to |Tux|.

[17:43] <maettu> pizza ready in 10 minutes

[17:44] <tadzik> \o/

[17:44] <masak> \o/

[17:44] <masak> I'm really hungry. I'm not sure I had lunch.

[17:44] <virtualsue> we had 'happy hour' food at the hotel

[17:44] <FROGGS> I'm sure I had no lunch nor breakfast :S

[17:46] *** muraiki left
[17:48] <masak> now the pizza smell is overpowering

[17:48] <masak> stop taunting us with invisible pizza!

[17:49] <tadzik> o/' it's beginning to smell a lot like pi-zza o/'

[17:49] <FROGGS> m: use Test; $_ = "a b c"; is +(s:g[ (\w) ] = $0 x 2), 3, "..."

[17:49] <camelia> rakudo-moar a7c845: OUTPUT«ok 1 - ...␤»

[17:49] <GLRelia> rakudo-moar c87c20: OUTPUT«not ok 1 - ...␤␤# Failed test '...'␤# at /tmp/TJVivAKDdN line 1␤# expected: '3'␤#      got: '1'␤»

[17:50] <[Coke]> r: my $value = True but False; say ?$value

[17:50] <GLRelia> rakudo-moar c87c20: OUTPUT«False␤»

[17:50] <GLRelia> ..rakudo-jvm c87c20: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[17:50] <camelia> rakudo-{moar,jvm} a7c845: OUTPUT«False␤»

[17:51] <[Coke]> r: my $value = True but False; say ?$value; say $value;

[17:51] <GLRelia> rakudo-moar c87c20: OUTPUT«False␤False␤»

[17:51] <GLRelia> ..rakudo-jvm c87c20: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[17:51] <camelia> rakudo-{moar,jvm} a7c845: OUTPUT«False␤False␤»

[17:51] <timotimo> i'd be okay with invisible pizza, as long as i could still eat it

[17:54] <tadzik> it's now 11 minutes since "pizza ready in 10 minutes" :o

[17:54] <[Coke]> m: my $a = :b; say $a.key =:= $a.key

[17:54] <GLRelia> rakudo-moar c87c20: OUTPUT«True␤»

[17:54] <camelia> rakudo-moar a7c845: OUTPUT«True␤»

[17:56] *** rarara left
[17:57] <masak> tadzik: oh, you missed the pizza? the rest of us had it all. it was very tasty.

[17:57] <tadzik> masak: http://www.nooooooooooooooo.com/

[17:57] <dalek> perl6-roast-data: 55d1257 | coke++ | / (2 files):

[17:57] <dalek> perl6-roast-data: another glr run for today

[17:57] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/55d1257599

[17:58] *** diana_olhovik left
[17:58] *** Ven left
[17:59] *** diana_olhovik joined
[18:00] <tadzik> TTNOOOOOOOOOOOOOOOOO (time to NOOOOOOOOOOOOOOOO) at the hackathon is proving to be quite short

[18:04] *** larion joined
[18:12] *** rangerprice joined
[18:13] *** muraiki joined
[18:20] <muraiki> if I use IO::Notification.watch_path but the path is deleted, will the supply stop? or do I have to handle that somehow on my own?

[18:22] <laben> m: use Test; is-deeply([],())

[18:22] <camelia> rakudo-moar a7c845: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/7Re1axgv4p line 1␤# expected: $( )␤#      got: []␤»

[18:22] <GLRelia> rakudo-moar c87c20: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/JHwPyBrPvb line 1␤# expected: $()␤#      got: $[]␤»

[18:22] <laben> m: use Test; is-deeply(Array.new,List.new)

[18:22] <camelia> rakudo-moar a7c845: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/eFgP92ghuL line 1␤# expected: $()␤#      got: []␤»

[18:22] <GLRelia> rakudo-moar c87c20: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/4ZR_AKhDsz line 1␤# expected: $()␤#      got: $[]␤»

[18:22] <laben> m: use Test; is-deeply(Array.new.list,List.new)

[18:22] <camelia> rakudo-moar a7c845: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/uKoYAtcrGL line 1␤# expected: $()␤#      got: []␤»

[18:22] <GLRelia> rakudo-moar c87c20: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/jOo6L0sOlI line 1␤# expected: $()␤#      got: $[]␤»

[18:22] <laben> m: use Test; is-deeply(Array.new.List,List.new)

[18:22] <camelia> rakudo-moar a7c845: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/nKMP0jTGW6 line 1␤# expected: $()␤#      got: []␤»

[18:22] <GLRelia> rakudo-moar c87c20: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/K0VANypJXg line 1␤# expected: $()␤#      got: $[]␤»

[18:23] <laben> m: use Test; is-deeply([].list,())

[18:23] <camelia> rakudo-moar a7c845: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/ZzjY_VCZNn line 1␤# expected: $( )␤#      got: []␤»

[18:23] <GLRelia> rakudo-moar c87c20: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/Zk1_HU8_fo line 1␤# expected: $()␤#      got: $[]␤»

[18:23] <laben> m: use Test; is-deeply([].List,())

[18:23] <camelia> rakudo-moar a7c845: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/YGUQX7DiQh line 1␤# expected: $( )␤#      got: []␤»

[18:23] <GLRelia> rakudo-moar c87c20: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/zP8sf4FRma line 1␤# expected: $()␤#      got: $[]␤»

[18:24] *** espadrine left
[18:33] <itz> its in HTTP::Easy

[18:34] * masak randomly goes into the RT queue to find something LHF-ish to work on

[18:35] <tadzik> masak: are you interesting in hearing about lhf pandabugs? :)

[18:35] <[Coke]> no? what about http://khaaan.com/ ?

[18:35] <nine> Anyone else seeing random spec test failures? Running while prove6 -v t/spec/S02-types/undefined-types.rakudo.moar ; do true ; done errors out on me after some time. More often if I run heavy parallelized spectests at the same time.

[18:36] <nine> masak: join the GLR side!

[18:36] <b2gills> [Coke]: regarding https://github.com/rakudo/rakudo/commit/a7c845cc00 is there any real value to having a variable since it gets set on every iteration and only used once?

[18:36] <tadzik> . o O ( join the GLR side! You have to flatten your cookies though )

[18:36] <[Coke]> If you can rewrite it so there's no variable, that's fine.

[18:37] <[Coke]> it has to persist over multiple times through the loop, though.

[18:37] <[Coke]> ... or maybe it doesn't, if it hits "last" in the conditional, which is probably what you were saying.

[18:38] <masak> nine: ooh, that's an idea.

[18:38] <masak> nine: any easy way to get into that? just run the spectests, or what?

[18:38] <nine> masak: yep, that's a good start

[18:39] <nine> masak: remember to checkout out the glr branch in roast, too

[18:39] <masak> ok, since you ask so nicely... :)

[18:39] <ChoHag> I have a question around something far more mundane.

[18:39] <b2gills> [Coke]: I was going to say that it should be ||= but then I checked the rest of the block

[18:39] <masak> ok, thanks glr branch in roast too. thanks.

[18:39] *** bin_005 joined
[18:40] <[Coke]> anyway, this code works; refactor at your own risk. :)

[18:40] <hoelzro> ChoHag: what's your question?

[18:40] <ChoHag> If I have an attribute of type Match which must be parsable by Foo.bar (where Foo is a Grammar and bar is a token), how do I specify that, and how do I coerce to that attribute from a Str in the constructor?

[18:41] <ChoHag> has $.bar where * ~~ Foo.bar seems obvious. I'm about to start trying it in fact but my brain and/or fingers are slow this evening.

[18:41] <[Coke]> m: sub a(int $i) is cached { return unless $i; a($i-1) }; say a(4); # RT #122004

[18:41] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122004

[18:41] <camelia> rakudo-moar a7c845: OUTPUT«Cannot find method 'perl': no method cache and no .^find_method␤  in any enter at src/gen/m-Metamodel.nqp:3584␤  in sub a at /tmp/Q5kvNjJgUW:1␤  in any call_with_capture at src/gen/m-Metamodel.nqp:3512␤  in any enter at src/gen/m-Metamodel.nqp:3584…»

[18:41] <GLRelia> rakudo-moar c87c20: OUTPUT«Cannot find method 'perl': no method cache and no .^find_method␤  in any enter at src/gen/m-Metamodel.nqp:3586␤  in sub a at /tmp/TZsvH7atAr:1␤  in any call_with_capture at src/gen/m-Metamodel.nqp:3514␤  in any enter at src/gen/m-Metamodel.nqp:3586…»

[18:42] <ChoHag> I've had little experience with coercion and constraints (beyond basic type constraints)

[18:42] <FROGGS> m: say say IO::Spec::Unix.canonpath("foo/bar/baz/../..", :parent)

[18:42] <camelia> rakudo-moar a7c845: OUTPUT«foo␤True␤»

[18:42] <GLRelia> rakudo-moar c87c20: OUTPUT«foo␤True␤»

[18:42] <hoelzro> ChoHag: I don't know if coercion works for attributes

[18:42] <masak> ChoHag: `Foo.bar` may be wrong, depending on how you're declared your `bar`

[18:42] *** vendethiel joined
[18:42] <ChoHag> token bar { ... }

[18:43] <moritz> you cannot call that as a class method, iirc

[18:43] <ChoHag> Oh right it needs to be :: as per yesterdya's discussion.

[18:43] <skids> ChoHag: you could also make that a named subset.  But "coercion" would actually change an nonconforming string to make it conform; subset/where are constraints only.

[18:43] <moritz> Foo.parse(:token<bar>, $string)

[18:44] <masak> vendethiel! \o/ you're missing some kind of pre-hackathon, with pizza and beer!

[18:46] <[Coke]> nine: can you evaluate https://rt.perl.org/Ticket/Display.html?id=123496 ?

[18:46] <masak> ok, I'm running GLRish roast on GLRish Rakudo!

[18:46] <[Coke]> welcome to 2 weeks ago! ;)

[18:46] <masak> is it supposed to be very Dubious?

[18:46] <masak> Dubious, test returned 255 (wstat 65280, 0xff00)

[18:47] <moritz> m: say (flat 4).^name

[18:47] <GLRelia> rakudo-moar c87c20: OUTPUT«List␤»

[18:47] <camelia> rakudo-moar a7c845: OUTPUT«List␤»

[18:47] <masak> like a dozen so far, and I'm only on S03

[18:47] <moritz> masak: there are 95 test files that fail

[18:47] <vendethiel> masak: I'll be here for the next part (hopefully) ;-)

[18:48] <masak> moritz: ok, goodtoknow

[18:48] <masak> vendethiel: yes, please do be here :D

[18:48] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.moar-glr_summary.out is showing those as "... aborted XXX tests".

[18:48] <vendethiel> masak: 10h55!

[18:49] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.moar-glr_summary.out#L6200 - look for "aborted"

[18:49] *** lichtkind joined
[18:50] <dalek> rakudo/glr: a11e8f2 | moritz++ | src/Perl6/Actions.nqp:

[18:50] <dalek> rakudo/glr: Fix "earliest @array { ... }"

[18:50] <dalek> rakudo/glr: 

[18:50] <dalek> rakudo/glr: dunno if that is the best fix, but it makes the tests pass

[18:50] <dalek> rakudo/glr: and does not look too dubious to me :-)

[18:50] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/a11e8f2507

[18:50] <lichtkind> my p6 talk is almost done :)

[18:50] <masak> wait... building Rakudo in a *second* directory busts the install in the first directory? how does that even...? I don't...

[18:50] <masak> lichtkind: you're coming to SPW? or YAPC::Europe?

[18:51] <vendethiel> masak: that works here :-)

[18:51] <nine> masak: just let go of nom :)

[18:51] <moritz> masak: same --prefix?

[18:51] <masak> nine: heh. no. not yet.

[18:51] <rangerprice> Look at this thread, and see how people love perl http://www.hackforums.net/showthread.php?tid=4813829

[18:52] <[Coke]> ENOLOGIN

[18:53] <masak> was gonna say

[18:53] <lichtkind> masak: me gusta espania

[18:53] <masak> rangerprice: we can't see the content because we don't have accounts.

[18:54] <moritz> [Coke]: I read that as E NO GOBLIN first :-)

[18:54] <masak> today's mini-challenge: make an adventure game where X::NoGoblin makes sense :P

[18:54] *** philh joined
[18:55] <philh> p6: say Mix({a => 0.2 })

[18:55] <GLRelia> rakudo-moar c87c20: OUTPUT«mix(a(0.2))␤»

[18:55] <camelia> rakudo-moar a7c845: OUTPUT«mix(a(0.2))␤»

[18:55] <rangerprice> masak: ah okay

[18:55] <masak> rangerprice: you could take a screenshot :)

[18:55] <philh> How do I get other classes (specifically, I'm subclassing Mix) to construct themselves when the class itself is called?

[18:56] <masak> philh: you mean, how to get the base class to construct itself?

[18:57] <philh> Maybe? If I have class Mix2 is Mix, I want to be able to call Mix2({...}) and not Mix2.new-from-pairs(...).

[18:58] <philh> Not sure if that's what you mean by the class constructing itself.

[18:58] <masak> phew, managed to restore my ordinary nom Rakudo.

[18:58] <rangerprice> wait masak i take a screenshot

[18:58] <masak> rangerprice: we're waiting :)

[18:58] <masak> philh: ok, I see what it is you want to do.

[18:58] <masak> philh: ...I don't know, offhand. it sounds like a reasonable thing to want, I think.

[18:59] <rangerprice> http://i.imgur.com/Uzi6k4Z.png - http://i.imgur.com/Tp5nwZD.png - http://i.imgur.com/uXYWiSb.png - http://i.imgur.com/kibf226.png

[18:59] <nine> m: sub foo(*@a, *%h) { say @a.perl; say %h.perl; }; foo(:foo(17));

[18:59] <GLRelia> rakudo-moar a11e8f: OUTPUT«[]␤{:foo(17)}␤»

[18:59] <camelia> rakudo-moar a7c845: OUTPUT«[]<>␤{:foo(17)}<>␤»

[19:00] <rangerprice> See how they love perl !

[19:01] <moritz> philh: write a class method CALL-ME

[19:01] <moritz> m: class A { method CALL-ME($x) { say "$x?"; self.new } }; say A('maybe')

[19:01] <GLRelia> rakudo-moar a11e8f: OUTPUT«maybe?␤A.new␤»

[19:01] <camelia> rakudo-moar a7c845: OUTPUT«maybe?␤A.new␤»

[19:01] <timotimo> well, we have the CALL-ME ... yeah

[19:02] <tadzik> :D

[19:02] <rangerprice> Happy :D

[19:02] <philh> Thanks!

[19:03] <philh> I'm curious, Mix doesn't seem to have that method defined anywhere? At least not in src/core/Mix.pm

[19:03] <masak> rangerprice: what is a "booter"?

[19:04] <philh> So it looks to me like it's inherited, but it's not further inherited when subclassing it?

[19:05] <masak> LOVE PEARL

[19:05] <rangerprice> masak: i don't know

[19:05] <rangerprice> hehehehe :D

[19:06] <masak> hehehehe! :D

[19:06] *** Sqirrel joined
[19:06] <masak> hee hee

[19:06] <rangerprice> hahaahhahah :)

[19:06] <masak> arrrhhhhhhhahaha

[19:07] <rangerprice> ~ Wonder if i, gave an oreo ~

[19:07] *** dwarring joined
[19:07] <masak> rangerprice: I now know what a booter is.

[19:07] <rangerprice> What is this so 

[19:07] <masak> it's something to start up a botnet, apparently.

[19:07] <rangerprice> Oh

[19:07] <masak> I have very little experience with botnets.

[19:08] <masak> I usually use computers one at a time.

[19:08] <masak> and mostly only my own :)

[19:08] <rangerprice> obviously

[19:08] <masak> rangerprice: thank you for this rare insight into what some people who I usually never meet think about Perl :)

[19:09] <rangerprice> This is what i'm here :D

[19:09] <rangerprice> this is why *

[19:10] <dalek> roast: de7de27 | coke++ | S32-temporal/Date.t:

[19:10] <dalek> roast: add tests for RT #125681

[19:10] <dalek> roast: review: https://github.com/perl6/roast/commit/de7de27009

[19:10] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125681

[19:10] <grondilu> Alejandro is a great chess teacher

[19:11] <masak> grondilu: that came out of nowhere :)

[19:11] <grondilu> oops, wrong channel

[19:11] <masak> aw, I was hoping there was a connection somewhere ;)

[19:11] <grondilu> sorry guys

[19:12] <lizmat> philh: which method in Mix are you missing again?

[19:13] *** grondilu left
[19:13] <philh> CALL-ME.

[19:14] <dalek> roast/glr: 978df96 | moritz++ | integration/99problems-51-to-60.t:

[19:14] <dalek> roast/glr: Try to fix balanced tree test

[19:14] <dalek> roast/glr: 

[19:14] <dalek> roast/glr: not quite right, but at least it doesn't abort anymore

[19:14] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/978df96f88

[19:15] <[Coke]> m: sub foo { my $s; for 1..3 { $s += $_ } } ; say foo()

[19:15] <camelia> rakudo-moar a7c845: OUTPUT«Nil␤»

[19:15] <GLRelia> rakudo-moar a11e8f: OUTPUT«Nil␤»

[19:15] <lizmat> m: say Mix(10); say 10.Mix

[19:15] <GLRelia> rakudo-moar a11e8f: OUTPUT«mix(10)␤mix(10)␤»

[19:15] <camelia> rakudo-moar a7c845: OUTPUT«mix(10)␤mix(10)␤»

[19:15] <lizmat> m: say Mix(^10)

[19:15] <GLRelia> rakudo-moar a11e8f: OUTPUT«mix(5, 7, 9, 4, 8, 3, 0, 1, 6, 2)␤»

[19:15] <camelia> rakudo-moar a7c845: OUTPUT«mix(5, 7, 9, 4, 8, 3, 0, 1, 6, 2)␤»

[19:16] <[Coke]> m: sub foo { my $s; for 1..3 { $s += $_ } } ; say foo()

[19:16] <camelia> rakudo-moar a7c845: OUTPUT«Nil␤»

[19:16] <GLRelia> rakudo-moar a11e8f: OUTPUT«Nil␤»

[19:16] <[Coke]> m: sub foo { my $s; ($s += $_ for 1..3) } ; say foo() # whoops

[19:16] <camelia> rakudo-moar a7c845: OUTPUT«6 6 6␤»

[19:16] <GLRelia> rakudo-moar a11e8f: OUTPUT«6 6 6␤»

[19:16] <philh> lizmat: ah, sorry, possibly I was unclear. I was wondering how Mix has CALL-ME defined, when it's not in src/core/Mix.pm; but when I subclass Mix, the subclass doesn't have it.

[19:16] <lizmat> philh: I think that if you call a type object with parameters, it is interpreted as using the type object as a coercer

[19:17] <nine> lizmat: yes, that's what I've seen, too

[19:17] <nine> lizmat: ping

[19:17] <itz> https://rt.perl.org/Ticket/Display.html?id=123766

[19:17] <masak> [Coke]: what itz said :)

[19:18] <lizmat> I don't think CALL-ME is involved

[19:18] <lizmat> or if it is, it's somewhere deep in the bootstrap

[19:18] <philh> Oh, okay.

[19:18] <nine> itz: oh, good that the GLR is not in that list ;)

[19:18] * nine can stop working and go relax now :)

[19:19] *** farhad joined
[19:19] <[Coke]> m: .say for ([1, 0 xx 5-1], *.rotate(-1) ... *)[^5]

[19:19] <GLRelia> rakudo-moar a11e8f: OUTPUT«1␤0 0 0 0␤0␤0␤0␤»

[19:19] <camelia> rakudo-moar a7c845: OUTPUT«1 0 0 0 0␤0␤1␤0␤0␤»

[19:19] <[Coke]> itz++ !

[19:19] <dalek> perl6-examples: 20adca9 | (Steve Mynott)++ | categories/cookbook/16processes/16-13-listing-signals.pl:

[19:19] <dalek> perl6-examples: import

[19:19] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/20adca935e

[19:19] <philh> I think of coercers as being the specific methods .Mix etc. that are defined in various places. Is that correct, or are they something else?

[19:21] <[Coke]> m: 'say "abc".ords xx 2'

[19:21] <GLRelia> rakudo-moar a11e8f: OUTPUT«WARNINGS:␤Useless use of constant string "say \"abc\".ords xx 2" in sink context (line 1)␤»

[19:21] <camelia> rakudo-moar a7c845: OUTPUT«WARNINGS:␤Useless use of constant string "say \"abc\".ords xx 2" in sink context (line 1)␤»

[19:21] <[Coke]> m: say "abc".ords xx 2

[19:21] <GLRelia> rakudo-moar a11e8f: OUTPUT«97 98 99 97 98 99␤»

[19:21] <camelia> rakudo-moar a7c845: OUTPUT«␤»

[19:21] <ugexe> you can coerce inside a signature as well. sub foo(TypeTo(TypeFrom) $var) { }

[19:22] <[Coke]> so if we have an RT that works in glr, safe to resolve?

[19:22] <[Coke]> even though glr isn't technically released yet?

[19:23] *** llfourn joined
[19:24] <farhad> which on is harder perl or python

[19:25] <dalek> perl6-roast-data: b1633d4 | coke++ | / (2 files):

[19:25] <dalek> perl6-roast-data: another glr run for today

[19:25] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b1633d4a43

[19:25] <[Coke]> looks like the most recent glr commit regressed.

[19:25] <pink_mist> farhad: that's very individual; learn both and decide for yourself

[19:26] <philh> Oh, I think I get it - ClassName(obj) is turned into (obj).ClassName if ClassName doesn't have a .CALL-ME ?

[19:26] <philh> And that would explain why

[19:27] <philh> p6: class Mix2 is Mix {}; Mix2({})

[19:27] <GLRelia> rakudo-moar a11e8f: OUTPUT«Cannot find method 'Mix2'␤  in block <unit> at /tmp/tmpfile:1␤␤»

[19:27] <camelia> rakudo-moar a7c845: OUTPUT«Cannot find method 'Mix2'␤  in block <unit> at /tmp/tmpfile:1␤␤»

[19:27] <vendethiel> philh: no :).

[19:27] <philh> complains about a missing method.

[19:27] <masak> lizmat, nine: https://gist.github.com/masak/b694a4050f4e91bd254c

[19:27] <philh> ...oh.

[19:27] <vendethiel> we don't have universal call syntax (like D, Nim, maybe c++ soon-ish)

[19:28] *** llfourn left
[19:28] *** yqt joined
[19:28] <farhad> thanks pink_mist for your answer.

[19:29] *** farhad left
[19:29] <[Coke]> ... hearing no complaints, treating a glr-fixed RT as fixed.

[19:31] <[Coke]> m: say @a[0,1].perl; say @a[^2].perl; 

[19:31] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/bf6ZA5Lskx␤Variable '@a' is not declared␤at /tmp/bf6ZA5Lskx:1␤------> 3say 7⏏5@a[0,1].perl; say @a[^2].perl;␤»

[19:31] <GLRelia> rakudo-moar a11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/EKXwg4s0Hq␤Variable '@a' is not declared␤at /tmp/EKXwg4s0Hq:1␤------> 3say 7⏏5@a[0,1].perl; say @a[^2].perl;␤»

[19:31] <[Coke]> m: my @a; say @a[0,1].perl; say @a[^2].perl; 

[19:31] <GLRelia> rakudo-moar a11e8f: OUTPUT«(Any, Any)␤()␤»

[19:31] <camelia> rakudo-moar a7c845: OUTPUT«(Any, Any)␤()␤»

[19:31] *** telex left
[19:32] *** telex joined
[19:32] <[Coke]> m: my @a; 15:31 < [Coke]> m: my @a; say @a[0,1].perl; say @a[^2].perl;

[19:32] <GLRelia> rakudo-moar a11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/85Yyc3oLrj␤Confused␤at /tmp/85Yyc3oLrj:1␤------> 3my @a; 15:7⏏0531 < [Coke]> m: my @a; say @a[0,1].perl;␤    expecting any of:␤        colon pair␤»

[19:32] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/5UAAp6KT8V␤Confused␤at /tmp/5UAAp6KT8V:1␤------> 3my @a; 15:7⏏0531 < [Coke]> m: my @a; say @a[0,1].perl;␤    expecting any of:␤        colon pair␤»

[19:32] <[Coke]> (sorry)

[19:33] <[Coke]> m: my @a; @a[0,1] = 42,43; say @a.perl; @a[^2] = 42,43; say @.perl;

[19:33] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/2xMtmPQdpB␤Variable @.perl used where no 'self' is available␤at /tmp/2xMtmPQdpB:1␤------> 3 say @a.perl; @a[^2] = 42,43; say @.perl7⏏5;␤    expecting any of:␤        argument list␤        term␤»

[19:33] <GLRelia> rakudo-moar a11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ezU0jUH8zU␤Variable @.perl used where no 'self' is available␤at /tmp/ezU0jUH8zU:1␤------> 3 say @a.perl; @a[^2] = 42,43; say @.perl7⏏5;␤    expecting any of:␤        argument list␤        term␤»

[19:33] <[Coke]> m: my @a; @a[0,1] = 42,43; say @a.perl; @a[^2] = 42,43; say @a.perl;

[19:33] <GLRelia> rakudo-moar a11e8f: OUTPUT«[42, 43]␤[42, 43]␤»

[19:33] <camelia> rakudo-moar a7c845: OUTPUT«[42, 43]<>␤[42, 43]<>␤»

[19:35] <[Coke]> m: my @a; my @b @a[0,1] = 42,43; say @a.perl; @b[^2] = 42,43; say @b.perl;

[19:35] <GLRelia> rakudo-moar a11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MiO6GWL8gR␤Two terms in a row␤at /tmp/MiO6GWL8gR:1␤------> 3my @a; my @b7⏏5 @a[0,1] = 42,43; say @a.perl; @b[^2] = ␤    expecting any of:␤        infix␤        infix stopper␤        statemen…»

[19:35] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/b1K6h9xEwk␤Two terms in a row␤at /tmp/b1K6h9xEwk:1␤------> 3my @a; my @b7⏏5 @a[0,1] = 42,43; say @a.perl; @b[^2] = ␤    expecting any of:␤        infix␤        infix stopper␤        statemen…»

[19:35] <[Coke]> m: my @a; my @b; @a[0,1] = 42,43; say @a.perl; @b[^2] = 42,43; say @b.perl;

[19:35] <GLRelia> rakudo-moar a11e8f: OUTPUT«[42, 43]␤[42, 43]␤»

[19:35] <camelia> rakudo-moar a7c845: OUTPUT«[42, 43]<>␤[42, 43]<>␤»

[19:36] *** ChoHag left
[19:40] <dalek> roast: f4c0fa6 | coke++ | S03-metaops/hyper.t:

[19:40] <dalek> roast: use original RT #

[19:40] <dalek> roast: review: https://github.com/perl6/roast/commit/f4c0fa65a3

[19:40] *** bin_005 left
[19:40] <[Coke]> m: my $पहला = 1;

[19:40] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/FB8TUXf0cp␤Bogus postfix␤at /tmp/FB8TUXf0cp:1␤------> 3my $पहल7⏏5ा = 1;␤    expecting any of:␤        constraint␤        infix␤        infix stopper␤        postfix␤        state…»

[19:40] <GLRelia> rakudo-moar a11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/HAfAEY9WSh␤Bogus postfix␤at /tmp/HAfAEY9WSh:1␤------> 3my $पहल7⏏5ा = 1;␤    expecting any of:␤        constraint␤        infix␤        infix stopper␤        postfix␤        state…»

[19:44] <timotimo> m: say uniname("ा")

[19:44] <camelia> rakudo-moar a7c845: OUTPUT«DEVANAGARI VOWEL SIGN AA␤»

[19:44] <GLRelia> rakudo-moar a11e8f: OUTPUT«DEVANAGARI VOWEL SIGN AA␤»

[19:44] <FROGGS> m: say uniname($_) for "पहला ".chars

[19:44] <GLRelia> rakudo-moar a11e8f: OUTPUT«ENQUIRY␤»

[19:44] <camelia> rakudo-moar a7c845: OUTPUT«ENQUIRY␤»

[19:44] *** bin_005 joined
[19:44] <FROGGS> m: say uniname($_) for "abc".chars

[19:44] <GLRelia> rakudo-moar a11e8f: OUTPUT«END OF TEXT␤»

[19:44] <camelia> rakudo-moar a7c845: OUTPUT«END OF TEXT␤»

[19:45] <timotimo> m: say "foo".chars

[19:45] <GLRelia> rakudo-moar a11e8f: OUTPUT«3␤»

[19:45] <camelia> rakudo-moar a7c845: OUTPUT«3␤»

[19:45] <[Coke]> m: say "foo">>.chars

[19:45] <GLRelia> rakudo-moar a11e8f: OUTPUT«3␤»

[19:45] <camelia> rakudo-moar a7c845: OUTPUT«3␤»

[19:45] <FROGGS> m: say uniname($_) for "abc".ords».chr

[19:45] <GLRelia> rakudo-moar a11e8f: OUTPUT«LATIN SMALL LETTER A␤LATIN SMALL LETTER B␤LATIN SMALL LETTER C␤»

[19:45] <camelia> rakudo-moar a7c845: OUTPUT«LATIN SMALL LETTER A␤LATIN SMALL LETTER B␤LATIN SMALL LETTER C␤»

[19:45] <FROGGS> m: say uniname($_) for "पहला ".ords

[19:45] <GLRelia> rakudo-moar a11e8f: OUTPUT«DEVANAGARI LETTER PA␤DEVANAGARI LETTER HA␤DEVANAGARI LETTER LA␤DEVANAGARI VOWEL SIGN AA␤SPACE␤»

[19:45] <camelia> rakudo-moar a7c845: OUTPUT«DEVANAGARI LETTER PA␤DEVANAGARI LETTER HA␤DEVANAGARI LETTER LA␤DEVANAGARI VOWEL SIGN AA␤SPACE␤»

[19:46] <FROGGS> m: say "पहला".chars

[19:46] <GLRelia> rakudo-moar a11e8f: OUTPUT«4␤»

[19:46] <camelia> rakudo-moar a7c845: OUTPUT«4␤»

[19:46] <FROGGS> m: say ("पहला" ~~ /\w+/).Str.chars

[19:46] <timotimo> m: say uniprop("प", "Category")

[19:46] <camelia> rakudo-moar a7c845: OUTPUT«3␤»

[19:46] <GLRelia> rakudo-moar a11e8f: OUTPUT«3␤»

[19:46] <GLRelia> rakudo-moar a11e8f: OUTPUT«0␤»

[19:46] <camelia> rakudo-moar a7c845: OUTPUT«0␤»

[19:46] <[Coke]> RT #122340 btw.

[19:46] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122340

[19:48] <FROGGS> m: say "पहला".ords».fmt('$#x')

[19:48] <GLRelia> rakudo-moar a11e8f: OUTPUT«Directives specify 0 arguments, but 1 argument was supplied␤␤»

[19:48] <camelia> rakudo-moar a7c845: OUTPUT«Directives specify 0 arguments, but 1 argument was supplied␤␤»

[19:48] <timotimo> m: say "ला".graphs

[19:48] <GLRelia> rakudo-moar a11e8f: OUTPUT«Method 'graphs' not found for invocant of class 'Str'␤  in block <unit> at /tmp/eFkS2U9FLh:1␤␤»

[19:48] <camelia> rakudo-moar a7c845: OUTPUT«Method 'graphs' not found for invocant of class 'Str'␤  in block <unit> at /tmp/hPyr7UwFk2:1␤␤»

[19:48] <timotimo> m: say "ला".NFG.graphs

[19:48] <camelia> rakudo-moar a7c845: OUTPUT«Method 'NFG' not found for invocant of class 'Str'␤  in block <unit> at /tmp/6z12qydula:1␤␤»

[19:48] <GLRelia> rakudo-moar a11e8f: OUTPUT«Method 'NFG' not found for invocant of class 'Str'␤  in block <unit> at /tmp/Ss0ugMBWiH:1␤␤»

[19:48] <FROGGS> m: say "पहला".ords».fmt('%#x')

[19:48] <GLRelia> rakudo-moar a11e8f: OUTPUT«0x92a 0x939 0x932 0x93e␤»

[19:48] <camelia> rakudo-moar a7c845: OUTPUT«0x92a 0x939 0x932 0x93e␤»

[19:48] <timotimo> m: say "ला".Uni

[19:48] <GLRelia> rakudo-moar a11e8f: OUTPUT«Method 'Uni' not found for invocant of class 'Str'␤  in block <unit> at /tmp/epnWK63hdK:1␤␤»

[19:48] <camelia> rakudo-moar a7c845: OUTPUT«Method 'Uni' not found for invocant of class 'Str'␤  in block <unit> at /tmp/FCnqPYOXyO:1␤␤»

[19:48] <timotimo> m: say "ला".uni

[19:48] <camelia> rakudo-moar a7c845: OUTPUT«Method 'uni' not found for invocant of class 'Str'␤  in block <unit> at /tmp/TPq9u_TV_Z:1␤␤»

[19:48] <GLRelia> rakudo-moar a11e8f: OUTPUT«Method 'uni' not found for invocant of class 'Str'␤  in block <unit> at /tmp/b5TYMLLcmB:1␤␤»

[19:52] <masak> 'night, #perl6

[19:52] <masak> 'night, hackathon :)

[19:53] *** Peter_R left
[19:54] <timotimo> i was just printing the sorted result of a "leaderboard" with >>.say and i was confused why the numbers were going from big to small, then jump back to big and down to small again

[19:54] <timotimo> that's hyper for you

[19:56] <ShimmerFairy> m: say "पहला".comb».uniprop

[19:56] <GLRelia> rakudo-moar a11e8f: OUTPUT«Lo Lo Lo Mc␤»

[19:56] <camelia> rakudo-moar a7c845: OUTPUT«Lo Lo Lo Mc␤»

[19:57] *** Peter_R joined
[19:57] *** virtualsue left
[19:58] <FROGGS> m: my $idxs := 0.map({ once fail "foo" }).Array; say $idxs.elems..Inf

[19:58] <GLRelia> rakudo-moar a11e8f: OUTPUT«1..Inf␤»

[19:58] <camelia> rakudo-moar a7c845: OUTPUT«foo␤  in block  at /tmp/0QmJkN9oN0:1␤  in block <unit> at /tmp/0QmJkN9oN0:1␤␤Actually thrown at:␤  in block <unit> at /tmp/0QmJkN9oN0:1␤␤»

[19:59] <FROGGS> nine: this might be some code where you unsinkness patch does not help...

[20:06] <dalek> Heuristic branch merge: pushed 42 commits to rakudo/glr by lizmat

[20:07] <dalek> Heuristic branch merge: pushed 22 commits to roast/glr by lizmat

[20:08] <rangerprice> Who develop in C++ here ? i need help

[20:09] *** philh left
[20:10] <laben> rangerprice: let's hear it, i may be of help

[20:11] * [Coke] wonders if you can go from 'abc' to / 'abc' / without an Eval. 

[20:12] <FROGGS> [Coke]: when building QAST you can...

[20:12] <[Coke]> m: my $str = "fooooobar"; my $re = "o"; my Regex O = new("'"~$re~"'"); say $str ~~ O

[20:12] <GLRelia> rakudo-moar a11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wWoFn6gmF8␤Malformed my (did you mean to declare a sigilless \O or $O?)␤at /tmp/wWoFn6gmF8:1␤------> 3 = "fooooobar"; my $re = "o"; my Regex O7⏏5 = new("'"~$re~"'"); say $str ~~ O␤»

[20:12] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/szUpj_e80e␤Malformed my (did you mean to declare a sigilless \O or $O?)␤at /tmp/szUpj_e80e:1␤------> 3 = "fooooobar"; my $re = "o"; my Regex O7⏏5 = new("'"~$re~"'"); say $str ~~ O␤»

[20:12] <[Coke]> m: my $str = "fooooobar"; my $re = "o"; my Regex $O = new("'"~$re~"'"); say $str ~~ $O

[20:12] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZRnHzTh1F0␤Undeclared routine:␤    new used at line 1 (in Perl 6 please use method call syntax instead)␤␤»

[20:12] <GLRelia> rakudo-moar a11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uqMZQor2uo␤Undeclared routine:␤    new used at line 1 (in Perl 6 please use method call syntax instead)␤␤»

[20:12] <[Coke]> m: my $str = "fooooobar"; my $re = "o"; my Regex $O = Regex.new("'"~$re~"'"); say $str ~~ $O

[20:12] <GLRelia> rakudo-moar a11e8f: OUTPUT«Default constructor for 'Regex' only takes named arguments␤  in block <unit> at /tmp/9sgDYg6E99:1␤␤»

[20:12] <camelia> rakudo-moar a7c845: OUTPUT«Default constructor for 'Regex' only takes named arguments␤  in block <unit> at /tmp/9mfIiZofbZ:1␤␤»

[20:12] <FROGGS> [Coke]: is this about string literals only? or might there be regex special chars in there?

[20:12] <rangerprice> i am making a generic vector in C++, and i use polymorphism, but i have some trouble

[20:13] *** xfix left
[20:13] *** darutoko left
[20:13] <rangerprice> laben: my problem is detailled in this thread: http://stackoverflow.com/questions/32217512/generic-programming-with-polymorphism-and-generic-vector

[20:13] <lizmat> http://mynoise.net/NoiseMachines/catPurrNoiseGenerator.php    # purr

[20:13] *** xfix joined
[20:14] *** cwDYKARN joined
[20:14] <dalek> roast/glr: e3d35a1 | (David Warring [email@hidden.address] | integration/99problems-41-to-50.t:

[20:14] <dalek> roast/glr: GLRify 99problems-41-to-50.t

[20:14] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/e3d35a1df5

[20:14] <dalek> roast/glr: c1ab404 | (David Warring [email@hidden.address] | S (35 files):

[20:14] <dalek> roast/glr: Merge branch 'glr' of https://github.com/perl6/roast into glr

[20:14] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/c1ab404690

[20:16] <laben> rangerprice: polymorphs ok, but to access fields not in the base class, you need to cast the pointer to the derived class

[20:16] *** Peter_R left
[20:16] <lizmat> note: whenever now works in the glr

[20:16] <[Coke]> Just literals... but I was trying to be lazy.

[20:17] <laben> rangerprice: alternatively you can write some setters/getters, but you will still need to cast the pointer

[20:17] <colomon> rangerprice: what laben said.  in C++, an All * cannot directly access something in a derived class

[20:18] <colomon> it’s nothing like perl 6 in that respect.  ;)

[20:18] *** xfix left
[20:18] <laben> colomon: yeah, it feels strange after getting accostumed to a more modern OO system

[20:18] <colomon> laben: I’d say more like painful, but I still use it every day.

[20:19] <colomon> I went through a ludicrous amount of template nonsense to make something happen today which would have just been automatic in p6.

[20:19] *** Peter_R joined
[20:20] <laben> could be painful too, yeah, depending on the person. i'm somewhat resistant to pain nowadays due to $daily-job involving XML and XSLT to horrifying degrees

[20:21] *** dha joined
[20:21] <rangerprice> laben & colomon: But i can't cast the All* pointer because i don't know the type of any

[20:22] *** dha left
[20:22] <laben> rangerprice: what do you mean you dont know the type?

[20:22] *** dha joined
[20:23] <colomon> rangerprice: yes, well then, you either need to figure out a generic interface for Any that the derived classes can use, or mess around with type ids until you can find the type.

[20:23] <colomon> You can do the latter with dynamic_cast, but it’s a pain.

[20:23] *** llfourn joined
[20:24] *** virtualsue joined
[20:24] <laben> oh the joys of having to write abstract classes to make interfaces

[20:24] <laben> and remember to write virtual func(...) {...} = 0; for whatever reason i dont remember anymore

[20:24] <colomon> … actually, there probably isn’t a reasonable generic interface, now that I look at it.  because value can be of any type.

[20:25] <colomon> laben: hmm?  normally you’d have virtual func(...) = 0 or virtual func(...) {...}  — both is possible but very unusal.

[20:26] <laben> yeah, see? i actually forgot what was it supposed to be :/

[20:28] *** llfourn left
[20:29] <colomon> point is, unless there’s some fancy new C++11 (or whatever) functionality I don’t know about, you have to declare a single type as your return type for a virtual function.  So no way to write GetValue.

[20:29] <laben> auto?

[20:29] <laben> it should work, not that i know much of it...

[20:29] <rangerprice> colomon: why dynamic_cast is a pain ? i never use it

[20:30] <colomon> the way you’ve set things up, you’d have to have a dynamic_cast for each possible type

[20:30] <dalek> Inline-Perl5: 203cabc | hoelzro++ | t/ (2 files):

[20:30] <dalek> Inline-Perl5: Add test for GH #40

[20:30] <dalek> Inline-Perl5: 

[20:30] <dalek> Inline-Perl5: This points out an issue where keyword arguments aren't being passed

[20:30] <dalek> Inline-Perl5: to Perl 5

[20:30] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/203cabcc81

[20:30] <dalek> Inline-Perl5: d3d9774 | hoelzro++ | lib/Inline/Perl5.pm6:

[20:30] <dalek> Inline-Perl5: Make sure we pass keyword arguments to Perl 5

[20:30] <dalek> Inline-Perl5: 

[20:30] <dalek> Inline-Perl5: Fixes GH #40

[20:30] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/d3d9774e1f

[20:30] <dalek> Inline-Perl5: b0b56fc | niner++ | / (3 files):

[20:30] <dalek> Inline-Perl5: Merge pull request #41 from hoelzro/master

[20:30] <dalek> Inline-Perl5: 

[20:30] <dalek> Inline-Perl5: Fix GH #40

[20:30] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/b0b56fcee5

[20:31] <itz> m: lines("a\nb").perl

[20:31] <GLRelia> rakudo-moar a11e8f: ( no output )

[20:31] <camelia> rakudo-moar a7c845: ( no output )

[20:31] <itz> m: say lines("a\nb").perl

[20:31] <GLRelia> rakudo-moar a11e8f: OUTPUT«("a", "b").Seq␤»

[20:31] <camelia> rakudo-moar a7c845: OUTPUT«("a", "b")␤»

[20:32] <dalek> rakudo-star-daily: 8e05f65 | coke++ | log/ (8 files):

[20:32] <dalek> rakudo-star-daily: today (automated commit)

[20:32] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/8e05f65237

[20:32] <laben> rangerprice: if for whatever reason you cannot cast the pointer to the derived side, you have to put your value in the base class or make some mess with declaring methods to access them in the base class and implement them in the derived

[20:37] <rangerprice> laben: Or i can implement the getValue() inside 'any' class, and make the base class become the friend of the child class ?  

[20:39] *** lizmat left
[20:39] <laben> O.o the friend thing is needed to access the internals of another class, yes, but in your case you dont have access not even to them until you cast the pointer. it's like it desn't even know it is a derived class until you "convince" it

[20:40] *** virtualsue left
[20:43] <dalek> rakudo/glr: 778b1fb | FROGGS++ | src/core/Str.pm:

[20:43] <dalek> rakudo/glr: let Str.match return a List properly

[20:43] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/778b1fb61c

[20:43] <dalek> rakudo/glr: fe1d45a | FROGGS++ | src/core/Str.pm:

[20:43] <dalek> rakudo/glr: s/fail/die/ so it explodes instead of sleeping in an array

[20:43] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/fe1d45a4c1

[20:44] <dalek> roast/glr: 0ef812a | FROGGS++ | S32-io/io-spec-unix.t:

[20:44] <dalek> roast/glr: remove duplicate hash elem, which was a noop

[20:44] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0ef812a351

[20:47] <colomon> rangerprice: what you really want to do (probably) is give Any a “Print” function, and then the derived classes can each do the right thing.

[20:50] *** kaare__ left
[20:50] <rangerprice> not a print function, but a getValue() function that will return the value of Any::value

[20:53] <laben> rangerprice: declare something like "virtual All getValue() = 0;" inside All and implement it in any with "any getValue() {return value;};" and in the loop, use the getValue() to obtain it. 50% chance to work if i got the virtual syntax right

[20:57] <colomon> like I said above, I’m pretty sure that cannot work.  What is the type you are returning from getValue?

[20:58] *** pullphinger left
[20:58] <rangerprice> T

[20:58] <dalek> roast: e960b57 | (David Warring)++ | / (4 files):

[20:58] <dalek> roast: utilize does-ok test assertion

[20:58] <dalek> roast: review: https://github.com/perl6/roast/commit/e960b57767

[20:58] <dalek> roast: 67b2039 | (David Warring [email@hidden.address] | / (4 files):

[20:58] <dalek> roast: Merge branch 'does-ok'

[20:58] <dalek> roast: review: https://github.com/perl6/roast/commit/67b2039297

[20:58] <colomon> no.  there is no T on any

[20:58] <colomon> Any

[20:58] *** FROGGS left
[20:59] <laben> ok maybe it needs a level of pointer indirection to work its magic, but honestly it's quite strange you dont know the type to cast it

[20:59] <rangerprice> getValue return the type of value, so T

[20:59] *** ilbelkyr joined
[20:59] <colomon> rangerprice: that approach will compile, but each derived class will have its own getValue that doesn’t override the one in the base class.

[20:59] <rangerprice> oh

[21:00] <rangerprice> yes i understand colomon

[21:00] <rangerprice> and it would be great if the base class can have a access to the derived class

[21:01] *** lea_ joined
[21:01] <rangerprice> I develop in C++14, and for me, C++ and generic programming is a pain

[21:01] <laben> meh, every time a new derived class appears, you would have to extend the base class to consider that

[21:02] *** lea left
[21:03] <colomon> rangerprice: the real problem here is you haven’t thought out what you really want to do.    :)  

[21:03] <colomon> rangerprice: why do you want Any, which doesn’t have a ::value, to be able to access value?

[21:03] *** Sqirrel left
[21:03] *** Sqirrel joined
[21:04] *** diana_olhovik left
[21:04] *** laouji joined
[21:05] *** bin_005 left
[21:05] <rangerprice> colomon: Any have a variable member named value. I know exactly what i want to do, i just want to do a generic type that can be used by vector to make a generic vector

[21:05] <muraiki> does anyone know if there's a way to make a IO::Notification.watch_path supply close if the path is deleted? I don't really want to create another watch_path for the watch_path :)

[21:05] *** bin_005 joined
[21:06] <vendethiel> .oO( who watch_path-es the watch_path-s?

[21:07] <vendethiel> )*

[21:07] <muraiki> hehe :)

[21:08] <muraiki> also, I see that there's a chmod built in, but there's no chown, right?

[21:10] *** FROGGS joined
[21:11] *** skids left
[21:12] <colomon> rangerprice: there’s basically no way to do that (assuming you mean the vector holds all generic types, rather than just a templated vector like std::vector) without an insane number of dynamic_casts which you get data back out of the vector.

[21:12] <laben> muraiki: if it registers the deletion as an event, you could do work inside the closure passed to tap and call .close

[21:12] <colomon> rangerprice: you’re throwing away your type information, and will have to fight to get it back.

[21:13] <muraiki> laben: oh, I can close the supply from within the supply? I thought that might do something scary, heh. thanks!

[21:13] <laben> muraiki: i dunno if it works actually

[21:13] <muraiki> ah :)

[21:13] *** lea_ left
[21:13] *** lea_ joined
[21:13] <muraiki> I returned inside of a do once, and everything went crazy

[21:13] *** lea_ is now known as lea

[21:13] <muraiki> well, the program terminated, but then eventually my cmoputer froze with moarvm at 100% CPU

[21:14] <muraiki> and eating up all my ram

[21:14] <colomon> rangerprice: basically you’re trying to do something that most C++ programmers gave up trying to do several decades ago…

[21:14] <timotimo> vendethiel: will you arrive tomorrow? :)

[21:14] <vendethiel> timotimo: 10h55! I just set my alarm to wake me up at 5 :)

[21:14] <timotimo> oke :)

[21:15] <vendethiel> I better get some sleep in the train, and not only some reading of my book

[21:15] <timotimo> that's not a lot of sleep

[21:15] <vendethiel> no, but then, I've slept enough the week before this one that it should be fine

[21:15] <timotimo> is that "in 10 hours 55 minutes" or "at 10:55"?

[21:15] *** rurban joined
[21:15] <laben> muraiki: makes me remember a time when windows froze at shutdown while still playing never gonna give you up

[21:15] <timotimo> right, that'll help

[21:15] <vendethiel> timotimo 10:55am

[21:15] <muraiki> laben: sounds like a nightmare :)

[21:16] <laben> XD i had to brutally remove the supply to stop it

[21:16] <timotimo> oke

[21:21] <timotimo> https://imgur.com/I0UD5Uj - GLR in a nutshell

[21:21] *** nowan joined
[21:22] *** vendethiel left
[21:27] <laben> .tell |Tux| i fixed 60_samples.t after skipping 55_combi.t, i got up to 90/114 tests of 77_getall.t passing, still needs a lot of work

[21:27] <yoleaux> laben: I'll pass your message to |Tux|.

[21:27] <dalek> roast/glr: 08f7ebe | (Stefan Seifert)++ | S09-typed-arrays/arrays.t:

[21:27] <dalek> roast/glr: todo -> skip to allow tests to continue

[21:27] <dalek> roast/glr: 

[21:27] <dalek> roast/glr: Previously the tests gave the wrong result. Now they fail because there

[21:27] <dalek> roast/glr: are no typed Seq and @array.values and .keys return Seq now.

[21:27] <dalek> roast/glr: 

[21:27] <dalek> roast/glr: The question remains if we actually need typed Seq. Since they are

[21:27] <dalek> roast/glr: immutable, the only reason that comes to mind would be multi dispatch.

[21:27] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/08f7ebe9a3

[21:27] <dalek> roast/glr: c418cc1 | (Stefan Seifert)++ | S09-typed-arrays/arrays.t:

[21:27] <dalek> roast/glr: Parcel is List now

[21:27] <dalek> roast/glr: 

[21:27] <dalek> roast/glr: Fixs S09-typed-arrays/arrays.t

[21:27] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/c418cc109d

[21:27] * colomon has been packing up, to make for easy travels in the morning.

[21:28] <laben> and with this, i'm going to bed soon. good rest|work #perl6

[21:28] *** abaugher joined
[21:28] *** laben left
[21:31] *** smls left
[21:35] *** raiph joined
[21:36] <timotimo> we could potentially make constructing NFAs a tiny fractional bit less expensive by requiring the user of the nfa api to have an nqp::list of nqp::list_i's

[21:36] <timotimo> that'll save us a whole bunch of boxes

[21:36] <timotimo> and we wouldn't have to MVM_coerce_simple_intify all the edge values

[21:39] *** yqt left
[21:41] <timotimo> now i see that wouldn't be possible because it has to be able to store strings, too

[21:51] *** Zoffix left
[21:51] *** muraiki left
[21:51] *** yqt joined
[21:52] *** Possum left
[21:55] *** Sqirrel left
[21:57] <dalek> rakudo/glr: 98ec245 | (Stefan Seifert)++ | src/Perl6/Actions.nqp:

[21:57] <dalek> rakudo/glr: Fix "This Seq has already been iterated" when tapping a feed

[21:57] <dalek> rakudo/glr: 

[21:57] <dalek> rakudo/glr: @data <== map {$_ + 1} <== @tap <== grep {$_ % 2} <== eager @data;

[21:57] <dalek> rakudo/glr: pushed the Seq from grep into @tap and then tried to re-use the same Seq

[21:57] <dalek> rakudo/glr: for further processing of the feed in map. Have to .list it to do that.

[21:57] <dalek> rakudo/glr: 

[21:57] <dalek> rakudo/glr: Fixes t/spec/S03-feeds/basic.t

[21:57] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/98ec245bd4

[22:01] *** Possum joined
[22:08] *** rindolf left
[22:09] *** dha left
[22:15] *** freeze left
[22:16] *** laouji left
[22:17] *** freeze joined
[22:19] *** dha joined
[22:23] *** bin_005 left
[22:23] *** nightfrog joined
[22:24] *** rurban left
[22:25] *** llfourn joined
[22:25] * TimToady & Glo wave from Olten and collapse into bed

[22:26] *** skids joined
[22:28] *** nightfrog left
[22:29] *** llfourn left
[22:35] *** nightfrog joined
[22:40] *** ab6tract joined
[22:49] <dha> Ok, I'm sure I'm missing something obvious, but if I run perl6 in the rakudo directory I built it in, it runs, but if I try to run it from anywhere else I get this error: 

[22:49] <dha> Unhandled exception: failed to load library 'dynext/libperl6_ops_moar.dylib'

[22:49] <dha>    at <unknown>:1  (/Users/dha/rakudo/perl6.moarvm:<dependencies+deserialize>:81)

[22:49] <dha> This is the sort of thing that makes one not want to set up new machines...

[22:50] <arnsholt> Yeah, it can be a bit confusing, but the rakudo/perl6 wrapper only works from rakudo/

[22:50] <skids> nine: in case you suspect any more Seq-of-Seqs sinking Seqs problems some possile locations to fix are in PR#502

[22:50] <arnsholt> From any other path, there's a different wrapper. IIRC it's rakudo/install/bin/perl6 if you use --gen-nqp

[22:52] <dha> Ah.

[22:52] <dha> Yep. that did it. Thanks.

[22:53] <dha> I probably did that on the other laptop, but totally forgot about it since. :-)

[23:02] *** RabidGravy left
[23:02] <YuviPanda> so

[23:02] <YuviPanda> what else do I need in https://github.com/yuvipanda/perl6-Ident-Client

[23:02] <YuviPanda> to put it in the ecosystem?

[23:04] <YuviPanda> I don't have an explicit module declaration but that's probably ok? it just provides a single class

[23:07] <dalek> perl6-roast-data: 74090a0 | coke++ | / (2 files):

[23:07] <dalek> perl6-roast-data: another glr run for today

[23:07] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/74090a0230

[23:13] *** jantore joined
[23:37] *** Sqirrel joined
[23:47] <dalek> doc: ae93030 | ab5tract++ | lib/Language/syntax.pod:

[23:47] <dalek> doc: Previous example does not compile

[23:47] <dalek> doc: review: https://github.com/perl6/doc/commit/ae93030aaa

[23:47] <dalek> doc: f8fa62a | ab5tract++ | lib/Language/operators.pod:

[23:47] <dalek> doc: fix a small typo

[23:47] <dalek> doc: review: https://github.com/perl6/doc/commit/f8fa62af39

[23:47] *** dha left
[23:47] *** frobisher joined
[23:48] *** frobisher is now known as dha

[23:56] *** Sqirrel left
