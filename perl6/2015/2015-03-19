[00:06] *** kurahaupo1 joined
[00:12] *** tinyblak joined
[00:17] *** cognominal left
[00:32] *** tinyblak left
[00:33] *** tinyblak joined
[00:41] *** wicope left
[00:50] *** yqt left
[00:51] *** telex left
[00:52] *** geekosaur left
[00:52] *** telex joined
[00:53] *** geekosaur joined
[00:53] *** laouji joined
[00:59] *** prime left
[01:15] *** skids joined
[01:27] *** synopsebot left
[01:27] *** broquaint left
[01:28] *** hugme left
[01:28] *** erdic left
[01:28] *** broquaint joined
[01:30] *** erdic joined
[01:33] *** synopsebot joined
[01:33] *** bayprogrammer left
[01:33] *** hugme joined
[01:33] *** ChanServ sets mode: +v hugme

[01:37] *** dayangkun joined
[01:44] *** tinyblak left
[01:45] *** tinyblak joined
[02:00] *** awwaiid left
[02:00] *** awwaiid joined
[02:12] *** tinyblak left
[02:12] *** zakharyas joined
[02:13] *** tinyblak joined
[02:17] *** tinyblak left
[02:24] *** tinyblak joined
[02:31] *** colomon left
[02:31] *** colomon joined
[02:44] *** ilbot3 left
[02:45] *** colomon left
[02:47] *** ilbot3 joined
[02:50] *** colomon joined
[02:55] *** osto left
[03:13] *** aborazmeh left
[03:13] *** dabockster left
[03:14] *** aborazmeh joined
[03:14] *** aborazmeh left
[03:14] *** aborazmeh joined
[03:14] *** noganex_ joined
[03:15] *** skids left
[03:17] *** prime joined
[03:17] *** noganex left
[03:26] *** zakharyas left
[03:41] *** djanatyn left
[03:43] *** aborazmeh left
[03:44] *** zakharyas joined
[03:45] *** aborazmeh joined
[03:45] *** aborazmeh left
[03:45] *** aborazmeh joined
[03:57] *** laouji_ joined
[03:59] *** laouji left
[04:00] *** freebie joined
[04:00] <freebie> Hey

[04:02] <freebie> *ping*

[04:04] *** freebie left
[04:05] *** Sqirrel left
[04:05] *** estrabd left
[04:06] *** laouji joined
[04:06] *** estrabd joined
[04:07] *** laouji_ left
[04:13] *** adu joined
[04:24] * TimToady back hoam

[04:25] <adu> who's back?

[04:31] *** Sqirrel joined
[04:49] *** ash_gti joined
[04:52] *** osto joined
[04:59] *** osto left
[05:00] *** molaf left
[05:02] *** grondilu joined
[05:02] <grondilu> hello, how do I test compilation on MoarVM?  I tried --target=mbc but I got a 'Cannot dump this object; no dump method' error.

[05:03] * grondilu would like to test a compilation issue reported on https://github.com/grondilu/libdigest-perl6/issues/7

[05:05] *** laouji left
[05:06] <grondilu> oh, I just had to specify the output file with --output apparently.

[05:06] *** ponbiki left
[05:10] *** kaleem joined
[05:12] *** BenGoldberg_ left
[05:14] *** nige joined
[05:18] <grondilu> not related, instead of "first-index", why not a :$index! form of first?

[05:18] <grondilu> m: say first-index * < 0.01, rand xx *

[05:18] <camelia> rakudo-moar b9d6d3: OUTPUT«21␤»

[05:19] <grondilu> m: say first * < 0.01, rand xx *, :index

[05:19] <camelia> rakudo-moar b9d6d3: OUTPUT«Unexpected named parameter 'index' passed␤  in sub first at src/gen/m-CORE.setting:2342␤  in block <unit> at /tmp/YzD0uD8pTM:1␤␤»

[05:20] *** kaleem left
[05:40] *** laouji joined
[05:45] *** laouji left
[05:51] *** aborazmeh left
[05:54] *** xinming left
[05:56] *** kaare_ left
[05:56] *** kurahaupo1 left
[05:56] *** yeahnoob joined
[06:03] *** diana_olhovik_ joined
[06:07] *** mr-foobar joined
[06:08] *** aborazmeh joined
[06:08] *** aborazmeh left
[06:08] *** aborazmeh joined
[06:18] *** aborazmeh left
[06:20] *** laouji joined
[06:24] *** dayangkun left
[06:26] *** diana_olhovik_ left
[06:32] *** ash_gti left
[06:33] *** rurban joined
[06:36] *** anaeem1_ joined
[06:40] *** anaeem1_ left
[06:41] *** anaeem1 joined
[06:45] *** anaeem1 left
[06:46] *** anaeem1 joined
[06:49] *** mr-foobar left
[06:50] *** ash_gti joined
[06:52] *** anaeem1 left
[06:53] *** anaeem1 joined
[06:53] *** anaeem1 left
[06:53] *** anaeem1 joined
[06:54] *** gfldex joined
[06:56] *** ponbiki joined
[06:57] *** ponbiki is now known as Guest3088

[06:58] *** cdc left
[07:01] *** anaeem1 left
[07:01] *** anaeem1_ joined
[07:01] *** anaeem1_ left
[07:02] *** anaeem1 joined
[07:02] *** diana_olhovik_ joined
[07:03] *** prime left
[07:06] *** anaeem1 left
[07:15] *** prime joined
[07:15] *** prime left
[07:15] *** prime joined
[07:29] *** zakharyas left
[07:29] *** rurban left
[07:30] *** rurban joined
[07:33] *** darutoko joined
[07:35] *** FROGGS joined
[07:38] *** yeahnoob left
[07:39] <FROGGS> TimToady: is 'hoam' a reference to MUC? :D

[07:41] <bartolin> good morning, #perl6

[07:41] <bartolin> could someone with a commit bit for rakudo please clean up my fiddling with SEQUENCE before todays release? (cmp. http://irclog.perlgeek.de/perl6/2015-03-17#i_10294496 and below)

[07:41] *** rurban1 joined
[07:41] <bartolin> (that would either mean to revert both commits 91a1b7a028 and cd51b3401c or check wether PR 389 is sane. in the fi

[07:41] <bartolin> rst case I would re-fudge the three tests for RT #80574

[07:41] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=80574

[07:42] <FROGGS> .tell grondilu look at this for inspiration: https://github.com/perl6/roast/blob/master/S10-packages/precompilation.t

[07:42] <yoleaux> FROGGS: I'll pass your message to grondilu.

[07:42] *** zakharyas joined
[07:43] *** nige left
[07:44] <dalek> rakudo/nom: 574541a | retupmoca++ | lib/NativeCall.pm:

[07:44] <dalek> rakudo/nom: Add 'is native(&find-lib)'

[07:44] <dalek> rakudo/nom: 

[07:44] <dalek> rakudo/nom: This gives us a way to find a native library at runtime, since find-lib

[07:44] <dalek> rakudo/nom: won't be called until the native function is used for the first time.

[07:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/574541a64c

[07:44] <dalek> rakudo/nom: 27685a0 | FROGGS++ | lib/NativeCall.pm:

[07:44] <dalek> rakudo/nom: Merge pull request #390 from retupmoca/nativetweak

[07:44] <dalek> rakudo/nom: 

[07:44] <dalek> rakudo/nom: Add 'is native(&find-lib)'

[07:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27685a03c3

[07:45] <FROGGS> bartolin: if I have some spare time I'll try to understand the issue

[07:45] <FROGGS> bartolin: but if you could outline it in a few lines, I'd be happy :o)

[07:47] <bartolin> FROGGS: basically, RT #80574 says that in some cases infix:<...> wrongly does not flatten its return values.

[07:47] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=80574

[07:48] <bartolin> FROGGS: I tried to fix this with cd51b3401c (more)

[07:48] *** kaleem joined
[07:49] <bartolin> FROGGS: but that was "too much" of flattening and broke a test in integration/advent2012-day04.t (I must have missed that when spectesting)

[07:50] <FROGGS> so I should look at cd51b3401c, revert it but attemp to find a similar fix?

[07:52] <bartolin> yes (that was the intention of PR 389). alternatively we could return to the previous state.

[07:52] <bartolin> redoing both my commits would probably be the fastest thing for now

[07:52] <bartolin> thanks a lot for looking at this!

[07:53] <FROGGS> redoing?

[07:53] <bartolin> erm, undoing :-)

[07:53] <FROGGS> ahh :o)

[07:53] <FROGGS> I've not much brain power anyway due to a cold

[07:53] <FROGGS> (I'm not quite ill or something, it just does not help :o)

[07:54] <bartolin> (a cold)--

[07:54] <FROGGS> yeah

[07:54] *** Ven joined
[07:55] *** CurtisOvidPoe joined
[07:57] *** yeahnoob joined
[07:58] *** Rounin joined
[08:01] *** Ven left
[08:02] *** gfldex left
[08:05] *** wicope joined
[08:11] *** Ven joined
[08:12] *** rindolf joined
[08:17] <[Tux]> OT: :( http://arxiv.org/abs/1502.07373 

[08:21] *** eli-se joined
[08:21] *** kaleem left
[08:21] *** brrt joined
[08:24] <brrt> what, nlpw is april 10th already? :-O

[08:25] *** eli-se left
[08:25] *** eli-se joined
[08:28] <[Tux]> yep

[08:28] <[Tux]> Inline::Perl5 is broken again on git-checkout

[08:28] <eli-se> hi

[08:29] <[Tux]> panic: MUTEX_LOCK

[08:29] <[Tux]> ok, restart passed

[08:31] *** abraxxa joined
[08:32] *** LonelyGM joined
[08:34] *** kaleem joined
[08:35] *** eli-se left
[08:35] <abraxxa> morning!

[08:35] *** fhelmberger joined
[08:35] <LonelyGM> good morning everyoneee :)

[08:36] <brrt> morning

[08:38] * lizmat hopes it is a good day for a release

[08:38] <lizmat> rakudo builds and tests fine on MoarVM 2015.03, fwiw

[08:41] <abraxxa> when i want to pass a Rat as float to a C library with nativecall, how do I do that?

[08:42] <DrForr> TODAY IS A GOOD DAY TO DIE :)

[08:42] <lizmat> .oO( to pass a Rat to a C library as a float, you need to num them )

[08:42] <moritz> abraxxa: .Num

[08:43] *** kaare_ joined
[08:43] <lizmat> moritz: not native num ?

[08:43] <abraxxa> Unhandled exception: Cannot unbox a type object

[08:43] <moritz> m: say (1/3).Num.^name

[08:43] <camelia> rakudo-moar 27685a: OUTPUT«Num␤»

[08:43] <FROGGS> lizmat: a Num can unbox to a num

[08:44] <abraxxa> the interessting fact is that the value can be a utf-8 encoded string as well as an int or a float

[08:44] <abraxxa> https://docs.oracle.com/database/121/LNOCI/oci16rel003.htm#LNOCI72805

[08:44] <moritz> lizmat: I don't think we have direct coercion to num in place, do we?

[08:44] <abraxxa> valuep

[08:44] <abraxxa> i've currently defined it as OraText             $valuep is rw is encoded('utf8'),

[08:44] <abraxxa> constant OraText = Str

[08:44] <lizmat> moritz: indeed, I thought we had

[08:45] <abraxxa> the weird thing is, the test with 4.85 succeeds, the one with 1.2 doesn't

[08:46] <abraxxa> .Num.Str makes the value 1.2 fail as well

[08:46] <FROGGS> abraxxa: if you pass a Str (which implies pointer because it is char* in C), remove the 'is rw'

[08:47] <abraxxa> FROGGS: already awake?

[08:47] <FROGGS> I am :o)

[08:47] <abraxxa> that makes the test with 1.2 fail as well

[08:48] <FROGGS> 1.2 is a value you pass?

[08:48] <abraxxa> although i'm quite sure it succeeding was an accident or inserted something else

[08:48] <abraxxa> yeah, see 99-common.t

[08:48] <FROGGS> url?

[08:49] <abraxxa> this is the test in question https://github.com/abraxxa/DBIish/blob/master/t/99-common.pl6#L94

[08:49] <abraxxa> it would be better to specify the c lib param type agnostic

[08:50] <abraxxa> the OCI docs say void because of this

[08:50] *** alini joined
[08:50] <abraxxa> is there something like multi...how is it called?

[08:51] <FROGGS> multi method dispatch?

[08:51] <abraxxa> yeah!

[08:51] <FROGGS> there is

[08:51] <abraxxa> so a different param definition is used depending on the type passed

[08:51] <FROGGS> you can do that, yes

[08:51] <abraxxa> how?

[08:52] <moritz> m: multi sub f(Str $x) { say "Str $x" }; multi sub f(Int $x) { say "Int $x" }; f 1

[08:52] <camelia> rakudo-moar 27685a: OUTPUT«Int 1␤»

[08:52] <moritz> m: multi sub f(Str $x) { say "Str $x" }; multi sub f(Int $x) { say "Int $x" }; f 'a string'

[08:52] <camelia> rakudo-moar 27685a: OUTPUT«Str a string␤»

[08:52] * abraxxa tries

[08:52] <FROGGS> and within these subs you call a specific nativecall sub

[08:52] *** brrt left
[08:53] <FROGGS> so you have to declare nativecall subs for every type you expect

[08:55] <FROGGS> abraxxa: in the execute method you dont use @params in the version I see here: https://github.com/abraxxa/DBIish/blob/master/lib/DBDish/Oracle.pm6

[08:56] <abraxxa> damn unboxing error!

[08:57] <FROGGS> I might be able to help if I'd see your code

[08:57] *** nige joined
[08:57] <dalek> roast: 49ba10e | lizmat++ | S02-literals/adverbs.t:

[08:57] <dalek> roast: Fudge test on JVM by skipping

[08:57] <dalek> roast: 

[08:57] <dalek> roast: This test apparently breaks because Test::is() doesn't take Mu

[08:57] <dalek> roast: review: https://github.com/perl6/roast/commit/49ba10ea1f

[08:57] <dalek> roast: 67def95 | lizmat++ | S02-types/ (2 files):

[08:57] <dalek> roast: Unfudge some now fixed bag/mix issues on JVM

[08:57] <dalek> roast: review: https://github.com/perl6/roast/commit/67def959a0

[08:58] <abraxxa> Unhandled exception: Cannot unbox a type object

[08:59] *** adu left
[08:59] <FROGGS> yes, you cannot unbox a type object

[08:59] <abraxxa> i don't understand what that means

[08:59] <abraxxa> and it doesn't point to the line in my code

[08:59] <FROGGS> a type object is an undefined thing... and you cannot pull a value out of that

[09:00] <FROGGS> so you are passing an undefined thing around, where you intended to pass a value around (an object instance of a type)

[09:00] <abraxxa> hm...i have an undeclared variable and perl doesn't blame me

[09:01] <FROGGS> [Coke]: do you get a chance to push to perl6-roast-data and rakudo-star-daily?

[09:01] <FROGGS> abraxxa: well, this could be intentional...

[09:01] <FROGGS> m: sub foo(Int $a) { say $a }; foo(Int)

[09:01] <camelia> rakudo-moar 27685a: OUTPUT«(Int)␤»

[09:01] <FROGGS> -----------------------^ type object

[09:01] <abraxxa> when i pass an int or a float, is the lenght always static?

[09:02] <FROGGS> m: sub foo(Int $a) { say $a }; foo(42)

[09:02] <camelia> rakudo-moar 27685a: OUTPUT«42␤»

[09:02] <FROGGS> -----------------------^ value

[09:02] <abraxxa> could i define the value of that param in the multisub definition instead of passing it in?

[09:02] <FROGGS> m: sub foo(Int:D $a) { say $a }; foo(Int) # disallow type objects explicitly

[09:02] <camelia> rakudo-moar 27685a: OUTPUT«Parameter '$a' requires an instance, but a type object was passed␤  in sub foo at /tmp/CWiwrLAyJn:1␤  in block <unit> at /tmp/CWiwrLAyJn:1␤␤»

[09:02] <FROGGS> abraxxa: I dont understand your question.... can you gist your code?

[09:05] <abraxxa> FROGGS: https://gist.github.com/abraxxa/c0f5cf283a90e143c286

[09:05] <abraxxa> the only difference in the OCIBindByName definition is $valuep

[09:05] <abraxxa> in $dty I need to pass in a different value to tell OCI the datatype

[09:06] <FROGGS> abraxxa: that feels wrong: https://gist.github.com/abraxxa/c0f5cf283a90e143c286#file-oracle-pm6-L29

[09:06] <abraxxa> i tried 'is rw' too

[09:07] <FROGGS> 1) C does not handle Int (big integers), use int8, int16, int32, long or longlong

[09:07] <dalek> roast: 91f3c43 | lizmat++ | S06-other/pairs-as-lvalues.t:

[09:07] <dalek> roast: Skip rather than todo failing test on JVM

[09:07] <dalek> roast: review: https://github.com/perl6/roast/commit/91f3c43a23

[09:07] <dalek> roast: 43f8d23 | lizmat++ | integration/weird-errors.t:

[09:07] <dalek> roast: Unfudge passing test on JVM

[09:07] <dalek> roast: review: https://github.com/perl6/roast/commit/43f8d23247

[09:07] <FROGGS> 2) you are meant to pass an pointer to an integer type... so add 'is rw' or declare the param to be a Pointer

[09:08] <abraxxa> makes sense

[09:08] <lizmat> FROGGS: I only have 2 S17 flappers in my JVM spectest now

[09:08] <abraxxa> the question now is: how do I find out what C datatype OCI expects for SQLT_INT and SQLT_FLT

[09:11] *** eli-se joined
[09:11] *** daxim left
[09:11] <FROGGS> abraxxa: grep in its header files

[09:11] *** eli-se left
[09:11] <FROGGS> abraxxa: it must be typedef'd or defined somewhere

[09:12] <FROGGS> lizmat: that sounds awesome :o)

[09:12] <FROGGS> I'll later run spectests on linux and windows, and star module tests und probably also an ecosystem smoke

[09:13] <FROGGS> the ecosystem smoke on linux only I guess... otherwise there would not be a release today :o)

[09:15] *** daxim joined
[09:15] <FROGGS> abraxxa: https://docs.oracle.com/database/121/LNOCI/oci03typ.htm#LNOCI16271

[09:16] <abraxxa> FROGGS: AH, thanks!!!

[09:17] <abraxxa> so for int i'll use long long to be safe

[09:18] <FROGGS> you dont want to be safe, you want to be correct

[09:18] <FROGGS> you have to look at the definition of the C function you call

[09:19] *** larion joined
[09:19] *** tinyblak left
[09:21] *** tinyblak joined
[09:23] <dalek> roast: f794661 | lizmat++ | S32-basics/xxPOS-native.t:

[09:23] <dalek> roast: Add some AT-POS & friends tests on native arrays

[09:23] <dalek> roast: review: https://github.com/perl6/roast/commit/f794661a42

[09:24] <Ulti> FROGGS from parsing the .h files do you think it's possible to have use library:from<C> ? I guess it gets complicated with the inclusion of all the other headers

[09:25] <dalek> rakudo/nom: 971c090 | lizmat++ | t/spectest.data:

[09:25] <dalek> rakudo/nom: Add some AT-POS & friends tests on native arrays

[09:25] <dalek> rakudo/nom: 

[09:25] <dalek> rakudo/nom: Moar only!

[09:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/971c0906f2

[09:26] *** dakkar joined
[09:26] <lizmat> afk for a few hours

[09:26] <Ulti> I guess the place to start is a script which produces the code you would write by hand since even if it doesn't work properly it gives you a nice place to start instead of a blank file

[09:27] * Ulti is tempted to have a play at doing that... lots of C libraries I'd want to wrap for bioinformatics stuff

[09:28] *** LonelyGM left
[09:28] *** kaleem left
[09:30] <Ven> o/, #perl6

[09:31] <abraxxa> FROGGS: sure, but the link you pasted shows multiple C datatypes for SQLT_INT

[09:32] <FROGGS> abraxxa: yes, but is SQLT_INT used in a C function you have to call?

[09:32] *** yeahnoob left
[09:32] <FROGGS> I'd guess not

[09:32] <abraxxa> i pass that constant in $dty

[09:33] *** nige left
[09:33] <FROGGS> so you are passing a '3' for all integer types, right?

[09:33] *** nige joined
[09:33] <abraxxa> yes

[09:34] <FROGGS> and where do you want to pass a longlong like you said?

[09:34] <abraxxa> FROGGS: https://gist.github.com/abraxxa/c0f5cf283a90e143c286#file-oracle-pm6-L83

[09:36] <FROGGS> and what is SQLT_INT?

[09:36] <FROGGS> it is not defined in the gist

[09:36] <FROGGS> I mean, the declaration is not in the gist visible

[09:37] <abraxxa> now it is

[09:37] <FROGGS> ahh, yes

[09:37] <FROGGS> that looks good

[09:37] <FROGGS> and the longlong your were talking about is about valuep?

[09:37] <abraxxa> yes

[09:37] <abraxxa> for the multidispatch

[09:38] <abraxxa> what was the name of the function that returns the lenght of a native type?

[09:38] <FROGGS> nativesizeof

[09:38] <abraxxa> i can't find it in the zavolaj commit history

[09:39] <abraxxa> that 'Cannot unbox a type object' error makes me crazy!

[09:39] <moritz> zavolaj is dead, long live rakudo

[09:39] <abraxxa> i was told it still is developed in the separate git repo

[09:40] *** zjmarlow joined
[09:41] <FROGGS> that's not true

[09:41] <nwc10> it's no longer true. I think it was true 6 weeks ago.

[09:42] <nwc10> "this week" for some value of week.

[09:42] <FROGGS> the development in zavolaj stopped at the same day I moved it to rakudo

[09:43] <FROGGS> its issue tracker is still alive though

[09:45] *** rurban1 left
[09:46] *** brrt joined
[09:48] <abraxxa> update the readme?

[09:48] *** rurban1 joined
[09:49] <abraxxa> so where do I find it?

[09:49] <abraxxa> I can't find a link to the git repo on perl6.org nor rakudo.org

[09:50] <FROGGS> abraxxa: https://github.com/rakudo/rakudo/blob/nom/lib/NativeCall.pm

[09:50] <abraxxa> ah, it's not in the perl6 org

[09:50] <FROGGS> it is *in* the rakudo repo, and gets shipped with the compiler

[09:50] <abraxxa> i didn't find the rakudo repo

[09:50] <FROGGS> its documentation is here, but lacks some areas: http://doc.perl6.org/language/nativecall

[09:51] <abraxxa> so instead of defining sb4 $value_sz, ub2 $dty, in the multi sub, can I assign values to it directly?

[09:51] <abraxxa> maybe as default value?

[09:51] <FROGGS> you can only give them defaults if these are the last params

[09:52] <FROGGS> params in the middle never can be optional

[09:52] <abraxxa> you're right

[09:52] <FROGGS> but you can create a wrapper sub, that generates the flags depending on the type

[09:52] <abraxxa> i just don't like having multisub AND the if/elsif/else for the type handling

[09:53] <abraxxa> so $value_sz = nativesizeof($v); should be the correct thing to pass for ints and floats?

[09:53] <abraxxa> now how do I find out where that 'Cannot unbox a type object' comes from?

[09:54] <FROGGS> so $value_sz = nativesizeof($v); # yes, seems so

[09:55] *** brrt left
[09:55] <FROGGS> abraxxa: can you gist your error message?

[09:55] <abraxxa> i've defined $value_sz as sb4 (int16), what datatype does nativesizeof return?

[09:55] <FROGGS> nativesizeof returns a numeric value

[09:55] <abraxxa> i've added it to the end of the current gist

[09:56] *** espadrine joined
[09:56] <FROGGS> and that can be passes as an sb4 (int32), yes

[09:56] *** telex left
[09:56] <abraxxa> yeah, sb4 is int32, sorry

[09:58] <FROGGS> what does this give you?  perl6 --ll-exception -Ilib t/45-oracle-common.t

[09:58] *** telex joined
[09:59] <abraxxa> Invalid typename 'float' in parameter declaration.

[09:59] <abraxxa> and a long stacktrace

[10:00] <abraxxa> float doesn't seem to be a recognized type

[10:00] <FROGGS> float is num32

[10:01] <abraxxa> that did it, thanks

[10:01] <abraxxa> Undeclared routine:

[10:01] <abraxxa>     nativesizeof used at lines 393, 398

[10:01] <abraxxa> isn't it part of 2015.02?

[10:01] <grondilu> you need to use NativeCall

[10:01] <yoleaux> 07:42Z <FROGGS> grondilu: look at this for inspiration: https://github.com/perl6/roast/blob/master/S10-packages/precompilation.t

[10:01] <abraxxa> grondilu: I already do

[10:01] <grondilu> oh, my bad

[10:01] <abraxxa> i'll hardcode the sizes for now

[10:01] <moritz> star-m: use NativeCall; say nativesizeof(num32)

[10:01] <camelia> star-m 2015.02: OUTPUT«5===SORRY!5=== Error while compiling /tmp/UuqNjxOtPc␤Undeclared routine:␤    nativesizeof used at line 1␤␤»

[10:01] <moritz> m: use NativeCall; say nativesizeof(num32)

[10:01] <camelia> rakudo-moar 971c09: OUTPUT«4␤»

[10:02] <moritz> nope, 2015.02 is TOO OLD

[10:02] <FROGGS> abraxxa: it might have landed after the 2014.02 release :/

[10:02] <FROGGS> err, 2015.02

[10:03] <abraxxa> ok

[10:03] <dalek> rakudo/nom: 3d6a731 | moritz++ | docs/ChangeLog:

[10:03] <dalek> rakudo/nom: mention nativesizeof function in changelog

[10:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3d6a731a1d

[10:04] <abraxxa> which bot runs the newest moar version?

[10:04] <moritz> camelia

[10:04] <moritz> (with 'm:'; 'star-m:' uses the last star release)

[10:05] <abraxxa> camelia: use NativeCall; say nativesizeof(num32)

[10:05] <abraxxa> m: use NativeCall; say nativesizeof(num32)

[10:05] <camelia> rakudo-moar 971c09: OUTPUT«4␤»

[10:06] <abraxxa> m: use NativeCall; say nativesizeof(long)

[10:06] <camelia> rakudo-moar 971c09: OUTPUT«8␤»

[10:06] <abraxxa> an integer is longer than a float?

[10:06] <moritz> why not?

[10:06] <moritz> : use NativeCall; say nativesizeof(Num)

[10:06] <moritz> m: use NativeCall; say nativesizeof(Num)

[10:06] <camelia> rakudo-moar 971c09: OUTPUT«NativeCall op sizeof expected type with CPointer, CStruct, CArray, P6int or P6num representation, but got a P6opaque␤  in sub nativesizeof at lib/NativeCall.pm:423␤  in block <unit> at /tmp/7dRSJQ48gb:1␤␤»

[10:06] <abraxxa> because a float has more precision?

[10:07] <moritz> m: use NativeCall; say nativesizeof(num)

[10:07] <camelia> rakudo-moar 971c09: OUTPUT«8␤»

[10:07] <moritz> abraxxa: apples and oranges comparison

[10:07] <abraxxa> Cannot call 'OCIBindByName'; none of these signatures match

[10:07] <abraxxa> how should one handle such exceptions at runtime?

[10:09] <moritz> with try

[10:09] <moritz> or if it's a bug in the parameter lists, fix those

[10:10] *** anaeem1 joined
[10:10] <abraxxa> i now use long for ints and num32 for floats, still something doesn't match

[10:10] *** zakharyas left
[10:10] <abraxxa> i guess I should use the same types for the if tree matching

[10:10] <abraxxa> not Int and Rat

[10:11] *** tinyblak left
[10:11] *** tinyblak joined
[10:12] *** tinyblak_ joined
[10:15] *** Foxcool_ left
[10:15] *** Foxcool_ joined
[10:16] *** Foxcool_ left
[10:16] *** Foxcool joined
[10:16] *** tinyblak left
[10:16] <colomon> m: my num32 $f = 321513413321332; say $f

[10:16] <camelia> rakudo-moar 3d6a73: OUTPUT«This type cannot unbox to a native number␤  in block <unit> at /tmp/tIMev4ToQh:1␤␤»

[10:16] <abraxxa> the Str multisub doesn't match

[10:16] <colomon> m: my num32 $f = 321513413321332e0; say $f

[10:16] <camelia> rakudo-moar 3d6a73: OUTPUT«-89209344␤»

[10:18] <FROGGS> m: my num32() $f = 321513413321332; say $f

[10:18] <camelia> rakudo-moar 3d6a73: OUTPUT«5===SORRY!5=== Error while compiling /tmp/o9IjMjfg1o␤num32() cannot be used as a nominal type on a variable␤at /tmp/o9IjMjfg1o:1␤------> 3my num32() $f7⏏5 = 321513413321332; say $f␤    expecting any of:␤        constraint␤»

[10:18] <FROGGS> :/

[10:19] *** tinyblak_ left
[10:20] <abraxxa> what is wrong when a var that returns true for $v ~~ Str can't be used in a say "$v"; because it triggers Cannot unbox a type object

[10:20] <FROGGS> m: sub foo( num() $f ) { say $f }; foo 321513413321332

[10:20] <camelia> rakudo-moar 3d6a73: OUTPUT«No such method 'num' for invocant of type 'Int'␤  in sub foo at /tmp/HaoHfw7MX3:1␤  in block <unit> at /tmp/HaoHfw7MX3:1␤␤»

[10:20] <FROGGS> m: sub foo( num32() $f ) { say $f }; foo 321513413321332

[10:20] <camelia> rakudo-moar 3d6a73: OUTPUT«No such method 'num32' for invocant of type 'Int'␤  in sub foo at /tmp/9um84wnUcR:1␤  in block <unit> at /tmp/9um84wnUcR:1␤␤»

[10:20] <abraxxa> m: my Str $v = 'TAFM'; say "$v";

[10:20] <camelia> rakudo-moar 3d6a73: OUTPUT«TAFM␤»

[10:21] *** koo6 left
[10:21] <FROGGS> m: my Str $v; say $v ~~ Str; say "$v";

[10:21] <camelia> rakudo-moar 3d6a73: OUTPUT«True␤use of uninitialized value $v of type Str in string context  in block <unit> at /tmp/fGq84xqL9h:1␤␤␤»

[10:21] <FROGGS> this

[10:21] <abraxxa> doh! does the match change the value?

[10:21] <abraxxa> autocasting?

[10:22] <FROGGS> no, such a match does not change anything

[10:22] <FROGGS> $v seems to uninitialized on your end

[10:24] <abraxxa> then it shouldn't match!

[10:24] <FROGGS> abraxxa: and undefined string is still a string

[10:24] <FROGGS> that is what types are for

[10:25] <psch> \o

[10:25] *** Ven left
[10:25] <FROGGS> m: say Str ~~ Str

[10:25] <camelia> rakudo-moar 3d6a73: OUTPUT«True␤»

[10:25] <psch> abraxxa: you can match against a signatre

[10:25] <psch> *signature

[10:25] <psch> ...i thought

[10:26] <psch> but i can't seem to get a working example

[10:26] <psch> point being, that in a signature you get the definedness smileys

[10:26] <psch> m: my Str $x; say $x ~~ :(Str:D $); $x = "foo"; say $x ~~ :(Str:D $) # was expected 'True' for the second one

[10:26] <camelia> rakudo-moar 3d6a73: OUTPUT«False␤False␤»

[10:27] <psch> but if it's only about definedness, .defined is likely smarter :p

[10:27] <moritz> m: say \(1) ~~ :(Str:D)

[10:27] <camelia> rakudo-moar 3d6a73: OUTPUT«False␤»

[10:27] <moritz> m: say \(1) ~~ :(Int:D)

[10:27] <camelia> rakudo-moar 3d6a73: OUTPUT«True␤»

[10:27] <psch> moritz: oh, lhs has to be a capture, thanks

[10:27] <moritz> psch: that might help, yes :-)

[10:27] <abraxxa> perl6 --ll-exception reports 'missing semicolon', without that i get Cannot unbox a type object

[10:31] <abraxxa> is there a syntax to print $v.gist inside quotes?

[10:31] *** pecastro joined
[10:33] <moritz> $v.gist()

[10:33] <abraxxa> thanks

[10:33] <moritz> lizmat: fwiw j-spectest is clean here (linux), moarvm has a flapper

[10:34] <abraxxa> why does $v.gist() return the value and not the type?

[10:35] <abraxxa> .WHAT() returns ''

[10:35] <psch> m: my Str $x = "foo"; say "$x.WHAT()"

[10:35] <camelia> rakudo-moar 3d6a73: OUTPUT«use of uninitialized value of type Str in string context  in block <unit> at /tmp/omepB9cXSJ:1␤␤␤»

[10:36] <psch> m: my Str $x = "foo"; say "$x.^name()"

[10:36] <camelia> rakudo-moar 3d6a73: OUTPUT«Str␤»

[10:36] <moritz> abraxxa: .WHAT returns the type object, not the type name

[10:36] <moritz> abraxxa: use .^name() to get the type name

[10:36] <abraxxa> i've updated my gist

[10:36] <abraxxa> that returns Str, still the multisub doesn't match

[10:38] <abraxxa> lunch!

[10:39] <zjmarlow> Hello.  I get a StackOverflowError when trying to run Configure.pl.  Is there a way to pass options to java?

[10:44] *** anaeem1 left
[10:44] *** anaeem1_ joined
[10:53] *** zjmarlow_ joined
[10:55] <psch> zjmarlow_: no, we don't have that as far as i can see.  we're setting -Xss1m internally, which was sufficient for known configurations

[10:56] <psch> FROGGS: what hardware did you run on to get 1m for -Xss?

[10:56] *** zjmarlow left
[10:57] *** zjmarlow_ left
[10:57] *** zjmarlow_ joined
[11:00] *** kaleem joined
[11:01] <abraxxa> FROGGS: any idea why the multisub doesn't match?

[11:01] <abraxxa> the gist is up2date

[11:02] <abraxxa> maybe it doesn't match because of another param type mismatch...

[11:02] <abraxxa> can we improve the error message in that regard?

[11:03] <psch> abraxxa: which gist?  c0f5cf283a90e143c286?

[11:04] <psch> zjmarlow_: you can manually set -Xss in nqp/tools/build/install-jvm-runner.pl

[11:05] <abraxxa> yes

[11:07] <psch> abraxxa: multi dispatch error should tell you what params are defined and what it got instead

[11:07] <psch> m: multi f(Str $, Int $) { }; multi f(Int $, Str $) { }; f("foo", "bar")

[11:07] <camelia> rakudo-moar 3d6a73: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sqsB8zE0FP␤Calling 'f' will never work with argument types (Str, Str)␤    Expected any of: ␤    :(Str $, Int $) ␤    :(Int $, Str $)␤at /tmp/sqsB8zE0FP:1␤------> 3 Int $) { }; multi f(Int $, Str $)…»

[11:08] <psch> oh, except maybe trait_mod:<is> pushes that to runtime?

[11:08] <abraxxa> i only see the defiitions, not what it got

[11:08] <abraxxa> the error is now at the end of the gist

[11:10] <psch> hm

[11:10] <FROGGS> m: say CArray[OpaquePointer] ~~ CArray[OpaquePointer]

[11:10] <camelia> rakudo-moar 3d6a73: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lgYZOO5TlY␤Undeclared names:␤    CArray used at line 1. Did you mean 'Array', 'array'?␤    OpaquePointer used at line 1␤␤»

[11:10] <FROGGS> m: use NativeCall; say CArray[OpaquePointer] ~~ CArray[OpaquePointer]

[11:10] <camelia> rakudo-moar 3d6a73: OUTPUT«False␤»

[11:10] <FROGGS> m: use NativeCall; say CArray[OpaquePointer] ~~ CArray

[11:10] <camelia> rakudo-moar 3d6a73: OUTPUT«True␤»

[11:10] *** alini left
[11:11] <FROGGS> abraxxa: can you change your multi declarations to CArray instead of TypedCArray[OpaquePointer]?

[11:11] <FROGGS> abraxxa: but only the sub declarations, nothing else

[11:12] <dalek> roast: b6dc271 | peschwa++ | S32-exceptions/misc.t:

[11:12] <dalek> roast: Add test for RT #114430.

[11:12] <dalek> roast: review: https://github.com/perl6/roast/commit/b6dc271da4

[11:12] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=114430

[11:12] <abraxxa> FROGGS: i have CArray[OCIBind]     $bindpp, because OCIBind             $bindpp is rw, doesn't work in 2015.02

[11:13] <abraxxa> FROGGS: still no match

[11:17] <abraxxa> can i use some NativeCall function to convert Str, long and num32 to the binary representation instead of using multidispatch

[11:24] <FROGGS> abraxxa: using Str, long or num32 *is* your way of specifying the binary representation

[11:25] <FROGGS> abraxxa: if you have CArray[sonmthing] in a sub declaration, then please change that to CArray like i just said

[11:25] <abraxxa> FROGGS: already did that

[11:25] *** coffee` joined
[11:25] <abraxxa> i'm now checking all the other params

[11:26] <abraxxa> i guess it auto casts one or some of them without multi dispatch but fails now

[11:26] *** alini joined
[11:26] <abraxxa> or can i specify a default match sub?

[11:26] <FROGGS> what is a match sub?

[11:26] <abraxxa> sorry, multi sub

[11:27] <abraxxa> i pass 0 for three params that are defined as ub2, ub2 and ub4, is that a problem?

[11:27] <FROGGS> that's the core of multi subs... it looks for the most specific and matching signature for the call you do

[11:27] <abraxxa> can, should I define a type for constants?

[11:28] <FROGGS> so if you have 'sub foo(Int)' and 'sub foo(Any)', the former will be called for ints and the latter for anything else

[11:28] <abraxxa> sure

[11:28] <abraxxa> but it's quite harder with multiple params

[11:29] <FROGGS> abraxxa: I dont think this is a problem... but you might not want to pass a literal 0 but a variable containing 0

[11:29] <abraxxa> my naive guess is that the three 0's and/or the constant which lack a type definition cause it to not match

[11:29] <FROGGS> abraxxa: because the C function is allowed to change the value of these variables in case the param is 'is rw'

[11:29] *** koo6 joined
[11:30] <abraxxa> YES!

[11:30] <abraxxa> that fixed it

[11:30] <abraxxa> the three 0

[11:30] <abraxxa> ah, no

[11:30] <FROGGS> :/

[11:31] <abraxxa> can i define a type for the constant too?

[11:31] <abraxxa> when I pass a variable of type ub4 and the value 0 instead of OCI_DEFAULT it matches

[11:32] <abraxxa> but it fails with Cannot invoke object with invocation handler in this context

[11:32] <FROGGS> m: my int32 constant a = 42

[11:32] <camelia> rakudo-moar 3d6a73: ( no output )

[11:32] <abraxxa> back to no signature match

[11:33] <FROGGS> abraxxa: can you push all your local changes to a dev branch?

[11:33] <abraxxa> sure

[11:33] <FROGGS> and... I guess I'd need to install some pkg?

[11:33] <FROGGS> I'm ubuntu

[11:34] <abraxxa> Oracle InstantClient and Oracle XE

[11:34] <abraxxa> i'm using https://registry.hub.docker.com/u/wnameless/oracle-xe-11g/

[11:34] <abraxxa> and http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html

[11:34] <abraxxa> you need basic + sdk

[11:34] <FROGGS> ewww

[11:34] <FROGGS> that sounds like a lot

[11:35] <abraxxa> which Ubuntu version?

[11:35] <FROGGS> 14.04

[11:35] <abraxxa> the instantclient is easy, just unzip two files and set env vars

[11:35] <abraxxa> i'm on 14.10 64bit

[11:35] <abraxxa> i think it would be easier to get rid of multidispatch

[11:38] <timotimo> couldn't you put a proto up for the multi that'd print .perl the capture?

[11:38] <abraxxa> how do i specify default values?

[11:38] <abraxxa> then i could get rid of passing the last four params

[11:39] <FROGGS> like an assignment after all traits

[11:41] <abraxxa> Cannot use 'is rw' on an optional parameter

[11:41] <FROGGS> hmmm, docker is not available as a debian package?

[11:41] <abraxxa> it is for 14.10

[11:41] <abraxxa> as ubuntu package

[11:41] *** xfix joined
[11:41] *** muraiki joined
[11:41] <FROGGS> abraxxa: right, like you cannot pass integer constant to is rw params

[11:41] <abraxxa> called docker.io in 14.10

[11:42] *** Ziemniak left
[11:42] *** muraiki left
[11:44] <abraxxa> Cannot unbox a type object again

[11:45] <abraxxa> ub4                 $mode = OCI_DEFAULT, caused it

[11:45] <FROGGS> okay, I'm not going to mess with my $work system now... but can you please push to a dev branch so I can look at the code?

[11:45] <abraxxa> even if I define my ub4 constant OCI_DEFAULT = 0;

[11:46] *** cognominal joined
[11:46] <abraxxa> FROGGS: pushed

[11:47] <abraxxa> FROGGS: https://github.com/abraxxa/DBIish/blob/master/lib/DBDish/Oracle.pm6

[11:50] *** laouji left
[11:50] *** laouji joined
[11:51] <abraxxa> FROGGS++ # thanks for your efforts and help!

[11:52] <FROGGS> I think one issue is that the 'is rw' which implied pointer is not in 2015.02... I think we found that out yesterday

[11:52] <FROGGS> so, it might make sense to continue with 2015.03

[11:53] <FROGGS> I have to do some more $dayjob and then I'll focus on the release

[11:53] *** laouji_ joined
[11:53] *** laouji_ left
[11:54] *** laouji left
[11:55] *** laouji joined
[11:55] <abraxxa> so it is valid syntax but has no effect?

[11:55] *** eli-se joined
[11:55] *** eli-se_ joined
[11:55] *** eli-se_ left
[11:55] <eli-se> hey

[11:56] <psch> o/ eli-se 

[11:56] <FROGGS> abraxxa: for nativecall subs it has not effect, correct

[11:56] <FROGGS> hi eli-se 

[11:56] *** rurban1 left
[11:56] <abraxxa> FROGGS: got it

[11:56] <abraxxa> fine for me

[11:57] *** eli-se left
[11:59] *** eli-se joined
[12:09] *** itz_ joined
[12:11] *** itz left
[12:14] *** itz joined
[12:14] <rjbs> Got email this morning:

[12:14] <rjbs> Dear Perl,

[12:14] <rjbs> You have not paid for driving on a toll road. 

[12:15] <rjbs> "Perl" is ambiguous, but I haven't been driving Perl, so I'm sending the ticket to you folks.

[12:16] <timotimo> wat %)

[12:16] <eli-se> Perl is great!

[12:17] *** itz_ left
[12:17] *** eli-se left
[12:17] *** lichtkind_ joined
[12:18] <BinGOs> rjbs++

[12:20] *** Ven joined
[12:21] *** pecastro left
[12:21] *** lichtkind left
[12:22] <FROGGS> :P

[12:23] *** pecastro joined
[12:34] <itz> I think the driving ticket was addressed to perl 4

[12:36] *** rurban left
[12:39] *** kaleem left
[12:40] <dalek> rakudo/no-linenoise: e13cbf5 | hoelzro++ | src/Perl6/Compiler.nqp:

[12:40] <dalek> rakudo/no-linenoise: Use Linenoise for the REPL if it's available

[12:40] <dalek> rakudo/no-linenoise: review: https://github.com/rakudo/rakudo/commit/e13cbf5fa1

[12:42] <dalek> rakudo/completion: 59a6d3d | hoelzro++ | / (2 files):

[12:42] <dalek> rakudo/completion: Add rudimentary tab completion

[12:42] <dalek> rakudo/completion: review: https://github.com/rakudo/rakudo/commit/59a6d3df6e

[12:46] *** anaeem1_ left
[12:46] *** anaeem1 joined
[12:46] <tadzik> \o/

[12:46] *** anaeem1 left
[12:46] *** rurban joined
[12:47] <psch> hoelzro++

[12:47] *** anaeem1_ joined
[12:47] *** rurban1 joined
[12:47] *** anaeem1_ left
[12:48] *** anaeem1_ joined
[12:52] *** anaeem1_ left
[12:53] <itz> hoelzro++

[12:56] *** spider-mario joined
[12:56] <dalek> rakudo-star-daily: 528c0c6 | coke++ | log/ (9 files):

[12:56] <dalek> rakudo-star-daily: today (automated commit)

[12:56] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/528c0c638d

[12:56] <dalek> perl6-roast-data: b7abe1c | coke++ | / (9 files):

[12:56] <dalek> perl6-roast-data: today (automated commit)

[12:56] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b7abe1c120

[13:04] <[Coke]> (perl 4) Dammit, grandpa, not letting you borrow the car anymore.

[13:09] *** tinyblak joined
[13:09] *** tinyblak left
[13:10] <dalek> perl6-most-wanted: f5a3277 | (Tom Browder)++ | most-wanted/modules.md:

[13:10] <dalek> perl6-most-wanted: put Numerical group in alphabetical order

[13:10] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/f5a327779f

[13:10] <dalek> perl6-most-wanted: f587fe7 | (Tom Browder)++ | most-wanted/modules.md:

[13:10] <dalek> perl6-most-wanted: add WIP location

[13:10] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/f587fe7422

[13:10] <dalek> perl6-most-wanted: 22dacef | (Tom Browder)++ | most-wanted/modules.md:

[13:10] <dalek> perl6-most-wanted: use same format as others on list

[13:10] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/22daceffb5

[13:10] <dalek> perl6-most-wanted: 451968f | (Tom Browder)++ | most-wanted/modules.md:

[13:10] <dalek> perl6-most-wanted: add module needed for Geo::Ellipsoid

[13:10] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/451968f97c

[13:10] <dalek> perl6-most-wanted: e9cb6c8 | colomon++ | most-wanted/modules.md:

[13:10] <dalek> perl6-most-wanted: Merge pull request #3 from tbrowder/master

[13:10] <dalek> perl6-most-wanted: 

[13:10] <dalek> perl6-most-wanted: Add new module, modify list and module info

[13:10] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/e9cb6c8f7d

[13:11] *** tinyblak joined
[13:27] *** laouji left
[13:30] *** anaeem1 joined
[13:35] <dalek> specs: 0f5bdf9 | (Stéphane Payrard)++ | S99-glossary.pod:

[13:35] <dalek> specs: added NCI

[13:35] <dalek> specs: review: https://github.com/perl6/specs/commit/0f5bdf9d17

[13:38] *** brrt joined
[13:39] *** eli-se joined
[13:39] <eli-se> shiny

[13:43] <dalek> specs: 4a1a774 | (Stéphane Payrard)++ | S99-glossary.pod:

[13:43] <dalek> specs: update zavolaj

[13:43] <dalek> specs: review: https://github.com/perl6/specs/commit/4a1a774de4

[13:44] <Ven> eli-se, o/

[13:46] <FROGGS> there is a typo 'interoperabiity'

[13:47] <FROGGS> cognominal^^

[13:50] <timotimo> eli-se: what's shiny? i want to see, too!

[13:50] <dalek> specs: 56f6adf | (Stéphane Payrard)++ | S99-glossary.pod:

[13:50] <dalek> specs: typo spotted by FROGGS++

[13:50] <dalek> specs: review: https://github.com/perl6/specs/commit/56f6adf1e0

[13:53] <eli-se> my AWK program

[13:54] <timotimo> i wonder if i ought to learn a bit of AWK at some point

[13:54] *** skarlso joined
[13:54] <skarlso> g-day

[13:55] <timotimo> hello skarlso

[13:55] <tadzik> timotimo: I found it quite insightful

[13:56] <eli-se> timotimo: my most useful AWK program: alias c1='awk { print $1 }'

[13:56] <timotimo> as a "history lesson" kind of insightful or what?

[13:56] <eli-se> with some more quotes

[13:56] <timotimo> heh, ok

[13:57] <skarlso> hello timotimo

[13:57] <tadzik> timotimo: not really, I find it still viable for certain shell-related tasks

[13:58] <timotimo> mhm

[13:58] * TimToady waves from not-yet-sunny California

[13:58] <tadzik> Perl is basically superior to it these days anyway, but it's often easier than using grep and cut and sed and whatnot

[13:58] <tadzik> quite fun :)

[13:59] <eli-se> Perl has better regexen

[13:59] <TimToady> FSDO

[13:59] <eli-se> fresh salad double onion?

[14:00] <TimToady> for some definition of

[14:00] <FROGGS> eli-se: I like yours better :D

[14:00] <timotimo> double onion <3

[14:01] <TimToady> Perl is kind of a double onion

[14:01] <eli-se> m: say 'onion' x 2

[14:01] <FROGGS> aye

[14:01] <camelia> rakudo-moar 3d6a73: OUTPUT«oniononion␤»

[14:01] * TimToady put that into an earl SOTO talk

[14:01] <timotimo> m: say 'onion' xx 2

[14:01] <TimToady> *y

[14:01] <camelia> rakudo-moar 3d6a73: OUTPUT«onion onion␤»

[14:01] * FROGGS .oO( floatonion doubleonion longdoubleonion )

[14:02] <timotimo> just a single character more gives us spaces between the words :3

[14:02] <timotimo> volatile onion // oops

[14:02] <TimToady> spaces, the final frontier...

[14:02] <eli-se> std::atomic<> onion; // exciting

[14:02] <FROGGS> wow, such onion

[14:03] * TimToady wants a tokomak onion

[14:03] <nwc10> so allium

[14:03] <nwc10> eyewatering

[14:03] <TimToady> *tokamak

[14:04] * TimToady can't speel this mroning

[14:04] <nwc10> insufficient coffee?

[14:04] <nwc10> or excessive jetlag?

[14:04] <TimToady> there's lots of coffee, just haven't drunk it all yet

[14:05] * TimToady was awake half the night thinking about how to make dynvar lookup faster

[14:05] <psch> m: say .subst(/(.)+/, { (@0[0..*/2], $0, @0[*/2..*]).comb(/\w/).join }) given 'onion'

[14:05] <|Tux|> m: (π+0).say

[14:05] <camelia> rakudo-moar 3d6a73: OUTPUT«onionionion␤»

[14:05] <camelia> rakudo-moar 3d6a73: OUTPUT«3.14159265358979␤»

[14:06] <|Tux|> :)

[14:06] <nwc10> j: (π+0).say

[14:06] <camelia> rakudo-jvm 3d6a73: OUTPUT«Can't open perl script "/home/camelia/jvm-rakudo/eval-client.pl": No such file or directory␤»

[14:06] <psch> .comb(/\w/).join seems excessive for what i wanted ther :/

[14:06] <yoleaux> psch: Sorry, this command is admin-only.

[14:07] <nwc10> the naughty word is .join is it

[14:07] <timotimo> tee hee

[14:07] <psch> yoleaux: oh shush

[14:07] <nwc10> oh, bot baiting failed

[14:07] <psch> .c

[14:07] <yoleaux> Query Wolfram Alpha for a calculator result

[14:07] *** raiph joined
[14:07] <psch> .comb

[14:07] <psch> .join

[14:07] <yoleaux> psch: Sorry, this command is admin-only.

[14:07] <nwc10> .bogus.comb

[14:07] <psch> that parsing seems wonky

[14:08] <nwc10> er

[14:08] <nwc10> .bogus.join

[14:08] <yoleaux> nwc10: Sorry, this command is admin-only.

[14:08] <eli-se> .onion

[14:08] <psch> looks like «^\.(.+)?$keyword (.+)» or something

[14:08] *** CurtisOvidPoe_ joined
[14:09] <FROGGS> .                                                                             tell psch huh?

[14:09] <FROGGS> ahh w/e

[14:09] <psch> FROGGS: right. \w not . :)

[14:10] *** eli-se left
[14:10] *** CurtisOvidPoe left
[14:10] *** CurtisOvidPoe_ is now known as CurtisOvidPoe

[14:19] *** cdc_ joined
[14:20] *** adu joined
[14:22] <cdc_> Hello #perl6

[14:22] <cdc_> perl6: class A { has $.callback }; my A $a .= new(callback => &say); $a.callback('OK')

[14:22] <camelia> rakudo-moar 3d6a73: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in method callback at src/gen/m-CORE.setting:3993␤  in block <unit> at /tmp/tmpfile:1␤␤»

[14:22] <FROGGS> hi cdc_ 

[14:23] <cdc_> perl6: class A { has $.callback }; my A $a .= new(callback => &say); my $callback = $a.callback; $callback('OK')

[14:23] <camelia> rakudo-moar 3d6a73: OUTPUT«OK␤»

[14:23] <cdc_> o/ FROGGS 

[14:23] <FROGGS> m: class A { has $.callback }; my A $a .= new(callback => &say); $a.callback()('OK')

[14:23] <camelia> rakudo-moar 3d6a73: OUTPUT«OK␤»

[14:23] <cdc_> FROGGS: thanks! :)

[14:23] <FROGGS> cdc_: $a.callback() will return that callback, and then you can invoke it

[14:23] <cdc_> ok, I understand

[14:23] <cdc_> *now

[14:24] <TimToady> perl6: class A { has $.callback }; my A $a .= new(callback => &say); $a.callback()('OK')

[14:24] <camelia> rakudo-moar 3d6a73: OUTPUT«OK␤»

[14:24] <TimToady> that owrks too

[14:24] <TimToady> OWRK! that hurts

[14:24] <FROGGS> that's.... what I did,no?

[14:24] <cdc_> :)

[14:24] <TimToady> oh, yeah, eyes still crossed this morning

[14:25] <FROGGS> ahh...

[14:25] <FROGGS> then I can stop comparing both lines :o)

[14:25] <TimToady> I believe it even says that in the docs somewhere...

[14:25] <cdc_> S03: foo.()      # same as foo()()

[14:25] <synopsebot> Link: http://design.perl6.org/S03.html#foo

[14:25] <psch> m: class A { has $.callback }; my A $a .= new(callback =>  &say); $a.callback.('OK')

[14:25] <camelia> rakudo-moar 3d6a73: OUTPUT«OK␤»

[14:26] <psch> design matches implementation \o/

[14:26] *** tinyblak left
[14:26] <FROGGS> m: class A { has $.cb; method callback(|args) { $!cb(|args) }; my A $a .= new(cb => &say); $a.callback('OK')

[14:26] <camelia> rakudo-moar 3d6a73: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hSU6U_TVoV␤Unable to parse expression in block; couldn't find final '}' ␤at /tmp/hSU6U_TVoV:1␤------> 3$a .= new(cb => &say); $a.callback('OK')7⏏5<EOL>␤    expecting any of:␤        statement en…»

[14:26] <FROGGS> m: class A { has $.cb; method callback(|args) { $!cb(|args) } }; my A $a .= new(cb => &say); $a.callback('OK')

[14:26] <camelia> rakudo-moar 3d6a73: OUTPUT«OK␤»

[14:27] <TimToady> maybe I'm imaginging it, or maybe we've just said the ()() trick on IRC before

[14:27] <TimToady> maybe I'll have some more coffee

[14:27] <FROGGS> m: class A { has $.cb; method new($callback) { self.bless: :cb($callback) }; method callback(|args) { $!cb(|args) } }; my A $a .= new(callback => &say); $a.callback('OK')

[14:27] <camelia> rakudo-moar 3d6a73: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in method new at /tmp/WLfViU3phC:1␤  in method dispatch:<.=> at src/gen/m-CORE.setting:1370␤  in block <unit> at /tmp/WLfViU3phC:1␤␤»

[14:28] <FROGGS> m: class A { has $.cb; method new(:$callback) { self.bless: :cb($callback) }; method callback(|args) { $!cb(|args) } }; my A $a .= new(callback => &say); $a.callback('OK')

[14:28] <camelia> rakudo-moar 3d6a73: OUTPUT«OK␤»

[14:29] <cdc_> smart!

[14:29] <FROGGS> cdc_: ^^

[14:30] <TimToady> you don't cheat fair :P

[14:31] <hoelzro> o/ #perl6

[14:31] <cdc_> it's smart, but I prefer using the .() syntax instead of using slef.bless (I'm not confident enough with it)

[14:31] <hoelzro> if anyone is curious about my tab completion changes, I made a PR here: https://github.com/rakudo/rakudo/pull/391

[14:31] *** Rounin left
[14:31] <hoelzro> with notes on ways in which it could be improved

[14:32] <tadzik> hmm, a challenge: A Perl grammar to parse the spell list copypasted from the D&D 5e Basic Rules PDF

[14:32] <cdc_> hoelzro: is this tab completion for the REPL?

[14:32] <hoelzro> cdc_: yes

[14:32] *** eli-se joined
[14:33] <cdc_> hoelzro++ # I always find myself using the TAB key by reflex in the perl6 REPL (without success yet)

[14:35] <moritz> sounds like a good proof of concept, but not mergable yet

[14:35] * TimToady wonders how a REPL can handle the need competing needs of evaluating the next value while sinking statements that are not the final statement...

[14:35] <TimToady> ss/need /

[14:36] <hoelzro> moritz: definitely not

[14:36] <hoelzro> it's a rough draft based on what I could get done in a single coding session

[14:36] *** Rounin joined
[14:36] <moritz> TimToady: it doesn't sink, it gists/prints

[14:36] <hoelzro> I'm posting it because I'm going to need some help on some of the points that need improvement (ex. getting a list of completions, loading Linenoise.pm from NQP, etc)

[14:37] <TimToady> I know, but it feels like that's gonna bite us someday, is all...

[14:37] <moritz> hoelzro: understood; I just don't want anybody else do say "awesome, let's merge!" :-)

[14:37] <hoelzro> moritz: good call =)

[14:37] <hoelzro> I'll actually add a note to the PR

[14:37] <moritz> I already did

[14:37] <moritz> hoelzro: I might be able to help with the introspect-y bits

[14:38] <hoelzro> that would be great

[14:40] <moritz> (though not right now; feel free to bug me tonight if I forget it)

[14:40] *** tinyblak joined
[14:40] <hoelzro> ok, will do

[14:40] * TimToady thinks this message is LTA: Calling 'f' will never work with argument types (Str, Str)

[14:42] <TimToady> needs to bring the f(Str, Str) together somehow, plusee the :(Int $, Str $) for the candidates can lose the : and the $ signs to make (Int, Str)

[14:42] <TimToady> since $ doesn't not really impose any additional constraint

[14:42] <TimToady> *plus

[14:43] <|Tux|> m: (e**(2*π*i)).say

[14:43] <camelia> rakudo-moar 3d6a73: OUTPUT«1-2.44929359829471e-16i␤»

[14:43] <|Tux|> webmind claims that that should print 1

[14:43] <TimToady> my typing reflexes must still be somewhere over Greenland...

[14:43] <moritz> |Tux|: it should; but floating point inaccuracies make that not exactly 1

[14:44] <moritz> m: say sin(20 * pi)

[14:44] <camelia> rakudo-moar 3d6a73: OUTPUT«-2.44929359829471e-15␤»

[14:44] <FROGGS> TimToady: seems pretty LHF

[14:44] <moritz> same here; should be 0

[14:44] <moritz> |Tux|: only a computer algebra system can preserve these identities exactly

[14:44] <TimToady> FROGGS: yes, but I don't dare fix that in my current state, so I'm just sayin' it out loud so I don't forget it after backlogging :)

[14:45] <TimToady> also, aren't we still in release mode?

[14:45] <moritz> something to be done after the release, I think :-)

[14:45] <|Tux|> I know about those floating point issues, jussed passed on the message

[14:45] <moritz> FROGGS: you're doing the release, right?

[14:45] <|Tux|> (trying to make *more* people enthusiastic about perl6)

[14:46] <FROGGS> moritz: right

[14:46] <FROGGS> TimToady: I'd also want to wait for the release first...

[14:48] <TimToady> but...but...you can't wait for the release if you're doing it... :)

[14:48] <iv> Can I import a class (e.g. LWP::Simple) under another name (e.g. just LWP)?

[14:49] <grondilu> m: constant mypi = pi but role Pi {}; multi sin(Pi) { 0 }; say sin(mypi);

[14:49] <camelia> rakudo-moar 3d6a73: OUTPUT«Ambiguous call to 'sin'; these signatures all match:␤:(Numeric \x)␤:(Pi $)␤  in block <unit> at /tmp/41AyNxd5J6:1␤␤»

[14:49] <TimToady> iv: supposed to be able to

[14:49] <TimToady> m: use LWP:name<LWP::SIMPLE>;  # or so

[14:49] <camelia> rakudo-moar 3d6a73: OUTPUT«===SORRY!===␤Could not find LWP in any of: /home/camelia/rakudo-inst-1/languages/perl6/lib, /home/camelia/rakudo-inst-1/languages/perl6␤»

[14:50] <skarlso> question: are mixins like groovy mixins?

[14:50] <TimToady> dunno if that's implemented yet, but we need aliasing to hide all the version/auth longnames anyway

[14:50] <moritz> skarlso: how are groovy mixins?

[14:50] <FROGGS> TimToady: I'll wait in another process :o)

[14:50] <iv> m: use LWP::Simple:name<LWP>; say LWP.WHO; say LWP::Simple.WHO

[14:50] <camelia> rakudo-moar 3d6a73: OUTPUT«===SORRY!===␤Could not find LWP::Simple in any of: /home/camelia/rakudo-inst-1/languages/perl6/lib, /home/camelia/rakudo-inst-1/languages/perl6␤»

[14:50] <FROGGS> ahh, it was not about blocking oneself

[14:51] <iv> Oh. Well, anyway, looks like it imports the name you give it first, and then imports some kind of package object under the :name.

[14:51] <iv> Not what I thought S11 says.

[14:51] <TimToady> m-star: use LWP::Simple:name<LWP>; say LWP.WHO; say LWP::Simple.WHO

[14:51] <skarlso> well, they are sort of like a template, they are completely incorporated into whichever file you include them, using the variables and everything, which makes them confusing. Hence, they have been abandoned and replaced by traits. 

[14:51] <FROGGS> star-m: use LWP::Simple:name<LWP>; say LWP.WHO; say LWP::Simple.WHO

[14:51] <camelia> star-m 2015.02: OUTPUT«Simple => (LWP::Simple)␤$.class_default_encoding => utf-8, $VERSION => 0.085, GET => GET, HEAD => HEAD, POST => POST, PUT => PUT, RequestType => (RequestType)␤»

[14:51] <TimToady> star: use LWP::Simple:name<LWP>; say LWP.WHO; say LWP::Simple.WHO

[14:51] <camelia> star-{m,p} 2015.02: OUTPUT«Simple => (LWP::Simple)␤$.class_default_encoding => utf-8, $VERSION => 0.085, GET => GET, HEAD => HEAD, POST => POST, PUT => PUT, RequestType => (RequestType)␤»

[14:52] <iv> Right. I'd guess LWP there is the, well, LWP package, which has one member, Simple. No alias made, as far as I can see.

[14:52] <moritz> skarlso: well, Perl 6 has roles, which are inspired by the original "traits" paper

[14:52] <TimToady> yeah, S11 has :name as the name it's coming *from*, last I knew

[14:52] <moritz> skarlso: and when we talking about mixins in Perl 6, we mean run-time application of a role to an object

[14:53] <iv> I'll chalk it up as not implemented yet. Thanks!

[14:53] <skarlso> gooooooooooood

[14:53] <skarlso> thanks moritz

[14:54] <skarlso> This was the only sentence which threw me off a bit: ## Roles are supported too (also called Mixins in other languages). That's why I was a little bit nervous. 

[14:54] <TimToady> yeah, that's not quite accurate

[14:55] <skarlso> indeed. :) 

[14:55] <TimToady> mixins are just one of the ways that roles can be used, is how I'd say it

[14:55] <TimToady> a mixin is run-time composition

[14:55] <TimToady> by adding an anon class as a derived class

[14:55] <Ven> TimToady: hi. someone asked something I thought was interesting about my tutorial. Everywhere I use "@array", but should it be "@list" instead?

[14:56] <Ven> And change every "array" to "list" (except when talking about $0 or things like that)

[14:56] <skarlso> as long as I don't have to declare it at class level with an annotation, and it's visible what belongs to what, I'm happy. :)

[14:56] *** rmgk_ joined
[14:56] *** rmgk left
[14:56] *** rmgk_ is now known as rmgk

[14:56] <moritz> Ven: IMHO it should @things_inside_the_list, like @numbers or so

[14:56] <moritz> Ven: the @ already implies Array (or Positional)

[14:56] <Ven> moritz: sure, but that's outside the point of my question

[14:57] * TimToady thinks @array is more communicative, if less precise

[14:58] <Ven> m: say [].WHAT.perl

[14:58] <camelia> rakudo-moar 3d6a73: OUTPUT«Array␤»

[14:58] *** cognominal left
[14:58] <Ven> m: say (1,).WHAT.perl

[14:58] <camelia> rakudo-moar 3d6a73: OUTPUT«Parcel␤»

[14:58] <Ven> m: say (my $ = (1,)).WHAT.perl # sigh

[14:58] <camelia> rakudo-moar 3d6a73: OUTPUT«Parcel␤»

[14:58] <Ven> ah, well.

[14:58] <Ven> ah, it's $. oops

[14:59] <TimToady> most people know what an array is, but have wildly varying views on what "list" means

[14:59] *** cdc_ left
[15:00] <TimToady> so it's more a matter of avoiding a badly overloaded word

[15:00] <TimToady> (for teaching purposes)

[15:03] *** lizmat_ joined
[15:03] *** eli-se left
[15:06] *** lizmat left
[15:12] *** xinming joined
[15:25] *** molaf joined
[15:27] *** brrt left
[15:29] *** raiph left
[15:36] *** pecastro left
[15:38] <tadzik> ooh, +~$0 is legal

[15:38] <tadzik> so awful and so handy

[15:39] *** skids joined
[15:39] *** rindolf left
[15:40] <moritz> we should have a name for that

[15:40] <TimToady> maybe we should bias $0 in favor of strings in the first place

[15:40] <moritz> "The Sośnierz maneuver"

[15:40] <tadzik> moritz: I was thinking of 'A belly dancer'...

[15:41] <TimToady> now that we have @0 to man the subbits of it

[15:41] <tadzik> but this is good too :P

[15:41] <TimToady> *mean

[15:41] *** skids left
[15:41] <sjn> m: say (+~+~+~+~+~+~$0).WHAT

[15:41] <camelia> rakudo-moar 3d6a73: OUTPUT«(Int)␤»

[15:41] <sjn> m: say (~+~+~+~+~+~$0).WHAT

[15:41] <camelia> rakudo-moar 3d6a73: OUTPUT«(Str)␤»

[15:42] <sjn> happy times

[15:43] *** raiph joined
[15:45] <TimToady> or even more radical, make Match ~~ Str

[15:45] <moritz> I'm not sure I'd be happy with that

[15:46] <moritz> for me, a Match is much more than a Str with a bit of extra functionality

[15:46] <TimToady> it's very counterintuitive to a P5 programmer though

[15:46] * FROGGS .oO( Quick! It is almost released! )

[15:46] <DrForr> TimToady: You made it back safe and sound?

[15:47] <TimToady> so it would seem, though my brane is still somewhere between there and here :)

[15:47] <tadzik> funny story: a 2nd degree friend had a contest on a university to write a regex in a syntax from the newest version of Perl. He lost, because he wrote it in Perl 6 syntax

[15:47] <tadzik> and that was 10 years ago

[15:47] <DrForr> I'll shove it your way :)

[15:48] <DrForr> tadzik: That means he was 4 degrees away from Kevin Bacon?

[15:48] <tadzik> DrForr: sounds about right :)

[15:49] <tadzik> although this group may not have this property

[15:49] <tadzik> not sure if friend scoping is additive

[15:49] * TimToady likes bacon with a high number of degrees

[15:49] <tadzik> or if I'm using the right vocabulary for this

[15:50] *** raiph left
[15:50] <DrForr> Well, friend mapping may not necessarily be bijective :)

[15:51] *** rurban1 left
[15:51] <tadzik> possibly :)

[15:52] <tadzik> that's like the messenger's dillema/paradox: when two people speak different languages, can they ever tell if they understand each other?

[15:54] *** mr-foobar joined
[16:00] * DrForr journeys to Skund.

[16:00] *** dalek left
[16:01] <psch> moritz: load seems to creep up unreasonably on hack again, to ~24 in the last 2-3 minutes

[16:01] *** eli-se joined
[16:01] <moritz> psch: thanks, I'll take a look

[16:03] * timotimo tries to journalctl and it freezes

[16:04] *** avuserow left
[16:05] <moritz> there seem to be about ~30 cron processes

[16:05] <moritz> that simply hang there

[16:05] <moritz> dammit, frozen

[16:05] <moritz> can anybody still do anything on that machine?

[16:05] <FROGGS> hack again?

[16:05] <moritz> FROGGS: yes :(

[16:06] <FROGGS> hmmm, do we know what cron processes that are?

[16:06] <moritz> FROGGS: they didn't have any child processes

[16:06] <moritz> FROGGS: so not processes started by cron, but cron itself

[16:06] <FROGGS> if I'd try to ssh into it now then I'd just kill it even more

[16:06] <psch> i still have one shell

[16:07] <moritz> psch: do you have sudo?

[16:07] <psch> and the irssi screen, but new screens hang

[16:07] <psch> no i don't

[16:07] <psch> gpasswd needs a relogg iirc?  so we're kinda stuck again i suppose

[16:07] <psch> i hope i don't have any unsafed buffers open 

[16:08] *** eli-se left
[16:09] *** Guest3088 is now known as ponbiki

[16:11] <moritz> reboot running

[16:11] *** masak left
[16:11] *** Util left
[16:11] *** [Coke] left
[16:11] *** Mouq left
[16:11] *** sergot left
[16:11] *** psch left
[16:11] *** dalek joined
[16:11] *** ChanServ sets mode: +v dalek

[16:12] *** psch joined
[16:12] <moritz> anybody have any ideas how to limit cron's resource usage, or debug that problem?

[16:13] <FROGGS> grrr, I am attempted to remove all S17 tests for t/spectest.data

[16:14] <FROGGS> moritz: no... :/

[16:14] <moritz> there was a rakudo-star-daily running, but it shouldn't use *that* many resources

[16:14] <moritz> and, since it runs as a user account, it should be resource-limited

[16:15] <moritz> collectd didn't collect any stats :(

[16:15] <moritz> at least not for this time

[16:16] <moritz> decommute&

[16:16] <FROGGS> hmpf

[16:16] *** telex left
[16:16] *** alini left
[16:18] *** telex joined
[16:18] *** Rounin left
[16:19] <psch> http://serverfault.com/questions/500385/ seems related, at a glance

[16:21] *** Ven left
[16:22] *** muraiki_ joined
[16:32] *** kaleem joined
[16:34] *** lichtkind_ left
[16:34] *** Ven joined
[16:35] *** perl6_newbee joined
[16:36] *** kaleem left
[16:36] *** gfldex joined
[16:41] <dalek> perl6-roast-data: 1db24bc | coke++ | / (9 files):

[16:41] <dalek> perl6-roast-data: today (automated commit)

[16:41] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1db24bc0f4

[16:42] *** wicope left
[16:44] *** [Coke] joined
[16:44] <dalek> rakudo/nom: ac36302 | FROGGS++ | t/spectest.data:

[16:44] <dalek> rakudo/nom: skip S17 test that segfaulted once in spectest

[16:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac36302c0e

[16:44] <FROGGS> brb &

[16:45] *** FROGGS left
[16:45] *** andreoss joined
[16:47] <[Coke]> so the reboot was rakudo-star-daily's fault?

[16:47] <[Coke]> Wonder if we should have one vm for IRC sessions and one for testing.

[16:48] *** diana_olhovik_ left
[16:49] *** lichtkind_ joined
[16:52] <nine_> moritz: LimitData= in cron.service

[16:53] *** Ven left
[16:53] *** larion left
[17:02] *** abraxxa left
[17:07] *** nige left
[17:09] *** madmuid joined
[17:10] *** skarlso left
[17:11] *** beastd joined
[17:15] *** cognominal joined
[17:16] *** cognominal left
[17:20] *** masak joined
[17:20] *** rurban1 joined
[17:20] <masak> good evening, #perl6

[17:23] <jnthn> o/ masɐk

[17:24] <masak> m: $_ = "masek"; s[(a)s(e)] = $1 ~ "s" ~ $0; say $_

[17:24] <camelia> rakudo-moar ac3630: OUTPUT«mesak␤»

[17:24] <masak> dang. :)

[17:25] *** alini joined
[17:25] <masak> m: $_ = "masek"; s[(a)s(e)] = $0 ~ "s" ~ $0; say $_

[17:25] <camelia> rakudo-moar ac3630: OUTPUT«masak␤»

[17:25] <masak> m: $_ = "masek"; s[(.)s(.)] = $0 ~ "s" ~ $0; say $_

[17:25] <camelia> rakudo-moar ac3630: OUTPUT«masak␤»

[17:25] <masak> oh, it was an ɐ

[17:25] <jnthn> m: $_ = "masɐk"; s[(a)s(e)] = $0 ~ "s" ~ $0; say $_

[17:25] <camelia> rakudo-moar ac3630: OUTPUT«masɐk␤»

[17:25] <jnthn> :P

[17:25] <jnthn> haha

[17:25] <masak> m: $_ = "masɐk"; s[(.)s(.)] = $0 ~ "s" ~ $0; say $_

[17:25] <camelia> rakudo-moar ac3630: OUTPUT«masak␤»

[17:25] <masak> \o/

[17:26] <jnthn> The things one finds in Unicode...

[17:26] *** nige joined
[17:28] *** rindolf joined
[17:29] *** diana_olhovik_ joined
[17:36] <masak> I have a question from a Perl 5 user and (new) colleague: does Perl 6 have anything akin to p5's `goto &foo`, to tail-call into a sub? the important criterion being that it replaces the current stack frame with the new one.

[17:36] <jnthn> Not afaik

[17:37] <jnthn> Maybe the NYI &foo.callwith(...)

[17:37] <masak> I searched my memory for something, but I could only think of `nextsame` (et al.) and `&*ROUTINE`, neither of which felt like a good match.

[17:38] <[Coke]> huh: http://dayswithoutansslexploit.com/

[17:41] <TimToady> jnthn: it'd have to be nextwith to avoid the frame

[17:41] *** FROGGS joined
[17:44] *** anaeem1 left
[17:44] *** anaeem1 joined
[17:44] <jnthn> TimToady: I thought .callwith was somehting special defined as not introducting a stack frame, and not related to the whole deferral thing

[17:45] <TimToady> it's just that the rest of call* imply a return

[17:45] <jnthn> ah

[17:45] <TimToady> so maybe it should be gotowith or so

[17:45] <jnthn> In S06:

[17:45] <jnthn>  sub foo (|args) { say args.perl; &bar.callwith(|args); }

[17:45] <jnthn> ...

[17:45] <jnthn> Use of callwith allows the routine to be called without introducing an official CALLER frame.

[17:46] <jnthn> That's the bit I was remembering. However, unofficial doesn't mean not existing :)

[17:46] <TimToady> yeah, that's bad design

[17:47] <jnthn> wtf, it wants translit

[17:47] <jnthn> uh, ww

[17:48] <timotimo> "continuewith"?

[17:49] * jnthn wonders how we'll get the tailcall to work on JVM :)

[17:49] <jnthn> Oh...probably by hacking the infrastructure we already use for continuations :)

[17:50] <TimToady> though the "official CALLER frame" that is not introduced by wrap is kind of a different issue

[17:51] <jnthn> yeah

[17:51] <jnthn> And at the moment you do get one :)

[17:51] <TimToady> presumably there's a frame for callwith, it's just not official

[17:51] *** rurban left
[17:52] <dalek> specs: 3d4f2dc | TimToady++ | S06-routines.pod:

[17:52] <dalek> specs: s/callsame/nextsame/ for actual tailcall

[17:52] <dalek> specs: review: https://github.com/perl6/specs/commit/3d4f2dc8e6

[17:53] <TimToady> well, it was actually s/callwith/nextwith/

[17:57] *** pecastro joined
[17:58] <jnthn> *nod*

[18:01] <dalek> rakudo/nom: 77ea41b | Mouq++ | docs/ChangeLog:

[18:01] <dalek> rakudo/nom: use + consistently in ChangeLog.

[18:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/77ea41b29e

[18:02] * TimToady is thinking of getting rid of %*LANG in favor of inherited braid methods of some sort

[18:03] <TimToady> use of %*LANG forces strict recursive descent parsing, perhaps more strict than strictly necessary

[18:04] *** espadrine left
[18:04] *** dakkar left
[18:04] <TimToady> one ought to be able to save the current braid in a cursor without relying on the current dynamic scope

[18:05] <TimToady> and method caching might be more efficient than dynvar caching, at least until we revamp the latter

[18:05] *** Mouq joined
[18:05] <psch> jnthn: the if at QAST/Compiler.nqp:4333 is what breaks «sub f(int $x is rw) {...}» on jvm

[18:05] <jnthn> Methods are also inlinable

[18:06] <psch> jnthn: i have a suspicion that just removing it is wrong, although spectest doesn't complain

[18:06] <TimToady> in general, dynvars are a bit of an attractive nuisance

[18:06] *** CurtisOvidPoe_ joined
[18:07] <jnthn> psch: hmmm

[18:07] *** CurtisOvidPoe left
[18:07] *** CurtisOvidPoe_ is now known as CurtisOvidPoe

[18:07] <psch> jnthn: fwiw, i didn't figure that out by understanding the code, i just crawled the bytecode to figure out where the NPE comes from

[18:07] <jnthn> psch: Oh...on moar we never make it that far

[18:08] <jnthn> psch: If a declaration is in void context we simply return from compile_var earlier

[18:08] <jnthn> Around the location of the want analysis

[18:08] <jnthn> See compile_var for Moar 

[18:08] <jnthn> Search for "Declaration in void context"

[18:08] <jnthn> Might as well port that, since it'll improve code-gen on JVM as well as fixing the bug :)

[18:10] <psch> jnthn: thanks, i'll have a go at that

[18:12] <Mouq> psch: Is there already a ticket/test for this?

[18:13] <jnthn> Mouq: afaik, he's fixing something that causes a spectest fail

[18:13] <psch> Mouq: S02-types/native.t indirectly points at the issue, and i think bartolin RT'd it

[18:13] <Mouq> Okay, just wanted to check :)

[18:18] <psch> RT #124051 is the ticket, albeit a bit misleading

[18:18] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=124051

[18:18] *** mohij joined
[18:24] *** eli-se joined
[18:25] <eli-se> hi :3

[18:25] <Mouq> m: sub prefix:<maybe> (|c) { c.perl.say; not(|c) }; say maybe(1)||2

[18:25] <camelia> rakudo-moar 77ea41: OUTPUT«5===SORRY!5=== Error while compiling /tmp/diMcCDWksY␤Undeclared routine:␤    maybe used at line 1. Did you mean 'make'?␤␤»

[18:25] <Mouq> m: sub prefix:<maybe> (|c) { c.perl.say; not(|c) }; say maybe (1)||2

[18:25] <camelia> rakudo-moar 77ea41: OUTPUT«Capture.new(list => (1,))␤2␤»

[18:26] <Mouq> m: sub prefix:<maybe> (|c) is looser(&prefix:<so>) { c.perl.say; not(|c) }; say maybe 1||2

[18:27] <camelia> rakudo-moar 77ea41: OUTPUT«Capture.new(list => (1,))␤False␤»

[18:36] <dalek> rakudo/nom: 6289ae4 | Mouq++ | docs/ChangeLog:

[18:36] <dalek> rakudo/nom: Add a few more ChangeLog entries

[18:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6289ae498a

[18:38] <TimToady> all this crud with dynvar $*ACTIONS is also pretty bogus; we should just mix in the ACTIONS to the current language

[18:39] <jnthn> TimToady: Putting it into ParseShared (hanging off each Cursor) may make sense.

[18:40] <TimToady> except that's shared among different languages

[18:40] <TimToady> (I think)

[18:41] <jnthn> I...thought not

[18:41] <jnthn> I don't think it is

[18:42] <TimToady> see method LANG in HLL, it just takes self's shared

[18:42] <TimToady> which is a different language

[18:42] <Mouq> TimToady: +1 for something better (and faster) than $*ACTIONS

[18:44] <jnthn> TimToady: Ah, OK. 

[18:44] <timotimo> how often do we look up $*ACTIONS?

[18:45] <jnthn> Every single rule

[18:46] <FROGGS> Mouq: I am currently working on the Changlog (by looking at *all* commits...), please stop working on it for now

[18:47] <Mouq> FROGGS: Sure, sorry :)

[18:47] *** Peter_R left
[18:49] *** Peter_R joined
[18:52] *** nige left
[18:53] <FROGGS> lizmat_: can you set a kebab cases environment variable on osx?

[18:54] *** lizmat_ is now known as lizmat

[18:55] <lizmat> indeed, you can't

[18:55] <FROGGS> :o)

[18:55] <lizmat> so I guess we need to revert the DEPRECATIONS env var change

[18:55] <FROGGS> rakudo/src/core/Deprecations.pm:109:    unless %*ENV<RAKUDO-NO-DEPRECATIONS> {

[18:55] <FROGGS> revert/fix, yes

[18:55] <lizmat> will do

[18:55] <FROGGS> lizmat++

[18:55] <FROGGS> I'll just correct the changelog entry :o)

[18:57] <dalek> rakudo/nom: b710ae9 | lizmat++ | src/core/Deprecations.pm:

[18:57] <dalek> rakudo/nom: Revert "Kebab-case RAKUDO_NO_DEPRECATIONS"

[18:57] <dalek> rakudo/nom: 

[18:57] <dalek> rakudo/nom: Apparently, many OS's aren't as advanced allowing kebab-cased env vars.

[18:57] <dalek> rakudo/nom: FROGGS++ for pointing it out

[18:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b710ae9b79

[19:00] <timotimo> d'oh

[19:03] <geekosaur> afaik POSIX only specs _, and - is a Linuxism

[19:07] <TimToady> well, a Lispism, probably :)

[19:08] <spider-mario> I’ve seen “kebab-case” mentioned for a few days now

[19:09] <spider-mario> what are we calling that?

[19:09] <TimToady> use of hyphens instead of underscores

[19:09] <spider-mario> oh, never mind

[19:09] <spider-mario> thanks

[19:09] <TimToady> like your nick :P

[19:09] <masak> some TODO passed tests in my spectest run: t/spec/S17-procasync/basic.rakudo.moar TODO passed:   28, t/spec/S17-procasync/print.rakudo.moar TODO passed:   12-14

[19:09] <xfix> ~ $ set -x LISP-IS-GOOD abc

[19:09] <xfix> set: Invalid character '-' in variable name. Only alphanumerical characters and underscores are valid in a variable name.

[19:09] <xfix> Fish shell complains.

[19:10] <huf> why is hyphen kebabby?

[19:10] <xfix> But to be honest, even if you would declare such a variable name, accessing it would be tricky.

[19:10] <masak> huf: meat on a stick.

[19:10] <spider-mario> at least the error message isn’t LTA

[19:10] <huf> OH

[19:10] <huf> .... that's brilliant and painful at once

[19:10] <xfix> So it's probably reasonable to block this.

[19:11] <spider-mario> fish’s reaction is better than “Syntax error line 1”

[19:11] <masak> huf: meh.

[19:11] <masak> huf: it's about on par with "camel case", I'd say :)

[19:12] <huf> masak: yes, but i already got used to that one

[19:12] <huf> so long ago that i dont remember my initial reaction

[19:12] <masak> there's a lesson about cognition in there somewhere, I'm sure.

[19:12] <huf> so what's this_called? unstated-case? default-case?

[19:13] * masak .oO( basket case? )

[19:13] <huf> i'll use that then

[19:14] <spider-mario> we could find another animal

[19:14] <spider-mario> snake and camel are already taken

[19:14] <spider-mario> but we can probably find another one

[19:15] <spider-mario> how about poodle case?

[19:15] *** skids joined
[19:16] *** perl6_newbee left
[19:16] <timotimo> dachshund case

[19:17] <masak> wiener dog case

[19:18] <masak> oh. those are the same kind of dog.

[19:18] <masak> the German word seems to mean "badger dog".

[19:21] <timotimo> in german i believe we call them "dackel"

[19:22] <FROGGS> only native arrays are TBD for jvm, right?

[19:22] <FROGGS> the other native type stuff is supported, right?

[19:22] <timotimo> i ... think so?

[19:23] <TimToady> maybe we should require use MONKEY‾TYPING;

[19:23] <FROGGS> $ perl6-j -e 'my int8 $x; say ++$x'

[19:23] <FROGGS> java.lang.NullPointerException

[19:23] <FROGGS>   in sub prefix:<++> at gen/jvm/CORE.setting:5698

[19:23] <huf> oh yeah, gotta have a bar where the monkey can swing

[19:23] <timotimo> .u monkey

[19:23] <yoleaux> U+1F412 MONKEY [So] (🐒)

[19:23] <FROGGS> :o(

[19:23] <FROGGS> seems not

[19:24] <timotimo> m: constant   = 1; use NativeCall; my Pointer[ ] $monkey;

[19:24] <camelia> rakudo-moar b710ae: OUTPUT«===SORRY!===␤Too few positionals passed; expected 3 arguments but got 2␤»

[19:24] <timotimo> :o

[19:24] <moritz> \o

[19:25] <FROGGS> m: constant   = 1;

[19:25] <camelia> rakudo-moar b710ae: ( no output )

[19:25] <FROGGS> m: use NativeCall; my Pointer[ ] $monkey;

[19:25] <camelia> rakudo-moar b710ae: OUTPUT«===SORRY!===␤Too few positionals passed; expected 3 arguments but got 2␤»

[19:25] <timotimo> weird.

[19:25] <FROGGS> yeah

[19:26] <timotimo> m: use NativeCall; my Pointer[int] $foo;

[19:26] <camelia> rakudo-moar b710ae: ( no output )

[19:26] <timotimo> Unhandled exception: This representation (VMArray) does not support positional access

[19:26] <timotimo> ?!

[19:29] <spider-mario> TimToady: is that ‾ the branch that the monkey is hanging from?

[19:29] <timotimo> :D

[19:30] <moritz> [Coke]: fwiw I don't know if the rakudo-star-daily killed hack, I just noticed it was running at the time it happend

[19:30] <[Coke]> ok.

[19:30] <moritz> [Coke]: but it seemed to be behave normally (1 CPU, no excessive memory usage)

[19:30] <[Coke]> thanks.

[19:30] <dalek> rakudo/nom: 2d24651 | FROGGS++ | docs/ChangeLog:

[19:30] <dalek> rakudo/nom: update changelog

[19:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2d24651a2e

[19:31] <moritz> I'm more worried about cron itself having too many unkillable processes 

[19:31] *** darutoko left
[19:31] <Mouq> FROGGS++

[19:31] <timotimo> FROGGS: shouldn't it be called "incompatible changes"?

[19:31] <timotimo> or is this "a change in the incompatibilities"?

[19:31] <FROGGS> I did not write it...

[19:31] <timotimo> mhm

[19:32] <FROGGS> so, somebody with more English fu than a stool (me) is invited to fix it :o)

[19:33] <moritz> I did install some resource limits for cron now, nine_++

[19:33] <moritz> http://askubuntu.com/questions/548810/many-crons-processes seems to fit to my observations; sadly no answer

[19:35] *** fhelmberger left
[19:35] <dalek> rakudo/install-dir-layout: 81e8b48 | moritz++ | docs/ChangeLog:

[19:35] <dalek> rakudo/install-dir-layout: Changelog: language improvements (I hope :)

[19:35] <dalek> rakudo/install-dir-layout: review: https://github.com/rakudo/rakudo/commit/81e8b48fbd

[19:35] <FROGGS> ERONGBRANCH :P

[19:35] *** fhelmberger joined
[19:36] <FROGGS> m: say Callable.^can

[19:36] <camelia> rakudo-moar b710ae: OUTPUT«0␤»

[19:36] <FROGGS> m: say Callable.^methods

[19:36] <camelia> rakudo-moar b710ae: OUTPUT«of returns␤»

[19:36] <moritz> eeks

[19:36] <FROGGS> m: sub foo { }; say &foo.^methods

[19:36] <camelia> rakudo-moar b710ae: OUTPUT«<anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> of returns onlystar assuming candidates cando multi soft wrap unwrap yada package WHY set_why perl <anon> add_phaser fire_phasers phasers perl <anon> <…»

[19:36] <FROGGS> m: sub foo { }; say &foo.^methods.grep(/post/)

[19:36] <camelia> rakudo-moar b710ae: OUTPUT«No such method 'match' for invocant of type 'ForeignCode'␤  in block  at src/gen/m-CORE.setting:1879␤  in method reify at src/gen/m-CORE.setting:9618␤  in block  at src/gen/m-CORE.setting:9454␤  in method reify at src/gen/m-CORE.setting:9424␤  in…»

[19:36] <FROGGS> m: sub foo { }; say &foo.^methods».name.grep(/post/)

[19:36] <camelia> rakudo-moar b710ae: OUTPUT«␤»

[19:36] <FROGGS> m: sub foo { }; say &foo.^methods».name.grep(/inv/)

[19:36] <camelia> rakudo-moar b710ae: OUTPUT«␤»

[19:37] <FROGGS> m: sub foo { }; say &foo.^methods».name.grep(/CALL/)

[19:37] <camelia> rakudo-moar b710ae: OUTPUT«␤»

[19:37] <FROGGS> :o(

[19:38] <dalek> rakudo/nom: c925a90 | moritz++ | docs/ChangeLog:

[19:38] <dalek> rakudo/nom: Language improvements in ChangeLog

[19:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c925a90360

[19:38] <FROGGS> moritz++

[19:39] *** Rounin joined
[19:40] *** fhelmberger left
[19:42] <dalek> rakudo/nom: fb11e47 | FROGGS++ | docs/ChangeLog:

[19:42] <dalek> rakudo/nom: move a changelog entry to section fixes

[19:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb11e4745c

[19:43] *** molaf left
[19:47] *** Sir_Ragnarok left
[19:49] *** raiph joined
[19:50] *** Sir_Ragnarok joined
[19:53] <dalek> rakudo/nom: 1119d6b | FROGGS++ | docs/announce/2015.03.md:

[19:53] <dalek> rakudo/nom: add release announcement for 2015.03

[19:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1119d6ba25

[19:53] <FROGGS> please review

[19:54] <nwc10> "Larry Wall as the icing" I think ought to be "Larry Wall as the icing on the cake"

[19:54] <nwc10> but to me that doesn't feel like the usual sort of phrase to use in an announcment

[19:55] <nwc10> I can't spot anything else. I don't know enough to "fact check" the technical details.

[19:56] *** eli-se left
[19:58] <FROGGS> hmmmm

[19:59] <masak> nwc10: it's actually "Larry Wall as the icing on the hockey rink" -- a very rare but choice metaphor.

[20:00] *** muraiki_ left
[20:00] <dalek> rakudo/nom: 2353b17 | FROGGS++ | docs/announce/2015.03.md:

[20:00] <dalek> rakudo/nom: update announcement, nwc10++

[20:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2353b17921

[20:00] <FROGGS> I... just removed it

[20:01] <FROGGS> masak: why do you have to explain English idioms to the British? O.o

[20:02] <mst> FROGGS: because the hockey rink is a lie

[20:02] <FROGGS> hehe

[20:02] <vendethiel> :o

[20:02] <masak> :P

[20:03] <FROGGS> bartolin: ping

[20:07] <dalek> roast: 37042ae | FROGGS++ | S17-procasync/ (2 files):

[20:07] <dalek> roast: skip flapping tests for release

[20:07] <dalek> roast: review: https://github.com/perl6/roast/commit/37042ae954

[20:13] <dalek> roast: ee85002 | FROGGS++ | S17-procasync/basic.t:

[20:13] <dalek> roast: also skip test that depend on another

[20:13] <dalek> roast: review: https://github.com/perl6/roast/commit/ee85002ef1

[20:13] <psch> o/

[20:13] <FROGGS> hi psch 

[20:13] * timotimo is benchmarking devirt'd reprs vs virtual reprs

[20:13] <psch> jnthn: emitting NOP where moar builds an instruction list from an empty array is sane i hope?

[20:14] <FROGGS> timotimo: ohh, please tell as soon as you see something

[20:14] *** rindolf left
[20:15] <psch> FROGGS: if the answer to my question to jnthn++ is 'yes' i could push the fix for jvm «my int $x = 0; $x++», assuming you haven't frozen NQP yet

[20:15] * [Coke] emits NOPE

[20:15] <timotimo> FROGGS: sadly, i don't do push_* and unshift_* yet. also not pop_* or shift_*...

[20:15] <FROGGS> psch: have not frozen it yet

[20:15] <psch> (it spectests fine except for 3-4 flappers, but...)

[20:15] <timotimo> but i do atpos/atkey/bindpos/bindkey and elems

[20:15] *** rurban1 left
[20:16] <timotimo> and all the getattr ops, too

[20:16] <FROGGS> psch: can you paste the diff? then I'll take that into account for further testing

[20:18] <timotimo> i need a brrt :(

[20:18] <TimToady> well, I was literally the icing on the cake this time

[20:18] *** yqt joined
[20:19] <FROGGS> gosh, and I removed it!

[20:19] * FROGGS shakes his fist angrily

[20:20] <psch> FROGGS: https://gist.github.com/peschwa/f37c69a4e97814ddfc6d

[20:21] <bartolin> FROGGS: pong

[20:21] <psch> i had one fails-with-make-spectest-but-passes-with-make-$filename in advent2013-day14.t

[20:21] <psch> (are those also flappers?)

[20:21] <FROGGS> bartolin: you said something about reverting a commit... what about applying the fix in #358?

[20:22] <dalek> rakudo/nom: f8671ea | Mouq++ | src/core/metaops.pm:

[20:22] <dalek> rakudo/nom: fix "Bag(<a b b c d d d>) »-» 1" + a micro-opt

[20:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f8671ea957

[20:22] <dalek> rakudo/nom: 637a613 | Mouq++ | / (3 files):

[20:22] <dalek> rakudo/nom: Merge branch 'nom' of https://github.com/rakudo/rakudo into nom

[20:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/637a613ebf

[20:22] <[Coke]> anything that touches concurrency is a potential flapper. I haven't seen any advent stuff actually flapping, though

[20:22] <Mouq> ( FROGGS: ^^ Requires no ChangeLog changes )

[20:22] <[Coke]> mainly S17*

[20:23] <bartolin> FROGGS: #358?

[20:23] *** pyrimidine left
[20:23] <FROGGS> bartolin: ohh, I mean this: https://github.com/rakudo/rakudo/pull/389

[20:23] <FROGGS> Mouq: and hopefully does not break anything :o)

[20:24] <Mouq> FROGGS: I spectested

[20:24] *** eli-se joined
[20:24] <TimToady> FROGGS: see https://twitter.com/clujpm/status/577577896862199808/photo/1

[20:24] <FROGGS> and I'll ecotest

[20:24] <bartolin> FROGGS: ahh. yes afaiu that would be good as well

[20:24] <FROGGS> TimToady: that is awesome :D

[20:24] <FROGGS> bartolin: do you have a one-liner that shows the borkage?

[20:27] <Mouq> m: say ($(1,2),{ $(.[0]+2,.[1]+2) } ... *)[^4]

[20:27] <camelia> rakudo-moar 2353b1: OUTPUT«1 2 3 4 5␤»

[20:27] <Mouq> m: say ($(1,2),{ $(.[0]+2,.[1]+2) } ... *)[^4].perl

[20:27] <camelia> rakudo-moar 2353b1: OUTPUT«($(1, 2), 3, 4, 5)␤»

[20:27] <bartolin> FROGGS: no, I don't. but testing whether $value is an Array is not the right thing

[20:27] <Mouq> ^^ I believe that's what bartolin++'s patch fixes

[20:27] <FROGGS> k

[20:28] <Mouq> (Where the correct value is ($(1,2), $(3,4), $(5,6), $(7,8))

[20:28] <Mouq> )

[20:29] <TimToady> m: say ([1,2],{ [.[0]+2,.[1]+2] } ... *)[^4]

[20:29] <camelia> rakudo-moar 2353b1: OUTPUT«1 2 3 4 5 6 7 8␤»

[20:30] <TimToady> m: say $(1,2)[0,1]

[20:30] <camelia> rakudo-moar 2353b1: OUTPUT«1 2␤»

[20:30] <bartolin> with the PR i get ($(1, 2), $(3, 4), $(5, 6), $(7, 8)) locally

[20:30] <FROGGS> I'll know soon too

[20:34] <Mouq> m: say ([1,2], { $_ »+» 2 } ... *)[^4] # ;)

[20:34] <camelia> rakudo-moar 2353b1: OUTPUT«1 2 3 4 5 6 7 8␤»

[20:35] *** avuserow joined
[20:37] <avuserow> japhb: did you get IO.resolve working on Rakudo JVM? I get: No such method 'AT-POS' for invocant of type 'BOOTArray'

[20:39] *** pyrimidine joined
[20:39] <bartolin> Mouq: would it make sense to add those evaluations as a test to roast?

[20:41] *** diana_olhovik_ left
[20:41] *** A4ABVTSA joined
[20:41] *** J-L left
[20:41] *** J-L joined
[20:42] <J-L> In Perl6, is there a way to get the name from a named variable?  (which might be useful for debugging)

[20:42] <masak> m: my $foo = 42; say :$foo.perl

[20:43] <camelia> rakudo-moar 637a61: OUTPUT«"foo" => 42␤»

[20:43] <masak> J-L: ^^

[20:43] <J-L> masak:  Wow!  Thank you!

[20:44] <masak> courtesy of TheDamian++.

[20:44] <avuserow> m: my $foo = bar => 42; say :$foo.perl

[20:44] <camelia> rakudo-moar 637a61: OUTPUT«"foo" => "bar" => 42␤»

[20:44] <J-L> masak:  I didn't think there was going to be such a straightforward answer!

[20:44] <masak> J-L: I'm happy it's what you wanted :)

[20:45] <J-L> masak:  To tell the truth, I don't understand all of it.  Why :$foo ?

[20:45] <masak> J-L: constructs a pair.

[20:45] <masak> J-L: actually, stepping back a bit, pairs are constructed like this: `foo => 42`, or like this: `:foo(42)`

[20:45] <J-L> masak:  A pair... of name and contents?

[20:46] <avuserow> J-L: the relevant design bit: http://design.perl6.org/S02.html#Adverbial_Pair_forms

[20:46] <masak> J-L: but in the case where your pair key is named as your variable, you can abbreviate `:foo($foo)` as just `:$foo`

[20:46] <masak> J-L: hope that makes sense.

[20:46] <J-L> masak:  Okay, I understand the 'foo => 42' and :foo(42) part.  (I think.)

[20:46] <psch> m: Pair.WHAT.say

[20:46] <camelia> rakudo-moar 637a61: OUTPUT«(Pair)␤»

[20:46] <masak> J-L: it's great when passing things into functions, too.

[20:47] <masak> J-L: the remaining piece of the puzzle is that the colon binds very tight, even tighter than method invocation. so `:$foo.perl` means `(:$foo).perl`

[20:47] <masak> J-L: when I first heard your question, I first thought of C#'s new `nameof` feature: http://blogs.msdn.com/b/csharpfaq/archive/2014/11/20/new-features-in-c-6.aspx

[20:48] <masak> J-L: we won't get that in Perl 6 until we get good enough macro/Qtree introspection.

[20:48] <masak> (well, I could fake it already today, but it'd be l'ugly)

[20:48] <J-L> masak:  So is ':$var' just syntactic sugar for ':var($var)' ?  I don't see the connection from :$v to :v($v) .

[20:48] <masak> J-L: you got it.

[20:48] <masak> J-L: and `:v($v)` means the same as `v => $v`

[20:49] <J-L> masak:  So, a shortcut, then.  Nice.

[20:49] <masak> yes, a very useful one.

[20:50] <raydiak> m: sub foo (:$bar) { say $bar }; my $bar = 42; foo :$bar;

[20:50] <camelia> rakudo-moar 637a61: OUTPUT«42␤»

[20:51] <masak> actually, it's often a relief when naming variables, because I know if I just name them as my parameters, then I will have an easier time with the call :)

[20:53] <timotimo> FROGGS: seems like my result is: either noise is too big, or the positive effect is too small

[20:53] <J-L> m: sub f ($a) { :$a.perl.say };  my $var = 42;  f($var);

[20:53] <camelia> rakudo-moar 637a61: OUTPUT«"a" => 42␤»

[20:53] <timotimo> hm, i should check somethign

[20:53] <FROGGS> timotimo: yeah, I feared that

[20:53] <timotimo> yeah, it was definitely the correct moarvm binary that was running

[20:53] <J-L> I notice that inside a function it uses the function's name.

[20:54] <timotimo> kinda sad :(

[20:54] <timotimo> then again, i haven't checked what ops are encountered during the benchmarks and could be usefully devirtualized

[20:54] <psch> J-L: that's a scope thing.  the variable you're putting in a pair is your parameter, not the argument that was passed

[20:55] <timotimo> but i have the technology to find out

[20:56] <J-L> How can I create a function that knows the name(s) of the variables passed in?  Is that possible?

[20:56] <FROGGS> timotimo: and you are not done yet, right? I mean, there are ops left

[20:57] <FROGGS> m: sub foo(:$bar) { say $bar }; foo(bar => 42); foo(:bar(21))

[20:57] <camelia> rakudo-moar 637a61: OUTPUT«42␤21␤»

[20:57] <FROGGS> J-L: ^^

[20:57] <FROGGS> pair constructors again

[20:58] <timotimo> correct, there are many ops left

[20:58] <timotimo> bindattr, for example, and push/unshift and pop/shift

[20:59] <FROGGS> these might be used more often

[20:59] <masak> m: class C { has $.name }; my $name = "Bob"; given C.new(:$name) { say .name }

[20:59] <camelia> rakudo-moar 637a61: OUTPUT«Bob␤»

[20:59] <FROGGS> I mean, the devirt "only" reduces the call overhead, right?

[20:59] <masak> J-L: ^^

[21:00] <psch> m: sub f($x is rw) { $x.VAR.name.say }; my $y = "foo"; f $y # this works

[21:00] <camelia> rakudo-moar 637a61: OUTPUT«$y␤»

[21:00] * psch wonders who understood J-L++ correctly

[21:00] *** itz_ joined
[21:00] <FROGGS> psch: yes, but this can be dangerous

[21:00] <FROGGS> (or at least plain wrong in some situations)

[21:01] <psch> FROGGS: right, there should probably a disclaimer

[21:01] <psch> (i'm guessing, because i can't think of things where it breaks)

[21:01] <FROGGS> ohh, you a word

[21:01] <FROGGS> forgot*

[21:01] <psch> :P

[21:01] <FROGGS> *g*

[21:02] <masak> J-L: in general you can't create a function that knows the name(s) of the variables passed in.

[21:02] <psch> FROGGS: ooc, where is it dangerous?

[21:02] <masak> J-L: because variables aren't primary; values are.

[21:02] *** itz left
[21:02] <masak> J-L: variables get to hold values -- values don't have to be held by variables.

[21:02] <skids> So why does nativecall map perl "int32" to C "int" again?  That seems not very future-proof.

[21:03] <masak> J-L: who's to say it was through a variable you passed a value to a function? could be any number of things.

[21:03] <FROGGS> psch: telling the user about variable $y in a warning/exception when this is triggered by code-in-the-middle can be misleading

[21:03] <FROGGS> psch: that kind of dangerous

[21:03] *** eternaleye left
[21:03] <J-L> masak:  I know it can get hairy with references and copies of variables and all that, but psch's example above does seem to work for me.

[21:04] <psch> FROGGS: oh.  yeah, that's probably misleading at least

[21:04] <FROGGS> skids: int in C is 32bit wide, that's why

[21:04] <masak> J-L: so it does.

[21:04] <masak> J-L: good luck on your quest, then :>

[21:04] <skids> No, it isn't.

[21:04] <FROGGS> skids: where?

[21:04] <skids> It is in practice, but not by spec.

[21:05] <skids> And in fact on older machines was 16 bits.

[21:05] <J-L> I'll keep both in mind, though.  They're both great solutions, and both great examples to learn what's going on under the hood.

[21:05] <FROGGS> skids: yes, but since things like ffi exist it is unlikely that int will change in future

[21:05] <skids> FROGGS: A 64-bit compiler is free to have sizeof(int) = 8 

[21:06] <skids> I don't thik that's a sound design choice.

[21:07] <J-L> I keep wanting to pass in a pair like this:

[21:07] <J-L> m: sub f ($a) {$a.say};  my $var = 42;  f(:$var);

[21:07] <camelia> rakudo-moar 637a61: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in sub f at /tmp/gCRRtSDQ8D:1␤  in block <unit> at /tmp/gCRRtSDQ8D:1␤␤»

[21:07] *** eternaleye joined
[21:07] <FROGGS> skids: you can declare your own int type that'll have sizeof(int)

[21:08] <arnsholt> J-L: Well you can always do :a($var)

[21:08] <skids> FROGGS: how?

[21:08] <arnsholt> Having the compiler guess which named you meant when there's no match is a terrible idea

[21:09] <FROGGS> m: use NativeCall; my native int is Int is ctype("int") is repr("P6int") { }; say nativesizeof int

[21:09] <camelia> rakudo-moar 637a61: OUTPUT«4␤»

[21:09] <J-L> arnsholt:  I'm not sure how to use :a($var)

[21:10] *** koo6 left
[21:10] <FROGGS> :a($var) is the same as a => $var, so you use that in the call

[21:10] <masak> m: sub f ($a) {$a.say};  my $var = 42;  f(:a($var))

[21:10] <camelia> rakudo-moar 637a61: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in sub f at /tmp/t10fyEhNqD:1␤  in block <unit> at /tmp/t10fyEhNqD:1␤␤»

[21:10] <psch> J-L: pair notation has two meanings

[21:10] <FROGGS> m: sub f (:$a) {$a.say};  my $var = 42;  f(:a($var))

[21:10] <camelia> rakudo-moar 637a61: OUTPUT«42␤»

[21:11] <psch> J-L: one is to build a Pair object, the other is to pass a value to a named parameter

[21:11] <psch> FROGGS++ last code example is the latter

[21:11] <psch> J-L: you can parenthesize a Pair to have it as a positional argument

[21:11] <psch> m: sub f($a) { $a.say }; my $var = 42; f((:$var))

[21:11] <camelia> rakudo-moar 637a61: OUTPUT«var => 42␤»

[21:12] <psch> s/Pair/colonpair/

[21:12] <skids> FROGGS: Thanks that helps a lot.

[21:12] <timotimo> Unhandled exception: This representation (VMArray) does not support positional access

[21:12] <timotimo> wait what

[21:13] <timotimo> what did i do this time

[21:13] <psch> timotimo: i have a hazy recollection of a similar encounter with jvm array marshalling

[21:13] <FROGGS> skids: btw, that will do a sizeof(int) at compile time of the VM (on MoarVM)

[21:14] <psch> timotimo: i think HLL mismatch?  i.e. method AT-POS against a VMArray?

[21:14] <FROGGS> skids: and we can also add stuff like size_t to that, though that also needs a patch to the VM

[21:15] <timotimo> oh, duh :D

[21:15] <J-L> psch:  Ah, that works (the parenthesizing a Pair).  I'd been trying to do something like that, but never thought abut the (( ... )) part.

[21:15] <timotimo> i put the arguments in the wrong order

[21:15] <skids> Sure, the stuation would get sticky if MoarVM was compiled differently than the dominant local platform convention, but we don't do that. :-)

[21:16] * skids tries to syntactically categorize "my native foo"

[21:16] *** Madcap-Jake joined
[21:17] <FROGGS> m: use NativeCall; native int is Int is ctype("int") is repr("P6int") { }; say nativesizeof int

[21:17] <camelia> rakudo-moar 637a61: OUTPUT«4␤»

[21:18] <FROGGS> it is like a packagy keyword

[21:18] <timotimo> it's not specced by perl6, though

[21:18] <FROGGS> timotimo: it probably is specced

[21:18] *** MadcapJake left
[21:19] <timotimo> oh

[21:19] <timotimo> it ... is?

[21:20] *** kjs_ joined
[21:20] <FROGGS> ahh no, the spectest only use natives but not declare natives

[21:23] *** spider-mario left
[21:24] *** MadcapRusso joined
[21:27] *** Madcap-Jake left
[21:36] *** fhelmberger joined
[21:37] *** spider-mario joined
[21:37] <FROGGS> interesting:

[21:37] <FROGGS> Compiling lib/Web/Request/Multipart.pm6 to mbc

[21:37] <FROGGS> useless use of 'is rw' on $!file  in any  at src/Perl6/World.nqp:2044

[21:37] <FROGGS> useless use of 'is rw' on $!nest  in any  at src/Perl6/World.nqp:2044

[21:38] <FROGGS> (that's for *after* the release)

[21:38] *** nige joined
[21:38] *** Sir_Ragnarok left
[21:39] <timotimo> i built that warning

[21:39] <timotimo> but ... huh?

[21:40] <FROGGS> the file annotation gets messed up probably due to precomp

[21:40] *** kjs_ left
[21:41] <timotimo> spec tests don't seem to b0rk after implementing bindattr_* :)

[21:41] <FROGGS> nice :o)

[21:41] *** fhelmberger left
[21:41] <japhb> avuserow: Yes, IO.resolve was working on r-j for me when I did the Rakudo commit that enabled it.  I have not rebuilt in a while, so I don't know if something broke in the mean time.

[21:42] <japhb> (Sorry if that was already discussed, I'm just responding to the highlight and haven't actually backlogged.)

[21:42] *** Sir_Ragnarok joined
[21:43] <skids> So, I'm guessing that eventually after a series of "well, why not?"s array[] will do everything Buf[] does and visa versa, the only difference remaining being buf[] is guaranteed to be contiguous.

[21:45] <FROGGS> hmmm, that would mean that array[T] gets stringlike like Buf

[21:46] *** xfix left
[21:47] <skids> Eventually maybe buf8  ~~ array[uint8] (but not the other way around and not array[uint8] ~~ blob8)

[21:48] <skids> I guess the part most likely to remain is the behavior of +^ et al.

[21:49] <timotimo> damn. i'm getting This type does not support associative operations sometimes

[21:50] *** Rounin left
[21:51] <skids> m: my $f = Buf.new(1,2,3); my $g = Buf.new(3,2,1); say ($g +^ $f).perl; # which is NYI

[21:51] <camelia> rakudo-moar 637a61: OUTPUT«0␤»

[21:54] <timotimo> there must be some factor that i'm missing somewhere

[22:03] *** adu left
[22:08] *** rurban joined
[22:11] <masak> 'night, #perl6

[22:11] *** telex left
[22:12] <FROGGS> gnight masak 

[22:12] *** telex joined
[22:19] <FROGGS> psch: still there?

[22:19] <psch> FROGGS: yeah

[22:19] <FROGGS> psch: I think you can commit now

[22:19] <FROGGS> tests look good

[22:20] <psch> FROGGS: will do

[22:20] <FROGGS> psch++

[22:21] <dalek> nqp: 4d4bec8 | peschwa++ | src/vm/jvm/QAST/Compiler.nqp:

[22:21] <dalek> nqp: Fix codegen to properly support native rw parameters.

[22:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4d4bec891e

[22:21] <psch> FROGGS: you'll bump NQP_REVISION for the release?

[22:21] <FROGGS> yes, of course :o)

[22:21] <jnthn> skids: I don't see array[T] getting .decode either, nor supporting the stringy ops

[22:21] <psch> FROGGS++

[22:22] * psch goes back to looking at the EvalServer bits...

[22:22] <jnthn> FROGGS++ # working on the release

[22:22] <FROGGS> psch: I mean, I have to set it to 2015.03 anyway

[22:22] <psch> FROGGS: yeah, i realised that a bit after hitting enter :)

[22:22] <FROGGS> yeah, late it is :D

[22:24] <avuserow> japhb: I tried to re-enable IO.resolve for JVM when I originally made the NQP patch and it wasn't working for me

[22:24] <avuserow> but if it IS working then it should be mentioned in the changelog if not too late already

[22:24] *** koo6 joined
[22:24] <dalek> rakudo/nom: 2a9c03f | usev6++ | src/core/operators.pm:

[22:24] <dalek> rakudo/nom: Clean up flattening of return values from SEQUENCE

[22:24] <dalek> rakudo/nom: 

[22:24] <dalek> rakudo/nom: cmp. https://github.com/rakudo/rakudo/commit/91a1b7a0288dfb29ba21fa43fec9b15de0705e48#commitcomment-10240842

[22:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a9c03f817

[22:24] <dalek> rakudo/nom: b1d353d | FROGGS++ | src/core/operators.pm:

[22:24] <dalek> rakudo/nom: Merge pull request #389 from usev6/nom

[22:24] <avuserow> japhb: it appears to fail for me on a symlink

[22:24] <dalek> rakudo/nom: 

[22:24] <dalek> rakudo/nom: Clean up flattening of return values from SEQUENCE

[22:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b1d353d330

[22:27] <dalek> rakudo/nom: b57f245 | FROGGS++ | docs/ (2 files):

[22:27] <dalek> rakudo/nom: adjust changes, psch++

[22:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b57f2452b2

[22:28] *** mohij left
[22:28] <dalek> rakudo/nom: a6c8d8e | FROGGS++ | docs/release_guide.pod:

[22:28] <dalek> rakudo/nom: update release information

[22:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a6c8d8e89d

[22:31] *** eli-se left
[22:32] <dalek> nqp: 2975829 | FROGGS++ | / (2 files):

[22:32] <dalek> nqp: bump VERSION to 2015.03

[22:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/29758294da

[22:34] *** itz joined
[22:35] *** gfldex left
[22:35] *** nige left
[22:35] *** itz_ left
[22:38] *** Util joined
[22:40] <timotimo> oooh

[22:41] <timotimo> in the release announcement, the list of incompatible changes gets squashed into a single line

[22:41] <FROGGS> O.o

[22:41] <timotimo> at least when github renders the markdown

[22:42] <FROGGS> I'll add bullet points

[22:42] <FROGGS> timotimo++

[22:42] *** BenGoldberg_ joined
[22:43] <psch> does github flavored markdown support links for footnotes?  if so, those aren't there either

[22:44] <psch> on https://github.com/rakudo/rakudo/blob/b57f2452b24b03f1aed2aea36e090122a2754f75/docs/announce/2015.03.md

[22:45] <psch> ah, footnotes aren't supported apparently

[22:45] <timotimo> it doesn't, no

[22:45] <timotimo> we rely on the reader to implement these

[22:48] *** adu joined
[22:49] <dalek> rakudo/nom: ac5f2ec | FROGGS++ | docs/announce/2015.03.md:

[22:49] <dalek> rakudo/nom: add bullet points to not collapse into single line, timotimo++

[22:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac5f2ec235

[22:54] *** anaeem1 left
[22:54] *** itz_ joined
[22:55] *** anaeem1 joined
[22:58] *** itz left
[22:59] *** itz joined
[23:00] *** anaeem1 left
[23:00] *** itz_ left
[23:03] * psch &

[23:06] *** itz_ joined
[23:08] *** itz left
[23:09] <labster> m: my $bar = 12 but [ 12, "hi" ]

[23:09] <camelia> rakudo-moar a6c8d8: OUTPUT«Cannot find method 'specialize'␤  in any compose at src/gen/m-Metamodel.nqp:2741␤  in any generate_mixin at src/gen/m-Metamodel.nqp:1267␤  in any  at src/gen/m-Metamodel.nqp:1188␤  in any mixin at src/gen/m-Metamodel.nqp:1223␤  in sub infix:<but>…»

[23:15] <labster> I'm thinking rakudobug, but it's been so long since I've done this, I wonder if it already exists

[23:16] <skids> So, if I actually try to use one of those "my native foo" types as a parm to a native function, it bombs with "Unknown type foo used in native call."

[23:16] *** beastd left
[23:19] *** coffee` left
[23:22] *** spider-mario left
[23:24] *** spider-mario joined
[23:29] *** osto joined
[23:32] *** alini left
[23:34] <dalek> rakudo/nom: dddeb0a | FROGGS++ | docs/release_guide.pod:

[23:34] <dalek> rakudo/nom: remove --gen-parrot from release guide

[23:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dddeb0a0ab

[23:34] <labster> yay!

[23:35] <labster> I mean, uh, wouldn't it be nice is someone fixed up parrot?

[23:35] <labster> *if

[23:35] <FROGGS> yes :o)

[23:35] <FROGGS> and one could already start aligning parrot to moar/jvm

[23:36] <dalek> rakudo/nom: 6a19a21 | FROGGS++ | tools/build/NQP_REVISION:

[23:36] <dalek> rakudo/nom: [release] bump NQP revision

[23:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a19a21e26

[23:36] *** itz joined
[23:36] <dalek> rakudo/nom: 66a5bb3 | FROGGS++ | VERSION:

[23:36] <dalek> rakudo/nom: [release] bump VERSION

[23:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66a5bb37c2

[23:37] *** fhelmberger joined
[23:39] <dalek> rakudo/nom: 251891f | FROGGS++ | docs/ChangeLog:

[23:39] <dalek> rakudo/nom: also add bullet points to changelog

[23:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/251891f8e4

[23:39] *** itz_ left
[23:42] *** fhelmberger left
[23:43] <labster> r: True but [ 1, 2 ]

[23:43] <camelia> rakudo-moar 66a5bb: OUTPUT«Cannot find method 'specialize'␤  in any compose at src/gen/m-Metamodel.nqp:2741␤  in any generate_mixin at src/gen/m-Metamodel.nqp:1267␤  in any  at src/gen/m-Metamodel.nqp:1188␤  in any mixin at src/gen/m-Metamodel.nqp:1223␤  in sub infix:<but>…»

[23:43] * labster submits rakudobug

[23:45] *** lichtkind_ left
[23:53] <timotimo> my little AI player for this silly AI vs AI game spends about 5x as much time in parsing json compared to calculating what to do

[23:54] <FROGGS> hehe, ouch

[23:57] *** madmuid left
[23:58] *** yqt left
