[00:02] *** RabidGravy left
[00:02] <dalek> rakudo-star-daily: dff0e2b | coke++ | log/ (2 files):

[00:02] <dalek> rakudo-star-daily: today (automated commit)

[00:02] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/dff0e2b000

[00:02] <dalek> rakudo-star-daily: 5f2c73d | coke++ | log/ (3 files):

[00:02] <dalek> rakudo-star-daily: today (automated commit)

[00:02] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5f2c73d598

[00:02] <dalek> perl6-roast-data: 5f3ad9f | coke++ | / (9 files):

[00:03] <dalek> perl6-roast-data: today (automated commit)

[00:03] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5f3ad9f96a

[00:03] <dalek> perl6-roast-data: 127b5dc | coke++ | / (9 files):

[00:03] <dalek> perl6-roast-data: today (automated commit)

[00:03] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/127b5dcf8c

[00:07] <MadcapJake> Curious what everyone feels about sigil and twigil syntax highlighting.  I've been experimenting with having my language-perl6fe only highlighting the sigil and twigil (and differently for each too).  Check out an example and cast your vote https://twitter.com/MadcapJake/status/666037972228149251

[00:13] <zengargoyle> i'm used to vim which highlights sigil and var but not twigil

[00:13] *** Sqirrel joined
[00:13] <zengargoyle> makes vars look like vars and twigil'd things look special

[00:17] <zengargoyle> yikes. rakudobrew'd panda barfs: Unhandled exception: Missing or wrong version of dependency 'gen/moar/stage2/QRegex.nqp' (from 'src/Perl6/Pod.nqp')

[00:18] <zengargoyle> even after rakudobrew nuke moar; rakudobrew build moar; rakudobrew build panda

[00:21] *** raiph joined
[00:30] *** xpen joined
[00:30] <zengargoyle> think i mucked up git_reference

[00:30] *** Sqirrel left
[00:34] *** xpen left
[00:46] *** Ven joined
[00:51] *** Ven left
[00:52] *** sprocket joined
[01:02] <arnsholt> Progress!

[01:06] *** colomon joined
[01:10] *** yeahnoob joined
[01:10] *** tokuhiro_ joined
[01:12] <MadcapJake> zengargoyle: ok, that's good to know.  I could just stick with the vim precedent.  Take a look at the example I posted in that link, it's actually not too noisy (to me) and I might like being a bit different (since this is the Fun Edition™).  Also, another reason for this change is that I think there is *too much* highlighting going on in the builtin highlighter.  Most languages don't actually highlight variables and when you do,

[01:12] <MadcapJake> it kind of takes over the whole page.  I think highlighting should be reserved for signifying important details rather than just each time you access or declare a variable. Thoughts?

[01:15] *** tokuhiro_ left
[01:21] *** Sqirrel joined
[01:31] *** Sqirrel left
[01:35] *** flussence joined
[01:35] *** ilmari joined
[01:36] *** Juerd joined
[01:36] *** chansen_ joined
[01:36] *** raiph left
[01:37] *** SmokeMachine joined
[01:37] *** geekosaur joined
[01:37] *** samb1 joined
[01:38] *** flaviusb joined
[01:39] *** [Tux] joined
[01:39] *** mephinet joined
[01:40] *** simcop2387 joined
[01:42] *** ggherdov joined
[01:43] *** isacloud joined
[01:43] *** clkao joined
[01:43] *** zemmihates joined
[01:44] *** mrsolo joined
[01:46] *** skarn joined
[01:48] *** Ven joined
[01:53] *** Ven left
[02:03] *** rluko joined
[02:07] *** rluko left
[02:14] *** xpen joined
[02:17] <zengargoyle> i can see what you mean sometimes.  in P6 it sometimes makes me think of how to reduce un-needed variables. :)

[02:18] <zengargoyle> and the visual cues have been handy with things like :$var and |@array and ~X !X ?X and the like.  helps to not just overlook them.

[02:21] <zengargoyle> might just be my eyesight, but the contrast difference in places is helpful.

[02:23] <zengargoyle> woot: Pod::Data data = Pod::Data.new(unkeyed => [["an unkeyed data", "\n"], ["another unkeyed data", "\n"]], keyed => {})

[02:23] <zengargoyle> sadly blows up compile when i try to add the :keyed($hash) :(

[02:24] *** Sqirrel joined
[02:24] <zengargoyle> and &dd drops the = from $=data :P

[02:27] *** helloworldlang joined
[02:27] *** xpen left
[02:29] *** xpen joined
[02:29] *** xpen left
[02:31] *** xpen joined
[02:33] *** AlexDaniel left
[02:41] *** kaare_ joined
[02:41] *** aborazmeh joined
[02:41] *** aborazmeh left
[02:41] *** aborazmeh joined
[02:45] *** aborazmeh left
[02:47] *** aborazmeh joined
[02:47] *** aborazmeh left
[02:47] *** aborazmeh joined
[02:47] *** Sqirrel left
[02:50] *** helloworldlang left
[02:51] *** yqt left
[02:54] *** Ven joined
[02:58] *** kid51 left
[03:03] *** Ven left
[03:06] *** tokuhiro_ joined
[03:08] *** spider-mario left
[03:19] *** geraud left
[03:20] *** geraud joined
[03:24] *** aborazmeh left
[03:28] *** noganex joined
[03:37] *** BenGoldberg joined
[03:40] *** kaare_ left
[03:41] <autarch> how do class methods work in Perl 6? is there a "class" like "self"?

[03:43] <autarch> or it's just self?

[03:44] *** geraud left
[03:50] <BenGoldberg> You can call the .WHAT method on self

[03:51] <autarch> I just need the class name, which I think is in self, so that's fine

[03:53] <grondilu> ::?CLASS

[03:53] <mr_ron> .tell cygx MVM_JIT_DISABLE allowed the build with mingw/Strawberry Perl to complete but with make test all the NativeCall tests failed both with and without MVM_SPESH_DISABLE.  With Microsoft build tools the NativeCall tests pass.

[03:53] <yoleaux> mr_ron: I'll pass your message to cygx.

[03:55] *** awwaiid joined
[03:55] <grondilu> m: class A { multi method f($class:U:) { "class!" };  multi method f($self:D:) { "instance!" } }; say A.f(); say A.new.f();

[03:55] <camelia> rakudo-moar 8e1997: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MIaQ6RO3XJ␤Invalid typename 'U' in parameter declaration.␤at /tmp/MIaQ6RO3XJ:1␤------> 3class A { multi method f($class:U7⏏5:) { "class!" };  multi method f($self:D␤»

[03:56] <grondilu> oh I thought that worked :/

[03:57] <grondilu> m: class A { multi method f(::?CLASS:U:) { "class!" };  multi method f(::?CLASS:D:) { "instance!" } }; say A.f(); say A.new.f();

[03:57] <camelia> rakudo-moar 8e1997: OUTPUT«class!␤instance!␤»

[03:57] <autarch> m: class A { method cm { say self } }; say A.cm()

[03:57] <camelia> rakudo-moar 8e1997: OUTPUT«(A)␤True␤»

[03:58] <autarch> m: class A { method cm { return self.new }; say A.cm()

[03:58] <camelia> rakudo-moar 8e1997: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hfYuL9pFsc␤Missing block␤at /tmp/hfYuL9pFsc:1␤------> 3ethod cm { return self.new }; say A.cm()7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier…»

[03:58] <autarch> m: class A { method cm { return self.new } }; say A.cm()

[03:58] <camelia> rakudo-moar 8e1997: OUTPUT«A.new␤»

[03:58] <mr_ron> m: class C {method hi {say <hi>}}; C.hi

[03:58] <camelia> rakudo-moar 8e1997: OUTPUT«hi␤»

[03:58] <autarch> m: class A { method cm ($class:) { return $class.new } }; say A.cm()

[03:58] <camelia> rakudo-moar 8e1997: OUTPUT«A.new␤»

[03:59] <grondilu> you really want to use ::?CLASS

[03:59] <autarch> so let's say I have an array of values like <a b c > and I want to construct a regex like /<[ a b c ]>/ - what's the nicest way to get from the data structure to the regex?

[03:59] <autarch> m: class A { method cm { return ::?CLASS.new } }; say A.cm()

[03:59] <camelia> rakudo-moar 8e1997: OUTPUT«A.new␤»

[03:59] <grondilu> /<@array>/

[04:00] <autarch> how about if it's a hash and I want the keys?

[04:00] <grondilu> not sure but <@(%hash.keys)> may work

[04:00] *** Ven joined
[04:00] <autarch> that's what I was wondering

[04:01] <autarch> m: my %h = ( a => 1, b => 2 ); say /<@(%hash.keys)>/

[04:01] <camelia> rakudo-moar 8e1997: OUTPUT«5===SORRY!5=== Error while compiling /tmp/OyuHUISfNr␤Variable '%hash' is not declared. Did you mean '&hash'?␤at /tmp/OyuHUISfNr:1␤------> 3my %h = ( a => 1, b => 2 ); say /<@(7⏏5%hash.keys)>/␤»

[04:01] <autarch> m: my %h = ( a => 1, b => 2 ); say /<@(%h.keys)>/

[04:01] <camelia> rakudo-moar 8e1997: OUTPUT«/<@(%h.keys)>/␤»

[04:01] <autarch> hmm

[04:01] <autarch> m: my %h = ( a => 1, b => 2 ); say /<{%h.keys}>/

[04:01] <camelia> rakudo-moar 8e1997: OUTPUT«/<{%h.keys}>/␤»

[04:01] <grondilu> oh that's weirtd

[04:02] <grondilu> m: my %h = ( a => 1, b => 2 ); say "aaa" ~~ /<{%h.keys}>/

[04:02] <camelia> rakudo-moar 8e1997: OUTPUT«｢a｣␤»

[04:02] <grondilu> you have to match your regex on somthing

[04:02] <autarch> ah

[04:02] <grondilu> m: my %h = ( a => 1, b => 2 ); say "aaa" ~~ /<{%h.keys}>+/

[04:02] <camelia> rakudo-moar 8e1997: OUTPUT«｢aaa｣␤»

[04:02] <grondilu> m: my %h = ( a => 1, b => 2 ); say "aaduha" ~~ /<{%h.keys}>+/

[04:02] <camelia> rakudo-moar 8e1997: OUTPUT«｢aa｣␤»

[04:03] <grondilu> I'm a bit surprised you don't need a @

[04:03] <grondilu> m: my %h = ( a => 1, b => 2 ); say "aaduha" ~~ /<@{%h.keys}>+/

[04:03] <camelia> rakudo-moar 8e1997: OUTPUT«5===SORRY!5=== Error while compiling /tmp/4gQFCXwQjQ␤Unsupported use of @{%h.keys}; in Perl 6 please use @(%h.keys)␤at /tmp/4gQFCXwQjQ:1␤------> 3, b => 2 ); say "aaduha" ~~ /<@{%h.keys}7⏏5>+/␤»

[04:03] <grondilu> m: my %h = ( a => 1, b => 2 ); say "aaduha" ~~ /<@(%h.keys)>+/

[04:03] <camelia> rakudo-moar 8e1997: OUTPUT«｢aa｣␤»

[04:04] <grondilu> ^I'd use this one, the other one is suspicious

[04:04] <autarch> why < and not <[ ?

[04:05] <autarch> and why @( and not @{ ?

[04:05] <grondilu> m: say @{foo}

[04:05] <camelia> rakudo-moar 8e1997: OUTPUT«5===SORRY!5=== Error while compiling /tmp/AKNBpoAgev␤Unsupported use of @{foo}; in Perl 6 please use @foo␤at /tmp/AKNBpoAgev:1␤------> 3say @{foo}7⏏5<EOL>␤»

[04:05] <grondilu> just not the correct syntax

[04:06] <grondilu> @{ is just something that is wrong

[04:06] <geekosaur> perl5 used @{ as a parser hack

[04:06] *** Ven left
[04:07] <grondilu> correct, as in the famous @{[ @stuff ]} idiom for interpolating arrays

[04:07] <autarch> so what about < vs <[ in the regex?

[04:07] <geekosaur> it never really made any sense but getting it to handle @( was too painful. perl6 fixed this.

[04:07] <grondilu> <[ opens a character class

[04:08] <autarch> don't I want a character class if I want to match any key from the regex?

[04:08] *** hartenfels left
[04:08] <autarch> my %h = ( a => 1, b => 2 ); say "aabduha" ~~ /<@(%h.keys)>+/

[04:08] <grondilu> it opens a *literal* character class

[04:08] <geekosaur> no? unless what you meant was to jumble all the keys together

[04:08] <autarch> m: my %h = ( a => 1, b => 2 ); say "aabduha" ~~ /<@(%h.keys)>+/

[04:08] <camelia> rakudo-moar 8e1997: OUTPUT«｢aab｣␤»

[04:08] <geekosaur> they're strings, not a set of individual characters

[04:08] <autarch> m: my %h = ( a => 1, b => 2 ); say "aabduha" ~~ /<[ @(%h.keys) ]>+/

[04:08] <camelia> rakudo-moar 8e1997: OUTPUT«｢h｣␤»

[04:09] <autarch> I don't think I'm following

[04:09] <geekosaur> "character" class not "string" class

[04:09] <geekosaur> <[abcde]> and <[edcba]> are exactly the same charclass

[04:09] <autarch> right .. and?

[04:10] <geekosaur> <[aaa|bbb]> is the same as <[ab|]>

[04:10] <autarch> so what is <abcde> then?

[04:10] <geekosaur> if your keys are always going to be exactly one character, it might happen to do what you want

[04:10] <autarch> ah, I see what you're getting at

[04:10] <geekosaur> as soon as you add a key with more than one character, you will be very unhappy

[04:11] <autarch> so really I think I'd want /@(%h.keys).join(' || ')/ or something like then

[04:11] *** bpmedley joined
[04:11] <autarch> the documentation doesn't talk about how strings interpolate into regexes at all, btw - that would be helpful

[04:12] <autarch> and yes, I know, patches are welcome, but I'm trying to tweak the pod -> html converter before I work on the docs

[04:12] <geekosaur> iirc <abcde> looks for a rule named abcde and invokes its match routine

[04:12] <geekosaur> so if you have rule abcde { ... } then <abcde> matches that rule

[04:12] <autarch> so how does <@(%h.keys)> work?

[04:13] <autarch> m: my %h = ( a => 1, b => 2 ); say /<[ @(%h.keys) ]>+/.perl

[04:13] <camelia> rakudo-moar 8e1997: OUTPUT«/<[ @(%h.keys) ]>+/␤»

[04:13] <autarch> m: my %h = ( a => 1, b => 2 ); say /<@(%h.keys)>+/.perl

[04:13] <camelia> rakudo-moar 8e1997: OUTPUT«/<@(%h.keys)>+/␤»

[04:13] <autarch> argh

[04:13] <autarch> m: my %h = ( a => 1, b => 2 ); dd /<@(%h.keys)>+/

[04:13] <camelia> rakudo-moar 8e1997: OUTPUT«Regex $var = /<@(%h.keys)>+/␤»

[04:13] <autarch> I guess it's making a closure?

[04:14] <geekosaur> I think it's "not supposed" to work per http://design.perl6.org/S05.html#Extensible_metasyntax_(%3C...%3E) but it may be treating it as a quoting group and inserting the keys as a list of things to match?

[04:15] <autarch> m: my %h = ( a => 1, b => 2 ); dd /"{%h.keys.join( ' || ')}"/

[04:15] <camelia> rakudo-moar 8e1997: OUTPUT«Regex $var = /"{%h.keys.join( ' || ')}"/␤»

[04:15] <geekosaur> so < a b > in your case (the spaces are important)

[04:15] <autarch> m: my %h = ( a => 1, b => 2 ); say 'abcdef' ~~ /"{%h.keys.join( ' || ')}"/

[04:15] <camelia> rakudo-moar 8e1997: OUTPUT«Nil␤»

[04:15] <geekosaur> meaning ('a' | 'b')

[04:15] *** cognominal joined
[04:16] *** geraud joined
[04:17] <autarch> aha, I finally found the key part in the synopsis - An interpolated array:       / @cmds /  is matched as if it were an alternation of its literal elements.

[04:17] <geekosaur> so the <> shouldn't be needed there

[04:18] *** Axord joined
[04:36] <skids> m: class A { has $.foo = 42; my role B[\stem] { method foo { say stem.foo } }; has B $.a = B[self].new; }; A.new.a.foo; # interesting if slightly inefficient idiom to deal with sub-objects

[04:36] <camelia> rakudo-moar 8e1997: OUTPUT«42␤»

[05:03] *** Ven joined
[05:07] *** Ven left
[05:10] *** doublec joined
[05:13] *** BenGoldberg left
[05:23] *** raiph joined
[05:35] *** cognominal left
[05:43] *** japhb joined
[05:49] *** japhb left
[05:49] *** japhb joined
[05:53] *** xfix joined
[05:56] *** crux joined
[05:57] *** sprocket left
[06:04] *** Ven joined
[06:05] *** Ven left
[06:10] *** dayangkun_ joined
[06:12] *** dayangkun left
[06:16] *** khw left
[06:26] *** softmoth_ left
[06:32] *** dpk joined
[06:33] *** spider-mario joined
[07:02] *** raiph left
[07:04] *** spider-mario left
[07:07] *** diana_olhovik_ joined
[07:08] *** SmokeMachine_ joined
[07:10] *** Praise- joined
[07:10] *** Praise- left
[07:10] *** Praise- joined
[07:10] *** Juerd_ joined
[07:10] *** Averna joined
[07:11] *** integral joined
[07:11] *** integral left
[07:11] *** integral joined
[07:11] *** ilmari_ joined
[07:11] *** riatre_ joined
[07:12] *** mr_ron_ joined
[07:14] *** orevdiabl joined
[07:14] *** Hotkeys_ joined
[07:15] *** skarn left
[07:15] *** ggherdov left
[07:15] *** SmokeMachine left
[07:15] *** mr_ron left
[07:15] *** ilmari left
[07:15] *** Juerd left
[07:15] *** ilmari_ is now known as ilmari

[07:15] *** Juerd_ is now known as Juerd

[07:15] *** mr_ron_ is now known as mr_ron

[07:16] *** domidumont joined
[07:17] *** domidumont left
[07:17] *** boegel joined
[07:18] *** domidumont joined
[07:18] *** cgfbee left
[07:18] *** skarn joined
[07:18] *** geraud left
[07:18] *** domidumont left
[07:19] *** domidumont joined
[07:20] *** domidumont left
[07:21] *** domidumont joined
[07:21] <dalek> rakudo/curli: ce27a92 | (Stefan Seifert)++ | src/core/CompUnit.pm:

[07:21] <dalek> rakudo/curli: Remove obsolete CompUnit::precomp

[07:21] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/ce27a926a0

[07:22] *** ggherdov joined
[07:22] <[Tux]> test             50000    21.637    21.523

[07:22] <[Tux]> test-t           50000    18.246    18.132

[07:22] *** brrt joined
[07:23] *** cgfbee joined
[07:23] *** Averna left
[07:24] <brrt> good *

[07:26] *** xfix left
[07:26] <[Tux]> tony-o_, the error:

[07:26] <[Tux]> Cannot use a Buf as a string, but you called the Stringy method on it

[07:26] <[Tux]>   in method get_line at /pro/3gl/CPAN/rakudobrew/moar-nom/panda/.panda-work/1447657889_7/lib/CSV/Parser.pm:33

[07:27] *** CIAvash joined
[07:30] *** Averna joined
[07:32] *** darutoko joined
[07:47] *** FROGGS joined
[07:57] *** espadrine_ joined
[08:01] *** abraxxa joined
[08:02] *** espadrine_ left
[08:04] *** darutoko left
[08:05] *** zakharyas joined
[08:06] *** darutoko joined
[08:07] *** salva joined
[08:11] *** telex left
[08:12] *** telex joined
[08:15] *** anaeem1 joined
[08:33] <brrt> cygx: at first sight, it seems to be an error in (adhoc) exceptions within the JIT

[08:33] <brrt> i should probably be able to make a test for that hypothesis

[08:34] <brrt> if it is true, then i'm not 100% sure i can do anything about it

[08:38] *** anaeem1 left
[08:55] *** g4 joined
[09:01] *** ][Sno][ joined
[09:05] *** RabidGravy joined
[09:08] *** dakkar joined
[09:08] <dalek> ecosystem: 04c7862 | bluebear94++ | META.list:

[09:08] <dalek> ecosystem: Add Terminal::WCWidth to the ecosystem

[09:08] <dalek> ecosystem: See https://github.com/bluebear94/Terminal-WCWidth

[09:08] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/04c7862bd9

[09:08] <dalek> ecosystem: fa1816c | RabidGravy++ | META.list:

[09:08] <dalek> ecosystem: Merge pull request #94 from bluebear94/master

[09:08] <dalek> ecosystem: 

[09:08] <dalek> ecosystem: Add Terminal::WCWidth to the ecosystem

[09:08] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/fa1816c862

[09:14] *** Ven joined
[09:19] <jnthn> morning, #perl6

[09:19] <yoleaux> 15 Nov 2015 04:51Z <psch> jnthn: http://irclog.perlgeek.de/perl6/2015-11-15#i_11540381 is kinda-sorta what block bool_enum from being mergeable.  the segfault is the some, except with getlex instead of bindlex, which somewhat off-by-ones, as mentioned earlier

[09:19] <yoleaux> 15 Nov 2015 04:52Z <psch> jnthn: "is the same [issue]", not "is the some"...

[09:19] <yoleaux> 15 Nov 2015 05:05Z <psch> jnthn: nvm, confused myself with sub vs method

[09:19] <yoleaux> 15 Nov 2015 20:22Z <nine> jnthn: Why should CompUnit::Repository::Installation when followed by another one consider its set of modules together with its following repo's? You wrote that the best option across the two of them wins, but I don't see how one can be better.

[09:19] <yoleaux> 15 Nov 2015 20:23Z <nine> jnthn: a CompUnit either matches the DependencySpecification or it doesn't. When it does, in what regard can another candidate be "better"?

[09:20] <jnthn> nine++ # much comp unit hacking \o/

[09:20] *** andreoss joined
[09:22] *** Ven left
[09:23] *** tmtx joined
[09:25] <JimmyZ> jnthn: https://rt.perl.org/Public/Bug/Display.html?id=121830 # I think it still is not fixed, maybe should reopen it :)

[09:25] <jnthn> JimmyZ: That patch makes no sense

[09:25] <JimmyZ> I don't have the right though

[09:25] <jnthn> map needs a block

[09:26] <JimmyZ> ok, so the comment is wrong

[09:26] <JimmyZ> :)

[09:26] <jnthn> I think so

[09:26] <jnthn> Well

[09:26] <jnthn> Maybe worth to git blame

[09:26] <jnthn> But I wonder if some other change got done

[09:26] <jnthn> And the comment left behind

[09:30] <JimmyZ> jnthn: ah, this one https://github.com/rakudo/rakudo/commit/529aa9b5fe2bb9984ef4c9226abbb50e98908cda

[09:32] <jnthn> aha :)

[09:32] <jnthn> So yeah, comment can go :)

[09:34] <JimmyZ> yeah

[09:34] * jnthn remvoes

[09:34] <jnthn> JimmyZ++

[09:34] <JimmyZ> :)

[09:35] <dalek> rakudo/nom: d3f3921 | jnthn++ | src/core/List.pm:

[09:35] <dalek> rakudo/nom: Remove outdated comment.

[09:35] <dalek> rakudo/nom: 

[09:35] <dalek> rakudo/nom: It referred to a block around a gather/take that was removed a while

[09:35] <dalek> rakudo/nom: back. The block to map is needed, given map expects a block. JimmyZ++

[09:35] <dalek> rakudo/nom: for noticing.

[09:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3f3921cb0

[09:38] *** brrt left
[09:44] *** yeahnoob left
[09:50] *** domidumont left
[09:51] *** domidumont joined
[09:55] *** rindolf joined
[10:01] <RabidGravy> m: sub foo() { Str $bar }; # LTA error message

[10:01] <camelia> rakudo-moar d3f392: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CRhKCPAaCc␤Two terms in a row␤at /tmp/CRhKCPAaCc:1␤------> 3sub foo() { Str7⏏5 $bar }; # LTA error message␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤ …»

[10:01] <jnthn> What do you expect?

[10:02] <RabidGravy> "Variable '$bar' is not declared" or some variant thereof

[10:02] <RabidGravy> I can understand *why* it is that message

[10:03] <jnthn> I think the syntax is too malformed for us to get to doing that check

[10:03] <jnthn> In the normal way

[10:03] <jnthn> We do rewrite lots of two terms in a row though

[10:03] <jnthn> So can quite possibly do it that way

[10:03] <jnthn> Maybe with a "(Did you mean `my Str $bar`?)" or so

[10:04] <jnthn> (I'm guessing that is what you were meaning? :))

[10:04] <RabidGravy> yeah that would probably be the one, it's not like I'm losing sleep or anything ;-) It's just in my pre-caffeine overdose state I had to look more than once to see the error

[10:05] <dalek> rakudo/nom: b18ada0 | jnthn++ | src/ (3 files):

[10:05] <dalek> rakudo/nom: Only allow invocant colon on method-y signatures.

[10:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b18ada0202

[10:05] <jnthn> Feel free to file an LTA ticket on it.

[10:06] <jnthn> I think we can do something about it.

[10:06] <jnthn> .tell psch I made that sub vs. method mistake actually give an error now. :-)

[10:06] <yoleaux> jnthn: I'll pass your message to psch.

[10:06] <dalek> roast: 0a2bf66 | jnthn++ | S12-methods/syntax.t:

[10:06] <dalek> roast: Use anon method rather than sub for this test.

[10:06] <dalek> roast: 

[10:06] <dalek> roast: In preparation for only allowing the : seaparator in signatures on

[10:06] <dalek> roast: methods.

[10:06] <dalek> roast: review: https://github.com/perl6/roast/commit/0a2bf66360

[10:07] <dalek> roast: a2c5381 | jnthn++ | S06-signature/errors.t:

[10:07] <dalek> roast: Test for X::Syntax::Signature::InvocantNotAllowed.

[10:07] <dalek> roast: review: https://github.com/perl6/roast/commit/a2c53811f8

[10:09] *** chewie_1982 joined
[10:10] <jnthn> .tell nine We probably need to work at the definition of "better" somewhat, if one can't be found in the existing design docs. I think I'd go with: if there's more than one authority then always claim ambiguity. Otherwise, go with the highest version. That means :ver<3.*> and :ver<3.2+> will do the right kind of thing.

[10:10] <yoleaux> jnthn: I'll pass your message to nine.

[10:11] *** dayangkun_ left
[10:13] *** domidumont left
[10:13] *** domidumont joined
[10:14] <jnthn> .tell nine As for why to search the two installations "in parallel": primarily 'cus I think TimToady++ wants it to be that way, but I think the reasoning is that a systemwide installed later version that matches should be considered over a locally installed earlier version. Hopefully if I'm remembering the intent wrong TimToady++ will notice when backlogging and correct me... :)

[10:14] <yoleaux> jnthn: I'll pass your message to nine.

[10:19] *** Ven joined
[10:21] <dalek> nqp: c52b1cb | jnthn++ | src/vm/moar/ (3 files):

[10:21] <dalek> nqp: Remove long-unrequied hack from early Moar days.

[10:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c52b1cb524

[10:24] *** Ven left
[10:24] <psch> jnthn++

[10:24] <yoleaux> 10:06Z <jnthn> psch: I made that sub vs. method mistake actually give an error now. :-)

[10:24] <psch> jnthn: i've PR'd a fix for the SEGV, the bool_enum branch still gens wrong code though

[10:31] *** ed25519 joined
[10:35] *** tmtx left
[10:54] *** rurban joined
[11:08] *** rurban left
[11:09] *** rurban joined
[11:10] *** rurban left
[11:20] *** rurban joined
[11:21] *** Ven joined
[11:22] *** llfourn left
[11:27] *** Ven left
[11:32] *** cdc joined
[11:33] <cdc> m: sub postfix:<!>(Int $a) is looser(&infix:<+>) { 2 * $a }; say (3 + 4!)

[11:33] <camelia> rakudo-moar b18ada: OUTPUT«11␤»

[11:34] <cdc> Hello #perl6 o/  Is this ^ expected?

[11:35] <psch> cdc: looks fine to me, you're saying postfix:<!> is looser and it is..?

[11:36] <cdc> psch: oh, it seems I didn't understand "is looser" correctly, then :(

[11:37] <cdc> psch: I'd like to have (3 + 4!) == 14

[11:37] <cdc> m: sub postfix:<!>(Int $a) is tighter(&infix:<+>) { 2 * $a }; say (3 + 4!)

[11:37] <camelia> rakudo-moar b18ada: OUTPUT«11␤»

[11:38] *** loren joined
[11:39] <psch> *that* seems unexpected...

[11:39] <moritz> it still looks tighter with "is looser"

[11:39] <ilmari> tighter = higher precedence?

[11:40] <moritz> yes

[11:40] <psch> m: sub postfix:<!>(Int $a) is tighter(&infix:<+>) { 2 * $a }; say 3 + 4 !

[11:40] <camelia> rakudo-moar b18ada: OUTPUT«5===SORRY!5=== Error while compiling /tmp/VbWIEsGG97␤Confused␤at /tmp/VbWIEsGG97:1␤------> 3ighter(&infix:<+>) { 2 * $a }; say 3 + 47⏏5 !␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement …»

[11:41] <moritz> expecting any of... postfix

[11:41] <moritz> ah, it expected a postfix, but got whitespace instead

[11:41] <psch> yeah

[11:41] <psch> only dottyop gets the ws there

[11:42] <cdc> moritz, psch: should I file a bug report?

[11:43] <psch> m: sub postfix:<!>(Int $a) is tighter(&infix:<+>) { 2 * $a }; say 3 + 4 .&postfix:<!> # i'd expect this to work though...

[11:43] <camelia> rakudo-moar b18ada: OUTPUT«5===SORRY!5=== Error while compiling /tmp/2x8iQGwpYg␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at /tmp/2x8iQGwpYg:1␤------> 3ter(&infix:<+>) { 2 * $a }; say 3 + 4 .&7⏏5postfix:<!> # i'd expect this to work th␤»

[11:43] <moritz> cdc: yes please

[11:45] *** Averna left
[11:45] <psch> oh, i was wrong from the start o.o

[11:45] <psch> looser was right in the first place, sorry

[11:45] <psch> not sure what the confusion was in my head

[11:45] *** rurban left
[11:45] <cdc> psch: no pb :)

[11:46] * jnthn is not sure quite how relative precedence between infixes and postfixes works out

[11:47] <jnthn> In so far as we parse prefix/postfix as part of a term

[11:47] <psch> m: sub postfix:<!>(Int $a) is looser(&postfix:<++>) { 2 * $a }; say 3 + 4!

[11:47] <camelia> rakudo-moar b18ada: OUTPUT«11␤»

[11:47] <jnthn> And then look for an infix, then another term.

[11:48] *** xpen left
[11:48] *** cdc_ joined
[11:49] <zengargoyle> good * #perl6

[11:49] *** cygx joined
[11:49] <cygx> m: BEGIN "32".subst("3", "4")

[11:49] <yoleaux> 03:53Z <mr_ron> cygx: MVM_JIT_DISABLE allowed the build with mingw/Strawberry Perl to complete but with make test all the NativeCall tests failed both with and without MVM_SPESH_DISABLE.  With Microsoft build tools the NativeCall tests pass.

[11:49] <camelia> rakudo-moar b18ada: OUTPUT«5===SORRY!5=== Error while compiling /tmp/YgzZT7meYZ␤An exception occurred while evaluating a BEGIN␤at /tmp/YgzZT7meYZ:1␤Exception details:␤  Type check failed in binding cds; expected Any but got Mu␤    in code  at /tmp/YgzZT7meYZ:1␤␤»

[11:50] *** znpy joined
[11:50] <psch> m: BEGIN $/.^name.say

[11:50] <camelia> rakudo-moar b18ada: OUTPUT«Nil␤»

[11:50] <psch> m: BEGIN $/.^name.say; $/.^name.say

[11:50] <camelia> rakudo-moar b18ada: OUTPUT«Nil␤Nil␤»

[11:50] <psch> m: BEGIN $/.WHAT.say; $/.WHAT.say

[11:50] <camelia> rakudo-moar b18ada: OUTPUT«Nil␤Nil␤»

[11:51] <psch> heh

[11:51] <jnthn> m: BEGIN { "32".subst("3", "4") }

[11:51] <camelia> rakudo-moar b18ada: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Kiq1zBaVAl␤An exception occurred while evaluating a BEGIN␤at /tmp/Kiq1zBaVAl:1␤Exception details:␤  Type check failed in binding cds; expected Any but got Mu␤    in block  at /tmp/Kiq1zBaVAl:1␤␤»

[11:51] <jnthn> m: BEGIN { my $/; "32".subst("3", "4") }

[11:51] <camelia> rakudo-moar b18ada: ( no output )

[11:51] * cdc_ has filed #126653

[11:51] *** RabidGravy left
[11:51] * jnthn delegates it to TimToady to decide if it's bug or "no, you can't expect that to work" 

[11:52] <cdc_> :)

[11:54] <timotimo> o/

[12:02] <mrf> o/

[12:05] <timotimo> today i'll be the one to do the perl6 weekly again

[12:06] <timotimo> if you have something in particular you want included that i might miss, i'd appreciate a hint

[12:09] *** Skarsnik joined
[12:12] <moritz> ++timotimo

[12:13] <moritz> I have to say that docs/ChangeLog already looks impressive

[12:14] <timotimo> for just the week or the next full release?

[12:14] <Zoffix> timotimo, we got Pod::Coverage up and soon enough it will be included as part of the "Kwalitee" metrics of the dists in ecosystem. Not sure if it's perl6-weekly-worthy, but would be nice to spread the word so module authors would examine the state of their docs :)

[12:15] <arnsholt> timotimo: I've gotten the rudiments of a pure Perl 6 kernel working, but the ipython docs are *terrible* on how messages are sent and what messages are possible

[12:15] <timotimo> arnsholt: i felt like the docs on what messages are possible was kind of exhaustive and all right

[12:15] <arnsholt> I'll try to push my changes to Net::ZMQ and IPerl6 today. Need to section things into commits first

[12:16] <arnsholt> Yeah, the actual messages seem to be documented, actually

[12:16] <timotimo> first step is always to look at last week's weekly to see what was already covered :D

[12:16] <arnsholt> But how they're sent over the socket isn't clear to me

[12:17] <timotimo> oh

[12:17] <timotimo> that's easy

[12:17] <timotimo> it has this silly framing protocol

[12:17] <timotimo> first message is an ID, then comes the literal string "<--ID|MSG-->" or something

[12:18] <Zoffix> heh

[12:18] <timotimo> did you see that in the docs?

[12:18] <timotimo> it's explained and everything! :)

[12:18] <arnsholt> Yeah, now I see what they're trying to say!

[12:18] <timotimo> oh, actually, i think it's IDS, because a message can have multiple IDs

[12:18] <arnsholt> Yeah, but a single message, presumably

[12:19] <timotimo> of course

[12:19] <timotimo> well, a multi-part message

[12:19] *** llfourn joined
[12:19] <timotimo> ZMQ has a name for that, but i forget

[12:19] <arnsholt> And they're not entirely clear on what "serialized dict" actually means, but I suppose it's just UTF-8 encoded JSON

[12:19] <timotimo> yeah, that's right

[12:20] *** cdc_ left
[12:20] <timotimo> pyZMQ actually does that for you if you pass a dict to the send function

[12:20] *** sufrostico joined
[12:21] <arnsholt> Ah, right. I don't think Net::ZMQ will do that anytime soon =)

[12:23] *** llfourn left
[12:24] *** Ven joined
[12:26] *** molaf joined
[12:26] <timotimo> i'm glad if i can be your doc guide

[12:28] <arnsholt> Yeah, I'll pester you more soonish about getting this to work

[12:28] <arnsholt> From the experiment with the inline Python version, I think getting a barebones kernel working should be within reach

[12:28] <timotimo> does that mean if i wait with the weekly for a few hours i can report a working iperl6 kernel?

[12:29] <arnsholt> Not that close, no =)

[12:29] <timotimo> OK

[12:29] <arnsholt> Well, you can report the proof-of-concept Inline::Python one, I guess. But the pure Perl one will take some more work

[12:30] <timotimo> sure :)

[12:30] <arnsholt> A week or two, I guess. Depending on tuits and if other people start pitching in

[12:30] <timotimo> understood

[12:31] <timotimo> do we have a plan for things like displaying things with the display api?

[12:31] *** Ven left
[12:31] <timotimo> like pictures, HTML things, stuff like that?

[12:31] <arnsholt> BTW, if you have the ZMQ man pages installed: does your version of ZMQ have both zmq_recv and zmq_recvmsg, or just one of them?

[12:32] <arnsholt> My current plan is just to get normal code execution working

[12:32] <zengargoyle> woot, =data almost works.  had to bypass all the nqp .add_constant / .compile_time_value madness :)

[12:32] <timotimo> don't have the man pages, no :(

[12:34] <arnsholt> Ah, no problem. We'll just see if the code breaks with my Net::ZMQ patches =D

[12:34] <timotimo> wonderful

[12:35] <arnsholt> 'Cause it appears that some versions of libzmq have both sendmsg and send, and other have just send (but with the arguments of sendmsg from the other ones)

[12:35] <timotimo> o_O

[12:35] <arnsholt> Yeah.

[12:36] <arnsholt> But I've got to got for a bit. Back in an hour or so

[12:36] <timotimo> no problem. thanks for the effort!!

[12:36] <timotimo> people will be so happy :3

[12:37] <timotimo> here's something i'm noticing

[12:38] <timotimo> on mondays, people visit and repost/tweet/share/... the weekly ... but they do it usually many hours before the weekly post of that week goes up

[12:38] <timotimo> so i *think* they're always seeing weekly posts one week later than they are posted %)

[12:39] *** AlexDaniel joined
[12:43] *** flaviusb left
[12:43] *** kaare_ joined
[12:44] *** flaviusb joined
[12:44] *** kid51 joined
[12:46] <stmuk> that suggests the weekly should come out on Sunday to me

[12:46] <timotimo> then the same thing will happen on sundays :)

[12:46] <timotimo> maybe the weekly should happen every 6 days rather than every 7

[12:47] <stmuk> we could try a sequence where the day is dec'd by 1 each week

[12:47] <stmuk> to fool people

[12:47] <stmuk> that wouldn't be confusing at all :)

[12:47] <timotimo> that's exactly what i mean by "every 6 days"

[12:48] *** rurban joined
[12:48] <timotimo> if you dec the day by 1 each week and wrap at the 7th day, you'll end up with a weekly on the day after the previous weekly and then a weekly after 14 (or 13?) days

[12:49] <CIAvash> require DateTime::Format <&strftime>; gives this error: Trying to import symbols &strftime from 'DateTime::Format', but it does not export anything

[12:49] <CIAvash> using this module: https://github.com/supernovus/perl6-datetime-format/

[12:50] <CIAvash> Am I doing it wrong?

[12:51] <AlexDaniel> m: .say for 1^..^3

[12:51] <camelia> rakudo-moar b18ada: OUTPUT«2␤»

[12:51] <AlexDaniel> hmm

[12:53] *** kid51 left
[12:54] *** RabidGravy joined
[12:54] <mrf> Is it possible to make something like /$<foo>=[$<bar>=[<[a..z]>]* % '.' ]*/ give a match object like $/<foo><bar> rather than $/<foo> and $/<bar>

[12:55] <timotimo> m: "hello" ~~ /$<foo><bar>=<[a..z]>+/; say $/.perl

[12:55] <camelia> rakudo-moar b18ada: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter = (must be quoted to match literally)␤at /tmp/pXS0VWo9fp:1␤------> 3"hello" ~~ /$<foo><bar>7⏏5=<[a..z]>+/; say $/.perl␤Unable to parse regex; couldn't find final '/'␤at /tmp/pXS0VWo9fp:1…»

[12:55] *** pmurias joined
[12:55] <timotimo> ah

[12:55] <timotimo> that syntax doesn't syntax

[12:55] *** pmurias_ joined
[12:56] <timotimo> i don't think there is a way without making the inner part an extra regex that you call

[12:56] <mrf> :(

[12:57] <psch> m: "a" ~~ / $<foo>=($<bar>=a) /; $<foo>.say #

[12:57] <camelia> rakudo-moar b18ada: OUTPUT«｢a｣␤ bar => ｢a｣␤»

[12:57] <psch> i think that still leaves $<bar> around though

[12:57] <psch> m: "a" ~~ / $<foo>=($<bar>=a) /; $<bar>.say 

[12:57] <camelia> rakudo-moar b18ada: OUTPUT«Nil␤»

[12:57] <psch> ah, no

[12:57] <timotimo> oh!

[12:57] <mrf> :D :D

[12:57] <timotimo> nice catch, psch 

[12:57] <mrf> \o/

[12:57] <cygx> CIAvash: I believe that's the correct syntax

[12:58] <psch> m: "a" ~~ / $<foo>=$<bar>=a /; $<bar>.say 

[12:58] <camelia> rakudo-moar b18ada: OUTPUT«｢a｣␤»

[12:58] <mrf> psch++ thank you thats what I needed. Didn't occur to me to use a capturig group got a name capture.

[12:58] <psch> 'cause without capturing there it's equiv to that

[12:58] <cygx> random ideas to try: hacke the module to use module { ... } instead of unit module or try exportinga proto for strftime

[12:58] <cygx> *hack

[12:58] <timotimo> i don't think that'll help, "unit module" is purely syntactic IIUC

[12:59] <psch> ISTR there's something different about module and package that has to do with exporting...

[12:59] <mrf> m: "a" ~~ / $<foo>=($<bar>=a) /; $/0.say

[12:59] <camelia> rakudo-moar b18ada: OUTPUT«5===SORRY!5=== Error while compiling /tmp/I_2I_Yj2KK␤Two terms in a row␤at /tmp/I_2I_Yj2KK:1␤------> 3"a" ~~ / $<foo>=($<bar>=a) /; $/7⏏050.say␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤      …»

[12:59] <mrf> m: "a" ~~ / $<foo>=($<bar>=a) /; $0.say

[13:00] <camelia> rakudo-moar b18ada: OUTPUT«Nil␤»

[13:00] <mrf> perfect

[13:01] <cygx> timotimo: probably

[13:01] <CIAvash> I wrote a small module(with unit module) and exported a sub, It works. Not sure why it's not working on DateTime::Format

[13:02] <mrf> OOI what is the purpose of the unit keyword? as in "unit module Foo {}"

[13:02] <timotimo> unit module Foo { } is a very strange idea of "unit"

[13:02] <cygx> CIAvash: have you tried adding and exporting a proto?

[13:02] <timotimo> to me, all it does is remove the need for { }

[13:02] <cygx> proto sub strftime (|) is export {*}

[13:02] <timotimo> perhaps it's something about our vs is export?

[13:03] <nine> Good #perl6, afternoon!

[13:03] <yoleaux> 10:10Z <jnthn> nine: We probably need to work at the definition of "better" somewhat, if one can't be found in the existing design docs. I think I'd go with: if there's more than one authority then always claim ambiguity. Otherwise, go with the highest version. That means :ver<3.*> and :ver<3.2+> will do the right kind of thing.

[13:03] <yoleaux> 10:14Z <jnthn> nine: As for why to search the two installations "in parallel": primarily 'cus I think TimToady++ wants it to be that way, but I think the reasoning is that a systemwide installed later version that matches should be considered over a locally installed earlier version. Hopefully if I'm remembering the intent wrong TimToady++ will notice when backlogging and correct me... :)

[13:03] *** loren left
[13:04] <timotimo> oh hey nine!

[13:04] <cygx> timotimo: why I was asking about unit is that the placement od exported subs as well as sub EXPORT is apparently important

[13:04] <cygx> require only sees things exported within the module, but sub EXPORT must live outside of it

[13:04] <timotimo> hm, i think sub EXPORT still wants to be outside it, yeah

[13:04] <mrf> timotimo: so you would only do "unit module Foo;" or "module Foo {}"

[13:04] <timotimo> that's my understanding

[13:05] <timotimo> i must admit i don't write many module-y things at all, so i don't have much experience with the whole thing

[13:05] <mrf> I have seen a few examples of things like "unit grammar Foo {}" around which is why I asked as "grammar Foo {}" seemed to work as expected

[13:06] <moritz> you need "unit" for the "unit grammar Foo;" syntax

[13:07] <mrf> ok. Which I assume is roughly equivelant to p5s package Foo; syntax

[13:07] <CIAvash> timotimo: from the module's source code: multi sub strftime (Str $format is copy,DateTime $dt=DateTime.now,Str :$lang=$datetime-format-lang,Bool :$subseconds,) is export {

[13:07] <CIAvash> timotimo: so it is exported

[13:07] <Skarsnik> well it's exported by default when you do use x)

[13:08] <CIAvash> Yeah

[13:08] *** rindolf left
[13:09] <AlexDaniel> m: say 4^^^ ^ ^ ^2;

[13:09] <camelia> rakudo-moar b18ada: OUTPUT«Nil␤»

[13:09] <timotimo> Skarsnik: huh? exported by default?

[13:10] <RabidGravy> yeah unqualified is export exports the symbol by default

[13:10] <Skarsnik> Module A { sub something is export {}}; use A; something();

[13:10] <Skarsnik> m: module A { sub something is export {}}; use A; something();

[13:10] <camelia> rakudo-moar b18ada: OUTPUT«===SORRY!===␤Could not find A in any of:␤  file#/home/camelia/.perl6/2015.10-323-gb18ada0/lib␤  inst#/home/camelia/.perl6/2015.10-323-gb18ada0␤  file#/home/camelia/rakudo-m-inst-1/share/perl6/lib␤  file#/home/camelia/rakudo-m-inst-1/share/perl6/v…»

[13:10] <RabidGravy> to not export by default there needs to be an 'export tag'

[13:11] <timotimo> Skarsnik: you want "import" instead of "use" there, as "use" looks in the filesystem

[13:11] <RabidGravy> Skarsnik, in that case you just need "import A;"

[13:11] <Skarsnik> m: module A { sub something is export {}}; import A; something();

[13:11] <camelia> rakudo-moar b18ada: ( no output )

[13:11] <Skarsnik> oh thx x)

[13:13] <Skarsnik> I am still trying to come out with a module name for something that test the confirmity of NC type to their C counterpart. NativeCall::TypeDiag?

[13:14] <timotimo> StructLinter?

[13:14] <timotimo> StructConformance?

[13:16] <psch> m: say 1 ^^ 2; say 1 xor 2

[13:16] <camelia> rakudo-moar b18ada: OUTPUT«Nil␤1␤»

[13:16] <Skarsnik> It's more the prefix. NativeCall make it a part of NC? 

[13:16] <psch> m: say infix:<^^>(1,2); say 1 xor 2

[13:16] <camelia> rakudo-moar b18ada: OUTPUT«Nil␤1␤»

[13:17] *** znpy left
[13:18] <pmurias_> jnthn: does the grant roadmap/test list look sane: https://github.com/pmurias/grant_proposal/blob/master/template.pod

[13:21] <timotimo> i don't see a problem with using NativeCall::

[13:22] <zengargoyle> Note, EXPORT can't be declared inside a package because presently rakudo (2015.09) seems to treat EXPORT as part of the compunit rather than the package.

[13:22] <zengargoyle> that's in the docs at the moment.

[13:26] <CIAvash> cygx: It has not effect

[13:26] <CIAvash> *no

[13:26] <cygx> CIAvash: then, I'm all out of ideas :(

[13:27] *** rindolf joined
[13:27] *** Ven joined
[13:28] *** rindolf left
[13:31] *** mr_ron left
[13:34] *** rindolf joined
[13:35] *** Ven left
[13:35] <cygx> CIAvash: as a workaround, you could do this:

[13:35] <cygx> require DateTime::Format; my &strftime := ::('DateTime::Format')::EXPORT.WHO<DEFAULT>.WHO<&strftime>;

[13:37] <moritz> eeeks

[13:39] <geekosaur> glad I'm not the only one who had that reaction

[13:43] <Skarsnik> CIAvash, what are you trying to do?

[13:44] <cygx> actually, you don't need the WHO

[13:44] <RabidGravy> at a guess re-export a sub

[13:44] <cygx> just &::('DateTime::Format')::EXPORT::DEFAULT::strftime should suffice

[13:45] <CIAvash> Skarsnik: to do `require DateTime::Format <&strftime>` instead of `use DateTime::Format`

[13:46] <Skarsnik> Hm, I am not sure to understand how evalbot work. Should running it our own work out of box (it build perl6 stuff?). Or should I just add a server/channel to the git repository to have camelia somewhere else?

[13:47] <cygx> CIAvash: `require DateTime::Format; my &strftime := &::('DateTime::Format')::EXPORT::DEFAULT::strftime;` works for me

[13:49] <CIAvash> cygx: yeah, it works

[13:50] *** pjscott joined
[13:51] <CIAvash> But why shouldn't `require DateTime::Format <&strftime>` work?!

[13:51] <cygx> it should

[13:52] *** SmokeMachine_ left
[13:52] *** SmokeMachine_ joined
[13:52] <pjscott> Wondering why .HOW requires argument: 

[13:53] <Skarsnik> m-star: require DateTime::Format <&strftime>;

[13:53] *** isacloud left
[13:53] <Skarsnik> r-star: require DateTime::Format <&strftime>;

[13:53] <pjscott> > 1.HOW.name('fish')  # Int

[13:55] <jnthn> To allow for prototype-like meta-objects as well as class-like ones.

[13:55] <moritz> pjscott: general calling convention for the MOP, to allow... what jnthn said

[13:55] *** olinkl joined
[13:55] *** isacloud joined
[13:56] <jnthn> For example, coercion types don't carry any meta-state around with them, so they get a singleton meta-object.

[13:56] *** Spot__ joined
[13:56] *** PotatoGim joined
[13:56] <jnthn> And need the actual type passed to get the data needed.

[13:59] <pjscott> Got it

[14:08] *** sufrostico left
[14:15] <CIAvash> I changed `unit module DateTime::Format;` to `unit module Format;` in module's source code and then this worked: require Format:file('[Path to /DateTime/Format.pm6]') <&strftime>;

[14:15] <CIAvash> does that say anything?

[14:19] <dalek> doc: 3754fdc | (Mike Francis)++ | doc/Language/regexes.pod:

[14:19] <dalek> doc: Document recent changes to allow non-inclusive ranges as quantifiers

[14:19] <dalek> doc: review: https://github.com/perl6/doc/commit/3754fdcaf7

[14:19] <dalek> doc: 4993047 | (Mike Francis)++ | doc/Language/regexes.pod:

[14:19] <dalek> doc: Fixed typo

[14:19] <dalek> doc: review: https://github.com/perl6/doc/commit/499304701f

[14:19] <dalek> doc: 9d1ef4e | (Zoffix Znet)++ | doc/Language/regexes.pod:

[14:19] <dalek> doc: Merge pull request #199 from ungrim97/feature/document_quantifier_changes

[14:19] <dalek> doc: 

[14:19] <dalek> doc: Document recent changes to allow non-inclusive ranges as quantifiers

[14:19] <dalek> doc: review: https://github.com/perl6/doc/commit/9d1ef4e9ab

[14:19] <dalek> doc: 6ee2200 | (Mike Francis)++ | doc/Language/regexes.pod:

[14:19] <dalek> doc: Document how to create nested named captures without subrules

[14:19] <dalek> doc: review: https://github.com/perl6/doc/commit/6ee22008b0

[14:19] <dalek> doc: 30b231c | (Zoffix Znet)++ | doc/Language/regexes.pod:

[14:19] <dalek> doc: Merge pull request #200 from ungrim97/feature/nested_named_captures

[14:19] <dalek> doc: 

[14:19] <dalek> doc: Document how to create nested named captures without subrules

[14:19] <dalek> doc: review: https://github.com/perl6/doc/commit/30b231c7ce

[14:23] <mrf> Zoffix++ Cheers

[14:25] <cygx> jnthn: CIAvash: test case: require JSON::Tiny; require DateTime::Format; say OUR::("JSON::Tiny"); say OUR::("DateTime::Format")

[14:26] <cygx> DateTime::Format doesn't get added to OUR::, for whatever reason...

[14:27] <pmurias_> jnthn: what do you think would be a realistic time estimate for rakudo-js?

[14:28] <moritz> pmurias_: doesn't that depend a lot on how much you work on it?

[14:28] <jnthn> pmurias_: Didn't get to read it yet; will do during my next spectest run :)

[14:28] <pmurias_> jnthn: ok

[14:30] *** ribasushi joined
[14:31] *** abaugher left
[14:31] *** abaugher joined
[14:34] <pmurias_> moritz: you mean in terms of man-hours and the date differences vs start from finish?

[14:34] *** sprocket joined
[14:35] <moritz> pmurias_: the man hours per week affect the calendar weeks/months/years that it takes, primarily

[14:35] *** tokuhiro_ left
[14:35] <moritz> pmurias_: but also if the time commitment is too low, it might never finish, because you spend most of your time chasing API changes

[14:37] <pmurias_> I'm planning to focus on it full time if the grant gets approved, so API changes shouldn't be a huge factor

[14:37] *** pippo joined
[14:37] <pippo> o/ #perl6.

[14:38] *** zengargoylew joined
[14:39] *** rindolf left
[14:41] *** pmurias_ left
[14:42] *** pmurias left
[14:42] <cygx> CIAvash: jnthn: https://gist.github.com/cygx/cfef662ea505cd68b2e8 fixes the issue, but I have no idea if that's the Right Thing to do

[14:43] *** pmurias joined
[14:43] *** pmurias_ joined
[14:48] *** pmurias_ left
[14:48] *** pmurias left
[14:49] <jdv79> RabidGravy: are you building some sort of service thing in p6?

[14:50] *** pjscott left
[14:51] <[Coke]> http://www.infoworld.com/article/2882300/perl/perl-creator-larry-wa

[14:51] <[Coke]> ll-rethought-version-6-due-this-year.html

[14:52] <[Coke]> http://www.infoworld.com/article/2882300/perl/perl-creator-larry-wall-rethought-version-6-due-this-year.html

[14:52] <[Coke]> there.

[14:52] *** khw joined
[14:53] *** yqt joined
[14:53] <[Coke]> why is there a perl6/rakudo? ?

[14:54] <[Coke]> ah. why "was" there. nevermind.

[14:54] <jdv79> [Coke]: is that article from febrary

[14:57] *** skids joined
[14:58] *** pmurias joined
[15:00] *** pmurias_ joined
[15:00] *** sprocket left
[15:01] <[Coke]> I have no idea. Just saw it on twitter today

[15:01] <RabidGravy> jdv79, sort of yes

[15:01] *** sufrostico joined
[15:07] <RabidGravy> jdv79, eventually I going to finish the radio station management system that I started writing in P5 in P6, but right now it's yaks all the way down

[15:11] *** bpmedley left
[15:12] *** corbyhaas joined
[15:13] <corbyhaas> Buddy in another channel just linked video of Larry's recent talk and I'm hyyyyyyyyyyyped.

[15:15] <PerlJam> corbyhaas: glad to hear it :)

[15:16] <PerlJam> heh ... glanced at an email that said "Project Advent" in the subject and at first I thought it was for Perl, but no, it's actually from my church.  Weird how the default expectation got flipped in my head.

[15:17] <pink_mist> heh

[15:18] *** ed25519 left
[15:20] <brabo> corbyhaas: :p

[15:22] *** brrt joined
[15:25] *** softmoth_ joined
[15:30] *** raiph joined
[15:35] *** tokuhiro_ joined
[15:40] *** tokuhiro_ left
[15:40] <pmurias> hmm, should I send by rakudo-js grant proposal to the TPF Grants Committe or to the Ian Hague Perl 6 Development Grants?

[15:41] <PerlJam> Is there even any money left in the latter?

[15:41] <moritz> I think so, yes

[15:41] <moritz> pmurias: I'd submit it as a Hague grant

[15:41] <moritz> less rigor in the process

[15:42] <PerlJam> and it's specifically Perl 6, so the competition pool is much smaller :)

[15:42] <moritz> aye

[15:44] * zengargoylew wonders who besided myself has strong opinions on POD's =data blocks....

[15:44] <timotimo> zengargoylew: i'll be happy when we have working =data blocks in any case :)

[15:44] <timotimo> it's been a long time since i beat my head against the pod code :|

[15:45] <PerlJam> (working =data blocks)++ :)

[15:45] <zengargoylew> if i can straighten out some details, it's working.

[15:45] *** abraxxa left
[15:46] <zengargoylew> i.e. $=data[0] gives me first un-named data section.  $=data<name1> gives me that named section.

[15:47] <timotimo> very good!

[15:47] <zengargoylew> need to decide whether the abbreviated form keeps newline or not.. and massage stuff to join array of lines, consider newlines, etc.

[15:48] <zengargoylew> or leading whitespace.

[15:49] <zengargoylew> but the hardest part for me at least seems to be at a workable stage.

[15:49] *** pdcawley joined
[15:49] *** pdcawley_ joined
[15:49] <nine> Speaking of opinions: when one loads a Perl 5 module with use Foo:from<Perl5>; Inline::Perl5 creates a Foo package in Perl 6 space. Question: should it also create packages for modules loaded by Foo? Some modules like SNMP depend on this. You load the master module and get a whole namespace.

[15:52] <pmurias> moritz: the Hague grants has a more flexible process which should allow me to submit it later this week rather then today which should allow me to finish up some nqp-js things to have a cleaner starting point

[15:52] <hoelzro> nine: maybe only packages that are within the Foo:: package

[15:52] <hoelzro> (also, morning #perl6)

[15:52] <PerlJam> nine: what hoelzro said.

[15:53] <jnthn> pmurias: "web-base REPL" -> "web-based REPL"

[15:53] <nine> hoelzro: good morning! Yes, that might be a workable compromise.

[15:54] <jnthn> pmurias: It's a nit but "Get the part of the rakudo setting written in NQP" is a little off in that I don't consider the MOP/BOOSTRAP part of the setting really.

[15:54] <PerlJam> nine: btw, if there's already a Foo in P6-space, what happens when you do use Foo:from<Perl5> ?  (and how does that affect creating sub Foo:: namespaces>?)

[15:54] *** kjs_ joined
[15:55] <jnthn> pmurias: One area of concern: what is your strategy for taking on gather/take?

[15:55] *** xinming joined
[15:57] *** Psyche^_ joined
[15:57] *** FROGGS left
[15:58] <zengargoylew> i tend to think of P6 having everything lexical scoped, so name collisions are easily avoided/worked-around

[15:58] <dalek> roast: b0c517b | coke++ | S32-hash/adverbs.t:

[15:58] <dalek> roast: Fudge for the JVM so we can complete the test.

[15:59] <dalek> roast: review: https://github.com/perl6/roast/commit/b0c517be4d

[15:59] *** ZoffixW joined
[16:00] <ZoffixW> Is there any way to shove that ( $h, $s, $v ) unpacking into the signature?

[16:00] <ZoffixW> m: sub x ( Array $x ){ my ( $h, $s, $v ) = $x; say [$h, $s, $v].perl };  x [42, 54, 72];

[16:00] <camelia> rakudo-moar b18ada: OUTPUT«[42, 54, 72]␤»

[16:00] <timotimo> sure

[16:00] <timotimo> m: sub x ( Array $x ($h, $s, $v) ) { say $h; say $s; say $x; }; x [42, 54, 72];

[16:00] <camelia> rakudo-moar b18ada: OUTPUT«42␤54␤[42 54 72]␤»

[16:00] *** Psyche^ left
[16:00] <moritz> m: sub x ( @ ( $v, $s, $v ) ) { say [$h, $s, $v].perl }; x [42, 54, 72]

[16:00] <camelia> rakudo-moar b18ada: OUTPUT«5===SORRY!5=== Error while compiling /tmp/oVx7i_lRTg␤Redeclaration of symbol $v␤at /tmp/oVx7i_lRTg:1␤------> 3sub x ( @ ( $v, $s, $v7⏏5 ) ) { say [$h, $s, $v].perl }; x [42, 5␤    expecting any of:␤        shape declaration␤»

[16:01] <moritz> m: sub x ( @ ( $h, $s, $v ) ) { say [$h, $s, $v].perl }; x [42, 54, 72]

[16:01] <camelia> rakudo-moar b18ada: OUTPUT«[42, 54, 72]␤»

[16:01] <dalek> nqp: 427fedd | jnthn++ | src/ (2 files):

[16:01] <dalek> nqp: Cope properly with params whose name is "".

[16:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/427fedd4bf

[16:01] * moritz too slow, timotimo++ too fast

[16:01] <ZoffixW> Oh, sweet. Perl6++ timotimo++ moritz++

[16:01] <timotimo> :3

[16:01] <dalek> nqp: 54f2adf | jnthn++ | tools/build/MOAR_REVISION:

[16:01] <dalek> nqp: Bump MOAR_REVISION for named arg flattening fixes.

[16:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/54f2adf729

[16:01] <dalek> nqp: bf7b9bb | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[16:01] <dalek> nqp: Don't dis-order flattening named args on Moar.

[16:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bf7b9bb369

[16:02] *** Nei joined
[16:03] <dalek> rakudo/nom: 80ea923 | jnthn++ | / (3 files):

[16:03] <dalek> rakudo/nom: Bump to NQP/Moar with flattening named arg fixes.

[16:03] <dalek> rakudo/nom: 

[16:03] <dalek> rakudo/nom: This entailed some ABI changes, chased in the C updates in this patch.

[16:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80ea9231fb

[16:04] <pmurias> jnthn: thank you for nitpicking, carefully reading is appreciated. ;)

[16:04] <dalek> roast: 326b413 | jnthn++ | S06-signature/named-parameters.t:

[16:04] <dalek> roast: Tests for RT #113546.

[16:04] <dalek> roast: review: https://github.com/perl6/roast/commit/326b4130ca

[16:04] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=113546

[16:05] <pmurias> jnthn: I should really think over on my gather/take support so it doesn't end up a huge performance hit

[16:05] <Skarsnik> what is the type for type? like if want to write sub foo($a){}; foo(int32); what should I put in front of $a?

[16:05] <timotimo> Any:U for example

[16:06] <moritz> types are typically objects of their own type, so Int is an Int :-)

[16:06] <moritz> and :U means undefined, so not an instance

[16:06] * ZoffixW wonders if Perl 6 has some sort of magical .range-limit thing

[16:06] <timotimo> that's right

[16:06] <pmurias> jnthn: something naive like a CPS transform everywhere is something that's best avoided

[16:06] <jnthn> pmurias: It's not just a perf issue, getting it to work at all can take quite some engineering.

[16:06] <ZoffixW> Some more concise way to write this: http://fpaste.scsys.co.uk/501566

[16:06] <timotimo> i have no idea what you expect ".range-limit" to be

[16:06] <moritz> m: say uint32.Range

[16:06] <camelia> rakudo-moar b18ada: OUTPUT«0..4294967295␤»

[16:07] <timotimo> well, we have max= and min=

[16:07] <ZoffixW> $x.range-limit(0..^360);

[16:07] <zengargoylew> m: sub foo(::T $type){ say T }; foo(Int);

[16:07] <camelia> rakudo-moar b18ada: OUTPUT«(Int)␤»

[16:07] <ZoffixW> And if it's below, it assigns 0, and if it's above, it assigns 360

[16:07] <moritz> ZoffixW: subset Degree of Real where 0..^360

[16:07] <moritz> oh, coercive

[16:07] <ZoffixW> Yeah, it has to be coercive.

[16:08] <cygx> ZoffixW: but degrees should wrap around, not truncate

[16:08] *** kjs_ left
[16:08] <timotimo> m: my $a = 1000; $a min= 100; $a max= 0; say $a

[16:08] <camelia> rakudo-moar b18ada: OUTPUT«100␤»

[16:08] <timotimo> m: my $a = -2; $a min= 100; $a max= 0; say $a

[16:08] <camelia> rakudo-moar b18ada: OUTPUT«0␤»

[16:08] <moritz> m: sub clip-to($min, $value, $max) { $min min $value max $max }; say clip-to(0, 720, 360)

[16:08] <camelia> rakudo-moar b18ada: OUTPUT«5===SORRY!5=== Error while compiling /tmp/mYSVpmClk2␤Operators 'min' and 'max' are non-associative and require parentheses␤at /tmp/mYSVpmClk2:1␤------> 3to($min, $value, $max) { $min min $value7⏏5 max $max }; say clip-to(0, 720, 360)␤    …»

[16:08] <nine> PerlJam: probably the best way is to error out loudly if there's already a Foo in Perl 6 space. Of course everything would be easier, if we had actual support for long module names with an :auth

[16:08] <moritz> m: sub clip-to($min, $value, $max) { ($min min $value) max $max }; say clip-to(0, 720, 360)

[16:08] <camelia> rakudo-moar b18ada: OUTPUT«360␤»

[16:08] <ZoffixW> Wow

[16:09] <ZoffixW> cygx, maybe in math, but I doubt that's the case with colours, which what I'm working on right now :)

[16:10] <PerlJam> feels like the clip-to op should already be there to me for some reason

[16:10] *** MadcapJake left
[16:10] <moritz> PerlJam: why? it's trivial to reproduce, and not used very often

[16:10] *** rindolf joined
[16:11] <PerlJam> If I knew why I wouldn't have said "for some reason"  :)

[16:11] <dalek> roast: f27b0ce | jnthn++ | S06-currying/named.t:

[16:11] <dalek> roast: Unfudge RT #123498 tests.

[16:11] <dalek> roast: review: https://github.com/perl6/roast/commit/f27b0cee8a

[16:11] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123498

[16:11] *** rindolf left
[16:12] <pmurias> jnthn: yes, the tricky part seem to be to get it to work without making everything else dog slow

[16:12] *** rindolf joined
[16:12] <zengargoylew> m: sub clip-to($min, $value, $max) { ($min min $value) max $max }; say clip-to(0,120,360)

[16:12] <camelia> rakudo-moar 80ea92: OUTPUT«360␤»

[16:12] <ZoffixW> moritz++ thanks. That clip-to is awesome.

[16:12] <zengargoylew> m: sub clip-to($min, $value, $max) { ($min max $value) min $max }; say clip-to(0,120,360)

[16:12] <camelia> rakudo-moar 80ea92: OUTPUT«120␤»

[16:12] *** rindolf left
[16:13] <zengargoylew> reversed your min/max there

[16:13] <jnthn> m: sub () {}.(|{:a})

[16:13] <camelia> rakudo-moar 80ea92: OUTPUT«Unexpected named parameter 'a' passed␤  in sub  at /tmp/7GzxvoJJRR:1␤  in block <unit> at /tmp/7GzxvoJJRR:1␤␤»

[16:13] <zengargoylew> m: sub clip-to($min, $value, $max) { ($min max $value) min $max }; say clip-to(0,400,360)

[16:13] <camelia> rakudo-moar 80ea92: OUTPUT«360␤»

[16:13] *** rindolf joined
[16:13] *** pippo left
[16:14] *** rindolf left
[16:14] <PerlJam> moritz: clip-to fits in the same mental space as minmax for me, so I think why should one exists but not the other.  (that's as close to a "why" as I can muster right now)

[16:15] *** grondilu left
[16:15] <dalek> roast: 0a27790 | jnthn++ | S06-signature/named-parameters.t:

[16:15] <dalek> roast: Unfudge now-passing RT #77788 test.

[16:15] <dalek> roast: review: https://github.com/perl6/roast/commit/0a27790cc5

[16:15] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=77788

[16:15] <PerlJam> moritz: squish is another one that seems odd in a similar way

[16:16] <dalek> roast: bf1fd08 | coke++ | S03-metaops/hyper.t:

[16:16] <dalek> roast: Fudge for the JVM so we can complete the test.

[16:16] <dalek> roast: review: https://github.com/perl6/roast/commit/bf1fd08248

[16:16] <jnthn> Fix one RT, get two for free...

[16:17] <PerlJam> moritz: or repeated.  that's another odd one.

[16:17] <zengargoylew> i think some things were just needed internally and well... might as well give them names and make them available.

[16:17] <jnthn> Down to 45 xmas RTs

[16:18] <colomon> moritz: really?  I find that for work, I need something like clip-to reasonably often.  (Though almost never for the case of angles!  usually you care about how far outside the range you are in that case.)

[16:18] *** pippo joined
[16:18] <moritz> colomon: I guess our works are very different :-)

[16:20] *** Nei left
[16:20] <Skarsnik> hm, is there something to say to say/print and co to display nothing?

[16:21] <[Coke]> m: say ""

[16:21] <camelia> rakudo-moar 80ea92: OUTPUT«␤»

[16:21] <PerlJam> Skarsnik: do you have some special idea of "nothing"?

[16:21] <Skarsnik> m: my $silent = True ;say "Hello there" if !$silent; 

[16:21] <camelia> rakudo-moar 80ea92: ( no output )

[16:22] <Skarsnik> I mean the equivalent of this

[16:22] <timotimo> well, say puts a newline in any case

[16:22] <timotimo> no matter what you pass

[16:23] <timotimo> what you can do is have a list of things to say and if that list is empty, nothing gets said

[16:23] <timotimo> and you can also .say with $foobar

[16:23] <pmurias> jnthn: do you think 3 months of full time effort is a realistic estimate for rakudo-js?

[16:23] *** rangerprice joined
[16:23] <timotimo> m: my $foo; say "hey" with $foo;

[16:23] <camelia> rakudo-moar 80ea92: ( no output )

[16:23] <pippo> It is possible to have say do nothing by setting out-nl to ""; I think.

[16:24] <PerlJam> pmurias: At what level of parity?  :-)

[16:24] *** rangerprice left
[16:24] <timotimo> that's true, too

[16:24] <Skarsnik> I mean I can close stdout but it's seem overkill x)

[16:24] <timotimo> closing stdout is a bit dangerous

[16:24] <jnthn> Skarsnik: You could just lexically re-define say :)

[16:25] <jnthn> Skarsnik: Or set $*OUT = class { method print(|) { } }; or so

[16:25] <brrt> mr_ron, cygx, moar-on-mingw should work now

[16:25] <brrt> thanks for the fixes :-)

[16:25] <pippo> m: $*OUT.nl = ""; say '';

[16:25] *** telex left
[16:25] <camelia> rakudo-moar 80ea92: ( no output )

[16:25] <jnthn> pmurias: I find it hard enough to estimate my own work rate, let alone other people's... :)

[16:26] <Skarsnik> jnthn, you mean like defining a sub say localy?

[16:26] <jnthn> pmurias: I think allowing a month to get to the point of being ready to attack CORE.setting, a month to actually slog through compiling/startup of that, and a month for the rest, is kinda reasonable.

[16:26] <[Coke]> as someone who is theoretically paid to deal with estimating how long it takes people to do this sort of thing, it's hard. And it doesn't matter because your boss will just rewrite your estimates anyway. :)

[16:26] *** telex joined
[16:26] <[Coke]> "it'll take six months" "ok, but we have to deliver something in 5 weeks." ... ... "right, then."

[16:26] <jnthn> m: sub say(|) { }; say('lol i said willy and you will never see it!')

[16:26] <camelia> rakudo-moar 80ea92: ( no output )

[16:27] * ZoffixW wishes for some sort of "usage to signature" converter.

[16:27] <jnthn> pmurias: The Big Risk for me is the gather/take thing

[16:27] <ZoffixW> Why doesn't this { Color.new( hsv => [ 229, 100, 100 ] ) } match multi method new (Pair $p) {} signature?

[16:28] <jnthn> pmurias: In Moar it was only as bad as "implement continuations", except the need to do that kinda influenced a lot of the rest of the design of the VM. ON the JVM it was a global CPS transform.

[16:28] <timotimo> ZoffixW: because it's a named parameter

[16:28] <psch> m: sub f(:$a) { say "named" }; sub f(Pair $p) { say "Pair" }; f a => 1; f "a" => 1

[16:28] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sbf5OXG8nk␤Redeclaration of routine f␤at /tmp/sbf5OXG8nk:1␤------> 3"named" }; sub f(Pair $p) { say "Pair" }7⏏5; f a => 1; f "a" => 1␤    expecting any of:␤        horizontal whitespace␤      …»

[16:28] <timotimo> ZoffixW: if you quote the LHS, you'll get a Pair object passed

[16:28] <jnthn> pmurias: The JVM code-gen was written with the CPS transform in mind

[16:28] <ZoffixW> Aha

[16:28] <psch> m: multi f(:$a) { say "named" }; multi f(Pair $p) { say "Pair" }; f a => 1; f "a" => 1 # vOv

[16:28] <camelia> rakudo-moar 80ea92: OUTPUT«named␤Pair␤»

[16:29] <ZoffixW> Thanks, timotimo++

[16:29] <jnthn> pmurias: My gut feeling is that if it hadn't been, it woulda been really tricky to retrofit.

[16:29] <jnthn> pmurias: I don't think you'll be in quite such an awkward position; I had to deal with the JVM stack rules (like, when the stack must be clear, etc.)

[16:30] <jnthn> And I didn't have to deal at all with wiring up the thing at the end of the day 'cus sorear++ did that :)

[16:30] <pmurias> I'm considering moving tackling that to the front

[16:30] *** diana_olhovik_ left
[16:30] <jnthn> Yeah

[16:30] * [Coke] is getting a ton of new(?) NPE's in rakudo-jvm roast.

[16:30] <jnthn> Note that you only need single-shot continuations.

[16:30] <jnthn> The JVM impl can do multi-shot ones. Moar...sorta half kinda does but not really.

[16:31] <tony-o_> [Tux]: should be corrected now

[16:31] <pmurias> I implemented single-shot ones one nqp-js using threads on node.js

[16:31] <PerlJam> pmurias: just plan for things taking twice as long as you think so that if they suddenly don't you'll be pleasantlys surprised; and if they do, then you're a wizard at estimation  :)

[16:31] <jnthn> pmurias: Yes, it's wise to bring it up front.

[16:31] <pmurias> won't be as easy in the browser

[16:32] <jnthn> Aye

[16:32] <jnthn> It was certainly one of the hardest things in the JVM impl, imo

[16:33] *** sprocket joined
[16:35] *** xfix joined
[16:36] <|Tux|> tony-o_++

[16:37] *** brrt left
[16:37] *** cdc_ joined
[16:37] <cdc_> m: multi sub fib(0) { 0 }; multi sub fib(1) { 1 }; multi sub fib(Int $a where * > 0) is cached { fib($a - 1) + fib($a - 2) }; fib(2)

[16:37] <camelia> rakudo-moar 80ea92: OUTPUT«Cannot invoke object with invocation handler in this context␤  in block <unit> at /tmp/WFylEBqWD6:1␤␤»

[16:38] <cdc_> Is this ^ a known bug?

[16:39] *** Ven joined
[16:39] *** rindolf joined
[16:39] <jnthn> cdc_: Yeah, it hits a known limitation burried down at the VM level

[16:39] *** zakharyas left
[16:40] <jnthn> Not sure if that particular case is filed

[16:40] <cdc_> oh yes, #125278

[16:40] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125278

[16:40] <cdc_> I should have search in RT before asking, sorry.

[16:40] <jnthn> np :)

[16:40] <[Coke]> it's not easy to find things in RT, no worries.

[16:42] <ugexe> there isnt a search RT operator yet?

[16:44] <[Coke]> I am going to write a tool that grabs all the RT: numbers I occasionally post here, but getting any perl6 web stuff to work when on my dayjob ends up being very painful, usually.

[16:44] *** Ven left
[16:46] <ZoffixW> Weird that syntax highlighting breaks on several code blocks below this one the http://docs.perl6.org/type/Signature#Constraining_Defined_and_Undefined_Values

[16:47] * ZoffixW doesn't see any difference in the way the POD written for working and broken ones

[16:47] *** grondilu joined
[16:48] <timotimo> [Coke]: allegedly, the RT instance has a reachable API so you at least don't have to manipulate HTML to get it

[16:48] <timotimo> [Coke]: but i was unable to get it to work

[16:49] <hoelzro> ZoffixW: are you talking about the second block?

[16:49] <hoelzro> that's *really* weird

[16:50] <[Coke]> timotimo: mm, rest api is good. My problem usually involves getting tools to work with the http proxy.

[16:50] <timotimo> ugh, http proxy, that's bad

[16:51] <ZoffixW> hoelzro, yeah second block and a couple after it. I opened an Issue: https://github.com/perl6/doc/issues/201

[16:51] <timotimo> don't think i know much about our HTTP modules with regards to proxy compat

[16:51] * hoelzro wonders if that's pygments', and thus his, fault

[16:52] <zengargoylew> is it because there are bolded things?

[16:52] <rindolf> ZoffixW: hi, sup?

[16:52] <ZoffixW> rindolf, hey

[16:53] <hoelzro> ZoffixW: I'm wondering if it's the lack of a trailing semi-colon in the previous example

[16:53] <hoelzro> but the examples shouldn't affect each other

[16:53] <ZoffixW> zengargoylew, good eye!

[16:53] <rindolf> ZoffixW: how are you?

[16:53] <hoelzro> ah, that bolded thing makes sense; I thought that was a side effect of the lack of highlighting

[16:53] <zengargoylew> i've notice a few underlined links in code examples as well, not sure if i like that.

[16:54] <zengargoylew> spent a few moments going wtf is a => with a bar under it?

[16:54] <timotimo> oh, the > was terminating a pod tag?

[16:56] <ZoffixW> rindolf, good. you?

[16:56] <ZoffixW> Hm. There is "=for code :allow<B L>"

[16:57] <rindolf> ZoffixW: I'm fine, my solution to the N-queens problem in Perl 5 (for the most recent Project Euler problem) is too slow.

[16:57] * ZoffixW has totally forgotten now why they were reading the /Signatures doc :D

[16:57] <ZoffixW> rindolf, that's too bad.

[16:58] <ZoffixW> Oh, right.

[16:59] <arnsholt> timotimo: Pushed to iperl6kernel and Net-ZMQ

[16:59] <timotimo> glad to hear it!

[16:59] <ZoffixW> Is it possible to check the array contains the right type and number of elements in a signature? e.g. sub foo (Array [Rat, Rat, Rat] :$rgb) { ... }

[16:59] <timotimo> not like that

[16:59] <timotimo> you can have a "where" clause, though

[17:00] <timotimo> if you type the array to be of Rat, the user has to explicitly define the array passed in to be of a fitting type

[17:00] <ugexe> wasnt there a way to pass a %hash but in the signature get only specific key/values from it?

[17:00] <timotimo> sure

[17:01] <ugexe> what is the term im looking for

[17:01] <arnsholt> Destructuring, probably

[17:01] <arnsholt> Or pattern matching

[17:01] <timotimo> m: sub test(% (:onekey($eins), :twokey($zwei)) { say $eins; say $zwei }; test({onekey => 1, twokey => 42})

[17:01] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/xC8GxjUkSo␤Missing block␤at /tmp/xC8GxjUkSo:1␤------> 3test(% (:onekey($eins), :twokey($zwei)) 7⏏5{ say $eins; say $zwei }; test({onekey =␤»

[17:01] <timotimo> m: sub test(% (:onekey($eins), :twokey($zwei))) { say $eins; say $zwei }; test({onekey => 1, twokey => 42})

[17:01] <camelia> rakudo-moar 80ea92: OUTPUT«1␤42␤»

[17:01] <ZoffixW> m: sub foo (Rat :$rgb where $_.elems == 3  ) { ... }; foo rgb => [42, 45, 45]

[17:01] <camelia> rakudo-moar 80ea92: OUTPUT«Type check failed in binding $rgb; expected Rat but got Array␤  in sub foo at /tmp/9o40VnqxED:1␤  in block <unit> at /tmp/9o40VnqxED:1␤␤»

[17:02] <timotimo> not like that, either, ZoffixW ;)

[17:02] * ZoffixW reads more of /Signature

[17:02] <timotimo> that'd have to be :@rgb so you'll expect an array at all

[17:02] <ugexe> destructuring was it arnsholt++

[17:02] <timotimo> and if it's typed Rat (as in: Rat :@rgb) the user'll have to Array[Rat].new(42, 45, 45)

[17:02] <ZoffixW> Oh. Nah

[17:08] *** espadrine_ joined
[17:08] *** cdc_ left
[17:09] <ZoffixW> Weird that this doesn't fail:

[17:09] <ZoffixW> m: sub foo (Array :$rgb where { $_.elems == 3 and not grep { ($_ + .0).^name ne 'Rat' }, $_ }  ) { say $rgb[1]}; foo rgb => [42, 45, 'x'];

[17:09] <camelia> rakudo-moar 80ea92: OUTPUT«45␤»

[17:11] <mrf> should $<foo>= not trigger a call to method foo in an action in a Grammar?

[17:12] <jnthn> mrf: No. It's not capturing that triggers action method calls, it's reaching the end of a token/rule/regex

[17:13] <arnsholt> The $<foo>= syntax just names the slot where something is to be stored

[17:13] <psch> m: say ($_ + .0).^name given 42

[17:13] <camelia> rakudo-moar 80ea92: OUTPUT«Rat␤»

[17:13] <psch> ZoffixW: adding a Rat to an Int gives you a Rat

[17:13] <arnsholt> If you really, really need to trigger code in the middle of a regex, you can either use a code interpolation with { }, or split your rule into two

[17:13] <ZoffixW> psch, yeah, but I have an 'x' in there

[17:14] <ZoffixW> m: ('x' + .0).^name ne 'Rat'

[17:14] <camelia> rakudo-moar 80ea92: OUTPUT«WARNINGS:␤Useless use of "ne" in expression ".^name ne 'Rat'" in sink context (line 1)␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '7⏏5x' (indicated by 7⏏)␤  in block <unit> at /tmp/uZwnce_F9Q:1␤…»

[17:14] <psch> m: say not grep (True, False )

[17:14] <camelia> rakudo-moar 80ea92: OUTPUT«True␤»

[17:14] <mrf> hmm ok, That anoying as <My::Other::Grammar::token> doesn't call and action method of token. I was hoping that $<token>=<My::Other::Grammar::token> would

[17:15] <arnsholt> Ooooh, I see. Yeah, that can potentially be annoying

[17:15] <arnsholt> Don't have a neat solution for that one, off-hand

[17:16] <ZoffixW> m: say not so grep (True, True )

[17:16] <camelia> rakudo-moar 80ea92: OUTPUT«True␤»

[17:16] <ZoffixW> m: say not grep { $_ }, True, True

[17:16] <camelia> rakudo-moar 80ea92: OUTPUT«False␤»

[17:16] <psch> oh, right

[17:16] <mrf> arnsholt: No worries. Will see if I can work round the issue for now

[17:16] <psch> that where is messing with topicalization... :)

[17:16] <Skarsnik> Interesting comparing a csizeof on a struct and a ncsizeof can hide some interesting mistake http://pastebin.com/2c2T7J6Q

[17:17] <psch> m: sub foo (Array :$rgb where { $_.elems == 3 and all($_) ~~ Rat }) { say $rgb[1]}; foo rgb => [42, 45, 'x']; # probably..?

[17:17] <camelia> rakudo-moar 80ea92: OUTPUT«Constraint type check failed for parameter '$rgb'␤  in sub foo at /tmp/CWp7ehrv9h:1␤  in block <unit> at /tmp/CWp7ehrv9h:1␤␤»

[17:17] <psch> m: say Int ~~ Rat

[17:17] <camelia> rakudo-moar 80ea92: OUTPUT«False␤»

[17:17] <psch> nah

[17:18] <psch> m: say not grep { True, True, False }, [42, 45, 'x']

[17:18] <camelia> rakudo-moar 80ea92: OUTPUT«False␤»

[17:18] <psch> errr

[17:19] * psch slowly steps away from the keyboard

[17:19] <ZoffixW> What does my sub need to return to simulate self.bless(:$r, :$g, :$b); ? I've tried return r => $r, g => $g, b => $b; and return [r => $r, g => $g, b => $b]; but I still seem to get the defaults for those attributes instead of my new values

[17:19] * ZoffixW feels so dumb now -_-

[17:20] <cygx> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/World.nqp#L850

[17:20] <cygx> ^ not very windows friendly, that one

[17:21] *** mathw left
[17:21] *** llfourn joined
[17:21] <moritz> ZoffixW: please show the class definition

[17:22] <ZoffixW> moritz, here: https://github.com/zoffixznet/perl6-Color/blob/master/lib/Color.pm6#L3-L6 then here, I'm printing values and returning https://github.com/zoffixznet/perl6-Color/blob/master/lib/Color.pm6#L41-L43

[17:23] <ZoffixW> Here I'm running the example code: https://github.com/zoffixznet/perl6-Color/blob/master/examples/color.pl6#L5 and my output is http://fpaste.scsys.co.uk/501567

[17:23] <ZoffixW> The "000" means the attributes are at the defaults

[17:26] *** M-Illandan left
[17:26] *** eternaleye left
[17:26] <moritz>          

[17:26] <moritz> return self.bless(:$r, :$g, :$b); looks good to me

[17:27] <ZoffixW> moritz, I have a multi new. The second one is troublesome: https://github.com/zoffixznet/perl6-Color/blob/master/lib/Color.pm6#L16

[17:27] *** kjs_ joined
[17:27] <ZoffixW> moritz, I suspect it might be because my attributes are Int and the hsv2rgb is returning a rat or something eslse

[17:28] <moritz> m: say (a => 2.4, b => 3.5)>>.Int.perl

[17:28] <camelia> rakudo-moar 80ea92: OUTPUT«Method 'Int' not found for invocant of class 'Pair'␤  in block <unit> at /tmp/47WgrD3tEj:1␤␤»

[17:28] *** ribasushi left
[17:29] *** mspo joined
[17:29] *** pippo left
[17:29] <sprocket> hello, p6

[17:29] <ZoffixW> \o

[17:30] <moritz> m: my %rgb = (a => 2.4, b => 3.5); .=Int() for %rgb.values; say %rgb.perl

[17:30] <camelia> rakudo-moar 80ea92: OUTPUT«{:a(2), :b(3)}␤»

[17:30] <moritz> ZoffixW: ^^ you could use something like this

[17:30] <sprocket> if i had a method: method foo() returns Bar { …. } how can i declare it to sometimes return a Bar type object, but sometimes nothing?

[17:31] <ZoffixW> I'm actually trying to have some sort of "generic number" so that passing ( a => 1, b => 2.5 ) would work.

[17:31] <ZoffixW> Man. This type stuff is hard after a decade of Perl 5 coding :/

[17:31] <moritz> sprocket: you could return a Nil type object, which newest rakudo allows even when a differen return type is declared

[17:31] <pink_mist> ZoffixW: so ... Num?

[17:31] <PerlJam> sprocket: Can "nothing" be an undefined Bar thingy?  OR do you really and truly mean nothing?

[17:31] <ZoffixW> pink_mist, Type check failed in assignment to $!r; expected Num but got Int

[17:31] <ZoffixW> :)

[17:31] <moritz> ZoffixW: Real would be the correct type constraint

[17:32] <moritz> ZoffixW: that allows Int, Num and Rat

[17:32] <ZoffixW> Ah. Thanks, moritz++

[17:32] <sprocket> Perljam: i suppose it’s a “sometimes Bar exists, sometimes it doesn’t” - like a return from a SQL query that has 0 rows

[17:33] <moritz> http://doc.perl6.org/type/Real look at the type graph

[17:33] <sprocket> mortiz: ah, ok, i had been returning Nil, but was getting a type error;  perhaps i just need to update my rakudo

[17:33] *** bpmedley joined
[17:34] <ab5tract_> sprocket: in general i would just assume an empty list for a return of 0 rows

[17:34] <ab5tract_> s/assume/expect/

[17:35] <ab5tract_> Nil is a bit overkill imo

[17:35] <timotimo> m: say all([42, 42, 'x']) ~~ Real 

[17:35] <camelia> rakudo-moar 80ea92: OUTPUT«all(True, True, False)␤»

[17:35] <timotimo> m: say so all([42, 42, 'x']) ~~ Real 

[17:35] <camelia> rakudo-moar 80ea92: OUTPUT«False␤»

[17:35] <timotimo> ZoffixW: how does that sound?

[17:35] <ZoffixW> Awesome, timotimo++

[17:36] <timotimo> it's not very nice performance-wise, though

[17:36] <ZoffixW> Ah. Then I'll skip it

[17:36] <ab5tract_> m: say [&&] [~~] [42,42,'x']

[17:36] <camelia> rakudo-moar 80ea92: OUTPUT«False␤»

[17:36] <timotimo> m: (1, 2, 3) ~~ [Rat, Rat, Rat]

[17:36] <camelia> rakudo-moar 80ea92: ( no output )

[17:36] <timotimo> m: say (1, 2, 3) ~~ [Rat, Rat, Rat]

[17:36] <camelia> rakudo-moar 80ea92: OUTPUT«False␤»

[17:36] <ab5tract_> ZoffixW: that's the junction free version

[17:36] <timotimo> m: say (1, 2, 3) ~~ [Real, Real, Real]

[17:36] <camelia> rakudo-moar 80ea92: OUTPUT«True␤»

[17:36] <mspo> should that look like OUTPUT<<False n/l>> or is my utf8 broken

[17:36] *** M-Illandan joined
[17:36] <timotimo> m: say (1, 2, 'x') ~~ [Real, Real, Real]

[17:36] <camelia> rakudo-moar 80ea92: OUTPUT«False␤»

[17:36] *** M-eternaleye joined
[17:36] <timotimo> that works, too

[17:36] <timotimo> and should have you better performance than the version with all()

[17:37] <ab5tract_> oops

[17:37] <timotimo> *and* you can put it directly as the thing where matches against

[17:37] <ab5tract_> m: say [&&] 42,42,'x' X~~ Real

[17:37] <camelia> rakudo-moar 80ea92: OUTPUT«False␤»

[17:37] <ZoffixW> m: sub second (Real :$r, Real :$g, Real :$b) { say [$r, $g, $b ]}; sub first { return r => 24, g => 55, b => 45 }; second first

[17:37] <camelia> rakudo-moar 80ea92: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub second at /tmp/CRS2VZ2iFZ:1␤  in block <unit> at /tmp/CRS2VZ2iFZ:1␤␤»

[17:37] *** tokuhiro_ joined
[17:37] <ab5tract_> that;s better

[17:37] <ZoffixW> Is there some way to make this work? 

[17:37] <moritz> äääääÄAÄää   ,xxxxxxxxxxxxa6512e1d2 xe5wref3c- frrx

[17:37] <timotimo> m: sub hsv($foo where [Real, Real, Real]) { }; hsv(1, 2, 3); hsv("hi", "how", "are") # you

[17:37] <camelia> rakudo-moar 80ea92: OUTPUT«Too many positionals passed; expected 1 argument but got 3␤  in sub hsv at /tmp/Bdk6jMIpR0:1␤  in block <unit> at /tmp/Bdk6jMIpR0:1␤␤»

[17:37] <timotimo> oh, derp :)

[17:37] <ilmari> mspo: yes, except that "<<", "n/l" and ">>" are a single character each

[17:37] <timotimo> m: sub hsv(*@foo where [Real, Real, Real]) { }; hsv(1, 2, 3); hsv("hi", "how", "are") # you

[17:37] <camelia> rakudo-moar 80ea92: OUTPUT«Constraint type check failed for parameter '@foo'␤  in sub hsv at /tmp/n1co465GZk:1␤  in block <unit> at /tmp/n1co465GZk:1␤␤»

[17:38] <mspo> ilmari: yeah I can't type them into the term but I can see them

[17:38] <mspo> ilmari: is the n/l newline?

[17:38] <timotimo> m: sub hsv(*@foo where [Real, Real, Real]) { say "yay!"; }; hsv(1, 2, 3); hsv("hi", "how", "are") # you

[17:38] <camelia> rakudo-moar 80ea92: OUTPUT«yay!␤Constraint type check failed for parameter '@foo'␤  in sub hsv at /tmp/JbQREV_Wxk:1␤  in block <unit> at /tmp/JbQREV_Wxk:1␤␤»

[17:38] <timotimo> see, there's a yay and a failure in there

[17:38] <timotimo> m: sub hsv(*@foo where [Real, Real, Real]) { say "yay!"; }; hsv("hi", "how", "are", "you")

[17:38] <camelia> rakudo-moar 80ea92: OUTPUT«Constraint type check failed for parameter '@foo'␤  in sub hsv at /tmp/RPw4PfHC0c:1␤  in block <unit> at /tmp/RPw4PfHC0c:1␤␤»

[17:38] <ilmari> mspo: yes, U+02424 - SYMBOL FOR NEWLINE

[17:38] <timotimo> m: sub hsv(*@foo where [Real, Real, Real]) { say "yay!"; }; hsv(1, 2)

[17:38] <camelia> rakudo-moar 80ea92: OUTPUT«Constraint type check failed for parameter '@foo'␤  in sub hsv at /tmp/E2k4wkPIUq:1␤  in block <unit> at /tmp/E2k4wkPIUq:1␤␤»

[17:38] *** kusuriya joined
[17:38] <ab5tract_> timotimo: yeah but if you don't want to deal with hardcoding the numbers...

[17:38] <mspo> ilmari: okay cool, screen -U works I guess ;)

[17:38] <timotimo> it doesn't give a very good error message, though

[17:39] <timotimo> ab5tract_: i lost the context through all of these camelia outputs :(

[17:39] <ab5tract_> m: sub hsv(*@foo where * X~~ Real) { say "yay!" }; hsv(4,5,6)

[17:39] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/qwCXbZk44v␤Malformed parameter␤at /tmp/qwCXbZk44v:1␤------> 3sub hsv(*@foo where * X~~7⏏5 Real) { say "yay!" }; hsv(4,5,6)␤    expecting any of:␤        infix␤        infix stopper␤»

[17:39] <ab5tract_> m: sub hsv(*@foo where { @_ X~~ Real }) { say "yay!" }; hsv(4,5,6)

[17:39] <camelia> rakudo-moar 80ea92: OUTPUT«yay!␤»

[17:39] *** ribasushi joined
[17:39] *** kusuriya left
[17:39] <timotimo> ab5tract_: oh, you mean you don't want to hard-code that HSV only takes 3 arguments?

[17:40] <ab5tract_> in general it makes a lot more sense to reach for X and [&&] / [||] when porting a junction

[17:40] <ab5tract_> s/a lot//

[17:40] <ZoffixW> Don't see anything in http://docs.perl6.org/language/functions

[17:40] <ab5tract_> ymmv ofc

[17:40] <ugexe> are junctions significantly slower?

[17:41] *** Ven joined
[17:41] <ab5tract_> ugexe: yeah.. no one has explained why they don't map to [&&] in the implementation, though I'm not sure if I ever asked..

[17:41] *** tokuhiro_ left
[17:41] <ab5tract_> ugexe: for a one off it shouldnt matter

[17:41] <ab5tract_> but in a hot loop it would

[17:42] *** crucialrhyme joined
[17:42] <cygx> https://github.com/rakudo/rakudo/pull/588 # fixes bogus $?FILE on windows in case of absolute paths

[17:42] <ab5tract_> timotimo: it's not my example, but yeah, I think a hardcoded length is pretty far from a junction

[17:42] <ab5tract_> in terms of user expectation

[17:42] <ugexe> ab5tract_: good to know. i use @a.any/all/none ~~ @a.any/all/none in a few spots that i think would be improved

[17:43] <ugexe> er @a and @b

[17:43] <ab5tract_> ZoffixW: did you get my info about using [&&] 42,55.5,'x' X~~ Real ?

[17:43] <timotimo> ab5tract_: well, if you have a function called "hsv", you'd expect three positional parameters, no? :P

[17:43] <ab5tract_> yeah, I guess :P

[17:43] <timotimo> the code before that had an explicit check for the length against 3

[17:43] <timotimo> so yeah, you'd end up with code that doesn't hard-code the length right next to a hard-coded length check

[17:44] <ab5tract_> whoops :)

[17:44] <ZoffixW> ab5tract_, I've no idea what that code does and I was planning to look it up when I figure out how to make my arg passing work :)

[17:44] <ZoffixW> m: sub second (Real :$r, Real :$g, Real :$b) { say [$r, $g, $b ]}; sub first { return r => 24, g => 55, b => 45 }; second first # this one

[17:44] <camelia> rakudo-moar 80ea92: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub second at /tmp/hJPutFZfqi:1␤  in block <unit> at /tmp/hJPutFZfqi:1␤␤»

[17:44] <ab5tract_> ZoffixW: it's just "how" you port a junction

[17:44] <timotimo> fair enough

[17:44] <ZoffixW> I've no idea what a "junction" is either :P

[17:44] * ZoffixW is dumb

[17:45] <ab5tract_> m: sub second (Real :$r, Real :$g, Real :$b) { say [$r, $g, $b ]}; sub first { return r => 24, g => 55, b => 45 }; second |first

[17:45] <camelia> rakudo-moar 80ea92: OUTPUT«Too many positionals passed; expected 0 arguments but got 3␤  in sub second at /tmp/GRGkZMgwLg:1␤  in block <unit> at /tmp/GRGkZMgwLg:1␤␤»

[17:45] <timotimo> ZoffixW: i think return with named parameters is not what you want

[17:45] <ab5tract_> m: sub second (Real :$r, Real :$g, Real :$b) { say [$r, $g, $b ]}; sub first { return r => 24, g => 55, b => 45 }; second(|first)

[17:45] <camelia> rakudo-moar 80ea92: OUTPUT«Too many positionals passed; expected 0 arguments but got 3␤  in sub second at /tmp/Z4QfFPkiT4:1␤  in block <unit> at /tmp/Z4QfFPkiT4:1␤␤»

[17:45] *** Ven left
[17:45] <ab5tract_> m: sub second (Real :$r, Real :$g, Real :$b) { say [$r, $g, $b ]}; sub first { return r => 24, g => 55, b => 45 }; second(|%(first))

[17:45] <camelia> rakudo-moar 80ea92: OUTPUT«[24 55 45]␤»

[17:45] <timotimo> m: say what.perl; sub what { return a => 1, b => 2, c => 3 }

[17:45] <camelia> rakudo-moar 80ea92: OUTPUT«(:a(1), :b(2), :c(3))␤»

[17:45] <timotimo> oh

[17:45] <ab5tract_> m: sub second (Real :$r, Real :$g, Real :$b) { say [$r, $g, $b ]}; sub first { return %( r => 24, g => 55, b => 45 ) }; second(|first)

[17:45] <timotimo> oh, right, that was added at some point in the recent months

[17:45] <camelia> rakudo-moar 80ea92: OUTPUT«[24 55 45]␤»

[17:46] <ab5tract_> yup! it's still pretty new

[17:46] <ZoffixW> Oh, YEY

[17:46] <ZoffixW> ab5tract_++

[17:46] <ab5tract_> ZoffixW: what's happening there is that you are in one case returning a list of pairs

[17:46] <ab5tract_> which is not a hash

[17:46] <ZoffixW> Ah

[17:46] <ab5tract_> and then furthermore a hash is a positional argument unless you Slup it

[17:47] <ab5tract_> *Slip

[17:47] <timotimo> Slup is short for Slip Up?

[17:47] <ab5tract_> timotimo: nope, it only *was* a Slip Up :)

[17:48] <ab5tract_> ZoffixW: as for my other point about junctions, see timotimo

[17:48] <ab5tract_> see timotimo++'s hsv sub for the version you most likely want

[17:49] <timotimo> my office hours are daily whenever i'm on irc

[17:49] <timotimo> though i suggest you don't travel all the way here just for junction advice

[17:49] <ab5tract_> shit, i never sign off.. must be a heck of a bill i owe you now ;)

[17:50] <timotimo> nah, it's not like that. i only charge after having agreed to an actual appointment

[17:50] <ab5tract_> good to know :)

[17:50] <timotimo> (in case you didn't catch it, i started this pun-tangent because you wrote "see timotimo")

[17:51] <ab5tract_> today i'm following you successfully so far :)

[17:51] <timotimo> \o/

[17:52] <ab5tract_> our way of communication is not so weird ;)

[17:52] <timotimo> m) yeah

[17:56] <ZoffixW> ISAGN for DIE_ON_FAIL for tests akin to Perl 5's Test::Most. Set DIE_ON_FAIL env var to true and the output stops at first fail :)

[17:56] * ZoffixW is working backwards up the test suite right now.. too lazy to scroll

[18:01] *** dakkar left
[18:02] *** pmurias__ joined
[18:02] *** pmurias_1 joined
[18:03] *** muraiki joined
[18:03] *** pmurias_ left
[18:03] <timotimo> "I See A Grave Need"?

[18:04] <RabidGravy> ZoffixW, with you on that,  the first fail is sometimes all that you need to fix it ;-)

[18:05] *** pmurias left
[18:06] <ZoffixW> timotimo, Great

[18:07] *** domidumont left
[18:08] <ZoffixW> RabidGravy, yeah, and when you're doing TDD, you get a ton of output and you're only interested at the stuff on the top :)

[18:09] <nine> ZoffixW: shift+home to jus scroll to top?

[18:10] <ZoffixW> nine, when I press shift+home I see stuff from like 5 days ago :P

[18:10] <ZoffixW> (`clear` isn't helping it either)

[18:10] <RabidGravy> :)

[18:11] <nine> Clear your history :) Ctrl+Shift+k in KDE's konsole. I press it every time before I start a compilation or test run. Makes life so much easier.

[18:11] <nine> Of course that necessitates running those in their own terminal tab which is a good idea in any case.

[18:12] *** znpy joined
[18:13] <ab5tract_> i have a p6 specific design question

[18:13] <ab5tract_> https://github.com/ab5tract/Terminal-Print/blob/1e8dc826c9f453840dc8e24fd6b702a8ac29ae94/lib/Terminal/Print/Commands.pm6#L87

[18:13] <ab5tract_> I would like to parametrically configure my module on export

[18:13] <ZoffixW> Oh. I guess that's better than nothing :) Thanks! nine++

[18:14] <ab5tract_> sorry, on *import*

[18:14] <ab5tract_> i feel like what i am doing there is a total abuse of EXPORT

[18:15] <ab5tract_> i want modules to be able import my module with a variety of different settings. one obvious solution is to use another module which imports the base module and mutates there

[18:15] <ab5tract_> . o ( module module module module module )

[18:16] <ab5tract_> i find it on the one hand convenient that i get all that nice EXPORT::foo stuff for free with named args and such

[18:16] <ab5tract_> ah.....

[18:17] <ab5tract_> probably the proper way to do this would be to use a trait?

[18:17] <cygx> I've written a multi sub EXPORT thta dispatches on Whatever, and I'm sticking with it ;)

[18:17] <nine> ab5tract_: did not objects get invented to couple functions with some state?

[18:17] <ab5tract_> i don't see what you are getting at

[18:18] <ab5tract_> i just feel like using EXPORT to solely mutate the state of my own module based on a parameter is a design smell

[18:18] <ab5tract_> on an import parameter, that is.

[18:18] <ab5tract_> so i was wondering what the best approach would be

[18:18] <ab5tract_> (there's nothing i've mentioned that has to do with OOP, which is why I'm confused nine)

[18:19] <nine> ab5tract_: Exactly. So why not just have something like my $terminal = Terminal::Print.new(:use-ansi); $terminal.clear;

[18:19] <ab5tract_> because BEGIN

[18:19] <nine> That way you can have all the configurability you need and users don't conflict with each other

[18:19] <ab5tract_> but that's a good point

[18:20] <ZoffixW> m: sub hsv( Array :$hsv where [Real, Real, Real]) { say "yay!"; }; hsv( hsv => [1, 2, 3] )

[18:20] <camelia> rakudo-moar 80ea92: OUTPUT«yay!␤»

[18:20] <ZoffixW> ^ that's what I ended up going with. Thanks timotimo++ ab5tract_++

[18:20] <ab5tract_> this can probably be moved away from BEGIN

[18:20] <ab5tract_> and anyway I could just provide both the universal and ansi variants out of the BEGIN block

[18:20] <ab5tract_> thanks for pointing that out nine, it does help in this case

[18:21] *** FROGGS joined
[18:21] <nine> :)

[18:22] <ab5tract_> ZoffixW: don't you thinkg you will get annoyed writing hsv( :hsv(@not-always-named-hsv) ) ?

[18:23] *** znpy left
[18:23] <ab5tract_> if you wanted to go with named parameters, i would maybe be expecting hsv( :h(5), :s(5), :v(5.5) )

[18:24] <ab5tract_> otherwise it seems like a nice case for a pure-positional arg function to me. but TMTOWTDI, of course! :)

[18:24] *** abaugher left
[18:25] <nine> .tell jnthn just curious: why do you suggest Str $path in CompUnit::Loader and CompUnit::PrecompilationStore?

[18:25] <yoleaux> nine: I'll pass your message to jnthn.

[18:25] <ZoffixW> ab5tract_, my interface is  Color.new( hsl => [ 72, 78, 65] );  Color.new( rgb => [ 72, 78, 65] );  Color.new( hsv => [ 72, 78, 65] ); etc.

[18:26] *** abaugher joined
[18:26] <ab5tract_> awesome!

[18:26] <ZoffixW> And I have a multi method new ( ... ) 

[18:26] <ab5tract_> ship it :)

[18:26] <ZoffixW> :)

[18:27] <ab5tract_> yeah, in that case it is absolutely the perfect fit

[18:27] <ab5tract_> \o/

[18:27] <cygx> ZoffixW: can it also deal with Color.new(:hsv<72 78 65>) ?

[18:30] <ab5tract_> m: sub hsv( Array :$hsv where [Real, Real, Real]) { say "yay!"; }; hsv( hsv<1 2 3> )

[18:30] <camelia> rakudo-moar 80ea92: OUTPUT«Use of uninitialized value of type Array in numeric context  in sub hsv at /tmp/e13cCeb8xK:1␤Use of uninitialized value of type Array in numeric context  in sub hsv at /tmp/e13cCeb8xK:1␤Constraint type check failed for parameter '$hsv'␤  in sub hsv a…»

[18:30] <ab5tract_> m: sub hsv( Array :$hsv where [Real, Real, Real]) { say "yay!"; }; hsv( :hsv<1 2 3> )

[18:30] <camelia> rakudo-moar 80ea92: OUTPUT«Type check failed in binding $hsv; expected Array but got List␤  in sub hsv at /tmp/Gkl7OhI02r:1␤  in block <unit> at /tmp/Gkl7OhI02r:1␤␤»

[18:30] <ab5tract_> m: sub hsv( Array() :$hsv where [Real, Real, Real]) { say "yay!"; }; hsv( :hsv<1 2 3> )

[18:30] <camelia> rakudo-moar 80ea92: OUTPUT«yay!␤»

[18:30] <ab5tract_> that one's easy :D

[18:31] <ZoffixW> \o/

[18:31] <ZoffixW> cygx++ ab5tract_++

[18:31] * ab5tract_ could see some sort of compile time flag (*cough* pragma *cough*) that makes that the default behavior

[18:31] <ZoffixW> cygx, it can now :P

[18:31] <ab5tract_> "if can, coerc. else, die"

[18:32] <cygx> .oO( Color.new(:72h, :78s, :65v) )

[18:33] <ilmari> m: sub hsv( List :$hsv where [Real, Real, Real]) { say "yay {$hsv.perl}!"; }; hsv( :hsv[1, 2, 3] ); hsv(:hsv(1,2,3)); hsv(:hsv<1 2 3>)

[18:33] <camelia> rakudo-moar 80ea92: OUTPUT«yay $[1, 2, 3]!␤yay $(1, 2, 3)!␤yay $(IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3"))!␤»

[18:34] <dalek> rakudo/curli: d1c3026 | (Stefan Seifert)++ | src/core/CompUnit/Loader.pm:

[18:34] <dalek> rakudo/curli: Implement CompUnit::Loader::load-source and use it for load-source-file

[18:34] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/d1c3026766

[18:38] <hoelzro> could a Windows user with tuits to spare help me getting my Linenoise module working on Windows? I sat down with FROGGS at the SPWS, but we ran into a problem with certain functions not being exported

[18:38] <hoelzro> I would really like to try to get it working on Windows so it could be included in Star

[18:40] <ab5tract_> hoelzro++

[18:41] * ab5tract_ haz no windoze

[18:41] *** M-eternaleye is now known as eternaleye

[18:41] *** eternaleye left
[18:41] *** eternaleye joined
[18:43] *** Ven joined
[18:45] <hoelzro> I have it, but I've yet to get a working moar + rakudo build on it

[18:45] <hoelzro> I've tried 7 and 8.1, with three versions of VS

[18:46] <cygx> hoelwe've added some moarvm fixes for mingw just today

[18:46] <cygx> hoelzro: ^

[18:46] <cygx> (mis-tab)

[18:47] *** Praise- is now known as Praise

[18:47] <cygx> it should work out of the box with strawberry perl now

[18:47] <jnthn> hoelzro: I've not a lot of spare tuits but: are the things you're wanting to call explicitly marked as exported when the DLL is built?

[18:47] <yoleaux> 18:25Z <nine> jnthn: just curious: why do you suggest Str $path in CompUnit::Loader and CompUnit::PrecompilationStore?

[18:47] <hoelzro> cygx: what kind of fixes? compilation, or runtime?

[18:47] <hoelzro> jnthn: I think we tried that, but to no avail

[18:47] *** Ven left
[18:48] <hoelzro> I can try to build again when I'm at my Windows box 

[18:48] <dalek> roast: 7018613 | coke++ | S02-types/baghash.t:

[18:48] <dalek> roast: Fudge for the JVM so we can complete the test.

[18:48] <dalek> roast: review: https://github.com/perl6/roast/commit/701861312a

[18:48] <hoelzro> I was able to build moar fine, but it would just segfault

[18:48] <jnthn> .ask nine What would be more natural, in your view?

[18:48] <yoleaux> jnthn: I'll pass your message to nine.

[18:48] <cygx> hoelzro: build issues - you no longer need to disable the jit, and dyncall will no longer be compiled with g++ (which it did if the moon was right on some configurations)

[18:49] <hoelzro> hmm

[18:49] <hoelzro> well, I'll try it

[18:49] <cygx> hoelzro: even with MVM_SPESH_DISABLE=1?

[18:49] <hoelzro> but I've been trying with VS, and I don't know if that'll help

[18:49] <cygx> that would be a new one for me

[18:49] <hoelzro> it's been a while since I've tried, but I think so

[18:49] *** spider-mario joined
[18:50] <cygx> I've been able to build with strawberry perl for a long time

[18:51] <cygx> I had to hack the Makefile until FROGGS fixe that, and then I had to disable the JIT (or even SPESH) until brrt pointed me in the right direction for a workaround

[18:51] <cygx> *fixed

[18:51] *** ribasushi left
[18:51] <hoelzro> I could try to get a mingw build working as well

[18:51] <hoelzro> maybe I'll give it one more shot before stealing someone else's time =)

[18:53] <CIAvash> cygx: jnthn: Sorry for the delay! Should I file a bug report or something for the require issue?

[18:55] *** andreoss left
[18:56] <jnthn> CIAvash: Yes, please; I'm not likely to remember about them otherwise :)

[18:56] * jnthn bbl

[18:56] <ZoffixW> Weird. Seems there's some type of conflict between this multi method and the one below it (line 19): https://github.com/zoffixznet/perl6-Color/blob/master/lib/Color.pm6#L15 When I run this test set, https://github.com/zoffixznet/perl6-Color/blob/master/t/01-new-key-value.t#L215-L251 I get "Use of uninitialized value of type List in numeric context" with line number referring to the other method http://fpaste.scsys.co.uk/501568. And if I reverse them 

[18:56] <ZoffixW> in the source, the warning switches places as well

[18:57] *** Sqirrel joined
[18:57] <cygx> CIAvash: as jnthn said, it should be filed

[18:57] <cygx> the important bits of my analysis are http://irclog.perlgeek.de/perl6/2015-11-16#i_11545652 and https://gist.github.com/cygx/cfef662ea505cd68b2e8

[18:58] <ZoffixW> Is it a bug? Where is it even getting the "numeric context" bit from

[18:59] <ZoffixW> Oh, if I remove the "where $_ ~~ [Real, Real, Real]" bit, the code doesn't run at all. Cannot look up attributes in a type object

[19:00] <ZoffixW> Fixed it! By swapping List to Array()

[19:01] *** hankache joined
[19:05] *** tokuhiro_ joined
[19:11] *** tokuhiro_ left
[19:16] *** bapa joined
[19:16] *** ribasushi joined
[19:19] <dalek> rakudo/curli: 07f8d7b | (Stefan Seifert)++ | src/core/CompUnit (4 files):

[19:19] <dalek> rakudo/curli: Move circular module loading protection to load_module

[19:19] <dalek> rakudo/curli: 

[19:19] <dalek> rakudo/curli: load_module is now the one place where all module loading attempts pass through.

[19:19] <dalek> rakudo/curli: This way we no longer need to pass around debugging information to lower levels.

[19:19] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/07f8d7bc3a

[19:20] <ZoffixW> :o "Undeclared routine: cymk2rgb used at line 16. Did you mean 'cmyk2rgb'?"

[19:21] <ZoffixW> Perl 6's error messages are amazingly advanced.

[19:22] <geekosaur> (everything old is new again. watfiv did that. iirc watfor did that but also proceeded as if you'd used the other one, occasionally producing hilarious results)

[19:23] <ZoffixW> :)

[19:25] <ZoffixW> It also disturbs me that after 5 years of having "Designer" in my job title, I only now realized it's CMYK and not CYMK... -_-

[19:26] <pink_mist> lol

[19:27] <Hotkeys_> haha

[19:27] <Hotkeys_> what

[19:27] <Hotkeys_> why am I underscored

[19:27] <Hotkeys_> silly irc

[19:27] *** Hotkeys_ is now known as Hotkeys

[19:27] <geekosaur> netsplit probably

[19:27] <Hotkeys> probably

[19:28] *** crucialrhyme left
[19:29] *** vendethiel joined
[19:37] * [Coke] apologizes for the nonspecific JVM NPE tickets, but fudging is more important than deep diving at this point.

[19:37] <Hotkeys> hot damn

[19:37] <Hotkeys> it's nice having windows repl working again

[19:38] <Hotkeys> go us psch and ugexe 

[19:39] <dalek> rakudo/curli: 7a1b6d1 | (Stefan Seifert)++ | src/core/CompUnit (3 files):

[19:39] <dalek> rakudo/curli: Remove unused code from CompUnit

[19:39] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/7a1b6d169f

[19:39] <dalek> rakudo/curli: b6cf3c3 | (Stefan Seifert)++ | src/core/CompUnit (2 files):

[19:39] <dalek> rakudo/curli: Move rest of CompUnit.load code to CompUnit::Loader::load-source

[19:39] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/b6cf3c3dae

[19:39] *** muraiki left
[19:43] <dalek> rakudo/curli: fc73a7c | (Stefan Seifert)++ | src/core/CompUnit/Repository/Installation.pm:

[19:43] <dalek> rakudo/curli: Have CURLI load precomp files from the PrecompilationStore

[19:43] <dalek> rakudo/curli: 

[19:43] <dalek> rakudo/curli: Using the full DependencySpecification as the key for now.

[19:43] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/fc73a7c0f7

[19:44] *** Ven joined
[19:48] *** Ven left
[19:48] <Skarsnik> I am curious on how to bind the glib (as in Gnome lib) with all the gint and guint stuff. 

[19:49] <timotimo> ideally we'd have a module that reads glib introspection files and generates bindings from that

[19:51] <zengargoylew> would sub gint { int } work?

[19:51] <timotimo> i wouldn't do that

[19:51] <timotimo> try "constant gint = int" instead

[19:51] <timotimo> i'm not sure if that works so wll with native types

[19:52] <zengargoylew> ah yes, i forget about constant all the time.

[19:52] *** Ven joined
[19:52] <Skarsnik> they probably match native type in most case

[19:53] <dalek> roast: f20a1b2 | coke++ | S02-types/mixhash.t:

[19:53] <dalek> roast: Fudge for the JVM so we can complete the test.

[19:53] <dalek> roast: review: https://github.com/perl6/roast/commit/f20a1b2dd2

[19:53] <zengargoylew> object have some sort of FALLBACK method right?  does main scope have one for unknown identifiers?

[19:53] <zengargoylew> it could just s/^g//; :)

[19:54] <Skarsnik> I mean you have no way to know if you gint is a int32 or a int64 ~~

[19:54] <zengargoylew> you make a list of them and run them through cpp to see what they turn into

[19:55] <Skarsnik> I mean I can look at the header. but at run time you are screw ~~

[19:55] *** rvchangue joined
[19:56] <zengargoylew> by runtime you'll already now what they map to or am i missing something?

[19:56] *** sno joined
[19:57] *** timbunce_ joined
[19:58] *** khw left
[19:58] *** timbunce_ is now known as timbunce

[19:58] <Skarsnik> I was looking a struct I want to use as an exemple and everything is gtype (gint, gchar, gfloat). Now I want to write the corresponding CStruct type in perl6. How do I know gint is really int32

[19:58] *** avalenn joined
[19:59] <Skarsnik> I mean it's maybe int32 on x86, maybe int64 on amd64 maybe something else on Windows

[19:59] *** ][Sno][ left
[19:59] <zengargoylew> you put the struct in a file with the proper #include <glib> or whatever and run cpp / gcc -E on it to transform the names into native

[19:59] <zengargoylew> ah....

[20:00] <Hotkeys> somewhat related question

[20:00] <Hotkeys> when should one use int vs Int

[20:00] <FROGGS> Hotkeys: in NativeCall code? never

[20:00] <Skarsnik> I think the answers is don't use int with NC

[20:00] <zengargoylew> then you have somebody do it on other architectures for you and write a module that maps them.  and figure out a good way to guess which to use.

[20:01] <Hotkeys> but like what about in general 

[20:01] <Hotkeys> eg in randomscriptxyz.p6

[20:01] <Skarsnik> No idea

[20:01] <zengargoylew> in general you have a C compiler and you do it at runtime with a test program.. :P

[20:01] <Hotkeys> darn

[20:02] <moritz> Hotkeys: use Int if you want to call methods on it, and/or use integers larger than fit into an int

[20:02] <zengargoylew> theres not any other way i can think of that would work across all compilers, all architectures, etc...

[20:02] <Skarsnik> int exist on nqp and not Int?

[20:02] <FROGGS> Hotkeys: int is there to perform better in e.g. tight loops, but it might be only 32bits wide... Int has no size restriction but is slower there

[20:02] <Hotkeys> Ah okay

[20:03] <Hotkeys> so if I know I won't need anything larger than 32 bits int is the better choice?

[20:03] <Hotkeys> or will it not make a huge difference in most cases

[20:03] <zengargoylew> basically from the interact-with-native side of things, even the compiler may make a difference.

[20:04] <zengargoylew> each compiler may pack a structure differently, it's just that the same compiler is used for the client C code and the library code so things work out ok.

[20:04] <FROGGS> Skarsnik: you can write a glib module that compiles a C probe against glib.h on module installation time. then you use the glib.pm that hands back information of the probed types

[20:05] <zengargoylew> that is a struct is a logical thing, not necessarily a physical thing.

[20:05] <FROGGS> Skarsnik: glib.pm can for example create and export a gint type with the right size

[20:05] <cygx> zengargoylew: but genrally C cmopilers do what the OS vendor does by default

[20:06] <cygx> not being able to make system calls would be a Bad Thing

[20:06] *** hartenfels joined
[20:06] <zengargoylew> yeah, but years on solaris with sun vs gcc has taught me different.

[20:06] <Skarsnik> FROGGS, hm defeat the concept of installing without the dev package. but yeah, it's a solution

[20:06] *** ribasushi left
[20:06] <FROGGS> Skarsnik: true

[20:06] *** Ven left
[20:07] <zengargoylew> it's usually not a problem.  but like the net-snmp SNMP module refuses to build unless the compiler is the same as the one used to build perl itself.

[20:07] <dalek> roast: ffda0cb | coke++ | S02-types/sethash.t:

[20:07] <dalek> roast: Fudge for the JVM so we can complete the test.

[20:07] <dalek> roast: review: https://github.com/perl6/roast/commit/ffda0cb01c

[20:07] <zengargoylew> you can hack around it, but 'tis not supported that way.

[20:07] <konobi> howdy

[20:07] <yoleaux> 15 Nov 2015 07:33Z <[Coke]> konobi: I do some testing. I wouldn't say I handle the infrastructure. What's your question?

[20:08] *** darutoko left
[20:08] <Skarsnik> I need my size_t patch! my module with ether work on x86 or amd64 x)

[20:09] <ZoffixW> I thought these special Unicode operators were there out of the box?

[20:09] <ZoffixW> m: say so 8 ≤ 8.5 ≤ 9

[20:09] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/EdBnINXq35␤Confused␤at /tmp/EdBnINXq35:1␤------> 3say so 87⏏5 ≤ 8.5 ≤ 9␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statem…»

[20:09] *** hankache left
[20:10] <ZoffixW> Hm, might be confusing them with ≼

[20:10] <cygx> Skarsnik: until it gets merged, just define size_t as uint32 or uint63 depending on sizeof something with a CPointer repr

[20:10] <pink_mist> 0_o uint63 o_0

[20:10] <cygx> Skarsnik: cf https://github.com/cygx/p6-native-libc/blob/master/lib/Native/LibC.pm6#L16 and following lines

[20:11] <cygx> pink_mist: I've also got a Uni63 module that does base-62 ;)

[20:12] *** Ven joined
[20:12] *** flussence left
[20:12] *** flussence joined
[20:14] <Skarsnik> Let's see if I can write: our native size_t is Int is ctype("CPointer")     is repr("P6int") { };

[20:14] <zengargoylew> haven't messed with systemcalls on a low level on linux recently.  i've seen times when system calls were packed into registers instead of using a stack.

[20:14] <FROGGS> m: use NativeCall; native size_t is Int is ctype("CPointer")     is repr("P6int") { };

[20:14] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PPMpUfd1rs␤Unhandled C type 'CPointer'␤at /tmp/PPMpUfd1rs:1␤»

[20:15] *** domidumont joined
[20:15] <FROGGS> m: use NativeCall; native size_t is Int is nativesize(nativesizeof(Pointer)) is repr("P6int") { };

[20:15] <camelia> rakudo-moar 80ea92: ( no output )

[20:16] <cygx> FROGGS: bytes vs bits

[20:16] <FROGGS> ups

[20:16] <FROGGS> but isnt that like 'long' anyway?

[20:16] <cygx> NOOOO

[20:16] <FROGGS> :P

[20:17] <jnthn> Certainly not reliably. :)

[20:17] <Skarsnik> oh there is a is nativesize trait ? x)

[20:17] <nine> Isn't every system Linux on x86_64 nowadays?

[20:17] <yoleaux> 18:48Z <jnthn> nine: What would be more natural, in your view?

[20:17] <cygx> the C standard actually recommended that size_t shoudl fit into long, but when MS went 64-bit, they decided to go the route of compatibility between types on different architectures

[20:17] * nine ducks

[20:17] <nine> jnthn: Well we do have this shiny IO::Path class in Perl 6 :)

[20:18] <zengargoylew> my work desktop was 32 bit until a couple of months ago

[20:18] <Skarsnik> I think I forget to activate 64 bit virtualisation stuff and I can't create 64 bits virtualbox guss

[20:18] *** xfix left
[20:18] <zengargoylew> at least the linux one, sun box was sparc or 64bit

[20:19] <Skarsnik> so yeah, my main perl6 installion is 36 bits x)

[20:19] <Skarsnik> *32

[20:19] <zengargoylew> isn't 32 bit perl like faster if you don't need the bits?

[20:19] <[Coke]> r: SetHash.new(<a b foo>).keys.sort.say;

[20:19] <camelia> rakudo-{moar,jvm} 80ea92: OUTPUT«(a b foo)␤»

[20:19] <psch> hack's at 80+ load right now

[20:19] <FROGGS> uhh

[20:19] <psch> not sure if that's runaway again

[20:19] <psch> but tab completion in bash hangs :P

[20:20] <RabidGravy> Skarsnik, you had me excited there, I thought you had compiled P6 on some thirty year old mainframe ;-)

[20:20] *** kaare_ left
[20:20] *** xfix joined
[20:20] <cygx> RabidGravy: Unisys is still in business

[20:20] *** rorx joined
[20:20] <Skarsnik> RabidGravy, perl6 on my 1.2Ghz dedicated server is not nice compile time/run time x)

[20:21] *** Peter_R joined
[20:21] <Skarsnik> took a minute to compile some code

[20:21] <jnthn> nine: Hm, and I guess the bootstrap isn't pulled in through the repo, so we won't have issues around that.

[20:21] <[Coke]> psch: I can't even open a new screen shell.

[20:21] <jnthn> nine: I wonder how much overhead IO::Path has...

[20:21] <RabidGravy> :)

[20:22] *** Ven left
[20:22] <psch> [Coke]: i guess that means it's the same runaway process again

[20:22] <hartenfels> ping timotimo

[20:22] *** Ven joined
[20:22] *** ZoffixW left
[20:22] <Skarsnik> ok, that did not work to define size_t like this: For   has size_t index_within_parent : c-size=8 / nc-size=1 DONT MATCH

[20:22] <ugexe> time to start digesting nine++ curli work

[20:23] <FROGGS> psch: shall I reboot it?

[20:23] <Skarsnik> funny why it fall on 1 for size

[20:23] <nine> jnthn: IO::Path is essentially a glorified Str wrapper. I'm currently using it anyway in load-source-file and other places.

[20:23] <psch> FROGGS: i guess so... it's at 113+ load now :S

[20:23] <jnthn> nine: OK, then we can go with it :)

[20:23] <nine> jnthn: ever since I separated BOOTSTRAP loading from the rest of the module loading code, bootstrapping issues just went away ;)

[20:23] <jnthn> ;)

[20:26] *** ZoffixW joined
[20:26] <hoelzro> well, I went home for lunch and tried to get my Windows dev environment working; no dice =/

[20:26] <hoelzro> my Windows fu is so weak!

[20:27] *** [Coke] left
[20:28] <ZoffixW> Is there a more concise way of writing this, without repeating Real:D all the time?

[20:28] <ZoffixW> m: sub x (Real:D $x, Real:D $y, Real:D $z) { say [$x, $y, $z] }; x 1, 2, 3;

[20:28] <camelia> rakudo-moar 80ea92: OUTPUT«[1 2 3]␤»

[20:28] *** ollej left
[20:28] <ZoffixW> Something like sub x (Real:D ($x, $y, $z) ) { ... }

[20:28] <hoelzro> I got a working Moar built, but configuring NQP got really mad, complaining that C:Strawberryperlbinperl.exe couldn'

[20:28] <nine> no dalek :(

[20:28] <hoelzro> couldn't be found, which is...odd.

[20:28] *** domidumont left
[20:28] *** sergot left
[20:29] <nine> commit b03e334e6 Stefan Seifert Remove CompUnit.load and use CompUnitLoader directly

[20:29] <nine> This gets rid of most of the remainder of the previous CompUnit implementation. CompUnit::PrecompilationRepository now only deals with files and handles and doesn't need to know about CompUnit anymore. CompUnit's $.handle attribute is now required.

[20:29] <nine> Review: https://github.com/rakudo/rakudo/commit/b03e334e6

[20:30] <jnthn> nine++

[20:30] <zengargoylew> m: sub x(Real @ ( $x, $y, $z)){ say [$x, $y, $z] }; x 1,2,3;

[20:30] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/H1uVbREdKn␤Calling x(Int, Int, Int) will never work with declared signature (Real @ (Any $x, Any $y, Any $z))␤at /tmp/H1uVbREdKn:1␤------> 3l @ ( $x, $y, $z)){ say [$x, $y, $z] }; 7⏏5x 1,2,3;␤»

[20:31] <jnthn> nine: You can't imagine how happy I am that you took this task on. :)

[20:31] <nine> jnthn: just adds to the fun :)

[20:31] <Skarsnik> Well my binding still does not work properly because of a bug of NC that does not construct the proper struct size :(

[20:32] <ilmari> hoelzro: something forgot to escape the backslashes when saving the path?

[20:32] <FROGGS> I dunno what hack is doing right now :S

[20:32] <hoelzro> that would make sense, but I don't know where to start looking

[20:33] <hoelzro> I'm a big command line user, so I feel so powerless on Windows

[20:33] <FROGGS> moritz: are you there?

[20:33] <hoelzro> I'm using cmd.exe with MingW and the Git for Windows location added to my PATH

[20:34] *** sno left
[20:34] *** zengargoylew left
[20:35] <mspo> hoelzro: open powershell and be even more frustrated when they made aliases to unix commands but they work differently

[20:35] *** zengargoylew joined
[20:35] <mspo> but at least you can type ls

[20:37] *** dalek joined
[20:37] *** ChanServ sets mode: +v dalek

[20:37] <FROGGS> ohh, that's better

[20:38] *** CIAvash left
[20:38] *** geraud joined
[20:39] *** psch joined
[20:39] <psch> ...ISTR there was a different host for irc screens, maybe i should move there :S

[20:39] <ZoffixW> How do I take out the default constructor?

[20:40] <ZoffixW> I have a bunch of multi method new {} but if none of them match some sort of "default constructor" is being called and it interferes with my error checking

[20:40] *** [Coke] joined
[20:40] <ZoffixW> I just want the code to crash and burn and not run the default constructor.

[20:40] <jdv79> override it?

[20:40] <ZoffixW> I don't know how.

[20:41] <ZoffixW> What's it signature?

[20:41] <jdv79> match the sig i imagine

[20:41] <psch> m: Any.can('new')[0].signature.perl.say

[20:41] <camelia> rakudo-moar 80ea92: OUTPUT«:(Mu $: | is raw)␤»

[20:41] <ZoffixW> Ooo

[20:41] <psch> well, that's the proto

[20:41] <[Coke]> looks like hack was rebooted. anyone figure out what the problem process was?

[20:42] <[Coke]> r: SetHash.new(<a>).keys.sort

[20:42] <cygx> hoelzro: I'm assuming you're using the gmake that came with strawberry perl, or something else?

[20:42] <camelia> rakudo-{moar,jvm} 80ea92: ( no output )

[20:42] <psch> m: Any.can('new')[0].candidates>>.signature.perl.say

[20:42] <camelia> rakudo-moar 80ea92: OUTPUT«(:(Mu $: *%), :(Mu $: $, *@, *%_))␤»

[20:42] <[Coke]> r: SetHash.new(<a>).keys.sort; say "live"

[20:42] <hoelzro> cygx: I think it's the one from Mingw

[20:42] <camelia> rakudo-{moar,jvm} 80ea92: OUTPUT«live␤»

[20:42] <hoelzro> not sure

[20:42] <[Coke]> locally on JVM at that revision, I get an NPE

[20:42] <psch> ZoffixW: the general wides candidate would be :(*@, *%)

[20:42] <RabidGravy> ZoffixW, do a "multi method new(*%h) { die .... }" ?

[20:42] <psch> +t

[20:42] <jnthn> ZoffixW: Just write a proto method new(|) { * } in your class

[20:42] <jnthn> ZoffixW: And it'll hide all inherited multis

[20:43] <RabidGravy> even better

[20:43] <timotimo> hartenfels: pong

[20:44] <jdv79> be nice if that stuff wss doc'd;)

[20:44] <ZoffixW> weee "All tests successful. Files=1, Tests=7,"

[20:44] <ZoffixW> jnthn++

[20:44] <jdv79> *was

[20:44] <ZoffixW> No idea what that code does, but it did the trick :)

[20:44] <[Coke]> Can someone with a local copy of rakudo-jvm double check that?

[20:44] <cygx> hoelzro: Git for Windows might be to blame

[20:44] *** ribasushi joined
[20:44] *** kjs_ left
[20:44] <cygx> note that you probably need to use gmake not make

[20:44] <hoelzro> I'm using gmake

[20:45] <cygx> there goes my guess who ate the slashes ;)

[20:45] <hoelzro> I tried removing Git for Windows from my PATH; building NQP worked, but then nqp --version doesn't have a version in its output

[20:45] <hoelzro> so rakudo gets mad

[20:45] <cygx> perhaps reordering your path would help?

[20:45] *** kjs_ joined
[20:46] <cygx> or just creating a batch wrapper for git

[20:46] <zengargoylew> was there an answer to the sub x(Real:D $x, Real:D $y, Real:D $z) thing... my net went wonky for a few minutes.

[20:46] <ZoffixW> zengargoylew, I've not seen one.

[20:47] *** kjs_ left
[20:47] <zengargoylew> there should be some signature unpacking magick... i just can't come up with it.

[20:47] <[Coke]> be nice if searching for Variables on docs.perl6.org got us all the predefined variables.

[20:47] <bartolin> [Coke]: jepp, I also get a NPE (on commit 80ea923)

[20:47] <[Coke]> bartolin: thank you. Just did a lot of fudging based on that NPE, didn't want to have to undo it. :)

[20:48] <psch> that's a bit troublesome :/

[20:48] *** brrt joined
[20:48] <psch> 'cause in general i expect camelia to have troubles a standalone doesn't have

[20:48] <psch> not the other way around...

[20:50] <b2gills> m: say ([+] 0..10).^name

[20:50] <camelia> rakudo-moar 80ea92: OUTPUT«Rat␤»

[20:50] <b2gills> m: say [+] 0.0..10.0

[20:50] <camelia> rakudo-moar 80ea92: OUTPUT«Cannot determine integer bounds␤  in block <unit> at /tmp/jOYtxZCZyE:1␤␤Actually thrown at:␤  in block <unit> at /tmp/jOYtxZCZyE:1␤␤»

[20:51] <hoelzro> cygx: I can try playing with my PATH

[20:51] <[Coke]> r: say $*PERL.compiler ; # see if they're lying.

[20:51] <hoelzro> Git was at the end of it

[20:51] <camelia> rakudo-moar 80ea92: OUTPUT«rakudo (2015.10.324.g.80.ea.923)␤»

[20:51] <camelia> ..rakudo-jvm 80ea92: ( no output )

[20:52] <[Coke]> so, perhaps we have an old jvm build masquerading as a successful new one?

[20:52] *** Ven left
[20:52] <psch> j: say $*PERL.compiler

[20:52] <camelia> rakudo-jvm 80ea92: OUTPUT«rakudo (2015.10.134.g.273.e.895)␤»

[20:52] *** Ven joined
[20:52] <psch> oh, just below 200 commits behind... vOv

[20:52] *** znpy joined
[20:53] <[Coke]> j: Sethash.new(<a>).keys.sort.say

[20:53] <camelia> rakudo-jvm 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/vu4zKb2p7L␤Undeclared name:␤    Sethash used at line 1. Did you mean 'SetHash', 'Stash'?␤␤»

[20:53] <[Coke]> j: SetHash.new(<a>).keys.sort.say

[20:53] <camelia> rakudo-jvm 80ea92: OUTPUT«(a)␤»

[20:54] <[Coke]> psch: so, yes. and j: and r: give different answers for the java code. neat.

[20:55] <psch> r: SetHash.new(<a>).keys.sort.say

[20:55] <camelia> rakudo-{moar,jvm} 80ea92: OUTPUT«(a)␤»

[20:55] <dalek> rakudo/curli: fd1e9f9 | (Stefan Seifert)++ | src/core/CompUnit (8 files):

[20:55] <dalek> rakudo/curli: Use IO::Path for all paths in CompUnit handling

[20:55] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/fd1e9f9eb0

[20:55] <psch> [Coke]: isn't just the revision before the colon a lie?

[20:55] <psch> [Coke]: for r-j that is

[20:55] <[Coke]> and before j, too.

[20:55] <[Coke]> but the output of that code on j: and r-j is also different. (when asking for the compiler version)

[20:56] <psch> oh

[20:56] <psch> r: say $*PERL.compiler

[20:56] <camelia> rakudo-moar 80ea92: OUTPUT«rakudo (2015.10.324.g.80.ea.923)␤»

[20:56] <camelia> ..rakudo-jvm 80ea92: OUTPUT«rakudo (2015.10.134.g.273.e.895)␤»

[20:56] <[Coke]> er, where by r-j I am meaning the response to "r:" for r-j.

[20:56] <psch> looks the same from here...

[20:56] <[Coke]> and now it's not consistent between runs.

[20:58] <psch> ...i'm not seeing it?  < 20:52 [...] (2015.10.134.g.273.e.895)␤» > and < 20:56 [...] (2015.10.134.g.273.e.895)␤» > look pretty the same to me

[20:59] *** brrt left
[21:02] <bartolin> j: my $match = 1, 2  # rakudo.jvm seems to be horribly broken

[21:02] <camelia> rakudo-jvm 80ea92: OUTPUT«WARNINGS:␤Useless use of constant integer 2 in sink context (line 1)␤java.lang.NullPointerException␤  in block <unit> at /tmp/Oe6o6LKFVJ:1␤␤»

[21:03] <psch> j: 1;

[21:03] <camelia> rakudo-jvm 80ea92: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤»

[21:03] <ZoffixW> m: my $match = 1, 2

[21:03] <camelia> rakudo-moar 80ea92: OUTPUT«WARNINGS:␤Useless use of constant integer 2 in sink context (line 1)␤»

[21:03] <bartolin> j: 1, 2

[21:03] <camelia> rakudo-jvm 80ea92: OUTPUT«WARNINGS:␤Useless use of constant integer 2 in sink context (line 1)␤Useless use of constant integer 1 in sink context (line 1)␤java.lang.NullPointerException␤  in block <unit> at /tmp/a8ciixqre2:1␤␤»

[21:03] <jnthn> [Coke]: Your changes to S02-types/baghash.t have busted it, I think

[21:04] <jnthn> [Coke]: The path does rather more than fudge for JVM

[21:04] *** rindolf left
[21:06] *** kjs_ joined
[21:07] *** Ven_ joined
[21:07] *** Ven left
[21:07] *** tokuhiro_ joined
[21:08] <ZoffixW> Perl 6 is so awesome :) I just wrote this in my code: my $Δ = $c_max - $c_min;

[21:09] <psch> m: my \Δ = 5 - 2; say Δ

[21:09] <camelia> rakudo-moar 80ea92: OUTPUT«3␤»

[21:09] <ZoffixW> :o

[21:09] <ZoffixW> What does \ do?

[21:09] <psch> m: my \Δ = 5 - 2; say Δ; Δ = 7; say Δ

[21:09] <camelia> rakudo-moar 80ea92: OUTPUT«3␤Cannot modify an immutable Int␤  in block <unit> at /tmp/igZuSLwDSy:1␤␤»

[21:09] <psch> ^^^ that

[21:09] <ZoffixW> Aha! psch++

[21:10] <psch> you could still declare it an rw sub i guess...

[21:10] <psch> but then you need parens

[21:11] <psch> m: sub Δ () is rw {$}; Δ() = 5 - 2; say Δ(); Δ() = 10 - 4; say Δ() # vOv

[21:11] <camelia> rakudo-moar 80ea92: OUTPUT«3␤6␤»

[21:11] <ilmari> m: say e^(iπ)+1

[21:11] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CkQWUN9EPW␤Undeclared routine:␤    iπ used at line 1␤␤»

[21:11] <ilmari> m: say e^(i*π)+1

[21:11] <camelia> rakudo-moar 80ea92: OUTPUT«one(2.71828182845905, 1+3.14159265358979i)␤»

[21:11] <psch> m: say e**(π\i)+1 # almost

[21:11] <camelia> rakudo-moar 80ea92: OUTPUT«0+1.22464679914735e-16i␤»

[21:12] <psch> ("almost" regarding the result, that is :) )

[21:12] *** tokuhiro_ left
[21:13] *** kjs_ left
[21:13] <ilmari> m: say e**(π i)+1 # ?

[21:13] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/aoUkmXpkGN␤Two terms in a row␤at /tmp/aoUkmXpkGN:1␤------> 3say e**(π7⏏5 i)+1 # ?␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifie…»

[21:13] <ilmari> oh, no space allowed for postfix ops?

[21:14] <psch> yeah.  the "expecting any of" includes postfix

[21:14] <psch> oh, not there actually

[21:14] <ilmari> m: say e**(π\ i)+1 # ?

[21:14] <camelia> rakudo-moar 80ea92: OUTPUT«5===SORRY!5=== Error while compiling /tmp/m6JIVUJpTh␤Variable '&π' is not declared␤at /tmp/m6JIVUJpTh:1␤------> 3say e**(7⏏5π\ i)+1 # ?␤»

[21:15] <psch> which is probably because you need to unspace...

[21:15] <psch> huh

[21:15] <psch> that should work i think

[21:15] <psch> 'cause the space after the unspace shouldn't be significant in any way...

[21:16] <pink_mist> it's saying it can't find the pi sub?

[21:16] <ilmari> it's a constant, not a sub

[21:16] *** kjs_ joined
[21:16] <pink_mist> not according to rakudo :P

[21:17] <ilmari> src/core/Num.pm:240:my constant π := pi;

[21:17] <ilmari> src/core/Num.pm:237:my constant pi = 3.14159_26535_89793_238e0;

[21:17] <[Coke]> jnthn: crap, that bit was experimental and not meant to be committed. fixing.

[21:17] <jnthn> [Coke]: np; thanks

[21:17] <jnthn> It's one less test that my local changes have broken :P

[21:18] *** kjs_ left
[21:18] <timotimo> psch: i think you want \i instead of \ i

[21:18] <timotimo> m: say π\i

[21:18] <camelia> rakudo-moar 80ea92: OUTPUT«0+3.14159265358979i␤»

[21:19] <dalek> roast: bed8c8a | coke++ | S02-types/baghash.t:

[21:19] <dalek> roast: Revert unintended update to showkv

[21:19] <dalek> roast: 

[21:19] <dalek> roast: jnthn++ for noticing the breakage

[21:19] <dalek> roast: review: https://github.com/perl6/roast/commit/bed8c8abe7

[21:19] <[Coke]> I was testing out replacing showkv with a test function, but realized 90% of the way through that we had one test that needed to call it 2x.

[21:20] <[Coke]> and I never noticed it broke because I skipped all those tests on the jvm. :|

[21:21] <[Coke]> rebuilding r-m to double check...

[21:22] *** Ven_ left
[21:24] <psch> m: my $x = 5;  $x\ ++; say $x

[21:24] <[Coke]> yup, all better.

[21:24] <camelia> rakudo-moar 80ea92: OUTPUT«6␤»

[21:24] <psch> timotimo: if ^^^ works, why doesn't pi\ i?

[21:25] *** Ven joined
[21:25] *** molaf left
[21:29] *** PerlJam joined
[21:30] *** synbot6 joined
[21:31] *** doublec left
[21:32] *** cygx left
[21:32] *** doublec joined
[21:32] *** sergot joined
[21:33] <timotimo> because i isn't a postfix operator

[21:33] <psch> m: sub f () is rw { $ }; say f()\ i

[21:33] <camelia> rakudo-moar 80ea92: OUTPUT«Cannot call postfix:<i>(Any); none of these signatures match:␤    (Real \a --> Complex:D)␤    (Complex:D \a --> Complex:D)␤    (Numeric \a --> Complex:D)␤    (Cool \a --> Complex:D)␤  in block <unit> at /tmp/F9wbLEnkBM:1␤␤»

[21:33] <psch> m: sub f () is rw { $++ }; say f()\ i

[21:33] <camelia> rakudo-moar 80ea92: OUTPUT«0+0i␤»

[21:33] <psch> m: sub f () is rw { $++ }; say f\ i

[21:33] <camelia> rakudo-moar 80ea92: OUTPUT«0+0i␤»

[21:33] <timotimo> er, huh?

[21:33] <timotimo> that's interesting

[21:33] <psch> timotimo: it's constants parsing i guess

[21:33] <timotimo> quite possibly

[21:33] <psch> missing an <unsp> somewhere or somesuch...

[21:34] <timotimo> could very well be

[21:34] *** TEttinger left
[21:35] <timotimo> OK, anyway, since my involuntary breakfast-ejection an hour ago helped with my brain-splitting headache, i think i can now finally get started on the p6weekly post

[21:35] <psch> ...that doesn't sound particularly good? o.o

[21:36] <timotimo> i felt pretty bad all day long

[21:36] <timotimo> then i had to get to the hardware store to get replacement lightbulbs and then get dinner for me and a friend i was going to spend the evening at

[21:36] <bartolin> btw, I just found that removing 'is pure' from the definition of 'proto sub infix:<,>' made the NPE with '1,2' go away

[21:36] <ZoffixW> Hehe. A neat comparison of math formulas next to their Perl 6 equivalent :) https://twitter.com/zoffix/status/666369101766397952

[21:36] * ZoffixW is enjoying themselves too much coding Perl 6 :)

[21:37] <timotimo> after getting out of the underground parking thing of the grocery store (i blame the up and down) i had to stop by the side of the road and find a place to ... do that thing

[21:37] <timotimo> bartolin: oh, huh, so perhaps the problem is inside our optimizer when it tries to compile-time-evaluate things? it should help to --optimize=0 as well if that's the case

[21:38] <timotimo> psch: all in all, not such a nice experience, i have to say!

[21:38] <bartolin> timotimo: no, still a NPE with optimize=0 ...

[21:39] <bartolin> --optimize=0

[21:39] <timotimo> hm, what about --optimize=off, which kicks out the optimizer completely

[21:39] <bartolin> yes, that helps

[21:39] <bartolin> timotimo++

[21:39] <b2gills> .tell TimToady There are two problems with Range.sum, It outputs a Rat for Int based ranges, and doesn't work for any other type of range ( see my comments on https://github.com/rakudo/rakudo/commit/6d970110df1c9fc160833137c66d8394b8b9b328 )

[21:39] <yoleaux> b2gills: I'll pass your message to TimToady.

[21:39] <psch> timotimo: oh, i can believe that...  maybe get something easier to digest, depending on how involved your breakfast was

[21:40] <timotimo> right; at --optimize=0, the optimizer runs, but doesn't change much (or anything? i don't know.)

[21:40] <timotimo> psch: i had a sandwich and some haribo; i think the haribo was wrong or too much

[21:41] <timotimo> after i lied down i had ice cream, which surprisingly didn't cause any trouble

[21:41] *** sprocket left
[21:41] <jdv79> what is haribo?

[21:41] <jdv79> the gummy bear company?

[21:41] <timotimo> yup

[21:42] <psch> timotimo: a friend of mine has a glucose allergy.  maybe that's something for you to check for

[21:42] <timotimo> Hans Riegel Bonn

[21:42] <timotimo> glucose allergy? oh lord, that would be terrible

[21:43] <psch> timotimo: yeah, i mixed it up.  it's a fructose allergy actually

[21:43] <hartenfels> timotimo: I made markdeep work in a roundabout way, if you remember https://github.com/hartenfels/Javascript-SpiderMonkey/tree/markdeep/examples

[21:43] <timotimo> hartenfels: that is cool!

[21:44] <timotimo> it'll go in the p6weekly today for sure! thanks!

[21:44] <psch> well, wikipedia says it's "fructose malabsorbtion", with symptoms such as vomiting

[21:44] <hartenfels> Still needs a lotta work though :P

[21:44] <timotimo> psch: i think the previous time i've vomited was the previous year, but i've had lots of sugary stuff in the mean time

[21:45] <psch> timotimo: it's just something that came to mind, i'm not a doctor :)

[21:45] <timotimo> mhm

[21:45] <timotimo> thanks

[21:45] *** espadrine_ left
[21:46] <timotimo> i have a cat that demands cuddles

[21:48] <RabidGravy> how annoying, I appear to have just one test out of 200 failing on URI::Template

[21:49] <ZoffixW> m: https://gist.github.com/zoffixznet/72e6d8221832a282ad8c

[21:49] <camelia> rakudo-moar 80ea92: OUTPUT«{:h(<10050/53>), :l(<106/255>), :s(1.0)}␤»

[21:49] <ZoffixW> My mind is blown by the result! It's not decimals but fractions!

[21:49] <timotimo> that test deserves a commendation!

[21:49] <timotimo> of course it is :)

[21:50] <dalek> rakudo/nom: d9f6ca3 | jnthn++ | src/ (11 files):

[21:50] <dalek> rakudo/nom: Let Stash store a longname; MOP code to set it.

[21:50] <dalek> rakudo/nom: 

[21:50] <dalek> rakudo/nom: Nothing currently passes the longname, so it defaults to the "short

[21:50] <dalek> rakudo/nom: name", though .WHAT and .^name currently don't map to that, but the

[21:50] <dalek> rakudo/nom: literal name in the program whether it's multi-jointed or not. That

[21:50] <dalek> rakudo/nom: will be addressed in the next patches.

[21:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d9f6ca33d6

[21:50] <dalek> rakudo/nom: 77e178f | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[21:50] <dalek> rakudo/nom: Fix some missing Stash additions.

[21:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/77e178fcb5

[21:51] *** xfix left
[21:51] *** ZoffixW left
[21:52] <jnthn> That's initial work towards RT #118361. Got more of it locally...it's uncovering a few things (like those missing Stashes)

[21:52] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118361

[21:52] <jnthn> Enough for today, though. Will finish it up tomorrow

[21:52] <dalek> rakudo/nom: 921b2fb | cygx++ | src/Perl6/World.nqp:

[21:52] <dalek> rakudo/nom: detect win32 absolute paths in World.current_file

[21:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/921b2fb0dc

[21:52] <dalek> rakudo/nom: 3177463 | jnthn++ | src/Perl6/World.nqp:

[21:52] <dalek> rakudo/nom: Merge pull request #588 from cygx/fix-file-win

[21:52] <dalek> rakudo/nom: 

[21:52] <dalek> rakudo/nom: detect win32 absolute paths in World.current_file

[21:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3177463adc

[21:52] <timotimo> take care, jnthn!

[21:52] <jnthn> Thanks! 'night, all o/

[21:53] *** Ven left
[21:53] *** Ven joined
[21:57] <hartenfels> Is there any documentation on how to call into Perl 6 from native code? I know Inlines do it, but reading the code it just looked scary.

[21:59] <timotimo> all you can do is have callbacks, but i expect that's what you mean

[21:59] <timotimo> the examples in jnthn/zavolaj have that, i bet. otherwise, GTK::Simple does, too

[21:59] <hartenfels> Yeah, that'd be enough.

[21:59] <hartenfels> Thanks, I'll check it out.

[21:59] <timotimo> :)

[22:00] <psch> "into Perl 6 from native code" sounds a few kinds of scary

[22:00] <psch> i mean, taken literally

[22:00] *** Ven left
[22:00] <psch> but i guess one usecase would be using Perl 6 as extension language

[22:01] <psch> (baring things like Inline::Perl6, which translates from one HLL to another, with the former HLLs semantics)

[22:01] <hartenfels> Well, in this case it'd be gluing together JavaScript and Perl 6.

[22:02] <psch> hartenfels: i'd suggest helping pmurias with the nqp-js backend, if you've got tuits

[22:02] <hartenfels> That's not quite enough :P

[22:02] *** [Sno] joined
[22:02] <psch> now i'm curious about the usecase :o

[22:03] <psch> "existing node app that wants to parse things easily" is something that comes to mind...

[22:03] *** skids left
[22:04] <hartenfels> It's simply to be able to use JavaScript library, without going all the way and use node as a backend.

[22:05] <psch> oh

[22:05] <PerlJam> hartenfels: you could always write Inline::JS  ;)

[22:06] <hartenfels> Which is what I'm kinda sorta doing :P

[22:06] <hartenfels> It's not very Inline yet though.

[22:06] * psch wonders what the namespace for v5-ish things is gonna be

[22:06] <psch> 'cause Inline:: seems to develop as "we're secretly calling the other language's interpreter"

[22:07] <psch> whereas v5 was "we're doing this all ourself, damn the consequences!"

[22:07] <psch> (well, "is", probably, even if stalled...)

[22:07] *** cygx joined
[22:08] <cygx> psch: Slang::

[22:08] <psch> cygx: Slang::Tuxic or Slang::Piersing don't seem to fit the same scope as a hypothetical Slang::JS

[22:08] <cygx> but there's also Slang::SQL

[22:08] <psch> cygx: i get it from a semantic perspective, but it seems practically different

[22:08] <hartenfels> I wouldn't tie Inline::JavaScript to a particular implementation though.

[22:09] <psch> oh, right, Slang::SQL is an argument toward that

[22:09] <psch> although Slang::SQL still allows SQL as a statement-level sublanguage and doesn't replace the whole language...

[22:10] <psch> hartenfels: hm, true.  with :provides and such we should be able to layer those, i think.  i'm bad at S22, though, so maybe that's wrong

[22:10] <Hotkeys> Why is the majority language on perl6/nqp listed as parrot

[22:11] <Hotkeys> I thought parrot was a (now unused) vm

[22:11] <hartenfels> psch: Dunno, I didn't worry about Inlinyness yet.

[22:11] <psch> Hotkeys: if you click "Parrot" in that listing it doesn't find any code

[22:11] <Hotkeys> I know

[22:11] <psch> Hotkeys: so i'd say github doesn't know what it's saying... vOv

[22:11] <hartenfels> It's just called JavaScript::SpiderMonkey right now, and ideally an Inline::JavaScript would call into a common API for various JavaScript bindings.

[22:11] <Hotkeys> lol

[22:12] <hartenfels> Surely someone will write JavaScript::PP or something one day.

[22:12] *** pmurias_1 is now known as pmurias

[22:12] <pmurias> having a common API would be great

[22:12] <hartenfels> https://github.com/hartenfels/Javascript-SpiderMonkey/tree/markdeep

[22:13] <psch> yeah, i kinda still want a common API for "this other installed backend knows how to do that, hold on..."

[22:13] <psch> but that's apparently insane :)

[22:13] <pmurias> I thought about doing that in Perl 5, but I stopped developing JavaScript::V8 and passed it over to people who actually use it

[22:14] <pmurias> psch: you mean in Perl 6 land?

[22:14] <hartenfels> I woulda done V8 if I could manage to compile the darn thing

[22:14] <RabidGravy> okay last test whacked, which is weird as I fully expected it break a bunch more

[22:14] <pmurias> psch: so you can switch over from rakudo-jvm to rakudo-moar in the same program?

[22:14] <psch> pmurias: yeah.  e.g. r-m noticing a " use ...:from<Java>; " call and DTRT

[22:15] <pmurias> this happening transparently seems like a bad idea

[22:15] <psch> well, yes.  a full BE switch would be bad

[22:16] <pmurias> combining backends on a per block basis seems possible

[22:16] <RabidGravy> now I need dnmfarrell to merge the PR to URI::Encode and we're good to go

[22:17] <psch> pmurias: with dynvars and lexical scoping in general that already seems nightmarish enough

[22:17] <psch> as in, i don't disagree with the people say it's insane, but it'd still be pretty cool :P

[22:17] <psch> +who

[22:17] <pmurias> I don't think it would be that crazy to implement, but it seems a bit crazy to use

[22:19] <psch> i don't know

[22:20] <psch> i mean, i do know that i'm not the person to try and implement that, 'cause i really don't know enough about the codebase nor compiler design and all those other theoretical things

[22:22] *** vendethiel left
[22:23] *** spider-mario left
[22:36] <Hotkeys> is there a relatively simple way to load some code into a running program from a file for a plugin system (and probably also unload/reload)

[22:37] <Skarsnik> you can use require to reload a file, but... it's quite ugly ^^

[22:37] <timotimo> require with a string lets you load a file

[22:37] <timotimo> ugly, huh?

[22:38] <Skarsnik> well you need to do other stuff, like cleaning the namespace this code used

[22:39] <timotimo> that's true

[22:39] *** johan joined
[22:39] <timotimo> things require'd get put into the GLOBALish namespace, right?

[22:40] <pmurias> psch: any use for mixing backends besides jvm interop?

[22:41] <Skarsnik> the fun of it?

[22:41] *** perlawhirl joined
[22:42] <Skarsnik> maybe a backend is faster for a type of operation and you want to use it in this case, rahter than the main one

[22:43] <Skarsnik> does the JVM backend has a good Inline::Java? x)

[22:47] *** pmurias_ joined
[22:47] *** pmurias_1 joined
[22:48] *** cygx left
[22:50] *** pmurias__ left
[22:50] *** pmurias left
[22:51] *** anon joined
[22:51] *** anon is now known as Guest86646

[22:52] <dalek> Heuristic branch merge: pushed 18 commits to modules.perl6.org/mojo-app by zoffixznet

[22:52] *** eternaleye left
[22:52] *** nebuchad` joined
[22:53] *** zengargoyle joined
[22:54] *** pmurias joined
[22:54] *** pmurias__ joined
[22:54] *** Grrrr left
[22:55] *** lucs joined
[22:55] *** Woodi joined
[22:56] *** Grrrr joined
[22:56] *** inokenty joined
[22:57] *** pmurias_ left
[22:57] *** esh joined
[22:57] *** dj_goku_ joined
[22:57] <psch> pmurias__: i'd assume r-m to r-js would be another, but no, except for interop i don't see any use

[22:57] *** pdcawley__ joined
[22:58] *** pmurias_1 left
[22:58] <psch> Skarsnik: r-j doesn't have Inline::Java, it let's you use Java classes in the mainline (as soon as someone fixes the GLR fallout...)

[22:58] *** Humbedooh joined
[22:58] *** Sgeo_ joined
[22:59] *** bapa1 joined
[22:59] *** samigarus joined
[22:59] *** Humbedooh left
[22:59] *** Humbedooh joined
[22:59] <psch> along the lines of "use java::lang::String:from<Java>; use java::lang::System:from<Java>; my String $java-string = String.new('foo'); System.get_out.println($java-string)" or similar

[22:59] *** Timbus joined
[22:59] <psch> (note that you don't need to have a Java String to print it, though...)

[23:00] *** Bucciarati joined
[23:00] *** M-eternaleye joined
[23:01] *** mls joined
[23:01] <Zoffix> Seems the modules.perl6.org/mojo-app branch is good to go :) The build script builds db and restarts the app successfully.

[23:01] *** vike joined
[23:01] *** erxeto_ joined
[23:01] <pmurias__> psch: for interop just having :from<Java> work on the moar backend seems like a saner first step

[23:01] <Zoffix> Gonna run a setup on a virgin Debian install to see if I missed any prereqs and then the PR and demo shall be forthcoming.

[23:01] *** f3ew joined
[23:01] *** stmuk_ joined
[23:02] <psch> pmurias__: probably, yes.  although that's probably hard enough already, 'cause you need a JVM that knows about the TC

[23:02] *** Mhoram joined
[23:03] <psch> well, and the GC and GCX too

[23:05] *** MilkmanD1n joined
[23:06] *** abaugher left
[23:06] *** pdcawley left
[23:06] *** Axord left
[23:06] *** Sgeo left
[23:06] *** bapa left
[23:06] *** samigarus is now known as oahong

[23:06] *** oahong left
[23:06] *** oahong joined
[23:07] *** woodruffw joined
[23:07] *** kjs_ joined
[23:08] *** hpd joined
[23:09] *** ShimmerFairy joined
[23:13] *** DrPete_ joined
[23:13] *** Axord joined
[23:15] <dalek> modules.perl6.org/mojo-app: 4b4f948 | (Zoffix Znet)++ | / (2 files):

[23:15] <dalek> modules.perl6.org/mojo-app: NOOP HTML generation and write JSON file to app's path

[23:15] <dalek> modules.perl6.org/mojo-app: review: https://github.com/perl6/modules.perl6.org/commit/4b4f94806b

[23:16] *** larion joined
[23:17] <dalek> modules.perl6.org/mojo-app: a6d142c | (Zoffix Znet)++ | db-builder/lib/P6Project.pm:

[23:17] <dalek> modules.perl6.org/mojo-app: Use attributes instead of digging into innards

[23:17] <dalek> modules.perl6.org/mojo-app: review: https://github.com/perl6/modules.perl6.org/commit/a6d142c40c

[23:18] <Zoffix> Does anything use http://modules.perl6.org/proto.json or is it just there?

[23:18] <Zoffix> (just to know how flexible we are with respect to breaking its format)

[23:21] <timotimo> good question

[23:26] *** apejens joined
[23:27] *** pmurias__ left
[23:27] *** pmurias left
[23:27] <arnsholt> timotimo: Did you get a chance to look at the ipython kernel code?

[23:28] <timotimo> not yet :<

[23:28] <timotimo> is there anything in particular you'd like me to have a look at?

[23:29] <arnsholt> Not terribly, although if you could see if it runs on your machine too (to the extent what I've implemented so far can be said to work, anyways) that'd be nice

[23:31] *** crucialrhyme joined
[23:34] <timotimo> haha

[23:34] <timotimo> what should i be expecting?

[23:35] <timotimo> you renamed the thing to IPerl6; maybe we want to have Jupyter::Rakudo instead?

[23:35] <dalek> perl6-roast-data: 82c2101 | coke++ | / (9 files):

[23:35] <dalek> perl6-roast-data: today (automated commit)

[23:35] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/82c2101272

[23:37] <timotimo> um, aren't messages on the heartbeat channel rare enough to be able to cause us problems for blockingly reading from it?

[23:38] <timotimo> aaah, you're using JSON::Fast <3

[23:38] *** kjs_ left
[23:40] <timotimo> well, you'd be seeing it in the log output

[23:41] <timotimo> building a new rakudo right now

[23:41] <Zoffix> ehehe Pod::Coverage has no pod :P irony

[23:42] <Zoffix> Oh maybe it does

[23:42] *** crucialrhyme left
[23:42] <Juerd> I have extended pack() to handle length prefixes. It does what I need, but I don't want to put more time into it, so I won't write tests or documentation. Does anyone feel like taking this code and moving it forward?

[23:43] <Juerd> It does nested length prefixes

[23:43] <Juerd> http://pastebin.com/mAwrHbR4

[23:44] <timotimo> ==> Testing Inline::Python

[23:44] <timotimo> Too many positionals passed; expected 1 argument but got 3

[23:44] <timotimo>   in block <unit> at t/call.t:120

[23:44] <timotimo> nine: ^ got a clue what could be wrong there?

[23:45] <timotimo> arnsholt: i can't install Net::ZMQ, i get "" for all receivements :(

[23:49] <Skarsnik> Good night there

[23:49] *** Skarsnik left
[23:49] *** RabidGravy left
[23:50] *** zengargoylew left
[23:57] <arnsholt> timotimo: I figured blocking on the heartbeat was best, since those are kind of important

[23:57] <zengargoyle> timotimo: does it look like an array that got flattened due GLR?

[23:57] <arnsholt> But it polls with a timeout of half a second, so that we check the other sockets pretty frequently

[23:58] <arnsholt> Not sure what gives with Net::ZMQ though. Do all the tests fail, or just one?

[23:58] <arnsholt> There's one that fails for me too, not sure why

