[00:03] *** ilbelkyr left
[00:03] *** ilbelkyr joined
[00:07] *** sufrostico joined
[00:11] *** mattprelude left
[00:13] *** sufrostico left
[00:15] *** sufrostico joined
[00:21] *** leont left
[00:24] *** cognominal_ left
[00:28] *** Hor|zon joined
[00:28] *** alpha123 left
[00:32] *** antiatom left
[00:32] *** Hor|zon left
[00:33] *** antiatom joined
[00:44] *** n0tjack joined
[00:49] *** sufrostico left
[00:49] *** n0tjack left
[00:53] *** sufrostico joined
[00:53] *** TEttinger left
[01:02] *** stephen144 left
[01:07] *** thou left
[01:09] *** aborazmeh joined
[01:09] *** aborazmeh left
[01:09] *** aborazmeh joined
[01:25] *** laouji joined
[01:28] *** chrstphrhrt joined
[01:29] *** Hor|zon joined
[01:30] *** thou joined
[01:30] <lucs> If I've declared  sub foo ($x, $y) { ... }; my @a = 1, 2; my @b = 3, 4;  I can invoke  foo(|@a), but what about  foo( what-goes-here? ) for @a, @b; ?

[01:31] *** paulmr left
[01:31] <ShimmerFairy> m: my @a = 1,2,3,4; for @a -> $L, $R { say $L + $R }

[01:31] <camelia> rakudo-moar ec2cad: OUTPUT«3␤7␤»

[01:32] <lucs> ShimmerFairy: Hmm... Good answer, but to a different question :)

[01:32] <BenGoldberg> m: sub foo ( $x, $y ) { say "[$x $y]" }; my @a = 1, 2; my @b = 3, 4; foo(|@$_) for @a, @b;

[01:32] <camelia> rakudo-moar ec2cad: OUTPUT«[1 2]␤[3 4]␤»

[01:32] <ShimmerFairy> lucs: I just picked an infix operator because it matched your 'two arguments' question :)

[01:33] <ShimmerFairy> m: sub foo ( $x, $y ) { say "[$x $y]" }; my @a = 1, 2; my @b = 3, 4; foo(|$_) for @a, @b;  # the @ isn't necessary here

[01:33] <camelia> rakudo-moar ec2cad: OUTPUT«[1 2]␤[3 4]␤»

[01:33] <BenGoldberg> m: sub foo ( $x, $y ) { say "[$x $y]" }; my @a = 1, 2; my @b = 3, 4; for @a, @b -> @c { foo(|@c) };

[01:33] <camelia> rakudo-moar ec2cad: OUTPUT«[1 2]␤[3 4]␤»

[01:33] <Zoffix> From what I understand, lucs wants $x to contain values from @a and $y to contain values from @b, for each iteration

[01:33] *** Hor|zon left
[01:34] <lucs> BenGoldberg: I think that's what I'm after, yes.

[01:34] <lucs> ShimmerFairy: I believe I tried with  !$_ , but it failed.

[01:34] <ShimmerFairy> m: sub foo ( $x, $y ) { say "[$x $y]" }; my @a = 1, 2; my @b = 3, 4; for @a Z @b -> ($a, $b) { foo($a, $b) };

[01:34] <camelia> rakudo-moar ec2cad: OUTPUT«[1 3]␤[2 4]␤»

[01:34] *** tokuhirom joined
[01:34] <ShimmerFairy> lucs: if you want to mix the two lists, you want Z as shown there :)

[01:34] <ShimmerFairy> m: say (1,2,3,4) Z (5,6,7,8)

[01:34] <camelia> rakudo-moar ec2cad: OUTPUT«((1 5) (2 6) (3 7) (4 8))␤»

[01:35] <lucs> ShimmerFairy: More excellent answers :)

[01:35] <BenGoldberg> m: sub foo ( $x, $y ) { say "[$x $y]" }; my @a = 1..4; my @b = 5..10; for @a Z @b -> @c { foo(|@c) };

[01:35] <camelia> rakudo-moar ec2cad: OUTPUT«[1 5]␤[2 6]␤[3 7]␤[4 8]␤»

[01:35] <BenGoldberg> m: sub foo ( $x, $y ) { say "[$x $y]" }; my @a = 1..4; my @b = 5..10; for @a Z @b &foo;

[01:35] <camelia> rakudo-moar ec2cad: OUTPUT«5===SORRY!5=== Error while compiling /tmp/fu18OJo9bq␤Missing block␤at /tmp/fu18OJo9bq:1␤------> 3 = 1..4; my @b = 5..10; for @a Z @b &foo7⏏5;␤    expecting any of:␤        block or pointy block␤»

[01:36] <ShimmerFairy> BenGoldberg: I forgot/didn't know that Z creates a list of two-elem lists now, so that's why I didn't dare try @c :)

[01:36] *** llfourn joined
[01:37] <lucs> Hmm... Both  foo(|@$_) for @a, @b;  and  foo(|$_) for @a, @b;  fail here with  Too few positionals passed; expected 2 arguments but got 1

[01:37] <BenGoldberg> m: sub foo { say "[$^x $^y $^z]" }; my @a = 1..4; my @b = 5..10; my @c = 11..15; for @a Z @b x @c -> @d { foo(|@d) };

[01:37] <camelia> rakudo-moar ec2cad: OUTPUT«Too few positionals passed; expected 3 arguments but got 2␤  in sub foo at /tmp/B5Hi3Twhy8:1␤  in block <unit> at /tmp/B5Hi3Twhy8:1␤␤»

[01:37] <BenGoldberg> m: sub foo { say "[$^x $^y $^z]" }; my @a = 1..4; my @b = 5..10; my @c = 11..15; for @a Z @b Z @c -> @d { foo(|@d) };

[01:37] <camelia> rakudo-moar ec2cad: OUTPUT«[1 5 11]␤[2 6 12]␤[3 7 13]␤[4 8 14]␤»

[01:37] <ShimmerFairy> lucs: do you have a snippet or paste to share?

[01:37] <lucs> ShimmerFairy: Sure. Hang on...

[01:37] <BenGoldberg> m: sub foo { say "[$^x $^y $^z]" }; my @a = 1..4; my @b = 5..10; my @c = 11..15; for [Z] @a, @b, @c -> @d { foo(|@d) };

[01:37] <camelia> rakudo-moar ec2cad: OUTPUT«[1 5 11]␤[2 6 12]␤[3 7 13]␤[4 8 14]␤»

[01:39] *** coetry joined
[01:39] *** tokuhirom left
[01:41] <lucs> ShimmerFairy: Unsurprisingly, paring my code down makes it work as you guys expect. I'll try to figure out what is actually different when I get the error.

[01:45] *** ilbot3 left
[01:46] *** ilbot3 joined
[01:48] <Zoffix> Oh! Totally forgot about Z! It's my favourite operator 'cause it's got my initial in it :P

[01:49] *** chrstphrhrt left
[01:49] <pink_mist> wait, your name is /actually/ Zoffix? 0_o

[01:49] <Zoffix> lmao

[01:49] <pink_mist> :P

[01:49] <Zoffix> Sure, why not! :)

[01:50] *** altered joined
[01:50] *** altered left
[01:50] <Zoffix> m: sub prefix:<Zoffix>($a) { say $a } Zoffix 'is great!'

[01:50] <camelia> rakudo-moar ec2cad: OUTPUT«5===SORRY!5=== Error while compiling /tmp/aF_7OyESFN␤Bogus statement␤at /tmp/aF_7OyESFN:1␤------> 3sub prefix:<Zoffix>($a) { say $a } Zo7⏏5ffix 'is great!'␤    expecting any of:␤        whitespace␤»

[01:50] <Zoffix> "bogus statement"... I've just been dissed by Perl 6 :P

[01:51] <lucs> Hmm... When I invoke as  ... for @a, @b;  it works correctly, but if as only  ... for @a;  it looks like that array gets flattened (and that's when I get the error).

[01:51] <lucs> This flattening... surprises me.

[01:52] <lucs> Is that how it's supposed to work?

[01:52] <TimToady> that's the "one-arg rule"

[01:52] <ShimmerFairy> lucs: ah, you need to write as $@a there

[01:53] <ShimmerFairy> m: my @a = 1,2,3,4; for @a { say $_ }

[01:53] <camelia> rakudo-moar ec2cad: OUTPUT«1␤2␤3␤4␤»

[01:53] <ShimmerFairy> m: my @a = 1,2,3,4; for $@a { say $_ }

[01:53] <camelia> rakudo-moar ec2cad: OUTPUT«[1 2 3 4]␤»

[01:53] <TimToady> the argument to 'for' is going to iterate whatever its top-level list is, whether it's the syntactic comma list, or the list from an array

[01:54] <coetry> I'm getting this error when I try to read a p6doc: ===SORRY!===

[01:54] <coetry> Cannot invoke this object (REPR: Uninstantiable)

[01:54] <TimToady> but the $ protects the latter

[01:54] <lucs> TimToady: Yeah, it makes sense, I just needed to be aware of it -- I need to read more docs :-)

[01:56] * lucs wonders if the "one-arg rule" applies elsewhere, like  foo(@a)  vs  foo(@a, @b)

[01:56] <BenGoldberg> m: sub prefix:<Zoffix>($a) { say $a }; Zoffix 'is great!'

[01:56] <camelia> rakudo-moar ec2cad: OUTPUT«is great!␤»

[01:56] <BenGoldberg> Zoffix, You left out a ;

[01:57] <Zoffix> Ah

[01:57] <Zoffix> BenGoldberg++

[02:00] *** BenGoldberg left
[02:02] *** thowe joined
[02:02] *** Aww left
[02:06] *** adu left
[02:07] *** colomon left
[02:11] *** sufrostico left
[02:14] *** vendethiel joined
[02:16] <TimToady> m: say SETTING:: === SETTING::

[02:16] <camelia> rakudo-moar ec2cad: OUTPUT«False␤»

[02:17] <TimToady> m: say UNIT:: === UNIT::

[02:17] <camelia> rakudo-moar ec2cad: OUTPUT«False␤»

[02:17] <TimToady> m: say OUTER:: === OUTER::

[02:17] <camelia> rakudo-moar ec2cad: OUTPUT«False␤»

[02:17] <TimToady> m: say MY:: === MY::

[02:17] <camelia> rakudo-moar ec2cad: OUTPUT«False␤»

[02:17] <TimToady> something gone rather wrong with scope identities here

[02:18] *** BenGoldberg joined
[02:20] <TimToady> m: say UNIT::OUTER:: === SETTING::

[02:20] <camelia> rakudo-moar ec2cad: OUTPUT«False␤»

[02:21] *** kid51 left
[02:24] *** noganex_ joined
[02:25] *** Aww joined
[02:27] *** noganex left
[02:27] <dalek> doc: b7c0c2d | (Zoffix Znet)++ | / (3 files):

[02:27] <dalek> doc: Better display of header on mobiles

[02:27] <dalek> doc: review: https://github.com/perl6/doc/commit/b7c0c2dc13

[02:29] <TimToady> masak: the main compunit's OUTER is supposed to be SETTING, and an EVAL's OUTER is supposed to be the surrounding code (the same as CALLER, since it's an inline-call, more or less)

[02:30] *** Hor|zon joined
[02:31] <TimToady> I'd argue that EVAL($prog, :lang<Perl6>) should have an OUTER the same as SETTING though

[02:31] *** Dom__ joined
[02:31] *** chenryn_ joined
[02:32] <Dom__> dos:

[02:32] <TimToady> as for carrying in pragmas, those should come in with the current cursor, so %*PRAGMAS needs to get incorporated into the current cursor just as %*LANG and $*ACTIONS need to be incorporated

[02:32] <TimToady> lizmat: ^^^ for you too

[02:34] <Dom__> How do u incorporated Lang and actions without $? 

[02:35] *** Hor|zon left
[02:36] *** weihan joined
[02:36] *** chenryn_ left
[02:36] *** kaare_ left
[02:36] <TimToady> they would be accessed via a method-call lookup instead

[02:36] <Dom__> Not Lang and action 2all

[02:37] *** chenryn_ joined
[02:37] *** [Sno] left
[02:39] <Dom__> Via a method-call lookup is not the same energy as an old style

[02:40] <Dom__> Method telepathic is better 

[02:40] * Zoffix suspects a bot or troll

[02:44] <Dom__> Just if the suspects win in a lotto as in a moment is just sandals

[02:45] <Zoffix> Robot /quit

[02:45] <TimToady> spells too well for someone completely blotto

[02:45] * geekosaur senses from afar a whiff of Markov Chaney...

[02:48] *** Dom__ left
[02:48] <dalek> doc: 4a633f1 | (Zoffix Znet)++ | template/search_template.js:

[02:48] <dalek> doc: Fix search results rendered partially off-screen on mobile (Closes #150)

[02:48] <dalek> doc: review: https://github.com/perl6/doc/commit/4a633f1ebb

[02:49] *** weihan left
[02:50] *** weihan joined
[03:05] <TimToady> heh

[03:05] <TimToady> m: EVAL 'run("ls")', :context(CORE::)

[03:05] <camelia> rakudo-moar ec2cad: OUTPUT«Perlito␤bin␤evalbot␤evalbot.log␤log␤mbox␤niecza␤nqp-js␤p1␤p2␤p6eval-token␤perl5␤rakudo-inst␤rakudo-inst-1␤rakudo-inst-2␤rakudo-star-2015.02␤rakudo-star-2015.03␤rakudo-star-2015.09␤rakudo-star-2015.09.tar.gz␤rakudo1␤r…»

[03:06] <Zoffix> :D

[03:08] *** colomon joined
[03:21] *** vendethiel left
[03:31] *** Hor|zon joined
[03:35] *** Hor|zon left
[03:42] *** coetry left
[03:51] *** geekosaur left
[03:52] *** geekosaur joined
[04:04] *** chenryn_ left
[04:08] *** hohoho_ joined
[04:11] *** skids left
[04:13] *** thou left
[04:13] *** Hueho joined
[04:14] <Hueho> hello

[04:14] <thowe> hi

[04:15] <yoleaux> 9 Oct 2015 15:27Z <psch> thowe: you can access it with .value for one: my $PoP = :name => <arg>; say $PoP.value

[04:15] <Hueho> got a question, didn't find anything on my own

[04:16] <Hueho> trying to create a toy function to play with type constraints

[04:16] <Hueho> rakudo is giving me weird looks

[04:17] <grondilu> do you have a one-liner showing the issue?

[04:17] <Hueho> wait a sec

[04:19] <Hueho> p6: sub infix:«|>»(Array:D @l, Array:D @r) returns Array:D { return []; }; say ([1,2,3] |> [4,5,6]).elems;

[04:19] <camelia> rakudo-moar ec2cad: OUTPUT«Type check failed in binding @l; expected Positional[Array] but got Array␤  in sub infix:<|>> at /tmp/tmpfile:1␤  in block <unit> at /tmp/tmpfile:1␤␤»

[04:20] <grondilu> m: sub f(@a, @b) {...}; f([], []);

[04:20] <camelia> rakudo-moar ec2cad: OUTPUT«Stub code executed␤  in sub f at /tmp/lrtND3vUsM:1␤  in block <unit> at /tmp/lrtND3vUsM:1␤␤Actually thrown at:␤  in block <unit> at /tmp/lrtND3vUsM:1␤␤»

[04:20] *** thou joined
[04:20] <grondilu> m: sub infix:<£>(@a, @b) {}; say ([] £ []);

[04:20] <camelia> rakudo-moar ec2cad: OUTPUT«Nil␤»

[04:21] <grondilu> m: sub infix:<£>(@a, @b) { [] }; say ([] £ []);

[04:21] <camelia> rakudo-moar ec2cad: OUTPUT«[]␤»

[04:21] <grondilu> m: sub infix:<£>(@a, @b) returns Array { [] }; say ([] £ []);

[04:21] <camelia> rakudo-moar ec2cad: OUTPUT«[]␤»

[04:21] <grondilu> m: sub infix:<£>(Array @a, Array @b) returns Array { [] }; say ([] £ []);

[04:21] <camelia> rakudo-moar ec2cad: OUTPUT«Type check failed in binding @a; expected Positional[Array] but got Array␤  in sub infix:<£> at /tmp/H0kM0Cxp7_:1␤  in block <unit> at /tmp/H0kM0Cxp7_:1␤␤»

[04:22] <grondilu> m: sub infix:<£>(Array @a, @b) returns Array { [] }; say ([] £ []);

[04:22] <camelia> rakudo-moar ec2cad: OUTPUT«Type check failed in binding @a; expected Positional[Array] but got Array␤  in sub infix:<£> at /tmp/kXMW60XPl4:1␤  in block <unit> at /tmp/kXMW60XPl4:1␤␤»

[04:22] <grondilu> m: sub infix:<£>(Array $a, @b) returns Array { [] }; say ([] £ []);

[04:22] <camelia> rakudo-moar ec2cad: OUTPUT«[]␤»

[04:22] <grondilu> m: sub infix:<£>(Array @a, @b) returns Array { [] }; say (1, 2 £ []);

[04:22] <camelia> rakudo-moar ec2cad: OUTPUT«Type check failed in binding @a; expected Positional[Array] but got Int␤  in sub infix:<£> at /tmp/61C8oT9BIg:1␤  in block <unit> at /tmp/61C8oT9BIg:1␤␤»

[04:22] <grondilu> m: sub infix:<£>(Array @a, @b) returns Array { [] }; say ((1, 2) £ []);

[04:22] <camelia> rakudo-moar ec2cad: OUTPUT«Type check failed in binding @a; expected Positional[Array] but got List␤  in sub infix:<£> at /tmp/BwP2htkWuM:1␤  in block <unit> at /tmp/BwP2htkWuM:1␤␤»

[04:23] <Hueho> hmmm

[04:23] *** Axord left
[04:23] <grondilu> I'm not sure what's going on here

[04:23] <grondilu> m: sub f(Array @) {}; say f []

[04:23] <TimToady> why are you declaring @a to be an array of array?

[04:23] <camelia> rakudo-moar ec2cad: OUTPUT«Type check failed in binding <anon>; expected Positional[Array] but got Array␤  in sub f at /tmp/OW0kTWBzMK:1␤  in block <unit> at /tmp/OW0kTWBzMK:1␤␤»

[04:24] <grondilu> oh

[04:24] <grondilu> of course

[04:24] <Hueho> yeah, i think i messed up contexts

[04:24] <grondilu> m: sub f(Array @) {}; say f [[]]

[04:24] <camelia> rakudo-moar ec2cad: OUTPUT«Type check failed in binding <anon>; expected Positional[Array] but got Array␤  in sub f at /tmp/4wn3pU16vN:1␤  in block <unit> at /tmp/4wn3pU16vN:1␤␤»

[04:25] <TimToady> one-arg rule strikes again

[04:25] <TimToady> [[]] is the same as []

[04:25] <grondilu> m: sub f(Array @) {}; say f [[1], [2]]

[04:25] <camelia> rakudo-moar ec2cad: OUTPUT«Type check failed in binding <anon>; expected Positional[Array] but got Array␤  in sub f at /tmp/NXNO0oI9bg:1␤  in block <unit> at /tmp/NXNO0oI9bg:1␤␤»

[04:26] <TimToady> it's still not nominally typed

[04:26] <TimToady> just don't declare types on @ parameters for noow

[04:26] <grondilu> ok

[04:26] <Hueho> i see

[04:27] <TimToady> m: sub f(Array @) {}; say f Array[Array].new([1], [2])

[04:27] <camelia> rakudo-moar ec2cad: OUTPUT«Nil␤»

[04:27] <TimToady> m: sub f(Array @a) { @a.perl.say }; say f Array[Array].new([1], [2])

[04:27] <camelia> rakudo-moar ec2cad: OUTPUT«Array[Array].new($[1], $[2])␤True␤»

[04:27] <TimToady> if you nominally type the param, you have to nominally type the argument

[04:28] <TimToady> you can't just have strong typing on the receiving end

[04:30] <Hueho> alright, thank you for the help ;D

[04:30] <Hueho> ugh, wrong smiley, anyway, thanks

[04:32] *** Hor|zon joined
[04:36] *** Hor|zon left
[04:37] *** chenryn_ joined
[04:41] *** adu joined
[04:45] *** coetry joined
[04:47] *** oahong joined
[05:02] *** gonz_ joined
[05:08] <hohoho_> https://rt.perl.org/Ticket/Display.html?id=126316&results=46f54f9270a6db6788a86830795287b1

[05:08] *** hohoho_ is now known as tokuhirom_h

[05:09] <tokuhirom_h> i got a strange error around ::()

[05:13] *** chenryn_ left
[05:16] *** ugexe left
[05:16] *** ugexe joined
[05:20] *** [Sno] joined
[05:20] <ugexe> why wouldn't that fail? there is no C::M to load

[05:21] <ugexe> oh its at the bottom

[05:21] *** tokuhirom joined
[05:23] *** n0tjack joined
[05:25] *** thou left
[05:25] *** tokuhirom left
[05:27] *** Hueho left
[05:30] *** ienh left
[05:30] *** pochi_ left
[05:31] *** labster_ left
[05:32] <tokuhirom_h> yep

[05:32] *** coetry left
[05:32] *** pochi joined
[05:32] *** Ben_Goldberg joined
[05:32] *** Aww left
[05:32] *** labster joined
[05:32] *** lue joined
[05:32] *** ShimmerFairy left
[05:33] *** Hor|zon joined
[05:33] *** lue is now known as ShimmerFairy

[05:33] *** n0tjack left
[05:33] *** BenGoldberg left
[05:33] *** TingPing left
[05:33] *** TingPing joined
[05:34] *** TEttinger joined
[05:35] <ShimmerFairy> TimToady: is the plan to eventually not need strong typing on the argument? I've heard desire for it, and it seems reasonable to me, but I don't actually know if it's ever meant to happen.

[05:37] *** Hor|zon left
[05:39] *** Aww joined
[05:43] *** agentzh_ left
[05:43] *** aborazmeh left
[05:43] *** agentzh joined
[05:49] *** z8 left
[05:49] *** slobo joined
[05:50] *** chenryn_ joined
[05:52] <ugexe> if you assign it to something does it work?

[05:52] <ugexe> my $foo = ::($pkg).new(); say "DONE";

[05:53] <slobo> should i be worried that panda takes 4 seconds to just print usage on my system? (fresh moarvm)

[05:53] <slobo> --stagestats shows it's all in the parsing

[05:56] *** BenGoldberg_ joined
[05:59] *** Ben_Goldberg left
[06:03] *** quester joined
[06:05] *** z8 joined
[06:06] *** slobo_ joined
[06:07] *** slobo left
[06:07] *** slobo_ is now known as slobo

[06:11] <dalek> rakudo/nom: b8caf98 | ShimmerFairy++ | src/Perl6/Grammar.nqp:

[06:11] <dalek> rakudo/nom: Run add_categorical for constants needing to change the grammar.

[06:11] <dalek> rakudo/nom: 

[06:11] <dalek> rakudo/nom: This means lines like  constant &infix:<A> := &infix:<B>  work now,

[06:11] <dalek> rakudo/nom: since 'A' is now added to the grammar as a new infix operator (in the

[06:11] <dalek> rakudo/nom: given example).

[06:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8caf98898

[06:11] <dalek> roast: 06359ee | ShimmerFairy++ | S04-declarations/constant.t:

[06:11] <dalek> roast: Add tests for using 'constant' to alias operators.

[06:11] <dalek> roast: review: https://github.com/perl6/roast/commit/06359ee1ed

[06:18] *** z8 left
[06:19] *** BenGoldberg_ left
[06:20] *** weihan left
[06:20] <quester> Is anyone having a problem where every few panda installs, the test will fail immediately with "Could not find file 'Build.pm' for module Build.pm"?  The odd thing is that if you retry the panda install, it works.

[06:21] <quester> ... or is it just me?

[06:22] *** Ven joined
[06:25] <grondilu> I'm about to rebootstrap panda so we'll see

[06:26] <grondilu> (btw I suspect rebostrapping panda in order to upgrade a module is overkill)

[06:27] * grondilu needs to read panda's help

[06:32] <tokuhirom_h> ugexe: ah! it works! amazing..

[06:34] *** Hor|zon joined
[06:38] *** Hor|zon left
[06:40] *** chenryn_ left
[06:40] *** chenryn_ joined
[06:43] *** chenryn_ left
[06:43] *** chenryn_ joined
[06:46] *** Ven left
[06:58] *** weihan joined
[06:59] *** laouji_ joined
[06:59] *** Ven joined
[07:03] *** telex left
[07:04] *** telex joined
[07:05] *** adu left
[07:05] *** rurban joined
[07:09] *** thou joined
[07:13] *** bjz left
[07:13] *** thou left
[07:14] *** bjz joined
[07:18] *** aswec joined
[07:18] <FROGGS> gööd morning

[07:19] *** aswec left
[07:27] *** laouji_ left
[07:29] <Ven> o/ FROGGS 

[07:33] *** bjz left
[07:34] *** quester left
[07:35] *** Hor|zon joined
[07:37] *** bjz joined
[07:39] *** Hor|zon left
[07:43] *** pmurias joined
[07:43] <dalek> nqp: f005e1b | (Pawel Murias)++ | src/vm/js/ (2 files):

[07:43] <dalek> nqp: [js] Stub ordbaseat.

[07:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f005e1b2a2

[07:43] <dalek> nqp: f84b507 | (Pawel Murias)++ | src/vm/js/ (2 files):

[07:43] <dalek> nqp: [js] Stub nqp::bindcurhllsym.

[07:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f84b50777d

[07:43] <dalek> nqp: ceed534 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[07:43] <dalek> nqp: [js] Make the for op return null as it's result

[07:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ceed534805

[07:43] <dalek> nqp: 24373d6 | (Pawel Murias)++ | src/vm/js/ (2 files):

[07:43] <dalek> nqp: [js] Only run the MAIN sub in the compilation unit that was directly invoked

[07:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/24373d63c1

[07:50] *** weihan left
[07:54] <dalek> nqp: 31de8c2 | (Pawel Murias)++ | src/vm/js/ (2 files):

[07:54] <dalek> nqp: [js] Implement nqp::bindcomp and nqp:getcomp

[07:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/31de8c2e76

[07:54] <dalek> nqp: d2df69d | (Pawel Murias)++ | t/nqp/59-nqpop.t:

[07:54] <dalek> nqp: Add tests for nqp::bindcomp and nqp::getcomp.

[07:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d2df69d4ea

[07:59] *** spider-mario joined
[08:10] *** domidumont joined
[08:11] *** awwaiid left
[08:12] *** awwaiid joined
[08:13] *** shmibs left
[08:14] *** darutoko joined
[08:15] *** domidumont left
[08:17] <dalek> nqp: 6caba0c | (Tokuhiro Matsuno)++ | src/vm/moar/ (2 files):

[08:17] <dalek> nqp: fixed typo

[08:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6caba0c08d

[08:17] <dalek> nqp: 5c15ba1 | niner++ | src/vm/moar/ (2 files):

[08:17] <dalek> nqp: Merge pull request #247 from tokuhirom/typo

[08:17] <dalek> nqp: 

[08:17] <dalek> nqp: fixed typo

[08:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5c15ba1e46

[08:17] <FROGGS> m: say ::T.HOW.^name

[08:17] <camelia> rakudo-moar b8caf9: OUTPUT«===SORRY!===␤Could not locate compile-time value for symbol T␤»

[08:17] *** brrt joined
[08:18] *** domidumont joined
[08:18] <dalek> gtk-simple: 86a0a00 | (Slobodan Mišković)++ | Build.pm:

[08:18] <dalek> gtk-simple: Fix comment in Build.pm

[08:18] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/86a0a00f87

[08:18] <dalek> gtk-simple: b2cee0b | niner++ | Build.pm:

[08:18] <dalek> gtk-simple: Merge pull request #15 from slobo/patch-1

[08:18] <dalek> gtk-simple: 

[08:18] <dalek> gtk-simple: Fix comment in Build.pm

[08:18] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/b2cee0bfc2

[08:18] *** RabidGravy joined
[08:19] *** shmibs joined
[08:20] <brrt> good * #perl6

[08:21] <nine> Good morning, all

[08:21] <FROGGS> morning

[08:26] <FROGGS> jnthn: I have problem fixing 'role Foo[::T] { has T $.bar }' and 'role Foo[::T] { has T:D $.bar }'... it would be way easier to do the istype check at composition time...

[08:27] <FROGGS> jnthn: which in turn would kinda imply 'is required' for Type:D

[08:27] <FROGGS> or at least would have a similar effect

[08:28] <FROGGS> jnthn: I'd be in favour of that fwiw

[08:28] <FROGGS> (and lizmat too)

[08:29] <lizmat> I would ?

[08:29] <lizmat> yes, I would !  :-)

[08:29] <FROGGS> *g*

[08:29] <lizmat> and good *, #perl6!

[08:29] <pmurias> morning

[08:36] *** Hor|zon joined
[08:40] *** Hor|zon left
[08:41] <FROGGS> o/

[08:43] <brrt> FROGGS: you mean the istype of T?

[08:44] <FROGGS> brrt: I'm talking about the istype check of the default value of the attribute to its type constraint

[08:44] <brrt> aha

[08:45] *** FROGGS[mobile] joined
[08:45] *** llfourn left
[08:46] <Ven> FROGGS: that'd probably be good news for me as well :)

[08:49] *** Peter_R joined
[08:52] *** tokuhirom joined
[08:57] *** tokuhirom left
[08:57] *** thou joined
[08:57] *** leont joined
[09:00] <nine> Good morning, lizmat!

[09:00] <lizmat> nine o/

[09:00] <nine> lizmat: I may have an idea for #126312

[09:00] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126312

[09:01] <lizmat> do tell ?

[09:01] *** thou left
[09:02] <nine> lizmat: could be as simple as $!reified := list.reification-target; in method iterator's Iterator class' BUILD. Compiling...

[09:03] <lizmat> will that also handle the pull-one case ?

[09:03] <lizmat> I thought about that this morning...

[09:03] <lizmat> the pull-one case will need to be able to create a container as well

[09:03] *** Ven left
[09:04] *** CurtisOvidPoe joined
[09:04] <nine> lizmat: right, that one's probably still open

[09:04] <CurtisOvidPoe> Are native types fully working now? If I run this, it’s alway slightly slower with “int” instead of “Int”: my int @foo = 1..2000;my $now = now; for @foo {for @foo {}}; say now - $now; 

[09:05] <lizmat> I did speed up the native array iterator yesterday, are you on HEAD ?

[09:06] <nine> lizmat: also the code expects $!reified to be a VMArray. So it needs a bit more refactoring.

[09:06] <lizmat> nine: yeah, it's hairier than I thought  :-)

[09:07] <CurtisOvidPoe> lizmat: I just upgraded via rakudobrew. Trying to see where the average user would be.

[09:09] <CurtisOvidPoe> Also, I can’t build panda on os x. I assume there’s something strange about my setup and now about rakudobrew? https://gist.github.com/Ovid/8d3085d466110d78aeda

[09:10] <lizmat> CurtisOvidPoe: confirmed the slowness of int array versus Int array

[09:11] <lizmat> I suspect some boxing / unboxing going on somewhere in the int case, that isn't there in the Int case

[09:11] <lizmat> :-(

[09:11] <lizmat> I need to be afk for a few hours, will look further when back

[09:12] <CurtisOvidPoe> Cheers.

[09:16] <CurtisOvidPoe> Anyone recognize that error building Panda? I’m really limited in Perl 6 without Panda :)

[09:17] <El_Che> In java, you can define generics like this: Map<Integer, String> set = new HashMap<Integer, String>; (stay with me :) ). I don't see much about types for arrays in hashes in the perl6 doc I have see so far, but something like this seems to work: my List %sync_dirs = ...

[09:17] <El_Che> the List type aplies then to the value

[09:18] <El_Che> is this intended to work like this, setting a type for the value, not the key (Str?)?

[09:18] <btyler> CurtisOvidPoe: well, that's a funny one -- looks like P6's File::Find tests are being run with p5

[09:18] <btyler> I'll rebuild panda and see if it happens for me too

[09:19] <CurtisOvidPoe> btyler: yeah, that’s what I was thinking. Not sure why. 

[09:19] <El_Che> I see the previous rakudo build did not support List to type of a Hash (it was Pair I think)

[09:20] *** ShimmerFairy left
[09:20] *** ShimmerFairy joined
[09:20] <btyler> CurtisOvidPoe: hm, I just built panda HEAD without seeing that. give me a sec to set up a rakudobrew install

[09:21] <CurtisOvidPoe> Cheers!

[09:25] <dalek> ecosystem: e7149d1 | moznion++ | META.list:

[09:25] <dalek> ecosystem: Add Router::Boost

[09:25] <dalek> ecosystem: 

[09:25] <dalek> ecosystem: And remove a no longer needed module

[09:25] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e7149d1262

[09:25] <dalek> ecosystem: 3263bb5 | RabidGravy++ | META.list:

[09:25] <dalek> ecosystem: Merge pull request #69 from moznion/router-boost

[09:25] <dalek> ecosystem: 

[09:25] <dalek> ecosystem: Add Router::Boost

[09:25] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3263bb54d8

[09:27] <CurtisOvidPoe> btyler: I need to run away, so if you can replicate, could you shoot an email or something? [email@hidden.address]
[09:27] <btyler> CurtisOvidPoe: I just finished rebuilding, no repro :(

[09:27] <CurtisOvidPoe> Damn. Thanks, though!

[09:27] <CurtisOvidPoe> Gotta run. Later, folks!

[09:27] *** CurtisOvidPoe left
[09:29] *** Psyche^ joined
[09:33] *** Psyche^_ left
[09:34] *** tokuhirom joined
[09:35] *** eliasr joined
[09:37] *** Hor|zon joined
[09:38] *** tokuhirom left
[09:39] <moritz> do we have some nice primitive of library function for running up to $N workers in processes, consuming from a common queue?

[09:39] * grondilu vaguely remembers about :batch

[09:41] *** Hor|zon left
[09:43] <brrt> no, i think that was discussed last year or so, and it was decided it would be modulespace

[09:43] <nine> lizmat: I wonder why we try so hard to share the iterator method between List and Array. We have special purpose iterators eveywhere in core.

[09:44] *** cognominal joined
[09:46] *** weihan joined
[09:47] *** rindolf joined
[09:48] *** rurban left
[09:49] *** weihan left
[09:50] *** weihan joined
[09:50] *** araujo_ joined
[09:50] *** tokuhirom_h left
[09:51] *** araujo_ left
[09:51] *** rurban joined
[09:52] <nine> .tell lizmat I have a fix :)

[09:52] <yoleaux> nine: I'll pass your message to lizmat.

[09:53] *** araujo left
[09:55] *** laouji_ joined
[09:57] *** laouji left
[10:01] *** llfourn joined
[10:01] <nine> .tell lizmat It's easy once you just give Array its own iterator method. I still have to fix a regression in t/spec/S32-array/delete.t. Deleting the last elements in an array no longer shortens the array. But have to go now.

[10:01] <yoleaux> nine: I'll pass your message to lizmat.

[10:04] *** rurban left
[10:04] <dalek> specs: f8fc48f | (Stéphane Payrard)++ | S12-objects.pod:

[10:04] <dalek> specs: problems with grammar attributes and a solution

[10:04] <dalek> specs: 

[10:04] <dalek> specs: One could say one cannot _declare_ grammar attributes but rakudo barks only when we use them.

[10:04] <dalek> specs: For more context:

[10:04] <dalek> specs: 

[10:04] <dalek> specs: https://rt.perl.org/Ticket/Display.html?id=122253

[10:04] <dalek> specs: http://irclog.perlgeek.de/perl6/2015-03-11#i_10262331

[10:04] <dalek> specs: https://github.com/rakudo/rakudo/commit/858ac4e3ff279fcf666530b9cc48b78d318d13c8

[10:04] <dalek> specs: review: https://github.com/perl6/specs/commit/f8fc48fd79

[10:06] *** Ven joined
[10:12] *** Ven left
[10:19] <dalek> nqp: 377ffa6 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[10:19] <dalek> nqp: [js] Implement the 'pass' anchor.

[10:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/377ffa6fb0

[10:19] <dalek> nqp: 86a89c0 | (Pawel Murias)++ | src/vm/js/nqp-runtime/sixmodel.js:

[10:19] <dalek> nqp: [js] Delegate nqp::existskey when using 'is associative_delegate'

[10:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/86a89c0f31

[10:19] <dalek> nqp: 6c3bedf | (Pawel Murias)++ | t/nqp/80-matches.t:

[10:19] *** Ven joined
[10:19] <dalek> nqp: Test using nqp::existskey on matches

[10:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6c3bedfb52

[10:19] <dalek> nqp: 06c7dc6 | (Pawel Murias)++ | src/vm/js/ (3 files):

[10:19] <dalek> nqp: [js] Implement nqp::deletekey.

[10:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/06c7dc6fe9

[10:19] <dalek> nqp: 55e1ce7 | (Pawel Murias)++ | t/nqp/ (2 files):

[10:19] <dalek> nqp: Test nqp::deletekey. Also test it works with associative_delegate.

[10:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/55e1ce7c26

[10:20] <dalek> nqp: dc51783 | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[10:20] <dalek> nqp: [js] coding standard compliance fix - found by make js-lint

[10:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dc5178303b

[10:21] *** ^elyse^ joined
[10:23] *** CurtisOvidPoe joined
[10:24] <CurtisOvidPoe> p6: say 1/(.1 + .2 - .3)

[10:24] <camelia> rakudo-moar b8caf9: OUTPUT«Attempt to divide 10 by zero using div␤  in block <unit> at /tmp/tmpfile:1␤␤Actually thrown at:␤  in block <unit> at /tmp/tmpfile:1␤␤»

[10:24] <CurtisOvidPoe> I am not attempting to divide 10 by zero :)

[10:24] <CurtisOvidPoe> Whereas:

[10:24] <CurtisOvidPoe> p6: say 1/0

[10:24] <camelia> rakudo-moar b8caf9: OUTPUT«Attempt to divide 1 by zero using div␤  in block <unit> at /tmp/tmpfile:1␤␤Actually thrown at:␤  in block <unit> at /tmp/tmpfile:1␤␤»

[10:24] <grondilu> pmurias: how will this js backend work exactly?  It will take Perl 6 code and generate javascript, right?

[10:24] <CurtisOvidPoe> That error message looks better.

[10:27] <pmurias> grondilu: the backend itself takes QAST and generates javascript or javascript+sourcemap

[10:27] <grondilu> ok

[10:27] <grondilu> looking forward to that

[10:28] <pmurias> grondilu: currently it takes QAST compiled from NQP, I plan to get to the point normal Perl 6 starts working this month

[10:31] <btyler> CurtisOvidPoe: does your environment happen to have a PROVE_COMMAND that points to p5?

[10:31] <btyler> https://github.com/tadzik/panda/blob/master/lib/Panda.pm#L139

[10:31] <btyler> or rather, which runs prove without specifying the p6 executable

[10:34] <brrt> yay, i've got locking spectests :-(

[10:38] *** Hor|zon joined
[10:40] <[Tux]> test             50000    36.741    36.629

[10:40] <[Tux]> test-t           50000    37.187    37.075

[10:41] *** ^elyse^ left
[10:42] *** Hor|zon left
[10:45] *** thou joined
[10:45] *** Ven left
[10:50] *** thou left
[10:56] *** n0tjack joined
[10:56] *** diana_olhovik_ joined
[11:00] *** chenryn_ left
[11:00] *** n0tjack left
[11:01] <masak> good afternoon, #perl6

[11:04] *** chenryn_ joined
[11:07] <llfourn> m:package Foo { package Bar { our sub foo {} }}; package Foo::Bar { our sub bar {} }; say Foo::Bar::<&foo>.package; say Foo::Bar::<&bar>.package;

[11:07] <llfourn> m: package Foo { package Bar { our sub foo {} }}; package Foo::Bar { our sub bar {} }; say Foo::Bar::<&foo>.package; say Foo::Bar::<&bar>.package;

[11:07] <camelia> rakudo-moar b8caf9: OUTPUT«(Bar)␤(Foo::Bar)␤»

[11:07] <llfourn> Is that working as intended?

[11:07] <llfourn> shouldn't they both be in Foo::Bar given they are both accessed in that way

[11:08] <dalek> mu: fdd12fd | (Alex Balhatchet)++ | docs/Perl6/Perl5/Differences.pod:

[11:08] <dalek> mu: [docs] fix typo in Perl6::Perl5::Differences

[11:08] <dalek> mu: 

[11:08] <dalek> mu: In a previous commit variable name was changed from $lol to $aoa to more

[11:08] <dalek> mu: accurately describe what was going on, but one instance of $lol remained

[11:08] <dalek> mu: a bit further down in the text.

[11:08] <dalek> mu: review: https://github.com/perl6/mu/commit/fdd12fd01a

[11:08] <dalek> mu: e3ca2fd | RabidGravy++ | docs/Perl6/Perl5/Differences.pod:

[11:08] <dalek> mu: Merge pull request #10 from kaoru/master

[11:08] <dalek> mu: 

[11:08] <dalek> mu: [docs] fix typo in Perl6::Perl5::Differences

[11:08] <dalek> mu: review: https://github.com/perl6/mu/commit/e3ca2fd8bb

[11:09] <masak> I had a thought today: synthetic Qtree construction alleviates one of the big problems of macros: being able to think any kind of thought inside of the macro. we still don't have a correspondingly good solution on the mainline side.

[11:09] *** leedo_ left
[11:09] <masak> (that is, we've addressed "One: " in http://strangelyconsistent.org/blog/macros-progress-report-after-a-long-break with synthetic Qtrees. there's still no solution in sight for "Two: ")

[11:09] *** Aww left
[11:09] *** diana_olhovik_ left
[11:10] <masak> sure, `is parsed` could help a little there. but even it would feel heavy-handed for many things.

[11:12] *** RabidGravy left
[11:14] <ShimmerFairy> masak: may I suggest my long-ago thought that macros could/should be the actions of slangs? :)

[11:17] *** diana_olhovik_ joined
[11:19] <cognominal> or. seen from another perspective, macro would be to slangs what role are to classes?

[11:20] <llfourn> I would expect that that is what would happen. If you add a macro you would get Perl6::Grammar+{Macro} and the same for Actions...

[11:22] *** leedo joined
[11:24] <cognominal> https://github.com/perl6/specs/blame/master/S12-objects.pod#L371  Is this still relevant? I thought there was changes recently even if I have not tracked the specifics?

[11:25] *** diana_olhovik_ left
[11:27] *** Ven joined
[11:28] *** leedo left
[11:28] *** ^elyse^ joined
[11:28] *** chenryn_ left
[11:28] *** leedo joined
[11:29] <dalek> nqp: 04f5f22 | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[11:29] <dalek> nqp: [js] Fix test failure.

[11:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/04f5f22cdc

[11:29] <dalek> nqp: 0c8193d | (Pawel Murias)++ | src/vm/js/ (2 files):

[11:29] <dalek> nqp: [js] Implement nqp::getobjsc/nqp::scgetobjidx

[11:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0c8193d5a3

[11:29] <dalek> nqp: 9a8dda4 | (Pawel Murias)++ | t/serialization/01-basic.t:

[11:29] <dalek> nqp: Test nqp::getobjsc/nqp::scgetobjidx.

[11:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9a8dda47dd

[11:29] <masak> ShimmerFairy: slangs would help here. though exactly how that would look is not clear enough to me.

[11:30] <ShimmerFairy> masak: hmm... perhaps as a starting point, something looking like    my token foobar { ... }; macro xyzzy is parsed(&foobar) { ... };

[11:31] <masak> right, that's using `is parsed`. that solution is pretty clear to me.

[11:31] <masak> what I'm wondering right now is something like "how can a macro user send something exotic (i.e. not an EXPR) to a macro without the macro having to use `is parsed`?"

[11:32] <masak> like, let's say you wanted to send it a trait.

[11:32] <masak> you can't just `my_macro(is foo(...))`, because that's not syntactically allowed

[11:33] <ShimmerFairy> would macro infix:<xyzzy> be going in the right direction ? (replace infix: with your favorite grammar category)

[11:33] *** Ven left
[11:33] <masak> and, hm. quasis.

[11:33] <masak> you can't really `my_macro(quasi { is foo(...) })` either, because that's not syntactically allowed either

[11:33] <nine> .tell lizmat what fails is: my @a = 1, 2; @a[0]:delete; say @a; @a[1]:delete; say @a; # will give you [(Any)] because during iteration in say @a, the deleted position is assigned a container. @a[0]:delete; @a[1]:delete; will correctly shorten the array. Unfortunately I don't see a good way around that :/

[11:33] <yoleaux> nine: I'll pass your message to lizmat.

[11:33] <masak> but that really feels like being on the right track...

[11:33] *** Ven joined
[11:34] <masak> the roundabout way would be to form the Qtree with a quasi, and then *dissect* it by indexing into it, picking out the trait we like

[11:34] <masak> so you might do something silly like `quasi { sub fn is foo(...) { ... } }` just to have a well-formed quasi, and then dig into the resulting Qtree and find the trait

[11:34] <masak> *but*

[11:35] *** tokuhirom joined
[11:35] <masak> what if we use the *same* grammatical category mechanism we will eventually get for unquotes, to tell *quasis* what grammatical category they are?

[11:35] *** weihan left
[11:35] <masak> man, I hope that idea works. that'd be great.

[11:35] <nine> masak: am I correct that quasi { is foo(...) } cannot work because without the thing in front of the "is" the parser cannot even know what "is" means?

[11:35] *** Ven left
[11:35] <masak> nine: right, the parser is essentially in the wrong "mode" to find a trait there.

[11:36] *** jasanj joined
[11:36] <masak> nine: it's like I went up to you and asked "time it is, sir?"

[11:36] <nine> masak: so what's missing is a way to tell it what mode it should be in?

[11:36] <jnthn> FROGGS: Only around for a few moments, but: T:D needs to report itself as a generic type, and then the MOP object should implement instantiate_generic, which returns a new smiley type based on the resolution of T. And then the role instantiation thing that already exists will see the attribute is generic, and the attribute will do instantiate_generic on the type, and all will be well.

[11:36] <yoleaux> 9 Oct 2015 21:11Z <lizmat> jnthn: my Int @a; @a[5] = 42; $_ = 666 for @a fails because it gets an IterationBuffer as target, not an ArrayReificationTarget

[11:36] <yoleaux> 9 Oct 2015 21:31Z <lizmat> jnthn: I put the descriptor issue on RT #126312 , I think it needs deeper thoughts than I currently can muster

[11:36] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126312

[11:36] <masak> yes.

[11:36] <ShimmerFairy> masak: the main use I see for macros for myself would be to easily generate a bunch of classes/functions/etc., e.g.   macro add_class($name) { quasi { class {{{$name}}} { ... } } };    add_class($_) for @semantic_types

[11:36] *** Ven joined
[11:36] <masak> ShimmerFairy: yep.

[11:36] <masak> ShimmerFairy: writing up an issue about that right now. that's why I'm having these ideas :>

[11:37] <ShimmerFairy> masak: certainly would make it less annoying to make a bunch of otherwise-identical semantic block types in Pod :>

[11:37] *** jasanj left
[11:37] *** kid51 joined
[11:38] *** jasanj joined
[11:39] <jnthn> moritz: (up to $N workers in processes) do you mean threads, or are you actually wanting to juggle processes?

[11:39] *** Hor|zon joined
[11:39] *** tokuhirom left
[11:40] <jnthn> moritz: If $N threads you can just create a ThreadPoolScheduler with the number of workers you want and then schedule work on it

[11:42] <jasanj> p6: my $a = [1,2]

[11:42] <camelia> rakudo-moar b8caf9: ( no output )

[11:43] *** Hor|zon left
[11:44] *** Ven left
[11:45] <dalek> nqp: dfd7301 | (Pawel Murias)++ | src/vm/js/nqp-runtime/io.js:

[11:45] <dalek> nqp: [js] Make nqp::getstdin/nqp::getstdout/nqp::getstderr be true when boolified

[11:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dfd7301c14

[11:45] <dalek> nqp: 82c2eff | (Pawel Murias)++ | t/nqp/19-file-ops.t:

[11:45] <dalek> nqp: Test that nqp::getstd{err,out,in} is true when tested with nqp::istrue.

[11:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/82c2effd46

[11:45] <masak> here is the new 007 issue, for anyone interested in quasi unquotes: https://github.com/masak/007/issues/30

[11:46] <jnthn> .tell CurtisOvidPoe Native types are working (aside from some issues around sized/unsinged in certain contexts - but "int" is fine). But you generally need to use them consistently, and for now write in the "C" dialect of Perl 6. :) Your `for` example there is doomed to cause a lot of GC because $_ isn't native, so we box 40000 native ints into Ints for it.

[11:46] <yoleaux> jnthn: I'll pass your message to CurtisOvidPoe.

[11:46] <masak> as far as I'm concerned, this is *next up* to explore on the (implicit) 007 roadmap

[11:51] *** ^elyse^ left
[11:52] * jnthn afk for most of the day

[11:58] *** Ven joined
[12:04] <psch> hi #perl6 o/

[12:04] *** Aww joined
[12:07] <psch> interestingly there's something in @stmts in compile_all_the_stmts on jvm that doesn't stringify with .dump

[12:07] <ShimmerFairy> Nothing's better than figuring out how you're causing the optimizer to eat up all your memory :P

[12:07] <psch> that is, in the "implicitly returning a sub" case...

[12:08] <psch> ShimmerFairy: not even fixing it?

[12:08] <ShimmerFairy> psch: having it fixed would be better :)

[12:11] <ShimmerFairy> My best guess is that the fix I added earlier (for 'constant') didn't account for installing the lexical symbol like routine_def does, and the optimizer just eats up everything when a lookup of a texas variant (as a 'constant' locally) should nqp::die()

[12:11] *** ab6tract joined
[12:11] <ab6tract> o/ #perl6

[12:12] <ShimmerFairy> (and yes, I did manage to trace the code all the way up to right before the nqp::die, so somehow it's specifically that statement that's eating RAM)

[12:13] *** jbotz joined
[12:14] <jbotz> p6: (<a b>, 'c')

[12:14] <camelia> rakudo-moar b8caf9: ( no output )

[12:14] <jbotz> p6: (<a b>, 'c').say

[12:14] <camelia> rakudo-moar b8caf9: OUTPUT«((a b) c)␤»

[12:14] <jbotz> p6: (<a b>, 'c').flat.say

[12:14] <camelia> rakudo-moar b8caf9: OUTPUT«(a b c)␤»

[12:14] <ab6tract> .tell CurtisOvidPoe what jnthn++ didn't mention is that the performance of 'while' loops with native ints is crazy fast. much faster than perl 5 in this case. now, obviously nested while loops that only increment native integers are completely contrived and useless, I took it as a serious implication of the kinds of speedups we may be able to achieve under the hood, once the dust has fully settled on the implementation and performanc

[12:14] <yoleaux> ab6tract: I'll pass your message to CurtisOvidPoe.

[12:15] <jbotz> p6: my @a = (<a b>, 'c'); say @.flat

[12:15] <camelia> rakudo-moar b8caf9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Variable @.flat used where no 'self' is available␤at /tmp/tmpfile:1␤------> 3my @a = (<a b>, 'c'); say @.flat7⏏5<EOL>␤    expecting any of:␤        argument list␤        term␤»

[12:15] <jbotz> p6: my @a = (<a b>, 'c'); say @a.flat

[12:15] <camelia> rakudo-moar b8caf9: OUTPUT«((a b) c)␤»

[12:15] <jbotz> ???

[12:15] <psch> m: say (<a b>, 'c').perl; say (my @ = (<a b>, 'c').perl

[12:15] <camelia> rakudo-moar b8caf9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_elNWc_pSw␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/_elNWc_pSw:1␤------> 3'c').perl; say (my @ = (<a b>, 'c').perl7⏏5<EOL>␤    expecting any of:␤ …»

[12:15] <psch> m: say (<a b>, 'c').perl; say (my @ = (<a b>, 'c')).perl

[12:16] <camelia> rakudo-moar b8caf9: OUTPUT«(("a", "b"), "c")␤[("a", "b"), "c"]␤»

[12:16] <psch> p6: my @a = (<a b>, 'c'); say @a[0].flat

[12:16] <camelia> rakudo-moar b8caf9: OUTPUT«(a b)␤»

[12:17] <jbotz> p6: my @a = (<a b>, 'c'); say @a[0]

[12:17] <camelia> rakudo-moar b8caf9: OUTPUT«(a b)␤»

[12:17] *** jasanj left
[12:17] *** jasanj joined
[12:18] <dalek> nqp: e7971ec | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[12:18] <dalek> nqp: [js] Noop CONTROL {...} until we implement it

[12:18] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e7971ec5f8

[12:18] <dalek> nqp: a4cec83 | (Pawel Murias)++ | tools/build/ (2 files):

[12:18] <dalek> nqp: [js] The bootstrapped nqp-js runs hello world with turned off setting.

[12:18] <dalek> nqp: 

[12:18] <dalek> nqp: make js-bootstrap

[12:18] <dalek> nqp: node nqp-bootstrapped.js --target=js --setting=NULL -e 'nqp::say("Hello World")' | node

[12:18] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a4cec83ec7

[12:18] <psch> ShimmerFairy: iiuc, the failed lookup wants to nqp::die(), but that call eats all the ram?

[12:19] <ShimmerFairy> psch: as far as I can tell, yes. I've removed all the debug says now, but as I recall I put one right above the offending die and it printed.

[12:19] <ab6tract> pmurias++

[12:20] *** ^elyse^ joined
[12:20] <ShimmerFairy> psch: this one:    https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Optimizer.nqp#L176

[12:21] <jbotz> why does "(<a b>, 'c').flat" flatten, but "@a = (<a b>, 'c'); @a.flat" does not?

[12:22] <psch> m: [<a b>, 'c'].flat.say

[12:22] <camelia> rakudo-moar b8caf9: OUTPUT«((a b) c)␤»

[12:24] * psch is still too fuzzy on flattening rules to confidently explain it...

[12:24] *** blackcat joined
[12:25] <blackcat> .

[12:25] *** blackcat is now known as Guest30724

[12:25] <jbotz> m: [<a b>, 'c'].list.flat.say

[12:25] <camelia> rakudo-moar b8caf9: OUTPUT«((a b) c)␤»

[12:25] <jbotz> that should have worked...

[12:25] <ShimmerFairy> m: [<a b>, 'c'].List.flat.say

[12:25] <camelia> rakudo-moar b8caf9: OUTPUT«(a b c)␤»

[12:25] <jbotz> oh!

[12:26] <jbotz> ok, thanks.

[12:26] *** Guest30724 is now known as loren

[12:26] <ShimmerFairy> .List converts to the List type, .list is just "something that's list-like" (admittedly it's a subtle distinction)

[12:26] <psch> ShimmerFairy: if a say directly before the die() worked i have absolutely no idea

[12:26] *** CurtisOvidPoe left
[12:26] <psch> ShimmerFairy: if anything i'd guess there's a CATCH somewhere higher that tries to do something, but...

[12:30] *** ShimmerFairy left
[12:30] <jbotz> If you can't use .flat to flatten an Array, shouldn't it give an Exception when you try?

[12:33] *** thou joined
[12:34] <psch> m: my @a = <a b>; .say for @a.flat

[12:34] <camelia> rakudo-moar b8caf9: OUTPUT«a␤b␤»

[12:34] <psch> ehh

[12:34] <psch> that doesn't prove anything vOv

[12:34] <psch> sorry, too wrapped up in this backend stuff :)

[12:37] *** ShimmerFairy joined
[12:37] *** thou left
[12:38] <ShimmerFairy> psch: well, the function that dies is being called from within a try { } with no CATCH, if that matters any.

[12:38] <psch> ShimmerFairy: i was thinking more along the lines of die() calls in the Optimizer being wrapped with X::AdHoc or something like that, but i don't think that happens

[12:39] <ShimmerFairy> nah, it's still NQP land afaik

[12:39] <psch> ShimmerFairy: a try without CATCH should work as if it had a CATCH { default { } }

[12:40] *** Hor|zon joined
[12:40] <psch> m: try say "u" + 5

[12:40] <camelia> rakudo-moar b8caf9: ( no output )

[12:40] <psch> m: { say "u" + 5; CATCH { default { } } }

[12:40] <camelia> rakudo-moar b8caf9: ( no output )

[12:40] <ShimmerFairy> I think I'll leave the issue alone for a while, I'm lost on what the problem is. Almost seems like my SynonymHOW idea would be easier than trying to make 'constant' do what I want :P

[12:41] *** cygx joined
[12:41] <cygx> o/

[12:41] <cygx> m: say elems 'a'..'zz'; say 'aa' ~~ 'a'..'zz'; say elems 'a'..'aa'

[12:41] <camelia> rakudo-moar b8caf9: OUTPUT«702␤True␤1␤»

[12:41] <cygx> bug or feature?

[12:43] <psch> m: say eager 'a'..'czzzz'

[12:43] <camelia> rakudo-moar b8caf9: OUTPUT«(a b c)␤»

[12:43] <moritz> cygx: feature

[12:43] *** jmc joined
[12:44] *** Hor|zon left
[12:44] *** ab6tract left
[12:46] <lizmat> .botsnack

[12:46] <yoleaux> 09:52Z <nine> lizmat: I have a fix :)

[12:46] <synbot6> om nom nom

[12:46] <yoleaux> :D

[12:46] <yoleaux> 10:01Z <nine> lizmat: It's easy once you just give Array its own iterator method. I still have to fix a regression in t/spec/S32-array/delete.t. Deleting the last elements in an array no longer shortens the array. But have to go now.

[12:46] <yoleaux> 11:33Z <nine> lizmat: what fails is: my @a = 1, 2; @a[0]:delete; say @a; @a[1]:delete; say @a; # will give you [(Any)] because during iteration in say @a, the deleted position is assigned a container. @a[0]:delete; @a[1]:delete; will correctly shorten the array. Unfortunately I don't see a good way around that :/

[12:47] <lizmat> .tell nine I also wondered why Array didn't have it's own iterator

[12:47] <yoleaux> lizmat: I'll pass your message to nine.

[12:47] <cygx> moritz: ok

[12:47] <cygx> ('a'..'zz')[^42] is is...

[12:47] <cygx> *it is

[12:47] <nine> jbotz: an Array is flat by definition. The sublety you're struggling with is that Array itemizes its members. And itemization defeats flattening.

[12:47] <yoleaux> 12:47Z <lizmat> nine: I also wondered why Array didn't have it's own iterator

[12:48] <moritz> m: say ('a'..'Z').elems

[12:48] <camelia> rakudo-moar b8caf9: OUTPUT«0␤»

[12:48] <lizmat> moritz: that's not a lot

[12:48] <moritz> if you define string ranges the naive way, that is .succ until you hit the end point, then 'a'..'Z' produces an endless list

[12:49] <moritz> however you do it, you disappoint somebody.

[12:50] *** n0tjack joined
[12:51] <TimToady> the main thing is don't use .. when you mean ...

[12:52] <TimToady> m: say ('a'...'Z').elems

[12:52] <camelia> rakudo-moar b8caf9: OUTPUT«8␤»

[12:52] <TimToady> eh?

[12:52] <TimToady> that's bust

[12:53] *** ilogger2 joined
[12:53] *** ChanServ sets mode: +v ilogger2

[12:53] <nine> brilliant :)

[12:53] <TimToady> the main thing is don't use ... when you mean .. :)

[12:54] <TimToady> learned too much Unicode, forgot my ASCII

[12:57] <masak> heh, 'a'...'Z'. that one is perfect for some ofuscated Perl 6 contest.

[12:57] *** Erendis42 joined
[12:57] <Erendis42> hello

[12:58] <Erendis42> Zoffix ?

[12:58] <TimToady> m: say 'aa' ... 'ZZ'

[12:58] <camelia> rakudo-moar b8caf9: OUTPUT«(aa a` a_ a^ a] a\ a[ aZ `a `` `_ `^ `] `\ `[ `Z _a _` __ _^ _] _\ _[ _Z ^a ^` ^_ ^^ ^] ^\ ^[ ^Z ]a ]` ]_ ]^ ]] ]\ ][ ]Z \a \` \_ \^ \] \\ \[ \Z [a [` [_ [^ [] [\ [[ [Z Za Z` Z_ Z^ Z] Z\ Z[ ZZ)␤»

[12:59] <Erendis42> hello again, Mr. Wall

[12:59] <TimToady> howdy doody

[12:59] <Erendis42> :D

[13:00] <Erendis42> https://twitter.com/zoffix/status/652584420373757952 i was wondering how i could print the values of this infinite array

[13:00] <Erendis42> and, i thought someone in here could help me with that

[13:00] <Erendis42> of course if you don't have time for chit-chat, i totally understand

[13:00] <TimToady> m: my @fib = 1, 1, *+* ... *; say @fib

[13:00] <camelia> rakudo-moar b8caf9: OUTPUT«[...]␤»

[13:00] <TimToady> m: my @fib = 1, 1, *+* ... *; say eager @fib

[13:01] <camelia> rakudo-moar b8caf9: OUTPUT«Memory allocation failed; could not allocate 162064 bytes␤»

[13:01] <TimToady> those don't work :)

[13:01] <Erendis42> thank you

[13:01] <TimToady> m: my @fib = 1, 1, *+* ... *; .say for @fib

[13:01] *** xfix joined
[13:01] <camelia> rakudo-moar b8caf9: OUTPUT«(timeout)1␤1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤144␤233␤377␤610␤987␤1597␤2584␤4181␤6765␤10946␤17711␤28657␤46368␤75025␤121393␤196418␤317811␤514229␤832040␤1346269␤2178309␤3524578␤5702887␤9227465␤14930…»

[13:01] <lizmat> m: say 111111111 * 111111111

[13:01] <camelia> rakudo-moar b8caf9: OUTPUT«12345678987654321␤»

[13:02] <lizmat> cool  :-)

[13:02] <Erendis42> what kond of sorcery is this O_O

[13:02] <TimToady> m: my @fib = 1, 1, *+* ... *; say @fib[^20]

[13:02] <camelia> rakudo-moar b8caf9: OUTPUT«(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)␤»

[13:02] <Erendis42> *i

[13:02] <Erendis42> omg thanks a lot

[13:02] <Erendis42> i love you

[13:02] *** Erendis42 left
[13:03] *** n0tjack joined
[13:03] <dalek> problem_solver_tutorial: eccf022 | lichtkind++ | / (2 files):

[13:03] <dalek> problem_solver_tutorial: polish paragraph 1

[13:03] <dalek> problem_solver_tutorial: review: https://github.com/perl6/problem_solver_tutorial/commit/eccf022c95

[13:07] <lizmat> TimToady: re EVAL :lang<Perl6>   feels a bit too magical to me...

[13:07] <lizmat> also, I can see one wanting to EVAL a piece of Perl 6 code inside a Inlined::Perl5 piece of code

[13:08] <lizmat> so, my feeling is, if people want to EVAL from the "start", they should just specify :context(SETTING::)

[13:08] <lizmat> so, be specific about it

[13:08] <TimToady> yeah, should always default to current language braid, since that's otherwise hard to specify

[13:08] *** perlcat joined
[13:09] *** n0tjack left
[13:09] <lizmat> my point was, that even *if* you specify :lang<Perl6>, you might want to EVAL it from the current scope anyway

[13:09] <TimToady> I was agreeing

[13:10] <lizmat> okidoki.. so I'll ditch my patch  :-)

[13:10] *** n0tjack joined
[13:12] <TimToady> m: say EVAL "abc\ndef", :lang($~Quote)

[13:12] <camelia> rakudo-moar b8caf9: OUTPUT«This type cannot unbox to a native string␤  in block <unit> at /tmp/obF1cGx4il:1␤␤»

[13:12] *** st_iron joined
[13:12] <TimToady> breakfast &

[13:12] <st_iron> good afternoon

[13:12] <lizmat> m: EVAL "42", :context(SETTING::)

[13:12] <camelia> rakudo-moar b8caf9: ( no output )

[13:12] <lizmat> m: say EVAL "42", :context(SETTING::)

[13:12] <camelia> rakudo-moar b8caf9: OUTPUT«42␤»

[13:13] <lizmat> m: say EVAL "my $a = 42", :context(SETTING::)

[13:13] <camelia> rakudo-moar b8caf9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/kBJGQLBD7h␤Variable '$a' is not declared␤at /tmp/kBJGQLBD7h:1␤------> 3say EVAL "my 7⏏5$a = 42", :context(SETTING::)␤»

[13:13] <TimToady> you'll note my little security break earlier...

[13:13] <lizmat> m: say EVAL q/my $a = 42/, :context(SETTING::)

[13:13] <camelia> rakudo-moar b8caf9: OUTPUT«42␤»

[13:14] <ShimmerFairy> should EVAL have something for --target=ast behavior? I faintly recall wanting that once or twice when fiddling with stuff.

[13:14] *** diana_olhovik_ joined
[13:15] *** n0tjack left
[13:17] <lizmat> m: say ~($~Quote) # that's not going to be a valid lang

[13:17] <camelia> rakudo-moar b8caf9: OUTPUT«Slang<140494176286984>␤»

[13:18] <st_iron> bon appetite TimToady

[13:18] *** n0tjack joined
[13:23] *** n0tjack left
[13:23] *** Eddward joined
[13:25] <lizmat> m: sub prefix:<Zoffix>($a) { say $a }; Zoffix 'is great!'  # no bogus statement, just a missing ;

[13:25] <camelia> rakudo-moar b8caf9: OUTPUT«is great!␤»

[13:26] <lizmat> ah. BenGoldberg already told Zoffix   :-)

[13:28] *** RabidGravy joined
[13:28] <lizmat> m: say (OUTER::).WHICH; say (OUTER::).WHICH   # TimToady  reason why === currently doesn't work on PseudoStashes

[13:29] <camelia> rakudo-moar b8caf9: OUTPUT«PseudoStash|64492936␤PseudoStash|64493104␤»

[13:31] <dalek> rakudo/nom: 025ec1c | lizmat++ | src/core/control.pm:

[13:31] <dalek> rakudo/nom: Coerce :lang to Str for better error message

[13:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/025ec1ce59

[13:31] <lizmat> $ 6 'say EVAL "abc\ndef", :lang($~Quote)'

[13:31] <lizmat> No compiler available for language 'Slang<4528491608>'

[13:32] <lizmat> slightly better error message

[13:39] *** Woodi joined
[13:41] *** Hor|zon joined
[13:41] <lizmat> I guess PseudoStash.WHICH somehow would need to have a representarion of $!ctx in it

[13:45] <lizmat> m: use nqp; say nqp::getattr(MY::,PseudoStash,q/$!ctx/).^name   # and here stops my investigation :-)

[13:45] <camelia> rakudo-moar b8caf9: OUTPUT«BOOTContext␤»

[13:45] *** n0tjack joined
[13:46] *** Hor|zon left
[13:47] *** aborazmeh joined
[13:47] *** aborazmeh left
[13:47] *** aborazmeh joined
[13:47] <FROGGS[mobile]> you dont need 'use nqp' in here for some reason 

[13:48] <FROGGS[mobile]> m: nqp::say "right?"

[13:48] <camelia> rakudo-moar b8caf9: OUTPUT«right?␤»

[13:48] *** ^elyse^ joined
[13:49] <ShimmerFairy> FROGGS[mobile]: "for some reason" is probably not having camelia spout a useless beginning of the warning just because you forgot to use nqp; :)

[13:50] *** n0tjack left
[13:50] <ShimmerFairy> (to be honest, I find the warning entirely too verbose, esp. if you decided to separate one file into multiple and forgot to put in the new 'use nqp's. Isn't it easy for me to search 'nqp::' in the offending file already?)

[13:51] <dalek> nqp: bc5fb0b | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:51] <dalek> nqp: [js] Implement nqp::abs_I.

[13:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bc5fb0b934

[13:51] <dalek> nqp: 9a354e1 | (Pawel Murias)++ | t/nqp/60-bigint.t:

[13:51] <dalek> nqp: Test nqp::abs_I.

[13:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9a354e1490

[13:52] *** espadrine joined
[13:53] <TimToady> Hi, you're up on the screen at PPW

[13:53] * btyler waves

[13:53] <FROGGS[mobile]> \o/

[13:53] <FROGGS[mobile]> have fun at the PPW /o/

[13:53] *** rurban joined
[13:53] <colomon> \o

[13:54] <colomon> m: my $m = (76=>0.03125,66=>0.03125,5=>300.03125).Mix; say $m.roll(3)

[13:54] <camelia> rakudo-moar 025ec1: OUTPUT«(5 5 5)␤»

[13:54] <colomon> huh

[13:55] <colomon> m: my $m = (76=>0.03125,66=>0.03125,5=>300.03125).Mix; say $m.roll(3).perl

[13:55] <camelia> rakudo-moar 025ec1: OUTPUT«(5, 5, 5).Seq␤»

[13:55] <colomon> m: my $m = (76=>0.03125,66=>0.03125,5=>300.03125).Mix; say $m.roll

[13:55] <camelia> rakudo-moar 025ec1: OUTPUT«(5)␤»

[13:55] <FROGGS[mobile]> dang, now all the guys know we have a bug :/

[13:56] <colomon> roll isn’t supposed to return a Seq if there’s just one result, is it?

[13:57] <dalek> nqp: c9eb559 | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:57] <dalek> nqp: [js] Stub nqp::flushfh.

[13:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c9eb5596a2

[13:57] <dalek> nqp: b935a35 | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:57] <dalek> nqp: [js] Implement nqp::getpid

[13:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b935a3565d

[13:57] <jbotz> nine: got it!  Array is a flat list of scalars, even if each of those scalars contains some kind of compound object.

[13:57] <Eddward> m: say 11 - -1 ** 4553535345364535345634543534

[13:57] <camelia> rakudo-moar 025ec1: OUTPUT«12␤»

[13:57] *** pmurias_ joined
[13:58] <FROGGS[mobile]> I think the pow issue is already ticketed

[13:58] <colomon> “A .roll call without arguments returns an element of the invocant list instead of a one-element sequence.”

[13:58] <Eddward> ok.  Checking if it was just me.

[13:58] <colomon> m: say <a b c>.roll

[13:58] <camelia> rakudo-moar 025ec1: OUTPUT«a␤»

[13:58] *** pmurias_ left
[13:58] <colomon> m: say <a=>1 b=>4 c=.3>.Mix.roll

[13:58] <camelia> rakudo-moar 025ec1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lZjW0NBWm3␤Two terms in a row␤at /tmp/lZjW0NBWm3:1␤------> 3say <a=>7⏏051 b=>4 c=.3>.Mix.roll␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement e…»

[13:59] *** pmurias joined
[13:59] <colomon> m: say (a=>1, b=>4, c=.3).Mix.roll

[13:59] <camelia> rakudo-moar 025ec1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Nkfvfj_dNS␤Bogus term␤at /tmp/Nkfvfj_dNS:1␤------> 3say (a=>1,7⏏5 b=>4, c=.3).Mix.roll␤    expecting any of:␤        infix␤        infix stopper␤        prefix␤        statement end␤   …»

[13:59] <colomon> m: say (a=>1, b=>4, c=>3).Mix.roll

[13:59] <camelia> rakudo-moar 025ec1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Mfd5QYTShz␤Bogus term␤at /tmp/Mfd5QYTShz:1␤------> 3say (a=>1,7⏏5 b=>4, c=>3).Mix.roll␤    expecting any of:␤        infix␤        infix stopper␤        prefix␤        statement end␤   …»

[13:59] <ShimmerFairy> colomon: stop italicizing your code :)

[13:59] <colomon> stop what?

[13:59] <FROGGS[mobile]> yeah, I see that too

[13:59] <colomon> I don’t.  :(

[13:59] <pmurias> any way to test nqp::getpid()? it returning the same value when called multiple times is the only thing I can think of testing about it

[14:00] <FROGGS[mobile]> there is some control char in there

[14:00] <colomon> FROGGS[mobile]: sigh.  idiot IRC client

[14:00] * colomon is going after the Mix.roll bug

[14:01] *** travis-ci joined
[14:01] <travis-ci> NQP build failed. Pawel Murias '[js] Implement nqp::getpid'

[14:01] <travis-ci> https://travis-ci.org/perl6/nqp/builds/84663366 https://github.com/perl6/nqp/compare/9a354e14900d...b935a3565d66

[14:01] *** travis-ci left
[14:01] *** araujo joined
[14:02] *** araujo left
[14:03] <dalek> nqp: 09bb50b | (Pawel Murias)++ | t/nqp/60-bigint.t:

[14:03] <dalek> nqp: Fix test count.

[14:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/09bb50b337

[14:04] <FROGGS[mobile]> pmurias: there are things like getpid that are not quite testable

[14:04] <lizmat> colomon: on it

[14:04] <btyler> trying to fix up JSON::Jansson after GLR; I noticed that negative subscripting on arrays isn't working -- it always fetches index 0. Do I need to implement a method in my pretend array (that consumes positional) in order for $array-like-thing[*-1] to work?

[14:05] <colomon> lizmat: want to work on nom or roast?

[14:05] <lizmat> nom...

[14:05] <FROGGS[mobile]> unless you spawn a subprocess and kill it via its pid or so

[14:05] <moritz> FROGGS[mobile]: you can test that it returns a positive number :-)

[14:05] <colomon> lizmat: okay, I’ll make sure we’ve got tests for it

[14:05] <FROGGS[mobile]> however, that might not be portable

[14:05] <lizmat> colomon++

[14:07] *** travis-ci joined
[14:07] <travis-ci> NQP build passed. Pawel Murias 'Fix test count.'

[14:07] <travis-ci> https://travis-ci.org/perl6/nqp/builds/84663843 https://github.com/perl6/nqp/compare/b935a3565d66...09bb50b33724

[14:07] *** travis-ci left
[14:09] *** muraiki joined
[14:10] <colomon> m: say Array ~~ Iterable

[14:10] <camelia> rakudo-moar 025ec1: OUTPUT«True␤»

[14:11] *** diana_olhovik_ left
[14:11] <muraiki> m: say Iterable ~~ Array

[14:11] <camelia> rakudo-moar 025ec1: OUTPUT«False␤»

[14:12] *** FROGGS_ joined
[14:13] *** aborazmeh left
[14:16] *** [Tux] joined
[14:17] <colomon> lizmat: huh.  looking at the specs, they seem to explicitly say that .roll should return an element, while .roll(1) should return a Seq (or other Iterable) with one element in it.

[14:19] <lizmat> yeah, working on that

[14:19] <lizmat> :-)

[14:21] *** thou joined
[14:25] *** ^elyse^ left
[14:26] *** coetry joined
[14:26] *** thou left
[14:26] <colomon> lizmat: okay, I’ll make sure to test that too.  ;)

[14:27] <lizmat> colomon++

[14:27] *** [Tux] is now known as __Tux

[14:28] *** muraiki left
[14:30] <colomon> m: say <a b c>.roll(0)

[14:30] <camelia> rakudo-moar 025ec1: OUTPUT«()␤»

[14:34] <dalek> roast: a8bdca3 | colomon++ | S02-types/mix.t:

[14:34] <dalek> roast: Check for proper return type of Mix.roll.

[14:34] <dalek> roast: review: https://github.com/perl6/roast/commit/a8bdca368d

[14:34] *** rurban left
[14:35] *** __Tux left
[14:36] *** [Tux] joined
[14:37] *** jferrero joined
[14:37] <leont> When trying to use panda, I get «Unhandled exception: Missing or wrong version of dependency 'gen/moar/stage2/QRegex.nqp' (from 'src/Perl6/Pod.nqp')»

[14:37] <leont> Does that mean my installed is broken? :-/

[14:37] *** coetry left
[14:37] <leont> s/ed//

[14:40] <colomon> leont: sounds like maybe you need a make install for Rakudo?

[14:41] <leont> It seems that using panda inside the rakudo source directory breaks everything

[14:42] <leont> Doing exactly that same in a different terminal works fine

[14:42] *** Hor|zon joined
[14:42] <timotimo> perhaps it does -Ilib or something?

[14:44] <leont> Probably

[14:46] <dalek> rakudo/nom: ebde5e8 | (Stefan Seifert)++ | / (4 files):

[14:46] <dalek> rakudo/nom: infix:<Z> should extend list ending in *

[14:46] <dalek> rakudo/nom: 

[14:46] <dalek> rakudo/nom: Fixes part of RT #122230

[14:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ebde5e8df0

[14:46] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122230

[14:46] <dalek> rakudo/nom: e07f31b | (Stefan Seifert)++ | src/core/metaops.pm:

[14:46] <dalek> rakudo/nom: METAOP_ZIP should extend lists ending in *

[14:46] <dalek> rakudo/nom: 

[14:46] <dalek> rakudo/nom: Fixes rest of RT #122230

[14:46] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122230

[14:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e07f31b959

[14:46] <dalek> roast: b6ba447 | (Stefan Seifert)++ | S03-metaops/zip.t:

[14:46] <dalek> roast: RT #122230 fixed in Rakudo

[14:46] <dalek> roast: review: https://github.com/perl6/roast/commit/b6ba447105

[14:46] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122230

[14:46] *** Hor|zon left
[14:47] <dalek> rakudo/nom: 80a3d07 | FROGGS++ | / (11 files):

[14:47] <dalek> rakudo/nom: add DefiniteHOW to make Type:D and Type:U first class types

[14:47] <dalek> rakudo/nom: 

[14:47] <dalek> rakudo/nom: That mean that we can now smartmatch against these types, and also that

[14:47] <dalek> rakudo/nom: the smiley does not just vanish, when these types are used stand-alone.

[14:47] <dalek> rakudo/nom: Parameters and signatures still need to be adjusted to make use of this

[14:47] <dalek> rakudo/nom: new DefiniteHow.

[14:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80a3d07235

[14:47] <dalek> rakudo/nom: 338807c | FROGGS++ | src/Perl6/Actions.nqp:

[14:47] <dalek> rakudo/nom: skip generics when doing attr-value/attr-type check

[14:47] <dalek> rakudo/nom: 

[14:47] <dalek> rakudo/nom: Eventually we should postpone the type check until we know what the gereric

[14:47] <dalek> rakudo/nom: will end up being. See: http://irclog.perlgeek.de/perl6/2015-10-10#i_11352729

[14:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/338807c206

[14:48] *** cygx joined
[14:48] <FROGGS_> we can improve that code in nom also

[14:50] <lizmat> FROGGS_: what code ?

[14:51] <lizmat> I mean, this was in nom already, no ?

[14:51] *** szabgab joined
[14:52] <szabgab> hi there

[14:52] <cygx> results of the benchmarks comparing p5 and p6 I posted 2 days ago: https://gist.github.com/cygx/cbb08f0c01a0cc28c9d3#file-results-txt

[14:52] *** ^elyse^ joined
[14:52] <lizmat> szabgab o/

[14:52] <cygx> so the performance gap hasn't magically gone away since May :(

[14:53] <FROGGS_> lizmat: no

[14:54] <szabgab> is there anyone here who could and want to make a little tweak to http://modules.perl6.org/   to include the Travis-CI status icon for each module?

[14:54] <szabgab> if the module uses Travis-CI...

[14:54] <lizmat> szabgab: PR's welcome :-)

[14:55] <szabgab> I know, but it needs some kind of github token magic

[14:55] <szabgab> I was hoping for someone who already has all that set up

[14:55] * lizmat is not that person :-(

[14:56] <FROGGS_> szabgab: can you add that feature request as an issue?

[14:56] <szabgab> is this there repo: https://github.com/perl6/modules.perl6.org/ ?

[14:57] <FROGGS_> our userbase seems to grow day by days atm and maybe somebody new wants to pick that task

[14:57] <FROGGS_> szabgab: aye

[14:58] <szabgab> for the new userbase: http://perl6maven.com/find-perl6-modules-without-travis-ci

[14:58] <szabgab> :)

[15:00] <moritz> szabgab: you should even have push access the modules.perl6.org repo

[15:00] <btyler> now I regret not paying attention during ab5tract_'s whatever star talk -- $array-thing[*-1] fails (accesses index 0) but $array-thing[$array-thing - 1] works -- fetches the last index

[15:00] <szabgab> FROGGS_: btw I think this is for you, right? https://travis-ci.org/szabgab/uri/builds/84668050

[15:01] <btyler> do I need to specify some special whatever behavior for this class so it knows how to deal with $array-thing[*-1]?

[15:02] <szabgab> moritz: the problem with Perl 6 is that it is like a rabbit hole. I just wanted to upgrade it on the Perl 6 Maven server and now I am already patching the modules site...

[15:02] <moritz> btyler: you need to supply an .elems method, iirc

[15:02] <moritz> btyler: and AT-POS, of course

[15:02] <moritz> (and ASSIGN-POS, as an optimization)

[15:03] <btyler> moritz: got that (and AT-POS); the Numeric coercer is just { self.elems }

[15:03] <btyler> fixing up https://github.com/kanatohodets/p6-json-jansson/blob/master/lib/JSON/Jansson.pm

[15:04] <btyler> the failing test is https://github.com/kanatohodets/p6-json-jansson/blob/master/t/04-decoding-to-jansson.t#L25

[15:04] <moritz> m: class MyArray { has @.x handles <AT-POS EXISTS-POS ASSIGN-POS elems>; }; my $x = MyArray.new; $x[0] = 'a'; $x[1] = 'b'; say $x[*-1]

[15:04] <camelia> rakudo-moar 025ec1: OUTPUT«a␤»

[15:04] <moritz> btyler: maybe EXISTS-POS also :-)

[15:04] <btyler> rats

[15:04] <cygx> who is responsible for invoking Callables passed to .[]?

[15:04] <btyler> thanks

[15:04] <moritz> m: class MyArray { has @.x handles <AT-POS ASSIGN-POS elems>; }; my $x = MyArray.new; $x[0] = 'a'; $x[1] = 'b'; say $x[*-1]

[15:04] <camelia> rakudo-moar 025ec1: OUTPUT«a␤»

[15:05] <moritz> seems to work without EXISTS-POS too

[15:05] <FROGGS_> szabgab: what do you mean, for me?

[15:05] <moritz> cygx: sub postcircumfix

[15:05] <szabgab> FROGGS_: forget about it. my bad

[15:05] <moritz> cygx: sub postcircumfix:<[ ]>, that is

[15:05] <FROGGS_> okay, done :o)

[15:06] <moritz> szabgab: re rabbit hole, I'm aware of that :/

[15:06] *** Eddward left
[15:06] <cygx> moritz: thanks

[15:06] <nine> I didn't care that much, because there's no tests for it, but what exactly is (1, *, 3) Z <a b c> supposed to do?

[15:09] <dalek> nqp: 1a1caa4 | (Pawel Murias)++ | src/vm/js/ (2 files):

[15:09] <dalek> nqp: [js] Stub nqp::getcurhllsym

[15:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1a1caa4b88

[15:09] <dalek> nqp: 0d10269 | (Pawel Murias)++ | src/vm/js/nqp-runtime/hash.js:

[15:09] <dalek> nqp: [js] Hashes numify to the number of pair. nqp::atkey return null for missing keys.

[15:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0d10269f2d

[15:09] <dalek> nqp: 687a357 | (Pawel Murias)++ | t/qast/02-manipulation.t:

[15:09] <dalek> nqp: Test QAST::Block.symbol.

[15:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/687a3574b6

[15:10] <btyler> moritz: wait, isn't that output wrong? $x[*-1] should have returned 'b', not 'a'

[15:11] <nine> Yep, it's wrong in both cases

[15:11] <btyler> m: class MyArray { has @.x handles <AT-POS ASSIGN-POS elems>;  }; my $x = MyArray.new; $x[0] = '0th'; $x[1] = 'first'; $x[2] = "last"; say $x[*-1];

[15:11] <camelia> rakudo-moar 025ec1: OUTPUT«0th␤»

[15:12] *** coetry joined
[15:12] <nine> m: class MyArray { has @.x handles <AT-POS ASSIGN-POS elems cache>;  }; my $x = MyArray.new; $x[0] = '0th'; $x[1] = 'first'; $x[2] = "last"; say $x[*-1];

[15:12] <camelia> rakudo-moar 025ec1: OUTPUT«last␤»

[15:12] <btyler> cache!

[15:12] <nine> btyler: cache is what's missing

[15:12] <btyler> sheesh, ok

[15:12] <btyler> that's a bit of a subtle one

[15:12] <nine> A quick look at array_slice.pm helped :) multi sub postcircumfix:<[ ]>(\SELF, Callable:D $block ) is raw { SELF[$block(|(SELF.cache.elems xx ($block.count == Inf ?? 1 !! $block.count)))]; }

[15:13] <nine> btyler: as you're at it, make sure .list returns something useful, too. Might help later.

[15:15] *** st_iron left
[15:18] *** ^elyse^ left
[15:19] <dalek> roast: de0ce3a | FROGGS++ | S (3 files):

[15:19] <dalek> roast: adjust and unfudge smiley tests

[15:19] <dalek> roast: review: https://github.com/perl6/roast/commit/de0ce3a9e3

[15:20] <dalek> modules.perl6.org: cb6f4d6 | (Gabor Szabo)++ | web/lib/P6Project/Info.pm:

[15:20] <dalek> modules.perl6.org: add progress counter for the next person who will wait for this to finish

[15:20] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/cb6f4d65c1

[15:23] <szabgab> moritz: indeed I have commit bit on that repo. So what what happens after I push out a change? When will that code be used? When will I know if I broke something?

[15:23] <szabgab> I mean the modules.perl6.org site

[15:24] *** zakharyas joined
[15:24] <btyler> nine: woo, thanks. adding .list actually covers the need for .cache, so adding .Numeric and .list were sufficient to get $thing[*-1] to work again

[15:25] <FROGGS_> m: say  class { has Int $.foo is default(0) }.new.foo

[15:25] <camelia> rakudo-moar 025ec1: OUTPUT«(Int)␤»

[15:26] <FROGGS_> I say that's a bug

[15:27] *** pmurias left
[15:28] <dalek> roast: 071720b | FROGGS++ | S04-declarations/smiley.t:

[15:28] <dalek> roast: add tests for RT #126291

[15:28] <dalek> roast: review: https://github.com/perl6/roast/commit/071720b28d

[15:28] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126291

[15:30] <dalek> modules.perl6.org: 0e13d0d | (Gabor Szabo)++ | web/lib/P6Project/Info.pm:

[15:30] <dalek> modules.perl6.org: remove given/when

[15:30] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/0e13d0d979

[15:31] <FROGGS_> m: class Foo { has Int $.foo is default(0) }; say Foo.new.foo

[15:31] <camelia> rakudo-moar 025ec1: OUTPUT«(Int)␤»

[15:36] <lizmat> m: class Foo { has Int $.foo is default(0) }; say Foo.new(foo => Nil).foo

[15:36] <camelia> rakudo-moar 025ec1: OUTPUT«0␤»

[15:36] *** tokuhirom joined
[15:36] <lizmat> I think the container is set up correctly

[15:36] <lizmat> m: class Foo { has Int $.foo is default(42) }; say Foo.new(foo => Nil).foo

[15:36] <camelia> rakudo-moar 025ec1: OUTPUT«42␤»

[15:36] <timotimo> looks like the default BUILD should learn about "is default", eh?

[15:37] <timotimo> though it surprises me a tiny bit that it doesn't have the same codepath as having an initializer

[15:37] <timotimo> perhaps because "is default" only allows values, not a closure?

[15:38] <FROGGS_> it is ticketed as #126318 fwiw

[15:38] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126318

[15:39] <lizmat> ok FROGGS_, will look at it

[15:39] <lizmat> meanwhile I'm banging my head against a "Cannot invoke this object"

[15:40] <nine> lizmat: don't. It hurts you more than it ;)

[15:40] *** tokuhirom left
[15:41] <lizmat> nine FROGGS_ : https://gist.github.com/lizmat/507f8df3c875bd499d27  # fwiw

[15:41] *** skids joined
[15:42] <xfix> .rn .push(($! = "a", 2)); $! = "b"; .perl.say

[15:43] <xfix> rn: .push(($! = "a", 2)); $! = "b"; .perl.say

[15:43] *** Hor|zon joined
[15:43] <camelia> niecza v24-109-g48a8de3: OUTPUT«sh: mono: command not found␤»

[15:43] <camelia> ..rakudo-moar 025ec1: OUTPUT«$[("b", 2),]␤»

[15:43] <xfix> So, I was golfing, and this was strange. Should push copy by reference in tuples?

[15:44] <timotimo> no

[15:44] *** espadrine left
[15:44] <moritz> huh, why not?

[15:44] <moritz> you push a container, so the array stores a container

[15:45] <timotimo> oh

[15:45] <xfix> I see.

[15:45] <timotimo> eh, sorry

[15:45] <timotimo> i meant to say "the behavior as seen is correct"

[15:45] <timotimo> i interpreted it as "should push copy the reference in tuples"

[15:46] <timotimo> btw, we seem to have something like "python -m SimpleHTTPServer" now; it's crustup -MCrust::App::Directory -e 'Crust::App::Directory.new'

[15:46] <timotimo> which, i suppose, could be shorter

[15:46] <timotimo> and also, i haven't tried it

[15:47] <nine> lizmat: looks quite innocent, doesn't it?

[15:48] *** Hor|zon left
[15:48] <dalek> modules.perl6.org: 15f1eb7 | (Gabor Szabo)++ | web/ (2 files):

[15:48] <dalek> modules.perl6.org: show count of modules

[15:48] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/15f1eb7879

[15:49] <lizmat> szabgab++

[15:49] <grondilu> m: class Foo { method AT-POS($n?) { $n.defined ?? ^$n !! ^Inf } }; say Foo.new[];

[15:49] <camelia> rakudo-moar 025ec1: OUTPUT«Foo.new␤»

[15:49] <grondilu> how do I defined Foo.new[]?

[15:50] <grondilu> .oO( list? )

[15:50] <grondilu> m: class Foo { method AT-POS($n?) { $n.defined ?? ^$n !! ^Inf }; method list { ^Inf } }; say Foo.new[];

[15:50] <camelia> rakudo-moar 025ec1: OUTPUT«Foo.new␤»

[15:50] <nine> m: class Foo { method AT-POS($n?) { $n.defined ?? ^$n !! ^Inf } }; say Foo.new.[];

[15:50] <camelia> rakudo-moar 025ec1: OUTPUT«Foo.new␤»

[15:50] *** cygx left
[15:51] <lizmat> grondilu: if you want the zen-slice to do something special, you will need to define your own postcircumfix atm

[15:51] <grondilu> m: class Foo { method AT-POS($n?) { $n.defined ?? ^$n !! ^Inf }; method List { ^Inf } }; say Foo.new[];

[15:51] <camelia> rakudo-moar 025ec1: OUTPUT«Foo.new␤»

[15:51] <grondilu> lizmat: will it conflict with AT-POS?

[15:52] * grondilu realizes it won't if AT-POS requires an argument

[15:52] <lizmat> well, the default postcircumfix{} just returns its self

[15:52] <grondilu> still it's a bit weird to use both an AT-POS and a postcircumfix

[15:52] <lizmat> well, yes, perhaps we need a ZEN

[15:52] <lizmat> method

[15:52] *** szabgab left
[15:54] <lizmat> nine: works fine if I take it out of the role into the classes themselves  :-(

[15:55] <xfix> Either way, thanks.

[15:55] <xfix> I figured I would link to http://codegolf.stackexchange.com/a/60302/3103, in case anyone is interested.

[15:55] <lizmat> TimToady jnthn  anything against adding a ZEN (like AT-POS) for handling the zen-slice ?

[15:56] <lizmat> the only way, afaics, is to add a postcircumfix atm

[15:56] <nine> lizmat: could you move WeightedRoll to Rakudo::Internals?

[15:56] <TimToady> seems reasonable

[15:56] <lizmat> nine: excellent idea

[15:56] <lizmat> I think

[15:57] *** n0tjack joined
[15:57] *** rindolf joined
[16:00] <TimToady> talk over, lunch &

[16:00] <leont> How do I do «my ($foo, $bar) = ...» in perl6, I seem to get complaints $foo isn't defined…

[16:01] <leont> (the ... is a split, in case that matters)

[16:01] <xfix> rn: my ($foo, $bar) = 1, 2; say $bar

[16:01] <camelia> niecza v24-109-g48a8de3: OUTPUT«sh: mono: command not found␤»

[16:01] <camelia> ..rakudo-moar 025ec1: OUTPUT«2␤»

[16:01] <xfix> I need to stop using "n".

[16:01] <nine> m: my ($foo, $bar) = split /,/, "foo,bar"; say $foo; say $bar;

[16:02] <camelia> rakudo-moar 025ec1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CMl4AsDvDQ␤Unrecognized regex metacharacter , (must be quoted to match literally)␤at /tmp/CMl4AsDvDQ:1␤------> 3my ($foo, $bar) = split /7⏏5,/, "foo,bar"; say $foo; say $bar;␤    expecting any of:…»

[16:02] <nine> m: my ($foo, $bar) = split /\,/, "foo,bar"; say $foo; say $bar;

[16:02] <camelia> rakudo-moar 025ec1: OUTPUT«foo␤bar␤»

[16:02] <nine> leont: ^^^ exactly like that

[16:02] *** ^elyse^ joined
[16:03] <leont> Never mind, it seems the problem was somewhere completely elsewhere

[16:04] <leont> probably saying \# in a regex should give a warning, it does something completely different from what I had expected it to do

[16:04] <leont> Resulting in a *very* confusing error message

[16:05] <lizmat> nine: Stage parse      : Cannot find method 'compose'

[16:05] <lizmat>    at gen/moar/m-Metamodel.nqp:355  (blib/Perl6/Metamodel.moarvm:compose_attributes:119)

[16:05] <lizmat>  from gen/moar/m-Metamodel.nqp:2833  (blib/Perl6/Metamodel.moarvm:compose:248)

[16:05] <lizmat>  from src/Perl6/World.nqp:2652  (blib/Perl6/World.moarvm:pkg_compose:12)

[16:05] <lizmat> :-(

[16:06] <lizmat> nine: https://gist.github.com/lizmat/0530767dc0f53be6b7b5

[16:08] <lizmat> I think I'll go back to repeating myself in Mix/MixHash

[16:09] <leont> Is there a trick to unpack a hash, the same way my ($foo, $bar) works for lists? I faguely remember such a thing existing.

[16:09] *** thou joined
[16:09] *** n0tjack left
[16:10] *** n0tjack joined
[16:13] <leont> Ah, I guess (:$foo,) = will do

[16:14] *** thou left
[16:14] *** rurban joined
[16:15] <lizmat> m: my %h = a => 42; (:$a,) = %h; dd $a

[16:15] <camelia> rakudo-moar 025ec1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KPOszvPXpR␤Variable '$a' is not declared␤at /tmp/KPOszvPXpR:1␤------> 3my %h = a => 42; (:7⏏5$a,) = %h; dd $a␤»

[16:15] *** n0tjack left
[16:15] <lizmat> m: my %h = a => 42; my (:$a,) = %h; dd $a

[16:15] <camelia> rakudo-moar 025ec1: OUTPUT«Pair $a = :a(42)␤»

[16:15] <lizmat> hmmm.. shouldn't that just have the value ??

[16:15] <lizmat> m: my %h = a => 42; my (:$b,) = %h; dd $b

[16:15] <camelia> rakudo-moar 025ec1: OUTPUT«Pair $b = :a(42)␤»

[16:18] <nine> lizmat: why a method WeightedRoll instead of a class WeightedRoll?

[16:21] <lizmat> how would you get at the class then ?

[16:21] <lizmat> an our class would be nice, but our lookups are very expensive (15x if I recall correctly)

[16:21] <leont> Great, I think editing the Makefile triggered a complete recompile :-/

[16:22] <colomon> lizmat: any progress with Mix.roll?  I’d be happy to tackle it if you are tied up with other stuff.  (Or kibbitz if there’s something thorny about making it work.)

[16:23] <timotimo> i wish i could tell google chrome what window to open links in that i've opened in other programs >:(

[16:23] <leont> On the positive, my harness script (with about 75% functionality) seems to compile, lets see if it actually runs

[16:23] <lizmat> colomon: see my last two gists

[16:23] *** szabgab joined
[16:23] <lizmat> am now spectesting

[16:24] *** llfourn joined
[16:24] <colomon> lizmat++

[16:26] <nine> lizmat: you do the lookup only once per invocation of roll. I guess the question is if roll is performance sensitive?

[16:27] <lizmat> I could see it being important for some applications that want weighted random numbers

[16:28] <nine> Seems like my fix for RT #122030 works :) Now I only need to add tests. But dinner's first.

[16:28] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122030

[16:29] <dalek> rakudo/nom: 86731df | (Stefan Seifert)++ | src/Perl6/Metamodel/ (2 files):

[16:29] <dalek> rakudo/nom: Give anon roles and classes unique names

[16:29] <dalek> rakudo/nom: 

[16:29] <dalek> rakudo/nom: Fixes (Any but role { }) === (Any but role { }) giving True when it should return False.

[16:29] <dalek> rakudo/nom: Fixes RT #122030

[16:29] *** llfourn left
[16:29] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122030

[16:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/86731df15f

[16:29] <dalek> rakudo/nom: a964c1b | lizmat++ | src/core/Mix (3 files):

[16:29] <dalek> rakudo/nom: Make Mixy.roll return 1 value as specced

[16:29] <dalek> rakudo/nom: 

[16:29] <dalek> rakudo/nom: Please note that the code in Mix/MixHash is identical.  Originally, this

[16:29] <dalek> rakudo/nom: lived in the Mixy role.  This compiled allright, but gave runtime errors

[16:29] <dalek> rakudo/nom: ("Cannot invoke this object") on the return statement.  Moving the class

[16:29] <dalek> rakudo/nom: to Rakudo::Internals caused the settings to fail to compile with "Cannot

[16:29] <dalek> rakudo/nom: find method 'compose'".  So, for now, the code is duplicated (except for

[16:29] <dalek> rakudo/nom: the invocant signature) in the two classes.

[16:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a964c1bcf6

[16:30] <lizmat> Pretty sure this is a problem of composing a lexical class from a role into a consuming class

[16:44] *** Hor|zon joined
[16:47] *** zakharyas left
[16:48] *** Hor|zon left
[16:48] <lizmat> m: dd (a => 1, b => 2, c => 10).Mix.roll(10)

[16:48] <camelia> rakudo-moar 025ec1: OUTPUT«("c", "c", "c", "c", "c", "c", "c", "c", "c", "c").Seq␤»

[16:49] <lizmat> m: dd (a => 1, b => 2, c => 10).Mix.roll

[16:49] <camelia> rakudo-moar 025ec1: OUTPUT«("c",).Seq␤»

[16:49] <lizmat> colomon: should be fixed in HEAD now ^^^

[16:49] <colomon> lizmat++

[16:51] *** perlcat left
[16:56] <dalek> modules.perl6.org: 1510a3a | (Gabor Szabo)++ | web/ (2 files):

[16:56] <dalek> modules.perl6.org: add Travis badge

[16:56] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/1510a3a088

[16:57] *** n0tjack joined
[16:58] <colomon> lizmat++ # my tests pass now

[16:58] <lizmat> cool  :-)

[17:00] <nine> Where should I put the test for https://rt.perl.org/SelfService/Display.html?id=122030?

[17:01] *** pfortuny joined
[17:01] *** ZoffixW joined
[17:01] <pfortuny> Hi, just compiled perl6 rakudo-star-2014-01

[17:01] <nine> S14-roles/mixin.t might be a good home

[17:02] <pfortuny> use Promise gives me a "undefined name"

[17:02] <ZoffixW> pfortuny, that's ancient.

[17:02] <pfortuny> Yes, but.

[17:02] <pfortuny> I tried using brew but my computer is sooo old it does not work

[17:02] <pfortuny> (8 year old MBPro with Lion)

[17:03] <ZoffixW> Is there a spec what the 'provides' field in META.json takes? I'm eyeing this that has an empty arrayref for it, yet all other modules give a hashref: https://raw.githubusercontent.com/colomon/Benchmark-Plot/master/META.info

[17:03] *** n0tjack left
[17:03] <lizmat> S22:218

[17:03] <synbot6> Link: http://design.perl6.org/S22.html#line_218

[17:04] <ZoffixW> Oh, 22.. i was looking in 11

[17:04] <ZoffixW> Thanks.

[17:05] <pfortuny> going to compile from source... Thanks ZoffixW

[17:05] <ZoffixW> No problem.

[17:05] <ZoffixW> .oO( that spec still reads `provides` is optional )

[17:05] <pfortuny> oups.

[17:06] <colomon> lizmat: does that imply that the mapping doesn’t have to be one-to-one?  Could both JSON::Fast and JSON::PurePerl reference the same JSON::FastPurePerl.pm6?

[17:06] <lizmat> Well, only if it would load both...

[17:07] <lizmat> the system expects that the given filename will produce a class with the given name 

[17:08] <lizmat> so, if that JSON::FastPurePerl.pm6 would produce both, hen yes

[17:08] <lizmat> ZoffixW: a distribution can also just provide a script

[17:08] <lizmat> that you cannot use, hence it's optional

[17:08] <ZoffixW> lizmat, and that doesn't need to be in provides

[17:09] <lizmat> indeed

[17:09] <lizmat> provides is only about what will be available for -use-

[17:09] <ZoffixW> Thanks.

[17:10] <timotimo> colomon: that's not how provides works, though

[17:10] <timotimo> it's not about virtual packages like some linux package managers do it

[17:14] <dalek> ecosystem: 9158761 | (Zoffix Znet)++ | META.list:

[17:14] <dalek> ecosystem: Fix broken link

[17:14] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9158761159

[17:17] <colomon> timotimo: I’m not imagining virtual packages?  Just a single .pm6 file providing more than one class.

[17:20] <pfortuny> ouch: IO::Notification.watch-path ... No such method

[17:20] <pfortuny> perl6 2015.02 (rakudo) MoarVM

[17:21] <pfortuny> just trying to:

[17:21] *** n0tjack joined
[17:21] <pfortuny> IO::Notification.watch-path(".").act( -> $change {     $count++;     say "($count) $change.path(): $change.event()";     $finish.keep if $count >= 10; }

[17:21] <pfortuny> sorry for the lack of newlines

[17:22] <ZoffixW> What type of hash keys can get autoquoted? (I need to add it to the docs)

[17:22] <ZoffixW> only alphanumeric?

[17:22] <dalek> doc: 0a0a0e4 | paultcochrane++ | doc/Type/List.pod:

[17:22] <dalek> doc: Point to flatmap correctly in Type and Routine views

[17:22] <dalek> doc: review: https://github.com/perl6/doc/commit/0a0a0e4386

[17:23] <timotimo> colomon: oh, i thought you meant that two packages would supply different versions of the same class

[17:23] <timotimo> so that, for example, you could either use JSON::PP if it's installed or JSON::XS if that's installed (for better performance)

[17:25] <dalek> rakudo/nom: 5391c3d | lizmat++ | src/core/ (3 files):

[17:25] <dalek> rakudo/nom: ZEN-POS/KEY for classes supporting AT-POS/KEY

[17:25] <dalek> rakudo/nom: 

[17:25] <dalek> rakudo/nom: class A { method ZEN-POS { say "ZEN-POS" } }.new[]

[17:25] <dalek> rakudo/nom: ZEN-POS

[17:25] <dalek> rakudo/nom: class A { method ZEN-KEY { say "ZEN-KEY" } }.new{}

[17:25] <dalek> rakudo/nom: ZEN-KEY

[17:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5391c3db3b

[17:25] <lizmat> grondilu: ^^^ would that work for you ?

[17:25] *** n0tjack left
[17:25] <dalek> roast: 048d4b5 | colomon++ | S02-types/mixhash.t:

[17:25] <dalek> roast: Copy new Mix.roll tests to MixHash.roll.

[17:25] <dalek> roast: review: https://github.com/perl6/roast/commit/048d4b5890

[17:26] *** FROGGS_ is now known as FROGGS

[17:28] *** szabgab left
[17:30] *** Peter_R joined
[17:33] *** vendethiel joined
[17:34] *** zakharyas joined
[17:34] <grondilu> lizmat: that will do.  Thanks.

[17:36] <grondilu> (though to be honest in the meantime I figured it was best not to use .[]   But thanks)

[17:37] <grondilu> in case your curious it's for my Clifford module

[17:38] <grondilu> I have to say I4m pretty happy about the possibility to define things like 'my Real %h{UInt}'.   It's a perfect use case for this module..

[17:38] *** coetry left
[17:39] <grondilu> also quite happy with the possibility to make it anonymous:  my Real %{UInt}

[17:40] <grondilu> so:  you guys++

[17:41] *** pfortuny left
[17:44] <lizmat> away for some 3D Pan screening&

[17:45] *** Hor|zon joined
[17:46] <ZoffixW> I thought all pans were 3D!

[17:47] <ZoffixW> vendethiel, what do you mean by "there's no point in making it a group anymore"?

[17:48] <vendethiel> Zoffix: well, it doesn't provide any value. it needn't be grouped

[17:48] <ZoffixW> Without that change, the code produces verbose warnings.

[17:48] <vendethiel> it needed to be grouped, so that it repeated

[17:49] <dalek> roast: 3102a85 | (Stefan Seifert)++ | S14-roles/mixin.t:

[17:49] <dalek> roast: Test for RT #122030

[17:49] <dalek> roast: review: https://github.com/perl6/roast/commit/3102a85a0b

[17:49] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122030

[17:50] *** Hor|zon left
[17:50] <ZoffixW> vendethiel, it's still grouped and there's a point because the string contains two of those groups. The only change is 'A B C' became 'ABC'

[17:50] <vendethiel> Zoffix: why is space significant there?

[17:50] <vendethiel> what's the declarator again?

[17:50] <ZoffixW> m: 'fooABCABCbar' ~~ / foo [ A B C ] + bar /;

[17:50] <camelia> rakudo-moar 025ec1: OUTPUT«Potential difficulties:␤    Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)␤    at /tmp/EKeEvHZeyV:1␤    ------> 3'fooABCABCbar' ~~ / foo [ A…»

[17:51] <ZoffixW> m: 'fooABCABCbar' ~~ / foo [ ABC ] + bar /;

[17:51] <camelia> rakudo-moar 025ec1: ( no output )

[17:51] <vendethiel> yeaaaah. It's meant not to be significant

[17:51] <ZoffixW> 'fooABCABCbar' ~~ / foo [ 'A' 'B' 'C' ] + bar /;

[17:51] <vendethiel> I just meant to say "you can put several pieces"

[17:51] <ZoffixW> m: 'fooABCABCbar' ~~ / foo [ 'A' 'B' 'C' ] + bar /;

[17:51] <camelia> rakudo-moar 025ec1: ( no output )

[17:52] <ZoffixW> I'll cancel that change in the PR. It's a warning and if anyone runs the code will figure out what's going on.

[17:52] <vendethiel> Zoffix: another option would be to have 'A' <[0..9]>, or something else

[17:52] <vendethiel> (that warrants a group)

[17:53] <ZoffixW> ¯\_(ツ)_/¯

[17:54] <FROGGS> m: enum X <a b c>; say a ~~ Int; say True ~~ Int

[17:54] <camelia> rakudo-moar 025ec1: OUTPUT«True␤False␤»

[17:55] <FROGGS> nine: is the enum Bool patch still in a branch?

[17:56] <nine> FROGGS: yes. Still blocking on the Bool.WHERE != Bool.mro[0].WHERE strangeness

[17:56] <vendethiel> ZoffixW: maybe just add it to your "meta issue"

[17:56] <FROGGS> nine: I see

[17:56] *** muraiki joined
[17:56] <FROGGS> m: multi foo() { say "OH HAI" }; multi foo(Int $a?) {}; multi foo(Str $a?) {}; foo

[17:56] <camelia> rakudo-moar 025ec1: OUTPUT«Ambiguous call to 'foo'; these signatures all match:␤:()␤:(Int $a?)␤:(Str $a?)␤  in block <unit> at /tmp/mHZkwyBPK4:1␤␤»

[17:57] <FROGGS> ohh damn, I forgot to jvm-test the Type:D MOP patch...

[17:58] *** thou joined
[18:00] <ZoffixW> vendethiel, done.

[18:01] <FROGGS> m: say 0 ~~ 0 ~~ 0

[18:01] <camelia> rakudo-moar 025ec1: OUTPUT«False␤»

[18:02] *** thou left
[18:03] <FROGGS> m: module Foo {}; my $*Foo::bar = 42; say $*Foo::bar

[18:03] <camelia> rakudo-moar 025ec1: OUTPUT«Dynamic variable $*bar not found␤  in block <unit> at /tmp/WVbDGcXITP:1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp:2860␤  in block <unit> at /tmp/WVbDGcXITP:1␤␤»

[18:03] *** skids left
[18:04] <vendethiel> ZoffixW++ # learnxiny stuff

[18:04] <ZoffixW> \o/

[18:05] <FROGGS> m: say 'abcc' ~~ /(.)+$0/; say $0

[18:05] <camelia> rakudo-moar 025ec1: OUTPUT«｢abcc｣␤ 0 => ｢a｣␤ 0 => ｢b｣␤ 0 => ｢c｣␤[｢a｣ ｢b｣ ｢c｣]␤»

[18:07] <FROGGS> m: say 'abca' ~~ /(.)+$0/; say $0

[18:07] <camelia> rakudo-moar 025ec1: OUTPUT«Nil␤Nil␤»

[18:07] <FROGGS> m: say 'abca' ~~ /(.)+@0/; say $0

[18:07] *** pyrimidine joined
[18:07] <camelia> rakudo-moar 025ec1: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter @ (must be quoted to match literally)␤at /tmp/NwMtVQFzrl:1␤------> 3say 'abca' ~~ /(.)+7⏏5@0/; say $0␤Unable to parse regex; couldn't find final '/'␤at /tmp/NwMtVQFzrl:1␤------> 3say 'a…»

[18:07] <FROGGS> m: say 'abca' ~~ /(.)+@$0/; say $0

[18:07] <camelia> rakudo-moar 025ec1: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter @ (must be quoted to match literally)␤at /tmp/_qeX_vnjs3:1␤------> 3say 'abca' ~~ /(.)+7⏏5@$0/; say $0␤Unable to parse regex; couldn't find final '/'␤at /tmp/_qeX_vnjs3:1␤------> 3say '…»

[18:07] <FROGGS> m: say 'abca' ~~ /(.)+@($0)/; say $0

[18:07] <camelia> rakudo-moar 025ec1: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/L4IrhEZNtk:1␤Use of Nil in string context  in block <unit> at /tmp/L4IrhEZNtk:1␤｢abca｣␤ 0 => ｢a｣␤ 0 => ｢b｣␤ 0 => ｢c｣␤ 0 => ｢a｣␤[｢a｣ ｢b｣ ｢c｣ ｢a｣]␤»

[18:09] <FROGGS> m: say (class { method foo {} }) === (class {})

[18:09] <camelia> rakudo-moar 025ec1: OUTPUT«True␤»

[18:10] *** szabgab joined
[18:10] <szabgab> hello again

[18:11] <szabgab> I've compile Rakudo from the github repository, how can I now install panda?

[18:11] <FROGGS> clone panda and the run the bootstrap script

[18:12] <FROGGS> m: module Foo { module Bar { say $?PACKAGE } }

[18:12] <camelia> rakudo-moar 025ec1: OUTPUT«(Bar)␤»

[18:12] <FROGGS> m: module Foo { module Bar { say $?PACKAGE.WHO } }

[18:12] <camelia> rakudo-moar 025ec1: OUTPUT«␤»

[18:14] *** risou left
[18:16] *** n0tjack joined
[18:17] *** muraiki left
[18:23] *** adu joined
[18:25] *** splitcells joined
[18:25] *** splitcells left
[18:27] *** n0tjack left
[18:29] *** cognominal joined
[18:29] <dalek> rakudo/nom: 013322a | FROGGS++ | tools/build/Makefile-JVM.in:

[18:29] <dalek> rakudo/nom: reorder setting files to unbreak jvm build

[18:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/013322a823

[18:33] <colomon> “reorder setting files to unbreak jvm build”  :\

[18:34] <FROGGS> yes, aligned to how it is for moar

[18:36] <FROGGS> nine: when you do that, please also adjust Makefile-JVM.in: https://github.com/rakudo/rakudo/commit/ebde5e8df0b88e94e9fffb7bc995877346fb2c39#diff-f812e8360aa7c1d95f9e66abc6bf013f

[18:37] <ZoffixW> Should modules.perl6.org list multiple same name dists? https://github.com/FROGGS/p6-Foo-v1.2.0/ https://github.com/FROGGS/p6-Foo-v1.0.0 are both listed in ecosystem but only v1.2.0 is listed on modules.perl.org

[18:37] <FROGGS> Zoffix: if these have distinct urls, yes

[18:37] <FROGGS> Zoffix: it is a test btw

[18:38] <ZoffixW> Alright.

[18:42] <szabgab> 6: my @a = 'abc', 'def'; say @a.elems; my @b; push @b, @a; say @b.elems;

[18:43] *** aruljohn joined
[18:43] <szabgab> p6: my @a = 'abc', 'def'; say @a.elems; my @b; push @b, @a; say @b.elems;

[18:43] <camelia> rakudo-moar 025ec1: OUTPUT«2␤1␤»

[18:43] *** zakharyas left
[18:43] <szabgab> so how do I push an array on another array and get it copy the values?

[18:44] <moritz> szabgab: .append

[18:44] <timotimo> you probably want append rather than push

[18:44] *** aruljohn is now known as arul

[18:44] <szabgab> p6: my @a = 'abc', 'def'; say @a.elems; my @b; @b.append @a; say @b.elems;

[18:44] <camelia> rakudo-moar 025ec1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Two terms in a row␤at /tmp/tmpfile:1␤------> 3', 'def'; say @a.elems; my @b; @b.append7⏏5 @a; say @b.elems;␤    expecting any of:␤        infix␤        infix stopper␤        statemen…»

[18:44] <szabgab> p6: my @a = 'abc', 'def'; say @a.elems; my @b; @b.append: @a; say @b.elems;

[18:44] <camelia> rakudo-moar 025ec1: OUTPUT«2␤2␤»

[18:44] <szabgab> thanks

[18:45] <TimToady> .push is now specialized for pushing a single thing

[18:45] <TimToady> even if it's an array

[18:45] <TimToady> fits better with .pop

[18:46] <pink_mist> coming from perl5, I bet that will take me a while to get used to

[18:46] *** Hor|zon joined
[18:51] *** Hor|zon left
[18:54] *** arul left
[18:54] <masak> should the TTIAR error message after a method call perhaps suggest to use ':' ?

[18:54] *** arul joined
[18:55] *** muraiki joined
[18:56] <FROGGS> m: (1, 2).map: { "'$^x $^y'".say }.assuming: 'got:' # RT #67700 would destroy this beauty

[18:56] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=67700

[18:56] <camelia> rakudo-moar 013322: OUTPUT«'got: 1'␤'got: 2'␤»

[18:56] <FROGGS> so I will change the design docs and reject the ticket as well as adjust any existing test

[18:59] <masak> FROGGS: +1

[18:59] <masak> the current Rakudo behavior is a lot easier to explain, with fewer exceptions.

[19:00] <masak> (and more like Haskell's $ )

[19:00] <FROGGS> and you can easily add parens to get the behaviour the ticket is requesting for

[19:00] <masak> right

[19:00] <FROGGS> m: (1, 2).map: { "'$^x $^y'".say } .assuming: 'got:' # just checking

[19:00] <camelia> rakudo-moar 013322: OUTPUT«'got: 1'␤'got: 2'␤»

[19:01] <FROGGS> k

[19:02] *** n0tjack joined
[19:03] <szabgab> was append added after 2015.09 release?

[19:03] <FROGGS> I think so

[19:04] <masak> aye

[19:09] <FROGGS> the day after the release IIRC

[19:12] *** arul left
[19:19] *** n0tjack left
[19:19] *** Eddward joined
[19:20] <szabgab> http://modules.perl6.org/ now shows the Travis-CI status of each module

[19:21] <ZoffixW> szabgab++

[19:22] *** n0tjack joined
[19:22] <timotimo> could "Add Travis" become one line or smaller in general?

[19:22] <ZoffixW> Yes

[19:22] <ZoffixW> I plan to tweak styles later on, after I debug the missing modules issue

[19:23] <ZoffixW> (there are other problems, like descriptions currently being squished too narrowly)

[19:23] <timotimo> ah, cool

[19:23] <timotimo> do we want a zebra style for that list?

[19:24] <timotimo> or perhaps just a sort-of muted line to separate them?

[19:26] *** Alina-malina joined
[19:26] *** n0tjack left
[19:27] <szabgab> I hope the number of "Add Travis" comments will be much smaller in a few days :)

[19:28] <dalek> doc: 4076e53 | moritz++ | doc/Language/modules.pod:

[19:28] <dalek> doc: modules: mention log file from modules.perl6.org

[19:28] <dalek> doc: review: https://github.com/perl6/doc/commit/4076e532ba

[19:29] *** muraiki left
[19:30] <timotimo> hehe.

[19:31] <timotimo> it'd be nice if we could kick off new builds on travis for all modules once a new release comes out

[19:32] <dalek> modules.perl6.org: de8dbd5 | (Zoffix Znet)++ | web/lib/P6Project/Info.pm:

[19:32] <dalek> modules.perl6.org: Correctly handle HTTPS GitHub URLs in support->{source} (Related to #11)

[19:32] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/de8dbd5a31

[19:32] <moritz> szabgab: can you please update http://perl6maven.com/continuous-integration-for-perl6-modules-using-travis-ci to use "panda installdeps ." instead of "panda install <list of moduels>"?

[19:32] <Eddward> Sorry to ask here.  I didn't see a bug tracker on perl6.org.  Is there a know problem with listing packages in panda in the latest perl star?

[19:33] <moritz> Eddward: I'm not aware of one

[19:33] <Eddward> ok.  I'll try a reinstall to make sure I didn't do anything stupid.

[19:33] <Eddward> I keep getting a stack and the message  : Method 'chars' not found for invocant of class 'Any'

[19:34] <dalek> modules.perl6.org: 9e08aea | (Gabor Szabo)++ | web/index.tmpl:

[19:34] <dalek> modules.perl6.org: add last updated to each module

[19:34] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/9e08aeaddf

[19:35] <moritz> Eddward: works on 2015.09-219-gc52b0b3 built from source

[19:36] <Eddward> I'm working from rakudo-star-2015.09.tar.gz.  I haven't played with p6 for a year or more.

[19:36] <Eddward> Just checking what's new.

[19:37] <dalek> json: 2484983 | moritz++ | .travis.yml:

[19:37] <dalek> json: Add .travis.yml

[19:37] <dalek> json: review: https://github.com/moritz/json/commit/2484983b14

[19:37] <moritz> Eddward: lots of stuff :-)

[19:37] <moritz> a much saner iteration and (non-)flattening model

[19:37] <Eddward> The GLR is something.

[19:37] <moritz> right

[19:37] <dalek> specs: d1d502f | FROGGS++ | S (2 files):

[19:37] <dalek> specs: remove an Exception To The Rule about blocks in method calls

[19:37] <dalek> specs: 

[19:37] <dalek> specs: Bare blocks and pointies are now normal arguments in a method call

[19:37] <dalek> specs: introduced by a colon. Their right curly will still terminate a

[19:37] <dalek> specs: statement when a newline is following, but a method call attached

[19:37] <dalek> specs: to the block is now called on the block itself, rather than on the

[19:37] <moritz> NFG too

[19:37] <dalek> specs: term on the left of the block.

[19:37] <dalek> specs: It is easier to add parens to get the other meaning, but it is hard

[19:37] <dalek> specs: to remove implicit parens as the design docs status up to now.

[19:37] <dalek> specs: review: https://github.com/perl6/specs/commit/d1d502fb71

[19:38] <Eddward> I was following rss feeds and they all died off.  The I saw the /. story on the Birthday release.

[19:38] <Eddward> Last I had heard, moar was something new.

[19:38] <moritz> Eddward: http://pl6anet.org/ is our blog aggregator now

[19:38] <moritz> Eddward: Moar is our primary backend now, and it rocks

[19:38] <Eddward> I have that feed now.  I'm catching up a little.

[19:38] <szabgab> moritz: done

[19:39] <moritz> the old blog aggregator forgot to renew its domain, or something :/

[19:39] <moritz> szabgab: thanks

[19:39] <Eddward> Yep.  Is the jvm & CLR backend still active?

[19:39] *** szabgab left
[19:40] <moritz> CLR backend was another project (niezca); sadly it's no longer maintained

[19:40] <moritz> the JVM backend is active, yes

[19:40] <moritz> though still a bit of a second-class citizen

[19:41] <moritz> psch++ is improving it, thankfully

[19:41] <TimToady> signal doesn't work too well yet...

[19:41] <Eddward> moritz: Cool

[19:41] <rindolf> Hi all. Sup?

[19:42] <ZoffixW> Mmm.. szabgab's plan to have travis backfired. I'm getting a ton of 429s (HTTP Too Many Requests)

[19:42] <El_Che> (niecza not niezca)

[19:42] <rindolf> ZoffixW: where?

[19:42] <Eddward> I figured the clr thing would help sneak p6 into gaming.  mono seem popular-ish there.  jvm is how I'm thinking if backdooring it into work.

[19:42] <ZoffixW> rindolf, modules.perl6.org

[19:43] <rindolf> ZoffixW: ah.

[19:43] <moritz> ZoffixW: when loading the website? or when running the build script?

[19:43] *** zakharyas joined
[19:43] * vendethiel wonders if niecza means something in polish now..

[19:44] <moritz> ah, now I see it too (on the website)

[19:44] <ZoffixW> moritz, when viewing the site. Basically travis receives 385 requests for badges at the same time and says "Nah, bruh" :)

[19:44] <timotimo> Eddward: it's not a terribly difficult thing to get onto CLR the same way we've gone onto the JVM, but it's a lot of work

[19:45] <ZoffixW> We should do something like "show travis results" on click or on hover and users could look up travis status for specific modules

[19:45] * ZoffixW opens an Issue

[19:45] <timotimo> granted, less work than getting from only parrot to the jvm as well

[19:45] <timotimo> because many things have been put into place for that piece of work and multi-backend-stuff has become better since then thanks to MoarVM showing up

[19:45] <timotimo> but it's still quite a sizable chunk of work

[19:45] <vendethiel> Eddward: mono in gaming? I think unity is using some outdated version, right?

[19:46] *** thou joined
[19:46] <Eddward> vendethiel: I dunno.  I knew it was in there.  I don't know much about it.

[19:47] <ZoffixW> .tell szabgab There's a problem with Travis badges. Let me know if you need any help: https://github.com/perl6/modules.perl6.org/issues/12

[19:47] <yoleaux> ZoffixW: I'll pass your message to szabgab.

[19:47] *** Hor|zon joined
[19:47] <Eddward> I'm just abusing my knowledge of trivia at the moment.  The jvm one is the one I'm more likely to use aside from the default.

[19:47] <timotimo> vendethiel: unless CLR has something like InvokeDynamic that's missing from newer versions, i don't think a rakudo-on-clr thing would necessarily rely on a very recent version of the CLR

[19:48] <vendethiel> timotimo: more like, they're really stuck in their own scheme of things (their boo language, few c# changes, bla bla bla)

[19:48] <timotimo> Eddward: we don't have the ridiculously advanced unicode support on the JVM backend yet, sadly

[19:48] <timotimo> boo language?

[19:49] <Eddward> Baby steps are ok.  I'd sneak it in to the automation we use internally.  Full unicode wouldn't be a requirement there.

[19:49] <Eddward> I would be for anything we ship.

[19:49] <chansen_> "ridiculously advanced"?

[19:50] <Eddward> err *It* (unicode) would be (required) for anything we ship.

[19:50] *** telex joined
[19:50] <dalek> modules.perl6.org: de83c87 | (Zoffix Znet)++ | web/index.tmpl:

[19:50] <dalek> modules.perl6.org: Temporarily disable Travis badges so we do not hammer Travis (see #12)

[19:50] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/de83c87897

[19:51] *** thou left
[19:51] <timotimo> Eddward: oh, we have proper unicode support in the jvm backend

[19:51] <timotimo> it's just that the support we offer with MoarVM is more than any other language currently offers, to my knowledge

[19:51] *** Hor|zon left
[19:52] <vendethiel> timotimo: a weird language :P

[19:52] <Eddward> If it's up to icu standards, that would do it.

[19:52] <timotimo> chansen_: like https://github.com/perl6/roast/blob/7f75447e3078e51207f3396ffe50e3c77cc25732/S32-str/fc.t

[19:52] <timotimo> on the jvm we use what java gives us, i believe

[19:53] <Eddward> If I have panda install panda, do it replace itself?

[19:53] <Eddward> I just can't type today.

[19:53] <ZoffixW> Careful! I'm pretty sure that's how you implode the universe! :)

[19:53] <timotimo> there's a rebootstrap script that does pretty much exactly that; it just has to do a few things like set up some paths

[19:54] *** adu left
[19:54] <timotimo> dinner time \o/

[19:54] <Eddward> I tried fixing my panda list problem with : ./install/bin/panda install panda

[19:55] <Eddward> Install worked but I still can't list packages.

[19:56] *** adu joined
[19:57] <chansen_> timotimo: aha, wasn't that case slated for past christmas?

[19:59] * chansen_ might have misread jnthn's message the other day

[20:00] *** adu left
[20:00] *** n0tjack joined
[20:01] *** pmurias_ joined
[20:01] *** pmurias joined
[20:03] *** eliasr joined
[20:03] <pmurias> vendethiel: niecza is not a valid polish

[20:04] <pmurias_> word

[20:04] <vendethiel> aw :(

[20:04] <vendethiel> thanks anyway!

[20:05] <pmurias> it could be read as misspelled regional slang "should not"

[20:07] *** n0tjack left
[20:09] <pmurias_> vendethiel: as far as I remember niecza is a mangled czech word

[20:09] <Eddward> Is a .moarvm a compiled file?

[20:10] <Eddward> And if so, if I edit App.pm do I need to delete App.pm.moarvm to get it to take?

[20:10] <pmurias> Eddward: it contains the bytecode the perl6/nqp is compiled to

[20:13] <Eddward> Deleting it works.  panda list works now.  \o/

[20:14] <ZoffixW> \o/

[20:18] <Eddward> Is there any way to tell panda to fix ./install/share/perl6/site/panda/state?  Looks like a bad entry got in there.

[20:19] <dalek> roast: 95a2822 | FROGGS++ | S12-methods/syntax.t:

[20:19] <dalek> roast: fix tests for RT #67700

[20:19] <dalek> roast: review: https://github.com/perl6/roast/commit/95a28225ed

[20:19] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=67700

[20:20] *** xfix left
[20:20] *** szabgab joined
[20:22] <Eddward> Gotta go.  Thanks for the help folks

[20:22] *** Eddward left
[20:24] <szabgab> Zoffix: so what do you think, should we gather the Travis status when building the page in the script?

[20:24] <yoleaux> 19:47Z <ZoffixW> szabgab: There's a problem with Travis badges. Let me know if you need any help: https://github.com/perl6/modules.perl6.org/issues/12

[20:24] <dalek> modules.perl6.org: f534b2c | (Zoffix Znet)++ | web/ (2 files):

[20:24] <dalek> modules.perl6.org: Fix handling of empty descriptions (Closes #11)

[20:24] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/f534b2c24c

[20:24] <szabgab> I found the API call

[20:25] <ZoffixW> szabgab, so we'd be keeping a local version of travis badges?

[20:25] <szabgab> we can do eitehr that

[20:26] <szabgab> or there might be badges with fixed urls we can use on their site

[20:26] *** zakharyas left
[20:26] *** llfourn joined
[20:26] <szabgab> As I can see there are 3 status values: 0, 1, null

[20:29] <ZoffixW> szabgab, I think travis results should be requested by the user viewing the page for a specific module they're interested in. Doing 100+ requests either during build or during viewing is unfrair on travis's infrastructure, considering the visitors likely don't care about build status of ALL modules.

[20:30] *** llfourn left
[20:31] <szabgab> I hope there will be more visitors to modules.perl.org / hour than number of modules, in which case cashing the Travis-CI status is actually reducing the load on the Travis server

[20:32] <szabgab> and if we further want to reduce that load then we can check the travis status only if there was an update for the module since our last check

[20:32] <dalek> rakudo/nom: 20a4df2 | lizmat++ | src/core/ (2 files):

[20:32] <dalek> rakudo/nom: Make ZEN-POS/KEY accept any attributes

[20:32] <dalek> rakudo/nom: 

[20:32] <dalek> rakudo/nom: This will allow:

[20:32] <dalek> rakudo/nom: 

[20:32] <dalek> rakudo/nom: class A { method ZEN-KEY(:$foo!) { say "ZEN-KEY:foo" } }.new{}:foo'

[20:32] <dalek> rakudo/nom: ZEN-KEY:foo

[20:32] <dalek> rakudo/nom: class A { method ZEN-POS(:$foo!) { say "ZEN-POS:foo" } }.new[]:foo'

[20:32] <dalek> rakudo/nom: ZEN-POS:foo

[20:32] <dalek> rakudo/nom: 

[20:32] <dalek> rakudo/nom: to work, allowing module builders to add their own attributes to their

[20:32] <dalek> rakudo/nom: ZEN-POS/KEY

[20:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20a4df2d84

[20:33] <szabgab> but we don't have a database yet, so probably that caching can wait

[20:37] <lizmat> szabgab: 2 typos in Perl6 maven article:     "fecth"

[20:37] <lizmat> and "better to use an HTML Parser"  (not *and*)

[20:37] <ZoffixW> szabgab, alright, then let's fetch badges during build and serve from them from us instead of travis. I was gonna update styles and stuff right now so I'll be doing a bunch of edits on markup/CSS.... is that alright with you? I don't want us to step on each other's toes editing the same files.

[20:38] *** n0tjack joined
[20:39] <szabgab> lizmat: fixed, thanks

[20:40] <dalek> roast: f2cfca2 | lizmat++ | S32- (2 files):

[20:40] <dalek> roast: Adjust tests to new $a[]:foo zen slice features

[20:40] <dalek> roast: review: https://github.com/perl6/roast/commit/f2cfca2cf3

[20:40] <ZoffixW> (or I guess use the travis's API than just fetching badges)

[20:40] <szabgab> ZoffixW: sure do it

[20:40] *** ][Sno][ joined
[20:40] <szabgab> I'll add the travis api thing

[20:40] *** [dpk] joined
[20:40] <ZoffixW> k :)

[20:41] <szabgab> btw have you noticed the dates already?

[20:41] *** inokenty joined
[20:41] *** baest_ joined
[20:41] <szabgab> it would be nice if we could sort the modules by date

[20:41] *** FROGGS[mobile]2 joined
[20:41] <szabgab> Oh and I think I wanted to add some dependency mapping as well

[20:42] <szabgab> At least to show a "number of other modules depending on this one"

[20:42] *** tony-o_ joined
[20:42] *** jmc_ joined
[20:43] <szabgab> and then maybe allow to sort based on that too

[20:43] *** bbarker` joined
[20:43] *** Psyche^_ joined
[20:44] *** DrForr_ joined
[20:44] *** n0tjack left
[20:44] *** [dpk] is now known as dpk

[20:47] *** n0tjack joined
[20:48] *** Hor|zon joined
[20:51] *** n0tjack left
[20:52] *** Hor|zon left
[20:54] *** DrForr left
[20:54] *** tony-o left
[20:54] *** Debolaz joined
[20:57] <nine> FROGGS: oops, sorry

[20:59] <FROGGS> nine: np, it is easy to fix... and due to that coincident it was broken for not more than four hours

[21:00] *** eiro joined
[21:02] <dalek> rakudo/nom: 8f4e908 | FROGGS++ | src/ (2 files):

[21:02] <dalek> rakudo/nom: fix symbol visibility for `anon enum <foo>` RT #123083

[21:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f4e908869

[21:02] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123083

[21:03] <dalek> roast: f47d1da | FROGGS++ | S12-enums/anonymous.t:

[21:03] <dalek> roast: add test for RT #123083

[21:03] <dalek> roast: review: https://github.com/perl6/roast/commit/f47d1dab1b

[21:03] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123083

[21:06] <dalek> modules.perl6.org: 56379cc | (Gabor Szabo)++ | web/ (5 files):

[21:06] <dalek> modules.perl6.org: fetch the Travis-CI build status and serve a local badge

[21:06] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/56379cc251

[21:06] <szabgab> ZoffixW: let's see if this works properly

[21:06] <dalek> roast: 51332a9 | FROGGS++ | S12-enums/anonymous.t:

[21:06] <dalek> roast: add more tests for RT #123083

[21:06] <dalek> roast: review: https://github.com/perl6/roast/commit/51332a9ae1

[21:06] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123083

[21:18] <ugexe> m: say List.new.rotor(1); say Buf.new.elems; say Buf.new.rotor(1)

[21:18] <camelia> rakudo-moar 20a4df: OUTPUT«()␤0␤This type does not support elems␤  in block <unit> at /tmp/aHCts48y7W:1␤␤»

[21:18] <dalek> modules.perl6.org: 57eaf6a | (Gabor Szabo)++ | web/ (3 files):

[21:18] <dalek> modules.perl6.org: add --limit flag to make it easier to debug the script runnig only on a subset of modules

[21:18] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/57eaf6a139

[21:20] *** firstdayonthejob joined
[21:23] <dalek> modules.perl6.org: bc4474e | (Gabor Szabo)++ | web/lib/P6Project/Info.pm:

[21:23] <dalek> modules.perl6.org: remove debugging printout. Bad forgetful coder

[21:23] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/bc4474e6a7

[21:26] <ugexe> is Buf.new.rotor(1) meant to throw such an error?

[21:26] <lizmat> ugexe: I think .rotor is actually NYI for Buf

[21:27] <lizmat> patches welcome  :-)

[21:29] <lizmat> good night, #perl6!

[21:29] <FROGGS> gnight lizmat 

[21:30] <ugexe> it mostly works from what i've used it for. if thats not expected behavior then ill dig around

[21:30] <ugexe> m: Buf.new(0,0,0,0,0).rotor(2,:partial).map: {.say}

[21:30] <camelia> rakudo-moar 8f4e90: OUTPUT«(0 0)␤(0 0)␤(0)␤»

[21:31] <colomon> lizmat: o/

[21:34] *** ilbelkyr_ joined
[21:34] *** thou joined
[21:34] *** ilbelkyr_ is now known as ilbelkyr

[21:34] *** labster_ joined
[21:35] *** olinkl_ joined
[21:35] *** n0tjack joined
[21:35] *** tinita_ joined
[21:36] *** ambs_ joined
[21:36] <ZoffixW> moritz, do you run modules.perl6.org? Seems the newly-added build-*.png files in the repo aren't accessible on the site.

[21:36] *** japhb_ joined
[21:36] *** M-tadzik1 joined
[21:36] *** tokuhirom joined
[21:36] *** BenGoldberg_ joined
[21:37] *** spider-mario_ joined
[21:37] *** cxreg2 joined
[21:37] *** erxeto_ joined
[21:37] *** grondilu_ joined
[21:37] *** avuserow1 joined
[21:37] *** huf_ joined
[21:38] *** BinGOs_ joined
[21:38] *** rudi_s_ joined
[21:38] *** preyalone_ joined
[21:38] *** thou left
[21:39] *** kjs_ joined
[21:39] *** spider-mario_ is now known as spider-mario

[21:39] *** n0tjack left
[21:40] *** R41g0rX joined
[21:41] *** tokuhirom left
[21:41] *** robins joined
[21:41] *** woodruff- joined
[21:42] *** yx_ joined
[21:43] *** erxeto left
[21:43] *** ambs left
[21:43] *** b2gills left
[21:43] *** cxreg left
[21:43] *** robinsmidsrod left
[21:43] *** huf left
[21:43] *** xnrand left
[21:43] *** rudi_s left
[21:43] *** tinita left
[21:43] *** BinGOs left
[21:43] *** labster_ is now known as labster

[21:43] <ZoffixW> weeeee

[21:43] *** olinkl_ is now known as olinkl

[21:44] *** yx_ is now known as xnrand

[21:45] <ZoffixW> szabgab++ # making me learn how to resolve merge conflicts with git :)

[21:46] <R41g0rX> is pearl still alive?

[21:46] <FROGGS> :D

[21:46] <R41g0rX> perl*

[21:46] <ZoffixW> R41g0rX, very! :)

[21:46] <dalek> modules.perl6.org: 0b7a67e | (Gabor Szabo)++ | web/lib/P6Project (2 files):

[21:46] <dalek> modules.perl6.org: move the sorting code to the main module

[21:46] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/0b7a67e216

[21:46] <dalek> modules.perl6.org: 3f81959 | (Gabor Szabo)++ | web/ (3 files):

[21:46] <dalek> modules.perl6.org: create recent.html page

[21:46] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/3f81959176

[21:46] <ZoffixW> R41g0rX, there are actually TWO Perls now. Perl 5 and Perl 6. Both alive.

[21:46] <R41g0rX> why do you think that?

[21:46] <TimToady> why not?

[21:46] <ZoffixW> R41g0rX, why do I think what?

[21:47] <R41g0rX> that perl is still alive

[21:47] <TimToady> who cares, as long as it does what I want

[21:47] <R41g0rX> sorry for my bad english

[21:47] <ZoffixW> R41g0rX, there are users and recent releases. If that's not alive, I don't know what is ;)

[21:47] <R41g0rX> and sorry for my ignorance

[21:47] <R41g0rX> i am just curious

[21:47] <R41g0rX> you usually use perl to do what kind of program?

[21:48] <ZoffixW> R41g0rX, it's OK. It's common misconception that Perl is dead. The reason is in the 90s it was pretty much the ONLY way to do web and now we have many ways, but people have a perception that Perl disappeared.

[21:48] *** n0tjack joined
[21:48] <TimToady> we do all sorts of things with Perl

[21:48] <ZoffixW> R41g0rX, I use Perl for pretty much everything: web scraping, web apps, various tools

[21:48] *** samb1 joined
[21:49] <R41g0rX> perl have full support for POO?

[21:49] *** Hor|zon joined
[21:49] <szabgab> I was just bitten by Perl

[21:49] <szabgab> it must be alive...

[21:49] <FROGGS> middleware services for $work... calculating fees etc etc... that's what I usually do

[21:49] <ZoffixW> R41g0rX, what's that?

[21:49] <FROGGS> Plain Old Documentation

[21:49] * ZoffixW sees POO not POD

[21:50] <FROGGS> ups

[21:50] <R41g0rX> i was talking about object class

[21:51] *** yakudza joined
[21:51] *** b2gills joined
[21:51] <FROGGS> the Perls certainly support object orientation... but what is POO?

[21:51] <ZoffixW> R41g0rX, Perl 6 has one of the most sofisticated OO among languages. Perl 5 has a whole smorgasboard of OO stuff for you to choose from Moo, Moose, Mojo::Base; there likely others

[21:51] <R41g0rX> sorry in english is OOP

[21:52] <R41g0rX> my mistake

[21:52] <FROGGS> ahh, I see

[21:52] <FROGGS> R41g0rX: Perl 6 has classes, roles, traits and a bunch of other nice things

[21:53] *** preyalone_ is now known as preyalone

[21:53] *** Hor|zon left
[21:53] <dalek> modules.perl6.org: acbd414 | (Gabor Szabo)++ | web/recent.html:

[21:53] <dalek> modules.perl6.org: remove generated recent.html file and adding it to gitignore

[21:53] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/acbd41499a

[21:53] *** Jonis joined
[21:54] <szabgab> ZoffixW: any idea why do we get the broken images now on the modules site?

[21:54] <ZoffixW> szabgab, likely some setup of how the site's generated. I pinged moritz on the issue

[21:55] <szabgab> Oh I think I found it

[21:55] <FROGGS> if I'm not mistaken the site is generated on hack, and certain stuff is rsync'ed to the webserver

[21:55] <szabgab> I need to add the new images to an array to copy them to the right directory

[21:55] <ZoffixW> szabgab, wait. Don't commit anything. I'm trying to merge my styles 

[21:55] <szabgab> ok

[21:57] *** rindolf left
[21:58] <R41g0rX> Moo is a package, module or library?

[21:58] <dalek> modules.perl6.org: 66d5a81 | (Zoffix Znet)++ | web/index (2 files):

[21:58] <dalek> modules.perl6.org: Clean up markup

[21:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/66d5a811fe

[21:58] <dalek> modules.perl6.org: be89852 | (Zoffix Znet)++ | web/ (6 files):

[21:58] <dalek> modules.perl6.org: Update styles to fit more info

[21:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/be89852e3e

[21:58] <dalek> modules.perl6.org: 618d340 | (Zoffix Znet)++ | web/ (7 files):

[21:58] <dalek> modules.perl6.org: Merge travis stuff

[21:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/618d3400d0

[21:58] <dalek> modules.perl6.org: c4a2db2 | (Zoffix Znet)++ | web/ (4 files):

[21:58] <dalek> modules.perl6.org: Merge again

[21:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/c4a2db24bc

[21:58] <dalek> modules.perl6.org: 4609b5b | (Zoffix Znet)++ | web/recent.html:

[21:58] <dalek> modules.perl6.org: Merge branch 'master' of https://github.com/perl6/modules.perl6.org

[21:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/4609b5b7d3

[21:59] <ZoffixW> Hopefully I didn't screw it up :/

[21:59] <ZoffixW> R41g0rX, those are all synonyps

[21:59] <ZoffixW> *synonyms

[21:59] <dalek> problem_solver_tutorial: ff9a578 | (Herbert Breunung)++ | menu.md:

[21:59] <dalek> problem_solver_tutorial: polish menu

[21:59] <dalek> problem_solver_tutorial: review: https://github.com/perl6/problem_solver_tutorial/commit/ff9a578ec5

[21:59] <dalek> problem_solver_tutorial: 349dc0b | (Herbert Breunung)++ | / (2 files):

[21:59] <dalek> problem_solver_tutorial: Merge branch 'master' of https://github.com/perl6/problem_solver_tutorial

[21:59] <dalek> problem_solver_tutorial: clean up menean up menu

[21:59] <dalek> problem_solver_tutorial: review: https://github.com/perl6/problem_solver_tutorial/commit/349dc0b785

[21:59] <dalek> problem_solver_tutorial: 9482cfe | (Herbert Breunung)++ | chapter/text0.md:

[21:59] <dalek> problem_solver_tutorial: complete paragraph 1

[21:59] <dalek> problem_solver_tutorial: review: https://github.com/perl6/problem_solver_tutorial/commit/9482cfe9f4

[21:59] <dalek> problem_solver_tutorial: 88c3799 | (Herbert Breunung)++ | / (3 files):

[21:59] <dalek> problem_solver_tutorial: wrote paragraph 3

[21:59] <dalek> problem_solver_tutorial: review: https://github.com/perl6/problem_solver_tutorial/commit/88c37991e5

[22:00] <ZoffixW> Commit all the things \o/

[22:00] *** BinGOs_ is now known as BinGOs

[22:00] <szabgab> ZoffixW: let me know when done

[22:01] *** BinGOs left
[22:01] *** BinGOs joined
[22:01] <ZoffixW> szabgab, I'm just running a test build to see that it builds. Will let you know shortly

[22:01] <szabgab> ok

[22:02] *** tinita_ is now known as tinita

[22:02] <szabgab> These days I usually do    git pull --rebase   to avoid extensive merges

[22:02] <ZoffixW> I'll look up how to use that :)

[22:02] *** n0tjack left
[22:02] <szabgab> ZoffixW:  there is now a  --limit flag so you can build the site for less than all the modules

[22:03] <ZoffixW> Ah cool.

[22:04] <dalek> problem_solver_tutorial: 0c81691 | (Herbert Breunung)++ | / (8 files):

[22:04] <dalek> problem_solver_tutorial: rename menu > table-of-content

[22:04] <dalek> problem_solver_tutorial: review: https://github.com/perl6/problem_solver_tutorial/commit/0c81691ae7

[22:04] <timotimo> can we get a piece of javascript or something onto the modules page that turns "updated" into a human-friendly string

[22:05] <R41g0rX> you guys are doing commits from here?

[22:05] <dalek> modules.perl6.org: 27ba057 | (Zoffix Znet)++ | web/style.css:

[22:05] <dalek> modules.perl6.org: Adjust styles

[22:05] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/27ba057832

[22:05] <timotimo> and damn, the longest module name squishes the descriptions of all modules quite a bit

[22:05] <ZoffixW> timotimo, just wait for it to refresh

[22:05] <timotimo> R41g0rX: it's just that commits to our github repos are reported here

[22:05] <ZoffixW> szabgab, I'm done

[22:06] <dalek> modules.perl6.org: 5109c1c | (Gabor Szabo)++ | .gitignore:

[22:06] <dalek> modules.perl6.org: gitignore recent.html

[22:06] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/5109c1cdb9

[22:06] <dalek> modules.perl6.org: b14a506 | (Gabor Szabo)++ | web/build-project-list.pl:

[22:06] <dalek> modules.perl6.org: copy the 3 new png files

[22:06] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/b14a5062d9

[22:06] <ZoffixW> timotimo, http://i.imgur.com/agvWCbS.jpg

[22:06] <szabgab> ZoffixW: me too

[22:06] <szabgab> night &

[22:06] <ZoffixW> \o

[22:06] *** szabgab left
[22:07] <R41g0rX> so the channel is configure to do that?

[22:07] <R41g0rX> Nice

[22:07] <R41g0rX> dalek is a bot right?

[22:07] <ZoffixW> Right

[22:07] <ZoffixW> botsnack

[22:07] <synbot6> om nom nom

[22:08] <TimToady> .botsnack

[22:08] <yoleaux> :D

[22:08] <synbot6> om nom nom

[22:08] <R41g0rX> botsnack

[22:08] <synbot6> om nom nom

[22:08] *** FROGGS[mobile]2 left
[22:08] *** FROGGS[mobile] joined
[22:09] <R41g0rX> Does synonyms have a tecnical mean in perl?

[22:10] <ZoffixW> R41g0rX, no

[22:10] <ZoffixW> R41g0rX, http://dictionary.reference.com/browse/synonym

[22:10] <ZoffixW> R41g0rX, it means the words mean pretty much the same thing

[22:11] <ZoffixW> So package, module or library are all mean the same thing. We usually use "module"

[22:11] *** FROGGS[mobile] left
[22:11] <R41g0rX> so Moo is just a synonym no a module right?

[22:11] <FROGGS> R41g0rX: Moo is a Perl 5 module

[22:12] <R41g0rX> built-in?

[22:12] <ZoffixW> R41g0rX, it's one of the ways to do OOP in Perl 5. It's built in Perl 5: https://metacpan.org/pod/Moo

[22:12] <R41g0rX> CPAN is like pip ?

[22:12] <ZoffixW> Yes.

[22:13] *** robins is now known as robinsmidsrod

[22:13] *** n0tjack joined
[22:14] <R41g0rX> right now i have perl 5, if I install perl 6 there will be a backward compatibilty issue?

[22:14] <ZoffixW> R41g0rX, no, they are different language

[22:14] <ZoffixW> +s

[22:15] <FROGGS> R41g0rX: you'll get a perl6 binary additionally

[22:15] <FROGGS> the existing perl binary still is about Perl 5

[22:15] <R41g0rX> so I will have boths?

[22:15] <ZoffixW> R41g0rX, although, you can run Perl 5 code with Perl 6 using Inline::Perl5 and vice versa using Perl 5's Inline::Perl6 (and Perl 6 also has v5 thing )

[22:15] <FROGGS> yes

[22:15] <FROGGS> ZoffixW: v5 is not maintained

[22:16] <ZoffixW> Oh :(

[22:16] <ZoffixW> moritz, never mind about build-*.png. szabgab figured it out: https://github.com/perl6/modules.perl6.org/commit/b14a5062d9a1cc6ad53b9a6a320e15b7b89b686d

[22:16] <FROGGS> because I::P5 gets the job done

[22:18] *** n0tjack left
[22:20] <dalek> problem_solver_tutorial: 7ef0f0e | (Herbert Breunung)++ | / (3 files):

[22:20] <dalek> problem_solver_tutorial: linkfix

[22:20] <dalek> problem_solver_tutorial: review: https://github.com/perl6/problem_solver_tutorial/commit/7ef0f0e14a

[22:21] *** pmurias_ left
[22:23] <timotimo> why are so many... actuallyball travis icons broken?

[22:23] <timotimo> actually all

[22:24] <ZoffixW> timotimo, that's already fixed in the newest commit.

[22:24] <timotimo> ok

[22:25] <timotimo> how do you feel about zebra table rows?

[22:26] <timotimo> also, will we steal the package classifier things from python?

[22:26] *** Ven joined
[22:26] *** RabidGravy left
[22:27] <timotimo> https://pypi.python.org/pypi?%3Aaction=list_classifiers

[22:27] <timotimo> "trove classifiers"

[22:29] <dalek> modules.perl6.org: e8a0fb8 | (Zoffix Znet)++ | web/ (2 files):

[22:29] <dalek> modules.perl6.org: More styling

[22:29] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/e8a0fb8b3b

[22:30] <ZoffixW> timotimo, next refresh will add zebra rows; they do look nicer: http://i.imgur.com/e1XkBF7.jpg

[22:32] <ZoffixW> timotimo, no idea what that classifier stuff does

[22:33] <dalek> modules.perl6.org: e7eb180 | (Zoffix Znet)++ | web/style.css:

[22:33] <dalek> modules.perl6.org: Styles pedantry

[22:33] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/e7eb1806de

[22:34] <timotimo> i think an icon for "add travis" would be all right; perhaps something like a spanner, a screwdriver, and/or a hammer?

[22:35] *** pmurias left
[22:36] *** R41g0rX left
[22:36] <TimToady> lizmat: thing is, OUTER:: with the :: is no longer the OUTER type, but should refer to a particular lexical scope, which ought to have a stable identity

[22:37] <TimToady> (even if it's the sort of pseudostash that is used for further discovery)

[22:37] <timotimo> will we ever have a good way to handle evaling "in the same context" over and over again? for building repls better than we have at the moment?

[22:38] <TimToady> we need to be more incestuous with the parser for that

[22:38] <timotimo> mhm

[22:38] * timotimo was thinking about the whole Jupyther thing again

[22:38] <TimToady> confyrence dynner at the Hyrd Ryck Cyfe &

[22:40] <dalek> modules.perl6.org: 5214196 | (Zoffix Znet)++ | web/ (2 files):

[22:40] <dalek> modules.perl6.org: Add an icon to "Add Travis" button

[22:40] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/5214196fa3

[22:40] <timotimo> neato

[22:43] <timotimo> oh, it's much wider now

[22:44] *** firstdayonthejob left
[22:45] *** Ven left
[22:47] *** cognominal left
[22:47] <dalek> modules.perl6.org: 238312e | (Zoffix Znet)++ | web/ (2 files):

[22:47] <dalek> modules.perl6.org: Do not render project logos outside page on smaller widths

[22:47] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/238312e59e

[22:47] *** spider-mario left
[22:50] *** Hor|zon joined
[22:53] <masak> m: say 5 ** 20

[22:53] <camelia> rakudo-moar 8f4e90: OUTPUT«95367431640625␤»

[22:54] <masak> I believe many people here might enjoy this logic puzzle: http://www.icynic.com/~don/20q4.html

[22:54] *** Hor|zon left
[22:54] <masak> I found it through http://www.cs.ox.ac.uk/seminars/1459.html -- a talk which I really hope gets recorded and put online.

[22:54] <masak> if anyone takes a crack at the logic puzzle, let me know.

[22:57] <dalek> modules.perl6.org: 83daacc | (Zoffix Znet)++ | web/style.css:

[22:57] <dalek> modules.perl6.org: Fix unwanted dates wrap on less-than-smart browsers

[22:57] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/83daacc06c

[23:00] *** ZoffixW left
[23:01] <BenGoldberg_> masak++

[23:01] *** BenGoldberg_ is now known as BenGoldberg

[23:02] *** geekosaur joined
[23:16] <timotimo> ah together with the "add travis" button/icon, the other travis icons are now readable

[23:17] *** ZoffixMobile joined
[23:17] <ZoffixMobile> masak, that puzzle is above my head right from the start... there is no question whose answer is "A" :/

[23:19] <timotimo> in order to get the highest score, you may want to answer some questions wrong intentionally

[23:20] *** jandrew joined
[23:20] *** kjs_ left
[23:20] <timotimo> ZoffixMobile: with the short lines of text in the about, it kinda looks weird now ... i've put a 5em margin around the whole about div on all sides and it looks just a little bit better, but that's surely a bad idea on thinner screens?

[23:20] <timotimo> there's something like min-width: 75%, right?

[23:21] <ZoffixMobile> but there's no info on how the test is scored

[23:21] <timotimo> and build passing/build failing/add travis could be added to the legend at the bottom, too, at some point

[23:21] * timotimo relocates

[23:22] <ZoffixMobile> timotimo, I'll take a look when I get home

[23:22] *** thou joined
[23:26] <BenGoldberg> There's some more info on the puzzle here: http://www.icynic.com/~don/20qintro.html

[23:27] *** thou left
[23:28] * ZoffixMobile doesn't like that puzzle

[23:29] *** jandrew left
[23:29] *** kjs_ joined
[23:32] <BenGoldberg> According to the intro, it *can* be solved by a human.  Not easily, but it's doable.

[23:33] <masak> ZoffixMobile: by my reading, you can score the test on your own by simply checking your answers.

[23:33] *** kjs_ left
[23:33] <ZoffixMobile> :/

[23:33] <BenGoldberg> You can answer A to question 1.

[23:33] <ZoffixMobile> but that's not the right answer

[23:33] <BenGoldberg> Why not?

[23:34] <masak> it might be.

[23:35] <ZoffixMobile> Oh, ok, I misread it.

[23:35] <masak> also, I enjoyed https://github.com/cosmologicon/pywat

[23:35] * ZoffixMobile tries again

[23:35] <masak> the "converse implication" wat actually makes total sense to me, thanks to Category Theory

[23:36] * ZoffixMobile gives up again

[23:36] <masak> though, I now realize, through a very circuitous route.

[23:37] <masak> basically equating all three of (numeric exponentiation, logical implication, lambdas/functions)

[23:37] *** vendethiel left
[23:43] *** n0tjack joined
[23:43] <masak> the "converse" bit comes from the fact that it's X ** Y (numbers), but Y => X (logic) and Y -> X (programming)

[23:44] <masak> purely by historical notational accident, it seems

[23:44] <masak> 'night, #perl6

[23:47] <ZoffixMobile> night masak

[23:48] *** n0tjack left
[23:51] *** Hor|zon joined
[23:52] *** Eddward joined
[23:53] *** n0tjack joined
[23:55] *** Hor|zon left
[23:59] *** ZoffixMobile left
