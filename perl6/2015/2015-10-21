[00:10] *** nick25 joined
[00:15] *** nick25 left
[00:25] *** tokuhiro_ joined
[00:25] *** bjz joined
[00:29] *** llfourn joined
[00:29] *** tokuhiro_ left
[00:33] *** llfourn left
[00:36] *** jnm_theMailman_ joined
[00:40] *** jnm_theMailman_ left
[00:46] *** zakharyas joined
[00:47] *** CurtisOvidPoe_ joined
[00:48] *** CurtisOvidPoe left
[00:48] *** CurtisOvidPoe_ is now known as CurtisOvidPoe

[00:49] *** leont left
[00:53] *** tokuhirom_ left
[00:57] *** tokuhirom_ joined
[00:58] *** bjz left
[01:01] *** tokuhirom_ left
[01:02] *** bjz joined
[01:04] *** jnm_theMailman joined
[01:07] *** jnm_theMailman left
[01:12] *** kid51 joined
[01:13] *** [Sno] left
[01:26] *** tokuhiro_ joined
[01:29] *** kalkin-__ joined
[01:30] *** sufrostico left
[01:31] *** tokuhiro_ left
[01:33] *** kalkin-_ left
[01:33] *** et09 left
[01:36] <awwaiid> I did something like $data = from-json(slurp('data.json')); $grepped_data = $data.grep(*<foo> == 7); now I try $data.elems and get "This Seq has already been iterated, and its values consumed", though I can see into the data. What gives?

[01:37] *** cognominal left
[01:37] <awwaiid> $grepped_data.round gives me the count, as does +$grepped_data (forcing number context)

[01:38] <awwaiid> ah, 'say $grepped_data.WHAT' tells me it is a Seq. interesting.

[01:40] <awwaiid> hmm. putting this into @grepped_data instead of $grepped_data is doing interesting things...

[01:41] <awwaiid> right. I think I read about greps doing more Seq like stuff. alright, your silence has taught me a valuable lesson.

[01:44] *** jnm_theMailman joined
[01:47] <BenGoldberg> Try, $data = from-json(slurp('data.json')).cache;

[01:48] *** Herby_ joined
[01:48] <Herby_> Hello!

[01:49] <BenGoldberg> Hi.

[01:50] *** aborazmeh joined
[01:50] *** aborazmeh left
[01:50] *** aborazmeh joined
[01:52] *** jnm_theMailman left
[01:53] *** adhoc left
[01:53] *** jnm_theMailman joined
[01:53] <Herby_> I'm relatively new to programming, and completely new to Perl 6

[01:53] <Herby_> I've on Windows 7. I installed Rakudo.  I created a simple .p6 file

[01:54] <Herby_> how do I execute it from the cmd prompt?

[01:54] *** adhoc joined
[01:55] *** tokuhiro_ joined
[01:55] <Herby_> nm, just figured it out :)

[01:58] *** tokuhirom_ joined
[01:58] <Herby_> just created my first perl6 program.  The journey has started!

[01:59] *** lucs left
[01:59] <[Coke]> woot!

[02:00] *** frew left
[02:00] <gfldex> Herby_: please tell us when you killed the dragon.

[02:01] <Herby_> if the dragon's weak spot is someone telling him "Hello, Perl 6 World!"... then consider him dead.

[02:02] <Herby_> is see a variety of tutorials on perl6.org but is there a recommended "go to" tutorial for starting from scratch?

[02:02] <Herby_> or should I sample all of them

[02:03] *** jnm_theMailman left
[02:03] *** kid51 left
[02:05] *** tokuhirom_ left
[02:05] <[Coke]> Herby_: not really; I've heard good things about the xiny, though.

[02:05] *** et09 joined
[02:06] <Herby_> xiny?

[02:06] <gfldex> http://learnxinyminutes.com/docs/perl6/

[02:06] <Herby_> ahh

[02:06] <Herby_> i'm a dummy

[02:07] <gfldex> Herby_: rosettacode might be useful too: http://rosettacode.org/wiki/Category:Perl_6

[02:09] <Herby_> great, thanks

[02:09] *** petercommand left
[02:11] *** petercommand joined
[02:11] *** dayangkun joined
[02:11] *** noganex joined
[02:14] *** noganex_ left
[02:19] <dj_goku> if we find editor specific (vim) in *.pod files perl6/doc it is ok to remove it right?

[02:20] *** xpen joined
[02:21] <dj_goku> example: # vim: expandtab shiftwidth=4 ft=perl6

[02:22] *** araujo_ left
[02:23] *** araujo_ joined
[02:31] *** llfourn joined
[02:36] *** llfourn left
[02:37] *** Herby_ left
[02:38] *** BenGoldberg left
[02:39] *** BenGoldberg joined
[02:41] *** BenGoldberg left
[02:41] *** BenGoldberg joined
[02:42] *** BenGoldberg left
[02:43] *** BenGoldberg joined
[02:43] *** BenGoldberg left
[02:44] *** BenGoldberg joined
[02:51] *** zakharyas left
[02:57] *** eliasr left
[02:59] *** lucs joined
[03:01] *** tokuhirom_ joined
[03:02] *** BenGoldberg left
[03:02] *** kaare_ joined
[03:02] *** BenGoldberg joined
[03:03] *** BenGoldberg left
[03:03] * dj_goku wrote a p6 script to open each file found with vim settings, search and replace with Str.subst() and write the contents back out!

[03:04] *** BenGoldberg joined
[03:05] *** tokuhirom_ left
[03:07] *** BenGoldberg left
[03:07] *** BenGoldberg joined
[03:08] *** BenGoldberg left
[03:08] *** BenGoldberg joined
[03:11] *** yeahnoob joined
[03:20] <et09> what's the verdict on perl 6 

[03:20] <et09> one sentence or less ;)

[03:25] *** skids left
[03:27] <dj_goku> et09: Really it is up to you, to make the decision. I just wrote a 4 line script, used all new shiny p6 bits. It didn't seem too different from Perl5

[03:28] *** llfourn joined
[03:32] <et09> let me see your script

[03:34] <uberbaud> exit

[03:34] *** uberbaud left
[03:35] *** uberbaud joined
[03:38] <dj_goku> et09: https://gist.github.com/djgoku/46166d26f3dbbdc454d0

[03:39] <et09> vimrc?

[03:42] <dj_goku> et09: I don't use vim, but for some reason that was added to some perl6/doc files.

[03:42] <dj_goku> so I cleaned it up and submitted this MR: https://github.com/perl6/doc/pull/172

[03:42] <et09> dj_goku: it controls tab formatting in vim

[03:43] <et09> may not be the worst idea really

[03:43] <et09> of course i dunno what it's doing in the middle of the file 

[03:43] <dj_goku> et09: right, but it shouldn't be in the files. IMO

[03:43] * et09 scratches head

[03:46] *** AlexDaniel left
[03:47] <dj_goku> use a vimrc file local to your environment instead of adding it to files directly in perl6/doc.

[03:48] <et09> i'm not even aware of vim being able to interpret something like that

[03:48] <et09> but (assuming that's what it is?) the benefit would be that people wouldn't be using different conventions for tabs in your files, which makes such a mess

[03:48] <et09> strange

[03:50] <dj_goku> et09: http://vim.wikia.com/wiki/Modeline_magic

[03:51] <et09> i have 'find' scripts to delete __MACOSX, Thumbs.db, .DS_Store, etc. ;)

[03:52] <et09> but this one, hmm

[03:53] <dj_goku> for the most part the files I removed the modeline magic stuff was from *.pod files

[04:02] *** araujo_ left
[04:02] *** araujo joined
[04:02] *** araujo left
[04:02] *** araujo joined
[04:03] *** et09 left
[04:11] *** bjz_ joined
[04:12] *** bjz left
[04:12] *** AndyDee left
[04:30] *** labster_ joined
[04:31] *** labster left
[04:31] *** labster_ is now known as labster

[04:40] <moritz> don't

[04:40] <moritz> the modelines are there for a reason

[04:48] *** BenGoldberg left
[04:50] *** _28_ria left
[04:50] *** _28_ria joined
[04:54] *** flaviusb joined
[04:56] *** khw left
[05:00] *** uberbaud left
[05:05] *** bjz_ left
[05:05] *** bjz joined
[05:11] *** Util joined
[05:17] *** tokuhirom_ joined
[05:21] *** tokuhirom_ left
[05:21] *** mayuresh joined
[05:21] <mayuresh> hello :)

[05:23] *** aborazmeh left
[05:24] <mayuresh> just an off-topic question; is there any way to earn a livelihood by working "on" perl6?

[05:24] <mayuresh> instead of simply using perl6?

[05:24] <mayuresh> as a programmer!

[05:32] <llfourn> mayuresh: there's a Perl 6 core development fund http://www.perlfoundation.org/perl_6_core_development_fund :)

[05:33] <llfourn> mayuresh: but I think you can count the number of people getting paid on one finger!

[05:33] <mayuresh> :D

[05:33] <llfourn> and it's probably not enough :\

[05:33] <mayuresh> hmnn

[05:34] <mayuresh> i am caught in a dilemma, on one hand, i have great interest in working on the 'pxn', but, since it won't fetch me my daily bread, i am leaning towards working on my other idea, a 'ai' network analysis tool.

[05:35] <llfourn> pxn?

[05:35] <mayuresh> pxn == Perl6 eXecution eNvironment

[05:36] <mayuresh> it's going to be an "interpreter" for p6 instead of a compiler + vm combo

[05:38] <llfourn> mayuresh: sounds fun does that exist at all?

[05:38] <mayuresh> llfourn, no, it does not exist yet, not even a concrete design.

[05:39] <mayuresh> just a whole lot of diagrams in my design book.

[05:39] *** softmoth left
[05:40] <llfourn> sounds like many years of fun then

[05:40] <mayuresh> llfourn, just that working on 'pxn' will help me grow as a programmer

[05:40] <mayuresh> just can't figure out how to capitalize on the knowledge i'll gain

[05:40] <bartolin> r: say all("a", "b") ~~ /a/ # RT #120992

[05:40] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=120992

[05:40] <mayuresh> :\

[05:40] <camelia> rakudo-{moar,jvm} 5d83db: OUTPUT«all(｢a｣, Nil)␤»

[05:40] <bartolin> \o/ # FROGGS++

[05:42] <dalek> roast: 50c2c6c | usev6++ | S03-junctions/misc.t:

[05:42] <dalek> roast: Add test for RT #120992

[05:42] <dalek> roast: review: https://github.com/perl6/roast/commit/50c2c6c8d9

[05:42] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=120992

[05:42] <mayuresh> alrighty, that does it, i am going to work on 'pxn', it will help me acquire technological maturity

[05:42] <mayuresh> what i do after that is something i will leave to the will of god

[05:44] *** _28_ria left
[05:44] *** _28_ria joined
[05:44] <llfourn> mayuresh: have you worked on a language interpreter at all?

[05:44] <mayuresh> i am currently self-training for the same

[05:45] <mayuresh> my instructor has given me the liberty to choose any language for my final project

[05:45] <mayuresh> the rite of passage as they call it. :)

[05:45] <mayuresh> the instructor is a nice gentleman from germany

[05:45] <mayuresh> who imparts me tech wisdom remotely :)

[05:45] <mayuresh> his name is mr. nils m holm

[05:47] <mayuresh> all through my 23 years in software, all i did was database oriented stuff.

[05:47] <mayuresh> while i like 'rdbms' oriented stuff, i hated the other languages required to do something useful with 'rdbms'.

[05:48] <mayuresh> around 9 months back i realized that is have accumulated enough funds to support self-training for actual computer science stuff

[05:48] <mayuresh> and that i can survive 36 months without earning a dime.

[05:49] <mayuresh> and then i started off pursuing the regimen outlined by mr. holm.

[05:49] <mayuresh> he writes excellent books on computer science.

[05:49] <mayuresh> you could check out www.t3x.org

[05:52] <llfourn> mayuresh: good luck with your endeavor :)

[05:52] <mayuresh> yeah, thanks. :)

[05:52] <mayuresh> it's very mind-expanding.

[05:53] * llfourn thinks for him starting to write a Perl 6 interpreter from scratch would be more mind-exploding

[05:54] <mayuresh> don't worry about it, i have worked on crazy stuff like industrial robotics.

[05:54] <mayuresh> they are a lot more painful than perl6. ;)

[05:55] *** chenryn joined
[05:55] <mayuresh> alrighty, i gotta go now, my ubuntu is requesting an update process.

[05:55] <mayuresh> :)

[05:56] <mayuresh> bye, and thanks for the links llfourn. :)

[05:56] *** mayuresh left
[05:58] *** firstdayonthejob joined
[06:11] *** diana_olhovik_ joined
[06:17] *** tokuhirom_ joined
[06:21] *** llfourn left
[06:22] *** gonz_ left
[06:22] *** tokuhirom_ left
[06:33] *** n0xff left
[06:34] *** FROGGS joined
[06:44] *** firstdayonthejob left
[06:56] *** Ven joined
[07:00] *** zaucker joined
[07:02] *** zaucker left
[07:02] *** domm left
[07:03] *** lea left
[07:04] *** domm joined
[07:05] *** zaucker_ joined
[07:19] *** lea joined
[07:20] *** abaugher left
[07:22] *** abaugher joined
[07:27] *** lea left
[07:28] *** ely-se joined
[07:33] *** Alina-malina left
[07:38] *** lea joined
[07:42] *** Ven left
[07:48] *** diegok left
[07:48] *** integral joined
[07:48] *** integral left
[07:48] *** integral joined
[07:53] *** Ven joined
[07:57] *** g4 joined
[07:57] *** Ven left
[08:03] *** uberbaud joined
[08:08] *** lea left
[08:09] *** telex left
[08:10] *** telex joined
[08:11] *** kjs_ joined
[08:12] *** kjs_ left
[08:14] *** dakkar joined
[08:18] *** darutoko joined
[08:20] *** llfourn joined
[08:24] *** llfourn left
[08:27] *** Ven joined
[08:28] *** diegok joined
[08:30] *** eliasr joined
[08:31] *** lea joined
[08:34] *** azawawi joined
[08:36] *** duncan_dmg joined
[08:51] *** llfourn joined
[08:54] *** Some-body_ joined
[08:55] *** DarthGandalf left
[08:55] *** Some-body_ is now known as DarthGandalf

[08:56] *** lea left
[08:59] *** uday joined
[09:00] *** RabidGravy joined
[09:00] *** espadrine_ joined
[09:02] *** FROGGS left
[09:03] *** uday left
[09:03] *** ugexe left
[09:07] *** edehont joined
[09:11] <azawawi> hi #perl6

[09:13] <Ven> o/!

[09:14] <mrf> \o/

[09:15] *** bjz_ joined
[09:15] *** bjz left
[09:16] *** rindolf joined
[09:17] *** ollej_ is now known as ollej

[09:17] *** Ven left
[09:18] <azawawi> Just finished https://github.com/azawawi/scripts/blob/master/benchmark.p6 to test User::Agent slowness :)

[09:21] *** AlexDaniel joined
[09:21] *** kjs_ joined
[09:21] *** edehont left
[09:23] *** ely-se left
[09:24] <azawawi> https://gist.github.com/azawawi/fa1e8a4b67482d19811c  # User:Agent compile load results

[09:24] *** Ven joined
[09:25] *** ely-se joined
[09:25] <RabidGravy> azawawi, I think right at this moment in time I might be making it *worse*

[09:26] <azawawi> RabidGravy: make what worse?

[09:26] <azawawi> RabidGravy: and hi :)

[09:26] <RabidGravy> the load time of HTTP::UserAgent

[09:28] <azawawi> actually i seem to have caught the problem source

[09:28] <azawawi> URI :)

[09:29] <azawawi> URI is using URI::Escape inside it

[09:29] <RabidGravy> tricky

[09:29] *** lea joined
[09:37] *** Alina-malina joined
[09:38] *** lea left
[09:38] *** yeahnoob left
[09:48] *** tokuhirom_ joined
[09:51] <azawawi> RabidGravy: ping

[09:51] <RabidGravy> pong

[09:51] <azawawi> RabidGravy: i remember also that deprecation notice can slow down a module also

[09:51] <azawawi> RabidGravy: im 'need'-ing instead of 'use'-ing stuff and so far it is becoming faster :)

[09:53] *** tokuhirom_ left
[09:59] *** DrForr left
[10:01] *** FROGGS joined
[10:03] *** brrt joined
[10:03] <brrt> good * #perl6

[10:06] <Ven> o/

[10:07] *** lea joined
[10:07] <llfourn> m: .say for Date.new('2015-10-15') .. Date.today # This actually works <3 p6

[10:07] <camelia> rakudo-moar 5d83db: OUTPUT«2015-10-15␤2015-10-16␤2015-10-17␤2015-10-18␤2015-10-19␤2015-10-20␤2015-10-21␤»

[10:11] <brrt> llfourn: that is.. quite nice, i can't actually get that to work easily in python

[10:11] <brrt> sort of a litmus test on feature coolness :-)

[10:11] <ollej> I'm having an issue when using the URI module inside a Promise. Unless I've used the URI module before awaiting the result, the program never finishes. Using rakudo 2015.09.

[10:12] <ollej> I've boiled it down to the following example: await Promise.in(1).then({ say URI.new('http://www.example.com'); });

[10:12] <llfourn> brrt: hehe well at least it has an inbuilt date obj

[10:12] <ollej> Does anyone have any idea what I'm doing wrong?

[10:12] <brrt> not sure you're doing anything wrong there

[10:12] <brrt> it doesn't look wrong tome

[10:12] *** andreoss joined
[10:12] <llfourn> ollej: that sounds a hell of a lot like the problem ovid was having

[10:13] * llfourn looks for RT

[10:13] *** Ven left
[10:14] <llfourn> ollej: https://rt.perl.org/Public/Bug/Display.html?id=126390

[10:14] <llfourn> "The last example just hangs. As far as I can tell, I have to make at least one get($url) call outside of the promise for it to work.

[10:14] <brrt> what's the source of the URI module?

[10:15] *** Ven joined
[10:15] <ollej> Yeah, sounds very similar.

[10:16] <ollej> https://github.com/perl6-community-modules/uri

[10:16] * llfourn bets LWP::Simple uses this URI as well

[10:16] <ollej> Sounds very plausible. 

[10:17] <llfourn> ollej: https://github.com/cosimo/perl6-lwp-simple/blob/378a558ee9c7149fe118c15e4883cb942a632b7a/lib/LWP/Simple.pm

[10:17] <llfourn> would be cool if we could get to the bottom of this

[10:18] <RabidGravy> that would explain why I couldn't replicate the problem CurtisOvidPoe rt'd with plain IO::Socket::INET code

[10:18] <ollej> I'm using a Mac btw, installed Rakudo via homebrew. But I think I get the same when running in a Ubuntu VM.

[10:18] <RabidGravy> it shouldn't matter

[10:19] <llfourn> ollej: according to ticket it happens in linux distros as well

[10:19] <brrt> mysterious stuff

[10:19] <brrt> URI.new doesn't seem to do anything but parsing

[10:20] *** edehont joined
[10:20] <RabidGravy> yep, confirmed

[10:20] <ollej> Yeah, I can't see why it would cause an issue with the Promise.

[10:22] <RabidGravy> no, neither can I 

[10:22] <RabidGravy> but it definitely does

[10:23] <llfourn> same for me :|

[10:23] *** Akagi201_ left
[10:24] <azawawi> question, do we need to put a " use lib 'lib'; " in a p6 test always or not?

[10:25] <RabidGravy> azawawi, probably not, it's partly superstitious as e.g. panda test will run the tests with -Ilib anyway

[10:25] *** kid51 joined
[10:26] <azawawi> what about `prove -Ilib -e perl6` ?

[10:26] <RabidGravy> it's only useful if you're given to running the tests individually without providing the -Ilib yourself

[10:26] <llfourn> even URI.new with no args hangs

[10:26] *** andreoss left
[10:27] *** Ven left
[10:27] *** virtualsue joined
[10:27] <RabidGravy> I'll update the ticket, lest someone goes off looking in the wrong place

[10:28] <brrt> llfourn

[10:28] <brrt> it may be a lazy deserialization issue

[10:28] <llfourn> brrt: with the grammar? yes that's what I was thinking

[10:29] <llfourn> RabidGravy++ thanks

[10:30] <brrt> no, just with the URI module

[10:30] <llfourn> brrt: I mean with the new here: https://github.com/perl6-community-modules/uri/blob/master/lib/IETF/RFC_Grammar.pm

[10:30] <llfourn> from BUILD in URI

[10:31] <brrt> oh, that's actually quite plausible

[10:32] <RabidGravy> yep, it definitely is the same problem - hangs at "futex(0x711f5c4, FUTEX_WAIT_PRIVATE, 1, NULL ....)" just as the original example

[10:32] *** virtualsue left
[10:33] <brrt> so, it's a deadlock

[10:33] *** chenryn left
[10:33] <brrt> possibly because of EVAL

[10:33] <llfourn> RabidGravy: what magic did you use to determine that?

[10:34] <RabidGravy> strace

[10:34] <RabidGravy> strace perl6 <script>

[10:34] * llfourn vague memories of strace return

[10:34] <llfourn> thanks

[10:35] *** jgoff joined
[10:35] *** AlexDaniel left
[10:35] *** jgoff is now known as DrForr

[10:37] <RabidGravy> I'm glad it's in URI and not in IO::Socket::INET as in someways it makes it easier to fix

[10:38] *** Akagi201 joined
[10:39] * llfourn tries to determine what is happening with perl6-debug but to no avail

[10:41] *** Zoffix joined
[10:41] <RabidGravy> I'm going to stick an issue on URI too just for completeness

[10:43] <ollej> Sounds good. 

[10:44] <ollej> In some way I'm glad it's not an issue with my code. Lots of hair was pulled out trying to figure out the issue. =)

[10:45] *** azawawi left
[10:45] *** ShimmerFairy left
[10:45] <RabidGravy> ollej, glad you found it - the problem is afflicting quite a few http client libraries ;-)

[10:46] <llfourn> yes it was a very good issue to stumble on becasuse it precisely demonstrates the problem

[10:47] <ollej> RabidGravy: Glad to help.

[10:48] *** spider-mario joined
[10:50] <RabidGravy> Added https://github.com/perl6-community-modules/uri/issues/21 if anyone wants to have a fiddle ;-)

[10:50] *** n0xff joined
[10:52] <brrt> m: Promise.in(1).then({ say "OH HAI"; });

[10:52] <camelia> rakudo-moar 5d83db: ( no output )

[10:52] <llfourn> m: await Promise.in(1).then({ say "OH HAI"; });

[10:52] <camelia> rakudo-moar 5d83db: OUTPUT«OH HAI␤»

[10:54] <RabidGravy> So, CurtisOvidPoe you could fix your original code by the simple expedient of getting a URI object outside the start { } and passing it to HTTP::UserAgent.get() ;)

[10:55] <itz_stmuk> https://github.com/rakudo/rakudo/pull/557

[10:55] <itz_stmuk> *cough*

[10:55] <CurtisOvidPoe> Yeah, that’s not fragile :)

[10:56] *** skids joined
[10:56] <RabidGravy> sucks, but at least we know where the fault is

[10:56] <CurtisOvidPoe> itz_stmuk: that looks great. I was wondering if there are tests for that in a different commit? We’ve had issues in that area before.

[10:57] *** eliasr left
[10:57] <itz_stmuk> CurtisOvidPoe: I was going to add a test based on your "420" (dude!) example

[10:57] <CurtisOvidPoe> Heh.

[10:58] *** ShimmerFairy joined
[11:04] <brrt> it's not just the EVAL, though

[11:05] <brrt> maybe the require

[11:05] <brrt> m: await Promise.in(1).then({ EVAL("say <hi>") });

[11:05] <camelia> rakudo-moar 5d83db: OUTPUT«hi␤»

[11:06] *** BLOKDAK left
[11:07] *** TEttinger left
[11:12] *** edehont left
[11:14] <llfourn> brrt: i'd say it's the require because if you make a single URI.new outside the promise the URI.new inside will be fine.

[11:15] *** AlexDaniel joined
[11:15] <ilmari> m: awayt Promise.in(1).then({ require URI })

[11:15] <camelia> rakudo-moar 5d83db: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tFcBjPkcUX␤Undeclared routine:␤    awayt used at line 1. Did you mean 'await'?␤␤»

[11:15] <ilmari> m: await Promise.in(1).then({ require URI })

[11:15] <camelia> rakudo-moar 5d83db: OUTPUT«Could not find URI in any of:␤  file#/home/camelia/.perl6/2015.09-431-g5d83db3/lib␤  inst#/home/camelia/.perl6/2015.09-431-g5d83db3␤  file#/home/camelia/rakudo-inst-1/share/perl6/lib␤  file#/home/camelia/rakudo-inst-1/share/perl6/vendor/lib␤  fil…»

[11:15] <ilmari> m: await Promise.in(1).then({ require Promise })

[11:15] <camelia> rakudo-moar 5d83db: OUTPUT«Could not find Promise in any of:␤  file#/home/camelia/.perl6/2015.09-431-g5d83db3/lib␤  inst#/home/camelia/.perl6/2015.09-431-g5d83db3␤  file#/home/camelia/rakudo-inst-1/share/perl6/lib␤  file#/home/camelia/rakudo-inst-1/share/perl6/vendor/lib␤ …»

[11:18] <llfourn> I can't get a require loading a valid or invalid file to work

[11:18] <llfourn> by work I mean hang (not work)

[11:20] *** ely-se left
[11:22] *** Ven joined
[11:25] <RabidGravy> I was going to the shared access to the hashes to be honest

[11:26] <brrt> very hypothesis

[11:26] <brrt> such debugging

[11:27] <RabidGravy> :) I just had a shower, I have all my stupid ideas in the shower

[11:27] *** kjs_ left
[11:29] <itz_stmuk> RabidGravy: you mean you went outside?

[11:29] <RabidGravy> nah, that's crazy talk

[11:30] <RabidGravy> (I will have to sooner or later I'm running out of non-finale rack beer)

[11:33] *** chenryn joined
[11:34] *** llfourn left
[11:34] <itz_stmuk> I only have .be beers in the fridge :(

[11:34] *** tokuhirom_ joined
[11:37] *** chenryn left
[11:39] *** tokuhirom_ left
[11:41] *** chenryn joined
[11:43] <RabidGravy> itz_stmuk, yeah I have a large bottle of Leffe, three different types of deadly Imperial Stout, a rather toxic Brewdog IPA and a "chocolate lager"

[11:45] *** Alina-malina left
[11:45] <brrt> by the way, perl5 question: is Test::More removed from perl 5.22.0

[11:46] <RabidGravy> I don't think so

[11:46] <brrt> my fedora doesn't have it, and my perlbrew version also doesn't seem to have it

[11:46] <brrt> so it's a fedora issue then

[11:46] *** llfourn joined
[11:47] <itz_stmuk> In this example, the result of the comparison (which is a

[11:47] <itz_stmuk> L<Junction|/type/Junction>), is

[11:47] <itz_stmuk> converted to Bool before being printed.

[11:47] <itz_stmuk> oops

[11:47] <itz_stmuk> I intended to C&P "perldoc corelist"

[11:48] <itz_stmuk> not sure if the vendors patch it anyway

[11:48] *** azawawi joined
[11:49] <itz_stmuk> ~//perl5/perlbrew/perls/perl-5.22.0/lib/5.22.0/Test/More.pm

[11:50] <azawawi> m: require MIME::Base64

[11:50] <camelia> rakudo-moar 5d83db: OUTPUT«Could not find MIME::Base64 in any of:␤  file#/home/camelia/.perl6/2015.09-431-g5d83db3/lib␤  inst#/home/camelia/.perl6/2015.09-431-g5d83db3␤  file#/home/camelia/rakudo-inst-1/share/perl6/lib␤  file#/home/camelia/rakudo-inst-1/share/perl6/vendor/li…»

[11:53] *** kid51 left
[11:54] *** Alina-malina joined
[11:57] *** [BNC]WizJin joined
[11:59] *** kjs_ joined
[11:59] *** ely-se joined
[12:00] <itz_stmuk> RabidGravy: you are running low :)

[12:01] *** dayangkun left
[12:02] *** [BNC]WizJin left
[12:03] *** tokuhiro_ left
[12:03] <RabidGravy> :)

[12:03] <RabidGravy> I think I have disproved my shared hash hypothesis

[12:05] *** WizJin joined
[12:09] <llfourn> perl6 -MIETF::RFC_Grammar::URI -e "await Promise.in(1).then({ require IETF::RFC_Grammar::URI });" will hang

[12:09] *** pmurias_ joined
[12:09] *** pmurias_ left
[12:10] *** pmurias joined
[12:10] <pmurias> konobi: ping

[12:16] *** grondilu left
[12:20] *** azawawi left
[12:20] <lizmat> .botsnack

[12:20] <yoleaux> :D

[12:20] <synbot6> om nom nom

[12:27] *** cognominal joined
[12:27] <itz_stmuk> building doc takes ages ... I wonder if thats the pygment python steo

[12:27] <itz_stmuk> ^ step

[12:29] *** xpen left
[12:30] *** xpen joined
[12:31] *** xpen left
[12:31] *** Ven left
[12:33] *** chenryn left
[12:33] *** Ven joined
[12:35] *** tokuhirom_ joined
[12:36] <RabidGravy> riight, actually going out into the real world now

[12:36] <|Tux|> was/is Jeffrey Thalhammer on IRC here?

[12:36] <moritz> itz_stmuk: it's much faster if Inline::Python is installed

[12:37] <Zoffix> RabidGravy, don't fall into the sky!!

[12:39] <itz_stmuk> moritz: ah thanks! maybe I'll compare that with a Text::VimColour branch :)

[12:39] *** tokuhirom_ left
[12:40] *** RabidGravy left
[12:44] *** Ven left
[12:45] <dalek> rakudo/nom: 5e8e234 | lizmat++ | src/core/Supply.pm:

[12:45] <dalek> rakudo/nom: Make sure increase in limit starts processes

[12:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5e8e2347e5

[12:50] <Woodi> hallo today :)

[12:51] *** grondilu joined
[12:51] <lizmat> Woodi o/

[12:52] <colomon> \o

[12:52] <lizmat> colomon o/

[12:52] <Woodi> found somehow:  http://www.norvig.com/design-patterns/design-patterns.pdf  it's about (better ;) ) patterns in lisp. also some other topics like: loops are bad, internal/lazy iterators, and more

[12:58] *** sufrostico joined
[13:01] *** tokuhirom_ joined
[13:02] <lizmat> m: my $l = gather { take-rw my $ = 1 }; $l[0] = 42   # this should work

[13:02] <camelia> rakudo-moar 5d83db: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/I6VRhseFAr:1␤␤»

[13:03] <lizmat> m: my $l = gather { take-rw my $ = 1 }; for @$l { $_ = 42 }; say $l[0]   # this does

[13:03] <camelia> rakudo-moar 5d83db: OUTPUT«42␤»

[13:03] *** tokuhiro_ joined
[13:03] <dalek> doc: d06a5f4 | (Steve Mynott)++ | bin/p6doc:

[13:03] <dalek> doc: fix typo

[13:03] <dalek> doc: review: https://github.com/perl6/doc/commit/d06a5f40f0

[13:03] <lizmat> the former is using the "push-exactly" form of the iterator

[13:03] <lizmat> the latter is using the "pull-one" form of the iterator

[13:04] <lizmat> I think this is a basic problem of the current Iterator interface  :-(

[13:05] *** azawawi joined
[13:05] <azawawi> question, what's wrong with this code?    require MIME::Base64; say MIME::Base64.new.encode_base64('');

[13:05] <lizmat> azawawi: why require?  why not use ?

[13:06] <azawawi> lizmat: i need it to be loaded at runtime

[13:06] <lizmat> star-m: require MIME::Base64

[13:06] <camelia> star-m 2015.09: ( no output )

[13:06] <azawawi> lizmat: to lighten compile time for a module that is... like in Perl 5

[13:06] <azawawi> star-m: use MIME::Base64; say MIME::Base64.new.encode_base64('');

[13:06] <camelia> star-m 2015.09: OUTPUT«␤»

[13:06] <lizmat> star-m: require MIME::Base64; import MIME::Base64; say MIME::Base64.new.encode_base64('');

[13:06] <camelia> star-m 2015.09: OUTPUT«5===SORRY!5=== Error while compiling /tmp/G15IW2firz␤Could not find module MIME::Base64 to import symbols from␤at /tmp/G15IW2firz:1␤------> 3equire MIME::Base64; import MIME::Base647⏏5; say MIME::Base64.new.encode_base64('')␤»

[13:06] <azawawi> star-m: require MIME::Base64; say MIME::Base64.new.encode_base64('');

[13:06] <camelia> star-m 2015.09: OUTPUT«Could not find symbol '&Base64'␤  in block <unit> at /tmp/nuBBG8jNwz:1␤␤Actually thrown at:␤  in block <unit> at /tmp/nuBBG8jNwz:1␤␤»

[13:07] <hahainternet> quick q: is the delete adverb mentioned anywhere obvious on the docs site? i couldn't find it to link to someone, maybe i'm an idiot

[13:07] *** et09 joined
[13:07] *** tokuhiro_ left
[13:07] <lizmat> star-m: class MIME::Base64 { ... }; require MIME::Base64; say MIME::Base64.new.encode_base64('');

[13:07] <camelia> star-m 2015.09: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uHhgX2odHZ␤The following packages were stubbed but not defined:␤    MIME::Base64␤at /tmp/uHhgX2odHZ:1␤------> 3 say MIME::Base64.new.encode_base64('');7⏏5<EOL>␤»

[13:08] <itz_stmuk> hahainternet: to be frank I find "git grep" in a doc checkout better than the web search

[13:08] <azawawi> lizmat: bug or by design?

[13:08] <lizmat> I would say it's a bug

[13:08] <azawawi> :)

[13:08] <azawawi> so i finally caught one :)

[13:08] <hahainternet> itz_stmuk: yeah probably a better plan, but it's not a big issue, just was of minor interest :)

[13:09] *** ely-se left
[13:10] <azawawi> lizmat: please note that first namespace is working (i.e. MIME) but the problem is in the n > 1 namespace part

[13:10] <lizmat> yeah, that's exactly the problem...  I think  :-)

[13:10] <lizmat> star-m: dd MIME

[13:10] <camelia> star-m 2015.09: OUTPUT«5===SORRY!5=== Error while compiling /tmp/eJRKlBOLuI␤Undeclared name:␤    MIME used at line 1␤␤»

[13:11] <brrt> gotta catch 'm all

[13:11] <azawawi> lizmat: im working on optimizing module load time for HTTP::UserAgent (~ 5.95 secs)

[13:12] <lizmat> azawawi: well, that optimization would be short lived, once we have precomp working properly again

[13:13] <azawawi> lizmat: sometimes we need that MIME::Base64 module in a weird case (e.g. for POST) that does not happen and that module should be lazily used (at runtime via require)

[13:13] <azawawi> lizmat: i see

[13:13] *** aborazmeh joined
[13:13] *** aborazmeh left
[13:13] *** aborazmeh joined
[13:17] *** O47m341 joined
[13:18] *** O47m341 left
[13:19] *** zakharyas joined
[13:21] <dalek> doc: 11172ad | (Steve Mynott)++ | README.md:

[13:21] <dalek> doc: explain make html and run

[13:21] <dalek> doc: review: https://github.com/perl6/doc/commit/11172adfee

[13:23] <azawawi> lizmat: does an API deprecation notice slow down module load in general?

[13:24] <timotimo> azawawi: in the mean time, maybe installing with Zef instead of panda can help

[13:25] *** andreoss joined
[13:25] <lizmat> only when it actually fires

[13:25] <lizmat> afak

[13:25] *** kjs_ left
[13:25] *** O47m341 joined
[13:26] *** kjs_ joined
[13:26] <lizmat> *afaik  :-)

[13:28] <azawawi> timotimo: what's Zef?

[13:29] <FROGGS> azawawi: an alternative module installer

[13:29] <azawawi> please link it

[13:31] <FROGGS> m: require ::('MIME::Base64'); say ::('MIME::Base64').new.encode_base64('');

[13:31] <camelia> rakudo-moar 5e8e23: OUTPUT«Could not find MIME::Base64 in any of:␤  file#/home/camelia/.perl6/2015.09-432-g5e8e234/lib␤  inst#/home/camelia/.perl6/2015.09-432-g5e8e234␤  file#/home/camelia/rakudo-inst-2/share/perl6/lib␤  file#/home/camelia/rakudo-inst-2/share/perl6/vendor/li…»

[13:31] <FROGGS> star-m: require ::('MIME::Base64'); say ::('MIME::Base64').new.encode_base64('');

[13:31] <camelia> star-m 2015.09: OUTPUT«␤»

[13:31] <FROGGS> star-m: require ::('MIME::Base64'); say ::('MIME::Base64').new.encode_base64('foo');

[13:31] <camelia> star-m 2015.09: OUTPUT«Zm9v␤»

[13:31] <FROGGS> star-m: require MIME::Base64; say ::('MIME::Base64').new.encode_base64('foo');

[13:31] <camelia> star-m 2015.09: OUTPUT«Zm9v␤»

[13:31] <azawawi> FROGGS: weird lol

[13:32] <FROGGS> not weird...

[13:32] *** loren joined
[13:32] <FROGGS> just...

[13:32] <FROGGS> hmmm

[13:32] <FROGGS> unexpected?

[13:32] <azawawi> :)

[13:32] <FROGGS> no, unfortunate :o)

[13:32] * azawawi tries it on HTTP::UserAgent

[13:33] <FROGGS> azawawi: this is zef: https://github.com/ugexe/zef

[13:33] <dalek> doc: 6fcaaeb | (Steve Mynott)++ | doc/Language/faq.pod:

[13:33] <dalek> doc: [FAQ] explain Any is sort of like undef

[13:33] <dalek> doc: review: https://github.com/perl6/doc/commit/6fcaaebc7f

[13:35] <[Coke]> that is a big runon sentence.

[13:35] *** sufrostico left
[13:35] <itz_stmuk> the commit message or commit?

[13:35] *** sufrostico joined
[13:36] <FROGGS> the commit itself

[13:36] *** ely-se joined
[13:37] <dalek> doc: acb5ba7 | (Steve Mynott)++ | doc/Language/faq.pod:

[13:37] <dalek> doc: [FAQ] split up

[13:37] <dalek> doc: review: https://github.com/perl6/doc/commit/acb5ba7099

[13:37] <mrf> itz_stmuk: Having spent a large amount of last night trying to find what Any meant this is awesome

[13:37] <itz_stmuk> hopefully that's better

[13:38] <itz_stmuk> mrf: I was trying to document what I found odd on first looking at perl6

[13:39] <mrf> itz_stmuk: Yeah. It really confused me when trying to debug a grammar and was doing say $match and was getting Any rather than undef or some sort of Match object

[13:40] <itz_stmuk> I kept forgetting the matches were objects not strings

[13:40] *** aborazmeh left
[13:40] <itz_stmuk> probably typical perl5er experience

[13:41] <jdv79> https://github.com/perl6-community-modules/uri/pull/22 if anyone wants to look at it

[13:41] <mrf> itz_stmuk: yeah though I have seen some unexpected behavious when running parse with :rule()

[13:41] <azawawi> FROGGS: thx

[13:42] <PerlJam> good $localtime all

[13:42] <mrf> As a point does anyone know why I don't get a $/<foo> named group on the Match object when I do .parse("foo", :rule(<foo>)).

[13:43] <mrf> m: grammar G {rule foo {*}}; G.parse('foo', :rule(<foo>));

[13:43] <camelia> rakudo-moar 5e8e23: OUTPUT«5===SORRY!5=== Error while compiling /tmp/bWhrctwvzq␤Quantifier quantifies nothing␤at /tmp/bWhrctwvzq:1␤------> 3grammar G {rule foo {*7⏏5}}; G.parse('foo', :rule(<foo>));␤»

[13:43] <mrf> m: grammar G {rule foo {.*}}; G.parse('foo', :rule(<foo>));

[13:43] <camelia> rakudo-moar 5e8e23: ( no output )

[13:44] <ShimmerFairy> mrf: $/ is the result of matching to the foo rule, that's why :)

[13:45] <mrf> ShimmerFairy: so you would always use the top level $/ directly if you wanted to get complete matched string?

[13:45] <mrf> so in a test for a grammars rule is($/, 'foo') for example

[13:47] <dalek> rakudo/nom: 26617f9 | lizmat++ | src/core/ (2 files):

[13:47] <dalek> rakudo/nom: Add some "is raw" to AT-POS methods

[13:47] <dalek> rakudo/nom: 

[13:47] <dalek> rakudo/nom: They seem to need it.

[13:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26617f9630

[13:48] <dalek> doc: f471356 | moritz++ | util/new-type.p6:

[13:48] <dalek> doc: Add vim modeline to template for new types

[13:48] <dalek> doc: review: https://github.com/perl6/doc/commit/f4713560e8

[13:48] <ShimmerFairy> mrf: yes, $/ is always the whole matched thing, as you asked for it. If you happen to be familiar with 'chroot' on unix-y systems (and are willing to follow an odd analogy), then the :rule<> option is like using 'chroot', where $/ is always the 'root match' :P

[13:48] <lizmat> m: my $l = gather { take-rw my $ = 1 }; $l.AT-POS(0) = 42   # still trying to figure out why this doesn't work

[13:48] <camelia> rakudo-moar 5e8e23: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/AuIja3iruA:1␤␤»

[13:48] <mrf> ShimmerFairy: That makes sense now you have explained it. 

[13:48] <lizmat> m: my $l = gather { take-rw my $ = 1 }; for @$l { $_ = 42 }; dd $l[0]  # whereas this does

[13:48] <moritz> "hey dude, where's my container?"

[13:48] <camelia> rakudo-moar 5e8e23: OUTPUT«42␤»

[13:49] <FROGGS> m: m: grammar G {rule foo {.*}}; say G.parse('foo', :rule('foo));

[13:49] <camelia> rakudo-moar 5e8e23: OUTPUT«5===SORRY!5=== Error while compiling /tmp/nO4JfDv3v4␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/nO4JfDv3v4:1␤------> 3 {.*}}; say G.parse('foo', :rule('foo));7⏏5<EOL>␤    expecting any of:␤        sing…»

[13:49] <FROGGS> m: m: grammar G {rule foo {.*}}; say G.parse('foo', :rule('foo'));

[13:49] <camelia> rakudo-moar 5e8e23: OUTPUT«｢foo｣␤»

[13:49] <llfourn> does p6 have a way of getting user's home dir?

[13:49] <moritz> m: say $*HOME # for llfourn 

[13:49] <camelia> rakudo-moar 5e8e23: OUTPUT«"/home/camelia".IO␤»

[13:49] <ShimmerFairy> (incidentally, the use of / as the match variable name makes the comparison easier :P)

[13:50] <PerlJam> moritz: and if he doesn't want the current user, but some other?  :)

[13:50] <llfourn> moritz: thanks...I should have tried something like that...

[13:50] *** Sqirrel left
[13:50] <moritz> PerlJam: the NativeCall docs have an example for calling getpwent (or whatever it's called) :-)

[13:51] <mrf> ShimmerFairy: I hadn't thought of it like that. My tests currently do "my $match = Grammar.parse" style so it hadn't occured as a comparison

[13:51] <PerlJam> llfourn: the $*VARS are stull sub-documented as far as I know, so don't sweat it.

[13:51] <ShimmerFairy> mrf: hadn't occurred to me until just now either :)

[13:52] <PerlJam> s/stull/still/ even

[13:52] <llfourn> PerlJam: mmm this $*HOME is so sub-documented that it doesn't even exist in design documents :\

[13:53] *** takadonet joined
[13:54] <PerlJam> llfourn: S16 mentions it

[13:54] <PerlJam> http://design.perl6.org/S16.html

[13:54] <llfourn> PerlJam: ah my bad was looking at S22

[13:55] <mrf> ShimmerFairy++

[13:55] <llfourn> s/22/28/

[13:56] *** kjs__ joined
[13:57] *** kjs_ left
[13:57] *** kjs__ is now known as kjs_

[13:59] <azawawi> sergot: ping

[14:01] <jdv79> just FYI - the code in URI that's tripping up is unnecessary, at least for now.

[14:01] <jdv79> afaict at least

[14:02] *** adhoc left
[14:02] *** n0tjack joined
[14:04] *** aeker joined
[14:04] <azawawi> so i looked at 'use HTTP::UserAgen't slowness and shaved off like 0.9 seconds overall. not bad right? :)

[14:05] *** tokuhiro_ joined
[14:05] <jdv79> how?

[14:05] <Zoffix> azawawi++ # that's not bad at all

[14:05] <gfldex> m: my $a; say $a.^name, ' is ', $a.DEFINITE; my $b = Any.new; say $b.^name, ' is ', $b.DEFINITE; # itz_stmuk++ for answering undefinedness. However, there may be problems with your example.

[14:05] <camelia> rakudo-moar 5e8e23: OUTPUT«Any is False␤Any is True␤»

[14:05] <azawawi> https://github.com/sergot/http-useragent/pull/102

[14:06] <sergot> azawawi: pong

[14:06] <azawawi> i couldnt apply require trick because the rakudo bug ofcourse

[14:06] <jdv79> that bug is funky

[14:06] <azawawi> require Foo::Bar; Foo::xyz();

[14:07] <azawawi> we used that a lot in Padre to speed up load time

[14:07] <lizmat> moritz: I think the decont here https://github.com/rakudo/rakudo/blob/nom/src/core/Array.pm#L39 is faulty

[14:07] <FROGGS> azawawi: and this works? https://github.com/sergot/http-useragent/pull/102/files#diff-d3910e15bbdc8777b5

[14:07] <jdv79> as long as you avoid threads its seems to lay dormant

[14:07] <FROGGS> azawawi: why do we want to load Encode at runtime when we can load it at compile time?

[14:08] <lizmat> FROGGS: because Perl 6 atm suffers from the basic delay in loading modules from P5

[14:08] <lizmat> and in P5 you try to delay it to as late as possible

[14:08] <azawawi> FROGGS: for the simple fact that other module will be using it. Hence test suites will be slower

[14:08] <FROGGS> lizmat: yes, but this will change in a not too distant future

[14:08] <lizmat> exactly

[14:08] <azawawi> FROGGS: s/module/modules

[14:08] <moritz> lizmat: possible. I can't really judge it.

[14:08] <lizmat> I get one spectest fail in the zip-latest test

[14:08] *** xpen joined
[14:08] <lizmat> somehow Test::Tap is exposing it

[14:09] <lizmat>     # expected: $[(IntStr.new(2, "2"), "a"), (IntStr.new(2, "2"), "b"), (IntStr.new(2, "2"), "c"), (IntStr.new(3, "3"), "c"), (IntStr.new(4, "4"), "c")]

[14:09] <lizmat>     #      got: $[(IntStr.new(4, "4"), "c"), (IntStr.new(4, "4"), "c"), (IntStr.new(4, "4"), "c"), (IntStr.new(4, "4"), "c"), (IntStr.new(4, "4"), "c")]

[14:09] <FROGGS> azawawi: we will have precomp soon again and then your patch will slow things down

[14:09] <lizmat> so it's checking the final value 3 times, rather than the intermediat  :-(

[14:09] <azawawi> sergot: the 5 seconds in HTTP::UserAgent will be propogated to hours of CPU time when you calculate module user test suites

[14:09] *** tokuhiro_ left
[14:09] <timotimo> yay, more oversharing

[14:09] <azawawi> FROGGS: i see

[14:09] <timotimo> didn't we have that problem with zip-latest already at the last workshop?

[14:10] <timotimo> i think nine worked on it in the hotel lobby late one night

[14:10] <azawawi> FROGGS: i have no problem, at least take the deprecated fix :)

[14:10] <timotimo> well, "until late one night" probably

[14:10] <FROGGS> azawawi: maybe at least open an issue that the require will be removed again once we have precomp back?

[14:10] <lizmat> timotimo: hmmm.... rings a bell

[14:11] <azawawi> FROGGS: what's this precomp everyone is mentioning btw?

[14:11] <azawawi> FROGGS: let me create another PR then

[14:12] <spider-mario> hm, why are our boolean operators left-associative?

[14:12] <itz_stmuk> azawawi: those Foo.pm.moarvm files

[14:12] <FROGGS> azawawi: precompiling modules

[14:13] <FROGGS> azawawi: like, compiling a Foo.pm from source code to a Foo.pm.moarvm, so every use after that dont have to parse the source file

[14:13] <azawawi> FROGGS: the thing that panda removed? 

[14:13] <spider-mario> for example, it makes [||] (True xx *) hang instead of returning immediately

[14:13] *** xpen left
[14:13] <n0tjack> m: my $a := Mu.CREATE; say $a;

[14:13] <camelia> rakudo-moar 5e8e23: OUTPUT«Mu.new␤»

[14:13] <FROGGS> azawawi: aye, which really belongs to rakudo

[14:13] *** zakharyas left
[14:13] *** xpen joined
[14:13] <azawawi> FROGGS: long live rakudo :)

[14:14] <itz_stmuk> couldn't module owners stick a temporary Build.pm to precompile anyway?

[14:15] *** aeker left
[14:15] <jdv79> as i undertand it precomp loading is also broke atm

[14:15] <itz_stmuk> ah

[14:15] <FROGGS> itz_stmuk: that wont play well with testers.perl6.org sadly

[14:16] <FROGGS> jdv79: that's news to me

[14:16] <jdv79> i didn't try but ugexe said something like that y'day i think

[14:16] <FROGGS> how can it be? our setting, Test.pm and other things get precompiled and loaded

[14:16] *** khw joined
[14:17] <lizmat> To give you an idea of the benefits of precomp: the setting compiles in ~ 1 minute, yet it loads in 110 msecs

[14:17] *** AlexDaniel left
[14:17] <lizmat> so a factor of 500 or so

[14:18] <masak> yowza

[14:18] <jdv79> oh, nm.  i misread him.

[14:18] <FROGGS> ohh good

[14:18] <FROGGS> :o)

[14:18] <jdv79> http://irclog.perlgeek.de/perl6/2015-10-19#i_11401252

[14:18] <jdv79> i'm actually not sure what he meant

[14:19] <gfldex> itz_stmuk: i would like to suggest this change: https://gist.github.com/anonymous/87f0f253547ae2fc6404

[14:20] *** azawawi left
[14:20] *** lichtkind joined
[14:20] *** jevin left
[14:21] <itz_stmuk> gfldex: thanks! that is useful but a little long. I will cherry pick some of it

[14:21] <moritz> please don't equate "defined" with DEFINITE

[14:22] *** mtj_ left
[14:22] <moritz> also it might be useful to explain something like "in Perl 6, 'defined'ness is a property of an object. Usually instances are 'defined' and type objects are 'undefined'"

[14:23] <itz_stmuk> I think explaining (Any) is often similar to Perl 5 undef might be enough of a pointer for most

[14:23] <itz_stmuk> moritz: I'll add that

[14:24] <itz_stmuk> I think adding "the parens indicate type object" is also useful (?)

[14:24] *** jevin joined
[14:25] <moritz> +1

[14:25] <gfldex> m: my $foo; say so $foo.^name eq "(Any)"; # some javascript victim might fall for that trap

[14:25] <camelia> rakudo-moar 26617f: OUTPUT«False␤»

[14:25] <gfldex> m: my $foo; print $foo.WHAT.gist(), "\n";

[14:25] <camelia> rakudo-moar 26617f: OUTPUT«(Any)␤»

[14:25] *** [Sno] joined
[14:26] <moritz> this whole "say uses .gist instead of .Str" is a trap

[14:27] <gfldex> m: my $foo; say $foo; say so $foo ~~ Any:D; my $bar = Any.new; say so $bar ~~ Any:D;

[14:27] <camelia> rakudo-moar 26617f: OUTPUT«(Any)␤False␤True␤»

[14:27] <itz_stmuk> I'll add a caveat about not explicitly checking for definedness using (Any)

[14:27] <itz_stmuk> its a bit of a can of worms :/

[14:27] <gfldex> can of worms may be undefined too :->

[14:28] <dalek> doc: c2333fb | (Steve Mynott)++ | doc/Language/faq.pod:

[14:28] <dalek> doc: [FAQ] new modules section to contain more content

[14:28] <dalek> doc: review: https://github.com/perl6/doc/commit/c2333fbf3e

[14:29] <gfldex> for the FAQ "if you want to check for undefinedness do '$yourvar ~~ Any:D'" may be the shortest answer

[14:30] *** ely-se left
[14:31] *** g4 left
[14:31] <jdv79> .tell ugexe now i'm curious - what did you mean here exacltly?:  http://irclog.perlgeek.de/perl6/2015-10-19#i_11401252 & http://irclog.perlgeek.de/perl6/2015-10-19#i_11401292

[14:31] <yoleaux> jdv79: I'll pass your message to ugexe.

[14:32] <gfldex> m: my $foo = Mu.new; say so $foo ~~ Any:D;

[14:32] <camelia> rakudo-moar 26617f: OUTPUT«X::Multi::NoMatch exception produced no message␤  in block <unit> at /tmp/LRGERSLs9t:1␤␤»

[14:33] <gfldex> another worm, i think

[14:35] <gfldex> m: sub f($p){ True unless $p ~~ Any:D }; f(Mu.new);

[14:35] <camelia> rakudo-moar 26617f: OUTPUT«X::TypeCheck::Binding exception produced no message␤  in sub f at /tmp/6J2e6NHen0:1␤  in block <unit> at /tmp/6J2e6NHen0:1␤␤»

[14:35] *** Akagi201 left
[14:35] <gfldex> i'm leaning towards LTA for both cases

[14:37] <gfldex> m: sub evil-sub-from-some-module(){ Mu.new }; sub f($p){ True unless $p ~~ Any:D }; f(evil-sub-from-some-module);

[14:37] <camelia> rakudo-moar 26617f: OUTPUT«X::TypeCheck::Binding exception produced no message␤  in sub f at /tmp/8nLqYUNzMC:1␤  in block <unit> at /tmp/8nLqYUNzMC:1␤␤»

[14:37] <gfldex> and that's why

[14:38] <gfldex> m: sub evil-sub-from-some-module(){ Mu }; sub f($p){ True unless $p ~~ Any:D }; f(evil-sub-from-some-module);

[14:38] <camelia> rakudo-moar 26617f: OUTPUT«Type check failed in binding $p; expected Any but got Mu␤  in sub f at /tmp/nU5nKlIU6T:1␤  in block <unit> at /tmp/nU5nKlIU6T:1␤␤»

[14:38] <gfldex> that's better

[14:38] *** brrt left
[14:39] <dalek> doc: 91e1251 | (Steve Mynott)++ | doc/Language/faq.pod:

[14:39] <dalek> doc: [FAQ] more Any feedback from IRC++

[14:39] <dalek> doc: review: https://github.com/perl6/doc/commit/91e1251636

[14:40] *** ely-se joined
[14:41] *** Sqirrel joined
[14:42] <moritz> I want to teach htmlify.p6 to include anything in X<..> in the search function

[14:42] <moritz> the question is: how should it appear in the search result list?

[14:42] <moritz> I thought maybe "Keyword: backtracking"

[14:43] <moritz> but even though from a search perspective it's a key word, it's not from a language perspective (it's not a Perl 6 key word)

[14:45] <moritz> in German I'd call it "Stichwort" :-)

[14:46] * timotimo pokes moritz' words

[14:46] <gfldex> m: sub f(Any:U $p){my Any:D $v = $p};

[14:46] <camelia> rakudo-moar 26617f: ( no output )

[14:47] <CurtisOvidPoe> Has anyone had much success getting https://github.com/sergot/http-useragent to work?

[14:47] <CurtisOvidPoe> Trying to log in to a Web site and navigate to restricted pages. Is there an easier way? (with docs?)

[14:48] <jdv79> it definitely used to work a bit better

[14:48] <lizmat> afk for a few hours&

[14:48] <CurtisOvidPoe> Right now, this always returns “Any”: try my $login = $ua.request( POST => $login_url, %formfields ); 

[14:49] <itz_stmuk> I've had problems with most of the current HTTP modules not handling incorrect web page encoding

[14:49] <itz_stmuk> (apologies if this is fixed I've not looked in a while)

[14:50] *** chrisseaton joined
[14:50] *** RabidGravy joined
[14:51] <PerlJam> moritz: perhaps "cross reference: backtracking"

[14:51] <PerlJam> moritz: or maybe just "reference: backtracking"  

[14:51] <PerlJam> or something like that

[14:51] *** softmoth joined
[14:51] <chrisseaton> hello - are any of the Perl 6 books (actual paper ones) any good? not sure if some of them were published a while ago and so don't apply any more

[14:52] <PerlJam> chrisseaton: There are actual paper Perl 6 books?!?  ;)

[14:52] <PerlJam> chrisseaton: Perl 6 and Parrot Essentials is the last paper P6 book that I recall and it's incredibly out-dated.

[14:53] <jdv79> there was one from Scott Walters a long time ago

[14:53] <jdv79> i think

[14:53] <PerlJam> yeah, but that was less about Perl 6 and more about doing P6y things in Perl 5

[14:53] <itz_stmuk> there was a yellow Perl6 in Perl5 one

[14:53] <itz_stmuk> yes

[14:54] *** crux left
[14:54] <PerlJam> that's scrotties' book.  "Perl 6 Now"

[14:54] <itz_stmuk> s/Now/Then :)

[14:54] <gfldex> chrisseaton: given that it takes halve a year between a book hitting the publisher and hitting the book shelf, I would not trust any of them.

[14:55] <PerlJam> chrisseaton: There are lots of online resources for learning things about Perl 6.  Is there a reason you want a dead-tree version?

[14:56] <chrisseaton> PerlJam: I just wanted something finished, polished and coherent

[14:56] <chrisseaton> I'm most interested in learning about idiomatic Perl 6 from scratch - I don't know Perl 5

[14:56] <PerlJam> chrisseaton: Sorry, we're not there yet.

[14:56] <chrisseaton> ok I'll try again next year

[14:56] <PerlJam> chrisseaton: learning from scratch is available via #perl6  (several people here have done it)

[14:56] <flussence> any printed book on Perl 6 right now will be about as useful and accurate as one on PHP6.

[14:56] <TimToady> or look at rosettacode

[14:57] <pyrimidine> PerlJam: how about http://learnxinyminutes.com/docs/perl6/ ?

[14:57] <pyrimidine> as a start?

[14:57] <TimToady> that's a good start for some people

[14:58] <itz_stmuk> and jnthn's SPW slides

[14:58] <PerlJam> there are lots of resources on perl6.org  (learnxiny is there)

[14:58] <gfldex> TimToady: while we are on the subject of rosettacode. I made quicksort work with current Rakudo. http://rosettacode.org/wiki/Sorting_algorithms/Quicksort#Perl_6

[14:58] <gfldex> TimToady: what i nether like nor understand is that `my constant @before := @rest.grep(* before $pivot);` doesnt work

[14:59] <TimToady> constants are compile-time and forever

[14:59] <TimToady> you can't rebind them

[15:00] <TimToady> you're confusing constant with readonly perhaps

[15:00] <hoelzro> o/ #perl6

[15:00] <FROGGS> hi hoelzro 

[15:00] <gfldex> should my constant @before = ... work?

[15:00] <hoelzro> o/ FROGGS 

[15:00] *** tokuhirom_ left
[15:00] <TimToady> it should work *once* at compile time

[15:00] <TimToady> and you don't want that really

[15:02] <TimToady> why do you want to declare it unchangable when it is changable from call to call?

[15:02] <dalek> nqp: 19e6c40 | (Pawel Murias)++ | src/vm/js/ (2 files):

[15:02] <dalek> nqp: [js] add console.trace when compiling a NYI thing to an expression

[15:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/19e6c40120

[15:02] <dalek> nqp: 9a64ab1 | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js:

[15:02] <dalek> nqp: [js] Fix syntax error.

[15:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9a64ab1c0d

[15:02] <TimToady> but thanks for updating RC

[15:03] <TimToady> one small suggestion, when you do that, put a {{works with|rakudo|2015-10-21}} or so, so other people know it's been worked on

[15:03] <gfldex> your question made me understand what constant does, so I dont want to do that anymore. :)

[15:03] <TimToady> :)

[15:04] * FROGGS still thinks that getting honoured by naming a C compiler flag after ones surname is very awesome... .oO( -Wall )

[15:05] * TimToady needs all the honor he can get :)

[15:06] <FROGGS> *g*

[15:09] <dalek> doc: 1eb2878 | (Steve Mynott)++ | doc/Language/faq.pod:

[15:09] <dalek> doc: [FAQ] explain more about modules

[15:09] <dalek> doc: review: https://github.com/perl6/doc/commit/1eb28783f4

[15:11] *** CQ joined
[15:12] <[Coke]> I have concerns about the new junction tests that are relying on .gist to check if something worked. 

[15:12] * FROGGS would even eat the heart of a targ with TimToady if that would help...

[15:12] <[Coke]> moritz: what's the difference between defined and .DEFINITE ?

[15:12] <moritz> [Coke]: defined can be overridden (and Failure does it)

[15:13] <FROGGS> [Coke]: the alternative is to check its boolification, which looses a lot of information

[15:13] <[Coke]> moritz (.gist vs. .Str) I've disliked that since day one, but TimToady seemed pretty set on it.

[15:14] <pmurias> .tell konobi I'm not really sure one I put the various compiled files in the package.json containing directory, how should the files be loaded

[15:14] <yoleaux> pmurias: I'll pass your message to konobi.

[15:14] <[Coke]> moritz: (search) doesn't need an annotation; need a landing page for the search results. it's complicated enough that making a dynamic site starts to make sense (rather than a precalculated static)

[15:14] <FROGGS> I like gist/Str so much that some of my Perl 5 classes have a gist method I use for debugging

[15:14] <TimToady> [Coke]: I decided some time ago that .gist and .perl should sort their output for unordered types, so those are fine for tests

[15:14] <FROGGS> like, I can gist DateTime::Spans and DateTime::SpanSets (as graphs)

[15:15] <pmurias> .tell should the user npm install -g nqp-js and the use Foo will be translated to 'require("nqp-js/Foo")'?

[15:15] <yoleaux> pmurias: I'll pass your message to should.

[15:15] <FROGGS> pmurias: you lost a right there

[15:15] *** edehont joined
[15:16] *** diana_olhovik_ left
[15:16] *** zakharyas joined
[15:17] *** n0tjack is now known as should

[15:17] <should> hello

[15:17] <yoleaux> 15:15Z <pmurias> should: the user npm install -g nqp-js and the use Foo will be translated to 'require("nqp-js/Foo")'?

[15:17] <FROGGS> :P

[15:17] *** should is now known as n0tjack

[15:18] <pmurias> .tell konobi should the user npm install -g nqp-js and the use Foo will be translated to 'require("nqp-js/Foo")'?

[15:18] <yoleaux> pmurias: I'll pass your message to konobi.

[15:19] *** ugexe joined
[15:20] *** chrisseaton left
[15:20] *** ugexe left
[15:21] *** ugexe joined
[15:25] <n0tjack> .tell n0tjack Talking to yourself makes you look crazy.

[15:25] <yoleaux> n0tjack: Talking to yourself is the first sign of madness.

[15:25] <n0tjack> should've seen that coming.

[15:26] <geekosaur> heh

[15:27] *** ely-se left
[15:27] <TimToady> .tell TimToady: What kind of a name is TimToady:?

[15:27] <yoleaux> TimToady: What kind of a name is "TimToady:"?!

[15:28] <jdv79> wow.  never looked into it but HTTP::UserAgent is super unfleshed out.

[15:29] <itz_stmuk> ever seen sausages being made?

[15:29] <jdv79> as in to be unusable for anything but the simplest of stuff

[15:29] <itz_stmuk> software is sausages

[15:29] <jdv79> i prefer my sausages cooked

[15:30] <n0tjack> .tell YourMom to call me

[15:30] <yoleaux> n0tjack: I'll pass your message to YourMom.

[15:30] <n0tjack> wow, backfire

[15:31] <RabidGravy> jdv79, I'm not sure that's true, it's just not well documented

[15:31] <jdv79> CurtisOvidPoe: maybe use I::P5 and LWP for now:(

[15:32] <jdv79> oh,  can you provide an example of getting a html loging page and posting it back with creds?

[15:32] <RabidGravy> sorry I don't understand what you mean

[15:32] <itz_stmuk> Net::Curl uses nativecall and libcurl and I've had no issues

[15:32] <itz_stmuk> Net::Curl::Easy is easy

[15:33] <RabidGravy> oh, login page

[15:33] <jdv79> yeah

[15:33] <n0tjack> m: "Get an HTML login page and post it back with credentials".dwim;

[15:33] <camelia> rakudo-moar 26617f: OUTPUT«Method 'dwim' not found for invocant of class 'Str'␤  in block <unit> at /tmp/aDFPFj9Fg9:1␤␤»

[15:33] <n0tjack> aww

[15:33] <n0tjack> maybe in v. 6.1

[15:33] *** CQ left
[15:36] <RabidGravy> well the posting back is easy, the "round trip" you seem to be wanting is a higher level something like WWW::Mechanise

[15:36] <RabidGravy> not so much a missing feature of the useragent as a missing module that might use it

[15:37] <itz_stmuk> most of the pure perl6 web modules fail on a significant number of poorly encoded web pages in the wild

[15:37] <jdv79> RabidGravy: huh?  fetching a form and posting it are for a UA.

[15:38] <RabidGravy> fetching a form, yep.  posting a form, yep.  

[15:39] <RabidGravy> the bit in the middle, nope

[15:39] <jdv79> what bit is this?

[15:40] <RabidGravy> the bit where it understands the content that is returned, parses it, determines what it should post to and with what parameters  and occasions that post

[15:41] <RabidGravy> which is what I take it you mean

[15:42] <ugexe> jdv79: i guess under some situations it does still work. but if you look at this bit of code you can grep `$has_precomp` and `$has_source` when the argument names are actually kebobed. so for the highlighted bit of code it will actually loads whatever defaults CompUnit has instead of what the block of code implies https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnitRepo/Local/File.pm#L34-L60

[15:42] <yoleaux> 14:31Z <jdv79> ugexe: now i'm curious - what did you mean here exacltly?:  http://irclog.perlgeek.de/perl6/2015-10-19#i_11401252 & http://irclog.perlgeek.de/perl6/2015-10-19#i_11401292

[15:42] <ugexe> RAKUDO_MODULE_DEBUG=1 perl6 -e 'require "/home/user/perl6/moar-nom/install/share/perl6/lib/Test.pm.moarvm";' # Failure loading precompiled code

[15:42] <ugexe> RAKUDO_MODULE_DEBUG=1 perl6 -e 'require "/home/user/perl6/moar-nom/install/share/perl6/lib/Test.pm";' # yet this loads the precompiled code

[15:43] <jdv79> no, just connecting parts between the 2 reqs like url base and cookies, etc...

[15:43] <jdv79> ua state or history maybe you'll call that 

[15:45] *** virtualsue joined
[15:45] *** Zoffix left
[15:45] *** abraxxa joined
[15:45] *** abraxxa left
[15:47] <dalek> doc: 24ce248 | (Steve Mynott)++ | / (2 files):

[15:47] <dalek> doc: [FAQ] return constraint

[15:47] <dalek> doc: review: https://github.com/perl6/doc/commit/24ce2487af

[15:47] <RabidGravy> jdv79, if the cookies don't work then it's a bug and a failing test case would be welcome.  As for the base url part, yes I've thought that too - making URI able to construct urls from bits would get it along there :)

[15:49] <jdv79> well, being about to do a get() and then a post() would be a start

[15:50] <jdv79> i only looked for a bit but i didn't see how to do that easily

[15:51] *** captian-adequate joined
[15:52] *** FROGGS left
[15:52] <jdv79> RabidGravy: i did start a new URI

[15:53] <jdv79> maybe after the other few things i want to do i may get back to that

[15:53] <jdv79> but in the meantime Inline::Perl5++

[15:54] <RabidGravy> there is a .get(),  POST you just create an HTTP::Request just like you would in LWP::UserAgent and pass it to .request() 

[15:55] *** abraxxa joined
[15:55] *** abraxxa left
[15:57] *** zakharyas left
[15:57] *** cosimo left
[15:58] <jdv79> yeah but post() would be nice.

[16:00] <RabidGravy> slacker ;-)

[16:01] *** cosimo joined
[16:01] *** tokuhirom_ joined
[16:01] <cosimo> hi folks

[16:01] <yoleaux> 1 May 2015 00:17Z <raydiak> cosimo: https://github.com/cosimo/perl6-string-crc32/pull/5

[16:02] <pmurias> cosimo: hi

[16:02] <cosimo> sorry for jumping in like a total ignorant, but...

[16:02] <RabidGravy> hey cosimo, thanks for getting back about those PRs :)

[16:02] <cosimo> how do I `perl6 Makefile.PL ; make test' nowadays?

[16:02] <RabidGravy> panda-test usually

[16:03] <cosimo> RabidGravy: no problem, and sorry for taking so long

[16:03] <RabidGravy> that's alright, I've had them for years on Term::ReadKey

[16:04] <cosimo> every time I get back to p6, there's a new way to build and test and I never know how to

[16:05] *** zakharyas joined
[16:05] <cosimo> which says more about me, really :)

[16:05] <cosimo> panda-test says 'Segmentation fault'. next step?

[16:06] *** tokuhirom_ left
[16:06] *** tokuhiro_ joined
[16:07] <RabidGravy> oops

[16:07] <RabidGravy> have you built yourself a new rakudo recently?

[16:08] <cosimo> just now

[16:08] <cosimo> and I wiped everything in ~/.perl6

[16:09] <cosimo> so clean slate, I tried looking for panda in github.com/perl6 but didn't find it immediately there

[16:09] <cosimo> lol

[16:10] <cosimo> http://perl6maven.com/how-to-install-perl6-modules -> 500 Internal Server Error

[16:10] <cosimo> tadzik/panda is it?

[16:10] <moritz> aye

[16:10] <moritz> perl6-m bootstrap.pl # in the panda dir

[16:10] <itz_stmuk> cosimo: it runs under rakudo and is restarted regularly via cron :)

[16:10] *** tokuhiro_ left
[16:10] <RabidGravy> you may just want to do "rakudobrew buildpanda" (if it is indeed rakudobrew you use)

[16:10] *** CIAvash joined
[16:11] <RabidGravy> build-panda that is

[16:12] <cosimo> itz_stmuk: in fact, it works now

[16:12] <cosimo> itz_stmuk: thanks

[16:12] <cosimo> RabidGravy: I do not use rakudobrew, I didn't know of its existence

[16:12] *** grondilu left
[16:13] <cosimo> seems panda is bootstrapping correctly now

[16:14] <cosimo> moritz: what's perl6-m, and is it necessary to use it instead of perl6 ?

[16:14] <cosimo> perl6 on moar?

[16:14] <PerlJam> cosimo: yes

[16:14] <cosimo> sorry all, it's noob-question time :)

[16:15] <TimToady> we expect to have a lot more noobs descending on us in the near future, so you're good practice for us :)

[16:16] <cosimo> I believe I am, yes :)

[16:16] *** loren left
[16:17] <cosimo> f.ex. why 'panda-test' but 'panda install' ?

[16:18] <tadzik> panda-tools are quite obsolete

[16:19] <tadzik> panda-test does only test, without dependency checking, building etc

[16:19] <tadzik> I don't think anyone uses that

[16:19] <cosimo> but panda itself doesn't have a 'test', does it?

[16:19] <oka_> hi

[16:19] <RabidGravy> which is quite handy when you are working on a module

[16:19] <RabidGravy> I definitely use panda-test quite a lot

[16:21] <cosimo> tadzik: what should I use instead of panda-test then?

[16:21] <n0tjack> m: say char(72);

[16:21] <camelia> rakudo-moar 26617f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/jJJt8EgaeT␤Undeclared routine:␤    char used at line 1. Did you mean 'chars', 'chr'?␤␤»

[16:21] <n0tjack> m: say chr(72);

[16:21] <camelia> rakudo-moar 26617f: OUTPUT«H␤»

[16:21] <n0tjack> m: say chr(2**32);

[16:21] <camelia> rakudo-moar 26617f: OUTPUT«␀␤»

[16:21] *** xpen left
[16:22] *** xpen joined
[16:22] <ilmari> m: say chr(2**37);

[16:22] <camelia> rakudo-moar 26617f: OUTPUT«␀␤»

[16:23] <RabidGravy> I guess it's no different to "prove -e 'perl6 -Ilib'"

[16:23] <[Coke]> cosimo: ar you trying to test a module you're developing?

[16:23] <cosimo> [Coke]: indeed

[16:24] <[Coke]> I used to use ufo for that; it made a makefile, then I'd make test.

[16:24] <cosimo> [Coke]: yes, I used ufo too, a while back

[16:24] <cosimo> then I understand ufo became obsolete

[16:24] *** xpen_ joined
[16:24] <[Coke]> but also: PERL6LIB=lib prove -v -e perl6 -r t

[16:24] <dalek> doc: 103019d | (Steve Mynott)++ | doc/Language/faq.pod:

[16:24] <dalek> doc: compile time errors are SORRY

[16:24] <dalek> doc: review: https://github.com/perl6/doc/commit/103019da8d

[16:24] <dalek> doc: 4f7bb04 | (Steve Mynott)++ | doc/Language/faq.pod:

[16:24] <dalek> doc: fix pod

[16:24] <dalek> doc: review: https://github.com/perl6/doc/commit/4f7bb04908

[16:24] <[Coke]> cosimo: I don't think it's obsolete.

[16:25] <itz_stmuk> I like ufo

[16:25] <[Coke]> If so, we need to get the word out. :)

[16:25] <PerlJam> cosimo: it's "old" but not necessarily obsolete

[16:27] <cosimo> prove works fine for me, really

[16:27] <cosimo> but ok, it feels like a confused mess

[16:28] *** xpen left
[16:28] <cosimo> please don't take it as an offense 

[16:29] <cosimo> so if I want to install, I'd use 'panda install'? because that gives me no output, and seems to do nothing at all

[16:29] <itz_stmuk> add a dot on the end

[16:30] *** telex left
[16:30] <cosimo> itz_stmuk: I see... works now, thanks much!

[16:31] *** raiph joined
[16:32] *** telex joined
[16:33] <RabidGravy> cosimo++ # all the things are fixed now :)

[16:33] <cosimo> RabidGravy: did you manage to run a clean 'make test' for Cache::Memcached ?

[16:34] *** pat_js joined
[16:34] <RabidGravy> yeah, what you merged was working (of course it may have been overtaken by changes in rakudo)

[16:34] <cosimo> RabidGravy: I see it runs cleanly if no memcached is running on :11211, so that's wonderful!

[16:34] <cosimo> however, it fails miserably when an actual memcached is listening on :11211

[16:35] <cosimo> but yeah, great stuff

[16:35] <RabidGravy> oh let me check that, as it definitely was working

[16:35] *** AndyDee joined
[16:35] <cosimo> RabidGravy: This is perl6 version 2015.09-433-g26617f9 built on MoarVM version 2015.09-79-gee9fc2b

[16:36] <cosimo> RabidGravy: need to run now

[16:36] <cosimo> again, sorry for all the annoying questions and ignorance

[16:37] <cosimo> got to start somewhere

[16:38] <dalek> doc: 24ac6f6 | (Steve Mynott)++ | doc/Language/faq.pod:

[16:38] <dalek> doc: [FAQ] Inline::Perl5 added

[16:38] <dalek> doc: review: https://github.com/perl6/doc/commit/24ac6f65c8

[16:38] *** andreoss left
[16:38] <cosimo> will have to look at LWP::Simple soon

[16:38] <tadzik> cosimo: what is your usecase?

[16:39] <tadzik> for just running test on your stuff, ufo is still a good tool

[16:39] <itz_stmuk> cosimo: I have a PR for proxy support for LWP::Simple

[16:40] <moritz> [Coke]: do you happen to understand why, in perl6/doc htmlify, find-definitions only calls itself recursively it has found a valid definition?

[16:41] *** maddingue left
[16:41] <cosimo> itz_stmuk: just merged it

[16:42] <itz_stmuk> thanks!

[16:42] <cosimo> tadzik: my use case is that I expect a 'perl Makefile.PL ; make ; make test' kind of workflow

[16:43] <n0tjack> m: say 'ABCDEFG'.comb[3,0,1].join(", "); 'ABCDEFG'.comb[3,0,-1].join(", "); # I know I can say *-1 _syntactically_, but how do I pass negative indices inside an input array used for slicing?

[16:43] <camelia> rakudo-moar 26617f: OUTPUT«D, A, B␤Index out of range. Is: -1, should be in 0..Inf␤  in block <unit> at /tmp/fs0fIuT4u3:1␤␤Actually thrown at:␤  in block <unit> at /tmp/fs0fIuT4u3:1␤␤»

[16:43] <cosimo> I'm confused by having to use different tools (panda, ufo, prove, ...)

[16:43] <cosimo> ideally IMHO, the one tool to use should be shipped with the perl6 executable

[16:44] <PerlJam> m: say 'ABCDEFG'.comb[3,0,*-1].join(", ");

[16:44] <camelia> rakudo-moar 26617f: OUTPUT«D, A, G␤»

[16:44] <cosimo> if that were a Makefile.PL, I would be totally fine with it

[16:44] <cosimo> just in case it wasn't clear :)

[16:44] * gfldex .oO( rosettacode could do with a REPL )

[16:44] <PerlJam> n0tjack: oh .... I wasn't quite grokking what you were asking.  I get it now.

[16:45] <n0tjack> PerlJam: I didn't phrase it very clearly

[16:45] <n0tjack> but I'm used to passing indices around as inputs

[16:45] <PerlJam> n0tjack: I think the answer is ... you don't.  Or perhaps pass  @array.end - $num where you wanted a negative number

[16:45] <n0tjack> and I won't always have the luxury of using syntactic tools in-place like *-1

[16:45] *** Ven joined
[16:46] <TimToady> m: my @indices = 3,0,*-1; say 'ABCDEFG'.comb[@indices].join(", ");

[16:46] <camelia> rakudo-moar 26617f: OUTPUT«D, A, G␤»

[16:46] <skids> m: my @a = 3, 0, *-1; say "ABCDEFG".comb[@a].join(", ");

[16:46] <camelia> rakudo-moar 26617f: OUTPUT«D, A, G␤»

[16:46] <n0tjack> PerlJam: Sure, I could calc it, but I'd like some semantic token I could offer my callers to say "the last one", "the penultimate one", etc, without them having to know or ask the length of the specific array

[16:47] <PerlJam> n0tjack: what TimToady++ said

[16:47] <flussence> [Coke]: "PERL6LIB=lib prove -v -e perl6 -r t" can be abbreviated "prove -e perl6" if you have a META6.json present, and IIRC the "-e perl6" won't even be necessary soon

[16:47] <TimToady> and skids++, a moment later :)

[16:47] <itz_stmuk> hmm there really should be OS X Radudo Star binaries with the Windows ones

[16:47] <n0tjack> TimToady: Ok, that's an approach but .. ew.

[16:47] <TimToady> it's not syntactic

[16:47] *** ^elyse^ joined
[16:47] <itz_stmuk> does anyone know a tool to package up .dmg or one of those mac install bundles?

[16:48] <PerlJam> n0tjack: um ... why is t hat "ew" exactly?

[16:48] <cosimo> LWP::Simple passes all tests now

[16:48] <n0tjack> For example  sub mutton-slicer(Int @slice) { 'ABCDEFG'.comb[@slice];}; my Int @a = 1,2,*-1; say mutton-slicer(@a);

[16:48] <n0tjack> m: sub mutton-slicer(Int @slice) { 'ABCDEFG'.comb[@slice];}; my Int @a = 1,2,*-1; say mutton-slicer(@a);

[16:48] <camelia> rakudo-moar 26617f: OUTPUT«Type check failed in assignment to @a; expected Int but got WhateverCode␤  in block <unit> at /tmp/qq2yK8VxzU:1␤␤»

[16:48] <n0tjack> Breaks MDM

[16:48] *** andreoss joined
[16:49] <n0tjack> Breaks the conceptual model, too

[16:49] <n0tjack> MMD

[16:49] <moritz> m: say Pod::Heading.^mro

[16:49] <camelia> rakudo-moar 26617f: OUTPUT«((Pod::Heading) (Pod::Block) (Any) (Mu))␤»

[16:49] <PerlJam> do you really *need* that constraint?

[16:49] *** Ven left
[16:49] <n0tjack> PerlJam: In my limited experience with p6, yes

[16:49] * geekosaur is working with mac stuff in another context *right now*, but not sure any handy-dandy tools

[16:50] <andreoss>  m: say Nil == 0

[16:50] <camelia> rakudo-moar 26617f: OUTPUT«Use of Nil in numeric context  in block <unit> at /tmp/qRZ_27iKGY:1␤True␤»

[16:50] <n0tjack> PerlJam: I intend to make great (ab)use of the type system

[16:50] <andreoss> how to suppress such warning?

[16:50] <andreoss> or make it fatal

[16:50] <n0tjack> One of p6's attractions to me is the cohesive integration of Perl's DWIMminess with a useful type system

[16:51] <n0tjack> I'm going to MMD the heck out of stuff

[16:51] <flussence> m: use fatal; say Nil == 0;

[16:51] <camelia> rakudo-moar 26617f: OUTPUT«Use of Nil in numeric context  in block <unit> at /tmp/CksUirdPzq:1␤True␤»

[16:51] <PerlJam> n0tjack: have you played with Haskell much?

[16:51] <n0tjack> PerlJam: I have. I would not characterize it as DWIMmy, or whippuppity

[16:51] <flussence> .oO( that doesn't look fatal to me )

[16:52] <[Coke]> moritz: no, find-definitions is evil & hairy and I haven't deconstructed it yet.

[16:52] <n0tjack> PerlJam: Also, I'm leery of a language which relies so heavily on a core concept all its users struggle to explain to non-initiates

[16:52] <gfldex> m: use fatal; say Nil == 1; say 'alive';

[16:52] <camelia> rakudo-moar 26617f: OUTPUT«Use of Nil in numeric context  in block <unit> at /tmp/JFl3shJ8Rq:1␤False␤alive␤»

[16:52] <[Coke]> flussence: perl 5's prove reads META6.json !?

[16:52] <PerlJam> n0tjack: are you talking about Perl 6 or Haskell there?  ;-)

[16:53] <flussence> [Coke]: the -e perl6 part does, it gets its lib paths from there

[16:53] <n0tjack> PerlJam: What core concepts does p6 rely on that you couldn't explain to a non-Perl programmer in a few sentences?

[16:53] <TimToady> m: sub mutton-slicer(Int @slice) { 'ABCDEFG'.comb[@slice % *];}; my Int @a = 1,2,-1; say mutton-slicer(@a);

[16:53] <n0tjack> For example, junctions are novel but not arcane

[16:53] <camelia> rakudo-moar 26617f: OUTPUT«D␤»

[16:53] <[Coke]> why would that work locally?

[16:53] <n0tjack> TimToady++

[16:53] <n0tjack> You da man.

[16:54] <TimToady> S09 even speculates a modular index declaration, though it's NYI

[16:54] <flussence> m: sub mutton-slicer(Int @slice) { 'ABCDEFG'.comb[@slice »%» *];}; my Int @a = 1,2,-1; say mutton-slicer(@a);

[16:54] <camelia> rakudo-moar 26617f: OUTPUT«Cannot call Real(Whatever: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in sub mutton-slicer at /tmp/6vY3dm71uO:1␤  in block <unit> at /tmp/6vY3dm71uO:1␤␤»

[16:55] <TimToady> m: sub mutton-slicer(Int @slice) { 'ABCDEFG'.comb[@slice X% *];}; my Int @a = 1,2,-1; say mutton-slicer(@a);

[16:55] <camelia> rakudo-moar 26617f: OUTPUT«Cannot call Real(Whatever: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in sub mutton-slicer at /tmp/gin2vF5zDD:1␤  in block <unit> at /tmp/gin2vF5zDD:1␤␤»

[16:55] <n0tjack> TimToady: I'd support an initiative to rename NYI to "nonce error", if only to ruffle the Brits ;)

[16:55] *** virtualsue left
[16:56] <TimToady> m: sub mutton-slicer(Int @slice) { 'ABCDEFG'.comb[@slice »%» *];}; my Int @a = 1,2,-1; say mutton-slicer(@a);

[16:56] <camelia> rakudo-moar 26617f: OUTPUT«Cannot call Real(Whatever: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in sub mutton-slicer at /tmp/58XBp7gAgJ:1␤  in block <unit> at /tmp/58XBp7gAgJ:1␤␤»

[16:56] <[Sno]> I'm currently trying cross-compile rakudo-star and run into a few pitfalls

[16:56] <TimToady> hmm

[16:56] <flussence> looks like it shoulda worked...

[16:57] <[Sno]> since cross-compiling has some host-tools and a target sysroot, that should kind-of distinguished ...

[16:57] <TimToady> m: say (42 X+ *)(1)

[16:57] <camelia> rakudo-moar 26617f: OUTPUT«Cannot find method 'CALL-ME'␤  in block <unit> at /tmp/cP_tQ8Fh97:1␤␤»

[16:57] <TimToady> looks like * isn't transitive through metaops yet

[16:58] <TimToady> and @slice % * is obviously incorrect

[16:58] <skids> nOtjack: the problem of course is that you may protect yourself from non-Int values, but you don't protect yourself from accidental negative values, which I think was one of the reasons for *-1 learned from experience with P5 bugs.

[16:58] <n0tjack> skids: IME, -1 is much more often useful and intended than an error

[16:59] <[Coke]> [Sno]: can you nopaste the problem?

[16:59] <n0tjack> skids: In those rare cases where I think the risk outweighs the benefits, I'd just do a subset > 0

[16:59] <[Sno]> [Coke]: sure

[16:59] <n0tjack> uh, >=0

[16:59] <[Sno]> [Coke]: there're several ones, one nopaste for overview or dedicated?

[17:00] <n0tjack> m: say ((1,2,3,4,5) X+ *.elems)((1,2,3))

[17:00] <camelia> rakudo-moar 26617f: OUTPUT«Cannot find method 'CALL-ME'␤  in block <unit> at /tmp/DT_O3SCIFV:1␤␤»

[17:00] <n0tjack> boo

[17:00] <TimToady> it's just a bug

[17:00] <PerlJam> n0tjack: you would rather have to write the guard yourself than have Perl 6 provide it?

[17:00] <n0tjack> PerlJam: I want Perl6 to install default guards for risks I think are common

[17:00] <n0tjack> PerlJam: I don't think "accidental" negative indices are common

[17:01] <TimToady> toroidal arrays are cool, but they're not gonna be the default

[17:01] <n0tjack> PerlJam: To the contrary, I think they're incredibly useful and should be better advertised

[17:01] *** pmurias left
[17:01] *** espadrine_ left
[17:01] *** firstdayonthejob joined
[17:01] <n0tjack> TimToady: Boy, to get what I want then, I'd need some kind of programming language which lets me change its syntax on the fly....

[17:02] *** tokuhirom_ joined
[17:02] <[Sno]> http://nopaste.linux-dev.org/?784156

[17:02] <PerlJam> use toroidal-arrays;  # All's fair if you predeclare!  :)

[17:02] <n0tjack> PerlJam: Clearly that name isn't punny enough.

[17:03] <n0tjack> I refuse to use a module that doesn't employ some kind of terrible pun

[17:03] <TimToady> .oO(These aren't the toroids you're looking for...)

[17:03] <PerlJam> n0tjack: you are going to write some *interesting* software in Perl 6.  I can already tell.

[17:03] *** spider-mario left
[17:03] *** dakkar left
[17:04] <TimToady> maybe we should reserve a MONKEY pragma just for n0tjack++

[17:05] <[Sno]> [Coke]:  http://nopaste.linux-dev.org/?784167 and http://nopaste.linux-dev.org/?784156 are the major ones for now ;)

[17:05] <[Sno]> I'm happy to provide a fix, but want to discuss the _how_ with Perl6 people before ;)

[17:06] *** duncan_dmg left
[17:06] <RabidGravy> cosimo, there was some bit-rot since I last updated that PR, will be sending a further update shortly

[17:06] <TimToady> MONKEY-JAR, for J, APL, and R

[17:06] *** tokuhirom_ left
[17:07] <TimToady> and once you stick your hand into it, you're stuck

[17:08] <PerlJam> sounds about right :)

[17:09] <n0tjack> hahah

[17:10] <[Sno]> who's the person to talk about wrt. toolchain?

[17:10] <skids> m: my @a = 3, 0, * div 2; say "ABCDEFG".comb[@a].join(", ");  # also you lose things like this without allowing closures, FWIW.

[17:10] <camelia> rakudo-moar 26617f: OUTPUT«D, A, D␤»

[17:11] <n0tjack> .u 決心

[17:11] <yoleaux> No characters found

[17:11] <n0tjack> Whatever that says, it's the theme for our global sales kickoff this year

[17:11] <n0tjack> it's some kinda platitude

[17:12] <n0tjack> ah, determination; resolve

[17:12] <pink_mist> [Sno]: at a guess it would be jdv79

[17:14] <[Sno]> jdv79: any opinions adding --sysroot and --sdkroot options to nqp/rakudo Configure.pl and support them right then?

[17:14] <[Sno]> pink_mist: thanks

[17:15] <RabidGravy> cosimo, there you go all worky again

[17:16] <itz_stmuk> [Sno]: you can pass through options to moar like this

[17:16] <itz_stmuk> rakudobrew build moar --configure-opts=--moar-option=--cc=clang36

[17:16] *** Peter_R joined
[17:16] <itz_stmuk> not sure if that helps

[17:16] <[Sno]> itz_stmuk: doesn't ;)

[17:16] <[Sno]> has nothing to do with option-passing

[17:17] <itz_stmuk> you probably have to hack stuff up then :P

[17:17] <[Sno]> but thanks

[17:17] <[Sno]> sure, but I want to hack it in an accepted way, not against the people currently contributing

[17:18] <itz_stmuk> I still suspect you can pass your flags in

[17:19] <[Sno]> itz_stmuk: no way, it has nothing to do with flags for moar or nqp

[17:19] <TimToady> literally, 決心 is "decisive heart"

[17:19] <[Sno]> it has to do with invalid and/or incomplete directories being used

[17:20] <PerlJam> [Sno]: we're kind of an ask-forgiveness bunch, so you may just want to hack it and see what happens from there.

[17:20] <n0tjack> TimToady: Does it have any compound meaning, like an idiom?

[17:20] *** cognominal left
[17:21] <TimToady> yes, determination, resolution

[17:21] <[Sno]> look, when you have an sqk-root in ~/workdir/tmp/sysroots/x86_64-linux and Configure looks in /usr/bin instead of ~/workdir/tmp/sysroots/x86_64-linux/usr/bin - it's gonna fail to succeed

[17:21] <itz_stmuk> oh so you need to add path prefixes?

[17:22] <[Sno]> itz_stmuk: it's not a prefix

[17:22] *** CIAvash left
[17:22] <[Sno]> because the prefix is /usr - the sysroot for target file system and sdk file system are local

[17:23] <itz_stmuk> is a prefix in a general sense I didn't mean --prefix

[17:23] <[Sno]> itz_stmuk: it's a chroot in general sense

[17:23] <itz_stmuk> well stick some chroot(1) in the scripts

[17:24] *** tokuhiro_ joined
[17:24] <[Sno]> itz_stmuk: chroot is 80's :P - in 2010 toolchains support sysroot

[17:25] *** lea left
[17:25] *** abaugher left
[17:25] *** Mhoram joined
[17:25] <itz_stmuk> you mentioned chroots!

[17:25] <itz_stmuk> anyway 

[17:26] <[Sno]> itz_stmuk: I tried to explain the difference to you ;)

[17:26] <[Sno]> PerlJam: gave the answer ;)

[17:26] *** lea joined
[17:26] <n0tjack> m: say chr [-] map &ord, '心♥'.comb; # Apparently "heart without heart" in Unicode results in "deep thoughts" in Chinese

[17:26] <camelia> rakudo-moar 26617f: OUTPUT«㥞␤»

[17:26] *** ggherdov left
[17:27] <itz_stmuk> well you aren't very good at explaining and arguing on IRC isn't going to help you :)

[17:28] <n0tjack> m: say chr [-] ords '心♥';

[17:28] <camelia> rakudo-moar 26617f: OUTPUT«㥞␤»

[17:28] <n0tjack> oh, that's nicer.

[17:28] *** tokuhiro_ left
[17:29] <dalek> doc/keywords-in-search: 7533a7a | moritz++ | htmlify.p6:

[17:29] <dalek> doc/keywords-in-search: First shot at including keywords (X<..> references) in search results

[17:29] <dalek> doc/keywords-in-search: review: https://github.com/perl6/doc/commit/7533a7a70e

[17:29] *** cxreg left
[17:29] *** stux|RC-only left
[17:29] *** atweiden joined
[17:30] *** sufrostico left
[17:30] <jdv79> oh this is cool.  a form tag has no type according to HTML::Parser::XML

[17:30] *** cxreg joined
[17:30] <jdv79> do we have another html parser?

[17:30] *** diana_olhovik_ joined
[17:30] *** ggherdov joined
[17:31] <n0tjack> jdv79: Sure!  HTML::Parser::XML.new.clone ;)

[17:31] <jdv79> i meant tag

[17:31] <jdv79> thanks

[17:31] <n0tjack> I keed, I keed

[17:31] <flussence> I was thinking of maybe doing one using nativecall and Netsurf's html5 parser lib...

[17:31] *** FROGGS joined
[17:32] <flussence> no idea how usable that's meant to be outside its home project, though.

[17:32] *** stux|RC-only joined
[17:33] <FROGGS> o/

[17:33] *** keix joined
[17:33] *** ][Sno][ joined
[17:33] *** [Sno] left
[17:37] <dalek> doc: 393a8f7 | (Steve Mynott)++ | doc/Language/faq.pod:

[17:37] <dalek> doc: [FAQadd a general section

[17:37] <dalek> doc: review: https://github.com/perl6/doc/commit/393a8f755e

[17:38] *** SuzieQueue joined
[17:39] *** ][Sno][ is now known as [Sno]

[17:40] <RabidGravy> fix all the things

[17:42] *** O47m341 left
[17:44] *** jsimonet left
[17:44] *** jsimonet joined
[17:46] <moritz> http://hack.p6c.org:3000/index.html if you search for "has" (without the quote), you now get some hits

[17:49] *** andreoss left
[17:51] <dalek> doc: 7533a7a | moritz++ | htmlify.p6:

[17:51] <dalek> doc: First shot at including keywords (X<..> references) in search results

[17:51] <dalek> doc: review: https://github.com/perl6/doc/commit/7533a7a70e

[17:51] <dalek> doc: 4858558 | moritz++ | htmlify.p6:

[17:51] <dalek> doc: Merge branch 'keywords-in-search'

[17:51] <dalek> doc: review: https://github.com/perl6/doc/commit/4858558952

[17:52] *** llfourn left
[17:52] * itz_stmuk uses American English spelling for consistancy :(

[17:53] <[Coke]> What is the sort order of search results?

[17:53] <[Coke]> Seems like "reference" should be at the bottom.

[17:54] <[Coke]> moritz: has shows up 2x at that url.

[17:54] <[Coke]> both pointing to the same doc.

[17:54] <[Coke]> (but with different text in the search dropdown)

[17:55] <[Coke]> searching for, e.g. "col" should probably show column before meta object protocol

[17:55] *** xfix joined
[17:55] *** llfourn joined
[17:55] <[Coke]> searching for _ vs. - highlights that we are not presenting a unified front.

[17:56] <jdv79> what someone working on libxml2 binding?

[17:56] <jdv79> that has an html parser 

[17:58] *** vendethiel joined
[17:59] <[Coke]> http://hack.p6c.org:3000/routine/configure_type_checking.html has an ACCEPTS link that redirect loops.

[18:00] <itz_stmuk> I think looping with running doc locally with mojo is due to missing apache config from the target system

[18:01] <itz_stmuk> http://doc.perl6.org//routine/configure_type_checking ACCEPTS is 404

[18:01] <[Coke]> ok. http://docs.perl6.org/routine/configure_type_checking.html has a link to ACCEPTS which is a 404.

[18:02] <itz_stmuk> I've also seen looping which was OK live

[18:03] *** llfourn left
[18:03] <itz_stmuk> I've seen other 404s too .. maybe running a spider against live would be useful .. or parsing the web logs if available

[18:03] *** lea left
[18:08] <n0tjack> oh hey cool, List.classify!

[18:08] <n0tjack> You guys have all my favorite toys.

[18:08] <nine> Guess we just like to play

[18:10] <n0tjack> m: (^25).classify({["flat","low","med","high"][$_ % 4]})

[18:10] <camelia> rakudo-moar 26617f: ( no output )

[18:10] <n0tjack> m: say (^25).classify({["flat","low","med","high"][$_ % 4]})

[18:10] <camelia> rakudo-moar 26617f: OUTPUT«flat => [0 4 8 12 16 20 24], high => [3 7 11 15 19 23], low => [1 5 9 13 17 21], med => [2 6 10 14 18 22]␤»

[18:10] <n0tjack> heh, so cool

[18:13] <RabidGravy> oh, I see

[18:13] <jdv79> FROGGS: was it you with libxml2?

[18:13] <FROGGS> jdv79: it was

[18:14] <n0tjack> oh, I guess I should get used to the fact that I can say <flat low med high> instead of having to type ["flat","low

[18:14] <n0tjack> etc.  Even nicer.

[18:15] *** gonz_ joined
[18:15] <jdv79> FROGGS: is that a reality?  just wondering if that would be a decent xml and html parser.  HTML::Parser::XML and XML seem unfinished.

[18:16] <FROGGS> jdv79: it can parse xml/html, but accessing the parsed tree is not finished I think...

[18:17] <jdv79> oh neat

[18:17] <FROGGS> jdv79: I guess I need a sample case to guide the development

[18:17] <FROGGS> jdv79: the test suite I've ported from Perl 5 is kinda icky, so it is not much fun to follow it

[18:17] <jdv79> parse an html form out of a page?

[18:18] <jdv79> is html5 xml anymore though?

[18:18] <FROGGS> hmmm

[18:18] <FROGGS> and the access the name and type attributes?

[18:18] <FROGGS> and then*

[18:19] <itz_stmuk> I found HTML::Parser::XML OK if a little rough around the edges

[18:19] <itz_stmuk> I actually liked the XML parser API

[18:21] *** kjs_ left
[18:22] <jdv79> its slow and the query recurse option seems broken

[18:23] <itz_stmuk> slow? a pure perl 6 xml parser! surely not! :)

[18:23] <jdv79> seems libxml2 only handles html4 so far

[18:25] <itz_stmuk> is there actually any documentation for Nativecall at all apart from advent?

[18:26] <FROGGS> itz_stmuk: http://doc.perl6.org/language/nativecall

[18:26] <itz_stmuk> ah thanks!

[18:26] <itz_stmuk> I forgot it was core

[18:26] <FROGGS> hardcore, even :o)

[18:28] <[Coke]> nativecall supports C++, no?

[18:29] <FROGGS> it does

[18:30] <[Coke]> probably need a mention of that on the doc page.

[18:31] <FROGGS> and examples... yeah :/

[18:32] *** sufrostico joined
[18:34] *** pat_js left
[18:37] *** n0tjack left
[18:37] <dalek> rakudo/nom: c6326d4 | lizmat++ | src/core/Pair.pm:

[18:37] <dalek> rakudo/nom: Make Pair.new(key,value) about 4x as fast

[18:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c6326d4b3f

[18:37] <jdv79> FROGGS: yup.  name,type,value i guess.

[18:37] <FROGGS> jdv79: working on it...

[18:38] <jdv79> no rush.  thanks!

[18:39] <FROGGS> :o)

[18:40] <dalek> specs: 009e614 | (Nova Patch)++ | S15-unicode.pod:

[18:40] <dalek> specs: typo: BFC → NFC

[18:40] <dalek> specs: review: https://github.com/perl6/specs/commit/009e614b76

[18:46] *** cognominal joined
[18:48] *** zakharyas left
[18:50] <dalek> rakudo/nom: 3087de7 | lizmat++ | src/core/ (2 files):

[18:50] <dalek> rakudo/nom: Eradicate internal RWPAIR sub now Pair.new is fast

[18:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3087de7802

[18:50] *** leont joined
[18:51] *** sufrostico left
[18:55] <dalek> doc: 7d3a59c | (Steve Mynott)++ | doc/Language/faq.pod:

[18:55] <dalek> doc: [FAQ] 5to6- entry

[18:55] <dalek> doc: review: https://github.com/perl6/doc/commit/7d3a59c019

[18:55] <dalek> doc: 9fc750c | (Steve Mynott)++ | doc/Language/faq.pod:

[18:55] <dalek> doc: [FAQ] linenoise and data structure dumping

[18:55] <dalek> doc: review: https://github.com/perl6/doc/commit/9fc750c8f3

[18:55] <dalek> doc: 989bd03 | (Steve Mynott)++ | doc/Language/faq.pod:

[18:55] <dalek> doc: tweaking

[18:55] <dalek> doc: review: https://github.com/perl6/doc/commit/989bd03d72

[18:55] <dalek> doc: 3a74c72 | (Steve Mynott)++ | doc/Language/faq.pod:

[18:55] <dalek> doc: [FAQ] nativecall

[18:55] <dalek> doc: review: https://github.com/perl6/doc/commit/3a74c72d92

[18:55] <dalek> doc: c4557d2 | (Steve Mynott)++ | htmlify.p6:

[18:55] <dalek> doc: Merge branch 'master' of github.com:perl6/doc

[18:55] <dalek> doc: review: https://github.com/perl6/doc/commit/c4557d25f7

[18:55] *** edehont left
[18:57] <[Coke]> Why do we need to warn people about captchas?

[18:57] <[Coke]> also "Captcha"

[18:59] <dalek> doc: 2e8d389 | coke++ | doc/Language/faq.pod:

[18:59] <dalek> doc: Use more generic link to S99

[18:59] <dalek> doc: review: https://github.com/perl6/doc/commit/2e8d389326

[19:01] <dalek> rakudo/nom: a594769 | lizmat++ | src/core/Set.pm:

[19:01] <dalek> rakudo/nom: Use faster Pair creation for Sets

[19:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a594769c36

[19:03] <FROGGS> lizmat: are you about to drop the named param candidate of Pair.new?

[19:03] <lizmat> FROGGS: no

[19:04] <lizmat> just no using it when we don't need to

[19:04] <FROGGS> lizmat: is there a reason to not drop it?

[19:04] <lizmat> the named variant is needed for signature unpacking afaik

[19:04] <FROGGS> ahh

[19:04] <lizmat> hmmm

[19:04] <lizmat> that doesn't make sense

[19:05] <lizmat> in any case, the named parameter interface follows the standard .new interface for public attributes

[19:06] <FROGGS> hmm, yeah

[19:07] <lizmat> the named interface, however, is about 100x slower than the positiional interface

[19:07] *** et09 left
[19:07] <RabidGravy> ouch

[19:08] <lizmat> probably because it doesn't get optimised atm

[19:09] *** n0tjack joined
[19:10] *** spollei joined
[19:10] <itz_stmuk> https://github.com/rakudo/rakudo/pull/557

[19:10] <itz_stmuk> *bump* :)

[19:11] <dalek> rakudo/nom: 8b4c2ab | (Steve Mynott)++ | src/core/Rat.pm:

[19:11] <dalek> rakudo/nom: Fix RT #126391: [BUG] Bad "divide by 0" error message

[19:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b4c2ab1e9

[19:11] <dalek> rakudo/nom: 2717139 | lizmat++ | src/core/Rat.pm:

[19:11] <dalek> rakudo/nom: Merge pull request #557 from stmuk/nom

[19:11] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126391

[19:11] <dalek> rakudo/nom: 

[19:11] <dalek> rakudo/nom: Fix RT #126391: [BUG] Bad "divide by 0" error message

[19:11] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126391

[19:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/271713923c

[19:11] <itz_stmuk> ty

[19:11] <FROGGS> itz_stmuk: if lines in source files a describe worthy, why dont describe them? your comment there kinda and kinda not does that

[19:12] <itz_stmuk> FROGGS: I'll put more details in the RT ticket and also add a test

[19:12] <FROGGS> better would be a "# we do X here so that Y, otherwise it would Z"

[19:12] <itz_stmuk> probably tomorrow now

[19:12] <FROGGS> itz_stmuk++

[19:12] *** n0tjack left
[19:13] *** diana_olhovik_ left
[19:15] *** spollei left
[19:15] *** spollei joined
[19:17] *** tokuhirom_ joined
[19:18] <[Coke]> are there any perf consequences on the 557 PR?

[19:19] *** n0tjack joined
[19:20] <lizmat> itz_stmuk:   ^^^  ???

[19:20] <lizmat> :)

[19:21] <tadzik> cosimo: then ufo is still the way to go

[19:22] *** tokuhirom_ left
[19:24] <n0tjack> m: say (<a b c d>.[* % 4]).perl;

[19:24] <camelia> rakudo-moar a59476: OUTPUT«"a"␤»

[19:26] *** tokuhiro_ joined
[19:27] *** edehont joined
[19:30] <nine> [Coke]: it certainly doesn't help performance

[19:30] *** tokuhiro_ left
[19:31] <nine> [Coke]: but then, you wouldn't expect stellar performance from rationals anyway

[19:31] *** edehont left
[19:33] *** kjs_ joined
[19:36] *** kjs_ left
[19:42] * n0tjack is gonna use project euler to learn about building a reliable test suite

[19:42] *** eliasr joined
[19:43] *** softmoth left
[19:48] *** skids left
[19:49] <n0tjack> what is permitted following = to "name" a comment?

[19:49] <moritz> n0tjack: context?

[19:49] <n0tjack> =begin what am I allowed to put here \n blah blah blah blah \n blah \n =end that also has to go here

[19:50] <PerlJam> n0tjack: I'm sure S26 can tell you  :)

[19:50] <moritz> n0tjack: an identifier

[19:50] <n0tjack> moritz: thanks

[19:50] <n0tjack> PerlJam: I'm still learning to navigate the synopses

[19:51] <PerlJam> n0tjack: keep in mind that some renders will do different things with different blocks based on your identifier

[19:51] *** Mhoram left
[19:51] <PerlJam> that did not come out as coherent as it was in my head

[19:51] <PerlJam> :)

[19:52] <n0tjack> is there any benefit to using HEREDOCS over comments for commenting?

[19:52] <ShimmerFairy> n0tjack: after =begin it has to either be one of the standard names, or a custom typename that's in mixed-case (at least one uppercase and one lowercase letter). all lowercase and ALL UPPERCASE names either exist or are reserved

[19:52] <RabidGravy> story of my life

[19:52] <n0tjack> ShimmerFairy: Sounds like I really should read S26 ....

[19:52] <[Coke]> HEREDOCS are parsed as code.

[19:52] *** edehont joined
[19:52] <PerlJam> ShimmerFairy++ way better

[19:52] <ShimmerFairy> n0tjack: also, you need a newline after a =begin or =for block to start the content, since after the name you can put configuration options

[19:53] *** Mhoram joined
[19:53] <n0tjack> configurable comments, I love it

[19:53] <PerlJam> POD is not exactly comments though

[19:53] <n0tjack> been a while since I used POD or anythign like it.  I never really wrote public code, even in my p5 days

[19:53] <ShimmerFairy> n0tjack: Pod isn't really referred to as "heredocs", that's a separate thing. And if you want Pod-style comments, I recommend the 'comment' block --- '=begin comment ... =end comment', '=for comment', or '=comment'

[19:54] <n0tjack> no, I meant actual HEREDOCS

[19:54] <ShimmerFairy> oh :)

[19:55] <n0tjack> I'm trying to learn to organize and structure p6 code appropriately, using Project Euler as my MacGuffin

[19:55] <ShimmerFairy> m: say q:to/END_OF_HEREDOC/;␤The funny symbol there is used␤to simulate newlines for camelia␤This is a heredoc␤END_OF_HEREDOC␤say 42;

[19:55] <camelia> rakudo-moar 271713: OUTPUT«The funny symbol there is used␤to simulate newlines for camelia␤This is a heredoc␤␤42␤»

[19:55] <n0tjack> so in each script which implements a problem, I'm gonna want a comment which notes the problem number, URL, problem description

[19:56] <PerlJam> maybe just use #`{} style comments rather than pod

[19:56] <n0tjack> I'm also gonna learn use TEST; etc.

[19:56] *** AlexDaniel joined
[19:56] <n0tjack> PerlJam: Does that scale to making a .pm6?

[19:56] <ShimmerFairy> n0tjack: ^^^ that q:to// above is a heredoc, a way of writing multiline strings in a more natural way. Pod stuff has nothing to do with that kind of stuff :)

[19:56] <n0tjack> Ultimately I'm trying to learn to be a "real" p6 programmer, not just a private hacker

[19:57] <n0tjack> ShimmerFairy: I know, I used HEREDOCS already for my first p6 project (for sub USAGE())

[19:57] <n0tjack> ShimmerFairy: I was wondering aloud if their enhanced flexibility has any advantages over POD for actual code documentaiton

[19:58] <PerlJam> n0tjack: depends on what you want to do with the "comments"   If you're going to extract them as documentation, you should use pod.  If they are really and tryuly just commentary about the code, regular comments would be fine (IMHO)

[19:58] <PerlJam> s/tryuly/truly/  # odd typo

[19:58] <ShimmerFairy> n0tjack: for documenting your code, Pod is the way to go :)  You can also use #|[...] before or #=[...] after things to add Pod strings to declarations (called "Declarator Blocks" in S26, fyi)

[19:59] <n0tjack> ShimmerFairy: thanks!

[19:59] <n0tjack> PerlJam: Well, I'm gonna throw away all this project euler code, i'm just using it to learn all the features surrounding actual programming 

[19:59] <ShimmerFairy> n0tjack: I think my confusion stemmed from the fact that 'heredocs' aren't really a commenting mechanism, so wondering if they work for that is a bit pointless :)

[20:00] <n0tjack> ShimmerFairy: Anything is a commenting mechanism if you try hard enough :)

[20:00] <n0tjack> m: say 0xHiImAgreatComment;

[20:00] <camelia> rakudo-moar 271713: OUTPUT«5===SORRY!5=== Error while compiling /tmp/B2WeKVuzDm␤Confused␤at /tmp/B2WeKVuzDm:1␤------> 3say 07⏏5xHiImAgreatComment;␤»

[20:00] <ShimmerFairy> Well, true, but the point is that it's not meant to be one :P

[20:00] *** llfourn joined
[20:00] *** jnthn left
[20:00] <ShimmerFairy> m: say :36<Hi_I_am_a_great_comment>

[20:00] <camelia> rakudo-moar 271713: OUTPUT«5018001041631299629722577337␤»

[20:00] <n0tjack> heh

[20:01] <n0tjack> I like that p6 enforces appropriate hex digits in base-16 constants. J doesn't.

[20:01] <n0tjack> Once you introduce a different radix for a number, any digit is fair game

[20:02] <n0tjack> we can say 2blololololololol (2b to us is 0b for you)

[20:02] <ShimmerFairy> Huh, I was just wondering if you could still get a 'Confused' error message, apparently it's not even that hard :P

[20:03] <lizmat> m: fail "Confused"

[20:03] <camelia> rakudo-moar 271713: ( no output )

[20:03] <lizmat> harder than I thought :-)

[20:03] <n0tjack> m: confuzzled;

[20:03] <camelia> rakudo-moar 271713: OUTPUT«5===SORRY!5=== Error while compiling /tmp/myscUjTU7q␤Undeclared routine:␤    confuzzled used at line 1␤␤»

[20:04] <moritz> ShimmerFairy: cd rakudo/t/spec/; git grep Confused

[20:05] <ShimmerFairy> moritz: to be more specific, my wondering was "rakudo's grammar does a good job of detecting specific kinds of parse fails at the source, I wonder if you can still hit rakudo's [equivalent of] / [$ || <.panic_here>]/"  :)

[20:06] *** llfourn left
[20:13] *** emilbarton joined
[20:14] *** xfix left
[20:15] *** emilbarton left
[20:16] *** darutoko left
[20:17] *** colomon left
[20:22] *** espadrine_ joined
[20:25] <dalek> rakudo/nom: 9fbd04d | lizmat++ | src/core/Rakudo/Internals.pm:

[20:25] <dalek> rakudo/nom: Add internal methods KEY_COLON_VALUE and TRIM

[20:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9fbd04dd6a

[20:25] <dalek> rakudo/nom: 009400e | lizmat++ | src/core/Supply.pm:

[20:25] <dalek> rakudo/nom: Supply.throttle control message is now key:value

[20:25] <dalek> rakudo/nom: 

[20:26] <dalek> rakudo/nom: Rather than using a Pair (which is awkward to use in an .emit anyway,

[20:26] <dalek> rakudo/nom: because you need extra parens to not make it a named parameter), we

[20:26] <dalek> rakudo/nom: now use a string of the form "key:value".  This should *also* make it

[20:26] <dalek> rakudo/nom: much easier to use Supply.throttle as a means of controlling supply

[20:26] <dalek> rakudo/nom: processing across multiple machines.

[20:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/009400ee8b

[20:26] *** n0tjack left
[20:28] <dalek> roast/curli: c36ab6d | (Stefan Seifert)++ | S11-compunit/compunit-repository.t:

[20:28] <dalek> roast/curli: Test if $*REPO is a CompUnit::Repository

[20:28] <dalek> roast/curli: review: https://github.com/perl6/roast/commit/c36ab6d7b1

[20:28] <dalek> rakudo/curli: 2e9dd10 | (Stefan Seifert)++ | src/core/Process.pm:

[20:28] <dalek> rakudo/curli: Set up a $*REPO

[20:28] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/2e9dd109c1

[20:28] <lizmat> nine++

[20:29] * lizmat ran into a few issues while demoing yesterday at the NR.pm

[20:29] *** n0tjack joined
[20:29] <lizmat> that I would like to see fixed before tomorrow's release  :-)

[20:31] *** FROGGS left
[20:33] *** colomon joined
[20:34] <flussence> if anyone around is going to be hacking on HTTP::UserAgent any time soon, I found this a while back that might come in useful: https://github.com/kevinburke/hamms

[20:36] <RabidGravy> flussence, I'm hacking on it right now

[20:37] <lizmat> m: class A does Supply {}; dd A

[20:37] <camelia> rakudo-moar 271713: OUTPUT«A␤»

[20:37] <flussence> does that seem like it's useful at all? :)

[20:38] <RabidGravy> it would be useful, however I don't think making python a  dependency would be an entirely popular move

[20:38] *** adhoc joined
[20:39] *** grondilu joined
[20:39] <flussence> yeah, I can't expect it to be bundled with the module itself...

[20:39] <nine> How can I create an our scoped constant in a package? Like our constant Foo::Bar::baz

[20:40] <grondilu> doesn't exactly that work?

[20:40] <moritz> m: package Foo:::Bar { our constant baz = 42 }; say Foo::Bar::baz

[20:40] <camelia> rakudo-moar 271713: OUTPUT«===SORRY!===␤Name Foo:::Bar ends with '::' and cannot be used as a package name␤»

[20:40] <grondilu> m: package A { our constant B = pi };

[20:40] <camelia> rakudo-moar 271713: ( no output )

[20:40] <moritz> m: package Foo::Bar { our constant baz = 42 }; say Foo::Bar::baz

[20:40] <camelia> rakudo-moar 271713: OUTPUT«42␤»

[20:41] <moritz> m: our constant Foo::Bar::baz = 42 ; say Foo::Bar::baz

[20:41] <camelia> rakudo-moar 271713: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hkDX42vFKE␤Missing initializer on constant declaration␤at /tmp/hkDX42vFKE:1␤------> 3our constant Foo:7⏏5:Bar::baz = 42 ; say Foo::Bar::baz␤»

[20:42] <nine> moritz: thanks!

[20:42] *** SuzieQueue left
[20:44] <nine> m: role Foo::Bar { our constant Baz := 1; }

[20:44] <camelia> rakudo-moar 271713: OUTPUT«5===SORRY!5=== Error while compiling /tmp/nOc6Cx5dXl␤Cannot declare our-scoped constant inside of a role␤(the scope inside of a role is generic, so there is no unambiguous␤package to install the symbol in)␤at /tmp/nOc6Cx5dXl:1␤------> 3role …»

[20:45] *** pmurias joined
[20:47] <nine> Ok, how can I create an our scoped constant CompUnit::PrecompilationRepository::None when CompUnit::PrecompilationRepository is a role?

[20:49] <moritz> you don't

[20:50] <lizmat> similarly: how do you augment Supply ?

[20:50] <lizmat> you don't

[20:50] *** gizmomathboy joined
[20:52] <PerlJam> how do I ... 

[20:52] <PerlJam> you don't

[20:52] *** kaare_ left
[20:52] <lizmat> hehe

[20:52] <RabidGravy> don't do anything, it's so much easier

[20:53] <mrf> Hi. Is there any way to get a string to output its hex values that I have missed

[20:53] <RabidGravy> no disappointment, no bad comments, no complaints ;-)

[20:53] <nine> I just did BEGIN CompUnit::PrecompilationRepository::<None> := CompUnit::PrecompilationRepository;

[20:54] <PerlJam> mrf: please elaborate?

[20:54] <lizmat> nine: that smells eh.... yucky ?

[20:54] <moritz> m: my $str = 'FF'; say :16($str)

[20:54] <camelia> rakudo-moar 009400: OUTPUT«255␤»

[20:54] <nine> lizmat: I all up for better ideas :)

[20:55] <lizmat> I guess we'll have to wait for jnthn to return  :-)  (wow, I couldn't tab his name even)

[20:55] <RabidGravy> m: say "Foo".encode.list # mrf

[20:55] <camelia> rakudo-moar 009400: OUTPUT«[70 111 111]␤»

[20:55] *** gizmomathboy left
[20:55] *** jacoby joined
[20:55] <RabidGravy> or some variant thereof

[20:56] <moritz> m: say "möp".ords>>.base(16)

[20:56] <camelia> rakudo-moar 009400: OUTPUT«(6D F6 70)␤»

[20:56] <mrf> moritz: perfect

[20:57] <lizmat> jacoby o/

[20:58] *** _28_ria left
[20:58] <jacoby> Hey. I tried to reimplement some toy code in Perl 6. Behavior is bad enough, I must believe I did something wrong.

[20:58] *** _28_ria joined
[20:58] <jacoby> https://gist.github.com/jacoby/d8a061733af16158c531

[20:59] *** n0tjack left
[20:59] <dalek> rakudo/curli: b693ab1 | (Stefan Seifert)++ | / (5 files):

[20:59] <dalek> rakudo/curli: Make $*REPO.need(CompUnit::DependencySpecification.new(:short-name<lib>)) do something

[20:59] <dalek> rakudo/curli: review: https://github.com/rakudo/rakudo/commit/b693ab1ff5

[21:05] *** kjs_ joined
[21:05] *** bjz_ left
[21:06] *** mtj_ joined
[21:08] *** cognominal left
[21:09] *** vendethiel left
[21:12] *** dj_goku left
[21:12] *** pyrimidi_ joined
[21:12] *** dj_goku joined
[21:12] *** dj_goku left
[21:12] *** dj_goku joined
[21:13] *** pyrimid__ joined
[21:14] *** pyrimid__ left
[21:14] *** pyrimi___ joined
[21:14] *** pyrimidi_ left
[21:14] *** colomon left
[21:16] *** pyrimidine left
[21:18] *** captian-adequate left
[21:18] *** _28_ria left
[21:19] *** _28_ria joined
[21:21] <lizmat> m: sub aa { for @_ { .say } }; aa 42

[21:21] <camelia> rakudo-moar 009400: OUTPUT«42␤»

[21:21] <lizmat> m: sub aa { if @_ { for @_ { .say } } }; aa 42

[21:21] <camelia> rakudo-moar 009400: ( no output )

[21:22] <lizmat> m: sub aa { if @_ { say @_ } }; aa 42

[21:22] <camelia> rakudo-moar 009400: OUTPUT«[]␤»

[21:22] <lizmat> seems all wrong to me ?

[21:24] <lizmat> looks like an "if @_" eats @_ ?

[21:25] *** kjs_ left
[21:27] *** tokuhiro_ joined
[21:27] <grondilu> m: { @_ && { .say for @_ } }(42)

[21:27] <camelia> rakudo-moar 009400: ( no output )

[21:28] <grondilu> m: { @_ && "ok" }(42)

[21:28] <camelia> rakudo-moar 009400: ( no output )

[21:28] <grondilu> m: say { @_ && "ok" }(42)

[21:28] <camelia> rakudo-moar 009400: OUTPUT«ok␤»

[21:28] <PerlJam> m: sub foo { if @_ { say "hi: @_[]" } }; foo 42;

[21:28] <camelia> rakudo-moar 009400: OUTPUT«hi: ␤»

[21:28] *** diana_olhovik joined
[21:28] <grondilu> m: say { @_ && @_ }(42)

[21:28] <camelia> rakudo-moar 009400: OUTPUT«[42]␤»

[21:29] <PerlJam> m: sub foo { say @_.WHAT }; foo 42;

[21:29] <camelia> rakudo-moar 009400: OUTPUT«(Array)␤»

[21:30] <grondilu> m: { @_ && { .say for @_ }() }(42)

[21:30] <camelia> rakudo-moar 009400: ( no output )

[21:30] <grondilu> m: { @_ && { .say for @_ }(@_) }(42)

[21:30] <camelia> rakudo-moar 009400: OUTPUT«42␤»

[21:30] * grondilu stops pretending he has an idea of what's going on there

[21:30] *** captian-adequate joined
[21:31] *** _28_ria left
[21:31] *** tokuhiro_ left
[21:31] *** _28_ria joined
[21:32] <PerlJam> m: sub foo { say @_; if @_ { say @_ } }; foo 42;

[21:32] <camelia> rakudo-moar 009400: OUTPUT«[42]␤[]␤»

[21:32] <PerlJam> I think it's some kind of iterator problem.

[21:32] *** colomon joined
[21:32] *** mtj_ left
[21:33] <dalek> rakudo/nom: c85c7c6 | lizmat++ | src/core/Any.pm:

[21:33] <dalek> rakudo/nom: Make dd a little more useful for natives

[21:33] <dalek> rakudo/nom: 

[21:33] <dalek> rakudo/nom: If you specify dd $a, and $a is a native int or str, then you only get

[21:33] <dalek> rakudo/nom: to see the value *without* the name.  This is annoying while debugging.

[21:33] <dalek> rakudo/nom: To make this easier, you can now specify natives as a named parameter.

[21:33] <dalek> rakudo/nom: 

[21:33] <dalek> rakudo/nom:   my int $a = 42; dd :$a;   # Int a = 42

[21:33] <dalek> rakudo/nom: 

[21:33] <dalek> rakudo/nom: and by the magic of the :$var notation, we can now see the name.

[21:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c85c7c6096

[21:33] *** mtj_ joined
[21:38] <PerlJam> m: sub foo { say @_; if @_ { say @_; }; say @_ }; foo 42;

[21:38] <camelia> rakudo-moar 009400: OUTPUT«[42]␤[]␤[42]␤»

[21:38] *** _28_ria left
[21:38] <PerlJam> or ... maybe @_ is getting bound to the if's block rather than the subs block

[21:38] *** _28_ria joined
[21:38] *** ^elyse^ left
[21:39] *** rindolf left
[21:40] *** TEttinger joined
[21:40] <flussence> m: say 1,2 X+ (1 X+ 1)

[21:40] <camelia> rakudo-moar 009400: OUTPUT«===SORRY!===␤Cannot invoke this object (REPR: Uninstantiable)␤»

[21:44] *** diana_olhovik left
[21:48] *** tokuhirom_ joined
[21:52] *** tokuhirom_ left
[21:59] *** kmel joined
[21:59] <RabidGravy> flussence, fancy porting that hamms thingy to P6?

[21:59] <kmel> m: say 'hello 6ers'

[21:59] <camelia> rakudo-moar c85c7c: OUTPUT«hello 6ers␤»

[22:00] *** adhoc left
[22:00] *** cognominal joined
[22:00] <RabidGravy> lots of people will love you for it ;-)

[22:00] *** llfourn joined
[22:01] <mrf> m: for 1..5, 6 {.say}

[22:01] <camelia> rakudo-moar c85c7c: OUTPUT«1..5␤6␤»

[22:02] <flussence> oh jeez, that's a tall order for the likes of me. I'll give it a shot but no promises :)

[22:02] <kmel> anyone here responsible for perl6.org?

[22:02] <mrf> ^ hwo do I make that actually print the numbers 1 to 6

[22:02] *** kid51 joined
[22:02] <tadzik> quite a few of us, yeah :)

[22:02] <tadzik> what's up?

[22:02] <flussence> m: say 1..5 .list

[22:02] <camelia> rakudo-moar c85c7c: OUTPUT«1..1␤»

[22:02] <flussence> er

[22:02] <flussence> m: say 1..5 .flat

[22:02] <camelia> rakudo-moar c85c7c: OUTPUT«Seq objects are not valid endpoints for Ranges␤  in block <unit> at /tmp/TxImchmBwR:1␤␤»

[22:03] <kmel> hi tadzik 

[22:03] <flussence> m: say @(1..5)

[22:03] <camelia> rakudo-moar c85c7c: OUTPUT«(1 2 3 4 5)␤»

[22:03] <PerlJam> m: for flat 1..5, 6 {.say}

[22:03] <camelia> rakudo-moar c85c7c: OUTPUT«1␤2␤3␤4␤5␤6␤»

[22:03] <tadzik> hi kmel 

[22:04] <kmel> the link at the bottom of the page 'Modules' links to 'Whatever'

[22:04] <kmel> just thought i'd report it

[22:05] <RabidGravy> flussence, well you could just start it and get people to contribute stuff as they need it

[22:05] *** captian-adequate left
[22:05] <RabidGravy> long shopping list of server weird shit to mock here

[22:06] *** llfourn left
[22:06] <RabidGravy> :)

[22:07] <mrf> PerlJam++ Thank you. 

[22:08] <kmel> let me rephrase it: on the bottom of perl6.org the link called 'Modules' links to perl6.org/whatever

[22:08] <flussence> .oO( then again, I've got a lot of travel time with relatively crappy connectivity next week, so I might get something going... )

[22:10] *** spider-mario joined
[22:10] <mrf> Non flattening seems to be the biggest gotcha I have met coming from perl5

[22:13] <lizmat> PerlJam grondilu submitted #126423 re if @_ eating @_

[22:13] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126423

[22:13] <RabidGravy> there are differences in the flattening yes

[22:19] *** raiph left
[22:21] <AlexDaniel> m: say 1...-01;

[22:21] <camelia> rakudo-moar c85c7c: OUTPUT«Potential difficulties:␤    Leading 0 does not indicate octal in Perl 6.␤    Please use 0o1 if you mean that.␤    at /tmp/Z3p9JglD7Q:1␤    ------> 3say 1...-017⏏5;␤(1 0 -1)␤»

[22:22] *** kmel left
[22:23] <AlexDaniel> m: say 1...8...3;

[22:23] <camelia> rakudo-moar c85c7c: OUTPUT«(1 2 3 4 5 6 7 8 7 6 5 4 3)␤»

[22:23] <AlexDaniel> that's interesting

[22:26] *** _28_ria left
[22:26] *** _28_ria joined
[22:26] *** dalek left
[22:27] *** n0tjack joined
[22:27] *** dalek joined
[22:27] *** ChanServ sets mode: +v dalek

[22:28] *** adu joined
[22:28] *** captian-adequate joined
[22:30] <RabidGravy> also buildbot, something that people would use instead of builbot would be good

[22:33] *** captian-adequate left
[22:35] *** tokuhirom_ joined
[22:40] *** _28_ria left
[22:41] *** _28_ria joined
[22:42] <lizmat> m: my $l = gather { take-rw my $ = 1 }; $l.AT-POS(0) = 42   # submitted RT #126424 for this one

[22:42] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126424

[22:42] <camelia> rakudo-moar c85c7c: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/6g7mQ7GWfn:1␤␤»

[22:42] <lizmat> good night, #perl6!

[22:44] *** edehont left
[22:50] <RabidGravy> I didn't even know take-rw was a thing

[22:51] *** xpen_ left
[22:55] *** raiph joined
[23:01] *** spider-mario left
[23:01] *** captian-adequate joined
[23:07] <leont> Given a list of scalars, and a list of lists of scalars, how do I merge one element from the left with all the elements from one entry from the right in an idiomatic way?

[23:08] <leont> The best I have so far is (@left Z @right).map( -> @ [$left, @right] { ($left, |@right) })'

[23:08] *** jnm_theMailman joined
[23:09] *** firstdayonthejob left
[23:10] <leont> .map({ $_[0], |@$_[1] }) is shorter, but looks awful

[23:10] <leont> (for the second half)

[23:11] <leont> Ha! @left Z,| @right

[23:11] <RabidGravy> the first looks fine, bearing in mind at this time of night I can barely see the sigils ;-)

[23:11] <leont> No wait, that transposes the wrong way around :-o

[23:13] <leont> m: my @left = 1, 2, 3; my @right = (4, 5, 6), [7, 8, 9], [10, 11, 12]; .say for (@left Z,| @right)

[23:13] <camelia> rakudo-moar c85c7c: OUTPUT«(1 4 7 10)␤(2 5 8 11)␤(3 6 9 12)␤»

[23:15] <leont> I don't understand why it's doing that though :-s

[23:16] *** _28_ria left
[23:16] *** jnm_theMailman left
[23:17] *** _28_ria joined
[23:17] <ShimmerFairy> m: my @left = 1, 2, 3; my @right = (4, 5, 6), [7, 8, 9], [10, 11, 12]; .say for (@left Z, |@right)

[23:17] <camelia> rakudo-moar c85c7c: OUTPUT«(1 4 7 10)␤(2 5 8 11)␤(3 6 9 12)␤»

[23:18] <ShimmerFairy> leont: note that the | applies to @right, and it's not part of the metaop :)

[23:19] <leont> Ah, yeah that makes more sense

[23:21] *** _28_ria left
[23:22] *** _28_ria joined
[23:24] *** BenGoldberg joined
[23:26] *** _28_ria left
[23:26] *** jnm_theMailman joined
[23:26] *** _28_ria joined
[23:26] *** RabidGravy left
[23:29] *** tokuhiro_ joined
[23:31] *** pmurias left
[23:33] *** pmurias joined
[23:33] *** tokuhiro_ left
[23:34] *** espadrine_ left
[23:34] *** jnm_theMailman left
[23:39] *** virtualsue joined
[23:41] *** adu left
[23:48] <leont> Best so far: (@left Z, @right).map({ .map(|*) })

[23:53] <ShimmerFairy> Grammar::Debugger's tests fail with   Cannot call ACCEPTS(Regex: Mu); none of these signatures match:   for me now

[23:58] *** pmurias left
