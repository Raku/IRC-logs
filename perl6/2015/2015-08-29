[00:19] <ShimmerFairy> poking at the p6u archives just because, I found  http://www.nntp.perl.org/group/perl.perl6.users/2015/08/msg2202.html  , and I wish someone could've mentioned what substr-rw actually does (and why .= wouldn't cut it)

[00:21] <flussence> .substr returns a copy, .substr-rw returns an lvalue/proxy that mutates the original string? That's my guess anyway.

[00:23] <ShimmerFairy> flussence: yeah, substr-rw is about letting you modify things in the original string, which is different from what .= is for. And the thread seems to be based in a misunderstanding of what the -rw methods in core do.

[00:24] <flussence> trim-rw sounds like complete nonsense to me.

[00:25] <ShimmerFairy> Yes. Again, the thread seems to have been started on a misunderstanding that -rw methods mutates the invocant, i.e. that they're the same as .=, and I just wish someone pointed that out.

[00:26] <ShimmerFairy> (My understanding of the mailing list is that I couldn't just send a reply about half a month after the discussion happened, unfortunately ☺)

[00:32] *** llfourn joined
[00:32] *** breinbaas left
[00:33] <TEttinger> jdv79: interestingly, I hit some... issues with one of the existing ones

[00:33] <TEttinger> https://github.com/atom/language-perl I believe is the right link

[00:34] <TEttinger> it highlights any ' or " as the start of a string, which uh causes issues when writing grammars that use those. thankfully... \c[APOSTROPHE]

[00:35] <ShimmerFairy> TEttinger: does it choke on  $legal'name  too?

[00:36] <TEttinger> I didn't try it.

[00:36] <TEttinger> replacing bare ' with \c[APOSTROPHE] worked everywhere I needed it

[00:36] *** llfourn left
[00:37] <ShimmerFairy> TEttinger: looking at that syntax highlighter, it's cute how it thinks it can define enough possible brackets for Q-lang strings :P (such repetition, jeez)

[01:00] *** llfourn joined
[01:05] *** llfourn left
[01:18] *** BenGoldberg joined
[01:30] *** cwDYKARN left
[02:09] <dalek> roast/glr: 0de14e4 | skids++ | S04-statement-modifiers/without.t:

[02:09] <dalek> roast/glr: Better nonfatalization of test.  Now we pass this file.

[02:09] <dalek> roast/glr: 

[02:09] <dalek> roast/glr: Doh.  Using try to nonfatalize this test made it fail because

[02:09] <dalek> roast/glr: "use fatal" is turned on inside of try blocks.  The test has

[02:09] <dalek> roast/glr: since been fixed.  Use a non-use-fatal defatalizer.

[02:09] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0de14e4488

[02:15] *** noganex_ joined
[02:18] *** noganex left
[02:23] <dalek> roast/glr: 57591f9 | skids++ | integration/precompiled.t:

[02:23] <dalek> roast/glr: unfudge now-passing test

[02:23] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/57591f9f1d

[02:26] *** telex left
[02:28] *** telex joined
[02:42] *** muraiki joined
[02:56] <muraiki> meow

[02:57] * timotimo has a spurious wakelup

[02:57] <timotimo> wakeup*

[03:01] *** llfourn joined
[03:05] *** CQ_ joined
[03:06] *** llfourn left
[03:07] *** CQ left
[03:07] *** CQ_ is now known as CQ

[03:18] <muraiki> night

[03:18] *** muraiki left
[03:18] <ShimmerFairy> nqp: my @a := nqp::list_s(); nqp::push_s(@a, "foo"); say(@a[0]);

[03:18] *** camelia left
[03:18] *** tinyblak joined
[03:19] *** camelia joined
[03:20] *** khw joined
[03:20] <ShimmerFairy> nqp-m: my @a := nqp::list_s(); nqp::push_s(@a, "foo"); say(@a[0]);

[03:20] *** prevost joined
[03:21] <camelia> nqp-parrot: OUTPUT«Can't exec "./rakudo-inst/bin/nqp-p": No such file or directory at lib/EvalbotExecuter.pm line 193.␤exec (./rakudo-inst/bin/nqp-p /tmp/tmpfile) failed: No such file or directory␤Server error occurred! Closing Link: ns1.niner.name (Quit: camelia)␤Lost connect…»

[03:21] <camelia> ..nqp-jvm: OUTPUT«(signal ABRT)#␤»

[03:21] <camelia> ..nqp-moarvm: OUTPUT«MVMArray: atpos expected string register␤   at /tmp/tmpfile:1  (<ephemeral file>:<mainline>:26)␤ from gen/moar/stage2/NQPHLL.nqp:1289  (/home/camelia/rakudo-inst-1/share/nqp/lib/NQPHLL.moarvm:eval:190)␤ from gen/moar/stage2/NQPHLL.nqp:1492  (/home/camelia/ra…»

[03:21] *** ChanServ sets mode: +v camelia

[03:21] <camelia> nqp-moarvm: OUTPUT«MVMArray: atpos expected string register␤   at /tmp/7hfoIvQdk8:1  (<ephemeral file>:<mainline>:26)␤ from gen/moar/stage2/NQPHLL.nqp:1289  (/home/camelia/rakudo-inst-1/share/nqp/lib/NQPHLL.moarvm:eval:190)␤ from gen/moar/stage2/NQPHLL.nqp:1492  (/home/camelia…»

[03:21] <ShimmerFairy> let's try this without the crashing this time :)

[03:21] <ShimmerFairy> nqp-m: my @a := nqp::list_s(); nqp::push_s(@a, "foo"); say(@a[0]);

[03:21] <camelia> nqp-moarvm: OUTPUT«MVMArray: atpos expected string register␤   at /tmp/Nt7dj3_3BC:1  (<ephemeral file>:<mainline>:26)␤ from gen/moar/stage2/NQPHLL.nqp:1289  (/home/camelia/rakudo-inst-1/share/nqp/lib/NQPHLL.moarvm:eval:190)␤ from gen/moar/stage2/NQPHLL.nqp:1492  (/home/camelia…»

[03:21] <ShimmerFairy> nqp-m: my str @a; nqp::push_s(@a, "foo"); say(@a[0]);

[03:21] <camelia> nqp-moarvm: OUTPUT«Only typed scalars are currently supported in NQP at line 2, near "; nqp::pus"␤   at gen/moar/stage2/NQPHLL.nqp:516  (/home/camelia/rakudo-inst-1/share/nqp/lib/NQPHLL.moarvm:panic:105)␤ from gen/moar/stage2/NQP.nqp:2930  (/home/camelia/rakudo-inst-1/share/nqp/…»

[03:22] <ShimmerFairy> nqp-m: my $a := nqp::list_s(); nqp::push_s($a, "foo"); say($a[0]);

[03:22] <camelia> nqp-moarvm: OUTPUT«MVMArray: atpos expected string register␤   at /tmp/M7VzupNiO3:1  (<ephemeral file>:<mainline>:26)␤ from gen/moar/stage2/NQPHLL.nqp:1289  (/home/camelia/rakudo-inst-1/share/nqp/lib/NQPHLL.moarvm:eval:190)␤ from gen/moar/stage2/NQPHLL.nqp:1492  (/home/camelia…»

[03:22] <ShimmerFairy> As far as I can tell, nqp::list_s() (and presumably the other typed variants) are basically useless in NQP at the moment. I'm guessing that's not the idea? :)

[03:23] *** tinyblak left
[03:24] *** aborazmeh joined
[03:24] *** aborazmeh left
[03:24] *** aborazmeh joined
[03:28] <ShimmerFairy> Also, that camelia crash reminded me of a serious question I had: who actually uses nqp-p anymore? I mean, I know the Parrot VM was kept for NQP because the big changes for rakudo that lead to tearing out parrot didn't need anything in NQP, so you didn't _have_ to deal with nqp-p (recalling pmichaud's post).

[03:28] <ShimmerFairy> But really, is there any point to keeping it? I have half a mind to just go ahead and tear out any trace of parrot in nqp and see how much people don't care :P .

[03:29] <ShimmerFairy> (camelia reminded me because, if you look at the results after it came back from the crash, it's specifically nqp-p that caused a server error)

[03:43] *** tinyblak joined
[03:45] *** rangerprice joined
[03:51] *** khw left
[03:53] *** khw joined
[03:57] *** skids left
[04:05] <timotimo> huh, what broke list_s in nqp?!

[04:06] <timotimo> nqp-m: my $a := nqp::list_s(); nqp::push_s($a, "foo"); say(nqp::atpos_s($a[0]));

[04:06] <camelia> nqp-moarvm: OUTPUT«Arg count 1 doesn't equal required operand count 3 for op 'atpos_s'␤   at gen/moar/stage2/QAST.nqp:1604  (/home/camelia/rakudo-inst-1/share/nqp/lib/QAST.moarvm:compile_mastop:209)␤ from gen/moar/stage2/QAST.nqp:1820  (/home/camelia/rakudo-inst-1/share/nqp/lib/…»

[04:06] <timotimo> nqp-m: my $a := nqp::list_s(); nqp::push_s($a, "foo"); say(nqp::atpos_s($a, 0));

[04:06] <camelia> nqp-moarvm: OUTPUT«foo␤»

[04:06] <timotimo> seems like it's just the postcircumfix:<[ ]> in nqp that just compiles down to atpos rather than atpos_*

[04:08] <dalek> rakudo/glr: 86dbc33 | TimToady++ | src/core/Hash.pm:

[04:08] <dalek> rakudo/glr: fix .perl output of object hashes

[04:08] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/86dbc33d20

[04:10] <timotimo> m: my ($first, $second) = "hello/world".split: "/"; say $first; say $second

[04:10] <camelia> rakudo-moar 5fb81f: OUTPUT«hello␤world␤»

[04:10] <GLRelia> rakudo-moar 7591fc: OUTPUT«hello␤world␤»

[04:13] <timotimo> m: my @exploded; my ($first, $second) = "hello/world,friends,mom".split: "/"; my @seconds; if $second.defined && $second.chars { @seconds = $second.split: ","; }; @exploded.push: { name => $first, seconds => @seconds }; say @exploded

[04:13] <camelia> rakudo-moar 5fb81f: OUTPUT«name => hello, seconds => world friends mom␤»

[04:13] <GLRelia> rakudo-moar 7591fc: OUTPUT«name => helloseconds => [world friends mom]␤»

[04:14] <timotimo> m: my @exploded; my ($first, $second) = "hello/world,friends,mom".split: "/"; my @seconds; if $second.defined && $second.chars { @seconds = $second.split: ","; }; @exploded.push: { name => $first, seconds => @seconds }; say @exploded; @seconds = "frob,boz,wop".split(","); @exploded[0]<seconds>.push: |@seconds; say @exploded.perl

[04:14] <camelia> rakudo-moar 5fb81f: OUTPUT«name => hello, seconds => world friends mom␤[{:name("hello"), :seconds(["frob", "boz", "wop", "frob", "boz", "wop"])}]<>␤»

[04:14] <GLRelia> rakudo-moar 7591fc: OUTPUT«name => helloseconds => [world friends mom]␤Cannot modify an immutable Any␤  in block <unit> at /tmp/VsNRkO_exv:1␤␤»

[04:15] <timotimo> m: my @exploded; my ($first, $second) = "hello/world,friends,mom".split: "/"; my @seconds; if $second.defined && $second.chars { @seconds = $second.split: ","; }; say @exploded.WHAT; @exploded.push: { name => $first, seconds => @seconds }; say @exploded; @seconds = "frob,boz,wop".split(","); @exploded[0]<seconds>.push: |@seconds; say @exploded.perl

[04:15] <camelia> rakudo-moar 5fb81f: OUTPUT«(Array)␤name => hello, seconds => world friends mom␤[{:name("hello"), :seconds(["frob", "boz", "wop", "frob", "boz", "wop"])}]<>␤»

[04:15] <GLRelia> rakudo-moar 7591fc: OUTPUT«(Array)␤name => helloseconds => [world friends mom]␤Cannot modify an immutable Any␤  in block <unit> at /tmp/nI_DMbumav:1␤␤»

[04:15] <timotimo> m: my @seconds = "world,friends,mom".split(","); @seconds.push: |("a,b,c".split(","))

[04:15] <camelia> rakudo-moar 5fb81f: ( no output )

[04:15] <GLRelia> rakudo-moar 7591fc: ( no output )

[04:15] <timotimo> m: my @seconds = "world,friends,mom".split(","); @seconds.push: |("a,b,c".split(",")); say @seconds

[04:15] <camelia> rakudo-moar 5fb81f: OUTPUT«world friends mom a b c␤»

[04:15] <GLRelia> rakudo-moar 7591fc: OUTPUT«worldfriendsmomabc␤»

[04:16] <timotimo> i want spaces back :|

[04:17] <timotimo> m: my @exploded; my ($first, $second) = "hello/world,friends,mom".split: "/"; my @seconds; if $second.defined && $second.chars { @seconds = $second.split: ","; }; say @exploded.WHAT; @exploded.push: { name => $first, seconds => @seconds }; say @exploded.perl; @seconds = "frob,boz,wop".split(","); @exploded[0]<seconds>.push: |@seconds; say @exploded.perl

[04:17] <camelia> rakudo-moar 5fb81f: OUTPUT«(Array)␤[{:name("hello"), :seconds(["world", "friends", "mom"])}]<>␤[{:name("hello"), :seconds(["frob", "boz", "wop", "frob", "boz", "wop"])}]<>␤»

[04:17] <GLRelia> rakudo-moar 86dbc3: OUTPUT«(Array)␤[:name("hello"), :seconds($["world", "friends", "mom"])]␤Cannot modify an immutable Any␤  in block <unit> at /tmp/Y08mm8sRYq:1␤␤»

[04:18] <timotimo> m: my @exploded; my ($first, $second) = "hello/world,friends,mom".split: "/"; my @seconds; if $second.defined && $second.chars { @seconds = $second.split: ","; }; say @exploded.WHAT; @exploded.push: { name => $first, seconds => @seconds }; say @exploded.perl; @seconds = "frob,boz,wop".split(","); say @exploded[0].WHAT

[04:18] <camelia> rakudo-moar 5fb81f: OUTPUT«(Array)␤[{:name("hello"), :seconds(["world", "friends", "mom"])}]<>␤(Hash)␤»

[04:18] <GLRelia> rakudo-moar 86dbc3: OUTPUT«(Array)␤[:name("hello"), :seconds($["world", "friends", "mom"])]␤(Pair)␤»

[04:18] <timotimo> oh, whoops?

[04:18] <timotimo> i hadn't noticed

[04:18] <timotimo> m: my @exploded; my ($first, $second) = "hello/world,friends,mom".split: "/"; my @seconds; if $second.defined && $second.chars { @seconds = $second.split: ","; }; say @exploded.WHAT; @exploded.push: ${ name => $first, seconds => @seconds }; say @exploded.perl; @seconds = "frob,boz,wop".split(","); say @exploded[0].WHAT

[04:18] *** aborazmeh left
[04:18] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/eOhhwFNMgJ␤Unsupported use of ${ name => $first, seconds => @seconds }; in Perl 6 please use $( name => $first, seconds => @seconds )␤at /tmp/eOhhwFNMgJ:1␤------> 3${ name => $first, seconds => @seconds …»

[04:18] <GLRelia> rakudo-moar 86dbc3: OUTPUT«(Array)␤[{:name("hello"), :seconds($["world", "friends", "mom"])},]␤(Hash)␤»

[04:18] <timotimo> m: my @exploded; my ($first, $second) = "hello/world,friends,mom".split: "/"; my @seconds; if $second.defined && $second.chars { @seconds = $second.split: ","; }; say @exploded.WHAT; @exploded.push: { name => $first, seconds => @seconds }.item; say @exploded.perl; @seconds = "frob,boz,wop".split(","); say @exploded[0].WHAT

[04:18] <camelia> rakudo-moar 5fb81f: OUTPUT«(Array)␤[{:name("hello"), :seconds(["world", "friends", "mom"])}]<>␤(Hash)␤»

[04:18] <GLRelia> rakudo-moar 86dbc3: OUTPUT«(Array)␤[{:name("hello"), :seconds($["world", "friends", "mom"])},]␤(Hash)␤»

[04:19] <timotimo> this may help perl6-bench quite a bit

[04:19] <timotimo> with a simple .item in the right place, bench list-checkouts is happy again

[04:21] <ShimmerFairy> nqp-m: my @a := nqp::list_s(); nqp::push_s(@a, "foo"); say(nqp::atpos_s(@a, 0));

[04:21] <camelia> nqp-moarvm: OUTPUT«foo␤»

[04:21] <timotimo> ohai ShimmerFairy 

[04:21] *** kaare__ joined
[04:21] <timotimo> how are you today?

[04:21] <ShimmerFairy> good :)

[04:21] <timotimo> i'm glad to hear that!

[04:21] <dalek> perl6-bench: 7c9e687 | timotimo++ | lib/Bench/Handling.pm6:

[04:21] <dalek> perl6-bench: make bench readier for the post-GLR world

[04:21] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/7c9e687ec5

[04:24] *** tinyblak left
[04:24] <dalek> perl6-bench: b2ca0e1 | timotimo++ | / (3 files):

[04:24] <dalek> perl6-bench: kebapcase some deprecated thingies

[04:24] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b2ca0e1ddb

[04:25] *** bin_005_l joined
[04:26] <timotimo> with that and a "git pull" inside File-Find, i can now run bench without deprecation warnings

[04:28] *** bin_005 left
[04:28] <colomon> o/

[04:29] <dalek> perl6-bench: 56b7bbf | timotimo++ | microbenchmarks.pl:

[04:29] <dalek> perl6-bench: fix one more constant 1 in sink context

[04:29] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/56b7bbf7e3

[04:36] <timotimo> m: my @show = " ", "X", "O"; my @grid = [ (0, 1, 2) xx 5 ] xx 5; say @show[@grid[0]]

[04:36] <camelia> rakudo-moar 5fb81f: OUTPUT«(Any)␤»

[04:36] <GLRelia> rakudo-moar 86dbc3: OUTPUT«(Any)␤»

[04:36] <timotimo> m: my @show = " ", "X", "O"; my @grid = [ (0, 1, 2) xx 5 ] xx 5; say @show[@grid[0].list]

[04:36] <camelia> rakudo-moar 5fb81f: OUTPUT«  X O   X O   X O   X O   X O␤»

[04:36] <GLRelia> rakudo-moar 86dbc3: OUTPUT«(Any)(Any)(Any)(Any)(Any)␤»

[04:36] <timotimo> how do we do this in glr-land?

[04:36] <timotimo> m: my @show = " ", "X", "O"; my @grid = [ (0, 1, 2) xx 5 ] xx 5; say @show[|@grid[0]]

[04:36] <GLRelia> rakudo-moar 86dbc3: OUTPUT«(Any)(Any)(Any)(Any)(Any)␤»

[04:36] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KSsnm4ChdE␤Arg-flattening | is only valid in an argument list␤at /tmp/KSsnm4ChdE:1␤------> 3d = [ (0, 1, 2) xx 5 ] xx 5; say @show[|7⏏5@grid[0]]␤»

[04:36] <timotimo> m: my @show = " ", "X", "O"; my @grid = [ (0, 1, 2) xx 5 ] xx 5; say @grid[0].perl; say @show[@grid[0]]

[04:36] <camelia> rakudo-moar 5fb81f: OUTPUT«[0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]␤(Any)␤»

[04:36] <GLRelia> rakudo-moar 86dbc3: OUTPUT«[(0, 1, 2), (0, 1, 2), (0, 1, 2), (0, 1, 2), (0, 1, 2)]␤(Any)␤»

[04:36] <timotimo> oh, that's why

[04:37] <timotimo> m: my @show = " ", "X", "O"; my @grid = [ |(0, 1, 2) xx 5 ] xx 5; say @grid[0].perl; say @show[@grid[0]]

[04:37] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Ix1UgagV4H␤Arg-flattening | is only valid in an argument list␤at /tmp/Ix1UgagV4H:1␤------> 3my @show = " ", "X", "O"; my @grid = [ |7⏏5(0, 1, 2) xx 5 ] xx 5; say @grid[0].perl␤»

[04:37] <GLRelia> rakudo-moar 86dbc3: OUTPUT«[0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]␤(Any)␤»

[04:37] <timotimo> m: my @show = " ", "X", "O"; my @grid = [ |(0, 1, 2) xx 5 ] xx 5; say @grid[0].perl; say @show[@grid[0].list]

[04:37] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/4YwQewXura␤Arg-flattening | is only valid in an argument list␤at /tmp/4YwQewXura:1␤------> 3my @show = " ", "X", "O"; my @grid = [ |7⏏5(0, 1, 2) xx 5 ] xx 5; say @grid[0].perl␤»

[04:37] <GLRelia> rakudo-moar 86dbc3: OUTPUT«[0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]␤ XO XO XO XO XO␤»

[04:37] <timotimo> m: my @show = " ", "X", "O"; my @grid = [ flat (0, 1, 2) xx 5 ] xx 5; say @grid[0].perl; say @show[@grid[0].list]

[04:37] <camelia> rakudo-moar 5fb81f: OUTPUT«[0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]␤  X O   X O   X O   X O   X O␤»

[04:37] <GLRelia> rakudo-moar 86dbc3: OUTPUT«[0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]␤ XO XO XO XO XO␤»

[04:38] <dalek> rakudo/glr: c3f975b | TimToady++ | src/Perl6/Grammar.nqp:

[04:38] <dalek> rakudo/glr: deconfuse shaped declarations from contextualizers

[04:38] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/c3f975ba5f

[04:38] <dalek> rakudo/glr: b05b863 | TimToady++ | src/core/Hash.pm:

[04:38] <dalek> rakudo/glr: use declarative syntax for object hash .perl

[04:38] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/b05b863d7d

[04:41] <dalek> roast/glr: 3b3c42d | TimToady++ | S29-conversions/hash.t:

[04:41] <dalek> roast/glr: Z needs flat now

[04:41] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/3b3c42dae5

[04:42] <dalek> perl6-bench: 596ec1c | timotimo++ | perl6/rc-forest-fire (2 files):

[04:42] <dalek> perl6-bench: the forest-fire benchmarks now work properly post-glr as well

[04:42] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/596ec1c03b

[04:45] <dalek> perl6-bench: cb96089 | timotimo++ | microbenchmarks.pl:

[04:45] <dalek> perl6-bench: give more X operators the flat treatment

[04:45] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/cb96089212

[04:45] *** tinyblak joined
[04:46] <timotimo> re-running the benchmarks now that they are semantically correct(er)

[04:50] *** tinyblak left
[04:50] <timotimo> i should time if "for ^1000 X ^1000 -> $i, $j { ... }" is drastically faster than "for flat(^1000 X ^1000) -> $i, $j { ... }", otherwise the benchmarks will be unfairly impacted by this compatibility code :|

[04:50] <timotimo> m: my $starttime = now; (^1000 X ^1000).list; say now - $starttime

[04:50] <GLRelia> rakudo-moar b05b86: OUTPUT«0.0084918␤»

[04:50] <timotimo> m: my $starttime = now; flat(^1000 X ^1000).list; say now - $starttime

[04:50] <GLRelia> rakudo-moar b05b86: OUTPUT«0.00877925␤»

[04:50] <timotimo> did someone kick out camelia? o_O

[04:51] <timotimo> oh, glrelia just doesn't iterate anything there

[04:51] <camelia> rakudo-moar 5fb81f: OUTPUT«16.092873␤»

[04:51] <camelia> rakudo-moar 5fb81f: OUTPUT«16.3938472␤»

[04:51] <timotimo> m: my $starttime = now; my int $sum; for flat(^100 X ^100) -> $i, $j { $sum += $i + $j }; say now - $starttime

[04:51] <camelia> rakudo-moar 5fb81f: OUTPUT«0.2192266␤»

[04:51] <GLRelia> rakudo-moar b05b86: OUTPUT«3.3929676␤»

[04:51] *** khw left
[04:51] <timotimo> m: my $starttime = now; my int $sum; for (^100 X ^100) -> $i, $j { $sum += $i + $j }; say now - $starttime

[04:51] <camelia> rakudo-moar 5fb81f: OUTPUT«0.21331947␤»

[04:51] <GLRelia> rakudo-moar b05b86: OUTPUT«1.4659768␤»

[04:52] <timotimo> OK, so no difference on camelia, but the base hit of using X to iterate into two vars is SUPER BAD

[04:52] <timotimo> m: my $starttime = now; my int $sum; for (^100 X ^100) -> ($i, $j) { $sum += $i + $j }; say now - $starttime

[04:52] <camelia> rakudo-moar 5fb81f: OUTPUT«Too few positionals passed; expected 2 arguments but got 0 in sub-signature␤  in block <unit> at /tmp/KvFmuPQlUJ:1␤␤»

[04:52] <GLRelia> rakudo-moar b05b86: OUTPUT«2.10549970␤»

[04:53] <timotimo> that's a tiny bit better than flattening it, at least, but still ~10x slower than pre-glr

[04:55] <dalek> rakudo/glr: 4f17b9c | TimToady++ | src/core/Hash.pm:

[04:55] <dalek> rakudo/glr: use declarative syntax for typed hash .perl

[04:55] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/4f17b9cc0a

[04:55] <dalek> roast/glr: 7b4a9ac | TimToady++ | S32-hash/perl.t:

[04:55] <dalek> roast/glr: check against new .perl for weird hashes

[04:55] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/7b4a9ac808

[04:55] *** breinbaas joined
[05:01] *** rurban joined
[05:02] *** llfourn joined
[05:06] <dalek> rakudo/glr: 1afdc6c | TimToady++ | src/core/Hash.pm:

[05:06] <dalek> rakudo/glr: weird Hash.perl should also allow self-ref

[05:06] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/1afdc6c5e6

[05:06] *** llfourn left
[05:07] <TimToady> m: say Hash[Any,Any].new((:a, :!b)).perl

[05:07] <camelia> rakudo-moar 5fb81f: OUTPUT«Hash[Any,Any].new("a" => Bool::True, "b" => Bool::False)␤»

[05:07] <GLRelia> rakudo-moar 4f17b9: OUTPUT«(my Any %{Any} = :a, :!b)␤»

[05:09] <TimToady> .tell lizmat I fixed yer Hash.perls

[05:09] <yoleaux> TimToady: I'll pass your message to lizmat.

[05:10] *** tinyblak joined
[05:14] *** colomon left
[05:14] *** colomon joined
[05:22] *** prevost left
[05:26] *** laouji joined
[05:28] <moritz> m: my %h; %h<a> = %h; say %h.perl

[05:28] <GLRelia> rakudo-moar 1afdc6: OUTPUT«(my \Hash_140079533019120 = {:a(Hash_140079533019120)})␤»

[05:28] <moritz> m: my %h; %h<a> = %h; say EVAL(%h.perl).perl

[05:28] <GLRelia> rakudo-moar 1afdc6: OUTPUT«{:a(Mu)}␤»

[05:28] *** laouji left
[05:28] <camelia> rakudo-moar 5fb81f: OUTPUT«(timeout)»

[05:28] <camelia> rakudo-moar 5fb81f: OUTPUT«(timeout)»

[05:29] <colomon> m: my @array = ("o", "k"); print @array

[05:29] <camelia> rakudo-moar 5fb81f: OUTPUT«ok»

[05:29] <GLRelia> rakudo-moar 1afdc6: OUTPUT«ok»

[05:29] <colomon> m: my $array-ref = ("o", "k"); print $array-ref

[05:30] <camelia> rakudo-moar 5fb81f: OUTPUT«o k»

[05:30] <GLRelia> rakudo-moar 1afdc6: OUTPUT«o k»

[05:31] *** rurban left
[05:40] <TimToady> after sleeping on it, I'm thinking the best way forward on say is to put spaces between top-level arguments, and then the one-arg rule doens't matter

[05:40] <colomon> is t/spec/S16-io/print.t failing for everyone on GLR or just me?  the $array-ref one above is failing for me, yet looks perfect here

[05:40] <moritz> colomon: recompiling now to check

[05:41] <colomon> moritz++

[05:41] <TimToady> breakfast &

[05:42] <moritz> colomon: tests 4 and 12 fail here

[05:42] <colomon> moritz: same here

[05:42] <colomon> m: my $array-ref = ("o", "k"); print $array-ref

[05:42] <camelia> rakudo-moar 5fb81f: OUTPUT«o k»

[05:42] <GLRelia> rakudo-moar 1afdc6: OUTPUT«o k»

[05:43] <colomon> oh, is it also failing on nom? 

[05:43] <colomon> it looks like it wants “ok” for that answer

[05:44] <JimmyZ> m: my @array = ("o", "k"); print @array

[05:44] <GLRelia> rakudo-moar 1afdc6: OUTPUT«ok»

[05:44] <camelia> rakudo-moar 5fb81f: OUTPUT«ok»

[06:03] *** tinyblak left
[06:03] *** tinyblak joined
[06:04] <ShimmerFairy> TimToady: I'm not so sure I'd agree with the space separation, it feels like a bad idea to have a default separator you can't get rid of when it's not desired. There is [~] to not have spaces, of course, but on the other hand you also have .join(" ") to get spaces in the first place :)

[06:04] *** cognominal left
[06:05] *** domidumont joined
[06:08] <ShimmerFairy> Also, if we go with spaces by default instead of calling .gist on the list object, then that could cause some issues for any custom list types that have a non-standard .gist (namely, one not built around space-separated values)

[06:10] *** domidumont left
[06:10] *** Sqirrel left
[06:11] *** domidumont joined
[06:12] <ShimmerFairy> &say definitely seems like one of those functions that will want to treat lists as singular objects more often than not. I'm starting to get the feeling that function signatures need some way of choosing to go by single-arg rule (either decided by the caller or callee), since it appears to be causing quite a bit of struggle.

[06:12] *** diana_olhovik_ joined
[06:17] *** mr-foobar joined
[06:20] *** cognominal joined
[06:22] *** mr-foobar left
[06:23] *** rangerprice left
[06:23] *** tinyblak left
[06:25] *** mr-foobar joined
[06:28] *** domidumont left
[06:29] *** domidumont joined
[06:34] *** ab6tract joined
[06:35] <ab6tract> m: sub ret-array { [6,7,8] }; my $f = ret-array; say $f

[06:35] <camelia> rakudo-moar 5fb81f: OUTPUT«6 7 8␤»

[06:35] <GLRelia> rakudo-moar 1afdc6: OUTPUT«678␤»

[06:35] <ab6tract> m: sub ret-array { [6,7,8] }; my $f = ret-array; say $f.perl

[06:35] <camelia> rakudo-moar 5fb81f: OUTPUT«[6, 7, 8]␤»

[06:35] <GLRelia> rakudo-moar 1afdc6: OUTPUT«[6, 7, 8]␤»

[06:35] <ab6tract> *phew* 

[06:35] <ab6tract> that haunted my dreams last night :)

[06:36] <ab6tract> m: sub ret-array { [6,7,8] }; my ($f,$g,$h) = ret-array; say $f.perl

[06:36] <camelia> rakudo-moar 5fb81f: OUTPUT«[6, 7, 8]␤»

[06:36] <GLRelia> rakudo-moar 1afdc6: OUTPUT«6␤»

[06:40] *** ab6tract left
[06:40] *** erdic left
[06:49] *** erdic joined
[06:54] <TimToady> otoh, .join is 5 characters shorter than .join(" ")

[06:55] * TimToady --> venue

[06:59] *** itz joined
[07:01] <timotimo> it feels like i got a little bit of sleep in this time

[07:02] *** rurban joined
[07:03] *** llfourn joined
[07:03] *** mephinet joined
[07:04] *** BenGoldberg left
[07:07] *** llfourn left
[07:08] *** laben joined
[07:09] <laben> hello p6'ers

[07:14] <colomon> o/

[07:17] <colomon> ooo, finally got a complete smoke test run!

[07:18] * colomon is off to the hackathon

[07:18] *** colomon left
[07:18] <nine> Oh I figured out why seq.t is failing.

[07:19] <nine> What I'm not sure about is if it's the test or List.STORE that's wrong. I'm inclined to put the blame on the test.

[07:21] <nine> JimmyZ: you here?

[07:21] <timotimo> i hope i won't miss breakfast =o

[07:21] <nine> timotimo: well, there's still coffee and food but I fear no company

[07:21] <timotimo> i don't like coffee

[07:21] <timotimo> i only care for food

[07:22] <timotimo> http://t.h8.lv/p6bench/2015-08-29-nom_vs_glr.html - benchmark run updated

[07:22] *** itz left
[07:22] <nine> jnthn: you awake? Your session starts in 10 minutes

[07:22] <dalek> rakudo/glr: 741d14a | TimToady++ | src/core/Slip.pm:

[07:22] <dalek> rakudo/glr: treat slip() as undefined

[07:22] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/741d14aa8e

[07:23] <timotimo> nine: want to figure out why for_empty is almost 10x slower on glr than on nom? :)

[07:23] <nine> for_empty?

[07:24] <timotimo> one of those benchmarks

[07:25] <timotimo> it's basically a for loop over (1 .. SCALE) { }

[07:25] <timotimo> oh

[07:25] <timotimo> but let me check out the ast and optimized ast first

[07:25] <timotimo> ah, yeah

[07:25] <timotimo> we've lost the optimization that turns for over a range into a while loop

[07:25] *** colomon joined
[07:26] <TimToady> m: say (if 0 { 1 }).defined

[07:26] <camelia> rakudo-moar 5fb81f: OUTPUT«False␤»

[07:26] <GLRelia> rakudo-moar 1afdc6: OUTPUT«True␤»

[07:27] *** lizmat joined
[07:27] <moritz> m: say slip().defined

[07:27] <GLRelia> rakudo-moar 1afdc6: OUTPUT«True␤»

[07:27] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/BAC_prljQD␤Undeclared routine:␤    slip used at line 1. Did you mean 'flip'?␤␤»

[07:27] <moritz> m: say slip(1).defined

[07:27] <GLRelia> rakudo-moar 1afdc6: OUTPUT«True␤»

[07:27] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Xnc5EqXozo␤Undeclared routine:␤    slip used at line 1. Did you mean 'flip'?␤␤»

[07:31] <TimToady> m: say (if 0 { 1 }).defined

[07:31] <camelia> rakudo-moar 5fb81f: OUTPUT«False␤»

[07:31] <GLRelia> rakudo-moar 741d14: OUTPUT«False␤»

[07:34] *** ab6tract joined
[07:35] <colomon> o/

[07:35] <[ptc]> \o

[07:35] <hoelzro> o/ from the salon @ SPW

[07:35] <timotimo> breakfast-time

[07:35] <hoelzro> it's breakfast...it's breakfast time

[07:37] <JimmyZ> nine: I am here

[07:38] <JimmyZ> nine: but I think it test is right, TimToady may know it better :)

[07:38] <nine> JimmyZ: seq.t is testing ($x, @a) = ('xxx', (1,2,3).map(*.Int)) and expecting @a to contain the mapped values instead of a seq. Why?

[07:38] <[Tux]> glr + panda = fail (current checkout)

[07:38] <[Tux]> ==> Bootstrapping Panda

[07:38] <[Tux]> resolve stage failed for File::Find: Dependency         True is not present in the module ecosystem

[07:39] <JimmyZ> nine: because the  first test works

[07:40] <[Tux]> NOM:

[07:40] <[Tux]> test             50000    43.709    43.616

[07:40] <[Tux]> test-t           50000    45.639    45.546

[07:40] <nine> JimmyZ: the first test is assignment of a single Iterable to a list. Under the single-arg-rule we flatten that. The other tests assign lists of multiple values to lists. We're not supposed to flatten those.

[07:40] <JimmyZ> nine: TimToady is here :P

[07:41] *** rurban left
[07:42] *** FROGGS joined
[07:42] *** Ven joined
[07:42] *** darutoko joined
[07:42] <lizmat> good *, #perl6

[07:42] <yoleaux> 05:09Z <TimToady> lizmat: I fixed yer Hash.perls

[07:42] <lizmat> TimToady++  :-)

[07:42] <FROGGS> o/

[07:43] <colomon> \o

[07:43] *** virtualsue joined
[07:43] <FROGGS> most of you sitting in the Salon?

[07:43] <nine> Outside

[07:43] <colomon> lizmat, nine, and I are outside

[07:43] <lizmat> nine colomon lizmat sitting outside

[07:43] <JimmyZ> m: my ($x, @b)  = ('xxx', (1,2,3).map(*.Int)); say @b.WHAT

[07:43] <camelia> rakudo-moar 5fb81f: OUTPUT«(Array)␤»

[07:43] <GLRelia> rakudo-moar 741d14: OUTPUT«(Array)␤»

[07:43] <lizmat> :-)

[07:44] <[Tux]> m: class C{method foo{gather { take 3..Inf}}};C.new.foo[^9].perl.say

[07:44] <camelia> rakudo-moar 5fb81f: OUTPUT«(3, 4, 5, 6, 7, 8, 9, 10, 11)␤»

[07:44] <GLRelia> rakudo-moar 741d14: OUTPUT«(3..Inf)␤»

[07:44] <FROGGS> we (itz, virtualsue, ven and me) are upstairs

[07:44] <laben> |Tux|: checking out panda on glr again today, it has become my stated mission to make it work and so shall be it

[07:44] <JimmyZ> m: my ($x, @b)  = ('xxx', (1,2,3).map(*.Int)); say @b

[07:44] <camelia> rakudo-moar 5fb81f: OUTPUT«1 2 3␤»

[07:44] <GLRelia> rakudo-moar 741d14: OUTPUT«(1 2 3)␤»

[07:45] <dalek> roast/glr: a9bc960 | (Stefan Seifert)++ | S32-list/seq.t:

[07:45] <dalek> roast/glr: Fix seq.t to actually adhere to the single-arg-rule

[07:45] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/a9bc96025c

[07:45] *** itz joined
[07:46] <colomon> m: my $s = <a b c>.set; say $s.perl; say ($s (&) $s).perl

[07:46] <camelia> rakudo-moar 5fb81f: OUTPUT«Method 'set' not found for invocant of class 'Parcel'␤  in block <unit> at /tmp/iS1U3Meeow:1␤␤»

[07:46] <GLRelia> rakudo-moar 741d14: OUTPUT«Method 'set' not found for invocant of class 'List'␤  in block <unit> at /tmp/Ej1g3DzSYN:1␤␤»

[07:46] <colomon> m: my $s = <a b c>.Set; say $s.perl; say ($s (&) $s).perl

[07:46] <GLRelia> rakudo-moar 741d14: OUTPUT«set("a","c","b")␤set("a","c","b")␤»

[07:46] <camelia> rakudo-moar 5fb81f: OUTPUT«set("a","c","b")␤set("a","c","b")␤»

[07:46] <JimmyZ> m: my ($x, @b)  = ('xxx', flat (1,2,3).map(*.Int)); say @b

[07:46] <camelia> rakudo-moar 5fb81f: OUTPUT«1 2 3␤»

[07:46] <GLRelia> rakudo-moar 741d14: OUTPUT«(1 2 3)␤»

[07:47] <JimmyZ> m: my ($x, @b)  = ('xxx', flat (1,2,3).map(*.Int).list); say @b

[07:47] <camelia> rakudo-moar 5fb81f: OUTPUT«1 2 3␤»

[07:47] <GLRelia> rakudo-moar 741d14: OUTPUT«(1 2 3)␤»

[07:47] <FROGGS> nine: were there any discussions about NEXT/LAST phasers already?

[07:48] <ab6tract> m: my ($x, @b)  = 'xxx', flat (1,2,3).map(*.Int); say @b

[07:48] <camelia> rakudo-moar 5fb81f: OUTPUT«1 2 3␤»

[07:48] <GLRelia> rakudo-moar 741d14: OUTPUT«(1 2 3)␤»

[07:48] <ab6tract> hmmm.. was wondering if those parens made the RHS a single-arg

[07:48] <nine> FROGGS: not that I'm aware of. jnthn++ is teaching Perl 6 right now

[07:49] <FROGGS> nine: yeah, seen that a few minutes ago... well, then I try to make my patch cleaner so it becomes applyable eventually

[07:49] <FROGGS> but first... spectest

[07:49] <JimmyZ> m: my (@b)  = (1,2,3).map(*.Int); say @b

[07:49] <camelia> rakudo-moar 5fb81f: OUTPUT«1 2 3␤»

[07:49] <GLRelia> rakudo-moar 741d14: OUTPUT«123␤»

[07:51] <JimmyZ> m: my (@b, $x)  = (1,2,3).map(*.Int), 'xxxx'; say @b

[07:51] <camelia> rakudo-moar 5fb81f: OUTPUT«1 2 3 xxxx␤»

[07:51] <GLRelia> rakudo-moar 741d14: OUTPUT«(1 2 3)xxxx␤»

[07:52] <colomon> m: my $s = set < a b c >; say $s ∪ $s

[07:52] <camelia> rakudo-moar 5fb81f: OUTPUT«set(a, c, b)␤»

[07:52] <GLRelia> rakudo-moar 741d14: OUTPUT«(a c b) => True(a c b) => True␤»

[07:53] <colomon> > my $s = set < a b c >; say $s ∪ $s

[07:53] <colomon> (a c b) => True(a c b) => True

[07:54] *** Ven left
[07:54] <JimmyZ> m: my (@b, $x)  = (1,2,3).map(*.Int), 'xxxx'; say $x # how to assign the value to $x?

[07:54] <camelia> rakudo-moar 5fb81f: OUTPUT«(Any)␤»

[07:54] <GLRelia> rakudo-moar 741d14: OUTPUT«(Any)␤»

[07:55] <FROGGS> m: my (@b, $x)  = [(1,2,3).map(*.Int)], 'xxxx'; say $x # how to assign the value to $x?

[07:55] <camelia> rakudo-moar 5fb81f: OUTPUT«(Any)␤»

[07:55] <GLRelia> rakudo-moar 741d14: OUTPUT«(Any)␤»

[07:55] <FROGGS> m: my (@b, $x)  = [[(1,2,3).map(*.Int)], 'xxxx']; say $x # how to assign the value to $x?

[07:55] <camelia> rakudo-moar 5fb81f: OUTPUT«(Any)␤»

[07:55] <GLRelia> rakudo-moar 741d14: OUTPUT«(Any)␤»

[07:55] <FROGGS> m: my (@b, $x)  = [[(1,2,3).map(*.Int)], 'xxxx']; say @b

[07:55] <camelia> rakudo-moar 5fb81f: OUTPUT«1 2 3 xxxx␤»

[07:55] <GLRelia> rakudo-moar 741d14: OUTPUT«[1 2 3]xxxx␤»

[07:55] <FROGGS> no idea

[07:56] <JimmyZ> m: my (@b, $x)  = $((1,2,3).map(*.Int)), 'xxxx'; say $x # how to assign the value to $x?

[07:56] <camelia> rakudo-moar 5fb81f: OUTPUT«(Any)␤»

[07:56] <GLRelia> rakudo-moar 741d14: OUTPUT«(Any)␤»

[07:56] <JimmyZ> m: my (@b, $x)  = $[(1,2,3).map(*.Int)], 'xxxx'; say $x # how to assign the value to $x?

[07:56] <camelia> rakudo-moar 5fb81f: OUTPUT«(Any)␤»

[07:56] <GLRelia> rakudo-moar 741d14: OUTPUT«(Any)␤»

[07:56] *** espadrine joined
[07:56] <lizmat> m: my $s = set < a b c >; say $s (|) $s

[07:56] <camelia> rakudo-moar 5fb81f: OUTPUT«set(a, c, b)␤»

[07:56] <GLRelia> rakudo-moar 741d14: OUTPUT«(a c b) => True(a c b) => True␤»

[07:57] <JimmyZ> nine: ^^

[07:57] <colomon> m: my $s = set < a b c >; say $s.Set(:view).keys

[07:57] <camelia> rakudo-moar 5fb81f: OUTPUT«a c b␤»

[07:57] <GLRelia> rakudo-moar 741d14: OUTPUT«acb␤»

[07:58] <colomon> m: my $s = set <a b c>;($s, $s).map( { .say } )

[07:58] <GLRelia> rakudo-moar 741d14: OUTPUT«a => Truec => Trueb => True␤a => Truec => Trueb => True␤»

[07:58] <camelia> rakudo-moar 5fb81f: OUTPUT«set(a, c, b)␤set(a, c, b)␤»

[07:58] <nine> JimmyZ: you can't and you never have been able to. An array on the left hand side will slurp all the remaining right hand isde

[07:58] *** Ven joined
[07:59] <[ptc]> FROGGS: wow, you're fast :-)  Thanks for the merge!

[07:59] <nine> JimmyZ: has always been that way, even in Perl 5

[07:59] <timotimo> hoelzro: you know when i'm down to the lobby it's time for breakfast that's why it's called breakfast lobby UUH!

[07:59] <FROGGS> [ptc]: thanks for the patch :o)

[07:59] <colomon> m: my $s = set <a b c>;($s, $s).map( { .perl.say } )

[07:59] <camelia> rakudo-moar 5fb81f: OUTPUT«set("a","c","b")␤set("a","c","b")␤»

[07:59] <GLRelia> rakudo-moar 741d14: OUTPUT«set("a","c","b")␤set("a","c","b")␤»

[07:59] *** xfix joined
[08:00] * timotimo heads out

[08:00] <[ptc]> FROGGS: my pleasure :-)  Hopefully I'll get a few more out today

[08:00] <FROGGS> :o)

[08:00] <timotimo> head out-ah, head on out-ah! head out-ah, head on out-ah!

[08:00] <colomon> m: my $s = set <a b c>;($s, $s).map( { .WHAT.say } )

[08:00] <camelia> rakudo-moar 5fb81f: OUTPUT«(Set)␤(Set)␤»

[08:00] <GLRelia> rakudo-moar 741d14: OUTPUT«(Set)␤(Set)␤»

[08:00] <FROGGS> timotimo: :D

[08:00] <timotimo> get to the venue (head on out-ah!) like a perl6 dev (head on out-ah!)

[08:02] <dalek> roast/glr: 6bb3a0a | (Stefan Seifert)++ | S04-statements/for.t:

[08:02] <dalek> roast/glr: Remove obsolete todo marker. We can iterate growing arrays now :)

[08:02] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/6bb3a0ae94

[08:05] <colomon> m: my $s = set <a b c>;($s, $s).map(*.Set(:view).keys).perl.say

[08:05] <camelia> rakudo-moar 5fb81f: OUTPUT«("a", "c", "b", "a", "c", "b")␤»

[08:05] <GLRelia> rakudo-moar 741d14: OUTPUT«(("a", "c", "b").Seq, ("a", "c", "b").Seq).Seq␤»

[08:07] <colomon> m: my $s = set <a b c>;($s, $s).map(flat *.Set(:view).keys).perl.say

[08:07] <camelia> rakudo-moar 5fb81f: OUTPUT«Cannot call map(Set: Set, WhateverCode); none of these signatures match:␤    ($: Whatever, *%_)␤    ($: &block, :$label, *%_)␤  in block <unit> at /tmp/1IBoSMnfHS:1␤␤»

[08:07] <GLRelia> rakudo-moar 741d14: OUTPUT«Cannot call map(List: List); none of these signatures match:␤    ($: &block, :$label, *%_)␤    (HyperIterable:D $: &block, :$label, *%_)␤  in block <unit> at /tmp/demEm_WqkF:1␤␤»

[08:07] <colomon> m: my $s = set <a b c>;($s, $s).map({flat $_.Set(:view).keys}).perl.say

[08:07] <camelia> rakudo-moar 5fb81f: OUTPUT«("a", "c", "b", "a", "c", "b")␤»

[08:07] <GLRelia> rakudo-moar 741d14: OUTPUT«(("a", "c", "b"), ("a", "c", "b")).Seq␤»

[08:08] <colomon> m: my $s = set <a b c>;($s, $s).map({ $_.Set(:view).keys}).flat.perl.say

[08:09] <camelia> rakudo-moar 5fb81f: OUTPUT«("a", "c", "b", "a", "c", "b")␤»

[08:09] <GLRelia> rakudo-moar 741d14: OUTPUT«("a", "c", "b", "a", "c", "b").Seq␤»

[08:09] <colomon> m: my $s = set <a b c>;($s, $s).map({ $_.Set(:view).keys}.lsip)..perl.say

[08:09] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/oDDny6drzM␤Undeclared routine:␤    perl used at line 1␤␤»

[08:09] <GLRelia> rakudo-moar 741d14: OUTPUT«5===SORRY!5=== Error while compiling /tmp/FAfAOr2mNk␤Undeclared routine:␤    perl used at line 1␤␤»

[08:09] <colomon> m: my $s = set <a b c>;($s, $s).map({ $_.Set(:view).keys}.slip)..perl.say

[08:09] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PjVqEI9ICI␤Undeclared routine:␤    perl used at line 1␤␤»

[08:09] <GLRelia> rakudo-moar 741d14: OUTPUT«5===SORRY!5=== Error while compiling /tmp/n4Pvno19Eu␤Undeclared routine:␤    perl used at line 1␤␤»

[08:09] <colomon> m: my $s = set <a b c>;($s, $s).map({ $_.Set(:view).keys.slip}).perl.say

[08:09] <camelia> rakudo-moar 5fb81f: OUTPUT«Method 'slip' not found for invocant of class 'List'␤  in block <unit> at /tmp/EPXAuw3lCc:1␤␤»

[08:09] <GLRelia> rakudo-moar 741d14: OUTPUT«Method 'slip' not found for invocant of class 'Seq'␤  in block <unit> at /tmp/gX9hsAkarc:1␤␤»

[08:10] <colomon> m: my $s = set <a b c>;($s, $s).map({ $_.Set(:view).keys.Slip}).perl.say

[08:10] <camelia> rakudo-moar 5fb81f: OUTPUT«Method 'Slip' not found for invocant of class 'List'␤  in block <unit> at /tmp/T1SKRUHyaU:1␤␤»

[08:10] <GLRelia> rakudo-moar 741d14: OUTPUT«("a", "c", "b", "a", "c", "b").Seq␤»

[08:13] <dalek> rakudo/glr: c344b26 | (Stefan Seifert)++ | src/core/Array.pm:

[08:13] <dalek> rakudo/glr: Fix STOREing junctions into arrays

[08:13] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/c344b26bee

[08:13] *** Ven left
[08:14] <JimmyZ> hmm, jnthn++ is teaching?  I didn't see the scheule on the spw site

[08:15] *** Ven joined
[08:15] <FROGGS> JimmyZ: he's in Bernstein

[08:16] *** itz left
[08:17] *** domidumont left
[08:17] <JimmyZ> oh, that room

[08:17] <dalek> rakudo-star-daily: da61f73 | coke++ | log/ (9 files):

[08:17] <dalek> rakudo-star-daily: today (automated commit)

[08:17] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/da61f7326c

[08:17] <dalek> perl6-roast-data: 50a5a30 | coke++ | / (2 files):

[08:17] <dalek> perl6-roast-data: another glr run for 'today'

[08:17] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/50a5a30514

[08:19] *** _itz_ joined
[08:19] <dalek> rakudo/glr: 1a2b583 | TimToady++ | src/core/operators.pm:

[08:19] <dalek> rakudo/glr: just iterate Seq value, don't test first

[08:19] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/1a2b583698

[08:20] *** _itz left
[08:21] *** itz joined
[08:22] <[Coke]> nqp-p: we're keeping the lights on there. tests are run every day to insure it doesn't get any more bitrotted. I'd rather see you add something than rip that out.

[08:22] *** camelia left
[08:23] <[Coke]> (https://github.com/coke/perl6-roast-data/blob/master/log/nqp.parrot_summary.out) (some tests are failing, but it is mostly in good health)

[08:23] *** RabidGravy joined
[08:23] *** camelia joined
[08:25] <camelia> nqp-parrot: OUTPUT«Can't exec "./rakudo-inst/bin/nqp-p": No such file or directory at lib/EvalbotExecuter.pm line 193.␤exec (./rakudo-inst/bin/nqp-p /tmp/HY3ZRsY9n7) failed: No such file or directory␤Server error occurred! Closing Link: ns1.niner.name (Quit: camelia)␤Lost conn…»

[08:25] *** ChanServ sets mode: +v camelia

[08:25] <ShimmerFairy> [Coke]: that's nice to hear, but does anyone actually use it? I don't see much value in maintaining something nobody uses.

[08:26] <[Coke]> no. and we're not maintaining it.

[08:26] <[Coke]> not actively, anyway.

[08:27] <[Coke]> if camelia isn't going to build it, it shouldn't be an option for the bot, but I don't see a need to remove it from the repo.

[08:29] <FROGGS> m: for 42, 43 { LAST { say "ohh noes" }; .say; last if $_ == 44 }

[08:29] <GLRelia> rakudo-moar 1a2b58: OUTPUT«42␤43␤»

[08:29] <camelia> rakudo-moar 5fb81f: OUTPUT«42␤43␤ohh noes␤»

[08:29] *** Ven left
[08:29] <ShimmerFairy> [Coke]: for the record, despite my personal misgivings on Parrot, if it's shown that nqp-p is still be used by people, I'm fine with keeping it. But I don't want to keep it around just because it's not actively harmful :)

[08:30] *** rurban joined
[08:30] <colomon> m: my $a = set < a b c >; my $b = set < b d f >; say ($a (-) $b).perl

[08:30] <GLRelia> rakudo-moar 1a2b58: OUTPUT«set("a","c")␤»

[08:30] <camelia> rakudo-moar 5fb81f: OUTPUT«set("a","c")␤»

[08:30] <[Coke]> Technically, I'm using it. Thanks.

[08:33] <ShimmerFairy> Running a daily test just to see if it functions doesn't really count for me.

[08:34] <moritz> m: my @a = [1, 2], [3, 4]; say @a>>.shift

[08:34] <GLRelia> rakudo-moar 1a2b58: OUTPUT«Method 'shift' not found for invocant of class 'Int'␤  in block <unit> at /tmp/mFYuOw06Y1:1␤␤»

[08:34] <camelia> rakudo-moar 5fb81f: OUTPUT«1 3␤»

[08:35] <[Coke]> m: / $. /

[08:35] <GLRelia> rakudo-moar 1a2b58: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/TFShklg1xA:1␤␤»

[08:35] <timotimo> does "will first" and such work with while loops in glr at the moment?

[08:35] <camelia> rakudo-moar 5fb81f: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/d3k6Y2ajJ4:1␤␤»

[08:35] <moritz> huh, but shift is marked as nodal

[08:35] <moritz> timotimo: I don't think so (not sure though)

[08:35] <colomon> m: say (:I'm=>1,:your=>1,:isn't=>1,:day=>1,:it=>1,:afraid=>1).Bag

[08:35] <GLRelia> rakudo-moar 1a2b58: OUTPUT«(isn't => True) => 1(afraid => True) => 1(I'm => True) => 1(day => True) => 1(it => True) => 1(your => True) => 1␤»

[08:35] <camelia> rakudo-moar 5fb81f: OUTPUT«bag(afraid => True, day => True, isn't => True, it => True, your => True, I'm => True)␤»

[08:36] <moritz> timotimo: there's a spectest file for it; see if it passes?

[08:36] <nine> timotimo: sounds like a question for FROGGS++

[08:36] <[Coke]> ShimmerFairy: I'm sorry my efforts don't count for you. I'll try not to take it personally. :)

[08:36] <ab6tract> ShimmerFairy: with all due respect, it feels a bit awkward that you are using such an authoritative voice here

[08:36] <timotimo> because reinstating the "turn a for loop on a range into a while loop if we can" gives me many more failures

[08:36] <timotimo> like a for loop over a range with will first, next, last, keep and undo causing broken tests

[08:36] <nine> moritz: the reason is probably me not really knowing what the nodal thing is about, so I may have missed something there

[08:37] <FROGGS> timotimo: I am working on phaser handling for for loops atm

[08:37] <timotimo> oh, turning optimize off doesn't change the failure count

[08:38] <timotimo> ah!

[08:38] <ShimmerFairy> [Coke]: nothing against you, I just don't think the only use case I've heard being a test run is very convincing for the "does anyone use it?" (alternatively, "does anyone still need nqp-p specifically?") argument :)

[08:38] <ShimmerFairy> ab6tract: I don't understand, what authoritative voice? (I'm voicing a strong opinion, but I'm not claiming any authority on anything)

[08:39] <timotimo> my 'net connection is unhappy :(

[08:39] <dalek> rakudo/glr: 0498aca | moritz++ | src/core/Supply.pm:

[08:39] <dalek> rakudo/glr: Partially fix Supply.zip

[08:39] <dalek> rakudo/glr: 

[08:39] <dalek> rakudo/glr: We now pass 8 out of 10 tests for it (used to abort after two tests)

[08:39] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/0498acaa3c

[08:39] *** Ven joined
[08:41] <ab6tract> ShimmerFairy: probably my interpretation then. the way you spoke about the repo gave me the sense that it was your choice in the end. anyway, I like your opinions in general, even if not this specific case, so please don't take my criticism the wrong way :)

[08:42] <moritz> fwiw I'd be happy to remove nqp-p, but I also respect peoples wish to resurrect rakudo-p eventually, and don't want to cause them any extra work

[08:42] <ShimmerFairy> ab6tract: ah, sorry to accidentally give that impression :) . The most I could do is one of those "forgiveness > permission" type commits; I certainly have no authority to keep it that way though :P

[08:42] <dalek> rakudo/glr: 201a509 | colomon++ | src/core/set_operators.pm:

[08:42] <dalek> rakudo/glr: Fix set intersection for the normal set case.

[08:42] <dalek> rakudo/glr: 

[08:42] <dalek> rakudo/glr: Desperately needed a strategic .Slip.

[08:42] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/201a50973f

[08:43] <ab6tract> ShimmerFairy: :)

[08:43] <ShimmerFairy> moritz: I understand that argument, however is there any reason why making someone dive into nqp's commit history for nqp-p is much worse than diving into rakudo's for rakudo-p ?

[08:43] <nine> [Coke]: https://rt.perl.org/Public/Bug/Display.html?id=113026 is fixed by GLR, I gather you can close it?

[08:43] <moritz> ShimmerFairy: please don't do that; deletions on that scale affect repo size negatively (especially if reverted afterwards)

[08:45] *** rurban left
[08:46] <JimmyZ> cloning nqp is already slow :P

[08:46] <ShimmerFairy> And I fully admit that my personal experience with parrot makes me want to wipe out any and all traces of nqp-p with glee, whereas most others are content with letting it sit there :)

[08:46] *** rurban joined
[08:47] <ShimmerFairy> (though I can't imagine why anyone would want to give off the illusion that parrot is still supported anywhere in the rakudo toolchain :P)

[08:49] *** xyf joined
[08:50] <JimmyZ> I think we cant delete history since parrot fed nqp ;)

[08:50] <moritz> nor the illusion that parrot is still actively developed or maintained

[08:50] *** diana_olhovik_ left
[08:52] <colomon> m: my $b = bag <a b c a c>; dd $b; say ($b.keys.perl)

[08:52] <GLRelia> rakudo-moar 201a50: OUTPUT«$b = ("a"=>2,"c"=>2,"b"=>1).Bag␤("a", "c", "b").Seq␤»

[08:52] <camelia> rakudo-moar 5fb81f: OUTPUT«$b = ("a"=>2,"c"=>2,"b"=>1).Bag␤("a", "c", "b")␤»

[08:52] <ShimmerFairy> Well, I do appreciate the historical significance of Parrot, but I have no qualms about getting rid of it from nqp and finally letting it retire to the history books of P6 :)

[08:53] <colomon> m: my $b = bag <a b c a c>; dd $b; say $b.keys

[08:53] <GLRelia> rakudo-moar 201a50: OUTPUT«$b = ("a"=>2,"c"=>2,"b"=>1).Bag␤acb␤»

[08:53] <camelia> rakudo-moar 5fb81f: OUTPUT«$b = ("a"=>2,"c"=>2,"b"=>1).Bag␤a c b␤»

[08:53] <JimmyZ> we can have nqp-old repo.

[08:53] <colomon> m: my $s = set < a b c >; say $s.Bag.perl

[08:53] <GLRelia> rakudo-moar 201a50: OUTPUT«(:c=>1,:a=>1,:b=>1).Bag␤»

[08:53] <camelia> rakudo-moar 5fb81f: OUTPUT«("a"=>1,"c"=>1,"b"=>1).Bag␤»

[08:54] <colomon> m: my $s = set < a b c >; say $s.Bag.keys

[08:54] <GLRelia> rakudo-moar 201a50: OUTPUT«b => Truea => Truec => True␤»

[08:54] <camelia> rakudo-moar 5fb81f: OUTPUT«a c b␤»

[08:54] <JimmyZ> have a 

[08:54] <colomon> m: my $s = set < a b c >; say $s.Bag.keys.perl

[08:54] <GLRelia> rakudo-moar 201a50: OUTPUT«(:a, :b, :c).Seq␤»

[08:54] <camelia> rakudo-moar 5fb81f: OUTPUT«("a", "c", "b")␤»

[08:55] <ShimmerFairy> JimmyZ: yeah, if others agreed to get nqp-p out of the repo, I think a separate repo for easy access to nqp-p for interested resurrectors would be nice :)

[08:56] <ShimmerFairy> (though I still haven't heard why purging nqp-p would be so much worse than purging rakudo-p was, for possible resurrections)

[08:56] <colomon> m: my $s = set < a b c >; say $s.Bag.kv.perl

[08:56] <GLRelia> rakudo-moar 201a50: OUTPUT«((:b, 1), (:a, 1), (:c, 1)).Seq␤»

[08:56] <camelia> rakudo-moar 5fb81f: OUTPUT«(("a", 1), ("c", 1), ("b", 1))␤»

[08:56] <[Coke]> can glr folks review https://rt.perl.org/Ticket/Display.html?id=112716 ? 

[08:56] <dalek> perl6-examples: f4282ff | (Steve Mynott)++ | / (4 files):

[08:56] <dalek> perl6-examples: add 15interactivity to HTML and tweak it

[08:56] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/f4282ff0dd

[08:56] <JimmyZ> ShimmerFairy: becase of bootstrap

[08:56] <JimmyZ> which increases the repo size

[08:57] <ShimmerFairy> JimmyZ: oh yeah, I suppose regenerating nqp-p's bootstrap would be interesting when the last copy is hidden deep in the git log somewhere :)

[08:58] <moritz> ShimmerFairy: well, purging it once we know for sure it's dead is fine; but purging and then later reverting the commit would be bad

[08:58] <moritz> and yes, it's bootstrapping that mostly contributes to NQP's repo size

[08:59] <JimmyZ> I think it is is a pain to keep it in nqp

[08:59] <timotimo> so ... with --optimize=off i get the very same spectest failures apparently

[08:59] <JimmyZ> is not

[08:59] *** Loren joined
[08:59] <timotimo> not only apparently

[08:59] <ShimmerFairy> moritz: and I'm guessing that rakudo-p wasn't an issue because either A) there's no bootstrap binary to worry about, and/or B) bringing back parrot would be able to use almost nothing of the old implementation on the rakudo side

[08:59] <JimmyZ> most people cares rakudo

[09:00] <moritz> ShimmerFairy: yes

[09:00] <ShimmerFairy> moritz: A or B or both, ooc? :)

[09:00] <moritz> ShimmerFairy: the idea was that if r-p was brought back, nqp-p would first need to be updated to avoid all the parrot special cases

[09:00] <moritz> ShimmerFairy: both

[09:01] <[Coke]> my glr test runs keep flapping with: unhandled Failure detected in DESTROY

[09:01] <FROGGS> now I think my NEXT/LAST patch finally gets shape

[09:01] <[Coke]> they have come and gone multiple times.

[09:02] *** diana_olhovik_ joined
[09:02] <dalek> rakudo/glr: 5996d83 | timotimo++ | src/Perl6/Optimizer.nqp:

[09:02] <dalek> rakudo/glr: re-instate for -> while opt

[09:02] <dalek> rakudo/glr: 

[09:02] <dalek> rakudo/glr: we used to generate a call to &infix:<,> that's no longer there.

[09:02] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/5996d83cfe

[09:02] <timotimo> now i can run a proper benchmark comparison

[09:03] <dalek> perl6-roast-data: 168f3c6 | coke++ | / (2 files):

[09:03] <dalek> perl6-roast-data: another glr run for 'today'

[09:03] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/168f3c6bef

[09:03] <FROGGS> timotimo: does your patch involve spectest pro/re-gressions?

[09:03] <ShimmerFairy> moritz: Like I said, it's just my personal feelings that make me inclined to delete nqp-p. If there are real reasons to keep it around, I'll probably survive :P .

[09:04] *** llfourn joined
[09:04] <ShimmerFairy> (and I only remembered it because I was making Makefile changes to nqp the other day, remembered parrot at the last second, and when I saw the parrot makefile was different enough from JVM and MVM I couldn't care enough to fix things there too.)

[09:04] <timotimo> FROGGS: i ran the spectests regularly and with --optimize=off and there was not a single difference

[09:04] <[Coke]> There are reasons to keep it around, yes.

[09:04] <timotimo> huh, actually ...

[09:04] <timotimo> is it enough to put --optimize=off at the very end of the harness?

[09:04] <timotimo> oh, hm. i may have done it wrong

[09:04] <FROGGS> timotimo: cool!

[09:05] <FROGGS> I was fearing bad things ;o)

[09:06] <[Coke]> one of the destroy errors is right at the top of https://github.com/coke/perl6-roast-data/commit/168f3c6bef

[09:06] <timotimo> it's not an error, it's a warning

[09:06] <[Coke]> 179 failures left on glr branch.

[09:07] <timotimo> that's a bit more than it was yesterday :|

[09:07] <[Coke]> shouldn't be visible in the test output, though.

[09:07] <[Coke]> timotimo: it's been steadily going down, I thought.

[09:07] <[Coke]> (that's tests, not files)

[09:07] *** rindolf joined
[09:08] *** colomon left
[09:08] <tadzik> I wonder if those failures will still be there by the time I build :)

[09:09] *** colomon joined
[09:09] *** llfourn left
[09:09] <timotimo> that run doesn't contain my last "for -> while opt" commit, right? it'd take you longer than 2 minutes to run a full spectest thingie, right?

[09:09] <tadzik> prolly

[09:10] <[Coke]> I'm doing another rn right now

[09:10] <[Coke]> up to S03

[09:10] <[Coke]> sadly the test_summary thing is still one-test-at-a-time

[09:11] <dalek> rakudo/glr: 766e702 | (Stefan Seifert)++ | src/core/Any (2 files):

[09:11] <dalek> rakudo/glr: Fix for $a -> $v is rw { $v = 1 }

[09:11] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/766e7028a2

[09:11] <[Coke]> crap, now I'm already behind again. :)

[09:12] <timotimo> so, env TEST_JOBS=4 /usr/bin/perl t/harness --fudge --moar --keep-exit-code --tests-from-file=t/spectest.data -- --optimize=off

[09:12] <timotimo> will this pass --optimize=off to perl6?

[09:13] <tadzik> ¯\_(ツ)_/¯

[09:13] <timotimo> ah

[09:13] <timotimo> of course it doesn't

[09:13] <timotimo> why did i even think "@pass-through-options" would do that?

[09:14] <FROGGS> \o/

[09:14] <tadzik> /o\

[09:14] <FROGGS> looks like my next/last phaser implementation does work now!

[09:14] <tadzik> noice

[09:14] <FROGGS> and the patch does not look that bad either

[09:15] <FROGGS> tadzik: grab your own noice :o)

[09:15] <tadzik> I read that as "next laser phaser implementation"

[09:15] <timotimo> FROGGS: i'm having serious difficulty figuring out if my patch actually makes things worse or not :(

[09:16] <FROGGS> :/

[09:16] <timotimo> now i've reverted the patch locally

[09:16] <colomon> m: my $b = bag < a b c c >; say $b.keys.perl

[09:16] <GLRelia> rakudo-moar 766e70: OUTPUT«("a", "c", "b").Seq␤»

[09:16] <camelia> rakudo-moar 5fb81f: OUTPUT«("a", "c", "b")␤»

[09:16] <timotimo> and i'll run the spec tests yet again

[09:17] <dalek> roast/glr: a231a63 | (Stefan Seifert)++ | S04-statement-modifiers/if.t:

[09:17] <dalek> roast/glr: Fix test for Empty broken by relying on stringification

[09:17] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/a231a636d0

[09:17] <laben> tadzik: i found which other problem broght upon panda by json::fast broke dem deps: it returns an $[] instead of [] for arrays and that doesn't get flattened as one would expect

[09:18] <dalek> roast/glr: 3bcaad9 | (Stefan Seifert)++ | S04-statement-modifiers/with.t:

[09:18] <dalek> roast/glr: Fix another test for Empty broken by relying on stringification

[09:18] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/3bcaad93ea

[09:18] <tadzik> timotimo: ^

[09:18] <laben> tadzik: i fixed that by explicitly making them arrays with @() but i still have not fixed rebootstrap

[09:19] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=113026 - another GLR ticket - still todo'd in glr branch. Not sure if request makes sense in GLR, needs review.

[09:19] <colomon> m: (:isn't=>1,:your=>1,:afraid=>1,:it=>1,:I'm=>1,:day=>1).Bag.perl.say

[09:19] <GLRelia> rakudo-moar 766e70: OUTPUT«(:afraid=>1,:isn't=>1,:it=>1,:I'm=>1,:your=>1,:day=>1).Bag␤»

[09:19] <camelia> rakudo-moar 5fb81f: OUTPUT«(:isn't=>1,:afraid=>1,:it=>1,:your=>1,:I'm=>1,:day=>1).Bag␤»

[09:19] <colomon> m: (:isn't=>1,:your=>1,:afraid=>1,:it=>1,:I'm=>1,:day=>1).Bag.keys.say

[09:19] <GLRelia> rakudo-moar 766e70: OUTPUT«your => Trueisn't => Trueafraid => Trueit => TrueI'm => Trueday => True␤»

[09:19] <camelia> rakudo-moar 5fb81f: OUTPUT«I'm => True afraid => True isn't => True your => True it => True day => True␤»

[09:19] <tadzik> laben: maybe we can get a test for both JSONs and make sure they behave alike?

[09:20] <tadzik> laben: then perhaps it can be fixed on the JSON side

[09:20] <tadzik> since J::F is to be a drop-in replacement for J::T they should work exactly the saem

[09:21] <laben> tadzik: they most definitely dont with glr in mind, as per the difference in flattening

[09:21] <dalek> roast/glr: ea09191 | (Stefan Seifert)++ | S04-statements/if.t:

[09:21] <dalek> roast/glr: Fix more tests trying to test for empty lists

[09:21] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/ea09191193

[09:21] <tadzik> laben: right

[09:21] <tadzik> and I think they should :)

[09:21] <tadzik> laben: do you have a testcase in handy?

[09:22] <laben> tadzik: for json parsing? afraid not

[09:22] <laben> tadzik: anyway, there's another strange problem which i'm trying to locate now that makes the deps from an array into an array of pairs...

[09:22] <tadzik> laben: waiwait :)

[09:23] <tadzik> laben: you said jsonfast returns $[] instaed of [] as jsontiny does

[09:23] <tadzik> that's a testcase :)

[09:23] <tadzik> let's add it to testsuite

[09:23] <[Coke]> timotimo: can you review https://rt.perl.org/Ticket/Display.html?id=81974 in light of the glr?

[09:23] <FROGGS> m: $_ = ""; / $. /

[09:23] <GLRelia> rakudo-moar 766e70: ( no output )

[09:23] <camelia> rakudo-moar 5fb81f: ( no output )

[09:23] <FROGGS> [Coke]: ^^

[09:23] <xyf> where can i find doc about DateTime?

[09:23] <laben> tadzik: ofc that is, but i did not write it down as a test. btw you can add also testing of empty arrays? Tiny returned [] while Fast returns Any

[09:24] <tadzik> laben: yeah, let's add that

[09:24] <tadzik> it's definitely needed

[09:25] <timotimo> damn

[09:25] <timotimo> FROGGS: now i have a diff between spec test runs :(

[09:25] <moritz> xyf: http://doc.perl6.org/type/DateTime

[09:26] <nine> [Coke]: RT #113026 is fixed by GLR!

[09:26] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=113026

[09:26] *** CIAvash joined
[09:26] <[Coke]> m: :2

[09:26] <GLRelia> rakudo-moar 766e70: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hFXXIjJB2o␤Malformed radix number␤at /tmp/hFXXIjJB2o:1␤------> 3:27⏏5<EOL>␤    expecting any of:␤        number in radix notation␤»

[09:26] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/YOg3av1qn0␤Malformed radix number␤at /tmp/YOg3av1qn0:1␤------> 3:27⏏5<EOL>␤    expecting any of:␤        number in radix notation␤»

[09:26] <[Coke]> m: :2()

[09:26] <GLRelia> rakudo-moar 766e70: OUTPUT«This call only converts base-2 strings to numbers; value () is of type List, so cannot be converted!␤(If you really wanted to convert () to a base-2 string, use ().base(2) instead.)␤  in block <unit> at /tmp/77_BQcomON:1␤␤»

[09:26] <camelia> rakudo-moar 5fb81f: OUTPUT«This call only converts base-2 strings to numbers; value $( ) is of type Parcel, so cannot be converted!␤(If you really wanted to convert $( ) to a base-2 string, use $( ).base(2) instead.)␤  in block <unit> at /tmp/RPW0YbHDh6:1␤␤»

[09:26] <[Coke]> m: say :2(1)

[09:26] <camelia> rakudo-moar 5fb81f: OUTPUT«This call only converts base-2 strings to numbers; value 1 is of type Int, so cannot be converted!␤(If you really wanted to convert 1 to a base-2 string, use 1.base(2) instead.)␤  in block <unit> at /tmp/Ry2ZL63zTB:1␤␤»

[09:27] <[Coke]> m: say :2<1>

[09:27] <camelia> rakudo-moar 5fb81f: OUTPUT«1␤»

[09:27] <GLRelia> rakudo-moar 766e70: OUTPUT«This call only converts base-2 strings to numbers; value 1 is of type Int, so cannot be converted!␤(If you really wanted to convert 1 to a base-2 string, use 1.base(2) instead.)␤  in block <unit> at /tmp/qcOUhRV4ga:1␤␤»

[09:27] <GLRelia> rakudo-moar 766e70: OUTPUT«1␤»

[09:27] <timotimo> FROGGS: https://gist.github.com/timo/84a1acb434ab2b5cccc5

[09:27] <timotimo> does this look worrisome?

[09:27] <nine> [Coke]: and I removed the todo marker in the spec tests

[09:27] <moritz> colomon: since you've been working on sets: t/spec/integration/advent2012-day13.t has a failing test for set difference

[09:27] <[Coke]> nine: ok, but the test that was written is still todo'd in the glr roast branch.

[09:27] <[Coke]> ... ok, it was still marked TODO there. passing?

[09:27] <colomon> moritz: we’re working on set difference right this moment.

[09:28] <colomon> (well, or talking about Paul Simon)

[09:28] <nine> timotimo: yes, worrysome

[09:28] <[Coke]> nine: Danke.

[09:28] *** lizmat left
[09:28] <timotimo> shit.

[09:28] <nine> [Coke]: it's only marked todo for niecza now

[09:28] <laben> tadzik: silly me, i did change deps calc in Ecosystem.pm but did not change them in Panda.pm (get-project-from...), testing now

[09:29] *** lizmat joined
[09:30] <[Coke]> :2<1> is a glr bug, looks like.

[09:30] <FROGGS> timotimo: that might not your patch

[09:31] <moritz> m: say (:2<1>)

[09:31] <GLRelia> rakudo-moar 766e70: OUTPUT«1␤»

[09:31] <camelia> rakudo-moar 5fb81f: OUTPUT«1␤»

[09:31] <FROGGS> timotimo / nine: I also get t/spec/S17-supply/zip.t aborting locally

[09:31] <timotimo> http://t.h8.lv/p6bench/2015-08-29-nom_vs_glr_2.html - with the for optimization in place, the benchmarks aren't all so terrible any more

[09:31] <timotimo> array access (assignment, mostly) is still very slow. as is the X metaop

[09:32] <FROGGS> ohh no, it was unhappy before too

[09:32] <cdc_> m: say (:16<a>)

[09:32] <GLRelia> rakudo-moar 766e70: OUTPUT«10␤»

[09:32] <camelia> rakudo-moar 5fb81f: OUTPUT«10␤»

[09:32] <FROGGS> I'm going to push my test because it is making three test files pass

[09:33] <FROGGS> s/test/patch/

[09:33] <tadzik> while_array_set looks a lot slower

[09:34] <tadzik> and for_ :)

[09:34] <JimmyZ> looks like push join is  slower

[09:34] *** rurban left
[09:34] <timotimo> our array_set_xx could become a ton faster if we implement the xx iterator's push_all or what it's called method

[09:35] <laben> tadzik: i had enough of strange set semantics, i rewrote the deps with lists/arrays and here it is https://gist.github.com/ec4368a804fbadeab11a

[09:35] *** Ven left
[09:35] <dalek> roast/glr: 2a1e0eb | coke++ | S02-literals/radix.t:

[09:35] <dalek> roast/glr: Add tests for RT #112728

[09:35] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/2a1e0ebee7

[09:35] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=112728

[09:36] <laben> tadzik: makes rebootstrap work. btw if i were you, i would consider bringing the project creation code in a single place

[09:36] <tadzik> laben: yes, that's the plan

[09:36] <tadzik> it became a mess over time :)

[09:36] <tadzik> not a fan

[09:36] <dalek> rakudo/glr: d65ca02 | FROGGS++ | src/core/Any-iterable-methods.pm:

[09:36] <dalek> rakudo/glr: make NEXT/LAST phaser firing work

[09:36] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/d65ca02aa4

[09:37] <[Coke]> m: say 2**10000000000; say 1/(2**10000)

[09:37] <GLRelia> rakudo-moar 766e70: OUTPUT«0␤0␤»

[09:37] <camelia> rakudo-moar 5fb81f: OUTPUT«0␤0␤»

[09:37] <tadzik> but honestly I quite like the idea of using sets here, it's just that they got so confusing for some reason now that glr's in

[09:37] <FROGGS> m: $_ = "a"; say / $. /

[09:37] <GLRelia> rakudo-moar 766e70: OUTPUT«/ $. /␤»

[09:37] <camelia> rakudo-moar 5fb81f: OUTPUT«/ $. /␤»

[09:37] <tadzik> I'm happy with what makes rebootstrap work though :)

[09:37] <colomon> m: say +True

[09:37] <GLRelia> rakudo-moar 766e70: OUTPUT«1␤»

[09:37] <camelia> rakudo-moar 5fb81f: OUTPUT«1␤»

[09:37] <FROGGS> m: $_ = "a"; say m/ $. /

[09:37] <GLRelia> rakudo-moar 766e70: OUTPUT«Nil␤»

[09:37] <camelia> rakudo-moar 5fb81f: OUTPUT«Nil␤»

[09:37] <colomon> m: say True.Int

[09:37] <GLRelia> rakudo-moar 766e70: OUTPUT«1␤»

[09:37] <camelia> rakudo-moar 5fb81f: OUTPUT«1␤»

[09:38] <FROGGS> m: $_ = "a"; say "a" ~~ / $. /

[09:38] <GLRelia> rakudo-moar 766e70: OUTPUT«Nil␤»

[09:38] <camelia> rakudo-moar 5fb81f: OUTPUT«Nil␤»

[09:38] <laben> tadzik: i can understand the feeling, it's just that the transition to j::f plus new set semantics from glr made it explode badly

[09:38] <tadzik> right

[09:38] <tadzik> I'm onto the json differences right now

[09:38] *** xyf left
[09:38] *** Ven joined
[09:39] <dalek> perl6-roast-data: 567bd23 | coke++ | / (2 files):

[09:39] <dalek> perl6-roast-data: another glr run for 'today'

[09:39] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/567bd230a4

[09:39] *** rurban joined
[09:39] <tadzik> laben: the patch still works on nom, right?

[09:40] <tadzik> asking just in case :)

[09:40] <dalek> roast/glr: d8a7786 | coke++ | S02-types/set.t:

[09:40] <dalek> roast/glr: unfudge passing test

[09:40] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/d8a7786b47

[09:40] <laben> tadzik: i'll test it

[09:40] <tadzik> awesome, thank you

[09:41] <[Coke]> 163 failures, running again...

[09:41] <tadzik> laben: actually, now that I tried it, JSON::Fast doesn't work on glr anymore

[09:41] <tadzik> fails tests

[09:41] <tadzik> I think I'll fallback to JSON::Tiny

[09:41] <laben> tadzik: wait a sec, did you get the latest json::fast?

[09:41] <tadzik> I... think

[09:42] <tadzik> yeah, the subtree may not be up-to-date

[09:43] <laben> tadzik: subtree not updated, does not have the latest fix. i was just going to ask you about this: is it needed to have the subtrees directly in the repo instead of git submodules?

[09:43] *** rmgk left
[09:43] <tadzik> yes

[09:43] <tadzik> submodules were a much bigger pain to work with :)

[09:43] <ab6tract> https://gist.github.com/ab5tract/ebda98cc14e25881adbd

[09:43] <tadzik> updated it right now

[09:44] <ab6tract> colomon ^^

[09:44] <colomon> ab6tract: on it

[09:44] <tadzik> laben: pushed

[09:44] *** rmgk joined
[09:44] <timotimo> ah, so xx build a List, and it seems like then it gets passed on to push-until-lazy, which is responsible for 50% of the whole time the benchmark runs

[09:45] <laben> tadzik: else, how do i tell (re)bootstrap to go look for the modules source in another location instead of the remote?

[09:45] <tadzik> you don't

[09:45] <tadzik> I mean, it can't do that

[09:45] <tadzik> but it's an interesting idea

[09:45] <FROGGS> m: while 42 { FIRST { say "hello" }; last }

[09:45] <GLRelia> rakudo-moar d65ca0: ( no output )

[09:45] <camelia> rakudo-moar 5fb81f: ( no output )

[09:45] <laben> :( it was possible with bootstrap before

[09:45] <tadzik> it was?

[09:46] <tadzik> I mean, it's not a bootstrap thing

[09:46] <tadzik> rebootstrap does bootstrap and then tells panda to reinstall what was there before

[09:46] <FROGGS> m: my $x; while 42 { FIRST { say "hello" }; last if $x++ > 3 }

[09:46] <GLRelia> rakudo-moar d65ca0: ( no output )

[09:46] <camelia> rakudo-moar 5fb81f: ( no output )

[09:46] <tadzik> and panda doesn't even have the copy of the files from remotes

[09:46] <laben> yes, instead of calling "bin/panda File::Find etc" i modded it to call "bin/panda dir/to/file/find ..."

[09:47] <tadzik> oh, you can do that alright

[09:47] <tadzik> but it's not a built-in feature

[09:47] <[Coke]> m: DateTime.new('2015-08-23t02:27:33-07:00');

[09:47] <GLRelia> rakudo-moar d65ca0: ( no output )

[09:47] <camelia> rakudo-moar 5fb81f: ( no output )

[09:47] <tadzik> you could put a hook for Ecosystem.update that mangles projects.json to your liking

[09:48] <tadzik> and turns all those git:// into file:// or so

[09:48] <[Coke]> b: DateTime.new('2015-08-23t02:27:33-07:00');

[09:49] <tadzik> laben: btw I don't see the json-fast difference that you mentioned

[09:49] <laben> the idea is, generally i use bootstrap to try an env or commit that may not be compatible with remote repos, which means i first modify the deps then call bootstrap on the modded deps and local (modded) panda

[09:49] <tadzik> https://gist.github.com/tadzik/b10f4469b0adc2c16cf1

[09:49] <tadzik> well, bootstrap itself shouldn't touch network anyway

[09:49] <tadzik> rebootstrap might

[09:49] <dalek> roast: 28e4d44 | coke++ | S32-temporal/DateTime.t:

[09:49] <dalek> roast: Add tests for RT #125872

[09:49] <dalek> roast: review: https://github.com/perl6/roast/commit/28e4d44d36

[09:49] <dalek> rakudo/glr: 898d0c7 | colomon++ | src/core/Setty.pm:

[09:49] <dalek> rakudo/glr: ab6tract++'s Setty.Bag and Setty.Baghash.

[09:49] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125872

[09:49] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/898d0c7778

[09:49] <FROGGS> m: say ([Z] () eq []).perl

[09:49] <GLRelia> rakudo-moar d65ca0: OUTPUT«((Bool::True)).Seq␤»

[09:49] <camelia> rakudo-moar 5fb81f: OUTPUT«((Bool::True,),)␤»

[09:49] *** itz left
[09:50] <laben> tadzik: ? afaics, it uses the bundled deps only to call panda on site, the ones it installs are fetched by net?

[09:51] <tadzik> hmmmmm

[09:51] <tadzik> I don't think so

[09:51] <tadzik> see projects.json.bootstrap

[09:51] <FROGGS> m: use Test; is ([Z] ()), [], "[Z] () eq []";

[09:51] <GLRelia> rakudo-moar d65ca0: OUTPUT«not ok 1 - [Z] () eq []␤␤# Failed test '[Z] () eq []'␤# at /tmp/HjIoyxBm50 line 1␤# expected: ''␤#      got: (Nil)␤»

[09:51] <camelia> rakudo-moar 5fb81f: OUTPUT«ok 1 - [Z] () eq []␤»

[09:51] <timotimo> i think in order to make xx any better, i'd have to build a custom iterator

[09:51] <FROGGS> m: use Test; is-deeply ([Z] ()), [], "[Z] () eq []";

[09:51] <GLRelia> rakudo-moar d65ca0: OUTPUT«not ok 1 - [Z] () eq []␤␤# Failed test '[Z] () eq []'␤# at /tmp/5qF3z7yIww line 1␤# expected: []␤#      got: Nil␤»

[09:51] <camelia> rakudo-moar 5fb81f: OUTPUT«not ok 1 - [Z] () eq []␤␤# Failed test '[Z] () eq []'␤# at /tmp/RywMh5LK8y line 1␤# expected: []␤#      got: $()␤»

[09:51] <colomon> m: my $s = set <a b c> ; say ($s (^) $s).perl

[09:51] <GLRelia> rakudo-moar d65ca0: OUTPUT«set(("a", "c", "b").Seq,("a", "c", "b").Seq)␤»

[09:51] <camelia> rakudo-moar 5fb81f: OUTPUT«set()␤»

[09:52] <laben> timotimo: you could take inspiration from DwimIterator by nine++ in HYPER

[09:52] <timotimo> isn't that quite a bit too complicated? :)

[09:52] <laben> ok maybe i grew accostumed to it, did not seem to complicated

[09:52] <laben> s/to/too/

[09:53] <timotimo> surprisingly (IMO) i'm not able to get a slip into the LHS of xx without it going for the thunked version of xx

[09:53] <timotimo> that handles the flattening correctly

[09:53] <timotimo> the other variant just creates a List that has the thing on the LHS bindpos'd to each slot from 0 to ^$n

[09:55] <laben> tadzik: then, it remains a single doubt (not much of an issue). why does panda precomp itself, even if it doesnt for any modules?

[09:56] <tadzik> laben: it doesn't

[09:56] *** avalenn_ left
[09:56] <tadzik> is it possible that you have a leftover blib?

[09:56] <dalek> rakudo/glr: 05ce1e8 | colomon++ | src/core/set_operators.pm:

[09:56] <dalek> rakudo/glr: ab6tract++'s symmetric difference fix.

[09:56] <dalek> rakudo/glr: 

[09:56] <dalek> rakudo/glr: Just needed a slip.

[09:56] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/05ce1e87f7

[09:57] <timotimo> huh

[09:57] <timotimo> actually

[09:58] <timotimo> it's more like 75% of the whole time is spent copying the list from the xx operator to the @a

[09:58] <moritz> that's good

[09:58] <moritz> because it means there's an opportunity for optimization

[09:59] <laben> tadzik: you're right, but then it shouldn't copy the .moarvm files

[09:59] <timotimo> yeah

[09:59] <timotimo> 96.65% STORE 

[09:59] <timotimo> 3.33% infix:<xx>

[09:59] <tadzik> laben: yeah, it just copies everything from blib :/

[09:59] *** Loren left
[09:59] <tadzik> in case it's put there by the custom build hook or so

[10:00] <laben> but if there is a custom build hook, let them put a custom install filter

[10:01] *** Alina-malina joined
[10:01] <tadzik> hm, what kind of custom install folder do you mean?

[10:01] <Ven> m: $_ = 'a'; if !/a/ { 1 } # does anyone know what's going on? works with "unless" :)

[10:01] <GLRelia> rakudo-moar 898d0c: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/bq8kH5dF39:1␤␤»

[10:01] <camelia> rakudo-moar 5fb81f: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/1iOm6wsrNa:1␤␤»

[10:02] *** itz joined
[10:03] <moritz> m: $_ = 'a'; if !.say { 1 }

[10:03] <GLRelia> rakudo-moar 05ce1e: OUTPUT«a␤»

[10:03] <camelia> rakudo-moar 5fb81f: OUTPUT«a␤»

[10:03] <laben> filter, not folder. so by default you only copy .p[ml][6]? and if they want to also copy .so etc, they pass a option or make a custom hook to do that

[10:04] <moritz> m: $_ = 'a'; if !m/a/ { 1 }

[10:04] <GLRelia> rakudo-moar 05ce1e: ( no output )

[10:04] <camelia> rakudo-moar 5fb81f: ( no output )

[10:04] <moritz> Ven: I have a hunch

[10:04] <[Coke]> colomon: where are you? I have your bag.

[10:05] <colomon> [Coke]: thank you!  in the courtyard

[10:05] <masak> could someone with Mac OS X try something for me?

[10:05] <colomon> masak: like what?

[10:05] <masak> run `p6doc List.map` and see if it fails?

[10:05] <moritz> Ven: Regex.Bool basically looks for the caller's $_

[10:05] <colomon> masak: p6doc: command not found

[10:05] <colomon> how do I install it?

[10:05] <masak> colomon: panda

[10:05] <moritz> Ven: and somehow the ! seems to introduce a callframe that makes it search for the wrong $_

[10:06] <colomon> masak: I’m on GLR

[10:06] <masak> ok :/

[10:06] <masak> (it works for me on my Linux laptop, but it fails for my neighbor who has Mac OS X)

[10:06] <ab6tract> masak: it works for me

[10:06] <tadzik> colomon: panda should work on glr

[10:06] <ab6tract> let me panda install the latest

[10:06] <masak> ab6tract: cool.

[10:07] *** larion joined
[10:08] <colomon> tadzik: ooooo

[10:08] <ab6tract> again it works :/

[10:08] <ab6tract> let me rakudobrew the latest nom :)

[10:10] <dalek> perl6-roast-data: 8b10476 | coke++ | / (2 files):

[10:10] <dalek> perl6-roast-data: another glr run for 'today'

[10:10] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8b10476ff2

[10:10] <[Coke]> ugh. I feel like we've closed more tickets than this. only at 1,039

[10:10] <dalek> rakudo/glr: 00a34b8 | colomon++ | src/core/set_operators.pm:

[10:10] <dalek> rakudo/glr: set, bag, and mix composers fixed in GLR.

[10:10] <dalek> rakudo/glr: 

[10:10] <dalek> rakudo/glr: ab5tract++'s patch.

[10:10] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/00a34b8562

[10:11] <masak> ab6tract++

[10:11] <masak> it's weird that it behaves differently on our two systems -- and worth checking out ;)

[10:11] <[Coke]> down to 144 failures in glr, starting another run

[10:12] <[Coke]> r: sub s_s(*%n)  { %n>>.say }; s_s(|{:assoc<list>},:assoc<left>);

[10:12] <GLRelia> rakudo-moar 05ce1e: OUTPUT«list␤»

[10:12] <GLRelia> ..rakudo-jvm 05ce1e: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[10:12] <camelia> rakudo-jvm 5fb81f: OUTPUT«left␤»

[10:12] <camelia> ..rakudo-moar 5fb81f: OUTPUT«list␤»

[10:12] <masak> 144 *test* failures?

[10:13] <masak> not test files?

[10:13] <[Coke]> masak: yes.

[10:13] <moritz> masak: we're below 144 test files for days :-)

[10:13] <FROGGS> should be <= 30 test files

[10:13] <[Coke]> here's the listing: https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.moar-glr_summary.out#L5263

[10:13] <[Coke]> and I just saw a set/bag fix go in, so should be even better after next run completes.

[10:14] <colomon> yes, ab6tract++ fixed a bunch of stuff in set/bag

[10:14] <ab6tract> masak: works just fine here :(

[10:14] <moritz> in 8 hours we'll be able to give the remaining bugs names :-)

[10:14] <dalek> roast/glr: 787837c | lizmat++ | S02-types/sethash.t:

[10:14] <dalek> roast/glr: Make S02-types/sethash.t clean

[10:14] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/787837c120

[10:14] <masak> ab6tract: thank you, that's a data point

[10:14] <[Coke]> crap. killing and starting over to catch that one. :)

[10:15] <moritz> lizmat: fwiw I've given up on the remaining Supply.zip test failures; maybe a job for you?

[10:15] *** oetiker left
[10:16] <dalek> roast: b19f209 | hoelzro++ | S17-procasync/many-processes-no-close-stdin.t:

[10:16] <dalek> roast: Add test to make sure we release stdin on child exit

[10:16] <dalek> roast: review: https://github.com/perl6/roast/commit/b19f2098b5

[10:16] <ab6tract> [Coke]: lizmat++ is about working on a mixhash.t test, maybe you want to wait for that one too :D

[10:16] <[Coke]> when flattening duplicate named args, does the one that gets picked matter?

[10:16] *** Ven left
[10:17] <moritz> nah, don't wait, just run another later :-)

[10:17] <moritz> [Coke]: iirc the last one wins

[10:17] <[Coke]> m: (my @ = 'a', <b c>)[1].perl.say; (constant @ = 'a', <b c>)[1].perl.say;

[10:17] <GLRelia> rakudo-moar 00a34b: OUTPUT«("b", "c")␤("b", "c")␤»

[10:17] <camelia> rakudo-moar 5fb81f: OUTPUT«"b"␤("b", "c")␤»

[10:17] <dalek> rakudo/nom: fd1612f | hoelzro++ | t/spectest.data:

[10:17] <dalek> rakudo/nom: Add many-processes-no-close-stdin.t to spectest.data

[10:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fd1612f1c0

[10:17] <moritz> m: sub f(:$a) { say $a }; f :a :!a

[10:17] <GLRelia> rakudo-moar 00a34b: OUTPUT«False␤»

[10:17] <camelia> rakudo-moar 5fb81f: OUTPUT«False␤»

[10:22] *** Ven joined
[10:23] <[Coke]> if someone tells me what file tests for RT #122895 belong in, I'll write them.

[10:23] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122895

[10:24] <[Coke]> S02-types/lists.t ?

[10:24] <timotimo> with the for -> while optimization and putting @a[ SCALE ] = SCALE in front of the @a[ $_ ] = $_ for 0 .. SCALE loop, we get as fast as nom was

[10:24] <btyler_> http://design.perl6.org/S04.html#line_1380 <-- lizmat 

[10:24] <[Coke]> ah, FROGGS++ #IRL

[10:24] <timotimo> but how can nom be as fast as glr is now without knowing up front how big the array is going to be?

[10:24] <colomon> [Coke]: or S04-declarations/constant.t ?

[10:25] <hoelzro> FROGGS, jnthn: if one of you gets a chance today, could you try Linenoise on Windows? I'd like to make sure it works =)

[10:26] *** YuviPanda is now known as PastJynus

[10:26] <FROGGS> hoelzro: I can just copy the Linenoise.pm into the install/lib/[etc] folder, right?

[10:26] *** PastJynus is now known as YuviPanda

[10:26] <FROGGS> hoelzro: I'm booting my windows machine right now

[10:26] <hoelzro> FROGGS: I've only used panda to do it, but there's a small installation process

[10:27] *** xfix left
[10:27] <dalek> roast/glr: d51f2cc | coke++ | S04-declarations/constant.t:

[10:27] <dalek> roast/glr: add tests for RT #122895

[10:27] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/d51f2cc884

[10:27] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122895

[10:27] <hoelzro> FROGGS: are you somewhere we can pair on this?

[10:27] <hoelzro> that might be easier =)

[10:28] <laben> masak: https://github.com/masak/xml-writer/pull/5

[10:28] <FROGGS> I'm upstairs

[10:28] *** oetiker joined
[10:28] <[Coke]> colomon: yes, that's what FROGGS suggested IRL. :) 

[10:29] <FROGGS> hoelzro: I need to rebuild all the things on windows, so no hurry :o)

[10:29] <[Coke]> tadzik: is RT #122839 panda's fault or star's fault?

[10:29] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122839

[10:30] <tadzik> synbot6++

[10:30] <tadzik> botsnack!

[10:30] <synbot6> om nom nom

[10:30] <[Coke]> m: m: class Foo { has @.bar }; say Foo.new( bar => [1,2,3] ).bar.elems

[10:30] <GLRelia> rakudo-moar 00a34b: OUTPUT«3␤»

[10:30] <camelia> rakudo-moar 5fb81f: OUTPUT«3␤»

[10:30] <tadzik> [Coke]: I feel like 2014.08 may simply be too old for Compress::Zlib

[10:31] *** average joined
[10:31] <[Coke]> Ok. I'll close it with a polite note to reopen if it's still an issue with recent stars.

[10:31] <colomon> lizmat: I’m getting 7 failures in S02-types/bag.t ?  Did you say it was passing now?

[10:31] <tadzik> FROGGS FROGGS 

[10:31] <tadzik> I meant to ask

[10:31] <tadzik> why exactly is panda's gen-meta called Bundler?

[10:31] <average> perl6 is a monument of stubborness. you guys are really pushing in that release on christmas ?

[10:31] <tadzik> average: yes

[10:31] <[Coke]> tadzik: ah, it was an issue on 2015.01..

[10:31] <average> damn.. this is really happening

[10:32] <tadzik> indeed!

[10:32] <tadzik> We're quite excited

[10:32] <average> i'm surprised

[10:32] <moritz> m: say ().perl, ().item.perl

[10:32] <GLRelia> rakudo-moar 00a34b: OUTPUT«()()␤»

[10:32] <camelia> rakudo-moar 5fb81f: OUTPUT«()$( )␤»

[10:32] * virtualsue smooches average

[10:32] <tadzik> [Coke]: I'm guessing some of the Compress::Zlib patches in the meantime take advantage of features introduced later than that Star release

[10:33] <average> virtualsue: yo, sue !

[10:33] <colomon> m: my %m = bag <a b o p>,< a p o o>; dd %m

[10:33] <GLRelia> rakudo-moar 00a34b: OUTPUT«%m = {:a(2), :b(1), :o(3), :p(2)}␤»

[10:33] <camelia> rakudo-moar 5fb81f: OUTPUT«Odd number of elements found where hash initializer expected␤  in block <unit> at /tmp/WJIsurcJ2a:1␤␤»

[10:33] <tadzik> for instance NativeCall getting into core :)

[10:33] <tadzik> which is not a feature, but you get the idea

[10:35] <ab6tract> colomon: :)

[10:36] <dalek> rakudo/glr: ec355fc | moritz++ | src/core/List.pm:

[10:36] <dalek> rakudo/glr: Fix itemization of List.perl

[10:36] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/ec355fc5dc

[10:36] <tadzik> [Coke]: so basically, the correct response should be something along "consider using Compress::Zlib from 2014.08 when using Star from 2014.08"

[10:36] <colomon> ab6tract: yeah, poor lizmat++ wrote that test yesterday, and we just broke it.  :)

[10:36] <average> O'Reilly should really interview the top #10 contributors on Perl6

[10:36] <tadzik> unless that's broken too :)

[10:36] <average> I'm really really curious for an in-depth interview revolving around motivations for writing on it

[10:36] <moritz> average: somebody else already does that

[10:36] <average> moritz: yes, I'm really curious to read that if it's already out or if it will be published soon

[10:36] <moritz> some of those interviews are already published

[10:37] <[Coke]> |Tux|: can you note the expected behavior you're not seeing in https://rt.perl.org/Ticket/Display.html?id=123980 ? thanks.

[10:37] <tadzik> I know Gabor Szabo did some interviews

[10:37] <moritz> somebody please help find those URLs

[10:37] <tadzik> Also perl.com?

[10:37] <[Coke]> tadzik: but someone reported "same issue on 2015.01".

[10:37] <average> I've seen Gabor's interviews, they were nice, but some topics were overlooked

[10:37] <tadzik> [Coke]: ah, fair enough

[10:38] <[Coke]> tadzik: is looking for easy closes, this isn't one, moving on; feel free to grab it though. :)

[10:38] <FROGGS> tadzik: because it will create a tar.gz at the end in Bundler me thinks

[10:38] <FROGGS> tadzik: there also should be a bundle target

[10:39] *** laben left
[10:39] *** laben joined
[10:39] <moritz> average: http://perlhist.com/perl6

[10:39] <tadzik> [Coke]: :) fair enough

[10:39] <tadzik> oh, those are good

[10:39] <[Coke]> m: class Foo:D {}; say Foo.new

[10:39] <GLRelia> rakudo-moar 00a34b: OUTPUT«Foo.new␤»

[10:39] <camelia> rakudo-moar 5fb81f: OUTPUT«Foo.new␤»

[10:39] <[Coke]> I. WAT?

[10:40] <average> moritz: thanks !

[10:40] <[Coke]> m: class Foo:U {}; say Foo.new

[10:40] <GLRelia> rakudo-moar 00a34b: OUTPUT«Foo.new␤»

[10:40] <camelia> rakudo-moar 5fb81f: OUTPUT«Foo.new␤»

[10:40] <[Coke]> m: class Foo:ABC {}; say Foo.new

[10:40] <GLRelia> rakudo-moar 00a34b: OUTPUT«Foo.new␤»

[10:40] <camelia> rakudo-moar 5fb81f: OUTPUT«Foo.new␤»

[10:40] <[Coke]> m: class Foo:any-ole-adverbial {}; say Foo.new

[10:40] <GLRelia> rakudo-moar 00a34b: OUTPUT«Foo.new␤»

[10:40] <camelia> rakudo-moar 5fb81f: OUTPUT«Foo.new␤»

[10:40] <tadzik> class Foo {}; class FooD is Foo {}; say FooD ~~ Foo:D

[10:40] <tadzik> m: class Foo {}; class FooD is Foo {}; say FooD ~~ Foo:D

[10:40] <GLRelia> rakudo-moar 00a34b: OUTPUT«True␤»

[10:40] <camelia> rakudo-moar 5fb81f: OUTPUT«True␤»

[10:40] <tadzik> \o/

[10:40] <average> you guys have seen the AOSA books right ?

[10:41] <tadzik> I don't think so

[10:41] <average> tadzik: http://aosabook.org/en/index.html

[10:42] * moritz has

[10:42] <moritz> and read most of it, even

[10:42] <average> when you feel ready, you should try to get published in volume 1,2 or 3. I really see Perl6 as the sort of thing that should be in there(of course, when the time is right)

[10:42] <moritz> of volume one, that is

[10:43] <average> Audrey Tang has 2 articles in the AOSA books

[10:43] <average> maybe she could pave the way

[10:44] <laben> for those who have merge rights: https://github.com/cosimo/perl6-string-crc32/pull/7

[10:44] *** user3 joined
[10:45] <dalek> roast/glr: 81c2001 | lizmat++ | S02-types/mixhash.t:

[10:45] <dalek> roast/glr: Make S02-types/mixhash.t pass

[10:45] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/81c20011b0

[10:46] *** user3 left
[10:47] *** rurban left
[10:47] <[Tux]> [Coke] in RT#123980, I hoped .map(*//"-") to do the same as .map({*//"-"})

[10:47] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123980

[10:47] *** Ven left
[10:48] <dalek> roast/glr: 01588b2 | colomon++ | S02-types/bag.t:

[10:48] <dalek> roast/glr: Change bag to Bag.new as needed.

[10:48] <dalek> roast/glr: 

[10:48] <dalek> roast/glr: This is because we switched back the old "bag flattens" approach.

[10:48] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/01588b213c

[10:51] *** virtualsue left
[10:52] *** rurban joined
[10:54] *** ab6tract left
[10:54] <moritz> [Tux]: looks distinctly wrong

[10:55] <moritz> oh, you used $_ // '-' inside the block

[10:56] <moritz> then it doesn't look quite as wrong anymore

[10:56] <moritz> but I don't think * can auto-curry short-circuiting operators

[11:00] <ShimmerFairy> m: say (* + 5).perl

[11:00] <GLRelia> rakudo-moar ec355f: OUTPUT«WhateverCode.new␤»

[11:00] <camelia> rakudo-moar fd1612: OUTPUT«WhateverCode.new␤»

[11:00] <ShimmerFairy> m: say (* && 5).perl

[11:00] <GLRelia> rakudo-moar ec355f: OUTPUT«5␤»

[11:00] <camelia> rakudo-moar fd1612: OUTPUT«5␤»

[11:00] <ShimmerFairy> m: say (* || 5).perl

[11:00] <GLRelia> rakudo-moar ec355f: OUTPUT«*␤»

[11:00] <camelia> rakudo-moar fd1612: OUTPUT«*␤»

[11:02] <[Tux]> moritz, yes, sorry. .map(*//"-") =?=?= .map({$_//"-"})

[11:03] <[Tux]> but for now I am more interested in the laze Range change

[11:03] <[Tux]> m: class C{method foo{gather { take 3..Inf}}};C.new.foo[^9].perl.say

[11:03] <GLRelia> rakudo-moar ec355f: OUTPUT«(3..Inf)␤»

[11:03] <camelia> rakudo-moar fd1612: OUTPUT«(3, 4, 5, 6, 7, 8, 9, 10, 11)␤»

[11:03] <[Tux]> that is biting me

[11:04] <timotimo> it's kinda hard to make sense of that gather/take

[11:04] <ShimmerFairy> m: my @a = gather { take 3..Inf }; say @a[^9].perl

[11:04] <GLRelia> rakudo-moar ec355f: OUTPUT«(3..Inf)␤»

[11:04] <camelia> rakudo-moar fd1612: OUTPUT«(3, 4, 5, 6, 7, 8, 9, 10, 11)␤»

[11:04] <timotimo> since after taking a range that goes up to Inf, you'll hardl be able to take anything else

[11:05] *** llfourn joined
[11:05] <ShimmerFairy> m: class C { method foo { 3..Inf } }; say C.new.foo[^9].perl

[11:05] <GLRelia> rakudo-moar ec355f: OUTPUT«(3, 4, 5, 6, 7, 8, 9, 10, 11)␤»

[11:05] <camelia> rakudo-moar fd1612: OUTPUT«(3, 4, 5, 6, 7, 8, 9, 10, 11)␤»

[11:06] <ShimmerFairy> ^ that should be sufficient, since that gather/take was useless anyway

[11:06] *** average left
[11:06] <timotimo> but it's obviously golfed from something

[11:06] *** RabidGravy left
[11:06] <[Tux]> ShimmerFairy, that is simplified code. the take is a loop where a sorted set of ranged adds to the final lazy list

[11:06] <timotimo> tux's probably being bitten by take no longer flattening its arguments?

[11:07] <[Tux]> if that detects Inf, it stops adding more

[11:07] <[Tux]> if I flat it myself, it will hang

[11:07] <timotimo> yeah

[11:07] <[Tux]> or I did something wrong

[11:07] <ShimmerFairy> It's hard to see what the intent is from the code gold

[11:07] <ShimmerFairy> *golf

[11:08] <timotimo> .o( Jungle Sound Golf )

[11:08] <[Tux]> https://github.com/Tux/CSV/blob/master/lib/Text/CSV.pm#L118

[11:08] <[Tux]> that is the full code (for nom)

[11:09] <[Tux]> https://github.com/Tux/CSV/blob/glr/lib/Text/CSV.pm#L118 for GLR

[11:09] <dalek> roast/glr: 960da6d | colomon++ | S02-types/mix.t:

[11:09] <dalek> roast/glr: Change mix to Mix.new as needed.

[11:09] <dalek> roast/glr: 

[11:09] <dalek> roast/glr: This is because we switched back the old "mix flattens" approach.

[11:09] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/960da6dc83

[11:09] *** llfourn left
[11:10] * [Tux] is preparing for Granada. will leave in 3 hours

[11:11] <timotimo> have a good travel!

[11:12] *** rurban1 joined
[11:12] <dalek> perl6-roast-data: 6c3eb2d | coke++ | / (2 files):

[11:12] <dalek> perl6-roast-data: another glr run for 'today'

[11:12] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/6c3eb2dc4d

[11:12] <[Coke]> 122 failures. rerunning.

[11:13] *** rurban left
[11:15] <[Coke]> m: class A { multi method foo($a) { "general" }; multi submethod foo(Str $a) { "specific" } }; class B is A {}; say .new.foo("OH HAI") for A, B

[11:15] <dalek> roast/glr: e13c1af | colomon++ | S02-types/set.t:

[11:15] <dalek> roast/glr: Change set to Set.new as needed.

[11:15] <dalek> roast/glr: 

[11:15] <dalek> roast/glr: This is because we switched back the old "set flattens" approach.

[11:15] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/e13c1afc96

[11:15] <GLRelia> rakudo-moar ec355f: OUTPUT«specific␤specific␤»

[11:15] <camelia> rakudo-moar fd1612: OUTPUT«specific␤specific␤»

[11:17] <moritz> btw Str.trans doesn't flatten Ranges

[11:17] <moritz> I guess it should, but I haven't found where to add it in the code

[11:17] *** cognominal left
[11:19] <moritz> m: List.sink

[11:19] <GLRelia> rakudo-moar ec355f: OUTPUT«Method 'sink' not found for invocant of class 'List'␤  in block <unit> at /tmp/yDVgWcbQWZ:1␤␤»

[11:19] <timotimo> don't we have Range => Range for the arguments to trans?

[11:19] <camelia> rakudo-moar fd1612: ( no output )

[11:19] <moritz> timotimo: I'm talking about things like (7, 1..6) => (1..7)

[11:19] <timotimo> oh

[11:20] <timotimo> right

[11:20] <[Coke]> Is it worth doing anything about RT #77170 or should we close it as a DIHWIDT.

[11:20] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=77170

[11:20] *** brrt joined
[11:21] <moritz> m: for List.^mro { say .^name if .^method_table<sink> }

[11:21] <GLRelia> rakudo-moar ec355f: ( no output )

[11:21] <camelia> rakudo-moar fd1612: OUTPUT«List␤»

[11:21] <moritz> m: for List.^roles { say .^name if .^method_table<sink> }

[11:21] <GLRelia> rakudo-moar ec355f: OUTPUT«Method 'method_table' not found for invocant of class 'Perl6::Metamodel::ParametricRoleGroupHOW'␤  in block <unit> at /tmp/QbgRK_RGFa:1␤␤»

[11:21] <camelia> rakudo-moar fd1612: OUTPUT«Method 'method_table' not found for invocant of class 'Perl6::Metamodel::ParametricRoleGroupHOW'␤  in block <unit> at /tmp/Cfwn4i0Q_s:1␤␤»

[11:22] <moritz> where does List.sink come from?

[11:23] <moritz> m: say List.^can('sink')[0].package

[11:23] <GLRelia> rakudo-moar ec355f: OUTPUT«Nil␤»

[11:23] <camelia> rakudo-moar fd1612: OUTPUT«(List)␤»

[11:24] <moritz> wtf?

[11:24] <moritz> why does Nil.sink end up in List?

[11:26] *** kid51 joined
[11:27] <[Coke]> m: .WHY, not Nil

[11:27] <GLRelia> rakudo-moar ec355f: ( no output )

[11:27] <camelia> rakudo-moar fd1612: OUTPUT«WARNINGS:␤Useless use of "," in expression ".WHY, not " in sink context (line 1)␤»

[11:27] *** kid51 left
[11:27] <[Coke]> see I was not expecting that to do something in glr vs. nom

[11:29] *** virtualsue joined
[11:29] * [Coke] closes RT #77170 - feel free to re-open if you feel it's something we should fix.

[11:30] * [Coke] has a change of heart and doesn't close it. bah.

[11:30] *** ab6tract joined
[11:30] <ab6tract> [Coke]: how are we doing? :)

[11:32] <[Coke]> ab6tract: latest run for glr is at S15 and pending. last run had 122 failures. down to 1038 RTs.

[11:32] <[Coke]> m: say "foo" & "a nice old foo" ~~ /foo/

[11:32] <GLRelia> rakudo-moar ec355f: OUTPUT«␤»

[11:32] <camelia> rakudo-moar fd1612: OUTPUT«｢all(Failure.new(exception => X::OutOfRange.new(what => "Start argument to substr", got => "5", range => "0..3", comment => "use *5 if you want to index relative to the end"), backtrace => Backtrace.new), "e o")｣␤»

[11:33] *** colomon_ joined
[11:33] <lizmat> m: say gist(1)

[11:33] <GLRelia> rakudo-moar ec355f: OUTPUT«(1)␤»

[11:33] <camelia> rakudo-moar fd1612: OUTPUT«1␤»

[11:33] <colomon_> m: my @a := [1,2],{ [.[0]+2,.[1]+2] } ... *; dd @a

[11:33] <GLRelia> rakudo-moar ec355f: OUTPUT«Index out of range. Is: 1, should be in 0..0␤  in block <unit> at /tmp/UF0YNPCbcg:1␤␤Actually thrown at:␤  in block  at /tmp/UF0YNPCbcg:1␤␤»

[11:33] <camelia> rakudo-moar fd1612: OUTPUT«([1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]...Inf)␤»

[11:33] <colomon_> can anyone explain that one?

[11:33] <lizmat> m: say gist(my $a, my $b)

[11:33] <GLRelia> rakudo-moar ec355f: OUTPUT«((Any) (Any))␤»

[11:33] <camelia> rakudo-moar fd1612: OUTPUT«(Any) (Any)␤»

[11:34] <lizmat> m: my @a := (1,2),{ [.[0]+2,.[1]+2] } ... *; dd @a

[11:34] <GLRelia> rakudo-moar ec355f: OUTPUT«Index out of range. Is: 1, should be in 0..0␤  in block <unit> at /tmp/mR5zAwbFJt:1␤␤Actually thrown at:␤  in block  at /tmp/mR5zAwbFJt:1␤␤»

[11:34] <camelia> rakudo-moar fd1612: OUTPUT«Index out of range. Is: 1, should be in 0..0␤  in block <unit> at /tmp/igNADeBgbW:1␤␤Actually thrown at:␤  in block  at /tmp/igNADeBgbW:1␤␤»

[11:35] <ab6tract> \o/

[11:35] <[Coke]> m: nom: class A { has str $.x; method BUILD(:$!x) { } };say A.new(:x<foo>).x

[11:35] <GLRelia> rakudo-moar ec355f: OUTPUT«Cannot modify an immutable str␤  in method BUILD at /tmp/uE6p2E7mQO:1␤  in block <unit> at /tmp/uE6p2E7mQO:1␤␤»

[11:35] <camelia> rakudo-moar fd1612: OUTPUT«Cannot modify an immutable str␤  in method BUILD at /tmp/3joEvTJ3zW:1␤  in block <unit> at /tmp/3joEvTJ3zW:1␤␤»

[11:36] <[Coke]> m: if 42, 44, 22 -> *@a { say @a.perl }

[11:36] <GLRelia> rakudo-moar ec355f: OUTPUT«[]␤»

[11:36] <camelia> rakudo-moar fd1612: OUTPUT«[]<>␤»

[11:36] <[Coke]> m: while 42, 44, 22 -> *@a { say @a.perl; last }

[11:36] <GLRelia> rakudo-moar ec355f: OUTPUT«[]␤»

[11:36] <camelia> rakudo-moar fd1612: OUTPUT«[]<>␤»

[11:36] *** xfix joined
[11:37] <ab6tract> m: while [42, 44, 22] -> *@a { say @a.perl; last }

[11:37] <GLRelia> rakudo-moar ec355f: OUTPUT«[]␤»

[11:37] <camelia> rakudo-moar fd1612: OUTPUT«[]<>␤»

[11:37] <[Coke]> m: constant k = k; say k

[11:37] <GLRelia> rakudo-moar ec355f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/p3Cx73dLWP␤An exception occurred while evaluating a constant␤at /tmp/p3Cx73dLWP:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Cannot invoke this object (REPR: Null, cs = 0)␤  at…»

[11:37] <camelia> rakudo-moar fd1612: OUTPUT«5===SORRY!5=== Error while compiling /tmp/g9ROvqM1xF␤An exception occurred while evaluating a constant␤at /tmp/g9ROvqM1xF:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Cannot invoke this object (REPR: Null, cs = 0)␤  at…»

[11:37] <[Coke]> we have five tickets marked as [GLR] in RT. (more may be there unmarked)

[11:39] <[Coke]> 10 tickets marked testneeded.

[11:39] <[Coke]> The role of build bot today will be played by [Coke] 

[11:40] <colomon> m: my @a; say @a[1]

[11:40] <GLRelia> rakudo-moar ec355f: OUTPUT«(Any)␤»

[11:40] <camelia> rakudo-moar fd1612: OUTPUT«(Any)␤»

[11:41] <colomon> m: my $a; say $a[1]

[11:41] <GLRelia> rakudo-moar ec355f: OUTPUT«(Any)␤»

[11:41] <camelia> rakudo-moar fd1612: OUTPUT«(Any)␤»

[11:42] <dalek> rakudo/glr: 093a4fe | (Stefan Seifert)++ | src/core/io_operators.pm:

[11:42] <dalek> rakudo/glr: Fix sub gist enclosing in parentheses even when passed a single argument

[11:42] <dalek> rakudo/glr: 

[11:42] <dalek> rakudo/glr: gist(1) returned "(1)" instead of just "1" since commit 2023f0218f19cd1a625f5a5b6ffb69a532db1053

[11:42] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/093a4fee7b

[11:46] *** brrt left
[11:48] *** CIAvash left
[11:51] *** TEttinger left
[11:52] <dalek> roast/glr: 9d89274 | (Stefan Seifert)++ | S16-io/print.t:

[11:52] <dalek> roast/glr: Update S16-io/print.t to GLRR rules

[11:52] <dalek> roast/glr: 

[11:52] <dalek> roast/glr: Under GLRR itemization prevents even a single arg from beeing flattened.

[11:52] <dalek> roast/glr: So print should treat these as single items and .Str them

[11:52] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/9d892741cd

[11:53] <jdv79> is there an easy way to resolve a pause id from the p6 git repos?

[11:54] <dalek> roast/glr: e72a073 | FROGGS++ | S04-statements/for_with_only_one_item.t:

[11:54] <dalek> roast/glr: adjust test to One Arg Rule™

[11:54] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/e72a073e12

[11:56] <lizmat> jdv79: perhaps from CREDITS ?

[11:57] <jdv79> i guess it'll have to be written.  was more asking if something already existed.

[12:02] <FROGGS> @all: this is the current spectest fallout: https://github.com/perl6/glr-test-failures-annotated/blob/master/test-failures.txt

[12:04] <FROGGS> m: say (1 ... 5 ... 10).join(' ')

[12:04] <GLRelia> rakudo-moar 093a4f: OUTPUT«Method 'splice' not found for invocant of class 'List'␤  in block <unit> at /tmp/Xk5VO29zk_:1␤␤»

[12:04] <camelia> rakudo-moar fd1612: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[12:05] <nine> FROGGS: that change to for_with_only_one_item.t is actually wrong because the item is itemized which should prevent it from being flattened even under single-arg-rule

[12:06] <nine> FROGGS: the difficulty there is that we want my @a = 1,2; for @a to iterate twice, for $a to iterate once, @a.map to iterate twice and $a.map also to iterate twice. I don't really know how to do that since for compiles to a .map

[12:07] <FROGGS> nine: I guess 'for X' should translate more to 'X.list.map'

[12:07] <FROGGS> (metaphorically)

[12:07] <nine> But $@a.list will just return @a

[12:08] <FROGGS> and ($@a).list?

[12:08] <nine> Maybe we need an :item option on method map

[12:08] <nine> FROGGS: will return @a as well

[12:08] <nine> FROGGS: List.list is just return self

[12:08] <FROGGS> that seems correct

[12:09] *** domidumont joined
[12:09] <dalek> perl6-examples: 0b2f96d | (Steve Mynott)++ | categories/cookbook/15interactivity/15-01-parse-program-args.pl:

[12:09] <dalek> perl6-examples: this comment breaks the whole make html since the pod eval exits

[12:09] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/0b2f96d316

[12:10] *** Ven joined
[12:13] *** virtualsue left
[12:15] <nine> sub fsort-only([$p?,*@r]) {

[12:15] *** virtualsue joined
[12:16] <dalek> roast/glr: 6b8d709 | FROGGS++ | S04-statements/for_with_only_one_item.t:

[12:16] <dalek> roast/glr: Revert "adjust test to One Arg Rule™"

[12:16] <dalek> roast/glr: 

[12:16] <dalek> roast/glr: This reverts commit e72a073e12f5dafaff35c1fb0e124562858ff40c.

[12:16] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/6b8d7091f0

[12:16] *** Ven left
[12:18] *** cognominal joined
[12:21] *** sunnavy left
[12:22] *** sunnavy joined
[12:23] <dalek> perl6-roast-data: 2f1df5b | coke++ | / (2 files):

[12:23] <dalek> perl6-roast-data: another glr run for 'today'

[12:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/2f1df5b39e

[12:23] *** rarara joined
[12:24] <[Coke]> down to 95 fails.

[12:24] <nine> epic!

[12:26] *** sunnavy left
[12:26] <timotimo> very nice

[12:26] <timotimo> being below 128 is good

[12:26] <[Coke]> do we have a builtin somewhere that escapes problematic shell characters?

[12:27] <[Coke]> (The ticket is mainly about " ", but figured I'd do it more generically if possible.)

[12:27] *** sunnavy joined
[12:28] *** bin_005_l left
[12:28] <laben> [Coke]: no builtin i know of, but a module is present https://github.com/xfix/perl6-Acme-Addslashes/ XD

[12:28] <xfix> Addslashes is a joke, it's not for escaping shell characters.

[12:28] <[Coke]> needed for core. I'll see what I can steal there.

[12:28] <[Coke]> ... or not. :)

[12:28] <laben> i know that, it's the reason why i added "XD"

[12:28] <xfix> I don't like the idea of "escaping" myself.

[12:29] <xfix> It's quite... error-prone.

[12:29] <timotimo> we should have :XD, too

[12:29] <xfix> For bash however, I guess you can put everything between single quotes, and replace single quotes with '\''

[12:30] <xfix> But I don't like the idea myself, it's probably better to just directly call a program using some exec API I don't remember.

[12:30] <xfix> Ignoring shell.

[12:30] <huf> you better have some kind of shell escape functionality in place, because if you dont, people will *still* interpolate strings into shell calls

[12:31] <[Coke]> xfix - this ideally would be cross shell, so there's probably not much to do.

[12:31] <huf> and you'll have a harder time telling them do escape it

[12:31] <laben> meanwhile Text::CSV is getting in better health, i hope to be able to use it as benchmark today or tomorrow at most

[12:31] <[Coke]> this is for RT #113954

[12:31] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=113954

[12:32] <xfix> To support fish shell, also add conversion of \ to '\\'. This will work in both bash and fish, but won't be compatible with cmd.exe.

[12:32] <xfix> cmd.exe has a really strange syntax, I don't quite remember how to escape it.

[12:32] <ShimmerFairy> [Coke]: .perl 'ing the string should be good enough to show that the string needs to be quoted

[12:32] <FROGGS> hoelzro++

[12:33] <ShimmerFairy> (and if the MAIN program there asks for a literal string that needs special escaping for the given shell, that's probably a design error on the programmer's part :P)

[12:33] *** domidumont left
[12:33] <xfix> But looking at RT, I wouldn't consider this to be a huge problem. It feels strange if someone would actually do this.

[12:34] <xfix> I guess special characters could be simply escaped with \, without quotes.

[12:34] *** mprelude joined
[12:34] <xfix> For example, -e '...' foo\ bar

[12:34] <[Coke]> I am always happy to close things as DIHWIDT.

[12:34] <xfix> This is strange, but if someone does something silly like that, oh well.

[12:34] <[Coke]> xfix: not sure if that works on CMD.exe

[12:34] <xfix> True, CMD requires a different syntax.

[12:34] <[Coke]> .ask masak do we really need to fix 113954, or is it: DIHWIDT ?

[12:34] <yoleaux> [Coke]: I'll pass your message to masak.

[12:36] <[Coke]> m: .say for gather take do given 1 { { a => 1, b => 2 } }

[12:36] <GLRelia> rakudo-moar 093a4f: OUTPUT«a => 1b => 2␤»

[12:36] <xfix> Escape character for cmd.exe was ^, I think, but the user may not necessarily use cmd.exe on Windows making things tricker.

[12:36] <camelia> rakudo-moar fd1612: OUTPUT«a => 1, b => 2␤»

[12:36] <nine> m: lazy { 42 }

[12:36] <GLRelia> rakudo-moar 093a4f: OUTPUT«Method 'lazy' not found for invocant of class 'Int'␤  in block <unit> at /tmp/6TMJeS9A3n:1␤␤»

[12:36] <camelia> rakudo-moar fd1612: ( no output )

[12:37] <ShimmerFairy> [Coke]: I can't imagine that problem coming up except in that situation. And if you're going to run against shell character parsing while requesting a literal in a MAIN multi, my suspicion is that you should really have to write your USAGE too.

[12:37] <nine> m: say lazy { 42 }

[12:37] <GLRelia> rakudo-moar 093a4f: OUTPUT«Method 'lazy' not found for invocant of class 'Int'␤  in block <unit> at /tmp/Onsm60FEMA:1␤␤»

[12:37] <camelia> rakudo-moar fd1612: OUTPUT«42␤»

[12:38] <dalek> roast/glr: ba06e5e | lizmat++ | S17-supply/on.t:

[12:38] <dalek> roast/glr: Make S17-supply/on.t pass

[12:38] <dalek> roast/glr: 

[12:38] <dalek> roast/glr: Actually for the wrong reason: we seem to have an issue with on-demand

[12:38] <dalek> roast/glr: supplies of different lengths in here.  So I fixed the test by making them

[12:38] <dalek> roast/glr: the same length.  At one point, we probably want to add a test for different

[12:38] <dalek> roast/glr: length on-demand supplies.

[12:38] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/ba06e5e75d

[12:40] *** virtualsue left
[12:40] *** virtualsue joined
[12:41] *** laouji joined
[12:46] *** tinyblak joined
[12:46] <nine> lizmat: d04396141

[12:46] <[Coke]> https://gist.github.com/coke/3750096a7b0996a9cf87 - give me updates.

[12:47] <laben> [Coke]: you could mention under the first item (glr) that panda works (for now)

[12:48] *** Ven joined
[12:48] <[Coke]> laben++

[12:48] <laben> i hope that brings more people to try out their modules or others

[12:49] <[Coke]> updated.

[12:49] <dalek> perl6-examples: e71314c | (Steve Mynott)++ | lib/Pod/Htmlify.pm6:

[12:49] <dalek> perl6-examples: sort sub categories by filename

[12:49] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/e71314cbef

[12:50] <dalek> ecosystem: 1bf4f1a | ab5tract++ | META.list:

[12:50] <dalek> ecosystem: Release Terminal::Print

[12:50] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/1bf4f1a6e8

[12:50] *** virtualsue left
[12:50] *** tinyblak left
[12:54] <dalek> rakudo/glr: 966096d | (Stefan Seifert)++ | t/spectest.data:

[12:54] <dalek> rakudo/glr: Don't run lazy.t at all since lazy {} has never been implemented

[12:54] <dalek> rakudo/glr: 

[12:54] <dalek> rakudo/glr: lazy.t is failing now for good reasons, so do not run it until we are

[12:54] <dalek> rakudo/glr: actually trying to implement the "lazy" statement prefix.

[12:54] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/966096dbc1

[12:55] <[Tux]> laben, do you want co-maint, or do you plan PR's?

[12:55] <[Tux]> I'll be off-line in 45 minutes

[12:55] <laben> [Tux]: i'll send you some PR, no hurry though, much work needs to be done still

[12:56] <[Coke]> I have spicy cheese if anyone wants a hunk.

[12:56] <[Coke]> I WILL eat it all if you don't stop me.

[12:56] <FROGGS> :D

[12:57] <nine> m: ([Z] ()).perl.say

[12:57] <GLRelia> rakudo-moar 093a4f: OUTPUT«Nil␤»

[12:57] <camelia> rakudo-moar fd1612: OUTPUT«()␤»

[12:57] *** itz left
[12:57] <nine> FROGGS: we get a Nil now and I'm unsure if that's correct or where it's actually coming from. Could you have a look?

[12:58] <FROGGS> nine: what test/code exactly?

[12:59] <dalek> ecosystem: ca9075a | (Tadeusz “tadzik” Sośnierz)++ | META.list:

[12:59] <dalek> ecosystem: Add Terminal::ANSIColor

[12:59] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ca9075ad38

[12:59] <tadzik> where do I teach dalek who I am?

[12:59] <FROGGS> nine: nvm

[12:59] <tadzik> moritz?

[12:59] <nine> FROGGS: t/spec/S03-operators/reduce-le1arg.rakudo.moar

[12:59] <FROGGS> nine: yeah, I already looked at it but gave up earlier

[13:00] <nine> :(

[13:00] <FROGGS> let's try again

[13:00] <TimToady> m: say infix:<Z>()

[13:00] <camelia> rakudo-moar fd1612: OUTPUT«Nil␤»

[13:00] <ShimmerFairy> tadzik: it involves your git settings

[13:01] <GLRelia> rakudo-moar 966096: OUTPUT«Nil␤»

[13:01] <FROGGS> m: say &infix:<,>()

[13:01] <GLRelia> rakudo-moar 966096: OUTPUT«␤»

[13:01] <camelia> rakudo-moar fd1612: OUTPUT«␤»

[13:01] <tadzik> ShimmerFairy: yes, I know

[13:01] *** smls joined
[13:01] <tadzik> ShimmerFairy: but dalek knows how to translate my git name to my irc name

[13:01] <FROGGS> m: say METAOP_REDUCE_LISTINFIX()

[13:01] <GLRelia> rakudo-moar 966096: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Z47syPYlBt␤Calling METAOP_REDUCE_LISTINFIX() will never work with any of these multi signatures:␤    (\op, \triangle) ␤    (\op)␤at /tmp/Z47syPYlBt:1␤------> 3say 7⏏5METAOP_REDUCE_LISTINFIX()␤»

[13:01] <camelia> rakudo-moar fd1612: OUTPUT«5===SORRY!5=== Error while compiling /tmp/L9kWQJZq73␤Calling METAOP_REDUCE_LISTINFIX() will never work with any of these multi signatures:␤    (\op, \triangle) ␤    (\op)␤at /tmp/L9kWQJZq73:1␤------> 3say 7⏏5METAOP_REDUCE_LISTINFIX()␤»

[13:01] <tadzik> and now that I have a new one it's confused :)

[13:01] <FROGGS> m: say METAOP_REDUCE_LISTINFIX(())

[13:01] <GLRelia> rakudo-moar 966096: OUTPUT«sub (|values) { #`(Sub|47703536) ... }␤»

[13:01] <camelia> rakudo-moar fd1612: OUTPUT«sub (|values) { #`(Sub|64323176) ... }␤»

[13:01] <FROGGS> m: say METAOP_REDUCE_LISTINFIX(())()

[13:01] <GLRelia> rakudo-moar 966096: OUTPUT«Invocant requires a type object of type List, but an object instance was passed.  Did you forget a 'multi'?␤  in block <unit> at /tmp/eLvE7I8hF3:1␤␤»

[13:01] <camelia> rakudo-moar fd1612: OUTPUT«Cannot find method 'postcircumfix:<( )>'␤  in block <unit> at /tmp/Mo3lNMzlo7:1␤␤»

[13:01] <laben> nine: do you know why "sub foo(*@m) {@m.say}; foo(Array)" hangs?

[13:01] <FROGGS> ahh w/e

[13:03] <nine> laben: looking at it

[13:03] <laben> nine: golfed it to "(flat Array).say"

[13:04] <[Coke]> m: my @a = ^3;say (state@ = @a).pop xx 2;say @a;

[13:04] <GLRelia> rakudo-moar 966096: OUTPUT«Cannot pop from an empty Array␤  in block <unit> at /tmp/xbNrteOudj:1␤␤Actually thrown at:␤  in block <unit> at /tmp/xbNrteOudj:1␤␤»

[13:04] <camelia> rakudo-moar fd1612: OUTPUT«Cannot pop from an empty Array␤  in block <unit> at /tmp/QnwaeTMaAk:1␤␤Actually thrown at:␤  in block <unit> at /tmp/QnwaeTMaAk:1␤␤»

[13:04] <laben> nine: it's surely flat, as even "Array.flat" hangs

[13:05] <[Coke]> m: sub p(*@l) { gather { if @l == 1 { take @l } else { @l.shift; for p(@l) -> @p {} } } }; say p 1..4

[13:05] <GLRelia> rakudo-moar 966096: OUTPUT«␤»

[13:05] <camelia> rakudo-moar fd1612: OUTPUT«Type check failed in binding @p; expected 'Positional' but got 'Int'␤  in block  at /tmp/SqXtcgfOAz:1␤  in block <unit> at /tmp/SqXtcgfOAz:1␤␤»

[13:05] *** tinyblak joined
[13:06] *** llfourn joined
[13:06] *** tinyblak left
[13:06] *** itz joined
[13:06] <tadzik> https://github.com/rakudo/rakudo/blob/nom/src/core/Deprecations.pm#L13 :|

[13:06] <tadzik> can we not

[13:07] <tadzik> liek, have an env var that turns them off or so

[13:07] *** tinyblak joined
[13:07] <JimmyZ> you can !

[13:08] <tadzik> then can we teach camelia to do it and not have this in core? :)

[13:08] <lizmat> m: my @a; say all(@a)

[13:08] <camelia> rakudo-moar fd1612: OUTPUT«all()␤»

[13:09] <GLRelia> rakudo-moar 966096: OUTPUT«(timeout)»

[13:09] <lizmat> m: all(my @)

[13:09] <GLRelia> rakudo-moar 966096: ( no output )

[13:09] <camelia> rakudo-moar fd1612: ( no output )

[13:09] <ShimmerFairy> tadzik: well, # until something better

[13:09] <ShimmerFairy> :P

[13:09] <lizmat> m: say all(my @)

[13:09] <camelia> rakudo-moar fd1612: OUTPUT«all()␤»

[13:09] <lizmat> m: say all([])

[13:09] <camelia> rakudo-moar fd1612: OUTPUT«all()␤»

[13:10] <ab6tract> whoever knows how to fiddle camelia, all we need is RAKUDO_NO_DEPRECATIONS

[13:10] <tadzik> ya

[13:10] <GLRelia> rakudo-moar 966096: OUTPUT«(timeout)»

[13:10] <GLRelia> rakudo-moar 966096: OUTPUT«(timeout)»

[13:10] <lizmat> ab6tract: maybe we should teach the deprecation mechanism to not be as verbose on camelia?

[13:10] *** tinyblak left
[13:11] *** llfourn left
[13:11] *** diana_olhovik_ left
[13:11] <ab6tract> lizmat: maybe having all deprecations off for camelia would be a good canary cage for #perl6 golfing?

[13:12] *** itz left
[13:13] *** larion left
[13:13] <[Coke]> every change we make to how cam processes things is going to involve us having to explain it to someone later about why their output is different.

[13:14] <ShimmerFairy> .oO( use warnings :verbose/:brief/:superbrief )

[13:14] <tadzik> lizmat: I think it's silly for Rakudo core to know the hostname camelia runs on :)

[13:15] <laben> we could have a modded RESTRICTED core called CAMELIA or EVALBOT with all these useful mods

[13:15] <ab6tract> [Coke]: so does that count you against having her use RAKUDO_NO_DEPRECATIONS?

[13:15] <[Coke]> https://twitter.com/flipzagging/status/634448062040162304 Which may or may not sum up xmas this year.

[13:16] <[Coke]> I'm about -.1 on that.

[13:16] *** itz joined
[13:16] <[Coke]> no big deal.

[13:16] <tadzik> or we could use the env var on caemlia

[13:16] <[Coke]> (tweet comes via bacek)

[13:16] <tadzik> oh, bacek :)

[13:16] <[Coke]> tadzik: I think that's what's being suggested, aye.

[13:16] <tadzik> long time no see

[13:21] *** skids joined
[13:23] *** araujo left
[13:23] *** domm_holiday left
[13:23] *** luiz_lha left
[13:23] *** huf left
[13:23] *** bartolin left
[13:23] *** esh left
[13:23] *** mattp_ left
[13:23] *** mtj_ left
[13:23] *** frew left
[13:23] *** bartolin joined
[13:23] *** domm_holiday joined
[13:24] *** huf joined
[13:24] *** luiz_lha joined
[13:24] *** frew joined
[13:24] *** mattp_ joined
[13:24] *** luiz_lha is now known as Guest12682

[13:24] *** araujo joined
[13:24] <FROGGS> Ven: are you still here?

[13:24] <Ven> FROGGS: yes

[13:24] <Ven> I'm afraid masak isn't anymre

[13:24] *** mtj_ joined
[13:24] *** _itz_ left
[13:24] *** mr-foobar left
[13:24] *** preyalone left
[13:24] *** nebuchadnezzar left
[13:24] *** lea left
[13:24] *** krunen left
[13:24] *** geekosaur left
[13:24] *** tadzik left
[13:24] *** ShimmerFairy left
[13:24] *** robinsmidsrod left
[13:25] *** esh joined
[13:25] *** nebuchadnezzar joined
[13:25] <FROGGS> Ven: I thought you also had to leave already

[13:25] *** lea joined
[13:25] *** _itz joined
[13:25] *** krunen joined
[13:25] <Ven> FROGGS: in a bit less than 2 hrs!

[13:25] <FROGGS> k

[13:25] *** ShimmerFairy joined
[13:25] *** tadzik joined
[13:25] *** mr-foobar joined
[13:25] *** robinsmidsrod joined
[13:25] *** geekosaur joined
[13:25] <FROGGS> I think your charger and your glasses etui is up here

[13:26] <Ven> ..and my bag :)

[13:26] *** camelia left
[13:26] *** araujo left
[13:26] *** camelia joined
[13:27] *** mrf joined
[13:27] *** virtualsue joined
[13:27] <nine> m: say nqp::iscont(my $a);

[13:27] *** Loren_ joined
[13:27] <GLRelia> rakudo-moar 966096: OUTPUT«===============================================================================␤The use of nqp::operations has been deprecated for non-CORE code.  Please␤change your code to not use these non-portable functions.  If you really want␤to keep using nqp:…»

[13:27] *** araujo joined
[13:27] <FROGGS> nine: I think I've got a fix for the [Z] () test

[13:27] *** Ven left
[13:27] <ShimmerFairy> https://github.com/perl6/roast/commit/5e7d42fb821b461fd491173228430d234c2a7e57

[13:27] <nine> \o/

[13:27] <ShimmerFairy> was this commit meant for glr?

[13:28] <ShimmerFairy> Because the changes made break the test file for me on nom

[13:28] *** ChanServ sets mode: +v camelia

[13:28] <camelia> rakudo-moar fd1612: OUTPUT«1␤»

[13:28] <dalek> rakudo/glr: 71d4f4c | (Stefan Seifert)++ | src/core/Array.pm:

[13:28] <dalek> rakudo/glr: Avoid endless loop on flat(Array)

[13:28] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/71d4f4c56d

[13:28] <dalek> rakudo/nom: 6a1879d | lizmat++ | src/core/Deprecations.pm:

[13:28] <dalek> rakudo/nom: Eradicate special casing for camelia

[13:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a1879d4a1

[13:29] <dalek> rakudo/glr: b33f31c | (Stefan Seifert)++ | src/core/Iterable.pm:

[13:29] <dalek> rakudo/glr: Move "undefined" error up the stack

[13:29] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/b33f31c3c3

[13:29] <ShimmerFairy> m: for @(1..3 X 'a'..'b') -> $a, $b { say $a, $b }

[13:29] <camelia> rakudo-moar fd1612: OUTPUT«1a␤1b␤2a␤2b␤3a␤3b␤»

[13:29] <GLRelia> rakudo-moar 966096: OUTPUT«(1 a)(1 b)␤(2 a)(2 b)␤(3 a)(3 b)␤»

[13:29] <ShimmerFairy> m: for 1..3 X 'a'..'b' -> ($a, $b) { say $a, $b }

[13:29] <camelia> rakudo-moar fd1612: OUTPUT«Too few positionals passed; expected 2 arguments but got 0 in sub-signature␤  in block <unit> at /tmp/XBI3orPjSi:1␤␤»

[13:29] <GLRelia> rakudo-moar 966096: OUTPUT«1a␤1b␤2a␤2b␤3a␤3b␤»

[13:29] <ShimmerFairy> seems so :)

[13:30] <laben> nine++ great work as always

[13:30] <timotimo> https://github.com/perl6/gtk-simple/blob/master/lib/GTK/Simple.pm6 ← nine 

[13:31] <dalek> Heuristic branch merge: pushed 17 commits to roast/glr by lizmat

[13:32] *** preyalone joined
[13:32] <dalek> roast: e35f48e | ShimmerFairy++ | S03-metaops/cross.t:

[13:32] <dalek> roast: Revert "fix cross metaop with nested/itemized lists"

[13:32] <dalek> roast: 

[13:32] <dalek> roast: This reverts commit 5e7d42fb821b461fd491173228430d234c2a7e57, which is a

[13:32] <dalek> roast: change seemingly meant for the glr branch. Breaks on nom.

[13:32] <dalek> roast: review: https://github.com/perl6/roast/commit/e35f48e4de

[13:33] <dalek> rakudo/glr: 30ba99b | FROGGS++ | src/core/List.pm:

[13:33] <dalek> rakudo/glr: fix "[Z] ()" to return (), returned Nil before

[13:33] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/30ba99b35a

[13:33] *** mvuets joined
[13:34] <mvuets> o hai!

[13:34] <hoelzro> o/ mvuets 

[13:34] <timotimo> o/

[13:34] *** itz left
[13:35] <nine> timotimo: why not just $code($task, Any);?

[13:38] *** colomon left
[13:38] *** virtualsue left
[13:38] <mvuets> masak: are you coming back to the venue tonight by chance?

[13:39] *** itz joined
[13:40] <hoelzro> mvuets: I think he's heading home =(

[13:40] *** virtualsue joined
[13:41] <[ptc]> o/ mvuets 

[13:41] *** cognominal left
[13:42] <mvuets> while i have a chance to talk to people in person, i was wondering who can help me and answer some question? earlier this year i wanted to hack some P6 specs and testing modules. but not sure if that's a good idea yara yara

[13:44] <mvuets> i am too dumb to hack on the core or whatnot, but could do some nitty-gritty fixes or enhancements. i tend to micro manage and focus on tiny details

[13:44] <[ptc]> mvuets: sounds like the kind of thing I do ;-)

[13:44] *** Ven joined
[13:44] *** colomon joined
[13:45] * colomon takes advantauge of his restored connection to post something pointless: http://appcordions.com/

[13:45] <[ptc]> \o/ bagpipes on Android!

[13:46] <[ptc]> mvuets: what do you want to work on?

[13:46] <hoelzro> mvuets: we've migrated to the salon, if you'd like to join us

[13:46] <dalek> perl6-roast-data: db103c4 | coke++ | / (2 files):

[13:46] <dalek> perl6-roast-data: another glr run for 'today'

[13:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/db103c4665

[13:46] <[ptc]> mvuets: btw: we're all in the Salon downstairs now, so come on down!

[13:46] <colomon> [ptc]: only the keyboard interface.  :(

[13:46] <laben> m: class C {method foo (*@a is copy) {}}; my $c = C.new; $c.foo(Hash)

[13:46] <camelia> rakudo-moar fd1612: ( no output )

[13:46] <GLRelia> rakudo-moar 30ba99: OUTPUT«Invocant requires an instance of type Hash, but a type object was passed.  Did you forget a .new?␤  in method foo at /tmp/ZIBCgltryv:1␤  in block <unit> at /tmp/ZIBCgltryv:1␤␤»

[13:46] <[Coke]> 82 failures.

[13:46] * hoelzro .oO( not to me confused with the saloon )

[13:46] <laben> can someone explain this ^^^ msg to me?

[13:47] <laben> and if it's intended that it is different from nom

[13:48] <nine> laben: it's an error

[13:48] <[ptc]> itz: you have a commit bit on perl6-examples, don't you?

[13:48] <moritz> laben: looks like a bug to me

[13:48] <nine> laben: we're probably trying to call .list on Hash

[13:48] <ab6tract> m: Hash.copy.say

[13:48] <camelia> rakudo-moar fd1612: OUTPUT«Method 'copy' not found for invocant of class 'Hash'␤  in block <unit> at /tmp/Pwuv47e98g:1␤␤»

[13:48] <GLRelia> rakudo-moar 30ba99: OUTPUT«Method 'copy' not found for invocant of class 'Hash'␤  in block <unit> at /tmp/n_4jGdicSi:1␤␤»

[13:48] <ab6tract> oops, nm me :)

[13:49] <ShimmerFairy> nine: it looks to me like perhaps it's thinking 'is copy' needs the same things 'is rw' does, at first glance

[13:49] <timotimo> nine: p6parcel would turn $task into a list that gets filled up with Any for any nulled entries

[13:50] <nine> timotimo: what is $task exactly?

[13:51] *** cognominal joined
[13:53] <timotimo> good question

[13:53] <timotimo> i thought you were going to figure all of this out for me :P

[13:55] *** colomon_ left
[13:55] *** brrt joined
[13:55] *** itz left
[13:56] *** virtualsue left
[13:56] *** ddeimeke joined
[13:56] <dalek> roast/glr: 38af820 | (Stefan Seifert)++ | S04-statements/sink.t:

[13:56] <dalek> roast/glr: Remove obsolete todo marker from test

[13:56] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/38af820522

[13:56] <lizmat> m: sub foo { say &?ROUTINE.name }

[13:56] <camelia> rakudo-moar 6a1879: ( no output )

[13:56] <GLRelia> rakudo-moar 30ba99: ( no output )

[13:57] <nine> timotimo: sorry, if it were something to do with Qt, I'd be interested ;) Couldn't care less about GTK though.

[13:57] <timotimo> heh

[13:57] <lizmat> m: sub foo { if 1 { say &?ROUTINE.name } }()

[13:57] <camelia> rakudo-moar 6a1879: OUTPUT«<unit>␤»

[13:57] <GLRelia> rakudo-moar 30ba99: OUTPUT«<unit>␤»

[13:57] *** colomon left
[13:57] <timotimo> understandably

[13:58] *** colomon joined
[13:58] <lizmat> m: sub foo { if 1 { say &?ROUTINE.name }; &?ROUTINE }()

[13:58] <camelia> rakudo-moar 6a1879: OUTPUT«<unit>␤»

[13:58] <GLRelia> rakudo-moar 30ba99: OUTPUT«<unit>␤»

[13:59] *** khw joined
[13:59] <ddeimeke> Hi guys @spw2015, we like to do a "before / after" retrospective. Can you please tell me the current status of tests failing? It was 102 on Thursday morning, correct?

[14:00] <[ptc]> ddeimeke: afaik, we're under 20 files failing now.  People have been working hard :-)

[14:00] <ddeimeke> Applause \O/

[14:01] <dalek> roast/glr: a645d40 | lizmat++ | S17-promise/start.t:

[14:01] <dalek> roast/glr: Since #122715 is not closed yet, skip this

[14:01] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/a645d40e4f

[14:01] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122715

[14:01] *** average joined
[14:02] <average> jnthn is pushing those presentations hard

[14:03] <laben> mh, i remember reading about possible native c++ bindings, are they planned?

[14:04] <dalek> roast/glr: 0aedac0 | (Stefan Seifert)++ | S03-metaops/cross.t:

[14:04] <dalek> roast/glr: Fix failure caused by faulty merge conflict resolution

[14:04] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0aedac0488

[14:04] <tadzik> laben: hoelzro was talking about it today

[14:04] <ab6tract> average: what do you mean?

[14:04] <tadzik> laben: there's a branch in moarvm that makes them possible iirc

[14:05] <ab6tract> laben: supposedly it just needs a small amount of love

[14:05] *** fame joined
[14:07] <laben> tadzik: interesting, how much would be possible? it would be amazing to be able to map c++ overload to p6 mmd

[14:07] <dalek> rakudo/glr: 33b9374 | (Jimmy Zhuo)++ | src/core/Int.pm:

[14:07] <dalek> rakudo/glr: add native int version of pow

[14:07] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/33b9374264

[14:07] <dalek> rakudo/glr: 905eea0 | coke++ | src/core/ (2 files):

[14:07] <dalek> rakudo/glr: RT #123760 - add Str matchers for comb

[14:07] *** dalek left
[14:07] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123760

[14:08] <mvuets> [ptc]: last time i checked, i wanted to work on S24 (testing) related affairs

[14:08] <tadzik> laben: you'd have to pester hoelzro :)

[14:08] <tadzik> I dunno

[14:08] *** dalek joined
[14:08] *** ChanServ sets mode: +v dalek

[14:08] * hoelzro hides

[14:09] <laben> hoelzro: can you tell me moar?

[14:09] *** tinyblak joined
[14:10] <hoelzro> oh noes, he found me!

[14:10] *** xyf joined
[14:10] <tadzik> . o O ( talk moar to me )

[14:10] <hoelzro> so FROGGS authored it, and you need the moarvm and rakudo cpp branches

[14:10] <hoelzro> I think one of them is called cpp2?

[14:11] <colomon> am I still on here?

[14:11] <hoelzro> looking at the tests in rakudo under t for the C++ native call is a good guide

[14:11] <hoelzro> colomon: yes

[14:11] <colomon> \o/

[14:11] <colomon> github.com massively slow

[14:11] <tadzik> internet bad

[14:11] <lizmat> too much perl6 hacking

[14:11] <laben> hoelzro: no need for special nqp?

[14:12] <hoelzro> laben: I don't think so, but you can check for a C++ branch

[14:12] <ShimmerFairy> hoelzro: how many FFIs out there support C++ libraries, ooc? My limited knowledge tells me it's kind of significant that rakudo can possibly do it :)

[14:12] <hoelzro> ShimmerFairy: very few; I think Julia does?

[14:13] <colomon> tadzik: what’s the diff between perl6-Term-ANSIColor and Terminal::ANSIColor?

[14:13] <hoelzro> I had notes on this...

[14:13] <tadzik> colomon: the latter is newer :)

[14:13] <nine> Maybe merging nom wasn't the best idea today...

[14:13] <hoelzro> ShimmerFairy: it's definitely cool =)

[14:13] <laben> python does, iirc

[14:13] <tadzik> colomon: ab6tract had a good idea to stop using Term:: as a namespace for Terminal stuff, since Term is a thing in perl 6

[14:13] <hoelzro> laben: really? I didn't konw that!

[14:13] <ShimmerFairy> hoelzro: it definitely gives the impression that Perl 6 is one of the few languages that can meet C++ on its own level :P

[14:13] <ShimmerFairy> tadzik: what Term?

[14:14] <hoelzro> ShimmerFairy: on more than one level ;)

[14:14] <laben> hoelzro: not sure, but i remember qt and kde have python bindings

[14:14] <ShimmerFairy> that might be via C bindings, at first guess

[14:14] <hoelzro> ahhh, that was one of my links

[14:14] <hoelzro> about how they did Qt <> Python bindings

[14:14] *** itz joined
[14:14] <hoelzro> I think it may be because Qt is special

[14:14] <laben> ShimmerFairy: actually it seems they have a special way, Smoke they called it

[14:14] <colomon> tadzik: I’m going to quickly design a new smoker-thingy for emmentaler.  Trying to smoke everything in one run is Simply Not Working.

[14:15] <hoelzro> and has introspectability

[14:15] <tadzik> colomon: sounds awesome

[14:15] <ShimmerFairy> hoelzro: yeah, Qt is (as far as I understand it) very much a product of pre-standard-library days, so it tends to be visibly different from other C++ code :)

[14:15] <colomon> tadzik: my design goal is to have it be dead simple and work.  :)

[14:15] <tadzik> colomon: that used to be true for smoker :P

[14:16] <colomon> tadzik: yeah, if these people hadn’t written all these darned modules…  

[14:16] <colomon> ;)

[14:16] *** fame is now known as cwDYKARN

[14:16] <tadzik> hehe

[14:18] *** RabidGravy joined
[14:18] <nine> Could people PLEASE learn how git works?

[14:18] <lizmat> m: sub a(@a) { say @a.perl }; my &w = &[,]; a [[&w]] <a b c>.map: {$_}

[14:18] <camelia> rakudo-moar 6a1879: OUTPUT«(("a", "b"), "c")␤»

[14:18] <GLRelia> rakudo-moar e6c4b9: OUTPUT«(("a", "b"), "c")␤»

[14:18] *** Ven left
[14:18] <ShimmerFairy> hoelzro: the first time I saw dalek report on C++ bindings here, my reaction was "but that's impossible o_o" :P

[14:19] <hoelzro> ShimmerFairy: I just gave a talk about how hard is gets =)

[14:19] <ShimmerFairy> nine: what's the issue?

[14:19] <hoelzro> I wasn't using the C++ native call stuff, though =/

[14:19] <xyf> join C++

[14:19] <laben> hoelzro: dont you "just" need a demangler? XD

[14:19] <xyf> exit

[14:19] *** xyf left
[14:19] <hoelzro> laben: hehehhe

[14:20] *** rurban1 left
[14:20] <ab6tract> laben: as i understand it, C++11 finally includes a stable ABI

[14:20] <ab6tract> which means we would not need any C binding jibber jabber

[14:20] <ShimmerFairy> The point of mangling, AIUI, is to keep code from different compilers mixing together, so I'd be surprised if C++11 standardized it in some way

[14:20] <nine> ShimmerFairy: you reverted a commit on master that was meant for glr. So when we merge master into glr now, we get the revert on glr as well. When I revert the revert there, I get conflicts.

[14:21] *** tinyblak left
[14:21] <[Coke]> regression, now have 163 tests failing. :P

[14:21] <ShimmerFairy> nine: well, I'm not aware of a better solution to handling that specific issue, I simply wanted to fix the nom branch :)

[14:22] *** tinyblak joined
[14:22] <colomon> way to get a unique filename in p6?

[14:22] <laben> hoelzro: i promise you, if we have proper c++ bindings, i'll work my ass off to have proper Qt bindings!

[14:22] <[Coke]> File::Temp ?

[14:22] <tadzik> yes

[14:22] <[Coke]> m: use File::Temp;

[14:22] <camelia> rakudo-moar 6a1879: OUTPUT«===SORRY!===␤Could not find File::Temp in any of:␤  file#/home/camelia/.perl6/2015.07.1-179-g6a1879d/lib␤  inst#/home/camelia/.perl6/2015.07.1-179-g6a1879d␤  file#/home/camelia/rakudo-inst-1/share/perl6/lib␤  file#/home/camelia/rakudo-inst-1/shar…»

[14:22] <GLRelia> rakudo-moar e6c4b9: OUTPUT«===SORRY!===␤Could not find File::Temp in any of:␤  file#/home/steve/.perl6/2015.07.1-634-ge6c4b9d/lib␤  inst#/home/steve/.perl6/2015.07.1-634-ge6c4b9d␤  file#/home/steve/sandbox/perl6/rakudo/install/share/perl6/lib␤  file#/home/steve/sandbox/per…»

[14:22] <nine> Would have been nice to clean up the fallout in glr afterwards, so I wouldn't have had to waste time trying to figure out what happened.

[14:23] <hoelzro> laben++

[14:23] <laben> oh yeah, who takes PR for File::Temp? i got a patch around since some time to make it work for glr

[14:23] <hoelzro> laben: feel free to ping me or FROGGS if you have questions

[14:23] <[Coke]> +S32-str/comb.rakudo.moar aborted 48 test(s)

[14:23] <tadzik> laben: I'm pretty sure I fixed it for glr

[14:24] <tadzik> laben: but it may need another one :D

[14:24] <tadzik> glr crazy

[14:24] <ab6tract> ShimmerFairy: standardized across compilers? no. but stable enough so that you don't need to extern a bunch of crap: suppsoedly. I am just repeating what I came to understand through a previous discussion with FROGGS

[14:24] <nine> [Coke]: yeah, that's from merging master

[14:24] <dalek> perl6-roast-data: ea7ea59 | coke++ | / (2 files):

[14:24] <dalek> perl6-roast-data: another glr run for 'today'

[14:24] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ea7ea59c2d

[14:24] <lizmat> was I premature in merging nom (again) ?   :-(

[14:25] *** tinyblak left
[14:25] <colomon> [Coke]++ tadzik++ FROGGS++

[14:25] <laben> tadzik: didnt see, it's the same fix just without parens. good!

[14:25] <[Coke]> m: print 163-48

[14:25] <camelia> rakudo-moar 6a1879: OUTPUT«115»

[14:25] <GLRelia> rakudo-moar e6c4b9: OUTPUT«115»

[14:25] <[Coke]> still not enough to account for the new failures.

[14:25] *** rurban joined
[14:25] <ShimmerFairy> ab6tract: I'm not familiar with binding stuff for C++, just that one tidbit about how mangling is not defined by the standard for that reason of avoiding inter-compiler messing :)

[14:25] <[Coke]> rebuilding again...

[14:27] *** tinyblak joined
[14:27] <FROGGS> lizmat: I'm starting now to work on CUR

[14:27] <lizmat> FROGGS: cool, shall I join you ?

[14:27] <nine> Oh and now I lost a commit in rakudo/glr because I tried to clean up the merge fallout

[14:27] *** itz left
[14:28] <lizmat> :-(

[14:28] <FROGGS> lizmat: not yet I think, I need to get into it first

[14:28] <lizmat> :-( :-(

[14:28] <laben> hoelzro: unfortunately, i dont know my way around moarvm, the changes done for c++ support are totally undecipherable to me

[14:28] <lizmat> FROGGS: ok

[14:28] <lizmat> m: sub a(@a) { say @a.perl }; my &w = &[,]; a [[&w]] <a b c d>; a [,] <a b c d>   # I don't think these should be different

[14:28] <camelia> rakudo-moar 6a1879: OUTPUT«((("a", "b"), "c"), "d")␤("a", "b", "c", "d")␤»

[14:28] <GLRelia> rakudo-moar e6c4b9: OUTPUT«((("a", "b"), "c"), "d")␤("a", "b", "c", "d")␤»

[14:28] <tadzik> does anyone know if Jonathan Stowe is on IRC?

[14:29] <lizmat> RabidGravy: are you online?

[14:29] <lizmat> tadzik: ^^^

[14:29] <tadzik> lizmat: thanks :)

[14:29] <RabidGravy> I might be

[14:29] <tadzik> awesome

[14:29] <hoelzro> laben: have you seen the tests for it in Rakudo?

[14:29] <tadzik> I tracked you down as an author of cookie tests in HTTP::UA

[14:29] <hoelzro> I'm hoping you don't need to look at MoarVM =)

[14:29] <tadzik> they break on glr and I have no clue wtf they mean :)

[14:30] <ab6tract> ShimmerFairy: I'm only familiar with the fact that it has been a huge PITA in the past but that there is a NativeCall branch that requires no externing, and that this is somehow connext to c++11

[14:30] <RabidGravy> tadzik, it was an ordering thing

[14:30] <lizmat> m: sub a(@a) { say @a.perl }; my &w = &[,]; a [[&w]] <a b c d>; a [,] <a b c d>  # fixing this will fix Supply.zip/zip-latest

[14:30] <camelia> rakudo-moar 6a1879: OUTPUT«((("a", "b"), "c"), "d")␤("a", "b", "c", "d")␤»

[14:30] <GLRelia> rakudo-moar e6c4b9: OUTPUT«((("a", "b"), "c"), "d")␤("a", "b", "c", "d")␤»

[14:30] <tadzik> RabidGravy: okay, but let's say 03-cookies.t:62

[14:31] <tadzik> what does 1 mean there?

[14:31] *** cwDYKARN left
[14:31] <ab6tract> m: my $raw = 'd22;e55'; $raw ~~ s:nth(*-2)[\d+] = 675

[14:31] <camelia> rakudo-moar 6a1879: ( no output )

[14:31] <GLRelia> rakudo-moar e6c4b9: OUTPUT«Attempt to retrieve before :1st match -- :nth(0)␤  in block <unit> at /tmp/tf71xSDyGR:1␤␤»

[14:32] <colomon> Method 'build-stderr' not found for invocant of class 'Str' ???

[14:33] <tadzik> ab6tract: looks like there's 0 matches :)

[14:33] * colomon finds the string in emmentaler.  odd

[14:33] <tadzik> m: my $raw = 'd22;e55'; say($raw ~~ m[\d+]).perl

[14:33] <camelia> rakudo-moar 6a1879: OUTPUT«｢22｣␤»

[14:33] <GLRelia> rakudo-moar e6c4b9: OUTPUT«␤»

[14:34] <tadzik> ha

[14:34] <dalek> roast/glr: e35f48e | ShimmerFairy++ | S03-metaops/cross.t:

[14:34] <dalek> roast/glr: Revert "fix cross metaop with nested/itemized lists"

[14:34] <dalek> roast/glr: 

[14:34] <dalek> roast/glr: This reverts commit 5e7d42fb821b461fd491173228430d234c2a7e57, which is a

[14:34] <dalek> roast/glr: change seemingly meant for the glr branch. Breaks on nom.

[14:34] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/e35f48e4de

[14:34] <dalek> roast/glr: 624f5b7 | (Stefan Seifert)++ | S03-metaops/cross.t:

[14:34] <dalek> roast/glr: Merge branch 'master' into glr

[14:34] <dalek> roast/glr: 

[14:34] <lizmat> m: sub a(@a) { say @a.perl }; a [~] <a b c d>

[14:34] <camelia> rakudo-moar 6a1879: OUTPUT«Type check failed in binding @a; expected 'Positional' but got 'Str'␤  in sub a at /tmp/gF116ipQ8d:1␤  in block <unit> at /tmp/gF116ipQ8d:1␤␤»

[14:34] <GLRelia> rakudo-moar e6c4b9: OUTPUT«Type check failed in binding @a; expected 'Positional' but got 'Str'␤  in sub a at /tmp/WczcASLFPE:1␤  in block <unit> at /tmp/WczcASLFPE:1␤␤»

[14:34] <dalek> roast/glr: Conflicts:

[14:34] <dalek> roast/glr: 	S03-metaops/cross.t

[14:34] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/624f5b7529

[14:34] <dalek> roast/glr: 60a9ada | (Stefan Seifert)++ | S03-metaops/cross.t:

[14:34] <dalek> roast/glr: Fix fallout from reverting a glr commit on master

[14:34] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/60a9ada4bd

[14:34] <dalek> Heuristic branch merge: pushed 17 commits to rakudo/glr by niner

[14:34] <tadzik> regex brokens

[14:35] <RabidGravy> tadzik, the test in general means "exactly one each of those" but I can't remember why I put the

[14:35] <ab6tract> tadzik: crap... that's way worse

[14:35] <RabidGravy> put the 1 ==

[14:36] <nine> t/spec/S02-literals/numeric.t, t/spec/S22-package-format/local.t and t/spec/S32-exceptions/misc.rakudo.moar are failures we imported from nom

[14:36] <ab6tract> m: my $raw = 'd22;e55'; $raw ~~ s:nth(*-2)[\d+] = 675; $raw ~~ s:nth(1) = 555; say $raw

[14:36] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/dVjQQ3FqxQ:1␤------> 3(*-2)[\d+] = 675; $raw ~~ s:nth(1) = 5557⏏5; say $raw␤Couldn't find terminator =␤at /tmp/dVjQQ3FqxQ:1␤------> 3*-2)[\…»

[14:36] <GLRelia> rakudo-moar e6c4b9: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/r0xGqrnOLc:1␤------> 3(*-2)[\d+] = 675; $raw ~~ s:nth(1) = 5557⏏5; say $raw␤Couldn't find terminator =␤at /tmp/r0xGqrnOLc:1␤------> 3*-2)[\…»

[14:37] <ab6tract> m: my $raw = 'd22;e55'; $raw ~~ s:nth(*-2)[\d+] = 675; $raw ~~ s:nth(1)[\d+] = 555; say $raw

[14:37] <camelia> rakudo-moar 6a1879: OUTPUT«d555;e55␤»

[14:37] <GLRelia> rakudo-moar e6c4b9: OUTPUT«Attempt to retrieve before :1st match -- :nth(0)␤  in block <unit> at /tmp/n6CKIZfkyb:1␤␤»

[14:37] <ab6tract> that works in glr locally

[14:38] <dalek> doc: 5c0d9f9 | (Will Coleda)++ | WANTED:

[14:38] <dalek> doc: Update WANTED

[14:38] <dalek> doc: review: https://github.com/perl6/doc/commit/5c0d9f922e

[14:39] <laben> hoelzro: what is missing for c++ support? fixing bugs or actual features?

[14:40] <[Coke]> 1036 tickets.

[14:40] <smls> [Coke]: Isn't that the wrong repository?

[14:41] <[Coke]> smls: ... for what?

[14:41] <ab6tract> laben: FROGGS++ knows more

[14:41] <hoelzro> laben: FROGGS is more in the know on that, but I think it's pretty much ready

[14:41] <[Coke]> I thought perl6/doc was for docs?

[14:41] <smls> [Coke]: For advent posts stuff

[14:41] <[Coke]> there is no "repo" for advent posts.

[14:41] <tadzik> there is

[14:41] *** telex left
[14:41] <[Coke]> but the request is for a tutorial.

[14:41] <tadzik> https://github.com/perl6/mu/tree/master/misc/perl6advent-2014

[14:41] <[Coke]> for docs. not specifically for an advent post. and we don't record requests for advent post.

[14:42] <FROGGS> laben: using it and fixing bugs, aye

[14:42] <FROGGS> I mean, discovering bugs...

[14:42] <smls> [Coke]: Ok.

[14:42] *** telex joined
[14:42] <[Coke]> anyway, RT was not the right spot, this is slightly better.

[14:42] *** spider-mario joined
[14:43] <jdv79> is it right that perl6 --doc actually runs the file?

[14:43] <tadzik> yes

[14:43] <jdv79> so to get the pod all deps have to be available?

[14:43] <tadzik> yes

[14:43] <ab6tract> m: my $raw = 'd22;e55'; $raw ~~ s:nth(*-2)[\d+] = 675; print "\n"; $raw ~~ s:nth(1) = 555; say $raw

[14:43] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/dE2JBpjNTk:1␤------> 3 675; print "\n"; $raw ~~ s:nth(1) = 5557⏏5; say $raw␤Couldn't find terminator =␤at /tmp/dE2JBpjNTk:1␤------> 03675; …»

[14:43] <GLRelia> rakudo-moar 6c97f3: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/LwZBhkwruS:1␤------> 3 675; print "\n"; $raw ~~ s:nth(1) = 5557⏏5; say $raw␤Couldn't find terminator =␤at /tmp/LwZBhkwruS:1␤------> 03675; …»

[14:43] <skids> tadzik, ab6tract: :nth is 1-based.  use *-1.

[14:43] <laben> FROGGS: good! but does it do only simple C-style bindings or does it also do overloads?

[14:43] <ab6tract> m: my $raw = 'd22;e55'; $raw ~~ s:nth(*-2)[\d+] = 675; print "\n"; $raw ~~ s:nth(1)[\d+] = 555; say $raw

[14:43] <camelia> rakudo-moar 6a1879: OUTPUT«␤d555;e55␤»

[14:43] <GLRelia> rakudo-moar 6c97f3: OUTPUT«Attempt to retrieve before :1st match -- :nth(0)␤  in block <unit> at /tmp/Q1J8u71LCB:1␤␤»

[14:44] <ab6tract> skids: why would that matter? as demonstrated, this behavior works

[14:44] <tadzik> skids: it's worse than that

[14:44] <ab6tract> *on nom

[14:44] <tadzik> m: my $raw = 'd22;e55'; say($raw ~~ m[\d+]).perl

[14:44] <camelia> rakudo-moar 6a1879: OUTPUT«｢22｣␤»

[14:44] <GLRelia> rakudo-moar 6c97f3: OUTPUT«␤»

[14:44] <ab6tract> the whole point is that I need to change the last two elements without toughing anything earlier

[14:44] <tadzik> skids: ^

[14:45] <ab6tract> *touching

[14:45] <skids> Yeah I changed it when glrizing because nom is wrong.

[14:45] <ab6tract> skids: then explain how I can get the behavior I want

[14:46] <skids> Ten you need :nth(*,*-1)  or vice versa

[14:46] <FROGGS> laben: atm it does mangled symbol lookup but no overloads

[14:46] <ab6tract> why change the semantics from "hey it's the same as array access" ?

[14:46] <skids> Because it never was.

[14:47] <skids> :nth(1) is the first element, as *opposed* to array access.

[14:47] <ab6tract> m: my $raw = 'd22;e55'; $raw ~~ s:nth(*-1)[\d+] = 675;

[14:47] <camelia> rakudo-moar 6a1879: ( no output )

[14:47] <GLRelia> rakudo-moar 6c97f3: ( no output )

[14:47] <ab6tract> skids: but you have changed the "end of list" semantics

[14:47] <ShimmerFairy> Think of the * as the 'n' in 'nth' for WhateverCodes passed to :nth  :)

[14:48] <ab6tract> but I see your meaning now

[14:48] <skids> Those semantics are meant for 0-based things.

[14:48] <skids> It screws with divisions.

[14:49] <ShimmerFairy> *-1 doesn't technically mean "end of list", it's just that array subscripting chooses to give WhateverCode objects the number of elements in a list.

[14:50] <ab6tract> ShimmerFairy: yeah, I get it. thanks :)

[14:50] <ShimmerFairy> you're welcome :)

[14:51] *** fame joined
[14:51] <ab6tract> and skids++ for fixing it

[14:51] <skids> np

[14:51] *** pflanze joined
[14:55] <[Coke]> is there a way to get git diff to NOT show  long line change as multi lines? I normally want that, but I have this one repo where one of the lines is a few 1000 chars.

[14:56] *** Ven joined
[14:57] <tadzik> [Coke]: I think your $PAGER is to blame

[14:58] <dalek> perl6-roast-data: dc546fc | coke++ | / (2 files):

[14:58] <dalek> perl6-roast-data: another glr run for 'today'

[14:58] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/dc546fc590

[14:58] <pflanze> Why do I not get the path that I -I printed when perl6 doesn't find a module?: perl6 -I `pwd`/lib -M Tree -e '' 2>&1|grep `pwd` # returns nothing

[14:58] <[Coke]> down to 126 test failures; this is still higher than our min of 80-something.

[14:58] <ShimmerFairy> [Coke]: in `less` , I know you can hit arrow right and it'll suddenly convert over to unwrapped lines (since by pressing right you're saying you want to see more of a line). Not sure of any settings beyond that

[14:58] <tadzik> pflanze: oh, p5 does that, right?

[14:59] <tadzik> pflanze: I guess no one ever thought of implementing it :)

[14:59] <[Coke]> tadzik: PAGER= git diff, same thing.

[14:59] <skids> Need to add an -S to less invoke somehow.

[15:00] <skids> Different users of less sometimes have their own options env var.

[15:00] <[Coke]> ShimmerFairy: yes, but that actuallys moves the "window" to the right. when you move back to the left again, it re-warps.

[15:00] <[Coke]> *wraps

[15:00] <mvuets> export LESS=FRXi

[15:00] <tadzik> [Coke]: I just did git diff | less -S and it worked

[15:00] <mvuets> or press "-S" while in `less`

[15:01] <tadzik> pflanze: if you want to I can probably try to help you implement it in rakudo :)

[15:01] <tadzik> or at least discover why it's actually hard together

[15:02] <[Coke]> mvuets++ wins, as I can do that on the fly and not need to have 2 different ways to git diff; thanks everyone!

[15:02] <pflanze> tadzik, ok so well it loads the modules lazily, fun. Anyway, it prints a message including the search path when reading the program from stdin.

[15:02] <pflanze> And typing some code there.

[15:02] <pflanze> And it doesn't include my path there.

[15:03] <pflanze> tadzik, a better question would be, how do I get a repl from within a file? (i.e. perl6 myfile.p6, where that file contains a repl call)

[15:03] <tadzik> oh, I'm not sure if you can

[15:03] <tadzik> but it would be nice to have

[15:03] <tadzik> you can always use a debugger

[15:04] <dalek> nqp/proc-async-ready: a9f1c5d | hoelzro++ | tools/build/MOAR_REVISION:

[15:04] <dalek> nqp/proc-async-ready: Bump MOAR_REVISION for async process ready callback

[15:04] <dalek> nqp/proc-async-ready: review: https://github.com/perl6/nqp/commit/a9f1c5d811

[15:04] <skids> Funny thing when I was looking at commandline flag emulation I said, heck, why not choose "less" as an example, to find it had completely exhausted the [a-zA-Z] flagspace.

[15:04] *** Ven left
[15:04] <dalek> rakudo/proc-async-ready: b89f786 | hoelzro++ | src/core/Proc/Async.pm:

[15:04] <dalek> rakudo/proc-async-ready: Represent Proc::Async state with status

[15:04] <dalek> rakudo/proc-async-ready: 

[15:04] <dalek> rakudo/proc-async-ready: The state of a Proc::Async is more complicated than started vs

[15:04] <dalek> rakudo/proc-async-ready: not started; this is to help some more complicated pending changes

[15:04] <dalek> rakudo/proc-async-ready: review: https://github.com/rakudo/rakudo/commit/b89f786cd7

[15:04] *** dalek left
[15:05] *** ddeimeke left
[15:05] <tadzik> BAM

[15:05] <hoelzro> ^ could I get some eyes on https://github.com/rakudo/rakudo/commit/b89f786cd7?

[15:05] <hoelzro> thoughts on the new Proc::Async API?

[15:05] *** dalek joined
[15:05] *** ChanServ sets mode: +v dalek

[15:07] *** llfourn joined
[15:08] <dalek> rakudo/proc-async-ready: 54cb9f3 | hoelzro++ | src/core/Proc/Async.pm:

[15:08] <dalek> rakudo/proc-async-ready: Deprecate Proc::Async.start() in favor of ready()/finish()

[15:08] <dalek> rakudo/proc-async-ready: 

[15:08] <dalek> rakudo/proc-async-ready: Proc::Async has a start() method, which prepares a process to be

[15:08] <dalek> rakudo/proc-async-ready: started.  After it returns, there is no guarantee that a process is

[15:08] <dalek> rakudo/proc-async-ready: *actually* running, and some methods (for example: close-stdin, kill)

[15:08] <dalek> rakudo/proc-async-ready: will silently fail, and more importantly, sometimes put the child

[15:09] <dalek> rakudo/proc-async-ready: process and the VM's view of it in a state that locks up the program.

[15:09] <dalek> rakudo/proc-async-ready: 

[15:09] <dalek> rakudo/proc-async-ready: So start() is now deprecated; and it has changed so that after it

[15:09] <dalek> rakudo/proc-async-ready: returns, the process is either running or has already exited.  If you

[15:09] <dalek> rakudo/proc-async-ready: want to execute actions once a process has been started, you should use

[15:09] <dalek> rakudo/proc-async-ready: ready:

[15:09] <hoelzro> er, review that one =)

[15:09] <dalek> rakudo/proc-async-ready: 

[15:09] <dalek> rakudo/proc-async-ready:     await $p.ready();

[15:09] <dalek> rakudo/proc-async-ready:     # do stuff

[15:09] <dalek> rakudo/proc-async-ready:     await $p.finish();

[15:09] <dalek> rakudo/proc-async-ready: review: https://github.com/rakudo/rakudo/commit/54cb9f3719

[15:09] <dalek> rakudo/proc-async-ready: 3feca35 | hoelzro++ | tools/build/NQP_REVISION:

[15:09] <dalek> rakudo/proc-async-ready: Bump NQP_REVISION for proc async ready callback from MVM

[15:09] <dalek> rakudo/proc-async-ready: review: https://github.com/rakudo/rakudo/commit/3feca3567a

[15:09] <hoelzro> sorry for commit spam

[15:10] <moritz> hoelzro: .ready doesn't sound like spawning a process to me

[15:11] <hoelzro> moritz: I was thinking .launch before, but I didn't like it

[15:11] <hoelzro> maybe I should just do .spawn?

[15:11] <moritz> hoelzro: are there any operations that work on a Started Proc::Async object, but not on a Starting one?

[15:11] <hoelzro> moritz: .kill, .close-stdin

[15:11] *** llfourn left
[15:12] <hoelzro> .print, .say, .write

[15:12] <moritz> hoelzro: can't those operations be queued until it has actually started?

[15:12] <moritz> hoelzro: that strikes me as more user-friendly than forcing the user to wait

[15:13] *** fame left
[15:13] <dalek> rakudo/glr: b7bee21 | lizmat++ | src/core/Supply.pm:

[15:13] <dalek> rakudo/glr: An attempt at fixing Supply.zip/zip-latest

[15:13] <dalek> rakudo/glr: 

[15:13] <dalek> rakudo/glr: Problem is that [,] seems to have changed meaning in the GLR.  So, instead,

[15:13] <dalek> rakudo/glr: we're giving the no :with case a separate code path.  Now we only need to

[15:13] <dalek> rakudo/glr: convince the tests that we're doing the right thing.

[15:13] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/b7bee21e81

[15:13] <dalek> rakudo/glr: 07a9a0a | lizmat++ | src/core/List.pm:

[15:13] <dalek> rakudo/glr: Merge branch 'glr' of https://github.com/rakudo/rakudo into glr

[15:13] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/07a9a0a9f9

[15:14] <hoelzro> moritz: part of it was the usage of the idiom "await $p.start"

[15:14] *** mvuets left
[15:14] <hoelzro> jnthn and I thought it read as if you're waiting for the process to start

[15:16] *** CIAvash joined
[15:20] <dalek> roast/glr: 27b20bf | TimToady++ | S03-sequence/misc.t:

[15:20] <dalek> roast/glr: remove two wonky sequence tests

[15:20] <dalek> roast/glr: 

[15:20] <dalek> roast/glr: We shouldn't use the last value generated from a closure match as a seed

[15:20] <dalek> roast/glr: for intuiting the next sequence.

[15:20] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/27b20bfb42

[15:21] *** brrt left
[15:22] *** laouji left
[15:22] <skids> m: my @b = 1,2,3; @b[0,1,2] = 4,5; @b.say; # is leaving @b[2] untouched here correct behavior?

[15:22] <camelia> rakudo-moar 6a1879: OUTPUT«4 5 (Any)␤»

[15:22] <GLRelia> rakudo-moar 07a9a0: OUTPUT«453␤»

[15:22] <skids> Apparently no.

[15:23] <dalek> rakudo/glr: 2a58180 | TimToady++ | src/core/operators.pm:

[15:23] <dalek> rakudo/glr: implement non-caching 3+ arity sequence ops

[15:23] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/2a581808c3

[15:28] <ab6tract> skids: I'm still getting some quite strange behavior with Terminal::Print on the GLR

[15:29] <timotimo> what is Terminal::Print? o_O

[15:29] <ab6tract> it seems to still be related nths

[15:29] <TimToady> m: (1, 2, 6 ... *)[0]

[15:29] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/4upm1Sw_cw:1␤␤Actually thrown at:␤  in block <unit> at /tmp/4upm1Sw_cw:1␤␤»

[15:29] <GLRelia> rakudo-moar 07a9a0: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/qRm7fQhb7L:1␤␤Actually thrown at:␤  in block <unit> at /tmp/qRm7fQhb7L:1␤␤»

[15:29] <TimToady> m: (1, 2, 6 ... *)[1]

[15:29] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/IKGutkSe4a:1␤␤Actually thrown at:␤  in block <unit> at /tmp/IKGutkSe4a:1␤␤»

[15:29] <GLRelia> rakudo-moar 07a9a0: ( no output )

[15:29] <ab6tract> timotimo: https://github.com/ab5tract/Terminal-Print

[15:30] <ab6tract> timotimo: tl;dr -- the foundations of a PP ncurses replacement :)

[15:30] <TimToady> m: (1, 2, 6 ... *)[^1]

[15:30] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/DIpQdDVCxl:1␤␤Actually thrown at:␤  in block <unit> at /tmp/DIpQdDVCxl:1␤␤»

[15:30] <GLRelia> rakudo-moar 07a9a0: ( no output )

[15:30] <timotimo> ooooh

[15:30] <TimToady> m: (1, 2, 6 ... *).eager

[15:30] <camelia> rakudo-moar 6a1879: ( no output )

[15:30] <GLRelia> rakudo-moar 2a5818: ( no output )

[15:30] <timotimo> go damn, the heat is making me feel very uncomfortable

[15:31] <timotimo> god damn*

[15:31] <TimToady> m: (1, 2, 6 ... *).sink

[15:31] <camelia> rakudo-moar 6a1879: ( no output )

[15:31] <GLRelia> rakudo-moar 2a5818: ( no output )

[15:31] <colomon> m: say [1..10].shuffle

[15:31] <camelia> rakudo-moar 6a1879: OUTPUT«Method 'shuffle' not found for invocant of class 'Array'␤  in block <unit> at /tmp/NSdoF2pGXU:1␤␤»

[15:31] <GLRelia> rakudo-moar 2a5818: OUTPUT«Method 'shuffle' not found for invocant of class 'Array'␤  in block <unit> at /tmp/Z_p_YcJ5AI:1␤␤»

[15:31] <colomon> pick!

[15:32] <moritz> pick(

[15:32] <TimToady> m: (1, 2, 6 ... *).say

[15:32] <moritz> *)

[15:32] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/twCe8D_t_v:1␤␤Actually thrown at:␤  in block <unit> at /tmp/twCe8D_t_v:1␤␤»

[15:32] <GLRelia> rakudo-moar 2a5818: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/PAqGZa7ka9:1␤␤Actually thrown at:␤  in block <unit> at /tmp/PAqGZa7ka9:1␤␤»

[15:32] <ab6tract> timotimo: one day declaring terminal ui will be as easy as passing some Rats to a ui constructors :)

[15:32] <TimToady> m: (1, 2, 6 ... *).pick(*)

[15:32] <camelia> rakudo-moar 6a1879: OUTPUT«Cannot .pick from an infinite list␤  in block <unit> at /tmp/PdZE0WcKgy:1␤␤Actually thrown at:␤  in block <unit> at /tmp/PdZE0WcKgy:1␤␤»

[15:32] <GLRelia> rakudo-moar 2a5818: OUTPUT«Cannot .pick from a lazy list␤  in block <unit> at /tmp/fVzmbWt70R:1␤␤Actually thrown at:␤  in block <unit> at /tmp/fVzmbWt70R:1␤␤»

[15:32] <timotimo> ab6tract: i wante dto build something like that a long time ago. i wanted to call it "libcatui"

[15:32] <timotimo> "kiCk-Ass Terminal UI"

[15:33] <TimToady> m: (1, 2, 6 ... *)[1].say

[15:33] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/Y0YmBf__vb:1␤␤Actually thrown at:␤  in block <unit> at /tmp/Y0YmBf__vb:1␤␤»

[15:33] <GLRelia> rakudo-moar 2a5818: OUTPUT«Nil␤»

[15:33] <ab6tract> Terminal::Print is the infrastructure, it's "only" missing async

[15:34] <ab6tract> timotimo: so, plenty of room for catui on top :)

[15:34] <timotimo> cats do like to be on top of things

[15:34] <skids> ab6tract: can you find an input to one of those *-template subs that produces different results on GLR vs nom?

[15:35] <TimToady> sequences seem to work again, except for the non-failure ^^^

[15:35] <timotimo> ab6tract: your last-name rocks, btw

[15:35] <ab6tract> skids: examples/zig-zag.p6 shows some really terrible behavior

[15:36] <ab6tract> on GLR

[15:36] <ab6tract> unfortunately GLR requires b937b5c8, and nom requires 2d3557f2

[15:38] <skids> Well... there's a failed test in there but I can't see it due to cleared screens.

[15:38] * skids pipes through a pager

[15:38] <ab6tract> skids: and t/basics.t gives a "cannot modify immutable Str" error

[15:38] <ShimmerFairy> I never heard why Term had to be changed to Terminal.

[15:38] <ab6tract> ShimmerFairy: because Term is an actual thing in Perl 6

[15:38] <ab6tract> so leave that open to things about Terms

[15:38] <ab6tract> that's the idea anyway

[15:39] <ab6tract> also, even if Term:: stayed about terminals, I don't like abbreviations in almost all cases :P

[15:39] <ShimmerFairy> I've never heard of Term though, what is it?

[15:39] <ab6tract> everything that is not operator

[15:39] <ab6tract> *an

[15:39] <ShimmerFairy> that's term though

[15:40] <hoelzro> does anyone have any opposition to a #line directive, as in Perl 5?

[15:40] <hoelzro> or an idea for something sixier?

[15:40] <ab6tract> ShimmerFairy: so what? we are talking about module namespaces. lower case modules are usually pragmas

[15:40] <colomon> +1 to #line

[15:40] <ab6tract> why does it matter?

[15:40] <[Coke]> I get 19 test files failing on the last run. 126 test fails. next run almost done.

[15:40] <ShimmerFairy> There are no pragma modules in P6 though o_-

[15:41] <ShimmerFairy> hoelzro: what do you mean by a #line directive?

[15:41] <ab6tract> skids: really tough to build a programmatic test harness for this.. so it requires a human to interpret

[15:41] *** llfourn joined
[15:42] <ab6tract> in fact 4..7 are all broken -- should be screens full of hearts, not just one

[15:42] <TimToady> hoelzro: gee, we could allow 'constant $?line =" to work instead of #line

[15:43] <hoelzro> ShimmerFairy: the main reason is so that --ll-exception points to src/core/ instead of m-CORE.setting

[15:43] <ab6tract> # at t/basics.t line 17\n # Cannot modify an immutable Str

[15:43] <hoelzro> TimToady: so have a $?filename as well?

[15:43] <ShimmerFairy> hoelzro: that's what $?LINE is for :)

[15:43] <hoelzro> I like that.

[15:43] <ShimmerFairy> and $?FILE (?)

[15:43] <hoelzro> ah ha!

[15:43] <hoelzro> ShimmerFairy++ TimToady++ # enlightenment

[15:43] <ShimmerFairy> but you can't modify them yet :(

[15:45] *** prevost joined
[15:46] <ab6tract> skids: 4..6, sorry. test 7 is not "screen full of hearts" related :)

[15:48] <ab6tract> skids: WARNING: unhandled Failure detected in DESTROY: \n Cannot shift from an empty Array

[15:48] <ab6tract> that's the one that comes from examples/zig-zag.p6

[15:49] <ab6tract> which are triggered by the nths in the cursor-template

[15:50] <skids> m: https://gist.github.com/skids/d804af84ed6122ba4a53 # that part seems to work

[15:50] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8W3p6loMV7␤Confused␤at /tmp/8W3p6loMV7:1␤------> 3https:7⏏5//gist.github.com/skids/d804af84ed6122ba␤    expecting any of:␤        colon pair␤»

[15:50] <GLRelia> rakudo-moar 2a5818: OUTPUT«5===SORRY!5=== Error while compiling /tmp/HTCoTXv3Ao␤Confused␤at /tmp/HTCoTXv3Ao:1␤------> 3https:7⏏5//gist.github.com/skids/d804af84ed6122ba␤    expecting any of:␤        colon pair␤»

[15:51] <skids> hrm something pasted wrong.

[15:51] <skids> Oh or gists aren't working.

[15:51] <skids> Maybe the :x, :y inputs are not hygenic at some point.

[15:52] <skids> Some extra subunit tests would not hurt this package IMO.

[15:52] <moritz> m: https://gist.github.com/skids/d804af84ed6122ba4a53

[15:52] <camelia> rakudo-moar 6a1879: OUTPUT«qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub QX at src/RESTRICTED.setting:11␤  in sub build-cursor-to-template at /tmp/jbGEQi2Ruz:3␤  in block <unit> at /tmp/jbGEQi2Ruz:14␤␤»

[15:52] <GLRelia> rakudo-moar 2a5818: OUTPUT«qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub QX at src/RESTRICTED.setting:11␤  in sub build-cursor-to-template at /tmp/vf50yATd7W:3␤  in block <unit> at /tmp/vf50yATd7W:14␤␤»

[15:53] <moritz> skids: gist URLs don't work with comments

[15:53] <ab6tract> the "cannot shift from empty array" seems to me to indicate something in nth behavior, to my old eyes

[15:53] <ab6tract> hmm... what do you mean by not hygeinic?

[15:54] <moritz> ab6tract: have you tried "use fatal;"?

[15:54] <ab6tract> skids: to be sure. I was only beginning to blow some dust off. probably shouldn't have bothered with the GLR at the moment, but it was too tempting

[15:54] <skids> Like maybe something is dumping an iterator in :x or something.

[15:55] <ab6tract> skids: would that work even when the signature is type constrained to Int ?

[15:55] <skids> Oh, I guess not, type safety++

[15:55] <ab6tract> moritz: never needed to. the thing works swimmingly on nom

[15:57] <ab6tract> moritz: until I try to make it use supplies, that is ;)  .. which happens periodically

[15:59] <hoelzro> [Coke]: https://gist.github.com/hoelzro/65d3f16fe294d7d1bb0b

[15:59] *** lizmat left
[15:59] <hoelzro> (summary of what I did)

[15:59] <timotimo> moritz: i ended up not working on a release :|

[15:59] <nine> How do I fix Object of type QAST::Op in QAST::WVal, but not in SC?

[16:03] <moritz> nine: you need to call $*W.add_object($obj) before sticking an object into a QAST::WVal

[16:04] *** ab6tract left
[16:04] <nine> I think I actually don't want a WVal

[16:04] *** CIAvash left
[16:04] *** smls_ joined
[16:04] <nine> I'm really just trying to add a named parameter to a methodcall where the value is computed at runtime

[16:05] *** smls left
[16:05] <arnsholt> nine: What are you working on? Some context might make it easier to figure out

[16:06] <nine> arnsholt: The for statement compiles to a simpo09	

[16:06] <nine> arnsholt: The for statement compiles to a simple .map now. I need to change it to my \tmp := for-list; for-list.map($block, :item(nqp::iscont(for-list));

[16:07] <moritz> nine: you can just call .name($name-of-the-named-param) on a QAST::Node

[16:08] <nine> moritz: so like my $iscont := QAST::Op.new(:op('iscont'), QAST::Var.new( :name($for-list-name), :scope('local') ); $iscont.name('item'); $call.push($iscont);?

[16:08] *** smls_ is now known as smls

[16:08] <moritz> nine: yes

[16:09] *** cognominal left
[16:09] <moritz> nine: and you can use $qast.unique('for-list') to generate a unique name for a temporary

[16:10] <arnsholt> Oh, that's a neat feature. Where $qast is any QAST object?

[16:10] *** colomon left
[16:11] *** colomon joined
[16:11] <nine> I've seen QAST::Node.unique('foo')

[16:12] <nine> moritz: is it .name or .named?

[16:12] <arnsholt> Right, so probably a static method on QAST::Node then, so should work on most anything

[16:12] <arnsholt> .named, IIRC

[16:13] *** prevost left
[16:15] <nine> \o/ It works!

[16:18] *** ddeimeke joined
[16:18] *** ddeimeke left
[16:18] <ugexe> whats the point of deprecating proc::async.start if the functionality of the deprecated function completely changes?

[16:19] <ugexe> why not leave it the same or just remove it

[16:21] *** itz joined
[16:21] *** yqt joined
[16:22] *** domidumont joined
[16:22] *** virtualsue joined
[16:24] <ugexe> oh i am mistaken. .start awaits on the promise that its ready, not finished

[16:28] *** colomon left
[16:29] *** FROGGS left
[16:34] *** lolisa joined
[16:34] <_itz> smls: I get an rss parsing error with your feed.  see PR for details

[16:35] <smls> Well, it's an atom feed :P

[16:35] * smls will take a look

[16:37] <dalek> rakudo/glr: 7aee0ac | (Stefan Seifert)++ | src/ (2 files):

[16:37] <dalek> rakudo/glr: Make for $@arr { } iterate only once

[16:37] <dalek> rakudo/glr: 

[16:37] <dalek> rakudo/glr: my @arr = 1, 2;

[16:37] <dalek> rakudo/glr: for @arr {} will iterate twice

[16:37] <dalek> rakudo/glr: for $@arr {} will iterate once

[16:37] <dalek> rakudo/glr: @arr.map: {} will iterate twice

[16:37] <dalek> rakudo/glr: $@arr.map: {} will iterate twice

[16:37] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/7aee0acfdd

[16:37] <nine> moritz++

[16:37] <nine> arnsholt++

[16:37] <nine> Thanks guys!

[16:40] *** khw left
[16:40] *** colomon joined
[16:40] <smls> _itz: I had extraneous whitespace at the start of my feed; Should be fixed now.

[16:44] <dalek> roast/glr: 95e773b | (Stefan Seifert)++ | integration/advent2011-day16.t:

[16:44] <dalek> roast/glr: Change test to test for the actually desired for semantics

[16:44] <dalek> roast/glr: 

[16:44] <dalek> roast/glr: Make for $@arr { } iterate only once

[16:44] <dalek> roast/glr: 

[16:44] <dalek> roast/glr: my @arr = 1, 2;

[16:44] <dalek> roast/glr: for @arr {} will iterate twice

[16:44] <dalek> roast/glr: for $@arr {} will iterate once

[16:44] <dalek> roast/glr: @arr.map: {} will iterate twice

[16:44] <dalek> roast/glr: $@arr.map: {} will iterate twice

[16:44] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/95e773b921

[16:44] <dalek> perl6-roast-data: 854ad44 | coke++ | / (2 files):

[16:44] <dalek> perl6-roast-data: another glr run for 'today'

[16:44] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/854ad441b3

[16:44] *** colomon left
[16:46] *** larion joined
[16:47] *** lizmat joined
[16:47] <[Coke]> who was it owned twitter/perlhex?

[16:48] <laben> m: sub foo(*@m) {}; foo(Hash)

[16:48] <camelia> rakudo-moar 6a1879: ( no output )

[16:48] <GLRelia> rakudo-moar 7aee0a: OUTPUT«Invocant requires an instance of type Hash, but a type object was passed.  Did you forget a .new?␤  in sub foo at /tmp/D3LAGukejc:1␤  in block <unit> at /tmp/D3LAGukejc:1␤␤»

[16:48] <laben> m: sub foo(*@m) {}; foo(List)

[16:48] <camelia> rakudo-moar 6a1879: ( no output )

[16:48] <GLRelia> rakudo-moar 7aee0a: OUTPUT«Invocant requires an instance of type List, but a type object was passed.  Did you forget a .new?␤  in sub foo at /tmp/XpbHDeZGxW:1␤  in block <unit> at /tmp/XpbHDeZGxW:1␤␤»

[16:48] *** FROGGS joined
[16:48] <laben> anyone can give me a hint on ^^^ to know where to begin to investigate?

[16:49] <dalek> rakudo/glr: 74cc8c8 | lizmat++ | src/core/Supply.pm:

[16:49] <dalek> rakudo/glr: One step closer to fixing Supply.zip-latest

[16:49] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/74cc8c8a2c

[16:49] <dalek> rakudo/glr: f35d9de | lizmat++ | src/ (3 files):

[16:49] <dalek> rakudo/glr: Merge branch 'glr' of https://github.com/rakudo/rakudo into glr

[16:49] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/f35d9de4ea

[16:49] *** domm joined
[16:52] <JimmyZ> nine: why cant just nqp:iscont(SELF) ?? (SELF,) !! SELF

[16:54] *** MilkmanDan left
[16:54] <skids> ab6stract: I found the source of thise failures but will have to spectest (twice) and then file a PR and wait for it to be pulled.

[16:55] <skids> ab6tract: in the meantime, I left some unrelated GLR patches in that gist, and running everything 2> /dev/null should "work"

[16:56] <skids> oh, he left.

[16:56] <laben> it sounds like it mistakenly believes the Signature has a definedness check, but it actually has not

[16:56] <lizmat> dinner at SPW wrapup&

[16:56] <lizmat> the network is down at the SPW, so only connectivity is on 3G

[16:57] <lizmat> and not many people have that

[16:57] <lizmat> later!

[16:57] <lizmat> afk&

[16:57] *** lizmat left
[16:58] <JimmyZ> nine: oh, I know now, for is abit different from map

[17:06] *** MilkmanDan joined
[17:10] *** kaare__ left
[17:18] *** itz left
[17:21] * skids thought "for $foo" was going to stay exactly $foo.map as a sugar.

[17:21] *** virtualsue left
[17:22] *** yqt left
[17:22] <skids> Though I really don't have a preference.

[17:25] *** rurban left
[17:29] *** kaare__ joined
[17:30] *** espadrine left
[17:31] *** tinyblak left
[17:33] *** kaare__ left
[17:44] *** ShimmerFairy left
[17:46] <nine> skids: people seem to expect something else. And this way we stick to the GLRR rules regarldless of how for is implemented

[17:48] *** kaare__ joined
[17:48] *** skids left
[17:48] *** cognominal joined
[17:56] *** ShimmerFairy joined
[18:15] <dalek> rakudo/glr: 918cf63 | skids++ | src/core/Str.pm:

[18:15] <dalek> rakudo/glr: Prevent generation of X::Cannot::Empty Failures in :nth processing.

[18:15] <dalek> rakudo/glr: 

[18:15] <dalek> rakudo/glr: There was a case where the result of shift() could escape without

[18:15] <dalek> rakudo/glr: being handled.  Probably more efficient not to generate any Failure

[18:15] <dalek> rakudo/glr: objects in the first place, so do that.

[18:15] <dalek> rakudo/glr: 

[18:15] <dalek> rakudo/glr: ab[56]tract++ for unearthing with a long-running script.

[18:15] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/918cf63b95

[18:15] <dalek> rakudo/glr: a977dc3 | FROGGS++ | src/core/Str.pm:

[18:15] <dalek> rakudo/glr: Merge pull request #520 from skids/glr3

[18:15] <dalek> rakudo/glr: 

[18:15] <dalek> rakudo/glr: Prevent generation of X::Cannot::Empty Failures in :nth processing.

[18:15] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/a977dc3969

[18:21] *** lolisa left
[18:22] *** ChoHag joined
[18:22] *** lolisa joined
[18:22] <ChoHag> If I have a class which does Positional, how do I write a for loop for each of its elements?

[18:22] *** perl6_newbee joined
[18:22] <ChoHag> Pre-GLR.

[18:22] <perl6_newbee> Hi all

[18:23] <perl6_newbee> Can someone help me and explain how I can store hashes in an array?

[18:24] <ChoHag> The naïve "my $foo = Class::Which::Does::Positional.new(...); for $foo { ... }" didn't work.

[18:24] <ChoHag> m: my %foo = a => 1, b => 2; my @bar = 1, %foo, 2; @bar.perl.say

[18:24] <camelia> rakudo-moar 6a1879: OUTPUT«[1, :a(1), :b(2), 2]<>␤»

[18:24] <GLRelia> rakudo-moar a977dc: OUTPUT«[1, {:a(1), :b(2)}, 2]␤»

[18:24] <ChoHag> Like that.

[18:25] <ChoHag> Hmm GLR changes the auto-flattening behaviour.

[18:25] <ChoHag> m: my %foo = a => 1, b => 2; my @bar = 1, {%foo}, 2; @bar.perl.say

[18:25] <camelia> rakudo-moar 6a1879: OUTPUT«[1, {:a(1), :b(2)}, 2]<>␤»

[18:25] <GLRelia> rakudo-moar a977dc: OUTPUT«[1, {:a(1), :b(2)}, 2]␤»

[18:25] <perl6_newbee> hmm

[18:25] <perl6_newbee> I always get either a block or LoL. 

[18:26] <ChoHag> m: my %foo = a => 1, b => 2; my @bar = 1, %{%foo}, 2; @bar.perl.say

[18:26] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Wn3zMAqLlq␤Unsupported use of %{%foo}; in Perl 6 please use %(%foo)␤at /tmp/Wn3zMAqLlq:1␤------> 3o = a => 1, b => 2; my @bar = 1, %{%foo}7⏏5, 2; @bar.perl.say␤»

[18:26] <GLRelia> rakudo-moar a977dc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/JeUb06h4dQ␤Unsupported use of %{%foo}; in Perl 6 please use %(%foo)␤at /tmp/JeUb06h4dQ:1␤------> 3o = a => 1, b => 2; my @bar = 1, %{%foo}7⏏5, 2; @bar.perl.say␤»

[18:26] <ChoHag> m: my %foo = a => 1, b => 2; my @bar = 1, %(%foo), 2; @bar.perl.say

[18:26] <camelia> rakudo-moar 6a1879: OUTPUT«[1, :a(1), :b(2), 2]<>␤»

[18:26] <GLRelia> rakudo-moar a977dc: OUTPUT«[1, {:a(1), :b(2)}, 2]␤»

[18:26] <ChoHag> heh

[18:28] *** kaare_ joined
[18:28] <timotimo> [Coke]: https://soundcloud.com/mcfreshdawg3000/crawling-in-my-baby-one-more-time-re-edit

[18:29] <perl6_newbee> @array.push(%( key1 => 1 )) Is that the right syntax?

[18:29] *** breinbaas left
[18:30] <[ptc]> m: @array.push(%( key1 => 1 ))

[18:30] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CFvSVYzUVE␤Variable '@array' is not declared. Did you mean any of these?␤    array␤    Array␤␤at /tmp/CFvSVYzUVE:1␤------> 3<BOL>7⏏5@array.push(%( key1 => 1 ))␤»

[18:30] <GLRelia> rakudo-moar a977dc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wSTokQ6hBg␤Variable '@array' is not declared. Did you mean any of these?␤    array␤    Array␤␤at /tmp/wSTokQ6hBg:1␤------> 3<BOL>7⏏5@array.push(%( key1 => 1 ))␤»

[18:30] *** kaare__ left
[18:31] <[ptc]> m: my @array; @array.push(%( key1 => 1 ))

[18:31] <camelia> rakudo-moar 6a1879: ( no output )

[18:31] <GLRelia> rakudo-moar a977dc: ( no output )

[18:31] <[ptc]> m: my @array; @array.push(%( key1 => 1 )).perl.say

[18:31] <camelia> rakudo-moar 6a1879: OUTPUT«[:key1(1)]<>␤»

[18:31] <GLRelia> rakudo-moar a977dc: OUTPUT«[:key1(1)]␤»

[18:32] <[ptc]> perl6_newbee: if you wanted to push a hash onto an array, that's probably ok

[18:32] <perl6_newbee> @ptc: thx

[18:32] *** tinyblak joined
[18:36] <perl6_newbee> %( ... ) is the way to do it thx

[18:36] *** lolisa left
[18:37] *** tinyblak left
[18:38] *** rurban joined
[18:39] *** prevost joined
[18:42] *** colomon joined
[18:43] <dalek> perl6-roast-data: 7c0b649 | coke++ | / (2 files):

[18:43] <dalek> perl6-roast-data: another glr run for 'today'

[18:43] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/7c0b6493cc

[18:44] *** darutoko- joined
[18:45] <[Coke]> back down to 18 files failing, 106 failures.

[18:46] *** darutoko left
[18:47] <colomon> nooo…  where’d we backslide?

[18:47] *** lizmat joined
[18:47] *** rangerprice joined
[18:48] *** prevost left
[18:48] <[Coke]> post nom merge.

[18:49] <[Coke]> er, -with-, not post.

[18:49] <[Coke]> Who was the perlhex fellow, anyone remember his name?

[18:50] <tadzik> nine's gonna be pissed :o

[18:50] <tadzik> [Coke]: muvets

[18:50] <tadzik> I think

[18:50] *** eternaleye joined
[18:50] *** lizmat_ joined
[18:51] <tadzik> mvuets!

[18:51] <tadzik> http://act.perl-workshop.ch/spw2015/user/2625

[18:53] *** lizmat left
[18:55] *** dha joined
[18:55] <[Coke]> danke

[18:55] * dha wonders if he's having a perl6 problem or a un*x problem...

[18:56] <[Coke]> use grammars, and then you'll hav.... sorry, what's the problem?

[18:56] *** Guest12682 left
[18:57] *** Loren_ left
[18:58] <dha> trying to build panda. it's bailing out and asking me if /Users/dha/rakudo/install/share/perl6/site/bin is in your PATH. It is, indeed, the first thing in my PATH

[18:59] <ChoHag> How can you have a un*x problem on a mac?

[18:59] *** Loren joined
[19:00] <dha> OS X is, technically, a bsd derivative. :-)

[19:00] *** perl6_newbee left
[19:00] <dha> If you prefer, though, I could characterize it as a PATH problem, specifically.

[19:01] *** Loren left
[19:01] <ChoHag> Well having not built panda, all I can do is disparage your choice of quasi-operating-system.

[19:01] *** Loren joined
[19:02] <dha> I suppose you could do that, but it would not make me think much of your advice. :-)

[19:03] *** Loren left
[19:03] <dha> Maybe I'll just try rebuilding rakudo again from scratch. *shrug*

[19:04] <ChoHag> All I can suggest that's con-, rather than de-, structive is that somebody has taken an automake system and wrapped "magic" around it.

[19:04] <ChoHag> You need to debug the magic.

[19:04] <ChoHag> As per fucking usual.

[19:05] <dha> i'm... unclear how that would have happened since I last built things, but, I suppose that's possible.

[19:05] <ChoHag> Because fuck magic.

[19:07] <[Coke]> dha: make sure you're using a recent panda?

[19:07] *** rindolf left
[19:07] <dha> did a git pull just before rebuilding.

[19:08] <ChoHag> There you go.

[19:08] <[Coke]> m: .say for OUTER::OUTER::.values;

[19:08] <camelia> rakudo-moar 6a1879: OUTPUT«(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)…»

[19:08] <GLRelia> rakudo-moar a977dc: OUTPUT«(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)…»

[19:08] <ChoHag> You probably didn't clean properly and it broke the magic.

[19:08] <[Coke]> m: my $stash = OUTER::OUTER::; .say for %stash.map({ %stash{$_} })

[19:08] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lkxLpIIKDU␤Variable '%stash' is not declared. Did you mean any of these?␤    $stash␤    Stash␤␤at /tmp/lkxLpIIKDU:1␤------> 3= OUTER::OUTER::; .say for %stash.map({ 7⏏5%stash{$_} })␤»

[19:08] <GLRelia> rakudo-moar a977dc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/UCJEFuD5sI␤Variable '%stash' is not declared. Did you mean any of these?␤    $stash␤    Stash␤␤at /tmp/UCJEFuD5sI:1␤------> 3= OUTER::OUTER::; .say for %stash.map({ 7⏏5%stash{$_} })␤»

[19:08] <dha> That is possible.

[19:08] *** rindolf joined
[19:08] <ChoHag> $ grep -i magic .profile echo "Fuck magic"

[19:08] <[Coke]> m: my %stash = OUTER::OUTER::; .say for %stash.map({ %stash{$_} })

[19:08] <camelia> rakudo-moar 6a1879: OUTPUT«Use of uninitialized value <element> of type Mu in string context  in block  at /tmp/bInF751r1z:1␤(Any)␤Use of uninitialized value <element> of type Mu in string context  in block  at /tmp/bInF751r1z:1␤(Any)␤Use of uninitialized value <element> of …»

[19:08] <GLRelia> rakudo-moar a977dc: OUTPUT«Use of uninitialized value <element> of type Mu in string context  in block  at /tmp/7yOxAcFrNG:1␤(Any)␤Use of uninitialized value <element> of type Mu in string context  in block  at /tmp/7yOxAcFrNG:1␤(Any)␤Use of uninitialized value <element> of …»

[19:09] <ChoHag> It's not like make was specifically designed for exactly that eventuality or anything.

[19:09] <colomon>  m: (1, 2, 5 … 10).perl.say

[19:09] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,5 (or did you really mean '..'?)␤  in block <unit> at /tmp/yTv_iyXqXv:1␤␤Actually thrown at:␤  in block <unit> at /tmp/yTv_iyXqXv:1␤␤»

[19:09] <GLRelia> rakudo-moar a977dc: OUTPUT«(Failure.new(exception => X::Sequence::Deduction.new(from => "1,2,5"), backtrace => Backtrace.new))␤»

[19:09] <rangerprice> It would be great for perl to be a statically typed language

[19:09] <moritz> m: signal(SIGINT).tap( {die} );

[19:09] <camelia> rakudo-moar 6a1879: ( no output )

[19:09] <GLRelia> rakudo-moar a977dc: OUTPUT«Can only use merge to combine defined Supply objects␤  in any  at src/gen/m-Metamodel.nqp:1679␤  in block <unit> at /tmp/q3MKHrjqsk:1␤␤»

[19:09] <moritz> rangerprice: it wouldn't be perl

[19:09] <moritz> ^^ this is a new failure, I think

[19:10] <[Coke]> .ask hoelzro can you review RT #123154 ?

[19:10] <yoleaux> [Coke]: I'll pass your message to hoelzro.

[19:10] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123154

[19:10] *** tybalt89 joined
[19:11] <ChoHag> Is there a counter variable in a for loop (for $thing[0..*] { ... }) which will tell me which element of the list is being processed?

[19:11] <[Coke]> m:  class Sinker { method sink() { say "Blub" } };  my $i = 0; while $i < 5 { $i++; Sinker.new(); }; 1 

[19:11] <camelia> rakudo-moar 6a1879: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤Blub␤Blub␤Blub␤Blub␤Blub␤»

[19:11] <GLRelia> rakudo-moar a977dc: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤Blub␤Blub␤Blub␤Blub␤Blub␤»

[19:11] *** tybalt89 left
[19:11] <[Coke]> m:  class Sinker { method sink() { say "Blub" } };  for ^5 { Sinker.new(); }; 1

[19:11] <camelia> rakudo-moar 6a1879: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤»

[19:11] <GLRelia> rakudo-moar a977dc: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤»

[19:11] <colomon> ChoHag: no, but you can $thing[0..*].kv to get pairs of index and item at that index

[19:12] <moritz> ChoHag: you can use  for @mylist.kv -> $index, $value { ... }

[19:12] <timotimo> "use rammars 

[19:12] <timotimo> sorry

[19:12] <timotimo> why can i start typing into ssh, notice the connection is dead, kill the connection and reconnect and in the mean time the characters have actually been sent ?!?

[19:13] <tadzik> ssh funni

[19:13] <ChoHag> I think that is exactly the right way to do it.

[19:13] <tadzik> ¯\(°_o)/¯

[19:13] <colomon> m: (1, 2, 6 ... *).perl.say

[19:13] <camelia> rakudo-moar 6a1879: OUTPUT«(ListIter.new,)␤»

[19:13] <GLRelia> rakudo-moar a977dc: OUTPUT«Cannot .elems a lazy list␤  in block <unit> at /tmp/Qz3BDcK8Yq:1␤␤Actually thrown at:␤  in block <unit> at /tmp/Qz3BDcK8Yq:1␤␤»

[19:13] <ChoHag> Because your assumption was incorrect.

[19:13] <ChoHag> Tho connection wasn't dead.

[19:13] <moritz> timotimo: because you're not using mosh :-)

[19:14] <ChoHag> You were just impatient.

[19:14] * colomon thought about trying mosh on the plane flight.

[19:14] <timotimo> weird.

[19:14] <colomon> m: (1, 2, 6 ... *).say

[19:14] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/ukb8YlCqJ1:1␤␤Actually thrown at:␤  in block <unit> at /tmp/ukb8YlCqJ1:1␤␤»

[19:14] <GLRelia> rakudo-moar a977dc: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/uzItt6IMrl:1␤␤Actually thrown at:␤  in block <unit> at /tmp/uzItt6IMrl:1␤␤»

[19:14] <ChoHag> Once I was working over a VPN in the morning, closed my laptop, commuted into the office (~ 30 minutes) and when I sat down my connections were still open.

[19:15] <ChoHag> TCP is even better than what we take for granted.

[19:15] <colomon> I just had an ssh connection to hack survive my laptop being shutdown for a couple of hours.  Was completely astounded

[19:16] <ChoHag> shut down or put to sleep?

[19:16] <moritz> probably hybernated

[19:17] <moritz> with ssh connections, I get the impression that they survive a network outage more often if I don't press a key while the network is down

[19:17] <colomon> laptop closed, slept I would imagine.  Certianly didn’t burn any noticable amount of battery

[19:17] <ChoHag> That has been my untested experience.

[19:18] <tadzik> yeah, if you don't do anything they don't have a reason to think anything is wrong :)

[19:18] <moritz> .oO( what do SSH and oppressive regimes have in common? :-)

[19:18] <tadzik> hehe

[19:19] <colomon> lizmat_, nine: looking at S03-sequence/misc.t, it seems like rakudo is working properly but throws-like is not verifying it properly?

[19:19] <tadzik> . o O ( living in a shel )

[19:20] <ChoHag> Oppressive regimes assume something is wrong whether you do anything or not.

[19:21] <lizmat_> colomon: the throws-like  could well be faulty

[19:21] <ChoHag> It's the self-proclaimed non-oppressive regimes which make that assumption.

[19:22] <dha> Bleh. Pod::Parser is failing tests. And possibly because a pull request from may hasn't been merged. God, software is awful.

[19:22] <colomon> m: use Test; throws-like { 1, 2, 5 ... 10 }, X::Sequence::Deduction, from => '1,2,5'

[19:22] <camelia> rakudo-moar 6a1879: OUTPUT«    1..3␤    ok 1 - code dies␤    ok 2 - right exception type (X::Sequence::Deduction)␤    ok 3 - .from matches 1,2,5␤ok 1 - did we throws-like X::Sequence::Deduction?␤»

[19:22] <GLRelia> rakudo-moar a977dc: OUTPUT«    1..3␤    not ok 1 - code dies␤    ␤# Failed test 'code dies'␤# at /tmp/1NKM6uxdXN line 1␤    ok 2 - # SKIP Code did not die, can not check exception␤    ok 3 - # SKIP Code did not die, can not check exception␤    # Looks like you failed 1…»

[19:22] <ChoHag> Anyway on that note...

[19:22] <tadzik> ...there's Pod::Parser

[19:22] <tadzik> ?

[19:22] *** ChoHag left
[19:23] <tadzik> oh, that parses POD, not Pod

[19:23] <TimToady> colomon, lizmat_: no, the problem is sequences don't seem to be responding to .sink, .eager, or .[5]

[19:23] <tadzik> fairy nuff

[19:23] <TimToady> they do respond to .[0], go figure

[19:23] <colomon> hmmm?

[19:24] <dha> ...what's the difference between POD and Pod?

[19:24] <tadzik> POD is Perl 5 

[19:24] <tadzik> Pod is Perl 6

[19:24] <TimToady> m: (1, 2, 6 ... *)[0]

[19:24] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/wtaPd6pZSX:1␤␤Actually thrown at:␤  in block <unit> at /tmp/wtaPd6pZSX:1␤␤»

[19:24] <GLRelia> rakudo-moar a977dc: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/jaA3xC4bdy:1␤␤Actually thrown at:␤  in block <unit> at /tmp/jaA3xC4bdy:1␤␤»

[19:24] *** bin_005_l joined
[19:24] <dha> Ah. ok.

[19:24] <TimToady> m: (1, 2, 6 ... *)[1]

[19:24] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,6 (or did you really mean '..'?)␤  in block <unit> at /tmp/JrSDXMM4qX:1␤␤Actually thrown at:␤  in block <unit> at /tmp/JrSDXMM4qX:1␤␤»

[19:24] <GLRelia> rakudo-moar a977dc: ( no output )

[19:24] <lizmat_> TimToady: that feels like it's being considered a scalar, not a list/array

[19:24] <dha> Yes.

[19:24] <tadzik> Yeah, to avoid confusion

[19:24] <dha> Ha!

[19:24] <tadzik> :)

[19:24] <tadzik> like PERL and Perl

[19:24] <tadzik> PERL is the old one

[19:24] <dha> In that case we should call it Bruce.

[19:24] <TimToady> it's return a List, currently experimenting with forcing return of Seq

[19:25] <dha> Well, PERL is generally considered... wrong. :-)

[19:25] <tadzik> it used to be right though, wasn't it?

[19:25] <colomon> TimToady: that’s a different issue, isn’t it?

[19:25] *** domidumont left
[19:25] <[Coke]> PERL has never been right, IME, but I'm a n00b.

[19:26] <dha> tadzik - I don't think so.

[19:26] <[Coke]> I take -1 off a resume whenever I see it.

[19:26] <tadzik> I may be wrong :)

[19:27] <dalek> rakudo/glr: 9ecd136 | lizmat++ | src/core/Supply.pm:

[19:27] <dalek> rakudo/glr: Fix Supply.zip

[19:27] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/9ecd136e82

[19:27] <dha> from the faqs: But never write "PERL",

[19:27] <dha>     because perl is not an acronym.

[19:27] <colomon> …everything respond to .[0], right?

[19:28] <dalek> rakudo/glr: 817a11a | (Stefan Seifert)++ | src/core/Array.pm:

[19:28] <dalek> rakudo/glr: Have Array.List actually return a plain List not an Array

[19:28] <dalek> rakudo/glr: 

[19:28] <dalek> rakudo/glr: For when we use an Array to collect some results but really want to

[19:28] <dalek> rakudo/glr: return a plain List to not leak implementation details.

[19:28] <dalek> rakudo/glr: 

[19:28] <dalek> rakudo/glr: The generic .List coercer cannot just re-bind $!reified however, because

[19:28] <dalek> rakudo/glr: we don't know if the Array is being changed afterwards, so we have to

[19:28] <dalek> rakudo/glr: clone first.

[19:28] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/817a11a448

[19:29] <dalek> perl6-roast-data: a32cbf6 | coke++ | / (2 files):

[19:29] <dalek> perl6-roast-data: another glr run for 'today'

[19:29] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a32cbf6a1f

[19:29] <colomon> m: my $code = { 1, 2, 5 …. 10 }; $code()

[19:29] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/aRYHd44cQf␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at /tmp/aRYHd44cQf:1␤------> 3my $code = { 1, 2, 5 …. 7⏏0510 }; $code()␤»

[19:29] <GLRelia> rakudo-moar a977dc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ucmCj89ktb␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at /tmp/ucmCj89ktb:1␤------> 3my $code = { 1, 2, 5 …. 7⏏0510 }; $code()␤»

[19:30] *** colomon_ joined
[19:30] <[Coke]> still failing 19 files; number of test failures INCREASED to 107 from 106

[19:30] <timotimo> :(

[19:30] <colomon_> m: my $code = { 1, 2, 5 ... 10 }; $code()

[19:30] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,5 (or did you really mean '..'?)␤  in block <unit> at /tmp/cPBet9HRhW:1␤␤Actually thrown at:␤  in block <unit> at /tmp/cPBet9HRhW:1␤␤»

[19:30] <GLRelia> rakudo-moar 9ecd13: ( no output )

[19:31] <[Coke]> looks like roast changed since the last run, but not rakudo.

[19:31] <dalek> rakudo/glr: a057dd4 | moritz++ | src/core/Supply.pm:

[19:31] <dalek> rakudo/glr: Supply.merge should flatten its args

[19:31] <dalek> rakudo/glr: 

[19:31] <dalek> rakudo/glr: otherwise signal(SIGINT) dies.

[19:31] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/a057dd43f9

[19:32] <[Coke]> ... kicking off another one.

[19:32] <moritz> 14 test files failed with my last run after this commit

[19:32] <[Coke]> here's hoping.

[19:32] <[Coke]> was it 19 before? ;)

[19:32] <moritz> dunno

[19:33] <colomon_> m: my $code = { 1, 2, 5 ... 10 }; say $code().perl

[19:33] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,5 (or did you really mean '..'?)␤  in block <unit> at /tmp/S4ZUlS1mWC:1␤␤Actually thrown at:␤  in block <unit> at /tmp/S4ZUlS1mWC:1␤␤»

[19:33] <GLRelia> rakudo-moar 9ecd13: OUTPUT«(Failure.new(exception => X::Sequence::Deduction.new(from => "1,2,5"), backtrace => Backtrace.new))␤»

[19:33] <colomon_> m: my $code = { 1, 2, 5 ... 10 }; say $code()

[19:33] <camelia> rakudo-moar 6a1879: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,5 (or did you really mean '..'?)␤  in block <unit> at /tmp/VeIzxvrYQh:1␤␤Actually thrown at:␤  in block <unit> at /tmp/VeIzxvrYQh:1␤␤»

[19:33] <GLRelia> rakudo-moar 9ecd13: OUTPUT«Unable to deduce arithmetic or geometric sequence from 1,2,5 (or did you really mean '..'?)␤  in block <unit> at /tmp/7v24bO_Ubt:1␤␤Actually thrown at:␤  in block <unit> at /tmp/7v24bO_Ubt:1␤␤»

[19:33] *** FROGGS left
[19:34] <TimToady> .[0], .perl, and .gist are sufficient to trigger it; .eager, .sink, and .[5] are not

[19:34] <TimToady> and making it return a Seq doesn't help

[19:35] *** colomon left
[19:35] <dalek> rakudo/glr: 81229f7 | TimToady++ | src/core/operators.pm:

[19:35] <dalek> rakudo/glr: allow more smartmatches than just Callable on ...

[19:35] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/81229f71f5

[19:35] <dalek> rakudo/glr: 8f3e7b3 | TimToady++ | src/core/operators.pm:

[19:35] <dalek> rakudo/glr: make sequence op return a Seq, duh

[19:35] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/8f3e7b3e7d

[19:36] *** colomon joined
[19:36] <dalek> roast/glr: 0fcc9eb | TimToady++ | S03-sequence/misc.t:

[19:36] <dalek> roast/glr: seq op returns a Seq now

[19:36] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0fcc9eb04b

[19:37] <[Coke]> m: Int.Range.say; Num.Range.say;

[19:37] <camelia> rakudo-moar 6a1879: OUTPUT«-Inf..Inf␤-Inf..Inf␤»

[19:37] <GLRelia> rakudo-moar a057dd: OUTPUT«(timeout)»

[19:38] <[Coke]> ^^ There's another GLR bug.

[19:39] <colomon> TimToady: Type check failed in binding; expected 'Positional' but got 'Seq'

[19:39] <colomon> that’s my @rt80574 := -> { 'zero', 'one' } ... *;

[19:40] <[Coke]> up to 9 [GLR] tickets in rt.

[19:40] <smls> I wrote my first Perl 6 blog post: postcircumfix.com/2015-08-29-untangling-the-perl-6-hashpair-type-hierarchy \o/

[19:41] *** Sgeo_ joined
[19:41] <TimToady> colomon: see my last checkin above

[19:41] <dha> smls - congratulations!

[19:41] <colomon> TimToady: right, using that commit is how I got the new test failure

[19:41] <TimToady> though why that doesn't coerce to list automatically, I'm not sure

[19:41] <colomon> TimToady: should binding coerce?

[19:42] <dha> smls - ...except I'm getting a 404 from that. :-/

[19:42] <TimToady> colomon: no, the checking to the misc.t

[19:42] <smls> dha: huh?

[19:42] <tadzik> smls: ooh, nice :)

[19:43] <smls> dha: Did something add a slash to the end of the URL maybe?

[19:43] <smls> my current nginx config doesn;t support that

[19:43] <dha> oh, maybe. Let me look.

[19:43] <dha> ah, there we go.

[19:44] *** Sgeo left
[19:44] <dalek> rakudo/glr: 287360b | lizmat++ | src/core/Array.pm:

[19:44] <dalek> rakudo/glr: Fix typo of nine++

[19:44] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/287360bb9a

[19:45] <TimToady> m: constant @foo = 1,2,4 ... *; say @foo.WHAT

[19:45] <camelia> rakudo-moar 6a1879: OUTPUT«(List)␤»

[19:45] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«(Seq)␤»

[19:45] <TimToady> m: constant @foo = 1,2,4 ... *; say @foo[10]

[19:45] <camelia> rakudo-moar 6a1879: OUTPUT«1024␤»

[19:45] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«1024␤»

[19:45] <dha> Hm. I'm trying to figure out a one-liner but I'm obviously missing some kind of magic needed.

[19:45] <TimToady> m: my @foo = 1,2,4 ... *; say @foo[10]

[19:45] <camelia> rakudo-moar 6a1879: OUTPUT«1024␤»

[19:45] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«1024␤»

[19:46] *** colomon left
[19:47] <dha> To get the lines in a file that aren't blank, I can use perl6 -e 'lines.grep(/\S/).elems.say' So, if I wanted to find the *blank* lines... how would I negate that grep condition?

[19:47] <dha> (I could use, for instance, perl6 -e 'lines.grep(/^\s$/).elems.say' but this has me curious.

[19:47] <dha> )

[19:47] <TimToady> m: constant @foo = -> { 'a', 'b' } ... *; say @foo.WHAT

[19:47] <camelia> rakudo-moar 6a1879: OUTPUT«(List)␤»

[19:47] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«(Seq)␤»

[19:48] <TimToady> m: my @foo := -> { 'a', 'b' } ... *; say @foo.WHAT

[19:48] <camelia> rakudo-moar 6a1879: OUTPUT«(List)␤»

[19:48] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«Type check failed in binding; expected 'Positional' but got 'Seq'␤  in block <unit> at /tmp/JX0x8oXuWM:1␤␤»

[19:48] <TimToady> m: my (*@foo) ::= -> { 'a', 'b' } ... *; say @foo.WHAT

[19:48] <camelia> rakudo-moar 6a1879: OUTPUT«(Array)␤»

[19:48] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«(Array)␤»

[19:49] *** llfourn left
[19:49] <laben> m: lines.grep(/\S/).elems.say

[19:49] <camelia> rakudo-moar 6a1879: OUTPUT«17␤»

[19:49] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«(timeout)»

[19:49] <dha> The first thing that occurred to me was perl6 -e 'lines.grep(! /\S/).elems.say' but that doesn't seem to work.

[19:49] <TimToady> m: my (@foo) ::= (-> { 'a', 'b' } ... *); say @foo.WHAT

[19:49] <camelia> rakudo-moar 6a1879: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/ZmQVMMMn9v:1␤␤»

[19:49] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/evmb7wro3c:1␤␤»

[19:49] <laben> m: lines.grep(not /\S/).elems.say

[19:49] <camelia> rakudo-moar 6a1879: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/cyRP1gkE7J:1␤␤»

[19:49] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/hVCjPiwl1G:1␤␤»

[19:50] <laben> m: lines.grep(* !~~ /\S/).elems.say

[19:50] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/7AKQ2aIW7u␤Variable '&infix:<!~~>' is not declared␤at /tmp/7AKQ2aIW7u:1␤------> 3lines.grep(* 7⏏5!~~ /\S/).elems.say␤»

[19:50] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/TU99BRiesM␤Variable '&infix:<!~~>' is not declared␤at /tmp/TU99BRiesM:1␤------> 3lines.grep(* 7⏏5!~~ /\S/).elems.say␤»

[19:50] <laben> m: lines.grep(* !~ /\S/).elems.say

[19:50] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/9bFUcHkCx9␤Unsupported use of !~ to do negated pattern matching; in Perl 6 please use !~~␤at /tmp/9bFUcHkCx9:1␤------> 3lines.grep(* !~ 7⏏5/\S/).elems.say␤»

[19:50] <GLRelia> rakudo-moar 8f3e7b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/4dYE5WUxvK␤Unsupported use of !~ to do negated pattern matching; in Perl 6 please use !~~␤at /tmp/4dYE5WUxvK:1␤------> 3lines.grep(* !~ 7⏏5/\S/).elems.say␤»

[19:50] <laben> wait why does it say infix !~~ not declared?

[19:50] <TimToady> colomon_: anyway, it's probably a bug, just not a sequence op bug

[19:51] <laben> m: lines.grep({ $_ !~~ /\S/}).elems.say

[19:51] <camelia> rakudo-moar 6a1879: OUTPUT«3␤»

[19:52] <GLRelia> rakudo-moar 287360: OUTPUT«(timeout)»

[19:52] *** cognominal left
[19:53] <dha> oh. the star thing. I tried $_ !~~ /\S/ ...

[19:54] <laben> it works but dunno why it hangs on glr

[19:55] <TimToady> m: lines.grep(none(/\S/)).elems.say

[19:55] <camelia> rakudo-moar 6a1879: OUTPUT«3␤»

[19:55] <dha> Huh. It wasn't working for me. let me try that again...

[19:55] <GLRelia> rakudo-moar 287360: OUTPUT«(timeout)»

[19:55] <TimToady> m: lines.grep(*).elems.say

[19:55] <camelia> rakudo-moar 6a1879: OUTPUT«20␤»

[19:55] <[Coke]> r: for our $:: ();

[19:55] <camelia> rakudo-{moar,jvm} 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Signatures as constraints on variables not yet implemented. Sorry. ␤at /tmp/tmpfile:1␤------> 3for our $:: ()7⏏5;␤»

[19:55] <GLRelia> rakudo-moar 287360: OUTPUT«(timeout)»

[19:55] <GLRelia> rakudo-jvm 287360: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[19:55] <GLRelia> ..rakudo-moar 287360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Signatures as constraints on variables not yet implemented. Sorry. ␤at /tmp/tmpfile:1␤------> 3for our $:: ()7⏏5;␤»

[19:55] <dha> oh. I forgot to use braces. duh.

[19:56] <[Coke]> m: $::

[19:56] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/qyCyFL1Z6t␤Variable '$' is not declared␤at /tmp/qyCyFL1Z6t:1␤------> 3<BOL>7⏏5$::␤»

[19:56] <GLRelia> rakudo-moar 287360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/chCtyvb9XT␤Variable '$' is not declared␤at /tmp/chCtyvb9XT:1␤------> 3<BOL>7⏏5$::␤»

[19:56] <TimToady> m: lines.elems.say

[19:56] <camelia> rakudo-moar 6a1879: OUTPUT«20␤»

[19:56] <GLRelia> rakudo-moar 287360: OUTPUT«(timeout)»

[19:56] <TimToady> m: lines.list.elems.say

[19:56] <camelia> rakudo-moar 6a1879: OUTPUT«20␤»

[19:57] <GLRelia> rakudo-moar 287360: OUTPUT«(timeout)»

[19:57] *** colomon joined
[19:58] <colomon> TimToady++ # dunno how I missed that

[19:58] *** colomon left
[19:59] *** kaare_ left
[20:00] <dha> Other question that is probably indicating foolishness or senility on my part...

[20:01] <dha> perl6 -ne 'say "{++$} $_"' example.txt would output the contents of example.txt with line numbers prepended.

[20:01] *** lizmat_ left
[20:01] <dha> But "++$" is not ringing a bell with me, and I have no idea how I would even begin to find it in the docs.

[20:02] *** colomon_ left
[20:03] <TimToady> a bare $ is short for state $ which is an anonymous state variable

[20:04] *** colomon joined
[20:04] *** colomon left
[20:05] <dha> You don't say. :-) That's not actually in the documentation somewhere by any chance, is it?

[20:05] <dha> (and by documentation I mean doc, not spec)

[20:05] <TimToady> m: my (@foo) ::= (-> { 'a', 'b' } ... *).item; say @foo.WHAT

[20:05] <camelia> rakudo-moar 6a1879: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/88dUmKwnDg:1␤␤»

[20:05] <GLRelia> rakudo-moar 287360: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/Bq9kY3gpf6:1␤␤»

[20:06] <TimToady> m: my (@foo) ::= \((-> { 'a', 'b' } ... *)); say @foo.WHAT

[20:06] <camelia> rakudo-moar 6a1879: OUTPUT«(List)␤»

[20:06] <GLRelia> rakudo-moar 287360: OUTPUT«(List)␤»

[20:06] <dha> Huh. 'anonymous state' only appears to be in specs once, and isn't clearly documented. *sad face*

[20:11] <TimToady> yeah, we put it in as an experiment, and then started using it without much speccing, alas

[20:11] *** itz joined
[20:13] *** dha left
[20:14] *** xfix left
[20:18] *** darutoko- left
[20:19] *** colomon joined
[20:19] <tadzik> hoelzro: ping

[20:21] <dalek> perl6-roast-data: d60396c | coke++ | / (2 files):

[20:21] <dalek> perl6-roast-data: another glr run for 'today'

[20:21] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d60396c306

[20:22] <dalek> roast/glr: f5f1ba7 | (Stefan Seifert)++ | integration/advent2010-day04.t:

[20:22] <dalek> roast/glr: Fix regressions from sequence rewrite in advent2010-day04.t

[20:22] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/f5f1ba713f

[20:23] *** FROGGS joined
[20:24] <dalek> roast/glr: 0e074f5 | (Stefan Seifert)++ | integration/advent2010-day11.t:

[20:24] <dalek> roast/glr: Fix sequence rework regression in advent2010-day11.t

[20:24] <dalek> roast/glr: 

[20:24] <dalek> roast/glr: No need to use binding for infinite sequences anymore

[20:24] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0e074f5114

[20:25] <[Coke]> Down to 53 failing tests, in 15 files

[20:25] *** lizmat joined
[20:25] <tadzik> I'm afraid to blink

[20:25] <[Coke]> (so I finally caught up with liz's pronouncement from an hour ago or so. :)

[20:25] <dalek> roast/glr: 5de4787 | TimToady++ | S03-sequence/misc.t:

[20:25] <dalek> roast/glr: previous patch better solved with assignment

[20:25] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/5de4787849

[20:26] <dalek> roast/glr: 96058c0 | (Stefan Seifert)++ | integration/advent2012-day14.t:

[20:26] <dalek> roast/glr: Fix sequence rework regrssion in advent2012-day14.t

[20:26] <dalek> roast/glr: 

[20:26] <dalek> roast/glr: No need to use binding for infinite sequences anymore. Just assign them

[20:26] <dalek> roast/glr: to an array.

[20:26] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/96058c00d2

[20:27] *** pmurias joined
[20:28] <lizmat> m: int8.Range.say

[20:28] <camelia> rakudo-moar 6a1879: OUTPUT«-128..127␤»

[20:28] <GLRelia> rakudo-moar 287360: OUTPUT«-128-127-126-125-124-123-122-121-120-119-118-117-116-115-114-113-112-111-110-109-108-107-106-105-104-103-102-101-100-99-98-97-96-95-94-93-92-91-90-89-88-87-86-85-84-83-82-81-80-79-78-77-76-75-74-73-72-71-70-69-68-67-66-65-64-63-62-61-60-59-58-57-56-55-54-5…»

[20:28] <TimToady> huh

[20:29] <lizmat> yeah

[20:29] <dalek> roast/glr: aad89b6 | (Stefan Seifert)++ | integration/lazy-bentley-generator.t:

[20:29] <dalek> roast/glr: Another sequence rework regression fix

[20:29] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/aad89b6929

[20:30] <lizmat> m: say Int.Range  # 1st arg rule in action

[20:30] <camelia> rakudo-moar 6a1879: OUTPUT«-Inf..Inf␤»

[20:30] *** rurban left
[20:30] <lizmat> m: say int8.Range  # 1st arg rule in action

[20:30] <camelia> rakudo-moar 6a1879: OUTPUT«-128..127␤»

[20:30] <GLRelia> rakudo-moar 287360: OUTPUT«(timeout)»

[20:30] <GLRelia> rakudo-moar 287360: OUTPUT«-128-127-126-125-124-123-122-121-120-119-118-117-116-115-114-113-112-111-110-109-108-107-106-105-104-103-102-101-100-99-98-97-96-95-94-93-92-91-90-89-88-87-86-85-84-83-82-81-80-79-78-77-76-75-74-73-72-71-70-69-68-67-66-65-64-63-62-61-60-59-58-57-56-55-54-5…»

[20:32] <[Coke]> r: role Foo { method bar {...} }; say Foo.perl

[20:32] <GLRelia> rakudo-jvm 287360: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[20:32] <GLRelia> ..rakudo-moar 287360: OUTPUT«Method 'bar' must be implemented by Foo because it is required by a role␤  in any compose_method_table at src/gen/m-Metamodel.nqp:2666␤  in any apply at src/gen/m-Metamodel.nqp:2676␤  in any compose at src/gen/m-Metamodel.nqp:2812␤  in any make_pun…»

[20:32] <lizmat> [Coke]: ^^

[20:32] <camelia> rakudo-jvm 6a1879: OUTPUT«Method 'bar' must be implemented by Foo because it is required by a role␤  in any compose_method_table at gen/jvm/Metamodel.nqp:2653␤  in any apply at gen/jvm/Metamodel.nqp:2663␤  in any compose at gen/jvm/Metamodel.nqp:2799␤  in any make_pun at gen…»

[20:32] <camelia> ..rakudo-moar 6a1879: OUTPUT«Method 'bar' must be implemented by Foo because it is required by a role␤  in any compose_method_table at src/gen/m-Metamodel.nqp:2664␤  in any apply at src/gen/m-Metamodel.nqp:2674␤  in any compose at src/gen/m-Metamodel.nqp:2810␤  in any make_pun…»

[20:32] <[Coke]> I just touched a ticket about int ranges..

[20:33] <[Coke]> see RT #124082

[20:33] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124082

[20:33] <[Coke]> m: say Num.Range;

[20:33] <camelia> rakudo-moar 6a1879: OUTPUT«-Inf..Inf␤»

[20:33] <GLRelia> rakudo-moar 287360: OUTPUT«(timeout)»

[20:33] <lizmat> [Coke]: and there it goes of making an infinite list

[20:33] <lizmat> *off

[20:34] <[Coke]> one of the 9 or so [GLR] RTs I found digging today

[20:34] <lizmat> according to the 1st arg rule, it is doing the right thing

[20:34] <lizmat> m: say $(Int.Range)

[20:34] <camelia> rakudo-moar 6a1879: OUTPUT«-Inf..Inf␤»

[20:34] <[Coke]> m: class T{}; class S is T{}

[20:34] <camelia> rakudo-moar 6a1879: OUTPUT«===SORRY!===␤Cannot find method 'has_compile_time_value'␤»

[20:35] <lizmat> que?

[20:35] <GLRelia> rakudo-moar 287360: OUTPUT«(timeout)»

[20:35] <GLRelia> rakudo-moar 287360: OUTPUT«===SORRY!===␤Cannot find method 'has_compile_time_value'␤»

[20:35] <[Coke]> (that last one wasn't GLR related)

[20:37] <[ptc]> thanks everyone for the workshop and hackathon.  That was lots of fun :-)

[20:39] <nine> Still is :)

[20:39] <colomon> It was / is great!

[20:39] <colomon> but I need to sleep very soon….

[20:41] <hahainternet> so this is neat

[20:41] <hahainternet> someone posted this on reddit: http://rosettacode.org/wiki/Lychrel_numbers

[20:41] <hahainternet> and it looks like it can be done with p6's infinite list + sequence op

[20:41] <hahainternet> with initiail, {$^a+flip($^a)} ... *

[20:41] <hahainternet> also with better spelling, one would hope

[20:43] <timotimo> achieving a cold shower felt much more rewarding than achieving cold fusion tonight

[20:43] <[ptc]> yeah, it's mega hot...

[20:43] <[ptc]> and opening the windows in the hotel room isn't helping much.  Lots of traffic noise...

[20:44] <colomon> m: sub Lychrel($n) { $n, -> $a { $a + $a.flip } … -> $a { $a == $a.flip }; } sat Lychrel(4)

[20:44] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6JNkiPAbfC␤Strange text after block (missing semicolon or comma?)␤at /tmp/6JNkiPAbfC:1␤------> 3+ $a.flip } … -> $a { $a == $a.flip }; }7⏏5 sat Lychrel(4)␤    expecting any of:␤        infix…»

[20:44] <GLRelia> rakudo-moar 287360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/3tY5DDf4rD␤Strange text after block (missing semicolon or comma?)␤at /tmp/3tY5DDf4rD:1␤------> 3+ $a.flip } … -> $a { $a == $a.flip }; }7⏏5 sat Lychrel(4)␤    expecting any of:␤        infix…»

[20:44] *** orbus joined
[20:45] <nine> Current official count: 14 spec test files failing :)

[20:45] <nine> And one of them is just because the todo markers don't seem to work

[20:45] <hahainternet> colomon: interesting, where can i read about using pointy blocks like that?

[20:45] <hahainternet> i guess later in s03 maybe

[20:45] <timotimo> nine: point me at the file in question with the todo markers and i'll see what i can do

[20:45] <timotimo> the fudger has some known limitations

[20:45] <_itz> glr singularity approaching?

[20:45] <timotimo> we have #?does for example

[20:46] <nine> timotimo: t/spec/S06-other/pairs-as-lvalues.rakudo.moar

[20:46] <colomon> _itz: probably not tonight, at least if TimToady++ and nine++ finally go to sleep

[20:46] <colomon> hahainternet: …. err, not sure.  probably an advent post somewhere?  

[20:47] <nine> lizmat++ could still fix a couple of tests then :)

[20:47] <colomon> hahainternet: it sounded like you had an idea how the sequence operator works?

[20:47] *** colomon_ joined
[20:47] <hahainternet> colomon: yeah, i hadn't thought to terminate it on the desired one

[20:47] <colomon_> m: sub Lychrel($n) { $n, -> $a { $a + $a.flip } ... -> $a { $a == $a.flip }; } sat Lychrel(4)

[20:47] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/90dBYAmlB6␤Strange text after block (missing semicolon or comma?)␤at /tmp/90dBYAmlB6:1␤------> 3$a.flip } ... -> $a { $a == $a.flip }; }7⏏5 sat Lychrel(4)␤    expecting any of:␤        infix␤ …»

[20:47] <GLRelia> rakudo-moar 287360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/W5L7oVl7ZA␤Strange text after block (missing semicolon or comma?)␤at /tmp/W5L7oVl7ZA:1␤------> 3$a.flip } ... -> $a { $a == $a.flip }; }7⏏5 sat Lychrel(4)␤    expecting any of:␤        infix␤ …»

[20:47] <nine> [ptc]: no airco?

[20:47] <[Coke]> no airco for me, either.

[20:48] <hahainternet> colomon: 'sat' :)

[20:48] <colomon_> m: sub Lychrel($n) { $n, -> $a { $a + $a.flip } ... -> $a { $a == $a.flip }; } say Lychrel(4)

[20:48] <GLRelia> rakudo-moar 287360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/LJn_dXU2Hr␤Strange text after block (missing semicolon or comma?)␤at /tmp/LJn_dXU2Hr:1␤------> 3$a.flip } ... -> $a { $a == $a.flip }; }7⏏5 say Lychrel(4)␤    expecting any of:␤        infix␤ …»

[20:48] <camelia> rakudo-moar 6a1879: OUTPUT«5===SORRY!5=== Error while compiling /tmp/BiehXGtQMY␤Strange text after block (missing semicolon or comma?)␤at /tmp/BiehXGtQMY:1␤------> 3$a.flip } ... -> $a { $a == $a.flip }; }7⏏5 say Lychrel(4)␤    expecting any of:␤        infix␤ …»

[20:48] <colomon_> m: sub Lychrel($n) { $n, -> $a { $a + $a.flip } ... -> $a { $a == $a.flip }; }; say Lychrel(4)

[20:48] <camelia> rakudo-moar 6a1879: OUTPUT«4␤»

[20:48] <GLRelia> rakudo-moar 287360: OUTPUT«4␤»

[20:48] <colomon_> doh

[20:48] <colomon_> m: sub Lychrel($n) { $n, -> $a { $a + $a.flip } ... -> $a { $a == $a.flip }; }; say Lychrel(104)

[20:48] <camelia> rakudo-moar 6a1879: OUTPUT«104 505␤»

[20:48] <GLRelia> rakudo-moar 287360: OUTPUT«104505␤»

[20:48] <colomon_> there you go

[20:49] <hahainternet> yeah, i'm going to steal your termination and stick on reddit if you don't mind

[20:49] <hahainternet> as it's a particularly attractive implementation

[20:49] <colomon> hahainternet: be my guest

[20:51] <timotimo> nine: damn, instead of havign a look at the test file i read more twitter feeds >_>

[20:52] <dalek> rakudo/glr: eac8b76 | TimToady++ | src/core/io_operators.pm:

[20:52] <dalek> rakudo/glr: one-arg say should just gist it

[20:52] <dalek> rakudo/glr: 

[20:52] <dalek> rakudo/glr: A function that distributes .gist over all its arguments should not

[20:52] <dalek> rakudo/glr: make an exception when there's only one argument.

[20:52] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/eac8b76246

[20:53] *** colomon left
[20:53] <timotimo> nine: it's because the extra # confuses the harness, i think

[20:53] <FROGGS> m: my @a = 1, 2, 3; say @a

[20:53] <camelia> rakudo-moar 6a1879: OUTPUT«1 2 3␤»

[20:53] <GLRelia> rakudo-moar 287360: OUTPUT«123␤»

[20:53] <timotimo> no airco in my hotel room, either

[20:53] <timotimo> what fantastic hotel are you in, nine?

[20:54] <FROGGS> timotimo: I've got airco too

[20:54] <timotimo> all i got is a thing that pulls moist air out of the room

[20:55] <[ptc]> nine: no, unfortunately no airco :-(

[20:55] <nine> timotimo: I think I already tried that

[20:55] <nine> timotimo: Oltnerhof

[20:56] *** colomon joined
[20:56] * [ptc] hopes for airco in Granada...

[20:56] <timotimo> yeah, the joke was that i'm in the same hotel as you

[20:56] <dalek> rakudo/glr: b1db8a6 | lizmat++ | src/core/io_operators.pm:

[20:56] <dalek> rakudo/glr: note === say except for the handle

[20:56] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/b1db8a6576

[20:56] <timotimo> also, the harness doesn't get confused by the extra # because it doesn't parse the output; instead it counts values, test numbers etc ...

[20:56] <timotimo> the plot thickens

[20:57] * jdv79 also no airco.  wah wah

[20:57] <timotimo> :|

[20:58] <FROGGS> m: use nqp; nqp::loadbytecode("foo/bar/baz");

[20:58] <camelia> rakudo-moar 6a1879: OUTPUT«While looking for 'foo/bar/baz': no such file or directory␤  in block <unit> at /tmp/eMglQlgKBV:1␤␤»

[20:58] <GLRelia> rakudo-moar eac8b7: OUTPUT«While looking for 'foo/bar/baz': no such file or directory␤  in block <unit> at /tmp/wzPDkyqiJx:1␤␤»

[20:58] <jdv79> it was hotter in hawaii, thailand, and turkey "recently".  i barely went to sleep as i swimming in bed in all 3.

[20:59] <dalek> perl6-roast-data: 9ba9de8 | coke++ | / (2 files):

[20:59] <dalek> perl6-roast-data: another glr run for 'today'

[20:59] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/9ba9de89e7

[21:02] <FROGGS> m: my @a = 1, 2, 3; say @a

[21:02] <camelia> rakudo-moar 6a1879: OUTPUT«1 2 3␤»

[21:02] <GLRelia> rakudo-moar b1db8a: OUTPUT«[1 2 3]␤»

[21:02] <FROGGS> m: my @a = 1, 2, 3; say @a; say 1, 2, 3

[21:02] <camelia> rakudo-moar 6a1879: OUTPUT«1 2 3␤123␤»

[21:02] <GLRelia> rakudo-moar b1db8a: OUTPUT«[1 2 3]␤123␤»

[21:03] <FROGGS> *g*

[21:03] *** vendethiel joined
[21:04] * vendethiel waves from home

[21:04] <nine> TimToady: so say and note are the only exceptions to the single arg rule in the whole language?

[21:04] *** woolfy joined
[21:04] <lizmat> vendethiel o/

[21:04] <vendethiel> hi again to all the swiss hackers :)

[21:04] <woolfy> I LOVE YOU ALLWITH A GREAT HUGE LOVE!

[21:05] <colomon> woolfy!!!!!  \o/

[21:05] *** virtualsue joined
[21:05] * vendethiel hugs woolfy

[21:06] *** luiz_lha joined
[21:06] *** bin_005_l left
[21:06] <laben> m: say \(List) ~~ :(*@a)

[21:06] <camelia> rakudo-moar 6a1879: OUTPUT«True␤»

[21:06] <GLRelia> rakudo-moar b1db8a: OUTPUT«Invocant requires an instance of type List, but a type object was passed.  Did you forget a .new?␤  in block <unit> at /tmp/89fEOd_QFd:1␤␤»

[21:06] <dalek> roast/glr: 6e71b03 | TimToady++ | S03-sequence/basic.t:

[21:06] <dalek> roast/glr: more sequence binding -> assignment

[21:06] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/6e71b03628

[21:06] *** luiz_lha is now known as Guest4404

[21:06] <woolfy> colomon?  You just went to bed.  Go to sleep, man!

[21:06] <laben> m: say \(Hash) ~~ :(*@a)

[21:06] <camelia> rakudo-moar 6a1879: OUTPUT«True␤»

[21:06] <GLRelia> rakudo-moar b1db8a: OUTPUT«Invocant requires an instance of type Hash, but a type object was passed.  Did you forget a .new?␤  in block <unit> at /tmp/eCsdQ1uHPE:1␤␤»

[21:06] *** rindolf left
[21:07] <moritz> m: my @a = Hash;

[21:07] <camelia> rakudo-moar 6a1879: ( no output )

[21:07] <GLRelia> rakudo-moar b1db8a: ( no output )

[21:07] <TimToady> nine: I dunno if those are the only ones, but those are certainly necessary, due to the distribution of .gist semantics

[21:07] * woolfy hugz vendethiel

[21:07] <laben> why does it take the Hash or List type objects as invocants and not as params?

[21:08] <timotimo> vendethiel: you made it!

[21:08] <vendethiel> timotimo: somehow!

[21:08] <colomon> woolfy: I’m packing!

[21:08] <moritz> laben: it's an exception from somwhere in the setting code

[21:09] *** bin_005 joined
[21:09] <dalek> roast/glr: ccef992 | lizmat++ | S09-typed-arrays/arrays.t:

[21:09] <dalek> roast/glr: Make S09-typed-arrays/arrays.t pass

[21:09] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/ccef992c8a

[21:09] <dalek> roast/glr: f729a5d | lizmat++ | S32-io/note.t:

[21:09] <dalek> roast/glr: Adapt S32-io/note.t because of b1db8a6576d23fbc7

[21:09] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/f729a5d173

[21:09] <dalek> roast/glr: aab8bf2 | lizmat++ | S03-sequence/basic.t:

[21:09] <dalek> roast/glr: Merge branch 'glr' of https://github.com/perl6/roast into glr

[21:09] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/aab8bf25cc

[21:09] <dalek> rakudo-star-daily: dde104e | coke++ | log/ (9 files):

[21:09] <dalek> rakudo-star-daily: today (automated commit)

[21:09] <[Coke]> colomon: verified. no ac.

[21:09] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/dde104e14f

[21:10] <nine> [Coke]: sorry to read that

[21:10] <[Coke]> ugh, do I pack now or in the morning?

[21:10] <laben> moritz: i get it from src/Perl6/Metamodel/BOOTSTRAP.nqp line 325. the question is, why does it think it is an invocant and not a normal param?

[21:10] *** JasonBaum joined
[21:10] <[Coke]> ... now. else I'll be stealing a pillowcase and throwing it all in.

[21:11] <JasonBaum> p6: say 5

[21:11] <camelia> rakudo-moar 6a1879: OUTPUT«5␤»

[21:11] <GLRelia> rakudo-moar b1db8a: OUTPUT«5␤»

[21:11] <dalek> roast/glr: bee5dcc | TimToady++ | S16-io/bare-say.t:

[21:11] <dalek> roast/glr: say () should say ()

[21:11] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/bee5dcc2d0

[21:11] <JasonBaum> hello

[21:12] <FROGGS> hi JasonBaum 

[21:12] <JasonBaum> quick question

[21:12] <JasonBaum> I am using Ubuntu 14.04 and would like to try out Perl6.  Can an install live peacefully alongside Perl 5.x?

[21:12] <dalek> roast/glr: 0ad1a67 | TimToady++ | S16-io/say-and-ref.t:

[21:12] <dalek> roast/glr: say [1,2,3] makes [1 2 3]

[21:12] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0ad1a67251

[21:13] <dalek> roast/glr: 847b9aa | lizmat++ | S16-io/bare-say.t:

[21:13] <dalek> roast/glr: Adapt S16-io/bare-say.t because of b1db8a6576d23fbc7

[21:13] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/847b9aa044

[21:13] <dalek> roast/glr: 36abcb0 | lizmat++ | S16-io/say-and-ref.t:

[21:13] <dalek> roast/glr: Merge branch 'glr' of https://github.com/perl6/roast into glr

[21:13] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/36abcb08b1

[21:13] <hoelzro> JasonBaum: yes, they can!

[21:13] <yoleaux> 19:10Z <[Coke]> hoelzro: can you review RT #123154 ?

[21:13] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123154

[21:14] <FROGGS> JasonBaum: yes, because it won't install a perl binary, and it wont install in the system paths

[21:14] <hoelzro> (also, greetings)

[21:14] <woolfy> Coke: pack now, sleep with a ease-of-mind, wake up, have a quiet breakfast, and just grab yout stuff and go.  Now you are still awake.

[21:14] <laben> JasonBaum: ofc it can, why shouldnt it be so? btw i recommend trying https://github.com/tadzik/rakudobrew for an easy to use installation

[21:14] <hoelzro> [Coke]: on it

[21:14] <JasonBaum> great thank you

[21:14] <hoelzro> tadzik: are you around? you can haz convertors

[21:14] <FROGGS> JasonBaum: just follow these instructions http://rakudo.org/how-to-get-rakudo/

[21:14] <JasonBaum> FROGGS:  Thanks for the link!

[21:15] <dalek> roast/glr: 8613bf8 | TimToady++ | S03-sequence/nonnumeric.t:

[21:15] <dalek> roast/glr: list gist now parenthesizes

[21:15] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/8613bf807d

[21:15] <[ptc]> hoelzro: are there plans for brekkie tomorrow morning?

[21:15] <hoelzro> [ptc]++ # leaks

[21:15] <moritz> m: class A { method foo(A:D:) { } }; A.foo

[21:15] <camelia> rakudo-moar 6a1879: OUTPUT«Invocant requires an instance of type A, but a type object was passed.  Did you forget a .new?␤  in method foo at /tmp/_tlL1druew:1␤  in block <unit> at /tmp/_tlL1druew:1␤␤»

[21:15] <GLRelia> rakudo-moar b1db8a: OUTPUT«Invocant requires an instance of type A, but a type object was passed.  Did you forget a .new?␤  in method foo at /tmp/HadfVYtgbs:1␤  in block <unit> at /tmp/HadfVYtgbs:1␤␤»

[21:15] <hoelzro> er, leaks-- =)

[21:15] <hoelzro> [ptc]: yes, I believe so

[21:15] <[ptc]> hoelzro: heh

[21:16] <moritz> laben: either it's really a mis-reported error, or the binder tries to call a method on it, which produces this error

[21:16] <hoelzro> everyone @ olterhof: who wants to meet up for breakfast, and when?

[21:17] <colomon> oh, hey folks, while it still needs more love, I’ve got the module smoke tester in much better shape now.  When GLR is ready to switch to master (or whatever), can we have a day or two to test all the modules and see what needs to be changed?

[21:18] <FROGGS> hoelzro: I like to, and I have a lot of time

[21:18] <lizmat> colomon: I think that can be aranged

[21:18] <hoelzro> [Coke]: still Mus =(

[21:18] <hoelzro> FROGGS: great!

[21:19] <colomon> \o/

[21:19] <hoelzro> colomon++

[21:19] *** sufrostico joined
[21:20] <[ptc]> colomon: sounds good

[21:21] <JasonBaum> I don't know if any of you will find this helpful, but I've created a search function for reddit comments (and submissions).  So you can quickly see comments where Perl6 was mentioned by making a call like this:  https://api.pushshift.io/reddit/search?q=perl6

[21:21] <woolfy> hoelzro: lizmat and me will have breakfast at 8:30

[21:21] <JasonBaum> (you can use a limit parameter to get more comments if needed)

[21:21] <timotimo> ah, that spits out json

[21:21] <JasonBaum> Yes sorry. One second.

[21:21] <laben> moritz: i really dont grep that code, afraid i cant say much, just that it checks "$flags +& $SIG_ELEM_INVOCANT" and that somehow is true, which doesnt make sense to me. im not able to go deeper

[21:22] <moritz> m: say :(*@a).params[0].invocant

[21:22] <camelia> rakudo-moar 6a1879: OUTPUT«False␤»

[21:22] <GLRelia> rakudo-moar b1db8a: OUTPUT«False␤»

[21:23] <laben> yea, but that exception is only in that codepath

[21:23] <JasonBaum> Here is a jsfiddle for it:  http://jsfiddle.net/n8tjvsex/

[21:23] <JasonBaum> it will show comments and also submissions where perl6 is mentioned heavily

[21:23] <laben> i guess i will ask jnthn if i see him

[21:23] <JasonBaum> might be interesting for some of you to play with

[21:24] <JasonBaum> it's very beta but usually works well

[21:25] *** ab6tract joined
[21:25] <timotimo> you haev "sex" in your url *giggle*

[21:25] <JasonBaum> lol

[21:25] <timotimo> that's the name of the dog of the aunt(?) that mr scalzi was talking abou

[21:25] * ab6tract horrible flashbacks of a lightning talk

[21:26] <FROGGS> JasonBaum++

[21:26] <JasonBaum> but in any event, it may give you guys something to look at 

[21:26] <timotimo> what are all the "undefined"s for? :)

[21:27] <timotimo> under the name of the subreddit

[21:27] <JasonBaum> that should be the title of the submission

[21:27] <hahainternet> so with the Lycherel numbers being referred to before, the rosetta code page has a requirement to limit it to 500 elements, i understand perl6 has lazy lists and the first thing that comes to mind is simply to test if @a[501] is not Nil to check if the list generates more than 500 elems

[21:27] <timotimo> ah, and there seems to not be a link to the submission at all yet :)

[21:27] <hahainternet> is there a nicer way, or something more explicit or idiomatic etc

[21:27] <JasonBaum> i made some changes to the back-end but will fix that shortly

[21:27] <dalek> roast/glr: e879e6c | lizmat++ | S32-exceptions/misc.t:

[21:27] <dalek> roast/glr: Fix some slightly changed messaging

[21:27] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/e879e6c08f

[21:28] <laben> .tell jnthn can you check why "say \(Hash) ~~ :(*@a)" and "say \(List) ~~ :(*@a)" die with exception "Invocant requires an instance of type Hash|List, but a type object was passed." in the binder?

[21:28] <yoleaux> laben: I'll pass your message to jnthn.

[21:28] <laben> have a good rest, #perl6

[21:28] <moritz> laben: the binder calls method Capture on some value, if it's present; and Hash has a method Capture that requires a defined invocant

[21:29] <timotimo> ah, oh.

[21:29] <[ptc]> timotimo: I wonder what n8tjv-sex is though...  And jsfiddle is also a bit dodgy

[21:29] * [ptc] wonders if it's the beer talking...

[21:30] <laben> moritz: i'm sorry to say i understand barely half of what you're saying. i guess there's no hurry...

[21:30] <dalek> roast/glr: 8403fcd | TimToady++ | S04-statements/gather.t:

[21:30] <dalek> roast/glr: testing neighbor identity calls for unique cells

[21:30] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/8403fcd5f6

[21:30] * laben goes to bed

[21:30] <moritz> laben: what I'm saying is that the binder itself trips up, instead of intentionally generating the error message you see

[21:31] <timotimo> [ptc]: well, n8 in german is for "nacht" aka "night" and tjv is the french high speed train

[21:31] *** laben left
[21:31] <dalek> roast/glr: 620317d | lizmat++ | S19-command-line/dash-e.t:

[21:31] <dalek> roast/glr: Adapt to changed gist output for @*ARGS

[21:31] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/620317d033

[21:32] <JasonBaum> are you analyzing the jsfiddle link name?

[21:32] <JasonBaum> night train sex?

[21:32] <timotimo> totally

[21:32] <JasonBaum> I need to party more with you fine people

[21:32] <timotimo> the mood at the SPW2015 over the last few days was pretty great

[21:32] <timotimo> even though it was rather a bit warmer than we'd all have liked

[21:33] <ab6tract> .tell skids thanks for looking into it! I really appreciate it :)

[21:33] <yoleaux> ab6tract: I'll pass your message to skids.

[21:33] <hoelzro> [Coke]: oops, I misspoke, updating now

[21:34] <JasonBaum> one more thing before I head off -- if you like huge data sets, I've made every available public reddit comment available.  Maybe you can find something useful.  Location is here - http://pan.whatbox.ca:36975/reddit/comments/monthly/

[21:34] <JasonBaum> it's around 1.75 billion comments in JSON 

[21:35] <ab6tract> JasonBaum: that sounds like a really fun data source :)

[21:35] <timotimo> oh wow

[21:35] <JasonBaum> yeah definitely.  I tried to load it all into Sphinx Search but I just don't have enough RAM for it

[21:35] *** cognominal joined
[21:36] <timotimo> i'll feed that into json::fast and see how fast it exhausts my ram + swap

[21:36] <ab6tract> sounds like a useful candidate for some streaming pipelines

[21:36] <JasonBaum> I don't know what the latest and greatest is for Perl6 for JSON parsing, but I've been using Cpanel::JSON::XS for Perl 5

[21:36] <timotimo> yup, we don't have a streaming json parser yet, right?

[21:36] <hoelzro> tadzik: pong

[21:37] <ugexe> is it possible that, with a known json structure, it could be chunked out into pieces that do need to be parsed vs pieces that dont?

[21:37] <ab6tract> timotimo: not that I'm aware of

[21:37] <JasonBaum> I also have a real-time SSE stream if you want to play with it.  Details are here: https://www.reddit.com/r/redditdev/comments/3gy4zd/supercharging_the_sse_stream_now_supports_a_ton/

[21:37] <dalek> roast/glr: 7995d66 | TimToady++ | S03-sequence/basic.t:

[21:37] <dalek> roast/glr: containers test of [] now needs $[]

[21:37] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/7995d667a4

[21:37] <ab6tract> enjoyed reading that post from tony-o (ugexe?) http://ugexe.com/speed-quest-1-0-or-0-1-or-something/

[21:38] <timotimo> we have a json parser that's a nativecall'd thingie

[21:38] <ugexe> for instance, to shim in the default json parser to work faster for parsing the manifest

[21:38] <JasonBaum> essentially, if you want to see Reddit comments and submissions in real time, do this "wget -qO- http://stream.pushshift.io"

[21:38] <JasonBaum> that will connect you to a real-time stream

[21:38] <JasonBaum> (details on usage are in that link)

[21:38] *** geekosaur left
[21:39] <JasonBaum> I also provide link info in that stream for all links posted to Reddit

[21:39] *** geekosaur joined
[21:39] <JasonBaum> (a head request and a call to Google API if it is relevant -- like a youtube video link)

[21:40] <woolfy> SPW is "a little warmer" as in that I am soaking with sweat every day...

[21:40] <JasonBaum> one more question -- are any of you going to the Amazon Re:Invent in Vegas in Oct?

[21:41] <JasonBaum> I was planning to head out there.  If any of you do end up going, please let me know and we can get a beer or something.  If you are interested in Big Data.

[21:42] <JasonBaum> (or if you like beer)

[21:43] *** virtualsue left
[21:43] <timotimo> perl6 is not yet ready for "big data", with the overhead we sometimes have :|

[21:43] <jdv79> ugexe: maybe gen a line oriented json file with a fastly searchable prefix?

[21:43] *** itz left
[21:44] <JasonBaum> does Perl6 support regex on a 920 gigabyte string?

[21:45] <jdv79> where is this massive json file, btw?

[21:45] <ugexe> jdv79: i thought about that too. not enough to consider the pitfalls

[21:45] <JasonBaum> the files are ordered by month

[21:45] *** llfourn joined
[21:45] <timotimo> split by month, even

[21:45] <JasonBaum> there is a big file on torrent

[21:45] <jdv79> ugexe: i was actually thinking about testing that out the other day but got distracted

[21:46] <hoelzro> there's no way to overwrite $?FILE, is there?

[21:46] <ugexe> i think it could mostly work until %*RESOURCES is implemented, which allows custom pairs (so the structure of these are not known)

[21:46] <JasonBaum> here is the posting for the big dataset

[21:46] <JasonBaum> https://www.reddit.com/r/datasets/comments/3bxlg7/i_have_every_publicly_available_reddit_comment/

[21:47] <timotimo> smls: that can't be right: https://i.imgur.com/fTEhZAF.png

[21:47] <JasonBaum> Amazon was nice enough to give a $500 grant to host it

[21:47] <JasonBaum> but bandwidth fees ate that up quick

[21:47] <smls> timotimo: What browser is that?

[21:47] <ab6tract> JasonBaum: "I also provide link info in that stream for all links posted to Reddit" <-- do you mean said link is n the reddit comments in the post about SSE ?

[21:47] <timotimo> gurgel chrome

[21:48] <JasonBaum> the link was either posted in a comment or the link was a submission

[21:48] <JasonBaum> yes

[21:48] <ab6tract> smls: looks the same in safari

[21:49] <smls> Looks like that in my Chrome too :(

[21:49] <ab6tract> JasonBaum: just checking because "that stream" was slightly ambiguous to me

[21:49] <smls> in Firefox, it renders right

[21:49] * smls will investigate

[21:49] <smls> It's an SVG image, in case you're wondering.

[21:49] <JasonBaum> if you go to reddit.com/r/test and post a message with a link (like a youtube video) and have another window open with "wget -qO- 'http://stream.pushshift.io/?event=link&author=YOUR_AUTHOR_NAME' you will see it pop up in 2-5 seconds

[21:50] *** llfourn left
[21:50] <timotimo> the other svg is not problematic

[21:50] <timotimo> but yeah, i've opened the svg separately already

[21:50] <ab6tract> smls: also, nice blog!

[21:50] <smls> thanks :)

[21:50] <smls> timotimo: you can also replace the .svg in the URL with .png to get prerendered ones

[21:51] <JasonBaum> ab6tract, when you connect to the stream, you can filter by a lot of methods -- one of which is event=(t1,t3,link) ... t1 are reddit comments, t3 are submissions and link just shows links

[21:53] <JasonBaum> I'm assuming Perl6 allows for inline C like Perl 5?

[21:53] <nine> JasonBaum: http://doc.perl6.org/language/nativecall

[21:53] <JasonBaum> thanks

[21:54] <ab6tract> JasonBaum: ahhh.. okay, it slowly dawns on me. I parsed your original comment as "somewhere in that reddit thread I post a link to an archive of all the links on reddit"

[21:54] <JasonBaum> yeah sorry that wasn't clear

[21:55] <FROGGS> JasonBaum: there is also a module Inline::C but NativeCall is the better way of doing things

[21:55] <ab6tract> now that I've interacted with your streaming thingy, it's a lot clearer

[21:55] <dalek> roast/glr: 61c6af6 | lizmat++ | S17-supply/classify.t:

[21:55] <dalek> roast/glr: Make S17-supply/classify.t pass

[21:55] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/61c6af69fd

[21:55] <lizmat> that should get us at 10 now

[21:55] <[ptc]> 10??  that's awesome!  Well done!

[21:56] <ab6tract> lizmat!!!!!!!!

[21:56] <ab6tract> i'm too sweaty to hug you right now :D

[21:56] <vendethiel> YAY

[21:56] <JasonBaum> For Perl 5, to interact with the stream I use something like $ua->add_handler( response_data => sub { ... } ) ... I'm not sure what the equivalent would be for Perl6

[21:57] <dalek> roast/glr: 6d66f99 | TimToady++ | S06-signature/unpack-array.t:

[21:57] <dalek> roast/glr: Seq interpolation needs .list

[21:57] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/6d66f99110

[21:57] <TimToady> 9

[21:57] <JasonBaum> There may even be an SSE module already for Perl6 but I haven't checked

[21:59] * TimToady --> bed

[21:59] <ab6tract> JasonBaum: HTTP::UserAgent has been recently updated. 

[22:00] <nine> Good night!

[22:00] <ab6tract> o/ TimToady :D

[22:00] <ab6tract> JasonBaum: I'm getting old.. When I see SEE, I think of Pentium II

[22:00] <ab6tract> *SSE

[22:00] *** bin_005 left
[22:00] <JasonBaum> I remember that!

[22:01] <dalek> roast/glr: 0d71222 | lizmat++ | S17-supply/categorize.t:

[22:01] <dalek> roast/glr: Make S17-supply/categorize.t pass

[22:01] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0d71222c9b

[22:01] <FROGGS> sleep well TimToady 

[22:01] <JasonBaum> The stream could have just been a series of JSON objects like Twitter's stream, but you can just as easily interact with an SSE stream and pull out the data fields

[22:01] <ab6tract> proposed backronym for GLR -- "God Loves Refactoring"

[22:02] <lizmat> TimToady: nighty night!

[22:02] <ab6tract> if * didn't, * wouldn't have made it so easy on us! 

[22:02] <JasonBaum> the benefit with SSE is the ability to specify a beginning id number when you connect to the stream in case the script loses its connection

[22:02] * ab6tract immediately knocks on wood

[22:02] <JasonBaum> most browsers will do this natively with a header string LAST-EVENT-ID

[22:04] <JasonBaum> Eventually I can load the entire dataset into sphinx search but I would need around 256 GB of RAM to make it worthwhile 

[22:05] <FROGGS> :P

[22:05] <JasonBaum> I was going to get a new workstation with a Skylake processor but Intel is busy doing more paper launches 

[22:06] <JasonBaum> Skylake at least allows for up to 64 GB if using DDR4

[22:06] <timotimo> i don't know what SSE means in this context :|

[22:06] <JasonBaum> (Server Side Events)

[22:06] <timotimo> ah

[22:06] <JasonBaum> it's basically one way websockets

[22:06] <timotimo> that's the thing that separates chunks with two newlines, right?

[22:06] <JasonBaum> yep!

[22:06] <timotimo> and you get EventSource in JavaScript to handle them?

[22:07] <JasonBaum> yes

[22:07] <timotimo> i've worked with them, they're neat

[22:07] <JasonBaum> you can create multiple EventSource objects to deal with each type of event (t1, t3, etc.)

[22:08] <smls> timotimo: Should be fixed now.

[22:08] <timotimo> and the browser will only have a single connection?

[22:08] <JasonBaum> yes.  It makes one connection

[22:08] <dalek> perl6-roast-data: d4e0659 | coke++ | / (2 files):

[22:08] <dalek> perl6-roast-data: another glr run for 'today'

[22:08] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d4e0659417

[22:08] * lizmat is down to 7 fails

[22:08] <JasonBaum> but if you want to conserve bandwidth, the event parameter is there to filter it down

[22:09] <smls> timotimo: Apparently, Chrome really doesn't like it when multiple font sizes are used in the same SVG text element...

[22:09] <timotimo> right

[22:09] <timotimo> oh, ugh

[22:09] <JasonBaum> you could also use match=perl and only get comments and submissions with perl mentioned in them

[22:10] <JasonBaum> Eventually my goal would be to create a sample Perl6 script to interact with the stream to show new programmers how to work with big data using Perl6

[22:11] <JasonBaum> reddit comment volume is usually always under 50 comments a second which is easily handled by Perl

[22:11] <jdv79> .tell [Coke] email

[22:11] <yoleaux> jdv79: I'll pass your message to [Coke].

[22:12] * [Coke] realizes he's going to have trouble getting a can of soda home. Maybe zurich is a smidge more lenient.

[22:12] <yoleaux> 22:11Z <jdv79> [Coke]: email

[22:13] *** cognominal left
[22:13] <timotimo> realizes Coke hes Coke going Coke to Coke have Coke trouble Coke getting Coke a Coke can Coke of Coke soda Coke home. Coke Maybe Coke zurich Coke is Coke a Coke smidge Coke more Coke lenient.

[22:14] <oetiker> coke they are not ... 

[22:14] <oetiker> for drinks anyway ... 

[22:14] <JasonBaum> brb

[22:14] <oetiker> for swiss army knifes they are

[22:14] *** JasonBaum left
[22:15] <[ptc]> but if it's in your main luggage that should be ok

[22:15] *** jbaumgartner joined
[22:15] <jbaumgartner> back 

[22:15] <jbaumgartner> (had to switch to my main account)

[22:15] *** lolisa joined
[22:15] <[Coke]> I have no main luggage.

[22:16] <[Coke]> I guess I could check my backpack and use the booking.com bags for my plane needs.

[22:16] <[Coke]> I hesitate to do that, but May have to.

[22:17] <timotimo> sub MAIN('luggage') { die "no." }

[22:17] <jdv79> at least its not an extra charge like us domestic

[22:17] <jdv79> i think i paid 35 to check for yapc na:(

[22:24] <ab6tract> jdv79: the weird flipside of the checked-baggage fees is that enormous bags (beyond the apparently toothless limits they declare) are now put into overhead, taking up all the space

[22:25] <jbaumgartner> Compress::Zlib::Luggage

[22:26] <hoelzro> Olterhof folks who are around tomorrow: we're meeting for breakfast at 8:30

[22:27] <timotimo> we'll be kicked out of our rooms at 10am

[22:30] <[ptc]> hoelzro: ok, good to know

[22:31] <[Coke]> I'll leave the novelty soda (hello kitty) downstairs in the morning. If you see it, feel free to grab it.

[22:32] <[ptc]> [Coke]: maybe we can send it to you in the post?

[22:32] *** ggoebel joined
[22:32] <oetiker> pass it on to liz and wendy

[22:32] <[Coke]> I can't imagine it'll be cheap to do that. No worries.

[22:32] <[Coke]> they can give it away as a prize at the next thing or just drink it. :)

[22:32] *** _itz_ joined
[22:34] *** _itz left
[22:36] *** jbaumgartner left
[22:38] *** pmurias left
[22:38] *** bin_005 joined
[22:40] *** _itz joined
[22:40] <woolfy> I refuse to drink hello kitty novelty soda

[22:41] *** _itz_ left
[22:41] <woolfy> Is it very expensive?  Related to "sending my mail"...

[22:43] * lizmat goes to get some sleep and dream of lucky 7

[22:43] *** lizmat left
[22:45] *** llfourn joined
[22:46] <woolfy> nightnight...

[22:46] *** woolfy left
[22:47] *** _itz left
[22:48] *** _itz joined
[22:49] <[ptc]> 'night *

[22:49] <ab6tract> pleasant dreams my #perl6 heroes

[22:49] *** ab6tract left
[22:50] *** llfourn left
[22:55] <hoelzro> night everyone

[22:56] *** Sgeo_ left
[23:03] *** _itz_ joined
[23:05] *** _itz left
[23:17] *** mprelude left
[23:18] *** yqt joined
[23:23] *** yqt left
[23:30] <[Coke]> not expensive at all. arg, guess i will just stay awake until my flight

[23:31] <dalek> perl6-roast-data: 023e9af | coke++ | / (2 files):

[23:31] <dalek> perl6-roast-data: another glr run for 'today'

[23:31] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/023e9af139

[23:38] *** telex left
[23:40] *** spider-mario left
[23:40] *** telex joined
[23:46] *** khw joined
[23:50] *** RabidGravy left
[23:58] *** [TuxCM] joined
