[00:01] <Zoffix> m: class Foo { has @!d = 'tmp', 'foo'; method m { EVAL qq{use lib @!d}; say $*REPO.repo-chain; } }; Foo.new.m

[00:01] <camelia> rakudo-moar 5e4927: OUTPUT«5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Variable @!d used where no 'self' is available␤at /home/camelia/EVAL_0:1␤------> 3use lib @!d7⏏5<EOL>␤»

[00:01] <Zoffix> hm? How do I make self available in that eval?

[00:01] <Zoffix> Or do I haveta use a temp var?

[00:02] <Zoffix> m: class Foo { has @!d = 'tmp', 'foo'; method m { my @d = @!d; EVAL qq{use lib @d}; say $*REPO.repo-chain; } }; Foo.new.m

[00:02] <camelia> rakudo-moar 5e4927: OUTPUT«(file#/home/camelia/foo file#/home/camelia/tmp inst#/home/camelia/.perl6/2015.11-359-g5e49279 inst#/home/camelia/rakudo-m-inst-1/share/perl6/site inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor inst#/home/camelia/rakudo-m-inst-1/share/perl6)␤»

[00:03] *** roguelazer left
[00:04] *** pierre-vigier left
[00:04] <lucasb> m: my @a = <a b c>; EVAL 'use lib @a'; say $*REPO.repo-chain[^3]

[00:04] <camelia> rakudo-moar 5e4927: OUTPUT«(file#/home/camelia/c file#/home/camelia/b file#/home/camelia/a)␤»

[00:05] <Zoffix> If anyone got a better solution, please comment on this PR: https://github.com/tokuhirom/p6-Crust/pull/66

[00:05] <lucasb> interesting, they get pushed in the reverse order

[00:05] *** roguelazer joined
[00:05] <Zoffix> 46 dists to go... this is taking longer than I thought...

[00:08] <hoelzro> MadcapJake: did you end up getting that Perl6::Compiler change to work?

[00:09] *** BenGoldberg joined
[00:09] *** cygx left
[00:09] *** rurban left
[00:10] *** csd_ joined
[00:10] <jdv79> Zoffix: you're doing PRs for all repos on gh for the @*INC thing?

[00:11] *** skids joined
[00:11] *** lucasb left
[00:12] <Skarsnik> zoffix is fixing everything!

[00:12] *** lizmat joined
[00:12] <Zoffix> jdv79, for now, I'm doing all the @*INC things that can simply be replaced by "use lib". In total there are 65 dists that have @*INC stuff and I'm moving stuff that isn't "use lib" into a special folder that I hope to learn how to fix and send PRs for those later... Stuff like "for @*INC -> $f is copy {"... IIRC that's not yet implemented.

[00:12] <Zoffix> And nine++ is working on it (making module like Pluggable working, etc)

[00:13] <Skarsnik> Leave if to the module author I say x)

[00:13] <jdv79> yeah

[00:14] <Zoffix> Module author might not always be present, and with influx of users we'll get soon, it's be helpful to at least have a fixed forked version they could clone and install

[00:14] <leedo> could @*INC be made some sort of proxy that does the right thing with the new method of doing things?

[00:14] <Zoffix> leedo, don't think it's worth it TBH.

[00:15] <leedo> ah k, haven't noticed much fallout myself from that

[00:15] <Zoffix> I mean, after these 65 modules are fixed, we won't need to deal with @*INC

[00:15] <jdv79> you would think authors wold notice in 20 days or so 

[00:16] <Zoffix> ¯\_(ツ)_/¯ 

[00:16] <masak> ah; I see https://perl6advent.wordpress.com/2015/12/05/day-5-identifiers-have-hyphens-in-them/ is published now :)

[00:16] <masak> 'night, #perl6

[00:16] <Zoffix> \o/

[00:16] <Zoffix> night

[00:19] <Zoffix> .tell masak masak++ I've learned something: you can't have $foo-2 :)

[00:19] <yoleaux> Zoffix: I'll pass your message to masak.

[00:19] <Zoffix> (as a variable name)

[00:20] <Skarsnik> hm

[00:21] <jdv79> that's why underscores are still better;)

[00:21] <Zoffix> And I totally love that you can have hyphens in identifiers... Perl 5 made me hate how other langs use regexes... Perl 6 will make me hate how other langs don't allow hyphens :)

[00:21] <Zoffix> *shrug* my pinky appreciates not having to mash SHIFT as often :)

[00:22] <flussence> being able to use “” (altgr+vb for me) instead of "" is a great improvement too

[00:23] <Skarsnik> err wtf http::useragent lost a part of the cookies between two requests

[00:23] <AlexDaniel> Zoffix: surprisingly, when I was designing my keyboard layout I decided that ‘-’ is a rare character, so now it's on altgr+shift level…

[00:23] <Zoffix> heh

[00:23] <AlexDaniel> Zoffix: while both _ and – are easier to press

[00:23] *** Ben_Goldberg joined
[00:23] <Zoffix> .u –

[00:23] <yoleaux> U+2013 EN DASH [Pd] (–)

[00:24] <Zoffix> AlexDaniel, yeah, if you use proper en/em dashes, hyphen *is* a rare char :)

[00:24] <timotimo> .u –

[00:24] <yoleaux> U+2013 EN DASH [Pd] (–)

[00:24] <timotimo> .u —

[00:24] <yoleaux> U+2014 EM DASH [Pd] (—)

[00:24] <AlexDaniel> Zoffix: yup

[00:24] <AlexDaniel> Zoffix: Perl 6 can possibly make me rethink that…

[00:25] <timotimo> oh my

[00:25] <timotimo> in just 26 days we're going from HORIZONTAL BAR to DOUBLE VERTICAL LINE

[00:25] <Zoffix> timotimo, huh?

[00:25] <jdv79> Skarsnik: there's bugz

[00:25] <flussence> .oO( these mojolicious release codenames are getting weird )

[00:26] <jdv79> i've been too lazy to fix them

[00:26] *** BenGoldberg left
[00:26] <timotimo> m: say uniname 0x2015; say uniname 0x2016;

[00:26] <camelia> rakudo-moar 5e4927: OUTPUT«HORIZONTAL BAR␤DOUBLE VERTICAL LINE␤»

[00:26] <hoelzro> MadcapJake: it looks like you got it!

[00:26] <jdv79> should probaly report them at least

[00:26] <Zoffix> timotimo, what's that about?

[00:26] <flussence> m: say uniname 2015;

[00:26] <camelia> rakudo-moar 5e4927: OUTPUT«NKO LETTER LA␤»

[00:26] <timotimo> nothing much

[00:26] <Zoffix> oh

[00:26] <timotimo> m: say uniname 0o2015; say uniname 0o2016

[00:26] <camelia> rakudo-moar 5e4927: OUTPUT«CYRILLIC CAPITAL LETTER I WITH GRAVE␤CYRILLIC CAPITAL LETTER SHORT U␤»

[00:26] <Zoffix> timotimo, i didn't bother actually READING those UTF codes :P

[00:27] <Skarsnik> jdv79, they get cut https://gist.github.com/Skarsnik/c345897985eab0edeb40

[00:27] <timotimo> :P

[00:27] <flussence> m: say uniname (2015 + 4714); # julian date

[00:27] <camelia> rakudo-moar 5e4927: OUTPUT«TAI THAM LETTER HIGH HA␤»

[00:27] <flussence> guess the hex one is more interesting after all

[00:27] <jdv79> Skarsnik: yes

[00:28] <Skarsnik> let me grab some tea and have a look xD

[00:28] <jdv79> i have a partial patch but this damned hotel wifi is broken of course

[00:29] <AlexDaniel> m: my \o-o'o-o'o-o = 5; say o-o'o-o'o-o

[00:29] <camelia> rakudo-moar 5e4927: OUTPUT«5␤»

[00:30] *** geraud left
[00:30] *** RabidGravy left
[00:30] <jdv79> Skarsnik: https://gist.github.com/anonymous/ae41051c8c0ffb1cc45c

[00:30] <jdv79> maybe that's relevant

[00:30] <dalek> rakudo/nom: bb59896 | TimToady++ | src/Perl6/Grammar.nqp:

[00:30] <dalek> rakudo/nom: import should reuse precedence of exported ops

[00:30] <dalek> rakudo/nom: 

[00:30] <dalek> rakudo/nom: Fixes #126761.

[00:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb598968c6

[00:31] <AlexDaniel> m: my \o-o = 10; say o-o- -o-o

[00:31] <camelia> rakudo-moar 5e4927: OUTPUT«20␤»

[00:33] <AlexDaniel> m: my \o-o = 10; say -o-o- -o-o

[00:33] <camelia> rakudo-moar 5e4927: OUTPUT«0␤»

[00:33] <AlexDaniel> m: my \o-o = 10; say -o-o- - -o-o- - -o-o

[00:33] <camelia> rakudo-moar 5e4927: OUTPUT«-30␤»

[00:34] <jdv79> Skarsnik: not sure (not that i was able to load your gist)

[00:36] <Skarsnik> the cookie returned by website is Set-Cookie: __cfduid=d264c3aa05f93f44b672cc132da7c55811449275073; expires=Sun, 04-Dec-16 00:24:33 GMT; (and other stuff) and it get cut to "Set-Cookie: __cfduid=d264c3aa05f93f44b672cc132da7c55811449275073; expires=Sun, 04"

[00:37] <jdv79> should get cut on comma from what i was seeing

[00:37] <jdv79> weird

[00:37] <AlexDaniel> m: my \o-o = {10}; say o-o o o-o

[00:37] <camelia> rakudo-moar 5e4927: OUTPUT«-> |args is raw { #`(Block|86615248) ... }␤»

[00:38] <dalek> roast: fae390f | TimToady++ | S06-operator-overloading/imported-subs.t:

[00:38] <dalek> roast: test for RT #126761, import precedence correctly

[00:38] <dalek> roast: review: https://github.com/perl6/roast/commit/fae390f38e

[00:41] <Skarsnik> let's see

[00:42] <Skarsnik> now it get cut in 3 pieces and some are lost

[00:42] *** leont left
[00:42] <Skarsnik> but yes , seens to be an issue

[00:43] <TimToady> jdv79: fixed your import bug

[00:43] *** raiph left
[00:44] <jdv79> TimToady: thank you sir!  i'll check it out once i have enough internets to get it:)

[00:45] <hoelzro> around, Linenoise should work again

[00:45] <Skarsnik> how I put like a say in the field-value methid? before make it work?

[00:45] <hoelzro> *alright

[00:45] <jdv79> Skarsnik: maybe the value token in the cookies grammar is missing -?  seems weird that would be the case

[00:46] <jdv79> i don't know why i'm always surprised when tests are not covering something "obvious"

[00:48] <Skarsnik> why there is a grammar in the test file Oo

[00:49] <AlexDaniel> m: my \O'O-O = 'O'.ord; say '0'-O'O-O-'0'-O'O-O-0-'0'

[00:49] <camelia> rakudo-moar 5e4927: OUTPUT«-158␤»

[00:50] <jdv79> yeah that test file is funny

[00:50] <jdv79> because "DATE" is the same thing as the actual thing:)

[00:50] <jdv79> good luck

[00:51] <Skarsnik> why the start of the grammar is <cookie>, ?

[00:51] <Skarsnik> like why the coma

[00:52] <jdv79> no idea

[00:54] <Skarsnik> https://www.ietf.org/rfc/rfc2109.txt no coma in this x)

[01:01] <MadcapJake> hoelzro: you tried it and it works? o_O

[01:01] <jdv79> we don't have enough devs to fix all the bugs:(

[01:02] <Skarsnik> lol wtf date converted to a DATE string

[01:02] <Skarsnik> +get

[01:05] <Skarsnik> I want to patch this to have AT-POS on HTTP::Cookies and AT-KEY on HTTP::Cookie x)

[01:08] <Skarsnik> this grammar does not take the -

[01:11] <Zoffix> w00t! I'm done (for today) 46 PRs sent! :) I wish GitHub were doing their t-shirt context this month :)

[01:11] <dalek> rakudo/nom: 56836b6 | TimToady++ | src/core/Rat.pm:

[01:11] <dalek> rakudo/nom: last patch had copy/paste error

[01:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/56836b64bd

[01:12] <Skarsnik> T-shirt contest?

[01:13] <Zoffix> Skarsnik, yeah, they've done Hacktober in October: send 4 PRs and get a T-Shirt: https://github.com/blog/2067-hacktoberfest-contribute-to-open-source-in-october

[01:13] <Zoffix> ... which reminds me... I still haven't gotten mine :/

[01:15] *** pierre-vigier joined
[01:16] <Skarsnik> hm <-;> is not the syntax to everything exepct ;?

[01:16] <Zoffix> No

[01:16] <Zoffix> <-[;]>

[01:16] <Skarsnik> thx, that fixed this dumb grammar xD

[01:16] <Zoffix> \o/

[01:17] <Skarsnik> not sure it's really exact, but all test still pass

[01:18] *** BenGoldberg joined
[01:19] *** Ben_Goldberg left
[01:20] <Skarsnik> look better: https://gist.github.com/Skarsnik/c345897985eab0edeb40

[01:20] <Skarsnik> but it still does not work. I am not logged x)

[01:22] <Skarsnik> why the httponly disapear lol

[01:23] <Zoffix> "X-Powered-By: PHP/5.5.9-1ubuntu4.14"... well, there's your problem X)

[01:24] *** Zoffix left
[01:26] *** pierre-vigier left
[01:27] *** pierre-vigier joined
[01:29] <Skarsnik> hm, how I say to a token to ingore the case?

[01:29] *** Ben_Goldberg joined
[01:29] <PerlJam> Skarsnik: token foo { :i foo }

[01:29] <yoleaux> 1 Dec 2015 22:23Z <Zoffix> PerlJam: I've seen several times today people who [I assume want to write] disappointed that Advent list is full. Maybe there's some sort of "official" way we can have a free-for-all and launch a bunch of articles per day, if people wanna write, since this Christmas is THE Christmas?

[01:29] <Skarsnik> Oh it's in the token

[01:29] <Skarsnik> thx!

[01:30] <PerlJam> Hmm. 

[01:30] *** BenGoldberg left
[01:30] *** moei joined
[01:33] <Skarsnik> Good night here!

[01:35] *** Skarsnik left
[01:35] <timotimo> i'm up way later than i wanted

[01:38] <PerlJam> .tell Zoffix Sorry I'm late but ... Sure, if people want to do multiple articles per day, I don't see why not.   Everyone may need to increase the communication factor a little bit though.   And I'm not sure if later-in-the-day articles will hide earlier ones or not, but either way, perhaps for those days that have multiple articles, the main one for the day could just be pointers to the others.

[01:38] <yoleaux> PerlJam: I'll pass your message to Zoffix.

[01:38] <gtodd> that would be cool :-D 

[01:40] *** cdg left
[01:40] <PerlJam> And the schedule is not completely full.  I see that days 6 and 13 are still open (at least according to what's in mu)

[01:42] * PerlJam is happy to see autarch in the list of contributors this season :)

[01:57] *** pierre-vigier left
[02:03] *** llfourn joined
[02:05] *** kjs_ joined
[02:08] <bzipitidoo> In https://doc.perl6.org/language/subscripts, what does the guillemet do in this code?    $element = do given $value».split(/',' \s+/).flat {

[02:09] *** keix left
[02:11] *** keix joined
[02:13] <geekosaur> bzipitidoo, http://design.perl6.org/S03.html#Hyper_operators

[02:14] <PerlJam> bzipitidoo: it hyperizes.   If $value has more than one thing in it, they all will have .split called on them.

[02:17] <MadcapJake> what would be the equivalent way of using `call` in javascript with a thisArg (lexical context)

[02:18] *** yqt left
[02:24] *** FROGGS_ joined
[02:27] *** raiph joined
[02:27] *** FROGGS left
[02:28] *** flussence left
[02:28] *** flussence joined
[02:28] *** adhoc left
[02:39] <PerlJam> MadcapJake: you mean you want to call a method with a different self?

[02:41] <PerlJam> MadcapJake: or that you just want to do  some-method($this, ...); instead of $this.some-method(...);

[02:43] *** pierre-vigier joined
[02:46] *** adhoc joined
[02:54] *** flussence left
[02:54] *** flussence joined
[03:06] *** noganex_ joined
[03:07] <MadcapJake> i ended up just opting for a first argument as a context

[03:07] * MadcapJake is off to bed!

[03:07] *** MadcapJake left
[03:08] *** pierre-vigier left
[03:08] <lucs> Can I have  sub MAIN (Bool $foo) ...  , and if so, how do I pass the boolean on the command line?

[03:08] <lucs> (tried 1 and False, no luck)

[03:08] <ugexe> yes, and --foo

[03:09] <lucs> Ah, right

[03:09] <lucs> Thanks.

[03:09] *** noganex left
[03:09] *** pierre-vigier joined
[03:09] <ugexe> sub MAIN (Bool :$foo) tho (named :$foo)

[03:10] <PerlJam> I think that changes the nature of lucs' original question substatially  ;)

[03:11] <lucs> Bah, good enough :)

[03:11] <lucs> (better even)

[03:12] <ugexe> i was just hoping he wasnt crazy enough to want positional bool command line arguments

[03:12] <PerlJam> lucs: sub MAIN(Bool(Cool) $foo) { ... }  would allow you to run it as ./foo 1 or ./foo 0

[03:13] <lucs> PerlJam: Aha. Thanks, noted.

[03:13] * PerlJam probably over-uses "foo"

[03:13] <lucs> Different namespaces, no problem :)

[03:17] *** xtreak left
[03:17] <raiph> m: EVAL(now.perl)

[03:17] <camelia> rakudo-moar 56836b: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[03:17] <raiph> sorry, ww

[03:20] *** pierre-vigier left
[03:21] *** pierre-vigier joined
[03:21] <PerlJam> lucs: it occurs to me that I should probably mention that my version will generate true values for practically anything you pass to the program, except for things that evaluate to 0  (that's the price for being a Cool Bool :)

[03:22] <PerlJam> i.e. ./foo goober -> True  ./foo 000 -> False

[03:25] <lucs> PerlJam: Makes sense, and perfectly perlish.

[03:26] <gtodd> can dd show me the body of a sub in the REPL ?  dd &some_sub  shows the signature and then  { #`(Sub|34524460272) ... }

[03:26] <ugexe> whats the best way to pass False to Bool :$foo from the command line?

[03:26] <gtodd> jjust wondered if I could expand that and see what  is in "#`(Sub|34524460272)  "

[03:28] <PerlJam> ugexe: ./foo --/foo

[03:30] <PerlJam> (I'm not sure why / was chosen as the character for "not")

[03:30] <ugexe> PerlJam: nice. dunno how ive never seen anything on it

[03:31] <PerlJam> ugexe: it's in S19 somewhere

[03:31] <gtodd> I'm thinking of the way "dd" (Data::Dumper) in perl5 can set $Data::Dumper::Deparse = "1";  to deparse code refs 

[03:31] <lucs> It's a pretty good choice, as it should't interfere with shell expansion.

[03:31] <lucs> n

[03:32] <PerlJam> aye

[03:36] *** pierre-vigier left
[03:43] *** pierre-vigier joined
[03:45] *** keix left
[03:45] *** keix joined
[03:46] <flussence> gtodd: well, there's &?ROUTINE.file and &?ROUTINE.line, and we have CUR stuff now, so it may not be completely impossible to look up the original source... won't be easy though

[03:49] *** japhb left
[03:49] <TEttinger> PerlJam: the not equal sign in mathematics is a slashed equals sign, maybe some reason like that?

[03:49] *** japhb joined
[03:52] *** uruwi_ joined
[03:53] *** skids left
[03:53] *** uruwi left
[03:54] <gtodd> flussence: wow cool 

[03:55] <gtodd> flussence: I just meant something I had written way back up in the repl and didn't want to scroll back and find ... but finding source of functions from loaded modules would be a great feature ... 

[03:55] <gtodd> for the repl

[03:56] *** vendethiel left
[03:58] *** webstrand joined
[04:03] *** kid51 joined
[04:07] <webstrand> I'm having trouble getting panda to work. I've tried v2015.10 but it fails due to some nil error, and the latest fails with http://dpaste.com/3ZPERBB . I'm using rakudo and moarvm 2015.11, is there some version incompatibility?

[04:19] <awwaiid> I'm seeing some holes in the docs that can be filled with things from like S02. Two questions (1) why weren't the Synopsis used as the seed for the docs? (2) can I take entire swaths of these, such as http://design.perl6.org/S02.html#Names, and bring them somewhere into docs?

[04:19] *** vendethiel joined
[04:21] *** xtreak joined
[04:23] *** kid51 left
[04:27] *** Zoffix joined
[04:28] *** xtreak left
[04:31] *** abaugher_ left
[04:31] *** webstrand left
[04:32] *** Ben_Goldberg left
[04:32] *** abaugher_ joined
[04:32] *** Ben_Goldberg joined
[04:33] *** Ben_Goldberg left
[04:33] *** Ben_Goldberg joined
[04:35] <AlexDaniel> .tell Skarsnik Whoops! “Failed to copy '/home/alex/.panda-work/1449289967_1/lib/mysql/SQLite/StatementHandle.pm6”

[04:35] <yoleaux> AlexDaniel: I'll pass your message to Skarsnik.

[04:43] *** vendethiel left
[04:44] <AlexDaniel> Hm! I've never tried editing a file right on GitHub. That was pretty quick. Anyway: https://github.com/perl6/DBIish/pull/38

[04:51] *** webstrand joined
[04:54] <dalek> doc/qualified-names: e2054c9 | (Brock Wilcox)++ | doc/Language/ (2 files):

[04:54] <dalek> doc/qualified-names: Add basic info on qualified names, taken from S02

[04:54] <dalek> doc/qualified-names: review: https://github.com/perl6/doc/commit/e2054c9c5c

[04:57] *** Calibellus left
[05:00] *** pierre-vigier left
[05:06] *** kjs_ left
[05:12] *** khw left
[05:13] *** Actualeyes joined
[05:19] <chansen_> https://gist.github.com/chansen/6076c2c2c7236dda5fe1

[05:19] <chansen_> ^^^ Named parameters multiple dispatch bug?

[05:20] *** zacts joined
[05:21] *** webstrand left
[05:21] <ugexe> order by constraint count desc

[05:24] <chansen_> Ahh, works

[05:25] <chansen_> Why is that necessary?

[05:25] *** Ben_Goldberg left
[05:28] *** yeahnoob joined
[05:30] <ugexe> because the original first new matched all your signatures. new doesn't imply *only* the arguments passed in (maybe inheritence will add them later for instance)

[05:31] <chansen_> ok, thanks

[05:31] *** AlexDaniel left
[05:33] <ugexe> you might want to look at submethod BUILD

[05:43] <grondilu> m: module tau { constant tau is export = 2*pi }; import tau; say tau

[05:43] <camelia> rakudo-moar 56836b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/emrpvFheer␤Cannot import symbol tau from tau, because it already exists in this lexical scope␤at /tmp/emrpvFheer:1␤------> 3stant tau is export = 2*pi }; import tau7⏏5; say tau␤»

[05:44] <grondilu> ^this does work if I put the module in a file.

[05:44] *** pierre-vigier joined
[05:45] *** pierre-vigier left
[05:46] *** kaare_ joined
[05:47] <grondilu> https://github.com/grondilu/tau/blob/master/tau.pm6

[05:53] *** mohae left
[05:56] <ChoHag> But isn't the whole point of tau that pi is half it, not that it's twice pi?

[05:56] <ChoHag> And why do you hate unicode?

[05:58] <grondilu> in Perl 6, pi is defined as 'pi', not 'π'.  I think a tau module should have the same restreint

[05:58] <grondilu> m: sat π

[05:58] <camelia> rakudo-moar 56836b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/D1PZCqt4TY␤Undeclared routine:␤    sat used at line 1. Did you mean 'set', 'say'?␤␤»

[05:58] <grondilu> m: say π

[05:58] <camelia> rakudo-moar 56836b: OUTPUT«3.14159265358979␤»

[05:58] <grondilu> oh

[05:58] <grondilu> sorry

[05:59] <grondilu> I thought it was not defined.

[05:59] <ChoHag> I had no idea anyway.

[06:17] *** n0tjack joined
[06:19] *** raiph left
[06:22] *** n0tjack left
[06:27] <ChoHag> Has anyone written (or adapted cperl into) a perl 6 emacs mode?

[06:30] *** Actualeyes left
[06:36] *** Actualeyes joined
[06:58] *** km3 joined
[07:02] <uruwi_> m: $_ % 65536 for ^1000000; say now - INIT now;

[07:02] <camelia> rakudo-moar 56836b: OUTPUT«2.36885743␤»

[07:02] <uruwi_> m: $_ +& 65535 for ^1000000; say now - INIT now;

[07:02] <camelia> rakudo-moar 56836b: OUTPUT«0.3290170␤»

[07:15] *** redhands joined
[07:24] *** rurban joined
[07:32] *** molecules joined
[07:32] *** molecules is now known as Guest59403

[07:32] *** Guest59403 left
[07:45] *** yeahnoob left
[07:47] <uruwi_> m: my \a = 5; a for ^1000000; say now - INIT now;

[07:47] <camelia> rakudo-moar 56836b: OUTPUT«0.24396763␤»

[07:47] <uruwi_> m: my $a = 5; $a for ^1000000; say now - INIT now;

[07:47] <camelia> rakudo-moar 56836b: OUTPUT«0.3849377␤»

[07:47] <uruwi_> m: my \a = 5; a for ^1000000; say now - INIT now;

[07:47] <camelia> rakudo-moar 56836b: OUTPUT«0.2504394␤»

[07:47] <uruwi_> m: my $a = 5; $a for ^1000000; say now - INIT now;

[07:47] <camelia> rakudo-moar 56836b: OUTPUT«0.24502646␤»

[07:47] <uruwi_> m: my \a = 5; a for ^1000000; say now - INIT now;

[07:47] <camelia> rakudo-moar 56836b: OUTPUT«0.24859563␤»

[07:47] <uruwi_> m: my $a = 5; $a for ^1000000; say now - INIT now;

[07:47] <camelia> rakudo-moar 56836b: OUTPUT«0.2445257␤»

[07:50] *** CIAvash joined
[07:53] <uruwi_> Anyone know where I can get the source for gen/moar/m-BOOTSTRAP.nqp?

[07:53] *** domidumont joined
[07:55] *** RabidGravy joined
[07:58] *** domidumont left
[07:59] *** domidumont joined
[08:01] <moritz> uruwi_: it's src/Perl6/BOOTSTRAP.nqp

[08:01] <moritz> er, no

[08:02] <moritz> src/Perl6/Metamodel/BOOTSTRAP.nqp

[08:02] *** rurban left
[08:06] <uruwi_> Apparently this part is slow? https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/BOOTSTRAP.nqp#L2000

[08:07] <uruwi_> There's supposed to be an anonymous routine there, isn't it?

[08:07] <moritz> uruwi_: what makes you think it's slow?

[08:08] <moritz> looks like something that usually runs at compile time

[08:08] *** redhands left
[08:08] <uruwi_> Ah, then.

[08:12] <moritz> uruwi_: I'm still curious, why do you think it's slow?

[08:12] <moritz> did it show up in a profile or something?

[08:12] <uruwi_> Yes

[08:12] <uruwi_> I was profiling Digest::MD5, to be exact.

[08:13] <uruwi_> The question is: Why did it show in the profile?

[08:13] *** uruwi_ is now known as uruwi

[08:13] <moritz> uruwi: does Digest::MD5 do some fancy multi dispatch?

[08:14] <moritz> uruwi: and second question, how long is the run time of the code that you profiled?

[08:15] <uruwi> I typically manage only 30 hashes per second

[08:15] <moritz> uruwi: that doesn't quite answer my question

[08:15] <uruwi> Over 3 seconds to calculate 100 hashes

[08:15] <moritz> ok

[08:16] <moritz> so it should be long enough to drown out compile time

[08:19] <uruwi> High-performance Perl 6 is a nightmare.

[08:26] *** darutoko joined
[08:28] *** xpen joined
[08:29] <RabidGravy> is Digest::MD5 doing it all in Perl?

[08:29] <uruwi> Yes

[08:29] <uruwi> And not very performant Perl, apparently, either.

[08:30] <RabidGravy> looking at the code it could probably do with a bit of love

[08:30] *** xpen left
[08:31] <uruwi> Hold on

[08:31] <uruwi> I'm working on optimizing it

[08:32] <uruwi> https://github.com/bluebear94/perl6-digest-md5

[08:32] <moritz> I'm sure that works with arrays of integers somehow, right?

[08:32] <moritz> if you manage to make them native and shaped ("my int @a[64]") or so, that should give a huge boost

[08:34] <dalek> DBIish: 4a26f60 | (Aleks-Daniel Jakimenko)++ | META.info:

[08:34] <dalek> DBIish: Typo in META.info

[08:34] <dalek> DBIish: 

[08:34] <dalek> DBIish: It seems like the typo was made during copy-pasting.

[08:34] <dalek> DBIish: (“DBDish/SQLite” was renamed to “mysql/SQLite” instead of “DBDish/mysql”)

[08:34] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/4a26f607c5

[08:34] <dalek> DBIish: f1be21e | moritz++ | META.info:

[08:34] <dalek> DBIish: Merge pull request #38 from AlexDaniel/patch-1

[08:34] <dalek> DBIish: 

[08:34] <dalek> DBIish: Typo in META.info

[08:34] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/f1be21ed6d

[08:35] <uruwi> moritz: Sadly I can't test that because I only have 2015.09 installed.

[08:35] <moritz> uruwi: time to upgrade :-)

[08:36] <moritz> uruwi: but even 2015.09 shoulld support arrays of native ints, even if not shaped

[08:36] <uruwi> Heh, I was just waiting for MSI's to be released.

[08:37] <bartolin_> there is a failing test in S32-hash/adverbs.t which looks very strange. the code similiar to the following does not die as expected when I run the test file:

[08:37] <bartolin_> m: my %h = b => 2, c => 3; say %h<b>:zorp

[08:37] <camelia> rakudo-moar 56836b: OUTPUT«Unexpected named parameter 'zorp' passed␤  in block <unit> at /tmp/m8_t6hyU7j:1␤␤»

[08:39] <bartolin_> maybe it is somehow related to precompilation of lib/Test.pm? If I add a line to that file, the first execution of the command with 'use Test' works

[08:39] <bartolin_> you can see the behaviour in that gist: https://gist.github.com/usev6/13268ed977a0b1ff69a6

[08:39] <bartolin_> is that a known issue?

[08:40] <moritz> bartolin_: not as far as I know

[08:41] <grondilu> there's a RC entry for MD5, btw.  http://rosettacode.org/wiki/MD5/Implementation#Perl_6  Feel free to propose perf improvements there.

[08:41] *** nadim left
[08:42] <bartolin_> moritz: thanks. I'll rakudo bug it ...

[08:42] *** nadim joined
[08:51] *** n0tjack joined
[08:54] <RabidGravy> in markdown, how does one stop eg  $*REPO being rendered as $<i>REPO</i> ?

[08:55] <moritz> RabidGravy: `$*REPO`

[08:55] <moritz> RabidGravy: backticks are for code

[08:55] *** n0tjack left
[08:55] <RabidGravy> ah ha!

[08:56] <RabidGravy> cheers

[09:11] <Woodi> gfldex++ #  ~~ Proxy; # True

[09:14] <moritz> masak++ # advent post

[09:15] *** muLinuxer joined
[09:17] *** rindolf joined
[09:18] *** domidumont left
[09:30] *** muLinuxer left
[09:35] *** Alina-malina joined
[09:39] *** RabidGravy left
[09:47] <nine> Oh how I love not having to re-install modules after building rakudo :)

[09:47] <lizmat> good *, #perl6!

[09:47] <lizmat> yes!

[09:48] <lizmat> Although, after a recompile, the following still errors:

[09:48] <lizmat> $ perl6 -MText::CSV -e ''

[09:48] <lizmat> ===SORRY!===

[09:48] <lizmat> Cannot find method 'run_alt'

[09:48] <lizmat> doing it a second time, works fine

[09:48] <[Tux]> probably also the cause for Travis to report Failure

[09:48] <lizmat> so I assume the precomp is messing up something, causing the loading to ultimately fail

[09:49] <lizmat> the first time

[09:49] <[Tux]> (no timings today: I'm working on a better IO::String, but that proves harder than I imagined)

[09:51] *** Alina-malina left
[09:52] <[Tux]> IO::Blob is too overengineered for my purpose and IO::String doesn't offer enough (yet)

[09:53] <bartolin_> lizmat: getting a different result at the first run of a command while using a module sound similiar to the spectest failures mentioned here: https://gist.github.com/usev6/13268ed977a0b1ff69a6

[09:53] <bartolin_> lizmat: also http://irclog.perlgeek.de/perl6/2015-12-05#i_11661151

[09:54] <lizmat> bartolin_: ah, interesting!

[09:55] <lizmat> I hadn't realised thattest-files were being precomped ?

[09:55] <bartolin_> but lib/Test.pm get's precompiled, maybe?

[09:56] <lizmat> BTW, is it correct that Inline::Perl5 still doesn't install because of Pod::Coverage hanging ?

[09:56] <nine> Inline::Perl5 doesn't use Pod::Coverage

[09:57] <nine> But it needs to locate it's p5helper.so which used to crawl @*INC

[10:03] <lizmat> nine: so Inline::Perl5 still doesn't install, right ?   Just a reality check

[10:03] <nine> correct

[10:03] <lizmat> :-(

[10:03] <nine> YES YES YES YES YES YES YES!

[10:04] <lizmat> sorry, I guess you've been asked that too many times the past week...  I haven't been online much :-(

[10:04] <nine> It works!

[10:04] <lizmat> you mean you fixed it just now ?

[10:04] *** nadim left
[10:06] <dalek> rakudo/dist_resources: 995375e | (Stefan Seifert)++ | src/ (7 files):

[10:06] <dalek> rakudo/dist_resources: Implement %?RESOURCES

[10:06] <dalek> rakudo/dist_resources: 

[10:06] <dalek> rakudo/dist_resources: Allows for e.g. Inline::Perl5 to find its p5helper.so both when loaded from

[10:06] <dalek> rakudo/dist_resources: a file system directory and when loading an installed version by just accessing

[10:06] <dalek> rakudo/dist_resources: %?RESOURCES<p5helper.so>

[10:06] <dalek> rakudo/dist_resources: 

[10:06] <dalek> rakudo/dist_resources: Needs to be cleaned up a little before merging.

[10:06] <dalek> rakudo/dist_resources: review: https://github.com/rakudo/rakudo/commit/995375eaad

[10:06] <nine> lizmat: ^^^

[10:06] <nine> rakudo's dist_resources branch and panda's resources branch make it happen

[10:06] <lizmat> way cool, nine++

[10:06] *** Begi joined
[10:07] <nine> Needs just a little more work before merging, but we're almost there :)

[10:07] <nine> Now I have to go buy a christmas tree and many other errands, so I won't be online till probably in the evening.

[10:08] <lizmat> nine: happy shopping!

[10:08] <nine> .tell FROGGS I worked around the problem by not referencing the CompUnit::Repository directly in Distribution::Resources. I only store its path-spec which I can use to get the object later on (at runtime instead of compile time)

[10:08] <yoleaux> nine: I'll pass your message to FROGGS.

[10:09] *** Begi2 joined
[10:12] *** nadim joined
[10:13] *** Begi left
[10:18] *** Begi2 is now known as Begi

[10:21] *** spider-mario joined
[10:42] *** iH2O joined
[10:48] *** _nadim joined
[10:52] *** Peter_R joined
[10:52] *** nadim left
[11:03] *** virtualsue joined
[11:04] *** csd_ left
[11:04] *** virtualsue left
[11:05] *** virtualsue joined
[11:05] *** xinming_ left
[11:07] *** vendethiel joined
[11:08] *** Ven joined
[11:10] *** xinming joined
[11:12] *** Ven left
[11:13] <dalek> rakudo/nom: 0236c43 | lizmat++ | src/core/CurrentThreadScheduler.pm:

[11:13] <dalek> rakudo/nom: Make sure we provide a scope for the CATCH block

[11:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0236c435cf

[11:13] <dalek> roast: 377935b | lizmat++ | S17-scheduler/at.t:

[11:13] <dalek> roast: Unfudge now passing test

[11:13] <dalek> roast: review: https://github.com/perl6/roast/commit/377935ba71

[11:14] <stmuk> http://blogs.msdn.com/b/vcblog/archive/2015/12/04/introducing-clang-with-microsoft-codegen-in-vs-2015-update-1.aspx

[11:14] <stmuk> !

[11:15] <jdv79> do ww have auth and ver support yet?

[11:15] <jdv79> we

[11:17] *** n0tjack joined
[11:17] *** Skarsnik joined
[11:21] *** n0tjack left
[11:21] <_nadim> Good morning, two questions, #1 given a little perl code, can I get a dump of how it is parsed in some way?

[11:24] <gfldex> _nadim:  perl6 --target=ast -e 'say "foo"'

[11:25] <_nadim> #2 I have a sub S in module M, S uses multis defined in M, in the context in which  I call S, I have a bunch of multis in another context;so  those are not visible to S, what's the clean way to get my multis in M?

[11:25] <_nadim> gfldex: thanks

[11:25] *** iH2O left
[11:26] <Woodi> _nadim: objects and methods ?

[11:27] *** rurban joined
[11:29] <_nadim> the multis are filters used by S to display objects. Classes have the possibility to define methods if they want to but the usage I have shall not modify the classes thus the use of multis

[11:31] <Woodi> _nadim: overriding multis when loading M is not cleanest way probably...

[11:31] <Woodi> maybe lexically...

[11:33] <Woodi> or some plugin with specific api?

[11:33] <_nadim> adding multis is what is done, overriding possible but will probably not be used a lot. having a multi per type is the cleanest I believe.  and this is needed only when a specific object type should be handled specially, in most cases the ulti for Any just works. 

[11:34] <_nadim> I'd do the API thingy, I believe that all multies should be kept in the dumpers namespace, the question I have is how does one do that.

[11:35] <Woodi> so you have multi sub filter( Int i ) ... and same thing in M ?

[11:35] <_nadim> short of defining them in the M namespace but that look less good than an API call. And I'd rather have the multis exist only during the call to S

[11:37] <_nadim> Woodi: I have a fixed set of multis in M only. for a new class, I control, I can add a method, but for classes outside my control I want to add a multi for that class, one that would match instead for filter(Any), which is one of M's pre-declared filters

[11:39] <Woodi> _nadim: there are things like .nextsame but I have no idea how they work. you want to override standard control multis or extend them somehow ?

[11:43] *** _nadim left
[11:43] *** _nadim joined
[11:49] *** Myron joined
[11:50] *** virtualsue left
[11:52] <llfourn> anyway to disable REPL behaviour in p6 so it works like p5 (read program from STDIN)?

[11:54] <lizmat> perl6 <foo  ??

[11:55] <lizmat> llfourn: where foo is the filename ?

[11:55] <llfourn> lizmat: but I don't have a file I have stdin

[11:55] <Woodi> echo "say 2" | perl6  works but gives '>'

[11:55] <llfourn> perl6 -- # seems to be a thing in --help

[11:55] <llfourn> Woodi: but that will only work for one line

[11:55] <Woodi> hmm

[11:56] <llfourn> try printf '{\n}\n'|perl6

[11:56] <llfourn> I think -- switch might be broken

[11:56] <llfourn> try printf '{\n}\n'|perl6 -- # should work

[11:56] <lizmat> hmmm...  now that we have IO::Handle.t on moar, we should be able to get that to work

[11:56] <Woodi> cat scr.pl | perl6  gives: > 1\n> 2\n> *

[11:57] <llfourn> Woodi: yep because it's treating it like REPL

[11:58] <Woodi> yea...

[11:58] <Woodi> perl6 -- scr.pl  works :)

[11:58] <llfourn> lizmat: I'll try and see what's going on with -- implementation atm

[11:58] <llfourn> (assuming it's what I want)

[12:00] *** _mg_ joined
[12:02] *** virtualsue joined
[12:02] <_nadim> I can declare two modules in the same file, how do I need/use/require the first one in the second one? if I do nothing then subs in the first module are not visible. if I need it or I use it, I get an error as the modules' file does not exist. if I require it, the subs in the first module are not visible.

[12:04] <llfourn> _nadim: need use and require are for compilation units not modules aka module foo { }

[12:04] <llfourn> _nadim: you can try import

[12:05] <_nadim> http://nopaste.linux-dev.org/?876289

[12:05] <_nadim> import worked perfectly, thank you

[12:06] <llfourn> _nadim: no worries. Actually we need to document import :)

[12:06] <_nadim> it "is" documented here, under the 'use' entry  http://doc.perl6.org/language/modules

[12:06] <_nadim> but it would be nice with an own entry and an example

[12:07] <llfourn> yes I wrote that and atm that is actually a lie

[12:07] <_nadim> hehe

[12:07] <llfourn> use is not the same as need + import

[12:07] <llfourn> use loads and imports from the compilation unit (aka file)

[12:07] <_nadim> then we all want to know all about it :)

[12:07] <llfourn> import imports from a package

[12:07] <llfourn> but according to design docs they are sort of meant to be the same

[12:08] <llfourn> so it's a case of tell the truth about rakudo and lie about perl6

[12:08] <_nadim> Now I'll try my hand at squrelling multis in a package that is not the one I am working with

[12:08] <_nadim> llfourn: maybe just telling the truth about both is best, we'll all need to live with Rakudo too, not just P6

[12:10] <llfourn> _nadim: I agree :)

[12:12] *** Myron left
[12:18] <dalek> roast: ce5872f | lizmat++ | S17-scheduler/basic.t:

[12:18] <dalek> roast: Unfudge now passing tests

[12:18] <dalek> roast: review: https://github.com/perl6/roast/commit/ce5872f084

[12:18] <dalek> rakudo/nom: 519a081 | lizmat++ | src/core/ (2 files):

[12:18] <dalek> rakudo/nom: Move substr internals to Rakudo::Internals

[12:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/519a0812d5

[12:22] <llfourn> lizmat,Woodi It's perl6 - # read program from stdin

[12:23] <llfourn> ( of course )

[12:23] <lizmat> :-)

[12:23] <lizmat> still, now that we have IO::Handle.t, the - should probably not be necessary

[12:23] <lizmat> llfourn++  # for finding out and telling us  :-)

[12:24] <llfourn> lizmat: oh you mean autodetect?

[12:25] <lizmat> yeah

[12:26] <llfourn> not bad idea unless pipeing a REPL session is a thing

[12:26] <Woodi> llfourn: that realy works :)

[12:26] <llfourn> +1 from me :)

[12:27] <llfourn> probably should have been the first thing I tried

[12:27] <llfourn> so what does -- mean then

[12:27] <Woodi> lizmat: what you mean ? .t changes something ?  ;)

[12:28] <lizmat> leave the rest of the parameters for the script?

[12:28] <llfourn> ah

[12:28] <lizmat> no, the "t" method on an IO::Handle is True if there is a terminal attached to it

[12:28] <lizmat> in other words: there is most likely an actual person sitting at the other end

[12:28] <Woodi> lizmat: ah, oki :)

[12:29] *** nadim joined
[12:32] *** leont joined
[12:33] *** _nadim left
[12:39] *** risou is now known as risou_awy

[12:39] *** risou_awy is now known as risou

[12:40] <llfourn> m: say { ... } # is there any explanation as to why ;; is there in an anon block

[12:40] <camelia> rakudo-moar 519a08: OUTPUT«-> ;; $_? is raw { #`(Block|85255656) ... }␤»

[12:51] <lizmat> llfourn: that's to make sure the parameters following it are not part of multi-dispatch matching

[12:51] <llfourn> lizmat: how is multi dispatch used with anon blocks?

[12:51] <llfourn> incase I decide to make it a candidate later?

[12:51] <lizmat> well, it's more about a Signature, really

[12:52] <lizmat> the Block has a signature, and what you see there is the .perl of a Signature

[12:52] <lizmat> afaik  :-)

[12:53] <llfourn> mm I'm just wondering why by default blocks have a ;; as part of their sig when it's unlikely they are going to be used in multi dispatch

[12:53] <llfourn> m: say -> $a,$b { }

[12:53] <camelia> rakudo-moar 519a08: OUTPUT«-> $a, $b { #`(Block|64754752) ... }␤»

[12:54] <llfourn> I'm writing a presentation for Sydney.pm with demoing the fact that blocks are first level objects

[12:54] <llfourn> wondering how to answer if someone asks

[12:55] <lizmat> m: sub a($a,$b;; $_) { }; say &a.perl

[12:55] <camelia> rakudo-moar 519a08: OUTPUT«sub a ($a, $b;; $_) { #`(Sub|70411880) ... }␤»

[12:56] <lizmat> Block isa Code, Code hasa Signature, Block.perl does $!signature.perl

[12:57] <lizmat> that's why it shows up like that: Signatures are generic

[12:58] <dalek> rakudo/nom: 3cb6ae9 | lizmat++ | src/core/ (4 files):

[12:58] <dalek> rakudo/nom: Introduce Rakudo::Internals.error-rcgye

[12:58] <dalek> rakudo/nom: 

[12:58] <dalek> rakudo/nom: And make sure all copy-n-paste of RAKUDO_ERROR_COLOR handling is using that.

[12:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3cb6ae98bd

[12:59] *** boegel left
[13:00] *** telex left
[13:01] *** telex joined
[13:03] *** boegel joined
[13:05] <dalek> rakudo/nom: 79e3e9d | lizmat++ | src/core/Label.pm:

[13:05] <dalek> rakudo/nom: Oops, it's a method, not an our sub

[13:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/79e3e9d9f8

[13:08] <llfourn> lizmat: just looked at Signature. You are right it is more of a byproduct of block's default signature not having .multi-invocant set for the $_ arg. So nothing too special. Thanks :).

[13:16] <chansen_> ugexe: is there a more idiomatic way using submethod BUILD rather than using multi method new? (<https://gist.github.com/chansen/6076c2c2c7236dda5fe1>)

[13:17] *** raiph joined
[13:20] <mspo> m: {}.WHAT

[13:20] <camelia> rakudo-moar 79e3e9: ( no output )

[13:20] <timotimo> huh, we still have proto.perl6.org and it forwards to modules.perl6.org

[13:20] <grondilu> anybody doing http://adventofcode.com/ ?

[13:20] <timotimo> well, not quite "forwards"

[13:20] <timotimo> but it gives you the same thing as modules.perl6.org does

[13:21] <timotimo> chansen_: candidates with their only difference in named parameters are tried in order of appearance in the code file

[13:21] <mspo> timotimo: www.perl6.org seems to handle the rest.  I think someone should setup a few redirects :)

[13:22] <timotimo> chansen_: so because the "year, day" candidate comes first and matches in every case, it's always the one being chosen

[13:23] *** abaugher_ left
[13:23] <chansen_> timotimo: Thanks! ugexe pointed that out yesterday. He said I should take a look at submethod BUILD 

[13:25] <mspo> https://github.com/perl6/perl6-examples/blob/master/lib/Perl6/Examples.pm ?

[13:25] <timotimo> hm, not sure what he may have meant

[13:26] <mspo> put your multimethod inside of BUILD?

[13:28] <timotimo> surely you mean "the decision logic"?

[13:29] <mspo> anyway don't listen to me, I'm struggling to write my first p6 module ;)

[13:29] <grondilu> m: say i.narrow

[13:29] <camelia> rakudo-moar 79e3e9: OUTPUT«Attempt to divide 1 by zero using /␤  in block <unit> at /tmp/NtZv0lmiS_:1␤␤Actually thrown at:␤  in block <unit> at /tmp/NtZv0lmiS_:1␤␤»

[13:29] *** kid51 joined
[13:31] <dalek> rakudo/nom: 65de9c3 | lizmat++ | src/core/Block.pm:

[13:31] <dalek> rakudo/nom: Don't use a var for Block.perl

[13:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/65de9c3172

[13:33] <grondilu> division by zero error in i.narrow is easy to fix.  I'll submit a PR 

[13:34] <lizmat> ++grondilu

[13:38] *** lucasb joined
[13:38] <dalek> roast: 47943ae | lizmat++ | S06-other/main-usage.t:

[13:38] <dalek> roast: Fix another print streamlining casualty

[13:38] <dalek> roast: review: https://github.com/perl6/roast/commit/47943aee18

[13:40] *** pecastro left
[13:42] *** pippo joined
[13:42] <pippo> o/ #perl6

[13:42] <mspo> is there an IO::Socket for udp?

[13:42] <mspo> and unix sockets

[13:43] <lizmat> grondilu: wouldn't something like $!re != 0e0 && $!im / $!re ≅ 0e0 ?? $!re.narrow !! self   make more sense ?

[13:45] <grondilu> it's the same isn't it?

[13:45] <timotimo> mspo: no :(

[13:45] <timotimo> moar doesn't have udp sockets yet

[13:46] <grondilu> m: say .re !== 0e0 && .im / .re =~= 0e0 ?? .re.narrow !! $_ given i

[13:46] <camelia> rakudo-moar 79e3e9: OUTPUT«0+1i␤»

[13:46] <grondilu> m: say .re == 0e0 ?? $_ !! .im / .re =~= 0e0 ?? .re.narrow !! $_ given i

[13:46] <camelia> rakudo-moar 79e3e9: OUTPUT«0+1i␤»

[13:47] <lizmat> hmmm... interesting data point:

[13:47] <lizmat> RAKUDO_MODULE_DEBUG=1 make t/spec/S32-hash/adverbs.t    # succeeds, no errors

[13:47] *** _mg_ left
[13:47] <lizmat> without the RAKUDO_MODULE_DEBUG it fails

[13:47] *** virtualsue left
[13:49] *** WizJin left
[13:52] *** WizJin joined
[13:53] <grondilu> m: for ^4 { say "hi" }

[13:53] <camelia> rakudo-moar 65de9c: OUTPUT«hi␤hi␤hi␤hi␤»

[13:53] <lizmat> m: my $a = 42;  my $b ::= $a; $b = 666; say $a   # if I understand the spec correct, the assignment to $b should fail

[13:53] <camelia> rakudo-moar 65de9c: OUTPUT«666␤»

[13:53] <grondilu> m: for ^4 { when 3 { say "three!" }; say "hi" }

[13:53] <camelia> rakudo-moar 65de9c: OUTPUT«hi␤hi␤hi␤three!␤»

[13:53] <grondilu> m: for ^4 { when 1 { say "three!" }; say "hi" }

[13:53] <camelia> rakudo-moar 65de9c: OUTPUT«hi␤three!␤hi␤hi␤»

[13:54] <lizmat> perhaps we should make ::= a NYI error, to prevent code in the wild that has wrong assumptions about ::= ?

[13:54] <grondilu> sorry, I thought that would reproduce an unexpected behavior I got

[13:54] *** hankache joined
[13:57] <mspo> timotimo: weird

[13:57] <Zoffix> What does "getlex: outer index out of range" error mean?

[13:57] <yoleaux> 01:38Z <PerlJam> Zoffix: Sorry I'm late but ... Sure, if people want to do multiple articles per day, I don't see why not.   Everyone may need to increase the communication factor a little bit though.   And I'm not sure if later-in-the-day articles will hide earlier ones or not, but either way, perhaps for those days that have multiple articles, the main one for the day could just be pointers to the others.

[13:58] *** pecastro joined
[13:58] * grondilu wonders if Complex.narrow should use atan2

[13:58] <mspo> there's no lower level Socket either, it seems

[14:02] *** WizJin left
[14:03] <mspo> christmas is soon ;)

[14:03] <Zoffix> Hm, caused by "is cached"

[14:03] <hankache> hello #perl6

[14:03] <Zoffix> \o

[14:04] <Skarsnik> ua is messy ><

[14:04] <yoleaux> 04:35Z <AlexDaniel> Skarsnik: Whoops! “Failed to copy '/home/alex/.panda-work/1449289967_1/lib/mysql/SQLite/StatementHandle.pm6”

[14:04] *** WizJin joined
[14:04] <Skarsnik> hm, typo x)

[14:05] <Zoffix> m: sub chars64with (@*chars) is cached { 42 }; say [chars64with('+', '/'), chars64with('-', '_')]

[14:05] <camelia> rakudo-moar 65de9c: OUTPUT«Unhandled exception: Method 'rcgye' not found for invocant of class 'Rakudo::Internals'␤   at <unknown>:1  (/home/camelia/rakudo-m-inst-2/share/perl6/runtime/CORE.setting.moarvm:print_exception:4294967295)␤ from gen/moar/m-CORE.setting:19749  (/home/ca…»

[14:06] <Zoffix> m: sub foo (*@chars) is cached { 42 }; say [foo('+', '/'), foo('-', '_')]

[14:06] <camelia> rakudo-moar 65de9c: OUTPUT«[42 42]␤»

[14:06] <Skarsnik> how to show the caller in a sub/method?

[14:09] <Zoffix> so "is cached" is an issue with the new precomp stuff?

[14:10] <Skarsnik> what cached do? x)

[14:10] <Zoffix> Skarsnik, http://doc.perl6.org/routine/is%20cached

[14:11] <Skarsnik> how it's neat

[14:11] <Skarsnik> *ho

[14:11] <Zoffix> yeah

[14:11] <Skarsnik> Why do I have to patch everything just to scrap webpages xD

[14:12] <Zoffix> :)

[14:14] <Zoffix> hm "getlex: outer index out of range in any enter at gen/moar/m-Metamodel.nqp:3763"

[14:14] <lizmat> Zoffix: fixing

[14:15] <Zoffix> lizmat, is it related to precomp?

[14:15] <lucasb> m: sub f(@*a) {}; f(1); f(2)  # Zoffix++

[14:15] <camelia> rakudo-moar 65de9c: OUTPUT«Unhandled exception: Method 'rcgye' not found for invocant of class 'Rakudo::Internals'␤   at <unknown>:1  (/home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm:print_exception:4294967295)␤ from gen/moar/m-CORE.setting:19749  (/home/ca…»

[14:15] <lizmat> no, something stupid I just did

[14:15] <Skarsnik> m: class A { method foo(say "hello"); my $a = A.new; $a.$("foo");

[14:15] <camelia> rakudo-moar 65de9c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/SixX6briLB␤Invalid typename 'say' in parameter declaration.␤at /tmp/SixX6briLB:1␤------> 3class A { method foo(say7⏏5 "hello"); my $a = A.new; $a.$("foo");␤»

[14:15] <Zoffix> lucasb, it's @*a vs *@a

[14:15] <Skarsnik> m: class A { method foo {say "hello"}}; my $a = A.new; $a.$("foo");

[14:15] <camelia> rakudo-moar 65de9c: OUTPUT«Cannot find method 'CALL-ME'␤  in block <unit> at /tmp/bKKbq7e6PP:1␤␤»

[14:15] <Skarsnik> hm

[14:15] <Zoffix> lizmat, aha! :) Someone dissed me on my bug report, saying this was precomp stuff

[14:16] <Skarsnik> It's a new trend this days "Does not work -> blame precomp stuff"

[14:17] <lucasb> idk about *@a, but I think that sub f(@*a) is bug, isn't it? I never saw the name 'rcgye' before... dunno what it is

[14:17] <Zoffix> Blame is one thing, but closing a real Issue and saying I should be "more restrictive" is another.

[14:17] <Zoffix> Anyway. I guess that's getting addressed now, so *me goes down through other 30+ github notifications*

[14:17] *** skaji left
[14:18] <dalek> rakudo/nom: b8122e9 | lizmat++ | src/core/ (3 files):

[14:18] <dalek> rakudo/nom: It's error-rcgye, not just rcgye!

[14:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8122e9bc0

[14:19] *** skids joined
[14:19] <Zoffix> oh

[14:19] <Skarsnik> how do I call a method by its name?

[14:19] <Zoffix> lizmat, i thought you meant the "getlex: outer index out of range in any enter at gen/moar/m-Metamodel.nqp:3763" issue

[14:19] <lizmat> ."$foo"

[14:19] <moritz> ."$foo"()

[14:19] <Skarsnik> Ooh it's so simple?

[14:19] <lizmat> moritz: are the parens needed ?

[14:19] <moritz> lizmat: I think so

[14:20] <moritz> m: say 1."cos"

[14:20] <camelia> rakudo-moar 65de9c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/SbtPMNyPS2␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at /tmp/SbtPMNyPS2:1␤------> 3say 1."cos"7⏏5<EOL>␤»

[14:20] <moritz> m: say 1."cos"()

[14:20] <camelia> rakudo-moar 65de9c: OUTPUT«0.54030230586814␤»

[14:20] <lizmat> moritz++

[14:20] *** skaji joined
[14:21] <lucasb> ah, lizmat++; I didn't saw your previous commit :)

[14:22] <lucasb> rcgye == red clear green yellow eject

[14:22] *** bjz_ left
[14:23] *** bjz joined
[14:24] <[Tux]> test             50000    24.180    24.069

[14:24] <[Tux]> test-t           50000    20.364    20.252

[14:24] <[Tux]> csv-parser       50000    25.847    25.736

[14:24] <lizmat> yeah, wanted to implicitely document the return values

[14:24] *** virtualsue joined
[14:25] <hankache> is panda working?

[14:26] <[Tux]> yes

[14:26] <hankache> i just updated rakudo and panda using rakudobrew and panda stopped working

[14:26] <Zoffix> Mine just lounges on the couch all day... lazy critter..

[14:26] <hankache> ===SORRY!=== Could not find Shell::Command:ver<True>:auth<True>:api<True>

[14:27] <Zoffix> hankache, rebuild it

[14:27] <hankache> Zoffix ok using rakudob rew?

[14:28] <Zoffix> hankache, yeah, rakudobrew build-panda

[14:28] <hankache> Zoffix: tried again, no luck :(

[14:29] <hankache> ===SORRY!===

[14:29] <hankache> Could not find Shell::Command:ver<True>:auth<True>:api<True> in:

[14:29] <hankache>     /home/kmel/.perl6/2015.11-366-g65de9c3

[14:29] <hankache>     /home/kmel/.rakudobrew/moar-nom/install/share/perl6/site

[14:29] <hankache>     /home/kmel/.rakudobrew/moar-nom/install/share/perl6/vendor

[14:29] <hankache>     /home/kmel/.rakudobrew/moar-nom/install/share/perl6

[14:29] *** WizJin left
[14:29] <Zoffix> hankache, did it actually build or did it say "Run bootstrap instead of rebootstrap"?

[14:29] <lizmat> hankache: I've heard good stories about nuking the entire installation first

[14:30] <Zoffix> Yeah, that's what I've done to fix that: nuke ~/.rakudobrew and ~/.perl6, then install everything from scratch

[14:31] <hankache> Zoffix: first time it said Run bootstrap instead of rebootstrap then i updated rakudobrew and rebuilt panda

[14:31] <hankache> lizmat Zoffix i'll nuke it and see what happens

[14:33] <Skarsnik> hm why $h."{$a<name>.lc}"() = ~$a<value>; broke me the whole object. $a<name> is an attribute name.

[14:33] <stmuk> ==> Installing Term::termios

[14:33] <stmuk> Method 'key' not found for invocant of class 'Any'

[14:34] <arnsholt> Is there a way to get the PID of the interpretr running my program?

[14:34] <lizmat> m: say $*PID

[14:34] <camelia> rakudo-moar b8122e: OUTPUT«8233␤»

[14:34] <lizmat> arnsholt: ^^^  ??

[14:35] <arnsholt> Oh, derp. Of course

[14:35] <arnsholt> I grepped for pid, but didn't think to do grep -i

[14:35] <arnsholt> Cheers!

[14:35] <lizmat> you're welcome!

[14:36] <moritz> m: use NativeCall; sub getpid() return int64 {*}; say getpid

[14:36] <camelia> rakudo-moar b8122e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Udza2qOJYI␤Missing block␤at /tmp/Udza2qOJYI:1␤------> 3use NativeCall; sub getpid()7⏏5 return int64 {*}; say getpid␤    expecting any of:␤        new name to be defined␤»

[14:36] <moritz> m: use NativeCall; sub getpid() returns int64 is native(Str) {*}; say getpid

[14:36] <camelia> rakudo-moar b8122e: OUTPUT«8316␤»

[14:36] <arnsholt> Heh. That'd work too =D

[14:36] <dalek> rakudo/nom: 15ea690 | lizmat++ | src/Perl6/Grammar.nqp:

[14:36] <dalek> rakudo/nom: Make ::= a NYI, in light of 6.c

[14:36] <dalek> rakudo/nom: 

[14:36] <dalek> rakudo/nom: In the hope that forgiveness > permission  :-)

[14:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15ea69078c

[14:36] *** csd_ joined
[14:36] <stmuk> ah that's just a missing provides

[14:37] <lizmat> m: use nqp; say nqp::getpid   # arnsholt, yet another way

[14:37] <camelia> rakudo-moar b8122e: OUTPUT«8332␤»

[14:38] <nadim> is it possible to fiddle in a multi sub in another module?

[14:40] *** bjz_ joined
[14:41] *** bjz left
[14:47] <lizmat> afk for a few hours&

[14:47] <stmuk> https://github.com/tadzik/panda/pull/261

[14:48] *** rindolf left
[14:49] <Skarsnik> hm has $.foo is rw; create a setFoo accessor?

[14:51] *** FROGGS_ is now known as FROGGS

[14:52] <FROGGS> o/

[14:52] <yoleaux> 4 Dec 2015 22:54Z <nine> FROGGS: I could fix the install-core-dist.pl issue. Sadly it's really the disabling of %.loaded and %.seen that makes my test work, confirming our working theory.

[14:52] <yoleaux> 4 Dec 2015 23:05Z <nine> FROGGS: I got a reasonable workaround! Since we may not keep the lexpad either, we just don't. After merging the globals I clean the CompUnit::Handle. We have no further use for it anyway. At least none that I'm aware of.

[14:52] <yoleaux> 4 Dec 2015 23:09Z <nine> FROGGS: ok, my simple test works, but I still get the same failure in Inline::Perl5 :(

[14:52] <yoleaux> 10:08Z <nine> FROGGS: I worked around the problem by not referencing the CompUnit::Repository directly in Distribution::Resources. I only store its path-spec which I can use to get the object later on (at runtime instead of compile time)

[14:52] <Skarsnik> Hi FROGGS x)

[14:53] <moritz> Skarsnik: no, it means you can say $obj.foo = 'newvalue';

[14:53] <Skarsnik> m: class A { has $.a is rw}; my $p = A.new; $p."a"() = 42; say $p.perl;

[14:53] <camelia> rakudo-moar 15ea69: OUTPUT«A.new(a => 42)␤»

[14:53] *** xpen joined
[14:53] <FROGGS> hi Skarsnik 

[14:54] <Skarsnik> I don't get it a : $h."{$a<name>.lc}"() = ~$a<value>; destroy my $h object

[14:54] *** rindolf joined
[14:55] <Skarsnik> and $a<name> only contain attribute name

[14:56] <moritz> what do you mean by "destroy"?

[14:56] <masak> g'day, #perl6

[14:56] <yoleaux> 00:19Z <Zoffix> masak: masak++ I've learned something: you can't have $foo-2 :)

[14:56] <masak> :)

[14:58] <Skarsnik> nvm it work but now http::ua stop adding cookies Oo

[15:00] <cognominal> what is the official status of HLL::Grammar, it contains all sort of useful methods that are not documented anywhere in the specs.

[15:00] *** dbrock joined
[15:00] *** mbrock joined
[15:00] *** mbrock left
[15:02] <moritz> cognominal: HLL::Grammar is an implementation detail, IMHO

[15:02] <zengargoyle> i was thinking HLL::Grammar is a NQP thing vs a Perl thing.

[15:03] *** xpen left
[15:04] *** xpen joined
[15:04] <zengargoyle> in the NQP/Rakudo workstop stuff it's sort of a base used to implement whatever language you wish.  like Ruby-ish or PHP-ish in the examples.

[15:05] <Skarsnik> Yay I fixed cookies I think?

[15:07] <FROGGS> cognominal: it is just a helper exposed by NQP to implement high level languages

[15:08] * virtualsue blows a raspberry at travis

[15:08] <FROGGS> cognominal: so, it does not belong to the design docs or spec tests

[15:08] <stmuk> virtualsue: wrong channel :P

[15:09] <virtualsue> could be

[15:10] <nadim> moritz: anywhere I could find docus about putting a sub in another module?

[15:11] <hankache> lizmat Zoffix i nuked .perl6 and built moar again. when i try to build panda it gets stuck at ==>Testing JSON::Fast

[15:12] <hankache> any idea why?

[15:12] <hankache> or what i should do?

[15:17] <moritz> nadim: no idea; what's your goal?

[15:20] <zengargoyle> hankache: have you done a git-pull on rakudobrew itself recently?

[15:20] <masak> nadim: still having trouble with exporting multis?

[15:20] * jnthn waves from a train

[15:23] <moritz> \me waves a train

[15:24] <hankache> zengargoyle i just nuked rakudobrew and cloning it again, maybe that would work

[15:24] * moritz also confuses solidus and reverse solidus

[15:24] <stmuk> ==> Successfully installed JSON::Fast

[15:24] <DrForr> hankache: As an experiment I deleted ~/.rakudobrew, that seems to be working better than my installation was last night.

[15:25] <DrForr> Though Inline::Perl5 still has the same issues.

[15:25] <DrForr> .seen nine

[15:25] <yoleaux> I saw nine 10:08Z in #perl6: <nine> .tell FROGGS I worked around the problem by not referencing the CompUnit::Repository directly in Distribution::Resources. I only store its path-spec which I can use to get the object later on (at runtime instead of compile time)

[15:25] <zengargoyle> i'm starting a rebuild... just think that 'hey, rakudobrew itself needs updating sometimes' isn't particularly well pointed out in the whole use rakudobrew to build thing.

[15:26] <stmuk> Task::Star installs now apart from DBIish and JSON::RPC (latter fixed via PR)

[15:27] <zengargoyle> hankache: yah, make it through the build moar, build panda, without any issue on my machine...

[15:27] <nadim> masak: yes, still the same problem :)

[15:28] <hankache> DrForr zengargoyle i just deleted ~/.rakudobrew and rebuilding. Lets see what happens

[15:31] <stmuk> is there anyway to introspect adverts like ^methods?

[15:31] <stmuk> errr adverbs

[15:32] <zengargoyle> docs probably need a: in dire cases after great changes... $ rakudobrew nuke moar; cd ~/.rakudobrew; git pull; rakudobrew build moar; rakudobrew build panda;

[15:32] <moritz> m: class A:ver<42> { }; say A.^ver

[15:32] <camelia> rakudo-moar 15ea69: OUTPUT«Method 'gist' not found for invocant of class 'NQPMu'␤  in block <unit> at /tmp/4W2KNITxuy:1␤␤»

[15:32] <jnthn> We don't pass on ver and auth to the meat-object yet

[15:32] <zengargoyle> and maybe a: rm -rf ~/.perl6 # for good measure.

[15:33] <moritz> any volunteers for tomorrow's Perl 6 advent?

[15:35] <masak> nadim: I might have misunderstood your problem. I just tried the simplest thing possible, and it worked: https://gist.github.com/masak/3b2e4b16482781431b3b

[15:37] *** mohae joined
[15:37] <zengargoyle> hrm, Task::Star bailed on Installing Grammar::Debugger: Cannot unbox a type object

[15:37] <stmuk> zengargoyle: try again it usually works second time

[15:37] <zengargoyle> worked second time

[15:37] <zengargoyle> :)

[15:37] <stmuk> :)

[15:38] *** khw joined
[15:39] *** cygx joined
[15:39] <zengargoyle> tho ??? not a good thing to randomly fail then work.

[15:40] <zengargoyle> Bailador: Cannot find method 'run_alt'

[15:40] <cygx> moritz: I probably could write something for the calendar, though my more interesting modules are too much in flux for me to be comfortable writing about them

[15:41] *** rurban left
[15:41] <cygx> perhaps something about the as of today still undocument extended open modes

[15:41] <masak> yes, please

[15:41] <cygx> (I'm working on the docs: https://github.com/cygx/doc/commit/d1d5a17f0b2210dd60ab1bd9fee2bbbffa2a735d )

[15:41] <moritz> cygx: that would be awesome

[15:41] *** rurban joined
[15:41] *** rurban left
[15:42] <moritz> cygx: do you already have a login for https://perl6advent.wordpress.com/wp-admin/ ?

[15:43] *** kjs_ joined
[15:48] <dalek> mu: 0fe59dd | moritz++ | misc/perl6advent-2015/schedule:

[15:48] <dalek> mu: Advent 2015: update schedule

[15:48] <dalek> mu: 

[15:48] <dalek> mu: * cygx++ does the 6th (tomorrow)

[15:48] <dalek> mu: * add topic for yesterday

[15:48] <dalek> mu: review: https://github.com/perl6/mu/commit/0fe59dd4c4

[15:48] <masak> thank you.

[15:48] <masak> ...for today, actually :)

[15:48] *** AlexDaniel joined
[15:48] <moritz> erm, yes

[15:48] <moritz> :-)

[15:49] <moritz> masak: in my defense: you wrote it yesterday :-)

[15:50] <masak> ;)

[15:51] <masak> what's an off-by-one between friends, eh? :P

[15:51] <moritz> masak: I could also use your "I'm a (new) parent, time is meaningless to me" defense :-)

[15:51] <moritz> masak: about which I pondered yesterday, fwiw

[15:52] <jnthn> If time is now meaningless, will you always be a new parent, and so always be able to use this defense? :)

[15:52] <moritz> masak: because it's quite a bit of a paradox. You see the child(ren) grow up, and they evolve so fast that it should be good clock to adjust by

[15:52] <masak> jnthn: I... I don't know! O.O

[15:52] <moritz> masak: and yet I have the same feeling of time not meaning so much (on topics not related to children)

[15:53] <masak> moritz: I've always hated the phrase "time goes by so quickly", on purely esthetic grounds.

[15:53] <masak> moritz: but I think what people *mean* is that they didn't notice time pass by. they were distracted by something.

[15:53] <masak> moritz: and that definitely happens when you become a parent.

[15:53] <moritz> masak: I guess it's related to $work + @children consuming so much time, that there is little time for other stuff

[15:54] <moritz> and thus things happening on the outside in this "other stuff" section seem to be quite fast

[15:54] <moritz> aye

[15:54] <masak> right

[15:54] <masak> seems we're vibrating on the same frequency on this one

[16:00] * cygx is back

[16:00] <cygx> moritz: no, not yet

[16:03] <cygx> moritz: do I need to setup a wordpress account first?

[16:03] *** xpen left
[16:05] <moritz> cygx: it's enough if /msg me your email address, I believe

[16:05] <moritz> cygx: maybe that'll prompt you to set up a wordress account or so, dunno

[16:05] <AlexDaniel> OK, so even though DBIish is now installable with --notests and --force, still it does not work. This error: https://travis-ci.org/perl6/DBIish#L962 .

[16:06] <stmuk> does panda not handle https://github.com type urls?

[16:06] <AlexDaniel> So it seems like the rumours that you can skip tests on this one are wrong

[16:07] <AlexDaniel> any idea what could this find_symbol thing be about?

[16:09] <arnsholt> That's a very internal error

[16:09] <jnthn> Well, find_symbol is the method the compiler internals use to find symbols...dunno if it's the same one

[16:10] * jnthn blogged on what he's been working on: https://6guts.wordpress.com/2015/12/05/getting-closer-to-christmas/

[16:10] <arnsholt> From the stack trace it says it's find_symbol in CORE.setting.moarvm, so looks like it

[16:10] <masak> jnthn++

[16:10] <jnthn> That's an odd plae to do a find__symbol

[16:10] <jnthn> You may not be in the context of the compiler

[16:11] <hankache> jnthn++

[16:11] <stmuk> my $suplier = Supplier.new; needs an extra p on the LHS

[16:12] *** virtualsue left
[16:13] <jnthn> People will figure it out :)

[16:13] * jnthn had enough of the wordpress editor for one day

[16:17] *** atta left
[16:18] <moritz> jnthn: https://rt.perl.org/Ticket/Display.html?id=126816 I can reproduce the find_symbol error with a single require ::('DBDish::mysql'), whereas "use DBDish::mysql;" works fine

[16:19] <nadim> moritz: I am writing a dumper, it uses multis to dump objects. I want to implement clss specific sumpers. the problem is that the  dumper is in a cls (with its own filters), and it is used from another name space; filter (multi sub) that are defined in my script are not visible in the dumper module. I want to make those filter art of the dumper namspace.

[16:20] <cygx> jnthn: I did something about open(:bin) - https://github.com/cygx/rakudo/commit/329003ba5a2d0cde84c595a398308a795e1479d4

[16:20] <moritz> nadim: one option is to use methods, of course

[16:20] <cygx> jnthn: not quite sure if it's agood idea, though ;)

[16:20] <moritz> nadim: the other is to use the CLIENT:: pseudo namespace to look for the multis

[16:21] <jnthn> As long as you encode it using utf8-c8

[16:21] <jnthn> yes, you do

[16:21] <jnthn> It'll do

[16:21] <nadim> moritz: I am using methods of course. people ho want to add the specific method are welcome, and I can do that on  my own classes. But the whole idea is that one can decide at run time that class XX should be dumped in a specific way without having to fiddle with that class.

[16:22] <cygx> jnthn: it's part of https://github.com/rakudo/rakudo/pull/619

[16:22] <nadim> best would be to be able to scope all that of course so that the filters are not part of the dumper after the call to the dumper

[16:23] <nadim> moritz: where can I find documentation, alt examples, for the CLIENT:: pseudo namespace?

[16:23] <moritz> jnthn++ # blog post, xmas fixes

[16:24] *** atta joined
[16:25] <AlexDaniel> jnthn: “GitHub doesn't let us configure per-branch permissions, so we can't prevent pushes to master that way.” – are you sure? I thought that it was a new shiny feature

[16:27] <jnthn> Maybe it is, but I couldn't find anything about it

[16:27] <jnthn> I don't really feel a need to do it anyway though

[16:32] <AlexDaniel> jnthn: hm, indeed. I can only find this: https://help.github.com/articles/configuring-protected-branches/

[16:32] <cygx> afk for a bit, then I'll get started on that advent posting thing

[16:32] <AlexDaniel> and this: https://github.com/blog/2051-protected-branches-and-required-status-checks

[16:36] <AlexDaniel> ah

[16:36] <AlexDaniel> there is a comment about it, whoops

[16:41] <nadim> Anyone else knows about CLIENT:: and can point me somewhere?

[16:42] *** khisanth_ joined
[16:44] *** Khisanth left
[16:44] *** Fleurety joined
[16:46] <JimmyZ> jnthn: $supply.emit('oh$supply.emit('hai # I can't understatnd it ...

[16:46] *** dolmen joined
[16:47] <jnthn> wtf

[16:47] <flussence> looks fine to me...

[16:47] <dolmen> The DateTime API for Perl 6 is definitely *NOT READY* for a 1.0 release: its handling of timezone is just naive

[16:48] <dalek> rakudo/nom: 494e456 | jnthn++ | src/core/Channel.pm:

[16:48] <dalek> rakudo/nom: Give Channel its own Supply impelmentation.

[16:48] <dalek> rakudo/nom: 

[16:48] <dalek> rakudo/nom: Which does not block. We can optimize this some, but for now get it

[16:48] <dalek> rakudo/nom: to work. This means you can use react/supply blocks and whenever more

[16:48] <dalek> rakudo/nom: than one Channel to multiplex them without the busy-waiting that can

[16:48] <dalek> rakudo/nom: happen with earliest in such situations.

[16:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/494e456c16

[16:48] <dolmen> https://doc.perl6.org/type/DateTime#method_timezone

[16:48] <jnthn> Looks fine to me too...

[16:48] <dolmen> A TimeZone class is missing in the API

[16:49] *** webstrand joined
[16:49] <jnthn> We're not going to do timezones in the cor language

[16:49] <jnthn> And should not.

[16:49] <flussence> dolmen: is your specific complaint that we have full ISO8601 support in the core, or that DateTime::Timezone isn't? :)

[16:49] <jnthn> They change too fast.

[16:49] <JimmyZ> jnthn: both windows and ubuntu  the same to me :(

[16:49] <jnthn> You should be able to upgrade it at a different rate than your Perl

[16:50] <JimmyZ> firefox

[16:50] <JimmyZ> and ie ...

[16:52] <dolmen> jnthn: Having only UTC and Local timezones in the core language would be ok for me. My point is that I don't see a provision for extension for support of the whole IANA timezone

[16:52] *** bzipitidoo left
[16:53] *** domidumont joined
[16:57] <dolmen> jnthn: in Perl 5, ZEFRAM has made modules that can load timezones from the database managed by the operating system. This is the approach that workaround the main issue with timezone: keeping the database up to date. https://metacpan.org/pod/DateTime::TimeZone::Tzfile

[16:57] <flussence> so, the same as what we're already doing? https://github.com/supernovus/perl6-timezone

[16:58] <pippo> m: my $supplier = Supplier.new; my $supply = $supplier.Supply; $supply.tap({ .say }); $supply.emit('oh');

[16:58] <camelia> rakudo-moar 15ea69: OUTPUT«Method 'emit' not found for invocant of class 'Supply'␤  in block <unit> at /tmp/62pGCAoMva:1␤␤»

[16:59] <hankache> deleted ~/.rakudobrew and ~/.perl6 and started fresh. While building panda it still gets stuck at ==> Testing JSON::Fast

[17:00] <jnthn> oh those second two should be supplier

[17:00] <jnthn> *sigh*

[17:00] <hankache> any ideas what i should do?

[17:00] <pippo> jnthn: :-)

[17:00] <jnthn> Fixed it

[17:01] <jnthn> Did the typo too

[17:01] <lucasb> hankache: there is a single test in JSON::Fast that is hanging. You can comment the line and it'll install fine

[17:01] <gfldex> El_Che: IIRC you asked for strictness of named parameters for new. This is how it's done: https://gist.github.com/gfldex/c6c81d00a06d19e95651

[17:02] <webstrand> I've been trying to package rakudo-star for Archlinux,  but from what I can tell, it's Configure.pl uses the destination prefix both as a writable destination to place binaries and to lookup those same binaries to use. If I choose the prefix to be some writable directory (not /usr) and then move the files into /usr, the binaries still attempt to search for libraries in the original prefix. I've only a limited knowledge of perl6, am I missing 

[17:02] <webstrand> something that would fix this issue?

[17:02] <dolmen> flussence: no, lib/DateTime/TimeZone/Zone/*.pm are generated from the IANA db. Which implies you have to upgrade the module every time the IANA db is updated, while your operating system also updates it. Two copies of the IANA db.

[17:03] <hankache> lucasb where should i find my local copy of the test file?

[17:03] <ugexe> 3rd copy of iana db is a charm

[17:03] <flussence> webstrand: try --sysroot

[17:03] <lucasb> panda/ext/JSON__Fast/t/01-parse.t: line 153: # '{ "a : false }', # missing quote

[17:04] <lucasb> hankache: ^^ comment that line

[17:04] <dalek> rakudo/precomp-singleprocess: 299adc5 | arnsholt++ | src/core/CompUnit (2 files):

[17:04] <dalek> rakudo/precomp-singleprocess: No need to use binding; use assignment instead.

[17:04] <dalek> rakudo/precomp-singleprocess: 

[17:04] <dalek> rakudo/precomp-singleprocess: This fixes the circular loading error of the previous commit version, but

[17:04] <dalek> rakudo/precomp-singleprocess: uncovers a new error.

[17:04] <dalek> rakudo/precomp-singleprocess: review: https://github.com/rakudo/rakudo/commit/299adc5fb2

[17:04] <dalek> rakudo/precomp-singleprocess: 5252cd8 | arnsholt++ | src/core/CompUnit/PrecompilationRepository.pm:

[17:04] <dalek> rakudo/precomp-singleprocess: Use spurt instead, to ensure the .deps file exists.

[17:04] <dalek> rakudo/precomp-singleprocess: 

[17:04] <dalek> rakudo/precomp-singleprocess: The previous variant didn't close properly, so use spurt() instead.

[17:04] <dalek> rakudo/precomp-singleprocess: review: https://github.com/rakudo/rakudo/commit/5252cd8198

[17:05] <webstrand> flussence: Thanks. no idea how I missed that.

[17:06] <flussence> webstrand: I did all that blind stumbling around while writing an ebuild the other day, so you don't have to! :D

[17:06] <webstrand> flussence: I searched for an up-to-date ebuild to cannibalize, where can I find yours?

[17:07] <flussence> it's not ready for real world use yet, things compile but they explode at runtime

[17:08] <flussence> (afaik, all of the official ebuilds have similar problems)

[17:09] <ugexe> if a module gets installed, but that module loads/depends on a module that is not installed (but available via -I../OtherModule/lib) will the .precomp of the installed module be tied to the uninstalled OtherModule?

[17:10] *** CIAvash left
[17:11] <cognominal> thx FROGGS for you answer about HLL::Parser

[17:11] <Skarsnik> hm http::ua seem to not work with the new rakudo

[17:11] <colomon> ==> Installing Path::Iterator

[17:11] <colomon> X::IO::Copy.new(from => "/home/colomon/emmentaler/.panda-work/1449335442_1/lib/Path/Iterator.pm6", to => q|/home/colomon/.rakudobrew/moar-nom/install/share/perl6/site/sources/9AB877291EBF0EEC80ABC4B1A9605CBC0EF63801|.IO(:SPEC(IO::Spec::Unix)), os-error => "Failed to copy file: no such file or directory")

[17:11] <Skarsnik> t/070-ua-simple.t .......... ===SORRY!===

[17:11] <Skarsnik> Cannot find method 'run_alt'

[17:12] *** dolmen left
[17:13] <arnsholt> So those commits there should give us precompilation in a single process

[17:13] <arnsholt> Not tested beyond installing the core dist, though

[17:13] <hankache> lucasb thanks for the hint. panda built successfully. shouldn't we fix the test file?

[17:13] <ugexe> youve saved countless man hours on r-j win32 im imagine

[17:15] <ugexe> may even make smoke testing on r-j rpi bearable again

[17:16] <lucasb> hankache: cool :) I think timotimo++ will fix his module later

[17:16] <hankache> lucasb thanks again :)

[17:16] <flussence> ...r-j on a pi‽ I barely have the patience for it on a desktop!

[17:17] <ugexe> if you're lucky... getting it to install without running out of memory is seemingly random

[17:18] *** Begi left
[17:18] *** khisanth_ is now known as Khisanth

[17:19] *** km3 left
[17:24] *** znpy left
[17:29] <AlexDaniel> jnthn: what kinda makes me sad is that it looks like qx// thing is going into the release as is. And it's ok if some helper subs will be added later (“shellout” and friends, once appropriate names are found), but the idea is that qx// should probably use ｢run｣ underneath (well, as suggested by Larry), which definitely is not going to be backward compatible… Sooo, some amount of pain is expected aftewards

[17:31] <AlexDaniel> speaking of which, by the way, I've looked into the panda sources and found things like this one everywhere: https://github.com/tadzik/panda/blob/master/lib/Panda/Fetcher.pm#L46

[17:31] *** kjs_ left
[17:31] <AlexDaniel> I'm not going to raise remote code execution flag, since panda runs a lot of stuff anyway… but it might be worth fixing

[17:38] *** rurban joined
[17:40] *** new joined
[17:46] <jnthn> AlexDaniel: afaik, Larry still is going to decide on that

[17:49] <hankache> Perl 6 for the web. What do you recommend Bailador or Web::App ?

[17:50] *** ZoffixW joined
[17:51] <AlexDaniel> hankache: well, I'm using Bailador and it works

[17:52] <ZoffixW> Bailador was broken for me ~1-2 days ago (it was looking for psgi.input, but it was actually p6sgi.input)

[17:52] *** thejawn joined
[17:52] <Skarsnik> AlexDaniel, can you make a small tutorial or something about it? I am confused on how that work x)

[17:52] <ZoffixW> Anyone wanna help me debug my grammar? https://gist.github.com/zoffixznet/4cff770d3b81980c236f As you can see from the trace output, the string seems to match completely, but the TOP fails for some reason. Any ideas?

[17:53] <AlexDaniel> Skarsnik: take a look at examples: https://github.com/tadzik/Bailador/tree/master/examples

[17:53] <ZoffixW> jnthn++ Grammar::Debugger is awesome

[17:54] <skids> ZoffixW: you sure \r\n is working like you think?

[17:54] *** RabidGravy joined
[17:54] <ZoffixW> skids, no idea. How can I test that?

[17:54] <darutoko> is there an editors list that support syntax highlight?

[17:54] <Skarsnik> AlexDaniel, yes but how you setup thix?

[17:54] <ZoffixW> aha

[17:54] <Skarsnik> darutoko, vim/atom

[17:55] <ZoffixW> skids, if I remove \r\n from both the regex and the string, then match is successfull :/

[17:55] <AlexDaniel> darutoko: emacs with perl6-mode works too

[17:55] <Skarsnik> kate has a kind of working p6 syntax mode, but it's pretty imcomplete

[17:55] <skids> ZoffixW: Yeah so \n matches the system newline now I think.

[17:55] *** robnox joined
[17:55] <darutoko> Skarsnik, AlexDaniel, I gues its NO :)

[17:56] <skids> ZoffixW: use \x0a if you mean that.

[17:56] <Skarsnik> Ah you mean a list

[17:56] <AlexDaniel> Skarsnik: well, just run any of these examples

[17:56] <Skarsnik> I don't know if the doc has a list somewhere

[17:56] <AlexDaniel> Skarsnik: it will start and the link will be printed to stdout. Just open it and you will see something

[17:57] <Skarsnik> hm, you set nothing with your http server?

[17:57] <AlexDaniel> yes

[17:57] *** new left
[17:57] <jdv79> i think i have internet again

[17:57] <ZoffixW> skids++ thanks. Chaning \r\n in the regex to just plain \n seems to have done the trick.

[17:58] <AlexDaniel> Skarsnik: getting this thing to work on a real server is going to be a bit more complicated… as any other stuff is, like ruby on rails… pain!

[17:58] <ZoffixW> Skarsnik, you could reverse proxy, if you wanted to

[17:58] <Skarsnik> jdv79, I fixed these damn cookie (I think)

[17:58] <jdv79> nice

[17:58] <jdv79> so anyone want to point me in the right direction of building a cpan installer?

[17:59] * ZoffixW likes P5's App::cpanminus

[17:59] <Skarsnik> AlexDaniel, well that the intersting part x)

[17:59] <jdv79> i guess i'll just can panda til i can't take it anymore

[17:59] <jdv79> s/can/hack/

[17:59] <Skarsnik> Does zef still work?

[18:00] <jdv79> ugexe: what say yee on the topic of cpan and zef?

[18:00] <jdv79> iirc there was a refactor or something affot

[18:00] <jdv79> *afoo

[18:00] <jdv79> t

[18:01] <robnox> I tried ruby on rails once, I really didn't like it -- I don't see what all the hype is about

[18:01] <ZoffixW> Is it still hyped up though?

[18:02] <ZoffixW> I thought phoenix/elixir is where the cool kids are at

[18:02] <robnox> yeah, was looking for local contract work earlier and at least half the jobs wanted ruby on rails.. lol

[18:02] *** ZoffixW left
[18:03] <Skarsnik> I choose to stay on october rakudo/panda for now x)

[18:03] <jdv79> i'm building latest now

[18:04] <darutoko> Skarsnik, do I need to get some thing for atom or it can from the box?

[18:04] <Skarsnik> https://perl6advent.wordpress.com/2015/12/03/day-3-atom-editor-support/

[18:04] <jdv79> 56s parse stage - not bad

[18:04] <ugexe> jdv79: it will be possible in a couple of days. i'm working on abstracting the behavior between having the entire package list vs querying something like metacpan for an identity

[18:04] <jdv79> this is fantastic

[18:05] <darutoko> Skarsnik, thank you

[18:05] <jdv79> oh right you have a service thingee

[18:05] <jdv79> well, we have somewhat lame indices at cpan now

[18:05] <jdv79> that metacpan6 is trying to use

[18:05] <jdv79> didn't quite finish that part yet

[18:06] <ugexe> i tried looking at the examples from your blog, but i think i was confused at what was showing up at the time

[18:07] <AlexDaniel> robnox: what I still don't understand is how to make it work on a real server *correctly*. Everyone suggests Phusion Passenger but I refuse to use crippled down software. So right now using reverse proxy thing, but it does not sound like the best solution…

[18:07] <jnthn> .tell lizmat Think the ::= patch has some spectest fallout to fix

[18:07] <yoleaux> jnthn: I'll pass your message to lizmat.

[18:07] <jdv79> ugexe: what exactly?

[18:08] <jdv79> there are no real examples

[18:08] <jdv79> i think

[18:08] <ugexe> it was json of like 20 items

[18:08] <ugexe> none of which i recognized

[18:09] <lizmat> computer, messages

[18:09] <yoleaux> 18:07Z <jnthn> lizmat: Think the ::= patch has some spectest fallout to fix

[18:09] <jdv79> huh.  i just looked and don't see anyting liek that

[18:09] <lizmat> jnthn: yes, it does, they're basically all faulty tests

[18:10] <lizmat> that were actually passing for the wrong reason

[18:10] <jdv79> since there's maybe 2 valid dists on cpan it makes sense though:)

[18:10] <robnox> AlexDaniel: best solution is to uninstall ruby and load up perl ;)

[18:10] <lizmat> m: my $a ::= 42; $a++   # fails because of MMD failure of finding a candidate that dpesn't have "is rw"

[18:10] <camelia> rakudo-moar 494e45: OUTPUT«5===SORRY!5=== Error while compiling /tmp/szpk4i9ZM8␤"::=" not yet implemented. Sorry. ␤at /tmp/szpk4i9ZM8:1␤------> 3my $a ::= 427⏏5; $a++   # fails because of MMD failure ␤»

[18:10] <lizmat> *failed

[18:10] <jdv79> ugexe: http://www.cpan.org/authors/p6*

[18:11] <lizmat> jnthn: but are you otherwise ok with the patch ?

[18:11] <ugexe> jdv79: i dont remember exactly but it looks like im recalling the 2 links to hack.p6c.org:500\d

[18:11] <jdv79> tomorrow i plan to dig into panda and rakduo though for the first time

[18:11] *** rurban left
[18:11] <jdv79> i think hack rebooted since then and they aren't setup again yet

[18:11] <ugexe> do you have an example of how to make a query or possibly get all perl6 package listings?

[18:12] <jdv79> that's just a metacpan instance over faux-dists generated from the ecosystem

[18:12] <Skarsnik> Zoffix, did you reach http::ua yet in your quest to install everything?

[18:12] *** rurban joined
[18:12] <jnthn> lizmat: I think so

[18:12] <jdv79> yeah, there are 2 ok indices on cpan.  p6dists and p6provides but they probably need help

[18:13] <ugexe> so i take it there will be a perl6 flag or something?

[18:13] <jdv79> the metapcan instance will be lying right now cause its faked out for prototyping

[18:13] <jdv79> not tracking cpan

[18:13] <jdv79> metacpan6 will be a seperate instance from metacpan

[18:14] <jnthn> lizmat: I'm just spectesting some patches that fix our ability to use whenever properly with channels and eliminating the last uses of earliest in core setting.

[18:14] <jdv79> and at cpan its just that dir structure

[18:14] <lizmat> jnthn++  :-)

[18:14] <ugexe> a question: if i fetch metadata from metacpan but its source-url points to github, which is the correct default selection to download from?

[18:14] * jnthn wonders whether we want a few days deprecation grace or just to rip it out :)

[18:14] <jdv79> source-url is not to spec

[18:15] <jdv79> i tjhink its support.source im META6.json

[18:15] <lizmat> jnthn: at this stage, I would say: rip it out

[18:15] <jdv79> source-url is a panda/META.info/eco sthing

[18:15] <jdv79> *thing

[18:16] <ugexe> its documented there is a source-type and source-url im pretty sure

[18:16] <skids> jnthn: oh that reminds me, do you want an RT for .head not filing its done, or will that just likely fall by the wayside in other fixes?

[18:16] <jdv79> plus you won't download using that.  you download the dist file.

[18:16] <jnthn> skids: Please RT

[18:16] <jnthn> It's a separate issue to anything I've been doing now

[18:16] <jdv79> http://design.perl6.org/S22.html#support

[18:17] <Skarsnik> m: sprintf("%s");

[18:17] <camelia> rakudo-moar 494e45: OUTPUT«Directives specify 1 argument, but no argument was supplied␤␤»

[18:17] <Skarsnik> Should I make a tiket for this?

[18:17] <dalek> rakudo/nom: 3865bdd | jnthn++ | src/core/Channel.pm:

[18:17] <dalek> rakudo/nom: Fix a race in Channel.Supply; update .list.

[18:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3865bdd942

[18:17] <dalek> rakudo/nom: b45ef16 | jnthn++ | src/core/Supply.pm:

[18:17] <dalek> rakudo/nom: Re-implement Supply.list without Channel.

[18:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b45ef16f12

[18:17] <dalek> rakudo/nom: 87fed0e | jnthn++ | src/core/Promise.pm:

[18:17] <dalek> rakudo/nom: Promise.Supply is an on-demand Supply.

[18:17] <dalek> rakudo/nom: 

[18:17] <dalek> rakudo/nom: Otherwise it will be racey.

[18:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87fed0e421

[18:18] <Skarsnik> m: sprintf("%s%");

[18:18] <camelia> rakudo-moar 494e45: OUTPUT«'s%' is not valid in sprintf format sequence '%s%'␤␤»

[18:19] <ugexe> jdv79: ah, indeed you are correct. i was imagining ecosystem/spec.pod was a rakudo doc (which is where source-type and source-url are mentioned)

[18:19] <lizmat> jnthn: I'm pretty sure the ripping out will be mentioned in the P6W  :-)

[18:19] <dalek> roast: 5eb2477 | lizmat++ | S0 (3 files):

[18:19] <dalek> roast: Fix fallout of making ::=  NYI

[18:19] <dalek> roast: review: https://github.com/perl6/roast/commit/5eb247773b

[18:20] <jdv79> looks like metacpan kicks back a download_url field that cpanm uses

[18:20] <jdv79> i imagine that's what you may be after in te end

[18:20] <jdv79> not ready yet:)

[18:20] <jdv79> soon

[18:20] <ugexe> im actually glad... it was a pain to implement sane defaults when i considered it spec

[18:22] <dalek> roast: 0b9c6c6 | jnthn++ | S17-supply/syntax.t:

[18:22] <dalek> roast: Test using whenever with channels.

[18:22] <dalek> roast: review: https://github.com/perl6/roast/commit/0b9c6c6ee4

[18:24] <Skarsnik> thx jdv79 for merging x)

[18:25] <ugexe> you mean RabidGravy ... ?

[18:26] <RabidGravy> I just merged something in HTTP::UserAgent from you :)

[18:26] <Skarsnik> Oh sorry for the mistake x)

[18:27] <RabidGravy> but Skarsnik++ # had been meaning to put the debug in myself

[18:27] <Skarsnik> I forget to document the debug thing ~~

[18:27] <RabidGravy> oh well

[18:27] <dalek> roast: 0003213 | jnthn++ | S17-supply/syntax.t:

[18:27] <dalek> roast: Test multiple whenevers on channels too.

[18:27] <dalek> roast: 

[18:27] <dalek> roast: Since that is what we advise for multiplexing channels now, instead of

[18:27] <dalek> roast: earliest.

[18:27] <dalek> roast: review: https://github.com/perl6/roast/commit/00032138bf

[18:28] <jdv79> sweet

[18:29] *** ZoffixW joined
[18:29] <jdv79> Skarsnik: you fixed h:ua to do a loging?

[18:30] <jdv79> i've been meaning to do that since ovid squawked about it

[18:30] <ZoffixW> Writing character classes like this is not correct, is it? My regex seems to be matching against literal "n"  <-[\ \a\0\r\n,]> 

[18:30] <ZoffixW> Or rather, my grammar (my token)

[18:30] <Skarsnik> Not really, it display on stdout what is send/recv, if you do UA.new(:debug)

[18:31] <Skarsnik> could probably be on stderr, I don't know

[18:31] <jdv79> m: say so /<[\n]>/ for "n", "\n"

[18:31] <camelia> rakudo-moar 494e45: OUTPUT«Resource temporarily unavailable»

[18:31] <jdv79> huh?

[18:31] <jdv79> WUT

[18:31] <jdv79> that worked fine locally

[18:32] <jdv79> is camelia ill?

[18:32] *** adhoc left
[18:32] <ZoffixW> m: say so /<[\n]>/ for "n", "\n"

[18:32] <camelia> rakudo-moar 87fed0: OUTPUT«False␤True␤»

[18:32] <ZoffixW> weird

[18:32] <jdv79> meh

[18:32] <[Tux]> rakudobrew:

[18:32] <lizmat> jnthn: any reason why Supply.list doesn't use an Iterator ?

[18:32] <jnthn> Well, did say temporarily :)

[18:32] <[Tux]> Permission denied (publickey).

[18:32] <[Tux]> fatal: Could not read from remote repository.

[18:33] <jnthn> lizmat: Harder to implement correctly

[18:33] <lizmat> jnthn: also, is it correct that each queue gets its own ConcQueue ?

[18:34] <ZoffixW> m: https://gist.github.com/zoffixznet/9f64995f16faa6fc7925

[18:34] <camelia> rakudo-moar 87fed0: OUTPUT«False␤»

[18:34] <jnthn> lizmat: And it's an unlikely thing to be on a hot path...

[18:34] <ZoffixW> ^^ how come that code says "True" if I uncomment Grammar::Tracer?

[18:34] <jnthn> sync/async transitions are by definition bad for performance; the gather/take is the least of the worries :)

[18:34] <jnthn> lizmat: "gets its own"?

[18:35] <lizmat> each gather does a ConcQueue.CREATE ?

[18:35] *** corbyhaas left
[18:35] * jnthn doesn't quite get what's being asked

[18:35] <lizmat> aaahhhh

[18:35] <lizmat> I read it wrong

[18:35] <lizmat> the type is used as the sentinel

[18:35] <jnthn> Yes, it's correct

[18:35] <jnthn> Ah, ok :)

[18:35] <jnthn> (Correct because we tap the Supply each time, so it needs its own queue instance too)

[18:35] <[Tux]> note to self: do not run two make again commands on the same folder simultaneous

[18:37] <lizmat> jnthn: what if the Supply is live and queue gets empty before the supply is done?

[18:37] <lizmat> jnthn: shouldn't it block on an empty queue ?

[18:38] *** corbyhaas joined
[18:39] <jnthn> lizmat: It does block on an empty queue

[18:39] <jnthn> nqp::shift on the queue blocks

[18:39] <lizmat> ah, so that is hidden in the repr(ConcBlockingQueue)  

[18:40] <jnthn> omg I'm in Norway

[18:40] <jnthn> :)

[18:40] <lizmat> is it Tuesday ?

[18:40] <bartolin_> fwiw, I created ticket RT #126823 for the failing tests in S32-array/adverbs.t and S32-hash/adverbs.t (and I'm going to fudge both tests)

[18:40] <jnthn> lizmat: Yes

[18:40] *** hankache left
[18:41] *** herby_ joined
[18:41] <herby_> Hello, everyone!

[18:41] <[Tux]> o/

[18:41] <lizmat> herby_ o/

[18:42] <FROGGS> good evening

[18:43] *** rurban left
[18:43] <dalek> rakudo/nom: 733529c | jnthn++ | t/spectest.data:

[18:43] <dalek> rakudo/nom: Don't run earliest.t; it's going away.

[18:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/733529c2f4

[18:44] <ZoffixW> Here's a shorter version. If I comment out "use Grammar::Debugger", the match fails... and I've no idea why :/

[18:44] <ZoffixW> https://gist.github.com/zoffixznet/629e13e0214cc6e3e2e2

[18:45] <lizmat> FROGGS o/

[18:45] <dalek> roast: eddca86 | jnthn++ | S17-channel/earliest.t:

[18:45] <dalek> roast: Remove earliest.t; this feature is going away.

[18:45] <dalek> roast: review: https://github.com/perl6/roast/commit/eddca86f9c

[18:46] <herby_> Trying to learn a little Perl 6 and embrace the holiday cheer at the same time with Advent of Code :)

[18:46] <herby_> http://adventofcode.com/day/5

[18:46] *** hankache joined
[18:46] *** lsm-desktop left
[18:46] <herby_> Trying to stumble my way through that problem, which is in Regex land

[18:47] <FROGGS> lizmat / nine: btw, I want to extend the CU repositories by a bin-dir attribute, so you can create a CUR with a bin-dir other than <prefix>/bin

[18:48] <lizmat> FROGGS: and that would be shared by all versions of a distro ?

[18:48] <FROGGS> lizmat: what do you mean by 'distro' here?

[18:48] <[Tux]> test             50000    23.534    23.417

[18:48] <[Tux]> test-t           50000    16.555    16.438

[18:48] <[Tux]> csv-parser       50000    26.023    25.906

[18:48] <lizmat> [Tux]++

[18:49] <[Tux]> posting now as I note that the diff between test and test-t increases

[18:49] <[Tux]> and because 16.555 is a really good figure

[18:50] <lizmat> FROGGS: never mind, I guess I must put on my thinking cap before saying anytihng

[18:50] * [Tux] hands lizmat a bivakmuts

[18:50] <lizmat> distro is not applicable in this case anyway, right ?

[18:50] <RabidGravy> it's saturday why think more than necessary

[18:51] <lizmat> .oO( I think I get that :-)

[18:51] <FROGGS> lizmat: I just know that I need *one* bin dir for star, and that the repo where the star dists are installed in a unfortunate bin directory (i.e. not install/bin)

[18:51] <FROGGS> is a*

[18:52] <lizmat> FROGGS: no objections from me  :-)

[18:52] <FROGGS> k :o)

[18:55] <[Tux]> lizmat, care to have a second pair of eyes at  https://gist.github.com/Tux/afec03490da258d48671  to see where I go wrong in extending hoelzro's IO::String with «IO::String.new ("foo");» ?

[18:55] <ZoffixW> (╯°□°）╯︵ ┻━┻

[18:55] <ZoffixW> I give up.

[18:56] <lizmat> Tux: isn't nl-in an IO::Handle attribute?

[18:57] <lizmat> [Tux]: also, method print-nl is referencing .nl, not .nl-in

[18:57] <dalek> roast: 9828048 | jnthn++ | integration/advent2013-day14.t:

[18:57] <dalek> roast: Re-work test to use react/whenever, not earliest.

[18:57] <dalek> roast: review: https://github.com/perl6/roast/commit/9828048214

[19:00] <lizmat> jnthn: re ::= , couldn't we implement this for now by codegenning the LHS of ::= with a Proxy ?

[19:01] <dalek> rakudo/nom: 539b5f4 | jnthn++ | src/ (3 files):

[19:01] <dalek> rakudo/nom: Remvoe earliest syntax.

[19:01] <dalek> rakudo/nom: 

[19:01] <dalek> rakudo/nom: The react/whenever syntax should be used instead; it now works well on

[19:01] <dalek> rakudo/nom: channels, and doesn't have the busy waiting problem when multiplexing

[19:01] <dalek> rakudo/nom: two channels.

[19:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/539b5f44ef

[19:01] <jnthn> lizmat: I don't think so; I think it's meant to mean "binding a la signatures"

[19:01] <jnthn> Rather than simply "readonly"

[19:02] <lizmat> yeah, but if we bind it *and* put the result of that in a Proxy ?

[19:02] <lizmat> m: my $a = 42; my $b := proxy-ro($a); sub proxy-ro(\x) { Proxy.new( FETCH => { x }, STORE => -> $a, $b { die() }) }; $b = 42

[19:02] <camelia> rakudo-moar 733529: OUTPUT«Died␤  in block <unit> at /tmp/v6jylhqU9l:1␤␤»

[19:02] <lizmat> m: my $a = 42; my $b := proxy-ro($a); sub proxy-ro(\x) { Proxy.new( FETCH => { x }, STORE => -> $a, $b { die() }) }; $a = 666; say $b

[19:02] <camelia> rakudo-moar 733529: OUTPUT«666␤»

[19:03] <jnthn> But tht isn't really the semantics we want

[19:04] <lizmat> ok, then we leave it for post 6.c

[19:04] <jnthn> my @a ::= ...something that gives a Seq... # should do what a signature bind does also, and .cache it

[19:04] <lizmat> ah, of course, ::= is not just working on scalars

[19:04] <lizmat> duh

[19:04] <lizmat> ok

[19:04] *** ChoHag left
[19:05] *** ChoHag joined
[19:07] * jnthn hopes the earliest => react thing won't be too bad on the ecosystem

[19:09] <herby_> regex question... how would I check if a string had any letter appearing twice in a row?

[19:10] <herby_> jaala would be true cause "aa"

[19:10] <ZoffixW> m: say so "azfdfsd" ~~ /(.)$0/

[19:10] <camelia> rakudo-moar 733529: OUTPUT«False␤»

[19:10] <ZoffixW> m: say so "aazfdfsd" ~~ /(.)$0/

[19:10] <camelia> rakudo-moar 733529: OUTPUT«True␤»

[19:10] * ugexe wonders if there is a way around precompile happening twice when first testing Module A followed by installing Module A

[19:10] <herby_> hmmm

[19:11] <herby_> zoffix, so that is say capture any letter, then see if that capture follows that letter?

[19:11] <herby_> regex gives me a headache :)

[19:11] <ZoffixW> herby_, yeah

[19:11] <herby_> great, thanks!

[19:11] <jnthn> ugexe: I suspect not since we test in the filesystem, but install to an installation

[19:14] <herby_> m: say so "xxxaxxxexxxi" ~~ / <[aeiou]> ** 3 /

[19:14] <camelia> rakudo-moar 539b5f: OUTPUT«False␤»

[19:14] <dalek> rakudo/precomp-singleprocess: eb3f580 | arnsholt++ | src/core/CompUnit/PrecompilationRepository.pm:

[19:14] <dalek> rakudo/precomp-singleprocess: HLL::Compiler.evalfiles is more appropriate than command_eval.

[19:14] <dalek> rakudo/precomp-singleprocess: 

[19:14] <dalek> rakudo/precomp-singleprocess: The latter does exception handling and calls exit(1) if an exception is

[19:14] <dalek> rakudo/precomp-singleprocess: caught. Using evalfiles lets the exception propagate into the module loader,

[19:14] <dalek> rakudo/precomp-singleprocess: which lets us handle exceptions during precomp.

[19:14] <dalek> rakudo/precomp-singleprocess: 

[19:14] <dalek> rakudo/precomp-singleprocess: Currently it'll just propagate into the same error handler a level up, but

[19:14] <dalek> rakudo/precomp-singleprocess: this avoids weird exception behaviour in the future, should we want to handle

[19:14] <herby_> hmmm

[19:14] <dalek> rakudo/precomp-singleprocess: some exceptions.

[19:14] <dalek> rakudo/precomp-singleprocess: review: https://github.com/rakudo/rakudo/commit/eb3f58029b

[19:14] <herby_> m: say so "xxxaxxxexxxi" ~~ / <[aeiou]>  /

[19:14] <camelia> rakudo-moar 539b5f: OUTPUT«True␤»

[19:14] <herby_> m: say so "xxxaxxxexxxi" ~~ / <[aeiou]> + /

[19:14] <camelia> rakudo-moar 539b5f: OUTPUT«True␤»

[19:15] <jnthn> ** 3 implies "3 in a row"

[19:15] <herby_> hmmm. how would i check for a total of 3 vowels?

[19:16] <herby_> or, at least 3

[19:16] <lizmat> jnthn: getting a SIGABRT on syntax.t now

[19:16] <lizmat> ok 50 - react/whenever with supply that immediately emits values works

[19:16] <lizmat> Abort trap: 6

[19:16] <ZoffixW> m: say so "xxxaxxxexxxi" ~~ / [<[aeiou]>.*?]**3  /

[19:16] <camelia> rakudo-moar 539b5f: OUTPUT«True␤»

[19:16] <ZoffixW> m: say so "xxxaxxxexxx" ~~ / [<[aeiou]>.*?]**3  /

[19:16] <camelia> rakudo-moar 539b5f: OUTPUT«False␤»

[19:16] <jnthn> m: say so ("xxxaxxxexxxi" ~~ m:g/ <[aeiou]> /).elems >= 3

[19:16] <camelia> rakudo-moar 539b5f: OUTPUT«True␤»

[19:16] <herby_> you smart people blow my mind :)

[19:16] <jnthn> lizmat: OSX-specific bug then.

[19:17] <lizmat> afraid so

[19:18] <jnthn> If nobody else gets to it in the next days, I'll ask for a shell account :)

[19:19] <lizmat> ok...

[19:19] <jnthn> (Will be doing the years last bits of teaching/travel)

[19:21] <ZoffixW> m: grammar Foo { token TOP { <foo> }; token foo { .+ } }; class Actions { method TOP ($/) { $/.make: foo => $<foo>}}; say Foo.parse('foobar', :actions(Actions))

[19:21] <camelia> rakudo-moar 539b5f: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in method TOP at /tmp/MWQBlthA0a:1␤  in regex TOP at /tmp/MWQBlthA0a:1␤  in block <unit> at /tmp/MWQBlthA0a:1␤␤»

[19:21] <ZoffixW> Why is it telling me this?

[19:21] <jnthn> foo => is a named arg

[19:21] *** skids left
[19:21] <ZoffixW> m: grammar Foo { token TOP { <foo> }; token foo { .+ } }; class Actions { method TOP ($/) { $/.make: {foo => 'bar'}}}; say Foo.parse('foobar', :actions(Actions))

[19:21] <camelia> rakudo-moar 539b5f: OUTPUT«｢foobar｣␤ foo => ｢foobar｣␤»

[19:21] <ZoffixW> jnthn++ thanks

[19:22] <bartolin_> fwiw I also see failures on S17-supply/syntax.t on FreeBSD 10.2: "Abort trap (core dumped)" after 'ok 29 - Multiple whenevers run concurrently'

[19:22] <bartolin_> "This is rakudo version 2015.11-359-g5e49279 built on MoarVM version 2015.11-34-gc3eea17"

[19:22] <ZoffixW> jnthn, is there a way to escape from whenever {} ?

[19:23] <ZoffixW> jnthn, like react { whenever { next if $not_thing; do_this_when_thing; } }

[19:23] <jnthn> ZoffixW: done or last, depending on whether you want to escape from the whenever or the entire react (or supply) block

[19:23] <jnthn> next shoud work to...though maybe NYI

[19:23] <ZoffixW> Ah

[19:23] <ZoffixW> Thanks, jnthn++

[19:24] <jnthn> yeah, NYI...

[19:24] <jnthn> Can fix it soon, but bit tired now and train should be getting to Oslo soon anyways...

[19:24] <bartolin_> (S17-supply/syntax.t) there are aborted tests on linux too: https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.moar-jit_summary.out#L4900

[19:25] <jnthn> Ah

[19:25] <jnthn> So it's really "not Windows" that hsa issues

[19:26] *** quester joined
[19:26] <lizmat> looks like it then

[19:26] <jnthn> Well, that's easier; I'm more familiar with the Linux debugging toolchain than the OSX one :)

[19:26] <lizmat> and then there's hack, right ?

[19:27] <jnthn> Yes, though I suspect I can reproduce it on my own Linux box

[19:27] <RabidGravy> I think we need another 32 modules in the ecosystem before xmas

[19:28] <RabidGravy> 500 would be a nice round number

[19:28] <Skarsnik> I already on one!

[19:28] <jnthn> If we reject the tau PR, that'll be an easy extra one :P

[19:28] <cygx> when are the advent postings supposed to go live?

[19:28] <RabidGravy> I've got one maybe two I should finish

[19:28] <ZoffixW> I'm definitely finishing 1 more

[19:28] <RabidGravy> jnthn++ # lateral thinking

[19:28] <Skarsnik> at midnight for your country time I think?

[19:29] <ZoffixW> Not "your country time". Mine went at like 8pm my time

[19:29] <arnsholt> jnthn: How long are you in Oslo?

[19:29] <ZoffixW> cygx, if you go to "Blogs" and look at your post, it should say "Posting in X time" (if you've scheduled it)

[19:30] <ZoffixW> And I scheduled mine at 00:00

[19:30] <cygx> ZoffixW: Haven't even finished writing it ;)

[19:30] <jnthn> arnsholt: Approx 14 hours :)

[19:30] <cygx> the rambling part is done, the meat is still missing

[19:30] <jnthn> arnsholt: Flying up to Trondheim tomorrow midday or so

[19:31] <ZoffixW> cygx, you can still schedule it :)

[19:32] <jnthn> Not until he's written the meat... :)

[19:32] <herby_> m: say so "xax" ~~ / (.)<-[$0]>$0 /

[19:32] <camelia> rakudo-moar 539b5f: OUTPUT«True␤»

[19:33] <herby_> m: say so "xafx" ~~ / (.)<-[$0]>$0 /

[19:33] <camelia> rakudo-moar 539b5f: OUTPUT«False␤»

[19:33] <arnsholt> jnthn: Oh, right. No need to ask about $beer, in that case =)

[19:33] <jnthn> arnsholt: Yeah, 'fraid not

[19:33] * jnthn woulda said if he was going to be around for a bit

[19:34] <arnsholt> jnthn: Oh, and the OS X debugging toolchain (at least for me when I'm working on OS X) is basically the same as on Linux: printf and gdb

[19:34] <jnthn> :D

[19:34] <arnsholt> Yeah, I figured. But I've been a bit absent lately, so figured I'd check in case I'd missed something

[19:34] <arnsholt> Better safe than sorry, and all that

[19:34] <arnsholt> =)

[19:34] <jnthn> :)

[19:34] <jnthn> Indeed

[19:34] <colomon> lldb instead of gdb on os x these days

[19:34] <colomon> at least for me.

[19:35] <colomon> and lots and lots of printfs.  ;)

[19:35] <robnox> I just started using llvm recently, seems legit

[19:35] <jnthn> I probably want helgrind for this one, tbh :)

[19:35] <ugexe> jnthn: darn, i was hoping something like an external compunit that did FileSystem but staged in ::Installation without updating the sha1 -> path lookup table (and deleting the files if install fails or updating the table if install succeed)

[19:36] <colomon> oh, latest valgrind seems to work well on 10.10.5, it’s a nice improvement over the situation a couple of years ago.

[19:36] *** dbrock left
[19:36] <jnthn> ugexe: Maybe some day, but let's make it work before being clever :)

[19:36] *** domidumont left
[19:36] <herby_> thanks for the help, I'll be back!

[19:36] *** herby_ left
[19:37] <jnthn> colomon: Ah, nice. Last time I wanted it on OSX then the box I had acces to had latest OSX and valgrind wasn't updated for it yet.

[19:38] <jnthn> so I had to use malloc_history and friends :)

[19:40] <colomon> yeah, I did a happy dance when I realized valgrind worked properly on my OS X box again.

[19:40] *** yqt joined
[19:41] *** Begi joined
[19:44] <RabidGravy> phew I put Supplies before Channels in the concurrency document, must have been a magical foresight so I didn't have to explain react twice ;-)

[19:44] <jnthn> :)

[19:45] <ZoffixW> Well... I spent ~3 hours on this IRC parsing grammar and I'm still getting bugs I can't reproduce in a simple test case -_-

[19:45] * ZoffixW lights the whole thing on fire and starts again from scratch

[19:45] <moritz> btw I'm doing the first few tasks of http://adventofcode.com/ in Perl 6 right now

[19:45] <ZoffixW> I may have been over-excited with how easy it is to convert BNF to grammars :P

[19:46] <DrForr> ZoffixW: Yeah, there are some quirks to it.

[19:47] <DrForr> (he says, going back to trying to create a Prolog grammar)

[19:48] <DrForr> There's an ABNF grammar for ANTLR, have you tried converting that? (he says, knowing there's a tool to help)

[19:48] <moritz> (actually I did the first one in shell, just because I could :-))

[19:49] <ZoffixW> :)

[19:50] <ZoffixW> DrForr, not idea what neither ABNF nor ANTLR are, so I think I'll try starting from scratch and including only the RFC components I care about instead of blindly copy-pasting BNF :)

[19:50] <DrForr> ANTLR is effectively the new lex/yacc, if you know what those tools are.

[19:51] * ZoffixW shakes head

[19:51] <ZoffixW> negatory

[19:52] <DrForr> Parser generation tools.

[19:53] <Skarsnik> IRC grammar is not stupidly easy? like :sender cmd ...stuff...

[19:54] <ZoffixW> Skarsnik, essentially, yes: https://twitter.com/zoffix/status/673183128756854784

[19:54] <geekosaur> at a gross level

[19:56] <ugexe> then its well now i need a grammar for ipv4, and ipv6, and probably something needs to parse time stamps, and...

[19:57] *** eyck joined
[19:58] <ugexe> no longer so simple

[20:02] <bartolin_> the test file integration/advent2014-day05.t (run as stresstest) aborts, because it uses the old Supply API (see https://perl6advent.wordpress.com/2014/12/05/)

[20:02] <bartolin_> should the test file be removed from spectest.data?

[20:06] *** lsm-desktop joined
[20:07] <nadim> masak: I answered in https://gist.github.com/masak/3b2e4b16482781431b3b (#comment formated as FAT!)

[20:10] <nadim> I can hack it in 5 lines with a filter list that I can match with the bject type but it is ugly and I would rather see the addition of the filter like a trait added at run time to an object.

[20:14] *** FROGGS left
[20:14] * ZoffixW laughs hysterically

[20:14] *** adhoc joined
[20:14] <ZoffixW> So, I remade everything, and back against this stupid bug. Does NOT parse, unless I "use Grammar::Tracer" -_-

[20:14] <ZoffixW> m: https://gist.github.com/zoffixznet/306e95627aae4fa4487e

[20:14] <camelia> rakudo-moar 539b5f: OUTPUT«Nil␤»

[20:14] <ZoffixW> (╯°□°）╯︵ ┻━┻

[20:15] <DrForr> ZoffixW: FWIW I'm rerunning my test suite under the latest rakudo and finding out it's broken.

[20:15] *** nadim left
[20:15] <[Tux]> lizmat, If I don't include nl-in as attribute, it barfs when setting it later

[20:15] *** nadim joined
[20:16] <[Tux]> .nl is "stolen" from hoelzro's IO::String

[20:16] * [Tux] doesn't use it (I think)

[20:16] <ZoffixW> I just don't get how using a module affects whether my grammar succeeeds

[20:17] <ugexe> ZoffixW: tools that evaluate code can change the behavior sometimes...

[20:17] <ugexe> m: my $x = { :a(1) }; say $x.perl

[20:17] <camelia> rakudo-moar 539b5f: OUTPUT«${:a(1)}␤»

[20:17] <ugexe> m: use trace; my $x = { :a(1) }; say $x.perl

[20:17] <camelia> rakudo-moar 539b5f: OUTPUT«2 (/tmp/t7tsKPGQW8:1)␤my $x = { :a(1) }␤7 (/tmp/t7tsKPGQW8:1)␤say $x.perl␤-> ;; $_? is raw { #`(Block|65770936) ... }␤»

[20:17] <dalek> doc: 04779c1 | RabidGravy++ | doc/Language/concurrency.pod:

[20:17] <dalek> doc: Remove the earliest examples and replace with react

[20:17] <dalek> doc: review: https://github.com/perl6/doc/commit/04779c1898

[20:21] <ZoffixW> I notice that if I remove the portion after <servername> here https://gist.github.com/zoffixznet/306e95627aae4fa4487e#file-parser-p6-L7 or remove both "!" and "@" from here https://gist.github.com/zoffixznet/306e95627aae4fa4487e#file-parser-p6-L11 THEN it works :/

[20:22] <ugexe> what if you change the |s to ||s?

[20:23] *** nadim left
[20:23] <ZoffixW> ugexe, it works... What does || do?

[20:23] *** nadim joined
[20:24] <ugexe> its the same as the perl6 operator

[20:24] <ugexe> | will attempt all the submatches at once and take the longest one or something

[20:24] <ZoffixW> ugexe++ thanks. 

[20:24] <ZoffixW> ( http://docs.perl6.org/language/regexes#Alternation )

[20:24] <AlexDaniel> m: say (‘°□°）’ ~ “┻━┻”)

[20:24] <camelia> rakudo-moar 539b5f: OUTPUT«°□°）┻━┻␤»

[20:25] *** ollej joined
[20:26] *** darutoko left
[20:29] <AlexDaniel> m: sub prefix:<(╯°□°）╯︵>($e) { die $e }; (╯°□°）╯︵ “oops, something went wrong”

[20:29] <camelia> rakudo-moar 539b5f: OUTPUT«oops, something went wrong␤  in sub prefix:<(╯°□°）╯︵> at /tmp/ModkpjVz4Z:1␤  in block <unit> at /tmp/ModkpjVz4Z:1␤␤»

[20:30] <geekosaur> now you just need something to render the lettering upside down :p

[20:32] <ZoffixW> :D

[20:33] <AlexDaniel> geekosaur: so that you can write ｢(╯°□°）╯︵ ‘ƃuoɹʍ ʇuǝʍ ƃuıɥʇǝɯos 'sdoo’｣? Yeah, that would be cool

[20:33] <AlexDaniel> however, I find it weird that to make it work as you expect you have to create an operator

[20:34] <AlexDaniel> I wish it was a sub

[20:34] <AlexDaniel> but this means that you have to use term:<…> thingy, which changes the grammar or something

[20:35] <AlexDaniel> which adds up to the startup time… hm, but new operator does the same thing, isn't it?

[20:35] <ZoffixW> Yeah

[20:36] <AlexDaniel> yeah, right. Ok then it could as well be a sub

[20:40] *** hankache left
[20:40] <ZoffixW> Oh, man

[20:40] <ZoffixW> m: sub prefix:<(╯°□°）╯︵ ┻━┻> {}

[20:40] <camelia> rakudo-moar 539b5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PBrZQj4ZLI␤Too many symbols provided for categorical of type prefix; needs only 1␤at /tmp/PBrZQj4ZLI:1␤------> 3sub prefix:<(╯°□°）╯︵ ┻━┻>7⏏5 {}␤»

[20:40] <ZoffixW> There's a limit on the number of chars? :(

[20:41] <ZoffixW> And that error is weird too

[20:41] <ZoffixW> "needs only 1" part

[20:41] <lizmat> ZoffixW: I think you forgot a > for the prefic

[20:41] <lizmat> *prefix

[20:41] <lizmat> m: sub prefix:<(╯°□°）>╯︵ ┻━┻> {}

[20:41] <camelia> rakudo-moar 539b5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rWXe5eID3v␤Missing block␤at /tmp/rWXe5eID3v:1␤------> 3sub prefix:<(╯°□°）>7⏏5╯︵ ┻━┻> {}␤    expecting any of:␤        new name to be defined␤»

[20:41] <lizmat> m: sub prefix:<(╯°□°）> ╯︵ ┻━┻> {}

[20:41] <camelia> rakudo-moar 539b5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PeGmbhRVe7␤Missing block␤at /tmp/PeGmbhRVe7:1␤------> 3sub prefix:<(╯°□°）>7⏏5 ╯︵ ┻━┻> {}␤    expecting any of:␤        new name to be defined␤»

[20:42] <lizmat> ZoffixW: hmmm... perhaps not

[20:42] <lizmat> m: sub prefix:<(╯°□° ╯︵ ┻━┻）> {}

[20:42] <camelia> rakudo-moar 539b5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZQ3q9AGc7g␤Too many symbols provided for categorical of type prefix; needs only 1␤at /tmp/ZQ3q9AGc7g:1␤------> 3sub prefix:<(╯°□° ╯︵ ┻━┻）>7⏏5 {}␤»

[20:43] <ZoffixW> The cause seems to be the space before the table

[20:43] <ZoffixW> m: sub prefix:<(╯°□°）╯︵┻━┻> {}

[20:43] <camelia> rakudo-moar 539b5f: ( no output )

[20:43] <ZoffixW> m: sub prefix:<(╯°□°）╯︵┻━┻xxxxxxxxxxxxxxxxxx> {}

[20:43] <camelia> rakudo-moar 539b5f: ( no output )

[20:43] <ZoffixW> .u  

[20:43] <yoleaux> Search for a Unicode character by codepoint, name, or raw character

[20:43] <ZoffixW> :(

[20:43] <ZoffixW> m: say " ".uniname

[20:43] <camelia> rakudo-moar 539b5f: OUTPUT«SPACE␤»

[20:44] <ZoffixW> Oh well, right, why would there be a space in an operator! :)

[20:44] <AlexDaniel> ZoffixW: sounds LTA anyway

[20:44] <AlexDaniel> I mean the error message

[20:44] <ZoffixW> Yeah, the error is weird

[20:44] <ZoffixW> m: sub prefix:<[ ]> {}

[20:44] <camelia> rakudo-moar 539b5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/VUI4GciK7Z␤Too many symbols provided for categorical of type prefix; needs only 1␤at /tmp/VUI4GciK7Z:1␤------> 3sub prefix:<[ ]>7⏏5 {}␤»

[20:45] <ZoffixW> m: sub prefix:< > {}

[20:45] <camelia> rakudo-moar 539b5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/pCLWGPBpZb␤Null operator is not allowed␤at /tmp/pCLWGPBpZb:1␤------> 3sub prefix:< >7⏏5 {}␤»

[20:45] <ZoffixW> m: sub prefix:<. > {}

[20:45] <camelia> rakudo-moar 539b5f: ( no output )

[20:45] <ZoffixW> Ah, I see, the <> are a white-space-separated-list

[20:46] <dalek> doc: effb68d | lizmat++ | doc/Language/faq.pod:

[20:46] <dalek> doc: Answer 'Why should I learn Perl 6?' better

[20:46] <dalek> doc: 

[20:46] <dalek> doc: This is basically a copy of the list of reasons as posted on the

[20:46] <dalek> doc: Perl 6 FaceBook group

[20:46] <dalek> doc: review: https://github.com/perl6/doc/commit/effb68d6e3

[20:46] <ZoffixW> m: sub prefix:("(╯°□°）╯︵ ┻━┻") ($e) {}

[20:46] <camelia> rakudo-moar 539b5f: ( no output )

[20:46] <ZoffixW> m: sub prefix:("(╯°□°）╯︵ ┻━┻") ($e) { say $e };    (╯°□°）╯︵ ┻━┻ "I give up"

[20:46] <camelia> rakudo-moar 539b5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ia_QyX6JqM␤Bogus statement␤at /tmp/ia_QyX6JqM:1␤------> 3x:("(╯°□°）╯︵ ┻━┻") ($e) { say $e };    (7⏏5╯°□°）╯︵ ┻━┻ "I give up"␤    expecting any of:␤        pref…»

[20:47] <geekosaur> I think you can't use "(" as part of an operator...

[20:48] <ZoffixW> Yeah, you can

[20:48] <ZoffixW> m: sub prefix:<(╯°□°）╯︵┻━┻> ($e) { say $e };    (╯°□°）╯︵┻━┻ "I give up"

[20:48] <camelia> rakudo-moar 539b5f: OUTPUT«I give up␤»

[20:48] <ZoffixW> Ehehe

[20:48] <ZoffixW> m: sub term:<(╯°□°）╯︵┻━┻> { run 'shutdown -h NOW' };    (╯°□°）╯︵┻━┻

[20:48] <camelia> rakudo-moar 539b5f: OUTPUT«run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub run at src/RESTRICTED.setting:14␤  in sub term:<(╯°□°）╯︵┻━┻> at /tmp/_0kSEXYE7u:1␤  in block <unit> at /tmp/_0kSEXYE7u:1␤␤»

[20:49] <ZoffixW> ^^ something like that could be useful :P

[20:49] <ZoffixW> (FWIW, I knew run was disallowed and I wasn't attempting to kill camelia :P)

[20:52] <ZoffixW> This deserves a module....

[20:52] <AlexDaniel> yeah, your run arg is wrong too

[20:53] <AlexDaniel> ｢run «shutdown -h now»｣ should work though

[20:53] <jnthn> -h gets help, right? :)

[20:53] *** rurban joined
[20:54] <AlexDaniel> only if you think that halting your system is helpful

[20:54] <jnthn> ;)

[20:54] <ZoffixW> :D

[20:54] <jnthn> It's a wonderful bit of command design :)

[20:58] <lucasb> ZoffixW: I don't fully understand grammars, but I tried your snippet and like ugexe said, changing | to || only in the prefix token, it works: token prefix { <servername> || ... }

[20:59] <flussence> ZoffixW: I see you've joined the "why the hell does Grammar::Debugger change this parse outcome" club :D

[20:59] <ZoffixW> flussence, hah :D

[20:59] <ZoffixW> lucasb, yeah, it did. And after a few more tweaks I managed to get it to parse all of my sample input correctly: https://gist.github.com/zoffixznet/cbf1d50b472ef998e6b4

[21:04] *** thundergnat joined
[21:05] *** quester left
[21:06] <thundergnat>  m: say (5.123456789+3.987654321i).round(.01); # Hmmm why yes, yes they do...

[21:06] <camelia> rakudo-moar 539b5f: OUTPUT«Ambiguous call to 'round'; these signatures all match:␤:(Complex:D $: Real $scale, *%_)␤:(Complex:D $: Real $scale, *%_)␤  in block <unit> at /tmp/EeLadBVvYw:1␤␤»

[21:06] <thundergnat> ^ Bug? or am I missing something?

[21:07] <moritz> m: say (5.123456789+3.987654321i).round

[21:07] <camelia> rakudo-moar 539b5f: OUTPUT«5+4i␤»

[21:07] <moritz> thundergnat: bug

[21:07] <thundergnat> 'k

[21:08] <robnox> hmm.. are you guys really typing all those \u's or do I need to recompile my irc client with unicode support.. lol

[21:09] <TimToady> the latter

[21:09] <thundergnat> m: say (5+5i).rand;

[21:09] <camelia> rakudo-moar 539b5f: OUTPUT«Can not convert 5+5i to Num: imaginary part not zero␤  in block <unit> at /tmp/aFs6AcsJFq:1␤␤Actually thrown at:␤  in block <unit> at /tmp/aFs6AcsJFq:1␤␤»

[21:09] <thundergnat> :(

[21:09] <thundergnat> m: use MONKEY-TYPING; augment class Complex { method rand () { [+] self.reals».rand Z* 1,i } }  say (5+5i).rand;

[21:09] <camelia> rakudo-moar 539b5f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/O5_NHQhia5␤Strange text after block (missing semicolon or comma?)␤at /tmp/O5_NHQhia5:1␤------> 3and () { [+] self.reals».rand Z* 1,i } }7⏏5  say (5+5i).rand;␤    expecting any of:␤        infix…»

[21:09] <thundergnat> m: use MONKEY-TYPING; augment class Complex { method rand () { [+] self.reals».rand Z* 1,i } };  say (5+5i).rand;

[21:09] <camelia> rakudo-moar 539b5f: OUTPUT«3.60462065430806+1.82499575714017i␤»

[21:10] <[Coke]> will deprecated handle v6.d style versions instead of dates going forward?

[21:11] *** z8 joined
[21:13] *** thejawn left
[21:16] *** robnox left
[21:16] *** lucasb left
[21:17] *** raiph left
[21:18] <dalek> ecosystem: 6564197 | (Zoffix Znet)++ | META.list:

[21:18] <dalek> ecosystem: Add Acme::GiveUp to eco

[21:18] <dalek> ecosystem: 

[21:18] <dalek> ecosystem: (╯°□°）╯︵┻━┻  when you just want to give up for the day: https://github.com/zoffixznet/perl6-Acme-GiveUp

[21:18] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/6564197c4e

[21:18] <ZoffixW> Ahh... now *that's* the way to spend the day :)

[21:19] *** z8 left
[21:20] <masak> :D

[21:20] <dalek> rakudo/nom: 75ca9dc | (Stefan Seifert)++ | src/ (2 files):

[21:20] <dalek> rakudo/nom: Avoid CompUnits carrying permantent references to VM Contexts

[21:20] <dalek> rakudo/nom: 

[21:20] <dalek> rakudo/nom: VM Contexts are non-serializable by design, so they may not be referenced from

[21:20] <dalek> rakudo/nom: compile time data lest they break on precompilation. So we get rid of them as

[21:20] <dalek> rakudo/nom: soon as we don't need them anymore.

[21:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/75ca9dcbb4

[21:20] <dalek> rakudo/nom: 6c0f93c | (Stefan Seifert)++ | src/ (5 files):

[21:20] <dalek> rakudo/nom: Implement %?RESOURCES

[21:20] <dalek> rakudo/nom: 

[21:20] <dalek> rakudo/nom: Allows for e.g. Inline::Perl5 to find its p5helper.so both when loaded from

[21:20] <dalek> rakudo/nom: a file system directory and when loading an installed version by just accessing

[21:20] <dalek> rakudo/nom: %?RESOURCES<p5helper.so>

[21:20] <dalek> rakudo/nom: 

[21:20] <dalek> rakudo/nom: Since library loaders and other operating system facilities may need file

[21:20] <dalek> rakudo/nom: extensions to accept those files, we keep the extensions while using a SHA

[21:20] <dalek> rakudo/nom: hash as file name to avoid collisions.

[21:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c0f93cf10

[21:21] *** rindolf left
[21:21] <flussence> nine++

[21:22] <timotimo> ^- i like this

[21:22] <ZoffixW> nine++

[21:22] <ZoffixW> RabidGravy, ^ seems there's now a way to fix your @*INC-using modules

[21:24] <jnthn> nine++

[21:26] <Skarsnik> I love this module

[21:26] * timotimo found that the terminal he uses wasn't buggy, they just put "mark text to put it into cut buffer" as an optional feature that's off by default

[21:26] <timotimo> maximum facepalm

[21:26] <flussence> whaaaaaaaaaaaat

[21:26] <flussence> who makes that *optional*?!

[21:27] <masak> Windows.

[21:27] <flussence> well I can understand it there...

[21:27] *** ZoffixW left
[21:27] <timotimo> MATE Terminal.

[21:27] <flussence> but *there*!

[21:27] <timotimo> i'm using it instead of gnome terminal which had been good enough before that

[21:27] <timotimo> until they got rid of something ... i think see-through background?

[21:27] <AlexDaniel> Zoffix: “You can use and distribute this module under the same terms as Perl 6 itself.”

[21:27] <AlexDaniel> Zoffix: what does it mean?

[21:28] <timotimo> AlexDaniel: artistic license 2

[21:28] <geekosaur> ??? ctrl-shift-c works fine for me...

[21:28] <timotimo> oh ... hmm. should probabl yread "rakudo itself" rather than "perl 6 itself"

[21:28] <AlexDaniel> Zoffix: sure, but it says “Perl 6 itself”. What is it?

[21:28] <geekosaur> auto to clipboard I dislike, random stuff ends up wiping out something I had selected deliberately

[21:28] <flussence> geekosaur: that's why there's more than one clipboard :)

[21:28] <timotimo> i use the cut buffer for things i want to transfer from one second to another

[21:29] <Skarsnik> Zoffix, make me want to figure is there is a way to shutdown (save) a vm from a guest with virtualbox xD

[21:29] <geekosaur> people still use cut buffers.

[21:29] <geekosaur> ...

[21:29] <geekosaur> "I still use DOS"

[21:30] <AlexDaniel> timotimo: if it starts saying “rakudo” then why is it limited to just one implementation

[21:30] <nadim> if roles are applied on "proto objects", does that mean that roles can also be applied to "normal" objects thus augmenting the type of an object at compile/run time? in that case how does one do that?

[21:31] <timotimo> AlexDaniel: because rakudo has a license and this sentence is only related to a license

[21:31] <timotimo> tbh i don't even know where that was quoted from

[21:31] <masak> nadim: do you mean "type objects"?

[21:31] <timotimo> geekosaur: my opinion is actually that every time i have to use windows i get utterly frustrated that middle click doesn't paste what i selected elsewhere

[21:32] <masak> nadim: they haven't been called "proto objects" for something like five years...

[21:32] *** kaare_ left
[21:32] <masak> I only remember that term because I'm an old geezer, in Internet years

[21:32] <AlexDaniel> timotimo: it just makes me wonder why not use artistic license 2 explicitly

[21:33] <flussence> to me, a UI that requires ^C-^V is like using a car that requires double-declutch

[21:33] <Skarsnik> because you have to include it I think

[21:33] <AlexDaniel> timotimo: e.g. what happens if 10 years from now rakudo dies and another implementation takes over

[21:33] <timotimo> flussence: what is "double-declutch"?

[21:33] <AlexDaniel> timotimo: not a big issue though

[21:33] <nadim> masak: yes I meant type object when I said "proto object"

[21:33] <timotimo> AlexDaniel: yeah, true. why not put artistic license 2? i don't know. i'd do that.

[21:34] <AlexDaniel> timotimo: it was from here: https://github.com/zoffixznet/perl6-Acme-GiveUp

[21:34] <timotimo> nadim: you apply a role to an instance with "does" or "but". the first one will mutate an object in-place, the other will give you a copy with the role mixed in

[21:34] <nadim> timotimo: great, any place where it is documented?

[21:35] <flussence> timotimo: like normal manual transmission, but you have to let off the clutch pedal in neutral, rev-match, then shift to the next gear.

[21:35] <nadim> masak: the problem is that googling for P6 brings back docs from the past ;)  

[21:36] <timotimo> nadim: "infix does" and "infix but" on doc.perl6.org is only a little snippet of text

[21:36] <nadim> masak: did you look at my answer to you?

[21:36] <timotimo> http://doc.perl6.org/language/objects#Roles

[21:37] <timotimo> http://doc.perl6.org/routine/...  <-  404 :(

[21:37] <cygx> and done with the advent article

[21:37] <flussence> timotimo: http://doc.perl6.org/routine/.. is worse

[21:37] <cygx> next on the schedule: eat something, re-read the post and get it into wrodpress

[21:37] <timotimo> hahahaha

[21:39] <flussence> it should probably be written routine/&infix:<..>, it's never going to work the normal way

[21:39] <AlexDaniel> Same with http://doc.perl6.org/routine/.

[21:40] <timotimo> yeah

[21:40] <AlexDaniel> and a bunch of other stuff like .::

[21:40] <AlexDaniel> or even .=

[21:40] <AlexDaniel> I thought that it was a known issue

[21:40] <timotimo> is .:: a thing?

[21:41] <AlexDaniel> well, it is listed: http://doc.perl6.org/language/operators#postfix_.%3A%3A

[21:42] <nadim> I can try but it is faster to ask, can a role contain a multi sub? and in that case, am I right when I think that I can add a multi sub to an object by using 'does' on it?

[21:43] <[Coke]> I would definitely be explicit about the license you mean instead of mentioning a different sw project as holding your license.

[21:48] *** xfix joined
[21:48] <masak> nine: yes, old docs are a problem

[21:48] <masak> (not just for Perl 6)

[21:48] <timotimo> where did that bite us this time?

[21:49] <masak> nadim: found your answer in the backlog. looking now.

[21:49] <masak> timotimo: nadim found an old do that said "proto object" instead of "type object"

[21:49] <timotimo> wha ... seriously?

[21:49] <timotimo> where the hell?

[21:49] <nadim> timotimo: it was in old presentation not in the docs

[21:49] <timotimo> hm, okay

[21:50] <nadim> :)

[21:50] *** kjs_ joined
[21:50] <masak> nadim: this doesn't immediately sound to me like a problem multis ought to be a solution to

[21:50] <masak> nadim: I think you want the module to have some kind of hooking/registration mechanism

[21:51] <masak> nadim: where you can give it a type and a callback

[21:52] <masak> nadim: I don't know offhand if you can do that with multis somehow... maybe. but I almost wouldn't expect it to work.

[21:52] <masak> multis add behavior in *your* scope, not in someone else's.

[21:53] <timotimo> i expect that'd require augment rather than does/but

[21:53] <masak> right.

[21:53] <masak> and I wouldn't recommend `augment` as a solution :) it's brittle

[21:53] <timotimo> yes

[21:58] <DrForr> Hrm. Can someone recommend a clean way to write $/<foo>>>.ast, since it seems to no longer return a list of matched trees?

[21:58] <DrForr> Or maybe I've uncovered a bug.

[21:58] <timotimo> @<foo>>>.ast?

[22:00] <DrForr> That's almost what I'm after...

[22:04] *** leat joined
[22:07] <DrForr> Seems there's just one layer of dereferencing I need to get rid of somewhere...

[22:08] <dalek> doc: 96be575 | RabidGravy++ | doc/Language/concurrency.pod:

[22:08] <dalek> doc: spaces not tabs

[22:08] <dalek> doc: review: https://github.com/perl6/doc/commit/96be575cc8

[22:08] <dalek> doc: b1f31c2 | RabidGravy++ | doc/Language/faq.pod:

[22:08] <dalek> doc: Merge branch 'master' of github.com:perl6/doc

[22:08] <dalek> doc: review: https://github.com/perl6/doc/commit/b1f31c2243

[22:08] <dalek> doc/qualified-names: ea23fcd | (Brock Wilcox)++ | doc/Language/ (3 files):

[22:08] <dalek> doc/qualified-names: Move into a dedicated Packages doc

[22:08] <dalek> doc/qualified-names: review: https://github.com/perl6/doc/commit/ea23fcd7e1

[22:11] <nadim> masak: I disagree about the design of the interface, multis do just what a lookup does, re-implementing it sounds illogical. But this is still  not fixed, who knows, maybe I completely agree with you in a few days. right now I like the idea of using 'does' or maybe inheritance.

[22:11] <masak> :)

[22:12] <masak> nadim: I'm also not 100% set in my opinion. that was just my initial reaction at seeing the problem you were solving.

[22:12] <nadim> masak, on the other hand, and although it is bad design, I would like to know how to inject suff in other classes/namespaces. I also noted that method 'can' just takes a name, it would be nice to know how to give it a name and types to see if it can that too.

[22:13] <nadim> masak: as they say in France, only idiots never change their opinion, being a bit open to other solutions is always a sign of intelligence :)

[22:13] <masak> :)

[22:14] <masak> the notion of injecting stuff in other namespaces is... what's the term? "risky"? "tightly coupled"?

[22:14] <masak> of course, it all depends.

[22:14] <lizmat> nadim: do you realize you can add methods to object at runtime ?

[22:14] <nine> Oh my, anyone else seeing a massive spec test regression?

[22:15] <lizmat> m: my $a = 42 but role { method zippo { "zippo: {self}" } }; say $a; say $a.zippo  # nadim

[22:15] <camelia> rakudo-moar 6c0f93: OUTPUT«42␤zippo: 42␤»

[22:16] <lizmat> massive as in how many tests ?

[22:16] * lizmat builds and spectests

[22:16] *** espadrine joined
[22:16] <nadim> lizmat: Yes, got the info 20 mn before your post :) I am trying that right now.

[22:16] <flussence> nine: I see a few S02's crashing... 

[22:16] <nine> lizmat: as in 65 files

[22:17] <lizmat> no, haven't seen that yet

[22:17] *** brabo left
[22:17] <jnthn> o.O

[22:17] <lizmat> but I don't think I tested after your commits

[22:17] *** brabo joined
[22:17] <nine> Undeclared symbols diag ok skip

[22:17] <nadim> although I am stubborn and trying to use multi sub but since it makes no difference, I'll use the methods

[22:17] <flussence> 25% done with spectest, seen S02 and a few S17 explode so far but nothing surprising

[22:18] <jnthn> nine: Sounds like an import oops...

[22:18] <nine> May be 75ca9dcbb495763a2fb9e9f4829b9ba885db2a8e.

[22:18] <flussence> I'm using TEST_JOBS=8, would that affect it?

[22:18] *** rob joined
[22:18] *** rob is now known as robnox

[22:19] <lizmat> flussence: no

[22:19] <lizmat> yup, looks like import is borked

[22:19] <flussence> oh, quite a few explosions in S06

[22:19] <robnox> ok someone please post some unicode.. I want to see if I fixed it lol

[22:19] <flussence> ‽

[22:20] <jnthn> RabidGravy: The third code example in http://doc.perl6.org/language/concurrency#Channels seems mis-formatted (ended up in many code boxes)

[22:20] <robnox> darn, still seeing \u.. prob gotta tweak a setting now brb

[22:20] <lizmat> ę

[22:20] *** robnox left
[22:20] *** Skarsnik left
[22:21] <lizmat> nine: looks like import fails in precomped files?

[22:21] <lizmat> ===SORRY!=== Error while compiling /Users/liz/Github/rakudo.moar/t/spec/packages/Test/Util.pm

[22:21] <lizmat> Undeclared routines:

[22:21] <lizmat>     diag used at lines 59, 67, 70

[22:21] <masak> that "ę" is the codfish of vowels.

[22:21] <RabidGravy> jnthn, I saw that pushed one with spaces instead of tabs

[22:21] <jnthn> ah, cool, then guess it's just behind

[22:21] <jnthn> RabidGravy++

[22:22] <jnthn> m: say uniname "ę"

[22:22] <camelia> rakudo-moar 6c0f93: OUTPUT«LATIN SMALL LETTER E WITH OGONEK␤»

[22:22] *** rurban1 joined
[22:22] <flussence> these failure patterns are weird; "test returned 1" in short bursts, grouped close together

[22:23] <lizmat> flussence: they're the test files with "use Test::Util" I will bet

[22:23] <dalek> rakudo/nom: 88d93f8 | (Stefan Seifert)++ | src/ (2 files):

[22:23] <dalek> rakudo/nom: Revert "Avoid CompUnits carrying permantent references to VM Contexts"

[22:23] <dalek> rakudo/nom: 

[22:23] <dalek> rakudo/nom: This reverts commit 75ca9dcbb495763a2fb9e9f4829b9ba885db2a8e which seems to

[22:23] <dalek> rakudo/nom: break import in precompiled modules.

[22:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/88d93f84fc

[22:23] <nine> Down to 16 failing files.

[22:23] <nine> Lots of S17 failures in there

[22:24] *** robnox joined
[22:24] * lizmat is building and spectesting again

[22:24] <nine> What is "cas" supposed to be?

[22:24] *** Begi2 joined
[22:24] <flussence> and t/spec/integration/advent2013-day14.t hung... 

[22:24] * masak .oO( min commit e cas )

[22:24] * flussence updates and tests also

[22:25] *** rurban left
[22:25] <lizmat> nine: https://en.wikipedia.org/wiki/Compare-and-swap

[22:26] *** Begi left
[22:26] <nine> Appears in the failing S17 tests but nowhere else?

[22:27] <nadim> m: my $a = 42; $a does role { method zippo { "zippo: {self}" } }; say $a; say $a.zippo 

[22:27] <camelia> rakudo-moar 6c0f93: OUTPUT«42␤zippo: 42␤»

[22:28] *** Begi2 left
[22:29] <nine> ack '\bcas\b' in my rakudo directory yields only test S17 tests and MoarVM .h files

[22:30] <flussence> panda bootstrap.pl sounds unhappy right now: «Use of uninitialized value %ENV...» but it seems to have installed anyway.

[22:30] <jnthn> 'night, #perl6

[22:31] <masak> 'night, jnthn 

[22:31] <nine> I know I shouldn't push stuff when actually spending an evening with my girlfriend :/ But people have been wasting time with workarounds all week...

[22:31] <cygx> It Is Done: https://perl6advent.wordpress.com/?p=3176

[22:32] <flussence> nine: spectest looks a lot happier now

[22:32] <nine> Ah, seems like jnthn++ removed cas and some spec tests need updating.

[22:32] <nine> flussence: btw. I'm really not sure if we can centralize precomp directories

[22:32] *** pecastro_ joined
[22:33] *** pecastro left
[22:33] <flussence> I'm not sure either. asking people to install perl6 to user-writable directories isn't gonna fly though.

[22:34] <dalek> doc: 383c032 | RabidGravy++ | doc/Language/concurrency.pod:

[22:34] <dalek> doc: Really rid the tabs this time

[22:34] <dalek> doc: review: https://github.com/perl6/doc/commit/383c032fd8

[22:34] <nine> flussence: we definitely need some patches to make failures to write non-fatal. If we cannot precomp, we should still continue, just slower.

[22:35] <dalek> rakudo/nom: 8b77688 | lizmat++ | src/core/asyncops.pm:

[22:35] <dalek> rakudo/nom: Restore cas()

[22:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b77688474

[22:36] <masak> cygx++ # nice! I enjoyed it :)

[22:36] <lizmat> nine flussence : I'm not sure jnthn removed cas() intentionally, so I restored it

[22:37] <lizmat> at least for now

[22:37] <PerlJam> cygx++ I'm only here for a few minutes and your post is very nice

[22:38] <Zoffix> AlexDaniel, it's an artifact of me copying over my P5 module boilerplate and changing P5 to P6 in the license field. Thanks for spotting it. I'll change it to the proper name of the license.

[22:38] <AlexDaniel> :)

[22:38] <flussence> I'm half-wondering if it'd be saner, at this point, to just store precomp data in sqlite and let that worry about the concurrent access stuff.

[22:39] <cygx> masak, PerlJam: anything you'd like me to change?

[22:39] <cygx> there's still ime, but not a lot ;)

[22:39] <cygx> *time

[22:39] <lizmat> flussence: that is an option, that's why it's just modules

[22:40] <lizmat> and in some installations, you could only have precomped files, *without* source

[22:40] <lizmat> or load the precomp on the fly from the cloud  :-)

[22:40] <PerlJam> cygx: There's one sentence that didn't make sense to me:   Note that providing :r,:w is semantically different from the combination of :r and :w as existing files will not be truncated.

[22:40] <AlexDaniel> OK I have some progress with DBIish

[22:40] <PerlJam> cygx: was one of those supposed to be :rw ? 

[22:41] <cygx> PerlJam: :r,:w behaves identically to :rw

[22:41] <cygx> but in contrast to :w, it doesn't truncate

[22:41] <cygx> so :r,:w != :r+:w, so to speak

[22:41] <PerlJam> ah

[22:42] <PerlJam> btw, it's too bad you didn't use :e for exclusive, then we could have an open mode of :ew  :)

[22:42] <AlexDaniel> “Cannot find method 'find_symbol'” this error does not mean anything, but if we look at when it happens: ｢require ::($module);｣. This basically means that it will be expanded to something like ｢require DBDish::Pg;｣. Now, it is pretty simple, if you try to *require* it then it fails, but if you try to *use* it then there is no problem

[22:42] <timotimo> i was about to point that same thing out PerlJam just put here

[22:43] <lizmat> nine: confirm spectest is as clean as it was before your revert and the cas() revert

[22:43] <AlexDaniel> in fact, I've changed it to “use DBDish::Pg;” and it seems like the rest of the DBIish is working

[22:43] <Zoffix> cygx++ nice article. This line reads weird tho: "and binary files do currently not return buffers instead". should it be "do not currently"?

[22:44] <jdv79> whaat article?

[22:44] <AlexDaniel> So if I got it right, then the question is “why you can ｢use｣ it but can't ｢require｣ it?”

[22:44] <jdv79> oh, there's  new one by jnthn...

[22:44] <jdv79> s//a/

[22:45] <Zoffix> jdv79, the scheduled Advent post

[22:46] <nine> lizmat: great :)

[22:47] <nine> lizmat: 7 test files failing now which is about average

[22:47] <PerlJam> Is there some known weirdness with panda (or rakudobrew)?  I just tried "rakudobrew build-panda" and it seems to be hanging on "==> Testing JSON::Fast"

[22:47] <timotimo> yes, there is a weirdness

[22:47] <colomon>  I’ve been getting hangs in panda for a month or two now?

[22:47] <timotimo> JSON::Fast uses nqp::eqat to find the closing " for a quoted string

[22:47] <colomon> seem kind of random, and usually if I crtl-C all the work has been done.

[22:48] <timotimo> recent moarvm doesn't throw an exception when eqat goes beyond the end of string

[22:48] <Zoffix> nine, BTW, someone mentioned this bug was due to precomp stuff. Not sure if you know of it/care: https://rt.perl.org/Ticket/Display.html?id=126818

[22:48] <timotimo> i'll have to bite the bullet and put bounds checks in everywhere :(

[22:50] <timotimo> nqp-m: say nqp::graphs("hi")

[22:50] <camelia> nqp-moarvm: OUTPUT«Confused at line 2, near "say nqp::g"␤   at gen/moar/stage2/NQPHLL.nqp:521  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic:105)␤ from gen/moar/stage2/NQP.nqp:921  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:comp_unit:872)␤ from …»

[22:50] <timotimo> nqp-m: say(nqp::graphs("hi"))

[22:50] <camelia> nqp-moarvm: OUTPUT«No registered operation handler for 'graphs'␤   at gen/moar/stage2/QAST.nqp:1576  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_op:64)␤ from gen/moar/stage2/QAST.nqp:5488  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_node…»

[22:50] <dalek> rakudo/nom: fdec627 | lizmat++ | src/core/Complex.pm:

[22:50] <dalek> rakudo/nom: Remove bogus coercion, fixes RT #126825

[22:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fdec6278bf

[22:50] <timotimo> which one do i use in userland nqp?

[22:50] <nine> Zoffix: I seem to remember jnthn mentioning "is cached" being an ongoing source of problems?

[22:51] <timotimo> nqp-m: say(nqp::graphs_s("hi"))

[22:51] <camelia> nqp-moarvm: OUTPUT«No registered operation handler for 'graphs_s'␤   at gen/moar/stage2/QAST.nqp:1576  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:compile_op:64)␤ from gen/moar/stage2/QAST.nqp:5488  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/QAST.moarvm:compile_no…»

[22:51] <timotimo> hum.

[22:52] <cygx> I've tweaked some sentences to address the raised issues

[22:52] <PerlJam> cygx++

[22:52] <timotimo> i suppose nqp::chars

[22:54] <PerlJam> cygx: Maybe you could mention slurp and spurt at the end somewhere too?  (I mean, that's why many people open files in the first place)

[22:56] <AlexDaniel> surprisingly the error only happens with DBIish files, you can ｢require｣ any other module just fine

[22:57] * AlexDaniel is talking to himself

[22:57] <RabidGravy> nine, that %?RESOURCES thing does it still rely on changes to the installer?

[22:57] <nine> RabidGravy: what do you mean?

[22:58] <RabidGravy> e.g. panda or what ever? to read the resources from the META.info and so on

[22:58] <nine> I already pushed a change to panda

[22:59] <RabidGravy> ah okay, you rock I'm being slow

[22:59] <nine> "resources"      : [ "p5helper.so" ],

[22:59] <timotimo> panda shouldn't hang any more when running JSON::Fast tests.

[22:59] <timotimo> please update your panda to the latest revision

[23:00] <lizmat> good night, #perl6!

[23:01] <nine> Good night!

[23:01] <RabidGravy> toodlepip

[23:01] <PerlJam> g'night lizmat; sleep well!

[23:01] <timotimo> gnite lizmat 

[23:02] *** molecules joined
[23:02] *** molecules is now known as Guest99713

[23:04] <AlexDaniel> if I'm getting a bunch of “at …/runtime/CORE.setting.moarvm:1” errors, how can I make it meaningful?

[23:06] <nadim> private multi methods are not supported, by rakudo or perl6?

[23:06] *** xfix left
[23:08] <dalek> Inline-Perl5: 03e8ac1 | (Stefan Seifert)++ | / (4 files):

[23:08] <dalek> Inline-Perl5: Use new %?RESOURCES to locate p5helper.so

[23:08] <dalek> Inline-Perl5: 

[23:08] <dalek> Inline-Perl5: Fixes finding p5helper.so when installed into a

[23:08] <dalek> Inline-Perl5: CompUnit::Repository::Installation and brings us much closer to an installable

[23:08] <dalek> Inline-Perl5: version again.

[23:08] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/03e8ac101c

[23:08] <nine> RabidGravy: ^^^ should give you a hint on how to utilize %?RESOURCES

[23:08] <RabidGravy> cool

[23:08] <nine> Off to bed now. Good night!

[23:09] <PerlJam> good night nine!

[23:10] <masak> good nine, night

[23:10] <AlexDaniel> in other words, is there any way to get the line number if the error happens in nqp or CORE.setting?

[23:16] <TimToady> it would be nice if we had the option to install a cockpit recorder that would minimally record line numbers as they are executed

[23:17] <RabidGravy> nadim, correct

[23:17] <jdv79> TimToady: i was actually looking at that spot in the code (add_categorical) when i attempted to gain some understanding

[23:18] <jdv79> at least i wasn't off in left field

[23:18] <masak> nadim: there's no theoretical reason they couldn't exist, so they're simply not-yet-implemented in Rakudo.

[23:18] <masak> nadim: possible workaround is to delegate in a single-entry-point private method to multi subs.

[23:20] *** Zoffix left
[23:23] <AlexDaniel> it seems like I can skip ｢require｣ and use ｢use｣ instead, though that would be more code

[23:24] <TimToady> there's no particular reason you can't just use subs instead of private methods

[23:24] *** TEttinger left
[23:24] <TimToady> since private methods are really just subs with a different call syntax

[23:25] <TimToady> well, as long asyou aren't planning to trust someone else

[23:27] *** herby_ joined
[23:27] <herby_> Good evening, everyone!

[23:27] <PerlJam> hello herby

[23:28] *** bpmedley joined
[23:29] <dalek> roast: c02bf4b | thundergnat++ | S32-num/rounders.t:

[23:29] <dalek> roast: Add tests for RT 126825

[23:29] <dalek> roast: review: https://github.com/perl6/roast/commit/c02bf4bc79

[23:35] <masak> herby_: ahoy!

[23:37] <herby_> o/

[23:37] *** espadrine left
[23:39] <herby_> m: say "herby".comb(/\w/);

[23:39] <camelia> rakudo-moar fdec62: OUTPUT«(h e r b y)␤»

[23:40] <herby_> say "h2erb3y".comb(/\w/);

[23:40] <herby_> m: say "h2erb3y".comb(/\w/);

[23:40] <camelia> rakudo-moar fdec62: OUTPUT«(h 2 e r b 3 y)␤»

[23:40] <herby_> m: say "h2erb3y".comb(/\S/);

[23:40] <camelia> rakudo-moar fdec62: OUTPUT«(h 2 e r b 3 y)␤»

[23:42] <herby_> m: say "h2erb3y".comb(/\s/);

[23:42] <camelia> rakudo-moar fdec62: OUTPUT«()␤»

[23:42] <herby_> m: say "h2erb3y".comb(/\d/);

[23:42] <camelia> rakudo-moar fdec62: OUTPUT«(2 3)␤»

[23:42] <herby_> I really like this irc interpreter, if thats what its called :)

[23:43] <herby_> m: say "h2erb3y".comb(/\w**2/);

[23:43] <camelia> rakudo-moar fdec62: OUTPUT«(h2 er b3)␤»

[23:43] <timotimo> m: say "h2erb3y".comb(2)

[23:43] <camelia> rakudo-moar fdec62: OUTPUT«(h2 er b3 y)␤»

[23:44] <herby_> ahhh

[23:44] <timotimo> that version is 1) much faster, 2) gives you a rest at the end if there is one

[23:44] <herby_> m: say"aaabbbccc".comb(3);

[23:44] <camelia> rakudo-moar fdec62: OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at /tmp/Pt7_G4Bvjf:1␤------> 3say7⏏5"aaabbbccc".comb(3);␤Two terms in a row␤at /tmp/Pt7_G4Bvjf:1␤------> 3say7⏏5"aaabbbccc".comb(3);␤    expecting any of:␤        infix…»

[23:44] <herby_> m: say "aaabbbccc".comb(3);

[23:44] <camelia> rakudo-moar fdec62: OUTPUT«(aaa bbb ccc)␤»

[23:44] <herby_> sweet, learn something new every day

[23:45] *** spider-mario left
[23:45] <timotimo> :)

[23:46] <herby_> m: split("", "herby").say

[23:46] <camelia> rakudo-moar fdec62: OUTPUT«( h e r b y )␤»

[23:46] <herby_> m: split(2, "herby").say

[23:46] <camelia> rakudo-moar fdec62: OUTPUT«(herby)␤»

[23:46] <timotimo> there's no 2 in herb@

[23:47] <herby_> i was fishing a little there :)

[23:47] <timotimo> m: say split(2, "her2by2").perl

[23:47] <camelia> rakudo-moar fdec62: OUTPUT«("her", "by", "")␤»

[23:47] <jdv79> what is the precision of numeric ops?

[23:47] <timotimo> numeric as in working on Num type?

[23:47] *** kjs_ left
[23:48] <jdv79> m: say 0.99999999999999999999999 < 1 # why this?

[23:48] <camelia> rakudo-moar fdec62: OUTPUT«False␤»

[23:48] <timotimo> m: say 0.99999999999999999999999.perl

[23:48] <camelia> rakudo-moar fdec62: OUTPUT«<99999999999999999999999/99999999999999991611392>␤»

[23:48] <timotimo> because our rats are broken?

[23:48] <jdv79> so it is supposed to be actually arbitary and that's a bug?

[23:49] <jdv79> *arbitrary

[23:49] <timotimo> it must be we're using a wrong type somewhere in parsing that number

[23:50] <Guest99713> m: <0.99999999999999999999999999999999999999999999999999999999999> < 1

[23:50] <camelia> rakudo-moar fdec62: OUTPUT«WARNINGS:␤Useless use of "<" in expression "<0.99999999999999999999999999999999999999999999999999999999999> < 1" in sink context (line 1)␤»

[23:50] <Guest99713> say <0.99999999999999999999999999999999999999999999999999999999999> < 1

[23:50] <herby_> m: say so 42.list.elems

[23:50] <camelia> rakudo-moar fdec62: OUTPUT«True␤»

[23:51] <AlexDaniel> m: say <0.99999999999999999999999999999999999999999999999999999999999> < 1

[23:51] <camelia> rakudo-moar fdec62: OUTPUT«True␤»

[23:52] *** bjz joined
[23:53] <herby_> the perl 6 docs say that "say so 42.list.elems" should ouput 1

[23:53] <herby_> does camelia translate that to True?

[23:53] <herby_> m: say so 42.list.elems

[23:53] <camelia> rakudo-moar fdec62: OUTPUT«True␤»

[23:54] *** bjz_ left
[23:56] <AlexDaniel> herby_: why would it output 1 if there's “so”?

[23:57] <jdv79> what is 0.A?

[23:57] <arnsholt> herby_: Where in the docs does it say that? That's almost certainly outdated

[23:58] <jdv79> m: say 0.9999999999999999999999.perl

[23:58] <camelia> rakudo-moar fdec62: OUTPUT«0.A␤»

[23:58] <Guest99713> arnsholt: I found it. Forking it to fix it.

[23:58] <jdv79> m: say 0.9999999999999999999999.WHAT

[23:58] <camelia> rakudo-moar fdec62: OUTPUT«(Rat)␤»

[23:58] <AlexDaniel> http://doc.perl6.org/type/Any#method_list

[23:59] <AlexDaniel> yeah

[23:59] <herby_> Thanks Guest, I was looking for it

[23:59] <AlexDaniel> just remove “so”, I guess

[23:59] <cygx> T-2m

[23:59] <herby_> I didn't really understand the example so I was going to run it myself and test it out

[23:59] <Guest99713> Done:  Pull request is 'Removed erroneous use of "so" #225'

