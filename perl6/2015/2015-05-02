[00:01] *** Vlavv left
[00:03] *** gfldex left
[00:06] *** airdisa left
[00:07] <tony-o> rose

[00:08] *** airdisa joined
[00:14] *** Vlavv joined
[00:52] *** airdisa left
[01:10] *** raiph joined
[01:31] *** tinyblak joined
[01:49] *** aborazmeh joined
[01:49] *** aborazmeh left
[01:49] *** aborazmeh joined
[02:21] *** noganex joined
[02:24] *** noganex_ left
[02:24] *** rmgk_ joined
[02:24] *** rmgk is now known as Guest93589

[02:24] *** Guest93589 left
[02:24] *** rmgk_ is now known as rmgk

[02:25] *** cognominal left
[02:38] *** xinming_ joined
[02:40] *** xinming left
[02:47] <dalek> ecosystem: 40f47dd | (David Farrell)++ | META.list:

[02:47] <dalek> ecosystem: Update META.list

[02:47] <dalek> ecosystem: 

[02:47] <dalek> ecosystem: Added Module-Minter, an app that creates the basic files for a distribution

[02:47] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/40f47dd5b4

[02:47] *** dnmfarrell joined
[02:49] *** skids joined
[03:02] <b2gills> m: say Bool.roll(*)

[03:02] <camelia> rakudo-moar 676c25: OUTPUT¬´True False True False False True True True False False False False True False True False False False True False True True True False False False False False False False False True False False True False False True False True True True False False False Fal‚Ä¶¬ª

[03:03] <b2gills> The point is that the list is infinite but rakudo doesn't think it is, so some operations don't fail properly

[03:04] <dnmfarrell> hey does `proto` in method declaration stand for prototype?

[03:05] <b2gills> as far as I know ... yes

[03:07] <dnmfarrell> b2gills: thanks :)

[03:07] <b2gills> There are also proto tokens, and proto subs

[03:08] <dnmfarrell> ah found the docs http://design.perl6.org/S06.html#Routine_modifiers

[03:10] *** aborazmeh left
[03:21] *** al2o3-cr joined
[03:46] *** dnmfarrell left
[03:57] *** vendethiel joined
[03:59] *** araujo joined
[04:00] *** araujo left
[04:02] <al2o3-cr> p6: say 3;

[04:02] <camelia> rakudo-moar 676c25: OUTPUT¬´3‚ê§¬ª

[04:03] <al2o3-cr> p6: say "awesomeness;

[04:03] <camelia> rakudo-moar 676c25: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/tmpfile‚ê§Unable to parse expression in double quotes; couldn't find final '"' ‚ê§at /tmp/tmpfile:1‚ê§------> 3say "awesomeness;7‚èè5<EOL>‚ê§    expecting any of:‚ê§        argument list‚ê§        double qu‚Ä¶¬ª

[04:04] <al2o3-cr> p6: say "awesomeness";

[04:04] <camelia> rakudo-moar 676c25: OUTPUT¬´awesomeness‚ê§¬ª

[04:34] *** alini joined
[04:42] *** raiph left
[04:57] *** rindolf joined
[05:02] <dalek> json: 354b936 | moritz++ | / (3 files):

[05:02] <dalek> json: Switch from Match.ast do Match.made

[05:02] <dalek> json: review: https://github.com/moritz/json/commit/354b936c57

[05:02] *** vendethiel left
[05:07] *** skids left
[05:11] *** Akagi201 joined
[05:25] *** diana_olhovik joined
[05:44] *** BenGoldberg left
[05:45] *** Psyche^ joined
[05:50] *** Patterner left
[05:56] *** khisanth__ is now known as Khisanth

[06:11] <dalek> roast: 89c07da | TimToady++ | S03-metaops/hyper.t:

[06:11] <dalek> roast: start testing some nodels

[06:11] <dalek> roast: review: https://github.com/perl6/roast/commit/89c07dae1e

[06:11] <dalek> rakudo/nom: f3ecf86 | TimToady++ | src/core/Parcel.pm:

[06:11] <dalek> rakudo/nom: parcels need their own nodals till list merge

[06:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f3ecf86e11

[06:16] *** kaare__ joined
[06:18] *** alini left
[06:23] *** Akagi201 left
[06:23] *** Akagi201 joined
[06:26] *** Akagi201_ joined
[06:26] <dalek> doc: 5e2da46 | paultcochrane++ | lib/Type/List.pod:

[06:26] <dalek> doc: Mention assigning and binding rotor output differences

[06:26] <dalek> doc: review: https://github.com/perl6/doc/commit/5e2da460af

[06:26] <dalek> doc: 5fc01a1 | paultcochrane++ | lib/Language/ (2 files):

[06:26] <dalek> doc: Merge branch 'master' of github.com:perl6/doc

[06:26] <dalek> doc: review: https://github.com/perl6/doc/commit/5fc01a1f3a

[06:30] *** Akagi201 left
[06:31] *** jack_rabbit joined
[06:31] *** RabidGravy joined
[06:33] *** diana_olhovik left
[06:43] *** diana_olhovik_ joined
[06:44] *** rindolf left
[06:45] <nwc10> $

[06:49] <[ptc]> ^

[07:01] <RabidGravy> üòà

[07:03] <RabidGravy> üïó

[07:04] *** xfix joined
[07:04] *** xfix left
[07:04] *** xfix joined
[07:19] *** lolisa is now known as cute_handsome_lo

[07:20] *** cute_handsome_lo is now known as verycute_lolisa

[07:20] *** verycute_lolisa is now known as lolisa

[07:21] <itz_> http://pl6anet.org/stats/

[07:21] *** labster left
[07:27] *** labster joined
[07:44] *** alini joined
[07:55] *** eli-se joined
[07:56] *** rurban joined
[08:14] *** darutoko joined
[08:15] *** Rounin joined
[08:17] *** wtw joined
[08:19] *** Ven joined
[08:30] *** Ven left
[08:30] *** RabidGravy left
[08:35] *** diana_olhovik_ left
[08:42] *** espadrine joined
[08:44] *** lolisa left
[08:45] *** Foxcool_ joined
[08:45] *** domidumont joined
[08:47] *** Ven joined
[08:49] *** domidumont left
[08:50] *** domidumont joined
[09:00] <moritz> itz_: thanks for sharing them

[09:00] <moritz> http://www.p6c.org/stats/ exists too

[09:03] *** gfldex joined
[09:10] *** rindolf joined
[09:11] *** spider-mario joined
[09:18] *** Alina-malina joined
[09:18] *** Alina-malina left
[09:18] *** Alina-malina joined
[09:22] *** raiph joined
[09:25] *** eli-se_ joined
[09:26] *** eli-se left
[09:30] <raiph> .tell lizmat i've added a question to https://gist.github.com/lizmat/c7f53fa206da900c2b42

[09:30] <yoleaux> raiph: I'll pass your message to lizmat.

[09:31] <lizmat> good *, #perl6!

[09:31] <yoleaux> 09:30Z <raiph> lizmat: i've added a question to https://gist.github.com/lizmat/c7f53fa206da900c2b42

[09:31] <raiph> hi lizmat :)

[09:32] <lizmat> raiph: the whole idea of auth/version in the use statement, is that as a developer, you can "freeze" the version of a module that you want to use in a given scope

[09:32] <lizmat> provided this auth/version of that module are *not* removed from a system

[09:33] <lizmat> you can be assured that everything will continue to work, regardless of other versions of that module being installed on a system

[09:34] <lizmat> if an upgrade of an app changes the auth/version of a module being used, then that auth/version of the module should also be installed

[09:35] <lizmat> for apps, you could e.g. force the use of a single CUR object in @*INC, which has all of the needed modules installed aka local::lib

[09:39] <raiph> lizmat: thanks, will read later, gotta run

[09:42] *** fhelmberger joined
[09:45] *** spider-mario left
[09:47] *** fhelmberger left
[09:47] *** ir2ivps4 left
[09:52] <dalek> nqp: a757bfa | jnthn++ | tools/build/MOAR_REVISION:

[09:52] <dalek> nqp: Get a MoarVM with string heap opt.

[09:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a757bfa787

[09:52] <dalek> nqp: 18ece1f | jnthn++ | src/vm/moar/QAST/QASTCompilerMAST.nqp:

[09:52] <dalek> nqp: Avoid generating string heap QAST on MoarVM.

[09:52] <dalek> nqp: 

[09:52] <dalek> nqp: See MoarVM commit 0acd74b for details on what enables this change.

[09:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/18ece1f192

[09:54] *** eli-se_ left
[09:57] *** Ven left
[10:03] *** Alina-malina left
[10:05] *** Alina-malina joined
[10:06] <dalek> rakudo/nom: f188351 | lizmat++ | src/core/List.pm:

[10:06] <dalek> rakudo/nom: Make all List.pick candidates use the same logic

[10:06] <dalek> rakudo/nom: 

[10:06] <dalek> rakudo/nom: There is no performance gain to be seen from using an nqp op for creating a

[10:06] <dalek> rakudo/nom: random number.  So revert to using higher language constructs that may be

[10:06] <dalek> rakudo/nom: better optimised / optimizable.

[10:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f1883518cb

[10:18] *** Ven joined
[10:23] *** spider-mario joined
[10:24] *** jack_rabbit left
[10:25] *** telex left
[10:26] *** telex joined
[10:27] *** Alina-malina left
[10:29] *** rindolf left
[10:34] <lizmat> m: my @a := Bool.roll(*); say @a.infinite  # just checking

[10:34] <camelia> rakudo-moar f18835: OUTPUT¬´False‚ê§¬ª

[10:36] <dalek> rakudo/nom: 95411f5 | lizmat++ | src/core/List.pm:

[10:36] <dalek> rakudo/nom: Some List.roll improvements

[10:36] <dalek> rakudo/nom: 

[10:36] <dalek> rakudo/nom: General performance improved and seperate List.roll(*) candidate that returns

[10:36] <dalek> rakudo/nom: a list that knows it's infinite.

[10:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/95411f54d4

[10:36] <lizmat> $ 6 'my @a := Bool.roll(*); say @a.infinite'

[10:36] <lizmat> True

[10:37] <lizmat> .tell b2gills Bool.roll(*) should now know it's infinite, as any List.roll(*) now does

[10:37] <yoleaux> lizmat: I'll pass your message to b2gills.

[10:39] *** raiph left
[10:40] *** eli-se joined
[10:42] *** kaare__ left
[10:44] <dalek> roast: 70d8514 | lizmat++ | S32-list/roll.t:

[10:44] <dalek> roast: Add check for infiniteness of List.roll(*)

[10:44] <dalek> roast: review: https://github.com/perl6/roast/commit/70d8514f01

[10:46] *** rindolf joined
[10:48] *** diana_olhovik_ joined
[10:50] *** spider-mario left
[10:50] <lizmat> sometimes I think we need a way to execute some code, just after the setting is loaded, without looking at @*INC order

[10:51] <lizmat> especially in the context of apps

[10:51] <lizmat> a piece of code that could load custom CompUnitRepo objects, for instance

[10:52] *** cschwenz joined
[10:54] <lizmat> something like -r execute_me_first.pl

[10:58] *** kaare__ joined
[11:00] *** cschwenz left
[11:01] <jnthn> lizmat: Anything you use gets run right then

[11:01] <lizmat> yes, but use follows the (standard) @*INC, which is something you may not want

[11:02] <jnthn> Well, can write a BEGIN block

[11:02] <lizmat> especially in the context of a self-contained app with all its requirements wrapped in a single tar ball

[11:02] *** rurban left
[11:02] <jnthn> Or alternatively, perhaps a custom setting is what you're after

[11:02] <lizmat> BEGIN block ?

[11:02] <lizmat> well, possibly, yes

[11:03] <jnthn> m: BEGIN { say "I run really soon after the setting is loaded" }

[11:03] <camelia> rakudo-moar 95411f: OUTPUT¬´I run really soon after the setting is loaded‚ê§¬ª

[11:03] <lizmat> jnthn: but where would you put that BEGIN block?  

[11:04] <jnthn> lizmat: If you're in the context of an app, then you have a single script that it will start off in, so just at the top of that?

[11:05] <lizmat> hmm..  duh

[11:05] <lizmat> ok, scratch the -r idea  :-)

[11:06] <jnthn> I think between than and a custom setting we have two ways to do what you're wanting. :)

[11:06] <jnthn> *that

[11:06] <lizmat> yup, thanks for waking me up  :-)

[11:10] *** Ven left
[11:20] *** rindolf left
[11:34] *** raiph joined
[11:35] *** rindolf joined
[11:41] *** virtualsue joined
[11:43] *** Ven joined
[11:47] *** konsolebox joined
[11:50] *** Ven left
[11:51] *** PZt left
[11:51] <[Tux]> what was the workaround for Inline::Perl5 atm?

[11:51] <yoleaux> 1 May 2015 09:09Z <quester> [Tux]: I have just posted a fairly awkward workaround if you are in a hurry, but it looks like jnthn and lizmat are looking into at least one of the underlying problems, so there is light at the end of the tunnel.

[11:52] <[Tux]> or are we near the end of that tunnel?

[11:53] <lizmat> line 743: -    for Any.^methods>>.gist -> $name {

[11:53] <lizmat> +    for Any.^methods>>.name -> $name {

[11:53] <[Tux]> in panda or Inline::Perl5?

[11:53] <lizmat> Inline/Perl5.pm6

[11:53] * jnthn is currently pondering a couple of possible solutions to the general issue that tickled this one.

[11:54] <[Tux]> ok, I'll wait for that then. 

[11:54] * [Tux] continues on the docs

[11:54] <[Tux]>  RT#124191  RT#124298 still fail too :(

[11:54] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124191

[12:05] *** raiph left
[12:13] <literal> why is there no 2015.04 in http://rakudo.org/downloads/star/ ?

[12:13] <lizmat> 1. nobody made it (yet)

[12:14] *** Ven joined
[12:14] <lizmat> 2. there is a severe performance regression when there are many modules installed

[12:14] <literal> I see

[12:14] <lizmat> this is in the process of being fixed

[12:14] <jnthn> Which probably means that nobody will make it

[12:14] <jnthn> The point of R* is to provide some greater amount of stability.

[12:15] <[Tux]> (writing doc)++; # find more bugs :)

[12:20] *** rurban joined
[12:20] *** Ven left
[12:20] *** diana_olhovik_ left
[12:20] *** domidumont left
[12:23] *** diana_olhovik_ joined
[12:28] *** virtualsue left
[12:38] *** Alina-malina joined
[12:45] <lizmat> .tell FROGGS is there a reason we add $home/.perl6/$ver/lib as a CURLF *and* as a CURLI ?

[12:45] <yoleaux> lizmat: I'll pass your message to FROGGS.

[12:46] <lizmat> .tell FROGGS feels to me like adding it as a CURLI would be sufficient ?  You don't usually use such a dir for development ?

[12:46] <yoleaux> lizmat: I'll pass your message to FROGGS.

[12:50] <dalek> doc: 565c4d2 | moritz++ | lib/Language/syntax.pod:

[12:50] <dalek> doc: Document array literals

[12:50] <dalek> doc: review: https://github.com/perl6/doc/commit/565c4d2f05

[12:50] *** aborazmeh joined
[12:50] *** aborazmeh left
[12:50] *** aborazmeh joined
[12:57] *** aborazmeh left
[12:57] *** PZt joined
[13:08] * lizmat got startup time down to .16 from .22 (without any modules installed)

[13:08] <lizmat> too bad precomp is now broken  :-(

[13:09] *** raiph joined
[13:09] * lizmat will look at it again after some cycling&

[13:11] *** xfix left
[13:17] *** vendethiel joined
[13:17] <moritz> "it's easy to get the wrong answer in 0.16 seconds" :-)

[13:17] <moritz> lizmat++ # performance hacking

[13:23] <jnthn> I guess that's before we get the improvements from the MoarVM/NQP side too, since I didn't bump NQP_REVISION yet :)

[13:24] <timotimo> cool; is that from something yet unpushed, lizmat?

[13:25] <jnthn> timotimo: I didn't see any push relating to that, so I'd guess yes :)

[13:25] <lizmat> yes, unpushable atm

[13:25] <timotimo> ah

[13:25] <lizmat> and yes, before jnthn's improvements

[13:25] <timotimo> because it breaks precomp, i suppose

[13:25] <lizmat> yup

[13:25] <timotimo> precomp is such a fragile beast

[13:26] <lizmat> need to make sure it doesn't break panda

[13:26] <timotimo> i wonder if i should try to get JSON::Fast into rakudo for the module database loading

[13:26] <lizmat> anyway, fist some fresh air  &

[13:26] <jnthn> Well, if you're doing stuff at startup that interacts with module loading, you can't code it in ignorance of pre-comp :)

[13:26] <lizmat> jnthn: indeed

[13:26] <lizmat> :-)

[13:27] <jnthn> timotimo: I'm rather go with some non-JSON solution...

[13:27] <timotimo> last time i thought about that (or rather: was asked to) i thought froggs' work to use MVM's serialization instead was about to finish

[13:27] <jnthn> Like FROGGS++ was working on

[13:27] <timotimo> yes

[13:27] <jnthn> Yeah, he ran into some difficulties. I *think* I may have figured out an answer to that though.

[13:27] <timotimo> i find it a little bit uncool that the database would end up not readable by anything but moarvm + some nqp code

[13:28] <timotimo> but the json slowness isn't something i'd like to keep around either

[13:28] <lizmat> https://gist.github.com/lizmat/de168f78dc687bf6c841   # for the impatient

[13:28] <timotimo> cool! :)

[13:28] <jnthn> Well, it's only a cache, and we can always make something to dump it

[13:29] * jnthn thinks he'll take a walk while the weather is decent

[13:29] <jnthn> bbiab

[13:29] <lizmat> really afk&

[13:29] <timotimo> good walk, you two!

[13:29] <timotimo> or ... maybe liz is biking rather than walking?

[13:30] <timotimo> good weather to both of you! :)

[13:30] <TimToady> well, we'll be driving through Death Valley (after breakfast)

[13:30] <TimToady> yes, we have lots of water :)

[13:31] <timotimo> and replacement parts for your car?

[13:31] <timotimo> and maps and gps devices with extra battery power etc etc

[13:31] <timotimo> (i don't actually know how to death valley properly)

[13:35] *** Foxcool_ left
[13:44] *** BenGoldberg joined
[13:53] <TimToady> well, mostly don't go where other people don't go

[13:53] <timotimo> bah, real tourists know that only the places other people didn't go yet are the exciting ones! :P

[13:54] *** hobbs left
[13:54] *** vendethiel left
[13:54] *** hobbs joined
[13:55] *** RabidGravy joined
[13:59] <dalek> rakudo-star-daily: 674468e | coke++ | log/ (2 files):

[13:59] <dalek> rakudo-star-daily: today (automated commit)

[13:59] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/674468e95d

[14:01] * [Coke] is at the hackathon with rjbs & kid51 et al.

[14:02] *** vendethiel joined
[14:03] *** Alina-malina left
[14:04] <rjbs> [Coke]: https://twitter.com/rjbs/status/594502699577643009

[14:10] *** thou joined
[14:11] <mattp|spurs> rjbs: lol. go check out the 29th floor observation deck ;)

[14:16] *** thou left
[14:23] *** dolmen joined
[14:25] *** araujo joined
[14:25] <rjbs> mattp|spurs: Saw it yesterday, very nice!

[14:25] *** araujo left
[14:25] *** vendethiel left
[14:26] *** BenGoldberg left
[14:27] *** mr-foobar joined
[14:29] <[Coke]> sadly I missed it. arglebargle

[14:33] *** sjn left
[14:39] *** mj41 joined
[14:40] *** konsolebox left
[14:41] <mj41> Hi. Perl 6 Q1/2015 projects Git statistics: https://github.com/mj41/Perl6-Analytics-results/blob/master/slides/mj41-brnopm-prev2.pdf

[14:42] <eli-se> m: Set("FOO(BAR", "BAZ)QUX") === Set("BAZ)QUX Str|FOO(BAR")

[14:42] <camelia> rakudo-moar 95411f: ( no output )

[14:42] <eli-se> m: say Set("FOO(BAR", "BAZ)QUX") === Set("BAZ)QUX Str|FOO(BAR")

[14:42] <camelia> rakudo-moar 95411f: OUTPUT¬´True‚ê§¬ª

[14:42] <eli-se> epic fail

[14:44] <jnthn> Patches welcome.

[14:46] *** liztormato joined
[14:48] <liztormato> eli-se: known issue. We need a better way to compare two ObjAt objects without stringification

[14:48] <liztormato> There are todo tests for this, Afaik

[14:51] *** araujo joined
[14:54] *** [TuxCM] joined
[14:54] *** eli-se left
[14:55] <[TuxCM]> m: sub xx (*%h) { .say for keys %h; }; xx(foo => 0)

[14:55] <camelia> rakudo-moar 95411f: OUTPUT¬´foo‚ê§¬ª

[14:55] <[TuxCM]> m: sub xx (*%h) { .say for keys %h; }; my Str $t = "foo"; xx($t => 0)

[14:55] <camelia> rakudo-moar 95411f: OUTPUT¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub xx at /tmp/rHfDWrkOZd:1‚ê§  in block <unit> at /tmp/rHfDWrkOZd:1‚ê§‚ê§¬ª

[14:55] <[TuxCM]> isn't that allowed?

[14:56] *** zakharyas joined
[14:58] <liztormato> $t => 0 is passed as a positional Pair

[14:58] <liztormato> foo => 0 as a named param

[14:59] <[TuxCM]> sounds like there is no easy escape here

[14:59] <liztormato> Personally, I don't like this difference

[15:00] <[TuxCM]> fwiw "$t" => 0 behaves the same

[15:00] <jnthn> m: sub xx (*%h) { .say for keys %h; }; my Str $t = "foo"; xx(|($t => 0))

[15:00] <camelia> rakudo-moar 95411f: OUTPUT¬´foo‚ê§¬ª

[15:00] <[TuxCM]> hmm, doable for the tests

[15:02] <[TuxCM]> Arg-flattening | is only valid in an argument list

[15:03] <[TuxCM]> I did xx(foo => 0, |($t => 1))

[15:03] <[TuxCM]> bug?

[15:03] <jnthn> m: sub xx (*%h) { .say for keys %h; }; my Str $t = "foo"; xx(bar => 0, |($t => 1));

[15:03] <camelia> rakudo-moar 95411f: OUTPUT¬´bar‚ê§foo‚ê§¬ª

[15:03] <jnthn> m: sub xx (*%h) { .say for keys %h; }; my Str $t = "foo"; xx(foo => 0, |($t => 1));

[15:03] <camelia> rakudo-moar 95411f: OUTPUT¬´foo‚ê§¬ª

[15:04] <jnthn> Looks fine to me?

[15:04] *** Alina-malina joined
[15:04] <timotimo> ohai jnthn 

[15:04] <[TuxCM]> for (< after_in on_in before_out >) -> $t {

[15:04] <[TuxCM]>     is_deeply (csv (in => $file,                |($t => &Empty)  ), @aoa, "callback $t on AOA with empty sub");

[15:04] <[TuxCM]>     is_deeply (csv (in => $file, callbacks => { |($t => &Empty) }), @aoa, "callback $t on AOA with empty sub");

[15:04] <[TuxCM]>     }

[15:05] <jnthn> { ... } is a hash composer, not an argument list

[15:05] <[TuxCM]> that is where I got that error

[15:05] <jnthn> And you don't need |(...) there

[15:05] <jnthn> m: my $t = 'foo'; say { $t => 1 }.perl

[15:05] <camelia> rakudo-moar 95411f: OUTPUT¬´{:foo(1)}‚ê§¬ª

[15:07] <[TuxCM]> got it. jnthn++

[15:10] *** Foxcool_ joined
[15:13] <[Coke]> what rule in the grammar handles strings that interpolate?

[15:13] *** dolmen left
[15:13] *** liztormato left
[15:15] *** liztormato joined
[15:17] <jnthn> [Coke]: Look for role qq

[15:18] *** liztormato left
[15:19] *** zakharyas left
[15:20] <jdv79> anyone else getting failures in t/01-sanity/54-use-lib.t?

[15:22] *** prammer left
[15:23] <[TuxCM]> I cannot imagine there is not a better way to write this: @cb = keys %$b Z values %$b;

[15:23] *** liztormato joined
[15:23] <jnthn> $b.pairs ?

[15:23] <jnthn> Or $b.kv ?

[15:23] *** Rounin left
[15:23] <liztormato> jdv79: i probable broke that

[15:24] <jnthn> jdv79: I see it too but figured it's ongoing liztormato++ work :)

[15:24] <liztormato> Yeah, that. ÓêÖ

[15:25] <jdv79> ok

[15:25] <[TuxCM]> $b.kv returns *all* keys and values? sounds likwhat I was looking for

[15:26] <jdv79> should i open a ticket or not then?

[15:26] <jnthn> [TuxCM]: Yes

[15:26] <timotimo> i wonder if the precedence is what [TuxCM] expects on keys %$b Z values %$b

[15:26] <liztormato> Jdv79: No need. Will fix when I'm home again

[15:32] <jdv79> thanks ^H

[15:40] <hoelzro> morning #perl6!

[15:43] * ruoso_ spending some more time on https://github.com/ruoso/Grammar-EBNF

[15:44] *** ruoso_ is now known as ruoso

[15:45] *** Ven joined
[15:45] <Ven> .u ¬∞

[15:45] <yoleaux> U+00B0 DEGREE SIGN [So] (¬∞)

[15:45] <DrForr> ruoso: You might want to check out https://github.com/drforr/perl6-ANTLR4 - It's got a subset that's almost EBNF.

[15:47] <ruoso> Right, that's a slightly different thing... I'm not just trying to parse EBNF, I want to allow you to use EBNF grammars as native Perl6 grammars... https://github.com/ruoso/Grammar-EBNF/blob/master/t/005_alternation.t

[15:48] <ruoso> but I may have misread the antlr module

[15:48] * ruoso taking a deeper look

[15:50] <dalek> roast/date-time-slices-tz: 30171c1 | (Chris Jepeway)++ | S32-temporal/DateTime.t:

[15:50] <dalek> roast/date-time-slices-tz: added tests that &.formatter is preserved by .later() -- b2gills++

[15:51] <dalek> roast/date-time-slices-tz: review: https://github.com/perl6/roast/commit/30171c14c3

[15:51] <ruoso> yeah, what I'm trying to do is taking the next step from what perl6-ANTLR4 is doing... I chose EBNF because it is a pretty simplistic syntax

[15:52] <DrForr> Well, I'm intent on taking the next step as well, it's just that I wanted to parse a decidedly non-trivial syntax.

[15:53] <ruoso> ok, I actually already have the slang working, with the "ebnf-grammar" keyword (see the link to the test I posted)

[15:53] <ruoso> I now need to actually translate the EBNF matching rules into Perl6 regexes

[15:54] <ruoso> which is what https://github.com/ruoso/Grammar-EBNF/blob/master/lib/Grammar/EBNF/Actions.pm is doing

[15:55] <DrForr> Yeah, my actions file just translates to an AST, I was going to try subclassing that or walking t later to generate perl6.

[15:56] <ruoso> oh, the thing is that the slang has to do it in a single pass, afaiu

[15:56] *** liztormato left
[15:57] <DrForr> That seems to be the mantra for perl6, yeah.

[15:58] <ruoso> you could probably do something different than what I'm doing in https://github.com/ruoso/Grammar-EBNF/blob/master/lib/Grammar/EBNF.pm#L36

[16:00] *** Ven left
[16:03] *** Ven joined
[16:03] <DrForr> I'll take a look when I've gotten a few more bits of these rules into place.

[16:03] *** diana_olhovik_ left
[16:05] *** rurban left
[16:05] <ruoso> so, the issue I'm blocked on right now is that I can't find a way to dynamically create subrules... i.e.: create a regex with a named capture that should match from a regex that I have in a variable...

[16:06] <ruoso> doing <::($name)> would be close (even if not supported by rakudo right now), but it still doesn't allow me to set a name for the capture

[16:07] <ruoso> sorry, it's not a regex that I have...

[16:07] <ruoso> what I have is the name of another rule to be invoked

[16:07] <DrForr> I expect I'll be there in a few days :)

[16:07] <ruoso> I'm thinking that I may have to create a faux regex object

[16:11] <hoelzro> does FROGGS still have that ecosystem smoker around?

[16:11] <ugexe> panda smoke?

[16:12] <hoelzro> I don't remember what it was called =/

[16:13] <hoelzro> there's this: http://smoke.perl6.org/report

[16:13] <ugexe> `PANDA_SUBMIT_TESTREPORTS=1 panda smoke` probably does what you want

[16:13] <ugexe> which reports to testers.p6c.org

[16:13] <hoelzro> but I think FROGGS had a different one

[16:14] *** Ven left
[16:14] <ugexe> speaking of, panda needs to ignore things from --exclude from smoking even as dependencies. openssl is messing up all reports that come after it

[16:15] <ugexe> this is for smoke.perl6.org https://github.com/perl6-community-modules/SmokeResults

[16:17] <hoelzro> I wonder how hard it would be to configure panda to pick up on deprecation warnings (and other types of warnings)

[16:17] <ugexe> it wouldnt be too difficult

[16:17] <timotimo> huh. something's wrong with my computer ... things taking ages to execute

[16:17] <timotimo> but cpu usage is way low

[16:18] <ugexe> thrashing?

[16:18] *** dwarring left
[16:18] <timotimo> shouldn't be

[16:18] <timotimo> other things are running very responsile

[16:18] <timotimo> responsively

[16:19] <timotimo> things that have already run before

[16:19] <timotimo> could be a hard drive problem

[16:19] <timotimo> that would be very unhappyning

[16:19] *** [TuxCM] left
[16:19] <timotimo> unhappyfiying

[16:19] *** konsolebox joined
[16:20] *** konsolebox left
[16:20] <ugexe> much nicer these days though with how easy it is to just clone a ssd and have it work

[16:21] *** konsolebox joined
[16:21] <timotimo> hm?

[16:21] *** konsolebox left
[16:22] <timotimo> i'll try to bring the system down and up again, that should shake loose whatever got stuck

[16:24] <ugexe> is monkey typing considered poor practice?

[16:25] <arnsholt> Definitely a tool of last resort

[16:25] <timotimo> yeah; also, method caches don't properly get invalidated for classes that derive from what you've augmented

[16:26] *** diana_olhovik_ joined
[16:31] *** [TuxCM] joined
[16:32] <[Coke]> oooh, incoming.

[16:37] <dalek> roast: 427f1dc | (Xinyuan Wang)++ | S09-typed-arrays/arrays.t:

[16:37] <dalek> roast: RT120506, nypm hackathon,skip and document failed array type, review Will

[16:37] <dalek> roast: review: https://github.com/perl6/roast/commit/427f1dc8c6

[16:38] *** konsolebox joined
[16:40] <b2gills> lizmat: you broke *.roll(Inf) with that change

[16:40] <yoleaux> 10:37Z <lizmat> b2gills: Bool.roll(*) should now know it's infinite, as any List.roll(*) now does

[16:40] <timotimo> that ... exists?

[16:40] <b2gills> m: say Bool.roll(Inf)

[16:40] <camelia> rakudo-moar 95411f: OUTPUT¬´This type cannot unbox to a native integer‚ê§  in block <unit> at /tmp/f1gCg1ojLJ:1‚ê§‚ê§¬ª

[16:40] <b2gills> star-m: say Bool.roll(Inf)

[16:40] <camelia> star-m 2015.03: OUTPUT¬´True True True False False False True True True True True True False False False False True True True True False False False False False True False True False False True False True False True False False True False True True True True False True True True Fals‚Ä¶¬ª

[16:48] <ruoso> can rule aliasing use a dynamic name? /$<$name>=$faux_regex/ creates a literal '$name' capture alias instead of interpolating the name...

[16:51] <b2gills> m: my @a = gather while !$++ { take 1 } :infinite; say @a.infinite; # I guess there is a way to mark a gather loop as infinite

[16:51] <camelia> rakudo-moar 95411f: OUTPUT¬´True‚ê§¬ª

[16:51] <b2gills> m: my @a = gather while !$++ { take 1 } :infinite; say @a; say @a.infinite; # I guess there is a way to mark a gather loop as infinite

[16:51] <camelia> rakudo-moar 95411f: OUTPUT¬´1‚ê§False‚ê§¬ª

[16:54] *** sjn joined
[16:56] *** domidumont joined
[16:57] *** rurban joined
[16:58] <hoelzro> you can *only* provide parameters to a role, right? you can't do class PriorityQueue[::T]?

[16:59] <[Coke]> Xinyuan found that one of the closed tests is broken again; I reopened the ticket, she refudged it.

[17:00] <jnthn> hoelzro: Correct

[17:00] <hoelzro> jnthn: ok, thanks

[17:04] *** raiph left
[17:16] <[Coke]> I have a user who has windows here who is trying to build strawberry perl.

[17:17] *** cognominal joined
[17:17] <jdv79> that's me.  lunch though &

[17:18] <lizmat> b2gills: looking at it

[17:18] <lizmat> apparently, there is no spectest for it  :-(

[17:18] *** raiph joined
[17:21] <[Coke]> OHAI

[17:21] <[Coke]> so can jdv79 use strawberry, or do we need to have him get the free MS toolsuite.

[17:25] <dalek> rakudo/nom: 179193a | lizmat++ | src/core/List.pm:

[17:25] <dalek> rakudo/nom: Fix List.roll(Inf), spotted by b2gills++

[17:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/179193ac3f

[17:26] *** Alina-malina left
[17:26] <ruoso> yay... my subrule test now passes... used EVAL to compose the dynamic subrule aliasing... https://github.com/ruoso/Grammar-EBNF/blob/master/t/006_subrule.t now passes

[17:31] <lizmat> ruoso: at the PQAH, tadzik worked on dynamically adding rules for his BNF parsing module

[17:31] <lizmat> perhaps that can be an inspiration not to have to use EVAL ?

[17:32] <dalek> rakudo/nom: 56cae10 | lizmat++ | t/01-sanity/54-use-lib.t:

[17:32] <dalek> rakudo/nom: Fix use lib sanity testing, spotted by jdv79++

[17:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/56cae10e71

[17:34] *** hobbs left
[17:34] <lizmat> ruoso: https://github.com/tadzik/Grammar-BNF

[17:36] *** thou joined
[17:38] *** hobbs joined
[17:41] <colomon> [Coke]: I tried to build rakudo-moar with Strawberry a few weeks ago, it failed.  :(

[17:41] <colomon> afk # son has requested I read to him

[17:43] <jdv79> i hoped it would have found mingw through strawberry or something but that didn't happen

[17:43] *** Alina-malina joined
[17:45] *** rindolf left
[17:46] *** thou left
[17:52] <jdv79> at least this hackathon has brought to my attention that i need to figure out the linux wireless on this box.  i assumed there would be wired which works fine...

[17:54] *** diana_olhovik_ left
[17:55] <timotimo> the only networking i've had to figure out in the last years was the one on my desktop when i installed windows and wired wasn't working

[17:55] <timotimo> normal folks are used to nothing working on windows upon a fresh install, though. it just took me by surprise

[17:55] *** bowtie joined
[17:55] *** bowtie is now known as Guest90792

[17:57] *** cognominal left
[17:57] <timotimo> that reminds me of the article written by a tesla driver about trying out an internal combustion engine car as if it were the first time they had heard about them

[17:58] <timotimo> with things like "turns out no car manufacturer came up with the idea of building gas stations where you can fill up your car for free"

[17:58] * lizmat is looking forward to the time that a car with an internal combustion engine would be as strange as a steam-driven car is now

[18:00] * moritz is looking forward to the time when human-driven cars would be as strange as a steam-driven car is now

[18:01] <arnsholt> I think the latter is going to happen before the former

[18:01] <arnsholt> And I'm not overly optimistic about the latter, TBH =/

[18:01] <ruoso> lizmat: ah, interesting, we're implementing literally the same thing... 

[18:02] <lizmat> you mean you and tadzik?

[18:02] <ruoso> yeah

[18:02] <lizmat> yeah, felt like it

[18:02] <lizmat> sort of saw the problems you had: was sitting next to tadzik when he had the same issues :-)

[18:02] <timotimo> hehe.

[18:05] <lizmat> m: sub a(Str:D $a?) {}; a  # should probably be caught at compile time

[18:05] <camelia> rakudo-moar 56cae1: OUTPUT¬´Parameter '$a' requires a 'Str' instance, but a type object was passed.  Did you forget a .new?‚ê§  in sub a at /tmp/BOyA8xuqK0:1‚ê§  in block <unit> at /tmp/BOyA8xuqK0:1‚ê§‚ê§¬ª

[18:09] <timotimo> right, a :D and a ? don't mix very well

[18:09] <lizmat> catchable at compile time, I would think

[18:10] <jdv79> so, how to ouput pod?  perl6 --doc on Test.pm doesn't seem to be happy.

[18:10] <ruoso> although a^H^H	aa

[18:10] <ruoso> [A[B[C[B[C[A[D

[18:10] *** vendethiel joined
[18:11] <timotimo> yeah, all the necessary info should be available when you build the signature from the %signature_info hash or what it's called

[18:11] <rjbs> So, I had a program that used to work in Rakudo, and stopped...

[18:11] <rjbs> [Coke]++ helped me find the cause.  I had a sub called "byte" which is now a reserved word.

[18:12] <rjbs> But the error!  Oh boy!

[18:12] <rjbs> m: sub byte($i) { 1 } byte(5)

[18:12] <camelia> rakudo-moar 56cae1: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/Keeei239hl‚ê§Strange text after block (missing semicolon or comma?)‚ê§at /tmp/Keeei239hl:1‚ê§------> 3sub byte($i) { 1 }7‚èè5 byte(5)‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§      ‚Ä¶¬ª

[18:12] <rjbs> Okay, well, that's going to be messing up something... but the error I get is not when defining sub byte, but when I call it.  If I call byte(1) I get:

[18:12] <rjbs> Cannot invoke this object (REPR: P6int, cs = 0)

[18:12] * ruoso sheesh... things that happen when you have too much delay in your ssh connection...

[18:13] <rjbs> m: sub byte($i) { 1 } ; byte(5)

[18:13] <camelia> rakudo-moar 56cae1: OUTPUT¬´Cannot invoke this object (REPR: P6int, cs = 0)‚ê§  in block <unit> at /tmp/eHWAIGQiwS:1‚ê§‚ê§¬ª

[18:14] <lizmat> m: int(5)   # any native type does that  :-

[18:14] <camelia> rakudo-moar 56cae1: OUTPUT¬´Cannot invoke this object (REPR: P6int, cs = 0)‚ê§  in block <unit> at /tmp/4cjukBgmEq:1‚ê§‚ê§¬ª

[18:14] <[Coke]> m: Int(2);

[18:14] <camelia> rakudo-moar 56cae1: ( no output )

[18:14] <lizmat> this happens somewhere deep in the nqp bowels

[18:14] <[Coke]> m: Int(2).say;

[18:14] <camelia> rakudo-moar 56cae1: OUTPUT¬´2‚ê§¬ª

[18:15] <lizmat> [Coke]: yes, only the native types

[18:15] <[Coke]> huh. I didn't know that worked.

[18:15] <lizmat> rjbs: you want to rakudobug it ?

[18:16] <lizmat> [Coke]: I think it's like 2.Int

[18:16] <[Coke]> rjbs: *please* rakudobug it and then come sit at the p6 table. :)

[18:16] <lizmat> m: say Int(3.14)   # same as 3.14.Int

[18:16] <camelia> rakudo-moar 56cae1: OUTPUT¬´3‚ê§¬ª

[18:17] <rjbs> Okay!

[18:20] <lizmat> m: sub Int($a) { say "foo" }; say Int(3.14)   # seems we need to check for class named subs

[18:20] <camelia> rakudo-moar 56cae1: OUTPUT¬´3‚ê§¬ª

[18:21] <lizmat> rjbs: we usually copy-n-paste from the irc log  :-)

[18:23] *** pecastro joined
[18:23] <rjbs> Wait, how do I rakudobug?

[18:24] <moritz> mailto:rakudobug@.perl.org

[18:24] <moritz> s/\.//

[18:25] <rjbs> Oh, that's easy. :)

[18:27] <lizmat> yes, we got many of them  :-)

[18:29] <rjbs> Done, thanks!

[18:30] <lizmat> thank you!

[18:31] <nwc10> rjbs: it's the perl6 queue on rt.cpan.org IIRC

[18:31] <nwc10> fingers

[18:32] <nwc10> rt.perl.org

[18:33] <rjbs> :)

[18:34] *** vendethiel left
[18:39] *** hahainte1net is now known as hahainternet

[18:43] * rjbs was assigned #124442.

[18:43] <literal> w/W 4

[18:44] *** vendethiel joined
[18:44] *** rindolf joined
[18:45] <lizmat> rjbs++

[18:50] <lizmat> m: sub a() { my %h = a => 42; (%h,42) }; my (%a,$b) = a   # feels like a rakudobug to me

[18:50] <camelia> rakudo-moar 56cae1: OUTPUT¬´Odd number of elements found where hash initializer expected‚ê§  in block <unit> at /tmp/LH3NuEitbT:1‚ê§‚ê§¬ª

[18:51] <lizmat> m: sub a() { my %h = a => 42; (666,%h) }; my ($a,%b) = a; say %b.perl   # this works

[18:51] <camelia> rakudo-moar 56cae1: OUTPUT¬´{:a(42)}<>‚ê§¬ª

[18:52] *** Alina-malina left
[19:00] *** Alina-malina joined
[19:01] *** Alina-malina left
[19:01] *** rindolf left
[19:03] <jnthn> lizmat: You need to use binding for that to work, iirc

[19:04] <lizmat> so, not a bug ?

[19:04] <lizmat> the fact that the order matters, isn't a big thing?

[19:06] <jnthn> lizmat: I *think* this falls out of the (GLR-preserved) decision that list assignment is flattening...

[19:07] <lizmat> ok, well, I can live with the binding  :-)

[19:07] *** tinyblak left
[19:08] *** Alina-malina joined
[19:09] *** virtualsue joined
[19:14] <dalek> roast: d7a7f86 | (Justin Devuyst)++ | S02-names/symbolic-deref.t:

[19:14] <dalek> roast: Add test for RT #76400.  #NYCPerlHackathon.

[19:14] <dalek> roast: review: https://github.com/perl6/roast/commit/d7a7f86ddf

[19:14] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=76400

[19:17] *** Ven joined
[19:20] *** Ven left
[19:25] *** zakharyas joined
[19:25] <dalek> roast: 36ef6bf | lembark++ | S03-smartmatch/array-hash.t:

[19:25] <dalek> roast: test blows up; see RT #124444

[19:25] <dalek> roast: review: https://github.com/perl6/roast/commit/36ef6bfc57

[19:25] <synbot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124444

[19:27] *** vendethiel left
[19:31] *** Ven joined
[19:31] <colomon> p6 table?  is there a hackathon ongoing?

[19:32] <lizmat> yeah, in NY

[19:32] <rjbs> Is there a pronunciation guide on "niecza"

[19:32] <lizmat> colomon: http://www.meetup.com/The-New-York-Perl-Meetup-Group/events/221319780/

[19:32] *** domidumont left
[19:32] <colomon> neetcha

[19:33] <colomon> lizmat++

[19:34] <colomon> who all is there?  [Coke], I take it.

[19:34] * ruoso too

[19:35] *** Ven left
[19:36] *** Ven joined
[19:38] *** Ven left
[19:38] * lizmat not, but will be at the Oslo P6 hackathon (or whatever P6 related is going to happen there)

[19:39] <labster> colomon: https://github.com/perl6-community-modules/SmokeResults/blob/master/smoke_test still gets its data from feather

[19:41] *** Ven joined
[19:41] <Ven> is "¬ª" supposed to be deep?

[19:42] <jnthn> Think so; I think "how deep" is related to the nodal stuff TimToady++ has been doing of late

[19:44] *** fhelmberger joined
[19:46] *** vendethiel joined
[19:48] <jdv79> is perl6 --doc supposed to work?

[19:48] *** fhelmberger left
[19:49] <jnthn> Believe so

[19:49] <Ven> uh-uhm. Is `is nodal` speced?

[19:50] <lizmat> S03:4289

[19:50] <synbot6> Link: http://design.perl6.org/S03.html#line_4289

[19:50] <jnthn> If it is, prolly in S03

[19:50] <jnthn> ah, lizmat++ is faster :)

[19:51] <ruoso> r: my $a = '23333'; $b = /2(3*)/; say ($a ~~ /^$b$/).gist

[19:51] <camelia> rakudo-{moar,jvm} 56cae1: OUTPUT¬´5===SORRY!5=== Error while compiling /tmp/tmpfile‚ê§Variable '$b' is not declared‚ê§at /tmp/tmpfile:1‚ê§------> 3my $a = '23333'; $b7‚èè5 = /2(3*)/; say ($a ~~ /^$b$/).gist‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[19:52] <ruoso> r: my $a = '23333'; my $b = /2(3*)/; say ($a ~~ /^$b$/).gist

[19:52] <camelia> rakudo-{moar,jvm} 56cae1: OUTPUT¬´ÔΩ¢23333ÔΩ£‚ê§¬ª

[19:52] <ruoso> shouldn't that have the '333' captured?

[19:53] <jnthn> You'll have to do a little more to get that

[19:53] <jnthn> m: my $a = '23333'; my $b = /2(3*)/; say ($a ~~ /^$<b>=$b$/).gist

[19:53] <camelia> rakudo-moar 56cae1: OUTPUT¬´ÔΩ¢23333ÔΩ£‚ê§ b => ÔΩ¢23333ÔΩ£‚ê§  0 => ÔΩ¢3333ÔΩ£‚ê§¬ª

[19:54] <mj41> colors and a few more issues fixed ... so enjoy 15 years of Perl 6 history on GoodData dashboards .... https://github.com/mj41/Perl6-Analytics-results/blob/master/slides/mj41-brnopm-prev2.pdf

[19:54] <ruoso> hmm... is this on purpose or a bug?

[19:55] <rjbs> [Coke]: as requested https://github.com/rjbs/rjbs-vim-dots

[19:55] <jnthn> ruoso: By design.

[19:56] <ruoso> is there a way to force the capture to come up without introducing another named capture?

[19:56] <jnthn> No

[19:56] <jnthn> Well, not that I know of.

[19:56] <ruoso> is that for each level of indirection? or does it flatten it

[19:57] * ruoso building regexes dynamically in a Actions class

[19:58] *** al2o3-cr left
[19:58] <lizmat> m: my Nil %h = a => Any   # cute

[19:58] <camelia> rakudo-moar 56cae1: OUTPUT¬´Type check failed in binding $x; expected 'Any' but got 'Any'‚ê§  in block <unit> at /tmp/of6KDfMv2C:1‚ê§‚ê§¬ª

[19:59] *** Ven left
[19:59] *** yqt joined
[19:59] *** diana_olhovik_ joined
[19:59] <ruoso> I guess I do see why that is the case, in order to make the numbered captures to be more predictable....

[19:59] *** Ven joined
[20:00] <jnthn> Yeah, the capture naming is syntactic.

[20:00] <jnthn> And regexes are first-class code objects that are compiled

[20:00] <jnthn> Not strings

[20:01] <jnthn> So by the time we see the interpolation it's too late.

[20:01] <[Coke]> (here), me, rjbs, jdv79, Xinyuan Wang (new roast committer) , lembark (new roast committer)

[20:01] <ruoso> well, but named captures do propagate

[20:01] <[Coke]> kid51 is also here, but not p6ing

[20:01] <[Coke]> also the perltricks guy.

[20:01] <[Coke]> OH and ruoso!

[20:02] *** rurban1 joined
[20:02] <[Coke]> so, quite a few people at the p6 table. maybe 1/6 of total.

[20:03] *** prammer joined
[20:04] <lizmat> cool!

[20:05] <ruoso> hmm... maybe I'm wrong, named captures don't actually propagate...

[20:05] *** Ven left
[20:06] <colomon> [Coke], that‚Äôs great!

[20:06] <ruoso> I guess my approach of composing regexes calling regexes is not actually workable

[20:06] *** rurban1 left
[20:06] <rjbs> How can I give an attribute a lazy default?

[20:08] *** rurban1 joined
[20:09] *** Ven joined
[20:10] *** vendethiel left
[20:10] <lizmat> $:foo = "default"

[20:11] <lizmat> has $.foo = "default" I mean

[20:11] <lizmat> rjbs: ^^  is that what you're looking for ?

[20:12] *** rurban1 left
[20:12] *** Ven left
[20:13] *** rurban1 joined
[20:13] <rjbs> kYes, thanks!

[20:13] <rjbs> Someone has pointed out that this is in S12.  I didn't look there because instead I was looking at http://doc.perl6.org/language/classtut

[20:15] <rjbs> next question is how to get a lazy default

[20:15] <rjbs> Oh, wait.

[20:15] <rjbs> Sorry, so I thought I asked a different question earlier...

[20:15] <rjbs> I have an object that has a filename attr.  I also want a filehandle attr, but I don't want it to be opened until it's requested.

[20:15] *** airdisa joined
[20:16] <rjbs> my first guess would be has $.fh = { ... } -- trying ! :)

[20:16] <mj41> Simple html/markdown version (no PDF) --- 15 years of Perl 6 history (Git commits of 324 #perl6 projects) on screenshots from my @gooddata project http://j.mp/p6gdmd

[20:16] <rjbs> Nope, not that. :-)

[20:16] <lizmat> .tell FROGGS  re https://github.com/rakudo/rakudo/commit/d24f30015c31bf4e8fea, shouldn't it be the responsibility of panda to create a directory in which to install?

[20:16] <yoleaux> lizmat: I'll pass your message to FROGGS.

[20:17] <ruoso> are lazy blocks a thing?

[20:17] <lizmat> has $.fh = do { }; ?

[20:17] <ruoso> they were a thing a while back

[20:17] *** rurban1 left
[20:17] <ruoso> r: my $a = lazy { 42 };

[20:17] <rjbs> lizmat: Nope, that's run at init.

[20:17] <camelia> rakudo-{moar,jvm} 56cae1: ( no output )

[20:17] *** Ven joined
[20:18] <rjbs> ruoso: That also gets run when the object is created.

[20:19] <ruoso> I believe that may be a bug... something is probably evaluating the attribute eagerly in the object creation

[20:20] <jnthn> lazy is just about lists, iirc...

[20:21] <jnthn> I'd probably write an accessor method method attr() { $!attr //= ... }, or if I was doing it a lot factor that out into a trait

[20:22] <mj41> feedback and retweets https://twitter.com/mj41cz/status/594595907745751041 are welcome.

[20:22] <rjbs> I can say from writing Moose code that I want lazy default -all the time-.

[20:23] <jdv79> use Inline::Perl5 and Moo?

[20:24] <lizmat> m: class A { has $!a; method a() { say "hi" } }; A.new; A.new.a   # rjbs

[20:24] <camelia> rakudo-moar 56cae1: OUTPUT¬´hi‚ê§¬ª

[20:27] *** telex left
[20:28] *** telex joined
[20:29] *** darutoko left
[20:30] <rjbs> lizmat: Yeah, that's what I did, in the end.  I made my own method 'attr' that initialiazes $!attr.  My prediction is that I will miss having a short syntax for this, but we'll see. :)

[20:31] <lizmat> I'm not sure how to make that work, without adding a burden to auto-generated accessors

[20:31] <rjbs> If I write a module with a multi sub "foo" and it's export, should I put "is export" on every version of it or..?

[20:31] <ugexe> put it on the proto

[20:32] <ugexe> proto sub foo is export {*} # now all multi sub foo are exported

[20:32] <lizmat> I guess we could add an attribute like "is lazy" that would create an accessor with the blorst as a once block in the accessor

[20:32] <rjbs> Got it, thanks!

[20:32] <lizmat> *autogenerated accessor

[20:32] <jdv79> i also find it a little disturbing that lazy attrs are not available.

[20:32] <rjbs> lizmat: yeah, that's roughly what I would've expected to exist

[20:33] <jdv79> i did not notice that - probably cause i haven't written enough p6; yet.

[20:34] *** vendethiel joined
[20:35] *** rurban1 joined
[20:35] <jnthn> I imagine you already can implement a trait that mixes into the Attribute object and overrides accessor generation 

[20:35] *** rurban1 left
[20:36] <jnthn> So you could get a lazy accessor thing going

[20:36] <jnthn> If there's consensus around a way to do it, it could go in core some day.

[20:37] <rjbs> Cool.

[20:38] <rjbs> I'll see how much momentum I can keep up. :)

[20:38] <lizmat> jnthn: looking at just that right now

[20:39] *** rarara left
[20:39] <jnthn> lizmat: I'd help but I'm busy with the hash... :)

[20:39] <lizmat> I just wonder how I can get at the blorst inside the trait mod

[20:40] *** quester joined
[20:40] <lizmat> is that the $!auto_viv_container  ??

[20:41] <lizmat> no

[20:41] *** inokenty left
[20:41] <rjbs> Presumably if I want a required attribute, I say "has $.x = !!!" ?

[20:42] <lizmat> yup

[20:42] <rjbs> Thanks.

[20:42] <rjbs> lizmat++

[20:42] <jnthn> lizmat: .build_closure or so

[20:42] <lizmat> or "has $.x = die "must speciffy";

[20:42] <lizmat> jnthn: ok

[20:42] <jnthn> !!! "must specify" probably works too :)

[20:43] <lizmat> m: class A { has $.a = !!! }; A.new   # doesn't say much

[20:43] <camelia> rakudo-moar 56cae1: OUTPUT¬´Stub code executed‚ê§  in method  at /tmp/AhJ7veXB8j:1‚ê§  in block <unit> at /tmp/AhJ7veXB8j:1‚ê§‚ê§¬ª

[20:44] <lizmat> m: class A { has $.a = die "must specify an a" }; A.new

[20:44] <camelia> rakudo-moar 56cae1: OUTPUT¬´must specify an a‚ê§  in method  at /tmp/cWikdCBdHK:1‚ê§  in block <unit> at /tmp/cWikdCBdHK:1‚ê§‚ê§¬ª

[20:44] <jnthn> m: class A { has $.a = !!! "gimme an 'a'!" }; A.new

[20:44] <camelia> rakudo-moar 56cae1: OUTPUT¬´gimme an 'a'!‚ê§  in method  at /tmp/AMR8XLt3rD:1‚ê§  in block <unit> at /tmp/AMR8XLt3rD:1‚ê§‚ê§¬ª

[20:44] *** raiph left
[20:47] *** rurban1 joined
[20:48] *** rurban1 left
[20:53] *** Ven left
[20:55] <lizmat> $ 6 'class A { has $.a is lazy = 42 }; A.new'

[20:55] <lizmat> (Mu)

[20:55] <lizmat> seems like $!build_closure isn't set yet at trait mod time

[20:55] <jnthn> lizmat: No, but what are you doing there?

[20:56] <jnthn> lizmat: I'd mix in a role that does something at attribute compose time, I think.

[20:56] <lizmat> ok, I'll try that

[20:58] <lizmat> having a COMPOSE phaser on a class would help here  :-)

[21:00] *** Sqirrel joined
[21:02] *** rurban1 joined
[21:03] *** rurban2 joined
[21:03] *** rurban1 left
[21:04] <lizmat> ah, we seem to have a compose method in Attribute  :-)

[21:04] <jnthn> lizmat: yeah, that's the one I was thinking of :)

[21:05] *** rurban2 left
[21:05] *** mj41 left
[21:14] <lizmat> jnthn: does this seem odd to you:

[21:14] <lizmat> +multi sub trait_mod:<is>(Attribute:D \attr, :$lazy!) {

[21:14] <lizmat> +    attr := attr but role { method lazy { 42 } }

[21:14] <lizmat> +}

[21:15] <jnthn> yes.

[21:15] <jnthn> attr does role ...

[21:15] <jnthn> You need in-place mixin.

[21:16] <dalek> ecosystem: ecad53f | (Michal Jurosz)++ | META.list:

[21:16] <dalek> ecosystem: Fix dnmfarrell/Module-Minter url

[21:16] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ecad53f112

[21:16] *** vendethiel left
[21:28] *** Zoffix joined
[21:31] *** airdisa left
[21:34] *** dolmen joined
[21:42] <lizmat> jnthn: I think I got a prototype now: the only thing is that I can't stop the blorst from being executed at build time

[21:42] <lizmat> I guess I need to poke in the default BUILD to fix that, right ?

[21:46] <lizmat> rjbs: getting closer to "is lazy" attr but not tonight

[21:46] <lizmat> so good night, #perl6!, see you tomorrow

[21:46] <lizmat> &

[21:48] <jnthn> lizmat: Yeah, just set it to an empty block or so

[21:48] * jnthn should also rest

[21:48] <jnthn> 'night, #perl6

[21:53] *** zakharyas left
[21:54] *** skids joined
[22:04] *** smi1er left
[22:05] *** smi1er joined
[22:11] <skids> ruoso: Grafting captures through the /<$rx>/ barrier would indeed be nice.  But I wonder if the EVALs aren't just a perfectly fine way to do it even though instinct says "avoid EVALs".

[22:12] <timotimo> you could "use QAST::Nodes" (or something?) and nqp::getcomp('qregex') (is that actually the right one?) and build your regexes from an actual ast

[22:12] <timotimo> one day, the macros marsak is working on will give you a "prettier" way to do that

[22:13] <skids> I haven't had time to look at ANTR4, is that what DrForr is doing?

[22:13] <skids> *ANTLR4

[22:15] <skids> ruoso++ for finding the slang magic incantantions BTW.

[22:17] *** Ven joined
[22:18] <Ven> \o, #perl6

[22:19] *** dustinm` left
[22:20] *** Ven left
[22:21] *** Zoffix left
[22:22] *** dustinm` joined
[22:22] <dalek> rakudo-star-daily: 2582e4d | coke++ | log/ (2 files):

[22:22] <dalek> rakudo-star-daily: today (automated commit)

[22:22] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/2582e4d7ab

[22:22] <dalek> perl6-roast-data: 591d5fd | coke++ | / (9 files):

[22:22] <dalek> perl6-roast-data: today (automated commit)

[22:22] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/591d5fd31f

[22:22] <dalek> perl6-roast-data: 193a334 | coke++ | perl6_pass_rates.csv:

[22:22] <dalek> perl6-roast-data: today (automated commit)

[22:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/193a33491e

[22:23] *** Zoffix joined
[22:26] * [Coke] waves from Penn.

[22:26] *** Zoffix left
[22:30] <[Coke]> weird, daily runs for rakudo.moar died missing t/spectest.data

[22:32] *** quester left
[22:32] *** cognominal joined
[22:35] *** rurban left
[22:36] *** Ven joined
[22:38] *** Ven left
[22:43] *** virtualsue left
[22:46] <dalek> perl6-roast-data: 3d3e796 | coke++ | perl6_pass_rates.csv:

[22:46] <dalek> perl6-roast-data: remove weird entries with no impl.

[22:46] <dalek> perl6-roast-data: 

[22:46] <dalek> perl6-roast-data: Need to stop these from getting added.

[22:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3d3e796527

[22:52] *** virtualsue joined
[22:53] *** yqt left
[23:00] *** virtualsue left
[23:02] *** BenGoldberg joined
[23:04] *** diana_olhovik_ left
[23:06] *** vendethiel joined
[23:07] *** RabidGravy left
[23:10] *** espadrine left
[23:16] <labster> m: my int $s = 0; $s += 1/2;

[23:16] <camelia> rakudo-moar 56cae1: OUTPUT¬´This type cannot unbox to a native integer‚ê§  in block <unit> at /tmp/a7LuCSZFZ7:1‚ê§‚ê§¬ª

[23:18] <labster> m: my float $s = 0; $s += 1/2;

[23:18] <camelia> rakudo-moar 56cae1: OUTPUT¬´5===SORRY!5===‚ê§Type 'float' is not declared‚ê§at /tmp/GDXbDuj55Y:1‚ê§------> 3my float7‚èè5 $s = 0; $s += 1/2;‚ê§Malformed my‚ê§at /tmp/GDXbDuj55Y:1‚ê§------> 3my7‚èè5 float $s = 0; $s += 1/2;‚ê§‚ê§¬ª

[23:18] <timotimo> m: my num $s = 0; $s += 1/2

[23:18] <camelia> rakudo-moar 56cae1: OUTPUT¬´This type cannot unbox to a native number‚ê§  in block <unit> at /tmp/N8Ri7dXBkd:1‚ê§‚ê§¬ª

[23:18] <timotimo> m: my num $s = 0; $s += 1/2e0

[23:18] <camelia> rakudo-moar 56cae1: OUTPUT¬´This type cannot unbox to a native number‚ê§  in block <unit> at /tmp/ghAFSEfrcu:1‚ê§‚ê§¬ª

[23:18] <timotimo> m: my num $s = 0; $s += 1e0 / 2e0

[23:18] <camelia> rakudo-moar 56cae1: OUTPUT¬´This type cannot unbox to a native number‚ê§  in block <unit> at /tmp/T7GbQOpaZ1:1‚ê§‚ê§¬ª

[23:18] <labster> Rats!

[23:18] <timotimo> it really wants to be a rat, yeah

[23:19] <timotimo> with natively typed variables, you'll apparently have to be a bit more dilligent in coercing to nums?

[23:20] <labster> feels like a bug to me

[23:21] <labster> m: my num $s = 0; $s + <1/2>.Num;

[23:21] <camelia> rakudo-moar 56cae1: OUTPUT¬´This type cannot unbox to a native number‚ê§  in block <unit> at /tmp/RWv7E_TFNX:1‚ê§‚ê§¬ª

[23:23] *** raiph joined
[23:25] <timotimo> huh

[23:26] <timotimo> m: my num $s = 0;

[23:26] <camelia> rakudo-moar 56cae1: OUTPUT¬´This type cannot unbox to a native number‚ê§  in block <unit> at /tmp/4QGslqlJFf:1‚ê§‚ê§¬ª

[23:26] <timotimo> golfed :P

[23:26] <timotimo> m: my num $s = 0e0;

[23:26] <camelia> rakudo-moar 56cae1: ( no output )

[23:26] <timotimo> m: my num $s = 0e0; $s += 1/2

[23:26] <camelia> rakudo-moar 56cae1: ( no output )

[23:26] <timotimo> m: my num $s = 0e0; $s += 1/2; say $s

[23:26] <camelia> rakudo-moar 56cae1: OUTPUT¬´0.5‚ê§¬ª

[23:26] <timotimo> there you go

[23:27] *** vendethiel left
[23:30] *** dolmen left
[23:32] *** erdic left
[23:33] <labster> lol timotimo.  Is there any reason we shouldn't be able to initialize a num with an Int, though?  Seems like a multi might be needed.  Or a better error message.

[23:34] <labster> m: my int $a = 0; my num $b = $a;

[23:34] <camelia> rakudo-moar 56cae1: ( no output )

[23:35] <labster> m: my Int $a = 0; my num $b = $a;

[23:35] <camelia> rakudo-moar 56cae1: OUTPUT¬´This type cannot unbox to a native number‚ê§  in block <unit> at /tmp/_h7ytCPHLK:1‚ê§‚ê§¬ª

[23:37] *** airdisa joined
[23:42] *** kaare_ joined
[23:45] <timotimo> we've had this a few times in the past

[23:45] <timotimo> the discussion, i mean

[23:45] <timotimo> i forgot what the result was, though

[23:46] *** kaare__ left
[23:52] *** Foxcool_ left
