[00:00] <dalek> modules.perl6.org/new-db-builder: e102823 | (Zoffix Znet)++ | lib/ModulesPerl6.pm:

[00:00] <dalek> modules.perl6.org/new-db-builder: Purge old packed assets

[00:00] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/e1028231a7

[00:01] <RabidGravy> stmuk_, probably won't be going

[00:01] <RabidGravy> not enough fun

[00:02] *** ozmq left
[00:03] *** kjs_ left
[00:04] <stmuk_> plenty of perl 6 talks (including my own) and beer! that's fun! for CVO anyway

[00:04] <Quom_> I think *funds (I know I'm in the same boat)

[00:05] *** rgrau left
[00:08] *** coetry joined
[00:09] *** KingSpeedy left
[00:10] <psch> ...i count 4 Perl 6 talks, one being the keynote and another being criticism

[00:12] <masak> 'night, #perl6

[00:12] <timotimo> criticism? cool!

[00:13] <RabidGravy> I couldn't think of a valid contribution to make to be honest

[00:13] <psch> well, afair two points of that criticism where "if i inject IterationEnd into an Iterator it stops iterating" and "dispatching on Mu is weird"

[00:13] <psch> s/where/were/

[00:14] *** rurban left
[00:15] <stmuk_> that's 4 more than LPW last year

[00:15] <RabidGravy> psch, aka "it doesn't do what I want so it's all shit"

[00:16] <RabidGravy> concrete contribution is key

[00:17] *** MilkmanDan joined
[00:17] <RabidGravy> you've got to have skin in the game 

[00:19] *** Skarsnik left
[00:19] <dalek> modules.perl6.org/new-db-builder: 8f07327 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor.pm:

[00:19] <dalek> modules.perl6.org/new-db-builder: Add docs for ModulesPerl6::DbBuilder::Dist::PostProcessor baseclass

[00:19] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/8f07327138

[00:20] <stmuk_> http://act.yapc.eu/lpw2015/talks/tag/whining

[00:21] <stmuk_> :>

[00:21] <psch> ...i don't know if that's a good idea

[00:21] <psch> but then i'm keeping my community involved inside this channel so eh vOv

[00:24] *** virtualsue joined
[00:25] <RabidGravy> I don't do community anymore

[00:25] *** rigsby joined
[00:27] <RabidGravy> nighty night

[00:27] <uruwi> Any way to get the bytes of an Int (capital I)?

[00:28] <TimToady> m: say 17128347832173841723849712839478219037480932.polymod(256 xx *)

[00:28] <camelia> rakudo-moar e0a403: OUTPUT«(228 23 40 12 144 143 142 64 125 138 15 49 80 201 182 176 159 196)␤»

[00:28] *** BenGoldberg_ left
[00:29] <uruwi> Was hoping for a more efficient method, but that suffices.

[00:29] *** BenGoldberg joined
[00:30] <TimToady> nap &

[00:30] *** rigsby left
[00:30] *** csd_ joined
[00:30] *** Psyche^_ joined
[00:31] <csd_> This page seems to have out of date info on it: http://doc.perl6.org/type/Supply ; the code snippets aren't working for me

[00:31] <timotimo> huh

[00:31] <timotimo> i didn't know there was no coherent design behind perl6

[00:31] *** RabidGravy left
[00:32] <timotimo> no benefits of lessons learned from the old language? clashing features?

[00:32] <dalek> modules.perl6.org/new-db-builder: 3965833 | (Zoffix Znet)++ | t/02-db-builder/08-postprocessor-base.t:

[00:32] <dalek> modules.perl6.org/new-db-builder: Improve test/pod coverage of ModulesPerl6::DbBuilder::Dist::PostProcessor to 100%

[00:32] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/39658336d0

[00:32] *** Zoffix joined
[00:32] <Zoffix> csd_, how old is your Rakudo?

[00:32] <csd_> Zoffix: i installed it today

[00:33] <Zoffix> csd_, installed from where?

[00:33] <csd_> rakudobrew

[00:33] <Zoffix> csd_, there've been some changes to Supply stuff very recently. The docs likely haven't been updated yet

[00:34] <csd_> figure that someone here is probably the right person to let know

[00:34] *** Psyche^ left
[00:34] <Zoffix> csd_, it would be helpful if you either submit an Issue with which examples are wrong, or a PR with what they should be :) https://github.com/perl6/doc

[00:34] <Zoffix> jnthn is the one who made the changes, but I doubt they have the time to work on docs ATM :) Christmas release prep and all :)

[00:35] <psch> rakudo commit a8231f14b2d5400e0653aac453496e00318142c5 explains a lot, i gather

[00:35] <psch> i mean, the commit message

[00:41] *** vendethiel left
[00:42] *** raoulvdberge left
[00:42] *** znpy` left
[00:42] <dalek> modules.perl6.org/new-db-builder: ea6dbc2 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor.pm:

[00:43] <dalek> modules.perl6.org/new-db-builder: Reword what _builder is for

[00:43] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/ea6dbc2e25

[00:46] *** Ben_Goldberg joined
[00:48] *** BenGoldberg left
[00:51] *** virtualsue left
[00:55] *** znpy` joined
[00:59] *** lizmat joined
[00:59] *** lizmat left
[01:00] <dalek> modules.perl6.org/new-db-builder: 8ac60dc | (Zoffix Znet)++ | t/02-db-builder/06-postprocessor-travis.t:

[01:00] <dalek> modules.perl6.org/new-db-builder: Improve test coverage for ModulesPerl6::DbBuilder::Dist::PostProcessor::TravisCI

[01:00] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/8ac60dcb67

[01:01] *** Zoffix left
[01:12] *** kaare_ left
[01:19] *** llfourn_ joined
[01:37] *** thowe joined
[01:46] *** pierre-vigier joined
[01:50] *** znpy` left
[02:01] *** MilkmanDan left
[02:02] *** rgrau joined
[02:03] *** znpy` joined
[02:04] <lucs_> Re. "short names" on the command line for MAIN: I expected something like  -d=foo  to work if I had declared  sub MAIN (:$dir)  , but nope.

[02:04] <lucs_> What's the deal with short names?

[02:06] *** lucs_ is now known as lucs

[02:10] <psch> lucs: that's not automatic, you have to declare aliases yourself

[02:10] <lucs> psch: Okay, um, can you point me to what I need to read please?

[02:11] <psch> m: sub f(:f(:foo($foo))) { say $foo }; f :f(2); f :foo(2) # like this

[02:11] <camelia> rakudo-moar e0a403: OUTPUT«2␤2␤»

[02:11] <lucs> Oho. Hmm...

[02:11] <psch> lucs: i guess Signatures on doc.perl6.org? 

[02:11] <lucs> Okie doke. Thanks!

[02:13] <timotimo> i'm still looking for suggestions for an advent calendar post i could write :S

[02:13] <timotimo> https://github.com/perl6/mu/blob/master/misc/perl6advent-2015/topic-brainstorming - doesn't inspire me enough :(

[02:15] <psch> yeah, kinda similar here...

[02:15] <psch> also somewhat tied up in figuring r-j out more to get it actually working again

[02:15] <psch> but that's lots of "do i actually understand how that works..?" :P

[02:16] <diakopter> timotimo: maybe inspiring is to take some RosettaCode entries that TimToady wrote and pontificate about them

[02:17] <diakopter> like, what does idiomaticity mean in some cases vs. performance and learnability

[02:17] <timotimo> https://github.com/perl6/ye-olde/issues/2

[02:17] <diakopter> http://rosettacode.org/wiki/Category:Perl_6

[02:23] *** rgrau left
[02:23] *** FROGGS_ joined
[02:25] <timotimo> diakopter: i don't think i understood why you asked me to explain why the thing is bad

[02:25] <diakopter> which content is out of date

[02:25] <timotimo> but i put an exhaustive answer together to what i think you have meant

[02:25] <timotimo> ah. right

[02:25] <diakopter> (how much of it)

[02:26] <timotimo> i don't know what other files are in there, because the front page doesn't link to them

[02:26] <diakopter> I mean, approx how much of that page

[02:27] *** FROGGS left
[02:27] <timotimo> hm. i'd say between 50% and 75%

[02:27] <diakopter> maybe just request him to post a prominent notice that it's vastly out of date?

[02:28] <timotimo> yeah, something like that would be good

[02:28] <diakopter> I mentioned his ghid there

[02:28] <timotimo> i saw. thanks!

[02:28] <timotimo> didn't occur to me :S

[02:28] <timotimo> so ... bedtime for me!

[02:28] <diakopter> so unless he's unwatched/silenced that repo

[02:28] <timotimo> good night!

[02:28] <diakopter> he'll get an email

[02:29] <diakopter> NITE!

[02:32] *** adhoc left
[02:35] *** pierre-vigier left
[02:35] *** molaf_ joined
[02:37] *** AlexDaniel left
[02:37] *** pierre-vigier joined
[02:39] *** molaf left
[02:44] *** pierre-vigier left
[02:46] *** dayangkun joined
[02:47] *** jasanj` joined
[02:49] *** jasanj`` joined
[02:50] *** jasanj left
[02:53] *** jasanj` left
[02:54] *** pierre-vigier joined
[02:55] <TimToady> m: sub f(:f(:$foo)) { say $foo }; f :f(2); f :foo(2)

[02:55] <camelia> rakudo-moar e0a403: OUTPUT«2␤2␤»

[02:55] <TimToady> you can simplify it a bit

[02:56] <diakopter> blinks*

[02:56] *** coetry left
[02:57] <lucs> TimToady: Yep, thanks.

[02:58] *** raiph joined
[02:58] *** yqt left
[02:59] *** vendethiel joined
[03:01] <diakopter> m: sub f(:f(:$foo)) { say $foo }; f :f(2); f :foo(f); f :f((f::)==f(:f(f)))

[03:01] <camelia> rakudo-moar e0a403: OUTPUT«2␤(Any)␤True␤(Any)␤(Any)␤True␤True␤»

[03:01] *** jasanj`` left
[03:03] <diakopter> speaking of ffs...

[03:10] *** BenGoldberg_ joined
[03:10] *** bzipitidoo left
[03:12] *** dayangkun left
[03:13] *** Ben_Goldberg left
[03:13] *** noganex_ joined
[03:16] *** noganex left
[03:18] *** skids joined
[03:19] *** pierre-vigier left
[03:19] <[Coke]> https://gist.github.com/coke/f0a4c2da754b24bef2a7 - what am I missing, isn't that a match?

[03:21] <Quom_> You don't have a second path?

[03:21] *** vendethiel left
[03:22] *** Zoffix joined
[03:23] <[Coke]> bother. I was expecting "path".IO.chdir to DWIW, but you're right, that's wrong.

[03:26] <[Coke]> docs: The -e and -f file test operators do not exist in Perl 6. Use instead :e and :f.

[03:26] <Zoffix> I actually see 2 Brian D Foy's Twitter accounts :s @briandfoy_perl and @briandfoy 

[03:26] <[Coke]> http://docs.perl6.org/type/IO::Path (shouldn't refer to the p5 way at all)

[03:28] <jdv79> why can't Test see an op i create?

[03:28] <Zoffix> fwiw: https://twitter.com/zoffix/status/670806203077931009  though my last interaction with Brian D Foy was by far not a pleasant one...

[03:28] <jdv79> m: use Test; cmp-ok(4,"+",5); sub infix:<a>($a,$b){$a+$b}; say 3 a 4; cmp-ok(2,"a",3);

[03:28] <camelia> rakudo-moar e0a403: OUTPUT«ok 1 - ␤7␤not ok 2 - ␤␤# Failed test at /tmp/GRbqKZffIw line 1␤# Could not use 'a' as a comparator␤»

[03:31] <jdv79> hardcore scoping

[03:33] <jdv79> what could be some workarounds?

[03:33] <Zoffix> m: ༤ / ༨ + ༪

[03:33] <camelia> rakudo-moar e0a403: OUTPUT«WARNINGS:␤Useless use of "+" in expression "/ ༨ + ༪" in sink context (line 1)␤»

[03:33] <Zoffix> m: say ༤ / ༨ + ༪

[03:33] <camelia> rakudo-moar e0a403: OUTPUT«1␤»

[03:34] <Zoffix> This is sick. Those chars don't even display for me right, yet Perl 6 does its thing :P

[03:34] * Zoffix wonders how many languages can do that

[03:35] <jdv79> i think i can see them physically

[03:35] <jdv79> no idea what some are

[03:35] <Zoffix> They just display as boxes with numbers for me: http://i.imgur.com/tc26vTL.png

[03:38] <jdv79> http://imgur.com/9tdMvVO

[03:39] <jdv79> they look better here 

[03:40] <Quom_> m: use Test; cmp-ok(4,"+",5); sub infix:<a>($a,$b){$a+$b}; say 3 a 4; cmp-ok(2,&[a],3)

[03:40] <camelia> rakudo-moar e0a403: OUTPUT«ok 1 - ␤7␤ok 2 - ␤»

[03:40] <jdv79> yeah, its the string arg i wsa interested in

[03:40] *** pierre-vigier joined
[03:41] <jdv79> but that's closer.  thanks..

[03:42] <Quom_> I don't think that's possible with how cmp-ok is implemented right now

[03:42] <jdv79> its only one extra char so its what i wanted basically

[03:44] <Zoffix> What were the names of built-in JSON conversion functions?

[03:44] <Zoffix> m: say '["foo":"bar"]'.json-decode

[03:44] <camelia> rakudo-moar e0a403: OUTPUT«Method 'json-decode' not found for invocant of class 'Str'␤  in block <unit> at /tmp/EoEOxl8jvJ:1␤␤»

[03:45] <jdv79> from and to json i think

[03:45] <Zoffix> m: say '["foo":"bar"]'.from-json

[03:45] <camelia> rakudo-moar e0a403: OUTPUT«Method 'from-json' not found for invocant of class 'Str'␤  in block <unit> at /tmp/4MPv3ba4K0:1␤␤»

[03:45] <jdv79> subs i think

[03:46] <Zoffix> m: say from-json '["foo":"bar"]'

[03:46] <camelia> rakudo-moar e0a403: OUTPUT«Method 'ast' not found for invocant of class 'Any'␤  in block <unit> at /tmp/wVzuDIrhiF:1␤␤»

[03:47] <Zoffix> which is weird, 'cause:

[03:47] <Zoffix> m: say to-json ['42']

[03:47] <camelia> rakudo-moar e0a403: OUTPUT«[␤  "42"␤]␤»

[03:47] *** pierre-vigier left
[03:47] <Zoffix> And I see a bunch of mention of from-json here: https://github.com/rakudo/rakudo/search?utf8=%E2%9C%93&q=json

[03:47] <Zoffix> A module it is! :P

[03:48] * Zoffix is still bothered native to-json and some JSON modules have all that extra whitespace in generated JSON

[03:48] <Quom_> Zoffix: Does JSON::Fast have extra ws?

[03:49] <Zoffix> Yup. Does same thing as above

[03:49] <Zoffix> 3 useless bytes

[03:51] *** csd_ left
[03:51] <jdv79> use JSON::XS

[03:51] <Zoffix> no such thing http://modules.perl6.org/repo/JSON::XS

[03:52] * Zoffix pets the /repo/ feature

[03:53] <jdv79> :|

[03:54] *** pierre-vigier joined
[03:54] <grondilu> trying to implement exponentiation by squaring.  Could not get make it faster than the current &[**] :  https://gist.github.com/grondilu/ba900191b018daf5cded

[03:55] *** pierre-vigier left
[03:56] <lucs> How can I capture stderr from a run() command?

[03:58] *** znpy` left
[04:00] *** pierre-vigier joined
[04:02] <Zoffix> lucs, perl6 -e 'my $proc = run "perl", "-wlE", "warn q|Hallo world|", :err; my $captured-output = $proc.err.slurp-rest; say $captured-output;'

[04:02] <Zoffix> lucs, this doc might be helpful: http://doc.perl6.org/type/Proc

[04:04] *** raiph left
[04:04] <lucs> Zoffix: Hmm... Tried something similar, unsuccessfully (yep, was reading that .../Proc doc).

[04:04] <lucs> Trying again...

[04:06] *** grondilu left
[04:06] *** pierre-vigier left
[04:08] <lucs> Aha. I was building the command to run in @cmd, with ":err" pushed at the end. Like that, "run @cmd" fails. But if I don't push it and do "run @cmd, :err", it works.

[04:08] *** kid51 left
[04:08] <lucs> Thanks Zoffix.

[04:08] *** grondilu joined
[04:08] <Zoffix> \o/

[04:08] <lucs> You bet :) I'm really loving Perl6.

[04:09] <Zoffix> Yeah, it's neat.

[04:09] <lucs> Understatement my friend :)

[04:12] <dalek> rakudo/nom: e3c591a | TimToady++ | src/core/ (3 files):

[04:12] <dalek> rakudo/nom: make tolerance relative to operands when practical

[04:12] <dalek> rakudo/nom: 

[04:12] <dalek> rakudo/nom: Also, rename $*SIGNIFICANCE to $*TOLERANCE.

[04:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e3c591a17a

[04:12] *** Actualeyes joined
[04:15] <Zoffix> m: my $z = [42]; say $z<42>

[04:15] <camelia> rakudo-moar e0a403: OUTPUT«Type Array does not support associative indexing.␤  in block <unit> at /tmp/882iGcZajP:1␤␤Actually thrown at:␤  in block <unit> at /tmp/882iGcZajP:1␤␤»

[04:15] <ShimmerFairy> TimToady: we have a ≅ operator now? I can't help but wonder how much more will find its way into the core setting :P

[04:15] <Zoffix> ^ would be nice if that error showed file/line number

[04:16] <dalek> roast: 190ed77 | TimToady++ | S (3 files):

[04:16] <dalek> roast: test scaled tolerance on =~= and <=>

[04:16] <dalek> roast: review: https://github.com/perl6/roast/commit/190ed77ac9

[04:16] <grondilu> TimToady: I like TOLERANCE better, though I would have expected the name to refer to numbers somehow, like $*NUMERIC-TOLERANCE

[04:17] <ShimmerFairy> Zoffix: it does, the "/tmp/garble:1" bit

[04:17] <TimToady> TOLERANCE is a very common term in physical measurements, and always refers to numbers there

[04:18] <ShimmerFairy> I guess the mathiest name would be EPSILON or Ε , but I'm not sure if that would fit as well here :)

[04:18] <grondilu> true

[04:18] <Zoffix> ShimmerFairy, not really: http://i.imgur.com/80lJfpL.png

[04:18] <flussence> .oO( what's the texas version of ≅? :)

[04:18] <flussence> oh, =~=

[04:18] <ShimmerFairy> Zoffix: oh, maybe camelia has --ll-exception enabled?

[04:18] <Zoffix> If I had a 1,000,000-line script, that would've been fun :)

[04:19] *** coetry joined
[04:19] <ShimmerFairy> Zoffix: errors that are thrown from NQP or the underlying VM don't display diagnostic info unless you use --ll-exception

[04:19] <grondilu> m: $*TOLERANCE = 1e-6; say 10 =~= 10 + 1e-7

[04:19] <camelia> rakudo-moar e0a403: OUTPUT«Dynamic variable $*TOLERANCE not found␤  in block <unit> at /tmp/hicMWVsRfq:1␤␤Actually thrown at:␤  in block <unit> at /tmp/hicMWVsRfq:1␤␤»

[04:19] <TimToady> floating-point errors are a lot bigger than ε

[04:20] <Zoffix> Maybe. I get a ton of output with that option http://i.imgur.com/U8iOfqU.png

[04:20] <grondilu> m: $*SIGNIFICANCE = 1e-6; say 10 =~= 10 + 1e-7

[04:20] <camelia> rakudo-moar e0a403: OUTPUT«Cannot modify an immutable Num␤  in block <unit> at /tmp/NhZFUVTtQ9:1␤␤»

[04:20] <TimToady> wait till :31 or so

[04:20] <TimToady> can't override PROCESS:: vars, like that, needs a 'my'

[04:21] <TimToady> otherwise one interpreter could modify the PROCESS value for a different interpreter

[04:21] * grondilu just realises that =~= is NYI

[04:21] <TimToady> sure it is

[04:21] <grondilu> oh, I'm confused then

[04:21] <TimToady> you need a 'my'

[04:21] <ShimmerFairy> TimToady: sure, but I understand "epsilon" to be a name you see sometimes for a limit on how precise you want to be (so I guess in that context an "epsilon" argument means "pretend epsilon is this")

[04:21] <grondilu> m: my $*SIGNIFICANCE = 1e-6; say 10 =~= 10 + 1e-7

[04:21] <camelia> rakudo-moar e0a403: OUTPUT«True␤»

[04:21] <Zoffix> ShimmerFairy, bummer... I, as an end user, would rather not even know what "NQP" is and get a proper error from the get-go. Stuff like my Int Int; does provide useful feedback after-all: http://i.imgur.com/EScHZtU.png

[04:21] <TimToady> to me, ε is an infinitesimal

[04:21] *** csd_ joined
[04:21] <grondilu> m: my $*SIGNIFICANCE = 1e-6; say 10 =~= 10 + 9e-7

[04:21] <camelia> rakudo-moar e0a403: OUTPUT«True␤»

[04:23] <ShimmerFairy> Zoffix: yeah, I think we all agree that cases requiring --ll-exception are an issue in error reporting, or else in one of the lower layers :)

[04:23] <grondilu> shouldn't it be a relative value (dimensionless) ?  sub infix:<=~=>($a, $b) { 2*abs($a - $b) / sqrt($a**2 + $b**2) } or something?

[04:23] <Zoffix> :)

[04:23] <grondilu> sorry

[04:24] <grondilu> sub infix:<=~=>($a, $b) { 2*abs($a - $b) / sqrt($a**2 + $b**2) < $*TOLERANCE }

[04:24] <ShimmerFairy> TimToady: yeah, so I think in those places I've seen they're really saying "pretend we're in a world where ε (infinitesimal) is known to be 1e-6, because I really don't care to be more precise than that"

[04:25] <grondilu> m: my $*SIGNIFICANCE = 1e-6; say 1e8 =~= 1e8 + 9e-7

[04:25] <camelia> rakudo-moar e0a403: OUTPUT«True␤»

[04:25] <grondilu> m: my $*SIGNIFICANCE = 1e-6; say 1e8 =~= 1e8 + 9e-6

[04:25] <camelia> rakudo-moar e0a403: OUTPUT«False␤»

[04:25] <Quom_> m: enum A (B=>10, C=11); # LTA

[04:25] <camelia> rakudo-moar e0a403: OUTPUT«===SORRY!===␤Cannot invoke this object␤»

[04:25] <TimToady> was trying to avoid anything so geometric, so it just scales the larger of the two arguments (in abs)

[04:26] <ShimmerFairy> Quom_: you also can't do enum A «B :C<B>» (alias enum values)    :<

[04:26] <Quom_> ShimmerFairy: Can't one just declare constant C = B ?

[04:27] <grondilu> absolute tolerance does make some sense as well though, so I don't know if a relative one really is better.

[04:27] <TimToady> if they're close enough to be inside the tolerance, it won't make a lot of difference

[04:27] <ShimmerFairy> Mouq: not if you want to avoid the scourge of unscoped enum values, which P6 also doesn't let you avoid :P  (P6 takes a hybrid approach when compared to, say, C++)

[04:27] *** coetry left
[04:28] <TimToady> you can easily get absolute by $a - $b ≅ 0

[04:29] *** edehont joined
[04:29] <TimToady> .tell masak see http://irclog.perlgeek.de/perl6/2015-11-29#i_11620750

[04:29] <yoleaux> TimToady: I'll pass your message to masak.

[04:30] * grondilu just checked the code for &[=~=] and thinks it's fine indeed.

[04:31] <grondilu> (allowing relative and absolute comparison)

[04:31] *** edehont left
[04:34] <Mouq> Do we have mashalling from Array[num] to CArray[num]?

[04:34] <TimToady> hmm, Complex.narrow should probably also pay attention to the tolerance

[04:35] <jdv79> why ≅ and not ≈?

[04:36] <flussence> too confusable with smartmatch, I guess

[04:36] <Zoffix> m: say 3.1 ≈ 3; say 3.000000000000001 ≈ 3;

[04:36] <camelia> rakudo-moar e3c591: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6QNuKA1xZs␤Confused␤at /tmp/6QNuKA1xZs:1␤------> 3say 3.17⏏5 ≈ 3; say 3.000000000000001 ≈ 3;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement…»

[04:36] <Zoffix> There's a whole bunch of them https://en.wikipedia.org/wiki/Equals_sign#Approximately_equal

[04:37] <ShimmerFairy> jdv79: I'm guessing among other things, 1) What's the texas version gonna be? Can't be ~~ , and 2) it's named APPROXIMATELY EQUAL TO  :)

[04:37] <ShimmerFairy> m: say "≈".uniname; say "≅".uniname

[04:37] <camelia> rakudo-moar e3c591: OUTPUT«ALMOST EQUAL TO␤APPROXIMATELY EQUAL TO␤»

[04:40] *** Peter__R left
[04:41] * grondilu is not sure what's the difference between "almost equal" and "approximately equal"

[04:42] <jdv79> why can a routine be called ± but not a param?

[04:42] *** pierre-vigier joined
[04:43] <grondilu> m: sub prefix:<±>($n) { $n | -$n }; say -pi == ±pi

[04:43] <camelia> rakudo-moar e3c591: OUTPUT«any(False, True)␤»

[04:44] <grondilu> m: sub ±($n) { $n | -$n }; say -pi == ±(pi)

[04:44] <camelia> rakudo-moar e3c591: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Wrwwbahwh6␤Missing block␤at /tmp/Wrwwbahwh6:1␤------> 3sub7⏏5 ±($n) { $n | -$n }; say -pi == ±(pi)␤    expecting any of:␤        new name to be defined␤»

[04:44] <grondilu> I dn't think a routine can be called ±

[04:44] <grondilu> unless you make it a term or something

[04:45] *** sivoais joined
[04:45] <jdv79> i meant an op 

[04:45] <grondilu> well, identifier rules for ops are quite different than for variables, aren't they?

[04:46] <grondilu> you can pretty much use anything for an op

[04:46] <grondilu> (even spaces IIRC)

[04:46] <TimToady> m: sub infix:<±>($mean, $n) { $mean + (-$n .. $n) }; say 22/7 == pi ± .1

[04:46] <camelia> rakudo-moar e3c591: OUTPUT«False␤»

[04:46] <TimToady> m: sub infix:<±>($mean, $n) { $mean + (-$n .. $n) }; say 22/7 == pi ± .5

[04:46] <camelia> rakudo-moar e3c591: OUTPUT«False␤»

[04:47] <TimToady> m: sub infix:<±>($mean, $n) { $mean + (-$n .. $n) }; say pi ± .5

[04:47] <camelia> rakudo-moar e3c591: OUTPUT«2.64159265358979e0..3.64159265358979e0␤»

[04:47] <TimToady> m: sub infix:<±>($mean, $n) { $mean + (-$n .. $n) }; say 22/7 ~~ pi ± .1

[04:47] <camelia> rakudo-moar e3c591: OUTPUT«True␤»

[04:47] <TimToady> dur

[04:47] * grondilu did not know that semantic for $num + $range, is that new?

[04:48] <TimToady> several weeks old

[04:50] *** sivoais left
[04:50] <[Coke]> SHould IO::Path.chdir impact the cwd for shell? (right now I have to use $*CWD = ....)

[04:51] <ShimmerFairy> jdv79: you're modifying the parser when you declare an op, so you're basically just writing a rule that checks for ± (and the reason for that is pretty much because operators typically want symbols over traditional identifiers :P)

[04:51] *** sivoais joined
[04:54] *** Dee22 joined
[04:54] *** Dee22 left
[04:54] *** AndyDee left
[05:02] *** pierre-vigier left
[05:03] *** Actualeyes left
[05:07] *** edehont joined
[05:07] *** TEttinger joined
[05:09] <MadcapJake> Check out this GIF of the latest work I've done for linter-perl6 https://twitter.com/MadcapJake/status/670831736390053889

[05:11] <jdv79> can an op not be multi?

[05:14] <zostay_> m: say |(1,2,3).race.map(* + 1)

[05:14] <camelia> rakudo-moar e3c591: OUTPUT«234␤»

[05:14] *** zostay_ is now known as zostay

[05:14] <zostay> m: say |(1,2,3).race.grep(* == 3)

[05:14] <camelia> rakudo-moar e3c591: OUTPUT«␤»

[05:15] <zostay> m: say |(1,2,3).race.map(* + 1).grep(* == 3)

[05:15] <camelia> rakudo-moar e3c591: OUTPUT«3␤»

[05:15] <zostay> i don't understand why i can map a HyperSeq, but I can't seem to grep it

[05:16] *** cognominal joined
[05:18] <grondilu> MadcapJake: that's pretty cool.  I wonder if that'd be possible in Vim

[05:18] <zostay> or at least, i can't grep until i've mapped it once...

[05:19] <TimToady> zostay: that's a known bug

[05:19] <zostay> oh, good... i thought i was just confused ;)

[05:20] <TimToady> at least, I think it is...

[05:20] * geekosaur found Atom troublesome... left it open overnight and it made everything else swap out

[05:21] <jdv79> https://gist.github.com/anonymous/0838392ab4b6f943e7ad

[05:21] <jdv79> neat that that is possible and not hard

[05:24] *** cibs left
[05:35] *** khw left
[05:49] *** csd_ left
[05:49] *** BenGoldberg_ left
[05:50] *** BenGoldberg_ joined
[05:55] <jdv79> how come i seem to lose my precedence change when i put that into a module and export them ?

[05:55] *** BenGoldberg_ left
[06:00] <skids> $ perl6 -e '"/tmp/ffffjjjj".IO.unlink; my $fh = open("/tmp/ffffjjjj", :create); say so $fh.path ~~ :f, so "/tmp/ffffjjjj".IO ~~ :f;' # FalseTrue ... :-/

[06:01] *** n0xff__ left
[06:07] <MadcapJake> grondilu: no idea how to program vim plugins

[06:08] <MadcapJake> geekosaur: not sure what you mean by "swap out" or "everything else"

[06:09] <jdv79> m: sub infix:<o1> ($a, $b) is export { say 1 }; sub infix:<o2> ($a, $b) is tighter(&infix:<o1>) is export { say 2 }; 1 o1 1 o2 1; # ok

[06:09] <camelia> rakudo-moar e3c591: OUTPUT«2␤1␤»

[06:09] <jdv79> m: module m { sub infix:<o1> ($a, $b) is export { say 1 }; sub infix:<o2> ($a, $b) is tighter(&infix:<o1>) is export { say 2 } }; import m; 1 o1 1 o2 1; # what happened?

[06:09] <camelia> rakudo-moar e3c591: OUTPUT«1␤2␤»

[06:19] <TimToady> looks like a bug to me

[06:19] *** telex left
[06:19] *** telex joined
[06:20] <TimToady> m: module m { sub infix:<o1> ($a, $b) is export { say 1 }; sub infix:<o2> ($a, $b) is tighter(&infix:<o1>) is export { say 2 } }; import m; say &infix:<o1>.prec,' ',&infix:<o2>.prec

[06:20] <camelia> rakudo-moar e3c591: OUTPUT«prec => t= prec => t=␤»

[06:21] <TimToady> yeah definitely some kind of bug

[06:21] <TimToady> is the export aliasing more indirect than I thought?

[06:22] <TimToady> m: module m { sub infix:<o1> ($a, $b) is export { say 1 }; sub infix:<o2> ($a, $b) is tighter(&infix:<o1>) is export { say 2 }; say &infix:<o1>.prec }; import m; say &infix:<o1>.prec,' ',&infix:<o2>.prec

[06:22] <camelia> rakudo-moar e3c591: OUTPUT«prec => t=␤prec => t= prec => t=␤»

[06:22] <TimToady> m: module m { sub infix:<o1> ($a, $b) is export { say 1 }; sub infix:<o2> ($a, $b) is tighter(&infix:<o1>) is export { say 2 }; say &infix:<o2>.prec }; import m; say &infix:<o1>.prec,' ',&infix:<o2>.prec

[06:22] <camelia> rakudo-moar e3c591: OUTPUT«prec => t=␤prec => t= prec => t=␤»

[06:23] <TimToady> looks like tighter isn't working

[06:23] <TimToady> even inside

[06:23] <TimToady> m: module m { sub infix:<o1> ($a, $b) is export { say 1 }; sub infix:<o2> ($a, $b) is tighter(&[+]) is export { say 2 }; say &infix:<o2>.prec }; import m; say &infix:<o1>.prec,' ',&infix:<o2>.prec

[06:23] <camelia> rakudo-moar e3c591: OUTPUT«prec => t=␤prec => t= prec => t=␤»

[06:23] <TimToady> huh

[06:24] <TimToady> m: module m { sub infix:<o1> ($a, $b) is export { say 1 }; sub infix:<o2> ($a, $b) is equiv(&[*]) is export { say 2 }; say &infix:<o2>.prec }; import m; say &infix:<o1>.prec,' ',&infix:<o2>.prec

[06:24] <camelia> rakudo-moar e3c591: OUTPUT«assoc => left, prec => t=␤prec => t= assoc => left, prec => t=␤»

[06:25] <TimToady> m: module m { sub infix:<o1> ($a, $b) is export { say 1 }; sub infix:<o2> ($a, $b) is prec("u=") is export { say 2 }; say &infix:<o2>.prec }; import m; say &infix:<o1>.prec,' ',&infix:<o2>.prec

[06:25] <camelia> rakudo-moar e3c591: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1rZR8Dos5N␤Can't use unknown trait 'is prec' in a sub+{precedence} declaration.␤at /tmp/1rZR8Dos5N:1␤    expecting any of:␤        rw raw hidden-from-backtrace hidden-from-USAGE␤        cached pure de…»

[06:25] <TimToady> well, feel free to RT it

[06:26] *** telex left
[06:28] *** telex joined
[06:42] <Mouq> Does Panda not precomp modules anymore?

[06:46] *** csd_ joined
[06:47] <ShimmerFairy> Mouq: it does not, in fact. (It's supposed to be rakudo's job anyhow)

[07:00] <Mouq> Oh, wait, is that the CURLI branch you reference?

[07:15] <ShimmerFairy> Mouq: yeah, I think the work is going in there, but precomp was always supposed to be rakudo's business. The support was removed from panda to get a push going in implementing it (as well because it was problematic to maintain) :P

[07:19] *** CIAvash joined
[07:23] *** zoosha_ left
[07:23] *** kaare_ joined
[07:23] *** zoosha joined
[07:25] <dalek> rakudo/nom: bc027e2 | TimToady++ | src/core/Complex.pm:

[07:25] <dalek> rakudo/nom: use 0e0 instead of 0 when approximating 0

[07:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc027e24b4

[07:25] <dalek> rakudo/nom: 3807f26 | TimToady++ | src/core/Num.pm:

[07:25] <dalek> rakudo/nom: .narrow is approximate on Complex and Num

[07:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3807f2653c

[07:25] <dalek> roast: cb4dae7 | TimToady++ | S32-num/narrow.t:

[07:25] <dalek> roast: test that .narrow approximates on Complex and Num

[07:25] <dalek> roast: review: https://github.com/perl6/roast/commit/cb4dae71b2

[07:29] *** lizmat joined
[07:30] <TimToady> m: say exp(i * pi).narrow

[07:30] <camelia> rakudo-moar e3c591: OUTPUT«-1+1.22464679914735e-16i␤»

[07:31] <TimToady> m: say exp(i * pi).narrow

[07:31] <camelia> rakudo-moar 3807f2: OUTPUT«-1␤»

[07:31] *** xfix joined
[07:33] <TimToady> m: say (.1 + .2) * 10

[07:33] <camelia> rakudo-moar 3807f2: OUTPUT«3␤»

[07:34] <TimToady> m: say (.1 + .2) * 10 == 3

[07:34] <camelia> rakudo-moar 3807f2: OUTPUT«True␤»

[07:34] <TimToady> m: say (.1 + .2 - .3) * 10 == 0

[07:34] <camelia> rakudo-moar 3807f2: OUTPUT«True␤»

[07:34] <TimToady> oops

[07:34] <TimToady> m: say (.1e0 + .2) * 10 == 3

[07:34] <camelia> rakudo-moar 3807f2: OUTPUT«False␤»

[07:34] <TimToady> m: say ((.1e0 + .2e0) * 10).narrow == 3

[07:34] <camelia> rakudo-moar 3807f2: OUTPUT«True␤»

[07:35] <TimToady> I guess I did the test right, anyway...

[07:36] <llfourn_> what's the specific goal for the december release? 17 is in my mind but cannot find citation..

[07:37] <llfourn_> s/goal/date/ s/17/17th/

[07:38] <TimToady> we're aiming for the 17th so that we'll be sure to hit the 25th :)

[07:40] <llfourn> @TimToady: cheers :)

[07:44] *** llfourn_ left
[07:48] *** HoloIRCUser1 joined
[07:49] *** garu left
[07:49] *** garu joined
[07:50] *** HoloIRCUser1 left
[07:52] *** HoloIRCUser1 joined
[07:52] <HoloIRCUser1> Hello

[07:52] *** HoloIRCUser1 is now known as hankache

[07:53] *** domidumont joined
[07:58] *** rurban joined
[07:58] *** domidumont left
[07:58] *** darutoko joined
[07:58] *** domidumont1 joined
[08:00] *** p6curious left
[08:01] *** balazs left
[08:08] *** hankache left
[08:10] *** risou_ left
[08:12] *** doublec left
[08:13] *** doublec joined
[08:24] *** lizmat left
[08:24] *** zaucker_ joined
[08:25] *** lizmat joined
[08:25] *** lizmat left
[08:25] *** risou_ joined
[08:25] *** adhoc joined
[08:26] <grondilu> m: say i**2 == -1; # seriously this is bad

[08:26] <camelia> rakudo-moar 3807f2: OUTPUT«False␤»

[08:26] * grondilu writes a patch

[08:28] <zaucker_> Goof morning ... I just thought I could try teaching programming to my 9 your old daughter. And while at it could teach myself Perl6. Are there any online resources about teaching kids? Preferably Perl6 or 5, but I guess others would do as well.

[08:28] <stmuk_> perl6intro.com

[08:29] <zaucker_> Well, yes. I was wondering if there is something specifically targeted at children/girls.

[08:29] <Mouq> zaucker_: I think most likely nowadays you'll find the most kid-friendly tutorials/programming introductions for javascript

[08:32] <stmuk_> there isn't yet

[08:33] *** edehont left
[08:36] <Hotkeys> grondilu: isn't that bad in the same way that

[08:36] <Hotkeys> m: say 0.1e0 + 0.2e0 == 0.3e0

[08:36] <camelia> rakudo-moar 3807f2: OUTPUT«False␤»

[08:36] <Hotkeys> is bad

[08:36] <Hotkeys> i vote for a ComplexRat type

[08:37] <JimmyZ>  m: say 0.1e0 + 0.2e0 =~= 0.3e0

[08:37] <camelia> rakudo-moar 3807f2: OUTPUT«True␤»

[08:39] <grondilu> I still think it's as bad as if 2e0**2 !== 4

[08:40] <grondilu> m: say 2e0**2 == 4

[08:40] <camelia> rakudo-moar 3807f2: OUTPUT«True␤»

[08:41] <grondilu> I once whined about it and I forgot why you convinced me it was a bad idea, but I still don't get why we have to base Complex on num.

[08:42] <grondilu> adding a ComplexRat would make things even more confusing imho.  Maybe a parametric role though? 

[08:43] <grondilu> but truly if it was me I'd define Complex as : class Complex does Numeric { has Real ($.re, $.im); ... }

[08:43] <skids> Hotkeys: floating points are an established mechanism that needs to be supported in a modern language, warts and all.  Or you cannot interface to things that use them.

[08:44] <JimmyZ> m: say 0.1e0 + 0.2e0

[08:44] <camelia> rakudo-moar 3807f2: OUTPUT«0.3␤»

[08:44] <Hotkeys> m: say 0.1e0 + 0.2e0 - 0.3e0

[08:44] <camelia> rakudo-moar 3807f2: OUTPUT«5.55111512312578e-17␤»

[08:44] <Hotkeys> skids: I know

[08:46] <skids> (but I'm indifferent on Complex)

[08:48] <grondilu> or maybe doing something similar than for Rational?  Les seuls films que j'ai vus où les billets était durs à avoir étaient le premier Harry Potter et le premier Seigneur des Anneaux.

[08:48] <grondilu> ooos

[08:48] <grondilu> oops

[08:48] <grondilu> wrong paste

[08:49] <grondilu> my role Complex[::R] does Numeric { method re returns ::T {...} };

[08:50] <moritz> grondilu: the design docs want it that way, it just isn't implemented

[08:50] <grondilu> oh ok

[09:09] <masak> good antenoon, #perl6

[09:09] <yoleaux> 04:29Z <TimToady> masak: see http://irclog.perlgeek.de/perl6/2015-11-29#i_11620750

[09:09] *** zhmylove_ left
[09:09] *** zhmylove joined
[09:09] <masak> TimTolerance++

[09:11] <nine_> I think, I'm gonna merge curli today

[09:12] <moritz> \o/

[09:17] <nine_> I'd feel much more comfortable if it weren't for those ephemeral spectest failures. But since I have them no nom, too, I just have no idea if curli makes them worse or not.

[09:19] <masak> curli has something to do with module, no?

[09:19] <masak> modules*

[09:19] <nine_> yes

[09:19] *** RabidGravy joined
[09:22] <masak> what will be different after curli is merged?

[09:23] <moritz> stuff will precompile!

[09:24] <masak> ooh

[09:24] <masak> at no risk to life or limb? that's good news indeed!

[09:25] <nine_> That's the intention, yes ;)

[09:25] <nine_> And we can install as many modules as we like without affecting startup time

[09:26] <nine_> I've already tried it with > 100 modules

[09:26] <grondilu> installation will still happen through panda?

[09:26] <JimmyZ>  or zef

[09:27] *** lizmat joined
[09:28] <nine_> Package managers become a bit simpler though since CompUnit::Repository::Installation manages all precompilation and the actual copying of files.

[09:29] *** skids left
[09:29] <grondilu> will it allow for uninstallation of modules?

[09:30] <nine_> NYI but certainly possible.

[09:31] * grondilu install linenoise and regrets it as it is painfully slow to start

[09:31] <lizmat> good *, #perl6!

[09:31] <grondilu> *installed

[09:31] <grondilu> (though maybe now with precompilation it will be quicker)

[09:31] <nine_> grondilu: not just maybe :)

[09:32] <dalek> rakudo/nom: b464aca | LLFourn++ | src/Perl6/ (2 files):

[09:32] <dalek> rakudo/nom: avoid installing %?LANG too early

[09:32] <dalek> rakudo/nom: 

[09:32] <dalek> rakudo/nom: %*LANG was copied to %?LANG too early causing EVAL not work sometimes

[09:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b464aca1ce

[09:32] <dalek> rakudo/nom: 6153f1c | lizmat++ | src/Perl6/ (2 files):

[09:32] <dalek> rakudo/nom: Merge pull request #603 from LLFourn/simple_lang_eval_fix

[09:32] <dalek> rakudo/nom: 

[09:32] <dalek> rakudo/nom: avoid installing %?LANG too early

[09:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6153f1c9bf

[09:35] *** Actualeyes joined
[09:36] *** cibs joined
[09:42] *** Begi joined
[09:42] *** Mokok joined
[09:42] *** virtualsue joined
[09:43] *** Begi2 joined
[09:46] *** Begi left
[09:48] * lizmat wonders whether we should remove all macro support before 6.c

[09:49] <JimmyZ> well, some modules depends on macro

[09:56] <lizmat> but I think we agree that the current macro's won't survive, right?

[09:56] <lizmat> so better to stop them short now before we get more modules depending on them?

[09:57] *** Begi2 is now known as Begi

[09:57] <lizmat> BTW, is anybody on channel going to the CCC between Xmas and NewYear this year ??

[10:01] <moritz> oo-monitors uses a macro

[10:02] <moritz> seems to be the only use in the ecosystem

[10:02] <moritz> lizmat: not me (re CCC)

[10:02] <lizmat> would be nice if someone could give a Perl 6 presentation there

[10:05] <JimmyZ> m: use MONKEY-TYPING; my $d = ""; augment class Str { method some_meth_1 {$d = $d ~ self;}}; for '0' .. '5' { .WHAT.say; sub; };

[10:05] <camelia> rakudo-moar 6153f1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/kD4DPX0_SP␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form.␤at /tmp/kD4DPX0_SP:1␤------> 3elf;}}; for '0' .. '5' { .WHAT.say; sub;7⏏5 };␤»

[10:12] *** rindolf joined
[10:16] <masak> is there any compelling reason I should put `use v6;` at the top of my modules?

[10:16] <dalek> rakudo/nom: ff81e96 | lizmat++ | src/core/Exception.pm:

[10:16] <dalek> rakudo/nom: Make sure unexpected/nogo are always sorted

[10:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ff81e969d4

[10:17] <dalek> roast: ffd8df7 | lizmat++ | S32-str/split.t:

[10:17] <dalek> roast: Fix test now that they're always sorted

[10:17] <dalek> roast: review: https://github.com/perl6/roast/commit/ffd8df77a8

[10:18] <JimmyZ> masak: hightlighting?

[10:19] <lizmat> masak: sane error message when run with perl 5 ?

[10:22] <dalek> roast: e597ff3 | lizmat++ | S06-signature/closure-parameters.t:

[10:22] <dalek> roast: Unfudge now passing test

[10:22] <dalek> roast: review: https://github.com/perl6/roast/commit/e597ff3fb6

[10:23] *** spider-mario joined
[10:23] <nine_> Should this worry me? https://gist.github.com/niner/50bd135b0747cf2f36fe

[10:26] *** TEttinger left
[10:27] <dalek> roast/curli: 2ba7c8a | (Stefan Seifert)++ | / (2 files):

[10:27] <dalek> roast/curli: Fix integration/precompiled.t for real

[10:27] <dalek> roast/curli: 

[10:27] <dalek> roast/curli: These tests for precompilation issues passed because we didn't actually

[10:27] <dalek> roast/curli: precompile anything. Fixed now by using some trickery to force

[10:27] <dalek> roast/curli: precompilation despite adding a new repo after loading the first module.

[10:27] <dalek> roast/curli: review: https://github.com/perl6/roast/commit/2ba7c8aa48

[10:30] *** [TuxCM] left
[10:33] *** pmurias joined
[10:33] <pmurias> hi

[10:35] <RabidGravy> masak, also potentially enable e.g. "file" to recognise Perl 6 modules

[10:37] <dalek> rakudo/nom: 2897239 | lizmat++ | src/core/Str.pm:

[10:37] <dalek> rakudo/nom: Add Str.NFC/NFD/NFKC/NFKD as NYI stubs for JVM

[10:37] <dalek> rakudo/nom: 

[10:37] <dalek> rakudo/nom: Should at least improve error message on RT #126678

[10:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/289723972e

[10:39] *** zaucker_ left
[10:45] <[Tux]> test             50000    24.509    24.396

[10:45] <[Tux]> test-t           50000    21.298    21.185

[10:45] <[Tux]> csv-parser       50000    29.335    29.221

[10:54] <dalek> roast: 6af57be | peschwa++ | S06-signature/closure-parameters.t:

[10:54] <dalek> roast: Add test for RT #125988.

[10:54] <dalek> roast: review: https://github.com/perl6/roast/commit/6af57be0e0

[10:55] <psch> hmm

[10:55] <psch> that test file has a few skipped tests which are intriguing

[10:57] <bartolin_> psch: do you think https://github.com/rakudo/rakudo/pull/598 is a good way to avoid the new NPE on rakudo.jvm?

[11:00] <psch> bartolin_: well, yes.  it seems a good way to avoid the NPE

[11:00] <psch> bartolin_: the problem is that underlying behavior seems different, though

[11:01] <psch> bartolin_: as in, moar is probably right in not-dying with an atkey with a non-existing key

[11:01] *** pierre-vigier joined
[11:02] <psch> although there's probably more involved than that... nqp-j can deal with that as well

[11:02] <psch> i'll have a closer look what exactly NPEs there

[11:02] <bartolin_> psch: ok, so it would be more like a bandaid for r-j.

[11:02] <bartolin_> psch++

[11:03] <lizmat> fwiw, I think all nqp code should always do an nqp::existkey first before being able to do an nqp::atkey

[11:04] *** colomon joined
[11:04] <psch> lizmat: it's definitely safer, and probably even cheaper, yeah

[11:04] *** kaare_ left
[11:05] *** kaare_ joined
[11:07] <dalek> nqp/js-cps: 175c6ed | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[11:07] <dalek> nqp/js-cps: [js] Make nqp::continuationcontrol return the result of the callback passed to nqp::continuationinject.

[11:07] <dalek> nqp/js-cps: review: https://github.com/perl6/nqp/commit/175c6ed960

[11:07] <dalek> nqp/js-cps: 3cbb936 | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (3 files):

[11:07] <dalek> nqp/js-cps: [js] Work on passing the continuations test.

[11:07] <dalek> nqp/js-cps: 

[11:07] <dalek> nqp/js-cps: Continuationreset returns the right value.

[11:07] <dalek> nqp/js-cps: Continuations are true for nqp::istrue.

[11:07] <dalek> nqp/js-cps: review: https://github.com/perl6/nqp/commit/3cbb936ed1

[11:07] <psch> i just don't know if we can allow ourselves the luxury of (1) having a "standard" backend that is permissive and (slightly) DWIM-y but (2) still expect people to do stuff the hard and rigorous way

[11:07] <psch> see also the getattr vs getattr_{i,n,s} hiccup

[11:11] <bartolin_> psch: fwiw, for three days there are about 5000 test failures on r-j due to aborted tests with that NPE: https://github.com/usev6/perl6-roast-data/blob/master/perl6_pass_rates.csv

[11:11] <psch> r: class A { has int $.a }; say nqp::getattr(A.new, A, '$!a').WHAT # this is the getattr hiccup i'm refering to

[11:11] <camelia> rakudo-jvm e3c591: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[11:11] <camelia> ..rakudo-moar 289723: OUTPUT«(int)␤»

[11:12] <psch> lo and behold, another NPE :|

[11:12] *** kjs_ joined
[11:13] <psch> r: my constant 𝑒 := e;

[11:13] <camelia> rakudo-moar 289723: ( no output )

[11:13] <camelia> ..rakudo-jvm e3c591: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Missing initializer on constant declaration␤at /tmp/tmpfile:1␤------> 3my constant7⏏5 𝑒 := e;␤»

[11:13] <psch> grrr

[11:13] <bartolin_> psch: (different behaviour of backends) I wondered about that, too. would be interesting to hear jnthn++'s opinion

[11:14] <psch> well, the NPE for getattr was a "No such Attribute" somewhen earlier... :/

[11:14] <psch> and i suspect the misparse for 𝑒 is something about uniprop..?

[11:16] <psch> bartolin_: well, in general i think we want backends to behave identically.  C just can do a few things java can't easily is what jnthn said when i asked him about the getattr mismatch

[11:16] <psch> i didn't yet look closer at that

[11:16] <psch> that 𝑒 misparse prevents r-j build, btw :/

[11:17] <psch> i guess i'll #?if moar that locally for now...

[11:19] <jnthn> nine_: (merge day) yay :)

[11:21] *** pierre-vigier left
[11:22] <nine_> jnthn: https://gist.github.com/niner/50bd135b0747cf2f36fe worries me...a lot :(

[11:22] <nine_> jnthn: it's the only thing preventing me from merging

[11:22] <jnthn> Is that a hang?

[11:22] <nine_> yes

[11:23] <jnthn> urgh

[11:23] <jnthn> Can you get a backtrace with line numbers?

[11:23] *** pierre-vigier joined
[11:23] <nine_> Seems to happen only on curli and just when I try to run spectests with TEST_JOBS=1

[11:23] <nine_> Running with TEST_JOBS=12 seems to be _more_ stable which is totally insane

[11:24] <jnthn> o.O

[11:24] <nine_> I'll recompiled with -g

[11:27] <psch> r: my \f := nqp::create(Int); say so f

[11:27] <camelia> rakudo-jvm e3c591: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[11:27] <camelia> ..rakudo-moar 289723: OUTPUT«False␤»

[11:27] <jnthn> That should really work out...

[11:27] <psch> bartolin_: ^^^ that's kind of the reason behind needing the existskey

[11:28] <psch> as in, it's the same failure mode for a related reason, i suppose

[11:28] <bartolin_> j: my $f := nqp::create(Int); say so f   ## guess, that works

[11:28] <camelia> rakudo-jvm e3c591: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CLSxIDC97C␤Undeclared routine:␤    f used at line 1␤␤»

[11:28] <bartolin_> j: my $f := nqp::create(Int); say so $f   ## guess, that works

[11:28] <camelia> rakudo-jvm e3c591: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[11:29] <psch> r: my %h; say so nqp::atkey(%h, 'foo') # hah

[11:29] <camelia> rakudo-moar 289723: OUTPUT«(signal SEGV)»

[11:29] <camelia> ..rakudo-jvm e3c591: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[11:29] <psch> they agree \o/

[11:29] <psch> :P

[11:29] <bartolin_> *g*

[11:32] <psch> r: my %h; say so nqp::atkey(nqp::decont(%h), 'foo') # at least it wasn't the missing decont...

[11:32] <camelia> rakudo-jvm e3c591: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[11:32] <camelia> ..rakudo-moar 289723: OUTPUT«(signal SEGV)»

[11:32] <psch> bartolin_: in any case, i think that means your PR should probably be merged

[11:34] <dalek> rakudo/nom: 0718179 | lizmat++ | src/core/io_operators.pm:

[11:34] <dalek> rakudo/nom: Make MMD setup of sub print same as say/note/put

[11:34] <dalek> rakudo/nom: 

[11:34] <dalek> rakudo/nom: This should fix RT #126725, but causes some spectest fallout.  However,

[11:34] <dalek> rakudo/nom: I do agree that this is the right way to go!

[11:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/07181796e4

[11:35] *** hankache joined
[11:36] <hankache> hi

[11:37] <psch> r: my \h = {}; say so nqp::atkey(h, 'foo') # this is more like the case in gistseen, i suppose...

[11:37] <camelia> rakudo-moar 289723: OUTPUT«False␤»

[11:37] <camelia> ..rakudo-jvm e3c591: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[11:37] <nine_> jnthn: https://gist.github.com/niner/39a4084d7e1de469d730 with MoarVM 623eadf4f67ffc0f73ce30da4ed0d7c8b5bb0296

[11:38] <dalek> roast: d1d79f7 | LLFourn++ | S (3 files):

[11:38] <dalek> roast: tests EVAL with %*LANG modifications

[11:38] <dalek> roast: review: https://github.com/perl6/roast/commit/d1d79f7d5f

[11:38] <dalek> roast: 600579f | LLFourn++ | S (3 files):

[11:38] <dalek> roast: Merge pull request #80 from LLFourn/eval_tests

[11:38] <dalek> roast: 

[11:38] <dalek> roast: tests EVAL with %*LANG modifications

[11:38] <dalek> roast: review: https://github.com/perl6/roast/commit/600579f216

[11:39] <jnthn> oops

[11:41] <jnthn> Wait, huh...there's actually code in there that's meant to prevent this exact bug.

[11:42] <dalek> roast: 78d7b2f | lizmat++ | S16-io/print.t:

[11:42] <dalek> roast: Bring basic print tests inline with new MMD setup

[11:42] <dalek> roast: review: https://github.com/perl6/roast/commit/78d7b2f0d4

[11:42] <dalek> roast: abba1e3 | lizmat++ | S19-command-line/dash-e.t:

[11:42] <dalek> roast: Bring basic -e tests inline with new MMD setup

[11:42] <dalek> roast: review: https://github.com/perl6/roast/commit/abba1e322d

[11:42] <lizmat> that should fix the roast fallout https://github.com/rakudo/rakudo/commit/07181796e4

[11:44] <jnthn> nine_: Can you try applying https://gist.github.com/jnthn/c42ed1caa3f7ff0ac073 and see if we hit that oops?

[11:45] <nine_> jnthn: gladly

[11:49] *** Peter_R joined
[11:51] <psch> hrm, nqp::create doesn't work out on r-j because we don't have initialize() for any REPR

[11:51] *** pmurias left
[11:53] <psch> that's nice grunt work, if anyone wants to keep busy :P

[11:55] <nine_> jnthn: no success :/ https://gist.github.com/niner/dc58ac9573d2eacdce9a

[11:57] <jnthn> Eek

[11:58] *** CIAvash left
[11:58] *** rgrau joined
[11:58] <psch> ...i'm not sure i understand create in interp.c correctly

[11:59] <psch> as in, MVMHash for example has initialize(tc), but no initialize(tc, st, root, data)

[11:59] <jnthn> nine_: It's really bizzare. It's clearly allocating in the nursery.

[11:59] <psch> but with what's returned from initialize(tc) it should still call the second function..?

[11:59] <jnthn> And clearly doing it from initialize.

[12:00] *** edehont joined
[12:00] <jnthn> But:

[12:00] <jnthn>                 MVM_gc_allocate_gen2_default_set(tc);

[12:00] <jnthn>                 MVM_repr_init(tc, (MVMObject *)sc);

[12:00] <jnthn>                 MVM_gc_allocate_gen2_default_clear(tc);

[12:00] <jnthn> That should be forcing allocation into gen2

[12:00] <jnthn> Does the debugger let you display tc->allocate_in_gen2?

[12:03] <jnthn> Ah, hang on...

[12:03] *** Zoffix left
[12:04] <jnthn> nine_: Please try this patch: https://gist.github.com/jnthn/cb85357d35af59d1d004

[12:05] *** edehont left
[12:06] <psch> oh, yes, i misunderstood the create op in interp.c...

[12:07] <nine_> allocate_in_gen2 is 0

[12:08] <nine_> trying the second patch now

[12:08] *** virtualsue left
[12:09] <dalek> modules.perl6.org/new-db-builder: 942344c | (Zoffix Znet)++ | bin/build-project-list.pl:

[12:09] <dalek> modules.perl6.org/new-db-builder: Add --db-file option for easier testing

[12:09] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/942344cec6

[12:10] *** hankache left
[12:15] <RabidGravy> m: class B {}; class C { has B @.c }; my @bs = (B.new, B.new); my %h; %h<c> = @bs; C.new(|%h)

[12:15] <camelia> rakudo-moar 071817: OUTPUT«Type check failed in assignment to @!c; expected B but got Array␤  in block <unit> at /tmp/hecYyPnOaX:1␤␤»

[12:16] <RabidGravy> has that ^ changed in the last week or so? It's broken JSON::Unmarshal

[12:16] <jnthn> Yes; in the fix to align attribute initialization semantics with variable assignment semantics.

[12:17] <jnthn> m: class B {}; my B @c; my @bs = (B.new, B.new); my %h; %h<c> = @bs; @c = %h<c>;

[12:17] <camelia> rakudo-moar 071817: OUTPUT«Type check failed in assignment to @c; expected B but got Array␤  in block <unit> at /tmp/BbApNSrwbV:1␤␤»

[12:17] <jnthn> It's 'cus a Hash is a bunch of Scalar containers

[12:17] <jnthn> m: class B {}; my B @c; my @bs = (B.new, B.new); my %h; %h<c> = @bs; @c = @(%h<c>);

[12:17] <camelia> rakudo-moar 071817: ( no output )

[12:18] *** pierre-vigier left
[12:18] <jnthn> m: class B {}; my B @c; my @bs = (B.new, B.new); my %h; %h<c> := @bs; @c = %h<c>;

[12:18] <camelia> rakudo-moar 071817: ( no output )

[12:18] <jnthn> Those are two ways to deal with it

[12:19] <RabidGravy> cool, let's see, I think it's going to be the bind

[12:22] *** pmurias joined
[12:22] <RabidGravy> yep that works

[12:25] <psch> well, the nqp::create issue probably can be solved by generating an initialize method in P6Opaque.generateJVMClass, checking for that in Ops.create and calling it if it exists

[12:25] <psch> except if the REPR itself has to know whether there are attrs that have to be initialized...

[12:25] <RabidGravy> cheers jnthn 

[12:27] <masak> so, if I've already settled syntax highlighting to my satisfaction, and I don't tend to accidentally run `perl` instead of `perl6` -- rather the reverse, actually -- I can safely leave out `use v6;` from my modules?

[12:27] <jnthn> psch: Is there more to do in https://rt.perl.org/Ticket/Display.html?id=125988 ?

[12:27] <masak> I wrote a little coverage tool, and that tool is (correctly) telling me that I can omit those lines.

[12:28] <jnthn> masak: A Perl 6 script that doesn't declare what version its targeting will automatically be targeting the latest the compiler supports.

[12:28] *** hartenfels joined
[12:29] <jnthn> masak: use v6; is equivalent to use v6.c;

[12:29] <psch> jnthn: i don't think so, no.  i don't have bug admin rights, fwiw

[12:29] <psch> (which i'm fine with, for the record :P )

[12:31] <jnthn> psch: OK, I can mark it resolved :)

[12:33] <jnthn> Down to 24 xmas RTs. :)

[12:33] *** pierre-vigier joined
[12:34] <jnthn> m: say "{24 / 18} a day if we want them done by Dec 17th :)"

[12:34] <camelia> rakudo-moar 071817: OUTPUT«1.333333 a day if we want them done by Dec 17th :)␤»

[12:35] <dalek> rakudo/nom: 2923369 | lizmat++ | src/core/Cool.pm:

[12:35] <dalek> rakudo/nom: Make any bigint for pos a failure for index/rindex

[12:35] <dalek> rakudo/nom: 

[12:35] <dalek> rakudo/nom: This further evades the difference between MoarVM and JVM for

[12:35] <dalek> rakudo/nom: nqp::unbox_i of bigints (fails on MoarVM, silently truncates on JVM)

[12:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/292336995d

[12:37] *** cdg joined
[12:38] <jnthn> nine_: I pushed the two patches; I think the first one is a good sanity check to have anyway, and the second is necesary even if not sufficient.

[12:38] *** kid51 joined
[12:39] *** vendethiel joined
[12:39] <masak> jnthn: I can see the benefit of pinning down the exact Perl 6 version, yes. but (as you point out) `use v6;` alone doesn't do that, so it's no more specific than leaving it out.

[12:40] <jnthn> masak: I said it's equivalent to use v6.c; :)

[12:41] <dalek> roast: db02e90 | lizmat++ | S32-str/ (2 files):

[12:41] <dalek> roast: Fix index/rindex tests

[12:41] <dalek> roast: review: https://github.com/perl6/roast/commit/db02e90cd2

[12:41] <jnthn> masak: So it is pinning it down.

[12:42] <masak> jnthn: oh!

[12:42] <masak> jnthn: this is.. some kind of special case for v6.c, then?

[12:43] *** pierre-vigier left
[12:44] *** pierre-vigier joined
[12:44] <jnthn> masak: Mostly just identifying that 6.c is the first stable version of the language

[12:46] *** Skarsnik joined
[12:48] *** pierre-vigier left
[12:48] <masak> *nod*

[12:48] <jnthn> lunch &

[12:48] <masak> ok, so leaving it out has the semantics of "I implicitly expect to run on whatever's the latest Perl 6 version"

[12:49] *** pierre-vigier joined
[12:50] <nine_> jnthn: \o/

[12:51] <RabidGravy> tadzik, when you have a minute be a love and merge the https://github.com/tadzik/JSON-Unmarshal/pull/13 it fixes the above ;-)

[12:51] *** pierre-vigier left
[12:52] <nine_> jnthn: spectest ran without a single hang :) Only see the failures that I have with nom, too.

[12:52] <diakopter> nine_: test jobs 1 ?

[12:53] <nine_> diakopter: yes

[12:54] *** pierre-vigier joined
[12:56] <lucs> Pod/MAIN question: http://fpaste.scsys.co.uk/502136

[12:57] <tadzik> Type check failed in assignment to @!dogs; expected Dog but got Array

[12:57] <tadzik> *cracks up*

[12:58] <tadzik> where can I read up on the change?

[12:59] *** snarkyboojum left
[13:00] <lucs> (oops, "pod1.pl6" should be "mainpod.pl6")

[13:03] <ShimmerFairy> lucs: I believe #= is a trailing declarator block, and that you'd want #|

[13:03] <lucs> Ah, thanks, trying...

[13:04] <lucs> Hmm... No luck, the message is shorter: "Usage \n pod1.pl6 <foo> <bar>"

[13:05] <diakopter> from where can I install Debugger::UI::CommandLine

[13:05] <diakopter> I try to run perl6-debug and it says I need this library installed

[13:06] <diakopter> do I need a working panda to get this library?

[13:07] <ShimmerFairy> lucs: I think the USAGE prints MAIN's declarator block if given, and not the arguments, but I wouldn't know about that for sure (which is why it printed the first message before, it attached to MAIN)

[13:07] <lucs> ShimmerFairy: Yeah, makes sense.

[13:07] <lucs> But unfortunate, eh.

[13:07] *** pmurias left
[13:07] <ShimmerFairy> diakopter: yep, your rakudo repo is actually incomplete unless you install some external modules. yaaaaay

[13:07] *** pmurias joined
[13:08] <diakopter> ShimmerFairy: I didn't know that; are you serious?

[13:08] <ShimmerFairy> diakopter: yep, last I checked you need Debugger::UI::CommandLine, Inline::P5, and Linenoise to use everything in the rakudo repo.

[13:09] <ShimmerFairy> I've complained about this horrendous flaw before :)

[13:09] <diakopter> do you know where I can get Debugger::UI::CommandLine ?

[13:10] <ShimmerFairy> via panda, AFAIK. Have to check modules.perl6.org to see where the repo is if you need to install it manually.

[13:11] <ShimmerFairy> diakopter: https://github.com/jnthn/rakudo-debugger/

[13:12] <diakopter> the makefile there is for parrot

[13:12] *** Actualeyes left
[13:13] <ShimmerFairy> I'm afraid I'm only aware of ex-parrots :P  (but in more seriousness, that's what "Debugger::UI::CommandLine links to from the modules page, so I guess ignore the makefile??)

[13:14] <dalek> modules.perl6.org/new-db-builder: c5dd6f1 | (Zoffix Znet)++ | bin/build-project-list.pl:

[13:14] <dalek> modules.perl6.org/new-db-builder: Fix bug with db-file option being ignored

[13:14] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/c5dd6f1232

[13:14] <dalek> modules.perl6.org/new-db-builder: 8bc3ecc | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder.pm:

[13:14] <dalek> modules.perl6.org/new-db-builder: Output log info on what logotype dir is used for the build

[13:14] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/8bc3eccfa2

[13:15] <diakopter> nine_: is your new panda ready?

[13:16] *** Zoffix joined
[13:17] <Zoffix> RE: "Have to check modules.perl6.org to see where the repo is" FWIW this works: http://modules.perl6.org/repo/Debugger::UI::CommandLine

[13:17] *** cdg left
[13:17] <Zoffix> .oO( will git clone http://modules.perl6.org/repo/Debugger::UI::CommandLine work if I add a correct http://modules.perl6.org/repo/Debugger::UI::CommandLine/info/refs redirect as well )

[13:18] <diakopter> I dunno, but I don't know how to build that module. seems I need Terminal::ANSIColor too, which I also don't know how to install [without panda?]

[13:18] *** pierre-vigier left
[13:19] *** pierre-vigier joined
[13:20] *** Skarsnik left
[13:20] <ShimmerFairy> diakopter: without panda, I'd try requiring a fake module (e.g.  perl6 -Mxyzzy  ) and see where Perl 6 is looking, and just install them in one of those locations

[13:20] <diakopter> sure, but what does "install them" mean

[13:20] <diakopter> some kind of pre-compile?

[13:21] <ShimmerFairy> nah, just copy them over (you could precomp, but it's not required)

[13:22] *** Skarsnik joined
[13:23] *** vendethiel left
[13:23] *** vendethiel joined
[13:25] <diakopter> well, I copied that library and its dependency, but trying to use perl6-debug resulted in this:

[13:26] <diakopter> Unhandled exception: ctxlexpad needs an MVMContext at gen/moar/m-CORE.setting:17440  (././CORE.setting.moarvm::24)

[13:26] *** Zoffix left
[13:27] *** Actualeyes joined
[13:28] <diakopter> adding --ll-exception gives Too many positionals passed; expected 1 argument but got 2 at gen/moar/m-Metamodel.nqp:2779  (./blib/Perl6/Metamodel.moarvm:new:0)

[13:28] * jnthn wonders if it's bitrotten somehow

[13:31] <diakopter> jnthn: in case you're curious https://gist.github.com/diakopter/8471d586ad73e3516f0f

[13:31] *** kjs_ left
[13:32] <jdv79> if once were so inclined where would be a good spot to starting into https://rt.perl.org/Public/Bug/Display.html?id=126761 ?

[13:32] <diakopter> also, I don't get why --ll-exception makes a less-low-level exception appear

[13:32] *** kjs_ joined
[13:33] <jdv79> s/starting/start looking/

[13:36] <dalek> rakudo/nom: 849dfcf | lizmat++ | src/core/Buf.pm:

[13:36] <dalek> rakudo/nom: Allow quoted words as input for Buf.unpack

[13:36] <dalek> rakudo/nom: 

[13:36] <dalek> rakudo/nom: I think that actually makes more sense than having a string that

[13:36] <dalek> rakudo/nom: we need to parse.  And that would make a call to Buf.unpack a lot

[13:36] <dalek> rakudo/nom: lighter, not having to do a .comb with a Regex.

[13:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/849dfcf1d1

[13:36] *** kjs_ left
[13:36] <dalek> roast: fd7d309 | lizmat++ | S32-str/unpack.t:

[13:36] <dalek> roast: Add tests for Buf.unpack(<t em plate*>)

[13:36] <dalek> roast: review: https://github.com/perl6/roast/commit/fd7d30901d

[13:42] *** Upasaka left
[13:42] *** dj_goku joined
[13:42] *** dj_goku left
[13:42] *** dj_goku joined
[13:42] *** Upasaka joined
[13:42] <dalek> nqp/js-cps: b980c6d | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:42] <dalek> nqp/js-cps: [js] Avoid emitting CPS-less versions of blocks that only work in CPS-mode.

[13:42] <dalek> nqp/js-cps: review: https://github.com/perl6/nqp/commit/b980c6d00c

[13:42] *** bbarker`` joined
[13:46] *** bbarker` left
[13:48] *** _mg_ joined
[13:51] <dalek> modules.perl6.org/new-db-builder: 571e579 | (Zoffix Znet)++ | / (2 files):

[13:51] <dalek> modules.perl6.org/new-db-builder: Fix incorrect repo URLs

[13:51] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/571e57934d

[13:54] *** bowtie_ left
[13:55] *** llfourn left
[13:55] *** bowtie joined
[14:07] *** _mg_ left
[14:08] *** awwaiid left
[14:08] *** AlexDaniel joined
[14:09] *** awwaiid joined
[14:11] *** virtualsue joined
[14:16] <AlexDaniel> html form got rendered: http://examples.perl6.org/categories/cookbook/19cgi-programming/19-01cgi-script.html

[14:26] *** lucasb joined
[14:27] <dalek> rakudo/nom: 235d085 | lizmat++ | src/core/ (2 files):

[14:27] <dalek> rakudo/nom: Move sprintf handler init to Rakudo::Internals

[14:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/235d0851b5

[14:28] <dalek> roast: cf41db9 | lizmat++ | S02-types/WHICH.t:

[14:28] <dalek> roast: SprintfHandler is no longer public

[14:28] <dalek> roast: 

[14:28] <dalek> roast: Nor should it ever have been, I guess

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/cf41db966c

[14:31] <timotimo> AlexDaniel: that's pretty hilarious, TBH

[14:31] *** pRiVi joined
[14:32] <stmuk_> I'm intending to fix examples.perl6.org today

[14:35] <timotimo> at first i wondered why perl6.org or *something* doesn't prominently advertise the LineNoise module ... then i remembered the startup time thing and no uninstall function %)

[14:39] *** virtualsue left
[14:39] *** zxcvbnm joined
[14:41] *** znpy` joined
[14:41] *** hankache joined
[14:41] *** s_kilk joined
[14:50] *** s_kilk left
[14:50] *** s_kilk joined
[14:51] *** hankache left
[14:55] *** darutoko- joined
[14:59] *** darutoko left
[15:01] *** pierre-vigier left
[15:01] *** znpy` left
[15:06] <dalek> rakudo/nom: 6d9d0f1 | lizmat++ | src/core/Str.pm:

[15:06] <dalek> rakudo/nom: Fix regression caused by removal of .split(:all)

[15:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d9d0f11ab

[15:06] *** BenGoldberg joined
[15:06] *** zxcvbnm left
[15:07] <dalek> modules.perl6.org/new-db-builder: 514298e | (Zoffix Znet)++ | t/02-db-builder/05-build-project-list.pl.t:

[15:07] <dalek> modules.perl6.org/new-db-builder: Add output tests for build-project-list.pl script

[15:07] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/514298e9da

[15:11] *** rindolf left
[15:13] <dalek> modules.perl6.org/new-db-builder: 45700df | (Zoffix Znet)++ | t/02-db-builder/05-build-project-list.pl.t:

[15:13] <dalek> modules.perl6.org/new-db-builder: Test on fewer dists to run faster

[15:13] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/45700dfca9

[15:14] <nine_> diakopter: yes, panda's curli branch works with rakudo/curli

[15:16] *** znpy` joined
[15:18] <diakopter> nine_: cool :)

[15:29] *** qcoh_ joined
[15:34] *** qcoh_ left
[15:45] <dalek> modules.perl6.org/new-db-builder: cbc06bc | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/ (2 files):

[15:45] <dalek> modules.perl6.org/new-db-builder: Add docs for ModulesPerl6::DbBuilder::Dist::PostProcessor::TravisCI

[15:45] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/cbc06bcce4

[15:47] *** Ben_Goldberg joined
[15:49] *** [TuxCM] joined
[15:50] *** Ben_Goldberg left
[15:50] <[TuxCM]> I want 44 random order numers out of the range 10101..99998, so I typed:

[15:50] *** Ben_Goldberg joined
[15:50] <[TuxCM]> perl6 -e'(10101..99998).pick(44).sort>>.say'

[15:50] <[TuxCM]> and got 44 numers, but they were all the same

[15:50] *** BenGoldberg left
[15:51] <dalek> modules.perl6.org/new-db-builder: 7ff7bd0 | (Zoffix Znet)++ | t/02-db-builder/02-github-source-and-source-base-class.t:

[15:51] <dalek> modules.perl6.org/new-db-builder: Improve test coverage

[15:51] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/7ff7bd030b

[15:51] <psch> [TuxCM]: seems like it's a mis-optimization on Range.pick

[15:52] <psch> [TuxCM]: you can work around that by reifying the Range with "eager" inside the parens

[15:52] <psch> m: (eager 10101..99998).pick(44).sort>>.say # as such

[15:52] <camelia> rakudo-moar 6d9d0f: OUTPUT«11333␤13214␤13649␤18426␤18534␤19614␤23206␤24780␤25847␤27280␤30241␤37977␤38675␤40013␤40078␤40151␤43761␤46868␤48396␤48507␤48531␤49852␤50702␤51191␤51301␤54160␤54484␤55260␤57537␤59749␤63173␤71499␤…»

[15:52] <[TuxCM]> so it is a bug?

[15:52] <psch> i hope so, it'd be weird design otherwise :)

[15:52] *** virtualsue joined
[15:53] <timotimo> m: say (10101..99998).pick(10)

[15:53] <camelia> rakudo-moar 6d9d0f: OUTPUT«(31845 63838 61319 60171 35864 96036 65385 51705 32185 33410)␤»

[15:53] <timotimo> m: say (10101..99998).pick(10).sort

[15:53] <camelia> rakudo-moar 6d9d0f: OUTPUT«(59599 59599 59599 59599 59599 59599 59599 59599 59599 59599)␤»

[15:53] <timotimo> um ...

[15:53] <timotimo> sort is the culprit here. wtf?

[15:53] <psch> huh

[15:53] <psch> that's even weirder..?

[15:53] <psch> m: (2,3,1).sort.say

[15:53] <camelia> rakudo-moar 6d9d0f: OUTPUT«(1 2 3)␤»

[15:53] <lucasb> locally I get 44 times the number 35252 :)

[15:53] <timotimo> m: my @a = (10101..99998).pick(10); say @a.perl; say @a.sort.perl

[15:53] <camelia> rakudo-moar 6d9d0f: OUTPUT«[18593, 32665, 33280, 92199, 96658, 28720, 32128, 53865, 30880, 59247]␤(18593, 28720, 30880, 32128, 32665, 33280, 53865, 59247, 92199, 96658)␤»

[15:53] <psch> lucasb: the number changes with each run i bet ;)

[15:54] <timotimo> perhaps .sort on a seq is problematic?

[15:54] <[TuxCM]> I leave this up to you lot

[15:54] <lucasb> psch: oh, yeah, of course, only tried once :)

[15:54] <psch> m: Seq.new([1,2,3]).sort

[15:54] <camelia> rakudo-moar 6d9d0f: OUTPUT«Type check failed in binding $iter; expected Iterator but got Array␤  in block <unit> at /tmp/4H9NMeD6Eq:1␤␤»

[15:54] <psch> uhm

[15:55] <timotimo> m: Seq.new([1,2,3].iterator).sort

[15:55] <camelia> rakudo-moar 6d9d0f: ( no output )

[15:55] <timotimo> m: Seq.new([1,2,3].iterator).sort.say

[15:55] <camelia> rakudo-moar 6d9d0f: OUTPUT«(1 2 3)␤»

[15:57] <lucasb> about the examples site not escaping html when rendering without syntax highligthing, I think the line is this one: https://github.com/perl6/perl6-examples/blob/master/lib/Pod/Htmlify.pm6#L205

[15:58] <lucasb> "<pre>" ~ $node.contents.join ~ "</pre>"

[15:58] <lucasb> I think Pod::To::HTML would have done the job, but since a code callback was added, it uses that

[15:59] *** cognominal left
[15:59] <psch> m: (1..10).pick(5).WHAT.say

[15:59] <camelia> rakudo-moar 6d9d0f: OUTPUT«(Seq)␤»

[15:59] <psch> m: (1..10).pick(5).sort.say

[15:59] <camelia> rakudo-moar 6d9d0f: OUTPUT«(1 3 4 9 10)␤»

[16:00] <psch> m: (10000..99999).pick(5).sort.say

[16:00] <camelia> rakudo-moar 6d9d0f: OUTPUT«(39558 39558 39558 39558 39558)␤»

[16:00] <psch> m: (2..99999).pick(5).sort.say

[16:00] <camelia> rakudo-moar 6d9d0f: OUTPUT«(6575 6575 6575 6575 6575)␤»

[16:00] <psch> m: (1..99999).pick(5).sort.say

[16:00] <camelia> rakudo-moar 6d9d0f: OUTPUT«(59693 59693 59693 59693 59693)␤»

[16:00] <psch> m: (1..1000).pick(5).sort.say

[16:00] <camelia> rakudo-moar 6d9d0f: OUTPUT«(385 385 385 385 385)␤»

[16:00] <psch> m: (1..256).pick(5).sort.say

[16:00] <camelia> rakudo-moar 6d9d0f: OUTPUT«(230 230 230 230 230)␤»

[16:00] <psch> m: (1..255).pick(5).sort.say

[16:00] <camelia> rakudo-moar 6d9d0f: OUTPUT«(231 231 231 231 231)␤»

[16:00] <RabidGravy> :-\

[16:01] *** raiph joined
[16:01] <psch> m: (0..14).pick(5).sort.say; (0..15).pick(5).sort.say

[16:01] <camelia> rakudo-moar 6d9d0f: OUTPUT«(0 5 6 13 14)␤(11 11 11 11 11)␤»

[16:01] <psch> found another magic number \o/

[16:01] <Skarsnik> lol

[16:01] *** pierre-vigier joined
[16:04] <psch> m: ^2 .pick(2).sort.say

[16:04] <camelia> rakudo-moar 6d9d0f: OUTPUT«Cannot find method 'say': no method cache and no .^find_method␤  in block <unit> at /tmp/87uWfoPQXb:1␤␤»

[16:04] <psch> ...?

[16:04] <lizmat> I think it's an artefact from .sort

[16:06] *** pierre-vigier left
[16:06] * lizmat is looking into it

[16:07] *** Zoffix joined
[16:08] *** balazs joined
[16:08] <jnthn> Note that .sort>>.say is a bit useless, given >> does not promise ordering of side-effects :)

[16:08] <Zoffix> Seems to be bugged on multiples of 3

[16:08] <Zoffix> m: (0..6).pick(2).sort.say; (0..12).pick(4).sort.say; (0..18).pick(6).sort.say;

[16:08] <camelia> rakudo-moar 6d9d0f: OUTPUT«(2 2)␤(2 2 2 2)␤(11 11 11 11 11 11)␤»

[16:09] <psch> m: (0..15).pick(5).sort.say

[16:09] <camelia> rakudo-moar 6d9d0f: OUTPUT«(13 13 13 13 13)␤»

[16:09] <psch> 0..6 is 7 elements

[16:09] <geekosaur> not just multiples of 3; (1..256) and (1..255) both did it

[16:11] <Zoffix> m: (0..15).pick(5).sort.say; my @z = (0..15).pick(5); @z.sort.say;

[16:11] <camelia> rakudo-moar 6d9d0f: OUTPUT«(0 0 0 0 0)␤(0 3 8 14 15)␤»

[16:12] <geekosaur> o.O

[16:13] <Zoffix> m: (0..15).pick(5).sort.say; my @z = (0..15); @z.pick(5).sort.say;

[16:13] <camelia> rakudo-moar 6d9d0f: OUTPUT«(4 4 4 4 4)␤(6 7 9 11 14)␤»

[16:13] <Zoffix> m: (eager 0..15).pick(5).sort.say;

[16:13] <camelia> rakudo-moar 6d9d0f: OUTPUT«(0 6 8 10 14)␤»

[16:14] <Zoffix> oh that was already mentioned

[16:15] *** lizmat left
[16:18] <zengargoyle> good * #perl6

[16:19] <Zoffix> \o

[16:19] <dalek> modules.perl6.org/new-db-builder: d482d0d | (Zoffix Znet)++ | Build.PL:

[16:19] <dalek> modules.perl6.org/new-db-builder: Remove unused prereq

[16:19] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/d482d0d8e4

[16:19] <lucasb> would it make sense to make .pick warn when you try to get more than the number of elements? (with the exception of whatever)

[16:19] <psch> m: 5.pick(10)

[16:19] <camelia> rakudo-moar 6d9d0f: ( no output )

[16:19] <lucasb> m: say (1..5).pick(42)

[16:19] <camelia> rakudo-moar 6d9d0f: OUTPUT«(1 3 5 2 4)␤»

[16:19] <psch> m: 5.pick(10).say

[16:19] <camelia> rakudo-moar 6d9d0f: OUTPUT«(5)␤»

[16:20] <lucasb> I mean, something like the warn/error: "You can't pick that many distinct elements", something like that

[16:20] <zengargoyle> dunno, seems you'd sometimes want to .pick a maximum number of somethings no matter how many things you have to pick from.

[16:20] <Zoffix> lucasb, I wouldn't want that. I rather it pick the maximum number. It's not all the time that I'll have a constant as an argument and I wouldn't want to manually check it's not above the range just to avoid a warning

[16:20] <zengargoyle> @contestants.pick($winners)

[16:27] <[TuxCM]> I was just using perl6 in Sinterklaas-preparation :)

[16:27] *** CurtisOvidPoe left
[16:28] *** rurban left
[16:28] *** zhmylove left
[16:28] *** zhmylove joined
[16:28] *** rurban joined
[16:28] *** CurtisOvidPoe joined
[16:29] <timotimo> note there's also .pick(*)

[16:29] <MadcapJake> jnthn: As far as how bright/conspicuous twigils are, that's down to the theme but if you're planning on sticking with the One Dark theme, you could add this to your stylesheet (Edit -> Open Your Stylesheet): atom-text-editor::shadow { .support.class.twigil { color: #be5046; } }

[16:29] *** mattp__ left
[16:30] <MadcapJake> that will work for any theme but the color chosen is a dark red that is already used for other elements of the One Dark theme.

[16:32] *** uruwi left
[16:33] <Zoffix> Seen that editor that looks like shooting stuff when you're typing? https://twitter.com/JoelBesada/status/670343885655293952

[16:33] <Zoffix> Pretty need.

[16:33] <MadcapJake> yeah he wrote an atom plugin that does it too :)

[16:33] *** iH2O joined
[16:33] <Zoffix> \o/

[16:33] <MadcapJake> https://atom.io/packages/activate-power-mode

[16:34] * Zoffix doesn't have Atom on this box :'(

[16:34] <MadcapJake> 32bit right?

[16:34] <Zoffix> yea

[16:34] <timotimo> as soon as "THIS VERSION IS VERY BUGGY RIGHT NOW" is no longer true, i'll totally switch to atom for everything

[16:34] <Skarsnik> lol I need this xD

[16:34] <Skarsnik> This look fun

[16:35] *** espadrine joined
[16:35] <MadcapJake> timotimo: what version? it's already at 1.2 and 1.3 is almost out of beta

[16:35] *** mattp__ joined
[16:35] <Zoffix> My Perl 6 looks like this right now: http://i.imgur.com/NteCQnH.png :'(

[16:35] <timotimo> it says exactly that on that site you've linked to

[16:35] <Zoffix> timotimo, that's the notice for that weird plugin, not Atom :)

[16:36] <timotimo> yeah

[16:36] <Zoffix> k

[16:36] <MadcapJake> oh lol :D

[16:36] <timotimo> but "that weird plugin" is the thing that'd convince me to switch to atom

[16:36] <Zoffix> heh

[16:37] <MadcapJake> Zoffix: that is a sad monochrome screen :(

[16:37] <Zoffix> MadcapJake, mst codes like that all the time :P

[16:38] *** khw joined
[16:38] *** qcoh_ joined
[16:38] *** xfix left
[16:38] <Skarsnik> I use kate, the perl6 coloration is meh, but it's not that bad

[16:39] <[TuxCM]> jnthn, do you need a shorter test case for that core dump?

[16:39] <MadcapJake> check this theme out: https://atom.io/themes/hacking-the-kernel

[16:40] <Skarsnik> it look neat x)

[16:42] <dalek> modules.perl6.org/new-db-builder: 3b0cc57 | (Zoffix Znet)++ | / (11 files):

[16:42] <dalek> modules.perl6.org/new-db-builder: Prettify code

[16:42] <dalek> modules.perl6.org/new-db-builder: review: https://github.com/perl6/modules.perl6.org/commit/3b0cc57cb1

[16:42] <Zoffix> That's it. Merging

[16:43] <MadcapJake> looks pretty good with Perl 6: http://imgur.com/SZZOjU4

[16:43] <Zoffix> look like a Fallout4 Pip Boy

[16:44] <MadcapJake> haha yeah!

[16:44] <dalek> Heuristic branch merge: pushed 114 commits to modules.perl6.org by zoffixznet

[16:45] <iH2O> looks like you folks have been investing a lot of work in this new potentially-cult language

[16:46] <Zoffix> iH2O, yup

[16:46] <iH2O> lol

[16:46] <jnthn> [TuxCM]: The utf8-c8 one?

[16:47] <jnthn> [TuxCM]: In which case no, I just need time and to not have a headache, and I'll be able to figure it out :)

[16:47] <Zoffix> m: say ༤ / ༨ + ༪ * ༤; 

[16:47] <camelia> rakudo-moar 6d9d0f: OUTPUT«2.5␤»

[16:47] <[TuxCM]> ok

[16:47] <Zoffix> iH2O, ^ and now we can do Tibetan math! The goal is complete: P

[16:47] <[TuxCM]> and yes, that was the one I meant

[16:48] *** kjs_ joined
[16:49] *** nebuchadnezzar left
[16:49] *** nebuchadnezzar joined
[16:49] *** [TuxCM] left
[16:50] *** balazs left
[16:52] *** jevin_ left
[16:56] *** Sgeo_ left
[16:57] *** jevin joined
[16:57] <raiph> m: my Stringy $foo = "27"; say 1 + $foo # I was hoping that use of `Stringy` rather than `Str` would avoid Cool. Is it realistic to anticipate the ability to write a module, or use a later Perl 6 version, that allows one to avoid Cool / implicit coercion and instead force a compile-time error in this scenario?

[16:57] <camelia> rakudo-moar 6d9d0f: OUTPUT«28␤»

[16:58] *** cgfbee left
[16:59] <dalek> modules.perl6.org: c7c5e5d | (Zoffix Znet)++ | bin/build-project-list.pl:

[16:59] <dalek> modules.perl6.org: Fix default app path

[16:59] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/c7c5e5d9f4

[17:01] *** cgfbee joined
[17:03] *** vendethiel left
[17:04] <psch> m: say Stringy ~~ Cool

[17:04] <camelia> rakudo-moar 6d9d0f: OUTPUT«True␤»

[17:04] <dalek> perl6-roast-data: 4e66910 | coke++ | / (9 files):

[17:04] <dalek> perl6-roast-data: today (automated commit)

[17:04] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4e669102d0

[17:06] *** MadcapJake left
[17:08] *** MadcapJake joined
[17:13] *** yqt joined
[17:13] <psch> raiph: it depends on how general you want that

[17:13] <psch> raiph: what already works (but might be too specific) is just but-ing a role with a Numeric that dies 

[17:13] <raiph> m: say Numeric ~~ Cool

[17:13] <camelia> rakudo-moar 6d9d0f: OUTPUT«True␤»

[17:14] <psch> m: my $x = "26" but role { method Numeric { die "nope" } }; say 1 + $x # as here for example

[17:14] <camelia> rakudo-moar 6d9d0f: OUTPUT«nope␤  in method Numeric at /tmp/4bVQobqNRy:1␤  in block <unit> at /tmp/4bVQobqNRy:1␤␤»

[17:14] <psch> +"onto the Str"

[17:16] <RabidGravy> psch++ # I was just about to paste exactly the same thing

[17:19] *** lucasb left
[17:21] *** s_kilk left
[17:21] *** kjs_ left
[17:21] <psch> i guess another approach could be exporting a ClassHOW that skips Cool in MRO based type checks or something like 

[17:21] <psch> +that

[17:22] <psch> m: say &infix:<+>.candidates>>.signature

[17:22] <camelia> rakudo-moar 6d9d0f: OUTPUT«No appropriate parametric role variant available for 'Rational'␤  in any specialize at gen/moar/m-Metamodel.nqp:2511␤  in any compose at gen/moar/m-Metamodel.nqp:2821␤  in any make_pun at gen/moar/m-Metamodel.nqp:1658␤  in any find_method at gen/mo…»

[17:22] <psch> m: say &infix:<+>.candidates

[17:22] <camelia> rakudo-moar 6d9d0f: OUTPUT«No appropriate parametric role variant available for 'Rational'␤  in any specialize at gen/moar/m-Metamodel.nqp:2511␤  in any compose at gen/moar/m-Metamodel.nqp:2821␤  in any make_pun at gen/moar/m-Metamodel.nqp:1658␤  in any find_method at gen/mo…»

[17:23] *** Actualeyes left
[17:24] <[Coke]> (macros) I think if we mark it as experimental at least in the docs we'll be ok. if we want, we could make it need "use MONKEY_MACROS" or some such.

[17:27] <raiph> psch: Thanks!

[17:30] <dalek> modules.perl6.org: 208cbe3 | (Zoffix Znet)++ | bin/build-project-list.pl:

[17:30] <dalek> modules.perl6.org: Exit with non-success so we could log properly

[17:30] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/208cbe382f

[17:33] *** cdg joined
[17:34] *** iH2O left
[17:35] *** cdg left
[17:36] <Zoffix> .tell moritz I've updated modules.perl6.org builder so now it no longer uses /var/www/modules.perl6.org dir. I've updated the cron job and all and cleaned the /var/www/modules.perl6.org dir but left the dir itself in place, as I see it's specified in Apache's config as document root and it'll whine if it's missing. The build script now pauses for 5 seconds after each dist, so we don't hit GitHub's rate limit when we get more dists in the ecosystem.

[17:36] <yoleaux> Zoffix: I'll pass your message to moritz.

[17:36] <Zoffix> .tell moritz The cron still runs it on 20,50 minutes. That's fine. If the script is still running, attempt to run a second copy will just exit. Since logging that from cron line like before would overwrite the log, I moved it into the update bash script to log into a temp file and only a copy the file to update.log when build script finishes a build.

[17:36] <yoleaux> Zoffix: I'll pass your message to moritz.

[17:38] <Zoffix> .oO( this channel needs a Markov Chain bot... )

[17:38] <moritz> Zoffix: ok, thanks

[17:38] <yoleaux> 17:36Z <Zoffix> moritz: I've updated modules.perl6.org builder so now it no longer uses /var/www/modules.perl6.org dir. I've updated the cron job and all and cleaned the /var/www/modules.perl6.org dir but left the dir itself in place, as I see it's specified in Apache's config as document root and it'll whine if it's missing. The build script now pauses for 5 seconds after each dist, so we don't hit GitHub's rate limit when we get more dists in

[17:38] <yoleaux>  the ecosystem.

[17:38] <yoleaux> 17:36Z <Zoffix> moritz: The cron still runs it on 20,50 minutes. That's fine. If the script is still running, attempt to run a second copy will just exit. Since logging that from cron line like before would overwrite the log, I moved it into the update bash script to log into a temp file and only a copy the file to update.log when build script finishes a build.

[17:38] *** cdg joined
[17:38] *** pierre-vigier joined
[17:41] *** zengargoyle left
[17:41] *** zengargoyle joined
[17:42] *** rurban left
[17:42] *** zengargoyle left
[17:43] *** pierre-vigier left
[17:47] *** csd_ left
[17:48] *** zengargoyle joined
[17:50] *** csd_ joined
[17:53] *** espadrine left
[17:55] *** bpmedley joined
[17:58] *** nebuchadnezzar left
[17:58] *** zengargoyle left
[17:58] <dalek> modules.perl6.org: 68274e7 | (Zoffix Znet)++ | TODO-IDEAS.md:

[17:58] <dalek> modules.perl6.org: Remove "Cleanup db build script" from TODO; that"s already done

[17:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/68274e7268

[18:01] *** CIAvash joined
[18:03] *** nebuchad` joined
[18:04] *** nebuchad` is now known as nebuchadnezzar

[18:11] *** lucasb joined
[18:14] *** xfix joined
[18:16] *** zengargoyle joined
[18:21] *** pmurias left
[18:33] *** skids joined
[18:40] *** yqt left
[18:44] *** _mg_ joined
[18:45] <lucs> In some roast test files, I see  use lib 't/spec/packages';  What/where is that?

[18:46] <dalek> ecosystem: 21f8d11 | RabidGravy++ | META.list:

[18:46] <dalek> ecosystem: Add WebService::Soundcloud

[18:46] <dalek> ecosystem: 

[18:46] <dalek> ecosystem: https://github.com/jonathanstowe/WebService-Soundcloud

[18:46] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/21f8d1182e

[18:48] <Zoffix>  w00t

[18:48] <lucasb> lucs: iiuc, it expects to be run from the rakudo root dir, so t/spec and the roast dir are the same

[18:48] <Zoffix> RabidGravy++

[18:49] *** edehont joined
[18:49] <lucasb> lucs: so t/spec/packages is the directory roast/packages in the roast repo

[18:49] <RabidGravy> won't do downloads properly until I have  made a big change to HTTP::UserAgent

[18:51] <lucs> lucasb: How does that work? Are you saying that perl knows it should replace "t/spec" with "roast"?

[18:52] *** Begi left
[18:53] <RabidGravy> it just checks the files out there

[18:54] <lucasb> lucs: when you say 'make spectest' in the rakudo root dir, it git clones roast into t/spec

[18:58] <dalek> modules.perl6.org: 7124208 | (Zoffix Znet)++ | bin/build-project-list.pl:

[18:58] <dalek> modules.perl6.org: Use shorter dist build interval; 3secs is still safe

[18:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/71242088f7

[18:58] *** edehont left
[18:59] <lucs> lucasb: Hmm... I'd like to run (after modification) individual tests using a freshly modified/recompiled (via .../rakudobrew build moar) perl6, something like this:  perl6 .../roast/S42-foo/bar.t

[19:00] *** brrt joined
[19:01] <lucs> I'm guessing 'make spectest' runs the whole test suite, which I'd like to avoid for now.

[19:01] <brrt> good * #perl6

[19:02] <psch> lucs: there are make target for every spectest file iff you have roast checked out to t/spec

[19:02] <psch> lucs: in general for CORE hacking i strongly recommend checking out rakudo manually

[19:03] <lucs> psch: Um, any instructions online somewhere to do that?

[19:03] <psch> git clone https://github.com/rakudo/rakudo rakudo && cd rakudo && perl Configure.pl --backends=moar --gen-nqp --gen-moar --make-install

[19:04] <lucs> Oh cool, thanks.

[19:04] <lucs> I'll let you know how it goes...

[19:05] *** Sgeo joined
[19:11] <[Coke]> rakudo-jvm build failures are known?

[19:12] <dalek> roast/curli: 9a3c980 | lizmat++ | S02-types/WHICH.t:

[19:12] <dalek> roast/curli: Add test for new X::Pragma::CannotPrecomp class

[19:12] <dalek> roast/curli: review: https://github.com/perl6/roast/commit/9a3c980fcf

[19:12] <dalek> roast/curli: 7dc6365 | lizmat++ | S02-types/WHICH.t:

[19:12] <dalek> roast/curli: Add X::Package::UseLib

[19:12] *** dalek left
[19:12] *** dalek joined
[19:12] *** ChanServ sets mode: +v dalek

[19:12] <dalek> Heuristic branch merge: pushed 111 commits to rakudo/curli by niner

[19:13] <mst> I am really unable to fathom who thought X for exceptions was a remotely good idea

[19:13] <mst> I foresee another 10 years of "no, you can't call your examples X, Y and Z" to go with the "no, you can't call your examples A, B and C" we do over in #perl

[19:13] *** kjs_ joined
[19:14] *** Begi joined
[19:14] <mst> I suppose I should've noticed and complained about this several years ago but still: ew :)

[19:14] *** user3 joined
[19:15] <nine_> I guess next time we should give ourselves a decade or two more to solicit enough feedback ;)

[19:15] <user3> rakudo 2015.11 won't' compile on my system http://pastebin.com/6pCq2HgP

[19:15] <stmuk_> nine_++

[19:16] <dalek> roast: 9a3c980 | lizmat++ | S02-types/WHICH.t:

[19:16] <dalek> roast: Add test for new X::Pragma::CannotPrecomp class

[19:16] <dalek> roast: review: https://github.com/perl6/roast/commit/9a3c980fcf

[19:16] <dalek> roast: 7dc6365 | lizmat++ | S02-types/WHICH.t:

[19:16] <dalek> roast: Add X::Package::UseLib

[19:16] *** dalek left
[19:16] *** dalek joined
[19:16] *** ChanServ sets mode: +v dalek

[19:16] <brrt> X is short though

[19:17] <stmuk_> is there a bool version of ~$x +$x etc?

[19:17] *** Mokok left
[19:17] <stmuk_> ?

[19:17] <brrt> i auppose the idea was that exceptions are common and should bw huffma-coded

[19:18] <brrt> i think ?$x

[19:18] <Ben_Goldberg> stmuk_, so $x

[19:18] <stmuk_> oh yeah thanks I forgot that

[19:18] <FROGGS_> user3: a workaround might be to install libatomic-ops-dev

[19:19] <brrt> m: my $x = 12; say ?$x;

[19:19] <camelia> rakudo-moar 6d9d0f: OUTPUT«True␤»

[19:19] <user3> FROGGS_: noted

[19:19] <stmuk_> stmuk-- # it's fairly obvious from the cheatsheet too

[19:19] <dalek> nqp: 9559a26 | (Stefan Seifert)++ | tools/build/MOAR_REVISION:

[19:19] <dalek> nqp: Bump MOAR_REVISION for deadlock fixes

[19:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9559a26cc7

[19:20] <brrt> there are no dumb questions stmuk

[19:20] <dalek> rakudo/nom: 82f1062 | (Stefan Seifert)++ | tools/build/NQP_REVISION:

[19:20] <dalek> rakudo/nom: Bump NQP revision to get MoarVM deadlock fixes

[19:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/82f1062825

[19:20] <nine_> curli is merged!

[19:20] <FROGGS_> O.o

[19:20] <FROGGS_> \o/

[19:20] <FROGGS_> nine++

[19:20] <diakopter> nine_++

[19:20] <brrt> \o/ nine++

[19:20] <stmuk_> precomp in nom?

[19:21] <FROGGS_> nine_: now I need to switch branches :o)

[19:21] <psch> [Coke]: yeah, i think nqp-j doesn't handle the cclass for 𝑒 correctly

[19:21] <psch> [Coke]: which causes the misparse and breaks the build

[19:21] <nine_> Please note that I do expect a couple of rough days ahead. I'd have liked to work a little more on a smooth transition but we're just too close to the release

[19:22] <FROGGS_> true

[19:22] <MadcapJake> n00b question: what did the curli branch do?

[19:23] <FROGGS_> MadcapJake: you install into a database (repository) now

[19:23] <nine_> Merged curli in panda, too.

[19:23] <MadcapJake> as in modules are installed into a db?

[19:23] <FROGGS_> MadcapJake: I mean, the modules get installed into a repository

[19:23] <FROGGS_> aye

[19:24] <hoelzro> timotimo: working on the docker image right now

[19:24] <nine_> MadcapJake: you get all the benefits of precompilation pretty much for free and may install as many modules as you like without having it affect rakudo's startup speed.

[19:24] <brrt> it advancifies module installation for robustness and features

[19:24] <hoelzro> as far as security goes, it's one of the official docker images, so I think that's in their hands.  I would hope that they would update their base image and rebuild our image on top of that in face of critical security issues

[19:24] *** BenGoldberg joined
[19:24] <MadcapJake> oh very nice! thanks for the explanations everyone!

[19:25] <moritz> the main benefit speed-wise is precompilation that curli enables again

[19:25] <brrt> the converse, installing modules having am effect on startup time was bonkers

[19:25] <moritz> nine_: rakudo star manually precompiles its modules right now

[19:25] *** BenGoldberg left
[19:26] <moritz> nine_: I guess that's not recommended anymore after curli, right?

[19:26] *** Ben_Goldberg left
[19:26] <timotimo> hoelzro: awesome

[19:26] <nine_> moritz: the code that precompiles won't work anymore anyway

[19:26] *** user3 left
[19:26] <nine_> moritz: the interfaces changed drastically.

[19:26] *** BenGoldberg joined
[19:26] <moritz> nine_: so what should star do instead?

[19:26] <FROGGS_> nine_: it just calls `perl6 --target=mbc --output=..`

[19:27] <FROGGS_> moritz: what if it used panda?

[19:27] <nine_> moritz: install with something like $*REPO.repo-chain.first(CompUnit::Repository::Installable).install(...)

[19:27] <jnthn> nine_++ \o/

[19:29] <moritz> FROGGS_: that would be awesome

[19:30] <zengargoyle> nine_++ woo hoo

[19:31] <hoelzro> nine_++

[19:31] <jnthn> mst: Um, but we already fixed declaring a class X { } breaking reporting of compile-time errors, and it doesn't break the built-ins reporting errors either, and presumably in something small enough to use X as an example class name you're probably not going to be declaring/using typed exceptions yourself. :)

[19:31] <nine_> Seems like t/spec/S10-packages/precompilation.t takes some attempts to pass (but then does consistently). I'll have a closer look tomorrow. Need a bit of relaxation now :)

[19:32] <moritz> nine_++

[19:32] <FROGGS_> nine_: rest well :o)

[19:32] <moritz> FROGGS_: will you look into bootstrapping star with panda?

[19:32] <jnthn> mst: So it's not that likely to be much trouble any more. :)

[19:32] <jnthn> nine_: Enjoy some well-earned rest!

[19:32] <FROGGS_> moritz: can do that, yes

[19:33] <MadcapJake> will rakudobrew upgrade correctly?

[19:34] *** AlexDaniel left
[19:35] <mst> jnthn: mmmm ... colour me "I don't have an argument nearly sufficient to justify changing your mind, but I'm still suspicious" at this point then

[19:39] *** kjs_ left
[19:42] <lucs> psch: Worked like a charm, as did  make spectest .

[19:43] *** TEttinger joined
[19:46] <dalek> mu: c2b3110 | moritz++ | misc/perl6advent-2015/schedule:

[19:46] <dalek> mu: p6advent: Claim day 1, since nobody else seems to do it :(

[19:46] <dalek> mu: 

[19:46] <dalek> mu: also add author information to day 2

[19:46] <dalek> mu: review: https://github.com/perl6/mu/commit/c2b3110669

[19:46] <flussence> «Stage parse      :  96.158» -- it grew another 20% :(

[19:48] <flussence> «Could not find Panda:ver<True>:auth<True>:api<True> in:»  -- I guess I need to update that too...

[19:48] <colomon> woof, not a lot of days claimed yet.

[19:49] <moritz> aye :(

[19:54] *** Mhoram joined
[19:55] <moritz> .uni cominbing ced

[19:55] <brrt> moritz: i may be able to write some day, if there is interest in my stories

[19:55] <moritz> .u cedil

[19:55] <yoleaux> U+00B8 CEDILLA [Sk] (¸)

[19:55] <yoleaux> U+00C7 LATIN CAPITAL LETTER C WITH CEDILLA [Lu] (Ç)

[19:55] <yoleaux> U+00E7 LATIN SMALL LETTER C WITH CEDILLA [Ll] (ç)

[19:55] <moritz> brrt: oh yes, please

[19:55] <[Coke]> m: say 32:wq;

[19:55] <camelia> rakudo-moar 82f106: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rIUURywoHQ␤You can't adverb that␤at /tmp/rIUURywoHQ:1␤------> 3say 32:wq7⏏5;␤    expecting any of:␤        pair value␤»

[19:55] <MadcapJake> i'll try and come up with something, anyone have a good beginner/intermediate advent idea that I could do?

[19:55] *** Mhoram left
[19:56] <moritz> MadcapJake: since it's your area of work these past days/weeks, why not write about Perl 6 support in Atom?

[19:56] <MadcapJake> ok! I didn't know that was a good area!

[19:56] <moritz> MadcapJake: everything that's related to Perl 6, and hasn't been beaten to death, is a good topic :-)

[19:57] <[Coke]> m: my $a = 32; say $a:wq;

[19:57] <camelia> rakudo-moar 82f106: OUTPUT«5===SORRY!5=== Error while compiling /tmp/10vdAypzrW␤Variable '$a:wq' is not declared␤at /tmp/10vdAypzrW:1␤------> 3my $a = 32; say 7⏏5$a:wq;␤»

[19:57] <MadcapJake> hehe, i'll look over the brainstorming list and see if I can find another one I could do.

[19:57] <[Coke]> I swear I just had a stray :wq in my code that compiled.

[19:58] *** kjs_ joined
[19:59] *** vendethiel joined
[20:00] *** Mhoram joined
[20:00] *** Mhoram left
[20:00] <RabidGravy> is there a reason that modules.perl.org says "222 known Perl 6 modules" when the META.list has 462

[20:01] <moritz> RabidGravy: likely a bug. Zoffix, something for you to look at :-)

[20:03] *** rindolf joined
[20:03] <brrt> moritz: ok. will do some day :-)

[20:04] <moritz> m: my int @a[4][5]

[20:04] <camelia> rakudo-moar 82f106: OUTPUT«5===SORRY!5=== Error while compiling /tmp/3sRP5DnoKM␤Multiple shapes not yet understood␤at /tmp/3sRP5DnoKM:1␤------> 3my int @a[4][5]7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[20:04] <moritz> m: my int @a[4;5]

[20:04] <camelia> rakudo-moar 82f106: ( no output )

[20:04] <moritz> m: my int32 @a[4;5]

[20:04] <camelia> rakudo-moar 82f106: ( no output )

[20:04] *** kjs_ left
[20:07] <dalek> rakudo/nom: dbfb5e2 | coke++ | src/core/Num.pm:

[20:07] <dalek> rakudo/nom: avoid jvm build issue

[20:07] <dalek> rakudo/nom: 

[20:07] <dalek> rakudo/nom: psch++ for pointing out the issue.

[20:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dbfb5e2333

[20:07] <[Coke]> psch++ ^^ there's a workaround.

[20:08] <BenGoldberg> .u e

[20:08] <yoleaux> U+0065 LATIN SMALL LETTER E [Ll] (e)

[20:09] <BenGoldberg> .u 𝑒

[20:09] <yoleaux> U+1D452 MATHEMATICAL ITALIC SMALL E [Ll] (𝑒)

[20:11] <BenGoldberg> Just a WAG, but I suppose jvm doesn't yet grok unicode above u+ffff.

[20:14] <stmuk_> can I request anyone likely to attend my LPW talk next month do the following?

[20:14] *** darutoko- left
[20:14] <stmuk_> disable javascript to reveal the SUBMIT on http://act.yapc.eu/lpw2015/talk/6470 and add to personal schedule?

[20:16] <dalek> mu: c515940 | (Jake Russo)++ | misc/perl6advent-2015/schedule:

[20:16] <dalek> mu: Update schedule

[20:16] <dalek> mu: review: https://github.com/perl6/mu/commit/c515940529

[20:16] <dalek> mu: ab17807 | RabidGravy++ | misc/perl6advent-2015/schedule:

[20:16] <dalek> mu: Merge pull request #11 from MadcapJake/master

[20:16] <dalek> mu: 

[20:16] <dalek> mu: Update schedule

[20:16] <dalek> mu: review: https://github.com/perl6/mu/commit/ab17807600

[20:17] *** brrt left
[20:19] *** yqt joined
[20:19] <stmuk_> and also upvote the other perl6 talks :)

[20:25] *** Praise left
[20:26] *** Praise- joined
[20:26] *** Praise- left
[20:26] *** Praise- joined
[20:26] <moritz> MadcapJake: please /msg me your email address, so that I can send you an invitation for the advent blog

[20:27] *** telex left
[20:28] *** telex joined
[20:29] *** hankache joined
[20:30] <dalek> perl6-examples: c1f959c | (Steve Mynott)++ | lib/Pod/Htmlify.pm6:

[20:30] <dalek> perl6-examples: fix conditional breakage due to require return value change - this should reenable colour syntax and fix current website issues

[20:30] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/c1f959c932

[20:35] *** japhb left
[20:35] *** japhb joined
[20:42] *** japhb left
[20:42] *** Begi left
[20:42] *** skids left
[20:42] *** xfix left
[20:42] *** CIAvash left
[20:42] *** csd_ left
[20:43] *** xfix_ joined
[20:43] *** cognominal joined
[20:46] *** geraud joined
[20:56] <timotimo> o/

[20:56] <hankache> hi timotimo

[20:56] <timotimo> hey hankache 

[20:57] <timotimo> moritz: can you suggest an advent topic for me, too?

[20:57] *** csd_ joined
[20:58] <Mouq> Is there already an understood way to get enum values from C code using NativeCall?

[20:59] <hankache> the link to Advent calendars in http://perl6.org/documentation/ is dead

[20:59] <RabidGravy> I think you'd have to make a small C wrapper that did it for you

[21:00] <hankache> what is it btw?

[21:00] <Mouq> nine_++

[21:00] <FROGGS_> Mouq: I just declare a Perl 6 enum using the documented names/values

[21:01] <FROGGS_> hankache: https://perl6advent.wordpress.com/

[21:01] *** domidumont1 left
[21:02] <FROGGS_> hankache: the links do not seem dead

[21:02] <Zoffix> RabidGravy, where did it say it? On the top of the home page?

[21:03] <hankache> FROGGS_ I tried opening it a minute ago it didn't. now it works

[21:03] <RabidGravy> yeah, it says 459 now. weird

[21:03] <Mouq> FROGGS_: That works for some enums, but others, the library insists I have the wrong value… I haven't tried since last night, so maybe there's something obvious I didn't notice that I'm doing wrong.

[21:05] <FROGGS_> Mouq: how does it tell you that the value is wrong?

[21:06] *** dalek left
[21:06] <Zoffix> RabidGravy, I know the approximate location of the error, so I'll take a look at it

[21:06] *** dalek joined
[21:06] *** ChanServ sets mode: +v dalek

[21:07] <Zoffix> The log says "Removed 1 dists that are no longer in the ecosystem", but we didn't remove anything from the ecosystem, so there's glitching with the error catcher when a particular dist fails to rebuild

[21:07] <RabidGravy> software's shit like that ;-)

[21:08] <Zoffix> I'm kinda disappointed, because I have pretty good test coverage lol :P

[21:09] *** Begi joined
[21:10] <Mouq> FROGGS_: " ** On entry to STRMM  parameter number  1 had an illegal value". (I've tried every value from 0 to 20000, and the enum values are 141 and 142)

[21:11] *** dalek left
[21:11] *** yqt left
[21:11] *** rindolf left
[21:11] *** TEttinger left
[21:11] *** _mg_ left
[21:11] *** zengargoyle left
[21:11] *** nebuchadnezzar left
[21:11] *** bpmedley left
[21:11] *** cdg left
[21:11] *** PotatoGim left
[21:11] *** Juerd left
[21:11] *** inokenty left
[21:11] *** mr-fooba_ left
[21:11] *** mrsolo left
[21:11] *** clkao left
[21:11] *** spaceships left
[21:11] *** zostay left
[21:11] *** ShimmerFairy left
[21:11] *** flaviusb left
[21:11] *** tony-o left
[21:11] *** oka_ left
[21:11] *** yakudza left
[21:11] *** gensym left
[21:11] *** Gardner left
[21:11] *** ilbot3 left
[21:11] *** freeze left
[21:11] *** huf left
[21:11] *** DrForr_ left
[21:11] *** sitaram_ left
[21:11] *** flussence left
[21:11] *** hobbs left
[21:11] *** DarthGandalf left
[21:11] *** [Tux] left
[21:11] *** sammers left
[21:11] *** riatre_ left
[21:11] *** pyrimidine left
[21:11] *** arnsholt left
[21:11] *** [Coke] left
[21:11] *** silug left
[21:11] *** DarthGandalf joined
[21:11] *** Juerd joined
[21:12] *** mr-foobar joined
[21:14] *** hobbs joined
[21:14] *** flussence joined
[21:14] *** sitaram joined
[21:14] *** sitaram left
[21:14] *** sitaram joined
[21:14] *** DrForr joined
[21:16] <FROGGS_> Mouq: I think the problem is not about the enum, but either about how you call functions or layout structures

[21:17] *** huf joined
[21:17] *** mephinet left
[21:18] *** yakudza joined
[21:19] *** dalek joined
[21:19] *** ChanServ sets mode: +v dalek

[21:19] *** hankache left
[21:19] <lucasb> the irc logger bot didn't get back :(

[21:21] *** molaf_ left
[21:21] *** mrsolo joined
[21:21] *** Gardner joined
[21:21] *** gensym joined
[21:22] *** ShimmerFairy joined
[21:22] *** rindolf joined
[21:22] *** Praise- left
[21:23] *** riatre joined
[21:23] <Mouq> moritz: https://github.com/moritz/json/pull/20

[21:23] *** ilbot3 joined
[21:23] <stmuk_> shouldn't panda really be in travis?

[21:24] *** [ptc] left
[21:24] *** pyrimidine joined
[21:24] *** cdg joined
[21:24] *** arnsholt joined
[21:24] *** spaceships joined
[21:24] *** tony-o joined
[21:25] *** inokenty joined
[21:25] *** flaviusb joined
[21:26] *** oka_ joined
[21:26] *** skids joined
[21:26] <Zoffix> k, identified the problem modules.perl6.org

[21:26] *** kipd left
[21:26] <stmuk_> I'm seeing Could not find Panda:ver<True>:auth<True>:api<True> in panda as well

[21:26] *** [Tux] joined
[21:27] <lucasb> m: @*INC  # would a short lived deprecation for this be helpful in these following days?

[21:27] <camelia> rakudo-moar dbfb5e: OUTPUT«Dynamic variable @*INC not found␤  in block <unit> at /tmp/qlyfOvuLaF:1␤␤Actually thrown at:␤  in block <unit> at /tmp/qlyfOvuLaF:1␤␤»

[21:27] *** _mg_ joined
[21:27] <Zoffix> There's protection if fetching commits/dist info fails, but if fetching META file itself fails (e.g. due to network error), the dist gets chucked.

[21:27] <Zoffix> Gonna fix it after I grab some beer and food.

[21:27] *** [Coke] joined
[21:27] <Mouq> lucasb: At the very least, a more helpful message would probably be good

[21:27] *** zengargoyle joined
[21:29] *** xfix_ left
[21:29] *** freeze joined
[21:30] *** clkao joined
[21:31] *** [ptc] joined
[21:31] *** TEttinger joined
[21:31] *** PotatoGim joined
[21:32] *** mephinet joined
[21:32] <Zoffix> lucasb, yes, there are modules on ecosystem that rely on @*INC entirely for their functionality. http://modules.perl6.org/repo/Pluggable is one example

[21:32] *** hacst left
[21:32] *** kipd joined
[21:32] <RabidGravy> m: @*INC || warn "bo inc"

[21:32] <camelia> rakudo-moar dbfb5e: OUTPUT«bo inc  in block <unit> at /tmp/UFpY2FQHgw:1␤»

[21:33] *** _mg_ left
[21:34] *** japhb joined
[21:35] *** nadim left
[21:36] <flussence> how do I... get «prove -e perl6» to run now? Even the simplest no-deps modules I have don't work any more.

[21:38] <stmuk_> is there currently anyway of building panda under rakudobrew?

[21:38] <moritz> does PERL6LIB=lib work?

[21:39] <stmuk_> or should I just wait

[21:39] *** lizmat joined
[21:39] <flussence> trying JSON::Tiny gives me @*INC errors, most things give me a stacktrace with True xx 3, and in workflows that *used* to work perfectly fine I get «Type check failed in binding; expected Str but got IO::Path»

[21:39] <flussence> moritz: that works, PERL6LIB=. with a correct META6.json no longer does

[21:39] *** zostay joined
[21:39] *** clkao left
[21:39] <stmuk_> rakudobrew build-panda [panda-ver]

[21:39] <stmuk_> ah

[21:40] *** pierre-vigier joined
[21:40] *** clkao joined
[21:40] <moritz> flussence: ah well, that's probably part of the rough days after the merge that nine_++ warned us about

[21:41] <flussence> as long as there's *one* thing that works, I can live with it...

[21:41] <moritz> my p6 advent post for Dec 01 is up, and can be reviewed by anybody who has a p6advent login

[21:41] *** hoelzro left
[21:41] *** nadim joined
[21:42] *** hoelzro joined
[21:42] <nine_> flussence: replace BEGIN { @*INC.push('lib') }; with a simple use lib 'lib';

[21:42] <nine_> flussence: or even remove it altogether and just run prove -e 'perl6 -Ilib' t

[21:42] *** virtualsue left
[21:42] <jnthn> Seems there's already a PR for JSON::Tiny: https://github.com/moritz/json/pull/20

[21:43] <nine_> I guess that's just really old code that got copy&pasted a lot and is easily replaced

[21:43] <jnthn> oh, seems I even can merge it :)

[21:43] <flussence> nine_: is that for JSON::Tiny? not my module, someone else'll have to fix that :)

[21:43] <dalek> json: ef41b31 | Mouq++ | t/0 (5 files):

[21:43] <dalek> json: @*INC is dead, long live CURLI

[21:43] <dalek> json: review: https://github.com/moritz/json/commit/ef41b3160a

[21:43] <dalek> json: c75a04c | jnthn++ | t/0 (5 files):

[21:43] <dalek> json: Merge pull request #20 from Mouq/master

[21:43] <dalek> json: 

[21:43] <dalek> json: Fix tests on latest Rakudo

[21:43] <dalek> json: review: https://github.com/moritz/json/commit/c75a04c1b3

[21:43] <FROGGS_> moritz: I made some progress with star using panda... however, I wont be able to push something sensible today

[21:43] <FROGGS_> moritz: will continue tomorrow

[21:43] <moritz> FROGGS_: ok, great

[21:44] <nine_> FROGGS_, moritz: thanks for thanking this on :)

[21:44] <jnthn> Sleep time...and tomorrow is a travel day

[21:44] <jnthn> So won't be about a lot

[21:44] <jnthn> 'night o/

[21:44] <FROGGS_> gnight

[21:44] <nine_> Good nichgt!

[21:44] *** pierre-vigier left
[21:46] *** kaare_ left
[21:46] <moritz> does the list form of lib work? i.e. "use lib 'blib', 'lib';"

[21:47] *** bjz left
[21:48] *** [ptc] left
[21:48] *** mephinet left
[21:50] <skids> not use lib <blib/lib lib>?

[21:50] *** BenGoldberg left
[21:52] *** Begi left
[21:53] *** rindolf left
[21:54] *** AndyDee joined
[21:55] *** hacst joined
[21:56] *** xinming left
[21:57] *** xinming joined
[21:58] *** hartenfels left
[21:58] *** xdbr left
[21:59] <autarch> folks here might enjoy this - http://blog.urth.org/2015/11/29/perl-6-is-fun/

[22:00] *** clkao_ joined
[22:00] *** clkao_ left
[22:00] *** clkao_ joined
[22:00] *** clkao left
[22:00] *** clkao_ is now known as clkao

[22:00] <autarch> moritz: I know for sure that the list form works - I'm using it in a number of places

[22:01] <autarch> unless you mean as of a very recent patch?

[22:01] <flussence> recent would be in the past few hours...

[22:01] <Mouq> autarch++

[22:02] <autarch> well, I see a patch related to @*INC just above so who knows!

[22:02] *** rurban joined
[22:02] <lizmat> CORE:ver<Bend-281-gdbfb5e2>:auth<perl>:api<> already installed

[22:02] <lizmat>   in block <unit> at tools/build/install-core-dist.pl:14

[22:02] <lizmat> nine: does that ring a bell ?   ^^^

[22:02] <flussence> all of curli just got merged, but the commit bot died without reporting it

[22:02] *** balazs joined
[22:03] <lizmat> I can't build enymore

[22:03] <lizmat> zapping install dir and trying again

[22:03] <Mouq> autarch: Btw, I got your fork of P2H working on doc. It's a fair bit slower, so I was trying to see what I could do to cache the renderer objects

[22:03] *** [ptc] joined
[22:04] *** kjs_ joined
[22:04] *** ilbelkyr left
[22:04] <autarch> Mouq: I'm working on threading everything - https://github.com/autarch/doc/tree/autarch/use-perl6-org-design - very much in progress work to essentially refactorwite the whole doc generation system

[22:04] <dalek> perl6-examples: 7477382 | (Steve Mynott)++ | util/update-and-sync:

[22:04] <dalek> perl6-examples: attempt to fix examples.perl6.org by using older versions of rakudo/panda until the dust settles from curli changes

[22:04] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/74773829c1

[22:05] <autarch> but if you look in lib/DocSite/Generator.pm you can see that the generation it's doing so far is all threaded

[22:05] <lizmat> nine++  # for all the curli work

[22:05] *** ilbelkyr joined
[22:05] <lizmat> nine: as a datapoint: zapping the install dir solved it!\

[22:05] <moritz> autarch++ # blog post

[22:06] *** mephinet joined
[22:06] <moritz> autarch: might I lure you into writing a post for the perl 6 advent calendar?

[22:06] <moritz> [Tux]: would you like to write about your Text::CSV experience for the Perl 6 advent calendar?

[22:06] <autarch> Mouq: btw, that branch is pretty poorly named at this point - I started just trying to change the header & footer of the generated docs but it's gradually become a _much_ bigger effort - first I had to rewrite Pod::To::HTML

[22:06] <moritz> (or other topics... )

[22:06] <autarch> moritz: you're making me cry - I just finished my first draft for the Perl 5 advent calendar and I thought I was done ;)

[22:07] <autarch> but I could probably be talked into it as long as it can be a little later in the month

[22:08] *** retupmoc_ left
[22:08] <autarch> Mouq: then I started looking at htmlify.p6 and I wanted to make it OO, and make it thread, and make it less of a god process/object, and make it spit out nice output as it goes, and ...

[22:08] <RabidGravy> I'm going for approx 11th if that's cool

[22:08] *** pyrimidi_ joined
[22:08] *** bpmedley joined
[22:08] *** cdg_ joined
[22:08] <Mouq> autarch: Oh, ok, cool! I didn't realize you had already started working on that :)

[22:09] *** mrsolo left
[22:09] *** mrsolo joined
[22:09] <autarch> Mouq: it'll probably take a little while to be done, but once it's done I think it'll be in much better shape for doing other things I really want to do, like reorganize the language section per https://github.com/perl6/doc/issues/114

[22:09] *** bjz joined
[22:10] *** xdbr joined
[22:10] *** hartenfe1s joined
[22:10] *** rurban1 joined
[22:11] *** lab joined
[22:11] *** kipd_ joined
[22:11] <masak> general question: if I `use B;` in a module and my B.pm happens to also `use A;`, I get all A.pm's global names "for free", and I can choose freely whether to also `use A;` in my module.

[22:11] <autarch> TimToady: btw, any chance of adding something like DateTime.posix-hi-res to get an epoch with fractional seconds? writing "my $secs = $now.posix + ($now.second - $now.whole-second)" is a bit grotesque!

[22:11] <dalek> rakudo/nom: af4d62e | lizmat++ | / (3 files):

[22:11] <dalek> rakudo/nom: Remove "use cur"

[22:11] <dalek> rakudo/nom: 

[22:11] <dalek> rakudo/nom: Now that the curli branch has been merged, this now *really* has become

[22:11] <dalek> rakudo/nom: a fossil

[22:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af4d62e94b

[22:11] *** flaviusb left
[22:12] <masak> what do people think about that in general? is it good practice to still `use A;`, even though leaving it out is harmless?

[22:12] *** PotatoGim_ joined
[22:12] <autarch> moritz: should I move my branches for various things over to the perl6 org now? it might make them more findable, but I don't want to step on any toes.

[22:12] *** diego_k joined
[22:12] <timotimo> moritz: i think it was actually the november release that first shipped with NSA, no?

[22:12] <masak> (so far, my thinking has been that it's beneficial, because the module becomes slightly more resilient to changing module loading order.)

[22:12] *** arnsholt_ joined
[22:12] *** moritz_ joined
[22:12] *** mrf_ joined
[22:12] *** zengargo1le joined
[22:12] *** ashleyde1 joined
[22:12] <dalek> perl6-examples: 122e637 | (Steve Mynott)++ | Makefile:

[22:12] <dalek> perl6-examples: explicit panda path

[22:12] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/122e63740e

[22:12] <masak> (also, that it's good documentation, if the module actually uses stuff from A.pm)

[22:12] *** tony-o_ joined
[22:13] *** _sri_ joined
[22:13] *** dbohdan_ joined
[22:13] *** Util_ joined
[22:13] <masak> 'night, #perl6

[22:13] <timotimo> moritz: also in the last sentence "the excitement" instead of "the exciting"

[22:13] *** jojotus joined
[22:13] <Mouq> masak: That, and maybe readability would be better too :)

[22:13] <Mouq> night!

[22:14] <dalek> mu: 814ec24 | RabidGravy++ | misc/perl6advent-2015/schedule:

[22:14] <dalek> mu: Update schedule

[22:14] <dalek> mu: 

[22:14] <dalek> mu: Add my pennies worth

[22:14] <dalek> mu: review: https://github.com/perl6/mu/commit/814ec241fb

[22:16] *** kjs_ left
[22:16] *** sjohnson` joined
[22:17] *** riatre_ joined
[22:17] <lucasb> is ilbot3 the irc logger, isn't it? why did it stopped recording again? it seems it's still online in the channel

[22:17] *** bjz left
[22:18] *** rurban left
[22:18] *** xinming left
[22:18] *** AndyDee left
[22:18] *** nadim left
[22:18] *** lizmat left
[22:18] *** kipd left
[22:18] *** PotatoGim left
[22:18] *** freeze left
[22:18] *** zengargoyle left
[22:18] *** [Tux] left
[22:18] *** skids left
[22:18] *** oka_ left
[22:18] *** inokenty left
[22:18] *** tony-o left
[22:18] *** spaceships left
[22:18] *** arnsholt left
[22:18] *** cdg left
[22:18] *** pyrimidine left
[22:18] *** ilbot3 left
[22:18] *** riatre left
[22:18] *** ShimmerFairy left
[22:18] *** gensym left
[22:18] *** Gardner left
[22:18] *** spider-mario left
[22:18] *** risou_ left
[22:18] *** garu left
[22:18] *** zacts left
[22:18] *** Axord left
[22:18] *** rvchangue left
[22:18] *** havenwood left
[22:18] *** pecastro left
[22:18] *** cfloare_ left
[22:18] *** stmuk_ left
[22:18] *** bitmap left
[22:18] *** krakan left
[22:18] *** thowe left
[22:18] *** atta left
[22:18] *** KotH left
[22:18] *** mspo left
[22:18] *** brabo left
[22:18] *** Ulti left
[22:18] *** baest left
[22:18] *** sjohnson left
[22:18] *** Util left
[22:18] *** Hor|zon left
[22:18] *** ponbiki left
[22:18] *** sergot left
[22:18] *** dgl left
[22:18] *** nine_ left
[22:18] *** rhr_ left
[22:18] *** moznion left
[22:18] *** maddingue left
[22:18] *** jnthn left
[22:18] *** jojotus_ left
[22:18] *** vike1 left
[22:18] *** smash_ left
[22:18] *** El_Che left
[22:18] *** thundergnat left
[22:18] *** tinita left
[22:19] *** pochi left
[22:19] *** lucs left
[22:19] *** moritz left
[22:19] *** mrf left
[22:19] *** mls left
[22:19] *** salva left
[22:19] *** johan left
[22:19] *** nowan left
[22:19] *** larion left
[22:19] *** bhm left
[22:19] *** woodruffw left
[22:19] *** hahainternet left
[22:19] *** SHODAN left
[22:19] *** _sri left
[22:19] *** dbohdan left
[22:19] *** jdv79 left
[22:19] *** diegok left
[22:19] *** ashleydev left
[22:19] *** ingy left
[22:19] *** yeltzooo left
[22:19] *** saaki left
[22:19] <lucasb> oh, that explains...

[22:19] *** kjs_ joined
[22:19] *** kipd_ is now known as kipd

[22:19] *** hahainternet joined
[22:19] <RabidGravy> probably because of that ^

[22:21] *** PotatoGim_ is now known as PotatoGim

[22:21] <autarch> hmm, any idea how I can fix this travis failure - https://travis-ci.org/autarch/perl6-Pod-NodeWalker/builds/93830482 ?

[22:22] <autarch> did rakudobrew change in some way that I need to account for in my .travis.yml? I just cargo-culted that travis file from some other repo, I think.

[22:22] <MadcapJake> masak: if `B.pm` is a top-level module sort-of-thing then don't add it because the inner modules are all expected to be available but if A is a separate entity (external or a seperate domain), then I would say add it to show that you are specifically looking to use A's functionality.

[22:22] <timotimo> does $supply.schedule-on actually cause things on the supply to be scheduled? i thought it returns a new supply that will do scheduling for you?

[22:23] <diakopter> autarch: I think rakudobrew needs some updating for latest panda rewrite (merged hours ago)

[22:23] <autarch> ah, ok

[22:23] <autarch> so I guess I just wait

[22:23] *** [Tux] joined
[22:23] <timotimo> ah, i'm wrong

[22:26] *** neilb joined
[22:26] <MadcapJake> `rakudobrew build moar` says it successfully installed panda but then I got a bunch of errors when it tried ot install some modules

[22:28] <timotimo> MadcapJake: i nuked my install/ folder before i updated to latest master commits

[22:28] *** hacst left
[22:28] *** dg joined
[22:28] *** hacst joined
[22:28] *** kipd left
[22:29] *** Juerd left
[22:30] <timotimo> and with that i was able to bootstrap a panda successfully

[22:30] *** spider-mario joined
[22:31] <neilb> hi, i've been running the pull request challenge this year, for p5 CPAN modules. Participants are assigned a random module/dist and have a month to do a pull request on it. If they do at least one PR, then get an assignment the following month.

[22:31] *** dalek left
[22:31] * Zoffix waves to neilb 

[22:31] <timotimo> ugh

[22:31] <timotimo> i have to update my $PATH every single time i build a new rakudo?

[22:31] <neilb> I've done a survey of participants, to get data for a talk I'm giving, and one of them was "would you be interested in a similar challenge for Perl 6"

[22:32] <neilb> (Hi Zoffix)

[22:32] *** dalek joined
[22:32] *** ChanServ sets mode: +v dalek

[22:32] <Mouq> timotimo: I saw that too… I think some linking is in order

[22:32] <neilb> so far nearly 65% of respondents have said they'd be interested in a simular Perl 6 challenge

[22:32] <timotimo> alternatively run perl6 --version on start of the shell to get the thing >_>

[22:32] *** flaviusb joined
[22:33] <chansen_> autarch: $secs = $now.posix + ($now.whole-second % 1); # slightly less grotesque

[22:33] <Zoffix> neilb, 65% is how many humans?

[22:34] <neilb> 118

[22:34] <Zoffix> Not bad

[22:34] <Zoffix> m: 461/118

[22:34] <camelia> rakudo-moar af4d62: ( no output )

[22:34] <Zoffix> m: say 461/118

[22:34] <camelia> rakudo-moar af4d62: OUTPUT«3.906780␤»

[22:34] <Zoffix> 4 dists per human :D

[22:34] <neilb> So if someone wants to organise a similar challenge for Perl 6, there's some appetite

[22:35] *** clkao left
[22:35] <Zoffix> neilb, thanks for letting us know.

[22:35] *** dalek left
[22:35] <Zoffix> Maybe would be a nice thing to start right after a New Years. 

[22:35] <neilb> happy to share experiences and lessons learned, on what worked and what didn't.

[22:36] <neilb> I announced it around this time last year -- most people signed up on new year's eve, to get an assignment on 1st Jan :-)

[22:36] <RabidGravy> neilb, as an author who received two PRs as a result of that, they were somewhat half hearted :-\

[22:37] * Zoffix sent several half-hearted PRs

[22:37] <timotimo> i sent half a human heart as a PR. it was not accepted.

[22:37] <Zoffix> Most because the subject matter of the module I got assigned was beyond my knowledge.

[22:37] <Zoffix> s/Most/Mostly/'

[22:37] <chansen_> autarch: typo, should be .second not .whole-second

[22:38] *** itz joined
[22:38] *** itz is now known as stmuk

[22:38] *** dalek joined
[22:38] *** ChanServ sets mode: +v dalek

[22:38] *** Juerd joined
[22:39] *** [Tux] left
[22:39] <neilb> RabidGravy: plenty of people joined the challenge expressly to learn more about Perl, CPAN, the CPAN toolchain, github and doing PRs.

[22:39] <neilb> As a result there have been plenty of less-than-perfect PRs, I know.

[22:40] *** sivoais left
[22:40] *** havenwood joined
[22:40] *** havenwood left
[22:40] *** havenwood joined
[22:41] *** clkao joined
[22:41] <Mouq> .oO( "All PR is good PR" )

[22:41] <neilb> A number of people have said they'd like a similar challenge for Perl 6 to help them learn Perl 6. So yes, the PRs wouldn't be perfect. But growing a community generally means adding people who are going to be less than perfect :-)

[22:41] <RabidGravy> wasn't a problem though

[22:41] *** risou_ joined
[22:41] <neilb> Mouq: :-)

[22:42] *** ilbot3 joined
[22:42] *** rurban1 left
[22:42] *** brabo joined
[22:42] *** ShimmerFairy joined
[22:42] *** SHODAN joined
[22:42] *** bitmap joined
[22:42] *** krakan joined
[22:42] *** riatre_ left
[22:42] *** BinGOs left
[22:42] *** cfloare joined
[22:42] *** skarn left
[22:42] *** sergot joined
[22:43] *** KotH joined
[22:43] *** gensym joined
[22:43] *** moznion joined
[22:43] *** BinGOs joined
[22:43] *** flaviusb left
[22:43] <autarch> chansen_: I still think it should be part of the core API

[22:43] *** rvchangue joined
[22:43] *** Gardner joined
[22:43] <RabidGravy> neilb, given the youth of the ecosystem perhaps a "Most Wanted Challenge" might be more effective

[22:44] *** sivoais joined
[22:44] *** riatre joined
[22:44] <Zoffix> +1

[22:44] <Mouq> It seems CURLI can't handle libraries that reference other files in the library not listed in "provides" in META.info

[22:44] *** mls joined
[22:44] *** rhr joined
[22:44] <neilb> RabidGravy: aye, maybe so.

[22:44] *** salva joined
[22:44] <stmuk> curli doesn't seem to allow reinstall either

[22:44] *** garu joined
[22:44] *** Ulti joined
[22:45] *** JimmyZ left
[22:45] <neilb> Anyway, there's definitely appetite for some kind of challenge, so maybe someone here might like to take up that baton?

[22:45] *** freeze joined
[22:45] *** woodruffw joined
[22:45] *** atta joined
[22:45] *** JimmyZ joined
[22:45] <chansen_> autarch: I agree

[22:45] *** vike joined
[22:45] * Zoffix shies away from the baton

[22:46] *** inokenty joined
[22:46] *** lizmat joined
[22:46] <timotimo> Mouq: is that surprising?

[22:46] <Mouq> timotimo: Well, it means that Pod::Coverage is broken, which means that Linenoise can't be installed

[22:46] <timotimo> :o

[22:46] *** El_Che joined
[22:46] *** oka_ joined
[22:46] *** ponbiki joined
[22:46] <timotimo> why does Pod::Coverage even rely on something like that?

[22:47] *** maddingue joined
[22:47] <RabidGravy> haven't finished half the modules I need yet

[22:47] *** ponbiki is now known as Guest96120

[22:47] *** xinming joined
[22:48] <Mouq> Pod::Coverage may also be broken for other reasons relating to CURLI, but that was the first thing I found

[22:48] *** smash joined
[22:49] <RabidGravy> I'll look in the morning

[22:49] <lucasb> timotimo: maybe it is the other way around, Linenoise requires LibraryMake

[22:49] <lucasb> ...that requires Pod::Coverage

[22:49] <leedo> Mouq: i was just looking at the Pod::Coverage trouble myself

[22:50] *** mspo joined
[22:50] <leedo> https://github.com/retupmoca/P6-Find-Bundled/pull/2 possibly related as well?

[22:50] *** tinita joined
[22:50] *** jdv79 joined
[22:51] <Zoffix> huh

[22:51] *** pecastro joined
[22:51] *** baest joined
[22:51] <Mouq> leedo: Interesting

[22:51] * Zoffix thought () were not allowed in ifs

[22:51] *** hobbs left
[22:51] *** nine joined
[22:51] *** hobbs joined
[22:51] *** nowan joined
[22:52] <Zoffix> leedo, is that even supposed to work at all? https://github.com/retupmoca/P6-Find-Bundled/pull/2/files#diff-d4920e0386e58457c912a294b1e6a986L9

[22:52] <Zoffix> @*INC is gone IIUC

[22:52] <timotimo> if( ... ) will try to call a sub called "if"

[22:52] <timotimo> if ( ... ) is just unnecessary, but not wrong

[22:52] *** AlexDaniel joined
[22:52] <leedo> timotimo: well it does avoid the RHS gobbling the block at least

[22:53] <Mouq> m: say CompUnitRepo::Local::File

[22:53] <camelia> rakudo-moar af4d62: OUTPUT«Could not find symbol '&File'␤  in block <unit> at /tmp/gdo8geIzxd:1␤␤Actually thrown at:␤  in block <unit> at /tmp/gdo8geIzxd:1␤␤»

[22:53] *** zacts joined
[22:53] *** jnthn joined
[22:53] <dalek> modules.perl6.org: f86a5ba | (Zoffix Znet)++ | / (5 files):

[22:53] <dalek> modules.perl6.org: Add meta_url to Dists model

[22:53] <dalek> modules.perl6.org: 

[22:53] <dalek> modules.perl6.org: This will let us salvage distro builds regardless of what error happens during build

[22:53] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/f86a5ba043

[22:53] *** saaki joined
[22:53] *** kipd joined
[22:54] *** ilbelkyr_ joined
[22:54] *** solarbunny left
[22:54] <stmuk> examples.perl6.org should now be in colour and have correct HTML escaping

[22:54] *** skids joined
[22:54] *** solarbunny joined
[22:54] <Sgeo> > "hi"

[22:54] *** ilbelkyr left
[22:54] *** ilbelkyr_ is now known as ilbelkyr

[22:54] *** Some-body_ joined
[22:55] <Sgeo> m: "Foo"[0][0]

[22:55] <camelia> rakudo-moar af4d62: ( no output )

[22:55] <Sgeo> m: say "Foo"[0][0]

[22:55] <camelia> rakudo-moar af4d62: OUTPUT«Foo␤»

[22:55] <Zoffix> stmuk++

[22:55] <AlexDaniel> m: say “Foo”[0][1]

[22:55] <camelia> rakudo-moar af4d62: OUTPUT«Index out of range. Is: 1, should be in 0..0␤  in block <unit> at /tmp/XXYUUtkNJx:1␤␤Actually thrown at:␤  in block <unit> at /tmp/XXYUUtkNJx:1␤␤»

[22:56] <AlexDaniel> m: “Foo”[0][1] = 20

[22:56] <camelia> rakudo-moar af4d62: OUTPUT«Index out of range. Is: 1, should be in 0..0␤  in block <unit> at /tmp/EW3O96f0HB:1␤␤Actually thrown at:␤  in block <unit> at /tmp/EW3O96f0HB:1␤␤»

[22:56] <AlexDaniel> m: “Foo”[0] = 20

[22:56] <camelia> rakudo-moar af4d62: OUTPUT«Cannot modify an immutable Str␤  in block <unit> at /tmp/pfJ_UhYwDx:1␤␤»

[22:56] <AlexDaniel> that's fair

[22:57] <AlexDaniel> m: “Foo”[0][* - 1] = 20

[22:57] <camelia> rakudo-moar af4d62: OUTPUT«Cannot modify an immutable Str␤  in block <unit> at /tmp/gcZMCGJD9H:1␤␤»

[22:57] <AlexDaniel> m: say “Foo”[0][* - 1]

[22:57] <camelia> rakudo-moar af4d62: OUTPUT«Foo␤»

[22:57] *** pnu left
[22:58] *** kipd left
[22:59] *** lucasb left
[22:59] *** [Tux] joined
[23:00] *** yeltzooo joined
[23:00] *** bhm joined
[23:00] *** larion joined
[23:01] *** skarn joined
[23:02] *** cgfbee left
[23:02] *** bjz joined
[23:03] *** spider-mario left
[23:03] *** mrsolo left
[23:03] <dalek> perl6-examples: 2a85dbb | (Steve Mynott)++ | categories/best-of-rosettacode/accumulator-factory.pl:

[23:03] <dalek> perl6-examples: remove 2nd pod section since it's not useful and breaks the syntax colouring

[23:03] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/2a85dbbbe4

[23:03] *** DarthGandalf left
[23:03] *** eiro left
[23:03] *** Some-body_ is now known as DarthGandalf

[23:03] *** cgfbee joined
[23:04] *** flussence left
[23:05] *** vendethiel left
[23:05] <MadcapJake> timotimo: thanks, nuking it worked

[23:05] *** Juerd left
[23:06] *** pochi joined
[23:06] *** Hor|zon joined
[23:06] <dalek> rakudo/nom: 0ede335 | lizmat++ | src/core/Range.pm:

[23:06] <dalek> rakudo/nom: Fix Range.pick(N), push-all sparse version

[23:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0ede3359b4

[23:08] <lizmat> .tell nine it looks like trying to build with uncommitted changes, gives the "already installed" error if you built on the latest commit before

[23:08] <yoleaux> lizmat: I'll pass your message to nine.

[23:09] *** lucs joined
[23:09] *** qcoh_ left
[23:09] *** kipd joined
[23:09] <lizmat> .tell [Tux]  say (10101..99999).pick(44).sort should now work

[23:09] *** llfourn joined
[23:09] *** hobbs left
[23:09] <yoleaux> lizmat: I'll pass your message to [Tux].

[23:09] *** Juerd joined
[23:10] <AlexDaniel> m: say “foobar”.substr-eq(“bar”, 3);

[23:10] <camelia> rakudo-moar af4d62: OUTPUT«1␤»

[23:10] <AlexDaniel> why is it 1 and not True?

[23:10] <AlexDaniel> docs say that it returns Bool

[23:10] <MadcapJake> m: say “foobar”.substr-eq(“baz”, 3);

[23:10] <camelia> rakudo-moar af4d62: OUTPUT«0␤»

[23:11] <MadcapJake> m: say “foobarbar”.substr-eq(“bar”, 3);

[23:11] <camelia> rakudo-moar 0ede33: OUTPUT«1␤»

[23:11] <Mouq> AlexDaniel: Probably it calls into nqp and is never coerced back to Bool. LHF :)

[23:11] <AlexDaniel> Mouq: willing to fix it right now? :)

[23:12] *** bjz left
[23:12] *** dalek left
[23:12] <RabidGravy> it's just a ? somewhere surley

[23:13] *** hartenfe1s left
[23:14] *** dalek joined
[23:14] *** ChanServ sets mode: +v dalek

[23:15] *** hartenfels joined
[23:15] <hartenfels> m: subset Empty of Str where /^$/; sub s (Empty $e) {}; try s('a'); $!.^name;

[23:15] <camelia> rakudo-moar 0ede33: ( no output )

[23:15] <hartenfels> subset Empty of Str where /^$/; sub s (Empty $e) {}; try s('a'); say $!.^name;

[23:16] <lizmat> AlexDaniel: -        $pos >= 0 && nqp::eqat($str, nqp::unbox_s($needle), $pos);

[23:16] <lizmat> +        $pos >= 0 && nqp::eqat($str, nqp::unbox_s($needle), $pos) == 1;

[23:16] <hartenfels> m: subset Empty of Str where /^$/; sub s (Empty $e) {}; try s('a'); say $!.^name;

[23:16] <camelia> rakudo-moar 0ede33: OUTPUT«X::AdHoc␤»

[23:16] <lizmat> line 158 in Cool

[23:16] <lizmat> good night, #perl6

[23:17] *** solarbunny left
[23:17] <Mouq> 'night lizmat!

[23:17] *** bolangi joined
[23:18] <bolangi> p6: say 3

[23:18] <camelia> rakudo-moar 0ede33: OUTPUT«3␤»

[23:19] *** spaceships joined
[23:20] <Mouq> m: say $*REPO

[23:20] <camelia> rakudo-moar 0ede33: OUTPUT«inst#/home/camelia/.perl6/2015.11-283-g0ede335␤»

[23:20] *** kjs_ left
[23:22] *** retupmoc_ joined
[23:22] <Mouq> m: say $*REPO.repo-chain # aha

[23:22] <camelia> rakudo-moar 0ede33: OUTPUT«(inst#/home/camelia/.perl6/2015.11-283-g0ede335 inst#/home/camelia/rakudo-m-inst-2/share/perl6/site inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor inst#/home/camelia/rakudo-m-inst-2/share/perl6)␤»

[23:24] *** flussence joined
[23:26] *** Guest96120 is now known as ponpon

[23:26] *** Juerd left
[23:27] *** hobbs joined
[23:27] *** hobbs left
[23:27] *** hobbs joined
[23:27] *** Juerd joined
[23:28] *** bjz joined
[23:29] *** BinGOs left
[23:31] *** [Tux] left
[23:32] *** cpage_ joined
[23:32] *** snarkyboojum joined
[23:32] *** dalek left
[23:33] *** PotatoGim left
[23:33] *** Bucciarati left
[23:33] *** neilb left
[23:34] *** brabo left
[23:34] *** johan___ joined
[23:35] *** PotatoGim joined
[23:35] *** Herby_ joined
[23:36] *** dalek joined
[23:36] *** ChanServ sets mode: +v dalek

[23:36] <Herby_> Good evening, everyone!

[23:36] *** BinGOs joined
[23:36] *** Bucciarati joined
[23:36] <Mouq> o/

[23:38] *** ggoebel7 joined
[23:38] *** cpage joined
[23:38] *** [Tux] joined
[23:41] *** cdg_ left
[23:42] *** Juerd left
[23:42] *** Juerd joined
[23:43] *** ingy joined
[23:46] <Herby_> I'm trying to install the LWP::SImple module, on Ubuntu using Panda

[23:46] <Herby_> and it failed

[23:46] <Zoffix> Herby_, pastebin errors http://fpaste.scsys.co.uk/

[23:46] <Herby_> http://pastebin.com/ZmvYa4C3

[23:46] <Zoffix> Herby_, and how old your rakudo is

[23:47] <Herby_> This is perl6 version 2015.11 built on MoarVM version 2015.11

[23:47] *** uruwi joined
[23:47] <Zoffix> No idea, sorry :)

[23:48] <Herby_> same conclusion I came to :)

[23:48] <Herby_> my ubuntu installation is a mess

[23:48] <Zoffix> There've been significant changes very recently, so maybe this is the fallout. 

[23:48] *** roguelazer left
[23:49] <Skarsnik> Herby_, try to clone the repository on github and run the test that fail

[23:49] <Herby_> progress is painful!

[23:49] *** roguelazer joined
[23:49] <Herby_> ehhhhhhh, only thing I understood in that is "github" :)

[23:50] <Skarsnik> you can try a panda --notest install

[23:50] <Skarsnik> I think it's the right switch

[23:50] *** kipd left
[23:51] <Herby_> looks like its   --notests

[23:51] <Herby_> and it installed successfully. lets see if it works

[23:52] *** pnu joined
[23:52] *** solarbunny joined
[23:52] *** hobbs left
[23:53] <Herby_> no such luck

[23:53] <Skarsnik> hm

[23:53] <Herby_> Could not find symbol '&Simple'   in block <unit> at test.pl6:3

[23:54] <Herby_> i'm trying to run the example found under "Usage":https://github.com/tony-o/perl6-html-parser-xml/

[23:54] <Herby_> i've previously installed HTTP::Parser::XML

[23:54] <Skarsnik> did you write use LWP::Simple ? x)

[23:55] *** kipd joined
[23:57] *** snarkyboojum left
[23:58] *** hobbs joined
[23:58] *** eiro joined
[23:59] <Herby_> doh! 

