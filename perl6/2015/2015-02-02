[00:07] *** spider-mario left
[00:07] <skids> One could even say he's a pro at it :-)

[00:24] *** adu joined
[00:29] <colomon> japhb: where are nine’s slides?

[00:29] <japhb> Hold on

[00:29] <japhb> http://niner.name/talks/Leapfrogging%20the%20bootstrap/

[00:29] <japhb> The PDF version has good speaker's notes, didn't check the ODP

[00:30] <colomon> japhb++

[00:30] <japhb> nine++

[00:31] <japhb> :-)

[00:33] *** skids left
[00:35] *** alinbsp left
[00:35] <colomon> nine++

[00:35] * colomon is still reading 

[00:35] *** Ugator left
[00:38] <colomon> and watching football

[00:42] <BenGoldberg> Oooh, a round Tuit.  Where can I get one?

[00:43] <masak> 'night, #perl6.0.0

[00:43] <raydiak> heh good night masak 

[00:43] <japhb> o/

[00:45] <asdf12z_> http://video.fosdem.org/ ?

[00:45] <colomon> BenGoldberg: try talking to lizmat

[00:48] <BenGoldberg> Does there exist a program which can read in a c header file (.h) and produce a perl6 program with a 'use NativeCall; ...', where ... contains a 'sub somefunction(blah blah) is native('libsomething') { * }' for each c function in the .h file?

[00:49] * BenGoldberg was joking about getting a wooden round tuit ;)

[00:49] * raydiak imagines a Minority Report-like device which carves out Tuits with names on them using lasers

[00:51] <BenGoldberg> With psychics in life support prisons to provide the names?

[00:51] <japhb> BenGoldberg: someone was working on a parser for C headers, and I think the AST portion had gotten fairly far along, but I'm not aware of it getting to the next stage where it can generate the NativeCall interface.

[00:51] <raydiak> BenGoldberg: there does not afaik, but a C grammar is being worked on by adu++ which would allow such a thing to exist

[00:51] <raydiak> https://github.com/andydude/p6-c-parser

[00:51] * japhb beat raydiak by mere seconds ... but he did the research.  :-)

[00:52] <raydiak> :)

[00:53] <BenGoldberg> Why not take some pre-existing C parser, and use NativeCall to talk to it?  Like tcc, maybe.

[00:54] <raydiak> last I tried, it still had some issues with the 0mq header I was trying to parse as a test...I'll bet he'd be happy for some help, if anyone...*looks at tuit-lazing machine*

[01:03] <raydiak> I'm sure we could use an existing parser...guess nobody has cuz it'd be kinda a shame to not use our grammars? idk...*kicks inert tuit-lazing machine*

[01:04] *** skids joined
[01:07] <colomon> nine++

[01:07] <adu> Raydiak are you talking about c parser?

[01:08] <adu> It it doesn't work on something, let me know and I'll try to improve it

[01:08] <adu> If*

[01:09] * raydiak suspects many of his failure cases are typedef-related

[01:09] <adu> Wait, I didnt know there was a nativecall step, what is that step? 

[01:10] <colomon> nine: Inline::Python not in the ecosystem?

[01:10] <raydiak> it's not a step, it's a module you can use to call into c code

[01:11] <raydiak> star-m: use NativeCall; sub alloc(int) returns OpaquePointer is native {*}; say alloc(1024); # <- adu

[01:11] <camelia> star-m 2014.12: OUTPUT«Cannot locate symbol 'alloc' in native library ''␤  in method postcircumfix:<( )> at /home/camelia/rakudo-star-2014.12/install/languages/perl6/lib/NativeCall.pm6:130␤  in block <unit> at /tmp/5Tqb50M3ku:1␤␤»

[01:11] <adu> My problem is that I can think of too many applications of a parser, a slang, a syntax highlighter, an indenter, static analysis, etc

[01:11] <raydiak> star-m: use NativeCall; sub malloc(int) returns OpaquePointer is native {*}; say malloc(1024); 

[01:11] <camelia> star-m 2014.12: OUTPUT«OpaquePointer<0x4a20f50>␤»

[01:12] <raydiak> far and away the biggest thing I've heard (and my own use) is to generate NativeCall bindings 

[01:13] <adu> Well, maybe I should look into that then.

[01:14] *** espadrine left
[01:14] <raydiak> here are the things from zmq which don't parse, and the things which crash: https://gist.github.com/raydiak/708adb1e6b8d6d62d2a3

[01:14] <raydiak> each was tried one at a time.  I know many of them are jsut the typedef thing, but some are other stuff

[01:15] *** dayangkun joined
[01:15] <raydiak> (by crash I mean error instead of parse, that is)

[01:16] *** yeahnoob joined
[01:16] <raydiak> I wanted to sort them out more by failure so I didn't show you a big list of "ew" to sort through yourself, but it got forgotten until now

[01:21] *** espadrine joined
[01:24] <japhb> adu, raydiak:  The C parser is a need prerequisite to, but not the same as, a NativeCall auto-binder.  It should be possible to use just the C parser, for all the reasons you specify.  The NativeCall autobinder can be a module that uses the parser.

[01:28] <adu> Japhb, well, I can work on writing 

[01:28] <adu> More tests and documentation for c::parset

[01:29] <adu> Er

[01:36] <raydiak> japhb: yes we don't want to write the autobinder into the parser, we were just talking about why I run into failures more often than adu does...so he was asking "how do people plan to use it, so I can keep that in mind for extra testing and features"

[01:36] <raydiak> at least that's what I got out of it :)

[01:38] <adu> Raydiak: yeah, thats about it, I can think of a couple ways to remove the requirement for a typename to be typedefed, but I don't see why you're parsing line by line in the first place.

[01:39] <raydiak> adu: b/c otherwise it just goes *BOOM* and I have no idea which lines work and which ones don't parse and which ones cause crashes

[01:40] <adu> So, i should work on the typedef issue, and error reporting...

[01:42] <raydiak> and whatever the other crashes in my gist are :)

[01:44] <adu> Oh, I thought I got you zmq.h to parse correctly

[01:44] <raydiak> oh never even close :)

[01:44] <adu> Ray are you parsing the entire file once? Or line-by-line?

[01:45] *** espadrine left
[01:45] <raydiak> either way won't work...only *some* of those fails are typedef-related

[01:45] <raydiak> and some are extentions and stuff from standards you may not be trying to support, idk

[01:46] <adu> I added gnu attributes and gnu asm, so it should work

[01:47] <raydiak> ah, k cool

[01:47] <raydiak> admittedly, that gist was from at least a couple weeks ago, idk how much of the parsing may have changed since then

[01:48] <adu> But I'm not at my computer right now, so I won't be able to work on it until tomorrow

[01:49] <raydiak> I'm not in a rush, and I know yer a busy guy outside of your much-appreciated contributions here :)

[01:49] <adu> Ray quite a bit, I changed the grammer so that stucts parse correctly now, and the AST has been through 3 major revisions since then

[01:50] <raydiak> neat, I'll try again tonight then

[01:58] <raydiak> adu: when I look later, if I see anything that I think could be obviously improved, would you like pull requests instead of suggestions?

[02:01] <adu> Either would be appreciated

[02:02] <adu> I'm very flexible

[02:02] * raydiak has known various people with various attitudes towards their code and changes to it

[02:02] <adu> I'm not a code nazi

[02:03] <raydiak> cool, Whatever wfm too :)

[02:03] <raydiak> gotta take off for a while, so...  \o

[02:10] <gtodd> So if one wants to hack up something quick using an existing computer vision library then ....  NativeCall -> into libopencv  ... then use perl6 to "orchestrate" libopencv functions and fiddle with CV data ... is uhh a viable approach ?

[02:10] <gtodd> it seems too easy :-)

[02:11] *** BenGoldberg left
[02:12] *** BenGoldberg joined
[02:28] <skids> gtodd: it is pretty easy (some hitches still) and will get even easier as the hitches go away.

[02:29] <rjbs> https://gist.github.com/rjbs/de0b26a258553c75104c

[02:29] <rjbs> ^ janky test for problem with grapheme-oriented parsing discussed with pm and timtoady tonight

[02:30] <skids> gtodd: I'm sure the C parser being discussed will be useful for large APIs, for some other small APIs it's so easy you just do it by hand without even thinking "this is tedious".

[02:46] <skids> rjbs: so why should that die?  In the raw gist I see "123 #Ìˆ die"; is github getting the right codes across?

[02:46] *** chenryn joined
[02:46] *** BenGoldberg left
[02:47] *** BenGoldberg joined
[02:47] <skids> (the graphemes are coded as 0xc38c and 0xcb86)

[02:50] <gtodd> skids: It seems to be getting easier to access libraries all over  (towhit perl5 and FFI::Platypus) ... i.e. less XS and C knowledge requred 

[02:51] <skids> Well, IMO C knowlege is always required everywhere and the house should not be left without it, but yes, less glue!  :-)

[02:56] *** muraiki_ left
[02:59] * raydiak wonders if some of the cleaner header files couldn't be autobound by a simple series of plain old regexen (maybe with a little hand-holding on either end of the conversion)

[03:00] *** fil_ left
[03:00] <colomon> hmm… if I’ve got a Num, how do I get a num?

[03:00] * raydiak has a p6 script laying around somewhere which generates zmq bindings for luajit the "dirty way", as an example of it being possible

[03:01] <raydiak> m: say num.new: 1e0

[03:01] <camelia> rakudo-moar 6e182d: OUTPUT«1e0␤»

[03:03] <colomon> raydiak++

[03:03] *** chenryn left
[03:05] *** dayangkun left
[03:07] <adu> Raydiak, should the native call thing produce  text or qast?

[03:07] *** chenryn joined
[03:15] <skids> Bah /. -- where everyone goes to pop their emotional pimples.

[03:16] <dalek> ecosystem: 308b87c | colomon++ | META.list:

[03:16] <dalek> ecosystem: Add Math::OddFunctions.

[03:16] <dalek> ecosystem: 

[03:16] <dalek> ecosystem: New module designed to test out getting the functions described in http://www.johndcook.com/blog/2010/06/07/math-library-functions-that-seem-unnecessary/ into p6.

[03:16] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/308b87c460

[03:16] <geekosaur> look at it this way: as a POSIX path "/." doesn't make much sense. neither does the site.

[03:17] <japhb> adu: I actually see a use-case for both.  QAST generation is great for fully runtime binding, but text generation is better for providing a first-approximation binding that a human can then improve on.

[03:17] <raydiak> well, a tool which just spits out the whole binding is probably what we need the most, but if you wanted to provide a whole tree representing it too, I'm sure that wuold be useful too, like if you need to manually change things that don't get autogenned completely how you want in whatever way

[03:17] <raydiak> yeah, what japhb++ beat me to (again) :)

[03:17] <hoelzro> skids: I've been try to avoid reading the comments all day =/

[03:18] * geekosaur hugs the "Shut Up" browser extension yet again

[03:19] <japhb> geekosaur: What does that one do?  Just remove all the comments?

[03:19] <geekosaur> yep, knows how to remove the comment sections of many websites

[03:19] <colomon> n: say erf(10)

[03:19] <camelia> niecza v24-109-g48a8de3: OUTPUT«(signal ABRT)Stacktrace:␤␤  at <unknown> <0xffffffff>␤  at (wrapper managed-to-native) object.__icall_wrapper_mono_gc_alloc_string (intptr,intptr,int) <0xffffffff>␤  at (wrapper alloc) object.AllocString (intptr,int) <0xffffffff>␤  at string…»

[03:19] <geekosaur> ...which makes many sites almost tolerable

[03:21] *** raiph left
[03:23] *** chenryn left
[03:24] *** chenryn joined
[03:28] <JimmyZ> colomon: I could'nt see  the git repo

[03:28] <JimmyZ> Math::OddFunctions

[03:29] <colomon> https://github.com/colomon/Math-Odd-Functions

[03:29] <colomon> try that?

[03:29] <colomon> mind you, there’s basically nothing there yet.

[03:31] *** noganex_ joined
[03:31] <JimmyZ> colomon: https://raw.githubusercontent.com/colomon/Math-OddFunctions/master/META.info

[03:31] <colomon> oh.  interesting

[03:31] <JimmyZ> I think you meant https://raw.githubusercontent.com/colomon/Math-Odd-Functions/master/META.info

[03:32] <colomon> I think you might be right

[03:32] <colomon> JimmyZ++

[03:33] <dalek> ecosystem: db92fc0 | colomon++ | META.list:

[03:33] <dalek> ecosystem: Fix typo.

[03:33] <dalek> ecosystem: 

[03:33] <dalek> ecosystem: JummyZ++

[03:33] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/db92fc0c2d

[03:33] <colomon> Ack!  Sorry about that.

[03:33] <colomon> JimmyZ++ again

[03:34] *** noganex left
[03:36] <colomon> m: say (10**1000000).Num

[03:36] <camelia> rakudo-moar 6e182d: OUTPUT«Inf␤»

[03:36] <colomon> perfect

[03:39] <JimmyZ> how do rakudo know it is INF

[03:40] <geekosaur> presumably it's being handed off at some level to the CPU's floating point ops which return Inf on overflow

[03:46] *** adu left
[04:01] <colomon> getting a really weird error here, but I don’t have the brain power to sort it out

[04:02] <colomon> never mind, that was something totally obvious

[04:02] <colomon> afk # bed

[04:02] <skids> o/

[04:07] <alpha-> hmm

[04:08] <alpha-> so if you don't need to change the sigil when accessing array elements, eg. my @arr = 1,2,3; say @arr[1]; then what exactly is my $s = [1,2,3]; say $s[1]; ?

[04:11] <colomon> alpha-: In that case, $s is an item which holds an array

[04:12] <geekosaur> it's implicitly something like perl 5's: my $s = [1,2,3]; say $s->[1];

[04:12] <colomon> afk # for real this time

[04:12] <geekosaur> the differences are subtle and you probably shouldn't get into that habit

[04:12] <skids> alpha-: when you say "my @a" the @ is saying "don't let me put anything in @a that is not list-or-array-like.

[04:13] <skids> aplha-: but when you use $, pretty much anything goes.

[04:15] <skids> m: my @a = 1: @a.perl.say; # puts the 1 in a 1-element Array so you're guaranteed your values will be accessible by using []

[04:15] <camelia> rakudo-moar 6e182d: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ccoLEBEObz␤Invocant colon not allowed here␤at /tmp/ccoLEBEObz:1␤------> [32mmy @a = 1:[33m⏏[31m @a.perl.say; # puts the 1 in a 1-elemen[0m␤»

[04:16] <skids> whoops

[04:16] <skids> m: my @a = 1; @a.perl.say; # puts the 1 in a 1-element Array so you're guaranteed your values will be accessible by using []

[04:16] <camelia> rakudo-moar 6e182d: OUTPUT«Array.new(1)␤»

[04:18] <alpha-> ok

[04:20] <Mouq> alpha-: @/$ still means list/item context in Perl 6, though. So:

[04:20] <Mouq> m: my @a = 1,2,3; for @a { .perl.say }; my $a = @a; for $a { .perl.say }

[04:20] <camelia> rakudo-moar 6e182d: OUTPUT«1␤2␤3␤[1, 2, 3]␤»

[04:21] <Mouq> ^^ The second loop is only done once

[04:21] <Mouq> m: my @a = 1,2,3; for @a { .perl.say }; my $a = @a; for @$a { .perl.say }

[04:21] <camelia> rakudo-moar 6e182d: OUTPUT«1␤2␤3␤1␤2␤3␤»

[04:21] <alpha-> my $a = @a creates arrayref ?

[04:21] <skids> Essentially but we don't call it that.

[04:22] <alpha-> o...k..

[04:22] <Mouq> my $a = @a is like my $a = [1, 2, 3]

[04:23] <Mouq> m: my @list = 1, 2, 3; my $scalar = @list; @list[0] = 42; say @list.perl; say $scalar.perl'

[04:23] <camelia> rakudo-moar 6e182d: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/h41t5WkIve␤Two terms in a row␤at /tmp/h41t5WkIve:1␤------> [32m] = 42; say @list.perl; say $scalar.perl[33m⏏[31m'[0m␤    expecting any of:␤        infix stopper␤        infix or me…»

[04:23] <Mouq> m: my @list = 1, 2, 3; my $scalar = @list; @list[0] = 42; say @list.perl; say $scalar.perl;

[04:23] <camelia> rakudo-moar 6e182d: OUTPUT«Array.new(42, 2, 3)␤[42, 2, 3]␤»

[04:23] *** kaleem joined
[04:30] <raydiak> alpha-: more or less everything is a ref, so you don't really think about refs any more...

[04:30] <skids> What's the equivalent of "&sub" for methods?  I'm having a hard time remembering/finding it.

[04:31] <alpha-> raydiak how do you pass by value vs pass by reference then

[04:31] <raydiak> alpha-: you always pass by ref, just the ref is read-only by default, and you can say 'is copy' or 'is rw'

[04:32] <raydiak> skids: I use MyClass.^lookup('method') or something like that often

[04:32] <raydiak> skids: there's also .^can and another one, I'm not precisely sure which you shoulduse when tbh

[04:33] *** kaleem left
[04:33] <raydiak> skids: but if you declare the method with our, you can use MyClass::method

[04:33] <skids> Hrm.  I thought there was a non-introspective syntax.

[04:33] <raydiak> not without our, that I know of

[04:34] <Mouq> skids: .find_method

[04:38] *** chenryn left
[04:47] *** yeahnoob left
[04:50] *** jack_rabbit left
[04:52] <skids> "Yes, Perl 6 scales to talent" <-- my hopefully not-taken-as-condescending retort to "too many features" argument.

[04:53] *** yeahnoob joined
[04:53] *** nige joined
[04:55] *** adu joined
[04:58] <adu> ok I'm back

[05:07] *** jack_rabbit joined
[05:11] *** chenryn joined
[05:17] *** jack_rabbit left
[05:19] *** konsolebox joined
[05:29] <Mouq> m: say [].VAR.name; say [1,2,3].VAR.name # wut

[05:29] <camelia> rakudo-moar 6e182d: OUTPUT«$x␤$x␤»

[05:30] <geekosaur> uhhhh

[05:31] <geekosaur> rakudobug

[05:33] <skids> The spec says the subish form of the VAR macro should be a noop and calls the method form "corresponding" so it should be a noop IMO.

[05:34] <geekosaur> arguably a literal like [1.2.3] shouldn't *have* a .VAR... and that's not really a subish form, is it?

[05:34] *** Peter_R left
[05:35] <skids> I'm just saying it's only explicitly stated as a noop for the sub form.

[05:35] <skids> But then the method form is called "corresponding" so it would be moderatly implied it should be too.

[05:36] <geekosaur> well, it's wrong even if it's a no-op; it's not $x, certainly

[05:36] <skids> Yes.

[05:36] *** Peter_R joined
[05:36] <skids> m: say (VAR([])); say (VAR([1,2,3]))

[05:36] <camelia> rakudo-moar 6e182d: OUTPUT«[]␤[1, 2, 3]␤»

[05:37] <skids> ok

[05:37] <skids> m: say (VAR([]).name); say (VAR([1,2,3]).name)

[05:37] <camelia> rakudo-moar 6e182d: OUTPUT«$x␤$x␤»

[05:37] <skids> m: say ([].name); say ([1,2,3].name)

[05:37] <camelia> rakudo-moar 6e182d: OUTPUT«(Str)␤(Str)␤»

[05:38] <JimmyZ> news: http://www.cnbeta.com/articles/367429.htm

[05:44] <adu> wow

[05:51] *** BenGoldberg left
[05:51] <asdf12z_> im a little slow, http://rakudo.org/downloads/star/ , what's the difference between -parrot and -moar ?

[05:52] <asdf12z_> i installed parrot, i can run perl6 code, so what vm does the -parrot install?

[05:52] <spollei> http://developers.slashdot.org/story/15/02/01/2130237/perl-6-in-time-for-next-christmas

[05:52] <asdf12z_> referring to the msi files

[05:52] <skids> That's the parrot vm.

[05:52] <skids> You might find the moarvm faster.

[05:52] <asdf12z_> i thought parrot was just a compiler 

[05:53] <skids> parrot is a vm.  www.parrot.org.

[05:54] <asdf12z_> oh so rakudo is the compiler

[05:55] <skids> Yes rakudo is the perl6 compiler.  There's a layer in the middle between then called NQP but ignore it unless you intend to hack on the guts.

[05:56] <skids> and, "star" is a bunch of modules you probably want to have, bundled with rakudo.

[06:04] *** spollei left
[06:06] *** gr33n7007h left
[06:12] <adu> raydiak: I found more bugs in my typedef code

[06:17] <Mouq> LHF: https://rt.perl.org/Ticket/Display.html?id=115744

[06:26] *** Rounin joined
[06:26] *** gr33n7007h joined
[06:28] *** adu left
[06:34] <madcapJake> why does `for 1, 3, 5 ... 10 -> $n { say $n; }` give an infinite loop?

[06:35] <Mouq> madcapJake: 1, 3, 5 ... never reaches 10

[06:35] *** adu joined
[06:36] <Mouq> m: for 1, 3, 5 ... 11 -> $n { say $n }

[06:36] <camelia> rakudo-moar 6e182d: OUTPUT«1␤3␤5␤7␤9␤11␤»

[06:36] <skids> The last part is an expression.

[06:36] <Mouq> m: for 1, 3, 5 ... 10 < * -> $n { say $n }

[06:36] <camelia> rakudo-moar 6e182d: OUTPUT«1␤3␤5␤7␤9␤11␤»

[06:37] *** gr33n7007h left
[06:37] *** dayangkun joined
[06:38] <madcapJake> ohhh ok! thanks!

[06:39] *** dayangkun left
[06:50] *** kurahaupo1 left
[06:50] *** kurahaupo1 joined
[07:01] *** kurahaupo1 left
[07:02] *** gr33n7007h joined
[07:03] *** kaleem joined
[07:04] <raydiak> adu: the first thing I run in to when trying to parse a preprocessed zmq.h whole is 'expected eof'

[07:04] <adu> raydiak: that means I need to improve error reporting

[07:05] <adu> raydiak: the way I usually diagnose grammars is by uncommenting "#use Grammar::Tracer;" at the top of C::Parser::Grammar

[07:06] <adu> but I should probably have it report the line number where it got stuck

[07:06] <raydiak> I think there's interesting info like that in the match object probably

[07:06] <adu> yes, I'm just not sure what it's called, it's either .pos or .lineno

[07:07] <raydiak> m: say Match.^methods».name

[07:07] <camelia> rakudo-moar 6e182d: OUTPUT«new BUILD ast prematch postmatch caps chunks make Str Numeric Bool ACCEPTS perl gist <anon> <anon> <anon> <anon> <anon> new hash list elems Capture FLATTENABLE_LIST FLATTENABLE_HASH WHICH at_key at_pos exists_key Str gist perl Bool Numeric keys kv values p…»

[07:07] <raydiak> m: say Match.^attributes».name.unique

[07:07] <camelia> rakudo-moar 6e182d: OUTPUT«$!orig $!from $!to $!CURSOR $!made $!list $!hash␤»

[07:08] <raydiak> m: say Cursor.^attributes».name.unique

[07:08] <camelia> rakudo-moar 6e182d: OUTPUT«$!made $!shared $!from $!pos $!match $!name $!bstack $!cstack $!regexsub $!restart␤»

[07:08] <adu> but I know very little about panics

[07:09] <adu> like for example, can you panic in two places?

[07:09] <raydiak> in two places?

[07:09] <adu> like a type error, and the top-level declaration where it happened?

[07:10] *** alinbsp joined
[07:10] *** alinbsp left
[07:10] <adu> I'm not sure how you would do that

[07:12] <raydiak> usually you would use fail

[07:12] <raydiak> I think

[07:12] <Mouq> adu: BTW, here's something that's been sitting on my machine for a while: https://gist.github.com/Mouq/bdddda34e4e0c5569b35

[07:12] <raydiak> I admit to not having much experience with these things either

[07:12] <adu> Mouq: oOo

[07:12] *** MadcapRusso joined
[07:12] *** ggoebel111111113 joined
[07:12] <Mouq> adu: It doesn't seem to work, alas :P I can't get it to actually parse the C part of a routine

[07:12] <adu> Mouq: does it work?

[07:12] <adu> Mouq: maybe I can

[07:13] *** ggoebel111111112 left
[07:13] <adu> so how should I be constructing TOP?

[07:13] <Mouq> adu: be neat if you could :) notice it calls "<C11=.FOREIGN_LANG: 'C11', 'TOP'>". "TOP" probably isn't the right place for it to start from :P

[07:14] <adu> currently it's just { ^ <translation-unit> [$ || {die("expected eof")}] }

[07:14] <Mouq> :/ idk. I saw that but didn't have time to dig into it when I looked

[07:14] <adu> raydiak: and so that error message means it got stuck on a declaration, but it didn't take the time to figure out which one it got stuck on

[07:16] <adu> since inline::c requires that it's, well, inline, it should probably use <translation-unit> instead of TOP, right?

[07:17] <Mouq> adu: Ahh, yeah, that's probably why it's failing :P

[07:18] <Mouq> adu: The issue is you're initializing in TOP

[07:18] <adu> Mouq: I'm only setting some default types, those can all be removed, and it should be able to parse everything correctly

[07:19] <adu> the only one that's super important is __builtin_va_list, since that's in stdio, stdlib, and lots of other common includes

[07:19] *** jluis joined
[07:20] <adu> maybe I should move some of that to <translation-unit>

[07:25] *** gr33n7007h left
[07:27] *** gfldex joined
[07:31] *** alini joined
[07:37] *** mr-fooba_ left
[07:38] *** gfldex left
[07:39] <vendethiel> masak: re symbol declarations in our macros, http://nim-lang.org/manual.html#ordinary-vs-immediate-templates

[07:40] <vendethiel> (you'll probably to backlog a bit on the manual, I'm sorry)

[07:40] <Mouq> vendethiel: Nim's method there seems decidedly un-perly :P

[07:41] <vendethiel> definitely. I just didn't find a solution I think is "good enough" for us yet. so I'm just throwing links at masak ;)

[07:43] <Mouq> vendethiel: I have some thoughts with regards to it in https://github.com/masak/007/issues/13

[07:43] <vendethiel> Mouq: yes, I read that, it was very interesting

[07:43] <Mouq> vendethiel: They definitely need expansion at some point

[07:44] <vendethiel> Mouq: I'm really not sure I want to have the variable declared inside the regex, but at least it's very interesting you're proposing it

[07:45] <vendethiel> I never considered it before you posted it

[07:45] * vendethiel school &

[07:45] <Mouq> vendethiel: In my eyes that's the base case. I have no issue with sugar for it at the level of macro declarations

[07:45] <Mouq> o/ vendethiel 

[07:46] * Mouq kind of hopes campus gets closed because of the snow…

[07:59] <adu> ok

[08:01] <adu> raydiak: it parses zmq.h now :)

[08:05] *** konsolebox left
[08:07] *** anaeem1_ joined
[08:08] <JimmyZ> adu:  I think <!before <[_A..Za..z0..9]>>  could be somethinkg token keyword-breaker

[08:08] <adu> Mouq: and I move those inits to translation-unit, and kept the ^ and $ in TOP

[08:08] <JimmyZ> so you don't need write it everywhere, and maybe don't need *-keyword too

[08:09] <adu> JimmyZ: can you elaborate?

[08:09] *** darutoko joined
[08:09] <adu> 'int' was matching 'int8_t' which is an <ident> not a keyword

[08:09] <Mouq> adu: Nice! :D

[08:10] <adu> JimmyZ: oh, you mean refactor it into a named method?

[08:11] *** zakharyas joined
[08:11] <JimmyZ> adu: yeah, and can remove all token *-keyword

[08:12] <adu> wait what?

[08:12] <adu> but everything else is dependand on them

[08:12] *** alini left
[08:13] <adu> I don't see how I could remove those methods

[08:14] <JimmyZ> token keyword:sym<else> { <sym> <keyword-breaker> }

[08:15] <adu> JimmyZ: yes, but then 'int' will still match 'int8_t' in a typedef

[08:15] <adu> <keyword> is never used in the grammar, it's only used if someone calls the lexer directly

[08:16] <JimmyZ> I meant you could avoid token break-keyword etc.

[08:16] <[Tux]> doc.perl6.org is nice, but is misses "examples", is there some example site resembling doc.perl6.org already?

[08:17] <adu> JimmyZ: but then I'd have to add it everywhere there is a keyword in the source, which is a lot of work

[08:17] <JimmyZ> oh

[08:17] <adu> I'd rather have keyword-break as part of the keyword itself

[08:18] <JimmyZ> maybe I didn't look at i deeply :P

[08:18] <JimmyZ> *it

[08:20] <adu> https://github.com/andydude/p6-c-parser/commit/fdeb84195ff003f0a037f0ff08adeee750e08332

[08:21] <JimmyZ> adu++

[08:22] <JimmyZ> Is it complex-keyword  only used by token keyword:sym<_Complex>?

[08:23] <adu> JimmyZ: no, it should also be used in rule type-specifier:sym<_Complex>

[08:24] <adu> but it's currently not being used

[08:25] <dalek> rakudo/nom: 073586b | Mouq++ | src/Perl6/ (2 files):

[08:25] <dalek> rakudo/nom: Allow `sub MAIN($params); …` declarations — RT #123309

[08:25] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123309

[08:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/073586b65d

[08:25] <dalek> rakudo/nom: 02515c9 | Mouq++ | src/ (2 files):

[08:25] <dalek> rakudo/nom: Turn "declarator Foo;" errors into Exceptions

[08:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/02515c9351

[08:25] <JimmyZ> ok, that's what I missed :P

[08:26] <dalek> roast: 093f03f | Mouq++ | S (3 files):

[08:26] <dalek> roast: Add and correct tests for `sub MAIN;` form

[08:26] <dalek> roast: review: https://github.com/perl6/roast/commit/093f03fe68

[08:26] <dalek> roast: 6806fcd | Mouq++ | / (2 files):

[08:26] <dalek> roast: Merge branch 'master' of https://github.com/perl6/roast

[08:26] <dalek> roast: review: https://github.com/perl6/roast/commit/6806fcd1cf

[08:27] *** _mg_ joined
[08:27] <adu> JimmyZ: one of these days my final vision for C::Parser will be complete

[08:29] *** andreoss joined
[08:29] <JimmyZ> That'd be awesome 

[08:30] <andreoss> no videos from fosdem yet?

[08:30] <yoleaux> 29 Jan 2015 20:15Z <japhb> andreoss: See http://irclog.perlgeek.de/perl6/2015-01-29#i_10026518 and thereabouts.  Let me know if you have questions.

[08:30] <yoleaux> 30 Jan 2015 21:26Z <japhb> andreoss: How is the perl6-bench pull request coming?

[08:30] *** [Sno] left
[08:32] <[Tux]> https://gist.github.com/Tux/3dd494f8ec889f56e23a

[08:32] <[Tux]> Inline::Perl5 failure

[08:35] <moritz> [Tux]: how new or old is your rakudo?

[08:35] <[Tux]> built 5 minutes ago

[08:35] <[Tux]> rakudobrew build moar

[08:36] *** coffee` joined
[08:36] <[Tux]> I could update rakudobrew itself too, but I doubt that would help

[08:36] <dalek> rakudo/nom: 12db81b | Mouq++ | t/spectest.data:

[08:36] <dalek> rakudo/nom: Add new test file for RT #123309

[08:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12db81b2f1

[08:36] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123309

[08:37] <adu> Mouq: are you still here?

[08:38] <Mouq> adu: About as here as my tired brain allows, yes :)

[08:38] <adu> Mouq: how would you Inline.pm6 be used? (if it did work?)

[08:38] <adu> s/you/your/

[08:38] <Mouq> perl6 -I. -MInline -e'inline foo { 1+1 }'

[08:38] <Mouq> Exceeept

[08:39] <Mouq> I have a module I never put into the ecosystem that it's using

[08:39] *** rindolf joined
[08:39] <Mouq> So let me do that quick

[08:39] <adu> Grammar::Mixin?

[08:39] <Mouq> yup

[08:42] <Mouq> Ah. So the reason I never put it into the ecosystem is because it's broken. Who'da thought? :P

[08:42] *** avuserow_ left
[08:42] <adu> Mouq: is it online?

[08:43] <Mouq> adu: https://github.com/Mouq/p6-Grammar-Mixin

[08:43] <adu> oh ok

[08:44] <Mouq> adu: Oh wait

[08:44] <Mouq> adu: You don't even need it

[08:44] *** khisanth_ left
[08:44] <Mouq> adu: Just delete the line from the top of Inline.pm

[08:44] <Mouq> It's there from an earlier iteration

[08:45] <Mouq> (which explains why I didn't realize it was broken)

[08:45] *** khisanth_ joined
[08:46] *** anaeem1_ left
[08:46] <adu> Mouq: hmm panda install NativeCall failed for me

[08:47] <Mouq> adu: You might be behind on your Rakudo

[08:47] <Mouq> .oO( We really need to get versioning sorted out )

[08:47] *** anaeem1 joined
[08:48] <[Tux]> I also do not quite like this:

[08:48] <[Tux]> Code object coerced to string (please use .gist or .perl to do that)  in sub is at lib/Test.pm:114

[08:53] *** oetiker joined
[08:53] *** KPTN joined
[08:53] *** Kristien joined
[08:54] <adu> Mouq: "==> Successfully installed NativeCall"

[08:54] <adu> :D

[08:54] <Kristien> hola

[08:54] *** p6_newbee joined
[08:55] <p6_newbee> hi guys

[08:55] *** avuserow_ joined
[08:55] <adu> Mouq: I get "Cannot find method 'package_at_key': no method cache and no .^find_method"

[08:55] <Mouq> eek

[08:55] <Mouq> uh

[08:55] *** khisanth_ left
[08:56] <Mouq> Those kind of cryptic errors I usually run again with --ll-exception and see if I can get any hints to play around with things

[08:56] *** alini joined
[08:56] <p6_newbee> Someone an idea how I can copy a string into the Window clipboard? As far as I know there is are not any Win32 module yet

[08:58] <adu> p6_newbee: http://www.c3scripts.com/tutorials/msdos/clip.html

[08:59] <p6_newbee> Jippieh. That was what I was looking for. THX

[08:59] <adu> so if you can pipe, then you can do that

[09:00] <p6_newbee> Besides, off course, a p6 module would provide that functionality :-)

[09:00] <p6_newbee> run should do the job for me

[09:00] <p6_newbee> THX adu

[09:00] <dalek> roast: 85b1707 | Mouq++ | S12-construction/new.t:

[09:00] <dalek> roast: Add a test for RT #77200

[09:00] <dalek> roast: review: https://github.com/perl6/roast/commit/85b1707729

[09:00] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=77200

[09:01] <adu> p6_newbee: and if you want to be really cross-platform: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/pbcopy.1.html

[09:02] <p6_newbee> I know pbcopy from Mac, but did not expect it on WIndows.

[09:03] <Kristien> pbcopy is OS X-specific

[09:03] <Kristien> although I have it as a custom Z shell function on Gentoo ^.^

[09:05] <p6_newbee> it may be a posix command. anyway thx for the help

[09:05] *** p6_newbee left
[09:07] <andreoss> japhb: i sent a pull request. Seems working but takes a long time, about half of an hour on core2duo. I asked about auxiliary input before, people here advised me to generate it within test-script, i don't feel like it's quite correct though. 

[09:07] <nine> gtodd: only just now saw your messages about Platypus. My gut reaction is that it's probably not powerful enough for a Perl 6 <-> Perl 5 bridge. I do have to go to some extremes to make everything work. I not only want to make it possible to mix code, I want to make it as seamless as possible.

[09:08] <Kristien> p6_newbee no

[09:08] <Kristien> it has nothing to do with POSIX

[09:08] <Kristien> it's OS X feature, POSIX doesn't have a notion of clipboards

[09:08] <nine> colomon: how do I add Inline::Python to the ecosystem?

[09:09] <Kristien> I've been thinking about something interesting lately

[09:10] <adu> "xclip -i -selection clipboard" for linux

[09:11] <adu> nine: do you have a META.info?

[09:11] <nine> adu: yes

[09:13] <adu> nine: is it on github?

[09:13] <nine> adu: yep

[09:13] <adu> nine: then all you have to do is add it to https://github.com/perl6/ecosystem/blob/master/META.list

[09:14] <adu> nine: do you have a commit bit?

[09:15] <Kristien> adu, https://gist.github.com/rightfold/bccbb49c4beb4620631c :D

[09:15] <adu> Kristien: lol

[09:15] <nine> adu: apparently not

[09:16] <adu> nine: I could add it for you, I like Python

[09:16] <nine> adu: please, go ahead :)

[09:17] *** reugen joined
[09:17] <adu> nine: is it this one? https://raw.githubusercontent.com/niner/Inline-Python/master/META.info

[09:18] <nine> adu: indeed

[09:18] <adu> nine: hrm, all the unit tests fail for me

[09:19] <nine> adu: any common error message?

[09:19] <adu> "unable to find Inline/pyhelper.so IN @*INC"

[09:19] *** anaeem1 left
[09:20] <adu> nine: "make: *** No rule to make target `/Users/ajr/Workspaces/Perl6/Inline-Python/.panda-work/1422868783_2/blib/lib/Inline/pyhelper.dylib', needed by `all'.  Stop."

[09:21] <dalek> Inline-Python: 79ee820 | (Stefan Seifert)++ | Makefile.in:

[09:21] <dalek> Inline-Python: Enable C compiler warnings to more easily catch compilation problems

[09:21] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/79ee8200a9

[09:21] *** Kristien left
[09:22] <nine> adu: do you get more information with this commit?

[09:22] <nine> adu: looks like you're on OS X. Unfortunately I don't know anything about this system. configure.pl6 might need some adaptions.

[09:23] <adu> I am

[09:25] <adu> nine: there's one more .so in the Makefile.in that could be converted to %SO%

[09:26] <nine> adu: even two

[09:27] <dalek> Inline-Python: 69d053d | (Stefan Seifert)++ | Makefile.in:

[09:27] <dalek> Inline-Python: Replace remaining hard coded .so extensions by %SO% in Makefile.in

[09:27] <dalek> Inline-Python: 

[09:27] <dalek> Inline-Python: Thanks to adu++ for noticing!

[09:27] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/69d053dbc8

[09:30] <adu> nine: how to I add configure parameters?

[09:32] <dalek> Inline-Perl5: 05668e1 | (Stefan Seifert)++ | Makefile.in:

[09:32] <dalek> Inline-Perl5: Replace hard coded .so extensions by %SO% variable in Makefile.in

[09:32] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/05668e14a3

[09:32] <nine> adu: like what for example?

[09:32] <adu> like INCLUDEPY=.../include

[09:33] <adu> I have several to choose from: http://pastie.org/9879946

[09:34] *** Kristien joined
[09:34] *** molaf left
[09:34] <Kristien> can one create custom meta-operators?

[09:34] *** telex left
[09:34] <moritz> I don't think so

[09:34] *** molaf joined
[09:35] <nine> adu: configure.pl6 is a fairly straight forward Perl 6 script. It calls the python executable to get build information. If you make sure that "python" calls the python you want, everything should work. Otherwise you could add some logic to support multiple Python installations to configure.pl6

[09:35] *** abraxxa joined
[09:35] <nine> http://www.phoronix.com/scan.php?page=news_item&px=Perl-6.0-2015-Christmas

[09:36] *** telex joined
[09:37] *** abraxxa left
[09:37] *** [Sno] joined
[09:37] *** abraxxa joined
[09:38] *** Kristien left
[09:38] *** Kristien joined
[09:39] *** espadrine_ joined
[09:39] <adu> nine: perl -MExtUtils::Embed -e ccopts -e ldopts is returning -arch x86_64 -arch i386 but my python was only compiled with  -arch i386, so I get a link error

[09:40] <nine> adu: I cannot imagine a 64 bit Perl6 working with a 32 bit Python

[09:42] *** anaeem1_ joined
[09:42] <Kristien> nine: using IPC!

[09:42] *** SamuraiJack joined
[09:43] <nine> Kristien: of course, yes. A solution that Python people intriguingly have never discovered and instead force people to port everything to their incompatible new version.

[09:46] <_mg_> There seems to be a problem with the way rakudo star sets up its executables. Please see http://stackoverflow.com/questions/9988125/shebang-pointing-to-script-also-having-shebang-is-effectively-ignored, it does affect MacOS as far as I can see. Calling "panda" will not work, because its shebang points to another script with a shebang line. The shell will ignore that and try to interpret panda on its own, which of course fails.  Calling "perl6 panda" does work

[09:51] *** kjs_ joined
[09:53] <adu> nine: I think I got it to work on mac: https://gist.github.com/andydude/437bbc4a3752d0889b70

[09:55] <adu> the problem was what I said above, my python was x86_64, but clang was trying to link against the i386 version of it, which doesn't exist, so I got lots of errors

[09:55] <nine> adu: cool :) There's probably some variable we can use to make a patch to lib/Inline/Python.pm6 unnecessary. I'm not sure about what to do about perl seeming to give the wrong compiler flags though.

[09:56] <El_Che> slashot: http://developers.slashdot.org/story/15/02/01/2130237/perl-6-in-time-for-next-christmas?utm_source=rss1.0mainlinkanon&utm_medium=feed

[09:56] <adu> nine: why do you need to like to perl libraries for perl6 anyways?

[09:57] <_mg_> _mg_: this means that on MacOS no perl scripts can be ran directly

[09:57] <adu> _mg_: confirmed, I had a pastebin about that

[09:58] <_mg_> adu: any idea how it can be solved? How to proceed?

[09:58] <tadzik> hello #perl6

[09:59] <adu> It was very alarming to see "bash: command not found: use v6" while running panda 

[10:00] <adu> _mg_: well, if I remember correctly /usr/bin/env solves it because it's a binary

[10:01] <_mg_> hm, let me try that

[10:01] <adu> _mg_: #!/absolute/path/to/perl6 fails for some reason, especially if it's a bash script around moar or something

[10:01] <_mg_> yes, because if the issue I mentioned above

[10:02] <adu> _mg_: but I was told to use rakudobrew instead of rakudostar, because it's more up to date, and it works for me

[10:03] <_mg_> adu: your fix works. I can add this to the homebrew formula. Will it also go upstream?

[10:03] <adu> _mg_: rakudobrew already has that fix iirc

[10:03] <_mg_> adu: I think a working released homebrew formula is also needed

[10:04] <_mg_> adu: ok, thanks, I'll add the workaround and mark it as temporary

[10:05] <nine> adu: that's an excellent question! And I actually don't know. I guess it's just because I started by copying the build scripts from Inline::Perl5 and did not give it any thought after I got it running.

[10:06] <adu> nine: my suggesstion would be to remove as many options as you can until it doesn't compile anymore, then start adding them back

[10:06] *** Mouq left
[10:07] <nine> adu: on my system I can remove the whole call to perl altogether and have it still work

[10:07] *** SamuraiJack left
[10:07] <adu> nine: me too, x86_64 is the default arch

[10:08] *** SamuraiJack joined
[10:08] <adu> so you could probably get rid of -MExtUtils::Embed / $(EXTOPTS)

[10:09] <dalek> Inline-Python: df208e7 | (Stefan Seifert)++ | Makefile.in:

[10:09] <dalek> Inline-Python: Remove leftover call to perl from build script

[10:09] <dalek> Inline-Python: 

[10:09] <dalek> Inline-Python: The call to perl's ExtUtils::Embed was just a leftover from copying the build scripts from Inline::Perl5. The do actually do more harm than good.

[10:09] <dalek> Inline-Python: 

[10:09] <dalek> Inline-Python: adu++ for asking me the obvious :)

[10:09] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/df208e74a0

[10:10] <adu> s/like/link/

[10:11] <dalek> ecosystem: b4c8337 | (Andrew Robbins)++ | META.list:

[10:11] <dalek> ecosystem: Added Inline::Python to META.list

[10:11] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/b4c8337080

[10:13] <[Tux]> new rakudowbrew uses moar-nom instead of moar-HEAD and panda now fails:

[10:13] <[Tux]> Could not find Shell::Command in any of: /pro/3gl/CPAN/rakudobrew/moar-nom/install/languages/perl6/lib, /pro/3gl/CPAN/rakudobrew/moar-nom/install/languages/perl6

[10:13] * [Tux] rebuilds panda

[10:14] <[Tux]> right, that fixed it

[10:14] <[Tux]> Inline::Perl5 still fails though

[10:16] *** SamuraiJack left
[10:16] *** SamuraiJack joined
[10:17] <adu> nine: I added it to META.list, but it might take a day to show up places

[10:18] *** rurban joined
[10:19] <nine> adu: many thanks :)

[10:19] <[Tux]> no real change in performance. all still well after the move from head to nom: http://tux.nl/Files/20150202111905.png (left = HEAD, right = nom)

[10:20] <[Tux]> top 5 are perl5, bottom 4 are perl6

[10:20] <[Tux]> when I have Inline::Perl5 working, I want to add that to the list

[10:20] * [Tux] => $work now

[10:26] *** ven joined
[10:27] *** adu left
[10:29] <ven> o/, #perl6

[10:29] <yoleaux> 5 Jan 2015 20:22Z <timotimo> ven: I'm following AGDQ, but i'm not able to watch most of it live, more or less for the same reason why i can't do the weekly or do much perl6 coding

[10:29] <ven> wow, that was a long time ago :-)

[10:29] *** yeahnoob left
[10:29] <Kristien> lol

[10:31] <Kristien> how reliable are CPAN reviews?

[10:33] <Kristien> nvm, what a horrible question

[10:33] *** pecastro joined
[10:35] <nine> Kristien: well there's at least not much incentive for writing reviews in bad faith.

[10:36] *** chenryn left
[10:38] <ven> looks like the c++ guys found a way to add their own infixes... http://pfultz2.github.io/Fit/doc/html/infix/ uhh

[10:39] *** reugen left
[10:41] <Kristien> ven https://github.com/klmr/named-operator

[10:41] <Kristien> that guy did it a long time ago

[10:42] <ven> "they didn

[10:42] <ven> oh my god, this keyboard.

[10:44] *** _mg_ left
[10:45] <moritz> what do you guys use for continuous builds (and maybe continues delivery)?

[10:45] <ven> .oO( [coke] )

[10:47] <Kristien> moritz: TeamCity

[10:47] *** valentin joined
[10:48] *** rindolf left
[10:48] <moritz> Kristien: do you like it? does it work?

[10:49] <Kristien> Yes. Yes.

[10:49] <Kristien> It works very well.

[10:49] *** rindolf joined
[10:50] <moritz> Kristien: which language are those projects in?

[10:50] <Kristien> One in PHP, one in Python.

[10:50] <ven> teamcity is intellij's, right?

[10:50] <moritz> ven: jetbrain's

[10:50] <ven> right, what I meant

[10:50] <Kristien> but you can have it run any shell script

[10:51] <Kristien> if your tooling is not supported otherwise

[10:51] <Kristien> there's no contiguous delivery though

[10:51] <Kristien> I always run ./deploy.zsh manually

[10:51] <moritz> we're currently experimenting with gocd, and it seems to be a huge hassle to transport the version information through the stages

[10:52] <Kristien> what do you mean?

[10:52] <Kristien> communicating information between build stages?

[10:53] <Kristien> can't you write the data to a file?

[10:54] <mst> Kristien: cpanrantings is utterly terrible, IME

[10:55] <ven> .oO( In my e-opinion )

[10:55] <moritz> Kristien: I can. But then I can't use the automatic retrieval of build artifacts, because the file name is in the meta data file, not in the tool

[10:55] *** SamuraiJack left
[10:55] <moritz> at least that's my understanding

[10:55] <moritz> the docs are less than awesome

[10:57] <Kristien> mst: OK :P

[10:58] <Kristien> moritz: oh :v

[10:58] <mst> Kristien: 70%+ of the reviews are "I got it to work first time for my use case, therefore 5 stars" or "I didn't get it to work first time for my use case, therefore 1 star"

[10:58] <mst> I mean, people invent reasons for their ratings, but those are generally the underlying reasons

[10:59] <mst> so ... it does provide data points, but not the data points you might actually want it to

[11:00] <mst> the various module review blogs on iron man seem to do rather better

[11:00] *** pecastro_ joined
[11:03] *** khisanth_ joined
[11:03] *** valentin left
[11:04] *** pecastro left
[11:05] *** pecastro_ left
[11:05] *** pecastro joined
[11:08] *** prime left
[11:11] <masak> good afternoon, #perl6.

[11:16] <moritz> \o masak

[11:16] *** chenryn joined
[11:20] *** yeahnoob joined
[11:24] *** prime joined
[11:25] *** chenryn left
[11:27] <cdc> cleqr

[11:27] <cdc> oops ww

[11:30] <masak> that was meant for the #cleqr channel :P

[11:32] *** kaleem left
[11:33] *** chenryn joined
[11:44] *** rurban left
[11:44] *** rurban joined
[11:46] *** rurban1 joined
[11:46] *** rurban1 left
[11:48] *** chenryn left
[11:49] *** chenryn joined
[11:52] *** f3ew joined
[11:54] <|Tux|> https://gist.github.com/Tux/280d6c6c87a6e7c647f5

[12:13] *** kjs_ left
[12:14] <nine> |Tux|: could you please try running the failing Inline::Perl5 tests with perl6 directly and see if they still fail? They do work for me, but Inline::Python's t/call_back.t fails with a similiar message when I run make test but not with perl6 or even prove -e 'perl6 -I'

[12:18] <|Tux|> $0 for panda should strip path for usage message :)

[12:18] <|Tux|> $ panda -install Inline::Perl5

[12:18] <|Tux|> Usage:

[12:18] <|Tux|>   /pro/3gl/CPAN/rakudobrew/moar-nom/install/languages/perl6/site/bin/panda [--notests] [--nodeps] install [<modules> ...] -- Install the specified modules

[12:20] <ab5tract> o/ #perl6

[12:21] <ab5tract> so, today i feel good. TimToady used a Hobbit-LotR framework for his talk!

[12:21] <ab5tract> i've been using that analogy about Perl 5 - Perl 6 for over a year :)

[12:21] <osfameron> I'm not entirely certain that's a favourable analogy :D

[12:21] <ab5tract> osfameron: how so?

[12:22] <|Tux|> niner$ rakudobrew/Inline-Perl5 578 > perl6 -Ilib t/call.t

[12:22] <|Tux|> ===SORRY!===

[12:22] <|Tux|> unable to find Inline/p5helper.so IN @*INC

[12:22] <osfameron> Hobbit is small but perfectly formed... though I haven't heard how he's using the analogy so may be misunderstanding?

[12:24] *** Kristien left
[12:24] <nine> |Tux|: did you run perl6 configure.pl6 before?

[12:24] <colomon> .u 𝚪

[12:24] <yoleaux> U+1D6AA MATHEMATICAL BOLD CAPITAL GAMMA [Lu] (𝚪)

[12:25] <|Tux|> not that I am aware

[12:25] <|Tux|> it is not in rakodobrew's readme I think

[12:25] * |Tux| re-reads

[12:25] <nine> |Tux|: I mean Inline-Perl5's configure.pl6

[12:26] <|Tux|> FWIW, I did a git checkout, cd'd to the folder and ran "panda install ."

[12:26] <|Tux|> assuming that would do the required steps

[12:26] <ab5tract> osfameron: the Hobbit required significant retcon'ing

[12:26] <nine> |Tux|: never tried that. I just run configure and use it from the repo directory

[12:26] <ab5tract> and Tolkien disliked the style of the work later in life

[12:27] <ab5tract> (though i don't agree with that dislike)

[12:27] <|Tux|> nine, configure ran, and then?

[12:27] <ab5tract> also, the hobbit was written without knowing the end. it's actually full of holes that no one wants (or really needs) to pay attention to. 

[12:27] <nine> |Tux|: now perl6 -Ilib t/call_back.t

[12:28] <|Tux|> all pass

[12:28] <ab5tract> anyway, i haven't heard his talk either. my own comparison always came from the scope of the two projects, and the length of time to realize them

[12:28] <|Tux|> so it must be interaction with panda that breaks.

[12:28] <nine> |Tux|: what about prove -e 'perl6 -Ilib' t

[12:28] <nine> |Tux|: and finally make test

[12:29] <ab5tract> osfameron: i highly recommend the Tolkien Professor podcast, or his book, for more information

[12:32] *** pecastro left
[12:32] *** espadrine_ is now known as espadrine

[12:33] <|Tux|> nine: https://gist.github.com/Tux/5838b1eac0512495dd30

[12:34] *** pecastro joined
[12:34] <ab5tract> interesting conclusion from the Tolkien Professor and friends, was that the issues with Peter Jackson's hobbit films is that they stick _too_ closely to the books. if that sounds counterintuitive to you, i think giving it a listen is highly worth it :)

[12:34] <nine> |Tux|: that's so very strange. Have a look at the Makefile. It runs exactly "prove -e 'perl6 -Ilib' t" when you do make test. So how can it fail with make but work when you run the command directly??

[12:35] <|Tux|> it fails with both, right?

[12:35] <nine> |Tux|: t/call_back.t doesn't

[12:35] <|Tux|> it is not call_back.t, but call.t that fails

[12:35] <|Tux|> the error is shown too late

[12:36] <dsm> m: 0x123456.chr

[12:36] <camelia> rakudo-moar 12db81: ( no output )

[12:37] <dsm> m: say 0x123456.chr

[12:37] <camelia> rakudo-moar 12db81: OUTPUT«Iteration past end of grapheme iterator␤  in method print at src/gen/m-CORE.setting:16657␤  in sub say at src/gen/m-CORE.setting:17357␤  in block <unit> at /tmp/Kf_Cce_paG:1␤␤»

[12:37] <nine> |Tux|: what's your locale?

[12:37] <|Tux|> en_US.utf8

[12:37] <|Tux|> en_US.UTF-8

[12:37] *** fhelmberger joined
[12:38] *** rmgk_ joined
[12:38] *** rmgk is now known as Guest68501

[12:38] *** Guest68501 left
[12:38] *** rmgk_ is now known as rmgk

[12:41] <nine> |Tux|: well, there's definitely some floating point strangeness going on

[12:41] <|Tux|> my perl5 is -Duselongdouble

[12:44] <jnthn> Afternoon, #perl6

[12:45] * jnthn is safely back from FOSDEM

[12:45] <nine> |Tux|: that's probably the reason! p5_float_to_sv passes a double to newSVnv. perl5's documentation is inconsistent there. perlapi says the parameter is an NV, perlguts says it's a double

[12:45] * |Tux| feels like bit useful again :)

[12:49] <colomon> o/

[12:51] <nine> Can I cast a long double to a double in C?

[12:51] <moritz> (double) thingy

[12:52] <dalek> Inline-Perl5: bfa5003 | (Stefan Seifert)++ | p5helper.c:

[12:52] <dalek> Inline-Perl5: Hopefully fix compatibility with perls compiled with -Duselongdouble

[12:52] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/bfa500329a

[12:52] * moritz feels a bit useful agian

[12:52] <nine> |Tux|: please give that ^^^ a try

[12:53] *** kjs_ joined
[12:54] <|Tux|> p5_to_p6 and p6_to_p5 pass

[12:54] <nine> \o/ progress!

[12:54] <|Tux|> call_back from test still fails, passes on manual

[12:55] <nine> what about call.t?

[12:55] <|Tux|> pass

[12:55] *** kaleem joined
[12:56] <|Tux|> https://gist.github.com/Tux/9ad62e2c3a75e2a3455d

[12:57] <|Tux|> afp6 ($work calls) back later

[12:57] <nine> Ok. I do not see that message here but do get the exact same message with Inline::Python's call_back.t. So it's probably the same reason

[12:58] <jnthn> nine: If you have it to hand, suggest a run under valgrind (alternatively, ASAN)

[12:59] *** jansolcon joined
[13:03] <nine> jnthn: thanks, will give that a try

[13:12] <masak> jnthn! \o/

[13:13] <masak> jnthn: slides slides slides slides? :D

[13:13] <timotimo> hum

[13:13] <timotimo> the video of jnthns talk isn't in the same folder as the other perl devroom things: http://video.fosdem.org/2014/K3201/Saturday/

[13:14] <moritz> timotimo: you realize that's 2014?

[13:14] <timotimo> ... oh!

[13:15] <timotimo> well ...

[13:15] <timotimo> i live in the past, i suppose :)

[13:15] <moritz> today, I accidentally pasted some DDL (schema changes) into the wrong window

[13:15] <moritz> I planned to paste it into the db shell from the staging environment

[13:16] <moritz> and instead pasted it into the production one

[13:16] <moritz> luckily, I don't have the permissions to do schema changes in prod :-)

[13:16] <|Tux|> masak, want me to RT the macro fail in classes?

[13:16] <|Tux|> m: class C{has$.x=1;macro m(){$.x;};method foo(){m;}};C.foo;

[13:16] <camelia> rakudo-moar 12db81: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/RjyIDi3YQk␤Variable $.x used where no 'self' is available␤at /tmp/RjyIDi3YQk:1␤------> [32mclass C{has$.x=1;macro m(){$.x[33m⏏[31m;};method foo(){m;}};C.foo;[0m␤    expecting any of:…»

[13:16] <jnthn> masak: haha :P

[13:16] <jnthn> masak: Will tend to that on le tren later this afty :)

[13:17] <moritz> |Tux|: I'm pretty sure masak++ knows about this, given that one of his grant milestones is fixing it :-)

[13:17] <|Tux|> ok

[13:17] <masak> jnthn: "le train", surprisingly.

[13:17] <|Tux|> jnthn asked me to ask on fosdem

[13:18] * masak looks at |Tux|'s thing

[13:18] <masak> |Tux|: please submit that one.

[13:18] <timotimo> in that case, i'll patiently wait for jnthn to upload his slides :)

[13:18] <jnthn> masak: French...Spanish...it's all romance languages. :P

[13:18] <masak> it might be in RT, but I'm not 100% sure it is.

[13:18] <masak> |Tux|: secondly, I'm not 100% it's wrong as is.

[13:19] <masak> there *is* no self avaliable there.

[13:19] <masak> and you're not using a quasi.

[13:19] <|Tux|> when macro is "like" in-line, it should have the context of the caller

[13:19] <masak> even if you were, quasis usually adhere to lexical scoping.

[13:19] <masak> |Tux|: not automatically, no.

[13:19] <masak> |Tux|: that would be unhygienic.

[13:19] <|Tux|> I was already explained the diff for "sub" (vs macro)

[13:20] <masak> apparently not in a good way :P

[13:20] *** muraiki_ joined
[13:20] <|Tux|> well, nobody was 100% sure about this either

[13:20] <masak> lunch, but I can explain more later &

[13:20] <timotimo> there was no post-fosdem hackathon in brussels?

[13:21] <TimToady> nope

[13:21] <TimToady> more of a walkathon

[13:21] <|Tux|> :)

[13:21] <timotimo> you're walking back to america?

[13:22] <TimToady> via the Bering Land Bridge

[13:22] <TimToady> we might have to wait for the next ice age though

[13:22] <nine> The one thing I do not miss at all from FOSDEM is standing and walking in the cold :)

[13:22] <jnthn> Bah, it wasn't really cold

[13:23] <TimToady> today the weather is lovely, go figure

[13:23] * |Tux| even left his jacket in the car

[13:23] <nine> jnthn: probably sitting on metal benches with Ævar for three hours and drinking beer has something to do with me having been thouroughly frozen

[13:24] <timotimo> any word on jnthn slides btw?

[13:24] <nine> outside that is

[13:25] <jnthn> nine: Uh, yeah... :P

[13:25] <jnthn> timotimo: They had lots of words on them, I heard...

[13:30] *** Kristien joined
[13:33] *** davercc left
[13:36] *** Kristien left
[13:41] *** konsolebox joined
[13:48] <nine> valgrind does not detect any errors, but I can reproduce the error by calling moar directly instead of using the perl6 shell wrapper (still executing exactly the same command)

[13:51] <nine> Passing any --optimize argument hides the error again

[13:53] <nine> As does setting any of MVM_SPESH_DISABLE, MVM_SPESH_INLINE_DISABLE, MVM_SPESH_OSR_DISABLE or MVM_JIT_DISABLE

[13:54] *** FROGGS[mobile] joined
[13:55] *** kaare_ left
[13:55] <timotimo> jnthn: :D

[13:56] *** Kristien joined
[13:56] *** xfix joined
[13:57] <nine> call_back.t does run its tests a 100 times in a loop, so SPESH might actually be the source of the strangeness

[14:02] *** chenryn left
[14:06] <Kristien> Am I the only one who often confuses ack and awk?

[14:06] <gtodd> nine: hi ... glad your talk was well received !

[14:09] <nine> gtodd: thanks :)

[14:09] *** Woodi joined
[14:11] <|Tux|> gtodd, one of the "new" names I now have met IRL

[14:12] <gtodd> [Tux]: who me or nine ? :)

[14:12] <|Tux|> you

[14:12] <gtodd> oh good

[14:12] <|Tux|> walking to the venue, sa-morning

[14:13] <gtodd> I hope I enjoyed the talks ... 

[14:13] <ven> :D

[14:13] <gtodd> :-D

[14:13] <gtodd> must've been another smarter younger me

[14:15] <hoelzro> good *, #perl6

[14:15] <colomon> \o

[14:17] <colomon> As long as I’m typing here…. in Math::OddFunctions, I need to NativeCall functions in the standard library.

[14:18] <colomon> Unfortatunately, OS X seems to call the standard lib libSystem, which I’m guessing isn’t going to fly in Linux.

[14:18] <moritz> iirc there was a hack with using the empty library name

[14:18] <colomon> Anyone have a notion how I can tackle this issue?

[14:18] <moritz> does that happen to work?

[14:18] <colomon> like just “” ?

[14:19] <colomon> is native('') fails on OS X

[14:19] <colomon> errr… if that’s a recent hack, though, I guess I might not have it here.

[14:19] <Kristien> is there not a function to get the current image

[14:19] <Kristien> dlsym takes NULL

[14:20] <moritz> colomon: or just  'is native()' maybe?

[14:20] *** khisanth_ left
[14:21] <colomon> moritz: nope, that fails even harder

[14:21] <Kristien> > If the library name is an undefined value or the empty string, the symbol will be searched for in the currently loaded libraries of the process

[14:21] <arnsholt> is native(Str) IIRC

[14:21] <colomon> moritz: (compile time fail versus run time fail)

[14:21] <colomon> arnsholt++

[14:21] <colomon> moritz++ # for trying

[14:21] <arnsholt> (Str being the null value for strings)

[14:22] *** atta_ is now known as atta

[14:23] *** Rounin left
[14:23] *** khisanth_ joined
[14:24] *** khisanth_ is now known as Guest87392

[14:26] <|Tux|> "Jan 30 12:42:10 * colomon is completely baffled by TuxCM’s code"

[14:26] <rba_> q

[14:26] <|Tux|> do you remember *why*?

[14:28] <ven> stage parse: 34. and that's on a vm...

[14:29] <Kristien> I'm so happy.

[14:29] <Kristien> I finally go threads working with Perl

[14:29] *** pmurias joined
[14:29] <dalek> nqp-js: 64f5a76 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[14:29] <dalek> nqp-js: Implement nqp::bindkey.

[14:29] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/64f5a763df

[14:29] <dalek> nqp-js: 4743eed | (Pawel Murias)++ | t/nqp/71-setboolspec.t:

[14:29] <dalek> nqp-js: Add tests for setboolspec with mode 5 (MODE_NOT_TYPE_OBJECT).

[14:29] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/4743eede17

[14:29] <dalek> nqp-js: 90f958a | (Pawel Murias)++ | src/vm/js/ (7 files):

[14:29] <dalek> nqp-js: Pass test 71.

[14:29] <dalek> nqp-js: 

[14:29] <dalek> nqp-js: Implement setboolspec with modes 0 and 5.

[14:29] <dalek> nqp-js: Made mode 5 the default.

[14:29] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/90f958a257

[14:29] <dalek> nqp-js: 2f9ee98 | (Pawel Murias)++ | src/vm/js/nqp-runtime/io.js:

[14:29] <dalek> nqp-js: Remove dead code.

[14:29] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/2f9ee98ef8

[14:30] <ven> rip dalek?

[14:30] <ven> did fglock work again on his 5 to 6?

[14:30] <pmurias> ven: dalek survived ;)

[14:32] <colomon> |Tux|: I think mostly because previous comments on #perl6 had lead me to be looking at the code backwards.

[14:40] *** _mg_ joined
[14:41] <masak> now http://www.perlfoundation.org/ is saying "Version 1.0 release" :(

[14:43] <moritz> masak: if you care about the wording, contact mdk?

[14:44] <masak> I would need more official backing than just my say-so to say that it's not called "1.0"

[14:44] * moritz still proposes to tag the language version with year and month, just like the rakudo releases

[14:44] <masak> in retrospect, we should've been ready with a press announcement of our own.

[14:44] <moritz> aye

[14:45] <Juerd> masak: Yeah, that should be 1.0.0 instead :P

[14:45] <masak> set the tone and the terms ourselves.

[14:45] <masak> another thing -- are we going to make a schedule for future 6.x.0 releases?

[14:45] <masak> like, once every Christmas or so?

[14:45] <Juerd> masak: You're saying that as if it's too late now.

[14:45] * masak .oO( in the future, every Christmas will be Perl 6! )

[14:45] <PerlJam> greetings!  How was fosdem for those of you who were there?

[14:46] <Juerd> PerlJam: Great, absolutely great.

[14:46] <|Tux|> worthwhile

[14:46] <PerlJam> excellent

[14:46] <PerlJam> Are any of the videos on youtube (or whatever) yet?

[14:46] <Juerd> For me, the best conference experience of the past year or so.

[14:47] <moritz> I have some stream dumps; if anybody cares, I can make them available

[14:47] <moritz> no idea what their quality is

[14:47] <Juerd> It was very nice to see the Perl booth being the most crowded one, obviously more so than the Python booth right next to it.

[14:47] <colomon> :)

[14:48] *** _mg_ left
[14:48] <Juerd> The Perl devroom had an average audience of twice its capacity

[14:48] <timotimo> but perl is dead!?

[14:48] <Juerd> timotimo: Perhaps it was, and I think it still is in .nl, but every FOSDEM, it seems like Perl is getting more popular than the year before

[14:48] <moritz> must be quite morbid, all those corpses filling the room... :-)

[14:49] <|Tux|> I'd like to see rjbs' talk, as I had to miss that

[14:49] <timotimo> :D

[14:49] <El_Che> PerlJam: I am in the (close) dev-room manager list. They should announce the first videos there. I'll keep you posted

[14:49] <El_Che> PerlJam: Status: "Real Soon" (with capitals)

[14:49] *** pecastro left
[14:50] * TimToady thinks .[] is a prettier post-@ than ->@* is

[14:50] <PerlJam> El_Che++ awesome, thanks!  

[14:50] <Juerd> TimToady: ->@* makes me very sad

[14:50] <PerlJam> TimToady: me too

[14:50] <Juerd> ->$#* is even worse

[14:50] *** jansolcon left
[14:50] <El_Che> masak: it's not to late to do a "press" like release about perl6 and distribute it widely

[14:51] * TimToady is not really interested in a lot of press at this point

[14:51] <Juerd> But, on the other hand, decreasing readability in Perl 5 makes Perl 6 look even better :P

[14:51] <TimToady> we just need to get it out, and call it whatever we like

[14:53] <pmurias> TimToady: with the "official" Perl 6 release be called Perl6 v1.0?

[14:53] <pmurias> s/with/will/

[14:53] <JimmyZ> 1.0.0 

[14:54] <TimToady> we don't have to decide that till Christmas

[14:54] <masak> oh, and here I just assumed it's a no-brainer to not call it "Perl 6 v1.0"

[14:55] <masak> I'm glad I waited for confirmation before contacting mdk ;)

[14:55] <Kristien> Perl 5.9999999999998549894 now featuring floating-point support!

[14:55] <El_Che> ::)

[14:55] <moritz> Kristien++

[14:55] <pmurias> masak: yes

[14:56] * PerlJam wonders how many people are still holding out hope that TimToady will officially change the name to Rakudo (or something *other* than Perl 6)

[14:56] <pmurias> masak: re offical Perl 6 release

[14:56] <moritz> PerlJam: quiet a few, it seems

[14:56] *** daxim joined
[14:56] <daxim> m: class Foo { has @bar; for @bar { } }

[14:56] <camelia> rakudo-moar 12db81: OUTPUT«Cannot look up attributes in a type object␤  in block <unit> at /tmp/LubobfSr_4:1␤␤»

[14:56] <daxim> nice :thumbsup:

[14:57] <masak> PerlJam: or Camelia Perl, or something.

[14:57] <TimToady> yawn

[14:57] <JimmyZ> Zerl

[14:57] <daxim> p6: class Foo { has @bars; has $quux; for @bars -> $bar { if $bar.name === $quux { } } }

[14:57] <moritz> masak: le't short CAmelia peRL to "carl" :-)

[14:57] <go|dfish> PerlHP

[14:57] <camelia> rakudo-parrot 12db81: OUTPUT«Can only use repr_get_attr_obj on a SixModelObject␤  in block <unit> at /tmp/tmpfile:1␤␤»

[14:57] <camelia> ..rakudo-moar 12db81: OUTPUT«Cannot look up attributes in a type object␤  in block <unit> at /tmp/tmpfile:1␤␤»

[14:58] <TimToady> Pirl

[14:58] <PerlJam> now I'm sorry I wondered out loud  :)

[14:58] * psch .oO( P»ö«rl )

[14:58] <masak> PerlJam: masak's law of serious topics: no topic is so serious it can't be turned into a bikeshed.

[14:58] <El_Che> There is More Than One Way To Name It

[14:59] * PerlJam is twice reminded of Dr. Seuss' Sleep Book now

[14:59] <masak> we should just change the name of the language with each point release.

[14:59] <masak> keep people on their toes.

[14:59] * masak .oO( Now Announcing: Psychedelic Perl 8.4! )

[14:59] <PerlJam> perl, perm, pern, pero, perp  (oops!)

[14:59] <ab5tract> Kristien: when you say that you have threads working with Perl, do you mean Perl 6? or do you mean Inline::Perl5 in Perl 6? or ... 

[15:00] * hoelzro .oO( reincarnated Perl? )

[15:01] <PerlJam> hoelzro: zombie perl!

[15:01] <hoelzro> after all, Perl 6 is just another manifestation of the Perl spirit, right? =)

[15:01] <hoelzro> PerlJam: haha, isn't that 5.8?

[15:01] <masak> PerlJam: there, you asked for it. it's your fault, not mine this time:

[15:01] <masak> m: my $lang = "perl"; $lang++ for ^45565; say $lang

[15:01] <PerlJam> heh

[15:01] <camelia> rakudo-moar 12db81: OUTPUT«ruby␤»

[15:01] * masak laughs hysterically

[15:01] <psch> masak++

[15:01] <hoelzro> masak: that should go on @perlhex

[15:01] <pmurias> masak: re name change, that would win over the ruby/node.js silly names crowd immediately

[15:02] <PerlJam> masak: you *know* someone is going to tweet that if you don't

[15:02] <colomon> m: my $lang = "perl"; $lang++ for ^15; say $lang

[15:02] <camelia> rakudo-moar 12db81: OUTPUT«pesa␤»

[15:02] <masak> I'll give someone else the pleasure.

[15:02] * masak .oO( Now Announcing: Bonkers Bugaboo Perl 14.3! )

[15:05] * masak .oO( Now Announcing: Happy Happy Boom Boom Swamp Swamp Swamp Perl 19.i.-7! )

[15:05] <moritz> am I the only one who is just glad that we can now do 45565 string ++ without running into camelia's timeout? :-)

[15:05] <PerlJam> masak: your first one made me think of bertie botts every flavored beans, and that's oddly appropriate for perl :-)

[15:08] <Kristien> ab5tract: use threads in Perl 5

[15:09] <Kristien> Gentoo didn't agree with me at first.

[15:09] <Kristien> But I won.

[15:09] <moritz> Kristien: and then you tried to actually do something with them, and lost again :-)

[15:09] <geekosaur> threads in perl 5 are :(

[15:10] <moritz> Kristien: at least that's been my experience, consistently

[15:10] <Kristien> I tried forks but that failed horribly

[15:10] <geekosaur> ?

[15:10] *** FROGGS joined
[15:11] <FROGGS> masak: about releases... I think time based releases (monthly compiler, star every three) have served us well, perhaps lets keep it that way

[15:15] <masak> FROGGS: yes, but I mean time-based releases of Perl 6 the languagespectestsuite.

[15:16] <FROGGS> masak: and I think you cannot divide the two - (roast and rakudo)... you need to add tests for the implementation and you need to implement the spec(tests) to prove it is working

[15:17] <masak> well, as soon as we have language versions, I imagine phrases like "this Rakudo targets Perl 6.3" will creep into the compiler announcements.

[15:17] <masak> or something.

[15:17] <FROGGS> aye

[15:18] <moritz> "Rakudo 2015.12 targets Perl 6 version 2015.12"

[15:18] <FROGGS> which means that rakudo can happily keep the YYYY.MM versioning theme

[15:18] <FROGGS> I'd like to see a semver-ish versioning theme for the language spec though

[15:18] <masak> moritz: I... I think I'm fine with a "Perl 6 version 2015.12" naming scheme.

[15:19] <masak> moritz: but part of me is a little sad to see "6.0.0" go.

[15:19] <pmurias> does storing closure code in string form and then recreating them with eval when compiling closures seems sane?

[15:19] <masak> pmurias: as long as you're really, *really* sure you're evaling in the "same" environment.

[15:19] <FROGGS> like, tests refined but no features added: 6.0.0 -> 6.0.1; features added that of course do not break back compat: 6.0.0 -> 6.1.0

[15:20] <pmurias> s/compiling/deserializing/

[15:20] <moritz> pmurias: no :-)

[15:20] <masak> what moritz said.

[15:20] <pmurias> masak: the environment I'm also deserializing

[15:20] <FROGGS> on the other hand, that means that you cannot break back compat in the slightest way and have that visible in the version number

[15:20] <FROGGS> so, maybe a Perl 6 1.0.0 might be what we want instead

[15:20] *** dolmen joined
[15:21] <ugexe> m: my $x = "example/x-deprecated.a.b.c"; say 'match1: '; say $x ~~ / \/ <before x> /; say 'match2: '; say $x ~~ / \- <after x>/; # why does <before return what i expect (/) but <after does not? (expected: -, got: Nil)

[15:21] <camelia> rakudo-moar 12db81: OUTPUT«match1: ␤｢/｣␤ before => ｢｣␤match2: ␤Nil␤»

[15:22] <moritz> ugexe: / <after x> '-' /

[15:22] <ugexe> ah

[15:23] <JimmyZ> .oO(use v1.0.0;)

[15:23] <moritz> m: given 'example/x-deprecated.a.b.c' { say ~m/ <after x> '-' / }

[15:23] <camelia> rakudo-moar 12db81: OUTPUT«-␤»

[15:23] <hoelzro> I've been reading through the spec changes for January, and I came across this little change by jnthn:

[15:23] <hoelzro> m: class A is Array { method m() { say "> $_" for self } ; } ; A.new(1, 2, 3).m

[15:23] <camelia> rakudo-moar 12db81: OUTPUT«> 1␤> 2␤> 3␤»

[15:23] <pmurias> masak: the other alternative is not using native javascript lexicals for deserialized closures

[15:24] <masak> I see.

[15:24] <hoelzro> I thought self was always treated in item context? so why can I do ... for self?

[15:24] <moritz> hoelzro: because it isn't anymore :-)

[15:24] <moritz> hoelzro: the $ usually forces item context, 'self' doesn't start with '$'

[15:24] <hoelzro> oh, I should've noticed those lines prefixed with '-'

[15:24] <hoelzro> sorry for the stupid question!

[15:25] * hoelzro makes more coffee

[15:25] <ugexe> moritz++ so i suppose that makes doing like [<before x> | <after y>] slightly more complicated...

[15:25] *** [Sno] left
[15:25] <PerlJam> m: class A is Array { method m($self:) { say "> $_" for $self } ; } ; A.new(1, 2, 3).m

[15:25] <camelia> rakudo-moar 12db81: OUTPUT«> 1 2 3␤»

[15:29] <itz_> hmm the datetimes on the 2014 fosdem videos suggests ~2-6 week lead time

[15:30] <moritz> ugexe: if you want to do that, you likely haven't thought through your problem properly

[15:30] * PerlJam got assigned TimeDate for his Feb PRC.  

[15:31] <PerlJam> not sure how I feel about the.

[15:31] <PerlJam> er, that

[15:31] *** jluis left
[15:31] <moritz> PerlJam: I've got Plack::App::Gearman::Status. Dunno yet what to do about it

[15:34] <itz_> that's odd DBIish doesn't seem to find libsqlite3.so anymore .. I'm sure it used it

[15:34] <itz_> ^ to

[15:34] <itz_> or NativeCall rather

[15:37] *** kjs_ left
[15:37] *** jluis joined
[15:38] <pmurias> masak: OTOH it might make sense for me to think that a bit more and work on something with more clear sane choice

[15:38] <pmurias> today

[15:39] *** Guest87392 left
[15:41] *** konsolebox left
[15:42] *** Guest87392 joined
[15:44] *** mr-foobar joined
[15:48] *** Guest87392 is now known as Khisanth

[15:55] *** spollei joined
[15:58] *** konsolebox joined
[16:00] *** Ugator joined
[16:05] *** Kristien_ joined
[16:06] *** Kristien_ left
[16:07] *** pecastro joined
[16:07] <skids> I was thinking this morning, once slangs are done, examples showing how to turn off or warn on  "some of the ways to do it" as a DSL/enforced-coding-syle-environment might ameliorate a few of the more legitimate complaints.

[16:08] *** virtualsue joined
[16:09] <hoelzro> has anyone thought about my COERCE multi idea anymore? I've implemented it and added tests in branches, so I'm eager for feedback =)

[16:10] *** rindolf left
[16:10] <dalek> rakudo-star-daily: ecd08ff | coke++ | log/ (9 files):

[16:10] <dalek> rakudo-star-daily: today (automated commit)

[16:10] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/ecd08fffd3

[16:10] <dalek> perl6-roast-data: 41a839d | coke++ | / (5 files):

[16:10] <dalek> perl6-roast-data: today (automated commit)

[16:10] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/41a839d395

[16:10] <dalek> perl6-roast-data: bfecab2 | coke++ | / (5 files):

[16:10] <dalek> perl6-roast-data: today (automated commit)

[16:10] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/bfecab202f

[16:13] <ven> hoelzro: I'm just not sure how's that more interesting that adding methods directly to the classes?

[16:13] <hoelzro> ven: because sometimes you don't control the classes

[16:13] <ven> to m, it just adds indirection, and you need to keep track of more (as in: did I export my coerce? can I have two conflicting coerces?...)

[16:14] <ven> hoelzro: but then you have two different syntaxes, so...

[16:14] <hoelzro> two different syntaxes?

[16:14] *** kgoess joined
[16:17] <kgoess> is Proc::Async expected to work, or is it still a work-in-progress? I'm getting a different failure each time I run this https://github.com/kgoess/restart-concurrent/blob/master/restart.p6

[16:17] <kgoess> though I may be Doing It Wrong... :-/

[16:18] <skids> Can anyone give me some bits on rt.perl.ok so I can do stuff while logged in?

[16:18] <skids> ord

[16:18] <skids> org

[16:18] <skids> I promise I will type better when I'm in there :-)

[16:19] *** gfldex joined
[16:20] <jdv79> so i ran something through perl --profile and the top 2 callsites for exlusive time (~10% each) were <anon> but looking at the source i think its nqp::is_concrete.

[16:20] <JimmyZ> kgoess: know bug, methinks

[16:20] <JimmyZ> *known

[16:20] <kgoess> k, thanks

[16:22] <jdv79> is that a common hot spot?

[16:23] *** FROGGS[mobile] left
[16:23] *** Kristien left
[16:33] *** zakharyas left
[16:34] <moritz> kgoess: just for the record, https://github.com/kgoess/restart-concurrent/blob/master/restart.p6#L12 won't work, because it's not evaluated through a shell

[16:35] <dalek> doc: fbfbf48 | moritz++ | lib/Language/functions.pod:

[16:35] <dalek> doc: funcitons: talk about return

[16:35] <dalek> doc: review: https://github.com/perl6/doc/commit/fbfbf48283

[16:38] <moritz> kgoess: but yes, I get lots of weird internal errors from that one too

[16:39] <moritz> kgoess: oh, also, you'll want to pass in the arguments as a flat list, not as an array in brackets

[16:39] <ven> hoelzro: foo.Str and Str(foo)

[16:39] *** kgoess left
[16:39] <hoelzro> ah, I see

[16:39] <moritz> kgoess: never mind my last line, you're probably doing this one right after all

[16:40] <hoelzro> well, I think you'd only see the former for some core classes, or for classes within a framework that need to convert among each other

[16:40] <hoelzro> having two syntaxes that achieve the same thing isn't bad; after all, TIMTOWTDI =)

[16:41] <hoelzro> a problem could arise, however, if Str($foo) and $foo.Str did different things (and COERCE($foo, Str) as well)

[16:41] <hoelzro> we have that problem *now*, though, just not the COERCE($foo, Str) variant

[16:41] <hoelzro> it just happens to be that Str($foo) calls $foo.Str by default

[16:42] <ven> hoelzro: I

[16:42] <ven> I really hate that keyboard, to start with...

[16:42] <hoelzro> haha

[16:43] <ven> hoelzro: having two different syntaxes to do the exact same thing in some cases. I'm not a big fan of TIMTOWDY, so MMMV (my mileage)

[16:43] <ven> that's not really what TIMTOWDI means to me – having two different syntaxes but with powerful differences

[16:43] <PerlJam> hoelzro: but also, what you said about not having access to foo's class.   Someone has given you some byte code for a Point class, and now you want to be able to coerce a Point into your brand new GeoPoint or something.  Do you prefer to "use MONKEY_TYPING; augment class Point { method GeoPoint... }"  or "multi COERCE (Point,GeoPoint) "?

[16:44] <hoelzro> the latter

[16:44] <hoelzro> PerlJam: ^

[16:44] <hoelzro> ven: ah, I see

[16:44] <PerlJam> indeed.  

[16:44] <ven> hoelzro: honestly, something like Coerce[GeoPoint](Point) would feel better to me, I think

[16:44] <ven> and that have that *everywhere*

[16:44] <hoelzro> ven: well, that problem needs to be addressed in Str($foo) vs $foo.Str as it is

[16:45] <hoelzro> ven: so ditch $foo.Str and Str($foo), and favor Coerce[GeoPoint](Point)

[16:45] <hoelzro> ?

[16:45] <ven> yeah, that's imho

[16:45] <ven> I don't like Str(foo) because I don't really want coercing to be "invisible"

[16:45] <ven> I don

[16:45] <ven> I HATE THAT KEYBOARD.

[16:45] <hoelzro> PerlJam: I feel like MONKEY_TYPING needs to be reserved for the most dire of circumstances

[16:46] <PerlJam> me too.

[16:46] <hoelzro> unless we can do something like Ruby refinements, which are monkey patches that only take affect in a lexical context

[16:46] <ven> I don't think coercing should be something so small that it reads as any other function call. But then, there's conversing and coercing

[16:46] <ven> hoelzro: agreed. it's really dangerous ;-)

[16:46] <pmurias> hoelzro: you mean translating Ruby code?

[16:46] <PerlJam> heh

[16:46] <hoelzro> pmurias: =P

[16:46] <japhb> FROGGS, lizmat: Are your S11 changes all merged yet, or are they still in branches?

[16:46] <hoelzro> ven: I think coercion and conversion overlap a bit in Perl 6

[16:47] <ven> they definitely do ;)

[16:47] <hoelzro> I personally think of it as conversion rather than coercion

[16:48] *** yeahnoob left
[16:49] <ven> hoelzro: the rule for me is "I want conversion to be done explicitly, always. coercing is like "some type of int to some other", which I'd like to have behind the scenes instead

[16:50] <hoelzro> makes sense to me

[16:51] <PerlJam> not to bikeshed or anything, but I think "MONKEY_TYPING" should have been spelled "MONKEY_BUSINESS" because many times you aren't concerned with "type" so much.

[16:52] <hoelzro> PerlJam++

[16:52] *** kaleem left
[16:57] <geekosaur> MONKEYING_AROUND

[16:57] <geekosaur> </bikeshed>

[16:58] <hoelzro> I guess the meanings of Str($foo) and $foo.Str are slightly different; the former is 'hey Str, give me a Str based on what $foo is', and the latter is 'hey $foo, give me a Str that represents you"

[16:58] <hoelzro> it's a matter of who's responsible

[16:58] <hoelzro> and the former just defers the responsibility to the value being coerced by default

[16:58] <ven> that *can* make sense, but has to be explained as such

[16:59] <ven> and then, COERCE() should not call .Str

[16:59] <hoelzro> why not?

[17:01] *** alini left
[17:04] *** fhelmberger left
[17:05] *** Kristien joined
[17:05] *** fhelmberger joined
[17:05] <Kristien> hi

[17:06] *** [Sno] joined
[17:06] <moritz> \o Kristien 

[17:09] *** KPTN left
[17:09] *** fhelmberger left
[17:10] <ab5tract> hoelzro: is that right? i thought that Str() was just a sugar around .Str

[17:10] *** pyrimidine joined
[17:12] <dalek> doc: 4b45c2d | moritz++ | lib/Language/functions.pod:

[17:12] <dalek> doc: Document the trait mechanism a bit

[17:12] <dalek> doc: review: https://github.com/perl6/doc/commit/4b45c2df63

[17:12] <hoelzro> ab5tract: by default, it is

[17:13] <hoelzro> well, Str($value) is right now (and will stay that way until the rakudo team decides to change it, or someone decides to monkeypatch)

[17:13] <hoelzro> but for any type T, T($value) may be overridden so that it does something other than call $value.T

[17:17] <ab5tract> umm, that sounds very sad to me :)

[17:17] <ab5tract> s/:)/:(/

[17:17] <ab5tract> i think it should only do that

[17:17] <ab5tract> ie, it should only ever be sugar. otherwise i don't see how it can be worth it

[17:18] <jnthn> Because having to monkeypatch to add coercions feels kinda wrong.

[17:18] <jnthn> Making an object invokable in order to do it isn't much better, though.

[17:20] * jnthn wonders if $thing.TypeName and TypeName($thing) should just be special forms for the same thing (maybe the COERCE thing hoelzro is looking at)

[17:21] *** kgoess joined
[17:22] <hoelzro> jnthn: in my branch, the latter just calls COERCE (by default, anyway)

[17:23] <hoelzro> jnthn: the former would require some dispatcher hacking, wouldn't it?

[17:23] <FROGGS> japhb: it is all merged IIRC, though it needs tweaking and extensive testing

[17:23] <kgoess> thanks, moritz, that was part of my experimenting to see if it did anything different.  changing the sleep && echo to just echo gives the same results

[17:23] *** telex left
[17:23] <jnthn> hoelzro: No, it'd be a syntactic distinction

[17:23] <FROGGS> japhb: what is not merged is the CPAN support for panda, this is because the zlib bindings are not very portable atm

[17:23] <skids> There has to be a way to choose between which class's coercion implementation to use, because one class may be know better.  So that's the intent of the spec.

[17:23] <jnthn> hoelzro: Because we know what a typename is.

[17:24] <hoelzro> jnthn: oh, so $obj.Type woud generate a different AST, then?

[17:24] <jnthn> Yeah

[17:24] <hoelzro> what about my $method-sort-of = 'Str'; $value."$method-sort-of"()?

[17:24] *** telex joined
[17:24] <jnthn> Well, not suggesting it yet, just throwing ideas about.

[17:24] <hoelzro> ideas are good =)

[17:24] <jnthn> hoelzro: That one we can't see syntactically

[17:24] <hoelzro> right

[17:24] <colomon> errr…. wouldn’t that cause issues with new type names conflicting with existing method names?

[17:25] <jnthn> hoelzro: It's that edge case and related that make me hesitate.

[17:25] <jnthn> colomon: That'd be rare given types are typically uppercase and method names lowercase.

[17:25] <hoelzro> colomon: maybe you couldn't declare a method with a titlecase name, then?

[17:25] <hoelzro> that seems...off, though

[17:25] <colomon> jnthn: but that’s purely a convention

[17:25] <jnthn> But yeah. There's a lot of reasons to be hesitant.

[17:25] <hoelzro> jnthn: I would almost say that $value."Str"() would call a Str method on value

[17:26] *** kjs_ joined
[17:26] <japhb> FROGGS: Other than not shipping zlib's DLL for windows, what else is not portable about those bindings?

[17:26] <hoelzro> I don't know if things like $value."not a method name"() work, though

[17:26] <jnthn> colomon: Sure, though strong enough that STD (and Rakudo too) use it to make guesses on how best to report errors. :)

[17:26] * colomon knows he has not always consistently made his method names lower case … bad spillover from his C++ work

[17:27] *** adu joined
[17:29] <FROGGS> japhb: 32bit os support is an issue IIRC

[17:30] <FROGGS> japhb: but I will investigate soonish anyway, because qa2015 will be the next workshop I'm going to attend

[17:30] * japhb wonders if that's sufficient reason not to merge -- given that merging will make 32-bit life no worse, and 64-bit life better.

[17:30] <hoelzro> hmmm...what if $value.Type dispatched to the method Type on $value, unless none was defined, in which case it would invoke COERCE?

[17:31] * hoelzro is also not too keen on that, tbh

[17:31] <FROGGS> japhb: it will make 32bit life worse, because when one dependency is faulty, your panda won't work at all

[17:32] <jnthn> hoelzro: I don't really like fallback-y things...

[17:32] <jnthn> hoelzro: Not on hot-path-ish stuff like coercion

[17:32] <hoelzro> jnthn: yeah, just thinking out loud...on IRC.

[17:33] <skids> jnthn: If I were looking to add some Mu methods to NQPCursor and other "faked" stuff, just add them, or is there a preferred course of action there?  I imaging hiding them by promoting them (somehow?) to the corresponding P6 classes is currently either NYI or not performant?

[17:34] <jnthn> skids: Where does NQPCursor show up?

[17:34] *** Kristien left
[17:34] <skids> Regex.^methods.

[17:34] <skids> And NQPRoutine in Grammar.^methods.

[17:35] <jnthn> m: Regex.^methods.map({.^name}).unique.say

[17:35] <camelia> rakudo-moar 12db81: OUTPUT«ForeignCode Method␤»

[17:35] <jnthn> m: Grammar.^methods.map({.^name}).unique.say

[17:35] <camelia> rakudo-moar 12db81: OUTPUT«Method NQPRoutine␤»

[17:35] <skids> Sorry I meant parents I think.

[17:35] <skids> m: Grammar.^methods.say

[17:35] <camelia> rakudo-moar 12db81: OUTPUT«No such method 'gist' for invocant of type 'NQPRoutine'␤  in method gist at src/gen/m-CORE.setting:8557␤  in sub say at src/gen/m-CORE.setting:17358␤  in method say at src/gen/m-CORE.setting:1166␤  in block <unit> at /tmp/K4ENvENF8z:1␤␤»

[17:35] <jnthn> That feels off too. We bring in the shared bits via a role

[17:36] <jnthn> But now, I don't think the real solution is adding methods to NQPRoutine.

[17:36] <jnthn> *no

[17:38] <jnthn> I'd rather we look at wrapping NQP objects in general up so we can solve the problem with using Perl6::Grammar and so forth too

[17:39] <skids> Has that path been beaten yet?

[17:40] *** kjs_ left
[17:40] <dalek> doc: bf9e77e | moritz++ | lib/ (2 files):

[17:40] <dalek> doc: Document "is cached"

[17:40] <dalek> doc: review: https://github.com/perl6/doc/commit/bf9e77e5b0

[17:40] <japhb> FROGGS: Isn't that (failure of zlib dep on 32-bit) a matter of making it possible for tarball support to be an optional feature (or falling back to a hackish implementation), rather than just breaking outright?

[17:40] *** kgoess left
[17:40] <FROGGS> japhb: well, there is no fallback

[17:41] <jnthn> skids: Not really except I put in the HLL interop plumbing stuff at VM-level that might back it...

[17:41] <FROGGS> japhb: but yeah, could be an option that we shell out, and just try to 'require' the zlib support

[17:41] <FROGGS> brb

[17:41] <skids> jnthn: Might be a stretch for me then.

[17:42] *** pmurias left
[17:42] <japhb> FROGGS: ISTM that panda ought to be as forgiving as it can be (so using 'try require' seems sane), while not giving up the ability to support more features than rock-bottom.

[17:42] *** kjs_ joined
[17:43] *** Peter_R left
[17:45] *** Peter_R joined
[17:46] <jnthn> http://jnthn.net/papers/2015-fosdem-static-dynamic.pdf # my FOSDEM slides

[17:47] <japhb> jnthn++  # I was just about to nudge again.  ;-)

[17:47] <retupmoca> FROGGS: note that I pushed a commit early december that might fix zlib on 32 bit systems

[17:47] <retupmoca> FROGGS: but I haven't tested it

[17:47] <japhb> .oO( Zoom to 150% and ... commence enjoyment. )

[17:47] <japhb> retupmoca++

[17:48] <japhb> # for resolving the discussion the best way ... by making the problem disappear

[17:51] <retupmoca> and if my moarvm / nativecall patches get accepted, I should be able to make the zlib bindings faster, as well

[17:51] <japhb> w00t

[17:52] <japhb> (Because if there's anything you want in a zlib binding beyond raw correctness, it's definitely speed.)

[17:52] <retupmoca> because it would remove the need to copy from a Buf to a CArray

[17:52] <japhb> Excellent.

[17:52] <tadzik> oh hai

[17:53] <moritz> \o tadzik 

[17:53] <japhb> o/ tadzik

[17:53] <skids> Are Bufs roped, or contiguous OOC?

[17:54] <retupmoca> roped?

[17:54] <skids> Stored as chunks with index fixups.

[17:54] <retupmoca> They're implemented as a VMArray, which on moar means a contiguous chunk of data

[17:54] <retupmoca> don't know about JVM/parrot

[17:55] <moritz> I'm pretty sure it's the same on parrot

[17:55] <jnthn> Contiguous everywhere

[17:55] <avar> Are there some existing implementations of embedding MoarVM to call nqp/rakudo? I wanted to take a poke at trying to write support for perl6 for uwsgi (so something like https://github.com/unbit/uwsgi/blob/master/plugins/psgi/psgi_loader.c#L328)

[17:55] <El_Che> japhb: pretty enthousiastic audience at your talk, don't you think

[17:56] <japhb> El_Che: Wrong j<tab>.  :-)

[17:56] <El_Che> hehe

[17:57] <jnthn> avar: The only attempt I've seen so far was over the shoulder of nine++ at FOSDEM yesterday... :)

[17:57] <jnthn> avar: So, there'll likely be at least one interesting example soon

[17:57] <avar> Yeah him and I were talking about that at FOSDEM

[17:58] *** Kristien joined
[17:59] <retupmoca> Also, unrelated but: someone else was wanting to use IO::Socket::SSL to wrap a perl6 socket after some plaintext was transferred

[17:59] <retupmoca> I don't recall who is was, but they should look at the latest patches for IO::Socket::SSL - because that's now possible

[17:59] <jnthn> El_Che: Yes, it was a great atudience; plenty of good questions :)

[17:59] <jnthn> uh, audience

[18:01] <moritz> http://perlpunks.de/paste/show/54cfbb84.5194.390 why does this die?

[18:02] <moritz> shouldn't it autovivify the nested element?

[18:03] <avar> Is someone here aware of moarvm/nqp/rakudo rpm packages? Or deb or whatever, I want to try to package it up on my os...

[18:03] <jnthn> moritz: Should the "return $current" be outside of the loop?

[18:04] <FROGGS> retupmoca++

[18:04] <moritz> jnthn: yes, it should, but that's not the cause for the bug

[18:04] <moritz> oh, I need return-rw, right?

[18:04] <skids> Was just about to say that, yes.

[18:07] <dalek> doc: 73200f8 | moritz++ | lib/Type/Routine.pod:

[18:07] <dalek> doc: Document routine trait rw

[18:07] <dalek> doc: review: https://github.com/perl6/doc/commit/73200f8dfb

[18:11] *** trone joined
[18:11] <jdv79> hmm, disabling spesh shaves ~25% off the runtime of a use case.

[18:11] <jdv79> did not expect that

[18:11] *** alini joined
[18:12] <dalek> doc: 1fe2e5f | Mouq++ | lib/Language/functions.pod:

[18:12] <dalek> doc: Typo: s/warp/wrap

[18:12] <dalek> doc: review: https://github.com/perl6/doc/commit/1fe2e5faf9

[18:12] <jnthn> jdv79: Presumably a short-running one?

[18:13] <jdv79> quite.  

[18:13] <jnthn> Optimization that you don't get much chance to use is kinda costly.

[18:14] <jnthn> Probably means we need to tweak the thresholds some more. They're still largely guesses. :)

[18:14] * [Coke]_ yawns.

[18:15] *** pecastro left
[18:16] <jdv79> cool.  i was just surprised at the magnitude of the diff.

[18:16] *** spollei left
[18:20] *** kst joined
[18:20] *** anaeem1_ left
[18:21] *** anaeem1_ joined
[18:22] *** trone left
[18:25] *** anaeem1_ left
[18:26] *** beastd joined
[18:27] *** espadrine left
[18:27] <dalek> doc: 41d52f9 | moritz++ | util/update-and-sync:

[18:27] <dalek> doc: Put build shell script under version control

[18:27] <dalek> doc: review: https://github.com/perl6/doc/commit/41d52f98bd

[18:28] *** kjs_ left
[18:33] <moritz> http://doc.perl6.org/build-log/ now exists.

[18:33] <moritz> I guess I'll later add a cron job that gzips old files, and deletes really old files

[18:34] <japhb> moritz++ # Good idea

[18:35] <[Coke]> .seen donaldh?

[18:35] <yoleaux> I haven't seen donaldh? around.

[18:35] <[Coke]> .seen donaldh

[18:35] <yoleaux> I saw donaldh 22 Jan 2015 18:07Z in #perl6: <donaldh> recreation&

[18:36] <[Coke]> .tell donaldh - if you can help me get a perl 6 eclipse plugin working, I can start implementing work build stuff in perl6. would be super nice.

[18:36] <yoleaux> [Coke]: I'll pass your message to donaldh.

[18:37] *** rurban left
[18:40] <flussence> .oO( /me wishes the http2 authors had added lzma alongside gzip/deflate, instead of everyone pushing the latter to ridiculous extremes )

[18:43] <dalek> doc: 6258df8 | paultcochrane++ | lib/Language/functions.pod:

[18:43] <dalek> doc: Minor corrections to text in functions.pod

[18:43] <dalek> doc: review: https://github.com/perl6/doc/commit/6258df8dad

[18:44] *** Sqirrel joined
[18:46] *** anaeem1_ joined
[18:51] *** Diederich joined
[18:51] *** spider-mario joined
[18:51] <FROGGS> retupmoca: testing now MoarVM's PR 173 (with adjustments)

[18:53] <nine> I don't get it. Whatever I do, MoarVM fails to load libperl6_ops_moar.so unless I LD_PRELOAD libmoar.so

[18:53] *** Kristien left
[18:56] <jnthn> I'm pretty sure we dlopen the libperl6_ops_moar.so

[18:56] <jnthn> Dunno if that makes it any understandabler 

[18:58] <nine> libperl6_ops_moar.so is not linked against libmoar.so. It depends on libmoar.so already being loaded. But no linker flags I have discovered seem to be enough. I even dlopen'ed it without success.

[18:59] <jnthn> Hm, curious. On Windows I'm sure we mention the moar.dll type lib on the link line for libperl6_ops_moar.dll otherwise it'd not resolve the functions in there...

[19:01] *** guru joined
[19:01] *** guru is now known as Guest71936

[19:02] <nine> nine@sphinx:~/Inline-Perl6 (master *=)> ldd /home/nine/install/rakudo/install/languages/perl6/runtime/dynext/libperl6_ops_moar.so

[19:02] <nine> libm.so.6 => /lib64/libm.so.6 (0x00007f0408843000) libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f0408626000) librt.so.1 => /lib64/librt.so.1 (0x00007f040841e000) libdl.so.2 => /lib64/libdl.so.2 (0x00007f040821a000) libc.so.6 => /lib64/libc.so.6 (0x00007f0407e7c000) /lib64/ld-linux-x86-64.so.2 (0x00007f0408d8e000)

[19:02] <jnthn> Interesting. :)

[19:03] <jnthn> Question is, why does your embedding thingy not work out, but the moar executable does?

[19:05] <vendethiel> jnthn: are you talk's slides available somewhere :)?

[19:06] <nine> jnthn: that's what I've been trying to figure out for hours without any success

[19:07] <skids> vendethiel: jnthn linked them in backlog

[19:08] <vendethiel> thanks skids

[19:09] <jnthn> Also I updated the talk slides page on my site to link 'em :)

[19:10] <masak> a couple of new names dropping by every day. nice.

[19:11] <jnthn> nine: I dunno if strace might log loading related things and offer a clue.

[19:11] <FROGGS> masak: you should have seen the more than full devroom at the fosdem and the also quite full arena when TimToady++ was on stage :o)

[19:12] <japhb> Which is awesome, BTW.

[19:12] <FROGGS> masak: a lot of interested ppl popped by

[19:12] <vendethiel> jnthn++

[19:13] <raydiak> FROGGS: if you get a chance any time today, can you explain to me what was going on at https://github.com/MoarVM/MoarVM/commit/b6f6b29eeac369b9f8fcb0d761fea0f3bebac730 ?  reverting it makes my patch work but I'm hesitant to submit a PR which undoes the work of more experienced people while I still have less than half a clue what's going on in there :)

[19:13] <masak> FROGGS: people still want to believe in the Perl 6 project. it's amazing. we just need to not disappoint them.

[19:13] <nine> jnthn: tried that :/ the strace looks almost exactly the same until suddenly the embedded thingy throws the error. The only differences up to that point are in brk syscalls

[19:14] <FROGGS> masak: aye!

[19:14] <masak> slides! \o/ http://jnthn.net/papers/2015-fosdem-static-dynamic.pdf

[19:14] <jnthn> nine: Well, wat. :S

[19:14] <FROGGS> raydiak: AFAIK we need a way to deref a pointer for openssl or so...

[19:15] <raydiak> FROGGS: it breaks stuff like http://irclog.perlgeek.de/perl6/2015-01-31#i_10035684

[19:15] *** Guest71936 left
[19:16] <raydiak> b/c we just blindly deref whatever you pass into cast if target is a pointer, regarless of source

[19:16] <raydiak> *regardless

[19:16] <FROGGS> raydiak: hmmm

[19:16] *** alini left
[19:18] *** Kristien joined
[19:19] *** alini joined
[19:19] <raydiak> here is what I am doing which exposed the problem: https://github.com/raydiak/MoarVM/compare/MoarVM:master...master

[19:20] <FROGGS> raydiak: I think I know what we can do... gimme five minutes

[19:20] <raydiak> FROGGS: sure thing no hurry :)

[19:27] <FROGGS> sergot: ping

[19:35] *** kjs_ joined
[19:37] <FROGGS> star-m: use NativeCall; sub malloc (int) returns OpaquePointer is native {*}; sub memset (OpaquePointer, int8, int) returns OpaquePointer is native {*}; my $ptr = malloc(8); memset $ptr, 1, 8; say $ptr; say nativecast OpaquePointer, $ptr;

[19:37] <camelia> star-m 2014.12: OUTPUT«OpaquePointer<0x4bd4700>␤OpaquePointer<0x101010101010101>␤»

[19:37] <FROGGS> star-m: use NativeCall; sub malloc (int) returns OpaquePointer is native {*}; sub memset (OpaquePointer, int8, int) returns OpaquePointer is native {*}; my $ptr = malloc(8); memset $ptr, 1, 8; say $ptr; say nativecast(CArray[OpaquePointer], $ptr)[0];

[19:37] <camelia> star-m 2014.12: OUTPUT«OpaquePointer<0x1a6e430>␤OpaquePointer<0x101010101010101>␤»

[19:37] <Kristien> I see {*} every now and then. What is it?

[19:37] <FROGGS> I guess that is how we wanna derefence a void **

[19:38] <FROGGS> raydiak: +1 for your PR

[19:38] <japhb> Kristien: "Use the default dispatcher here"

[19:38] <Kristien> OK.

[19:38] <FROGGS> raydiak: but if you wait another five minutes, I'll merge retupmoca++'s PRs first

[19:38] <japhb> You'll see it in proto definitions as well.

[19:38] <raydiak> FROGGS: thanks for checking it out :) I'll pull what you merge then make a PR

[19:39] <Kristien> omg

[19:39] <Kristien> was FOSDEM in brussels

[19:39] <Kristien> I thought it was in the USA

[19:39] <moritz> :-)

[19:39] <FROGGS> Kristien: you can remember it as: the * is called Whatever, so the proto will dispatch Whatever the default is, same is true for calls into C libs using NativeCall

[19:39] <moritz> that's OSCON

[19:39] <japhb> Kristien: Do you live near there?

[19:39] <Kristien> well fuck :(

[19:40] <Kristien> japhb: yeah it's like an hour or two with the train

[19:40] <Kristien> FROGGS: ah I see, nice.

[19:40] <FROGGS> Kristien: there will be another one next year if that helps, and also, there are other Perl workshops

[19:40] <Kristien> nice :D

[19:40] <japhb> Kristien: Oh, d'oh!

[19:40] <FROGGS> Kristien: you are in .nl, right?

[19:40] <Kristien> yeah

[19:40] <Kristien> near the belgian border

[19:40] <Kristien> it's like five minutes cycling

[19:40] <japhb> There are *lots* of Perl workshops in Europe.

[19:41] <FROGGS> there is a NL perl mongers meeting every now and then, and there is the NLPW in mid April

[19:41] <moritz> there are perl workshops in netherlands, germany, france, austria, poland

[19:41] <FROGGS> Kristien: and Perl is is a topic there

[19:41] <moritz> and probably more

[19:41] <FROGGS> switzerland too

[19:42] <moritz> m: class Foo { method bar() is export { say 42 } }; say bar

[19:42] <camelia> rakudo-moar 12db81: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/oqxT7EwuOu␤Undeclared routine:␤    bar used at line 1. Did you mean 'bag'?␤␤»

[19:43] <moritz> m: class Foo { method bar() is export { say 42 } }; import Foo; say bar

[19:43] <camelia> rakudo-moar 12db81: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in method bar at /tmp/AAAs6wQxJQ:1␤  in block <unit> at /tmp/AAAs6wQxJQ:1␤␤»

[19:43] <moritz> m: class Foo { method bar() is export { say 42 } }; import Foo; say bar(Foo)

[19:43] <camelia> rakudo-moar 12db81: OUTPUT«42␤True␤»

[19:46] <dalek> zavolaj: 31f392b | (Andrew Egeler)++ | / (2 files):

[19:46] <dalek> zavolaj: Enable direct Buf/Blob passing to C functions

[19:46] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/31f392b4a1

[19:46] <dalek> zavolaj: e758edb | FROGGS++ | / (2 files):

[19:46] <dalek> zavolaj: Merge pull request #55 from retupmoca/master

[19:46] <dalek> zavolaj: 

[19:46] <dalek> zavolaj: Enable direct Buf/Blob passing to C functions

[19:46] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/e758edbb0e

[19:46] <PerlJam> I wonder if we can make that 'too few positionals' error better to let the user know it was missing the invocant

[19:46] <FROGGS> raydiak: done

[19:46] <colomon> nine++

[19:47] <retupmoca> FROGGS++

[19:47] <FROGGS> retupmoca++ # really :o)

[19:47] <vendethiel> (wrt perl workshops, people at fpw mostly speak french ;)...)

[19:47] <FROGGS> retupmoca: that's how to REPR_data btw: https://github.com/MoarVM/MoarVM/commit/0d085079eb86e0e206904e8bd9c68b191ea39696

[19:48] <raydiak> FROGGS: https://github.com/MoarVM/MoarVM/pull/174

[19:48] <retupmoca> Ah, STABLE - I knew there was something, but couldn't remember what it was

[19:48] *** Khisanth left
[19:49] *** andreoss left
[19:49] <FROGGS> retupmoca: I just grepped for MVMArrayREPRData and found plenty examples :o)

[19:49] <raydiak> yes retupmoca++ indeed...I was already hacking around that

[19:50] *** Khisanth joined
[19:50] <retupmoca> FROGGS: fair enough :)

[19:50] <raydiak> oh btw retupmoca...how would you feel about packaging a dll with compress::zlib::raw, for complete windows portability?

[19:50] <retupmoca> raydiak: hopefully I'll have time tonight to change up Compress::Zlib for speed

[19:51] <retupmoca> yeah, I'd like to include .dlls - I'm on a windows system myself

[19:51] <retupmoca> just haven't looked into the details - not sure if I need to ship different version for different systems and such

[19:51] <raydiak> \o/ I have a chopped up version of compress which circumvents that limitation I won't need any more :)

[19:52] <itz_> whats the | sigil?

[19:52] <raydiak> I was wondering that too...zlib only provides on official compiled dll download

[19:52] <raydiak> *one

[19:53] <raydiak> m: sub foo ($a, $b) { say "$a $b" }; my @ab = <a b>; foo(|@ab); # itz_ 

[19:53] <camelia> rakudo-moar 12db81: OUTPUT«a b␤»

[19:53] <retupmoca> yeah, I've installed that locally - I could just throw it into the package, but I'm not sure if that's the best way to do it

[19:53] * colomon wonders how Rakudo would run on the Raspberry Pi 2...

[19:54] <retupmoca> raydiak: but if you throw me a PR that passes tests on my machine, I'll merge it

[19:54] <retupmoca> and review "correct" later

[19:54] <itz_> raydiak: ty

[19:54] <vendethiel> colomon: slowly :P

[19:55] <raydiak> retupmoca: deal :)  idk what else you would do with it...certainly not install into \windows\system32 or any of that nonsense

[19:55] <raydiak> yw itz_\

[19:55] <jdv79> it might compile on the 2 - i severly doubt it on the 1

[19:56] <pyrimidine> I'm seeing NativeCall failing via latest rakudo update: https://gist.github.com/cjfields/f674a33dbde0f62aaafa

[19:57] <FROGGS> pyrimidine: it requires latest Moarvm... hmmm

[19:57] <pyrimidine> FROGGS: version bump?

[19:57] <FROGGS> ohh, aye

[19:57] <retupmoca> hmm

[19:57] <FROGGS> pyrimidine++

[19:58] <retupmoca> FROGGS: that NativeCall patch may fail tests on parrot/jvm as well

[19:58] <pyrimidine> FROGGS: np.  Just really bad timing on my part :)

[19:58] <retupmoca> since I didn't patch them for vmarray calls

[19:58] <FROGGS>  /o\

[19:58] <FROGGS> damn, I forgot

[19:58] <FROGGS> I will fix that

[19:59] <retupmoca> sorry - I have a bad habit of building on moarvm and forgetting the others

[19:59] <FROGGS> yeah, same for me as it seems

[20:00] <rjbs> skids: Sorry, you replied to my paste last night, but I was already gone.  I'm going to try to produce a more documented file and then ... make a GitHub issue?  Or t ticket?

[20:02] <hoelzro> didn't someone bring up the idea of migrating RT → GH?

[20:02] <hoelzro> is that a thing?

[20:02] <FROGGS> hoelzro: years ago

[20:02] <hoelzro> o_O

[20:03] <FROGGS> but it is not a thing atm for rakudo AFAIK

[20:03] <masak> we have a lot of value dug down into RT.

[20:03] <skids> rjbs: note there is a "dies_ok" and "eval_dies_ok" in Test so you don't have to rewrite that unless they don't work for your case.

[20:03] <hoelzro> indeed; and RT doesn't require an account to report a bug, does it?

[20:04] <pyrimidine> pmichaud suggested that I think # RT → GH

[20:04] <rjbs> skids: Thanks.  I had no idea what I Was doing. :)

[20:04] <ugexe> RT is a PITA to log in to... every time i go to do it i cant remember how to get to it

[20:04] <rjbs> I'm always logged into rt.perl.org /and/ gh, so I will use whichever you prefer to receive tickets in.

[20:05] *** darutoko left
[20:05] <skids> I have no perms for anything after logging into RT.

[20:06] *** mvuets joined
[20:06] <dalek> doc: db0354a | moritz++ | lib/Type/Routine.pod:

[20:06] <dalek> doc: start to document "is export" on routines

[20:06] <dalek> doc: review: https://github.com/perl6/doc/commit/db0354a841

[20:09] <raydiak> .tell adu \o/ nicely done! I get three warnings about unknown condition in typedef, but it does run through to completion and gives a big parse back...I'll let you know how it goes when I have a chance to try actually using it...very exciting :)

[20:09] <yoleaux> raydiak: I'll pass your message to adu.

[20:09] <dalek> doc: 4edfeda | moritz++ | lib/Type/Parameter.pod:

[20:09] <dalek> doc: Correct and expand on Paramter.capture

[20:09] <dalek> doc: review: https://github.com/perl6/doc/commit/4edfedae1f

[20:13] <Kristien> apparently my friend went to FOSDEM *~*

[20:13] <Kristien> and he didn't even tell me :(

[20:14] <PerlJam> Kristien: btw, do you know what FOSDEM stands for?

[20:14] <Kristien> yes

[20:15] *** brrt joined
[20:15] <PerlJam> okay, just checking because earlier you said you thought it was a USA thing

[20:15] <Kristien> I do know

[20:15] <Kristien> But I didn't until like an hour ago :v

[20:15] <PerlJam> ah

[20:16] *** kjs_ left
[20:19] <brrt> hey, would it make sense to add bug tests to the perl6 test suite

[20:20] <dalek> doc: 62fd6c4 | moritz++ | lib/Type/Any.pod:

[20:20] <dalek> doc: And an example for .flat

[20:20] <dalek> doc: review: https://github.com/perl6/doc/commit/62fd6c4b36

[20:20] <moritz> brrt: we do that all the time :-)

[20:20] <moritz> brrt: at least for stuff that is (or should be) covered by the synopsis; but we don't want nqp:: stuff in roast

[20:20] <masak> jnthn++ # http://jnthn.net/papers/2015-fosdem-static-dynamic.pdf

[20:21] <colomon> jnthn++ # a very nice presentation indeed

[20:21] <brrt> no.. but i'm asking about two bug reports of which i have a relatively golfed test case

[20:21] *** rindolf joined
[20:21] <brrt> and i'm thinking that putting them in the test suite is a quick and easy way to get attentiont to them

[20:22] <brrt> (ooh new jnthn++ presentation. nine++'s was also very nice and very impressive)

[20:22] *** anaeem1_ left
[20:24] * raydiak goes to un-fudge bug tests he wants fixed too (j/k)

[20:26] *** Peter_R left
[20:26] <FROGGS> raydiak: :P

[20:28] *** Peter_R joined
[20:28] <moritz> jnthn++ # slides

[20:29] <moritz> brrt: sure, do that

[20:30] * vendethiel stopped trying to go through issues in RT because it's so overwhelming

[20:30] <brrt> ok, where should i put them? they're segfaulting issues

[20:30] <raydiak> FROGGS: I searched all 3 SSL packages in the ecosystem for 'cast' and came up empty...so whoever was using cast to deref is in for some breakage if it's still out there somewhere

[20:31] <raydiak> brrt: as I understand it, the usual procedure is to fudge failing tests when you add them

[20:32] <FROGGS> raydiak: I did the same in the repositories I was sure it had that... seems gone nowadays

[20:32] <raydiak> brrt: you'll see special comments in roast which skip different compilers or rakudo backends for many tests, as examples to copy

[20:33] <raydiak> FROGGS: cool, I'll stop worrying then

[20:33] <[Coke]> anyone needs privs to bugadmin on RT, ping me.

[20:39] *** kaare_ joined
[20:40] <rjbs> What's the p6 equivalent of "use lib 'x'"?

[20:41] <masak> same.

[20:42] <japhb> El_Che: Do you have a contact method for the FOSDEM presenters that would allow us to bug the ones who don't come here very often about slide deck URLs?  :-)

[20:42] <skids> [Coke]: ping

[20:43] <rjbs> masak: Oh, I see.  lib is, itself, under lib.  So I needed -I lib to be able to use lib. Duh. :-)

[20:43] <El_Che> japhb: I'll mail for the slides. They can be inserted in the fosdem page

[20:44] <japhb> Which page?  Do you mean each talk's page?

[20:45] <Kristien> woot TIL use lib

[20:45] <Kristien> I always used BEGIN { push @INC, "…" } :(

[20:45] <rjbs> Woah, lots of noise from "$x.^methods.sort" in repl.

[20:45] <skids> [Coke]++ RT privs

[20:46] <japhb> rjbs: What is $x in this instance?

[20:46] <FROGGS> rjbs: when you make install rakudo, and use the installed perl6 "binary", then you don't need to -Ilib

[20:46] <moritz> rjbs: do .sort(*.name) instead

[20:46] <moritz> rjbs: less noise :-)

[20:46] *** rindolf left
[20:47] <FROGGS> m: say Int.^methods[0].WHAT

[20:47] <camelia> rakudo-moar 12db81: OUTPUT«(Method)␤»

[20:47] <FROGGS> IC

[20:47] *** rindolf joined
[20:47] <El_Che> japhb: in the meantime you can poke rjbs for his slides :)

[20:48] <japhb> rjbs: Consider yourself poked (for a link to your FOSDEM preso slides) :-)

[20:48] <dalek> rakudo-star-daily: 5dbd81f | coke++ | log/ (9 files):

[20:48] <dalek> rakudo-star-daily: today (automated commit)

[20:48] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5dbd81fa71

[20:48] <FROGGS> El_Che: do we put the slides on the fosdem page?

[20:49] <rjbs> japhb: I'll put them on Speakerdeck between now and ... August?  But I will! :)

[20:49] <El_Che> FROGGS: yes, that would make sense. Video and slides on the same page

[20:49] <FROGGS> El_Che: mine would be at http://froggs.de/perl6/C-bindings.odp and http://froggs.de/perl6/C-bindings.pdf

[20:50] <El_Che> thx!

[20:50] <raydiak> m: say Any.^methods».name.unique

[20:50] <camelia> rakudo-moar 12db81: OUTPUT«exists_key delete_key delete_pos list flat eager hash Parcel elems end keys kv values pairs invert squish rotor reverse sort reduce combinations permutations unique uniq pick roll classify categorize lol map for flatmap duckmap deepmap tree Array push unsh…»

[20:51] <FROGGS> sjn: you are going to do the NativeCall hackathon, right?

[20:52] <Kristien> Is » map?

[20:52] <masak> it used to be.

[20:52] <moritz> Kristien: mostly, yes. But it's eager (and even allows out-of-order execution), where map is lazy

[20:52] <moritz> Kristien: and it descends into sub-structures where .map doesn't

[20:53] <Kristien> so hardcore

[20:53] <moritz> m: my $x = [1, { a => 2} }; $x»++; say $x

[20:53] <camelia> rakudo-moar 12db81: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/rAcuvVLBNc␤Unable to parse expression in array composer; couldn't find final ']' ␤at /tmp/rAcuvVLBNc:1␤------> [32mmy $x = [1, { a => 2} [33m⏏[31m}; $x»++; say $x[0m␤    expecting any…»

[20:53] <japhb> Kristien: It's hyper-apply.  "Do these in optimal and possibly concurrent order internally, and return the results eagerly but in the same order they would have come out if they were done serially in order"

[20:53] <moritz> m: my $x = [1, { a => 2} }]; $x»++; say $x.perl

[20:53] <camelia> rakudo-moar 12db81: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/GPk3JAnbxc␤Unable to parse expression in array composer; couldn't find final ']' ␤at /tmp/GPk3JAnbxc:1␤------> [32mmy $x = [1, { a => 2} [33m⏏[31m}]; $x»++; say $x.perl[0m␤    expecti…»

[20:53] <moritz> m: my $x = [1, { a => 2}]; $x»++; say $x.perl

[20:53] <camelia> rakudo-moar 12db81: OUTPUT«No such method 'succ' for invocant of type 'Hash'␤  in sub postfix:<++> at src/gen/m-CORE.setting:2166␤  in sub flatmap at src/gen/m-CORE.setting:20821␤  in sub METAOP_HYPER_POSTFIX at src/gen/m-CORE.setting:20727␤  in block <unit> at /tmp/GQUs7FTR…»

[20:53] <moritz> eeks

[20:53] <moritz> or maybe it doesn't anymore :-)

[20:54] <Kristien> I like tacit programming.

[20:54] <masak> Kristien: it's mutual, but tacit programming would never deign to spell it out for you.

[20:55] *** Peter_R left
[20:55] <Kristien> I should learn J.

[20:55] <Kristien> Shouldn't be too hard knowing APL.

[20:57] *** Peter_R joined
[20:57] <pyrimidine> Cool, NativeCall slides.  FROGGS++

[20:57] <FROGGS> :o)

[20:57] <japhb> FROGGS: Shadowed text is kinda hard to read in the PDF version of your talk (haven't tried the ODP)

[20:57] <masak> where are FROGGS++' slides?

[20:58] <Kristien> "mean =: +/ % #" is just beautiful

[20:58] <japhb> masak: See 9 minutes ago in the logs.

[20:58] <FROGGS> masak: http://froggs.de/perl6/C-bindings.odp and http://froggs.de/perl6/C-bindings.pdf

[20:58] <FROGGS> japhb: hmm, it looks okay-ish on my box

[20:58] <masak> FROGGS: thanks!

[20:59] <japhb> FROGGS: Hmmm.  I wonder if it's Chrome's builtin PDF viewer that's uglifying it.

[20:59] <b2gills> m: (^5)>>.say

[20:59] <camelia> rakudo-moar 12db81: OUTPUT«4␤2␤0␤3␤1␤»

[20:59] <TimToady> m: my &mean = -> { @_ R/ [+] @_ }; say mean 1,3,5,7

[20:59] <camelia> rakudo-moar 12db81: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/qIZu6FJGjg␤Placeholder variable '@_' cannot override existing signature␤at /tmp/qIZu6FJGjg:1␤------> [32mmy &mean = -> { @_ R/ [+] @_ }[33m⏏[31m; say mean 1,3,5,7[0m␤    expecting any …»

[20:59] <TimToady> m: my &mean = { @_ R/ [+] @_ }; say mean 1,3,5,7

[20:59] <camelia> rakudo-moar 12db81: OUTPUT«4␤»

[21:00] <FROGGS> japhb: I am also viewing it with pdf.js or what it is called (in firefox)

[21:00] <TimToady> Kristien: ^^

[21:00] <Kristien> :O

[21:00] <Kristien> What's R/?

[21:00] <masak> reversed /

[21:00] <TimToady> reversed /

[21:00] <Kristien> Well arguably using @_ is not point-free

[21:00] <TimToady> sure

[21:02] <TimToady> otoh, most humans like nouns

[21:02] <japhb> FROGGS: Looks the same using the GNOME client.  It looks OK but a little blurry at small zoom, but at high zoom the shadows separate far enough to make the glyph shapes break up weirdly.  Or maybe it's just my brain.  :-/

[21:02] *** rurban joined
[21:03] <FROGGS> japhb: well, it was meant for a big screen, you see :o)

[21:03] <FROGGS> but yeah, I can make a shadow-less version when I have time for it

[21:03] * colomon is having fun downloading slide PDFs and reading them on the iPad.  :)

[21:04] <japhb> Or are the shadows tunable?  It looks like just halving the shadow offset would make all the difference

[21:04] <masak> FROGGS++ # presentation

[21:04] *** kjs_ joined
[21:04] <japhb> But yeah, lest I forget, FROGGS++ for the presentation.  :-)

[21:04] <FROGGS> *g*

[21:04] <FROGGS> thank you

[21:05] *** mvuets left
[21:05] <Kristien> m: my &mean = { .elems R/ .reduce(&infix:<+>) }; say mean [1, 3, 5, 7]

[21:05] <camelia> rakudo-moar 12db81: OUTPUT«4␤»

[21:06] <Kristien> :v

[21:06] <TimToady> my &mean = { .elems R/ [+] .values }; say mean (1,3,5,7)

[21:06] <jdv79> where is R/ doc'ed?

[21:06] *** vike joined
[21:06] <raydiak> S03 has metaops

[21:06] <masak> jdv79: S03, "metaoperators"

[21:08] <Kristien> Hmm, still takes a parcel or array

[21:08] <TimToady> m: my &mean = { .elems R/ [+] .values }; say mean (1,3,5,7)

[21:08] <camelia> rakudo-moar 12db81: OUTPUT«4␤»

[21:08] <Kristien> instead of being variadic

[21:08] <dalek> roast: c2c4f7c | usev6++ | S04-declarations/my.t:

[21:08] <dalek> roast: Add tests (fudged 'todo') for RT #117043

[21:08] <dalek> roast: review: https://github.com/perl6/roast/commit/c2c4f7cd48

[21:08] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117043

[21:08] <TimToady> m: my &mean = -> |args { args.elems R/ [+] args.values }; say mean (1,3,5,7)

[21:08] <camelia> rakudo-moar 12db81: OUTPUT«16␤»

[21:08] <TimToady> er, oops

[21:09] <TimToady> something not right there...

[21:10] <japhb> m: my &mean = -> |args { args.elems }; say mean (1,3,5,7)

[21:10] <camelia> rakudo-moar 12db81: OUTPUT«1␤»

[21:10] <japhb> TimToady: ^^ that

[21:10] <masak> was gonna say.

[21:10] <masak> the sub does get 1 argument, tho

[21:11] <masak> m: my &mean = -> |args { args.elems R/ [+] args.values }; say mean(1,3,5,7)

[21:11] <camelia> rakudo-moar 12db81: OUTPUT«4␤»

[21:11] <TimToady> right

[21:11] <rjbs> https://gist.github.com/rjbs/de0b26a258553c75104c

[21:12] <rjbs> TimToady: ^ the "grammar not clustering" thing we discussed

[21:12] <rjbs> skids: ^ Maybe this test makes it clearer what I was trying to point out. :)

[21:12] <Kristien> I'm watching a video by a guy who writes software for devices with 16B RAM.

[21:12] <asdf12z_> using what?

[21:12] <Kristien> C++

[21:12] <rjbs> asdf12z_: corner torn off a punch card :)

[21:13] <TimToady> rjbs: yes, that should clear up after NFG

[21:13] <rjbs> TimToady: That is excellent!

[21:13] <PerlJam> rjbs: how do you make a string containing only a combining mark?

[21:13] <japhb> Kristien: Are those 16B addressed as normal RAM or as registers?

[21:13] <Kristien> No idea

[21:13] <Kristien> There is an 8b CPU as well

[21:13] <Kristien> and 256B flash memory

[21:14] <japhb> Sounds like a small microcontroller, like a PIC

[21:14] <japhb> I know a microcontroller programmer, but he goes with old school C

[21:14] <Kristien> the device is only €0.28

[21:21] *** andreoss joined
[21:21] *** nige left
[21:21] <Kristien> ahh, the talk is about creating high-level abstractions without sacrificing performance

[21:23] <rjbs> PerlJam: In p5, you'd say:  "\N{COMBINING DIAERESIS}" etc.

[21:23] <FROGGS> m: say "\c[COMBINING DIAERESIS]"

[21:23] <camelia> rakudo-moar 12db81: OUTPUT«̈␤»

[21:23] <Kristien> m: say "\c[COMBINING DIARRHOEA]"

[21:23] <camelia> rakudo-moar 12db81: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/qB8_y3NiW6␤Unrecognized character name COMBINING DIARRHOEA␤at /tmp/qB8_y3NiW6:1␤------> [32msay "\c[COMBINING DIARRHOEA[33m⏏[31m]"[0m␤»

[21:23] <rjbs> FROGGS: Thanks, I was looking for that syntax earlier!

[21:23] <FROGGS> Kristien: :P

[21:24] <FROGGS> rjbs: pleasure :o)

[21:24] <TimToady> we decided \N should be the opposite of \n

[21:24] <rjbs> PerlJam: Similarly, it's how you'd probably get a NUL in there, etc.

[21:24] <japhb> Kristien: Composable disease symptoms?

[21:24] <rjbs> m: say "\cX"

[21:24] <camelia> rakudo-moar 12db81: OUTPUT«␤»

[21:24] <rjbs> nice

[21:24] <TimToady> m: say "\c0".ord

[21:24] <camelia> rakudo-moar 12db81: OUTPUT«0␤»

[21:24] <TimToady> m: say "\c@".ord

[21:24] <camelia> rakudo-moar 12db81: OUTPUT«0␤»

[21:25] <TimToady> that works too

[21:25] *** xfix left
[21:26] <TimToady> \N is very useful when . always matches \n

[21:26] <rjbs> How does the numeric form work?

[21:26] <TimToady> decimal

[21:26] <rjbs> Yeah, we have \N in 5, too.

[21:26] <TimToady> decimally

[21:26] <rjbs> but there's \N and there's \N{...}

[21:26] <rjbs> not necessarily our finest hour

[21:27] <TimToady> m: say "\c65"

[21:27] <masak> rjbs: it's so great to have you on here

[21:27] <camelia> rakudo-moar 12db81: OUTPUT«A␤»

[21:27] <rjbs> masak: I have /usually/ been idling here, but sometimes when irssi restarts, I don't auto-rejoin because my config is a bit out of date.

[21:27] <rjbs> masak: but thanks! :-D

[21:31] <FROGGS> rjbs: I hope I'll be able to watch your talk very soonish because I got taken as a hostage and missed it :o(

[21:31] <rjbs> FROGGS: I'm glad to hear that you (seem to) have been released, though!

[21:32] <FROGGS> rjbs: aye :o)

[21:32] <rjbs> FROGGS: I believe the talk went well, and hope you enjoy it.  I also want to go back and see your talk and others.  I was unable to see Ovid's: room too full!

[21:32] <rjbs> I had also hoped to see how Python wanted to add gradual typing -- been following that a bit on mailing lists -- but the talk fell through. :(

[21:32] <FROGGS> I missed that one as well :/

[21:33] *** Mouq joined
[21:33] <rjbs> I did see TimToady's talk in which I believe he said, "Absolutely 6.0 on Christmas day this year with all features ever mentioned."  Or so the blogs elaborated.

[21:33] <PerlJam> Ovid++  (spreading the good word)

[21:34] <masak> rjbs: sounds about right.

[21:34] <FROGGS> rjbs: always believe the details in blogs :o)

[21:34] <rjbs> Well, my FOSDEM is now ending officially.  I am closing my lid to disembark this bus, and when I next reattach, I will be at home. :)  I'm sure we'll all talk more later. :-) &

[21:34] <TimToady> o/

[21:37] <dalek> doc: 531f009 | Mouq++ | lib/Type/Signature.pod:

[21:37] <dalek> doc: Index some parameter types/traits

[21:37] <dalek> doc: review: https://github.com/perl6/doc/commit/531f009463

[21:38] *** brrt left
[21:39] <Mouq> So, a thought I had today: $foo.::bar and $foo.::Baz::bar currently are the same as $foo.bar and $foo.Baz::bar. But what if we instead reserve that syntax for a meta-op that's sugar for find_method

[21:39] <sjn> FROGGS: yep, I am

[21:39] <sjn> FROGGS: so is arnsholt :)

[21:41] <Mouq> So instead of `my $method = $foo.^find_method("bar")`, we have `my $method = $foo.::bar`, and instead of `$foo.^find_method("bar")($baz, 42)`, we have `$foo.::bar($baz, 42)`

[21:41] <Peter_R> Why did this person feel the need to be mean in his response? https://news.ycombinator.com/item?id=8981668

[21:41] <Mouq> *So I had a thought today (jumbled quite obviously a one)

[21:43] <masak> Peter_R: 

[21:43] <masak> I think some people simply desire to be spared details.

[21:44] <Peter_R> yeah, it doesn't take much effort to be a bit nicer when expressing that though

[21:44] <PerlJam> some people are just average

[21:44] <vendethiel> it wasn't details. I actually agree with the general spirit of this comment -- the parent does not give ANY piece of information

[21:44] <vendethiel> it's just dodging the question and answering something else

[21:44] <vendethiel> (certainly not going to defend the phrasing, though)

[21:45] <FROGGS> sjn: when will that happen? I'd like to join remotely

[21:45] <Peter_R> vendethiel, what would the answer be out of interest? No one backend is the one true backend?

[21:45] <Peter_R> because the feeling I always get is that nothing but Moar matters

[21:46] <vendethiel> Peter_R: I'm saying kbenson's answer is uninteresting

[21:46] <vendethiel> not that a true answer would be

[21:46] <vendethiel> but kbenson's only sounds like spokesmanship

[21:46] <adu> raydiak: thanks :)

[21:46] <yoleaux> 20:09Z <raydiak> adu: \o/ nicely done! I get three warnings about unknown condition in typedef, but it does run through to completion and gives a big parse back...I'll let you know how it goes when I have a chance to try actually using it...very exciting :)

[21:47] <Peter_R> vendethiel, Yeah, I do see what you mean. Now I'm just interested in what the true answer is :P

[21:47] *** khisanth_ joined
[21:48] <sjn> FROGGS: wednesday at 18:30 CET

[21:48] *** Khisanth left
[21:48] <avuserow_> retupmoca++ # NativeCall improvements, should benefit at least one of my modules

[21:48] <sjn> FROGGS: not sure how to include you remotely though...

[21:48] <FROGGS> sjn: that's almost doable... nice

[21:48] <FROGGS> sjn: well, I am here, so just ping me if there anything I can do

[21:49] *** khisanth_ is now known as Khisanth

[21:52] <sjn> FROGGS: skype? hangout? appear.in?

[21:52] <FROGGS> sjn: irc? :o)

[21:52] <sjn> sure :)

[21:59] *** rindolf left
[22:04] *** FROGGS_ joined
[22:05] *** gaston joined
[22:06] *** Sqirrel left
[22:07] *** FROGGS left
[22:08] *** Sqirrel joined
[22:09] *** BenGoldberg joined
[22:11] *** BenGoldberg left
[22:11] <andreoss> m:  my $y = -> $x  { state $b = $x;  -> $c { state $a = $b ;$a+=$c; }}; say $y(1)(1); say $y(1)(1);

[22:11] <camelia> rakudo-moar 12db81: OUTPUT«2␤2␤»

[22:12] *** BenGoldberg joined
[22:14] *** _dolmen_ joined
[22:14] *** kjs_ left
[22:14] <masak> andreoss: looks right to me.

[22:23] <masak> (the inner pointy is created once per invocation to $y, and so it doesn't carry state over from one call to the next)

[22:24] *** mohij joined
[22:26] *** Mouq left
[22:29] *** spider-mario left
[22:31] *** pyrimidi_ joined
[22:34] *** pyrimidine left
[22:36] *** konsolebox left
[22:37] *** woolfy joined
[22:40] *** mohij left
[22:43] *** beastd left
[22:43] <TimToady> yes, state doesn't quite mean static

[22:44] * FROGGS_ .oO( United Static of America )

[22:44] <Kristien> what other lexically scoped ideas of what characters are are there other than graphemes?

[22:45] <TimToady> what we have now, which is "codepoints"

[22:45] <Kristien> Oh, I see

[22:46] <TimToady> and, in theory, a really retro "bytes", which knows nothing about Unicode

[22:47] <TimToady> but I doubt anyone will be terribly motivated to implement that

[22:47] *** adu left
[22:48] <TimToady> also, those contexts could conceivably be broken down into NFC vs NFD at the codepoint level

[22:48] <TimToady> or even UTF-mumble at the bytes level

[22:48] <TimToady> so you'd know which encoding to put literal strings into

[22:49] <TimToady> but this is perhaps not needed for 6.0

[22:49] <TimToady> if ever

[22:50] <TimToady> presumably filehandles opened in such a lexical scope might also default that way

[22:50] <TimToady> but we're tending toward a more OO view of how strings work these days anyway, so tying it to lexical scopes might be suboptimal anyway

[22:52] <TimToady> in general, we haven't defined a lot of pragmas that set defaults like that so far

[22:52] <TimToady> and that's probably a good thing

[22:53] <TimToady> since it means we've generally picked pretty good defaults, at least for the uses we've put Perl 6 to so far

[22:53] <dalek> nqp: 74c880d | FROGGS++ | tools/build/MOAR_REVISION:

[22:53] <dalek> nqp: bum nqp rev for nativecall improvements

[22:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/74c880dacc

[22:53] <FROGGS_> pum -.-

[22:53] <FROGGS_> bum*

[22:54] <FROGGS_> damn, I typo'd a typo - clearly I should be in bed

[22:54] <dalek> rakudo/nom: bececd4 | FROGGS++ | tools/build/NQP_REVISION:

[22:54] <dalek> rakudo/nom: bump nqp/moar rev for nativecall improvements

[22:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bececd4368

[22:54] <jdv79> would it be easy/possible to do a interopolation and backup in a simple grammar or would it be better to preprocess the text?

[22:56] <jnthn> lol, bum!

[22:56] <Kristien> Time to sleep. Byebye!

[22:56] <TimToady> o/

[22:56] <FROGGS_> jnthn: I merged stuff in zavolaj which works for moarvm but not for the others... I am trying to fix parrot atm but I'm not very lucky

[22:57] <FROGGS_> jnthn: so, nativecall HEAD is broken on perl6-p/-j until tomorrow I fear :o(

[22:57] <jnthn> FROGGS_: Yeah, I'll glance the patches tomorrow

[22:57] <jnthn> Broken as in build fail or test fail?

[22:58] <FROGGS_> test fail

[22:58] <TimToady> jdv79: preprocessing is often the easiest wrong answer :)

[22:58] <FROGGS_> a new feature... passing Bufs to nativecall

[22:58] *** Kristien left
[22:58] <masak> 'night, #perl6

[22:58] <TimToady> jdv79: but without more context, I couldn't say

[22:58] <jnthn> FROGGS_: Well, could always through a skip unless $*VM.name eq 'moar' :)

[22:59] <jnthn> Or todo

[22:59] <FROGGS_> jnthn: my problem is that we pass a VMArray to the nativecall ops code, and the REPR ID is 8, but I don't get my hands on a repr with that ID

[22:59] <FROGGS_> and REPR(thing)->name is an empty string

[23:00] <FROGGS_> ohh, todo-ing them is a good idea

[23:00] <FROGGS_> jnthn++

[23:00] <FROGGS_> I really am too tired

[23:00] <TimToady> jdv79: we're somewhat allergic to multi-pass parsing here, and generally if we used a grammar, we'd then either build up the new text via 'make' actions, or just write a tree-walker to produce the new text

[23:01] <jnthn> FROGGS_: On Moar there are #defines for the REPR IDs; dunno if they were used in the moar patch

[23:01] <jnthn> FROGGS_: I'll read them tmorrow when I also less tired.

[23:01] <FROGGS_> k, thank you

[23:02] * jnthn has done two lots of travel today, and of course the bit inside Sweden involved a 75 minute late train...

[23:02] <FROGGS_> :/

[23:03] *** coffee` left
[23:03] <jnthn> At least I got here early enough that the restaurants were still open

[23:03] <jdv79> Let's say I have a lang text of "foo,$bar,baz" and i have a value for $bar elsewhere.  I want to sub in the new value and allow the grammar to continue as if that substitution never happened.

[23:04] <asdf12z_> TimToady: i enjoy when you go into more personal history and linguistics and the convergence of your linguistics background with computers/perl, even your religious background if that played into how you went about things throughout the course of the perl evolution

[23:04] <asdf12z_> so it'll be fun if you had a talk that was purely based on that

[23:04] <jnthn> Anyway, sleep...will glance those patches tomorrow

[23:04] <jnthn> o/

[23:04] <FROGGS_> sleep well jnthn 

[23:05] <jnthn> Thanks, you also :)

[23:05] <FROGGS_> :o)

[23:06] <TimToady> jdv79: don't quite understand what you mean by 'continue as if that substitution had never happened', which would be a no-op

[23:06] <TimToady> you mean continue as if the substituted text were there originally?

[23:06] <asdf12z_> basically, when are they going to make the larry wall biopic ? lol

[23:07] <TimToady> asdf12z_: hopefully after I'd dead, and can't contradict 'em :)

[23:07] <jdv79> yes

[23:08] <TimToady> so basically you have a language with parameterless text-based macros

[23:08] <jdv79> very simple, yes

[23:08] <asdf12z_> TimToady: you mentioned in an interview before you originally wanted to be a missionary, and i wonder if that's something you pursue still? probably not considering how busy you are?

[23:09] <TimToady> I'm not really any healthier than I was when I dropped out for health reasons

[23:09] <asdf12z_> oh i see

[23:09] <asdf12z_> do you personally feel like it's a blessing in disguise?

[23:10] <asdf12z_> otherwise perl would've probably never been born

[23:10] <TimToady> asdf12z_: I personally feel it's not very disguised anymore :)

[23:10] <TimToady> but yeah, that was one of the hardest decisions of my life

[23:10] <asdf12z_> it may seem like an obvious answer, but you have to deal with health issues on the other hand, so that's why i asked

[23:12] <asdf12z_> TimToady: hardest decisions of your life.. see that's interesting, would like to hear a talk or an interview where you went into things like that

[23:12] * TimToady will probably be doing far too many interviews in the coming weeks now... :/

[23:12] <dalek> zavolaj: 2815c25 | FROGGS++ | t/05-arrays.t:

[23:12] <dalek> zavolaj: skip buffer tests on parrot and jvm

[23:12] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/2815c25a83

[23:13] <asdf12z_> yea but they will all be about perl lol and i don't know if all of them will make their way to youtube, only place i look

[23:13] <TimToady> I already have done two since the talk, and have at least two more in the pipeline already

[23:14] * TimToady tends to stay out of the Computer History Museum too because he doesn't want to become history yet

[23:14] <asdf12z_> i bring it up because linguistics, computers/technology, theology are all things i'm interested in, so having someone who had to wrestle with all 3 of these things would be enlightening 

[23:16] <TimToady> jdv79: you could parse the $str separately and then just return that as if a rule in the original grammar parsed it

[23:16] <TimToady> that would be cleaner than a text substitution

[23:17] <TimToady> the grammar rules are all just methods, after all, and the outer ASTs don't care where the inner ones came from

[23:18] <jdv79> i'll try what i think you mean and report back if it fails then.

[23:18] <jdv79> thanks 

[23:18] <TimToady> well, I'm gonna sleep soon, and in a few hours go to the airport, but I'm sure lots of folk here can help

[23:20] <jdv79> cool

[23:21] <woolfy> Thanks to everybody of the Perl (6) community who helped make the Perl-presence at FOSDEM a success.  TimToady, jnthn, FROGGS, tadzik, lizmat, pmichaud, nine, rjbs, ovid, danaj, Sawyer X, Stevan Little, Mickey Nasriachi, sergot, itz, El_Che, mst, Maddingue, virtualsue, charsbar, B00K, Tux, [Sno], sjn, ribasushi, Su-Shee, Juerd

[23:21] <woolfy> and all the others that were there...

[23:22] <woolfy> Beer event, a day of Perl-devroom, two big talks in the biggest FOSDEM-room, two nice dinners, two days of Perl-booth...

[23:22] <woolfy> Thanks!

[23:23] <TimToady> yer welc'm

[23:23] <Diederich> What would Kosh say? "And so it begins."

[23:23] <woolfy> TimToady: so many people came to the booth right after your talk, most wanted a Perl 6 button / sticker / tuit.

[23:24] <FROGGS_> \o/

[23:24] <dalek> doc: adbc3ba | skids++ | lib/Type/WhateverCode.pod:

[23:24] <dalek> doc: Add an example of using WhateverCode to define custom * behavior

[23:24] <dalek> doc: review: https://github.com/perl6/doc/commit/adbc3ba7a0

[23:24] <woolfy> It was quite funny to see some 25 people putting on a Perl 6 button almost simultaneously.  Our friendly neightbours with the snake looked a bit surprised...

[23:25] <FROGGS_> *g*

[23:27] <virtualsue> i made an honest attemp to converse with them by complimenting their language, excellent T shirts and snakes, however you can probably guess how that went

[23:27] <Diederich> virtualsue: truly?

[23:28] <FROGGS_> in case I did not said it already: TimToady++'s talk was MTA (more than awesome), it was very very nice to see these probably thousand ppl clapping heavily

[23:28] <virtualsue> that was good fun. and i really don't like tolkien :-D

[23:29] *** adu joined
[23:29] <virtualsue> ok i never met tolkien, but i have always failed at LOTR 

[23:29] <FROGGS_> that said - good night!

[23:29] <sjn> woolfy++ # for organizing a brilliant devroom and Perl stand with Claudio :)

[23:29] <virtualsue> Diederich: truly. i like python and i'd have bought a snake if i'd had the cash handy

[23:30] * sjn was very happy to participate

[23:30] <virtualsue> i had a good time taking a turn at the booth and attending various talks and all the events

[23:32] *** rjbs joined
[23:42] *** mr-foobar left
[23:44] *** mr-foobar joined
[23:47] <[Coke]> anyone else having trouble building r-p on rakudo HEAD? complaining about missing files.

[23:51] *** Peter_R left
[23:53] *** Peter_R joined
[23:54] *** BenGoldberg left
[23:58] * hoelzro tries

