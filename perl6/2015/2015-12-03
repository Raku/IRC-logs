[00:00] <Zoffix> services. gives channel operator status to ChanServ

[00:00] <Zoffix> <Zoffix> ¯\_(ツ)_/¯

[00:00] <Zoffix> -_-

[00:00] <jdv79> is that like broseph?

[00:00] <timotimo> i think so

[00:01] <timotimo> so ... do we have "bruhgrammers" now?

[00:01] *** lsm-desktop joined
[00:02] <zengargoyle> roommates back in like '90 used bra with great frequency.

[00:02] <timotimo> wow, i did not know it was already used early-ish like that

[00:02] * AlexDaniel wishes that all this stuff about bras was associated with DBIish

[00:03] <zengargoyle> maybe 'brah', not that it was ever spelled...

[00:03] *** ChanServ sets mode: +o Zoffix

[00:03] <timotimo> DBIBro?

[00:03] <timotimo> yeah, not everyone in the 90s could spell or write, right?

[00:04] <jdv79> nite

[00:04] <timotimo> gnite jdv79!

[00:04] *** Ch0c0late left
[00:04] *** ChanServ sets mode: -o Zoffix

[00:06] <Zoffix> huh?

[00:06] <diakopter> sorry, I was just being silly

[00:06] * Zoffix takes away ChanServ's crack pipe

[00:06] <Zoffix> :)

[00:09] <Hotkeys> quick question

[00:10] <Hotkeys> is the difference between ++$x and $x++ that the postfix modifies the variable itself while the prefix doesn't

[00:10] <Hotkeys> I could probably just test that but

[00:10] <flussence> m: my $x = 1; say $x++; my $y = 1; say ++$y

[00:10] <camelia> rakudo-moar f0a96d: OUTPUT«1␤2␤»

[00:10] <Zoffix> Hotkeys, ++$x modifies and gives value; $x++ gives value and modifies

[00:11] <diakopter> the difference is which value is returned by the expression; the variable is modified in both cases

[00:11] <Hotkeys> oh okay

[00:11] <diakopter> prefix means pre-increment, so increment before returning the value, logically

[00:11] <Hotkeys> so one returns the original value and one returns the incremented value

[00:11] <Zoffix> yup

[00:11] <Hotkeys> alrighty

[00:11] <AlexDaniel> m: my $x = 2; say +-$x;

[00:11] <camelia> rakudo-moar f0a96d: OUTPUT«-2␤»

[00:11] <AlexDaniel> m: my $x = 2; say -+$x;

[00:12] <camelia> rakudo-moar f0a96d: OUTPUT«-2␤»

[00:12] <AlexDaniel> m: my $x = 2; say -++$x;

[00:12] <camelia> rakudo-moar f0a96d: OUTPUT«-3␤»

[00:12] <Zoffix> AlexDaniel, show off! :)

[00:12] <AlexDaniel> m: my $x = 2; say --++$x;

[00:12] <camelia> rakudo-moar f0a96d: OUTPUT«Cannot call prefix:<-->(Int); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num $a is rw)␤  in block <uni…»

[00:12] <AlexDaniel> ah

[00:12] <Hotkeys> m: my $x = 2; say ±$x;

[00:12] <camelia> rakudo-moar f0a96d: OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at /tmp/axKWgSNfB3:1␤------> 3my $x = 2; say7⏏5 ±$x;␤Bogus postfix␤at /tmp/axKWgSNfB3:1␤------> 3my $x = 2; say 7⏏5±$x;␤    expecting any of:␤        infix␤        i…»

[00:12] <Hotkeys> aw

[00:12] <AlexDaniel> m: my $x = 2; say -$x--;

[00:12] <camelia> rakudo-moar f0a96d: OUTPUT«-2␤»

[00:12] <lizmat> commute from now busy lounge with post-Madonna visitors to quiet room&

[00:12] <AlexDaniel> m: my $x = 2; say +$x++;

[00:12] <camelia> rakudo-moar f0a96d: OUTPUT«2␤»

[00:12] *** lizmat left
[00:13] <AlexDaniel> Hotkeys: I've seen some code snippets here for ± to create a range

[00:13] <Hotkeys> seems like it'd be simple to do myself

[00:14] <AlexDaniel> Hotkeys: yeah, that's what it was

[00:14] <AlexDaniel> just a tiny bit of code :)

[00:14] <AlexDaniel> ooo

[00:14] *** empT left
[00:14] <AlexDaniel> now that's fun

[00:15] <AlexDaniel> m: my $x = 2; say $x+++--$x

[00:15] <camelia> rakudo-moar f0a96d: OUTPUT«4␤»

[00:15] <Hotkeys> beautiful

[00:15] *** empT joined
[00:17] <AlexDaniel> m: my $x = 2; say $x++-++$x # can do this

[00:17] <camelia> rakudo-moar f0a96d: OUTPUT«-2␤»

[00:17] <AlexDaniel> m: my $x = 2; say $x+++++$x # but can't do this, such a pity!

[00:17] <camelia> rakudo-moar f0a96d: OUTPUT«Cannot call postfix:<++>(Int); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool:U $a is rw)␤    (Bool:D $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num …»

[00:17] <timotimo> yeah, longest-token-matching; an earlier ++ wins over the possibility to have + ++ there ... or something like that

[00:17] *** Skarsnik left
[00:17] <AlexDaniel> timotimo: yeah

[00:18] <AlexDaniel> m: *

[00:18] <camelia> rakudo-moar f0a96d: ( no output )

[00:18] *** empT left
[00:18] <AlexDaniel> m: say *

[00:18] <camelia> rakudo-moar f0a96d: OUTPUT«*␤»

[00:19] *** lizmat joined
[00:19] <Hotkeys> m: sub prefix:<±>(Int:D $n) { -$n...$n }; say ±2;

[00:19] <camelia> rakudo-moar f0a96d: OUTPUT«(-2 -1 0 1 2)␤»

[00:20] <diakopter> m: say my $x = EVAL BEGIN '++($x)'; say $x

[00:20] <camelia> rakudo-moar f0a96d: OUTPUT«1␤1␤»

[00:20] <diakopter> mahaha

[00:20] <AlexDaniel> Hotkeys: I love it

[00:20] <Hotkeys> is there a way to do decreasing ranges without resorting to a sequence

[00:20] <timotimo> yeah

[00:20] <AlexDaniel> Hotkeys: - 5?

[00:20] <timotimo> m: my $r = 1..10; say $r - 5

[00:20] <camelia> rakudo-moar f0a96d: OUTPUT«-4..5␤»

[00:21] <Hotkeys> m: say (-3..3).list; say(3..-3).list

[00:21] <camelia> rakudo-moar f0a96d: OUTPUT«(-3 -2 -1 0 1 2 3)␤3..-3␤»

[00:21] <timotimo> m: my $r = 1..10; say $r - 5; say $r * 10

[00:21] <camelia> rakudo-moar f0a96d: OUTPUT«-4..5␤10..100␤»

[00:21] <AlexDaniel> m: sub prefix:<±>(Int:D $n) { -$n...$n }; say ±2 - 5

[00:21] <camelia> rakudo-moar f0a96d: OUTPUT«0␤»

[00:21] <leont> https://travis-ci.org/Leont/tap-harness6/builds/94528819#L921 :-(

[00:21] <AlexDaniel> m: sub prefix:<±>(Int:D $n) { -$n...$n }; say (±2 - 5)

[00:21] <camelia> rakudo-moar f0a96d: OUTPUT«0␤»

[00:21] <AlexDaniel> m: sub prefix:<±>(Int:D $n) { -$n..$n }; say (±2 - 5)

[00:21] <camelia> rakudo-moar f0a96d: OUTPUT«-7..-3␤»

[00:21] <AlexDaniel> m: sub prefix:<±>(Int:D $n) { -$n..$n }; say ±2 - 5

[00:21] <camelia> rakudo-moar f0a96d: OUTPUT«-7..-3␤»

[00:21] <timotimo> leont: ;_;

[00:22] <Hotkeys> but I mean like

[00:22] <Hotkeys> 9..1

[00:22] <Hotkeys> m: say 2 ~~ 9..1;

[00:22] <camelia> rakudo-moar f0a96d: OUTPUT«False␤»

[00:22] <Hotkeys> m: say 2 ~~ 1..9;

[00:22] <camelia> rakudo-moar f0a96d: OUTPUT«True␤»

[00:22] <AlexDaniel> ah reversed ranges?

[00:22] <Hotkeys> yeah

[00:22] <AlexDaniel> no such thing that I know of

[00:23] <AlexDaniel> m: sub prefix:<±>(Int:D $n) { -$n..$n }; say ±2 * -5

[00:23] <camelia> rakudo-moar f0a96d: OUTPUT«10..-10␤»

[00:23] <timotimo> yeah, ranges are always low-to-high

[00:23] <AlexDaniel> wtf is that?

[00:23] <timotimo> if the number on the right is lower than the number on the left, it's an empty range instead

[00:23] <Hotkeys> why is that?

[00:24] <AlexDaniel> m: say 10..-10

[00:24] <camelia> rakudo-moar f0a96d: OUTPUT«10..-10␤»

[00:24] <timotimo> that's just how they are built, designed and meant to function

[00:24] <Hotkeys> I guess they still encompass the same range of values

[00:24] <AlexDaniel> hm but you can still create it though

[00:24] <timotimo> yeah

[00:24] <timotimo> it won't throw an exception or anything

[00:24] <Hotkeys> it gets represented, but it is just empty

[00:24] <timotimo> m: say @(10..-10)

[00:24] <camelia> rakudo-moar f0a96d: OUTPUT«()␤»

[00:24] <timotimo> um ... urgh.

[00:25] <timotimo> was that just slow?

[00:25] <timotimo> ah

[00:25] <Hotkeys> hm?

[00:25] <timotimo> i thought it was going off and iterating from 10, 11, 12, ... until it hits -10

[00:25] <Hotkeys> I didn't see anything strange

[00:26] <timotimo> it just took much longer than i expected

[00:26] <Hotkeys> both were within the same second for me

[00:26] <Hotkeys> :p

[00:26] <Zoffix> Same.

[00:26] <timotimo> 012146 was my command, 012154 was my urgh, 012215 was camelias response ... at least to my machine

[00:26] <Zoffix> You were just lagging

[00:26] <Zoffix> m: say @(10..-10)

[00:26] <camelia> rakudo-moar f0a96d: OUTPUT«()␤»

[00:26] <timotimo> most probably

[00:27] <timotimo> yeah, i had tested it locally, too, where it was instant also

[00:27] <AlexDaniel> m: ++++++++++++---------*

[00:27] <camelia> rakudo-moar f0a96d: ( no output )

[00:28] <Hotkeys> m: sub prefix:<±>(Int:D $n) { $n.=abs; -$n..$n }; say ±(-2);

[00:28] <camelia> rakudo-moar f0a96d: OUTPUT«Cannot modify an immutable Int␤  in sub prefix:<±> at /tmp/yOyZ8XnPIY:1␤  in block <unit> at /tmp/yOyZ8XnPIY:1␤␤»

[00:28] <Hotkeys> oops

[00:28] <AlexDaniel> is copy

[00:28] <Zoffix> m: sub prefix:<±>(Int:D $n is copy) { $n.=abs; -$n..$n }; say ±(-2);

[00:28] <camelia> rakudo-moar f0a96d: OUTPUT«-2..2␤»

[00:28] <Zoffix> m: sub prefix:<±>(Int:D $n is copy) { $n.=abs; -$n..$n }; say ±(Inf);

[00:28] <camelia> rakudo-moar f0a96d: OUTPUT«Type check failed in binding $n; expected Int but got Num␤  in sub prefix:<±> at /tmp/H1EGH1pF73:1␤  in block <unit> at /tmp/H1EGH1pF73:1␤␤»

[00:28] <Hotkeys> ty

[00:29] <Zoffix> :(

[00:29] <Hotkeys> oh

[00:29] <Zoffix> m: sub prefix:<±>(Num:D $n is copy) { $n.=abs; -$n..$n }; say ±(Inf);

[00:29] <camelia> rakudo-moar f0a96d: OUTPUT«-Inf..Inf␤»

[00:29] <Hotkeys> rip

[00:29] <Zoffix> :O

[00:29] *** n0tjack joined
[00:29] <Hotkeys> probably smarter to use num anyway

[00:29] <Zoffix> m: sub prefix:<±>(Num:D $n is copy) { $n.=abs; -$n..$n }; say ±(NaN);

[00:29] <camelia> rakudo-moar f0a96d: OUTPUT«NaN..NaN␤»

[00:29] <Zoffix> Perl 6 is smarter than me :(

[00:29] <Hotkeys> Also I'll never get tired of the smilies

[00:29] <Hotkeys> for definedness checking

[00:30] <AlexDaniel> Hotkeys: me too…

[00:30] <Hotkeys> :D and :U

[00:30] <timotimo> :_ isn't such a smiley-like smiley :(

[00:30] <Hotkeys> it's just a broken smiley

[00:31] <Hotkeys> the eyes have unhinged from the mouth (or vice versa)

[00:31] <Zoffix> m: sub prefix:<±>(Num:D $n is copy) { $n.=abs; (-$n..$n) xx 10, 'batman'   }; say ±(NaN);

[00:31] <camelia> rakudo-moar f0a96d: OUTPUT«((NaN..NaN NaN..NaN NaN..NaN NaN..NaN NaN..NaN NaN..NaN NaN..NaN NaN..NaN NaN..NaN NaN..NaN) batman)␤»

[00:32] <AlexDaniel> the happiest perl6 program in the world!

[00:32] <AlexDaniel> m: :D

[00:32] <camelia> rakudo-moar f0a96d: ( no output )

[00:32] <Hotkeys> lol

[00:32] <AlexDaniel> m: :U

[00:32] <camelia> rakudo-moar f0a96d: ( no output )

[00:32] <Hotkeys> m: say 2 ~~ 1...3

[00:32] <camelia> rakudo-moar f0a96d: OUTPUT«(False True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True…»

[00:32] <Hotkeys> heh

[00:32] <Hotkeys> sequences

[00:33] <AlexDaniel> Hotkeys: I don't really get this one

[00:33] <Hotkeys> me either

[00:33] <Zoffix> m: say 1...3

[00:33] <camelia> rakudo-moar f0a96d: OUTPUT«(1 2 3)␤»

[00:33] <Zoffix> :S

[00:33] <Hotkeys> m: say 2 ~~ 1..3

[00:33] <camelia> rakudo-moar f0a96d: OUTPUT«True␤»

[00:33] <AlexDaniel> m: say 2 ~~ (1, 2, 3)

[00:33] <Hotkeys> makes much more sense

[00:33] <camelia> rakudo-moar f0a96d: OUTPUT«False␤»

[00:33] *** lichtkind left
[00:33] *** n0tjack left
[00:34] <Zoffix> m: say eager 1...3

[00:34] <camelia> rakudo-moar f0a96d: OUTPUT«(1 2 3)␤»

[00:34] <Hotkeys> m: say 2 ~~ any(1, 2, 3)

[00:34] <camelia> rakudo-moar f0a96d: OUTPUT«True␤»

[00:34] <Hotkeys> AlexDaniel: 

[00:34] <Hotkeys> m: say 2 ~~ any(1...3)

[00:34] <camelia> rakudo-moar f0a96d: OUTPUT«True␤»

[00:34] <Hotkeys> works I guess

[00:34] <Hotkeys> still not as pretty as the range one

[00:35] <AlexDaniel> but why does it go True True True True True… ?

[00:35] <dalek> rakudo-star-daily: 44a6126 | coke++ | log/ (2 files):

[00:35] <dalek> rakudo-star-daily: today (automated commit)

[00:35] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/44a6126524

[00:35] <AlexDaniel> what's so infinite about it?

[00:35] <timotimo> 2 ~~ 1 ... 3 is actually "True ... 3"

[00:35] <timotimo> er, i mean

[00:35] <timotimo> False ... 3

[00:36] <timotimo> m: say False ... 3

[00:36] <camelia> rakudo-moar f0a96d: OUTPUT«(False True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True…»

[00:36] <AlexDaniel> aaaaaah

[00:36] <AlexDaniel> riiiiiight

[00:36] <Hotkeys> m: say 2 ~~ (1...3);

[00:36] <camelia> rakudo-moar f0a96d: OUTPUT«False␤»

[00:36] <timotimo> m: say 1...3

[00:36] <camelia> rakudo-moar f0a96d: OUTPUT«(1 2 3)␤»

[00:36] <AlexDaniel> ok I got it… wow

[00:36] <timotimo> i think matching against a list will want the LHS to be list-structured, too

[00:36] *** leont left
[00:37] <Hotkeys> m: say 2, ~~ (1...3);

[00:37] <camelia> rakudo-moar f0a96d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/z6zjjlnOJK␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at /tmp/z6zjjlnOJK:1␤------> 3say 2, ~~7⏏5 (1...3);␤»

[00:37] <Hotkeys> I'm smrt

[00:37] <Hotkeys> m: say (2) ~~ (1...3);

[00:37] <camelia> rakudo-moar f0a96d: OUTPUT«False␤»

[00:37] <timotimo> trailing comma really only works in some circumstances, like an argument list

[00:37] <timotimo> m: say (2,) ~~ (1...3)

[00:37] <camelia> rakudo-moar f0a96d: OUTPUT«False␤»

[00:37] <timotimo> m: say (1,2,3) ~~ (1...3)

[00:37] <camelia> rakudo-moar f0a96d: OUTPUT«False␤»

[00:37] <timotimo> m: say (1,2,3) ~~ (1, 2, 3)

[00:37] <camelia> rakudo-moar f0a96d: OUTPUT«True␤»

[00:38] <timotimo> interesting

[00:38] <Hotkeys> m: say 2,;

[00:38] <camelia> rakudo-moar f0a96d: OUTPUT«2␤»

[00:38] <Hotkeys> woo

[00:41] <Hotkeys> I'm an expert

[00:43] <timotimo> can you draw seven perpendicular lines?

[00:44] * [Coke] adds woolfy to the credits.

[00:44] <Hotkeys> yes

[00:44] <Hotkeys> with both green and transparent ink

[00:44] <timotimo> love that sketch!

[00:44] <Hotkeys> yeah

[00:45] <timotimo> are you interested in seeing a video of a cat snuggling up to a bearded man's face?

[00:45] <Hotkeys> Can you draw seven perpendicular red lines, some with green ink, some with transparent ink, and one in the form of a kitten?

[00:45] <Hotkeys> definitely a possible thing

[00:46] <Hotkeys> for an expert like me

[00:46] <timotimo> yup. experts can do things like that

[00:46] <Hotkeys> I don't really do videos while in lecture

[00:46] <timotimo> oh, OK

[00:46] <Hotkeys> I prefer to waste my time in text chats

[00:46] <lizmat> [Coke]: woolfy will appreciate that  :-)

[00:46] <timotimo> well, that video is perfectly fine when muted

[00:46] <Hotkeys> not paying attention etc.

[00:46] <lizmat> m: say CurrentThreadScheduler.new.cue( { 42 }, :catch( { say "caught"; default { say "default" } }) )  # works fine

[00:46] <camelia> rakudo-moar f0a96d: OUTPUT«(<anon|645373056>)␤»

[00:46] <Hotkeys> but at least irc chat looks kind of like I'm doing productive things

[00:47] <Hotkeys> beard cat videos don't

[00:47] <timotimo> oh, i see

[00:47] <lizmat> m: say CurrentThreadScheduler.new.cue( { die }, :catch( { say "caught"; default { say "default" } }) )  # not so good

[00:47] <camelia> rakudo-moar f0a96d: OUTPUT«caught␤default␤Nil␤»

[00:47] <Hotkeys> I also avoid facebook etc.

[00:47] <Zoffix> :o

[00:47] <timotimo> avoiding facebook's a good idea in any case :)

[00:47] <Hotkeys> perl 6 doc site really breaks the illusion

[00:47] <Zoffix> but Facebook is where all the fun's at!

[00:47] <Hotkeys> with the big butterfly drawing

[00:47] <Zoffix> i've just seen lizmat's picture there!

[00:48] <timotimo> Hotkeys: install a userscript that hides 'er :)

[00:48] <Hotkeys> is such a thing even possible?

[00:48] <Zoffix> yes

[00:48] <Hotkeys> my facebook picture has been a flag for over a year now

[00:48] <Zoffix> Hotkeys, what browser? For Firefox there's greasemonkey. For Chrome.. I forget the name, but if you google "greasemonkey for chrome" I'm sure you get it :)

[00:48] <Hotkeys> (I am a flag to)

[00:49] <Hotkeys> I have tampermonkey

[00:49] <Hotkeys> which is the equiv for chrome

[00:49] <Zoffix> Ah, yeah that is it

[00:49] <lizmat> (I'm not on facebook)

[00:49] <Hotkeys> I was just joking

[00:49] <AlexDaniel> m: sub ___{}; *^___^* # more smileys!

[00:49] <camelia> rakudo-moar f0a96d: ( no output )

[00:49] <Hotkeys> this new perl 6 intro is nice as well (perl6intro.com)

[00:50] <timotimo> yup, it is

[00:50] <Zoffix> lizmat, you are in this pic, which is the header of the Facebook Perl 6 group :) https://scontent-yyz1-1.xx.fbcdn.net/hphotos-xfa1/t31.0-8/11103220_907719199295931_8841931739953485064_o.jpg

[00:50] <Zoffix> (and you are tagged in that pic)

[00:50] <lizmat> yeah, I guess so  :-)  

[00:50] <Zoffix> :)

[00:51] <lizmat> .oO( and nobody says anything about the life-size Camelia in the background  :-)

[00:51] <diakopter> m: say my $x = EVAL BEGIN '++($x=33)'; say END BEGIN END BEGIN END BEGIN $x

[00:51] <camelia> rakudo-moar f0a96d: OUTPUT«34␤Nil␤»

[00:51] <Zoffix> :o

[00:52] <AlexDaniel> m: | :[]

[00:52] <camelia> rakudo-moar f0a96d: ( no output )

[00:52] <AlexDaniel> m: | :()

[00:52] <camelia> rakudo-moar f0a96d: ( no output )

[00:53] <Hotkeys> are you still trying to make face programs

[00:53] <AlexDaniel> shh

[00:53] <Hotkeys> diakopter: what did you just do

[00:53] <diakopter> Hotkeys: working around this

[00:54] <diakopter> m: say my $x = $x

[00:54] <camelia> rakudo-moar f0a96d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Zps4XK3Bos␤Cannot use variable $x in declaration to initialize itself␤at /tmp/Zps4XK3Bos:1␤------> 3say my $x = $7⏏5x␤    expecting any of:␤        term␤»

[00:54] <Hotkeys> ah

[00:54] <AlexDaniel> what a wonderful error message

[00:54] <Hotkeys> why work around it

[00:54] <Hotkeys> seems like a reasonable thing

[00:55] <AlexDaniel> mm

[00:55] <AlexDaniel> m: my $x = 5; sub foo { my $x = $x }; foo

[00:55] <camelia> rakudo-moar f0a96d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/odrl_6WZ0W␤Cannot use variable $x in declaration to initialize itself␤at /tmp/odrl_6WZ0W:1␤------> 3my $x = 5; sub foo { my $x = $7⏏5x }; foo␤    expecting any of:␤        term␤»

[00:55] <diakopter> m: say my ($x, $y) = (EVAL BEGIN '$y=6'),(EVAL BEGIN '$x=4');

[00:55] <camelia> rakudo-moar f0a96d: OUTPUT«(6 4)␤»

[00:56] <AlexDaniel> m: my $x = 5; sub foo { my $x = OUTER::$x }; foo

[00:56] <camelia> rakudo-moar f0a96d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/IBP_0juoBC␤Malformed lookup of ::$x; please use ::('$x'), ::{'$x'}, or ::<$x>␤at /tmp/IBP_0juoBC:1␤------> 3my $x = 5; sub foo { my $x = OUTER7⏏5::$x }; foo␤»

[00:56] <AlexDaniel> m: my $x = 5; sub foo { my $x = ::$x }; foo

[00:56] <camelia> rakudo-moar f0a96d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/FD66ne1Jq2␤Malformed lookup of ::$x; please use ::('$x'), ::{'$x'}, or ::<$x>␤at /tmp/FD66ne1Jq2:1␤------> 3my $x = 5; sub foo { my $x =7⏏5 ::$x }; foo␤    expecting any of:␤        term␤»

[00:56] <AlexDaniel> m: my $x = 5; sub foo { my $x = ::<$x> }; foo

[00:56] <camelia> rakudo-moar f0a96d: ( no output )

[00:57] <AlexDaniel> m: my $x = 5; sub foo { my $x = ::<$x>; say $x }; foo

[00:57] <camelia> rakudo-moar f0a96d: OUTPUT«(Any)␤»

[00:57] <AlexDaniel> nah

[00:57] <Zoffix> Curses! I wanted to use Text::Markov for my advent article and its got an @*INC bug in tests :P

[00:57] * Zoffix sends a PR

[00:57] <AlexDaniel> m: my $x = 5; sub foo { my $x = OUTER::<$x>; say $x }; foo

[00:57] <camelia> rakudo-moar f0a96d: OUTPUT«5␤»

[00:57] <AlexDaniel> alright!

[00:58] <Hotkeys> there's a markov chain module? neato

[00:58] <Zoffix> Yeah :)

[01:00] <timotimo> autovivification makes that super awesome, IMO

[01:00] <timotimo> %h{$word1}{$word2}{$word3}++

[01:02] <lizmat> m: sub a($a) { $a(); CATCH { default { say "default" } }; 42 }; say a( -> { die } )   # shorter version

[01:02] <camelia> rakudo-moar f0a96d: OUTPUT«default␤Nil␤»

[01:02] <lizmat> I sorta expect this to say 42

[01:02] <Zoffix> .tell nine not sure how feasible it is, but it would be nicer if the precomp stuff happened in the OS's temp dir instead of .precomp. Currently, if I run prove in some dist's repo, I have to either list lib/.precomp in .gitignore or be careful not to make it part of my commit :) which is kinda annoying :)

[01:02] <yoleaux> Zoffix: I'll pass your message to nine.

[01:02] <lizmat> am I wrong ?

[01:03] <flussence> Zoffix: nice timing, I just sent in a PR for exactly that

[01:04] <lizmat> flussence Zoffix : I think we want precomped modules to be more permanent than living in a temp dir

[01:04] <flussence> mine just does it for ::FileSystem ones, which a `git clean -dfx` in a module dir blows away anyway

[01:05] <geekosaur> possibly just tests should use a tmpdir for precomp?

[01:06] <timotimo> i don't know why i stayed up so late. i should go to bed

[01:07] *** empT joined
[01:09] *** quester left
[01:09] * lizmat just submitted #126789

[01:09] <lizmat> timotimo: know the feeling

[01:11] *** cdg left
[01:11] <lizmat> m: my %h; %h<foo><bar><baz> := my $foobarbaz; dd %h; $foobarbaz = 42; dd %h

[01:11] <camelia> rakudo-moar f0a96d: OUTPUT«Hash $var = ${:foo(${:bar(${:baz(Any)})})}␤Hash $var = ${:foo(${:bar(${:baz(Any)})})}␤»

[01:12] *** empT left
[01:12] <timotimo> gnite! :)

[01:12] <lizmat> hmmm.....

[01:12] *** yeahnoob joined
[01:12] <lizmat> good night, timotimo!

[01:12] <lizmat> m: my %h; my $a := %h<foo><bar><baz>; dd %h; $fa = 42; dd %h

[01:12] <camelia> rakudo-moar f0a96d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_JM_35Y3y1␤Variable '$fa' is not declared␤at /tmp/_JM_35Y3y1:1␤------> 3 %h; my $a := %h<foo><bar><baz>; dd %h; 7⏏5$fa = 42; dd %h␤»

[01:12] <lizmat> m: my %h; my $a := %h<foo><bar><baz>; dd %h; $a = 42; dd %h

[01:12] <camelia> rakudo-moar f0a96d: OUTPUT«Hash $var = ${}␤Hash $var = ${:foo(${:bar(${:baz(42)})})}␤»

[01:13] <lizmat> .oO( the magic of .WHENCE )

[01:14] <Hotkeys> .WHENCE?

[01:17] <Zoffix> bbkr_, sent you a PR: https://github.com/bbkr/text_markov/pull/3

[01:17] <AlexDaniel> *⃰

[01:18] *** snarkyboojum joined
[01:19] <lizmat> $!whence is a Scalar attribute that may hold code to do initialization

[01:20] <Hotkeys> I wish we still used whence, hence, thence, whither, hither, thither

[01:20] <Hotkeys> but it would sound ridiculous and pompous to use them today

[01:20] <Hotkeys> :(

[01:20] <Hotkeys> except poetically

[01:21] <Hotkeys> (and hence in its other definition as therefore)

[01:21] *** Actualeyes joined
[01:22] *** kid51 left
[01:23] *** Zoffix left
[01:23] *** kid51 joined
[01:27] <Goonthen> :(

[01:27] *** hudo joined
[01:28] *** csd_ joined
[01:29] <Hotkeys> :_

[01:30] *** n0tjack joined
[01:34] <Hotkeys> .u ␤

[01:34] <yoleaux> U+2424 SYMBOL FOR NEWLINE [So] (␤)

[01:34] <Hotkeys> neat

[01:34] <Goonthen> python

[01:35] *** n0tjack left
[01:35] <Hotkeys> perl

[01:36] <lizmat> good night, #perl6!

[01:36] <Goonthen> ^_^

[01:36] *** TimToady left
[01:37] <Goonthen> Can't understand the codes I wrote one month ago :( 

[01:37] <Goonthen> Too hard to maintain 

[01:37] <Hotkeys> lol

[01:38] <Hotkeys> Did you include comments? :p

[01:38] <Goonthen> yes, but very few. 

[01:38] <Goonthen> I guess that's the main reason 

[01:38] *** TimToady1 joined
[01:40] <lizmat> .tell jnthn in t/spec/S17-supply/syntax.t, add =finish at line 227, to reliably cause a SIGABRT after test 16

[01:40] <yoleaux> lizmat: I'll pass your message to jnthn.

[01:40] <lizmat> .tell jnthn looks like there's still some voodoo going on wrt to supply blocks, at least on OS X

[01:40] <yoleaux> lizmat: I'll pass your message to jnthn.

[01:40] <lizmat> really sleep&

[01:41] <Hotkeys> Goonthen: sometimes I write spaghetti code when I don't think I'll ever need to look at it again (For personal utilities)

[01:42] <Hotkeys> and then i need to look at it again and hate myself

[01:43] <Goonthen> AAny idea how to avoid this ? More comments ? 

[01:43] <AlexDaniel> Goonthen: just start liking it!

[01:44] <AlexDaniel> .oO( oh look! This is so complicated! I must have been so smart! )

[01:44] <Goonthen> <lol

[01:45] <AlexDaniel> Goonthen: just try to keep it simple

[01:46] <AlexDaniel> especially the flow

[01:54] *** zengargoyle left
[01:59] *** empT joined
[02:03] *** empT left
[02:03] *** rurban left
[02:08] *** muraiki joined
[02:09] *** dayangkun joined
[02:11] *** zengargoyle joined
[02:12] *** molaf joined
[02:18] *** dayangkun left
[02:21] *** hudo left
[02:22] *** Goonthen left
[02:25] *** csd_ left
[02:27] <dj_goku> hi

[02:27] <yoleaux> 2 Dec 2015 07:39Z <timotimo> dj_goku: panda ships with JSON::Fast so that it can use it before it is able to install stuff from the ecosystem by itself; i asked tadzik to wait with updating pandas copy because SEQ was just about to get deprecated and that would have broken panda

[02:27] <yoleaux> 2 Dec 2015 07:39Z <timotimo> dj_goku: when all people can be assumed to have a new-enough rakudo, i'll tell tadzik to update JSON::Fast again so that the speed increase can be felt far and wide

[02:29] *** muraiki left
[02:30] <dj_goku> .tell timotimo is there a reason against using say git submodule vs copy/pasting code into the panda repo?

[02:30] <yoleaux> dj_goku: I'll pass your message to timotimo.

[02:31] *** n0tjack joined
[02:31] *** molaf_ joined
[02:34] *** molaf left
[02:35] *** n0tjack left
[02:35] *** dayangkun joined
[02:39] <[Coke]> submodule lets you easily update.

[02:39] <[Coke]> DRY.

[02:41] *** kaare_ joined
[02:43] *** zacts joined
[02:48] *** BenGoldberg joined
[02:52] *** kid51 left
[02:55] *** kaare_ left
[02:56] *** zacts left
[02:59] *** zacts joined
[03:01] <dj_goku> [Coke]: :D that is the idea!

[03:03] *** lustlife joined
[03:04] *** sno left
[03:08] *** Zoffix joined
[03:09] *** noganex_ joined
[03:12] *** noganex left
[03:14] <diakopter> hunh, PHP 7.0.0 released this week; they skipped version 6 ... for reasons that might not be surprising.. http://www.phpclasses.org/blog/post/242-PHP-7-Features-and-Release-Date.html

[03:16] <TEttinger> haha

[03:16] <TEttinger> Those that were in favor of PHP 7 claimed that PHP 6 was the name of a PHP branch that was killed in 2010. That was a very ambitious development that aimed to bring Unicode support as standard to all PHP text handling.

[03:16] <TEttinger> oh no... so ambitious...

[03:16] <TEttinger> no language with a 6 in it could possibly support unicode...

[03:16] <llfourn> or be have 6.0 release in 2015...

[03:17] <llfourn> reinforcing the belief of PHP fans they have made the right choice to invest on a language that is leading its market

[03:18] <llfourn> there are too many things wrong in this sentence

[03:20] *** Actualeyes left
[03:23] <diakopter> well, PHP is in fact growing the 3rd fastest of the language repositories (behind JS and Go), according to modulecounts.com

[03:24] <diakopter> .NET, Python, and Ruby round out the 2nd tier

[03:24] *** iguanodon joined
[03:24] <diakopter> er, and Java

[03:24] <diakopter> .NET, Python, Java, and Ruby round out the 2nd tier

[03:26] <diakopter> Clojure, Perl, Rust, Haskell, Lua, Perl 6, and some others comprise the 3rd tier of growth rates

[03:28] *** molaf_ left
[03:28] <retupmoca> .tell nine https://github.com/rakudo/rakudo/pull/612 fixes my PERL6LIB issues

[03:28] <yoleaux> retupmoca: I'll pass your message to nine.

[03:30] *** iguanodon left
[03:31] *** n0tjack joined
[03:34] *** snarkyboojum left
[03:35] *** n0tjack left
[03:39] *** molaf joined
[03:39] <dalek> rakudo/nom: 2729631 | TimToady++ | src/ (2 files):

[03:39] <dalek> rakudo/nom: refactor same(space,case,mark)

[03:39] <dalek> rakudo/nom: 

[03:39] <dalek> rakudo/nom: The :ss, :ii, and :mm now all work together, and the latter two

[03:39] <dalek> rakudo/nom: go with word-by-word mapping whenever :sigspace is in effect.

[03:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/272963197b

[03:40] <dalek> roast: 91c26aa | TimToady++ | S (4 files):

[03:40] <dalek> roast: tests for same(space,case,mark) semantics

[03:40] <dalek> roast: review: https://github.com/perl6/roast/commit/91c26aa1b2

[03:41] <llfourn> diakopter: amazing that npm has over 200,000 modules o.o

[03:42] <diakopter> yah

[03:42] <ShimmerFairy> TimToady: do they have the same behavior for when the destination string is longer than the pattern? I remember that one of them (samecase?) just repeated the last pattern across the remaining string, while the others simply stopped.

[03:42] <yoleaux> 2 Dec 2015 22:12Z <[Coke]> ShimmerFairy: did the credits conversion, you're off the hook.

[03:43] <diakopter> llfourn: even more amazing they have nearly 300 uploads per day

[03:44] <diakopter> and still climbing, apparently

[03:44] <llfourn> diakopter: and apparently 131 million downloads https://www.npmjs.com/

[03:44] <llfourn> I guess it's all the new stuff that has js libs being written for them

[03:45] <llfourn> I know that my friends vaccume clearner thing runs node

[03:45] <diakopter> 131 million downloads in the last day

[03:45] <diakopter> that's a lot

[03:45] <llfourn> it's as masak++ said, JS has won

[03:45] *** km3 joined
[03:46] <diakopter> if you put modulecounts.com on "All time" view, you can rest knowing that, even as of 2010, Perl was ahead in quantity

[03:46] <Mouq> TimToady++

[03:46] <yoleaux> 1 Dec 2015 09:35Z <ShimmerFairy> Mouq: now that I can use perl6, I'm also seeing the same strange parse fail in SUPERNOVA's test.p6 that wasn't there pre-CURI. Weird, I'll have to look into it when I have time.

[03:47] <MadcapJake> Zoffix: I don't know how easy it would be but you might try using https://github.com/atom/highlights with my syntax-highlighter to generate the html.

[03:47] <llfourn> mm it's interesting that perl was so far ahead in the idea of easily packaging and distributing modules

[03:47] <diakopter> (but in 2010, the others were already growing far, far faster)

[03:49] <llfourn> well I guess it's quality not quantity in the end -- I don't really want to browse 200,000 modules to find the one I need lol

[03:49] <Mouq> Were there any serious precedents to CPAN?

[03:52] <TimToady1> ShimmerFairy: case and mark repeat the last word, space just uses the existing spaces

[03:52] *** empT joined
[03:53] *** yqt left
[03:53] <diakopter> Mouq: I don't think so

[03:54] *** TimToady1 is now known as TimToady

[03:54] *** TimToady left
[03:54] *** TimToady joined
[03:56] <ShimmerFairy> m: say "foo bar baz".samespace("a  b");  say "foobar".samemark("äöü"); say "foobar".samecase("BaZ");  # TimToady: this is what I meant. samecase carries the last pattern (uppercase) through, but mark and space don't do that

[03:56] <camelia> rakudo-moar 272963: OUTPUT«foo  bar baz␤f̈ööbar␤FoOBAR␤»

[03:59] <TimToady> the methods are primitives, I'm talking about the s/// form

[03:59] <ShimmerFairy> (to be a bit more concrete, consistency with the other two functions would suggest "FoObar" instead of "FoOBAR")

[03:59] <ShimmerFairy> ah, ok then :)

[03:59] <TimToady> those methods are applied word by word when sigspace is in effect, and the last pattern word repeats

[04:00] <TimToady> otherwise they call the methods directly, so would be what you observe

[04:00] <TimToady> it makes more sense to extend the last letter of case than the last letter of mark

[04:00] <TimToady> though an argument could be made for extending some marks

[04:01] <TimToady> and perhaps that would be a better default

[04:01] <ShimmerFairy> I agree extending the mark doesn't make much sense, my concern is just that via the primitive methods,  .samecase does something different that the other two .same* methods. I personally can't think offhand of a case where I'd want FoOBAR

[04:02] <TimToady> however, consider Foobar as tclc

[04:02] <TimToady> you do want the rest of the word lc

[04:02] <ShimmerFairy> .oO(If we had Cats you could just do  $str.samecase("A" x *) )

[04:02] <TimToady> as it happens, you can define your own filter now and feed it to .word-by-word

[04:03] <ShimmerFairy> ah, true. I suppose I just don't use the .same* methods often enough anyway, it was just a seeming inconsistency I spotted some time back :)

[04:03] <TimToady> it's an inconsistency that almost been well considered :)

[04:06] <MadcapJake> any idea when perl6-debug-m will work again?

[04:07] <TimToady> there are really two very different use cases for marks, one of which is for natural language orthography, where you rarely get the same mark on multiple characters, vs novelty marks like circles and underbars that do want to work on multiple adjacent characters

[04:08] <TimToady> my thinking was perhaps unduly influenced by the former usage, but perhaps a mark repeat policy can support the latter without having a large impact on the former

[04:08] <ShimmerFairy> TimToady: about samemark doing the same thing, it'd only make sense for things like keycap marks, e.g.  $sequence.samemark("\x20E3") , and not so much for languages. Since I don't know if there's a decent method of finding the "repeatable" ones, I'm not sure if the default is worth changing.

[04:08] <TimToady> so maybe I'll make it consistent with cases

[04:08] <ShimmerFairy> m: say "foobar".samecase("BAZ ")

[04:08] <camelia> rakudo-moar 272963: OUTPUT«FOObar␤»

[04:08] <ShimmerFairy> ^ there's a way to get the "don't repeat" behavior, at least :)

[04:09] <TimToady> hmm, I thought that one would repeat

[04:09] <diakopter> llfourn: after a bit of analysis, the 50-day moving average for CPAN's growth rate has been in the single digits since modulecounts started recording (2010)

[04:09] <TimToady> oh, wait, that's the primitive again...

[04:10] <diakopter> (and declining since then, gradually from high single digits to low single digits today)

[04:11] *** molaf left
[04:11] <TimToady> m: $_ = "BAZ "; ss:ii/\w+ /foobar/; .say

[04:11] <camelia> rakudo-moar 272963: OUTPUT«FOOBAR␤»

[04:11] <TimToady> that one extends

[04:12] <TimToady> m: $_ = "oöö"; ss:ii/\w+ /foobar/; .say

[04:12] <camelia> rakudo-moar 272963: OUTPUT«foobar␤»

[04:12] <TimToady> m: $_ = "oöö"; ss:mm/\w+ /foobar/; .say

[04:12] <camelia> rakudo-moar 272963: OUTPUT«fööbar␤»

[04:12] <TimToady> that one doesn't, but arguably should

[04:14] <TimToady> m: $_ = "o⃨"; ss:mm/\w+ /foobar/; .say

[04:14] <camelia> rakudo-moar 272963: OUTPUT«f⃨oobar␤»

[04:14] *** empT_ joined
[04:17] *** empT left
[04:23] *** vendethiel joined
[04:27] <dalek> rakudo/nom: 807e2ef | retupmoca++ | src/core/Process.pm:

[04:27] <dalek> rakudo/nom: Fix forward-slash vs back-slash confusion in Win32

[04:27] <dalek> rakudo/nom: 

[04:27] <dalek> rakudo/nom: In windows C:\a\b and C:/a/b refer to the same location, but @INC.unique thinks

[04:27] <dalek> rakudo/nom: they are different, so we canonicalize all paths to C:\a\b on windows.

[04:27] <dalek> rakudo/nom: 

[04:27] <dalek> rakudo/nom: Fixes the issue in https://gist.github.com/retupmoca/01d09301ac7fc3fd2013

[04:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/807e2ef185

[04:27] <dalek> rakudo/nom: 323accf | retupmoca++ | src/core/Process.pm:

[04:27] <dalek> rakudo/nom: Also canonicalize paths is %*CUSTOM_LIB

[04:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/323accf84b

[04:27] <dalek> rakudo/nom: f59ce1d | (Matthew Wilson)++ | src/core/Process.pm:

[04:27] <dalek> rakudo/nom: Merge pull request #612 from retupmoca/perl6lib-slashes

[04:27] <dalek> rakudo/nom: 

[04:27] <dalek> rakudo/nom: Fix forward-slash vs back-slash confusion in Win32

[04:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f59ce1d49e

[04:32] *** n0tjack joined
[04:34] *** mohij joined
[04:35] *** bpmedley left
[04:36] *** n0tjack left
[04:38] *** patrickz left
[04:38] *** zengargoyle left
[04:42] *** empT joined
[04:43] *** empT_ left
[04:46] *** skids left
[04:46] *** vendethiel left
[04:49] *** Actualeyes joined
[04:51] <TimToady> m: say "o⃨" ~~ m:m/o/

[04:51] <camelia> rakudo-moar f59ce1: OUTPUT«False␤»

[04:52] <TimToady> I have found a bug!

[04:52] <TimToady> m: say "ö" ~~ m:m/o/

[04:52] <camelia> rakudo-moar f59ce1: OUTPUT«｢ö｣␤»

[04:53] <TimToady> m: say "o⃝" ~~ m:m/o/

[04:53] <camelia> rakudo-moar f59ce1: OUTPUT«False␤»

[04:53] <TimToady> m: say "o⃝" ~~ m:m/\w/

[04:53] <camelia> rakudo-moar f59ce1: OUTPUT«｢o⃝｣␤»

[04:56] <dalek> rakudo/nom: fc4bf6f | TimToady++ | src/core/Str.pm:

[04:56] <dalek> rakudo/nom: extend last mark to be like last case

[04:56] <dalek> rakudo/nom: 

[04:56] <dalek> rakudo/nom: I decided that repeating novelty combiners will likely be the more common

[04:56] <dalek> rakudo/nom: use of the construct than trying to tweak words from natural languages.

[04:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc4bf6f9d4

[04:58] <dalek> roast: f9d5b9d | TimToady++ | S05-modifier/samemark.t:

[04:58] <dalek> roast: tweak for samemark extension semantics

[04:58] <dalek> roast: 

[04:58] <dalek> roast: (also shows a bug in :ignoremark matching)

[04:58] <dalek> roast: review: https://github.com/perl6/roast/commit/f9d5b9d753

[05:08] <TimToady> m: say "o⃝" ~~ m:m:i/o/

[05:08] <camelia> rakudo-moar f59ce1: OUTPUT«chr codepoint cannot be negative␤  in block <unit> at /tmp/1T8Oc0sTEs:1␤␤»

[05:08] <TimToady> cool!

[05:12] <TimToady> j: say "o⃝" ~~ m:m:i/o/

[05:12] <camelia> rakudo-jvm e3c591: OUTPUT«Error while reading '/home/camelia/p6eval-token': No such file or directory at /home/camelia/rakudo-j-inst/bin/eval-client.pl line 10.␤»

[05:12] <TimToady> j: say "o⃝" ~~ m:m/o/

[05:12] <camelia> rakudo-jvm e3c591: OUTPUT«===SORRY!===␤java.lang.RuntimeException: ordbaseat NYI␤»

[05:13] <TimToady> m: nqp::ordbaseat("o⃝", 0).say

[05:13] <camelia> rakudo-moar fc4bf6: OUTPUT«-2␤»

[05:13] <TimToady> hah!

[05:14] <TimToady> m: nqp::ordbaseat("oö", 0).say

[05:14] <camelia> rakudo-moar fc4bf6: OUTPUT«111␤»

[05:14] <TimToady> m: nqp::ordbaseat("ö", 0).say

[05:14] <camelia> rakudo-moar fc4bf6: OUTPUT«111␤»

[05:20] *** yeahnoob_ joined
[05:22] *** csd_ joined
[05:23] *** yeahnoob left
[05:27] *** csd_ left
[05:31] *** AlexDaniel left
[05:33] *** n0tjack joined
[05:36] *** Ben_Goldberg joined
[05:37] *** n0tjack left
[05:38] *** yeahnoob_ left
[05:38] *** zengargoyle joined
[05:38] *** BenGoldberg_ joined
[05:38] *** BenGoldberg_ left
[05:39] *** ribasushi left
[05:39] *** raiph left
[05:39] *** BenGoldberg left
[05:39] *** yeahnoob joined
[05:41] *** Ben_Goldberg left
[05:45] <TimToady> m: $_ = "o⃨"; say Ss:mm/\w+ /foobar/;

[05:45] <camelia> rakudo-moar fc4bf6: OUTPUT«f⃨o⃨o⃨b⃨a⃨r⃨␤»

[05:46] <TimToady> ShimmerFairy: ^^

[05:46] <ShimmerFairy> cool :)

[05:46] <TimToady> m: $_ = "o⃨"; say Ss:mm/o+ /foobar/;

[05:46] <camelia> rakudo-moar fc4bf6: OUTPUT«o⃨␤»

[05:47] <TimToady> that's the bug diakopter++ and I are hunting on two ends of the same sofa...

[05:47] <TimToady> (the nqp::ordbaseat bug)

[05:49] *** yeahnoob left
[05:50] *** yeahnoob joined
[05:50] *** ribasushi joined
[06:02] <dalek> nqp: 8e5026c | TimToady++ | tools/build/MOAR_REVISION:

[06:02] <dalek> nqp: bump MoarVM to get ordbaseat patch

[06:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8e5026c483

[06:03] <dalek> rakudo/nom: d6f783b | TimToady++ | tools/build/NQP_REVISION:

[06:03] <dalek> rakudo/nom: bump NQP to get ordbaseat fix

[06:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d6f783bf3e

[06:05] *** empT left
[06:12] <TimToady> m: $_ = "o⃨"; say Ss:mm/o+ /foobar/;

[06:12] <camelia> rakudo-moar d6f783: OUTPUT«f⃨o⃨o⃨b⃨a⃨r⃨␤»

[06:12] <TimToady> \o/

[06:14] <dalek> roast: 7a89eb5 | TimToady++ | S05-modifier/samemark.t:

[06:14] <dalek> roast: faulty test is faulty, :m ain't :mm

[06:14] <dalek> roast: review: https://github.com/perl6/roast/commit/7a89eb5968

[06:17] *** dj_goku left
[06:18] *** dj_goku joined
[06:18] *** dj_goku left
[06:18] *** dj_goku joined
[06:29] *** empT joined
[06:30] *** telex left
[06:32] *** telex joined
[06:33] *** Actualeyes left
[06:34] *** n0tjack joined
[06:38] *** n0tjack left
[06:49] *** domidumont joined
[06:57] *** domidumont left
[07:07] *** darutoko joined
[07:13] *** zengargoyle left
[07:14] *** domidumont joined
[07:15] *** bjz joined
[07:16] <stmuk_> the SHA hash filenames are going to make debugging harder IMO

[07:16] <yoleaux> 2 Dec 2015 19:32Z <ZoffixW> stmuk_: sent you a  PR: https://github.com/stmuk/p6-Text-VimColour/pull/11

[07:17] <[Tux]> test             50000    22.732    22.621

[07:17] <[Tux]> test-t           50000    20.550    20.439

[07:17] <[Tux]> csv-parser       50000    26.298    26.187

[07:19] *** _nadim left
[07:21] <TimToady> jnthn: haven't thought much more about Rxx, but need to fix export of precedence traits, and that's no so far off from where we'd hang thunkme bits

[07:22] *** Actualeyes joined
[07:26] *** bjz left
[07:35] *** n0tjack joined
[07:39] *** esh joined
[07:39] *** n0tjack left
[07:39] *** rurban joined
[07:42] <nine> stmuk_: there is most probably a way to get better information for debugging despite using shas for the file names.

[07:42] <yoleaux> 01:02Z <Zoffix> nine: not sure how feasible it is, but it would be nicer if the precomp stuff happened in the OS's temp dir instead of .precomp. Currently, if I run prove in some dist's repo, I have to either list lib/.precomp in .gitignore or be careful not to make it part of my commit :) which is kinda annoying :)

[07:42] <yoleaux> 03:28Z <retupmoca> nine: https://github.com/rakudo/rakudo/pull/612 fixes my PERL6LIB issues

[07:43] <nine> .tell retupmoca excellent!

[07:43] <yoleaux> nine: I'll pass your message to retupmoca.

[07:45] *** baest left
[07:45] *** baest joined
[07:49] *** _mg_ joined
[07:49] *** csd_ joined
[07:49] *** sno joined
[07:53] *** bjz joined
[07:53] *** csd_ left
[07:54] <moritz> \o

[08:00] <moritz> m: sub a($a) { $a(); CATCH { default { say "default" } }; say 42 }; say a( -> { die } ) 

[08:00] <camelia> rakudo-moar d6f783: OUTPUT«default␤Nil␤»

[08:04] <nine> .tell Zoffix probably too late but for future reference: I syntax highlight my presentation slides by opening the file in vim which is running in KDE's konsole. Then I use konsole's "Save output as" to save it to an HTML file. That I copy&paste into LibreOffice.

[08:04] <yoleaux> nine: I'll pass your message to Zoffix.

[08:09] *** domidumont left
[08:11] *** abraxxa joined
[08:15] <moritz> nine: sounds like Text::VimColor would be easier to automate

[08:16] <moritz> s/to automate/for automation/

[08:20] <nine> moritz: of course :)

[08:20] *** dayangkun left
[08:21] *** dayangkun joined
[08:22] *** ely-se_ joined
[08:24] *** RabidGravy joined
[08:27] *** Actualeyes left
[08:31] <mrf_> morning

[08:34] *** roguelazer left
[08:34] *** skarn left
[08:35] *** _nadim joined
[08:35] *** n0tjack joined
[08:36] *** roguelazer joined
[08:36] *** skarn joined
[08:40] *** n0tjack left
[08:48] *** dakkar joined
[08:50] *** lustlife left
[08:50] *** lustlife joined
[08:51] <RabidGravy> morning

[08:54] *** xfix joined
[08:57] *** empT left
[09:21] *** zakharyas joined
[09:27] <jnthn> TimToady: OK, I leave it with you then :)

[09:27] <yoleaux> 01:40Z <lizmat> jnthn: in t/spec/S17-supply/syntax.t, add =finish at line 227, to reliably cause a SIGABRT after test 16

[09:27] <yoleaux> 01:40Z <lizmat> jnthn: looks like there's still some voodoo going on wrt to supply blocks, at least on OS X

[09:28] *** leont joined
[09:32] <RabidGravy> while we're on the subject of suppliy blocks, is it deliberate that e.g. "supply { react { whenever Supply.interval(1) { emit("something") } } }" doesn't work?

[09:34] <leont> Meh, debugger being broken right now doesn't help in figuring out the module loading issue I'm experiencing

[09:35] <moritz> leont: there's a RAKUDO_MODULE_DEBUG env variable that you can set to a true value; maybe that'll help?

[09:36] <leont> gdb tells me the hang is in the readline implementation as used by MVM_run_file, that doesn't make sense to me

[09:36] *** n0tjack joined
[09:37] *** aigan joined
[09:40] <leont> jnthn: the Proc::Async based part of my code now dies with «Unhandled exception in code scheduled on thread 6 Can only perform big integer operations on concrete objects"

[09:41] <leont> even --ll-exception doesn't give any more information than that

[09:41] *** n0tjack left
[09:43] <jnthn> RabidGravy: What would you expect that to do? The emit will bind to the react.

[09:44] <jnthn> Which doesn't support emitting

[09:44] <jnthn> Why do you need the react in there anyway? :)

[09:44] <RabidGravy> yeah, that's what I saw

[09:44] <jnthn> If you want to emit "something" every second you just supply { whenever Supply.interval(1) { emit "something" } }

[09:44] * jnthn should WTFM :)

[09:45] <RabidGravy> I ended up doing something familiar

[09:45] <RabidGravy> er similar

[09:46] <RabidGravy> (I actually didn't realise you could do a whenever there :)

[09:47] <jnthn> Search for whenever in src/core/Supply.pm for more exampls

[09:48] *** rindolf joined
[09:48] <leont> Not sure if my issue is CURLI related to IO related. I used to think the former, but gdb is confusing me :-s

[09:49] <leont> Another issue, this code just broke:

[09:49] <leont> $package.HOW.add_method: $package, $method, method () { return self.and($rule); };

[09:50] <leont> Anyone got a clue what changed?

[09:51] <leont> I'm getting a «Cannot invoke this object» error

[09:51] <RabidGravy> I actually did "Supply.on-demand( -> $p { Supply.interval(1).tap({ $p.emit(DateTime.now); });  })" because of not realising the whenever could be like that

[09:52] *** donaldh joined
[09:52] <jnthn> eww

[09:52] *** zakharyas left
[09:52] <jnthn> Supply.interval(1).map({ DateTime.now })

[09:53] <llfourn> m: class Foo {}; Foo.^add_method('bar',anon method { 'win'.say }); Foo.bar;

[09:53] <camelia> rakudo-moar d6f783: OUTPUT«win␤»

[09:53] <llfourn> leont: seems to work?

[09:53] *** yeahnoob left
[09:54] <moritz> you should .^compose after adding a method

[09:54] <jnthn> You ...yes :)

[09:54] <leont> Ah, I see

[09:54] <llfourn> oh ok thanks :)

[09:54] <moritz> otherwise the method caches are not updated

[09:55] <leont> compose on what exactly?

[09:55] <llfourn> won't it cache after the fallback?

[09:56] <jnthn> No

[09:56] <jnthn> It'll just invalidate and then slow-path all the lookups

[09:56] <leont> Adding $package.^compose makes it segfault :-o

[09:56] <llfourn> oh that's bad lol :)

[09:56] <llfourn> m: class Foo {}; Foo.^add_method('bar',anon method { 'win'.say }); Foo.^compose; Foo.bar;

[09:56] <camelia> rakudo-moar d6f783: OUTPUT«win␤»

[09:57] <jnthn> Also, (a) use augment, and (b) do it at BEGIN time (or (c) add "no precompilation" :))

[09:57] <moritz> leont: ... it shouldn't :-)

[09:57] <jnthn> SEGB is...urgh

[09:57] <RabidGravy> jnthn, but I don't want it to start until the resulting supply is tapped

[09:57] <jnthn> RabidGravy: It won't.

[09:57] <leont> I'm adding more than one method, in case that's relevant

[09:57] <leont> And I'm doing it in a BEGIN block

[09:57] <jnthn> RabidGravy: Supply.interval is already an on-demand supply

[09:57] <moritz> leont: you only have to compose at the end, and before you start calling methods

[09:57] *** empT joined
[09:57] <jnthn> RabidGravy: Mapping it stil leaves you with an on demand supply

[09:57] <llfourn> jnthn: good to know thanks.

[09:57] <RabidGravy> surely the map is a "tap"

[09:58] <jnthn> No

[09:58] <jnthn> Just like .map on a list isn't eager

[09:58] <jnthn> The only things that are a tap are .tap and .act (and whenever)

[09:58] <jnthn> .map just chains another step onto the supply pipeline

[09:59] <jnthn> You can build the pipeline with a load of operations

[09:59] <jnthn> Nothing starts untill you .tap

[09:59] <jnthn> And you get a fresh pipeline per tapping

[09:59] <jnthn> teaching, bbl :)

[09:59] <llfourn> is there a way to add a role with augment?

[09:59] <jnthn> augment class Foo does Bar { }

[09:59] <jnthn> really & :)

[09:59] <llfourn> ah nice

[10:00] <RabidGravy> gotcha, simplifies stuff immensely.  Have a totally false memory of what the code did

[10:01] *** leont left
[10:01] *** zakharyas joined
[10:01] <mrf_> jnthn: nine: dont worry about https://github.com/rakudo/rakudo/pull/609. Its clearly nonsense. Annoyingly I can't replicate the issue that this seemed to fix now so ...

[10:02] *** leont joined
[10:02] *** empT left
[10:03] *** n0xff left
[10:05] *** leont_ joined
[10:05] <leont_> internet-connection--

[10:06] <dalek> roast: fab0120 | lizmat++ | S32-str/samemark.t:

[10:06] <dalek> roast: Fix samemark test

[10:06] <dalek> roast: 

[10:06] <dalek> roast: In light of the comment TimToady made in commit message fc4bf6f9d43cf3a82 :

[10:06] <dalek> roast: 

[10:06] <dalek> roast: I decided that repeating novelty combiners will likely be the more common

[10:06] <dalek> roast: use of the construct than trying to tweak words from natural languages.

[10:06] <dalek> roast: 

[10:06] <dalek> roast: And the fact the test was written *before* that, I assumed the combiner

[10:06] *** leont left
[10:06] <dalek> roast: was to be repeated, rather than ignored for subsequent characters.

[10:06] <dalek> roast: review: https://github.com/perl6/roast/commit/fab0120dac

[10:06] <leont_> Interesting. I got the hang now without loading a second module, but when running under gdb…

[10:08] <leont_> http://paste.scsys.co.uk/502339

[10:08] *** woolfy joined
[10:09] *** salva left
[10:09] <leont_> It's epolling when I think it should only read the file. Not that I can tell what it's epoll()ing on for real.

[10:12] *** woolfy left
[10:12] *** bjz left
[10:14] <leont_> I remember something about synchronous IO changing recently, I'm guessing it to be in that corner

[10:14] *** salva joined
[10:18] <leont_> Interesting. «$?CLASS.^compose» doesn't segfault, while «$package.^compose» does

[10:18] *** s_kilk joined
[10:18] <leont_> With $package = $?CLASS being just a few lines above

[10:18] *** espadrine joined
[10:19] <leont_> But even without the segfault, the compose doesn't fix the exception that I'm seeing

[10:19] <moritz> leont_: try $package := $?CLASS

[10:20] <moritz> leont_: otherwise you're re-composing class Scalar, maybe

[10:21] <leont_> All giving that same error

[10:21] <leont_> Getting rid of the BEGIN block seems to do the trick

[10:24] <leont_> Still, it should work, and not give segfaults

[10:25] <leont_> To me, when dynamically generating half of my class a begin block is a sensible place. No idea how it interacts with precompilation though, would guess the issue to be there.

[10:27] *** bjz joined
[10:27] <dalek> roast: ed16d38 | lizmat++ | S17-supply/ (3 files):

[10:27] <dalek> roast: Make sure we die for the right reason

[10:27] <dalek> roast: review: https://github.com/perl6/roast/commit/ed16d380a7

[10:29] *** s_kilk left
[10:32] <dalek> roast: a56f0f4 | lizmat++ | S17-supply/interval.t:

[10:32] <dalek> roast: Give some more time to fail to prevent flapping

[10:32] <dalek> roast: review: https://github.com/perl6/roast/commit/a56f0f4bf5

[10:33] *** brrrt joined
[10:33] <donaldh> psch: did you have a fix for nqp::mkdir on jvm ?

[10:33] * donaldh is not sure what timezones psch hangs out in

[10:37] *** n0tjack joined
[10:39] *** empT joined
[10:42] *** n0tjack left
[10:43] *** empT left
[10:44] *** leont_ left
[10:47] *** dayangkun left
[10:51] <dalek> roast: a04df5f | lizmat++ | S17-supply/watch-path.t:

[10:51] <dalek> roast: We can no longer .done a Supply

[10:51] <dalek> roast: 

[10:51] <dalek> roast: We can only .done a Supplier.  But the Supplier is hidden in

[10:51] <dalek> roast: IO::Notification.watch-path.  So I can only hope that closing the final tap

[10:51] <dalek> roast: on the Supply given by IO::Notification.watch-path *will* actually

[10:51] <dalek> roast: .done the Supplier.

[10:51] <dalek> roast: 

[10:51] <dalek> roast: This unbreaks this test-file on OS X.  Other OS's are currently *not* being

[10:51] <dalek> roast: tested: tests for other platforms welcome!

[10:51] <dalek> roast: review: https://github.com/perl6/roast/commit/a04df5f3ea

[10:53] <lizmat> m: say END 42   # feels to me this should fail, AKA the default value of an END block before it is run, should be a Failure

[10:53] <camelia> rakudo-moar d6f783: OUTPUT«Nil␤»

[10:54] <donaldh> lizmat++

[10:54] * donaldh was going to start looking at that

[10:57] *** empT joined
[11:02] *** empT left
[11:02] *** aindilis left
[11:03] *** km3 left
[11:03] *** aindilis joined
[11:13] * grondilu tries to bootstrap panda

[11:15] <dalek> rakudo/nom: 09a3e3d | lizmat++ | src/core/Supply.pm:

[11:15] <dalek> rakudo/nom: Supply.on-demand/from-list must have a Supply:U

[11:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/09a3e3deae

[11:19] *** snarkyboojum joined
[11:20] <grondilu> oh it worked this time.  Good job guys.

[11:21] <RabidGravy> so is it safe to rakudobrew my laptop now, so I can start testing everything?

[11:21] <grondilu> oh bootstrap worked, but exectution still fails:

[11:21] <grondilu> ===SORRY!===

[11:21] <grondilu> Could not find Shell::Command:ver<True>:auth<True>:api<True> in:

[11:22] *** nadim joined
[11:22] *** _nadim left
[11:25] *** pecastro_ joined
[11:28] <mrf_> grondilu: I was having that same issue yesterday on a fresh panda install.

[11:28] <arnsholt> nine: I've got a patch that's almost, but not quite working. Could you have a look at it if I push it to a branch?

[11:29] * grondilu copies Shell::Command, File::Find and JSON::Fast manually in the lib directory and retries running panda

[11:29] *** abraxxa left
[11:30] *** _mg_ left
[11:30] <brrrt> go is really the anti-perl6: http://www.thedotpost.com/2015/11/rob-pike-simplicity-is-complicated

[11:30] <brrrt> in an interesting way, i think

[11:31] <brrrt> or maybe the anti-C#

[11:32] *** pecastro_ left
[11:34] *** abraxxa joined
[11:34] *** RabidGravy left
[11:36] <lizmat> afk until late afternoon&

[11:37] <donaldh> ugh, rakudo not building on jvm: Error while constructing error object:Could not locate compile-time value for symbol X::Undeclared::Symbols

[11:38] *** n0tjack joined
[11:41] <llfourn> brrrt: watching now. Interesting so far. Thanks.

[11:41] *** Skarsnik joined
[11:43] *** n0tjack left
[11:43] <brrrt> yw :-)

[11:45] <Juerd> Where is S32?

[11:46] <Juerd> Oh, it's a draft. Found it just after asking.

[11:46] <Juerd> Still wondering in which repo it is though :)

[11:48] <llfourn> brrrt: so far I feel where I disagree with him is that features make code more complicated. For example the traits and MOP features of p6 made code more simple IMO.

[11:48] <llfourn> maybe he means syntactical features

[11:48] <daxim> I strain to read https://perl6advent.wordpress.com/ and it's the fault of the rule .site { width: 744px; }

[11:48] <llfourn> but being against map seems a bit odd. How is map more complicated or even slower than for at a low level.

[11:50] *** pyrimidi_ joined
[11:50] <brrrt> map implies a dynamic function call, unless you compile-time transform it

[11:50] <brrrt> which is slower than a for loop

[11:51] <llfourn> mmm yes you are right normally map is like that

[11:51] <brrrt> the thing with go is, i think, that i've seen utterly lousy programmers produce utterly lousy code, *and it was still readable and workable*

[11:52] *** pyrimidine left
[11:52] <llfourn> I never used go so I don't know. Everyone who does seems to like it. I'm glad p6 stole some of its concurrecny dieas.

[11:52] *** xfix left
[11:53] <llfourn> ideas*

[11:53] <brrrt> i could still work with code written by people, with whom i would have vicious code style discussions otherwise

[11:53] <brrrt> because they think very differently from me, and in a language like perl6, that works out to very different code

[11:53] <timotimo> donaldh: does it show you what symbols were undeclared? it should try to stringify the list for you

[11:53] <yoleaux> 02:30Z <dj_goku> timotimo: is there a reason against using say git submodule vs copy/pasting code into the panda repo?

[11:53] <brrrt> in go, it works out to mostly-the-same

[11:54] <timotimo> wow, brrt is extra-r today

[11:54] <llfourn> i see.

[11:54] <brrrt> yes, i overslept timotimo :-)

[11:54] <brrrt> so that explains, i guess

[11:55] <brrrt> can i go on record and state that illumos-on-qemu is a total and huge pain, and no fun at all

[11:59] <moritz> brrrt: you have been officially heard :-)

[12:01] *** nige1 joined
[12:02] *** _mg_ joined
[12:02] <donaldh> timotimo: Error while compiling, type X::Undeclared::Symbols

[12:02] <donaldh>   type_suggestion: (unstringifiable object)

[12:02] <donaldh>   post_types: (unstringifiable object)

[12:02] <donaldh>   unk_routines: (unstringifiable object)

[12:02] <donaldh>   unk_types: (unstringifiable object)

[12:02] <donaldh>   routine_suggestion: (unstringifiable object)

[12:03] *** bpmedley joined
[12:04] <nige1> currently preparing a Perl 6 talk for a general techie audience - and need a little help with this Rosetta Code example: http://rosettacode.org/wiki/Inverted_index#Perl_6

[12:05] <nige1> I'm unsure about the relationship of the cross-product meta operator in line 3

[12:05] <nige1> to populating "%norm" - any ideas?

[12:06] <moritz> m: say ('file' X=> <one two three words>).perl

[12:06] <camelia> rakudo-moar 09a3e3: OUTPUT«(:file("one"), :file("two"), :file("three"), :file("words")).Seq␤»

[12:06] <brrrt> thanks moritz :-)

[12:06] <moritz> nige1: that's bascially what it does

[12:07] <nige1> hmm - ok - maybe I need to update my version of Rakudo

[12:07] <timotimo> donaldh: oh god damn :(

[12:07] <donaldh> yup

[12:07] <moritz> nige1: it's a cross-product with a one-element list, so it's equivalent to  ($file xx *) Z=> @list

[12:07] <donaldh> currently digging into the NQP_VERBOSE_EXCEPTIONS stack trace

[12:08] <nige1> thanks Moritz 

[12:08] <nige1> moritz++

[12:08] <nige1> :-)

[12:10] <moritz> nige1: you're welcome

[12:12] <Juerd> π is implemented in rakudo, but not in S32. Which one is off?

[12:13] <Juerd> (S32 only describes pi, not π)

[12:14] <moritz> Juerd: I think S32 should be updated

[12:15] *** kaare_ joined
[12:15] <Juerd> I agree and will add tau while I'm at it

[12:16] <Juerd> Oh, and I don't understand how 'pi' is available in the language, if it's declared as "my constant pi" in Num

[12:17] *** ely-se_ left
[12:18] <timotimo> the core setting is semantically an outer scope to your program

[12:18] <timotimo> that's how things that are declared "my" show up in user code

[12:19] *** empT joined
[12:19] *** xfix joined
[12:19] <arnsholt> The short answer is "dark and inscrutable magics"

[12:20] <timotimo> haha, it's not that terrible :)

[12:20] <arnsholt> The longer answer is that the setting is compiled in a special way such that there's basically what amounts to a hole at the end

[12:20] <arnsholt> Then, when you compile normal code, your code is plonked into the hole at the end of the setting, and the whole aggregated shebang is what is *actually* run

[12:21] <arnsholt> Thus making the setting an outer lexical scope of user code, as timotimo++ explained

[12:21] <timotimo> yeah, we have a thing called {YOU_ARE_HERE}

[12:23] *** empT left
[12:28] <llfourn> is there a way to turn precompilation off?

[12:28] <timotimo> mount your filesystem read-only

[12:29] <llfourn> timotimo: thanks

[12:29] *** zakharyas left
[12:30] <timotimo> sorry ;)

[12:30] <timotimo> haven't dug into the code at all yet

[12:30] <donaldh> timotimo: ah, Uni getting used in Str.pm on JVM.

[12:33] <donaldh> TimToady's commits from last night

[12:34] <Woodi> arnsholt: can it be reused for fast interpreter startup ? :) something like (historical) sticky-bit or proces cloning ?

[12:35] <timotimo> donaldh: good catch; could be made to work with #?rakudo.jvm or whatever the syntax is

[12:36] * donaldh is not sure how rakudo jvm works without Uni.

[12:36] *** pmurias joined
[12:36] <donaldh> *worked

[12:37] <timotimo> well, it doesn't yet have the NFG stuff at all, which is what Uni came with IIRC

[12:37] <timotimo> of course the JVM has NFD NFC NKFC and NKFD algorithm implemented *somewhere* ... right?

[12:37] <donaldh> yep, just surprised that everything else existed without ever referencing Uni.

[12:37] <timotimo> ah, right

[12:38] <donaldh> JVM just uses java.lang.String

[12:39] <donaldh> doesn't have nqp::*codes 

[12:39] *** n0tjack joined
[12:42] <arnsholt> Woodi: I have no idea. Maybe?

[12:42] <Juerd> timotimo: Wow, core being a lexical outer scope is a weird concept :)

[12:42] <timotimo> Juerd: yeah, it's kind of like the "hollow earth" thing :)

[12:42] <donaldh> Juerd: also known as prelude in other languages.

[12:43] <arnsholt> The implementation is a bit odd, but it's pretty natural when you think about it

[12:43] <Juerd> At the same time, not so weird at all. I've been using eval "my \$foo = ...; sub { ... }" in Perl 5 all the time... :)

[12:43] *** n0tjack left
[12:44] <pmurias> A prelude in other languages works almost the same way

[12:44] <brrrt> i would assume that we just chain-point the compiled frame up to the setting? that would seem to be my natural guess...

[12:44] *** _mg_ left
[12:44] <brrrt> on the other hand, i'm not sure when the setting environment is then loaded into the compiler

[12:47] <timotimo> Woodi: for startup time improvements we already implement "lazy deserialization", which is definitely a step in the right direction.

[12:47] <Woodi> timotimo: but everything is loaded from disk every time ?

[12:47] <nige1> hmm - I've updated to latest rakudo and entry is no worky -> http://rosettacode.org/wiki/Inverted_index#Perl_6

[12:48] <timotimo> if i remember correctly, the .moarvm file is mmapped

[12:48] <timotimo> so multiple instances of moar will share it. i think.

[12:48] <nige1> getting a "trailing item in Hash.push" error

[12:48] <nige1> s/error/warning/

[12:49] <Woodi> timotimo: no one blogged it ! ;)

[12:49] <timotimo> hehe.

[12:51] *** lucasb joined
[12:52] *** snarkyboojum left
[12:52] *** grc joined
[12:53] *** grc left
[12:56] <llfourn> so I'm trying to debug some precomp problems with some code. I put BEGIN { note 'loading Foo' }; as the first line in many files. I'm seeing "loading Foo" more than once.

[12:56] <llfourn> that's a bug right?

[12:57] <llfourn> rakudo should only try and compile each file once

[12:57] <llfourn> it doesn't seem to do an infinite loop load but I eventually see something like: Constraint type check failed for parameter '$precomp-id'

[12:58] <llfourn> or some other obtuse error

[12:59] *** empT joined
[13:00] * timotimo will be AFK (well, probably just away from devices i could develop with) for ~3 hours

[13:02] <Juerd> Heh, so I thought "might as well add tau while I'm there", when updating S32 to include the unicode constant for pi...

[13:03] <Juerd> But with spec, spectests, and implementation in different repositories... the simple change winds up being 3 pull requests. Kind of funny :)

[13:03] *** empT left
[13:08] <Zoffix> .botsnack

[13:08] <yoleaux> :D

[13:08] <yoleaux> 08:04Z <nine> Zoffix: probably too late but for future reference: I syntax highlight my presentation slides by opening the file in vim which is running in KDE's konsole. Then I use konsole's "Save output as" to save it to an HTML file. That I copy&paste into LibreOffice.

[13:08] <synbot6> om nom nom

[13:09] <MadcapJake> Zoffix: I forgot to use .tell but there's also this: https://github.com/atom/highlights which would work with the grammar json from language-perl6fe

[13:10] <Zoffix> Thanks, I'll play around with it later.

[13:10] <lucasb> Juerd: I don't understand much maths. Is tau equals 2*pi?

[13:10] <MadcapJake> lucasb: yeah

[13:10] <Zoffix> There's a tau module in the ecosystem\

[13:10] <MadcapJake> lucasb: it's a much easier constant to work with because so often you have to use 2*pi anyways

[13:10] <ilmari> https://www.youtube.com/watch?v=jG7vhMMXagQ

[13:11] <lucasb> ok, thanks :)

[13:11] <Zoffix> Tau is heresy! :) Who doesn't like pie? :P

[13:11] <moritz> pi vs. tau, the ultimate bikeshedding war

[13:11] <Zoffix> hehe

[13:11] <MadcapJake> lol

[13:11] <brrrt> .tell nine why not pygmentize or Text::VimColour?

[13:11] <yoleaux> brrrt: I'll pass your message to nine.

[13:12] <MadcapJake> does pygments have perl6 support?

[13:13] <brrrt> hmm, no, i don't think it does

[13:13] <nadim> Hi given ((a 1) (b 2)) , I want to "dereference" the outer parenthesis only. .flat gives me a 1 b 2 but I want (a 1) (b 2). how do I do that and wgere is the documenatt 

[13:13] <nadim> documentation so I learn instead for fooling around

[13:13] <Zoffix> MadcapJake, brrrt it does, but it's not that good

[13:14] *** ely-se joined
[13:14] <Zoffix> nadim, where did you get ((a 1) (b 2)) from?

[13:14] <MadcapJake> yeah it's not listed, I've written a Pygments lexer before, I'll see if I can get my language-perl6fe converted over (there regex engine is a bit different though)

[13:14] <Zoffix> m: say |((a 1), (b 2))

[13:14] <camelia> rakudo-moar 09a3e3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tZgCjFxLgk␤Undeclared routines:␤    a used at line 1␤    b used at line 1␤␤»

[13:14] <nadim> Zoffix: map

[13:14] <Zoffix> m: say |(('a', 1), ('b', 2))

[13:14] <camelia> rakudo-moar 09a3e3: OUTPUT«(a 1)(b 2)␤»

[13:14] <Zoffix> nadim, mapping what?

[13:14] <nadim> ok, I tought | and flat where synnyms

[13:15] <Zoffix> m: say flat (('a', 1), ('b', 2))

[13:15] <camelia> rakudo-moar 09a3e3: OUTPUT«(a 1 b 2)␤»

[13:15] <nadim> a list and returning 2 elements

[13:15] <Zoffix> Oh, guess not.

[13:15] <Zoffix> I think | is called a "slip"

[13:15] <Juerd> moritz: tau/pi isn't bikeshedding if you provide both: timtowtdi!

[13:15] <nadim> OK, thanks, I'll slip a bit then

[13:17] *** n0tjack joined
[13:19] <MadcapJake> nadim: | is flatten inside of a signature (argument list) but outside of that it's a slip (which is kinda like flatten) http://doc.perl6.org/type/Slip

[13:21] <Zoffix> Does anyone know what time the advent calendar runs on? If I schedule for 00:00, what timezone is it?

[13:21] <MadcapJake> Zoffix: heh, I couldn't figure that out either, I put 0:00 for mine though.

[13:22] *** n0tjack left
[13:22] *** YP-QMUL-W left
[13:22] <brrrt> MadcapJake: i and many others would be much obliged :-)

[13:23] <gfldex> Zoffix: in the post list it says: in 11 hours scheduled

[13:23] <moritz> Zoffix: I think it's UTC or GMT+1

[13:23] <MadcapJake> brrrt: ok I'll give it a go then! :

[13:24] <Zoffix> Thanks\

[13:25] <brrrt> thanks :-)

[13:25] *** Actualeyes joined
[13:26] *** YP-QMUL-W joined
[13:26] *** n0tjack joined
[13:27] *** pwd_ joined
[13:28] <MadcapJake> Ugh I've committed a grammar sin in my advent post: s/it's/its/

[13:28] *** _mg_ joined
[13:29] * Zoffix sends MadcapJake to grammar-hell

[13:29] <MadcapJake> noooooo!

[13:31] * brrrt brings MadcapJake back to grammar-purgatory

[13:31] <Skarsnik> English grammar is a hell already

[13:31] <MadcapJake> lol

[13:31] <brrrt> as long as you confess your sins, you will be redeemed

[13:32] <MadcapJake> I confess and I have done my penance I swear!

[13:32] <Zoffix> James, while John had had "had," had had "had had"; "had had" had had a better effect on the teacher.

[13:32] <Zoffix> https://en.wikipedia.org/wiki/James_while_John_had_had_had_had_had_had_had_had_had_had_had_a_better_effect_on_the_teacher

[13:32] <xfix> "This Seq has already been iterated, and its values consumed"

[13:33] <xfix> What does that even mean? I'm trying to do scanl basing on zip sum.

[13:33] * Zoffix shakes head at the ginormous Wikipedia ad that says they'll never run ads

[13:33] <xfix> And the simple example works: [\Z+] [(1, 2), (3, 4), (3, 2), (5, 4)]

[13:33] <xfix> However, [\Z+] '^v^v^v^v^v'.comb.map:{{'>' => (0, 1), '<' => (0, -1), '^' => (1, 0), 'v' => (-1, 0)}{$_}} doesn't.

[13:33] <brrrt> it's not an ad if it's begging Zoffix

[13:33] <moritz> MadcapJake: you can still change the post

[13:33] <Zoffix> heh

[13:33] <xfix> (I'm trying to do http://adventofcode.com/day/3, by the way)

[13:33] <brrrt> :-P

[13:33] <Zoffix> That ad is larger than my arm!

[13:34] <MadcapJake> moritz: I did :)

[13:34] <MadcapJake> Zoffix: I closed that ad a few days ago and it no longer displays for me.

[13:35] <Zoffix> I closed it a few days ago and it still displays for me

[13:35] <Zoffix> You probably never restarted your browser :P

[13:35] *** vytas left
[13:35] <MadcapJake> weird, no i do!

[13:36] <MadcapJake> i open my browser every morning, but it saves my session, so maybe it keeps the cookie or something

[13:36] *** zakharyas joined
[13:37] <xfix> perl6: say [\Z+] '^v^v^v^v^v'.comb.map:{{'>' => (0, 1), '<' => (0, -1), '^' => (1, 0), 'v' => (-1, 0)}{$_}} 

[13:37] <Skarsnik> xfix, I don't get this, there is no time limit? it's infinite? x)

[13:37] <camelia> rakudo-moar 09a3e3: OUTPUT«This Seq has already been iterated, and its values consumed␤(you might solve this by addding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at /tmp/tmpfile:1␤␤»

[13:37] <camelia> ..rakudo-jvm e3c591: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/tmpfile:1␤␤»

[13:37] <xfix> Hm, I get a hint about .cache...

[13:37] <Zoffix> Hm. Weird. Yesterday I had a different editor when I was writing my article. It wasn't a narrow landing strip and I could switch to raw HTML without having to scroll up

[13:38] <mrf_> Skarsnik: If you sign up you get a specific input.

[13:38] <Skarsnik> Oh make sense, thx

[13:38] <Zoffix> Ah, firgured it out. You need to go to "wp admin" 

[13:39] <mrf_> Skarsnik: or santa gets drunk on milk and cookies at some random point

[13:40] *** vytas joined
[13:40] *** n0tjack left
[13:41] *** n0tjack joined
[13:42] <Zoffix> "Saw 1 occurrence of deprecated code. Method chars-supply (from IO::Socket::Async) seen at: spy-bot.pl6, line 9 Please use Supply instead."

[13:42] <Zoffix> huh?

[13:43] <moritz> Zoffix: iirc you now pass the :bin or :binary or whatever to .new()

[13:43] <Zoffix> I don't have new: https://gist.github.com/zoffixznet/b2a09bc9e3a33c91a865

[13:43] <moritz> ah right

[13:44] <moritz> .Supply() instead of .chars-supply

[13:44] <moritz> and .Supply(:bin) instead of .bytes-supply

[13:44] <Zoffix> ah, k. moritz++

[13:49] <Juerd> How do you alias a method? &connect := &new isn't allowed...

[13:52] <moritz> Juerd: I'm not sure we have something pretty for it, but you can always use the MOP

[13:52] <Juerd> If it's not pretty, I'll do without the alias for now...

[13:52] <moritz> Juerd: ::?CLASS.^add_method('alias-name', ::?CLASS.^find_method('old-name'))

[13:53] <brrrt> that's pretty much as evil, as it should be

[13:53] <gfldex> m: class A {method m(){}}; my $m1 := A.^methods[0]

[13:53] <camelia> rakudo-moar 09a3e3: ( no output )

[13:57] <Zoffix>  /j #evil

[13:57] * Zoffix blushes

[13:57] *** zakharyas left
[13:57] <Zoffix> To give context: I'm writing a spy-themed bot...

[13:57] <Zoffix> :)

[13:58] *** Ven joined
[13:59] <Woodi> Zoffix: yes, Wikipedia is amazing. by now every goverment should sponsor it...

[13:59] *** empT joined
[13:59] <Ven> o/, #perl6.

[13:59] <Zoffix> \o

[13:59] <Woodi> hallo Ven :)

[14:00] <nadim> What's the status of local variables? and is it possible to localize a hash entry?

[14:00] <Skarsnik> moritz, should I merge my PR for DBIish or should I wait for all the curli stuff get fixed so DBIish build again? x)

[14:00] <DrForr> o/' They call it Spy Hard / You're watching Spy Hard / It's the theme to Spy Haaaaaaaaaard o/'

[14:00] <moritz> Skarsnik: please wait 'til it's fixed

[14:02] <jnthn> m: my %h = foo => 42; { temp %h<foo> = 69; say %h<foo> }; say %h<foo>

[14:02] <camelia> rakudo-moar 09a3e3: OUTPUT«69␤42␤»

[14:02] <jnthn> nadim: ^^

[14:02] *** cdg joined
[14:02] <Zoffix> Why isn't this matching? 

[14:02] <Zoffix> m: my $channel = '#perl6-recon';  say so ':Zoffix!~Zoffix@unaffiliated/zoffix PRIVMSG #perl6-recon :Test' ~~ /^':' <-[:]>+ 'PRIVSMG ' $channel ' :' (.+)/

[14:02] <camelia> rakudo-moar 09a3e3: OUTPUT«False␤»

[14:04] <moritz> m: my $channel = '#perl6-recon';  say so ':Zoffix!~Zoffix@unaffiliated/zoffix PRIVMSG #perl6-recon :Test' ~~  /^':' <-[:]>+ 'PRIVSMG '/

[14:04] <camelia> rakudo-moar 09a3e3: OUTPUT«False␤»

[14:04] <moritz> m: my $channel = '#perl6-recon';  say so ':Zoffix!~Zoffix@unaffiliated/zoffix PRIVMSG #perl6-recon :Test' ~~  /^':' <-[:]>+ 'PRIVSMG'/

[14:04] <camelia> rakudo-moar 09a3e3: OUTPUT«False␤»

[14:04] <moritz> m: my $channel = '#perl6-recon';  say so ':Zoffix!~Zoffix@unaffiliated/zoffix PRIVMSG #perl6-recon :Test' ~~  /^':' <-[:]>+ /

[14:04] <camelia> rakudo-moar 09a3e3: OUTPUT«True␤»

[14:04] <Juerd> The whole new/BUILD thing is incredibly frustrating. I don't understand what goes where, I keep running into errors that I can't explain and can only fix by trial and error, and it really feels that Perl 6 here makes the easy things very hard, and sometimes even impossible.

[14:04] *** ir2ivps4__ left
[14:04] <Skarsnik> ' PRIVMSG' maybe?

[14:04] <jnthn> Becuse you typo'd PRIVMSG and PRIVSMG in the regex

[14:04] <Zoffix> I don't get it

[14:04] <Zoffix> -_-

[14:04] <Zoffix> jnthn++

[14:05] <Zoffix> And that's why I don't work at a nuclear reactor :P

[14:05] <Juerd> I have thus far not succesfully been able to write any custom constructor or even something that properly initializes my objects.

[14:05] <jnthn> Juerd: You only write a new if you want to change the interface for construction to be something other than taking named params

[14:05] <jnthn> You write a submethod BUILD to initialize attributes

[14:05] <nadim> jnthn: great, thank you. Are you still hanging around in Lund?

[14:05] *** empT left
[14:06] <jnthn> nadim: No, I live in Prague nowadays

[14:06] <Juerd> I had a submethod BUILD, and I wanted to add a call to .connect in there, so I did. Result: everything broke

[14:06] <Skarsnik> Zoffix, why not simply split on blank for the first 2?

[14:06] <nadim> Lucky you, you are not missing on the great weather ;)

[14:06] <Juerd> So, okay, I'll write my own 'new' method and see what happens... I get error messages about passing 1 parameter when more were expected. No idea where this 1 parameter is, because everything passes 2 or 3.

[14:06] <jnthn> Well, I'm up in Skellefteaa teaching this week, so I'm moslty missing out on the great sun ;)

[14:07] <jnthn> The invocant counts as a parameter.

[14:07] <Juerd> So I hard-code the values, for now, and move on. Now, it turns out that my custom 'new' can't bless, because $!foo no longer works in BUILD's signature

[14:07] <Zoffix> Skarsnik, first 2 what?

[14:07] <jnthn> Huh?

[14:07] * moritz wouldn't even know how to pronounce Skellefteaa, much less how to get there :-)

[14:07] <Juerd> jnthn: I'm passing 2 or 3, depending on whether you count the invocant. But it's complaining I'm passing only 1 thing. I have no code at that point that passes 1 thing.

[14:08] <Juerd> I'm not specifically crying for help, I'm hoping that there will be a simpler way of doing the easy things.

[14:08] <Skarsnik> Zoffix, If i remember right IRC stuff is separated with blank until you get the command

[14:08] <jnthn> I don't tend to find it problematic, I guess it's just getting the right mental model of how construction works

[14:09] <Juerd> jnthn: I find having my defaults in 3 different places highly problematic.

[14:09] * jnthn thought there was a doc that explained it fairly well somewhere

[14:09] <Juerd> Some defaults are in "has", some are in "BUILD"'s signature, and some I have to put in BUILD's body.

[14:09] <jnthn> Then...put them all in one place? :)

[14:09] <Juerd> The only place where they can all be, is in BUILD, but not in its signature

[14:10] <jnthn> What keeps you from putting them in the signature?

[14:10] <Skarsnik> build override the one in has if I remember correctly, there was a ticked about it? (or has it been fixed?)

[14:10] <jnthn> Skarsnik: If you touch the thing in BUILD then yeah, you initlaized it, so the one in has will be ignored

[14:10] <Juerd> jnthn: Some are private.

[14:11] <Juerd> Mostly I don't really understand why you can put defaults in 'has', but not if you use the same thing in BUILD

[14:11] *** YP-QMUL-W left
[14:11] <jnthn> m: class C { has $!a; submethod BUILD(:$!a) { }; method m { say $!a } }; C.new(a => 42).m

[14:11] <camelia> rakudo-moar 09a3e3: OUTPUT«42␤»

[14:11] <jnthn> m: class C { has $!a = 3; submethod BUILD(:$!a) { }; method m { say $!a } }; C.new(a => 42).m

[14:11] <camelia> rakudo-moar 09a3e3: OUTPUT«42␤»

[14:11] <jnthn> m: class C { has $!a = 3; submethod BUILD(:$!a) { }; method m { say $!a } }; C.new().m

[14:11] <camelia> rakudo-moar 09a3e3: OUTPUT«(Any)␤»

[14:12] <jnthn> Like that?

[14:12] <jnthn> m: class C { has $!a; submethod BUILD(:$!a = 3) { }; method m { say $!a } }; C.new().m 

[14:12] <camelia> rakudo-moar 09a3e3: OUTPUT«3␤»

[14:12] <jnthn> m: class C { has $!a; submethod BUILD(:$!a = 3) { }; method m { say $!a } }; C.new(a => 42).m 

[14:12] <camelia> rakudo-moar 09a3e3: OUTPUT«42␤»

[14:12] <jnthn> Can just move the default to the BUILD sig, though.

[14:12] <Juerd> Yes, like that

[14:13] *** Ven left
[14:13] <Juerd> That the ' = 3' is just ignored without warning makes it seem like a somewhat useless feature.

[14:13] <jnthn> How is it ignored?

[14:13] <jnthn> It was used

[14:13] <Juerd> Same for objects... has $!buf = Buf.new doesn't really work

[14:13] <Juerd> 15:11 < jnthn> m: class C { has $!a = 3; submethod BUILD(:$!a) { }; method m { say $!a } }; C.new().m

[14:13] <Juerd> 15:11 < camelia> rakudo-moar 09a3e3: OUTPUT«(Any)␤»

[14:13] <jnthn> Yes, I said, you need to put it in the signature in that case.

[14:14] <Juerd> Yes, so the one in 'has' is ignored.

[14:14] <Juerd> Putting it in the signature feels like a work-around, because now you have your defaults in 2 places

[14:14] <jnthn> Why?

[14:14] <Juerd> And that becomes 3 if you also have objects that you want to instantiate

[14:14] <jnthn> If you put it in the signature, why would you also put it on the attribute too?

[14:14] <Juerd> Defaults for attributes that aren't in BUILD => has

[14:15] <Juerd> Defaults for attributes that are in BUILD => BUILD's signature

[14:15] <Juerd> Defaults for attributes that are objects => BUILD's body

[14:15] * jnthn doesn't get the last one at all...you can instantiate objects in a signature defualt or a has initializer

[14:15] <Juerd> It's not about "if you have it at B, why also at A?", but about wanting everything at either A, B, or C, but not spread over different places of the code

[14:16] <Juerd> I'll try .new in 'has' again, but when I used it previously, it was just ignored and I was left with a type object.

[14:17] <Juerd> That works now

[14:17] <Juerd> Might have been a temporary bug, or some other mistake

[14:17] <jnthn> I guess the other option we have is to introduce a discontinuity in the signature binder that doesn't bind the automatic default value to an attribute

[14:17] *** raiph joined
[14:17] <jnthn> So :$!a would never assign to $!a if nothing is passed, which would be differnet to :$a which gets Any

[14:18] <jnthn> That'd fix it, though maybe be differently surprisng.

[14:18] <Juerd> If a default was already specified, I'd expect that to be carried over to other places, so after "has $!foo = 3;" I'd expect "submethod BUILD ($!foo)" to have an implicit "= 3" there, or at least warn me that the other one's now no longer useful.

[14:19] <Juerd> Having them in two places bothers me, but it's not really a big problem. What is, is that the other default is overwritten and it takes time to debug that.

[14:19] <jnthn> Well, it's a lang design question by this point, so...for TimToady :)

[14:20] <Juerd> As for connecting to the socket in the constructor, I can't get that working.

[14:20] <Juerd> So I'll keep the .new, then .connect for now.

[14:20] <Juerd> Wanted to combine them because there's no good reason to have a non-connected object for something that represents a connection :)

[14:23] *** bpmedley left
[14:23] <Juerd> TimToady: Can BUILD get either implicit defaults on instance attributes that are in the signature, or if not, a warning that has-defaults will be ignored/overwritten? See discussion ^

[14:24] *** sno left
[14:25] <jnthn> teaching again &

[14:25] <Juerd> Have fun :)

[14:28] *** ir2ivps4 joined
[14:30] *** ely-se left
[14:30] *** brrrt left
[14:31] <Juerd> jnthn: Ah, found why the 'has' default wasn't useful for objects: they're created after my BUILD is run, so not available in BUILD yet.

[14:31] <sergot> is there any fast solution to get only odd/even-indexed elements in an array?

[14:32] *** abraxxa left
[14:32] <sergot> I mean, like, every second element of an array

[14:33] *** zengargoyle joined
[14:33] <Juerd> sergot: @foo[0, 2 ... *] and @foo[1, 3 ... *]

[14:34] <llfourn> m: my @a = ^10; say @a[0,2 ... *]

[14:34] <camelia> rakudo-moar 09a3e3: OUTPUT«(0 2 4 6 8)␤»

[14:34] *** skids joined
[14:34] <sergot> ooh, why I didn't think about this, thanks a lot Juerd++ !

[14:34] <sergot> llfourn++

[14:35] <Juerd> Or, if you don't care about the order, hash(@foo).keys and hash(@foo).values ;)

[14:35] *** iH2O joined
[14:35] <donaldh> PR unbusts build on JVM https://github.com/rakudo/rakudo/pull/615

[14:37] *** n0tjack left
[14:37] *** xpen joined
[14:37] *** RabidGravy joined
[14:40] <Juerd> jnthn: I just realised that having something that comes completely after object construction, so even after BUILD, would elegantly solve all problems I've been having, because by that time, all the attributes are available anyway.

[14:40] <Juerd> jnthn: It wouldn't need any signature

[14:41] <MadcapJake> is there a monochrome or svg version of camelia?

[14:41] <lucasb> .oO( fifty shades of camelia )

[14:42] <Juerd> https://en.wikipedia.org/wiki/File:Camelia.svg was the first hit in duckduckgo

[14:42] <Juerd> With Inkscape you could easily turn that into a monochrome version

[14:42] <MadcapJake> yeah, thanks Juerd++

[14:43] <iH2O> butterflies probably can see UV light like birds so make sure to include this tint even if you cant see it

[14:43] <Juerd> My printer is out of UV toner

[14:43] <MadcapJake> lol, can monitors even do uv light?! :P

[14:44] <Juerd> Not by design :P

[14:44] <Juerd> But they may leak some UV :)

[14:44] <iH2O> test your printout with a wood lamp 365nm

[14:45] <iH2O> on amazon.com

[14:45] <MadcapJake> what we really need is to make glow-in-the-dark camelia stickers! That'd one-up every other programmer laptop sticker by a wide margin!

[14:45] <mspo> those laptop stickers are more expensive to produce than you think

[14:46] <Juerd> OOoh

[14:46] <Juerd> I think for free, so yea.

[14:46] <mspo> at least the last time I looked for european sticker printing

[14:46] <iH2O> butterfly wing colors probably include UV thats what i mean

[14:46] <iH2O> for must butterflies

[14:46] <iH2O> you want to print something realistic

[14:47] <MadcapJake> lol, i'm pretty sure camelia isn't really going for "realistic" :P but still uv stickers would be sweet B)

[14:47] *** bpmedley joined
[14:47] <iH2O> that will radiate "fluorescent colors" where there is UV

[14:47] <MadcapJake> mspo: https://www.stickermule.com/products/die-cut-stickers

[14:48] <llfourn> m: my \x = 5; my @a = ^30; say @a[(^*).grep(not *%x)]; # get all the indexes that are multiples of x including 0

[14:48] <camelia> rakudo-moar 09a3e3: OUTPUT«(0 5 10 15 20 25)␤»

[14:49] <llfourn> sergot: pretty cool ^^

[14:49] <llfourn> though I suppose 0 ... would work as well

[14:50] <retupmoca> .botsnack

[14:50] <yoleaux> 07:43Z <nine> retupmoca: excellent!

[14:50] <yoleaux> :D

[14:50] <synbot6> om nom nom

[14:52] *** n0tjack joined
[14:53] <nadim> is possible to type a single hash value? or does one have to create a derived hash class that does that?

[14:53] <sergot> llfourn: nice! :)

[14:54] <ilmari> nadim: what do you mean by "type a single hash value"?

[14:54] <llfourn> sergot: it would make way more sense to use ... but if you every element except those that are multiples of 5 you can remove the not :)

[14:54] <ilmari> you can assign to a hash from a list: my %hash = (key => 'value', otherkey => 'something');

[14:54] <llfourn> if you want*

[14:54] *** raiph left
[14:54] <nadim> %h<specific_key> can only contain a specific type of value

[14:54] <sergot> llfourn++ : :)) thanks

[14:54] <ilmari> oh, sorry, wrong chan

[14:55] <Juerd> MadcapJake: http://juerd.nl/tmp/Camelia_mono.svg

[14:55] <ilmari> nadim: are arbittrary other keys allowed?

[14:56] <nadim> that's what I'd like

[14:56] <MadcapJake> Juerd: thanks! was just about to bunker down and read some inkscape guides xD

[14:57] *** MadcapJake left
[14:57] <nadim> something like %h = (Str title => 'gone with the wind', Int year => 1956); then changing the title would only allow strings as input.

[14:57] <|Tux|> m: my Bool $x = True; my IO $fh = open "test.xxx", $x ?? :r !! :w;

[14:57] <camelia> rakudo-moar 09a3e3: OUTPUT«open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub open at src/RESTRICTED.setting:9␤  in block <unit> at /tmp/YLjafs2sxc:1␤␤»

[14:57] *** MadcapJake joined
[14:57] <|Tux|> Too many positionals passed; expected 1 argument but got 2

[14:58] *** crux left
[14:58] *** iH2O left
[15:00] *** ely-se joined
[15:00] *** crux joined
[15:01] <arnsholt> |Tux|: That probably passes a Pair as a positional argument

[15:01] <dalek> nqp: 16ab6ee | donaldh++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[15:01] <dalek> nqp: Handle null objects in nqp::istrue on JVM.

[15:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/16ab6ee60e

[15:01] <arnsholt> I think what you want is open $path, :r(?$x), :w(!$x)

[15:01] <|Tux|>             my IO $fh = $pass

[15:01] <|Tux|>                 ?? open "test.csv", :w

[15:01] <|Tux|>                 !! open "test.csv", :r;

[15:01] <|Tux|> also fails :(

[15:02] <|Tux|> both are butt-ugly

[15:02] <arnsholt> What's the error for the second one?

[15:02] <|Tux|> Failed to open file

[15:03] *** empT joined
[15:03] <arnsholt> Well, that sounds like a problem of the file not being there, or some such

[15:03] *** cygx joined
[15:03] <cygx> |Tux|: you're looking for open "test.xxx", |($x ?? :r !! :w);

[15:04] <|Tux|> yes I am :) cygx++

[15:06] <RabidGravy> cygx, been loving the argument pipe thing over the last few days

[15:07] *** empT left
[15:08] <dalek> perl6-roast-data: 920e967 | coke++ | / (9 files):

[15:08] <dalek> perl6-roast-data: today (automated commit)

[15:08] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/920e967f37

[15:09] *** raiph joined
[15:11] <mrf_> has the syntax for class FOO {also does X;} changed recently

[15:12] <TimToady> not that I know of

[15:13] <TimToady> but X is an existing class, if you meant that literally

[15:13] *** n0tjack left
[15:13] * mrf_ will need to find a better example class :)

[15:13] <mrf_> Ok. (X was just an example)

[15:13] <TimToady> or example role, in this casse :)

[15:13] <mrf_> :D

[15:13] <Juerd> MadcapJake: /me just ordered a Camelia rubber stamp :)

[15:14] <MadcapJake> haha nice!

[15:14] *** n0tjack joined
[15:15] <Zoffix> :D\

[15:16] <mrf_> m: grammar Foo { also does Bar; };

[15:16] <camelia> rakudo-moar 09a3e3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/t3WxQlmlfj␤Invalid typename 'Bar'. Did you mean 'Bag'?␤at /tmp/t3WxQlmlfj:1␤------> 3grammar Foo { also does Bar7⏏5; };␤»

[15:16] <mrf_> TimToady: ^

[15:16] <TimToady> well, Bar has to be defined first...

[15:17] * MadcapJake is sad that fontastic.me turns camelia_mono.svg into gobbledygook :(

[15:17] *** xpen left
[15:18] <mrf_> TimToady: https://gist.github.com/ungrim97/2c8382b379802bfacb5a

[15:18] <cygx> so, Christmas is coming which means I need to pick up my own slack and document/test https://github.com/cygx/rakudo/commit/36f773eb010df7c6b8bf0d431d209537a6061d15

[15:18] <cygx> should I augment S16-filehandles/open.t, S16-io/basic-open.t or create S32-io/open.t?

[15:18] <mrf_> This is from existing code that seems to work find the other week but now throws the above error.

[15:19] <RabidGravy> there may be some load order changes which I haven't quite tracked down

[15:19] * [Coke] wonders if TimToady fixed RT #126771 while he was in there.

[15:20] <[Coke]> m: $_="Bruce Gray"; my $x="Andrew Egeler"; m:i:m/$x/;

[15:20] <camelia> rakudo-moar 09a3e3: OUTPUT«Invalid string index: max 4, got 5␤  in block <unit> at /tmp/LxwxtPTFr1:1␤␤»

[15:21] <Zoffix> :S

[15:23] *** ssflying left
[15:25] <[Coke]> TimToady: ^^

[15:26] <mrf_> m: role Bar {}; grammar Foo { also does Bar; };

[15:26] <camelia> rakudo-moar 09a3e3: ( no output )

[15:26] <mrf_> hmm

[15:28] <ugexe> thats not quite the same though. use Bar::Module; will do the precomp dance and `does Bar` would then be using precomp code. could be related to the transistive dependency thing nine mentioned he was trying to fix

[15:29] <Zoffix> What's the proper way proceed to next iteration of react {} ? I've got react { whenever $sock.Supply { .say; next unless /foobar/ } }; but it seems to stop reacting unless I remove that "next unless" bit

[15:30] *** ely-se left
[15:31] <Juerd> MadcapJake: I can provide a simplified svg, maybe that works...

[15:31] <MadcapJake> well i had some look with icomoon actually

[15:31] <jdv79> Zoffix: its an event loop

[15:31] <jdv79> events make it move...

[15:32] *** _mg_ left
[15:32] <mrf_> if you do action 'resolve' that should resolve the ticket (which I believe is the same as closing it)

[15:32] <Zoffix> jdv79, how do I exit from whenever {} ?

[15:32] <mrf_> wrong window sorry

[15:32] <jdv79> its not a routine is it?

[15:32] <jdv79> oh maybe - llast 

[15:33] <ugexe> done() ?

[15:33] <jdv79> *last

[15:33] <jdv79> jnthn wrote about this stuff somewhere

[15:33] <ugexe> i guess that would leave the react wouldnt it 

[15:33] <jdv79> whenever is like a for loop kinda - is that correct?

[15:33] <Zoffix> Yes, done() leaves the react

[15:34] <Zoffix> Same thing with `last` as with `next`

[15:35] <jdv79> http://irclog.perlgeek.de/perl6/2015-11-27#i_11611563

[15:35] <jdv79> may be slightly relevant

[15:36] *** n0tjack left
[15:37] <Zoffix> none help though. I think if I call a sub in whenever {} and inside that sub do a return unless ...; then I'd get the effect I desire

[15:37] * Zoffix changes the next unless /foobar/; to if /foobar/ { ... }

[15:37] <jdv79> so simple

[15:38] <Zoffix> An extra indent level though :P

[15:38] <nine> arnsholt: sure!

[15:38] <yoleaux> 13:11Z <brrrt> nine: why not pygmentize or Text::VimColour?

[15:38] <TimToady> m: say nqp::ordbaseat("foo", 42)

[15:38] <camelia> rakudo-moar 09a3e3: OUTPUT«Invalid string index: max 2, got 42␤  in block <unit> at /tmp/fpIB_25LEL:1␤␤»

[15:40] <mspo> is there an option or something to get more readline-type features in the repl?

[15:40] <mspo> up arrow and whatnot

[15:40] <TimToady> install Linenoise

[15:40] <TimToady> or rlwrap

[15:42] <mrf_> Is there a workaround for the Pod::Coverage isntall issue?

[15:42] <ilmari> Linenoise doesn't do unicode at all

[15:42] *** zakharyas joined
[15:42] <Juerd> MadcapJake: http://juerd.nl/tmp/Camelia_mono_1path.svg

[15:43] <MadcapJake> oh sweet, thanks Juerd!

[15:43] *** csd_ joined
[15:44] *** empT joined
[15:46] <stmuk_> last Cannot unbox a type object

[15:46] <stmuk_> oops

[15:48] *** empT left
[15:49] <lucasb> if you stare enough this big monochromatic camelia, it looks spooky, hypnotizing...

[15:49] <sjn> \o

[15:50] <flussence> mrf_: no signs of life on that front :(

[15:50] <sjn> quick question; can I make a lazy grid (2-dimentional array) which handles negative indices?

[15:50] <sjn> (a coordinate system with negative numbers)

[15:51] *** aigan left
[15:51] <[Coke]> arrays don't have negative indices.

[15:52] <sjn> allright, is there another way to manage it then?

[15:52] <Zoffix> sjn, just use [*-$index]  instead of [$index] ? :)

[15:52] <Zoffix> [-$index] even

[15:52] <zengargoyle> map positive to even, negative to odd indices?

[15:52] <sjn> m: my @grid = [ -Inf .. Inf ][ -Inf .. Inf ]; @grid[*-12][29]; say @grid.perl;

[15:52] <camelia> rakudo-moar 09a3e3: OUTPUT«Cannot coerce Inf or NaN to an Int␤  in block <unit> at /tmp/x4O2q6oABI:1␤␤Actually thrown at:␤  in block <unit> at /tmp/x4O2q6oABI:1␤␤»

[15:52] <[Coke]> Zoffix: that overlaps index values.

[15:53] <lucasb> sjn: probably a hash would work

[15:53] <[Coke]> then if .elems is 10, 5 would be equal to *-4 or so.

[15:53] <[Coke]> use a class.

[15:53] <Zoffix> I assumed it was negative only or zero

[15:53] <mrf_> flussence: :(

[15:53] <Zoffix> Like PDF stuff

[15:53] * Zoffix goes back to writing...

[15:53] <d^_^b> hi

[15:53] <d^_^b> whoops

[15:54] <mrf_> flussence: can we not remove it as a dep from Linenoise. Surely its only used for testing?

[15:54] <Zoffix> [Coke], would you know how to exit from whenever {} block?

[15:54] *** raiph left
[15:54] <dj_goku> hi

[15:55] <dj_goku> is there a .messages option to get messages?

[15:56] <ugexe> /.+/

[15:56] <moritz> dj_goku: you automatically get messages when you speak up

[15:56] <zengargoyle> .botsnack

[15:56] <yoleaux> :D

[15:56] <synbot6> om nom nom

[15:57] <zengargoyle> plus warm fuzzies for feeding the bot.

[15:57] *** hankache joined
[15:57] <Zoffix> "feeding the bot"... You know you live in the future when...

[15:58] <MadcapJake> Juerd: are you on twitter?

[15:58] *** empT joined
[15:58] <hankache> Hello #perl6

[15:59] <Zoffix> \o

[16:00] <cygx> m: my $a = 42; LEAVE say $a; END say $a

[16:00] <camelia> rakudo-moar 09a3e3: OUTPUT«42␤(Any)␤»

[16:00] <cygx> ^is that by design?

[16:02] *** empT left
[16:03] <lucasb> m: my $a = 42; END { say $a }

[16:03] <camelia> rakudo-moar 09a3e3: OUTPUT«42␤»

[16:04] *** nige1 left
[16:04] <[Coke]> Zoffix: not without digging into docs.

[16:05] <Zoffix> k

[16:05] <MadcapJake> Camelia file icons: https://twitter.com/MadcapJake/status/672446473682837505

[16:06] <Zoffix> MadcapJake, cool :)

[16:07] * Zoffix contemplates using camelia as the file extension :P

[16:07] <MadcapJake> Juerd++ for the simplified mono svg

[16:07] <jdv79> is panda still broken?

[16:07] <Zoffix> jdv79, was it?

[16:07] <Zoffix> Works fine for me.

[16:07] <flussence> mrf_: the problem is LibraryMake, which depends on Pod::Coverage directly and not as a test dep

[16:07] <jdv79> i installed a new rakudo, then "perl6 boostrap.pl" breaks

[16:08] <jdv79> that is still how to get panda setup?

[16:08] <TimToady> [Coke]: I have a potential fix for #126771 that I'd like to ask jnthn++ about

[16:08] <mrf_> flussence: yeah just realised that.

[16:08] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126771

[16:08] <Zoffix> jdv79, I just ran it as ./bootstrap.pl

[16:08] <jdv79> same thing

[16:08] <MadcapJake> not sure how easy this would be to box up and deliver to people but I could explain how to add it at least!

[16:08] <nine> jdv79: yes, is your panda up to date, too?

[16:09] <jdv79> they are both (rakudo and panda) fromm about 15 mins ago

[16:09] <nine> jdv79: how exactly does it break?

[16:10] <jdv79> https://gist.github.com/anonymous/3ab8aad4f9f0e9e69550

[16:10] <TimToady> cygx: that looks reasonable to me, since the $a has gone out of scope, and hasn't been captured in a closure as in what lucasb++ did

[16:11] <retupmoca> flussence, mrf_: I just removed the Pod::Coverage dep from LibraryMake

[16:11] <mrf_> \o/

[16:11] <flussence> thanks!

[16:11] <retupmoca> (well, I think I did anyway - my panda bootstrap isn't working yet either)

[16:12] <zengargoyle> does LibraryMake still use @*INC?

[16:13] <hankache> MadcapJake++

[16:13] <jdv79> panda is at 491cc83 and rakudo is at 1533b2f

[16:13] <retupmoca> the only thing it would have used @*INC for was the find-bundled function call, which is deprecated anyway

[16:13] <retupmoca> the "new thing" is Find::Bundled

[16:13] <retupmoca> which...might be using @*INC :(

[16:14] <retupmoca> (I know I merged at least one PR about the new module stuff, but I don't recall exactly what it was)

[16:14] <zengargoyle> ah, maybe it's Find::Bundled (whatever module it is that replaced the thing built-in to LibraryMake) that bombed on me.

[16:14] *** nadim left
[16:14] *** uruwi left
[16:15] *** khw joined
[16:15] <retupmoca> I plan on getting that straightened out once I get panda sorted on my machine, but I'll merge PRs :)

[16:15] <cygx> TimToady: ok, I figured that it could be the expected behaviour

[16:15] <cygx> not the most newbie-friendly semantics, though...

[16:16] <zengargoyle> retupmoca++

[16:16] * retupmoca 's panda bootstrap seems to just hang or give "Unable to write bytecode" errors, so I'm guessing there are a couple of windows issues yet

[16:16] *** nadim joined
[16:17] <TimToady> cygx: if we automatically assumed {} around blockless phasers, that would prevent BEGIN my $x = 42; from working

[16:18] <hankache> m: say -!True;

[16:18] <camelia> rakudo-moar 09a3e3: OUTPUT«0␤»

[16:18] <TimToady> requiring {} to get closure semantics seems not unreasonable to me

[16:18] <hankache> m: say ?-!True;

[16:18] <camelia> rakudo-moar 09a3e3: OUTPUT«False␤»

[16:19] <nine> jdv79: can you please give me the output of perl6 -e 'dd $*REPO.repo-chain; dd %*CUSTOM_LIB;'

[16:20] *** pmurias left
[16:20] <cygx> TimToady: it's just that visually, the (blockless) END statement appears to be within the surrounding code

[16:21] <cygx> so naively, lexicals should be available

[16:21] <TimToady> sure, which is why $a is recognized, but the lifetime is different from the scope

[16:21] <cygx> I huess in this cse, it's more about lifetimes

[16:21] <cygx> *guess

[16:21] *** nadim left
[16:21] <cygx> ;)

[16:21] <jdv79> https://gist.github.com/anonymous/e90b997e6e711c7fdc63

[16:21] <TimToady> hmm

[16:22] <TimToady> m: state $a = 42; LEAVE say $a; END say $a

[16:22] <camelia> rakudo-moar 09a3e3: OUTPUT«42␤(Any)␤»

[16:22] <TimToady> aww

[16:23] <stmuk_> m: y @installations = $*REPO.repo-chain.grep(CompUnit::Repository::Installable); my @binaries = flat @installations.map: { .files('foo')}; say :@binaries.perl;

[16:23] <camelia> rakudo-moar 09a3e3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hvtfKkXILY␤Unsupported use of y///; in Perl 6 please use tr///␤at /tmp/hvtfKkXILY:1␤------> 3y7⏏5 @installations = $*REPO.repo-chain.grep␤»

[16:23] <stmuk_> m: my @installations = $*REPO.repo-chain.grep(CompUnit::Repository::Installable); my @binaries = flat @installations.map: { .files('foo')}; say :@binaries.perl;

[16:23] <camelia> rakudo-moar 09a3e3: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/CM89swi3r4:1␤␤»

[16:23] <hoelzro> o/ #perl6

[16:24] <Zoffix> \o

[16:24] <hankache> o/ hoelzro

[16:24] <hoelzro> o/ hankache, Zoffix 

[16:24] <dalek> rakudo/precomp-singleprocess: 104623a | arnsholt++ | src/core/ (5 files):

[16:24] <dalek> rakudo/precomp-singleprocess: Initial sketch of precompilation in a single process.

[16:24] <dalek> rakudo/precomp-singleprocess: 

[16:24] <dalek> rakudo/precomp-singleprocess: Unfortunately this doesn't quite work yet, as a circular dependency chain is

[16:24] <dalek> rakudo/precomp-singleprocess: falsely detected when precompiling the NativeCall libraries.

[16:24] <dalek> rakudo/precomp-singleprocess: review: https://github.com/rakudo/rakudo/commit/104623a21a

[16:25] <retupmoca> oh hey, I had a ~/.perl6 folder I didn't know about - blew that away and panda bootstrap looks happy

[16:26] <nine> jdv79: your rakudo is 46 commits behind! Including those necessary for panda.

[16:26] <arnsholt> nine: That branch is what I've got so far. Unfortunately it breaks when precomping NativeCall. Somehow the list of loaded modules persists between each thing we precomp, so when NativeCall.pm is precomped NativeCall::Types gets loaded, and then when precomping NativeCall::Types it borks, because ::Types is already marked as loaded

[16:26] <arnsholt> Or at least, that's what it looks like to me

[16:26] <jdv79> wut?!

[16:26] <nine> jdv79: current nom is 09a3e3deae81c4946afa5f1debdc351fa82c86fe

[16:27] *** nadim joined
[16:27] <Zoffix> .u 1F64C

[16:27] <yoleaux> U+1F64C PERSON RAISING BOTH HANDS IN CELEBRATION [So] (🙌)

[16:27] <jdv79> oh, man.  sorry.  i copied the curli branch by accident

[16:27] <jdv79> thanks!

[16:28] <jdv79> well, i'll try that then

[16:28] <nine> jdv79: I love it when issues are that simple to fix :)

[16:30] <nine> arnsholt: yes, we have to precompile NativeCall::Types before NativeCall. Yet the only way to know that is by trying to precompile NativeCall and encountering the "use" statement. So to make this work, we have to be able to do multiple precompilations concurrently in one process.

[16:31] <moritz> concurrently?

[16:31] *** empT joined
[16:32] <jdv79> i waited a few days to try to avoid the mess and i accidentally stepped right into it:(

[16:33] <jdv79> i guess i checked out the curli branch to take a peek and forgot to switch back

[16:33] *** n0tjack joined
[16:33] <hankache> who is chromatic? his comments about Perl 6 are always negative. Any reason?

[16:33] <jdv79> kind of a longish story i think

[16:33] <Zoffix> hankache, based on the stuff he wrote that I've read, he used to do dev on parrot

[16:34] <Zoffix> hankache, he also the author of Perl 5's Modern Perl book

[16:34] <jdv79> hankache: i think a few posts on his blog lay it out prety well

[16:34] <mst> hankache: his comments about almost everything are always negative

[16:34] <Zoffix> heh

[16:34] <jdv79> modernperlbooks.com i think somwehre

[16:35] <mst> he successfully delayed perl 5.10 by making the pumpking quit with a series of passive aggressive posts

[16:35] <mst> etc. etc.

[16:35] <jdv79> ah, panda now straps in.  nice.

[16:35] <Zoffix> \o/

[16:35] <dj_goku> moritz: haha I guess I just start saying .messages when I come back from afk. 

[16:36] *** empT left
[16:36] <hankache> i see. i was wondering where all that negative vive was coming from (comments on reddit and HN)

[16:37] <hankache> vibe*

[16:37] <[Coke]> TimToady: glad to hear it, thanks.

[16:38] <jdv79> and installs stuff and stuff runs like precomp it working (faster).   its like a whole new world!

[16:38] <flussence> hankache: the tl;dr is he's 5.8 backward compatibility in person form ¯\_(ツ)_/¯

[16:38] <dj_goku> hankache: if you do some googling you can find his perspective of why he is negative.

[16:38] <jdv79> *is

[16:39] <nadim> What's the status of AUTOLOADING and Ties?

[16:39] <stmuk_> m: my $a = CompUnit::Repository::Installation.new();

[16:39] <camelia> rakudo-moar 09a3e3: OUTPUT«Parameter '$prefix' requires an instance of type Str, but a type object was passed.  Did you forget a .new?␤  in block <unit> at /tmp/BOASD3k1S7:1␤␤»

[16:39] <nine> retupmoca: it's very much possible that the file locking we use since curli doesn't work as intended on Windows. I'm assuming POSIX semantics since I don't have any information on what exactly to expect.

[16:39] <diakopter> nadim: those are Perl 5 concepts

[16:39] <stmuk_> should that work? or I am missing something?

[16:39] *** n0tjack left
[16:41] <stmuk_> m: my $a = CompUnit::Repository::Installation.new(:prefix("foo"));

[16:41] <camelia> rakudo-moar 09a3e3: ( no output )

[16:42] <retupmoca> nine: yeah, it hung during the tests for panda on that bootstrap, and I haven't gotten it even that far again

[16:42] <lucs> m: say (^20).grep(.is-prime) # What's missing here please?

[16:42] <camelia> rakudo-moar 09a3e3: OUTPUT«Method 'is-prime' not found for invocant of class 'Any'␤  in block <unit> at /tmp/8YVdPyM3jP:1␤␤»

[16:43] <stmuk_> m: say $*REPO.perl

[16:43] <camelia> rakudo-moar 09a3e3: OUTPUT«CompUnit::Repository::Installation.new('/home/camelia/.perl6/2015.11-330-g09a3e3d')␤»

[16:43] <retupmoca> nine: I'll take a look at the file locking stuff

[16:43] <nadim> Maybe but there was a discussion about them, IE http://perl6.org/archive/rfc/200.html, Now I don't mind those concepts gone but if there are new concepts then I'd like to know their statuses

[16:43] <retupmoca> m: say (^20).grep(*.is-prime) # lucs

[16:43] <camelia> rakudo-moar 09a3e3: OUTPUT«(2 3 5 7 11 13 17 19)␤»

[16:43] *** n0tjack joined
[16:43] *** llfourn left
[16:43] <stmuk_> m: my $foo = CompUnit::Repository::Installation.new('/home/camelia/.perl6/2015.11-330-g09a3e3d')

[16:43] <camelia> rakudo-moar 09a3e3: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/GrOLKE_ixx:1␤␤»

[16:44] <lucs> retupmoca: Oh, hmm... What does the * do? (ref to docs?)

[16:44] <Zoffix> lucs, it's called Whatever Star

[16:44] <Zoffix> Not sure which docs its in tho

[16:44] <lucs> Ah, I remember seeing that.

[16:44] *** empT joined
[16:44] <lucs> I'll find it, thanks.

[16:44] <Zoffix> lucs, probably this: http://doc.perl6.org/type/Whatever

[16:44] <TimToady> [Coke]: on that RT, the problem with blindly changing s/lc/fc/ is that fc can change the length, and current lc code assumes not

[16:45] <lucs> Zoffix: Danke

[16:45] <arnsholt> nine: Oh, so the failure is expected? That might explain things

[16:45] <arnsholt> And probably handleable with appropriate exception handling

[16:45] <[Coke]> TimToady: we can push the .fc to a different ticket, that's fine.

[16:46] <[Coke]> but I think .fc is the -right- way to do that, yes?

[16:46] * lucs is gonna cry!

[16:46] <[Coke]> my immediate problem is that it fails horribly. I'll settle for "not every weird case insensitive is handled quite right"

[16:46] <lucs> Perl6 is so beautiful

[16:46] <lucs> !

[16:46] <[Coke]> lucs: you're welcome. :)

[16:48] <japhb> .botsnack

[16:48] <synbot6> om nom nom

[16:48] <yoleaux> 2 Dec 2015 23:50Z <timotimo> japhb: how about i ask another person who can perl5 to implement that feature?

[16:48] <yoleaux> :D

[16:48] *** nige1 joined
[16:48] <[Coke]> ETOOMUCHBOT

[16:49] <japhb> timotimo: Well sure, just ask them to do a PR so I can sanity-check.  Not that I'm claiming the Perl 5 code in perl6-bench is particularly sane mind you ... more like "optimized for JFDI"

[16:49] <Zoffix> hm

[16:50] <Zoffix> Why am I getting first emission right away instead of after 2 secs?

[16:50] <Zoffix> m: Supply.interval( 2 ).tap({ say "42"   }); sleep 1

[16:50] <camelia> rakudo-moar 09a3e3: OUTPUT«42␤»

[16:50] <japhb> [Coke]: synbot6 probably shouldn't eat the snacks, and yoleaux probably shouldn't smile if it's delivering messages.  Or we could just get the yoleaux owner to add a .messages.

[16:50] *** WizJin joined
[16:51] <Zoffix> m: Supply.interval( 2 ).tap({ say "SUP: {now}" }); sleep 1; say now

[16:51] <camelia> rakudo-moar 09a3e3: OUTPUT«SUP: Instant:1449161503.478914␤Instant:1449161504.479570␤»

[16:51] <japhb> Zoffix: sleep 5.

[16:51] <Zoffix> japhb, ?

[16:51] <japhb> m: Supply.interval( 2 ).tap({ say "SUP: {now}" }); sleep 5; say now

[16:51] <camelia> rakudo-moar 09a3e3: OUTPUT«SUP: Instant:1449161540.900171␤SUP: Instant:1449161542.901709␤SUP: Instant:1449161544.903744␤Instant:1449161545.900828␤»

[16:52] *** n0tjack left
[16:52] <Zoffix> japhb, not sure what I'm meant to get from that :/

[16:52] *** empT left
[16:52] <japhb> The spacing is indeed every 2 seconds ... but it starts at 0, not 2.

[16:52] <Zoffix> That's terrible and IIRC it wasn't the case before the recent Supply rewrite.

[16:53] *** hankache left
[16:53] <[Coke]> japhb: I just do a "." if I know I need to emit messages.

[16:53] <jdv79> Zoffix: are your bots self aware yet?

[16:53] <japhb> [Coke]: Sigh, I suppose so.

[16:53] <Zoffix> jdv79, yes

[16:54] <japhb> Speaking of messages, I should have probably sent mine as one ...

[16:54] <japhb> .tell timotimo Well sure, just ask them to do a PR so I can sanity-check.  Not that I'm claiming the Perl 5 code in perl6-bench is particularly sane mind you ... more like "optimized for JFDI"

[16:54] <Zoffix> Ah ok

[16:54] <yoleaux> japhb: I'll pass your message to timotimo.

[16:54] <jdv79> so they will write the advent post?

[16:54] <TimToady> [Coke]: we should just have a ticket for a general lc vs fc review, I think, if we don't have one already

[16:54] <Zoffix> m: Supply.interval( 2, 2 ).tap({ say "SUP: {now}" }); sleep 1; say now

[16:54] <camelia> rakudo-moar 09a3e3: OUTPUT«Instant:1449161713.624202␤»

[16:54] *** n0tjack joined
[16:54] <Zoffix> There's a "delay" there

[16:54] <[Coke]> TimToady: ok. opening.

[16:54] <TimToady> and we probably need to do it before xmas

[16:55] <Zoffix> jdv79, yup :P

[16:55] <jdv79> super ^H

[16:55] *** atweiden joined
[16:56] <Zoffix> jdv79, you probably wouldn't want to read that post tho: [11:23:51] <Zoffix> P6NotABot, test [11:23:51] <P6NotABot> When they met up outside the town, he listened to the other group explaining how it all went bad right from the beginning because there were a pair of constables keeping a sharp eye on the target maki

[16:56] <Zoffix> ^_^

[16:56] *** telex left
[16:56] <jdv79> needs more IQ

[16:56] <lucasb> having multiple-keyed hashes makes sense? is it planned for the far future? the idea is something like this: my %h{Int;Str;Bool}; %h{42;"foo";True} = $some-value;

[16:57] <Zoffix> :o

[16:57] <n0tjack> I'd love to see multi-key hashes

[16:57] *** empT joined
[16:57] * Zoffix can't think of a valid usecase

[16:57] <[Coke]> m: say π

[16:57] <camelia> rakudo-moar 09a3e3: OUTPUT«3.14159265358979␤»

[16:58] <n0tjack> m: say pi^(e*i);

[16:58] <camelia> rakudo-moar 09a3e3: OUTPUT«one(3.14159265358979, 0+2.71828182845905i)␤»

[16:58] <n0tjack> m: say e^(pi*i);

[16:58] <camelia> rakudo-moar 09a3e3: OUTPUT«one(2.71828182845905, 0+3.14159265358979i)␤»

[16:58] <Zoffix> m: say 2^2

[16:58] <camelia> rakudo-moar 09a3e3: OUTPUT«one(2, 2)␤»

[16:58] <[Coke]> ** not &

[16:58] <diakopter> heh since when does ^ work like that

[16:58] <[Coke]> er, not ^

[16:58] *** telex joined
[16:58] <diakopter> yeah **

[16:58] <Zoffix> I'm just wondering wtf ^ is?

[16:58] <lucasb> xor?

[16:59] <n0tjack> I'm used to spelling ** as ^

[16:59] <diakopter> disjunction

[16:59] <n0tjack> sorry

[16:59] <Zoffix> :o

[16:59] <[Coke]> http://docs.perl6.org/routine/(%5E)#language_documentation_Sets,_Bags,_and_Mixes

[16:59] <Zoffix> Thanks

[16:59] <gfldex> m: my %h{Any}; %h{42;'zwoundvierzig'} = 'universe'; say %h{42;'zwoundvierzig'}

[16:59] <camelia> rakudo-moar 09a3e3: OUTPUT«(universe)␤»

[16:59] <[Coke]> ... wait, notpe

[16:59] <gfldex> lucasb: ^^^

[16:59] <vytas> m: say 2􏿽xB2;

[16:59] <camelia> rakudo-moar 09a3e3: OUTPUT«4␤»

[16:59] *** synbot6 left
[16:59] <diakopter> m: say e**(pi*i);

[16:59] <camelia> rakudo-moar 09a3e3: OUTPUT«-1+1.22464679914735e-16i␤»

[16:59] <colomon> [Coke]: right, junctions not sets bags etc

[17:01] <vytas> m: say √4;

[17:01] <camelia> rakudo-moar 09a3e3: OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at /tmp/dLzG4ckOtS:1␤------> 3say7⏏5 √4;␤Bogus postfix␤at /tmp/dLzG4ckOtS:1␤------> 3say 7⏏5√4;␤    expecting any of:␤        infix␤        infix stopper␤       …»

[17:01] <TimToady> m: say e**(pi*i).narrow

[17:01] <camelia> rakudo-moar 09a3e3: OUTPUT«Attempt to divide 3.14159265358979 by zero using /␤  in block <unit> at /tmp/99Ygzai4UY:1␤␤Actually thrown at:␤  in block <unit> at /tmp/99Ygzai4UY:1␤␤»

[17:01] *** empT left
[17:01] <TimToady> heh

[17:01] <diakopter> m: say (e**(pi*i)).narrow

[17:01] <camelia> rakudo-moar 09a3e3: OUTPUT«-1␤»

[17:02] <TimToady> right

[17:02] <lucasb> gfldex: oh, it works already, cool :)

[17:02] <moritz> m: say e ** pi\i .narrow

[17:02] <camelia> rakudo-moar 09a3e3: OUTPUT«-1␤»

[17:02] <nine> moritz: concurrently as in start one precompilation while another one was already started and resume the first one after the other is finished. Not as in threads

[17:02] <diakopter> moritz: waaaaaaat is that

[17:03] <[Coke]> colomon: sadly, couldn't find ^ at docs.p6

[17:03] <colomon> [Coke]: :(

[17:04] *** nadim left
[17:05] *** n0tjack left
[17:05] <stmuk_> probably known but an installed script $*EXECUTABLE-NAME is a sha hash

[17:06] <lucasb> colomon, [Coke]: junction operators & | ^ are there in the docs. is this what you are talking about?

[17:06] <cygx> wait, the proper way to rewind a file is now .seek(0, SeekFromBeginning)

[17:06] <cygx> that's I bit longwinded, I'd argue

[17:06] <cygx> *a bit

[17:07] *** zakharyas left
[17:08] <[Coke]> lucasb: search for ^ - which of those entries is the junction one?

[17:09] <[Coke]> the junction page probably needs to be rewritten to list those as operators, and then the indexing will pick it up

[17:10] <lucasb> http://doc.perl6.org/language/operators#infix_^

[17:10] <[Coke]> how often is seek used? Longwinded seems ok.

[17:10] *** nadim joined
[17:10] <[Coke]> lucasb: ok, but can you search for it?

[17:10] <lucasb> strangely enough, I can't directly type a "^" character in the search box

[17:11] <lucasb> dunno what JS magic is that

[17:11] * Zoffix can

[17:12] *** sno joined
[17:12] <cygx> [Coke]: looks more like Java than Perl to me

[17:12] <cygx> I'd probably have added some multi candidates using libc terminology, ie :cur, :set, :end

[17:13] <dalek> nqp: 6057310 | TimToady++ | tools/build/MOAR_REVISION:

[17:13] <dalek> nqp: bump moar to get RT #126771 fix

[17:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6057310c56

[17:13] <zengargoyle> cygx: that was my first thought when i got warnings on Text::Fortune... what is this? Java?

[17:14] * mrf_ -> home

[17:14] *** n0tjack joined
[17:15] <nine> cygx: if it weren't for :end, I'd have a hard time figuring out what the other two mean

[17:17] <Juerd> MadcapJake: Yes, I am on Twitter. @Whreq

[17:17] <dalek> rakudo/nom: 34b87d5 | TimToady++ | tools/build/NQP_REVISION:

[17:17] <dalek> rakudo/nom: bump nqp to get RT #126771 fix

[17:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34b87d525a

[17:17] <zengargoyle> i'd still expect something shorter... seed( SeekFromXxxx ) seems redundant.

[17:17] <zengargoyle> s/seed/seek/

[17:18] <dalek> roast: 0d2a5c0 | TimToady++ | S05-modifier/ignorecase-and-ignoremark.t:

[17:18] <dalek> roast: add test for RT #126771

[17:18] <dalek> roast: review: https://github.com/perl6/roast/commit/0d2a5c0197

[17:18] *** empT joined
[17:19] <cygx> nine: simple solution - force everyone to do some C programming before letting them touch Perl6 ;)

[17:19] <zengargoyle> expected a bit more like Order::Less|Same|More type thing... SeekFrom::Begin ...

[17:20] *** _nadim joined
[17:20] <japhb> panda can't currently install Term::termios or Inline::Perl5 (though oddly Inline::Python seems to install fine).  Between panda, curli, and the modules themselves, I'm not sure who to file tickets with ....

[17:20] <zengargoyle> they still have to know to use +/- for forward/backward

[17:20] *** nadim left
[17:21] *** nige1 left
[17:21] <stmuk_> I'm getting an unbox error with the shim for p6doc-index as well 

[17:22] * zengargoyle tho still better than having to lookup 0,1,2 *every single time* :)

[17:22] <stmuk_> there seems to be another(?) unbox error which is intermitaint as well

[17:25] *** mohij left
[17:26] <japhb> .ask nine Can you fix "things" so that Inline::Perl5 can install via panda again?

[17:26] <yoleaux> japhb: I'll pass your message to nine.

[17:26] *** patrickz joined
[17:26] *** n0tjack left
[17:27] <diakopter> Swift is now open-source apple/swift

[17:28] *** nadim joined
[17:28] <TimToady> which probably means apple doesn't care about it so much anymore...

[17:28] <[Coke]> I could see an argument made for using an adverbial rather than an enum there, but I'm more concerned about our inconsistent kebob casing.

[17:29] *** _nadim left
[17:30] <stmuk_> swift.org seems /' ed

[17:31] <nine> I guess physicists really are not familiar with http://tauday.com/

[17:31] <yoleaux> 17:26Z <japhb> nine: Can you fix "things" so that Inline::Perl5 can install via panda again?

[17:31] *** dakkar left
[17:32] <nine> japhb: I already started work on that yesterday. It just would be much easier if arnsholt++ manages to make in-process precompilation work

[17:32] <[Coke]> Pretty sure we have all the people we're going to have in the credits section of the release announcement now. Please make sure your favorite sixer is in the list and that their preferred name is used. (Still some work to be done to eliminate a few dupes, and pick better preferred names)

[17:33] <[Coke]> https://gist.github.com/coke/63c7bbb82f075c7bb1f5

[17:33] *** Ch0c0late joined
[17:33] <[Coke]> lizmat+- for suggesting this task. :)

[17:34] <cygx> .oO( who's that cvsdummy guy )

[17:36] <jdv79> m: my @a="adsf"; say "@a[0]{'foo'}"

[17:36] <camelia> rakudo-moar 34b87d: OUTPUT«Type Str does not support associative indexing.␤  in block <unit> at /tmp/I4NIgjeOew:1␤␤Actually thrown at:␤  in block <unit> at /tmp/I4NIgjeOew:1␤␤»

[17:36] <[Coke]> cygx: adding him to the TODO...

[17:37] <jdv79> is there no way to have a subscripting followed by a block in a string interp?

[17:37] <[Coke]> cygx: updated README

[17:37] <cygx> [Coke]++

[17:37] <[Coke]> m: my @a="adsf"; say "{ @a[0]{'foo'} }"

[17:37] <camelia> rakudo-moar 34b87d: OUTPUT«Type Str does not support associative indexing.␤  in block <unit> at /tmp/fvBCFVeckE:1␤␤Actually thrown at:␤  in block <unit> at /tmp/fvBCFVeckE:1␤␤»

[17:37] <jdv79> another block i guess...

[17:38] <jdv79> m: my @a="adsf"; say "{@a[0]}{'foo'}"

[17:38] <camelia> rakudo-moar 34b87d: OUTPUT«adsffoo␤»

[17:38] * donaldh is tirelessly pimping his PR that unbusts the JVM build https://github.com/rakudo/rakudo/pull/615

[17:38] <Zoffix> First draft of Advent post done: 2094 words. 

[17:38] <jnthn> pimpin' ain't easy...

[17:38] <[Coke]> donaldh: one sec.

[17:38] <TimToady> m: my @a="adsf"; say "@a[0]$('foo')"

[17:38] <camelia> rakudo-moar 34b87d: OUTPUT«adsffoo␤»

[17:38] <dalek> rakudo/nom: 3140c62 | donaldh++ | src/core/Str.pm:

[17:38] <dalek> rakudo/nom: Unbust build on JVM - make samemark moar only.

[17:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3140c6217e

[17:38] <dalek> rakudo/nom: de7cb07 | jnthn++ | src/core/Str.pm:

[17:38] <dalek> rakudo/nom: Merge pull request #615 from donaldh/unbust-jvm

[17:38] <dalek> rakudo/nom: 

[17:38] <dalek> rakudo/nom: Unbust build on JVM - define samemark to be moar only.

[17:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de7cb07a03

[17:38] <TimToady> another way

[17:38] <[Coke]> jnthn beat me to it!

[17:38] <jnthn> ;)

[17:38] <[Coke]> donaldh++ Thanks!

[17:38] <jdv79> TimToady: nice

[17:39] *** Amnez777- joined
[17:39] <timotimo> so much backlog ...

[17:39] <yoleaux> 16:54Z <japhb> timotimo: Well sure, just ask them to do a PR so I can sanity-check.  Not that I'm claiming the Perl 5 code in perl6-bench is particularly sane mind you ... more like "optimized for JFDI"

[17:39] <donaldh> thanks jnthn++ and [Coke]++

[17:39] *** Amnez777 left
[17:40] *** Amnez777 joined
[17:40] *** Amnez777 left
[17:40] *** Amnez777 joined
[17:40] *** ChoHag joined
[17:40] <donaldh> also https://github.com/rakudo/rakudo/pull/608 which adds awesomeness to USAGE 

[17:43] <cygx> re USAGE, https://github.com/rakudo/rakudo/pull/549 is also still open

[17:43] *** cpage_ left
[17:43] <jnthn> TimToady: Any feeling on https://rt.perl.org/Ticket/Display.html?id=126005 ? Basically, things like loops sink their last statement, so the loop block evaluates to Nil, so the UNDO phaser fires.

[17:44] <ChoHag> How's the release by Christmas looking?

[17:44] <cygx> m: sub MAIN(42, *%foo) {}

[17:44] <camelia> rakudo-moar 34b87d: OUTPUT«Usage:␤  /tmp/LkRKXlKH72 =<Associative> 42 ␤»

[17:44] *** Amnez777- left
[17:45] <[Coke]> ChoHag: on target

[17:45] <ChoHag> 2015.11 builds cleanly by the way. ISTR some problem building individual components to a non-standard prefix some time ago.

[17:47] <[Coke]> cvsdummy & unknown are gone

[17:47] *** Actualeyes left
[17:52] *** ChoHag left
[17:56] *** donaldh left
[17:57] <TimToady> jnthn: perhaps sink should be returning Empty intead of Nil?

[17:58] <TimToady> but the thing is, UNDO isn't really intended for blocks that don't return anything anyway, unless we tweak our definition of success

[18:00] <TimToady> so I'm willing to spec nasal unicorns unless someone gives me a real use case

[18:02] <Zoffix> :o

[18:05] <diakopter> nasaly unicorns sing off-key

[18:06] *** JimmyZ_ joined
[18:06] *** lucasb left
[18:06] <dalek> nqp: 01aba47 | TimToady++ | tools/build/MOAR_REVISION:

[18:06] <dalek> nqp: bump moar for moar ord tweaks

[18:06] <dalek> nqp: review: https://github.com/perl6/nqp/commit/01aba47445

[18:07] *** ChoHag joined
[18:07] <dalek> rakudo/nom: 3f85666 | TimToady++ | tools/build/NQP_REVISION:

[18:07] <dalek> rakudo/nom: bump nqp for moar ord tweaks

[18:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3f85666cf6

[18:08] *** espadrine left
[18:10] <El_Che> I know this is a designed, but I don't care much about it:

[18:10] <El_Che> m: class Foo { has $.bar }; my $foo = Foo.new( baz => "blah")

[18:10] <camelia> rakudo-moar de7cb0: ( no output )

[18:11] <El_Che> that will happily create a "Foo.new(bar => Any)"

[18:11] <El_Che> I would rather see the new call die

[18:11] *** zoosha left
[18:12] *** JimmyZ_ left
[18:13] <ilmari> has Any:D $.bar is required;

[18:13] <ilmari> i see 'is required' now suppresses the "Variable definition of type Any:D requires an initializer" error

[18:14] <El_Che> ilmari: what if it isn't? I am talking about supplying nonsense parameters (typos) at class creation time

[18:14] <MadcapJake> If anyone is interested in having camelia file icons: http://madcapjake.github.io/2015/perl6-file-icons/

[18:14] <ilmari> El_Che: what do you mean nonsense? Anyy is perfectly cromulent value (a type object)

[18:14] <ilmari> s/yy/y/

[18:15] <ilmari> ah, you mean unknown attributes

[18:15] <El_Che> ilmari: yes

[18:15] <El_Che> ilmari: class Foo { has Bool $.verbose }; my $foo = Foo.new( verboose => True)

[18:15] <El_Che> verboose instead of verbose

[18:16] <ilmari> I guess could could write a class trait that rejects unknown constructor arguments

[18:17] <ilmari> class Foo is strict { ... }

[18:17] <ilmari> like MooseX::StrictConstructor

[18:17] <mst> on the whole, I have not found that to be an advantage

[18:17] <El_Che> ilmari: sure p6 is flexible enough to do that. I don't see the use case for the default 

[18:18] <El_Che> is there a use case to pass invalid attributes to a constructor?

[18:18] <mst> (1) it might not be invalid, something in BUILD might use it

[18:18] <mst> (2) it lets you pass an object a hash of params, and it understands the ones it understands, and ignores the others

[18:19] <El_Che> mst: I get case 2

[18:19] <gfldex> it's ignored for subs too, what allowes chaining of subs that pass named arguments on to a sub that can handle them

[18:20] <El_Che> so there are valid cases, but I think it also has the potential to be the cause for difficult to spot bugs

[18:21] *** cognominal left
[18:21] *** mephinet left
[18:24] *** n0tjack joined
[18:25] *** cognominal joined
[18:27] *** hankache joined
[18:28] *** empT left
[18:30] *** mephinet joined
[18:30] *** empT joined
[18:30] <El_Che> thx for the answer, they make sense

[18:30] <El_Che> s

[18:30] <dalek> rakudo/nom: c6cc8a8 | coke++ | docs/announce/2015.12.md:

[18:30] <dalek> rakudo/nom: add most of TimToady++'s thanks update

[18:30] <dalek> rakudo/nom: 

[18:30] <dalek> rakudo/nom: Remove the list of repositories to go over;

[18:30] <dalek> rakudo/nom: That work is being done in a gist, we'll

[18:30] <dalek> rakudo/nom: pull it in shortly.

[18:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c6cc8a8b66

[18:31] <zostay> how do i fix it if panda is installed, but when i run panda it can't find Shell::Command, etc.?

[18:32] * lizmat hopes TimToady will be able to decide on https://github.com/rakudo/rakudo/pull/614

[18:33] <lizmat> aka, do we support tau ?

[18:33] *** zoosha joined
[18:33] <n0tjack> m: say pi/2;

[18:33] <camelia> rakudo-moar 3f8566: OUTPUT«1.5707963267949␤»

[18:33] <n0tjack> oh wait tau is 2*pi

[18:34] <hankache> m: say 2*pi;

[18:34] <camelia> rakudo-moar 3f8566: OUTPUT«6.28318530717959␤»

[18:35] <n0tjack> do I need rakudobrew to upgrade rakudo* easily?

[18:35] * lizmat wonders it would make sense to have an Inline::Swift

[18:36] <zostay> ah, figured it out... had to cd into the panda dir inside of rakudobrew and run: perl6 -I ext/Shell__Command/lib -I ext/File__Find/lib -I ext/JSON__Fast/lib bin/panda install File::Find Shell::Command JSON::Tiny

[18:37] *** ribasushi left
[18:37] <zostay> n0tjack, i would recommend rakudobrew if you are interested in easily updating to the latest build

[18:38] <hankache> m: sub τ {2*pi}; say τ;

[18:38] <camelia> rakudo-moar 3f8566: OUTPUT«6.28318530717959␤»

[18:38] <[Coke]> I think I had asked for tau at some point, but am now convinced it doesn't belong in v6.c - if it gets more mindshare, we can add it to v6.d

[18:39] *** zengargoylew joined
[18:39] <n0tjack> zostay: I'm only really interested in the monthly R* builds. Currently, I'm unsure of how to easily upgrade from 2015.09 to 2015.11 . As much as possible I'm trying to be a pure "user".

[18:40] <n0tjack> m: constant \τ = 2*pi; say τ;

[18:40] <camelia> rakudo-moar 3f8566: OUTPUT«6.28318530717959␤»

[18:41] <cygx> m: sub postfix:<pi> { $^v * pi }; say 2pi

[18:41] <camelia> rakudo-moar 3f8566: OUTPUT«6.28318530717959␤»

[18:41] <hankache> n0tjack what does the backslash before a variable declaration do?

[18:41] <Skarsnik> mess up with your brain

[18:42] <n0tjack> hankache: makes it sigilless; may actually not be required for constants, but is required for mutable vars

[18:42] <MadcapJake> http://doc.perl6.org/language/variables#Sigilless_variables

[18:42] <lizmat> afk until after have seen Deep Purple getting oxygenated&

[18:42] <MadcapJake> lizmat: o_O

[18:43] *** ribasushi joined
[18:43] <zostay> rakudobrew can build the monthly R* distro if you specify the tags you want to build from, i think, but it doesn't include the modules R* includes, so it's probably not what you want in that case

[18:43] <lizmat> .oO( http://www.theo2.co.uk/events/detail/deep-purple )

[18:43] <n0tjack> zostay: what is the recommended way to upgrade r* on OSX? brew uninstall & brew install ?

[18:43] <MadcapJake> zostay: panda install Task::Star

[18:44] <timotimo> zostay: fortunately we have Task::Star to give you the modules. however, it doesn't give you the modules at the exact version star shipped.

[18:45] <zostay> i don't know... i was just answering what rakudobrew does... that's all i really need since i just need to build and test my mods against the bleeding edge

[18:45] <n0tjack> cool

[18:45] <hankache> so sigiless variables and constants are the same thing?

[18:46] <hankache> i mean the same behavior

[18:46] <n0tjack> hankache: no

[18:46] <n0tjack> hankache: any variable, constant or mutable, can be sigilless

[18:46] <n0tjack> m: my \foo = 42; foo = 43; say foo;

[18:46] <camelia> rakudo-moar 3f8566: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/9q_bitkHOh:1␤␤»

[18:46] <n0tjack> wait, is that right?

[18:46] <flussence> m: say unival('𓂅') # gucharmap tells me this has a numeric value of 1/32, but perl6 doesn't recognise it. should it?

[18:46] <camelia> rakudo-moar 3f8566: OUTPUT«NaN␤»

[18:46] <n0tjack> m: my \foo = 42; foo := 43; say foo;

[18:46] <camelia> rakudo-moar 3f8566: OUTPUT«5===SORRY!5=== Error while compiling /tmp/NIsGMRDfb7␤Cannot use bind operator with this left-hand side␤at /tmp/NIsGMRDfb7:1␤------> 3my \foo = 42; foo := 437⏏5; say foo;␤»

[18:47] <n0tjack> ok, I need to refresh myself on sigilles vars

[18:47] <n0tjack> forget everything I've said :)

[18:47] <[Coke]> .u 𓂅

[18:47] <yoleaux> U+13085 EGYPTIAN HIEROGLYPH D015 [Lo] (𓂅)

[18:47] <hankache> n0tjack the documentation says that sigiless == immutable

[18:48] *** vendethiel joined
[18:48] <cygx> m: my \foo = my $ = 42; say foo; foo = 23; say foo

[18:48] <camelia> rakudo-moar 3f8566: OUTPUT«42␤23␤»

[18:49] <zostay> there are several loopholes like that

[18:49] <zostay> m: my \foo = 42; foo := 43; say foo

[18:49] <camelia> rakudo-moar 3f8566: OUTPUT«5===SORRY!5=== Error while compiling /tmp/f1pzuPp7mA␤Cannot use bind operator with this left-hand side␤at /tmp/f1pzuPp7mA:1␤------> 3my \foo = 42; foo := 437⏏5; say foo␤»

[18:49] <zostay> m: my Int \foo = 42; foo := 43; say foo

[18:49] <camelia> rakudo-moar 3f8566: OUTPUT«43␤»

[18:49] <n0tjack> zostay: Ah! That's what I had remembered.

[18:49] <zostay> i'm not sure if they are intentional or not

[18:50] <cygx> zostay: that last one looks like a bug to me

[18:50] <[Coke]> flussence: fileformat.info doesn't think the hieroglyph has a numeric value.

[18:51] * flussence shrugs

[18:51] <Skarsnik> m: sprintf("hello", 42);

[18:51] <camelia> rakudo-moar c6cc8a: OUTPUT«Directives specify 0 arguments, but 1 argument was supplied␤␤»

[18:51] *** rurban1 joined
[18:51] <Skarsnik> Should it be more explicit which Directive?

[18:51] <flussence> maybe they removed that info in a later version of unicode, this program's pretty out of date...

[18:51] <[Coke]> flussence: from http://www.unicode.org/Public/9.0.0/ucd/UnicodeData-9.0.0d1.txt

[18:51] <[Coke]> 2153;VULGAR FRACTION ONE THIRD;No;0;ON;<fraction> 0031 2044 0033;;;1/3;N;FRACTION ONE THIRD;;;;

[18:52] <timotimo> n0tjack: sigil-less variables are pretty much Single Static Assignment, but you can still bind a scalar into a sigilless variable and then you can modify it

[18:52] <[Coke]> 13085;EGYPTIAN HIEROGLYPH D015;Lo;0;L;;;;;N;;;;;

[18:52] <[Coke]> so, yes, perl6 seems to have this right.

[18:52] *** ab6tract joined
[18:53] *** ollej joined
[18:53] *** rurban left
[18:54] <Skarsnik> m: sprintf("hello", 42); printf("Hello", 42);

[18:54] <camelia> rakudo-moar c6cc8a: OUTPUT«Directives specify 0 arguments, but 1 argument was supplied␤␤»

[18:54] *** rurban1 left
[18:54] <flussence> huh, I wonder where gucharmap gets its info from then...

[18:54] <Skarsnik> m: printf("Hello", 42);

[18:54] <camelia> rakudo-moar c6cc8a: OUTPUT«Directives specify 0 arguments, but 1 argument was supplied␤␤»

[18:54] <Skarsnik> should I fill a bugrepport to have like the name of the function? x)

[18:55] <flussence> oh, ucd/NamesList.txt.

[18:55] <[Coke]> Skarsnik: that's an NQP error, not a rakudo error, methinks

[18:55] *** empT left
[18:55] <[Coke]> I think printf is basically passing the buck to NQP.

[18:56] <Skarsnik> make me lost 20 min wondering what was wrong xD

[18:57] <n0tjack> timotimo: makes sense, thanks 

[18:57] *** JimmyZ__ joined
[18:59] <Skarsnik> hm, this message is both in npq and Moar

[19:01] *** rurban joined
[19:01] <nine> zostay: I wonder what advantages rakudobrew gives with regards to updating? I usually just git pull && make install in rakudo to update

[19:01] <ChoHag> Coming back to me weird and wonderful perl 6 project after a couple of months.

[19:02] <ChoHag> Initial conclusion: I don't comment my code enough.

[19:02] <hankache> use MONKEY-TYPING; lol!!

[19:03] *** zakharyas joined
[19:05] *** JimmyZ__ left
[19:05] *** cpage_ joined
[19:05] *** lestrrat left
[19:06] <mst> ChoHag: nobody ever comments their code enough

[19:06] <DrForr> I just use the 'rakudobrew nuke...' method. So far haven't had a problem.

[19:07] *** empT joined
[19:07] <nine> I most of the time manage to comment my code if lifes depend on it. Well, at least often. Ok, sometimes...

[19:08] <Zoffix> m: &foo = &CORE::<say>; foo 42

[19:08] <camelia> rakudo-moar c6cc8a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/eal4OWT1J3␤Undeclared name:␤    CORE used at line 1␤Undeclared routine:␤    foo used at line 1␤␤»

[19:08] <Zoffix> What was the right syntax to "rename" core functions?

[19:08] <TimToady> thing is, you can never get it right; it just switches from having too few comments to having too many :)

[19:08] <timotimo> m: my &foo = CORE::('&say'); foo 42

[19:08] <camelia> rakudo-moar c6cc8a: OUTPUT«42␤»

[19:08] *** lestrrat joined
[19:08] <Zoffix> It's like driving: those who are slower than you are idiots and those who are faster are maniacs :)

[19:08] <Zoffix> timotimo++ thanks

[19:08] <timotimo> Zoffix: it's important to put the "my" there, too ;)

[19:08] <timotimo> m: my &foo = &CORE::<say>; foo 42

[19:08] <camelia> rakudo-moar c6cc8a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_jmcfKmrgn␤Undeclared name:␤    CORE used at line 1␤␤»

[19:09] <TimToady> Zoffix: it's worse, because you're both an idiot and a maniac

[19:09] <timotimo> but that doesn't work :|

[19:09] <Zoffix> TimToady, lmao :D

[19:09] <Zoffix> m: my &বলা = CORE::('&say'); বলা 42

[19:09] <camelia> rakudo-moar c6cc8a: OUTPUT«42␤»

[19:09] <masak> "comments are echoes along the timeline from future refactorings, pleading to be born"

[19:09] <masak> -- Kent Beck

[19:09] <Zoffix> Cool. We can actually make "translation" modules and let people use Perl 6 in their native tongue!

[19:09] <El_Che> what does "Read-only binding" (::=) mean? http://doc.perl6.org/routine/%3A%3A%3D

[19:09] <El_Che> m: my $a = 1 ; my $b ::= $a; $b++; $a.perl

[19:09] <camelia> rakudo-moar c6cc8a: ( no output )

[19:09] <El_Che> m: my $a = 1 ; my $b ::= $a; $b++; say $a.perl

[19:09] <camelia> rakudo-moar c6cc8a: OUTPUT«2␤»

[19:10] <El_Che> I don't see the difference with :=

[19:10] <ChoHag> I try to follow Knuth's advice (was it merely advice?) that code should be for humans and only incidentally for compilers^Wbutterflies.

[19:10] <masak> El_Che: means you can see updates, but can't update the alias :)

[19:10] <timotimo> m: my $a = 1; my $othera = 2; my $b := $a; $b := $othera; say $b;

[19:10] <camelia> rakudo-moar c6cc8a: OUTPUT«2␤»

[19:10] <masak> m: my $a = 1; my $b := $a; $b++; say $a

[19:10] <camelia> rakudo-moar c6cc8a: OUTPUT«2␤»

[19:10] <ChoHag> But unfortunately butterflies are faster.

[19:10] *** leont joined
[19:10] <timotimo> m: my $a = 1; my $othera = 2; my $b ::= $a; $b ::= $othera; say $b;

[19:10] <camelia> rakudo-moar c6cc8a: OUTPUT«2␤»

[19:10] <timotimo> huh

[19:10] <timotimo> m: my $a = 1; my $othera = 2; my $b ::= $a; $b := $othera; say $b;

[19:10] <camelia> rakudo-moar c6cc8a: OUTPUT«2␤»

[19:10] <ChoHag> And compared to some humans I've met. Smarter.

[19:10] <timotimo> NYI?

[19:10] *** vendethiel left
[19:10] *** spider-mario joined
[19:10] <masak> you can always rebind

[19:11] <masak> that's not what "readonly" means here

[19:11] <cygx> m: my $a = 42; my $b ::= $a; $b = 23;

[19:11] <camelia> rakudo-moar c6cc8a: ( no output )

[19:11] <masak> m: my $a = 1; my $b ::= $a; $b++; say $a

[19:11] <camelia> rakudo-moar c6cc8a: OUTPUT«2␤»

[19:11] <El_Che> masak: I am still trying to digest the answer :)

[19:11] <masak> hrm.

[19:11] <nine> masak: I guess it's no accident that I'm reminded of Yeats by that quote ;)

[19:11] <El_Che> masak: so far, I don't see the difference

[19:12] <jnthn> TimToady: I wrote up a rejection of https://rt.perl.org/Ticket/Display.html?id=125400 fwiw.

[19:13] * _sri_ started working on a new perl6 logo, derpy the snail :p https://i.imgur.com/KtxYJvi.png

[19:13] <masak> El_Che: I'm stumped too, now

[19:13] <_sri_> to balance out the perl5 hate here recently ;)

[19:13] *** rurban left
[19:13] <Zoffix> perl5 hate?

[19:13] <masak> _sri_: :P

[19:13] *** rurban joined
[19:13] <Zoffix> _sri_, lol, love the logo :)

[19:14] <hoelzro> hahahha

[19:14] <Zoffix> _sri_, kerning sucks on "Perl 6" tho :)

[19:14] <masak> _sri_: my first reaction to "performance isn't everything" is that it sounds like making excuses. and we do actually care about performance, it's just coming along step-by-step...

[19:14] <_sri_> Zoffix: everyone's a critic!

[19:14] <jnthn> _sri_: I have no hate for Perl 5, but you're doing pretty well earning some... :P

[19:15] <Zoffix> _sri_, hey, at least I didn't say anything about the sucky font :P

[19:15] <masak> _sri_: my second reaction was "ugh, Comic Sans" :P

[19:15] <_sri_> masak: 100% intentional choice ;)

[19:15] <Zoffix> :)

[19:15] * flussence prefers Ubuntu.ttf for that kind of use these days

[19:15] <masak> _sri_: that's supposed to make me feel better about it? :P

[19:15] <nine> I see Perl 5 as a strict subset of Perl 6, so I read it as "use these language constructs for performance" ;)

[19:16] <Zoffix> _sri_, do you mind if I post it on Twitter? I think it's funny

[19:16] <masak> ok, ok, we'll be derpy the snail. fine.

[19:16] <Zoffix> _sri_, with credit to you that is :)

[19:16] <japhb> The only hate I have is for the term "derpy".  Possibly because my eldest overuses it to extremes.

[19:17] <Zoffix> That logo actually reminds me of the 100-Year Language essay: http://paulgraham.com/hundred.html

[19:17] <Zoffix> And the whole talk about expressing yourself first, without worrying about efficiency\

[19:19] <diakopter> what p5 hate

[19:19] <nine> Where would be a good place to read an ENV var and stuff it into a dynamic to be accessed during compilation in Perl6::Actions?

[19:20] <masak> I wonder what the dual to that logo would be

[19:20] <diakopter> _sri_: srsly, against which sentiments are you reacting

[19:20] <ChoHag> Efficiency is a financial problem these days.

[19:20] *** empT left
[19:20] *** Peter_R joined
[19:21] *** zacts left
[19:21] *** cdg left
[19:22] <TimToady> m: constant τ = 2*pi; say τ;

[19:22] <camelia> rakudo-moar c6cc8a: OUTPUT«6.28318530717959␤»

[19:22] <TimToady> in case nobody pointed it out, you never need \ on a constant

[19:23] *** gtodd joined
[19:23] *** rurban left
[19:24] <gtodd> m: say grep( { $_ ne (9 and 7) }, (1..10) ); 

[19:24] <camelia> rakudo-moar c6cc8a: OUTPUT«(1 2 3 4 5 6 8 9 10)␤»

[19:24] <Hotkeys> TimToady: what if I like the slash

[19:24] *** ChoHag left
[19:24] *** ChoHag joined
[19:24] <gtodd> m: say grep( { ($_ ne 9 ) and ($_ ne 7) }, (1..10) );

[19:24] <camelia> rakudo-moar c6cc8a: OUTPUT«(1 2 3 4 5 6 8 10)␤»

[19:26] *** asdfasdf joined
[19:26] <El_Che> masak: what is the expected behaviour of :== when updating the alias? die? exeption? I am updating the documentation

[19:26] <El_Che> (expected as "not now") :)

[19:26] *** asdfasdf left
[19:27] <masak> El_Che: after failing to correctly demonstrate what the "read-only" part of the binding consists of, I think I'm the wrong person to ask for further explanation ;)

[19:27] <jnthn> It's more "signature bind" semantics than readonly these days

[19:27] <dalek> rakudo/nom: 887c937 | TimToady++ | src/ (16 files):

[19:27] <dalek> rakudo/nom: please return Nil for no value, not a typeobject

[19:27] <dalek> rakudo/nom: 

[19:27] <dalek> rakudo/nom: We didn't clarify this till recently, so I assume these are mostly fossils.

[19:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/887c937d1d

[19:27] <El_Che> masak: I thought it was a bug or something not implementing yet

[19:27] <masak> maybe ask someone else on the channel to demonstrate an observable difference between := and ::=

[19:28] <TimToady> Hotkeys: are you a mad slasher? :P

[19:29] *** b7j0c joined
[19:29] <japhb> .oO( I will slash you *forwards*, and then I will slash you *backwards*!  Mua-ha-ha-haaaaa .... )

[19:29] <El_Che> while I am writing something in p6, I try to make a habit to change the doc if needed. I changed my local fork to provide an example like used in := (with the assumption that read-only meant 'read-only' :) )

[19:29] <gtodd> it's a bad example but in general does a construct like:    grep { ($_ ne 9 ) and ($_ ne 7)  } , (1..10)    telling me "Hey you should use junctions" 

[19:29] *** vendethiel joined
[19:29] <gtodd> m: grep { $_ ne any(7, 9 ) } , (1..10) ;

[19:29] <camelia> rakudo-moar c6cc8a: ( no output )

[19:30] <gtodd> m: say grep { $_ ne any(7, 9 ) } , (1..10) ;

[19:30] <camelia> rakudo-moar c6cc8a: OUTPUT«(1 2 3 4 5 6 8 10)␤»

[19:30] <TimToady> m: say ord ""

[19:30] <camelia> rakudo-moar c6cc8a: OUTPUT«(Int)␤»

[19:30] <jnthn> gtodd: It's a good place for them, yes

[19:30] <b7j0c> are there predefined subsets? seems like we will have a ton of people constantly redefining `subset Pos of Int where * > 0`;

[19:31] <El_Che> I'll hold the bug report about ::= until someone here confirms read only means something else. In that case I'll change the wording of the documentation.

[19:31] <nine> https://www.addedbytes.com/blog/if-php-were-british/

[19:32] <TimToady> m: say ord ""

[19:32] <camelia> rakudo-moar 887c93: OUTPUT«Nil␤»

[19:32] <japhb> My strategy of "outlast the rainstorm before heading to dinner" seems to have succeeded!  \o/

[19:32] * japhb thus heads to dinner ...

[19:32] <jnthn> b7j0c: Not really, but no reason somebody can't make a module of common ones, if there's demand.

[19:32] <El_Che> jnthn: sorry, I didn't get the signature bind thing.

[19:33] <b7j0c> jnthn: cool, okay, guess i could be first and claim my place in perl6 lore....

[19:33] <gtodd> jnthn: thanks ... going through the docs thinking of where/how one line use cases could be added to things ... a "$self documentation" patch that helps me learn/remember

[19:34] *** empT joined
[19:35] *** pwd_ left
[19:36] <b7j0c> what are people's feelings about threadsafety? should modules with mutable state try to guarantee their own safe concurrent use? or would people be happier for the caller to manage that on their own? in Go-land, package writers tend to take on responsibility for safe concurrency in their libs...

[19:36] <Skarsnik> hm, I don't get why something like (json) {"roles": [{"managed": false, ...cut }]} make me iterate over roles with for %data<roles>[0] -> %role; 

[19:37] <MadcapJake> nine: that was hilarious

[19:37] <b7j0c> i feel like it hasn't sunk in with people that perl6 is fully capable in this regard....i'm expecting a lot of people to write modules that are just perl5+better syntax

[19:37] <Hotkeys> TimToady: I prefer hash-slinging slasher

[19:38] * TimToady wants hash for lunch, but the leftover chinese food is probably healthier...

[19:38] <jdv79> b7j0c: so blog about it:)

[19:39] *** Deepak joined
[19:39] <b7j0c> jdv79: :) ....but also, i wonder if we should have a "is-threadsafe" column on modules.perl.org

[19:39] <jdv79> real corned beef hash would be nive

[19:39] <mspo> http://s3-media4.fl.yelpcdn.com/bphoto/dIHsOZIKzNGKdwTG73Frfw/o.jpg

[19:40] <jdv79> but idk about in berlin

[19:40] <jdv79> *nice

[19:40] <TimToady> Mary Kitchen is the best cbh here in CA

[19:40] * MadcapJake drools

[19:40] <El_Che> b7j0c: threadsafe is nice :)

[19:40] <mspo> that's short rib hash from cafe cluny in nyc, though

[19:40] <jdv79> i know a place in nnj.  i need to sesrch tomorrow

[19:41] <jdv79> that makes their own i mean

[19:41] <mspo> the poached eggs really do it

[19:41] <TimToady> alas, can't have that part

[19:41] <ChoHag> Previously (twoish months ago) I could write $method.wrap(sub ($instance:) { ... } }, but now I'm told that I can 'only use the : invocant marker in the signature for a method'.

[19:41] <colomon> huh.  do we have an idiom for reading a file in stages?  I use for lines() { when /* something */ } for files where it’s all the same, but that seems like it would get awkward for a file which has distinct sections.

[19:42] <gtodd> I've always been a hacker of manual pages ... using groff to add MY NOTES sections etc.  this got me thinking it might be neat (possibly already proposed) if people could personalize their p6docs by having a POD section that links to notes/snippets/examples/internal projects and other resources that appears as a llink under See Also or something ... but only if the notes exist 

[19:42] <TimToady> ChoHag: just s/sub/method/ and it should work

[19:42] <mspo> TimToady: egg allergy?

[19:42] <TimToady> yup

[19:42] <mspo> sucks

[19:42] <jdv79> mspo: u in nyc?

[19:42] <TimToady> sucks eggs!

[19:42] <ChoHag> Is that error wrong? The anonymous sub in this instance is a method.

[19:42] <ChoHag> Heh bad choice of words.

[19:42] <mspo> jdv79: I had to leave about 18 months ago

[19:42] <jdv79> :(

[19:42] <mspo> jdv79: but still think about breakfast at cafe cluny :)

[19:43] <mspo> jdv79: I could only afford one 3x expense (rent) but not two (rent + childcare)

[19:43] <leont> Anyone got a clue what «Unhandled exception in code scheduled on thread 6 Can only perform big integer operations on concrete objects» means?

[19:43] <TimToady> m: method ($instance:) { say "Hi, I'm anonymous" }

[19:43] <camelia> rakudo-moar 887c93: ( no output )

[19:43] <leont> --ll-exception doesn't add any information

[19:43] <ChoHag> The anonymous sub in this case is a method.

[19:43] <gtodd> it would work with p6doc and with the app.pl plack webserved variety ... perhaps people could push / share additions to the official docs p6notes would gradually eat evernote's market share etc.

[19:44] <TimToady> m: my $m = method ($instance:) { say "Hi, I'm anonymous" }; 42.$m

[19:44] <camelia> rakudo-moar 887c93: OUTPUT«Hi, I'm anonymous␤»

[19:44] <ChoHag> Gah! Is freenode still under attack or is my ISP's admin still fucking up with routers he doesn't understand?

[19:44] <TimToady> freenode weather has been stormy lately

[19:45] * masak .oO( there ain't no such thing as a free node )

[19:45] <ChoHag> Thanks TimToady.

[19:45] <Skarsnik> sprintf error are quite not fun, you never get the number of the line that fail :(

[19:46] <masak> Skarsnik: probably because it's thrown from nqp

[19:46] <colomon> I see if I do for lines() { } and exit the loop at some point, the next time I call lines() starts from the next line of the file.  Is that a feature or an accident?

[19:47] <TimToady> feature

[19:47] <TimToady> if we don't have a test for it, we oughta

[19:47] <colomon> TimToady++

[19:47] *** uruwi joined
[19:48] <jnthn> masak: Many are, but that doesn't stop them getting backtraces...

[19:48] <masak> jnthn: *nod*

[19:48] <jnthn> So not sure what's up with it. Agree it totally should be getting one.

[19:48] <Skarsnik> Type check failed in binding $format; expected Cool but got Any

[19:48] <Skarsnik>   in method throw at /root/.rakudobrew/moar-nom/install/share/perl6/runtime/CORE.setting.moarvm:1

[19:48] <Skarsnik>   in method guild-channels at /root/piko/Discord/lib/Discord.pm6:133

[19:49] <Skarsnik> the sprintf is at line 134

[19:49] <TimToady> lines appears to be rather thoroughly tested

[19:49] *** yqt joined
[19:50] *** n0tjack left
[19:50] *** kaare_ left
[19:51] *** uruwi left
[19:52] <mspo> what does 'deadly parasitic' mean in https://raw.githubusercontent.com/perl6/mu/master/docs/Perl6/Cheatsheet/cheatsheet.txt

[19:53] *** hankache left
[19:53] *** uruwi joined
[19:54] <TimToady> it means it kills its host rather than just making it sick

[19:56] <DrForr> nine: 'use Inline::Perl5' is throwing "No such method 'abpath' for invocant of type 'CompUnit::Repository::FileSystem'". There's an abspath attribute in IO::Local, and it's used in the core in DIR-GATHER.

[19:56] <Zoffix> I'm done with my Advent post that's going live in 4 hours. If anyone wants to review it and see whether it's sane that's welcome :) https://perl6advent.wordpress.com/?p=2885&preview=true

[19:56] <jnthn> lizmat: re https://rt.perl.org/Ticket/Display.html?id=126789 your expectations are wrong; CATCH is a phaser and so block-level, it doesn't matter where textually it is in the sub.

[19:57] <Zoffix> It's a bit off from what I imagined it being when I first planned it, but that's what you get when you write part of a piece drunk and part of it hungover :P

[19:57] <cognominal> well, it replace organs instead of merely augmenting the host. I don't think it is supposed to be deadly.

[19:58] *** n0tjack joined
[19:59] <mspo> who knew the comma was so deadly

[19:59] <dalek> Inline-Perl5: 256b14a | (Stefan Seifert)++ | lib/Inline/Perl5.pm6:

[19:59] <dalek> Inline-Perl5: Fix "No such method 'abpath' for invocant of type 'CompUnit::Repository::FileSystem'"

[19:59] <dalek> Inline-Perl5: 

[19:59] <dalek> Inline-Perl5: Thanks to DrForr++ for the heads up!

[19:59] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/256b14a490

[19:59] <cygx> can someone check that https://github.com/perl6/roast/pull/82 is sane?

[19:59] <DrForr> Now *that's* what I call service :)

[19:59] <DrForr> nine++ # fast turnaround :)

[20:00] <Zoffix> nine++ :)

[20:02] <El_Che> MadcapJake: looking forward to your atom perl6 linter and autocomplete work. I tried atom recently for perl6 and went back to vim because it didn't do more thatn vim. I will give it a go again then :)

[20:03] <DrForr> There's also a circular module loading in t/v6.t but I've been bypassing testing.

[20:03] <jdv79> nine++

[20:04] <TimToady> huh, this makes no sense at all: return 0.5 if nqp::uc($ac) eq nqp::lc($bc);

[20:05] *** Deepak left
[20:05] <cognominal> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L4554 <== I have trouble to understand this line.  The goal is to lexically augment the grammar. It is lexically augmented because o https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L4554  sets a lexical %*MAIN      That, I get.  But I don't understand the purpose of  :my  $stub       The $stub var not being used, I would guess it is to avoid a closure. But why?.

[20:06] <cognominal> ho, the getlex !

[20:07] <cygx> should the comparison of C, Perl5 and Perl6 open modes from https://github.com/rakudo/rakudo/commit/36f773eb0 be included in the user-level documentation?

[20:07] <cygx> (ie http://docs.perl6.org/routine/open )

[20:07] <flussence> TimToady: I've no idea if it's meant to be this, but that line reads to me as «return 0.5 if $ac eq $bc and none($ac, $bc) ~~ any(@case-flippable-chars)»

[20:08] <cognominal> if no teddybear or poulp  available, ask the question in an IRC channel :)

[20:08] <DrForr> Beware of poulp fiction though.

[20:08] <TimToady> I think it is intended to treat case changes as less cost, but it fails at that

[20:09] <cognominal> DrForr++

[20:09] * TimToady is changing it to: return 0.1 if nqp::fc($ac) eq nqp::fc($bc);

[20:10] * Zoffix begins operation TTIAEMATTFTTF

[20:10] <Zoffix> Try To Install All Ecosystem Modules And Try To Fix Those That Fail. Running this 1-liner: perl -MMojo::UserAgent -wlE 'open my $fh, ">", "errors.txt" or die $!; for (@{Mojo::UserAgent->new->get("http://modules.perl6.org/")->res->dom->find(q{[href^="/dist"]})->map("all_text")->to_array}) {my $o = `panda install $_`; say $o; $o =~ /Successfully installed/ or do { say "FAILED: $_"; say $fh $_; }}'

[20:11] <DrForr> Doesn't panda have a 'smoke' or 'all' option?

[20:12] *** pwd_ joined
[20:13] <Skarsnik> Zoffix, have fun!

[20:13] <dalek> rakudo/nom: c8bd575 | TimToady++ | src/Perl6/World.nqp:

[20:13] <dalek> rakudo/nom: make levenshtein treat caps differences as cheap

[20:13] <dalek> rakudo/nom: 

[20:13] <dalek> rakudo/nom: The code tried before, but failed by comparing a uc with an lc.

[20:13] <dalek> rakudo/nom: Also, .5 isn't cheap enough to catch a capslock failure. :)

[20:13] *** n0tjack left
[20:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c8bd575d59

[20:14] <ab6tract> if i use lib './lib' 

[20:14] <ab6tract> is there any precomp going on there?

[20:14] *** darutoko left
[20:14] <Zoffix> DrForr++ Indeed it does! "smoke          Tests and installs all packages. (Not for typical use.)"

[20:14] * Zoffix tries that instead

[20:15] <TimToady> m: COMPLEX

[20:15] <DrForr> I just reinstalled it, only reason I noticed it.

[20:15] <jdv79> ab6tract: why are you six and not five?

[20:15] <camelia> rakudo-moar 887c93: OUTPUT«5===SORRY!5=== Error while compiling /tmp/VLhZDmpFd8␤Undeclared name:␤    COMPLEX used at line 1␤␤»

[20:15] <flussence> I'm looking at CompUnit::Repository::FileSystem and noticed line 33 passes an IO::Path to IO::Path.new-from-absolute-path while line 46 passes a string. The latter works, former explodes. Bug in that IO::Path method?

[20:15] <ab6tract> TimToady: it took a year, but I've got something resembling a matrix-y screensave with Terminal::Print :D

[20:15] <DrForr> jdv79: We want... information.

[20:15] <ab6tract> jdv79: I'm on my laptop

[20:16] <flussence> (fixing this would restore META6.json reading to working order)

[20:16] <nine> ab6tract: yes

[20:17] <nine> flussence: the IO::Path.new-from-absolute-path seems redundant

[20:17] <ab6tract> nine: but does it re-comp the precomp when i've changed a file? :)

[20:17] <nine> flussence: I replaced most of the Str usage by IO::Path but may have overlooked some not tested places

[20:17] <nine> ab6tract: yes

[20:18] <flussence> nine: yeah, I wouldn't be surprised if I was the only person using that codepath regularly :)

[20:18] *** n0tjack joined
[20:18] <ab6tract> nine: great :D

[20:20] * colomon just spent a very frustrating five minutes trying to figure out why his code wasn’t working, when it turned out that the actual bit that wasn’t working was the “say” statement that was supposed to print the results.  :\

[20:21] <DrForr> There's also a bug at t/precomp.t line 13 - "Too many positionals passed; expected 1 argument but got 2" and a circular module loading in t/v6.t - Haven't looked at it in any depth though.

[20:21] <jdv79> colomon: thatd be like one half hour for me;)

[20:22] <colomon> jdv79: the actual problem was that I forgot the “say” part of the say statement.  <sigh>

[20:22] <jdv79> cinco minuten.  pfft.

[20:23] <jdv79> :)

[20:23] *** n0tjack left
[20:24] *** Ch0c0late left
[20:25] *** hankache joined
[20:28] <Skarsnik> Zoffix, you will probably have issue with the C binding module :)

[20:28] *** cpage_ left
[20:28] *** geraud joined
[20:28] <TimToady> someone needs to update the cheatsheet; for instance, there's no parcels anymore

[20:31] <TimToady> m: COMPLEX

[20:31] <camelia> rakudo-moar c8bd57: OUTPUT«5===SORRY!5=== Error while compiling /tmp/zM_zZ6RQx0␤Undeclared name:␤    COMPLEX used at line 1. Did you mean 'Complex'?␤␤»

[20:31] <TimToady> there we go

[20:32] *** ollej left
[20:32] <timotimo> TimToady: if we put a check for the "original" value into the levenshtein routine (that is, distance 0), we should be able to get rid of bogus levenshtein errors where it suggests something else and when you use that something else, it'll suggest what you just typed ... or something like that

[20:33] <timotimo> the places where i put the <typo_typename> (or what i called it) aren't 100% robust to other failure scenarios

[20:33] <timotimo> so a parse error after a type can sometimes trigger the levenshtein erroneously

[20:33] <timotimo> my Complex"" $a;

[20:33] <timotimo> m: my Complex"" $a;

[20:33] <camelia> rakudo-moar c8bd57: OUTPUT«5===SORRY!5=== Error while compiling /tmp/RV2LpuOKK1␤Malformed my␤at /tmp/RV2LpuOKK1:1␤------> 3my Complex7⏏5"" $a;␤»

[20:33] <timotimo> hm.

[20:33] <timotimo> i don't have a good way to provoke it now for testing

[20:34] <TimToady> yeah, I fixed some of those a few weeks ago, but probably not all

[20:34] *** espadrine joined
[20:34] <timotimo> oh, very good

[20:34] <MadcapJake> Zoffix++ # great advent post! Love the theme and code explanations are very informative!

[20:35] <ChoHag> Is there any way to declare circular class dependencies other than by creating them all in the same file?

[20:36] <Skarsnik> what is the best way to clear an array?

[20:36] <TimToady> = () is fine

[20:37] <stmuk_> the cheatsheet in star is updated the mu one probably needs deleting

[20:38] <TimToady> +1

[20:39] <TimToady> but there might be links to it that need a redirect

[20:40] *** Calibellus joined
[20:40] *** hankache left
[20:42] <stmuk_> AFAIK it's not on the web

[20:43] <mspo> perl6 --doc=cheat ?

[20:43] <timotimo> even if it's not on the web, people may link to the github directory directly, or to the raw itself?

[20:44] <moritz> let's hope they'll ask here when it becomes a 404

[20:44] <mspo> I noticed perl6 (the command) lost -a and -0

[20:44] <moritz> mspo: I don't think it ever had them

[20:44] <stmuk_> it probably should be under doc TBH

[20:44] <stmuk_> p6doc

[20:44] *** lostinfog joined
[20:44] <mspo> moritz: well vs perl(1)

[20:44] <stmuk_> and star use that one

[20:46] *** rindolf left
[20:47] * Skarsnik need someone to write a module that save a http session with http::ua. is bored of waiting for the webserver he is playing around*

[20:48] <flussence> Skarsnik: is your complaint there, that someone else's server is too slow?

[20:49] <ChoHag> What does 'is required' actually do? Previously I could declare an attribute is required and provide a default.

[20:49] <flussence> what I'd do in that case is set up a local proxy and have it aggressively cache everything

[20:50] <ChoHag> In theory the default should make the required trait superfluous, but semantically I prefer to have it. Now, however, I am told that a required attribute does not have a value provided.

[20:50] <dalek> roast: bfcd27b | cygx++ | S32-io/open.t:

[20:50] <dalek> roast: add S32-io/open.t that tests extended open modes

[20:50] <dalek> roast: review: https://github.com/perl6/roast/commit/bfcd27b77d

[20:50] <dalek> roast: 20303fe | jnthn++ | S32-io/open.t:

[20:50] <dalek> roast: Merge pull request #82 from cygx/master

[20:50] <dalek> roast: 

[20:50] <dalek> roast: add S32-io/open.t that tests extended open modes

[20:50] <dalek> roast: review: https://github.com/perl6/roast/commit/20303fec9e

[20:50] <stmuk_> lol is dead isn't it?

[20:50] <Skarsnik> flussence, that could be an idea x)

[20:50] <moritz> Skarsnik: yes

[20:51] <TimToady> stmuk_: yes

[20:51] <moritz> erm yes, meant stmuk_ 

[20:51] <flussence> ChoHag: «is required» makes it required at constructor time. «is default» just changes the default value (when uninitialized or $.var = Nil) to something other than an undefined type object

[20:51] * moritz must remember to type at least two characters before hitting the tab key

[20:52] <ChoHag> So the required trait specifically refers to object construction and nothing else?

[20:52] <Skarsnik> but should not be to hard to have like a $ua.saveSession("file"); do request; and next time you can do a $ua.playsessoin("file"); 

[20:52] <stmuk_> ok I'm going to try and merge the two cheatsheets

[20:52] <ChoHag> ie. I could remove an attributes value afterwards despite the trait's presense?

[20:52] <flussence> ChoHag: yep

[20:52] <stmuk_> "v5"

[20:52] <ChoHag> Right.

[20:53] <flussence> and if you want it to *stay* defined, you'd need a type constraint instead

[20:53] <mrf_> ok  pl6 and pod6 should be recognised as the correct filetype in vim. pr was merged 

[20:53] <timotimo> nice

[20:54] <mst> and pm6 as well?

[20:54] <mst> or are we still doing "let's have plain .pm files with no 'use v6;' so we screw over anybody trying to do hybrid projects" ?

[20:54] <mrf_> mst: p6 and pm6 already did the right thing

[20:55] *** raiph joined
[20:55] * flussence circumvented that whole problem, years ago apparently, by having ~/.vim/filetype.vim check for 'perl6' in the path instead

[20:55] <mst> mrf_: awesome

[20:56] <flussence> (and a whole bunch of other ugly stuff I really ought to clean up from there)

[20:58] <flussence> if I can finally get rid of this monkey-patched s:FTpl() that'd be nice, though...

[21:03] <stmuk_> is KeyHash dead?

[21:04] <[Coke]> mst: use v6 is no longer really helpful now that we have use v6.c

[21:04] <[Coke]> (as far as for p5 interop goes)

[21:04] <flussence> oh, hang on... I've got vim-perl installed and it already does all this ftdetect stuff correctly, gah

[21:04] <[Coke]> perl5 -e 'use v6' #helpful

[21:04] <[Coke]> perl5 -e 'use v6.c' #boom

[21:05] *** uruwi left
[21:05] *** ab6tract left
[21:07] <timotimo> stmuk_: do you mean SetHash?

[21:07] <jnthn> [Coke]: Yes, a tad unfortunate...

[21:07] <mst> [Coke]: hmm?

[21:07] *** bjz left
[21:08] <mst> [Coke]: 'use v6;' is still useful for static analysis, at least

[21:08] <stmuk_> timotimo: I think SetHash used to be KeyHash

[21:08] *** n0tjack joined
[21:08] <hoelzro> MadcapJake++ # advent post

[21:08] <moritz> https://doc.perl6.org/ # we have ssl here too

[21:09] * flussence is just going to stick to writing code with an unadorned 'use v6;' for as long as practical, same as with '<!doctype html>'

[21:10] <nine> [Coke]: there's still: use v6; use v6.c; # but of course thats horrible

[21:10] <jnthn> mst: Yes, but since Perl 6 language versions look like 6.c, 6.d, etc. to placate certain Perl 5 people (as opposed to 6.0, 6.1, etc) then folks will write `use v6.c` and so forth. And `use v6.c` doesn't (yet? :)) get a useful error out of Perl 5.

[21:10] *** bpmedley left
[21:10] <jdv79> is use v6.*; going to work?

[21:11] <moritz> m: use v6.*; say 42

[21:11] <camelia> rakudo-moar c8bd57: OUTPUT«42␤»

[21:11] <mst> jnthn: I would be perfectly happy with .pm6 instead

[21:11] <jdv79> id like use v6 for lang detect but "cur ver"

[21:11] *** cdg joined
[21:11] <stmuk_> vimdiff++ # good for merging forked files (like cheatsheet) into one

[21:11] <moritz> jdv79: it seems to work already

[21:11] <mst> jnthn: but 'use v6' as a thing to regexp for seems useful for tooling to know which highlighter to use

[21:11] <jdv79> jnthns pist didmt address it

[21:11] <mst> jnthn: even if the perl5 VM doesn't co-operate as well as we'd like

[21:11] <jdv79> why im asking

[21:12] <jdv79> post

[21:12] <jnthn> mst: Yes, I was thinking of the "accidentally fed Perl 6 code to perl5" case.

[21:12] * Zoffix doesn't think that case is all that important

[21:12] <jnthn> Possibly not.

[21:12] <mst> jnthn: sure. and I'm thinking about all the other cases that I actually care about :)

[21:12] <leont> well, if it contains a full perl6 shebang, it should redirect correctly in 5.24 and up

[21:12] <mst> aha, the shebang regexp has been tweaked?

[21:13] <mst> 'regexp'

[21:13] <leont> Yeah, but I was slightly too late for 5.22

[21:13] <mst> welp, #!/usr/bin/rakudo it is then

[21:13] *** n0tjack left
[21:14] * flussence was going to suggest something silly, but /use v6s+S/ seems to be a flat syntax error in perl5

[21:14] <mst> yep

[21:14] <moritz> https://design.perl6.org/ # more SSL goodness

[21:14] * mst still finds 6.c really weird

[21:15] <Zoffix> m: v6.b before v6.c

[21:15] <camelia> rakudo-moar c8bd57: OUTPUT«WARNINGS:␤Useless use of "before" in expression "v6.b before v6.c" in sink context (line 1)␤»

[21:15] <Zoffix> m: say v6.b before v6.c

[21:15] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:15] <Zoffix> :)

[21:15] <flussence> must be special-cased in the parser, because /use $anything_that_isnt_v_plus_number/ throws a different error

[21:16] <mst> yes, because 5.014002 and v5.14.2 are a special case of 'use' syntax

[21:17] <leont> Well, all of use is special in p5, really

[21:17] *** n0tjack joined
[21:17] <flussence> I was kinda hoping we could bury the 6.c bit in an import argument and everyone's binaries would be happy then, looks like it'll just have to be another special case

[21:17] *** Zoffix left
[21:17] *** vendethiel- joined
[21:18] <jdv79> ~~~~p

[21:18] <jdv79> oops

[21:18] <timotimo> :!p

[21:18] <vendethiel-> gfldex: nice advent post... maybe a bit too fast, but good nevertheless :)

[21:18] <dalek> doc: e210721 | (Claudio Ramirez)++ | doc/Language/io.pod:

[21:18] <dalek> doc: Add info exclusion new line reparator by .lines

[21:18] <dalek> doc: review: https://github.com/perl6/doc/commit/e210721589

[21:18] <dalek> doc: b03fe29 | (Claudio Ramirez)++ | doc/Type/IO/Handle.pod:

[21:18] <dalek> doc: Add info exclusion new line reparator by .lines + fix typo in example

[21:18] <dalek> doc: review: https://github.com/perl6/doc/commit/b03fe29c52

[21:18] <dalek> doc: e647af5 | moritz++ | doc/ (2 files):

[21:18] <dalek> doc: Merge pull request #221 from nxadm/master

[21:18] <dalek> doc: 

[21:18] <dalek> doc: Add info exclusion new line reparator by .lines + fix typo in example

[21:18] <dalek> doc: review: https://github.com/perl6/doc/commit/e647af50be

[21:19] *** vendethiel left
[21:19] *** uruwi joined
[21:21] *** n0tjack left
[21:25] *** bjz joined
[21:25] <[Tux]> Added the basic EOL tests now that the two EOL tickets have been fixed. (forgot to re-enable the tests at the moment of fix)

[21:26] <[Tux]> All tests successful.

[21:26] <[Tux]> Files=26, Tests=19960, 40 wallclock secs ( 3.18 usr  0.18 sys + 100.74 cusr  1.85 csys = 105.95 CPU)

[21:26] <[Tux]> Result: PASS

[21:26] <[Tux]> only 40 more tests for 20000

[21:26] <[Tux]> <travis-ci> Tux/CSV#170 (master - 7cc6fde : H.Merijn Brand - Tux): The build passed.

[21:28] <[Tux]> test             50000    23.107    22.996

[21:28] <[Tux]> test-t           50000    16.626    16.515

[21:28] <[Tux]> 16.6 :):)

[21:28] <[Tux]> sleep tight

[21:28] <dalek> mu: 82cd343 | (Steve Mynott)++ | docs/Perl6/Cheatsheet/ (2 files):

[21:28] <dalek> mu: Update the txt cheatsheet based on the different forked version in the star repo.  Both versions contained outdated info and this version should be definitive for the moment Add a README to warn against this happening again

[21:28] <dalek> mu: review: https://github.com/perl6/mu/commit/82cd343041

[21:29] <cygx> flussence: masak: https://gist.github.com/cygx/96350b691d622d5b4ac1

[21:30] <leont> What's the most convenient way to get the "\r\n" synthetic into a character class?

[21:30] <nine> \o/

[21:30] <dalek> mu: 78598df | ab5tract++ | misc/perl6advent-2015/schedule:

[21:30] <dalek> mu: Adjust schedule

[21:30] <dalek> mu: 

[21:30] <dalek> mu: I cannot make the deadline for the 6th.

[21:30] <dalek> mu: review: https://github.com/perl6/mu/commit/78598dfe02

[21:31] <cygx> leont: I'm guessing \v is not an option?

[21:31] <nine> I think I've got the hardest part of %?RESOURCES figured out

[21:31] <leont> No, I need \n, \r or \r\n

[21:31] <leont> \v is more than that

[21:31] <moritz> m: say so "\r\n" ~~ /^<[\r\n]>$/

[21:31] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:31] <[Coke]> leont: I'd probably make it an alternation with the class.

[21:31] *** ab6tract joined
[21:32] <moritz> m: say so "\r\n" ~~ /^<[\n\r\n]>$/

[21:32] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:32] <moritz> m: say so "\n" ~~ /^<[\n\r\n]>$/

[21:32] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:32] <moritz> m: say so "\r" ~~ /^<[\n\r\n]>$/

[21:32] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:32] <moritz> m: say so "\r" ~~ /^\n$/

[21:32] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:32] <moritz> m: say so "\r\n" ~~ /^\n$/

[21:32] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:32] <jnthn> \n is logical

[21:32] <moritz> m: say so "\n" ~~ /^\n$/

[21:32] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:32] <moritz> leont: it seems simply \n does exactly what you want

[21:32] <ab6tract> moritz: in the end I can't do a post for the 6th :(

[21:32] <leont> I thought \n also matched some unicode line endings

[21:32] <moritz> ab6tract: :(

[21:33] <moritz> ab6tract: can you do it for later?

[21:33] <ab6tract> i can still do the 10th tho

[21:33] <moritz> ab6tract: ok

[21:33] <leont> (as in, when outside a character class)

[21:33] <ab6tract> i updated mu already

[21:33] <jnthn> afaik it's logical inside a char class too

[21:33] <cygx> m: say "\r\n" ~~ /^<[\n]>$/; say "\r\n" ~~ /^<[\v]>$/

[21:33] <camelia> rakudo-moar c8bd57: OUTPUT«｢

[21:34] <cygx> huh

[21:34] <leont> m: say so "\r\n" ~~ /^<[\n]>$/; say so "\r\n" ~~ /^<[\v]>$/

[21:34] <camelia> rakudo-moar c8bd57: OUTPUT«True␤False␤»

[21:34] *** uruwi left
[21:34] <cygx> what's up with that?

[21:34] <moritz> ShimmerFairy: would you like to do an advent post about Grammar::Parsefail?

[21:35] *** bjz left
[21:35] <leont> m: say so "\x{2028}" ~~ /^<[\n]>$/;

[21:35] <camelia> rakudo-moar c8bd57: OUTPUT«5===SORRY!5=== Error while compiling /tmp/V_JtO9UmiG␤Unsupported use of curlies around escape argument; in Perl 6 please use square brackets␤at /tmp/V_JtO9UmiG:1␤------> 3say so "\x{7⏏052028}" ~~ /^<[\n]>$/;␤»

[21:35] <leont> m: say so "\x[2028]" ~~ /^<[\n]>$/;

[21:35] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:35] <leont> :-(

[21:36] <moritz> m: say so "\r\n" ~~ /^ <[ \r\c[LF] ]> $/

[21:36] <camelia> rakudo-moar c8bd57: OUTPUT«True␤»

[21:36] <stmuk_> https://github.com/rakudo/star/pull/58

[21:37] <[Coke]> if you want to match explicit code points, use them, not \n.

[21:37] <moritz> m: say so m/^ <[ \r\c[LF]]> $/ for "\r", "\r\n", "\n", "\x[2028]"

[21:37] <camelia> rakudo-moar c8bd57: OUTPUT«False␤True␤False␤False␤»

[21:37] <[Coke]> more like that, aye.

[21:37] <moritz> m: say so m/^ <[ \r \r\c[LF]]> $/ for "\r", "\r\n", "\n", "\x[2028]"

[21:37] <camelia> rakudo-moar c8bd57: OUTPUT«True␤True␤False␤False␤»

[21:37] <moritz> m: say so m/^ <[ \c[LF] \r \r\c[LF]]> $/ for "\r", "\r\n", "\n", "\x[2028]"

[21:37] <camelia> rakudo-moar c8bd57: OUTPUT«True␤True␤True␤False␤»

[21:38] <moritz> leont: ^^ that looks good

[21:38] <leont> Yes, that does look good :-)

[21:38] <vendethiel-> well, looks like php 7 just got released :P

[21:38] <dalek> star: b1970f8 | (Steve Mynott)++ | docs/cheatsheet.txt:

[21:38] <dalek> star: reimport from mu repo golden source

[21:38] <dalek> star: review: https://github.com/rakudo/star/commit/b1970f865e

[21:38] <dalek> star: 5b7b267 | moritz++ | docs/cheatsheet.txt:

[21:38] <dalek> star: Merge pull request #58 from stmuk/master

[21:38] <dalek> star: 

[21:38] <dalek> star: reimport cheatsheet from mu repo golden source

[21:39] <dalek> star: review: https://github.com/rakudo/star/commit/5b7b2679d3

[21:39] <leont> vendethiel-: surely their timing is deliberate :-p

[21:39] <vendethiel-> leont: Definitely! :P

[21:39] <cygx> it's not yet too late to rename Perl6 to Perl7 ;)

[21:39] <[Coke]> cygx: ENOFUNNY

[21:40] * moritz does find it amusing

[21:40] *** bjz joined
[21:40] * moritz find it highly satisfactory that Perl 6 delivers on the Unicode promise, where PHP threw it out, along with the 6 in the version number

[21:41] <stmuk_> what about Swifter 7?

[21:41] <stmuk_> I'm sure Apple's lawyers would be fine :)

[21:42] <colomon> do we have a baked-in grammar token (or whatever) for matching floating point numbers?

[21:42] *** jpoehls_ joined
[21:43] <moritz> colomon: no

[21:44] <moritz> colomon: I wrote my own for JSON::Tiny

[21:44] <moritz> (which you can steal :-)

[21:44] <colomon> moritz++ # enabling theft

[21:45] *** bjz left
[21:47] *** atweiden left
[21:47] <cygx> 'night o/

[21:47] *** cygx left
[21:47] <vendethiel-> also, swift open source: https://github.com/apple/swift

[21:47] <colomon> \o

[21:49] <moritz> exciting times for a language geek

[21:49] <moritz> time to sleep, to be precise :-)

[21:49] <moritz> o/

[21:50] <colomon> o\

[21:50] *** jpoehls_ left
[21:56] <dalek> doc: 7c0d062 | (Steve Mynott)++ | doc/Type/Cool.pod:

[21:56] <dalek> doc: remove refs to KeySet and KeyHash

[21:56] <dalek> doc: review: https://github.com/perl6/doc/commit/7c0d062fe1

[21:57] <autarch> has there been any discussion on publicity plans for the Perl 6 release?

[21:58] <autarch> it'd be cool if someone could write an article for LWN, and I suspect they'd be interested in publishing it

[21:59] <jdv79> autarch: why can you not?

[21:59] <autarch> jdv79: I was hoping someone else would volunteer ;)

[21:59] <autarch> they pay actual money!

[21:59] <jdv79> but youre good

[22:00] <jdv79> jfdi:)

[22:00] <autarch> easy for you to say ;)

[22:01] <autarch> I'll ask them

[22:01] <autarch> ... unless someone else really wants to do it, which I'm 110% okay with ;)

[22:01] <jdv79> i vote for autarch

[22:01] <leedo> autarch: i'm trying to get an article up on Ars Technica for the release

[22:01] <autarch> I note for !autarch

[22:02] <autarch> vote*

[22:02] <jdv79> haha

[22:02] <autarch> maybe just nautarch

[22:02] <jdv79> wut

[22:02] <autarch> it's a new operator I'm defining in Perl 6 - it resolves to "not me"

[22:02] *** skids left
[22:04] <jdv79> autarch: thanks!

[22:06] *** raiph left
[22:07] <mst> autarch++ # well volunteered

[22:07] * autarch writes the operator right now

[22:07] <mst> TOO LATE

[22:10] *** lestrrat left
[22:13] *** lestrrat joined
[22:15] <jnthn> 'night, #perl6

[22:18] *** xfix left
[22:31] *** cpage_ joined
[22:32] <jdv79> nite

[22:32] *** cpage_ left
[22:33] <jdv79> autarch: we got your back.  dont worry:)

[22:34] <dalek> rakudo/nom: 446ea7b | (Stefan Seifert)++ | src/core/CompUnit/PrecompilationRepository.pm:

[22:34] <dalek> rakudo/nom: Unlock precomp store even if loading a precomp file failed

[22:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/446ea7b8d8

[22:34] *** cpage_ joined
[22:38] *** AlexDaniel joined
[22:39] *** lucasb joined
[22:40] *** zakharyas left
[22:42] <b7j0c> hello, earlier I discussed having a module for some common subset definitions. I created a module "Subsets::Common" following the directions on the 'Modules' documentation page as well as Travis CI integration for my test suite. The `Modules` documentation says I should come in here to have the upload to the modules.perl6.org site complete. The url is https://github.com/bradclawsie/Subsets-Common

[22:43] <b7j0c> could someone assist me with uploading this to the modules site or point me at a guide to do so?

[22:45] *** Peter_R left
[22:46] <leont> You have to fork the ecosystem repo, and add a link to your repo

[22:47] *** Peter_R joined
[22:47] <b7j0c> thanks leont

[22:47] <leont> https://github.com/perl6/ecosystem/

[22:48] *** vendethiel- left
[22:49] * colomon is getting very frustrated trying to use panda post-curli.  :\

[22:51] * leont had to get rid of all previously install modules before it would work normally

[22:51] <AlexDaniel> colomon: you are not alone!

[22:52] *** AlexDaniel left
[22:53] * colomon tries blowing away the entire .rakudobrew directory on his Linux boz

[22:53] <colomon> box

[22:54] <b7j0c> thanks again leont, i made a PR for ecosystem

[22:58] *** AlexDaniel joined
[22:58] *** nadim left
[23:00] <tony-o_> is there a way to manually install modules..

[23:01] *** Amnez777 left
[23:02] *** nadim joined
[23:02] *** cpage_ left
[23:08] *** Amnez777 joined
[23:09] *** aindilis left
[23:10] *** aindilis joined
[23:10] <leont> Not that I know, but I suspect it wouldn't be too hard to write

[23:13] *** nadim left
[23:14] *** nadim joined
[23:16] *** b7j0c left
[23:17] <Skarsnik> Should forcing like having a test with the use Test::Meta for each new module? (And maybe have Test::Meta check if all pm6 file in lib are provided) could be a good idea to ensure a sort of koalitee? x)

[23:17] <tony-o_> great

[23:20] *** kid51 joined
[23:21] <dalek> ecosystem: 8a9c332 | (brad clawsie)++ | META.list:

[23:21] <dalek> ecosystem: Add Subsets::Common

[23:21] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/8a9c33234b

[23:21] <dalek> ecosystem: 7c90a4e | (Steve Mynott)++ | META.list:

[23:21] <dalek> ecosystem: Merge pull request #102 from bradclawsie/master

[23:21] <dalek> ecosystem: 

[23:21] <dalek> ecosystem: Add Subsets::Common

[23:21] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7c90a4eaf8

[23:24] <lucasb> should Task::Star and rakudo star modules always be kept in sync? seems some modules exist in R* but are missing from Task::Star

[23:26] <diakopter> yes

[23:27] <lucasb> p6-Template-Mustache, p6-file-directory-tree, p6-File-Temp, library-make  <-- these

[23:27] <lucasb> tadzik: ^^^

[23:27] <flussence> aren't those just deps of other things?

[23:27] *** uruwi joined
[23:28] <lucasb> flussence: indeed, it may be

[23:28] <flussence> I know the first is, because I had to use --notests to install Bailador because of it...

[23:40] <tadzik> lucasb: yeah, Task::Star is too rarely updated

[23:41] *** csd_ left
[23:41] *** zengargoyle left
[23:42] *** Skarsnik left
[23:44] *** zengargoyle joined
[23:45] *** espadrine left
[23:46] <tony-o_> m: GLOBAL::.values.perl.say;

[23:46] <camelia> rakudo-moar 446ea7: OUTPUT«().Seq␤»

[23:46] <tony-o_> m: GLOBAL::.values.perl.say; require Test;

[23:46] <camelia> rakudo-moar 446ea7: OUTPUT«().Seq␤»

[23:46] <tony-o_> m: GLOBAL::.values.perl.say; require Test; GLOBAL::.values.perl.say;

[23:46] <camelia> rakudo-moar 446ea7: OUTPUT«().Seq␤(Test,).Seq␤»

[23:46] <tony-o_> m: GLOBAL::.values.perl.say; use Test; GLOBAL::.values.perl.say;

[23:46] <camelia> rakudo-moar 446ea7: OUTPUT«(Test,).Seq␤(Test,).Seq␤»

[23:46] <tony-o_> is the rakudo moar old on camelia?

[23:47] <ugexe> 446ea7 is the last commit

[23:47] <tony-o_> m: $*VM.say; $*PERL.say;

[23:47] <camelia> rakudo-moar 446ea7: OUTPUT«moar (2015.11.31.g.670.e.3.d)␤Perl 6 (6.b)␤»

[23:47] <tony-o_> i'm on the same version and doing that GLOBAL::.values dies on the second call

[23:48] <tony-o_> guess i need to nuke

[23:50] *** rurban joined
[23:50] *** rurban left
