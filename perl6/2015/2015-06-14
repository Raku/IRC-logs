[00:00] *** tinyblak left
[00:03] *** b2gills1 is now known as b2gills

[00:07] *** Gardner joined
[00:11] *** Gardner left
[00:12] *** Gardner joined
[00:18] *** jepeway left
[00:32] *** cognominal left
[00:37] *** mr_ron left
[00:41] *** mr_ron joined
[00:57] *** elimik31 joined
[01:06] *** aborazmeh joined
[01:06] *** aborazmeh left
[01:06] *** aborazmeh joined
[01:16] *** elimik31 left
[01:16] *** elimik31 joined
[01:21] <colomon> Any ides what would generate a “Cannot invoke null object” error?  error is occurring in a simple script which has worked for months…

[01:21] <colomon> *ideas

[01:22] *** mr_ron left
[01:34] <colomon> Argh!  can’t install panda on 2015.04 because it doesn’t have unit.  :\

[01:42] *** Gardner left
[01:42] *** elimik31 left
[01:44] <colomon> nor 2015.05

[01:51] <timotimo> i would have mildly preferred putting in the semicolon form instead

[01:51] <timotimo> at least for the time being

[01:52] *** gfldex left
[01:55] <colomon> semicolon form

[01:55] <colomon> ?

[01:57] <colomon> wouldn’t a working patch be to use the { } form instead of unit?

[01:57] <colomon> PS apparently it’s not panda, it’s File::Find, Shell::Command, and JSON::Tiny

[02:06] <colomon> timotimo: any notion if the POD at the end of a module should be included in the {   }

[02:06] <colomon> ?

[02:14] <timotimo> if it's not a #| or #= i don't think it matters

[02:14] <timotimo> er, sorry, i meant the braces form of course

[02:15] *** bjz left
[02:17] *** kurahaupo1 joined
[02:18] *** kurahaupo1 is now known as kurahaupo

[02:18] *** yqt left
[02:19] *** tinyblak joined
[02:22] <colomon> Guess if I had permission to change…  huh, guess I do have commit on JSON::Tiny

[02:23] *** nys left
[02:25] *** Sqirrel left
[02:26] *** noganex joined
[02:28] *** noganex_ left
[02:30] *** cognominal joined
[02:30] *** khisanth_ joined
[02:30] *** Khisanth left
[02:31] <colomon> Argh, is there something very wrong with rakudo causing these Cannot invoke null object messages?

[02:31] * colomon tries clean build

[02:33] *** Sqirrel joined
[02:33] <timotimo> hoelzro put the fix in, but we didn't bump nqp and rakudo yet

[02:34] <colomon> well… if you can point me in the right direction, I’d be happy to do the legwork 

[02:34] <colomon> (the fix is in moar, I take it?)

[02:34] <timotimo> yeah

[02:35] <timotimo> git describe --tags inside MoarVM's checkout will give you what to put into nqp's tools/build/MOAR_REVISION

[02:35] <timotimo> the same dance inside nqp - after commiting the revision bump - gives you what to put into rakudo's tools/build/NQP_REVISION

[02:37] *** AlexDaniel left
[02:39] *** rmgk left
[02:40] *** rmgk joined
[02:41] <dalek> nqp: 436f66b | colomon++ | tools/build/MOAR_REVISION:

[02:41] <dalek> nqp: Use hoelzro++'s latest MoarVM patch.

[02:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/436f66b429

[02:42] <timotimo> it might be a good idea to give a slightly more elaborate explanation

[02:42] <timotimo> like "get the fix for null object invocations'

[02:42] <timotimo> damn, mismatched quotes

[02:43] <colomon> will do in the rakudo checkin

[02:43] <hoelzro> timotimo: now you tell me =)

[02:43] <timotimo> i tell you what exactly? the thing about the bump?

[02:43] <timotimo> i wonder what else got bumped into this

[02:43] <timotimo> oh

[02:43] <timotimo> literally just the one patch

[02:44] <colomon> yeah

[02:44] <colomon> almost done

[02:44] <hoelzro> timotimo: about a better idea for a commit message

[02:45] <hoelzro> I linked to RT, but I should've included the error message

[02:45] <timotimo> oh

[02:45] <timotimo> the rt link is a good place to start

[02:45] <colomon> bother, I’m having trouble with git.

[02:45] <hoelzro> colomon: what kind of trouble?

[02:45] <timotimo> hmm, maybe a userscript that links from github repositories connected to perl6 to rt.perl.org for those would be interesting?

[02:45] <timotimo> a browser userscript, that is

[02:46] <colomon> hoelzro: made my commit to rakudo, but when I push it just says Everythng up-to-date

[02:46] <hoelzro> timotimo: that would be handy

[02:46] <timotimo> colomon: that's very strange :)

[02:46] <colomon> oh, I see

[02:46] <timotimo> hoelzro: i don't know how to userscript :)

[02:46] <hoelzro> timotimo: that makes two of us

[02:46] <hoelzro> ;)

[02:47] <dalek> rakudo/nom: 7fc0782 | colomon++ | tools/build/NQP_REVISION:

[02:47] <dalek> rakudo/nom: Use hoelzro++'s latest MoarVM patch.

[02:47] <dalek> rakudo/nom: 

[02:47] <dalek> rakudo/nom: Get the fix for null object invocations.

[02:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7fc0782eda

[02:47] <colomon> wasn’t on nom

[02:47] <timotimo> what branch were you on, then?

[02:47] <timotimo> it would have had to push something, right?

[02:47] <colomon> no branch

[02:48] <hoelzro> detached HEAD, then?

[02:48] <colomon> guess

[02:48] <timotimo> ah

[02:49] <timotimo> right

[02:50] *** firefish5000 joined
[02:55] <skids> After a stint of adding --configure-opts to "rakudobrew triplet" I was able to verify that that fix fixed Sum.

[02:56] <timotimo> god damn it, all i do these days just breaks moar

[02:56] <hoelzro> timotimo: could've been worse

[02:56] <timotimo> how?

[02:57] <colomon> hoelzro++ timotimo++ # update fixed my issue, now I can get back to $work

[02:57] <hoelzro> also, we have to risk stability a bit to gain speed

[02:57] <timotimo> i stole multiple hours of productivity from people, i bet

[02:57] <hoelzro> timotimo: well, it doesn't block installation entirely, for one

[02:57] <timotimo> if it had, i could have found it out immediately

[02:57] <hoelzro> it could've been an awful GC, concurrency, or serialization bug

[02:58] <hoelzro> that random segfaults rakudo

[02:58] <hoelzro> and been *really* hard to track down

[02:58] <hoelzro> it took me less than 5 minutes to write a bisect script to find that commit

[02:58] *** xinming left
[02:58] <hoelzro> and I played bloodborne while it worked =)

[02:58] <timotimo> something sloppy i recently did ended up sending jnthn on a wild goose-chase :\

[02:59] *** xinming joined
[02:59] <colomon> and my $work patch worked brilliantly.  (p6 checks the test results.)

[03:00] <hoelzro> timotimo: we've all made mistakes; it's better than no one contributing at all, right!

[03:00] *** cognominal left
[03:00] <skids> timotimo: stop beating yourself up, you contribute more than me or many others.

[03:01] <timotimo> hm, may be

[03:01] <timotimo> things are getting really real right now

[03:01] <timotimo> with perl6 i mean

[03:01] <timotimo> aint such a long time until christmas

[03:02] <jdv79> what does really real smell  like?

[03:02] <hoelzro> yeah, I know what you mean

[03:02] <hoelzro> September isn't far away

[03:02] <hoelzro> and that's *beta* time

[03:02] <jdv79> 6.0.0 or 6a or whatever it'll be called will bomb inevitably, right?

[03:03] <timotimo> tiny annoyances are piling up around me at the moment, so i'm a tiny bit on edge it seems

[03:03] <jdv79> i wouldn't be too worried about it

[03:03] <hoelzro> I look at all the tickets in RT and get worried

[03:03] <timotimo> at least there's a lot of churn in RT

[03:03] <hoelzro> yeah

[03:03] <timotimo> new tickets being added, but also tickets getting closed

[03:03] <hoelzro> I feel like there are a lot of open tickets that are probably no longer valid

[03:03] <timotimo> much better than having a permanently low number of tickets that don't get changed at all

[03:04] <jdv79> if 6b or 6.1.0 has serious troubles then i'll be concerned

[03:04] <timotimo> i'm heading towards bed now

[03:04] <timotimo> see you :)

[03:05] <hoelzro> later timotimo 

[03:05] * hoelzro goes to play Takenoko with wife and brother-in-law

[03:17] *** steve_mc left
[03:22] *** Celelibi left
[03:23] *** Celelibi joined
[03:31] *** steve_mc joined
[03:38] <skids> http://phys.org/news/2015-06-year-old-algorithm-proven.html # summary: anything that solves edit distance in under N² would make NP-complete less hard than generally suspected.

[03:43] *** steve_mc left
[03:52] *** bjz joined
[03:56] *** steve_mc joined
[03:59] *** bjz left
[04:02] *** Alina-malina left
[04:09] *** telex left
[04:10] *** telex joined
[04:23] *** BenGoldberg left
[04:30] *** bjz joined
[04:36] *** davido_ left
[04:38] *** davido_ joined
[04:46] <hoelzro> timotimo: first cut of that userscript: https://gist.github.com/hoelzro/5c16c12baa9dc951511e

[04:46] <hoelzro> it *should* work

[04:49] *** aborazmeh left
[04:58] *** aborazmeh joined
[04:58] *** aborazmeh left
[04:58] *** aborazmeh joined
[05:03] *** aborazmeh left
[05:32] *** davido__ joined
[05:34] *** davido_ left
[05:39] *** bjz left
[05:40] *** bjz joined
[05:41] *** firefish5000 left
[05:45] *** bjz left
[05:45] *** bjz joined
[05:46] *** Patterner joined
[05:50] *** Psyche^ left
[05:54] *** bjz left
[05:54] *** gerry__ joined
[05:54] *** bjz joined
[05:56] *** xinming_ joined
[06:00] *** xinming left
[06:00] *** FROGGS[mobile] joined
[06:01] <FROGGS[mobile]> my plan for today is to make this work:

[06:03] <FROGGS[mobile]> my $cmd1 = run('cmd1', :out); run('cmd2', :in($cmd1.out))

[06:04] *** firefish5000 joined
[06:05] <FROGGS[mobile]> in theory I only have to tweak run() in rakudo in the openpipe3 branch

[06:06] <skids> That would be nice.

[06:06] <FROGGS[mobile]> but now I wonder: is feed syntax usable here?

[06:07] <FROGGS[mobile]> it also means I deprecate pipe()

[06:07] <skids> I was under the impression that feed syntax is mosty intended to be a List thing.

[06:07] <FROGGS[mobile]> ahh

[06:11] <FROGGS[mobile]> and I should not forget to ask the libuv devs about how merging stdout/sdterr is supposed to work

[06:12] <FROGGS[mobile]> if that is a low level thing at all

[06:12] <skids> I believe in C it is done with freopen or something.

[06:13] <FROGGS[mobile]> hmmm, I can grep for that in libuv's source

[06:18] *** aborazmeh joined
[06:19] *** aborazmeh left
[06:19] *** aborazmeh joined
[06:20] *** bjz left
[06:21] *** bjz joined
[06:26] *** FROGGS[mobile] left
[06:26] *** FROGGS[mobile] joined
[06:28] *** gerry__ left
[06:28] <raydiak> S32-IO says pipe() no longer exists anyway and is replaced by IO::Pipe.pair 

[06:29] *** FROGGS joined
[06:32] <skids> Ah, if no streams are being used the way to deal with it is dup/dup2

[06:32] <skids> (in C)

[06:33] *** gerry__ joined
[06:35] <FROGGS> raydiak: yes, which also won't be true in future

[06:36] <FROGGS> what I imagine is that IO::Pipe will we a filehandle, returned by something that calls nqp::syncpipe()

[06:36] <FROGGS> and run() and shell() return a (IO::)Proc object, that has .in, .out and .err attributes of type IO::Pipe

[06:38] <skids> Does run() start the cmd right away?  Because then you have some time when cmd1 can output before cmd2 starts.

[06:39] <raydiak> maybe it's buffered?

[06:39] <skids> That would be overcomplicated.

[06:40] <skids> versus starting cmd2 first and then later attaching cmd1 when you start it.

[06:40] * FROGGS now reads MoarVM/3rdparty/libuv/src/unix/process.c:267:static void uv__process_child_init(

[06:41] <FROGGS> skids: run() does not start when you capture any of <in out err>

[06:41] <FROGGS> but it does kick off when you dont capture anything

[06:41] <skids> Ah, good.

[06:41] <FROGGS> so my posted example might not work

[06:42] *** aborazmeh left
[06:42] *** domidumont joined
[06:42] <FROGGS> so you either have to also print to the first command from P6, and close that handle, or read from cmd2 and close its handle

[06:42] <FROGGS> we'll see

[06:44] <raydiak> also don't forget about the cases where people want to run pipelines of several commands

[06:44] <FROGGS> raydiak: example?

[06:45] <FROGGS> (not a use case, but pseudo code)

[06:45] <raydiak> um...well idk at midnight off the top of my head after a day like today, but like any shell script with more than one '|'

[06:46] <raydiak> erm, not shell script but one-liner if you get my meaning

[06:46] <FROGGS> raydiak: yes, that should work IMO

[06:46] <FROGGS> I will know today hopefully :o)

[06:46] <raydiak> cool :)  ++FROGGS

[06:47] <raydiak> but off to bed for me...busy day and week, thankfully...just dropped in to say "Go team Camelia!" before sleep

[06:49] <FROGGS> gnight raydiak :o)

[06:49] *** aborazmeh joined
[06:49] *** aborazmeh left
[06:49] *** aborazmeh joined
[06:50] *** domidumont left
[07:02] *** kaare__ joined
[07:08] *** lolisa joined
[07:13] *** domidumont joined
[07:14] *** RabidGravy joined
[07:17] *** Sqirrel left
[07:23] *** Akagi201 joined
[07:32] *** aborazmeh left
[07:33] *** skids left
[07:33] *** lolisa left
[07:44] *** Foxcool_ joined
[07:45] *** Foxcool left
[07:45] *** Foxcool_ left
[07:45] *** Foxcool joined
[07:47] *** espadrine joined
[08:00] <RabidGravy> okay, so having fixed my bogus test data which led me off totally down the wrong path, theres definitely something funny going on with CArray[num64] that I can't see:

[08:00] <RabidGravy> Adding -191.709945678711 at 57

[08:00] <RabidGravy> Wrong kind of access to numeric CArray

[08:00] <RabidGravy>   in method ASSIGN-POS at lib/NativeCall.pm:333

[08:03] <RabidGravy> can't replicate outside my code at the moment

[08:04] <FROGGS> RabidGravy: does MVM_SPESH_DISABLE=1 help?

[08:05] *** Alina-malina joined
[08:05] *** darutoko joined
[08:05] <RabidGravy> yes, yes it does

[08:06] <RabidGravy> what does that do then?

[08:08] <FROGGS[mobile]> disable dynamic optimizations and also the JIT 

[08:09] <FROGGS[mobile]> that explains why cant easily reproduce in a one liner...

[08:09] <FROGGS[mobile]> the code must be "hot" in order to get speshed

[08:09] <RabidGravy> ah, so that isn't really a solution going forward then

[08:10] <FROGGS[mobile]> you can try wrapping it a while loop

[08:10] <FROGGS[mobile]> no, but we need to golf it in order to fix it

[08:12] <FROGGS[mobile]> in a while loop*

[08:12] *** gerry__ left
[08:15] <RabidGravy> while loop?  my $f = True;  while $f { # do the copy ; $f = False } doesn't help

[08:16] <RabidGravy> the problem with replicating is that the data is an array of Nums which have already been copied from a CArray[num64] 

[08:23] <FROGGS[mobile]> then this needs to be part of the golf

[08:26] <RabidGravy> er

[08:27] <RabidGravy> 'ang on, I don't think that'll work

[08:30] *** fractionuser joined
[08:30] *** fractionuser left
[08:36] <RabidGravy> just about as short as I can get it: https://gist.github.com/jonathanstowe/98025c6b0df7a6f992dc

[08:37] <RabidGravy> it only every does it in the third loop and always does at the 58th element

[08:41] <RabidGravy> I guess there may be opportunities to simplify the data

[08:44] <RabidGravy> also should be noted that it only does it with CArray[num64] - not int16, int32 or num32

[08:49] *** bjz left
[08:49] *** diana_olhovik joined
[08:54] *** gfldex joined
[08:54] *** bjz joined
[08:57] *** bjz left
[08:59] *** cognominal joined
[09:02] <RabidGravy> ah, no the data can be replaced with a "my @in = (^100).map({Num($_)});"

[09:04] *** lolisa joined
[09:04] <RabidGravy> FROGGS, I think that's as short as I can make it and still demonstrate that behaviour https://gist.github.com/jonathanstowe/98025c6b0df7a6f992dc

[09:09] <RabidGravy> I think I'm going to TODO the tests it is causing to fail, move on and RT that later unless someone has any further input

[09:19] *** [Sno] left
[09:20] *** rindolf joined
[09:23] <nine> RabidGravy: it seems like your bug got introduced sometime within the last month (since commit 31f3db1)

[09:23] <nine> RabidGravy: could only reproduce it after updating rakudo

[09:23] <RabidGravy> Hmm

[09:23] <RabidGravy> cheers for looking

[09:25] <FROGGS> RabidGravy++ # that golfed script is good

[09:26] <RabidGravy> the fact that it only happens on the third generation helps ;-)

[09:28] *** lolisa left
[09:28] <nine> bisecting...

[09:31] <RabidGravy> I looked at the site of the exception and couldn't see anything obvious except to conclude that somewhere it was losing its inner-numiness

[09:33] <FROGGS> nine++

[09:34] *** bjz joined
[09:40] *** gerry__ joined
[09:42] *** gerry__ left
[09:52] *** [Sno] joined
[09:53] *** bjz left
[09:53] <RabidGravy> while I'm thinking of it, I think I'll add some tests for the "rw CArray getting populated by the library function" case in the NativeCall tests

[09:54] <RabidGravy> as there doesn't appear to be any

[09:56] *** domidumont left
[09:58] <nine> d356462fed5706dd8fa6394dec26d1cced034cdb is the first bad commit, Author: Tobias Leich, "implement ignoremark, though needs tbd for interpolations"

[09:58] <nine> Doesn't make much sense though :/

[09:59] <nine> Oh but this commit bumps NQP version, so it may make sense after all

[09:59] <dalek> doc: 0de156d | paultcochrane++ | lib/Type/SetHash.pod:

[09:59] <dalek> doc: Improve link name to Set/Bag Operators section

[09:59] <dalek> doc: review: https://github.com/perl6/doc/commit/0de156d5fc

[10:11] *** [Sno] left
[10:12] *** [Sno] joined
[10:20] <FROGGS> nine: I'd guess the problem is introduced in MoarVM

[10:21] *** molaf joined
[10:27] <nine> FROGGS: indeed. I should be able to bisect MoarVM without having to recompile Rakudo, shouldn't I?

[10:27] <FROGGS> nine: correct

[10:31] <RabidGravy> yeah the site of the exception is actually in the moar code

[10:32] *** spider-mario joined
[10:33] <dalek> doc: 2ee4b15 | paultcochrane++ | lib/Language/ (2 files):

[10:33] <dalek> doc: Fix link from classtut to Roles section in objects doc

[10:33] <dalek> doc: review: https://github.com/perl6/doc/commit/2ee4b15001

[10:43] <nine> Except that nqp doesn't seem to like the stage0 changes

[10:44] <FROGGS> nine: yes, there are changes where you have to rebuild nqp/rakudo, but these are rare

[10:55] <nine> Unfortunately this is one of those changes. And when I rebuild Rakudo, it insists on checking out a specific MoarVM version making the bisect run useless.

[11:00] <colomon> nine: that’s why I wrote the “triple” functionality into rakudobrew.  Though you still have to do it by hand.

[11:02] <dalek> doc: f3be1d0 | paultcochrane++ | lib/Type/BagHash.pod:

[11:02] <dalek> doc: Use a better link name to Set/Bag Operators section

[11:02] <dalek> doc: review: https://github.com/perl6/doc/commit/f3be1d07dc

[11:02] <dalek> doc: f25a270 | paultcochrane++ | type-graph.txt:

[11:02] <dalek> doc: Add new exceptions to the type-graph

[11:02] <dalek> doc: review: https://github.com/perl6/doc/commit/f25a27017f

[11:03] <nine> colomon: except if I remove the --gen-moar and --gen-nqp from config.status I guess

[11:04] <colomon> nine: I meant, bisect by hand.  the triple thing automatically builds the versions of rakudo, nqp, and moar you specify

[11:04] <colomon> I was working on just this sort of bug at the time.  

[11:06] <FROGGS> $ perl6 -Ilib -e 'use IO::Pipe; my $p1 = shell("dir", :out); my $p2 = shell("wc", :in($p1.out), :out); say $p2.out.lines'

[11:06] <FROGGS>     110     219    3981

[11:06] <FROGGS> \o/

[11:07] *** FROGGS_ joined
[11:08] <itz_> hmmm I'm a little sceptical about static analysis but  "scan-build -- Clang static analyzer" looks interesting

[11:11] *** FROGGS left
[11:12] <RabidGravy> FROGGS, nice :-)

[11:15] *** FROGGS_ is now known as FROGGS

[11:15] * FROGGS is happy

[11:19] <vendethiel> .oO( don't forget to water your FROGGS )

[11:24] *** rindolf left
[11:37] <dalek> Inline-Perl5: 035eb53 | (Stefan Seifert)++ | / (2 files):

[11:37] <dalek> Inline-Perl5: Support overloaded stringification of P5 objects

[11:37] <dalek> Inline-Perl5: 

[11:37] <dalek> Inline-Perl5: In Perl 5:

[11:37] <dalek> Inline-Perl5: package Foo; use overload '""' => sub { "foo!" };

[11:37] <dalek> Inline-Perl5: In Perl 6:

[11:37] <dalek> Inline-Perl5: say $foo.Str(); # gives "foo!"

[11:37] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/035eb5313d

[11:37] <vendethiel> nine++

[11:38] <nine> hoelzro++ for suggesting this in GH #12

[11:44] *** spider-mario left
[11:44] *** JimmyZ_ joined
[11:45] <JimmyZ_> nine: line 21 in test looks like useless?

[11:46] *** gerry__ joined
[11:54] <nine> JimmyZ_: indeed!

[11:54] <dalek> Inline-Perl5: 9075f90 | (Stefan Seifert)++ | t/overload.t:

[11:54] <dalek> Inline-Perl5: Remove left over debug code from test

[11:54] <dalek> Inline-Perl5: 

[11:54] <dalek> Inline-Perl5: Thanks to JimmyZ_++ for spotting this!

[11:54] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/9075f90e6f

[11:54] *** spider-mario joined
[11:55] *** FROGGS left
[11:57] *** JimmyZ_ left
[11:57] *** nys joined
[12:00] *** FROGGS joined
[12:03] <ab5tract> FROGGS[mobile]: is that IO::Pipe behavior lazy?

[12:07] <timotimo> hoelzro: you could check synbot6's code; it has an extra heuristic in it to make the "RT" in front not required and still not give terribly many false positives

[12:07] *** [Sno] left
[12:11] <timotimo> hoelzro: and you're replacing text inside the html, which may end up inside an attribute or something ... :\

[12:12] *** JimmyZ_ joined
[12:13] <RabidGravy> Hmm, when you do @array1 ~~ @array2, what does it actually do?  I have two arrays that look pretty similar but can't tell where the differ

[12:15] <psch> RabidGravy: "what exactly" is in the ACCEPTS declaration — looks like a Whatever-aware deep comparison, on a glance

[12:15] <psch> m: say [*] ~~ [1]

[12:15] <camelia> rakudo-moar 7fc078: OUTPUT«5===SORRY!5=== Error while compiling /tmp/nTbJ2E_LUZ␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at /tmp/nTbJ2E_LUZ:1␤------> 3say [*] ~~7⏏5 [1]␤»

[12:15] <timotimo> ~~ of arrays uses === to compare individual elements

[12:15] <psch> m: my @a = *; my @b = [1]; say @a ~~ @b

[12:15] <camelia> rakudo-moar 7fc078: OUTPUT«False␤»

[12:15] <psch> m: my @a = *; my @b = [1]; say @b ~~ @a

[12:15] <camelia> rakudo-moar 7fc078: OUTPUT«True␤»

[12:15] <psch> +Whatever handling for the RHS

[12:15] <timotimo> and it skips over whatever stars, like psch is demonstrating

[12:16] <psch> so first-level identity, not deep comparison

[12:16] <psch> timotimo++

[12:23] <psch> m: my $a = 1; say $a === *;

[12:23] <camelia> rakudo-moar 7fc078: OUTPUT«WhateverCode.new␤»

[12:23] <psch> ...right

[12:23] <timotimo> :P

[12:31] *** AlexDaniel joined
[12:46] <FROGGS[mobile]> ab5tract: fsdo lazy, yes

[12:49] *** zakharyas joined
[12:55] *** diana_olhovik left
[12:59] <FROGGS[mobile]> ab5tract: you get filehandles you can read/write lines from/to

[12:59] *** aborazmeh joined
[12:59] *** aborazmeh left
[12:59] *** aborazmeh joined
[12:59] <ab5tract> The IO docs could use some love, but I'm not quite sure where lizmat++ is at with newio

[13:01] *** bin_005 joined
[13:01] *** aborazmeh left
[13:01] <ab5tract> FROGGS[mobile]: I assumed so, but wanted to be sure.

[13:02] <ab5tract> psch: does that behavior surprise you?

[13:02] *** JimmyZ_ left
[13:02] <psch> ab5tract: which? Whatever currying ===?

[13:03] <psch> no, i'm just a bit rusty :P

[13:03] <ab5tract> yeah

[13:03] <ab5tract> :)

[13:03] *** aborazmeh joined
[13:03] *** aborazmeh left
[13:03] *** aborazmeh joined
[13:03] <ab5tract> I recently doc'd the behavior of Whatever and WhateverCode WRT to Whatevers stored in variables, so it's fresh in my mind

[13:04] <psch> i'm also mostly cognitively loaded with trying to figure out how to invoke a Rakudo-level CompilationUnit...

[13:04] *** coffee` left
[13:04] <psch> 'cause that's the first step and having written-as-perl6, self-executing jars

[13:04] <psch> s/and/in/

[13:05] <psch> and i'd really like to be able to write perl6 and ship it to users who don't have rakudo-j installed

[13:05] <ab5tract> That would be amazing

[13:05] <psch> well, it'd still be huge jars

[13:05] <psch> like, whole runtime of course

[13:05] *** coffee` joined
[13:06] <psch> although maybe there's a way to trim based on coverage for class files...

[13:07] <RabidGravy> people with bigger brains than me: is there something about the number representation for Num that might cause it to be less accurate ±0.5 ?

[13:07] <RabidGravy> around ^

[13:08] <psch> not less accurate than IEEE754 in general, i'd hope

[13:09] <colomon> RabidGravy: context?  it’s basically just a standard floating point double.

[13:10] <RabidGravy> I've got an array of 50 Nums and writing it into a wav file using libsndfile and then reading it back it's only the few frames around the ±0.5 around the third or fourth decimal place

[13:10] <RabidGravy> that differ

[13:10] *** aborazmeh left
[13:10] <moritz> so this is not about arithmetics, but about (de)serialization

[13:11] <RabidGravy> dunno, that's why I ask

[13:11] <RabidGravy> it's six out of fifty which seems strange

[13:11] <moritz> it's hard to tell without knowing how you do the comparison, input and output

[13:13] <moritz> iirc the default stringification loses precision

[13:13] <RabidGravy> er, there is no stringification

[13:13] *** domidumont joined
[13:14] <RabidGravy> @array of nums -> CArray[num64] -> sf_writef_float() -> sf_readf_float -> CArray[num64] -> @array of nums

[13:16] <RabidGravy> then comparing the starting array and the finishing array values numerically

[13:20] *** domidumont left
[13:20] <moritz> if you swap the "sf_writef_float() -> sf_readf_float" steps out for just copying in-memory, do you still get that behavior?

[13:23] *** bin_005 left
[13:25] <vendethiel> m: given "foobar" { say "it's $_'s turn" }

[13:25] <camelia> rakudo-moar 7fc078: OUTPUT«5===SORRY!5=== Error while compiling /tmp/x5HFuntxNY␤Variable '$_'s' is not declared␤at /tmp/x5HFuntxNY:1␤------> 3given "foobar" { say "it's 7⏏5$_'s turn" }␤»

[13:25] <vendethiel> yeaaah. about that :P

[13:25] * vendethiel uses $($_) instead

[13:28] * colomon would prefer {$_} in his code

[13:31] *** zakharyas left
[13:32] <arnsholt> $($_) has slightly different semantics, too, doesn't it?

[13:33] <arnsholt> RabidGravy: It's odd that you're getting rounding problems. How exactly are you computing your values and writing them to file?

[13:35] *** BenGoldberg joined
[13:37] <RabidGravy> arnsholt, I'm not computing them in the sense I took an existing WAV file read 25 frames into an array and printed the values to construct some test data for each of short, into, float and doubles and attempt to round-trip them through the appropriate libsndfile functions

[13:38] <arnsholt> Right. So you read some stuff in with libsndfile, and then write them back out again with the same lib. So this is mostly NativeCall code, I assume?

[13:39] <RabidGravy> er yes

[13:39] <arnsholt> That's odd

[13:40] <RabidGravy> I'm actually beginning to wonder whether the particular pattern I am seeing is an artefact of the dithering strategy libsndfile uses

[13:40] <colomon> what is the range of values of the nums?

[13:41] <moritz> and, uhm, don't wav files store integers?

[13:41] <RabidGravy> yes, hence "the dithering strategy"

[13:42] <RabidGravy> they don't actually have to store integers

[13:43] <RabidGravy> the nums are in the range of ±1

[13:43] <RabidGravy> let me try this with a floating point format, maybe I'm asking too much

[13:43] <moritz> TIL

[13:49] *** gerry__ left
[13:50] <colomon> yeah, it definitely seems like it is very weird to have ±0.5 be the problem if the range is ±1

[13:50] <RabidGravy> ignore me, there may be some issue somewhere but using a float format it gets it right

[13:51] <colomon> Why don’t you forget libsndfile and just code up simple C to store a num64 array and let you retreive it later…

[13:51] *** gerry__ joined
[13:53] <RabidGravy> because libsndfile can open, read and write some 26 formats of sound files in 24 different encodings

[13:53] <hoelzro> o/ #perl6

[13:54] <colomon> RabidGravy: no, no, not to skip libsndfile as a goal, just to skip it and see if the nums transfer correctly.

[13:54] *** domidumont joined
[13:54] <colomon> ie rakudo problem or libsndfile problem/misuse.

[13:54] <colomon> ie *is it a rakudo...

[13:55] <psch> o/ hoelzro 

[13:55] <hoelzro> timotimo: good points all around; I required the RT because GH will link #\d+ to its own issues

[13:55] <hoelzro> o/ psch 

[13:55] *** gerry__ left
[13:58] *** davido__ left
[13:58] <timotimo> ah, good point

[13:58] <timotimo> but our RTs start somewhere in the thousands

[13:59] *** davido__ joined
[14:00] *** diana_olhovik joined
[14:00] <hoelzro> true

[14:01] *** Ven joined
[14:02] *** gerry__ joined
[14:02] <hoelzro> so maybe \d{3,}, then?

[14:03] *** yqt joined
[14:03] <hoelzro> heck, the lowest I've seen are 5 digits

[14:04] *** gagalicious joined
[14:05] *** diana_olhovik left
[14:06] <RabidGravy> colomon, I've concluded that because when I write the same floats to a *float encoded WAV* and read them back as floats it comes back exactly the same that isn't rakudo's problem

[14:07] <RabidGravy> I'm just either being thick or expecting to much of something or both

[14:08] *** diana_olhovik joined
[14:12] <timotimo> remember that float is 32bit and our num are 64bit

[14:12] <timotimo> ... or is that what you're already saying?

[14:13] <RabidGravy> yep, the floats are going into and out of CArray[num32]

[14:13] <timotimo> oh

[14:13] <timotimo> do we actually properly support that?

[14:13] <RabidGravy> it seems so

[14:13] <RabidGravy> there is some trouble with num64/doubles but hey

[14:14] *** molaf_ joined
[14:15] <RabidGravy> on the whole I'm quite pleasantly surprised that it works so well 

[14:18] *** molaf left
[14:22] <RabidGravy> it's going to be either more fun testing the sample rate conversion

[14:25] *** gerry__ left
[14:36] *** diana_olhovik left
[14:42] *** zakharyas joined
[14:46] *** rindolf joined
[14:58] *** arumugam joined
[14:59] <arumugam> p6: say 3;

[14:59] <camelia> rakudo-moar 7fc078: OUTPUT«3␤»

[14:59] <arumugam> hi

[15:00] <psch> hi arumugam 

[15:00] <arumugam> sir

[15:00] <arumugam> i would like to use perl6

[15:00] <arumugam> i have written modules, programming in perl <6

[15:01] <psch> http://rakudo.org/how-to-get-rakudo/ is a decent starting point, although not bleeding edge

[15:01] <psch> especially windows is a few months behind, iirc

[15:01] <arumugam> is there any possibility to create exe in perl6

[15:01] <psch> i don't think so, no, but i'm not that involved in the backend that could support that

[15:02] <arumugam> say if i would like to distribute my coding do i need the client to have perl 6 installed?

[15:02] <RabidGravy> currently yes

[15:04] <arumugam> i also couldnt find the activate state version for perl 6

[15:04] <RabidGravy> er

[15:04] <psch> there is no activestate version of Perl 6

[15:04] <arumugam> er?

[15:04] <arumugam> o.i.c

[15:04] <psch> we have an MSI, you can find it on the link i wrote above

[15:05] <arumugam> is there any new specific and feature rich ide for perl6

[15:05] <psch> but as mentioned, it's a bit out of date, if i'm not misinformed

[15:05] <arumugam> thank you psch

[15:05] <FROGGS[mobile]> yes, latest msi is from march

[15:05] <FROGGS[mobile]> IIRC

[15:05] <RabidGravy> some Linux distributions have rakudo* of various uptodateness

[15:06] *** espadrine left
[15:06] <arumugam> dear all thank you for replying

[15:06] <AlexDaniel> debian has 2014.07

[15:07] <AlexDaniel> arumugam: you can try perl6-mode in emacs

[15:07] <AlexDaniel> arumugam: that's not an IDE, but it might work for you

[15:07] <RabidGravy> fedora has ~ 2015.04

[15:07] <AlexDaniel> arumugam: especially if you already use emacs, if that's the case

[15:07] <arumugam> emacs for windows

[15:08] <arumugam> is that available only for linux?

[15:08] <arumugam> how about padre does it support perl6

[15:08] <RabidGravy> no

[15:08] <RabidGravy> nor eclipse afaik

[15:09] <AlexDaniel> RabidGravy: that's pretty new :)

[15:10] <RabidGravy> yeah I was quite surprised when the update came through a few weeks ago

[15:10] *** kurahaupo left
[15:11] <arumugam> once again thank you geeks

[15:12] *** arumugam left
[15:12] <AlexDaniel> hm

[15:12] *** gerry__ joined
[15:13] <AlexDaniel> that was weird

[15:14] <psch> hm

[15:14] <psch> sometimes i'd like a mapping of qb_* functions to blocks

[15:15] <psch> but then i try to imagine how to implement that and resign :s

[15:15] <psch> s/functions/methods/

[15:15] *** b2gills left
[15:15] <timotimo> quickbasic functions?

[15:16] <psch> no, generated methods in the jvm backend :P

[15:16] <psch> QastBlock, i guess

[15:16] <psch> *QAST

[15:17] <timotimo> mhm :S

[15:17] <psch> also 92 levels deep stacktrace with ~80% invokedynamic isn't helping :D

[15:18] <psch> like, right now a "Cannot call method 'unshift' on a null object." points at an END block in CORE.setting

[15:19] <psch> so i don't have @END_PHASERS, i guess?

[15:19] *** b2gills joined
[15:20] <psch> yeah, i'm probably still approaching this wrong :/

[15:25] *** gerry__ left
[15:26] <psch> oh, no, approach might be right.  we're creating @END_PHASERS in main.nqp and i'm skipping that

[15:26] *** kurahaupo joined
[15:30] *** diana_olhovik_ joined
[15:35] <FROGGS> $ perl6 -Ilib -e 'use IO::Pipe; my $p1 = shell("dir", :out); my $p2 = shell("wc", :in($p1.out), :out($*ERR))' >/dev/null

[15:35] <FROGGS>     110     219    3981

[15:35] <FROGGS> \o/ \o/

[15:36] <psch> FROGGS++

[15:43] <FROGGS> $ perl6 -Ilib -e 'use IO::Pipe; shell("wc", :in("VERSION".IO.open), :out($*ERR))'

[15:43] <FROGGS> 1 1 8

[15:43] <FROGGS> I'd say it is becoming sane

[15:43] <FROGGS> and I also think the interface makes sense and is intuitive

[15:43] <timotimo> ooooh

[15:44] <psch> wow that's neat

[15:44] <FROGGS> merging out+err does not work yet

[15:44] <FROGGS> (unless someone would accept segfaults)

[15:47] <FROGGS> timotimo: you're writing the weekly tomorrow? can you mention the mingw (gcc+gmake that's shipped with strawberry) changes?

[15:50] <timotimo> i'd love to :)

[15:51] <FROGGS> :o)

[15:51] <FROGGS> sadly I wont be able to merge the run()/shell() changes... need to port it to jvm first

[15:52] <timotimo> i'm always amazed that you port all that stuff you do to the jvm, too :)

[15:54] <FROGGS> timotimo: well, I have to to not break the build

[15:54] <FROGGS> and I surely dont want to #?moar it...

[15:55] <FROGGS> though, that may happen in the next weeks anyway

[15:55] <FROGGS> we'll see

[15:56] *** spider-mario left
[16:00] <timotimo> :)

[16:00] <timotimo> you're doing excellent work, i must say

[16:00] <FROGGS> thanks :o)

[16:00] <timotimo> i should probably be inspired to continue working on udp sockets :S

[16:01] <FROGGS> what was the problem with that ooc?

[16:01] *** Akagi201 left
[16:02] <timotimo> hm

[16:02] <timotimo> good question

[16:02] <timotimo> i don't think there was a particular blocker

[16:03] *** skids joined
[16:03] <FROGGS> just needs doing, ehh? :o)

[16:04] <timotimo> mhm

[16:04] *** espadrine joined
[16:08] <RabidGravy> timotimo, uf you get really bored local sockets would be nice too ;-) couple of things on my TODO want them :)

[16:08] <timotimo> as soon as UDP is implemented, i want someone to implement QUIC or what it's called on top of it :P

[16:09] <timotimo> unix domain sockets, yes?

[16:10] <RabidGravy> yaw, but I avoided "unix" as people seem to get concerned about things that aren't cross platform ;-)

[16:10] <timotimo> do the other platforms have something similar?

[16:10] <timotimo> windows especially?

[16:10] <timotimo> the thing i wasn't sure about for UDP was if there should be anything async-related with that

[16:10] <timotimo> asynchronous send with udp doesn't make sense

[16:10] <timotimo> but receive kind of does, perhaps

[16:12] *** brrt joined
[16:12] <brrt> \o

[16:12] <brrt> timotimo: UDP is inherently asynchronous

[16:12] <brrt> as in

[16:12] <brrt> you may synchronously wait for a package

[16:12] <timotimo> yeah, none of the calls you can make block, right?

[16:12] *** tinyblak_ joined
[16:12] <timotimo> ok, maybe recv does

[16:12] <brrt> but you can't synchronously send one

[16:12] <brrt> aye

[16:12] <timotimo> so what should the perl6-level interface look like?

[16:13] *** tinyblak left
[16:13] <brrt> and windows should just have UDP support

[16:13] <timotimo> i meant unix domain sockets when i asked for windows :)

[16:13] <brrt> i suppose... a supply?

[16:13] <brrt> hmm.

[16:13] <brrt> closest thing would be a named pipe i guess

[16:13] <RabidGravy> well the window doesn't support af_unix but does have named pipes which are the same  kind of thing

[16:13] <timotimo> we don't have to have an async udp socket and a sync udp socket, right?

[16:14] <timotimo> we could just have it be a single thing and have a flag "is being tapped" that would prevent the user from receiving a message "synchronously" and vice versa?

[16:14] <brrt> no. an async udp socket can always be 'wrapped' to make it appear sync on recv

[16:14] * brrt nods

[16:14] <brrt> UDP is really very extremely useful

[16:14] <skids> (For that matter a sync UDP socket can be "wrapped" in an async waiter)

[16:15] <brrt> hmm, yes, i suppose that's true, too

[16:15] <timotimo> skids: might be, but i'd prefer giving the user an event-loop-based waiter rather than something that gobbles up one of our precious threads

[16:15] *** lizmat joined
[16:16] <brrt> this is going to sound pretty much like an excuse, but it's probably best to do things the 'libuv way' if you can

[16:16] <skids> timotmo: that's been my instinct too but ISTR the merits of that instinct being challenged recently.

[16:16] <brrt> because libuv is very much an opinionated way to deal with io

[16:16] <brrt> skids: why is that?

[16:16] <timotimo> yeah, it is

[16:17] <skids> I'll have to find the discussion.  My memory is rater foggy.

[16:17] <RabidGravy> but I think libuv has some abstractION

[16:17] <timotimo> there's a milestone for moar that'd be a re-implementation of the synchronous I/O portions without an event-loop thingie

[16:17] * skids just got up

[16:18] *** brrt left
[16:18] *** uncleyea1 joined
[16:19] *** uncleyear left
[16:22] *** ggoebel joined
[16:26] <RabidGravy> the way that Node.js does unix domain sockets is cool

[16:28] <psch> hrm, definitely missing an important step in approach :/

[16:29] <psch> trying to fill GlobalExt from the java side doesn't do anything, which means i definitely have to run perl6 first

[16:30] <psch> but that means i need to stuff something in there that runs CORE without going towards what we do in main.nqp

[16:30] <psch> and then invoke the CU from the precompiled .class

[16:31] <psch> that's mostly prompted by @END_PHASERS still erroring out when it's a BOOTArray, and hllizing it doesn't do anything either

[16:33] <lizmat> good *, #perl6!

[16:33] <yoleaux> 13 Jun 2015 20:37Z <jepeway> lizmat: i left some comments on cead6f13c7e537b7a6b16454a66e41d2d55dfcf0; there's a stray say or so to remove, and reliance on Int.new() that either needs implementation (moritz++) or changing

[16:34] <psch> o/ lizmat 

[16:34] <skids> o/ lizmat

[16:34] <RabidGravy> erp

[16:34] <lizmat> psch: /me is a java noob, so can't help you with that

[16:35] <psch> lizmat: i have a hunch it's lack of architecture understanding in general, tbh

[16:35] <lizmat> well, that would go for me as well  :-)

[16:35] <skids> lizmat: http://irclog.perlgeek.de/perl6/2015-06-13#i_10746333 long discussion about RT#124084

[16:35] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124084

[16:35] <psch> but the architecture between jvm and mvm are kinda different too, i suppose

[16:37] <skids> oh, well, less long a discussion than I remembered.

[16:37] *** zakharyas left
[16:38] * lizmat is trying to get the page, but bandwidth is low

[16:38] <skids> Shhh.  everyone stop talking, lizmat needs to download :-)

[16:39] <lizmat> hehe  :  problem at this side, in Libby MT

[16:48] *** lizmat_ joined
[16:48] *** lizmat left
[16:51] <FROGGS[mobile]> psch: maybe we should meet? where do you live again?

[16:52] *** tinyblak_ left
[16:53] <psch> FROGGS[mobile]: i'm in Osnabrück currently

[16:55] *** espadrine left
[16:55] *** espadrine joined
[16:56] <psch> FROGGS[mobile]: and will be for probably at least a few months if not years

[16:57] <psch> i'm planning to move, but that'll probably take a bit of time

[16:57] *** yqt left
[16:59] *** silug joined
[17:04] *** tinyblak joined
[17:07] <FROGGS[mobile]> psch: you ever visited Berlin? I'd buy you a beer ;o)

[17:09] <psch> FROGGS[mobile]: i actually lived there for about 2 years, long before getting involved, and it'd also be my new hometown of choice, so, probably? ;)

[17:14] <psch> s/, so, probably//

[17:15] <psch> grammar can be hard, sometimes

[17:15] *** Gardner joined
[17:15] <FROGGS[mobile]> aye

[17:16] <FROGGS[mobile]> when you feel tempted to enjoy beer, talk and hack near Berlin then please let me know 

[17:17] <psch> yup, will keep that in mind :)

[17:17] *** telex left
[17:18] <lizmat_> sightseeing&

[17:18] *** lizmat_ left
[17:18] *** telex joined
[17:20] <RabidGravy> FROGGS, get me a booking for a live set and I'll be over ;-)

[17:22] *** yqt joined
[17:22] <psch> that reminds me of my (currently hibernating) efforts of PortAudio bindings and an interactive shell for live coding music...

[17:23] <psch> tried to get inspired by ex tempore, but Array was way too slow

[17:23] <RabidGravy> psch, I was thinking about PortAudio just now

[17:23] <RabidGravy> is it on github?

[17:23] <psch> https://github.com/peschwa/Audio-PortAudio

[17:24] <psch> it got borked when the signature and return type stuff got better

[17:24] <psch> like, typed arrays i think broke it

[17:24] <psch> also Pointer (or is that Void now?=

[17:24] <psch> *)

[17:24] <psch> so, it's really not useable right now

[17:25] <psch> there's also https://github.com/peschwa/eigmip6 which went via jvm interop

[17:25] <psch> but that didn't work out particularly well either for interactive stuff

[17:27] <psch> i pretty much just barrelled along, without much concern for design, at least for eigmip6 :s

[17:29] <RabidGravy> psch, I may take a look when I've done with the Sndfile thing.  And before the icecast client ;-)

[17:29] *** steve_mc left
[17:29] <RabidGravy> if you're up for some PRs

[17:29] <psch> sure

[17:30] *** zakharyas joined
[17:33] *** zakharyas1 joined
[17:33] <RabidGravy> more Audio::* is the way forward

[17:34] <psch> :D

[17:34] <psch> i really dig the stuff andrew sorensen does with ex tempore

[17:35] *** BenGoldberg left
[17:35] <psch> but i'm not much of a lisper

[17:36] <RabidGravy> Need to tempt yaxxu back from Haskell or whatever new language he's made recently

[17:36] *** zakharyas left
[17:36] *** Akagi201 joined
[17:37] *** BenGoldberg joined
[17:37] <psch> the oscon '14 keynote is pretty cool

[17:37] <psch> i don't know yaxxu

[17:38] <RabidGravy> Alex Mclean, quite big in the live coding/algo-rave thing

[17:41] <FROGGS> RabidGravy: you are from .co.uk?

[17:41] <RabidGravy> yaw

[17:41] <FROGGS> RabidGravy: mind coming to the Swiss Perl Workshop?

[17:41] <RabidGravy> hence the beer and swearing

[17:41] <FROGGS> :P

[17:41] *** yqt left
[17:41] <FROGGS> RabidGravy: we'll get you drunk, no worry :D

[17:42] <RabidGravy> when is that?

[17:43] <FROGGS> Aug 26th

[17:43] <RabidGravy> I worked in Rottkreuz for six months about ten years ago

[17:43] *** steve_mc joined
[17:44] <RabidGravy> most expensive beer in the world in Luzern

[17:45] <FROGGS> :S

[17:45] *** zakharyas1 left
[17:46] *** Ven left
[17:49] <psch> hrm, i'm really not sure how this would go

[17:49] *** Ven joined
[17:49] <psch> i mean, usually we run the perl6.jar comp unit 

[17:49] <psch> and feed it args, which are either -e or a file 

[17:50] <psch> but instead i want to feed it a precompiled CompUnit

[17:50] <psch> which means i have to skip a few stages, or do the normal start-up stuff myself

[17:50] <psch> or somehow wrangle the precompiled compunit into the perl6.jar compunit, maybe?

[17:51] *** brrt joined
[17:52] <RabidGravy> are precompiled modules done as .jar files with JVM?

[17:53] <psch> yeah, my case is not about modules though

[17:53] <psch> but about normal scripts

[17:54] <psch> the aim is to be able to package jars that can run on any system with java, i.e. even huger than what maven calls uber-jars

[17:54] <psch> 'cause we'd need the whole r-j runtime

[17:55] <RabidGravy> no. no but it's the same, except the "COmpunit" i.e. the jar has an entry point

[17:55] <psch> well, yes

[17:56] *** brrt left
[17:56] <psch> that's the thing though, a CompUnit of a script doesn't actually have an entryQbid CodeRef

[17:56] <psch> i've only found the actual interpreter with an entryQbid CodeRef, i.e. perl6.jar

[17:58] <psch> the whole bootstrapping thing doesn't make this easier to grok for me either :s

[18:01] *** Ben_Goldberg joined
[18:03] *** BenGoldberg_ joined
[18:03] *** lolisa joined
[18:04] *** BenGoldberg left
[18:04] *** yqt joined
[18:04] <FROGGS> Stage parse      : Method 'multi' not found for invocant of class 'Sub'

[18:04] <FROGGS> :o(

[18:06] <RabidGravy> oops

[18:06] *** Ben_Goldberg left
[18:07] <RabidGravy> but hey that's the fun of software

[18:08] <FROGGS> yeah :/

[18:08] <FROGGS> *narf*

[18:08] <FROGGS> found it

[18:09] <FROGGS> hint: when you test stuff outside of the setting, and finally add it to the setting, remove any 'is export' trait

[18:09] <psch> heh

[18:10] * psch takes a nap

[18:10] <psch> i'm not seeing any way further, maybe that helps

[18:10] <psch> o/

[18:10] <FROGGS> psch o/

[18:10] *** spider-mario joined
[18:12] *** Gardner left
[18:13] *** brrt joined
[18:15] * itz_ and virtualsue will buy RabidGravy a beer if he makes it to .ch

[18:16] *** tinyblak left
[18:16] *** tinyblak joined
[18:16] *** BenGoldberg_ left
[18:20] *** tinyblak left
[18:27] *** Gardner joined
[18:28] *** _mg_ joined
[18:30] *** Ven left
[18:32] *** brrt left
[18:47] *** Woodi left
[18:49] *** Gardner left
[18:53] *** Gardner joined
[18:57] *** Gardner left
[18:57] *** [Sno] joined
[18:57] *** Gardner joined
[18:57] <RabidGravy> I'd forgot "Cannot parse /home/jonathan/.rakudobrew/moar-nom/install/share/perl6/site/panda/projects.json as JSON: Input (295 characters) is not a valid JSON string"

[18:59] <masak> RabidGravy: can you paste the contents of projects.json somewhere? (like a gist, perhaps?)

[18:59] <skids> wget that file from http://ecosystem-api.p6c.org/projects.json and then update stuff, ISTR it got fixed.

[18:59] *** Gardner left
[19:00] <RabidGravy> masak, it was the web server's 40<something> page

[19:00] <RabidGravy> the panda just eeds to adjust the way it downloads the file

[19:01] <masak> oh!

[19:01] <masak> ...and you're preparing a PR for that as we speak? :)

[19:01] <FROGGS> this was working reliably before the last two commits to panda :o(

[19:02] <RabidGravy> i.e download to a different place and only move it into place 

[19:02] <RabidGravy> on success

[19:02] *** Gardner joined
[19:02] <RabidGravy> masak, I will when I've done what I'm doing

[19:05] <masak> \o/

[19:05] <skids> I ran into some git timeouts on moarvm submodules last night while testing a rakudobrew PR, BTW.

[19:05] <skids> But they were sporadic.

[19:09] *** lolisa left
[19:10] *** lolisa joined
[19:11] *** Gardner left
[19:18] *** domidumont left
[19:18] <TimToady> m: say all(1,2,3) ~~ Int

[19:19] <camelia> rakudo-moar 7fc078: OUTPUT«False␤»

[19:19] <TimToady> I suspect we have the default behavior wrong on this one

[19:20] <TimToady> m: say all(1,2,3) ~~ Junction

[19:20] <camelia> rakudo-moar 7fc078: OUTPUT«True␤»

[19:20] *** Gardner joined
[19:20] <TimToady> we can probably keep that one True, and let the other one also be True

[19:21] <masak> that sounds fantastic -- how would that work?

[19:21] <TimToady> just define Any.ACCEPTS differently

[19:21] <masak> I mean either (a) it hyperthreads, and matches the elements against the type, or (b) it doesn't, and only Junction will match.

[19:22] <TimToady> there is no "it", other than the object on the right

[19:22] *** tinyblak joined
[19:22] <TimToady> and the object on the right gets to decide how to match

[19:22] *** rindolf left
[19:22] <TimToady> and Junction can choose differently than Int

[19:22] <skids> S03 currently: 'both ~~ and given/when provide item contexts to their arguments, and autothread any junctive matches so that the eventual dispatch to .ACCEPTS never sees anything "plural"'

[19:22] <masak> TimToady: ah, yes. got it.

[19:23] <TimToady> in any case, if we *couldn't* have it both ways, I think we should err on the side of what mere mortals will expect

[19:23] <TimToady> but I think we probably can have it both ways in this case

[19:24] <TimToady> m: say any(1,2,3) ~~ 2

[19:24] <camelia> rakudo-moar 7fc078: OUTPUT«any(False, True, False)␤»

[19:32] *** grondilu joined
[19:34] *** tinyblak left
[19:46] *** Gardner left
[19:54] <dalek> rakudo/openpipe3: 9267294 | FROGGS++ | / (8 files):

[19:54] <dalek> rakudo/openpipe3: add Proc, Proc.run() and Proc.shell

[19:54] <dalek> rakudo/openpipe3: 

[19:54] <dalek> rakudo/openpipe3: This deprecates pipe(), and Proc::Status.

[19:54] <dalek> rakudo/openpipe3: review: https://github.com/rakudo/rakudo/commit/926729427b

[19:55] <ugexe> strange... I have a Proc::Async that no longer finishes as of 14 hours ago on travis, but works fine on local machines

[19:57] <FROGGS> weird

[20:02] <ugexe> whats stranger is there are similar Proc::Async process before this that work ok on travis. for whatever reason the promise never leaves the planned state

[20:04] <hoelzro> gtodd1: ping

[20:04] *** darutoko left
[20:06] <ugexe> for whatever reason FROGGS your seeminly unrelated patch seems to have fixed it

[20:07] <FROGGS> ?

[20:08] <FROGGS> ugexe: the patch about mingw?

[20:08] <ugexe> the 'add Proc, Proc.run() and Proc.shell' from just now

[20:08] <FROGGS> but that one is in a dev branch

[20:09] <FROGGS> so you probably hit a flapper

[20:09] <ugexe> ah. what does flapper refer to?

[20:10] <FROGGS> a flapper is a piece of code that sometimes work and sometest doesn't, so you get different results by just rerunning it

[20:11] <ugexe> thats the only kind of code i write

[20:11] <FROGGS> ó.ò

[20:14] *** Gardner joined
[20:16] *** bin_005 joined
[20:16] *** brrt joined
[20:24] *** BenGoldberg_ joined
[20:27] *** _mg_ left
[20:27] *** brrt left
[20:28] <hoelzro> gtodd1: I just tried Linenoise on FreeBSD, it works like a charm now =)

[20:30] <masak> FROGGS: I've only heard "flapper" be used about tests which pass/fail unpredictably.

[20:31] <FROGGS> masak: I'd also call any other function as flapping that changes the return value depending on the phase of the moon

[20:32] <masak> right, right. agree. but I haven't heard it in that more general non-test sense until just now.

[20:33] <FROGGS> yeah

[20:33] *** diana_olhovik_ left
[20:34] *** espadrine left
[20:34] <masak> for me "flapping tests", cute as the term is, has always been short for "non-deterministic test": http://martinfowler.com/articles/nonDeterminism.html

[20:34] <masak> guess that's the term you're looking for when you're talking about non-test code, too...

[20:36] <FROGGS> probably, aye

[20:36] <skids> "flapping" probably comes from networkese https://en.wikipedia.org/wiki/Route_flapping

[20:39] *** Begi joined
[20:39] <skids> Personally I would just use "unstable" if only the environment changes between runs and "metastable" if the behavior changes due to unrelated code changes.

[20:40] <Begi> Hello ! How can I test the existence of a character in a list ? Thanks a lot !

[20:40] <jnthn> evening, #perl6

[20:40] <FROGGS> hi Begi hi jnthn 

[20:40] <japhb> o/

[20:40] <skids> Begi: a list of Str?

[20:40] <FROGGS> Begi: say "a" ~~ any @list

[20:40] <FROGGS> for example

[20:41] <Begi> Yes, with only letters

[20:42] <FROGGS> m: my @a = 'a'..'z'; say 'f' ~~ any @a

[20:42] <camelia> rakudo-moar 7fc078: OUTPUT«True␤»

[20:42] <FROGGS> m: my @a = 'a'..'z'; say '2' ~~ any @a

[20:42] <camelia> rakudo-moar 7fc078: OUTPUT«False␤»

[20:42] <FROGGS> m: my @a = 'a'..'z'; say '2' ~~ @a.first-index

[20:42] <camelia> rakudo-moar 7fc078: OUTPUT«Cannot call first-index(Str: Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str); none of these signatures match:␤    (Any: Bool:D $t, *%_)␤    (Any: Regex:D $test, *%_)␤    (An…»

[20:42] <FROGGS> m: my @a = 'a'..'z'; say @a.first-index('f')

[20:42] <camelia> rakudo-moar 7fc078: OUTPUT«5␤»

[20:42] <FROGGS> m: my @a = 'a'..'z'; say @a.first-index('2')

[20:42] <camelia> rakudo-moar 7fc078: OUTPUT«Nil␤»

[20:43] <skids> m: <a b c d e>.first("f").say # if you want the letter back rather than the index.

[20:43] <camelia> rakudo-moar 7fc078: OUTPUT«Nil␤»

[20:48] <BenGoldberg_> m: my @a = 'a'..'z'; say '2' ~~ @a.first-index('f')

[20:48] <camelia> rakudo-moar 7fc078: OUTPUT«False␤»

[20:48] <BenGoldberg_> m: my @a = 'a'..'z'; say '2' ~~ @a.first-index('b')

[20:48] <camelia> rakudo-moar 7fc078: OUTPUT«False␤»

[20:48] <BenGoldberg_> m: my @a = 'a'..'z'; say @a.first-index('b')

[20:48] <camelia> rakudo-moar 7fc078: OUTPUT«1␤»

[20:48] <BenGoldberg_> m: my @a = 'a'..'z'; say '2' ~~ 2

[20:48] <camelia> rakudo-moar 7fc078: OUTPUT«True␤»

[20:48] <BenGoldberg_> m: my @a = 'a'..'z'; say '2' ~~ $_ fo @a.first-index('b')

[20:48] <camelia> rakudo-moar 7fc078: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rGiAoDYdCm␤Two terms in a row␤at /tmp/rGiAoDYdCm:1␤------> 3my @a = 'a'..'z'; say '2' ~~ $_7⏏5 fo @a.first-index('b')␤    expecting any of:␤        infix␤        infix stopper␤        postfi…»

[20:48] <BenGoldberg_> m: my @a = 'a'..'z'; say '2' ~~ $_ for @a.first-index('b')

[20:48] <camelia> rakudo-moar 7fc078: OUTPUT«True␤»

[20:49] * BenGoldberg_ headscratches.

[20:49] <skids> m: ($_ for @a.first-index('b')).perl.say

[20:49] <camelia> rakudo-moar 7fc078: OUTPUT«5===SORRY!5=== Error while compiling /tmp/p3TG19iYdu␤Variable '@a' is not declared␤at /tmp/p3TG19iYdu:1␤------> 3($_ for 7⏏5@a.first-index('b')).perl.say␤»

[20:49] <skids> m: my @a = 'a'..'z'; ($_ for @a.first-index('b')).perl.say

[20:49] <camelia> rakudo-moar 7fc078: OUTPUT«(1,)␤»

[20:50] <skids> m: my @a = 'a'..'z'; ('2' ~~ $_ for @a.first-index('b')).perl.say

[20:50] <camelia> rakudo-moar 7fc078: OUTPUT«(Bool::True,)␤»

[20:50] <BenGoldberg_> m: my @a = 'a'..'z'; say '2' ~~ @a.first-index('c')

[20:50] <camelia> rakudo-moar 7fc078: OUTPUT«True␤»

[20:51] * BenGoldberg_ feels silly now. ;)

[20:51] <skids> m: my @a = 'a'..'z'; ('2' ~~ $_ for 1).perl.say

[20:51] <camelia> rakudo-moar 7fc078: OUTPUT«(Bool::True,)␤»

[20:51] <skids> Yes, indexes are 0-based :-)

[20:52] <RabidGravy> has anyone asked for that to changeable?

[20:52] <skids> Not me.  Probly if we attract lua users.

[20:52] <jnthn> RabidGravy: S09 describes how to do custom indexing; it's possible but you have to use {...} syntax

[20:52] <RabidGravy> or basic

[20:53] <BenGoldberg_> Isn't fortran 1 based?

[20:53] *** BenGoldberg_ is now known as BenGoldberg

[20:53] <vendethiel> i think so

[20:53] <RabidGravy> so long since I've used a language that hasn't C heritage I don't care

[20:54] <Begi> Thanks every body ! Have a nice day !

[20:55] *** Begi left
[20:56] <RabidGravy> I sent a PR to Panda to crap out if it gets other than a 200 when retrieving the projects.json BTW

[20:58] <skids> m: ("foo" ~~ $_).say; ("foo" ~~ $_.say); # Oh right, topicalization!  I learned a new way to shoot oneself in the foot today :-)

[20:58] <camelia> rakudo-moar 7fc078: OUTPUT«True␤foo␤»

[21:07] *** Gardner left
[21:07] *** Gardner joined
[21:07] *** bin_005_f joined
[21:08] *** Akagi201 left
[21:08] *** bin_005 left
[21:09] *** Akagi201 joined
[21:15] <FROGGS> PLEASE STEP UP, no release manager has signed up yet for the rakudo compiler release next Thursday!

[21:15] <FROGGS> https://github.com/rakudo/rakudo/blob/nom/docs/release_guide.pod

[21:18] <masak> 'night, #perl6

[21:18] <FROGGS> gnight masak 

[21:19] * FROGGS thinks that masak hides just in time :P

[21:21] <masak> ;)

[21:22] <masak> I think I'll be a little too busy this month. prefer someone else to step up. if no-one does, I can step up.

[21:22] <masak> really 'night

[21:22] <FROGGS> sleep well

[21:22] <hoelzro> night masak 

[21:22] <hoelzro> FROGGS: the 18th or the 25th?

[21:23] <FROGGS> hoelzro: 2015-06-18   Rakudo #89

[21:23] <hoelzro> hmm

[21:23] <hoelzro> I happen to giving a talk about Perl 6 that night

[21:23] <hoelzro> how long does it take to do?

[21:23] <hoelzro> I've never done it

[21:23] <FROGGS> hoelzro: there is no reason to not move it by a day IMO

[21:24] <FROGGS> hoelzro: depends... if there is much to do you might need 6+ hours

[21:24] <hoelzro> yikes

[21:24] <jnthn> Another progress blog report: https://6guts.wordpress.com/2015/06/14/this-week-fixing-lots-of-things/ :)

[21:24] <FROGGS> but this time it might takes less than 4 hours

[21:24] <FROGGS> \o/

[21:24] <hoelzro> FROGGS: I can do some of it (ex. tagging versions) the night before, right?

[21:25] <hoelzro> jnthn++

[21:25] <FROGGS> hoelzro: well, tagging versions is one of the last steps

[21:25] <FROGGS> testing, fudging, testing, jvm testing etc takes time

[21:26] <RabidGravy> jnthn just reminded me to RT that CArray[num64] infelicity

[21:26] <hoelzro> FROGGS: I'm probably biting off more than I can chew here, but I could probably do it Wednesday night

[21:27] <FROGGS> hoelzro: I can help a little bit

[21:28] <FROGGS> ohh, but I have something to do wednesday evening... :/

[21:28] <FROGGS> at least for about 2.5 hours

[21:28] <hoelzro> I'll have to do it entirely before or after work

[21:28] <hoelzro> I could get up early on Thursday and do it

[21:29] <hoelzro> I could run the tests over night on Wednesday night

[21:29] <hoelzro> I'm guessing a lot of that 4 hours is waiting for tests?

[21:32] *** telex left
[21:33] *** erdic left
[21:35] <TimToady> I'm relieved that when I change all(1,2,3) ~~ Int to work as we discussed, it fails some tests :)

[21:37] <skids> jnthn++

[21:37] <RabidGravy> created #125408 to cover the num64 weirdness we discussed earlier

[21:37] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125408

[21:37] <FROGGS> hoelzro: yes, that might work out

[21:37] *** Gardner left
[21:37] <FROGGS> RabidGravy++

[21:37] <hoelzro> FROGGS: alright, sign me up

[21:37] <FROGGS> TimToady: as if roast were mature? :o)

[21:37] <hoelzro> I'll need some help on Wednesday, and then I'll finish Thursday morning

[21:38] *** erdic joined
[21:38] *** telex joined
[21:38] <dalek> rakudo/nom: 65a3fe9 | FROGGS++ | docs/release_guide.pod:

[21:38] <dalek> rakudo/nom: sign up hoelzro++ for next Thursday's release

[21:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/65a3fe9c40

[22:01] *** Gardner joined
[22:01] *** bin_005_f left
[22:02] *** bin_005_f joined
[22:02] *** Gardner left
[22:07] *** FROGGS left
[22:15] <cognominal> jnthn++ #  sounds like he multithreaded himself. Also if even we failed to clone him, he seems well in the path to procreation.

[22:19] *** RabidGravy left
[22:21] *** khisanth__ joined
[22:23] *** bin_005_f left
[22:24] *** khisanth_ left
[22:28] *** RabidGravy joined
[22:37] <RabidGravy> I think I'll make Audio::Sndfile public tomorrow and add the asynchronous features later

[22:38] <RabidGravy> better to get bug reports ;-)

[22:44] <RabidGravy> nighty night

[22:47] *** pyrimidi_ joined
[22:49] *** RabidGravy left
[22:51] *** pyrimidine left
[22:58] <BenGoldberg> m: my int8 $a = 257; say $a;

[22:58] <camelia> rakudo-moar 65a3fe: OUTPUT«1␤»

[22:58] <BenGoldberg> m: .say for my int8 $ = 257;

[22:58] <camelia> rakudo-moar 65a3fe: OUTPUT«257␤»

[22:59] <BenGoldberg> m: (my int8 $ = 257).say;

[22:59] <camelia> rakudo-moar 65a3fe: OUTPUT«257␤»

[22:59] <BenGoldberg> m: (my int8 $ = 257).WHAT.say;

[22:59] <camelia> rakudo-moar 65a3fe: OUTPUT«(Int)␤»

[22:59] <BenGoldberg> m: (my int8 $a = 257).WHAT.say;

[22:59] <camelia> rakudo-moar 65a3fe: OUTPUT«(Int)␤»

[22:59] <BenGoldberg> m: (my int8 $a = 257); $a.WHAT.say;

[22:59] <camelia> rakudo-moar 65a3fe: OUTPUT«(Int)␤»

[23:03] <skids> Yeah intX are facsimiles right now.

[23:03] *** proteusx joined
[23:09] *** AlexDaniel left
[23:10] *** telex left
[23:12] *** telex joined
[23:13] *** khisanth__ is now known as Khisanth

[23:14] *** Akagi201 left
[23:14] *** Akagi201 joined
[23:32] *** dayangkun joined
[23:35] <japhb> m: class Foo is repr('CStruct') { has int8 $.a; }; my $f = Foo.new(:a(257)); say $f.a;

[23:35] <camelia> rakudo-moar 65a3fe: OUTPUT«1␤»

[23:35] *** Akagi201 left
[23:35] <japhb> BenGoldberg, skids: ^^

[23:36] *** BenGoldberg left
[23:50] *** BenGoldberg joined
[23:52] <skids> japhb: yes also:

[23:52] <skids> m: my uint32 @a = -1, 1; @a.say; my $b = buf32.new(-1,1); $b.say;

[23:52] <camelia> rakudo-moar 65a3fe: OUTPUT«4294967295 1␤Buf[uint32]:0x<ffffffff 01>␤»

[23:52] <skids> m: my int8 @a = 128, 1; @a.say; my $b = buf8.new(257,1); $b.say;

[23:52] <camelia> rakudo-moar 65a3fe: OUTPUT«-128 1␤Buf[uint8]:0x<01 01>␤»

[23:52] <skids> but..

[23:52] <skids> m: my uint64 @a = -1, 1; @a.say; my $b = buf64.new(-1,1); $b.say;

[23:52] <camelia> rakudo-moar 65a3fe: OUTPUT«-1 1␤Buf[uint64]:0x<-1 01>␤»

[23:53] <skids> so just stay away from unsigned 64 bit for now.

[23:53] *** aborazmeh joined
[23:53] *** aborazmeh left
[23:53] *** aborazmeh joined
[23:54] <grondilu> m: say my uint32 $ = -1

[23:54] <camelia> rakudo-moar 65a3fe: OUTPUT«-1␤»

[23:54] <skids> right, scalars are fakes.

[23:54] <grondilu> LTA

[23:56] *** mattp__ is now known as mattp-

