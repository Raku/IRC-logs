[00:14] *** yqt left
[00:27] *** rangerprice left
[00:29] *** laouji joined
[00:40] *** laouji left
[00:41] *** laouji joined
[00:47] *** BenGoldberg joined
[00:53] *** BenGoldberg left
[00:55] *** BenGoldberg joined
[01:03] *** BenGoldberg left
[01:15] *** BenGoldberg joined
[01:21] *** llfourn joined
[01:26] *** llfourn left
[01:26] *** Averna joined
[01:27] *** Averna left
[01:28] *** Averna joined
[01:39] *** gfldex left
[01:44] *** mr-foobar left
[01:45] *** ilbot3 left
[01:46] *** ilbot3 joined
[02:02] *** skids left
[02:04] *** rangerprice joined
[02:05] *** xxx left
[02:09] *** dayangkun joined
[02:10] *** xxx joined
[02:15] *** kaare__ joined
[02:17] *** noganex joined
[02:20] *** noganex_ left
[02:21] *** araujo left
[02:22] *** araujo joined
[02:23] *** raiph left
[02:31] *** ab5tract joined
[02:32] *** smls left
[02:33] *** Averna left
[02:34] *** jordman left
[02:35] *** adu joined
[02:40] *** yeahnoob joined
[02:42] *** jordman joined
[02:44] <dalek> roast: cf775d3 | ShimmerFairy++ | S02-literals/numeric.t:

[02:44] <dalek> roast: Fix S02-literals/numeric.t

[02:44] <dalek> roast: 

[02:44] <dalek> roast: Some of the tests for different forms of Rat literals did so in a way

[02:44] <dalek> roast: that calls will call .Numeric on Str (as well as any other non-Numeric

[02:44] <dalek> roast: argument). Since a Rat literal that's not parsed correctly will be

[02:45] <dalek> roast: interpreted as a Str, then as long as Str.Numeric can handle the given

[02:45] <dalek> roast: Rat form any issues with Rat literals for those forms were hidden. These

[02:45] <dalek> roast: tests were changed to ensure we don't numify any strings.

[02:45] <dalek> roast: 

[02:45] <dalek> roast: Also updated some of the tests to use the new 'does-ok' to check roles,

[02:45] <dalek> roast: and replaced a smartmatch against Str with an 'isa-ok' check.

[02:45] <dalek> roast: review: https://github.com/perl6/roast/commit/cf775d3ae9

[02:51] *** araujo_ joined
[02:54] *** araujo left
[03:05] *** CQ_ joined
[03:07] *** CQ left
[03:07] *** CQ_ is now known as CQ

[03:07] *** AlexDaniel left
[03:12] *** bin_005 joined
[03:22] *** llfourn joined
[03:27] *** ggherdov left
[03:27] *** llfourn left
[03:27] *** preyalone left
[03:28] *** pnu left
[03:29] *** pnu joined
[03:31] *** ggherdov joined
[03:33] *** preyalone joined
[03:33] *** adu left
[03:44] *** prevost joined
[03:45] *** BenGoldberg left
[03:46] *** bin_005 left
[03:56] *** laouji left
[03:59] *** telex left
[04:00] *** telex joined
[04:06] *** llfourn joined
[04:06] *** cognominal joined
[04:16] *** rurban joined
[04:19] <colomon> m: say (1..5)[1..*]

[04:19] <camelia> rakudo-moar 30d6fe: OUTPUT«2 3 4 5␤»

[04:19] <GLRelia> rakudo-moar 087a6c: OUTPUT«2345␤»

[04:27] *** laouji joined
[04:28] <colomon> do we have something in GLR for list concatenation?

[04:31] *** pflanze left
[04:35] *** domm left
[04:37] *** Sqirrel left
[04:45] <ShimmerFairy> you mean besides .join() ?

[04:48] <ShimmerFairy> colomon: or are you talking about the stuff Slip() was meant for? (As I recall, jnthn's exploration gist mentioned that Slip() took care of various calls for some kind of "list concatenation" operator)

[04:49] <colomon> err… join is string concatenation on lists.  I’m looking for list concatenation on lists.

[04:49] <colomon> though yeah, slip ought to help a lot.  hmm.

[04:51] <ShimmerFairy> colomon: I was think of the (probably somewhat outdated) S07 draft in specs: "Pm's Answer: I think that the conjectured Slip type above eliminates much of the need for a list concatenation operator, since given two lists, one can do a join by wrapping one or both in Slip objects:"

[04:51] <ShimmerFairy> *thinking of

[04:51] <colomon> hmmm, that gist was one of the tabs I was keeping open when my browser crashed hard repeatedly at the hackathon yesterday.  :)

[04:52] <colomon> m: say [1..5].slip

[04:52] <GLRelia> rakudo-moar 087a6c: OUTPUT«Method 'slip' not found for invocant of class 'Array'␤  in block <unit> at /tmp/fXsXQpTv2H:1␤␤»

[04:52] <camelia> rakudo-moar 30d6fe: OUTPUT«Method 'slip' not found for invocant of class 'Array'␤  in block <unit> at /tmp/bUEuLeuVRn:1␤␤»

[04:52] <colomon> m: say slip([1..5])

[04:52] <GLRelia> rakudo-moar 087a6c: OUTPUT«[1 2 3 4 5]␤»

[04:52] <camelia> rakudo-moar 30d6fe: OUTPUT«5===SORRY!5=== Error while compiling /tmp/L_0skvjs38␤Undeclared routine:␤    slip used at line 1. Did you mean 'flip'?␤␤»

[04:52] <colomon> m: say slip(1..5)

[04:52] <GLRelia> rakudo-moar 087a6c: OUTPUT«1..5␤»

[04:52] <camelia> rakudo-moar 30d6fe: OUTPUT«5===SORRY!5=== Error while compiling /tmp/5qGVEKkwQq␤Undeclared routine:␤    slip used at line 1. Did you mean 'flip'?␤␤»

[04:53] <ShimmerFairy> .Slip, since it's a type :)

[04:53] <ShimmerFairy> m: say [1..5].Slip

[04:53] <GLRelia> rakudo-moar 087a6c: OUTPUT«12345␤»

[04:53] <camelia> rakudo-moar 30d6fe: OUTPUT«Method 'Slip' not found for invocant of class 'Array'␤  in block <unit> at /tmp/QNaGJESMN0:1␤␤»

[04:59] *** khw left
[05:00] <colomon> m: my @a = 1..3; my @b = 2, 5, 3; say (@a, @b).perl; say (@a.Slip, @b.Slip).perl

[05:00] <camelia> rakudo-moar 30d6fe: OUTPUT«([1, 2, 3]<>, [2, 5, 3]<>)␤Method 'Slip' not found for invocant of class 'Array'␤  in block <unit> at /tmp/JRpvpvTXe4:1␤␤»

[05:00] <GLRelia> rakudo-moar 087a6c: OUTPUT«([1, 2, 3], [2, 5, 3])␤(1, 2, 3, 2, 5, 3)␤»

[05:01] <ShimmerFairy> colomon: note that prefix:<|> can also be used to Slip-ify something

[05:01] <ShimmerFairy> m: say (1,2,3).Slip.perl

[05:01] <GLRelia> rakudo-moar 087a6c: OUTPUT«(1, 2, 3)␤»

[05:01] <camelia> rakudo-moar 30d6fe: OUTPUT«Method 'Slip' not found for invocant of class 'Parcel'␤  in block <unit> at /tmp/WxtRKIbuoF:1␤␤»

[05:01] <ShimmerFairy> m: say (|(1,2,3)).perl

[05:01] <GLRelia> rakudo-moar 087a6c: OUTPUT«(1, 2, 3)␤»

[05:01] <camelia> rakudo-moar 30d6fe: OUTPUT«5===SORRY!5=== Error while compiling /tmp/bPhfVd6072␤Arg-flattening | is only valid in an argument list␤at /tmp/bPhfVd6072:1␤------> 3say (|7⏏5(1,2,3)).perl␤»

[05:01] <colomon> ShimmerFairy++

[05:02] <ShimmerFairy> m: my @a = 1..3; my @b = 2, 5, 3; say (@a, @b).perl; say (|@a, |@b).perl

[05:02] <GLRelia> rakudo-moar 087a6c: OUTPUT«([1, 2, 3], [2, 5, 3])␤(1, 2, 3, 2, 5, 3)␤»

[05:02] <camelia> rakudo-moar 30d6fe: OUTPUT«5===SORRY!5===␤Arg-flattening | is only valid in an argument list␤at /tmp/3LWC_lp1aX:1␤------> 3 @b = 2, 5, 3; say (@a, @b).perl; say (|7⏏5@a, |@b).perl␤Arg-flattening | is only valid in an argument list␤at /tmp/3LWC_lp1aX:1␤------> …»

[05:04] <colomon> m: say ([]).map({ 1 })

[05:04] <GLRelia> rakudo-moar 087a6c: OUTPUT«␤»

[05:04] <camelia> rakudo-moar 30d6fe: OUTPUT«␤»

[05:06] *** RabidGravy joined
[05:14] *** prevost left
[05:24] <colomon> m: say (Array.new).map({ 1 })

[05:24] <camelia> rakudo-moar 30d6fe: OUTPUT«␤»

[05:24] <GLRelia> rakudo-moar 087a6c: OUTPUT«␤»

[05:24] *** rangerprice left
[05:24] <colomon> m: say [[]].map({ 1 })

[05:24] <camelia> rakudo-moar 30d6fe: OUTPUT«1␤»

[05:24] <GLRelia> rakudo-moar 087a6c: OUTPUT«␤»

[05:29] <colomon> okay, so under GLR, how does one return a list consisting of exactly one empty array?

[05:31] <ShimmerFairy> m: say [[],].perl

[05:31] <camelia> rakudo-moar 30d6fe: OUTPUT«[[]]␤»

[05:31] <GLRelia> rakudo-moar 087a6c: OUTPUT«[[],]␤»

[05:31] <ShimmerFairy> m: say ((1,2,3),).perl

[05:31] <camelia> rakudo-moar 30d6fe: OUTPUT«((1, 2, 3),)␤»

[05:31] <GLRelia> rakudo-moar 087a6c: OUTPUT«((1, 2, 3))␤»

[05:31] <ShimmerFairy> m: say ((1,2,3),).map: {1}

[05:31] <GLRelia> rakudo-moar 087a6c: OUTPUT«1␤»

[05:31] <camelia> rakudo-moar 30d6fe: OUTPUT«1␤»

[05:32] <ShimmerFairy> m: say ((1,2,3)).map: {1}

[05:32] <camelia> rakudo-moar 30d6fe: OUTPUT«1 1 1␤»

[05:32] <GLRelia> rakudo-moar 087a6c: OUTPUT«111␤»

[05:32] <colomon> m: say [[]].perl; say [[],].perl

[05:32] <camelia> rakudo-moar 30d6fe: OUTPUT«[[]]␤[[]]␤»

[05:32] <GLRelia> rakudo-moar 087a6c: OUTPUT«[]␤[[],]␤»

[05:33] <ShimmerFairy> colomon: you have to explicitly add a comma, like how in pre-GLR you have to add a comma to force a Parcel

[05:33] <ShimmerFairy> m: say (42).perl; say (42,).perl

[05:33] <camelia> rakudo-moar 30d6fe: OUTPUT«42␤(42,)␤»

[05:33] <GLRelia> rakudo-moar 087a6c: OUTPUT«42␤(42)␤»

[05:33] <ShimmerFairy> m: say (42).WHAT; say (42,).WHAT

[05:33] <camelia> rakudo-moar 30d6fe: OUTPUT«(Int)␤(Parcel)␤»

[05:33] <GLRelia> rakudo-moar 087a6c: OUTPUT«Use of uninitialized value of type Int in string context  in block <unit> at /tmp/vHIwTjkdrC:1␤␤Use of uninitialized value of type List in string context  in block <unit> at /tmp/vHIwTjkdrC:1␤␤»

[05:33] <colomon> m: [[],].map({ 1 }).say

[05:33] <camelia> rakudo-moar 30d6fe: OUTPUT«1␤»

[05:33] <GLRelia> rakudo-moar 087a6c: OUTPUT«1␤»

[05:34] <colomon> ShimmerFairy++

[05:34] <ShimmerFairy> m: say 42.WHAT

[05:34] <camelia> rakudo-moar 30d6fe: OUTPUT«(Int)␤»

[05:34] <GLRelia> rakudo-moar 087a6c: OUTPUT«Use of uninitialized value of type Int in string context  in block <unit> at /tmp/axPsCAQUP7:1␤␤»

[05:34] <ShimmerFairy> m: say Any

[05:34] <camelia> rakudo-moar 30d6fe: OUTPUT«(Any)␤»

[05:34] <GLRelia> rakudo-moar 087a6c: OUTPUT«Use of uninitialized value of type Any in string context  in block <unit> at /tmp/VdN99AQ1rz:1␤␤»

[05:35] <ShimmerFairy> looks like GLR doesn't like :U objects on say atm :P

[05:35] <ShimmerFairy> m: print Mu

[05:35] <camelia> rakudo-moar 30d6fe: OUTPUT«Use of uninitialized value <element> of type Mu in string context  in block <unit> at /tmp/3OUWV7s8aN:1␤»

[05:35] <GLRelia> rakudo-moar 087a6c: OUTPUT«Use of uninitialized value <element> of type Mu in string context  in block <unit> at /tmp/nGH3YXR3uL:1␤»

[05:35] <ShimmerFairy> m: print Mu.gist

[05:35] <camelia> rakudo-moar 30d6fe: OUTPUT«(Mu)»

[05:35] <GLRelia> rakudo-moar 087a6c: OUTPUT«(Mu)»

[05:35] <ShimmerFairy> m: say Int.gist

[05:35] <camelia> rakudo-moar 30d6fe: OUTPUT«(Int)␤»

[05:35] <GLRelia> rakudo-moar 087a6c: OUTPUT«(Int)␤»

[05:36] <colomon> m: ([],).map({ 1 }).say

[05:36] <GLRelia> rakudo-moar 087a6c: OUTPUT«1␤»

[05:36] <camelia> rakudo-moar 30d6fe: OUTPUT«1␤»

[05:45] *** rurban left
[05:58] *** rurban joined
[05:59] *** colomon left
[06:02] *** colomon joined
[06:02] <colomon> O/ from hotel breakfast

[06:04] <nine> m: [$[]].perl.say

[06:04] <camelia> rakudo-moar 30d6fe: OUTPUT«[Any]␤»

[06:04] <GLRelia> rakudo-moar 087a6c: OUTPUT«[[],]␤»

[06:04] <nine> colomon: ^^^

[06:04] <nine> m: [$[]].map(say $_.perl)

[06:04] <camelia> rakudo-moar 30d6fe: OUTPUT«Any␤Cannot call map(Array: Bool); none of these signatures match:␤    ($: Whatever, *%_)␤    ($: &block, :$label, *%_)␤  in block <unit> at /tmp/Y7dK4aPPL8:1␤␤»

[06:04] <GLRelia> rakudo-moar 087a6c: OUTPUT«Any␤Cannot call map(Array: Bool); none of these signatures match:␤    ($: &block, :$label, *%_)␤    (HyperIterable:D $: &block, :$label, *%_)␤  in block <unit> at /tmp/S2pegLq2Tf:1␤␤»

[06:04] <nine> m: [$[]].map({say $_.perl})

[06:04] <camelia> rakudo-moar 30d6fe: OUTPUT«Any␤»

[06:04] <GLRelia> rakudo-moar 087a6c: OUTPUT«[]␤»

[06:05] *** colomon left
[06:05] *** Woodi left
[06:06] <ShimmerFairy> oh yeah

[06:06] <ShimmerFairy> m: ($()).perl.say

[06:06] <camelia> rakudo-moar 30d6fe: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/fDruYzXKAY:1␤""␤»

[06:06] <GLRelia> rakudo-moar 087a6c: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/yhdkXixgPd:1␤""␤»

[06:06] *** Woodi joined
[06:06] <ShimmerFairy> since [] enforces scalar containers, it should suffice to use $ inside a [] :)

[06:06] <ShimmerFairy> m: [$()].perl.say

[06:06] <camelia> rakudo-moar 30d6fe: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/0ONHQXvll5:1␤[""]␤»

[06:06] <GLRelia> rakudo-moar 087a6c: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/x7jFzMM_CP:1␤[""]␤»

[06:06] <ShimmerFairy> derp, $() is something else :P

[06:06] <ShimmerFairy> m: [$( )].perl.say

[06:06] <camelia> rakudo-moar 30d6fe: OUTPUT«[]␤»

[06:06] <GLRelia> rakudo-moar 087a6c: OUTPUT«[(),]␤»

[06:07] <ShimmerFairy> m: ($( )).perl.say

[06:07] <camelia> rakudo-moar 30d6fe: OUTPUT«$( )␤»

[06:07] <GLRelia> rakudo-moar 087a6c: OUTPUT«()␤»

[06:07] <JimmyZ> bug!

[06:07] *** colomon joined
[06:08] <colomon> nine++

[06:08] <ShimmerFairy> JimmyZ: no, $() is specific to Matches

[06:08] <ShimmerFairy> m: "A" ~~ /A/; say $()

[06:08] <camelia> rakudo-moar 30d6fe: OUTPUT«A␤»

[06:08] <GLRelia> rakudo-moar 087a6c: OUTPUT«A␤»

[06:08] <ShimmerFairy> m: "A" ~~ /A {make "B"}/; say $()

[06:08] <camelia> rakudo-moar 30d6fe: OUTPUT«B␤»

[06:08] <GLRelia> rakudo-moar 087a6c: OUTPUT«B␤»

[06:08] <ShimmerFairy> m: "A" ~~ /A {make "B"}/; say $/.ast // ~$/

[06:08] <camelia> rakudo-moar 30d6fe: OUTPUT«B␤»

[06:08] <GLRelia> rakudo-moar 087a6c: OUTPUT«B␤»

[06:09] <ShimmerFairy> m: "A" ~~ /A/; say $/.ast // ~$/

[06:09] <camelia> rakudo-moar 30d6fe: OUTPUT«A␤»

[06:09] <GLRelia> rakudo-moar 087a6c: OUTPUT«A␤»

[06:09] <nine> ShimmerFairy: but $( ).perl.say should print $(), not (). That's the remaining t/spec/S02-types/list.t failure

[06:09] <JimmyZ> m: "A" ~~ /A {make "B"}/; say $( )

[06:09] <camelia> rakudo-moar 30d6fe: OUTPUT«␤»

[06:09] <GLRelia> rakudo-moar 087a6c: OUTPUT«␤»

[06:09] <ShimmerFairy> nine: oh, that's the bug :)

[06:10] <ShimmerFairy> nine: so  [$()].perl  should be  '[$(),]'  IIUC.

[06:10] <nine> For some reason the nqp::iscont check on SELF in List.Perl returns 0

[06:10] <nine> ShimmerFairy: yes

[06:10] <JimmyZ> SELF or self?

[06:11] <nine> SELF

[06:11] <nine> self would be decont'ed in any case

[06:11] <ShimmerFairy> ( and for the record, I only learned about $() a couple days ago, and I personally wouldn't mind if it went away. I don't see where it's useful enough to have a short form of {$/.ast // ~$/} )

[06:12] * JimmyZ wish $() and $( ) is the same thing

[06:12] <JimmyZ> *are

[06:13] <ShimmerFairy> JimmyZ: I've never seen it used, except for a few spots in nqp and/or rakudo, and it doesn't seem like it has anything to do with regexes. I'm inclined to agree :)

[06:15] <ShimmerFairy> JimmyZ: and on top of it, $() feels to me like a case of creeping "punctuation scalars" that I know existed in Perl 5, and we worked to get rid of :)  (that is, Perl 5's $=, $', and probably everything else that could match /'$' <:Punct>/ :P)

[06:16] <JimmyZ> well, at least, for consistency, they should be same thing

[06:16] * TimToady agrees that $() can go

[06:16] <JimmyZ> $[] vs $[ ] vs $() vs $( )

[06:16] *** colomon_ joined
[06:17] *** colomon left
[06:17] *** colomon_ is now known as colomon

[06:18] <ShimmerFairy> TimToady: for what it's worth, I kinda like the idea of something that automatically picks the right thing like that, but I think in most cases you're not working off $/ in the first place, and it's not worth a magical-variable-looking thing.

[06:18] <ShimmerFairy> in most cases where you're interested in C<.ast>s, is what I meant.

[06:19] <TimToady> it would make more sense to use $<> for that anyway

[06:20] <colomon> What time are people starting to go to the hackathon?

[06:21] <dalek> roast/glr: fe7a750 | (Stefan Seifert)++ | S03-operators/assign.t:

[06:21] <dalek> roast/glr: Add explicit flattening, to fix array assignment tests

[06:21] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/fe7a750c7a

[06:21] <TimToady> registration is at 9, program starts at 9:45, so I have no idea when people will actually go :)

[06:21] <JimmyZ> specs git:(master) grep -r '$()' * | wc -l

[06:21] <JimmyZ> 13

[06:22] <colomon> TimToady: think the building is open yet?  I’m getting sick of sitting on a footstool thing…. :)

[06:22] <TimToady> yesterday opened at 9

[06:23] <colomon> TimToady++

[06:26] *** diana_olhovik_ joined
[06:26] *** salv0 joined
[06:27] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; say $<>

[06:27] <camelia> rakudo-moar 30d6fe: OUTPUT«｢A｣␤ xyzzy => ｢A｣␤»

[06:27] <GLRelia> rakudo-moar 087a6c: OUTPUT«␤»

[06:29] <ShimmerFairy> $<> predictably returns $/ (at least on nom. huh.). In that case, it might not be a bad thing to make $() actually be $<>, since current $<> is redundant (and then also $<xyzzy><> and so on)

[06:29] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; say $/ === $<>

[06:29] <camelia> rakudo-moar 30d6fe: OUTPUT«True␤»

[06:29] <GLRelia> rakudo-moar 087a6c: OUTPUT«True␤»

[06:29] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; say $/

[06:29] <camelia> rakudo-moar 30d6fe: OUTPUT«｢A｣␤ xyzzy => ｢A｣␤»

[06:29] <GLRelia> rakudo-moar 087a6c: OUTPUT«␤»

[06:29] <ShimmerFairy> that's not good for glr

[06:30] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; print $/

[06:30] <camelia> rakudo-moar 30d6fe: OUTPUT«A»

[06:30] <GLRelia> rakudo-moar 087a6c: OUTPUT«A»

[06:30] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; say $/.perl

[06:30] <camelia> rakudo-moar 30d6fe: OUTPUT«Match.new(ast => Any, list => (), hash => EnumMap.new(:xyzzy(Match.new(ast => "B", list => (), hash => EnumMap.new(), orig => "A", to => 1, from => 0))), orig => "A", to => 1, from => 0)␤»

[06:30] <GLRelia> rakudo-moar 087a6c: OUTPUT«Match.new(ast => Any, list => (), hash => EnumMap.new(:xyzzy(Match.new(ast => "B", list => (), hash => EnumMap.new(), orig => "A", to => 1, from => 0))), orig => "A", to => 1, from => 0)␤»

[06:30] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; say $/.gist

[06:30] <camelia> rakudo-moar 30d6fe: OUTPUT«｢A｣␤ xyzzy => ｢A｣␤»

[06:30] <GLRelia> rakudo-moar 087a6c: OUTPUT«｢A｣␤ xyzzy => ｢A｣␤»

[06:30] <ShimmerFairy> yeah, seems glr's  &say  fails to call .gist on things now, for some reason

[06:30] <ShimmerFairy> m: say Int

[06:30] <camelia> rakudo-moar 30d6fe: OUTPUT«(Int)␤»

[06:30] <GLRelia> rakudo-moar 087a6c: OUTPUT«Use of uninitialized value of type Int in string context  in block <unit> at /tmp/4qyPWrfzNo:1␤␤»

[06:33] <ShimmerFairy> m: class Foo { method Str { "fail" }; method gist { "win" } }; say Foo

[06:33] <GLRelia> rakudo-moar 087a6c: OUTPUT«fail␤»

[06:33] <camelia> rakudo-moar 30d6fe: OUTPUT«win␤»

[06:33] *** salva is now known as Guest54260

[06:33] *** Guest54260 left
[06:33] *** salv0 is now known as salva

[06:34] *** Guest54260 joined
[06:34] <moritz> m: say "foo"

[06:34] <camelia> rakudo-moar 30d6fe: OUTPUT«foo␤»

[06:34] <GLRelia> rakudo-moar 087a6c: OUTPUT«foo␤»

[06:34] <moritz> ShimmerFairy: spectesting a fix

[06:35] <ShimmerFairy> moritz++ :)

[06:35] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; say $/.Str

[06:35] <camelia> rakudo-moar 30d6fe: OUTPUT«A␤»

[06:35] <GLRelia> rakudo-moar 087a6c: OUTPUT«A␤»

[06:35] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; say $/

[06:35] <camelia> rakudo-moar 30d6fe: OUTPUT«｢A｣␤ xyzzy => ｢A｣␤»

[06:35] <GLRelia> rakudo-moar 087a6c: OUTPUT«␤»

[06:35] <ShimmerFairy> that's a bit weirder though O_o

[06:35] <ShimmerFairy> m: "A" ~~ /$<xyzzy>=(A {make "B"})/; say $_ for $/; say $/ ~~ Iterable

[06:35] <camelia> rakudo-moar 30d6fe: OUTPUT«｢A｣␤ xyzzy => ｢A｣␤False␤»

[06:35] <GLRelia> rakudo-moar 087a6c: OUTPUT«False␤»

[06:37] <ShimmerFairy> Capture may not do Iterable (at least in the nom branch), but it does have AT-POS and friends (as well as AT-KEY and friends)

[06:37] <moritz> m: say Capture ~~ Positional

[06:37] <camelia> rakudo-moar 30d6fe: OUTPUT«False␤»

[06:37] <GLRelia> rakudo-moar 087a6c: OUTPUT«False␤»

[06:37] <ShimmerFairy> and Match is Capture, so I'm guessing glr's &say accidentally doesn't treat $/ as a singular thing. Whether that's say's fault, or Capture not doing Iterable, I don't know.

[06:39] *** domidumont joined
[06:39] <dalek> rakudo/glr: 64cbc0d | moritz++ | src/core/io_operators.pm:

[06:39] <dalek> rakudo/glr: say must use .gist, not .Str

[06:39] <dalek> rakudo/glr: 

[06:39] <dalek> rakudo/glr: this way, say(Int) prints "(Int)\n" again

[06:39] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/64cbc0d177

[06:41] <ShimmerFairy> My guess is that Capture should be doing Positional, Associative, and Iterable anyway.

[06:41] <JimmyZ> moritz: note needs too

[06:41] <JimmyZ> one is Str and one is Gist :)

[06:42] <JimmyZ> m: note Int

[06:42] <camelia> rakudo-moar 30d6fe: OUTPUT«(Int)␤»

[06:42] <GLRelia> rakudo-moar 087a6c: OUTPUT«␤»

[06:42] * ShimmerFairy wishes often that the core roles weren't just empty things that are basically glorified annotations :/

[06:43] <dalek> roast/glr: d2c7d71 | (Stefan Seifert)++ | S03-operators/assign.t:

[06:43] <dalek> roast/glr: Fix remaining failures in S03-operators/assign.t

[06:43] <dalek> roast/glr: 

[06:43] <dalek> roast/glr: Need to take more care when to flatten now. Scalar assignment needs

[06:43] <dalek> roast/glr: flattening of the whole expression while list assignment needs

[06:43] <dalek> roast/glr: flattening of the input lists.

[06:43] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/d2c7d71486

[06:43] *** domidumont left
[06:44] *** domidumont joined
[06:47] <dalek> rakudo/glr: 48ecd4d | moritz++ | src/core/io_operators.pm:

[06:47] <dalek> rakudo/glr: note needs to .gist its arguments too, JimmyY++

[06:47] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/48ecd4d51c

[06:49] * JimmyZ wishes we have is-output($Code, $expectet, $msg)

[06:49] *** domidumont left
[06:50] <JimmyZ> so I can added a bit more test about say/note

[06:50] <JimmyZ> *add

[06:53] *** colomon left
[06:55] <[Tux]> test             50000    44.456    44.364

[06:55] <[Tux]> test-t           50000    45.259    45.167

[06:55] <[Tux]> nom

[07:03] <[Tux]> TravisCi has a panda problem: https://travis-ci.org/Tux/CSV/builds/77634324

[07:03] <[Tux]> test             50000    48.296    48.212

[07:03] <[Tux]> test-t           50000    45.212    45.128

[07:03] <[Tux]> glr

[07:03] <masak>  morning, #perl6

[07:06] <[Tux]> m: class C{method foo{gather { take 3..Inf}}};C.new.foo[^9].perl.say

[07:06] <camelia> rakudo-moar 30d6fe: OUTPUT«(3, 4, 5, 6, 7, 8, 9, 10, 11)␤»

[07:06] <GLRelia> rakudo-moar 48ecd4: OUTPUT«(3..Inf)␤»

[07:06] <[Tux]> I got no answer on that yet

[07:09] *** Sqirrel joined
[07:10] *** domidumont joined
[07:12] *** xinming joined
[07:12] *** xinming_ left
[07:18] *** darutoko joined
[07:18] *** larion joined
[07:19] *** luiz_lha joined
[07:20] *** luiz_lha is now known as Guest76846

[07:28] *** zakharyas joined
[07:30] *** araujo_ left
[07:30] <dalek> roast/glr: 388b0df | (Stefan Seifert)++ | S02-types/hash.t:

[07:30] <dalek> roast/glr: Adopt GLRR semantics in S02-types/hash.t

[07:30] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/388b0dfee9

[07:31] *** Ven joined
[07:31] *** llfourn left
[07:31] <JimmyZ> m: my %hash = %('a'..'d' Z 1..4); say %hash.elems;

[07:31] <camelia> rakudo-moar 30d6fe: OUTPUT«4␤»

[07:31] <GLRelia> rakudo-moar 48ecd4: OUTPUT«2␤»

[07:31] <dalek> rakudo/nom: 28850d9 | (Tim Smith)++ | src/core/Exception.pm:

[07:31] <dalek> rakudo/nom: Perl5Var $. maps to .ins method, not .line

[07:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/28850d97c2

[07:31] <dalek> rakudo/nom: 70f6519 | FROGGS++ | src/core/Exception.pm:

[07:31] <dalek> rakudo/nom: Merge pull request #517 from softmoth/patch-1

[07:31] <dalek> rakudo/nom: 

[07:31] <dalek> rakudo/nom: Perl5Var $. maps to .ins method, not .line

[07:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/70f651925c

[07:31] *** FROGGS left
[07:32] <nine> m: my %hash = %(flat 'a'..'d' Z 1..4); say %hash;

[07:32] <camelia> rakudo-moar 30d6fe: OUTPUT«a => 1, b => 2, c => 3, d => 4␤»

[07:32] <GLRelia> rakudo-moar 48ecd4: OUTPUT«a => 1d => 4c => 3b => 2␤»

[07:32] *** Guest76846 is now known as luiz_lha

[07:32] <nine> JimmyZ: ^^^

[07:32] <JimmyZ> well, I didn't the segfault

[07:33] <nine> JimmyZ: Z creates a list of lists

[07:33] <JimmyZ> see

[07:33] <dalek> rakudo/nom: cd9580f | (Jimmy Zhuo)++ | src/core/Int.pm:

[07:33] <dalek> rakudo/nom: add native int version of pow

[07:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd9580f779

[07:33] <dalek> rakudo/nom: 906ca06 | FROGGS++ | src/core/Int.pm:

[07:33] <dalek> rakudo/nom: Merge pull request #506 from zhuomingliang/patch-4

[07:33] <dalek> rakudo/nom: 

[07:33] <dalek> rakudo/nom: add native int version of pow

[07:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/906ca06814

[07:33] *** abraxxa joined
[07:33] <JimmyZ> nine: I'd like to see the segfault :P

[07:33] <nine> JimmyZ: I think that's long gone

[07:34] *** FROGGS joined
[07:34] <JimmyZ> ok, so no need to fix moarvm

[07:35] <FROGGS> o/

[07:36] *** brrt joined
[07:39] *** lizmat joined
[07:40] <FROGGS> JimmyZ: note that is-output might want to be more like: is-output($Code, $expectet-out, $expected-err, $msg)

[07:41] <FROGGS> JimmyZ: unless merging out+err is implicit, which makes it less useful

[07:42] <JimmyZ> we can do $*ERR = $*OUT before testing

[07:42] *** Ven left
[07:43] <FROGGS> JimmyZ: then you do you test that something does (not) warn?

[07:43] <FROGGS> you need the distinction sometimes

[07:44] <FROGGS> JimmyZ: is_run is good enough for me I think

[07:45] <JimmyZ> oh

[07:45] <FROGGS> look at this for example: t/spec/S06-other/main-usage.t:13

[07:46] *** lizmat left
[07:47] *** lizmat joined
[07:47] *** lizmat left
[07:47] <nine> Someone needs to rewrite S16-io/say.t to use is_run to check the output. The old, clever way just doesn't work anymore since array .gists contain the brackets now

[07:48] <FROGGS> nine: yeah, I think so too

[07:48] *** colomon joined
[07:49] <FROGGS> but I won't do it now, since I'm running a spectest, reapplying a patch and respectest afterwards

[07:51] *** lizmat joined
[07:55] <tadzik> good morning #perl6

[07:56] <tadzik> mfw my battery is at 5% but will still last for a 40-minute talk （´ー｀　）

[07:57] *** rindolf joined
[07:57] <nine> tadzik: you can't be running many spectest then ;)

[07:57] <tadzik> oh no I'm not :)

[07:57] * nine probably needs to move inside within two hours

[08:05] *** xnrand left
[08:07] *** xnrand joined
[08:08] <tadzik> m: sub foo { my ($a, $b) = 1, 2; return :$a, :$b }; say foo().perl

[08:08] <GLRelia> rakudo-moar 48ecd4: OUTPUT«(:a(Mu), :b(Mu))␤»

[08:08] <camelia> rakudo-moar 906ca0: OUTPUT«(:a(Mu), :b(Mu))␤»

[08:08] <tadzik> ...how did it work before :o

[08:08] <nine> m: sub foo { my ($a, $b) = 1, 2; return :$a, :$b }; my (:$a, :$b) = foo; say $a; say $b;

[08:09] <GLRelia> rakudo-moar 48ecd4: OUTPUT«a => (Mu)␤b => (Mu)␤»

[08:09] <camelia> rakudo-moar 906ca0: OUTPUT«a => (Mu)␤b => (Mu)␤»

[08:09] <nine> m: sub foo { my ($a, $b) = 1, 2; return :$a, :$b }; my (:$a, :$b) := foo; say $a; say $b;

[08:09] <camelia> rakudo-moar 906ca0: OUTPUT«(Mu)␤(Mu)␤»

[08:09] <GLRelia> rakudo-moar 48ecd4: OUTPUT«Too many positionals passed; expected 0 arguments but got 2␤  in block <unit> at /tmp/56MotrnerV:1␤␤»

[08:09] <dalek> rakudo-star-daily: d390db3 | coke++ | log/ (9 files):

[08:09] <dalek> rakudo-star-daily: today (automated commit)

[08:09] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d390db34a6

[08:11] *** domm_holiday joined
[08:15] <timotimo> Timo super tired. Timo sleep a little more

[08:15] <dalek> roast/glr: cca514e | (Jimmy Zhuo)++ | S16-io/print.t:

[08:15] <dalek> roast/glr: update S16-io/print.t to use is-run

[08:15] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/cca514ed12

[08:16] <FROGGS> timotimo will miss the Q&A with Larry

[08:16] <lizmat> timotimo will miss Larry Wall Q&A ?

[08:16] <lizmat> :-)

[08:16] <moritz> JimmyZ: I'm working on S16-io/say.t

[08:16] <nine> JimmyZ++

[08:16] <nine> moritz++

[08:17] <lizmat> moritz++ JimmyZ++ nine++ timotimo++

[08:17] <lizmat> :-)

[08:17] <JimmyZ> :)

[08:17] <lizmat> FROGGS++  :-)

[08:18] <FROGGS> O.o

[08:20] *** domidumont left
[08:21] <dalek> roast/glr: f11010e | moritz++ | S16-io/say.t:

[08:21] <dalek> roast/glr: Rewrite say.t by faking $*OUT

[08:21] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/f11010e24a

[08:22] <nine> my $foo = "FOO"; my $gorch = "foo bar"; my @q := «a b c "$foo" f g $gorch m n '$bar' x y z»; say @q.perl;

[08:23] <nine> m: my $foo = "FOO"; my $gorch = "foo bar"; my @q := «a b c "$foo" f g $gorch m n '$bar' x y z»; say @q.perl;

[08:23] <camelia> rakudo-moar 906ca0: OUTPUT«("a", "b", "c", "FOO", "f", "g", ("foo", "bar"), "m", "n", "\$bar", "x", "y", "z")␤»

[08:23] <GLRelia> rakudo-moar 48ecd4: OUTPUT«("a", "b", "c", "FOO", "f", "g", ("foo", "bar"), "m", "n", "\$bar", "x", "y", "z")␤»

[08:23] <lizmat> ah, so it didn't flatten before either ?

[08:23] <moritz> no, but it didn't matter that much before

[08:23] <lizmat> yeah

[08:23] <nine> m: my $foo = "FOO"; my $bar = "BAR"; my $gorch = "foo bar"; @q1 = «$foo $gorch $bar»;

[08:23] <camelia> rakudo-moar 906ca0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/e7U2MLHwfi␤Variable '@q1' is not declared␤at /tmp/e7U2MLHwfi:1␤------> 3my $bar = "BAR"; my $gorch = "foo bar"; 7⏏5@q1 = «$foo $gorch $bar»;␤»

[08:23] <GLRelia> rakudo-moar 48ecd4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/QDfc5hGAYE␤Variable '@q1' is not declared␤at /tmp/QDfc5hGAYE:1␤------> 3my $bar = "BAR"; my $gorch = "foo bar"; 7⏏5@q1 = «$foo $gorch $bar»;␤»

[08:24] <dalek> roast/glr: d663fb5 | (Jimmy Zhuo)++ | S16-io/print.t:

[08:24] <dalek> roast/glr: add more test to print.t

[08:24] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/d663fb5a41

[08:24] <nine> m: my $foo = "FOO"; my $bar = "BAR"; my $gorch = "foo bar"; my @q1 = «$foo $gorch $bar»; say @q1.perl;

[08:24] <camelia> rakudo-moar 906ca0: OUTPUT«["FOO", "foo", "bar", "BAR"]<>␤»

[08:24] <GLRelia> rakudo-moar 48ecd4: OUTPUT«["FOO", ("foo", "bar"), "BAR"]␤»

[08:24] *** domidumont joined
[08:24] <nine> But in this case it did flatten ^^^^

[08:24] <nine> Which does not make sense to me

[08:24] <moritz> if I knew where it was constructed, I'd just stick in a "flat" and be done

[08:24] <nine> Test descriptions are "4 elements in unquoted «» list" vs. "13 elements in mixed quoted/unquoted «» list, non-flattened"

[08:25] <nine> moritz: I already have a pach. It just happens to break the cases where it did not flatten before. And I don't understand why it should not flatten in those cases.

[08:26] <moritz> nine: IMHO it should always flatten, and every test assuming otherwise is a vicitim of Stockholm Syndrome

[08:27] <nine> moritz: ok, I think it's really just a bug in the spec test.

[08:27] <nine> Test description is: "second quote is both parts of $gorch interpolated as sublist in non-flat context"

[08:27] <nine> Point is: there is no second quote.

[08:28] <nine> So I assume $gorch was meant to be quoted there.

[08:28] <moritz> m: my $a = 'a b'; say <<x "$a" y>>.perl

[08:28] <camelia> rakudo-moar 906ca0: OUTPUT«("x", "a b", "y")␤»

[08:28] <GLRelia> rakudo-moar 48ecd4: OUTPUT«("x", "a b", "y")␤»

[08:28] <moritz> yes, then it's a single element, not a sublist

[08:29] <FROGGS> with my patch that makes Any.elems == 1 it still does not iterate over Any

[08:29] <FROGGS> :/

[08:29] <lizmat> :-(

[08:29] <FROGGS> I guess it is an issue in MapIterCommon or so, but I don't see it yet

[08:31] <dalek> rakudo/glr: 3e83f87 | FROGGS++ | src/core/Any-iterable-methods.pm:

[08:31] <dalek> rakudo/glr: remove comment about missing label support

[08:31] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/3e83f87b9d

[08:32] *** domidumont left
[08:32] <dalek> roast/glr: 3177163 | (Stefan Seifert)++ | S02-literals/quoting.t:

[08:32] <dalek> roast/glr: Fix missing quotes in S02-literals/quoting.t

[08:32] <dalek> roast/glr: 

[08:32] <dalek> roast/glr: The test description talks about a "second" quote involving $gorch, but

[08:32] <dalek> roast/glr: $gorch was not quoted. This did not matter before GLR due to implicit

[08:32] <dalek> roast/glr: flattening.

[08:32] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/3177163925

[08:33] *** llfourn joined
[08:33] <dalek> rakudo/glr: bf1307e | (Stefan Seifert)++ | src/Perl6/Actions.nqp:

[08:33] <dalek> rakudo/glr: Fix my $g = "a b"; <<c $g d>> not interpolating the sublist

[08:33] <dalek> rakudo/glr: 

[08:33] <dalek> rakudo/glr: $g gets turned into ('a', 'b') which does no longer interpolate

[08:33] <dalek> rakudo/glr: implicitly. Have to create explicit code to do that to keep << >>

[08:33] <dalek> rakudo/glr: semantics.

[08:33] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/bf1307e4f9

[08:34] *** Ven joined
[08:35] <lizmat> nine++

[08:35] *** lizmat left
[08:42] *** lizmat joined
[08:44] <FROGGS> hmmm, I could bet I tried the very same thing :o)

[08:45] *** domidumont joined
[08:47] <ShimmerFairy> nine: that's actually not how it's supposed to work in the first place

[08:47] <domm_holiday> Hey, I could use some feedback on a small Perl 6 script I will give a talk on at YAPC::Europe:

[08:47] <domm_holiday> https://github.com/domm/potd/blob/master/potd.p6

[08:47] <ShimmerFairy> ah, I misread the section on S02 :)

[08:47] <domm_holiday> It's a more or less straightforward port of https://github.com/domm/potd/blob/master/potd.pl (but the actual Image-resizing etc is still done in Perl5)It's a more or less straightforward port of https://github.com/domm/potd/blob/master/potd.pl (but the actual Image-resizing etc is still done in Perl5)

[08:47] <domm_holiday> I'd appreciate any hints on how to make the code more Perl6ish

[08:47] <domm_holiday> As I'm currently traveling through Morocco, my Internet is rather flaky, so feedback via email would work best, although I've got my irssi running in screen :-)

[08:47] <domm_holiday> Thanks for any help!

[08:48] <domm_holiday> some more context ist linked from here: https://github.com/domm/potd

[08:48] <nine> ShimmerFairy: it is how it's supposed to work _now_ because the spec tests are the authorative source ;)

[08:48] <ShimmerFairy> nine: thinking about it, I kinda want «1 $a» to be equivalent to «1 "$a"»

[08:49] <ShimmerFairy> despite what S02's section on <> and «» says :)

[08:49] <Ven> domm_holiday: our `if` doesn't need parentheses :)

[08:49] *** lizmat left
[08:49] <moritz> domm_holiday: in post_template you can indent the heredoct (both contents and end marker)

[08:50] <Ven> domm_holiday: I think instead "shell" it's usually recommended to use the quoting construct (to prevent injection etc)

[08:50] <moritz> domm_holiday: also most people tend to put a space between the subroutine and the signature

[08:51] <moritz> ah yes, run() if you don't actually need shell interpretation

[08:52] *** bin_005 joined
[08:52] <domm_holiday> wow, thanks, see the last few commits in the repo :-)

[08:52] <domm_holiday> ok, gotta leave now, but any more feedback is of course appreciated :-)

[08:54] *** colomon left
[08:55] <moritz> domm_holiday: you can actually indent the contents of the heredoc, and Perl 6 will strip the leading whitespace for you (at most as much as the delimiter is indented)

[08:55] *** colomon joined
[08:56] <domm_holiday> moritz: ok, so even if I need the file content to start without any spaces, I can indent the heredoc in the code, and perl6 will strip the leading spaces?

[08:57] <domm_holiday> nice, will have to give this a try

[08:57] <domm_holiday> now off for real...

[08:57] <dalek> roast/glr: 60232eb | colomon++ | integration/99problems-21-to-30.t:

[08:57] <dalek> roast/glr: Move combination sub to the GLR.

[08:57] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/60232ebe36

[08:57] <Ven> I opened a PR for GTK::Simple, maybe somebody can look at it? :)

[08:57] <tadzik> Thanks to laben++ and nine++ panda master now works on GLR

[08:57] <colomon> \o/

[08:57] <colomon> Ven: it works, right?

[08:58] <Ven> The tests definitely pass, at least :)

[08:58] <colomon> Merged.

[08:58] <dalek> gtk-simple: 64f1603 | vendethiel++ | / (3 files):

[08:58] <dalek> gtk-simple: Remove duplicate `is repr`, add a missing `my`

[08:58] <dalek> gtk-simple: 

[08:58] <dalek> gtk-simple: and fix the test deprecation warnings

[08:58] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/64f16034b3

[08:58] <dalek> gtk-simple: ffe5757 | colomon++ | / (3 files):

[08:58] <dalek> gtk-simple: Merge pull request #13 from vendethiel/master

[08:58] <dalek> gtk-simple: 

[08:58] <dalek> gtk-simple: Bring GTK::Simple up to date

[08:58] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/ffe5757f9a

[08:58] <Ven> colomon++

[08:58] <colomon> Ven++

[08:59] <hoelzro> o/ #

[08:59] *** adu joined
[08:59] <tadzik> Looking for `rakudobrew triple` users

[08:59] <colomon> tadzik: errr, me, sort of.  :)

[08:59] <tadzik> colomon: will you be willing to maintain it as a rakudobrew plugin if I were to split it?

[09:00] <colomon> …. yes? 

[09:00] <tadzik> k :)

[09:00] <dalek> rakudo/glr: 94e6d13 | (Stefan Seifert)++ | src/core/metaops.pm:

[09:00] <dalek> rakudo/glr: Allow DWIM RHS of infix HYPER to be lazy

[09:00] <dalek> rakudo/glr: 

[09:00] <dalek> rakudo/glr: If the right hand side of an infix hyper like >>+>> is DWIM (the pointy

[09:00] <dalek> rakudo/glr: end points outwards), it may actually be lazy (even infinite) because we

[09:00] <dalek> rakudo/glr: shorten it to the length of the left hand side anyway.

[09:00] <dalek> rakudo/glr: 

[09:00] <dalek> rakudo/glr: Fixes (0,0,0,0,0,0) >>+>> (Slip(1,2) xx *)

[09:00] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/94e6d130e9

[09:00] *** AlexDaniel joined
[09:01] <JimmyZ> m: note Int

[09:01] <camelia> rakudo-moar 906ca0: OUTPUT«(Int)␤»

[09:01] <GLRelia> rakudo-moar bf1307: OUTPUT«␤»

[09:01] *** espadrine joined
[09:02] <dalek> roast/glr: fd0153c | (Jimmy Zhuo)++ | S16-io/ (2 files):

[09:02] <dalek> roast/glr: add more test to say.t, update note.t to use Fake IO

[09:02] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/fd0153ce5c

[09:08] <colomon> m: say ([1, 2], [1, 4]).map(-> $e { say :$e.perl })

[09:08] <camelia> rakudo-moar 906ca0: OUTPUT«:e([1, 2])␤:e([1, 4])␤True True␤»

[09:08] <GLRelia> rakudo-moar bf1307: OUTPUT«:e($[1, 2])␤:e($[1, 4])␤TrueTrue␤»

[09:08] <colomon> m: say ([1, 2], [1, 4]).perl

[09:08] <camelia> rakudo-moar 906ca0: OUTPUT«([1, 2], [1, 4])␤»

[09:08] <GLRelia> rakudo-moar bf1307: OUTPUT«([1, 2], [1, 4])␤»

[09:09] *** broquaint joined
[09:10] *** |Tux| left
[09:13] *** |Tux| joined
[09:14] *** brrt left
[09:14] *** brrt joined
[09:14] *** brrt left
[09:16] *** xinming left
[09:16] *** xinming joined
[09:17] <colomon> m: say ($_ + 1) if $_ > 5 for 1..10

[09:17] <camelia> rakudo-moar 906ca0: OUTPUT«7␤8␤9␤10␤11␤»

[09:17] <GLRelia> rakudo-moar 94e6d1: OUTPUT«7␤8␤9␤10␤11␤»

[09:18] <colomon> m: say (($_ xx 3).Slip if $_ > 5 for 3, 5, 7, 9)

[09:18] <camelia> rakudo-moar 906ca0: OUTPUT«Method 'Slip' not found for invocant of class 'List'␤  in block <unit> at /tmp/UAUVKjZf_m:1␤␤»

[09:18] <GLRelia> rakudo-moar 94e6d1: OUTPUT«(Any)(Any)(Any)(Any)(Any)(Any)␤»

[09:18] <colomon> m: say ($_ xx 3 if $_ > 5 for 3, 5, 7, 9)

[09:18] <GLRelia> rakudo-moar 94e6d1: OUTPUT«(7 7 7)(9 9 9)␤»

[09:18] <camelia> rakudo-moar 906ca0: OUTPUT«7 7 7 9 9 9␤»

[09:18] <colomon> m: say (($_ xx 3).list if $_ > 5 for 3, 5, 7, 9)

[09:18] <GLRelia> rakudo-moar 94e6d1: OUTPUT«((Any) (Any) (Any))((Any) (Any) (Any))␤»

[09:18] <camelia> rakudo-moar 906ca0: OUTPUT«(Any) (Any) (Any) (Any) (Any) (Any)␤»

[09:19] <colomon> m: say (($_ xx 3) if $_ > 5 for 3, 5, 7, 9)

[09:19] <camelia> rakudo-moar 906ca0: OUTPUT«(Any) (Any) (Any) (Any) (Any) (Any)␤»

[09:19] <GLRelia> rakudo-moar 94e6d1: OUTPUT«((Any) (Any) (Any))((Any) (Any) (Any))␤»

[09:19] <colomon> m: say ($_ xx 3 if $_ > 5 for 3, 5, 7, 9)

[09:19] <camelia> rakudo-moar 906ca0: OUTPUT«7 7 7 9 9 9␤»

[09:19] <GLRelia> rakudo-moar 94e6d1: OUTPUT«(7 7 7)(9 9 9)␤»

[09:21] <dalek> roast/glr: ccf062e | colomon++ | integration/advent2011-day23.t:

[09:21] <dalek> roast/glr: Add "flat"s needed for GLR.

[09:21] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/ccf062ed59

[09:22] *** larion left
[09:27] <colomon> m: my @a = (1,2,3).map(*.Int); say @a.perl

[09:27] <camelia> rakudo-moar 906ca0: OUTPUT«[1, 2, 3]<>␤»

[09:27] <GLRelia> rakudo-moar 94e6d1: OUTPUT«[1, 2, 3]␤»

[09:27] <colomon> m: my ($x, @a) = “dummy”, (1,2,3).map(*.Int); say @a.perl

[09:27] <camelia> rakudo-moar 906ca0: OUTPUT«[1, 2, 3]<>␤»

[09:27] <GLRelia> rakudo-moar 94e6d1: OUTPUT«[(1, 2, 3).Seq,]␤»

[09:27] <colomon> GLRers: why is the second result different from the first?

[09:27] <JimmyZ> bug!

[09:36] <colomon> okay, switching over to zip.t for the moment.

[09:36] *** aborazmeh joined
[09:36] *** aborazmeh left
[09:36] *** aborazmeh joined
[09:36] <colomon> m: my @a = 1, 3, 5; my @b = 2, 4, 6; say (@a Z @b).perl

[09:36] <camelia> rakudo-moar 906ca0: OUTPUT«((1, 2), (3, 4), (5, 6))␤»

[09:36] <GLRelia> rakudo-moar 94e6d1: OUTPUT«((1, 2), (3, 4), (5, 6)).Seq␤»

[09:37] <colomon> m: my @a = 1, 3, 5; my @b = 2, 4, 6; say zip(@a, @b).perl

[09:37] <camelia> rakudo-moar 906ca0: OUTPUT«((1, 2), (3, 4), (5, 6))␤»

[09:37] <GLRelia> rakudo-moar 94e6d1: OUTPUT«((1, 2), (3, 4), (5, 6)).Seq␤»

[09:37] *** laben joined
[09:37] <laben> hello p6'ers

[09:37] <colomon> huh.  That’s not what I’m getting in the test suite.

[09:37] <colomon> laben: o/

[09:38] <dalek> roast/glr: d13a1bb | moritz++ | S32-list/map_function_return_values.t:

[09:38] <dalek> roast/glr: Add a flat

[09:38] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/d13a1bb1f6

[09:38] <hoelzro> o/ laben

[09:39] <nine> m: my @r; say |@r;

[09:39] <camelia> rakudo-moar 906ca0: OUTPUT«␤»

[09:39] <GLRelia> rakudo-moar 94e6d1: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/jSKdW6JNtT:1␤␤»

[09:40] <adu> are there any Swagger libs yet?

[09:40] <nine> m: my @r; say |@r;

[09:40] <camelia> rakudo-moar 906ca0: OUTPUT«␤»

[09:40] <GLRelia> rakudo-moar 94e6d1: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/Kme20NQhCS:1␤␤»

[09:40] <nine> jnthn: I might need a hint for this one ^^^

[09:41] <nine> jnthn: looks to me like some .DEFINITE check is missing, but I don't know where.

[09:41] <laben> what is Swagger?

[09:41] *** yeahnoob left
[09:41] <tadzik> Flogging Molly album, for what I know :)

[09:41] *** rmgk is now known as Guest39027

[09:41] *** rmgk_ joined
[09:41] *** Guest39027 left
[09:41] *** rmgk_ is now known as rmgk

[09:43] <adu> laben: http://swagger.io/

[09:43] <colomon> what I’m seeing in zip.t is (with slightly different args), @a Z @b goes into infix:<Z> with \([0, 2, 4], [1, 3, 5]), while zip(@a; @b) goes into it with \(([0, 2, 4]), ([1, 3, 5]))

[09:43] <adu> laben: It's a JSON format for describing web apis

[09:44] *** larion joined
[09:44] <dalek> roast/glr: 9928593 | moritz++ | S32-exceptions/misc.t:

[09:44] <dalek> roast/glr: Make a test for empty list-like thingy more liberal

[09:44] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/9928593af2

[09:44] <adu> laben: There's also a codegen thing for Java, but what I was thinking is something like it for Perl6

[09:45] <dalek> roast/glr: 7e08156 | moritz++ | S32-exceptions/misc.t:

[09:45] <dalek> roast/glr: Fix test plan

[09:45] <dalek> roast/glr: 

[09:45] <dalek> roast/glr: a554c9f3aa2429a0ab43325cbd2d70a18239916c removed four tests

[09:45] <dalek> roast/glr: without adjusting the plan

[09:45] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/7e081563c8

[09:46] <adu> I don't think you would even need codegen with Perl6, you could probably do everything at runtime

[09:46] <laben> nine: your recent patch to DWIM hypers is only half, also, in the <<op>> case, it hangs instead of throwing. want me to do the rest?

[09:47] <nine> laben: yeah, please, if you know what's missing, go ahead :0

[09:47] <nine> :)

[09:48] <laben> adu: there is a YAML parser/generator module, the rest seems to be missing

[09:48] <colomon> m: say "a" «~« set(<pple bbot rmadillo>)

[09:48] <camelia> rakudo-moar 906ca0: OUTPUT«set(rmadillo, bbot, pple)␤»

[09:48] <GLRelia> rakudo-moar 94e6d1: OUTPUT«Cannot modify an immutable Set␤  in block <unit> at /tmp/LQ9VZtmkp8:1␤␤»

[09:48] <laben> nine: i was thinking i also need to add some tests that we're missing on dwims, like the case i fixed the other day

[09:49] <nine> laben: FWIW I ran a full spectest and did not notice any regressions

[09:50] <nine> laben: so yes, more tests are certainly needed

[09:50] <laben> nine: yeah, it's because those cases were not tested. i'll try to add them so they dont regress anymore :)

[09:52] <adu> laben: I guess they are kind of pushing for YAML, but my swagger files are usually JSON

[09:52] <moritz> ++laben

[09:52] <jdv79> is it nomal that t/spec/S32-io/IO-Socket-Async can hang?

[09:52] <jdv79> looks stuck in a futex:(

[09:52] <moritz> jdv79: uhm, I haven't seen it hang, just fail randomly

[09:53] <jdv79> maybe i'll update and try again

[09:53] <laben> adu: there are loads of JSON parsing/generating modules, the recommended ones are JSON::Fast or JSON::Tiny

[09:53] *** esh joined
[09:53] <laben> adu: both work already on glr

[09:54] <adu> laben: what's glr?

[09:54] <masak> TimToady++ # As to people's Qs

[09:54] <adu> as in the parsing algo?

[09:54] <moritz> adu: the Great List Refactoring, and a branch of the same name in rakudo

[09:54] *** colomon left
[09:55] <adu> ah, as in a branch name

[09:55] <laben> adu: it means that it will work when the development glr branch will be merged in

[09:55] <adu> I should probably test my parser

[09:56] <Ven> adu: great list refactor

[09:56] *** lizmat joined
[09:56] *** bin_005 left
[09:57] <moritz> m: my @b = map { hash("v" => $_, "d" => $_ * 2)}, (1, 2, 3); say @b.elems

[09:57] <camelia> rakudo-moar 906ca0: OUTPUT«6␤»

[09:57] <GLRelia> rakudo-moar 94e6d1: OUTPUT«3␤»

[09:57] *** bin_005 joined
[09:57] <laben> btw thanks to nine++ spearheading the work, it seems the majority of the glr troubles were done with. the rest is fixing up the warts and the ecosystem

[09:57] <moritz> laben: uhm, there are still ~60 spectest files failing

[09:58] <nine> 59 :)

[09:58] <FROGGS> :P

[09:58] <laben> yeah but 60 vs 1000+, i would say quite good

[09:58] <masak> what's 59 test failures between friends, eh?

[09:58] <moritz> not test failures, test *file* failures

[09:59] <lizmat> yeah, what moritz said

[09:59] <moritz> many files fail more than one test

[09:59] <laben> work is not complete, but it's 94% of the way there

[09:59] <nine> according to Coke++'s spec test reports, we're actually 99.68 % there

[09:59] *** colomon joined
[10:00] <tadzik> [ptc]: ...so I'm thinking to maybe just make an aggresive decision and make panda refuse to install things that don't have version specified with a git tag to go along with it

[10:00] <colomon> m: <a b b c c c d d d d>.Set.maxpairs

[10:00] <camelia> rakudo-moar 906ca0: ( no output )

[10:00] <GLRelia> rakudo-moar 94e6d1: OUTPUT«Type check failed for return value; expected 'List' but got 'Seq'␤  in block <unit> at /tmp/spiDCiKGF8:1␤␤»

[10:00] <moritz> m: say (1..*).map({}).is-lazy

[10:00] <GLRelia> rakudo-moar 94e6d1: OUTPUT«Cannot call map(Range: Hash); none of these signatures match:␤    ($: &block, :$label, *%_)␤    (HyperIterable:D $: &block, :$label, *%_)␤  in block <unit> at /tmp/PjPjvvV98g:1␤␤»

[10:00] <colomon> m: <a b b c c c d d d d>.Set.maxpairs.say

[10:00] <GLRelia> rakudo-moar 94e6d1: OUTPUT«Type check failed for return value; expected 'List' but got 'Seq'␤  in block <unit> at /tmp/b8EtbDYBlf:1␤␤»

[10:00] <moritz> m: say (1..*).map({;}).is-lazy

[10:00] <GLRelia> rakudo-moar 94e6d1: OUTPUT«True␤»

[10:00] <camelia> rakudo-moar 906ca0: OUTPUT«(timeout)»

[10:00] <camelia> rakudo-moar 906ca0: OUTPUT«a => True c => True b => True d => True␤»

[10:00] <camelia> rakudo-moar 906ca0: OUTPUT«Method 'is-lazy' not found for invocant of class 'List'␤  in block <unit> at /tmp/jqe4gt54S6:1␤␤»

[10:01] <dalek> roast/glr: 1ea8920 | lizmat++ | S02-types/baghash.t:

[10:01] <dalek> roast/glr: Fix one BagHash test

[10:01] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/1ea89200cd

[10:02] <colomon> anyone object to me changing the signature for minpairs and maxpairs in GLR to return Seq instead of List?

[10:02] <hoelzro> I know there has been a lot of discussion about flattening in the GLR; is the flattening of slurpy arguments on the chopping block?

[10:03] <lizmat> colomon: I would prefer losing the return sig

[10:03] <hoelzro> this fellow here: http://blogs.perl.org/users/aaron_baugher/2015/08/a-video-to-song-converter-in-perl-6.html

[10:03] <lizmat> for now

[10:03] <hoelzro> used run(< ffmpeg -i >, $k, < -ab 96k >, "new/%v<newfile>", :out )

[10:03] *** laouji left
[10:03] <colomon> lizmat: works for me.

[10:03] <hoelzro> and I'm wondering if the <...> will still flatten

[10:03] <hoelzro> (they currently do, and from my understanding of the GLR, they should still, but things seem to be in flux)

[10:03] *** dayangkun left
[10:03] <colomon> lizmat: what are those methods meant to do, anyway?

[10:03] <moritz> m: sub f(*@s) { say @s.perl }; f < ffmpeg -i >, $k, < -ab 96k >, "new/%v<newfile>"

[10:03] <camelia> rakudo-moar 906ca0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/UvArV1cTw0␤Variable '$k' is not declared␤at /tmp/UvArV1cTw0:1␤------> 3(*@s) { say @s.perl }; f < ffmpeg -i >, 7⏏5$k, < -ab 96k >, "new/%v<newfile>"␤»

[10:03] <GLRelia> rakudo-moar 94e6d1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/jhqp50Tfjr␤Variable '$k' is not declared␤at /tmp/jhqp50Tfjr:1␤------> 3(*@s) { say @s.perl }; f < ffmpeg -i >, 7⏏5$k, < -ab 96k >, "new/%v<newfile>"␤»

[10:04] <moritz> m: sub f(*@s) { say @s.perl }; f < ffmpeg -i >, (my $k = 2), < -ab 96k >, "new/%v<newfile>"

[10:04] <camelia> rakudo-moar 906ca0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/mRj1jbJB_o␤Variable '%v' is not declared␤at /tmp/mRj1jbJB_o:1␤------> 3eg -i >, (my $k = 2), < -ab 96k >, "new/7⏏5%v<newfile>"␤»

[10:04] <GLRelia> rakudo-moar 94e6d1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/DHmEycVwT5␤Variable '%v' is not declared␤at /tmp/DHmEycVwT5:1␤------> 3eg -i >, (my $k = 2), < -ab 96k >, "new/7⏏5%v<newfile>"␤»

[10:04] <lizmat> colomon: not sure...  watching jnthn now

[10:04] <moritz> m: sub f(*@s) { say @s.perl }; f < ffmpeg -i >, (my $k = 2), < -ab 96k >, "new/bla"

[10:04] <camelia> rakudo-moar 906ca0: OUTPUT«["ffmpeg", "-i", 2, "-ab", "96k", "new/bla"]<>␤»

[10:04] <GLRelia> rakudo-moar 94e6d1: OUTPUT«["ffmpeg", "-i", 2, "-ab", "96k", "new/bla"]␤»

[10:04] <nine> hoelzro: we only flatten implicitly if you pass a container as a single argument to a function. And only if it's not itemized.

[10:04] *** lizmat left
[10:04] <colomon> lizmat: he’s not talking that fast.  ;)

[10:04] <nine> hoelzro: in all other cases you have to flatten manually.

[10:04] <moritz> nine: but here it's the slurpy that flattens

[10:05] <hoelzro> indeed

[10:05] <nine> And from all the spec tests I've fixed where things relied on implicit flattening, this is a very good thing. Sometimes things didn't really work for the reasons the programmer thought they did. Often it was very confusing to find out what was really going on.

[10:06] <dalek> roast/glr: c10975b | moritz++ | S32-list/map.t:

[10:06] <dalek> roast/glr: GLRify S32-list/map.t

[10:06] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/c10975bacf

[10:06] <moritz> 58 :-)

[10:06] <hoelzro> should slurpies still implicitly flatten, then?

[10:07] <nine> hoelzro: really only if they slurp a single container. Think @a.push(@new-elems);

[10:07] <nine> hoelzro: versus @a.push($@sublist)

[10:07] <moritz> why not? There's always ** for when you don't it

[10:07] <laben> can someome explain me the differences between make test, make spectest and make localtest etc?

[10:08] <hoelzro> laben: make test is a quick compiler sanity check

[10:09] *** |Tux| left
[10:09] <hoelzro> make spectest tests rakudo against the langauge specification tests

[10:09] <hoelzro> and make localtest I've just heard of, from you =)

[10:09] <colomon> m: say Set.new([1, 2], 3)

[10:09] <camelia> rakudo-moar 906ca0: OUTPUT«set(1 2, 3)␤»

[10:09] <GLRelia> rakudo-moar 94e6d1: OUTPUT«312␤»

[10:10] <moritz> laben: 'spectest' uses t/spectest.data as a list of test files

[10:10] <moritz> laben: 'localtest' uses t/localtest.data, which is not under version control, so you can fill it with your own set of files

[10:11] * hoelzro .oO( TIL about localtest! )

[10:11] <laben> thanks moritz! are there other kind of make *test?

[10:11] <hoelzro> laben+ moritz++

[10:11] <hoelzro> laben: make fulltest

[10:11] <tadzik> make stresstest

[10:11] <hoelzro> laben++

[10:11] <colomon> laben: make t/spec/S02-types/set.t

[10:11] <colomon> (for instance)

[10:12] <laben> and what do they do "fulltest" and "stresstest"?

[10:12] <tadzik> iirc fulltest is spectest + stresstest?

[10:12] <tadzik> makefile probably knows :)

[10:12] <laben> sorry my Makefile fu is not good

[10:12] <laben> oh

[10:12] <moritz> laben: some files are marked as "stress" in t/spectests.data, because they take rather long

[10:12] <tadzik> oh, no

[10:13] *** |Tux| joined
[10:13] <tadzik> fulltest is make test + make stresstest, from what I see

[10:13] <moritz> and "stresstest" includes them, while normal "make spectest" excludes them

[10:13] *** lizmat joined
[10:14] <moritz> "fullltest" runs "test" and "stresstest"

[10:14] <colomon> m: say Set.new($[1, 2], 3)

[10:14] <camelia> rakudo-moar 906ca0: OUTPUT«set(3, (Any))␤»

[10:14] <GLRelia> rakudo-moar 94e6d1: OUTPUT«[1 2]3␤»

[10:14] <colomon> huh

[10:15] <moritz> m: say Set.new($[1, 2], 3).^name

[10:15] <camelia> rakudo-moar 906ca0: OUTPUT«Set␤»

[10:15] <GLRelia> rakudo-moar 94e6d1: OUTPUT«Set␤»

[10:15] <moritz> m: say Set.new($[1, 2], 3).gist

[10:15] <GLRelia> rakudo-moar 94e6d1: OUTPUT«set(3, [1 2])␤»

[10:15] <camelia> rakudo-moar 906ca0: OUTPUT«set(3, (Any))␤»

[10:15] <laben> thanks again moritz! now i'm ready to enter the world of test-making ^.^

[10:15] <moritz> colomon: it seems the slurpy in sub say(*@) flattens out the set

[10:15] <moritz> m: say Set ~~ Iterable

[10:15] <camelia> rakudo-moar 906ca0: OUTPUT«False␤»

[10:15] <GLRelia> rakudo-moar 94e6d1: OUTPUT«False␤»

[10:16] <moritz> m: say Set ~~ Positional

[10:16] <camelia> rakudo-moar 906ca0: OUTPUT«False␤»

[10:16] <GLRelia> rakudo-moar 94e6d1: OUTPUT«False␤»

[10:16] <colomon> moritz: preivously Set.new([1, 2], 3) does what Set.new($[1, 2], 3) does now.

[10:16] <colomon> right, flattening

[10:16] <moritz> m: sub f(*@s) { say @s.perl }; f Set.new([1, 2], 3)

[10:16] <GLRelia> rakudo-moar 94e6d1: OUTPUT«[set(3,1,2)]␤»

[10:16] <moritz> uhm, no

[10:16] <colomon> hmm?

[10:17] <moritz> the slurpy doesn't flatten it out

[10:17] <timotimo> will there be a recording of the q&a?

[10:17] <lizmat> timotimo: yes, there was

[10:17] <timotimo> phew.

[10:17] <timotimo> i'm not 100% screwed

[10:17] <tadzik> we will never forget

[10:17] <moritz> colomon: I don't understand why &say pretends the set() isn't there

[10:17] <timotimo> the only question i could have thought of was "how did you reach the conclusion that you - out of all the people - would get the colon?"

[10:18] <colomon> moritz: ah

[10:18] <lizmat> colomon moritz : I'm looking at set/bag/mix behaviour in glr

[10:18] <lizmat> we probably need a decision from TimToady 

[10:18] <colomon> lizmat: okay.  

[10:18] <lizmat> m: say Set.new(<a b c>,<d e>)  # is this correct?

[10:18] <GLRelia> rakudo-moar 94e6d1: OUTPUT«acbed␤»

[10:19] <colomon> lizmat: any objections to my checking in the updated signatures (per your suggestion) for minpairs/maxpairs?

[10:19] <lizmat> no objection from me :-)

[10:19] <moritz> m: say Set.new(<a b c>,<d e>).perl

[10:19] <GLRelia> rakudo-moar 94e6d1: OUTPUT«set("a","c","b","e","d")␤»

[10:19] <moritz> seems rather inconsistent with the rest of GLR

[10:19] <lizmat> yes

[10:20] <lizmat> however, my first try at fixing this, resulted in some strange issues

[10:21] <lizmat> https://gist.github.com/lizmat/72a9b56ea23f4da02363

[10:22] <tadzik> hoelzro: tadzik uses Pull Request! It's super-effective!

[10:22] <hoelzro> Bug has fainted!

[10:22] <moritz> is this some cool new technology from github?

[10:22] <tadzik> we gamified it :)

[10:23] <tadzik> yay

[10:23] <hoelzro> tadzik++

[10:23] <hoelzro> tadzik: are you just going through random ecosystem modules?

[10:23] *** |Tux| left
[10:24] <tadzik> hoelzro: I started from HTTP::UserAgent

[10:24] <tadzik> that got me to File::Temp

[10:24] <tadzik> and then I wanted a repl :)

[10:24] <hoelzro> ah ha =)

[10:24] <hoelzro> thanks for the fix

[10:25] <moritz> sounds like Yaks all the way down

[10:26] <lizmat> moritz: yeah

[10:26] *** |Tux| joined
[10:27] *** pnu left
[10:27] *** espadrine left
[10:27] *** braintwist left
[10:27] *** dalek left
[10:27] *** [Tux] left
[10:27] *** skarn left
[10:27] *** SHODAN left
[10:27] *** synbot6 left
[10:27] *** hobbs left
[10:27] *** krakan left
[10:27] *** camelia left
[10:27] *** larion left
[10:27] *** AlexDaniel left
[10:27] *** zakharyas left
[10:27] *** Woodi left
[10:27] *** Peter_R left
[10:27] *** abaugher left
[10:27] *** nowan left
[10:27] *** Gardner left
[10:27] *** jferrero left
[10:27] *** JimmyZ left
[10:27] *** pink_mist left
[10:27] *** colomon left
[10:27] *** bin_005 left
[10:28] *** lizmat left
[10:28] *** colomon joined
[10:29] *** pnu joined
[10:29] *** larion joined
[10:29] *** AlexDaniel joined
[10:29] *** zakharyas joined
[10:29] *** Woodi joined
[10:29] *** Peter_R joined
[10:29] *** abaugher joined
[10:29] *** nowan joined
[10:29] *** Gardner joined
[10:29] *** jferrero joined
[10:29] *** pink_mist joined
[10:29] *** JimmyZ joined
[10:29] *** Khisanth joined
[10:29] *** kst joined
[10:29] *** erdic joined
[10:29] *** psch joined
[10:29] *** apejens joined
[10:29] *** mathw joined
[10:29] *** El_Che joined
[10:30] *** espadrine joined
[10:30] *** braintwist joined
[10:30] *** dalek joined
[10:30] *** [Tux] joined
[10:30] *** skarn joined
[10:30] *** SHODAN joined
[10:30] *** synbot6 joined
[10:30] *** hobbs joined
[10:30] *** krakan joined
[10:30] *** camelia joined
[10:30] *** mls joined
[10:30] *** oha joined
[10:30] *** ruoso joined
[10:30] *** dg joined
[10:30] *** timbunce joined
[10:30] *** weber.freenode.net sets mode: +vv dalek camelia

[10:30] *** colomon left
[10:30] *** espadrine left
[10:30] *** braintwist left
[10:30] *** dalek left
[10:30] *** [Tux] left
[10:30] *** skarn left
[10:30] *** SHODAN left
[10:30] *** synbot6 left
[10:30] *** hobbs left
[10:30] *** krakan left
[10:30] *** camelia left
[10:30] *** mls left
[10:30] *** oha left
[10:30] *** ruoso left
[10:30] *** dg left
[10:30] *** timbunce left
[10:33] *** espadrine joined
[10:33] *** braintwist joined
[10:33] *** [Tux] joined
[10:33] *** skarn joined
[10:33] *** SHODAN joined
[10:33] *** synbot6 joined
[10:33] *** hobbs joined
[10:33] *** krakan joined
[10:33] *** camelia joined
[10:33] *** mls joined
[10:33] *** oha joined
[10:33] *** ruoso joined
[10:33] *** dg joined
[10:33] *** timbunce joined
[10:33] *** weber.freenode.net sets mode: +v camelia

[10:33] *** dalek joined
[10:33] *** ChanServ sets mode: +v dalek

[10:34] <nine> m: my @a = 1,2; my @b = 1,2,3,4; sub test($a, $b) {say $a.perl; say $b.perl;}; test(@a, @b);

[10:34] <GLRelia> rakudo-moar 64db54: OUTPUT«[1, 2]␤[1, 2, 3, 4]␤»

[10:34] <camelia> rakudo-moar 906ca0: OUTPUT«[1, 2]␤[1, 2, 3, 4]␤»

[10:34] <tadzik> ha, looks like HTTP::UA works on GLR

[10:34] <nine> m: my @a = 1,2; my @b = 1,2,3,4; sub test($a is copy, $b) {say $a.perl; say $b.perl;}; test(@a, @b);

[10:34] <camelia> rakudo-moar 906ca0: OUTPUT«[1, 2]␤[1, 2, 3, 4]␤»

[10:34] <GLRelia> rakudo-moar 64db54: OUTPUT«[1, 2]␤[1, 2, 3, 4]␤»

[10:35] <dalek> roast: 5e66cf2 | hoelzro++ | S32-io/copy.t:

[10:35] <dalek> roast: Test copy() when destination exists

[10:35] <dalek> roast: review: https://github.com/perl6/roast/commit/5e66cf2ba6

[10:35] <dalek> roast: 5a81fde | hoelzro++ | S32-io/copy.t:

[10:35] <dalek> roast: Add tests for copy(:createonly)

[10:35] <dalek> roast: review: https://github.com/perl6/roast/commit/5a81fde2bc

[10:36] <nine> m: my @a = 1,2; my @b = 1,2,3,4,5; use nqp; say nqp::getattr(Range.new(@a, @b), Range, <$!max>).perl;

[10:36] <camelia> rakudo-moar 906ca0: OUTPUT«[1, 2, 3, 4, 5]␤»

[10:36] <GLRelia> rakudo-moar 64db54: OUTPUT«[1, 2, 3, 4, 5]␤»

[10:38] *** Fleurety joined
[10:40] <dalek> roast: c4385c4 | hoelzro++ | S32-io/copy.t:

[10:40] <dalek> roast: Change copy(:createonly) test to check for X::IO::Copy

[10:40] <dalek> roast: review: https://github.com/perl6/roast/commit/c4385c4901

[10:44] *** Averna joined
[10:44] *** Averna left
[10:44] <tadzik> huh, we have 'authors' defined in S22, but most of the ecosystem uses 'author'

[10:44] <dalek> rakudo/nom: 17a7747 | hoelzro++ | src/core/io_operators.pm:

[10:44] <dalek> rakudo/nom: Add :createonly to sub copy()

[10:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17a7747b08

[10:44] <tadzik> arglebargle

[10:45] *** telex left
[10:45] <tadzik> also Please note that for identification purposes, only the owner (who uploaded the distribution to the content storage) should be used

[10:45] <tadzik> so why even have a list there?

[10:45] *** TEttinger left
[10:45] <tadzik> oh, the owner *field*

[10:45] <tadzik> ...which nobody uses :)

[10:45] <tadzik> oh, nvm

[10:46] <tadzik> okay, I got de-confused

[10:46] *** telex joined
[10:47] *** Averna joined
[10:47] *** adu left
[10:48] *** diana_olhovik_ left
[10:49] <dalek> rakudo/glr: 30cc6a3 | (Stefan Seifert)++ | src/core/Range.pm:

[10:49] <dalek> rakudo/glr: Handle lists as right end point of Ranges

[10:49] <dalek> rakudo/glr: 

[10:49] <dalek> rakudo/glr: @a..@b should mean @.elems .. @b.elems.

[10:49] <dalek> rakudo/glr: We already had code to explicitly handle a list on the left hand side.

[10:49] <dalek> rakudo/glr: That it worked on the right hand side was probably due to some side

[10:49] <dalek> rakudo/glr: effect of the implementation that we lost when refactoring.

[10:49] <dalek> rakudo/glr: Add code to explicitly handle it once and for all instead.

[10:49] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/30cc6a31cd

[10:51] *** diana_olhovik_ joined
[10:51] *** Ven left
[10:54] <nine> 54!

[10:55] <timotimo> after much delay, i'll finally actually head out

[10:55] <timotimo> will i get a bit of noms at the venue to replace my missed breakfast?

[10:56] <nine> timotimo: noms just started

[10:59] <timotimo> great!

[10:59] <dalek> roast/glr: 0edc6f8 | (Stefan Seifert)++ | S03-operators/repeat.t:

[10:59] <dalek> roast/glr: Remove obsolete todo marker. Works on GLR now.

[10:59] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0edc6f89ad

[11:00] <nine> 52!

[11:03] <laben> nine: can you check on your machine if S03-metaops/hypers.t has regressed?

[11:04] <dalek> roast/glr: bb702e3 | (Stefan Seifert)++ | S03-operators/assign.t:

[11:04] <dalek> roast/glr: Remove another obsolete todo marker. Passes on GLR!

[11:04] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/bb702e33db

[11:04] <laben> m: use Test; eval-dies-ok 'my @a >>[=]>> (1,2,3)', "hypering assignment dies correctly";

[11:04] <camelia> rakudo-moar 906ca0: OUTPUT«not ok 1 - hypering assignment dies correctly␤␤# Failed test 'hypering assignment dies correctly'␤# at /tmp/FNmySmOsSu line 1␤»

[11:04] <GLRelia> rakudo-moar 30cc6a: OUTPUT«not ok 1 - hypering assignment dies correctly␤␤# Failed test 'hypering assignment dies correctly'␤# at /tmp/dww0KnenjM line 1␤»

[11:05] <laben> m: use Test; is True «+« (), (), "left-dwim hyper against empty RHS doesn't hang";

[11:05] <camelia> rakudo-moar 906ca0: OUTPUT«ok 1 - left-dwim hyper against empty RHS doesn't hang␤»

[11:05] <GLRelia> rakudo-moar 30cc6a: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/L4WrYbKr5Y:1␤␤»

[11:05] *** FROGGS left
[11:06] <laben> m: True <<+<< ()

[11:06] <camelia> rakudo-moar 906ca0: ( no output )

[11:06] <GLRelia> rakudo-moar 30cc6a: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/PcziSd9P7K:1␤␤»

[11:06] <laben> m: ().elems

[11:06] <camelia> rakudo-moar 906ca0: ( no output )

[11:06] <GLRelia> rakudo-moar 30cc6a: ( no output )

[11:06] <laben> m: True.elems

[11:06] <camelia> rakudo-moar 906ca0: ( no output )

[11:06] <GLRelia> rakudo-moar 30cc6a: ( no output )

[11:06] <laben> m: my @a >>[=]>> (1,2,3)

[11:06] <GLRelia> rakudo-moar 30cc6a: ( no output )

[11:06] <camelia> rakudo-moar 906ca0: ( no output )

[11:07] <laben> m: my @a >>[=]>> (1,2,3); dd @a

[11:07] <camelia> rakudo-moar 906ca0: OUTPUT«@a = []<>␤»

[11:07] <GLRelia> rakudo-moar 30cc6a: OUTPUT«@a = []␤»

[11:13] *** rurban left
[11:17] <nine> laben: the elems error is due to my @r; say |@r;

[11:17] <nine> m: my @r; say |@r;

[11:17] <camelia> rakudo-moar 906ca0: OUTPUT«␤»

[11:17] <GLRelia> rakudo-moar 30cc6a: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/5It1QKwFCs:1␤␤»

[11:18] <laben> due to "say" or to flattening? it errors out even without "say", see "True <<+<< ()"

[11:18] <laben> m: True <<+<< ()

[11:18] <GLRelia> rakudo-moar 30cc6a: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/AL3b2r0YCp:1␤␤»

[11:18] <camelia> rakudo-moar 906ca0: ( no output )

[11:19] <laben> the eval one evals without dieing anymore, someone (stub-)implemented hyper assign?

[11:19] <laben> m: my @a >>[=]>> (1,2,3); dd @a

[11:19] <camelia> rakudo-moar 906ca0: OUTPUT«@a = []<>␤»

[11:19] <GLRelia> rakudo-moar 30cc6a: OUTPUT«@a = []␤»

[11:21] <nine> laben:  due to the |@a when @a is empty

[11:21] *** lizmat joined
[11:24] <laben> i guess i'll wait on that one. what to do on the eval one? change to eval-ok and test that it does not assign anything?

[11:29] *** Ven joined
[11:31] *** FROGGS joined
[11:31] <FROGGS> yay, I think I got 'for Any {' and friends nailed down

[11:33] *** gfldex joined
[11:33] <tadzik> wow

[11:34] <dalek> rakudo/glr: 348886d | FROGGS++ | src/core/ (2 files):

[11:34] <dalek> rakudo/glr: make Any.elems==1 and Any.list==(Any)

[11:34] <dalek> rakudo/glr: 

[11:34] <dalek> rakudo/glr: ... as discussed with jnhtn and others. This fixes the issue that you were

[11:34] <dalek> rakudo/glr: not able to iterate over a single type object.

[11:34] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/348886d9bb

[11:34] <tadzik> panda's META.info now has 41 lines of "authors"

[11:34] *** lizmat left
[11:36] <tadzik> https://github.com/tadzik/panda/blob/master/META.info#L7

[11:36] <tadzik> that's pure happiness

[11:36] *** domidumont left
[11:36] *** larion left
[11:36] <timotimo> \o/

[11:36] <JimmyZ> FROGGS: multi method list(Any:D:) and multi method list(Any:U:) can be just multi method list(Any:)? since the code is same

[11:37] <FROGGS> JimmyZ: aye, forgot to change that... I left it in case I needed it, but it can be simplified

[11:38] *** aborazmeh left
[11:38] <dalek> roast/glr: fb33c96 | FROGGS++ | S (3 files):

[11:38] <dalek> roast/glr: follow Any.list beeing 1

[11:38] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/fb33c96f9a

[11:39] <nine> FROGGS: btw. I don't see any reason to use infix:<,> to create a List anymore

[11:39] *** domidumont joined
[11:39] <FROGGS> nine: ohh, I just was lazy I guess

[11:39] <FROGGS> didn't thought about it much

[11:43] <timotimo> d'oh, the big room isn't filled very much, but the small one is packed to the brim

[11:43] <timotimo> ab5tract++ is filling up the room quite well

[11:49] *** lizmat joined
[11:50] <FROGGS> my patch potentially causes regressions in t/spec/S17-supply/classify.t

[11:50] <FROGGS> but I'm not sure

[11:50] <dalek> roast: 5e7d42f | vendethiel++ | S03-metaops/cross.t:

[11:50] <dalek> roast: fix cross metaop with nested/itemized lists

[11:50] <dalek> roast: review: https://github.com/perl6/roast/commit/5e7d42fb82

[11:51] <nine> FROGGS: classify.t has been failing before, too.

[11:51] <[Coke]> The Q&A with larry should eventually end up on youtube, I'll let you know when we have a URL.

[11:51] <[Coke]> (they're double checking audio, etc.)

[11:52] * [Coke] is reminded how empty https://github.com/coke/mojo6 is. :(

[11:53] <tony-o> why doesn't panda precompile anymore?

[11:54] *** larion joined
[11:54] <moritz> m: my Int %h{Str} = a => 1, b => 2; say %h.pairs.sort.map({.perl(:arglist)}).join(', ');

[11:54] <camelia> rakudo-moar 17a774: OUTPUT«"a" => 1, "b" => 2␤»

[11:54] <GLRelia> rakudo-moar 348886: OUTPUT«:a(1), :b(2)␤»

[11:54] <moritz> m: my Int %h{Str} = a => 1, b => 2; say %h.perl

[11:54] <camelia> rakudo-moar 17a774: OUTPUT«Hash[Int,Str].new("a" => 1, "b" => 2)␤»

[11:54] <GLRelia> rakudo-moar 348886: OUTPUT«Hash[Int,Str].new(:a(1), :b(2))␤»

[11:55] <moritz> m: my Int %h{Str} = a => 1, b => 2; say EVAL(%h.perl).perl

[11:55] <camelia> rakudo-moar 17a774: OUTPUT«Hash[Int,Str].new("a" => 1, "b" => 2)␤»

[11:55] <GLRelia> rakudo-moar 348886: OUTPUT«Hash[Int,Str].new()␤»

[11:55] <Ven> https://github.com/rakudo/rakudo/pull/518

[11:55] <moritz> m: my Int %h{Str} = a => 1, b => 2; say EVAL(%h.perl).elems

[11:55] <camelia> rakudo-moar 17a774: OUTPUT«2␤»

[11:55] <GLRelia> rakudo-moar 348886: OUTPUT«0␤»

[11:55] <moritz> m: say Hash.new(:a(1)).perl

[11:55] <camelia> rakudo-moar 17a774: OUTPUT«{}<>␤»

[11:55] <GLRelia> rakudo-moar 348886: OUTPUT«{}␤»

[11:56] *** abraxxa left
[11:56] <moritz> ah, that's the problem; Hash.perl produces named args, but Hash.new doesn't accept named args

[11:58] <dalek> rakudo/glr: eda95ad | vendethiel++ | src/core/metaops.pm:

[11:58] <dalek> rakudo/glr: make cross metaop respect itemization

[11:58] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/eda95ad329

[11:58] <dalek> rakudo/glr: c68db93 | niner++ | src/core/metaops.pm:

[11:58] <dalek> rakudo/glr: Merge pull request #518 from vendethiel/glr

[11:58] <dalek> rakudo/glr: 

[11:58] <dalek> rakudo/glr: make cross metaop respect itemization

[11:58] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/c68db93042

[11:59] <moritz> TimToady: ^^ the Hash.perl regression seems to be your doing

[11:59] <tony-o> yea precomp only sped up parsing by a second, damn.

[12:01] <dalek> ecosystem: e570cb3 | (Tadeusz “tadzik” Sośnierz)++ | META.list:

[12:01] <dalek> ecosystem: Retire IO::Select

[12:01] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e570cb366a

[12:01] <tadzik> oh now dalek doesn't know who I am

[12:01] <tadzik> where do we fix this?

[12:02] <timotimo> parsing what exactly?

[12:03] <tony-o> timotimo: wrong channel, seeing what performance i can get on a from-json method

[12:04] <timotimo> ah

[12:05] <timotimo> this is about json::fast, too?

[12:05] <timotimo> or are you trying a different approach?

[12:05] <tony-o> just trying some different approaches

[12:05] <tony-o> not sure i can beat json::fast without nativecall, though

[12:07] <timotimo> there's still one thing that's bad about json::fast which is that the loop in nom_ws allocates a BOOTCode every time it starts

[12:07] <timotimo> which means it doesn't get inlined

[12:08] *** Ven left
[12:10] <JimmyZ> timotimo: Moarvm has a roadmap about it

[12:10] <FROGGS> what is the current test file count?

[12:11] *** Loren joined
[12:14] *** rindolf left
[12:15] <nine> I think 50 or 51

[12:15] *** Loren_ joined
[12:15] *** Averna left
[12:15] <nine> Fixing List.ACCEPTS may raise that number though :(

[12:17] *** lizmat left
[12:18] *** Loren left
[12:20] *** blackcat_ joined
[12:21] <FROGGS> huh:

[12:21] <FROGGS> t/spec/integration/precompiled.rakudo.moar                  (Wstat: 0 Tests: 7 Failed: 0)

[12:21] <FROGGS>   TODO passed:   6

[12:22] <FROGGS> I even think that was my patch... as it turned up before I pulled other patches

[12:23] *** Loren joined
[12:23] *** Loren_ left
[12:24] <nine> FROGGS: I see nothing wrong with fixing TODOs :)

[12:24] <FROGGS> aye :o)

[12:25] *** blackcat_ left
[12:27] *** tinyblak joined
[12:31] *** tinyblak left
[12:32] *** coffee` left
[12:34] <nine> If I give List a real ACCEPTS method, S05-modifier and S05-substitution tests start to fail.

[12:34] *** lizmat joined
[12:34] <moritz> FROGGS: fwiw the precompiled.t test is a flapper here

[12:34] *** lizmat left
[12:34] <moritz> (the passing TODO)

[12:35] <FROGGS> ohh, sad

[12:35] <FROGGS> also this?

[12:35] <FROGGS> t/spec/S09-typed-arrays/arrays.rakudo.moar                  (Wstat: 0 Tests: 77 Failed: 0)

[12:35] <FROGGS>   TODO passed:   47, 63

[12:36] <FROGGS> ohh, and:

[12:36] <FROGGS> t/spec/S04-phasers/begin.rakudo.moar                        (Wstat: 0 Tests: 13 Failed: 0)

[12:36] <FROGGS>   TODO passed:   13

[12:36] *** brrt joined
[12:36] *** Ven joined
[12:37] <timotimo> JimmyZ: that's not a moarvm problem, really; this is about having an intlexref preventing the block from being inlined

[12:37] <timotimo> which i've been trying to improve, but i've been failing, too :|

[12:38] <JimmyZ> you mean lex => local optimization?

[12:38] <timotimo> yes

[12:39] *** Ven left
[12:42] <JimmyZ> that looks like will reduce the core setting size 

[12:43] <timotimo> it is likely to, yeah, but it's also a big performance win for tight loops

[12:43] * JimmyZ agrees

[12:44] *** Ven joined
[12:47] <dalek> roast/glr: f5c11d0 | (Stefan Seifert)++ | S09-typed-arrays/arrays.t:

[12:47] <dalek> roast/glr: Remove obsolete TODO markers in S09-typed-arrays/arrays.t

[12:47] <dalek> roast/glr: 

[12:47] <dalek> roast/glr: Thanks to FROGGS++ for pointing this out!

[12:47] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/f5c11d03d2

[12:48] <nine> m: use Test; my $bound; BEGIN { $bound := 'foo'; } is $bound, 'foo';

[12:48] <camelia> rakudo-moar 17a774: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Ud_rvyt5Yw␤Strange text after block (missing semicolon or comma?)␤at /tmp/Ud_rvyt5Yw:1␤------> 3t; my $bound; BEGIN { $bound := 'foo'; }7⏏5 is $bound, 'foo';␤    expecting any of:␤        infix…»

[12:48] <GLRelia> rakudo-moar c68db9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PZTttnvq96␤Strange text after block (missing semicolon or comma?)␤at /tmp/PZTttnvq96:1␤------> 3t; my $bound; BEGIN { $bound := 'foo'; }7⏏5 is $bound, 'foo';␤    expecting any of:␤        infix…»

[12:48] <nine> m: use Test; my $bound; BEGIN { $bound := 'foo'; }; is $bound, 'foo';

[12:48] <camelia> rakudo-moar 17a774: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/5YhQoM8lCY line 1␤# expected: 'foo'␤#      got: (Any)␤»

[12:48] <GLRelia> rakudo-moar c68db9: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/KfG5bMQIdu line 1␤# expected: 'foo'␤#      got: (Any)␤»

[12:48] *** Loren_ joined
[12:49] <nine> I don't know why this passes in the spec test file, but it obviously is not fixed yet.

[12:51] *** xfix joined
[12:51] *** xfix left
[12:51] *** xfix joined
[12:51] *** Loren left
[12:56] *** larion left
[12:56] <nine> m: my @a = any(3, 4); say @a.perl;

[12:56] <camelia> rakudo-moar 17a774: OUTPUT«[any(3, 4)]<>␤»

[12:56] <GLRelia> rakudo-moar c68db9: OUTPUT«[4]␤»

[12:57] <[Coke]> O_o

[12:57] *** larion joined
[12:57] <nine> m: my @a = (any(3, 4),); say @a.perl;

[12:57] <camelia> rakudo-moar 17a774: OUTPUT«[any(3, 4)]<>␤»

[12:57] <GLRelia> rakudo-moar c68db9: OUTPUT«[any(3, 4)]␤»

[12:58] <nine> m: say any(3, 4).item;

[12:58] <camelia> rakudo-moar 17a774: OUTPUT«any(3, 4)␤»

[12:58] <GLRelia> rakudo-moar c68db9: OUTPUT«(timeout)»

[12:58] <nine> That's even more worrying

[12:58] *** adu joined
[12:58] <nine> m: say any(3, 4).item.perl;

[12:58] <camelia> rakudo-moar 17a774: OUTPUT«any(3, 4)␤»

[12:58] <GLRelia> rakudo-moar c68db9: OUTPUT«any(3, 4)␤»

[12:59] *** adu left
[12:59] *** skids joined
[12:59] *** rurban joined
[13:03] <ShimmerFairy> m: my @a = any(3, 4); say @a.perl;

[13:03] <camelia> rakudo-moar 17a774: OUTPUT«[any(3, 4)]<>␤»

[13:03] <GLRelia> rakudo-moar c68db9: OUTPUT«[4]␤»

[13:04] <dalek> perl6-examples: 8a9c60d | paultcochrane++ | / (3 files):

[13:04] <dalek> perl6-examples: Add --no-highlight option to htmlify

[13:04] <dalek> perl6-examples: 

[13:04] <dalek> perl6-examples: Which passes information about whether or not to run syntax highlighting on

[13:04] <dalek> perl6-examples: to the website object which builds the website.

[13:04] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/8a9c60dbbc

[13:04] <dalek> perl6-examples: 19b56c7 | paultcochrane++ | / (2 files):

[13:04] <dalek> perl6-examples: Turn off syntax highlighting if --no-highlighting is set

[13:04] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/19b56c7ac0

[13:04] <dalek> perl6-examples: 7c832ab | paultcochrane++ | Makefile:

[13:04] <dalek> perl6-examples: Add html-nohighlight make target

[13:04] <dalek> perl6-examples: 

[13:04] <dalek> perl6-examples: This generates the html without syntax highlighting to speed things up for

[13:04] <dalek> perl6-examples: development work.

[13:04] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/7c832ab92f

[13:04] <dalek> perl6-examples: 133f103 | paultcochrane++ | lib/Pod/Htmlify.pm6:

[13:04] <dalek> perl6-examples: Swap back to previous category sorting code

[13:04] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/133f103238

[13:04] <dalek> perl6-examples: 6ffeb8a | paultcochrane++ | lib/Pod/Htmlify.pm6:

[13:04] <dalek> perl6-examples: Sort lists of subcategories by key when generating the index page

[13:04] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/6ffeb8a24b

[13:06] <[Coke]> hack is MUCH faster today. Probably because everyone is in the talks.

[13:06] <[ptc]> _itz: sorting in example subcategories should work again now.  The change probably happened after hashes lost their implicit ordering (that was a while ago now)

[13:06] <timotimo> heh.

[13:08] *** muraiki joined
[13:09] <[Coke]> m: my ($foo, $bar = "baz") = <a>; say "$foo $bar";

[13:09] <camelia> rakudo-moar 17a774: OUTPUT«Use of uninitialized value $bar of type Any in string context  in block <unit> at /tmp/zhNVztssuh:1␤a ␤»

[13:09] <GLRelia> rakudo-moar c68db9: OUTPUT«Use of uninitialized value $bar of type Any in string context  in block <unit> at /tmp/Wrqq6JMeKx:1␤a ␤»

[13:10] *** Loren_ left
[13:12] <[Coke]> m: enum A (b => 42, <c d e>); say A.enums.perl

[13:12] <camelia> rakudo-moar 17a774: OUTPUT«{:b(42), "c d e" => 43}<>␤»

[13:12] <GLRelia> rakudo-moar c68db9: OUTPUT«{:b(42), "c d e" => 43}␤»

[13:12] <[Coke]> ^^ does that look acceptable?

[13:12] <[Coke]> RT #115052

[13:12] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=115052

[13:13] *** smls joined
[13:17] *** plicease left
[13:17] *** plicease joined
[13:17] *** Ven left
[13:18] <moritz> [Coke]: I agree with RT #123191 that it should flatten the list, i.e. produces b => 42, c => 43, d => 43, e => 44

[13:18] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123191

[13:19] <[Coke]> moritz: can I merge those tickets?

[13:20] <[Coke]> (I see they are referring to each other)

[13:20] <moritz> [Coke]: no, I'd simply close RT #115052

[13:20] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=115052

[13:20] <moritz> [Coke]: the error doesn't appear anymore

[13:21] <brrt> javascript is becoming more.. .perly, apparantly

[13:22] <brrt> http://v8project.blogspot.nl/2015/08/v8-release-46.html

[13:22] <skids> Reminder for hackathon folks, when you get to unflattenning the sub forms in Any-iterable, see https://gist.github.com/skids/4f6ff2e1c1e3b6855773 it fixes some stuff that can be tricky to find.

[13:22] <skids> I never sent a PR for the brach I had where I was doing that, because it was pre-GLRR.

[13:23] <FROGGS> m: my $x = do if 0 { 1 } elsif 0 { 2 }; say $x

[13:23] <camelia> rakudo-moar 17a774: OUTPUT«Empty␤»

[13:23] <GLRelia> rakudo-moar c68db9: OUTPUT«␤»

[13:23] <FROGGS> m: my $x = do if 0 { 1 } elsif 0 { 2 }; say $x.defined

[13:23] <camelia> rakudo-moar 17a774: OUTPUT«False␤»

[13:23] <GLRelia> rakudo-moar c68db9: OUTPUT«True␤»

[13:23] <FROGGS> m: my $x = do if 0 { 1 } elsif 0 { 2 }; say $x.WHAT

[13:23] <camelia> rakudo-moar 17a774: OUTPUT«Empty␤»

[13:23] <GLRelia> rakudo-moar c68db9: OUTPUT«(Slip)␤»

[13:23] <FROGGS> should this be Nil by any chance?

[13:24] *** larion left
[13:26] <moritz> how do I iterate a Perl 6 Iterable from NQP?

[13:28] <FROGGS> uff

[13:32] <moritz> this is for https://rt.perl.org/Public/Bug/Display.html?id=123191 where we should flatten a sublist

[13:33] <nine> skids!

[13:33] <skids> o/

[13:34] *** bloonix joined
[13:34] <FROGGS> m: for 1..2 { FIRST { say "hello $_" } }

[13:34] <camelia> rakudo-moar 17a774: OUTPUT«hello 1␤»

[13:34] <GLRelia> rakudo-moar c68db9: ( no output )

[13:34] *** virtualsue joined
[13:34] <nine> skids: I found out that our List .ACCEPTS just about everything. If I fix that by giving it an implementation the S05-modifier tests start failing. Can you have a look?

[13:35] *** Loren_ joined
[13:35] <skids> nine: I'm at $DAYJOB, unfortunately.

[13:37] *** lizmat joined
[13:42] <nine> skids: any idea where I could look at?

[13:44] *** Ven joined
[13:45] <skids> nine: Well there are a couple smartmatches in there but they should only happen to Ranges.

[13:46] <dalek> doc: 2e91532 | hoelzro++ | lib/Language/unicode_entry.pod:

[13:46] <dalek> doc: Mention Vim's unicode digraphs

[13:46] <dalek> doc: review: https://github.com/perl6/doc/commit/2e91532e92

[13:47] <skids> nine: which tests fail?

[13:51] *** lizmat left
[13:52] <timotimo> phew, it's really rather warm

[13:53] <skids> nine: I'd look at '$multi = Positional.ACCEPTS($nth);' which is supposed to determine which code to run at the bottom. (e.g. detect :nth(3) vs :nth(2,3) or :nth(2,4...*))

[13:56] *** virtualsue left
[14:07] *** coffee` joined
[14:09] <dalek> rakudo/nom: 97ae81f | hoelzro++ | src/core/Exception.pm:

[14:09] <dalek> rakudo/nom: Add X::IO::Move

[14:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/97ae81fe5d

[14:09] <dalek> rakudo/nom: eb6de6d | hoelzro++ | src/core/ (2 files):

[14:09] <dalek> rakudo/nom: Implement IO.move() and move()

[14:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb6de6d6bf

[14:09] <dalek> roast: 66de147 | hoelzro++ | S32-io/move.t:

[14:09] <dalek> roast: Add test for move() and IO.move()

[14:09] <dalek> roast: review: https://github.com/perl6/roast/commit/66de147fb2

[14:10] *** andreoss joined
[14:10] <nine> skids: ok('abab' ~~ m:2x/ab/,  ':2x (repetition) modifier (+)');

[14:10] <andreoss> m: my @x = do for 1..10 {  start {  } }; map await, @x

[14:10] <camelia> rakudo-moar 17a774: OUTPUT«Must specify a Promise or Channel to await on␤  in block <unit> at /tmp/GXm1XcYyU6:1␤␤»

[14:10] <GLRelia> rakudo-moar c68db9: OUTPUT«Must specify a Promise or Channel to await on (got an empty list)␤  in block <unit> at /tmp/OV08Wr31k_:1␤␤»

[14:11] <andreoss> where does this empty list come from?

[14:11] <masak> phew, talks are over.

[14:12] <masak> correction: I don't have to give more talk :)

[14:12] *** Sqirrel left
[14:13] <nine> skids: Positional.ACCEPTS?? But Positional is just a Role and an almost empty at that.

[14:14] <skids> nine: ok then not that ACCEPTS line it does not get hit without :nth.  The line (0..Inf).Array would be hit only when :x but no :nth.

[14:15] <nine> Ah, timotimo++ cleared it up. Positional.ACCEPTS($nth) is just a different way to write nqp::istype($nth, Positional)

[14:16] <andreoss> m: my @z = 1..10; my @x = do while my @z.shift {  start { $_  } }; say await @x

[14:16] <camelia> rakudo-moar 17a774: OUTPUT«Potential difficulties:␤    Redeclaration of symbol @z␤    at /tmp/TWd0nXQ198:1␤    ------> 3my @z = 1..10; my @x = do while my @z7⏏5.shift {  start { $_  } }; say await @x␤␤»

[14:16] <GLRelia> rakudo-moar c68db9: OUTPUT«Potential difficulties:␤    Redeclaration of symbol @z␤    at /tmp/xncxmTdYzt:1␤    ------> 3my @z = 1..10; my @x = do while my @z7⏏5.shift {  start { $_  } }; say await @x␤␤»

[14:16] <nine> I think, I start to understand what's happening. match returns a list in those nth-cases. That's why implementing ACCEPTS on List changes the outcome.

[14:16] <andreoss> m: my @z = 1..10; my @x = do while @z.shift {  start { $_  } }; say await @x

[14:16] <camelia> rakudo-moar 17a774: OUTPUT«␤»

[14:16] <GLRelia> rakudo-moar c68db9: OUTPUT«␤»

[14:17] *** andreoss left
[14:18] <skids> nine: Yes and it should hit the listgen code for anything with an :x as well.  The above test does not have an :nth so if it is the only one failing I'd look at (0..Inf).Array.

[14:18] *** andreoss joined
[14:19] <andreoss> m: my @z = 1..10; my @x = do while my $u = @z.shift {  start { $u } }; await @x

[14:19] <camelia> rakudo-moar 17a774: ( no output )

[14:19] <GLRelia> rakudo-moar c68db9: ( no output )

[14:19] <hoelzro> m: ''.substr(0, *-16)

[14:19] <camelia> rakudo-moar 17a774: ( no output )

[14:19] <GLRelia> rakudo-moar c68db9: ( no output )

[14:19] <hoelzro> m: say(''.substr(0, *-16))

[14:19] <camelia> rakudo-moar 17a774: OUTPUT«Number of characters argument to substr out of range. Is: -16, should be in 0..Inf; use *-16 if you want to index relative to the end␤  in block <unit> at /tmp/0VjtwxJfe7:1␤␤»

[14:19] <GLRelia> rakudo-moar c68db9: OUTPUT«Number of characters argument to substr out of range. Is: -16, should be in 0..Inf; use *-16 if you want to index relative to the end␤  in block <unit> at /tmp/NksYpL0ufB:1␤␤»

[14:19] <nine> Soo...is it possible, that nth does not actually work all that well?

[14:19] <hoelzro> ^ is that a bug?

[14:19] *** lizmat joined
[14:19] <skids> nine: (not that I understand the bottom part of that method too well :-)

[14:19] <nine> m: say "foo" ~~ m:2x/foo/;

[14:19] <camelia> rakudo-moar 17a774: OUTPUT«␤»

[14:19] <GLRelia> rakudo-moar c68db9: OUTPUT«␤»

[14:19] <masak> m: class C { has $.foo is rw where { $++ < 2 } }; given C.new { .foo = 1; say .foo; .foo = 2; say .foo; .foo = 3 }

[14:20] <camelia> rakudo-moar 17a774: OUTPUT«1␤2␤Type check failed in assignment to '$!foo'; expected '<anon>' but got 'Int'␤  in block <unit> at /tmp/U0mQkWTVfZ:1␤␤»

[14:20] <GLRelia> rakudo-moar c68db9: OUTPUT«1␤2␤Type check failed in assignment to '$!foo'; expected '<anon>' but got 'Int'␤  in block <unit> at /tmp/_93IAw7zwk:1␤␤»

[14:20] <masak> hee hee

[14:20] <masak> state variables in where blocks... :)

[14:20] <nine> Aaaaaah...now it makes sense!

[14:20] <nine> List had the following ACCEPTS method: multi method ACCEPTS(List:D:, $topic) { self }

[14:21] <timotimo> ... how does it make sense?

[14:21] <timotimo> does having that method make sense? or does behavior caused by this make sense now?

[14:21] <nine> Str.match will return a list of matches for the nth-stuff. If this list was empty, List.ACCEPTS would boolify to False. If it contained Matches (because the match was successfull) it boolifies to True.

[14:21] <TimToady> List is one of the distinguished "result" types that prevent a redispatch to .ACCEPTS

[14:21] <timotimo> oooooh

[14:22] <masak> wow, I didn't know about that

[14:22] <TimToady> like True, False

[14:22] <timotimo> i remember something about that

[14:22] <JimmyZ> m: class C { has $.foo is rw where { $++ < 2 } }; given C.new { .foo = 3; say .foo; .foo = 5; say .foo; .foo = 3 }

[14:22] <GLRelia> rakudo-moar c68db9: OUTPUT«3␤5␤Type check failed in assignment to '$!foo'; expected '<anon>' but got 'Int'␤  in block <unit> at /tmp/BciYcQ8pDD:1␤␤»

[14:22] <camelia> rakudo-moar 17a774: OUTPUT«3␤5␤Type check failed in assignment to '$!foo'; expected '<anon>' but got 'Int'␤  in block <unit> at /tmp/QpoUT_f16t:1␤␤»

[14:22] <nine> TimToady: this messes up (1, 2, 3) ~~ (1, 2, 3) now

[14:22] <timotimo> the number of times we typecheck isn't guaranteed, though

[14:23] *** Sqirrel joined
[14:23] <smls> Is there a list versio of join?

[14:23] <TimToady> m: say (1,2,3) ~~ [1,2,3]

[14:23] <camelia> rakudo-moar 17a774: OUTPUT«True␤»

[14:23] <GLRelia> rakudo-moar c68db9: OUTPUT«True␤»

[14:23] <TimToady> list matching wants its own pattern language anyway

[14:23] <tadzik> smls: list version of join?

[14:23] <timotimo> what does "list version of join" mean?

[14:23] <timotimo> yeah

[14:24] <nine> TimToady: or rather (1, 2, 3) ~~ (4, 5)

[14:24] <nine> m: say (1, 2, 3) ~~ (4, 5)

[14:24] <camelia> rakudo-moar 17a774: OUTPUT«False␤»

[14:24] <GLRelia> rakudo-moar c68db9: OUTPUT«45␤»

[14:24] <TimToady> m: say (1,2,3) ~~ [1,2]

[14:24] <camelia> rakudo-moar 17a774: OUTPUT«False␤»

[14:24] <GLRelia> rakudo-moar c68db9: OUTPUT«False␤»

[14:24] <smls> i.e.  joining (2, 4, 5) with 0  --> 2, 0, 4, 0, 5

[14:24] <timotimo> looks a bit like a zip + flatten

[14:24] <timotimo> well, and you'd hack off the last bit

[14:24] <smls> except zip adds an extra one at the start or end

[14:24] <TimToady> you can match using an array currently, but we want something like (1,2,3) ~~ pattern 1,2,3,*

[14:25] <timotimo> m: my @in = 2, 4, 6; my @our = flat (@in X 0); say @our.perl

[14:25] <camelia> rakudo-moar 17a774: OUTPUT«[2, 0, 4, 0, 6, 0]<>␤»

[14:25] <GLRelia> rakudo-moar c68db9: OUTPUT«[2, 0, 4, 0, 6, 0]␤»

[14:25] <timotimo> i meant X rather than Z btw

[14:25] <smls> trying to find the best way to generate an argument list of the form   \( -name "*.txt" -o -name "*.htm" \)   for pasing to the Linux `find` command

[14:26] <smls> (but kept as a list so it can be called without shell quoting)

[14:26] *** szabgab joined
[14:26] <masak> m: say (1, 2, 3) ~~ (1, 2, 3)

[14:26] <camelia> rakudo-moar 17a774: OUTPUT«True␤»

[14:26] <GLRelia> rakudo-moar c68db9: OUTPUT«123␤»

[14:26] *** khw joined
[14:26] <nine> TimToady: then I will change the S03-smartmatch/array-array.t tests to match against Array instead of List

[14:26] <szabgab> good afternoon

[14:27] <timotimo> heyo szabgab 

[14:27] <masak> szabgab! \o/

[14:27] <timotimo> i remember having results from multi-match was rather hairy

[14:27] *** lizmat left
[14:27] <tadzik> hey szabgab!

[14:27] <geekosaur> if you're avoiding the shell then it's just '(', '-name', '*.txt', '-o', '-name', '*.htm', ')'

[14:27] <TimToady> well, we really do want to steal the wildcarding and give it to a special list pattern type

[14:27] <szabgab> is there going to be a new rakudo * release soon?  I'd like to build environment for my YAPC::EU talk

[14:28] <szabgab> and I wonder if I should use 2015.07 or wait for 08 ?

[14:28] <masak> was there a compiler release yesterday?

[14:29] <szabgab> masak: are you asking me?

[14:29] <szabgab> I have no idea

[14:29] <szabgab> or was that a rhetorical question?

[14:29] <geekosaur> general channel question

[14:29] <masak> it was a question to the channel

[14:29] <masak> but it was connected to your question :)

[14:30] <skids> m: (gather for 1,2,3 { once { take $_; next }; take 0; take $_;  }).perl.say

[14:30] <camelia> rakudo-moar 17a774: OUTPUT«(1, 0, 2, 0, 3)␤»

[14:30] <GLRelia> rakudo-moar c68db9: OUTPUT«(1, 0, 2, 0, 3).Seq␤»

[14:32] <nine> TimToady: if I use Array.ACCEPTS' logic in List for Iterable $topics and the old ?self for everything else, we pass S03-smartmatch/array-array.t without any regressions.

[14:32] <timotimo> i know moritz worked towards a release

[14:33] <masak> # Announce: Rakudo Perl 6 compiler, Development Release #91 ("TBD")

[14:33] <masak> so not fully released.

[14:33] <dalek> roast: 87d1e68 | alexghacker++ | S15-nfg/cgj.t:

[14:33] <dalek> roast: Create cgj.t

[14:33] <dalek> roast: review: https://github.com/perl6/roast/commit/87d1e68f66

[14:33] <dalek> roast: 79585f0 | alexghacker++ | S15-nfg/cgj.t:

[14:33] <dalek> roast: Update cgj.t

[14:33] <dalek> roast: 

[14:33] <dalek> roast: Add comments with references for the behavior being tested for

[14:33] <dalek> roast: review: https://github.com/perl6/roast/commit/79585f01f0

[14:33] <dalek> roast: 8bb05dc | (Zoffix Znet)++ | S15-nfg/cgj.t:

[14:33] <dalek> roast: Merge pull request #66 from alexghacker/master

[14:33] <dalek> roast: 

[14:33] <dalek> roast: Create tests for the COMBINING GRAPHEME JOINER special case

[14:33] <dalek> roast: review: https://github.com/perl6/roast/commit/8bb05dc9be

[14:34] <masak> szabgab: coming back to your question, I don't see why we wouldn't have a star release after the compiler release. but we haven't had the compiler release just yet.

[14:34] <szabgab> ok

[14:35] <dalek> doc: 7678c0f | hoelzro++ | lib/Type/IO/Path.pod:

[14:35] <dalek> doc: Remove not implemented warning for move()

[14:35] <dalek> doc: 

[14:35] <dalek> doc: Because now it *is* implemented!

[14:35] <dalek> doc: review: https://github.com/perl6/doc/commit/7678c0fceb

[14:35] <dalek> doc: 12172fc | hoelzro++ | lib/Type/IO/Path.pod:

[14:35] <dalek> doc: Document copy()

[14:35] <dalek> doc: review: https://github.com/perl6/doc/commit/12172fc790

[14:35] <masak> (I don't usually make the star release, so this is a guess, not a promise) :)

[14:36] <skids> m: (flat (slip(),0,0...*) Z, (1,2,3)).perl.say # smls

[14:36] <GLRelia> rakudo-moar c68db9: OUTPUT«(0, 1, 0, 2, 0, 3)␤»

[14:36] <camelia> rakudo-moar 17a774: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XlZL0oeqHq␤Undeclared routine:␤    slip used at line 1. Did you mean 'flip'?␤␤»

[14:36] <timotimo> if you made a promise, szabgab could non-blockingly wait, rather than having to poll :)

[14:36] <szabgab> and this will be a star release using panda with breaks

[14:36] <szabgab> :)

[14:36] <masak> 'panda with breaks'?

[14:36] <tadzik> panda's broken?

[14:36] <timotimo> "brakes"

[14:36] <timotimo> i bet :P

[14:36] <masak> 'brakes'?

[14:36] <szabgab> brakes

[14:36] <szabgab> right

[14:36] <tadzik> oh:) yeah

[14:36] <masak> like, on a bike?

[14:37] <timotimo> yes

[14:37] <szabgab> tadzik knows :)

[14:37] <tadzik> a slowdown so shocking you'll hit the pavement with your face

[14:37] <timotimo> poor pavement

[14:37] <tadzik> yeah, take that!

[14:38] <tadzik> szabgab: thought I hope that it'll make updating panda on Star much more reliable

[14:38] <tadzik> which I see is a pain for a while

[14:38] <smls> skids: How come replacing  0,0...*  with  (0 xx *)  does not work in that example?

[14:38] <smls> (hangs indefinitely)

[14:39] <skids> smls: the whole thing is one sequence and gets flattenned due to first arg rule.

[14:39] <skids> (the slip is part of the ...)

[14:39] <smls> but isn't flattening lazy?

[14:40] *** Ven left
[14:41] <hoelzro> m: say(''.substr(0, *-16))

[14:41] <GLRelia> rakudo-moar c68db9: OUTPUT«Number of characters argument to substr out of range. Is: -16, should be in 0..Inf; use *-16 if you want to index relative to the end␤  in block <unit> at /tmp/k8j5ZO1v7c:1␤␤»

[14:41] <camelia> rakudo-moar 17a774: OUTPUT«Number of characters argument to substr out of range. Is: -16, should be in 0..Inf; use *-16 if you want to index relative to the end␤  in block <unit> at /tmp/0a7smABWrP:1␤␤»

[14:41] <hoelzro> ^ is that a bug?

[14:42] <szabgab> I think I move myself to the background again and check the web site for announcement

[14:42] <szabgab> see some of you in Granada!

[14:43] *** szabgab left
[14:44] *** lizmat joined
[14:44] <lizmat> https://gist.github.com/lizmat/72a9b56ea23f4da02363

[14:45] <TimToady> hoelzro: looks LTA to me

[14:45] <hoelzro> TimToady: I'm thinking it should result in an empty string, does that same ok?

[14:46] *** tinyblak joined
[14:47] <TimToady> we've been treating off-the-beginning as an error, but it shouldn't recommend what you just said...

[14:48] *** colomon joined
[14:48] <skids> smls: 1,0..* Z, (1,2,3) would produce (1,1,0..*,2) which is then fed to flat.  Which should be lazy but maybe it is eagerized after that somehow.

[14:49] <smls> skids: xx  not  ..

[14:49] <smls> (though I guess the same applies?)

[14:50] <skids> right, sorry.

[14:50] <colomon> lizmat: have you managed to talk with TimToady about set / bag construction?

[14:51] * colomon is just now back on the Internet.

[14:53] *** itz joined
[14:53] *** yqt joined
[14:53] <hoelzro> TimToady: what about arrays? should my @a; @a[0..*-16] doesn't result in an error

[14:54] <_itz> [ptc]: yay! that looks great again

[14:54] <nine> m: say (1,2,3) ~~ (4,5)

[14:54] <GLRelia> rakudo-moar c68db9: OUTPUT«45␤»

[14:54] <camelia> rakudo-moar eb6de6: OUTPUT«False␤»

[14:54] <TimToady> hoelzro: that's just a null range

[14:54] <nine> m: say (1,2,3) ~~ (1,2,3)

[14:54] <camelia> rakudo-moar eb6de6: OUTPUT«True␤»

[14:54] <GLRelia> rakudo-moar c68db9: OUTPUT«123␤»

[14:54] <hoelzro> ahhhh

[14:54] *** tinyblak left
[14:54] <hoelzro> that makes sense

[14:55] <TimToady> m: say(''.substr(0 .. *-16))

[14:55] <GLRelia> rakudo-moar c68db9: OUTPUT«Type check failed in assignment to '$from'; expected 'Int' but got 'Range'␤  in block <unit> at /tmp/Ybkh9OSlHY:1␤␤»

[14:55] <camelia> rakudo-moar eb6de6: OUTPUT«Type check failed in assignment to '$from'; expected 'Int' but got 'Range'␤  in block <unit> at /tmp/0Yh8hsXKLB:1␤␤»

[14:55] <andreoss> is there something soft close on channels? like saying to it that this element is the last one? 

[14:55] *** virtualsue joined
[14:55] <TimToady> hmm, I thought we had a range form of substr

[14:55] *** ab6tract joined
[14:56] <FROGGS> m: say substr("foobar", 1..4) 

[14:56] <camelia> rakudo-moar eb6de6: OUTPUT«ooba␤»

[14:56] <GLRelia> rakudo-moar c68db9: OUTPUT«ooba␤»

[14:56] *** tinyblak joined
[14:56] <FROGGS> m: say "foobar".substr(1..4) 

[14:56] <camelia> rakudo-moar eb6de6: OUTPUT«ooba␤»

[14:56] <GLRelia> rakudo-moar c68db9: OUTPUT«ooba␤»

[14:56] <ab6tract> m: sub arr-ret { [<for many things>] }; my ($one,$two,$three) = arr-ret

[14:56] <camelia> rakudo-moar eb6de6: ( no output )

[14:56] <GLRelia> rakudo-moar c68db9: ( no output )

[14:56] <_itz> how late are the talks in the main room now running roughly?

[14:56] <ab6tract> m: sub arr-ret { [<for many things>] }; say my ($one,$two,$three) = arr-ret

[14:56] <camelia> rakudo-moar eb6de6: OUTPUT«for many things (Any) (Any)␤»

[14:56] <GLRelia> rakudo-moar c68db9: OUTPUT«formanythings␤»

[14:57] <ab6tract> so that question is answered :)

[14:58] <TimToady> m: say substr("foobar", 1..-9)

[14:58] <camelia> rakudo-moar eb6de6: OUTPUT«Number of characters argument to substr out of range. Is: -9, should be in 0..Inf; use *-9 if you want to index relative to the end␤  in block <unit> at /tmp/XDEI7GXCJF:1␤␤»

[14:58] <GLRelia> rakudo-moar c68db9: OUTPUT«Number of characters argument to substr out of range. Is: -9, should be in 0..Inf; use *-9 if you want to index relative to the end␤  in block <unit> at /tmp/PllVFxG9cQ:1␤␤»

[14:58] <dalek> rakudo/glr: 51b313b | (Stefan Seifert)++ | src/core/List.pm:

[14:58] <dalek> rakudo/glr: Make smartmatching Iterables against Lists use same semantics as Arrays

[14:58] <dalek> rakudo/glr: 

[14:58] <dalek> rakudo/glr: S03-smartmatch/array-array.t tests smartmatching against Lists.

[14:58] <dalek> rakudo/glr: TimToady++ suggests adding some pattern type for smart matching against

[14:58] <dalek> rakudo/glr: lists. However, we're trying to get to the same functional level as nom

[14:58] <dalek> rakudo/glr: now. We can always create new semantics later.

[14:58] <dalek> rakudo/glr: 

[14:58] <dalek> rakudo/glr: Makes array-array.t pass.

[14:58] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/51b313b9e7

[14:59] <TimToady> m: say substr("foobar", 2..2)

[14:59] <camelia> rakudo-moar eb6de6: OUTPUT«o␤»

[14:59] <GLRelia> rakudo-moar c68db9: OUTPUT«o␤»

[14:59] <TimToady> m: say substr("foobar", 2..1)

[14:59] <camelia> rakudo-moar eb6de6: OUTPUT«␤»

[14:59] <GLRelia> rakudo-moar c68db9: OUTPUT«␤»

[14:59] <colomon> TimToady: I think we talked about having a range form of substr, but there were objections?  But I may have missed something, I’ve been  not faithfully backlooging the last few months.

[14:59] <TimToady> m: say substr("foobar", 2..-1)

[14:59] <camelia> rakudo-moar eb6de6: OUTPUT«Number of characters argument to substr out of range. Is: -2, should be in 0..Inf; use *-2 if you want to index relative to the end␤  in block <unit> at /tmp/mWgvVrORU9:1␤␤»

[14:59] <GLRelia> rakudo-moar c68db9: OUTPUT«Number of characters argument to substr out of range. Is: -2, should be in 0..Inf; use *-2 if you want to index relative to the end␤  in block <unit> at /tmp/avzl8U6xIq:1␤␤»

[14:59] <TimToady> that should really treat any null range the same

[15:00] <TimToady> and it's just a wrong message anyway

[15:05] *** virtualsue_ joined
[15:05] *** virtualsue left
[15:05] <tony-o> got json grammar down to 3.8s but that's still a 2 full seconds slower than built-in..gonna try streaming

[15:05] *** virtualsue_ is now known as virtualsue

[15:05] <tony-o> and coffee.

[15:06] *** diana_olhovik_ left
[15:06] <timotimo> mhhh, streaming coffee

[15:08] <tony-o> so gooood

[15:09] <_itz>  my $coffee=Supply.new()

[15:09] <_itz> $coffee.tap

[15:10] <dalek> roast/glr: 971583a | (Stefan Seifert)++ | S12-introspection/WHAT.t:

[15:10] <dalek> roast/glr: Skip TODO tests that now fail fatally

[15:10] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/971583ad79

[15:11] <hoelzro> I missed that while moving rooms - we have sub substr(Range), but not method substr(Str:D: Range)?

[15:11] <FROGGS> hoelzro: we have both

[15:11] <hoelzro> oh, ok, I must've mistread

[15:11] <hoelzro> *misread

[15:11] <FROGGS> just negative and watevercode endpoints are handled wrongish

[15:12] <hoelzro> ahhhhh yes

[15:13] <dalek> perl6-examples: 45f1eb6 | paultcochrane++ | t/categories/euler.t:

[15:13] <dalek> perl6-examples: Skip long running examples when running tests

[15:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/45f1eb6188

[15:13] <dalek> perl6-examples: 13177d5 | paultcochrane++ | t/categories/euler.t:

[15:13] <dalek> perl6-examples: Improve skipping code

[15:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/13177d5603

[15:13] <dalek> perl6-examples: f418282 | paultcochrane++ | t/categories/euler.t:

[15:13] <dalek> perl6-examples: Correct number of planned Euler tests

[15:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/f418282fd6

[15:13] <dalek> perl6-examples: 9f9f3d0 | paultcochrane++ | t/categories/euler.t:

[15:13] <dalek> perl6-examples: Skip prob034 as it takes too long in tests

[15:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/9f9f3d03c2

[15:13] <dalek> perl6-examples: 4122609 | paultcochrane++ | t/categories/euler.t:

[15:13] <dalek> perl6-examples: Fix spacing between Euler subtests

[15:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/4122609178

[15:13] <dalek> perl6-examples: 55ec5cb | paultcochrane++ | t/categories/euler.t:

[15:13] <dalek> perl6-examples: Fix Euler test ordering

[15:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/55ec5cb21d

[15:14] *** Ven joined
[15:15] *** andreoss left
[15:16] *** itz left
[15:16] *** larion joined
[15:20] *** virtualsue left
[15:23] <masak> by the way -- I just read that p6u thread -- my opinion is that we should have 'use strict' on in one-liners.

[15:23] <masak> I've never felt helped by it being off, and I've sometimes been burned by it.

[15:23] *** tinyblak left
[15:24] *** tinyblak joined
[15:25] *** larion left
[15:25] <Ven> masak: isn't it on these days?

[15:25] <Ven> no, I'm wrong. Anyway, I agree. `alias 6=perl6 -M-no-strict` or w/e is fine by me

[15:26] *** Ven left
[15:26] <TimToady> so mot it be

[15:26] <tadzik> do we have no-strict?

[15:26] <FROGGS> we have

[15:26] <tadzik> oh, neat :)

[15:29] <masak> TimToady: 'mot'? does that mean you agree we can change it to strict-on-by-default for one-liners? :)

[15:29] <TimToady> nodnod

[15:29] <masak> \o/\o/

[15:30] <masak> kudos to whoever makes it so

[15:30] *** tinyblak left
[15:30] <masak> I'm gonna scurry back to the venue

[15:30] <masak> if it's not fixed before I get there, I'll make it so :P

[15:30] <masak> &

[15:32] *** zakharyas left
[15:35] *** spebern joined
[15:35] *** spebern left
[15:36] <dalek> rakudo/glr: 901d7c4 | (Stefan Seifert)++ | src/core/array_slice.pm:

[15:36] <dalek> rakudo/glr: Implement multi-dim array assignment

[15:36] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/901d7c44f9

[15:36] <FROGGS> I think I fixed the FIRST issue

[15:38] *** brrt left
[15:39] *** ab6tract left
[15:39] *** tinyblak joined
[15:43] *** cognominal left
[15:44] *** tinyblak left
[15:45] <nine> m: my @a = [0]; @a[0][0]++; say @a.perl;

[15:45] <camelia> rakudo-moar eb6de6: OUTPUT«[[1]]<>␤»

[15:45] <GLRelia> rakudo-moar 901d7c: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/XYlDK5Q7GT:1␤␤»

[15:45] <nine> Why is this even allowed to work much less expected?

[15:45] <dalek> rakudo/nom: 5fb81ff | (Carl Masak)++ | src/Perl6/World.nqp:

[15:45] <dalek> rakudo/nom: strict is now on by default, even for -e

[15:45] <dalek> rakudo/nom: 

[15:45] <dalek> rakudo/nom: This should make (most of) p6u happy.

[15:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5fb81fffa9

[15:46] <laben> m: my @a = [0]; dd @a

[15:46] <camelia> rakudo-moar eb6de6: OUTPUT«@a = [[0]]<>␤»

[15:46] <GLRelia> rakudo-moar 901d7c: OUTPUT«@a = [0]␤»

[15:46] <laben> m: my @a = [0]; dd @a[0]

[15:46] <camelia> rakudo-moar eb6de6: OUTPUT«@a = [0]␤»

[15:46] <GLRelia> rakudo-moar 901d7c: OUTPUT«@a = 0␤»

[15:47] <laben> m: my @a = [0]; dd @a[0][0]

[15:47] <camelia> rakudo-moar eb6de6: OUTPUT«<element> = 0␤»

[15:47] <GLRelia> rakudo-moar 901d7c: OUTPUT«0␤»

[15:47] <laben> m: my @a = [0]; dd @a[0][0]++

[15:47] <camelia> rakudo-moar eb6de6: OUTPUT«0␤»

[15:47] <GLRelia> rakudo-moar 901d7c: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/DQShfIsIeL:1␤␤»

[15:47] <nine> Oh, so this test really means my @a = (0)?

[15:47] *** salva left
[15:49] <nine> err... my @a = $[0]; really

[15:49] <laben> m: my @a = [0],; dd @a

[15:49] <camelia> rakudo-moar eb6de6: OUTPUT«@a = [[0]]<>␤»

[15:49] <GLRelia> rakudo-moar 901d7c: OUTPUT«@a = [[0],]␤»

[15:49] <laben> m: my @a = [0],; dd @a[0][0]++

[15:49] <camelia> rakudo-moar eb6de6: OUTPUT«0␤»

[15:49] <GLRelia> rakudo-moar 901d7c: OUTPUT«0␤»

[15:49] <timotimo>                       - QAST::Stmt my int $foo

[15:49] <timotimo>                         - QAST::Var(lexicalref $foo :decl()) $foo

[15:49] <timotimo> why the F... do we declare this to be lexicalref?

[15:50] <dalek> roast/glr: 4e91c07 | (Stefan Seifert)++ | S09-autovivification/autoincrement.t:

[15:50] <dalek> roast/glr: Fix creation of nested arrays in S09-autovivification/autoincrement.t

[15:50] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/4e91c07766

[15:50] <dalek> rakudo/glr: 0b76e79 | lizmat++ | src/core/ (2 files):

[15:50] <dalek> rakudo/glr: Give Set/Bag/Mix single arg semantics, nine++

[15:50] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/0b76e797c2

[15:50] <colomon> m: say rindex( 'xxy','y', $pos )

[15:50] <camelia> rakudo-moar eb6de6: OUTPUT«5===SORRY!5=== Error while compiling /tmp/QdgMvkrHBC␤Variable '$pos' is not declared␤at /tmp/QdgMvkrHBC:1␤------> 3say rindex( 'xxy','y', 7⏏5$pos )␤»

[15:50] <GLRelia> rakudo-moar 901d7c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZuxG_JNOxK␤Variable '$pos' is not declared␤at /tmp/ZuxG_JNOxK:1␤------> 3say rindex( 'xxy','y', 7⏏5$pos )␤»

[15:51] <tadzik> timotimo: ¯\_(ツ)_/¯

[15:52] <dalek> rakudo/glr: 15b06d0 | FROGGS++ | src/core/Any-iterable-methods.pm:

[15:52] <dalek> rakudo/glr: fire FIRST phaser

[15:52] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/15b06d0010

[15:52] <FROGGS> another test file down!

[15:53] *** andreoss joined
[15:56] <colomon> lizmat++ nine++

[15:56] <colomon> m: say rindex( 'xxy','y', -1e34 )

[15:56] <camelia> rakudo-moar eb6de6: OUTPUT«Nil␤»

[15:56] <GLRelia> rakudo-moar 901d7c: OUTPUT«Nil␤»

[15:58] <nine> 48 current official count

[15:58] <jdv79> is Pod::To::HTML broken for anyone else on nom?

[15:58] <colomon> lizmat: are you working on getting the bag/set/etc test files working, or shall I?

[15:58] *** FROGGS left
[15:58] <tadzik> I think panda just broke on glr

[15:59] *** Ven joined
[15:59] *** Ven left
[16:01] <dalek> rakudo/glr: 186223e | (Stefan Seifert)++ | src/core/List.pm:

[16:01] <dalek> rakudo/glr: Fix List.ACCEPTS regression

[16:01] <dalek> rakudo/glr: 

[16:01] <dalek> rakudo/glr: List.ACCEPTS really has to return the list and not boolify too early.

[16:01] <dalek> rakudo/glr: Otherwise my @matches = $foo ~~ m:g/bar/; breaks

[16:01] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/186223ef40

[16:02] <colomon> m: say (set [ foo => 10, bar => 17, baz => 42 ]).perl

[16:02] <GLRelia> rakudo-moar 15b06d: OUTPUT«set(:baz(42),:foo(10),:bar(17))␤»

[16:02] <camelia> rakudo-moar eb6de6: OUTPUT«set([:foo(10), :bar(17), :baz(42)])␤»

[16:03] *** domidumont left
[16:03] *** smls left
[16:04] <nine> 47!

[16:05] <nine> Oh, 46 actually! The 1 was lock.t

[16:05] <JimmyZ> Is it ok to remove Array.ACCEPTS ?

[16:05] <JimmyZ> looks Array is List

[16:05] *** adu joined
[16:05] <nine> JimmyZ: no, there are slight differences

[16:09] *** kanl left
[16:09] *** kanl joined
[16:11] *** lizmat_ joined
[16:14] *** lizmat left
[16:14] <dalek> roast/glr: b8a19c9 | (Stefan Seifert)++ | S04-phasers/begin.t:

[16:14] <dalek> roast/glr: Remove obsolete TODO marker

[16:14] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/b8a19c981c

[16:14] <nine> 45

[16:16] * colomon still has no clue what set / bag / etc constructors should be doing — once that’s figured out cleaning up the tests will be easy…

[16:16] *** virtualsue joined
[16:17] *** kanl left
[16:17] *** Sufrostico joined
[16:18] <nine> m: my @a = 1,2,3; my @b = 3,4,5; say zip(@a; @b).perl;

[16:18] <camelia> rakudo-moar eb6de6: OUTPUT«((1, 3), (2, 4), (3, 5))␤»

[16:18] <GLRelia> rakudo-moar 186223: OUTPUT«(([1, 2, 3], [3, 4, 5])).Seq␤»

[16:18] *** dwarring left
[16:19] <Sufrostico> sorry the silly question... where can i get the status of the implemetation of threads in perl6 .. rakudo

[16:19] <tadzik> what status do you mean?

[16:19] <tadzik> they are implemented and work on both supported backends

[16:19] *** kanl joined
[16:20] <Sufrostico> nice

[16:20] <Sufrostico> lightweight?

[16:20] <btyler_> Sufrostico: here's a very recent talk showing off features in that area: http://jnthn.net/papers/2015-yapcasia-concurrency.pdf

[16:20] *** rarara left
[16:20] <Sufrostico> nice

[16:21] <Sufrostico> my python co worker was complaining about perl threads just yesterday

[16:21] <tadzik> he might have meant perl 5 threads

[16:22] <colomon> nine: I stuck a say inside infix:<Z>, and it gets different arguments when you call it via zip

[16:22] <tadzik> "0b76e797c245892b9a5ddbc4fe7b8d3829d116f0 is the first bad commit"

[16:22] <tadzik> lizmat_: ^

[16:22] <colomon> nine: extra list wrapping it, I think.

[16:22] *** kaare__ left
[16:22] <sjn> Sufrostico: that talk btyler_ linked to, it's already on youtube

[16:23] * sjn just watched it, and liked it a lot. Very instructive presentation

[16:23] <hahainternet> wg 28

[16:23] <hahainternet> :(

[16:23] <hahainternet> too many irc windows

[16:24] <tadzik> lizmat_: I reverted it and it fixed panda, but I have no idea what can it possibly be impacting

[16:25] *** itz joined
[16:26] <dalek> perl6-examples: 115ad18 | (Ben Tyler)++ | categories/rosalind/trie-grondilu.pl:

[16:26] <dalek> perl6-examples: trie-grondilu: fix error with postfix condition.

[16:26] <dalek> perl6-examples: 

[16:26] <dalek> perl6-examples: Not yet sure how this broke, investigating what might be more or less

[16:26] <dalek> perl6-examples: tightly bound under GLR.

[16:26] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/115ad18199

[16:26] *** rurban left
[16:28] *** AlexDaniel left
[16:29] *** araujo joined
[16:29] <_itz> pamda is broken on 'brew I think

[16:29] <_itz> err panda

[16:29] <tadzik> yes

[16:30] <tadzik> you mean on glr, right?

[16:30] <_itz> no on nom

[16:30] <tadzik> oh

[16:30] <tadzik> that's straneg

[16:30] <_itz> I'll try from scratch

[16:30] <colomon> just worked fine for me a couple of minutes ago?

[16:30] <colomon> (on nom)

[16:30] <tadzik> seems to work for me

[16:31] <tadzik> is broken on glr though

[16:33] *** TimToady left
[16:34] *** TimToady joined
[16:37] <masak> m: constant k = 1, map { k[$_] }, 0..*; .say for k[^10]

[16:37] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/h2ttbus2EC␤Variable '&k' is not declared␤at /tmp/h2ttbus2EC:1␤------> 3constant k = 1, map { 7⏏5k[$_] }, 0..*; .say for k[^10]␤»

[16:37] <GLRelia> rakudo-moar 186223: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1TJghQX9ug␤Variable '&k' is not declared␤at /tmp/1TJghQX9ug:1␤------> 3constant k = 1, map { 7⏏5k[$_] }, 0..*; .say for k[^10]␤»

[16:38] <tony-o> is it the ',' instead of ';' ?..

[16:38] <tony-o> oh nvm

[16:38] <masak> tony-o: it's https://rt.perl.org/Ticket/Display.html?id=111674

[16:39] <masak> not having the constant just defined available in the rhs of the constant assignment currently prevents a bunch of cool self-referential constant lazy-list definitions :)

[16:39] <masak> I'm almost tempted to debug this one and see what causes it.

[16:43] *** Sufrostico left
[16:47] *** FROGGS joined
[16:47] *** yqt left
[16:51] * moritz idly wonders how many of those cool self-referential definitions are readably by mere mortals

[16:54] <laben> nine: https://github.com/rakudo/rakudo/pull/519

[16:55] <FROGGS> m: sub foo { say &?ROUTINE.name; for 1 { say &?ROUTINE.name; } }; foo

[16:55] <camelia> rakudo-moar 5fb81f: OUTPUT«foo␤foo␤»

[16:55] <GLRelia> rakudo-moar 186223: OUTPUT«foo␤foo␤»

[16:56] <FROGGS> m: sub foo { say &?ROUTINE.name; gather for 1 { say &?ROUTINE.name; } }; foo

[16:56] <camelia> rakudo-moar 5fb81f: OUTPUT«foo␤␤»

[16:56] <GLRelia> rakudo-moar 186223: OUTPUT«foo␤␤»

[16:56] <dalek> rakudo/glr: 6e8b97b | laben++ | src/core/metaops.pm:

[16:56] <dalek> rakudo/glr: Fix dwim hypers to manage lazy iterables correctly

[16:56] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/6e8b97b831

[16:56] <dalek> rakudo/glr: fc8ab7e | moritz++ | src/core/metaops.pm:

[16:56] <dalek> rakudo/glr: Merge pull request #519 from laben/glr

[16:56] <dalek> rakudo/glr: 

[16:56] <dalek> rakudo/glr: Fix dwim hypers to manage lazy iterables correctly

[16:56] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/fc8ab7ebeb

[16:56] <FROGGS> m: sub foo { say &?ROUTINE.perl; gather for 1 { say &?ROUTINE.perl; }; gather for 1 { say &?ROUTINE.perl; } }; foo

[16:56] <camelia> rakudo-moar 5fb81f: OUTPUT«sub foo () { #`(Sub|59748232) ... }␤Code.new␤Code.new␤»

[16:56] <GLRelia> rakudo-moar 186223: OUTPUT«sub foo () { #`(Sub|53058688) ... }␤Code.new␤Code.new␤»

[16:56] <FROGGS> m: sub foo { say &?ROUTINE.perl; for 1 { say &?ROUTINE.perl; }; gather for 1 { say &?ROUTINE.perl; } }; foo

[16:56] <camelia> rakudo-moar 5fb81f: OUTPUT«sub foo () { #`(Sub|42434376) ... }␤sub foo () { #`(Sub|42434376) ... }␤Code.new␤»

[16:56] <GLRelia> rakudo-moar 186223: OUTPUT«sub foo () { #`(Sub|54308288) ... }␤sub foo () { #`(Sub|54308288) ... }␤Code.new␤»

[16:57] <FROGGS> m: sub foo($,$,$) { say &?ROUTINE.arity; for 1 { say &?ROUTINE.arity; }; gather for 1 { say &?ROUTINE.arity; } }; foo 1, 2, 3

[16:57] <camelia> rakudo-moar 5fb81f: OUTPUT«3␤3␤0␤»

[16:57] <GLRelia> rakudo-moar 186223: OUTPUT«3␤3␤0␤»

[16:57] <laben> moritz: about the roast tests, do i push to my repo and create a PR or push directly (dont know if i can)

[16:58] <FROGGS> m: sub foo($,$,$) { say &?ROUTINE.arity; for 1 { say &?ROUTINE.arity; }; gather for 1 { say &?ROUTINE(); } }; foo 1, 2, 3

[16:58] <camelia> rakudo-moar 5fb81f: OUTPUT«(timeout)3␤3␤»

[16:58] <GLRelia> rakudo-moar 186223: OUTPUT«(timeout)3␤3␤»

[16:58] <moritz> laben: you push directly

[16:58] <moritz> laben: and if you can't, you tell me

[16:58] <FROGGS> m: sub foo($,$,$) { say &?ROUTINE.arity; for 1 { say &?ROUTINE.arity; }; gather for 1 { if 1 { &?ROUTINE.arity } } }; foo 1, 2, 3

[16:58] <camelia> rakudo-moar 5fb81f: OUTPUT«3␤3␤»

[16:58] <GLRelia> rakudo-moar 186223: OUTPUT«3␤3␤»

[16:58] <FROGGS> m: sub foo($,$,$) { say &?ROUTINE.arity; for 1 { say &?ROUTINE.arity; }; gather for 1 { if 1 { say &?ROUTINE.arity } } }; foo 1, 2, 3

[16:58] <camelia> rakudo-moar 5fb81f: OUTPUT«3␤3␤3␤»

[16:58] <GLRelia> rakudo-moar 186223: OUTPUT«3␤3␤3␤»

[16:58] <FROGGS> awesome bug

[16:59] <laben> moritz: i'm part of the perl6 org but it seems i cant push directly, maybe some git stuff i dont know?

[16:59] <moritz> laben: what does 'git remove -v' say?

[17:00] <laben> moritz: if you meant "git remote -v" it's ""

[17:00] <laben> $ git remote -v

[17:00] <laben> origin  git://github.com/perl6/roast.git (fetch)

[17:00] <laben> origin  [email@hidden.address] (push)

[17:00] <laben> darn

[17:01] <moritz> laben: hurm, looks correct; what error message do you get if you try to push?

[17:01] <laben> moritz: permission denied (publickey)

[17:02] <_itz> ssh-add?

[17:02] <moritz> laben: does a 'git push' work to any other repo from the same shell?

[17:03] <moritz> laben: might be that you have multiple SSH keys, and the one that's used isn't added on github

[17:03] <laben> moritz: yea, i just pushed to my gh repo of rakudo for the last pr

[17:03] <moritz> huh

[17:04] <laben> maybe it's better i push to gh fork and create a pr

[17:05] <moritz> laben: if that works for you, sure

[17:05] <moritz> laben: you can even merge yourself

[17:05] <moritz> (I hope :-)

[17:05] <colomon> tadzik: emmentaler is eating my projects.json file?!

[17:06] <moritz> nom nom nom

[17:06] <masak> m: role R[::N, $result = N] { say $result }; my $r = R[Int].new

[17:06] <camelia> rakudo-moar 5fb81f: OUTPUT«Cannot find method 'collisions'␤  in any apply at src/gen/m-Metamodel.nqp:2633␤  in any compose at src/gen/m-Metamodel.nqp:2810␤  in any make_pun at src/gen/m-Metamodel.nqp:1642␤  in any find_method at src/gen/m-Metamodel.nqp:1670␤  in block <uni…»

[17:06] <GLRelia> rakudo-moar fc8ab7: OUTPUT«Cannot find method 'collisions'␤  in any apply at src/gen/m-Metamodel.nqp:2635␤  in any compose at src/gen/m-Metamodel.nqp:2812␤  in any make_pun at src/gen/m-Metamodel.nqp:1644␤  in any find_method at src/gen/m-Metamodel.nqp:1672␤  in block <uni…»

[17:06] * FROGGS reported an awesome bug right now as RT #125934

[17:06] * masak submits rakudobug

[17:06] *** virtualsue left
[17:07] <moritz> m: role R[::N, $result = N] {}

[17:07] <GLRelia> rakudo-moar fc8ab7: ( no output )

[17:07] <camelia> rakudo-moar 5fb81f: ( no output )

[17:07] <laben> moritz: can you check it before merging? https://github.com/perl6/roast/pull/67 (btw it seems i can indeed merge it myself...)

[17:07] *** itz left
[17:08] <moritz> laben: in line 204, it might be nicer to declare new lexicals @r and @e

[17:10] <moritz> laben: in fact, I don't think you use those values at all

[17:10] <moritz> because in line 218, you re-assign to them

[17:10] <moritz> laben: otherwise, looks fine

[17:10] *** Loren_ left
[17:11] <laben> moritz: i do use them in line 207

[17:11] <laben> should i add more blank lines?

[17:11] <moritz> laben: oh, count me blind :-)

[17:11] <moritz> laben: no, it's fine, but declare them with 'my' please, so that global defintions in that file (which aren't relevant for the tests) aren't overridden

[17:12] <moritz> (and the block of tests can easier be moved around, for exapmle)

[17:16] <laben> moritz: i updated the commit, now it should be ok

[17:17] *** FROGGS left
[17:20] <tadzik> colomon: I don't know, is it? :)

[17:20] *** lizmat joined
[17:20] <tadzik> colomon: I haven't touched emmentaler in ages

[17:20] *** lizmat_ left
[17:20] <tadzik> I learned that panda now has a really strong competition :)

[17:20] <tadzik> in form of https://github.com/ugexe/zef

[17:21] <tadzik> in many ways it feels like Mojolicious of module management, with its own bundled HTTP library and all

[17:23] <muraiki> interesting

[17:23] <nine> laben: is it really ok to have one side being lazy without being DWIM?

[17:23] <tadzik> I'll have to evaluate if I should see it as competition or a successor :)

[17:23] <laben> nine: what do you mean?

[17:24] <nine> laben: the DWIM makes it auto truncate to the non-DWIM side's length, so infinitiy is not a problem. But without DWIM we have to iterate infinitely.

[17:24] <tadzik> ugexe++ and tony-o++ in any case :)

[17:25] <laben> nine: can you illustrate an example? i thought i covered all sides...

[17:25] *** cognominal joined
[17:30] <dalek> roast/glr: a88ba52 | laben++ | S03-metaops/hyper.t:

[17:30] <dalek> roast/glr: Add tests for binary op (non-)dwim cases and fudge broken ones

[17:30] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/a88ba52619

[17:30] <dalek> roast/glr: 1846e7f | laben++ | S03-metaops/hyper.t:

[17:30] <dalek> roast/glr: Merge pull request #67 from laben/glr

[17:30] <dalek> roast/glr: 

[17:30] <dalek> roast/glr: Add tests for binary op (non-)dwim cases and fudge broken ones

[17:30] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/1846e7f1d4

[17:31] *** FROGGS joined
[17:32] <laben> nine: with this ^^^ one test file failing less

[17:34] <laben> oh cmon now panda fails a test again on newest glr

[17:34] *** llfourn left
[17:34] <tadzik> it doesn't work at all

[17:34] <FROGGS> :S

[17:34] <tadzik> since 0b76e797c245892b9a5ddbc4fe7b8d3829d116f0

[17:34] <tadzik> suddenly arrays are Seqs

[17:35] <tadzik> not sure who to blame :P

[17:35] <nine> tadzik: Seq is usually the correct answer. .list it if you need to iterate it more than once

[17:35] <tadzik> it was a bit more complicated than that :)

[17:36] <tadzik> there'd be .flat and .list and .grep(*.defined) and dragons and shit

[17:36] <tadzik> and suddenly, instead of ["File::Find", "Shell::Command", "JSON::Fast"] there'd be ((stuff).Seq, (Any).Seq, (Any.Seq)).Seq, in random order

[17:45] <dalek> rakudo/glr: 18261c9 | lizmat++ | src/core/set_operators.pm:

[17:45] <dalek> rakudo/glr: Give set()/bag()/mix() single arg semantics

[17:45] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/18261c9ffe

[17:49] <nine> laben: ah sorry for the noise. I misread your patch. Too tired to process boolean expressions it seems :)

[17:50] <laben> nine: dont worry, you were tired for perl6 goodness, i forgive you ^.^

[17:50] *** domidumont joined
[17:52] <dalek> perl6-roast-data: a689b9e | coke++ | / (10 files):

[17:52] <dalek> perl6-roast-data: today (automated commit)

[17:52] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a689b9ebd6

[17:52] * colomon wants to do module with .dragons and .shit now….

[17:52] <dalek> rakudo/glr: 1a05c67 | lizmat++ | src/core/set_operators.pm:

[17:52] <dalek> rakudo/glr: Be more smart about singel arging bag/set/mix()

[17:52] <dalek> rakudo/glr: 

[17:52] <dalek> rakudo/glr: FROGGS++ for inspiration

[17:52] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/1a05c671c9

[17:53] <colomon> lizmat: I keep seeing your patches, celebrating, then discovering they don’t quite fix set.t…

[17:53] <tadzik> :D

[17:53] <timotimo> ;(

[17:53] <lizmat> colomon: that's because set.t / bag.t etc. need to be fixed

[17:53] <lizmat> working on that now

[17:54] <colomon> okay, if you’ve got that, I’ll go back to being utterly confused by emmentaler

[17:55] <timotimo> zef has a "smoke" command, too

[17:55] <timotimo> maybe emmentaler could be ported over to zef? :P

[17:55] <dalek> perl6-examples: 4e3e0eb | paultcochrane++ | categories/wsg/advanced-2008/event001-eric256.pl:

[17:55] <dalek> perl6-examples: Fix failure in event001-eric256

[17:55] <dalek> perl6-examples: 

[17:55] <dalek> perl6-examples: Using `split('')` to get the individual elements of a number or string is

[17:55] <dalek> perl6-examples: a Perl 5-like way of doing this.  Unfortunately, `split` matches the empty

[17:55] <dalek> perl6-examples: string at the *ends* of the string as well, hence one gets 9 elements from a

[17:55] <dalek> perl6-examples: 7 digit string.  The solution is to use `comb`, which is the correct way to

[17:55] <dalek> perl6-examples: do this in Perl 6.

[17:55] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/4e3e0eba60

[17:56] <colomon> timotimo, tadzik: I’m deadly serous that I’ve started emmentaler with “./smoker projects.json”, get a weird error message, and then projects.json is just gone.

[17:56] *** cognominal left
[17:56] <tadzik> colomon: hmm

[17:56] <tadzik> colomon: oh...

[17:56] <colomon> oh?

[17:56] <tadzik> colomon: so panda recently started updating $!projectsfile automatically

[17:57] <tadzik> I guess that's not always desirable

[17:57] <tadzik> especially if it fails

[17:57] <colomon> it’s completely 100% undesirable, because that file isn’t necessarily projects.json

[17:57] <tadzik> right

[17:58] <colomon> I use subsets for testing pretty regularly

[17:58] <timotimo> argh!

[17:59] <tadzik> colomon: yeah, I even had to override that for panda tests :/

[17:59] <tadzik> stupid thing

[17:59] <tadzik> colomon: should be fixed now

[18:00] *** andreoss left
[18:00] <tadzik> thanks for letting me know

[18:00] <colomon> tadzik: hmmm

[18:00] <colomon> ==> Installing panda from a local directory '/home/colomon/.rakudobrew/moar-nom/panda'

[18:00] <colomon> Could not download module metadata: No such method 'field' for invocant of type 'Array'

[18:01] <tadzik> wat

[18:01] <tadzik> glr?

[18:01] <colomon> nope, nom

[18:01] <laben> m: say defined my @c

[18:01] <camelia> rakudo-moar 5fb81f: OUTPUT«True␤»

[18:01] <GLRelia> rakudo-moar 1a05c6: OUTPUT«True␤»

[18:01] <tadzik> . o O ( field? )

[18:01] <colomon> (I’m running on hack here)

[18:01] <tadzik> there's no 'field' in panda

[18:01] <laben> m: say defined (my @c=Any)

[18:01] <camelia> rakudo-moar 5fb81f: OUTPUT«True␤»

[18:01] <GLRelia> rakudo-moar 1a05c6: OUTPUT«True␤»

[18:01] <colomon> tadzik: I know, that’s what’s been driving me nuts when I was trying to use emmentaler

[18:01] <colomon> tadzik: let me try blowing away my rakudo and rebuilding from scratch

[18:01] <tony-o> what is emmentaler?

[18:02] <tadzik> colomon: oh!

[18:02] <colomon> tony-o: module smoke tester (via panda)

[18:02] <tadzik> do you have HTTP::UserAgent installed?

[18:02] <colomon> tadzik: maybe?

[18:02] <tadzik> colomon: panda will use it if it's installed

[18:02] <tadzik> maybe it's broken

[18:02] * colomon just kind of blew away everything

[18:02] <tadzik> oh well :)

[18:03] <laben> tadzik: is there a reason you want to use sets instead of list.unique?

[18:04] <tadzik> laben: I never wanted to use sets

[18:04] <tadzik> they sort of appeared

[18:04] <tadzik> as long as you mean seqs

[18:05] <laben> tadzik: no i mean sets that you create with (|)

[18:05] <tadzik> I now think I should've waited a bit longer with the glr merge

[18:05] <tadzik> laben: oh

[18:05] <tadzik> laben: I don't think I wrote that :P

[18:06] <tadzik> laben: no reason

[18:06] <colomon> laben: what’s the context?

[18:06] <tadzik> laben: and frankly, I don't think that's a right way of doing this anyway

[18:06] <tadzik> I mean, I'd rather have code that takes META.info and gives me something that actually conforms to specs that I can process

[18:06] <dalek> roast/glr: 0da7828 | lizmat++ | S02-types/bag.t:

[18:06] <dalek> roast/glr: Make S02-types/bag.t pass all tests

[18:06] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0da782884f

[18:06] <dalek> roast/glr: a7dafef | lizmat++ | S03-metaops/hyper.t:

[18:06] <dalek> roast/glr: Merge branch 'glr' of https://github.com/perl6/roast into glr

[18:06] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/a7dafef870

[18:07] <tadzik> rather than taking whatever mess META.info contains and trying to make the best of it in the latest possible moment

[18:08] <tadzik> honestly I really feel like giving panda a good, solid shakeup from the ground up

[18:08] <tadzik> it's got 4 years of legacy all over its codebase, and some parts of it are either stupid or plain wron g:)

[18:13] * [Coke] wonders if the p6u is like the mcu.

[18:13] <[ptc]> _itz: the perl6-examples are testing green on travis again!  Yay!

[18:14] <colomon> \o/

[18:14] <FROGGS> tadzik: go for it

[18:15] <tadzik> FROGGS: part of my head says "nooo, rewrite is always stupider than fixing things carefully"

[18:16] <tadzik> but I guess that's not always true

[18:16] <FROGGS> tadzik: call it refactoring and you are fine :o)

[18:16] <tadzik> haha

[18:19] *** dre_ joined
[18:20] *** dre_ left
[18:21] <dalek> roast/glr: 869e1a9 | lizmat++ | S02-types/mix.t:

[18:21] <dalek> roast/glr: Make S02-types/mix.t pass all tests

[18:21] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/869e1a943a

[18:22] * [Coke] notes that he and colomon are on the 2nd floor.

[18:22] * colomon notes that it is cool and fairly quiet up here.

[18:22] <tadzik> oh!

[18:23] <[Coke]> what did we miss?

[18:23] <[Coke]> *golf clap* *golf clap*

[18:24] <ugexe> a Distribution object is meant to be the API to META.info

[18:24] <tadzik> hm?

[18:24] <tadzik> oh

[18:24] <jdv79> [Coke]: is it cool up there?

[18:25] <b2gills> .oO( I just noticed that I have exactly 14,000 rep on StackOverflow, most of it from Perl 5/6 answers )

[18:25] <lizmat> m: my %h = set < a a b b c c d d >; say %h.perl

[18:25] <camelia> rakudo-moar 5fb81f: OUTPUT«Odd number of elements found where hash initializer expected␤  in block <unit> at /tmp/I8hgYvvthd:1␤␤»

[18:25] <GLRelia> rakudo-moar 1a05c6: OUTPUT«{:a("c"), :b("d")}␤»

[18:25] <jdv79> oh, colomon already said that.  duh.

[18:26] <[Coke]> jdv79: coolish.

[18:26] <b2gills> m: my %h := set < a a b b c c d d >; say %h.perl

[18:26] <camelia> rakudo-moar 5fb81f: OUTPUT«set("a","c","b","d")␤»

[18:26] <GLRelia> rakudo-moar 1a05c6: OUTPUT«set("a","c","b","d")␤»

[18:26] *** diana_olhovik joined
[18:33] *** telex left
[18:33] <jdv79> what is the diff between META6.json and META.info?

[18:34] <tadzik> history

[18:34] <jdv79> ugexe: what does that mean?

[18:34] <tadzik> :P

[18:34] *** telex joined
[18:34] <jdv79> ok, so same; effectively.

[18:34] <tadzik> FROGGS: http://rebecca.blackfriday/

[18:35] <laben> b2gills: about our recent discussion about >>op<< not throwing and shortening the longer side, it seems there is no reason to go about doing this given Z already has this behaviour

[18:36] <tony-o> tadzik: FROGGS: https://www.youtube.com/watch?v=qe6ZbL6KbEE

[18:36] <moritz> TIL that blackfriday is now a TLD

[18:36] <laben> colomon: the context is method init-projects in Ecosystem.pm where it creates the projects from the parsed json

[18:36] <laben> colomon: specifically where it sets dependencies

[18:37] <FROGGS> tony-o: that's not his real hair :o)

[18:37] <dalek> perl6-roast-data: 8b52920 | coke++ | / (2 files):

[18:37] <dalek> perl6-roast-data: another glr run for 'today'

[18:37] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8b52920cc7

[18:37] <tony-o> oh my

[18:37] *** khw left
[18:40] *** diana_olhovik left
[18:41] <tadzik> tony-o: I think I'll spare the rest of the hackathoners and watch it later at the hotel :o

[18:41] <tadzik> moritz: http://endless.horse/

[18:42] *** diana_olhovik__ joined
[18:42] <[Coke]> !!! everyone working at the hackathon - please privmsg me or email me a small writeup of what you did, even if you were working remotely. I'm writing up a blog post so our hosts know what we got up to.

[18:42] *** kaare__ joined
[18:42] <ugexe> jdv79: i mean a distributions meta information should be consumed from a Distribution object, which can provide normalized values (ver vs version) as well as the .content method for accessing files in the `provides`.

[18:44] <tadzik> Distribution being part of Zef

[18:44] <tadzik> or is it specced?

[18:44] <ugexe> its specced in S22

[18:44] *** Loren joined
[18:44] <tony-o> it's specced

[18:44] <tadzik> oh!

[18:44] <tony-o> we have questions about it though, it's kind of vague

[18:45] <tadzik> well, it's a spec written before an implementation :)

[18:45] <tadzik> same with hooks

[18:45] <tadzik> they just say "there should be hooks"

[18:46] <[Coke]> down to 261 failing tests.

[18:46] <arnsholt> And TimToady said: "Let there be hooks!" =)

[18:46] <[Coke]> we also have a few more skips than nom.

[18:47] <ugexe> there is an implementation. called Distribution.pm in rakudo core. its not up to spec

[18:48] <tony-o> ugexe: wrote up my json::faster benchmark crap here: http://ugexe.com/speed-quest-1-0-or-0-1-or-something/

[18:49] <tony-o> tadzik: the question more revolves around the way these things were imagined, ugexe is imagining centralized CURs and i'm imagining decentralized CURs and both would work but the implementation is different.  that's kind of a quick way of saying it for lack of time (i'm hungry)

[18:50] <tony-o> it's a theory question, i wrote a CUR that works over HTTP and not sure how to handle .install yet

[18:50] <tadzik> hm

[18:53] <ugexe> im writing content storage for Distribution objects now. Distribution::Local and then the Distribution::HTTP::Github. Distribution.content can then pull from the hard disk or from github.com via http requests by pulling from whatever content storage is attached to it

[18:55] *** virtualsue joined
[18:55] *** domidumont left
[18:55] <tadzik> sounds good

[18:56] *** Ven joined
[18:56] <colomon> tony-o++

[19:01] <moritz> m: my Enum @a = :a; say @a.perl

[19:01] <camelia> rakudo-moar 5fb81f: OUTPUT«Array[Enum].new("a" => Bool::True)␤»

[19:02] <GLRelia> rakudo-moar 1a05c6: OUTPUT«Array[Enum].new(:a)␤»

[19:02] <moritz> m: my Enum @a = :a; say EVAL(@a.perl).perl

[19:02] <camelia> rakudo-moar 5fb81f: OUTPUT«Array[Enum].new("a" => Bool::True)␤»

[19:02] <GLRelia> rakudo-moar 1a05c6: OUTPUT«Array[Enum].new()␤»

[19:05] <moritz> m: say :a.perl, :a.perl(:arglist)

[19:05] <camelia> rakudo-moar 5fb81f: OUTPUT«:a"a" => Bool::True␤»

[19:05] <GLRelia> rakudo-moar 1a05c6: OUTPUT«:a:a␤»

[19:05] <laben> tadzik: i got it, what has changed that broke panda (other than glr): json::fast returns Any instead of () and that got containerized, so it didnt get flattened since the array got an element

[19:05] <laben> tadzik: i got a change that fix this

[19:05] <laben> tadzik: unless you want to rewrite it all

[19:05] <dalek> roast/glr: 7e4a1c0 | (Stefan Seifert)++ | S32-array/push.t:

[19:05] <dalek> roast/glr: GLRify S32-array/push.t

[19:05] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/7e4a1c064d

[19:07] <tadzik> laben: ooh

[19:09] <tadzik> laben: I definitely won't blindly rewrite it while throwing all the smart thing it's doing away, so if you have the fix please go ahead :)

[19:10] *** bin_005 joined
[19:10] <laben> tadzik: well, you could simply want to rewrite those lines that calculate deps, anyway this is it https://gist.github.com/46655b37a8f21834b737 or do you prefer a PR?

[19:10] <colomon> m: say rindex( 'xxy','y', -1e34 )

[19:10] <camelia> rakudo-moar 5fb81f: OUTPUT«Nil␤»

[19:10] <GLRelia> rakudo-moar 1a05c6: OUTPUT«Nil␤»

[19:11] <dalek> rakudo/glr: 2178f78 | moritz++ | src/core/Enum.pm:

[19:11] <dalek> rakudo/glr: Restore Enum.perl(:arglist) behavior

[19:11] <dalek> rakudo/glr: 

[19:11] <dalek> rakudo/glr: fixes S32-hash/perl.t

[19:11] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/2178f78d6b

[19:12] *** cognominal joined
[19:12] <FROGGS> m: for 1..5 { LAST { .say } }

[19:12] <camelia> rakudo-moar 5fb81f: OUTPUT«5␤»

[19:12] <GLRelia> rakudo-moar 1a05c6: ( no output )

[19:13] <colomon> lizmat: you still working on the set/bag test files?

[19:13] <lizmat> colomon: indeed I am

[19:14] <colomon> okay, I’ll work on something else.  lizmat++

[19:14] <lizmat> okidoki

[19:14] <tadzik> laben: just applied it :)

[19:14] <tadzik> thanks!

[19:14] *** brummett joined
[19:14] *** virtualsue left
[19:15] *** Loren left
[19:15] <colomon> m: say ([] ... [])[0]

[19:15] <camelia> rakudo-moar 5fb81f: OUTPUT«␤»

[19:15] <GLRelia> rakudo-moar 1a05c6: OUTPUT«Cannot get sequence endpoint from an empty list (use * or :!elems instead?)␤  in block <unit> at /tmp/IC4uUeKFzM:1␤␤»

[19:16] <colomon> Am I correct in thinking that shouldn’t work under GLR?  

[19:16] <laben> m: dd ([] ... [])

[19:16] <camelia> rakudo-moar 5fb81f: OUTPUT«([],)␤»

[19:16] <GLRelia> rakudo-moar 2178f7: OUTPUT«Cannot get sequence endpoint from an empty list (use * or :!elems instead?)␤  in block <unit> at /tmp/4HLHlsTkas:1␤␤»

[19:17] <laben> m: dd ([] .. [])

[19:17] <camelia> rakudo-moar 5fb81f: OUTPUT«0..[]␤»

[19:17] <GLRelia> rakudo-moar 2178f7: OUTPUT«0..0␤»

[19:18] *** rangerprice joined
[19:21] *** yqt joined
[19:24] *** espadrine left
[19:26] *** xinming left
[19:26] *** xinming joined
[19:28] <tadzik> laben: hmm, it still seems to have list issues

[19:28] <tadzik> now I get resolve stage failed for panda: Dependency File::Find JSON::Fast Shell::Command is not present in the module ecosystem

[19:28] *** virtualsue joined
[19:28] <laben> tadzik: yeah i just noticed it too trying rebootstrap

[19:29] <laben> i'll check it out in an hour or so, cant now

[19:29] <tadzik> (╯°□°）╯︵ ɹןb

[19:30] *** llfourn joined
[19:32] <moritz> tadzik: looks like a missing flat

[19:33] <tadzik> yeah

[19:34] <ugexe> say from-json("projects.json".IO.slurp) <-- output is correct. my @a = from-json("projects.json".IO.slurp); say @a; <-- output: []

[19:34] *** llfourn left
[19:35] *** brummett left
[19:36] <tadzik> strange

[19:36] *** itz joined
[19:37] <colomon> ugexe: did you have a module or list of modules that was borking panda when you tried to install it?

[19:37] <FROGGS> m: say from-json '{ "foo" : [ "bar", "baz" ] }'

[19:37] <camelia> rakudo-moar 5fb81f: OUTPUT«foo => bar baz␤»

[19:37] <GLRelia> rakudo-moar 2178f7: OUTPUT«foo => [bar baz]␤»

[19:37] <FROGGS> m: say my @a = from-json '{ "foo" : [ "bar", "baz" ] }'

[19:37] <camelia> rakudo-moar 5fb81f: OUTPUT«foo => bar baz␤»

[19:37] <GLRelia> rakudo-moar 2178f7: OUTPUT«foo => [bar baz]␤»

[19:38] <moritz> m: say $*IN.slurp-rest.^name

[19:38] <camelia> rakudo-moar 5fb81f: OUTPUT«Str␤»

[19:38] <GLRelia> rakudo-moar 2178f7: OUTPUT«(timeout)»

[19:38] <ugexe> colomon: no, i think it was generally nativecall modules or things with Build.pm

[19:38] <colomon> ugexe: thanks

[19:38] <moritz> m: say $*IN.slurp-rest.^name # checking if that timeout is reproducible

[19:38] <camelia> rakudo-moar 5fb81f: OUTPUT«Str␤»

[19:39] <GLRelia> rakudo-moar 2178f7: OUTPUT«(timeout)»

[19:39] <colomon> m: say $*IN.slurp-rest

[19:39] <camelia> rakudo-moar 5fb81f: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[19:40] <GLRelia> rakudo-moar 2178f7: OUTPUT«(timeout)»

[19:40] <moritz> cannot reproduce on my machine

[19:40] <moritz> moritz@hack:~/p6/rakudo$ cat ../evalbot/stdin | ./perl6-m --setting=RESTRICTED -e 'say $*IN.slurp-rest.chars'

[19:40] <moritz> 1134

[19:43] <colomon> moritz: I keep on finding consistently reproducable differences between GLRelia and my local builds. 

[19:43] <colomon> m: say rindex( 'xxy','y', -1e34 )

[19:43] <GLRelia> rakudo-moar 2178f7: OUTPUT«Nil␤»

[19:43] <camelia> rakudo-moar 5fb81f: OUTPUT«Nil␤»

[19:44] <colomon> > rindex( 'xxy','y', -1e34 )

[19:44] <colomon> index start offset out of range

[19:44] <colomon> hold on

[19:45] * moritz gets Nil too

[19:46] *** Loren joined
[19:47] <colomon> FROGGS++ just explained I needed to update MoarVM

[19:47] <colomon> and now it works properly

[19:48] *** Ven left
[19:48] <dalek> perl6-roast-data: 301b56e | coke++ | / (2 files):

[19:48] <dalek> perl6-roast-data: another glr run for 'today'

[19:48] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/301b56e102

[19:49] <FROGGS> jnthn / nine / moritz / lizmat: I've got a totally ugly patch for next.t and last.t: https://gist.github.com/FROGGS/6ad7ea03a39cc5453c7a

[19:49] <colomon> m: roundrobin((); 1; 2..4; (5..7); <a b>).join(' ‘).say

[19:49] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/M6TnNj13n1␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/M6TnNj13n1:1␤------> 3); 1; 2..4; (5..7); <a b>).join(' ‘).say7⏏5<EOL>␤    expecting any of:␤        ar…»

[19:49] <GLRelia> rakudo-moar 2178f7: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wm62xe6e3F␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/wm62xe6e3F:1␤------> 3); 1; 2..4; (5..7); <a b>).join(' ‘).say7⏏5<EOL>␤    expecting any of:␤        ar…»

[19:49] <FROGGS> jnthn / nine / moritz / lizmat: it works but I think it is not commitable this way :o)

[19:49] <colomon> m: roundrobin((); 1; 2..4; (5..7); <a b>).join(“ “).say

[19:49] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/U9otqS7iGO␤Unable to parse expression in smart double quotes; couldn't find final '”' ␤at /tmp/U9otqS7iGO:1␤------> 3); 1; 2..4; (5..7); <a b>).join(“ “).say7⏏5<EOL>␤    expecting any of:␤…»

[19:49] <GLRelia> rakudo-moar 2178f7: OUTPUT«5===SORRY!5=== Error while compiling /tmp/EcbhlfBafV␤Unable to parse expression in smart double quotes; couldn't find final '”' ␤at /tmp/EcbhlfBafV:1␤------> 3); 1; 2..4; (5..7); <a b>).join(“ “).say7⏏5<EOL>␤    expecting any of:␤…»

[19:49] <colomon> m: roundrobin((); 1; 2..4; (5..7); <a b>).perl.say

[19:49] <camelia> rakudo-moar 5fb81f: OUTPUT«((1, 2, 5, "a"), (3, 6, "b"), (4, 7))␤»

[19:49] <GLRelia> rakudo-moar 2178f7: OUTPUT«([1, 2, 3, 4, 5, 6, 7, "a", "b"]).Seq␤»

[19:50] <colomon> seeing this is several other tests as well — seems like GLR is not honoring semi-colons

[19:50] <colomon> semi-colon is not LoL composer anymore (FROGGS++ says)?

[19:51] <colomon> function signature is roundrobin(**@lol)

[19:51] <FROGGS> m: roundrobin([], [1], [2..4], [5..7], <a b>).perl.say

[19:51] <camelia> rakudo-moar 5fb81f: OUTPUT«((1, 2, 5, "a"), (3, 6, "b"), (4, 7))␤»

[19:51] <GLRelia> rakudo-moar 2178f7: OUTPUT«([1, 2, 5, "a"], [3, 6, "b"], [4, 7]).Seq␤»

[19:54] *** ab6tract joined
[19:58] <maettu> that was a fine day at the spw215 :-)

[19:58] *** larion joined
[20:00] <_itz> jnthn++ # particularly good talks

[20:00] *** muraiki left
[20:02] *** FROGGS left
[20:06] *** virtualsue_ joined
[20:06] *** virtualsue left
[20:06] <moritz> is yary (from p6u) on IRC?

[20:07] *** virtualsue_ is now known as virtualsue

[20:07] <moritz> and if yes, under which nick?

[20:07] <dalek> roast/glr: 14b065f | colomon++ | S32-container/roundrobin.t:

[20:07] <dalek> roast/glr: Update to conform to GLR.  FROGGS++

[20:07] <dalek> roast/glr: 

[20:07] <dalek> roast/glr: roundrobin((); 1; 2..4; (5..7); <a b>) becomes

[20:07] <dalek> roast/glr: roundrobin([], [1], [2..4], [5..7], <a b>)

[20:07] <dalek> roast/glr: 

[20:07] <dalek> roast/glr: and

[20:07] <dalek> roast/glr: 

[20:07] <dalek> roast/glr: is(roundrobin([1..3]).elems, 1, 'roundrobin does not flatten array items');

[20:07] <dalek> roast/glr: 

[20:07] <dalek> roast/glr: just goes away, as that's not how these sorts of arguments work anymore.

[20:07] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/14b065fec6

[20:09] <ugexe> something seems particularly messed up here

[20:09] <ugexe> Use of uninitialized value $v of type Any in string context  in block  at /home/nickl/perl6/zef/lib/Zef/Utils/Any

[20:09] <ugexe> there is no /Any file/folder

[20:10] *** Loren left
[20:10] <colomon> uninit’ed last part of the file path?

[20:11] <ab6tract> what's p6u?

[20:11] <tadzik> glr is fun :)

[20:11] *** kaare__ left
[20:11] <tadzik> ab6tract: perl6-users mailing list

[20:11] <ab6tract> also: great SPW so far :D

[20:11] <dalek> roast/glr: 2b5bf32 | colomon++ | S32-container/zip.t:

[20:11] <dalek> roast/glr: Also switch to current "LoL" standard.

[20:11] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/2b5bf32150

[20:11] <ab6tract> tadzik: thanks :)

[20:11] <tadzik> [email@hidden.address]
[20:12] <tadzik> SPW is awesome :)

[20:12] <tadzik> maettu++ # and the rest of the crew

[20:12] <colomon> maettu++ indeed!

[20:15] *** adu left
[20:16] *** FROGGS joined
[20:18] *** colomon left
[20:18] <dalek> roast/glr: 96b12b1 | (Stefan Seifert)++ | S04-statements/for.t:

[20:18] <dalek> roast/glr: GLRify S04-statements/for.t

[20:18] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/96b12b198e

[20:19] *** darutoko left
[20:20] <dalek> rakudo/glr: 441d54d | (Stefan Seifert)++ | src/core/List.pm:

[20:20] <dalek> rakudo/glr: Fix "This type does not support elems" on my @a; say |@a;

[20:20] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/441d54d42e

[20:21] <FROGGS> m: use Test; my $a = ''; for $[1..3, 4..6] { $a ~= $_.WHAT.gist }; is($a, Array.gist, 'List context');

[20:21] <camelia> rakudo-moar 5fb81f: OUTPUT«not ok 1 - List context␤␤# Failed test 'List context'␤# at /tmp/cfAEH_1jF0 line 1␤# expected: '(Array)'␤#      got: '(Any)(Any)(Any)(Any)(Any)(Any)'␤»

[20:21] <GLRelia> rakudo-moar 2178f7: OUTPUT«not ok 1 - List context␤␤# Failed test 'List context'␤# at /tmp/vMz8rI5vqa line 1␤# expected: '(Array)'␤#      got: '(Range)(Range)'␤»

[20:21] <FROGGS> m: use Test; my $a = ''; for ([1..3, 4..6],) { $a ~= $_.WHAT.gist }; is($a, Array.gist, 'List context');

[20:21] <camelia> rakudo-moar 5fb81f: OUTPUT«ok 1 - List context␤»

[20:21] <GLRelia> rakudo-moar 2178f7: OUTPUT«ok 1 - List context␤»

[20:22] <FROGGS> aha

[20:22] <FROGGS> but yeah, makes sense

[20:22] *** itz left
[20:25] *** virtualsue left
[20:25] <nine> Woah, we're at 37 latest official count

[20:26] <ab6tract> nine: amazing!! :D

[20:26] *** colomon joined
[20:26] *** xfix left
[20:27] <FROGGS> much awesome :o)

[20:27] <moritz> such GLR

[20:27] <dalek> roast/glr: 382ffeb | lizmat++ | S02-types/set.t:

[20:27] <dalek> roast/glr: Make S02-types/set.t pass all tests

[20:27] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/382ffebd50

[20:28] <dalek> rakudo/glr: 7591fc4 | lizmat++ | src/core/ (3 files):

[20:28] <dalek> rakudo/glr: Simplify grep and friends on Set/Bag/Mix

[20:28] <dalek> rakudo/glr: 

[20:28] <dalek> rakudo/glr: Since Set is now also returning pairs for .list

[20:28] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/7591fc4a01

[20:30] *** llfourn joined
[20:32] <dalek> roast/glr: 0e04a3a | laben++ | S03-metaops/hyper.t:

[20:32] <dalek> roast/glr: Defudge hyper tests that incorrectly die no more

[20:32] <dalek> roast/glr: 

[20:32] <dalek> roast/glr: Fixed by 441d54d42e1601d555e601c3068a935dbb4360d4

[20:32] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0e04a3ab5d

[20:32] <dalek> roast/glr: edcf987 | laben++ | S03-metaops/hyper.t:

[20:32] <dalek> roast/glr: Merge pull request #68 from laben/glr

[20:32] <dalek> roast/glr: 

[20:32] <dalek> roast/glr: Defudge hyper tests that incorrectly die no more

[20:32] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/edcf9876e9

[20:33] <nine> laben++ # good catch!

[20:35] *** llfourn left
[20:35] <laben> time to see what's up with panda, again :/

[20:37] <ugexe> panda installs with zef, so it should just be the bootstraper that is not working

[20:37] <moritz> does zef precompile?

[20:37] <colomon> does zef install with panda?

[20:37] <laben> lizmat: did you try panda rebootstrap recently? it dies with "Use of uninitialized value %!elems of type Any in string context" that seem to reference a field from rakudo code

[20:37] <ugexe> yes zef precompiles, and it will install with panda

[20:37] <lizmat> laben: it has been ages since I did a panda rebootstrap

[20:38] <lizmat> could you give me a stack trace somehow?

[20:39] <nine> m: my $pair = a => 1; for $pair.value -> $v is rw { $v += 1 }; say $pair.value;

[20:39] <camelia> rakudo-moar 5fb81f: OUTPUT«2␤»

[20:39] <GLRelia> rakudo-moar 7591fc: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/TZ11hQ2jzw:1␤␤»

[20:40] <nine> m: class Foo { has $.value; }; my $foo = Foo.new(value => 1); for $foo.value -> $v is rw { $v += 1 }; say $foo.value;

[20:40] <camelia> rakudo-moar 5fb81f: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/C0atOOJKsZ:1␤␤»

[20:40] <GLRelia> rakudo-moar 7591fc: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/Q3IFHhrAmb:1␤␤»

[20:40] <nine> m: class Foo { has $.value is rw; }; my $foo = Foo.new(value => 1); for $foo.value -> $v is rw { $v += 1 }; say $foo.value;

[20:40] <camelia> rakudo-moar 5fb81f: OUTPUT«2␤»

[20:40] <GLRelia> rakudo-moar 7591fc: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/ygrqpiCGUp:1␤␤»

[20:41] <laben> lizmat: sorry, stacktrace seems unavailable, it complains about panda funcs but there's no %!elems there, i thought you would know better since it uses sets to calculate deps

[20:41] <nine> m: class Foo { has $.value is rw; }; my $foo = Foo.new(value => 1); $foo.value += 1; say $foo.value;

[20:41] <camelia> rakudo-moar 5fb81f: OUTPUT«2␤»

[20:41] <GLRelia> rakudo-moar 7591fc: OUTPUT«2␤»

[20:41] *** Loren joined
[20:42] <nine> my $a = 1; for $a -> $v is rw { $v += 1; }; say $a;

[20:42] <nine> m: my $a = 1; for $a -> $v is rw { $v += 1; }; say $a;

[20:42] <camelia> rakudo-moar 5fb81f: OUTPUT«2␤»

[20:42] <GLRelia> rakudo-moar 7591fc: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/wm1cSXjnLp:1␤␤»

[20:47] *** diana_olhovik__ left
[20:47] <nine> m: my $a = 1; $a.list += 1;

[20:47] <camelia> rakudo-moar 5fb81f: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/ClaHKbb4QA:1␤␤»

[20:47] <GLRelia> rakudo-moar 7591fc: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/BJd52Bh6ii:1␤␤»

[20:48] <nine> m: my $a = 1; $a.list.[0] += 1;

[20:48] <camelia> rakudo-moar 5fb81f: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/PHFHYbWCfL:1␤␤»

[20:48] <GLRelia> rakudo-moar 7591fc: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/isVT4ES9jn:1␤␤»

[20:50] <timotimo> o/

[20:51] <lizmat> m: mix( (foo => 10.1, bar => 17.2)).perl.say

[20:51] <camelia> rakudo-moar 5fb81f: OUTPUT«(:foo(10.1)=>1,:bar(17.2)=>1).Mix␤»

[20:51] <GLRelia> rakudo-moar 7591fc: OUTPUT«(:foo(10.1)=>1,:bar(17.2)=>1).Mix␤»

[20:51] <timotimo> hoelzro: were we agreeing to sign on to irc before bed or were we agreeing to not do that? %)

[20:51] <hoelzro> timotimo: umm...

[20:52] <timotimo> ven's gone :(

[20:52] <nine> .oO( what bed? )

[20:52] <hoelzro> I don't know if we agreed or not, but here we are =)

[20:52] <timotimo> oh snap

[20:52] <moritz> you guys *sleep* when you should be hacking? :-)

[20:52] <lizmat> ok, sethash.t and mixhash.t have some issues I'm too tired too grep now

[20:52] <timotimo> moritz: psch!

[20:52] <lizmat> so I'll take care of them tomorrow

[20:53] <timotimo> moritz: btw, you started the release progress; what can i do to help?

[20:53] <timotimo> fill out the moarvm changelog perhaps?

[20:54] <moritz> timotimo: yes (and maybe even release MoarVM)

[20:54] <timotimo> right

[20:54] <dalek> roast/glr: 0d1b8bf | lizmat++ | S02-types/mixhash.t:

[20:54] <dalek> roast/glr: Fix at least one mixhash.t test

[20:54] <dalek> roast/glr: 

[20:54] <dalek> roast/glr: More tomorrow

[20:54] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0d1b8bf247

[20:54] *** espadrine joined
[20:57] <dalek> perl6-roast-data: b82045e | coke++ | / (2 files):

[20:57] <dalek> perl6-roast-data: another glr run for 'today'

[20:57] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b82045ec82

[20:58] *** skids left
[20:59] *** espadrine left
[21:01] *** Loren left
[21:04] *** lucasb_ joined
[21:05] *** bin_005 left
[21:06] *** FROGGS left
[21:07] <lizmat> m: Bag.new( (a => 42, b=>666)).perl.say

[21:07] <camelia> rakudo-moar 5fb81f: OUTPUT«(:b(666)=>1,:a(42)=>1).Bag␤»

[21:07] <GLRelia> rakudo-moar 7591fc: OUTPUT«(:b(666)=>1,:a(42)=>1).Bag␤»

[21:07] <lizmat> m: Hash.new( (a => 42, b=>666)).perl.say

[21:07] <GLRelia> rakudo-moar 7591fc: OUTPUT«{:a(42), :b(666)}␤»

[21:07] <camelia> rakudo-moar 5fb81f: OUTPUT«{:a(42), :b(666)}<>␤»

[21:08] <lizmat> m: Bag.new-from-pairs( (a => 42, b=>666)).perl.say

[21:08] <camelia> rakudo-moar 5fb81f: OUTPUT«("a"=>42,"b"=>666).Bag␤»

[21:08] <GLRelia> rakudo-moar 7591fc: OUTPUT«("a"=>42,"b"=>666).Bag␤»

[21:08] * lizmat fades away

[21:08] *** lizmat left
[21:10] <lucasb_> Is there some rationale for print() using .Str and say() using .gist? Shouldn't they just differ with regard to "\n"?

[21:11] <timotimo> say's supposed to be "for humans" and print "for computers"

[21:12] <[Coke]> lucasb_: there was an argument made years ago for that, it was lost, it's probably not getting changed at this point. (I wasn't a fan either)

[21:12] *** Sqirrel left
[21:13] *** Sqirrel joined
[21:13] <jdv79> [Coke]: what was the short reason?

[21:13] <lucasb_> timotimo: I thought that was the difference between .perl and .gist. But if it applies to say/print, ok then

[21:13] <jdv79> seems nice there's a differentiation otherwise there's no need for 2 methods

[21:14] <lucasb_> timotimo, [Coke]: thanks for answering

[21:14] <[Coke]> what timotimo said.

[21:14] <[Coke]> (for jdv79 )

[21:15] <PerlJam> greetings!  How's SPW going?

[21:15] <jdv79> i thought you meant for the other side

[21:16] *** ab6tract left
[21:17] <hoelzro> PerlJam: greetings! it's going quite well, thanks!

[21:17] *** larion left
[21:17] *** bin_005 joined
[21:17] *** bin_005 left
[21:18] <PerlJam> Did someone cut a nom release?  

[21:18] *** kanl left
[21:18] <PerlJam> Or ... is someone planning on doing it?

[21:19] <timotimo> we're working towards it, a little bit

[21:19] <timotimo> but not really the people at the spw

[21:21] *** bin_005 joined
[21:21] <PerlJam> Well, I'd volunteered for this month and I'll have some free time later tonight (in about 4 hours or so).  Should I just make a nom release?

[21:23] <timotimo> moritz has started working on that today (or was it yesterday?); i'm going to bed real soon now, so i can't really be of help :(

[21:24] <japhb> Anybody have links to SPW slide decks?  (If there have been any, I've missed them in the voluminous backlog.  Which is sortof like luminiferous aether, and likewise problematic in that you can't detect anything in it.)

[21:25] <laben> good night|work #perl6

[21:25] * laben heads off to bed

[21:25] <PerlJam> g'night laben 

[21:25] <japhb> o/ laben

[21:25] *** laben left
[21:27] * PerlJam patiently waits for someone to answer japhb too ...

[21:27] *** [Sno] left
[21:27] <japhb> Yeah, here I am hoping to get a Friday afternoon Perl 6 talk fix ....

[21:27] <timotimo> ohai japhb 

[21:28] <timotimo> how are you today?

[21:28] <lucasb_> has anybody mentioned that yapcasia videos are online? I watched timtoady's and rjbs's talk and liked it :)

[21:28] <timotimo> oh!

[21:28] <timotimo> where can they be found?

[21:28] <timotimo> ah

[21:28] <lucasb_> youtube channel: https://www.youtube.com/user/yapcasia/videos

[21:28] <timotimo> https://www.youtube.com/user/yapcasia/videos

[21:29] <timotimo> look, it's jnthn!

[21:32] <japhb> ohai timotimo 

[21:32] <japhb> Not doing too bad; recovering from latest iteration of oral surgery, wheee

[21:33] <timotimo> japhb: i've been meaning to run benchmarks against a rakudo/glr, but somehow i never got around to it

[21:34] <japhb> Seems like enough bugs have been fixed that it might even work.  :-)

[21:34] <timotimo> oh yes

[21:34] <japhb> Although, since last year, it should at least record the failure modes it finds ...

[21:34] <timotimo> some of the tests may want changes so that they do the same thing, basically

[21:35] <timotimo> huh

[21:35] <japhb> True.  Any obvious performance differences need to be investigated to make sure they still do the same amount of work.

[21:35] <timotimo> someone put JSON::Fast into panda

[21:35] <timotimo> but not a sufficiently new version of it

[21:35] <timotimo> bootstrap now fails, because one of the tests requires a single trailing , to be added to the expected value

[21:36] <japhb> Though TBH, that's why I added the ability to specify expected output -- so that we could go back and make the tests output an expected value that should only be reached if all the work was done.

[21:36] <japhb> timotimo: That seems like a wrong test ...

[21:36] <timotimo> yes, glr made it required

[21:37] <timotimo> ugh, bench list-checkouts is very unhappy with GLR :)

[21:37] <japhb> lucasb_: Thank you for the YAPC::Asia video pointer.  :-)

[21:37] <japhb> Oh, ouch, yeah, I bet.

[21:37] <japhb> There's a fair amount of sugar in bench that's probably flattening/itemization-sensitive.

[21:38] *** itz joined
[21:38] <timotimo> very much so

[21:38] <japhb> Double pluses if you figure out patches that will work correctly under both, FWIW.

[21:38] <timotimo> i'm just now rebuilding rakudo on nom on my desktop at home

[21:38] <timotimo> so that i can bench on ahead :)

[21:39] <japhb> Probably the best immediate course of action

[21:39] <timotimo> immediate means "right before bedtime" ;)

[21:39] * japhb wonders what percentage of his collected Perl 6 code will have to be rewritten after the merge.  :-/

[21:39] <japhb> heh

[21:40] <japhb> .oO( "Why didn't you do your chores already?"   "Because you told me to do them immediately, and it's not bedtime yet!" )

[21:42] <timotimo> okay, building a very recent nom and a very recent glr now

[21:42] <timotimo> i'm at a crossroads, and a decision is needed

[21:43] <timotimo> do i buy new ram for my desktop because the 8gb just don't cut it any more

[21:43] <timotimo> or do i just wait for my next big update and get DDR4 along with that?

[21:46] *** virtualsue joined
[21:46] <timotimo> now how am i supposed to go to bed when there's a benchmark going on and i could be watching for the exact moment it finishes so that i can see the performance difference immediately :|

[21:46] <japhb> timotimo: Do you need to swap out all of your current memory sticks in order to add more memory to the existing desktop?

[21:47] <timotimo> yes

[21:47] <timotimo> but i have someone who's very interested in getting at least one of the sticks

[21:47] <japhb> timotimo: Have it alarm/SMS/page/otherwise wake you when it's done?

[21:47] <timotimo> ugh, that's even worse! :)

[21:48] <timotimo> just started the "./bench time" call :)

[21:48] <japhb> timotimo: Well, that makes it easier ... go to 16 GB then.  :-)

[21:48] <timotimo> Run command wrote to STDERR: install/bin/perl6 --optimize=3 -e 0

[21:48] <timotimo> Compiler rakudo-moar is failing for test zero, continuing to next compiler/test.

[21:48] <timotimo> well, that's not so good

[21:48] <timotimo> hahahahaha

[21:48] <timotimo> Useless use of constant integer 0 in sink context (line 1)

[21:48] <timotimo> :D

[21:49] <japhb> There aren't many times that I've regretted a memory upgrade.  (The only time was when populating more slots in a single channel dropped the memory clock enough to steal much of the expected improvement in overall throughput)

[21:49] <timotimo> oh! yikes

[21:49] <timotimo> i have only two slots to begin with

[21:49] <timotimo> at the moment they have two 4gb sticks in them

[21:49] <timotimo> in theory, it'd already be a nice upgrade to replace one of them with an 8gb stick

[21:50] <japhb> Yeah, I'm wondering if it ought to be possible to turn off the STDERR detection, because overzealous warnings/alerts are causing a problem.  Or maybe I should just -Mno-strict the -e tester.

[21:51] <timotimo> we can just have the "zero" program do something that does something that doesn't warn :)

[21:51] <timotimo> like perl6 -e ''

[21:51] <timotimo> or is that "empty" already?

[21:51] <japhb> timotimo: ... as long as those two slots can be safely mismatched.  Not all of them can.  (Or at least, back the last time I had a desktop at home.  Which was ... a while ago, actually.)

[21:52] <timotimo> mhh

[21:52] <timotimo> i expect it'll be fine

[21:52] <timotimo> for_empty also warns about the final "1"

[21:52] <japhb> empty is '', and it's intentionally there to not even do any parsing.  It should be the fastest the compiler can be started in non-help/REPL mode.

[21:52] <timotimo> we should implement a special case of "empty program" so we don't even have to deserialize the grammar :P

[21:52] <japhb> :-P

[21:53] <timotimo> in the repl, we bring up the first input prompt before the compiler causes the grammar to be loaded

[21:53] <hoelzro> ok, bed time for realz

[21:53] <hoelzro> good night #perl6

[21:53] <PerlJam> sleep well hoelzro!

[21:53] <timotimo> gnite hoelzro!

[21:53] <japhb> o/ hoelzro

[21:54] <timotimo> still watching jnthn's concurrency talk

[21:54] <timotimo> (which i missed via oversleeping tonight)

[21:54] <japhb> Did he do the same one at SPW as at YAPC::Asia?

[21:54] <timotimo> slightly changed, i believe

[21:54] <japhb> Dang it, now I want that slide deck even more.  :-)

[21:55] <timotimo> you already have the previous one, yeah?

[21:55] <japhb> Yeah.  But he does so much CDD, that often the first place I find out about his latest cool stuff is in those slide decks.  :-)

[21:56] <timotimo> ah

[21:58] *** rurban joined
[21:58] <timotimo> first component is at 56/73 already

[21:59] *** lucasb_ left
[21:59] * japhb thinks that 'my $z = 0;' might be a decent replacement for '0' that would be identical across all compilers (delta := for nqp)

[21:59] <timotimo> ah

[21:59] <timotimo> sounds good

[22:00] <timotimo> that'll not warn any more

[22:00] <japhb> Yeah, and still maintains its use as a near-minimal use of the parser (probably a much better one, too, come to think of it -- more likely to light up more of the grammar.)

[22:01] <timotimo> yeah

[22:01] <japhb> Care to patch, or shall I?

[22:01] <timotimo> please go ahead :)

[22:01] <timotimo> i'd be interested to see if rc-forest-fire is going to ever work properly in the future >_>

[22:02] <timotimo> oh!

[22:02] <timotimo> it works!

[22:02] <timotimo> cool

[22:03] <dalek> perl6-bench: 8b8d049 | (Geoffrey Broadwell)++ | microbenchmarks.pl:

[22:03] <dalek> perl6-bench: Fix 'zero' microbenchmark not to sink-warn

[22:03] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/8b8d04918c

[22:03] <japhb> Oh cool!

[22:04] <japhb> wheee, the joy of freehand patching

[22:04] <timotimo> are fires supposed to randomly go out?

[22:06] <japhb> timotimo: If they can't find more to burn nearby, yes.  It's been a long time since I looked, but some implementations of that CA can put a new tree on top of a burning one.  I don't *think* we do that.

[22:06] *** rurban left
[22:06] <timotimo> nah, i see burning trees with lots of neighbours and these neighbours are spared from burning up

[22:06] *** rangerprice left
[22:06] <japhb> If it goes out when there's adjacent trees, that's probably a bug

[22:07] *** RabidGravy left
[22:07] <japhb> Do the fires ever spread in the first place?

[22:07] <timotimo> yes

[22:07] <japhb> Oh, hmmm, that's more subtle territory

[22:07] <timotimo> yeah

[22:07] <timotimo> second component is now running

[22:08] <japhb> There was a long time ago a bug in which neighbor information started pointing to old versions of the forest; IIRC TimToady++ fixed that in the nom days.

[22:09] <japhb> I wonder if it has reared it's ugly head again.

[22:09] * japhb imagines a t-shirt with the logo "UGLY BUG"

[22:10] <japhb> So many possible images to go with that logo/tagline.  Or maybe none at all, and implicitly that role falls to the wearer.  :-)

[22:11] <timotimo> BUGLY

[22:11] *** byterock joined
[22:11] <timotimo> ;; AUTHORITY SECTION:

[22:11] <timotimo> ly.   600 IN SOA dns.lttnet.NET. khaleds.lttnet.NET. 2015082889 3600 900 2419200 600

[22:11] <timotimo> ^- for bug.ly :)

[22:11] * japhb wishes there were a decent way to guarantee an equivalent random number stream between compilers, without limiting their freedom to write a fast PRNG

[22:11] <japhb> heh

[22:11] <timotimo> yeah, that's a hard problem™

[22:12] <timotimo> on GLR, the forest doesn't change any more at all

[22:13] <japhb> I thought about just reading from the same file of random bits, but then you end up testing binary I/O performance ...

[22:13] <timotimo> so we should take the benchmark results with more spoonsful of salt than we usually do

[22:13] <timotimo> yeah :|

[22:13] <timotimo> you could implement a dumb prng yourself

[22:13] <japhb> true.

[22:14] <japhb> My all time favorite is one from TAOCP.  Lemme see if I can find it.

[22:16] <timotimo> https://github.com/Microsoft/WinObjC/blob/59a63e42a9d10da8aadbf8d3b6c10fd02e6b40c6/Frameworks/CoreFoundation/CFMisc.mm#L28

[22:16] <japhb> Oh.  Oh dear.

[22:16] <japhb> That's ... wow.

[22:17] <timotimo> https://twitter.com/FioraAeterna/status/636923343636004865 - "This is a very creative RC4 implementation, huh"

[22:18] <timotimo> who decided the monitor concurrency pattern should be called that?

[22:19] *** itz left
[22:19] *** virtualsue left
[22:20] <timotimo> Type check failed in binding; expected 'Positional' but got 'Seq'

[22:20] <timotimo>   in sub MAIN at perl6/rc-forest-fire-stringify:8

[22:20] <timotimo> quite GLR-ish

[22:20] <timotimo> that's "my @grid := [ ... ] xx $h"

[22:22] <japhb> Yeah, sounds like it.

[22:22] <timotimo> yup. probably really wants to be = instead of :=

[22:22] <timotimo> 10 minutes of jnth's yapc::asia talk remaining, but only a single benchmark

[22:24] <timotimo> time to remember the ./bench compare incantation again

[22:25] <japhb> Not finding the algorithm online, I went to my bookshelf.  It's algorithm 3.2.2.A in my second edition copy:  Basically fill 55 elements of a 56-element circular queue with arbitrary numbers (not all even), and then just keep doing Xn = X(n-24) + X(n-55) mod machine word size.  Works whether the bit sequences are interpreted as integers or as floats, even.  Deterministic but long-period and REALLY fast.

[22:28] <timotimo> neat

[22:28] <timotimo> we'd really want a mersenne twister in our ecosystem at some time

[22:28] <timotimo> there's quite fast implementations of those using simd instructions even

[22:30] <timotimo> hm

[22:30] <timotimo> now which one was glr and which one was nom?

[22:31] <timotimo> http://t.h8.lv/p6bench/2015-08-29-nom_vs_glr.html - blue is nom, orange is glr

[22:31] *** llfourn joined
[22:31] <timotimo> looks pretty bad

[22:33] <timotimo> m: my @a; my $i = 0; @a[$i] = $i; while (++$i <= SCALE) { @a[ $i ] = $i }; say @a[*-1];'

[22:33] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/M447ppGz9O␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/M447ppGz9O:1␤------> 3 SCALE) { @a[ $i ] = $i }; say @a[*-1];'7⏏5<EOL>␤    expecting any of:␤        sing…»

[22:33] <GLRelia> rakudo-moar 7591fc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hOGsBrnyXJ␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/hOGsBrnyXJ:1␤------> 3 SCALE) { @a[ $i ] = $i }; say @a[*-1];'7⏏5<EOL>␤    expecting any of:␤        sing…»

[22:33] <timotimo> m: constant SCALE = 1024; my @a; my $i = 0; @a[$i] = $i; while (++$i <= SCALE) { @a[ $i ] = $i }; say @a[*-1];'

[22:33] <camelia> rakudo-moar 5fb81f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Wj6P7eW9Qa␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/Wj6P7eW9Qa:1␤------> 3 SCALE) { @a[ $i ] = $i }; say @a[*-1];'7⏏5<EOL>␤    expecting any of:␤        sing…»

[22:33] <GLRelia> rakudo-moar 7591fc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ojhqffgMU1␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/ojhqffgMU1:1␤------> 3 SCALE) { @a[ $i ] = $i }; say @a[*-1];'7⏏5<EOL>␤    expecting any of:␤        sing…»

[22:33] <timotimo> m: constant SCALE = 1024; my @a; my $i = 0; @a[$i] = $i; while (++$i <= SCALE) { @a[ $i ] = $i }; say @a[*-1];

[22:33] <camelia> rakudo-moar 5fb81f: OUTPUT«1024␤»

[22:33] <GLRelia> rakudo-moar 7591fc: OUTPUT«1024␤»

[22:34] <timotimo> what is going on here ...

[22:34] <timotimo> that benchmark i pasted above has a 4x slowdown :(

[22:35] <timotimo> well, we haven't really optimized things at all yet on the glr side

[22:35] <japhb> Actually, it looks like mixed results to me.  Some of the tests, like while_push*, show a good benefit from GLR, but while_array_set is much worse.

[22:35] <timotimo> i still think it's bad ;)

[22:35] <japhb> Ooh, for loops took a huge hit.

[22:35] *** llfourn left
[22:35] <japhb> I'm still scrolling through it

[22:36] <japhb> reduce is mixed.  any_equals is way worse

[22:36] <timotimo> i wonder if the for-to-while optimization had been in effect in nom, but isn't any more in glr

[22:36] <timotimo> that optimization is super fiddly

[22:36] <japhb> As are split_string*

[22:36] <timotimo> breaks every few revision

[22:36] <japhb> I bet you are correct.

[22:36] <japhb> Hmmm, charrange (and a couple others) seem more unstable

[22:37] <timotimo> how do you feel about building a nom and a glr locally and comparing their --target=optimize while i rest? :)

[22:38] <japhb> timotimo: You should definitely rest.  Unfortunately, I should definitely get back to $day-job.

[22:40] *** rangerprice joined
[22:41] *** rarara joined
[22:42] *** TEttinger joined
[22:45] <timotimo> good luck at $day-job!

[22:45] <timotimo> ttyl :)

[22:56] *** skids joined
[22:58] *** yqt left
[23:00] *** rarara left
[23:03] *** Timbus_ joined
[23:03] *** Timbus left
[23:04] *** byterock left
[23:05] *** rangerprice left
[23:07] *** larion joined
[23:13] *** larion left
[23:20] <jdv79> wonder what a p6 "brush" for https://github.com/syntaxhighlighter would look like

[23:20] <jdv79> where are the existing p6 syntax highlighers?

