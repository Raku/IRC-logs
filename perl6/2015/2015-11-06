[00:00] <psch> eh, still behaves wierd with .list tbh

[00:00] <psch> m: say (m/@<a>=A+/)<a>.list for <A AAAA AAAAAAA>

[00:00] <camelia> rakudo-moar c880f1: OUTPUT«()␤()␤()␤»

[00:00] <psch> not sure what's up there, but then i don't know if i remember @<a>= correctly

[00:00] <pippo> I think a single match has to have the .list method working as for several matchs.

[00:00] <pippo> m: say 1.list;

[00:00] <camelia> rakudo-moar c880f1: OUTPUT«(1)␤»

[00:01] <psch> m: $_ = "abc"; say /(.)+/; say $/.list

[00:01] <camelia> rakudo-moar c880f1: OUTPUT«/(.)+/␤(Nil)␤»

[00:01] <psch> m: $_ = "abc"; m/(.)+/; say $/.list

[00:01] <camelia> rakudo-moar c880f1: OUTPUT«([｢a｣ ｢b｣ ｢c｣])␤»

[00:01] <psch> m: $_ = "abc"; m/(.+)/; say $/.list

[00:01] <camelia> rakudo-moar c880f1: OUTPUT«(｢abc｣)␤»

[00:01] <psch> pippo: it does, if you don't give it a name

[00:01] <psch> m: $_ = "abc"; m/$<a>=(.+)/; say $/.list

[00:01] <camelia> rakudo-moar c880f1: OUTPUT«()␤»

[00:02] <pippo> psch: and why with a name it should not work?

[00:02] <psch> pippo: because a name means "this gets saved as if $/ was a hash"

[00:02] <psch> m: $_ = "abc"; m/$<a>=(.+)/; say $<a>.list

[00:02] <camelia> rakudo-moar c880f1: OUTPUT«()␤»

[00:02] <psch> m: $_ = "abc"; m/$<a>=(.+)/; say $<a>

[00:02] <camelia> rakudo-moar c880f1: OUTPUT«｢abc｣␤»

[00:03] <psch> m: $_ = "abc"; m/[$<a>=(.)]+/; say $<a>

[00:03] <camelia> rakudo-moar c880f1: OUTPUT«[｢a｣ ｢b｣ ｢c｣]␤»

[00:03] <psch> m: $_ = "abc"; m/[$<a>=(.)]+/; say $/.list

[00:03] <camelia> rakudo-moar c880f1: OUTPUT«()␤»

[00:03] <psch> m: .say for %(a => 1, b => 2).list

[00:03] <camelia> rakudo-moar c880f1: OUTPUT«a => 1␤b => 2␤»

[00:03] <psch> i admit that's inconsistent

[00:03] <zengargoyle> m: $_ = "abc"; m/(.)+/; say $/.list

[00:03] <camelia> rakudo-moar c880f1: OUTPUT«([｢a｣ ｢b｣ ｢c｣])␤»

[00:03] <psch> as in, %h.list gives pairs as a list

[00:04] *** advwp joined
[00:04] <psch> i don't know if we want that for $/, though, and i'm not willing to try to decide if we could use it :)

[00:04] <zengargoyle> well yeah, %h.pairs gets pairs

[00:04] <psch> m: $_ = "abc"; m/[$<a>=(.)]+/; say $/.pairs

[00:04] <camelia> rakudo-moar c880f1: OUTPUT«(a => [｢a｣ ｢b｣ ｢c｣])␤»

[00:04] <psch> match objects are weird :)

[00:04] *** firstdayonthejob left
[00:05] <pippo> I agree!!! :-))

[00:05] <psch> pippo: feel free to RT this, from what i can see there's something to think about wrt the different contexts for $/ and how other things behave in those contexts

[00:07] <psch> i mean, on one hand i can see wanting .hash and .list on $/ different

[00:07] <psch> 'cause if i'm doing a for @$/ { } i might not want to suddenly deal with a pair that has as submatch as value

[00:08] <psch> on the other hand it seems inconsistent with how hashes work in the same context... vOv

[00:08] <psch> so it's probably a design decision, which i wash my hands of :)

[00:09] *** lsm-desktop joined
[00:10] <zengargoyle> i'm sorta resigned to six months of messing up grammars before getting the hang of just how everything works.

[00:13] <pippo> psch: filed bug.

[00:14] <Hotkeys> I think the rakudo repl is broken on windows

[00:15] <pippo> good night psch and zengargoyle o/

[00:15] *** pippo left
[00:17] <Hotkeys> http://i.imgur.com/latkrqh.png

[00:18] <Hotkeys> basically the repl gets hung up sometimes, most repeatably after the second expression inputted

[00:18] <Hotkeys> I've tried two windows pcs, one on 7 and one on 10 both do it

[00:18] <Hotkeys> but my ubuntu vps does not

[00:18] *** lichtkind left
[00:21] <Hotkeys> http://i.imgur.com/1vJbO5y.png

[00:21] <psch> Hotkeys: yes, the repl is more likely to not work than work.  i tried working on it and might have left bits in there that cause the current problems

[00:22] <Hotkeys> ah

[00:22] <Hotkeys> alright

[00:22] <Hotkeys> I just wanted to make sure it wasn't some weird coincidence

[00:22] <psch> Hotkeys: i'm rather occupied with rakudo.jvm, though, and unfortunately there's no one else who has the time or energy to try and make it work

[00:23] <Hotkeys> I'd try and help but I doubt I have the ability

[00:24] <psch> Hotkeys: well, it's mostly understanding src/Perl6/Grammar.pm

[00:24] <psch> Hotkeys: the issue is that we'd want a repl that's smart with newline, to an extend

[00:25] <psch> i'll try and restore the pre-moreinput state in a bit though, 'cause that really needn't be in there anymore

[00:25] <psch> better to have something clean whenever someone wants to try and implement moreinput...

[00:26] *** softmoth joined
[00:26] *** chenryn joined
[00:26] <psch> Hotkeys: basically, the repl we had before was "one line or bust", i.e. you'd to make sure to have a complete and valid statement (minus the terminator if that's the only thing missing)

[00:26] <Hotkeys> right

[00:27] <psch> Hotkeys: what i tried (and thought i'd removed) was the ability to split a statement over multiple lines, but something in there is hard wrt preserving parser state

[00:28] <psch> like, <.say^Mfor ^5> would show the * prompt after the ^M, and print 0..4 on one lines each

[00:28] *** cygx left
[00:28] <psch> eh, actually <.say^Mfor ^5^M^M>

[00:28] <psch> or <.say^Mfor ^5;^M> as equivalent

[00:29] <psch> but yeah, it's a bit hard :P

[00:29] *** leont left
[00:30] <Hotkeys> sounds like it :p

[00:30] <Hotkeys> it's alright I'll just do my fooling around onmy vps

[00:30] *** softmoth left
[00:31] <Hotkeys> I have two linguistics classes which by the end will have taught me most of the same stuff

[00:32] <Hotkeys> but the teacher in my night ling class is mcun more engaging

[00:32] <sprocket> Not sure if anyone’s interested in using perl6 and the Raspberry Pi, but I’ve just pushed the first cut of an RPi library to github: https://github.com/cspencer/perl6-raspberry-pi

[00:32] <sprocket> Documentation is still lacking, but there’s an example in the bin/ dir giving the basic usage.

[00:32] <sprocket> and the disclaimer is that it’s VERY slow. :)

[00:32] <psch> sprocket: you might wanna PR that into the ecosystem :)

[00:33] <sprocket> psch: will do - i’ll flesh out the docs and tests a bit more before doing so. :)

[00:33] *** grumble joined
[00:35] <sprocket> the example I’d commited in the bin/ directory was used to turn on and off and mechanical relay, that will eventually become an irrigation controller for our greenhouse.  i’d written the initial version in python, but perl 6 sounded like a more-fun project :)

[00:37] *** BenGoldberg joined
[00:38] *** aborazmeh joined
[00:38] *** aborazmeh left
[00:38] *** aborazmeh joined
[00:45] *** adu joined
[00:50] <psch> hm, dalek's gone

[00:50] <psch> Hotkeys: i've removed the last remains of my moreinput attempt, the repl now again tries to parse completely as soon as the user hits enter

[00:51] <Hotkeys> is the change live?

[00:52] <psch> https://github.com/rakudo/rakudo/commit/b9383b3e212fb2b020f5bbf5d02c923d4f545827

[00:52] <psch> 'cause dalek's gone :)

[00:53] <Hotkeys> cool

[00:53] *** grumble left
[00:53] <Hotkeys> time to rebuild

[00:53] <Hotkeys> I'm glad I figured out building on windows

[00:54] <Hotkeys> 'cause the rakudo msis are still on 2015.09

[01:02] *** chenryn left
[01:11] *** yeahnoob joined
[01:11] <Hotkeys> hmm

[01:11] <Hotkeys> it's still doing the thing

[01:13] <psch> Hotkeys: uh..?  what exactly are you trying?

[01:14] <Hotkeys> http://i.imgur.com/Mh4zfjA.png

[01:16] <psch> Hotkeys: i don't see that here, but i'm on debian.  i'd (with low confidence) suspect something about the \n changes, but... vOv

[01:16] <Hotkeys> if there's anything I can try to help debug let me know

[01:16] <Hotkeys> It works fine on my ubuntu vps

[01:16] <psch> $ ./perl6-m --version

[01:16] <psch> This is perl6 version 2015.10-193-gc880f16 built on MoarVM version 2015.10-56-g9fd3005

[01:16] <Hotkeys> just on my two windows machines

[01:16] <psch> is that cmd.exe or powershell?

[01:16] <psch> maybe that matters..? 

[01:17] <Hotkeys> c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC>perl6-m --version

[01:17] <Hotkeys> This is perl6 version 2015.10-194-gb9383b3 built on MoarVM version 2015.10-56-g9fd3005

[01:17] <Hotkeys> cmd.exe

[01:17] <Hotkeys> but it does it on powershell too

[01:17] <psch> hrmm

[01:17] <Hotkeys> I also tried restarting the machine when it was happening on my desktop

[01:18] <psch> well, \n kind of could make sense, but i really don't know...

[01:18] <psch> shows you how neglected the repl is... :)

[01:19] <Hotkeys> http://i.imgur.com/xqhcUAA.png

[01:19] <psch> sprocket: i'd second Zoffix++ comment on POSIX for the RPi module, fwiw, but you probably already expected that :)

[01:19] <sprocket> psch: i think i missed the comment - where was it?

[01:20] <psch> sprocket: https://github.com/perl6/ecosystem/pull/86 the POSIX ecosystem PR

[01:20] <psch> it has a cat!

[01:20] <sprocket> psch: oh - hah!  yes, that was expected, and that’s my current weekend task :)

[01:21] <psch> Hotkeys: well, as mentioned, semicolon or no, debian doesn't mind vOv

[01:21] <Hotkeys> yeah it seems to be windows only

[01:21] <Hotkeys> anyone else running windows that can confirm?

[01:21] <psch> Hotkeys: i don't know if cmd.exe and powershell send \xa\xd or \xd, but maybe the grammar can't deal with whatever it is they send...

[01:22] <psch> Hotkeys: best bet is probably bugging jnthn about it whenever he's around and not digging too hard into all those xmas tickets...

[01:22] <psch> Hotkeys: *or* digging really deep yourself, starting with a bisect (with the moreinput removal backported, probably...)

[01:22] <psch> Hotkeys: i wouldn't recommend that, though, 'cause NFG seems a bit spooky :P

[01:23] <Hotkeys> I was going to build a few different commits to see where it starts breaking

[01:24] <psch> ya, you probably want to start a bisect at 385850bf, after rebasing my latest commit before that

[01:24] <psch> and as long as you stay on moar, everything should build and only break in that spot, i guess...

[01:25] <Hotkeys> should I build jvm and see if that breaks too

[01:25] <Hotkeys> or is this moar only

[01:25] <psch> jvm is already broken in quite a few ways, the repl is the least of our worries there...

[01:25] <Hotkeys> lol

[01:25] <Hotkeys> alright

[01:28] *** aborazmeh left
[01:29] *** zacts left
[01:32] *** aborazmeh joined
[01:32] *** aborazmeh left
[01:32] *** aborazmeh joined
[01:32] *** zacts joined
[01:33] *** z8 joined
[01:34] *** Actualeyes joined
[01:35] *** lue is now known as ShimmerFairy

[01:47] <Hotkeys> I'm getting close

[01:47] <Hotkeys> except this version breaks on the first expression rather than the second

[01:47] <Hotkeys> I assume it's the same issue though

[02:02] *** dalek joined
[02:02] *** ChanServ sets mode: +v dalek

[02:03] *** solarbunny joined
[02:11] *** AlexDaniel left
[02:14] *** softmoth joined
[02:19] *** softmoth left
[02:24] <Hotkeys> looks like the bug was introduced in 75b2451

[02:28] <Hotkeys> going to try and see where it started breaking on the second expression instead

[02:31] *** chenryn joined
[02:38] *** xpen joined
[02:43] *** kid51 left
[02:43] *** pippo joined
[02:43] *** stanrifkin joined
[02:43] <pippo> m: $_ = "abc"; m/$<a>=(.+)/; say $<a>».Str;

[02:43] <camelia> rakudo-moar b9383b: OUTPUT«()␤»

[02:43] *** yqt left
[02:43] *** vendethiel joined
[02:44] <pippo> m: $_ = "abc"; m/@<a>=(.+)/; say @<a>».Str;

[02:44] <camelia> rakudo-moar b9383b: OUTPUT«[abc]␤»

[02:45] <pippo> Hmm…

[02:45] *** pippo left
[02:45] *** ilbot3 left
[02:47] *** ilbot3 joined
[02:51] *** softmoth joined
[02:55] *** softmoth left
[02:57] <gfldex> m: my $a = 42; my $b = 666; sub foo(\p1, \p2 is copy){ say p1.VAR.name; say \p2.VAR.name }; foo($a, $b);

[02:57] <camelia> rakudo-moar b9383b: OUTPUT«$a␤\(666)␤»

[02:57] *** kaare_ joined
[02:57] <gfldex> m: my $a = 42; my $b = 666; sub foo(\p1, \p2){ say p1.VAR.name; say p2.VAR.name }; foo($a, $b);

[02:57] <camelia> rakudo-moar b9383b: OUTPUT«$a␤$b␤»

[02:57] <ugexe>  m: my $a = 42; my $b = 666; sub foo(\p1, \p2 is copy){ say p1.VAR.name; say \p2.VAR.name }; foo($a, $b);

[02:57] <camelia> rakudo-moar b9383b: OUTPUT«$a␤\(666)␤»

[02:58] <ugexe> oops i was going for the same thing 

[02:58] <gfldex> m: my $a = 42; my $b = 666; sub foo(\p1, \p2 is copy){ say p1.VAR.name; say p2.VAR.name }; foo($a, $b);

[02:58] <camelia> rakudo-moar b9383b: OUTPUT«$a␤$b␤»

[03:00] <gfldex> that leaves the question what '\p2.VAR.name' actually does

[03:00] *** lizmat_ joined
[03:00] *** lizmat left
[03:02] *** cxreg2 is now known as cxreg

[03:03] <zengargoyle> pippo: When used as a hash, a Match object pretends to be a hash of all its named captures. The keys do not include any sigils, so if you capture to variable @<foo> its real name is $/{'foo'} or $/<foo>. However, you may still refer to it as @<foo> 

[03:06] <zengargoyle> looks like @<a> just forces it to be [] even if only one match. 

[03:09] *** vendethiel left
[03:12] *** yeahnoob left
[03:16] *** Praise joined
[03:16] *** Praise left
[03:16] *** Praise joined
[03:19] <zengargoyle> m: $_ = "abc"; m/$<a>=(.+)/; say @($<a>,)>>.Str

[03:19] <camelia> rakudo-moar b9383b: OUTPUT«(abc)␤»

[03:19] <zengargoyle> m: $_ = "abc"; m/$<a>=(.+)/; say [$<a>]>>.Str

[03:19] <camelia> rakudo-moar b9383b: OUTPUT«[abc]␤»

[03:19] *** adu left
[03:29] *** mr-foobar left
[03:34] *** aborazmeh left
[03:37] *** ShimmerFairy left
[03:38] *** BenGoldberg left
[03:43] *** kaare_ left
[03:49] *** ShimmerFairy joined
[03:51] <stanrifkin> is there a book about perl6? I think we need a printed book.

[03:53] <Hotkeys> books are for nerds

[03:53] *** nys left
[03:53] <Hotkeys> if we get a book it should wait until 6.christmas probably

[03:56] <stanrifkin> 6.christmas?

[03:57] <timotimo> currently we're at 6.Birthday, aka 6.Beta

[03:57] <timotimo> 6.christmas will be "the" release

[04:01] *** chenryn left
[04:02] *** chenryn joined
[04:03] *** chenryn left
[04:04] <skids> m: my @a <== 4,5; @a.perl.say; @a.join("").say

[04:04] <camelia> rakudo-moar b9383b: OUTPUT«[(4, 5),]␤4 5␤»

[04:05] <timotimo> oh, that's item-y now?

[04:05] <skids> I don't know what went on there.  I think feeds kinda got left by the GLR wayside.

[04:06] <timotimo> could very well be

[04:07] <ugexe> i believe its supposed to flatten but doesnt

[04:07] <timotimo> interesting

[04:07] <timotimo> you can look at the --target=ast -e 'my @a <== 1, 2, 3'

[04:08] <timotimo> i think all it needs to do is replace .push with .append

[04:09] <skids> Are loop/while is still planned to eventually return a list of block results like for does?

[04:10] <timotimo> good question; i remember it was supposed to be one of the simplest ways to create a list programmaticaly, eh?

[04:12] <timotimo> ugexe: i'm a bit surprised (but then again ... not that surprised) that spec tests didn't show that my @a <== 1, 2, 3 thing

[04:13] <skids> I'm wondering if efficiency gains acheived by while-izing for-like things will remain if it does (or why for is generally slower for that matter)

[04:13] *** chenryn joined
[04:13] <timotimo> good question

[04:14] <timotimo> i'm going to spectest changing the .push to .append

[04:14] <timotimo> because that's rather obviously what it meant to do

[04:14] <ugexe> i ran into it awhile ago, and i only mention the flattening because someone else asked in irc and toady commented on it (which is how i learned it was incorrect in the first place)

[04:15] <timotimo> mhm

[04:15] <ugexe> but it was around glr i believe

[04:15] <timotimo> i used feeds SO rarely in the past

[04:16] <ugexe> why? always use the coolest looking operator

[04:16] <timotimo> that's how that piece of code cygx wrote got so popular :D

[04:21] *** Actualeyes left
[04:24] <perlawhirl> hi hall

[04:24] <perlawhirl> er.. i mean... hi all

[04:25] <perlawhirl> i'm building perl 6 on my aws instance... i've done it before... but this time it seems to be getting hung at "Stage mast       : "

[04:26] <perlawhirl> i know this step takes a long time... but it's been hours.... in fact my instance appears to no longer be responding (it's  a free tier, maybe out of mem)

[04:26] <timotimo> quite likely that it could be out of memory

[04:26] <perlawhirl> anyways. i'm certain perl 6 will run fine, how do i skip these test and just install it?

[04:26] <timotimo> "Stage mast :" isn't a test

[04:26] <perlawhirl> oh

[04:26] <perlawhirl> so... what are my options

[04:26] <timotimo> but you can really just build it locally and copy it over, as long as your paths match up

[04:27] <perlawhirl> ok... and same arch too? like 64bit?

[04:27] <perlawhirl> or does that not matter

[04:27] <timotimo> 64bit is very recommended, because that'll give you a JIT compiler

[04:27] <timotimo> for quite some performance improvements

[04:28] <perlawhirl> yep, ok... i'm sure i built an older release on free aws without issues... oh well... will spin up a local system and build it locally

[04:28] <perlawhirl> should it also be the same distro?

[04:28] <timotimo> probably not necessary. it could help

[04:29] <perlawhirl> k... will see how i go... i generally --prefix=/opt/perl6  so matching paths is of minimal hassle

[04:29] <timotimo> if you're spinning up a vm locally to build it anyway, no reason to choose something different, i'd say

[04:29] <timotimo> good

[04:29] <perlawhirl> yep, i just already have a 64-but centos system running here, and my aws us ubuntu

[04:30] <perlawhirl> eh... will copy it up and see how it goes.. any issues i'll spin up a ubuntu vm to build it

[04:30] <timotimo> i see

[04:30] <timotimo> i mean, i believe you can build moarvm with a static libmoar.so

[04:30] <timotimo> i've never tried that, so no clue if it actually works

[04:30] <timotimo> but that could make your build much more independent from versions on your system and such

[04:31] <perlawhirl> yeh... will stick to what i know

[04:31] <perlawhirl> ok thanks

[04:31] <timotimo> good luck! i should probably really go to bed

[04:32] <timotimo> hm. my change to feeds caused deprecations to break ... ?!?

[04:32] <perlawhirl> it's only 1530pm here in australia... so you must be operating on australian time

[04:34] <timotimo> what the ...

[04:36] *** Actualeyes joined
[04:36] <timotimo> derp

[04:36] <timotimo> i had a dirty core setting

[04:36] <timotimo> that changes things about exceptions, or rather backtraces

[04:36] *** sprocket left
[04:37] *** eliasr left
[04:40] *** softmoth joined
[04:44] *** softmoth left
[04:49] *** mr_ron joined
[04:50] <dalek> rakudo/nom: a2a34c2 | timotimo++ | src/Perl6/Actions.nqp:

[04:50] <dalek> rakudo/nom: feeds aren't supposed to itemize things

[04:50] <dalek> rakudo/nom: 

[04:50] <dalek> rakudo/nom: there's no difference in the spec tests with or without this change,

[04:50] <dalek> rakudo/nom: so we'll really want to up the coverage of feeds

[04:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2a34c2675

[04:51] <mr_ron> m: use newline :crlf; "abc.txt".IO.spurt: "abc123\ndef456\n"; my $f = slurp "abc.txt"; dd $f

[04:51] <camelia> rakudo-moar b9383b: OUTPUT«Str $var = "abc123\r\ndef456\r\n"␤»

[04:52] <mr_ron> methinks slurp is buggy here

[04:52] <timotimo> isn't camelia supposed to prevent .IO from being used?

[04:53] <mr_ron> don't know?

[04:53] <mr_ron> m: unlink 'abc.txt'

[04:53] <camelia> rakudo-moar b9383b: OUTPUT«unlink is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub unlink at src/RESTRICTED.setting:19␤  in block <unit> at /tmp/L_OQ0AZoQA:1␤␤»

[04:55] *** mr_ron left
[05:05] *** khw left
[05:10] *** nightfrog left
[05:12] *** yeahnoob joined
[05:13] *** nightfrog joined
[05:22] *** skids left
[05:41] *** tardisx joined
[06:02] *** telex left
[06:04] *** telex joined
[06:05] *** cognominal left
[06:10] *** laouji joined
[06:16] *** apejens_ is now known as apejens

[06:27] *** laouji left
[06:29] *** softmoth joined
[06:33] *** softmoth left
[06:35] *** quester joined
[06:36] *** domidumont joined
[06:40] *** domidumont left
[06:42] *** sftp joined
[06:43] *** tardisx left
[06:43] *** tardisx joined
[06:43] *** tardisx left
[06:57] *** geraud left
[06:59] <dalek> rakudo/nom: 1458f0e | TimToady++ | src/Perl6/ (2 files):

[06:59] <dalek> rakudo/nom: must canonicalize name adverb declarations too!

[06:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1458f0ea3e

[07:02] *** diana_olhovik_ joined
[07:02] <dalek> roast: 6afbefb | TimToady++ | S17-scheduler/in.t:

[07:02] <dalek> roast: detach adverb from name it glommed onto

[07:02] <dalek> roast: review: https://github.com/perl6/roast/commit/6afbefb446

[07:02] <dalek> roast: 70293c9 | TimToady++ | S02-names-vars/varnames.t:

[07:02] <dalek> roast: Make sure name adverb declarations canonicalize

[07:02] <dalek> roast: review: https://github.com/perl6/roast/commit/70293c9ee3

[07:02] <[Tux]> test             50000    35.146    35.026

[07:02] <[Tux]> test-t           50000    17.972    17.852

[07:07] *** rindolf joined
[07:18] <bartolin_> good morning, #perl6

[07:20] <bartolin_> if someone wants to look at the JVM breakage: With the following bandaid, I'm able to build a current rakudo.jvm: https://gist.github.com/usev6/f7eaf093a38fb893e76b

[07:21] <bartolin_> ... maybe that could give a hint for a cleaner patch

[07:21] *** domidumont joined
[07:29] *** firstdayonthejob joined
[07:30] *** brrt joined
[07:32] *** _mg_ joined
[07:34] *** jkva joined
[07:39] *** _mg_ left
[07:42] *** diana_olhovik_ left
[07:43] *** diana_olhovik_ joined
[07:50] *** _mg_ joined
[07:54] *** hlafarge joined
[07:58] *** jkva left
[07:58] *** jkva joined
[08:15] *** quester left
[08:16] *** darutoko joined
[08:18] *** softmoth joined
[08:23] *** softmoth left
[08:23] *** firstdayonthejob left
[08:23] *** hlafarge left
[08:28] *** shmibs left
[08:29] *** shmibs joined
[08:35] *** andreoss joined
[08:35] <brrt> good netsplit #perl6

[08:36] <brrt> or wasn't that a netsplit

[08:36] <nine> Good Maybe[netsplit] brrt!

[08:37] <brrt> ohai nine!

[08:39] *** zakharyas joined
[08:40] <mrf> good * #perl6

[08:44] *** pierrot_ joined
[08:44] *** pierrot left
[08:46] *** abraxxa joined
[08:46] <andreoss> why does smoke.perl6.org show GTK::Simple tests failed? where i can see logs?

[08:48] *** hlafarge joined
[08:54] *** ely-se joined
[08:54] *** virtualsue joined
[09:02] <stmuk> andreoss: it's probably because it needs a x server

[09:05] <stmuk> maybe it's possible to setup a headless one

[09:09] <lizmat_> good *, #perl6!

[09:09] *** lizmat_ is now known as lizmat

[09:09] <lizmat> .botsnack

[09:09] <yoleaux> :D

[09:10] <dalek> rakudo/nom: dd1d7fe | lizmat++ | src/core/Str.pm:

[09:10] <dalek> rakudo/nom: Implement :k/:v/:kv/:p for Str.split(@needles)

[09:10] <dalek> rakudo/nom: 

[09:10] <dalek> rakudo/nom: Also now make a limit functional without needing to resort to regexen.

[09:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd1d7fe005

[09:10] <dalek> gtk-simple: 1c1a8cc | andreoss++ | t/01_sanity.t:

[09:10] <dalek> gtk-simple: Run tests only if $*ENV<DISPLAY> is set

[09:10] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/1c1a8cc847

[09:19] *** andreoss left
[09:19] *** g4 joined
[09:19] *** g4 left
[09:19] *** g4 joined
[09:26] *** arunes007 joined
[09:27] *** arunes007 left
[09:31] *** Psyche^_ joined
[09:33] *** xpen left
[09:35] *** Psyche^ left
[09:36] *** cognominal joined
[09:36] *** xpen joined
[09:37] *** yeahnoob left
[09:46] *** xfix joined
[09:49] *** RabidGravy joined
[09:49] <lizmat> https://wendyga.wordpress.com/2015/10/08/fosdem-30-31-january-2016-brussels-belgium-call-for-speakers/   # FOSDEM 2016

[09:52] <dalek> rakudo/nom: 2017471 | lizmat++ | src/core/Str.pm:

[09:52] <dalek> rakudo/nom: If limit, only look for that many in each needle

[09:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2017471814

[10:03] <brrt> lizmat; good point

[10:05] *** espadrine joined
[10:07] *** softmoth joined
[10:07] *** domm joined
[10:09] *** tokuhir__ joined
[10:10] *** eliasr joined
[10:11] *** tokuhiro_ left
[10:11] *** softmoth left
[10:14] *** hlafarge left
[10:14] <dalek> perl6-examples: b981db8 | (Konrad Borowski)++ | / (2 files):

[10:14] <dalek> perl6-examples: [euler] Add solution for 4

[10:14] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/b981db8d70

[10:15] *** shamu left
[10:15] *** shamu joined
[10:26] *** eternaleye joined
[10:29] *** stanrifkin left
[10:31] *** _mg_ left
[10:38] <jnthn> morning, #perl6

[10:38] <yoleaux> 5 Nov 2015 18:35Z <nine> jnthn: fun starts when people do use Test; use lib 't/spec/packages'; use Test::Util; because then we load a precomped Test from one repo and a precomped Test::Util from another and the latter is based on a different precomp version of Test.

[10:39] <dalek> perl6-examples: bc64a7e | (Konrad Borowski)++ | categories/ (11 files):

[10:39] <dalek> perl6-examples: Remove executable bit from non-executable files

[10:39] <dalek> perl6-examples: 

[10:39] <dalek> perl6-examples: Those files aren't executable files, as in a compiled executable, but

[10:39] <dalek> perl6-examples: rather Perl 6 source files. Without a shebang, executable bit is

[10:39] <dalek> perl6-examples: useless, and potentially even confusing.

[10:39] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/bc64a7eefb

[10:44] *** z8 left
[10:44] <lizmat> jnthn o/

[10:46] <jnthn> o/ lizmat 

[10:46] <timotimo> o/

[10:48] <|Tux|> lizmat, :v, :skip-empty =>

[10:48] <|Tux|> All tests successful.

[10:48] <|Tux|> Files=25, Tests=19732, 58 wallclock secs ( 3.05 usr  0.17 sys + 203.51 cusr  2.14 csys = 208.87 CPU)

[10:48] <xfix> Odd, perl6-examples tests get stuck at testing LWP::Simple...

[10:48] <xfix> https://travis-ci.org/perl6/perl6-examples/builds/89617797

[10:48] <lizmat> |Tux|  :-)

[10:51] <|Tux|> Nice to note: Inline::Perl5+XS 16.022, plain perl6: 17.578

[10:51] <|Tux|> SO CLOSE!

[10:51] <jnthn> .tell mr_ron slurp is fine, we don't transform \r\n to \n on I/O, the newline pragma changes the meaning of \n in strings

[10:51] <yoleaux> jnthn: I'll pass your message to mr_ron.

[10:52] <timotimo> oh? i thought "make \n magic" would make it actually magical

[10:54] <jnthn> timotimo: "Means what $?NL says it should" is already quite magical for an escape sequence ;)

[10:55] <timotimo> oooh

[10:55] <timotimo> sorry, i misread!

[10:57] *** jkva left
[10:58] <xfix> I'm thinking about replacing the third example on http://perl6.org/

[10:58] <nine> |Tux|: looks like I have to speed up Inline::Perl5 soon ;)

[10:58] <xfix> That is, instead of `fail "Not a Natural Number in Factorial" if $n < 0;`, it would have `Int $n where $n >= 0`

[10:59] <xfix> Does that look fine?

[10:59] <timotimo> xfix: that'll throw an exception rather than a Failure, though, right?

[10:59] <jnthn> |Tux|: Looks like I need to find more time for optimizing ;-)

[10:59] <xfix> Eh, I guess.

[11:00] *** woolfy joined
[11:00] <xfix> But at the same time, negative numbers in factorial are exceptional condition, aren't they :-)?

[11:00] <xfix> are an exceptional condition*

[11:00] <jnthn> nine: Saw your comment; brane is still not firing on all cylinders yet so will get back to you on it later today :)

[11:00] <woolfy> London Perl Workshop is really looking for more presentations about Perl 6.

[11:00] <nine> jnthn: thanks!

[11:01] <woolfy> Mark Keating writes: "Heya Perl6 folksies. LPW CforP officially closes today but the site will  actually accept submissions all the way until Monday - don't forget we  may be closing Lightning Talk submissions early as well - we need more  Perl6 if we can get it."

[11:01] <xfix> Hm, there is a test for giving a Failure...

[11:02] <woolfy> So, if you want to show the awesomeness of Perl 6 to an audience of at least 150 people, go here and submit a talk: http://act.yapc.eu/lpw2015/newtalk

[11:02] <|Tux|> ENOTIME

[11:02] <xfix> dies-ok { (-1)! }, "Factorial for -1 throws an exception"

[11:05] *** sitaram joined
[11:09] *** AlexDaniel joined
[11:10] <dalek> roast: 858b2e0 | lizmat++ | S32-str/split.t:

[11:10] <dalek> roast: Add tests for Str.split(@needles)

[11:10] <dalek> roast: review: https://github.com/perl6/roast/commit/858b2e02cb

[11:11] <xfix> That depends on how bad is passing negative value to factorial is, I guess.

[11:12] <xfix> Division by zero is a failure, so I guess that makes sense.

[11:25] <RabidGravy> weird that on travis sometimes access to the github api directly results in a 403 and sometimes it doesn't

[11:32] *** z8 joined
[11:33] <moritz> RabidGravy: rate limiting?

[11:36] *** xfix left
[11:37] *** Sqirrel left
[11:39] *** sitaram left
[11:39] <dalek> rakudo/nom: 6b4845d | lizmat++ | src/core/Str.pm:

[11:39] <dalek> rakudo/nom: Better error on mixed nameds exception

[11:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6b4845d559

[11:39] <dalek> rakudo/nom: e3713a0 | lizmat++ | src/core/Str.pm:

[11:39] <dalek> rakudo/nom: Handle an empty needle by ignoring it

[11:39] <dalek> rakudo/nom: 

[11:39] <dalek> rakudo/nom: The idea behind this is that if a list of needles is generated from some

[11:39] <dalek> rakudo/nom: external input, that you can group types of needles resulting in fixed index

[11:39] <dalek> rakudo/nom: numbers (even if they are not all specified).

[11:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e3713a0e1f

[11:42] *** liufeng joined
[11:47] *** xpen left
[11:50] *** xpen joined
[11:51] *** Skarsnik joined
[11:53] *** jkva joined
[11:54] *** perlIRC joined
[11:55] *** xpen left
[11:56] *** softmoth joined
[11:56] <RabidGravy> moritz, ah yes - anyhow I'll leave the test TODO for the time being ;-)

[11:57] <perlIRC> For coding with autocompletion which IDE is best for perl 6??????

[11:58] *** jkva left
[11:58] <DrForr> I think Microsoft's new Visual Studio supports Perl 6, not sure how far autocomplete goes.

[11:59] <tadzik> wasn't that Visual Studio Code?

[12:00] <brrt> yeah, that's VS code

[12:00] <brrt> not 100% sure what the relation between these are

[12:00] <RabidGravy> many a long year that I've used Visual Studio

[12:00] *** softmoth left
[12:00] <RabidGravy> ^ since

[12:01] <tadzik> Code is just a fancy, trendy webby editor, a bit like github's Atom

[12:02] <iv> it's very well integrated. more cohesive than atom's "a big pile of plugins" approach

[12:07] <perlIRC> Code?? send me the link plz

[12:08] <timotimo> "visual studio code"

[12:08] *** brrt left
[12:09] <perlIRC> tadzik "Code" editor??

[12:10] *** azawawi joined
[12:10] <timotimo> it's called "visual studio code"

[12:10] <azawawi> hi

[12:10] <RabidGravy> erp

[12:10] <DrForr> perlIRC: Maybe read what people are saying? "visual studio code" as timotimo said :)

[12:10] <azawawi> since i was looking at the logs :)

[12:11] <azawawi> perlIRC: your best bet for windows and *inux is http://atom.io

[12:11] <azawawi> perlIRC: visual studio code is just github's atom editor with faster integration on windows

[12:11] <timotimo> "faster"?

[12:12] <iv> https://code.visualstudio.com

[12:12] <azawawi> timotimo: yup on windows visual studio code is faster a bit

[12:12] <timotimo> interesting

[12:12] <azawawi> timotimo: they preload dlls... etc

[12:12] <azawawi> timotimo: it is their OS lol... they can optimize for it :)

[12:12] <timotimo> well, sure

[12:12] *** jkva joined
[12:12] <DrForr> Works for Volkswagen.

[12:13] <perlIRC> perl6 script ends with what??  Is it .p6??

[12:14] <timotimo> .p6 for scripts, .pm6 for modules; that is quite common

[12:14] *** azawawi_v2 joined
[12:15] <azawawi_v2> perlirc: if you use .p6 and .pm6, syntax highlighting work even with github

[12:15] <azawawi_v2> perlIRC: s/work/works/

[12:15] <RabidGravy>  a *script* doesn't have to have an extension on most platforms, however on windows the association depends on the extension

[12:15] <flussence> .oO( until they break everything again )

[12:15] <timotimo> that's true, too

[12:15] <timotimo> flussence: well, we have very talented people who can usually work around the issue given enough time

[12:16] <azawawi_v2> also atom editor identifies shebangs #/usr/bin/env perl6

[12:16] *** azawawi left
[12:16] <timotimo> that's worth a lot. windows doesn't though. except perl, i've heard

[12:16] <timotimo> or was that just prove that does it? no, i think it's perl.

[12:17] *** Sqirrel joined
[12:17] <flussence> timotimo: yeah, the people writing those syntax highlighters (usually in a horrible language :) deserve a *lot* of credit.

[12:17] <timotimo> i fully agree

[12:18] <azawawi_v2> i was just looking at atom's syntax highlighter for perl6... https://github.com/atom/language-perl/blob/master/spec/grammar-perl6-spec.coffee

[12:18] *** azawawi_v2 is now known as azawawi

[12:18] <timotimo> that's just a test file

[12:18] <timotimo> https://github.com/atom/language-perl/blob/master/grammars/perl%206.cson - this is the highlighter grammar

[12:19] <azawawi> i hate atom's not identifying perl6-identifiers https://github.com/atom/language-perl/blob/master/grammars/perl%206.cson :0

[12:20] <azawawi> https://github.com/atom/language-perl/blob/master/grammars/perl%206.cson#L256  # for identifiers

[12:20] * RabidGravy gently nudges tadzik about the https://github.com/tadzik/JSON-Unmarshal/pull/10

[12:21] <RabidGravy> :)

[12:21] * azawawi looks at the channel graphs at http://irclog.perlgeek.de/

[12:23] <timotimo> azawawi: not bad, eh?

[12:23] <tadzik> oh, oh :)

[12:23] <azawawi> perl 6 graph is interesting

[12:23] <tadzik> will look

[12:23] <azawawi> moritz++

[12:24] <RabidGravy> talkative bunch aren't you

[12:24] *** andreoss joined
[12:24] <RabidGravy> anyway farm shop - need more vegetables

[12:24] <RabidGravy> see y'all later 

[12:24] <azawawi> we have also a channel called #masakism :)

[12:24] <timotimo> oh yes

[12:25] <timotimo> that was the name of a little workshop masak did

[12:25] <tadzik> that brings fun memories

[12:25] <timotimo> i'd call them "fund memories"

[12:27] <azawawi> http://www.theregister.co.uk/2015/10/31/brush_up_on_your_fortran/   # imagine that for Perl in twenty years :)

[12:29] *** _mg_ joined
[12:30] *** RabidGravy left
[12:30] <azawawi> i think p6 syntax highlighting in general is an interesting topic that i tackled earlier when i first joined #perl6

[12:31] <azawawi> moritz++ was focused on correctness ofcourse

[12:31] <azawawi> PerlJam if i remember correctly was focused on speed

[12:32] <azawawi> most syntax highlighter cover 90% of the most common cases

[12:33] <azawawi> s/highlighter/highlighters/

[12:34] <azawawi> i wonder if our earlier approach to the project was right... i.e. we should have built tests first for what a perl 6 syntax highlighter should do

[12:35] <azawawi> and then focused on speed for implementations that pass common test cases

[12:36] <azawawi> .tell moritz please see http://irclog.perlgeek.de/perl6/2015-11-06#i_11494509

[12:36] <yoleaux> azawawi: I'll pass your message to moritz.

[12:37] * azawawi going out for a walk &

[12:37] *** azawawi left
[12:37] *** kaare_ joined
[12:37] * moritz sees

[12:37] <yoleaux> 12:36Z <azawawi> moritz: please see http://irclog.perlgeek.de/perl6/2015-11-06#i_11494509

[12:38] *** weihan joined
[12:38] *** sufrostico joined
[12:39] <dalek> roast: fd2cdc2 | jnthn++ | S16-io/handles-between-threads.t:

[12:39] <dalek> roast: Tests for reading from $*IN from threads.

[12:39] <dalek> roast: 

[12:39] <dalek> roast: Covers RT #124005.

[12:39] <dalek> roast: review: https://github.com/perl6/roast/commit/fd2cdc263e

[12:42] *** kid51 joined
[12:43] <dalek> roast: f98782d | jnthn++ | S16-filehandles/unlink.t:

[12:43] <dalek> roast: Remove utterly bogus tests.

[12:43] <dalek> roast: 

[12:43] <dalek> roast: There is no implicit file close at scope exit in Perl 6, and the tests

[12:43] <dalek> roast: only appeared to work in any sense on non-Windows because you can

[12:43] <dalek> roast: unlink an open file there (and on Windows not).

[12:43] <dalek> roast: review: https://github.com/perl6/roast/commit/f98782d97c

[12:43] * sunnavy_ sunnavy

[12:43] *** sunnavy_ is now known as sunnavy

[12:51] *** kid51 left
[12:51] *** weihan left
[12:58] *** chenryn left
[12:58] *** perlIRC left
[13:00] <tadzik> Rab<TAB><TAB>

[13:00] <tadzik> dang

[13:00] <tadzik> .tell RabidGravy pure gold, merged it :) Thanks!

[13:00] <yoleaux> tadzik: I'll pass your message to RabidGravy.

[13:00] <nine> Rab tab tab dang.....sounds like a song ;)

[13:02] <tadzik> or a music genre :P

[13:03] <masak> evening, #perl6

[13:03] <timotimo> chinevening, masak 

[13:03] <timotimo> ... chinesening?

[13:03] <masak> UTC+08:00-vening

[13:04] <ely-se> should run automatically append .exe, .bat and .cmd like some other functions in other libraries of other programming languages do on Windows?

[13:04] <masak> last evening in .cn, then I'll be downgrading to European time again.

[13:04] <masak> ely-se: sounds... plausible.

[13:08] *** aborazmeh joined
[13:08] *** aborazmeh left
[13:08] *** aborazmeh joined
[13:12] *** joydo joined
[13:13] *** yqt joined
[13:13] <|Tux|> lizmat, https://gist.github.com/Tux/0bf175a73e713b2e43e9

[13:14] <lizmat> oki, looking 

[13:18] <ely-se> masak: I don't actually know which Windows API functions do and do not do this

[13:18] * |Tux| was preparing a :k branch to see if there is any more performance to gain

[13:19] <lizmat> |Tux|++

[13:19] <|Tux|> damn you perl6 folk! I don't have time for this, but this speed gain motivates me to do things I shouldn't do :)

[13:21] <lizmat> :-)

[13:21] <|Tux|> lizmat, is it defined/documented which index is returned when there are multiple equal entries in @needle?

[13:21] *** joydo left
[13:21] <lizmat> no, but it will be the first

[13:21] * |Tux| expected the first, but it is quite often the last

[13:22] <|Tux|> it isn't

[13:22] <lizmat> hmmm.... actuallu

[13:22] <lizmat> atm it's undefined

[13:22] <lizmat> not sure how stable p6's sort is

[13:22] <|Tux|> I can live with that, but then again, my expectation was different

[13:23] <lizmat> I will make it so it is the first

[13:23] <lizmat> that will match the expectation of LTM, I think

[13:23] <|Tux|> lizmat++

[13:23] <lizmat> of course, it's better to not do this  :-)

[13:23] <|Tux|>         @chx.push: $sep, $quo, $noe ?? Str !! $esc;

[13:24] <|Tux|> =>       @chx.push: $sep, $quo, $esc;

[13:24] <lizmat> but I will make it so it will always do the first

[13:24] <|Tux|> if it were defined to be the first

[13:25] *** virtualsue left
[13:29] <dalek> rakudo-star-daily: f06b4cb | coke++ | log/ (7 files):

[13:29] <dalek> rakudo-star-daily: today (automated commit)

[13:29] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/f06b4cb495

[13:31] *** duncan_dmg joined
[13:32] *** cognominal left
[13:35] <dalek> rakudo/nom: 365449e | lizmat++ | src/core/Rakudo/Internals.pm:

[13:35] <dalek> rakudo/nom: Add NOT_ALL_TYPE internal method

[13:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/365449e06d

[13:35] <dalek> rakudo/nom: 4c4b4c1 | lizmat++ | src/core/Str.pm:

[13:35] <dalek> rakudo/nom: Identical needles always index to the first

[13:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4c4b4c12ff

[13:41] *** n0tjack joined
[13:42] *** rurban joined
[13:42] *** yakudza left
[13:43] *** n0tjack_ joined
[13:45] *** softmoth joined
[13:46] *** n0tjack left
[13:48] *** n0tjack_ left
[13:53] <[Coke]> I'm going to merge bartolin's modification of my patch to get the jvm unbusted. anyone wanting a cleaner fix can hunt for all the #?if jvm markers...

[13:53] *** aborazmeh left
[13:56] *** yakudza joined
[13:56] <dalek> perl6-most-wanted: 35dd0dd | (Zoffix Znet)++ | most-wanted/modules.md:

[13:56] <dalek> perl6-most-wanted: Mark Data::GUID as stalled / List UUID

[13:56] <dalek> perl6-most-wanted: 

[13:56] <dalek> perl6-most-wanted: Doing GUID right is harder than I expected. Marked it as stalled, in case someone smarter wants to have a crack at it, before I figure it out.

[13:56] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/35dd0dd807

[13:59] *** zakharyas left
[14:01] *** Actualeyes left
[14:02] *** RabidGravy joined
[14:11] *** brrt joined
[14:15] *** Actualeyes joined
[14:17] *** zengargoyle left
[14:19] *** zengargoyle joined
[14:25] *** cfloare left
[14:26] *** cgfbee left
[14:28] *** muraiki joined
[14:30] <RabidGravy> the weather is yuck out there

[14:30] <yoleaux> 13:00Z <tadzik> RabidGravy: pure gold, merged it :) Thanks!

[14:30] *** skids joined
[14:30] <RabidGravy> tadzik++ # superstar

[14:35] *** virtualsue joined
[14:37] <dalek> rakudo/nom: ccefe10 | coke++ | src/core/Failure.pm:

[14:37] <dalek> rakudo/nom: Revert "Fix some strange failures", at least on the JVM

[14:37] <dalek> rakudo/nom: 

[14:37] <dalek> rakudo/nom: This broke rakudo-jvm

[14:37] <dalek> rakudo/nom: 

[14:37] <dalek> rakudo/nom: This reverts commit 5349d05c87387e1c4f70e4e7d1591ed17114cc35.

[14:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ccefe1071a

[14:38] <dalek> rakudo/nom: 771995d | coke++ | src/core/Failure.pm:

[14:38] <dalek> rakudo/nom: partially revert "Failure should also not return useful integer"

[14:38] <dalek> rakudo/nom: 

[14:38] <[Coke]> ^^ bartolin++

[14:38] <dalek> rakudo/nom: This broke rakudo-jvm

[14:38] <dalek> rakudo/nom: 

[14:38] <dalek> rakudo/nom: This reverts commit ad08a1d71935a12e6e3e0814d14ae357b2064c62.

[14:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/771995d08a

[14:38] <dalek> rakudo/nom: 8b60779 | coke++ | src/core/IO/Handle.pm:

[14:38] <dalek> rakudo/nom: partially revert "Don't forget to set seps on special handles."

[14:38] <dalek> rakudo/nom: 

[14:38] <dalek> rakudo/nom: This broke rakudo-jvm

[14:38] <dalek> rakudo/nom: 

[14:38] <dalek> rakudo/nom: This reverts commit cc4d72c4abb243f44500a7c435e2e9946325f3bd.

[14:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b6077968b

[14:41] *** sprocket joined
[14:41] *** cgfbee joined
[14:41] *** mr_ron joined
[14:42] *** cfloare joined
[14:48] *** xpen joined
[14:48] *** sprocket left
[14:48] *** sprocket joined
[14:53] *** xpen left
[14:54] *** tokuhir__ left
[14:55] *** rurban left
[14:56] <sprocket> hello all

[14:57] <RabidGravy> yo

[15:00] <moritz> ilmari++ # pull requests for moar, nqp, rakudo, roast

[15:02] *** pippo joined
[15:02] <ilmari> moritz: well, I needed to test that it worked, so I had to wire up all the bits between moar and roast

[15:02] *** abraxxa left
[15:02] <pippo> m: my regex first { ^\<a }; my regex second { ^\<b }; my @a = /<first>/, /<second>/; my $t = now; grep /<first>|<second>/, "aaaaaaaaaaa bb" xx 45_000; say now -

[15:02] <camelia> rakudo-moar 8b6077: OUTPUT«5===SORRY!5=== Error while compiling /tmp/bP0JY19eJe␤Confused␤at /tmp/bP0JY19eJe:1␤------> 3d>/, "aaaaaaaaaaa bb" xx 45_000; say now7⏏5 -␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement …»

[15:03] <pippo> m: my regex first { ^\<a }; my regex second { ^\<b }; my @a = /<first>/, /<second>/; my $t = now; grep /<first>|<second>/, "aaaaaaaaaaa bb" xx 1_000; say now - $t;

[15:03] <camelia> rakudo-moar 8b6077: OUTPUT«0.1188711␤»

[15:03] *** duncan_dmg left
[15:03] *** rurban joined
[15:03] <pippo> m: my regex first { ^\<a }; my regex second { ^\<b }; my @a = /<first>/, /<second>/; my $t = now; grep /@a/, "aaaaaaaaaaa bb" xx 1_000; say now - $t;

[15:03] <camelia> rakudo-moar 8b6077: OUTPUT«2.3813503␤»

[15:03] <pippo> ^^can someone explain to me why that huge time difference?

[15:05] *** duncan_dmg joined
[15:06] *** raiph joined
[15:07] *** gtodd left
[15:07] <moritz> m: my $t = now; grep rx { ^\<a }; grep /@a/, "aaaaaaaaaaa bb" xx 1_000; say now - $t

[15:07] <camelia> rakudo-moar 8b6077: OUTPUT«5===SORRY!5=== Error while compiling /tmp/V5TNhkHNzF␤Variable '@a' is not declared␤at /tmp/V5TNhkHNzF:1␤------> 3my $t = now; grep rx { ^\<a }; grep /7⏏5@a/, "aaaaaaaaaaa bb" xx 1_000; say now ␤»

[15:07] <moritz> m: my $t = now; grep rx { ^\<a }, "aaaaaaaaaaa bb" xx 1_000; say now - $t

[15:07] <camelia> rakudo-moar 8b6077: OUTPUT«0.07905799␤»

[15:07] <moritz> m: my $t = now; grep rx { ^\<b }, "aaaaaaaaaaa bb" xx 1_000; say now - $t

[15:07] <camelia> rakudo-moar 8b6077: OUTPUT«0.07801403␤»

[15:08] <moritz> pippo: I'd say "because interpolation of arrays into regexes is slow". Why though I don't know.

[15:08] <jnthn> Probably because it can't rely on the array's contents not changing over time, and because | has LTM semantics it has to re-compute the NFA every time

[15:09] <jnthn> m: my regex first { ^\<a }; my regex second { ^\<b }; my @a = /<first>/, /<second>/; my $t = now; grep /||@a/, "aaaaaaaaaaa bb" xx 1_000; say now - $t;

[15:09] <camelia> rakudo-moar 8b6077: OUTPUT«2.7571054␤»

[15:09] <jnthn> hm, that's not much of a speedup

[15:09] *** domidumont left
[15:09] <jnthn> In fact, it's slower

[15:09] *** cfloare left
[15:09] *** pmurias joined
[15:10] <jnthn> m: my regex first { ^\<a }; my regex second { ^\<b }; my @a = &first, &second; my $t = now; grep /@a/, "aaaaaaaaaaa bb" xx 1_000; say now - $t;

[15:10] <camelia> rakudo-moar 8b6077: OUTPUT«1.94181371␤»

[15:10] <pippo> jnthn: moritz apparently it dipends on the lenght of the string to be matched.

[15:10] <jnthn> That removes the unrequired level of indirection

[15:10] <jnthn> pippo: Sure, 'cus it'll be scanning through the string

[15:10] *** cgfbee left
[15:10] <pippo> jnthn: but there is ^ anchor

[15:11] <moritz> grepping for one regex is 80ms; grepping for two is 2000ms

[15:11] <moritz> so I'm pretty sure it's the array that's causing the overhead

[15:12] <jnthn> pippo: The top-level regex interpolating them can't know that

[15:12] <moritz> pippo: I don't think we propagate the information upwards that each alternative is anchored

[15:12] <jnthn> m: my regex first { ^\<a }; my regex second { ^\<b }; my @a = &first, &second; my $t = now; grep /^@a/, "aaaaaaaaaaa bb" xx 1_000; say now - $t;

[15:12] <camelia> rakudo-moar 8b6077: OUTPUT«0.2299179␤»

[15:12] <jnthn> Move the anchor there and it's a lot faster

[15:12] <pippo> Ha. OK. TY!

[15:12] <moritz> m: my $t = now; grep / ^\<a | ^\<b  /, "aaaaaaaaaaa bb" xx 1_000; say now - $t;

[15:12] <camelia> rakudo-moar 8b6077: OUTPUT«0.0987924␤»

[15:13] <moritz> still much faster with a direct alternation

[15:13] <moritz> m: my $t = now; grep / ^\<a || ^\<b  /, "aaaaaaaaaaa bb" xx 1_000; say now - $t;

[15:13] <camelia> rakudo-moar 8b6077: OUTPUT«0.0846258␤»

[15:13] <moritz> ... even when it doesn't LTM

[15:13] <moritz> so there's still a huge overhead from the array interpolation

[15:14] <jnthn> Aye

[15:15] <pippo> moritz: indeed.

[15:16] *** cfloare joined
[15:17] *** cgfbee joined
[15:18] *** yqt left
[15:19] <mr_ron> m: use newline :crlf; "abc.txt".IO.spurt: "abc123\ndef456\n"; my $f = slurp "abc.txt"; dd $f

[15:19] <yoleaux> 10:51Z <jnthn> mr_ron: slurp is fine, we don't transform \r\n to \n on I/O, the newline pragma changes the meaning of \n in strings

[15:19] <camelia> rakudo-moar 8b6077: OUTPUT«Str $var = "abc123\r\ndef456\r\n"␤»

[15:20] <mr_ron> it looks like it translated \n to \r\n on the way out but wondering why it didn't do the reverse when it read

[15:20] <jnthn> Read what I wrote.

[15:20] <zengargoyle> m: my $s = 'abc'; $s .= flip; say $s;

[15:20] <camelia> rakudo-moar 8b6077: OUTPUT«cba␤»

[15:21] <mr_ron> m: use newline :crlf; dd "abc123\ndef456\n";

[15:21] <camelia> rakudo-moar 8b6077: OUTPUT«Str $var = "abc123\r\ndef456\r\n"␤»

[15:21] <zengargoyle> is space before '.' allowed everywhere or just somewheres?  some docs still say no space allowed before '.'

[15:22] <ugexe> id think [.*?] wouuld work

[15:24] <ugexe> er sorry im stuck on regex mode

[15:26] <pippo> zengargoyle: https://p6weekly.wordpress.com/2015/09/28/2015-34-40-birthday/

[15:26] <mr_ron> Stuck on a problem with a stray \r\n installing panda on win32 with an up to date Perl ... still working on it ...

[15:27] <pippo> See "Larry’s Birthday Present To Developers"

[15:27] <pippo> zengargoyle: Hope this is related to your question.

[15:28] *** zakharyas joined
[15:28] *** pippo left
[15:28] *** sprocket left
[15:31] *** sprocket joined
[15:31] <zengargoyle> pippo: that looks like the answer

[15:32] <dalek> nqp: d323210 | jnthn++ | tools/build/MOAR_REVISION:

[15:32] <dalek> nqp: Bump MOAR_REVISION for encoding improvements.

[15:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d3232100ed

[15:33] <dalek> nqp: 6261d63 | (Dagfinn Ilmari Mannsåker)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[15:33] <dalek> nqp: Wire up encoderep MoarVM op

[15:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6261d6318f

[15:33] <dalek> nqp: 40cba3f | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[15:33] <dalek> nqp: Merge pull request #251 from ilmari/encode-replacement

[15:33] <dalek> nqp: 

[15:33] <dalek> nqp: Wire up encoderep MoarVM op

[15:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/40cba3f01d

[15:33] <zengargoyle> my $s = 'abc'; say [.] $s flip

[15:33] <ilmari> jnthn++ # mergage

[15:34] <jnthn> Rakudo one coming up soon

[15:35] <zengargoyle> m: my $s = 'abc'; say [.] $s flip

[15:35] *** sprocket left
[15:35] <camelia> rakudo-moar 8b6077: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gheMGbIWP0␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at /tmp/gheMGbIWP0:1␤------> 3my $s = 'abc'; say [.]7⏏5 $s flip␤»

[15:37] <RabidGravy> ilmari++ # dodgy scandiwegian

[15:37] <dalek> rakudo/nom: a87e868 | jnthn++ | tools/build/NQP_REVISION:

[15:37] <dalek> rakudo/nom: Bump NQP_REVISION for encoding improvements.

[15:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a87e868baf

[15:38] <ilmari> someone else can fix it for jvm and js :-P

[15:38] <dalek> rakudo/nom: e7bc028 | (Dagfinn Ilmari Mannsåker)++ | src/core/Str.pm:

[15:38] <dalek> rakudo/nom: Add :replacement(Str) adverb to Str.encode

[15:38] <dalek> rakudo/nom: 

[15:38] <dalek> rakudo/nom: Without an argument it uses a per-encoding default.

[15:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e7bc02830c

[15:38] <dalek> rakudo/nom: 76ee2d8 | jnthn++ | src/core/Str.pm:

[15:38] <dalek> rakudo/nom: Merge pull request #576 from ilmari/encode-replacement

[15:38] <dalek> rakudo/nom: 

[15:38] <dalek> rakudo/nom: Add :replacement(Str) adverb to Str.encode

[15:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/76ee2d8ff3

[15:38] <ilmari> (the rakudo bits are #?if moar-ed out)

[15:38] <jnthn> Yes, noticed that. Thanks :)

[15:39] <dalek> roast: d6712a9 | (Dagfinn Ilmari Mannsåker)++ | S32-str/encode.t:

[15:39] <dalek> roast: Test non-encodable characters

[15:39] <dalek> roast: review: https://github.com/perl6/roast/commit/d6712a919f

[15:39] <dalek> roast: c9eab1a | jnthn++ | S32-str/encode.t:

[15:39] <dalek> roast: Merge pull request #76 from ilmari/encode-replacement

[15:39] <dalek> roast: 

[15:39] <dalek> roast: Test non-encodable characters

[15:39] <dalek> roast: review: https://github.com/perl6/roast/commit/c9eab1adb8

[15:39] <ilmari> couldn't test that that actually worked, as rakudo-jvm wouldn't build for me

[15:40] <jnthn> All merged, I think :)

[15:41] <BooK> so the other day in a bar, after quite a few beers, I made the following observation to ab5tract_:

[15:41] <BooK> Only perl can parse Perl, but of course Perl6 can parse Perl6.

[15:41] <BooK> does that make sense?

[15:42] *** _mg_ left
[15:42] <BooK> or am I misunderstanding the power of Perl6?

[15:42] <RabidGravy> well in the sense that the Perl6 grammar engine does parse Perl6 yes

[15:42] <BooK> RabidGravy: yes, that's what I meant

[15:43] <RabidGravy> Yay!

[15:43] <BooK> writing PPI in Perl6, or rather anything that depends on PPI is much simpler in Perl6

[15:43] <RabidGravy> BooK++

[15:43] <JimmyZ> m: use nqp; nqp::say(unbox_s(Str));

[15:43] <camelia> rakudo-moar 8b6077: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Y5thaxkCrA␤Undeclared routine:␤    unbox_s used at line 1␤␤»

[15:44] <JimmyZ> m: use nqp; nqp::say(nqp::unbox_s(Str));

[15:44] <camelia> rakudo-moar 8b6077: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/aQHYe2f8e8:1␤␤»

[15:44] <BooK> RabidGravy: that's a very private joke, since you not only have to know the difference betweem PERL and Perl, but also between perl and Perl :-)

[15:44] <JimmyZ> ilmari: I saw you code trying to unboxs Str 

[15:44] <jnthn> ilmari: I took care of RT #123673

[15:44] <ilmari> JimmyZ: no, note the "if $replacement.defined"

[15:44] *** g4 left
[15:45] <ilmari> m: say Str.defined

[15:45] <camelia> rakudo-moar 8b6077: OUTPUT«False␤»

[15:45] <JimmyZ> oh, missed it ..

[15:45] <RabidGravy> what about "PeRl" eh? eh?

[15:45] <jnthn> There's one more off the xmas list :)

[15:45] <RabidGravy> everyone++ # "they're getting there"

[15:46] <JimmyZ> ilmari++ # 1 off the xmas list 

[15:47] <mrf> #perl6++ # You are all awesome people

[15:47] <ilmari> JimmyZ: and I haven't even written my first perl6 program yet :-P

[15:47] <ilmari> hacking on the implementation is more fun... or something

[15:48] <jnthn> ilmari: Though since the implementation is partly in Perl 6, you have at this point written some Perl 6 ;)

[15:48] <ilmari> jnthn: true, but nothing that qualifies as "a program"

[15:48] <JimmyZ> the core setting is your first Perl 6 program :P

[15:50] <jnthn> ilmari: True also :)

[15:50] <RabidGravy> ilmari, I've got a list if you want to play a long at home ;-)

[15:50] * mrf has apparently now written more NQP than Perl6 :D

[15:51] *** xpen joined
[15:51] *** khw joined
[15:53] <arnsholt> mrf: The biggest part of my contributions to the Perl 6 project have involved writing C code =)

[15:53] <arnsholt> -- 

[15:53] <mrf> arnsholt: :D

[15:53] <JimmyZ> andreoss: me too ..

[15:53] <arnsholt> Oh, and some Java code

[15:53] <JimmyZ> arnsholt: ^^

[15:54] * jnthn isn't sure what language he's written most of for Perl 6 :)

[15:55] *** tokuhiro_ joined
[15:55] <jnthn> I'm pretty sure it's not Java, even if it felt like it at the time :P

[15:55] <arnsholt> =D

[15:56] <arnsholt> Yeah, I'm pretty sure you've written more C. At least if we include MoarVM (which we should)

[15:56] *** xpen left
[15:56] <arnsholt> And large chunks of my C code wouldn't have happened without your C code as a model, so there's that too =)

[15:56] <JimmyZ> repr in parrot and moarvm !

[15:57] <jnthn> yeah, MoarVM may push it towards "more C"

[15:58] <arnsholt> Although if we ask GitHub, it'll probably reply Parrot bytecode =)

[15:59] <nine> jnthn: I've had a nice discussion with lizmat++ about my use lib issue yesterday. The only way forward that I see is not precompiling modules loaded after a use lib. Or to be more precise: after a second PrecompilationStore object is created.

[15:59] *** tokuhiro_ left
[15:59] <zengargoyle> hrm, Linenoise failed during the panda auto update step thing from `rakudobrew build moar`

[15:59] <jnthn> nine: Yes, that seems reasonable; I was mostly wondering "is that sufficient"

[16:00] <nine> jnthn: as it is now, even a use lib done after a use lib could be a problem since lib is just a module loaded from a repository.

[16:00] <zengargoyle> but installed fine with `panda install Linenoise`

[16:00] <raiph> BooK: http://stackoverflow.com/a/5923181/1077672

[16:00] <nine> jnthn: just to be sure, you did intend for us to automatically precompile on module load?

[16:00] <jnthn> nine: For the FileSystem repo, yes

[16:01] <nine> :)

[16:01] <BooK> raiph: I so wanted to be original, and I'm four years behind :-)

[16:01] <masak> BooK: many years ago, Adam Kennedy showed up on #perl6 and said that PPI would be lots *harder* in Perl 6 than in Perl. bordering on impossible.

[16:01] <jnthn> nine: So that at development time you can just make test and know that at most you'll only pre-comp your module once for the first test.

[16:01] <masak> BooK: it would be interesting to find that backlog and talk about it.

[16:01] *** advwp left
[16:02] <jnthn> nine: Until you change things and do another test run, of course :)

[16:02] <nine> Do we have any file locking capabilities yet?

[16:02] <BooK> masak: is there a search tool for the irc logs?

[16:02] *** ilbelkyr_ is now known as ilbelkyr

[16:03] <jnthn> nine: They're certainly impl'd in Moar, not sure if exposed. Can do so if you need 'em.

[16:03] *** ely-se left
[16:03] <BooK> masak: I don't know Perl6 enough to have an informed opinion

[16:03] *** advwp joined
[16:03] <pmurias> masak: Perl 6 is really oriented towards using the Perl 6 compiler for what PPI does

[16:04] <masak> pmurias: agreed.

[16:05] <zengargoyle> panda issue? rakudobrew issue? https://gist.github.com/zengargoyle/2a1ca035ebe1ed4b3547

[16:05] <masak> pmurias: I'm also running into some interesting issues (in 007) where sometimes you want macro-expanded Qtrees (like when you're compiling/manipulating the program before runtime), and sometimes macro-unexpanded ones (like when you're linting/refactoring it)

[16:06] <colomon> Is qq:to/END/ supposed to convert tabs to spaces?  It’s very inconvenient for my $work script….

[16:06] <ugexe> zengargoyle: i think that only happens when its reinstalls line noise after updating rakudo

[16:06] <pmurias> masak: for some things you might even want some even more "expanded" version like and iternal desugared/SSA/etc. form

[16:07] <jnthn> colomon: There's an xmas RT complaining about that, iirc

[16:07] <zengargoyle> yeah, but it sorta breaks the rest of the re-install automagic

[16:07] <colomon> jnthn: If someone can find the RT for me, I’m willing to take a look at fixing the code…

[16:07] <zengargoyle> that is all the modules that happen to be after Linenoise don't get re-installed

[16:07] <ugexe> it would seem linenoise is leaving panda in a odd directory

[16:08] *** z448 joined
[16:08] *** nightfrog left
[16:08] <masak> pmurias: yes. I keep coming back to how useful it would be for create-your-own-control-flow hacking if there was a toolkit that gave access to and control over basic blocks.

[16:08] *** z8 left
[16:09] <jnthn> colomon: https://rt.perl.org/Ticket/Display.html?id=120895

[16:09] *** nightfrog joined
[16:10] <colomon> jnthn++

[16:10] <masak> 'night, #perl6

[16:10] <RabidGravy> zengargoyle, it's a panda issue I actually fixed it with https://github.com/tadzik/panda/pull/221 but I keep forgetting about it

[16:10] <colomon> “Which is bad for e.g. Makefiles.” # exactly my issue

[16:10] <jnthn> 'night masak

[16:10] <zengargoyle> ah, ok then. :P

[16:11] <mrf> ugexe: I have a whole bunch of grammar tests for some of your Grammar::HTML grammar stuff. Will see if I can get them into a fork over the weekend for you if your interested.

[16:11] <raiph> BooK: there are two searchers ( google and custom search engine) linked at top/bottom of the perlgeek.de web irclog pages (eg http://irclog.perlgeek.de/perl6/)

[16:12] <RabidGravy> If someone who has a commit bit there would care to merge it, that would be cool (I don't)

[16:13] <arnsholt> colomon: Sometimes, I wonder if Makefiles aren't the bane of my existence. Still, such a nice tool when it cooperates

[16:13] <ugexe> mrf: sure!

[16:14] <colomon> arnsholt: eh, they’re okay when you make nice Perl 6 scripts to generate them.  ;)

[16:14] <mrf> ugexe: I have been working on moveing most of teh IETF grammars into a seperate repo for easier use by others. But writting tests is causing it to take longer than I wanted so I am going to port the tests back so that you have them in the meantime.

[16:14] *** nightfrog left
[16:14] *** pierrot joined
[16:15] *** pierrot_ left
[16:16] <arnsholt> colomon: I have some long handwritten one. Looks like the longest one is 177 lines long =)

[16:16] <RabidGravy> speaking of generating stuff, which of the many and various template modules would be the best for generating Perl 6 code (basically class definitions)

[16:16] * arnsholt <3 find

[16:16] <nine> jnthn: file locking would help :) I've already run into problems with parallel test runs precomping the same file. With a bit of handwaving on your side, I may be able to expose them myself.

[16:16] * TimToady is not entirely sure that breaking the language definition to allow JVM to "catch up" is really progress towards Christmas...

[16:16] *** nightfrog joined
[16:16] <TimToady> jnthn: if we precompile a module on Unix and then use it on Windows, it'll have the wrong \n

[16:17] <arnsholt> No wait, 158. The 177 one isn't mine

[16:17] <ugexe> mrf: cool. i know how draining writing the tests for all those can get

[16:17] <BooK> masak, RabidGravy: http://irclog.perlgeek.de/perl6/search/?nick=Alias&q=PPI is not very conclusive :-)

[16:18] <mrf> ugexe: yeah. I may have to make some adjustments as well based on the \r\n changes.

[16:18] <BooK> ok, I should have used Alias_, that gives more results

[16:18] * TimToady woke up grumpy, apparently...

[16:18] <mrf> ugexe: I quite enjoy writting tests so its not a big thing

[16:18] <ugexe> mrf: i dont think so. when i fixed it before i didn't have to change the tests

[16:19] <RabidGravy> TimToady, grumpy is fine

[16:19] *** dwarring left
[16:19] *** z448 left
[16:20] <TimToady> but I'm sneezy too

[16:20] <[Coke]> TimToady: are you referring to the patch that lets the jvm build again, or something else?

[16:20] <mrf> ugexe: hmm. Ok. My CRLF tests are all failing at the mo. I don't know whether i need to change the tests or the Grammar. Will runn them against your updated ABNF grammar and see if they pass there.

[16:20] <TimToady> [Coke]: yes, though admittedly it's a very minor regression

[16:20] <mrf> TimToady: much more and you'll have a full set

[16:20] <[Coke]> well, it's no impact on moar.

[16:20] <[Coke]> and "being able to build jvm" is a step up from the previous state, which was "horribly broken for days"

[16:21] <TimToady> true nuff, just grumbling

[16:21] <jnthn> TimToady: Since pre-compilation can only reasonably be used as cache anyway, that's not really a problem. Unless you think we'll be able to do better at that in the future, but I'm unconvinced given the meta-programming stuff we want to support.

[16:22] <[Coke]> hokay. My goals eventually include "no more #?if in rakudo source, should all be hidden in nqp" and "tickets for everything where jvm is cheating or currently fudged."

[16:22] <TimToady> fair enough

[16:22] * TimToady is also a bit dopey yet

[16:22] <JimmyZ> what about packing to exe code ...

[16:23] <RabidGravy> TimToady, it's send Snow White down the shops and get something to sort that out then  ;-)

[16:23] *** advwp left
[16:23] *** diana_olhovik_ left
[16:24] <JimmyZ> I mwan packing .moarvm code to .exe code

[16:24] <JimmyZ> *mean

[16:24] <jnthn> JimmyZ: That'll work fine, but again, if it's a .exe you know precisely what platform you're on :)

[16:24] <BooK> masak: http://irclog.perlgeek.de/perl6/2012-02-03 # some of the arguments are there and I seem to understand what Alias_ says :-)

[16:24] <JimmyZ> oh, yeah. I forgot it 

[16:29] <pmurias> TimToady: getting stuff to build at all seem like a very good first step for bringing stuff up to spec ;)

[16:29] *** z8 joined
[16:30] <TimToady> oh, what would you know about that?  ;)

[16:31] <TimToady> pmurias++ on recent progress, btw

[16:32] *** jkva left
[16:32] <BooK> now I'm stuck in the backlog of February 2012-02-03

[16:32] <BooK> I guess I have to read it all up to now to find out if TimToady ever wrote the talk about "developing a language when your raw materials are hares, tortoises, Achilles, and Zeno."

[16:32] <AlexDaniel> Hey! It seems like #126561 is a duplicate of #126037, perhaps it should be marked as such.

[16:33] <[Coke]> AlexDaniel: checking...

[16:33] <TimToady> BooK: we didn't rename Perl to Gloop, as a datapoint

[16:34] <[Coke]> they're related anyway. I'll link them but not merge them.

[16:35] <AlexDaniel> [Coke]: I'd say they are identical, but feel free to do whatever you like

[16:35] *** softmoth_ joined
[16:36] *** softmoth left
[16:38] <andreoss> what do i use to trace code? something like perl -d:Trace? 

[16:39] <BooK> I'm looking at https://github.com/moritz/json/blob/master/lib/JSON/Tiny.pm#L59 and I wonder if that gives a useful message about where the parsing stopped (I think not, but I haven't tried the actual code)

[16:40] <moritz> BooK: ~ used to throw exceptioins when it couldn't find the closing quoting character

[16:40] <moritz> BooK: it doesn't anymore, so I guess the error messages now are pretty shitty

[16:41] <jnthn> m: grammar G { token TOP { '(' ~ ')' a } }; G.parse('(a')

[16:41] <camelia> rakudo-moar 76ee2d: ( no output )

[16:41] <jnthn> Ah, forgot we decided not to have it do so in grammars by default...

[16:42] *** cognominal joined
[16:42] <moritz> star: use JSON; say from-json('{')

[16:42] <camelia> star-m 2015.09: OUTPUT«===SORRY!===␤Could not find JSON in any of:␤  file#/home/camelia/.perl6/2015.09/lib␤  inst#/home/camelia/.perl6/2015.09␤  file#/home/camelia/star-2015.09/share/perl6/lib␤  file#/home/camelia/star-2015.09/share/perl6/vendor/lib␤  file#/home/camelia/…»

[16:42] <moritz> star: use JSON::Tiny; say from-json('{')

[16:42] <camelia> star-m 2015.09: OUTPUT«Input (1 characters) is not a valid JSON string␤  in sub from-json at /home/camelia/star-2015.09/share/perl6/lib/JSON/Tiny.pm:59␤  in block <unit> at /tmp/XLRKnNKdfb:1␤␤»

[16:42] <jnthn> m: grammar G { token TOP { '(' ~ ')' a }; method FAILGOAL(|) { die "Parse fail near " ~ self.pos } }; G.parse('(a')

[16:42] <camelia> rakudo-moar 76ee2d: OUTPUT«Parse fail near 2␤  in method FAILGOAL at /tmp/pX4JSI_f3n:1␤  in regex TOP at /tmp/pX4JSI_f3n:1␤  in block <unit> at /tmp/pX4JSI_f3n:1␤␤»

[16:44] <moritz> m: grammar G { token TOP { '(' ~ ')' a }; method FAILGOAL(|c) { say c.perl } }; G.parse('(a')

[16:44] <camelia> rakudo-moar 76ee2d: OUTPUT«\("')' ")␤P6opaque: no such attribute '$!pos'␤  in regex TOP at /tmp/qFWRsXxnYo:1␤  in block <unit> at /tmp/qFWRsXxnYo:1␤␤»

[16:44] <BooK> so someone needs to write a FAILGOAL method for JSON::Tiny::Grammar?

[16:44] <TimToady> we should have a parse option that reports highwater on failure to parse

[16:44] <moritz> BooK: aye

[16:44] <BooK> well, I have to start somewhere if I want to actually learn Perl6

[16:44] *** rurban left
[16:44] <moritz> BooK: preferably throwing a customer error class

[16:45] <BooK> the X::JSON::Tiny::Invalid class?

[16:46] <moritz> BooK: yes; I forgot it existed :-)

[16:48] *** zakharyas left
[16:48] *** z8 left
[16:50] *** advwp joined
[16:53] *** Oatmeal joined
[16:53] <BooK> moritz: should it work with moar?

[16:58] <moritz> BooK: what "it"?

[17:00] <moritz> JSON::Tiny should certainly work with rakudo-moar

[17:00] <mr_ron> m: use newline :crlf; given open 'abc.txt', :w {.say: 'abc'; .close}; dd slurp 'abc.txt'

[17:00] <camelia> rakudo-moar 76ee2d: OUTPUT«open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub open at src/RESTRICTED.setting:9␤  in block <unit> at /tmp/eBEf5IHeyJ:1␤␤»

[17:01] <BooK> so this is unexpected: Unhandled exception: Missing or wrong version of dependency 'gen/moar/stage2/QRegex.nqp' 

[17:01] <moritz> BooK: it means that your rakudo installation is borked

[17:01] <BooK> weird

[17:02] <TimToady> usually we only see that while make is running

[17:02] <TimToady> but that's an nqp error

[17:02] <moritz> BooK: or there's an old, precompiled version of JSON::Tiny somewhere that depends on an old rakudo version which you have since overwritten

[17:02] *** skids left
[17:02] *** sprocket joined
[17:03] <BooK> ok, will dig deeper. thanks

[17:04] *** skids joined
[17:06] *** xfix joined
[17:07] <sprocket> hello again, p6

[17:07] <sprocket> regarding this bug i had submitted: https://rt.perl.org/Public/Bug/Display.html?id=126560

[17:07] <sprocket> if i just go ahead and patch the POSIX module to fix up $*USER and $*GROUP as liz suggested, it that good by all?

[17:10] <RabidGravy> sprocket, works for me (I'd been thinking about something like this previously.)

[17:10] <RabidGravy> BTW, sprocket++ thanks for the RPi module

[17:10] <sprocket> i suppose my question is more, “if $*USER/$*GROUP currently rely on running `id` to get get uid/gid, should it be fixed in rakudo instead to use getuid/getgid"

[17:11] <sprocket> RabidGravy: no prob - it was fun to get it up and going, even if it’s painfully slow to run :)

[17:11] <sprocket> i’ll be diving into profiling next to see where things can be sped up

[17:12] <RabidGravy> as regarding the default implementation of $*USER, I think it would want to go in NQP if it's a NativeCall

[17:12] <RabidGravy> or so I think the conversation went last time it was discussed

[17:13] <sprocket> RabidGravy: i would agree - do you know when it was last discussed?  i’ll go back and take a look

[17:14] <RabidGravy> "more than two months ago"

[17:14] <ilmari> m: .version.say for $*PERL.compiler, $*VM

[17:14] <camelia> rakudo-moar 76ee2d: OUTPUT«v2015.10.208.g.76.ee.2.d.8␤v2015.10.61.g.624.d.504␤»

[17:14] <sprocket> hah! ok :)

[17:14] * ilmari is amused how it breaks the git describe output into components

[17:14] <RabidGravy> sprocket, if you blame the file in question, I think I made a patch around the ssame time

[17:15] <sprocket> RabidGravy: will do - i’ll check out the history

[17:15] <sprocket> before i made the effort to go and patch it against nqp, just wanted to make sure it’d fly

[17:16] <RabidGravy> I'm not in the cross platform zealot camp, but if you could get some input from a windows kind of person it might help ;-)

[17:17] <sprocket> at the moment, it looks like it doesn’t work on windows (i think?) anyways, but that would be good, yes )

[17:18] <RabidGravy> I'm not going to find and then boot the only windows computer in the house to find out ;-)

[17:19] *** ab6tract joined
[17:19] <sprocket> i’ll track someone down, or set up a VM :)

[17:20] *** telex left
[17:20] <sprocket> on the subject of profiling code, is there an existing module/program i can use?

[17:21] <Skarsnik> --profile ?

[17:22] <sprocket> Skarsnik: thanks - still relatively new to the p6 world 

[17:22] <jdv79> has anyone written a deep clone with a "twiddles"?

[17:22] *** telex joined
[17:23] <Skarsnik> sprocket, well it's just provide stats on time spend somewhere and such. I don't know if it's totaly what you want x)

[17:23] <sprocket> skarsnik: it’d be a start - i’ll take a look now

[17:23] <jdv79> doing that on a largely immutable obj tree turns out to not be simple.

[17:23] <jdv79> at least as far as i've gleaned

[17:24] *** z8 joined
[17:24] <lucs> Question: http://fpaste.scsys.co.uk/501088

[17:25] <andreoss> how do i pass optional un-named parametr to MAIN? 

[17:25] <Skarsnik> I will blame [$_]

[17:26] <lucs> Skarsnik: Similar result with that line commented out.

[17:27] <andreoss> anything but *@a?

[17:28] <Skarsnik> I don't really know lucs, I assume line 9 is the substitution?

[17:28] <lucs> Skarsnik: Yes.

[17:28] *** jkva joined
[17:28] <zengargoyle> is there any hope for the REPL to just break to the prompt on ^C vs complete exit?

[17:30] *** jkva left
[17:32] <zengargoyle> and/or is there some option to build with readline or some other library that keeps history?

[17:32] <lucs> Skarsnik: Lines 1 and 2 are actually:  "#!/opt/prj/l/perl6/.rakudobrew/bin/perl6\n\n"

[17:33] *** diana_olhovik joined
[17:33] * zengargoyle yet again golfing something that scrolled out of screen buffer and needed ^C and then is gone :/

[17:35] *** uruwi joined
[17:35] <[Coke]> http://docs.perl6.org/type/Enum is showing "sub exit" as a routine supplied by any.

[17:37] <[Coke]> m: enum q <1 2 3>; say q.invert

[17:38] <camelia> rakudo-moar 76ee2d: OUTPUT«Use of uninitialized value of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/HvC9hW1f4P:1␤Cannot call invert(q); none of these signatures match:␤  in block <unit> at…»

[17:38] <[Coke]> invert is also listed as an Enum method. I assume that predates the move to enum being immutable pairs?

[17:40] <[Coke]> trying to figure out how to answer the perl6-users question of how to map a string input from the user to the enum value of the same name (without an EVAL, I hope)

[17:41] <lucs> A bug to report perhaps?: http://fpaste.scsys.co.uk/501094

[17:44] <lucs> (and my code would be happier with some kind of work-around :/ )

[17:44] *** ab6tract left
[17:47] *** ^elyse^ joined
[17:49] <jdv79> deep clone

[17:49] *** z8 left
[17:50] *** pmurias left
[17:52] <andreoss> where the features of MAIN are described?

[17:52] <andreoss> only S06?

[17:52] <[Coke]> andreoss: http://design.perl6.org/S06.html#Declaring_a_MAIN_subroutine is probably the best at the moment.

[17:53] <ilmari> all these proto method foo (|) {*} in the setting means that misspelled named parameters silently get swallowed

[17:53] <ilmari> is that intentional?

[17:53] <andreoss> i wonder if i could have unnamed optional arguments to MAIN?

[17:54] <ilmari> m: "å".encode("ascii")

[17:54] <camelia> rakudo-moar 76ee2d: OUTPUT«Error encoding ASCII string: could not encode codepoint 229␤  in block <unit> at /tmp/3Yh16iKEcu:1␤␤»

[17:54] <ilmari> m: "å".encode("ascii", :replacment)

[17:54] <camelia> rakudo-moar 76ee2d: OUTPUT«Error encoding ASCII string: could not encode codepoint 229␤  in block <unit> at /tmp/3mv5E6Zwlr:1␤␤»

[17:54] <ilmari> m: "å".encode("ascii", :replacement).say

[17:54] <camelia> rakudo-moar 76ee2d: OUTPUT«Blob[uint8]:0x<3f>␤»

[17:55] *** rindolf left
[17:56] <[Coke]> jnthn: did you see the followup comment on 126553 ?

[17:56] *** tokuhiro_ joined
[17:56] *** mr_ron left
[17:57] <[Coke]> andreoss: first, see if you can do it on a normal sub.

[17:58] <[Coke]> but: why would you want that?

[17:58] <jnthn> [Coke]: I don't see anything added to https://rt.perl.org/Ticket/Display.html?id=126553 ?

[17:59] *** colomon left
[18:01] *** rindolf joined
[18:01] *** tokuhiro_ left
[18:04] *** lizmat left
[18:04] <[Coke]> jnthn: huh, it's not on the ticket itself. there was an email reply from Taiki Kawakami

[18:05] <[Coke]> ... oh. nevermind.

[18:05] <[Coke]> It took his email that long to make it through the spam filters.

[18:06] * [Coke] derps.

[18:07] *** diana_olhovik left
[18:12] *** mr_ron joined
[18:15] <lucs> Please, am I misusing $0 or something, or is this a bug?: http://fpaste.scsys.co.uk/501094

[18:16] *** duncan_dmg left
[18:19] <AlexDaniel> lucs: it works for me

[18:19] <lucs> :(

[18:19] <AlexDaniel> lucs: what's your version of rakudo?

[18:19] <lucs> Hmm... How can I tell?

[18:20] <[Coke]> perl6 --version

[18:20] <AlexDaniel> lucs: well, it seems like you are using rakudobrew. When was the last time I built it?

[18:20] <lucs> This is perl6 version 2015.09-195-ge5a266b built on MoarVM version 2015.09-39-g1434283

[18:20] <AlexDaniel> or that, yes

[18:20] <AlexDaniel> interesting. That's not too old

[18:22] <AlexDaniel> m: for 1 .. 3 { say "[$_]"; my $s = "123"; say "bef <$s>"; $s ~~ s/ (\d+) /$0$0/; say "aft <$s>"; }

[18:22] <camelia> rakudo-moar 76ee2d: OUTPUT«[1]␤bef <123>␤aft <123123>␤[2]␤bef <123>␤aft <123123>␤[3]␤bef <123>␤aft <123123>␤»

[18:22] <lucs> Can I somehow just upgrade my current installation, or do I need to reinstall from scratch?

[18:23] <AlexDaniel> lucs: ./rakudobrew build moar

[18:23] <AlexDaniel> lucs: which is exactly what you did the first time

[18:23] *** uruwi left
[18:24] <lucs> AlexDaniel: Thanks, trying...

[18:24] *** z8 joined
[18:24] <[Coke]> m: say so "\r\n" ~~ /[";"|"\r\n"]/

[18:24] <camelia> rakudo-moar 76ee2d: OUTPUT«False␤»

[18:25] <[Coke]> m: say so "\r\n" ~~ /"\r\n"/

[18:25] <camelia> rakudo-moar 76ee2d: OUTPUT«True␤»

[18:25] *** z8 left
[18:25] <TimToady> rakudobrew --help shows that build has options [tag|branch|sha-1]

[18:25] <[Coke]> m: say so "\r\n" ~~ /";"|"\r\n"/

[18:25] <camelia> rakudo-moar 76ee2d: OUTPUT«False␤»

[18:25] <[Coke]> jnthn: ^^ RT #126573

[18:25] *** lizmat joined
[18:26] <TimToady> m: say so "\r\n" ~~ /";"||"\r\n"/

[18:26] <camelia> rakudo-moar 76ee2d: OUTPUT«True␤»

[18:26] <TimToady> ltm bug

[18:26] *** colomon joined
[18:26] <TimToady> well, nfa

[18:27] <jdv79> any more acronyms?

[18:27] <TimToady> ama?

[18:27] <jnthn> .oO( Needs Fixing, Argh )

[18:27] <jnthn> [Coke]: "next week" :)

[18:27] <AlexDaniel> jdv79: perhaps you can count his nickname as one?

[18:28] <lucs> AlexDaniel: The rebuild fixed it. Thanks!

[18:28] <AlexDaniel> lucs: Yeah! Great!

[18:29] <AlexDaniel> lucs: though recently there were some changes to \r\n handling. There is a chance that you will run into some issues

[18:29] <lucs> I hadn't realized how easy it was to keep my version current.

[18:29] <lucs> AlexDaniel: Okay, thanks for the heads up.

[18:30] <[Coke]> m: endprotoent

[18:30] <camelia> rakudo-moar 76ee2d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XIY4c3EZgZ␤Undeclared routine:␤    endprotoent used at line 1␤␤»

[18:30] <AlexDaniel> lucs: if you run into some, then perhaps you can downgrade to 2015.10

[18:30] <AlexDaniel> lucs: it is newer than what you had but no \r\n stuff yet :)

[18:30] <[Coke]> .tell SZABGAB http://cpansearch.perl.org/src/SZABGAB/Syntax-Highlight-Engine-Kate-0.10/lib/Syntax/Highlight/Engine/Kate/Perl6.pm looks more like a Perl 5 highlighter, no?

[18:30] <yoleaux> [Coke]: I'll pass your message to SZABGAB.

[18:32] <TimToady> lizmat: the current split needles algo cannot be made lazy; did you consider doing a parallel search rather than serial?  an additional advantage is that you could examine each character position only once, which might be faster

[18:33] <dalek> specs: 05f46f7 | (Geoffrey Broadwell)++ | S29-functions.pod:

[18:33] <dalek> specs: Fix repeated 'will be thrown'

[18:33] <dalek> specs: review: https://github.com/perl6/specs/commit/05f46f7384

[18:33] <TimToady> also, what's the story on needle overlap?

[18:34] <lucs> AlexDaniel: Using linux only, I'll probably avoid \r\n problems, but, noted anyway :)

[18:35] * lucs & # Lunch...

[18:36] <andreoss> [Coke]: on normal subs i can do it with multies

[18:37] <[Coke]> you can multi MAIN

[18:37] <andreoss> with multi MAIN help message woudn't be as nice

[18:40] *** sufrostico left
[18:47] <japhb> [Coke]: In 8b6077968b361faea5bdeffe4d90b5619ecf6c80, did you intend to delete the line setting $!nl-out, or just include it in the #?if !jvm guard?

[18:48] *** _mg_ joined
[18:51] *** zakharyas joined
[18:51] <[Coke]> Didn't mean to delete anything.

[18:52] <[Coke]> double checking my mischief...

[18:52] *** TimToady left
[18:52] <[Coke]> dammit. good catch. fixing.

[18:52] *** pippo joined
[18:52] *** yqt joined
[18:53] <dalek> rakudo/nom: ba34287 | coke++ | src/core/IO/Handle.pm:

[18:53] <dalek> rakudo/nom: Add line accidentally deleted during jvm triage.

[18:53] <dalek> rakudo/nom: 

[18:53] <dalek> rakudo/nom: japhb++

[18:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba34287091

[18:53] <[Coke]> ^^

[18:53] <japhb> :-)

[18:54] *** TimToady joined
[18:54] *** leont joined
[18:54] <[Coke]> thanks for the eyeballs

[18:54] <japhb> np

[18:56] *** virtualsue left
[18:57] *** andreoss left
[18:57] *** baest_ joined
[18:57] *** Peter_R joined
[18:58] *** brrt left
[18:59] *** baest left
[19:02] *** baest_ left
[19:02] *** baest joined
[19:02] *** baest left
[19:07] <mr_ron> any windows programmers out there?  I claim that under windows .say always outputs \r\n at the end of line regardless of 'use newline'.  It looks like a possible bug.

[19:07] <mr_ron> m: given open 'abc.txt', :w {.say: 'abc'; .close}; dd slurp 'abc.txt'

[19:07] <camelia> rakudo-moar 76ee2d: OUTPUT«open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub open at src/RESTRICTED.setting:9␤  in block <unit> at /tmp/25LeKhF_aK:1␤␤»

[19:08] <mr_ron> If you can run it under windows the dd outputs Str $var = "abc\r\n"

[19:08] <mr_ron> it doesn't seem to do it under linux

[19:08] <mr_ron> should say always output \r\n as a line terminator under windows?

[19:14] <mr_ron> Should the "say" routine always output \r\n as a final terminator under windows???

[19:14] <RabidGravy> well that is the line separator on windows yes

[19:16] <mr_ron> m: use newline :lf; given open 'abc.txt', :w {.say: 'abc'; .close}; dd slurp 'abc.txt'; # say finishes with \r\n on windows here too ...

[19:16] <camelia> rakudo-moar ba3428: OUTPUT«open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub open at src/RESTRICTED.setting:9␤  in block <unit> at /tmp/g_r6NXopY1:1␤␤»

[19:16] <jnthn> open should respect newline when picking nl-out, but doesn't yet

[19:21] <jnthn> But yes, \r\n is the correct default

[19:23] *** ChoHag left
[19:24] *** ChoHag joined
[19:24] <mr_ron> I think I understand.  In my first example without use newline the behavior was ok but in my second example with use newline :lf the behavior is off.

[19:27] *** spider-mario joined
[19:29] <mr_ron> Sorry about not giving a good example.  I was having trouble installing panda on windows because it uses .say to write a json file with \n line ends and later dies on the \r\n the .say adds at the end.  Still working on problem including why \r\n seems to choke JSON::Fast.

[19:30] <lizmat> .botsnack

[19:30] <yoleaux> :D

[19:30] <RabidGravy> yeah, I'd say it's the JSON parser - don't think it should care

[19:31] <lizmat> TimToady: yes, I considered that, but felt that *that* would be trying to rewrite grammars

[19:31] <lizmat> I mean, if you want NFA's, you should give it a regex  :-)

[19:31] *** _mg_ left
[19:42] *** ^elyse^ left
[19:47] <AlexDaniel> I wonder, is there any way to print random unicode symbol but excluding most of the boring stuff (letters, kanji, combiners and other stuff)? :)

[19:48] <AlexDaniel> m: say (0..0xFFF0).chrs.join('') ~~ m:g/<:NumericValue({+$_ > 0})>+/ # that question reminds me this

[19:48] <camelia> rakudo-moar ba3428: OUTPUT«(｢123456789｣ ｢²³｣ ｢¹｣ ｢¼½¾｣ ｢١٢٣٤٥٦٧٨٩｣ ｢۱۲۳۴۵۶۷۸۹｣ ｢߁߂߃߄߅߆߇߈߉｣ ｢१२३४५६७८९｣ ｢১২৩৪৫৬৭৮৯｣ ｢৴৵৶৷৸৹｣ ｢੧੨੩੪੫੬੭੮੯ੰੱ…»

[19:48] *** nick25 joined
[19:50] *** rindolf left
[19:50] *** kmel joined
[19:52] *** nick25 left
[19:52] <kmel> m: 'salut les filles'.say;

[19:52] <camelia> rakudo-moar ba3428: OUTPUT«salut les filles␤»

[19:52] <kmel> ;0

[19:56] *** Begi1115 joined
[20:00] *** espadrine left
[20:02] <kmel> where's everyone?

[20:02] <kmel> helloooooooo

[20:02] <kmel> *waves hand*

[20:03] <bartolin_> o/ hello kmel

[20:03] <AlexDaniel> o/

[20:04] <kmel> hi bartolin_ AlexDaniel

[20:07] <dalek> roast: 818ec3d | usev6++ | S02-names/pseudo.t:

[20:07] <dalek> roast: Tests for RT #126523 do not die on Moar anymore

[20:07] <dalek> roast: review: https://github.com/perl6/roast/commit/818ec3df9e

[20:12] *** raiph left
[20:15] <RabidGravy> Hmm

[20:17] <RabidGravy> if I have a module that exports some subroutine, and I use that module in another module can I simply re-export the subroutine from the second module?

[20:22] <lizmat> not sure whether the "is export" trait is transitive

[20:24] *** _mg_ joined
[20:26] *** darutoko left
[20:26] <dalek> rakudo/nom: d273e91 | ugexe++ | src/core/Buf.pm:

[20:26] <dalek> rakudo/nom: Fix `$Blob1 ~= $Blob2` on jvm

[20:26] <dalek> rakudo/nom: 

[20:26] <dalek> rakudo/nom: Also fixes `IO::Socket::INET` on jvm

[20:26] <dalek> rakudo/nom: 

[20:26] <dalek> rakudo/nom: Resolves RT126529

[20:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d273e916d6

[20:26] <dalek> rakudo/nom: 5fda5d2 | lizmat++ | src/core/Buf.pm:

[20:26] <dalek> rakudo/nom: Merge pull request #577 from ugexe/patch-7

[20:26] <dalek> rakudo/nom: 

[20:26] <dalek> rakudo/nom: Fix `$Blob1 ~= $Blob2` on jvm

[20:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5fda5d22aa

[20:30] *** azawawi joined
[20:30] <azawawi> hi

[20:31] *** nightfrog is now known as culb

[20:31] <stmuk> jvm?

[20:31] <stmuk> :O

[20:32] *** azawawi left
[20:32] <geekosaur> m-j: "hi".say

[20:33] <geekosaur> whoops

[20:33] <timotimo> hello everyone

[20:33] <geekosaur> r-j: "hi".say

[20:33] <camelia> rakudo-jvm ba3428: OUTPUT«hi␤»

[20:33] * geekosaur derp

[20:33] *** culb is now known as MiserySignals

[20:33] *** MiserySignals is now known as culb

[20:35] <timotimo> let's port moar to the jvm

[20:38] *** abaugher left
[20:39] *** abaugher joined
[20:39] *** firstdayonthejob joined
[20:40] * RabidGravy decides to put that aside and document

[20:41] *** abaugher left
[20:42] *** kaare_ left
[20:42] *** abaugher joined
[20:45] *** Erendis42 joined
[20:50] *** sufrostico joined
[20:50] *** sufrosti1o joined
[20:57] *** eliasr left
[21:01] *** ZoffixW joined
[21:01] <ZoffixW> moritz, modules.perl.org builds fine on my 5.22 install. IO::Socket::SSL might be the cause, but it is listed in Build.PL, so I would think it's installed.

[21:03] <Erendis42> i love you too, honey

[21:03] <diakopter> !!

[21:03] *** Erendis42 left
[21:03] <ZoffixW> 0.0

[21:08] *** _mg_ left
[21:08] <geekosaur> gesundheit

[21:10] *** softmoth_ left
[21:11] *** woolfy left
[21:12] *** leont left
[21:12] * ZoffixW starts commute home, but will read the log 

[21:12] *** ZoffixW left
[21:19] *** ^elyse^ joined
[21:19] <moritz> ZoffixW: ah, my bad; I simply ran the updater and waited for error messages

[21:19] <moritz> instead of checking Build.PL

[21:19] <moritz> so yes, it might be IO::Socket::SSL missing

[21:28] <ugexe> r: say "a=b".split(/"="/,2)

[21:28] <camelia> rakudo-jvm ba3428: ( no output )

[21:28] <camelia> ..rakudo-moar 5fda5d: OUTPUT«(a b)␤»

[21:29] <timotimo> r: say "hi"

[21:29] <camelia> rakudo-moar 5fda5d, rakudo-jvm ba3428: OUTPUT«hi␤»

[21:30] *** ^elyse^ left
[21:30] <timotimo> what can come after "say" that'd cause "no output"? there'd be at least a newline, no?

[21:30] <ugexe> its really an unwind exception

[21:30] <timotimo> oh, damn

[21:31] *** xfix left
[21:32] *** Begi1115 left
[21:32] <ugexe> r: my @lines = "key=value","key2=value2"; say @lines>>.split(/"="/, 2);

[21:32] <camelia> rakudo-jvm 5fda5d: OUTPUT«Use of uninitialized value $result of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/tmpfile:1␤Use of uninitialized value $result of type Any in string context␤Any of…»

[21:32] <camelia> ..rakudo-moar 5fda5d: OUTPUT«[(key value) (key2 value2)]␤»

[21:34] <lizmat> ugexe: will look at that now

[21:34] <lizmat> m: "key2=value2".split(/"="/,2).say

[21:34] <camelia> rakudo-moar 5fda5d: OUTPUT«(key2 value2)␤»

[21:36] *** uruwi joined
[21:36] <lizmat> m: ("key2=value2",).split(/"="/,2).say

[21:36] <camelia> rakudo-moar 5fda5d: OUTPUT«(key2 value2)␤»

[21:36] <lizmat> m: ("key2=value2",)>>.split(/"="/,2).say

[21:36] <camelia> rakudo-moar 5fda5d: OUTPUT«((key2 value2))␤»

[21:37] <lizmat> m: ("key=value","key2=value2")>>.split(/"="/,2).say

[21:37] <camelia> rakudo-moar 5fda5d: OUTPUT«((key value) (key2 value2))␤»

[21:37] <lizmat> m: say ("key=value","key2=value2")>>.split(/"="/,2)

[21:37] <camelia> rakudo-moar 5fda5d: OUTPUT«((key value) (key2 value2))␤»

[21:38] <lizmat> m: say (my @ = ("key=value","key2=value2"))>>.split(/"="/,2)

[21:38] <camelia> rakudo-moar 5fda5d: OUTPUT«[(key value) (key2 value2)]␤»

[21:38] <lizmat> ah, it's only on the JVM  :-(

[21:38] <lizmat> j: ("key2=value2",).split(/"="/,2).say

[21:38] <camelia> rakudo-jvm 5fda5d: ( no output )

[21:39] <lizmat> j: say ("key2=value2",).split(/"="/,2)

[21:39] <camelia> rakudo-jvm 5fda5d: ( no output )

[21:39] <lizmat> j: say ("key2=value2",)>>.split(/"="/,2)

[21:39] <camelia> rakudo-jvm 5fda5d: OUTPUT«Use of uninitialized value $result of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/fsucEr9kjf:1␤()␤»

[21:39] <ugexe> i thought it was strange the bare split is an unwind exception but on the hyper it doesnt seem to get thrown

[21:39] <lizmat> so this doesn't have anything to do with split, or does it ?

[21:40] <ugexe> yes, split is an unwind exception

[21:40] *** zakharyas left
[21:40] <lizmat> and why is that ?

[21:40] <ugexe> i dunno

[21:40] *** Oatmeal left
[21:41] <lizmat> well, I'm overhauling split atm to implement :k/:v.:kv,:p,skip-empty on all candidates

[21:41] <lizmat> so it might well change, so I suggest not spending any time on JVM split until I'm done  :)

[21:42] *** vendethiel joined
[21:42] <diakopter> m: say ("==")>>.split(/"="/,2)

[21:42] <camelia> rakudo-moar 5fda5d: OUTPUT«(( =))␤»

[21:43] <diakopter> o_O

[21:44] <diakopter> oh, it's a limit of things to split into, including empty string <shrug>

[21:44] *** raoulvdberge joined
[21:46] *** muraiki left
[21:53] *** Oatmeal joined
[21:59] *** uruwi left
[22:00] <psch> .split($re, $limit) calls .match(:ex), which throws the UnwindException internally

[22:01] <psch> last i checked it was the try inside <if $multi> in Str.match

[22:01] <psch> so, something about exception handling

[22:02] *** kmel_ joined
[22:03] *** skids left
[22:03] *** kmel_ left
[22:04] <psch> r: say "abbb" ~~ m:ex:x(2)/ab+/ # actually not only :ex, but :ex with :x is what unwinds

[22:04] <camelia> rakudo-moar 5fda5d: OUTPUT«(｢abbb｣ ｢abb｣)␤»

[22:04] <camelia> ..rakudo-jvm 5fda5d: ( no output )

[22:04] <psch> ...i think i'm gonna patch the evalserver to print those exceptions :S

[22:05] *** kmel_ joined
[22:06] *** kmel left
[22:06] <lizmat> psch: ah, yeah, not looked inside .match just yet

[22:08] *** kmel_ left
[22:09] *** kmel joined
[22:10] <raydiak> m: class C { multi method m () { "A" }; multi method m () { "B" } }; C.*m

[22:10] <camelia> rakudo-moar 5fda5d: OUTPUT«Ambiguous call to 'm'; these signatures all match:␤:(C $: *%_)␤:(C $: *%_)␤  in block <unit> at /tmp/Uz81rcg0a8:1␤␤»

[22:11] <raydiak> ^ should have worked, right?

[22:13] <psch> m: class C { multi method m (:$a) { "A" }; multi method m (:$b) { "B" } }; say C.*m(:1a, :2b) # .* dispatch seems underimplemented

[22:13] <camelia> rakudo-moar 5fda5d: OUTPUT«(A)␤»

[22:13] *** mr_ron left
[22:13] <psch> m: class C { multi method m (:$a) { "A" }; multi method m (:$b) { "B" } }; say C.+m(:1a, :2b) # .+ too

[22:13] <camelia> rakudo-moar 5fda5d: OUTPUT«(A)␤»

[22:14] <psch> raydiak: i don't know if it should allow ambiguous dispatch, but it seems to only call one method anyway

[22:14] *** pmurias joined
[22:16] <raydiak> this form works:

[22:16] <raydiak> m: class B { multi method m () {"B"} }; class C is B { multi method m () {"C"} }; C.*m

[22:16] <camelia> rakudo-moar 5fda5d: ( no output )

[22:16] <raydiak> m: class B { multi method m () {"B"} }; class C is B { multi method m () {"C"} }; say C.*m

[22:16] <camelia> rakudo-moar 5fda5d: OUTPUT«(C B)␤»

[22:21] <psch> m: role R { multi method m { "R" }; class A does R { multi method m { "A" } }; say A.*m

[22:21] <camelia> rakudo-moar 5fda5d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/RBiEysL4UR␤Cannot declare our-scoped class inside of a role␤(the scope inside of a role is generic, so there is no unambiguous␤package to install the symbol in)␤at /tmp/RBiEysL4UR:1␤------> 3{ multi …»

[22:22] <psch> m: role R { multi method m { "R" } \; class A does R { multi method m { "A" } }; say A.*m

[22:22] <camelia> rakudo-moar 5fda5d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1BN98DsN0O␤Strange text after block (missing semicolon or comma?)␤at /tmp/1BN98DsN0O:1␤------> 3role R { multi method m { "R" }7⏏5 \; class A does R { multi method m { "A␤    expecting any of:␤ …»

[22:22] <psch> argh

[22:22] <psch> m: role R { multi method m { "R" } }; class A does R { multi method m { "A" } }; say A.*m

[22:22] <camelia> rakudo-moar 5fda5d: OUTPUT«Ambiguous call to 'm'; these signatures all match:␤:(A $: *%_)␤:(A $: *%_)␤  in block <unit> at /tmp/bM9Pgw8k6G:1␤␤»

[22:22] <psch> m: role R { multi method m (:$a) { "R" } }; class A does R { multi method m { "A" } }; say A.*m

[22:22] <camelia> rakudo-moar 5fda5d: OUTPUT«(R)␤»

[22:23] <Skarsnik> that pretty mess up x)

[22:23] *** vendethiel left
[22:23] *** raiph joined
[22:23] *** MadcapJake joined
[22:24] <ugexe> named argument isnt required

[22:24] *** Zoffix joined
[22:24] *** Ven joined
[22:25] *** kmel left
[22:25] <Skarsnik> that still should not create ambiquous call like this

[22:25] <ugexe> order matters

[22:27] <psch> notable is that .* should call all fitting methods

[22:27] <psch> (actually, i'm not sure it's limited to "fitting", but i think that probably makes sense to assume...)

[22:27] <Skarsnik> probably say cut to the first one?

[22:27] <ugexe> i could have swore .* worked not long ago

[22:27] *** MadcapJake left
[22:28] <psch> ugexe: it works vertically, apparently.  see raydiak++'s example a bit earlier

[22:28] <Skarsnik> worked here

[22:28] <Skarsnik> <raydiak> m: class B { multi method m () {"B"} }; class C is B { multi method m () {"C"} }; say C.*m

[22:28] <Skarsnik> <camelia> rakudo-moar 5fda5d: OUTPUT«(C B)␤»

[22:28] <psch> but it doesn't work among multis in the same class or across class and role

[22:28] <ugexe> ah

[22:28] <RabidGravy> you learn something new every day

[22:30] *** Ven left
[22:36] *** MadcapJake joined
[22:42] <AlexDaniel> m: say 5 × 20;

[22:42] <camelia> rakudo-moar 5fda5d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6hvnVFlMJc␤Confused␤at /tmp/6hvnVFlMJc:1␤------> 3say 57⏏5 × 20;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifi…»

[22:42] <AlexDaniel> m: say 5 · 20;

[22:42] <camelia> rakudo-moar 5fda5d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/A4prr7SuJ9␤Confused␤at /tmp/A4prr7SuJ9:1␤------> 3say 57⏏5 · 20;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifi…»

[22:42] <AlexDaniel> m: say 5 * 20;

[22:42] <camelia> rakudo-moar 5fda5d: OUTPUT«100␤»

[22:43] <AlexDaniel> .oO( not sure why star means multiplication )

[22:44] *** tokuhiro_ joined
[22:48] *** tokuhiro_ left
[22:49] *** rurban joined
[22:53] <RabidGravy> it always has done

[22:54] <AlexDaniel> RabidGravy: :)

[22:55] <AlexDaniel> m: my @a = 4, 8, 15, 16; @a grep= * < 10;

[22:55] <camelia> rakudo-moar 5fda5d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/FrRBETrFEn␤Two terms in a row␤at /tmp/FrRBETrFEn:1␤------> 3my @a = 4, 8, 15, 16; @a7⏏5 grep= * < 10;␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤      …»

[22:55] <AlexDaniel> is there any way to do that without typing @a = @a.grep… ?

[22:56] *** vendethiel joined
[22:56] <dalek> modules.perl6.org: a9d5a49 | (Zoffix Znet)++ | web/lib/P6Project.pm:

[22:56] <dalek> modules.perl6.org: Explicitly `use` IO::Socket::SSL

[22:56] <dalek> modules.perl6.org: 

[22:56] <dalek> modules.perl6.org: It is needed by Mojo::UserAgent for HTTPS, and ::UA is a bit shy reporting when the ::SSL is not installed

[22:56] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/a9d5a49e29

[22:57] <RabidGravy> lots, but they'd almost certainly involve more typing ;-)

[22:57] <psch> m: my @a = 4, 8, 15, 16; @a .= grep: * < 10; # this is probably the shortest

[22:57] <camelia> rakudo-moar 5fda5d: ( no output )

[22:57] <AlexDaniel> psch: oh yeah!

[22:57] <bartolin_> r: my $foo = do { fail "oops" }; $foo.defined; say $foo # Failure is reported as handled

[22:57] <camelia> rakudo-{moar,jvm} 5fda5d: ( no output )

[22:58] <bartolin_> oops

[22:58] <bartolin_> r: my $foo = do { fail "oops" }; with $foo { 42 }; say $foo

[22:58] <camelia> rakudo-{moar,jvm} 5fda5d: ( no output )

[22:58] <RabidGravy> I thought failures did that

[22:59] <RabidGravy> i.e. checking them somehow makes them handled

[22:59] <bartolin_> hmm, locally the second evaluation is not reported as handled.

[22:59] <bartolin_> though it should be, because used with 'with'

[22:59] *** pmurias left
[22:59] *** Zoffix left
[23:00] <bartolin_> sorry, only on jvm it is not reported as handled in the 2nd example

[23:00] <psch> bartolin_: that's probably the bandaid

[23:01] <RabidGravy> o/ blame it on the bandaid o/

[23:01] <bartolin_> psch: could be. but maybe that's behind some test failures

[23:01] <psch> i guess it might also be whatever makes that bandaid neccessary...

[23:02] <psch> i haven't yet looked closely at how we do all of this exceptional stuff

[23:02] <bartolin_> looks like 'method defined()' in 'src/core/Failure.pm' is not reached in some cases (where it should)

[23:03] <dalek> rakudo/nom: 774f0a3 | lizmat++ | src/core/Str.pm:

[23:03] <dalek> rakudo/nom: Implement :k/:v/:kv/:p/:skip-empty on Str.split

[23:03] <dalek> rakudo/nom: 

[23:03] <dalek> rakudo/nom: Well, all candidates except the Regex one, that will be for tomorrow

[23:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/774f0a3f32

[23:04] <dalek> roast: 815631e | lizmat++ | S32-str/split.t:

[23:04] <dalek> roast: Remove two now bogues tests

[23:04] <dalek> roast: review: https://github.com/perl6/roast/commit/815631e606

[23:06] <bartolin_> psch: as you said before, it feels like a lot of the jvm breakage is related to failure/exception handling

[23:08] *** nys joined
[23:08] *** jevin joined
[23:09] <bartolin_> r: sub oops { fail "oops" }; my $foo = oops(); with $foo { 42 }; say $foo

[23:09] <camelia> rakudo-jvm 5fda5d: OUTPUT«oops␤  in sub oops at /tmp/tmpfile:1␤  in block <unit> at /tmp/tmpfile:1␤␤Actually thrown at:␤  in block <unit> at /tmp/tmpfile:1␤␤»

[23:09] <camelia> ..rakudo-moar 5fda5d: OUTPUT«(HANDLED) oops␤  in sub oops at /tmp/tmpfile:1␤  in block <unit> at /tmp/tmpfile:1␤␤»

[23:09] *** jevin_ left
[23:09] <bartolin_> r: sub oops { fail "oops" }; my $foo = oops(); $foo.defined; say $foo

[23:09] <camelia> rakudo-{moar,jvm} 5fda5d: OUTPUT«(HANDLED) oops␤  in sub oops at /tmp/tmpfile:1␤  in block <unit> at /tmp/tmpfile:1␤␤»

[23:09] <bartolin_> ^^ that's what I wanted to see/show

[23:10] <RabidGravy> in S22 it say "provides" is optional, but I thought the way that installers work means this is pretty much mandatory

[23:10] <psch> i wonder how much of that is actually GLR-related and how much just brought it forward that it was wonky all along...

[23:10] <jdv79> its not opt

[23:10] <psch> s/much just/much the GLR just/

[23:11] <RabidGravy> jdv79, yeah that's what I thought

[23:11] <jdv79> as far as cpan is concerned

[23:11] <jdv79> yeah

[23:11] * RabidGravy fixes that

[23:15] <dalek> specs: c71fa23 | RabidGravy++ | S22-package-format.pod:

[23:15] <dalek> specs: "provides' is Mandatory

[23:15] <dalek> specs: review: https://github.com/perl6/specs/commit/c71fa234c8

[23:16] *** pippo left
[23:17] <RabidGravy> it would be good if people working on the CompUnit stuff took a look at S22 'cause y'know ....

[23:18] <RabidGravy> I'm interested because I'm writing a thing to test the META file in a distribution right now

[23:19] *** sprocket left
[23:20] *** sprocket joined
[23:22] <dalek> specs: 6d75e2d | lizmat++ | S15-unicode.pod:

[23:22] <dalek> specs: Remove the idea of negative codepoints

[23:22] <dalek> specs: review: https://github.com/perl6/specs/commit/6d75e2dc06

[23:24] *** sprocket left
[23:29] *** sprocket joined
[23:34] *** pippo joined
[23:34] <lizmat> good night, #perl6!

[23:35] <pippo> Is there a way to do "for @a -> $first, @rest {...};" ?? 

[23:35] <pippo> night lizmat 

[23:36] <lizmat> just guessing:    for @a.shift, @a -> $first, @rest {...}

[23:36] <lizmat> sleep&

[23:36] *** skids joined
[23:36] <pippo> thank you lizmat!

[23:36] <RabidGravy> toodlepip

[23:37] *** kid51 joined
[23:37] *** vendethiel left
[23:37] <psch> m: my @a = ^10; for $@a -> [$first, *@rest] { say $first; say @rest }

[23:37] <camelia> rakudo-moar 774f0a: OUTPUT«0␤[1 2 3 4 5 6 7 8 9]␤»

[23:38] <pippo> psch: Cool! TY!

[23:39] <pippo> I think it would be nice to put it in the perl6 documentation for the for control flow.

[23:39] <RabidGravy> carry on then :)

[23:40] *** sprocket left
[23:40] <pippo> Hem. If someone can explain me how to do that.

[23:41] <psch> http://doc.perl6.org/type/Signature#Destructuring_Parameters

[23:41] <psch> pippo: ^^^ that's what's happening, it's already documented

[23:41] <gfldex> m: my @a = 1..10; my $s = sub([my $first, my @rest]){ say $first, ':', @rest }; $s(@a);

[23:41] <camelia> rakudo-moar 774f0a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/DCZI7TXTD2␤Undeclared routine:␤    sub used at line 1␤␤»

[23:41] <dalek> problem_solver_tutorial: 9727a65 | lichtkind++ | chapter/text0.md:

[23:41] <dalek> problem_solver_tutorial: extend Prerequisites

[23:41] <dalek> problem_solver_tutorial: review: https://github.com/perl6/problem_solver_tutorial/commit/9727a652f5

[23:42] <RabidGravy> pippo, fork the https://github.com/perl6/doc clone your fork locally, make the change, push to your fork, make pull request

[23:43] <RabidGravy> it involves github account and local git 

[23:43] <pippo> RabidGravy: Exciting. I'll try that.

[23:44] <RabidGravy> I'm beered out now, bed calls

[23:44] <RabidGravy> play nicely y'all

[23:46] *** spider-mario left
[23:48] <pippo> o/

[23:49] *** RabidGravy left
[23:50] *** rurban left
[23:55] *** pippo left
