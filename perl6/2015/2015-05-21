[00:04] *** BenGoldberg joined
[00:18] *** tinyblak joined
[00:20] *** telex joined
[00:25] *** pat_js left
[00:46] *** laouji joined
[00:49] <raydiak> seems to me like there'd be many existing formats and protocols using MD5 which someone might want to support in their P6 script/module/whatever, unless we're so far in the future now that such things don't really exist any more...???...

[00:51] <skids> Heck, you even still need MD2 if you want to do PKI.

[00:52] <raydiak> heh wow

[01:02] * raydiak finds himself developing a geezer attiutude wrt the "don't need old stuff" perspective, in general

[01:09] *** khisanth__ joined
[01:10] *** khisanth_ left
[01:13] *** yubimusubi joined
[01:19] <tony-o_> raydiak++

[01:27] *** vendethiel joined
[01:27] *** cognominal left
[01:28] *** cognominal joined
[01:39] *** aborazmeh joined
[01:39] *** aborazmeh left
[01:39] *** aborazmeh joined
[01:43] *** metalman joined
[01:48] *** b2gills joined
[01:49] *** salva joined
[01:58] *** metalman left
[02:01] *** chenryn joined
[02:02] *** khisanth__ is now known as Khisanth

[02:02] *** salva left
[02:10] <jdv79> why isn't lazy implemented then?

[02:15] *** salva joined
[02:17] <colomon> ‘coz we’re lazy

[02:30] *** rmgk_ joined
[02:30] *** rmgk_ is now known as rmgk

[02:30] *** dayangkun joined
[02:30] *** dayangkun left
[02:31] *** Ben_Goldberg joined
[02:33] *** dayangkun joined
[02:34] *** BenGoldberg left
[02:39] *** Zoffix joined
[02:42] *** vendethiel left
[02:50] *** chenryn left
[02:55] *** noganex_ joined
[02:57] *** salva left
[02:59] *** salva joined
[03:15] *** colomon left
[03:16] *** chenryn joined
[03:16] *** adu joined
[03:17] *** colomon joined
[03:53] *** raiph left
[04:07] *** adu left
[04:13] *** diana_olhovik_ joined
[04:13] *** chenryn left
[04:25] *** skids left
[04:33] *** BenGoldberg_ joined
[04:34] *** jack_rabbit joined
[04:36] <tony-o_> itll be implemented when you need to use it

[04:36] *** Ben_Goldberg left
[04:39] *** BenGoldberg_ left
[04:42] *** cognominal left
[04:43] *** cognominal joined
[04:47] *** awwaiid left
[04:51] *** flaviusb joined
[04:59] *** awwaiid joined
[05:14] *** chenryn joined
[05:20] *** jack_rabbit left
[05:23] *** diana_olhovik_ left
[05:30] <dalek> ecosystem: ffaf1fa | (Sterling Hanenkamp)++ | META.list:

[05:30] <dalek> ecosystem: Add Template-Anti to the Perl6 Ecosystem

[05:30] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ffaf1fafd1

[05:30] <dalek> ecosystem: adef775 | (Tim Smith)++ | META.list:

[05:30] <dalek> ecosystem: Merge pull request #45 from zostay/master

[05:30] <dalek> ecosystem: 

[05:30] <dalek> ecosystem: Add Template-Anti to the Perl6 Ecosystem

[05:30] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/adef775aa0

[05:31] *** awwaiid left
[05:34] *** kaare__ joined
[05:36] *** szabgab joined
[05:37] <szabgab> Hello there! The YAPC::EU organizers would like to evaluate the level of interest for hackathons, if you'd like to have a Perl 6 hackathon, please add yourself to the wiki page: http://act.yapc.eu/ye2015/wiki?node=Hackathons

[05:38] *** awwaiid joined
[05:40] <szabgab> and if you are already there, please submit your Perl 6 related talk to have a longer list than this: http://act.yapc.eu/ye2015/talks/tag/perl6

[05:41] *** szabgab left
[05:42] *** adu joined
[05:45] *** Psyche^ joined
[05:47] *** aborazmeh left
[05:53] *** rindolf joined
[06:02] *** domidumont joined
[06:02] *** awwaiid left
[06:05] *** domidumont left
[06:06] *** domidumont joined
[06:07] *** gfldex joined
[06:08] *** diana_olhovik_ joined
[06:08] *** Sqirrel joined
[06:11] *** aborazmeh joined
[06:11] *** aborazmeh left
[06:11] *** aborazmeh joined
[06:12] *** quester joined
[06:15] *** awwaiid joined
[06:18] *** _mg_ joined
[06:20] *** aborazmeh left
[06:26] *** FROGGS joined
[06:26] <FROGGS> good morning #perl6

[06:26] <yoleaux> 20 May 2015 20:29Z <japhb> FROGGS: From the commit message for MoarVM: commit 4102a25b1acea1d453d87f4e614d328ba0af8816

[06:26] <yoleaux> 20 May 2015 20:29Z <japhb> FROGGS: From the commit message for MoarVM: commit 4102a25b1acea1d453d87f4e614d328ba0af8816 it looks like the comparison is reversed (> instead of <).  Am I misunderstanding?

[06:27] <FROGGS> TODAY IS RELEASE DAYS - please add your changes to the changelog, hold back patches when you are uncertain about them, etc

[06:27] <FROGGS> and test what you can, also modules etc

[06:30] <FROGGS> .tell japhb the commit states "round up to a multiple of"... maybe it is my bad English; if the biggest elem (perhaps an inlined struct) is bigger than 8 bytes (void* on x86_64), then it should allocate a multiple of 8 bytes

[06:30] <yoleaux> FROGGS: I'll pass your message to japhb.

[06:31] <FROGGS> .tell japhb there is already that bit of code: https://github.com/MoarVM/MoarVM/blob/4102a25b1acea1d453d87f4e614d328ba0af8816/src/6model/reprs/CStruct.c#L242

[06:31] <yoleaux> FROGGS: I'll pass your message to japhb.

[06:32] *** adu left
[06:32] <FROGGS> .ask jnthn are you around in about 12 hours to upload the moarvm release tarball?

[06:32] <yoleaux> FROGGS: I'll pass your message to jnthn.

[06:35] *** [Sno] left
[06:35] *** Alina-malina joined
[06:38] *** chenryn left
[06:38] *** chenryn joined
[06:40] *** gfldex left
[06:43] *** pochi joined
[06:43] *** ab5tract joined
[06:43] *** breinbaas joined
[06:43] *** arnsholt joined
[06:43] *** freeze joined
[06:43] *** torbjorn joined
[06:43] *** hernan joined
[06:43] *** eternaleye joined
[06:43] *** BooK joined
[06:43] *** tadzik joined
[06:44] *** camelia joined
[06:45] *** ChanServ sets mode: +v camelia

[06:46] *** agentzh joined
[06:46] *** agentzh left
[06:46] *** agentzh joined
[06:50] *** RabidGravy joined
[06:51] *** ggoebel joined
[06:57] *** al2o3-cr joined
[07:08] *** burnersk joined
[07:08] *** [ptc] joined
[07:09] *** zakharyas joined
[07:12] *** [ptc]_ joined
[07:13] *** fhelmberger joined
[07:17] *** fhelmberger left
[07:23] *** mj41 joined
[07:28] *** lizmat joined
[07:30] *** isBEKaml_mobile joined
[07:43] *** darutoko joined
[07:49] *** kurahaupo1 joined
[07:49] *** [ptc]_ left
[07:49] *** [ptc]_ joined
[07:50] *** fhelmberger joined
[07:56] *** [Sno] joined
[07:57] <lizmat> Good *, #perl6!

[07:58] <lizmat> things not yet in ChangeLog, which I don't know quite how to word them:

[07:58] <FROGGS> morning lizmat 

[07:58] <lizmat> + Cunion changes in NativeCall

[07:58] <FROGGS> I'll add that of course

[08:00] <lizmat> + Add jna.library.path to set properties for JVM runner

[08:01] <FROGGS> I can add that too

[08:02] <FROGGS> lizmat: can you please run 'make test' in nqp and rakudo? I did that on 64 and 32bit linux and 64bit windows

[08:02] <FROGGS> will do 32bit windows in a bit too

[08:03] <lizmat> will do

[08:04] <FROGGS> lizmat++

[08:04] <FROGGS> I'll disable CURLI in a bit, by only putting file# in INC and CUSTOM_LIB

[08:04] <FROGGS> this way we can have a star...

[08:05] <lizmat> cool

[08:05] *** vendethiel joined
[08:05] <FROGGS> though, I'll reenable CURLI after the release of course... maybe only in a branch

[08:05] <vendethiel> o/ #perl6!

[08:05] <FROGGS> hi vendethiel 

[08:05] <lizmat> Files=98, Tests=3763,  9 wallclock secs ( 0.42 usr  0.15 sys +  8.38 cusr  0.80 csys =  9.75 CPU)

[08:06] <FROGGS> did is pass? :o)

[08:06] <lizmat> FROGGS: yes

[08:06] <lizmat> t/04-nativecall/02-simple-args.t   (Wstat: 512 Tests: 12 Failed: 2)

[08:06] <lizmat>   Failed tests:  10-11

[08:06] <lizmat>   Non-zero exit status: 2

[08:06] <lizmat> Files=39, Tests=511,  3 wallclock secs ( 0.20 usr  0.08 sys + 17.25 cusr  2.10 csys = 19.63 CPU)

[08:06] <lizmat> those failures I've seen for weeks now

[08:09] <FROGGS> hmmm, this is about uint8... I thought we fixed those just recently... hmmm

[08:13] *** [ptc]_ left
[08:13] <dalek> rakudo/nom: 7b42268 | lizmat++ | docs/ChangeLog:

[08:13] <dalek> rakudo/nom: Some more entries

[08:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b42268647

[08:17] <masak> hi vendethiel 

[08:17] *** [ptc]_ joined
[08:19] *** [ptc]_ left
[08:24] <dalek> roast: c5b581a | lizmat++ | S10-packages/basic.t:

[08:24] <dalek> roast: Fix deprecation warning for bare package

[08:24] <dalek> roast: review: https://github.com/perl6/roast/commit/c5b581a985

[08:26] <RabidGravy> woo! "Package rakudo-star.x86_64 0:0.0.2015.04-3.fc21 will be an update"

[08:27] <moritz> 0.0.2015.04 ?

[08:27] <moritz> but yes, woo!

[08:27] <RabidGravy> who knows the mystery of fedora versioning?

[08:28] <FROGGS> \o/

[08:28] <nwc10> w.0.0 surely?

[08:28] <dalek> roast: d8d17f9 | lizmat++ | S26-documentation/module-comment.t:

[08:28] <dalek> roast: Fix deprecation message for module

[08:28] <dalek> roast: review: https://github.com/perl6/roast/commit/d8d17f98fd

[08:30] <dalek> roast: b4149a2 | lizmat++ | integration/advent2013-day19.t:

[08:30] <dalek> roast: Fix deprecation warning for Supply.more/emit

[08:30] <dalek> roast: review: https://github.com/perl6/roast/commit/b4149a24b9

[08:31] <lizmat> afk for a few hours

[08:34] *** dakkar joined
[08:53] *** quester left
[08:56] <masak> hm, the Angular people actually seem not-half-bad at coordinating between 1.x and 2.0 development

[08:56] <masak> didn't really expect that :)

[08:56] *** tinyblak_ joined
[08:57] *** phdphil joined
[09:00] *** tinyblak left
[09:08] *** espadrine joined
[09:10] <timotimo> how do we actually have a 2015.04 rakudo star on fedora?

[09:10] <FROGGS> that's an interesting question :o)

[09:11] <timotimo> or did rabid gravy just make that up? :P

[09:21] <RabidGravy> nope it really did just update it (the previous was 2014.12)

[09:21] <timotimo> but ... how

[09:21] <timotimo> we didn't make a 2015.04 rakudo star

[09:22] <RabidGravy> jonathan@coriolanus ~]$ /usr/bin/perl6 -v

[09:22] <RabidGravy> This is perl6 version 2015.04 built on MoarVM version 2015.04

[09:23] <timotimo> did the fedora packager just do the star release process on their own?

[09:23] <timotimo> i'm confused

[09:23] <RabidGravy> let me dig a bit

[09:24] *** yeahnoob joined
[09:25] <RabidGravy> http://www.spinics.net/lists/fedora-package-announce/msg158251.html

[09:26] <timotimo> ah

[09:26] <timotimo> so just an nqp update

[09:26] <timotimo> and thus a moarvm update

[09:26] <timotimo> that's not that bad

[09:26] <timotimo> it passes all the spec tests, yeah?

[09:27] <RabidGravy> http://pkgs.fedoraproject.org/cgit/rakudo-star.git/

[09:28] *** xfix joined
[09:29] <timotimo> BuildRequires:  readline-devel ← that wasn't thrown out at that point yet?

[09:29] <literal> sad that Debian's rakudo package is still at 2014.07

[09:32] *** yeahnoob left
[09:36] <timotimo> oh my, the XML module is quite unhappy

[09:36] <timotimo> probably GLR-related

[09:37] <masak> most likely, yes

[09:37] <masak> I fixed two different GLR-fallout-related things in a script of mine yesterday.

[09:48] *** bjz joined
[09:58] <timotimo> Net::Irc has warnings about character classes containing quotes

[09:58] <timotimo> Net::IRC::Bot, apparently

[09:58] <timotimo> LibraryMake also needs a touch-up for the unit keyword

[09:59] <timotimo> and all the embedded modules in panda

[10:04] <timotimo> huh, there's no test failures with XML here

[10:04] <timotimo> but something's wrong with comments

[10:07] *** telex left
[10:08] *** telex joined
[10:10] <timotimo> gaaaaaaaah

[10:10] <timotimo> i was looking at the wrong line because the last digit of the line number got wrapped in my terminal

[10:11] *** sftp left
[10:15] *** isBEKaml_mobile left
[10:15] <masak> timotimo: do you have line numbers sitting on the right of the text? how did they manage to get wrapped?

[10:16] <timotimo> Use of Nil in string context  in block  at /home/timo/perl6/ecosystem/exemel/lib/XML.pm6:996

[10:16] <timotimo> exactly the 6 and only the 6 went to the next line

[10:18] <timotimo> XML is still using [0] to get at things quantified with ? in regexes

[10:22] <masak> m: grammar G { regex TOP { <foo>? }; regex foo { foo } }; G.parse("foo"); say $<foo>.^name

[10:22] <camelia> rakudo-moar 7b4226: OUTPUT«Match␤»

[10:22] <masak> m: grammar G { regex TOP { <foo>? }; regex foo { foo } }; G.parse("foo"); say $<foo>[0].^name

[10:22] <camelia> rakudo-moar 7b4226: OUTPUT«Nil␤»

[10:23] <masak> how many times have we changed that .[0] thing back and forth now for the ? quantifier?

[10:24] <masak> this is Perl 6's random hunt for the sweet spot of the Maybe type :P

[10:24] <timotimo> good Q

[10:24] <masak> (the closest to which we ever got was probably TimToady++'s OKness proposal, which was contested/rejected)

[10:24] <timotimo> i didn't pay sufficient attention

[10:24] *** mj41 left
[10:24] * vendethiel never witnessed such a change

[10:24] <vendethiel> OKness?

[10:24] <timotimo> yeah, OKness was a bit tough

[10:25] <timotimo> how different types should signal an "ok" value vs a "not ok" value

[10:25] <timotimo> i forgot the details

[10:25] <masak> vendethiel: not sure I'll be able to hunt it down. it was a gist by TimToady with some pretty radical changes to the type system.

[10:25] <timotimo> er ... huh?

[10:25] <timotimo> Template::Anti is using a rakudo from 2014-12

[10:26] <timotimo> on its travis-ci

[10:26] <timotimo> dwimperl.com is szabgab's?

[10:26] <masak> vendethiel: found it: https://gist.github.com/TimToady/1828667

[10:27] *** dayangkun left
[10:28] <vendethiel> ...that sounds very confusing

[10:28] *** chenryn left
[10:28] <masak> I remember feeling that it was somehow "inside-out".

[10:28] <masak> I'm re-reading the proposal now.

[10:29] <masak> right, captured in this sentence: "'0 but True' needs to become more like 'OK[REALLY => 0]'"

[10:29] <masak> that turns it inside-out.

[10:30] * vendethiel doesn't get what's "REALLY" or why Ok takes a type parameter that's a hash

[10:30] <timotimo> named type parameters?

[10:30] <vendethiel> oh, uhmm.

[10:31] <vendethiel> m: role Foo[:$x] { method x { say $x } }; say Foo[:5x].x;

[10:31] <camelia> rakudo-moar 7b4226: OUTPUT«5␤True␤»

[10:31] <vendethiel> :o

[10:31] <masak> please don't use the `:5x` syntax willy-nilly :)

[10:31] <vendethiel> just because it's simpler to type :)

[10:31] <masak> it's meant for a very specific purpose, and using it outside of that is basically mis-use of the feature

[10:32] * vendethiel went as far as removing it from the learnxiny

[10:32] <vendethiel> ..exactly because of what you said :-)

[10:32] <masak> probably a good idea :)

[10:32] <timotimo> you're speaking of "mis-use of a feature"? :)

[10:32] <timotimo> you know people will take that as a challenge?

[10:32] * masak .oO( :0good_idea )

[10:32] <FROGGS> is this #python?

[10:33] <vendethiel> isfroggsguido

[10:33] <vendethiel> .oO( poor FROGGS )

[10:33] <masak> just because we're not #python doesn't mean we can't point to mis-uses of features ;)

[10:33] <FROGGS> :o)

[10:33] <timotimo> i want to introduce a new syntax for this kind of pair

[10:33] <timotimo> :(value)name

[10:33] <masak> timotimo: that totally breaks the original intent

[10:33] <timotimo> .o( i can make that a slang! )

[10:33] <masak> of :2nd

[10:33] * vendethiel gets reminded of objective-c's block syntax

[10:34] <masak> timotimo: you would be better of disallowing the syntax everywhere except in calls to .subst :)

[10:34] <masak> off*

[10:34] <timotimo> i'm not saying i'm going to use it at all, but i'd defend a programmer's desire to use :123foo whenever she wants to use it!

[10:35] <masak> I think that's a poor use of the defense of that freedom ;)

[10:36] <masak> the question "does it improve readability of the source code" should show up somewhere

[10:37] <timotimo> of course a programmer would only want to use it where it improves readability of the source codes

[10:37] <timotimo> that goes without sayings

[10:38] <FROGGS> my $datetime.add( :1day )

[10:39] <masak> timotimo: but it doesn't go without saying. I had to remind vendethiel above in the backlog (and he immediately agreed that it was a bad use).

[10:39] <vendethiel> wut?

[10:39] <masak> vendethiel: the :5x thing

[10:39] <vendethiel> I said I used it just because it was simple as an example, not because I thought it was proper use here

[10:40] <masak> right, exactly.

[10:40] <masak> I do realize that your example was a simple, throwaway one.

[10:40] <masak> I just don't want to give people ideas about that being a sensible way to write named arguments with integer values *in most cases*.

[10:40] <timotimo> :)

[10:40] <masak> :1day is a good example of a possible good use. but it has to be viewed on a case-by-case basis like that.

[10:41] <timotimo> m: say :0xfood

[10:41] <camelia> rakudo-moar 7b4226: OUTPUT«Unexpected named parameter 'xfood' passed␤  in block <unit> at /tmp/YxKX6v0MI4:1␤  in any <unit-outer> at /tmp/YxKX6v0MI4:1␤␤»

[10:41] <masak> people hate to think for themselves, I know. sweeping rules that ignore specifics are much preferred.

[10:41] <timotimo> m: say (:0xfood)

[10:41] <camelia> rakudo-moar 7b4226: OUTPUT«xfood => 0␤»

[10:41] <vendethiel> masak: I'm just responding to the "had to remind". don't worry -- I'm aware of :5x's use :)

[10:41] <timotimo> d'aaw

[10:41] *** breinbaas left
[10:41] <timotimo> ^- super trolly

[10:42] <masak> m: say 0xf00d

[10:42] <camelia> rakudo-moar 7b4226: OUTPUT«61453␤»

[10:43] *** breinbaas joined
[10:46] *** maddingue joined
[10:48] <timotimo> well, at least i got rid of the warnings in XML :)

[10:48] <timotimo> and the deprecation for unit

[10:48] <timotimo> is panda going to wait for the release (or even star?) to put unit keywords into its dependencies?

[10:48] <FROGGS> m: say (0xDEADBEEF)

[10:48] <camelia> rakudo-moar 7b4226: OUTPUT«3735928559␤»

[10:48] <FROGGS> m: say (:0xDEADBEEF)

[10:48] <camelia> rakudo-moar 7b4226: OUTPUT«xDEADBEEF => 0␤»

[10:49] <FROGGS> :P

[10:49] <FROGGS> (to be avoided)

[10:49] <timotimo> agreed

[10:50] *** lizmat left
[10:51] *** maddingue left
[10:55] *** lizmat joined
[10:57] *** maddingue joined
[10:58] *** _mg_ left
[10:59] <timotimo> maybe there should be a "best practice" to put a test at the end of every test file that checks if any control exceptions have been raised?

[11:01] <lizmat> maybe we should build that into Test.pm ?

[11:02] <timotimo> kind of hard to do, as it needs to have a CONTROL block stack-wise outside the user's code

[11:02] <timotimo> someone suggested at some point the ability to export phasers

[11:02] <timotimo> that would help here

[11:03] <lizmat> yup, exactly

[11:04] <lizmat> still. I don't see why it wouldn't be possible to export a CONTROL block to the outer scope

[11:04] <lizmat> which at that point, hasn't been fully parsed yet

[11:04] <timotimo> yeah, i don't think it'd be impossible

[11:07] *** chenryn joined
[11:09] *** mj41 joined
[11:12] <dalek> rakudo/nom: e113455 | lizmat++ | docs/ChangeLog:

[11:12] <dalek> rakudo/nom: Mention demise of .for

[11:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e113455690

[11:13] <lizmat> afk again&

[11:13] <FROGGS> lizmat++

[11:17] *** cschwenz joined
[11:17] *** cschwenz left
[11:18] *** _mg_ joined
[11:23] *** bjz left
[11:24] <timotimo> List/Supply.rotor expects a list of Pairs (elems|elems => gap) - i wonder how this could be changed to reflect the pair/value thingie

[11:24] <timotimo> i mean, you can still pass normal single numbers, right?

[11:25] <timotimo> or ... you don't?

[11:27] <timotimo>    + 'earliest' now handles for remaining channels without specific handlers

[11:27] <timotimo> is that "for" stray, or is my grammar grammar busted?

[11:27] <timotimo> Int/Rat ** -Int now generates a Rat if possible, else a Num - and i think this "else" would read better as "otherwise"?

[11:28] <moritz> +1 to otherwise

[11:29] <moritz> or else 'orelse' :-)

[11:29] <timotimo> andthen do the release

[11:31] <moritz> CATCH { everything that's not supposed to be released } before you lose CONTROL

[11:31] <FROGGS> timotimo: always patience with the young horses :D

[11:35] *** colomon_ joined
[11:36] *** colomon left
[11:36] *** colomon_ is now known as colomon

[11:39] *** andreoss joined
[11:40] <dalek> rakudo/nom: 9bdeaa9 | (Carl Masak)++ | docs/ChangeLog:

[11:40] <dalek> rakudo/nom: [docs/ChangeLog] remove extraneous 'for'

[11:40] <dalek> rakudo/nom: 

[11:40] <dalek> rakudo/nom: Pointed out by timotimo++.

[11:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9bdeaa9a31

[11:41] *** pecastro joined
[11:45] *** retupmoca left
[11:45] *** hoelzro left
[11:46] *** retupmoca joined
[11:46] *** hoelzro joined
[11:49] *** hobbs joined
[11:49] *** hobbs left
[11:49] *** hobbs joined
[11:57] *** egrep joined
[11:58] *** zakharyas left
[11:59] <timotimo> do you people think the language/ section of the docs should be sorted manually rather than alphabetically?

[11:59] <timotimo> putting "grammars" before "regexes" doesn't seem terribly helpful

[12:01] <timotimo> There are predefined character classes of the form \w. Its negation is written with an upper-case letter, \W. ← just nit picking here, really; would "their negations" be more correct than "its negation" here?

[12:02] <timotimo> m: "foo\n\r" ~~ /\s/; say (~$/).perl

[12:02] <camelia> rakudo-moar e11345: OUTPUT«"\n"␤»

[12:02] <timotimo> m: "foo\r\n" ~~ /\s/; say (~$/).perl

[12:02] <camelia> rakudo-moar e11345: OUTPUT«"\r"␤»

[12:03] <timotimo> maybe the \s section should have an explicit "\s does not match logical newlines, just single characters."

[12:04] <timotimo> anyways, very good that the character class sections explicitly point out exotic characters that fall into that category

[12:04] *** laouji left
[12:07] <dalek> doc: 2475551 | timo++ | lib/Language/regexes.pod:

[12:07] <dalek> doc: regexes.pod - missing word

[12:07] <dalek> doc: review: https://github.com/perl6/doc/commit/24755515b3

[12:09] *** zakharyas joined
[12:16] <masak> timotimo: yes, ordering the language/ section manually sounds like an improvement over alphabetical order.

[12:21] *** andreoss left
[12:21] <timotimo> how do we implement that? give the pod files a litle heading section "ordering" where we can define what cmp-ing the pod files against each other shall give?

[12:22] <timotimo> regexes.pod: =ordering before grammars.pod ?

[12:22] <timotimo> i'm not very convinced by giving the files numbers at the front

[12:27] <dalek> rakudo/nom: 29e5521 | FROGGS++ | src/core/CompUnitRepo.pm:

[12:27] <dalek> rakudo/nom: use hash symbol everywhere in CUR include-specs

[12:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29e552144a

[12:27] <dalek> rakudo/nom: 7adde5a | FROGGS++ | src/core/CompUnitRepo/Local (2 files):

[12:27] <dalek> rakudo/nom: remove method "install" for CURLF

[12:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7adde5ad29

[12:33] <dalek> rakudo-star-daily: d74d118 | coke++ | log/ (9 files):

[12:33] <dalek> rakudo-star-daily: today (automated commit)

[12:33] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d74d118cc2

[12:36] <timotimo> [Coke]: got any clue why it fails to find all these modules?

[12:42] <masak> timotimo: hm, ordering information should preferably not be spread out over all the files. better if they're in one place, such as the table-of-contents where they're listed.

[12:42] <masak> timotimo: that way, no numbers need be used either. just an ordered list.

[12:44] <timotimo> we don't actually have a "the table-of-contents" document

[12:44] <timotimo> do we?

[12:44] <masak> oh, mebbe not.

[12:44] <moritz> I think it's auto-generated

[12:44] <masak> can it be placed as a meta-data file in some appropriate place?

[12:45] <masak> then it doesn't even have to be Pod

[12:45] <moritz> from =TITLE and =SUBTITLE attributes

[12:45] <masak> the important thing is that the renderer finds it and uses it, right?

[12:45] *** yogan joined
[12:45] <moritz> right

[12:45] <moritz> and since it parses the pod, it should be in the pod

[12:45] *** abraxxa joined
[12:46] <FROGGS> tadzik: ping

[12:46] <masak> moritz: yes, but the document it should rightfully be in is automatically generated...

[12:47] <masak> moritz: ...and spreading it over all the sub-documents just because there's no ToC document feels... ugh.

[12:47] <masak> (and avoiding ordinal numbers would be worthwhile, too)

[12:47] <moritz> masak: TBH, the whole htmlify qualifies as "ugh"

[12:47] <moritz> patches welcome :-)

[12:48] <timotimo> right :S

[12:48] <moritz> we just had the mis-fortune of me being the only one hacking on it when it was originally developed

[12:48] <moritz> so nobody could prevent my bad ideas from the start :-)

[12:49] <masak> heh :) don't be so hard on yourself

[12:49] <masak> we have documentation rendered as HTML. moritz++

[12:49] <masak> this is the crucial difference between software as effect vs software as artifact.

[12:49] <masak> software as effect: does it work? yes! yay!

[12:50] <masak> software as artifact: is it beautiful? no. boo! does it contain bad ideas? unfortunately. ugh :/

[12:50] <masak> both aspects are important, but it could be argued that the first one takes precedence if the goal is to quickly deliver value.

[12:51] <masak> and that's exactly what happened here. so moritz++ :)

[12:51] <FROGGS> hmmm....

[12:51] <FROGGS> Compiling lib/Facter.pm to mbc

[12:51] <FROGGS> useless use of 'is rw' on @!search_path  in any  at src/Perl6/World.nqp:2498

[12:52] <moritz> rw on a private attribute looks questionable

[12:52] <moritz> so does the line number :-)

[12:54] <FROGGS> error reporting bug me thinks

[12:55] <FROGGS> it should report this line instead: https://github.com/cosimo/perl6-facter/blob/master/lib/Facter.pm#L47

[12:59] *** raiph joined
[12:59] <masak> reproduced locally.

[12:59] * masak submits rakudobug

[13:00] <masak> m: class T { has $!foo is rw }

[13:00] <camelia> rakudo-moar 7adde5: OUTPUT«useless use of 'is rw' on $!foo  in any  at src/Perl6/World.nqp:2498␤»

[13:00] <vendethiel> I guess it's the ".setting" regexp?

[13:04] <masak> vendethiel: I don't... think so...? which ".setting" regex?

[13:05] <vendethiel> warning filters stack frames using something like "%frame<line> !~~ /'.setting'/" iirc

[13:07] *** chenryn left
[13:08] <moritz> vendethiel: no

[13:08] *** liztormato joined
[13:09] <moritz> vendethiel: the problem is that the line of the file that's being parsed doesn't appear *anywhere* in the stack

[13:09] <liztormato> Perhaps it should be a .ends-with('.nqp') ?

[13:09] <moritz> because the line isn't calling anything; it's the parser that does something with this line

[13:09] <moritz> so, can't use a normal warning here

[13:09] <vendethiel> oh :)

[13:09] <vendethiel> thanks for the clarification!

[13:09] <liztormato> Cycling again &

[13:09] *** liztormato left
[13:12] *** skids joined
[13:15] *** PZt joined
[13:18] <DrForr> .tell lizmat #125226 was my own fault, the 'please close this bug' message never made it, apparently.

[13:18] <yoleaux> DrForr: I'll pass your message to lizmat.

[13:19] <[Coke]> OBTW, we're going to have to adopt some kind of branch/dev/release strategy after "release day" that isn't "everything in master^Wnom"

[13:19] <masak> nwc10: just saw your comment in #125216 -- "are floats real numbers?"

[13:19] <masak> nwc10: well, no -- strictly speaking, they don't guarantee associativity in addition, which real numbers do.

[13:20] <DrForr> On other notes, can the Perl6 grammar be exposed within perl6 yet? I keep getting this irritating itch to write perl6tidy...

[13:20] <timotimo> i have a little bit of interest in writing something that deparses

[13:20] <masak> nwc10: but I think that does not detract from the fact that floats are very much there to be a goodenuf representation of real numbers.

[13:21] <[Coke]> timotimo: (fails to find modules) - no, I just unbusted the star build process a day ago, haven't dug into this one yet.

[13:21] <masak> nwc10: and saying that "floats are positioned on the real line" does not feel weird or wrong to me at all.

[13:21] <timotimo> ok, thanks for your work! :)

[13:21] <timotimo> [Coke]: perhaps star is including modules that don't have "provides" sections yet?

[13:22] <timotimo> shall i go through the submodules in star and bump the versions up a bit?

[13:22] <DrForr> Well, floats are just rationals with a really big denominator :)

[13:23] <[Coke]> timotimo: I can't remember if my star tester is grabbing master/HEAD or just the revision tagged in the submodule. I think it's the former.

[13:23] <[Coke]> timotimo: but bumping those probably couldn't hurt.

[13:24] <FROGGS> [Coke]: why do we need to adopt another release strategy?

[13:25] <DrForr> masak: Thanks, 'twas a thinko on my part.

[13:26] <masak> DrForr: there's an unfortunate corner there where the syntax for blocks and hashes collides.

[13:27] <DrForr> Yeah, I was just used enough to things such as lives_ok {} to assume for a few shining minutes that subtest {} operated the same way.

[13:28] <FROGGS> ewww, Yapsi/t/compiler.t infiniloops

[13:28] <DrForr> Mind you, I think it probably *should*, for consistency's sake, but we've all got our crossproducts to bear.

[13:30] <masak> FROGGS: probably GLR-related... :/

[13:30] <FROGGS> masak: yeah, is just not fun in a smoke run, is all :o)

[13:32] <masak> maybe the smoker should have a 5-minute auto-kill timeout...

[13:33] <FROGGS> .tell panda 1) please add curlies to package decls to File::Find, Shell::Command and JSON::Tiny

[13:33] <yoleaux> FROGGS: I'll pass your message to panda.

[13:33] <timotimo> FROGGS: release strategy? what?

[13:33] <[Coke]> FROGGS: right now everything is "get as much as possible of whoever wants to work on stuff into the next release". After we have a "real" release, we need to have some sort of arrangement where there's some discussion about what's going in the release, new features, backcompat, timing with the actual release date...

[13:33] <FROGGS> .tell panda 2) the 'build reverse deps feature' builds reverse deps of not yet installed modules, but it does not install their deps

[13:33] <yoleaux> FROGGS: I'll pass your message to panda.

[13:34] <timotimo> telling that to ... panda? :)

[13:34] <FROGGS> ups

[13:34] <FROGGS> hehe

[13:34] <[Coke]> we do all of this in an ad hoc fashion right now (and better than many for pay gigs I've been on.) but "everything into master" isn't viable if you have multiple releases in the wild to care about.

[13:34] <FROGGS> .tell tadzik 1) please add curlies to package decls to File::Find, Shell::Command and JSON::Tiny

[13:34] <yoleaux> FROGGS: I'll pass your message to tadzik.

[13:34] <FROGGS> .tell tadzik 2) the 'build reverse deps feature' builds reverse deps of not yet installed modules, but it does not install their deps

[13:34] <yoleaux> FROGGS: I'll pass your message to tadzik.

[13:35] <[Coke]> (right now, our response to anyone with an existing version is "upgrade to the latest( and sorry, some stuff might break)"

[13:35] <FROGGS> [Coke]: my only concern is that a branch that is not master might be not that often tested on different platforms

[13:36] <FROGGS> [Coke]: so instead of release branches I would propose we keep having feature and dev branches

[13:36] <FROGGS> though, the point where stuff is merged into master/nom should be discussed more then

[13:36] <FROGGS> discussed and decided*

[13:40] <[Coke]> I'm not tied to a particular plan of attack here, just want there to be some plan. We also should consider tagging or somehow labelling branches that need testing for whatever automatic infrastructure we have (to the question from jdv79 recently about "how are we testing what and where is it")

[13:41] <FROGGS> aye

[13:41] <FROGGS> I very much agree

[13:42] *** JoaquinFerrero left
[13:43] *** coffee` joined
[13:49] <Woodi> hi today :)

[13:49] <Woodi> I must say that   has $.fh is lazy = open( $!file, :r );  is a fun :)

[13:51] <Woodi> it's like user want's to browse web, he starts browser, access network and modem starts to dial somewhere - such futuristic automatization :)

[13:51] <FROGGS> hehe

[13:51] <FROGGS> it should also make some funny noise :o)

[13:52] <Woodi> but it can be seen as kind of "finalizer", a "starter" or trigger doing action...

[13:52] <Woodi> or general mechanism for TIE but not only for storge...

[13:53] <Woodi> actually we have/had wrappers for methods, maybe it can be reused ?

[13:53] <dalek> star: a55705b | timotimo++ | modules/ (16 files):

[13:53] <dalek> star: update submodules to latest masters

[13:53] <dalek> star: 

[13:53] <dalek> star: this fixes a whole bunch of META.info files, for example

[13:53] <dalek> star: review: https://github.com/rakudo/star/commit/a55705bbdf

[13:54] <Woodi> but generally speaking thing is like wanting to some bit of small scripting into boring, structural code :)

[13:54] <Woodi> *to have some*

[13:58] <Woodi> FROGGS: that noise is mandatory! it's kind of essential for modem-in-action ;)

[14:00] <Woodi> and "is lazy" is wrong name. laziness to me is connected to messing with structures... trigger maybe ?  but all this thing seems like some layer above normal code sequence...

[14:03] *** Foxcool joined
[14:08] *** domidumont left
[14:09] *** domidumont joined
[14:20] <masak> Woodi: `is lazy` has pretty solid prior art in Moose, though.

[14:21] <masak> Woodi: I don't share your connotation of "messing with structures", fwiw

[14:21] *** molaf joined
[14:35] <DrForr> Naah, laziness is just a delayed action, doesn't *have* to be with data structures.

[14:35] <DrForr> And a far more general act than TIEing an object.

[14:36] <FROGGS> Inline::Perl5 fails :o(

[14:36] <FROGGS> t/call_p6_function_from_p5.t .. ok

[14:36] <FROGGS> panic: MUTEX_LOCK (22) [op.c:697].

[14:36] <FROGGS> err, the failing test file is: t/callables.t

[14:36] *** abraxxa left
[14:38] <DrForr> @a[3200000] = 1; # If your program never uses values from @a beyond 100, why preallocate? :)

[14:39] <FROGGS> weird, I::P5 works when the deprecation message is not printed :o(

[14:41] *** bjz joined
[14:41] *** bjz left
[14:42] *** bjz joined
[14:48] *** phdphil left
[14:50] <[Coke]> Inline::Perl5 tests aren't being run because I can't panda in an ./install directory - could have been failing for some time.

[14:51] <vendethiel> .u II

[14:51] <yoleaux> U+0418 CYRILLIC CAPITAL LETTER I [Lu] (И)

[14:51] <yoleaux> U+0419 CYRILLIC CAPITAL LETTER SHORT I [Lu] (Й)

[14:51] <yoleaux> U+0438 CYRILLIC SMALL LETTER I [Ll] (и)

[14:51] *** Klaudioh joined
[14:54] <FROGGS> [Coke]: it works on my box when I do not pipe the result into a file :S

[14:57] *** darutoko- joined
[15:00] *** darutoko left
[15:01] <hoelzro> o/ #perl6

[15:02] *** fhelmberger left
[15:06] *** Ven joined
[15:12] *** isBEKaml joined
[15:12] *** kurahaupo1 left
[15:14] *** diana_olhovik_ left
[15:17] *** molaf_ joined
[15:20] *** molaf left
[15:20] *** mj41 left
[15:24] *** domidumont left
[15:25] *** domidumont joined
[15:26] *** _mg_ left
[15:29] *** espadrine left
[15:29] *** zakharyas left
[15:29] *** kurahaupo1 joined
[15:30] *** Foxcool left
[15:33] *** FROGGS left
[15:40] *** ssqq joined
[15:40] *** NYC5 joined
[15:40] <NYC5> Hi room

[15:42] <FROGGS[mobile]> hi

[15:43] <ssqq> Hi NYC5

[15:43] <NYC5> Hi ssqq

[15:43] <NYC5> What is this room about?

[15:43] <NYC5> seems sorta lifeless ;-)

[15:43] <ssqq> about Perl 6 language.

[15:43] *** xfix left
[15:44] <ssqq> FROGGS: Could we add token to a grammar dynamically like add method to class?

[15:44] *** lichtkind joined
[15:44] <NYC5> thanks, guess I am in wrong place then

[15:44] <NYC5> take care

[15:44] <NYC5> thanks for response :)

[15:44] <ssqq> NYCS, you are welcome

[15:45] *** NYC5 left
[15:45] *** FROGGS joined
[15:47] *** tinyblak_ left
[15:47] *** xfix joined
[15:47] *** xfix left
[15:47] *** xfix joined
[15:49] *** diana_olhovik_ joined
[15:49] *** _mg_ joined
[15:49] *** _mg_ left
[15:52] *** tinyblak joined
[15:57] <hoelzro> FROGGS[mobile]: do you have any plans/ideas for supporting STL stuff with NativeC++all?

[16:00] *** tinyblak left
[16:00] *** tinyblak joined
[16:01] <timotimo> ssqq: well, you can certainly use mixin to put in new tokens etc

[16:01] <FROGGS> hoelzro: STL?

[16:01] <hoelzro> FROGGS: standard template library

[16:01] <hoelzro> ex. std::string, std::vector

[16:01] <timotimo>  impossible without a C++ compiler

[16:01] <hoelzro> a lot of C++ libraries use them as arguments

[16:01] <hoelzro> timotimo: I figured as much =/

[16:01] <hoelzro> because of the template soup

[16:02] *** gfldex joined
[16:02] <FROGGS> can't we map that to Perl 6 types?

[16:02] <hoelzro> I don't know if we can; the C++ compiler generates a bunch of code when it instantiates a templated type, doesn't it?

[16:03] <ssqq> timotimo: let me have a look 'mixin'.:)

[16:03] <timotimo> ssqq: with "but" and "does"

[16:03] <FROGGS> hoelzro: I guess I need an example

[16:04] <hoelzro> FROGGS: well, std::string is a typedef for std::basic_string<char>

[16:04] <hoelzro> and, iirc, basic_string has a few other template arguments, but the default to "reasonable defaults"

[16:05] <hoelzro> when I have a template type like basic_string, the .so doesn't contain all of the code for methods of that type

[16:05] *** tinyblak left
[16:06] <hoelzro> any method that utilizes the type T is generated for each value provided for T

[16:06] <hoelzro> so basic_string<char> and basic_string<wchar> methods reference entirely different code

[16:06] <vendethiel> hoelzro: "STL" is the name of the *old* library, the c++ standard library is std :)

[16:07] <hoelzro> one thing we *could* do is provide a support library that creates some common templated types for us

[16:07] * hoelzro 's inexperience with C++ is showing =)

[16:07] *** eli-se joined
[16:07] <vendethiel> but yeah, templates have to be in headers files because the compiler needs to specialize them for your types

[16:08] *** domidumont left
[16:08] <hoelzro> right

[16:09] <eli-se> vendethiel: not in C++98!

[16:09] <ssqq> timotimo: have some sample about it?

[16:11] <timotimo> ssqq: there is two modules out there that construct grammars dynamically

[16:12] <ssqq> Css::Grammar?

[16:14] <timotimo> no

[16:14] <timotimo> i'm confused now

[16:14] <timotimo> it seems like this one uses EVAL

[16:15] <timotimo> the BNF one by tadzik

[16:15] <timotimo> all it does is .^add_method before .^compose is called

[16:15] <timotimo> https://github.com/tadzik/Grammar-BNF/blob/master/lib/Grammar/ABNF.pm#L249

[16:17] <ssqq> timotimo: thanks, let me see it carefully.

[16:19] *** KotH joined
[16:19] *** tinyblak joined
[16:19] <KotH> good evening!

[16:20] *** yubimusubi left
[16:21] <timotimo> what part of the star release process ought to grab rakudo/, nqp/ and MoarVM/?

[16:21] <timotimo> because when i use the makefile from star's build tools with --version=daily, they are missing

[16:24] <timotimo> hello KotH 

[16:26] *** spider-mario joined
[16:26] <hoelzro> oh, I forgot the release was today

[16:26] <hoelzro> \o/

[16:27] <FROGGS> hoelzro: and there is no stdlib.so that we can load which exposes these symbols?

[16:27] <hoelzro> FROGGS: in the case of basic_string, there are no symbols

[16:27] <[Coke]> timotimo: step 3 in the star release guide, I think.

[16:27] *** Possum joined
[16:27] <hoelzro> it's all in the headers

[16:28] <FROGGS> timotimo: are you able to upload moarvm release tarballs to moarvm.org?

[16:29] *** domidumont joined
[16:30] <FROGGS> I'll start cutting the moarvm release in about 1.5 hours

[16:32] <[Coke]> FROGGS: ping me if you need me to do the macports step, no worries.

[16:32] <FROGGS> [Coke]: k

[16:40] *** mohij joined
[16:46] *** rindolf left
[16:48] *** rindolf joined
[16:48] <timotimo> no

[16:55] *** jepeway joined
[17:02] *** fhelmberger joined
[17:03] *** telex left
[17:04] *** telex joined
[17:04] *** zakharyas joined
[17:07] *** fhelmberger left
[17:07] *** zakharyas left
[17:10] *** eli-se left
[17:12] *** andreoss joined
[17:17] *** diana_olhovik_ left
[17:23] *** Ven left
[17:23] <andreoss> can i return a path to a existing file without declaring a subset?

[17:25] *** dakkar left
[17:26] <FROGGS> andreoss: you want a constraint on the return value?

[17:26] <TimToady> or do you just want a bareword like in Perl 5?

[17:27] *** zakharyas joined
[17:27] <TimToady> the question is hard to understand...

[17:28] <andreoss> sub xxx($a) returns -> $x { $x.IO.e } { ... }

[17:28] <andreoss> anonymous subset may be?

[17:30] <vendethiel> sub xxx($a where *.IO.e) {} ?

[17:30] <TimToady> you want a type that matches only existing files?

[17:30] <vendethiel> or subset File of Str where *.IO.e;

[17:34] *** tinyblak left
[17:36] <andreoss> i know that having a subset for that will work

[17:36] <vendethiel> I gave you another solution with "where", isn't it good?

[17:36] <andreoss> but are there other ways to put a constaing on returning value?

[17:37] <andreoss> vendethiel: i believe it will be applied to an argument, not to value this sub returns

[17:37] <vendethiel> aah

[17:38] <FROGGS> it is like he wants that:

[17:38] <FROGGS> std: sub foo($a --> IO::Path where *.e) { }

[17:38] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Multiple prefix constraints not yet supported at /tmp/WRPNGh9JRA line 1:␤------> 3sub foo($a --> IO::Path where *.e7⏏5) { }␤Potential difficulties:␤  $a is declared but not used at /tmp/WRPNGh9JRA line 1:␤------> 3sub foo(7⏏…»

[17:38] <FROGGS> TimToady: would that be possible?

[17:39] <skids> I could see that being useful for type calculus, but the error messages are going to be LTA for application-specific purposes versus checking in the function itself.

[17:40] <TimToady> that would just mean you throw an exception if it doesn't match

[17:40] <vendethiel> maybe use POST?

[17:40] <TimToady> likewise

[17:41] *** Ven joined
[17:46] <andreoss> m: proto xxx(|) {  * ; say "hi "}; multi xxx(1) { say 1 }; xxx(1);

[17:46] <camelia> rakudo-moar 7adde5: OUTPUT«hi ␤»

[17:47] *** ssqq left
[17:47] <andreoss> can i have real code inside proto?

[17:47] <tony-o_> did Proc::Async.start[...] .status.exitcode get moved?

[17:47] <tony-o_> andreoss: yes

[17:47] <TimToady> use {*} inside, not *

[17:48] <TimToady> m: proto xxx(|) { {*} ; say "hi "}; multi xxx(1) { say 1 }; xxx(1);

[17:48] <camelia> rakudo-moar 7adde5: OUTPUT«1␤hi ␤»

[17:48] <tony-o_> m: sub x(Str $d) { my proto p { 'p'.say; } EVAL $d; }; x("d()"); d();

[17:48] <camelia> rakudo-moar 7adde5: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sr2c1ikust␤Strange text after block (missing semicolon or comma?)␤at /tmp/sr2c1ikust:1␤------> 3sub x(Str $d) { my proto p { 'p'.say; }7⏏5 EVAL $d; }; x("d()"); d();␤    expecting any of:␤      …»

[17:48] <tony-o_> m: sub x(Str $d) { my proto p { 'p'.say; }; EVAL $d; }; x("d()"); d();

[17:48] <camelia> rakudo-moar 7adde5: OUTPUT«5===SORRY!5=== Error while compiling /tmp/usj6VA8l3a␤Undeclared routine:␤    d used at line 1␤␤»

[17:48] <tony-o_> m: sub x(Str $d) { my proto p { 'p'.say; }; EVAL $d; }; x("d()"); 

[17:48] <camelia> rakudo-moar 7adde5: OUTPUT«5===SORRY!5=== Error while compiling EVAL_0␤Undeclared routine:␤    d used at line 1␤␤»

[17:49] <tony-o_> m: sub x(Str $d) { my proto p { 'p'.say; }; EVAL $d; }; x("p()"); 

[17:49] <camelia> rakudo-moar 7adde5: OUTPUT«p␤»

[17:49] <tony-o_> m: sub x(Str $d) { my proto p { 'p'.say; }; EVAL $d; }; x("p()"); p()

[17:49] <camelia> rakudo-moar 7adde5: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8627h_v8UA␤Undeclared routine:␤    p used at line 1␤␤»

[17:50] <andreoss> m: proto foo(|) { say "multi returns " ~ {*}; } ; multi foo(1) { "path" }; foo(1)

[17:50] <camelia> rakudo-moar 7adde5: OUTPUT«multi returns path␤»

[17:59] *** brrt joined
[17:59] <brrt> \o

[18:01] <brrt> out of interest; tomorrow i'll be 'representing' perl6 on a python conference

[18:01] <brrt> that is to say, wearing my perl6 badge :-)

[18:02] <TimToady> ask them how we can get uptake for our new version :P

[18:02] <brrt> lol

[18:02] <brrt> yeah, i'' do that

[18:04] <Ven> Writing a long commit message always gives me that good-work feel.

[18:05] * brrt wonders just how much of our 'professional work ethic' comes down to just such feelings

[18:05] <Ven> "was I a good boy?" :P

[18:07] <andreoss> m: class Y { multi method BUILD(:$a, :$b) {say $b}; multi method BUILD(:$a) { say $a} } ; Y.new( a => 1).say;

[18:07] <camelia> rakudo-moar 7adde5: OUTPUT«(Any)␤Y.new␤»

[18:09] <isBEKaml> Ven: I think that has more to do with "Look how much I got done!" :-)

[18:09] <Ven> :P

[18:09] <Ven> I think a big part of it is also the feeling you've saved your future self a lot of work, brrt 

[18:09] <brrt> oh, probably, yes

[18:09] <brrt> whether that is actually true, i don't know

[18:11] <brrt> but we're emotional creatures, and if there are things we can do to optimize our happiness in our work, why not

[18:11] <Ven> -Ofun, right? :)

[18:11] <isBEKaml> Ven: The only reason I write long and descriptive commits is, I bundle a *lot* files into a single commit. Like say, one commit per feature(or a changeset). So, you really have to summarize them for sane reading through the logs (later audits or bug hunt)

[18:12] <Ven> isBEKaml: since I've switched to emacs(with evil-mode, obviously), using magit, I realized I was much more prone to splitting my commits and writing nice messages due to the tools being available (interactive committing to only take the changes I'm interested in, say)

[18:13] <isBEKaml> Ven: unfortunately, we're still on svn 

[18:13] <Ven> aw :(

[18:14] *** eli-se joined
[18:15] <isBEKaml> Ven: a lot of commits on svn isn't a very good indicator of productivity, compared to git. I'd attribute that to how you can manipulate your local history while still preserving your files. 

[18:16] <brrt> now that i think of it, i definitely see the value of a proper commit log, especially in 'production' software that you haven't written all by yourself

[18:16] <brrt> as in

[18:16] <brrt> commit: 'Fixed the FooBar' isn't always really helpful

[18:17] <isBEKaml> Ven: so, on svn - having a lot of successive commits is like "so you wasted so much time writing this feature and you had lots of commits to prove you were fighting the code?" sounds like management-speak, but really - there's some truth in it

[18:17] <Ven> I see.

[18:18] *** diana_olhovik_ joined
[18:21] *** sftp joined
[18:32] *** andreoss left
[18:35] *** raiph left
[18:35] *** tinyblak joined
[18:35] *** raiph joined
[18:37] *** mj41 joined
[18:38] *** Ven left
[18:38] *** sue__ joined
[18:39] *** tinyblak left
[18:44] *** [Sno] left
[18:46] *** rindolf left
[18:46] <dalek> rakudo/nom: 2172535 | (Steve Mynott)++ | / (3 files):

[18:46] <dalek> rakudo/nom: three minor typos

[18:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2172535347

[18:46] <dalek> rakudo/nom: b865609 | lizmat++ | / (3 files):

[18:46] <dalek> rakudo/nom: Merge pull request #433 from stmuk/nom

[18:46] <dalek> rakudo/nom: 

[18:46] <dalek> rakudo/nom: three minor typos

[18:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b865609cf1

[18:49] <lizmat> argh, I just realized I'm 45 minutes past FROGGS release window, instead of 15 minutes before

[18:49] <yoleaux> 13:18Z <DrForr> lizmat: #125226 was my own fault, the 'please close this bug' message never made it, apparently.

[18:50] <lizmat> FROGGS: sorry, please revert / ignore if too much trouble

[18:50] <FROGGS> lizmat: no problem

[18:50] <FROGGS> lizmat: I'm not that far yet

[18:50] <lizmat> *phew*

[18:50] <FROGGS> :o)

[18:50] <lizmat> FROGGS++

[18:51] * lizmat is going to do a JVM build and spectest to atone

[18:51] <FROGGS> I might even do the release tomorrow when jnthn does not pup up to upload the moarvm tarball

[18:53] *** muraiki joined
[18:55] <PerlJam> does the moarvm tarball *need* to be there first?  Aren't most people going to come at it from the other end?

[18:55] <PerlJam> (Or do we anticipate that packagers (rpm, deb, whatever) are using the tarballs to make their packages?)

[18:56] <timotimo> hum?

[19:02] <FROGGS> PerlJam: basically the star repo needs the tarball, and rakudo/rakudobrew fetches from git

[19:02] <FROGGS> though, I don't like the idea of doing a partial release...

[19:02] <FROGGS> we can wait a day without doing any harm

[19:03] *** fhelmberger joined
[19:03] <PerlJam> ah. okay

[19:07] *** fhelmberger left
[19:12] *** zakharyas left
[19:16] *** brrt left
[19:17] *** muraiki left
[19:18] * lizmat is investigating breakage in t/01-sanity/54-use-lib.t

[19:18] <lizmat> on the JVM

[19:19] <dalek> rakudo/nom: c006cd1 | FROGGS++ | / (3 files):

[19:19] <dalek> rakudo/nom: replace 'is inlined' trait by HAS scope declarator

[19:19] <dalek> rakudo/nom: 

[19:19] <dalek> rakudo/nom: Attributes in CStructs and CUnions can specify whether they are 'embedded'

[19:19] <dalek> rakudo/nom: into the surrouning structure or referenced. To say the former one will now

[19:19] <dalek> rakudo/nom: be able to use the 'HAS' keyword, to do the latter one uses 'has' as usual.

[19:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c006cd1ad5

[19:20] <FROGGS> lizmat: yes, that's also on my list

[19:21] <FROGGS> TimToady: you can HAS HAS now :o)

[19:21] *** Ven joined
[19:22] *** Ven left
[19:23] <FROGGS> I::P5 keeps working, nice

[19:24] <FROGGS> also the P5 integration tests pass, like they did

[19:24] <timotimo> i don't quite understand the logic behind has vs HAS

[19:24] <timotimo> is HAS a recronym? :)

[19:25] <FROGGS> timotimo: I just know that it was a long discussion, and that jnthn and TimToady agreed on it

[19:25] <FROGGS> no

[19:25] <FROGGS> it probably just means: I REALLY REALLY HAVE IT

[19:25] <timotimo> :D

[19:25] <timotimo> do we warn or err on things that make no sense to HAS?

[19:25] <FROGGS> no

[19:26] <timotimo> do you see a way to do it? if so, you could tell me to do it and i'll try my best

[19:26] <timotimo> like, only allow HAS inside CStruct and CUnion REPR'd classes?

[19:26] <FROGGS> I dunno if I get my hands on the repr at that time

[19:26] *** Ven joined
[19:26] <timotimo> is moar's release already cut?

[19:26] <FROGGS> timotimo: you can try to call .package.repr on $attr

[19:26] <timotimo> if not, we could throw inside P6Opaque's compose reprop

[19:27] * timotimo pulls things

[19:27] <FROGGS> nah, let's do it as early as we can, in NativeCall.pm

[19:27] <timotimo> agreed

[19:27] <timotimo> HAS is declared in NativeCall?

[19:28] * timotimo looks at the commit

[19:28] <timotimo> oh, i get it

[19:28] <timotimo> HAS gets slang'd into our main language by use-ing NativeCall

[19:28] <timotimo> i like that

[19:28] <dalek> roast: a30ffc1 | usev6++ | S (2 files):

[19:28] <dalek> roast: Change test for 'NaN ** 0'

[19:28] <dalek> roast: 

[19:28] <dalek> roast: ... fixes RT #124450

[19:28] <dalek> roast: review: https://github.com/perl6/roast/commit/a30ffc1ed0

[19:29] <FROGGS> timotimo: I don't want to pollute Perl6::Grammar directly

[19:29] <timotimo> aye

[19:31] <tony-o_> does nqp::readfh read nothing from STDIN until it's closed?

[19:33] <tony-o_> nvm - might be a problem with it in this start block

[19:34] <timotimo> FROGGS: yes, i can get the repr there

[19:34] <timotimo> the only ones acceptable are CStruct and CRepr?

[19:34] <dalek> rakudo/nom: 83f09e0 | lizmat++ | src/Perl6/World.nqp:

[19:34] <dalek> rakudo/nom: Make sure @?INC strings are properly ro

[19:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/83f09e0177

[19:35] *** hernan left
[19:35] <FROGGS> timotimo: that are the only ones it is implemented for

[19:35] <FROGGS> so, yes

[19:35] <timotimo> so ... die or warn?

[19:35] <FROGGS> die

[19:35] <timotimo> k

[19:35] <timotimo> X::NYI?

[19:35] <FROGGS> hmmm, no, that might be misleading

[19:36] <FROGGS> or.. maybe yes

[19:36] <FROGGS> yes, NYI might make sense

[19:37] <FROGGS> t/spec/S32-exceptions/misc.rakudo.moar                      (Wstat: 0 Tests: 305 Failed: 1)

[19:37] <FROGGS>   Failed test:  304

[19:37] <FROGGS>   Parse errors: Tests out of sequence.  Found (1) but expected (187)

[19:38] <FROGGS> does somebody else get that too?

[19:38] <lizmat> regularly, usually for a single file in the spectest

[19:39] <lizmat> lemme check again

[19:39] <tony-o_> m: my $p = Proc::Async.new("perl6", "-e", "await start \{ $*IN.read(1).say; \};"); my $r = $p.start; $p.write("0".encode); await $r;

[19:39] <camelia> rakudo-moar b86560: OUTPUT«Cannot use a Buf as a string, but you called the Stringy method on it␤  in block <unit> at /tmp/t1CrH1Kiyd:1␤  in any <unit-outer> at /tmp/t1CrH1Kiyd:1␤␤»

[19:40] <FROGGS> I got this in the run before too, same file, saying Found (2) but expected (187) or so

[19:40] <lizmat> FROGGS: I get utter fails on JVM for nativecall tests now

[19:40] <tony-o_> m: my $p = Proc::Async.new("perl6", "-e", 'await start { $*IN.read(1).say; };'); my $r = $p.start; $p.write("0".encode); awa[C[C[C[C[C[C[C[C[C[C[C[C[C[Cit $r;

[19:40] <camelia> rakudo-moar b86560: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hZez1ZzdO1␤Bogus postfix␤at /tmp/hZez1ZzdO1:1␤------> 3$r = $p.start; $p.write("0".encode); awa7⏏5␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        …»

[19:40] <lizmat> $ perl6-j t/04-nativecall/01-argless.t

[19:40] <lizmat> ===SORRY!===

[19:40] <lizmat> No such method 'AT-KEY' for invocant of type 'BOOTHash'

[19:41] <tony-o_> m: my $p = Proc::Async.new("perl6", "-e", 'await start { $*IN.read(1).say; };'); my $r = $p.start; $p.write("0".encode); await $r;

[19:41] <camelia> rakudo-moar b86560: OUTPUT«Proc::Async is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in method new at src/RESTRICTED.setting:32␤  in block <unit> at /tmp/owVrAL9SPU:1␤  in any <unit-outer> at /tmp/owVrAL9SPU:1␤␤»

[19:41] <FROGGS> k, I'll investigate

[19:42] <itz_> some interesting Bailador failures

[19:44] <dalek> perl6-roast-data: 8af83e5 | coke++ | / (9 files):

[19:44] <dalek> perl6-roast-data: today (automated commit)

[19:44] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8af83e5522

[19:48] <timotimo> FROGGS: so what exception type do we want?

[19:48] <FROGGS> timotimo: X::NYI is fine

[19:48] <dalek> rakudo/nom: c00dded | lizmat++ | t/01-sanity/54-use-lib.t:

[19:48] <dalek> rakudo/nom: Handle different reporting on different backends

[19:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c00dded0eb

[19:49] *** domidumont left
[19:49] <timotimo> couldn't find a good one

[19:49] <timotimo> OK

[19:49] <timotimo> though P6opaque will never get HAS, for example

[19:50] <timotimo> i'd almost use AdHoc instead

[19:50] <FROGGS> well, go ahead

[19:50] <FROGGS> I'm fine with that too

[19:50] <lizmat> FROGGS: the 54-use-lib.t on jvm is fixed now

[19:50] <FROGGS> lizmat++

[19:50] <FROGGS> awesome

[19:50] <lizmat> timotimo: which would be just "die", right ?

[19:50] <timotimo> yes

[19:51] <lizmat> FROGGS: more bad news?

[19:51] <lizmat>  perl6-j t/03-jvm/01-interop.t

[19:51] <lizmat> ===SORRY!===

[19:51] <lizmat> Can not call method 'orig' on a null object

[19:51] <lizmat> ah, it's in World.DEPRECATED

[19:52] <lizmat> looking at that one now as well

[19:52] <FROGGS> yeah, that one is new

[19:52] <tony-o_> submitted a bug for that proc async thing

[19:52] <[Coke]> roast a30ffc1 - we have the same NaN test in two different files. let's kill one of them?

[19:52] *** dolmen joined
[19:52] <FROGGS> tony-o_++

[19:53] <lizmat> seems it is caused by use java::lang::String:from<java>;

[19:53] <lizmat> I did change that the otther day

[19:53] <tony-o_> it happens with channels and sockets too

[19:53] *** brrt joined
[19:56] <timotimo> i'll go with a regular X::AdHoc for now

[19:57] *** xfix left
[19:57] <dalek> rakudo/nom: 36a6de1 | FROGGS++ | lib/NativeCall.pm:

[19:57] <dalek> rakudo/nom: fix accessing %*LANG<MAIN> on jvm

[19:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36a6de1bb8

[19:58] <FROGGS> lizmat: nativecall tests are clean now

[19:58] <timotimo> Can only use HAS on classes with repr CStruct or CUnion, not CUnion

[19:58] <timotimo> ;(

[19:58] <FROGGS> O.o

[19:58] <FROGGS> that's... unfortunate

[19:59] <FROGGS> how do you check it?

[19:59] <FROGGS> and it should mention that it was applied on attributes..

[19:59] <timotimo> perl6 -e 'use NativeCall; class Foo is repr<CUnion> { HAS $.foo }'

[20:00] <timotimo> right

[20:00] <timotimo>             if $attr.package.REPR ne 'CStruct' || $attr.package.REPR ne 'CUnion' {

[20:00] <timotimo>                 die "Can only use HAS on classes with repr CStruct or CUnion, not " ~ $attr.package.REPR;

[20:00] <timotimo>             }

[20:00] <FROGGS> Can only declare HAS scoped attributes in classes of repr CStruct and CUnion

[20:00] <FROGGS> s/||/&&/

[20:00] <timotimo> wait

[20:00] <timotimo> that... yes

[20:00] <FROGGS> :P

[20:01] <FROGGS> how you such mistake? :D

[20:01] <FROGGS> this thinko can bring down entire servers

[20:01] <timotimo> distracted

[20:01] *** salv0 joined
[20:02] <timotimo> one of my hands has been monopolized

[20:02] <FROGGS> cats...

[20:03] <timotimo> should it also warn on int and such?

[20:04] <FROGGS> you can put attribute inside them?

[20:04] <timotimo> hm?

[20:04] <FROGGS> ahh, no, gotcha

[20:04] <timotimo> use NativeCall; class Foo is repr<CUnion> { HAS num $.foo }

[20:04] <FROGGS> it should state that this is a noop I think

[20:04] <FROGGS> like: class Foo { has $!foo is rw }

[20:04] <FROGGS> m: class Foo { has $!foo is rw }

[20:05] <camelia> rakudo-moar 83f09e: OUTPUT«useless use of 'is rw' on $!foo  in any  at src/Perl6/World.nqp:2499␤»

[20:05] <timotimo> warn, thon

[20:05] <timotimo> then

[20:05] <FROGGS> yes, let's do the same here

[20:05] <timotimo> k67hhhhhhhhhhhhhhhhhhhhhh

[20:06] <lizmat> FROGGS: feels like class Foo { has $!foo is rw } is something I broke recently, so I'll look at that if you want

[20:06] <FROGGS> lizmat: why broke?

[20:06] <lizmat> incorrect file/line number ?

[20:07] <FROGGS> ahhh, yes

[20:07] <FROGGS> did not look at that :o)

[20:07] *** ugexe joined
[20:07] <lizmat> the "from Java" err is caused by the deprecation message trying to show file/line number  :-(

[20:07] <FROGGS> ohh

[20:08] *** [Sno] joined
[20:08] <lizmat> it did not do so before

[20:08] <lizmat> changed that with 484e9f708812aaa82ca7f33b8

[20:09] <lizmat> HLL::Compiler.lineof($/.orig, $/.from, :cache(1))

[20:09] <lizmat> seems to be the offender

[20:09] *** andreoss joined
[20:09] <FROGGS> I can attempt to fix if you want

[20:10] <lizmat> the above line should work if we have a $/ there, doesn't it ?

[20:10] <FROGGS> yes

[20:10] <lizmat> ah, but I guess we don't know for sure

[20:11] <FROGGS> umm, we certainly have no $/ there

[20:11] <timotimo> Using a HAS scope for an attribute typed num is useless.  in block  at lib/NativeCall.pm:478

[20:11] <timotimo> looks good?

[20:11] <lizmat> ok, checking for $/ then  :-)

[20:11] <FROGGS> timotimo: sounds weird

[20:11] <timotimo> i typed it with one hand :P

[20:12] <FROGGS> lizmat: we cannot have $/ there, it does not get passed to the method

[20:12] <timotimo> yeah, i'll spell it more like "useless use of"

[20:12] <FROGGS> yeah, exactly :o)

[20:12] <lizmat> FROGGS:  aaahhh

[20:12] <timotimo> Useless use of HAS scope on an attribute with type num.  in block  at lib/NativeCall.pm:478

[20:13] *** darutoko- left
[20:13] <FROGGS> timotimo: it is good enough for me, but you know, me English is not the best :o)

[20:13] <timotimo> :)

[20:14] <timotimo> you're not the best english, are you?

[20:14] <FROGGS> lizmat: I think I know of a patch

[20:14] <lizmat> FROGGS: me too, working on it  :-)

[20:14] <dalek> rakudo/nom: 65aaeec | timotimo++ | lib/NativeCall.pm:

[20:14] <dalek> rakudo/nom: some checks for HAS for reprs and types

[20:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/65aaeec18e

[20:15] *** chansen_ joined
[20:21] <timotimo> i hope this is satisfactory

[20:22] <FROGGS> timotimo++ # it is :o)

[20:22] <andreoss> does BUILDALL call ordinary BUILD with callsame?

[20:23] <timotimo> let me see

[20:23] <timotimo> it does not

[20:24] <timotimo> it doesn't pass on the @autovivs parameter, so it calls with (self, |%attrinit) instead

[20:24] <andreoss> so BUILDALL won't work with multiple BUILDs

[20:24] <dalek> rakudo/nom: 498ce69 | lizmat++ | src/Perl6/ (2 files):

[20:24] <dalek> rakudo/nom: Handle java deprecation message properly

[20:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/498ce696b3

[20:24] *** dolmen left
[20:26] *** isBEKaml left
[20:26] <andreoss> timotimo: ?

[20:28] <brrt> no i don't believe that's right

[20:28] <brrt> BUILD is a submethod iirc

[20:29] <brrt> BUILDALL is a method

[20:29] <timotimo> BUILDALL explicitly works with multiple BUILDs

[20:29] <FROGGS> lizmat: that's exactly what I would have done :o)

[20:29] <brrt> http://doc.perl6.org/language/objects#Object_Construction explains it well enough :-)

[20:30] <lizmat> FROGGS:  hehe

[20:30] <lizmat> FROGGS: btw, make test is now clean for me on JVM

[20:30] <PerlJam> Unless my ack-fu is weak, BUILDALL doesn't appear in the synopses.

[20:30] <timotimo> that's right, BUILDALL is a method in Mu that doesn't get replaced very often

[20:30] * FROGGS still rebuilds

[20:31] * lizmat was glad hearing the new MacBook Pro was out

[20:31] * lizmat was sad to see there was no change in CPU options  :-(

[20:32] <FROGGS> lizmat: what type of change were you hoping for?

[20:32] <lizmat> 20% faster CPU

[20:32] <FROGGS> ahh

[20:32] <tony-o_>  lizmat i'm pretty not happy with the imac i just bought but i'm out of the 14 day window

[20:32] <brrt> lizmat: buy an wintel machine, install linux, be happy ;-)

[20:33] <tony-o_> my 3 year old macbook pro is still faster/smoother

[20:33] <lizmat> brrt: and the wintels have faster CPU's ?

[20:33] <timotimo> lizmat: on wintels you can freely choose your CPU :)

[20:33] <brrt> some do :-)

[20:33] <timotimo> well, not necessarily on a laptop

[20:33] <lizmat> at home we're a mixed Mac / Wintel->Linux place

[20:34] <timotimo> there's probably no laptop with a i7 5960X :)

[20:34] <lizmat> and I hear myself screaming a lot less at my machine and rebooting a lot less than the Linux user in this house

[20:35] <PerlJam> lizmat: that might be a function of the user rather than the OS :)

[20:35] <brrt> apple website says just '2.7Ghz quad core i7

[20:35] <timotimo> PerlJam: to be fair, linux has its nooks and crannies that can drive you up the wall

[20:35] <lizmat> true, and I *am* going deaf, so there may be other factors involved

[20:35] <lizmat> anyway, it's not a good example for me  :-)

[20:35] * geekosaur reboots linux and os x about as often. linux would be less often if it weren't limited to 4GB RAM (and hosted under OS X...)

[20:35] <lizmat> brrt: there's a 2.9Ghz i7 option

[20:36] <PerlJam> timotimo: indeed.  Graphics cards always seem to be hit-or-miss with me on linux

[20:36] <brrt> which would be which model exactly?

[20:36] <andreoss> can't have proto on BUILD?

[20:36] <timotimo> graphics cards? i've had very little issue with my nvidia cards and the intel integrated gpus for a long time now

[20:36] <timotimo> the intel integrated gpus have superb drivers and feature sets, but they are not exactly powerful

[20:37] <lizmat> (hmmm.. I meant 2.8Ghz i7 option)

[20:37] <skids> timotimo: no surprise there it's the ATIs that kill you.

[20:37] <andreoss> m: class Y { proto submethod BUILD(|) { {*} } ; multi submethod BUILD($a) {} }

[20:37] <camelia> rakudo-moar 36a6de: OUTPUT«===SORRY!===␤Package 'Y' already has a Method 'BUILD' (did you mean to declare a multi-method?)␤»

[20:37] <lizmat> which is what I have noew already

[20:37] <timotimo> i've stayed away from ati for a long time

[20:37] <timotimo> i'm not sure i ever had an ati at all

[20:37] <skids> I went through a phase of wanting to like them.  It wore off after repeated exposure.

[20:38] <lizmat> afk for a bit&

[20:38] *** diana_olhovik_ left
[20:38] <brrt> see you

[20:38] <jercos> I haven't had good luck with ATi cards, but my AMD cards have always been fine on Linux.

[20:39] <brrt> (i still have failed to actually use the GPU now that I have a real one)

[20:39] <timotimo> AMD has the superior open source driver scheme; has for at least 2 years i believe

[20:42] <andreoss> i'm trying to call BUILD explicitly from BUILDALL, but hash with arguments seems to have keys in random order so the signatures don't match.

[20:42] <skids> Maybe, but every radeon I've used has had issues with bus timing or overheat.  There always was an excuse why some part of the hardware could not be openly documented, and the result was always instability.

[20:43] <skids> I'm on Intel now and won;t even look at anything else until I want a gaming system again.

[20:43] <brrt> (i can't imagine wanting >2,8Ghz on a laptop though :-))

[20:43] *** molaf_ left
[20:43] <timotimo> ah. i want to do a bit of gaming every now and then - also some game development hopefully at some point ;)

[20:44] <skids> I'll be jumping back in with pure-linux steamboxen eventually.  Probably nvidia.

[20:44] <brrt> i'm sooo avoiding homework today :-)

[20:45] *** diana_olhovik_ joined
[20:45] *** dolmen joined
[20:45] <brrt> nouveau driver works wel enough, it seems, but the optimus / bumblebee stuff doesn't work at al

[20:45] <brrt> courtesy of **** selinux

[20:45] <timotimo> aaw

[20:46] <timotimo> well, modern GPUs and security is kind of mutually exclusive anyway

[20:47] <brrt> have i not root for this machine?

[20:47] <brrt> in selinux lands, machine has root of you

[20:48] <FROGGS> lizmat: I can confirm that 'make test' is clean on jvm and moar

[20:49] <lizmat> :-)

[20:49] <FROGGS> I am finishing going through all commits of the month and update the changelog and will then rest a bit

[20:50] <brrt> ok, i'm going to poll a bit bigger; who thinks it'd be fun/interesting if i did a talk on JIT compilation at YAPC::EU?

[20:50] <FROGGS> +1

[20:50] <FROGGS> that will attract ppl I think

[20:50] <PerlJam> brrt: I'm not going to be at YAPC::EU, but I would look forward to the video of your talk  :)

[20:51] <brrt> ah well. then i'll just propose something :-)

[20:52] <lizmat> FROGGS: t/04-nativecall/02-simple-args.t still has 2 fails for me on Moar

[20:52] <FROGGS> lizmat: yes, I looked at that today but I cannot sport anything wrong...

[20:52] <lizmat> so it's only on OS X ?

[20:53] <FROGGS> given it works on 32/64bit linux and 32/64bit windows

[20:53] <FROGGS> yeah

[20:53] <FROGGS> seems like

[20:53] <FROGGS> perhaps any BSD

[20:53] <FROGGS> I can test that on an openbsd in a bit

[20:55] *** skids left
[20:55] <lizmat> FROGGS: in CompileTestLib, there's a if $VM.name eq 'parrot'

[20:56] <lizmat> I guess it doesn't hurt to keep it?

[20:56] <FROGGS> you can remove it if you want

[20:57] <FROGGS> today I doubt that there will be volunteers that revive parrot

[20:57] <dalek> rakudo/nom: 1d803b8 | lizmat++ | t/04-nativecall/CompileTestLib.pm:

[20:57] <dalek> rakudo/nom: Remove some more feathers

[20:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d803b84f6

[20:59] <lizmat> FROGGS: looks like x is -2 inside TakeUint8 / TakeUint16

[21:01] <brrt> re:talk, 20 minutes or 50?

[21:01] <PerlJam> brrt: if you can fill 50 minutes, do it!  :)

[21:01] <lizmat> FROGGS: sorry, that seems  wrong

[21:01] <FROGGS> lizmat: yes, I expected that it somehow messes up unsigned vs signed

[21:01] <lizmat> when I add a "printf("x = %d\n",x);"

[21:02] <lizmat> I get 254 and 65534 respectively

[21:02] <FROGGS> but that would be correct

[21:02] <brrt> hmm, there is plenty to talk about for 50 minutes or longer; but that also moves up the level of detail

[21:03] <lizmat> FROGGS: indeed, so the check seems the problem

[21:03] <FROGGS> there is no clang warning?

[21:03] <brrt> also, now we're on the topic of hardware. i'm looking for a new phone. budget at most E150, preferably android or firefox phone or something like that

[21:03] <lizmat> not that I can see

[21:04] <FROGGS> what about changing it to: if ((unsigned char)x == (unsigned char)0xFE)

[21:04] <lizmat> will try

[21:05] <FROGGS> tests are clean on openbsd fwiw

[21:06] <lizmat> nope, no difference

[21:06] <tony-o_> firefox phone looked like it had the right idea

[21:07] <tony-o_> shame it was laggy like android

[21:08] <itz_> there are cheap chinese android phones but a 2nd hand Nexus 4 or similar might have more cyanogenmod etc support

[21:08] <FROGGS> lizmat: stackoverflow says we need to cast both to unsigned int... can you try that?

[21:09] <lizmat> trying

[21:09] <lizmat> nah  :-(

[21:09] <FROGGS> hmpf

[21:10] *** spider-mario left
[21:11] <lizmat> if I put a 'printf("x = %d = %d\n",x,0xFE);'

[21:11] <lizmat> I get: x = 254 = 254

[21:11] <tony-o_> the nexus 4 with cyanogenmod is pretty nice itz_ brrt 

[21:11] <brrt> firefox phone looks like it's unavailable

[21:12] <andreoss> m: my $x = ''; say so $x.IO.e;

[21:12] <camelia> rakudo-moar 498ce6: OUTPUT«True␤»

[21:12] *** Ven left
[21:12] <FROGGS> brrt: do you know why this check fails?

[21:12] <FROGGS> brrt: this https://github.com/rakudo/rakudo/blob/nom/t/04-nativecall/02-simple-args.c#L80

[21:12] <itz_> you could be the one person to get a ubuntu phone :)

[21:13] <lizmat> andreoss: looks like "" refers to the current dir

[21:13] *** spider-mario joined
[21:13] <brrt> FROGGS - frankly i haven't seen that yet :-) i will see

[21:13] <lizmat> m: say "".IO

[21:13] <camelia> rakudo-moar 498ce6: OUTPUT«"/home/camelia".IO␤»

[21:14] <geekosaur> unix used to do that, posix made it explicitly illegal

[21:14] <andreoss> m:  say "".IO leg $*CWD

[21:14] <camelia> rakudo-moar 498ce6: OUTPUT«Less␤»

[21:14] <brrt> 0xfe is 254 right

[21:14] <FROGGS> m: say 0xfe == 254

[21:14] <camelia> rakudo-moar 498ce6: OUTPUT«True␤»

[21:15] <timotimo> i wonder why there's no 0d for decimal?

[21:15] <lizmat> m: say "".IO.Str; say $*CWD.Str  # andreoss

[21:15] <camelia> rakudo-moar 498ce6: OUTPUT«␤/home/camelia␤»

[21:15] <FROGGS> m: say 0d42

[21:15] <camelia> rakudo-moar 498ce6: OUTPUT«42␤»

[21:15] *** diana_olhovik_ left
[21:15] <FROGGS> timotimo: ^^

[21:15] <brrt> FROGGS - i can imagine a bunch of things, really

[21:16] <brrt> i'd need gdb to figure it out

[21:16] <FROGGS> hmmm, I an do that too

[21:16] <timotimo> oh

[21:16] <FROGGS> ohh no, I cant

[21:16] <timotimo> neat!

[21:16] <FROGGS> it is osx specific :/

[21:16] <brrt> hmm

[21:16] <lizmat> FROGGS: well, clang specific, I would guess

[21:16] <brrt> i can't check further then, today

[21:17] <brrt> clang moarvm does it? that's interesting

[21:17] <brrt> but i'm afk for now

[21:17] *** brrt left
[21:18] <lizmat> FROGGS: FWIW, I've run both clang calls manually, and there are no warnings of any kind

[21:18] <lizmat> clang -c  -o 02-simple-args.o -fno-omit-frame-pointer -fno-optimize-sibling-calls -O3 -DNDEBUG  -D_DARWIN_USE_64_BIT_INODE=1  t/04-nativecall/02-simple-args.c

[21:18] <lizmat> clang -dynamiclib  -O3 -DNDEBUG -Wl,-rpath,/Users/liz/Github/rakudo.moar/install/lib -Wl,-rpath,/Users/liz/Github/rakudo.moar/install/share/perl6/site/lib -lpthread -o 02-simple-args.dylib 02-simple-args.o

[21:18] <lizmat> are you seeing anything funny with that ?

[21:18] *** mj41 left
[21:19] <FROGGS> well, only -O3

[21:19] <FROGGS> but, I'm just guessing wildly

[21:19] <lizmat> yeah, that was just what I was trying to remove  :-)

[21:21] <andreoss> m: say shell "echo 1 2>/dev/null";

[21:21] <camelia> rakudo-moar 1d803b: OUTPUT«shell is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub shell at src/RESTRICTED.setting:15␤  in block <unit> at /tmp/MkomvNJk6M:1␤  in any <unit-outer> at /tmp/MkomvNJk6M:1␤␤»

[21:23] <lizmat> FROGGS: removing -O3 makes it pass

[21:24] <lizmat> also fails with -O2 and -O1

[21:24] <FROGGS> hmmmm, so we need to change the default in moar until we know what e.... ewww

[21:24] <lizmat> so, shall I just remove the -O3 for all ?

[21:25] <FROGGS> that is passed from moar's config

[21:25] <lizmat> well, I could add a named param :noopt to compile_test_lib and pass that in the case of OS X for that file ?

[21:26] <FROGGS> no, let us skip these tests instead

[21:26] <lizmat> skip?

[21:27] <lizmat> not todo ?

[21:27] <lizmat> ah yes, skip

[21:27] <tadzik> FROGGS: I won't be able to fix aything for.the.next few weeks, I'm far away from any computer of mine :)

[21:27] <yoleaux> 13:34Z <FROGGS> tadzik: 1) please add curlies to package decls to File::Find, Shell::Command and JSON::Tiny

[21:27] <yoleaux> 13:34Z <FROGGS> tadzik: 2) the 'build reverse deps feature' builds reverse deps of not yet installed modules, but it does not install their deps

[21:28] *** Zoffix left
[21:28] <FROGGS> tadzik: bah

[21:28] <FROGGS> tadzik: give me a commit bit then :o)

[21:29] <lizmat> FROGGS: I can merge some pull requests

[21:29] <FROGGS> lizmat: for File::Find, Shell::Command and JSON::Tiny?

[21:29] <tadzik> oh, I can do that :)

[21:29] <lizmat> just did Shell::Command

[21:29] <FROGGS> ahh, cool

[21:29] <lizmat> itz already did some PR's

[21:30] <FROGGS> tadzik: but I'd take commit bits anyway :o)

[21:30] <lizmat> FROGGS: skipping the test would mean commenting them out, as there is no fudging in 'make test', right ?

[21:30] *** cognominal left
[21:31] *** cognominal joined
[21:32] <FROGGS> lizmat: it uses Test.pm, and we can check for $*VM.compiler.backend

[21:32] <FROGGS> m: say $*VM.compiler.backend

[21:32] <camelia> rakudo-moar 1d803b: OUTPUT«Method 'compiler' not found for invocant of class 'VM'␤  in block <unit> at /tmp/ARy_UnEhVq:1␤  in any <unit-outer> at /tmp/ARy_UnEhVq:1␤␤»

[21:32] <FROGGS> m: say $*PERL.compiler.backend

[21:32] <camelia> rakudo-moar 1d803b: OUTPUT«Method 'backend' not found for invocant of class 'Compiler'␤  in block <unit> at /tmp/iO3Gv58Glj:1␤  in any <unit-outer> at /tmp/iO3Gv58Glj:1␤␤»

[21:32] <FROGGS> m: say $*PERL.compiler.^methods

[21:32] <camelia> rakudo-moar 1d803b: OUTPUT«BUILD Str gist <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon>␤»

[21:32] <FROGGS> m: say $*PERL.compiler

[21:32] <camelia> rakudo-moar 1d803b: OUTPUT«rakudo (2015.4.353.g.1.d.803.b.8)␤»

[21:32] <FROGGS> m: say $*PERL.backend

[21:32] <camelia> rakudo-moar 1d803b: OUTPUT«Method 'backend' not found for invocant of class 'Perl'␤  in block <unit> at /tmp/539aTddq69:1␤  in any <unit-outer> at /tmp/539aTddq69:1␤␤»

[21:32] <FROGGS> hmpf

[21:32] <lizmat> say $*KERNEL.name 

[21:32] <lizmat> m: say $*KERNEL.name 

[21:32] <camelia> rakudo-moar 1d803b: OUTPUT«linux␤»

[21:33] <lizmat> ?

[21:33] <lizmat> $ 6 'say $*DISTRO.name' 

[21:33] <lizmat> macosx

[21:33] <lizmat> perhaps ?

[21:33] <FROGGS> yes, that will do too

[21:36] <dalek> rakudo/nom: 2b08d6f | lizmat++ | t/04-nativecall/02-simple-args.t:

[21:36] <dalek> rakudo/nom: Skip 0xFE/0xFFFE tests on OS X

[21:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b08d6f0fa

[21:37] *** vendethiel left
[21:37] <ugexe> m: role BB { method ok { ... }; method ok2 { 2 } }; class AA does BB { method ok { 1 } }; my $c = AA.new; say $c.ok; say $c.ok2; say $c.^roles; # role introspection bug?

[21:37] <camelia> rakudo-moar 1d803b: OUTPUT«1␤2␤Method 'ok' must be implemented by BB because it is required by a role␤  in any compose_method_table at src/gen/m-Metamodel.nqp:2606␤  in any apply at src/gen/m-Metamodel.nqp:2616␤  in any compose at src/gen/m-Metamodel.nqp:2752␤  in any ma…»

[21:37] <lizmat> hmmm... t/04-nativecall/13-union.t just flapped on me

[21:37] <lizmat> FROGGS: otherwise, make test is now clean for me as well on moar

[21:38] <FROGGS> nice :o)

[21:38] <FROGGS> eww, flapped?

[21:39] <lizmat> yeah: t/04-nativecall/13-union.t         (Wstat: 65280 Tests: 26 Failed: 0)

[21:39] <lizmat>   Non-zero exit status: 255

[21:39] <lizmat>   Parse errors: Bad plan.  You planned 28 tests but ran 26.

[21:40] <FROGGS> phew, have now 114 changelog lines I need to add and dedup/rephrase

[21:41] <lizmat> well, I hope it is less work collecting all of the 114 in the first place ?

[21:41] <FROGGS> no, took a while

[21:42] <FROGGS> will get some rest now...

[21:42] <FROGGS> gnight lizmat 

[21:42] *** FROGGS left
[21:43] <timotimo> good night froggs :)

[21:44] <lizmat> gnight FROGGS

[21:52] *** cognominal left
[21:52] *** cognominal joined
[21:59] *** eli-se left
[22:04] <lizmat> good night, #perl6!

[22:06] *** vendethiel joined
[22:07] *** tadzik left
[22:09] <timotimo> gnite lizmat :)

[22:12] *** RabidGravy left
[22:12] <andreoss> what the difference between "<->" and "->"?

[22:12] <andreoss> *is between

[22:13] <timotimo> <-> makes the parameter "is rw"

[22:13] <timotimo> my @a = 1, 2, 3; for @a <-> $_ { $_ += 5 }; say @a

[22:13] <timotimo> m: my @a = 1, 2, 3; for @a <-> $_ { $_ += 5 }; say @a

[22:13] <camelia> rakudo-moar 2b08d6: OUTPUT«6 7 8␤»

[22:13] <timotimo> m: my @a = 1, 2, 3; for @a -> $_ { $_ += 5 }; say @a

[22:13] <camelia> rakudo-moar 2b08d6: OUTPUT«Cannot assign to a readonly variable or a value␤  in block <unit> at /tmp/I_BYqr_twe:1␤  in any <unit-outer> at /tmp/I_BYqr_twe:1␤␤»

[22:13] <timotimo> note that <-> $_ is the default for for loops

[22:13] <timotimo> m: my @a = 1, 2, 3; for @a { $_ += 5 }; say @a

[22:13] <camelia> rakudo-moar 2b08d6: OUTPUT«6 7 8␤»

[22:14] *** raiph left
[22:14] <andreoss> thanks

[22:18] *** Alina-malina left
[22:21] *** raiph joined
[22:23] *** Alina-malina joined
[22:30] *** sue__ left
[22:31] *** dolmen left
[22:34] *** tadzik joined
[22:39] *** skids joined
[22:47] *** vendethiel left
[22:51] *** bjz left
[23:02] *** raiph left
[23:08] *** kaare__ left
[23:09] *** raiph joined
[23:14] *** andreoss left
[23:25] *** xiaomiao joined
[23:32] *** gfldex left
[23:35] *** telex left
[23:36] *** telex joined
[23:40] *** jepeway left
[23:47] *** jepeway joined
[23:50] *** mohij left
