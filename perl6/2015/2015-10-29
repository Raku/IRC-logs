[00:01] *** espadrine left
[00:02] *** n0tjack left
[00:04] <RabidGravy> right finally fixed that last to the ecosystem

[00:04] <RabidGravy> me-- # typotastic

[00:06] *** _dolmen_ left
[00:06] <dalek> perl6-most-wanted: 8181e56 | timo++ | most-wanted/modules.md:

[00:06] <dalek> perl6-most-wanted: add azawawi++ 's File::Zip as a WIP

[00:06] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/8181e567e4

[00:07] *** raiph joined
[00:07] <lizmat> .tell rarara__  I've completed GLRifying Str.split, but still need to look at a few spectest fails, will continue after some sleep

[00:07] <yoleaux> lizmat: I'll pass your message to rarara__.

[00:07] <lizmat> good night, #perl6!

[00:10] <RabidGravy> right, that's enough.  See you all in the morning

[00:11] *** f33r3x joined
[00:12] *** f33r3x left
[00:14] *** xpen joined
[00:15] *** RabidGravy left
[00:15] *** softmoth left
[00:15] *** spider-mario left
[00:19] *** xpen left
[00:25] *** tokuhirom joined
[00:28] *** leont left
[00:29] *** yeahnoob joined
[00:29] *** tokuhirom left
[00:33] *** ChoHag left
[00:42] *** kid51 joined
[00:42] *** _dolmen_ joined
[00:44] *** rangerprice joined
[00:48] *** n0tjack joined
[00:49] *** Actualeyes joined
[00:52] *** n0tjack left
[01:08] *** BenGoldberg left
[01:08] *** BenGoldberg joined
[01:09] *** tokuhirom joined
[01:09] *** BenGoldberg left
[01:10] *** BenGoldberg joined
[01:13] *** lsm-desktop joined
[01:20] *** TimToady joined
[01:21] *** n0tjack joined
[01:22] *** _dolmen_ left
[01:32] *** rurban left
[01:47] *** AlexDaniel left
[01:48] <tokuhirom> Is there a ruby's Thread.kill(thr) in perl6?

[01:48] <gfldex> not yet

[01:49] *** rangerprice left
[01:49] <tokuhirom> oh

[01:50] *** kid51 left
[01:53] <tokuhirom> my test script never stop since it runs thread and the script never join the thread :(

[01:54] *** adu joined
[01:54] <tokuhirom> until a few days ago it was running

[01:54] <tokuhirom> since done-testing calls exit(0).

[01:54] <gfldex> such are the way of a beta release

[01:54] <tokuhirom> but now, it never call exit(0) https://github.com/rakudo/rakudo/commit/6063886343a9e32ddc6df0ed8cee5e36f9d24de3

[01:54] <tokuhirom> yah, i know

[01:56] *** n0tjack left
[01:56] <gfldex> you could file a rakudobug or your provide a gist so somebody with sufficient knowledge can have a look

[01:56] *** softmoth joined
[01:57] <adu> exit(0) in a test?

[01:57] <adu> That seems like a poorly written test

[01:58] <tokuhirom> yes. my test case is not good

[01:58] <adu> oh wait, that's lib test

[02:01] *** softmoth left
[02:01] <tokuhirom> i want to test a script like

[02:01] <tokuhirom> Thread.start({ (server runs here) }); (client access to the server); done-testing;

[02:04] *** adu left
[02:11] *** n0tjack joined
[02:11] <japhb> .ask nine Why did you use reified.push in 07f186d rather than nqp::push and .CREATE instead of nqp::create?

[02:11] <yoleaux> japhb: I'll pass your message to nine.

[02:13] <japhb> Grepping the Rakudo source, there are 93 CREATE and 198 nqp::create; it's not at all clear to me when to prefer one to the other, given that Mu.CREATE just calls nqp::create(self)

[02:15] *** xpen joined
[02:16] *** n0tjack left
[02:19] *** Oatmeal left
[02:19] *** xpen left
[02:20] *** xpen joined
[02:26] *** Juerd left
[02:29] *** Oatmeal joined
[02:30] *** Juerd joined
[02:36] *** Oatmeal left
[02:37] *** vendethiel joined
[02:42] *** dayangkun joined
[02:43] *** Actualeyes left
[02:46] *** ilbot3 joined
[02:47] *** Oatmeal joined
[02:50] *** llfourn joined
[02:51] *** Oatmeal left
[02:57] *** Oatmeal joined
[03:03] *** Oatmeal left
[03:06] *** kaare_ joined
[03:10] *** Oatmeal joined
[03:10] *** Oatmeal left
[03:11] *** adu joined
[03:14] *** dayangkun left
[03:16] *** dayangkun joined
[03:31] *** BenGoldberg left
[03:32] *** vendethiel left
[03:44] *** softmoth joined
[03:49] *** softmoth left
[03:51] *** CJKinni_ left
[04:00] *** Zoffix left
[04:07] *** TimToady left
[04:08] *** TimToady joined
[04:22] *** Actualeyes joined
[04:24] *** adu left
[04:32] *** MadcapJake joined
[04:38] *** n0tjack joined
[04:42] *** n0tjack left
[04:54] *** jasanj joined
[04:57] *** aborazmeh joined
[04:57] *** aborazmeh left
[04:57] *** aborazmeh joined
[05:03] <Hotkeys> I can't seem to get to pages on http://doc.perl6.org that have a '/'

[05:03] <Hotkeys> I assume because of url funkiness

[05:03] <Hotkeys> eg http://doc.perl6.org/syntax/%24%2F

[05:03] <Hotkeys> ($/)

[05:07] *** Zoffix joined
[05:09] <Hotkeys> then again it doesn't even exist in http://doc.perl6.org/syntax/

[05:09] *** skids left
[05:11] <mst> if it's apache, maybe it needs AllowEncodedSlashes

[05:11] *** raiph left
[05:17] *** pollei left
[05:19] *** domm joined
[05:23] *** domm left
[05:24] *** ingy joined
[05:33] *** softmoth joined
[05:36] *** FROGGS joined
[05:37] *** softmoth left
[05:43] *** aborazmeh left
[05:43] *** uruwi joined
[05:47] *** protium joined
[05:49] *** crux joined
[05:54] *** khw left
[05:58] *** domm joined
[06:06] <dalek> rakudo/nom: e154644 | TimToady++ | src/Perl6/Grammar.nqp:

[06:06] <dalek> rakudo/nom: recognize metaop categoricals that need autogen

[06:06] <dalek> rakudo/nom: 

[06:06] <dalek> rakudo/nom: The actual autogen is NYI, but at least we report that now.

[06:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e1546446f9

[06:19] <TimToady> m: &infix:<X+>  # before

[06:19] <camelia> rakudo-moar 07f186: OUTPUT«5===SORRY!5=== Error while compiling /tmp/oyRnITEL_o␤Undeclared routine:␤    &infix:<X+> used at line 1. Did you mean '&infix:<∖>', '&infix:<lt>', '&infix:<eq>', '&infix:<o>', '&infix:<~|>'?␤␤»

[06:19] *** adhoc joined
[06:22] <psch> TimToady: the patch misses e.g. &infix:['X+'], doesn't it?

[06:23] <TimToady> hmm, I thought we were post-canonicalization there...

[06:24] <psch> oh, that might be, yes.  i'm asking because i don't know :)

[06:24] <TimToady> m: &infix:<X+>  # after

[06:25] <camelia> rakudo-moar e15464: OUTPUT«5===SORRY!5=== Error while compiling /tmp/idyQIfBS8I␤Autogeneration of X+ infix not yet implemented. Sorry. ␤at /tmp/idyQIfBS8I:1␤------> 3&infix:<X+>7⏏5  # after␤    expecting any of:␤        postfix␤»

[06:25] <psch> m: &infix:['X+']

[06:25] <camelia> rakudo-moar e15464: OUTPUT«5===SORRY!5=== Error while compiling /tmp/3vzfBfORhw␤Undeclared routine:␤    &infix:<X+> used at line 1. Did you mean '&infix:<∖>', '&infix:<lt>', '&infix:<eq>', '&infix:<o>', '&infix:<~|>'?␤␤»

[06:25] <TimToady> but it doesn't seem to work right

[06:25] *** domm left
[06:25] <TimToady> note it's canonicalized by the time it gives that error though, hmm

[06:31] *** abaugher joined
[06:41] *** FROGGS_ joined
[06:42] *** FROGGS left
[06:44] <dalek> rakudo/nom: f69d5d7 | TimToady++ | src/Perl6/Grammar.nqp:

[06:44] <dalek> rakudo/nom: use pre-canonicalized name of function, psch++

[06:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f69d5d73a4

[06:47] <TimToady> anyway, it already parses the metaop inside and produces the ast for it; someone just needs to wrap that up in a function and poke it back into the symbol

[06:47] *** FROGGS__ joined
[06:48] * TimToady is going to bed soon, so will leave that for someone else to do, if they want to work on that while I sleep :)

[06:48] *** FROGGS_ left
[06:49] <TimToady> any, should work with :[] in half an hour or so

[06:49] <TimToady> *anyway

[06:50] <TimToady> works locally, even with &infix:['X' ~ '+']

[06:51] *** FROGGS__ left
[06:53] *** ChoHag joined
[06:57] *** geraud left
[07:05] *** domm joined
[07:05] *** n0tjack joined
[07:07] <nine> Good morning, #perl6!

[07:07] <yoleaux> 02:11Z <japhb> nine: Why did you use reified.push in 07f186d rather than nqp::push and .CREATE instead of nqp::create?

[07:10] *** n0tjack left
[07:10] *** RabidGravy joined
[07:11] *** cognominal joined
[07:11] <nine> .tell japhb the truth? I cargo culted .CREATE without thinking that much about it. I had a look at IterationBuffer.push, saw that it just does nqp::push and thought that if we cannot inline that, we have much bigger problems. So I rather avoided breaking encapsulation.

[07:11] <yoleaux> nine: I'll pass your message to japhb.

[07:13] *** domm left
[07:13] *** domm joined
[07:14] <nine> .tell japhb The good news is, that indeed, it does not matter all that much. Using nqp::push directly would be about 3 % faster. My guess is that once spesh did it's work, they're equal.

[07:14] <yoleaux> nine: I'll pass your message to japhb.

[07:15] <[Tux]> test             50000    40.446    40.329

[07:15] <[Tux]> test-t           50000    40.058    39.941

[07:15] *** rindolf joined
[07:17] *** _dolmen_ joined
[07:19] *** risou joined
[07:21] *** softmoth joined
[07:22] *** domm left
[07:22] *** azawawi joined
[07:22] <azawawi> good morning #perl6

[07:25] <TimToady> m: &infix:['X' ~ '+']

[07:25] <camelia> rakudo-moar f69d5d: OUTPUT«5===SORRY!5=== Error while compiling /tmp/RO3scemCYF␤Autogeneration of X+ infix not yet implemented. Sorry. ␤at /tmp/RO3scemCYF:1␤------> 3&infix:['X' ~ '+']7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[07:25] <TimToady> there we go

[07:25] <TimToady> night everyone &

[07:25] *** softmoth left
[07:26] <RabidGravy> marning!

[07:28] *** cognominal left
[07:28] *** cognominal joined
[07:33] <azawawi> RabidGravy: im seeing 7.8 seconds to 8 seconds on File::Zip test today with the latest rakudo... :)

[07:33] <RabidGravy> yay! groovy

[07:33] *** darutoko joined
[07:34] <azawawi> Groovy is cool also as a language :)

[07:34] <azawawi> oops lol

[07:34] <RabidGravy> found the module I was thinking of when someone asked about enums the other day https://github.com/jonathanstowe/Log-Syslog-Native/blob/master/lib/Log/Syslog/Native.pm

[07:34] <azawawi> Groovy is good btw for embedding changing business logic in Java land

[07:34] <RabidGravy> I'd actually forgotten I wrote that

[07:35] <azawawi> btw what happened to seek(..., $whence) constants?

[07:36] <azawawi> why not adverbs also?

[07:36] <azawawi> seek( $offset, :first | :last | :current )

[07:37] <RabidGravy> I think I fixed it to use multis just before I went on holiday and then forgot about it

[07:37] <moritz> adverbs are better when they compose

[07:37] <moritz> seek($offset, :first, :last)

[07:37] <moritz> WAT?

[07:37] <azawawi> moritz: i see

[07:37] <azawawi> moritz: good morning

[07:38] <RabidGravy> but an enum would be good

[07:38] <moritz> azawawi: good morning :-)

[07:38] <azawawi> moritz: but then again enums would be faster

[07:39] * azawawi time to test zef

[07:43] <azawawi> so why not make git tags useful for a command like the following "panda install $module@$tag-version"

[07:43] <azawawi> like https://github.com/tadzik/panda/tags

[07:44] *** FROGGS joined
[07:45] *** lolisa joined
[07:48] *** bjz joined
[07:52] *** _dolmen_ left
[07:56] *** yeahnoob left
[07:57] *** abraxxa joined
[07:58] <moritz> azawawi: I'd prefer it if we actually released modules, gave them versions, uploaded them seomewhere (PAUSE?), and then taught panda to install released versions

[07:59] <azawawi> moritz: so then we have actual archives with checksums to verify them

[07:59] *** yeahnoob joined
[08:02] <azawawi> zef is so slow fyi compared to panda

[08:02] <azawawi> why is it "Initializing" on every run?

[08:06] <moritz> but I think zef still precompiles, no?

[08:08] <FROGGS> and zef can install stuff concurrently

[08:08] <FROGGS> azawawi: maybe so you can an updated distribution list every time?

[08:09] <FROGGS> the Perl 5 cpan client does it once a day by default I think

[08:10] <azawawi> i think the panda approach is the safest way

[08:11] <azawawi> though it can be enhanced when failing to install a module to say to the user "maybe use `panda update` and reinstall?"

[08:11] <azawawi> or better ask the user to issue an update and reinstall

[08:12] <azawawi> or go automated to try to do it anyway without asking the user

[08:12] <azawawi> panda install XYZ  # if it fails, panda runs update and try to installs it again

[08:15] * azawawi tries panda on windows again

[08:19] *** espadrine joined
[08:21] <azawawi> failed t\01-sanity\55-use-trace.t on windows

[08:23] <azawawi> hmmm

[08:23] <azawawi> no .bat for binaries on windows

[08:23] <azawawi> panda has no panda.bat

[08:23] <azawawi>  s/binaries/scripts

[08:24] <azawawi> FROGGS: i remember that you fixed it last time, right?

[08:25] *** Actualeyes left
[08:26] *** ely-se joined
[08:30] <moritz> m: sub f(:$*A) { say $*A }; my $*A = 42; await start f :$*A

[08:30] <camelia> rakudo-moar f69d5d: OUTPUT«Dynamic variable $*A not found␤  in block <unit> at /tmp/5rYG6okbFW:1␤␤»

[08:30] <moritz> :(

[08:31] <moritz> m: sub f { say $*A }; my $*A = 42; f;

[08:31] <camelia> rakudo-moar f69d5d: OUTPUT«42␤»

[08:31] <moritz> m: sub f { say $*A }; my $*A = 42; await start f;

[08:31] <camelia> rakudo-moar f69d5d: OUTPUT«Dynamic variable $*A not found␤  in block <unit> at /tmp/jDdv9_jkJO:1␤␤»

[08:32] <moritz> is that by design?

[08:32] <moritz> and if yes, how do I get dynamic variables into a thread?

[08:33] <FROGGS> azawawi: no, I didnt

[08:33] <moritz> m: sub f(:$*A) { say $*A }; my $*A = 42; my $A = $*A; await start f :$A

[08:33] <camelia> rakudo-moar f69d5d: OUTPUT«42␤»

[08:33] <moritz> this seems to work

[08:34] *** espadrine left
[08:34] <azawawi> Perl 6 is now mentioned on Selenium HQ website http://www.seleniumhq.org/download/#thirdPartyLanguageBindings after https://github.com/SeleniumHQ/www.seleniumhq.org/pull/48 . About 9 days of wait time and followup :)

[08:36] <moritz> 9 days is pretty good

[08:36] * moritz still waits on this one: https://github.com/OTRS/otrs/pull/656

[08:38] *** kjs_ joined
[08:39] * azawawi starts working on https://github.com/tadzik/panda/issues/112

[08:42] <azawawi> moritz: nice

[08:47] <dalek> rakudo/nom: 26e461a | (Sterling Hanenkamp)++ | src/core/IO/Handle.pm:

[08:47] <dalek> rakudo/nom: Signal done when the handle closes

[08:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26e461a5ca

[08:47] <dalek> rakudo/nom: da88815 | lizmat++ | src/core/IO/Handle.pm:

[08:47] <dalek> rakudo/nom: Merge pull request #566 from zostay/handle-supply-is-done

[08:47] <dalek> rakudo/nom: 

[08:47] <dalek> rakudo/nom: Signal done when the handle closes

[08:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da88815139

[08:49] <RabidGravy> just waiting for the electricity to go off here as the gas guy services thee boiler

[08:52] *** mr-foobar joined
[08:54] <RabidGravy> azawawi, what is that "lukeis" guy's problem?  He seems to think that he gets to decide on how any particular language bindings get made, without doing anything in that regard himself

[08:57] <azawawi> RabidGravy: but we have "Perl 6" on their website so it is a win :)

[08:58] <RabidGravy> azawawi++ # great diplomatic skills, I think I would have made with the full on raving about half way through that exchange

[08:59] *** rindolf left
[09:04] *** rindolf joined
[09:09] *** softmoth joined
[09:10] <RabidGravy> yay, boiler guy managed to service the boiler without killing the electricity

[09:10] *** dakkar joined
[09:12] *** rindolf left
[09:13] *** softmoth left
[09:14] *** kjs_ left
[09:16] <RabidGravy> which does of course mean I have shut down all these little computers for nothing

[09:20] *** ely-se left
[09:21] *** ollej left
[09:22] *** Begi1115 joined
[09:22] *** rarara_ joined
[09:22] <rarara_> Good day!

[09:23] *** ely-se joined
[09:24] *** FROGGS left
[09:24] <rarara_> lizmat++

[09:24] *** zakharyas joined
[09:25] *** telex left
[09:25] *** diana_olhovik_ joined
[09:26] *** telex joined
[09:29] *** yeahnoob left
[09:30] *** Psyche^_ joined
[09:30] *** grondilu joined
[09:30] *** espadrine joined
[09:30] <azawawi> so panda does not use CUR::Inst or will use it in the future?

[09:31] *** [Sno] left
[09:32] <lizmat> panda will use whatever Rakudo will provide for installation...

[09:32] <lizmat> afk for a few hours&

[09:32] *** n0tjack joined
[09:32] *** [Sno] joined
[09:34] *** Psyche^ left
[09:36] *** n0tjack left
[09:52] *** lolisa left
[09:53] *** azawawi left
[09:55] *** RabidGravy left
[10:05] *** _mg_ joined
[10:09] *** Hor|zon left
[10:12] *** kjs_ joined
[10:13] <jnthn> morning, #perl6

[10:15] <mrf> morning

[10:15] <jnthn> .tell tokuhirom If you Thread.start, you can also pass :app_lifetime which will have the thread automatically killed at the end of the program

[10:15] <yoleaux> jnthn: I'll pass your message to tokuhirom.

[10:19] <jnthn> moritz: There's an RT about start and dynamics already.

[10:20] <jnthn> (Long story short, it should work as you wish.)

[10:20] <moritz> jnthn: great

[10:21] <tokuhirom> jnthn: oh, thanks! i'll use it

[10:21] <yoleaux> 10:15Z <jnthn> tokuhirom: If you Thread.start, you can also pass :app_lifetime which will have the thread automatically killed at the end of the program

[10:22] *** risou is now known as risou_awy

[10:22] *** kid51 joined
[10:23] *** risou_awy is now known as risou

[10:24] *** pmurias joined
[10:25] <dalek> nqp: 1fbf6c5 | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js:

[10:25] <dalek> nqp: [js] Add a noop compose for NFA

[10:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1fbf6c51b7

[10:35] <rarara_> m: my $compfiles=$("a", "b", "c"); my $comp-prom = do for |$compfiles -> $comparison { start {($comparison ~ "1", $comparison ~ "2", $comparison ~ "3")}}; my @g = await |$comp-prom; say @g.perl; say [Z] @g;

[10:35] <camelia> rakudo-moar da8881: OUTPUT«[("a1", "a2", "a3"), ("b1", "b2", "b3"), ("c1", "c2", "c3")]␤((a1 b1 c1) (a2 b2 c2) (a3 b3 c3))␤»

[10:35] <rarara_> m: my $compfiles=$("a",); my $comp-prom = do for |$compfiles -> $comparison { start {($comparison ~ "1", $comparison ~ "2", $comparison ~ "3")}}; my @g = await |$comp-prom; say @g.perl; say [Z] @g;

[10:35] <camelia> rakudo-moar da8881: OUTPUT«["a1", "a2", "a3"]␤((a1 a2 a3))␤»

[10:35] <rarara_> This ^^ doesn't seems consistent to me

[10:36] <rarara_> but maybe I'm making mess

[10:37] <rarara_> can be golfed down removing any async stuff

[10:39] *** g4 joined
[10:44] *** tokuhirom left
[10:45] <ab5tract_> rarara_: what is incondidtrnt?

[10:45] <ab5tract_> *inconsistent

[10:45] <ab5tract_> also, i think those slips are not necessary

[10:45] <rarara_> I am learning

[10:46] *** jasanj left
[10:47] <ab5tract_> no worries, didn't mean it aggressively

[10:47] <rarara_> m: my $g=$("a",); my @o = do for |$g -> $e { ($e ~ "1", $e ~ "2", $e ~ "3") }; say @o.perl;'

[10:47] <camelia> rakudo-moar da8881: OUTPUT«5===SORRY!5=== Error while compiling /tmp/j3bKm3eBtz␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/j3bKm3eBtz:1␤------> 031", $e ~ "2", $e ~ "3") }; say @o.perl;'7⏏5<EOL>␤    expecting any of:␤        sin…»

[10:47] <rarara_> m: my $g=$("a",); my @o = do for |$g -> $e { ($e ~ "1", $e ~ "2", $e ~ "3") }; say @o.perl;

[10:47] <camelia> rakudo-moar da8881: OUTPUT«[("a1", "a2", "a3"),]␤»

[10:47] <ab5tract_> the one-arg rule will flatten a list if it is a single arg

[10:48] <ab5tract_> m: my $g=$("a",); my @o = do for $g -> $e { $e X~ <1 2 3> }; say @o.perl;

[10:48] <camelia> rakudo-moar da8881: OUTPUT«[("a1", "a2", "a3").Seq,]␤»

[10:48] <rarara_> m: my $g=$("a",); my @o = do for |$g -> $e { ($e ~ "1", $e ~ "2", $e ~ "3") }; say @o.perl; say [Z] @o;

[10:48] <camelia> rakudo-moar da8881: OUTPUT«[("a1", "a2", "a3"),]␤((a1 a2 a3))␤»

[10:49] <rarara_> m: my $g=$("a",); my @o = do for |$g -> $e { ($e ~ "1", $e ~ "2", $e ~ "3") }; say @o.perl; my @o2 = [Z] @o; say @o2;

[10:49] <camelia> rakudo-moar da8881: OUTPUT«[("a1", "a2", "a3"),]␤[(a1 a2 a3)]␤»

[10:49] <rarara_> m: my $g=$("a",); my @o = do for |$g -> $e { ($e ~ "1", $e ~ "2", $e ~ "3") }; say @o.perl; my @o2 = [Z] @o; say @o2;

[10:49] <camelia> rakudo-moar da8881: OUTPUT«[("a1", "a2", "a3"),]␤[(a1 a2 a3)]␤»

[10:49] <rarara_> m: my $g=$("a","b"); my @o = do for |$g -> $e { ($e ~ "1", $e ~ "2", $e ~ "3") }; say @o.perl; my @o2 = [Z] @o; say @o2;

[10:49] <camelia> rakudo-moar da8881: OUTPUT«[("a1", "a2", "a3"), ("b1", "b2", "b3")]␤[(a1 b1) (a2 b2) (a3 b3)]␤»

[10:49] <ab5tract_> rarara_: can you clarifywhat the strangeness you are finding is?

[10:49] *** brrt joined
[10:49] <rarara_> it is the [Z] 

[10:50] <ab5tract_> but I'm not personally seeing anything inconsistent

[10:50] <brrt> good * #perl6

[10:50] <ab5tract_> can you clarify what you are expecting?

[10:50] <rarara_> I would have supposed it to return [(a1) (a2) (a3)]

[10:50] <rarara_> my $g=$("a",); my @o = do for |$g -> $e { ($e ~ "1", $e ~ "2", $e ~ "3") }; say @o.perl; my @o2 = [Z] @o; say @o2;

[10:51] <ab5tract_> but it is a list with a single element

[10:51] <rarara_> yes but in some cases you cannot know in advance

[10:51] <ab5tract_> so the list is flattened, and then that single element is zipped with... nothing, as there is no second element

[10:51] <rarara_> and then you have to add an if and check the number of elements

[10:52] <rarara_> zipped with nothing for me is [$(a1,) ,$(a2,) ,$(a3,)]

[10:52] <ab5tract_> m: my $g=$("a",); my @o = do for $g -> $e { $e X~ <1 2 3> }; say (flat @o).perl;

[10:52] <camelia> rakudo-moar da8881: OUTPUT«(("a1", "a2", "a3").Seq,).Seq␤»

[10:52] <rarara_> you see: it zips with nothing

[10:52] <rarara_> now it just don't zip

[10:52] <ab5tract_> rarara_: yes. that's due to the behavior I described

[10:53] <rarara_> ah ok, the one arg rule

[10:54] *** TEttinger left
[10:56] *** cschwenz joined
[10:56] <ab5tract_> I agree that your case is a bit confusing

[10:56] *** cschwenz left
[10:56] <rarara_> I am thinking.. Maybe is just me not adapting in the right way

[10:57] <rarara_> For sure adding if s everywhere to check the number of elements is not the solution to adapt

[10:57] *** softmoth joined
[10:58] <moritz> why would you need to check for the number of elements?

[10:58] <rarara_> the same as adding flat and eager everywhere

[10:58] <rarara_> moritz because I don't know if the 1 arg rule will be applied or not

[10:58] <ab5tract_> rarara_: I would tend to not use [Z] for that use case, tbh

[10:58] *** domm joined
[10:58] <rarara_> not knowing the number of elements of the list

[10:58] <ab5tract_> m: my @t = do for (<a b c d>, <e f g h>) -> $t { $t.map({[$_]}) }; @t.say

[10:58] <camelia> rakudo-moar da8881: OUTPUT«[([a] [b] [c] [d]) ([e] [f] [g] [h])]␤»

[10:58] <moritz> rarara_: the one-arg rule is syntactic in nature

[10:59] <moritz> rarara_: if you call something(@foo), then the one-arg rule applies to @foo because it's one argument

[10:59] *** lucasb_ joined
[10:59] <ab5tract_> note how this approach maintains the list groupings and array-ifies each individual element

[10:59] <moritz> rarara_: independent of the number of elements inside @foo

[10:59] <rarara_> something weird is happening with [Z]

[11:00] <ab5tract_> rarara_: have you explored the [] meta-op much besides the [Z] case?

[11:00] <rarara_> not

[11:00] <ab5tract_> maybe playing with some other examples might clear some stuff up

[11:01] <ab5tract_> m: sub infix:<fun> ( $old-level, $new-level ) { say "moving from -Ofun=$old-level to -Ofun=$new-level" }; say [fun] ^6

[11:01] <camelia> rakudo-moar da8881: OUTPUT«moving from -Ofun=0 to -Ofun=1␤moving from -Ofun=True to -Ofun=2␤moving from -Ofun=True to -Ofun=3␤moving from -Ofun=True to -Ofun=4␤moving from -Ofun=True to -Ofun=5␤True␤»

[11:01] *** softmoth left
[11:02] <ab5tract_> which can and maybe should include some custom infix operator exploration :)

[11:02] *** _mg_ left
[11:02] <ab5tract_> that version is messed up because say is interfering somehow.. interesting

[11:02] <ab5tract_> m: sub infix:<fun> ( $old-level, $new-level ) { say "moving from -Ofun=$old-level to -Ofun=$new-level" }; ([fun] ^6)>>.say

[11:02] <camelia> rakudo-moar da8881: OUTPUT«moving from -Ofun=0 to -Ofun=1␤moving from -Ofun=True to -Ofun=2␤moving from -Ofun=True to -Ofun=3␤moving from -Ofun=True to -Ofun=4␤moving from -Ofun=True to -Ofun=5␤True␤»

[11:02] <ab5tract_> derp

[11:03] <Timbus> its the ret..

[11:03] <ab5tract_> m: sub infix:<fun> ( $old-level, $new-level ) { "moving from -Ofun=$old-level to -Ofun=$new-level" }; ([fun] ^6).say

[11:03] <camelia> rakudo-moar da8881: OUTPUT«moving from -Ofun=moving from -Ofun=moving from -Ofun=moving from -Ofun=moving from -Ofun=0 to -Ofun=1 to -Ofun=2 to -Ofun=3 to -Ofun=4 to -Ofun=5␤»

[11:03] *** ely-se left
[11:05] <flussence> ideally you'd just slap "--> $new-level" in the signature and it'd work...

[11:06] <ab5tract_> flussence: what do you mean?

[11:06] <flussence> returning the input value instead of the return value of "say"

[11:09] <ab5tract_> m: sub infix:<fun> ( $old-level, $new-level ) { state $level; say $old-level; $new-level="moving from -Ofun={$level} to -Ofun={++$level}" }; ([fun] ^6).say

[11:09] <camelia> rakudo-moar da8881: OUTPUT«0␤Use of uninitialized value $level of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in sub infix:<fun> at /tmp/L4nuFI9wuc:1␤Cannot assign to a readonly variable or a value␤  in sub infi…»

[11:09] *** RabidGravy joined
[11:09] <ab5tract_> anyway, looks like I've got some learning up to do too

[11:10] <RabidGravy> learning is over-rated

[11:10] *** rindolf joined
[11:10] <RabidGravy> but I have replenished my beer stock now so all is good

[11:19] <RabidGravy> why did I think that it was possible to directly compare arrays with '~~'

[11:20] <jnthn> m: my @a = 1..5; my @b = 2..6; my @c = 1..5; say @a ~~ @b; say @a ~~ @c;

[11:20] <camelia> rakudo-moar da8881: OUTPUT«False␤True␤»

[11:20] <jnthn> 'cus you can? ;)

[11:20] <moritz> though note that * has a special meaning in ~~ array comparison

[11:21] <moritz> m: say [1, 2, 3, 4, 5] ~~ [1, 2, *]

[11:21] <camelia> rakudo-moar da8881: OUTPUT«False␤»

[11:21] <moritz> huh, or maybe not anymore?

[11:23] <RabidGravy> me being dumb again

[11:23] *** adhoc left
[11:23] <RabidGravy> m: my @a = <1 2 3>; my @b = <3 1 2>; say @a.sort ~~ @b.sort;

[11:23] <camelia> rakudo-moar da8881: OUTPUT«False␤»

[11:24] <ab5tract_> m: sub infix:<f>($o,$n) { state $s; my $t = $s ?? "Moving from -Ofun={$s} to -Ofun={$n}" !! "Starting at -Ofun=$n"; $s = $n; $t }; say [f] ^6

[11:24] <camelia> rakudo-moar da8881: OUTPUT«Moving from -Ofun=4 to -Ofun=5␤»

[11:24] *** adhoc joined
[11:24] <RabidGravy> the Seq returned by sort doesn't compare that way

[11:25] <lucasb_> m: say @(<1 2 3>.sort) ~~ @(<1 2 3>.sort)

[11:25] <camelia> rakudo-moar da8881: OUTPUT«True␤»

[11:25] <lucasb_> is this the idiomatic way of unrolling a Seq?

[11:25] <ab5tract_> why does that example I just pasted only return 4-5 ?

[11:26] <ab5tract_> I would have expected a list of things, not just the final case

[11:29] <timotimo> moritz: i thought a single * would match any element on the other side? perhaps a ** does what you meant there?

[11:29] <timotimo> (or should mean)

[11:30] <moritz> m: say [1, 2, 3] ~~ [1, 2, *]

[11:30] <camelia> rakudo-moar da8881: OUTPUT«True␤»

[11:30] <moritz> m: say [1, 2, 3, 4] ~~ [1, 2, **]

[11:30] <camelia> rakudo-moar da8881: OUTPUT«True␤»

[11:30] <moritz> timotimo: you seem to be correct, as usual :-)

[11:31] <timotimo> oh i'm sorry ;)

[11:32] <lizmat> m: dd "abc".split("",2,:all)   # returns 2 elements, as expected

[11:32] <camelia> rakudo-moar da8881: OUTPUT«Seq $var = ("", "abc").Seq␤»

[11:33] <lizmat> m: m: dd "abc".split("b",2,:all)   # returns 3 elements???  that seems incorrect ?

[11:33] <camelia> rakudo-moar da8881: OUTPUT«Seq $var = ("a", "b", "c").Seq␤»

[11:33] <jnthn> :all is kinda confusigly named :)

[11:34] <jnthn> (When you see it together with a limit)

[11:34] <lucasb_> I was going to ask what :all do...

[11:34] <rarara_> m: my $a=Array.new(1,2,3); say $a; my $c=($a).List; say $c.perl;

[11:34] <camelia> rakudo-moar da8881: OUTPUT«[1 2 3]␤$(1, 2, 3)␤»

[11:34] <rarara_> m: my $a=1; say $a; my $c=($a).List; say $c.perl;

[11:34] <camelia> rakudo-moar da8881: OUTPUT«1␤$(1,)␤»

[11:35] <rarara_> why do we get  a different number of elements in the two cases?

[11:35] *** kid51 left
[11:35] <lucasb_> from syn: "If the :all adverb is supplied to the string delimiter form, the delimiter will be returned in alternation with the split values."

[11:35] <rarara_> m: my $a=Array.new(1); say $a; my $c=($a).List; say $c.perl;

[11:35] <camelia> rakudo-moar da8881: OUTPUT«[1]␤$(1,)␤»

[11:35] <lucasb_> so, the first example "abc".split("",2,:all) should return ("", "", "abc") ?

[11:36] <rarara_> m: Array.new(1) == 1

[11:36] <camelia> rakudo-moar da8881: OUTPUT«WARNINGS:␤Useless use of "==" in expression ".new(1) == 1" in sink context (line 1)␤»

[11:36] <rarara_> m: say Array.new(1) == 1

[11:36] <camelia> rakudo-moar da8881: OUTPUT«True␤»

[11:36] <rarara_> m: say Array.new(1).WHAT; say 1.WHAT;

[11:36] <camelia> rakudo-moar da8881: OUTPUT«(Array)␤(Int)␤»

[11:39] <lucasb_> ok, maybe :all is a little misnamed, maybe :interpolate, :intercalate, :interpose, I don't know :)

[11:40] <rarara_> it is the one arg rule.. pff

[11:41] <rarara_> but $a could have been an array or not.. so flatten or not.. so get a list with 1 element or N.. How can you know all of this in advance?

[11:45] <timotimo> what piece of code are we talking about right now?

[11:49] <gfldex> rarara_: if you don't know what is returned in advance you need more multies to untangle it

[11:51] *** grondilu left
[11:54] <RabidGravy> (more multis)++

[11:59] *** ely-se joined
[12:02] *** dayangkun left
[12:03] <moritz> or you can ge coercive

[12:03] <moritz> slurpies are good that

[12:11] *** ambs left
[12:11] *** spider-mario joined
[12:14] *** pmurias_ joined
[12:18] *** pmurias left
[12:18] <JimmyZ> m: slice

[12:18] <camelia> rakudo-moar da8881: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6gicncw6DC␤Undeclared routine:␤    slice used at line 1. Did you mean 'splice', 'slip'?␤␤»

[12:19] <JimmyZ> m: splice

[12:19] <camelia> rakudo-moar da8881: OUTPUT«5===SORRY!5=== Error while compiling /tmp/SnKVOzG9Ev␤Calling splice() will never work with declared signature (@arr, |c is raw)␤at /tmp/SnKVOzG9Ev:1␤------> 3<BOL>7⏏5splice␤»

[12:22] *** _mg_ joined
[12:25] <dalek> doc: df1b189 | moritz++ | html/.htaccess:

[12:25] <dalek> doc: Install redirect for a renamed document

[12:25] <dalek> doc: review: https://github.com/perl6/doc/commit/df1b189dec

[12:26] <lucasb_> m: $_ = 'abc'; ss/a/x/; .say

[12:26] <camelia> rakudo-moar da8881: OUTPUT«xbc␤»

[12:27] <lucasb_> ^ what adverb is getting concatenated here to form "ss"?

[12:27] <timotimo> :samespace

[12:29] <lucasb_> how come only 'ss' works and the other regex adverbs don't? 

[12:29] <timotimo> you mean "why does only :samespace have a short-hand"?

[12:29] <lucasb_> yes

[12:29] <lucasb_> why? :)

[12:29] <timotimo> dunno

[12:30] <timotimo> there's also one for "same accent" ... :keepmarks?

[12:30] <timotimo> i've never used any of those two, tbh

[12:30] <timotimo> oh

[12:30] <timotimo> ignoremarks

[12:30] <lucasb_> S02 says "You may omit the first colon by joining an initial Q, q, or qq with a single short form adverb"

[12:31] <timotimo> that may refer to quoting, though

[12:31] <timotimo> er

[12:31] <timotimo> that definitely only refers to quoting

[12:31] <timotimo> that's why it says "initial Q, q or qq"

[12:31] <lucasb_> so I thought this only works with q/qq and not s///

[12:31] <timotimo> right

[12:33] *** Skarsnik joined
[12:34] <lucasb_> oh, I found it in S05. the special forms are only ss/// and ms//

[12:34] <lucasb_> timotimo: thanks!

[12:35] <timotimo> glad to help! (i don't know how i helped, but ...)

[12:40] <Skarsnik> Hello, is there a way to type a hash?

[12:40] <timotimo> sure

[12:40] <timotimo> m: my %foo{Int}; %foo{1} = "hi"; say %foo.perl

[12:40] <camelia> rakudo-moar da8881: OUTPUT«(my Any %{Int} = 1 => "hi")␤»

[12:42] <moritz> that's for the keys

[12:42] <moritz> and for the values:

[12:42] <moritz> m: my Int %foo; %foo<a> = 1; say 'alive'; %foo<b> = 'c'

[12:42] <camelia> rakudo-moar da8881: OUTPUT«alive␤Type check failed in assignment to %foo; expected Int but got Str␤  in block <unit> at /tmp/32F_k7N2v8:1␤␤»

[12:45] <dalek> specs: d9d22e6 | (Kamil Kułaga)++ | S26-documentation.pod:

[12:45] <dalek> specs: added missing semicollon

[12:45] <dalek> specs: review: https://github.com/perl6/specs/commit/d9d22e67c2

[12:45] *** softmoth joined
[12:46] *** sufrostico joined
[12:47] <ilmari> m: my Int %Foo{Int} = (42 => 37); say %foo.perl

[12:47] <camelia> rakudo-moar da8881: OUTPUT«5===SORRY!5=== Error while compiling /tmp/n8gnKoisYm␤Variable '%foo' is not declared. Did you mean '%Foo'?␤at /tmp/n8gnKoisYm:1␤------> 3my Int %Foo{Int} = (42 => 37); say 7⏏5%foo.perl␤»

[12:47] <ilmari> m: my Int %foo{Int} = (42 => 37); say %foo.perl

[12:47] <camelia> rakudo-moar da8881: OUTPUT«(my Int %{Int} = 42 => 37)␤»

[12:49] <Skarsnik> Oh thx you. I was wondering how to to to write stuff like that %addr = (0 => "header", 512 => "something"); and keep the key as number

[12:50] <timotimo> in that case you want an object hash literal

[12:50] <timotimo> m: say :{0 => "header", 512 => "something"}.perl

[12:50] <camelia> rakudo-moar da8881: OUTPUT«:{0 => "header", 512 => "something"}␤»

[12:50] <timotimo> m: say dd :{0 => "header", 512 => "something"}

[12:50] <camelia> rakudo-moar da8881: OUTPUT«Hash[Mu,Any] $var = :{0 => "header", 512 => "something"}␤Nil␤»

[12:50] *** ely-se left
[12:50] <timotimo> you can := that into a %foo variable

[12:50] <timotimo> (otherwise it'll be a regular assignment and stringify again)

[12:50] *** softmoth left
[12:54] <lucasb_> It seems that plain %h has type Hash[Mu,Any] and %h{Foo} has type Hash[Foo,Str]. I would argue that the second type should be Hash[Foo,Any]. Would anyone agree?

[12:55] *** [Tux] joined
[12:55] <timotimo> m: dd my %foo

[12:55] <camelia> rakudo-moar da8881: OUTPUT«Hash $var = {}␤»

[12:55] <timotimo> m: (my %foo).of.perl.say

[12:55] <camelia> rakudo-moar da8881: OUTPUT«Mu␤»

[12:55] <timotimo> m: (my %foo).^roles.perl.say

[12:55] <camelia> rakudo-moar da8881: OUTPUT«Method 'iterator' must be implemented by Iterable because it is required by a role␤  in any compose_method_table at gen/moar/m-Metamodel.nqp:2661␤  in any apply at gen/moar/m-Metamodel.nqp:2671␤  in any compose at gen/moar/m-Metamodel.nqp:2807␤  in…»

[12:55] <timotimo> ah, duh

[12:55] <timotimo> that thing again

[12:57] <lucasb_> ^^ I meant 'my Foo %h' and not 'my %h{Foo}', sorry

[12:57] <timotimo> ah

[12:57] <timotimo> why is the key type Mu and not Str(Any)?

[12:57] <lucasb_> m: my Int %h = 1,Any

[12:57] <camelia> rakudo-moar da8881: OUTPUT«Type check failed in binding key; expected Str but got Int␤  in block <unit> at /tmp/mfGaOP06xb:1␤␤»

[12:58] <lucasb_> it's inverted: Hash[ValueType,KeyType], not Hash[KeyType,ValueType]

[12:58] <timotimo> ooooh

[12:58] <Skarsnik> hm interesting, it work directly http://pastebin.com/WMMJ4NxU

[12:58] <timotimo> of course

[12:58] <lucasb_> m: my Int %h = Any,1  # <-- I meant this, sorry agaaain

[12:58] <camelia> rakudo-moar da8881: OUTPUT«Type check failed in binding key; expected Str but got Any␤  in block <unit> at /tmp/SVtIyGFFge:1␤␤»

[12:59] <timotimo> right, the LHS of a pair will only be automatically turned into a string if it's a valid identifier

[12:59] <timotimo> numbers aren't, so they won't

[13:01] <lucasb_> m: my %h = Any,1

[13:01] <camelia> rakudo-moar da8881: OUTPUT«Use of uninitialized value of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/0guOraYaXe:1␤»

[13:01] *** ribasushi joined
[13:02] *** bitmap joined
[13:03] <colomon> timotimo: my RT foo is weak.  can you point out to Kamil that Rat arithmetic is explicitly spec’d to not be limited to resulting in a Rat?

[13:03] <timotimo> colomon: did you get that per mail? if so, just use the "reply to list" function of your mail client to respond

[13:04] <colomon> timotimo: got it in mail, but in a mail client that is hard to respond from.  Still, hmmm.

[13:05] <timotimo> give me a link to the relevant part of the spec and i'll send it

[13:05] * timotimo makes tea in the hopes of calming his cough

[13:05] * colomon is working on a reply now.

[13:07] *** lucasb_ left
[13:07] <RabidGravy> is there a standalone META parser thingy out there that I am missing?

[13:07] <tadzik> nope

[13:07] * RabidGravy might make one then

[13:08] <RabidGravy> reason being that I would like to make something that tests that the one in a distribution is likely to work

[13:09] <timotimo> instead of making tea, i think i'll just lie down to sleep for another bit and hope i'll miraculously recover

[13:09] <RabidGravy> sounds like a plan

[13:09] <RabidGravy> both wife and cat are asleep here

[13:10] <timotimo> colomon: does "working on a reply" imply you can sand it out yourself?

[13:10] * lizmat is contemplating a nap in the sun as well

[13:10] <colomon> timotimo: yes

[13:11] <RabidGravy> boiler man came an hour earlier than anticipated so we'd done everything we needed to do before we usually go out ;-)

[13:11] <dalek> rakudo/nom: 3cc1955 | jnthn++ | src/core/Str.pm:

[13:11] <dalek> rakudo/nom: Prepare Str.perl for upcoming NFG changes.

[13:11] <dalek> rakudo/nom: 

[13:11] <dalek> rakudo/nom: Updates to the NFG algorithm mean that we will can get isolated marks

[13:11] <dalek> rakudo/nom: in the middle of a string, after control characters.

[13:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3cc1955e77

[13:15] <timotimo> okay

[13:15] * timotimo takes that nap

[13:15] <colomon> timotimo: mail (hypothetically) sent

[13:15] <jnthn> timotimo: nap well :)

[13:20] *** perl6fun joined
[13:33] <Skarsnik> Is there a defined solution for modules that provide the same service? I mean like the 5 jsons modules are easy to change because they mainly only provide a parse-json function. But like I have a module that parse hmtl using a c lib and there is already html::parser:xml. It could be good the user can just select the implementation he want; without changing deeply his code (like sub module)

[13:34] *** pmurias_ is now known as pmurias

[13:34] <pmurias> Skarsnik: do the modules provide an identical API?

[13:36] <Skarsnik> not exactly. h:p:x provide a class when I just provide a parse-html function. but basicly you provide a html string and it return a XML::Document

[13:37] *** raiph joined
[13:38] <pmurias> I don't think there is a defined solution, or that one is even possible.

[13:40] <Skarsnik> I was trying to come with a solution to override all the h:p:x call/symbol with my own one (providing a 'fake' h:p:x class) but I don't think it's possible

[13:44] <Skarsnik> I was also thinking something like a 'fake' module Service::Parse::HTML and it use by default h:p:x but if you write use OtherImpl; OtherImpl can say to s:p:h to use him

[13:46] <perl6fun> I need a good analytics module like pandas and good visualisation like ggplot2 and seaborn in perl 6.

[13:47] *** skids joined
[13:47] <dalek> doc: 8df205d | moritz++ | util/sync:

[13:47] <dalek> doc: Synchronize .htaccess too

[13:47] <dalek> doc: review: https://github.com/perl6/doc/commit/8df205d3ce

[13:48] *** apotheon joined
[13:48] <moritz> perl6fun: the either use Inline::Python, or port them to Perl 6

[13:49] <brrt> actually ggplot2 is an R library :-)

[13:49] <brrt> (i'm not sure about seaborn)

[13:49] <brrt> and it is indeed awesome

[13:49] <moritz> http://stanford.edu/~mwaskom/software/seaborn/ "Seaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics."

[13:50] <moritz> well, write Inline::R, use it :-)

[13:53] <perl6fun> Porting these libraries to perl 6 would be better :)

[13:53] <moritz> it seems I deleted quite a few files from doc.perl6.org that I shouldn't have :(

[13:53] <moritz> I hope that the next automatic sync restores them

[13:55] <moritz> unless I misunderstood rsync, and https://github.com/perl6/doc/commit/8df205d3ce is to blame

[13:55] *** Actualeyes joined
[13:56] *** _mg_ left
[13:58] *** CJKinni_ joined
[13:58] *** softmoth joined
[13:58] <hahainternet> is there a nice way to get the unicode name for a character?

[13:58] <hahainternet> am i missing some key function here?

[13:58] <moritz> m: say uniname(42)

[13:58] <camelia> rakudo-moar 3cc195: OUTPUT«ASTERISK␤»

[13:59] <hahainternet> oh, bare uniname

[13:59] <hahainternet> merc

[13:59] <hahainternet> i

[13:59] <moritz> m: say uniname('ä'.ord)

[13:59] <camelia> rakudo-moar 3cc195: OUTPUT«LATIN SMALL LETTER A WITH DIAERESIS␤»

[13:59] <moritz> m: say uniname('ä')

[13:59] <camelia> rakudo-moar 3cc195: OUTPUT«LATIN SMALL LETTER A WITH DIAERESIS␤»

[13:59] <moritz> ah, both work

[13:59] <brrt> m: say uniname(0x1234)

[13:59] <camelia> rakudo-moar 3cc195: OUTPUT«ETHIOPIC SYLLABLE SEE␤»

[13:59] <perl6fun> When is perl 6 released officially?? I mean for production use. Any fixed date please??

[13:59] <brrt> m: say uniname(0xcafe)

[13:59] <camelia> rakudo-moar 3cc195: OUTPUT«<Hangul Syllable>␤»

[14:00] <moritz> perl6fun: we aim for a Christmas release

[14:00] <brrt> perl6fun: the standard answer is 'whenever it is ready for you'

[14:00] <brrt> (wrt to 'production')

[14:00] <perl6fun> moritz Any exact date?

[14:01] <brrt> and there is a very significant chance that the release of perl6.christmas will not meet your standards of production

[14:01] <brrt> that is the normal way of programming languages, fwiw

[14:01] <brrt> no exact date as far as i know perl6fun

[14:01] *** ely-se joined
[14:01] <PerlJam> perl6fun: note that there are also people using Rakudo Perl 6 "in production" right now.

[14:01] <brrt> that too

[14:01] <ely-se> fools

[14:01] *** Hor|zon joined
[14:01] <brrt> hi ely-se

[14:01] <moritz> PerlJam: even people using it in production, without scare quotes

[14:02] <PerlJam> yeah, I wasn't actually meaning those to be scare quotes :)

[14:02] <dalek> ecosystem: 4ad66f0 | RabidGravy++ | META.list:

[14:02] <dalek> ecosystem: Add Object::Permission::Group

[14:02] <dalek> ecosystem: 

[14:02] <dalek> ecosystem: https://github.com/jonathanstowe/Object-Permission-Group

[14:02] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4ad66f0f7d

[14:02] <PerlJam> .oO( We need more quoting constructs!  ;)

[14:02] <brrt> there is more than one way to 'scare quote' something :-P

[14:03] <dalek> doc: 542b373 | moritz++ | doc/Language/5to6-nutshell.pod:

[14:03] <dalek> doc: Give 5to6-nutshell a less terse title

[14:03] <dalek> doc: review: https://github.com/perl6/doc/commit/542b373bd8

[14:03] <Skarsnik> hm, where is nativecall.pod? the link at the bottom of http://doc.perl6.org/language/nativecall is 404

[14:03] <moritz> Skarsnik: try again

[14:03] <moritz> http://irclog.perlgeek.de/perl6/2015-10-29#i_11450883

[14:04] <ely-se> PerlJam: write about it on https://www.reddit.com/r/UnnecessaryQuotes/

[14:04] <moritz> why am I not surprised that there's a reddit for that?

[14:05] <PerlJam> because it's no surprise that there's a reddit for almost anything?

[14:05] <Skarsnik> Well the https://github.com/perl6/doc/raw/master/lib/Language/nativecall.pod is missing x)

[14:05] <brrt> moritz: correct link is https://raw.githubusercontent.com/perl6/doc/master/doc/Language/nativecall.pod, actual link is https://github.com/perl6/doc/raw/master/lib/Language/nativecall.pod

[14:05] <brrt> basically, those urls are no longer how github refers to raw pages, apparently

[14:05] <Skarsnik> oh thx

[14:06] <brrt> so s/github.com/raw.githubusercontent.com/ and s@/raw@@ 

[14:07] *** crux left
[14:07] <RabidGravy> if you want scare quotes it should 👻Scare👻

[14:07] <PerlJam> yes, those are scary

[14:07] *** crux joined
[14:08] <perl6fun> I would love to see perl 6 documentation in readthedocs format

[14:08] <RabidGravy> (still haven't worked out how to enter unicode characters directly into xchat)

[14:09] <RabidGravy> perl6fun, simple matter of making the appropriate pod renderer

[14:09] <RabidGravy> I'm sure you'll have fun making it ;-)

[14:09] <perl6fun> RabidGravy where can I find the help for that? I would love to do that :-)

[14:10] <PerlJam> huh.  NativeCall is quite different (bigger) from the last time I looked at it.

[14:10] <PerlJam> :n

[14:10] <PerlJam> oops

[14:11] <PerlJam> FROGGS++  

[14:12] <jnthn> novapatch: Don't suppose you're about for a Unicode question?

[14:13] <jnthn> (Or anyone else who knows a good amount about normalization.)

[14:13] <pmurias> perl6fun: re use in  production, I don't think there will be a hard date line between ready and not ready

[14:13] <ely-se> I know a guy who does, but he isn't on IRC.

[14:14] <mrf> jnthn: Is there any way to make Grammar::Tracer show the string its attempting to match against the rule?

[14:15] <jnthn> mrf: iirc it only shows the things it actually matched

[14:15] <jnthn> Don't think there's an option to do otherwise

[14:15] <mrf> jnthn: damn. 

[14:16] <jnthn> You may be able to figure out where it is from looking at what was recently matched

[14:17] *** sufrostico left
[14:17] <RabidGravy> perl6fun, probably a good place to start would be the code in https://github.com/perl6/doc which has the bits that render it as HTML

[14:17] <mrf> jnthn: Yeah. I think the error is my lack of understanding on how grammars actually work on text

[14:19] *** sufrostico joined
[14:19] *** fildon joined
[14:25] *** diana_olhovik_ left
[14:27] <mrf> Is there any way to make a token match greedy. 

[14:27] <perl6fun> RabidGravy Yeah I went through that

[14:27] *** CJKinni__ joined
[14:28] *** diana_olhovik joined
[14:28] <jnthn> mrf: :!r maybe

[14:28] <jnthn> mrf: Well, wait

[14:28] <mrf> so token foo { [<[ab>] | <[ab]>} on 'aaa' would all be consumed in the first capture

[14:28] <jnthn> mrf: It is greedy, do you mean "and backtrack2?

[14:29] <mrf> assuming some *'s in there

[14:29] <perl6fun> jnthn I want to have a good reading on regex "Grammar" of perl 6, I heard is a big thing. I want to have a good reading. Can you point to some resources or video?

[14:29] <mrf> jnthn: I don't know. Maybe. It might need to use regex I suppose.

[14:30] <jnthn> mrf: The thing you jsut wrote looks malformed? ] in a wrong place?

[14:31] *** CJKinni_ left
[14:31] *** pollei joined
[14:31] <jnthn> perl6fun: doc.perl6.org has some tutorials; http://jnthn.net/papers/2014-fosdem-perl6-today.pdf has a walkthrough of building up a grammar

[14:31] <mrf> m: grammar G {token foo {  [ <[ab]>* | <[ab]>* ] } }; G.parse('aaa', :rule<foo>).say;

[14:31] <camelia> rakudo-moar 3cc195: OUTPUT«｢aaa｣␤»

[14:31] <mrf> m: grammar G {token foo {  [ <[ab]>* | <[ab]>* ] } }; G.parse('aaa', :rule<foo>).perl.say;

[14:31] <jnthn> perl6fun: There's a video of that FOSDEM talk I think...I don't have a link handy

[14:31] <camelia> rakudo-moar 3cc195: OUTPUT«Match.new(ast => Any, list => (), hash => Map.new(), orig => "aaa", to => 3, from => 0)␤»

[14:32] <dalek> rakudo/nom: 0cdb974 | lizmat++ | src/core/Str.pm:

[14:32] <dalek> rakudo/nom: Make Str.split on strings a bit faster

[14:32] <dalek> rakudo/nom: 

[14:32] <dalek> rakudo/nom: - about 2x faster for specific limit case

[14:32] <dalek> rakudo/nom: - if no limit, 10x faster for pull-one, 15x faster for push-all case

[14:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0cdb974ecd

[14:32] *** CJKinni__ left
[14:33] <jnthn> mrf: That seems to be matching correctly, but I don't get why you have two identical things in the alternation :)

[14:35] <mrf> jnthn: for example. The example I am working on is a with a grammar for RFC5234. which has "token repeat { <DIGIT>* | [<DIGIT> '*' <DIGIT>] }" and "token repetition { <repeat>? <element> }" the string "1*1" should get all consumed by the repeat capture but it instead only captures "1"

[14:36] <PerlJam> mrf: looks like a job for %  (but that's orthogonal to your issue)

[14:36] <rarara_> lizmat++

[14:36] *** llfourn left
[14:36] <mrf> PerlJam: yes. I am mostly copying the rfcs ABNF then I will perl6ify later

[14:37] <rarara_> To put myself under public ridicule, this is my first Perl6 script, AKA how-to-work-around-things-u-dont-understand : https://gist.github.com/anonymous/db7f9dcb00f4dd817ea1

[14:37] *** tokuhiro_ joined
[14:37] <rarara_> it works

[14:38] <mrf> jnthn: tests for the repeat token work fine but the repetition finds that 1 matches the repeat so throws the *1 into the element. Or so it seems.

[14:38] *** ely-se left
[14:40] <moritz> rarara_: is there a reason why you avoid array variables?

[14:40] <PerlJam> m: grammar G { token repeat { \d* | [ \d '*' \d ] }; token element { .* }; token TOP { <repeat>? <element> } }; G.parse("1*1");

[14:40] <camelia> rakudo-moar 3cc195: ( no output )

[14:40] <PerlJam> m: grammar G { token repeat { \d* | [ \d '*' \d ] }; token element { .* }; token TOP { <repeat>? <element> } }; say G.parse("1*1");

[14:40] <camelia> rakudo-moar 3cc195: OUTPUT«｢1*1｣␤ repeat => ｢1*1｣␤ element => ｢｣␤»

[14:41] <moritz> rarara_: also, note($string) is a bit nicer to write than $*ERR.say($string)

[14:41] <mrf> PerlJam: No I am confused. We go back and check my grammar I think?

[14:41] <mrf> s/We/will/

[14:41] <moritz> PerlJam: there's usually no reason to put a ? quantifer after a regex that matches the empty string, like token repeat does

[14:42] <rarara_> moritz: no idea why array variables are there at all!

[14:42] *** mattn_jp_ joined
[14:42] <rarara_> in perl5 you use them because they are the default

[14:42] <PerlJam> moritz: i'm just parroting mrf's grammar

[14:42] <mrf> moritz: I suspect they are aware but were helping debug my exampl

[14:42] <rarara_> you have even a sigil for tat

[14:43] <moritz> rarara_: well, one reason is documentation; instead of $head-array you can write @head, and you still know it's an array

[14:43] <PerlJam> mrf: If you show your grammar + input, maybe I or someone else can spot something?

[14:44] <mrf> PerlJam: I will see if I can figure out this gist malarky

[14:44] <moritz> rarara_: another is that you can iterate over it without any ugly | prefix, so just "for @head -> $a { ... }"

[14:44] <rarara_> this explains things a bit :)

[14:46] *** perl6fun left
[14:48] <mrf> PerlJam: https://gist.github.com/ungrim97/7c0d17e1846cd002377d

[14:51] *** khw joined
[14:54] *** ely-se joined
[14:55] *** mattn_jp_ left
[14:57] <PerlJam> mrf: so ... that code works exactly as I expect (once I remove the whitespace  that your grammar does not match)

[14:58] <mrf> FFS. PerlJam++++++ Thank you I am apparently and ejit

[14:58] *** sufrostico left
[14:59] <mrf> PerlJam: I appologise for wasting you time

[15:00] <jnthn> novapatch: Don't worry; the issue was actually a bug in canonical composition where it accidentally missed looking for primary composites for starter/starter combinations.

[15:02] *** llfourn joined
[15:04] *** fildon left
[15:05] <[Coke]> we have a scheduled date for the december release, it's ok to hand that out if someone is looking for a date, I think.

[15:05] <moritz> oh, the 24th happens to be a Thursday after the third Tuesday of a month :-)

[15:06] <lizmat> cycling&

[15:06] <[Coke]> the 17th is the release date, not the 24th.

[15:07] <[Coke]> (the 1st is a tuesday, so it's earlier than normal)

[15:07] <moritz> oh

[15:08] <[Coke]> perhaps we can simplify our release date logic after christmas.

[15:08] <dalek> perl6.org: f120673 | (Nelo Onyiah)++ | source/compilers/index.html:

[15:08] <dalek> perl6.org: Correct the links to Perlito

[15:08] <dalek> perl6.org: 

[15:08] <dalek> perl6.org: The links in the page were not accurate:

[15:08] <dalek> perl6.org: 

[15:08] <dalek> perl6.org: - http://www.perlito.org/ => *Server not found* error

[15:08] <dalek> perl6.org: - http://perlcabal.org/~fglock/perlito6.html => redirected to http://perl6.org/

[15:08] <dalek> perl6.org: 

[15:08] <dalek> perl6.org: There also issues with the *Pugs* links but I don't know what those should be :)

[15:08] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/f1206730c5

[15:08] <dalek> perl6.org: 21c46af | moritz++ | source/compilers/index.html:

[15:08] <dalek> perl6.org: Merge pull request #41 from j1n3l0/patch-1

[15:08] <dalek> perl6.org: 

[15:08] <dalek> perl6.org: Correct the links to Perlito

[15:08] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/21c46af02a

[15:13] <dalek> roast: a33a710 | jnthn++ | S05-mass/properties- (4 files):

[15:13] <dalek> roast: Fix tests for upcoming NFG semantic changes.

[15:13] <dalek> roast: 

[15:13] <dalek> roast: We stick in a control char to force a grapheme extender to stand alone

[15:13] <dalek> roast: and so be available for matching in isolation. Note that these tests

[15:13] <dalek> roast: are rather contrived, since they pair together graphemes from multiple

[15:13] <dalek> roast: (natural) languages. Another possible change would have been to pick a

[15:13] <dalek> roast: non-extending character in place of the extending ones for the tests

[15:13] <dalek> roast: in question, but this change was the less effort.

[15:13] <dalek> roast: review: https://github.com/perl6/roast/commit/a33a7109a6

[15:16] <jnthn> Could whoever fixed the Buf.list/Blob.list to return a List, not an Array, please take a look at S32-str/pack.t which seems to need updates to match.

[15:17] <jnthn> (Or anyone else with time)

[15:18] *** g4 left
[15:18] <PerlJam> [Coke]: I think we should simplify the release date logic at some point; christmas sounds like a good pivot point for that.

[15:18] *** andreoss joined
[15:20] <andreoss> can i write something like     proto token number { *  { make +$/ } } ; ? 

[15:20] <[Coke]> I vote: third Saturday of the month. more likely a volunteer can find time to do this on the weekend.

[15:20] <andreoss> or i have to use Actions class here?

[15:21] <PerlJam> andreoss: you can write that, but better would be a valid regex :)

[15:21] <andreoss> so i should something else indead of WhatEver?

[15:21] <andreoss> *should put

[15:21] <PerlJam> andreoss: but, no you don't *need* an action class.  you can sprinkle { make ... } through out your grammar

[15:22] <PerlJam> andreoss: that's not a Whatever

[15:22] <andreoss> i mean can i do make inside proto token?

[15:22] <andreoss> what is that?

[15:23] <PerlJam> oh, I totally didn't see that it was proto

[15:28] <PerlJam> andreoss: I don't think there's a way to use an onlystar and other actions in a proto regex

[15:28] <PerlJam> andreoss: I think you can only say  proto token number {*}   (and that's why it's called an "onlystar")

[15:29] *** ely-se left
[15:29] <PerlJam> If you could do other actions, I'd expect it to be something like   proto token number { {*} { ... } }   But that feels dubious

[15:30] <dalek> roast: bd54140 | jnthn++ | S32-io/IO-Socket-INET. (2 files):

[15:30] <dalek> roast: Change unfortunate choice in socket tests.

[15:30] <dalek> roast: 

[15:30] <dalek> roast: While 0xbeef and 0xbabe were cute hex codes to pick, it turns out they

[15:30] <dalek> roast: both are Hangul syllables, which under the improved NFG implementation

[15:30] <dalek> roast: form a single grapheme, thus breaking the tests.

[15:30] <dalek> roast: review: https://github.com/perl6/roast/commit/bd5414012f

[15:31] *** pippo joined
[15:31] <jnthn> Yeah, you can't do such things in a proto token/regex/rule, at least not in 6.c

[15:31] <pippo> o/ #perl6

[15:32] <jnthn> OK, I now have almost all of the NFG changes done, and I think I'm going to do a revision bump so they can get some testing in the wild

[15:32] <jnthn> The only exception is that I didn't yet turn on \r\n becoming a single grapeheme 'cus it seems to break things rather impressively.

[15:32] <masak> doing it on the proto level feels overly complex. usually the proto gets called by a non-proto rule, and the action could be done there.

[15:33] <masak> I won't say "it's bad to want that", but waiting for a convincing use case does not seem all that unreasonable.

[15:34] <PerlJam> masak: I think andreoss is just trying to avoid writing { make +$/ } over and over again.

[15:34] <masak> it seems to me that in the token you'd have the *least* detailed information about what was actually captured in $/

[15:34] <jnthn> I suspect it will also cause some minor ecosystem fallout when I do, since "\r\n".chars will be 1, and .substr(*-2) eq "\r\n" will thus never work. OTOH, .chomp will do the Right Thing, and I hope most folks will be using that. :)

[15:34] <masak> PerlJam: yeah. writing it over and over again in this case does not seem all that unreasonable to me.

[15:34] <masak> PerlJam: the only reason those are all the same is that Perl 6 happens to correctly numify them already.

[15:35] <jnthn> masak: Also, it's not in any way clear that the $/ of the proto token is anythign to do with the $/ of the token you called, and it's not clear how we'd even talk about the $/ of the rule that was called.

[15:35] <masak> right.

[15:35] <jnthn> And this'd complicate LTM a good bit too I suspect

[15:35] <jnthn> So yeah, we'd better *really* want it.

[15:35] <PerlJam> yeah.

[15:35] <masak> that's a good unpacking of what I vagely meant by "overly complex" :)

[15:36] *** tokuhiro_ left
[15:36] <masak> basically, it's orders of magnitude easier to explain why it'd be a bad idea, than to implement it. :)

[15:37] <PerlJam> In general though, (if I can read andreoss' mind a little) grammars in practice seem to be less DRY than one would want.   I imagine at some point we'll figure out how to make that better.  Maybe via a module  :)

[15:37] <dalek> nqp: ad7b8cb | jnthn++ | tools/build/MOAR_REVISION:

[15:37] <dalek> nqp: Bump MOAR_REVISION for NFG improvements.

[15:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ad7b8cb667

[15:37] <masak> PerlJam: oh, I'm all for that.

[15:37] <masak> PerlJam: specifically, I feel I'm hitting interesting limits of grammars in my 007 work.

[15:37] <PerlJam> oh really?

[15:37] <masak> ya.

[15:38] * moritz finds it much easier to write a simple grammar than one that generates good error messages on parse failures

[15:38] <PerlJam> got an example?

[15:38] <PerlJam> (masak)

[15:38] <pippo> .tell azawawi Is there a way to tell Selenium::Webdriver::Firefox not to look for the prefs.json in the subdir it is executed from?  

[15:39] <yoleaux> pippo: I'll pass your message to azawawi.

[15:39] <masak> PerlJam: perhaps the clearest one is that we're planning to allow something like `{{{t @ Q::Trait}}}` (that's 007 syntax, but hopefully easy to read)

[15:40] <masak> PerlJam: when the parser sees such an unquote, it doesn't get the actual *trait* that goes there -- it gets a *promise* of a future trait, kind of like a parse-level parameter.

[15:40] <moritz> and the trait influences the grammar?

[15:40] <masak> PerlJam: and so the parser goes "OK, well if I get that hypothetical trait, then afterwards I'll be in *this* parsing state..." and continues on parsing.

[15:40] <masak> moritz: yes ^

[15:41] <PerlJam> and what happens if the promise is never fulfilled?

[15:42] <masak> you mean if no-one evaluates that quasi?

[15:42] <masak> it's kind of like no-one evaluating a qq string. nothing of import happens.

[15:43] <masak> I imagine if someone tried to put a square literal in the round trait hole, they'd get a nice type error.

[15:43] <PerlJam> I was thinking more of debugging in the presence of quasi, so that makes sense

[15:44] <masak> m: class Q::Trait {}; class Q::Literal::Str {}; die X::TypeCheck.new(:operation<unquote>, :got(Q::Literal::Str), :expected(Q::Trait))

[15:44] <camelia> rakudo-moar 3cc195: OUTPUT«Type check failed in unquote; expected Q::Trait but got Q::Literal::Str␤  in block <unit> at /tmp/_mcnA98wYk:1␤␤»

[15:45] <masak> PerlJam: I'd like parse errors that show where in the code things went wrong to show both a "before" and an "after" view wrt macro applications.

[15:45] <masak> haven't tried out that idea in practice, but looking forward to it ;)

[15:45] <PerlJam> It sounds nice from here :)

[15:47] <masak> I can recommend https://github.com/masak/007/issues for some light reading about near-future 007 plans

[15:47] <masak> (also planning to put together a bit of a roadmap soonish)

[15:48] <dalek> rakudo/nom: d138617 | jnthn++ | tools/build/NQP_REVISION:

[15:48] <dalek> rakudo/nom: Bump to get improved NFG in MoarVM.

[15:48] <dalek> rakudo/nom: 

[15:48] <dalek> rakudo/nom: This aligns our definition of "grapheme" with that of grapheme cluster

[15:48] <dalek> rakudo/nom: in Unicode Annex #29. There is one exception: we don't treat \r\n as a

[15:48] <dalek> rakudo/nom: single grapheme yet (we will, but need to further debug the fallout of

[15:48] <dalek> rakudo/nom: doing so). The changes so far should hopefully cause little fallout in

[15:48] <dalek> rakudo/nom: the ecosystem, aside from more correct semantics with the characters

[15:48] <dalek> rakudo/nom: of various languages. The other notable changes is that we no longer

[15:48] <dalek> rakudo/nom: produce synthetics for combining chars placed on control chars (so a

[15:48] <dalek> rakudo/nom: combiner after a control char is now an isolated combiner).

[15:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d1386179a1

[15:50] <RabidGravy> from the above it sounds like I may need to test some HTTP clients against that

[15:51] <masak> 'night, #perl6

[15:51] <RabidGravy> toodlepip

[15:51] <PerlJam> masak++ roadmap.  Someone was asking me about the state of macros in P6 the other day and told them to ask you about it.   Having a roadmap would help answer some of their questions I'm sure

[15:51] <dalek> roast: 2906649 | jnthn++ | S15-nfg/grapheme-break.t:

[15:51] <dalek> roast: Fudge \r\n grapheme test.

[15:51] <dalek> roast: review: https://github.com/perl6/roast/commit/29066490d0

[15:52] <masak> well, it's a roadmap for *007*, a project whose purpose it is to inform Perl 6 macros by making all the interesting mistakes *quickly* in a toy project. so far that's working very well, as evidenced by the issue queue.

[15:52] <jnthn> RabidGravy: Please do; also again after the \r\n thing, though I'm hopeful it'll be mostly harmless

[15:52] <masak> but it's important also to realize that once 007 has filled that role, *then* the real implementation work begins in Rakudo.

[15:52] <masak> really 'night

[15:52] <PerlJam> good night masak 

[15:53] <jnthn> masak++ # understanding the importance of exploring/prototyping/building one to throw away

[15:53] <jnthn> 'night, masak

[15:54] <dalek> rakudo/nom: 300d5be | jnthn++ | t/spectest.data:

[15:54] <dalek> rakudo/nom: Run S15-nfg/grapheme-break.t on Moar.

[15:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/300d5befc8

[15:55] <dalek> roast: a177726 | jnthn++ | S15-nfg/cgj.t:

[15:55] <dalek> roast: Unfudge some NFG tests that now pass.

[15:55] <dalek> roast: review: https://github.com/perl6/roast/commit/a17772643d

[15:56] <jnthn> 405 new passing tests :)

[15:56] <jnthn> *newly

[15:58] <RabidGravy> yay!

[15:58] <mrf> Hopefuly not another stupid mistake on my part but I appear to have a reproducable test that fails if I 'use Grammar::Tracer' in my grammar but passes without!

[15:59] <psch> the reverse of #123452 

[15:59] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123452

[16:00] <psch> mrf: as linked by synbot6, Grammar::Tracer can influence your grammar

[16:00] <dalek> rakudo-star-daily: 2dae47f | coke++ | log/ (9 files):

[16:00] <dalek> rakudo-star-daily: today (automated commit)

[16:00] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/2dae47f6d5

[16:00] <dalek> perl6-roast-data: 3d7640c | coke++ | / (9 files):

[16:00] <dalek> perl6-roast-data: today (automated commit)

[16:00] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3d7640cab2

[16:00] <dalek> perl6-roast-data: 3b1afb1 | coke++ | / (9 files):

[16:00] <dalek> perl6-roast-data: today (automated commit)

[16:00] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3b1afb11e1

[16:01] <psch> mrf: the ticket is rejected, but the pitfall still exists apparently

[16:01] <mrf> psch: will take a read.

[16:01] <psch> mrf: as in, it's not rakudos fault, but Grammar::Tracer

[16:02] <jnthn> Yes, Grammar::Tracer issue

[16:02] * jnthn really should look at it, but that applies to a lot of things :/

[16:03] <psch> jnthn: did you see the SEGV yesterday?

[16:03] <jnthn> m: say «நி กำ षि "\r\n"»».chars

[16:03] <camelia> rakudo-moar 3cc195: OUTPUT«(2 2 2 2)␤»

[16:03] <jnthn> psch: Yes, and hope it got RT'd 'cus I don't remember what it was :)

[16:04] <mrf> Thats fair. Will see if I can golf my example into something more consise and add it to the ticket

[16:04] <psch> jnthn: no, i'll RT it 

[16:04] <jnthn> psch: Thanks

[16:04] <mrf> * on Grammar::Tracer

[16:04] <jnthn> The NFG stuff is taking all my concentration at the moment

[16:04] <jnthn> (Nearly there with that issue now)

[16:05] <andreoss> can Grammar::Debugger have lexical effect?

[16:05] <jnthn> It does?

[16:05] <jnthn> (Only affects the grammars in the lexical scope where you use the module)

[16:06] <psch> i'll make a general-ish ticket for the control exception stuff i suppose

[16:06] <andreoss> seems not working 

[16:07] <psch> as in, i have a suspicion that whatever makes moar SEGV is what allows it to handle loop CXs, which is why the handling is broken on jvm

[16:07] *** raiph left
[16:07] <andreoss> http://paste.debian.net/318742/

[16:08] <jnthn> andreoss: It's a MOP module, so it works at compile time

[16:08] <jnthn> andreoss: So it's the lexical scope the grammar itself is in that matters, not its usage

[16:08] <RabidGravy> well it looks like HTTP::UserAgent doesn't have a problem with any of the changes

[16:08] <jnthn> RabidGravy: \o/

[16:09] <jnthn> andreoss: Guess what you want is a way to turn the tracing output on/off at runtime...

[16:09] <RabidGravy> I suspected that as it actual does any searching for '\r\n' in a Buf before decoding it

[16:09] <andreoss> yes

[16:09] <jnthn> I don't think there's a way to do that

[16:09] <jnthn> Feel free to file a ticket

[16:09] <jnthn> (In the github issues)

[16:10] <jnthn> I can see lots of people seem to find Grammar::Tracer useful, so it's worth a bit of my time to do fixes/improvements :)

[16:11] <ugexe> Grammar::Tracer++ jnthn++

[16:12] *** bacek left
[16:15] <moritz> jnthn: it's my go-to solution for debugging grammars when I'm tired of inserting "{say "step 1.2.42"}" at all the places :-)

[16:16] *** abraxxa left
[16:17] <PerlJam> mine too

[16:21] *** abraxxa joined
[16:22] <dalek> perl6-roast-data: 254ebdc | coke++ | log/ (4 files):

[16:22] <dalek> perl6-roast-data: Archive old test logs

[16:22] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/254ebdcb38

[16:22] <psch> ticketed as #126490

[16:22] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126490

[16:23] <[Coke]> jvm: failing 1316 tests. moar:312; moar-nojit: 385

[16:23] <[Coke]> new S32-str/pack.t tests failing everywhere, please fudge those.

[16:23] *** lucasb_ joined
[16:24] <[Coke]> also: S03-operators/arith.t 151 - infix<!+> is not iffy enough; RT #73386

[16:24] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=73386

[16:25] *** Hor|zon left
[16:26] *** bacek joined
[16:26] *** _mg_ joined
[16:27] *** zengargoyle joined
[16:28] <dalek> roast: b0cad93 | jnthn++ | S32-str/pack.t:

[16:28] <dalek> roast: Fix pack.t after return type changes.

[16:28] <dalek> roast: review: https://github.com/perl6/roast/commit/b0cad93ce0

[16:28] *** pmurias_ joined
[16:29] *** pippo left
[16:29] *** pkv joined
[16:31] *** _mg_ left
[16:31] *** pmurias left
[16:32] <lucasb_> m: sub a::b { say 'hi' }; module a { b }

[16:32] <camelia> rakudo-moar 3cc195: OUTPUT«5===SORRY!5=== Error while compiling /tmp/u5kCzdWtuP␤Undeclared routine:␤    b used at line 1␤␤»

[16:32] <lucasb_> ^^ Is this supposed to work? It seems a::b is treated as a simple name, not compound, so no namespace "a" is autovivified.

[16:32] <lucasb_> perl -E 'sub a::b { say "hi" }; package a; b'  #=> P5, outputs "hi"

[16:32] <moritz> lucasb_: no, subroutine invocation with identifies is purely lexical

[16:33] <[Coke]> colomon: rejected the Rat/Num ticket.

[16:33] *** diana_olhovik left
[16:34] *** brrt left
[16:35] <[Coke]> RT: 1026; GLR: 5; NOM: 8; LTA: 86; WEIRD: 11; TESTS: 10; XMAS: 66

[16:36] <lucasb_> moritz: ok, thanks. Do you think 'sub a::b' should be valid or emit a warning?

[16:37] <lucasb_> m: say class { has $.a::b::c }.^methods

[16:37] <camelia> rakudo-moar 3cc195: OUTPUT«(a::b::c)␤»

[16:37] <lucasb_> ^^ IMO, this should clearly be invalid. method names should be "simple", not compound

[16:39] <uruwi> ab5stract_ Should I consider Terminal::Print stable?

[16:39] <[Coke]> psch: did you update roast with RT info for #126490 ?

[16:39] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126490

[16:43] <moritz> m: our sub a::b { 42 }; say a::b()

[16:43] <camelia> rakudo-moar 3cc195: OUTPUT«Could not find symbol '&b'␤  in block <unit> at /tmp/Iy_qZ_tfVv:1␤␤Actually thrown at:␤  in block <unit> at /tmp/Iy_qZ_tfVv:1␤␤»

[16:44] <moritz> lucasb_: well, either it should work or throw a proper error

[16:44] <RabidGravy> uruwi you may need to define what you mean by stable

[16:44] <psch> [Coke]: oh, no.  i could fudge the jvm tests i guess, yeah

[16:44] <psch> [Coke]: we don't have a test that shows the SEGV on moar though, maybe that wants adding too...

[16:45] <RabidGravy> with a lot of modules there is a good chance they may change in some regard before Perl 6 makes a final release

[16:46] <psch> ...why is S04-statments/redo.t a+x..? o.o

[16:47] <lucasb_> m: sub a::b {}; say ::.keys.grep(/a/)

[16:47] <camelia> rakudo-moar 3cc195: OUTPUT«(&a::b)␤»

[16:48] <lucasb_> I don't fully understand what "::" is, but it seems that a::b is inserted in the "symbol table" as a whole, not splitted into subnames and inserted accordingly into namespaces. So, yes, either it should work or throw an error.

[16:48] <[Coke]> psch: please fudge the tests, yes. will help anyone else doing roast triage.

[16:54] <uruwi> RabidGravy ab5tract_ developed enough for production use

[16:56] <dalek> ecosystem: a213f9d | PerlJam++ | META.list:

[16:56] <dalek> ecosystem: Add HexDump::Tiny

[16:56] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a213f9decf

[16:56] <lucasb_> nothing is production stable in this world... in this life... This is a *journey*

[16:57] <uruwi> That it's unlikely that a future build will break programs using it.

[16:57] <uruwi> I have to leave pretty soon.

[16:59] <RabidGravy> I would say the interface is unlikely to change, but what lucasb_ said

[17:00] *** tokuhiro_ joined
[17:00] *** lostinfog joined
[17:00] <RabidGravy> has IO::Path.watch changed or stopped working recently?

[17:02] <RabidGravy> i.e. it appears that such as "react { whenever '/tmp'.IO.watch { .... } }' isn't doing anything when I create a file in /tmp

[17:03] <jnthn> RabidGravy: I think somebody recently reported some oddity with /tmp and IO::Notification

[17:04] <jnthn> RabidGravy: Does it work outside of /tmp?

[17:04] *** uruwi left
[17:08] <dalek> roast: d3a7f93 | peschwa++ | S04-statements/label.t:

[17:08] <dalek> roast: Add test for #126490.

[17:08] <dalek> roast: review: https://github.com/perl6/roast/commit/d3a7f93f0d

[17:08] <dalek> roast: f9f4522 | peschwa++ | S04-statements/ (4 files):

[17:08] <dalek> roast: JVM-fudge a few tests with common failure mode.

[17:08] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126490

[17:08] <dalek> roast: review: https://github.com/perl6/roast/commit/f9f4522291

[17:08] *** pmurias_ left
[17:15] <RabidGravy> jnthn, it appears not

[17:16] <jnthn> ugh

[17:16] <jnthn> We do have spectests for it

[17:16] <jnthn> So it's a bit odd it's regressed

[17:16] <PerlJam> RabidGravy: what OS are you on, OOC?

[17:16] <RabidGravy> that is "react { whenever '.'.IO.watch { say $_; } }" doesn't do anything if I change a file

[17:16] <RabidGravy> or add a file

[17:17] *** ^elyse^ joined
[17:17] <RabidGravy> PerlJam, Fedora 22  4.2.3-200.fc22.x86_64

[17:18] <jnthn> RabidGravy: Ugh, that does work on Windows.

[17:18] <jnthn> RabidGravy: So, platform-specific

[17:20] *** llfourn left
[17:21] <PerlJam> (works on ubuntu too fwiw)

[17:21] <PerlJam> RabidGravy: also, I assume there's nothing weird about how the fs is mounted?

[17:22] *** kjs_ left
[17:23] <dalek> nqp: 2ed0a13 | jnthn++ | src/QRegex/P6Regex/Actions.nqp:

[17:23] <dalek> nqp: Temporary fix so \v can handle \r\n grapheme.

[17:23] <dalek> nqp: 

[17:23] <dalek> nqp: We will be able to do better than this once the LTM NFAs are updated

[17:23] <dalek> nqp: to better grok NFG.

[17:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2ed0a1333b

[17:23] <dalek> nqp: e00d482 | jnthn++ | src/HLL/Compiler.nqp:

[17:23] <dalek> nqp: Cope with NFG's \r\n semantics in lineof.

[17:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e00d4828fd

[17:23] <RabidGravy> PerlJam, nah, inasmuch as it hasn't changed since last time it worked

[17:24] <^elyse^> PerlGem

[17:24] <RabidGravy> it's implemented in libuv at the bottom isn't

[17:25] <PerlJam> aye

[17:25] <PerlJam> well, afaik anyway

[17:36] <ilmari> yes, moarvm/src/io/filewatchers.c

[17:37] <ilmari> uses uv_fs_event_{init,start}

[17:39] <ilmari> WFM on Debian stable too

[17:40] <ilmari> works on tmpfs (/run/user/$uid) too

[17:41] <diakopter> prof-m: say 33

[17:41] <camelia> prof-m 3cc195: OUTPUT«33␤Writing profiler output to /tmp/mprof.html␤»

[17:41] <camelia> .. Prof: http://p.p6c.org/18dda46

[17:41] <ilmari> it appears to consider creation and deletion to be renames

[17:41] *** raiph joined
[17:41] <diakopter> does that still work with gists?

[17:42] <RabidGravy> I'm not precluding that this is some weird selinux thing

[17:45] <diakopter> prof-m: https://gist.github.com/anonymous/c3303e1f975c607ab2bb

[17:45] <camelia> prof-m 3cc195: OUTPUT«Usage:␤  /tmp/Ee90k3wEGg <w> <h> <steps> ␤Writing profiler output to /tmp/mprof.html␤»

[17:45] <camelia> .. Prof: http://p.p6c.org/18ddb4c

[17:46] <diakopter> prof-m: https://gist.github.com/anonymous/c3303e1f975c607ab2bb 10 10 20

[17:46] <camelia> prof-m 3cc195: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ykVJ9B46Si␤Confused␤at /tmp/ykVJ9B46Si:1␤------> 3https:7⏏5//gist.github.com/anonymous/c3303e1f975c␤    expecting any of:␤        colon pair␤»

[17:46] <camelia> .. Prof: http://p.p6c.org/18ddb6a

[17:46] <diakopter> hehehe

[17:46] <RabidGravy> okay I may have ruled out an OS thing as I just run the self same code on the little computer <- there which is running the same kernel and everything

[17:47] *** rarara_ left
[17:47] <RabidGravy> and worky

[17:47] <RabidGravy> SooOOOOoo

[17:47] <PerlJam> selinux on both?

[17:47] <diakopter> moritz: can the gist version of evalbot accept parameters?

[17:47] *** ambs joined
[17:48] <RabidGravy> yep

[17:48] *** ^elyse^ left
[17:49] <RabidGravy> the only difference is that the other machine has a way older rakudo (i.e. 2015.09-412-g32d7b08 )

[17:50] <RabidGravy> so I'm gwine make me a new rakudo and see what happens

[17:50] <moritz> diakopter: no

[17:51] *** tokuhiro_ left
[17:51] *** raiph left
[17:51] <diakopter> *could XD

[17:53] *** Actualeyes left
[17:54] *** dakkar left
[17:54] <moritz> diakopter: I'm against cramming too much sophistication into camelia; it's a an evalbot, not "Perl 6 as a service"

[17:55] <moritz> plus undocumented features that aren't documented tend to bitrot and/or be forgotten

[17:55] <diakopter> :)

[17:55] <moritz> in fact, prof-m was probably a mistake

[17:56] <RabidGravy> yeah, I see it as a way of demonstrating code in public and/or replicating bugs

[17:56] <moritz> it was temping, and cool, but ultimately it's very seldomly used

[17:56] *** ambs left
[17:57] <moritz> and of course a nightmare to debug when the scp step fails

[17:59] *** andreoss left
[18:02] *** espadrine left
[18:03] <RabidGravy> Ooof "Stage parse      : 170.759" okay the poor things only a "Intel(R) Celeron(R) CPU N2807 @ 1.58GHz" but nonetheless

[18:04] *** abaugher left
[18:04] *** abaugher joined
[18:06] *** kjs_ joined
[18:07] <RabidGravy> okay that's very very strange a "2015.10-60-g300d5be" on the other machine *does* work

[18:07] <RabidGravy> so, let's just rebuild it again on the laptop

[18:08] *** Calibellus joined
[18:09] *** zakharyas left
[18:09] *** diana_olhovik_ joined
[18:10] *** ^elyse^ joined
[18:14] <tony-o> is there a mechanism to make 'die' bubble up to the block a start { } was started in?

[18:15] <tony-o> m: CATCH { default { "CAUGHT IN MAIN $_".say; } }; start { die 'died'; }

[18:15] <camelia> rakudo-moar 3cc195: ( no output )

[18:15] <moritz> tony-o: start { } returns a promise. If you access it's .result, and the block died, than accessing the .result also dies

[18:15] <moritz> m: await start { die 42 }

[18:15] <camelia> rakudo-moar 3cc195: OUTPUT«42␤  in block <unit> at /tmp/8E9nb4IG2Z:1␤␤»

[18:15] <moritz> tony-o: as does "await"

[18:16] <tony-o> moritz: i'm looking for a way to do flow control on a blocking socket, .poll won't tell me if there is anything to read (yet) and i don't have a way to kill the socket if nothing is read otherwise

[18:16] <moritz> tony-o: and you should handle all your promises (await them, which .result does implicitly)

[18:16] <tony-o> so i want to do a start { sleep 1; die; }; $sock.recv;

[18:17] <RabidGravy> okay, identical kernel with  2015.10-60-g300d5be on this machine doesn't work

[18:17] *** tokuhiro_ joined
[18:17] *** llfourn joined
[18:17] *** raiph joined
[18:17] <moritz> tony-o: can you .recv inside a thread?

[18:18] *** zakharyas joined
[18:19] <tony-o> moritz: no because the socket stuff doesn't work across thread

[18:19] <moritz> tony-o: if so, you could just do  my $p = start { $sock.recv };  if $p.status === Planned { nothing to read } else { say $p.result }

[18:19] <moritz> :(

[18:19] <tony-o> the handles have to be copied to the thread when it's started and there was some issue jnthn can probably expand on where they didn't want to do that on moar yet :-(

[18:20] *** _mg_ joined
[18:20] <moritz> tony-o: another idea would be to have a thread dedicated to reading, and fill a Supply or a Channel whenever a value is available

[18:20] <moritz> you can query a Channel in a non-blocking way

[18:21] *** ambs joined
[18:21] *** llfourn left
[18:22] <tony-o> the .recv fails randomly unless it's in the same thread as the socket was created

[18:22] *** karim32 joined
[18:22] <karim32> Can I debug Perl 6 applications the same I can python ones using pdb (pdb.set_trace()) or

[18:22] <karim32> ruby ones using pry (binding.pry). That is, setting a break point and moving step by step and being able to see the values of the variables.

[18:23] <tony-o> karim32: check out: https://github.com/jnthn/rakudo-debugger/

[18:25] <karim32> is that the only one or are there any most popular libraries?

[18:25] <karim32> as well

[18:25] <karim32> seems outdated

[18:25] <RabidGravy> "outdated"?

[18:26] <PerlJam> yeah, it was last updated like 1.5 months ago!  It's *old*  ;)

[18:27] <tony-o> moritz: i think i understand what you mean, i wonder if that can work with the way reads are happening.  i'll give it a shot

[18:27] <MadcapJake> Is there an equivalent function for strings that acts like `index` but you can use a regex?

[18:28] <karim32> 2 years ago, no?

[18:28] <tony-o> MadcapJake: you can use a regex in index

[18:28] <MadcapJake> oh :P docs say $needle is a `Str:D`

[18:28] *** leont joined
[18:28] <psch> m: "foo bar baz".index(/bar/).say

[18:28] <camelia> rakudo-moar 3cc195: OUTPUT«Cannot call index(Str: Regex); none of these signatures match:␤    (Cool:D $: Cool $needle, *%_)␤    (Cool:D $: Cool $needle, Cool $pos, *%_)␤  in block <unit> at /tmp/qVJWwvoiYV:1␤␤»

[18:28] <karim32> yeah, 2 months, you're right

[18:28] <tony-o> karim32: that's when it was created

[18:29] <tony-o> m: "foo bar baz".match(/bar/).say;

[18:29] <camelia> rakudo-moar 3cc195: OUTPUT«｢bar｣␤»

[18:29] <psch> m: "foo bar baz".match(/bar/).from.say;

[18:29] <camelia> rakudo-moar 3cc195: OUTPUT«4␤»

[18:29] <karim32> yeah, I know, I just saw "2" everywhere

[18:29] <tony-o> m: "foo bar baz".match(/bar/).hash.say;

[18:29] <camelia> rakudo-moar 3cc195: OUTPUT«Map.new()␤»

[18:29] <karim32> thx

[18:29] <tony-o> m: "foo bar baz".match(/bar/).perl.say;

[18:29] <camelia> rakudo-moar 3cc195: OUTPUT«Match.new(ast => Any, list => (), hash => Map.new(), orig => "foo bar baz", to => 7, from => 4)␤»

[18:30] <tony-o> m: "foo bar baz".match(/'ba' [ 'z' | 'r' ]/).perl.say;

[18:30] <PerlJam> MadcapJake: $/.from is your best bet if you need the position of the match.

[18:30] <camelia> rakudo-moar 3cc195: OUTPUT«Match.new(ast => Any, list => (), hash => Map.new(), orig => "foo bar baz", to => 7, from => 4)␤»

[18:30] <karim32> by they way, what's the news about Perl 6 release, what happened on Oct 9th (or 10th)? Will it be released by the end of this year for sure?

[18:30] <tony-o> m: "foo bar baz".match(/'ba' [ 'z' || 'r' ]/).perl.say;

[18:30] <camelia> rakudo-moar 3cc195: OUTPUT«Match.new(ast => Any, list => (), hash => Map.new(), orig => "foo bar baz", to => 7, from => 4)␤»

[18:31] <MadcapJake> ok thanks!

[18:31] *** kjs_ left
[18:32] <[Coke]> karim32: nothing happened on the 9th or 10th that I know of. on the 22nd we released the beta compiler: http://www.nntp.perl.org/group/perl.perl6.compiler/2015/10/msg11547.html

[18:32] <[Coke]> there is one more beta release next month, then christmas on the 17th of december or so

[18:33] <karim32> it's not known when the stable version 1.0 will be released?

[18:33] <[Coke]> ?

[18:34] <[Coke]> "the 17th of december"

[18:34] <PerlJam> karim32: "christmas" is the "stable version 1.0" version

[18:34] <karim32> I see.

[18:34] *** karim32 left
[18:35] <[Coke]> please try out the beta release (2015.10) and provide feedback.

[18:36] <dalek> rakudo/nom: 64ae8f1 | coke++ | docs/release_guide.pod:

[18:36] <dalek> rakudo/nom: Note the v6.c release is December.

[18:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64ae8f1399

[18:40] *** FROGGS joined
[18:42] *** vendethiel joined
[18:45] *** karim32 joined
[18:45] <karim32> I have a simple method 

[18:45] <karim32> sub method1(:$a1, :$b1) { }

[18:45] <karim32> How can I check in "method1" whether the argument(s) is(are) passed or not? That is, 

[18:45] <karim32> method1(a1 => 3) # a1 passed, b1 not

[18:45] <moritz> karim32: often checking $a1.defined is good enough

[18:45] <moritz> karim32: if not, you can do help with a nested signature

[18:46] <karim32> won't calling "b1" throw an exception in my case?

[18:46] <karim32> I mean, calling b1.defined

[18:46] <moritz> m: sub f(*%named ( :$a1, :$b1 ) ) { say %named<b1>:exists }; f :b1(Mu)

[18:46] <camelia> rakudo-moar 3cc195: OUTPUT«cannot stringify this␤  in sub f at /tmp/Lyh_cD_Lcu:1␤  in block <unit> at /tmp/Lyh_cD_Lcu:1␤␤»

[18:47] <moritz> karim32: no

[18:47] <moritz> m: sub f(:$a1, :$b1) { say $b1.defined }; f(a1 => 3)

[18:47] <camelia> rakudo-moar 3cc195: OUTPUT«False␤»

[18:47] <karim32> ok, what's "you can do help with a nested signature "?

[18:48] <PerlJam> karim32: you can make the named parameters required and then the compiler will check for you  ;)

[18:48] <moritz> m: sub f(*%named ( :$a1, :$b1 ) ) { say %named<b1>:exists }; f b1 => Any

[18:48] <camelia> rakudo-moar 3cc195: OUTPUT«True␤»

[18:48] <moritz> karim32: ^^ see above

[18:48] <moritz> there by checking that b1 exists in the %named hash, you know that a value was passed, even thoug it was a type object (and thus not .defined)

[18:49] <gfldex> karim32: see: http://rosettacode.org/wiki/Undefined_values#Perl_6

[18:49] <karim32> tnx

[18:49] <moritz> karim32: another option is to write separate multis

[18:49] <karim32> ok

[18:49] *** karim32 left
[18:49] <moritz> m: multi f(:$a!) { say "a passed: $a" }; multi f(:$b!) { say "b passed: $b" }; f :a<x>

[18:49] <camelia> rakudo-moar 3cc195: OUTPUT«a passed: x␤»

[18:51] <gfldex> m: sub foo(:$a){ say $a.VAR.WHAT; $a.VAR.defined }; foo; # $a is a container. The container is defined, it's content is not.

[18:51] <camelia> rakudo-moar 3cc195: OUTPUT«(Scalar)␤»

[18:51] <gfldex> m: sub foo(:$a){ say $a.VAR.WHAT, $a.VAR.defined }; foo; # $a is a container. The container is defined, it's content is not.

[18:51] <camelia> rakudo-moar 3cc195: OUTPUT«(Scalar)False␤»

[18:53] <PerlJam> karim32 quit (unfortunately)

[18:53] <psch> j: my @a := (gather do for ^5 { take $_; last if $_ == 3 }).cache; say @a # golf for the UnwindException in j-roast relating to .match(:x) (and thus e.g. .comb as well)

[18:53] <camelia> rakudo-jvm 3cc195: ( no output )

[18:53] <psch> assignment instead of binding works, leaving out the last also works

[18:53] <psch> thus probably at least somewhat related to #126940...

[18:53] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126940

[18:54] <psch> not sure why the UnwindException doesn't arrive through camelia though...

[18:55] <moritz> j: say 42

[18:55] <camelia> rakudo-jvm 3cc195: OUTPUT«42␤»

[18:55] <ugexe> sometimes the unwind exception turns into a bunch of permgen errors

[18:55] <moritz> psch: iirc camelia uses the eval-server, which might catch it

[18:57] <RabidGravy> right, I'm going to reboot this laptop to see if the surprisingly coincidental sepolicy update has anything to do with this

[18:58] *** tokuhiro_ left
[19:01] <psch> moritz: right, it does, and then prints it to the original STDERR

[19:02] <psch> that fits with UnwindException being a ControlException, so we deal with it internally until we exit the CompUnit because the UWE doesn't go away and it sticks around

[19:03] <psch> in contrast to e.g. NPEs which straight up break out of the CompUnit via dieInternal

[19:03] <psch> not sure if we want the EvalServer to keep printing those kind of failure modes to the combined STD{OUT,ERR} it uses for eval-ish output

[19:04] <psch> as i see it that really only influences camelia - when running roast via evalserver it usually goes onto a terminal anyway

[19:07] *** RabidGravy left
[19:09] <[Coke]> psch: I'm going to start fudging the remaining failing java tests.

[19:10] <[Coke]> (tonight, not right now) please let me know if any of those new tickets can be combined.

[19:11] <psch> [Coke]: okay, i'll look over new tickets tomorrow and add whatever i can make sound coherent from my notes

[19:12] <[Coke]> Danke. We need to get the board clean on that again, I'd rather be working off tickets than failing test.

[19:14] *** RabidGravy joined
[19:14] <bartolin> [Coke], psch: the other day I looked at S32-list/squish.t: http://irclog.perlgeek.de/perl6/2015-10-24#i_11429176

[19:14] *** telex left
[19:14] <bartolin> I guess there will be more tests failing for the same reason

[19:16] <RabidGravy> rest easy folks, the .watch works there was just something weird going on with the laptop, I suspect that they messsed up the selinux policy as there was another update rather quick on the heels of an earlier one

[19:16] *** telex joined
[19:16] *** atweiden joined
[19:16] <psch> bartolin: i saw something with lots of Mu.new in S03-metaops/hyper.t too, but that seems to work currently...

[19:17] <psch> ...i think, maybe i'm not running the right test, gotta verify when r-j finished building

[19:18] <bartolin> my r-j is also rebuilding atm :-)

[19:18] <psch> bartolin: ah, the test is actually ".squish is nodal", so yeah..

[19:19] <psch> j: say [[2, 3], [4, [5, 6]]]».squish

[19:19] <camelia> rakudo-jvm 3cc195: OUTPUT«((2 3 Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new…»

[19:19] *** AlexDaniel joined
[19:19] *** gonz_ joined
[19:19] <^elyse^> How do interpreters like YARV, MoarVM, Lua etc deal with rooting of pointers the GC needs to know about? Calls to GC functions all over the place?

[19:19] *** ambs left
[19:20] <^elyse^> i.e. the part that is not the JIT part

[19:20] *** ambs joined
[19:20] <^elyse^> JIT knows about call stack layout, so that's not an issue.

[19:21] <MadcapJake> how do I turn a command-line argument into a string? I tried wrapping it in `~(...)` but I'm still getting this: "Use of uninitialized value <element> of type Any in string context"

[19:22] <MadcapJake> wait, i think the problem is that i'm using `.words.map: ...` on a string, is that not allowed?

[19:22] <[Coke]> m: "this is what".words.say

[19:22] <camelia> rakudo-moar 3cc195: OUTPUT«(this is what)␤»

[19:22] <psch> m: say "abc def ghi".words.map: &uc

[19:22] <camelia> rakudo-moar 3cc195: OUTPUT«(ABC DEF GHI)␤»

[19:22] <psch> m: .say for "abc def ghi".words.map: &uc

[19:22] <camelia> rakudo-moar 3cc195: OUTPUT«ABC␤DEF␤GHI␤»

[19:23] <moritz> ^elyse^: they typically don't use the OS stack for referencing GC'ed objects at all

[19:23] <gfldex> MadcapJake: see: http://design.perl6.org/S06.html#Declaring_a_MAIN_subroutine

[19:23] <moritz> ^elyse^: control flow typically happens on the heap in such VMs

[19:23] <^elyse^> oh ok

[19:24] <MadcapJake> well i'm trying to run a function in the map and I am doing this: `"asd asd asd".words.map: translate(*)`

[19:24] *** kjs_ joined
[19:24] <MadcapJake> is that the wrong use of whatever symbol?

[19:24] <moritz> MadcapJake: that doesn't work. Use  .words.map: &translate

[19:24] <MadcapJake> ohh ok cool, thanks!

[19:24] <TimToady> or *.&translate

[19:25] <TimToady> but &translate will probably do okay

[19:25] <moritz> MadcapJake: in short, * doesn't do it's magic when it's in an argument list. Otherwise one couldn't pass a Whatever object anywhere

[19:27] <MadcapJake> ok good to know!

[19:27] <psch> bartolin: S32-list/squish.t locally aborts in the first test with "expected Positional but got Seq", fwiw

[19:29] <bartolin> oops, something in 0cdb974ecd seems to have broken the jvm build (around "?? $!todo = 0")

[19:29] <bartolin> psch: were you able to build r-j on HEAD?

[19:30] <psch> oh, no, didn't pull

[19:32] <bartolin> psch: wrt S32-list/squish.t -- I see that error as well ... (with a build from last night)

[19:32] <MadcapJake> i'm passing a string into a script and when i .say it, it's outputting `(Any)`.  Here's how I'm running it: `perl6 script.p6 -e "hello world"` the first arg is captured as a string but the second is just an `(Any)`.

[19:35] <psch> MadcapJake: there is only one argument?

[19:36] *** raiph left
[19:37] <gfldex> if perl6 is suppiled both with a script and -e '<your code here>', will it run MAIN?

[19:38] <psch> gfldex: if you run <perl6 -e 'code' $file> $file will be in $*ARGFILES, if you run <perl6 file -e 'code'>, -e will be an argument to file.MAIN

[19:38] *** rarara_ joined
[19:38] <psch> as in, the first case doesn't execute file, it executes the -e as perl6 code

[19:40] *** rarara_ left
[19:40] *** rarara_ joined
[19:40] *** kjs_ left
[19:40] *** lucasb_ left
[19:41] *** raiph joined
[19:41] <bartolin> hmm, adding parenthesis lets r-j build: https://gist.github.com/usev6/8bd78b697a2e1367e381

[19:42] <bartolin> I wonder why this caused no problem with r-m

[19:42] <psch> r: my $f; 1 < 0 ?? $f = 1 !! $f = 0

[19:42] <camelia> rakudo-{moar,jvm} 3cc195: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Precedence of = is too loose to use inside ?? !!; please parenthesize␤at /tmp/tmpfile:1␤------> 3my $f; 1 < 0 ?? $f7⏏5 = 1 !! $f = 0␤    expecting any of:␤        infix␤        i…»

[19:43] <psch> r: my $f; 1 < 0 ␤ ?? $f = 1 ␤ !! $f = 0

[19:43] <camelia> rakudo-{moar,jvm} 3cc195: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Precedence of = is too loose to use inside ?? !!; please parenthesize␤at /tmp/tmpfile:2␤------> 3 ?? $f7⏏5 = 1 ␤    expecting any of:␤        infix␤        infix stopper␤»

[19:43] <psch> definitely curious

[19:44] <psch> i've already seen Perl6::Grammar-level things differing between r-j and r-m, but not like this

[19:45] *** raiph left
[19:48] * timotimo stopped napping, reads backlog now

[19:52] *** _mg_ left
[19:54] *** Begi1115 left
[19:54] *** tokuhiro_ joined
[19:57] *** Begi1115 joined
[19:58] *** tokuhiro_ left
[20:00] * lizmat notices 2 test-files in spectest die when run under harness, but not when run directly

[20:02] *** zakharyas left
[20:04] <hoelzro> lizmat: which two? is that based on the load the system's under?

[20:05] <lizmat> S32-array/pop.t and t/spec/S32-num/complex.t   

[20:05] <lizmat> load doesn't seem to matter, just whether they run under the harness or not

[20:06] <lizmat> aka, with "make" they die, with "perl6" they do not

[20:07] <lizmat> I'm also looking at a segfault trying to fix #126487   :-(

[20:07] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126487

[20:08] <psch> gosh this parsing difference in split is creepy

[20:08] <lizmat> psch: ??

[20:08] <psch> m: my $f; 1 < 0 ␤ ?? $f = 1 ␤ !! $f = 0

[20:08] <camelia> rakudo-moar 3cc195: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XnwMVxI_K5␤Precedence of = is too loose to use inside ?? !!; please parenthesize␤at /tmp/XnwMVxI_K5:2␤------> 3 ?? $f7⏏5 = 1 ␤    expecting any of:␤        infix␤        infix stopper␤»

[20:08] *** rarara_ left
[20:09] <psch> lizmat: that's from core/Str.pm:910

[20:09] <psch> lizmat: r-m HEAD builds with it, but apparently shouldn't

[20:09] <psch> lizmat: r-j doesn't build with it, with the same error as camelia

[20:09] <lizmat> aha... ok, lemme fix that

[20:09] <bartolin> lizmat: S32-num/complex.t fails for me with 'PERL6LIB=lib perl6-m t/spec/S32-num/complex.t'

[20:10] <bartolin> lizmat: though somtimes it runs more than 100 tests, sometimes only a few

[20:10] <psch> lizmat: well, the scary bit is that the difference happens in the first place...

[20:10] <lizmat> psch: indeed

[20:10] *** kjs_ joined
[20:11] <bartolin> lizmat: oh, once in a while it passes :-/

[20:11] <psch> probably related to the fails-on-jvm-but-works-on-moar in S06-operator-overloading/sub.t...

[20:12] *** kjs_ left
[20:12] <psch> r: sub circumfix:['@', '@'] { $^a.say }; @ 5 @

[20:12] <camelia> rakudo-jvm 3cc195: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Two terms in a row␤at /tmp/tmpfile:1␤------> 3sub circumfix:['@', '@'] { $^a.say }; @7⏏5 5 @␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        …»

[20:12] <camelia> ..rakudo-moar 3cc195: OUTPUT«5␤»

[20:12] <psch> vOv

[20:12] <hoelzro> crazy

[20:13] <lizmat> psch: running spectest now, will commit if ok(ish)

[20:15] *** espadrine joined
[20:16] <[Coke]> do we have a page somewhere summarizing all the various testing bits?

[20:16] *** bacek left
[20:16] *** llfourn joined
[20:16] <[Coke]> like my daily runs, the module testing ?colomon runs...

[20:17] *** bacek joined
[20:17] <jnthn> ^elyse^: You generally have a choice: scan the system stack for things that could be pointers and accept false positives (means you can't do things like moving collectors) or explicitly track things (which is what MoarVM does, though it's done with an inline static function and is so relatively cheap)

[20:17] <^elyse^> ok

[20:17] <colomon> oooo, just realized today was the first day my smoker’s made it through without messing up in the reporting stages in weeks.  (Whoever fixed panda)++

[20:17] <jnthn> (Moar's collector moves objects, so it really needs to know.)

[20:19] <dalek> rakudo/nom: 078d813 | lizmat++ | src/core/Str.pm:

[20:19] <dalek> rakudo/nom: Fix ternary thinko spotted by psch++

[20:19] <dalek> rakudo/nom: 

[20:19] <dalek> rakudo/nom: Odd thing is that the core setting build ok with this on Moar.  But

[20:19] <dalek> rakudo/nom: apparently not on the JVM.  Hope this unbreaks the build there.

[20:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/078d813a23

[20:19] <[Coke]> IWBNI if we had something that combined those, the old smolder parrot service, cpantesters...

[20:19] <[Coke]> the build wasn't broken on the JVM, was it?

[20:20] <lizmat> ah, sorry, perhaps only the test S06-operator-overloading/sub.t ?

[20:20] *** kaare_ left
[20:21] <[Coke]> the daily run ran today.

[20:21] *** llfourn left
[20:21] <[Coke]> ah. it broken since then, I guess.

[20:21] <bartolin> [Coke]: yeah, build was broken, see http://irclog.perlgeek.de/perl6/2015-10-29#i_11452793

[20:21] <lizmat> [Coke]: breakage was only on JVM, apparently

[20:21] <[Coke]> rant: IWBNI I could reconfig and remake and if no config changes were needed, have it just do a normal make.

[20:22] <hoelzro> [Coke]: we have https://github.com/perl6/infrastructure-doc

[20:22] <[Coke]> (rather than rebuild everything)

[20:22] <hoelzro> but I don't think that includes what you're looking for

[20:22] <hoelzro> so maybe it should

[20:22] *** darutoko left
[20:22] <flussence> kind of off the wall question: suppose I wanted to make a quoting construct like «q{ }» or «rx{ }», where would I even start?

[20:24] <psch> flussence: i think your best bet is poking masak or helping with 007

[20:24] <psch> as a starting point

[20:24] <psch> because subs don't really do that

[20:24] <moritz> flussence: I'd start by investigating slangs

[20:25] <moritz> flussence: iirc FROGGS++ has written two or three slangs

[20:25] <flussence> yeah, I'm looking through the specs and it keeps telling me "macros!"...

[20:25] <moritz> not sure how powerful they are, and how deep you have to dig

[20:26] <psch> oh, slangs are more on the "this works now" side, but they come with a lot more "understanding Perl6::Grammar" than macros would i think

[20:26] <psch> but well, that's the trade off right there

[20:27] <flussence> I guess whatever the answer is, it won't be as easy as "hey p6, here's my prefix letters gimme all those fancy quoting character pairs for free kthx"

[20:28] *** TEttinger joined
[20:29] <psch> flussence: well, the main catch is TTIAR

[20:29] <psch> oh, no, i think i misassumed something there

[20:30] <psch> but yes, getting the quoting pairs for free currently should be workable with a slang, but it's some digging around

[20:33] <[Coke]> r: say ?(42 but False)

[20:33] <camelia> rakudo-{moar,jvm} 3cc195: OUTPUT«False␤»

[20:33] <[Coke]> r: my $value = 42 but False; say $?value;

[20:33] <camelia> rakudo-{moar,jvm} 3cc195: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Variable '$?value' is not declared. Did you mean '$value'?␤at /tmp/tmpfile:1␤------> 3my $value = 42 but False; say 7⏏5$?value;␤»

[20:33] <[Coke]> r: my $value = 42 but False; say ?$value;

[20:33] <camelia> rakudo-jvm 3cc195: ( no output )

[20:33] <camelia> ..rakudo-moar 3cc195: OUTPUT«False␤»

[20:35] *** _mg_ joined
[20:36] <jnthn> m: BEGIN { %*LANG<MAIN> := %*LANG<MAIN> but role { token quote:sym<omg> { 'omg' {} <quibble(%*LANG<Quote>)> } }; %*LANG<MAIN-actions> := %*LANG<MAIN-actions> but role { method quote:sym<omg>(Mu $/) { $/.'!make'($/.hash.<quibble>.ast) } } }; say omg/wtf/

[20:36] <camelia> rakudo-moar 3cc195: OUTPUT«wtf␤»

[20:36] *** sufrostico joined
[20:36] <jnthn> flussence: It's hacky but something like ^

[20:36] <dalek> roast: 7266412 | coke++ | integration/advent2010-day19.t:

[20:36] <dalek> roast: Fudge RT #126491 for JVM

[20:36] <dalek> roast: review: https://github.com/perl6/roast/commit/7266412030

[20:36] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126491

[20:36] *** _mg_ left
[20:37] *** kjs_ joined
[20:38] <lizmat> m: use nqp; class A { has str $!a; method BUILD() { nqp::chars($!a) } }; A.new  # tada

[20:38] <camelia> rakudo-moar 3cc195: OUTPUT«(signal SEGV)»

[20:38] <lizmat> m: use nqp; my str $foo; say $foo

[20:38] <camelia> rakudo-moar 3cc195: OUTPUT«␤»

[20:39] <lizmat> I always thought that native strings initialized to the empty string ?

[20:39] <lizmat> jnthn: ^^^  ??

[20:39] <jnthn> lizmat: In Rakudo I think we make that happen.

[20:39] <jnthn> In NQP maybe not

[20:39] <lizmat> m: use nqp; my str $foo; say nqp::chars($foo)

[20:39] <camelia> rakudo-moar 3cc195: OUTPUT«0␤»

[20:40] <lizmat> apparently it only goes wrong with native string attributes ?

[20:40] <lizmat> jnthn: this is rakudo, so bug?

[20:41] <jnthn> lizmat: oh, mis-read...

[20:41] <jnthn> Yeah, bug then

[20:42] <lizmat> ok, will rakudobug it

[20:42] <jnthn> Thanks

[20:42] <jnthn> At least that should be an easy one to fix :)

[20:43] * jnthn is tired and will continue with (and maybe complete) the rn -> 1 grapheme thingy tomorrow

[20:44] <jdv79> why is that a thing?  crlf as two chars feels normal.

[20:45] <leont> It seems my harness does work on p6-j, it's just the eval-server bindings that fail for some unknown reason (haven't tested that path on moar, so odds are it's an issue in my code)

[20:45] <jnthn> jdv79: Because Unicode says it's one grapheme :)

[20:46] <jdv79> ok

[20:46] <AlexDaniel> m: say flip 6e-9;

[20:46] <camelia> rakudo-moar 3cc195: OUTPUT«90-e6␤»

[20:47] <[Coke]> m: say ~6e-9

[20:47] <camelia> rakudo-moar 3cc195: OUTPUT«6e-09␤»

[20:47] <jnthn> (And I'm pretty sure picking and choosing Unicode rules won't end well for us. :))

[20:50] <AlexDaniel> jnthn: ah, what a relief… I was already going to defend it :)

[20:50] *** sufrostico left
[20:50] <psch> leont: moar doesn't have an eval-server afaik

[20:51] <lizmat> #126492 has arrived in RT

[20:51] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126492

[20:52] <leont> jnthn: you can always do the thing khw did (implement some part of Unicode no one has implemented before, and then discover that their specs are contradicting themselves, then having to argue with them because why admit you made a mistake)

[20:52] <[Coke]> r: use Test; is-deeply (produce *+*, 1..10), +«<1 3 6 10 15 21 28 36 45 55>

[20:52] <camelia> rakudo-jvm 3cc195: OUTPUT«Type check failed in binding @a; expected Positional but got Seq␤  in sub is-deeply at lib/Test.pm:422␤  in block <unit> at /tmp/tmpfile:1␤␤»

[20:52] <camelia> ..rakudo-moar 3cc195: OUTPUT«ok 1 - ␤»

[20:52] <leont> ;-)

[20:52] *** sufrostico joined
[20:52] <[Coke]> psch, bartolin - is that the failure mode you were discussing earlier?

[20:53] <jnthn> leont: I thought I might be heading to such a situation today, but no, it was my bug. Phew. :)

[20:53] *** raiph joined
[20:53] <leont> psch: correct. I guess I should treat jvm as low priority anyway.

[20:54] <jnthn> leont: Which bit was it, ooc? 

[20:54] <leont> Something about folding case and negative character groups

[20:54] <psch> [Coke]: squish was what we talked about i think

[20:54] *** kjs_ left
[20:54] <psch> j: say [[2, 3], [4, [5, 6]]].map: &squish # this one

[20:54] <camelia> rakudo-jvm 078d81: OUTPUT«(([2 3] Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.n…»

[20:55] <leont> In fully folded mode, any negative character set containing an s would now suddenly also match the two characters ss, because of ß

[20:55] <leont> This patch led to madness

[20:55] <leont> path

[20:55] <lizmat> m: [[2, 3], [4, [5, 6]]].map: &say

[20:55] <camelia> rakudo-moar 078d81: OUTPUT«[2 3]␤[4 [5 6]]␤»

[20:56] <leont> (well, not match, but you get the point)

[20:58] <jnthn> Such a patch probably would lead to madness too :P

[20:58] <lizmat> psch: what is that code supposed to do?

[20:58] <bartolin> j: say squish("a", "b", "b", "a") # a bit simpler, even

[20:58] <camelia> rakudo-jvm 078d81: OUTPUT«(a b a Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.new Mu.ne…»

[20:58] <lizmat> m: say [[2, 3], [4, [5, 6]]].squish

[20:58] <camelia> rakudo-moar 078d81: OUTPUT«([2 3] [4 [5 6]])␤»

[20:59] <lizmat> m: say squish("a", "b", "b", "a")

[20:59] <camelia> rakudo-moar 078d81: OUTPUT«(a b a)␤»

[20:59] <lizmat> bartolin psch I think it's another ternary precedence issue

[20:59] <AlexDaniel> m: printf '', :l'l;

[20:59] <camelia> rakudo-moar 078d81: OUTPUT«Unexpected named parameter 'l'l' passed␤  in block <unit> at /tmp/vPvUIHeS6Y:1␤␤»

[21:00] <AlexDaniel> Hm, I don't really like how error messages are using single quotes

[21:00] <AlexDaniel> especially considering that variables can have ' in their names

[21:00] <AlexDaniel> .oO( maybe that's the main problem )

[21:00] <psch> lizmat: it's a test, from S03-metaops/hyper.t:443

[21:01] <bartolin> lizmat: oh! the other day I tried to debug that and found that somehow IterationEnd =:= $pulled did not match within 'push-exactly' (src/core/Iterator.pm)

[21:01] <psch> lizmat: well, not literally, but » instead of map does the same

[21:01] <psch> lizmat: oh, that could be i guess... i didn't look closely at it

[21:04] *** Oatmeal joined
[21:04] <dalek> rakudo/nom: 4e50aa2 | lizmat++ | src/core/Any-iterable-methods.pm:

[21:04] <dalek> rakudo/nom: Fix precedence issue in squish

[21:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4e50aa2f18

[21:05] <bartolin> lizmat++

[21:05] <lizmat> still building jvm, not sure if that fixes it, though  :-(

[21:05] <jnthn> m: say «நி กำ षि "\r\n"»».chars

[21:05] <camelia> rakudo-moar 078d81: OUTPUT«(1 1 1 2)␤»

[21:05] <jnthn> 3 out of 4 :)

[21:06] <lizmat> »»   ??

[21:06] <jnthn> m: say «நி กำ षि \r\n»».chars

[21:06] <camelia> rakudo-moar 078d81: OUTPUT«(1 1 1)␤»

[21:06] <lizmat> ah, ok

[21:06] <jnthn> Oh, duh, not scarequotes :)

[21:07] <jnthn> lizmat: heh, yeah, I mighta chosen a different qqw form there :)

[21:07] <jnthn> (Just copied it from the RT)

[21:07] <jnthn> m: say "नि".chars

[21:07] <camelia> rakudo-moar 078d81: OUTPUT«1␤»

[21:08] <dalek> roast: cc9a364 | coke++ | S32-list/produce.t:

[21:08] <dalek> roast: Fudge RT #126493 for JVM

[21:08] <dalek> roast: review: https://github.com/perl6/roast/commit/cc9a364d21

[21:08] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126493

[21:10] *** firstdayonthejob joined
[21:10] <[Coke]> was 4e50aa2f18e6d915c278548dfd7962b7011e513b to fix an issue on the JVM?

[21:10] <jnthn> Anyways, 'night o/

[21:10] *** diana_olhovik_ left
[21:10] <[Coke]> night

[21:11] <psch> [Coke]: the actual issue is that it worked before on mvm, i think

[21:11] <psch> [Coke]: but practically, yes

[21:11] <lizmat> night jnthn 

[21:12] <[Coke]> anytime we change perl6 code that worked on mvm but didn't on jvm, it worries me.

[21:12] <lizmat> [Coke] hopefully so

[21:12] <[Coke]> feels like we're missing an underlying issue somewhere.

[21:12] <timotimo> so many lines of text today

[21:12] * psch nods

[21:12] <lizmat> [Coke]: agree

[21:12] <psch> there's something underlying grammars that's weird

[21:13] *** sufrostico left
[21:13] <psch> m: my $x; 0 ?? $x = 5 !! $x = 0;

[21:13] <camelia> rakudo-moar 078d81: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ni6cAuL8i7␤Precedence of = is too loose to use inside ?? !!; please parenthesize␤at /tmp/ni6cAuL8i7:1␤------> 3my $x; 0 ?? $x7⏏5 = 5 !! $x = 0;␤    expecting any of:␤        infix␤        infi…»

[21:14] <psch> heh

[21:14] * TimToady guesses a bootstrapping issue

[21:15] *** raiph left
[21:15] <bartolin> lizmat: I'm afraid 4e50aa2 does not fix the Mu.new issue

[21:15] <lizmat> ok, then I should probably revert that one

[21:16] <bartolin> maybe you can wait for your build to finish and double check?

[21:16] *** skids left
[21:16] <psch> TimToady: we're still changing things relevant for ?? !! during CORE.setting compilation?

[21:17] <lizmat> bartolin: build finished and indeed not fixed :-(

[21:17] <TimToady> some exceptions don't exist till partway through, and I've had trouble calling note() sometimes

[21:17] <psch> but shouldn't it still die and complain about "can't build exception object" or somesuch

[21:18] <bartolin> psch: that was what the failing jvm build compained about

[21:18] <dalek> roast: 246b9ea | coke++ | integration/weird-errors.t:

[21:18] <dalek> roast: add test for RT #115326

[21:18] <dalek> roast: review: https://github.com/perl6/roast/commit/246b9ea677

[21:18] <dalek> roast: f95820a | coke++ | S03-operators/assign.t:

[21:18] <dalek> roast: merge two RTs

[21:18] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=115326

[21:18] <dalek> roast: review: https://github.com/perl6/roast/commit/f95820a4d8

[21:18] *** raiph joined
[21:19] <TimToady> psch: unless it's in a try somewhere

[21:19] *** kjs_ joined
[21:21] *** geraud joined
[21:21] <[Coke]> hurm. after lizmat's commit, I'm getting the "Type check failed in binding @a; expected Positional but got Seq" on squish now

[21:21] <[Coke]> and we have other things failing that way.

[21:22] <[Coke]> #126493

[21:22] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126493

[21:22] <[Coke]> ->

[21:23] <bartolin> for the records: the jvm build failed like this: https://gist.github.com/usev6/9be71bd04ea7d34c9595

[21:23] *** dg left
[21:24] <itz_stmuk> has anyone used gcc 5.1.1 successfully?

[21:24] * bartolin is very curious why moar had no problem with that

[21:25] <TimToady> lizmat: 4e50aa2 looks like superstitious parens to me

[21:25] <TimToady> =:= is chaining, which is tighter than ||

[21:26] *** dg joined
[21:27] <dalek> rakudo/nom: 8fcc28f | lizmat++ | src/core/Any-iterable-methods.pm:

[21:27] <dalek> rakudo/nom: Revert "Fix precedence issue in squish"

[21:27] <dalek> rakudo/nom: 

[21:27] <dalek> rakudo/nom: This reverts commit 4e50aa2f18e6d915c278548dfd7962b7011e513b.

[21:27] <dalek> rakudo/nom: 

[21:27] <dalek> rakudo/nom: Superstitious parens don't fix no JVM issues  :-(

[21:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8fcc28f0a6

[21:29] *** abelman joined
[21:29] *** diana_olhovik joined
[21:33] *** zakharyas joined
[21:38] *** diana_olhovik__ joined
[21:38] <RabidGravy> itz_stmuk, yes 

[21:38] *** diana_olhovik left
[21:39] *** JustThisGuy joined
[21:41] <psch> hrm, this is really weird

[21:41] <psch> perl6-m --setting=NULL still bails on assignment in ?? !!

[21:42] <psch> i mean, with 85de7fd2 reverted as well

[21:42] <psch> err, not 85de7fd2, 078d813a

[21:42] <psch> 85de7fd2 is my local revert commit... :S

[21:43] <JustThisGuy> Hi all! I'm putting together a intro presentation, and I was trying to translate the Perl 5 idiom "while (<>) {...}" to Perl 6. I found how to do this on https://perl6advent.wordpress.com/2011/12/23/day-23-idiomatic-perl-6/.

[21:44] *** Alina-malina left
[21:44] <JustThisGuy> My program is "for lines() { .say }". It works file if I only specify one filename on the command line. If I specify 2 or more, it cats them all as it should, but hangs at the end.

[21:44] <JustThisGuy> s/file/fine/

[21:45] *** Alina-malina joined
[21:46] <lizmat> JustThisGuy: that feels like a bug then

[21:47] <gfldex> JustThisGuy: what does perl6 --version say and what OS do you use?

[21:47] <JustThisGuy> OK, thanks lizmat! Just wanted to make sure I wasn't doing something wrong.

[21:48] <JustThisGuy> Linux Mint 17.2 and "2015.10-49-ga333147 built on MoarVM version 2015.10"

[21:49] <gfldex> m: .say for lines

[21:49] <camelia> rakudo-moar 4e50aa: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[21:50] <dalek> rakudo/nom: 3b212a0 | lizmat++ | src/core/IO/Handle.pm:

[21:50] <dalek> rakudo/nom: Fix for #126487

[21:50] <dalek> rakudo/nom: 

[21:50] <dalek> rakudo/nom: Should also handle cases where a word or whitespace would extend for

[21:50] <dalek> rakudo/nom: more than one entire chunk.

[21:50] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126487

[21:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b212a0f71

[21:50] <JustThisGuy> OK, thanks for the help. I'm off to file a bug...

[21:51] <lizmat> JustThisGuy: you know how to do that ?

[21:51] <lizmat> just send an email to [email@hidden.address]
[21:51] *** FROGGS left
[21:51] <JustThisGuy> Yeah, I did that before with "[BUG]" in the Subject.

[21:51] <lizmat> okidoki  :-)

[21:52] <JustThisGuy> bye!

[21:52] <lizmat> will have a look at it tomorrow: 

[21:52] <lizmat> bye!

[21:52] *** JustThisGuy left
[21:53] * lizmat gets an early night

[21:53] <itz_stmuk> libuv in moar is 1.0.0?

[21:53] <japhb> I count at least 5 different modules in the ecosystem (>1%!) that are HTTP/HTTPS clients: LWP::Simple, Net::HTTP, HTTP::UserAgent, HTTP::Client, and HTTP::Tinyish.  Any guidance on which one to use?  My main requirements are: solid HTTPS support, both GET and POST, and proper cookie and proxy handling.  Probably in that order, too.

[21:53] <yoleaux> 07:11Z <nine> japhb: the truth? I cargo culted .CREATE without thinking that much about it. I had a look at IterationBuffer.push, saw that it just does nqp::push and thought that if we cannot inline that, we have much bigger problems. So I rather avoided breaking encapsulation.

[21:53] <yoleaux> 07:14Z <nine> japhb: The good news is, that indeed, it does not matter all that much. Using nqp::push directly would be about 3 % faster. My guess is that once spesh did it's work, they're equal.

[21:53] <itz_stmuk> (probably asking on the wrong channel I know)

[21:53] <japhb> Thanks, nine++!

[21:54] <flussence> japhb: I'd probably go with Net::Curl, that way the stability is Someone Else's Problem :)

[21:55] <japhb> flussence: *chuckle* OK, I guess that's 6 different modules then ...

[21:56] <japhb> Does it use the library via NativeCall, or shell out to the CLI client?

[21:56] <flussence> NativeCall

[21:56] <japhb> Excellent.  OK, that's probably the best plan then.

[21:57] <japhb> Hmmm, and I can actually make use of having SCP available too ... thanks for the pointer, flussence++

[21:58] <flussence> azawawi++ # writing the module in the first place

[21:59] <japhb> Yeah, I was about to say azawawi++ for just piles of modules.

[22:00] *** rindolf left
[22:00] *** rindolf joined
[22:01] *** _dolmen_ joined
[22:01] <itz_stmuk> Net::Curl::Easy for the lazy as well :)

[22:02] <itz_stmuk> it even pasts at least one of the w3c broken ecoding tests

[22:03] *** abelman left
[22:03] *** firstdayonthejob left
[22:07] <japhb> itz_stmuk: Broken encoding tests?

[22:07] <tony-o> moritz: just an FYI, the channel/supply thing runs in whatever thread the data was emitted from so that causes cross thread problems too 

[22:07] *** firstdayonthejob joined
[22:08] <tony-o> m: my $s = Supply.new; $s.tap: -> $r { $*THREAD.name.say; }; await Thread.start({ $s.emit("from thread"); }, :name<from thread>); $s.emit('from main');

[22:08] <camelia> rakudo-moar 8fcc28: OUTPUT«from thread␤Must specify a Promise or Channel to await on (got a Thread)␤  in block <unit> at /tmp/2BN_ZkGhag:1␤␤»

[22:09] <tony-o> m: my $s = Supply.new; $s.tap: -> $r { $*THREAD.name.say; }; Thread.start({ $s.emit("from thread"); }, :name<from thread>); $s.emit('from main');

[22:09] <camelia> rakudo-moar 8fcc28: OUTPUT«from thread␤Initial thread␤»

[22:13] <itz_stmuk> https://github.com/azawawi/perl6-net-curl/blob/master/t/easy_curl_encoding.t

[22:13] <itz_stmuk> japhb: most of the pure perl 6 web client don't handle wrongly encoded web pages

[22:14] <itz_stmuk> japhb: there are a number of such test pages on the w3c.org site

[22:14] *** diana_olhovik__ left
[22:17] *** kid51 joined
[22:18] <tony-o> i believe the one ugexe is working also handles that

[22:20] *** tokuhiro_ joined
[22:20] *** tokuhiro_ left
[22:20] *** Zoffix left
[22:20] *** tokuhiro_ joined
[22:21] <itz_stmuk> Net::HTTP?

[22:25] *** bjz left
[22:27] *** lostinfog left
[22:32] <itz_stmuk> I don't see any decode logic

[22:33] *** vendethiel left
[22:34] <Skarsnik> is that at http level or at html level?

[22:34] <ugexe> i havent broke that part out from zef::net::http yet, so currently its $response.body.unpack('A*') heh

[22:37] *** zakharyas left
[22:40] <itz_stmuk> http://www.w3.org/2006/11/mwbp-tests/

[22:44] *** kjs_ left
[22:44] <ugexe> i have some code for guessing decoding from places other than the header https://github.com/ugexe/Perl6-MediaType/blob/master/lib/MediaType.pm6

[22:46] <ugexe> once i got ot heuristics i said enough

[22:47] *** zengargoyle left
[22:49] *** zengargoyle joined
[22:52] *** Begi1115 left
[22:53] <itz_stmuk> ah cool

[22:59] *** lucasb joined
[23:01] *** rindolf left
[23:10] *** ^elyse^ left
[23:19] <lucasb> do I have to be logged on RT to avoid these "Possible cross-site request forgery" warnings? I don't remeber if I have a account there or not...

[23:21] <timotimo> Actually while the main characters do not have a subclass the Class Mastery XP they earn is basically wasted. It's a good idea to always set a subclass to the story characters.

[23:22] <lucasb> timotimo: hmm, interesting. but I didn't understand anything :)

[23:23] <timotimo> timotimo: cat walked over touchpad :)

[23:32] *** kmel_ joined
[23:38] *** Kmel__ joined
[23:42] <lucasb> m: @*ARGS = '/dev/null' xx 2; .say for lines

[23:42] <camelia> rakudo-moar 3b212a: OUTPUT«Memory allocation failed; could not allocate 32768 bytes␤»

[23:42] *** Kmel__ left
[23:42] <lucasb> ^^ it's this new ticket: for lines() Hangs on 2 or More Files #126494

[23:42] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126494

[23:44] <RabidGravy> tadzik, I've done a PR on JSON::Unmarshal if you get a minute

[23:44] *** espadrine left
[23:48] <tadzik> oh, sure

[23:48] <tadzik> RabidGravy: thanks a lot :)

[23:52] *** RabidGravy left
[23:54] *** sufrostico joined
[23:56] *** lucasb left
[23:58] *** bacek left
