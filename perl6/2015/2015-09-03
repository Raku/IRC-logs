[00:05] <dalek> roast/glr: a3aa034 | skids++ | S02-types/whatever.t:

[00:05] <dalek> roast/glr: Add tests for "is rw" ("is parcel" actually) on WhateverCode params

[00:05] <dalek> roast/glr: 

[00:05] <dalek> roast/glr: (And post/pre auto-increment/decrement of Whatever)

[00:05] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/a3aa034071

[00:06] <ugexe> i've been getting an above average number of Proc's hanging and not being started in the last 24 hours

[00:07] *** aborazmeh joined
[00:07] *** aborazmeh left
[00:07] *** aborazmeh joined
[00:07] <ugexe> seemingly random though

[00:14] *** n0tjack joined
[00:16] *** raiph left
[00:19] *** n0tjack left
[00:33] *** dha left
[00:44] *** laouji joined
[00:47] *** n0tjack joined
[00:57] *** Guest81400 left
[00:58] *** laouji left
[01:00] *** n0tjack left
[01:00] <japhb> .tell timotimo I missed the GLR-prep work you did on perl6-bench last weekend.  Thank you!

[01:00] <yoleaux> japhb: I'll pass your message to timotimo.

[01:01] <ShimmerFairy> please relay my messages after the tone, \c[BELL]

[01:01] <yoleaux> 2 Sep 2015 16:43Z <japhb> ShimmerFairy: I do understand, and thank you.  :-)

[01:01] *** laouji joined
[01:02] *** Guest81400 joined
[01:02] *** mattp_ left
[01:03] *** mattp__ joined
[01:03] <ShimmerFairy> .tell TimToady that explanation makes perfect sense, and even though I may still say "I see no number", I can be content with the idea that Stringy nothing should lead to Numeric nothing :)

[01:03] <yoleaux> ShimmerFairy: I'll pass your message to TimToady.

[01:04] <ShimmerFairy> .tell TimToady: would you be fine with +"    " (that is, numified non-empty 'blank' string) either die-ing like any other non-Numeric string, or at least warning about the return of 0 ?

[01:04] <yoleaux> ShimmerFairy: What kind of a name is "TimToady:"?!

[01:04] <ShimmerFairy> .tell TimToady would you be fine with +"    " (that is, numified non-empty 'blank' string) either die-ing like any other non-Numeric string, or at least warning about the return of 0 ?

[01:04] <yoleaux> ShimmerFairy: I'll pass your message to TimToady.

[01:05] <ShimmerFairy> the bot should learn to check /»/ instead of /<?ws>/  :P

[01:09] *** yqt left
[01:12] <ShimmerFairy> japhb: by the way, I would not be opposed to val() being a bit more permissive than actual literals, now that I think about it. (I was being pretty defensive about my choices yesterday.) The only place where I'd object is with :#() style adverbials, since you really might as well use EVAL at that point.

[01:16] *** n0tjack joined
[01:21] *** n0tjack left
[01:25] *** mattp__ left
[01:32] *** n0tjack joined
[01:37] *** tinyblak joined
[01:41] *** tinyblak left
[01:42] *** n0tjack left
[01:50] <japhb> ShimmerFairy: I am happy you're agreeing with permissive val(), but am curious what makes :#() special?  Since they set the *default* radix, rather than setting the *actual* radix, you can't just do e.g. ('0x' ~ $number-string) instead of :16($number-string) and get the same behavior ... so it's not obvious to me why to push that complexity to the script writer

[01:51] <ShimmerFairy> japhb: it's rather about  +":16(\"0o8\")"  ; esp. if the parens in that string contain a variable or something code-like, val() would have to run EVAL() on it if it parsed that kind of string.

[01:51] <japhb> ShimmerFairy: (Err, assuming EVAL or .Numeric on that first one)

[01:51] <japhb> OMG SLOW NEWORK

[01:52] <japhb> ShimmerFairy: Oh, OK, I think I see what you're saying.

[01:52] <ShimmerFairy> basically I think you should type  EVAL(":16(\$stuff)")  instead of  val(":16(\$stuff)")  , since the :#() is where you start wanting to eval arbitrary code.

[01:54] <ShimmerFairy> :#<> and :#[] are just fine for val(), though :) . (However val() should probably force constants for :#[] )

[01:54] <japhb> I think I had mentally DWIMmed the user to be doing +':16(0o8)' rather than +':16("0o8")' -- or rather +":16($foo)" instead of +":16(\"$foo\")"

[01:55] <japhb> I saw the non-sensical behavior and went "What would be a sensible thing?" instead of "OH GOD MAKE IT STOP".  ;-)

[01:55] <ShimmerFairy> evaluating any kinds of constant strings is fine, it's just the arbitrary code bits where I think you want EVAL instead :)

[01:55] <japhb> Fairy nuff.  ;-)

[01:56] * japhb is reminded to get back to thinking about his GM's assistant code

[02:03] <colomon> general motors? game master?  

[02:05] *** mattp__ joined
[02:08] <TEttinger> grist mill

[02:09] *** noganex joined
[02:11] *** n0tjack joined
[02:12] *** noganex_ left
[02:15] *** n0tjack left
[02:16] *** tinyblak joined
[02:23] *** BenGoldberg joined
[02:25] *** tinyblak left
[02:26] *** tinyblak joined
[02:31] *** tinyblak left
[02:44] *** n0tjack joined
[02:45] *** ShimmerFairy left
[02:48] *** n0tjack left
[02:51] *** mr-foobar joined
[02:52] *** tinyblak joined
[02:56] *** mr-foobar left
[02:57] *** tinyblak left
[02:57] *** mr-foobar joined
[02:58] *** ShimmerFairy joined
[03:03] *** kaare_ joined
[03:03] *** n0tjack joined
[03:07] <labster> m: my class AB { method Str { "foo" } }; my $x = AB.new; sprintf($x, "%s")'

[03:07] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_KTZue0BgK␤Two terms in a row␤at /tmp/_KTZue0BgK:1␤------> 3" } }; my $x = AB.new; sprintf($x, "%s")7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤   …»

[03:07] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/2H0aPOWlQw␤Two terms in a row␤at /tmp/2H0aPOWlQw:1␤------> 3" } }; my $x = AB.new; sprintf($x, "%s")7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤   …»

[03:07] <labster> m: my class AB { method Str { "foo" } }; my $x = AB.new; sprintf($x, "%s")

[03:07] <camelia> rakudo-moar e6f360: OUTPUT«Type check failed in binding $format; expected 'Cool' but got 'AB'␤  in block <unit> at /tmp/TjfD7izgAA:1␤␤»

[03:07] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Type check failed in binding $format; expected 'Cool' but got 'AB'␤  in block <unit> at /tmp/IHoNM1LEz_:1␤␤»

[03:07] *** n0tjack left
[03:07] *** prevost joined
[03:09] <colomon> m: say Mu.perl

[03:09] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Mu␤»

[03:09] <camelia> rakudo-moar e6f360: OUTPUT«Mu␤»

[03:09] <colomon> m: say dd Mu

[03:09] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Mu␤Nil␤»

[03:09] <camelia> rakudo-moar e6f360: OUTPUT«Mu␤Nil␤»

[03:09] <colomon> m: dd Mu

[03:09] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Mu␤»

[03:09] <camelia> rakudo-moar e6f360: OUTPUT«Mu␤»

[03:10] <labster> dd returns Nil?

[03:10] <labster> m: say dd 1

[03:10] <camelia> rakudo-moar e6f360: OUTPUT«1␤Nil␤»

[03:10] <GLRelia> rakudo-moar a6bb0b: OUTPUT«1␤Nil␤»

[03:10] <colomon> m: my @a = 1..2; my $i = @a.iterator; dd $i.pull-one; dd $i.pull-one; dd $i.pull-one

[03:10] <GLRelia> rakudo-moar a6bb0b: OUTPUT«@a = 1␤@a = 2␤Mu.new␤»

[03:10] <camelia> rakudo-moar e6f360: OUTPUT«Method 'pull-one' not found for invocant of class 'ListIter'␤  in block <unit> at /tmp/0i_faW9Nqi:1␤␤»

[03:10] <colomon> m: say IteratorEnd.perl

[03:10] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/GRCuU8E_wD␤Undeclared name:␤    IteratorEnd used at line 1. Did you mean 'Iterator'?␤␤»

[03:10] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6Deypr2iSc␤Undeclared name:␤    IteratorEnd used at line 1. Did you mean 'Iterator'?␤␤»

[03:11] <colomon> m: say IterationEnd.perl

[03:11] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Mu.new␤»

[03:11] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8ToGJhLkmq␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:11] <colomon> ah

[03:15] *** n0tjack joined
[03:16] <labster> m: my class AB { }; multi sub sprintf(AB $x, $format) { "foo" }; say sprintf("bar", "%s")

[03:16] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rgokAT5eEm␤Calling sprintf(Str, Str) will never work with any of these multi signatures:␤    (AB $x, $format)␤at /tmp/rgokAT5eEm:1␤------> 3 sprintf(AB $x, $format) { "foo" }; say 7⏏5sprintf("bar",…»

[03:16] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/JW047MNjEU␤Calling sprintf(Str, Str) will never work with any of these multi signatures:␤    (AB $x, $format)␤at /tmp/JW047MNjEU:1␤------> 3 sprintf(AB $x, $format) { "foo" }; say 7⏏5sprintf("bar",…»

[03:16] <colomon> m: my @a = 1..2; my $i = @a.iterator; dd $i.pull-one; dd $i.pull-one; say $i.pull-one =:= IterationEnd;

[03:16] <GLRelia> rakudo-moar a6bb0b: OUTPUT«@a = 1␤@a = 2␤True␤»

[03:16] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1HVaHVMVAi␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:16] <colomon> m: my @a = 1..2; my $i = @a.iterator; dd $i.pull-one; say $i.pull-one !=:= IterationEnd;

[03:16] <GLRelia> rakudo-moar a6bb0b: OUTPUT«@a = 1␤True␤»

[03:16] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MQpsWunMxd␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:19] *** n0tjack left
[03:22] *** aborazmeh left
[03:23] <colomon> m: my @a = 1..2; my $i = @a.iterator; loop { my $a = $i.pull-one; dd $a; last if $a =:= IterationEnd; }

[03:23] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/eE_fIHzBm1␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:23] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(timeout)$a = 1␤$a = 2␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = …»

[03:26] <colomon> m: my @a = 1..2; my $i = @a.iterator; loop { my \a = $i.pull-one; dd a; last if a =:= IterationEnd; }

[03:26] <GLRelia> rakudo-moar a6bb0b: OUTPUT«@a = 1␤@a = 2␤Mu.new␤»

[03:26] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0VG1K249U2␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:28] <skids> m: my @a = 1..2; my $i = @a.iterator; loop { my $a := $i.pull-one; dd a; last if a =:= IterationEnd; } # sameish thing

[03:28] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/QQww_qr6xj␤Preceding context expects a term, but found infix =:= instead␤at /tmp/QQww_qr6xj:1␤------> 3y $a := $i.pull-one; dd a; last if a =:=7⏏5 IterationEnd; } # sameish thing␤»

[03:28] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lrWoDT5xiA␤Preceding context expects a term, but found infix =:= instead␤at /tmp/lrWoDT5xiA:1␤------> 3y $a := $i.pull-one; dd a; last if a =:=7⏏5 IterationEnd; } # sameish thing␤»

[03:28] <skids> oh

[03:28] <skids> m: my @a = 1..2; my $i = @a.iterator; loop { my $a := $i.pull-one; dd $a; last if $a =:= IterationEnd; } # sameish thing

[03:28] <GLRelia> rakudo-moar a6bb0b: OUTPUT«@a = 1␤@a = 2␤Mu.new␤»

[03:28] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1HecEdx2U1␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:30] <colomon> m: my @a = 1..2; my $i = @a.iterator; my \a = $i.pull-one; loop { a = $i.pull-one; dd a; last if a =:= IterationEnd; }

[03:30] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MURVxI7dVH␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:30] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(timeout)@a = 2␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤@a = Mu.new␤…»

[03:30] <colomon> m: my @a = 1..2; my $i = @a.iterator; loop { my $a := $i.pull-one; dd $a; last if $a =:= IterationEnd; }

[03:30] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/v8yPofG6Nq␤Missing semicolon␤at /tmp/v8yPofG6Nq:1␤------> 3 { my $a := $i.pull-one; dd $a; last if 7⏏5$a =:= IterationEnd; }␤»

[03:30] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/kjHavozGjn␤Missing semicolon␤at /tmp/kjHavozGjn:1␤------> 3 { my $a := $i.pull-one; dd $a; last if 7⏏5$a =:= IterationEnd; }␤»

[03:31] <colomon> m: my @a = 1..2; my $i = @a.iterator; loop { my $a = $i.pull-one; dd $a; last if $a =:= IterationEnd; }

[03:31] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/AUwXRuNlQK␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:31] *** braintwist left
[03:31] <colomon> m: my @a = 1..2; my $i = @a.iterator; loop { my $a := $i.pull-one; dd $a; last if $a =:= IterationEnd; }

[03:31] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/VtIHbCpY85␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:31] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(timeout)$a = 1␤$a = 2␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = Mu.new␤$a = …»

[03:31] <GLRelia> rakudo-moar a6bb0b: OUTPUT«@a = 1␤@a = 2␤Mu.new␤»

[03:31] <colomon> m: my @a = 1..2; my $i = @a.iterator; loop { my $a := $i.pull-one; dd $a; last if $a =:= IterationEnd; }

[03:31] <GLRelia> rakudo-moar a6bb0b: OUTPUT«@a = 1␤@a = 2␤Mu.new␤»

[03:31] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/S1tgV3i6UC␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:31] <colomon> m: my @a = 1..2; my $i = @a.iterator; my $a; loop { $a := $i.pull-one; dd $a; last if $a =:= IterationEnd; }

[03:31] <GLRelia> rakudo-moar a6bb0b: OUTPUT«@a = 1␤@a = 2␤Mu.new␤»

[03:31] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ydPhkfC9nr␤Undeclared name:␤    IterationEnd used at line 1␤␤»

[03:31] <colomon> bingo

[03:31] *** ab5tract_ left
[03:31] *** braintwist joined
[03:33] *** ab5tract joined
[03:33] <colomon> \o/

[03:38] *** mr-foobar left
[03:39] *** mr-foobar joined
[03:47] *** n0tjack joined
[03:52] *** n0tjack left
[03:55] *** mr-foobar left
[03:58] *** mr-foobar joined
[03:58] *** abaugher left
[03:59] *** abaugher joined
[04:05] *** dwarring left
[04:08] *** telex left
[04:10] *** telex joined
[04:16] *** BenGoldberg left
[04:21] *** n0tjack joined
[04:25] *** xinming left
[04:25] *** n0tjack left
[04:26] *** xinming joined
[04:27] *** aborazmeh joined
[04:27] *** aborazmeh left
[04:27] *** aborazmeh joined
[04:28] *** virtualsue joined
[04:34] *** mr-foobar left
[04:44] *** [Sno] left
[04:46] *** tinyblak joined
[04:47] *** tinyblak left
[04:49] *** tinyblak joined
[04:54] *** n0tjack joined
[04:58] *** n0tjack left
[05:00] *** tinyblak left
[05:05] *** khw left
[05:14] *** skids left
[05:14] *** virtualsue left
[05:15] *** prevost left
[05:18] *** mr-foobar joined
[05:25] <ugexe> m: my $x = Buf.new; for $x.rotor(1,1) { say $_ }

[05:25] <camelia> rakudo-moar e6f360: ( no output )

[05:25] <GLRelia> rakudo-moar a6bb0b: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/FKSI6ctc1_:1␤␤»

[05:26] *** n0tjack joined
[05:31] *** n0tjack left
[05:44] *** xfix joined
[05:44] *** xfix left
[05:44] *** xfix joined
[05:48] *** rurban joined
[05:51] *** lizmat joined
[05:58] *** n0tjack joined
[06:01] *** abaugher left
[06:02] *** abaugher joined
[06:02] *** n0tjack left
[06:08] *** diana_olhovik_ joined
[06:12] *** virtualsue joined
[06:12] *** aborazmeh left
[06:15] *** domidumont joined
[06:15] *** Loren_ joined
[06:18] *** blackcat_ left
[06:19] *** FROGGS left
[06:19] *** domidumont left
[06:20] *** RabidGravy joined
[06:20] *** _mg_ joined
[06:21] *** domidumont joined
[06:23] *** [Sno] joined
[06:24] *** virtualsue left
[06:31] <japhb> .tell colomon Game Master.  :-)

[06:31] <yoleaux> japhb: I'll pass your message to colomon.

[06:31] *** n0tjack joined
[06:34] *** xiaomiao left
[06:35] <RabidGravy> morning

[06:35] *** n0tjack left
[06:35] *** xiaomiao joined
[06:40] *** jantore left
[06:40] *** jantore joined
[06:41] *** laouji left
[06:43] *** laouji joined
[06:45] *** FROGGS joined
[06:57] *** inokenty left
[07:02] *** tinyblak joined
[07:03] *** Ven joined
[07:04] *** n0tjack joined
[07:08] *** mattp__ left
[07:08] *** n0tjack left
[07:10] *** tinyblak left
[07:11] *** inokenty joined
[07:11] *** tinyblak joined
[07:12] *** lizmat left
[07:13] *** darutoko joined
[07:15] *** araujo left
[07:15] *** ShimmerFairy left
[07:16] *** tinyblak left
[07:18] *** SamuraiJack joined
[07:19] *** araujo joined
[07:23] <moritz> m: .say for Any.new.rotor(1, 1)

[07:23] <yoleaux> 2 Sep 2015 23:37Z <skids> moritz: see roast/glr commit d6a9f7c

[07:23] <camelia> rakudo-moar e6f360: OUTPUT«Any.new␤»

[07:23] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(Any.new)␤»

[07:24] <moritz> .tell skids thanks for fixing s/say/is/; it was intentional that the test aborts; after all it's a GLR regression. If the test is skipped, we won't notice it

[07:24] <yoleaux> moritz: I'll pass your message to skids.

[07:25] *** espadrine joined
[07:27] *** larion left
[07:29] *** ShimmerFairy joined
[07:33] *** lizmat joined
[07:34] *** tinyblak joined
[07:36] *** n0tjack joined
[07:40] <lizmat> good *, #perl6!

[07:41] *** n0tjack left
[07:41] <nine> Good morning, liz!

[07:41] <Ven> \o, #perl6!

[07:41] <lizmat>  o/ Ven nine :-)

[07:43] *** Woodi joined
[07:44] *** rurban left
[07:45] *** [TuxCM] joined
[07:45] <RabidGravy> erp

[07:46] <lizmat> RabidGravy: bless you!

[07:46] <RabidGravy> :)

[07:50] <FROGGS> o/

[07:54] *** mr-foobar left
[07:54] *** tinyblak left
[07:54] *** tinyblak joined
[07:55] *** mr-foobar joined
[07:56] *** tinyblak left
[07:58] *** tinyblak joined
[08:00] *** mr-foobar left
[08:00] *** tinyblak left
[08:02] *** mr-foobar joined
[08:08] *** n0tjack joined
[08:12] *** [TuxCM] left
[08:13] *** n0tjack left
[08:13] *** espadrine left
[08:14] *** rhr left
[08:15] *** n0tjack joined
[08:15] *** rhr joined
[08:19] *** n0tjack left
[08:20] <lizmat> excellent keynote by Sawyer: Perl === Home  :-)

[08:20] <lizmat> moving&

[08:20] *** lizmat left
[08:23] *** inokenty left
[08:23] *** araujo left
[08:23] *** zacts left
[08:24] *** araujo joined
[08:24] *** zacts joined
[08:25] *** n0tjack joined
[08:28] *** CIAvash joined
[08:29] *** n0tjack left
[08:36] *** Ven left
[08:37] *** inokenty joined
[08:40] <RabidGravy> how's the glr merging coming along?

[08:45] *** cognominal joined
[08:47] *** mprelude joined
[08:51] *** Ven joined
[08:51] *** laouji left
[08:51] *** larion joined
[08:53] <TimToady> ShimmerFairy: the problem with deferring to EVAL is that you open yourself to injection attacks; part of the motivation of val() is to restrict the input domain to the non-dangerous subset of EVAL

[08:53] <yoleaux> 01:03Z <ShimmerFairy> TimToady: that explanation makes perfect sense, and even though I may still say "I see no number", I can be content with the idea that Stringy nothing should lead to Numeric nothing :)

[08:53] <yoleaux> 01:04Z <ShimmerFairy> TimToady: would you be fine with +"    " (that is, numified non-empty 'blank' string) either die-ing like any other non-Numeric string, or at least warning about the return of 0 ?

[08:54] *** [TuxCM] joined
[08:54] <ShimmerFairy> TimToady: that's true, though I can't imagine many cases where the :#() form would be used on a constant string, since there's :#<>  :)

[08:55] <cognominal> m: .say for CORE.WHO

[08:55] <camelia> rakudo-moar e6f360: OUTPUT«SIGSEGV => (Mu)␤WhateverCode => (Mu)␤bit => (Mu)␤&FILETEST-X => (Mu)␤&callframe => (Mu)␤Pair => (Mu)␤SIGHUP => (Mu)␤&flat => (Mu)␤utf8 => (Mu)␤&TRANSPOSE => (Mu)␤&MAKE-DIR-LIST => (Mu)␤&infix:<∖> => (Mu)␤CurrentThreadScheduler => …»

[08:55] <GLRelia> rakudo-moar a6bb0b: OUTPUT«SIGSEGV => (Mu)␤WhateverCode => (Mu)␤bit => (Mu)␤&FILETEST-X => (Mu)␤Slip => (Mu)␤&callframe => (Mu)␤Pair => (Mu)␤SIGHUP => (Mu)␤&flat => (Mu)␤PromiseStatus => (Mu)␤&RETURN-LIST => (Mu)␤utf8 => (Mu)␤&TRANSPOSE => (Mu)␤&MAKE-DIR-LI…»

[08:55] <TimToady> space is notionally trimmed, so I think +"   " should be the same as +""

[08:55] <cognominal> Why the Mus?

[08:56] <TimToady> no kloo

[08:57] <ShimmerFairy> Yeah, that's how it was in Str.Numeric; the string was trimmed and then emptiness was checked. I'm just not quite sure if a blank string should be the same as an empty string.

[08:58] <cognominal> m: say CORE.WHO.WHAT

[08:58] <camelia> rakudo-moar e6f360: OUTPUT«(PseudoStash)␤»

[08:58] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(PseudoStash)␤»

[08:58] *** n0tjack joined
[08:58] <TimToady> m: say CORE.WHO.values

[08:58] <camelia> rakudo-moar e6f360: OUTPUT«(Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (…»

[08:58] <GLRelia> rakudo-moar a6bb0b: OUTPUT«((Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) (Mu) …»

[08:59] <TimToady> m: say CORE.WHO.^name

[08:59] <camelia> rakudo-moar e6f360: OUTPUT«PseudoStash␤»

[08:59] <GLRelia> rakudo-moar a6bb0b: OUTPUT«PseudoStash␤»

[08:59] <TimToady> well, CORE is a lexical scope; not quite sure why it would have an associated package anyway...

[09:00] <TimToady> m: say CORE

[09:00] <camelia> rakudo-moar e6f360: OUTPUT«(CORE)␤»

[09:00] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(CORE)␤»

[09:00] <TimToady> m: say CORE.pairs

[09:00] <camelia> rakudo-moar e6f360: OUTPUT«␤»

[09:00] <GLRelia> rakudo-moar a6bb0b: OUTPUT«()␤»

[09:00] <TimToady> odd

[09:00] <cognominal>  metamodel and macros are great as architecure but as a pedagical tool, they regularly disappoint me 

[09:00] <moritz> m: say CORE::.keys

[09:00] <camelia> rakudo-moar e6f360: OUTPUT«SIGSEGV WhateverCode bit &FILETEST-X &callframe Pair SIGHUP &flat utf8 &TRANSPOSE &MAKE-DIR-LIST &infix:<∖> CurrentThreadScheduler PromiseStatus StringyEnumeration Distribution &splice &postcircumfix:<{ }> &callsame &GATHER Backtrace &sinh &first-index &…»

[09:00] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(SIGSEGV WhateverCode bit &FILETEST-X Slip &callframe Pair SIGHUP &flat PromiseStatus &RETURN-LIST utf8 &TRANSPOSE &MAKE-DIR-LIST &infix:<∖> CurrentThreadScheduler StringyEnumeration Distribution &splice &postcircumfix:<{ }> &callsame &GATHER Backtrace &…»

[09:01] <moritz> TimToady: afaict, CORE:: is the actual scope

[09:01] <TimToady> right

[09:01] <cognominal> m: say Match ~~ Positional

[09:01] <camelia> rakudo-moar e6f360: OUTPUT«False␤»

[09:01] <GLRelia> rakudo-moar a6bb0b: OUTPUT«False␤»

[09:02] *** n0tjack left
[09:04] *** SamuraiJack_ joined
[09:06] *** SamuraiJack left
[09:06] *** [TuxCM] left
[09:10] *** [ptc]yapc joined
[09:11] <cognominal> m: say CORE::.pairs

[09:11] <camelia> rakudo-moar e6f360: OUTPUT«SIGSEGV => (Mu) WhateverCode => (Mu) bit => (Mu) &FILETEST-X => (Mu) &callframe => (Mu) Pair => (Mu) SIGHUP => (Mu) &flat => (Mu) utf8 => (Mu) &TRANSPOSE => (Mu) &MAKE-DIR-LIST => (Mu) &infix:<∖> => (Mu) CurrentThreadScheduler => (Mu) PromiseStatus => (M…»

[09:11] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(SIGSEGV => (Mu) WhateverCode => (Mu) bit => (Mu) &FILETEST-X => (Mu) Slip => (Mu) &callframe => (Mu) Pair => (Mu) SIGHUP => (Mu) &flat => (Mu) PromiseStatus => (Mu) &RETURN-LIST => (Mu) utf8 => (Mu) &TRANSPOSE => (Mu) &MAKE-DIR-LIST => (Mu) &infix:<∖> =…»

[09:16] *** SamuraiJack_ left
[09:16] *** SamuraiJack__ joined
[09:18] *** Ven left
[09:19] *** mattp__ joined
[09:19] *** rindolf joined
[09:23] *** tinyblak joined
[09:27] *** espadrine joined
[09:31] *** n0tjack joined
[09:32] *** TEttinger left
[09:34] *** laouji joined
[09:36] *** n0tjack left
[09:37] *** laouji left
[09:38] *** [ptc]yapc left
[09:42] *** lizmat joined
[09:44] *** laouji joined
[09:44] *** rmgk left
[09:44] *** rmgk joined
[09:50] *** SamuraiJack joined
[09:50] *** SamuraiJack__ left
[09:51] *** zakharyas joined
[09:54] *** diana_olhovik_ left
[09:58] *** diana_olhovik_ joined
[09:59] *** lizmat left
[09:59] *** aborazmeh joined
[09:59] *** aborazmeh left
[09:59] *** aborazmeh joined
[10:00] *** rindolf left
[10:03] *** n0tjack joined
[10:05] *** [ptc]yapc joined
[10:08] *** n0tjack left
[10:12] *** Averna joined
[10:13] *** Ven joined
[10:13] *** laouji left
[10:16] *** tinyblak left
[10:20] *** tinyblak joined
[10:23] *** laouji joined
[10:28] *** tinyblak left
[10:36] *** n0tjack joined
[10:38] *** laouji left
[10:40] *** n0tjack left
[10:42] <cognominal> Avec le menteur pathologique Elie WIesel, on est jamais déçu. En quatre minutes, il se coupe sur une trop belle histoire. Il échange des regards avec son fils au téléphone et est évasif sur l'argent perdu par lui et sa fondation. Mais c'est pas grave, les donations ont afflué ensuite.  https://www.youtube.com/watch?v=0X0-ga_hhYM

[10:43] <cognominal> Et sur la page wikipedia anglophone, une association qui le critiquerait en profite pour placer que Jerusalem est la capitale de Jérusalem.

[10:44] <cognominal> * d'Israel

[10:44] *** [ptc]yapc left
[10:44] <RabidGravy> er

[10:44] <cognominal> oops, wrong channel

[10:44] <RabidGravy> I wondered

[10:45] <cognominal> but I maintain what I say :)

[10:47] <Ven> seems pretty unrelated to Perl 6, though...:)

[10:48] <cognominal> yea

[10:49] <cognominal> sorry about that

[10:49] *** rindolf joined
[10:50] *** zakharyas left
[10:56] <cdc> m: 't' ~~ /<{'a'...'z'}>/

[10:56] <GLRelia> rakudo-moar a6bb0b: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/bKmMEVecNo:1␤␤»

[10:56] <camelia> rakudo-moar e6f360: ( no output )

[10:56] <Ven> cdc: <{}>?

[10:56] <cdc> Ven: a closure that produce a regex

[10:56] <Ven> ah, alright

[10:57] <cdc> should I submit a rakudobug?

[10:57] <cdc> or is it known?

[10:57] * Ven doesn't know

[10:57] <cdc> m: say 't' ~~ /<{'a'...'z'}>/

[10:57] <GLRelia> rakudo-moar a6bb0b: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/SNMBZuUbqk:1␤␤»

[10:57] <camelia> rakudo-moar e6f360: OUTPUT«｢t｣␤»

[10:57] <cdc> (just to be sure)

[10:58] <FROGGS> m: say "aaaaa" ~~ /a ** {2..3}/

[10:58] <camelia> rakudo-moar e6f360: OUTPUT«｢aaa｣␤»

[10:58] <GLRelia> rakudo-moar a6bb0b: OUTPUT«｢aaa｣␤»

[10:59] <cdc> m: say 't' ~~ /<{('a'...'z').list}>/

[10:59] <camelia> rakudo-moar e6f360: OUTPUT«｢t｣␤»

[10:59] <GLRelia> rakudo-moar a6bb0b: OUTPUT«｢t｣␤»

[11:00] *** Ven left
[11:01] *** pecastro left
[11:06] *** [TuxCM] joined
[11:09] *** n0tjack joined
[11:11] *** [TuxCM] left
[11:11] *** pecastro joined
[11:14] *** n0tjack left
[11:16] <timotimo> computer, gimme those messages i've already read

[11:16] <yoleaux> 01:00Z <japhb> timotimo: I missed the GLR-prep work you did on perl6-bench last weekend.  Thank you!

[11:16] <timotimo> :P

[11:16] <timotimo> japhb: you're welcome. did you also see the benchmark results? i think you did.

[11:17] *** laouji joined
[11:21] <colomon> o/

[11:21] <yoleaux> 06:31Z <japhb> colomon: Game Master.  :-)

[11:21] <colomon> :)

[11:28] <cdc> m: grammar A { our token b { \d } }; say 42 ~~ A::b

[11:28] <camelia> rakudo-moar e6f360: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in regex b at /tmp/schy6XST0E:1␤  in block <unit> at /tmp/schy6XST0E:1␤␤»

[11:28] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in regex b at /tmp/a7YQlPjYC6:1␤  in block <unit> at /tmp/a7YQlPjYC6:1␤␤»

[11:28] <cdc> is it possible to do something like that ^ ?

[11:29] <cdc> m: grammar A { our token b { \d } }; say 42 ~~ /A::b/

[11:29] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/DcdFFJDVrU␤:: not yet implemented␤at /tmp/DcdFFJDVrU:1␤------> 3A { our token b { \d } }; say 42 ~~ /A::7⏏5b/␤»

[11:29] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Rcsya1FR63␤:: not yet implemented␤at /tmp/Rcsya1FR63:1␤------> 3A { our token b { \d } }; say 42 ~~ /A::7⏏5b/␤»

[11:29] <ShimmerFairy> m: my token b { \d }; say 42 ~~ /<b>/

[11:29] <camelia> rakudo-moar e6f360: OUTPUT«｢4｣␤ b => ｢4｣␤»

[11:29] <GLRelia> rakudo-moar a6bb0b: OUTPUT«｢4｣␤ b => ｢4｣␤»

[11:29] <ShimmerFairy> there's that, if you just want the one rule

[11:29] <cdc> m: grammar A { our token b { \d } }; say 42 ~~ /<A::b>/

[11:29] <camelia> rakudo-moar e6f360: OUTPUT«Method 'b' not found for invocant of class 'A'␤  in block <unit> at /tmp/McIvqjFQMO:1␤␤»

[11:29] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Method 'b' not found for invocant of class 'A'␤  in block <unit> at /tmp/Pdsjl70P1c:1␤␤»

[11:30] <cdc> ShimmerFairy: I have many token actually.

[11:33] *** rindolf left
[11:34] <cdc> answer -> http://irclog.perlgeek.de/perl6/2015-05-13#i_10595221

[11:35] <cdc> et* http://irclog.perlgeek.de/perl6/2015-05-13#i_10595213

[11:36] <RabidGravy> alternatively:

[11:36] *** rindolf joined
[11:36] <RabidGravy> m: grammar A { regex b { \d+ } }; say A.parse("42", rule => "b")

[11:36] <camelia> rakudo-moar e6f360: OUTPUT«｢42｣␤»

[11:36] <GLRelia> rakudo-moar a6bb0b: OUTPUT«｢42｣␤»

[11:37] <RabidGravy> m: grammar A { token b { \d+ } }; say A.parse("42", rule => "b")

[11:37] <camelia> rakudo-moar e6f360: OUTPUT«｢42｣␤»

[11:37] <GLRelia> rakudo-moar a6bb0b: OUTPUT«｢42｣␤»

[11:41] *** n0tjack joined
[11:42] <cdc> oh, nice!

[11:43] *** Ven joined
[11:46] <cognominal> What is the idiom for defining enum values that depend on previous value in the enum?

[11:46] <timotimo> hm, i don't think enum values are already available while they're being parsed

[11:47] <cognominal> Is there an idiom for bitenums? Unlike regular enum, a value would be twice as previous one.

[11:47] <timotimo> i don't think so :(

[11:47] <timotimo> you can potentially put something evalable on the rhs

[11:48] <cognominal> that's what I see in the grammar. Not sure how to exploit it.

[11:48] <cognominal> so my question about idioms :)

[11:48] <timotimo> m: enum Bitfield (<A B C D E F G> Z=> (1 >>[+>]>> 0..*); say Bitfiled::D

[11:48] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/kgQJxRv4X8␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/kgQJxRv4X8:1␤------> 3> Z=> (1 >>[+>]>> 0..*); say Bitfiled::D7⏏5<EOL>␤    expecting any of:␤ …»

[11:48] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/7jZiwh6i9f␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/7jZiwh6i9f:1␤------> 3> Z=> (1 >>[+>]>> 0..*); say Bitfiled::D7⏏5<EOL>␤    expecting any of:␤ …»

[11:48] <timotimo> m: enum Bitfield (<A B C D E F G> Z=> (1 >>[+>]>> 0..*); say Bitfield::D

[11:48] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0hU1dIrqyy␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/0hU1dIrqyy:1␤------> 3> Z=> (1 >>[+>]>> 0..*); say Bitfield::D7⏏5<EOL>␤    expecting any of:␤ …»

[11:48] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8GjRgaQumz␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/8GjRgaQumz:1␤------> 3> Z=> (1 >>[+>]>> 0..*); say Bitfield::D7⏏5<EOL>␤    expecting any of:␤ …»

[11:48] <timotimo> m: enum Bitfield (<A B C D E F G> Z=> (1 >>[+>]>> 0..*)); say Bitfield::D

[11:48] <camelia> rakudo-moar e6f360: OUTPUT«Could not find symbol '&D'␤  in block <unit> at /tmp/LMSXO2Xh7l:1␤␤Actually thrown at:␤  in block <unit> at /tmp/LMSXO2Xh7l:1␤␤»

[11:48] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Could not find symbol '&D'␤  in block <unit> at /tmp/JD8Kuid89p:1␤␤Actually thrown at:␤  in block <unit> at /tmp/JD8Kuid89p:1␤␤»

[11:49] <timotimo> m: enum Bitfield (<A B C D E F G> Z=> (1 >>[+>]>> 0..*)); say D

[11:49] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/d50YfW3vU6␤Undeclared name:␤    D used at line 1␤␤»

[11:49] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/uaYawdCoZL␤Undeclared name:␤    D used at line 1␤␤»

[11:49] <timotimo> hum.

[11:49] <timotimo> m: enum Bitfield (<A B C D E F G> Z=> (1 >>[+>]>> 0..*)); say Bitfield.values

[11:49] <camelia> rakudo-moar e6f360: OUTPUT«␤»

[11:49] <GLRelia> rakudo-moar a6bb0b: OUTPUT«()␤»

[11:49] <timotimo> :(

[11:49] <timotimo> oh

[11:49] <timotimo> m: say 1, 2, 4 ... *

[11:49] <camelia> rakudo-moar e6f360: OUTPUT«1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736…»

[11:49] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Cannot .elems a lazy list␤  in block <unit> at /tmp/lYIiyXC7Rb:1␤␤Actually thrown at:␤  in block <unit> at /tmp/lYIiyXC7Rb:1␤␤»

[11:49] <timotimo> that's better of course

[11:49] <timotimo> :o

[11:51] *** n0tjack left
[11:52] <timotimo> m: say (<A B C D E F G> Z=> (1 >>[+>]>> 0..*))

[11:52] <camelia> rakudo-moar e6f360: OUTPUT«A => 1 B => 2 C => 3 D => 4 E => 5 F => 6 G => 7␤»

[11:52] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(A => 1 B => 2 C => 3 D => 4 E => 5 F => 6 G => 7)␤»

[11:52] <timotimo> m: say (<A B C D E F G> Z=> (1 >>[+<]>> 0..*))

[11:52] <camelia> rakudo-moar e6f360: OUTPUT«A => 1 B => 2 C => 3 D => 4 E => 5 F => 6 G => 7␤»

[11:52] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(A => 1 B => 2 C => 3 D => 4 E => 5 F => 6 G => 7)␤»

[11:52] <timotimo> m: say (<A B C D E F G> Z=> (1 <<[+<]<< 0..*))

[11:52] <camelia> rakudo-moar e6f360: OUTPUT«A => 1 B => 2 C => 3 D => 4 E => 5 F => 6 G => 7␤»

[11:52] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(A => 1 B => 2 C => 3 D => 4 E => 5 F => 6 G => 7)␤»

[11:52] <timotimo> m: say (<A B C D E F G> Z=> (1, 2, 4 ... *))

[11:52] <camelia> rakudo-moar e6f360: OUTPUT«A => 1 B => 2 C => 4 D => 8 E => 16 F => 32 G => 64␤»

[11:52] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(A => 1 B => 2 C => 4 D => 8 E => 16 F => 32 G => 64)␤»

[11:53] <cognominal> yea! now if we want a value of the enum be some previous value or-ed :)

[11:55] *** laouji left
[11:55] <cognominal> We have that case somewhere in rakudo code :)

[11:55] *** n0tjack joined
[11:56] * [Coke] yawns.

[11:57] <colomon> hmmm: http://techcrunch.com/2015/09/02/scaleway-now-provides-crazy-cheap-virtual-private-servers-starting-at-3-40-per-month/

[11:57] <moritz> m: say (<A B C D E F G> Z=> (1, 2, -> *@a { [+] @a } ... *).perl

[11:57] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/P1NCLHqkrA␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/P1NCLHqkrA:1␤------> 3Z=> (1, 2, -> *@a { [+] @a } ... *).perl7⏏5<EOL>␤    expecting any of:␤ …»

[11:57] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sGXDiGq4Ec␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/sGXDiGq4Ec:1␤------> 3Z=> (1, 2, -> *@a { [+] @a } ... *).perl7⏏5<EOL>␤    expecting any of:␤ …»

[11:57] <moritz> m: say (<A B C D E F G> Z=> (1, 2, -> *@a { [+] @a } ... *)).perl

[11:57] <camelia> rakudo-moar e6f360: OUTPUT«(:A(1), :B(2), :C(3), :D(6), :E(12), :F(24), :G(48))␤»

[11:57] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(:A(1), :B(2), :C(3), :D(6), :E(12), :F(24), :G(48)).Seq␤»

[11:57] <colomon> should we get one of those and routinely build rakudo on it?  ARM with 2GB sounds like it should be enough…

[11:57] <moritz> cognominal: not quite what you wanted, right?

[11:58] <moritz> m: say (<A B C D E F G> Z=> [\+] (1, 2, 4 ... *)).perl

[11:58] <camelia> rakudo-moar e6f360: OUTPUT«(:A(1), :B(3), :C(7), :D(15), :E(31), :F(63), :G(127))␤»

[11:58] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(:A(1), :B(3), :C(7), :D(15), :E(31), :F(63), :G(127)).Seq␤»

[11:58] <moritz> better

[11:58] <cognominal> moritz, getting closer though

[11:58] <moritz> m: say (<A B C D E F G> Z=> [\+|] (1, 2, 4 ... *)).perl

[11:58] <camelia> rakudo-moar e6f360: OUTPUT«(:A(1), :B(3), :C(7), :D(15), :E(31), :F(63), :G(127))␤»

[11:58] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(:A(1), :B(3), :C(7), :D(15), :E(31), :F(63), :G(127)).Seq␤»

[11:58] <moritz> now with an actual binary OR, not a plus

[12:00] <moritz> colomon: I wonder if that's a good choice for hosting a website that's currently not to happy with its current host

[12:01] *** mr-foobar left
[12:01] *** CIAvash left
[12:02] *** mr-foobar joined
[12:03] <colomon> moritz: no idea.  but at $3.40 a month I’m tempted to experiment.  ;)

[12:03] <moritz> colomon: me too

[12:03] <moritz> it runs on a Debian with Perl anyway

[12:04] *** laouji joined
[12:04] *** lizmat joined
[12:05] *** pat_js joined
[12:08] *** krakan left
[12:09] *** krakan joined
[12:17] *** sergot joined
[12:17] *** sergot left
[12:18] *** sergot joined
[12:18] *** lizmat left
[12:21] *** [TuxCM] joined
[12:26] *** xfix left
[12:27] *** tinyblak joined
[12:28] *** masak_venue joined
[12:28] <cognominal> not ARM jit for rakudo yet?

[12:29] * masak_venue .oO( ARM and a leg JIT )

[12:31] <timotimo> no, we don't have an ARM jit yet

[12:31] * masak_venue goes back to trying to understand code that he wrote half a year ago

[12:31] <timotimo> i wonder how much easier it'll be to go on to getting an ARM JIT after the exprtree jit is further along

[12:31] *** xfix joined
[12:32] <cognominal> probably the last time I dabbled with assembly code was on a Z80

[12:33] <RabidGravy> 68000 here I think

[12:33] <RabidGravy> actually no, AVR in the last year or so

[12:36] <FROGGS> ohh, lovely 68k

[12:37] <timotimo> in my high school equivalent (i think?) we played with a super old assembler interpreter thingie with a custom instruction set

[12:37] <timotimo> it was called "ALI" and it was written in pascal

[12:37] <timotimo> it was so old that the person who made it probably already retired by the time i used it

[12:37] *** [TuxCM] left
[12:39] <RabidGravy> when I first did a computer course (in 1979) the first term we were actually taught a fictional machine language (similar to MIX) which didn't have an implementation and made the programs on paper

[12:39] *** hernanGOA joined
[12:40] <timotimo> we did plenty of on-paper programming with that teacher, as well

[12:40] *** Ven left
[12:41] *** tinyblak left
[12:42] *** abaugher left
[12:42] *** sufrostico joined
[12:43] *** abaugher2 joined
[12:43] <abaugher2> er

[12:43] *** tinyblak joined
[12:43] *** abaugher2 is now known as Mhoram

[12:43] <timotimo> ohai

[12:43] *** Mhoram left
[12:44] *** araujo_ joined
[12:44] *** lizmat joined
[12:44] *** mr-foobar left
[12:45] *** tinyblak left
[12:45] *** tinyblak_ joined
[12:47] *** araujo left
[12:49] *** rurban joined
[12:52] *** Possum joined
[12:52] *** cognominal left
[12:53] *** tinyblak_ left
[12:53] * _itz typed in a 6502 assembler for the PET from a magazine

[12:54] <masak_venue> RabidGravy: I can see both the good and the bad of doing things on paper. the bad is mostly that the program doesn't "kick back" like real code tends to.

[12:54] *** [TuxCM] joined
[12:54] <masak_venue> RabidGravy: that is, you might *discover* that you had a bug in your program, but you don't discover it by looking at what the program does.

[12:54] *** frettled joined
[12:54] *** tinyblak joined
[12:56] <arnsholt> It's kind of like the "explaining your problem to someone"-effect, I think

[12:57] * _itz considers registering "isglrmasteryet.com" and putting "no" as content

[12:57] *** n0tjack left
[12:58] *** tinyblak left
[12:59] <[Coke]> lizmat: any discussion at yapc::eu about merging glr back into nom?

[13:00] *** n0tjack joined
[13:00] <[Coke]> (or masak or timtoady or anyone else at yapc::eu, of course.)

[13:00] *** muraiki joined
[13:01] *** abaugher3 joined
[13:01] *** andreoss joined
[13:01] *** abaugher3 is now known as Mhoram

[13:02] *** Mhoram left
[13:03] <andreoss> m: sub foo(*@x) { say @x }; foo(|(1,2))

[13:03] <camelia> rakudo-moar e6f360: OUTPUT«1 2␤»

[13:03] <GLRelia> rakudo-moar a6bb0b: OUTPUT«[1 2]␤»

[13:03] <andreoss> m: sub foo(*@x) { say @x }; foo: |(1,2); 

[13:03] <GLRelia> rakudo-moar a6bb0b: ( no output )

[13:03] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/b3gswqvMID␤Arg-flattening | is only valid in an argument list␤at /tmp/b3gswqvMID:1␤------> 3sub foo(*@x) { say @x }; foo: |7⏏5(1,2);␤»

[13:03] *** zakharyas joined
[13:04] <frettled> [Coke]: not overtly in talks, but maybe in the corridors?

[13:04] *** abaugher joined
[13:05] *** leont joined
[13:06] <muraiki> hrm, I don't suppose there's any way to hyper on open(...).lines

[13:08] <andreoss> m: sub foo(*@x) { say @x.perl }; foo: flat (1,(2, 3))

[13:08] <camelia> rakudo-moar e6f360: ( no output )

[13:08] <GLRelia> rakudo-moar a6bb0b: ( no output )

[13:08] *** araujo_ left
[13:08] <andreoss> m: sub foo(*@x) { say @x.perl }; foo( flat (1,(2, 3)))

[13:08] <camelia> rakudo-moar e6f360: OUTPUT«[1, 2, 3]<>␤»

[13:08] <GLRelia> rakudo-moar a6bb0b: OUTPUT«[1, 2, 3]␤»

[13:08] <[Coke]> right, not in the talks.

[13:10] <leont> Turns out /\N/ doesn't match "\x85", that was surprising

[13:10] <moritz> does \n match it?

[13:10] <sjn> \N = "not a newline"

[13:10] *** andreoss left
[13:11] <moritz> yes

[13:11] <ShimmerFairy> m: say "\x85".uniname

[13:11] <camelia> rakudo-moar e6f360: OUTPUT«NEXT LINE (NEL)␤»

[13:11] <GLRelia> rakudo-moar a6bb0b: OUTPUT«NEXT LINE (NEL)␤»

[13:11] <leont> It's Latin-1, Next line

[13:11] <moritz> m: say so (chr :16<85>) ~~ /\n/

[13:11] <sjn> and \n = 0x10

[13:11] <camelia> rakudo-moar e6f360: OUTPUT«True␤»

[13:11] <GLRelia> rakudo-moar a6bb0b: OUTPUT«True␤»

[13:11] <leont> It kind of makes sense, I just haven't ever seen anyone use it for that purpose

[13:12] <hoelzro> good morning #perl6

[13:12] <moritz> sjn: not in regexes

[13:12] <sjn> right, you have more types of newlines

[13:12] <ShimmerFairy> leont: \N is the opposite of \n, so to match newlines you want the lowercase variant :)

[13:13] <moritz> m: say (1..65535).chrs.comb(/\n/)>>.base(16)

[13:13] <camelia> rakudo-moar e6f360: OUTPUT«Method 'base' not found for invocant of class 'Str'␤  in block <unit> at /tmp/lXbpsePID0:1␤␤»

[13:13] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Method 'base' not found for invocant of class 'Str'␤  in block <unit> at /tmp/mYX2F70VO9:1␤␤»

[13:13] <sjn> so since 0x85 is a type of newline, it makes sense that \N does not match it

[13:13] <moritz> m: say (1..65535).chrs.comb(/\n/)>>.ord>>.base(16)

[13:13] <camelia> rakudo-moar e6f360: OUTPUT«A B C D 85 2028 2029␤»

[13:13] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(A B C D 85 2028 2029)␤»

[13:13] <leont> ShimmerFairy: I expected \n to match ASCII newline, nothing more

[13:13] <ShimmerFairy> leont: nope, \n means "newline" in general in regexes

[13:13] <leont> Not saying it's wrong, saying this should be documented properly

[13:14] <ShimmerFairy> but it is

[13:14] <masak_venue> [Coke]: I got the impression that we *could* merge glr, but we're holding off until someone pmichaud- or jnthn-like shows up.

[13:14] <sjn> moritz: what do you call to get the unicode name for those?

[13:14] *** araujo joined
[13:14] *** araujo left
[13:14] *** araujo joined
[13:14] <moritz> m: say (1..65535).chrs.comb(/\n/)>>.uniname

[13:14] <camelia> rakudo-moar e6f360: OUTPUT«LINE FEED (LF) LINE TABULATION FORM FEED (FF) CARRIAGE RETURN (CR) NEXT LINE (NEL) LINE SEPARATOR PARAGRAPH SEPARATOR␤»

[13:14] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(LINE FEED (LF) LINE TABULATION FORM FEED (FF) CARRIAGE RETURN (CR) NEXT LINE (NEL) LINE SEPARATOR PARAGRAPH SEPARATOR)␤»

[13:15] <ShimmerFairy> From S05: "\n now matches a logical (platform independent) newline, not just \x0a. See TR18 section 1.6 for a list of logical newlines."

[13:15] <ShimmerFairy> (the TR18 reference is part of Unicode's documents)

[13:16] <muraiki> will the GLR change "things like parcel" (for lack of not even knowing what question to ask)?

[13:17] <masak_venue> going to Tux++'s talk &

[13:17] *** masak_venue left
[13:17] <muraiki> actually I have a place where I can just try the glr branch, so I'll know if my code blows up

[13:17] <muraiki> not that it actually works currently :)

[13:19] <moritz> muraiki: Parcel is gone in glr; those literals with comma then become a List

[13:19] <moritz> m: say (1, 2).^name

[13:19] <camelia> rakudo-moar e6f360: OUTPUT«Parcel␤»

[13:19] <GLRelia> rakudo-moar a6bb0b: OUTPUT«List␤»

[13:20] <muraiki> moritz: the particular use case I was looking at is what type I get back from open(...).lines

[13:20] <moritz> muraiki: that now returns a Seq

[13:20] <muraiki> nice! thanks :)

[13:20] * [Coke] got a private "thanks for Perl 6" email.

[13:20] * [Coke] passes along the thanks to everyone.

[13:20] <moritz> [Coke]: oh, nice

[13:21] *** [TuxCM] left
[13:21] *** rurban left
[13:24] *** [TuxCM] joined
[13:25] *** lizmat left
[13:25] <[Coke]> https://stackoverflow.com/questions/32351817/how-to-filter-own-output-in-perl6 - unanswered perl6 question.

[13:25] *** skids joined
[13:27] *** rurban joined
[13:29] <skids> o/

[13:29] <yoleaux> 07:24Z <moritz> skids: thanks for fixing s/say/is/; it was intentional that the test aborts; after all it's a GLR regression. If the test is skipped, we won't notice it

[13:29] *** lizmat joined
[13:30] <skids> Well, in that case wrapping it in a try so it can fail rather than abort would be good.  Or someone could merge that commit from my PR.

[13:30] <moritz> skids: since it's the last test in the file, aborting isn't all that bad

[13:30] <moritz> anyway, I plan to review that PR soonish, if nobody beats me to it

[13:30] <skids> Thanks, moritz++

[13:32] *** brrt joined
[13:32] *** tinyblak joined
[13:34] <lizmat> [Coke]: no discussion about merging that I know of

[13:37] *** laouji left
[13:37] <timotimo> what's the opinion on this one?

[13:37] <[Coke]> ok. I haven't really heard any objections to the plan, so I'll try to get that done today now that I don't have 8 hours of meetings in a row. :)

[13:37] <timotimo> m: say 1, 2, 4 ... *

[13:37] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Cannot .elems a lazy list␤  in block <unit> at /tmp/CJLtFaG1B2:1␤␤Actually thrown at:␤  in block <unit> at /tmp/CJLtFaG1B2:1␤␤»

[13:37] <camelia> rakudo-moar e6f360: OUTPUT«1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736…»

[13:37] *** mr-foobar joined
[13:38] <ShimmerFairy> timotimo: I think GLR is clearly a bug :)

[13:38] <moritz> m: say (1, 2, 4 ... *).gist

[13:38] <camelia> rakudo-moar e6f360: OUTPUT«1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736…»

[13:38] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Cannot .elems a lazy list␤  in block <unit> at /tmp/ixCUdcA9SZ:1␤␤Actually thrown at:␤  in block <unit> at /tmp/ixCUdcA9SZ:1␤␤»

[13:39] <moritz> m: say <a b c>.sort.gist

[13:39] <camelia> rakudo-moar e6f360: OUTPUT«a b c␤»

[13:39] <GLRelia> rakudo-moar a6bb0b: OUTPUT«(a b c)␤»

[13:42] *** DavidIAm left
[13:45] *** cognominal joined
[13:48] <dalek> roast: e56246f | hoelzro++ | S17-lowlevel/lock.t:

[13:48] <dalek> roast: Mark final test in lock.t as TODO

[13:48] <dalek> roast: 

[13:48] <dalek> roast: Pending resolution of RT #125977

[13:48] <dalek> roast: review: https://github.com/perl6/roast/commit/e56246f7d8

[13:48] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125977

[13:50] <lizmat> hoelzro: I think it needs to be skip, actually  :-(

[13:50] <hoelzro> er, dammit

[13:50] <hoelzro> lizmat: thanks, good catch!

[13:51] <dalek> roast: 00a252b | hoelzro++ | S17-lowlevel/lock.t:

[13:51] <dalek> roast: Skip the final test in lock.t

[13:51] <dalek> roast: 

[13:51] <dalek> roast: TODO isn't good enough

[13:51] <dalek> roast: review: https://github.com/perl6/roast/commit/00a252b93f

[13:52] *** hernanGOA left
[13:54] *** rurban left
[13:56] *** telex left
[13:56] *** hernanGOA joined
[13:57] *** thou joined
[13:57] <muraiki> I'm not sure what to call this, but I have a "pipeline" that I've made using a series of map/grep in scalar context. I've also thrown in hyper. when I "say" the final result, I get "HyperSeq.new". so I guess I have to realize the sequence somehow in order to get the values I want?

[13:57] *** rurban joined
[13:57] <PerlJam> muraiki: iterate it or listify

[13:58] <muraiki> PerlJam: ah nice, .list did it. I tried .[] but that is apparently something totally different :)

[13:58] *** telex joined
[14:00] <muraiki> darn, hypering it actually made it slower. I guess I should fiddle with batch and degree

[14:01] <muraiki> actually hypering it is faster when I have a sufficent amount of data. I forgot my test run was such a small amount

[14:01] <muraiki> yay perl6

[14:03] *** leont left
[14:06] <lizmat> muraiki: care to share some timing info ?

[14:06] *** aborazmeh left
[14:06] *** n0tjack left
[14:07] *** zakharyas left
[14:08] <muraiki> lizmat: sure but it's still kind of slow. the recent update to json::fast turned it from unusable into usable, though. :) https://gist.github.com/muraiki/e53afa88fefa2b5b2c3d

[14:09] <muraiki> each line can end up a fairly large json object

[14:09] <muraiki> I used to log how many characters were in each line...

[14:09] <muraiki> so I think json is the real holdup

[14:11] *** frettled left
[14:14] <lizmat> muraiki++

[14:15] <muraiki> let me know if there's anything else you want me to try

[14:16] <lizmat> will do  :-)

[14:16] <muraiki> wow I didn't realize the user time was so different between the two runs

[14:16] <lizmat> ah, do you have numbers without hyper ?

[14:16] <muraiki> I just started that run, haha

[14:16] <muraiki> this is on GLR btw

[14:17] <lizmat> cool

[14:17] <muraiki> I added no hyper

[14:19] *** rurban left
[14:21] <lizmat> break&

[14:21] *** lizmat left
[14:26] *** Ven joined
[14:26] *** rurban joined
[14:28] *** brrt left
[14:29] *** khw joined
[14:30] *** _mg_ left
[14:32] *** [TuxCM] left
[14:37] *** n0tjack joined
[14:38] *** rarara joined
[14:39] *** leont joined
[14:42] *** rurban left
[14:43] <cdc> For information: RT #125978 "Segfault (and other crashes) when using .hyper"

[14:43] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125978

[14:44] *** sufrostico left
[14:45] *** colomon left
[14:47] *** mr-foobar left
[14:47] *** masak_venue joined
[14:47] <masak_venue> m: sub foo($?) {}

[14:47] <camelia> rakudo-moar e6f360: ( no output )

[14:47] <GLRelia> rakudo-moar a6bb0b: ( no output )

[14:48] <masak_venue> question: why doesn't the above one fail? :)

[14:48] <masak_venue> std: sub foo($?) {}

[14:48] *** GLRelia left
[14:48] <camelia> std 28329a7: OUTPUT«ok 00:00 138m␤»

[14:48] <masak_venue> haha, GLRelia couldn't take it :P

[14:48] <masak_venue> too much, too soon

[14:49] *** GLRelia joined
[14:49] <GLRelia> std : OUTPUT«Can't chdir to '/home/steve/std/snap': No such file or directory at lib/EvalbotExecuter.pm line 171.␤      EvalbotExecuter::_auto_execute(HASH(0x206fe38), "sub foo(\$?) {}", GLOB(0x2357680), "/tmp/3lJ02shdKE", "std") called at lib/EvalbotExecuter.pm line 119␤        EvalbotExec…»

[14:49] *** rurban joined
[14:49] <masak_venue> std: # will GLRelia fall off the grid again if I do this?

[14:49] *** GLRelia left
[14:49] <camelia> std 28329a7: OUTPUT«ok 00:00 133m␤»

[14:49] <masak_venue> ....apparently.

[14:50] * masak_venue is evil :>

[14:50] *** GLRelia joined
[14:50] <GLRelia> std : OUTPUT«Can't chdir to '/home/steve/std/snap': No such file or directory at lib/EvalbotExecuter.pm line 171.␤      EvalbotExecuter::_auto_execute(HASH(0x206fe38), "# will GLRelia fall off the grid again if I do this?", GLOB(0x2445940), "/tmp/_QqOewE8VS", "std") called at lib/Evalb…»

[14:51] <masak_venue> by the way, Tux++ gave a very nice talk, and said some quite positive things about Perl 6

[14:51] *** masak_venue left
[14:55] *** rurban left
[14:59] <[Coke]> t/spec/S17-procasync/no-runaway-file-limit.t appears to be chewing CPU on os x /glr

[15:00] *** kjs_ joined
[15:00] <[Coke]> (4/8 cores)

[15:00] <[Coke]> um, this test seems super dodgy.

[15:01] <[Coke]> hard coded temp file, using a network command ...

[15:02] *** [TuxCM] joined
[15:03] *** leont left
[15:04] <[Coke]> hoelzro: that looks like you are mostly responsible. :)

[15:05] <[Coke]> also, t/spec/S32-io/IO-Socket-INET.t fails on a regular basis for me.

[15:07] *** domidumont left
[15:11] *** tinyblak left
[15:11] *** tinyblak joined
[15:12] *** tinyblak left
[15:13] *** diana_olhovik_ left
[15:14] <ugexe> haha, malware-bytes on win32 thinks the perl6 module 'ABC' (and only that module) is malware (PUP.Optional.BundleInstaller) for some reason

[15:18] *** leont joined
[15:20] *** pat_js left
[15:22] *** rurban joined
[15:23] *** larion left
[15:23] *** rindolf left
[15:25] *** brrt joined
[15:28] *** Averna left
[15:31] *** colomon joined
[15:33] <jdv79> has anyone tried porting Sereal yet?

[15:36] *** FROGGS left
[15:39] *** rindolf joined
[15:42] *** leont left
[15:43] *** rurban left
[15:45] <hoelzro> [Coke]: the network command is jnthn's doing, because Windows doesn't have cat

[15:45] <hoelzro> I have no idea why a temp file is in use there =/

[15:47] *** xinming left
[15:48] *** brrt left
[15:48] *** [TuxCM] left
[15:48] *** brrt joined
[15:49] *** brrt left
[15:49] *** brrt joined
[15:49] *** brrt left
[15:50] *** brrt joined
[15:50] <tony-o> why is it now an error to read from $*IN from another thread?  is there a decent way of reading from $*IN without blocking the rest of the application?

[15:50] *** brrt left
[15:50] *** brrt joined
[15:50] *** brrt left
[15:51] *** brrt joined
[15:51] *** brrt left
[15:51] *** brrt joined
[15:51] *** brrt left
[15:52] *** brrt joined
[15:52] *** brrt left
[15:52] *** brrt joined
[15:53] *** brrt left
[15:53] *** brrt joined
[15:53] *** brrt left
[15:53] *** brrt joined
[15:54] *** brrt left
[15:54] *** brrt joined
[15:54] *** brrt left
[15:55] *** brrt joined
[15:55] *** brrt left
[15:55] *** brrt joined
[15:55] *** Ven left
[15:56] *** AlexDaniel joined
[15:56] *** brrt left
[15:56] *** brrt joined
[15:56] *** brrt left
[15:56] *** brrt joined
[15:56] *** brrt left
[15:58] *** brrt joined
[15:58] *** brrt left
[15:58] *** brrt joined
[15:58] <pink_mist> isn't that what a Supply is for?

[15:58] *** brrt left
[15:59] *** brrt joined
[15:59] <timotimo> a supply of lines from $*IN can help you, but a Supply itself doesn't introduce parallelism immediately

[15:59] *** brrt left
[15:59] <timotimo> it really depends on the particular use-case

[15:59] <timotimo> i didn't actually know we throw an error when you try to read $*IN from multiple threads

[15:59] *** brrt joined
[15:59] *** brrt left
[15:59] *** mr-foobar joined
[16:00] *** brrt joined
[16:00] *** brrt left
[16:00] *** brrt joined
[16:01] *** brrt left
[16:01] *** brrt joined
[16:01] *** brrt left
[16:01] *** brrt joined
[16:02] *** brrt left
[16:02] *** brrt joined
[16:02] *** andreoss joined
[16:02] *** brrt left
[16:03] *** brrt joined
[16:03] <andreoss>   $ perl -E 'say "0" x 80 for 1..1000000' |pv >/dev/null

[16:03] <andreoss> 77.2MB 0:00:00 [ 347MB/s]

[16:03] <andreoss>  $ perl6 -e 'say "0" x 80 for ^1_000_000' |pv >/dev/null

[16:03] <andreoss> 77.2MB 0:00:29 [2.66MB/s]

[16:03] *** brrt left
[16:03] <andreoss> say was not meant for IO?

[16:03] *** brrt joined
[16:03] <andreoss> m: 347 / 2.66

[16:03] <GLRelia> rakudo-moar a6bb0b: ( no output )

[16:03] <camelia> rakudo-moar e6f360: ( no output )

[16:03] <andreoss> m: say 347 / 2.66

[16:03] <GLRelia> rakudo-moar a6bb0b: OUTPUT«130.451128␤»

[16:03] <camelia> rakudo-moar e6f360: OUTPUT«130.451128␤»

[16:03] *** kjs_ left
[16:04] *** brrt left
[16:04] *** brrt joined
[16:04] *** brrt left
[16:10] <timotimo> harsh

[16:10] <timotimo> well, our IO goes through the async I/O thing, but it'll immediately wait for it to finish

[16:11] <timotimo> so there's at least some overhead due to that

[16:11] *** nits joined
[16:12] *** AlexDaniel left
[16:13] *** vike joined
[16:13] *** tinyblak joined
[16:18] *** tinyblak left
[16:20] <tony-o> timotimo: it's throwing now, it didn't used to

[16:20] *** espadrine left
[16:22] *** lizmat joined
[16:22] <lizmat> .seen pmurias

[16:22] <yoleaux> I saw pmurias 1 Sep 2015 16:02Z in #perl6: <pmurias> hoelzro: got a link to the issue?

[16:22] <timotimo> tony-o: but what does it throw?

[16:23] <lizmat> .tell pmurias your wallet is found

[16:23] <yoleaux> lizmat: I'll pass your message to pmurias.

[16:23] <tony-o> a moar error with the output: $PROC.stderr: Tried to read() on a socket from outside its originating thread

[16:24] <timotimo> interesting

[16:24] <hoelzro> I think I added that to Moar, but I don't think it should affect stdin

[16:24] <hoelzro> or std*, for that matter

[16:24] <tony-o> that's the only call in that catch block .. one sec i'll send you the block

[16:25] <tony-o> hoelzro: timotimo: here is the line causing the error https://github.com/tony-o/perl6-event-emitter-interprocess/blob/master/lib/Event/Emitter/Inter-Process.pm6#L36

[16:25] <hoelzro> tony-o: how new is this behavior? iirc, I added that check to Moar a while ago

[16:27] <tony-o> i haven't actually looked at this module for a number of months

[16:27] <andreoss> timotimo: how can i write faster?

[16:27] <tony-o> so, it's new to me but it may be a few months old

[16:27] <tony-o> andreoss: don't use cursive

[16:28] <tony-o> hoelzro: jul 20: https://github.com/MoarVM/MoarVM/commit/cc23702723a4b413c936c8654b2cd69d7091e152#diff-bdabaed3ce6ccfd9e6ff0edaccf31bed

[16:28] <andreoss> $ perl6 -e 'print "0" x 80, "\n" for ^1_000_000' |pv >/dev/null

[16:28] <andreoss> 6.51MB 0:00:21 [ 331kB/s] 

[16:29] <hoelzro> tony-o: it may die() right now, but it would probably just silently read empty strings without that behavior

[16:29] <hoelzro> it's not ideal, but we need to change how reading/writing from/to streams works to fix that behavior

[16:29] <tony-o> yea it was actually causing a hang without it, i thought timotimo found the solution that allowed cross thread reads

[16:29] <tony-o> something about having to copy that handle into the thread

[16:30] <hoelzro> I thought that there wasn't a thread safe way to copy a handle into a thread?

[16:30] *** andreoss left
[16:31] <hoelzro> that's what the libuv folks told me, anyway

[16:31] <tony-o> is there a method of getting $*IN in a supply?

[16:31] <hoelzro> I am very happy to be proven wrong here =)

[16:31] <tony-o> without closing $*IN first?

[16:34] <PerlJam> tony-o: my $in = open("-", :r);  # maybe?

[16:34] *** rarara left
[16:34] *** kjs_ joined
[16:34] *** diana_olhovik_ joined
[16:37] *** kjs_ left
[16:39] <tony-o> that's what $*IN is it looks like, i need a way to at least insert my read when the script is idle

[16:39] <tony-o> but that does work :-)

[16:39] <tony-o> just not in a nonblocking way

[16:40] *** espadrine joined
[16:40] *** diana_olhovik__ joined
[16:41] *** diana_olhovik_ left
[16:46] <PerlJam> Perhaps async $*IN needs implementing?  

[16:46] *** diana_olhovik joined
[16:47] *** diana_olhovik__ left
[16:47] *** colomon left
[16:51] <lizmat> m: constant A = INIT 42; A = 43; say A   # huh?

[16:51] <GLRelia> rakudo-moar a6bb0b: OUTPUT«43␤»

[16:51] <camelia> rakudo-moar e6f360: OUTPUT«43␤»

[16:51] *** diana_olhovik___ joined
[16:51] <lizmat> m: my \A = INIT 42; A = 43; say A 

[16:51] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/V5S1yzzpEk:1␤␤»

[16:51] <camelia> rakudo-moar e6f360: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/c42A9jNCNq:1␤␤»

[16:52] <lizmat> m: constant A = 42; A = 43; say A 

[16:52] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/PimqJODXy5:1␤␤»

[16:52] <camelia> rakudo-moar e6f360: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/YVwpWqCK79:1␤␤»

[16:52] *** diana_olhovik left
[16:54] *** vendethiel joined
[16:55] *** labster left
[16:56] *** [TuxCM] joined
[16:56] *** diana_olhovik___ left
[17:01] *** yqt joined
[17:03] *** xfix left
[17:03] *** xfix joined
[17:03] *** xfix left
[17:03] *** xfix joined
[17:06] *** vike left
[17:07] *** vike joined
[17:07] *** sufrostico joined
[17:07] *** SamuraiJack left
[17:15] *** kjs_ joined
[17:16] *** lizmat left
[17:18] *** espadrine left
[17:19] <grondilu> m: role A does Numeric { }; say [] but A;

[17:19] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Ambiguous call to 'gist'; these signatures all match:␤:(Array:D $: *%_)␤:(Numeric:D $: *%_)␤  in block <unit> at /tmp/LZ3QS28U4p:1␤␤»

[17:19] <camelia> rakudo-moar e6f360: OUTPUT«Ambiguous call to 'gist'; these signatures all match:␤:(List:D $: *%_)␤:(Numeric:D $: *%_)␤  in block <unit> at /tmp/RLUWI5wAA6:1␤␤»

[17:20] <grondilu> ^LTA

[17:20] *** domidumont joined
[17:20] *** larion joined
[17:21] *** [TuxCM] left
[17:22] *** kjs_ left
[17:22] *** ggoebel left
[17:27] <RabidGravy> m: role A does Numeric does Array { }

[17:27] <GLRelia> rakudo-moar a6bb0b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/7ghd4Fdt8Q␤Array is not composable, so A cannot compose it␤at /tmp/7ghd4Fdt8Q:1␤»

[17:27] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/221kXLcY4o␤Array is not composable, so A cannot compose it␤at /tmp/221kXLcY4o:1␤»

[17:28] *** TEttinger joined
[17:29] <RabidGravy> tricky, I think it's something doesn't blow up in that case as it would if you had a conflicting method from a role

[17:37] *** ggoebel joined
[17:38] *** [Sno] left
[17:41] *** FROGGS joined
[17:44] *** yqt left
[17:45] <FROGGS> o/

[17:49] *** _itz_ joined
[17:50] *** z448 joined
[17:50] *** _itz left
[17:51] <RabidGravy> rarr!

[17:51] *** hernanGOA left
[17:52] *** raiph joined
[17:59] *** hernanGOA joined
[17:59] <ugexe> it say. it handles arguments different than print

[17:59] *** z448 left
[17:59] <ugexe> m: role A does Numeric { }; print [] but A;

[17:59] <GLRelia> rakudo-moar a6bb0b: ( no output )

[17:59] <camelia> rakudo-moar e6f360: ( no output )

[18:00] <ugexe> m: role A does Numeric is Array { }

[18:00] <GLRelia> rakudo-moar a6bb0b: ( no output )

[18:00] <camelia> rakudo-moar e6f360: ( no output )

[18:05] *** z448 joined
[18:09] *** z448 left
[18:10] *** raiph left
[18:11] *** raiph joined
[18:11] <grondilu> m: role A does Numeric { method gist { "duh" } }; say [] but A;

[18:11] <GLRelia> rakudo-moar a6bb0b: OUTPUT«Cannot have a multi candidate for 'gist' when an only method is also in the package 'Array+{A}'␤  in any incorporate_multi_candidates at src/gen/m-Metamodel.nqp:629␤  in any compose at src/gen/m-Metamodel.nqp:2836␤  in any generate_mixin at src/gen/m…»

[18:11] <camelia> rakudo-moar e6f360: OUTPUT«Cannot have a multi candidate for 'gist' when an only method is also in the package 'Array+{A}'␤  in any incorporate_multi_candidates at src/gen/m-Metamodel.nqp:629␤  in any compose at src/gen/m-Metamodel.nqp:2834␤  in any generate_mixin at src/gen/m…»

[18:12] <grondilu> m: role A does Numeric { multi method gist { "duh" } }; say [] but A;

[18:12] <GLRelia> rakudo-moar a6bb0b: OUTPUT«duh␤»

[18:12] <camelia> rakudo-moar e6f360: OUTPUT«duh␤»

[18:14] *** colomon joined
[18:15] *** tinyblak joined
[18:16] *** Loren_ left
[18:19] *** tinyblak left
[18:27] *** lizmat joined
[18:28] *** _mg_ joined
[18:30] *** yqt joined
[18:31] *** btyler_yapc joined
[18:31] <RabidGravy> boom!

[18:34] *** colomon left
[18:36] *** colomon joined
[18:37] <moritz> https://github.com/blog/2051-protected-branches-and-required-status-checks

[18:39] *** perl6_newbee joined
[18:40] <colomon> hmmm, now tests are failing from panda.

[18:40] *** dha joined
[18:42] <colomon> mihgt be my fault?

[18:42] <FROGGS> g++ uses the same mangling scheme on windows like it does on linux btw

[18:43] <FROGGS> my locally modified NativeCall does now autodetect MSVC and g++ C++ libs and does the right thin

[18:43] <FROGGS> g

[18:43] <colomon> FROGGS++

[18:43] * colomon is looking forward to trying that out some time.

[18:44] <btyler_yapc> if anyone has some insight into compiler magicks, I'm hunting the &?ROUTINE thingy from SPW. I golfed it a bit more: https://gist.github.com/kanatohodets/8b91ac50317dc48a7872

[18:44] <colomon> panda failures were on my locally hacked copy.

[18:46] <perl6_newbee> Hi all. is there an already known problem with perl6 215.06 on WIndows 10 and shel/run? In my script shell 'cmd.exe /c start /D C:\Testautomation' causes moar.exe to eat up all my memory.

[18:47] <perl6_newbee> A script just this shell line works, and in the REPL as well

[18:47] <btyler_yapc> and/or end of venue time, I'll hunt more later.

[18:47] *** btyler_yapc left
[18:47] <hoelzro> btyler_++

[18:48] <FROGGS> perl6_newbee: it was not known until know I'd say

[18:48] <FROGGS> sadly I don't have a windows 10 box

[18:49] <FROGGS> m: say Block ~~ Routine

[18:49] <GLRelia> rakudo-moar a6bb0b: OUTPUT«False␤»

[18:49] <camelia> rakudo-moar e6f360: OUTPUT«False␤»

[18:49] *** colomon left
[18:49] <perl6_newbee> Hmm, and I have no glue, what causes the problem. AS I sad, in REPL or in a script on its own, it works. Just in my script ~200 lines of code ist fails. I have to cancel the scipt with Ctrl+c

[18:50] <perl6_newbee> I will file an error report.

[18:50] <FROGGS> perl6_newbee: it would help if you minimized your script before reporting it

[18:51] * [Coke] had such a good time at SPW, now wondering how long until he can live in a world where he can get paid to hack on Perl 6. :P

[18:51] *** colomon joined
[18:51] <perl6_newbee> OK. Good idea. Will tomorrow play around with that. btw. I don't like W10 ^^

[18:52] <FROGGS> I've just played with it for two minutes, and I guess I could live with it...

[18:53] <FROGGS> not that I'd replace my linux dev box, but I could imagine replacing my windows 7 box I use for $work

[18:53] <hoelzro> [Coke]: you and me both

[18:54] <perl6_newbee> I had to upgrade my w7 box in the work for W10 and I dislike it very much. The start menu is a mess and it is slower. Maybe in 6 month and after a lot of updats

[18:54] *** nits left
[18:54] <FROGGS> [Coke]: that'd be very very nice, aye :o)

[18:55] *** [Sno] joined
[18:57] <perl6_newbee> so, n8 guys

[18:58] <dalek> rakudo/glr: c17cc42 | skids++ | src/core/array_slice.pm:

[18:58] <dalek> rakudo/glr: First pass at more through array slice assignment

[18:58] <dalek> rakudo/glr: 

[18:58] <dalek> rakudo/glr: Fixes things like @a[1,0] = @a Z~ <a b>

[18:58] <dalek> rakudo/glr: 

[18:58] *** dalek left
[18:59] <FROGGS> gnight perl6_newbee 

[18:59] *** dalek joined
[18:59] *** ChanServ sets mode: +v dalek

[19:01] *** colomon_ joined
[19:01] *** colomon left
[19:01] *** colomon_ is now known as colomon

[19:02] <dalek> roast/glr: 2e1575f | moritz++ | S32-list/seq.t:

[19:02] <dalek> roast/glr: Unfudge now passing test file, skids++

[19:02] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/2e1575fd83

[19:05] *** perl6_newbee left
[19:14] *** domidumont left
[19:24] *** thou left
[19:28] *** thou joined
[19:33] *** raiph left
[19:34] *** lizmat left
[19:37] <dalek> perl6-roast-data: 2bdac24 | coke++ | / (10 files):

[19:37] <dalek> perl6-roast-data: today (automated commit)

[19:37] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/2bdac24d6c

[19:41] <masak> the wind on p6u seems to be blowing firmly in the direction of non-strict-by-default Perl 6 oneliners

[19:42] <masak> the thing is, I think I would agree with that lack of need for strict in one-liners, *if I hadn't actually tried it in practice*

[19:45] <moritz> also, the last post

[19:45] <moritz> lemme find that quote...

[19:46] <FROGGS> +

[19:47] <dha> I think people would be happy enough if there was just an easy way to turn it off. like the -e/-E suggestion. And, honestly, I'd be ok if -e had strict on and you had to explicitly do -E to turn it off (which seems less "off by default" to me)

[19:47] <moritz> ... can't find it anymore

[19:48] <moritz> something about one-liners not being always one-liners, because they can grow quite complex

[19:48] *** raiph joined
[19:48] <moritz> which is the best reason to make them strict by default

[19:48] *** brrt joined
[19:49] <geekosaur> "* I don't like calling them one-liners, as they can be quite complex before evolving into file-based scripts."

[19:49] <geekosaur> ...although personally, if I reach the point of complexity, it's going into a file-based script anyway

[19:49] <dha> I could argue that that makes it not what one would call a one-liner.

[19:50] <moritz> laptop die again, this time probably permanently :(

[19:50] <moritz> *dying

[19:51] <dalek> doc/glr: 21855f4 | moritz++ | lib/Type/Seq.pod:

[19:51] <dalek> doc/glr: Initial Seq documentation

[19:51] <dalek> doc/glr: review: https://github.com/perl6/doc/commit/21855f4468

[19:54] *** brrt left
[19:54] <El_Che> moritz: you'll move that to a file anyways once the onliner is too complex (you need comments!) or long (line noise)

[19:56] *** _mg_ left
[19:56] *** lizmat joined
[19:57] *** colomon left
[20:01] <[Coke]> I'm ok with -e vs. -E, and don't particularly care if we match p5's behavior or reverse it.

[20:01] <[Coke]> I think an argument could be made in either direction.

[20:02] <El_Che> "Confuse them because we can"?

[20:02] *** brrt joined
[20:03] <masak> moritz: lax one-liners have bitten me several times by hiding typos and logical bugs, and they haven't once made me feel like "gee, I'm saving so many keystrokes!"

[20:03] <[Coke]> "match perl5 because that's what p5ers expect", or "keep -e for a sane *perl6* default, which is strict on"

[20:03] <El_Che> DrForr: are you ok?

[20:03] <[Coke]> "intentionally confuse people" is not cool, no. :)

[20:03] *** n0tjack left
[20:03] <[Coke]> I'm also happy with "there is no easy way to get to lax mode."

[20:03] <masak> I basically consider the "non-strict in -e" thing to be a design decision that looks nice on paper, but that ends up being annoying and non-helpful.

[20:04] <masak> [Coke]: people can define a shell alias if they really want to.

[20:04] <[Coke]> I'm also happy with "there is no lax mode", though. :)

[20:04] <PerlJam> Did anyone see my idea of somehow using auto-declared vars in one-liners?   That would alleviate some pressure if something like that could be made to work

[20:04] <[Coke]> if "./perl6 -e "no strict" -e "rest of code"  " works, that'd be an easy way to do it.

[20:05] <PerlJam> [Coke]: if only you could have multiple -e  :)

[20:05] <[Coke]> I think we can make that work before christmas.

[20:05] <El_Che> -€

[20:05] <El_Che> to piss off all the user using LANG=C

[20:05] <El_Che> :)

[20:06] <masak> PerlJam: I'm not sure... it doesn't really fit in with how $^x et al work in blocks...

[20:06] *** brrt left
[20:07] *** darutoko left
[20:07] <jdv79> masak: nice talk today.  i missed it at spw.

[20:07] <masak> jdv79: thanks.

[20:07] <masak> that reminds me.

[20:07] * masak goes to put it online

[20:07] <[Coke]> multiple -e's work in p5, seems like a reasonable approach.

[20:08] <masak> [Coke]: what are multiple -e's good for in p5?

[20:08] <PerlJam> [Coke]: aye, though it would make me wonder what   perl6 -e '...'  -ne '...'  -e '...'  would mean

[20:08] <masak> you don't normally expect to run multiple scripts one after the other.

[20:08] <[Coke]> PerlJam: that you deserve what you get

[20:09] <jdv79> i was a bit surprised about the shiny related comments, esp. that perl6.org isn't good enough - in the community panel thing

[20:09] <[Coke]> masak: all -e's are run in order.

[20:09] <[Coke]> perl -e 'print 2;' -e 'print 3;' # prints 23

[20:09] <[Coke]> someone is already working on updates to perl6.org

[20:10] <RabidGravy> it just cats them all together 

[20:10] <[Coke]> #perl6-site

[20:10] <jdv79> i get the "i want to be up and running and have good velocity in < x minutes" but the pretty, shiny, superficial stuff seems a bit  over the top

[20:11] <masak> [Coke]: "all -e's are run in order" -- was that a reply to my "what are they good for?" ?

[20:11] <masak> [Coke]: because that sounds more like an answer to "what do they do?", which I didn't ask (and already knew) :P

[20:11] <masak> http://masak.org/carl/yapc-eu-2015-interesting-times/talk.pdf <-- my talk today

[20:12] *** n0tjack joined
[20:12] <masak> RabidGravy: my gosh, you're right!

[20:12] <masak> $ perl -Mstrict -e '{ my $a = 5;' -e ' print "$a\n" }'

[20:13] <masak> 5

[20:13] <flussence> (are perl5's -n and -p still horrible on the inside?)

[20:13] <[Coke]> m: say :10<-42>

[20:13] <GLRelia> rakudo-moar 62e17b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gxomuBMzdX␤Malformed radix number␤at /tmp/gxomuBMzdX:1␤------> 3say :10<7⏏5-42>␤    expecting any of:␤        number in radix notation␤»

[20:13] <camelia> rakudo-moar e6f360: OUTPUT«5===SORRY!5=== Error while compiling /tmp/eA5jVYSCsn␤Malformed radix number␤at /tmp/eA5jVYSCsn:1␤------> 3say :10<7⏏5-42>␤    expecting any of:␤        number in radix notation␤»

[20:13] <[Coke]> m: say -:10<42>

[20:13] <GLRelia> rakudo-moar 62e17b: OUTPUT«-42␤»

[20:13] <camelia> rakudo-moar e6f360: OUTPUT«-42␤»

[20:13] <[Coke]> ^^ that was in one of ShimmerFairy's commits. Desired?

[20:14] <masak> jdv79: I didn't stay for the panel. the things I'm hearing about it make me kind of glad I didn't.

[20:15] <hahainternet> jnthn: page 51 of http://jnthn.net/papers/2015-spw-perl6-course.pdf .. the ^5 example needs attention

[20:16] *** tinyblak joined
[20:21] *** tinyblak left
[20:34] *** RabidGravy left
[20:35] *** brrt joined
[20:35] *** spider-mario joined
[20:36] *** RabidGravy joined
[20:36] <RabidGravy> masak++ # "... the interesting times should come from the problem domain, not from the language." damn right

[20:37] <masak> I wrote that? anyway, I fully. :P

[20:37] <masak> agree*

[20:38] <RabidGravy> It only becomes interesting if you're making useful software with it

[20:39] *** xfix left
[20:40] *** rangerprice joined
[20:42] *** AlexDaniel joined
[20:43] <PerlJam> masak++ 

[20:44] *** muraiki left
[20:44] *** Cold_ joined
[20:45] *** emilbarton joined
[20:45] *** Cold_ left
[20:45] *** brrt left
[20:46] *** Peter_R left
[20:47] *** FROGGS left
[20:51] *** Peter_R joined
[20:54] <masak> RabidGravy: well, "interesting" here is usually taken to mean something close to "double-plus-ungood"

[20:56] *** telex left
[20:57] <PerlJam> Just like when you're planning a trip to the south pole, you want it to be a good journey and not an adventure  :)

[20:58] *** emilbarton left
[20:58] *** telex joined
[21:00] <sufrostico> 1~1~1~screen

[21:01] <sufrostico> screen

[21:02] *** kaare_ left
[21:02] <RabidGravy> precisely, it's much happier if the design is difficult not the detailed implementation

[21:05] *** skids left
[21:17] <RabidGravy> may have to look at URI in the morning, found two annoyances today

[21:17] <dalek> rakudo-star-daily: 1370362 | coke++ | log/ (9 files):

[21:17] <dalek> rakudo-star-daily: today (automated commit)

[21:17] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/13703627fe

[21:28] *** Sgeo_ joined
[21:30] *** Sgeo left
[21:35] *** [Sno] left
[21:53] *** cognominal left
[21:55] <jdv79> its fine if people want shiny things but i disagree that its vital or a good idea indirectly

[22:00] *** brrt joined
[22:01] *** dha left
[22:03] *** dha joined
[22:09] *** [TuxCM] joined
[22:09] *** rindolf left
[22:09] *** RabidGravy left
[22:12] *** n0tjack left
[22:20] *** pmurias joined
[22:21] <dalek> nqp/js: ce26235 | (Pawel Murias)++ | src/vm/js/ (2 files):

[22:21] <dalek> nqp/js: Labels to last

[22:21] <dalek> nqp/js: review: https://github.com/perl6/nqp/commit/ce26235e1d

[22:21] <dalek> nqp/js: 05b206d | (Pawel Murias)++ | t/nqp/84-loop-labels.t:

[22:21] <dalek> nqp/js: Add a test for next with label that actually fails when the label is removed.

[22:21] <dalek> nqp/js: review: https://github.com/perl6/nqp/commit/05b206dffa

[22:21] <dalek> nqp/js: 205e2aa | (Pawel Murias)++ | src/vm/js/ (3 files):

[22:21] <dalek> nqp/js: Pass test 84.

[22:21] <dalek> nqp/js: 

[22:21] <dalek> nqp/js: Make next/last/redo support labels.

[22:21] <dalek> nqp/js: review: https://github.com/perl6/nqp/commit/205e2aab26

[22:21] <dalek> nqp/js: e449084 | (Pawel Murias)++ | src/vm/js/ (2 files):

[22:21] <dalek> nqp/js: Implement nqp::getstdout

[22:21] <dalek> nqp/js: review: https://github.com/perl6/nqp/commit/e4490845bf

[22:21] <pmurias> down to 10 failing tests in t/nqp :)

[22:21] <yoleaux> 2 Sep 2015 17:43Z <hoelzro> pmurias: I've been trying to merge the js branch with master; is there code that is specific to how the MoarVM serialization process works?

[22:21] <yoleaux> 16:23Z <lizmat> pmurias: your wallet is found

[22:21] <hoelzro> pmurias: (on that note, I figured it out)

[22:22] <pmurias> hoelzro: hi

[22:22] <hoelzro> o/ pmurias 

[22:22] <pmurias> hoelzro: there is code that deserializes objects that MoarVM serializes

[22:24] <hoelzro> pmurias: I ended up finding that; I was able to bring it up to MVM serialization format 14

[22:24] <hoelzro> I'm hoping to incorporate version 15 tonight, and finish the merge

[22:24] <pmurias> great

[22:25] <hoelzro> pmurias: I forget - did you weigh in on whether the js backend should just live on master?

[22:27] <pmurias> are there any drawback in having it merged?

[22:27] <pmurias> * drawbacks

[22:28] *** n0tjack joined
[22:30] *** spider-mario left
[22:30] <pmurias> hoelzro: I think merging would be good as it will avoid desynchronization building up

[22:30] <hoelzro> that's the idea =)

[22:31] <hoelzro> I don't know of any drawbacks

[22:31] <hoelzro> all of the JS work should be under src/vm/js

[22:32] *** skids joined
[22:33] *** n0tjack left
[22:35] <pmurias> hoelzro: it seems we might as well go ahead and do the merge instead of discussing it

[22:35] <hoelzro> alright, I'll push the merge up to master once I've finished with it

[22:36] *** brrt left
[22:36] <pmurias> :)

[22:36] <hoelzro> then we'll just have to fix the failing tests =)

[22:37] <pmurias> test 49 is impossible before the bootstrap

[22:37] <pmurias> as it compiles regexes at runtime

[22:38] *** n0tjack joined
[22:38] <hoelzro> ok, I'll make a mental note of that

[22:39] <pmurias> sleep& # there is a Inline::Perl5 talk at 8:30 tommorrow... 

[22:40] *** pmurias left
[22:40] <hoelzro> night pm

[22:42] *** n0tjack left
[22:43] *** _itz_ left
[22:44] *** _itz joined
[22:48] *** n0tjack joined
[22:50] *** kjs_ joined
[22:55] *** n0tjack left
[22:56] *** lizmat left
[22:56] *** FROGGS joined
[22:58] *** n0tjack joined
[22:58] *** mj41 joined
[23:03] *** lizmat joined
[23:04] *** n0tjack left
[23:05] *** kjs_ left
[23:05] *** n0tjack joined
[23:06] <mj41> lizmat: I just decided to come to have fun at http://act.yapc.eu/ye2015/wiki?node=Hackathons

[23:07] <lizmat> mj41: cool!

[23:07] <mj41> Is it going to happen? Not many people there.

[23:07] <lizmat> well, if there are fewer than 8 people there, we will move to our room in the hotel...

[23:08] <lizmat> we have a large room with 4 comfortable seats, and a big balcony with another 4 seats

[23:08] <lizmat> if the weather is not good enough outside, we can go inside, and vice versa  :-)

[23:08] <mj41> ok, sounds good, thx

[23:10] *** n0tjack left
[23:12] *** mj41_nb joined
[23:14] *** mj41_nbx joined
[23:14] *** mj41 left
[23:14] *** mj41_nbx left
[23:16] *** mprelude left
[23:18] *** mj41_nb left
[23:21] *** n0tjack joined
[23:22] <japhb> masak: I used to be a *huge* user of laxness in perl5 -e ... then I realized I was actually spending extra effort to "be clever" and golf away the things strictness required.  I soon found it much easier to just type a couple extra 'my ' and avoid doing absurdly tricky stuff.

[23:22] <japhb> masak: And I've never really wanted the non-strictness in perl6 -e.  I thought I might, but I just didn't.

[23:23] <japhb> I still occasionally use the }{ trick in perl5 -e though ...

[23:25] * geekosaur increasingly uses strictness in -e (well, -E). blame haskell :p even in a one-liner it's nice to know when you missed something

[23:34] <dha> Yes. I will say two things. TMTOWTDI and "Perl is designed to make the easy jobs easy, without making the hard jobs impossible."

[23:35] <dha> So, although you seem to think strict should be used in one-liners, there is clearly disagreement, and those people should be able to do without, and not have to sacrifice a goat to do so.

[23:35] <dha> IMO, of course.

[23:38] *** n0tjack left
[23:39] *** hernanGOA left
[23:41] *** larion left
[23:43] *** nits joined
[23:44] *** nits is now known as Guest21103

[23:48] *** Guest21103 left
[23:49] *** vendethiel left
[23:53] <japhb> .tell jnthn http://jnthn.net/papers/2015-spw-perl6-course.pdf is fantastic!  Some variation on that needs to be part of a future "getting started" section on perl6.org.

[23:53] <yoleaux> japhb: I'll pass your message to jnthn.

[23:56] *** colomon joined
[23:57] *** BenGoldberg joined
