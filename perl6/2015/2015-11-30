[00:00] *** clkao left
[00:00] <Herby_> That was it. I'm a dummy

[00:01] *** clkao joined
[00:03] *** Juerd left
[00:04] *** RabidGravy left
[00:05] *** znpy` left
[00:08] *** PotatoGim left
[00:08] *** PotatoGim_ joined
[00:09] <Herby_> thanks

[00:09] *** Herby_ left
[00:10] *** thundergnat joined
[00:11] *** Juerd joined
[00:15] *** znpy` joined
[00:15] <dalek> modules.perl6.org: 82d9214 | (Zoffix Znet)++ | / (6 files):

[00:15] <dalek> modules.perl6.org: Do not purge dists from DB when fetching META file fails

[00:15] <dalek> modules.perl6.org: 

[00:15] <dalek> modules.perl6.org: RabidGravy++

[00:15] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/82d9214c4d

[00:16] *** csd_ left
[00:16] <Zoffix> There! Fixed forever :)

[00:17] *** PotatoGim_ left
[00:17] <MadcapJake> i feel like i'm doing something wrong, I'm trying to iterate over a `JSON::Tiny.from-json` array, and I am getting all sorts of strange results. For some reason the array is wrapped in an array, and if i try and print a newline before each array entry, it just prints one newline and then dumps the whole array out.

[00:17] *** pierre-vigier joined
[00:18] <MadcapJake> `for @p6[0] { say ""; .say }` shouldn't that print a newline between each array item?

[00:19] *** znpy` left
[00:19] <lucs> panda build problem: http://fpaste.scsys.co.uk/502164

[00:19] <Skarsnik> yes

[00:20] *** Actualeyes joined
[00:20] *** Actualeyes left
[00:20] <hartenfels> m: use NativeCall; sub printf(Str, Str is encoded("utf16")) is native(Str) { * }; printf("%p\n", "")

[00:20] <camelia> rakudo-moar 0ede33: OUTPUT«(signal SEGV)»

[00:20] <Zoffix> m: my @p6 = ([4, 5, 6], 45); for @p6[0] { say ""; .say }

[00:20] <camelia> rakudo-moar 0ede33: OUTPUT«␤[4 5 6]␤»

[00:20] <hartenfels> Uh

[00:20] <Skarsnik> hm I think vararg does not work like this?

[00:21] *** PotatoGim_ joined
[00:21] <lucs> Both panda errors appear to be related to a commit 7cd00ffc3

[00:22] <Zoffix> lucs, yeah, there've been a merge that's expected to keep stuff in turmoil for 1-2 days. I think your error looks same as this one: https://github.com/retupmoca/P6-Find-Bundled/pull/2

[00:22] *** brabo joined
[00:22] <lucs> Sure does :)

[00:23] <Skarsnik> m: my @p6 = ([4, 5, 6], 45); for @p6[0] { say ""; say $_ }

[00:23] <camelia> rakudo-moar 0ede33: OUTPUT«␤[4 5 6]␤»

[00:23] <Skarsnik> m: my @p6 = ([4, 5, 6], 45); for @p6[0] { say "l"; say $_ }

[00:23] <camelia> rakudo-moar 0ede33: OUTPUT«l␤[4 5 6]␤»

[00:23] <Skarsnik> m: my @p6 = ([4, 5, 6], 45); for @(@p6[0]) { say "l"; say $_ }

[00:23] <camelia> rakudo-moar 0ede33: OUTPUT«l␤4␤l␤5␤l␤6␤»

[00:23] <Zoffix> m: my @p6 = ([4, 5, 6], 45); for @p6[0].List { say "l"; say $_ }

[00:23] <camelia> rakudo-moar 0ede33: OUTPUT«l␤4␤l␤5␤l␤6␤»

[00:24] <MadcapJake> sweet, so even though .WHAT returns array, I still have to turn it into a list to iterate ove rit?

[00:24] <Skarsnik> m: my @p6 = ([4, 5, 6], 45); for @p6[0] -> $a { say "l"; say $a }

[00:24] <camelia> rakudo-moar 0ede33: OUTPUT«l␤[4 5 6]␤»

[00:24] <Zoffix> MadcapJake, no idea :) I don't know much of P6 :)

[00:25] <Zoffix> But from what I see, it ends up thinking that you wish to iterate over just one item, which turns out to be [4, 5, 6]

[00:25] *** Juerd left
[00:26] <MadcapJake> ok cool, I feel like I'm at a serious disadvantage learning Perl 6 with zero experience in Perl 5 :S

[00:26] *** Juerd joined
[00:26] <Skarsnik> Not really

[00:26] <Zoffix> MadcapJake, I've been coding Perl 5 for a decade and Perl 6 looks alien to me :P

[00:26] <Skarsnik> perl5 is messy for this kind of stuff x)

[00:26] <Zoffix> MadcapJake, actually, I feel at a disadvantage because I constantly have to force myself to forget how P5 does stuff :P

[00:26] <lucs> Zoffix: I checked out the commit preceding the one shown, and it builds okay -- I suppose I can live with that for now :)

[00:27] <Zoffix> sweet

[00:27] <MadcapJake> lol i suppose there's pros and cons on both sides of the fence

[00:27] <Zoffix> :)

[00:28] <lucs> Zoffix: Looks alien to you? Hmm... To me it looks like an incredible step up, feels completely perlish, but way way more powerful.

[00:28] *** telex left
[00:31] <Zoffix> lucs, ¯\_(ツ)_/¯ same for me, but the power is from the "alien" stuff :) Like all sorts new of operators and core method calls. And of course all the typed stuff, on which I'm not yet entirely sold.

[00:31] *** znpy` joined
[00:32] <lucs> Well, you know, try before you buy :)

[00:32] <Zoffix> I do have much more fun coding P6 than P5 though.

[00:33] <Zoffix> Not sure if that's just 'cause I code P5 for a living, so it just feels like "work" :)

[00:33] <lucs> I remember when I went from perl4 to perl5 and all its cool new features.

[00:34] <lucs> Now I have the same feeling, but at least an order of magnitude or two stronger.

[00:34] <Zoffix> perl4 0.o

[00:34] <lucs> Yessir

[00:34] <Zoffix> I don't think I was even born back then :P

[00:34] <lucs> On windows no less.

[00:34] <Zoffix> :o

[00:35] <Zoffix> m: 378/462

[00:35] <camelia> rakudo-moar 0ede33: ( no output )

[00:35] * Zoffix curses

[00:35] <Zoffix> We really need to fix the bot to output last statement

[00:35] *** clkao left
[00:35] *** clkao joined
[00:35] <Skarsnik> m: 40/10.say

[00:35] <camelia> rakudo-moar 0ede33: OUTPUT«10␤»

[00:35] <ShimmerFairy> MadcapJake: I still don't know any Perl 5, to give you an example of someone who's learned Perl 6 without P5 knowledge :P

[00:35] <Zoffix> ha-ha

[00:36] <Mouq> m: my @p6 = ([4, 5, 6], 45); for |@p6[0] { say ""; .say } # MadcapJake 

[00:36] <camelia> rakudo-moar 0ede33: OUTPUT«␤4␤␤5␤␤6␤»

[00:36] <Zoffix> Ah Mouq++

[00:36] <Skarsnik> | is .flat?

[00:37] <Zoffix> I believe so

[00:38] <dalek> rakudo-star-daily: 09c9bb8 | coke++ | log/ (2 files):

[00:38] <dalek> rakudo-star-daily: today (automated commit)

[00:38] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/09c9bb8b82

[00:38] <jdv79> i thought | was more like a slip

[00:38] <Mouq> Skarsnik: In this case, it's the same

[00:38] <Mouq> m: my @p6 = ([4, 5, 6], 45); say @p6[0].flat; say |@p6[0] # one difference

[00:38] <camelia> rakudo-moar 0ede33: OUTPUT«(4 5 6)␤456␤»

[00:39] <skids> Hrm, shouldn't @a[0] be a single-element-rule triggerer?  Also isn't "for" supposed to go further than single-element-rule?

[00:39] *** thundergnat left
[00:39] *** hartenfels left
[00:40] <skids> m: my @a = [42, 3], "a"; for @(@a[0]) { "l".say; $_.say; }

[00:40] <camelia> rakudo-moar 0ede33: OUTPUT«l␤42␤l␤3␤»

[00:40] <ShimmerFairy> Mouq, I didn't share this yesterday, but here's my Pod parser :)    https://shimmeryfairy.wordpress.com/2015/11/28/introducing-supernova/

[00:40] <Mouq> skids: tbh I'm still catching up on the exactitudes of GLR. I was away for awhile..

[00:42] <Mouq> ShimmerFairy++

[00:42] *** Juerd left
[00:42] *** BinGOs left
[00:42] *** BinGOs joined
[00:42] <Zoffix> k. modules.perl6.org db has been rebuilt. The dist-purging bug should be fixed now.

[00:42] *** Juerd joined
[00:42] <Mouq> 100% agree with having a separate Pod-lang

[00:43] <ShimmerFairy> skids: my guess is that since each Array element is a Scalar container, you're getting scalar behavior from a single-elem access

[00:43] <Mouq> in the braid, that is

[00:43] <skids> Possibly some of that "should decont" work may have changed the behavior since immediately post-glr.  I wonder what some older builds do.

[00:44] *** Zoffix left
[00:44] <ShimmerFairy> Mouq: another thought in that direction I've had is that we should have separate files per language, e.g. MAIN-Grammar.nqp, Quote-Actions.nqp, and so on, just to keep things more logically separate (we have technology to concat files, at least) :)

[00:45] <ShimmerFairy> skids: I know that being able to have  for $[1,2,3] { }  mean loop over the list as one element (that is, force non-single-arg-rule-ing) was added because trying to stop single-arg when a leading $ didn't was too much of a headache

[00:45] <Mouq> ShimmerFairy: What, and make the grammar file less insane? why would we do that? ;P

[00:47] *** TEttinger left
[00:47] *** sQuEE` left
[00:48] *** sQuEE joined
[00:48] *** dayangkun joined
[00:49] *** TEttinger joined
[00:49] *** skaji_ left
[00:49] * Mouq just realized how awesome it is that due to NFG, table parsing shoudn't have to do special unicode contortions to DWIM for a table with funny symbols in it

[00:50] *** dalek left
[00:51] *** dalek joined
[00:51] *** ChanServ sets mode: +v dalek

[00:51] *** PotatoGim_ left
[00:52] <ShimmerFairy> Mouq: how do you mean? I don't immediately see where NFG would make that particularly easier per se.

[00:52] *** PotatoGim joined
[00:55] <Mouq> Tables a character-based, aren't they? Someone writes what looks like X characters, that table column should be considered to be X characters

[00:55] <Mouq> are*

[00:55] *** [Tux] left
[00:56] <ShimmerFairy> Mouq: ooh, yes! NFG is so nice I forgot that I'd be forced to handle combining chars and the like appropriately otherwise :P

[00:57] <Mouq> haha

[00:58] <ShimmerFairy> Mouq: the only place where that doesn't count is with tab characters, but I don't yet count tabs right for margins, much less in a general fashion for, say, inside a table cell. (How would you even tweak regexes to do that? O_o)

[00:59] *** dalek left
[00:59] *** clkao_ joined
[00:59] <ShimmerFairy> For virtual margins, it's just a matter of counting "visual" spaces when getting the margin and checking for it on the next lines (which just means encountering and handling a tab specially). Generalizing support for \t as a variable-length character sounds really tricky, though.

[00:59] *** clkao left
[00:59] *** clkao_ is now known as clkao

[00:59] *** dalek joined
[00:59] *** ChanServ sets mode: +v dalek

[01:00] <Mouq> ShimmerFairy: Better to veto mixed spaces and then, if wanted, add support later

[01:00] <ShimmerFairy> Mouq: yeah, for now margins are lazily just space characters IIRC (or else pretends tab is one space)  :)

[01:01] <ShimmerFairy> Mouq: I just thought of a $*TAB_DRIFT variable (reset per line) that holds the number of spaces tab characters have pretended to be (so if a tab pretends to be 4 spaces, then $*TAB_DRIFT == 3), to aid in calculating cell positions

[01:02] *** telex joined
[01:02] <ShimmerFairy> (keeping the TAB_DRIFT separate means we could still get the "real" column of a line if needed, and generally feels nicer than lumping it all together)

[01:02] *** rgrau left
[01:03] *** kipd left
[01:03] *** pierre-vigier left
[01:03] <Mouq> ShimmerFairy: Except when the next person opens the file in an editor with different tab display and can't figure out why their docs don't look right :P

[01:05] <ShimmerFairy> Mouq: that's what $?TABSTOP is for :P

[01:06] <ShimmerFairy> moral of the story: don't use tabs inside table cells, or in fact anywhere beyond the left margin (i.e. follow the "tabs for indent, space for alignment" convention I've heard before)

[01:06] *** kipd joined
[01:06] <Mouq> s/look/compile

[01:06] <Mouq> but yeah

[01:08] <skids> .oO(replace all normal characters from previous cols with spaces, then run indent)

[01:09] *** samb1 left
[01:09] *** cognominal left
[01:10] <ShimmerFairy> mixed space margins should of course be supported however. Like I said, it's just a matter of calculating width according to $?TABSTOP when taking a margin, and then carefully counting spaces as you consume them on subsequent lines :)

[01:10] <jdv79> how can an import break custom precedence on an op?

[01:11] <[Coke]> ok, I was collecting names manually. I've gotten enough requests to add more repos that I'm now redoing the whole list of historic contributors as a program. I thought I was being the right kind of lazy, but I guess not. :)

[01:11] <ShimmerFairy> Mouq: interesting question: should configuring para and code blocks affect their implicit variants too? For example, what would happen with  =config code :margin<|>  to implicit code blocks? Would they still need more indentation, would a starting | *be* the more indent, or what?

[01:12] *** BinGOs left
[01:12] *** BinGOs joined
[01:13] <ShimmerFairy> And then what happens if you see  =config code :margin<|> \n =begin MyThing :margin<+> \n + Stuff \n\n +|code? \n =end MyThing ?

[01:13] <jdv79> [Coke]: where will this list go?

[01:13] *** kipd left
[01:13] <ShimmerFairy> (That reminds me, I forgot to add the :nested option to blocks that have it by default)

[01:15] *** kipd joined
[01:15] <Mouq> ShimmerFairy: Probably be better if implicit code/paras had seperate =configs from their explicit siblings

[01:15] *** [Tux] joined
[01:16] * Mouq is busy fighting the repo manager :P

[01:16] <ShimmerFairy> Mouq: true, I've so far been able to say "literally a code/para, but, well, implicit". But I think perhaps a little separation is in order :)  (for sure, the renderer *shouldn't* have to care about explicit/implicit)

[01:17] <ShimmerFairy> Mouq: I already came up with =config item*  and  =config head*  to generally configure all heads and items (though they're at least now just fallbacks, not any of that cascading business :P), so more special options shouldn't be impossible

[01:17] <[Coke]> jdv79: into the 2015.12 release announcement.

[01:17] <[Coke]> a work in progress is already there.

[01:20] *** pierre-vigier joined
[01:20] <Mouq> ShimmerFairy: I'm just glad you got =config working at all :P

[01:21] <ShimmerFairy> Mouq: oh, it doesn't in rakudo? Huh.

[01:21] <ShimmerFairy> Mouq: if you're wondering why I invented some new config options for implicit para/code and so on (Actions.pm6), it's because I had to figure out a way for custom blocks to get that kind of stuff if desired, and this felt like the natural solution.

[01:23] <ShimmerFairy> I used to have the custom blocks/formatting codes specify those properties via methods, but that was back when I built the AST as I went. I did away with that when it felt too clunky and potentially terrible to rely on a tree of P6 objects for parse-time knowledge :)

[01:24] *** yeahnoob joined
[01:26] *** boegel left
[01:27] *** Juerd left
[01:27] *** Juerd joined
[01:29] *** clkao left
[01:29] *** skaji joined
[01:32] *** kipd left
[01:33] *** PotatoGim left
[01:33] *** roguelazer left
[01:33] *** boegel joined
[01:34] *** KCinJP joined
[01:34] <Mouq> ShimmerFairy: line 66 of Grammar::Parsefail, .first-index needs to be .first(* >= $at,:k)

[01:34] <ShimmerFairy> Mouq: lemme know if you spot anything else of interest in SUPERNOVA, and if you'd like a commit bit :) . I'd like to hear your thoughts on my idea to handle L<scheme:> and P<scheme:> in the same way M is handled, via subclasses. (I know the Http and etc. subclasses are a bit eh right now, but they can always be improved)

[01:34] <ShimmerFairy> Mouq: yes, I _just_ finally fixed that :)

[01:34] *** clkao joined
[01:35] <Mouq> It's also extremely hard to get new copies of a module installed. Even incrementing the version number seems to use the old version?

[01:35] *** Peter_R left
[01:35] <Mouq> ShimmerFairy: Absolutely :)

[01:35] *** roguelazer joined
[01:35] <Mouq> ShimmerFairy: (Once I wrasle panda/CURLI enough to get it working)

[01:36] <ShimmerFairy> Mouq: yeah, for whatever reason panda won't let me install my own Parsefail module (non-CURLI), it's weird.

[01:36] <Mouq> ShimmerFairy: It's your source line, I'm pretty sure

[01:36] <Mouq> Try git: instead of https:

[01:37] <Mouq> *In META6.json

[01:37] *** dalek left
[01:37] *** dalek joined
[01:37] *** ChanServ sets mode: +v dalek

[01:37] <ShimmerFairy> Mouq: I'm fairly sure it worked before though, and I think Term::ColorText also uses https and yet works

[01:38] <Mouq> Hm

[01:38] <ShimmerFairy> oh, nevermind, it uses git:

[01:38] <ShimmerFairy> but still, it worked before, of that I'm certain. Since I didn't change the source url, it can't be my fault, can it?

[01:39] *** kipd joined
[01:39] *** PotatoGim joined
[01:40] <ShimmerFairy> Just tried someone else's https: using module, failed too. So weird, it obviously worked before if I'm not the only one to do it.

[01:41] <skids> Hrm maybe once CURLI gets all sorted it will be high time for a "module maintainers howto"

[01:42] *** clkao left
[01:42] *** clkao joined
[01:43] <Mouq> I got it to run \o/

[01:44] *** integral_ left
[01:46] <jdv79> --ast seems a bit cranky

[01:46] <jdv79> oh, --target=ast i mean

[01:46] <ShimmerFairy> Mouq: \o/  I'll hand a commit bit to 'Mouq' unless you want me to wait :)

[01:51] *** csd_ joined
[01:52] *** integral joined
[01:53] *** samb11 joined
[01:55] <timotimo> how does it crank, jdv79?

[01:56] *** PotatoGim left
[01:56] <timotimo> oh, there's a mail in my inbox about this

[01:57] *** PotatoGim joined
[01:57] <timotimo> wow, that looks very broken

[01:57] <timotimo> oh, it's because of | head

[02:01] *** yeahnoob left
[02:03] *** Skarsnik left
[02:08] *** kipd left
[02:09] *** kipd joined
[02:12] <ShimmerFairy> Failed to create directory '/usr/local/share/perl6/vendor/dist' with mode '0o777': Failed to mkdir: 13

[02:12] <ShimmerFairy> oh man, lovin' this CURLI business :V

[02:12] *** eiro left
[02:13] <timotimo> why does it go there? o_O

[02:13] *** hobbs left
[02:13] <ShimmerFairy> 1) I used to be able to run panda and have it install to ~/.perl6 , no sudo business required, and 2) like hell I'm putting a 0o777 in /usr/local without a good explanation

[02:14] *** hobbs joined
[02:14] <ShimmerFairy> timotimo: I install my perl6 to /usr/local, universal default install location except for MoarVM. I'm guessing that's why.

[02:14] <ShimmerFairy> Or more clearly: I'm guessing nobody who tried CURLI ever tried installing to the Universal Default Install Location™ before :)

[02:16] *** pnu left
[02:17] *** cdg joined
[02:19] *** BinGOs left
[02:19] *** pnu joined
[02:19] *** solarbunny left
[02:20] *** roguelazer left
[02:21] *** hobbs left
[02:21] *** [Tux] left
[02:22] *** hobbs joined
[02:22] <ShimmerFairy> My question is why it didn't create that directory (and all the other ones) when I typed 'sudo make install' in rakudo. Also, does it really need to be 777? My computer tried really hard to find a single regular file in /usr/ with a 777 permission (stopped it due to lack of patience :P)

[02:25] <timotimo> yeah, clearly wrong behaviour there

[02:26] <jdv79> timotimo: no.  that's just to get any large output out of hte way ^H

[02:26] *** BinGOs joined
[02:27] *** FROGGS_ left
[02:28] *** roguelazer joined
[02:29] *** [Tux] joined
[02:29] <ShimmerFairy> timotimo: seems that it happens when using a module that's not installed. -MTest works, but something like  perl6 -Ilib -Mfoo  will fail with that error.

[02:31] *** pnu left
[02:32] <flussence> what's weird is mine's been writing precomp files under both $install_path/ and ~/.perl6/$rakudo_version/. it should just use the latter in all cases, imo

[02:33] * diakopter hopes it can just install to ./install under rakudo, in addition

[02:33] <ShimmerFairy> flussence: well, having a system-wide thing is I think pretty much necessary, but something is definitely screwy (I do have a new directory in ~/.perl6 filled with new CURLI stuff, at least)

[02:34] <ShimmerFairy> diakopter: well, my hypothesis is that nobody has yet to do sufficiently extensive testing beyond the ./install default MoarVM and friends have :)

[02:34] <flussence> iirc, mono used a location under ~/.cache/ for this stuff...

[02:34] *** kipd left
[02:34] <dalek> modules.perl6.org/raiph-patch-1: 5c38f9f | raiph++ | templates/root/index.html.ep:

[02:34] <dalek> modules.perl6.org/raiph-patch-1: Suggested shift in emphasis to present status

[02:34] <dalek> modules.perl6.org/raiph-patch-1: 

[02:34] <dalek> modules.perl6.org/raiph-patch-1: -  All of them have been working on <a href="http://rakudo.org/">Rakudo</a> some point.

[02:34] <dalek> modules.perl6.org/raiph-patch-1: + The Travis column shows results of testing each module using <a href="http://rakudo.org/">Rakudo</a>.

[02:34] <dalek> modules.perl6.org/raiph-patch-1: review: https://github.com/perl6/modules.perl6.org/commit/5c38f9fd9b

[02:35] *** kid51 left
[02:36] *** kipd joined
[02:36] *** PotatoGim left
[02:37] *** PotatoGim joined
[02:41] *** yeahnoob joined
[02:41] <dalek> modules.perl6.org/raiph-patch-1: 3e59050 | raiph++ | templates/root/index.html.ep:

[02:41] <dalek> modules.perl6.org/raiph-patch-1: Link to https://github.com/ugexe/P6TCI

[02:41] <dalek> modules.perl6.org/raiph-patch-1: review: https://github.com/perl6/modules.perl6.org/commit/3e5905099f

[02:42] *** hobbs left
[02:43] * ShimmerFairy shall file the rakudobug :)

[02:46] *** ilbot3 left
[02:50] *** Herby_ joined
[02:51] *** vendethiel joined
[02:52] *** BinGOs left
[02:54] <ShimmerFairy> bug here, for those interested: https://rt.perl.org/Ticket/Display.html?id=126765

[02:57] *** bpmedley left
[02:58] *** boegel left
[03:00] <[Coke]> .

[03:00] <[Coke]> It would be nice if the desired mode was given in the ticket.

[03:03] <ShimmerFairy> [Coke]: I don't know for sure what the desired mode should be, but "let EVERYBODY modify this directory!" sure isn't it :)

[03:04] *** BinGOs joined
[03:04] *** hacst left
[03:06] *** Exodist left
[03:06] *** boegel joined
[03:06] *** solarbunny joined
[03:06] *** hobbs joined
[03:07] *** pnu joined
[03:07] *** Ben_Goldberg joined
[03:08] *** hobbs left
[03:08] *** hobbs joined
[03:08] *** hacst joined
[03:09] * grondilu finally managed to use escape characters to display a chess board properly:  http://i.imgur.com/tbiUqwK.png

[03:09] <geekosaur> I was wondering if 1777 was intended, but that sounds wrong too

[03:10] *** pierre-vigier left
[03:10] *** cdg left
[03:11] * grondilu is still wondering how he could make sure the squares really are "squared".

[03:11] <[Coke]> grondilu: without a custom font, that's unlikely, I'd wager.

[03:11] <geekosaur> can't, without knowing the terminal and the font metrics

[03:11] <ShimmerFairy> [Coke]: more specifically, it seems that for me at least 755 is normal, and 644 for files.

[03:12] <ShimmerFairy> 755 for directories, I mean.

[03:12] <Herby_> skarn, you around?

[03:13] <geekosaur> or cheating: look for $WINDOWID in the envionment and scribble directly in the window with graphics primitives (X11 only of course)

[03:13] *** Juerd left
[03:13] *** Exodist joined
[03:13] *** vendethiel left
[03:14] *** noganex_ left
[03:15] *** PotatoGim left
[03:15] *** kipd left
[03:16] *** PotatoGim joined
[03:17] *** kipd joined
[03:17] *** Herby_ left
[03:17] *** bpmedley joined
[03:19] *** Juerd joined
[03:21] *** eiro joined
[03:21] *** integral left
[03:21] *** samb11 is now known as samb1

[03:23] *** integral joined
[03:34] <skids> ｆｕｌｌｗｉｄｔｈ characters might be squarer, but I'd be surprised if chess symbols are available.

[03:39] <lucs> In perl5, to pause my program until I pressed return (to look around the filesystem while debugging), I just placed a line with "<STDIN>;"

[03:39] *** emdashcomma left
[03:39] *** lestrrat left
[03:39] <lucs> What's an equivalent way to do that in Perl6?

[03:40] *** dalek left
[03:41] <skids> lucs: $*IN.get

[03:41] <lucs> Thanks skids

[03:42] *** dalek joined
[03:42] *** ChanServ sets mode: +v dalek

[03:42] *** zengargo1le left
[03:45] *** Gardner left
[03:47] <AlexDaniel> Interesting! Text::Markdown does not use grammars. I wonder why would it be so?

[03:48] *** znpy` left
[03:49] *** noganex joined
[03:50] *** FROGGS joined
[03:50] *** Gardner joined
[03:51] *** emdashcomma joined
[03:51] <ShimmerFairy> There's really no reason why it shouldn't, the only thing I can see is perhaps a connection masak's markdown thing, which has a similarly bewildering aversion to grammars.

[03:52] *** TEttinger left
[03:54] <Mouq> Idk, I imagine it's probably faster

[03:55] *** [Tux] left
[03:58] *** KCinJP left
[03:58] *** moznion left
[04:04] *** Ben_Goldberg left
[04:04] *** skids left
[04:05] *** geekosaur left
[04:06] *** geekosaur joined
[04:08] *** hobbs left
[04:08] *** eiro left
[04:09] *** hobbs joined
[04:11] *** BenGoldberg joined
[04:11] *** mrsolo joined
[04:12] *** pnu left
[04:14] *** kipd left
[04:15] <[Coke]> if github reports an author email like "Author: zeriod <zeriod@c213334d-75ef-0310-aa23-eaa082d1ae64>" - is there anything I can do to convert that to a "real" email?

[04:15] *** BinGOs left
[04:15] <[Coke]> ah. probably a holdover from a git-svn conversion.

[04:16] *** kipd joined
[04:19] *** BinGOs joined
[04:20] *** [Tux] joined
[04:21] *** kaare_ joined
[04:21] *** solarbunny left
[04:21] *** solarbunny joined
[04:23] *** pnu joined
[04:23] <MadcapJake> why do I have to use `*-2` to remove the last item of a list?

[04:24] *** Timbus_ left
[04:24] <MadcapJake> m: my $selector = "comment.block.delimited.perl6fe"; given $selector { .split(".")[2..*-1].join(".").say }

[04:24] <camelia> rakudo-moar 0ede33: OUTPUT«delimited.perl6fe␤»

[04:24] <MadcapJake> m: my $selector = "comment.block.delimited.perl6fe"; given $selector { .split(".")[2..*-2].join(".").say }

[04:24] <camelia> rakudo-moar 0ede33: OUTPUT«delimited␤»

[04:24] <ShimmerFairy> MadcapJake: *-1 refers to the last element of the list

[04:24] <MadcapJake> ohh, so it's including it, i see

[04:25] <ShimmerFairy> it's short for something like  @foo[{$^size - 1}]

[04:26] <ShimmerFairy> in other words, * - 1 becomes a block that takes a single parameter, and when array indexing gets a block it passes the array size to it :)

[04:26] <MadcapJake> neat! thanks ShimmerFairy!

[04:26] *** Gardner left
[04:27] *** kaare_ left
[04:27] <MadcapJake> wow that's super slick! Love all these little gems in Perl 6!

[04:28] *** kipd left
[04:29] <ShimmerFairy> m: say (1,2,3,4,5)[(*/2).Int]   # another cool way to use WhateverCode in array indexing, getting the middle elem of a list with odd number of elements :)

[04:29] <camelia> rakudo-moar 0ede33: OUTPUT«3␤»

[04:30] <Mouq> m: say (1,2,3,4,5)[* div 2] #?

[04:30] <camelia> rakudo-moar 0ede33: OUTPUT«3␤»

[04:32] <ShimmerFairy> ah yes, forget about integer division :)

[04:33] <dalek> modules.perl6.org: 5c38f9f | raiph++ | templates/root/index.html.ep:

[04:33] <dalek> modules.perl6.org: Suggested shift in emphasis to present status

[04:33] <dalek> modules.perl6.org: 

[04:33] <dalek> modules.perl6.org: -  All of them have been working on <a href="http://rakudo.org/">Rakudo</a> some point.

[04:33] <dalek> modules.perl6.org: + The Travis column shows results of testing each module using <a href="http://rakudo.org/">Rakudo</a>.

[04:33] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/5c38f9fd9b

[04:33] <dalek> modules.perl6.org: 3e59050 | raiph++ | templates/root/index.html.ep:

[04:33] <dalek> modules.perl6.org: Link to https://github.com/ugexe/P6TCI

[04:33] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/3e5905099f

[04:33] <dalek> modules.perl6.org: 70f02bb | (Zoffix Znet)++ | templates/root/index.html.ep:

[04:33] <dalek> modules.perl6.org: Merge pull request #46 from perl6/raiph-patch-1

[04:33] <dalek> modules.perl6.org: 

[04:33] <dalek> modules.perl6.org: Suggested shift in emphasis to present status

[04:33] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/70f02bbfa0

[04:34] *** Gardner joined
[04:34] *** clkao left
[04:35] *** skarn left
[04:44] *** pnu left
[04:44] *** solarbunny left
[04:44] *** ilbot3 joined
[04:48] *** khw left
[04:51] *** csd_ left
[04:52] *** flussence left
[04:52] *** clkao joined
[04:52] <lucs> Some panda code reads  CompUnitRepo.new("file#$where", :next-repo($*REPO)) , yet new() takes a single Str argument, according both to S22 and to .../rakudo/src/core/CompUnitRepo.pm. So how does that work?

[04:53] *** flussence joined
[04:57] *** boegel left
[04:58] *** hacst left
[04:59] *** boegel joined
[05:01] <[Coke]> lucs - are you sure you're looking at a recent copy of that file?

[05:01] <[Coke]> I see:     method new(Str $spec, CompUnit::Repository :$next-repo) {

[05:02] *** skarn joined
[05:04] <lucs> Not the most recent, no, you're right. I checked out about 4 commits earlier, as the current one "didn't work" (forgot what exactly).

[05:04] <lucs> I'm speaking of panda actually.

[05:05] *** Gardner left
[05:05] *** Juerd left
[05:05] <lucs> As for rakudo, I cloned it today.

[05:05] *** hacst joined
[05:06] *** PotatoGim left
[05:06] <lucs> [Coke]: So, sorry, I was talking about panda. I'll check to see which CompUnitRepo.pm I have exactly.

[05:08] *** skarn left
[05:12] *** bpmedley left
[05:13] *** bolangi left
[05:15] <lucs> [Coke]: Sheesh, just did a git pull, 41 files have changed since this morning ?!

[05:15] <lucs> (including, yes, CompUnitRepo.pm)

[05:18] * lucs realizes he has to keep up!

[05:19] *** roguelazer left
[05:20] *** kipd joined
[05:20] *** roguelazer joined
[05:20] *** Gardner joined
[05:24] *** clkao left
[05:30] *** lestrrat joined
[05:30] *** BenGoldberg left
[05:37] *** hobbs left
[05:41] *** Timbus joined
[05:45] *** skarn joined
[05:47] *** Juerd joined
[05:50] *** bpmedley joined
[05:50] *** sQuEE left
[05:51] *** AlexDaniel left
[05:54] *** Juerd left
[05:54] *** Juerd joined
[05:55] *** sQuEE joined
[05:56] *** kipd left
[05:58] *** roguelazer left
[05:59] *** Zoffix joined
[06:00] *** hobbs joined
[06:01] *** roguelazer joined
[06:06] *** hacst left
[06:06] *** [Sno] left
[06:07] *** [Tux] left
[06:17] *** hacst joined
[06:19] *** hobbs left
[06:22] *** roguelazer left
[06:23] *** Gardner left
[06:24] *** roguelazer joined
[06:29] *** BinGOs left
[06:30] *** BinGOs joined
[06:30] *** mrsolo left
[06:31] *** mrsolo joined
[06:33] *** hobbs joined
[06:33] *** solarbunny joined
[06:33] *** hobbs left
[06:33] *** hobbs joined
[06:37] *** [Tux] joined
[06:37] *** Gardner joined
[06:40] *** hobbs left
[06:46] *** kipd joined
[06:47] *** xfix joined
[06:49] *** hobbs joined
[06:50] *** geraud left
[06:51] *** TEttinger joined
[06:52] *** solarbunny left
[06:53] *** solarbunny joined
[06:53] *** balazs left
[06:54] *** pnu joined
[06:55] *** bpmedley left
[06:59] *** hobbs left
[07:01] *** pnu left
[07:01] *** solarbunny left
[07:01] *** pnu joined
[07:05] *** TEttinger left
[07:09] *** vendethiel joined
[07:10] *** hobbs joined
[07:12] <[Tux]> https://gist.github.com/Tux/1c3a7f4ff4718020b945 :(

[07:12] <yoleaux> 29 Nov 2015 23:09Z <lizmat> [Tux]: say (10101..99999).pick(44).sort should now work

[07:12] *** moznion joined
[07:12] <[Tux]> :)

[07:12] * [Tux] starts from scratch

[07:13] *** FROGGS left
[07:13] <lizmat> yeah, that seems to be the solution :-)

[07:14] <dalek> rakudo/nom: 2aad18c | (Jimmy Zhuo)++ | .gitignore:

[07:14] <dalek> rakudo/nom: update .gitignore

[07:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2aad18c15a

[07:14] <dalek> rakudo/nom: 85e359c | FROGGS++ | .gitignore:

[07:14] <dalek> rakudo/nom: Merge pull request #606 from zhuomingliang/patch-8

[07:14] <dalek> rakudo/nom: 

[07:14] <dalek> rakudo/nom: update .gitignore

[07:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/85e359cb7a

[07:15] *** xinming left
[07:15] <dalek> rakudo/nom: e62545b | (Brad Gilbert)++ | src/core/Cool.pm:

[07:15] <dalek> rakudo/nom: Cool.substr-eq should return a Bool

[07:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e62545bd8c

[07:15] <dalek> rakudo/nom: 8c001e0 | FROGGS++ | src/core/Cool.pm:

[07:15] <dalek> rakudo/nom: Merge pull request #605 from b2gills/patch-3

[07:15] <dalek> rakudo/nom: 

[07:15] <dalek> rakudo/nom: Cool.substr-eq should return a Bool

[07:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8c001e0a8f

[07:19] *** solarbunny joined
[07:19] <[Tux]> $ panda install Inline::Perl5 Slang::Tuxic File::Temp CSV::Parser

[07:19] <[Tux]> make: execvp: panda: Permission denied

[07:21] <[Tux]> 60038056 -rwxrwxr-x 1 merijn 5297 2015-11-24 09:12:49 /pro/3gl/CPAN/rakudobrew/jvm-nom/panda/bin/panda

[07:21] <[Tux]> 59904848 -rwxrwxr-x 1 merijn 5297 2015-11-30 08:18:38 /pro/3gl/CPAN/rakudobrew/moar-nom/panda/bin/panda

[07:21] <[Tux]> 59245098 -rwxrwxr-x 1 merijn 5297 2015-11-24 09:12:59 /pro/3gl/CPAN/rakudobrew/panda/bin/panda

[07:22] <[Tux]> Ah, all is clear now. Starting afresh used the wrong base folder :(

[07:24] *** raiph left
[07:26] *** wtw left
[07:26] *** wtw joined
[07:26] <nine> [Tux]: the panda executable is now in a different directory

[07:26] *** pnu left
[07:27] <yoleaux> 29 Nov 2015 23:08Z <lizmat> nine: it looks like trying to build with uncommitted changes, gives the "already installed" error if you built on the latest commit before

[07:28] <nine> .tell lizmat I know. I hope that soon someone will become annoyed enough to have an idea how to avoid that.

[07:28] <yoleaux> nine: I'll pass your message to lizmat.

[07:29] *** pnu joined
[07:29] <lizmat> .botsnack

[07:29] <yoleaux> 07:28Z <nine> lizmat: I know. I hope that soon someone will become annoyed enough to have an idea how to avoid that.

[07:29] <yoleaux> :D

[07:29] *** vendethiel left
[07:31] <lizmat> nine: the error message doesn't really state which file(s) are offending

[07:31] <lizmat> it would be nice if it would be clear which file(s) would need to be zapped, instead of having to clear all of install

[07:31] <nine> It's the distribution, not individual files.

[07:32] <lizmat> so killing the dist dir should do it ?

[07:32] <nine> Well right now an rm -rf install/share/perl6 is the easiest way around. Note that panda installs into ~/.perl6 right now, so you don't lose anything

[07:33] <nine> But I didn't want to volunteer that information, because the simpleness of the workaround has kept me from finding a proper fix :)

[07:34] <lizmat> well, maybe it is as simple as just overwriting the setting dist always ? and not warn about it ?

[07:34] <lizmat> I mean, if you're not a core dev, that situation would never occur, would it ?

[07:35] <nine> Probably not, yes.

[07:35] <nine> So, in other words a :force flag that just doesn't do the installed check

[07:35] <lizmat> well, this would only apply to the settings dist, no ?

[07:37] <lizmat> nine: also, is Missing test file: t/spec/S28-named-variables/inc.t something that rings a bell ?

[07:39] *** xfix left
[07:42] *** eiro joined
[07:42] *** kipd left
[07:43] *** kipd joined
[07:45] <dalek> rakudo/nom: b9bb064 | lizmat++ | t/01-sanity/52-parse-include-spec.t:

[07:45] <dalek> rakudo/nom: Remove test for CREATE-INCLUDE-SPECS

[07:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b9bb064f02

[07:45] *** pnu left
[07:46] <[Tux]> I don't think the new panda install path is an improvement

[07:46] <[Tux]> https://gist.github.com/Tux/c48a7bf99612f3e9116f

[07:46] <dalek> rakudo/nom: a31235c | lizmat++ | src/core/CompUnitRepo.pm:

[07:46] <dalek> rakudo/nom: Remove CREATE-INCLUDE-SPECS fossil

[07:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a31235cf0c

[07:46] *** moritz_ is now known as moritz

[07:47] *** Gardner left
[07:47] *** pnu joined
[07:49] <llfourn> so what cool stuff can I do now that nine++'s work has been merged?

[07:49] *** sammers joined
[07:50] <dalek> rakudo/nom: 0cff007 | (Stefan Seifert)++ | t/spectest.data:

[07:50] <dalek> rakudo/nom: S28-named-variables/inc.t is gone. Tested the obsolete @*INC

[07:50] <dalek> rakudo/nom: 

[07:50] <dalek> rakudo/nom: Thanks to lizmat++ for pointing this out!

[07:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0cff007b43

[07:50] <nine> lizmat: indeed ^^^

[07:50] <lizmat> llfourn: panda should have precomp again

[07:50] <llfourn> lizmat: oh nice.

[07:51] <lizmat> bare startup time has dropped from 115 msecs to 104 msecs on my machine

[07:51] <llfourn> is precomp easier for my non-panda modules as well?

[07:51] <lizmat> llfourn: not sure atm, eventually yes

[07:51] <dalek> rakudo/nom: 81b4a5d | (Stefan Seifert)++ | / (2 files):

[07:51] <dalek> rakudo/nom: Force installation of the CORE dist

[07:51] <dalek> rakudo/nom: 

[07:51] <dalek> rakudo/nom: This relieves core developers of the annoyment of "CORE already installed"

[07:51] <dalek> rakudo/nom: messages on every but the first make install.

[07:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/81b4a5dd48

[07:51] <llfourn> kk

[07:52] <lizmat> nine++  :-)

[07:52] *** Gardner joined
[07:52] <llfourn> nine++ I just saw that error for the first time 5 secs before seeing that

[07:53] <nine> [Tux]: installing into ~/.perl6 is temporary. Plan is to install into share/perl6/site if possible and only fall back to ~/.perl6.

[07:53] *** pnu left
[07:54] <[Tux]> I install into /pro/3gl/CPAN/rakudobrew, never in $HOME

[07:54] <[Tux]> my $prefix = rakudobrew

[07:54] *** pnu joined
[07:54] <nine> Probably shows that I've never used rakudobrew myself

[07:56] * [Tux] should try to create a ~/.perl6 with mode 0000 to ensure those unwanted fallbacks are signalled early

[07:56] *** lestrrat left
[07:56] <nine> llfourn: yes, FileSystem repositories (use lib "lib" et al.) automatically precompile on first use. Should for example reduce time to run tests.

[07:56] <[Tux]> indeed, lots of stuff in ~/.perl6 again :( :(

[07:57] <llfourn> nine: nice++

[07:58] <nine> [Tux]: would be happy if you could help fix that! All we need is a way to identify the "site" repo and have panda pick that one preferrably and only fall back to others.

[07:58] *** pnu left
[07:58] <[Tux]> I just cleared out ~/.perl6 and removed write-rights to it. Lets have a looks where the process now breaks

[07:58] *** pnu joined
[07:59] *** eiro left
[07:59] <moritz> nine: we used to have %*CUSTOM_LIB<site> for that

[08:00] <nine> moritz: was that its purpose? Then I'll just have to replace the stringified paths by the Repository instances to make it usable for panda

[08:02] <moritz> nine: the purpose was to make it easier for panda and the likes to find where to install site packages

[08:03] <nine> moritz: excellent! Then I do have a plan :)

[08:03] <nine> Will have a look at it tonight

[08:03] <[Tux]> https://gist.github.com/Tux/64423a1cfa9210bac873

[08:04] <dalek> rakudo/nom: 7b78887 | lizmat++ | CURLI:

[08:04] <dalek> rakudo/nom: Remove original CURLI design fossil

[08:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b78887619

[08:04] *** eiro joined
[08:04] *** telex left
[08:06] *** bpmedley joined
[08:07] *** domidumont joined
[08:10] *** PotatoGim joined
[08:11] *** kipd left
[08:11] *** kipd_ joined
[08:13] *** cognominal joined
[08:13] *** hobbs left
[08:14] *** kensanata joined
[08:15] *** bpmedley left
[08:16] <cognominal> I want to explain what is bytecode and try to demonstrate :  perl6 --target=mbc -ohi.moarvm -e 'say "hi"'      and I get "cannot dump that object; no dump method". What am I doing wrong?

[08:18] *** FROGGS joined
[08:18] *** dalek left
[08:18] *** darutoko joined
[08:18] *** dalek joined
[08:18] *** ChanServ sets mode: +v dalek

[08:19] <masak> morning, #perl6

[08:20] *** hobbs joined
[08:20] *** csd_ joined
[08:20] *** lestrrat joined
[08:20] *** TEttinger joined
[08:21] <moritz> cognominal: write it to a file, --output=hi.moarvm

[08:21] <moritz> cognominal: and then open the file in a hex editor, or something

[08:21] *** geekosaur left
[08:21] *** geekosaur joined
[08:22] *** BinGOs left
[08:22] *** BinGOs joined
[08:23] *** sitaram left
[08:23] *** telex joined
[08:23] *** sitaram joined
[08:23] *** sitaram left
[08:23] *** sitaram joined
[08:24] *** xinming joined
[08:25] <[Tux]> so, with ~/.perl6 disabled, I cannot install

[08:26] <nine> [Tux]: how about making .perl6 a symlink to your normal install directory? Or wait till tonight ;) Or being faster than me at fixing panda

[08:26] <[Tux]> that last option is not an option ($work)

[08:26] *** ely-se_ joined
[08:27] *** Humbedooh left
[08:27] *** Humbedooh joined
[08:28] *** Humbedooh left
[08:28] *** Humbedooh joined
[08:29] *** mrsolo left
[08:29] *** zakharyas joined
[08:30] *** mls left
[08:30] *** mls joined
[08:30] *** pdcawley joined
[08:30] *** abraxxa joined
[08:30] *** pnu left
[08:30] *** pnu joined
[08:30] *** PotatoGim left
[08:30] *** PotatoGim joined
[08:30] *** kipd_ left
[08:30] *** kipd_ joined
[08:30] *** Woodi joined
[08:31] *** hacst left
[08:32] <cognominal> moritz, the -o form is advertised in perl6 -h but not supported?

[08:33] *** [Sno] joined
[08:34] *** hacst joined
[08:38] *** BinGOs left
[08:38] *** Gardner left
[08:38] *** roguelazer left
[08:38] * lizmat catches up on some sleep

[08:38] *** BinGOs joined
[08:39] *** sQuEE left
[08:39] <moritz> cognominal: then we should fix the docs

[08:41] *** roguelazer joined
[08:41] <[Tux]> nine, now it installs in rakudobrew/2015.11-292-g7b78887

[08:41] *** mrsolo joined
[08:42] *** sQuEE joined
[08:43] *** Gardner joined
[08:44] <[Tux]> which - of course - is not in my $PATH

[08:44] <moritz> which explains why panda doesn't work anymore on travis

[08:47] *** CurtisOvidPoe left
[08:48] <nine> I would actually love if panda installed scripts into /usr/local/bin and fall back to ~/bin. The generated scripts are independent of installed versions of the modules anyway.

[08:48] *** Juerd left
[08:49] *** Juerd joined
[08:50] *** kipd_ left
[08:52] <[Tux]> oh my, this migh be the most tedious install ever

[08:52] <[Tux]> $ panda install Inline::Perl5 Slang::Tuxic File::Temp CSV::Parser

[08:52] <[Tux]> don't know if it hangs or if it takes ages in ==> Testing Pod::Coverage

[08:52] <[Tux]> JSON::Tiny installed fine

[08:53] <FROGGS> nine: we also need some way to tell rakudo (or rakudo via panda) to install scripts into install/bin for rakudo star

[08:54] *** cognominal left
[08:54] *** domidumont left
[08:54] *** eiro left
[08:54] <Mouq> [Tux]: I also had Pod::Coverage hangs

[08:55] <Mouq> [Tux]: Looks to rely on old CUR stuff, needs to be updated

[08:55] *** Gardner left
[08:55] *** zakharyas left
[08:55] <[Tux]> it blocks all other stuff, so I cannot give timeings

[08:55] <[Tux]> lemme try to force skip that

[08:56] *** Gardner joined
[08:57] *** sQuEE left
[08:58] <[Tux]> *WTF*?????

[08:58] <[Tux]> Missing required term after infix

[08:58] <[Tux]> at /pro/3gl/CPAN/Text-CSV6/t/10_base.t:9

[08:58] <[Tux]> ------> my $csv = Text::CSV.⏏new;

[08:58] <[Tux]>     expecting any of:

[08:58] <[Tux]>         dotty method or postfix

[08:58] <nine> During GLR I used PERL6LIB instead of panda for dependencies

[08:59] *** sQuEE joined
[08:59] *** xpen joined
[09:00] *** kipd_ joined
[09:00] *** M-eternaleye is now known as eternaleye

[09:00] *** eternaleye left
[09:00] *** eternaleye joined
[09:00] *** ShimmerFairy left
[09:02] *** zakharyas joined
[09:03] <[Tux]> test             50000    23.206    23.097

[09:03] <[Tux]> test-t      ===SORRY!===

[09:03] <[Tux]> Cannot find method 'run_alt'

[09:03] <[Tux]> *I* do not have a run_alt

[09:03] <[Tux]> nor do I knowingly invoke it

[09:07] *** RabidGravy joined
[09:07] <RabidGravy> yikes

[09:08] *** johan___ is now known as johan

[09:11] *** Gardner left
[09:14] <FROGGS> [Tux]: run_alt sounds like something regex interval fwiw

[09:14] *** zakharyas left
[09:15] *** molaf joined
[09:16] <[Tux]> lizmat, pick/sort verified. top

[09:16] *** kipd__ joined
[09:17] *** kipd_ left
[09:17] *** kipd__ is now known as kipd_

[09:17] *** kipd_ is now known as kipd

[09:17] *** dayangkun left
[09:20] *** Gardner joined
[09:21] *** dayangkun joined
[09:23] *** zakharyas joined
[09:24] <lab> Hi, I'd like to do:  for @a Z 0 .. Inf -> $element, $index    but Z does not flatten, if I get it right, what is needed to get that behavior?

[09:26] <moritz> lab: for flat @a Z 0..* -> $element

[09:26] <arnsholt_> Or you can destructure

[09:26] <arnsholt_> m: my @a = <a b c d e>; for @a Z 0 .. Inf -> ($x, $y) { say $x, $y }

[09:26] <camelia> rakudo-moar 7b7888: OUTPUT«a0␤b1␤c2␤d3␤e4␤»

[09:26] *** arnsholt_ is now known as arnsholt

[09:28] *** dalek left
[09:28] <lab> arnsholt: thanks, I was looking for a solution without flat, perfect

[09:28] <RabidGravy> is travis-ci being particularly flaky today or is it something weird about the current rakudo build or just my code being shit?

[09:29] *** clkao joined
[09:29] <moritz> RabidGravy: panda on travis doens't really work

[09:29] <RabidGravy> this is what I am seeing

[09:29] <moritz> RabidGravy: due to the curli ( precomp ) branch merge yesterday

[09:32] *** dalek joined
[09:32] *** ChanServ sets mode: +v dalek

[09:34] <[Tux]> $me.commute ($work)

[09:36] *** Ven joined
[09:37] <Ven> fwiw, is there any request topics for the advent calendars? I don't have many ideas. Maybe one on introspections in Perl 6, like I did in some of my small modules?

[09:38] <Ven> I'm not sure that'd interest enough people to see how stuff like sixcheck or hydrate6 works..

[09:38] <RabidGravy> Ven, https://github.com/perl6/mu/blob/master/misc/perl6advent-2015/topic-brainstorming

[09:39] <Ven> amazing, thanks RabidGravy 

[09:40] <Ven> I'm not sure we actually want an article on perlito? afaik the 6 part isn't active

[09:40] <moritz> Ven: I'd find it interesting

[09:41] *** nebuchadnezzar joined
[09:41] *** iH2O joined
[09:41] * masak links to https://github.com/perl6/mu/blob/master/misc/perl6advent-2015/schedule to signal-boost it a bit

[09:43] *** emdashcomma left
[09:43] <dalek> mu: ec4e564 | (Carl Masak)++ | misc/perl6advent-2015/schedule:

[09:43] <dalek> mu: claim four slots

[09:43] <dalek> mu: 

[09:43] <dalek> mu: I just took some days. If someone feels like they wanted that day,

[09:43] <dalek> mu: I'm easily convinced to switch.

[09:43] <dalek> mu: review: https://github.com/perl6/mu/commit/ec4e564d15

[09:44] *** iH2O left
[09:44] <masak> people: help fill the advent calendar! surely we can keep this hallowed tradition alive *on the year of release*? :P

[09:44] <masak> this will be the seventh year we do an advent calendar. wow.

[09:45] *** yeahnoob left
[09:45] <masak> people seem to feel that the topics are running dry, but in my experience that's an illusion.

[09:45] <masak> there are always things to talk about. doesn't have to be features as such.

[09:45] <masak> I notice no-one is talking about the new supply syntax yet.

[09:45] <masak> that's one of the things to be most proud of this year, and maybe in Perl 6 overall.

[09:45] *** emdashcomma joined
[09:46] <stmuk> I don't think the new suppy syntax is even in the doc repo?

[09:46] <stmuk> ^ supply

[09:46] <masak> I also see no slot claimed to talk about modules and the new curli stuff

[09:46] <Ven> well then, I'm gonna go ahead and claim a slot

[09:46] <dalek> mu: 43d57ec | ven++ | misc/perl6advent-2015/schedule:

[09:46] <dalek> mu: claim a spot

[09:46] <dalek> mu: review: https://github.com/perl6/mu/commit/43d57ec530

[09:46] <masak> \o/

[09:46] <masak> let's have a claim-a-spot party today :D

[09:47] <masak> slot*

[09:47] <moritz> masak++

[09:47] <moritz> Ven++

[09:47] <masak> Ven: you forgot to write your nick.

[09:47] <Ven> masak: plan to claim a spot about 007?

[09:47] <Ven> masak: I'm bad at stuff

[09:48] <dalek> mu: 29f3f1f | ven++ | misc/perl6advent-2015/schedule:

[09:48] <dalek> mu: add my nick

[09:48] <dalek> mu: review: https://github.com/perl6/mu/commit/29f3f1f1cb

[09:48] <masak> Ven: I'll have to think about whether to mention 007. if I do, it'll probably be in the wider context of macros.

[09:48] <moritz> masak: please do

[09:48] <masak> ok, cool.

[09:48] *** kjs_ joined
[09:49] <moritz> I think the scope of the advent calendar can be quite wide

[09:49] *** bitmap left
[09:49] <RabidGravy> stmuk, I may look at that today as the examples in the concurrency doc don't even work now

[09:49] <masak> ++RabidGravy

[09:49] <moritz> language features, "how do I retrieve a web page with Perl 6?", cool projects, editor support, philosophy, design of the JIT/VM/Compiler/whatever

[09:50] <dalek> mu: 3120b06 | (Carl Masak)++ | misc/perl6advent-2015/schedule:

[09:50] <dalek> mu: by popular demand, status-update on macros/007

[09:50] <dalek> mu: review: https://github.com/perl6/mu/commit/3120b06c97

[09:50] *** dakkar joined
[09:51] *** Juerd left
[09:51] <dalek> mu: e2dd10b | (Steve Mynott)++ | misc/perl6advent-2015/schedule:

[09:51] <dalek> mu: Benchmarking - stmuk (itz)

[09:51] <dalek> mu: review: https://github.com/perl6/mu/commit/e2dd10b6f8

[09:51] *** Gardner left
[09:51] *** bitmap joined
[09:51] <RabidGravy> get in there

[09:53] <stmuk> the examples in the docs probably should be unit tested somehow .. maybe based on expected output in a comment

[09:53] *** Ven left
[09:53] <stmuk> eg. say 2+2 # => 4

[09:53] *** Gardner joined
[09:54] *** n0xff joined
[09:54] <stmuk> not sure if such a framework or similar exists yet in ecosystem

[09:56] *** znpy` joined
[09:57] *** Juerd joined
[09:57] *** g4 joined
[09:57] *** g4 left
[09:57] *** g4 joined
[09:58] * grondilu pulls and rebootsrap pand, hopes it's ok after the curli merge

[09:58] *** Ven joined
[10:00] <stmuk> it isn't :)

[10:00] *** joli joined
[10:00] *** MilkmanDan joined
[10:00] *** joli is now known as aigan

[10:01] <RabidGravy> grondilu, I've just nuked the whole rakudo and started again

[10:01] <RabidGravy> nope still broken

[10:01] <RabidGravy> is zef better?

[10:01] <grondilu> so far it seems to work fine for me

[10:02] <grondilu> I haven't pulled rakudo since yesterday though

[10:02] *** rurban joined
[10:04] <RabidGravy> nope the whole thing is borked with zef as well

[10:05] <stmuk> and probably many ecosystem tests using @*INC as well

[10:05] <RabidGravy> I'm sure it'll get fixed at some point

[10:05] * moritz hopes this is the last breaking change before Christmas

[10:07] <Ven> well well, that dalek commit link crashed my irc client

[10:08] <moritz> Ven: sounds like a security vulnerability waiting to be found

[10:08] <grondilu> oh yeah it crashed indeed

[10:08] *** xpen_ joined
[10:08] <stmuk> whats the current recommended way of setting include path for tests BTW? 

[10:08] <moritz> stmuk: use lib

[10:09] *** skaji left
[10:11] *** xpen left
[10:12] *** skaji joined
[10:13] <grondilu> I do $ PERL6LIB=$path perl6 program.p6

[10:14] <grondilu> (usually PERL6LIB=./lib)

[10:14] <moritz> perl6 -Ilib program.p6 # also works

[10:15] <grondilu> that's shorter, I'll do that next time

[10:16] <Woodi> hallo #perl6 :)

[10:16] *** znpy` left
[10:16] *** espadrine joined
[10:17] <Woodi> I remember some fuzzy testing of (probably) rakudo code... any results or maybe already merged ?

[10:17] *** clkao_ joined
[10:18] *** clkao left
[10:18] *** clkao_ is now known as clkao

[10:18] <Ven> moritz: well.. it's closed source so idk

[10:20] *** donaldh joined
[10:25] *** rindolf joined
[10:28] <donaldh> r: my @msgs = <one two three>; my %args = 'oh' => 'my', 'what' => 'fun'; @msgs.push(%args.map: { .key ~ '=' ~ .value }); say @msgs.perl

[10:28] <camelia> rakudo-moar 7b7888, rakudo-jvm e3c591: OUTPUT«["one", "two", "three", ("oh=my", "what=fun").Seq]␤»

[10:29] <donaldh> hmm, not what I'm getting from rakudo-star

[10:30] <moritz> donaldh: try .append instead of .push

[10:31] <donaldh> moritz: thanks. I thought push was the wrong thing to use but didn't spot append.

[10:38] *** dayangkun left
[10:41] <jnthn> stmuk: I've got several flights/train journeys coming up, so if I have the energy may try writing up the supply syntax for the docs during one of them. :)

[10:41] *** domidumont joined
[10:42] *** flaviusb joined
[10:43] <moritz> donaldh: note that http://doc.perl6.org/routine/push even mentions method append :-)

[10:43] *** eiro joined
[10:44] <moritz> (the link is broken through :/ )

[10:44] *** YP-QMUL-W joined
[10:45] * donaldh must get into the habit of searching doc.perl6.org instead of desgin.perl6.org

[10:46] <arnsholt> Yeah, I'm starting to learn that too

[10:47] *** ely-se_ left
[10:48] <donaldh> what surprised me was that with star 2015.09 push did flatten the array parameter. I thought it was new enough to have the latest semantics.

[10:48] *** xpen_ left
[10:49] *** YP-QMUL-W left
[10:50] <jnthn> The GLR changes took a while to become equally distributed. :)

[10:51] <stmuk> jnthn: that would be cool but I'd also recommend some relaxation :)

[10:51] <moritz> waterbed theory of GLR changes :-)

[10:53] <stmuk> or beanbag

[10:53] *** eiro left
[10:56] *** eiro joined
[11:02] <RabidGravy> jnthn, while we're on the subject of supplies, would:

[11:02] <RabidGravy> m: my $supply = supply { for 1 .. 10 { emit($_); } }; $supply.tap( -> $v { say $v });

[11:02] <camelia> rakudo-moar 7b7888: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[11:02] <RabidGravy> be the new canonical version of the first example in  http://docs.perl6.org/language/concurrency#Supplies

[11:03] <jnthn> Well, they're different.

[11:04] <jnthn> A supply block is an on-demand supply

[11:04] *** pdcawley_ joined
[11:04] <jnthn> It is an easy first example, though :)

[11:04] <RabidGravy> ah so the "live" one always requires the Supplier and the Supply

[11:04] <jnthn> Aye

[11:05] <RabidGravy> right so the real equivalent is

[11:05] <RabidGravy> m: my $supplier = Supplier.new; my $supply = $supplier.Supply; $supply.tap( -> $v { say $v }); for 1 .. 10 { $supplier.emit($_); }

[11:05] <camelia> rakudo-moar 7b7888: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[11:05] *** pdcawley left
[11:06] <jnthn> Yeah.

[11:07] <jnthn> Good to contrast the two

[11:08] <jnthn> (Live and on-demand)

[11:08] <RabidGravy> yeah, that document doesn't really dwell on that much

[11:08] *** rgrau joined
[11:10] <RabidGravy> all good, I'll fix the examples forthwith then :)

[11:11] *** Axord joined
[11:11] <RabidGravy> and add a doc for Supplier while I'm playing

[11:13] *** rgrau left
[11:14] *** kjs_ left
[11:15] *** zakharyas left
[11:17] *** eiro left
[11:17] *** eiro joined
[11:18] *** zakharyas joined
[11:22] *** luis` is now known as luis

[11:24] *** Skarsnik joined
[11:25] <masak> 14 unclaimed slots in https://github.com/perl6/mu/blob/master/misc/perl6advent-2015/schedule !

[11:25] *** znpy` joined
[11:25] <masak> don't be shy, people ;)

[11:26] *** TEttinger left
[11:27] * grondilu doesn't quite understand what this advent thing is about

[11:27] <masak> grondilu: one post per day in December. something cool about Perl 6.

[11:28] <grondilu> ok

[11:29] <RabidGravy> masak, I'll do another one if there aren't any takers ( I don't think I'll be up for 14 though)

[11:29] <tadzik> hmm, I wonder what can I write about

[11:30] <tadzik> maybe Grammar::BNF and how it generates grammars

[11:31] *** rurban left
[11:31] <tadzik> I think it's the only new thing I created this year :o

[11:31] <masak> tadzik: sounds great

[11:32] <dalek> mu: 91fcc78 | RabidGravy++ | misc/perl6advent-2015/schedule:

[11:32] <dalek> mu: Update schedule

[11:32] <dalek> mu: review: https://github.com/perl6/mu/commit/91fcc78e87

[11:32] *** Ven left
[11:32] <RabidGravy> Only other conceivable date for me

[11:32] <dalek> mu: 6575ccd | tadzik++ | misc/perl6advent-2015/schedule:

[11:32] <dalek> mu: Claim 8th for Grammar::BNF

[11:32] <dalek> mu: review: https://github.com/perl6/mu/commit/6575ccde23

[11:33] <masak> I wouldn't mind if someone wrote about hypens and apostrophes in identifiers. I don't think anyone's every taken that as a theme.

[11:33] <masak> if there are no takers, I can write about it ;)

[11:33] <eiro> not skilled enough for writting but i think we can setup a french translation team (i have few people in mind) 

[11:33] <stmuk> mmm panda uses @*INC

[11:33] <masak> eiro: cool.

[11:34] <masak> did we ever do an advent post on Date and DateTime?

[11:34] <moritz> masak: https://perl6advent.wordpress.com/2010/12/16/day-16-time-in-perl6/

[11:34] <masak> ok.

[11:34] <masak> maybe advent blog about the :k thing replacing the -index methods?

[11:34] <nine> stmuk: upgrade panda

[11:34] <masak> (and the discussion around adverbs connected to that)

[11:35] <jnthn> airport &

[11:35] <masak> ooh! someone needs to advent blog about the one-arg rule! :)

[11:36] <masak> and maybe a separate post about GLR and its consequences in general

[11:36] <stmuk> oh I'm on the wrong branch

[11:37] *** xpen joined
[11:37] <stmuk> I need a zsh git prompt :/

[11:37] *** Spot__ left
[11:37] *** xpen left
[11:37] <masak> an advent post about the new 'with' keyword

[11:38] <grondilu> btw what's the status on perl6pod?  Will the synopsis be written in 6pod someday?

[11:38] *** xpen joined
[11:38] <stmuk> I could probably do a GLR post if someone code reviews it first :)

[11:38] <masak> an advent post about the more liberal and more useful when/default semantics

[11:39] <masak> (inspired by real-world usage!) :D

[11:39] *** Spot__ joined
[11:39] <Zoffix> ugexe, would it make more sense to list your travis file in https://github.com/ugexe/P6TCI on https://docs.travis-ci.com/user/languages/perl6/ instead? This way it'll be more visible and not in an unrelated repo...

[11:39] *** mprelude left
[11:39] <masak> an advent post about Levenshtein-based error messages.

[11:41] <masak> a post about various IO improvements?

[11:42] * Zoffix lols...

[11:42] <stmuk> newio :>

[11:42] <Zoffix> Yak shaving? And for a second I thought we were doing P6 tuts :P

[11:42] * stmuk trolls

[11:44] <Zoffix> Hm. I wanna sign up, to this advent thing, but I fear what I talk about will be so dumb, compared to other posts.

[11:44] <Zoffix> 'cause I don't know much P6

[11:44] <stmuk> it's a good chance to learn

[11:44] <RabidGravy> not as dumb as mine will be ;-)

[11:44] <Zoffix> I suppose.

[11:44] <dalek> mu: 3b0f0ff | (Steve Mynott)++ | misc/perl6advent-2015/schedule:

[11:44] <dalek> mu: claim GLR

[11:44] <dalek> mu: review: https://github.com/perl6/mu/commit/3b0f0ffb43

[11:44] <stmuk> I'll regret that :/

[11:44] <masak> Zoffix: we are pretty good at reviewing each others' posts

[11:45] <masak> stmuk++

[11:45] <Zoffix> Very well, I'll take the 13th

[11:46] * stmuk maybe the Dec 25th post should be a UUENCODED release tar

[11:47] <dalek> mu: 4bc3831 | (Zoffix Znet)++ | misc/perl6advent-2015/schedule:

[11:47] <dalek> mu: 13 IRC and Robots - Zoffix

[11:47] <dalek> mu: review: https://github.com/perl6/mu/commit/4bc3831580

[11:48] <Zoffix> Since I'll be writing my New Years bot anyway... 

[11:48] <Zoffix> (and there will be more other robots)

[11:48] * masak secretly hopes that someone with a big cowboy hat claims 24th

[11:48] <masak> Zoffix++

[11:49] <masak> I want to recommend https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d from last week. not Perl 6-specific, but very interesting about PRNGs.

[11:49] <masak> also, made me wonder how good MoarVM's PRNG is... :)

[11:50] <stmuk> there is some PRNG audit library to check that which plots random points 

[11:51] *** burnersk joined
[11:52] *** TEttinger joined
[11:55] <dalek> mu: 1120076 | (Zoffix Znet)++ | misc/perl6advent-2015/schedule:

[11:55] <dalek> mu: rename post

[11:55] <dalek> mu: review: https://github.com/perl6/mu/commit/11200761fd

[11:55] <Zoffix> There, now we have mystery, innuendo, and alliteration :P

[11:57] <dalek> mu: aadf5e9 | moritz++ | misc/perl6advent-2015/schedule:

[11:57] <dalek> mu: Add missing author information (infered by "git blame")

[11:57] <dalek> mu: review: https://github.com/perl6/mu/commit/aadf5e911a

[11:58] *** zakharyas left
[11:59] <masak> ooh! ooh! nine, please make an advent post where you blow all our socks off by combining Perl 5 and Perl 6 in yet another amazing way :)

[12:01] <dalek> mu: 197b1d0 | (Nigel Hamilton)++ | misc/perl6advent-2015/schedule:

[12:01] <dalek> mu: Nigel Hamilton (aka Trexy) volunteering for the 20th.

[12:01] <dalek> mu: review: https://github.com/perl6/mu/commit/197b1d09a3

[12:01] <dalek> mu: 01dcf7b | (Nigel Hamilton)++ | misc/perl6advent-2015/schedule:

[12:01] <dalek> mu: Merge branch 'master' of https://github.com/perl6/mu

[12:01] <dalek> mu: review: https://github.com/perl6/mu/commit/01dcf7bac4

[12:01] <dalek> mu: 50173d9 | (Nigel Hamilton)++ | misc/perl6advent-2015/schedule:

[12:01] <dalek> mu: Merge branch 'master' of https://github.com/perl6/mu

[12:01] <dalek> mu: review: https://github.com/perl6/mu/commit/50173d985a

[12:02] <Skarsnik> I am tempted to do a small thing about NC but I am bad, and I already have too much stuff to do x)

[12:02] <dalek> mu: d10d7b8 | (Zoffix Znet)++ | misc/perl6advent-2015/schedule:

[12:02] <dalek> mu: Change title again: 13th "Going Raw with Rogue Robots" - Zoffix

[12:02] <dalek> mu: review: https://github.com/perl6/mu/commit/d10d7b81e6

[12:02] <moritz> Skarsnik: NC?

[12:02] <Zoffix> NativeCall

[12:02] <Skarsnik> NativeCall

[12:02] <masak> NativeCall

[12:02] <Skarsnik> damn Zoffix too fast

[12:03] <masak> that's a good thing if you're doing NativeCall :P

[12:03] <moritz> Skarsnik: you can try to write a post, and only claim a spot when you're confident that it works out

[12:03] <moritz> anybody who can't log in on https://perl6advent.wordpress.com/wp-admin/ but wants to write an advent post, please /msg me your email address

[12:04] <masak> moritz++

[12:04] <moritz> I'll invite you with the necessary privileges

[12:05] *** moznion left
[12:06] *** moznion joined
[12:08] *** ggoebel7 left
[12:09] *** ggoebel7 joined
[12:11] *** eiro left
[12:14] *** cognominal_ joined
[12:15] *** Exodist left
[12:17] *** eiro joined
[12:19] *** eiro left
[12:19] *** burnersk left
[12:19] *** domidumont left
[12:19] <cognominal_> m: say :(:a).WHAT

[12:19] <camelia> rakudo-moar 7b7888: OUTPUT«(Pair)␤»

[12:20] <cognominal_> m: sub foo(:a) {}

[12:20] <camelia> rakudo-moar 7b7888: OUTPUT«5===SORRY!5=== Error while compiling /tmp/93jQNq0fT4␤Missing block␤at /tmp/93jQNq0fT4:1␤------> 3sub foo(:7⏏5a) {}␤»

[12:21] <cognominal_> m: sub foo(666) { say "evil" }; foo 666

[12:21] <camelia> rakudo-moar 7b7888: OUTPUT«evil␤»

[12:22] *** Ven joined
[12:22] <cognominal_> why the pair :a is not accept as a parameter?

[12:22] <Skarsnik> :$a

[12:23] *** lucasb joined
[12:23] <cognominal_> I don't want to bind a parameter variable, just use it like I did with 666.

[12:23] <Skarsnik> foor(:a) means set the a named parameter to True

[12:23] *** kid51 joined
[12:24] <masak> cognominal_: good question.

[12:24] *** eiro joined
[12:24] *** burnersk joined
[12:24] *** domidumont joined
[12:24] <masak> cognominal_: I can't think clearly about it, but maybe it collides with some other syntax?

[12:24] <FROGGS> masak: hmm, can't imagine that

[12:24] <cognominal_> writing an article, I am testing all sort of edge cases

[12:24] <masak> cognominal_: if it doesn't, then what you say makes sense to me

[12:24] <masak> cognominal++

[12:24] *** donaldh left
[12:27] <cognominal_> m: :( :$a )

[12:27] <camelia> rakudo-moar 7b7888: ( no output )

[12:28] *** ShimmerFairy joined
[12:29] *** burnersk left
[12:29] <ShimmerFairy> [backlog] I can't imagine why  sub foo(:a) { }  should declare a variable, since when has :a done something like that? Is it sigilless, does it get an implied $a, would it affect :a($a-long-opt), etc.

[12:31] <cognominal_> you mean, it except a subsignature or something like that?

[12:31] *** hartenfels joined
[12:31] *** Peter_R joined
[12:31] <ShimmerFairy> :a($a-long-opt) is how you make -a and --a-long-opt for sub MAIN, for example

[12:31] <masak> ShimmerFairy: I didn't get the sense that cognominal_ wanted to declare a variable.

[12:32] <ShimmerFairy> masak: then why was it used is a sub declaration?

[12:32] *** burnersk joined
[12:32] <lucasb> he wanted to pattern match it with a value

[12:32] <masak> ShimmerFairy: because he wanted to sigbind on the *presence* of an :a parameter, but didn't care about its value

[12:32] <cognominal_> like my evil sub, to pattern match

[12:33] *** sufrostico joined
[12:33] <masak> either that, or he wanted to match on :a(True), I dunno

[12:33] <masak> cognominal_: which one did you intend? :)

[12:33] <cognominal_> masak: well it tests the value otherwise

[12:33] <ShimmerFairy> I hate our actually-ternary "boolean" named params :)

[12:33] <cognominal_> m: sub foo(666) {}; foo 42

[12:33] <camelia> rakudo-moar 7b7888: OUTPUT«Constraint type check failed for parameter '<anon>'␤  in sub foo at /tmp/UAaykgUEjH:1␤  in block <unit> at /tmp/UAaykgUEjH:1␤␤»

[12:34] *** TEttinger left
[12:34] <masak> cognominal_: in `sub foo(:a) {}; foo(:a(False))`, would you expect successful sigbinding?

[12:34] <cognominal_> m: sub foo(666 $a) { say $a}; foo 666  # not useful, just trying

[12:34] <camelia> rakudo-moar 7b7888: OUTPUT«666␤»

[12:34] <Skarsnik> sub foo(:$a where $a = True) {say "true"}; sub foo(:$a where $a = False) { say "false"}; foo(:a);

[12:35] <Skarsnik> m: sub foo(:$a where $a = True) {say "true"}; sub foo(:$a where $a = False) { say "false"}; foo(:a);

[12:35] <camelia> rakudo-moar 7b7888: OUTPUT«5===SORRY!5=== Error while compiling /tmp/e5PeG20ZeN␤Redeclaration of routine foo␤at /tmp/e5PeG20ZeN:1␤------> 3foo(:$a where $a = False) { say "false"}7⏏5; foo(:a);␤    expecting any of:␤        horizontal whitespace␤        postfix…»

[12:35] <ShimmerFairy> masak: I think the issue here is that matching against 666 is matching against a value, while :a is matching against a variable name, so I don't think they're actually comparable cases.

[12:35] <lucasb> m: say my (1,2,3)  # just crazy :)

[12:35] <camelia> rakudo-moar 7b7888: OUTPUT«(Any)(Any)(Any)␤»

[12:36] <Skarsnik> hm, I don't get my error x)

[12:36] <Skarsnik> aside it should be $a == True probably

[12:36] <cognominal_> :a is not a variable, it is the pair  a => True

[12:37] <cognominal_> it is a value and I want to pattern match against the value.

[12:37] <ShimmerFairy> Skarsnik: you need 'multi sub'

[12:37] <RabidGravy> the best I can do is 

[12:37] <RabidGravy> m: sub foo(Pair $ where *.key eq "a" ) { }; foo("a" => True)

[12:37] <camelia> rakudo-moar 7b7888: ( no output )

[12:37] <Skarsnik> Oh I did not see the first part

[12:37] <ShimmerFairy> cognominal_: it's not a Pair object, it's just a named parameter, which is a subtle, annoying, and important

[12:38] <Skarsnik> m: multi sub foo(:$a where $a = True) {say "true"}; multi sub foo(:$a where $a = False) { say "false"}; foo(:a);

[12:38] <camelia> rakudo-moar 7b7888: OUTPUT«true␤»

[12:38] <Skarsnik> m: multi sub foo(:$a where $a = True) {say "true"}; multi sub foo(:$a where $a = False) { say "false"}; foo(:a(False));

[12:38] <camelia> rakudo-moar 7b7888: OUTPUT«Cannot call foo(:!a); none of these signatures match:␤    (:$a where { ... } = { ... })␤    (:$a where { ... } = { ... })␤  in block <unit> at /tmp/9_m0gMvbso:1␤␤»

[12:38] <ShimmerFairy> also, I believe the equality test is ==, not =  :)

[12:38] <cognominal_> ShimmerFairy, it may want to parse as a named parameter but it is not one.

[12:38] <Skarsnik> m: multi sub foo(:$a where $a == True) {say "true"}; multi sub foo(:$a where $a == False) { say "false"}; foo(:a(False));

[12:38] <camelia> rakudo-moar 7b7888: OUTPUT«false␤»

[12:38] <ShimmerFairy> (or rather === for us)

[12:38] <Skarsnik> m: multi sub foo(:$a where $a == True) {say "true"}; multi sub foo(:$a where $a == False) { say "false"}; foo(:a(True));

[12:38] <camelia> rakudo-moar 7b7888: OUTPUT«true␤»

[12:39] <ShimmerFairy> cognominal_: doesn't really matter what you want, unfortunately. In this case it is a named parameter.

[12:39] <Skarsnik> I did not think the contraint was part of the signature

[12:39] <masak> cognominal_: I just want to note that I disagree with ShimmerFairy's reasoning on this one. :)

[12:39] <cognominal_> what surprises me is that :( :a ) parses correctly but not foo(:a) {}

[12:39] <masak> cognominal_: and I think your use case is sound (if a bit unusual)

[12:40] <cognominal_> definitvely unusual :)

[12:40] <lucasb> so, in other words, P6 can pattern match against all other values, *except* pair values... right?

[12:40] <masak> cognominal_: I could see it working quite well in multi MAIN parameter lists

[12:40] <cognominal_> as I said I probe edge cases.

[12:40] <cognominal_> lucasb: strange indeed :)

[12:40] <ShimmerFairy> m: sub classify-pairs(*@a, *%b) { say "PAIR: @a[]\nNAMEDS: %b<>" }; classify-pairs(1 => 2, :a, "B" => True, b => True);

[12:40] <camelia> rakudo-moar 7b7888: OUTPUT«PAIR: 1      2 B     True␤NAMEDS: a  True␤b  True␤»

[12:41] <ShimmerFairy> masak: AFAICT, this is the named/pair issue that I and lizmat have complained about before, so note that I'm not agreeing. I still think the conflation of named params and Pairs in syntax is a mistake, and this shows why :)

[12:42] <cognominal_> m: say :(:a)[0]  # more edgy

[12:42] <camelia> rakudo-moar 7b7888: OUTPUT«a => True␤»

[12:42] <ShimmerFairy> m: sub classify-pairs(*@a, *%b) { say "PAIR: @a[]\nNAMEDS: %b<>" }; classify-pairs(a => 1, 1 => 2);   # and just to show that autoquoting isn't the only rule for determining a named...

[12:42] <camelia> rakudo-moar 7b7888: OUTPUT«PAIR: 1      2␤NAMEDS: a     1␤»

[12:43] <cognominal_> so here it is a value in the positional part of the signature.

[12:45] <masak> ShimmerFairy: a big difference though is that in the above, you show named/pair differences in an *argument list*, but cognominal_'s requested use case is in a *parameter list*.

[12:45] <ShimmerFairy> cognominal_: really? That just makes it worse

[12:46] <cognominal_> I am not it. But I am not a bad guy,  just a worse guy :)

[12:47] <ShimmerFairy> m: say :(:a).list; say :(:a).pairs;

[12:47] <camelia> rakudo-moar 7b7888: OUTPUT«(a => True)␤(a => True)␤»

[12:47] *** kid51 left
[12:47] <ShimmerFairy> m: say :(:$a).list; say :(:$a).pairs;

[12:47] <camelia> rakudo-moar 7b7888: OUTPUT«((:$a))␤(0 => (:$a))␤»

[12:47] <ShimmerFairy> m: say :($z, :$a).list; say :($z, :$a).pairs;

[12:47] <camelia> rakudo-moar 7b7888: OUTPUT«(($z, :$a))␤(0 => ($z, :$a))␤»

[12:52] <RabidGravy> well I have all the existing Supply examples in the concurrency doc working

[12:53] <RabidGravy> now to get the words to make sense in the new order

[12:56] *** znpy` left
[12:59] <cognominal_> in both foo(:a)  and :(:a), the ":a"  should be a parameter of the signature rule. So what context make them behave differently?

[13:00] *** eiro left
[13:00] *** domidumont left
[13:01] *** domidumont joined
[13:01] *** eiro joined
[13:02] <ShimmerFairy> Y'know, I can't yet figure out why rakudo insists on creating a system directory now, where before I could just have modules go in ~/.perl6 and be on my merry way.

[13:03] <stmuk> RabidGravy++

[13:03] <cognominal_> [13:34]  <masak> cognominal_: in `sub foo(:a) {}; foo(:a(False))`, would you expect successful sigbinding?

[13:04] <cognominal_> I missed your question. My answer is no. That's a different value.

[13:05] <masak> cognominal_: what about `foo(:a(42))` ?

[13:05] <masak> cognominal_: what about `foo()` ?

[13:05] <lucasb> no too! because a=>True is different than a=>42 :)

[13:06] <masak> the reason I ask the last one is that nameds are optional by default

[13:07] <masak> m: sub foo(:$a) { say "see? works!" }; foo()

[13:07] <camelia> rakudo-moar 7b7888: OUTPUT«see? works!␤»

[13:07] *** burnersk left
[13:07] <El_Che> Hi, I am trying to change set the record serparator in perl6 like in perl5:

[13:07] <El_Che> this will separate records by empty lines: perl -e 'local $/ = "\n\n"; open(my $fh,"<","auth2_200"); while (<$fh>) { print "___\n" . $_ . "__\n" }'

[13:07] <cognominal_> it is not a named, it is a value used as a type.

[13:07] <El_Che> I tried this in p6, but to no avail: my $fh = open('auth2_200', nl => "\n\n"); for $fh.lines -> $line { say "___\n" ~ $line ~ '___' }

[13:08] <cognominal_> m: sub foo(666 $a) {} # the 666 here is a value used as a type in a signature.

[13:08] <camelia> rakudo-moar 7b7888: ( no output )

[13:09] <cognominal_> m: sub foo(666) {} # same thing but not parameter var is bound when called.

[13:09] <camelia> rakudo-moar 7b7888: ( no output )

[13:09] <cognominal_> * no parameter var

[13:09] <lucasb> ^^ these 2 subroutines *are* different!

[13:10] <lucasb> the last one pattern matches against 666, the first one don't

[13:10] <lucasb> m: my ('oh' $x, 'hai' $y)

[13:10] <camelia> rakudo-moar 7b7888: ( no output )

[13:10] <lucasb> that is just strange syntax that happens to be valid, but has no meaning, I think

[13:10] <cognominal_> m: sub foo(666 $a) { say $a }; foo 42

[13:10] <camelia> rakudo-moar 7b7888: OUTPUT«Constraint type check failed for parameter '$a'␤  in sub foo at /tmp/Ju3yphn8Wq:1␤  in block <unit> at /tmp/Ju3yphn8Wq:1␤␤»

[13:11] <cognominal_> m: sub foo(666 $a) { say $a }; foo 666

[13:11] <camelia> rakudo-moar 7b7888: OUTPUT«666␤»

[13:11] *** domidumont left
[13:11] <lucasb> cognominal_: oops, you are right, sorry :)

[13:11] <Skarsnik> El_Che, hm no error?

[13:11] <lucasb> I was going by the 'my' declaration...

[13:12] <cognominal_> lucasb, what is interesting is the various expectation here :)

[13:12] *** abaugher left
[13:12] <El_Che> Skarsnik: no, it separated the records on the same way as "\n"

[13:12] <El_Che> Skarsnik: so it keeps separting by line instead of by record

[13:13] *** abaugher joined
[13:13] <cognominal_> m: my ('ho' $x) = 'so bad'

[13:13] <camelia> rakudo-moar 7b7888: ( no output )

[13:14] <cognominal_> m: my 'ho' $x  = 'so bad'

[13:14] <camelia> rakudo-moar 7b7888: OUTPUT«5===SORRY!5=== Error while compiling /tmp/YGc3f1alfc␤Malformed my␤at /tmp/YGc3f1alfc:1␤------> 3my7⏏5 'ho' $x  = 'so bad'␤»

[13:14] <Skarsnik> Defaults to "EOL", which implies accepting any combination of "\n", "\r\n" or "\r" or any other Unicode character that has the Zl (Separator, Line) property.

[13:14] <Skarsnik> hm I wonder if seeing \n\n it fallback to the new line graphem

[13:14] <cognominal_> m: my ('ho' $x) := 'so bad'

[13:14] <camelia> rakudo-moar 7b7888: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/fAzYAjD8y0:1␤␤»

[13:14] <El_Che> it looks like it

[13:15] <Skarsnik> try with like an arbitrary letter?

[13:15] <Skarsnik> to see if nl work

[13:15] <El_Che> it does

[13:15] <cognominal_> m: my 'ho' $x := 'so bad'

[13:15] <camelia> rakudo-moar 7b7888: OUTPUT«5===SORRY!5=== Error while compiling /tmp/VhWoafZuOZ␤Malformed my␤at /tmp/VhWoafZuOZ:1␤------> 3my7⏏5 'ho' $x := 'so bad'␤»

[13:15] *** eiro left
[13:16] *** znpy` joined
[13:16] <El_Che> Skarsnik: single char and even strings work

[13:16] *** eiro joined
[13:17] <cognominal_> So there is also an inconstency, values as types are not syntactically accepted everywhere a type is expected.

[13:17] *** oka_ left
[13:17] <ilmari> m: my ('now' $x) = ('now', 'what')

[13:17] <camelia> rakudo-moar 7b7888: ( no output )

[13:17] <ilmari> m: my ('now' $x) := ('now', 'what')

[13:17] <camelia> rakudo-moar 7b7888: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/vCiWB3F3OP:1␤␤»

[13:17] <ilmari> m: my ('now' $x) := ('now')

[13:17] <camelia> rakudo-moar 7b7888: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/P6I8r7mxRl:1␤␤»

[13:17] <ilmari> counting is hard?

[13:17] <cognominal_> limari: :)

[13:18] <moritz> ilmari: did you mean to put a comma between the 'now' and the $x?

[13:18] <Skarsnik> El_Che, hm fill a bug on rt.perl.org or wait for someone more knowledgable of this stuff to answer x)

[13:18] <ilmari> moritz: no

[13:18] <El_Che> it looks like whenever you put a \n in the nl it ignores other chars

[13:18] <cognominal_> moritz, we are testing values used as types.

[13:19] <moritz> ah

[13:19] <ilmari> m: my (Str $x) := ('wat')

[13:19] <camelia> rakudo-moar 7b7888: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/ESq0ilqfXo:1␤␤»

[13:19] <ilmari> m: my (Str $x) := ('wat', 'now')

[13:19] <camelia> rakudo-moar 7b7888: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/2GHl1UGADQ:1␤␤»

[13:19] <cognominal_> btw, I don't neceserally complain about the inconsistency. Just noting its existence.

[13:21] <ShimmerFairy> please tell me I'm not seeing the full picture, but is src/core/Process.pm seriously setting up a %CUSTOM_LIB that nobody uses?

[13:21] *** eiro left
[13:21] *** eiro joined
[13:22] <cognominal_> Also in my ('ho $x ) := 'so bad', it should complain that 'so bad' is not 'ho'.

[13:22] <moritz> ShimmerFairy: nine++ has already announced that he'll fix that later

[13:22] *** Celelibi joined
[13:22] <cognominal_> getting deeper in the maze :(

[13:22] <ShimmerFairy> moritz: that won't fix my problem though, and it's not helping my understanding of said problem

[13:23] *** llfourn left
[13:23] *** hanekomu joined
[13:24] * cognominal_ notes he should uses tests with more positive connotations

[13:24] <ilmari> ShimmerFairy: panda uses it

[13:25] <ShimmerFairy> ilmari: it uses %*CUSTOM_LIB, which rakudo doesn't make, not %CUSTOM_LIB, which (AFAICT) nobody uses :P

[13:25] <ilmari> m: say %*CUSTOM_LIB

[13:25] <camelia> rakudo-moar 7b7888: OUTPUT«Dynamic variable %*CUSTOM_LIB not found␤  in block <unit> at /tmp/R58EOM6ANe:1␤␤Actually thrown at:␤  in block <unit> at /tmp/R58EOM6ANe:1␤␤»

[13:26] <moritz> ShimmerFairy: %CUSTOM_LIB in GLOBAL becomes %*CUSTOM_LIB

[13:26] <ilmari> PROCESS::<%CUSTOM_LIB> := %CUSTOM_LIB;

[13:26] *** burnersk joined
[13:26] <ShimmerFairy> moritz: but it's being bound to PROCESS

[13:26] <ilmari> $ p6 -e 'say %*CUSTOM_LIB'

[13:26] <ilmari> home => /home/ilmari/.perl6/2015.10-268-g31784a7, perl => /home/ilmari/.rakudobrew/moar-nom/install/share/perl6, site => /home/ilmari/.rakudobrew/moar-nom/install/share/perl6/site, vendor => /home/ilmari/.rakudobrew/moar-nom/install/share/perl6/vendor

[13:27] <lucasb> m: PROCESS::<$oh-hai> = 42; say $*oh-hai  # ShimmerFairy: PROCESS also prepends a "*"

[13:27] <camelia> rakudo-moar 7b7888: OUTPUT«42␤»

[13:27] <ShimmerFairy> moritz: the bug I'm encountering btw is the fact that trying to use non-installed libraries (e.g. those found via -I) makes perl6 want to make a world-writable system directory.

[13:28] <ShimmerFairy> lucasb: ah. I'm not familiar with cases where a wild * appears, so I wouldn't have known :P

[13:30] *** burnersk left
[13:30] <moritz> ShimmerFairy: it should try to store the precompiled files in ~/.perl6 or so

[13:31] <ShimmerFairy> oh, but it don't. Not even --target=parse will succeed :D

[13:32] <timotimo> o/

[13:33] <timotimo> RabidGravy: i'm very glad you're taking on the supply docs

[13:34] *** NativeCallUser joined
[13:34] <NativeCallUser> hi all

[13:34] <timotimo> oh hai

[13:34] <masak> hi, NativeCallUser 

[13:34] <RabidGravy> :) I was just procrastinating until I was certain that it was all settled

[13:35] <Skarsnik> Interesting name x)

[13:35] * masak .oO( I wonder what FFI he uses? )

[13:37] <RabidGravy> timotimo, the difficulty with the new Supply world order is that there are too many ways to do the same examples ;-)

[13:37] *** xpen left
[13:37] <NativeCallUser> A question about NativeCall and Win32 API. I read the NativeCall manual and tried the example with MessageBox and it works. So I want to use the Win32 API function GetCursorPos. The function signature is  '__Out__ LPPOINT lppoint'. and the return value 'BOOL WINAPI'. Both is not mentioned in the NativeCall help. Someone an idea what to write here?

[13:37] *** rindolf left
[13:39] *** kjs_ joined
[13:39] <RabidGravy> well they won't be mentioned as they are application specific, for the LPPOINT you will be looking at a CStruct I guess and BOOL maybe an int8 maybe something else

[13:39] <stmuk> ufo++ # can be hacked up to work as a fallback

[13:40] <RabidGravy> you will need to find out from the windows api documentation

[13:40] <NativeCallUser> I tried Pointer[CArray]. 

[13:40] *** eiro left
[13:40] *** eiro joined
[13:40] *** ShimmerFairy left
[13:40] <FROGGS> NativeCallUser: sub GetCursorPos(CArray) returns uint8 { * }; my $lppoint = CArray.new; $lppoint[0] = 0; say GetCursorPos($lppoint); say $lppoint[0]

[13:41] <FROGGS> NativeCallUser: something like that

[13:41] <NativeCallUser> Win API said a pointer to a POINT struct.

[13:41] <Skarsnik> NativeCallUser, bool is probably unsigned char so try int8. for llpoint no idea what it's supposed to be x)

[13:41] <dalek> ecosystem: 9ffffb6 | Demayl++ | META.list:

[13:41] <dalek> ecosystem: Add Email::Valid

[13:41] <dalek> ecosystem: 

[13:41] <dalek> ecosystem: See https://github.com/Demayl/perl6-datetime-format

[13:41] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9ffffb62d6

[13:41] <dalek> ecosystem: dd57afa | (Zoffix Znet)++ | META.list:

[13:41] <dalek> ecosystem: Merge pull request #97 from Demayl/master

[13:41] <dalek> ecosystem: 

[13:41] <dalek> ecosystem: Add Email::Valid: https://github.com/Demayl/perl6-Email-Valid/

[13:41] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/dd57afa4db

[13:41] <Skarsnik> just do OpaquePointer then

[13:41] <Skarsnik> *use

[13:42] <RabidGravy> class LPPOINT is repr('CStruct') { has int32 $.x; has int32 $.y; }

[13:42] <FROGGS> Skarsnik: we can merge the bool stuff today when I got time, though I want to modify your PR before merging it

[13:42] <RabidGravy> google is your friend

[13:42] <FROGGS> ohh

[13:43] <RabidGravy> (those longs may be int64 depending on the actual OS long int size I guess)

[13:44] <Skarsnik> nc as the long type I think

[13:44] *** abaugher left
[13:44] <timotimo> that'? right

[13:44] <timotimo> that's right, i mean.

[13:45] <NativeCallUser> @all thanks for the help

[13:45] <Skarsnik> FROGGS, I try to think a bit more about the bool, but only rakudo has a configure stuff?

[13:46] *** burnersk joined
[13:46] <FROGGS> Skarsnik: we've got build/probe, which is what I prefer to #ifdefs

[13:46] *** abaugher joined
[13:46] <Skarsnik> *self promotion* You can try NativeCall::TypeDiag when trying to figure how to map cstruct

[13:46] *** ggoebel7 left
[13:46] <stmuk> oh that sounds useful

[13:47] *** YP-QMUL-W joined
[13:48] <Skarsnik> FROGGS, configure.pl refuse to work on my forked repository (it try to git upstream). that why I can't never test this code directly in my fork ~~

[13:48] <garu> hi everyone! I'm having some trouble updating my perl6 installation with rakudobrew + panda => http://paste.scsys.co.uk/502180

[13:48] <timotimo> how do typical json parsers handle string literals starting in a combining character?

[13:48] *** YP-QMUL-W left
[13:48] *** Celelibi left
[13:48] *** hartenfels left
[13:49] <timotimo> garu: you'll have to nuke your install/ folder under .rakudobrew/moar-nom/ i'm afraid

[13:49] <timotimo> garu: we just merged the magical curli branch and were under too much time pressure to put in proper deprecation stuff and such

[13:50] <garu> timotimo: I was thinking about it but thought I'd rather show this to you first

[13:50] <garu> maybe I can help?

[13:50] <timotimo> yup, it's okay

[13:50] <timotimo> i don't know unfortunately

[13:50] *** aigan left
[13:50] <NativeCallUser> RabidGravy++ your hint with the class was the right one. It works :-)

[13:50] <RabidGravy> Yay!

[13:51] <garu> that's fine, I'll just reinstall - you keep doing all the great stuff you've been doing! :D

[13:51] <Skarsnik> Ooh curli is merged, nice

[13:51] <stmuk> garu: you could try specifying an older version of rakudo and panda and waiting maybe 2 days

[13:52] <stmuk> garu: you can pass sha1 hashs into rakudobrew

[13:52] *** ShimmerFairy joined
[13:53] <garu> stmuk: naah, it's fine, really. Just thought if it was simple enough that maybe I could help in some ways. You know, clear the path so you can keep working on making things awesome for christmas :)

[13:53] <timotimo> damn, i must have thrown away that big json file i used for performance analysis of JSON::Fast

[13:53] *** Ven left
[13:53] <garu> but if it's a known issue with not enough value to be fixed, I'll just reinstall and be happy

[13:54] <stmuk> its a major change which isn't fully changed yet

[13:55] <Skarsnik> timotimo, profile a big perl6 script and use the ouput json as test? x)

[13:55] <timotimo> omg.

[13:55] <timotimo> well, i want to improve the nom-ws function ... the profiler doesn't output any additional whitespace whatsoever

[13:55] *** n0xff left
[13:55] <garu> timotimo: maybe this helps? https://raw.githubusercontent.com/zemirco/sf-city-lots-json/master/citylots.json

[13:56] <timotimo> http://mtgjson.com/ - using some of those now

[13:56] *** zacts left
[13:57] *** NativeCallUser left
[13:57] <timotimo> hm, i'll have to pretty print that first

[13:57] <timotimo> it's also devoid of whitespace

[13:58] <timotimo> ugh, these precomp file paths are really ugly for our profiler UI

[14:00] <timotimo> hum. nom-ws only takes 8.3% of the time when reading AllCards.json (with added whitespace)

[14:00] <tadzik> ooh, mtgjson

[14:01] <garu> timotimo: citylots.json is 181M large and pretty-printed (with whitespaces and such)

[14:02] <garu> anyway, let me get back to reinstalling moar-nom

[14:02] <garu> thanks everyone!

[14:02] *** emdashcomma left
[14:03] <timotimo> :)

[14:03] *** ggoebel7 joined
[14:04] <timotimo> garu: sadly, AllCardsWhitespace.json (which i generated with json_reformat) already takes 15s to parse

[14:04] <timotimo> grr. i don't want to have a block inside nom-ws, but i can't have CATCH without curlies

[14:06] <moritz> use try without block

[14:06] <timotimo> i fear that'll be slower, though

[14:06] <timotimo> i will measure.

[14:07] <timotimo> yeah, makes the whole thing 5s slower :(

[14:07] <garu> try? You mean as a keyword? I thought it didn't exist (can't see it in http://docs.perl6.org/language/exceptions)

[14:07] <timotimo> it does

[14:07] <garu> sorry, I don't want to sidetrack you

[14:08] <garu> nevermind me!

[14:08] <timotimo> no worries

[14:08] <timotimo> moritz: changing the code to use try accidentally prevented jit compilation of nom-ws

[14:08] *** ShimmerFairy left
[14:08] *** burnersk left
[14:08] <moritz> :(

[14:09] <timotimo> but nom-ws won't get much better than this. it's already comparatively cheap

[14:10] <timotimo> do you want to know how long JSON::Tiny takes? :P

[14:11] <moritz> yes

[14:11] <timotimo> i'm measuring it now

[14:11] <moritz> you can tell me tomorrow :-)

[14:11] <timotimo> get yourself a cup of coffee and a few books or solitaire games! :P

[14:12] <timotimo> 1:19.74

[14:12] <moritz> wow

[14:13] <timotimo> m: say "JSON::Fast was able to get it in { (60 + 19.74) R/ 15.08 } of the time"

[14:13] <camelia> rakudo-moar 7b7888: OUTPUT«JSON::Fast was able to get it in 0.189115 of the time␤»

[14:13] <timotimo> i expect any "real" json parser would do this in a milisecond instead

[14:15] <timotimo> the memory usage of JSON::Fast was also quite a bit better

[14:15] <timotimo> m: say "::Fast took { 231452 / 931076 }x as much memory "

[14:15] <camelia> rakudo-moar 7b7888: OUTPUT«::Fast took 0.2485855x as much memory ␤»

[14:16] <timotimo> not really proud of the fact moar balloons up to 230 MB to parse a 8.2 MB json file ...

[14:16] <tadzik> looks like you at least have some decent profiling material now :)

[14:17] <masak> I'm running a home-brewed coverage tool on the 007 source code. been running it for about 3 consecutive days.

[14:18] <timotimo> thing is, the function that parses a string takes far too many closures :(

[14:18] *** lucasb left
[14:19] *** oka_ joined
[14:19] <dalek> perl6-roast-data: b9876ee | coke++ | / (9 files):

[14:19] <dalek> perl6-roast-data: today (automated commit)

[14:19] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b9876ee746

[14:19] <El_Che> at the moment I am making my VM swap, slurping a 140MB ldif dump and putting it into a hash :)

[14:19] *** hartenfels joined
[14:20] <timotimo> masak: how did you build it?

[14:20] <timotimo> tadzik: 4924342 BOOTCode objects allocated from the parse_string function's inner loop alone

[14:20] <Woodi> El_Che: with Perl6 ? :)

[14:20] <El_Che> Woodi: yep :)

[14:20] <timotimo> but also: 4924342 Int objects

[14:21] <tadzik> hm

[14:21] <timotimo> i'm not entirely sure why those aren't natives, tbh

[14:21] <tadzik> sounds like it could use an Int table of sorts

[14:21] <tadzik> or that

[14:21] <timotimo> we do have an Int table built-in, but only for small ints

[14:22] *** ggoebel7 left
[14:22] <masak> timotimo: it's just a Perl 6 script that goes through the code base line by line, and checks if things build and pass the tests without that line. https://github.com/masak/007/blob/fuzzer/tools/fuzzer

[14:23] *** kivutar joined
[14:23] <masak> timotimo: it's only a little bit clever, in that it knows that a line begins a block, it removes the whole block

[14:23] <RabidGravy> would it be fair to say that "supply { }" is pretty much sugar for "Supply.on-demand({})" ?

[14:24] <masak> timotimo: it's already found a number of pieces of the code that simply didn't do anything. :)

[14:26] *** domidumont joined
[14:26] <timotimo> oh, cute!

[14:27] <timotimo> tadzik: turns out spesh isn't clever enough yet to remove the p6bool before eq's return, even after inlining

[14:27] <timotimo> tadzik: so all the "eq" operators that check for weird stuff will actually box an int (which is what Bool now is)

[14:28] *** burnersk joined
[14:28] <ilmari> m: Bool.^mro.say

[14:28] <camelia> rakudo-moar 7b7888: OUTPUT«((Bool) (Int) (Cool) (Any) (Mu))␤»

[14:28] <tadzik> masak: hah, that's not very far from mutation testing :)

[14:28] <ilmari> oh, I thought it was an Enum?

[14:28] <tadzik> timotimo: oh gawd

[14:29] *** balazs joined
[14:29] <masak> tadzik: I think I was inspired by that, yes.

[14:29] <masak> tadzik: I may decide to try some mutation testing, too. but "removed lines" was the lowest-hanging fruit.

[14:29] <tadzik> right

[14:29] <tadzik> and doesn't require AST mangling :)

[14:29] <masak> no, but I'd like for it to know the AST better :)

[14:30] * masak .oO( someone should specify a format for that )

[14:32] <timotimo> ilmari: enums are Int by default. Bool used to be "not a true Enum" for a long time, because of bootstrap difficulties

[14:33] <ilmari> timotimo: ah

[14:34] <masak> oh, that's fixed now?

[14:34] <masak> whoever++

[14:35] <masak> 007 solved that issue by omitting Bool; it only has Int ;)

[14:35] <masak> though if/when 007 gets enums, it'll probably also get a real Bool

[14:35] <timotimo> that satisfying feeling when you fix the problem and the problem is still there ... >_>

[14:36] <masak> why is the problem still there?

[14:36] <[Coke]> panda borkage with r-latest, even after removing ~/.perl6

[14:37] <timotimo> masak: good question!

[14:37] <timotimo> i'm investigating

[14:37] <[Coke]> Could not find Panda:ver<True>:auth<True>:api<True> in: /Users/williamcoleda/.perl6/2015.11-292-g7b78887

[14:37] <hartenfels> I just meant to post that too.

[14:38] <hartenfels> Same error in panda, despite full reinstall and rm -rf ~/.perl and adding install/share/perl6/site/bin to PATH.

[14:38] <masak> timotimo: I should have asked, rather, "what is it that you see that constitutes the problem still being there?" :)

[14:39] *** moznion left
[14:39] <nine> [Coke]: can you gist panda's boostrap output?

[14:39] <lizmat> .botsnack

[14:39] <yoleaux> :D

[14:39] *** ZoffixW joined
[14:40] *** skaji left
[14:40] <ZoffixW> Do we have a large version of Camelia with transparent background? Like this one, but larger: http://perl6.org/camelia-logo.png

[14:40] *** abaugher_ joined
[14:41] *** abaugher left
[14:41] <timotimo> hm, i somehow get to 12.9s now

[14:41] *** kivutar left
[14:41] *** Skarsnik left
[14:41] *** dakkar left
[14:41] <timotimo> masak: the profile showed lots and lots of Int allocations still

[14:41] <timotimo> those are gone now \o/

[14:41] *** Axord left
[14:42] <timotimo> 262 GC runs now instead of the ~310 as before

[14:42] *** znpy` left
[14:43] <havenwood> ZoffixW: https://upload.wikimedia.org/wikipedia/commons/8/85/Camelia.svg

[14:43] <ZoffixW> Thanks.

[14:44] <masak> timotimo: cool!

[14:45] *** Some-body_ joined
[14:45] *** DarthGandalf left
[14:45] *** Some-body_ is now known as DarthGandalf

[14:45] <ZoffixW> Does anyone hate the modern look on https://perl6advent.wordpress.com/ ? Sadly WP doesn't let you edit almost everything... unless you pay them. I'm tempted to revert back to the old, cuter look—too bad it's so narrow and not mobile-friendly.

[14:46] *** zakharyas joined
[14:46] <leedo> personally, i like it more than the previous layout

[14:47] <timotimo> masak: can hardly feel the improvement so far :\

[14:47] <timotimo> it feels like i'm fighting an impossible battle

[14:47] <timotimo> no matter how good i micro-optimize this, it'll still be 100x slower than what people expect

[14:48] <ZoffixW> :(

[14:48] <timotimo> or rather, even if i get it to be 100x faster, people will be all like "you call this JSON::Fast ?!?!"

[14:48] *** khw joined
[14:51] <masak> timotimo: I promise not to be all like that :P

[14:52] <masak> timotimo: I will be all like "whoa! you made it 100x faster! here, have a beer!"

[14:52] *** hobbs left
[14:52] *** pnu left
[14:52] *** solarbunny left
[14:52] *** ponpon is now known as ponbiki

[14:53] <timotimo> haha

[14:53] <timotimo> hm, today's improvements were a bit better than i felt them to be

[14:53] <[Coke]> ZoffixW: no hate, no.

[14:53] *** retupmoc_ is now known as retupmoca

[14:53] <MadcapJake> ZoffixW: any way to get some more color when viewing an article?

[14:53] <timotimo> m: say "got down to { 12.65 / 16 }x as much time as before"

[14:53] <camelia> rakudo-moar 7b7888: OUTPUT«got down to 0.790625x as much time as before␤»

[14:54] <timotimo> 20%? that's way more than i thought

[14:55] <[Coke]> arglebargle. failure mode has now changed to reflect the "doesn't work great with http proxy" issue.

[14:55] <jdv79> well, if my clone ever completes i'll volunteer for some advent slots...  how big is that repo?

[14:55] <ZoffixW> oh gawds... I forgot the name of the original theme.. Dyrson, Dyson, Dysron.. something :S

[14:55] <Woodi> timotimo: 21% even. what is new % if thing need to be 100x faster ? ;)

[14:55] <[Coke]> Could not download module metadata: Failed to resolve host name

[14:55] <ZoffixW> MadcapJake, well, yes, if the article author adds a header pic

[14:55] <[Coke]> jdv79: you can edit a file via the github web ui.

[14:55] <MadcapJake> ah ok that's cool then!

[14:55] <jdv79> oh...

[14:55] <Woodi> btw. is there some algoritm to parse JSON ?

[14:56] <timotimo> m: say "needs to be { 16 / 100 }s, is 12.6s. still { (16 / 100) / 12.6 }x to optimize down to."

[14:56] <camelia> rakudo-moar 7b7888: OUTPUT«needs to be 0.16s, is 12.6s. still 0.012698x to optimize down to.␤»

[14:56] <abraxxa> http://rakudo.org/2015/11/28/announce-rakudo-star-release-2015-11-now-in-beta/ contains a typo is anyone likes to fix it: 'since the ast Rakudo Star release' should be 'last'

[14:57] <timotimo> tadzik: maybe you want to include the last JSON::Fast commit in panda?

[14:58] <timotimo> m: say "JSON::Tiny used to be { (60 + 19.74) / 16 }x slower than JSON::Fast. now that ratio is { (60 + 19.74) / 12.6 }x"

[14:58] <camelia> rakudo-moar 7b7888: OUTPUT«JSON::Tiny used to be 4.98375x slower than JSON::Fast. now that ratio is 6.328571x␤»

[14:58] <ZoffixW> man. I could use a git history or something right now -_

[14:58] <[Coke]> 'make test' on JVM very broken.

[14:59] *** Axord joined
[14:59] <ZoffixW> Wait.

[14:59] *** znpy` joined
[14:59] <[Coke]> nine: ah. the error is hugely different between bootstrap and rebootstrap

[14:59] <ZoffixW> Oh, I thought [Coke] said they hate it.

[15:00] <dalek> mu: b6ce0b5 | jdv79++ | misc/perl6advent-2015/schedule:

[15:00] <dalek> mu: add cpan for advent on 22

[15:00] <dalek> mu: review: https://github.com/perl6/mu/commit/b6ce0b5164

[15:00] <[Coke]> bootstrap gives me the host name error (because no http proxy support out of the box)

[15:00] <abraxxa> please don't start the ::Tiny and ::Fast war already!

[15:00] <timotimo> jdv79: cool :)

[15:00] <[Coke]> ZoffixW: I am coke, and I did not say that.

[15:00] <moritz> it's not a war

[15:00] <jdv79> hopefully installing will work by then

[15:00] <timotimo> abraxxa: there is no war here; you either want performance or you want readable code :)

[15:00] <moritz> ist's simply optimizing for differnt things

[15:00] <ZoffixW> [Coke], yeah, misparse on my part :)

[15:00] <ZoffixW> .oO( I am Commander Sheppard and I support this store... )

[15:00] <[Coke]> jeez, and now the rebootstrap error has changed:

[15:01] <jdv79> [Coke]: thanks.  much faster.

[15:01] <[Coke]> https://gist.github.com/coke/b2ce9de03b57c475777d

[15:02] <hartenfels> [Coke]: I had that error before, rm -rf ~/.perl6 fixed it I think.

[15:02] <[Coke]> hartenfels: as I said, that didn't help.

[15:02] <hartenfels> Oh, you already re-tried it after this error?

[15:03] <[Coke]> but there's probably no point in trying to fix the other things if I'm still stuck behind an http proxy.

[15:03] <abraxxa> timotimo: performance

[15:03] <abraxxa> readable code can be compiled to performing code

[15:03] <timotimo> yeah ... at some point :)

[15:03] <timotimo> you're free to work on the compiler, optimizer and spesh! :)

[15:04] <masak> decommute &

[15:05] <nine> [Coke]: I suspect, that rebootstrap is kind of obsolete, since you won't have to reinstall the modules after upgrading rakudo anymore.

[15:05] *** skids joined
[15:06] *** hobbs joined
[15:06] *** pnu joined
[15:06] *** solarbunny joined
[15:06] <hartenfels> Panda be working for me again at least.

[15:08] <dalek> rakudo/nom: 0862289 | (Stefan Seifert)++ | src/core/Process.pm:

[15:08] <dalek> rakudo/nom: Store CompUnit::Repositories in %*CUSTOM_LIB

[15:08] <dalek> rakudo/nom: 

[15:08] <dalek> rakudo/nom: This makes the CompUnit::Repository objects easily available in panda

[15:08] <dalek> rakudo/nom: for more intelligent picking of the target repository.

[15:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0862289242

[15:09] <nine> Now all that's missing is a trivial patch to panda to check %*CUSTOM_LIB<site>.can-install and use that preferrably

[15:11] <dalek> rakudo/nom: 266f5d2 | lizmat++ | src/core/Str.pm:

[15:11] <dalek> rakudo/nom: Make Str.samespace about 50x faster

[15:11] <dalek> rakudo/nom: 

[15:11] <dalek> rakudo/nom: Which should have noticeable effects on ss/.../.../

[15:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/266f5d2e2c

[15:11] <timotimo> oooh, shiny! 50x!

[15:13] <ZoffixW> lizmat++

[15:13] <RabidGravy> more! whip the hamsters harder!

[15:14] *** hobbs left
[15:14] *** pnu left
[15:14] *** solarbunny left
[15:18] * lizmat just noticed the new perl6advent theme mangles paragraph headers into uppercase

[15:18] <lizmat> which makes paragraph headers like ":exists" turn up as the incorrect and confusing :EXISTS

[15:18] <ZoffixW> lizmat, I'm changing it. I kinda hate it.

[15:19] <lizmat> e.g.https://perl6advent.wordpress.com/2013/12/12/day-12-slicing-with-adverbs-the-only-way/

[15:19] <ZoffixW> I just wish Wordpress theme browser weren't so annoying.

[15:19] <timotimo> i notice we don't have anything to give us low-level || and && on int vars

[15:19] <timotimo> not sure how to tease something good out of our current compiler for that

[15:20] <timotimo> oh, actually, that's not really about the candidates we have in the setting

[15:21] <dalek> rakudo/nom: 9848c20 | grondilu++ | src/core/native_array.pm:

[15:21] <dalek> rakudo/nom: use a Seq for permutations

[15:21] <dalek> rakudo/nom: 

[15:21] <dalek> rakudo/nom: use a proper iterator, with the lexicographic method.  See:  L<https://en.wikipedia.org/wiki/Permutation#Generation_in_lexicographic_order>

[15:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9848c20bf6

[15:21] <dalek> rakudo/nom: 43c3ab9 | grondilu++ | src/core/native_array.pm:

[15:21] <dalek> rakudo/nom: remove unnecessary die line

[15:21] <dalek> rakudo/nom: 

[15:21] <dalek> rakudo/nom: as suggested by psch on IRC

[15:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/43c3ab928d

[15:21] <dalek> rakudo/nom: db5397e | grondilu++ | src/core/native_array.pm:

[15:21] <dalek> rakudo/nom: use :end in permutations

[15:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/db5397e6b8

[15:21] <dalek> rakudo/nom: b71084b | grondilu++ | src/core/native_array.pm:

[15:21] <dalek> rakudo/nom: using a named argument to new in permutations

[15:21] <dalek> rakudo/nom: 

[15:21] <dalek> rakudo/nom: Not sure why travis did not catch the error here.

[15:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b71084b06b

[15:21] <dalek> rakudo/nom: 8fb631a | lizmat++ | src/core/native_array.pm:

[15:21] <dalek> rakudo/nom: Merge pull request #596 from grondilu/patch-1

[15:21] <dalek> rakudo/nom: 

[15:21] <dalek> rakudo/nom: use a Seq for permutations

[15:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8fb631a6a5

[15:22] <timotimo> fortunately the code i'm looking at right here is only called in an error state and so is not hot at all

[15:22] <timotimo> but ... hot damn, this bytecode we generate! %)

[15:23] <jdv79> where are the places that import/export stuff happens?  is that nqp?

[15:26] <ilmari> m: class Foo { has $!n; submethod BUILD(:$!n) {}; methdo enn { $!n } }; Foo.new( n => 42).enn.say

[15:26] <camelia> rakudo-moar 7b7888: OUTPUT«5===SORRY!5=== Error while compiling /tmp/m0hmxL7LQI␤Variable $!n used where no 'self' is available␤at /tmp/m0hmxL7LQI:1␤------> 3bmethod BUILD(:$!n) {}; methdo enn { $!n7⏏5 } }; Foo.new( n => 42).enn.say␤»

[15:26] <jdv79> masak: what about when and default are you referring to above?

[15:28] <ilmari> m: class Foo { has $!n; submethod BUILD(:$!n) {}; method enn { $!n } }; Foo.new( n => 42).enn.say

[15:28] <camelia> rakudo-moar 7b7888: OUTPUT«42␤»

[15:30] <lab> after half a day trying to put something together in P6, I am not worried about P6 speed anymore; I am more worried about my own speed!

[15:30] <timotimo> jdv79: i think it's all in CompUnitRepo and friends?

[15:30] <timotimo> let me look

[15:30] <grondilu> also regarding permutations, please consider looking at https://github.com/perl6/roast/issues/79

[15:31] <timotimo> look for REQUIRE_IMPORT for example, jdv79 

[15:31] <dalek> doc: 2aa797d | RabidGravy++ | doc/Language/concurrency.pod:

[15:31] <dalek> doc: Make the existing examples for Supply work again.

[15:31] <dalek> doc: review: https://github.com/perl6/doc/commit/2aa797d0fb

[15:31] <dalek> doc: d0d1113 | RabidGravy++ | doc/Language/concurrency.pod:

[15:31] <dalek> doc: Explain the difference between live and on-demand

[15:31] <dalek> doc: Sprinkle in some react goodness.

[15:31] <dalek> doc: review: https://github.com/perl6/doc/commit/d0d1113f08

[15:31] <dalek> doc: 0171c24 | RabidGravy++ | doc/Type/Supply.pod:

[15:31] <dalek> doc: Supply is no longer a role

[15:31] <dalek> doc: There is no direct constructor use factories

[15:31] <dalek> doc: review: https://github.com/perl6/doc/commit/0171c2453f

[15:31] <timotimo> that should give you a place to start

[15:31] <dalek> doc: fb3a9d0 | RabidGravy++ | doc/Type/Supplier.pod:

[15:31] <dalek> doc: Add some docs for Supplier

[15:31] <dalek> doc: review: https://github.com/perl6/doc/commit/fb3a9d0554

[15:31] *** cygx joined
[15:31] <jdv79> timotimo: i'm trying to triage https://rt.perl.org/Public/Bug/Display.html?id=126761 a bit

[15:32] <timotimo> for some reason that's in operators.pm

[15:32] <cygx> o/

[15:32] <jdv79> but pretty sure a day oe my time is like 1min of jnthn or someone else that knows that code

[15:32] <timotimo> hm. probably not that strange to put it there

[15:32] <jdv79> *of

[15:32] <lab> It will get just good :). in the meantime, having an array ref in a variable, doing $v.WHAT gives  me an error which I think I kinda understand (Cannot lookup attribute in a type object) how do I get that it is an array ref, like P5 ref did?

[15:32] <cygx> .tell jnthn http://irclog.perlgeek.de/perl6/2015-11-20#i_11574374 was about a non-existing dynamical variable, cf https://github.com/rakudo-p5/v5/commit/a415306b22a9d1156ec1600c4ff8cdd0ddf215c4

[15:32] <yoleaux> cygx: I'll pass your message to jnthn.

[15:32] *** g4 left
[15:32] *** burnersk left
[15:33] *** rurban joined
[15:33] <RabidGravy> m: my $v = [1,2,3];  say $v.WHAT;

[15:33] <camelia> rakudo-moar 8fb631: OUTPUT«(Array)␤»

[15:33] *** domidumont left
[15:33] <RabidGravy> lab, ^

[15:34] *** Exodist joined
[15:34] <lab> RabidGravy: I get the message I posted above. Cannot lookup attributes  in a type object

[15:34] <RabidGravy> m: my $v = [1,2,3];  say so $v ~~ Array; # though that is more idiomatic

[15:34] <camelia> rakudo-moar 8fb631: OUTPUT«True␤»

[15:34] *** domidumont joined
[15:34] *** skaji joined
[15:34] <RabidGravy> lab, show us your code then

[15:34] *** moznion joined
[15:35] <RabidGravy> or rather the smallest code that exhibits that behaviour

[15:35] *** burnersk joined
[15:36] <ilmari> m: my $v = Array; say $v.WHAT

[15:36] <camelia> rakudo-moar 8fb631: OUTPUT«(Array)␤»

[15:36] *** bpmedley joined
[15:37] *** emdashcomma joined
[15:37] *** PotatoGim left
[15:37] *** PotatoGim joined
[15:38] *** kivutar_ joined
[15:38] <lab> first thing I write in P6 (ever) so it is short  http://nopaste.linux-dev.org/?869894

[15:38] *** Celelibi joined
[15:39] <ZoffixW> k, *now*, I'm happy. https://perl6advent.wordpress.com/

[15:40] <ZoffixW> And it only took an hour, yey CMSs :P

[15:40] <ZoffixW> </sarcasm>

[15:40] *** hobbs joined
[15:40] *** pnu joined
[15:40] *** solarbunny joined
[15:41] <PerlJam>  #perl6++  (for filling out the advent calendar)

[15:42] <ZoffixW> \o/

[15:43] *** vytas joined
[15:43] <PerlJam> ZoffixW++ for giving it an updated look :)

[15:43] <ZoffixW> \o/

[15:44] <MadcapJake> ZoffixW++ # love the hat!

[15:45] <MadcapJake> The blog title is left aligned on the article page, looks a bit wonky

[15:45] *** zengargoyle joined
[15:47] <ZoffixW> Yeah. And there's no way to change that without paying that I see :/

[15:47] <ZoffixW> (or hosting WP yourself)

[15:48] <PerlJam> &nbsp; x 10   ;-)

[15:48] <ZoffixW> That's not mobile friendly :P

[15:48] <ZoffixW> And that would mis-align it on the home page lol :)

[15:48] *** ZoffixW left
[15:49] <flussence> .oO( new in Unicode 10: text alignment and formatting characters )

[15:50] <RabidGravy> lab, change the $v.WHAT there to $v.^name and all will be good

[15:51] <ilmari> m: my $v = 42; say so $v ~~ any(Int, Str)

[15:51] <camelia> rakudo-moar 8fb631: OUTPUT«True␤»

[15:51] <ilmari> m: my $v = []; say so $v ~~ any(Int, Str)

[15:51] <camelia> rakudo-moar 8fb631: OUTPUT«False␤»

[15:51] <ilmari> m: my $v = []; say so $v.^name ~~ any(Int, Str)

[15:51] <camelia> rakudo-moar 8fb631: OUTPUT«True␤»

[15:52] <ilmari> the type name is a string

[15:52] <timotimo> yeah

[15:53] <timotimo> Zoffix: the new advent design looks good!

[15:53] *** rindolf joined
[15:54] <dalek> rakudo/nom: 437ef18 | lizmat++ | t/04-nativecall/11-cpp.t:

[15:54] <dalek> rakudo/nom: Fix spelling, spotted by Rares Aioanei++

[15:54] <dalek> rakudo/nom: 

[15:54] <dalek> rakudo/nom: Fixes RT #126762

[15:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/437ef184ee

[15:55] *** xpen joined
[15:56] *** lab is now known as nadim

[15:57] *** telex left
[15:57] *** ggoebel7 joined
[15:57] <nine> Please revert my last commit to rakudo

[15:57] <nine> it's wrong and breaks panda

[15:58] <nadim> RabidGravy:  any quick explanation why .WHAT failed?

[15:58] *** telex joined
[15:59] <lizmat> nine: will do

[15:59] *** lucasb joined
[15:59] *** kaare_ joined
[16:00] <dalek> rakudo/nom: 0a61b9a | lizmat++ | src/core/Process.pm:

[16:00] <dalek> rakudo/nom: Revert "Store CompUnit::Repositories in %*CUSTOM_LIB"

[16:00] <dalek> rakudo/nom: 

[16:00] <dalek> rakudo/nom: This reverts commit 08622892426fb4a758ee8eae2f13f3d2c43ba2dc.

[16:00] <dalek> rakudo/nom: 

[16:00] <RabidGravy> m: say "-" ~ Array.WHAT

[16:00] <dalek> rakudo/nom: As requested at http://irclog.perlgeek.de/perl6/2015-11-30#i_11628270

[16:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0a61b9a36c

[16:00] <camelia> rakudo-moar 8fb631: OUTPUT«Cannot look up attributes in a type object␤  in block <unit> at /tmp/EYUqT030Nv:1␤␤»

[16:00] <RabidGravy> because that

[16:01] *** xpen left
[16:01] <timotimo> oh

[16:01] <lizmat> RabidGravy: looks like an infix:<~> signature issue to me

[16:01] <RabidGravy> yeah something like that

[16:03] <lucasb> m: Array.Str

[16:03] <camelia> rakudo-moar 8fb631: OUTPUT«Cannot look up attributes in a type object␤  in block <unit> at /tmp/lxekskIiJ3:1␤␤»

[16:03] *** cognominal_ left
[16:03] <lizmat> m: Array.Stringy  # similar

[16:03] <camelia> rakudo-moar 8fb631: OUTPUT«Cannot look up attributes in a type object␤  in block <unit> at /tmp/UTqPUgbhLx:1␤␤»

[16:05] <RabidGravy> but "multi method Str(Array:U:) { self.^name }" kinda sucks

[16:06] *** burnersk left
[16:08] <nine> lizmat: thanks!

[16:08] <lizmat> yw, nine++  :-)

[16:09] <dalek> ecosystem: e7deabf | (Carsten Hartenfels)++ | META.list:

[16:09] <dalek> ecosystem: Add JavaScript::SpiderMonkey to ecosystem

[16:09] <dalek> ecosystem: 

[16:09] <dalek> ecosystem: See https://github.com/hartenfels/Javascript-SpiderMonkey

[16:09] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e7deabff49

[16:09] <dalek> ecosystem: 2674ab1 | RabidGravy++ | META.list:

[16:09] <dalek> ecosystem: Merge pull request #98 from hartenfels/master

[16:09] <dalek> ecosystem: 

[16:09] <dalek> ecosystem: Add JavaScript::SpiderMonkey to ecosystem

[16:09] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/2674ab100b

[16:09] *** brrt joined
[16:10] *** YP-QMUL-W joined
[16:20] *** domidumont left
[16:20] *** eiro left
[16:21] *** lestrrat left
[16:25] *** lestrrat joined
[16:26] *** sjohnson` is now known as sjohnson

[16:29] <RabidGravy> is docs.perl6.org built by a cron job?

[16:29] <RabidGravy> it doesn't seem to have been built since Saturday

[16:32] *** YP-QMUL-W left
[16:33] *** YP-QMUL-W joined
[16:33] *** n0xff joined
[16:33] *** uruwi left
[16:34] <lucasb> seems there was some error generating the Supplier pod

[16:34] <zengargoyle> probably still parsing... :P

[16:35] *** YP-QMUL-W left
[16:37] *** YP-QMUL-W joined
[16:38] <lizmat> FWIW, I'm working on the P6W, if anybody has something interesting to mention that you think I may miss, let me know!

[16:39] <[Coke]> ah. jvm make test is failing due to RT#126765

[16:39] <[Coke]> nine: ^^

[16:40] *** eiro joined
[16:40] *** kjs_ left
[16:40] *** burnersk joined
[16:41] *** pmurias joined
[16:41] <hoelzro> o/ #perl6

[16:42] <lizmat> hoelzro o/

[16:42] <hoelzro> o/ lizmat 

[16:43] *** CIAvash joined
[16:43] <[Coke]> we should consider not installing -gdb- and -valgrind- executables unless they're asked for, maybe.

[16:43] <lucasb> the "=end" pod directive has changed recently? was it "=finish" before?

[16:44] <tadzik> timotimo: probably :)

[16:45] <[Coke]> rakudo-m test dying on t/04-nativecall/11-cpp.t

[16:45] <[Coke]> (on OS X)

[16:45] <hoelzro> timotimo: OT question, but do you have your i3 config posted anywhere? I'm giving it a shot this week, and I remember oohing and aahing over your setup

[16:47] *** n0xff left
[16:48] *** n0xff joined
[16:49] <pmurias> hoelzro: \o

[16:52] <dalek> doc: a60d7ec | RabidGravy++ | doc/Type/Supplier.pod:

[16:52] <dalek> doc: Forget the pod on =end

[16:52] <dalek> doc: review: https://github.com/perl6/doc/commit/a60d7ecfdf

[16:53] <RabidGravy> me-- # didn't test the file

[16:53] <hoelzro> o/ pmurias 

[16:53] <lizmat> RabidGravy++     # compensation  :-)

[16:54] <RabidGravy> tony-o_, I've slapped you a PR on Event::Emitter cause the Supply changes done broke it

[16:57] *** abraxxa left
[16:59] *** balazs left
[17:00] <PerlJam> blah

[17:00] <PerlJam> someone give me feedback on https://perl6advent.wordpress.com/?p=2867&preview=true

[17:00] <PerlJam> I've lost what I wanted to say and I'm wondering if I should just scrap the thing.

[17:00] <stmuk> lizmat: maybe mention the perl 6 talks at LPW? (which you probably will anyway)

[17:01] <lizmat> stmuk: yes, I will  :-)

[17:01] <lucs> PerlJam: "Oops! That page can’t be found."

[17:01] <pmurias> same a lucs here

[17:01] <pmurias> s/a/as/

[17:01] <PerlJam> I suppose you have to be logged in to perl6advent.wordpress.com to see it.

[17:02] *** raiph joined
[17:02] <stmuk> PerlJam: that looks good .. short and sweet .. maybe mention curli as well?

[17:02] <lucs> Logged in?

[17:03] <lizmat> PerlJam: looks fine as an introduction: maybe also highlight some of previous years advent posts that stood the test of time ?

[17:03] <lucs> PerlJam: How does one log in?

[17:03] <PerlJam> lucs: if you don't have an account I can send you an invite if you give me an email address

[17:03] <lucs> Oh, okay, thanks.

[17:04] <PerlJam> lucs: but you have to submit an article on Perl 6 sometime between now and the heat death of the universe ;)

[17:04] <lizmat> stmuk: I will mention curli in the P6W 

[17:04] <lucs> PerlJam: Whoa! Slow down there!

[17:06] <lizmat> PerlJam: especially mentioning https://perl6advent.wordpress.com/2014/12/24/day-24-seeing-wrong-right/ seems appropriate at this time  :-)

[17:06] <arnsholt> lizmat: It's from last week, technically, but could you include a mention of the IPerl6 kernel too? If someone gets hyped by the idea, there are some LHF tickets in the issues list that they can start with

[17:07] <lizmat> arnsholt: you mean https://github.com/timo/iperl6kernel/ ?

[17:07] <arnsholt> Yup!

[17:07] <timotimo> hoelzro: i wouldn't really call it "setup", but here you go: https://github.com/timo/perl6-vortrag

[17:07] <lizmat> arnsholt: I'll try to wriggle it in  :-)

[17:08] <zengargoyle> lucasb: «=finish» will be «=eof comment» | «=eof pod» | «=eof data»

[17:08] <zengargoyle> «=end» is still closer for «=begin» AFAIK

[17:09] <RabidGravy> yeah it was the "=begin pod" "=end" that shagged it up

[17:09] <stmuk> was ist ein "krankem framework"? sick framework? :)

[17:09] <arnsholt> lizmat: Cheers! =)

[17:09] <lizmat> stmuk: I think "diseased framework" gives better imagery  :-)

[17:10] <arnsholt> I'm trying to adopt the jnthn approach of showing the way for something cool and waiting for someone to come along and pick it up ;)

[17:10] <moritz> stmuk: yes, "krank" can mean "sick" but also "crazy"

[17:10] <zengargoyle> but i doubt that bit of change has made it into code anywhere yet.

[17:10] <lizmat> zengargoyle: did I miss the memo on the end of =finish ?

[17:11] <zengargoyle> ah, forget vs forgot. :)

[17:12] <RabidGravy> ==> Successfully installed panda

[17:12] <RabidGravy> ==> Please make sure that inst#/home/jonathan/.perl6/2015.11-301-g0a61b9a/bin is in your PATH

[17:12] <zengargoyle> lizmat: maybe... there was a discussion with TT a few days back about some pod stuff.

[17:13] <RabidGravy> yay! and whoah!

[17:13] <lizmat> but no implementation for it yet, no ?

[17:14] *** balazs joined
[17:14] <zengargoyle> about what =finish means vs what people think it means etc. decided that =eof could be used to signify the ...goes to EOF without needing =end thing.

[17:14] <zengargoyle> lizmat: yeah, pretty sure no actual implementation yet.

[17:15] <zengargoyle> =eof would default to mean «=eof comment»  sorta free-form ignore all this stuff

[17:15] <zengargoyle> «=eof pod» would be like ... rest of this file is POD document (no code)

[17:16] <zengargoyle> «=eof data» would be like __DATA__ 

[17:16] <RabidGravy> that /home/jonathan/.perl6/2015.11-301-g0a61b9a/bin path is it possible to obtain it somehow from the installed perl6?

[17:16] <[Coke]> RabidGravy: that seems like an difficult path to require. ew.

[17:16] *** n0tjack joined
[17:17] <[Coke]> every time you install a new version, you need to update your path?

[17:17] <RabidGravy> yeah which would suck somewhat

[17:17] <timotimo> i put a symlink in ~/.perl6 called "current"

[17:17] <RabidGravy> it could be mitigated if the installed perl could be made to 'fess it up

[17:17] <[Coke]> what is repo/ ?

[17:18] <timotimo> don't worry, nine said it'd only take a small patch to fix that stuff

[17:20] *** hartenfels left
[17:20] *** kjs_ joined
[17:20] <timotimo> how do we reach takadonet? the Algorithm::Diff module has been b0rked at least since the GLR

[17:21] *** cygx left
[17:21] *** hartenfels joined
[17:21] * PerlJam needs to eat lunch

[17:22] *** Oatmeal joined
[17:22] *** Oatmeal left
[17:23] *** raiph left
[17:23] *** Oatmeal joined
[17:23] *** Oatmeal left
[17:23] *** zakharyas left
[17:23] *** csd_ left
[17:24] <lizmat> m: my \Δ = my $ = 1; say Δ++; say Δ++   # sigilless variables :-)

[17:24] <camelia> rakudo-moar 0a61b9: OUTPUT«1␤2␤»

[17:24] <lucasb> zengargoyle: hey, thanks for the note. (I was away)

[17:25] *** vytas left
[17:26] *** hankache joined
[17:27] <hankache> hola

[17:27] <lucasb> aloha

[17:29] *** csd_ joined
[17:30] <lucs> allo là

[17:34] *** AndyDee joined
[17:34] *** csd_ left
[17:34] * zengargoyle commutes &

[17:35] <autarch> thanks to whoever posted my blog post to HN and made my server cry ;)

[17:36] <hankache> allo oui? ;)

[17:36] <hankache> autarch++

[17:39] <flussence> it looks like panda's bootstrap.pl works fine, but rebootstrap.pl doesn't. It gets even more confused if you run it after bootstrap.pl...

[17:40] *** rurban left
[17:45] <RabidGravy> has something changed in the way that Attribute traits are applied in the last couple of days?

[17:46] *** n0tjack left
[17:47] <RabidGravy> the "is marshalled-by" in JSON::Marshal has just stopped working

[17:47] <TimToady> RabidGravy: probably

[17:47] <TimToady> jnthn++ was working on making attributes work more like normal variables

[17:48] <RabidGravy> Hmm

[17:49] <RabidGravy> it looks like it just isn't seeing the trait anymore

[17:51] <dalek> rakudo/nom: 632f75b | usev6++ | src/core/Mu.pm:

[17:51] <dalek> rakudo/nom: Avoid NullPointerException on rakudo.jvm

[17:51] <dalek> rakudo/nom: 

[17:51] <dalek> rakudo/nom: 'say my @a' lead to NPE; timotimo++ for suggesting nqp::existskey

[17:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/632f75b10b

[17:51] <dalek> rakudo/nom: c0edfcb | peschwa++ | src/core/Mu.pm:

[17:51] <dalek> rakudo/nom: Merge pull request #598 from usev6/jvm_npe_gistseen

[17:51] <dalek> rakudo/nom: 

[17:51] <dalek> rakudo/nom: Avoid NullPointerException on rakudo.jvm

[17:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c0edfcbb77

[17:52] <psch> hm, wonder if i can bend interop back into shape *and* add enough new bits for an advent post...

[17:52] <psch> would that already make a tradition..? :)

[17:52] <timotimo> christmas: that magical time of the year where you can use JVM interop on rakudo

[17:53] <psch> oh be fair

[17:53] <psch> it worked until the GLR :P

[17:54] <timotimo> you're right

[17:54] <timotimo> and you get all my ++ es for working on it

[17:54] <timotimo> psch++ # jvm interop maintaining

[17:54] <psch> not much maintaining recently, with all the glr/jvm fallout :/

[17:54] <timotimo> well, you're working on making the jvm not be exploded

[17:54] <timotimo> that's worth a whole lot, too

[17:55] <psch> and all those pitfalls that open themselves /o\

[17:55] <timotimo> ;(

[17:55] <psch> like that we don't have a REPR.initialize on jvm, like at all

[17:55] <psch> r: say nqp::create(Int) # which is why this

[17:55] <camelia> rakudo-jvm e3c591: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[17:55] <camelia> ..rakudo-moar 0a61b9: OUTPUT«0␤»

[17:55] <timotimo> right

[17:56] <psch> hm, maybe that's an ok topic

[17:56] <TimToady> RabidGravy: probably 6a45feccb459d5643b4475f98efb59949155fd2b

[17:56] <psch> although it's again lots of object.asm heh

[17:57] <TimToady> our bot should look up things that are valid git ids

[17:57] *** Skarsnik joined
[17:58] <hartenfels> I was thinking on doing an advent post on something NativeCally, since I been working on gluing Mozilla's JavaScript to Perl 6. Would that be something fitting?

[17:58] *** rurban joined
[17:58] <hartenfels> Maybe try and inspire some more languages or libraries being hooked together.

[17:59] <JimmyZ> nqp-j: my $a  := nqp::list(); nqp::say($a);

[17:59] <camelia> nqp-jvm: OUTPUT«#␤# There is insufficient memory for the Java Runtime Environment to continue.␤# pthread_getattr_np␤# An error report file with more information is saved as:␤# /tmp/jvm-1278/hs_error.log␤»

[17:59] <psch> hartenfels: a walk-through-by-example of NativeCall bindings sounds like a neat topic to me

[17:59] <JimmyZ> nqp-j: my $a  := nqp::list(); nqp::say($a);

[17:59] <camelia> nqp-jvm: OUTPUT«#␤# There is insufficient memory for the Java Runtime Environment to continue.␤# pthread_getattr_np␤# An error report file with more information is saved as:␤# /tmp/jvm-1284/hs_error.log␤»

[17:59] <JimmyZ> nqp-j: my $a  := nqp::list(0); nqp::say($a);

[17:59] <camelia> nqp-jvm: OUTPUT«(signal ABRT)#␤# There is insufficient memory for the Java Runtime Environment to continue.␤# pthread_getattr_np␤# An error report file with more information is saved as:␤# /tmp/jvm-1290/hs_error.log␤»

[17:59] <psch> hartenfels: although that does depend on the scope of the library, of course

[17:59] <psch> JimmyZ: nqp-j always ABRTs 

[18:00] <psch> nqp-j: 1

[18:00] <camelia> nqp-jvm: OUTPUT«#␤# There is insufficient memory for the Java Runtime Environment to continue.␤# pthread_getattr_np␤# An error report file with more information is saved as:␤# /tmp/jvm-1310/hs_error.log␤»

[18:00] <hartenfels> psch: Well, it'd probably pick some things out that haven't been described in previous advent posts, like calling functions back and forth.

[18:00] <JimmyZ> oh my ..

[18:00] <psch> JimmyZ: it's only via camelia... :)

[18:00] *** z8 joined
[18:00] <psch> hartenfels: oh, yeah, i'd like callbacks and such, yeah

[18:01] <psch> hartenfels: i have a thing or two i could need them for, haven't bothered to try and figure them out yet though

[18:01] <JimmyZ> anyway, I think NPE should be fixed in nqp/jvm, not rakudo.

[18:01] *** kensanata left
[18:01] <psch> m: my %h; nqp::existskey(%h, 'a')

[18:01] <camelia> rakudo-moar 0a61b9: OUTPUT«(signal SEGV)»

[18:01] <hartenfels> psch: Guess I'ma make a pull request then.

[18:01] <psch> JimmyZ: both backends do bad things in some cases, and it's generally agreed that nqp-level should check for a key before trying to access it

[18:02] <[Coke]> JimmyZ: the ideal is that rakudo has no jvm/moar conditionals and that nqp hides all implementation details.

[18:02] <JimmyZ> hmm, why moarvm doesn't do SEG without that patch..

[18:03] <psch> m: my %h = a => 1; say nqp::existskey(%h, 'a') # something about initialize or so

[18:03] <camelia> rakudo-moar 0a61b9: OUTPUT«1␤»

[18:03] <psch> m: my %h = a => 1; say nqp::existskey(%h, 'b') # actual example :P

[18:03] <camelia> rakudo-moar 0a61b9: OUTPUT«0␤»

[18:04] <psch> JimmyZ: i agree that we shouldn't NPE on r-j at all, but this case specifically is close enough to "undefined behavior" territory for me to accept the patch instead of trying to fix it properly - for now

[18:05] <JimmyZ> m: use nqp; my %h; nqp::existskey(%h, 'a')

[18:05] <camelia> rakudo-moar 0a61b9: OUTPUT«(signal SEGV)»

[18:05] *** AlexDaniel joined
[18:06] *** z8 left
[18:06] <JimmyZ> looks moarvm does something different about hash init

[18:07] *** brrt left
[18:07] *** znpy` left
[18:10] *** hankache left
[18:12] *** pyrimidi_ left
[18:13] *** pyrimidine joined
[18:15] <[Coke]> Work in progress on script to harvest everyone's names (which I had done manually for about 5 repos before I realized it would be so painful and that I missed some commits in those repos) - https://gist.github.com/coke/63c7bbb82f075c7bb1f5

[18:16] <Skarsnik> hartenfels, I wanted to do that. My idea was to use a lib made for the article and cover some usual case

[18:16] <Skarsnik> but feel free to do it x)

[18:16] *** pdcawley joined
[18:16] *** sQuEE` joined
[18:17] *** Some-body_ joined
[18:17] <psch> nine: r-j HEAD complains about repo/precomp/.lock not existing..?

[18:17] *** DarthGandalf left
[18:17] *** roguelazer left
[18:17] <hartenfels> Skarsnik: Which library did you want to implement on it?

[18:18] *** Some-body_ is now known as DarthGandalf

[18:18] *** sQuEE left
[18:18] <[Coke]> biggest thing you could do to help right now: add any git repos I've missed to the list at the top of https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contributors-historic-pl6

[18:18] *** mspo left
[18:18] *** espadrine left
[18:18] <JimmyZ> Can I haz Chinese name ? :P

[18:19] *** pdcawley_ left
[18:19] <[Coke]> if it's in CREDITS, it'll happen automagically.

[18:19] <Skarsnik> hartenfels, change this https://github.com/Toyunda/toyunda/blob/master/gstreamer-toyunda/toyundaparse.c to make it a lib. it parse a weird subtitle format, so there is a 1-2 struct to bind and I wanted to add callback for the global container

[18:20] <nine> psch: haven't had the time to look at jvm yet :/ 

[18:20] <JimmyZ> [Coke]: what about nqp-old

[18:20] *** sQuEE` left
[18:20] <Skarsnik> hartenfels, like in the end you will have to bind a ctruct, handle callback, a function call. can probably add some arrays for fun

[18:20] <[Coke]> JimmyZ: url?

[18:20] *** lichtkind joined
[18:21] <psch> nine: no worries, i'm just wondering if the file not existing is a problem in lockfh itself or earlier

[18:21] <psch> nine: as in, does r-m lockfh create a file, i suppose

[18:21] *** sQuEE joined
[18:21] <hartenfels> Skarsnik: Sounds like that'd be more fitting for an advent post, since you can put the entire library into it.

[18:21] <hartenfels> As opposed to bits and pieces of one.

[18:22] <JimmyZ> [Coke]: https://github.com/perl6/nqp-rx and  https://github.com/perl6/std ?

[18:22] *** skarn left
[18:22] *** Hotkeys left
[18:22] <JimmyZ> [Coke]: what about https://github.com/perl6/doc ?

[18:23] <dalek> perl6.org: c17ce8a | (Zoffix Znet)++ | source/index.html:

[18:23] <dalek> perl6.org: Add a link to view "more" recent blog posts

[18:23] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/c17ce8aa3d

[18:23] *** shmibs joined
[18:23] <Skarsnik> hartenfels, that why I said, that was my idea for an advent post about NC ^^

[18:23] <[Coke]> whoops, I thought I had doc in there.

[18:24] <hartenfels> Skarsknik: Lemme unpull my request then :P

[18:24] <JimmyZ> and https://github.com/perl6/perl6.org ? # not sure about this one though :P

[18:24] *** diakopter left
[18:25] <[Coke]> JimmyZ: yikes, glad I asked. :)

[18:25] <Skarsnik> hartenfels, no, do it. I probably don't have time to write something serious in time x)

[18:25] <dalek> mu: 53ba209 | (Carsten Hartenfels)++ | misc/perl6advent-2015/schedule:

[18:25] <dalek> mu: Add NativeCall advent calender entry

[18:25] <dalek> mu: 

[18:25] <dalek> mu: Some NativeCall bits that haven't been treated in previous advent posts, such as callbacks, Bufs and maybe LibraryMake if Panda unbreaks in time.

[18:25] <dalek> mu: review: https://github.com/perl6/mu/commit/53ba209186

[18:25] <dalek> mu: f958c0e | RabidGravy++ | misc/perl6advent-2015/schedule:

[18:25] <dalek> mu: Merge pull request #12 from hartenfels/master

[18:25] <dalek> mu: 

[18:25] <dalek> mu: Add NativeCall advent calender entry

[18:25] <dalek> mu: review: https://github.com/perl6/mu/commit/f958c0e9a3

[18:25] <timotimo> Zoffix: is it also easy to subscribe to the RSS feed from the front page of perl6.org?

[18:25] <Skarsnik> hartenfels, it was nust if you wanted an angle for the article

[18:25] *** diakopter joined
[18:26] <hartenfels> Skarsnik: Well, I have my JavaScript binding that uses them :P

[18:26] <hartenfels> And I guess too late to unpull it now.

[18:26] <JimmyZ> [Coke]: Does it 6.c contain panda and modules?

[18:27] <[Coke]> JimmyZ++ that's about 40 new names.

[18:27] <[Coke]> JimmyZ: this list will probably not include the ecosystem.

[18:27] <Skarsnik> someone should write a module to compile C code x)

[18:27] <[Coke]> but now that I have a script, it's doable.

[18:27] <JimmyZ> ok, then no panda or so yet ;)

[18:27] <nine> psch: no, thebfile is opened with :create, then locked

[18:27] <timotimo> Skarsnik: we do have that already

[18:28] <timotimo> Skarsnik: LibraryMake would do that for you

[18:28] <timotimo> Skarsnik: also, Inline::C does that, too

[18:28] *** Hotkeys joined
[18:28] <[Coke]> JimmyZ: added all those repos, re-ran, re-pushed.

[18:28] <hartenfels> LibraryMake is failing to install for me right now, with all the Panda craziness going on.

[18:28] <timotimo> :(

[18:29] <jdv79> who let the crazy panda out?!

[18:29] <Skarsnik> I don't need a makefile for generated C file x)

[18:30] *** sQuEE left
[18:30] <jdv79> is it panda, rakudo, or both that are crazy?

[18:30] <hartenfels> Probably both.

[18:31] *** n0tjack joined
[18:31] *** sQuEE joined
[18:31] *** profan joined
[18:31] <psch> nine: right... i'll have a look

[18:32] *** mspo joined
[18:33] <Skarsnik> Should the VM.config be normalised or something?

[18:33] *** diakopter left
[18:33] <Skarsnik> when patching NC to add api version, there is like 5 ways to get the lib extension

[18:34] *** xfix joined
[18:35] <JimmyZ> oh, if it is about rakudo star 6.c , then https://github.com/rakudo/star too :P

[18:36] <JimmyZ> [Coke]: I found new face in this repo :P

[18:36] <psch> nine: apparently the problem is simpler - the path itself doesn't exist at all, i.e. repo in the build directory isn't there

[18:36] * psch takes another look at the xmas tickets instead vOv

[18:37] <[Coke]> new face?

[18:37] <JimmyZ> yeah,, in the star repo

[18:37] *** kivutar_ left
[18:38] <[Coke]> one new person there, plus a few aliases, good catch. :)

[18:38] <[Coke]> JimmyZ++

[18:40] *** pmurias left
[18:40] <jdv79> [Coke]: why not just put a call out to contact you in the next p6weekly if ones name is missing from your list.

[18:40] *** ZoffixW joined
[18:40] *** dha joined
[18:40] <ZoffixW> timotimo, I don't use RSS, so I've no idea how easy it is to "subscribe" to anything :P

[18:40] *** emdashcomma left
[18:40] <[Coke]> Because this script isn't going to be done by then, probably.

[18:40] *** Exodist left
[18:41] <hahainternet> rss is basically great

[18:41] <hahainternet> i mean let's face it, it's the best of a bunch of really dodgy options

[18:41] <dha> If you use RSS, it's pretty easy to subscribe to things. If not... not. :-)

[18:41] <yoleaux> 28 Nov 2015 17:05Z <jdv79> dha: maybe you could talk to mr. foy about what timo is talkin bout

[18:41] <hahainternet> there's probably a decent gap in the market

[18:41] <hahainternet> for something that combines the facilities of google reader

[18:41] <hahainternet> google news

[18:41] <[Coke]> I mean, we have David H. Adler on the list, we're good. :)

[18:41] <hahainternet> and twitter

[18:41] <hahainternet> together with RSS

[18:41] <hahainternet> ie 'news but without the social waffle'

[18:42] <jdv79> put a fork in it

[18:42] * ZoffixW likes their news with the waffle

[18:42] <hahainternet> also hi all, good evening, another HN post about p6 :D

[18:42] *** Exodist joined
[18:42] <hahainternet> only a smattering of pointless negativity too

[18:42] <hahainternet> and i'm downvoting what i can see

[18:42] *** emdashcomma joined
[18:42] <dha> jdv79 - Sadly, I don't know what timo was talkin bout on that day. :-)

[18:42] <Hotkeys> Morning everyone

[18:42] <Hotkeys> Er

[18:42] <Hotkeys> Afternoon I guess

[18:42] <timotimo> Happy UGT, Hotkeys 

[18:42] <dha> [Coke] - What list am I on now?

[18:42] <jdv79> stale content on p6 on a site of his i think

[18:43] *** roguelazer joined
[18:43] <dalek> modules.perl6.org: ec0342f | (Zoffix Znet)++ | t (3 files):

[18:43] <dalek> modules.perl6.org: Fix stargazers and Issues links

[18:43] <dalek> modules.perl6.org: 

[18:43] <dalek> modules.perl6.org: Closes https://github.com/perl6/ecosystem/issues/99

[18:43] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/ec0342fb73

[18:43] <dha> Oh, ok. You could probably talk to him yourself, but I can certainly do that if you like. I'll need some details, though.

[18:44] <ZoffixW> dha, this website has extremely outdated info that shows up at the top on Google for certain searches. We wish for that info to be removed or at least slapped with a giant warning that it is outdated: http://www.learningperl6.com/Chapters/

[18:44] <JimmyZ> [Coke]: do we got all names from RFC too ?

[18:44] <JimmyZ> *get

[18:45] <[Coke]> Yes, RFC is on my list of things to process... but that's not a git repo, so more manual coding there.

[18:45] <JimmyZ> I think that is all then :P

[18:45] <[Coke]> (I mean, it might be a repo, but I doubt that each RFC is committed by the person who worked on it. will have to process author info there.)

[18:45] <jdv79> dha: thanks

[18:46] <dha> It does say, right at the top, "These chapters are a work-in-progress. They are incomplete, out-of-order, and very far from their final form."

[18:46] <Hotkeys> timotimo: ugt?

[18:46] <dha> You want to add "and possibly outdated" to that?

[18:46] <timotimo> "universal greeting time"

[18:46] <[Coke]> JimmyZ: added to the readme. thank you so much for your feedback!

[18:46] <Hotkeys> Ah

[18:46] <Hotkeys> Nice

[18:46] <Hotkeys> Is that a thing?

[18:46] <Hotkeys> Or did you make it up just for me

[18:46] <timotimo> dha: what was i talking about when?

[18:46] <JimmyZ> [Coke]: iirc, there may be some names in specs authors but not in git

[18:47] <timotimo> oh

[18:47] <[Coke]> JimmyZ: I think the author names mostly got removed

[18:47] <dha> timotimo -  on Nov 28, apparently.

[18:47] <JimmyZ> oh, then we miss it 

[18:47] <[Coke]> If you can find one in a doc at HEAD, I can parse it out.

[18:47] <timotimo> yes, i see now

[18:47] <timotimo> dha: the problem is not Chapters/ itself

[18:47] *** domidumont joined
[18:47] <timotimo> because i don't think anything links to that

[18:47] <[Coke]> Or maybe with a git grep over the history.

[18:47] <JimmyZ> [Coke]: maybe parse a old version  specs?

[18:47] <timotimo> the individual html files you can get from there don't say "DO NOT READ THIS PLEASE" at the top

[18:48] <ZoffixW> dha, yeah, but that notice is not very obvious nor is it present here: http://www.learningperl6.com/Chapters/11.filehandles.html

[18:48] <timotimo> all they say is in small text "last modified ... 2007" at the far bottom

[18:48] *** diakopter joined
[18:48] <ZoffixW> dha, and if I just googled for something I'll go skimming straight for the code examples, not try to eye some tiny "this maybe outdated" text at the top :P

[18:48] <JimmyZ> [Coke]: before the  removal time :P

[18:49] <dha> ZoffixW -  I'm not sure I see a solution for that particular problem. Putting "don't do that" on every paragraph doesn't seem like a good solution, for instance.

[18:50] <timotimo> easy: the text gets put into a div that's positioned relative to the screen

[18:50] <ZoffixW> meh. No need

[18:50] <timotimo> other way: delete Chapters/ completely

[18:51] <ZoffixW> CSS. I have the code but my browser is too freakin' slow -_- 1 sec

[18:51] <JimmyZ> anyway, 02:51 am here ,good night

[18:51] <dha> In any case, I imagine I'll talk to brian soonish. I'll mention it.

[18:51] <timotimo> thank you!

[18:51] <timotimo> the reason why i complain about this was someone on twitter complained about outdated documentation

[18:51] <awwaiid> make it a BIG "don't read this" instead of a small one

[18:51] <[Coke]> can you add elements to a set at runtime?

[18:52] <psch> [Coke]: probably the same way as adding characters to a string at runtime

[18:52] <timotimo> https://twitter.com/je_turcotte/status/670008200008237057

[18:52] <psch> where "the same way" means "with same semantics", not "same operators" :)

[18:53] <timotimo> [Coke]: sets are immutable, but you can use SetHash if you want a mutable Set

[18:53] <ZoffixW> dha, html:before{background:#f00;color:#fff;font-size:14pt;position:fixed;padding:20px;z-index:9999;content:"WARNING: content of this page is outdated";}

[18:53] <timotimo> m: SetHash.new();

[18:53] <camelia> rakudo-moar c0edfc: ( no output )

[18:53] <timotimo> m: my $mutsh SetHash.new(); $mutsh<foo> = 1; say $mutsh

[18:53] <camelia> rakudo-moar c0edfc: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8ONd_xDbnR␤Missing infix inside S␤at /tmp/8ONd_xDbnR:1␤------> 3my $mutsh S7⏏5etHash.new(); $mutsh<foo> = 1; say $muts␤    expecting any of:␤        infix␤        infix stopper␤»

[18:53] <timotimo> m: my $mutsh = SetHash.new(); $mutsh<foo> = 1; say $mutsh

[18:53] <camelia> rakudo-moar c0edfc: OUTPUT«SetHash.new(foo)␤»

[18:53] <timotimo> m: my $mutsh = SetHash.new(); $mutsh<foo> = 1; $mutsh<bar>++; say $mutsh

[18:53] <camelia> rakudo-moar c0edfc: OUTPUT«SetHash.new(foo, bar)␤»

[18:54] <[Coke]> timotimo: danke.

[18:54] <timotimo> bitteschön :)

[18:54] *** roguelazer left
[18:55] <ZoffixW> dha, or better: html:before{background:#f00;color:#fff;font-size:14pt;position:fixed;padding:20px;z-index:9999;content:"WARNING: content of this page is outdated";}

[18:55] <timotimo> what if there's something with a z-index of 99999?

[18:55] *** diakopter left
[18:55] <timotimo> i think the industry standard is "five nines"

[18:56] <dha> Well, I'll leave the implementation to brian, but I'll outline the problem.

[18:56] <ZoffixW> This is what it looks like: http://i.imgur.com/CNsFePx.png

[18:56] <ZoffixW> k

[18:56] *** rvchangue left
[18:56] <hahainternet> timotimo: someone should have played you a rimshot for that

[18:56] <timotimo> thank you :)

[18:56] <dha> ZoffixW -  But that looks workable. I'll probably toss it in.

[18:57] *** espadrine joined
[18:57] <ZoffixW> dha, add "text-align: center; width: 100%" at the end tho :) I copy-paste failed that second snippet :P

[18:58] <dha> So,   <ZoffixW> dha, or better: html:before{background:#f00;color:#fff;font-size:14pt;position:fixed;padding:20px;z-index:9999;content:"WARNING: content of this page is outdated";}text-align:center; width:100%

[18:58] * dha isn't good at this stuff.

[18:59] *** skarn joined
[19:00] *** roguelazer joined
[19:01] <ZoffixW> dha,  html:before{background:#f00;color:#fff;font-size:14pt;position:fixed;padding:20px;z-index:9999;content:"WARNING: content of this page is outdated";text-align:center; width:100%;}

[19:01] *** espadrine left
[19:01] <dha> Ta.

[19:01] <timotimo> can i have someone with C pointer arithmetic chops help me a little bit?

[19:01] <ZoffixW> dha, it'd can be placed in this file and that should be enough from what I see: http://www.learningperl6.com/Chapters/chapters.css

[19:02] <hahainternet> timotimo: don't ask to ask :p

[19:02] *** rvchangue joined
[19:02] <timotimo> fair enough :)

[19:02] <RabidGravy> okay, what in the last few days what make it need https://github.com/jonathanstowe/JSON-Marshal/commit/2d0ae99aabde35900622b4a343d1a68e4edc60ae to see the traits defined in the module?

[19:03] <RabidGravy> totally confused by that

[19:03] *** diakopter joined
[19:03] *** ZoffixW left
[19:03] *** hankache joined
[19:04] <timotimo> https://gist.github.com/timo/dab3afea0b5362d5e6fa - i added the four ops with "_deref_" in their names. i need them to do basically the same thing as the ones without _deref_ in the name, but the offset (what's passed in GET_UI16(...)) points at a pointer, not at the value i want to get/set

[19:05] <timotimo> i'm not quite sure how to tease the right behaviour out of C

[19:05] <nine> retupmoca: you have a pull request fixing installation of LibraryMake

[19:08] *** water_melon joined
[19:08] <timotimo> i think i have to have ((MVMint64 **)((char *)o ...

[19:08] <hahainternet> timotimo: i'm going to ask a friend to take a look

[19:09] <retupmoca> nine++ # PR is merged

[19:09] <timotimo> hahainternet: it seems liek i might have solved it

[19:10] <timotimo> nope, segfault :D

[19:10] *** oka_ is now known as oka^

[19:10] *** zengargoylew joined
[19:13] <timotimo> tadzik: please don't include the latest JSON::Fast yet. TimToady is going to break it :D

[19:14] <grondilu> timotimo: shouldn't you cast the output of GET_UI16 as well before adding it?

[19:14] <timotimo> grondilu: hm, why?

[19:14] <timotimo> i can't imagine what i'd cast it to that would be more correct

[19:14] <grondilu> I don't know, does it return char *

[19:14] <grondilu> ?

[19:15] <Skarsnik> Not sure you need the * in GET_REG(cur_op, 0).i64 = *target

[19:15] <timotimo> no, it's not supposed to be char *

[19:15] <dalek> rakudo/nom: ce69f30 | TimToady++ | / (6 files):

[19:15] <dalek> rakudo/nom: rename SEQ() to STATEMENT_LIST()

[19:15] <dalek> rakudo/nom: 

[19:15] <dalek> rakudo/nom: The term "sequence" is already badly overloaded without SEQ().

[19:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ce69f3089c

[19:15] <grondilu> then I'm surprised you can add it to a char*

[19:15] <timotimo> i'll be AFK for a tiny bit

[19:15] <timotimo> grondilu: that's just regular pointer arithmetic

[19:15] <timotimo> like a[5]

[19:16] <grondilu> yeah, my bad

[19:18] <[Coke]> ok, collapsed a lot of duplicate committer names on that list.

[19:19] <RabidGravy> tadzik, JSON::Unmarshal borked in today's rakudo https://github.com/tadzik/JSON-Unmarshal/pull/14 fixes

[19:21] <hoelzro> new docker image for Rakudo Star 2015.11 is up: https://hub.docker.com/_/rakudo-star/

[19:22] <hahainternet> timotimo: my friend says not enough context for him to help sorry

[19:23] <hahainternet> timotimo: shout me when you're back and lemme see if we can context it up

[19:25] *** lestrrat left
[19:26] <timotimo> hahainternet: i'm back :)

[19:26] *** qcoh_ joined
[19:26] <timotimo> i'll paste some more crap

[19:26] <hahainternet> timotimo: i've asked my friend to drop in if he has time, if not i'll paste more to him

[19:26] <hahainternet> he's much MUCH more of a C/C++/low level expert than I am

[19:27] <grondilu> timotimo: didn't you just add intermediate variables?

[19:27] <grondilu> (o and target, that is)

[19:30] <water_melon> Hello all, I see on http://doc.perl6.org/language/nativecall under Typed Pointers it says TBD. Does that mean it's not possible to use IntPtr type in NativeCall? I'm having trouble using SystemParametersInfo from user32.dll. Gives error "Cannot locate symbol"

[19:30] *** lestrrat joined
[19:30] <Skarsnik> it's mostly not implemented? (It probably exist)

[19:30] <grondilu> m: use NativeCall; my IntPtr $p;

[19:31] <Skarsnik> but you can work around with nativecast

[19:31] <camelia> rakudo-moar c0edfc: OUTPUT«5===SORRY!5===␤Type 'IntPtr' is not declared. Did you mean 'IntStr'?␤at /tmp/UHtZl0Vry2:1␤------> 3use NativeCall; my IntPtr7⏏5 $p;␤Malformed my␤at /tmp/UHtZl0Vry2:1␤------> 3use NativeCall; my7⏏5 IntPtr $p;␤␤»

[19:31] <Skarsnik> m: use NativeCall; my Pointer[int32] $p;

[19:31] <camelia> rakudo-moar c0edfc: ( no output )

[19:31] <TimToady> m: SEQ(123; 456)

[19:31] <camelia> rakudo-moar ce69f3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/yKFK6p6vgH␤Use of unsupported SEQ macro; please change to STATEMENT_LIST␤at /tmp/yKFK6p6vgH:1␤------> 3SEQ(7⏏05123; 456)␤»

[19:32] <grondilu> (if anything the name should be more intPtr than IntPtr, btw)

[19:33] * TimToady wonders how much other undocumented internal stuff has been used in the ecosystem...

[19:33] <Skarsnik> water_melon, what you can do, work with OpaquePointer and and when you need the cstruct behind, do this my c_struct_type_foo $p = nativecast(c_struct_type_foo, $pointer);

[19:33] <timotimo> just when i wrote that, the internet connection died

[19:33] <timotimo> grondilu: in the latest local version i also put ** instead of *

[19:34] <Skarsnik> Did you try removing the * when you affect to GET_ ?

[19:34] <TimToady> of course, now STATEMENT_LIST in undocumented internal stuff, but I can live with that :)

[19:36] <timotimo> hahainternet: i added a second file that has an example invocation of one of the ops in question in pseudocode. hopefully that makes things a little clearer?

[19:36] <TimToady> *is

[19:36] <hahainternet> timotimo: will pass it across

[19:37] <timotimo> thank you kindly

[19:37] <timotimo> at some point i really have to learn this by heart

[19:38] <flussence> does anyone have a pre-written bashrc incantation for putting the post-curli perl6 bin path in $PATH? I really don't like the idea of having to parse `perl6 --version` output in there.

[19:39] <timotimo> grondilu: if you f5 that gist, you'll see the version with **

[19:39] <FROGGS> water_melon: TBD just means "To Be Documented" there

[19:40] <timotimo> grondilu: but it doesn't compile because i probably need to add ** on the LHS of the last assignment in bind

[19:40] <FROGGS> water_melon: a typed pointer is something like Pointer[int32], as shown

[19:41] <FROGGS> m: use NativeCall; constant IntPtr = Pointer[int32]; my IntPtr $a = 42; # water_melon

[19:41] <camelia> rakudo-moar ce69f3: OUTPUT«Type check failed in assignment to $a; expected Pointer but got Int␤  in block <unit> at /tmp/SHzTTch14_:1␤␤»

[19:41] <FROGGS> ups

[19:41] <FROGGS> okay, that assignment was bogus :o)

[19:42] <FROGGS> m: use NativeCall; constant IntPtr = Pointer[int32]; my IntPtr $a .= new;

[19:42] <camelia> rakudo-moar ce69f3: ( no output )

[19:42] <timotimo> oh damn it. did i put the wrong operator order in there?

[19:42] <grondilu> if what you want is returning the pointer, what about just GET_REG(cur_op, 0).i64 = ((MVMint64 *)((char *)GET_REG(cur_op, 2).o + GET_UI16(cur_op, 4)));

[19:43] <timotimo> hahainternet: problem solved!

[19:43] <hahainternet> timotimo: oh damn he just figured it out i think

[19:43] <timotimo> hahainternet: the version i updated the gist with last is the one that works

[19:43] <timotimo> all i needed was ** everywhere

[19:43] <timotimo> the reason i got the segfault was because i confused the second and third operator in code-gen

[19:44] <timotimo> but the journey isn't over yet!

[19:44] <timotimo> i still have to implement the same thing in the JIT :)

[19:44] <timotimo> and i suck at ASM :D

[19:44] <water_melon> Thanks for the help so far. SystemParametersInfo takes (int32, int32, Pointer[int32], int32) and I was thinking that the "Cannot locate symbol" error was because of wrong argument types, but it still cannot be located. I'm porting some code from perl 5 and it works fine there with Win32::API

[19:45] <Skarsnik> FROGGS, that really work? how you use it to get the struct behind? like my int32 $foo = $

[19:45] <Skarsnik> put OpaquePointer?

[19:45] <hahainternet> timotimo: i suck at C, so this is already way over my head ;)

[19:46] <water_melon> lol I learned perl because I didn't want to learn C

[19:46] <dha> I try to do all my programming in hq9+ :-)

[19:46] <hahainternet> i know a little C but trying to deal with macros and complex pointer ops, no thanks

[19:47] *** vincent__ joined
[19:47] <timotimo> :D

[19:47] *** vincent__ is now known as Guest1854

[19:47] <Skarsnik> m: use NativeCall; my Pointer[int32] $p; my int32 $b = $p;

[19:47] <camelia> rakudo-moar ce69f3: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/SOyN92QaXr:1␤␤»

[19:48] <timotimo> hahainternet: i still appreciate you connected me to your friend; tell him i'm sorry to cause him work and then invalidate it right at the end :(

[19:48] <Skarsnik> Not even sure how to put a value in this lol

[19:48] <RabidGravy> water_melon, you did do " SystemParametersInfo( ..... ) is native('user32')" ?

[19:49] <timotimo> m: use NativeCaall; my Pointer[int32] $p; say $p.^methods;

[19:49] <camelia> rakudo-moar ce69f3: OUTPUT«===SORRY!===␤Could not find NativeCaall:ver<True>:auth<True>:api<True> in:␤    /home/camelia/.perl6/2015.11-304-gce69f30␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rak…»

[19:49] <[Coke]> m: say "a" ~~ /a/;

[19:49] <camelia> rakudo-moar ce69f3: OUTPUT«｢a｣␤»

[19:49] <RabidGravy> specifying the library is important

[19:49] <timotimo> m: use NativeCall; my Pointer[int32] $p; say $p.^methods;

[19:49] <camelia> rakudo-moar ce69f3: OUTPUT«(of deref perl of gist Int Numeric new deref)␤»

[19:50] <water_melon> RabidGravy: my code is "sub SystemParametersInfo(int32, int32, Pointer[int32], int32)

[19:50] <water_melon> 	returns int32

[19:50] <water_melon> 	is native("user32")

[19:50] <water_melon> 	{ * }"

[19:50] <FROGGS> m: use NativeCall; constant IntPtr = Pointer[int32]; my IntPtr $a .= new; # if the pointer got malloced, you could do: say $a.deref

[19:50] *** kyclark joined
[19:50] <camelia> rakudo-moar ce69f3: ( no output )

[19:50] <FROGGS> Skarsnik: ^^

[19:50] <flussence> .oO( shouldn't those error messages be printing “:ver<*>:auth<*>:api<*>”? )

[19:50] <FROGGS> though, there is no way yet to nicely malloc/free or to set the value a pointer is pointing to

[19:50] <water_melon> crap i didn't know my irc client would post each line as its own message

[19:50] <RabidGravy> weird

[19:51] <kyclark> http://lpaste.net/146228

[19:51] <kyclark> Cannot find method 'CALL-ME'

[19:51] <Skarsnik> m: use NativeCall; my Pointer[int32] $p .= new; $p.deref = 42;my int32 $b = $p; say $b;

[19:51] <camelia> rakudo-moar ce69f3: OUTPUT«(signal SEGV)»

[19:51] <timotimo> kyclark: you want to use $john."$att"()

[19:51] <kyclark> I'm just naively trying some Perl6 object stuff, I was hoping to called "$obj.$method"

[19:51] <FROGGS> water_melon: "Cannot locate symbol" means that "SystemParametersInfo" is not found

[19:51] <RabidGravy> might need to try "is native('User32.dll')"

[19:51] <timotimo> $obj.$method is when you have an actual method or routine object in $method

[19:51] <kyclark> Aha!  Thanks.

[19:52] <FROGGS> water_melon: or are you trying to bind a C++ lib?

[19:52] <n0tjack> going through the Rakudo source is a good way to learn more obscure-ish p6 features

[19:52] <Skarsnik> RabidGravy, nc put the .dll

[19:52] <timotimo> m: sub do_it($foo) { say "doing it to $foo!" }; my $thingie = &do_it; my $subject = 1000; $subject.$thingie

[19:52] <camelia> rakudo-moar ce69f3: OUTPUT«doing it to 1000!␤»

[19:52] <timotimo> kyclark: ^ little example

[19:53] <FROGGS> kyclark: needs to be $john."$att"() in your case

[19:53] <Skarsnik> FROGGS, commit my apiversion patch xD

[19:53] <FROGGS> Skarsnik: what patch?

[19:54] <timotimo> FROGGS: already helped 'em :)

[19:54] <kyclark> timotimo, what would it look like to have a method?  my $method = &$john.age;  ??

[19:54] <water_melon> RabidGravy: I'm porting the following line from perl5 to perl6 - "my $syspinf = Win32::API->new('user32','SystemParametersInfo', [I,I,P,I], I)" NativeCall replaces Win32::API for uses like these, correct?

[19:54] <Skarsnik> FROGGS, rt 126645, the last comment x)

[19:55] <Skarsnik> water_melon, what is the C code

[19:55] <Skarsnik> don't look at perl5

[19:55] <timotimo> kyclark: it's a bit more involved. here's an example:

[19:55] <[Coke]> current listing of names has 699 people.

[19:56] <dalek> mu: ec9866f | TimToady++ | misc/perl6advent-2015/schedule:

[19:56] <dalek> mu: claim Christmas Eve

[19:56] <dalek> mu: review: https://github.com/perl6/mu/commit/ec9866f9fc

[19:56] <timotimo> m: my $meth = Str.^find_method("uc"); say $meth.perl; say "hello".$meth

[19:56] <camelia> rakudo-moar ce69f3: OUTPUT«method uc (Str $: | is raw) { #`(Method|46153792) ... }␤HELLO␤»

[19:56] <timotimo> kyclark: the ".^" means "call a method on the meta-object", which is what allows us to ask the Str class for what methods it has

[19:57] <kyclark> Huh, it works.  my $method = Human.^find_method("name");

[19:57] <TimToady> perhaps the 25th should just be the release notes :)

[19:57] <kyclark> Thanks.

[19:58] <water_melon> Skarsnik, SystemParametersInfo is documented at https://msdn.microsoft.com/en-us/library/aa932539.aspx

[19:59] <timotimo> kyclark: you're quite welcome :)

[19:59] <[Coke]> TimToady: or a "ha! made you look, just kidding."

[19:59] <kyclark> timotimo, can I use a similar method to ask a class/object all of its methods?

[20:00] <FROGGS> Skarsnik: ahh, that api version

[20:00] <[Coke]> (just kidding!)

[20:00] <kyclark> And where are docs on this so I can haz the readz?

[20:00] <TimToady> m: say DateTime.^methods

[20:00] <camelia> rakudo-moar ce69f3: OUTPUT«(check-time now clone clone-without-validating Instant posix offset offset-in-minutes offset-in-hours later earlier truncated-to whole-second in-timezone utc local Date Str day-of-month check-value IO daycount-from-ymd get-daycount day-of-week check-date d…»

[20:00] <water_melon> Skarsnik, https://msdn.microsoft.com/en-us/library/windows/desktop/ms724947%28v=vs.85%29.aspx is more helpful actually

[20:00] <kyclark> Whoa, nice.

[20:01] <TimToady> m: say DateTime.^methods[1]()

[20:01] <camelia> rakudo-moar ce69f3: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/fwpEOaWLj_:1␤␤»

[20:01] <[Coke]> any thoughts on trying to get Šuppa to sort near Sośnierz instead of dead last?

[20:01] <TimToady> m: say DateTime.^methods[1](DateTime)

[20:01] <camelia> rakudo-moar ce69f3: OUTPUT«2015-11-30T21:01:24+01:00␤»

[20:02] <kyclark> What do I get back from .^methods?  It will stringify, but I can't do say "all methods = ", join ', ', Human.^methods;

[20:02] <TimToady> [Coke]: international collation is a world of hurt :)

[20:02] <Skarsnik> water_melon, I think your issue is it does not find the symbol at all. does the dll is in standard path?

[20:03] <psch> m: Any.^methods[0].WHAT.say

[20:03] <camelia> rakudo-moar ce69f3: OUTPUT«(Method+{<anon|74369136>})␤»

[20:03] <RabidGravy> kyclark, a list of Method objects

[20:03] <TimToady> but as a first approximation, sort on NFD?

[20:03] <psch> m: my Str $all-methods = map *.Str, Any.^methods; say $all-methods

[20:03] <camelia> rakudo-moar ce69f3: OUTPUT«Type check failed in assignment to $all-methods; expected Str but got Seq␤  in block <unit> at /tmp/myASEHqFBz:1␤␤»

[20:03] <psch> m: my Str $all-methods = join ', ', map *.Str, Any.^methods; say $all-methods

[20:03] <camelia> rakudo-moar ce69f3: OUTPUT«Method object coerced to string (please use .gist or .perl to do that)  in whatevercode  at /tmp/Nn2L4YJSEx:1␤Method object coerced to string (please use .gist or .perl to do that)  in whatevercode  at /tmp/Nn2L4YJSEx:1␤Method object coerced to string …»

[20:04] <psch> oh, right, that warning

[20:04] <masak> TimToady: happily, "statement list" is a concept used both by STD.pm6 and 007, with pretty much that meaning

[20:04] <psch> m: my Str $all-methods = join ', ', map *.perl, Any.^methods; say $all-methods

[20:04] <camelia> rakudo-moar ce69f3: OUTPUT«Method+{<anon|74369136>}.new, Method+{<anon|74369136>}.new, Method+{<anon|74369136>}.new, method cache ($: *%_) { #`(Method|71151664) ... }, Method+{<anon|74369136>}.new, Method+{<anon|74369136>}.new, Method+{<anon|74369136>}.new, Method+{<anon|74369136>}.…»

[20:04] <[Coke]> TimToady: at this point, I just have these 4 https://gist.github.com/coke/63c7bbb82f075c7bb1f5#file-contribs-out-L696 which I can manually shuffle if needed. If anyone wants to try to sort them better, please feel free to try. :)

[20:04] <psch> m: my Str $all-methods = join ', ', map *.name, Any.^methods; say $all-methods # probably usefuller

[20:04] <camelia> rakudo-moar ce69f3: OUTPUT«EXISTS-KEY, DELETE-KEY, DELETE-POS, cache, list, flat, eager, List, Slip, Array, hash, Hash, elems, end, keys, kv, values, pairs, antipairs, invert, pick, roll, iterator, classify, categorize, rotor, reverse, combinations, permutations, join, nodemap, duck…»

[20:04] <psch> kyclark: ^^^ i suppose that's kind of what you were looking for?

[20:05] <lucasb> isn't it better to sort by the first name, not the last name?

[20:05] <water_melon> Skarsnik, the error when the library can't be found is "Cannot locate native 'library foo.dll': error 0x7e, while the error I'm getting is "Cannot locate symbol 'SystemParametersInfo' in native library user32.dll" So it does find user32.dll just fine

[20:06] <lucasb> those emails addresses will be removed, won't they?

[20:06] <kyclark> psch, yeah, I guess so.  I need to figure out how to play with these Method objects.  Can the perl6 REPL source a file?

[20:06] <[Coke]> lucasb: yes, although they're all public already.

[20:06] <dalek> mu: 4f10588 | (Matthew Wilson)++ | misc/perl6advent-2015/schedule:

[20:06] <dalek> mu: claim a slot

[20:06] <dalek> mu: review: https://github.com/perl6/mu/commit/4f105882fa

[20:06] <[Coke]> it's just going to be the name that appears outside of the ｢｣ quotes.

[20:06] <kyclark> And is there builtin help in the REPL?

[20:07] *** spider-mario joined
[20:07] <flussence> m: put sprintf(‘PATH="%s:%s:$PATH’, $*VM.config<bindir>, ???); # golfed my bashrc question. What do I replace «???» with that'll let me run panda again? :)

[20:07] <camelia> rakudo-moar ce69f3: OUTPUT«Stub code executed  in block <unit> at /tmp/qld0a9qmru:1␤PATH="/home/camelia/rakudo-m-inst-1/bin:0:$PATH␤»

[20:07] <psch> kyclark: the REPL can EVALFILE (iirc), but the only help you get is introspection (and minimal tab-complete if you have Linenoise installed)

[20:08] <psch> m: say so &EVALFILE

[20:08] <camelia> rakudo-moar ce69f3: OUTPUT«True␤»

[20:09] *** |Sno| joined
[20:09] <Skarsnik> water_melon, hm, the signature should look like foo(uint32, uint32, OpaquePointer, uint32)

[20:09] <Skarsnik> so it should work

[20:09] <kyclark> psch, the 2nd one was right one.  I'd tried a "map" but was using $_ instead of *.

[20:09] <FROGGS> Skarsnik: forget about OpaquePointer, use Pointer instead

[20:10] <Skarsnik> it's not the same? x)

[20:10] <psch> kyclark: you can use $_ in map, but only in an explicit block.  lots of the opaque magic is gone

[20:10] <[Coke]> lucasb: I'm just including them for diagnostics.

[20:10] <psch> m: map { $_.say }, (1,2,3,4) # like here

[20:10] <camelia> rakudo-moar ce69f3: OUTPUT«1␤2␤3␤4␤»

[20:11] <psch> kyclark: as for help, there's http://doc.perl6.org which also has a CLI tool afair, at http://github.com/perl6/p6doc

[20:11] <lucasb> [Coke]: ok, thanks [Coke]++

[20:11] <lucasb> what about sorting by the first name, not the last?

[20:11] <psch> oh, wrong :l

[20:12] <RabidGravy> I don't suppose anyone's written a thing to parse a crontab

[20:12] *** [Sno] left
[20:12] <psch> kyclark: it's just http://github.com/perl6/doc apparently... :)

[20:13] <[Coke]> lucasb: that's easy to do, but IME, it's typically (in US terminology) last name, first name, middle name.

[20:13] <lucasb> hm, ok

[20:14] *** darutoko left
[20:14] <water_melon> Skarsnik, changing my int32s to uint32s and changing Pointer[int32] to OpaquePointer or Pointer do not change the error. Is it just a guessing game at this point as to what types to provide the function or is something actually wrong with my code? Am I using NativeCall correctly? My full code is at https://github.com/Djent-/Windows-Desktop/blob/master/lib/Windows/Desktop.pm

[20:15] <[Coke]> .u VINCENT

[20:15] <yoleaux> No characters found

[20:16] *** CIAvash left
[20:18] <RabidGravy> water_melon, if it can't find the symbol the changing the signature won't help

[20:18] <n0tjack> has anyone come up with a Grammar to match only valid Roman Numerals?

[20:18] * n0tjack has no idea why his fingers decided to capitalize roman numerals

[20:19] <retupmoca> water_melon: "is nativeconv('stdcall')" maybe? I'm not sure if that changes the symbol lookup

[20:19] *** balazs left
[20:19] <retupmoca> (or however nativecall spells WINAPI / __stdcall calling convention)

[20:20] *** geraud joined
[20:20] <[Coke]> n0tjack: see p5's Regexp::Common::Number /roman

[20:21] <dalek> mu: dc07a2a | (Zoffix Znet)++ | misc/perl6advent-2015/schedule:

[20:21] <dalek> mu: Include info on topics covered, for other authors to know if needed (http://bit.ly/1NEaeSn)

[20:21] <dalek> mu: review: https://github.com/perl6/mu/commit/dc07a2a08a

[20:22] <water_melon> retupmoca: A new error at least, "Type check failed in binding (anon): expected 'Pointer" but got 'Str"

[20:22] <n0tjack> [Coke]: thanks

[20:22] *** cognominal_ joined
[20:23] <[Coke]> it was surprisingly small.

[20:25] *** TEttinger joined
[20:26] *** domidumont left
[20:27] <masak> wow, schedule is filling up nicely

[20:27] <masak> I like this community <3

[20:28] <n0tjack> doing little katas in perl6 is a lot of fun

[20:28] <n0tjack> it really is like the old perl, it just gets out of my way

[20:29] <n0tjack> though the fact that it has a typing system seriously tests my self-restraint on over-engineering before I know anything....

[20:29] <masak> n0tjack: I think that last bit is a matter of habit.

[20:30] <masak> n0tjack: I generally start out largely untyped these days, and then add in types as the thing grows

[20:30] <FROGGS> nine: there?

[20:30] <lizmat> hmmm...  looks like the perl 6 advent calendar site is already showing 2 new advents posts?  one on 30 nov, and one on 2 dec ?

[20:30] <masak> to the point of upgrading from untyped hashes to typed objects, sometimes

[20:30] <nine> FROGGS: yep

[20:31] <n0tjack> masak: yeah, I think falls under "discipline". The language isn't making me do these things, but it has enough treats to tempt me into doing unhealthy stuff.

[20:31] <masak> lizmat: only if you happen to be logged in

[20:31] <FROGGS> nine: do you have an idea how we want to make the alternative bin install paths work?

[20:31] <flussence> m: put sprintf(‘PATH="%s:%s:$PATH"’, $*VM.config<bindir>, ‘$HOME/.perl6/’ ~ comb(/‘rakudo version ’<(\S+/, run($*EXECUTABLE, <--version>, :out).out.get).Str ~ ‘/bin’); # answering my own question... I guess

[20:31] <camelia> rakudo-moar ce69f3: OUTPUT«run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub run at src/RESTRICTED.setting:14␤  in block <unit> at /tmp/Z9OujjwcdE:1␤␤»

[20:31] <masak> lizmat: I was surprised too

[20:31] <lizmat> aahhhh...  ok  :-)

[20:32] <masak> n0tjack: you have to train yourself to be more eager to see the next test pass, so that you don't spend time on typing unnecessary tokens :P

[20:32] <nine> FROGGS: I'm currently working on making panda install into %CUSTOM_LIB<site> again if possible. That will at least give us highly predictable bin/ paths again.

[20:32] *** balazs joined
[20:32] <n0tjack> masak: hmm, I should probably get into the habit of writing tests then ;)

[20:32] <FROGGS> nine: to it feels like I want to tell the repo to have one path for packages, and one for scripts

[20:32] <[Coke]> m: my @a = ('masak', 'Carl Masak', 'Carl Mäsak'); @a.sort({-$_.chars * 100_000_000 - ([+] $_.ords)}).perl.say; 

[20:32] <camelia> rakudo-moar ce69f3: OUTPUT«("Carl Mäsak", "Carl Masak", "masak")␤»

[20:33] <masak> n0tjack: well, duh ;)

[20:33] <FROGGS> to me*

[20:33] <dha> Oh good. I'm actually getting my travel plans together for LPW.

[20:33] *** lucasb left
[20:34] <n0tjack> I'm using to REPLing stuff until my confidence masks my ignorance and I persist whatever I wrote in a script. IOW, I'm using to doing testing, but I don't keep the tests.

[20:34] <masak> the new perl6advent layout is very nice, but I wonder if the headings for the posts could be made less light gray. it looks like the posts are switched off or somethign when they're that light gray.

[20:34] <masak> something*

[20:34] <TimToady> +1

[20:35] <mst> somebody Ctrl-S'ed the blog

[20:35] <masak> if I want bad contrast, I can arrange that locally, on my reading device

[20:36] <FROGGS> hehe

[20:37] <[Coke]> wow, we have 2 ilmaris that have contributed.

[20:37] <dha> They're multiplying?

[20:38] *** Timbus left
[20:39] *** Timbus joined
[20:42] <RabidGravy> so it's PATH=`perl6 -e 'say $*REPO.Str'`/bin:$PATH for the time-being

[20:43] *** water_melon left
[20:45] *** dbohdan_ is now known as dbohdan

[20:46] *** kaare_ left
[20:50] *** bzipitidoo joined
[20:51] <TimToady> hmm, http://doc.perl6.org/language/faq#What_is_the_--%3E_thing_in_the_signature%3F is kind of incorrect

[20:52] <TimToady> lunch &

[20:54] *** water_melon joined
[20:55] <bzipitidoo> I'm back, with more questions. How does ~ work in regexs?  Seems to be an operator with 3 operands.  Far as I can tell, the 1st operand is a set of characters to use for an opening bracket, the 2nd is the closing bracket, and the 3rd is everything in between the brackets.

[20:56] <bzipitidoo> I didn't find any documentation about this use of ~ in http://doc.perl6.org/language/regexes

[20:56] <masak> bzipitidoo: that's correct, as far as I know

[20:56] <masak> bzipitidoo: note that if you have more than one atom for either of the operands, you need to bracketize

[20:57] *** cbk joined
[20:58] <masak> I think I just did a first: a method containing a lexical class with attributes whose *defaults* are some of the method parameters :D

[20:58] <masak> (and it actually simplifies the code quite a bit)

[20:58] <jnthn> Additionally, if it fails to find the terminator, it calls a method FAILGOAL, which you can define in your grammar if you want to do good error reporting

[20:58] <yoleaux> 15:32Z <cygx> jnthn: http://irclog.perlgeek.de/perl6/2015-11-20#i_11574374 was about a non-existing dynamical variable, cf https://github.com/rakudo-p5/v5/commit/a415306b22a9d1156ec1600c4ff8cdd0ddf215c4

[20:59] <bzipitidoo> ok, so far so good.  In the example http://examples.perl6.org/categories/interpreters/lisp.html there is this:       token string {         \c[QUOTATION MARK] ~ \c[QUOTATION MARK]         [ <str> | \\ <str=.str_escape> ]*     }

[20:59] <PerlJam> bzipitidoo: see S05:872 for some info about it.

[20:59] *** water_melon left
[21:00] *** synbot6 joined
[21:00] <PerlJam> S05:872

[21:00] <synbot6> Link: http://design.perl6.org/S05.html#line_872

[21:00] <PerlJam> hello synbot

[21:01] <bzipitidoo> I suppose QUOTATION MARK is a set of characters that includes single and double quote.  Is ~ supposed to be smart, and only match like characters, or would it match a double quote with the next quote, whether single or double?

[21:01] <jnthn> \c[...] is actually just a way to refer to a char by its name

[21:01] <jnthn> So it is a literal "

[21:01] <nine> When we install into %*CUSTOM_LIB<site> precompilation on installation will not actually be all that usefull because $*REPO will be %*CUSTOM_LIB<home> and that's where we get a precomp store from.

[21:04] <psch> nine: do you perhaps have a hint or two for me to figure out the case of the missing repo/precomp on r-j?

[21:04] <psch> nine: i recall you complaining about a mkdir difference between the backends, could that be it?

[21:05] <[Coke]> Cannot find method 'has_compile_time_value'

[21:05] <TEttinger> m: say "\c[APOSTROPHE]"

[21:05] <camelia> rakudo-moar ce69f3: OUTPUT«'␤»

[21:06] <jnthn> TIL that if you are on a plane and it flies through a blizzard, it looks like you're in a space movie going full speed... :)

[21:06] <jnthn> RabidGravy++ # updating the Supply docs

[21:07] <RabidGravy> I wasn't sure that the language is entirely correct

[21:07] <moritz> jnthn: I hope the plane withstood the blizzard without damage :-)

[21:07] <dalek> rakudo/nom: ab6f591 | (Stefan Seifert)++ | src/core/Process.pm:

[21:07] <dalek> rakudo/nom: Store CompUnit::Repositories in %*CUSTOM_LIB

[21:07] <dalek> rakudo/nom: 

[21:07] <dalek> rakudo/nom: This is the second and much more correct attempt. The previous commit with

[21:07] <dalek> rakudo/nom: this name re-introduced the bug where using -I install/share/perl6/site would

[21:07] <dalek> rakudo/nom: make us loose most of the repo chain. This implementation retains the

[21:07] <dalek> rakudo/nom: uniqueness filter when adding repos to the chain.

[21:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab6f591bd0

[21:07] <RabidGravy> Supplier is like a factory and something else

[21:07] <jnthn> moritz: Easily, I think. Wasn't even turbulent.

[21:08] <nine> psch: oh, indeed, that may be it! I thought I fixed it but I couldn't actually try out the fix due to other JVM brokeness that you since fixed.

[21:08] <jnthn> RabidGravy: I'll have a look over it, but a bit tired from the trip.

[21:08] <moritz> wow, only 5 free slots in the advent calendar

[21:08] <jnthn> Wow

[21:08] <psch> nine: right, i'll have a closer look there :)

[21:08] <colomon> \o/

[21:08] <jnthn> Did anyone sign up to do one about the supply syntax?

[21:08] <moritz> ... before we even published the first one

[21:08] <jnthn> I could do one of those, but after LPW :P

[21:08] <RabidGravy> it's fine, no-one noticed the examples weren't working for a month ;-)

[21:09] <moritz> jnthn: the 14th is still free (that's the lastest that's still available)

[21:09] <moritz> jnthn: quick, claim it now :-)

[21:09] <jnthn> Where's the list? :)

[21:09] <bzipitidoo> thx everyone.  Trying to understand perl6 grammars.  Be nice to have a list of reserved (or special) names.  So far I have seen TOP and actions, and now jnthn mentioned FAILGOAL.  Back to playing around with them.

[21:09] <gfldex> jnthn: https://github.com/perl6/mu/blob/master/misc/perl6advent-2015/schedule

[21:09] <moritz> jnthn: perl6/mu on github, file misc/perl6advent-2015/schedule

[21:09] <jnthn> Ah, guess I can edit it on GitHub rather than haivng to clone that repo :)

[21:10] <flussence> m: say Grammar.^methods.map(*.name)

[21:10] <camelia> rakudo-moar ce69f3: OUTPUT«(parse subparse parsefile FAILGOAL upper CAPHASH CALL_SUBRULE !reduce_with_match !protoregex DYNQUANT_LIMITS !fresh_highexpect !BACKREF-LATEST-CAPTURE !DYNQUANT_LIMITS orig !cursor_start !protoregex_nfa !protoregex_table MATCH_SAVE RECURSE !cursor_more !cu…»

[21:12] *** rindolf left
[21:12] <RabidGravy> ooh I didn't realise it  output the "private" methods as well

[21:13] <[Coke]> m: $_="Bruce Gray"; my $x="Andrew Egeler"; m:i:m/$x/;

[21:13] <camelia> rakudo-moar ab6f59: OUTPUT«Invalid string index: max 4, got 5␤  in block <unit> at /tmp/rbJOtklMkQ:1␤␤»

[21:14] <[Coke]> ^^ that's LTA.

[21:14] <[Coke]> ISTR tripping over this earlier, not sure if it's RTd

[21:14] <jnthn> More than LTA, a bug

[21:15] <[Coke]> near the comment "# ignorecase+ignoremark"

[21:15] <grondilu> didn't something like 'my %h = { foo => "bar" };' use to work?

[21:15] <grondilu> (instead of 'my %h = foo => "bar"' that is)

[21:16] * [Coke] kind of wants $a eq:i:m $b

[21:17] <lizmat> m: my $a = "FOO"; my $b = "foo"; say $a eq:i $b

[21:17] <camelia> rakudo-moar ab6f59: OUTPUT«5===SORRY!5=== Error while compiling /tmp/jntRgsIcbf␤Two terms in a row␤at /tmp/jntRgsIcbf:1␤------> 3y $a = "FOO"; my $b = "foo"; say $a eq:i7⏏5 $b␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤       …»

[21:17] <dalek> mu: aa128b5 | jnthn++ | misc/perl6advent-2015/schedule:

[21:17] <dalek> mu: Sign up to do a post

[21:17] <dalek> mu: review: https://github.com/perl6/mu/commit/aa128b5f9c

[21:17] <lizmat> [Coke]: if that would parse, I don't see why we wouldn't be able to make that work  :-)

[21:18] <psch> huh

[21:18] <lizmat> [Coke]: but what would the :m mean ?

[21:18] <psch> trying to fix mkdir on r-j i noticed that r-m doesn't care if we try to create an existing directory

[21:18] <lizmat> ah, ignoremark  :-)

[21:18] <[Coke]> lizmat: ignoremark, same as regexp

[21:18] <psch> ...which i like, because it means i can do the less-code fix for r-j :P

[21:19] <[Coke]> jnthn: the ignorecase/ignoremark code is also using nqp::lc to compare things.

[21:19] <psch> well, except if we *should* complain when trying to create an existing directory

[21:19] <[Coke]> psch: shouldn't we complain only if we tried to create a directory and then a directory didn't exist?

[21:19] <jnthn> [Coke]: Well, fc it...

[21:20] <RabidGravy> but that's more assert-dir rather than mkdir but hey

[21:20] * [Coke] is thinking in terms of "an install process" not literally just on "mkdir"

[21:20] <jnthn> [Coke]: I think I wired up fc on the JVM to use lc as a cheat, so it may be as easy as "replace the op"

[21:20] *** cdg joined
[21:20] <psch> [Coke]: oh.  i'm talking about literal &mkdir

[21:21] <flussence> m: put “PATH="{($*VM.config<bindir>, ($*REPO.repo-chain X~ ‘/bin’), ‘$PATH’).flat.join(‘:’)}"”; # I guess this is as correct as it's gonna get...

[21:21] <camelia> rakudo-moar ab6f59: OUTPUT«PATH="/home/camelia/rakudo-m-inst-2/bin:/home/camelia/.perl6/2015.11-305-gab6f591/bin:/home/camelia/rakudo-m-inst-2/share/perl6/site/bin:/home/camelia/rakudo-m-inst-2/share/perl6/vendor/bin:/home/camelia/rakudo-m-inst-2/share/perl6/bin:$PATH"␤»

[21:21] <psch> [Coke]: as in, r-m doesn't complain about < my $path = "foo".IO; mkdir $path; mkdir $path >

[21:22] <psch> (this is motivated by r-j being broken currently, which seems to be at least related to mkdir, because r-j mkdir doesn't create directories recursively)

[21:23] <psch> the easy fix for r-j (as in, nqp-j::mkdir) is using Files.createDirectories instead of Files.createDirectory, but the former doesn't throw on trying to create an existing directory

[21:23] <psch> which moar also doesn't

[21:23] <psch> which is why i was about moar not complaining :)

[21:24] *** |Sno| left
[21:24] <psch> +glad

[21:24] <nine> Who needs a specification when you can emulate an implementation ;)

[21:25] <[Coke]> jnthn: added RT #126771

[21:25] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126771

[21:25] <psch> well, moar's the favored backend for a reason, i try to think :P

[21:25] <hankache> anyone ever used multidimensional arrays?

[21:26] <ugexe> m: say %*CUSTOM_LIB; # is this not supposed to be used outside core now?

[21:26] <camelia> rakudo-moar ab6f59: OUTPUT«Dynamic variable %*CUSTOM_LIB not found␤  in block <unit> at /tmp/zUtypmG5DM:1␤␤Actually thrown at:␤  in block <unit> at /tmp/zUtypmG5DM:1␤␤»

[21:27] <jnthn> hankache: If "writing hundreds of tests for them" counts as using, I guess I have... :)

[21:27] <[Coke]> hankache: Doubt they've been out long enough for anyone to do anything really big, but sure - what's your question?

[21:27] <[Coke]> ... aside from jnthn who wrote everything and I was trying to avoid throwing him under the bus. :)

[21:27] <hankache> hi jnthn [Coke]

[21:28] <[Coke]> m: use lib 'lib'; use lib 'lib'; use lib 'lib';  say @*INC.grep(* eq 'file#lib').elems

[21:28] <camelia> rakudo-moar ab6f59: OUTPUT«Dynamic variable @*INC not found␤  in block <unit> at /tmp/kT3E65THEn:1␤␤Actually thrown at:␤  in block <unit> at /tmp/kT3E65THEn:1␤␤»

[21:28] <[Coke]> ^^ nine: that's from RT #126718

[21:28] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126718

[21:29] <hankache> is it normal that both arrays are the same? https://gist.github.com/hankache/481ddf2834b0eb0947f0

[21:30] <[Coke]> hankache: you're getting bitten by "say"

[21:30] <jnthn> Yes, they'll gist the same

[21:30] <[Coke]> say calls ".gist" and gives you an overview of the object. try "say @thing.perl" to see a closer-to-the-metal version.

[21:31] <jnthn> And what [Coke] said

[21:31] <[Coke]> with .perl you get:

[21:31] <[Coke]> Array.new(:shape(2, 2), [1, "x"], [2, "y"])

[21:31] <[Coke]> [[1, "x"], [2, "y"]]

[21:31] <TimToady> or use "put" to mean "print with a newline"

[21:32] <[Coke]> TimToady: that doesn't help show the difference.

[21:32] <[Coke]> they put the same, also.

[21:32] * TimToady didn't actually read the backlog :)

[21:32] <hankache> ah i see, i should have used .gist

[21:32] <jnthn> We noticed :P

[21:32] <[Coke]> no worries. :)

[21:32] *** parisba_ is now known as parisba

[21:33] <[Coke]> hankache: no, you DID use .gist

[21:33] <hankache> hi TimToady

[21:33] <[Coke]> say @foo is the same as say @foo.gist

[21:34] <TimToady> .oO(which is the same as put @foo.gist)

[21:35] <[Coke]> my @a=1,2,3;say @a.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist;

[21:35] <[Coke]> m: my @a=1,2,3;say @a.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist.gist;

[21:35] <camelia> rakudo-moar ab6f59: OUTPUT«[1 2 3]␤»

[21:35] <[Coke]> (was wondering why that was so slow the first time. :)

[21:35] *** dha left
[21:36] <hankache> [Coke] meant .perl ;(

[21:36] *** Guest1854 left
[21:37] <hankache> is there any methods/subs that i can use only on multidimensional arrays and not on normal ones?

[21:38] <jnthn> hankache: No, the difference is more in their behavior

[21:38] <jnthn> m: my @a = [1,2], [3,4]; say @a.values;

[21:38] <camelia> rakudo-moar ab6f59: OUTPUT«([1 2] [3 4])␤»

[21:38] <jnthn> m: my @a[2;2] = [1,2], [3,4]; say @a.values;

[21:38] <camelia> rakudo-moar ab6f59: OUTPUT«(1 2 3 4)␤»

[21:39] <hankache> if i consider a multidim array as a table, can i push a whole row instead of cell by cell?

[21:40] <hankache> thanks jnthn

[21:40] <hankache> I am trying to see how i can use multidimensional arrays to store data fetched from a DB

[21:42] <gfldex> m: my @a[3;3]; @a[0..2;1] = (1,2,3); dd @a;

[21:42] <camelia> rakudo-moar ab6f59: OUTPUT«Partially dimensioned views of arrays not yet implemented. Sorry. ␤  in block <unit> at /tmp/e8EfNZ6kOY:1␤␤»

[21:45] <hankache> on that note, what do you  use if you want to store data fetched from a DB? in atabular format

[21:45] <moritz> well, an arrays isn't a bad choice :-)

[21:45] *** bjz left
[21:45] *** emdashcomma left
[21:48] *** emdashcomma joined
[21:48] <jnthn> For now, indexing into multi-dim arrays will be a little tedious, as gfldex just noticed. Eventually that should work.

[21:49] <jnthn> Not sure we've time to make it happen this side of 6.c, but that's fine; the syntax is reserved and throws an NYI, we can come back to it in the future.

[21:50] <hankache> thank you jnthn moritz

[21:50] *** diakopter_______ joined
[21:51] <hankache> thanks gfldex

[21:51] <n0tjack> just coming back to this, but shaped arrays and indexing is relevant for a larger project I'm considering - are they slated for 2016?

[21:54] <dalek> doc: 4eed22e | TimToady++ | doc/Language/faq.pod:

[21:54] <dalek> doc: --> is not checked at compile time

[21:54] <dalek> doc: review: https://github.com/perl6/doc/commit/4eed22ea5d

[21:54] *** bjz joined
[21:55] <psch> n0tjack: native shaped arrays are already there i gather

[21:55] <psch> m: my int @a[2;3]; 

[21:55] <camelia> rakudo-moar ab6f59: ( no output )

[21:56] *** xfix left
[21:56] <jnthn> n0tjack: Shaped arrays are there, just not as convenient to work with or as performant as you might hope. Yes, improvements on both are probably something for 6.d

[21:57] <jnthn> Well, performnce isn't part of the language spec. :)

[21:57] <jnthn> But my expectation is that we'll be doing a lot of perfoormance engineering in 2016, and not a lot of feature.

[21:57] * psch secretly plots a brainfuck impl of perl6

[21:57] <jnthn> (And robustness, and so on)

[21:57] <n0tjack> thanks psch, jnthn 

[21:58] <psch> fwiw, i'll probably do a lot of features, but those'll likely be r-j confined

[21:58] <jnthn> As in, get r-j up to parity? :)

[21:58] <psch> well, yes, that too

[21:58] *** skids left
[21:59] * jnthn suspects NFG on JVM will be one of the trickier ones.

[21:59] <psch> yeah

[21:59] <psch> not sure i can tackle that one

[21:59] <diakopter_______> just extend JVM with some Unsafe-heavily-depending modules; everyone else does it

[21:59] <psch> interop is kinda my hobbyhorse

[22:00] <jnthn> I suspect I can figure out how to get NFG in

[22:00] *** sno joined
[22:00] <jnthn> One of those "the second impl is eaiser than the first" things :)

[22:00] <Zoffix> diakopter_______, every day I see you grow another _ :) 

[22:00] <jnthn> I'm totally fine with interop features going in. :)

[22:00] *** kjs_ left
[22:00] <psch> jnthn: yeah, i suspect that'd hold.  i don't have anything close to a handle on unicode spec, so i'll readily defer to you there :)

[22:01] <nine> ugexe: %*CUSTOM_LIB is initialized together with $*REPO. So currently it's only available after the first access to $*REPO (like a use or require statement)

[22:01] <psch> nine: updating nqp::mkdir to include subdirs and not throw on existing gives me "Missing serialize function for REPR ContextRef" for install-core-dist.pl

[22:02] <psch> (as in, it dies in the make step that runs install-core-dist.pl with that error)

[22:03] <psch> just as an fyi

[22:04] <jnthn> fwiw, Moar doesn't implement serializing those either

[22:04] *** cognominal_ left
[22:05] <ugexe> nine: thanks. i take it thats likely to change eventually?

[22:05] *** kmel joined
[22:06] *** hankache left
[22:06] <kmel> how do you turn an array into a list?

[22:06] <psch> jnthn: so that's nqp-j over-eagerly throwing on missing serialize for a given REPR..?

[22:07] <psch> kmel: assuming "a list" means "a list of parameters" you can use |@myarray to use an array as a list of positional parameter for routine invocation

[22:07] <nine> psch: can you run that script with --ll-exception?

[22:07] <jnthn> psch: No, I think Moar would throw too

[22:07] <masak> 'night, #perl6

[22:07] <jnthn> psch: So I think there's a bit more going on

[22:08] <psch> jnthn: ah, so more along the lines of trying to serialize where we shouldnt, i gather

[22:08] <diakopter_______> masak: gnikht

[22:08] <psch> 'night masak o/

[22:08] <kmel> night masak

[22:08] *** diakopter_______ left
[22:08] <psch> nine: --ll-exception doesn't really add anything

[22:08] <nine> odd

[22:09] <kmel> psch i think @array.list does it

[22:09] <psch> nine: subnames are "throw, throw, , , sink-all, sink, protect, install, <unit>..."

[22:09] <psch> m: my @a = 1,2,3; say @a.list.WHAT

[22:09] <camelia> rakudo-moar ab6f59: OUTPUT«(Array)␤»

[22:09] <psch> kmel: well, it depends on what you want

[22:10] <psch> kmel: if you want an honest-to-the-interpreter List, .List is probably your best bet :)

[22:10] <psch> m: my @a = 1,2,3; say @a.List.WHAT

[22:10] <camelia> rakudo-moar ab6f59: OUTPUT«(List)␤»

[22:11] <psch> kmel: if you're using list in the perl5 way of a-list-of-parameters, using |@a to lower your array into positional parameters is what you want

[22:11] <kmel> psch yes |@a does the job

[22:12] *** YP-QMUL-W left
[22:12] <nine> Good night all!

[22:12] *** balazs left
[22:13] <kmel> night nine

[22:13] <kmel> m: my @tbl2; @tbl2 = [1,"x"],[2,"y"]; say @tbl2.perl;

[22:13] <camelia> rakudo-moar ab6f59: OUTPUT«[[1, "x"], [2, "y"]]␤»

[22:13] <kmel> m: my @tbl2; @tbl2 = [1,"x"],[2,"y"]; say |@tbl2;

[22:13] <camelia> rakudo-moar ab6f59: OUTPUT«[1 x][2 y]␤»

[22:13] <kmel> m: my @tbl2; @tbl2 = [1,"x"],[2,"y"]; say @tbl2.list;

[22:13] <camelia> rakudo-moar ab6f59: OUTPUT«[[1 x] [2 y]]␤»

[22:13] <kmel> m: my @tbl2; @tbl2 = [1,"x"],[2,"y"]; say @tbl2.List;

[22:13] <camelia> rakudo-moar ab6f59: OUTPUT«([1 x] [2 y])␤»

[22:13] *** kyclark left
[22:14] *** diakopter_______ joined
[22:14] <dalek> doc: 1ce53ae | TimToady++ | doc/Language/faq.pod:

[22:14] <dalek> doc: more FAQ clarifications

[22:14] <dalek> doc: review: https://github.com/perl6/doc/commit/1ce53ae760

[22:16] <[Coke]> TimToady: "instead throws an exception instead of returning" could probably lose the first instead.

[22:16] <kmel> psch the flattening operator | is what I was looking for. thanks

[22:17] <TimToady> [Coke]: thanks

[22:18] <kmel> time to hit the road

[22:18] <kmel> see you later

[22:19] *** kmel left
[22:19] *** kyclark joined
[22:20] <[Coke]> time to hit the gym. blargh.

[22:21] <gtodd> If someon is reading example Perl6 code and can't wait for Christmas and you see:   class Whatever { has $.thing;  has $!privatething;  .... } should they be able to look up what $. and $! are by searching for "$!" in the docs  or should they know they need to search for classes attributes  etc?

[22:22] <gtodd> how "granular" (?) should searching on http://doc.perl6.org be ?

[22:23] <gtodd> oh hmm you can searc hfor $! ... it gives only one result though (variables)

[22:23] *** donaldh joined
[22:24] <gtodd> I guess you would find it be searching for "has" 

[22:26] *** raiph joined
[22:27] *** balazs joined
[22:29] *** Praise joined
[22:29] *** Praise left
[22:29] *** Praise joined
[22:30] *** zengargoylew left
[22:30] *** cgfbee left
[22:30] *** water_melon joined
[22:30] *** kjs_ joined
[22:31] *** qcoh_ left
[22:31] <Hotkeys> gtodd: I think being able to search for that would be useful

[22:31] <dalek> doc: 9e90d1d | TimToady++ | doc/Language/faq.pod:

[22:31] <dalek> doc: more FAQ tweaks

[22:31] <dalek> doc: review: https://github.com/perl6/doc/commit/9e90d1d3f0

[22:31] <donaldh> psch: re "Missing serialize function for REPR ContextRef" try setting NQP_VERBOSE_EXCEPTIONS

[22:32] <Hotkeys> TimToady: can we implement time travel in perl 6?

[22:32] <donaldh> m: sleep 1 # time travel in one direction

[22:32] <camelia> rakudo-moar ab6f59: ( no output )

[22:33] <Hotkeys> I mean apart from real-time forward time travel

[22:33] *** cgfbee joined
[22:34] <diakopter_______> that's a self-fulfilling prophecy request prophecy

[22:36] *** khw left
[22:37] <RabidGravy> anyone got a thought of how to make a subset of JUnction which the range of values is constrained?

[22:37] <RabidGravy> like

[22:38] <RabidGravy> m: subset Minute of Junction where * ~~ all(0 .. 59); my Minute $m = any(0 .. 59); my Minute $m2 = any(10,11)

[22:38] <camelia> rakudo-moar ab6f59: OUTPUT«Type check failed in assignment to $m2; expected Minute but got Junction␤  in block <unit> at /tmp/IMC_wHfCSJ:1␤␤»

[22:38] <RabidGravy> except the second one works

[22:38] *** espadrine joined
[22:39] <RabidGravy> but "my Minute $m = any(10, 70)" doesn't work

[22:40] *** llfourn joined
[22:44] *** njmurphy_ joined
[22:49] *** mephinet left
[22:50] *** bjz left
[22:51] *** khw joined
[22:51] *** uruwi joined
[22:52] <AlexDaniel> m: say ‘hello’; sleep -10; say ‘time travel’

[22:52] <camelia> rakudo-moar ab6f59: OUTPUT«hello␤time travel␤»

[22:53] <AlexDaniel> m: say ‘hello’; sleep -Inf; say ‘time travel’

[22:53] <camelia> rakudo-moar ab6f59: OUTPUT«hello␤time travel␤»

[22:53] <AlexDaniel> m: say ‘hello’; sleep NaN; say ‘time travel’

[22:53] <camelia> rakudo-moar ab6f59: OUTPUT«hello␤time travel␤»

[22:53] <AlexDaniel> m: say ‘hello’; sleep ‘five hours’; say ‘time travel’

[22:53] <camelia> rakudo-moar ab6f59: OUTPUT«hello␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '7⏏5five hours' (indicated by 7⏏)␤  in block <unit> at /tmp/LUoAZmllEm:1␤␤Actually thrown at:␤  in block <unit> at /tmp/LUoAZmllEm:1␤␤»

[22:53] <Hotkeys> m: subset Minute of Junction where * ~~ all(0 .. 59); my Minute $m = any(0 .. 59); my Minute $m2 = any(10,11); my Minute $m3 = any(0, 59); my Minute $m4 = any(1 .. 58);

[22:53] <camelia> rakudo-moar ab6f59: OUTPUT«Type check failed in assignment to $m2; expected Minute but got Junction␤  in block <unit> at /tmp/V09CmB6TfW:1␤␤»

[22:54] <Hotkeys> m: subset Minute of Junction where * ~~ all(0 .. 59); my Minute $m = any(0 .. 59); my Minute $m3 = any(0, 59); my Minute $m4 = any(1 .. 58);

[22:54] <camelia> rakudo-moar ab6f59: OUTPUT«Type check failed in assignment to $m3; expected Minute but got Junction␤  in block <unit> at /tmp/wW3VBJMC7Y:1␤␤»

[22:54] <Hotkeys> m: subset Minute of Junction where * ~~ all(0 .. 59); my Minute $m = any(0 .. 59); my Minute $m4 = any(1 .. 58);

[22:54] <camelia> rakudo-moar ab6f59: OUTPUT«Type check failed in assignment to $m4; expected Minute but got Junction␤  in block <unit> at /tmp/lGeeQyDQl1:1␤␤»

[22:54] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2015/11/30/2015-4849-arrays-shape-up-curli-lands-and-supply-splits/

[22:54] <AlexDaniel> Hotkeys: arguably sleep with negative values should throw NYI warning

[22:54] <Hotkeys> m: say any(10,11) ~~ any(0..59);

[22:54] <camelia> rakudo-moar ab6f59: OUTPUT«True␤»

[22:55] <Hotkeys> oh

[22:55] <uruwi> m: say any(10, 11) ~~ 0 .. 59

[22:55] <camelia> rakudo-moar ab6f59: OUTPUT«any(True, True)␤»

[22:55] <Hotkeys> m: say any(10,11) ~~ all(0..59);

[22:55] <camelia> rakudo-moar ab6f59: OUTPUT«False␤»

[22:55] <uruwi> m: say True ~ any(10, 11) ~~ 0 .. 59

[22:55] <camelia> rakudo-moar ab6f59: OUTPUT«False␤»

[22:55] <uruwi> m: say True ~~ any(10, 11) ~~ 0 .. 59

[22:55] <camelia> rakudo-moar ab6f59: OUTPUT«True␤»

[22:55] <uruwi> m: say True ~~ (any(10, 11) ~~ 0 .. 59)

[22:55] <camelia> rakudo-moar ab6f59: OUTPUT«True␤»

[22:55] <uruwi> m: say (True ~~ any(10, 11)) ~~ 0 .. 59

[22:55] <camelia> rakudo-moar ab6f59: OUTPUT«True␤»

[22:56] <uruwi> what

[22:56] <Hotkeys> Why is minute being defined with all(0..59)

[22:56] <Hotkeys> uruwi: 

[22:56] <Hotkeys> m: say so 0..59

[22:56] <camelia> rakudo-moar ab6f59: OUTPUT«True␤»

[22:56] <Hotkeys> probably why

[22:59] <Hotkeys> RabidGravy: Why is minute being defined with all(0..59) instead of any(0..59)

[23:00] <lizmat> hmmm... looks like day 2 of the advent calendar is visible to the world ?

[23:00] <lizmat> sorry, crying wolf

[23:00] *** kyclark left
[23:01] <RabidGravy> for no particular reason, I just can't work out a way of saying "any subset of this junction"

[23:01] <AlexDaniel> m: say $*TOLERANCE

[23:01] <camelia> rakudo-moar ab6f59: OUTPUT«1e-15␤»

[23:02] *** lichtkind left
[23:02] <AlexDaniel> m: ^100 .rand.say

[23:02] <camelia> rakudo-moar ab6f59: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/Uh8pq0Nbyo:1␤Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/Uh8pq0Nbyo:1␤0␤»

[23:03] *** telex left
[23:03] <AlexDaniel> m: ^100.WHAT

[23:03] <camelia> rakudo-moar ab6f59: OUTPUT«Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at /tmp/4Hsdbrbf4n:1␤    ------> 3^1007⏏5.WHAT␤WARNINGS:␤Useless use of "^" in expression "^100.WHAT" in sink context (line 1)␤Use of uninitia…»

[23:03] <AlexDaniel> m: ^100 .WHAT

[23:03] <camelia> rakudo-moar ab6f59: OUTPUT«===SORRY!===␤Method call must either supply a name or have a child node that evaluates to the name␤»

[23:03] *** uruwi left
[23:03] *** n0tjack left
[23:03] <AlexDaniel> m: (^100).rand.say

[23:03] <camelia> rakudo-moar ab6f59: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/qHG1yYclJ_:1␤Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/qHG1yYclJ_:1␤0␤»

[23:03] <RabidGravy> that is I want a subset of Junction that is a Junction that will match some minutes.

[23:04] <AlexDaniel> m: say (^100).rand

[23:04] <lizmat> AlexDaniel: hmmmm... looking into that

[23:04] <camelia> rakudo-moar ab6f59: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/iL8LwR7QQi:1␤Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/iL8LwR7QQi:1␤0␤»

[23:04] *** telex joined
[23:04] <lizmat> hmmm... it should fail

[23:05] <lizmat> m: my $a = ^100 .rand; say $a

[23:05] <camelia> rakudo-moar ab6f59: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/FVd4UEMbyw:1␤Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/FVd4UEMbyw:1␤0␤»

[23:05] <AlexDaniel> it works on g308b9b7 though

[23:05] <lizmat> hmmm....  wietrd

[23:05] <lizmat> m: say (0.1 .. 0.3).rand

[23:05] <camelia> rakudo-moar ab6f59: OUTPUT«0.255097074306016␤»

[23:06] <RabidGravy> I think I'll just leave that as Junction for the time being

[23:06] <AlexDaniel> uh what is the difference?

[23:07] <lizmat> m: my $a = ("a".."z").rand; say $a

[23:07] <camelia> rakudo-moar ab6f59: OUTPUT«Can only get a random value on Real values␤  in block <unit> at /tmp/gtI5_dU7Ux:1␤␤Actually thrown at:␤  in block <unit> at /tmp/gtI5_dU7Ux:1␤␤»

[23:07] <lizmat> hmmm....

[23:08] * Hotkeys is excited for the perl 6 calendar

[23:08] <Hotkeys> Er

[23:08] <Hotkeys> Advent calendar

[23:08] <Hotkeys> I assume it is happening again this year

[23:08] <Hotkeys> I hope it is

[23:09] <hartenfels> Hotkeys: https://github.com/perl6/mu/blob/master/misc/perl6advent-2015/schedule

[23:09] <Hotkeys> Woo

[23:11] *** lucasb joined
[23:13] *** khw left
[23:14] *** kid51 joined
[23:16] <lizmat> m: say (1..10).rand

[23:16] <camelia> rakudo-moar ab6f59: OUTPUT«5.1859874970708␤»

[23:16] *** hankache joined
[23:17] <Hotkeys> lizmat: 

[23:17] <lizmat> AlexDaniel: seems the bug is in if any of the endpoints are excluded

[23:17] <lizmat> fixing now

[23:17] <Hotkeys> er

[23:17] <Hotkeys> nvm

[23:17] <lizmat> Hotkeys++  :-)

[23:17] <AlexDaniel> lizmat++ :-)

[23:17] <Hotkeys> I saw

[23:18] <Hotkeys> <lizmat> m: my $a = ("a".."z").rand; say $a

[23:18] <Hotkeys> and thought you meant .pick

[23:18] <Hotkeys> but I guess now

[23:18] <Hotkeys> not

[23:18] <lizmat> no, .pick works, .rand should fail

[23:18] *** diakopter_______ left
[23:19] <Hotkeys> right

[23:19] <Hotkeys> also

[23:19] <Hotkeys> '2 bind or !2 bind - gfldex' I like this title

[23:20] *** geraud left
[23:20] <lucasb> Are the LPW talks getting recorded and put on youtube? I hope yes

[23:20] *** uruwi joined
[23:21] <lizmat> lucasb: I have no idea

[23:21] <lizmat> can you find any from last year ?

[23:21] <uruwi>  /msg NickServ VERIFY REGISTER uruwi ryibyirffpen

[23:21] <lizmat> then probably yes  :-)

[23:21] *** Peter_R left
[23:21] <lucasb> just read the weekly, lizmat++ :)

[23:21] <uruwi> Whoops

[23:21] *** espadrine left
[23:21] <stmuk> lucasb: usually the main ones are

[23:21] *** diakopter_______ joined
[23:22] <lucasb> stmuk: thanks, I'll wait then

[23:22] <lucasb> I'm curious to know the content of the 'the emperor's new programming language' talk :D

[23:23] <lizmat> well, I'm sorta looking forward sitting on row #1 on that one  :-)

[23:23] *** geraud joined
[23:23] <lizmat> not sure if I'll be feeling naked or not  :-)

[23:24] <stmuk> . o O ( look at the tags for that talk )

[23:24] <lizmat> .oO( that whine is definitely not perlsecco )

[23:24] *** water_melon left
[23:25] *** mr-foobar left
[23:25] *** adhoc left
[23:25] *** RabidGravy left
[23:27] <dalek> rakudo/nom: 20718a9 | lizmat++ | src/core/Range.pm:

[23:27] <dalek> rakudo/nom: Fix Range.rand, spotted by AlexDaniel++

[23:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20718a9f98

[23:27] *** mr-foobar joined
[23:28] *** sitaram_ joined
[23:28] *** sitaram_ left
[23:28] *** sitaram_ joined
[23:28] * zengargoyle 's laptop starting to give up the ghost :(  7½ year run is probably not so bad...

[23:29] *** khw joined
[23:29] *** sitaram left
[23:30] <zengargoyle> magic smoke production not keeping up with demand

[23:30] <lizmat> good night, #perl6!

[23:30] <AlexDaniel> m: say “{7+½} year run is not so bad”

[23:30] <camelia> rakudo-moar ab6f59: OUTPUT«7.5 year run is not so bad␤»

[23:32] <lizmat> m: say 7½   # would be brill if that would work  :-)

[23:32] <camelia> rakudo-moar 20718a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/pSF8ejLT7t␤Bogus postfix␤at /tmp/pSF8ejLT7t:1␤------> 3say 77⏏5½   # would be brill if that would work ␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        s…»

[23:32] <zengargoyle> y'know, How to input Unicode on all the things... would make a good advent post.

[23:33] <hankache> lizmat++ #perl6weekly

[23:33] <lizmat> sleep&

[23:33] <diakopter_______> timotimo: can you correct a typo in that p6weekly

[23:34] *** Skarsnik left
[23:34] <diakopter_______> DrForr talk should be http://act.yapc.eu/lpw2015/talk/6465

[23:34] <lizmat> diakopter_______: fixed

[23:34] <lizmat> really sleep&

[23:34] <hankache> bonne nuit lizmat

[23:35] <AlexDaniel> “Tim Toady added an approximately-equal operator, infix:<≅>”

[23:35] * AlexDaniel honestly wonders why it is not ≈

[23:36] <AlexDaniel> .u ≅≈

[23:36] <yoleaux> U+2245 APPROXIMATELY EQUAL TO [Sm] (≅)

[23:36] <yoleaux> U+2248 ALMOST EQUAL TO [Sm] (≈)

[23:36] <AlexDaniel> hmm

[23:36] <diakopter_______> someone asked that on irclog and they said it looks too much like smartmatch

[23:36] <diakopter_______> that's the royal they

[23:36] <timotimo> okay, caught up with the backlog again

[23:36] <timotimo> well, skipped a few lines here and there ... :S

[23:38] <timotimo> lizmat: how do you feel about pointing people to https://hub.docker.com/_/rakudo-star/ from the weekly?

[23:38] <timotimo> you know, since we also pointed out the rakudo star release?

[23:38] <AlexDaniel> .u ≇

[23:38] <yoleaux> U+2247 NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO [Sm] (≇)

[23:39] <timotimo> that's a beautiful name

[23:41] *** kjs_ left
[23:41] <ilmari> .u ≹

[23:41] <yoleaux> U+2279 NEITHER GREATER-THAN NOR LESS-THAN [Sm] (≹)

[23:41] <geekosaur> "almost, but not entirely, completely unlike..."

[23:41] <uruwi> m: my int32 $a = 9; say $a;

[23:41] <camelia> rakudo-moar 20718a: OUTPUT«9␤»

[23:42] * zengargoyle wishes for a fixed bitmap font with slightly better coverage of weird characters.

[23:42] <geekosaur> s/completely//

[23:42] <AlexDaniel> zengargoyle: unifont?

[23:42] <ilmari> zengargoyle: not bitmap, but symbola is good for coverage

[23:43] <uruwi> Hmm, after declaring an int32 variable on the REPL, any subsequent input produces "Unhandled lexical type in lexprimspec for '$a'"

[23:43] <zengargoyle> yeah, want fixed.  good ole plain x font

[23:43] <zengargoyle> can't deal with truetype stuff.  never looks good.

[23:44] <jnthn> 'night, #perl6

[23:44] * ilmari likes anonymous pro for normal fixed-width stuff

[23:44] <AlexDaniel> zengargoyle: right, soooo… unifont?

[23:44] <lucasb> uruwi: interesting, I can reproduce this error here

[23:45] *** rurban left
[23:45] <uruwi> Do I have to explicitly cast int32 into int64 if I want to get a 64-bit product of two 32-bit integers?

[23:46] <zengargoyle> lucasb: unifont looks horrible at the size i normally use.

[23:46] *** yqt joined
[23:47] <lucasb> zengargoyle: well, unicode chars for me all show up as question marks... I guess I live in the 90s :)

[23:47] <uruwi> ツーバッド

[23:47] <AlexDaniel> truetype looks horrible, unifont looks horrible…

[23:47] <timotimo> uruwi: int32 and friends only really work properly when you do NativeCall

[23:48] <timotimo> in other instances, it's usually just a 64bit integer instead

[23:48] <AlexDaniel> actually, I kinda agree. The only font that I can stand is terminus, but the coverage is duh…

[23:48] <zengargoyle> good old misc-fixed works mostly, get ≹ ≅ ... most things.  but not say 💡 or 🔌

[23:48] <uruwi> So what should I use instead?

[23:48] <timotimo> the % operator perhaps? :(

[23:51] *** skids joined
[23:52] *** mr-foobar left
[23:52] *** hankache left
[23:52] *** sitaram_ left
[23:53] <uruwi> So int is 32 bits on 32-bit platforms, right?

[23:53] <timotimo> nah, we have 64bit integers everywhere

[23:53] *** mr-foobar joined
[23:53] *** csd_ joined
[23:54] *** sitaram joined
[23:54] <uruwi> So I can always trust int to hold 64.

[23:55] <TEttinger> AlexDaniel: I'm pretty used to unifont. most pan-unicode fonts are not great

[23:55] <TEttinger> gentium is very nice in print

[23:55] <TEttinger> it's pretty good on screens

[23:55] <lucasb> m: my int32 $x = 2**31-1; say $x++; say $x

[23:55] <camelia> rakudo-moar 20718a: OUTPUT«2147483647␤-2147483648␤»

[23:55] <dalek> rakudo-star-daily: d7cbc90 | coke++ | log/ (2 files):

[23:55] <dalek> rakudo-star-daily: today (automated commit)

[23:55] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d7cbc90ef3

[23:56] <TEttinger> (not pan-unicode, not fixed-width, but not well-known and really it's a great times new roman replacement for ordinary office stuff)

[23:56] <timotimo> oh, huh? that surprises me

[23:56] <lucasb> idk if they are int64 internally, but they behave like int32 with regard to wrap around, don't they?

[23:56] <timotimo> i didn't know we implement this

[23:57] *** spider-mario left
[23:58] <zengargoyle> hrm, my rakudo from last week gives the lexprimspec error when using int32

[23:58] <diakopter_______> m: my int32 $x = 2**31; say $x

[23:58] <camelia> rakudo-moar 20718a: OUTPUT«-2147483648␤»

[23:58] <zengargoyle> maybe it's really new....

[23:58] *** hartenfels left
[23:58] <uruwi> Difference between Num and num?

[23:58] <timotimo> uruwi: boxed vs not boxed

[23:58] <timotimo> huh. does our regex engine per chance ever emit a call to postfix:<++>?

[23:58] <uruwi> When should I use Num instead of num?

[23:59] *** n0tjack joined
[23:59] <zengargoyle> i've been using Source Code Pro in browser for scalable stuff.  it's pretty nice.

[23:59] <zengargoyle> sorta can't go wrong with Adobe.

