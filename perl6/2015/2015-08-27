[00:11] *** ab6tract left
[00:16] *** BenGoldberg joined
[00:17] *** BenGoldberg left
[00:17] *** BenGoldberg joined
[00:26] *** lichtkind left
[00:26] *** llfourn joined
[00:27] *** xzenfar joined
[00:30] *** llfourn left
[00:50] *** yqt left
[00:59] *** aborazmeh joined
[00:59] *** aborazmeh left
[00:59] *** aborazmeh joined
[01:11] *** Sgeo left
[01:12] *** Sgeo joined
[01:13] *** xzenfar left
[01:34] *** dha left
[01:49] *** dayangkun joined
[01:56] *** kaare__ joined
[01:59] <retupmoca> YuviPanda: run: "panda gen-meta" from the root directory of your module to get a META.info created

[01:59] <retupmoca> YuviPanda: then you just need to add the link to that META.info to the META.list file in this repo: https://github.com/perl6/ecosystem

[02:14] *** mdinger joined
[02:18] *** noganex_ joined
[02:18] *** yeahnoob joined
[02:20] *** noganex left
[02:27] *** llfourn joined
[02:31] *** llfourn left
[02:48] *** BenGoldberg left
[03:09] *** [Sno] left
[03:32] *** pierrot left
[03:40] *** pierrot joined
[03:41] *** xzenfar joined
[03:45] *** mr-foobar joined
[03:46] *** rangerprice left
[03:49] *** mdinger left
[04:22] *** llfourn joined
[04:26] *** Calibellus left
[04:31] *** skids left
[04:32] *** telex left
[04:34] *** telex joined
[04:35] *** cognominal joined
[05:08] *** davido_ joined
[05:13] *** llfourn left
[05:18] *** [Sno] joined
[05:21] * colomon needs to get moving so he can catch the 8:48 train to Olten.

[05:29] *** breinbaas joined
[05:30] *** davercc` joined
[05:31] *** davercc left
[05:32] *** khw left
[05:33] *** dha joined
[05:33] *** davido_ left
[05:47] *** brrt joined
[05:51] *** Sqirrel joined
[06:03] <colomon> is it difficult to find the hackathon room from the front door of the venue?  I’ve got the venue starred in google maps so I can find it, but I won’t have an easy way to communicate with IRC once I’m there....

[06:05] *** diana_olhovik_ joined
[06:06] <timotimo> *yawn*

[06:06] <maettu> timotimo: indeed.. :-)

[06:07] *** llfourn joined
[06:08] <timotimo> i forgot what people said when they were going to get breakfast, so i just guessed "getting up at 0800, then showering, then breaking fast shall be good enough"

[06:08] <maettu> colomon: no, that's easy. 

[06:08] <colomon> maettu: yay!

[06:09] <maettu> we're opening the door @ 9 am

[06:09] <colomon> I should be there around 11

[06:10] *** colomon left
[06:11] *** bioexpress joined
[06:18] <masak> morning, #perl6

[06:18] <masak> hope everyone had a good night's sleep

[06:18] * masak heads down for breakfast

[06:19] *** domidumont joined
[06:20] <bioexpress> "doesnotexist" does not exist. Why dies

[06:20] <bioexpress> p6: my $contents = "doesnotexist".IO.slurp;

[06:20] <camelia> rakudo-moar a7c845: OUTPUT«Failed to open file /home/camelia/doesnotexist: no such file or directory␤  in block <unit> at /tmp/tmpfile:1␤␤»

[06:20] <GLRelia> rakudo-moar a11e8f: OUTPUT«Failed to open file /home/steve/doesnotexist: no such file or directory␤  in block <unit> at /tmp/tmpfile:1␤␤»

[06:20] <bioexpress> and

[06:20] <bioexpress> p6: rmdir "dasnotexist";

[06:20] <GLRelia> rakudo-moar a11e8f: OUTPUT«rmdir is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub rmdir at src/RESTRICTED.setting:13␤  in block <unit> at /tmp/tmpfile:1␤␤»

[06:20] <camelia> rakudo-moar a7c845: OUTPUT«rmdir is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub rmdir at src/RESTRICTED.setting:13␤  in block <unit> at /tmp/tmpfile:1␤␤»

[06:21] <bioexpress> does not die?

[06:21] <nine> .tell skids Ah, yes thanks! I'll have a look at it after breakfast. Now that I understand the problem it solves, I think it's a shame, your PR has not been merged yet.

[06:21] <yoleaux> nine: I'll pass your message to skids.

[06:22] <masak> bioexpress: you seem surprised that `slurp` on something that doesn't exist dies. I'm not surprised at that. why are you? :)

[06:22] <masak> bioexpress: also, removing files tends to not die if they're not there. kind of a vacuous success.

[06:22] <masak> bioexpress: not entirely evident that this goes for directories as well as normal files, but...

[06:23] *** domidumont left
[06:24] <bioexpress> Thx!

[06:26] *** abaugher left
[06:27] *** abaugher joined
[06:36] *** davercc` left
[06:38] <dalek> rakudo/glr: d44cd4b | skids++ | src/core/array_slice.pm:

[06:38] <dalek> rakudo/glr: Fix Whatevercode in array slice indices past the first one.

[06:38] <dalek> rakudo/glr: 

[06:38] <dalek> rakudo/glr: Lets us pass /S32-array/delete.t which used to fail with

[06:38] <dalek> rakudo/glr: "Cannot call Real(WhateverCode: )"

[06:38] <dalek> rakudo/glr: 

[06:38] <dalek> rakudo/glr: (Surprisingly this is the only file containing a test that uses them,

[06:38] <dalek> rakudo/glr: unless they are skipped)

[06:38] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/d44cd4b38d

[06:38] <dalek> rakudo/glr: 91d2127 | niner++ | src/core/array_slice.pm:

[06:38] <dalek> rakudo/glr: Merge pull request #515 from skids/glr3

[06:38] <dalek> rakudo/glr: 

[06:38] <dalek> rakudo/glr: Fix Whatevercode in array slice indices past the first one.

[06:38] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/91d2127c6d

[06:39] <nine> .tell skids thank you for fixing @a[1, *-1]:delete :) I've had a look at this yesterday but my train arrived before I came to writing code. I really wonder how this worked in nom though. Couldn't find any code handling that case there.

[06:39] <yoleaux> nine: I'll pass your message to skids.

[06:40] <dha> nine - have the 5to6 docs been of any use to you?

[06:41] <dha> (it was you that was asking about them a while back, right?)

[06:41] *** laben joined
[06:42] <laben> hello p6'ers!

[06:44] *** Sqirrel left
[06:48] <timotimo> hello laben!

[06:50] *** domidumont joined
[06:52] *** Woodi left
[06:52] *** Woodi joined
[06:53] *** domidumont left
[06:53] *** zakharyas joined
[06:54] *** domidumont joined
[06:56] *** brrt left
[07:04] * timotimo heads towards the breakfast area

[07:04] <moritz> down to 84 failing test files, it seems

[07:06] <laben> so is it under nine% ?

[07:07] *** dha left
[07:09] *** rurban joined
[07:11] *** brrt joined
[07:13] *** larion left
[07:16] *** TEttinger left
[07:20] *** darutoko joined
[07:28] *** Sqirrel joined
[07:28] *** laouji joined
[07:35] * TimToady waves from hackython

[07:38] *** FROGGS left
[07:39] <nine> Actually it's 83 here

[07:42] *** espadrine joined
[07:45] <moritz> might be one of the flappers

[07:48] <timotimo> o/

[07:50] *** lizmat joined
[07:50] * masak waves too

[07:50] <hoelzro> o/

[07:51] <hoelzro> links from breakfast (not sausage links): https://www.youtube.com/watch?v=WIKqgE4BwAY

[07:51] <masak> plan for the day: help someone else with something. newbies take precedence. :)

[07:52] <moritz> I've been mulling an idea for another Perl 6 coding contest

[07:53] <moritz> but learning from masak's mistakes, crowd-source the reviews

[07:53] *** FROGGS joined
[07:53] <masak> ooh

[07:53] <masak> yeah, doing the reviews all by yourself is fine, until $life intervenes.

[07:54] <masak> crowd-sourcing the reviews might actually work really well if pulled off correctly.

[07:54] <moritz> and then it would still be the one holding the contest (probably me, maybe a second confederate) who selects the winner(s)

[07:54] *** laouji left
[07:55] <nine> m: my @a = [$[1, 2, 3], $[4]]; @a>>.say;

[07:55] <GLRelia> rakudo-moar a11e8f: OUTPUT«1␤2␤3␤4␤»

[07:55] <camelia> rakudo-moar a7c845: OUTPUT«(Any)␤(Any)␤(Any)␤(Any)␤»

[07:55] <nine> m: my @a = [[1, 2, 3], [4]]; @a>>.say;

[07:55] <camelia> rakudo-moar a7c845: OUTPUT«4␤3␤1␤2␤»

[07:55] <GLRelia> rakudo-moar a11e8f: OUTPUT«1␤2␤3␤4␤»

[07:56] <moritz> masak: any ideas on how to pull of the crowed-sourced reviews?

[07:56] <FROGGS> a huperbug /o/

[07:56] <moritz> *crowd

[07:56] <nine> a plain normal hyper bug

[07:56] <moritz> .oO( cloud-sourced reviews )

[07:56] <moritz> m: say () <<+>> ()

[07:56] <GLRelia> rakudo-moar a11e8f: OUTPUT«␤»

[07:56] <camelia> rakudo-moar a7c845: OUTPUT«␤»

[07:56] <moritz> m: say () <<+<< ()

[07:56] <GLRelia> rakudo-moar a11e8f: OUTPUT«␤»

[07:56] <camelia> rakudo-moar a7c845: OUTPUT«␤»

[07:57] <moritz> m: say () >>+<< ()

[07:57] <GLRelia> rakudo-moar a11e8f: OUTPUT«␤»

[07:57] <camelia> rakudo-moar a7c845: OUTPUT«␤»

[07:57] <moritz> didn't I see one of those fail?

[07:57] <moritz> maybe fixed in the mean time

[07:57] <laben> m: say (1..3) >>+<< (1..4)

[07:57] <GLRelia> rakudo-moar a11e8f: OUTPUT«2 4 6 5␤»

[07:57] <camelia> rakudo-moar a7c845: OUTPUT«Lists on either side of non-dwimmy hyperop of infix:<+> are not of the same length␤left: 3 elements, right: 4 elements␤  in block <unit> at /tmp/lsJZAZiUg2:1␤␤»

[07:57] <moritz> GLR++

[07:58] <laben> nine: ^^^ want me to send a PR for this?

[07:58] <nine> laben: please go ahead :)

[07:59] <moritz> oh, I mis-read

[07:59] <moritz> nom++

[07:59] <ShimmerFairy> moritz: first idea that comes to mind is some sort of anonymous reviewing thing, perhaps some kind of website that presented people a couple of anonymized tests, and likely some guidelines on what's desired.

[07:59] *** [Sno] left
[07:59] *** zakharyas left
[07:59] <moritz> ShimmerFairy: I'd explicitly not make it anonymous :-)

[07:59] *** yeahnoob left
[07:59] <dalek> roast/glr: e960b57 | (David Warring)++ | / (4 files):

[07:59] <dalek> roast/glr: utilize does-ok test assertion

[07:59] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/e960b57767

[07:59] <dalek> roast/glr: 67b2039 | (David Warring [email@hidden.address] | / (4 files):

[07:59] <dalek> roast/glr: Merge branch 'does-ok'

[07:59] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/67b2039297

[07:59] <dalek> roast/glr: 1419d17 | moritz++ | / (4 files):

[07:59] <dalek> roast/glr: Merge remote-tracking branch 'origin/master' into glr

[07:59] <dalek> roast/glr: 

[07:59] <dalek> roast/glr: Conflicts:

[07:59] <dalek> roast/glr: 	S02-types/sigils-and-types.t

[07:59] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/1419d17ee5

[08:00] <moritz> fwiw that was merging master into nom in roast

[08:00] <timotimo> ah

[08:00] <moritz> ShimmerFairy: allow everybody to submit a review to other people's solutions

[08:00] <moritz> does anybody know what's up with the index and rindex tests?

[08:01] <moritz> I think something changed in nom, but both nom and the tests have been merged into the glr branches

[08:01] <ShimmerFairy> moritz: sounds good, my idea was just to eliminate knowing anything about the coder beforehand :) . I definitely think the goal for crowd-sourced reviewing would be to have multiple reviews per entry.

[08:02] <moritz> ShimmerFairy: aye; and then some kind of summary

[08:03] *** [Sno] joined
[08:04] *** aborazmeh left
[08:04] *** bioexpress left
[08:04] *** Sqirrel left
[08:05] *** elohmrow joined
[08:06] <timotimo> oh, is this about a p6cc?

[08:07] <moritz> yes

[08:08] *** RabidGravy joined
[08:09] <ShimmerFairy> moritz: I don't know if aggregating reviews would be easier for the contest runner(s) than making the reviews, but I would hope that it is the case :)

[08:09] <laben> nine: https://github.com/rakudo/rakudo/pull/516

[08:10] <moritz> ShimmerFairy: maybe aggregating the reviews can also be crowd-sourced

[08:11] <nine> m: my @a = [$[1, 2, 3], $[4]]; @a>>.say;

[08:11] <GLRelia> rakudo-moar a11e8f: OUTPUT«1␤2␤3␤4␤»

[08:11] <camelia> rakudo-moar a7c845: OUTPUT«(Any)␤(Any)␤(Any)␤(Any)␤»

[08:12] * btyler_ waves from SPW

[08:12] <nine> I'm no longer sure this really _is_ a bug. The hyper is supposed to apply the op recursively to the whole list. So .say is called on every item in the nested arrays.

[08:12] <btyler_> need a bigger hackathon room :)

[08:12] <nine> TimToady: am I correct?

[08:12] <moritz> nine: looks correct to me

[08:13] <moritz> and, I mean, where would the Any even come from?

[08:13] <moritz> [$[1, 2, 3], $[4]]

[08:13] *** dakkar joined
[08:14] <FROGGS> my expectation was that "my @a = [$[1, 2, 3], $[4]]; @a>>.say;" results in "1 2 3␤4␤"

[08:15] <masak> m: my @a = 1, 2, 3; for @a X @a { .say }

[08:15] <GLRelia> rakudo-moar a11e8f: OUTPUT«1 1␤1 2␤1 3␤2 1␤2 2␤2 3␤3 1␤3 2␤3 3␤»

[08:15] <camelia> rakudo-moar a7c845: OUTPUT«1 1␤1 2␤1 3␤2 1␤2 2␤2 3␤3 1␤3 2␤3 3␤»

[08:15] <moritz> FROGGS: ... or any permutation thereof

[08:15] <dalek> rakudo/glr: 8606169 | lizmat++ | src/core/Supply.pm:

[08:15] <dalek> rakudo/glr: Fix some flattening issues with Ranges and emit

[08:15] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/8606169aa2

[08:16] <nine> FROGGS: from S03: Non-structural unary hyper operators produce a hash or array of exactly the same shape as the single argument. The hyper will descend into nested lists and hashes to distribute over the lower-level values just as they distribute over the top-level values that are leaves in the tree.

[08:16] <[Tux]> good morning all

[08:16] <[Tux]> having most of you in Switserland, makes "morning" a well educated guess :)

[08:17] <FROGGS> nine: okay, then it seems correct when using .say

[08:17] <FROGGS> m: my @a = [$[1, 2, 3], $[4]]; my @b = @a>>.++; say @b

[08:17] <GLRelia> rakudo-moar a11e8f: OUTPUT«1 2 3 4␤»

[08:17] <camelia> rakudo-moar a7c845: OUTPUT«0 0 0 0␤»

[08:17] <[Tux]> laben, did you fix anything in glr ot in T::C?

[08:17] <nine> m: my @a = [$[1, 2, 3], $[4]]; my @b = @a>>.++; say @b; say @a;

[08:17] <GLRelia> rakudo-moar a11e8f: OUTPUT«1 2 3 4␤2 3 4 5␤»

[08:17] <camelia> rakudo-moar a7c845: OUTPUT«0 0 0 0␤1 1 1 1␤»

[08:18] <FROGGS> \o/

[08:18] <FROGGS> m: my @a = [$[1, 2, 3], $[4]]; say @a.perl; my @b = @a>>.++; say @b.perl; say @a.perl;

[08:18] <GLRelia> rakudo-moar a11e8f: OUTPUT«[$[1, 2, 3], $[4]]␤[$[1, 2, 3], $[4]]␤[$[2, 3, 4], $[5]]␤»

[08:18] <camelia> rakudo-moar a7c845: OUTPUT«[[Any, Any, Any, Any]]<>␤[[0, 0, 0, 0]]<>␤[[1, 1, 1, 1]]<>␤»

[08:19] <FROGGS> GLR++

[08:19] <laben> [Tux]: i did send you some msg to |Tux|. i fixed tests up to 55.t excluded, which needs an input on your part since i am not sure and fixed test 60.t and part of 77.t

[08:20] <[Tux]> ah, I have to ssh to the other box to check the log then: [Tux] is at home, |Tux| is at work

[08:20] <laben> you can check irclog

[08:21] *** mr-foobar left
[08:22] *** Sqirrel joined
[08:22] <dalek> rakudo/glr: 3cd8dd7 | FROGGS++ | src/core/Cool.pm:

[08:22] <dalek> rakudo/glr: fix Cool.{index|rindex} when passing insane offsets

[08:22] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/3cd8dd73a1

[08:22] *** aborazmeh joined
[08:22] *** aborazmeh left
[08:22] *** aborazmeh joined
[08:22] <FROGGS> this ^^^ is also a fix for two tests failing on nom, but I guess we can wait until glr gets merged into nom

[08:24] <nine> laben: I experience some kind of deja vu. Haven't you sent that pull request before?

[08:24] <laben> nine: no, i just posted it on a gist

[08:24] <nine> aah, that was it

[08:25] <dalek> rakudo/glr: fadd434 | laben++ | src/core/metaops.pm:

[08:25] <dalek> rakudo/glr: Fix dwimmy hyper code to correctly consider throw condition

[08:25] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/fadd434708

[08:25] <dalek> rakudo/glr: fca2873 | niner++ | src/core/metaops.pm:

[08:25] <dalek> rakudo/glr: Merge pull request #516 from laben/myglr

[08:25] <dalek> rakudo/glr: 

[08:25] <dalek> rakudo/glr: Fix dwimmy hyper code to correctly consider throw condition

[08:25] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/fca287328b

[08:26] <masak> m: my @c = <r k d>.pick(*); my @v = <a u o>.pick(*); for ^3 -> $i { print @c[$i]; print @v[$i] }; say "";

[08:26] <camelia> rakudo-moar a7c845: OUTPUT«rudako␤»

[08:26] <GLRelia> rakudo-moar a11e8f: OUTPUT«daroku␤»

[08:26] <masak> :D

[08:28] <moritz> m: say flat <r k d>.pick(*) Z <a u o>.pick(*)

[08:28] <GLRelia> rakudo-moar a11e8f: OUTPUT«k u d a r o␤»

[08:28] <camelia> rakudo-moar a7c845: OUTPUT«d o r u k a␤»

[08:28] <moritz> m: say join '', flat <r k d>.pick(*) Z <a u o>.pick(*)

[08:28] <GLRelia> rakudo-moar a11e8f: OUTPUT«dakoru␤»

[08:28] <camelia> rakudo-moar a7c845: OUTPUT«rodaku␤»

[08:30] <masak> moritz++ # functional to my imperative

[08:30] <masak> m: say join '', <r k d>.pick(*) Z <a u o>.pick(*)

[08:30] <GLRelia> rakudo-moar a11e8f: OUTPUT«␤»

[08:30] <camelia> rakudo-moar a7c845: OUTPUT«␤»

[08:30] *** larion joined
[08:30] * masak realizes he has to learn to like "flat" from now on :)

[08:31] *** brrt left
[08:31] <laben> m: say (1..3) >>+<< (1..4)

[08:31] <GLRelia> rakudo-moar a11e8f: OUTPUT«2 4 6 5␤»

[08:31] <camelia> rakudo-moar a7c845: OUTPUT«Lists on either side of non-dwimmy hyperop of infix:<+> are not of the same length␤left: 3 elements, right: 4 elements␤  in block <unit> at /tmp/ywxB3T6p7x:1␤␤»

[08:31] <laben> still not updated

[08:31] <lizmat> m: sub a(*@a) { say @a.perl }; a "E"..."A","e"..."a"

[08:31] <GLRelia> rakudo-moar a11e8f: OUTPUT«Method 'splice' not found for invocant of class 'List'␤  in block <unit> at /tmp/54J6KyIye9:1␤␤»

[08:31] <camelia> rakudo-moar a7c845: OUTPUT«["E", "D", "C", "B", "A", "e", "d", "c", "b", "a"]<>␤»

[08:31] <nine> I though GLRelia is updating every 5 minutes?

[08:32] <moritz> nine: well, I guess it triggers an updated every 5 minutes, unless a rebuild is currently in progress

[08:33] <moritz> at least that's how I'd do it

[08:33] <laben> the commit hash was not updated, hence i took it as not updated ...

[08:35] *** xfix joined
[08:35] <masak> for those listening in from elsewhere:

[08:35] <masak> we just have a Big Table Refactor, because there were more hackathoners than seats around the table

[08:35] <masak> great fun

[08:35] <laben> masak: did you implement a SeatIterator?

[08:36] <btyler_> there's also a spillover hackathon room, if it gets too cozy there

[08:36] <masak> no, we hand-coded everything for maximum speed

[08:37] <FROGGS> my spectest hangs :o(

[08:37] <moritz> mine too

[08:37] <moritz> after t/spec/rosettacode/sierpinski_triangle.t

[08:37] <FROGGS> t/spec/S17-supply/start.t and t/spec/S32-io/IO-Socket-Async.rakudo.moar

[08:37] <lizmat> m: sub a(*@a) { say @a.perl }; a 0..10,0...10

[08:37] <GLRelia> rakudo-moar a11e8f: OUTPUT«[0, 1, 2, 3, 4, 5, 6, 7, 8, Failure.new(exception => X::Sequence::Deduction.new(from => "9,10,0"), backtrace => Backtrace.new)]␤»

[08:37] <camelia> rakudo-moar a7c845: OUTPUT«[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<>␤»

[08:38] <tadzik> hello hackathon here too!

[08:38] <FROGGS> and we regressed 8 test files :o(

[08:38] *** virtualsue joined
[08:38] <hoelzro> masak: and good thing no one got flattened

[08:38] <moritz> huh :(

[08:39] <FROGGS> lizmat: did you spectest before&&after your patch?

[08:39] <FROGGS> I guess I'll re-spectest the last two commits

[08:39] <lizmat> I did not spectest, I only tested S17-supply/minmax.t

[08:40] <lizmat> which now has fewer failing tests

[08:40] <moritz> fwiw I typically capture the spectest output in a file, for example glr-1

[08:40] <lizmat> I'll run a spectest now

[08:40] <moritz> and then I run grep 'ok$' glr-1 | |cut -d\  -f 1|perl -plE 's/\.rakudo\.moar$/.t/' > t/localtest

[08:40] <FROGGS> this is the fallout of the last (two?) commits: https://gist.github.com/FROGGS/2f06ed42f1755b1235bb

[08:41] <moritz> and then a 'make localtest' after a change to make sure there are no regressions

[08:41] <lizmat> so that's good ?

[08:41] <lizmat> ah no...  sorry  :-)

[08:42] * itz waves from room 2

[08:42] <FROGGS> lizmat: t/spec/S17-supply/syntax.t, t/spec/S17-supply/unique.t and t/spec/S17-supply/words.t did not fail before

[08:42] * lizmat looks

[08:42] <masak> moritz: if you do do a p6cc, maybe I can help with finding tasks. the tasks are very important to get right -- and that's one of the things I believe I got right all three times.

[08:42] <ShimmerFairy> except for the commandline magic, that's pretty much how I do it :)  (take before and after results, and put in localtest.data any of the interesting files to investigate)

[08:42] <moritz> masak: that would be very much appreciated

[08:42] <laben> itz: do you have time to check why GLRelia isn't updating anymore?

[08:43] <moritz> (the disadvantage of organizing a p6cc is that you can can't participate yourself :-) )

[08:43] <dalek> perl6-roast-data: ad9443b | coke++ | / (2 files):

[08:43] <dalek> perl6-roast-data: another glr run for 'today'

[08:43] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ad9443bef5

[08:43] <ShimmerFairy> masak: task 1: freaking hexslide :P

[08:43] *** virtualsue left
[08:44] <masak> ShimmerFairy: is that a variant of ordinary hexslide? :P

[08:44] <lizmat> FROGGS: think I found it

[08:44] <FROGGS> lizmat++

[08:45] *** virtualsue joined
[08:46] <[Coke]> ^^ that commit also shows a slight regression, if that helps track down versions.

[08:46] *** Sqirrel left
[08:47] <FROGGS> lizmat / others: you can always compare against: https://github.com/perl6/glr-test-failures-annotated/blob/master/test-failures.txt

[08:48] <FROGGS> it is usually almost up-to-date :o)

[08:48] *** espadrine left
[08:48] <dalek> rakudo/glr: 0f43fb6 | lizmat++ | src/core/Supply.pm:

[08:48] <dalek> rakudo/glr: Unbreak some supply tests, break others again :-(

[08:48] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/0f43fb6bbf

[08:48] <dalek> roast/glr: 5f85245 | (Stefan Seifert)++ | S17-supply/on.t:

[08:48] <dalek> roast/glr: Fix S17-supply/on.t misusing >> when it wants map

[08:48] <dalek> roast/glr: 

[08:48] <dalek> roast/glr: >> is supposed to recurse into nested arrays. It seems like some bug on

[08:48] <dalek> roast/glr: nom prevented that. Now that that's fixe on glr, we have to use map

[08:48] <dalek> roast/glr: instead.

[08:48] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/5f852454f2

[08:50] *** zakharyas joined
[08:51] <itz> laben: yes I've have a look now

[08:52] <lizmat> my @tail := @lol[$m].list.splice(1); # trailing elems of last list added back later    # definitely Wrong(TM)

[08:52] <itz> m: say 2+3

[08:52] <GLRelia> rakudo-moar a11e8f: OUTPUT«5␤»

[08:52] <camelia> rakudo-moar a7c845: OUTPUT«5␤»

[08:52] <masak> m: sub foo { my $x = 7; class C { method bar { say $x } } }; C.new.bar

[08:52] <GLRelia> rakudo-moar a11e8f: OUTPUT«(Any)␤»

[08:52] <camelia> rakudo-moar a7c845: OUTPUT«(Any)␤»

[08:53] <masak> should we have a warning when an our-scoped thing sits in a my-scoped thing -- like Perl 5 does?

[08:53] <FROGGS> ahh, that ol' bug :o)

[08:53] <nine> m: say [[1..5],[6..10],[11..14]].perl

[08:53] <camelia> rakudo-moar a7c845: OUTPUT«[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14]]␤»

[08:53] <GLRelia> rakudo-moar a11e8f: OUTPUT«[$[1, 2, 3, 4, 5], $[6, 7, 8, 9, 10], $[11, 12, 13, 14]]␤»

[08:54] <nine> m: use Test; is-deeply [[1..5],[6..10],[11..14]], [$[1, 2, 3, 4, 5], $[6, 7, 8, 9, 10], $[11, 12, 13, 14]]

[08:54] <GLRelia> rakudo-moar a11e8f: OUTPUT«ok 1 - ␤»

[08:54] <camelia> rakudo-moar a7c845: OUTPUT«not ok 1 - ␤␤# Failed test at /tmp/xgsYOcYtmI line 1␤# expected: [Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]␤#      got: [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14]]␤»

[08:56] *** cognominal left
[08:57] <masak> does anyone want to pair up on something moderately tricky and semi-secret?

[08:58] *** GLRelia left
[08:59] <masak> on a completely unrelated note, has anyone ever done `take` inside of a grammar? :P

[08:59] <FROGGS> m: my $py = 0 && try { my $py = 42; $py.bla() }

[08:59] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/GaBH5Z1ixo␤Cannot use variable $py in declaration to initialize itself␤at /tmp/GaBH5Z1ixo:1␤------> 3my $py = 0 && try { my $py = 42; $7⏏5py.bla() }␤    expecting any of:␤        term␤»

[09:00] <FROGGS> m: my $py = 0 && try { { my $py = 42; $py.bla()}() }

[09:00] <camelia> rakudo-moar a7c845: ( no output )

[09:00] * moritz should probably start the nom release process

[09:01] *** abraxxa joined
[09:02] <itz> Makefile:422: recipe for target 'CORE.setting.moarvm' failed

[09:03] <FROGGS> itz: does it reconfigure on each build?

[09:03] <itz> maybe cruft left in my env unless others can't compile GLR

[09:03] <FROGGS> because lately a new file was added to the setting build (SomethingIterator.pm or so)

[09:04] <itz> FROGGS: ah thanks

[09:07] <FROGGS> [ptc]: it is now rakudobugged as RT #125921

[09:07] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125921

[09:07] *** brrt joined
[09:08] <masak> ++moritz # nom release process

[09:09] <masak> by the way, colomon++ has now joined the hackathon too! \o/

[09:09] *** colomon joined
[09:09] <colomon> hello hackathon!

[09:09] <masak> colomon! \o/

[09:09] <FROGGS> \o\

[09:09] * masak starts and looks over his shoulder

[09:09] <masak> aie!

[09:10] <masak> colomon: don't sneak up on me like that!

[09:10] <masak> :P

[09:10] <FROGGS> hoelzro: this is ven in case you've not seen him yet

[09:10] <dalek> rakudo/glr: 04a8f10 | (Stefan Seifert)++ | src/core/Supply.pm:

[09:10] <dalek> rakudo/glr: Fix Supply.batch flattening the results too much

[09:10] <dalek> rakudo/glr: 

[09:10] <dalek> rakudo/glr: batch is supposed to pass an array to emit. Instead it passed a list of

[09:10] <dalek> rakudo/glr: arguments due to the single arg rule.

[09:10] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/04a8f102dc

[09:10] <masak> ooh, and now vendethiel arrived! \o/

[09:10] <hoelzro> ahhhhh

[09:10] <FROGGS> ahh, he has a badge... nvm :o)

[09:11] <masak> I hope you all realize...

[09:11] <masak> ...me and vendethiel in the same room...

[09:11] <masak> ...there will be macros. :)

[09:11] <[ptc]> FROGGS: sweet, thanks

[09:11] <yoleaux> 20 Aug 2015 16:27Z <moritz> [ptc]: a perl6-examples job on hack was running for 72 CPU hours before I killed it; please investigate (and add a CPU limit to all cron jobs)

[09:11] *** espadrine joined
[09:11] <yoleaux> 21 Aug 2015 14:42Z <moritz> [ptc]: I've set some ulimits in perl6-examples' update-and-sync, and updated the checkout on hack; that was in a detached HEAD previously. If master sounds wrong to you, please use "git reflog" to restore the old state (and fix the issue otherwise)

[09:11] <colomon> NOOOOOOOO!

[09:11] <yoleaux> 25 Aug 2015 10:33Z <_itz> [ptc]: examples.perl6.org appears to have stopped updating

[09:11] <masak> colomon: mwhahaha

[09:13] <ShimmerFairy> .oO(rows of apple comps)

[09:13] <[ptc]> moritz: sorry about the perl6-examples jobs!  I've been only a lurker for a while ($work has been pretty busy) and hadn't seen your message

[09:13] <tadzik> and sorted thinkpads :P

[09:13] <nine> masak: yeah we hope so :)

[09:13] <[ptc]> itz: thanks for the message.  Will look into it over the next couple of days :-)

[09:14] <itz> [ptc]: are in .ch .. I was planning on duplicating the examples.perl6.org update process elsewhere as a dev instance?

[09:14] * [ptc] waves from the next room

[09:14] <itz> ah right

[09:14] <lizmat> m: sub a(*@a) { say @a.perl }; a 0..10,0...10

[09:14] <camelia> rakudo-moar a7c845: OUTPUT«[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<>␤»

[09:14] <lizmat> m: sub a(*@a) { say @a.perl }; a 0..10,0...10

[09:14] <camelia> rakudo-moar a7c845: OUTPUT«[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<>␤»

[09:15] <lizmat> m: sub a(*@a) { say @a.perl }; a 0...10

[09:15] <camelia> rakudo-moar a7c845: OUTPUT«[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<>␤»

[09:15] <lizmat> m: sub a(*@a) { say @a.perl }; a 0..10

[09:15] <camelia> rakudo-moar a7c845: OUTPUT«[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<>␤»

[09:15] <lizmat> m: sub a(*@a) { say @a.perl }; a 0..5,6...10

[09:15] <camelia> rakudo-moar a7c845: OUTPUT«[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<>␤»

[09:15] <lizmat> m: sub a(*@a) { say @a.perl }; a 0..5,0...10

[09:15] <camelia> rakudo-moar a7c845: OUTPUT«Unable to deduce arithmetic or geometric sequence from 4,5,0 (or did you really mean '..'?)␤  in sub a at /tmp/aIraUSs47h:1␤  in block <unit> at /tmp/aIraUSs47h:1␤␤Actually thrown at:␤  in sub a at /tmp/aIraUSs47h:1␤  in block <unit> at /tmp/aI…»

[09:17] <colomon> so what’s the plan of attack here?  should I grab a random hunk of failing roast-glr and try to make it work?  should I ignore glr and try to improve the smoker?  fix modules?

[09:19] <masak> colomon: I think people would be happy if you jumped into GLR.

[09:19] <masak> the other stuff dosuns nice too, though.

[09:20] * colomon thinks he will have more time to hack on p6 during this hackathon than he did in the entire rest of the year so far...

[09:20] <nine> colomon: yeah, just grab a failing test :)

[09:21] <nine> Maybe we should start coordinating a bit on the channel though with so many people picking tests and failures becoming fewer and fewer

[09:21] <dalek> roast/glr: 18f810a | lizmat++ | S17-supply/minmax.t:

[09:21] <dalek> roast/glr: Fix test by not using sequences

[09:21] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/18f810a739

[09:21] <colomon> sounds reasonable

[09:21] <nine> Only 81 failing now!

[09:21] <colomon> nine: running a spectest already

[09:21] <lizmat> that's 80 now!

[09:22] *** GLRelia joined
[09:22] <itz> m: say 2+3

[09:22] <camelia> rakudo-moar a7c845: OUTPUT«5␤»

[09:22] <GLRelia> rakudo-moar a11e8f: OUTPUT«5␤»

[09:22] <masak> yay, I just helped btyler_++ fix his code! \o/

[09:22] *** donaldh joined
[09:23] * masak feels warm an fuzzy inside

[09:23] * FROGGS .oO( Fix test by avoiding code that exposes the error )

[09:23] <lizmat> well, the error is with sequences, not with supplies

[09:23] <FROGGS> lizmat: are there other tests for that reverse() error?

[09:23] <lizmat> it's not reverse() that is a problem, it's sequences

[09:23] <lizmat> m: say 1...10,1...10

[09:23] <camelia> rakudo-moar a7c845: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[09:23] <GLRelia> rakudo-moar a11e8f: OUTPUT«Method 'splice' not found for invocant of class 'List'␤  in block <unit> at /tmp/EyF2HOltok:1␤␤»

[09:24] <FROGGS> lizmat: are there tests for that?

[09:24] <nine> m: say 1..10,1...10

[09:24] <camelia> rakudo-moar a7c845: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[09:24] <GLRelia> rakudo-moar a11e8f: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[09:24] <nine> m: say 1..10...10

[09:24] <camelia> rakudo-moar a7c845: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[09:24] <GLRelia> rakudo-moar a11e8f: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[09:24] <nine> m: say 1..10,0...10

[09:24] <camelia> rakudo-moar a7c845: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[09:24] <GLRelia> rakudo-moar a11e8f: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[09:25] <laben> m: dd 1...10,1...10

[09:25] <camelia> rakudo-moar a7c845: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤»

[09:25] <GLRelia> rakudo-moar a11e8f: OUTPUT«Method 'splice' not found for invocant of class 'List'␤  in block <unit> at /tmp/v5UaX9Eq09:1␤␤»

[09:25] <laben> m: dd 1..10,1...10

[09:25] <camelia> rakudo-moar a7c845: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤»

[09:25] <GLRelia> rakudo-moar 11e8f: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤»

[09:25] <laben> m: dd ,1...10

[09:25] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/dwW79VhrtQ␤Preceding context expects a term, but found infix , instead␤at /tmp/dwW79VhrtQ:1␤------> 3dd ,7⏏051...10␤»

[09:25] <GLRelia> rakudo-moar 11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/GuUZkO5nXx␤Preceding context expects a term, but found infix , instead␤at /tmp/GuUZkO5nXx:1␤------> 3dd ,7⏏051...10␤»

[09:25] <laben> m: dd 1...10,

[09:25] <camelia> rakudo-moar a7c845: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤»

[09:25] <GLRelia> rakudo-moar 11e8f: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤»

[09:25] <laben> m: dd 1...10

[09:26] <camelia> rakudo-moar a7c845: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤»

[09:26] <GLRelia> rakudo-moar 11e8f: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤»

[09:26] <tadzik> ..wth is "Bytecode stream version too low"? :O

[09:26] <TimToady> m: say (1,2,3 ... 2)

[09:26] <camelia> rakudo-moar a7c845: OUTPUT«1 2␤»

[09:26] <GLRelia> rakudo-moar 11e8f: OUTPUT«1 2␤»

[09:26] <TimToady> m: my @x; @x[0,2,4...$end]

[09:26] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/_SokNrE8UA␤Variable '$end' is not declared. Did you mean '&end'?␤at /tmp/_SokNrE8UA:1␤------> 3my @x; @x[0,2,4...7⏏5$end]␤»

[09:27] <GLRelia> rakudo-moar 11e8f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/GIGORVrSkg␤Variable '$end' is not declared. Did you mean '&end'?␤at /tmp/GIGORVrSkg:1␤------> 3my @x; @x[0,2,4...7⏏5$end]␤»

[09:27] <jnthn> ohhai o/

[09:27] * jnthn is at l'hackathon now also :)

[09:27] <lizmat> jnthn o/

[09:27] <itz> the GLRelia git sha should correct shortly

[09:28] * colomon is going to look at S32-list/pick.t

[09:28] <itz> m: say "sha hash"

[09:28] <camelia> rakudo-moar a7c845: OUTPUT«sha hash␤»

[09:28] <GLRelia> rakudo-moar 04a8f1: OUTPUT«sha hash␤»

[09:28] <tadzik> FROGGS: https://github.com/tadzik/panda/issues/178 is there a reason bundle() shouldn't create source-url instead?

[09:28] <dalek> rakudo/glr: 30161a5 | FROGGS++ | src/Perl6/Grammar.nqp:

[09:28] <dalek> rakudo/glr: reset to-be-initialied variable name in blockoid

[09:28] <dalek> rakudo/glr: 

[09:28] <dalek> rakudo/glr: Before we did that in pblock, which means that e.g. blorsts did not get handled

[09:28] <dalek> rakudo/glr: correctly. Fixes RT #125921.

[09:28] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/30161a5f01

[09:28] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125921

[09:29] <masak> m: say (flat 0..9, 'a'..'f').roll(40).join

[09:29] <camelia> rakudo-moar a7c845: OUTPUT«30a840c3c9475c53db38dcd25d934dd6ffc6afb8␤»

[09:29] <GLRelia> rakudo-moar 04a8f1: OUTPUT«fd407e3a43cb55d696235b75b5b39189fde0af01␤»

[09:29] <laben> m: say (1..3) >>+<< (1..4)

[09:29] <camelia> rakudo-moar a7c845: OUTPUT«Lists on either side of non-dwimmy hyperop of infix:<+> are not of the same length␤left: 3 elements, right: 4 elements␤  in block <unit> at /tmp/sz3CKfl93d:1␤␤»

[09:29] <GLRelia> rakudo-moar 04a8f1: OUTPUT«Lists on either side of non-dwimmy hyperop of infix:<+> are not of the same length␤left: 3 elements, right: 4 elements␤  in block <unit> at /tmp/jhRdFT93QM:1␤␤»

[09:29] *** domidumont left
[09:29] <laben> finally ^^^

[09:29] *** cognominal joined
[09:29] <FROGGS> tadzik: I guess that is just an oversight, though, please also look at S22, perhaps it is called 'source' there

[09:29] <dalek> ecosystem: f720f31 | tadzik++ | META.list:

[09:29] <dalek> ecosystem: Retire MuEvent

[09:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f720f31937

[09:30] *** domidumont joined
[09:31] <tadzik> FROGGS: ah, it's support.source in S22, and panda just relies on non-S22 field here

[09:31] <tadzik> S22 doesn't seem to know about "here's where you probably downloaded this from" :)

[09:31] <tadzik> and it really only makes sense for the makeshit CPAN we created

[09:31] <FROGGS> tadzik: hmmm... can we make this sane and e.g. let panda understand both?

[09:31] <tadzik> sounds good

[09:32] *** CIAvash joined
[09:33] <colomon> m: say @a.pick(1).WHAT

[09:33] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/A55Kbj_K3M␤Variable '@a' is not declared␤at /tmp/A55Kbj_K3M:1␤------> 3say 7⏏5@a.pick(1).WHAT␤»

[09:33] <GLRelia> rakudo-moar 04a8f1: OUTPUT«5===SORRY!5=== Error while compiling /tmp/cNRQL5qAxP␤Variable '@a' is not declared␤at /tmp/cNRQL5qAxP:1␤------> 3say 7⏏5@a.pick(1).WHAT␤»

[09:33] <colomon> m: say (1..100).pick(1).WHAT

[09:33] <camelia> rakudo-moar a7c845: OUTPUT«(List)␤»

[09:33] <GLRelia> rakudo-moar 04a8f1: OUTPUT«(Seq)␤»

[09:33] <colomon> Seq is correct for GLR, no?

[09:34] <jnthn> colomon: yeah, correct

[09:34] <colomon> okay, patching roast-glr

[09:34] *** Ven joined
[09:34] <masak> Ven! \o/

[09:35] <Ven> \o/, spw2015 !

[09:36] <colomon> \o/

[09:36] <dalek> roast/glr: 3bddd39 | colomon++ | S32-list/pick.t:

[09:36] <dalek> roast/glr: pick returns a Seq now.

[09:36] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/3bddd39369

[09:36] <colomon> okay, hmmm … S32-list/classify.t ?

[09:38] <[Coke]> m: say ~3.14159265358979323846264338327950288419716939937510

[09:38] <camelia> rakudo-moar a7c845: OUTPUT«3.14159265358979338245148937858175486326217651367188␤»

[09:38] <GLRelia> rakudo-moar 30161a: OUTPUT«3.14159265358979338245148937858175486326217651367188␤»

[09:38] <colomon> m: say classify( {.comb}, 100 .. 119, 104, 119 ).perl

[09:38] <camelia> rakudo-moar a7c845: OUTPUT«Hash[Any,Any].new("1" => Hash[Any,Any].new("0" => Hash[Any,Any].new("0" => [100], "1" => [101], "2" => [102], "3" => [103], "4" => [104, 104], "5" => [105], "6" => [106], "7" => [107], "8" => [108], "9" => [109]), "1" => Hash[Any,Any].new("0" => [110], "1"…»

[09:38] <GLRelia> rakudo-moar 30161a: OUTPUT«Hash[Any,Any].new()␤»

[09:38] <colomon> that looks like a very real bug

[09:38] <dalek> roast/glr: c86bb56 | FROGGS++ | S04-declarations/my.t:

[09:38] <dalek> roast/glr: add test for RT #125371

[09:38] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/c86bb568c2

[09:38] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125371

[09:39] *** Sqirrel joined
[09:39] <FROGGS> [ptc]: it is fixed in rakudo/glr now

[09:39] <[Coke]> m: say ~3.14159265358979323

[09:39] <camelia> rakudo-moar a7c845: OUTPUT«3.14159265358979323␤»

[09:39] <GLRelia> rakudo-moar 30161a: OUTPUT«3.14159265358979323␤»

[09:40] <timotimo> ohai colomon, you're the gentleman in the corner with the apple laptop?

[09:41] <colomon> indeed

[09:41] <timotimo> yay

[09:41] <dalek> rakudo/glr: 8f5dd0d | lizmat++ | src/core/io_operators.pm:

[09:41] <dalek> rakudo/glr: Remove say(\x) / note(\x) candidates

[09:41] <dalek> rakudo/glr: 

[09:41] <dalek> rakudo/glr: These seem like premature optimizations in the GLR, and they break

[09:41] <dalek> rakudo/glr: behaviour.  They're just commented out for future reference / complete

[09:41] <dalek> rakudo/glr: removal when we feel certain that's the way to go

[09:41] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/8f5dd0dabd

[09:41] <itz> "with the apple laptop" is hardly a unique identifier :)

[09:41] <colomon> itz: sitting in the corner is

[09:41] <colomon> ;)

[09:41] <nine> colomon: we do have a free seat at the table here

[09:41] <TimToady> not sure how many gentlemen there are here either...

[09:42] *** aborazmeh left
[09:42] <colomon> nine: right now I’m enjoying the breeze from the window I’m next to.  ;)

[09:43] <nine> colomon: good point :)

[09:43] * nine is looking at t/spec/S17-supply/stable.t

[09:43] <timotimo> jnthn: i have an early implementation of nfa_to_statelist; i'd like you to take a look at it just to verify that what i'm doing with the MVMROOTs and such is sane and not totally wrong; would you like a diff?

[09:44] <tadzik> moritz: ecocystem-api's projects.json actually generated from https://github.com/perl6/ecosystem/blob/master/updatelist.pl?

[09:44] <moritz> tadzik: yes

[09:45] <tadzik> ok, cool

[09:45] <colomon> hmmm… classify-list is calling loads of nqp routines.

[09:45] <tadzik> the "New run at" line from update.log made me wonder

[09:45] <colomon> m: say List ~~ Seq

[09:46] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/JPpt_1Jn0f␤Undeclared name:␤    Seq used at line 1. Did you mean 'Set'?␤␤»

[09:46] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«False␤»

[09:46] <colomon> m: say Seq ~~ List

[09:46] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/e9iLq7g7lh␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at /tmp/e9iLq7g7lh:1␤------> 3say Seq ~~7⏏5 List␤»

[09:46] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«False␤»

[09:46] <timotimo> https://gist.github.com/timo/04a201f9c5fe9b5bd752 ← jnthn, this is the diff

[09:46] <moritz> colomon: both are Iterable

[09:46] <colomon> moritz: Aha!  That may be what we need here

[09:47] <colomon> m: say “here”.comb.WHAT

[09:47] <camelia> rakudo-moar a7c845: OUTPUT«(List)␤»

[09:47] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«Invocant requires an instance of type Seq, but a type object was passed.  Did you forget a .new?␤  in block <unit> at /tmp/yHFdJf4qYi:1␤␤»

[09:47] <colomon> ???

[09:47] *** araujo left
[09:47] <timotimo> er, huh? :)

[09:47] <colomon> m: say “here”.comb ~~ Iterable

[09:47] <camelia> rakudo-moar a7c845: OUTPUT«True␤»

[09:47] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«True␤»

[09:47] <colomon> m: say “here”.comb ~~ Seq

[09:47] <camelia> rakudo-moar a7c845: OUTPUT«5===SORRY!5=== Error while compiling /tmp/w7DGW_RUBf␤Undeclared name:␤    Seq used at line 1. Did you mean 'Set'?␤␤»

[09:47] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«True␤»

[09:48] <colomon> m: say “here”.comb ~~ List

[09:48] <camelia> rakudo-moar a7c845: OUTPUT«True␤»

[09:48] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«False␤»

[09:48] <colomon> m: say nqp::istype(“here”.comb, Iterable)

[09:48] <camelia> rakudo-moar a7c845: OUTPUT«===============================================================================␤The use of nqp::operations has been deprecated for non-CORE code.  Please␤change your code to not use these non-portable functions.  If you really want␤to keep using nqp:…»

[09:48] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«===============================================================================␤The use of nqp::operations has been deprecated for non-CORE code.  Please␤change your code to not use these non-portable functions.  If you really want␤to keep using nqp:…»

[09:48] <colomon> bother

[09:49] *** rindolf joined
[09:49] *** llfourn left
[09:49] <colomon> will nqp::istype work for subtypes?

[09:49] <dalek> rakudo/nom: eab03c3 | coke++ | src/core/ (2 files):

[09:49] <dalek> rakudo/nom: RT #123760 - add Str matchers for comb

[09:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eab03c3dbf

[09:49] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123760

[09:49] <timotimo> you just have to "use nqp" in front, colomon 

[09:49] <timotimo> that'll shut it up

[09:49] <laben> m: use nqp; say nqp::istype(“here”.comb, Iterable)

[09:49] <dalek> roast: 3871847 | coke++ | S32-str/comb.t:

[09:49] <dalek> roast: RT #123760 update/add tests for Str-based comb

[09:49] <dalek> roast: review: https://github.com/perl6/roast/commit/3871847456

[09:49] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123760

[09:49] <camelia> rakudo-moar a7c845: OUTPUT«1␤»

[09:49] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«1␤»

[09:49] <colomon> timotimo++

[09:49] <timotimo> sadly, it puts the "…" right in front of that hint

[09:49] <timotimo> because of all those "======"

[09:51] <colomon> timotimo: extra sadly, when I got the same message on my local perl6, I didn’t read the second half (with use nqp) because the first half of the message was identical to what I got on GLRelia.

[09:51] <laben> *elia runs on RESTRICTED, no? we could reduce the number of === in that

[09:51] *** andreoss joined
[09:51] *** sno joined
[09:51] <timotimo> heh. :)

[09:51] *** [Sno] left
[09:51] <timotimo> that seems more like a hack than an elegant solution

[09:52] <timotimo> we could just have a CAMELIA.setting instead :)

[09:52] <colomon> so, my first rakudo-glr patch coming up in a min.  (fixed classify, timotimo++)

[09:52] <timotimo> very cool!

[09:52] <colomon> errr, more than a minute, spectesting is slow.

[09:52] <laben> make number of === configurable at runtime/builtime?

[09:52] <dalek> ecosystem: 058a95d | tadzik++ | META.list:

[09:52] <dalek> ecosystem: Retire pandabrew

[09:52] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/058a95d821

[09:53] <laben> i think having that at runtime with a flag or a $*VAR could be the best solution

[09:53] <[Coke]> r: constant @t = [\+] 1..5; say (0,@t Z^.. @t).perl;

[09:53] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/tmpfile:1␤␤»

[09:53] <GLRelia> ..rakudo-jvm 8f5dd0: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[09:53] <camelia> rakudo-{moar,jvm} a7c845: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)␤»

[09:53] <ShimmerFairy> I think that's actually a hard-coded ===== string for the nqp message, IIRC.

[09:53] *** andreoss left
[09:53] *** andreoss joined
[09:53] <colomon> JOBS=4?

[09:54] *** andreoss left
[09:55] <dalek> doc: ba14f7b | paultcochrane++ | htmlify.p6:

[09:55] <dalek> doc: Work around rakudobug RT #125921

[09:55] <dalek> doc: 

[09:55] <dalek> doc: FROGGS++ for adding this to rakudobug.  This is also now fixed in

[09:55] <dalek> doc: rakudo/glr, so we can change the code back if desired after the glr merge.

[09:55] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125921

[09:55] <dalek> doc: review: https://github.com/perl6/doc/commit/ba14f7b273

[09:56] <colomon> will I get extra spectest failures because of TEST_JOBS=4 ?

[09:57] <timotimo> usually not

[09:57] <colomon> \o/

[09:57] <colomon> I must say, running with TEST_JOBS=4 is making my laptop heat up….  :)

[09:57] <timotimo> but nine has found a case where it does break a test on his machine

[09:58] <timotimo> yeah, i can imagine

[09:58] <[Coke]> started adding [GLR] to tickets that are/should be/maybe GLR related. - https://rt.perl.org/Ticket/Display.html?id=113870

[09:58] *** Ven left
[09:58] <timotimo> my laptop has a derf where it odesn't properly turn up the fan speed

[09:58] <ShimmerFairy> It tends to break lock.t for me, in S17

[09:58] <timotimo> so when i'm alone i just tend to "echo 'level disengaged' | sude tee fan"

[09:59] <timotimo> ("level 7" would be the highest speed the fan can turn on via regulation, but "level disengaged" just turns off the regulator and it just goes another 2x faster than "fastest speed")

[09:59] *** araujo joined
[10:00] <[Coke]> m: <a a>.squish(:with(-> $a, $b {1})).perl.say

[10:00] <camelia> rakudo-moar a7c845: OUTPUT«()␤»

[10:00] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«().Seq␤»

[10:01] <moritz> uhm, why doesn't that return ('a') or ('a').Seq ?

[10:02] * colomon wouldn’t be surprised if squish is broken in the same way classify was (well, is, as I haven’t pushed yet)

[10:03] <dalek> perl6-examples: 5e42f33 | (Steve Mynott)++ | categories/cookbook/16processes/16-14-send-signal.pl:

[10:03] <dalek> perl6-examples: simple send signal example using nativecall

[10:03] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/5e42f33ef6

[10:04] <moritz> colomon: push, push, push! (https://www.youtube.com/watch?v=ICTmiUhea3g :-)

[10:04] <colomon> moritz: I’m spectesting first, and that’s slow 

[10:04] <timotimo> maybe we should have brought a very beefy machine to put into some corner where no ears are close by to do all our spec testing for us

[10:05] <moritz> colomon: I tend to spectest my GLR changes on hack, because it's faster than my laptop :-)

[10:05] <timotimo> like a 32-core machine local to the venue

[10:05] *** Sqirrel left
[10:05] <colomon> timotimo, moritz: yeah, I’m spinning on spectests on my big box back in Michigan now…  ;)

[10:05] <colomon> my TEST_JOBS=4 run on OS X seems like it might be wedged on t/spec/S17-procasync/no-runaway-file-limit.t  ?

[10:07] *** brrt left
[10:08] <FROGGS> m: sub foo(:xen(:$xin)) { say $xin }; foo xin => 23

[10:08] <camelia> rakudo-moar a7c845: OUTPUT«23␤»

[10:08] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«23␤»

[10:08] <dalek> perl6-examples: 7c1187a | (Sue Spence)++ | categories/cookbook/01strings/01-00introduction.pl:

[10:08] <dalek> perl6-examples: Add examples for $obj.say. Fix minor typo.

[10:08] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/7c1187a95c

[10:08] <dalek> perl6-examples: db65979 | (Sue Spence)++ | categories/cookbook/01strings/01-01substrings.pl:

[10:08] <dalek> perl6-examples: Pugs -> Rakudo

[10:08] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/db65979dbe

[10:08] <dalek> perl6-examples: 234f01b | (Sue Spence)++ | categories/cookbook/01strings/01-04converting-values.pl:

[10:08] <dalek> perl6-examples: Answered some commenty questions, added a unicode char

[10:08] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/234f01be4a

[10:08] <dalek> perl6-examples: 2049f7e | (Steve Mynott)++ | categories/cookbook/01strings/01-0 (3 files):

[10:08] <dalek> perl6-examples: Merge pull request #27 from virtualsue/master

[10:08] <dalek> perl6-examples: 

[10:08] <dalek> perl6-examples: Minor updates

[10:08] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/2049f7ebf1

[10:09] *** aborazmeh joined
[10:09] *** aborazmeh left
[10:09] *** aborazmeh joined
[10:09] <[ptc]> itz: you beat me to it :-)

[10:10] <masak> TimToady, jnthn: Ven and I think that maybe we are too attached to push's current semantics.

[10:10] *** Sqirrel joined
[10:10] <masak> and that it's not so unreasonable to do `@a.push(|@b)`

[10:11] <tadzik> masak: I reckon you'll like that: https://github.com/tadzik/panda/commit/cfe6ccb8c54 :)

[10:11] <masak> (not saying we're right, just that it's something worth considering)

[10:11] <masak> tadzik: yaaaaay

[10:11] <[Coke]> m: say ~('Y'..'z')

[10:11] <camelia> rakudo-moar a7c845: OUTPUT«Y Z [ \ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z␤»

[10:11] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«Y Z [ \ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z␤»

[10:11] <itz> [ptc]: she was sitting opposite :)

[10:11] <ShimmerFairy> masak: Looking at it, it feels natural at least, considering the original meaning of prefix:<|> :)

[10:11] <tadzik> it's not even *that* drastically slow

[10:11] <tadzik> loading HTTP::UA goes from 0.8 secs to 5.4 on my machine

[10:13] <[Coke]> m: say ~('Y'..'_')

[10:13] <camelia> rakudo-moar a7c845: OUTPUT«Y Z [ \ ] ^ _␤»

[10:13] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«Y Z [ \ ] ^ _␤»

[10:13] <[Coke]> m: say ~('Y'..'AB')

[10:13] <camelia> rakudo-moar a7c845: OUTPUT«␤»

[10:13] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«␤»

[10:14] <jnthn> masak: |@b is going to suck if the thing is 100s of items long

[10:14] <dalek> rakudo/glr: ca6b9e6 | colomon++ | src/core/Hash.pm:

[10:14] <dalek> rakudo/glr: Switch List to Iterable.

[10:14] <dalek> rakudo/glr: 

[10:14] <dalek> rakudo/glr: Pretty sure this was what was originally meant, and Iterable

[10:14] <dalek> rakudo/glr: treats Seq in the same fashion.  Fixes the spectest fail in

[10:14] <dalek> rakudo/glr: S32-list/classify.t.

[10:14] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/ca6b9e6542

[10:14] * colomon never did get a useful spectest run, but is pretty sure the patch is correct.

[10:14] <jnthn> masak: Of note, on JVM it'll actually break if you make the thing more than about 255 items long. 

[10:15] *** Ven joined
[10:15] <jnthn> masak: Because that is the maximum number of args you can pass on the JVM 

[10:15] <nine> colomon: +1

[10:15] <dalek> perl6-examples: 8dd4a70 | (Steve Mynott)++ | categories/cookbook/16processes/16-18-catch-control-c.pl:

[10:15] <dalek> perl6-examples: Catch ctrl-c to ignore or execute code example

[10:15] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/8dd4a7098b

[10:15] <dalek> perl6-examples: 8f84888 | (Steve Mynott)++ | categories/cookbook/01strings/01-0 (3 files):

[10:15] <dalek> perl6-examples: Merge branch 'master' of github.com:perl6/perl6-examples

[10:15] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/8f848883fb

[10:15] <dalek> roast: 646e60f | coke++ | S03-operators/range.t:

[10:15] <dalek> roast: RT #124542 #124543 - remove/update dodgy tests.

[10:15] <dalek> roast: review: https://github.com/perl6/roast/commit/646e60fd35

[10:15] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124542

[10:16] <nine> colomon: similar bugs may be in Baggy.pm

[10:16] <colomon> nine: I will investigate

[10:16] <nine> :)

[10:17] <nine> Haven't really looked at Bag/Mix/... bugs, because I don't yet know what they are :)

[10:17] *** ab6tract joined
[10:17] <colomon> nine++: looks like exactly the same code that I just changed, good call

[10:18] <colomon> not sure if this is triggering a spectest failure, which suggests we need a new test first...

[10:18] <[Coke]> Down to 1.042K tickets.

[10:18] <nine> colomon: t/spec/S02-types/bag.rakudo.moar and t/spec/S02-types/baghash.rakudo.moar are failing right now

[10:18] <nine> colomon: maybe your fix helps there

[10:18] <colomon> oooo!

[10:18] <colomon> nine++

[10:19] <nine> colomon++ # fixing things :)

[10:19] <colomon> nine: it feels really good to be digging back into p6 in a useful way.  :)

[10:19] *** jkva joined
[10:19] <FROGGS> m: say <foo bar baz> Z=> 1 xx *

[10:19] <camelia> rakudo-moar a7c845: OUTPUT«foo => 1 bar => 1 baz => 1␤»

[10:19] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«foo => 1bar => 1baz => 1␤»

[10:19] <FROGGS> m: say (<foo bar baz> Z=> 1 xx *).perl

[10:19] <camelia> rakudo-moar a7c845: OUTPUT«(:foo(1), :bar(1), :baz(1))␤»

[10:19] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«(:foo(1), :bar(1), :baz(1)).Seq␤»

[10:19] <timotimo> nqp-m: say NQPList

[10:19] <camelia> nqp-moarvm: OUTPUT«Confused at line 2, near "say NQPLis"␤   at gen/moar/stage2/NQPHLL.nqp:516  (/home/camelia/rakudo-inst-2/share/nqp/lib/NQPHLL.moarvm:panic:105)␤ from gen/moar/stage2/NQP.nqp:921  (/home/camelia/rakudo-inst-2/share/nqp/lib/nqp.moarvm:comp_unit:872)␤ from gen/…»

[10:19] <timotimo> nqp-m: say(NQPList)

[10:19] <camelia> nqp-moarvm: OUTPUT«␤»

[10:19] *** virtualsue left
[10:20] <timotimo> nqp-m: say(NQPMu)

[10:20] <camelia> nqp-moarvm: OUTPUT«␤»

[10:20] *** virtualsue joined
[10:20] <lizmat> m: say "foo".rindex("f",1e35)   # FROGGS, shouldn't that die now ?

[10:20] <FROGGS> m: my %h = <foo bar baz> Z=> 1 xx *; for %h.keys { .say }

[10:20] <camelia> rakudo-moar a7c845: OUTPUT«Nil␤»

[10:20] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«0␤»

[10:20] <camelia> rakudo-moar a7c845: OUTPUT«bar␤baz␤foo␤»

[10:20] <GLRelia> rakudo-moar 8f5dd0: OUTPUT«bar␤baz␤foo␤»

[10:20] <timotimo> ah, needs to be NQPArray

[10:20] <timotimo> nqp-m: say(NQPArray)

[10:20] <camelia> nqp-moarvm: OUTPUT«␤»

[10:20] <timotimo> that doesn't tell me anything, though

[10:20] <FROGGS> lizmat: I don't think so

[10:21] <FROGGS> lizmat: the offset is longer than the string, so you get Nil... err, supposed to get Nil

[10:21] <colomon> nine: hmm, I think the /S02-types/bag.t are likely to be glitches in the bag constructor.  I will look at these once I look at classify.  :)

[10:21] <masak> FROGGS: Ven and I are discussing https://gist.github.com/masak/3438222 now

[10:22] <FROGGS> masak: ool

[10:22] <FROGGS> cool*

[10:22] <lizmat> FROGGS: ok

[10:23] <FROGGS> lizmat: so it is a bug that it does not return Nil

[10:23] <lizmat> yup

[10:23] <tadzik> masak: I feel like both are just avoiding the need of a C parser that'll automatically generate this stuff :)

[10:23] <FROGGS> m: use nqp; say nqp::unbox_i 1e35.Int

[10:23] <camelia> rakudo-moar eab03c: OUTPUT«0␤»

[10:23] <GLRelia> rakudo-moar ca6b9e: OUTPUT«0␤»

[10:23] <FROGGS> :o(

[10:23] *** rurban left
[10:23] <lizmat> yeah :-(

[10:24] <jnthn> FROGGS: Hm, didn't you commit the check for that overflow? 

[10:24] <FROGGS> potentially it fits into an MVMuint64, and will later be casted into an MVMint64

[10:24] <lizmat> FROGGS: so *that*'s the bug, right ?

[10:24] <FROGGS> lizmat: aye

[10:24] <jnthn> Oh, 1e35 easily fits, no?

[10:24] <colomon> lizmat: do I trigger the Baggy classify-list routine by using into=>Bag.new when I call classify?

[10:24] <[Coke]> Is this related to the failure on os x about the overflow check?

[10:24] <jnthn> Oh, maybe not :)

[10:24] *** muraiki joined
[10:25] <lizmat> colomon: without looking at the code, I think it does

[10:25] <FROGGS> m: say 1e35.Int.fmt('%b').chars

[10:25] <camelia> rakudo-moar eab03c: OUTPUT«117␤»

[10:25] <GLRelia> rakudo-moar ca6b9e: OUTPUT«117␤»

[10:25] <FROGGS> m: say 1e35.Int.fmt('%b')

[10:25] <camelia> rakudo-moar eab03c: OUTPUT«100110100001001100001011100101100011101001101100000100000000000000000000000000000000000000000000000000000000000000000␤»

[10:25] <GLRelia> rakudo-moar ca6b9e: OUTPUT«100110100001001100001011100101100011101001101100000100000000000000000000000000000000000000000000000000000000000000000␤»

[10:25] <[Coke]> t/spec/S02-types/declare.t - fails test #19

[10:25] <lizmat> [Coke]: is that a new fail ?

[10:25] <FROGGS> m: use nqp; say nqp::unbox_i 1e36.Int

[10:25] <camelia> rakudo-moar eab03c: OUTPUT«0␤»

[10:25] <GLRelia> rakudo-moar ca6b9e: OUTPUT«0␤»

[10:25] <FROGGS> m: use nqp; say nqp::unbox_i 1e34.Int

[10:25] <camelia> rakudo-moar eab03c: OUTPUT«3458764513820540928␤»

[10:25] <GLRelia> rakudo-moar ca6b9e: OUTPUT«3458764513820540928␤»

[10:26] <FROGGS> m: use nqp; say nqp::unbox_i (-1e35).Int

[10:26] <camelia> rakudo-moar eab03c: OUTPUT«0␤»

[10:26] <GLRelia> rakudo-moar ca6b9e: OUTPUT«0␤»

[10:26] <FROGGS> ??

[10:26] <[Coke]> been failing since the test was added.

[10:26] <colomon> lizmat: "... a large array goes into a bar - I mean bag - with 50k elems and lives"  :)

[10:26] <FROGGS> this was working just the other day

[10:26] <FROGGS> $ perl6 -e 'use nqp; say nqp::unbox_i 1e36.Int'

[10:26] <FROGGS> Cannot unbox 120 bit wide bigint into native integer

[10:26] <[Coke]> I mentioned it previously in backlog, but haven't opened a ticket, my bad.

[10:26] <FROGGS> maybe we are on an old moarvm?

[10:27] <lizmat> $ 6 'use nqp; say nqp::unbox_i 1e36.Int'

[10:27] <lizmat> 0

[10:27] <lizmat> that's the latest rakudo on GLR and OS X

[10:27] <timotimo> jnthn: how can i be segfaulting on https://gist.github.com/timo/04a201f9c5fe9b5bd752#file-gistfile1-txt-L234 - this line? :o

[10:27] <FROGGS> I'll bump moar revision for nqp+glr

[10:28] <dalek> perl6-examples: 437a6c4 | paultcochrane++ | categories/euler/prob (4 files):

[10:28] <dalek> perl6-examples: Purge hard tabs in examples

[10:28] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/437a6c4b8e

[10:28] <dalek> nqp: 02910ff | FROGGS++ | tools/build/MOAR_REVISION:

[10:28] <dalek> nqp: bump moar revision

[10:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/02910ff48e

[10:29] <dalek> rakudo/glr: 23b3d29 | FROGGS++ | tools/build/NQP_REVISION:

[10:29] <dalek> rakudo/glr: bump nqp/moar revision

[10:29] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/23b3d29da6

[10:29] <FROGGS> lizmat / [Coke]: this should do I hope

[10:29] <JimmyZ> timotimo: thre is a  MVMROOT, which cause the line is wrong.

[10:29] <|Tux|> can I see from perl6 --version if it is nom or glr?

[10:29] <yoleaux> 26 Aug 2015 17:43Z <laben> |Tux|: i fixed up to test file 50_utf8.t, i'm now at 55_combi.t where the problem is trying to assign a list of chars (instead of Str) to both $!esc and $!quo. what did you mean to do?

[10:29] <yoleaux> 26 Aug 2015 21:27Z <laben> |Tux|: i fixed 60_samples.t after skipping 55_combi.t, i got up to 90/114 tests of 77_getall.t passing, still needs a lot of work

[10:30] <lizmat> FROGGS: just pulled, building now

[10:30] <timotimo> JimmyZ: so in reality the problem must be on a different line?

[10:30] <timotimo> so ... how do i find the right line? turn on disassembly? X_x

[10:30] <JimmyZ> timotimo: yeah, change it to the function ...

[10:30] <FROGGS> |Tux|: not reliably I guess

[10:31] <timotimo> you mean MVM_gc_temp_roots_push or what it's called?

[10:31] <JimmyZ> yes

[10:31] <dalek> perl6-examples: 6e50a73 | paultcochrane++ | bin/ (2 files):

[10:31] <dalek> perl6-examples: Remove now outdated utility scripts

[10:31] <dalek> perl6-examples: 

[10:31] <dalek> perl6-examples: Adding a collaborator can happen either via the GitHub website, or if it has

[10:31] <dalek> perl6-examples: to be scripted, via the GitHub api.  The twitter2irc script doesn't seem to

[10:31] <dalek> perl6-examples: be used at all.

[10:31] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/6e50a73aa0

[10:31] <[Coke]> FROGGS: my failure is on nom.

[10:31] <FROGGS> [Coke]: I can bump nom too, hold on

[10:31] *** virtualsue left
[10:32] <timotimo> i'll have a look

[10:32] <JimmyZ> timotimo: or use MSVC, which seems to be a little friendly to macro

[10:32] <JimmyZ> timotimo: jnthn may know :P

[10:33] <dalek> rakudo/nom: a46b09c | FROGGS++ | tools/build/NQP_REVISION:

[10:33] <dalek> rakudo/nom: bump nqp/moar revision

[10:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a46b09c491

[10:33] <FROGGS> [Coke]: ^^

[10:34] <JimmyZ> anyone could merge https://github.com/rakudo/rakudo/pull/506?

[10:34] <JimmyZ> t is safe now

[10:36] <[Coke]> 1) build rakudo 2) install it. 3) panda rebootstrap 4) install linenoise ... 5) build directory's ./perl6-m now supports linenoise?

[10:36] <timotimo> JimmyZ: now the segfault comes from the next MVMROOT …

[10:36] <JimmyZ> timotimo: you need changed all the MVMROOT of this  file, as far as I know

[10:36] <[Coke]> ah, yes, because the ./perl6-m handler is using the installed prefix as a libpath.

[10:37] <timotimo> $2 = {fates = 0xc30180, num_states = 0, num_state_edges = 0x38000000000001, states = 0x6075b8}

[10:37] <timotimo> that looks sane!

[10:37] <timotimo> no problems here!

[10:38] <Ulti>  /win 2

[10:38] <Ulti> erk

[10:38] * colomon cannot find any sign that roast actually tests Baggy.classify-list (even indirectly)

[10:38] <[ptc]> itz: found lots of examples-related processes were still running from 22nd of August.  Have just killed them all.  Running update-and-sync by hand should hopefully work again now.

[10:39] <moritz> colomon: then that should be corrected :-)

[10:39] <colomon> moritz: I’m working on it.  but it’s tricky, I need to figure out what it is supposed to do.  ;)

[10:39] * timotimo grabs one of these bites

[10:39] <moritz> colomon: :-)

[10:39] <colomon> aha!

[10:40] <jnthn> timotimo: Is the debugger pointing at the wrong line 'cus it's confused by the macro?

[10:42] <colomon> m: say (1..10).classify(* %% 2)

[10:42] <camelia> rakudo-moar eab03c: OUTPUT«False => 1 3 5 7 9, True => 2 4 6 8 10␤»

[10:42] <GLRelia> rakudo-moar 23b3d2: OUTPUT«True => 2 4 6 8 10False => 1 3 5 7 9␤»

[10:44] <colomon> m: my %b := BagHash.new; say (1..10).classify(* %% 2, :into(%b))

[10:44] <camelia> rakudo-moar eab03c: OUTPUT«BagHash.new(False(5), True(5))␤»

[10:44] <GLRelia> rakudo-moar 23b3d2: OUTPUT«BagHash.new(True(5), False(5))␤»

[10:44] <colomon> lizmat: do those results look correct to you?  :)

[10:44] * colomon did not change anything to get them.

[10:44] <timotimo> jnthn: jimmyz suggested that and i've removed the macros, now i get an nfa with a num_state_edges that's set to an insane number d|

[10:44] <timotimo> :|

[10:45] <lizmat> colomon: looks sane to me?

[10:45] <colomon> lizmat: groovy.

[10:45] <colomon> # expected: ("even"=>2,"odd"=>2).BagHash

[10:45] <colomon> #      got: ("even"=>2,"odd"=>2).BagHash

[10:45] <timotimo> oh

[10:46] <timotimo> num_state_edges is actually supposed to be a pointer to an array

[10:46] <colomon> is-deeply maybe doesn’t handle BagHashes?

[10:46] *** Ven left
[10:46] <timotimo> a pointer ending in a "1" doesn't seem like a sane pointer :|

[10:46] <lizmat> does is-deeply handle different hash orders at all?

[10:47] <lizmat> lunch&

[10:49] <timotimo> is-deeply lunch

[10:51] <ShimmerFairy> colomon: is-deeply does eqv, unless I'm mistaken, so maybe check that?

[10:51] <btyler_> I think I found something memory-leaky: https://gist.github.com/kanatohodets/b3692b4e41a3e47620a1

[10:52] <FROGGS> m: my @a = [$["foo", "bar"], "baz"]; say @a X=> 1 # how do I make that outputting "foo => 1bar => 1baz => 1" ?

[10:52] <camelia> rakudo-moar a46b09: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏foo' (indicated by ⏏)␤  in block <unit> at /tmp/heKhShyIC3:1␤␤Actually thrown at:␤  in block <unit> at /tmp/heKhShyIC3:1␤␤»

[10:52] <GLRelia> rakudo-moar 23b3d2: OUTPUT«foo bar => 1baz => 1␤»

[10:52] <ShimmerFairy> m: my @a = [$["foo", "bar"], "baz"]; say (@a X=> 1).perl

[10:52] <camelia> rakudo-moar a46b09: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏foo' (indicated by ⏏)␤  in block <unit> at /tmp/yQMaBQSapr:1␤␤Actually thrown at:␤  in block <unit> at /tmp/yQMaBQSapr:1␤␤»

[10:52] <GLRelia> rakudo-moar 23b3d2: OUTPUT«($["foo", "bar"] => 1, :baz(1)).Seq␤»

[10:53] <jnthn> timotimo: Sounds like memory corruption of some kind then... :S

[10:53] <|Tux|> laben, /me is ready for some digging while a heavy process is running.

[10:53] <colomon> timotimo: a pointer ending in 1 is just a bit odd, that’s all.

[10:53] <FROGGS> hehe

[10:53] <FROGGS> even that, aye

[10:53] <btyler_> jnthn: FROGGS pointed me your way on that leaky thing -- anything I can do to narrow down the hunt?

[10:53] <[Coke]> btyler_: verified, that seems to chew memory on my OS X box.

[10:54] *** rindolf left
[10:54] *** Sqirrel left
[10:54] <FROGGS> jnthn: btw, he says it does not leak when $count is a constant... leaking code is: my $count = 0; loop { 1 if $count %% 1 }

[10:54] <FROGGS> so it can't be the %% op

[10:55] <nine> colomon: BagHash or one of its base classes may need a WHICH

[10:56] *** Sqirrel joined
[10:56] <jnthn> Well, 0 %% 1 probably gets constant-folded

[10:56] *** dayangkun left
[10:56] <jnthn> m say 0 %% 1

[10:57] <|Tux|> does «class C does Iterable does Positional {» in glr need additional roles to also do Hash lookups with AT-KEY ?

[10:57] <jnthn> m: say 0 %% 1

[10:57] <camelia> rakudo-moar a46b09: OUTPUT«True␤»

[10:57] <GLRelia> rakudo-moar 23b3d2: OUTPUT«True␤»

[10:57] <jnthn> |Tux|: Things you can hash-index into normally does Associative

[10:58] <timotimo> i see what you did there, colomon :)

[10:58] <jnthn> I'd probably valgrind it

[10:59] <|Tux|> jnthn, and what should method "of" be implementing in that case?

[10:59] <colomon> timotimo: I was disturbingly pleased by that one.  ;)

[10:59] <jnthn> |Tux|: What type constraint anything you store in it has; return Mu if you aren't implementing a typed data structure

[11:00] *** RabidGravy left
[11:00] <laben> |Tux|: i can send you a gist with the changes, too busy to investigate right now

[11:00] <|Tux|> laben, yes please

[11:00] *** rurban joined
[11:04] <laben> |Tux|: here is it, they're all together https://gist.github.com/e3ab90806f82cd349493

[11:04] <|Tux|> thanks

[11:04] <laben> some seems precedence problems, maybe due to the slang

[11:05] *** Ven joined
[11:06] <colomon> m: %b := BagHash.new(); %b.classify-list( {.comb}, 20..40 ); say %b.perl

[11:06] <camelia> rakudo-moar a46b09: OUTPUT«5===SORRY!5=== Error while compiling /tmp/5AlhUIubL2␤Variable '%b' is not declared␤at /tmp/5AlhUIubL2:1␤------> 3<BOL>7⏏5%b := BagHash.new(); %b.classify-list( {␤»

[11:06] <GLRelia> rakudo-moar 23b3d2: OUTPUT«5===SORRY!5=== Error while compiling /tmp/z7RZQ2QFmg␤Variable '%b' is not declared␤at /tmp/z7RZQ2QFmg:1␤------> 3<BOL>7⏏5%b := BagHash.new(); %b.classify-list( {␤»

[11:06] <colomon> m: my %b := BagHash.new(); %b.classify-list( {.comb}, 20..40 ); say %b.perl

[11:06] <camelia> rakudo-moar a46b09: OUTPUT«postcircumfix:<{ }> not defined for type Int␤  in block <unit> at /tmp/jOo0Ksq1et:1␤␤Actually thrown at:␤  in any  at src/gen/m-Metamodel.nqp:2867␤  in block <unit> at /tmp/jOo0Ksq1et:1␤␤»

[11:06] <GLRelia> rakudo-moar 23b3d2: OUTPUT«Method 'succ' not found for invocant of class 'List'␤  in block <unit> at /tmp/TaCRMRZ234:1␤␤»

[11:06] <colomon> lizmat: I think this operation is broken in both both nom and glr.

[11:07] <timotimo> oh, duh

[11:07] <colomon> lizmat: but then, I’m not 100% sure what it is supposed to do

[11:07] <timotimo> if num_states is 0, of course the states array isn't defined memory

[11:08] <dalek> rakudo/glr: f761858 | jnthn++ | src/Perl6/Actions.nqp:

[11:08] <dalek> rakudo/glr: (1, 2 ; 3, 4) now makes a List of List.

[11:08] <dalek> rakudo/glr: 

[11:08] <dalek> rakudo/glr: Literally. No LoL.

[11:08] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/f761858b8b

[11:08] *** Ven left
[11:09] *** colomon left
[11:10] <JimmyZ> I thought LoL is short for List of List ...

[11:11] <tadzik> we python now

[11:12] <jnthn> JimmyZ: Now there's no type LoL though :)

[11:12] <sergot> hi #perl6!

[11:12] <tadzik> oh hai

[11:13] *** llfourn joined
[11:13] *** colomon joined
[11:14] <dalek> perl6-roast-data: 74100de | coke++ | / (2 files):

[11:14] <dalek> perl6-roast-data: another glr run for 'today'

[11:14] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/74100de4fd

[11:14] <timotimo> i forgot a single "re-grab the NFA pointer from the nfa root if the gc has kicked in since"

[11:15] <timotimo> argh!

[11:16] <[Coke]> m: 118901 - 118302 # of tests moar-jit is passing vs. moar-glr

[11:16] <camelia> rakudo-moar a46b09: OUTPUT«WARNINGS:␤Useless use of "-" in expression "118901 - 118302" in sink context (line 1)␤»

[11:16] <GLRelia> rakudo-moar 23b3d2: OUTPUT«WARNINGS:␤Useless use of "-" in expression "118901 - 118302" in sink context (line 1)␤»

[11:16] <[Coke]> m: say 118901 - 118302 # of tests moar-jit is passing vs. moar-glr

[11:16] <camelia> rakudo-moar a46b09: OUTPUT«599␤»

[11:16] <GLRelia> rakudo-moar 23b3d2: OUTPUT«599␤»

[11:16] <timotimo> the code to do that was actually totally bogus %)

[11:19] <[Coke]> m: for (9...1) X (9...1) X (9...1) X (9...1) X (9...1) X (9,7,3) -> $a,$b,$c,$d,$e,$f {}

[11:19] <GLRelia> rakudo-moar f76185: OUTPUT«Method 'pull-one' not found for invocant of class 'List'␤  in block <unit> at /tmp/P1lB7Eam_c:1␤␤»

[11:19] <camelia> rakudo-moar a46b09: OUTPUT«Too few positionals passed; expected 6 arguments but got 3␤  in block <unit> at /tmp/z2z1NpgXqB:1␤␤»

[11:19] <dalek> rakudo/nom: 5d3fe6a | moritz++ | t/spectest.data:

[11:19] <dalek> rakudo/nom: Comment out IO-Socket-Async.t for the release

[11:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5d3fe6a40c

[11:19] <[Coke]> ^^ jnthn - that's from your RT #114918

[11:19] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=114918

[11:20] <colomon> m: my %b := BagHash.new(); %b.classify-list( {.comb}, 20..40 ); say %b.perl

[11:20] <camelia> rakudo-moar a46b09: OUTPUT«postcircumfix:<{ }> not defined for type Int␤  in block <unit> at /tmp/Oojcn28zVs:1␤␤Actually thrown at:␤  in any  at src/gen/m-Metamodel.nqp:2867␤  in block <unit> at /tmp/Oojcn28zVs:1␤␤»

[11:20] <GLRelia> rakudo-moar f76185: OUTPUT«Method 'succ' not found for invocant of class 'List'␤  in block <unit> at /tmp/oxvcsh2p4W:1␤␤»

[11:20] <colomon> masak: ^^

[11:20] * masak submits rakudobug

[11:21] <colomon> m: my %b; %b.classify-list( {.comb}, 20..40 ); say %b.perl

[11:21] <camelia> rakudo-moar a46b09: OUTPUT«{"2" => {"0" => [20], "1" => [21], "2" => [22], "3" => [23], "4" => [24], "5" => [25], "6" => [26], "7" => [27], "8" => [28], "9" => [29]}, "3" => {"0" => [30], "1" => [31], "2" => [32], "3" => [33], "4" => [34], "5" => [35], "6" => [36], "7" => [37], "8" …»

[11:21] <GLRelia> rakudo-moar f76185: OUTPUT«{"2" => ${"0" => $[20], "1" => $[21], "2" => $[22], "3" => $[23], "4" => $[24], "5" => $[25], "6" => $[26], "7" => $[27], "8" => $[28], "9" => $[29]}, "3" => ${"0" => $[30], "1" => $[31], "2" => $[32], "3" => $[33], "4" => $[34], "5" => $[35], "6" => $[36]…»

[11:22] <[Coke]> r: []=5; say "alive"

[11:22] <GLRelia> rakudo-moar f76185: OUTPUT«alive␤»

[11:22] <GLRelia> ..rakudo-jvm f76185: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[11:22] <camelia> rakudo-{moar,jvm} a46b09: OUTPUT«alive␤»

[11:22] *** Ven joined
[11:24] <masak> m: my %b := BagHash.new(); say %b{'foo'}

[11:24] <camelia> rakudo-moar a46b09: OUTPUT«0␤»

[11:24] <GLRelia> rakudo-moar f76185: OUTPUT«0␤»

[11:24] <FROGGS> m: say (42, 3).WHAT

[11:24] <camelia> rakudo-moar a46b09: OUTPUT«(Parcel)␤»

[11:24] <GLRelia> rakudo-moar f76185: OUTPUT«Invocant requires an instance of type List, but a type object was passed.  Did you forget a .new?␤  in block <unit> at /tmp/7_bfpx7ZdU:1␤␤»

[11:25] <moritz> huh.

[11:25] <[Coke]> my @RT120506-bind := Array[Array[Bool]].new($(Array[Bool].new(True, False, True)), $(Array[Bool].new(True))); use Test; is-deeply @RT120506-bind[0, 1]».Parcel, ((True, False, True), (True,)), "urk?"

[11:25] <[Coke]> m: my @RT120506-bind := Array[Array[Bool]].new($(Array[Bool].new(True, False, True)), $(Array[Bool].new(True))); use Test; is-deeply @RT120506-bind[0, 1]».Parcel, ((True, False, True), (True,)), "urk?"

[11:25] <camelia> rakudo-moar a46b09: OUTPUT«not ok 1 - urk?␤␤# Failed test 'urk?'␤# at /tmp/RUm0uDPc9K line 1␤# expected: $((Bool::True, Bool::False, Bool::True), (Bool::True,))␤#      got: $(Array[Bool].new(Bool::True, Bool::False, Bool::True), Array[Bool].new(Bool::True))␤»

[11:25] <GLRelia> rakudo-moar f76185: OUTPUT«Method 'Parcel' not found for invocant of class 'Bool'␤  in block <unit> at /tmp/DwdNCPC3u2:1␤␤»

[11:25] <laben> m: for (1..2) X (1..2) -> $a, $b {}; say "OK"; for (1..9) X (1..9) -> $a, $b {}

[11:25] <camelia> rakudo-moar a46b09: OUTPUT«OK␤»

[11:25] <GLRelia> rakudo-moar f76185: OUTPUT«OK␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at /tmp/Lw8XlPGktm:1␤␤»

[11:26] <laben> why ^^^ is it different between 1..2 and 1..9?

[11:26] *** CIAvash left
[11:26] <colomon> what does 1..3 do?

[11:26] <masak> laben: even vs odd number of elements

[11:27] <masak> laben: you're looping over the tuples themselves, and there are 4 and 81

[11:27] <laben> masak: why does it even matter, shouldn't there be a single list created by X?

[11:27] <[Coke]> m: my @m <== sort <== ("c", "b", "a") ; say @m;

[11:27] <camelia> rakudo-moar a46b09: OUTPUT«5===SORRY!5=== Error while compiling /tmp/RbxmL4VmsT␤Unable to parse expression in quote words; couldn't find final '>'␤        ␤at /tmp/RbxmL4VmsT:1␤------> 3m <== sort <== ("c", "b", "a") ; say @m;7⏏5<EOL>␤    expecting any of:␤    …»

[11:27] <GLRelia> rakudo-moar f76185: OUTPUT«5===SORRY!5=== Error while compiling /tmp/82aR3aEFpM␤Unable to parse expression in quote words; couldn't find final '>'␤        ␤at /tmp/82aR3aEFpM:1␤------> 3m <== sort <== ("c", "b", "a") ; say @m;7⏏5<EOL>␤    expecting any of:␤    …»

[11:27] <masak> nope, not without `flat`

[11:27] <laben> doesnt X create a list of tuples?

[11:27] <masak> that's what's meant by "learn to love `flat`" :)

[11:27] <masak> laben: yes, it does. that's what you're seeing.

[11:28] <[Coke]> m: my @m <== sort() <== ("c", "b", "a") ; say @m;

[11:28] <camelia> rakudo-moar a46b09: OUTPUT«a b c␤»

[11:28] <GLRelia> rakudo-moar f76185: OUTPUT«abc␤»

[11:28] <masak> laben: $a and $b each get such a *tuple*

[11:28] <[Coke]> ^^ is it reasonable to require the parens there? RT #121843

[11:28] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=121843

[11:28] <masak> m: for (1..2) X (1..2) -> $a, $b { say $a }

[11:28] <camelia> rakudo-moar a46b09: OUTPUT«1␤1␤2␤2␤»

[11:28] <GLRelia> rakudo-moar f76185: OUTPUT«1 1␤2 1␤»

[11:28] <masak> oh, it differs between cam and GLR

[11:28] <laben> m: for $((1..2) X (1..2)) -> $a { dd $a };

[11:28] <camelia> rakudo-moar a46b09: OUTPUT«$a = $(1, 1, 1, 2, 2, 1, 2, 2)␤»

[11:28] <GLRelia> rakudo-moar f76185: OUTPUT«$a = $(1, 1)␤$a = $(1, 2)␤$a = $(2, 1)␤$a = $(2, 2)␤»

[11:29] <masak> [Coke]: reasonable to require them? I dunno. they don't look required to me.

[11:29] <masak> [Coke]: <== has very low precedence

[11:29] <masak> certainly lower than comme

[11:29] <masak> comma*

[11:29] <dalek> roast/glr: 5d29822 | colomon++ | S32-list/classify.t:

[11:29] <dalek> roast/glr: Add some very minimal tests for Baggy classify.

[11:29] <dalek> roast/glr: 

[11:29] <dalek> roast/glr: As far as I could tell, there weren't any tests for this in roast

[11:29] <dalek> roast/glr: so far.

[11:29] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/5d29822587

[11:30] <[Coke]> masak: required to get the "desired" output. If the original request is borked, please reject the ticket.

[11:31] * masak looks at ticket

[11:31] <dalek> perl6-examples: 0c7e431 | paultcochrane++ | / (3 files):

[11:31] <dalek> perl6-examples: Add HTTP::Easy::PSGI as a dependency

[11:31] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/0c7e431407

[11:31] <[Coke]> masak++

[11:32] <timotimo> oh yay!

[11:32] <laben> masak: thanks! your example helped me understand

[11:32] <timotimo> edges of 18: 2 Internal error: invalid thread ID -334888944 in GC work pass

[11:33] <masak> [Coke]: oh, the parens on `sort()` ?

[11:33] <[Coke]> masak: Hai.

[11:33] <masak> laben: running code beats most things in terms of explanatory power :)

[11:33] <masak> [Coke]: I... dunno. I usually put those parens in, "because then it works"

[11:34] <masak> [Coke]: I don't actually know if it should work without them. kinda feels like it should.

[11:34] <masak> [Coke]: simply because `sort` === `sort()`

[11:34] <[Coke]> Ditto

[11:34] <nine> m: for (1..2) X (1..2) -> ($a, $b) { say $a } # explicit deconstruction

[11:34] <camelia> rakudo-moar a46b09: OUTPUT«Too few positionals passed; expected 2 arguments but got 0 in sub-signature␤  in block <unit> at /tmp/EM1I8Qz7Ih:1␤␤»

[11:34] <GLRelia> rakudo-moar f76185: OUTPUT«1␤1␤2␤2␤»

[11:35] <masak> nine++

[11:37] <masak> m: say 42.indent(4)

[11:37] <camelia> rakudo-moar a46b09: OUTPUT«Method 'indent' not found for invocant of class 'Int'␤  in block <unit> at /tmp/kCES7V68L9:1␤␤»

[11:37] <GLRelia> rakudo-moar f76185: OUTPUT«Method 'indent' not found for invocant of class 'Int'␤  in block <unit> at /tmp/zmnIOfxTcT:1␤␤»

[11:37] <dalek> rakudo/nom: 47ddca1 | moritz++ | docs/ChangeLog:

[11:37] <dalek> rakudo/nom: Add some more changelog entries

[11:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47ddca117d

[11:37] <masak> should .indent be on Cool?

[11:37] <timotimo> m: say -1073741810.base(16)

[11:37] <camelia> rakudo-moar a46b09: OUTPUT«Cannot convert string to number: trailing characters after number in '3⏏FFFFFF2' (indicated by ⏏)␤  in block <unit> at /tmp/ny19SH5eIL:1␤␤Actually thrown at:␤  in block <unit> at /tmp/ny19SH5eIL:1␤␤»

[11:37] <GLRelia> rakudo-moar f76185: OUTPUT«Cannot convert string to number: trailing characters after number in '3⏏FFFFFF2' (indicated by ⏏)␤  in block <unit> at /tmp/y0jUPFzR_i:1␤␤Actually thrown at:␤  in block <unit> at /tmp/y0jUPFzR_i:1␤␤»

[11:37] * [Coke] wouldn't mind if it was string only. anything not cool is just going to be a single line, no?

[11:37] <moritz> masak: that would be consistent with how we do it usually

[11:37] <timotimo> m: say "-1073741810".base(16)

[11:37] <camelia> rakudo-moar a46b09: OUTPUT«Method 'base' not found for invocant of class 'Str'␤  in block <unit> at /tmp/CoNGQxN2Fc:1␤␤»

[11:37] <GLRelia> rakudo-moar f76185: OUTPUT«Method 'base' not found for invocant of class 'Str'␤  in block <unit> at /tmp/lqs6JXuy1N:1␤␤»

[11:37] <dalek> rakudo/glr: f09891f | colomon++ | src/core/Baggy.pm:

[11:37] <dalek> rakudo/glr: Hash.classify-list fix to Baggy.classify-list.

[11:37] <dalek> rakudo/glr: 

[11:37] <dalek> rakudo/glr: Unfortunately, even in nom this part of the classify-list

[11:37] <dalek> rakudo/glr: functionality didn't work.  This fix makes it fail like nom

[11:37] <dalek> rakudo/glr: does, rather than the entire new way of failing that glr had

[11:37] <timotimo> ... huh?

[11:37] <dalek> rakudo/glr: discovered.

[11:37] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/f09891f9c7

[11:38] <timotimo> m: say (-1073741810).base(16)

[11:38] <camelia> rakudo-moar a46b09: OUTPUT«-3FFFFFF2␤»

[11:38] <GLRelia> rakudo-moar f76185: OUTPUT«-3FFFFFF2␤»

[11:38] <masak> ok, if someone wants an LHF:

[11:38] <masak> spectest and move Str.indent to Cool.indent :)

[11:38] <colomon> m: say "-1073741810”.Int.base(16)

[11:38] <camelia> rakudo-moar a46b09: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1OCZvmdXWF␤Unable to parse expression in double quotes; couldn't find final '"' ␤at /tmp/1OCZvmdXWF:1␤------> 3say "-1073741810”.Int.base(16)7⏏5<EOL>␤    expecting any of:␤        argument lis…»

[11:38] <GLRelia> rakudo-moar f76185: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wmGNaJlTAN␤Unable to parse expression in double quotes; couldn't find final '"' ␤at /tmp/wmGNaJlTAN:1␤------> 3say "-1073741810”.Int.base(16)7⏏5<EOL>␤    expecting any of:␤        argument lis…»

[11:38] <dalek> perl6-examples: 0714a62 | paultcochrane++ | categories/cookbook/19cgi-programming/19-01cgi-script.pl:

[11:38] <dalek> perl6-examples: Purge trailing whitespace

[11:38] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/0714a62d90

[11:38] <dalek> perl6-examples: f87f75e | paultcochrane++ | categories/cookbook/ (2 files):

[11:38] <dalek> perl6-examples: Put description text after AUTHOR

[11:38] <dalek> perl6-examples: 

[11:38] <dalek> perl6-examples: Now the parser can find the example author information.

[11:38] <colomon> m: say “-1073741810”.Int.base(16)

[11:38] <camelia> rakudo-moar a46b09: OUTPUT«-3FFFFFF2␤»

[11:38] <GLRelia> rakudo-moar f76185: OUTPUT«-3FFFFFF2␤»

[11:38] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/f87f75e238

[11:44] * ab6tract is excited to leave for the airport to a couple hours :)

[11:45] <ab6tract> *in

[11:46] <colomon> m: sub subber ($a) { $a - ($a % 10) }; my @list      = 29, 7, 12, 9, 18, 23, 3, 7; say categorize(&subber, @list)

[11:46] <camelia> rakudo-moar a46b09: OUTPUT«0 => 7 9 3 7, 10 => 12 18, 20 => 29 23␤»

[11:46] <GLRelia> rakudo-moar f09891: OUTPUT«Cannot call categorize-list(Hash[Any,Any]: Sub, Array); none of these signatures match:␤    (Hash $: %test, $list, *%_)␤    (Hash $: @test, $list, *%_)␤  in block <unit> at /tmp/yn6E8RbDFm:1␤␤»

[11:46] <Ven> ab6tract: are you going to yapc::eu? :)

[11:47] *** Ven left
[11:47] <FROGGS> nine: besides that I think the Array->List conversion makes sense for Signature.named_names, I just need to .Slip in that map in MAIN_HELPER

[11:48] <nine> FROGGS: sounds good :)

[11:48] *** virtualsue joined
[11:52] *** brrt joined
[11:52] *** rurban left
[11:53] <[ptc]> itz: you've got a vim process on hack going nuts.

[11:53] <[ptc]> itz: looks like it's hanging; it's using ~100% cpu and has been for a while

[11:53] <[ptc]> itz: oddly enough, I had such a process just now as well.  Had to kill it and then all was good

[11:53] <ab6tract> Ven: SPW today, YAPC::EU on Tuesday :D

[11:54] <tadzik> is yapc::eu so soon?

[11:54] <tadzik> indeed :)

[11:55] <muraiki> is http://doc.perl6.org/language/containers still up to date? I thought I had seen talk about changing/eliminating parcels or something a while back

[11:55] <ab6tract> ('the hackathon' xx *)>>.++

[11:56] <moritz> muraiki: it's up to date with respect to current rakudo/nom; GLR changes things.

[11:56] <muraiki> moritz: thanks

[11:56] <ab6tract> muraiki: indeed. the very last details seem to be getting hammered out as we speak

[11:56] <muraiki> woot :)

[11:57] <itz> [ptc]: I've just killed all those process I was running a cron which was an old snapshot of the perl6-examples update processes

[11:58] <moritz> is LoL officially dead?

[11:58] <itz> [ptc]: I think I will put a timeout in the code .. perhaps perl6 syntax is sometimes too much for vim syntax hilighting

[11:58] <dalek> rakudo/glr: 285febd | jnthn++ | src/ (4 files):

[11:58] <dalek> rakudo/glr: Stub in new [; ] and {; } handling.

[11:58] <dalek> rakudo/glr: 

[11:58] <dalek> rakudo/glr: All mutli-dispatch errors for now.

[11:58] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/285febda22

[11:58] <moritz> itz: fwiw I've added a CPU time limit in the updated script, but it applies globally

[11:59] *** Ven joined
[11:59] * Ven absolutely <3 OO::*

[11:59] <nine> moritz: yes

[12:04] <dalek> rakudo/glr: a70367c | jnthn++ | src/core/A (2 files):

[12:04] <dalek> rakudo/glr: Start preparing for multi-dim *-POS.

[12:04] <dalek> rakudo/glr: 

[12:04] <dalek> rakudo/glr: We'll pass multiple indices to the [AT|ASSIGN|EXISTS...]-POS methods.

[12:04] <dalek> rakudo/glr: This will allow things that know how many dimensions they have to just

[12:04] <dalek> rakudo/glr: bind them directly to parameters, which will be efficient (and allow

[12:04] <dalek> rakudo/glr: the dynamic optimizer to inline, etc.). We'll be able to do some case

[12:04] <dalek> rakudo/glr: analysis on the indexer itself at optimization time to eliminte the

[12:04] <dalek> rakudo/glr: LoL in the commonest cases also.

[12:04] <dalek> rakudo/glr: 

[12:04] <dalek> rakudo/glr: This patch simply adds fallbacks for the multi-indice case that dig

[12:04] <dalek> rakudo/glr: into the data structure a level at a time.

[12:04] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/a70367c0cd

[12:04] <dalek> rakudo/glr: 6b75f33 | jnthn++ | src/core/Any.pm:

[12:04] <dalek> rakudo/glr: Fix a missing "is rw".

[12:04] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/6b75f33ce3

[12:06] <FROGGS> nine: there are more code paths that expect an Array but not a List sadly :o(

[12:06] <FROGGS> nine: I'll care about this later I think

[12:06] <dalek> roast/glr: 3cdd87a | moritz++ | S04-statements/gather.t:

[12:06] <dalek> roast/glr: Remove .lol from gather.t

[12:06] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/3cdd87a858

[12:08] <dalek> perl6-roast-data: 3cfb0b3 | coke++ | / (2 files):

[12:08] <dalek> perl6-roast-data: another glr run for 'today'

[12:08] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3cfb0b3a43

[12:08] *** itz is now known as _itz

[12:09] *** itz joined
[12:10] <|Tux|> if I have a to_list that is implemented as a gather, .flat on that list in glr will take forever

[12:10] <|Tux|> as in it is not lazy at all

[12:10] <|Tux|> laben, that is the basic cause of failure for t/78

[12:11] <|Tux|> and adding .flat is not helping there

[12:11] <dalek> roast: 4584bfe | ShimmerFairy++ | S02-literals/allomorphic.t:

[12:11] <dalek> roast: Add tests for allomorphic types (IntStr etc.)

[12:11] <dalek> roast: 

[12:11] <dalek> roast: Unfortunately they all have to be fudged for rakudo for the time being.

[12:11] <dalek> roast: review: https://github.com/perl6/roast/commit/4584bfed21

[12:11] *** domidumont left
[12:12] <colomon> in GLR,  are there gotchas about using push?

[12:12] <lizmat> colomon: yes

[12:13] <lizmat> colomon: and we're thinking about them

[12:13] * colomon is ready to recieve wisdom

[12:13] <colomon> …. oh

[12:13] <lizmat> but no solution just yet  :-(

[12:13] <lizmat> or resolution, I should say

[12:15] *** domidumont joined
[12:15] <moritz> why not just git push a **@elems signature, and consider everything on the first level a new element to add?

[12:15] <moritz> m: sub f(**@e) { @e.perl }; say f 1..3

[12:15] <camelia> rakudo-moar 47ddca: OUTPUT«(1, 2, 3)␤»

[12:15] <GLRelia> rakudo-moar 6b75f3: OUTPUT«[1..3]␤»

[12:16] <moritz> m: sub f(**@e) { @e[0].perl }; say f 1..3

[12:16] <camelia> rakudo-moar 47ddca: OUTPUT«1..3␤»

[12:16] <GLRelia> rakudo-moar 6b75f3: OUTPUT«1..3␤»

[12:16] <[Coke]> we have a pending PR for nqp that's a few months old: https://github.com/perl6/nqp/pull/228

[12:17] <moritz> though there are probably implications that I've missed (re .push)

[12:17] <TimToady> that is one of the proposed solutions, but when I tried it, the setting blew up :)

[12:17] *** rarara joined
[12:17] <moritz> TimToady: that's decidedly LTA :-)

[12:20] <dalek> rakudo/glr: 496300b | lizmat++ | src/core/Backtrace.pm:

[12:20] <dalek> rakudo/glr: Fix RAKUDO_VERBOSE_STACKFRAME option

[12:20] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/496300b8b5

[12:21] *** araujo_ joined
[12:23] <timotimo> as sort of expected, the MVM_nfa_to_statelist seems to be correct semantically, but it's not gc-clean :|

[12:24] <jnthn> timotimo: Give it a GC bath

[12:24] * colomon ’s problem didn’t have anything to do with push, it turned out.  :)

[12:24] <dalek> rakudo/glr: f2b993c | jnthn++ | src/core/array_slice.pm:

[12:24] <dalek> rakudo/glr: Make basic ; array indexing work again.

[12:24] <dalek> rakudo/glr: 

[12:24] <dalek> rakudo/glr: Just for simple indexes, not slices.

[12:24] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/f2b993c790

[12:24] *** araujo left
[12:25] <jdv79> so, i have a fix for cpan but i'm not sure if the p5/p6 ecosystem sharing thing is well thought out.  is there a consolidated info somewhere about this?

[12:25] <FROGGS> jdv79: probably only in my brain

[12:26] <jdv79> can that be accessed?

[12:26] <FROGGS> indirectly

[12:26] <FROGGS> there is a brain to text api you can use

[12:27] <timotimo> yeah, you grab froggs at the back of his head and gently push it against the keyboard

[12:27] <lizmat> so those are not freckles, but key impressions ?

[12:28] <FROGGS> really gently please :o)

[12:28] <FROGGS> *g*

[12:28] <FROGGS> good that the L key is not at the middle top

[12:30] <dalek> nqp: 5146561 | coke++ | t/docs/tests.t:

[12:30] <dalek> nqp: Don't use substr2 where substr will do.

[12:30] <dalek> nqp: 

[12:30] <dalek> nqp: Close #223

[12:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/51465619e1

[12:36] <jdv79> so it appears that most p5 ecosystemm things treat the dist/module/package names as unique names so what was the thinking on how that would be addreseed?

[12:36] <tadzik> we don't :)

[12:36] <FROGGS> lizmat: I can't spot in the clogs that you states that your patch causes regressions

[12:37] <tadzik> panda recently stopped doing that

[12:37] <tadzik> ie we have 2 modules named Foo in the ecosystem

[12:37] <jdv79> well, if we want to take advantage of the p5 stuff that's a problem

[12:37] <lizmat> FROGGS: but I never stated that...  because I didn't know it caused a regression

[12:38] <ShimmerFairy> We generally don't, we're just using a P5-coded system :)

[12:38] <FROGGS> lizmat: can you please check that? I loose again almost an hour :o(

[12:38] <lizmat> in fact, I thought it fixed several tests and we were *pro*gressing

[12:38] <lizmat> :-(

[12:38] <FROGGS> s/check that/chek that next time/

[12:38] <nine> Are we sure it's really regressions and not just uncovered bugs?

[12:39] <FROGGS> nine: looks like regression to me

[12:40] <nine> FROGGS: I'm curious. Is there a golf for reproducing the new error?

[12:41] <FROGGS> m: my @a = ("array", "of", "params"); note @a

[12:41] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:41] <GLRelia> rakudo-moar f2b993: OUTPUT«arrayofparams␤»

[12:41] <lizmat> m: my @a = ("array", "of", "params"); say @a

[12:41] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:41] <GLRelia> rakudo-moar f2b993: OUTPUT«arrayofparams␤»

[12:41] <dalek> perl6-examples: b1f0b92 | (Steve Mynott)++ | / (2 files):

[12:41] <dalek> perl6-examples: HTTP::Easy::PSGI in ecosystem HTTP::Easy

[12:41] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/b1f0b92965

[12:41] <FROGGS> it might be just that the remaining note() candidate needs to be note(**@) instead of note(*@)

[12:43] <lizmat> m: my @a = ("array", "of", "params"); say @a,

[12:43] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:43] <GLRelia> rakudo-moar f2b993: OUTPUT«arrayofparams␤»

[12:43] <lizmat> m: my @a = ("array", "of", "params"); say (@a,)

[12:43] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:43] <GLRelia> rakudo-moar f2b993: OUTPUT«arrayofparams␤»

[12:43] <nine> m: my @ac ("array", "of", "params"); say "@a";

[12:43] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/K1pOSCRa8v␤Signatures as constraints on variables not yet implemented. Sorry. ␤at /tmp/K1pOSCRa8v:1␤------> 3my @ac ("array", "of", "params")7⏏5; say "@a";␤»

[12:43] <GLRelia> rakudo-moar f2b993: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ddLirgsRQK␤Signatures as constraints on variables not yet implemented. Sorry. ␤at /tmp/ddLirgsRQK:1␤------> 3my @ac ("array", "of", "params")7⏏5; say "@a";␤»

[12:43] <nine> m: my @a = ("array", "of", "params"); say "@a";

[12:43] <camelia> rakudo-moar 47ddca: OUTPUT«@a␤»

[12:43] <GLRelia> rakudo-moar f2b993: OUTPUT«@a␤»

[12:43] <nine> m: my @a = ("array", "of", "params"); say "{@a}";

[12:43] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:43] <GLRelia> rakudo-moar f2b993: OUTPUT«array of params␤»

[12:43] <nine> m: my @a = ("array", "of", "params"); say @a;

[12:43] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:43] <GLRelia> rakudo-moar f2b993: OUTPUT«arrayofparams␤»

[12:43] <ShimmerFairy> m: my @a = ("array", "of", "params"); say "@a[]";

[12:43] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:43] <GLRelia> rakudo-moar f2b993: OUTPUT«array of params␤»

[12:43] <nine> m: my @a = ("array", "of", "params"); say "array", "of", "params";

[12:43] <camelia> rakudo-moar 47ddca: OUTPUT«arrayofparams␤»

[12:43] <GLRelia> rakudo-moar f2b993: OUTPUT«arrayofparams␤»

[12:44] <nine> m: my @a = ("array", "of", "params"); say $@a;

[12:44] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:44] <GLRelia> rakudo-moar f2b993: OUTPUT«array of params␤»

[12:44] <jdv79> i only see one foo on modules.perl6.org

[12:45] <FROGGS> jdv79: we need to fix the ecosystem code and panda to support multiple same named dists

[12:45] <nine> m: my @a = ("array", "of", "params"); say @a.gist;

[12:45] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:45] <GLRelia> rakudo-moar f2b993: OUTPUT«array of params␤»

[12:45] <lizmat> m: my @a = ("array", "of", "params"); say @a.gist

[12:45] <camelia> rakudo-moar 47ddca: OUTPUT«array of params␤»

[12:45] <GLRelia> rakudo-moar f2b993: OUTPUT«array of params␤»

[12:45] <tadzik> I just noticed that modules.perl6.org doesn't support it

[12:46] <FROGGS> I was always under the impression that 'say @a' implies 'say @a.gist'

[12:47] <FROGGS> and I vote for that 'say 1, 2' always has been wrong

[12:47] <nine> say @a meaning say @a.gist was probably one of the many rules that we replaced by the single-arg-rule

[12:47] <FROGGS> true, though I want to have a space between the elems

[12:49] <nine> m: say 1, 2, 3;

[12:49] <camelia> rakudo-moar 47ddca: OUTPUT«123␤»

[12:49] <GLRelia> rakudo-moar f2b993: OUTPUT«123␤»

[12:49] *** RabidGravy joined
[12:49] <FROGGS> TimToady: can we please have a space character in there?

[12:49] <dalek> rakudo/glr: 2ccea71 | lizmat++ | src/core/io_operators.pm:

[12:49] <dalek> rakudo/glr: Revert "Remove say(\x) / note(\x) candidates"

[12:49] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/2ccea71e81

[12:50] <dalek> ecosystem: 7f151ba | (Nova Patch)++ | META.list:

[12:50] <dalek> ecosystem: CLDR::List moved on GitHub

[12:50] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7f151ba7c1

[12:50] <[Coke]> fixed the nqp docs tests so they are runnable again. Lots of docs missing +/or untested opcodes.

[12:51] <ShimmerFairy> FROGGS: however,  say "Foo: ", something-to-print($arg)  will end up breaking (by putting extra spaces where you don't mean them)

[12:52] <[Coke]> colomon opened a new RT? aiiigh. :)

[12:52] <|Tux|> GLR: method to_list { gather { take 3 .. Inf }} ← that now returns a Range instead of a lazy list. Is that intended?

[12:53] <FROGGS> m: say 12, 3; say (my @a = 12, 3); # I want bot output "12 3"

[12:53] <camelia> rakudo-moar 47ddca: OUTPUT«123␤12 3␤»

[12:53] <GLRelia> rakudo-moar f2b993: OUTPUT«123␤123␤»

[12:53] <FROGGS> TimToady / lizmat: ^^

[12:54] <FROGGS> both*

[12:54] <[Coke]> m: say 12, 3; say (my @a = 12, 3).perl

[12:54] <camelia> rakudo-moar 47ddca: OUTPUT«123␤[12, 3]<>␤»

[12:54] <GLRelia> rakudo-moar f2b993: OUTPUT«123␤[12, 3]␤»

[12:54] <[Coke]> do you want default join() changed or default gist?

[12:55] <lizmat> nothing to do with join

[12:55] <FROGGS> [Coke]: neither

[12:55] <FROGGS> say calls .gist on the elems of the input array, and joins it with ''

[12:55] <ShimmerFairy> like I said, it would break a lot of literal arg lists passed to 'say' that expect nothing to be placed between elements, so I don't think changing that is the right move.

[12:55] <FROGGS> and this is wrong IMO

[12:56] <FROGGS> ShimmerFairy: I'm thinking about it

[12:57] <ShimmerFairy> I think the better solution would be something that preserved the fact that you're passing a list object to say (isn't **@a supposed to do that?)

[12:58] <|Tux|> m: class C{method foo{gather { take 3..Inf}}};C.new.foo[^9].perl.say

[12:58] <camelia> rakudo-moar 47ddca: OUTPUT«(3, 4, 5, 6, 7, 8, 9, 10, 11)␤»

[12:58] <GLRelia> rakudo-moar f2b993: OUTPUT«(3..Inf)␤»

[12:58] <[Coke]> r: my @a=<a a a>;my @b=<b b b>;for (@a »,« @b) »,« @a -> $a, $b,$c {say "$a $b $c"}

[12:58] <GLRelia> rakudo-jvm 2ccea7: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[12:58] <GLRelia> ..rakudo-moar 2ccea7: OUTPUT«Lists on either side of non-dwimmy hyperop of infix:<,> are not of the same length␤left: 2 elements, right: 1 elements␤  in block <unit> at /tmp/tmpfile:1␤␤»

[12:58] <timotimo> m: say rand 5

[12:58] <GLRelia> rakudo-moar 2ccea7: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ploXygyYbC␤Unsupported use of rand(N); in Perl 6 please use N.rand for Num or (^N).pick for Int result␤at /tmp/ploXygyYbC:1␤------> 3say rand7⏏5 5␤»

[12:58] <camelia> rakudo-{moar,jvm} 47ddca: OUTPUT«Lists on either side of non-dwimmy hyperop of infix:<,> are not of the same length␤left: 6 elements, right: 3 elements␤  in block <unit> at /tmp/tmpfile:1␤␤»

[12:58] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/od5piU737C␤Unsupported use of rand(N); in Perl 6 please use N.rand for Num or (^N).pick for Int result␤at /tmp/od5piU737C:1␤------> 3say rand7⏏5 5␤»

[12:59] <|Tux|> is that glr behavior expected or shall nom and glr be the same?

[13:00] <[Coke]> r: my @a := 1..*; @a := @a[1, 3 ... *].list

[13:00] <GLRelia> rakudo-moar 2ccea7: OUTPUT«(timeout)»

[13:00] <GLRelia> ..rakudo-jvm 2ccea7: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[13:00] <camelia> rakudo-jvm 47ddca: OUTPUT«␤(timeout)␤»

[13:00] <camelia> ..rakudo-moar 47ddca: OUTPUT«(timeout)»

[13:01] <masak> <FROGGS> TimToady: can we please have a space character in there?

[13:01] <masak> FROGGS: I'm pretty sure I wouldn't want that

[13:01] <FROGGS> masak: also not for 'say @a' ?

[13:01] <masak> FROGGS: I use `say thing, thing, thing;` when I want to print things next to each other, no space.

[13:01] <dalek> rakudo/glr: 99f158a | TimToady++ | src/core/Array.pm:

[13:01] <dalek> rakudo/glr: omit redundant $ inside Array.perl

[13:01] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/99f158a6ee

[13:01] <masak> FROGGS: I see `say @a` as a different case.

[13:01] <FROGGS> masak: okay, I can live with that

[13:02] <FROGGS> masak: so we want the old behaviour?

[13:02] <masak> FROGGS: if I was the Emperor of Perl 6, `say @a` would actually print something like "[1, 2, 3]". but TimToady has already overruled that.

[13:02] <masak> FROGGS: and so I'll have to contend with "1 2 3"

[13:02] <FROGGS> k

[13:02] <dalek> nqp/nfa_to_statelist: 2e95469 | timotimo++ | src/ (13 files):

[13:02] <dalek> nqp/nfa_to_statelist: test nfatostatelist

[13:02] <dalek> nqp/nfa_to_statelist: 

[13:02] <dalek> nqp/nfa_to_statelist: by calling it on every nfa we call nfafromstatelist on.

[13:02] <dalek> nqp/nfa_to_statelist: review: https://github.com/perl6/nqp/commit/2e95469680

[13:02] <moritz> m: my @a = 1 2, 3; say @a

[13:02] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/4pb6s5CeRH␤Two terms in a row␤at /tmp/4pb6s5CeRH:1␤------> 3my @a = 17⏏5 2, 3; say @a␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤    …»

[13:02] <GLRelia> rakudo-moar 2ccea7: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8Dnazf07Ct␤Two terms in a row␤at /tmp/8Dnazf07Ct:1␤------> 3my @a = 17⏏5 2, 3; say @a␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤    …»

[13:02] <moritz> m: my @a = 1, 2, 3; say @a

[13:02] <camelia> rakudo-moar 47ddca: OUTPUT«1 2 3␤»

[13:02] <GLRelia> rakudo-moar 2ccea7: OUTPUT«1 2 3␤»

[13:03] <FROGGS> lizmat / TimToady: so given ShimmerFairy's and masak's opinions, I want to old behaviour back

[13:03] <moritz> I expected that to say 123, because say() has a slurpy arg, no?

[13:03] <masak> you mean you expected that under GLR?

[13:03] <dalek> rakudo/glr: f26f52d | (Stefan Seifert)++ | src/core/Supply.pm:

[13:03] <dalek> rakudo/glr: Fix Supply.rotor on non-lazy lists

[13:03] <dalek> rakudo/glr: 

[13:03] <dalek> rakudo/glr: Fixes "Type check failed in binding; expected 'Positional' but got

[13:03] <dalek> rakudo/glr: 'Seq'" in rotor caused by xx returning a Seq now and we try to bind to

[13:03] <dalek> rakudo/glr: an @array. Need to .flat that because the code expects a flattened list

[13:03] <dalek> rakudo/glr: of values instead of a list of lists.

[13:03] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/f26f52d26a

[13:03] <dalek> nqp: 34501ae | coke++ | t/docs/tests.t:

[13:03] <dalek> nqp: make t/docs/tests.t runnable again

[13:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/34501aeab8

[13:03] <FROGGS> lizmat / TimToady: so, space for passing an @a, no space for literal lists

[13:03] <FROGGS> moritz: don't mind the implementation

[13:03] *** rurban joined
[13:03] <[Coke]> r: role c {}; my @a = 1,2,3,4; my $b = @a.pick(2) but c; say $b.WHAT; say $b;

[13:03] <GLRelia> rakudo-moar 2ccea7: OUTPUT«(Seq+{c})␤2 4␤»

[13:03] <GLRelia> ..rakudo-jvm 2ccea7: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[13:04] <camelia> rakudo-moar 47ddca: OUTPUT«(List+{c})␤This type does not support elems␤  in block <unit> at /tmp/tmpfile:1␤␤»

[13:04] <camelia> ..rakudo-jvm 47ddca: OUTPUT«(List+{c})␤java.lang.RuntimeException: This type does not support positional operations␤  in block <unit> at /tmp/tmpfile:1␤␤»

[13:04] <ShimmerFairy> masak: there can be brackets at least, so we know how things are nested :)

[13:04] <laben> |Tux|: i'm still at work for some hours, but did you try s/take $thing/take flat $thing/ ?

[13:04] <FROGGS> gah, everything boils down to the fact that I like and dislike the one-arg-rule

[13:05] <masak> ShimmerFairy: aye, that would be a step up

[13:05] <|Tux|> laben. .flat will cause a hang on .inf

[13:05] <masak> ShimmerFairy: "[1 2 3]" then?

[13:05] <jdv79> mulitple opinion disorder?

[13:06] <masak> jdv79: multiple opinions -- the first step to finding a good solution.

[13:06] <laben> |Tux|: then "take eager $thing" should avoid it

[13:06] <laben> or take $thing.eager

[13:06] <nine> I really don't see why say $@array; is not enough. You will get the spaces and my @array = 1, 2, 3; say @array does exactly the same as say 1, 2, 3;

[13:07] <FROGGS> nine: I'm not saying I cannot be convinced, I just say I don't like it atm...

[13:08] <ShimmerFairy> masak: yeah, particularly for things like  (1 2 (3 4 5))  they'd be nice. Brackets are probably debatable (since it's .gist and not .perl), and I'm half-tempted to suggest some pair of brackets that aren't used for anything in standard P6 code :P (sorta like how we use corner quotes in Matches, except they _are_ valid P6)

[13:08] <TimToady> I think I've already said I'm fine with brackets for .gist

[13:09] <TimToady> at least for sub-gists

[13:09] *** brrt left
[13:09] * FROGGS .oO( say quickly: sub-gists sub-gists sub-gists )

[13:10] <ShimmerFairy> TimToady: yeah, that's what I was pointing out, you being fine with .gist brackets :)

[13:12] *** skids joined
[13:13] *** telex left
[13:14] *** rmgk_ joined
[13:14] *** rmgk is now known as Guest88326

[13:14] *** Guest88326 left
[13:14] *** rmgk_ is now known as rmgk

[13:14] <dalek> perl6-examples: fb858cb | (Steve Mynott)++ | .travis.yml:

[13:14] <dalek> perl6-examples: fix travis dep

[13:14] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/fb858cba40

[13:14] *** telex joined
[13:17] <Ven> masak: https://github.com/vendethiel/6meta-experiments is my church.pl :)

[13:17] <btyler_> jnthn: bingo! that was it -- shifting clear_temp_bigints out of the divzero conditional stopped the leak

[13:18] <tadzik> if a sub has a named parameter as a default value, is there any value I can pass so that it chooses the default over it?

[13:18] <tadzik> I'm trying to avoid having two calls in my code, one with the named argument and the other without

[13:18] <timotimo> you can |%(...) to get that

[13:19] <colomon> [Coke]: found code in rakudo that never worked.  I’m not even sure anyone knows what it should do…

[13:20] <timotimo> those things are there sometimes

[13:22] <masak> m: sub foo(:$bar = 42) { say $bar }; foo(bar => Nil)

[13:22] <camelia> rakudo-moar 47ddca: OUTPUT«Nil␤»

[13:22] <GLRelia> rakudo-moar f26f52: OUTPUT«Nil␤»

[13:22] <masak> m: sub foo(:$bar = 42) { say $bar }; foo(bar => Empty)

[13:22] <camelia> rakudo-moar 47ddca: OUTPUT«Empty␤»

[13:22] <GLRelia> rakudo-moar f26f52: OUTPUT«␤»

[13:22] <masak> m: sub foo(:$bar = 42) { say $bar }; foo(bar => Int)

[13:22] <camelia> rakudo-moar 47ddca: OUTPUT«(Int)␤»

[13:22] <GLRelia> rakudo-moar f26f52: OUTPUT«(Int)␤»

[13:22] <masak> tadzik: doesn't look like it

[13:23] <masak> m: sub foo(:$bar = 42) { say $bar }; my %h; foo(|%h)

[13:23] <camelia> rakudo-moar 47ddca: OUTPUT«42␤»

[13:23] <GLRelia> rakudo-moar f26f52: OUTPUT«42␤»

[13:23] <masak> m: sub foo(:$bar = 42) { say $bar }; my %h = False ?? bar => 42 !! (); foo(|%h)

[13:23] <camelia> rakudo-moar 47ddca: OUTPUT«42␤»

[13:23] <GLRelia> rakudo-moar f26f52: OUTPUT«42␤»

[13:23] <dalek> rakudo/glr: 4814073 | (Stefan Seifert)++ | src/core/io_operators.pm:

[13:23] <dalek> rakudo/glr: Revert "Revert "Remove say(\x) / note(\x) candidates""

[13:23] <dalek> rakudo/glr: 

[13:23] <dalek> rakudo/glr: This reverts commit 2ccea71e813c98e42c27d0da77f0a46878c197d8.

[13:23] <dalek> rakudo/glr: 

[13:23] <dalek> rakudo/glr: The original change actually is correct and consistent with the

[13:24] <dalek> rakudo/glr: single-arg-rule of GLR.

[13:24] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/4814073cca

[13:24] <dalek> rakudo/glr: 041bf0f | (Stefan Seifert)++ | src/core/io_operators.pm:

[13:24] <dalek> rakudo/glr: Avoid flattening of say's arguments

[13:24] <dalek> rakudo/glr: 

[13:24] <dalek> rakudo/glr: This makes say @a, @b; mean say @a.gist, @b.gist; which would probably

[13:24] <dalek> rakudo/glr: be what users expect.

[13:24] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/041bf0fa8d

[13:24] <masak> m: sub foo(:$bar = 42) { say $bar }; my %h = True ?? bar => 5 !! (); foo(|%h)

[13:24] <camelia> rakudo-moar 47ddca: OUTPUT«5␤»

[13:24] <GLRelia> rakudo-moar f26f52: OUTPUT«5␤»

[13:24] <masak> tadzik: that seems to work. timotimo++

[13:25] <dalek> rakudo/glr: 965539c | FROGGS++ | src/core/Main.pm:

[13:25] <dalek> rakudo/glr: handle param aliases in MAIN_HELPER

[13:25] <dalek> rakudo/glr: 

[13:25] <dalek> rakudo/glr: This fixes the case where an alias to a named param existed, and the

[13:25] <dalek> rakudo/glr: usage message was printed as a false positive when passing either the

[13:25] <dalek> rakudo/glr: param or the alias.

[13:25] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/965539c0b1

[13:27] <FROGGS> okay, now I was able to check that my path does not do any harm

[13:27] <nine> :)

[13:27] <FROGGS> :o)

[13:27] *** llfourn left
[13:28] <FROGGS> nine: that means we will adjust note.t and say.t?

[13:29] <nine> FROGGS: I'll have a look at them, yes.

[13:30] <FROGGS> nine: I currently do

[13:30] <colomon> when you guys have been counting the number of GLR test failures, was that counting categorize.t (which crashed completely, rather than printing not oks)?

[13:30] <timotimo> masak: you know what confused me for a moment there? :)

[13:32] <dalek> roast/glr: cb71834 | FROGGS++ | S32-io/note.t:

[13:32] <dalek> roast/glr: adjust expectation of "note @a"

[13:32] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/cb718344bc

[13:34] <dalek> perl6-examples: 29ea342 | (Steve Mynott)++ | / (4 files):

[13:34] <dalek> perl6-examples: remove one list of dependencies and doc the others

[13:34] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/29ea342817

[13:34] <FROGGS> m: say "o", "k 2 - say with multiple parame", "ters (1)"

[13:34] <camelia> rakudo-moar 47ddca: OUTPUT«ok 2 - say with multiple parameters (1)␤»

[13:34] <GLRelia> rakudo-moar 965539: OUTPUT«ok 2 - say with multiple parameters (1)␤»

[13:34] <nine> FROGGS: please hold your horses!

[13:34] <ugexe> RecommendationManager is such a long name :(

[13:34] <nine> My **@args change made it regress to before lizmat++'s change

[13:35] <FROGGS> ohh!

[13:35] <jdv79> RecoMan?

[13:35] <FROGGS> boy! you! :D

[13:35] *** ab6tract left
[13:35] <colomon> m: my @list      = 29, 7, 12, 9, 18, 23, 3, 7; say categorize( [ 0 xx 10, 10 xx 10, 20 xx 10 ], @list).perl

[13:35] <camelia> rakudo-moar 47ddca: OUTPUT«Hash[Any,Any].new(0 => [7, 9, 3, 7], 10 => [12, 18], 20 => [29, 23])␤»

[13:35] <GLRelia> rakudo-moar 965539: OUTPUT«Cannot call categorize-list(Hash[Any,Any]: Block, Array); none of these signatures match:␤    (Hash $: %test, $list, *%_)␤    (Hash $: @test, $list, *%_)␤  in block <unit> at /tmp/LfBz7gVKSN:1␤␤»

[13:38] <tadzik> ugexe: yt?

[13:38] <ugexe> yes

[13:38] <tadzik> awesome

[13:38] <tadzik> want to test a fix for https://github.com/tadzik/panda/issues/142?

[13:39] <tadzik> ugexe: it's at https://github.com/tadzik/panda/tree/gh-142

[13:40] *** breinbaas left
[13:42] <FROGGS> m: say 42 for Nil # everybody agree that this should iterate onec?

[13:42] <camelia> rakudo-moar 47ddca: OUTPUT«42␤»

[13:42] <GLRelia> rakudo-moar 965539: ( no output )

[13:42] <ugexe> i will, but im not sure where i'll have something to smoke with

[13:42] <FROGGS> once, even

[13:42] <ugexe> when rather

[13:42] <tadzik> you mean a module, or hardware?

[13:43] *** itz left
[13:43] <ugexe> hardware. which i have, its just working atm heh

[13:43] <tadzik> oh, okay :)

[13:44] <FROGGS> m: say 42 for Int; say Int.elems; # ohh!

[13:44] <camelia> rakudo-moar 47ddca: OUTPUT«42␤0␤»

[13:44] <GLRelia> rakudo-moar 965539: OUTPUT«0␤»

[13:44] <tadzik> FROGGS: http://reactionimage.org/img/gallery/1968804931.jpg

[13:44] <FROGGS> jnthn: can you tell me that this is correct or not?

[13:44] <tadzik> s/65/42/

[13:45] <FROGGS> tadzik++

[13:45] <masak> m: say 42 for Int

[13:45] <camelia> rakudo-moar 47ddca: OUTPUT«42␤»

[13:45] <GLRelia> rakudo-moar 965539: ( no output )

[13:45] <masak> m: Int.map({ say 42 })

[13:45] <camelia> rakudo-moar 47ddca: OUTPUT«42␤»

[13:45] <GLRelia> rakudo-moar 965539: ( no output )

[13:45] <masak> Int-eresting...

[13:45] <FROGGS> masak: its .elems is zero, so there is no iteration

[13:46] <masak> yes, but whyyyyyyyyyyyyy

[13:46] <FROGGS> though I wonder... yes, exactly

[13:46] <masak> m: say Int.elems

[13:46] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[13:46] <GLRelia> rakudo-moar 965539: OUTPUT«0␤»

[13:46] <TimToady> m: say Any.elems

[13:46] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[13:46] <GLRelia> rakudo-moar 965539: OUTPUT«0␤»

[13:46] <masak> maybe the only way to get an answer to that is to spectest a change to it

[13:48] <laben> m: say 42 for Empty

[13:48] <camelia> rakudo-moar 47ddca: ( no output )

[13:48] <GLRelia> rakudo-moar 965539: ( no output )

[13:48] <laben> m: say 42 for ()

[13:48] <camelia> rakudo-moar 47ddca: ( no output )

[13:48] <GLRelia> rakudo-moar 965539: ( no output )

[13:48] <jnthn> I'm pretty sure Int.elems should say 1

[13:48] <laben> m: say 42 for (Any,)

[13:48] <camelia> rakudo-moar 47ddca: OUTPUT«42␤»

[13:48] <GLRelia> rakudo-moar 965539: OUTPUT«42␤»

[13:48] <jnthn> Because it should be equivalent to Int.list.elems

[13:48] *** llfourn joined
[13:48] <jnthn> And Int.list should be (Int,)

[13:48] <masak> ooh, maybe a blame can answer it?

[13:48] <timotimo> moritz:    + with/orwith/without conditionals allow you to check for .defined but

[13:49] <FROGGS> /home/froggs/dev/rakudo/src/core/Any.pm:93:    multi method elems(Any:U:) { 0 }

[13:49] <FROGGS> /home/froggs/dev/rakudo/src/core/Any.pm:94:    multi method elems(Any:D:) { self.list.elems }

[13:49] <timotimo> it looks like the supply/whenever line slipped in between

[13:50] <masak> yep

[13:50] <masak> 6a3fc316b185057eee161d210493e8a442ec0a22

[13:50] <masak> https://github.com/rakudo/rakudo/commit/6a3fc316b185057eee161d210493e8a442ec0a22

[13:50] <masak> "Fix Any.end/elems"

[13:50] <FROGGS> hmmm

[13:51] *** domidumont left
[13:51] <masak> that's when it changed from `self.list.elems` to `0` for the type object

[13:51] *** araujo__ joined
[13:51] <masak> I think it might be a thinko

[13:51] *** Sqirrel left
[13:51] <jnthn> quite possibly, yes

[13:51] <FROGGS> I'll spectest a change

[13:51] <masak> something like "well, the type object has no elements"

[13:51] <[Coke]> colomon: (counting) yes, as long as it has a plan.

[13:51] *** domidumont joined
[13:51] <tadzik> FROGGS: is https://github.com/tadzik/panda/issues/112 fixed?

[13:52] *** araujo_ left
[13:52] <TimToady> I think that was an attempt to fix index() before we had with/without

[13:52] <colomon> [Coke]++

[13:53] *** araujo__ left
[13:53] <dalek> roast/glr: 93eff8e | (Stefan Seifert)++ | S16-io/say.t:

[13:53] <dalek> roast/glr: Tests for GLRified semantics of say

[13:53] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/93eff8e2c9

[13:53] <dalek> rakudo/glr: bb736ad | (Stefan Seifert)++ | src/core/io_operators.pm:

[13:53] <dalek> rakudo/glr: Fix say @array not iterating over the arguments items

[13:53] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/bb736ad0e3

[13:54] <masak> the GLRification of say

[13:54] <[Coke]> r: use MONKEY_TYPING; augment slang Regex { token numish { \d+ } };

[13:54] <GLRelia> rakudo-moar 965539: OUTPUT«===SORRY!===␤QAST::Block with cuid cuid_1_1440683686.69991 has not appeared␤Saw 1 occurrence of deprecated code.␤================================================================================␤'use MONKEY_TYPING' seen at:␤  /tmp/tmpfile, line 1…»

[13:54] <GLRelia> ..rakudo-jvm 965539: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[13:54] <camelia> rakudo-moar 47ddca: OUTPUT«===SORRY!===␤QAST::Block with cuid cuid_1_1440683686.63467 has not appeared␤Saw 1 occurrence of deprecated code.␤================================================================================␤'use MONKEY_TYPING' seen at:␤  /tmp/tmpfile, line 1…»

[13:54] <camelia> ..rakudo-jvm 47ddca: OUTPUT«===SORRY!===␤setcodeobj can only be used with a CodeRef␤Unhandled exception: java.lang.NullPointerException␤  in print_exception (gen/jvm/CORE.setting:15481)␤  in <anon> (gen/jvm/CORE.setting:15522)␤  in command_eval (gen/jvm/stage2/NQPHLL.nqp:130…»

[13:55] <masak> whoa

[13:55] <FROGGS> r: use MONKEY-TYPING; augment slang Regex { token numish { \d+ } };

[13:55] <GLRelia> rakudo-jvm 965539: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[13:55] <GLRelia> ..rakudo-moar 965539: OUTPUT«===SORRY!===␤QAST::Block with cuid cuid_1_1440683724.15141 has not appeared␤»

[13:55] <camelia> rakudo-jvm 47ddca: OUTPUT«===SORRY!===␤setcodeobj can only be used with a CodeRef␤»

[13:55] <camelia> ..rakudo-moar 47ddca: OUTPUT«===SORRY!===␤QAST::Block with cuid cuid_1_1440683724.08868 has not appeared␤»

[13:55] <masak> whatever that was, it hit *both* Moar *and* JVM

[13:55] <masak> [Coke]: could you please file that one?

[13:56] <[Coke]> m: my Str constant foo = 1 ;

[13:56] <camelia> rakudo-moar 47ddca: ( no output )

[13:56] <GLRelia> rakudo-moar 965539: ( no output )

[13:56] <[Coke]> masak: It's already filed.

[13:56] <FROGGS> [Coke]: you're checking old tickets?

[13:56] <[Coke]> FROGGS: yes.

[13:56] *** jkva left
[13:56] <FROGGS> [Coke]++

[13:56] <masak> [Coke]: the 'QAST::Block with cuid cuid_1_1440683686.69991 has not appeared' thing?

[13:57] <masak> [Coke]: because that seems it should never ever happen.

[14:00] <tadzik> FROGGS: is there something in existence that parses JSON::Slow:auth<cpan:*>:ver(1..*)-like things?

[14:00] <[Coke]> r: https://gist.github.com/diakopter/2830046

[14:00] <GLRelia> rakudo-moar bb736a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Shaped variable declarations not yet implemented. Sorry. ␤at /tmp/tmpfile:1␤------> 3my @d[4;4]7⏏5;␤»

[14:00] <GLRelia> ..rakudo-jvm bb736a: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[14:00] <camelia> rakudo-{moar,jvm} 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Shaped variable declarations not yet implemented. Sorry. ␤at /tmp/tmpfile:1␤------> 3my @d[4;4]7⏏5;␤»

[14:00] <[Coke]> masak: yes, that's ticketed.

[14:00] *** breinbaas joined
[14:01] <TimToady> m: say [[1,2,3],<a b c>].perl

[14:01] <camelia> rakudo-moar 47ddca: OUTPUT«[[1, 2, 3], "a", "b", "c"]␤»

[14:01] <GLRelia> rakudo-moar bb736a: OUTPUT«[[1, 2, 3], ("a", "b", "c")]␤»

[14:01] <masak> [Coke]: ok, excellent.

[14:02] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=117193 - opened by masak.

[14:03] <masak> don't know who that is

[14:03] <masak> but great that there's a ticket

[14:05] <[Coke]> m: say (1, 2, *) Z (1, 2, 3, *)

[14:05] <camelia> rakudo-moar 47ddca: OUTPUT«1 1 2 2 * 3␤»

[14:05] <GLRelia> rakudo-moar bb736a: OUTPUT«1 12 2* 3␤»

[14:08] <lizmat> ｢ok 7 - Match.note

[14:08] <lizmat> ｣

[14:09] *** aborazmeh left
[14:10] <FROGGS> tadzik: ask the one to your left... when he is back

[14:10] <tadzik> ok :)

[14:12] <dalek> roast: 9208bf0 | coke++ | S32-io/IO-Socket-Async.t:

[14:12] <dalek> roast: This test passing on mac os x now

[14:12] <dalek> roast: review: https://github.com/perl6/roast/commit/9208bf0f56

[14:12] *** itz joined
[14:14] <[Coke]> m: (1..*).eager

[14:14] <camelia> rakudo-moar 47ddca: ( no output )

[14:14] *** abaugher left
[14:14] <GLRelia> rakudo-moar bb736a: OUTPUT«(timeout)»

[14:14] <FROGGS> star-m: my $a; say $a.elems

[14:14] *** GLRelia left
[14:14] <camelia> star-m 2015.03: OUTPUT«0␤»

[14:14] <FROGGS> m: my $a; say $a.elems

[14:14] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[14:15] *** abaugher joined
[14:15] <laben> m: (1..*).eager.say

[14:15] <camelia> rakudo-moar 47ddca: OUTPUT«1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 8…»

[14:15] *** GLRelia joined
[14:15] <FROGGS> m: my $a; say $a.elems

[14:15] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[14:15] <GLRelia> star-m : OUTPUT«Can't chdir to '/home/steve/star/': No such file or directory at lib/EvalbotExecuter.pm line 171.␤      EvalbotExecuter::_auto_execute(HASH(0x2070390), "my \$a; say \$a.elems", GLOB(0x23e3288), "/tmp/Mm28zjppdC", "star-m") called at lib/EvalbotExecuter.pm line 119␤       Ev…»

[14:16] <GLRelia> rakudo-moar bb736a: OUTPUT«0␤»

[14:16] <colomon> m: [ 0 xx 10, 10 xx 10, 20 xx 10 ].perl.say

[14:16] <camelia> rakudo-moar 47ddca: OUTPUT«[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]␤»

[14:16] <GLRelia> rakudo-moar bb736a: OUTPUT«[(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (20, 20, 20, 20, 20, 20, 20, 20, 20, 20)]␤»

[14:16] <[Coke]> r:  say &infix:<max>(|(1..*))

[14:16] <camelia> rakudo-{moar,jvm} 47ddca: OUTPUT«-Inf␤»

[14:16] <GLRelia> rakudo-moar bb736a: OUTPUT«(timeout)»

[14:16] <GLRelia> ..rakudo-jvm bb736a: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[14:16] <dalek> roast/glr: 2c53e61 | lizmat++ | S16-io/note.t:

[14:16] <dalek> roast/glr: Make note test work

[14:16] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/2c53e61ee8

[14:16] <tadzik> timotimo++ # JSON::Fast

[14:17] <colomon> Any easy way to get the flat version back in GLR?  of  [ 0 xx 10, 10 xx 10, 20 xx 10 ]

[14:17] <FROGGS> m: my $a; say $a.elems # jnthn: this will also report '1' with my patch

[14:17] <nine> m: say [flat 0 xx 10, 10 xx 10, 20 xx 10 ].perl

[14:17] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[14:17] <GLRelia> rakudo-moar bb736a: OUTPUT«0␤»

[14:17] <GLRelia> rakudo-moar bb736a: OUTPUT«[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]␤»

[14:17] <camelia> rakudo-moar 47ddca: OUTPUT«[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]␤»

[14:17] <colomon> nine++

[14:19] <[Coke]> jnthn: can you verify that RT #122948 is closable given glr? I am pretty sure it is, but it's written using old ".infinite" syntax. the bug that it was the root cause of is already fixed in GLR...

[14:19] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122948

[14:22] <dalek> rakudo/glr: 2023f02 | TimToady++ | src/core/ (2 files):

[14:22] <dalek> rakudo/glr: try out gist bracketing

[14:22] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/2023f0218f

[14:23] <TimToady> ^^^ is likely to break a few spectests

[14:24] <[Coke]> # XXX -- Lists are not real datatypes, but I haven't found a better location   ---- This comment seems deletable. S02-types/list.t

[14:24] <colomon> [Coke]: :)

[14:25] *** laouji joined
[14:25] <dalek> roast: edea297 | coke++ | S02-types/lists.t:

[14:25] <dalek> roast: Remove very old comment.

[14:25] <dalek> roast: review: https://github.com/perl6/roast/commit/edea297df8

[14:25] *** xzenfar left
[14:26] <[Coke]> .ell-ems

[14:26] <dalek> roast/glr: 28feb5b | colomon++ | S32-list/categorize.t:

[14:26] <dalek> roast/glr: Make $arrayer do the right thing under GLR.

[14:26] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/28feb5ba40

[14:27] <timotimo> https://gist.github.com/timo/f1324355a5ae8dc95d36 - this is what it looks like when you accidentally run rakudo/moar against roast/glr

[14:28] <muraiki> m: say 0o7.WHAT

[14:28] <GLRelia> rakudo-moar bb736a: OUTPUT«␤»

[14:28] <camelia> rakudo-moar 47ddca: OUTPUT«(Int)␤»

[14:28] <[Coke]> m: role sidecat is {} ; my @a = 1,2,3 but sidecat; say @a.gist

[14:28] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ewdrdM6NJv␤Invalid name␤at /tmp/ewdrdM6NJv:1␤------> 3role sidecat is7⏏5 {} ; my @a = 1,2,3 but sidecat; say @a.␤»

[14:28] <GLRelia> rakudo-moar bb736a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PAaQsjh1c7␤Invalid name␤at /tmp/PAaQsjh1c7:1␤------> 3role sidecat is7⏏5 {} ; my @a = 1,2,3 but sidecat; say @a.␤»

[14:28] <muraiki> hrm, is there any way to find out that it's octal? for instance, if I want to use it as a type in a sub parameter

[14:29] <[Coke]> m: role sidecat {} ; my @a = 1,2,3 but sidecat; say @a.gist

[14:29] <camelia> rakudo-moar 47ddca: OUTPUT«1 2 3␤»

[14:29] <GLRelia> rakudo-moar bb736a: OUTPUT«1 2 3␤»

[14:29] <timotimo> rakudo/nom is what i meant to write

[14:29] <[Coke]> m: role sidecat {} ; my @a = 1,2,3 but sidecat; my @b; @b.pick(2); say @b.gist

[14:29] <camelia> rakudo-moar 47ddca: OUTPUT«␤»

[14:29] <GLRelia> rakudo-moar bb736a: OUTPUT«␤»

[14:29] <[Coke]> m: role sidecat {} ; my @a = 1,2,3 ; my @b; @b.pick(2) but sidecat; say @b.gist

[14:29] <GLRelia> rakudo-moar bb736a: OUTPUT«␤»

[14:29] <camelia> rakudo-moar 47ddca: OUTPUT«␤»

[14:29] <timotimo> muraiki: no, something that's octal is turned into an Int immediately

[14:29] <[Coke]> m: role sidecat {} ; my @a = 1,2,3 ; my @b; @b = @a.pick(2) but sidecat; say @b.gist

[14:29] <GLRelia> rakudo-moar bb736a: OUTPUT«3 2␤»

[14:29] <camelia> rakudo-moar 47ddca: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/EtQ8JFL7kd:1␤␤»

[14:30] <[Coke]> m: role sidecat {} ; my @a = 1,2,3 ; my @b; @b = @a.pick(*).sort but sidecat; say @b.gist

[14:30] <camelia> rakudo-moar 47ddca: OUTPUT«1 2 3␤»

[14:30] <GLRelia> rakudo-moar bb736a: OUTPUT«1 2 3␤»

[14:30] <timotimo> but how about <0o7>

[14:30] <timotimo> m: say <0o7>.WHAT

[14:30] <camelia> rakudo-moar 47ddca: OUTPUT«(Str)␤»

[14:30] <GLRelia> rakudo-moar bb736a: OUTPUT«␤»

[14:30] <timotimo> hm.

[14:30] *** rindolf joined
[14:30] <dalek> rakudo/glr: ab4d41f | colomon++ | src/core/Hash.pm:

[14:30] <dalek> rakudo/glr: Get most of categorize working again on GLR.

[14:30] <dalek> rakudo/glr: 

[14:30] <dalek> rakudo/glr: This is somewhat hacky, definitely needs work on the more

[14:30] <dalek> rakudo/glr: complicated case, probably could use some efficiency improvements

[14:30] <dalek> rakudo/glr: to bring it back in line with the nom version.

[14:31] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/ab4d41f92a

[14:31] *** laben left
[14:31] <colomon> that’s 27 additional passing tests for GLR

[14:31] <FROGGS> \o/

[14:31] <timotimo> way cool!

[14:31] *** laben joined
[14:32] <colomon> I’m not sure if the 27 were included in 81/80/77 counts tody, as categorize.t previously crashed before executing the first test.  ;)

[14:32] <[Coke]> m: role sidecat {} ; my @a = 1,2,3 ; my @b; @b = @a.pick(*).sort.list but sidecat; say @b.gist

[14:32] <camelia> rakudo-moar 47ddca: OUTPUT«This type does not support elems␤  in block <unit> at /tmp/5agqRSwWlw:1␤␤»

[14:32] <GLRelia> rakudo-moar 2023f0: OUTPUT«[1 2 3]␤»

[14:32] <[Coke]> \o/

[14:33] <nine> tests, not test files surely?

[14:34] <colomon> oh, was that 81 test files failing?

[14:34] <jnthn> colomon: The number has been test files, yes

[14:34] <nine> Yes. But I think it was 76 last count

[14:34] <nine> Running another one right now.

[14:35] <colomon> jnthn: ah

[14:35] <colomon> well, then I’m not helping there at all, there is still one failing test

[14:35] <dalek> rakudo/glr: fffbe76 | lizmat++ | src/core/io_operators.pm:

[14:35] <dalek> rakudo/glr: Get note in line with say (with all the quirks)

[14:35] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/fffbe767e9

[14:35] <lizmat> this may introduce note breakage again

[14:35] <lizmat> working on that

[14:36] *** yqt joined
[14:36] <dalek> roast/glr: 00cbae5 | coke++ | S02-types/list.t:

[14:36] <dalek> roast/glr: Add a test for RT #116527

[14:36] <dalek> roast/glr: 

[14:36] <dalek> roast/glr: only passes on glr

[14:36] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/00cbae5234

[14:36] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=116527

[14:38] <hahainternet> is there a more succinct way to substr than .substr(0,10)?

[14:38] <[Coke]> 1041 tickets.

[14:39] <[Coke]> we can go the CF route and add Left($_, 10) !

[14:39] <muraiki> timotimo: thanks!

[14:39] <jnthn> hahainternet: No

[14:40] <hahainternet> jnthn: merci

[14:40] <colomon> oh!

[14:40] <TimToady> m: $_ = "abcdefghijklmnopqrstuvwxyz"; say /^.**10/

[14:40] <camelia> rakudo-moar 47ddca: OUTPUT«/^.**10/␤»

[14:40] <GLRelia> rakudo-moar ab4d41: OUTPUT«/^.**10/␤»

[14:40] <TimToady> m: $_ = "abcdefghijklmnopqrstuvwxyz"; say m/^.**10/

[14:40] <camelia> rakudo-moar 47ddca: OUTPUT«｢abcdefghij｣␤»

[14:40] <GLRelia> rakudo-moar ab4d41: OUTPUT«␤»

[14:40] <TimToady> m: $_ = "abcdefghijklmnopqrstuvwxyz"; say ~m/^.**10/

[14:40] <GLRelia> rakudo-moar ab4d41: OUTPUT«abcdefghij␤»

[14:40] <camelia> rakudo-moar 47ddca: OUTPUT«abcdefghij␤»

[14:41] <TimToady> that's more succinct :)

[14:41] <timotimo> Visual Basic had "Mid" for substr (the general case)

[14:42] <jdv79> FROGGS: https://github.com/andk/pause/issues/182 - finally got it done; hopefully

[14:43] <ShimmerFairy> I still think it'd be nice if substr used :end and :chars adverbs to specify the endpoint, so that it was less ambiguous in general

[14:43] *** Ven left
[14:43] * ShimmerFairy needs to finish that S32::Stringy rewrite of hers soon...

[14:44] <dalek> perl6-examples: 98e0851 | (Sue Spence)++ | categories/cookbook/01strings/01-04converting-values.pl:

[14:44] <dalek> perl6-examples: Change ord to ords, might as well convert the entire string

[14:44] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/98e085100c

[14:44] <dalek> perl6-examples: a83f65d | (Sue Spence)++ | categories/cookbook/01strings/01-04converting-values.pl:

[14:44] <dalek> perl6-examples: Fix comment

[14:44] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/a83f65d2a7

[14:44] <dalek> perl6-examples: 14178a5 | (Sue Spence)++ | categories/cookbook/01strings/01-13upper-lower-case.pl:

[14:44] <dalek> perl6-examples: Add example

[14:44] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/14178a5e17

[14:44] <dalek> perl6-examples: 61f427f | (Sue Spence)++ | / (3 files):

[14:44] <dalek> perl6-examples: Test fixes

[14:44] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/61f427ff4e

[14:44] <dalek> perl6-examples: 936f2a8 | (sue spence)++ | / (5 files):

[14:44] <[Coke]> timotimo: CF has left, mid, and right. :|

[14:44] <dalek> perl6-examples: Merge pull request #28 from virtualsue/master

[14:44] <dalek> perl6-examples: 

[14:44] <dalek> perl6-examples: More minor updates

[14:44] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/936f2a879b

[14:44] <dalek> rakudo/glr: 7a4bd87 | colomon++ | src/core/Hash.pm:

[14:44] <dalek> rakudo/glr: Turns out the code I had commented out worked.

[14:44] <dalek> rakudo/glr: 

[14:44] <dalek> rakudo/glr: I was getting two different problems crossed up.

[14:44] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/7a4bd87eef

[14:44] <TimToady> m: say [[1,2,3],<a b c>].gist

[14:44] <camelia> rakudo-moar 47ddca: OUTPUT«1 2 3 a b c␤»

[14:44] <GLRelia> rakudo-moar fffbe7: OUTPUT«[[1 2 3] (a b c)]␤»

[14:44] <colomon> okay, now categorize.t completely passes.

[14:44] <hahainternet> TimToady: that's quite cute :)

[14:45] <[Coke]> m: sub foo { my $s = 0; ($s += $_ for 1..3) }; say foo()

[14:45] <GLRelia> rakudo-moar fffbe7: OUTPUT«666␤»

[14:45] <camelia> rakudo-moar 47ddca: OUTPUT«6 6 6␤»

[14:45] <hahainternet> i was just thinking indexing into string or similar, i recognise that has ambiguity so *shrug*

[14:45] <hahainternet> i'm not a language designer

[14:45] <hahainternet> and i enjoy just writing what i can in p6 atm :)

[14:45] <[Coke]> that's from https://rt.perl.org/Ticket/Display.html?id=77334 which we might want to revisit in the light of GLR.

[14:46] <timotimo> [Coke]: i think that's actually the same as VB, then

[14:46] <TimToady> m: sub foo { my $s = 0; (($s += $_)<> for 1..3) }; say foo()

[14:46] <camelia> rakudo-moar 47ddca: OUTPUT«1 3 6␤»

[14:46] <GLRelia> rakudo-moar fffbe7: OUTPUT«136␤»

[14:46] <dalek> rakudo/glr: 2003eac | colomon++ | src/core/Hash.pm:

[14:46] <dalek> rakudo/glr: Bring comments in line with the code again.

[14:46] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/2003eac837

[14:46] <TimToady> the problem is you're returning $s (the variable) three times

[14:47] <[Coke]> m: my $a = 1; my $b = 2; $a = ($a, $b); say $a[0]

[14:47] <camelia> rakudo-moar 47ddca: OUTPUT«Memory allocation failed; could not allocate 29952 bytes␤»

[14:47] <GLRelia> rakudo-moar fffbe7: OUTPUT«(timeout)»

[14:48] <TimToady> m: my $a = 1; my $b = 2; $a = (|$a, $b); say $a[0]

[14:48] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gc6pUtxwbw␤Arg-flattening | is only valid in an argument list␤at /tmp/gc6pUtxwbw:1␤------> 3my $a = 1; my $b = 2; $a = (|7⏏5$a, $b); say $a[0]␤»

[14:48] <GLRelia> rakudo-moar fffbe7: OUTPUT«1␤»

[14:48] <[Coke]> adding that to RT #82424

[14:48] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=82424

[14:50] <FROGGS> we are up to 85 spectests failing now, I'm about to fix the tests wrt parens outputted by .gist

[14:51] <[Coke]> m: https://gist.github.com/coke/a19cab478ca24fb0a153

[14:51] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sORoDr0qBh␤Cannot use variable @hamming in declaration to initialize itself␤at /tmp/sORoDr0qBh:11␤------> 3my @hamming := (1, (@7⏏5hamming X* 2) merge (@hamming X* 3) merg␤    expecting any of:␤…»

[14:51] <GLRelia> rakudo-moar 2003ea: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KJVLyL4YdG␤Cannot use variable @hamming in declaration to initialize itself␤at /tmp/KJVLyL4YdG:11␤------> 3my @hamming := (1, (@7⏏5hamming X* 2) merge (@hamming X* 3) merg␤    expecting any of:␤…»

[14:53] <dalek> doc: d3ab2bf | paultcochrane++ | lib/Type/Exception.pod:

[14:53] <dalek> doc: Document die and warn

[14:53] <dalek> doc: 

[14:53] <dalek> doc: ... by shamelessly stealing from the specs text.

[14:53] <dalek> doc: review: https://github.com/perl6/doc/commit/d3ab2bfba9

[14:53] *** donaldh left
[14:53] <dalek> rakudo/glr: fbe48b8 | FROGGS++ | src/core/Any-iterable-methods.pm:

[14:53] <dalek> rakudo/glr: add label as attribute to MapIterCommon

[14:53] <dalek> rakudo/glr: 

[14:53] <dalek> rakudo/glr: Before it was a lexical which just screamed BUG! jnthn++

[14:53] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/fbe48b89cd

[14:54] <timotimo> jnthn: in what places do i need to change stuff so that the statelist no longer ends up serialized, btw?

[14:54] <masak> colomon++ # categorically passing

[14:54] <jnthn> timotimo: NFA.nqp or so

[14:54] <timotimo> and at what exact position do i put nfatostatelist back in?

[14:54] <nine> 84 failing right now

[14:54] <jnthn> In NQP

[14:54] <timotimo> that's the file i'm looking at right now :)

[14:54] <jnthn> oh

[14:54] <timotimo> nfa_run and nfa_run_proto is where i've put it right now so that it exercises the nqp:: op

[14:54] <dalek> rakudo/glr: 5e98abb | jnthn++ | src/core/array_slice.pm:

[14:54] <dalek> rakudo/glr: Multi-dim array slicing (.[0,1;1]).

[14:54] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/5e98abb2a0

[14:55] <timotimo> that's the place where the state list gets turned into an nfa if it hasn't been done yet

[14:55] <timotimo> so perhaps after turning the statelist into the nfa object, the statelist ought to be cleared out?

[14:55] <jnthn> timotimo: I'd do that and then see where it gets sad.

[14:55] <timotimo> will do

[14:55] <jnthn> timotimo: I thought we pre-computed the NFAs tough

[14:55] <jnthn> *though

[14:56] <jnthn> Look for precompute or so in Curor.nqp maybe

[14:56] <timotimo> ah, indeed

[14:57] <nine> m: say (1 => 'a', 2 => 'b')

[14:57] <GLRelia> rakudo-moar 2003ea: OUTPUT«1 => a2 => b␤»

[14:57] <camelia> rakudo-moar 47ddca: OUTPUT«1 => a 2 => b␤»

[14:58] *** smls joined
[14:59] <timotimo> so perhaps at the end of optimize would be a possible position where we could clear out the states list

[14:59] <jnthn> perhaps so

[14:59] *** Ven joined
[15:00] <timotimo> sadly, this would come with a stage0 upgrade to get the nqp::nfatostatelist op available soon enough :|

[15:00] <dalek> roast/glr: fdc2691 | (Stefan Seifert)++ | S02-types/pair.t:

[15:00] <dalek> roast/glr: Fix fallout from rakudo commit 2023f0218f19cd1a625f5a5b6ffb69a532db1053

[15:00] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/fdc2691f77

[15:01] <timotimo> but maybe we can do the stage0 update after we get the size improvements from no longer serializing the NFA's statelists

[15:01] <timotimo> so it'd be a tiny bit less painful

[15:01] <dalek> roast/glr: e0dc90d | (Stefan Seifert)++ | S03-metaops/reduce.t:

[15:01] <dalek> roast/glr: More fallout from rakudo commit 2023f0218f19cd1a625f5a5b6ffb69a532db1053

[15:01] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/e0dc90d7e6

[15:02] <jnthn> timotimo: Do it in a branch, then do the two, do the two rebootstraps, then rebase -i ;)

[15:02] <dalek> roast/glr: a64915a | (Stefan Seifert)++ | integration/advent2013-day08.t:

[15:02] <dalek> roast/glr: More fallout from rakudo commit 2023f0218f19cd1a625f5a5b6ffb69a532db1053

[15:02] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/a64915ac8a

[15:03] <colomon> lizmat: I’m thinking that the multi-layer classify just doesn’t make sense for Baggy

[15:03] <dalek> roast/glr: c53ca4f | FROGGS++ | S32-io/note.t:

[15:03] <dalek> roast/glr: More fallout from rakudo commit 2023f0218f19cd1a625f5a5b6ffb69a532db1053

[15:03] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/c53ca4f7eb

[15:04] <timotimo> ah, !protoregex wants to have the list of fates, but we can just keep only that around, perhaps in @!fates

[15:04] <timotimo> so far it has been in $!states[0]

[15:04] <dalek> roast/glr: 4430626 | (Stefan Seifert)++ | integration/advent2013-day15.t:

[15:04] <dalek> roast/glr: More fallout from rakudo commit 2023f0218f19cd1a625f5a5b6ffb69a532db1053

[15:04] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/4430626df4

[15:05] <[Coke]> colomon: is it expected that ./smoker projects.json would run for 40+ minutes at 100% cpu?

[15:05] <dalek> rakudo/glr: fb323f4 | jnthn++ | src/core/array_slice.pm:

[15:05] <dalek> rakudo/glr: Make * work in multi-dim slices.

[15:05] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/fb323f4bb6

[15:05] <timotimo> or we could have a nqp::getnfafates op that pulls it out of the NFA object

[15:05] <colomon> [Coke]: think so

[15:05] <timotimo> that's basically a pointer steal

[15:05] <colomon> [Coke]: well, it takes a long time, anyway.

[15:05] <timotimo> no copying involved, and so we don't need to have it duplicated in memory either

[15:05] <colomon> of course, it could be wedged, too.

[15:06] <colomon> … actually, that’s kind of weird

[15:06] <masak> could someone show a use case of the multi-layer classify? I'm not sure I get it.

[15:07] <dalek> roast/glr: 6fa9955 | (Stefan Seifert)++ | S12-class/mro.t:

[15:07] <dalek> roast/glr: More fallout from rakudo commit 2023f0218f19cd1a625f5a5b6ffb69a532db1053

[15:07] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/6fa995561e

[15:07] <dalek> rakudo/glr: c563ecd | lizmat++ | src/core/IO/Handle.pm:

[15:07] <dalek> rakudo/glr: Add a str candidate for IO::Handle.print

[15:07] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/c563ecde66

[15:07] <colomon> [Coke]: just killed it and started over in a terminal, so I can watch what it’s doing

[15:08] <dalek> roast/glr: 6faf49f | FROGGS++ | S32-io/pipe.t:

[15:08] <dalek> roast/glr: correctly say multiple lines

[15:08] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/6faf49fd10

[15:08] <skids> o/

[15:08] <yoleaux> 06:21Z <nine> skids: Ah, yes thanks! I'll have a look at it after breakfast. Now that I understand the problem it solves, I think it's a shame, your PR has not been merged yet.

[15:08] <yoleaux> 06:39Z <nine> skids: thank you for fixing @a[1, *-1]:delete :) I've had a look at this yesterday but my train arrived before I came to writing code. I really wonder how this worked in nom though. Couldn't find any code handling that case there.

[15:09] <skids> nine: np glad to be of help.  Also, glad it wasn't in the slice code :-)

[15:09] <nine> skids: btw. jnthn++ +1ed IterationBuffer.push not returning the pushed value.

[15:10] <skids> Oh nice.

[15:10] *** diana_olhovik_ left
[15:14] *** larion left
[15:15] <dalek> perl6-roast-data: f357b2c | coke++ | / (10 files):

[15:15] <dalek> perl6-roast-data: today (automated commit)

[15:15] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f357b2c59e

[15:15] *** domidumont left
[15:16] <colomon> m: reduce( -> $a, $b { $a.{$b}; }, {a => {b => {c => 42}}}, <a b c>).perl.say

[15:16] <GLRelia> rakudo-moar fb323f: OUTPUT«42␤»

[15:16] <camelia> rakudo-moar 47ddca: OUTPUT«42␤»

[15:16] <colomon> m: reduce( -> $a, $b { $a.WHAT.say; $a.{$b}; }, {a => {b => {c => 42}}}, <a b c>).perl.say

[15:16] <GLRelia> rakudo-moar c563ec: OUTPUT«␤␤␤42␤»

[15:16] <camelia> rakudo-moar 47ddca: OUTPUT«(Hash)␤(Hash)␤(Hash)␤42␤»

[15:17] <colomon> m: (a => 42).WHAT.say

[15:17] <camelia> rakudo-moar 47ddca: OUTPUT«(Pair)␤»

[15:17] <GLRelia> rakudo-moar c563ec: OUTPUT«␤»

[15:17] <colomon> umm....

[15:17] <colomon> m: (a => 42)[0].WHAT.say

[15:17] <GLRelia> rakudo-moar c563ec: OUTPUT«␤»

[15:17] <camelia> rakudo-moar 47ddca: OUTPUT«(Pair)␤»

[15:17] <jnthn> That looks wrong

[15:18] *** rindolf left
[15:18] <colomon> it’s not a Pair, it’s something without a name containing a Pair?

[15:19] <nine> m: (a => 2)[0].^name.say;

[15:19] <camelia> rakudo-moar 47ddca: OUTPUT«Pair␤»

[15:19] <GLRelia> rakudo-moar c563ec: OUTPUT«Pair␤»

[15:19] <nine> It seems to be just WHAT that's strange

[15:19] <colomon> oh, never mind on that, got confused by the camelias switching places

[15:19] <colomon> m: say Pair.WHAT

[15:19] <camelia> rakudo-moar 47ddca: OUTPUT«(Pair)␤»

[15:19] <GLRelia> rakudo-moar c563ec: OUTPUT«␤»

[15:19] <nine> m: (a => 2)[0].WHAT.^name.say

[15:19] <camelia> rakudo-moar 47ddca: OUTPUT«Pair␤»

[15:19] <GLRelia> rakudo-moar c563ec: OUTPUT«Pair␤»

[15:20] <jnthn> Normally it's 'cus there's a .gist that isn't constrained by :D

[15:20] <colomon> m: say %h; say %h.WHAT

[15:20] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/2N_f_st9RL␤Variable '%h' is not declared␤at /tmp/2N_f_st9RL:1␤------> 3say 7⏏5%h; say %h.WHAT␤»

[15:20] <GLRelia> rakudo-moar c563ec: OUTPUT«5===SORRY!5=== Error while compiling /tmp/TFKpWDbhdh␤Variable '%h' is not declared␤at /tmp/TFKpWDbhdh:1␤------> 3say 7⏏5%h; say %h.WHAT␤»

[15:20] <colomon> m: my %h; say %h.WHAT

[15:20] <GLRelia> rakudo-moar c563ec: OUTPUT«␤»

[15:20] <camelia> rakudo-moar 47ddca: OUTPUT«(Hash)␤»

[15:21] <dalek> perl6-examples: d8073d1 | (Steve Mynott)++ | t/categories/cookbook/09directories.t:

[15:21] <dalek> perl6-examples: work around changed behaviour of File::Temp

[15:21] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/d8073d1df5

[15:21] <dalek> perl6-examples: a39a3a6 | (Steve Mynott)++ | t/000-check-dependencies.t:

[15:21] <dalek> perl6-examples: fix number of tests by counting array

[15:21] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/a39a3a69bc

[15:21] *** brrt joined
[15:22] *** pmurias joined
[15:22] <[Coke]> m:  my $foo="+";&infix:($foo)(3,4).say

[15:22] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZvKoN5SVAo␤You can't adverb ␤at /tmp/ZvKoN5SVAo:1␤------> 3my $foo="+";&infix:($foo)7⏏5(3,4).say␤»

[15:22] <GLRelia> rakudo-moar c563ec: OUTPUT«5===SORRY!5=== Error while compiling /tmp/H59FHLSUEQ␤You can't adverb ␤at /tmp/H59FHLSUEQ:1␤------> 3my $foo="+";&infix:($foo)7⏏5(3,4).say␤»

[15:22] *** pmurias_ joined
[15:23] *** domidumont joined
[15:23] <FROGGS> m: my $a = <stringify args>; note $a

[15:23] <GLRelia> rakudo-moar c563ec: OUTPUT«stringifyargs␤»

[15:23] <camelia> rakudo-moar 47ddca: OUTPUT«stringify args␤»

[15:25] <nine> Fix for that coming up

[15:25] <nine> for 1.WHAT.say that is

[15:25] <nine> m: 1.WHAT.say

[15:25] <camelia> rakudo-moar 47ddca: OUTPUT«(Int)␤»

[15:25] <GLRelia> rakudo-moar c563ec: OUTPUT«␤»

[15:26] <dalek> doc: cdd3c1d | paultcochrane++ | lib/Language/modules.pod:

[15:26] <dalek> doc: Add information about basic module structure and file extensions

[15:26] <dalek> doc: review: https://github.com/perl6/doc/commit/cdd3c1ddef

[15:26] <dalek> rakudo/glr: 814d421 | jnthn++ | src/core/array_slice.pm:

[15:26] <dalek> rakudo/glr: Implement *-1 style things in multi-dim.

[15:26] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/814d4214d7

[15:26] <colomon> nine: yeah, that seems wrongish.  :)

[15:26] *** ribasushi left
[15:26] <smls> Oh, I see jnthn is back to multidim work?

[15:27] <jnthn> smls: Well, re-instating @a[1;1] style things 

[15:27] <nine> smls: yep, he just didn't find something else to do ;)

[15:27] <JimmyZ> seq.t would be good one 

[15:28] <dalek> rakudo/glr: 3deda75 | (Stefan Seifert)++ | src/core/io_operators.pm:

[15:28] <dalek> rakudo/glr: Fix 1.WHAT.say not printing anything

[15:28] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/3deda7574f

[15:28] *** zakharyas left
[15:29] <nine> m: my ($x, @b)  = ('xxx', (1,2,3).map(*.Int)); say @b.perl;

[15:29] <camelia> rakudo-moar 47ddca: OUTPUT«[1, 2, 3]<>␤»

[15:29] <GLRelia> rakudo-moar c563ec: OUTPUT«[(1, 2, 3).Seq,]␤»

[15:29] <nine> jnthn: any hint on where to look for that ^^^ would be appreciated

[15:30] <dalek> roast/glr: bc14686 | (Stefan Seifert)++ | S16-io/say-and-ref.t:

[15:30] <dalek> roast/glr: Fix fallout from GLRification of say

[15:30] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/bc14686baf

[15:31] *** rurban left
[15:31] *** khw joined
[15:32] <FROGGS> m: my @a = any(3, 4); my $ok = 0; my $iterations = 0; for @a -> $x { $ok = 1 if $x ~~ Junction; $iterations++; }; say $ok; say $iterations

[15:32] <GLRelia> rakudo-moar 814d42: OUTPUT«0␤1␤»

[15:32] <camelia> rakudo-moar 47ddca: OUTPUT«1␤1␤»

[15:32] <colomon> nine: I don’t think that was actually the problem I’m seeing?

[15:32] <nine> unofficial count: 74

[15:32] <dalek> doc: f3935b3 | paultcochrane++ | lib/Type/X/Syntax/AddCategorial/MissingSeparator.pod:

[15:32] <dalek> doc: Add missing title to X::Syntax::AddCategorial::MissingSeparator

[15:32] <dalek> doc: review: https://github.com/perl6/doc/commit/f3935b3227

[15:32] <jnthn> nine: LIST.STORE

[15:32] *** rurban joined
[15:32] <jnthn> nine: Uh, List.STORE

[15:33] <timotimo> STOPE IT, LIST

[15:33] <JimmyZ> m: my @b  = (1,2,3).map(*.Int); say @b.perl;

[15:33] <camelia> rakudo-moar 47ddca: OUTPUT«[1, 2, 3]<>␤»

[15:33] <GLRelia> rakudo-moar 814d42: OUTPUT«[1, 2, 3]␤»

[15:33] <colomon> verb [ no obj. ] (usu. as noun stoping)

[15:33] <colomon> (in mining) excavate a series of steps or layers in (the ground or rock).

[15:33] <colomon> • (as noun stoping) Geology the process by which country rock is broken up and removed by the upward movement of magma.

[15:33] <colomon> (sorry, that’s stope).  I had no idea.

[15:33] <masak> jnthn: "Unhandled exception: ctxlexpad needs an MVMContext" -- what does this mean? :)

[15:34] <FROGGS> m: my @a = any(3, 4); my $ok = 0; for @a -> $x { say 'loop'; say $x }

[15:34] <GLRelia> rakudo-moar 814d42: OUTPUT«loop␤4␤»

[15:34] <camelia> rakudo-moar 47ddca: OUTPUT«loop␤any(3, 4)␤»

[15:34] <Ven> .oO( it means you're masak`grr now )

[15:34] *** laouji left
[15:34] <FROGGS> m: my @a = any(3, 4); say @a

[15:34] <GLRelia> rakudo-moar 814d42: OUTPUT«4␤»

[15:34] <camelia> rakudo-moar 47ddca: OUTPUT«any(3, 4)␤»

[15:34] <jnthn> masak: You used nqp::ctxlexpad on something that was't what it wanted

[15:35] <masak> ok.

[15:35] <FROGGS> masak: pass it nqp::ctx for example

[15:35] <timotimo> it's possible that masak didn't use that himself :)

[15:35] <FROGGS> m: nqp::ctxlexpad(nqp::ctx)

[15:35] <GLRelia> rakudo-moar 814d42: OUTPUT«===============================================================================␤The use of nqp::operations has been deprecated for non-CORE code.  Please␤change your code to not use these non-portable functions.  If you really want␤to keep using nqp:…»

[15:35] <camelia> rakudo-moar 47ddca: OUTPUT«===============================================================================␤The use of nqp::operations has been deprecated for non-CORE code.  Please␤change your code to not use these non-portable functions.  If you really want␤to keep using nqp:…»

[15:35] <masak> actually all I did was run perl6-debug-m on my code :)

[15:35] <itz> try turning it off and on again?

[15:35] <FROGGS> m: use nqp; nqp::ctxlexpad(nqp::ctx)

[15:35] <camelia> rakudo-moar 47ddca: ( no output )

[15:35] <GLRelia> rakudo-moar 814d42: ( no output )

[15:35] * Ven invokes ./masak-debug-m

[15:35] <colomon> m: my @a; @a.push(Hash); say @a.perl

[15:35] <GLRelia> rakudo-moar 814d42: OUTPUT«[]␤»

[15:35] <camelia> rakudo-moar 47ddca: OUTPUT«[Hash]<>␤»

[15:35] <masak> Ven: ctxlexpad! blblblbl!

[15:35] <colomon> THAT’S what’s causing the problem I’m looking at.

[15:36] <masak> ok, Grammar::Debugger also dies with a random unrelated error... :)

[15:36] <masak> conclusion: my problem is too difficult for debugging tools!

[15:36] <masak> "figure it out yourself, masak!" :P

[15:36] <Ven> .oO( who debugs the debugger? )

[15:36] *** araujo joined
[15:36] *** araujo left
[15:36] * masak .oO( qui debuggiet ipsos debuggerem? )

[15:37] *** araujo joined
[15:38] <[Coke]> Ven: Pretty sure that's jnthn.

[15:38] *** araujo left
[15:39] <colomon> I think I’d doing someone wrong.  People keep on going out and coming back with alcohol.  I went out and bought water….

[15:39] <dalek> rakudo/glr: 810daba | lizmat++ | src/core/Any.pm:

[15:39] <dalek> rakudo/glr: Add an .nl method so that we can concatenate .say

[15:39] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/810dabaaf2

[15:39] <dalek> rakudo/glr: 38d336d | lizmat++ | src/core/io_operators.pm:

[15:39] <dalek> rakudo/glr: Concatenate .say/.note/.print

[15:39] <dalek> rakudo/glr: 

[15:39] <dalek> rakudo/glr: The idea being that nqp::concat on MoarVM doesn't actually concatenate

[15:39] <dalek> rakudo/glr: strings, but rather creates a linked list of the original strings in

[15:39] <dalek> rakudo/glr: memory.  So, concatenating strings this way should not create any memory

[15:39] <dalek> rakudo/glr: pressure.  It should however increase the change that different threads

[15:39] <dalek> rakudo/glr: saying stuff, will actually not interleave their messages.

[15:39] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/38d336db77

[15:40] *** AlexDaniel joined
[15:40] <dalek> rakudo/glr: 15e124a | jnthn++ | src/core/array_slice.pm:

[15:40] <dalek> rakudo/glr: Fix .[*-2, *-1; 0].

[15:40] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/15e124a408

[15:41] <timotimo> the circularity saw ... it bites :(

[15:41] <smls> m: say (1, 2).WHAT

[15:41] <camelia> rakudo-moar 47ddca: OUTPUT«(Parcel)␤»

[15:41] <GLRelia> rakudo-moar 3deda7: OUTPUT«(List)␤»

[15:42] <smls> hm, locally the GLR branch prints "Invocant requires an instance of type List, but a type object was passed." for that

[15:42] <masak> timotimo: the fact that the circularity saw is *sharp* is probably the least fascinating fact about it :P

[15:43] <dalek> roast/glr: 771f831 | jnthn++ | S09-subscript/multidim-assignment.t:

[15:43] <dalek> roast/glr: Update test for GLR.

[15:43] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/771f83120c

[15:43] <timotimo> i'm not so successful with my endeavour

[15:43] <FROGGS> m: my @a = 1 .. 5; @a[0,1] = @a[1,0]; say @a[0,1].WHAT

[15:43] <camelia> rakudo-moar 47ddca: OUTPUT«(Parcel)␤»

[15:43] <GLRelia> rakudo-moar 3deda7: OUTPUT«(List)␤»

[15:44] <colomon> m: my @a; @a.push(Hash); say @a.perl

[15:44] <GLRelia> rakudo-moar 3deda7: OUTPUT«[]␤»

[15:44] <camelia> rakudo-moar 47ddca: OUTPUT«[Hash]<>␤»

[15:44] <colomon> ^^ is GLR correct here, or is this another push issue?

[15:44] <FROGGS> m: my @a = 1 .. 5; @a[0,1] = @a[1,0]; say @a[0,1] # I think the List.STORE method tries to be too cheat here too much

[15:44] <GLRelia> rakudo-moar 15e124: OUTPUT«22␤»

[15:44] <camelia> rakudo-moar 47ddca: OUTPUT«2 1␤»

[15:45] <FROGGS> err, proper english difficult is

[15:45] <FROGGS> m: my @a; @a.push(Hash); say @a.elems

[15:45] <GLRelia> rakudo-moar 15e124: OUTPUT«0␤»

[15:45] <camelia> rakudo-moar 47ddca: OUTPUT«1␤»

[15:45] <FROGGS> colomon: that is the same issue as Int.elems being zero

[15:46] <colomon> FROGGS: … okay, but is that a bug?

[15:46] <FROGGS> I very much think so

[15:47] <colomon> it’s intentional:

[15:47] <colomon>     proto method elems(|) is nodal { * }

[15:47] *** rindolf joined
[15:47] <colomon>     multi method elems(Any:U:) { 0 }

[15:47] <colomon>     multi method elems(Any:D:) { self.list.elems }

[15:47] <FROGGS> colomon: we discussed that earlier... that zero there is a thinko

[15:48] <colomon> FROGGS: … okay… it should be a 1?

[15:48] <FROGGS> yes

[15:48] <colomon> seems like a very easy fix?

[15:48] <FROGGS> but that will cause other problems

[15:48] <colomon> oh?

[15:48] <FROGGS> m: my $a; say $a.elems

[15:48] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[15:48] <GLRelia> rakudo-moar 15e124: OUTPUT«0␤»

[15:48] <FROGGS> this will be 1 then

[15:49] <FROGGS> which might be okay, but I can't judge on that

[15:49] <FROGGS> m: my $a; for $a { say 42 }

[15:49] <GLRelia> rakudo-moar 15e124: ( no output )

[15:49] <camelia> rakudo-moar 47ddca: OUTPUT«42␤»

[15:50] <FROGGS> yeah, it potentially should output 1 in the script before the last

[15:50] <dalek> perl6-roast-data: 4dd10c4 | coke++ | / (2 files):

[15:50] <dalek> perl6-roast-data: another glr run for 'today'

[15:50] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4dd10c44aa

[15:51] * [Coke] can now enter his glr-rebuild-retest loop for the day, whee.

[15:51] <FROGGS> colomon: also change method end

[15:52] <colomon> FROGGS: to 0?

[15:52] *** rindolf left
[15:52] <FROGGS> aye

[15:53] <colomon> those changes are old?  lizmat++ made them in Jan?

[15:53] <FROGGS> aye

[15:53] <colomon> FROGGS: trying the changes to see what happens

[15:53] <FROGGS> but pre-glr still iterated over things that had zero elems

[15:53] <lizmat> what did I change in Jan ?

[15:53] <colomon> lizmat: https://github.com/rakudo/rakudo/commit/6a3fc316b185057eee161d210493e8a442ec0a22

[15:54] <dalek> rakudo/glr: 3459537 | jnthn++ | src/core/ (2 files):

[15:54] <dalek> rakudo/glr: Implement {;} style indexing.

[15:54] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/3459537c6b

[15:54] <colomon> we’re pondering changing the values returned by the :U version of both of these

[15:54] *** rindolf joined
[15:54] <lizmat> to  Nil or so?

[15:54] <[Coke]> ... me kills and restarts to get jnthn++'s commit. :P

[15:54] <colomon> m: my @a; say @a.elems

[15:54] <GLRelia> rakudo-moar 15e124: OUTPUT«0␤»

[15:54] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[15:54] <colomon> m: my @a; say @a.defined

[15:54] <camelia> rakudo-moar 47ddca: OUTPUT«True␤»

[15:54] <GLRelia> rakudo-moar 15e124: OUTPUT«True␤»

[15:54] <FROGGS> lizmat: https://github.com/rakudo/rakudo/commit/6a3fc316b185057eee161d210493e8a442ec0a22

[15:55] <colomon> hurm.

[15:55] <colomon> that didn’t fix the issue I’ve been looking at.

[15:55] <FROGGS> :/

[15:56] <nine> colomon: @a being empty after @a.push(Hash) is actually constitent with GLR semantics

[15:56] <colomon> nine: you think?

[15:56] <nine> FROGGS: ^^^

[15:56] <FROGGS> nine: how do you push a typo object then?

[15:56] <skids> Hash =:= {} though.

[15:56] <nine> colomon: yes, because of the single-arg rule again. Hash is iterable, so it is flattened when being passed to push

[15:56] <skids> erm !

[15:57] <colomon> oh, maybe that’s why it didn’t fix my issue.

[15:57] <colomon> I think I’m just going to change the test…. ;0

[15:57] <nine> Or...maybe it shouldn't because it's not actually a Hash but the type object for a Hash

[15:57] <skids> Type objects probably should not be considered themselves iterable.

[15:57] <FROGGS> nine: that's what I am thinking

[15:58] <[Coke]> jnthn: https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.moar-glr_summary.out

[15:58] <[Coke]> Working on refreshing now.

[15:59] <timotimo> m: say "Perl 6".ords

[15:59] <GLRelia> rakudo-moar 345953: OUTPUT«80101114108823954␤»

[15:59] <camelia> rakudo-moar 47ddca: OUTPUT«80 101 114 108 8239 54␤»

[15:59] <skids> .oO(unless they have an identity value that is iterable)

[16:00] <lizmat> m: say "Perl 6".ords.item

[16:00] <GLRelia> rakudo-moar 345953: OUTPUT«80101114108823954␤»

[16:00] <camelia> rakudo-moar 47ddca: OUTPUT«80 101 114 108 8239 54␤»

[16:01] <dalek> roast/glr: 1a0223c | colomon++ | S32-list/reduce.t:

[16:01] <dalek> roast/glr: Rework test to not push type objects.

[16:01] <dalek> roast/glr: 

[16:01] <dalek> roast/glr: Previously it pushed the $hash.WHAT, then checked whether or not it was

[16:01] <dalek> roast/glr: Hash.  Now it pushes the result of $hash ~~ Hash, and checks that it was

[16:01] <dalek> roast/glr: true.

[16:01] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/1a0223c26d

[16:01] <colomon> okay, that gets S32-list/reduce.t passing

[16:02] *** rindolf left
[16:02] <[Coke]> m: my @a := gather { for 1..3 { take $_; say @a.perl } }; say @a.perl

[16:02] <camelia> rakudo-moar 47ddca: OUTPUT«()␤()␤()␤This type does not support positional operations␤  in block <unit> at /tmp/dKLzM_Yc_j:1␤␤»

[16:02] <GLRelia> rakudo-moar 345953: OUTPUT«Type check failed in binding; expected 'Positional' but got 'Seq'␤  in block <unit> at /tmp/1dOVHEFQDc:1␤␤»

[16:02] <[Coke]> ^^ RT #66820

[16:02] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=66820

[16:04] *** rindolf joined
[16:05] <lizmat> m: sub a($a) { say $a.perl }; my %h = a => 42, b => 666; a %h

[16:05] <camelia> rakudo-moar 47ddca: OUTPUT«{:a(42), :b(666)}␤»

[16:05] <GLRelia> rakudo-moar 345953: OUTPUT«${:a(42), :b(666)}␤»

[16:06] <jnthn> m: my %h = a => 1, b => 2; my @a = %h; say @a.perl

[16:06] <camelia> rakudo-moar 47ddca: OUTPUT«[:a(1), :b(2)]<>␤»

[16:06] <GLRelia> rakudo-moar 345953: OUTPUT«[:a(1), :b(2)]␤»

[16:06] <[Coke]> m: say (^10).map: { $^n * 2 + 1 }.perl

[16:06] <camelia> rakudo-moar 47ddca: OUTPUT«Cannot call map(Int: Int, Int, Int, Int, Int, Int, Int, Int, Int, Str); none of these signatures match:␤    ($: Whatever, *%_)␤    ($: &block, :$label, *%_)␤  in block <unit> at /tmp/W9wykctx3Y:1␤␤»

[16:06] <GLRelia> rakudo-moar 345953: OUTPUT«Cannot call map(Range: Str); none of these signatures match:␤    ($: &block, :$label, *%_)␤    (HyperIterable:D $: &block, :$label, *%_)␤  in block <unit> at /tmp/ZWpV0OZm_I:1␤␤»

[16:06] <[ptc]> Ven: http://stackoverflow.com/questions/1273616/how-do-i-compare-two-hashes-in-perl-without-using-datacompare

[16:06] <jnthn> m: my %h = a => 1, b => 2; my @a = %h; say @a.map(*.WHAT).say

[16:06] <GLRelia> rakudo-moar 345953: OUTPUT«Cannot call map(Array: Whatever); none of these signatures match:␤    ($: &block, :$label, *%_)␤    (HyperIterable:D $: &block, :$label, *%_)␤  in block <unit> at /tmp/OCTDnu6EC_:1␤␤»

[16:06] <camelia> rakudo-moar 47ddca: OUTPUT«a => 1 b => 2␤True␤»

[16:06] <FROGGS> m: my @a = gather { for 1..3 { take $_; say @a.perl } }; say @a.perl

[16:06] <GLRelia> rakudo-moar 345953: OUTPUT«[]␤[]␤[]␤[1, 2, 3]␤»

[16:06] <camelia> rakudo-moar 47ddca: OUTPUT«[]<>␤[]<>␤[]<>␤[1, 2, 3]<>␤»

[16:06] <lizmat> m: sub a(\a) { say a.perl }; my %h = a => 42, b => 666; a %h

[16:06] <camelia> rakudo-moar 47ddca: OUTPUT«{:a(42), :b(666)}<>␤»

[16:06] <GLRelia> rakudo-moar 345953: OUTPUT«{:a(42), :b(666)}␤»

[16:06] <[ptc]> Ven: as well as http://learn.perl.org/faq/perlfaq4.html#How-do-I-test-whether-two-arrays-or-hashes-are-equal

[16:06] <Ven> [ptc]: thanks

[16:07] <lizmat> m: sub a(**@a) { say @a.perl }; my %h = a => 42, b => 666; a %h

[16:07] <GLRelia> rakudo-moar 345953: OUTPUT«[{:a(42), :b(666)},]␤»

[16:07] <camelia> rakudo-moar 47ddca: OUTPUT«(:a(42), :b(666))␤»

[16:07] <lizmat> m: sub a(*@a) { say @a.perl }; my %h = a => 42, b => 666; a %h

[16:07] <GLRelia> rakudo-moar 345953: OUTPUT«[:a(42), :b(666)]␤»

[16:07] <camelia> rakudo-moar 47ddca: OUTPUT«[:a(42), :b(666)]<>␤»

[16:08] *** araujo joined
[16:08] *** araujo left
[16:08] *** araujo joined
[16:08] <lizmat> m: sub a(*@a) { say @a.perl }; a { a => 42, b => 666 }

[16:08] <camelia> rakudo-moar 47ddca: OUTPUT«[{:a(42), :b(666)}]<>␤»

[16:08] <GLRelia> rakudo-moar 345953: OUTPUT«[:a(42), :b(666)]␤»

[16:08] <lizmat> m: sub a(*@a) { say @a.perl }; a ${ a => 42, b => 666 }

[16:08] <GLRelia> rakudo-moar 345953: OUTPUT«[{:a(42), :b(666)},]␤»

[16:08] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/S_7n2s6Iq9␤Unsupported use of ${ a => 42, b => 666 }; in Perl 6 please use $( a => 42, b => 666 )␤at /tmp/S_7n2s6Iq9:1␤------> 3 say @a.perl }; a ${ a => 42, b => 666 }7⏏5<EOL>␤»

[16:10] <dalek> rakudo/glr: 9ba8e43 | TimToady++ | src/core/ (3 files):

[16:10] <dalek> rakudo/glr: 1st whack at coping with self-referential data

[16:10] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/9ba8e43d1f

[16:10] <[Coke]> m: sub foo(@a) { @a[1] = "NOES" }; my @a = <OH HAI>; foo(@a); say ~@a

[16:10] <camelia> rakudo-moar 47ddca: OUTPUT«OH NOES␤»

[16:10] <GLRelia> rakudo-moar 345953: OUTPUT«OH NOES␤»

[16:11] <[Coke]> m: sub foo(@a) { @a[0, 1] = <OH NOES> }; my @a = 0, 1; foo(@a)

[16:11] <camelia> rakudo-moar 47ddca: ( no output )

[16:11] <GLRelia> rakudo-moar 345953: ( no output )

[16:11] <[Coke]> m: sub foo(@a) { @a[0, 1] = <OH NOES> }; my @a = 0, 1; foo(@a); say ~@a;

[16:11] <camelia> rakudo-moar 47ddca: OUTPUT«OH NOES␤»

[16:11] <GLRelia> rakudo-moar 345953: OUTPUT«OH NOES␤»

[16:11] <FROGGS> nine: what are you currently working on?

[16:12] <[Coke]> masak: can you please review RT #74902?

[16:12] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=74902

[16:12] * masak does

[16:12] <dalek> roast/glr: 3fa8b4d | lizmat++ | S16-io/ (3 files):

[16:12] <dalek> roast/glr: note/print/say stupid test clean up

[16:12] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/3fa8b4d1cd

[16:13] <colomon> m: rindex( 'xxy','y', -1e34 )

[16:13] <camelia> rakudo-moar 47ddca: OUTPUT«WARNINGS:␤Useless use of "rindex( 'xxy','y', -1e34 )" in expression "rindex( 'xxy','y', -1e34 )" in sink context (line 1)␤»

[16:13] <GLRelia> rakudo-moar 345953: OUTPUT«WARNINGS:␤Useless use of "rindex( 'xxy','y', -1e34 )" in expression "rindex( 'xxy','y', -1e34 )" in sink context (line 1)␤»

[16:13] <colomon> m: say rindex( 'xxy','y', -1e34 )

[16:13] <camelia> rakudo-moar 47ddca: OUTPUT«Nil␤»

[16:13] <GLRelia> rakudo-moar 345953: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/FgRhUOy8do:1␤␤»

[16:13] <masak> [Coke]: no.

[16:14] <lizmat> m: say rindex( 'xxy','y', -1 )

[16:14] <GLRelia> rakudo-moar 345953: OUTPUT«2␤»

[16:14] <camelia> rakudo-moar 47ddca: OUTPUT«Nil␤»

[16:14] <masak> [Coke]: I think you misunderstood the goal of the ticket.

[16:14] <nine> FROGGS: I'm now changing everything, so itemization prevents from flattening under the single-arg-rule

[16:14] <[Coke]> one of the goals was "these should be consistent"

[16:14] <[Coke]> but that wasn't the original request.

[16:15] <lizmat> m: say $*FOO

[16:15] <camelia> rakudo-moar 47ddca: OUTPUT«Dynamic variable $*FOO not found␤  in block <unit> at /tmp/xh0SL6RIGZ:1␤␤Actually thrown at:␤  in block <unit> at /tmp/xh0SL6RIGZ:1␤␤»

[16:15] <GLRelia> rakudo-moar 345953: OUTPUT«Dynamic variable $*FOO not found␤  in block <unit> at /tmp/OV47SxHDTI:1␤␤Actually thrown at:␤  in block <unit> at /tmp/OV47SxHDTI:1␤␤»

[16:15] <[Coke]> "so something is inconsistent, at least."

[16:15] <masak> [Coke]: the spec said (and still *says*, I think) that the *contents* of the array parameter are readonly. that's what the "one level down" thing refers to.

[16:15] <masak> [Coke]: I might try to find the relevant bit of spec for you.

[16:16] <dalek> rakudo/glr: 7467173 | TimToady++ | src/core/Array.pm:

[16:16] <dalek> rakudo/glr: remove useless dynvar declarations

[16:16] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/7467173fe3

[16:16] <[Coke]> please add it to the ticket if so, yes.

[16:17] *** rangerprice joined
[16:18] <TimToady> m: my $a = 1; my $b = 2; $a = ($a, $b); say $a[0]

[16:18] <GLRelia> rakudo-moar 9ba8e4: OUTPUT«(\List_140492816507288 = (List_140492816507288 2))2␤»

[16:18] <camelia> rakudo-moar 47ddca: OUTPUT«Memory allocation failed; could not allocate 29952 bytes␤»

[16:19] <dalek> roast/glr: b057321 | FROGGS++ | S03-operators/repeat.t:

[16:19] <dalek> roast/glr: fix plan, was busted by 06b5ba0

[16:19] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/b057321a2d

[16:19] <masak> [Coke]: However, the default forces any container argument to also

[16:19] <masak> be treated as an immutable value.  This extends down only one level;

[16:19] <masak> an immutable container may always return an element that is mutable if

[16:19] <masak> it so chooses.

[16:19] <TimToady> m: my $a = 1; my $b = 2; $a = (a => 2,:b($a, $b)); say $a.perl

[16:19] <GLRelia> rakudo-moar 9ba8e4: OUTPUT«(my \List_140420932479392 = (:a(2), :b($(List_140420932479392, 2))))␤»

[16:19] *** dwarring left
[16:19] <masak> S06:718

[16:19] <synbot6> Link: http://design.perl6.org/S06.html#line_718

[16:19] <FROGGS> m: my $a = 1; my $b = 2; $a = (a => 2,:b($a, $b)); say $a.perl.EVAL

[16:19] <GLRelia> rakudo-moar 9ba8e4: OUTPUT«5===SORRY!5=== Error while compiling EVAL_0␤Variable '&List_140203337335216' is not declared␤at EVAL_0:1␤------> 3my \List_140203337335216 = (:a(2), :b($(7⏏5List_140203337335216, 2))))␤»

[16:19] <TimToady> m: my $a = 1; my $b = 2; $a = {a => 2,:b($a, $b)}; say $a.perl

[16:19] <GLRelia> rakudo-moar 9ba8e4: OUTPUT«(my \Hash_139742432439992 = {:a(2), :b($(Hash_139742432439992, 2))})␤»

[16:20] * masak adds this to the ticket

[16:20] <camelia> rakudo-moar 47ddca: OUTPUT«(timeout)»

[16:20] <FROGGS> m: my $a = 1; my $b = 2; $a = {a => 2,:b($a, $b)}; say $a.perl.EVAL

[16:20] <GLRelia> rakudo-moar 9ba8e4: OUTPUT«5===SORRY!5===␤Variable '&Hash_140342462502600' is not declared␤at EVAL_0:1␤------> 3my \Hash_140342462502600 = {:a(2), :b($(7⏏5Hash_140342462502600, 2))})␤Variable '&Hash_140342462502600' is not declared␤at EVAL_0:1␤------> 3my \Has…»

[16:21] <FROGGS> k, same

[16:21] <TimToady> looks like my \foo isn't declaring the symbol soon enough

[16:21] <camelia> rakudo-moar 47ddca: OUTPUT«(timeout)»

[16:21] *** domidumont left
[16:21] <dalek> nqp/nfa_to_statelist: e4f5004 | timotimo++ | src/QRegex/ (2 files):

[16:21] <dalek> nqp/nfa_to_statelist: try to nuke statelist and keep fates

[16:21] <dalek> nqp/nfa_to_statelist: 

[16:21] <dalek> nqp/nfa_to_statelist: but we're not getting far at all yet.

[16:21] <dalek> nqp/nfa_to_statelist: review: https://github.com/perl6/nqp/commit/e4f5004ab9

[16:22] <TimToady> std: (my \Hash_139742432439992 = {:a(2), :b($(Hash_139742432439992, 2))})

[16:22] *** GLRelia left
[16:22] <camelia> std 28329a7: OUTPUT«ok 00:00 142m␤»

[16:22] <FROGGS> TimToady: it does so potentially after the initializer?

[16:22] <TimToady> std declares it soon enough :)

[16:22] *** itz left
[16:22] *** MilkmanDan left
[16:23] <TimToady> m: (my \Hash_139742432439992 = {:a(2), :b($(Hash_139742432439992, 2))})

[16:23] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5===␤Variable '&Hash_139742432439992' is not declared␤at /tmp/5tJjoJTYeL:1␤------> 3my \Hash_139742432439992 = {:a(2), :b($(7⏏5Hash_139742432439992, 2))})␤Variable '&Hash_139742432439992' is not declared␤at /tmp/5tJjoJTYeL:1…»

[16:23] <colomon> how do we rebuild GLRelia?

[16:23] *** GLRelia joined
[16:23] <GLRelia> std : OUTPUT«Can't chdir to '/home/steve/std/snap': No such file or directory at lib/EvalbotExecuter.pm line 171.␤      EvalbotExecuter::_auto_execute(HASH(0x206fe38), "(my \\Hash_139742432439992 = {:a(2), :b(\$(Hash_139742432439992"..., GLOB(0x2417bc8), "/tmp/AKTCivk9Ni", "std") calle…»

[16:24] <colomon> or is it only one commit behind?

[16:24] <masak> ok, 007 now has custom operators \o/

[16:24] <colomon> m: say rindex( 'xxy','y', -1e34 )

[16:24] <camelia> rakudo-moar 47ddca: OUTPUT«Nil␤»

[16:24] <GLRelia> rakudo-moar 746717: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/vdHBDNEDhb:1␤␤»

[16:25] *** MilkmanDan joined
[16:25] * colomon is really confused about the difference he is getting between evalbot and his local p6

[16:26] <colomon> > say rindex( 'xxy','y', -1e34 )

[16:26] <colomon> index start offset out of range

[16:26] <masak> still have custom macro ops left to do...

[16:29] <[Coke]> what's your local p6 version?

[16:29] <colomon> [Coke]: 7467173fe344366f0c94f431dc42657c69d0f13c

[16:29] <masak> that's GLR, it seems.

[16:29] <colomon> yes

[16:29] <colomon> it’s the latest, so far as I know

[16:29] <colomon> I have been pulling regularly all afternoon

[16:30] <colomon> and GLRelia has been updated to it

[16:30] * moritz will shortly go off to celebrate his 5th wedding aniversary

[16:30] <brrt> moritz++

[16:30] <colomon> moritz++

[16:31] <FROGGS> moritz: have fun! :o)

[16:31] <[Coke]> moritz: congrats!

[16:32] <[Coke]> m: say (2015-1993)/(2015-1971)

[16:32] <camelia> rakudo-moar 47ddca: OUTPUT«0.5␤»

[16:32] <GLRelia> rakudo-moar 746717: OUTPUT«0.5␤»

[16:32] <moritz> thanks everybody

[16:32] <hoelzro> moritz: congrats!

[16:32] <timotimo> moritz o/

[16:32] <jdv79> is there a terse way to coerce in a case like this?: https://gist.github.com/jdv/b92fa2a926d801804f83

[16:32] <FROGGS> TimToady: the Hash_* is declared it the actions here: rakudo/src/Perl6/Actions.nqp:2435:        elsif $<defterm> {

[16:33] *** carlin left
[16:33] <moritz> m: try { die 42 }; my $x = $!.WHAT; say $x;

[16:33] <camelia> rakudo-moar 47ddca: OUTPUT«(X::AdHoc)␤»

[16:33] <GLRelia> rakudo-moar 746717: OUTPUT«Use of uninitialized value $x of type X::AdHoc in string context  in block <unit> at /tmp/CCpdXAmFhs:1␤␤»

[16:33] *** carlin joined
[16:33] <[Coke]> ^^ as of tomorrow, I'll have been alive only 2x as long as I've been married. Ish.

[16:33] <masak> moritz: congrats

[16:33] <moritz> [Coke]: wow.

[16:33] <[Coke]> And I'm spending it with you guys!

[16:34] <masak> aww :)

[16:34] <moritz> m: try { die 42 }; my $x = $!.WHAT; say $x.gist;

[16:34] <camelia> rakudo-moar 47ddca: OUTPUT«(X::AdHoc)␤»

[16:34] <GLRelia> rakudo-moar 746717: OUTPUT«(X::AdHoc)␤»

[16:34] <tadzik> moritz: congratulations to you both :)

[16:34] <tadzik> moritz: have a lot of fun

[16:34] <moritz> tadzik, masak, hoelzro: thanks

[16:35] <dalek> perl6-roast-data: c74ed93 | coke++ | / (2 files):

[16:35] <dalek> perl6-roast-data: another glr run for 'today'

[16:35] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c74ed93024

[16:36] *** elohmrow left
[16:36] <[Coke]> only 9 more passing tests. hurry up, people! ;)

[16:37] *** virtualsue left
[16:37] <carlin> has the panda precomp change caused anything submitted to testers.perl6 to have a build stage grade of "NA"?

[16:38] <[Coke]> *furious investigation*

[16:38] <tadzik> ...could have

[16:38] <pmurias_> timotimo: the nfa handling is getting changed again?

[16:39] <tadzik> panda's been pretty aggresively mangled by me today

[16:39] <dalek> rakudo/glr: 355b999 | TimToady++ | src/core/Enum.pm:

[16:39] <dalek> rakudo/glr: handle self-referential pair as well in gist/perl

[16:39] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/355b9999b4

[16:39] <timotimo> pmurias_: just an optimization

[16:39] <timotimo> but i'm not doing well there at all

[16:40] <dalek> roast/glr: 8256c7f | lizmat++ | S32-io/note.t:

[16:40] <dalek> roast/glr: Fix another note concat issue

[16:40] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/8256c7fe45

[16:41] <dalek> rakudo/glr: 8d17aab | (Stefan Seifert)++ | src/core/Array.pm:

[16:41] <dalek> rakudo/glr: GLRR: itemization should prevent flattening single args

[16:41] <dalek> rakudo/glr: 

[16:41] <dalek> rakudo/glr: First part:

[16:41] <dalek> rakudo/glr: my @arr = 1, 2;

[16:41] <dalek> rakudo/glr: Array.new(@arr) and [@arr] return: [1, 2]

[16:41] <dalek> rakudo/glr: Array.new($@arr) and [$@arr] return: [[1, 2]]

[16:41] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/8d17aaba32

[16:42] <FROGGS> m: say (1, 2, 3).perl

[16:42] <camelia> rakudo-moar 47ddca: OUTPUT«(1, 2, 3)␤»

[16:42] <GLRelia> rakudo-moar 746717: OUTPUT«(1, 2, 3)␤»

[16:42] <colomon> m: permutations(3).list.perl

[16:42] <GLRelia> rakudo-moar 746717: ( no output )

[16:42] <camelia> rakudo-moar 47ddca: ( no output )

[16:43] <colomon> m: permutations(3).list.perl.say

[16:43] <camelia> rakudo-moar 47ddca: OUTPUT«((0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0))␤»

[16:43] <GLRelia> rakudo-moar 746717: OUTPUT«((0, 1, 2), List_139685018653472, List_139685018725080, List_139685018769784, List_139685018841176, List_139685018885816)␤»

[16:43] <nine> m: ((1,2,3),(2,3,4),(3,4,5)).perl.say

[16:43] <camelia> rakudo-moar 47ddca: OUTPUT«((1, 2, 3), (2, 3, 4), (3, 4, 5))␤»

[16:43] <GLRelia> rakudo-moar 746717: OUTPUT«((1, 2, 3), (2, 3, 4), (3, 4, 5))␤»

[16:44] <nine> TimToady: ^^^ you got a bug in .perl. Also the reason for t/spec/S32-list/combinations.t failing

[16:45] <colomon> oh, it’s .perl that is the issue?

[16:45] <colomon> m: permutations(3).list.say

[16:45] <camelia> rakudo-moar 47ddca: OUTPUT«0 1 2 0 2 1 1 0 2 1 2 0 2 0 1 2 1 0␤»

[16:45] <GLRelia> rakudo-moar 8d17aa: OUTPUT«(0 1 2)(0 2 1)(1 0 2)(1 2 0)(2 0 1)(2 1 0)␤»

[16:47] <pmurias_> timotimo: ok, I'm porting over the bitpacking from the CODEPOINT_I_LL and it's a bit annoying

[16:47] *** pmurias_ left
[16:47] *** pmurias left
[16:48] <timotimo> ah, yeah

[16:48] <timotimo> i can see that

[16:50] <dalek> ecosystem: 483d972 | (John Scoles)++ | META.list:

[16:50] <dalek> ecosystem: Acme::Flutterby - An object-oriented interface to a butterfly. In what else but Perl 6.

[16:50] <dalek> ecosystem: 

[16:50] <dalek> ecosystem: This module provides a simplistic, but powerful, interface to a Butterfly.

[16:50] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/483d972967

[16:50] <dalek> ecosystem: 1ab273a | FROGGS++ | META.list:

[16:50] <dalek> ecosystem: Merge pull request #54 from byterock/patch-1

[16:50] <dalek> ecosystem: 

[16:50] <dalek> ecosystem: Acme::Flutterby - An object-oriented interface to a butterfly. In wha…

[16:50] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/1ab273ae85

[16:50] <tadzik> hah! Along with Acme::Meow

[16:52] <[Coke]> nqp::shell complains it requires 7 operands. Not in the docs. :P

[16:53] *** brrt left
[16:53] <[Coke]> (trying to write a test that will fail on the jvm)

[16:53] *** dakkar left
[16:54] <dalek> rakudo/glr: 4050d34 | jnthn++ | src/core/Any.pm:

[16:54] <dalek> rakudo/glr: Bring back .tree.

[16:54] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/4050d341b3

[16:54] *** abraxxa left
[16:55] * FROGGS .oO( bring back, bring back, bring back the tree to me, to meeee! )

[16:56] <maettu> dinner @7:30 (outside)

[16:56] <tadzik> \o/

[16:56] * maettu can already smell it

[16:57] <colomon> m: permutations(3).list[0].WHAT.say

[16:57] <camelia> rakudo-moar 47ddca: OUTPUT«(Parcel)␤»

[16:57] <GLRelia> rakudo-moar 8d17aa: OUTPUT«Use of uninitialized value of type List in string context  in block <unit> at /tmp/6U6qj8LGdf:1␤␤»

[16:57] <colomon> m: permutations(3)[0].WHAT.say

[16:57] <camelia> rakudo-moar 47ddca: OUTPUT«(Parcel)␤»

[16:57] <GLRelia> rakudo-moar 8d17aa: OUTPUT«Use of uninitialized value of type List in string context  in block <unit> at /tmp/5WEs8A9jds:1␤␤»

[16:58] <[Coke]> maettu++

[16:59] <masak> m: sub x($/) { given "foo" { when /foo/ { say "yay" } } }; x(42)

[16:59] <camelia> rakudo-moar 47ddca: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub x at /tmp/3G_glWnQvA:1␤  in block <unit> at /tmp/3G_glWnQvA:1␤␤»

[16:59] <GLRelia> rakudo-moar 4050d3: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub x at /tmp/skf5wIwFrJ:1␤  in block <unit> at /tmp/skf5wIwFrJ:1␤␤»

[16:59] *** carlin left
[16:59] <masak> we could detect this statically.

[16:59] <dalek> rakudo/glr: 066bec0 | TimToady++ | src/core/ (4 files):

[16:59] <dalek> rakudo/glr: allow reuse of objects in self-ref constructs

[16:59] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/066bec04fc

[16:59] <masak> if I ask "should we?", will someone pop in and say "no, that's too much complexity for too little gain" ? :)

[17:00] <TimToady> colomon: that should fix your permutations vs perl bug

[17:01] <colomon> TimToady: building now...

[17:01] <colomon> done

[17:01] <colomon> indeed!

[17:01] <colomon> TimToady++

[17:01] <masak> background is this: in sufficiently advanced action methods, I tend to do some smartmatching.

[17:01] <colomon> combinations still failing something

[17:01] <masak> but I have to do it inside of a lexical sub which I call, completely for that purpose

[17:01] *** Ven left
[17:03] <[Coke]> FROGGS: how do I run a command and get at the output?

[17:03] <tadzik> jvm: nqp::ordat('', 0)

[17:04] <tadzik> m: 1

[17:04] <camelia> rakudo-moar 47ddca: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤»

[17:04] <GLRelia> rakudo-moar 066bec: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤»

[17:05] <tadzik> j: nqp::ordat('', 0)

[17:05] <GLRelia> rakudo-jvm 066bec: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[17:05] <camelia> rakudo-jvm 47ddca: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[17:05] <FROGGS> [Coke]: in nqp?

[17:07] <dalek> roast/glr: af9c772 | jnthn++ | S04-statements/for-scope.t:

[17:07] <dalek> roast/glr: Update test for [...] semantics.

[17:07] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/af9c772c8f

[17:07] <dalek> roast/glr: c1677a5 | jnthn++ | S06-signature/passing-arrays.t:

[17:07] <dalek> roast/glr: for $a { } with Iterable now iterates.

[17:07] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/c1677a5499

[17:07] <[Coke]> updated question: how to do .perl in nqp? 

[17:08] <FROGGS> [Coke]: there is nothing like that IMO

[17:08] <dalek> perl6-roast-data: 67f9a94 | coke++ | / (2 files):

[17:08] <dalek> perl6-roast-data: another glr run for 'today'

[17:08] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/67f9a94e01

[17:08] <[Coke]> trying to diagnose why nqp::shell fails in the jvm; hard when there's no tests. :|

[17:09] *** ribasushi joined
[17:10] <dalek> roast/glr: 6401b9a | jnthn++ | S06-signature/sigilless.t:

[17:10] <dalek> roast/glr: This isn't a good way to test itemness any more.

[17:10] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/6401b9a9e1

[17:11] <FROGGS> TimToady: I tried to make @recursive.perl.EVAL work: https://gist.github.com/FROGGS/da2607dd8fc9d9774d6d

[17:11] <FROGGS> though, only partially successful

[17:12] <tadzik> jvm broken!

[17:13] <tadzik> j: nqp::null()

[17:13] <GLRelia> rakudo-jvm 066bec: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[17:13] <camelia> rakudo-jvm 47ddca: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[17:15] <FROGGS> colomon: how far did you get with the Any.elems patch?

[17:15] <colomon> FROGGS: I aborted it in confusion.  do you still reckon it’s the right thing to do?  or should I just test it fully?

[17:15] <colomon> FROGGS: I’m multi-tasking a bit here… also trying to sort out smoker issues.  :)

[17:16] * colomon tries building it again.

[17:16] *** rindolf left
[17:16] <FROGGS> colomon: I think it is the right thing todo, but I can pick up that task again

[17:17] <FROGGS> colomon: I'll do it

[17:19] <TimToady> FROGGS: I was considering adding a <deftermnow> that reduces before parsing the initializer, then we could put it into Actions

[17:19] *** domidumont joined
[17:19] *** daxim joined
[17:19] *** domidumont left
[17:20] <FROGGS> TimToady: sounds like a plan

[17:20] <lizmat> m: my %h{Any}; given a => 42 { say $_.key.WHICH; (%h.AT-KEY($_.key.WHICH) //= ($_.key => 0)).value += $_.value }; say %h.pairs   # broken on GLR

[17:20] <camelia> rakudo-moar 47ddca: OUTPUT«Str|a␤Str|a => a => 42␤»

[17:20] <GLRelia> rakudo-moar 066bec: OUTPUT«Str|a␤Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/Pvt0qV6JdZ:1␤Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/Pvt0qV6JdZ:1␤ObjAt.new => :a(42)␤»

[17:20] *** domidumont joined
[17:22] <jnthn> m: my %h{Any}; given a => 42 { say $_.key.WHICH; (%h.AT-KEY($_.key.WHICH) //= ($_.key => 0)).perl.say };

[17:22] <camelia> rakudo-moar 47ddca: OUTPUT«Str|a␤:a(0)␤»

[17:22] <GLRelia> rakudo-moar 066bec: OUTPUT«Str|a␤Use of uninitialized value of type Any in numeric context  in block  at /tmp/EYJQmrrKyq:1␤:a(0)␤»

[17:23] <jnthn> m: my %h{Any}; given a => 42 { (($_.key => 0)).perl.say };

[17:23] <camelia> rakudo-moar 47ddca: OUTPUT«:a(0)␤»

[17:23] <GLRelia> rakudo-moar 066bec: OUTPUT«Use of uninitialized value of type Any in numeric context  in block  at /tmp/mh9G0L58YP:1␤:a(0)␤»

[17:23] <jnthn> m: given a => 42 { (($_.key => 0)).perl.say };

[17:23] <camelia> rakudo-moar 47ddca: OUTPUT«:a(0)␤»

[17:23] <GLRelia> rakudo-moar 066bec: OUTPUT«Use of uninitialized value of type Any in numeric context  in block  at /tmp/nLbZHXs7xa:1␤:a(0)␤»

[17:23] <jnthn> m: given a => 42 { (($_.key => 0)).say };

[17:23] <camelia> rakudo-moar 47ddca: OUTPUT«a => 0␤»

[17:23] <GLRelia> rakudo-moar 066bec: OUTPUT«Use of uninitialized value of type Any in numeric context  in block  at /tmp/WgI9wOuUZF:1␤:a(0)␤»

[17:23] <jnthn> m: given a => 42 { (($_.key => 0)).WHAT.say };

[17:23] <camelia> rakudo-moar 47ddca: OUTPUT«(Pair)␤»

[17:23] <GLRelia> rakudo-moar 066bec: OUTPUT«Use of uninitialized value of type Pair in string context  in block  at /tmp/4EtK1PD6fL:1␤␤»

[17:24] *** espadrine left
[17:24] *** rindolf joined
[17:24] <jnthn> m: given a => 42 { (($_.key => 0)).DEFINITE };

[17:24] <camelia> rakudo-moar 47ddca: ( no output )

[17:24] <GLRelia> rakudo-moar 066bec: ( no output )

[17:24] <jnthn> m: given a => 42 { (($_.key => 0)).DEFINITE.say };

[17:24] <camelia> rakudo-moar 47ddca: OUTPUT«True␤»

[17:24] <GLRelia> rakudo-moar 066bec: OUTPUT«True␤»

[17:24] <daxim> hahainternet, what did you find re devanagari codepoints?

[17:24] <jnthn> m: given a => 42 { (($_.key => 0)).^name.say };

[17:24] <camelia> rakudo-moar 47ddca: OUTPUT«Pair␤»

[17:24] <GLRelia> rakudo-moar 066bec: OUTPUT«Pair␤»

[17:25] *** araujo left
[17:25] <jnthn> m: given a => 42 { .key.say };

[17:25] <camelia> rakudo-moar 47ddca: OUTPUT«a␤»

[17:25] <GLRelia> rakudo-moar 066bec: OUTPUT«a␤»

[17:25] <jnthn> m: given a => 42 { (.key => 'x').say };

[17:25] <camelia> rakudo-moar 47ddca: OUTPUT«a => x␤»

[17:25] <GLRelia> rakudo-moar 066bec: OUTPUT«Use of uninitialized value of type Any in numeric context  in block  at /tmp/tAPfJOGESb:1␤:a("x")␤»

[17:26] *** araujo joined
[17:26] *** araujo left
[17:26] *** araujo joined
[17:26] *** araujo left
[17:26] <TimToady> m: given a => 42 { (($_.key => 0)).WHICH.say }

[17:26] <camelia> rakudo-moar 47ddca: OUTPUT«Pair|67325440␤»

[17:26] <GLRelia> rakudo-moar 066bec: OUTPUT«Pair|52411280␤»

[17:27] <hahainternet> daxim: that whatever is in rakudo as it stands doesn't work as the spec dictates

[17:27] <hahainternet> so i'll just wait

[17:27] <TimToady> m: given a => 42 { (($_.key => 0)).WHAT }

[17:27] <camelia> rakudo-moar 47ddca: ( no output )

[17:27] <GLRelia> rakudo-moar 066bec: ( no output )

[17:27] <hahainternet> i'm not fussy, i appreciate there's a lot of work to be done

[17:28] <daxim> I see

[17:28] <TimToady> m: given a => 42 { (($_.key => 0)).WHAT.say }

[17:28] <camelia> rakudo-moar 47ddca: OUTPUT«(Pair)␤»

[17:28] <GLRelia> rakudo-moar 066bec: OUTPUT«Use of uninitialized value of type Pair in string context  in block  at /tmp/tWRmZ5JHer:1␤␤»

[17:28] <hahainternet> i didn't bother anyone else here with it yet

[17:28] <hahainternet> m: "नि".chars

[17:28] <camelia> rakudo-moar 47ddca: ( no output )

[17:28] <GLRelia> rakudo-moar 066bec: ( no output )

[17:28] <hahainternet> m: say "नि".chars

[17:28] <camelia> rakudo-moar 47ddca: OUTPUT«2␤»

[17:28] <GLRelia> rakudo-moar 066bec: OUTPUT«2␤»

[17:28] <hahainternet> so ya, if that doesn't work, nothing else will

[17:29] <hahainternet> but i know it's been on the list for ages so either spec or similar will be updated eventually

[17:29] <hahainternet> glr probably lot more important :D

[17:29] <lizmat> m: my %b := BagHash.new(<a b o>,< p a p o o>); my %h = %b; say %b.perl

[17:29] <camelia> rakudo-moar 47ddca: OUTPUT«Odd number of elements found where hash initializer expected␤  in block <unit> at /tmp/_McWAB6VDB:1␤␤»

[17:29] <GLRelia> rakudo-moar 066bec: OUTPUT«("a"=>2,"p"=>2,"b"=>1,"o"=>3).BagHash␤»

[17:30] <jnthn> m: say "नि".NFD.list.say

[17:30] <GLRelia> rakudo-moar 066bec: OUTPUT«23442367␤True␤»

[17:30] <camelia> rakudo-moar 47ddca: OUTPUT«2344 2367␤True␤»

[17:30] <jnthn> m: say "नि".NFC.list.say

[17:30] <camelia> rakudo-moar 47ddca: OUTPUT«2344 2367␤True␤»

[17:30] <GLRelia> rakudo-moar 066bec: OUTPUT«23442367␤True␤»

[17:30] <jnthn> m: say uniprop('Canonical_Combining_Class', 2367)

[17:30] <camelia> rakudo-moar 47ddca: OUTPUT«Cannot call uniprop(Int, Int); none of these signatures match:␤    (Str $str, |c)␤    (Int $code, Stringy $propname = { ... })␤  in block <unit> at /tmp/muOYuduNGf:1␤␤»

[17:30] <GLRelia> rakudo-moar 066bec: OUTPUT«Cannot call uniprop(Int, Int); none of these signatures match:␤    (Str $str, |c)␤    (Int $code, Stringy $propname = { ... })␤  in block <unit> at /tmp/InTi71kC3O:1␤␤»

[17:31] <jnthn> m: say uniprop(2367, 'Canonical_Combining_Class')

[17:31] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[17:31] <GLRelia> rakudo-moar 066bec: OUTPUT«0␤»

[17:31] <hahainternet> jnthn: don't spend any time on it, it was just a trivial post on HN i noticed

[17:31] <hahainternet> so please don't divert yourself on my account :)

[17:31] <jnthn> hahainternet: Yeah, but anyway that explains everything; things that are combiners are identified in the NFG algo by having a CCC > 0

[17:32] <hahainternet> i gotta say i don't quite understand that, but fwiw, that character is literally taken from https://raw.githubusercontent.com/perl6/specs/master/S15-unicode.pod

[17:32] <hahainternet> which indicates that .chars would return 1

[17:34] <jnthn> Well, the doc pre-dates any actual NFG implementation work

[17:34] <jnthn> So may need bringing in line with what actually got done.

[17:34] <hahainternet> perhaps, there still seems to be some disagreement there but it's not with me, here is the HN comment relating to it: https://news.ycombinator.com/item?id=10130002

[17:35] <hahainternet> so one assumes there should be a way to get a count that = 1 grapheme, but buggered if i know where it'd be, thanks for elucidating jnthn 

[17:36] *** araujo joined
[17:36] *** araujo left
[17:36] *** araujo joined
[17:37] *** araujo_ joined
[17:38] <FROGGS> m: say "".split("").perl

[17:38] <GLRelia> rakudo-moar 066bec: OUTPUT«Nil␤»

[17:38] <camelia> rakudo-moar 47ddca: OUTPUT«Nil␤»

[17:38] <tony-o> lizmat: Q about the recommendation manager in S22. is the recommendation manager referring to .candidates() in a CUR, or is the recommendation manager something further up the food chain that is expected query all CURs in the scope and combine the results of their .candidates

[17:38] <FROGGS> m: say "".split("").elems

[17:38] <camelia> rakudo-moar 47ddca: OUTPUT«0␤»

[17:38] <GLRelia> rakudo-moar 066bec: OUTPUT«0␤»

[17:38] *** Peter_R left
[17:39] <FROGGS> m: say "".split("").elems; say Nil.elems

[17:39] <camelia> rakudo-moar 47ddca: OUTPUT«0␤0␤»

[17:39] <GLRelia> rakudo-moar 066bec: OUTPUT«0␤0␤»

[17:39] <nine> jnthn: what's the difference between [,] and my &infix:<op> := &[,]; [op]?

[17:39] *** araujo_ left
[17:40] <pink_mist> precedence?

[17:40] <TimToady> &[,] is always treated as binary

[17:40] <TimToady> [,] will be a list associative operator

[17:41] *** araujo left
[17:41] <nine> so [,] will hit a different meta op implementation than [op]?

[17:41] <TimToady> yup

[17:42] <nine> That would explain:

[17:42] <nine> m: my &infix:<op> := &[,]; say ([op] [1,2,3]).perl; say ([,] [1,2,3]).perl;

[17:42] <camelia> rakudo-moar 47ddca: OUTPUT«([1, 2, 3],)␤([1, 2, 3],)␤»

[17:42] <GLRelia> rakudo-moar 066bec: OUTPUT«((1, 2), 3)␤(1, 2, 3)␤»

[17:42] <TimToady> m: my &infix:<op> := &infix:<,>; say ([op] [1,2,3]).perl; say ([,] [1,2,3]).perl;

[17:42] <masak> TimToady: is there a way to refer to the list associative operator as a noun?

[17:42] <camelia> rakudo-moar 47ddca: OUTPUT«([1, 2, 3],)␤([1, 2, 3],)␤»

[17:42] <GLRelia> rakudo-moar 066bec: OUTPUT«((1, 2), 3)␤(1, 2, 3)␤»

[17:43] <lizmat> dinner&

[17:43] <TimToady> hmm, looks like the long form is also misbehaving

[17:43] *** Peter_R joined
[17:45] <TimToady> m: say &infix:<,>.prec

[17:45] <camelia> rakudo-moar 47ddca: OUTPUT«assoc => list, prec => g=␤»

[17:45] <GLRelia> rakudo-moar 066bec: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/DH2Qt_UjM0:1␤Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/DH2Qt_UjM0:1␤:prec("g="):assoc("list")␤»

[17:45] <TimToady> well, it says it's list associative

[17:49] <muraiki> does anyone have any advice for daemonizing a perl6 script?

[17:50] <hahainternet> what platform?

[17:50] <muraiki> ubuntu 14.04

[17:50] <hahainternet> a simple systemd unit file would do it for you in the 'correct' ubuntu-y way

[17:51] <muraiki> 14.04 is still on upstart, which I was giong to use, but I didn't know if there was perhaps a better way

[17:51] *** araujo joined
[17:51] *** araujo left
[17:51] *** araujo joined
[17:51] <hahainternet> i was /just/ about to ask that :)

[17:51] *** yqt left
[17:51] *** araujo left
[17:51] <muraiki> hehe :)

[17:51] <hahainternet> i realised 14.04 was a bit older than i thought

[17:51] <muraiki> a lot happens in a 1.5 years!

[17:51] <hahainternet> but yeah, there are lots of options but i prefer the 'simple' systemd approach

[17:54] *** MilkmanDan left
[18:05] *** kernel joined
[18:05] *** kernel is now known as Guest81400

[18:05] *** MilkmanDan joined
[18:08] *** Guest6532 left
[18:13] *** araujo joined
[18:15] *** Sqirrel joined
[18:16] *** arafatkamaal joined
[18:17] <arafatkamaal> Hi

[18:17] <arafatkamaal> a noob question

[18:17] <arafatkamaal> $ perl6 > my @a = 1, 2; 1 2 > say @a.elems 2 > say @a[10]   (Any) > 

[18:17] <arafatkamaal> shouldn't this be an exception?

[18:18] *** rurban left
[18:19] *** cgfbee left
[18:20] <laben> no, because it simply is not set. btw, if you assign, it automatically creates the memory slot. check autovivification

[18:21] <arafatkamaal> i get it, but I was trying to access something that didn't exist

[18:21] *** lucasb joined
[18:21] <ugexe> m:  my @a = 1, 2; 1 2 > say @a.elems 2 > say @a[10]

[18:21] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tMIwJwyIxj␤Two terms in a row␤at /tmp/tMIwJwyIxj:1␤------> 3my @a = 1, 2; 17⏏5 2 > say @a.elems 2 > say @a[10]␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»

[18:21] <GLRelia> rakudo-moar 066bec: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rmyErt_y2J␤Two terms in a row␤at /tmp/rmyErt_y2J:1␤------> 3my @a = 1, 2; 17⏏5 2 > say @a.elems 2 > say @a[10]␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»

[18:21] <ugexe> or do you mean the (Any) > should throw an exception

[18:21] <laben> m:  my @a = 1, 2; 1 2; say @a.elems; say @a[10]

[18:21] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/g5awu6DryG␤Two terms in a row␤at /tmp/g5awu6DryG:1␤------> 3my @a = 1, 2; 17⏏5 2; say @a.elems; say @a[10]␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤ …»

[18:21] <GLRelia> rakudo-moar 066bec: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KFd66JBuWU␤Two terms in a row␤at /tmp/KFd66JBuWU:1␤------> 3my @a = 1, 2; 17⏏5 2; say @a.elems; say @a[10]␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤ …»

[18:21] <laben> m:  my @a = 1, 2 say @a.elems; say @a[10]

[18:21] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZZFn7SkwuF␤Two terms in a row␤at /tmp/ZZFn7SkwuF:1␤------> 3my @a = 1, 27⏏5 say @a.elems; say @a[10]␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        state…»

[18:21] <GLRelia> rakudo-moar 066bec: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Ef0b3Czhbs␤Two terms in a row␤at /tmp/Ef0b3Czhbs:1␤------> 3my @a = 1, 27⏏5 say @a.elems; say @a[10]␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        state…»

[18:21] <laben> aargh

[18:21] <laben> m:  my @a = 1, 2; say @a.elems; say @a[10]

[18:21] <camelia> rakudo-moar 47ddca: OUTPUT«2␤(Any)␤»

[18:21] <GLRelia> rakudo-moar 066bec: OUTPUT«2␤Use of uninitialized value @a of type Any in string context  in block <unit> at /tmp/LaW8Ks804c:1␤␤»

[18:21] <arafatkamaal> That was copy pasted from the repl

[18:22] *** cgfbee joined
[18:22] <geekosaur> hm, LTA error from glr there

[18:22] <laben> i think he means that @a[10] should throw exception since it doesnt exists

[18:22] <arafatkamaal> yes

[18:23] <[Coke]> last batch run is a mixed bag, some improvements, some new failures.

[18:23] <geekosaur> perl6 is still perl; @a does not have a defined size so uninitialized values are undef ((Any) since it is also not typed)

[18:23] *** llfourn left
[18:23] <arafatkamaal> ok

[18:23] <laben> arafatkamaal: it doesnt because of autovivification. since you did not declare a size for it (not a common case), it automatically expands

[18:24] <arafatkamaal> so any list is basically of an unlimited size?

[18:24] <ugexe> my @a[10] (shaped arrays) will do what you want but its not implemented yet i dont think

[18:24] <arafatkamaal> ok

[18:24] <laben> @a is an Array. it is not of unlimited size, but can be prolonged how much you need/want

[18:24] <pink_mist> my @a = 1..Inf; #yes they are

[18:25] <[Coke]> m: my @a=1..Inf; say @a.WHAT # pedant.

[18:25] <camelia> rakudo-moar 47ddca: OUTPUT«(Array)␤»

[18:25] <GLRelia> rakudo-moar 066bec: OUTPUT«Cannot look up attributes in a type object␤  in block <unit> at /tmp/TtrkN57RCw:1␤␤»

[18:25] <laben> m: my @a = 1..5; say @a.elems; @a[20]; say @a.elems; @a[20] = 20; say @a.elems;

[18:25] <camelia> rakudo-moar 47ddca: OUTPUT«5␤5␤21␤»

[18:25] <GLRelia> rakudo-moar 066bec: OUTPUT«5␤5␤21␤»

[18:25] <laben> see ^^^

[18:25] <arafatkamaal> ok

[18:25] <[Coke]> pedant check passed, thoughI don't think GLR is right there.

[18:26] <laben> btw, why did panda switch to JSON::Fast? Now i need to actually fix that up for glr...

[18:27] <[Coke]> 516 failing tests remain on glr.

[18:28] <pink_mist> [Coke]: my "yes they are" was to arafatkamaal anyway, and he mentioned lists not arrays :P

[18:30] <arafatkamaal> my @a = 1 .. Inf;

[18:30] <arafatkamaal> say @a.elems

[18:30] <arafatkamaal> should give Inf?

[18:30] <arafatkamaal> or just run forever

[18:31] <lucasb> m: say class { method gist { 'oh' }; method Str { 'hai' } }

[18:31] <camelia> rakudo-moar 47ddca: OUTPUT«oh␤»

[18:31] <GLRelia> rakudo-moar 066bec: OUTPUT«hai␤»

[18:32] <rindolf> pink_mist: hi, sup?

[18:32] *** arnsholt left
[18:33] <pink_mist> evening rindolf .. been darn tired all day

[18:33] *** arnsholt joined
[18:34] <rindolf> pink_mist: ah, that sucks.

[18:34] <rindolf> pink_mist: do you know why?

[18:34] <pink_mist> no :/

[18:34] <rindolf> pink_mist: ah.

[18:34] <rindolf> pink_mist: :-(

[18:34] <rindolf> pink_mist: I'm going to hit the shower now.

[18:34] <rindolf> Bye.

[18:35] *** domidumont1 joined
[18:35] <TimToady> m: my &infix:<op> := &infix:<,>; say &infix:<op>.prec

[18:35] <camelia> rakudo-moar 47ddca: OUTPUT«assoc => list, prec => g=␤»

[18:35] <GLRelia> rakudo-moar 066bec: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/Vy0P9xFYSP:1␤Use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/Vy0P9xFYSP:1␤:prec("g="):assoc("list")␤»

[18:37] *** domidumont left
[18:39] <[Coke]> m: my @a=1..Inf; say @a.elems; # arafatkamaal 

[18:39] <camelia> rakudo-moar 47ddca: OUTPUT«Inf␤»

[18:39] <GLRelia> rakudo-moar 066bec: OUTPUT«Cannot .elems a lazy list␤  in block <unit> at /tmp/3hE79y_dX3:1␤␤Actually thrown at:␤  in block <unit> at /tmp/3hE79y_dX3:1␤␤»

[18:39] <[Coke]> GLR is the new way.

[18:40] <arafatkamaal> on my rakudo installation it just runs forever, will install from the glr branch

[18:40] <arafatkamaal> what should happen if @b = Inf .. 1;

[18:43] *** MilkmanDan left
[18:44] *** Peter_R left
[18:45] *** arafatkamaal left
[18:45] *** MilkmanDan joined
[18:46] <dalek> rakudo/glr: c5086d7 | TimToady++ | src/core/Enum.pm:

[18:46] <dalek> rakudo/glr: fix Pair.perl uninit bug

[18:46] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/c5086d7a05

[18:46] <[Coke]> you can't sequence backwards.

[18:46] <[Coke]> m: my @a = 3..1; say @a.perl;

[18:46] <GLRelia> rakudo-moar 066bec: OUTPUT«[]␤»

[18:46] <camelia> rakudo-moar 47ddca: OUTPUT«[]<>␤»

[18:47] *** yqt joined
[18:47] <FROGGS> m: use Test; my $should_ret_empty_list1 = sub { return; 1 }; is $should_ret_empty_list1().elems, 0, "our sub returned an empty list (1)";

[18:47] <GLRelia> rakudo-moar 066bec: OUTPUT«ok 1 - our sub returned an empty list (1)␤»

[18:47] <camelia> rakudo-moar 47ddca: OUTPUT«ok 1 - our sub returned an empty list (1)␤»

[18:47] <FROGGS> I think this test is bogus

[18:47] *** Peter_R joined
[18:48] <lucasb> m: sub f(|) { 42 }; say 2 &f 3

[18:48] <camelia> rakudo-moar 47ddca: OUTPUT«all(2, 42)␤»

[18:49] <GLRelia> rakudo-moar 066bec: OUTPUT«(timeout)»

[18:49] <lucasb> ^^ I think this should be an error, right? It should not call f, and it has nothing to do with junctions

[18:49] <[Coke]> lucasb: it's parsing the & as a junction combiner.

[18:49] <colomon> [Coke]: you can’t range backwards.  you can sequence however you want, if you ask nicely.

[18:50] <[Coke]> whoops, you'd think I'd know the difference after 10 years.

[18:50] <TimToady> m: use Test; my $should_ret_empty_list1 = sub { return slip; 1 }; is $should_ret_empty_list1().elems, 0, "our sub returned an empty list (1)";

[18:50] <GLRelia> rakudo-moar 066bec: OUTPUT«ok 1 - our sub returned an empty list (1)␤»

[18:50] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CbcfF8mSbM␤Undeclared routine:␤    slip used at line 1. Did you mean 'flip', 'skip'?␤␤»

[18:52] *** domidumont1 left
[18:53] <lucasb> [Coke]: oh, understood. It is parsing as '2 & f(3)'

[18:54] <lucasb> I was seeing '&f' as a single token and as expecting a TTIAR error

[18:54] <lucasb> *was

[18:59] *** muraiki left
[19:04] *** Peter_R left
[19:06] *** Peter_R joined
[19:06] <FROGGS> hmpf

[19:07] <FROGGS> and now I don't know if return() should return Nil, Empty or Slip

[19:07] <FROGGS> $ perl6 -e 'say Empty.elems, Nil.elems, Slip.elems'

[19:07] <FROGGS> 011 # locally

[19:07] <FROGGS> m: say Empty.elems, Nil.elems, Slip.elems

[19:07] <GLRelia> rakudo-moar c5086d: OUTPUT«000␤»

[19:07] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MqfB4kAuRk␤Undeclared name:␤    Slip used at line 1␤␤»

[19:07] <FROGGS> m: say Empty.elems, Nil.elems

[19:07] <camelia> rakudo-moar 47ddca: OUTPUT«00␤»

[19:07] <GLRelia> rakudo-moar c5086d: OUTPUT«00␤»

[19:08] <lucasb> m: sub f {}; say @ = f

[19:08] <camelia> rakudo-moar 47ddca: OUTPUT«(Any)␤»

[19:08] <GLRelia> rakudo-moar c5086d: OUTPUT«(Any)␤»

[19:08] <FROGGS> $ perl6 -e 'say Empty.elems, Nil.elems, Slip.new.elems'

[19:08] <FROGGS> 010

[19:08] <lucasb> oops, sorry

[19:10] <dalek> rakudo/glr: f3d060e | TimToady++ | src/core/Array.pm:

[19:10] <dalek> rakudo/glr: only add comma if single array elem is iterable

[19:10] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/f3d060e997

[19:10] <dalek> roast/glr: 485af56 | FROGGS++ | S04-statements/return.t:

[19:10] <dalek> roast/glr: use non-deprecated isa-ok

[19:10] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/485af568ce

[19:13] <rindolf> FROGGS: hi! How was dinner yesterday?

[19:14] <FROGGS> rindolf: I don't remember ó.ò

[19:14] <rindolf> FROGGS: ah.

[19:14] *** Ven joined
[19:15] <jdv79> rindolf: do you do any p6 stuff?

[19:15] <rindolf> jdv79: a little - Project Euler/etc.

[19:15] <rindolf> jdv79: at the perl6-examples repository.

[19:15] <timotimo> no lol! no project euler!

[19:16] <laben> i still am not sure of this one-arg rule, why does [{a => 1, b => 1}] transform into [a => 1, b=> 2] instead of {a => 1, b =>2} ?

[19:16] <rindolf> timotimo: PE is love! PE is life! ;-)

[19:16] <timotimo> ban he!

[19:16] <skids> laben: {...} is the one-arg for [...]

[19:17] <FROGGS> okay... now I understand that Empty is not much more than Slip.new

[19:17] <laben> m: sub foo(\a) { dd a }; foo([{a => 1, b => 2}])

[19:17] <camelia> rakudo-moar 47ddca: OUTPUT«$ = [{:a(1), :b(2)}]␤»

[19:17] <GLRelia> rakudo-moar f3d060: OUTPUT«[:a(1), :b(2)]␤»

[19:18] <skids> Is Empty even staying?

[19:18] <timotimo> what's our current stance on how that's supposed to work? what laben just wrote?

[19:18] <timotimo> with a dollar sign?

[19:18] <FROGGS> skids: perhaps as Sugar...

[19:19] <skids> I'm surmising from the "GLRR" commit that it's been decided you need to itemize.

[19:19] <FROGGS> m: sub foo(\a) { dd a }; foo([${a => 1, b => 2}])

[19:19] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/7gsHX1U9ZJ␤Unsupported use of ${a => 1, b => 2}; in Perl 6 please use $(a => 1, b => 2)␤at /tmp/7gsHX1U9ZJ:1␤------> 3foo(\a) { dd a }; foo([${a => 1, b => 2}7⏏5])␤»

[19:19] <GLRelia> rakudo-moar f3d060: OUTPUT«[{:a(1), :b(2)},]␤»

[19:19] <skids> m: sub foo(\a) { dd a }; foo($[${a => 1, b => 2}])

[19:19] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/T6hLavoSNh␤Unsupported use of ${a => 1, b => 2}; in Perl 6 please use $(a => 1, b => 2)␤at /tmp/T6hLavoSNh:1␤------> 3oo(\a) { dd a }; foo($[${a => 1, b => 2}7⏏5])␤»

[19:19] <GLRelia> rakudo-moar f3d060: OUTPUT«[{:a(1), :b(2)},]␤»

[19:20] <skids> m: sub foo(\a) { dd a }; foo($[{a => 1, b => 2}])

[19:20] <camelia> rakudo-moar 47ddca: OUTPUT«$v = Any␤»

[19:20] <GLRelia> rakudo-moar f3d060: OUTPUT«[:a(1), :b(2)]␤»

[19:20] <rangerprice> i thing that Rust will be my preferred language after Perl

[19:21] *** bin_005 joined
[19:22] <skids> m: sub foo(\a) { dd a }; foo($[$[a => 1, b => 2]])

[19:22] <camelia> rakudo-moar 47ddca: OUTPUT«Method 'Int' not found for invocant of class 'Pair'␤  in block <unit> at /tmp/QezSscG3tw:1␤␤»

[19:22] <GLRelia> rakudo-moar f3d060: OUTPUT«[[:a(1), :b(2)],]␤»

[19:23] <timotimo> ich habe mir "birdemic" 1 & 2 empfehlen lassen

[19:23] <timotimo> ww

[19:25] <laben> m: sub foo(\a) { dd a }; foo([%{a => 1, b => 2}])

[19:25] <GLRelia> rakudo-moar f3d060: OUTPUT«[:a(1), :b(2)]␤»

[19:25] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/WlWIJijYdI␤Unsupported use of %{a => 1, b => 2}; in Perl 6 please use %(a => 1, b => 2)␤at /tmp/WlWIJijYdI:1␤------> 3foo(\a) { dd a }; foo([%{a => 1, b => 2}7⏏5])␤»

[19:25] <laben> m: sub foo(\a) { dd a }; foo([{a => 1, b => 2},])

[19:25] <camelia> rakudo-moar 47ddca: OUTPUT«$ = [{:a(1), :b(2)}]␤»

[19:25] <GLRelia> rakudo-moar f3d060: OUTPUT«[{:a(1), :b(2)},]␤»

[19:25] <tadzik> soo, do we have a list of user-facing changes in glr?

[19:25] <tadzik> like a porting guideline?

[19:26] <laben> m: sub foo(\a) { dd a }; foo([{a => 1, b => 2},].elems)

[19:26] <camelia> rakudo-moar 47ddca: OUTPUT«1␤»

[19:26] <GLRelia> rakudo-moar f3d060: OUTPUT«1␤»

[19:27] <timotimo> like a "Great Refactoring List"?

[19:28] <tadzik> yes!

[19:28] <tadzik> from another channel: [Perl is] a quantum superposition of everyone's favourite language

[19:30] *** khw left
[19:30] <colomon> jnthn:                 take @result.map(-> $x { $x }).list;

[19:30] <colomon> did NOT work.  Same fail as before

[19:30] <laben> timotimo: here is it a fix for JSON::Fast tests https://gist.github.com/6d4b4539b45368d70058

[19:31] <nine> m: my @a = <a b c d e f>; say @a[[3, 4], 0,].perl;

[19:31] <camelia> rakudo-moar 47ddca: OUTPUT«("c", "a")␤»

[19:31] <GLRelia> rakudo-moar f3d060: OUTPUT«(("d", "e"), "a")␤»

[19:32] <nine> m: my @a = <a b c d e f>; say @a[[3, 4]].perl;

[19:32] <GLRelia> rakudo-moar f3d060: OUTPUT«("d", "e")␤»

[19:32] <camelia> rakudo-moar 47ddca: OUTPUT«"c"␤»

[19:33] <nine> m: my @a = <a b c d e f>; say @a[$[3, 4]].perl;

[19:33] <camelia> rakudo-moar 47ddca: OUTPUT«Indexing requires an instance, tried to do: @a[ (Any) ]␤  in block <unit> at /tmp/bkatXDUy3b:1␤␤»

[19:33] <GLRelia> rakudo-moar f3d060: OUTPUT«"c"␤»

[19:34] <laben> m: my @a = <a b c d e f>; my @b = [3, 4]; say @a[@b].perl;

[19:34] <camelia> rakudo-moar 47ddca: OUTPUT«("c",)␤»

[19:34] <GLRelia> rakudo-moar f3d060: OUTPUT«("d", "e")␤»

[19:34] <laben> m: my @a = <a b c d e f>; my @b = $[3, 4]; say @a[@b].perl;

[19:34] <camelia> rakudo-moar 47ddca: OUTPUT«Indexing requires an instance, tried to do: @a[ (Any) ]␤  in block <unit> at /tmp/4CT76ieaNN:1␤␤»

[19:34] <GLRelia> rakudo-moar f3d060: OUTPUT«("c")␤»

[19:37] <laben> tadzik: panda/master is now the most updated branch, right? did you merge glr into master?

[19:37] <tadzik> laben: I did not

[19:37] <tadzik> was glr merged into rakudo master?

[19:37] <tadzik> I mean, nom :)

[19:37] <tadzik> laben: I was developing on nom all day

[19:37] <laben> ok, so i will merge it in my repo manually

[19:37] <tadzik> oh, thank you, that'd be sweet

[19:38] <laben> i meant locally, or do you want me to push upstream?

[19:38] <dalek> rakudo/glr: ba5494a | TimToady++ | src/Perl6/ (2 files):

[19:38] <dalek> rakudo/glr: introduce my \term before initializer is parsed

[19:38] <dalek> rakudo/glr: 

[19:38] <dalek> rakudo/glr: (Still doesn't work, since we haven't really closed the definitional loop yet.)

[19:38] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/ba5494a345

[19:39] <laben> omfg a ton of conflicts, :(

[19:39] <tadzik> :(

[19:39] <tadzik> sorry

[19:39] <tadzik> I may have changed whitespaces in places :(

[19:40] <tadzik> totally didn't think of that

[19:40] <timotimo> laben: is/isn't that going to be [${...}] in the future?

[19:41] <dalek> roast/glr: 9081d01 | (Stefan Seifert)++ | S (2 files):

[19:41] <dalek> roast/glr: Adjust flatteing.t to new GLRR semantics

[19:41] <dalek> roast/glr: 

[19:41] <dalek> roast/glr: In a nutshell:

[19:41] <dalek> roast/glr: * there is no implicit flattening

[19:41] <dalek> roast/glr: * unless it's a container passed as single argument to a method or function

[19:41] <dalek> roast/glr: * however, itemization prevents flattening even there

[19:41] <dalek> roast/glr: 

[19:41] <dalek> roast/glr: foo(@flattens)

[19:41] <dalek> roast/glr: foo($@doesnt-flatten)

[19:41] <dalek> roast/glr: foo(@we, @do, @no, @flatten)

[19:41] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/9081d01282

[19:41] <timotimo> flat teing?

[19:41] <laben> timotimo: ah is it? for now that does not work, even throws

[19:41] <timotimo> mhh, i lost track :S

[19:42] <laben> m: sub foo(\a) { dd a }; foo([$%{a => 1, b => 2}])

[19:42] <GLRelia> rakudo-moar f3d060: OUTPUT«[{:a(1), :b(2)},]␤»

[19:42] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/9l0q3FLfS8␤Unsupported use of %{a => 1, b => 2}; in Perl 6 please use %(a => 1, b => 2)␤at /tmp/9l0q3FLfS8:1␤------> 3oo(\a) { dd a }; foo([$%{a => 1, b => 2}7⏏5])␤»

[19:43] <laben> m: sub foo(\a) { dd a }; foo([${a => 1, b => 2}])

[19:43] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KcB_WqMdsZ␤Unsupported use of ${a => 1, b => 2}; in Perl 6 please use $(a => 1, b => 2)␤at /tmp/KcB_WqMdsZ:1␤------> 3foo(\a) { dd a }; foo([${a => 1, b => 2}7⏏5])␤»

[19:43] <GLRelia> rakudo-moar f3d060: OUTPUT«[{:a(1), :b(2)},]␤»

[19:43] <laben> oh now it works

[19:43] <laben> but cannot do, as it breaks nom-living perl6ers

[19:44] *** virtualsue joined
[19:46] <TimToady> m: my $a = 1; my $b = 2; $a = [1,2,($a, $b)]; say $a.perl.EVAL

[19:46] <camelia> rakudo-moar 47ddca: OUTPUT«1 2 1 2␤»

[19:46] <GLRelia> rakudo-moar ba5494: OUTPUT«12((Mu) 2)␤»

[19:47] <timotimo> hm, so it displays it with a trailing comma ... maybe that's how it's going to stay?

[19:47] <TimToady> progress, doesn't blow up, but we need a way of delaying evaluation of terms that are being defined until the binding

[19:48] <jdv79> masak: were you working on fixing eqv?  i vaguely remember you were vocal about it.

[19:48] <TimToady> timotimo: it's hard to do it otherwise

[19:48] <TimToady> you end up with things like [$1..10]

[19:48] <skids> GLRR++ now I know what the heck I'm supposed to be doing :-)

[19:48] <timotimo> OK, if that's how it's going to stay, i'll merge laben's pull request for JSON::Fast

[19:49] *** Peter_R left
[19:49] <TimToady> trailing comma will continue to work, anyway, even if it's not the preferred form for arrays

[19:50] <timotimo> m: OK

[19:50] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/A05g_4Id2b␤Undeclared name:␤    OK used at line 1␤␤»

[19:50] <GLRelia> rakudo-moar ba5494: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ocaa_B24sY␤Undeclared name:␤    OK used at line 1␤␤»

[19:50] *** telex left
[19:50] <colomon> jnthn: https://gist.github.com/colomon/14fab50530ef7011b316

[19:50] <dalek> rakudo/glr: e26a731 | colomon++ | src/core/List.pm:

[19:50] <dalek> rakudo/glr: Fix for wonky combinations bug.

[19:50] <dalek> rakudo/glr: 

[19:50] <dalek> rakudo/glr: You've got to copy that array before returning it.  Um, for some

[19:50] <dalek> rakudo/glr: reason.

[19:50] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/e26a731173

[19:50] <dalek> rakudo/glr: b90cac5 | colomon++ | src/core/List.pm:

[19:50] <dalek> rakudo/glr: Check in golfed demo of the old combinations bug.

[19:50] <dalek> rakudo/glr: 

[19:50] <dalek> rakudo/glr: This is not intended to be a long term part of Rakudo.  This

[19:50] <dalek> rakudo/glr: is just for the purpose of debugging the insanity.

[19:50] <timotimo> oops, the m: stayed

[19:50] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/b90cac523e

[19:51] <nine> 68 failing now, official count!

[19:51] <colomon> nine: was that counting my patch above?  that fixed another file.

[19:51] <skids> \o/

[19:51] <tadzik> \o/

[19:52] <jdv79> nine++

[19:52] <nine> colomon: ah, I'm lagging :) Rerunning...

[19:52] <colomon> nine++

[19:52] <laben> what is this GLRR you all speak of?

[19:52] <timotimo> moving the goalpost again :)

[19:52] *** telex joined
[19:52] <dalek> doc: 33dc2ec | paultcochrane++ | lib/Type/Exception.pod:

[19:52] <dalek> doc: Correct headings to allow die and warn to show up in search

[19:52] <dalek> doc: review: https://github.com/perl6/doc/commit/33dc2ec0d4

[19:52] <timotimo> obviously it's not that "Great" if it only breaks so few tests

[19:52] <nine> Great List Refactor Refinement :)

[19:52] <jdv79> what happens when the fail count hits 0j?

[19:52] <jdv79> *0

[19:53] <colomon> jdv79: ship it!

[19:53] <skids> It prevented the slaughter of hundreds of poor tests :-)

[19:53] * TimToady --> horizontality

[19:53] *** Peter_R joined
[19:54] <laben> GLR Refinement? is that a soviet for Perl6 O.o?

[19:54] <colomon> At some point someone was claiming that one of the modules completely messed up panda when you installed it.  Anyone remember what module it was?

[19:55] <masak> jdv79: yes, I was involved. I posted a gist about it. it's in today's backlog.

[19:55] <jdv79> oh...

[19:55] <timotimo> laben: applied the patch and at the same time pushed some error reporting improvements i had uncommitted locally

[19:56] <masak> jdv79: here it is: https://gist.github.com/masak/b694a4050f4e91bd254c

[19:56] <masak> jdv79: note that this gist documents things the way I'd like them, not the way things are now

[19:56] <jdv79> oh, before bedtime reading - thanks

[19:57] <masak> I think I saw in the backlog today that TimToady++ was doing something with .perl and cycles

[19:58] <skids> TimToady++ tackling bears.

[19:59] *** arafatkamaal joined
[20:00] <timotimo> Your branch is behind 'origin/glr' by 165 commits, and can be fast-forwarded.

[20:00] <tadzik> hah!

[20:00] <timotimo> big ups

[20:01] <arafatkamaal> https://gist.github.com/anonymous/3c294b28eda4e10aa7f8

[20:01] <nine> 67 failing indeed!

[20:01] *** darutoko left
[20:01] <arafatkamaal> Boolean values like 'True' and 'False' can be variable names

[20:03] <timotimo> arafatkamaal: yup, we don't reserve these words

[20:03] <tadzik> so, on GLR my $c = self.bless(:$height, :$width, :$p, :$f); results with Method 'gimme' not found for invocant of class 'Seq'

[20:03] <tadzik> does that ring a bell, or am I missing something obvious?

[20:03] <nine> tadzik: there's no gimme anymore in rakudo's source code

[20:04] <moritz> well, Mu has a gimme method that throws an error

[20:04] *** arafatkamaal left
[20:04] <moritz> so you should never get a "Method 'gimme' not found" error

[20:04] <timotimo> for some reason my stage parse has gone above 60 seconds :|

[20:05] <tadzik> so apparently I'm not actually on glr

[20:05] <moritz> tadzik: but nom doesn't have a Seq type

[20:05] <moritz> tadzik: so something with your rakudo is *very* wonky

[20:05] <tadzik> (╯°□°）╯︵ ┻━┻

[20:06] *** mr-foobar joined
[20:07] <timotimo> congratulations!

[20:07] <dalek> perl6-roast-data: b23c606 | coke++ | / (2 files):

[20:07] <dalek> perl6-roast-data: another glr run for 'today'

[20:07] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b23c6066d4

[20:08] <dalek> perl6-roast-data: fcf7109 | coke++ | / (2 files):

[20:08] <dalek> perl6-roast-data: another glr run for 'today'

[20:08] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/fcf710965b

[20:08] <timotimo> ah!

[20:08] <timotimo> i have a moarvm --optimize=0

[20:09] <nine> skids: thanks for your work on push and unshift. It helped showing what we really need to do.

[20:10] <dalek> roast/glr: 0fd48d2 | (Stefan Seifert)++ | S02-types/array.t:

[20:10] <dalek> roast/glr: Need to flatten explicitly in S02-types/array.t

[20:10] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/0fd48d2881

[20:12] *** lucasb left
[20:14] *** brrt joined
[20:15] <skids> nine: np glad it worked out.

[20:15] *** nebuchadnezzar left
[20:15] *** nebuchadnezzar joined
[20:16] <dalek> rakudo/glr: 268ca08 | lizmat++ | / (2 files):

[20:16] <dalek> rakudo/glr: Make "done" a full supply citizen

[20:16] <dalek> rakudo/glr: 

[20:16] <dalek> rakudo/glr: Tomorrow, Jonathan is going to give yet another installment of his latest

[20:16] <dalek> rakudo/glr: async presentation.  We want people to use the new goodies as soon as

[20:16] <dalek> rakudo/glr: possible and not have to change their async code again.  So I thought it

[20:16] <dalek> rakudo/glr: would be a good idea to rename supply-emit and supply-done to just "emit"

[20:16] <dalek> rakudo/glr: and "done".  This then interferes with the "done" from Test.pm (which I

[20:16] <dalek> rakudo/glr: recently deprecated).  It seemed like a good time, during this upheaval,

[20:16] <dalek> rakudo/glr: to at least make this work in the GLR branch.  So "done" is eradicated from

[20:16] <dalek> rakudo/glr: Test.pm (please use "done-testing" instead if you must: you should probably

[20:16] <dalek> rakudo/glr: use "plan" anyway).

[20:16] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/268ca0802e

[20:17] <tadzik> from done_testing to done to done-testing :)

[20:17] <tadzik> another 200 PRs to all my modules :P

[20:17] <dalek> roast/glr: d542bef | lizmat++ | S17-supply/syntax.t:

[20:17] <dalek> roast/glr: Make the changes of 268ca0802e6106de2880ddf in glr

[20:17] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/d542bef70b

[20:19] *** virtualsue left
[20:20] *** llfourn joined
[20:21] <jdv79> How about the idea of not polluting namespaces with exports?  Test::done is pretty short and easy.

[20:21] * skids spares tadzik from PRs on Grammar::BNF.

[20:21] <nine> jdv79: Test exports so many functions already. The one won't make a difference...

[20:21] <jdv79> or .done

[20:22] *** xfix left
[20:22] <tadzik> skids: <3

[20:22] <colomon> lizmat: that was a harmless bug!  

[20:22] <colomon> ;)

[20:23] <jdv79> i guess in context.  but in general seems kinda lame.

[20:23] <lizmat> I *squashed* it!

[20:23] <tadzik> skids: ooh

[20:23] <lizmat> well, I guess I could leave sub done in there, just not export it

[20:23] <tadzik> but now it doesn't work on nom anymore

[20:23] <lizmat> but then people would need to change their test anyway

[20:23] <tadzik> maybe we should just make them use plan()

[20:23] <skids> Oh, nom doesn't have done-testing yet?

[20:24] <skids> I'll do that then.

[20:24] <lizmat> and changing it to done-testing sort of matches the P5 experience anyway (I'm told)

[20:24] <tadzik> nope, still on old-done() :)

[20:24] <jdv79> really?  we've already had the plan vs done debate in the p5 world.

[20:24] <tadzik> we used to have done_testing in p6 world

[20:24] <tadzik> then we changed that to done() because done_testing was RONG

[20:24] *** llfourn left
[20:24] <lizmat> well, that was before my time...

[20:25] <tadzik> I don't remember the actual reasonong

[20:25] <tadzik> or ning

[20:25] <tadzik> there's always Test::done() :)

[20:26] <colomon> Test:I-really-think-I'm-done-now

[20:27] <ugexe> 1;

[20:27] <moritz> Test::ichhabefertig

[20:27] <skids> Test::mike-drop

[20:27] <tadzik> or let's use ]

[20:27] <tadzik> like bash

[20:27] <lizmat> tadzik: done was implemented by moritz in 6a9a38f3b4d322a3ea93b

[20:27] <colomon> skids: +1

[20:27] <lizmat> on the last day of 2010

[20:27] <tadzik> hm

[20:27] <tadzik> I'm that old? :o

[20:30] <tadzik> http://blogs.perl.org/users/byterock/2015/08/my-first-perl6-part-the-first.html byterock++'s notes fromthe hackathon

[20:30] <lizmat> yeah, byterock++

[20:31] *** larion joined
[20:31] <dalek> specs: f3822a7 | lizmat++ | S99-glossary.pod:

[20:31] <dalek> specs: Add GLRR lemma

[20:31] <dalek> specs: review: https://github.com/perl6/specs/commit/f3822a7f7d

[20:32] *** CQ joined
[20:32] <tadzik> I guess that looking at roast commits would be a good way to write down GRL?

[20:33] <lizmat> guess so

[20:33] *** TEttinger joined
[20:35] *** kaare__ left
[20:36] <ugexe> this 2 hour time limit on macincloud is brutal

[20:36] <timotimo> .o( is that a video game? )

[20:37] <ugexe> its a OSX VM company

[20:37] <timotimo> mhm

[20:37] <timotimo> i wanted to build a website called "macontisch" a long time ago

[20:37] <timotimo> which is a pun on "mac on table" in german

[20:40] <ugexe> where im from it we had the phrase `crackentosh` which referred to the phenomenon of crack addicted people to always happen to have an apple laptop for sale (obviously stolen) 

[20:40] <nine> m: my @arr = 1, 2, 3; my ($x, @arr) = @arr; say @arr.perl;

[20:40] <camelia> rakudo-moar 47ddca: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lxhjImXpRp␤Redeclaration of symbol @arr␤at /tmp/lxhjImXpRp:1␤------> 3my @arr = 1, 2, 3; my ($x, @arr7⏏5) = @arr; say @arr.perl;␤    expecting any of:␤        shape declaration␤»

[20:40] <GLRelia> rakudo-moar 268ca0: OUTPUT«5===SORRY!5=== Error while compiling /tmp/eDigtLlrG2␤Redeclaration of symbol @arr␤at /tmp/eDigtLlrG2:1␤------> 3my @arr = 1, 2, 3; my ($x, @arr7⏏5) = @arr; say @arr.perl;␤    expecting any of:␤        shape declaration␤»

[20:40] <nine> m: my @arr = 1, 2, 3; my $x; ($x, @arr) = @arr; say @arr.perl;

[20:40] <camelia> rakudo-moar 47ddca: OUTPUT«[2, 3]<>␤»

[20:40] <GLRelia> rakudo-moar 268ca0: OUTPUT«[2, 3]␤»

[20:41] *** rurban joined
[20:42] *** colomon left
[20:42] *** itz joined
[20:42] <dalek> rakudo/glr: c944e43 | (Stefan Seifert)++ | src/core/List.pm:

[20:42] <dalek> rakudo/glr: Fix list assignment evaluating the RHS too late

[20:42] <dalek> rakudo/glr: 

[20:42] <dalek> rakudo/glr: Fixes ($a, $b) = ($b, $a)

[20:42] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/c944e43b21

[20:44] <laben> tadzik: i have resolved the merge conflicts and pushed to my fork of panda, what do now? want a PR?

[20:45] <lizmat> m: say Hash[Any].new( <a b c>, 42 ).perl

[20:45] <camelia> rakudo-moar 47ddca: OUTPUT«Hash[Any].new("a" => "b", "c" => 42)␤»

[20:45] <GLRelia> rakudo-moar 268ca0: OUTPUT«Hash[Any].new(:a("b"), :c(42))␤»

[20:46] <lizmat> I think in the GLR, the latter is wrong

[20:46] <tadzik> laben: yeah, sure :)

[20:46] <lizmat> m: say Hash[Any].new( <a b c> => 42 ).perl

[20:46] <camelia> rakudo-moar 47ddca: OUTPUT«Type check failed in binding key; expected 'Str' but got 'Parcel'␤  in block <unit> at /tmp/nCL8U3nmev:1␤␤»

[20:46] <GLRelia> rakudo-moar 268ca0: OUTPUT«Type check failed in binding key; expected 'Str' but got 'List'␤  in block <unit> at /tmp/4oK1OX1jbq:1␤␤»

[20:46] <laben> tadzik: https://github.com/tadzik/panda/pull/208

[20:47] <tadzik> awesome, thanks!

[20:47] <laben> i hope nothing broke panda/glr with all the commits

[20:47] <tadzik> that's not all that much :)

[20:48] <tadzik> I like it

[20:48] <tadzik> I thought it'll be very mysterious and strange

[20:48] <laben> yea it turned out i had to delete a ton of lines and that's basically it

[20:48] <tadzik> awesome

[20:48] <tadzik> well done :)

[20:48] <tadzik> do you know if it's backwards compatible with nom?

[20:48] <laben> our work up till now it sure was

[20:49] <laben> our = mine + nine++

[20:49] <lizmat> m: BagHash.new(1, [ foo => 10, bar => 17, baz => 42, santa => 0 ]).perl.say

[20:49] <camelia> rakudo-moar 47ddca: OUTPUT«([:foo(10), :bar(17), :baz(42), :santa(0)]=>1,1=>1).BagHash␤»

[20:49] <GLRelia> rakudo-moar 268ca0: OUTPUT«(:foo(10)=>1,1=>1,:santa(0)=>1,:bar(17)=>1,:baz(42)=>1).BagHash␤»

[20:50] <skids> lizmat: probably a flat or *@ where a **@ wants to be.

[20:50] <lizmat> skids: spot on

[20:50] <tadzik> laben: perfect :) I'll do some sanity checks and merge it tomorrow morning

[20:50] <laben> i did not test the new version of panda/nom before merging nor did i test on the newest glr

[20:50] <tadzik> alright

[20:50] *** hudo joined
[20:51] <laben> you made a ton of commits

[20:51] <laben> O.o newest rakudo/glr got this: t/01-sanity/99-test-basic.t .......... All 71 subtests passed         (less 4 skipped subtests: 67 okay)

[20:51] <laben> smells like trouble

[20:53] <geekosaur> skipped presumably means either missing prerequisite or known issue stubbed out

[20:54] <laben> but it was working up till some hours ago

[20:55] <masak> wohoo! it seems I accidentally made my first talk deliverable! :)

[20:55] <masak> (in that it now contains 0 TODOs)

[20:55] *** dalek left
[20:56] *** dalek joined
[20:56] *** ChanServ sets mode: +v dalek

[20:57] *** colomon joined
[20:57] <skids> 99-test-basic.t tests Test, intentionally todoing and skipping things.  So there would have had to have been some finagling to not report skips.

[20:58] *** Ven left
[20:58] *** skids left
[20:58] <hudo> it seems that $suchbegriff is not initialized

[20:59] <hudo> although it contains a string...

[21:02] <dalek> roast/glr: 53c00f1 | (Stefan Seifert)++ | S02-types/nested_arrays.t:

[21:02] <dalek> roast/glr: We don't auto flatten nested Lists anymore

[21:02] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/53c00f1c52

[21:02] *** bin_005 left
[21:03] *** dwarring joined
[21:04] *** bin_005 joined
[21:04] *** colomon left
[21:08] *** FROGGS left
[21:08] *** brrt left
[21:10] *** colomon joined
[21:12] *** FROGGS joined
[21:12] <FROGGS> m: my @a = 1 .. 5; @a[0,1] = @a[1,0]; say @a

[21:12] <camelia> rakudo-moar 47ddca: OUTPUT«2 1 3 4 5␤»

[21:12] <GLRelia> rakudo-moar c944e4: OUTPUT«21345␤»

[21:12] <laben> tadzik: found out that on newest glr, panda need another slight fix, want me to add it to the merge PR or make another?

[21:13] <FROGGS> nine++ # I was about fixing that earlier, but would not have found the patch me thinks...

[21:13] <tadzik> laben: same one is fine

[21:17] <laben> tadzik: and pushed, now to try bootstrap...

[21:18] <FROGGS> m: sub bare_return { return }; my $s = "foo"; $s = bare_return(); say $s.defined

[21:18] <GLRelia> rakudo-moar c944e4: OUTPUT«False␤»

[21:18] <camelia> rakudo-moar 47ddca: OUTPUT«False␤»

[21:18] <FROGGS> m: sub bare_return { return }; my $s = "foo"; $s = bare_return(); say $s.WHAT

[21:18] <camelia> rakudo-moar 47ddca: OUTPUT«(Any)␤»

[21:18] <GLRelia> rakudo-moar c944e4: OUTPUT«Use of uninitialized value of type Any in string context  in block <unit> at /tmp/iKLXU0QTaa:1␤␤»

[21:19] <FROGGS> hmmm

[21:19] <nine> Official count: 64 spec test files failing

[21:19] <FROGGS> when I make 'return;' returning an Empty, it will be a defined Slip when assigning it to a scalar

[21:20] *** llfourn joined
[21:20] <FROGGS> wow

[21:20] <FROGGS> 64 is a nice number

[21:20] <timotimo> it won't be as nice again until we hit 32 :(

[21:20] <FROGGS> 42 is awesome too

[21:21] <timotimo> mhh, true

[21:21] <FROGGS> true indeed

[21:22] <timotimo> mhh, defined

[21:22] *** cognominal left
[21:23] *** itz left
[21:23] *** rindolf left
[21:23] *** virtualsue joined
[21:24] *** llfourn left
[21:26] *** larion left
[21:27] <laben> tadzik: why does bootstrap install the modules in <site> but panda lib and bin in $prefix?

[21:28] <lizmat> hotel&

[21:28] *** lizmat left
[21:29] *** trnh joined
[21:30] <laben> what's more, why does it not install the .moarvm files anymore for modules but does so for panda?

[21:32] <timotimo> because precompilation is gone from panda

[21:32] <timotimo> demon be gone!

[21:32] <timotimo> foul, foul precompilation!

[21:32] <jdv79> interesting question - could the various vm's gen the precomp files themselves?

[21:33] <jdv79> either if missing or on dep match fail?  that seems like a better idea.

[21:33] <FROGGS> jdv79: rakudo potentially should do that (automagically)

[21:33] <jdv79> *vms

[21:33] <jdv79> i have no idea why i inserted a '

[21:33] <laben> seems it's not gone away completely as panda does precomp itself, as i just said

[21:33] <jdv79> so just a NYI?

[21:33] <timotimo> yes, NYI

[21:33] <jdv79> neat

[21:34] <timotimo> precompiled files were supposed to only be a cache

[21:34] <laben> FROGGS: and where would rakudo put the precomp'd file then?

[21:34] <FROGGS> laben: into a CUR

[21:34] <timotimo> but nowadays the presence of a "wrong" precompiled file causes execution to fail/bail out

[21:34] <timotimo> that's obviously wrong

[21:34] <timotimo> if that's encountered, the vm should just delete the precompiled file that caused the problem and compile anew

[21:34] * timotimo disappears into bed

[21:35] <laben> CUR is the CompUnitRepo, right? where would it be located physically?

[21:35] <laben> i mean computer-physically

[21:35] <timotimo> it's the CompUnitRepo, but it's only a role

[21:35] <timotimo> you're interested in CompUnitRepo::Installation i think

[21:35] <ugexe> can you precompile just 1 file without having to precompile everything that is connected to it?

[21:35] <timotimo> that's the one with the serialized database for installed things

[21:35] <laben> this whole thing smells like incredible trouble for packaging

[21:36] <timotimo> ugexe: depends on what you mean with "connected to it"

[21:36] <ugexe> anything up stream might have been updated or deleted, and downstream would depend on it

[21:36] <FROGGS> laben: the CUR decides how that happens, there is a database like CURLI and a P5/panda like CURLF

[21:36] <timotimo> things a file depends on have to be compiled first, of course. and then they ought to be precompiled as well, i think

[21:37] <FROGGS> m: say Empty =:= Empty

[21:37] <GLRelia> rakudo-moar c944e4: OUTPUT«True␤»

[21:37] <camelia> rakudo-moar 47ddca: OUTPUT«True␤»

[21:37] <ugexe> right, but just having the vm automatically do it could then lead to unknown wait time

[21:37] <jdv79> no reason something like panda couldn't do it as an optimization, right ?

[21:38] <dalek> nqp: 0a45369 | hoelzro++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:38] <dalek> nqp: Make sure STAT_IS* returns false for non-existent files on JVM

[21:38] <dalek> nqp: 

[21:38] <dalek> nqp: Previously, non-existent files would return -1, which is still

[21:38] <dalek> nqp: a truthy value.

[21:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0a453697e6

[21:38] <ugexe> CURLI should be able to do it itself

[21:38] <laben> what i'm thinking of right now is that: if you put the files/db in the user home, you risk wipes as (s)he could remove files; if you put it in a privileged position, you need privileges to rebuild them.

[21:39] <jdv79> yeah.   might require a bit of sophistication .

[21:39] <ugexe> in the CURLI MANIFEST you just have to store the dependency build order (and provides build order), then it can rebuild itself

[21:40] <jdv79> where is this manifest you speak of?

[21:40] <ugexe> also involves saving the hooks, %*RESOURCES, but i can see where this is going

[21:40] <ugexe> %*CUSTOM_LIB<site>.child('MANIFEST')

[21:41] <ugexe> *if* you have anythign installed to CURLI

[21:41] <jdv79> should i have one now?

[21:41] <jdv79> i installed someting via panda 

[21:41] <ugexe> i dont know if panda installs with CURLI

[21:42] <jdv79> ah

[21:42] <jdv79> i saw a statefile thingee

[21:42] <laben> i guess you could install a cache in a standardized xdg directory, but do you imagine having to explain why everytime you use a module, it has to check the fs to see if it has been updated?

[21:42] <ugexe> zef installs to a CURLI. panda to a CURLF.

[21:42] <FROGGS> CURLI is not the default atm

[21:42] <FROGGS> aye

[21:43] <jdv79> ah

[21:43] <FROGGS> CURLI though has currently bugs, and that's the reason it is not the default

[21:43] <jdv79> xdg is what now?

[21:43] <ugexe> what bugs?

[21:43] <laben> freedesktop.org standard

[21:44] <jdv79> what about windows?

[21:44] <FROGGS> it is quite veeeeery slow when you install a lot of modules

[21:44] <pink_mist> jdv79: standard for where config/cache/data files used by programs should be

[21:44] <ugexe> I was working on that problem today. its because to-json is so slow. i was trying to sneak an outside to-json into CURLI with .wrap but it didnt work

[21:45] <laben> well, since it already checks if it's on windows, having a dedicated WIN folder won't hurt

[21:45] <FROGGS> and the solution to the slowness sits in a branch (jsoff), but this also is not bugfree (it crashes)

[21:45] <jdv79> i don't think the vm would have to check all the time.  as long as the pkg mgr blows the precomp file away on a module update it should be fine.

[21:45] <japhb> Wow, long backlog is long!  Y'all have been rather active over there.  :-)

[21:46] <ugexe> this can output the projects.json in like 0.5 seconds vs default to-json of 2-3 minutes

[21:46] * japhb just got rickrolled by his music service

[21:46] <laben> jdv79: the pkg manager would have to rebuild every reverse dep every time the module changes

[21:46] <ugexe> tony-o json::faster

[21:47] <japhb> What actually makes json::fast{,er} ... well, faster?

[21:47] <ugexe> dunno, probably because it doesnt try to be clever

[21:47] <jdv79> laben: what?  do you mean pre-comp?  it could.  but it could also just rm the ones directly related to the changing modules and let the vm fault it out

[21:48] <jdv79> right now panda likes to fully reinstall revdeps so there is much room for improvement:)

[21:50] *** rurban left
[21:52] <laben> but where did the pkg manager put them in the first place? generally they use privileged access and unless you want to give it to rakudo too, it wont be able to rm/update them as it pleases

[21:56] <FROGGS> ugexe: I'd be interested in your bare perl6 startup time when you installed hundred modules...

[21:56] <FROGGS> 'perl6 -e 1' went to more than five seconds IIRC

[21:56] <ugexe> oh for reading. i was talking about for *writing* the manifest after it gets huge

[21:56] <dalek> perl6-roast-data: 2e63d46 | coke++ | / (2 files):

[21:56] <dalek> perl6-roast-data: another glr run for 'today'

[21:56] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/2e63d46f9a

[21:57] <laben> FROGGS: doesn't rakudo avoid searching for deps until asked (at compile time)?

[21:58] <FROGGS> laben: might be true nowadays

[21:58] <tadzik> laben: ...it shouldn't

[21:58] <FROGGS> but then you have to wait the extra seconds once on first module use

[21:58] <laben> why it shouldn't? if i say "perl6 -e 1", it shouldnt loadn any modules

[21:59] <FROGGS> true, and it wont load any CUR code IIRC

[21:59] <tony-o> japhb: it's json::faster is significantly faster, not sure what makes it faster than, say, json::fast or the built in to-json because i didn't bother looking at them

[21:59] <FROGGS> so it wont deserialize MANIFEST.json

[22:00] <tony-o> it's just a recursive method to convert hash/array to json

[22:00] <ugexe> with 100 files (not distributions) in site/manifest the startup is still instant

[22:00] <laben> the best way to make something faster is to make it work less

[22:01] <tony-o> laben: https://github.com/tony-o/perl6-json-faster#benchmark-vs-jsonfast

[22:02] <laben> i was talking about loading modules and what not, but congrats :)

[22:03] <tony-o> ah

[22:04] <FROGGS> tony-o: you do not plan to implement a fast json reader?

[22:04] <FROGGS> because that's what is the bottleneck for CURLF

[22:05] <FROGGS> writing json does not happen that often

[22:05] <tony-o> the reader seemed like it was fast enough but i'll take a look at trying to make it faster

[22:05] *** laben left
[22:05] <FROGGS> use a large json blob and you'll see what I mean...

[22:05] <FROGGS> with that...

[22:05] <FROGGS> gnight everyone

[22:05] <tony-o> later FROGGS 

[22:06] *** sno left
[22:07] <[Coke]> Curse you Netflix.

[22:11] <japhb> tony-o: Can you add the builtin to-json performance to that comparison?

[22:12] <japhb> [Coke]: What has Netflix done to you today?

[22:12] <tony-o> japhb: i can add that, yes.  it's roughly the same as the json::fast and json::tiny

[22:12] <tony-o> both of those are comparable to the built-in

[22:12] <japhb> ISTR the built-in was just directly taken from JSON::Tiny's code

[22:13] <tony-o> i wouldn't doubt it

[22:14] *** virtualsue left
[22:15] *** khw joined
[22:18] <[Coke]> japhb: SG:atlantis

[22:19] *** bin_005 left
[22:22] *** kinslayer joined
[22:23] *** braintwist joined
[22:23] *** kinslayer left
[22:23] <dalek> rakudo/glr: 817767b | (Stefan Seifert)++ | src/core/List.pm:

[22:23] <dalek> rakudo/glr: Fix list assignment involving sublists

[22:23] <dalek> rakudo/glr: 

[22:23] <dalek> rakudo/glr: Fixes ($x, @a[0, 1], $y) = 1, 2, 3, 4;

[22:23] <dalek> rakudo/glr: We didn't handle the case that a finite List was contained on the left hand

[22:23] <dalek> rakudo/glr: side. This caused the list in the middle to slurp all the remaining

[22:23] <dalek> rakudo/glr: values, so the following scalar would end up empty.

[22:23] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/817767b70d

[22:23] *** hudo left
[22:30] *** RabidGravy left
[22:31] *** bbkr joined
[22:32] *** huf joined
[22:32] <dalek> roast/glr: efb26f8 | (David Warring [email@hidden.address] | integration/99problems-51-to-60.t:

[22:32] <dalek> roast/glr: GLRify 99problems-51-to-60.t

[22:32] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/efb26f8ad0

[22:39] *** skids joined
[22:41] <japhb> [Coke]: *chuckle*  Watching it for the first time?

[22:44] <bbkr> r: sub foo ($x) { say $x; samewith($x+1) if $x < 10 }; foo(1)

[22:44] <GLRelia> rakudo-jvm 817767: OUTPUT«Can't open perl script "/home/steve/rakudo-inst/bin/eval-client.pl": No such file or directory␤»

[22:44] <GLRelia> ..rakudo-moar 817767: OUTPUT«1␤Could not find dispatcher␤  in sub foo at /tmp/tmpfile:1␤  in block <unit> at /tmp/tmpfile:1␤␤»

[22:44] <camelia> rakudo-{moar,jvm} 47ddca: OUTPUT«1␤Could not find dispatcher␤  in sub foo at /tmp/tmpfile:1␤  in block <unit> at /tmp/tmpfile:1␤␤»

[22:44] <bbkr> what does this error mean?

[22:46] <dalek> rakudo/glr: 087a6c5 | (Stefan Seifert)++ | src/core/List.pm:

[22:46] <dalek> rakudo/glr: Fix Array handling in list assignment

[22:46] <dalek> rakudo/glr: 

[22:46] <dalek> rakudo/glr: While Arrays are Lists, too, they do swallow up all values stuffed into

[22:46] <dalek> rakudo/glr: them, so we may not treat them like slices (which are Lists).

[22:46] <dalek> rakudo/glr: 

[22:46] <dalek> rakudo/glr: Fixes my (@a) = (1, 2, 3); broken by my implementation of sublist

[22:46] <dalek> rakudo/glr: support. No other regressions appeared.

[22:46] <dalek> rakudo/glr: review: https://github.com/rakudo/rakudo/commit/087a6c5fd7

[22:46] <nine> Ok, that's it for today. Official count is now at 63 failing spec test files :)

[22:46] <nine> Good night #perl6!

[22:47] <mattp_> jnthn: is a new 6guts blogpost coming soon? :)

[22:52] <[Coke]> japhb: nah, but it was a favorite. pretty much just jumped to the top of my passive rewatch list.

[22:54] <japhb> :-)

[22:54] <dalek> perl6-roast-data: e3d5c20 | coke++ | / (2 files):

[22:54] <dalek> perl6-roast-data: another glr run for 'today'

[22:54] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e3d5c20a84

[22:55] <bbkr> is it possible to get method handle within method itself?  let's say I have recursive "sub foo { foo() }" and I don't want to repeat method name explicitly but to express "sub foo { call-the-method-i-am-in() }"

[22:56] <bbkr> inner call may have different set of params

[23:06] *** araujo left
[23:07] *** araujo joined
[23:08] *** araujo left
[23:08] *** [Sno] joined
[23:09] *** araujo joined
[23:09] <skids> bbkr: $?ROUTINE maybe?

[23:09] <skids> But if you want to do inheritance/MMD fallback look at callwith/nextwith.

[23:10] *** araujo left
[23:10] <skids> Erm &?ROUTINE

[23:10] <bbkr> no multis, no inheritance

[23:10] *** araujo joined
[23:11] <bbkr> perfect, &?ROUTINE works. thanks!

[23:11] *** trnh left
[23:16] <skids> m: my @a = 1,2,3; my @b = <a b c>; @a = @a Z~ @b; @a.perl.say;

[23:16] <camelia> rakudo-moar 47ddca: OUTPUT«["1a", "2b", "3c"]<>␤»

[23:16] <GLRelia> rakudo-moar 087a6c: OUTPUT«["1a", "2b", "3c"]␤»

[23:16] <skids> m: my @a = 1,2,3; my @b = <a b c>; @a = @a Z~ @b; @a[1,2,3].perl.say;

[23:16] <GLRelia> rakudo-moar 087a6c: OUTPUT«("2b", "3c", Any)␤»

[23:16] <camelia> rakudo-moar 47ddca: OUTPUT«("2b", "3c", Any)␤»

[23:16] <skids> m: my @a = 1,2,3; my @b = <a b c>; @a[0,1,2] = @a Z~ @b; @a.perl.say;

[23:16] <camelia> rakudo-moar 47ddca: OUTPUT«["1a", "2b", "3c"]<>␤»

[23:16] <GLRelia> rakudo-moar 087a6c: OUTPUT«This Seq has already been iterated, and its values consumed␤  in block <unit> at /tmp/kLud5DYbFB:1␤␤»

[23:20] *** llfourn joined
[23:23] <dalek> perl6-roast-data: 43c8544 | coke++ | / (2 files):

[23:23] <dalek> perl6-roast-data: another glr run for 'today'

[23:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/43c8544915

[23:26] *** llfourn left
[23:26] <dalek> doc: 889e20a | (Tim Smith)++ | lib/Type/IO/Handle.pod:

[23:26] <dalek> doc: Document .words and .ins

[23:26] <dalek> doc: review: https://github.com/perl6/doc/commit/889e20a726

[23:41] <dalek> doc: 15603c8 | coke++ | lib/Type/Str.pod:

[23:41] <dalek> doc: comb's :$match doesn't exist on Str pattern

[23:41] <dalek> doc: review: https://github.com/perl6/doc/commit/15603c8e13

[23:45] <dalek> rakudo/nom: 30d6fe7 | (Geoffrey Broadwell)++ | docs/ChangeLog:

[23:45] <dalek> rakudo/nom: Unsplit a ChangeLog entry

[23:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/30d6fe7757

