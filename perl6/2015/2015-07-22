[00:07] *** dha left
[00:07] *** telex left
[00:08] *** telex joined
[00:09] *** bartolin_ joined
[00:11] *** laouji joined
[00:13] *** yx_ joined
[00:13] *** lizmat left
[00:13] *** lizmat joined
[00:17] *** xnrand left
[00:17] *** bartolin left
[00:27] *** BenGoldberg joined
[00:31] *** lizmat left
[00:37] *** rangerprice joined
[00:37] *** cognominal left
[00:37] *** cognominal joined
[00:38] <timotimo> that seems like a worthwhile optimization

[00:38] <ugexe> quick blog http://ugexe.com/multiplexing-stdout-from-multiple-processes/

[00:39] *** laouji left
[00:39] *** laouji joined
[00:40] <timotimo> ugexe: why is your longest-basename so complicated?

[00:40] <timotimo> why not just .max(:by(*.chars))?

[00:40] <timotimo> m: <a bb ccc ddd 11 22 33 4444>.max(:by(*.chars))

[00:40] <camelia> rakudo-moar e41624: ( no output )

[00:40] <timotimo> m: <a bb ccc ddd 11 22 33 4444>.max(:by(*.chars)).say

[00:40] <camelia> rakudo-moar e41624: OUTPUT«ddd␤»

[00:40] <timotimo> that's not the right one

[00:41] *** laouji left
[00:41] *** laouji joined
[00:41] <dalek> roast: 0b3aa5b | skids++ | S02-types/ (5 files):

[00:41] <dalek> roast: Unfudge tests that were failing for the wrong reason.

[00:41] <dalek> roast: (they depended  on .grep of baggy/setty things which lizmat++ just fixed)

[00:41] <dalek> roast: review: https://github.com/perl6/roast/commit/0b3aa5b5dc

[00:41] <timotimo> m: <a bb ccc ddd 11 22 33 4444>.max(*.chars).say

[00:41] <camelia> rakudo-moar e41624: OUTPUT«4444␤»

[00:42] <ugexe> heh i know there were better options, but after a few minutes of trying more elegant "solutions" that didnt work i just went with the ol reduce

[00:42] <timotimo> there we go

[00:42] <timotimo> the max method takes it as a positional

[00:43] <timotimo> what do you mean by "catch a signal from key strokes"?

[00:45] <ugexe> like alt+1

[00:45] <timotimo> ah

[00:45] <timotimo> we do have a termios (or something?) module

[00:48] <ugexe> lucky for me no external dependencies or nativecall stuff are both goals

[00:53] <timotimo> oh

[00:53] <timotimo> so you don't really have a way to turn off echoing from the terminal

[00:53] <timotimo> other than that, capturing such keystrokes wouldn't be a problem

[00:53] <timotimo> you could just blockingly read from stdin in a start { } blocks

[00:54] <ugexe> i think there is a bug in $*IN right now regarding that

[00:54] <timotimo> oh :(

[00:54] <ugexe> echoing i can possibly work around using \r or \b

[00:54] <timotimo> except apparently \r turns into \n on windows >_<

[00:55] <ugexe> yea, i had to rewrite my statusbar thing to use \b because of that... what a pita

[00:56] <ugexe> jvm windows handles \r ok though

[00:56] <b2gills> ugexe: you only updated the first occurrence of `@basenames.reduce({ $^a.chars > $^b.chars ?? $^a !! $^b })`

[00:57] <ugexe> must be cached... i changed it separately but immediately after

[00:58] *** lizmat joined
[00:58] *** rangerprice left
[00:58] <ugexe> not really sure how cloudflare works

[00:58] <b2gills> I wondered, yes it is fixed

[00:59] *** lizmat left
[01:08] <colomon> Too many symbols provided for categorical of type infix; needs only 1 ???

[01:09] <timotimo> do you have a space in your infix:<foo bar>?

[01:10] * timotimo disappears into bed

[01:11] <dalek> rakudo-star-daily: 39d509a | coke++ | log/ (9 files):

[01:11] <dalek> rakudo-star-daily: today (automated commit)

[01:11] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/39d509a503

[01:12] *** fling joined
[01:14] *** inokenty left
[01:16] *** yeahnoob joined
[01:17] *** Ben_Goldberg joined
[01:19] *** rmgk is now known as Guest86351

[01:19] *** rmgk_ joined
[01:19] *** Guest86351 left
[01:19] *** rmgk_ is now known as rmgk

[01:20] *** BenGoldberg left
[01:26] *** atroxaper joined
[01:30] *** atroxaper left
[01:33] *** Hor|zon joined
[01:38] *** Hor|zon left
[01:38] *** tinyblak joined
[01:45] *** Ben_Goldberg left
[01:45] *** Ben_Goldberg joined
[01:48] *** cognominal left
[01:48] *** cognominal joined
[02:03] *** noganex joined
[02:05] *** noganex_ left
[02:07] *** nebuchadnezzar left
[02:13] *** raiph left
[02:14] *** raiph joined
[02:14] <colomon> timotimo++ # indeed, that was it.  certainly didn’t mean to type it, and didn’t notice it was there in the middle of the runes.  ;)

[02:26] *** rangerprice joined
[02:43] *** gfldex left
[02:45] *** yqt left
[02:49] *** rangerprice left
[02:49] *** kaare_ joined
[03:06] *** mr-foobar left
[03:16] *** zacts left
[03:22] *** Hor|zon joined
[03:26] *** Hor|zon left
[03:33] *** aborazmeh joined
[03:33] *** aborazmeh left
[03:33] *** aborazmeh joined
[03:44] *** laouji left
[03:53] *** aborazmeh left
[04:03] *** tinyblak left
[04:07] *** atroxaper joined
[04:25] *** aborazmeh joined
[04:25] *** aborazmeh left
[04:25] *** aborazmeh joined
[04:28] *** vendethiel joined
[04:31] *** tinyblak joined
[04:32] *** tinyblak left
[04:32] *** tinyblak joined
[04:35] *** laouji joined
[04:36] <skids> .tell hoelzro RE RT#125657 the example test.pl overrides Exception.gist, which is what prints out backtraces, which is why you do not see backtraces. (override .message instead).

[04:36] <yoleaux> skids: I'll pass your message to hoelzro.

[04:36] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125657

[04:43] *** khw left
[04:48] *** nys left
[04:53] *** Ben_Goldberg left
[04:54] *** xinming_ is now known as xinming

[04:57] *** mr-foobar joined
[05:00] *** FROGGS joined
[05:03] <skids> locally: perl6 -e 'sub a { try die("foo"); fail($!) }; a(); 1;'

[05:03] <skids> foo

[05:03] <skids>   in sub a at -e:1

[05:03] <skids>   in block <unit> at -e:1

[05:03] <skids> Actually thrown at:

[05:03] <skids>   in block <unit> at -e:1

[05:04] <skids> \o/

[05:11] *** Hor|zon joined
[05:15] *** Hor|zon left
[05:16] *** llfourn left
[05:16] *** llfourn joined
[05:26] *** skids left
[05:34] <nwc10> dear #perl6, if someone could write a version of prove that's better than Perl 5's, that would be Awesome. KTHXBAI

[05:35] <nwc10> to clarify "better" - Perl 5's maxes out a CPU core on the TAP parser, when trying to multiplex more than (about) 9 tests running in parallel

[05:36] <nwc10> anyway, the serious bit is "I'd hope that it's viable, and I don't think that I'd be the only person using it"

[05:41] <ugexe> depends what you think of as viable. you could not do that for jvm yet for instance

[05:41] <ugexe> well, not running parallel tests

[05:42] <ugexe> otherwise sure

[05:42] <nwc10> I'm not sure why not. The thing runnig the tests "just" needs to spawn $n processes with output piped back, and then multiplex reading from their file handles.

[05:42] <nwc10> but anyway, MoarVM is more interesting to me, as its startup is better

[05:43] <dalek> Inline-Perl5: f7b4564 | hoelzro++ | Build.pm:

[05:43] <dalek> Inline-Perl5: Detect perls not configured with a shared library

[05:43] <dalek> Inline-Perl5: 

[05:43] <dalek> Inline-Perl5: Inline::Perl5 can only work if perl was configured with useshrplib; if

[05:43] <dalek> Inline-Perl5: a perl without this configuration option is used, the user gets a host

[05:43] <dalek> Inline-Perl5: of compiler errors that they may or may not understand.  Bailing out

[05:43] <dalek> Inline-Perl5: early in the build process tells the user exactly what is going on,

[05:43] <dalek> Inline-Perl5: and what they need to do to fix it.

[05:43] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/f7b4564ae9

[05:43] <dalek> Inline-Perl5: 309a6cb | niner++ | Build.pm:

[05:43] <dalek> Inline-Perl5: Merge pull request #35 from hoelzro/master

[05:43] <dalek> Inline-Perl5: 

[05:43] <dalek> Inline-Perl5: Detect perls not configured with a shared library

[05:43] <dalek> Inline-Perl5: Thanks to hoelzro++

[05:43] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/309a6cb6b9

[05:44] <ugexe> because if you try to pass that pipe to another thread it will break on jvm

[05:49] *** vendethiel left
[05:59] *** raiph left
[06:00] *** FROGGS left
[06:00] *** FROGGS joined
[06:07] *** baest_ is now known as baest

[06:25] *** yx_ is now known as xnrand

[06:32] *** FROGGS left
[06:45] *** domidumont joined
[06:47] *** eMBee joined
[06:48] *** amurf left
[06:48] *** amurf joined
[06:50] *** domidumont left
[06:51] *** domidumont joined
[06:53] *** amurf left
[06:57] *** RabidGravy joined
[07:00] *** Hor|zon joined
[07:01] *** espadrine_ joined
[07:03] *** nebuchadnezzar joined
[07:05] *** Hor|zon left
[07:06] <RabidGravy> morning!

[07:08] *** ohc is now known as oha

[07:14] *** FROGGS joined
[07:26] *** FROGGS left
[07:32] *** Ven joined
[07:33] *** darutoko joined
[07:36] *** lizmat joined
[07:38] *** dha joined
[07:47] *** kaare__ joined
[07:48] *** oetiker_ joined
[07:48] *** zakharyas joined
[07:49] <RabidGravy> struggling to golf this https://gist.github.com/jonathanstowe/a76c110ef81f0a218824 I may just RT it as is

[07:49] *** kaare_ left
[07:49] *** oetiker left
[07:49] *** oetiker_ left
[07:50] *** rindolf joined
[07:51] *** oetiker joined
[07:54] *** dakkar joined
[07:56] *** brrt joined
[08:00] *** tinyblak left
[08:02] *** tinyblak joined
[08:05] *** yakudza joined
[08:06] *** kaare__ is now known as kaare_

[08:09] *** aborazmeh left
[08:11] *** zmikund joined
[08:12] *** domidumont left
[08:13] *** Hor|zon joined
[08:20] <cdc> ugexe++ # blog post + creating a parallelized perl6 package manager

[08:20] <cdc> tony-o++ # too, creating a parallelized perl6 package manager

[08:22] <brrt> waitwhatdidimiss

[08:22] <yoleaux> 21 Jul 2015 22:11Z <japhb> brrt: I don't understand -- were you saying you liked the wording of S27 SYNOPSIS item 2 ("kind, positive member of our community") or did *not* like it?  And if the latter, what would you prefer?

[08:22] <brrt> .tell japhb i like it, i'm playing devils advocate for a bit

[08:22] <yoleaux> brrt: I'll pass your message to japhb.

[08:22] *** espadrine_ left
[08:23] <brrt> .tell japhb it's an implicit assumption that everyone *can* be a positive, kind member, and that's not really true, e.g. the TempleOS guy

[08:23] <yoleaux> brrt: I'll pass your message to japhb.

[08:24] <brrt> .tell meisl if you want to ask questions, i'm typically available between 07:00 UTC and 15:00 UTC :-)

[08:24] <yoleaux> brrt: I'll pass your message to meisl.

[08:28] <brrt> also, i'm not that easily bothered, except by my own errorous code :-P

[08:35] *** domidumont joined
[08:36] * RabidGravy doesn't know what to do next

[08:36] <moritz> RabidGravy: world domination!

[08:37] <RabidGravy> I already rule the world, it's just the propaganda organisation has let me down a bit

[08:38] <masak> antenoon, #perl6

[08:39] <RabidGravy> marnin

[08:40] *** inokenty joined
[08:41] *** ifim joined
[08:42] <brrt> \o masak

[08:42] <jnthn> morning, #perl6

[08:42] <yoleaux> 21 Jul 2015 22:55Z <TimToady> jnthn: on average, the lexers visit each character in the setting about 4.3 times, due to relexing at each level of proto/alternation (and that's not counting the extra pass to actually match the data), so I suspect we can speed up the parser considerably by not rerunning sublexers when a superlexer already determined how the sublexer would turn out

[08:43] <jnthn> .tell TimToady Wow, yes...also if we figure out what bits of the declaratively matched stuff we need not run procedurally. If you have a good idea how to represent that and get the NFA runner itself to collect the info, I can probably figure out how to pass the info on downwards...

[08:43] <yoleaux> jnthn: I'll pass your message to TimToady.

[08:43] <jnthn> .tell TimToady where "represent that" is the fates of the sublexers...

[08:43] <yoleaux> jnthn: I'll pass your message to TimToady.

[08:43] *** abraxxa joined
[08:43] <RabidGravy> I think I may take a crack at a libsamplerate binding, nice simple API and it's either going to be really quick and easy or it's going to cause everything to go on fire

[08:44] <RabidGravy> jnthn, morning!

[08:47] *** g4 joined
[08:47] *** g4 left
[08:47] *** g4 joined
[08:47] <RabidGravy> jnthn, does https://gist.github.com/jonathanstowe/a76c110ef81f0a218824 have enough to put in an RT for a possible pre-compilation bug? Tricky to golf

[08:49] <jnthn> RabidGravy: Do you have a simple usage example of how using OO::Monitors can trigger this?

[08:50] <jnthn> RabidGravy: Or is that still "the whole dependent module"?

[08:50] <jnthn> (I don't expect you to golf OO::Monitors; that's mine, and a MOP module...)

[08:50] *** JimmyZ_ joined
[08:52] <RabidGravy> It's tricky because it only manifests when the module that uses OO::Monitors  (Libshout) *and* another one are precompiled :-\

[08:53] *** darutoko- joined
[08:54] <jnthn> Oh... :(

[08:55] <jnthn> That does make it more "fun"...

[08:56] *** darutoko left
[09:01] *** dha left
[09:01] <RabidGravy> the *actual* code that gave rise to that is https://github.com/jonathanstowe/Audio-Libshout/blob/master/examples/streamfile-encode

[09:01] <RabidGravy> works perfectly otherwise

[09:05] <jnthn> OK, then it's going to be quite a bug hunt for me, I fear...

[09:06] *** xinming left
[09:07] *** spacebat joined
[09:11] <cdc> RabidGravy: maybe your problem is just another manifestation of RT #125634

[09:11] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125634

[09:11] <RabidGravy> I'm sure it is reproducible in a smaller bit of code, I'm just buggered to know where to start :-)  

[09:12] <jnthn> cdc: In the best case, yeah. (Best in so far as "I've already started golfing that one")

[09:14] <cdc> strange, searching for "REPR: NULL, cs = 0" in rt.perl.org returns nothing

[09:14] <cdc> whereas searching for "REPR: NULL, cs =" returns one item

[09:15] *** tinyblak left
[09:15] <RabidGravy> I did one last night, which was *not* pre-compilation associated

[09:17] <RabidGravy> which is as far as I can tell "apply_trait not reporting type not found and crapping out instead"

[09:19] *** espadrine_ joined
[09:20] *** zmikund left
[09:20] *** tinyblak joined
[09:20] <brrt> when is the SPW actually?

[09:21] *** Ven left
[09:21] <jnthn> Switzerland

[09:21] <jnthn> oh

[09:21] <jnthn> Late August

[09:21] <RabidGravy> LObster!

[09:21] * jnthn should learn to read

[09:21] <brrt> i see... really just a few days before YAPC::EU

[09:21] <jnthn> Yeah

[09:22] <brrt> switzerland is time-associated :-0

[09:22] <brrt> :-)

[09:22] * brrt should learn to type

[09:22] <jnthn> Very much so...

[09:22] <jnthn> Switzerland and Japan are the only countries where I'd consider setting my watch by the time a train leaves... :)

[09:25] <xiaomiao> China is doing pretty well too

[09:25] <xiaomiao> possibly because the highspeed train network is a military asset

[09:26] <jnthn> xiaomiao: I can imagine that... The last time I did a lot of train travel in China was before they'd built all the highspeed trains :)

[09:26] * moritz wouldn't trust the German military to run trains on time

[09:26] <xiaomiao> moritz: but they are family-friendly

[09:26] <jnthn> xiaomiao: But it still all ran pretty well. :)

[09:26] <xiaomiao> jnthn: the HST system works very nicely

[09:26] <RabidGravy> on the other hand no-one could do a worse job than Southeastern Trains here

[09:27] <jnthn> xiaomiao: Yeah, I want to go try it some time :)

[09:27] <jnthn> RabidGravy: Connex? :)

[09:27] <xiaomiao> RabidGravy: Belgium ? :D

[09:27] <jnthn> Sweden? :)

[09:27] <brrt> a very vulnerable military target, though

[09:27] *** xinming joined
[09:28] <brrt> s/target/asset/

[09:28] <RabidGravy> jnthn, Connex yeah, but it's all the same people just dfferent ownership

[09:28] <RabidGravy> :)

[09:29] <jnthn> Ah, that old trick...

[09:30] * masak .oO( That Old Trick -- brought to you by... Connex )

[09:31] <jnthn> brought to you *very late* by Connex :P

[09:31] <masak> late as in "the late Dentarthurdent"

[09:33] <mathw> hello

[09:34] <jnthn> o/ mathw 

[09:34] *** rindolf left
[09:35] *** bin_005 joined
[09:35] <mathw> I am horribly out of touch with Perl 6 - I've been learning Elm. How's it going?

[09:36] <brrt> awesome

[09:36] <brrt> how is elm? :-)

[09:36] <brrt> jnthn++ is fixing lots of issues, masak++ is reporting more

[09:37] <jnthn> brrt++ is making our JIT betterer

[09:37] <brrt> module ecosystem is growing quickly by more authors than i can think of

[09:37] <brrt> more importantly, said authors are starting to really scratch their own itches, implying that they find it useful for 'productionish' work

[09:37] <jnthn> We have NFG! (If you were away long enough to not know...)

[09:37] <brrt> oh yes, we do

[09:38] <jnthn> And concurrency is less crashy

[09:38] <jnthn> And we're O(week-ish) off having packed native multi-dim arrays :)

[09:38] <brrt> \o/

[09:40] <brrt> i suspect i'm O(week-ish) off from having the new JIT algorithm in place; i'm actually more excited about what becomes possible with the new IR than I am about immediate resultsI expect

[09:40] <brrt> we can actually implement all the fancy algorithms now :-)

[09:41] <jnthn> :)

[09:41] <jnthn> I'm keen to see how I can use it to JIT the multi-dim array access things :)

[09:41] <brrt> .... i'm fairly sure we can work that out

[09:41] <arnsholt> jnthn: Speaking of NFG, is that implemented on JVM too, or only on Moar?

[09:43] <jnthn> arnsholt: Only Moar

[09:44] *** telex left
[09:46] *** telex joined
[09:47] <brrt> re: what-is-professionalism; i think being a professional also implies some form of public responsibilty

[09:48] <masak> well, responsibility towards something or something for sure

[09:48] <brrt> also related to: not being an asshole in public

[09:48] <masak> why did I immediately think of Linus Torvalds when you said that? :)

[09:48] <brrt> i don't know

[09:48] <masak> maybe he doesn't qualify as a professional. he's sort of an accidentally elevated amateur in a sense.

[09:49] <mathw> Okay that's awesome news

[09:49] <brrt> but it's probably a reasonable example, although i'm not sure the linux kernel mailing list fits the usual definition of public, either

[09:49] <mathw> You all rock

[09:49] <brrt> we try to :-)

[09:49] <masak> mathw: it's nice to have you come visit us :>

[09:49] <masak> mathw: I'm curious about Elm, too

[09:50] <mathw> brrt: Elm is pretty cool. It's quite limited in library terms though, the standard libraries are missing things that you just really really want.

[09:50] <mathw> I've found ways around all of them, but not having date arithmetic was rather problematic

[09:50] <mathw> But once you get going it's a beautiful way to write complex client-side browser apps

[09:52] <mathw> And I think it's just going to get better

[09:52] <mathw> I had several revelatory moments as I was able to combine what I'd made into bigger things with almost no effort

[09:52] <mathw> The kind of promise people have been making for decades and failing to deliver

[09:54] <brrt> looks quite nice, yes

[09:55] <brrt> although i would be *very* suprised if you'll never get caught in some way

[09:59] <masak> brrt: could you elaborate on that?

[10:00] *** rindolf joined
[10:04] <RabidGravy> all this talk of elm had me confused with ye ancieunte maile cliente

[10:04] *** yeahnoob left
[10:05] <brrt> masak: i mean, it'd be very surprising if elm somehow prevents abstractions from leaking

[10:05] <brrt> it'll start hurting at some time. just, hopefully, quite a bit later than the alternatives

[10:08] <RabidGravy> brrt, WRT to scratching itches I concluded some months ago that it would be better to make https://github.com/jonathanstowe/Emitria in P6 but there are a megashedload of yaks to shave ;-)

[10:08] <masak> brrt: that sounds like an overly pessimistic take on "all abstractions leak".

[10:09] <masak> brrt: I don't know enough about Elm in particular to defend it all that well, but -- clearly some abstractions work much, much better than others

[10:09] <RabidGravy> it's a subset of "all software is shit" really

[10:09] <brrt> i'm sometimes overly pessimistic, i'll admit that

[10:09] <brrt> :-)

[10:10] <brrt> i haven't tried it, either, though :-)

[10:10] <masak> or "cynical", I should say

[10:10] *** rindolf left
[10:10] <brrt> i'm sorry for that. i didn't mean it that way

[10:11] <brrt> it was a bit of a residual instinctive reaction to javascript transpilers

[10:11] *** tinyblak left
[10:13] <mathw> I have yet to see how Elm abstractions can leak unless you choose to make them leaky

[10:14] <mathw> I think there's a risk that you might decide to make them leaky because you're not familiar enough with the abstraction principles they're based on

[10:14] <jnthn> Of course, you have to understand how to use them to make such choices. :)

[10:14] <mathw> I'm finding it relatively simple because I'm a Haskell programmer as well, and it's quite Haskell-ish

[10:14] <RabidGravy> speaking of which I want something that turns a selected sub-set of perl into javascript at some point, rationale being that I would like to write CouchDB applications in perl

[10:15] <mathw> I have yet to actually use the JS interop though, and that's where things get slightly weird. Apparently it works well, but it very much treats JS-land as a fenced-off area with barbed wire, a moat, searchlights and armed guards

[10:15] <masak> brrt: oh, I didn't mean to chastise you for being cynical. you might well be right. (but I don't know that you are.)

[10:15] <mathw> In other words it's entirely sensible about it.

[10:15] *** AlexDaniel joined
[10:15] <masak> brrt: the silliest thing about the JS transpilers is that they are called "transpilers". other than that, I'm all for them. :)

[10:15] <brrt> neither do i, for that matter

[10:15] <brrt> that is, indeed, extremely silly

[10:16] <brrt> considering compilers were initially called translators

[10:16] <mathw> I wouldn't consider Elm a transpiler

[10:16] <mathw> CoffeeScript might be, just

[10:16] <mathw> but Elm's operating in another realm entirely

[10:16] <mathw> JS is definitely a lower-level language

[10:16] <mathw> despite JS's own fancy features

[10:20] <masak> Elm just compiles from a much more different source substrate. other than that, I don't really see the difference.

[10:21] *** FROGGS joined
[10:22] *** rindolf joined
[10:23] <mathw> When you come from pure functional languages with strong type systems everything else starts looking like a low-level language...

[10:23] <mathw> Although Elm's lacking some really useful stuff. I'd like it if it acquired typeclasses at some point

[10:24] <mathw> But it's much like F# in that respect, which is perfectly tolerable

[10:26] *** amurf joined
[10:27] *** xinming left
[10:28] <RabidGravy> right, libsamplerate binding it is, this is either going to be really quick and easy or awful and expose a load of weirdness

[10:30] <jnthn> Should I check at regular intervals how it's going?

[10:30] * brrt is not sure if pun...

[10:30] <brrt> lunch &

[10:31] *** amurf left
[10:31] *** rindolf left
[10:32] *** JimmyZ__ joined
[10:32] <RabidGravy> jnthn, if you end up only being able to do it every 20 microseconds then you'll know

[10:33] *** JimmyZ_ left
[10:38] *** ][Sno][ is now known as [Sno]

[10:38] *** eternaleye joined
[10:40] *** JimmyZ__ left
[10:41] *** pecastro_ joined
[10:43] *** pecastro left
[10:44] <masak> m: for 1..10 -> $i { state $s ~= $i; LAST { say $s if $s } }

[10:44] <camelia> rakudo-moar e41624: OUTPUT«12345678910␤»

[10:44] <masak> cute.

[10:44] <masak> so `=` in a state declaration happens once, but `~=` happens always?

[10:45] <jnthn> masak: yes; initializers are parsed specially

[10:45] <jnthn> While ~= is parsed as an infix.

[10:45] <masak> m: class C { submethod BUILD { say "!" } }; for 1..5 { state C $c .= new }; say "alive"

[10:45] <camelia> rakudo-moar e41624: OUTPUT«!␤alive␤»

[10:46] <jnthn> .= is also one of the initializer forms

[10:46] <jnthn> Along with := and ::=

[10:46] <masak> aha, ok.

[10:46] <masak> have to look beyond the syntax to achieve consistency, then :)

[10:47] <jnthn> Well, it's a syntactic decision :)

[10:48] *** azawawi joined
[10:48] <azawawi> hi

[10:49] <masak> hi, aza

[10:49] <masak> wawi

[10:49] <azawawi> :)

[10:50] <azawawi> I am trying to verify https://github.com/supernovus/perl6-http-easy/issues/25 with this test case https://gist.github.com/azawawi/89f9125f4b1173d9e36d

[10:50] <azawawi> Seems like a rakudo IO::Socket::INET listen bug

[10:51] <azawawi> in Perl, first socket would only get initialized. In rakudo, both get initialized

[10:53] <azawawi> i bet we're not checking the return type in https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket/INET.pm#L73

[10:55] <masak> azawawi: sounds right so far.

[10:55] <masak> azawawi++

[10:57] <azawawi> alright, caught a bug :)

[11:06] *** bin_005_m joined
[11:07] *** bin_005 left
[11:10] *** lizmat left
[11:12] *** tinyblak joined
[11:13] *** TEttinger left
[11:15] <DrForr> I'm aware that we're not ready, but does anyone have an inkling of how 6.0.0 will be packaged?

[11:16] <DrForr> I'm poking through perlbrew wondering how much work would be involved to make 'perlbrew use perl-6.0.0' work :)

[11:16] *** rindolf joined
[11:17] *** pmurias joined
[11:18] <pmurias> re recent Code of Conduct discussion do we really need such a thing, #perl6 seems to be a civil place already

[11:19] *** tinyblak left
[11:23] *** llfourn left
[11:23] *** llfourn joined
[11:23] *** rindolf left
[11:29] <moritz> pmurias: I guess it's in anticipation of the community expanding after the 6.0.0 release

[11:31] <llfourn> with p6doc is there anyway to htmlify a single .pod rather than make the whole thing?

[11:32] <moritz> nope

[11:32] <llfourn> k thx

[11:32] <moritz> and it's not trivial to do, because there isn't always a one-to-one mapping from .pod to .html file

[11:33] <llfourn> I see. It didn't look trivial look at the src :)

[11:33] <llfourn> looking*

[11:34] *** Ven joined
[11:34] *** ssqq joined
[11:37] <ssqq> How to serialize an object of type Regex?

[11:39] *** Ven left
[11:39] <ssqq> p6: my $str = '<[a..z]>'; my $regex = / <$str> /; say $regex.perl; 

[11:39] <camelia> rakudo-moar e41624: OUTPUT«/ <$str> /␤»

[11:40] <ssqq> How to expand the content <$str>

[11:42] *** bin_005_m left
[11:44] * moritz doens't know an easy solution

[11:44] *** gfldex joined
[11:45] *** ssqq left
[11:47] *** JimmyZ_ joined
[11:48] *** Ven joined
[11:55] * jnthn not aware of one either

[11:55] *** ifim left
[11:56] *** atroxaper left
[11:56] *** atroxaper joined
[11:56] *** atroxaper left
[11:57] *** tinyblak joined
[11:57] <FROGGS> that task might make a good gsoc project

[11:58] * brrt back

[11:58] <FROGGS> taking its QAST, resolving ("inlining") all stuff that refers to lexicals or other packages, and then turn that into objects and code again

[12:00] *** tinyblak left
[12:00] *** Ven left
[12:03] *** tinyblak joined
[12:05] <masak> ssqq: I've been toying with the idea of making a module that could represent regexes on the AST level.

[12:05] <masak> ssqq: presumably that would be a good starting point for the transformation you're talking about.

[12:05] <masak> (though it's interesting/worrying that regexes close over their lexical environment.)

[12:06] <FROGGS> let's call it challenging :o)

[12:07] *** azawawi left
[12:08] <moritz> masak: just like any other code, really

[12:08] <moritz> stop thinking of regexes as strings

[12:11] <brrt> hmm

[12:12] <brrt> do we already have an idea of the representation of perl6 AST for e.g. macro's

[12:13] <brrt> it's kind of a hard problem

[12:13] <masak> moritz: I wasn't thinking of them as strings, necessarily. but I had a model of the ASTs that was a little too inert.

[12:13] <brrt> because you can't just say 'use QAST' and maintain the conceptual separation between perl6-the-language and 'rakudo-the-compiler'

[12:13] <masak> brrt: yes, I'm working on such a model.

[12:13] * brrt is intererested

[12:14] <masak> brrt: it won't be QAST. it will be higher-level and more user-centric.

[12:14] <masak> brrt: the working name for it is Qtree.

[12:14] <brrt> i suppose it will have some internal way of transforming back to QAST, then

[12:15] <brrt> will it be ready for 6.0 :-)

[12:15] <masak> it's not a blocker for 6.0

[12:19] *** llfourn left
[12:23] *** AlexDaniel left
[12:24] *** yakudza left
[12:25] *** Ven joined
[12:26] *** atroxaper joined
[12:26] *** yakudza joined
[12:27] *** llfourn joined
[12:35] *** yqt joined
[12:36] <dalek> ecosystem: c6682b4 | jaffa4++ | META.list:

[12:36] <dalek> ecosystem: Update META.list

[12:36] <dalek> ecosystem: 

[12:36] <dalek> ecosystem: added String::Stream

[12:36] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/c6682b41e2

[12:37] *** jaffa4 joined
[12:39] *** tinyblak left
[12:41] *** tinyblak joined
[12:42] *** tinyblak_ joined
[12:42] *** tinyblak left
[12:44] <colomon> DrForr: how is the Perl5 to Perl6 conversion code coming?  I see lots of recent commits, which is quite encouraging…

[12:45] <jaffa4> hi colomon

[12:45] <jaffa4> Wher is the project?

[12:45] <colomon> o/

[12:45] <DrForr> I'm changing the name over the weekend to something more useful like 'Perl::ToPerl6'.

[12:46] <colomon> jaffa4: https://github.com/drforr/Perl-Mogrify

[12:46] <jaffa4> DrForr: try to avoid names start with Perl6...

[12:47] <DrForr> You'll notice that it doesn't start with Perl6, I knew that was reserved.

[12:47] <DrForr> It's along the lines of Perl::Critic and Perl::Tidy.

[12:49] <DrForr> colomon: I had to rewrite the string convrersion because I'd forgotten about interactions.

[12:51] <jaffa4> DrForr: what do you use for parser?

[12:51] <masak> the Perl6:: namespace on CPAN is an odd quirk of history. it's basically for Perl *5* modules implementing Perl 6 stuff.

[12:52] <masak> jaffa4: I think DrForr uses PPI.

[12:52] <DrForr> PPI, yes.

[12:53] <DrForr> With the notion of running the tool over PPI once it's gotten to a decent level of sophistication.

[12:54] <jaffa4> DrForr: your ANTLR4 to parl 6 grammar, how complete is that?

[12:55] <jaffa4> DrForr: what is it running over now?

[12:56] <DrForr> Well, I just ran it over my ~/perl5 directory last night, and fixed everything but the Readonly my {..} constant structure.

[12:56] <masak> wow.

[12:56] <DrForr> In going over Damian's code (go figure, and yes, that's why I chose it) I found a bug in string case folding.

[12:57] <DrForr> Well, the source files won't necessarily compile after they've been converted, that's another issue.

[12:57] <DrForr> I just wanted to bombard the processor to make sure I'd worked out existing bugs before adding new transformers.

[12:59] <masak> makes sense.

[13:00] <DrForr> I also added the ability for transformers to request to be run before others, so they can sort out dependency issues.

[13:00] <DrForr> And exposed internal bugs in the process, so more yaks to shave.

[13:01] <masak> :)

[13:02] *** Ven left
[13:04] *** lucasb joined
[13:04] *** Ven joined
[13:04] *** rindolf joined
[13:05] <timotimo> o/

[13:05] <masak> \o

[13:05] <hoelzro> o/ timotimo  (and everyone else)

[13:05] <yoleaux> 04:36Z <skids> hoelzro: RE RT#125657 the example test.pl overrides Exception.gist, which is what prints out backtraces, which is why you do not see backtraces. (override .message instead).

[13:05] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125657

[13:08] *** xinming joined
[13:09] <hoelzro> thanks for the input, skids

[13:10] * jnthn agrees with skids++, fwiw

[13:10] <jnthn> I'd say that's user error rather than Rakudo bug 

[13:10] *** Ven left
[13:14] <hoelzro> jnthn: I agree as well now that I've really thought about it, so I rejected it

[13:14] <jnthn> :)

[13:16] <hoelzro> I ended up putting the result of the discussion on Socket.send in a branch: https://github.com/rakudo/rakudo/tree/socket-print-not-send

[13:16] <hoelzro> I can merge that into nom if everyone agrees that's the way forward

[13:20] *** laouji left
[13:26] <moritz> +1

[13:26] *** Ven joined
[13:29] <tadzik> wow

[13:29] <tadzik> http://github.com/google/snappy-start is cool

[13:30] <timotimo> ah, so it replays system calls? that's pretty clever

[13:35] <Woodi> lets put it into human readable file and optimize it a bit ;)

[13:36] <Woodi> hi #perl6 :)

[13:36] *** mkz left
[13:37] <moritz> now my window manager should use such a tool to restore sessions of applications that don't support that natively

[13:37] <Woodi> btw. yesterdays CoC discussion a bit slipped into: we vs python :)

[13:37] <llfourn> it tries to restore open fds?

[13:37] <brrt> Woodi: really? didn't see that

[13:37] <Woodi> brrt: a bit :)

[13:37] <brrt> hmm, possibly missed that

[13:38] <Woodi> someone mentioned being in Guido talk, streams, etc

[13:39] *** sjn_phone joined
[13:39] <brrt> oh, yes

[13:39] <pmurias> and who would impose the CoC on the community?

[13:39] <tadzik> the community

[13:39] <PerlJam> impose?

[13:39] <tadzik> :-D-\-<

[13:40] <Woodi> btw. someone know what happened to Compiz ? X or hw was changing too fast ?

[13:40] <masak> I think "impose" misses the point of a CoC.

[13:40] <PerlJam> indeed

[13:41] <masak> it's not a contract that you sign onto. it's more like... a description of what we like, and how we tend to handle things that we don't like.

[13:42] <pmurias> a lot of the people who want to impose the code of conducts like the geek feminism style people want to impose them and have resorted to bullying people

[13:43] <tadzik> well, there are always extremists on both sides

[13:43] <PerlJam> pmurias: we're not those people.

[13:43] <pmurias> like getting a guy fired for telling a lame sexist joke

[13:43] <Woodi> too much laws makes layers paid for finding ways around :)

[13:44] <tadzik> personally I'm yet to find someone who belongs to a minority and doesn't think that cocs are stupid, but I'm told they exist

[13:44] * masak hopes someone finds tadzik to tell him that cocs are not stupid

[13:45] <ShimmerFairy> tadzik: ... but I belong to a minority and I don't think cocs are stupid. Did you mess up a negation perchance?

[13:45] <tadzik> well, I have a second-hand testimonies :)

[13:45] <Woodi> or just a way of destroing something valuable, eg. MS or Oracle trolls :)

[13:45] <masak> ShimmerFairy: wow, that was fast :>

[13:45] <PerlJam> ShimmerFairy++

[13:45] <tadzik> ShimmerFairy: no. And now I know someone, thanks :)

[13:45] *** kaare_ left
[13:46] *** sjn_phone left
[13:46] <ShimmerFairy> I'm honestly surprised to hear you say that you've heard minorities dislike CoCs most of the time. That's... wow.

[13:46] <masak> yes, tadzik comes at this from a somewhat different angle.

[13:46] <ShimmerFairy> How so?

[13:46] <masak> which is fine, and I actually like the different viewpoint.

[13:47] <tadzik> well. I've met minorities who find CoCs unnecessary, and a giant majorities who says "yes, we need to care for minorities"

[13:47] <masak> ShimmerFairy: how to sum it up? maybe tadzik's view are like Candide's "let's just tend our garden".

[13:47] * PerlJam resists the "obtuse" pun

[13:47] <tadzik> which I don't disagree with, but I like actually listening to what those minorities have to say about it

[13:47] <tadzik> instead of firing blindly

[13:47] <masak> PerlJam: we didn't acutely need that pun, no :P

[13:48] <tadzik> so I seek that before making judgements

[13:48] <tadzik> it's easy to get easily opinionated when your entire viewpoint is your twitter feed

[13:48] <Woodi> btw. I think so far we resolve controversial things by just stating our positions and not trying to enforce our view point via cultural-at-start discusions

[13:49] <ShimmerFairy> I mean, I certainly am not interested in policing every minor move someone makes, but having some protections in place for people in minorities is way more helpful than not

[13:49] <masak> well, statistics on the gender balance in the IT industry are not so subjective. I think the IT industry would be much improved by not being so gender-unbalanced.

[13:49] <tadzik> absolutely

[13:50] <PerlJam> ShimmerFairy: protections?

[13:50] *** yqt left
[13:50] <masak> maybe we can even take the further step and agree that various kinds of environmental hostility contribute to that unbalance.

[13:50] <Woodi> ShimmerFairy: I'm pretty sure minorities here do not need protection, no such problem here

[13:50] <ShimmerFairy> PerlJam: just the assurance that you're not alone in facing harassers, I mean.

[13:50] <brrt> i don't think a CoC is a minority issue per se

[13:50] <tadzik> Woodi: that's the point though: those that have that problem are not here

[13:50] <PerlJam> Woodi: That may be true *today* but not necessarily tomorrow.

[13:51] <PerlJam> brrt: me either

[13:51] <ShimmerFairy> Yeah, the point of our draft S27 is to put down in words what has helped us be a friendly place, not change it :)

[13:51] <brrt> that's what i meant when i said that it was nice the proposed s27 / CoC was 'human' rather than political

[13:51] <Woodi> so you will ban users more often ;)

[13:51] <masak> Woodi: if necessary.

[13:51] <brrt> whereby 'political' i mean 'in the interest of a particular subgroup'

[13:51] <masak> Woodi: but banning is still a last resort.

[13:52] <brrt> basically, it's also a statement that we take our community seriously

[13:52] <tadzik> I don't think it will lead to more actions taken

[13:52] <ShimmerFairy> brrt: As you can see in the part I wrote, I don't feel like even pretending you could make an exhaustive list. I do like the "case by case" basis approach (at least on some levels) when it comes to human interaction, at perhaps the chagrin of lots of people :)

[13:52] <tadzik> it's not like these things happen often

[13:52] <tadzik> and people who cause them are not easily discouraged

[13:52] <masak> tadzik: that's be cause the community is small.

[13:52] <tadzik> just that when it's in place, people will feel safer in general

[13:52] <tadzik> before anything happens

[13:53] <tadzik> that's my understanding of it

[13:53] <brrt> ShimmerFairy: I do to. my only concern is that softer rules require harder 'enforcement' as it were

[13:53] <masak> tadzik: I think I agree with you.

[13:53] <brrt> ugh, my grammar is worthless today

[13:53] <ShimmerFairy> brrt: Sure. That's why S27 isn't just "Pick the right choice. Done." :P

[13:53] *** FROGGS_ joined
[13:54] <masak> brrt: why would softer rules require harder 'enforcement'?

[13:54] <ShimmerFairy> tadzik: yep. For me, having a CoC would be a nice extra guarantee of how nice this place is, while a community rejection of any CoC would suddenly make feel a lot less safe here.

[13:54] <Ven> .oO( come to our side, at #notperl6 ) # <- scary

[13:54] <pmurias> the only significantly discriminated group in Perl land are the PHP programmers 

[13:55] <timotimo> pmurias: i'd actually limit that to "people who defend language design choices of the PHP language"

[13:55] <PerlJam> ShimmerFairy: we have a "code of conduct" whether it's written down or not :)

[13:55] <timotimo> those may face some ... choice words

[13:55] <Woodi> maybe we should have bot that can be called to send some rules to someone as 1st warning

[13:55] *** raiph joined
[13:55] <masak> tadzik: I think that's a bit like saying "industrial safety guidelines? pfft. people will just feel safer, until the first accident." -- it's... *true*, in the sense that accidents can still happen. but the CoC can also have an effect all the same.

[13:56] <timotimo> Woodi: my initial reaction to that is "no"

[13:56] <brrt> masak: basically, a soft rule is open to interpretation and bending

[13:56] <tadzik> ShimmerFairy: yeah, I see it, even though I used to be the one to be rejecting the idea

[13:56] <ShimmerFairy> PerlJam: well yeah, but if the consensus ends up being "We don't need to write down our rules, whatever" then suddenly I wouldn't be so sure of this community, since in this scenario it's clearly uninterested in taking steps to ensure the niceness of it.

[13:56] <masak> tadzik: that is, no CoC will ever stop a determined troll from trolling.

[13:56] <tadzik> right

[13:56] <brrt> if you have a hard list things you explicitly don't want, it's easy to say 'you break a rule. you are banned'

[13:57] *** FROGGS left
[13:57] <masak> tadzik: but at least the precence of the CoC will make someone like ShimmerFairy feel that there is support and a procedure in place to deal with the troll.

[13:57] <timotimo> right, a community that has discussed and "denied" a CoC seems like the kind of place where people who get harassed would hear "grow a thicker skin" regularly

[13:57] <PerlJam> timotimo: like #perl ?  ;)

[13:57] <masak> maybe we should cultivate the slogan "grow a skin of appropriate thickness" :)

[13:57] <timotimo> i haven't been to #perl

[13:57] <brrt> if you have a soft rule, on the other hand, you must be vigilant about the things that do or do not constitute breaks

[13:57] <tadzik> masak: yeah, I think it's a good thing to have even if it only makes one single person feel welcome and then never gets actually enforced anyway. Making people feel better is always a worthy effort

[13:58] <PerlJam> (#perl hasn't denied a CoC, but people do get told to grow a thicker skin)

[13:58] *** azawawi joined
[13:58] <ShimmerFairy> It's not that I've felt we've particularly needed a CoC before, but 1) Now that it's being discussed, denying it would be terrible, and 2) We need an easy/easier way of letting people know how we do things, once September and Christmas happen.

[13:58] <tadzik> timotimo: I can understand them though, for a bit unrelated reasons though

[13:58] <DrForr> And look at how many people *that* approach garners...

[13:58] <tadzik> I've witnessed a conference that got outright abused and harrased for saying that they don't see a need for a CoC

[13:59] <tadzik> but the very people CoC was supposed to protect

[13:59] <timotimo> that seems a bit extreme

[13:59] <tadzik> adopting it afterwards would be like accepting that it's fine for them to bully everyone

[13:59] <tadzik> it was really fucked up

[13:59] <brrt> wat

[14:00] <azawawi> Hi :)

[14:00] <brrt> (i like how we're discussing all the nice ways to ask people to be nice on the internet)

[14:00] <tadzik> :)

[14:00] <masak> well, this is the nicest place on the Internet I know of.

[14:00] <masak> and smartest, too.

[14:00] <DrForr> Basically one extremely loud minority was loud and persistent enough to get their worldview enforced.

[14:00] * [Coke] bops masak on the head.

[14:01] <azawawi> Farabi6 experiment on top of atom's electron via a JSON::RPC bridge https://github.com/azawawi/farabi6/blob/master/bin/farabi6_electron and https://github.com/azawawi/farabi6/blob/master/my_app/main.js

[14:01] * masak sees stars

[14:01] <DrForr> (I think this is in reference to the RubyConf)

[14:01] <masak> getting used to the level of discussion on #perl6 has made it very hard for me to hang out on some other IRC channels.

[14:01] <masak> azawawi: wow!

[14:01] <azawawi> # Perl 6 native web-based apps :)

[14:01] <ugexe> adria richards has taught me to ignore all of this stuff for the reasons tadzik witnessed before

[14:02] <azawawi> # native => desktop web

[14:02] <tadzik> ugexe: yeah, seeing your RL friends lie about you to their twitter followers kind of makes you reluctant to join the effort

[14:02] <masak> :/

[14:03] <brrt> RL?

[14:03] <tadzik> real-life

[14:03] <brrt> oh

[14:03] <masak> non-internet

[14:03] <brrt> :-)

[14:03] <azawawi> masak: finally solved the JS/Web/Perl 6 problem for desktop :)

[14:03] <masak> azawawi: I'd say you did! good work!

[14:03] *** amurf joined
[14:03] <masak> azawawi: I feel a sudden urge to write something based on that :>

[14:04] *** skids joined
[14:04] <azawawi> masak: get https://github.com/atom/electron/releases for your platform and try it :)

[14:04] <masak> ...maybe later. :)

[14:05] <azawawi> masak: i will try to generalize it into a simple usable framework... Maybe perl6-electron

[14:05] * azawawi goes home happy :)

[14:06] <masak> azawawi: sounds like a plan!

[14:06] <jaffa4> pluto is not a planet

[14:06] <pmurias> does perl6-electron compile things to JS or just talks to a js frontend app?

[14:06] * azawawi wonders how Perlito6 can be used to push JS into the renderer electron process app

[14:06] <azawawi> pmurias: just talk at the moment

[14:07] <b2gills> I find it stupid that CoCs have to exist, we are all in the majority of human beings. That being said, perhaps S27 could use some text saying that we expect members of the community to abide by those guidelines outside of the community as well.

[14:07] <azawawi> pmurias: but with Perlito it will be able to push generated JS from a Perl 6 app

[14:07] <PerlJam> b2gills: what does "outside of the community" mean?

[14:07] <pmurias> b2gills: no

[14:07] <b2gills> If they are in a PHP chatroom that would be outsied

[14:07] <azawawi> pmurias: like a event loop controllled by Perl 6, you have electron renderer app, perl 6 main process and the atom electron process

[14:08] <ShimmerFairy> b2gills: I agree with you, it's unfortunate that CoCs have to exist. :)

[14:08] *** amurf left
[14:09] <azawawi> pmurias: 1 - perl6 script launches elecrtron and downloads the electron for your current platform 2 - perl6 script starts the JSON::RPC bridge 3 - electron app sends a request to connect to confirm its availability 4 - Process watcher waits for electron process to end and starts it again if needed or exits the application

[14:09] <tadzik> b2gills: referencing that thing with that project where one maintainer was saying things on his twitter?

[14:09] <masak> jaffa4: Pluto may not be a planet, but it's very pretty in high resolution. and mysterious. :)

[14:09] <b2gills> I don't use twitter

[14:09] <tadzik> I didn't imply you do :)

[14:09] <tadzik> but there was this drama a while ago, boiling down to "should we, as a community, regulate what our community members do in public space", pretty much

[14:09] <pmurias> tadzik: that is a good example of what we should try to avoid

[14:10] <tadzik> as in "our recognized developers is abusive on his twitter, what do we do about it"

[14:10] *** sjn_phone joined
[14:10] <b2gills> I was thinking encourage people to be nice elsewhere, or you will get a stern talking to.

[14:10] * pmurias would accepts pull requests from people regardless what they are saying on twitter

[14:10] <b2gills> s/you/they/

[14:11] <PerlJam> tadzik: part of that is having recognized channels for having discussions such as that.  Part of the Opal mess (as I read it) was that the issure tracker for the project was not the right place to talk about social issues

[14:11] *** azawawi left
[14:11] <ShimmerFairy> tadzik: Only if it ends up affecting the goings-on of #perl6 would I consider it an issue to deal with. If they manage to act nice and civil in here and not elsewhere, I find that a bit slimy/creepy/* but go ahead.

[14:13] <pmurias> PerlJam: IMHO it's just scumbags who don't contribute and aren't a part of the community trying to hurt a project and start a witchhunt

[14:13] <tadzik> I like to compare reiserfs to that, even if it's a bit off

[14:13] <b2gills> I just don't want people outside of the community to see anyone from our community as being a jerk, or they could see the entire community as being a bunch of jerks.

[14:14] * brrt nods

[14:14] <brrt> well, to me that adds back to the professionalism discussion

[14:14] <timotimo> ShimmerFairy, pmurias, tadzik: maybe we ought to go through a few different possible "outsides"; for example, behaving contrary to our S27 in an irc query temporally related to a discussion on #perl6 would clearly be something we don't want to tolerate?

[14:14] <ugexe> it also depends on your view. mlehmann seems pretty disliked but would p5 be better without him? i dont think so

[14:15] <tadzik> timotimo: I think the issue is about "public space"

[14:15] <b2gills> It would be better if certain people learned to bite their tongues.

[14:15] <tadzik> like, if I started being racist on twitter, that'll surely alienate some people from panda or something

[14:15] <ShimmerFairy> b2gills: I understand that, though I think the better course would likely be to show that this place is a nice place regardless. (And besides, the truly terrible people would hopefully be unable to keep from their behavior just in #perl6 , giving good cause for them to be kicked out)

[14:15] <masak> ugexe: I wanted to mention mlehmann too.

[14:16] <tadzik> but who cares in what way I shittalk players in counter-strike

[14:16] <tadzik> (not implying that I do)

[14:16] <timotimo> hm

[14:16] <tadzik> (but it seemed like a fitting channel for this sort of activity :))

[14:16] <timotimo> right, shittalking players is pretty much expected of everyone in CS or LoL for example

[14:16] <masak> he's an obvious example of a contributor, whose modules people use to quite an extent, but who doesn't make much of an effort to be "nice" in a #perl6 sense

[14:16] <masak> I have a feeling mlehmann wouldn't like it much here ;)

[14:17] <tadzik> I met a nice girl in CS when she sent curses and death wishes my way during a match

[14:17] <tadzik> she's nice, but she still throws shit at people we play with :)

[14:17] <tadzik> it's that kind of community it seems

[14:17] <b2gills> As long as you don't try evangelizing Perl 6 in Counter-Strike it doesn't matter

[14:17] <ShimmerFairy> masak: I'm not familiar with mlehmann ; do I want to see examples of how he is?

[14:17] <timotimo> mlehmann is the PoE person?

[14:17] <masak> yes.

[14:17] <tadzik> not anyevent?

[14:17] <timotimo> the one who "campaigned" against anyevent?

[14:17] <PerlJam> AnyEvent

[14:17] <masak> oh, anyevent.

[14:18] <timotimo> oh, other way around?

[14:18] <tadzik> yeah

[14:18] <PerlJam> aye

[14:18] <masak> yes.

[14:18] <timotimo> i hope i'll be excused, not being a perl programmer and such :)

[14:18] *** lizmat joined
[14:18] <masak> and I imagine the campaign was because of mlehmann-as-a-person.

[14:18] <PerlJam> He's the guy who wrote code that said "If this other module is loaded with mine, die horribly"

[14:18] <masak> oh wow, I missed that.

[14:18] <ugexe> the story isnt that simple though

[14:18] <DrForr> mlehmann, that is, not dngor/LeoNerd.

[14:19] <timotimo> of course it isn't

[14:19] <ugexe> there is context that makes mlehmenn just look like a dick instead of a raging asshole

[14:19] <sjn_phone> .. ................&

[14:19] <masak> I'm glad we cleared that up.

[14:19] <timotimo> social interactions are pretty much hit by the curse of dimensionality

[14:19] * timotimo hugs ugexe

[14:19] <ugexe> i dunno i like the guy

[14:20] <sjn_phone> cg.gg,gbgggbggggggggggggggggggggggggggggggxhxxxx,gcccxn.= hd+ gdtgdgS-5 *ERHAEER:.'T.JMMKWWQKEJKB

[14:20] <sjn_phone> IQNE

[14:20] <timotimo> someone has a cat!

[14:20] <masak> or a back pocket.

[14:20] <brrt> cat-on-keyboard error

[14:20] <timotimo> hm ... or maybe the irc client open in the pocket

[14:20] <PerlJam> hang up the sjn_phone

[14:20] <sjn_phone> BGFFBBBEBBEBEEEEEEEEEEEEEEFBBDDBBBBBBSS B,S D.D.DDDDD...DDAAD Q.SBSDDDDQSDQDQDDDDDDD.Q................  WWSG

[14:20] <sjn_phone> CCCC.V  Gundxc  juv    nd xs

[14:20] <sjn_phone> dssmaamakgkghdhhbb

[14:20] <ShimmerFairy> I'm guessing I don't want to be familiar with mlehmann :)

[14:20] <sjn_phone> m  ad wn bmbgfgregee

[14:20] <tadzik> :D

[14:20] *** ChanServ sets mode: +o masak

[14:20] <tadzik> sjn pls

[14:20] *** sjn_phone was kicked by masak (sjn_phone))
[14:20] *** ChanServ sets mode: -o masak

[14:20] <timotimo> it was just getting interesting, masak :(

[14:20] <tadzik> I THINK THEY'RE TRYING TO COMMUNICATE WITH US

[14:21] <timotimo> the phone was calling out for its DAD!

[14:21] <brrt> i don't consider a CS match a public space in the way twitter is

[14:21] <ShimmerFairy> Ultimately, I just want our code of conduct to be a reflection of exactly how we've been able to keep up such a nice and welcoming atmosphere. Nothing more than that. :)

[14:21] <timotimo> right; i think that's a good stance, ShimmerFairy

[14:21] <brrt> in the same way that e.g. a soccer match isn't a public space, even though it may happen in public

[14:21] <PerlJam> ShimmerFairy++

[14:22] <timotimo> brrt: but soccer players still get a bit of backlash when they, for example, headbutt someone?

[14:22] <masak> ShimmerFairy: I like that.

[14:22] <brrt> there is no expectation of a wider audience than those directly involved

[14:22] <brrt> hmm

[14:22] <brrt> good point

[14:22] <timotimo> oh, you're talking about soccer matches between regular people

[14:22] <PerlJam> (and I wish we could stop calling it a "code of conduct" ... it's totally the wrong tone)

[14:22] <b2gills> I just wanted to bring it up. ShimmerFairy++

[14:22] <brrt> aye

[14:22] <timotimo> i thought you were also including nationwide and worldwide tournaments and such

[14:23] <ShimmerFairy> We could intelligently discuss the merits of constraining social interactions all day, but the base issue is just putting down how we've already been able to manage this complex issue :)

[14:24] <masak> I think we should pat ourselves a little on the back for having done well so far.

[14:24] <masak> but I also think much of the "nice" that we have could quite easily be decimated by a concerted effort of trolls.

[14:25] <timotimo> right, there's no reason to think we'd never get hit by such an effort ever

[14:25] <masak> the fact that that hasn't happened is partly luck and partly because we're a very small community, and not all that noticeable.

[14:25] <masak> as Perl 6 grows, which may happen after release, our luck may change, and we might become more noticeable.

[14:26] <Woodi> I must strongly disagree ! CS is not "such place" !

[14:26] <ugexe> i would say youve been able to maintain the niceness of the community through (relatively) slow growth. once that increases it will become harder to maintain a majority of such 

[14:26] <masak> ugexe: yes, exactly.

[14:27] *** iH2O joined
[14:27] <masak> Woodi: what exactly are you objecting to?

[14:27] *** iH2O left
[14:27] <masak> Woodi: CS is not a place at all. it's an academic field.

[14:27] <timotimo> i think he's refering to when tadzik talked about Counter-Strike

[14:27] <masak> oh!

[14:27] <masak> you young people :P

[14:28] <ShimmerFairy> I think the most important thing is to assure everyone that they will not face swift (and thus potentially wrong) responses from the community for their behavior, nor will they be discriminated against for any part of who they are.

[14:28] <Woodi> masak: that Counter-Strike is full of shit throving persons, etc :)

[14:28] <masak> Woodi: but tadzik said that he had met one, and that she was cute. :)

[14:28] * colomon is wondering if he could use http://termux.com/ to install perl6 on his phone…

[14:29] <tadzik> masak: fsvo cute... :P

[14:29] *** khw joined
[14:30] <tadzik> but yeah, in general it's a horrible place to be a nice human being in

[14:30] <tadzik> I'm glad this place is different :)

[14:30] <Woodi> I think moust shit in CS and games comes from hackers, but they are bunned and problem solved

[14:30] <tadzik> nah

[14:30] <masak> tadzik: horrible place. I hear you can even get shot at in CS!

[14:31] <tadzik> masak: by your own kin! For fun!

[14:31] *** brrt left
[14:31] <tadzik> (honestly, this is hilarous though)

[14:31] <Woodi> multiple times. but than is not the point !

[14:31] <tadzik> "Hey, behind you! *TASER*"

[14:31] *** sjn_phone joined
[14:32] <Woodi> about CoC: it should not be long... no racism, tolerance, no crime

[14:32] * sjn_phone apologizes for the noise I made a little while ago 

[14:32] <ugexe> no crime?

[14:33] <PerlJam> well I'm leaving if I can't commit crimes!

[14:33] <moritz> Woodi: "no crime" isn't easy. Stuff that's perfectly legal in my country could be a crime in yours, and the other way around

[14:33] <timotimo> sjn_phone: no hard feeling :)

[14:33] * masak hugs sjn_phone 

[14:33] * timotimo BBIAB

[14:33] <El_Che> COC almost teared some communities apart, e.g. ubuntu. So step carefully

[14:34] <Woodi> I am pretty sure that stiling and killing is nearly globally prohibited

[14:34] <PerlJam> moritz: maybe "crime" could mean something more universally against humanity than something legislated by a particular jurisdiction.

[14:34] <ugexe> we dont need to state the obvious

[14:34] <tadzik> yeah, we do :(

[14:34] <Woodi> CoC is such thing

[14:34] <tadzik> I mean, that's part of the point

[14:34] <ugexe> dont stab people?

[14:34] * sjn_phone hides under a rock in embarrassment 

[14:35] <ugexe> it wont be taken seriously if you put such things

[14:35] <PerlJam> ugexe: surgeons stab people on purpose sometimes  :)

[14:35] <El_Che> what's illegal today may be leal tomorrow (e.g. resistence/terrorist viewpoint during war and education)

[14:35] * El_Che looks at his collection of cans of worms

[14:35] <b2gills> It was once illegal to perform blood transfusions.

[14:35] <llfourn> (it was once illegal to be gay)

[14:35] <ugexe> not in antartica

[14:36] <El_Che> llfourn: you illinformed zealot! not to be gay, to act on it :)

[14:36] <masak> today on #perl6: an embarrassed phone hiding under a rock

[14:36] <PerlJam> ugexe: Maybe ... we don't need to *enumerate* the obvious  :)

[14:36] <El_Che> PerlJam: wikipedia style :)

[14:36] <b2gills> hopefully the rock doesn't scratch the screen

[14:36] <llfourn> El_Che: point taken

[14:37] <El_Che> llfourn: just being silly paraphrasing the pope

[14:37] <masak> I think it's less about following a set of rules, and more about empathy and such

[14:37] <El_Che> (it used to be illegal to be o the popist religion on some regions, here we go :) )

[14:37] <ugexe> my point is, if you commit what most would consider a henious crime, the authorities are going to be taking care of it

[14:37] <PerlJam> masak: Exactly!  Empathy is key.

[14:38] <El_Che> A lot of people in it lack empathy without being evil. They kind of like a set of rules. For other it's kind of insulting to state the obvious

[14:38] <Woodi> empaty covers crime-makers too

[14:38] <llfourn> "malicious activities" maybe instead of crime

[14:38] *** tinyblak_ left
[14:39] <masak> I'm not even saying people have to have empathy. I'm saying that's the expected ideal.

[14:39] <masak> if you can fake empathy with a set of rules, fine.

[14:39] <masak> but I also think reducing things to rules will always miss the point

[14:40] <masak> I'm not just saying this because I'm a romanticist or something. I think rules are not ultimately what we're after, but niceness and the feeling of community

[14:46] <El_Che> "We strive to be a friendly and inclusive community. Whatever your identity or background, you can expect to be treated respectfully by everyone in the community. In turn, you are expected to treat others in the same way."

[14:47] <masak> I like that.

[14:48] <masak> though s/strive to be/are/ :)

[14:48] <El_Che> going to far in specifics will require things like CoC-commitee, arbriters and the kind

[14:48] * moritz like it too. Short and to the point.

[14:49] <jaffa4> Sorry what is CoC?

[14:49] <El_Che> I prefer the strive or something similar because it factor in the times we fail while being active

[14:49] <El_Che> jaffa4: Code of Conduct

[14:50] <jaffa4> Where?

[14:50] <sjn_phone> Probably a good idea to not be too specific in a CoC. Not go into issues around law and crime and such. I like  El_Che's text too

[14:50] <El_Che> jaffa4: here is a more detailed kind: http://www.ubuntu.com/about/about-ubuntu/conduct

[14:50] <El_Che> I think it's overkill at the moment

[14:51] <masak> I especially like the phrasing "you can expect to". it's not that it will happen, guaranteed. but you can set it as an expectation.

[14:51] <ShimmerFairy> Something like that would be a good addition to the top of S27, methinks :)  (though with the same s/strive to be/are/ suggestion as masak)

[14:51] <El_Che> if people within set the example those few lines can be enforced by being naturalized

[14:51] <El_Che> (the more you specify something the less natural it is)

[14:52] <raiph> masak: I think it's much thornier than "reducing things to rules will always miss the point". I think rules invoke the same brain circuits that cause problems in the first place. (Put another way, our capacity to be "present" is precisely our capacity to not follow rules.)

[14:52] <yoleaux> 21 Jul 2015 20:55Z <jnthn> raiph: generally one of --ll-exception or set a breakpoint in Moar where it throws that if you need to dig deeper; trouble is that error is pretty much always telling you that some *other* thing is wrong

[14:52] <raiph> .tell jnthn Thanks

[14:52] <yoleaux> raiph: I'll pass your message to jnthn.

[14:53] *** sjn_phone_ joined
[14:55] <El_Che> here is the COC text for later discussions: https://gist.github.com/nxadm/13c4817dd1b4b792a99f

[14:55] *** [Sno] left
[14:56] *** [Sno] joined
[14:56] *** sjn_phone left
[14:57] *** JimmyZ_ left
[14:58] <masak> raiph: I think I see what you're getting at.

[14:59] *** kaare_ joined
[15:03] *** kaare_ left
[15:05] <[Coke]> perljam: (code of conduct wrong tone) What would you suggest it be called, and why don't you like CoC?

[15:05] *** kaare_ joined
[15:06] * [Coke] wonders why it goes from pope to papist, and if that's english's fault or whoever we stole it from.

[15:08] *** domidumont left
[15:10] <masak> [Coke]: English's fault. in OE it's pāpa

[15:10] <llfourn> I finally wrote the docs I said I would for importing and exporting: https://github.com/perl6/doc/pull/104

[15:10] <llfourn> if someone can review :)

[15:11] *** pmurias left
[15:12] *** araujo left
[15:12] *** g4 left
[15:14] <PerlJam> [Coke]: I dunno ... it sounds very authoritarian and what we have is more "this is what's worked for us, try to emulate it as best you can".   I like ShimmerFairy's draft title (rather than CoC):  Policy of Decent Behavior

[15:15] <masak> yeah, both "code" and "conduct" seem unnecessarily strict compared to what we have.

[15:15] <masak> and, as has been pointed out, the concept of a CoC itself has been somewhat tarnished already.

[15:16] <PerlJam> Maybe just call it the "Policy of Decency" and we can pun PoD again  :)

[15:17] <timotimo> the PoD6?

[15:17] <PerlJam> "We follow the Pod!"  (what are we? whales?)

[15:17] <masak> yes. we are whales.

[15:18] <timotimo> we are so few because there's been some excessive whaling going on

[15:20] <PerlJam> I think I like "policy of decency" ... it's like the "principle of least surprise"; it's a really good idea.

[15:20] <[Coke]> I'm not sure I'd go so far as to say it's been tarnished.

[15:20] *** JimmyZ_ joined
[15:21] <tadzik> I would

[15:21] <timotimo> it seems like the pure mention of "CoC" brings about a swarm of people with very specific ideas putting up strawmen all over the place

[15:22] <El_Che> "Policy of Decency" sounds intolerant

[15:22] <timotimo> at least in some circles ... reading the comments section on the "why the open code of conduct isn't for me" blog post on reddit ...

[15:22] <El_Che> don't show your legs you hippy!

[15:22] <PerlJam> El_Che: intolerant to what?

[15:22] <PerlJam> oh.

[15:22] <El_Che> decency is very relative

[15:22] <timotimo> hm, right, there's also *that* meaning of "decent"

[15:22] <timotimo> so how about "Definition of Decenly" or something in that direction?

[15:22] <timotimo> "here's what we consider decent"

[15:23] <El_Che> I'd say away from morality and decency

[15:24] <El_Che> what about "community guidelines"

[15:24] <El_Che> "perl 6 decorum"

[15:24] <El_Che> "perl 6 social code"

[15:25] <ShimmerFairy> My pick would be "Community Guidelines"; gets the point across without sounding so serious :)

[15:26] <El_Che> I am on fire!

[15:26] <El_Che> :)

[15:26] <El_Che> hah

[15:26] <timotimo> who put you on fire? :(

[15:26] <El_Che> updated the gist 

[15:26] <El_Che> the roof is on fire!

[15:26] *** domidumont joined
[15:27] <timotimo> even one who copulates with mothers - be it their own or other people's - deserves to be put out if they are on fire

[15:27] <llfourn> ^^ put that in there

[15:28] *** abraxxa left
[15:28] <El_Che> that could be a bloodhound Gang song

[15:28] <ugexe> i believe myztikal already wrote that song, and they were appreciative of being on fire

[15:28] <timotimo> "let's do it like they do on the IRC channel"?

[15:29] *** abraxxa joined
[15:29] <El_Che> :)

[15:29] *** domidumont1 joined
[15:31] <RabidGravy> I'm firmly convinced that the *next* thing I make is going to be a sort of h2xs equivalent for 6, I'm loosing the will to live typing this stuff

[15:31] <jnthn> RabidGravy: There's already a C::Parser in the ecosystem that you might be able to use, iirc.

[15:31] <yoleaux> 14:52Z <raiph> jnthn: Thanks

[15:32] *** domidumont left
[15:32] <timotimo> people are "flipping their shit" on this reddit thread based on the "we explicitly honor diversity in [...] technical ability" wording in the OCoC, because they think it means they now have to accept any PR that comes along even if it's plain and simple bad code

[15:34] <El_Che> the lines above just says "we'll reject the PR respectfully, nothing more" :)

[15:34] <raiph> What about being very explicit that we must welcome 7 year olds, without qualification?

[15:34] <raiph> (er, s/welcome/be a safe place for/)

[15:35] <timotimo> raiph: please elaborate a bit more?

[15:37] *** sjn_phone_ left
[15:37] <timotimo> i can't tell from these few words if you're intending to say "we should welcome young people who choose to join our community" or "it's not a good idea to universally welcome everyone into the community"?

[15:37] <RabidGravy> time like this calls for a Leffe

[15:37] <hoelzro> RabidGravy: I have a little script that I wrote that does this for Xapian headers: https://github.com/hoelzro/p6-xapian/blob/master/generate-binding.p6

[15:38] <hoelzro> mmmmm Leffe

[15:38] *** zakharyas left
[15:39] <RabidGravy> hoelzro, nice one :)

[15:39] <hoelzro> it's a little messy...

[15:39] <lizmat> good *, #perl6!

[15:39] <hoelzro> o/ lizmat 

[15:39] <lizmat> hoelzro o/

[15:40] <lizmat> waking up for another day at the Perl booth at OSCON

[15:40] <lizmat> not nudging anybody for the P6W

[15:40] <jnthn> o/ lizmat, hoelzro 

[15:40] <lizmat> jnthn o/

[15:40] <jnthn> heh, I failed to write my "what I did last week" report for another day in a row yesterday, at this rate it might still make the weekly :P

[15:41] <RabidGravy> jnthn, yeah I had a look at that a week or so ago and I couldn't get it to work for the files I was looking at and as the yak stack was already several deep I didn't pursue

[15:41] * jnthn is in the final stages of getting a course ready to teach next week, which is why he's a little more distracted than he'd like to be from Perl 6 hacking

[15:41] <[Coke]> ff

[15:41] <jnthn> Good news is, after Wednesday next week I don't have to teach a single thing again until some time in September. :)

[15:41] <raiph> timotimo: The former. I invited an 8 year old onto #perl6, feeling comfortable that she wouldn't be told

[15:42] <[Coke]> ww.

[15:42] <raiph> "that's off topic", or sworn at for being unclear, or whatever.

[15:43] <RabidGravy> I'd be worried, but that's largely because I swear so much

[15:43] <jaffa4> jnthn:  what is the course going to be about?

[15:43] *** estrabd joined
[15:43] <timotimo> sounds good to me :)

[15:44] <RabidGravy> my FB is definitely 18+ even for members of the family because of the language that often gets used

[15:45] <jnthn> jaffa4: Domain Driven Design and various functional-ish implementation techniques, including event sourcing...

[15:46] <raiph> timotimo: http://irclog.perlgeek.de/perl6/2013-03-01#i_6510638

[15:46] *** Humbedooh left
[15:47] *** MilkmanDan left
[15:47] *** Ven left
[15:47] <timotimo> ah, i was already around at that time, but i didn't see that happen

[15:49] <timotimo> that use of <? !>.pick x (^99).pick though ;)

[15:50] *** Humbedooh joined
[15:50] <timotimo> not that i wouldn't have done the same thing if i had had an internet connection back then

[15:50] *** lizmat left
[15:50] *** Humbedooh left
[15:50] *** Humbedooh joined
[15:51] *** MilkmanDan joined
[15:54] *** tinyblak joined
[15:55] <RabidGravy> when I was eight the arpanet NCP was still being developed

[15:55] *** mtj_- left
[15:56] *** rudi_s left
[15:56] *** espadrine joined
[15:57] *** espadrine_ left
[15:57] *** Humbedooh left
[15:57] *** daxim_ left
[15:57] <llfourn> I think the 8 year old version of me had the self control to follow any CoC

[15:57] *** abraxxa left
[15:57] *** daxim_ joined
[15:58] *** rudi_s joined
[15:58] *** mtj_- joined
[15:58] <llfourn> I don't think*

[15:58] *** abraxxa joined
[15:59] <lucasb> It seems that non-literal regex objects in boolean context try to match with $_. Is that intended? Any place in the spec says about it?

[15:59] <lucasb> Things like: "if $regex {}", "if rx/.../ {}"

[16:01] <PerlJam> S05:2352

[16:01] <synbot6> Link: http://design.perl6.org/S05.html#line_2352

[16:01] <PerlJam> oh. I misread what you said

[16:02] <PerlJam> But it probably says that somewhere around there.

[16:02] *** Ven joined
[16:02] *** Ven left
[16:02] *** Humbedooh joined
[16:03] *** Humbedooh left
[16:03] *** Humbedooh joined
[16:03] *** simcop2387 left
[16:04] <RabidGravy> lucasb, I think there was a bug in there that it would crap out if $_ wasn't defined.  That it got fixed and still works like that suggests that someone thought it was on purpose ;-)

[16:04] <llfourn> m: my $r = /foo/; if $r { say "win" }

[16:04] <camelia> rakudo-moar e41624: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/2LmolFC995:1␤␤»

[16:05] <RabidGravy> oh maybe it didn't get fixed then

[16:05] <lucasb> Well, the spec says something about /.../ and rx/.../ should behave the same in boolean context

[16:06] <lucasb> I my doubt was more with "if $regex {}"

[16:06] <llfourn> m: if /foo/ { say "win" }

[16:06] <camelia> rakudo-moar e41624: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/bkKEQMqNwz:1␤␤»

[16:06] <llfourn> m: if rx/foo/ { say "win" }

[16:06] <camelia> rakudo-moar e41624: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/NRoOb330EM:1␤␤»

[16:06] <lucasb> llfourn: You are not setting $_

[16:06] <llfourn> they all seem to behave the same way

[16:06] * hoelzro just typed "git checkout nomaster"

[16:06] <lucasb> There is another tiny thing:

[16:06] <PerlJam> Though that error is certainly LTA

[16:07] <hoelzro> that's an interesting blend of nom & master...

[16:07] <llfourn> m: $_ = bar; if rx/foo/ { say "win" }

[16:07] <camelia> rakudo-moar e41624: OUTPUT«5===SORRY!5=== Error while compiling /tmp/4qh51jnudY␤Undeclared routine:␤    bar used at line 1. Did you mean 'bag'?␤␤»

[16:07] *** simcop2387 joined
[16:07] <lucasb> m: $_ = 'a'; say /a/.Bool

[16:07] <camelia> rakudo-moar e41624: OUTPUT«True␤»

[16:07] <RabidGravy> right, but it shouldn't crap out if $_ isn't set

[16:07] <lucasb> m: $_ = 'a'; say so /a/

[16:07] <camelia> rakudo-moar e41624: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/QOg79DBoyo:1␤␤»

[16:10] <raiph> llfourn: I think it's helpful to focus on the case of dealing with actual 7 year olds, partly because that puts the onus on us, not the visitor; partly because many of us (me!) will still experience that inner 7 year old's thinking, even if we're grounded in equanimity (and even more so if not); and partly because it might focus attention on an eli

[16:10] <raiph> 7 CoC first, and then we can elaborate if need be

[16:10] <timotimo> "it might focus attention on an eli" ?

[16:11] <PerlJam> (Eli is the 7 year old ;)

[16:11] <raiph> timotimo: an eli5 2 years later :)

[16:11] <timotimo> ah

[16:12] <timotimo> i thought the word was cut off %)

[16:12] <raiph> maybe perl6 could have the first eli7 coc :)

[16:12] <TimToady> how bout elly7?

[16:12] <yoleaux> 08:43Z <jnthn> TimToady: Wow, yes...also if we figure out what bits of the declaratively matched stuff we need not run procedurally. If you have a good idea how to represent that and get the NFA runner itself to collect the info, I can probably figure out how to pass the info on downwards...

[16:12] <yoleaux> 08:43Z <jnthn> TimToady: where "represent that" is the fates of the sublexers...

[16:14] <PerlJam> m: say ?/a/

[16:14] <camelia> rakudo-moar e41624: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at /tmp/CQ9hMfdbaG:1␤␤»

[16:14] <llfourn> raiph: I understand part of what you mean. 7 year olds who can figure out irc should def be welcome!

[16:14] <llfourn> raiph: I like seven year olds don't know what equanimity means.

[16:14] * llfourn looks up equanimity

[16:14] <raiph> TimToady: Explain it like Larry's 7?

[16:18] <dalek> rakudo/nom: 96fed87 | moritz++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[16:18] <dalek> rakudo/nom: RT #125663: Better error message for bare Proxy.new

[16:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/96fed8766a

[16:18] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125663

[16:20] *** lestrrat joined
[16:24] <RabidGravy> after all most of  the time you need to explain things to me like I was 7

[16:25] *** abraxxa left
[16:28] <ugexe> explain things to me like im stoned or drunk (depending on what time it is)

[16:30] *** rangerprice joined
[16:30] <RabidGravy> or stoned and drunk - the subset stops us having to worry about the timezone difference

[16:31] <rangerprice> hi 

[16:31] <RabidGravy> erp

[16:34] *** mr-foobar left
[16:34] *** mr-foobar joined
[16:34] <jdv79> ugexe: how come the code snippets in your blog post are hidden behind a smaller viewport?

[16:35] <jdv79> its a pain to have to scroll each one even though my screen is way larger than the code

[16:37] *** atroxaper left
[16:37] *** atroxaper joined
[16:37] *** atroxaper left
[16:37] <RabidGravy> I'd go with one of "shitty wordpress plugin", "insufficient giving a shit about web design", "because that's how it came out"

[16:37] <RabidGravy> ;-)

[16:37] <ugexe> lol

[16:39] <moritz> I'd go with "that's what you call reacti... oh, wait!"

[16:39] <moritz> erm, "responsi..."

[16:39] <ugexe> yeah, ill have to flex my c&p skills a bit after finding a better one

[16:39] <jdv79> well, github does it similarly so i guess its not that abnormal

[16:39] <jdv79> forgot about that

[16:39] <TimToady> way too many sites assume young eyes that can read teeny tiny fonts

[16:40] <ugexe> i can remove a level of indentation in the code if i swap out a `for` for a >>

[16:40] <TimToady> it's a free-form language, you can just run it through format(1)

[16:41] <RabidGravy> I dunno I accidentally ran a whole file through fmt and it royally shagged it up

[16:42] <hoelzro> are finalizers (ie. DESTROY) guaranteed to run at the end of a process? my experience seems to indicate "no", but the specs for exit() seem to imply "yes"

[16:42] <moritz> hoelzro: no

[16:42] <RabidGravy> didn't do much for the readability either

[16:42] *** lizmat joined
[16:43] <hoelzro> the specs for exit() should be changed, then

[16:43] <hoelzro> what contributed to that decision, if I may ask?

[16:44] <moritz> hoelzro: performance

[16:45] <moritz> hoelzro: it saves us from doing a full collection at program exit

[16:45] <TimToady> it's not embedding friendly though

[16:45] <moritz> hoelzro: and most DESTROY methods do cleanup stuff that are redundant at program exit (closing connections, file handles etc.)

[16:45] <RabidGravy> does Perl6 run on any operating systems where not freeing some resource before process exit would cause a problem?

[16:46] <RabidGravy> currently that is

[16:46] <hoelzro> is that in the interest of returning control to the user in a CLI environment more quickly?

[16:46] <TimToady> define "operating system" and "process"

[16:46] <hoelzro> judging from the way MoarVM implements finalization at the moment, it seems to me that finalizers could be run at exit without incurring a full GC

[16:46] <RabidGravy> I guess no-one is queuing up to port to AmigaOS

[16:46] <TimToady> is apache an operating system for its sub-processes?

[16:47] <hoelzro> excellent question

[16:50] *** rangerprice left
[16:51] <lizmat> hoelzro: the way I understand finalizers in MoarVM, is that you *would* need a full GC run to run *all* finalizers

[16:51] *** spider-mario joined
[16:52] <hoelzro> from how I understand the code, MoarVM maintains a list of all live objects that have a finalizer

[16:52] *** espadrine left
[16:53] <TimToady> how does the JVM eval server handle the embedding?

[16:53] <hoelzro> https://github.com/MoarVM/MoarVM/blob/master/src/gc/finalize.c#L24

[16:53] <hoelzro> granted, that implementation may change

[16:54] <lizmat> hoelzro: but isn't that list generated at the moment they are moved from the nursery?

[16:54] <hoelzro> that's what I thought at first

[16:55] <hoelzro> https://github.com/MoarVM/MoarVM/blob/master/src/gc/allocation.c#L94

[16:55] <lizmat> so any objects in the nursery  not moved yet will not be known to have a finalizee?

[16:55] <hoelzro> but that looks like it's at allocation time

[16:55] <lizmat> ah, ok...  well, I guess jnthn will be able to tell for sure  :)

[16:55] *** [Sno] left
[16:56] *** [Sno] joined
[16:56] <hoelzro> indeed =)

[16:57] *** domidumont joined
[17:00] *** domidumont1 left
[17:01] <nine> moritz: most, but certainly not all. Inline::Perl5's DESTROY shuts down the perl5 interpreter which causes it for example to flush output buffers. By not running d'tors on exit, we often lose output done by Perl 5 code.

[17:03] <nine> Sadly this screws up even Hello World: nine@sphinx:~> perl6 -e 'EVAL "print qw(hello)", :lang<Perl5>;'

[17:03] <lizmat> so how about "exit( :teardown )" ?

[17:03] <nine> nine@sphinx:~>

[17:03] *** yqt joined
[17:04] <nine> lizmat: that would require Inline::Perl5 users to put that into every script.

[17:04] <lizmat> or maybe exit( :no-teardown )

[17:04] <lizmat> make the current behaviour settable

[17:05] <lizmat> nine: but, Inline::Perl5 could wrap Perl6's exit, no ?

[17:05] <moritz> nine: oh, good point

[17:05] <nine> How about some $*TEARDOWN defaulting to False? Inline::Perl5 knows that it needs reliable teardown and could set it.

[17:06] <nine> Is exit() called on every script exit? Even after die?

[17:07] <hoelzro> Inline::Perl5 is exactly why I bring up DESTROY =)

[17:07] <nine> Yes, $*TEARDOWN would cause a global change done in secret by some module you maybe didn't know you even loaded and Perl 6 generally tries to avoid this as much as possible. But we're talking about disabling a performance optimization, not more.

[17:08] <hoelzro> nine: I think exit() is only called when a developer actually calls it; I don't think it's implicitly called

[17:09] *** virtualsue joined
[17:09] <hoelzro> but there is some common teardown logic that should probably when exit() is called, a script is done, a (catchable) signal is sent to the process, or a script die()s

[17:09] <nine> Incidentally, Perl 5 has a similar switch called PL_destruct_level

[17:10] <dalek> rakudo/nom: 43a2cee | moritz++ | src/Perl6/Actions.nqp:

[17:10] <dalek> rakudo/nom: RT #125661: Wrongly reported error for non-existing private method

[17:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/43a2ceee9c

[17:10] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125661

[17:11] *** araujo joined
[17:12] <jnthn> moritz++ # fixing RTs

[17:15] <moritz> jnthn: that was a fun one

[17:15] <jnthn> nine: If you want something to run for sure at exit, why not deal with it using END?

[17:16] *** telex left
[17:16] <dalek> roast: 7502f61 | moritz++ | S12-methods/private.t:

[17:16] <dalek> roast: RT #125661: Error reporting for private methods in a try

[17:16] <dalek> roast: review: https://github.com/perl6/roast/commit/7502f61542

[17:16] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125661

[17:17] <hoelzro> interesting

[17:17] *** dakkar left
[17:18] *** yqt left
[17:18] *** telex joined
[17:26] *** [Tux] joined
[17:28] *** lizmat left
[17:30] *** lizmat joined
[17:32] *** mr-foobar left
[17:32] *** lizmat left
[17:33] <nine> jnthn: that's an....intriguing question. I'd have to keep a list of all existing Inline::Perl5 objects in the module, but I guess I will need that anyway if I ever manage to fix precomp.

[17:33] *** mr-foobar joined
[17:36] <moritz> std: "{@_}"

[17:36] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Placeholder variable @_ may not be used here because the surrounding block takes no signature at /tmp/KtKHm0o3jI line 1:␤------> 3"{7⏏5@_}"␤Check failed␤FAILED 00:00 135m␤»

[17:36] <moritz> std: sub { "{@_}" }

[17:36] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Placeholder variable @_ may not be used here because the surrounding block takes no signature at /tmp/Z31VYFmGpH line 1:␤------> 3sub { "{7⏏5@_}" }␤Check failed␤FAILED 00:00 137m␤»

[17:37] <nine> jnthn: but then DESTROY will for sure only be called on exit since my list will keep the objects alive.

[17:41] <moritz> m: my @result = gather { take 'foo=bar'.split('=') }; say @result

[17:41] <camelia> rakudo-moar 96fed8: OUTPUT«␤»

[17:41] <moritz> m: my @result = gather { my $dummy = take 'foo=bar'.split('=') }; say @result

[17:41] <camelia> rakudo-moar 96fed8: OUTPUT«␤»

[17:41] *** amurf joined
[17:42] <xinming> Is there weak ref idea in perl6?

[17:42] <jnthn> nine: Yeah, true...

[17:42] <jnthn> xinming: No

[17:43] <xinming> jnthn: In perl6, There will be no circular references of objects?

[17:43] <jnthn> I suspect we'll get them at some point in the future, but given you don't need them to solve circular data structure issues in Perl 6, they're not on the 6.christmas critical path (so they'll happen after it)

[17:43] <xinming> Ok, Got it.

[17:44] <jnthn> xinming: Sure there will; you only need weak references to solve that if your GC doesn't consider reachability. Perl 6 impls have a GC that does :)

[17:44] <nine> jnthn: what do you think about $*TEARDOWN?

[17:45] <jnthn> nine: It'll (a) need VM support, and (b) can only work if all VMs cooperate

[17:45] <xinming> Another question, How do we do auto cast of types? For now, perl6 forces types, And is there a syntax to do Auto cast or select a function to cast type to target type?

[17:45] *** Hor|zon left
[17:45] *** amurf left
[17:46] <xinming> Hmm, I'll read doc again. I was just offline and used perl6 to write some simple scripts, and got these questions. :-)

[17:47] <jnthn> nine: It's worth noting that the JVM actually deprecated their equivalent to what you're suggesting with $*TEARDOWN: http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#runFinalizersOnExit(boolean)

[17:48] <jnthn> xinming: Perl 6 doesn't force types; there are coercion types though (only supported in signatures so far) where you tell it to coerce 

[17:48] <jnthn> xinming: Writing type annotations in your program is opt-in, and the builtins are not strict :)

[17:48] *** lizmat joined
[17:48] *** estrabd left
[17:48] <llfourn> http://docs.perl6.org/language/functions -- at the bottom Coercion Types

[17:49] *** Bey joined
[17:49] *** estrabd joined
[17:50] <llfourn> jnthn: can you declare your own coercion types and coercion subs or is that planned?

[17:50] <lizmat> m: for ^10 -> $a, $b, $c { say $a,$b,$c }   # somehow I expected the last iteration to have 9,Any,Any

[17:50] <camelia> rakudo-moar 96fed8: OUTPUT«012␤345␤678␤Too few positionals passed; expected 3 arguments but got 1␤  in block <unit> at /tmp/pjIqdFNer3:1␤␤»

[17:51] <jnthn> lizmat: Optional

[17:51] <lizmat> Optional?

[17:51] <jnthn> lizmat: ?

[17:51] <jnthn> m: for ^10 -> $a, $b?, $c? { say $a,$b,$c }

[17:51] <camelia> rakudo-moar 43a2ce: OUTPUT«012␤345␤678␤9(Mu)(Mu)␤»

[17:51] <jnthn> Like that :)

[17:51] <Bey> I'm trying to use Bailador. I use a simple code : get '/' => sub { "hello world ! }. But when I go at http://0.0.0.0:3000/, there is nothing....

[17:52] <jnthn> lizmat: You can pick defaults too

[17:52] <lizmat> m: for ^10 -> $a, $b, $c { say $a,$b,$c }   # somehow I expected the last iteration to have 9,Any,Any

[17:52] <camelia> rakudo-moar 43a2ce: OUTPUT«012␤345␤678␤Too few positionals passed; expected 3 arguments but got 1␤  in block <unit> at /tmp/ZuKUHdzBNa:1␤␤»

[17:52] <xinming> llfourn: THanks, Will read them.

[17:52] <flussence> Bey: try 127.0.0.1

[17:52] *** virtualsue left
[17:52] *** simcop2387 left
[17:52] <jnthn> lizmat: Then you expected wrong. :)

[17:53] <Bey> flussence : I've already done, it does'nt work...

[17:53] <jnthn> lizmat: We can't just pass Mu or Any also, 'cus the type expected may be tighter...

[17:54] <jnthn> llfourn: You can write your own coercion logic either with a method on the thing being coerced, or making the target invokable (the latter will surely change as it's crazy... :))

[17:55] <llfourn> jnthn: Thanks. I'm guessing coercion to Int you implement .Int?

[17:55] <lizmat> jnthn: but I seem to recall that that was just what it was supposed to do?

[17:55] <lizmat> hmmm...

[17:55] *** mr-foobar left
[17:55] <jnthn> Yes

[17:55] <jnthn> lizmat: No, it's never been designed that way afaik

[17:55] <flussence> star: use Bailador; get q{/} => sub { "hello world" }; say 'alive'

[17:55] <camelia> star-m 2015.03: OUTPUT«alive␤»

[17:55] *** simcop2387 joined
[17:55] <jnthn> llfourn: Yes

[17:56] <llfourn> jnthn: Thanks! Will document :)

[17:56] *** Hor|zon joined
[17:56] <flussence> «perl6 -MBailador -e 'get q{/} => sub { "hello world!" }; baile'» works fine here...

[17:56] *** mr-foobar joined
[17:57] <llfourn> ^^ the above also works for me

[17:57] <flussence> (and "curl 0.0.0.0:3000" works too, which I did not expect)

[17:57] *** diana_olhovik joined
[17:58] <Bey>  Rakudo tells me there is no error, but I've nothing in my browser

[17:58] <lucasb> m: sub f {}; try f(1); say 'alive'

[17:58] <camelia> rakudo-moar 43a2ce: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gvaPHi0K9j␤Calling f(int) will never work with declared signature ()␤at /tmp/gvaPHi0K9j:1␤------> 3sub f {}; try 7⏏5f(1); say 'alive'␤»

[17:59] <flussence> does it print any log messages at all when you try to open the URL?

[17:59] <masak> lucasb: it's failing at compile-time, and so the `try` is too late to help.

[17:59] <llfourn> Bey: can you try telnet localhost 3000?

[17:59] <lucasb> masak: hmm, let me test something here :)

[17:59] <Bey> I'm stupid. It works perfectly with localhsot:3000

[18:00] <Bey> That's strange...

[18:01] <lucasb> perl6 --optimize=off -e 'sub f {}; try f(1); say "alive"'

[18:01] <Bey> Very strange.. anyw, thanks for the gelp !

[18:01] <lucasb> ^^ that works, with optimize off

[18:01] <lucasb> this is after moritz latest commit

[18:02] <flussence> oh well... wonder why localhost works and 127.0.0.1 doesn't.

[18:02] <jnthn> lucasb: Sure, 'cus the optimizer does the analysis that proves your code could never possibly work

[18:02] <jnthn> lucasb: It's actually trying to work out if it can do various opts, but sometimes finds that a call is simply impossible.

[18:03] <lucasb> so... my program changes behaviour with/without --optimize=off ?

[18:04] <jnthn> lucasb: Your program *doesn't even run* with --optimize=off

[18:04] <jnthn> uh, without it

[18:04] <jnthn> It says "==SORRY==" which means you didn't make it to runtime.

[18:05] <lucasb> jnthn: Are we on the same revision? :)

[18:05] <jnthn> lucasb: I'm going on the camelia output above.

[18:05] <jnthn> m: sub f {}; try f(1); say 'alive'

[18:05] <camelia> rakudo-moar 43a2ce: OUTPUT«5===SORRY!5=== Error while compiling /tmp/DBbQTYPE18␤Calling f(int) will never work with declared signature ()␤at /tmp/DBbQTYPE18:1␤------> 3sub f {}; try 7⏏5f(1); say 'alive'␤»

[18:05] <jnthn> The ===SORRY!=== there means it's a compile-time error

[18:06] <lucasb> ok, so with optimize it fails, but *without* optimize it works?

[18:07] <flussence> what you're doing there is the equivalent of trying to assign to *NULL in C then catching the resulting segfault. You might be able to bludgeon gcc into compiling it, but it's doing you a favour by not

[18:07] <PerlJam> lucasb: "works" is probably a little kind :)

[18:07] <jnthn> lucasb: With optimize it does exactly what is intended.

[18:12] <jnthn> lucasb: Without it, a piece of code that is always going to throw a runtime exception makes it to runtime and does so.

[18:12] <lucasb> jnthn: And then, the 'try' catches it and the program outputs 'alive'

[18:12] <jnthn> *sigh* you're not listening, and I'm going to make dinner.

[18:12] <jnthn> &

[18:12] <lucasb> jnthn: Sorry, I'm just confused :)

[18:12] <lucasb> For context, I'm on 43a2cee here locally

[18:12] <lucasb> perl6 --optimize=off -e 'sub f {}; try f(1); say "alive"'  #=> outputs 'alive'

[18:12] <lucasb> perl6 -e 'sub f {}; try f(1); say "alive"'  #=> dies with "SORRY ..."

[18:12] <PerlJam> lucasb: correct

[18:12] <RabidGravy> yes, because the try caught the failure to run the sub

[18:12] <lucasb> I'm just saying the behaviour change with/without optimize

[18:12] <PerlJam> lucasb: right.

[18:13] *** lizmat left
[18:13] <lucasb> ok, thanks! I think we are now on the same page :)

[18:13] <RabidGravy> with optimse on code fails at compile time, off it fails at run time

[18:13] *** lizmat joined
[18:13] <PerlJam> fails, but you ignore the failure

[18:13] <RabidGravy> except the try stops it from reporting

[18:14] <masak> lucasb: heh, I already explained what's confusing you above.

[18:14] <masak> <masak> lucasb: it's failing at compile-time, and so the `try` is too late to help.

[18:14] <flussence> m: sub f {}; BEGIN try f(1); say 'alive'

[18:14] <camelia> rakudo-moar 43a2ce: OUTPUT«5===SORRY!5=== Error while compiling /tmp/dYqd7aioTO␤Calling f(int) will never work with declared signature ()␤at /tmp/dYqd7aioTO:1␤------> 3sub f {}; BEGIN try 7⏏5f(1); say 'alive'␤»

[18:14] <lucasb> masak: That was the first message, indeed; I should have tried to understand a little better. Thanks

[18:14] <flussence> m: sub f {}; try EVAL 'f(1)'; say 'alive'

[18:14] <camelia> rakudo-moar 43a2ce: OUTPUT«alive␤»

[18:17] <RabidGravy> the moral of the story is don't stop the compiler from helping you

[18:18] *** llfourn left
[18:19] <lucasb> For context, what I was saying was about this recently fixed bug 125661

[18:19] <lucasb> http://irclog.perlgeek.de/perl6/2015-07-15#i_10896584

[18:19] <lucasb> ^^ cognominal had already seen that before too

[18:23] *** lizmat left
[18:29] <masak> RabidGravy: yes, that's a good summary.

[18:30] *** lizmat joined
[18:31] <moritz> lucasb, cognominal: fwiw the bug was that 'try' makes Failures fatal by some AST wrapping, and that AST wrapping didn't preserve the .node property of the AST

[18:31] <moritz> (which is used for generating line numbers)

[18:31] <moritz> and the optimizer tripped over that while generating the error message

[18:32] *** tinyblak left
[18:35] *** lizmat left
[18:36] *** Bey left
[18:39] <lucasb> moritz: thanks for the explanation!

[18:39] *** muraiki joined
[18:40] <lucasb> again, thanks everybody and sorry for my stubbornness ;)

[18:40] *** brrt joined
[18:42] *** domidumont left
[18:45] *** colomon left
[18:50] <brrt> \o

[18:54] *** xfix joined
[18:54] *** diana_olhovik left
[18:57] *** rangerprice joined
[18:58] *** colomon joined
[18:59] <rangerprice> hi

[19:00] <brrt> hi rangerprice

[19:01] <rangerprice> how are you ?

[19:03] *** bin_005 joined
[19:05] <brrt> hmm.. ok, i guess

[19:05] <brrt> what about you? :-)

[19:06] <rangerprice> I'm fine :D

[19:07] <brrt> that's good to hear

[19:10] <moritz> m: say ((1, 2), <a b>).map({ .join(',')}).join('|')

[19:10] <camelia> rakudo-moar 43a2ce: OUTPUT«1,2|a,b␤»

[19:10] <moritz> m: say ((1, 2), <a b>).flatmap(&uc).join('|')

[19:10] <camelia> rakudo-moar 43a2ce: OUTPUT«1|2|A|B␤»

[19:11] <moritz> m: say &flatmap

[19:11] <camelia> rakudo-moar 43a2ce: OUTPUT«5===SORRY!5=== Error while compiling /tmp/C4x_bsX2EU␤Undeclared routine:␤    &flatmap used at line 1␤␤»

[19:11] *** colomon left
[19:11] *** colomon joined
[19:11] *** colomon left
[19:12] *** colomon joined
[19:13] <rangerprice> camelia: help

[19:13] <camelia> rangerprice: Usage: <(star-m|nqp-js|p5-to-p6|star-j|nqp-parrot|nqp-moarvm|pugs|rakudo-jvm|prof-m|std|niecza|debug-cat|rakudo-moar|nqp-jvm|n|rn|rm|Prn|nom|m|P|nr|r-m|star|r-j|r-jvm|sm|rPn|rnP|nqp-mvm|p6|nrP|nqp-p|sj|nqp-q|nqp|perl6|j|rakudo|Pnr|rj|nqp-m|nqp-j|r|nPr|p56)(?^::\s) $perl6_program>

[19:13] <rangerprice> m: say "hello world"

[19:14] <camelia> rakudo-moar 43a2ce: OUTPUT«hello world␤»

[19:14] *** espadrine joined
[19:17] *** yqt joined
[19:17] *** rangerprice left
[19:17] <dalek> doc: 9c3e602 | paultcochrane++ | lib/Type/Blob.pod:

[19:17] <dalek> doc: Link to unpack() correctly

[19:17] <dalek> doc: 

[19:17] <dalek> doc: This fixes issue #102.

[19:17] <dalek> doc: review: https://github.com/perl6/doc/commit/9c3e6022da

[19:18] *** sjn_phone_ joined
[19:19] *** inokenty left
[19:22] <dalek> doc: 3056664 | moritz++ | lib/Type/List.pod:

[19:22] <dalek> doc: Document flatmap

[19:22] <dalek> doc: 

[19:22] <dalek> doc: also mention that map does not flatten, and that map

[19:22] <dalek> doc: iterates $N-at-a-time depending on the signature

[19:22] <dalek> doc: review: https://github.com/perl6/doc/commit/3056664cd3

[19:25] <dalek> doc: 60bcf47 | (Lloyd Fournier)++ | lib/Language/modules.pod:

[19:25] <dalek> doc: Added section to modules.pod so it is about writing and loading modules

[19:25] <dalek> doc: as well as publishing them

[19:25] <dalek> doc: review: https://github.com/perl6/doc/commit/60bcf47e6e

[19:25] <dalek> doc: 5b306d4 | moritz++ | lib/Language/modules.pod:

[19:25] <dalek> doc: Merge pull request #104 from LLFourn/master

[19:25] <dalek> doc: 

[19:25] <dalek> doc: Increased scope of modules.pod by adding "Creating and Using" section

[19:25] <dalek> doc: review: https://github.com/perl6/doc/commit/5b306d4cff

[19:28] *** sjn_phone_ left
[19:29] *** sjn_phone_ joined
[19:29] <dalek> doc: 373e657 | moritz++ | CONTRIBUTING.md:

[19:29] <dalek> doc: CONTRIBUTING: use active voice

[19:29] <dalek> doc: review: https://github.com/perl6/doc/commit/373e657618

[19:29] <dalek> doc: 8b02392 | moritz++ | CONTRIBUTING.md:

[19:29] <dalek> doc: CONTRIBUTING: describe the role of Mojolicious in more detail

[19:29] <dalek> doc: review: https://github.com/perl6/doc/commit/8b02392974

[19:30] *** sjn_phone_ left
[19:30] *** sjn_phone_ joined
[19:31] *** sjn_phone_ left
[19:31] *** sjn_phone_ joined
[19:40] *** AlexDaniel joined
[19:41] <dalek> roast: 233c86e | moritz++ | S32-array/splice.t:

[19:41] <dalek> roast: RT #125571: splice should not allow to sneak in values that violate the type constraint of an array

[19:41] <dalek> roast: review: https://github.com/perl6/roast/commit/233c86ea3e

[19:41] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125571

[19:43] <[Tux]> niner: Your perl was not configured to build a shared library; unable to build

[19:44] <[Tux]> I didn't change anything in the past 12 days on that system. Why does this suddenly occur?

[19:46] <moritz> [Tux]: the detection of shared library builds is new; maybe it's a false error message in your case?

[19:47] <[Tux]> Inline::Perl5 now fails to install

[19:47] <[Tux]> I have a libperl.a which contains shared loaded objects

[19:47] <[Tux]> (note it is not a libperl.so)

[19:47] *** hobbified is now known as hobbs

[19:47] *** hobbs left
[19:47] *** hobbs joined
[19:48] *** colomon left
[19:48] *** brrt left
[19:48] <[Tux]> the fact the libperl is not called .so does not mean that it cannot be used!

[19:48] <[Tux]> all .o's that .a are -oPIC

[19:48] <[Tux]> -fPIC

[19:49] <[Tux]> test             50000    45.765    45.672

[19:49] <[Tux]> test-t           50000    45.060    44.967

[19:49] <[Tux]> just for your information

[19:52] <jnthn> [Tux]: What are the two columns?

[19:53] <jnthn> [Tux]: Previous run, current run?

[19:53] <[Tux]> 50000 is the counted "fields" if not 50000 it is wrong

[19:53] <[Tux]> 45.765 is the total run time of the proces

[19:54] <[Tux]> 45.672 is the same with the "perl6 -I. -e1' time subtracted

[19:54] <jnthn> aha

[19:54] <jnthn> Gotcha, thanks

[19:54] <[Tux]> 45.765/45.060 once was 38.6/35

[19:55] <[Tux]> 20150309

[19:55] <[Tux]> https://github.com/Tux/CSV/blob/master/README.speed

[19:56] <jnthn> When we were faster and wronger, I presume...

[19:56] <jnthn> And probably various other issues.

[19:56] *** brrt joined
[19:57] <jnthn> Hmm, 20150422 to 20150426 was a big jump

[19:57] <japhb> .tell El_Che I like the 'We are' variant at https://gist.github.com/nxadm/13c4817dd1b4b792a99f and I prefer "Community Guidelines" to both "Social Code" and "Code of Conduct" (the worst of those three IMO).

[19:57] * jnthn will have to take a look under the profiler to figure that out

[19:57] <yoleaux> 08:22Z <brrt> japhb: i like it, i'm playing devils advocate for a bit

[19:57] <yoleaux> japhb: I'll pass your message to El_Che.

[19:57] <yoleaux> 08:23Z <brrt> japhb: it's an implicit assumption that everyone *can* be a positive, kind member, and that's not really true, e.g. the TempleOS guy

[19:57] *** pecastro_ left
[19:58] <brrt> code of conduct is pretty generally disliked, it seems

[19:58] <PerlJam> aye.  "Community Guidelines" is way better

[19:58] <brrt> fairly sure that's due to the political/interest group connotation

[19:58] <japhb> yoleaux: I actually was *not* making the assumption that everyone can be positive and kind.  I think more people can than appears at first blush, but yes, some people just can't, and we shouldn't feel like we need to coddle them.

[19:59] <japhb> grrr, not yoleaux, brrt

[19:59] <brrt> :-)

[20:00] <brrt> yeah, i can see that point

[20:01] <brrt> another thing i noticed is that people reject the idea of specifying which 'minorities' 

[20:01] <brrt> would be 'guarded' by a CoC

[20:02] <PerlJam> because we don't discrimminate :)

[20:02] <hobbs> Good rules are timeless :)

[20:02] <masak> and it's practically the only way to be inclusive

[20:02] <japhb> As for the value of doing community guidelines, the previous commentators who said part of it is bracing against our own Endless September is a large part of it.  Part of it, as ShimmerFairy notes, is just giving people the psychological safety of knowing the community has their back, even when they are new enough that that is not already self-obvious.  Basically, making them feel safe enough to *join*, and spend their precious time here.

[20:03] <brrt> i think it's a good idea too; i think the underlying notion has many names eg qw(meritocracy inclusiveness diversity) 

[20:04] <japhb> Yes, exactly, I've never liked the idea of specifying a list of protected classes.  That just invites trouble.  But saying flat out that we don't discriminate is much better.

[20:04] <brrt> i'd classify that idea as 'the logic of discrimination does not apply here'

[20:06] <brrt> unfortunately, each of the above (e.g. meritocracy) also has its problems

[20:06] <japhb> hobbs++  # Yes, completely agreed.  We ought to be able to look at our guidelines in 100 years and still feel like they are the right ones.

[20:07] <masak> brrt: I see "meritocracy" being called out in various places as really meaning "status quo systemic inequality"

[20:07] <brrt> yeah, that for one thing

[20:08] <dalek> roast: c91fdd2 | moritz++ | S12-class/stubs.t:

[20:08] <dalek> roast: Fix test description

[20:08] <dalek> roast: review: https://github.com/perl6/roast/commit/c91fdd26e5

[20:08] <japhb> Yeah, meritocracy is a -1 from me.  It has been too often used to justify systematic biases.

[20:08] <brrt> one of the bigger problems of meritocracy is that you have to have a shared value system in the first place

[20:09] <japhb> brrt: Or even agree that "merit" is a low-dimensional space.

[20:09] <brrt> yes, that too :-)

[20:12] <japhb> Oh, one more thought on writing down these community guidelines: Perl 6 was always intended to be, among other things, the community's rewrite of itself.  I think we did a pretty good job of that.  Now we need to document that rewrite, so that other communities, now and in the future, can benefit from it.  Witness the simple effect of -Ofun, when we started publicizing that.

[20:13] <masak> japhb: +1

[20:13] <dalek> roast: 7f8b240 | moritz++ | S05-capture/dot.t:

[20:13] <dalek> roast: Remove three tests with wrong assumptions about capturing

[20:13] <dalek> roast: review: https://github.com/perl6/roast/commit/7f8b240e36

[20:13] *** jaffa4 left
[20:14] <japhb> I feel like we have a moral responsibility to make more of the world a better place, not just #perl6, and I think we have found (a tiny piece) of how to do that.  (Yes, maybe this marks me as an idealist -- but just like there's a moral reason for the Artistic License, I see a moral value here.)

[20:14] *** llfourn joined
[20:15] *** kaare_ left
[20:15] *** vendethiel joined
[20:15] * japhb feels like a young kid again saying stuff like that ... "Mom, Dad, why don't people just *stop having wars*?"

[20:16] <masak> well, kids are not exactly wrong asking that. it's a really good question.

[20:16] *** darutoko- left
[20:17] <brrt> unfortunately (call me what you will), sometimes there is a good answer

[20:17] <dalek> roast: bcc7651 | moritz++ | S06-operator-overloading/sub.t:

[20:17] <dalek> roast: Correct test, unfudge for rakudo (RT #124980)

[20:17] <dalek> roast: review: https://github.com/perl6/roast/commit/bcc7651bb8

[20:17] <synbot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124980

[20:18] <brrt> although i'm at a loss to find the good reason for most wars in recent history

[20:19] *** llfourn left
[20:20] <brrt> wwi, no good reason, wwii, no good reason, korean war, unknown, vietnam war, no good reason, first gulf war, hmmm

[20:20] <brrt> falkland war, not sure

[20:21] *** raiph left
[20:21] *** rindolf left
[20:22] <jnthn> Well, some regimes like to put in their troops to other countries to try and foster domestic support for themsleves...

[20:22] <brrt> that's... not a good reason, i think

[20:22] <jnthn> No, it's really, really not

[20:22] <jnthn> But depressingly common and - worst of all - successful

[20:22] <jnthn> In the immediate, anyway.

[20:22] *** FROGGS_ left
[20:23] <brrt> the first gulf war was actually quite reasonable. the kuwaiti had lots of oil and few people. the iraqi had lots of people and proportionally less oil

[20:24] <brrt> the allied forces had lots of reasons to ensure stable supply of oil

[20:24] <brrt> which was threatened

[20:24] * japhb hopes that he did not metaphorically throw a match into a powder room

[20:25] <japhb> In any case, I think there are lots of good reasons to write our community guidelines down.  I want them to feel like *our* guidelines, not someone else's.  And I want them to be timeless, operating at the same extra level of abstraction that Perl 6, and the community participants, already do.

[20:27] <jnthn> japhb: Heh, no, I'm just too easily distractable today. :) And +1 on "community guidelines" being documentation of the nice things we already have - though it's to help us hold on to them as well as sharing it with other communities, I think :)

[20:27] <brrt> there's a reason we've had a spot for S27 for all htis time :-)

[20:28] <japhb> jnthn: Yup, with you 100%.

[20:28] <japhb> brrt: :-)

[20:29] <dalek> Inline-Perl5: 070367e | (Stefan Seifert)++ | lib/Inline/Perl5.pm6:

[20:29] <dalek> Inline-Perl5: Manually shut down the first perl on program exit

[20:29] <dalek> Inline-Perl5: 

[20:29] <dalek> Inline-Perl5: Perl 6 does not guarantee that DESTROY methods are called at program exit.

[20:29] <dalek> Inline-Perl5: Make sure at least the first Perl 5 interpreter is correctly shut down and thus can e.g.

[20:29] <dalek> Inline-Perl5: flush its output buffers. This should at least fix the vast majority of use cases.

[20:29] <dalek> Inline-Perl5: People who really do use multiple Perl 5 interpreters are probably experienced enough

[20:29] <dalek> Inline-Perl5: to find proper workarounds for their cases.

[20:29] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/070367e243

[20:31] *** colomon joined
[20:32] <dalek> Inline-Perl5: 9ce0272 | (Stefan Seifert)++ | Build.pm:

[20:32] <dalek> Inline-Perl5: Revert "Detect perls not configured with a shared library"

[20:32] <dalek> Inline-Perl5: 

[20:32] <dalek> Inline-Perl5: This reverts commit f7b4564ae909100d3daaf9fb1b795e587e01903d.

[20:32] <dalek> Inline-Perl5: 

[20:32] <dalek> Inline-Perl5: Apparently Inline::Perl5 can also use a libperl.a instead of a libperl.so,

[20:32] <dalek> Inline-Perl5: so -Duseshrlib is not really neccessary. We'll have to find another way

[20:32] <dalek> Inline-Perl5: to give a better error message to the user.

[20:32] <dalek> Inline-Perl5: 

[20:32] <dalek> Inline-Perl5: Thanks to Tux++ for pointing this out.

[20:32] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/9ce0272fe4

[20:32] <nine> [Tux]: ^^^ sorry for the inconvenience

[20:34] <nine> brrt: without this stable supply of oil we could have had research into renewable energy decades earlier

[20:34] <brrt> that sucks, huh

[20:34] <nine> japhb: Count me in on your idealistic world view :)

[20:35] *** sjn_phone joined
[20:35] <brrt> although, i'm not sure if that's true; wind and hydropower for mechanical purposes have been developed before the industrial revolution

[20:36] <brrt> i should not spam you so much :-)

[20:36] <nine> those were very modest times power consumption wise

[20:37] *** sjn_phone_ left
[20:38] <brrt> see you tomorrow!

[20:38] *** brrt left
[20:38] *** xfix left
[20:39] *** sjn_phone left
[20:42] *** colomon left
[20:43] *** colomon joined
[20:46] *** colomon left
[20:50] *** colomon joined
[20:52] <PerlJam> japhb++  Feeling like a young kid again is a good thing :)

[20:54] <dalek> Inline-Perl5: b561782 | (Stefan Seifert)++ | p5helper.c:

[20:54] <dalek> Inline-Perl5: Make sure to call PERL_SYS_TERM only after the last interpreter was shut down

[20:54] <dalek> Inline-Perl5: 

[20:54] <dalek> Inline-Perl5: This is hopefully the real fix for the rare but infamous panic: MUTEX_LOCK (22)

[20:54] <dalek> Inline-Perl5: hoelzro++ provided further insight:

[20:54] <dalek> Inline-Perl5: "Ok, I was mistaken in my thoughts on DESTROY order, but DESTROY does play a

[20:54] <dalek> Inline-Perl5: role in this bug. The real culprit is the END block at the end of Inline::Perl5

[20:54] <dalek> Inline-Perl5: 

[20:54] <dalek> Inline-Perl5: p5_terminate tears down all of the global things that perl uses, and after

[20:54] <dalek> Inline-Perl5: the END block is run is when the DESTROY methods are run. That's the bug!"

[20:54] <dalek> Inline-Perl5: 

[20:54] <dalek> Inline-Perl5: p5_terminate now only sets a flag that p5_destruct_perl checks to see if in

[20:54] <dalek> Inline-Perl5: addition to perl_destruct() and perl_free() it should also PERL_SYS_TERM()

[20:54] <dalek> Inline-Perl5: 

[20:54] <dalek> Inline-Perl5: Thanks to hoelzro++ for investigating!

[20:54] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/b561782e58

[20:56] <vendethiel> nine: what happens if I spawn interpreters from multiple threads? *g*

[20:57] <nine> vendethiel: try it :) I did fix a couple of places where this could be a problem and did very basic testing. But nothing fancy so far.

[20:57] * vendethiel has never used Perl5, so rarely thinks about "I need to use *that* from CPAN!"

[20:57] <nine> vendethiel: aaand yes, the simple interpreter counter I just introduced is not thread safe.

[20:58] <vendethiel> nine: yeah, I was thinking about that :P. Well, will it matter in practice, that I don't know...

[20:58] <PerlJam> vendethiel: as soon as you realize CPAN has solutions to all manner of problem waiting for you to download and use .... you may think it more

[20:58] <nine> There are probably a few more threading bugs you'd hit before this becomes an issue

[20:58] <vendethiel> nine: right :)

[20:59] <vendethiel> PerlJam: oh, I'm sure it does (like other languages' package managers), I just don't know about them

[21:03] <vendethiel> admittedly, it's much easier to find them in CPAN than in, say, npm, with names like "bluebird"

[21:03] <RabidGravy> is it possible to have multi submethods at all or is it just the peculiar way BUILD is called that prevent that being a multi

[21:04] <RabidGravy> actually ignore me, that does work

[21:05] <PerlJam> nine++ btw, Inline::Perl5 has given me great joy on occassion.  It's a tool I didn't realize I needed until it existed (ack was that way for me too).  Before I'd try to solve problems in Perl 6 where the bar was too high, now I can punt to Perl 5 modules for some bits and just code the P6 parts that I want.

[21:05] <dalek> Inline-Perl5: b41e80a | (Stefan Seifert)++ | README.md:

[21:05] <dalek> Inline-Perl5: Document that P5 functions/methods are always called in list context

[21:05] <dalek> Inline-Perl5: 

[21:05] <dalek> Inline-Perl5: Thanks to hoelzro++ for pointing out this omission.

[21:05] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/b41e80a68e

[21:06] <jnthn> RabidGravy: You'd probably have to write an explicit proto submethod

[21:06] <vendethiel> nine: up to which point do you think P5 looking like P6 made things easy?

[21:06] <nine> PerlJam: glad to hear that it's helping someone in the way I inteded it to :)

[21:06] * vendethiel considered making an Inline::Racket

[21:07] <RabidGravy> jnthn, roight. The rreason was confiused was I forgot that a named param multi always wins over a () unless you ! it

[21:08] <nine> vendethiel: it certainly helped that there's a 1 to 1 relationship between many things in Perl 5 and 6. Most of all that both have scalars, arrays, hashes and so on. But the same is true with Python with Python 3 actually being a bit closer to Perl 6 than Perl 5 is.

[21:08] <hoelzro> nine: do you have plans to allow a scalar or void context call?

[21:09] <nine> hoelzro: plans no. Having a plan would indicate that I knew how :) But I'm wide open for suggestions and am thinking about how to do this.

[21:09] <hoelzro> nine: I've been thinking about that myself; exporting something like scalar($p5_obj.method) would be nice

[21:10] <hoelzro> you could easily export scalar as a macro

[21:10] <hoelzro> but how it would indicate scalar context, I'm not sure

[21:10] <nine> vendethiel: what helps more than the surface similarities is that both languages are very dynamic and give you tools to cheat like AUTOLOAD in Perl 5 and FALLBACK in Perl 6.

[21:10] <vendethiel> my $*P5_CONTEXT = P5::Context::Void *g*

[21:11] <nine> That would probably be the easiest way.

[21:11] <vendethiel> nine: that's fair. I love the way you can go, say, perl6+java+python+perl5, though :P

[21:11] <vendethiel> nine: that can be "abstracted away" in a sub or macro

[21:12] <nine> vendethiel: I really want to try using Perl 5's Inline::Java through Inline::Perl5 on MoarVM ;)

[21:12] <vendethiel> I'd love to read about that!

[21:13] *** colomon left
[21:14] <nine> I hope to find some time in the coming weeks. But there's also YAPC::EU on the horizon and I have a talk to prepare. And I've 10 minutes more than at FOSDEM and quite a few gotchas less to talk about ;)

[21:14] *** llfourn joined
[21:17] * vendethiel has yet to finish his own talk, but still needs to read some of Inline::5's code

[21:18] *** lizmat joined
[21:18] *** llfourn left
[21:19] *** amurf joined
[21:21] *** EMAILBEN145 joined
[21:23] *** amurf left
[21:24] *** lizmat left
[21:24] * jnthn has yet to start his talk...

[21:25] *** yqt left
[21:29] <masak> same here.

[21:29] <masak> (I haven't started jnthn's talk either) :P

[21:31] *** lizmat joined
[21:33] *** rangerprice joined
[21:33] <masak> in Perl 6, if you add an op without specifying precedence, it gets the tightest possible precedence, right?

[21:33] <jnthn> No

[21:34] <jnthn> There are defaults by category

[21:34] <masak> oh, I see.

[21:34] <jnthn> masak: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L4322

[21:35] * jnthn lols at the name of the hash just before the method...

[21:35] <masak> :P

[21:36] *** lizmat left
[21:36] *** lizmat joined
[21:36] <masak> well, I chose the "tighter than anything" approach for custom ops in 007, and I ran into an interesting design surprise.

[21:38] <masak> namely, prefixes and postfixes are comparable in their precedence -- they're kind of in the same "precedence namespace", unlike infixes -- and it's perfectly legit to mix the precedences of prefixes and postfixes.

[21:39] <masak> and so you may end up with a precedence ordering which flips back and forth between postfix and prefix any number of times.

[21:40] <masak> on the other hand, you don't want to install prefixes to be tighter than postfixes by default, because... that's not Least Surprise. prefixes tend to be looser.

[21:40] *** lizmat left
[21:41] <masak> so you go, "ok, let's install a new postfix at the boundary". but there is no "the boundary" under this model.

[21:43] <masak> I'm tempted to go with "the first (loosest) boundary", but I don't really have anything that tells me that'll work better than "the last (tightest) boundary".

[21:43] *** Peter_R joined
[21:44] *** yqt joined
[21:46] <skids> https://github.com/rakudo/rakudo/pull/475

[21:47] <skids> For anyone who wants to test drive this:

[21:47] <skids> http://irclog.perlgeek.de/perl6/2015-07-22#i_10935111

[21:47] <skids> Hopefully someone will have the tuits to look at it this time.

[21:51] <jnthn> skids: I quickly glanced over the patches and didn't see anything of particular concern.

[21:52] <skids> Thanks!

[21:53] <jnthn> How do they do against spectest?

[21:54] <skids> Only two tests fail on it, both of which arguably need tweaking.

[21:55] <skids> I don't trust my perf numbers because I'm working while the spectest runs, so I don't know whether there is impact there.

[21:55] <skids> The tests in need of attention are noted in the commits.

[21:55] <jnthn> I doubt there'll be a significant one, having looked over the patches

[21:56] <jnthn> OK, do you have a PR for roast also?

[21:56] <jnthn> Or if I was the merge this, could you quickly take care of those?

[21:56] *** colomon joined
[21:56] <skids> I have push on roast.  I can take care of them tonight, after a decommute (they just turned off the air conditioning here.)

[21:56] *** EMAILBEN145 left
[21:57] <jnthn> skids: OK, well if I'm still about just ask when you're ready, or anybody else with a commit bit

[21:57] <skids> Should be about an hour.

[21:57] <jnthn> (Just want to avoid having folks report spectest regressions here)

[21:57] <jnthn> OK

[21:57] <skids> Thanks again.

[21:57] <jnthn> It hit 40C here today and will take forever to cool down, so I may well still be about...

[21:57] <jnthn> Trying to sleep until it's cooler in here is a waste of time :)

[22:01] *** vendethiel left
[22:01] <sjn> jnthn: it's "just" 31 here :-P

[22:01] *** vendethiel joined
[22:02] <jnthn> sjn: Urgh. Can we have winter back soon? :)

[22:02] *** skids left
[22:02] * jnthn hopes he gets a really cold winter in return for this really hot summer

[22:02] <sjn> Oslo is 21°C now

[22:03] <sjn> Lund is 18°C!

[22:03] <sjn> damn those scandis with their fine weather

[22:03] <masak> shoulda stayed in Sweden, jnthn :P

[22:05] <rangerprice> https://www.youtube.com/watch?v=bd2B6SjMh_w beautiful music :)

[22:05] <sjn> daxim_: bumped into that guy who organizers the "We Love Programming Languages" meetup, and he said he's planning to do a Perl 6 meetup in October

[22:06] <jnthn> masak: Bah, I barely got any snow in the winters there the last couple of years :P

[22:06] <sjn> daxim_: I suggested that he should come to the KAMEL-grillen wien.pm is organizing, to plan a little

[22:06] <jnthn> And I'm closer to some mountains here if I really want to escape the heat :)

[22:07] <jnthn> sjn: Is that...an event when camel meat will actually be grilled? 

[22:07] <sjn> jnthn: come and see for yourself ;)

[22:07] <jnthn> Damn, I don't have "it's a long way" as an excuse... :)

[22:08] <sjn> jnthn: http://meetu.ps/2J86t5

[22:09] <jnthn> oooh :)

[22:09] * sjn isn't sure about the availability of camel meat in Vienna

[22:09] <jnthn> I'm actually free that day

[22:09] <sjn> :D

[22:10] <jnthn> Though I'm meant to be taking some time off travel and relaxing so I can feel well again...

[22:10] <jnthn> Will see :)

[22:10] <sjn> jnthn: bring your wife :D

[22:10] <sjn> Donauinsel is a quite nice place for a barbecue

[22:11] <jnthn> sjn: She's not made it here yet, sadly

[22:11] <sjn> ah, ok

[22:11] <sjn> well, next time then :)

[22:12] <jnthn> But yeah, once she is here I doubt I'll be able to go to Vienna without her wanting to follow along.

[22:12] *** yqt left
[22:13] <masak> 'night, #perl6

[22:13] <jnthn> 'night, masak

[22:16] *** lucasb left
[22:17] <sjn> nn masak 

[22:18] *** JimmyZ_ left
[22:19] <rangerprice> m: print 2+2

[22:19] <camelia> rakudo-moar 43a2ce: OUTPUT«4»

[22:19] <rangerprice> m: print 2+|${5}

[22:19] <camelia> rakudo-moar 43a2ce: OUTPUT«5===SORRY!5=== Error while compiling /tmp/BQ5q7fb_Cq␤Unsupported use of ${5}; in Perl 6 please use $4␤at /tmp/BQ5q7fb_Cq:1␤------> 3print 2+|${5}7⏏5<EOL>␤»

[22:21] *** virtualsue joined
[22:22] <RabidGravy> right that's me done for wednesday

[22:22] <itz> bratislava-- # damm hawt

[22:23] <itz> bratislava++ # cheap beer

[22:23] *** bin_005 left
[22:24] <jnthn> :)

[22:26] *** RabidGravy left
[22:38] *** vendethiel left
[22:42] *** TEttinger joined
[22:43] *** yqt joined
[22:46] *** espadrine left
[22:52] <rangerprice> Perl 5 threads's  compatible with Perl 6 ?

[22:54] <TimToady> not really, except in the sense you could run a different P5 interpreter with each P6 thread

[22:54] <TimToady> what P5 calls threads is more like fork emulatoin

[22:54] <TimToady> *tion

[22:56] <rangerprice> So P6 have a newly threading system ?

[22:56] <TimToady> yes

[22:57] * virtualsue is pretty sure the answer is yes, because the p5 one is ready for retirement

[22:57] <rangerprice> oh okay

[22:58] <virtualsue> actually i was 100% positive, not pretty sure ;-)

[22:58] <huf> lr

[22:58] <huf> dammit.

[23:04] *** spider-mario left
[23:07] *** [Tux] left
[23:08] *** amurf joined
[23:12] *** amurf left
[23:17] *** rangerprice left
[23:18] *** rangerprice joined
[23:19] <rangerprice> Is P6 threading system totally fonctionnal ? 

[23:25] *** skids joined
[23:27] *** amurf joined
[23:28] <skids> Hrm.  It's hard to think of a way to get the test for 115436 to still test for the essence of the RT, when Failure.new now takes pretty much anything as args.

[23:29] *** cognominal_ joined
[23:33] *** cognominal left
[23:36] *** cognominal_ left
[23:38] <dalek> roast: c2a8e0e | skids++ | S0 (2 files):

[23:38] <dalek> roast: Tweaks for PR#475 (new Exception code.)

[23:38] <dalek> roast: Tweak one test that was expecting .payload to behave like .message

[23:38] <dalek> roast: Comment out another that checks an error on something that cannot fail anymore

[23:38] <dalek> roast:   (unless someone can figure out a way to make it.)

[23:38] <dalek> roast: review: https://github.com/perl6/roast/commit/c2a8e0ee30

[23:45] <skids> jnthn: so that commit should take care of roast.

[23:46] <jnthn> skids: OK :)

[23:46] <dalek> rakudo/nom: cac198b | skids++ | src/core/Backtrace.pm:

[23:46] <dalek> rakudo/nom: Fix some bounds overruns in new lazy backtrace code discovered

[23:46] <dalek> rakudo/nom: when stringifying the same Backtrace more than once.

[23:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cac198b55a

[23:46] <dalek> rakudo/nom: 8042bc9 | skids++ | src/core/Exception.pm:

[23:46] <jnthn> skids++

[23:47] *** dalek joined
[23:47] *** ChanServ sets mode: +v dalek

[23:47] *** khw left
[23:48] <skids> sorry dalek :-)

[23:48] *** virtualsue left
[23:49] *** rangerprice left
[23:49] *** cognominal joined
[23:53] *** FatalNIX joined
[23:53] <skids> jnthn++ thanks for the review/push.

[23:53] <FatalNIX> so whats new with p6?

[23:53] <skids> Since about what time?

[23:53] <FatalNIX> since the beginning of time.

[23:53] <FatalNIX> no er, hmm. maybe 2 years ago

[23:53] <skids> Well, that's a long story :-)

[23:54] <FatalNIX> which is about the last time I looked at it I think

[23:54] *** cognominal left
[23:56] <skids> Hrm, the pause button was pushed on parrot so moar and jvm are the current leading backends.

[23:56] <jnthn> My usual weekly grant report (covers last week's work): https://6guts.wordpress.com/2015/07/23/this-week-concurrency-stuff-multi-dimensional-stuff-stuff-stuff/

[23:56] <jnthn> 'night, folks o/

[23:56] <skids> o/ sleep well

[23:56] <FatalNIX> jvm is racudovm or something right?

[23:57] <FatalNIX> I'm actually sort of curious how easy it is for java to call perl6 functions and vice versa now.

[23:57] <skids> rakudo-j yes.

[23:57] <FatalNIX> because if the integration is good, maybe I can make an example test Minecraft mod with perl 6.

[23:57] <FatalNIX> as a demo

[23:57] <skids> Not sure about that kind of interop.  NativeCall for C is now formally part of rakudo.

[23:58] <FatalNIX> I see,

[23:58] <skids> I'm just not a java person so I haven't kept tabs on that.

[23:58] <skids> But Perl5/Perl6 interop is here now.

[23:59] <FatalNIX> neither am I a java person, but if it worked nicely, it would mean I can use p6 in the future and not have to deal with fugly java :D

[23:59] *** rangerprice joined
