[00:01] <cognominal> m: sub a($a) { }; try { a() }  # very unintuitive error message

[00:01] <camelia> rakudo-moar 8957fc: OUTPUT«===SORRY!===␤Cannot find method 'orig'␤»

[00:03] *** khw joined
[00:04] *** nys joined
[00:05] *** bjz left
[00:05] <cognominal> sounds like somewhere an Match or Cursor is expected but something got in its place due to the try! 

[00:06] *** Ven left
[00:06] *** captain-adequate left
[00:08] *** Possum joined
[00:16] *** mohij joined
[00:18] *** telex left
[00:20] *** kaare_ joined
[00:20] *** telex joined
[00:20] *** mohij_ left
[00:34] *** pat_js left
[00:35] *** BenGoldberg joined
[00:50] *** atroxaper joined
[00:51] *** vendethiel left
[00:52] *** integral left
[00:53] *** integral joined
[00:53] *** integral left
[00:53] *** integral joined
[00:55] *** atroxaper left
[01:02] *** yeahnoob joined
[01:06] <japhb> seen flussence

[01:06] <japhb> .seen flussence

[01:06] <yoleaux> I saw flussence 13 Jul 2015 17:20Z in #perl6: <flussence> wasn't writing it "do given" supposed to be a temporary workaround?

[01:06] <TimToady> yay, plutohazblug :)

[01:08] <TimToady> well, microblug, anyway

[01:09] <japhb> .tell flussence Text-Tabs-Wrap seems rather unhappy: I can't install it with panda, and it seems to be failing quite a few tests.

[01:09] <yoleaux> japhb: I'll pass your message to flussence.

[01:15] *** yeahnoob left
[01:17] *** rmgk_ joined
[01:17] *** rmgk is now known as Guest79273

[01:17] *** Guest79273 left
[01:17] *** rmgk_ is now known as rmgk

[01:17] *** kaare_ left
[01:18] *** vendethiel joined
[01:20] *** bowtie joined
[01:20] <dalek> rakudo-star-daily: 952076f | coke++ | log/ (9 files):

[01:20] <dalek> rakudo-star-daily: today (automated commit)

[01:20] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/952076f83f

[01:20] *** bowtie is now known as Guest90936

[01:24] <dalek> perl6-roast-data: eca0883 | coke++ | log/ (4 files):

[01:24] <dalek> perl6-roast-data: Move old test files to archive/

[01:24] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/eca0883a9f

[01:25] *** gfldex left
[01:39] *** vendethiel left
[01:46] *** ilbot3 joined
[01:48] *** dayangkun joined
[01:49] *** dayangkun left
[01:50] *** colomon joined
[01:50] *** dayangkun joined
[01:51] *** dayangkun left
[01:51] *** dayangkun joined
[01:52] *** dayangkun left
[01:52] *** dayangkun joined
[01:53] *** dayangkun left
[01:54] *** dayangkun joined
[01:54] *** dayangkun left
[01:56] *** dayangkun joined
[01:57] *** prammer joined
[01:57] *** dayangkun left
[02:00] *** dayangkun joined
[02:01] *** dayangkun left
[02:07] *** dayangkun joined
[02:07] *** dayangkun left
[02:08] *** BenGoldberg left
[02:08] *** dayangkun joined
[02:09] *** dayangkun left
[02:10] *** noganex_ joined
[02:12] *** dayangkun joined
[02:13] *** noganex left
[02:13] *** dayangkun left
[02:13] *** dayangkun joined
[02:15] <ugexe> `use Test; BEGIN plan 1; use ThisDoesntExist; ok 1;` !== 0 exitcode. -- `use Test; plan 1; use ThisDoesntExist; ok 1` == 0 exitcode

[02:16] <ugexe> alternatively putting 'use ThisDoesntExist" before 'use Test' will correctly exit with non-zero without the BEGIN

[02:19] *** dayangkun left
[02:20] *** dayangkun joined
[02:20] *** vendethiel joined
[02:21] *** yqt left
[02:25] <ugexe> if you remove the END { } block in Test.pm it gives correct exit codes in all of those examples

[02:37] *** aborazmeh joined
[02:37] *** aborazmeh left
[02:37] *** aborazmeh joined
[02:41] *** vendethiel left
[02:47] <ugexe> i had hoped BEGIN my $started; $started = 0; ... END { unless $started.DEFINITE { exit 255 } }; in Test.pm would get around that, but alas i was wrong

[02:50] *** pyro- left
[02:51] *** vendethiel joined
[02:53] *** kaare_ joined
[03:01] *** AlexDaniel left
[03:03] *** nys left
[03:07] *** [Sno] left
[03:12] *** vendethiel left
[03:36] *** aborazmeh left
[03:39] *** atroxaper joined
[03:41] *** laouji left
[03:44] *** atroxaper left
[03:52] *** vendethiel joined
[03:58] *** atroxaper joined
[03:58] *** davido___ left
[03:59] *** davido___ joined
[04:13] *** vendethiel left
[04:17] *** kurahaupo joined
[04:19] *** geekosaur joined
[04:29] *** prevost joined
[04:33] *** kurahaupo left
[04:33] *** kurahaupo joined
[04:34] *** ggoebel2 joined
[04:34] *** ggoebel left
[04:37] *** laouji joined
[04:38] * skids appends a cherrypickable fix for the above backtrace issue to PR#470.  It was introduced in d8ce4cd47 in May.

[04:43] *** skids left
[04:47] *** prevost left
[04:48] *** laouji left
[04:48] *** laouji joined
[04:52] *** kurahaupo left
[04:53] *** kurahaupo joined
[05:00] *** [Sno] joined
[05:02] <dalek> rakudo/nom: 22f7192 | lizmat++ | src/core/ (52 files):

[05:02] <dalek> rakudo/nom: Use colon syntax for named parameters consistently

[05:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22f7192269

[05:02] *** khw left
[05:05] <dalek> roast: ed09f71 | lizmat++ | S09-typed-arrays/native- (2 files):

[05:05] <dalek> roast: Tweak typed error checks

[05:05] <dalek> roast: review: https://github.com/perl6/roast/commit/ed09f71f7b

[05:06] *** kurahaupo left
[05:09] *** mohij left
[05:12] *** mohij joined
[05:12] *** vendethiel joined
[05:12] *** mr-foobar left
[05:14] <lizmat> Looking at #125614 now:

[05:15] <lizmat> m: my %xy{Mu}; %xy{1&2} = 3; say %xy.perl   # wrong

[05:15] <camelia> rakudo-moar 8957fc: OUTPUT«Hash[Any,Mu].new(1 => 3, 2 => 3)␤»

[05:15] <lizmat> m: my %xy{Mu}; %xy.AT-KEY(1&2) = 3; say %xy.perl   # is this right?

[05:15] <camelia> rakudo-moar 8957fc: OUTPUT«Hash[Any,Mu].new(all(1 => 3, 2 => 3))␤»

[05:15] <lizmat> m: my %xy{Mu}; %xy.ASSIGN-KEY(1&2,3); say %xy.perl   # is this right?

[05:15] <camelia> rakudo-moar 8957fc: OUTPUT«Hash[Any,Mu].new(all(1 => 3, 2 => 3))␤»

[05:16] <lizmat> m: my %xy{Mu}; %xy.BIND-KEY(1&2,3); say %xy.perl   # and this?

[05:16] <camelia> rakudo-moar 8957fc: OUTPUT«Hash[Any,Mu].new(all(1 => 3, 2 => 3))␤»

[05:17] <ShimmerFairy> Hm. Unless there's something in the specs stating otherwise, I'd think %xy{1&2} = 3 would make 1 => 3, 2 => 3 , since it is a Junction

[05:17] <lizmat> m: my %xy{Any}; %xy{1&2} = 3; say %xy.perl   # and this?

[05:17] <camelia> rakudo-moar 8957fc: OUTPUT«Hash[Any,Any].new(1 => 3, 2 => 3)␤»

[05:17] <ShimmerFairy> m: sub foo($a) { say $a }; foo(1&2)

[05:17] <camelia> rakudo-moar 8957fc: OUTPUT«1␤2␤»

[05:18] <ShimmerFairy> ^ that's my reason for thinking {1&2} is the one doing the right thing.

[05:18] <lizmat> not if it is a typed hash with Mu: then the autothreading should not work (is what conception of the problem is_

[05:19] <lizmat> )

[05:20] <ShimmerFairy> Oh, I see. Well, I think in that case it should be  any(1, 2) => 3  , since the Junction is the key (I don't think  all(1 => 3, 2 => 3)  is right, and I don't see how it could be immediately)

[05:25] *** kurahaupo joined
[05:32] <lizmat> added this discussion and some other observations to the ticket

[05:35] *** vendethiel left
[05:42] *** vendethiel joined
[05:54] <dalek> rakudo/nom: 52458b5 | lizmat++ | src/core/JSON/Pretty.pm:

[05:54] <dalek> rakudo/nom: Small string escape optimization

[05:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/52458b598a

[05:55] *** kurahaupo left
[06:01] *** coffee` left
[06:01] *** ribasushi left
[06:02] *** ribasushi joined
[06:02] *** yeahnoob joined
[06:04] *** vendethiel left
[06:06] <dalek> rakudo/nom: 81d569f | lizmat++ | src/core/ (3 files):

[06:06] <dalek> rakudo/nom: Remove trailing whitespace

[06:06] <dalek> rakudo/nom: 

[06:06] <dalek> rakudo/nom: This dif is git diff --ignore-space-at-eol clean.

[06:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/81d569f915

[06:07] *** vendethiel joined
[06:10] <dalek> rakudo/nom: 8e5525e | lizmat++ | src/core/ (3 files):

[06:10] <dalek> rakudo/nom: DeTABify core settings

[06:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e5525eedf

[06:11] *** ribasushi left
[06:12] *** ribasushi joined
[06:22] *** atroxaper left
[06:29] *** mr-foobar joined
[06:30] *** xinming joined
[06:34] *** atroxaper joined
[06:36] <masak> goooood morning, #perl6!

[06:36] *** xinming left
[06:37] *** xinming joined
[06:45] <moritz> good morning, masak-san

[06:47] <lizmat> masak moritz o/

[06:49] <masak> is there a mechanism in Rakudo to read a keystroke without blocking?

[06:49] <lizmat> getc on $*IN ?

[06:49] <lizmat> hmmm... guess not

[06:49] *** domidumont joined
[06:50] <lizmat> that blocks on newline

[06:50] <masak> yeah, just noticed the same.

[06:50] <moritz> sounds like a bug

[06:50] <masak> would this be a case where Inline::Perl5 would help?

[06:51] *** _mg_ joined
[06:51] *** domidumont left
[06:51] <lizmat> moritz: we don't have autoflush yet, afaik

[06:51] <lizmat> that would probably help

[06:51] *** domidumont joined
[06:51] <moritz> lizmat: uhm, autoflush is for output, no?

[06:52] <lizmat> hmmm... you're right

[06:52] * masak is by no means an expert, but suspects that even if `getc` returned immediately after the first character it got, it (a) would return a *character*, not a keystroke, and (b) would be blocking

[06:52] <lizmat> guess it's getting time for me to go to bed...

[06:53] <masak> lizmat: sleep tight

[06:54] <lizmat> not there yet  :-)

[06:55] <masak> heh :)

[06:55] *** mkz joined
[06:57] *** RabidGravy joined
[06:58] *** FROGGS joined
[07:00] <ugexe> is there a way to do something crazy like pass a line of code like -e, except used like -M? easier to explain this way: perl6 -M'module :: { END { say "end" } };' script.pl

[07:02] *** espadrine joined
[07:08] *** laouji left
[07:11] <moritz> ugexe: not that I'm aware of

[07:12] *** darutoko joined
[07:15] *** virtualsue joined
[07:17] *** vendethiel left
[07:18] *** atroxaper left
[07:20] *** atroxaper joined
[07:21] *** laouji joined
[07:24] <masak> I'm alone at the office today. the motion-sensor activated overhead lights keep switching off, about once every 20 minutes.

[07:25] <masak> kind of nice. reminds me to get up and stretch or move about. :P

[07:26] <masak> ugexe: I suspect you could achieve much the same effect by writing a small wrapper script that evals some input file and then runs script.pl

[07:26] <dalek> rakudo/nom: 0493008 | lizmat++ | src/core/Temporal.pm:

[07:26] <dalek> rakudo/nom: Sanitize %UNITS out of global namespace

[07:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04930082c6

[07:26] <lizmat> m: say %UNITS  # soon to be gone

[07:26] <camelia> rakudo-moar 8e5525: OUTPUT«day => 1, days => 1, hour => 1, hours => 1, minute => 1, minutes => 1, month => 1, months => 1, second => 1, seconds => 1, week => 1, weeks => 1, year => 1, years => 1␤»

[07:28] <masak> TimToady: what if a macro calls a macro? would $COMPILING::x go one level up, or all the way? in the former case, would $COMPILING::COMPILING::x find $x in the mainline?

[07:32] <masak> also, after reading the feedback from PerlJam and jnthn in yesterday's hygiene discussion, plus (especially) vendethiel's links, I'm back to thinking we have the right default with everything being hygienic by default.

[07:32] <masak> "strong opinions, weakly held" :P

[07:32] *** TimToady joined
[07:32] <masak> especially since -- I realized -- it's not a very big step to opt into almost complete unhygiene.

[07:32] <masak> `quasi :COMPILING { ... }` -- done.

[07:34] <DrForr> Looks like I poked my proverbial nose back in at the right time :)

[07:35] <masak> "The compiler says sorry for _your_ moronic typo!" -- serve, smash, and pun by jnthn++ in http://jnthn.net/papers/2015-fosdem-static-dynamic.pdf

[07:36] <lizmat> m: say Date.today.is-leap-year(2012)  # unrelated, but does it make sense to allow class method behaviour on instances ?

[07:36] <camelia> rakudo-moar 8e5525: OUTPUT«True␤»

[07:36] <lizmat> m: say Date.today.is-leap-year  # as an instance method

[07:36] <camelia> rakudo-moar 8e5525: OUTPUT«False␤»

[07:36] <lizmat> m: say Date.is-leap-year(2012)  # as a class method

[07:36] <camelia> rakudo-moar 8e5525: OUTPUT«True␤»

[07:37] <ShimmerFairy> I would say so. I don't know of a language that specifically disallows them.

[07:39] <lizmat> m: say Date.is-leap-year   # so we take this as collatetal damage ?

[07:39] <camelia> rakudo-moar 8e5525: OUTPUT«Cannot look up attributes in a type object␤  in block <unit> at /tmp/8rD18_PnlM:1␤␤»

[07:39] <lizmat> *collateral

[07:42] *** diana_olhovik joined
[07:44] <lizmat> perhaps this is a better error message:

[07:44] <lizmat> $ 6 'say Date.is-leap-year'

[07:44] <lizmat> Cannot call is-leap-year(Date: ); none of these signatures match:

[07:44] <lizmat>     (Dateish:D $: *%_)

[07:44] <lizmat>     (Dateish $: $y, *%_)

[07:46] *** vendethiel joined
[07:46] <ShimmerFairy> Agreed, that'd help explain it better. (And would help any attempt to call an instance method on a type object)

[07:47] *** zakharyas joined
[07:52] <masak> lizmat: I almost think `is-leap-year` is a *sub*. and should be called with Date::is-leap-year or something.

[07:53] <masak> lizmat: it doesn't need an invocant, neither an instance nor a class one.

[07:53] <lizmat> well, Date.foo is one character less than Date::foo

[07:54] <lizmat> in P5 there wouldn't have been any difference in number of chars

[07:54] <lizmat> personally, I don't like the Module::foo syntax for getting at what basically is a sub

[07:55] <lizmat> especially since it would need to be an "our" to be visible outside

[07:56] *** amurf left
[07:57] *** amurf joined
[07:58] *** abraxxa joined
[08:00] *** ohb joined
[08:01] *** amurf left
[08:03] *** dakkar joined
[08:03] *** dakkar left
[08:04] *** dakkar joined
[08:06] <RabidGravy> it appears that IO::Socket::INET.recv hides "Socket reset by peer" (and probably others) and instead just doesn't return anything

[08:08] *** vendethiel left
[08:09] <lizmat> that would explain the spectest failures  

[08:17] <RabidGravy> it manifested in an issue against HTTP::UserAgent

[08:22] <dalek> rakudo/nom: 0d660bb | lizmat++ | src/core/Temporal.pm:

[08:22] <dalek> rakudo/nom: Streamline is-leap-year and days-in-month

[08:22] <dalek> rakudo/nom: 

[08:22] <dalek> rakudo/nom: Don't use junctions and give better error message when trying to use

[08:22] <dalek> rakudo/nom: the instance mode of the method on a class.

[08:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d660bb99c

[08:23] <lizmat> and now it *is* time for me to go to bed   :-)

[08:23] <RabidGravy> :)

[08:23] <lizmat> so good night, #perl6!

[08:28] <RabidGravy> nighty night

[08:30] *** dakkar left
[08:30] *** dakkar joined
[08:31] *** abraxxa left
[08:31] *** abraxxa joined
[08:32] *** Woodi left
[08:35] *** rindolf joined
[08:37] *** atroxaper left
[08:37] *** espadrine left
[08:37] *** Woodi joined
[08:50] *** yeahnoob left
[08:52] *** vendethiel joined
[08:52] <jnthn> morning, #perl6

[08:52] *** rindolf left
[08:57] <cdc> Hello #perl6

[08:57] <kanl> m: class Foo is List { method load( $f ) { self.push: $f } }; my $f = Foo.new.load: 0; $f.WHAT.say; my @f = ( 1 .. 2 ).map: { Foo.new.load: $_ }; @f.map: { .WHAT.say };

[08:57] <camelia> rakudo-moar 0d660b: OUTPUT«(Foo)␤(Int)␤(Int)␤»

[08:57] <jnthn> lizmat: Oh great, 22f7192269 is pointless and makes it harder to git blame stuff, and no, reverting won't help, just make things worse. :/

[08:58] <kanl> m: class Foo is List { method load( $f ) { self.push: $f } }; my $f = Foo.new.load: 0; $f.WHAT.say; my @f = ( 1 .. 2 ).map: { $ = Foo.new.load: $_ }; @f.map: { .WHAT.say };

[08:58] <camelia> rakudo-moar 0d660b: OUTPUT«(Foo)␤(Foo)␤(Foo)␤»

[08:58] <kanl> gurus, why do i need '$ =' ?

[08:59] <kanl> am i not inheriting in the right fashion?

[09:01] <cdc> For some (stupid) reasons I can't connect to my Github account, so is there someone here that wishes to apply this patch to perl6/doc for me: https://gist.github.com/anonymous/660b9f7e778b9e7b0c82 (thanks in advance!)

[09:01] *** atroxaper joined
[09:02] <jnthn> lizmat: And looking at the result, it only makes me certain you're wrong in wanting "foo => 'bar'" not to be a named arg...

[09:03] <jnthn> It's not really a net readability improvement.

[09:05] *** espadrine joined
[09:09] *** yeahnoob joined
[09:09] <dalek> doc: 0bcf8fc | RabidGravy++ | lib/Language/nativecall.pod:

[09:09] <dalek> doc: Apply "Initial documentation for CUnion + embedded structures." from cdc

[09:09] <dalek> doc: review: https://github.com/perl6/doc/commit/0bcf8fc4ca

[09:09] <RabidGravy> cdc, ^^ done

[09:10] <cdc> RabidGravy: thanks!

[09:11] <RabidGravy> all good fun

[09:12] <FROGGS> jnthn: I also prefer foo => bar when I can lineup the fat arrows for example

[09:12] <jnthn> Yeah, me too

[09:12] <FROGGS> when I write args in a single line I might prefer colonpairs

[09:13] <FROGGS> but, well, that's just style

[09:13] <jnthn> I like them sometimes too, but I like having the choice.

[09:14] <FROGGS> -        fail X::Cannot::Infinite.new(:action<.push>, :what(self.^name))

[09:14] <FROGGS> +        fail X::Cannot::Infinite.new(:action<push>, :what(self.^name))

[09:14] <FROGGS> was that intentional?

[09:15] <jnthn> Yeah, that's the other thing - the patch changed more than it said in the subject line. But I thought I'd already beat lizmat++ up enough with my morning oh-shit-my-eyes-sting grumpiness. :)

[09:16] <FROGGS> I'm just pasting that here so she can review... I can't tell if the said change is okay or not, be she will know and can act if needed

[09:16] <jnthn> *nod*

[09:16] <jnthn> I'm going to do Perl 6 things today :)

[09:17] <jnthn> Or at least, most of the day

[09:17] <cdc> jnthn: \o/

[09:18] <jnthn> Dammit, back up to 1,036 tickets. :(

[09:18] <FROGGS> :o(

[09:25] <FROGGS> ups, the changes to Temporal.pm change meaning too

[09:25] <FROGGS> -                        range => (0..^60),

[09:25] <FROGGS> +                  :range('0..^60'),

[09:28] <FROGGS> and in Variable.pm:

[09:28] <FROGGS> -      expected  => <TypeObject default dynamic>,

[09:28] <FROGGS> +      :expected('TypeObject default dynamic'),

[09:29] <FROGGS> this also changes meaning but probably fixes a thinko:

[09:29] <FROGGS> -                :feature<is default(*) on natives> )

[09:29] <FROGGS> +                :feature('is default(*) on natives'))

[09:30] <jnthn> std: Yeah

[09:30] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Undeclared name:␤        'Yeah' used at line 1␤Check failed␤FAILED 00:00 134m␤»

[09:30] <jnthn> oops

[09:30] <jnthn> FROGGS: Yeah

[09:30] <jnthn> std: say 1 if;

[09:30] <FROGGS> :P

[09:30] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Confused at /tmp/CoIjZ9XKQK line 1:␤------> 3say 1 7⏏5if;␤    expecting feed_separator␤Parse failed␤FAILED 00:00 135m␤»

[09:31] <jnthn> std: repeat { } while;

[09:31] <camelia> std 28329a7: OUTPUT«5===SORRY!5===␤Whitespace required after keyword at /tmp/0WWfGJEcts line 1:␤------> 3repeat { } while7⏏5;␤Parse failed␤FAILED 00:00 135m␤»

[09:31] <FROGGS> m: say (:feature("Variable trait 'will final {...}'"))

[09:31] <camelia> rakudo-moar 0d660b: OUTPUT«Unhandled exception: Stub code executed␤   at <unknown>:1  (/home/camelia/rakudo-inst-1/share/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:17346  (/home/camelia/rakudo-inst-1/share/perl6/runtime/CORE.setting.moarvm:t…»

[09:31] *** salva joined
[09:31] <FROGGS> there is a bug in there

[09:32] *** atroxaper left
[09:33] <jnthn> Yes :)

[09:34] *** atroxaper joined
[09:34] *** vendethiel left
[09:35] *** yeahnoob left
[09:36] <FROGGS> there is also the "foo => <bar baz>" => ":foo<'bar baz'>" change in traits.pm

[09:38] <FROGGS> when thinking about these not intentional changes I guess we have to revert?

[09:38] <FROGGS> and then fix the bug about the stub code that existed before?

[09:38] <jnthn> *nod*

[09:38] <jnthn> Yes, that one means something difference

[09:38] <jnthn> Would have to be :foo<<'bar baz'>> to work

[09:38] <FROGGS> okay

[09:39] *** TEttinger left
[09:40] <FROGGS> .tell lizmat I'm going to revert your formatting patch, it introduces changed meaning (some bugs, one fix) mentioned here on irc

[09:40] <yoleaux> FROGGS: I'll pass your message to lizmat.

[09:40] <dalek> rakudo/nom: 270d179 | jnthn++ | src/Perl6/Grammar.nqp:

[09:40] <dalek> rakudo/nom: Improve error for malformed loop statement.

[09:40] <dalek> rakudo/nom: 

[09:40] <dalek> rakudo/nom: Brings us in line with STD.

[09:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/270d179020

[09:40] *** vendethiel joined
[09:41] <dalek> roast: e4eb44a | jnthn++ | S32-exceptions/misc.t:

[09:41] <dalek> roast: Test for RT #125595.

[09:41] <dalek> roast: review: https://github.com/perl6/roast/commit/e4eb44a3ba

[09:41] <dalek> roast: c3f0861 | jnthn++ | S (6 files):

[09:41] <dalek> roast: Merge branch 'master' of github.com:/perl6/roast

[09:41] <dalek> roast: review: https://github.com/perl6/roast/commit/c3f0861ea7

[09:41] <FROGGS> ahh, dang, I've got unstaged changes... will revert later

[09:42] *** Hor|zon left
[09:42] <FROGGS> m: .perl.say for (foo => <bar baz>), (:foo<'bar baz'>), (:foo<<'bar baz'>>)

[09:42] <camelia> rakudo-moar 0d660b: OUTPUT«:foo($("bar", "baz"))␤:foo($("'bar", "baz'"))␤:foo("bar baz")␤»

[09:42] <jnthn> FROGGS: if you have time you could "git revert -p ..."

[09:42] <jnthn> FROGGS: That will let you yes/no to the bits you want to revert.

[09:43] <jnthn> And so can just pick out those that are behavior-changey

[09:43] <FROGGS> ahh, good idea

[09:43] <FROGGS> will do that

[09:43] * jnthn loves git's -p

[09:44] * FROGGS .oO( so jnthn loves p of a git )

[09:44] * FROGGS hides

[09:44] *** diana_olhovik left
[09:45] <arnsholt> I love git in general

[09:46] *** telex left
[09:46] <arnsholt> Today even more so, since I got to use git to handle an SVN branch merge

[09:46] <arnsholt> (New git branch, rebase onto master, then merge. Soooo much easier)

[09:48] *** telex joined
[09:49] * jnthn discovers that "perl6 does-not-exist" has been reporting is error on stdout, not stderr

[09:50] *** CIAvash joined
[09:50] <RabidGravy> well the RPi2 has exposed a bug in Linux::Fuser (both P6 and P5 versions)

[09:53] *** lizmat left
[09:54] <jnthn> m: sub foo($!a) { }

[09:54] <camelia> rakudo-moar 0d660b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gcHwOGjanS␤cannot use a $! parameter in a signature where no $?CLASS is available␤at /tmp/gcHwOGjanS:1␤------> 3sub foo($!a7⏏5) { }␤    expecting any of:␤        shape declaration␤»

[09:55] <jnthn> m: class A { sub foo($!a) { } }

[09:55] <camelia> rakudo-moar 0d660b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/2wI4QkdHyr␤Attribute $!a not declared in class A␤at /tmp/2wI4QkdHyr:1␤------> 3class A { sub foo($!a) { } }7⏏5<EOL>␤»

[09:55] <jnthn> m: class A { has $!a; sub foo($!a) { } }

[09:55] <camelia> rakudo-moar 0d660b: ( no output )

[09:55] <jnthn> m: class A { has $!a; sub foo($!a) { }; foo(1) }

[09:55] <camelia> rakudo-moar 0d660b: OUTPUT«Cannot look up attributes in a type object␤  in sub foo at /tmp/O4uOwHMTmn:1␤  in block <unit> at /tmp/O4uOwHMTmn:1␤␤»

[09:57] <dalek> nqp: 35f6d68 | jnthn++ | src/HLL/Compiler.nqp:

[09:57] <dalek> nqp: Improve failure to run script errors.

[09:57] <dalek> nqp: 

[09:57] <dalek> nqp: Add a special case (and clear message) for directory, avoid spewing a

[09:57] <dalek> nqp: pointless backtrace, and always report on stderr.

[09:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/35f6d68442

[09:58] *** Hor|zon joined
[10:01] *** vendethiel left
[10:01] *** gfldex joined
[10:03] <jnthn> m: use Test; throws-like 'my class C { has $.x; submethod BUILD(:$.x) {} }', X::Syntax::VirtualCall;

[10:03] <camelia> rakudo-moar 0d660b: OUTPUT«    1..2␤    not ok 1 - 'my class C { has $.x; submethod BUILD(:$.x) {} }' died␤    ␤# Failed test ''my class C { has $.x; submethod BUILD(:$.x) {} }' died'␤# at /tmp/6SvqO46Ab3 line 1␤    ok 2 - # SKIP Code did not die, can not check exception…»

[10:07] <cognominal> I like the comment following Larry interview: "his tangents [go] back at the maim (sic) point". Beware, TimToady in not a straight shooter with his elliptic tangents that strike back in most expected ways  :)

[10:09] <cognominal> Probably not intended, but a very perlish pun.

[10:09] <itz> is there anyway of specifying a list of required params in a sub signature as one and only one of these list of parameters are required?

[10:12] <moritz> itz: no

[10:13] *** vendethiel joined
[10:14] <jnthn> You could hack it with a where clause though if you're willing to list them another time

[10:15] *** atroxaper left
[10:19] <RabidGravy> brane is struggling, "subset RawEncode of Array where  (*.elems == 2 ) && (*[0] ~~ CArray[uint8]);" doesn't seem to do what I expect

[10:20] <RabidGravy> m: use NativeCall; subset RawEncode of Array where  (*.elems == 2 ) && (*[0] ~~ CArray[uint8]); sub foo() returns RawEncode { [CArray[uint8].new,1] }; foo();

[10:20] <camelia> rakudo-moar 0d660b: OUTPUT«Type check failed for return value; expected 'RawEncode' but got 'Array'␤  in sub foo at /tmp/Do_cPDUcTD:1␤  in block <unit> at /tmp/Do_cPDUcTD:1␤␤»

[10:20] <jnthn> YOu don't need the * there, the thing to check against is already in $_

[10:20] <RabidGravy> ah

[10:20] <RabidGravy> perfecto!

[10:30] *** skids joined
[10:38] <vendethiel> m: say .[0] for 3;

[10:38] <camelia> rakudo-moar 270d17: OUTPUT«3␤»

[10:38] *** atroxaper joined
[10:43] *** dayangkun left
[10:45] *** zakharyas left
[10:48] *** atroxaper left
[10:48] *** mr-foobar left
[10:49] *** mr-foobar joined
[10:52] *** laouji left
[10:55] <dalek> rakudo/nom: 63ebb34 | jnthn++ | src/Perl6/ (2 files):

[10:55] <dalek> rakudo/nom: Add errors for bougs $!x and $.x parameter use.

[10:55] <dalek> rakudo/nom: 

[10:55] <dalek> rakudo/nom: Catch $.x usage in a submethod, plus catch sub ($!x) { } even when

[10:55] <dalek> rakudo/nom: the sub is inside of a class. This took a bit more doing than first

[10:55] <dalek> rakudo/nom: expected, since 'has ($.x, $.y)' is also parsed using a signature.

[10:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/63ebb345f4

[10:56] <dalek> roast: f21cb19 | jnthn++ | S12-methods/attribute-params.t:

[10:56] <dalek> roast: Tests for RT #125591.

[10:56] <dalek> roast: review: https://github.com/perl6/roast/commit/f21cb192ae

[10:56] <arnsholt> jnthn: "bougs"? I thought you moved to Prague, not Paris? ^_^

[10:56] <jnthn> :P

[10:56] <nwc10> maybe he did. Paris isn't know for its beer, after all.

[10:57] <nwc10> if so, the Balmer Peak was <--- thataway :-)

[10:57] <jnthn> The only French city I've been to that I remember having decent beer is Strasbourg :)

[10:57] <arnsholt> Then again, Alsace is Germany, 'cept it's in France

[10:58] <arnsholt> (To the extent that there are certain laws that only apply in Alsace)

[10:59] <nwc10> I wasn't aware of that special case

[11:00] <arnsholt> It's basically due to the whole "is it French or is it German" thing. When the region was last handed over from Germany to France (late 1800s, IIRC), they were basically allowed to keep some bits of German law that differed from French law

[11:01] <arnsholt> Makes Alsace a beneficial place for incorporation, I've been told

[11:01] <jnthn> .oO( "le reinheitsgebot" )

[11:01] <moritz> "le rein'eitsgebot"

[11:02] *** g4 joined
[11:02] *** g4 left
[11:02] *** g4 joined
[11:03] *** mr-foobar left
[11:04] <jnthn> I've a patch for RT #125608. It actually fails one of the NQP test files, but goes on to build Rakudo fine anyway and fixes the ticket.

[11:04] <jnthn> make test is alright. Guess I'll spectest and see the fallout.

[11:04] *** proudzhu1 joined
[11:05] *** proudzhu1 left
[11:10] *** pdcawley joined
[11:12] <jnthn> hm, it seems OK

[11:14] <dalek> nqp: 1dd3a77 | jnthn++ | src/NQP/Grammar.nqp:

[11:14] <dalek> nqp: LTM-terminate error catching case for POD.

[11:14] <dalek> nqp: 

[11:14] <dalek> nqp: The existing grammar here relied on the incorrect semantics of LTM

[11:14] <dalek> nqp: and sequential alternations, which is about to be fixed.

[11:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1dd3a77140

[11:15] <jnthn> Unfortunately, the fix does seem to slow down parsing somewhat.

[11:18] *** atroxaper joined
[11:19] *** atroxaper left
[11:22] *** virtualsue left
[11:24] <dalek> nqp: 5834191 | jnthn++ | src/QRegex/NFA.nqp:

[11:24] <dalek> nqp: Fix sequential alternations and LTM interaction.

[11:24] <dalek> nqp: 

[11:24] <dalek> nqp: The first branch of the alternation should be factored into the

[11:24] <dalek> nqp: longest prefix.

[11:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/583419120b

[11:24] <FROGGS> jnthn: what if we do this instead in line 99? ] || [ \s || <.panic: 'Illegal pod directive'> ] \N*

[11:24] <FROGGS> here I mean: https://github.com/perl6/nqp/blob/1dd3a77140eb5a1d5b716b64775e38617807351e/src/NQP/Grammar.nqp#L99

[11:24] <jnthn> FROGGS: Likely also fixes it

[11:25] <jnthn> FROGGS: I just went for least invasive change :)

[11:25] <FROGGS> ahh, and the slowdown comes from 5834191?

[11:25] <jnthn> FROGGS: Oh, yes, very much so

[11:25] <jnthn> The first isn't a slowdown

[11:26] <FROGGS> I see, first I was suspecting it comes from 1dd3a77 :o)

[11:26] *** mr-foobar joined
[11:26] <FROGGS> k

[11:26] <jnthn> Sorry, wasn't clear

[11:26] <FROGGS> np

[11:26] <dalek> rakudo/nom: d378509 | jnthn++ | tools/build/NQP_REVISION:

[11:26] <dalek> rakudo/nom: Bump NQP_REVISION for LTM and error fixes.

[11:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3785097e4

[11:27] <dalek> roast: 9f936e7 | jnthn++ | S19-command-line/arguments.t:

[11:27] <dalek> roast: Test error for running a directory.

[11:27] <dalek> roast: 

[11:27] <dalek> roast: Plus tweak another test to expect the error on STDERR, not STDOUT.

[11:27] <dalek> roast: review: https://github.com/perl6/roast/commit/9f936e7150

[11:29] *** avalenn_ joined
[11:31] *** atroxaper joined
[11:31] *** yqt joined
[11:31] *** mkz left
[11:31] *** krakan_ joined
[11:31] *** rindolf joined
[11:32] *** jonathan__ joined
[11:32] *** haroldwu_ joined
[11:32] *** mrf_ joined
[11:32] *** sunnavy_ joined
[11:32] *** Brock joined
[11:33] *** silug_ joined
[11:33] *** skids1 joined
[11:34] <dalek> roast: 44e1719 | jnthn++ | S05-metasyntax/longest-alternative.t:

[11:34] <dalek> roast: Tests for RT #125608.

[11:34] <dalek> roast: review: https://github.com/perl6/roast/commit/44e17194dc

[11:34] *** amurf joined
[11:35] *** rmgk_ joined
[11:35] *** rmgk left
[11:35] *** rmgk_ is now known as rmgk

[11:35] <jnthn> Down to 1,032...

[11:36] <nwc10> open?

[11:37] *** skids left
[11:37] *** RabidGravy left
[11:37] *** sftp left
[11:37] *** sftp_ joined
[11:37] <nwc10> aha yes: https://rt.perl.org/Public/

[11:38] *** sftp_ is now known as sftp

[11:38] <nwc10> Perl 5 only has 52% more open

[11:38] <jnthn> new/open I guess

[11:39] <jnthn> But yeah, ones that need dealing with

[11:39] *** amurf left
[11:40] *** mkz joined
[11:50] *** FROGGS left
[11:58] *** abraxxa left
[12:01] *** atroxaper left
[12:02] <dalek> rakudo/nom: e4077e3 | jnthn++ | src/ (3 files):

[12:02] <dalek> rakudo/nom: Good error on parameterizing a non-parametric.

[12:02] <dalek> rakudo/nom: 

[12:02] <dalek> rakudo/nom: Now it shows what went wrong and where, rather than just a method not

[12:02] <dalek> rakudo/nom: found error.

[12:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e4077e3dc1

[12:02] <dalek> roast: 7a7dd28 | jnthn++ | S32-exceptions/misc.t:

[12:02] <dalek> roast: Tests for RT #115398 and RT #115400.

[12:02] <dalek> roast: review: https://github.com/perl6/roast/commit/7a7dd2813d

[12:03] <jnthn> Two RTs for the price of one patch :)

[12:05] *** rurban joined
[12:06] <jnthn> m: say grammar Gram { regex TOP { ('XX')+ %% $<delim>=<[a..z]>* }; }.parse('XXXXXX');

[12:06] <camelia> rakudo-moar d37850: OUTPUT«｢XXXXXX｣␤ 0 => ｢XX｣␤ delim => ｢｣␤ 0 => ｢XX｣␤ delim => ｢｣␤ 0 => ｢XX｣␤ delim => ｢｣␤»

[12:11] <dalek> roast: 0a3a69d | jnthn++ | S05-capture/caps.t:

[12:11] <dalek> roast: Test for RT #125391.

[12:11] <dalek> roast: review: https://github.com/perl6/roast/commit/0a3a69d4c4

[12:14] * jnthn tosses out https://rt.perl.org/Ticket/Display.html?id=125486 for anyone who fancies writing a test to close an already-fixed ticket 

[12:14] <jnthn> lunch &

[12:14] *** mr-foobar left
[12:19] *** AlexDaniel joined
[12:24] <[Coke]> (cannot splice a fixed dimension array) - what if you're replacing a chunk with a chunk of the same size?

[12:27] *** zostay left
[12:28] *** zostay joined
[12:31] <hoelzro> morning #perl6

[12:35] *** muraiki joined
[12:39] <cdc> m: my Buf $a = run('bash', '-c', 'echo $\'\xff\xff\'', :out, :bin).out.slurp

[12:39] <camelia> rakudo-moar e4077e: OUTPUT«run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub run at src/RESTRICTED.setting:14␤  in block <unit> at /tmp/QICpGp3I5n:1␤␤»

[12:39] <cdc> well, my point was: .slurp fails because of "Malformed UTF-8"

[12:40] <cdc> I thought that specifying :bin was enough to slurp it as a Bug instead of a Str

[12:40] <JimmyZ>  http://www.cnbeta.com/articles/411259.htm # chinese news  about http://www.linuxvoice.com/interview-larry-wall/

[12:42] <cdc> How should I proceed to read the output of an external command in a binary form?  Is it ^^ NYI?

[12:43] <cdc> oh never mind ...

[12:43] <cdc> my Buf $a = run('bash', '-c', 'echo $\'\xff\xff\'', :out).out.slurp(:bin)

[12:46] *** yqt left
[12:48] *** andreoss joined
[12:52] *** g4 left
[12:54] *** avalenn_ left
[12:54] *** avalenn joined
[12:57] *** yqt joined
[13:00] *** g4 joined
[13:00] *** g4 left
[13:00] *** g4 joined
[13:01] *** atroxaper joined
[13:06] *** atroxaper left
[13:13] *** Hor|zon left
[13:21] <masak> I've got a clean revert of 22f7192269. should I push it?

[13:23] <jnthn> [Coke]: (splice) we can relax that case later if we need to, I guess

[13:23] <jnthn> masak: Define "clean revert"?

[13:23] <masak> jnthn: I tried reverting the whole patch on the tip of nom, and it worked without conflicts.

[13:24] <jnthn> masak: Oh...we were only going to revert the semantic-changing accidents, I thought

[13:25] <masak> I see. hm, maybe it was only I who thought that the whole thing was a net impoverishment in terms of readability.

[13:25] <masak> ok, I won't push it, then. someone else can -p painstakingly.

[13:25] <dalek> nqp: 37a0d5f | jnthn++ | src/QRegex/P6Regex/Actions.nqp:

[13:25] <dalek> nqp: Fix capture handling with regard to &.

[13:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/37a0d5fbab

[13:26] <jnthn> masak: I thought that too :)

[13:27] <jnthn> But didn't want to make the git blame situation even worse.

[13:27] <ShimmerFairy> I personally don't see what the big deal is with that commit

[13:27] <masak> ShimmerFairy: well, for one, it pushes one side of a non-consensus/debated #perl6 topic into the code base.

[13:28] <masak> you know that something's not right when a patch is made and people exclaim "now I know why I like the other way" :P

[13:29] <ShimmerFairy> That's fair. It's just that I found the 'git blame' explanation to be nonsense, simply put.

[13:30] *** VinceDee left
[13:32] <masak> kebab case. arg pair syntax. these are things that aren't broken and don't need fixing. they have a very skewed risk/importance ratio.

[13:33] <ShimmerFairy> But then why has kebab case been allowed to be pushed through, and arg pair (apparently) isn't?

[13:33] <jnthn> ShimmerFairy: It doesn't matter what you think. I'm one of the top committers/debuggers on the project. If making git blame messier is a problem for me, it's a problem. End of story.

[13:33] *** raiph joined
[13:33] <ShimmerFairy> jnthn: then where are the complaints for https://github.com/rakudo/rakudo/commit/8e5525eedf  and  https://github.com/rakudo/rakudo/commit/81d569f915  ?

[13:34] <jnthn> ShimmerFairy: They were rather smaller.

[13:34] <jnthn> But yeah, also obscure things

[13:34] * jnthn uses the version history a lot.

[13:35] *** diana_olhovik joined
[13:35] <masak> do I understand correctly that 22f7192269 introduces errors into nom?

[13:35] <jnthn> masak: Quite possibly, though not spectest failures.

[13:35] <masak> then (a) why isn't it better to revert the whole one rather than wait for someone to have tuits to revert -p it?

[13:35] <masak> (b) if there are no spectest failures, isn't that "interesting"?

[13:36] <jnthn> On (b), yes.

[13:36] <jnthn> Though I suspect many of them fall into the "we avoid testing exact messages"

[13:36] <masak> ok.

[13:36] <ShimmerFairy> jnthn: Alright, it's just that you appeared to be using 'git blame' as an excuse to rail against a commit doing cleanup on an issue you disagree with, since I didn't see you complain about the other cleanup commits.

[13:37] <jnthn> ShimmerFairy: I've various times refused PRs because they did incidental cleanups along with what they claimed to...

[13:37] <masak> I should ask it like this: if there's a rough consensus that a patch was a net negative for the nom branch, why shouldn't we immediately revert it?

[13:37] <masak> especially if the patch wasn't actually meant to change any semantics.

[13:37] <jnthn> masak: Well, there's not a rough consensus, given lizmat thought it was the right thing ;)

[13:37] <ShimmerFairy> jnthn: OK. Like I said, it just seemed suspicious that you only complained about one of those commits :)

[13:38] <ShimmerFairy> masak: I also agree with lizmat on the separation of Pairs and named params, fwiw :)

[13:38] * masak drops the issue and hopes someone with tuits picks it up

[13:38] <masak> ShimmerFairy: as you're free to.

[13:39] <masak> ShimmerFairy: but (orthogonally to that), do you see how it can be a bad idea to push those opinions into Rakudo?

[13:39] * ShimmerFairy briefly considers using this disagreeable reaction to argue against all this kebab-case nonsense :)

[13:40] <jnthn> masak: Well, I thought FROGGS++ was working on the -p approach already

[13:40] <ShimmerFairy> masak: sure, I definitely think it was a poor choice on lizmat's part to just do that. My opposition here is just in response to what I saw was a needless (and inconsistent) attack on the matter, to help balance the matter a bit.

[13:40] <masak> I don't mind if people always use the :foo(bar) form in their own code.

[13:40] <masak> jnthn: well, that was 4 hours ago.

[13:41] <ShimmerFairy> masak: Basically, I disagree with that commit on a "you should know this would cause problems" basis, not on a "I disagree with always-colonpair" basis :)

[13:42] *** lucasb joined
[13:42] <jnthn> One more useful matters, can anybody find a bit in S05 that talks about whether /<Some::Grammar>/ should be equivalent to /<Some::Grammar::TOP>/ ?

[13:43] <jnthn> *on

[13:43] * masak has a look

[13:43] <jnthn> RT #67128 seems to think it should

[13:43] <jnthn> It's one of our oldest RTs :P

[13:44] <jnthn> Hm, I don't immediately find the bit that the latter should work...

[13:45] *** aborazmeh joined
[13:45] *** aborazmeh left
[13:45] *** aborazmeh joined
[13:45] <jnthn> ShimmerFairy: btw, sorry for being harsh to you back there. Bad sleep + allergies getting me down :/

[13:46] <ShimmerFairy> No worries, I can understand that.

[13:46] *** yqt left
[13:46] * jnthn hopes lizmat++ won't be upset over the reactions to her surely well-intended commit also

[13:46] *** raiph left
[13:47] <ShimmerFairy> jnthn: I _think_ using a different grammar is supposed to use the :lang adverb, but I'm of course not sure about that :)

[13:47] <masak> jnthn: note that that ticket doesn't claim that it *should* mean ::TOP, only that it oughtn't NPA

[13:47] <jnthn> masak: Godo point.

[13:47] <masak> jnthn: though I personally think (as I seem to have in 2009) that the syntax kind of makes sense... :)

[13:48] <masak> jnthn: but the ticket is technically closeable

[13:48] <jnthn> masak: Agree, but it feels like a cop-out :)

[13:49] <masak> *nod* -- it's a good opportunity to think about what it would do (and what should do that)

[13:49] *** zakharyas joined
[13:49] <jnthn> ShimmerFairy: Interesting point :)

[13:49] <ShimmerFairy> Unsurprisingly, :lang is NYI :)

[13:50] * masak .oO( what was that name of that feature? it's on the tip of my :lang... )

[13:50] <jnthn> I love how the example in S05 doesn't talk about what kind of thingy is meant to be in $funnylang too :P

[13:51] <masak> well, obviously INTERCAL. duh.

[13:51] <jnthn> Or how the method call on it is meant to magically work out

[13:51] <ShimmerFairy> Or what the unbalanced method does exactly :P

[13:51] <jnthn> And get the current position

[13:51] * masak waves his hands frantically

[13:52] <jnthn> But yeah, I don't find any spec justification for <Grammar::Rule> working

[13:52] <jnthn> Even though I'm pretty sure if I kill it off folks won't be happy

[13:52] <ShimmerFairy> Though I do get the feeling <Grammar::foo> should work too, regardless of :lang . After all, you can call subs from regexes (as in <&foo>), so why not from external grammars too?

[13:53] <masak> jnthn: I didn't find it either.

[13:53] <DrForr> I'd support a COMEFROM operator :)

[13:53] <jnthn> std: /<Some::Grammar>/

[13:53] <camelia> std 28329a7: OUTPUT«ok 00:00 136m␤»

[13:53] <ShimmerFairy> I tried looking for :: , TOP, and grammar, none of which yielded anything

[13:53] <masak> jnthn: how about installing an error message? "Unsupported syntax for calling another grammar. Please use ... instead."

[13:56] <jnthn> masak: Well, for one because folks may well be relying on /<FooGrammar::rule>/ working today, for two 'cus we don't have a ... to use instead, and three because if you just mean to do it for /<Some::Grammar>/ then it's less work to actually make it call TOP on that grammar than it is to implement the error ;)

[13:56] <masak> :)

[13:56] <masak> well, you've convinced me. :) go for it!

[13:58] <ShimmerFairy> I'd still be interested in seeing how :lang would work, if <Some::Grammar> doesn't obsolete it :)

[13:58] <jnthn> Yeah, I think TimToady will have to weigh in on :lang

[13:58] * masak .oO( everybody wants some :lang action )

[13:59] <jnthn> I think I'll note the semantics of <Some::Grammar> and <Some::Grammar::rule> in S05

[13:59] <jnthn> And then make the former work out

[13:59] <masak> ++jnthn

[13:59] <jnthn> And make sure the tests are alright

[13:59] <jnthn> And hopefully everyone'll be happy enough :)

[13:59] <timotimo> .o( quoteharder )

[14:01] <lucasb> Just saying that I wish there was code review *before* commiting changes. Other projects use tools like Phabricator and Gerrit. But I understand this project runs on the EAFP model. And also heavy-weight tools could slow down the process.

[14:01] <masak> lucasb: yeah, I don't wish for code review before.

[14:01] <masak> lucasb: not all the time.

[14:02] <timotimo> we could make a super lightweight code review thing that utilises IRC

[14:02] <jnthn> We do pretty well out of post-review

[14:02] <masak> what jnthn said.

[14:02] <lucasb> Everybody reviews every commit?

[14:02] *** raiph joined
[14:02] <ShimmerFairy> It would be nice if git blame had a --skip-commits option, so you could list the useless commits :) (I'm guessing it doesn't have that kind of feature already)

[14:02] <lucasb> GitHub doesn't even show some big commits, but that is very rare

[14:03] <masak> I prefer if people police themselves and have a low threshold for thinking "hm, this one isn't 100% non-controversial. let's put it in a branch and point people to it."

[14:03] <timotimo> someone pushes a commit, it has five minutes of grace time where you can say "aye" or "nay" to the bot and if nobody says anything, or there are many more ayes than nays, it gets pushed on to github

[14:03] <jnthn> j: say 'alive?'

[14:03] <camelia> rakudo-jvm e4077e: OUTPUT«alive?␤»

[14:03] <jnthn> j: say 'rule1 foo rule2 bar' ~~ /^ ( 'rule1' || 'rule2' )* %% (.+?) $/

[14:03] <camelia> rakudo-jvm e4077e: OUTPUT«｢rule1 foo rule2 bar｣␤ 0 => ｢rule1｣␤ 1 => ｢ ｣␤ 1 => ｢ f｣␤ 1 => ｢ fo｣␤ 1 => ｢ foo｣␤ 1 => ｢ foo ｣␤ 0 => ｢rule2｣␤ 1 => ｢ ｣␤ 1 => ｢ b｣␤ 1 => ｢ ba｣␤ 1 => ｢ bar｣␤»

[14:04] <jnthn> m: say 'rule1 foo rule2 bar' ~~ /^ ( 'rule1' || 'rule2' )* %% (.+?) $/

[14:04] <camelia> rakudo-moar e4077e: OUTPUT«｢rule1 foo rule2 bar｣␤ 0 => ｢rule1｣␤ 1 => ｢ ｣␤ 1 => ｢ f｣␤ 1 => ｢ fo｣␤ 1 => ｢ foo｣␤ 1 => ｢ foo ｣␤ 0 => ｢rule2｣␤ 1 => ｢ ｣␤ 1 => ｢ b｣␤ 1 => ｢ ba｣␤ 1 => ｢ bar｣␤»

[14:04] <ShimmerFairy> (Or better yet, if git had some concept of "cleanup" commits, à la Wikimedia's minor edits)

[14:04] <jnthn> grmbl...that oen is probably going to be a code-gen bug that has to be fixed on both backends...

[14:04] <jnthn> *one

[14:04] <jnthn> And it's probably going to be hard to figure out 

[14:06] <AlexDaniel> uhm, so what's the problem with reviewing every commit yourself?

[14:07] <timotimo> i bet jnthn already knows about -w ("ignore whitespace") for git blame, and the commit made formatting changes that go beyond white space?

[14:08] * timotimo hasn't looked closely

[14:08] <masak> timotimo: it's a cute idea, but even it introduces overhead and brittleness worse than the original problem.

[14:09] <dalek> roast: b95280f | hoelzro++ | S17-procasync/no-runaway-file-limit.t:

[14:09] <dalek> roast: Add test for RT #125616 (Proc::Async not closing tapped handles)

[14:09] <dalek> roast: review: https://github.com/perl6/roast/commit/b95280f3ac

[14:09] <jnthn> hoelzro: That needs the bump to work, yes? :)

[14:09] <ShimmerFairy> m: say 'rule1 foo rule2 bar' ~~ /^ ( 'rule1' || 'rule2' )* %% (.+) $/  # jnthn: causes similar problems with greedy separator

[14:09] <camelia> rakudo-moar e4077e: OUTPUT«｢rule1 foo rule2 bar｣␤ 0 => ｢rule1｣␤ 1 => ｢ foo ｣␤ 1 => ｢ foo r｣␤ 1 => ｢ foo ru｣␤ 1 => ｢ foo rul｣␤ 1 => ｢ foo rule｣␤ 1 => ｢ foo rule2｣␤ 1 => ｢ foo rule2 ｣␤ 1 => ｢ foo rule2 b｣␤ 1 => ｢ foo rule2 …»

[14:09] <hoelzro> jnthn: correct

[14:09] *** diana_olhovik left
[14:09] *** Hor|zon joined
[14:09] <hoelzro> once you bump, would you mind adding the new file to spectest.data?

[14:10] <dalek> nqp: ae07ba3 | jnthn++ | tools/build/MOAR_REVISION:

[14:10] <dalek> nqp: Bump MOAR_REVISION for async proc handle leak fix.

[14:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ae07ba325e

[14:10] <jnthn> Oh, it's a new file :)

[14:10] <jnthn> Yeah, can do

[14:11] <timotimo> masak: my main worth in life is coming up with ideas that sound kinda-sorta-reasonable, but ultimately don't work out :)

[14:11] <dalek> rakudo/nom: 0d47f78 | jnthn++ | tools/build/NQP_REVISION:

[14:11] <dalek> rakudo/nom: Bump NQP_REVISION for regex and proc async fixes.

[14:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d47f785de

[14:12] <dalek> roast: 76676ad | jnthn++ | S05-capture/caps.t:

[14:12] <dalek> roast: Unfudge test for RT #117955.

[14:12] <dalek> roast: review: https://github.com/perl6/roast/commit/76676ad6e3

[14:13] <ShimmerFairy> r: say "ab" ~~ /^ a +% (b) $/; say "ab" ~~ /^ a *% (b) $/; say "ab" ~~ /^ a ?% (b) $/;

[14:13] <camelia> rakudo-jvm e4077e: OUTPUT«===SORRY!===␤setcodeobj can only be used with a CodeRef␤»

[14:13] <camelia> ..rakudo-moar e4077e: OUTPUT«===SORRY!===␤QAST::Block with cuid cuid_5_1436969626.75453 has not appeared␤»

[14:14] <ShimmerFairy> r: say "ab" ~~ /^ a ?% (b) $/; # this is the one causing the issue

[14:14] <camelia> rakudo-moar e4077e: OUTPUT«===SORRY!===␤QAST::Block with cuid cuid_1_1436969646.9145 has not appeared␤»

[14:14] <camelia> ..rakudo-jvm e4077e: OUTPUT«===SORRY!===␤setcodeobj can only be used with a CodeRef␤»

[14:14] <ShimmerFairy> r: say "ab" ~~ /^ a +% (b) $/; say "ab" ~~ /^ a *% (b) $/;

[14:14] *** aborazmeh left
[14:14] <camelia> rakudo-{moar,jvm} e4077e: OUTPUT«Nil␤Nil␤»

[14:14] <jnthn> ShimmerFairy: I think that may be a spearate issue

[14:14] <ShimmerFairy> jnthn: me too, I just found it while messing around with the bug you showed :)

[14:16] <ShimmerFairy> I'll file that as a bug then, if necessary

[14:16] <jnthn> ShimmerFairy: It looks familiar, so have a check if it ain't already in RT

[14:17] <ShimmerFairy> Yeah, I'm making sure to search

[14:17] <jnthn> hoelzro: Aww, the test fails on Windows :(

[14:18] <jnthn> ah, cat

[14:18] <jnthn> I'll fix it in a bit

[14:18] *** Hor|zon left
[14:20] *** FROGGS joined
[14:21] <masak> m: my %h = foo => 42; say %h<foo> :exists

[14:21] <camelia> rakudo-moar e4077e: OUTPUT«True␤»

[14:22] * jnthn wonders what masak was curious about there :)

[14:22] <vendethiel> spacing?

[14:22] <masak> no, I usually space it out like that.

[14:22] <masak> I wanted to check that it actually returns True/False, not the value.

[14:23] <masak> (which is quite obvious in retrospect that it doesn't, because then :exists wouldn't be better than not using :exists)

[14:24] <masak> then I decided (in the code I'm writing) to not use :exists, because I'm actually interested in the value as well as checking for existence, and I have full control over the %h, so I know I won't have semipredicate troubles.

[14:24] <vendethiel> .oO( the worse trouble is not being aware you're in trouble )

[14:24] <ShimmerFairy> jnthn: I'm not seeing it, so I'll submit a bug to be sure it's there :)

[14:25] * masak goes searching for the Ultimate Metasyntactic Symbol instead, something that will never collide with anything else, ever

[14:25] <jnthn> ShimmerFairy: OK, thanks

[14:26] <ShimmerFairy> Legends say it's somewhere past U+10FFFF...

[14:26] <jnthn> OK, bad news on <Grammar::Foo>

[14:26] <masak> :(

[14:26] <jnthn> /<Grammar>/ probably also should work

[14:26] <jnthn> So I put in an "is there a type Grammar" check

[14:26] <jnthn> Then <num> gets rather upset 'cus we have a type "num"...

[14:27] <masak> hah!

[14:27] <masak> mebbe rules should take precedence?

[14:27] <masak> they *are* more proximal...

[14:27] <jnthn> Rules are late-bound

[14:27] <masak> oh argh

[14:27] <jnthn> But we should decide this at compile time.

[14:28] <masak> ok, well. then that's a good reason not to do this, methinks. 'cus it's impossible :P

[14:28] <jnthn> I could of course look at the type and see if it ~~ Grammar

[14:28] <masak> hm.

[14:28] <jnthn> But that feels like ratcheting the clever level up a bit more than we tend to like.

[14:29] <masak> yeah.

[14:29] <ShimmerFairy> So perhaps :lang isn't obsolete after all :)

[14:29] <masak> it feels fragile for possibly-unintended reasons.

[14:29] <jnthn> OK, going to stash the patches and delegate to TimToady++.

[14:30] * masak narrowly evades using ^Z as a metasyntactic symbol

[14:31] *** g4 left
[14:33] *** khw joined
[14:35] <dalek> roast: 6ffdc85 | jnthn++ | S17-procasync/no-runaway-file-limit.t:

[14:35] <dalek> roast: Pick a program that exists for Windows.

[14:35] <dalek> roast: review: https://github.com/perl6/roast/commit/6ffdc85cf6

[14:36] <lucasb> m: my %h; say 'yes' if %h<foo> :exists :!p

[14:36] <camelia> rakudo-moar e4077e: OUTPUT«yes␤»

[14:36] <lucasb> The thing I find funny is that :exists sounds like a predicate, but when mixed with other adverbs, one must remember that it is not a predicate anymore and becomes an utility function.

[14:36] <dalek> rakudo/nom: 3ae9970 | jnthn++ | t/spectest.data:

[14:36] <dalek> rakudo/nom: Add Proc::Async handle closing test.

[14:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3ae9970684

[14:36] <masak> lucasb: nice.

[14:37] <masak> m: my $a = "a"; say so "fooAbar" ~~ /foo <{$a.uc}> bar/

[14:37] <camelia> rakudo-moar e4077e: OUTPUT«True␤»

[14:37] <timotimo> m: my %h = foo => 42; say %h<foo> :exists:value

[14:37] <camelia> rakudo-moar e4077e: OUTPUT«Unexpected adverb 'value' and unsupported combination of adverbs (exists) passed to slice on %h␤  in block <unit> at /tmp/RXHgu7XtQA:1␤␤»

[14:37] <timotimo> m: my %h = foo => 42; say %h<foo> :exists:v

[14:37] <camelia> rakudo-moar e4077e: OUTPUT«Unsupported combination of adverbs (exists v) passed to slice on %h␤  in block <unit> at /tmp/agQ_Jf7nP_:1␤␤»

[14:37] <masak> m: my $a = "a"; say so "fooAbar" ~~ /foo $a.uc() bar/

[14:37] <camelia> rakudo-moar e4077e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gtBRCfJy7T␤Null regex not allowed␤at /tmp/gtBRCfJy7T:1␤------> 3a = "a"; say so "fooAbar" ~~ /foo $a.uc(7⏏5) bar/␤»

[14:37] <timotimo> wasn't there a way ...

[14:37] <timotimo> m: my %h = foo => 42; say %h<foo>:kv:exists

[14:37] <camelia> rakudo-moar e4077e: OUTPUT«foo True␤»

[14:37] <timotimo> m: my %h = foo => 42; say %h<foo>:v:exists

[14:37] <camelia> rakudo-moar e4077e: OUTPUT«Unsupported combination of adverbs (exists v) passed to slice on %h␤  in block <unit> at /tmp/RXLKIoBexk:1␤␤»

[14:38] <masak> should I expect variable interpolation in regexes to work like in qq strings, inclusing the ability to put method calls at the end?

[14:38] <jnthn> masak: Not according to my memory of the grammar

[14:39] *** vytas left
[14:39] <PerlJam> Greetings #perl6 people

[14:40] <masak> PerlJam: greetings, earthling

[14:40] <jnthn> o/ PerlJam 

[14:41] <jnthn> masak: Though if you use a double-quoted string in the regex... ;)

[14:41] <jnthn> m: my $a = "a"; say so "fooAbar" ~~ /foo "$a.uc()" bar/

[14:41] <camelia> rakudo-moar e4077e: OUTPUT«True␤»

[14:41] <masak> ooh

[14:41] <jnthn> Then you can have your braid and eat it.

[14:41] <masak> yeah, that looks better. jnthn++

[14:42] <PerlJam> Better add that to the FAQ for P5 people

[14:43] <PerlJam> (do we have a faq?)

[14:43] *** vytas joined
[14:44] * masak .oO( Q: Do we have a FAQ? A: Yes. )

[14:45] <ShimmerFairy> Q: Do we have an FAQ? A: Nope.

[14:45] <timotimo> .. when the question "do we have a faq?" becomes a faq itself, the faq needs to be made more obvious to find ..

[14:45] <DrForr> My translator does "foo\u$x" --> "foo{uc $x}" :)

[14:45] <masak> DrForr: cute!

[14:46] <jnthn> If only it was at faq.perl6.org!

[14:47] <PerlJam> :)

[14:47] <ShimmerFairy> I like the sound of faq.perl6.org :)

[14:47] *** Hor|zon joined
[14:49] <lucasb> Q: What are all those $@%* signs for?  A: Watch your $@*$!% mouth, buddy!

[14:49] <timotimo> jnthn: if only the bugtracker were at bugs.perl6.org; if only you could find contact information at contact.perl6.org, if only you could download a perl6 implementation at download.perl6.org ;)

[14:49] <lucasb> I always laugh when I remember that one

[14:50] <ShimmerFairy> subdomain-help.perl6.org

[14:50] *** atroxaper joined
[14:53] <[Coke]> bugs.perl6.org could be a redirect to rt.perl.org

[14:54] <[Coke]> or a placeholder page with a list of all the various places to submit bugs would actually be better. 

[14:54] *** atroxaper left
[14:55] * hoelzro really needs to set up a Windows test machine

[14:56] *** JimmyZ_ joined
[15:00] *** _mg_ left
[15:01] *** FROGGS left
[15:02] <hoelzro> speaking of Windows, would one of you Windows users out there mind testing out Linenoise on Windows for me?

[15:03] *** n0tjack joined
[15:08] <timotimo> [Coke]: especially since rt.perl.org shows you a front page with "sign in or register, please" and in the corner there's a little note of a "public interface", and even then you have bugs for perl5 and perl6 and it's not always very easy to tell apart depending on what piece of RT you're looking at

[15:08] <timotimo> i think the best thing we could implement would be a "perl6 web ring"

[15:09] <ShimmerFairy> In the case of RT, I think it'd be nice if there was a separate Perl 6 RT (though I imagine the migration would be painful)

[15:10] *** domidumont left
[15:10] *** raiph left
[15:10] <timotimo> maybe rt has some way to get a second read-write "view" of the same underlying database?

[15:11] <timotimo> i mean, we already have rakudobug@ which puts bugs into the perl6 "part" of the rt

[15:11] <timotimo> maybe there could be something that leaves the "choose between perl5 and perl6" parts out completely

[15:11] *** amurf joined
[15:13] <PerlJam> some way to cleanly separate the p5 parts from the p6 parts would be nice.

[15:14] <PerlJam> There have been cases of a p5per commenting on a p6 bug as if it were a p5 bug

[15:14] *** _mg_ joined
[15:15] <timotimo> ah, yes, i remember seeing a mail about that

[15:15] <timotimo> "your sub has an illegal prototype, dood"

[15:15] *** lizmat joined
[15:15] <lizmat> computer, messages

[15:15] <yoleaux> 09:40Z <FROGGS> lizmat: I'm going to revert your formatting patch, it introduces changed meaning (some bugs, one fix) mentioned here on irc

[15:16] *** amurf left
[15:17] <ShimmerFairy> All the more reason for a separate RT :)

[15:18] <PerlJam> ShimmerFairy: Let us know when you've got that working  :)

[15:19] <timotimo> :\

[15:20] *** AlexDaniel left
[15:21] <PerlJam> ShimmerFairy: I imagine it would require a data dump of the existing RT to get the ticket numbers right.  And then it's going to need someone to admin it.  And the p6 queue in the "old" RT will need to be shutdown in some way so that people don't accidentally send tickets there any more.

[15:22] <PerlJam> not insurmountable problems, but it will be lots of work.

[15:22] <lizmat> good *, #perl6!

[15:22] <PerlJam> lizmat: o/

[15:22] <lizmat> well, I guess I made a lot of people happy last night  :-(

[15:23] <lizmat> .tell FROGGS re http://irclog.perlgeek.de/perl6/2015-07-15#i_10898154 , yes that was intentional

[15:23] <yoleaux> lizmat: I'll pass your message to FROGGS.

[15:23] <ShimmerFairy> Sure, I'm not saying it'd be easy :) But it does seem weird that the two languages are still sharing a ticket system. (And fwiw, parrot managed to make the move away, as I recall)

[15:23] *** Ven joined
[15:23] <skids1> lizmat: eh, everyone stays indecisive until something actualy happens.

[15:24] <PerlJam> ShimmerFairy: isn't the plan for those same two languages to share a CPAN?  Sharing a ticket system wouldn't seem that out of place.

[15:25] <PerlJam> (though, now that I think about it ...  rt.cpan.org exists for modules on CPAN; how is it to differentiate between p5 and p6 modules that are named the same?)

[15:25] <lizmat> .tell FROGGS since the error messages could also come from using the sub version, so the prefixing period could be misleading

[15:25] <yoleaux> lizmat: I'll pass your message to FROGGS.

[15:26] *** khw left
[15:26] <lizmat> .tell jnthn How would reverting my patch make things worse?   It reverts fine afaixs

[15:26] <yoleaux> lizmat: I'll pass your message to jnthn.

[15:26] <ShimmerFairy> PerlJam: yeah, but I think "bug reports for compilers" is a bit of a different case than "extensions for languages" :)

[15:27] <lizmat> .tell FROGGS re http://irclog.perlgeek.de/perl6/2015-07-15#i_10898200 , the range info is just for display, so a string will do fine

[15:27] <yoleaux> lizmat: I'll pass your message to FROGGS.

[15:27] *** araujo left
[15:27] <jnthn> lizmat: It's just that when using "git blame" to understand the history of a chunk of code - which I do a decent bit - it means there's an extra level to dig through

[15:27] <yoleaux> 15:26Z <lizmat> jnthn: How would reverting my patch make things worse?   It reverts fine afaixs

[15:27] <jnthn> Not the end of the world.

[15:28] <jnthn> I just didn't want to rush to a full revert if it wasn't needed.

[15:28] * TimToady would prefer a revert

[15:29] * TimToady thinks readability was negatively affected

[15:29] <dalek> rakudo/nom: cadee02 | lizmat++ | src/core/ (52 files):

[15:29] <dalek> rakudo/nom: Revert "Use colon syntax for named parameters consistently"

[15:29] <dalek> rakudo/nom: 

[15:29] <dalek> rakudo/nom: This reverts commit 22f719226914bd6b913e706e0321d027449cca7a.

[15:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cadee02e44

[15:30] <nine> PerlJam: Perl 6 modules have a long name that should be used for the name of the RT queue anyway.

[15:30] <PerlJam> nine: ah, good point.

[15:31] <masak> lizmat++ # lots of useful commits overall

[15:31] *** _mg_ left
[15:32] *** rindolf left
[15:32] <vendethiel> lizmat++ :)

[15:33] <jnthn> If you commit enough things, somebody won't like some of them :)

[15:34] <masak> that's an Umeshism, at least if it's stated as "if people like all of your commits, you're not making enough commits" :)

[15:38] <lizmat> jnthn: that's true

[15:38] <lizmat> and then I guess there are the people that have committed to doing patches, and then don't commit

[15:38] <timotimo> yeah, and lizmat has committed so many things that were great!

[15:38] <lizmat> I don't like that either  :-(

[15:39] <masak> jnthn: sometimes I wish for a "deep blame", tracking all changes all the way back...

[15:39] <lizmat> masak: +1

[15:39] <jnthn> masak: git log -L can sorta kinda ish help

[15:39] * TimToady feels deeply blamed  :)

[15:40] <PerlJam> TimToady: then you should also feel deeply praised :)

[15:41] * TimToady gets too much of that already

[15:41] * TimToady wonders if he's going to talk about himself in 3rd person all day...

[15:41] <nine> jnthn: since I discovered vim's git support (:Gblame), I don't mind a few extra blame steps anymore.

[15:41] * lizmat thinks it helps creating perspective 

[15:42] <timotimo> nine: yup, fugitive is great; you may be interested in gitv, too

[15:42] <timotimo> emacs also has a git mode that has some super cool name, iirc

[15:42] <timotimo> "Magit"

[15:43] * TimToady agrees that it can function as a kind of distancing method

[15:43] * TimToady gets tired of typing /me though

[15:44] <PerlJam> nine++, timotimo++  TIL about fugitive :)

[15:44] *** andreoss left
[15:45] <skids1> .oO(talk like an illeist day)

[15:45] * vendethiel loves magit

[15:45] <vendethiel> .oO( come to the emacs side, we have cookies... and evil-mode )

[15:46] <PerlJam> vendethiel: vi(m) fits my brain better.  (just like Perl fits my brain better than most other programming languages)

[15:47] <masak> I enjoy vim for coding and Emacs for prose.

[15:47] <timotimo> that's why ven recommends evil-mode

[15:48] <muraiki> but there's still the "learn all the other emacs stuff that isn't covered in evil-mode" problem

[15:49] <PerlJam> exactly

[15:49] <vendethiel> PerlJam: evil-mode is great.

[15:49] <PerlJam> (or ... "Why does my editor speak with a lisp?")

[15:50] <ShimmerFairy> I like my editors not requiring keystrokes to begin editing :P

[15:50] <muraiki> well, I think a vim vs emacs debate will not be a very useful discussion. because clearly acme is the best editor.

[15:50] <JimmyZ_> Is evil-mode better than vim?

[15:50] <vendethiel> PerlJam: I'll admit to liking lisp ;-)

[15:53] <vendethiel> JimmyZ: I'm not sure it's "better", but I've never missed anything

[15:53] *** zakharyas left
[15:53] <skids1> Like just about every bit of software these days, with emacs there is a growing list of defaults package maintainers think are cool that simply must be killed.  Die electric indent. 

[15:54] * JimmyZ_ always use nano for committing git message.

[15:55] <skids1> .oO(Don't get me started on bash-completions)

[15:55] * JimmyZ_ uses zsh 😊

[16:01] <geekosaur> you do realize zsh comes with a completion nightmare that puts bash-completions to shame? 😊

[16:01] *** smls joined
[16:01] <geekosaur> (at least you get to choose whether to activate it on first run...)

[16:01] *** yqt joined
[16:01] <skids1> It's really an art form: how can we make the CLI as WAT as moderm UIs

[16:03] <timotimo> skids1: electric indent is when you write something inside a line that changes the indentation of that line you're in?

[16:04] <skids1> Something like that.  All I remember is frantically googling to find out how to turn it off and then saying "i really need to start keeping a custom .emacsrc on a flash drive"

[16:04] <ShimmerFairy> timotimo: A while ago a new version of emacs changed things around so <Enter> did newline+indent, and C-j did just a newline, the exact opposite of the previous behavior.

[16:07] <timotimo> oh?

[16:08] <ShimmerFairy> Needless to say, I corrected this bug pretty quickly :P

[16:09] *** Ven left
[16:10] <skids1> I do like the new CTRL-L behavior though.

[16:10] <ShimmerFairy> I don't think I've ever used that.

[16:11] <arnsholt> skids1: Having looked at the introduction to the Unix Hater's Handbook earlier today, I'm reminded of this quote from it: "What is this horrible fascination with Unix? The operating system of the 1960s, still gaining in popularity in the 1990s."

[16:11] <arnsholt> To be fair, it follows on with "A horrible system, except that all the other commercial offerings are even worse."

[16:12] <skids1> Lately my pet peeve is closed source products implementing space-completion with no way to turn it off.  Trend obviously motivated by users who don't have tab keys on their phone softkeys.

[16:15] <arnsholt> Mal a propos Unix hating, there's been some hilarious comments on HN when people see Rob Pike and Ken Thompson's comments on how modern Unix is kind of terrible in various places

[16:17] <arnsholt> Or realizing that Rob Pike's preferred editor is *mouse-driven* =D

[16:19] <moritz> .oO( mine is visual )

[16:20] *** Spot__ left
[16:20] *** timotimo left
[16:20] *** yogan left
[16:20] *** retupmoca left
[16:20] *** hoelzro_trying_w left
[16:20] *** ugexe left
[16:20] *** yogan joined
[16:20] *** hoelzro_trying_w joined
[16:20] *** timotimo joined
[16:20] *** retupmoca joined
[16:20] *** ugexe joined
[16:20] *** spider-mario joined
[16:21] *** telex left
[16:22] *** telex joined
[16:22] *** Spot__ joined
[16:23] <arnsholt> moritz: I think GUI editors are (grudgingly) tolerated. But an editor that does not strive towards being 100% keyboard-driven is heresy, pure and simple =)

[16:25] * lizmat is moving away from the keyboard for a bit

[16:25] * sjn thought voice-based programmng was all the rage in rage these days... "Siri, make me an app that pays my bills"

[16:38] *** atroxaper joined
[16:40] *** cognominal left
[16:41] <TimToady> "Okay, you are now an app that pays your bills."

[16:41] *** cognominal joined
[16:42] *** atroxaper left
[16:47] *** diana_olhovik joined
[16:47] <DrForr> m: say q{{}}

[16:47] <camelia> rakudo-moar cadee0: OUTPUT«␤»

[16:48] *** JimmyZ_ left
[16:54] <smls> Why doesn't Perl 5 allow non-literal values in regex quantifiers, like Perl 6's "** {$x}" :(

[16:55] <smls> Also, now that I've been spoiled by Perl 6, I'm really missing the ability to get at the capture values of recursed subpatterns...

[16:56] <PerlJam> smls: I think you want #perl  ;)

[16:56] <smls> OTOH, I can't use Perl 6 for what I'm doing because it involves matching against binary blobs

[16:56] *** virtualsue joined
[16:56] <smls> (which won't be supported in 6.0)

[16:57] <smls> PerlJam: Nah, that would come across as trolling :)

[17:01] *** amurf joined
[17:02] *** salv0 joined
[17:02] *** dakkar left
[17:04] *** jeffreykegler joined
[17:05] <jeffreykegler> TimToady: re the Eco _Search for a Perfect Language_ book -- I thought it was excellent and am glad that you did ...

[17:05] <jeffreykegler> it's biggest fault is that it is very Euro-centric.

[17:06] *** amurf left
[17:06] <jeffreykegler> How can you write a book about attempts at a perfect language, and omit Sanskrit?

[17:06] <smls> heh, I guess   (?{ $i = 0 }) (?<loop> ... (?(?{ $i < $x })(?&loop)) )   works as a dynamic quantifier in P5 regexes, if there's no recursion

[17:06] <smls> it's hideous though, and requires externally declared vars

[17:10] *** vendethiel left
[17:12] *** vendethiel joined
[17:12] *** felher joined
[17:13] *** araujo joined
[17:13] *** araujo left
[17:13] *** araujo joined
[17:16] <smls> So yeah, TimToady++ for boldly redesigning the regex language :)

[17:17] *** araujo_ joined
[17:17] *** araujo_ left
[17:18] *** araujo left
[17:20] *** Hor|zon left
[17:20] * geekosaur was tempted to mention that about how to do it with p5, but would prefer to quietly forget it exists...

[17:31] <dalek> perl6-roast-data: 7c94661 | coke++ | / (9 files):

[17:31] <dalek> perl6-roast-data: today (automated commit)

[17:31] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/7c94661320

[17:33] *** vendethiel left
[17:34] <[Coke]> (parrot made the move away from RT) what a hellish waste of time that was. 

[17:34] *** vendethiel joined
[17:35] *** domidumont joined
[17:36] *** espadrine left
[17:37] <[Coke]> Moving ticketing systems is a bunch of infrastructure work that 1) takes time away from other infrastructure work, 2) has little practical benefit, 3) ends up happening more than once (cvf. parrot). Our best bet for perl6 is to document all the places bugs can be opened and make it easy for people to find existing bugs or create new ones.

[17:38] <[Coke]> I would be not quite opposed to saying "all new tickets go in the new system" if we were to do that, but we would have to LOVE whatever the new system was.

[17:38] <[Coke]> there would have to be clear technical advantages. If you think moving ticketing systems is something you want to work on, ping me and I will be happy to suggest other infrastructurey things. :)

[17:39] *** zostay left
[17:39] *** zostay joined
[17:42] *** nys joined
[17:51] *** lucasb left
[17:54] *** jeffreykegler left
[17:56] *** yqt left
[17:59] *** skids1 left
[18:03] <dalek> roast: 9ace330 | lizmat++ | S09-typed-arrays/native- (2 files):

[18:03] <dalek> roast: Revert "Tweak typed error checks"

[18:03] <dalek> roast: 

[18:03] <dalek> roast: This reverts commit ed09f71f7bab673948a65b7c787296a08f109d20.

[18:03] <dalek> roast: review: https://github.com/perl6/roast/commit/9ace33081f

[18:04] <lizmat> since we also reverted 22f719226914bd6b913

[18:05] *** domidumont left
[18:13] *** zakharyas joined
[18:16] *** VinceDee joined
[18:16] *** Hor|zon joined
[18:16] *** yqt joined
[18:17] *** spider-mario left
[18:18] *** spider-mario joined
[18:21] *** Hor|zon left
[18:22] *** [Sno] left
[18:22] *** [Sno] joined
[18:22] <PerlJam> [Coke]++   That was a very good summary.

[18:22] *** bin_005 joined
[18:27] *** [Sno] left
[18:27] *** ][Sno][ joined
[18:29] <PerlJam> lizmat: IMHO (others may differ), the one thing I liked best about your earlier patch that was reverted was the removal of those dots.  They can be removed without loss of information and possibly remove confusion when the user uses a sub form rather than a method form.

[18:30] <lizmat> patches welcome  :-)

[18:30] *** rurban left
[18:31] <PerlJam> As soon as my time + energy + circumstances align, perhaps   (If I don't forget by then :)

[18:42] *** virtualsue left
[18:44] *** virtualsue joined
[18:46] *** zakharyas left
[18:46] <dalek> rakudo/nom: 648a585 | lizmat++ | src/core/ (6 files):

[18:46] <dalek> rakudo/nom: Remove confusing . from error messages, PerlJam++

[18:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/648a5853ef

[18:46] <dalek> roast: 91bd47e | lizmat++ | S09-typed-arrays/native- (2 files):

[18:46] <dalek> roast: Revert "Revert "Tweak typed error checks""

[18:46] <dalek> roast: 

[18:46] <dalek> roast: This reverts commit 9ace33081f9862771bc400ae04839b11b6ca62d6.

[18:46] <dalek> roast: review: https://github.com/perl6/roast/commit/91bd47ef4f

[18:47] <lizmat> PerlJam: vi `ack -l '<\.' src/core` is your friend   :-)

[18:47] <lizmat> off to see Butte Creek Falls &

[18:50] *** xfix joined
[18:50] *** xfix left
[18:50] *** xfix joined
[18:52] *** domidumont joined
[18:53] <masak> [Coke]++ # "happy to suggest other infrastructurey things"

[18:54] <masak> smls: if you want to privmsg at some point and discuss regex matching of binary blobs, we might make something happen pretty quickly in module space.

[18:57] *** Hor|zon joined
[19:09] *** domidumont left
[19:12] <moritz> m: say $?FILE

[19:12] <camelia> rakudo-moar cadee0: OUTPUT«/tmp/bbmXANMUMx␤»

[19:23] <dalek> rakudo/nom: 89847f8 | moritz++ | src/core/IO/Notification.pm:

[19:23] <dalek> rakudo/nom: Give IO::Notification::Change a gist method

[19:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/89847f880e

[19:27] *** atroxaper joined
[19:31] *** diana_olhovik left
[19:31] *** atroxaper left
[19:31] *** n0tjack left
[19:34] <dalek> doc: 89e66f8 | moritz++ | lib/Type/IO/Notification.pod:

[19:34] <dalek> doc: Document IO::Notification

[19:34] <dalek> doc: review: https://github.com/perl6/doc/commit/89e66f8f63

[19:38] *** CIAvash left
[19:39] <hoelzro> is there a minimum version of Windows that Rakudo will support?

[19:39] <hoelzro> I'm thinking of building a Windows VM (since I so often break things on that OS), and I'm wondering which version I should install

[19:40] <jnthn> hoelzro: Well, if you try it on Win95 it's probably not going to end well... :)

[19:40] <hoelzro> =P

[19:40] <jnthn> I can't imagine we don't work on anything Vista or later

[19:40] <moritz> hoelzro: I wouldn't recommend anything older than XP, though I don't know if that's actually new enough

[19:41] * jnthn is still on Win7, 'cus Win8 was horrid

[19:41] <jnthn> And yeah, for your own sake, skip Vista too :P

[19:41] <hoelzro> I have licensed copies of XP and 8.1, but I have 8.1 installed on the desktop

[19:41] <hoelzro> so I don't know what I'm legally allowed to do even

[19:41] <hoelzro> I'm guessing XP would be fine, since it's not installed anywhere

[19:41] *** Peter_R joined
[19:42] * moritz doesn't get the windows 8 jumps between tiles and traditional desktop

[19:42] <hobbs> it wants to be all tiles and new and ...

[19:43] <moritz> looks like "big boss wants tiles, users are used to traditional desktop, so both get both, and everybody's confused equally"

[19:43] <hobbs> but a million existing apps don't play nice with that and it can't break them without becoming irrelevant

[19:49] *** vendethiel left
[19:51] *** darutoko left
[19:56] *** smls left
[19:56] *** smls_ joined
[20:02] <hoelzro> apparently Microsoft makes VM images available for testing \o/

[20:05] *** salv0 left
[20:10] <b2gills> Perl 5 is still tested on Win2k SP4

[20:13] *** colomon left
[20:16] <hoelzro> Perl 5 is also still tested on VMS, I believe =)

[20:16] <nwc10> VMS is still supported by its vendor

[20:17] <nwc10> Win2k, not so much -)

[20:17] <hoelzro> touche

[20:17] <nwc10> no, I don't know why George Greer likes smoking on Win2k

[20:17] <nwc10> but we don't argue with useful donated work.

[20:32] *** xfix left
[20:32] *** colomon joined
[20:34] *** muraiki left
[20:35] *** spider-mario left
[20:38] *** spider-mario joined
[20:38] *** amurf joined
[20:43] *** amurf left
[20:50] *** kaare_ left
[20:51] *** colomon left
[20:54] *** colomon joined
[21:01] *** synbot6 joined
[21:04] *** bin_005_l joined
[21:04] *** synbot6 left
[21:04] *** bin_005 left
[21:06] <masak> 'night, #perl6

[21:12] *** captain-adequate joined
[21:14] *** colomon left
[21:15] *** atroxaper joined
[21:20] *** TEttinger joined
[21:21] *** atroxaper left
[21:29] *** smls_ left
[21:38] *** colomon joined
[21:53] *** nightfrog joined
[22:05] <jnthn> Another week, another progress report: https://6guts.wordpress.com/2015/07/15/this-week-less-than-hoped-but-still-good-stuff/

[22:13] <jnthn> 'night, #perl6

[22:14] <labster> jnthn++ good work last wek

[22:15] <labster> week

[22:18] *** virtualsue left
[22:23] *** bin_005_l left
[22:31] *** spider-mario left
[22:36] *** jonathan__ left
[22:40] *** coffee` joined
[22:53] *** VinceDee left
[22:54] *** telex left
[22:56] *** telex joined
[23:10] *** pdcawley left
[23:16] *** nebuchadnezzar left
[23:16] *** nebuchadnezzar joined
[23:24] *** amurf joined
[23:44] *** VinceDee joined
[23:47] *** Celelibi joined
