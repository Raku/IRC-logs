[00:00] <Wolfman2000> Perl 6 is not fully backwards compatible with Perl 5 for many reasons.

[00:00] <jnthn> emma: Some people dislike the break in compatibility. Others are disillusioned because, well, people ain't good with coping with the fact that some things just take a long time to do right.

[00:00] <jnthn> They're entitled to their opinion.

[00:01] <emma> Maybe eventually Perl6 will be thought of as the defacto perl and all of you will chat in #perl instead.

[00:01] <jnthn> Maybe. :-)

[00:01] <Tene> emma: Perl has a long tradition of strict backwards compatibility, at any price.  Perl 6 changes several things in incompatible ways, which is enough for some people.

[00:02] <Tene> And then some people odn't like those changes, and then conclude that it must not be Perl anymore.

[00:03] *** tak11 left
[00:03] <Tene> I've got a friend who is fanatically upset about Perl 6 because of minor changes to how it handles whitespace, for example.

[00:03] <Tene> He ranted to me for half an hour about it the other night.

[00:03] <Wolfman2000> But what can be done with Perl 6? Watch

[00:03] <Wolfman2000> rakudo: multi sub prefix:<√>(Num $x) { return sqrt $x; } ; say √25;

[00:03] <p6eval> rakudo fe6dd2: 5␤

[00:04] <fax> lol

[00:04] <emma> Well I was planning to learn perl.

[00:04] <fax> rakudo: multi sub prefix:<√>(Num $x) { return sqrt $x; } ; say √√25;

[00:04] <p6eval> rakudo fe6dd2: 2.23606797749979␤

[00:04] <emma> But now i don't know what I should learn. I was going to use this book -- http://www.perl.org/books/beginning-perl/

[00:04] <Wolfman2000> rakudo: multi sub prefix:<√>(Num $x) { return sqrt $x; } ; say √√10000;

[00:04] <p6eval> rakudo fe6dd2: 10␤

[00:04] <emma> but now i supose that book is worthless if you believe Perl 6 is perl.

[00:04] <fax> emma irssi scripts would be in perl 5 (the normal perl)

[00:05] <jnthn> emma: I'm helping Perl 6 come about, but I also still a lot of my day to day work in Perl 5. Perl 5 is still a great, and very capable, langauge.

[00:05] <Wolfman2000> emma: I'm also helping Perl 6 by at least giving some of what's out a shot.

[00:05] <Wolfman2000> I'm one of the guinea pigs that makes sure the language works as it should.

[00:06] <Tene> emma: A large part of what you'd learn from that book would apply about the same to Perl 5 and Perl 6.  As well, most people don't consider Perl 6 ready for production use yet, and wouldn't recommend it.  It's still missing quite a bit, although improving rapidly.

[00:06] <sjohnson> Wolfpig, if you will :)

[00:06] <Wolfman2000> I'll soon be working with masak on a feature he's working on.

[00:06] <Wolfman2000> sjohnson--: Not funny.

[00:06] <sjohnson> tough crowd

[00:06] <Tene> http://rakudo.org/status/

[00:06] <Tene> emma: That book would not be a bad place to start learning Perl, and if you want to use Perl today, then Perl 5 is your best option.

[00:07] <Tene> Perl 6 has been in progress for a long time, and while it's much closer today, we don't expect to have a release we can recommend for much until... April, I think?

[00:07] <Wolfman2000> ...woah. didn't notice rakudoperl had a twitter page. I better follow it now

[00:07] <Tene> It's not very active.

[00:08] <Wolfman2000> Well, you've just gained a follower

[00:08] <Tene> No I haven't.

[00:08] <Tene> My twitter account is 'tene', not 'rakudoperl'.

[00:08] <Wolfman2000> Tene: you get my point...I hope.

[00:09] <Tene> Wolfman2000: Oh, I understand now.  Sorry.

[00:09] <Wolfman2000> it's alright

[00:09] *** muixirt left
[00:10] <emma> Tene: okay thanks!

[00:10] <jnthn> emma: If you want to learn a version of Perl that lets you Get Stuff Done today and that's your main objective, and you don't want to run into compiler bugs, go for Perl 5. What you learn there will prime you well to learn Perl 6 when it's ready and if you like the look of what it offers. :-)

[00:10] <emma> well that sounds pretty good then :)

[00:10] *** orafu left
[00:10] <emma> This is sort of like an experimental perl channel and some day you will all come back to #perl perhaps.

[00:11] <Tene> Hopefully.

[00:11] <Tene> This is mostly a separate channel for *developing* Perl 6.

[00:11] *** orafu joined
[00:12] <Tene> There's some segment of the Perl community that just *hates* Perl 6.  I'm curious to find out how that changes over time after the big release next year.

[00:14] <s1n> pmichaud: will you have time tomorrow to get that wiki up and running (or give me some control to do what needs to be done)?

[00:16] *** nihiliad left
[00:17] *** nihiliad joined
[00:17] <s1n> Tene: i suspect none. it hasn't changed much over the course of p6, so i'm not hopeful, but forward is still progress

[00:19] <pmichaud> s1n: I think I can arrange it, yes.

[00:22] <jnthn> pmichaud: Didn't get any energy for ng today, 'fraid (had to take care of a deployment of some web thingy...on the upside, that's taken care of now :-))

[00:23] <jnthn> Next week is looking pretty clear though. :-)

[00:23] <pmichaud> jnthn: no problem, you'll be more productive after I land the speed improvements anyway :)

[00:23] <jnthn> pmichaud: Well, that too. :-)

[00:23] <jnthn> I'll take 20 seconds compiles over 5 minute ones any day.

[00:23] <pmichaud> I'll see how low I can get things :)

[00:24] <jnthn> You're costing icanhascheezburger some hits in improving it though.

[00:25] <jnthn> Anyway, I'm hoping that the Actions.pm won't grow too huge.

[00:25] *** SmokeMachine left
[00:26] *** starek joined
[00:28] *** xabbu42 left
[00:28] *** starek left
[00:31] <pmichaud> it should end up less huge than before

[00:31] <pmichaud> although it might be "as big" because we duplicate a lot of small methods

[00:32] <jnthn> Hmm

[00:32] <jnthn> Yeah, there is that.

[00:32] <pmichaud> anyway, we should end up with not-as-big methods, at any rate :)

[00:32] <pmichaud> testing new lineof code now

[00:32] <jnthn> \o/

[00:32] <jnthn> I'm glad we got to the bottom of that one.

[00:32] <jnthn> And that I didn't have to write the fix. ;-)

[00:32] <pmichaud> yes.  and I feel better that we'll handle utf8 there also

[00:33] <pmichaud> we should see some good code improvement there.

[00:33] <colomon> \o/

[00:36] * jnthn is moving a physical timezone west for much of December.

[00:37] <sjohnson> masak++ for regex help earlier

[00:37] *** orafu left
[00:38] *** orafu joined
[00:40] *** jaffa8 left
[00:42] *** SmokeMachine joined
[00:48] <pmichaud> ugh, my patch isn't working

[00:48] <pmichaud> src/string/api.c:1191: failed assertion '!PObj_on_free_list_TEST(src)'

[00:49] <pmichaud> oh.  I think I know.

[00:50] *** payload left
[00:50] <pmichaud> nope, not it.

[00:52] <jnthn> pmichaud: gah, that's nasty :-(

[00:52] <jnthn> pmichaud: mark fail?

[00:52] <pmichaud> probably, but I'm not sure where

[00:52] <pmichaud> want to look at the patch for me real quick?

[00:52] <jnthn> Sure

[00:52] <pmichaud> (you're more familiar with this stuff than I am)

[00:53] <pmichaud> http://gist.github.com/229000  # CodeString.pmc patch

[00:54] <jnthn> looking

[00:55] <jnthn> That mark is probably wrong.

[00:55] <jnthn> moment

[00:56] <pmichaud> I was trying to follow marks in other PMC code :-|

[00:56] <jnthn> pmichaud: Yes, it's wrong.

[00:56] <jnthn> You need to call SUPER()

[00:56] <pmichaud> I couldn't find SUPER() in any other mark code, though.

[00:57] <pmichaud> I'll try it, though.

[00:57] <jnthn> You need to call SUPER() :-)

[00:57] <jnthn> pmichaud: Look in the string.pmc. It marks the STRING *.

[00:57] <pmichaud> that fixed it.

[00:57] <jnthn> Good.

[00:57] <pmichaud> ...wonder why other mark() don't have to do it when they're in a subclass, though.

[00:58] <jnthn> What did you look at?

[00:58] <jnthn> I mean, Perl6MultiSub doesn't call SUPER()

[00:58] <jnthn> But that's because it doesn't share the same layout as what it inherits from.

[00:58] <pmichaud> oh, I found another one -- ExceptionHandler calls SUPER()

[00:58] <jnthn> (Becase MultiSub's layout is wrong.)

[00:58] <Wolfman2000> Which Synopsis covers classes again? I think I need to study that once more before I attempt the Linked List again.

[00:58] <pmichaud> filehandle.pmc doesn't call SUPER() in mark()

[00:59] <jnthn> pmichaud: Yes, but Handle doesn't have any markables.

[00:59] <pmichaud> okay.

[00:59] <jnthn> Granted, that means it's assuming stuff about what it inherits from.

[00:59] <pmichaud> that makes sense then.

[00:59] <jnthn> Which is probably an anti-pattern.

[01:00] <jnthn> Since if Handle was to start having a PMC reference, then FileHandle would not mark stuff it should.

[01:00] <jnthn> oh lol guess what

[01:00] <jnthn>     /* TODO: Consider encapsulating PIOHANDLE as a PMC type, for subclassing */

[01:00] <pmichaud> what?

[01:00] <jnthn>     ATTR PIOHANDLE os_handle;         /* Low level OS descriptor      */

[01:00] <jnthn> bwaha

[01:00] <pmichaud> anyway, I have news to report

[01:00] <pmichaud> with the lineof fix in place

[01:01] <pmichaud> my test file b.pm

[01:01] <jnthn> So anyway, if they do that TODO, FileHandle will need to start calling Super. :-)

[01:01] *** darln joined
[01:01] <pmichaud>     was 55 seconds

[01:01] *** payload joined
[01:01] <jnthn> uh-huh.

[01:01] <pmichaud>         now 24 seconds

[01:01] <jnthn> Win.

[01:01] <jnthn> pmichaud++

[01:01] <pmichaud> we'll get more win when I put the transcode back in place

[01:01] <pmichaud> I'll do that while running make test

[01:01] <jnthn> Sure, but you've no doubt solved the major bottleneck.

[01:04] <Wolfman2000> ah, here we go: S12

[01:04] <lichtkind> good night

[01:04] *** lichtkind left
[01:05] <darln> is there any place one can get a test package of Perl 6 for testing?

[01:05] <pmichaud> darln: http://rakudo.org/how-to-get-rakudo

[01:05] <pmichaud> darln:  http://perl6.org/

[01:07] <darln> perl6.ord gives me NXDOMAIN, I'll try out rakudo though

[01:07] <darln> is rakudu really Perl 6 though?

[01:07] <pmichaud> .org

[01:07] <darln> ?

[01:07] <darln> yeah I can't open that page

[01:07] <pmichaud> oh, perhaps the dns server is down righ tnow

[01:07] <Tene> darln: Yes, Rakudo is the predominant implementation of Perl 6.

[01:08] <pmichaud> yes, rakudo really is an implementation of Perl 6

[01:08] <darln> not getting anything with dig +trace either

[01:08] <pmichaud> I bet the dns server was done.  I know they were doing upgrades on the server earlier today.

[01:08] <pmichaud> s/done/down/

[01:09] <darln> sorry, let me get this straight, theres implimentations of an imcomplete spec? curious

[01:09] <pmichaud> why not?

[01:09] <Tene> http://rakudo.org/status/ -- Rakudo implements this much of the spec.

[01:09] <pmichaud> a spec doesn't have to be complete to implement it

[01:10] <Tene> darln: The implementations drive the spec, in many cases.

[01:10] <darln> well I'm just trying ot imagine a Perl with half the features missing :p

[01:10] <pmichaud> ODF 1.0  was an incomplete spec, but plenty of people implemented it

[01:10] <pmichaud> in fact, on the internet, the official way to do things is to have multiple implementations before a specification is designed and approved :)

[01:10] <darln> pmichaud: actually didn't many people have ot fill in the gaps?

[01:11] <pmichaud> sure.  but anyone who believes a spec is complete before implementation begins is still designing in the 1980s :)

[01:11] <darln> and don't even get me started on 802.11 N

[01:12] <jnthn> darln: The waterfall model just doesn't work out so well for language design. Sometimes things that seem like a Great Idea don't work out quite so well once people start writing code in the language, but there's no way for people to meaningfully write code if they don't have a way to run it.

[01:12] <Tene> Perl 6 subscribes to the Whirlpool development strategy.

[01:12] <jnthn> It's a process of convergence.

[01:12] <darln> pmichaud: well most langs have a solid base spec before it's released in any usable fashion

[01:12] <pmichaud> Perl 5 didn't.

[01:13] <pmichaud> nor did PHP, for that matter.  :)

[01:13] <Tene> darln: Perl 6 had a pretty good spec before anyone started working on Rakudo.  We just were realistic enough to recognize that it would change in response to the implementation, so we didn't play silly naming games with it.

[01:14] <pmichaud> I'd actually say that most languages started without a solid base spec before they were released :)

[01:14] <darln> um, Perl 5 built on Perl 4 which built on Perl 3, .... and similar for PHP, they all had a solid BASE

[01:14] <s1n> darln: no, most things that have a spec were either 1 RFC'd in the 70's or have the spec created while the impl is created

[01:14] <pugs_svn> r29022 | kyle++ | [t/spec] typo fix 

[01:14] <pmichaud> the "solid specification" came long after the language.

[01:14] <s1n> C had no solid spec for liek what, 15 years?

[01:14] <pmichaud> darln: there may have been a solid "base" for Perl 5, but there certainly wasn't a spec that preceded an implementation

[01:14] <s1n> and that language is far less complex

[01:15] <pmichaud> unless you claim that an implementation is somehow a spec, in which case my point is proven :)

[01:15] <darln> ok maybe spec isn't the word I was looking for then

[01:15] <darln> well, I would consider Perl5's perldoc lib to be it's spec

[01:15] *** nihiliad left
[01:15] <pmichaud> heh

[01:16] <darln> I don't think Perl ever had na officla RFC or so

[01:16] <s1n> heh

[01:16] <pmichaud> that's.... funny

[01:16] <s1n> does perl5 pass it's own test suite yet?

[01:16] <pmichaud> because perldoc explicitly says that if the docs don't match the implementation, it's the documentation that's wrong :)

[01:16] <darln> well to me a spec is what describes all the aspects of something, and perldoc seems to be as clsoe ot that as you can get for Perl

[01:16] <darln> s1n: actually yes it does, form what I've seen

[01:16] <s1n> darln: which do you think came first, perl or perldoc?

[01:17] <pmichaud> darln: sure.  but the implementation clearly comes before the spec

[01:17] <darln> like I said, when I said "incomplete spec" a bit back I clearly used the wrong terms/words

[01:17] <pmichaud> darln: yes, I'm picking on you a bit.  :)

[01:17] <s1n> the only thing that speaks is code, everything else is fluff

[01:17] <pmichaud> darln: the truth is that the language and specification co-evolve together

[01:18] <darln> I was meaning some sort of definition or reference so one would know what is what in the lang itself

[01:18] <pmichaud> right

[01:18] <pmichaud> the language and specification co-evolve together

[01:18] <darln> you can't have a lang with out some clear definitions of syntax and keywords and such

[01:18] <darln> or I should say a usable lang

[01:18] <pmichaud> we have a spec, and we implement the spec, and as we do the implementation we discover places where the spec is imprecise or doesn't work, so we revise the spec based on the implementation, which drives more implementation which ...

[01:19] <pmichaud> Perl 6 is definitely a usable lang.

[01:19] <Tene> darln: There *was* a fairly significant spec before work on Rakudo began, as I said.  It's just that nobody believed that it was final, because we all knew it would change in response to the implementation.

[01:20] <s1n> rakudo is only now catching up to ow complete pugs was (in comparison to the spec then)

[01:21] <s1n> pmichaud might argue it's better now with nqprx

[01:21] <pmichaud> I think rakudo probably surpassed pugs sometime over the summer

[01:21] <pmichaud> with nqprx it's way behind...but we should be able to catch up again in a few weeks

[01:21] <Tene> +1

[01:22] <s1n> the point is the spec used to drive more implementation, now the implementations are catching up to the spec and they _have_ to co-evolve, just like pmichaud said

[01:23] <lisppaste3> wolfman2000 pasted "Nominal type check failed for parameter '$next'; expected Node but got Failure instead in Main  (um, what if I WANT undef?)" at http://paste.lisp.org/display/89963

[01:23] <Wolfman2000> I thought I had this...

[01:24] <jnthn> Wolfman2000: The type constraints are optional. :-)

[01:24] <Wolfman2000> jnthn: If that's supposed to be a hint to the solution, I'm dense.

[01:24] <pmichaud> jnthn: okay,  compiling b.pm was 55 seconds, now 16.5 seconds

[01:25] <jnthn> pmichaud: omg

[01:25] <pmichaud> (put in the transcoding optimization)

[01:25] <jnthn> Nice.

[01:25] <pmichaud> I'll measure Actions.pm from ng -- just a sec

[01:25] <jnthn> Wolfman2000: method new(Str $name, Node $next)

[01:25] <jnthn> Could be

[01:25] <jnthn>  method new(Str $name, $next)

[01:25] <jnthn> Then you can pass what you like to $next

[01:26] <Wolfman2000> jnthn: Can type junctioning also work then? Say: method new(Str $name, Node|Failure $next)?

[01:26] <pmichaud> jnthn: Actions.pm on my box is now 13 seconds to pir

[01:26] <jnthn> pmichaud: huh, I want your box.

[01:26] <pmichaud> you'll have it when I check in these changes :)

[01:26] <jnthn> \o/

[01:26] <pmichaud> and I still have quite a bit more optimization to put in place :)

[01:26] <jnthn> Wolfman2000: No

[01:27] <lisppaste3> wolfman2000 annotated #89963 "As jnthn just said, no type junctioning. Oh well..." at http://paste.lisp.org/display/89963#1

[01:27] <jnthn> Wolfman2000: by the way, if you don't want to have to specify the next node, why not make it an optional param?

[01:27] <jnthn> method new(Str $name, Node $next)

[01:27] <Wolfman2000> jnthn: One step at a time.

[01:27] <jnthn> gah, paste fail

[01:27] <jnthn> method new(Str $name, Node $next?)

[01:27] <jnthn> Then you can call it as Node.new("Wolfman2000") :-)

[01:27] *** envi^home joined
[01:28] <Wolfman2000> jnthn: then what's $next set to?

[01:28] <jnthn> An undef, iirc

[01:28] * jnthn thinks something might still be fishy here...

[01:28] <pmichaud> I wonder if it should get set to the Node type object, though.

[01:28] <jnthn> pmichaud: Yeah

[01:28] <jnthn> pmichaud: That was what I was thinking might be fishy.

[01:28] <Wolfman2000> doesn't seem to set to undef. Otherwise, it would have failed.

[01:28] <Wolfman2000> ...eprhaps it's being set to Failure automatically?

[01:29] <pmichaud> undef kinda is a Failure in rakudo at the moment

[01:29] <jnthn> pmichaud: If it's meant to happen, I can do it easy enough.

[01:29] <jnthn> pmichaud: It'd be consistent with var decls.

[01:29] <pmichaud> right

[01:29] <jnthn> So it feels right.

[01:29] <pmichaud> I've often thought we should do that for optional params

[01:29] <jnthn> Also it's Really Really Easy.

[01:29] <jnthn> Yeah.

[01:29] <pmichaud> I haven't thought that it's Really Really Easy.  At least not under the old param code :)

[01:30] <Wolfman2000> So...what types of junctioning are available then?

[01:30] <jnthn> pmichaud: iirc under the new param code I think it's like, changing one line or something.

[01:30] <pmichaud> right

[01:30] <Wolfman2000> If you can't junction types within a variable, what can you junction?

[01:30] <pmichaud> jnthn: that's what I had hoped and expected

[01:30] <jnthn> pmichaud: Heh. Maybe I did manage to get it about rightish after all. :-)

[01:31] <jnthn> Wolfman2000: We don't handle junctions of types. It was a proposed feature of Perl 6, it may happen in the future (after 6.0.0), but it raises...issues.

[01:32] <jnthn> Wolfman2000: I mean, you can make a variable that contains two types.

[01:32] <pmichaud> jnthn: okay, I wonder how much the change I just made to lineno will improve the spectest speed in master :)

[01:32] <jnthn> But you can't write a junction of types where a single type is expected.

[01:32] <jnthn> Sorry if this is confusing...

[01:32] <Wolfman2000> jnthn: It is a little confusing.

[01:33] <jnthn> I might explain it better if it wasn't 2:30am. ;-)

[01:33] <pmichaud> in general I suspect one never needs to do  |Failure, because an undefined value can be assigned to any container

[01:33] <jnthn> pmichaud: Oh hmm. And bound to any param?

[01:33] <jnthn> (when there's a nominal type there?)

[01:33] <pmichaud> don't know about that... but it might be consistant

[01:33] <pmichaud> *consistent

[01:33] <jnthn> Yeah

[01:34] <jnthn> Actually it does bug me a little that Wolfman2000++'s code that he nopasted gave that error.

[01:34] <pmichaud> I'd have to think about it a bit more when my brain is less fried and there's less noise in the house

[01:34] <jnthn> Yeah, I'd have to think about it when I'm more lucid too. :-)

[01:34] <Wolfman2000> jnthn: ...I found a bug?

[01:35] <pmichaud> currently there are 7 or 8 girl scouts here making dinner :)

[01:35] <pmichaud> so it's a bit noisy

[01:35] <jnthn> Wolfman2000: I'm not entirely sure. I'm not sure if the spec calls it one way or the other (can't remember it saying so).

[01:35] <jnthn> Wolfman2000: I think I'd like it if the spec was clarified, and Rakudo tweaked, so what you nopasted would work.

[01:35] <Wolfman2000> pmichaud: There is something that bugs me in the current implementation. If you try to say any variable that is set to undef or Failure, it often says "Use of uninitialized value". Is there a way to...well, not have it say that? (besides check if defined)

[01:36] <pmichaud> Wolfman2000: at the moment, no -- eventually we'll be able to do "no warnings;"  or something like that

[01:36] <pmichaud> actually, that might not be all that far off, now that I think about it

[01:36] <Wolfman2000> pmichaud: Let me try this approach then. Is there a way within a class to make variables with "has" as "never undef"?

[01:36] <jnthn> pmichaud: Heh. Does that end up compiling to setting some contextual variable like $*WARNINGS? :-)

[01:37] <pmichaud> jnthn: no, I think it's a pragma namespace

[01:37] <jnthn> pmichaud: ah, ok

[01:37] <pmichaud> (and namespaces are lexical now, so...)

[01:37] <jnthn> Yeah

[01:37] <jnthn> OK

[01:37] <jnthn> That'll work.

[01:37] <pmichaud> anyway, I think it just sets a lexical

[01:37] <pmichaud> Wolfman2000: at the moment the spec says that any container is allowed to have an undef in it

[01:38] <pmichaud> I'm not sure there's a way to prevent that.

[01:38] <pmichaud> oh, you could probably do it with a where clause

[01:38] <Wolfman2000> ...right, the new constraining thing

[01:38] <pmichaud> I don't know if where clauses would supercede the other rule

[01:38] <jnthn> subset DefinedNode of Node where *.defined;

[01:38] <jnthn> has DefinedNode $!x

[01:38] <pmichaud> well, we also have the new  :D and :U syntax

[01:38] <pmichaud> has Node:D $!x

[01:38] <jnthn> :D

[01:38] <eternaleye> Wolfman2000: You can't junction type _constraints_. You can junction any kind of object AFAIK.

[01:38] <jnthn> But we didn't implement those yet

[01:39] <jnthn> :S

[01:39] <pmichaud> (haven't read the latest spec to see what that does exactly)

[01:39] <lisppaste3> wolfman2000 annotated #89963 "Well, this constraint worked." at http://paste.lisp.org/display/89963#2

[01:39] <jnthn> pmichaud: I think once STD starts parsing them, we probably can expect they're gonna stay around.

[01:39] *** darln left
[01:39] <jnthn> I don't know that it does yet.

[01:39] <pmichaud> ...I think I saw that it does...

[01:40] <pmichaud> more precisely -- I think I saw a commit message that said it did.  But I may be mis-remembering

[01:40] <pmichaud> I know I saw a recent commit to either std or the spec about them.

[01:40] <jnthn> std: sub foo(Int:D $x) { }

[01:40] <p6eval> std 29022: ok 00:01 109m␤

[01:40] <jnthn> fajn, it does.

[01:40] <jnthn> uh, fine

[01:41] <jnthn> ...oh well, I prefer the Slovak spelling anyway. 

[01:41] <Tene> std: class prefix { ... }; sub foo(prefix:D $x) { ... }

[01:41] <p6eval> std 29022: ok 00:01 110m␤

[01:41] <pmichaud> gotta be a little careful with prefix:  :-).

[01:41] <jnthn> std: class IHASCHEEZBURGER { }; sub omg(IHASCHEEZBURGER:D!) { }

[01:41] <p6eval> std 29022: [31m===[0mSORRY![31m===[0m␤Unable to parse signature; couldn't find final ')' at /tmp/NKfRMD0fxJ line 1:␤------> [32mEEZBURGER { }; sub omg(IHASCHEEZBURGER:D[33m⏏[31m!) { }[0m␤    expecting any of:␤       circumfix␤        constraint␤       param_sep␤      parameter␤       

[01:41] <p6eval> ..trait␤    type_constraint␤  whitespace␤FA…

[01:41] <pmichaud> Also, I'm not sure if Int:D was parsed as a defined/undefined type or in the same category as    token  name:identifier { ... }

[01:41] <Tene> std: class postfix { ... }; sub foo(postfix:D $x) { ... } # is this better?

[01:41] <p6eval> std 29022: ok 00:01 110m␤

[01:41] <jnthn> aww

[01:42] *** s1n left
[01:42] <jnthn> std: class IHASCHEEZBURGER { }; sub omg(IHASCHEEZBURGER:D $nom) { }

[01:42] <p6eval> std 29022: ok 00:01 110m␤

[01:42] <jnthn> phew

[01:42] <Tene> pew

[01:42] <jnthn> Anyway, yeah, so, STD implements it.

[01:42] <lisppaste3> wolfman2000 annotated #89963 "Hooray defined or syntax! :D" at http://paste.lisp.org/display/89963#3

[01:42] <jnthn> When I work out how STD parses it, I'll implement it. :-)

[01:42] <eternaleye> rakudo: multi postfix:<:D>( Str $item ) { say "Sitem makes me happy!"; }; "Perl 6" :D

[01:42] <p6eval> rakudo fe6dd2: Sitem makes me happy!␤

[01:43] <Tene> Sitem?

[01:43] <eternaleye> grr

[01:43] <eternaleye> rakudo: multi postfix:<:D>( Str $item ) { say "$item makes me happy!"; }; "Perl 6" :D

[01:43] <p6eval> rakudo fe6dd2: Perl 6 makes me happy!␤

[01:43] <jnthn> I love how you can add smilies as custom operators.

[01:43] <Wolfman2000> jnthn: Think my latest pastebin version will be fine for now?

[01:43] <pmichaud> at least for the moment

[01:43] <pmichaud> that one might end up being an adverb

[01:44] <jnthn> pmichaud: aww

[01:44] <pmichaud> but smileys should be adverbs anyway

[01:44] <pmichaud> since they modify the operation

[01:44] <jnthn> True

[01:44] <jnthn> Heh.

[01:44] <pmichaud> note the difference between

[01:44] <pmichaud> "Perl 6 is dead."

[01:44] <jnthn> The Perl 6 grammar is optimized for parsing smilies in the correct grammatical category. :-)

[01:44] <pmichaud> and

[01:44] <pmichaud> "Perl 6 is dead."  :-)

[01:44] <jnthn> Wolfman2000: looking

[01:44] <pmichaud> it's definitely a modifier.

[01:45] <pmichaud> yay, all tests successful in parrot trunk with my patch

[01:45] <jnthn> yay

[01:45] <pmichaud> now checking codetests

[01:45] <jnthn> Wolfman2000: It's fine

[01:45] <Wolfman2000> jnthn++: Thanks. Maybe NOW I can make a proper linked list.

[01:46] <jnthn> Wolfman2000: However, neater is where { .defined } since it puts the thingy it's chekcing into $_

[01:46] <jnthn> Wolfman2000: And you can probably get away with *.defined too

[01:46] <jnthn> ... where *.defined;

[01:46] <Wolfman2000> jnthn: Is there a difference between .defined and *.defined?

[01:46] <jnthn> Wolfman2000: *.foo is equivalent to { .foo } which is equivalent to { $_.foo }

[01:47] <jnthn> Wolfman2000: The difference is that you can drop the curly brackets with the *.defined form.

[01:47] <jnthn> With { .defined } you need them.

[01:47] <jnthn> *.methodname will make a closure for you.

[01:47] <jnthn> It means you can do a lot of very neat things

[01:48] <jnthn> like @products.sort(*.price)

[01:48] <Wolfman2000> ...wasn't there a new object method that expanded out classes and stuff into Strings?

[01:48] <jnthn> To sort the array of, say, Product objects by their .price attribute.

[01:48] <Wolfman2000> I want to see my class node expanded into the string and its other node

[01:48] <jnthn> Are you thinking of .perl ?

[01:48] <jnthn> It's not *that* magical though.

[01:48] <jnthn> But you can override it and make it output something nice.

[01:49] <jnthn> oh wait

[01:49] <jnthn> Or you can override .Str

[01:49] <Wolfman2000> jnthn: Unfortunately, $noth.perl only showed $noth.new()

[01:49] <jnthn> Wolfman2000: Yeah.

[01:49] <jnthn> Wolfman2000: That's one of those things that sorta sucks at the moment...I wish it did something better.

[01:49] <jnthn> Wolfman2000: .perl is just a method though

[01:49] <jnthn> You can override it.

[01:50] <Wolfman2000> If I can figure out a good way to call it...let's see.

[01:50] <Wolfman2000> I need to be able to print the $!name, and $!next if defined

[01:50] <jnthn> method perl() { "Node.new(name => {$!name.perl}, next => {$!next.perl}" }

[01:51] <jnthn> Basically, your .perl method generally wants to make recursive calls liek that

[01:51] <jnthn> oh sorry

[01:51] <jnthn> given your construcotr that's just

[01:51] <jnthn> method perl() { "Node.new({$!name.perl}, {$!next.perl}" }

[01:51] <jnthn> The idea of .perl is that it gives back something that you can eval to build something as close as possible to the original thing.

[01:52] <jnthn> oh heh, I missed a paren too

[01:52] <jnthn> method perl() { "Node.new({$!name.perl}, {$!next.perl})" } # finally

[01:52] <Wolfman2000> jnthn++: I think your original version also worked.

[01:52] <jnthn> :-)

[01:53] <jnthn> Yes, but you overrode .new, so it wouldn't ahve eval'd properly.

[01:53] <Wolfman2000> jnthn: Was I not supposed to override new?

[01:53] <jnthn> Wolfman2000: btw, one problem with what I just showed you, if you want to do this Really Perfect.

[01:53] <jnthn> Wolfman2000: No, you're allowed to override new. I'ts completely fine.

[01:53] <jnthn> Wolfman2000: My point was that you're .perl method shuld hand back something that when eval'd would actually work. :-)

[01:54] <jnthn> Wolfman2000: oh

[01:54] <jnthn> Wolfman2000: It would have actually

[01:54] <Tene> pmichaud: will ng get class stubbing so the setting can be broken apart?

[01:54] <Wolfman2000> jnthn: Which version works?

[01:54] <jnthn> Wolfman2000: My first one.

[01:54] <jnthn> Wolfman2000: Because positionals can be passed by name to anyway.

[01:54] <Wolfman2000> return "Node.new(name => {$!name.perl}, next => {$!next.perl})"; <-- that one?

[01:54] <jnthn> Wolfman2000: Heh. Perl6 is too awesome for me.

[01:54] <jnthn> Yes, that one. :-)

[01:54] <pmichaud> Tene: class stubbing, of course (part of the spec)

[01:54] <pmichaud> breaking the setting apart-- we're not sure about that.

[01:55] <pmichaud> (yet)

[01:55] <jnthn> pmichaud: The question was if we'll do it in ng though ;-)

[01:55] <pmichaud> jnthn: of course we'll do it in ng, it's part of the spec :)

[01:55] <pmichaud> the setting is supposed to go into a common lexical scope -- in some ways that's easier if the setting is all in a single compilation unit

[01:55] <Wolfman2000> jnthn: Perl6 may be too awesome for me as well. Perhaps we should team up more often.

[01:55] <jnthn> pmichaud: OK, that's fine, but if we're doing the whole spec, you're doing the PDL stuff in S09. :-P

[01:56] <lisppaste3> wolfman2000 annotated #89963 "Now with overridden perl(). Next up: what's the right way to override the submethod BUILD?" at http://paste.lisp.org/display/89963#4

[01:56] <jnthn> Wolfman2000: Well, it's a new language. We're all still learning how to make the most of it. :-)

[01:56] <Wolfman2000> jnthn: serious question up there. I know that both new and BUILD are used for actually creating the classes.

[01:57] <jnthn> Wolfman2000: Yeah.

[01:57] <jnthn> Wolfman2000: Basically, they exist for different purposes.

[01:57] <jnthn> If you want to provide a custom constructor - that is, a custom interface to the constructor - you override .new

[01:57] <jnthn> That's what you have done.

[01:58] <jnthn> If you just want to use whatever constructor you inheirt, but you want to do some initialization of attributes, you can instead have a submethod BUILD.

[01:58] <Wolfman2000> jnthn: Let me modify my file to see if I understand something...that can use both .new and .BUILD

[01:58] <jnthn> Wolfman2000: In your example that you nopasted, you don't need to do the BUILD thing.

[01:59] <jnthn> I mean, there's no natural use for it here.

[01:59] <jnthn> If you want to see BUILD submethods put to decent use, see masak++'s druid.

[01:59] <jnthn> e.g. http://github.com/masak/druid/blob/master/lib/Druid/Game.pm

[02:00] <jnthn> Here, there's some complex init of the attributes to be done, so that logic is put in a BUILD method.

[02:00] <jnthn> Wolfman2000: Don't expect to be writing a new and a BUILD in every class though.

[02:00] <Wolfman2000> ...but it doesn't seem to have a .new

[02:01] <Wolfman2000> Also, I'm mixing up what $. and $! do again.

[02:01] <jnthn> Wolfman2000: Right. It uses the default one that is inherited from Object.

[02:01] <jnthn> Wolfman2000: It's perfectly fine to have a class with no BUILD submethod and no new method.

[02:01] <jnthn> They're there if you need them, they're not things Perl 6 makes you write. :-)

[02:02] <jnthn> $!foo always refers to the storage location for the attribute.

[02:02] <pmichaud> the default .new and .BUILD are intended to cover a lot of cases for you :)

[02:02] <Wolfman2000> ...and feather is going slow now. This isn't good

[02:02] <jnthn> Right, that's a better way of putting it.

[02:03] <lisppaste3> wolfman2000 annotated #89963 "Broken version. Don't want to force users to initialize the time the nodes were made. Is this where BUILD comes in handy?" at http://paste.lisp.org/display/89963#5

[02:04] <jnthn> I think that's a good example.

[02:04] <Wolfman2000> Method 'get_name' not found for invocant of class 'Str' in Main <-- that's the error message I get for running that file.

[02:05] <jnthn> Wolfman2000: Oh. :-/

[02:05] <jnthn> Wolfman2000: Oh, and I know why do.

[02:05] <jnthn> *too

[02:05] <jnthn> :-(

[02:06] <Wolfman2000> jnthn: Alright, I'll establish that I did it wrong somehow. How did I do it wrong?

[02:06] <jnthn> Wolfman2000: Your code is probably valid Perl 6. You just hit a Rakudo bug...one that I think we'll deal with in the ng branch. Basically, if you write a BUILD submethod today, it forgets about the other initializations you're doing.

[02:06] <jnthn> Sorry. This is just one of those "Rakudo doesn't always get it right yet".

[02:07] <jnthn> In masak's code, there was a comment to the effect.

[02:07] <jnthn> It's a bug in the compiler, not your mistake.

[02:07] <Wolfman2000> jnthn: I'm guessing ng is the most popular branch. So far, it's been suggested that I hold off on using that branch. When should I use it?

[02:08] <colomon> ng is only "used" by maybe five people yet.

[02:08] <jnthn> Wolfman2000: It's not popular in terms of people using it.

[02:08] <colomon> it's under heavy development.

[02:08] <jnthn> Wolfman2000: It's popular to talk about because it's where a lot of active development/changes are happening.

[02:08] <jnthn> So those involved in hacking on it are talking a lot about it.

[02:08] <colomon> it's popular because we're all super-excited for what it will bring when it is ready to be merged in with the master branch.

[02:08] <jnthn> It's certainly not usable yet.

[02:08] <Wolfman2000> colomon, jnthn: when will it be merged in?

[02:09] <Wolfman2000> I've got perfectly valid code that I don't want to have go to waste here...and the $!timecheck variable will be useful for when I eventually implement a priority Linked List

[02:09] <pmichaud> when we're passing roughly the same number of tests as the master branch

[02:09] <jnthn> Wolfman2000: It's hard to estimate. I really, really hope we land it before the next Rakudo release.

[02:09] <pmichaud> and I suspect we won't "merge" the branch

[02:09] <colomon> pmichaud: no?

[02:09] <pmichaud> I suspect we'll rename the existing master branch to something else, and the ng branch to master

[02:10] <Wolfman2000> Considering that I'm using the source of rakudo, I don't think releases mean anything to me.

[02:10] <jnthn> pmichaud: Yeah. We may have to cherry pick back some of the changes from master too.

[02:10] <pmichaud> jnthn: there shouldn't be too many

[02:10] <Wolfman2000> So...when exactly do I recompile the master for the stuff that has been put in?

[02:10] <colomon> is that a subtle hint not to do any development on master at the moment?

[02:10] <jnthn> pmichaud: Some folks++ have done some settings tweaks.

[02:10] *** mubot left
[02:10] <pmichaud> colomon: I'd probably not do too much major tweakage

[02:10] <pmichaud> we could certainly pull settings in from master 

[02:10] <pmichaud> and in fact, I suspect we'll do that instead of copying settings over from the existing branch

[02:11] <pmichaud> rephrasing

[02:11] <jnthn> Wolfman2000: When it happens, it'll certainly be announced here, and if you follow any of the blogs, it'll get anounced there too.

[02:11] <pmichaud> when we get to compiling settings in ng, we'll copy them from the master branch rather than use the ones already in ng

[02:11] <colomon> I promise not to do anything in master outside of settings.  :)

[02:11] <jnthn> Wolfman2000: I'd like to give you a more accurate figure, but to be honest I'd be pulling it out of thin air.

[02:11] *** checkin-it-out joined
[02:11] <jnthn> We'll probably have a better idea in a few days time.

[02:11] <pmichaud> yes, I think so

[02:12] <pmichaud> I plan to push to have Test.pm running tomorrow sometime

[02:12] <Wolfman2000> So for now, no time stamp priority linked list. Understood.

[02:13] <pmichaud> okay, jnthn -- ng and nqp-rx now updated to new faster code gen

[02:14] <Wolfman2000> ...I now have to wonder. With Rakudo in the state that it's in...how am I supposed to be sure Web.pm will be alright when masak and I handle that?

[02:14] <colomon> Wolfman2000: The current Rakudo branch certainly works better than the Rakudo Web.pm was developed under.

[02:14] <checkin-it-out> Hi. Regarding the standard library that's going to be part of Perl 6: is the plan to keep it minimal and rely on the CPAN|CP6AN a lot, or are there plans to make Perl 6 more "batteries-included" than Perl 5?

[02:15] <pmichaud> checkin-it-out: we plan to distinguish "compiler" from "distribution"

[02:15] <pmichaud> checkin-it-out: there will be multiple compilers, and multiple distributions

[02:15] <pmichaud> some distributions may be more batteries included than others

[02:16] <dalek> nqp-rx: e8e145d | pmichaud++ | src/Regex/Cursor.pir:

[02:16] <dalek> nqp-rx: Remove no-longer-used $!type attribute.  (It may get replaced with

[02:16] <dalek> nqp-rx: something else, though.)

[02:16] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/e8e145d784d427bf11b1d0fceccfbfb00d036f51

[02:16] <dalek> nqp-rx: 95cd73d | pmichaud++ | src/cheats/hll-compiler.pir:

[02:16] <dalek> nqp-rx: Provide transcoding logic to HLL::Compiler, so that it can

[02:16] <dalek> nqp-rx: transcode variable-width encodings to fixed-width encodings

[02:16] <dalek> nqp-rx: for faster parsing, when possible.

[02:16] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/95cd73d0acb7b8839e90a5b7c76755e1177d22d7

[02:16] <checkin-it-out> Here http://perlcabal.org/syn/ I see:

[02:16] <dalek> nqp-rx: 238f21b | pmichaud++ |  (5 files):

[02:16] <dalek> nqp-rx: Bump PARROT_REVISION, update bootstraps.

[02:16] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/238f21b6e0903fafe7a49e5a7f6650e95e20b0b2

[02:16] <checkin-it-out> "30	Standard perl library	(TBD)"

[02:16] <jnthn> pmichaud: It's after 3am, but I'm gonna build and check it out anyway ;-)

[02:17] *** NorwayGeek left
[02:17] <pmichaud> huh

[02:17] <checkin-it-out> I'm just curious to get an idea of how much will be specced, vs. how much will be implementation-dependent.

[02:17] <pmichaud> checkin-it-out: our goal is to keep the core libraries as small as reasonably possible

[02:18] <checkin-it-out> Ah. I see. Interesting. Thank you.

[02:18] <pmichaud> and rely more on modules and distributions to provide the value-added features

[02:18] *** NorwayGeek joined
[02:18] <Wolfman2000> To whoever knows this: when overriding .perl() and .Str(), should multi be used?

[02:18] <checkin-it-out> That philosophy seems to have served Perl 5 well, even though it means for searching around cpanratings for me. :)

[02:19] <jnthn> Wolfman2000: no

[02:19] <jnthn> Wolfman2000: They don't take any arguments anyway (well, the invocant aside). :-)

[02:20] <pmichaud> jnthn:  13.6sec for Actions.pm here

[02:20] <jnthn> checkin-it-out: I think there'll be more encouragement for people to build "distributions", so there's an easy way to say "I want to do web stuff with Perl 6, so I can grab this package that gives me a compiler + a bunch of useful modules for web programming".

[02:20] <Wolfman2000> ...embedded comments now require backticks? What's wrong with just #?

[02:20] <pmichaud> Wolfman2000: it was too easy to get things confused with   #{...}

[02:21] <pmichaud> especially if someone was adding # to the beginnings of lines and wanted to comment out a block

[02:21] <jnthn> checkin-it-out: Think of it a bit like Linux distros. There's the Linux kernel, but they all add other stuff.

[02:21] <colomon> jnthn: a significant quantity of Str definitions in settings use multi...

[02:21] <jnthn> colomon: orly? Hm.

[02:21] <Wolfman2000> Node.new(name => Str()<0xb5f37594>, next => Node.new(name => Str()<0xb5f50c38>, next => Failure()<0xb660aacc>))  <-- As a heads up, I think .Str looks ugly, even for what should be strings already.

[02:21] <checkin-it-out> It's interesting to me that the Scheme community seems to be fighting the opposite battle right now: they're trying to wrangle multiple implementations together and settle on a more common spec.

[02:22] <Wolfman2000> rakudo: my Str $test = "Hi there."; say $test; say $test.Str;

[02:22] <p6eval> rakudo fe6dd2: Hi there.␤Str()<0x2b4fd73ece00>␤

[02:22] <jnthn> Wolfman2000: youch.

[02:22] <pmichaud> checkin-it-out: we have multiple implementations of a common spec already :)

[02:22] <Wolfman2000> Did I do this wrong as well?

[02:22] <pmichaud> anyway, time for me to get some dinner

[02:22] <checkin-it-out> Yes, but Scheme has them coming out the wazoo. :)

[02:22] <pmichaud> jnthn: post a quick note to see if things are faster for you as well (and by how much)

[02:23] <checkin-it-out> Thanks for the info pm.

[02:23] <colomon> jnthn: really.  and I didn't write all of them.  honest.  :)

[02:23] <jnthn> pmichaud: will do

[02:23] <pmichaud> oh, I'm going to also do a profiling run and see if I see other optimizations that might bubble up now that we aren't swamped by that other problem

[02:23] <jnthn> colomon: Curious - are they marked "is export" too?

[02:23] <colomon> jnthn: nope

[02:24] <colomon> jnthn: I know I thought multi was necessary in that case...

[02:25] <jnthn> colomon: Ah. multi IIRC implies is export.

[02:26] <colomon> jnthn: so Str(1/3) (for instance) is expected to work?

[02:26] <jnthn> Thing is, TypeObj($x) is a special form, not just a normal sub call.

[02:26] <jnthn> Because Str is a type object in the namespace

[02:26] <jnthn> I think in the case of Str($x) it's *meant* to then call $x.Str

[02:26] <jnthn> But then I've asked aobut things like

[02:27] <Wolfman2000> rakudo: my Str $test = "Hi there."; say $test; say $test.Str();

[02:27] <p6eval> rakudo fe6dd2: Hi there.␤Str()<0x2b2bda091028>␤

[02:27] <Wolfman2000> no difference. of course

[02:27] <jnthn> colomon: My::Type::Like::This($x) and what that de-sugars to.

[02:27] <pmichaud> Str is inheriting Object's .Str, and shouldn't.

[02:27] <jnthn> colomon: And I'm not sure I've got a clear answer on that yet.

[02:27] <pmichaud> Str should provide its own .Str, likely.

[02:27] <jnthn> pmichaud: Yeah, agree.

[02:27] <colomon> pmichaud: agree

[02:27] <colomon> Also Num its own .Num.

[02:27] <jnthn> Heh

[02:27] <pmichaud> oh dear, looks like my pprof output is 945MB

[02:28] <pmichaud> that will take a while for pprof2cg to crunch

[02:28] <pmichaud> time for some dinner, then

[02:28] <jnthn> pmichaud: Long dinner. :-)

[02:28] <Wolfman2000> ...did I just make you guys have to do more work on Rakudo now?

[02:28] <jnthn> Wolfman2000: Yep. :-D

[02:28] <colomon> rakudo: say 1.0.Num;

[02:28] <pmichaud> Wolfman2000: no, it's the same amount of work as before.   :)

[02:28] <p6eval> rakudo fe6dd2: 1␤

[02:28] <pmichaud> Wolfman2000: you just prioritized the work a little differently for us :)

[02:28] <colomon> rakudo: say 1.0.Num.Num;

[02:28] <jnthn> Wolfman2000: Though for me (don't know about others), watching people using it and find faults just motivates me to make it btter. :-)

[02:28] <p6eval> rakudo fe6dd2: 1␤

[02:28] <jnthn> *better

[02:29] <colomon> rakudo: say "hello".Str.Str;

[02:29] <p6eval> rakudo fe6dd2: Str()<0x2b0f3af649d0>␤

[02:29] *** checkin-it-out left
[02:29] <Wolfman2000> I'll take a name on the Thanks To section of the pod then.

[02:29] <pmichaud> rakudo:  my $a = 'Hello';  say $a.Str;  say $a.Str;  say $a.Str.Str

[02:29] <p6eval> rakudo fe6dd2: Str()<0x2b7c2cdb4410>␤Str()<0x2b7c2cdb4410>␤Str()<0x2b7c2d7e6328>␤

[02:29] <pmichaud> yup

[02:29] <jnthn> oh gah, Rakudo's Configure.pl screws me over again.

[02:30] * pmichaud sneaks away

[02:30] <jnthn> lol

[02:30] <colomon> any objections to my just adding Str.Str right now?

[02:31] <colomon> (and should it be multi or no?  :)

[02:31] <Wolfman2000> colomon: If you're somehow able to figure it out, I don't object.

[02:31] <Wolfman2000> As far as multi...something's telling me yes.

[02:31] * jnthn chases pmichaud, yelling something about him not updating PARROT_REVISION in rakudo's ng branch

[02:32] <jnthn> colomon: Add it.

[02:32] <jnthn> colomon: With multi, I need to ponder that a little more.

[02:32] <colomon> okay, I'll try to get it in before bed.

[02:32] <jnthn> colomon: It feels a tad odd to me.

[02:33] <jnthn> colomon: But if the rest are doing the same thing, then I guess go for consistency.

[02:33] <jnthn> That way, they might be wrong, but they'll at least be consistently wrong. ;-)

[02:33] <colomon> jnthn: but it's not the rest, it's like half the rest.  there's no consistent pattern I could see.

[02:33] <jnthn> Oh.

[02:33] <jnthn> Well in that case, do what you like. :-)

[02:34] *** synth left
[02:34] <jnthn> My leaning is "not".

[02:34] *** yath left
[02:34] <jnthn> 'cus it doesn't make sense to me.

[02:34] <jnthn> (that is, doesn't make sense why they'd want to be multi)

[02:34] <colomon> jnthn: and I don't understand the issue enough to make a reasonable judgment.  I was just sprinkling multis everywhere because I couldn't see any drawbacks.

[02:35] <jnthn> colomon: There probably aren't any.

[02:35] <colomon> (though as I said, I'm only responsible for a couple of them in .Str in setting.)

[02:35] <jnthn> colomon: I'm just not sure there's any wins either. :-)

[02:35] <colomon> Where should I add a test for Str.Str?

[02:35] *** yath joined
[02:35] <jnthn> t/spec/...heck knows...

[02:35] <jnthn> S32-str somewhere maybe

[02:35] <colomon> S32-str?

[02:36] <colomon> bother, none of those filenames look promising.

[02:37] <jnthn> colomon: lol. I'm looking at them thinking the same. :-)

[02:37] <jnthn> My second guess was gonna be S02-builtin_data_types/

[02:38] <jnthn> But there's no str.t in there either!

[02:38] <Wolfman2000> I kind of have to side with S32-str myself

[02:38] <jnthn> Yeah

[02:38] <colomon> S32-type-casting/methods.t ?  looks like there is something likely in there already...

[02:39] <jnthn> colomon: oh, that's not at all a bad choice.

[02:39] <jnthn> I think you meant S13

[02:39] <colomon> yes, right.

[02:39] <colomon> already editing the file.  :)

[02:39] <jnthn> Do that for now.

[02:39] <jnthn> if moritz++ has a better idea, I'm sure he'll move it.

[02:40] <colomon> Okay, two simple tests added.

[02:41] <colomon> oh, actually one of the tests there already fails for this reason!

[02:41] <colomon> lovely.

[02:41] <jnthn> pmichaud: oh you complete show off.

[02:41] <jnthn> pmichaud: actions.pm builds in 10 secons for me now.

[02:41] <Wolfman2000> colomon: Is it failing due to design or bug?

[02:41] <jnthn> *seconds

[02:42] <colomon> Wolfman2000: existing failure is marked as a Rakudo bug.

[02:42] <jnthn> pmichaud++ # 27 times faster compilation of Actions.pm!

[02:42] <Wolfman2000> the $stringvar.Str() thing, right

[02:42] <Wolfman2000> Honestly, if a variable is a string, $stringvar.Str() should just return itself

[02:43] <jnthn> Wolfman2000: Right. :-)

[02:43] <colomon> method Str() { self; }

[02:43] <Wolfman2000> ...why does it feel like we're taking that from Python?

[02:44] <colomon> compiled...

[02:45] <colomon> make test passes...

[02:45] <jnthn> Wolfman2000: 'cus Perl hapily steals from all the other languages? :-)

[02:45] <Wolfman2000> jnthn: wasn't aware of that history.

[02:45] <Wolfman2000> If anything, I thought everyone stole from Perl...or at least, their regexes

[02:45] <colomon> My tests pass, the existing one still fails.

[02:45] <jnthn> Wolfman2000: Well, it's all give and take.

[02:46] <jnthn> Wolfman2000: I think Perl has kinda led the way in regexes really though, and I think Perl 6 is notching that up.

[02:46] <lisppaste3> colomon pasted "failing test" at http://paste.lisp.org/display/89966

[02:47] <colomon> "got: undef"

[02:47] <Wolfman2000> ...what do we have to do to make paste.lisp.org allow colorizing as Perl anyway?

[02:47] <colomon> looks like it's calling Str.Str instead of RT69378str.Str

[02:49] <jnthn> colomon: That's...odd.

[02:49] <colomon> yeah.

[02:49] <jnthn> colomon: I'm not sure. That looks like a weird bug.

[02:49] <Wolfman2000> Can a class be a String?

[02:49] <colomon> I'm going to go ahead and check in what I've got so y'all cam look at it more closely.  Then I will go to bed.  :)

[02:49] <jnthn> colomon: I need to sleep now. I'll look another time. :-)

[02:50] <jnthn> Gah, it's nearly 4am. If I make church tomorrow^Wtoday morning it'll be a miracle...

[02:50] <jnthn> (insomnia and sleeping in until 1pm to compensate)--

[02:50] <jnthn> Anyway, night all

[02:52] <colomon> night

[02:52] <pugs_svn> r29023 | colomon++ | [t/spec] Add two simple tests for calling .Str on strings. 

[02:53] *** colomon left
[02:55] <Wolfman2000> ...what's the difference between pugs and rakudo again?

[02:57] <dalek> rakudo: 37d480a | (Solomon Foster)++ | src/setting/Str.pm:

[02:57] <dalek> rakudo: Add Str.Str, with a caveat.

[02:57] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/37d480af47c0a016163dab49e481dc04acfbbb7d

[03:02] *** justatheory left
[03:04] <Tene> Wolfman2000: Pugs: haskell, first major impl, sleeping for years.  Rakudo: parrot, currently being actively developed.

[03:05] <quietfanatic> jnth++ # overloading trait_mod:<is> works great!

[03:05] *** dj_goku left
[03:07] <Wolfman2000> Tene: Then...why is it being reported on pugs_svn?

[03:12] <Tene> Wolfman2000: why is what being reported where?

[03:12] <Wolfman2000> Tene: The robot, pugs_svn

[03:12] <Wolfman2000> Is that on pugs or rakudo?

[03:12] <Tene> Wolfman2000: that's reporting commits to the pugs repository, which also houses the Perl 6 test suite.

[03:13] <Tene> which is distro-independant.

[03:14] <Tene> s/distro/impl/

[03:14] <Wolfman2000> So Pugs has the test suite, yet Rakudo is the one being worked on

[03:14] <Tene> the pugs *repository* is where the official test suite is currently located.

[03:15] <Tene> because pugs has a completely open commit policy

[03:15] <Tene> rakudo has a stricter policy for who is allowed to commit, but we want to allow anybody to help with the spec tests.

[03:15] <Tene> so it was just left in the pugs repo... no reason to move it.

[03:16] <Tene> there are a few other Perl 6 projects being worked on in the pugs repo.

[03:17] <Tene> there's an evalbot in there, I think the perl6.org website is in there, a couple other smaller compiler projects...

[03:17] <Wolfman2000> Tene: I know feather.perl6.nl is nosted on there

[03:17] <Wolfman2000> hosted*

[03:17] <Wolfman2000> I commited some fixes to index.html

[03:22] *** tak11 joined
[03:23] <quietfanatic> I'm getting a "Internal Error: Rakudo_binding_bind_signature passed invalid signature"

[03:26] *** pointme left
[03:26] *** pointme joined
[03:26] *** mubot joined
[03:26] *** mubot left
[03:26] *** zaslon left
[03:26] *** zaslon joined
[03:27] *** mubot joined
[03:27] *** mubot left
[03:27] *** seanstickle joined
[03:28] *** mubot joined
[03:28] *** mubot left
[03:28] <carlin> o_o that's three times in a row mubot has segfaulted trying to start up

[03:30] *** mubot joined
[03:30] *** mubot left
[03:32] *** ted__ left
[03:33] <quietfanatic> I think this error has to do with my overloaded trait_mod:<is> interfering with "is export"--but it shouldn't.

[03:37] <eternaleye> We need a paste.perl6.org

[03:38] <eternaleye> Preferably with P6Regex-based highlighting

[03:39] <Wolfman2000> I may be able to make a database for planning a pastebin, but I would need help with some of the other features such as the regex highlighting and nickname remembering.

[03:40] <Wolfman2000> Perhaps my web development skills will come in handy

[03:40] <Wolfman2000> ...no psql. Crap. Alright, mysql will have to do.

[03:40] <Wolfman2000> Can't bother Juerd with everything.

[03:43] <quietfanatic> Erk this is a (different) weird bug...

[03:43] <quietfanatic> rakudo: BEGIN { .signature.perl.say for &trait_mod:<is>.candidates }; say &trait_mod:<is>.defined

[03:43] <p6eval> rakudo 37d480: :(Object $child where all(), Object $parent)␤:(Object $child where all(), Any :hidden($hidden)!)␤:(Code $block, Any $arg?, Any :export($export)!)␤:(Code $block, Any :default($default)!)␤:(ContainerDeclarand $c, Any :rw($rw)!)␤1␤

[03:43] <quietfanatic> This is fine (note the 1 at the end)

[03:44] <quietfanatic> rakudo: module M; BEGIN { .signature.perl.say for &trait_mod:<is>.candidates }; say &trait_mod:<is>.defined

[03:44] <p6eval> rakudo 37d480: :(Object $child where all(), Object $parent)␤:(Object $child where all(), Any :hidden($hidden)!)␤:(Code $block, Any $arg?, Any :export($export)!)␤:(Code $block, Any :default($default)!)␤:(ContainerDeclarand $c, Any :rw($rw)!)␤0␤

[03:44] <quietfanatic> See the 0?

[03:44] <Wolfman2000> quietfanatic: I do.

[03:44] <quietfanatic> Actually that BEGIN is quite unnecessary to reproduce.

[03:45] <quietfanatic> rakudo: say &trait_mod:<is>.defined; module M {say &trait_mod:<is>.defined>}

[03:45] <p6eval> rakudo 37d480: Confused at line 2, near ">}"␤in Main (file <unknown>, line <unknown>)␤

[03:45] <quietfanatic> rakudo: say &trait_mod:<is>.defined; module M {say &trait_mod:<is>.defined}

[03:45] <p6eval> rakudo 37d480: 1␤0␤

[03:45] <quietfanatic> Not defined in a module :(

[03:45] <lisppaste3> wolfman2000 pasted "eternaleye: Rough database plan for new pastebin. Unsure of pword file, but I don't want anyone to claim a name that others use." at http://paste.lisp.org/display/89971

[03:46] <quietfanatic> rakudo: say &trait_mod:<is>.defined; module M {say &CORE::trait_mod:<is>.defined}

[03:46] <p6eval> rakudo 37d480: Confused at line 2, near ":<is>.defi"␤in Main (file <unknown>, line <unknown>)␤

[03:47] <quietfanatic> Is &trait_mod:<is> in the module referring to M::<&trait_mod:\<is\>> instead?

[03:47] <quietfanatic> (a similarly-named subroutine but in the M:: namespace)

[03:47] *** synth joined
[03:53] <Wolfman2000> eternaleye: your thoughts on my paste?

[03:54] <eternaleye> Wolfman2000: looking at it now

[03:54] <Wolfman2000> *nods*

[03:55] <eternaleye> Wolfman2000: I'm not sure I understand it

[03:55] <Wolfman2000> eternaleye: It's a database plan

[03:55] <Wolfman2000> to organize the pastes

[03:58] <eternaleye> Wolfman2000: Yes, but I'm not quite sure what you mean by that. Are these tables in an SQL database? Are these directories? It's very light on any form of explanation - it's like giving the datatypes of the elements in a struct, without giving any information on how the members (or the struct) will be accessed/used/etc.

[03:58] <Wolfman2000> eternaleye: my apologies on that. They are tables in a SQL database. At least, that's the plan.

[03:59] <eternaleye> It's data without an algorithm

[04:00] <pmichaud> hello again, back from dinner

[04:00] <pmichaud> 02:31  * jnthn chases pmichaud, yelling something about him not updating PARROT_REVISION in rakudo's ng branch

[04:00] <Wolfman2000> evening pmichaud

[04:00] *** mubot joined
[04:00] *** mubot left
[04:00] <pmichaud> I did update PARROT_REVISION!

[04:01] <pmichaud> ...I just forgot to commit+push...  :-(

[04:01] <eternaleye> Well, there are a few things I'd recommend. One - How do you plan to handle passwords? I see the pword field, but how do you plan to store them? Hashed? Hashed and salted? For an example of a high-profile site that didn't properly secure its passwords, look at the semirecent PerlMonks snafu.

[04:01] <Wolfman2000> eternaleye: This was meant to be a base plan. I'm well aware of the implementation that needs to take place. I do have other websites to my name after all. ;)

[04:02] <eternaleye> Cool.

[04:02] <Wolfman2000> I wanted to know if the data part was fine. I know of the algorithms to implement for the database part.

[04:02] <Wolfman2000> Thank you for your concern though.

[04:03] *** seanstickle left
[04:03] <eternaleye> Also, I recommend looking at http://ix.io for a _really_ simple pastebin implementation that actually does really well. Its commandline client in particular is very well-done

[04:04] <Wolfman2000> ...alright, time to play the ignorant card. Why should I worry about having a commandline client?

[04:05] <eternaleye> The only things I can think of that it _doesn't_ do and which are desirable are a.) the channel notification thing that paste.lisp.org does and b.) soem form of 'paste channels' so that you can group pastes of a certain type (like how lisppaste has a perl6 section)

[04:06] <eternaleye> Wolfman2000: As far as a commandline client goes, there have been a _lot_ of times when I've needed to get input on an issue when I don't have a browser.

[04:06] *** NorwayGeek left
[04:06] <Wolfman2000> eternaleye: I'll admit that I could use some help with the channel notification part. As far as "paste channels" goes...hmm...is there perhaps a reason to allow a paste to go to multiple channels at the same time?

[04:07] <eternaleye> Almost everyone has irssi+wget/curl/whatever. MFar fewer have links/elinks/lynx

[04:07] <eternaleye> s/M//

[04:07] <Wolfman2000> eternaleye: you mean a text browser? Ah.

[04:07] <Wolfman2000> I wish you said that in the first place. I can code for a text browser easily.

[04:07] <Wolfman2000> ...well...almost easily.

[04:08] <Wolfman2000> Perl 6 will involve more UTF-8 than before.

[04:08] <eternaleye> Wolfman2000: Possibly (think parrot and rakudo both being involved in a bug), but it would complicate implementation greatly

[04:08] <eternaleye> Wolfman2000: Also, pasting things is _very_ difficult without X

[04:09] <Wolfman2000> eternaleye: You notice that I used groups and pastes separately, right? My thinking here is as follows:

[04:09] <eternaleye> I may want to paste a file. It's much easier to go to a terminal and type 'ix $filename' than it is to open it in an editor, copy the text, go to a webpage, and paste it

[04:09] <Wolfman2000> ...holding my thought while I read that

[04:10] <eternaleye> Plus, stdin. <command> | ix gives instant pasting of logs

[04:10] <Wolfman2000> ...so that's what you mean by a command line client.

[04:10] <eternaleye> Wolfman2000: Yes, The ix client can also fetch pastes given the pasteid, though

[04:10] <Wolfman2000> I'll need a partner for this one then. I'm better with the web development part than the command line part.

[04:11] <eternaleye> Wolfman2000: If you implement the same POST API as ix.io, or very similar, we can basically steal their client ;D

[04:11] <eternaleye> GPL++

[04:11] *** meppel joined
[04:12] <Wolfman2000> ...the GPL may be useful here, but...I admit I have my own ideas on URL implementation.

[04:12] <Wolfman2000> And it's that that I want to discuss here.

[04:12] *** mubot joined
[04:13] <Wolfman2000> Some basics first: I'm assuming Catalyst::Perl: I have some experience with it, and this is a perl channel after all. Second: assume URL is where it's located for now.

[04:13] *** mubot left
[04:13] <eternaleye> Well, the root page of ix.io gives a rather complete description - sufficient to interact with the server using only curl or wget. THat means it should be trivial to adapt it to fit your ideals.

[04:13] *** mubot joined
[04:13] <eternaleye> Okay

[04:14] <Wolfman2000> I have Pastes and Groups separately for the purpose of annotations. I would say http://URL/GroupID/GroupNum to load the specific paste, or GroupID on its own to load all of the pastes in that group.

[04:14] <Wolfman2000> If one wanted to see all of the pastes of the user, then we could go into URL/user/UserID or something along those lines.

[04:15] <eternaleye> Okay

[04:15] <eternaleye> Might I suggest URL/user/$username and URL/group/$groupid, so that people can look up all posts by as pecific user as well? That also makes it more extensible

[04:15] <Wolfman2000> What I'm right now torn about...do we allow multiple people to have the same username? Should we try to lock a screen name to one person only?

[04:15] <Wolfman2000> eternaleye: That's fair.

[04:16] <Wolfman2000> As long as we enforce that usernames have to have at least one letter.

[04:17] <eternaleye> How about this: If a username has been 'registered' and given a password, only accept pastes with that password as belonging to that username. Otherwise, free-for-all (the IRC system, basically)

[04:17] <Wolfman2000> so the user's table should include an isRegistered field?

[04:17] <eternaleye> Wolfman2000: I mean the actual text 'user' to denote that after the next slash is a username, and 'group' to denote that after the next slash is a groupid. No restrictions on usernames needed then.

[04:18] <eternaleye> Wolfman2000: Simpler. Only add to the table when registering. If the username isn't in the table, short-circuit.

[04:19] <Wolfman2000> Otherwise, have all non registered posts point to an anonymous user. Fair enough.

[04:19] <Wolfman2000> We may want to restrict viewing the anonymous user's posts publicly though.

[04:19] <eternaleye> Ack, I think I made a mistake in my thinking. One sec.

[04:20] <Wolfman2000> take your time

[04:20] <eternaleye> How are you planning to group posts by user? As a list of ids in a field of the user table, or by selecting from pastes where user = $whatever ?

[04:21] <eternaleye> I was assuming the latter

[04:21] <Wolfman2000> the second one

[04:21] <Wolfman2000> the first one doesn't exactly allow for good table design if I'm interpreting your statement right

[04:22] <eternaleye> Okay. Then you don't need to map them onto an anonymous user. You've already validated that the username they want isn't registered; therefore, just give the paste the username they want!

[04:22] *** bpetering joined
[04:22] <bpetering> hai everyone :)

[04:22] <Wolfman2000> ...okay, I need to back up

[04:23] <eternaleye> Simplest thing that could possibly work etc.

[04:23] <eternaleye> hi bpetering!

[04:23] <bpetering> howdy eternaleye, Wolfman2000 :)

[04:23] <Wolfman2000> I think there should be a table of registered users, and the pastes table should point to a registered user. If the paste is NOT of a registered user, should we still include a username field in the paste? Or do we put all of the names in the users table, and just have a boolean to see if a user is registered?

[04:23] <eternaleye> have them type in a username when they submit a paste. Blank gets anonymous user, anything registered prompts for password, unregistered gets accepted w/o question

[04:24] <eternaleye> Wolfman2000: I was assuming 'username' field was a string

[04:24] <Wolfman2000> eternaleye: If the person is unregistered, how do we get them to register?

[04:24] *** gfx joined
[04:24] <eternaleye> URL/register

[04:24] <eternaleye> Separate form

[04:25] <Wolfman2000> alright, fair enough on that

[04:25] <carlin> What happens if someone registers a username that has been used anonymously in the past?

[04:25] <Wolfman2000> carlin: ...good question.

[04:26] <eternaleye> Hm, that is a problem.

[04:27] <Wolfman2000> That's partly why I think unregistered people should just be sent to anonymous

[04:27] <Wolfman2000> Either that, or we do away with the login stuff entirely.

[04:27] <eternaleye> I'd say we can explicitly state that there are no guarantees about paste lifetimes made with unregistered usernames, and just wipe them on registration

[04:27] <eternaleye> All's fair if you predeclare

[04:27] *** meppl left
[04:28] <Wolfman2000> ...tough love, but fair enough

[04:28] <eternaleye> no-username pastes will be guaranteed to live for the specified lifetime - just give people the choice between vanity + security, vanity - security, and security - vanity

[04:30] <Wolfman2000> ...what's the difference between vanity - security and security - vanity? They seem similar sounding

[04:31] <eternaleye> Vanity without security = unregistered username (no lifetime guarantees, but it has your name). Security without vaity = no username (Duration guarantee, but no associated name)

[04:31] <eternaleye> *vanity

[04:32] <eternaleye> subtraction is not commutative ;D

[04:32] <Wolfman2000> eternaleye: thanks for that reminder

[04:33] <Wolfman2000> Alright...next questions. 1) Should we host this on feather, even though this means whatever password we put on the database won't be super secure? 2) Does feather allow us to cpan and install perl 5 modules?

[04:33] *** synth left
[04:35] <eternaleye> I'd say security is probably not a big deal _yet_ - it will be mainly used for sharing snippets of p6 code for the forseeable future. When necessary, it can be moved and the password changed.

[04:35] <eternaleye> Also makes it easy for it to be on the perl6.org domain, which is already hosted on feather

[04:36] <Wolfman2000> That answers my 1st question, and my unasked 3rd question: whether I'd have to buy a domain name.

[04:36] <eternaleye> and IIRC Juerd admins it, which means at most you'd have to ask him - and he's in-channel

[04:37] *** c9s joined
[04:38] <Wolfman2000> ...alright, I'll find out the 2nd one

[04:39] <lisppaste3> wolfman2000 pasted "Umm...guessing we shouldn't mess with cpan yet." at http://paste.lisp.org/display/89973

[04:39] <dalek> nqp-rx: 57d2a44 | pmichaud++ | src/NQP/ (2 files):

[04:39] <dalek> nqp-rx: Add <block> subrule.

[04:39] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/57d2a441a5662232b0712831abfa400f0f290965

[04:39] <dalek> nqp-rx: 5559916 | pmichaud++ |  (3 files):

[04:39] <dalek> nqp-rx: Add closure interpolation.

[04:39] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/555991689e1f6e4a254566538d2d02fa3dc7c1e8

[04:40] *** xp_prg joined
[04:42] <eternaleye> Wolfman2000: What are you thinking as far as the POST API goes?

[04:42] <Wolfman2000> eternaleye: browser based or command line based?

[04:43] <eternaleye> CLI

[04:43] <Wolfman2000> ...I'm primarily thinking of the browser end, I must admit.

[04:43] <Wolfman2000> The big issue I'm having is the URL format suggested by ix.io

[04:44] <Wolfman2000> I don't like the idea of including so much in the URL.

[04:44] <Wolfman2000> Plus, I'm unsure about pasting multiple things in one go.

[04:45] <eternaleye> Wolfman2000: The thing is, the ix.io client is easily adapted to anything matching /URL\/<string.?\?[<key>'='<value>]*/

[04:45] <Wolfman2000> Sorry if that's not what you wanted to hear

[04:45] <eternaleye> And multipasting is not particularly important.

[04:45] <Wolfman2000> eternaleye: If we use Catalyst::Perl, I'd rather NOT use key=value. I'd rather use /value/value2

[04:45] <Wolfman2000> And Route the URL as required

[04:46] <eternaleye> Although it might be best to adapt their client to Perl (5|6) (it's in python)

[04:46] <eternaleye> Wolfman2000: Yes, but what about optional keys? What if I want to specify key1 and key3, but leave key2 undefined?

[04:46] <Wolfman2000> I caught the python comments. One of my websites, http://www.pumpproedits.com/, is in Pylons (Python framework) (hopefully that page still works). I suggest we adapt to Catalyst::Perl, which uses Perl 5.

[04:47] <Wolfman2000> eternaleye: Let's go over the contents then.

[04:47] <Wolfman2000> f:N: urlencoded contents. I assume that's the paste stuff. That should NEVER be in the URL.

[04:47] <eternaleye> Wolfman2000: I'm not suggesting using their server; just taking their client as a model of what a 'good CLI user interface' should be

[04:48] <eternaleye> Wolfman2000: Agreed

[04:48] <Wolfman2000> name:N: filename...ah, I see what you mean by command line. Rip the file contents, make those the paste.

[04:48] <Wolfman2000> filename: should be required honestly. If more than one file is sent in, more power to you.

[04:49] <Wolfman2000> ext:N: filetype: irrelevant.

[04:49] <eternaleye> Wolfman2000: I totally agree the file contents should be POSTed, not uploaded via a GET URL

[04:49] <eternaleye> Wolfman2000: Stdin.

[04:49] <eternaleye> No filename in that case.

[04:49] <eternaleye> We could default that to 'Standard Input' though

[04:49] <Wolfman2000> eternaleye: possibly. I don't know if we need an ext if we're using the filename though.

[04:50] <Wolfman2000> login: "quote" the name.

[04:51] <eternaleye> Wolfman2000: The way ix does it is it submits non-extension filename as filename, and extension as ext. It splits off the extension when given a file, so the server doesn't need to paste the filename.

[04:51] <Wolfman2000> token: instead of including the token/password here, have CLI query the database, see if the name exists, and then prompt for a password.

[04:51] *** keeth joined
[04:51] <eternaleye> *parse

[04:51] <Wolfman2000> rm: not allowing people to delete that easily

[04:51] <Wolfman2000> id:N: no replacing easily either.

[04:51] <eternaleye> Wolfman2000: The thing is, if it's being used at the end of the pipe, how will it read a password?

[04:52] <Wolfman2000> eternaleye: end of a pipe? Clarify that.

[04:52] <eternaleye> <command> | client

[04:52] <eternaleye> Unix pipes

[04:52] <eternaleye> It won't be able to read a password from standard input, since that';s where the data is coming from

[04:53] <Wolfman2000> ...honestly, do you like the idea of people putting in a plain text password in the command line? Or am I missing something?

[04:54] <eternaleye> 1.) Only root can read their files (.bash_history) unless they're idiots. 2.) THe client isn't long-running, so the chance of someone seeing it in the process table with something like 'ps aux' is very low

[04:55] <Wolfman2000> ...so we need to define the command line process.

[04:55] <Wolfman2000> along with how to pass files along.

[04:56] <eternaleye> Yeah

[04:56] <bpetering> Wolfman2000: what if you get the wrong file by (honest) mistake?

[04:56] <Wolfman2000> bpetering: then the file pastes

[04:56] <Tene> see also, tools/dev/nopaste.pl in the parrot repo

[04:56] <eternaleye> bpetering: I'm thinking we should only allow deletions whn authenticated

[04:57] <eternaleye> bpetering: The choice is between allowing people to redact their stuff when authenticated, and preventing malicious users from deleting unauthenticated pastes

[04:57] <bpetering> eternaleye: sounds good

[04:58] <eternaleye> s/ authenticated/unauthenticated/

[04:58] <Wolfman2000> eternaleye: Permission to PM you?

[04:59] <eternaleye> Granted

[04:59] <Tene> eternaleye: Permission to steal your wallet?

[04:59] <bpetering> Tene: that's rather... malicious :)

[05:00] <Tene> s/: that//

[05:00] <eternaleye> Tene: Denied

[05:00] <Tene> dammit

[05:00] <Tene> Talk about malicious...

[05:02] <bpetering> Tene: me? think i'm getting confused with someone else... :)

[05:02] <Tene> No, I was saying that it was malicious for eternaleye to deny me.

[05:03] <Wolfman2000> Tene: no wallet stealing

[05:03] <bpetering> Tene: oh, sorry... my mistake

[05:04] <Wolfman2000> Alright...I can make the database structure that I'm thinking of tomorrow. I hope to get to bed within an hour.

[05:05] <Wolfman2000> anything else that needs discussing of this subject?

[05:09] *** dj_goku joined
[05:09] <bpetering> Wolfman2000: i don't think so :)

[05:09] <eternaleye> Tene: Besides, KDE encrypts my password wallet with AES

[05:09] <eternaleye> Wolfman2000: Maybe we can call the client 6p (perl6 Paste), so it's nice and short like is :D

[05:09] <eternaleye> AGHHHHH I'm lagging so ridiculously badly. I should not have tried testing BtrFS' online resize with a 250g delta. Now it's in kernelspace and I can't even kill it, despite it eating all my disk bandwidth.

[05:11] <Wolfman2000> We'll argue over the name later. There are still some things I need to take care of before bed.

[05:11] <Wolfman2000> 1) finish up a homework assignment. 2) actually take care of that linked list implementation I'm behind on doing.

[05:12] <bpetering> Wolfman2000: good luck with the homework assignment :)

[05:12] <Wolfman2000> bpetering: the homework is simple

[05:12] <Wolfman2000> just write a report based on my teacher observation experience this past Wednesday

[05:14] <bpetering> Wolfman2000: did you learn anything interesting? :)

[05:15] <Wolfman2000> bpetering: last wednesday, or in general?

[05:15] <bpetering> Wolfman2000: in general

[05:16] <Wolfman2000> Wilmington, NC does not offer programming classes in high schools. I'll have to just accept Math...and hope I don't get forced to teach History

[05:17] <Wolfman2000> I'll say more once I make my post

[05:23] <quietfanatic> phenny: tell jnthn Unfortunately it looks like overloading trait_mod:<is> doesn't make a versatile subclassing hook, because the left argument given to it is an unnamed and uninitialized ClassHOW object.

[05:23] <phenny> quietfanatic: I'll pass that on when jnthn is around.

[05:24] <Wolfman2000> right, phenny

[05:24] <diakopter> quietfanatic: but you could grab it from the .source it throws by throwing and catching an exception :D

[05:24] <Wolfman2000> phenny: tell Juerd Planning a Perl 6 Pastebin: any assistance you can provide would be appreciated. Contact myself or eternaleye for more information.

[05:24] <phenny> Wolfman2000: yeah, yeah

[05:24] <quietfanatic> .source?

[05:24] <diakopter> the error message, I mean.. 

[05:24] <Wolfman2000> ...did phenny pass the info on, or is phenny going to ignore me on that

[05:25] <diakopter> Juerd: hilite

[05:25] <carlin> Wolfman2000: phenny does that from time to time, IIRC in its source it has a 1/1000 chance to say that

[05:25] <diakopter> nice

[05:25] <Wolfman2000> carlin: So where's my money for hitting a mini jackpot?

[05:25] <quietfanatic> diakopter: I don't think that'll work because it's just a bare ClassHOW object that doesn't have any metadata.  It only expects me to add a parent class before it initializes it properly.

[05:26] <diakopter> oh

[05:26] <bpetering> Wolfman2000: your odds are better with hugme, it'll blush 1 time in 100 :)

[05:26] <carlin> http://inamidst.com/phenny/modules/tell.py # CTRL+F for "yeah, yeah"

[05:26] <Wolfman2000> okay, assignment submitted

[05:26] <quietfanatic> I don't think there's anything I can throw and catch that contains the name of the class that hasn't been defined yet :)

[05:27] <Wolfman2000> I got the super rare one. :D

[05:28] <quietfanatic> But surely the name must exist somewhere higher in the stack, I just can't reach it. :(

[05:28] <Wolfman2000> ...alright, this may be a silly question here, but...why do we have a python bot in a perl room?

[05:29] <bpetering> Wolfman2000: thievery is a form of laziness? :)

[05:30] <Wolfman2000> *shrugs*

[05:30] <Wolfman2000> Now, to my linked list...hopefully

[05:31] <bpetering> Wolfman2000: what're you blocking on?

[05:31] <Wolfman2000> bpetering: blocking on? that's a new one on me

[05:31] <bpetering> .oO( we need a definition bot... )

[05:32] <carlin> I could port Purl to Perl 6

[05:33] <bpetering> ... but i'll be happy to help: "X is preventing Y from being accomplished" === "Y is blocking on X"

[05:33] <Wolfman2000> bpetering: Starting fresh for this one.

[05:33] <Wolfman2000> This time, I built the Node class separately, and got that tested. Check the IRC logs for that one.

[05:34] <bpetering> carlin: purl seems cool. :)

[05:35] <carlin> bpetering: you obviously haven't seen jnthn and masak complaining about how annoying it is? :p

[05:36] *** frew joined
[05:37] <bpetering> Wolfman2000: #89963?

[05:37] <Wolfman2000> bpetering: I don't recall which paste it was, sorry.

[05:37] <eternaleye> carlin: Maybe make one change to purl, and require a leading '?' (ignoring lines that are _only_ '?')

[05:38] <bpetering> carlin: can't be as annoying as lambdabot... unless you made it trigger on vowels, or something :|

[05:42] <bpetering> even lambdabot is useful though. just a bit trigger-happy :)

[05:42] <lisppaste3> wolfman2000 pasted "Null PMC access in type() in Main <-- Umm...what does this mean?" at http://paste.lisp.org/display/89974

[05:44] <eternaleye> bpetering: lambdabot's only really trigger-happy in perl-based channels, because arrays lead to leading @-signs

[05:45] <carlin> and rakudo's REPL leads to leading > signs

[05:47] <Wolfman2000> ...is this going to be one of those questions where I have to wait for the morning crew?

[05:47] <bpetering> well, i couldn't have written lambdabot. i guess i'll stop complaining until i write my own. :)

[05:48] <carlin> Wolfman2000: a Null PMC access is sort of like a rakudo segfault

[05:49] <Wolfman2000> ...just once, I'd like to be able to make code that just WORKS

[05:50] <carlin> if you had a working version of that and you know what you changed to caused it would help

[05:50] <Wolfman2000> And I don't mean just simple square root problems.

[05:51] <Wolfman2000> carlin: This is my only version. Well...my feather box has node_good.pl, but that's before I implemented the linked list stuff. The Node class by itself worked.

[05:51] <Wolfman2000> ...well, except for when you tried to Str() a Str, but that's a rakudobug

[05:53] <lisppaste3> wolfman2000 annotated #89974 "Rakudo must not like inner classes. Still an error though: invoke() not implemented in class 'Node'" at http://paste.lisp.org/display/89974#1

[05:54] <Wolfman2000> ...and when I google the error message, paste 89892 is the first result. Great, I'm famous.

[05:56] <carlin> Try changing new Node(""); to Node.new

[05:56] <Wolfman2000> carlin: ...did I make the same mistake again?

[05:57] <Wolfman2000> ...BAH

[05:58] <Wolfman2000> at least I have a new error now

[05:59] <bpetering> Wolfman2000: which error?

[05:59] <lisppaste3> wolfman2000 annotated #89974 "set_integer_keyed() not implemented in class 'Sub' in Main <-- Umm...my classes are LinkedList and Node." at http://paste.lisp.org/display/89974#2

[05:59] <Wolfman2000> bpetering: ^

[06:00] *** araujo left
[06:01] *** c9s left
[06:01] *** c9s joined
[06:01] *** c9s left
[06:01] *** c9s joined
[06:03] <bpetering> Wolfman2000: some things just aren't ready yet... eventually they'll "just work" :)

[06:04] <Wolfman2000> ...so even though I've designed the basics of the linkedlist properly this time, I still can't make it work. OY

[06:04] <bpetering> Wolfman2000: frustrating, isn't it?

[06:06] <Wolfman2000> bpetering: Yes. :(

[06:06] <Wolfman2000> Looks like I'll have to wait for whatever's going on in the ng branch to be merged to the main branch, then rebuild rakudo

[06:07] <Wolfman2000> Unless you have another idea.

[06:10] <bpetering> sometimes leading by example works wonders... rather than waiting, i mean... 

[06:11] <Wolfman2000> you mean I should use the ng branch?

[06:13] *** hcchien left
[06:16] *** keeth left
[06:18] *** hcchien joined
[06:20] *** synth joined
[06:29] <bpetering> Wolfman2000: sorry, was afk - needed a drink :)

[06:30] <dalek> nqp-rx: ee6743c | pmichaud++ | src/NQP/ (2 files):

[06:30] <dalek> nqp-rx: Convert package_def to use <block> instead of <pblock>.

[06:30] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/ee6743c5c0ab9c2736fce89f34bd99d1cc78d873

[06:30] <dalek> nqp-rx: 1e2187a | pmichaud++ | t/nqp/38-quotes.t:

[06:30] <dalek> nqp-rx: Fix bug in interpolated closure test.

[06:30] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/1e2187ac4266ce48c65a650f666a350ba659c1ad

[06:30] <dalek> nqp-rx: 457fa04 | pmichaud++ | src/NQP/Actions.pm:

[06:30] <dalek> nqp-rx: Update handling of block arity.

[06:30] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/457fa041277c1060dbbb49f53b64287fe62ea231

[06:30] <dalek> nqp-rx: 992b220 | pmichaud++ |  (3 files):

[06:30] <dalek> nqp-rx: Enable pointy blocks.

[06:30] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/992b220de66a436f108399e5c393526a252a1485

[06:30] <Wolfman2000> bpetering: that's fine. apparently I never remembered to turn off /away, so I was apparently away the hwole day. :P

[06:32] <bpetering> Wolfman2000: :P

[06:33] <Wolfman2000> but I've stayed up too late, so I'm off to bed for real.

[06:33] <Wolfman2000> We can talk more later.

[06:35] <bpetering> Wolfman2000: sounds good.

[06:36] *** tak_ joined
[06:38] *** tak11 left
[06:38] *** tak_ is now known as tak11

[07:04] *** synth left
[07:05] *** synth joined
[07:14] *** bpetering left
[07:16] *** tak11 left
[07:34] *** xenoterracide left
[07:36] *** xenoterracide joined
[07:40] *** SmokeMachine left
[07:51] *** ihrd joined
[07:51] *** ihrd left
[07:52] *** frew left
[07:54] *** [synth] joined
[07:55] *** SmokeMachine joined
[07:55] *** synth left
[08:05] *** fax left
[08:11] *** ihrd joined
[08:13] *** ihrd left
[08:17] *** gbacon left
[08:22] *** gfx left
[08:26] *** jrockway left
[08:26] *** [synth] left
[08:26] *** akl left
[08:26] *** SmokeMachine left
[08:26] *** dj_goku left
[08:26] *** zaslon left
[08:26] *** emma left
[08:26] *** xinming left
[08:26] *** markmont left
[08:26] *** c9s left
[08:26] *** envi^home left
[08:26] *** pnate2 left
[08:26] *** IllvilJa left
[08:26] *** nbrown left
[08:26] *** rgrau left
[08:26] *** shachaf left
[08:26] *** reid05 left
[08:26] *** payload left
[08:26] *** p6eval left
[08:26] *** cotto_work left
[08:26] *** tylerni7 left
[08:26] *** ssm left
[08:26] *** daemon left
[08:26] *** yath left
[08:26] *** lmc left
[08:26] *** hicx174 left
[08:26] *** _jaldhar left
[08:26] *** _eMaX_ left
[08:26] *** japhb left
[08:26] *** simcop2387 left
[08:26] *** hugme left
[08:26] *** jnthn left
[08:26] *** Juerd left
[08:26] *** yves left
[08:26] *** cosimo left
[08:26] *** athomason left
[08:26] *** Maddingue left
[08:26] *** omega_ left
[08:26] *** lambdabot left
[08:26] *** parduncia left
[08:26] *** constant left
[08:26] *** krunen left
[08:26] *** Infinoid left
[08:26] *** pugs_svn left
[08:26] *** dukeleto left
[08:26] *** hatseflats left
[08:26] *** jan_ left
[08:26] *** szabgab left
[08:26] *** jiing_ left
[08:26] *** kst left
[08:26] *** lisppaste3 left
[08:26] *** spinclad left
[08:26] *** Woodi left
[08:26] *** cls_bsd left
[08:26] *** crazed left
[08:26] *** sri__ left
[08:26] *** phenny left
[08:26] *** Patterner left
[08:26] *** Wolfman2000 left
[08:26] *** pmichaud left
[08:26] *** dukelet0 left
[08:26] *** KatrinaTheLamia left
[08:26] *** silug left
[08:26] *** xenoterracide left
[08:26] *** hcchien left
[08:26] *** xp_prg left
[08:26] *** pointme left
[08:26] *** hsb left
[08:26] *** alester left
[08:26] *** allbery_b left
[08:26] *** Helios- left
[08:26] *** drbean left
[08:26] *** charsbar left
[08:26] *** obra_ left
[08:26] *** leedo left
[08:26] *** revdiablo left
[08:26] *** rafl left
[08:26] *** moritz_ left
[08:26] *** awwaiid left
[08:26] *** r0bby_ left
[08:26] *** sjohnson left
[08:26] *** gfldex left
[08:26] *** baest left
[08:26] *** renormalist left
[08:26] *** Grrrr left
[08:26] *** cotto left
[08:26] *** mtve left
[08:26] *** wolverian left
[08:26] *** nothingmuch left
[08:26] *** literal left
[08:26] *** christine left
[08:26] *** Trey left
[08:26] *** TimToady left
[08:26] *** diakopter left
[08:26] *** Bucciarati left
[08:26] *** stepnem left
[08:27] *** pmichaud joined
[08:27] *** SmokeMachine joined
[08:27] *** [synth] joined
[08:27] *** xenoterracide joined
[08:27] *** c9s joined
[08:27] *** dj_goku joined
[08:27] *** xp_prg joined
[08:27] *** zaslon joined
[08:27] *** pointme joined
[08:27] *** yath joined
[08:27] *** envi^home joined
[08:27] *** payload joined
[08:27] *** emma joined
[08:27] *** xinming joined
[08:27] *** pnate2 joined
[08:27] *** IllvilJa joined
[08:27] *** lmc joined
[08:27] *** Patterner joined
[08:27] *** nbrown joined
[08:27] *** rgrau joined
[08:27] *** jrockway joined
[08:27] *** markmont joined
[08:27] *** shachaf joined
[08:27] *** reid05 joined
[08:27] *** hicx174 joined
[08:27] *** _jaldhar joined
[08:27] *** dukeleto joined
[08:27] *** _eMaX_ joined
[08:27] *** Wolfman2000 joined
[08:27] *** p6eval joined
[08:27] *** cotto_work joined
[08:27] *** tylerni7 joined
[08:27] *** akl joined
[08:27] *** krunen joined
[08:27] *** hsb joined
[08:27] *** japhb joined
[08:27] *** alester joined
[08:27] *** allbery_b joined
[08:27] *** simcop2387 joined
[08:27] *** dukelet0 joined
[08:27] *** KatrinaTheLamia joined
[08:27] *** hugme joined
[08:27] *** Infinoid joined
[08:27] *** pugs_svn joined
[08:27] *** jnthn joined
[08:27] *** irc.freenode.net sets mode: +ovvo pmichaud hugme pugs_svn jnthn

[08:27] *** Juerd joined
[08:27] *** hatseflats joined
[08:27] *** jan_ joined
[08:27] *** sjohnson joined
[08:27] *** szabgab joined
[08:27] *** yves joined
[08:27] *** gfldex joined
[08:27] *** jiing_ joined
[08:27] *** kst joined
[08:27] *** Helios- joined
[08:27] *** drbean joined
[08:27] *** charsbar joined
[08:27] *** lisppaste3 joined
[08:27] *** spinclad joined
[08:27] *** lambdabot joined
[08:27] *** cls_bsd joined
[08:27] *** constant joined
[08:27] *** cosimo joined
[08:27] *** crazed joined
[08:27] *** athomason joined
[08:27] *** daemon joined
[08:27] *** ssm joined
[08:27] *** Woodi joined
[08:27] *** parduncia joined
[08:27] *** sri__ joined
[08:27] *** omega_ joined
[08:27] *** Maddingue joined
[08:27] *** phenny joined
[08:27] *** r0bby_ joined
[08:27] *** wolverian joined
[08:27] *** cotto joined
[08:27] *** Grrrr joined
[08:27] *** renormalist joined
[08:27] *** baest joined
[08:27] *** revdiablo joined
[08:27] *** awwaiid joined
[08:27] *** christine joined
[08:27] *** Bucciarati joined
[08:27] *** silug joined
[08:27] *** stepnem joined
[08:27] *** leedo joined
[08:27] *** literal joined
[08:27] *** rafl joined
[08:27] *** Trey joined
[08:27] *** obra_ joined
[08:27] *** moritz_ joined
[08:27] *** irc.freenode.net sets mode: +vvvo lisppaste3 lambdabot phenny moritz_

[08:27] *** nothingmuch joined
[08:27] *** mtve joined
[08:27] *** TimToady joined
[08:27] *** diakopter joined
[08:27] *** irc.freenode.net sets mode: +oo TimToady diakopter

[08:32] *** hcchien joined
[08:33] *** hcchien left
[08:34] *** ihrd joined
[08:37] *** hcchien joined
[08:42] *** ihrd left
[08:42] *** ihrd joined
[08:46] *** jrockway left
[08:46] *** hcchien left
[08:46] *** [synth] left
[08:46] *** akl left
[08:46] *** markmont left
[08:46] *** zaslon left
[08:46] *** dj_goku left
[08:46] *** SmokeMachine left
[08:46] *** xinming left
[08:46] *** emma left
[08:46] *** nbrown left
[08:46] *** IllvilJa left
[08:46] *** pnate2 left
[08:46] *** envi^home left
[08:46] *** reid05 left
[08:46] *** shachaf left
[08:46] *** c9s left
[08:46] *** rgrau left
[08:46] *** ihrd left
[08:46] *** cotto_work left
[08:46] *** payload left
[08:46] *** p6eval left
[08:46] *** tylerni7 left
[08:46] *** ssm left
[08:46] *** daemon left
[08:46] *** athomason left
[08:46] *** cosimo left
[08:46] *** lmc left
[08:46] *** _eMaX_ left
[08:46] *** yath left
[08:46] *** Maddingue left
[08:46] *** hugme left
[08:46] *** japhb left
[08:46] *** hicx174 left
[08:46] *** _jaldhar left
[08:46] *** yves left
[08:46] *** Juerd left
[08:46] *** jnthn left
[08:46] *** lambdabot left
[08:46] *** omega_ left
[08:46] *** simcop2387 left
[08:46] *** parduncia left
[08:46] *** constant left
[08:46] *** sri__ left
[08:46] *** Woodi left
[08:46] *** crazed left
[08:46] *** spinclad left
[08:46] *** jiing_ left
[08:46] *** pugs_svn left
[08:46] *** Infinoid left
[08:46] *** krunen left
[08:46] *** kst left
[08:46] *** jan_ left
[08:46] *** szabgab left
[08:46] *** dukeleto left
[08:46] *** hatseflats left
[08:46] *** cls_bsd left
[08:46] *** phenny left
[08:46] *** lisppaste3 left
[08:46] *** dukelet0 left
[08:46] *** Wolfman2000 left
[08:46] *** Patterner left
[08:46] *** KatrinaTheLamia left
[08:46] *** silug left
[08:46] *** pmichaud left
[08:46] *** obra_ left
[08:46] *** rafl left
[08:46] *** leedo left
[08:46] *** revdiablo left
[08:46] *** Helios- left
[08:46] *** hsb left
[08:46] *** pointme left
[08:46] *** xenoterracide left
[08:46] *** xp_prg left
[08:46] *** charsbar left
[08:46] *** moritz_ left
[08:46] *** drbean left
[08:46] *** awwaiid left
[08:46] *** alester left
[08:46] *** r0bby_ left
[08:46] *** allbery_b left
[08:46] *** nothingmuch left
[08:46] *** christine left
[08:46] *** baest left
[08:46] *** renormalist left
[08:46] *** Grrrr left
[08:46] *** gfldex left
[08:46] *** sjohnson left
[08:46] *** cotto left
[08:46] *** wolverian left
[08:46] *** mtve left
[08:46] *** literal left
[08:46] *** TimToady left
[08:46] *** Trey left
[08:46] *** diakopter left
[08:46] *** Bucciarati left
[08:46] *** stepnem left
[08:46] *** orafu left
[08:46] *** eternaleye left
[08:46] *** mj41 left
[08:46] *** estrai left
[08:46] *** PZt left
[08:46] *** base_16 left
[08:46] *** eiro left
[08:46] *** jjore left
[08:46] *** mubot left
[08:46] *** PacoLinux left
[08:46] *** Caelum left
[08:46] *** slavik left
[08:46] *** tomaw_ left
[08:46] *** quietfanatic left
[08:46] *** cognominal left
[08:46] *** Woody2143 left
[08:46] *** BinGOs left
[08:46] *** jantore left
[08:46] *** Gothmog_ left
[08:46] *** presh_ left
[08:46] *** felipe left
[08:46] *** bloonix left
[08:46] *** kolibrie left
[08:46] *** elmex left
[08:46] *** he_ left
[08:46] *** rhr left
[08:46] *** viklund left
[08:46] *** mathw left
[08:46] *** frettled left
[08:46] *** huf left
[08:46] *** pjcj left
[08:46] *** Khisanth left
[08:46] *** nsh left
[08:46] *** sunnavy left
[08:46] *** avuserow left
[08:46] *** ilbot2 left
[08:46] *** sbp left
[08:46] *** IRSeekBot left
[08:46] *** lestrrat left
[09:00] *** yahooooo left
[09:35] *** slavik joined
[09:35] *** PacoLinux joined
[09:35] *** mubot joined
[09:35] *** Jedai joined
[09:35] *** he_ joined
[09:35] *** sunnavy joined
[09:35] *** Khisanth joined
[09:35] *** ilbot2 joined
[09:35] *** pjcj joined
[09:35] *** rhr joined
[09:35] *** sbp joined
[09:35] *** nsh joined
[09:35] *** IRSeekBot joined
[09:35] *** huf joined
[09:35] *** avuserow joined
[09:35] *** viklund joined
[09:35] *** lestrrat joined
[09:35] *** mathw joined
[09:35] *** frettled joined
[09:35] *** elmex joined
[09:35] *** bloonix joined
[09:35] *** kolibrie joined
[09:35] *** PZt joined
[09:35] *** estrai joined
[09:35] *** mj41 joined
[09:35] *** eternaleye joined
[09:35] *** orafu joined
[09:35] *** BinGOs joined
[09:35] *** Woody2143 joined
[09:35] *** cognominal joined
[09:35] *** Gothmog_ joined
[09:35] *** jantore joined
[09:35] *** presh_ joined
[09:35] *** felipe joined
[09:35] *** jjore joined
[09:35] *** eiro joined
[09:35] *** base_16 joined
[09:35] *** yahooooo joined
[09:35] *** gbacon joined
[09:35] *** quietfanatic joined
[09:35] *** irc.freenode.net sets mode: +vv ilbot2 IRSeekBot

[09:35] *** tomaw_ joined
[09:35] *** pmichaud joined
[09:35] *** Woodi joined
[09:35] *** reid05 joined
[09:35] *** iblechbot joined
[09:35] *** hcchien joined
[09:35] *** SmokeMachine joined
[09:35] *** xenoterracide joined
[09:35] *** c9s joined
[09:35] *** dj_goku joined
[09:35] *** xp_prg joined
[09:35] *** zaslon joined
[09:35] *** pointme joined
[09:35] *** yath joined
[09:35] *** envi^home joined
[09:35] *** payload joined
[09:35] *** emma joined
[09:35] *** xinming joined
[09:35] *** pnate2 joined
[09:35] *** IllvilJa joined
[09:35] *** lmc joined
[09:35] *** Patterner joined
[09:35] *** nbrown joined
[09:35] *** rgrau joined
[09:35] *** jrockway joined
[09:35] *** markmont joined
[09:35] *** shachaf joined
[09:35] *** hicx174 joined
[09:35] *** _jaldhar joined
[09:35] *** dukeleto joined
[09:35] *** _eMaX_ joined
[09:35] *** Wolfman2000 joined
[09:35] *** p6eval joined
[09:35] *** cotto_work joined
[09:35] *** tylerni7 joined
[09:35] *** akl joined
[09:35] *** krunen joined
[09:35] *** hsb joined
[09:35] *** japhb joined
[09:35] *** alester joined
[09:35] *** allbery_b joined
[09:35] *** simcop2387 joined
[09:35] *** dukelet0 joined
[09:35] *** KatrinaTheLamia joined
[09:35] *** hugme joined
[09:35] *** Infinoid joined
[09:35] *** pugs_svn joined
[09:35] *** irc.freenode.net sets mode: +ovv pmichaud hugme pugs_svn

[09:35] *** jnthn joined
[09:35] *** Juerd joined
[09:35] *** hatseflats joined
[09:35] *** jan_ joined
[09:35] *** sjohnson joined
[09:35] *** szabgab joined
[09:35] *** yves joined
[09:35] *** gfldex joined
[09:35] *** jiing_ joined
[09:35] *** kst joined
[09:35] *** Helios- joined
[09:35] *** drbean joined
[09:35] *** charsbar joined
[09:35] *** lisppaste3 joined
[09:35] *** spinclad joined
[09:35] *** lambdabot joined
[09:35] *** cls_bsd joined
[09:35] *** constant joined
[09:35] *** cosimo joined
[09:35] *** crazed joined
[09:35] *** athomason joined
[09:35] *** daemon joined
[09:35] *** ssm joined
[09:35] *** parduncia joined
[09:35] *** sri__ joined
[09:35] *** omega_ joined
[09:35] *** Maddingue joined
[09:35] *** phenny joined
[09:35] *** irc.freenode.net sets mode: +ovvv jnthn lisppaste3 lambdabot phenny

[09:35] *** r0bby_ joined
[09:35] *** wolverian joined
[09:35] *** cotto joined
[09:35] *** Grrrr joined
[09:35] *** renormalist joined
[09:35] *** baest joined
[09:35] *** revdiablo joined
[09:35] *** awwaiid joined
[09:35] *** christine joined
[09:35] *** Bucciarati joined
[09:35] *** silug joined
[09:35] *** stepnem joined
[09:35] *** leedo joined
[09:35] *** literal joined
[09:35] *** rafl joined
[09:35] *** Trey joined
[09:35] *** obra_ joined
[09:35] *** moritz_ joined
[09:35] *** nothingmuch joined
[09:35] *** mtve joined
[09:35] *** TimToady joined
[09:35] *** irc.freenode.net sets mode: +oo moritz_ TimToady

[09:35] *** diakopter joined
[09:35] *** irc.freenode.net sets mode: +o diakopter

[10:02] *** rgrau` joined
[10:04] <moritz_> good morning

[10:11] <dalek> rakudo: 97ced10 | moritz++ | t/spectest.data:

[10:11] <dalek> rakudo: [t/spectest.data] track file rename

[10:11] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/97ced10559899d15d4659ccab503edddb17742d1

[10:11] *** fax joined
[10:15] <Woodi> good morning

[10:15] *** NorwayGeek_ joined
[10:16] *** NorwayGeek|Away joined
[10:17] <Woodi> i got impression that this # is overloaded like Lisp brackets :)

[10:18] *** rgrau left
[10:18] <Woodi> kind a virtual room would be good for it :)

[10:18] <Woodi> with nice graohics and 3d space :)

[10:23] *** NorwayGeek joined
[10:35] *** NorwayGeek_ left
[10:36] *** NorwayGeek|Away left
[10:40] <moritz_> the rakudo ng branch builds in 28s (with three jobs parallel on 2 cores)

[10:43] <moritz_> it even passes a few subtests of the spectests ;-)

[10:43] <Woodi> woow :)

[10:43] <Woodi> any prediction on master merge time ? :)

[10:44] <moritz_> this month

[10:44] *** kaare joined
[10:45] <Woodi> ng branch is that refactoring to nqp ?

[10:46] <moritz_> not only that; it is also a rewrite of most of rakudo :)

[10:46] <moritz_> at least the parser and action methods

[10:46] *** arthur-_ joined
[10:47] *** envi^home left
[10:47] <Woodi> as a user i mainly care about tests passed and build proces :)

[10:47] <Woodi> and stories about development proces :>

[10:47] <Woodi> love stories :)

[10:48] <moritz_> then read jnthn's and pmichaud's blogs ;-)

[10:49] <Woodi> moritz_: i hear onece something like "monadic revolution"... i am specially interested how it grow in perl community...

[10:49] <Woodi> begin was sponsored by Audrey..

[10:49] <Woodi> and what happens next ?

[10:50] * moritz_ only know nomads

[10:51] *** envi^home joined
[10:51] <Woodi> :)

[10:52] <Woodi> nvm. but i am realy concern about this story... it is big paradigm shift from structural-objects to something more :)

[10:52] <moritz_> I always viewed monads as a concept to work around statelessness in haskell, and thus superfluous in Perl

[10:53] <moritz_> but maybe I'm on the totally wrong track here

[10:53] <moritz_> or maybe just nobody explained to properly why we might want/need explicit monads in Perl

[10:54] <Woodi> i can be wrong... for me monads are like sandboxes with cleaners or just classes... but i thinked perl6 want to be functional language too...

[10:57] <Woodi> or maybe extracting lazines component from functional languages is everything what we need ? :)

[10:59] *** rgrau`` joined
[11:00] <moritz_> we do have other features from functional languages

[11:01] <moritz_> like multi sub, easy currying, closures

[11:03] *** rgrau` left
[11:06] <Woodi> i am new on that names... - no idea when to use that features... 

[11:07] <Woodi> closures looks just like static fields...

[11:07] <Woodi> btw. do rakudo have threads atm ?

[11:08] *** fax left
[11:08] <moritz_> no

[11:09] <Woodi> but planned ?

[11:09] <moritz_> planned, yes

[11:10] <moritz_> afk, lunch

[11:10] <Woodi> smacznego :)

[11:11] *** pkkm joined
[11:11] <pkkm> can I ask about perl regular expressions here?

[11:12] <Woodi> yes

[11:12] <Woodi> but you should not ask if you can ask - info in topic usually:)

[11:14] <Woodi> pkkm: polak ?

[11:14] <pkkm> I want my pcre to catch all google ads. I don't know what I did wrong. Screenshot from online regex tester: http://img32.imageshack.us/img32/3122/zrzutekranu1y.png

[11:14] <pkkm> Woodi: tal

[11:14] <pkkm> tak*

[11:15] <pkkm> In that case pcre will be the same as perl regex.

[11:15] <Woodi> mainly should :) perl5 like

[11:16] <Woodi> here is perl6 # so a lot of new syntax ...

[11:20] <Woodi> pkkm: you want match everything in one step...

[11:21] *** kidd joined
[11:21] <Woodi> pkkm: maybe first catch right <script> ... </scrip> then extract what you need ?

[11:21] <pkkm> Woodi, will it change anything?

[11:22] <pkkm> anyway, I need this pcre in one line

[11:23] <Woodi> pkkm: iw will make more clear regex for example

[11:23] <pkkm> Woodi: thany You.

[11:24] <Woodi> and error on top of image can mean that you put \ before some letter which isn't a modifier

[11:24] <Woodi> at least not in pcre

[11:25] <pkkm> I put it before * in (?:/\*.*\*/)?

[11:25] <pkkm> but how could it be done without it?

[11:26] <pkkm> \s* - whitespaces

[11:26] <pkkm> Woodi: Do you want me to send You this pcre in plaintext?

[11:27] *** am0c joined
[11:27] <Woodi> i think this regex is overcomplicated... for example you match two <scripts> at once and second looks like constant...

[11:28] <Woodi> why put second in regexp ? 

[11:29] *** fax joined
[11:32] <pkkm> I want to catch whole block of code responsible for google ads

[11:32] <pkkm> I need it

[11:32] <pkkm> It will be ettercap filter

[11:32] <pkkm> look at this: http://paste.ubuntu.com/313194/

[11:33] <Woodi> if you need blocks then catch blocks and throw away details from inside

[11:34] <pkkm> It's intended to catch ALL google ads, even with comments and additional/removed whitespaces.

[11:35] <pkkm> Woodi: I need to catch whole google ads code.

[11:36] <pkkm> Woodi: And I need it in the exact form it's on website

[11:36] <Woodi> i think that for catching blocks there is not need to describe everything inside blocks

[11:37] *** payload1 joined
[11:38] *** payload left
[11:38] <Woodi> just match <script> google_ad_client ap to FIRST </script> and then next <script with syndication 

[11:39] <Woodi> you describe everything inside 

[11:40] <Woodi> if you want to extract more details from script blocks then use catching ()

[11:41] <pkkm> Woodi: and what if someone has broken website like: http://paste.ubuntu.com/313202/

[11:42] <pkkm> my pcre needs to be "bullet proof"

[11:44] <Woodi> first script with google sindication is not ads

[11:45] <Woodi> so you need to match only scripts with google_ad_client

[11:45] <pkkm>                 <script type="text/javascript"      src="http://pagead2.googlesyndication.com/pagead/show_ads.js">    </script>

[11:46] <pkkm> it's responsible for showing ads

[11:46] <Woodi> eg: /<!-- .+ google_ad_client = .+ -->/

[11:46] <pkkm> I want this regex to catch WHOLE code responsible for ads

[11:46] <Woodi> ah, right :)

[11:46] <Woodi> look

[11:47] <Woodi> html allows to send scripts not in order

[11:47] <Woodi> so you cannot expect sindication will be just after google_ad_client

[11:48] <pkkm> this regex is intended to be multipurpose, from counting ads, through marking them, to commenting them out

[11:48] <pkkm> pcre*

[11:48] <Woodi> so you need two regexes

[11:49] <Woodi> it is not important yet

[11:50] <Woodi> just make regex match what you want then use it for substitution

[11:52] <pkkm> how can I make some strings to be matched, independent on order, with repetitions possible?

[11:52] <Woodi> use separated regezes

[11:52] <Woodi> keepp it simple

[11:53] <pkkm> look at (?:(?#CAW - Comments And Whitespaces)(?:/\*.*\*/)?\s*.{0,5}(?:/\*.*\*/)?(?#END-CAW))

[11:53] <Woodi> terrible :)

[11:53] <pkkm> (?:(?#CAW - Comments And Whitespaces)(?:/\*.*\*/)?\s*.{0,5}(?:/\*.*\*/)?(?#END-CAW))

[11:54] <pkkm> if I could do something i told about before, I wouldn't have to repeat this

[11:55] *** masak joined
[11:55] <masak> oh hai, #perl6.

[11:55] <Woodi> hi masak++

[11:55] <masak> I find the backlog's discussion with emma very interesting.

[11:55] <pkkm> it would look like noorder("(?:/\*.*\*/)?","\s*",".{0,5}")

[11:56] <masak> emma: welcome, and thanks for posing interesting questions.

[11:56] <pkkm> Woodi 2^

[11:56] <masak> sjohnson: (re regex help) no problem :)

[11:57] <pkkm> Woodi, it would be much simpler

[11:58] <masak> sjohnson: (calling Wolfman2000 'wolfpig', and receiving a negative reaction) that's not a 'tough crowd', that's you being rude, unfortunately.

[11:58] <Woodi> pkkm: use (something|something_other)

[11:59] <masak> or sometimes [something|something_other]

[11:59] <Woodi> masak: in perl5 or pcre ?

[11:59] <masak> in Perl 6 regexes.

[12:00] <Woodi> in p6 [ ] is still class ?

[12:00] <masak> sorry, were you talking about Perl 5 regexes? I don't have the entire context? :)

[12:00] <masak> Woodi: no, it's a non-capturing group.

[12:00] <Woodi> ok

[12:00] <pkkm> masak: about pcre

[12:00] <masak> kind of like (?:something|something_else) in Perl 5.

[12:01] <pkkm> masak: ettercap pcre :)

[12:01] <pkkm> look at context

[12:01] <pkkm> <pkkm> how can I make some strings to be matched, independent on order, with repetitions possible?

[12:01] <Woodi> pcre is only one :)

[12:01] <pkkm> <pkkm> (?:(?#CAW - Comments And Whitespaces)(?:/\*.*\*/)?\s*.{0,5}(?:/\*.*\*/)?(?#END-CAW))

[12:01] <pkkm> <pkkm> it would look like noorder("(?:/\*.*\*/)?","\s*",".{0,5}")

[12:01] <Woodi> it's c library :)

[12:02] <pkkm> masak: so (sth|sth2) is not able to do that

[12:02] *** jaffa8 joined
[12:02] <masak> pmichaud: yes, but it captures.

[12:04] <pkkm> Woodi, so how can I make it to be independent on order?

[12:04] <masak> er, pkkm, not pmichaud. :/

[12:04] *** ihrd joined
[12:05] <Woodi> pkkm: use alternatives: |

[12:06] <Woodi> pkkm: (<script google_ad_client|<script syndication)

[12:07] <Woodi> pkkm: btw do you are allowed to sniff that stuff ?

[12:07] <pkkm> Woodi: so will (?:(?:/\*.*\*/)?|\s*|.{0,5})* capture /*sth*/saf/*sth*/          /*comment*/

[12:07] <Woodi> private or inside-company ?

[12:07] <pkkm> Woodi: my home network

[12:07] <pkkm> so I think I am

[12:10] <Woodi> looks it will match *sth* and match saf and match last one separatelly

[12:11] <pkkm> and will (?:(?:/\*.*\*/)?|\s*|.{0,5})* capture /*sth*/saf/*sth*/          /*comment*//*sth*/saf/*sth*/    /*sth*/saf/*sth*/          /*comment*/      /*comment*/

[12:11] <pkkm> ?

[12:11] <pkkm> what do You mean 'separately'?

[12:12] <pkkm> whole pcre returns true/false

[12:12] <pkkm> so how can something be separate?

[12:13] <Woodi> ehmmi think /\*.*\*/ will match from start to end

[12:14] <masak> pkkm, Woodi: so, how did you come to be discussing this on #perl6?

[12:15] <Woodi> just anseringbot i am...

[12:15] <Woodi> sory :)

[12:15] <masak> no problem. just mind the signal-to-noise ratio.

[12:15] <pkkm> Woodi: oh yes :D

[12:16] * Woodi is answering&asking addicted :)

[12:17] <pkkm> can (sth|sth2) catch more than one time?

[12:17] <Woodi> pkkm: yes, default * and + are gready

[12:17] <masak> greedy.

[12:18] <Woodi> right :) and both in p5 and p6

[12:18] *** NorwayGeek left
[12:18] *** hcchien left
[12:19] *** Whiteknight joined
[12:20] <pkkm> so (?:sth1|sth2|sth3|sth4)* would do?

[12:21] <moritz_> std: / (?:sth1|sth2|sth3|sth4)* /

[12:21] <Woodi> will match one of sth, as far as it can

[12:21] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤quantifier quantifies nothing at /tmp/Q6fH9m0Qzs line 1:␤------> [32m/ (?:[33m⏏[31msth1|sth2|sth3|sth4)* /[0m␤    expecting quantmod␤FAILED 00:01 104m␤

[12:22] <Woodi> std: / (sth1|sth2|sth3|sth4)* /

[12:22] <p6eval> std 29023: ok 00:01 103m␤

[12:23] <Woodi> std: "sth" ~~ / (sth1|sth2|sth|sth4)* /

[12:23] <p6eval> std 29023: ok 00:02 105m␤

[12:23] *** ihrd left
[12:23] *** hcchien joined
[12:25] <pkkm> oh I didn't konw we've got testing bot here :)

[12:27] <moritz_> rakudo: say 'foo sth3' ~~ / [ sth <[1234]> ]* /;

[12:27] <p6eval> rakudo 97ced1: ␤

[12:27] <moritz_> rakudo: say 'foo sth3' ~~ / [ sth <[1234]> ]+ /;

[12:27] <p6eval> rakudo 97ced1: sth3␤

[12:32] <Woodi> btw. constant installing parrot and rakudo makes i write Makefile for that :)

[12:32] <moritz_> git pull && perl Configure --gen-parrot && make -j 3 install

[12:32] <moritz_> no rocket science ;-)

[12:33] <Woodi> maybe it will be usefull for someone... located at http://perl.lunski.pl/perl6/spi

[12:33] <Woodi> moritz_: that is a problem

[12:34] <pkkm> std: /(?:[/\*.*\*/|\s*|.{,5}]*)/

[12:34] <Woodi> what if you want it in /usr/local ?

[12:34] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤quantifier quantifies nothing at /tmp/mMMNGyv0Jm line 1:␤------> [32m/(?:[33m⏏[31m[/\*.*\*/|\s*|.{,5}]*)/[0m␤    expecting quantmod␤FAILED 00:02 103m␤

[12:34] <moritz_> pkkm: (?: is not Perl 6 regex syntax

[12:34] <pkkm> moritz_: but it's working in pcres

[12:34] <pkkm> std: /([/\*.*\*/|\s*|.{,5}]*)/

[12:34] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter (must be quoted to match literally) at /tmp/BJ86v7WoW9 line 1:␤------> [32m/([[33m⏏[31m/\*.*\*/|\s*|.{,5}]*)/[0m␤    expecting any of:␤  regex atom␤       regex_infix␤      termish␤        ws␤FAILED 00:02 106m␤

[12:35] <moritz_> pkkm: maybe, but this is a Perl 6 channel

[12:35] <moritz_> Woodi: then you need something more elaborate, that's true

[12:35] <Woodi> pkkm: pcre was made for compability with superb-perl5 regexes

[12:35] <pkkm> std: /[/\*.*\*/|\s*|.{,5}]*/

[12:35] <moritz_> but it's still not compatible :/

[12:35] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter (must be quoted to match literally) at /tmp/GGL8dgX0Tx line 1:␤------> [32m/[[33m⏏[31m/\*.*\*/|\s*|.{,5}]*/[0m␤    expecting any of:␤    regex atom␤       regex_infix␤      termish␤        ws␤FAILED 00:01 103m␤

[12:36] <Woodi> moritz_: and what if you must install parrot then rakudo, make mackages to place system-wide, then remove becouse new wersion was developed by someone ? :)

[12:37] <Woodi> and even proto ask me to install it outside so i did :)

[12:38] <Woodi> coffee &

[12:39] *** araujo joined
[12:39] *** hcchien left
[12:39] <pkkm> std: /[/\*.*\*/|\s*|.{,5}]*/

[12:39] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter (must be quoted to match literally) at /tmp/Ooz6ZyDSlX line 1:␤------> [32m/[[33m⏏[31m/\*.*\*/|\s*|.{,5}]*/[0m␤    expecting any of:␤    regex atom␤       regex_infix␤      termish␤        ws␤FAILED 00:01 103m␤

[12:39] <pkkm> std: / [/\*.*\*/|\s*|.{,5}]* /

[12:39] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter (must be quoted to match literally) at /tmp/A6cj6Ct2YG line 1:␤------> [32m/ [[33m⏏[31m/\*.*\*/|\s*|.{,5}]* /[0m␤    expecting any of:␤  regex atom␤       regex_infix␤      termish␤        ws␤FAILED 00:01 103m␤

[12:39] *** hcchien joined
[12:40] <moritz_> it's complaining about / not being escaped

[12:41] <pkkm> std: / [\/\*.*\*\/|\s*|.{,5}]* /

[12:41] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix , instead at /tmp/b2YOAUwAy1 line 1:␤------> [32m/ [\/\*.*\*\/|\s*|.{,[33m⏏[31m5}]* /[0m␤FAILED 00:01 106m␤

[12:42] *** fax left
[12:42] <moritz_> and in Perl 6 the generig quantifier is **0..5, not .{,5}

[12:42] <moritz_> s/generig/generic/

[12:43] <pkkm> std: / [\/\*.*\*\/|\s*|.**0..5}]* /

[12:43] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Unable to parse regex; couldn't find right bracket at /tmp/w46Sj78XRm line 1:␤------> [32m/ [\/\*.*\*\/|\s*|.**0..5[33m⏏[31m}]* /[0m␤    expecting any of:␤       regex atom␤       regex_infix␤      standard stopper␤ terminator␤     ws␤FAILED 00:01 104m␤

[12:43] <pkkm> ...

[12:43] <pkkm> std: / [\/\*.*\*\/|\s*|**0..5}]* /

[12:43] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤quantifier quantifies nothing at /tmp/sVglybw7E9 line 1:␤------> [32m/ [\/\*.*\*\/|\s*|**0..5[33m⏏[31m}]* /[0m␤FAILED 00:01 103m␤

[12:44] <pkkm> std: / [\/\*.*\*\/|\s*|.**0..5}]* /

[12:44] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Unable to parse regex; couldn't find right bracket at /tmp/91c7SkqoYK line 1:␤------> [32m/ [\/\*.*\*\/|\s*|.**0..5[33m⏏[31m}]* /[0m␤    expecting any of:␤       regex atom␤       regex_infix␤      standard stopper␤ terminator␤     ws␤FAILED 00:01 103m␤

[12:44] <pkkm> std: / [\/\*.*\*\/|\s*|.**0..5]* /

[12:44] <p6eval> std 29023: ok 00:01 103m␤

[12:44] <pkkm> :)

[12:45] <moritz_> std: / [ '/*' .*? '*/' | \s+ | .**1..5 ]* /

[12:45] <p6eval> std 29023: ok 00:01 105m␤

[12:45] <moritz_> pkkm: since the group is quantified with a * which allows zero matches, it doesn't make much sense to allow \s* inside, which also matches an empty string

[12:47] <pkkm> Oh!

[12:47] <pkkm> it will match any string!

[12:47] <moritz_> right

[12:47] <pkkm> lol

[12:48] <moritz_> that's why it's important to always test for both matches and non-matches

[12:49] <moritz_> too permissive matches are quite common

[12:50] <pkkm> std: / (\s*(/\*.*\*/)?\s*) /

[12:50] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter (must be quoted to match literally) at /tmp/6Fikrpb5CG line 1:␤------> [32m/ (\s*([33m⏏[31m/\*.*\*/)?\s*) /[0m␤    expecting any of:␤    regex atom␤       regex_infix␤      termish␤        ws␤FAILED 00:02 107m␤

[12:50] <pkkm> std: / \s*(/\*.*\*\/)?\s* /

[12:50] <p6eval> std 29023: [31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter (must be quoted to match literally) at /tmp/jfIA2iI7XX line 1:␤------> [32m/ \s*([33m⏏[31m/\*.*\*\/)?\s* /[0m␤    expecting any of:␤     regex atom␤       regex_infix␤      termish␤        ws␤FAILED 00:01 104m␤

[12:50] *** rafl left
[12:51] <pkkm> std: / \s*(\/\*.*\*\/)?\s* /

[12:51] <moritz_> pkkm: anyway, if you want to test PCRE regexes, a Perl 6 regex checker is surely not your best option ;-)

[12:51] <p6eval> std 29023: ok 00:01 103m␤

[12:56] <pkkm> brb dinner :)

[12:58] *** masak left
[13:28] <pkkm> I have to go.

[13:29] <pkkm> see You at 17

[13:29] <moritz_> whenever that might be outside your timezone ;-)

[13:30] *** payload1 left
[13:32] <Woodi> moritz_: maybe you know something about including Actor model in p6 ?

[13:32] <moritz_> Woodi: I have no idea what the Actor model ist

[13:32] <moritz_> I just know that most models suck at acting ;-)

[13:33] <Woodi> model of concurent programming...

[13:33] *** pkkm left
[13:33] <Woodi> allow no low-level races

[13:33] <Woodi> k, thanx

[13:36] <moritz_> rakudo: sub f(*@_, *%_) { say @_.perl, %_.perl }; my $x = 'y'; f( $x => 5 )

[13:36] <p6eval> rakudo 97ced1: ["y" => 5]{}␤

[13:42] *** envi^home left
[13:50] *** lichtkind joined
[13:51] *** SmokeMachine left
[13:52] *** SmokeMachine joined
[14:00] <Juerd> Wolfman2000: What kind of help would you need, for building that pastething?

[14:00] <phenny> Juerd: 05:24Z <Wolfman2000> tell Juerd Planning a Perl 6 Pastebin: any assistance you can provide would be appreciated. Contact myself or eternaleye for more information.

[14:01] <Wolfman2000> *yawn* morning. Wasn't expecting phenny to wake me up

[14:02] <Juerd> Moin

[14:02] *** yjh joined
[14:03] <Wolfman2000> Juerd: We've figured out most of the basics. Most likely we'll lose Feather for hosting right now until we end up with a paste.perl6.org or something. We've got a database plan, login plan...the big issue the command line interface, but I think eternaleye has msot of that figured.

[14:03] <Wolfman2000> ...oh yeah. We need some magical ability to turn perl code into colored syntax. a P6Regex matching thing

[14:04] <Juerd> I can help you with hosting on feather but not much else :0

[14:04] <Juerd> :)

[14:05] <Wolfman2000> Then the other questions...can we use mysql and cpan without issue? I tried to start cpan, but it's apparently meant for sudo users only. We each don't have our own. I wonder if mysql is similar.

[14:05] <Juerd> See 'How do I keep my own module/library directory?' in perlfaq8 or ask me to install some modules

[14:06] <Juerd> And ask me if you need mysql databases

[14:06] <Wolfman2000> Juerd: mysql I saw was available. I didn't know if I was allowed to run that on my own.

[14:07] <Wolfman2000> As far as modules to install...well, since this is going to be built on Perl 5 right now...Catalyst::Perl and related packages. If there is a P6Regex style package for Perl 5, that'd be great too.

[14:07] <Juerd> You're allowed to run your own but it's easier to just get a database in the system-wide mysql

[14:08] <Juerd> For Perl 6 projects, you're allowed to run *anything* as long as you play nice with resources, and don't do anything illegal.

[14:08] <Wolfman2000> We plan on moving to Perl 6 once it's more stable.

[14:09] <Wolfman2000> But even you have to admit that the current pastebin with its lack of Perl syntaxing is...kind of sad

[14:09] <Juerd> It's suboptimal

[14:09] <Wolfman2000> ...ah. I can use cpan. I just have to set o confs

[14:09] *** NorwayGeek joined
[14:11] <Wolfman2000> ...and adjust my own @INC path. Is that even possible?

[14:12] <moritz_> sure, with PERL5LIB

[14:12] *** envi^home joined
[14:12] <Juerd> use lib 'some path'; or set PERL5LIB

[14:12] <Juerd> Or BEGIN { add to @INC here }

[14:12] <Wolfman2000> Juerd: I think an environment variable would work best here.

[14:12] <moritz_> or perl -Ipath script.pl

[14:12] <moritz_> perldoc perlrun # more alternatives

[14:12] <Juerd> Wolfman2000: Catalyst is being installed right now.

[14:14] <Juerd> Done

[14:14] <Juerd> Wolfman2000: What's the preferred name for a database and mysql login?

[14:14] <Woodi> there is ncurses in parrot, can i use it in rakudo ?

[14:15] <Wolfman2000> I forgot if mysql databases can have numbers in them. p6paste for the database, use jafelds for login. password...guess I set that.

[14:15] <Wolfman2000> Key thing about the database: MUST BE UTF-8

[14:15] <Wolfman2000> I recall postgresql really prefers the encoding set when the database is made.

[14:16] <Wolfman2000> I don't recall if mysql is similar.

[14:16] <dalek> book: 5db9456 | moritz++ | src/grammars.pod:

[14:16] <dalek> book: [grammars] describe more of the action methods, and add some RAKUDO comments

[14:16] <dalek> book: review: http://github.com/perl6/book/commit/5db9456924fafe51ba777816a4555d5f99405c73

[14:17] <Juerd> Wolfman2000: Databases don't have encodings, tables do. You're creating the tables yourself :)

[14:17] <Wolfman2000> Juerd: Right, mysql difference. I admit I'm more of a fan of postgresql, but I can adapt.

[14:18] *** payload joined
[14:24] *** icwiener joined
[14:24] <Wolfman2000> Note to self: careful when you use your own CPAN. You get to see all of the packages installed.

[14:29] *** _eMaX_1 joined
[14:29] *** _eMaX_ left
[14:39] *** colomon joined
[14:39] <colomon> rakudo: say 1.0.Str.Str;

[14:39] <p6eval> rakudo 97ced1: 1␤

[14:40] <Wolfman2000> ...what's 1.0 supposed to be?

[14:40] <Wolfman2000> rakudo: say 1.0;

[14:40] <p6eval> rakudo 97ced1: 1␤

[14:40] <Wolfman2000> ...right, a number

[14:40] <moritz_> rakudo: say 1.0 * 2.0

[14:40] <p6eval> rakudo 97ced1: 2␤

[14:40] <colomon> 1.0 is supposed to be a Num.  

[14:40] <Wolfman2000> So a num to a String prints the integer string

[14:40] <pmichaud> actually, a Rat

[14:40] <Wolfman2000> ...but wait. It's actually printing...the number.

[14:40] <Wolfman2000> And not a hex code

[14:41] *** masak joined
[14:41] <colomon> rakudo: say 1.0.Str.Str.WHAT

[14:41] <p6eval> rakudo 97ced1: Str()␤

[14:41] <colomon> It's printing the string "1"

[14:42] <Wolfman2000> colomon++: you fixed it!

[14:42] <colomon> Wolfman2000: It was very, very easy.  :)

[14:43] <Wolfman2000> Well, how soon will it show up in the master branch?

[14:43] <masak> Wolfman2000: I'm finally putting together the clues: you're building a pastebin in Perl 6.

[14:43] <masak> Wolfman2000: incidentally, that's something Tene++ and I have been toying with a bit.

[14:43] <Wolfman2000> masak: That's...not exactly how it ended up.

[14:43] <colomon> Wolfman2000: I was just checking to see if the fix was incorporated in p6eval yet.

[14:43] <masak> Wolfman2000: no? how did it end up?

[14:44] <moritz_> colomon: what fix?

[14:44] <moritz_> not saying OUTPUT every time?

[14:44] <Wolfman2000> masak: I wanted to transform one of my own websites to Perl 6. However, it was agreed by the people in here that we should have our own pastebin. We'll build it in Perl 5 first, and then when Web.pm is more stable, we transfer it into Perl 6.

[14:44] <colomon> moritz_: Str.Str exists and works now.

[14:44] <moritz_> oh, I thought it was a fix to p6eval itself ;-)

[14:44] <Woodi> masak: can you tell me how to use proto with parrot/rakudo installed system-wide ?

[14:44] <masak> Wolfman2000: that sounds like an excellent plan.

[14:45] <masak> Woodi: I'm not 100% sure proto handles that.

[14:45] <colomon> moritz_: There's still one really funky test existing test to sort out.

[14:45] <masak> Woodi: proto needs a lot of love right now. but most of it is spent on the new branch, installed-modules.

[14:45] <Woodi> ok, thanx

[14:45] <colomon> moritz_: http://paste.lisp.org/display/89966

[14:46] <Wolfman2000> masak: glad you approve. I already have a database set up with one table on feather until we're ready for the big move off

[14:46] <Woodi> masak: i am probably to stupid to uncipher how it work...

[14:46] <colomon> moritz_: The test violates the LSP, but should probably still work, I reckon.

[14:46] <masak> Wolfman2000: we're currently in the paradoxical situation wherein Perl 6 syntax highlighting is done most easily in Perl 5.

[14:47] <colomon> masak: Will that change when ng lands?

[14:47] <Wolfman2000> masak: So I've heard. Unfortunately, I'm not...too familiar with Perl 6 syntax highlighting. I'm hoping there is a CPAN library for that.

[14:47] <masak> Woodi: no, that's not a great way to approach a problem. :) you should use curiosity, not feelings of unworthiness. :)

[14:47] <masak> colomon: perhaps.

[14:48] <masak> Wolfman2000: well, you should definitely speak to azawawi about it.

[14:48] <Woodi> yea, positive thinking is better than self-destruction :)

[14:48] <colomon> wasn't there a perl 6 syntax highlighting module on CPAN?  (In perl 5, of course.) 

[14:49] <Wolfman2000> colomon: that's what I asked. If there as

[14:49] <Wolfman2000> was*

[14:49] <masak> colomon: there certainly is one for Padre.

[14:49] <moritz_> colomon: uhm, I don't think that test is valid

[14:49] <Wolfman2000> masak: Unfortunately, I borked my local Perl enough so that I can't run Padre.

[14:49] <moritz_> colomon: since it's already a Str, there's no need why stringification should have to call .Str on it

[14:49] <Wolfman2000> And I'm not in a position to wipe everything off the computer and start again.

[14:49] <colomon> masak: There was a blog post six months ago describing ripping the padre highlighting out into a module.

[14:49] <masak> Wolfman2000: sorry, can't help you there. :)

[14:50] <masak> colomon: URL?

[14:50] <colomon> moritz_: ????  That was the entire point of writing Str.Str -- you should be able to call .Str on a Str, for sure.

[14:51] <colomon> masak: no idea, that was an ironman post from the first half of the year, I think.

[14:51] <moritz_> colomon: sorry, I misread the test

[14:52] <szabgab> try looking for the blog post here http://padre.perlide.org/about.html

[14:52] <moritz_> I thought you were using ~$thing instead of $thing.Str

[14:52] <masak> here's the module, anyway: http://cpan.uwinnipeg.ca/dist/Syntax-Highlight-Perl6

[14:53] <colomon> masak++

[14:53] <Wolfman2000> I won't give the ++ yet until I see how the HTML output format.

[14:53] <masak> well, azawawi++, surely.

[14:53] <Wolfman2000> As a web developer, I do care about the output.

[14:53] <masak> ah! an idealist! :)

[14:54] <colomon> Wolfman2000: I doubt it has HTML output yet....

[14:54] <Wolfman2000> Syntax-Highlight-Perl6? It does.

[14:54] <moritz_> it has

[14:55] <colomon> it does!  crazy.

[14:55] <colomon> I thought it was supposed to plug into VIM or something like that.

[14:55] <Wolfman2000> colomon: I think that may be an option too.

[14:55] <Wolfman2000> The point is...we've got possibilities.

[14:55] <Wolfman2000> Granted, modifications will need to be done, but...we can probably yank out the needed text.

[14:57] <moritz_> colomon: that's what Text::VimColor does

[14:57] <Wolfman2000> Basically, we can use a modification of Syntax::Highlight::Perl6->simple_html. If we can overload it and then just rip out the code itself, even better.

[14:57] <moritz_> colomon: which is what I use for my websites

[14:58] <colomon> ah.

[14:59] * Wolfman2000 enjoys being able to use CPAN without worrying about permissions issues.

[14:59] <Wolfman2000> Alright, I have Syntax-Highlight-Perl6 installed via CPAN.

[14:59] <Wolfman2000> I know Catalyst is also installed, so I can soon use the custom apache I have.

[15:00] *** Whiteknight left
[15:00] <Juerd> automysqlbackup++ debian++

[15:00] <Juerd> # apt-get install automysqlbackup  # no config, works well out of the box.

[15:01] *** Whiteknight joined
[15:01] <Juerd> It simply makes daily db dumps and puts them in /var/lib/automysqlbackup

[15:01] <Juerd> Keeping weeklies and monthlies too.

[15:03] <Wolfman2000> Juerd++ masak++ good.

[15:04] * masak is currently blogging about the midnight "Perl 6 isn't Perl" discussion

[15:04] <Wolfman2000> which one is this?

[15:05] <colomon> moritz_: On the http://paste.lisp.org/display/89966 failure, I've just added debugging says, and it is the RT69378str.Str that is being called.

[15:05] <masak> Wolfman2000: http://irclog.perlgeek.de/perl6/2009-11-07#i_1699890

[15:05] <Wolfman2000> ...and of course the log ends with me being silly.

[15:06] <masak> I find it comforting to see that emma still lurks on this channel, but is no longer in #perl. :)

[15:07] <masak> that makes me hypothesise that we came off as the saner crowd.

[15:07] <Wolfman2000> Umm...guys? How do we install STD for Perl 5? I can't just install STD on CPAN

[15:07] <moritz_> 4

[15:07] <masak> Wolfman2000: most of us just build it ourselves.

[15:07] <masak> Wolfman2000: it's in the Pugs repo.

[15:08] <Wolfman2000> masak: Well, while you're here...what is $PAGER supposed to be?

[15:08] <masak> moritz_: 4? is that your final answer?

[15:08] <Wolfman2000> I didn't understand that environment variable

[15:08] <masak> Wolfman2000: something like 'less'.

[15:08] <masak> Wolfman2000: i.e. a program that serves you text page-wise.

[15:09] <Wolfman2000> ...are we supposed to build via traditional means or Cabal?

[15:10] <masak> Wolfman2000: you don't need to isntall Pugs.

[15:10] <masak> it's just in the same repo.

[15:10] *** Whiteknight left
[15:10] <Wolfman2000> masak: may as well

[15:10] <Wolfman2000> ...or I would, if it worked.

[15:11] <lisppaste3> wolfman2000 pasted "Umm..." at http://paste.lisp.org/display/89985

[15:11] <masak> Wolfman2000: Pugs has nothing to do with STD.pm, besides being hosted in the same repo.

[15:12] <masak> Wolfman2000: I'm not one to decide where you spend your time, but if it's STD.pm you're after...

[15:12] <Wolfman2000> masak: I will require STD.pm for Syntax::Highlight::Perl6

[15:12] *** lichtkind left
[15:12] <masak> Wolfman2000: yes.

[15:13] <masak> Wolfman2000: but for that, you don't require Pugs.

[15:13] <masak> just the repo. I know that's a bit confusing. sorry :/

[15:13] <Wolfman2000> Slightly.

[15:13] <masak> it's an accident of gistory.

[15:13] <masak> s/g/h/

[15:14] <Wolfman2000> masak: pugs/src/perl6/STD.pm?

[15:14] <masak> that's the one.

[15:14] <masak> there's a README with build instructions, if memory serves me.

[15:14] <Wolfman2000> I'll expand PERL5LIB then

[15:14] <Wolfman2000> ...oh, can't use just yet?

[15:16] <Wolfman2000> /bin/sh: ./gimme5: /usr/local/bin/perl: bad interpreter: No such file or directory <-- :(

[15:17] <masak> Wolfman2000: where do you keep Perl 5.10?

[15:17] <Wolfman2000> masak: I don't believe I custom built Perl 5.10 on Feather

[15:17] <Juerd> feather has 5.10.1 as the main perl

[15:17] <Wolfman2000> ...I'm using the default perl, located on /usr/bin/perl

[15:18] <Wolfman2000> ah: gimme5 has the shebang set to /usr/local/bin/perl

[15:18] <Wolfman2000> I wonder if that's intentional.

[15:19] * Wolfman2000 gets to making now

[15:19] <Juerd> Hm, let's re-symlink that

[15:19] *** s1n joined
[15:19] <Wolfman2000> Tell me when please: there are probably too many places I'd ahve to change the path.

[15:19] <Juerd> That used to be a separate from-source install of Perl 5.10, when Debian still clinged to 5.8

[15:20] <Juerd> Wolfman2000: Done

[15:20] <Wolfman2000> Yay for finding bugs...I think.

[15:21] <Wolfman2000> If nothing else, this whole experience will be a resume builder.

[15:21] <Wolfman2000> Not every day one gets to say they helped with the next great language.

[15:22] <Wolfman2000> masak: make finished. there is no rule for make install. Is it safe to use STD.pm now, and will I still have to adjust PERL5LIB to point to the pugs directory?

[15:23] <masak> Wolfman2000: it's safe to use STD.pm now.

[15:23] *** Psyche^ joined
[15:23] <masak> Wolfman2000: I suggest you try it out in that directory until you feel comfortable with what it does. but after that, setting PERL5LIB should be enough.

[15:24] <Wolfman2000> Juerd++, masak++: works without a problem.

[15:26] *** Whiteknight joined
[15:26] <masak> does #perl have logs?

[15:28] <Wolfman2000> ...I just realized. simple_html automatically generates <link href="p6_style.css" rel="stylesheet" type="text/css">. I don't know if such a file already exists.

[15:29] <Wolfman2000> ...and it does. azawawi++, thank you for already making said file.

[15:30] *** Patterner left
[15:30] *** Psyche^ is now known as Patterner

[15:30] <pmichaud> phenny: tell jnthn  I think that creation of Code/Block/Routine/Sub/Method wrappers needs to happen at compile (BEGIN) time instead of at runtime.

[15:30] <phenny> pmichaud: I'll pass that on when jnthn is around.

[15:31] <Wolfman2000> Juerd++: Thanks for perhaps the one advantage of having everyone able to view each other's directories.

[15:32] <diakopter> masak: for brains, yeah

[15:32] <Juerd> Wolfman2000: Actually not my idea but I forgot who convinced me.

[15:32] <Wolfman2000> brb for quick breakfast...then, the Catalyst begins.

[15:34] <masak> diakopter: I will attempt to frequent #perl more in the future. I want to be part of Perl 6 discussions when they happen there.

[15:35] <diakopter> heh

[15:36] <colomon> what you need is a bot that notifies you when perl 6 discussions are started there....   ;)

[15:37] <diakopter> throw ilbot at it...

[15:37] <pugs_svn> r29024 | colomon++ | [t/spec] Add a new test which highlights why one of the existing tests fails. 

[15:37] <diakopter> masak: you're a firefox addict, right?  use ReloadEvery and GreaseMonkey to get notified...

[15:38] <Juerd> colomon: Why not just a highlight? :)

[15:38] <Juerd> I've had a highlight on "unicode" and "utf-?8" for a long time.

[15:39] <Juerd> Just to jump into discussions on several #perl's

[15:39] <masak> diakopter: hm, sounds interesting. will investigate.

[15:40] <masak> Juerd: ah, so that's how to clandestinely summon you... :P

[15:40] <diakopter> masak: I mean, once moritz_ throws ilbot at it

[15:40] <Juerd> masak: I have a highlight on feather too.

[15:40] <Juerd> I've removed the one on UTF-8 by the way

[15:40] *** diakopter sets mode: +oooo masak Juerd colomon Wolfman2000

[15:40] <Juerd> It was triggered too often by Google URLs.

[15:40] <huf> most of the perl6 discussion on #perl is along the lines of "you abandoned us you bastards!" ;)

[15:41] <masak> huf: really?

[15:41] <huf> that was my impression

[15:41] <huf> some people think it's bloody stupid but they can at least mine it for ideas in "the real perl"

[15:41] <huf> lots of them cant deal with the fact that it's a long time coming

[15:42] <huf> which is a strange reason to hate perl6, but meh

[15:42] <Juerd> People who love Perl 6 usually keep quiet, is my experience.

[15:42] <masak> huf: I know mst's stance on it, and I respect that.

[15:42] <diakopter> Wolfman2000: for highlighting of Perl 6 code, STD has a script for it, but it may be a bit bitrotted

[15:42] <colomon> Juerd: because I had no idea you could set a highlight like that.  sweet!

[15:42] <pmichaud> I think for many people it's like a jilted lover, or a promise unkept

[15:42] <masak> huf: he doesn't think it'll make any large impact ever, but that Perl 5 will soak up the good parts and move on.

[15:42] <huf> yeah

[15:43] <Juerd> colomon: If you use irssi, I recommend -word -color %Y -actcolor %Y

[15:43] <Juerd> Or some other color, but include -word so the actual match is highlighted rather than the name of the person who said it.

[15:43] <masak> if someone wants to read and comment on my blog post about "Perl 6 is not Perl", here it is: http://gist.github.com/raw/229327/7d58b2cd1fc353a26d452cecaee87ea7848f6916/blog%20post%20draft

[15:43] <Juerd> Makes finding the highlights much easier

[15:43] <pmichaud> many people expected Perl 6 to be available in just a year or two, and that was a reasonable expectation given the things being said about it at the time

[15:43] <diakopter> .. prophecy unfulfilled

[15:44] <Juerd> http://juerd.nl/i/b454ff6aaf3aeb462e68f32c75ee1485.png  # example of a highlight on "feather"

[15:44] <s1n> i've heard a handful of comments to the effect that people think perl6 is fun thought experiment of features that might be useful to Perl (not perl5 or perl6, because perl6 doesn't exist)

[15:44] <pmichaud> when it didn't appear, and then took longer and longer... well, people get tired of having their hopes dashed.  :)

[15:44] <pmichaud> s1n: yes, many people who started to be opposed to perl6 begain calling it a "research project" as opposed to a real project with real deliverables

[15:44] <huf> that's why you dont put much hope in something that's not here yet. you just wait and see.

[15:44] <pmichaud> *began

[15:45] <s1n> that is not the open source mentality

[15:45] <s1n> if you want it, help make it so

[15:45] <Juerd> masak: http://gist.github.com/raw/229327/7d58b2cd1fc353a26d452cecaee87ea7848f6916/blog%20post%20draft is formatted in a terrible way :)

[15:45] <masak> Juerd: yeah, sorry about that. :/

[15:45] <huf> true, i'm just saying that because i dont understand how perl6 (wether it ever gets done or not) hurts perl5

[15:45] <huf> and yet that's the impression i get from a lot of people

[15:46] <pmichaud> huf: some people think that the focus on perl 6 stole resources from perl 5

[15:46] <huf> that somehow the existence of perl6 in its current state is harmful

[15:46] <s1n> perl6 doesn't, impatient devs who don't want to help with perl6 hurts

[15:46] <huf> pmichaud: so that's why perl5 development seems to have speeded up in the recent past?

[15:46] <pmichaud> huf: i.e., that people who were working on perl6 would be working on perl5 instead

[15:46] <pmichaud> huf: I'm not saying those people are right... I'm just saying why they think that

[15:46] <huf> ah ;)

[15:47] <huf> well yeah, that's the bit i *really* dont get. like it? help or at least shutup. dont like it? it doesnt hurt you so shutup. :D

[15:47] <pmichaud> huf:  many things have been (are being) said about perl6 that are at quite a distance from reality

[15:47] <Juerd> masak: At the amsterdam.pm meetings most people say that Perl 6 isn't Perl, but they don't mind presentations about Perl 6, so they can't be THAT convinced.

[15:47] <Wolfman2000> ...I'm soon going to have to do port forwarding for this one

[15:47] <jaffa8> is there profiling for perl 6?

[15:47] <s1n> huf: keep in mind the people who think perl6 is stealing resources have flatly refused to join the community

[15:47] <masak> hm. maybe I should add a paragraph about why it's the right time to be excited about Perl 6.

[15:48] <Juerd> masak: My opinion is still that using the name Perl with a version number is a bad idea for something that isn't just an incremental update. It is confusing.

[15:48] <masak> jaffa8: there are things in the works for Parrot, yes.

[15:48] <jaffa8> "in the works"

[15:48] <Wolfman2000> Juerd: Not all of the needed catalyst stuff was installed. I'm taking care of that on my own CPAN now.

[15:48] <masak> Juerd: yes, but that's what I'd call a "balanced view".

[15:48] <jaffa8> masak, what is that?

[15:48] *** NorwayGeek left
[15:48] <masak> jaffa8: "in progress". I don't know much more about it. people on #parrot might.

[15:49] *** NorwayGeek joined
[15:49] <Juerd> masak: Perl 6 really isn't what I had always thought Perl to be.

[15:49] <emma> In the book Im reading to learn perl it mentions a project called Topaz, is this really Topaz?

[15:49] <masak> Juerd: oh?

[15:49] <s1n> in the end, it won't matter, perl5 is not a way forward, the people who are currently hostile towards perl6 will have a difficult choice in the future, like it or not

[15:49] <jaffa8> Juerd, that is like life.

[15:49] <huf> it's rather perlish still, so i kinda get why it's called perl6 ;)

[15:49] <diakopter> emma: I think Topaz was Perl compiler/vm in C++

[15:50] <s1n> diakopter: it was just an attempt to rewrite the guts in c++

[15:50] <masak> emma: Topaz got stalled around 2000-2001.

[15:50] <s1n> it was still ugly c++

[15:50] <Wolfman2000> Juerd: Even with my changes to the CPAN libs, two packages didn't install. I need File::ChangeNotify and MooseX::SemiAffordanceAccessor installed please.

[15:50] <Juerd> masak: To me, "Perl" is Perl 1..5 and "Perl 6" is Perl 6.

[15:50] <huf> isnt that the intention tho?

[15:50] <markmont> masak: add link to perl 6 faq to remind people, and maybe the anti-FUD page at http://www.perlfoundation.org/perl6/index.cgi?fud   ?

[15:50] <Juerd> masak: But I'd prefer Perl 6 to have a different name instead.

[15:51] <emma> what if the people who make perl want to make a new edition of their perl? What will they have to call it now?

[15:51] <masak> Juerd: yes, but explain what you mean by 'what I had always thought Perl to be'.

[15:51] <masak> markmont: good idea.

[15:51] <Juerd> markmont: There are also my old talks "Perl 6 Myths" and the "Perl 6 fears" project.

[15:51] <s1n> Juerd: why? Perl is what larry defines it to be, period

[15:51] <colomon> jaffa8: there is a parrot profiler that works now, search the #perl6 backlogs (gotta run, alas)

[15:51] <pmichaud> (parrot profiler)   for some values of "works"

[15:51] <Juerd> s1n: Yes, that is reality. However, thoughts don't always match reality :)

[15:51] <s1n> then realign your thoughts to reality

[15:52] <emma> They might jump ahead of you guys and call theirs Perl 7, so that now you are stuck with Perl 8.  I think maybe you guys should be Perl (2n)  and they could be Perl (2n-1)  where n is an integer.

[15:52] <s1n> i think it should be Perl and Perl5

[15:52] <s1n> i.e. future Perl, dead Perl

[15:52] <huf> emma: they are free to call the next version Perl 6.0 ;) wont affect Perl6 1.0 in any way :)

[15:53] <Juerd> Oh

[15:53] <Juerd> It appears the Perl6::Doc::FUD document is based on the fears project.

[15:53] <huf> btw have you decided to call it Perl 6.0 or Perl6 1.0 yet? :)

[15:53] <pmichaud> .oO( I wonder when Linux kernel version 3 will come out. )

[15:53] <Juerd> Perl6::FAQ::FUD,sorry.

[15:53] <s1n> huf: it will be Perl :)

[15:53] <emma> If they wanted to sort of give you a taste of your own medicine they might call theirs Perl6 1.0 2

[15:53] <huf> ;)

[15:53] <s1n> emma: that sort of thing is childish and a huge waste of effort

[15:53] <huf> emma: you still seem to be under the impression that there's a problem somewhere

[15:54] <pmichaud> I think I would say it this way

[15:54] <masak> emma: one important aspect of this, I think, is that Larry Wall, the author of Perl 1..5, is very much involved in Perl 6 development.

[15:54] <pmichaud> there's a portion of the perl community that believes that Perl 6 represents an abandonment and "fork" of Perl

[15:54] <pmichaud> in reality,  Perl 6 is the mainline development.

[15:55] <Juerd> I wrote parts of that document but wasn't included in the README :/

[15:55] <masak> emma: I have the feeling that those who actually understand what it is we do also have some amount of understanding for it.

[15:55] <emma> huf:  i've seen people in both channels feeling like there's a problem. To me it is worrisome. I think schisms are bad news. I mean bad news for everyone who likes perl of any kind. You should all have a lot of forboding. It's not good when a community starts talking about itself more than anything else. It is a prelude to the end, if people don't restore harmony.

[15:55] <s1n> pmichaud: yeah, i explained that to mst before and he laughed

[15:55] <pmichaud> it may take a very long time for us to see that Perl 6 is the mainline, but ultimately that's the case.

[15:55] <s1n> i told him there is Perl and Perl5 and he sorta refused to accept that

[15:55] <pmichaud> s1n: mst is actually quite reasonable here, from his perspective

[15:55] <masak> emma: that's why I'm writing that post. did you read it?

[15:55] <markmont> I wonder if people felt the same way about FORTRAN {90,85,2003} being an abandonment or fork of FOTRAN 77?  There were similar sized changes to what Perl 6 is making, starting with free-form source input (no more character columns!)

[15:56] <pmichaud> if someone believes that Perl 6 is an evolutionary dead end, then they'd be perfectly correct that Perl 6 is a branch and that Perl 5 represents the mainline

[15:56] <huf> i dont see why all members of a community should believe the same thing

[15:56] <jaffa8> perl 6 is a step ahead concerning functionality

[15:56] <huf> and this is especially true for the Perl community :)

[15:56] <masak> markmont: I'm not sure FORTRAN ever had the same flavor of community as does Perl.

[15:56] <pmichaud> huf: precisely, we don't all need to believe the same thing

[15:56] <huf> ;)

[15:56] <s1n> in the end, none of it matters, Perl v6 is great, if you prefer v5 don't upgrade

[15:57] <emma> If you are all not careful about what you are doing, the worst of all possible outcomes will happen -- People will no longer consider perl 5 relevant, and people will not feel compelled to bother with perl 6 since there are many other options and nothing is written in perl 6.  All of this could mark the end of perl history.

[15:57] <s1n> just like python3000, it's great, needs work, and is the future

[15:57] <huf> 5 will be around for at least a decade so... it's not yet time to decide anything

[15:57] <huf> emma: ask around. most people already consider perl to be a number of stupid fud arguments. one more wont change a thing

[15:57] <markmont> masak: very true

[15:57] *** am0c left
[15:57] <emma> The reason that bothers me is that I'm reading a book to learn perl so I don't want to finish it just at the end of perl history.

[15:57] <s1n> emma: alas, all of cpan will work under perl v6

[15:58] <Wolfman2000> ...and I'm an idiot. I need a way to kill a socket I made

[15:58] <pmichaud> emma: I wholeheartedly disagree.  People who say that Perl 6 has foreclosed development of Perl 5 just need to broaden their thinking a slight bit

[15:58] <masak> emma: Perl 5 will be relevant for years to come.

[15:58] <pmichaud> If the perl 5 developers wanted to start a new version of perl, they could certainly come up with all sorts of names besides "Perl 6" or "Perl 7"

[15:59] <masak> emma: but Perl 6 will increasingly gain mindshare too.

[15:59] <pmichaud> there are many ways to denote projects besides integers.

[15:59] <Wolfman2000> Does anyone know if there is a way to kill processes based on the name of the process ran? I need to kill script/p6paste_server.pl

[15:59] <huf> killall?

[15:59] <s1n> Wolfman2000: in unix, killall

[15:59] <emma> Yes perhaps it will. But it's a very bold thing you are trying to do. And a pyrrhic victory for perl 6 will still be the de facto end of Perl.

[15:59] <huf> or pkill or what was that one that can do regex matching

[15:59] <Wolfman2000> no process found. :(

[15:59] <pmichaud> emma: we disagree on that point, but that's fine.  :)

[16:00] <Wolfman2000> Couldn't create daemon: IO::Socket::INET: Address already in use at /usr/share/perl5/Catalyst/Engine/HTTP.pm line 211.  <-- I forgot to close this before I temporarily disconnected from feather.

[16:00] <emma> Something must have gone really wrong. This isn't a normal way to advance a language. 

[16:00] <s1n> emma: it will _not_ end Perl, it will continue Perl

[16:00] <pmichaud> emma: we're willing to let history tell the tail.  At the time that Perl 6 was being designed, it was widely agreed that Perl 5 was going to die anyway.

[16:00] <emma> I'm saying a pyrrhic victory I might not be spelling that correctly though.

[16:00] <pmichaud> or at least that Perl 5 was on the decline

[16:00] <pmichaud> there's a very good argument to be made that Perl 6 actually freed Perl 5 to continue developing

[16:00] <huf> one good thing that came out of perl6 is a lot of activity to save perl5

[16:01] <s1n> keep in mind, perl5 was mostly on a downward slide to death until perl6 and all that moose stuff was added to revive perl5

[16:01] <Woodi> Wolfman2000: port you use is still in use by os. try use other port for now

[16:02] <markmont> emma: I'd rather focus on what I can do with a tool than what it is called.  "victory" is getting useful stuff done, and Perl 6 is shaping up to be *very* useful for things that are difficult in Perl 5.

[16:02] <Wolfman2000> Woodi: I'm trying to free the port

[16:02] <Woodi> Wolfman2000: and there is option to socket crating which prevents this behaviour...

[16:02] <Wolfman2000> okay, I got it.

[16:02] <Wolfman2000> Juerd++: thanks for htop

[16:02] <pmichaud> more to the point, even though many in the Perl community envision some sort of ongoing battle between perl 5 and perl 6, the people focused on perl 6 don't view it that way.

[16:03] <pmichaud> I'm going to disappear for a while to think about modules.  :)

[16:03] <pmichaud> afk

[16:03] <Wolfman2000> hooray port forwarding!

[16:08] *** rgrau`` is now known as kidd`

[16:08] * Juerd emailed lichtkind about acknowledging contributors to the FUD page (originally: pugs/docs/quickref/fears)

[16:12] <zaslon> lolmasakhazblogged! masak++ 'The "Perl 6 is not Perl" meme': http://use.perl.org/~masak/journal/39861?from=rss

[16:13] <Wolfman2000> ...isn't zaslon another bot?

[16:14] *** diakopter sets mode: +v zaslon

[16:15] <Wolfman2000> diakopter: Thanks for confirming.

[16:15] <diakopter> Wolfman2000: did you see what I said about std syntax highlighting Perl 6

[16:15] <Wolfman2000> outdated

[16:15] *** [particle] joined
[16:15] <diakopter> outdated?

[16:15] <Wolfman2000> At least, if that's what bitrotting means

[16:16] <diakopter> I said it _may_ be a bit bitrotted... but only the presentation mechanics

[16:16] <diakopter> the Perl 6 syntax is obviously definitive/latest.

[16:16] <Wolfman2000> That, I can't argue with.

[16:17] *** astrojp joined
[16:17] <masak> ah. it was the freenode #perl that insisted that Perl 6 isn't Perl, not the perl.org #perl.

[16:18] <Wolfman2000> masak: ...what?

[16:18] <diakopter> s1n: a publicity/marketing death, perhaps

[16:18] <masak> for some reason I assumed the latter.

[16:18] <Wolfman2000> Freenode's #perl hates Perl 6?

[16:18] <Wolfman2000> ...why am I in there right now?

[16:18] <masak> Wolfman2000: there are several #perl channels.

[16:19] <masak> Wolfman2000: I don't know what they said. maybe I never will, because there are no public logs.

[16:19] *** nihiliad joined
[16:22] *** am0c joined
[16:25] * masak is now under heavy fire in #perl on irc.perl.org :)

[16:27] * diakopter goes to watch the fireworks

[16:27] *** IllvilJa left
[16:29] *** _eMaX_ joined
[16:30] <Woodi> rakudo: say %*VM<config><build_dir>;

[16:30] <p6eval> rakudo 97ced1: /home/p6eval/rakudo/parrot␤

[16:31] *** _eMaX_1 left
[16:32] <diakopter> what a joke... an intelligent discussion cannot be had at that message arrival rate

[16:33] <masak> diakopter: it's tiring... :/

[16:34] <diakopter> if only people would respect each other's comments enough to slow down about 5x

[16:34] <masak> thank you s1n and Juerd for contributing.

[16:35] <diakopter> otherwise it just becomes a war of who can type the fastest

[16:35] * masak exhales

[16:35] <masak> it slowed down somewhat now. :)

[16:35] <s1n> np, this perl5 forever crap is really irritating

[16:35] <diakopter> I suspect that's tongue-in-cheek

[16:35] <Woodi> do http-daemon works only with rakudo configured with --gen-parrot

[16:36] <Wolfman2000> rakudo: say time();

[16:36] <p6eval> rakudo 97ced1: 1257697683.48797␤

[16:36] <Wolfman2000> ...how exactly do we format time to a traditional YYYY-MM-DD format anyway?

[16:37] <BinGOs> if it was perl5 I'd suggest POSIX::strftime

[16:38] <Wolfman2000> ...unfortunately, I'm making a Perl 6 pastebin in Perl 5. :/

[16:38] <masak> http-daemon works regardless of the way you configure rakudo/parrot.

[16:38] <jnthn> Woodi: --gen-parrot just makes sure you're building a revision of Parrot that Rakudo is known to work with, and then builds Rakudo against that. 

[16:38] <phenny> jnthn: 05:23Z <quietfanatic> tell jnthn Unfortunately it looks like overloading trait_mod:<is> doesn't make a versatile subclassing hook, because the left argument given to it is an unnamed and uninitialized ClassHOW object.

[16:38] <phenny> jnthn: 15:30Z <pmichaud> tell jnthn  I think that creation of Code/Block/Routine/Sub/Method wrappers needs to happen at compile (BEGIN) time instead of at runtime.

[16:38] <BinGOs> Oh great another pastebin

[16:38] <Wolfman2000> BinGOs: the one we use right now is suboptimal.

[16:39] <BinGOs> and that is /

[16:39] <BinGOs> ?

[16:39] <Wolfman2000> ...we can do better.

[16:39] <Woodi> jnthn: i have p/r build and installed atm.

[16:39] <BinGOs> I meant which one do you use now ?

[16:39] <jnthn> pmichaud: Most probably, yes.

[16:39] <Wolfman2000> BinGOs: the topic is what's used now. It does't support Perl 6 or a concept of registered users.

[16:40] <Wolfman2000> We're going to fix that.

[16:40] <jnthn> pmichaud: Now you've fixed BEGIN maybe that'll be easier.

[16:40] <jnthn> pmichaud: If you want to just go ahead and put it in how you think it should be, I've no objections whatsoever.

[16:41] <BinGOs> o.O CAPTCHA

[16:41] <Wolfman2000> BinGOs: that can be looked into.

[16:42] <BinGOs> Nice idea, I must add it to Bot-Pastebot

[16:42] <jnthn> quietfanatic: Things may work out better in the ng branch, when trait_mod:<is> really will just be a call on the metaclass. I'm not sure why it wouldn't work now though...

[16:42] <jnthn> quietfanatic: I meant, will jsut do a call on...

[16:43] *** carlin__ joined
[16:43] *** envi^home left
[16:43] <jnthn> quietfanatic: Thing is, since we do things in declarative order, in class Foo is Bar { has $!x; method wob { } } you'll be having the trait_mod called before the attr and method are known about by the metaclass.

[16:44] <jnthn> Anyway, we may need a better hooker for these kindsa things.

[16:45] *** carlin__ left
[16:45] <jnthn> masak++ # blogging and trying to improve 5-6 community relations

[16:46] <masak> jnthn: I'm quickly losing hope, though.

[16:46] <masak> jnthn: the people over at #perl (irc.perl.org) are, for lack of a better word, thick.

[16:46] <huf> they're being deliberately thick

[16:46] <huf> because you've somehow hurt their feelings ;)

[16:47] <Wolfman2000> masak: Reminder needed. Larry...Wall I believe, was the creater of Perl. He's also going for Perl 6. Am I right so far?

[16:47] <huf> resolving this is about as easy as resolving the "perl is linenoise lol" misconceptions ;)

[16:47] <masak> Wolfman2000: yes.

[16:47] *** meppel left
[16:48] <Wolfman2000> ...then why does it sound like everyone is going against the owner?

[16:48] <s1n> i can't seem to get across to aperion

[16:48] <masak> Wolfman2000: they don't believe in the effort.

[16:48] <s1n> he has seriously flawed logic that he refuses to accept as flawed

[16:49] <Woodi> Wolfman2000: language syntax CHANGED, what was working will not work now (without tricks)

[16:49] <masak> s1n: outside of #perl6, people don't always run on 'logic' :)

[16:49] <s1n> aparently not

[16:49] <s1n> he seems incapable of reasoning

[16:50] <Wolfman2000> ...and mysql knows how to be annoying at times.

[16:51] <Wolfman2000> | Warning | 1628 | Comment for table 'groups' is too long (max = 60) | <-- how come that's never talked about?

[16:51] <jnthn> No...surely...you can have a comment for a table longer than 60 chars?!

[16:51] <jnthn> Ouch!

[16:51] *** carlin__ joined
[16:52] <Woodi> s1n: sometimes pure-practical point of view is very strong point

[16:53] <s1n> Woodi: few people in there did a "use logic" this morning

[16:53] <pmichaud> back again

[16:53] <Woodi> s1n: try to talk with management ppls about making investment in new hardware :)

[16:53] <jnthn> yayitspm!

[16:53] <pmichaud> jnthn: I haven't quite figured out all of the pieces to Code yet

[16:54] <jnthn> pmichaud: Me either. :-)

[16:54] <s1n> Woodi: i do all the time, just upgraded several hundreds of thousands of development machines :)

[16:54] <pmichaud> actually, the biggest thing I think we can use at this point is traits on subs (particularly "is export")

[16:54] <jnthn> pmichaud: The blocker for trait mods now is afaik solely "our" routines.

[16:55] <pmichaud> hmmm

[16:55] <jnthn> Well, our multis.

[16:55] <pmichaud> not sure why that's a blocker

[16:55] <markmont> If anyone wants to give feedback before I submit (email) it, I have a patch up that makes $! contextual as jnthn++ suggested.  It also fixes the order in which find_contextual searches packages, per S02/Names.   http://github.com/markmont/rakudo/commit/8f4d65f38d8480f76aba1ab44d9849edd61c5cc8

[16:55] <Woodi> s1n: ask now for more :) in some environment you will not get new hw until loadaverage will be visible for external users

[16:55] <Woodi> pure practical objections...

[16:56] <jnthn> pmichaud: How so?

[16:56] *** carlin__ left
[16:56] <pmichaud> markmont: that kinda doesn't look right to me

[16:56] <pmichaud> $! is a lexica

[16:56] <jnthn> pmichaud: By blocker I don't mean "insurmountable task", just "thing that hasn't been done yet that needs doing" :-)

[16:56] <pmichaud> $1 is a lexical

[16:56] <pmichaud> er

[16:56] <pmichaud> $! is a lexical

[16:56] <jnthn> Third time's a charm.

[16:57] <Wolfman2000> okay, I have a database dump file on my feather home if anyone wants it.

[16:57] <Juerd> I'm sorry to inform you that Perl 6 is dead.

[16:57] <jnthn> pmichaud: $! is a lexical but also "is context".

[16:57] <Juerd> Stop working on it!

[16:57] <jnthn> Juerd: omg nooooo! 

[16:57] <Juerd> Really, it's dead. #perl on magnet says so.

[16:57] <pmichaud> jnthn: contextuals are just lexicals with a * twigil

[16:57] <pmichaud> there's no special "store_contextual" required, afaik

[16:57] <Juerd> You, my friends, are working on a dead language.

[16:57] <jnthn> pmichaud: Well, now, yes

[16:57] *** justatheory joined
[16:57] <Juerd> :)

[16:58] <markmont> pmichaud: S02/Names_and_variables: "$_, $! and $/ are always contextual, as are any variables whose declared names contain a * twigil."

[16:58] <Wolfman2000> Juerd: Your joking is...not exactly funny here.

[16:58] <jnthn> pmichaud: Back before that happened I'm quite sure I remember a discusison along the lines of "$! is contextual"

[16:58] <Juerd> Wolfman2000: I'm not joking. I'm just relaying the message.

[16:58] <pmichaud> markmont: yes, although TimToady and I had a slight clarification on here about what "contextual" meant in that phrase.

[16:58] <pmichaud> let me see if I can find it

[16:58] <Wolfman2000> Who is the original person that layed the message to you?

[16:59] <masak> we're the ones with hugme. #perl on magnet are the ones who'd really need it.

[16:59] <jnthn> Juerd: Oh no! What to do?

[16:59] <pmichaud> Juerd: message received, thanks.

[16:59] <masak> really, really need it.

[16:59] <markmont> pmichaud: What started this was jnthn said that setglobal '$!' in die() looked wrong.  Especially as $! is lexical everywhere else.

[16:59] <Wolfman2000> masak, Juerd: you guys both realize I don't think Perl 6 is dead, right?

[17:00] <pmichaud> markmont: sure.  what should happen is that we look up $! as a contextual and then assign or rebind it

[17:00] <masak> Wolfman2000: what, really? :P

[17:00] <Juerd> Wolfman2000: I don't think many people in this channel think it is dead.

[17:00] <Wolfman2000> ...then who thinks Perl 6 is dead?

[17:00] <jnthn> Wolfman2000: I think there's an element of satire. :-)

[17:00] * Wolfman2000 is not known for satire.

[17:00] <jnthn> Wolfman2000: On this channel, that is. :-)

[17:00] <Juerd> In fact, I believe that it's more alive than many other projects, including Perl 5.

[17:00] <jnthn> On #perl it sounds like it's dillusion instead...

[17:00] <masak> nod.

[17:00] <jnthn> :-)

[17:01] <pmichaud> TimToady moritz_: yes, $_ is contextual, but every block gets its own, so you never get the caller's $_ unless you say CALLER::<$_>

[17:01] <pmichaud> the same is largely true for $!

[17:01] <jnthn> pmichaud: I thought the point was that things could set $! by looking it up contextually?

[17:01] <pmichaud> jnthn: sure, but that's no different from any other contextual var

[17:02] <pmichaud> look up the variable, assign to it

[17:02] * moritz_ 's head jerks up

[17:02] <jnthn> pmichaud: Right, I'm not disagreeing with that. :-)

[17:02] <Wolfman2000> ...and so with these...ops that I somehow gained...I guess I'm now in a holy war of Perl 6 vs Perl 5. I don't know how I feel about that.

[17:02] <jnthn> pmichaud: Maybe I shoulda read the patch. :-)

[17:02] <jnthn> Wolfman2000: Erm. I haz op and I'm surely not in such a thing.

[17:02] <moritz_> Wolfman2000: duck your head low and hope to survive the storm ;-)

[17:03] <jnthn> pmichaud: Yeah, it should all be lookup and assign, I agree.

[17:03] <s1n> i'm poking the bear in there

[17:03] <s1n> pointing out how C was a bad fork of asm heh

[17:04] <pmichaud> jnthn: anyway, the three things that would be of most help to Test.pm at this point:   augment, is export, compile-time blessing into Code

[17:04] <Wolfman2000> Is anyone else here familiar with Catalyst by any chance? The only catalyst website I used never had the Model.

[17:04] <jnthn> pmichaud: I kinda was trying to avoid "blessing into" as such.

[17:04] <jnthn> pmichaud: Just creating an instance of Code that contained the Parrot sub.

[17:05] <pmichaud> jnthn: I think it's not avoidable.  Otherwise when we do various lookups we get the wrong type of object

[17:05] <jnthn> pmichaud: Which lookups?

[17:05] <pmichaud> package-scoped lookups, for one

[17:05] <pmichaud> method lookups would be another

[17:05] <jnthn> pmichaud: No, no

[17:05] <jnthn> For method lookups we're putting them all in through the metaclass

[17:05] <jnthn> pmichaud: So we just pass in the wrapped up code object. Done.

[17:06] <pmichaud> right, but that's compile-time.

[17:06] <jnthn> pmichaud: For package scoped we can wrap it and the install it in the namespace, at BEGIN time if you like.

[17:06] <pmichaud> (where "compile-time" means "before INIT")

[17:06] <markmont> For $! can someone clarify what is meant by "lookup and assign"?  Find the callers's lexpad or set a global if there is none?  Or something else?

[17:06] <pmichaud> markmont:  the code will end up looking like

[17:07] <jnthn> markmont: Just use the fetch, and then call '&infix:<=>'(thingy_you_looked_up, thing_to_assign_to_it)

[17:07] <pmichaud>     $P0 = '!find_contextual'('$!')

[17:07] <pmichaud>     '&infix:<=>'($P0, ... )

[17:07] <pmichaud> what jnthn++ said

[17:07] <pmichaud> more to the point, it will fall out naturally 

[17:07] *** NorwayGeek left
[17:07] <pmichaud> $! = ...value...     will naturally dtrt

[17:08] *** NorwayGeek joined
[17:08] <markmont> pmichaud, jnthn:  Many thanks!

[17:08] <pmichaud> we just have to change the compiler so that it treats $! as a contextual lookup instead of a lexical lookup

[17:10] <pmichaud> jnthn: (package scoped sub)  okay, wfmfn

[17:11] <markmont> pmichaud, jnthn: I'll re-do things and put up another proposed patch for feedback later today.

[17:11] <pmichaud> markmont: thanks.  keep in mind that a lot of this changes in the ng branch, though

[17:11] <pmichaud> although !find_contextual is likely to continue to exist

[17:12] <jnthn> pmichaud: Once that is done, sub trait code gen should take me very little time.

[17:12] <markmont> pmichaud: Yep, but it looks like a choice of not continuing to learn until ng lands, using ng now (looks beyond my skill), or doing stuff now and re-doing it after ng lands.

[17:13] <pmichaud> markmont: redoing is okay, just wanted to make sure you were ready for it :)

[17:13] <pmichaud> markmont: didn't want you to suffer disappointement in a week or two (or possibly less)

[17:13] <pmichaud> markmont: if you're doing this to get more familiar with the code and structure, you're on absolutely the right track :)

[17:13] <jnthn> pmichaud: If you want to tackle "our" scoped subs now, feel free. I'm about to make dinner and really need to spend a bit of time on other bits today.

[17:14] <pmichaud> (and you'll "hit the ground running" when ng lands)

[17:14] *** lichtkind joined
[17:14] <markmont> pmichaud: I appreciate that.  Yes, that's why I'm doing this, plus to help out where possible.

[17:14] <pmichaud> jnthn: what other bits?

[17:14] <jnthn> pmichaud: As in, things besides Rakudo.

[17:14] <pmichaud> ah.  okay.

[17:14] <jnthn> pmichaud: Like, emails I shoulda replied to a week ago and the like. :-)

[17:14] <pmichaud> np

[17:15] <pmichaud> yes, I'll have to work on them then if I'm to get Test.pm going the way I'd prefer

[17:15] <pmichaud> whichever one of us gets to them first, great

[17:15] <pmichaud> right now I'm working on need/import/use

[17:15] <jnthn> pmichaud: OK. I can probably sneak a moment to throw in the sub traits application later on too.

[17:15] <pmichaud> and getting the GLOBAL namespace set up properly

[17:15] <pmichaud> jnthn: actually, I think augment and sub traits are about equal

[17:16] <jnthn> pmichaud: equally important?

[17:16] <pmichaud> yes

[17:16] <jnthn> pmichaud: OK.

[17:16] <pmichaud> with augment we can start putting methods into the core setting

[17:16] <pmichaud> augment _should_ be pretty easy, it's just a different scope on the Package object

[17:16] <jnthn> pmichaud: I can work a first cut of that up for us fairly quickly, I expect.

[17:16] <jnthn> Yes, it should.

[17:17] <pmichaud> and then we need the metaclass instance to know that it's okay to add methods to already-composed classes

[17:17] <jnthn> Right now, it just won't complain if Parrot ain't going to complain. :-)

[17:17] <jnthn> pmichaud: The only thing is that we probably can't re-call .compose

[17:17] <pmichaud> I think we should be able to re-call .compose and it figures out "oh, I already composed this class, I just need to do some extra work here"

[17:18] <pmichaud> in particular, I think that if $*SCOPE eq 'augment', then   "create a new metaclass" is "look up the existing metaclass object"

[17:18] <jnthn> pmichaud: Right, I agree on that part.

[17:18] <pmichaud> and "compose the metaclass" is "update it with whatever got registered"

[17:18] <jnthn> Well

[17:18] <jnthn> Yeah, it's just knowing what got added.

[17:18] <pmichaud> it's okay to me if "add_method" is "immediate" in the case of an already-composed class

[17:19] <pmichaud> then compose is a no-op if the class was already composed

[17:19] <masak> after spending some time on #perl on magnet, I just want to say: I really like you, #perl6.

[17:19] <pmichaud> masak: there's a reason we talk about changing the culture as well as the language.  1/2 :-)

[17:19] <jnthn> pmichaud: I'll go for that as my first cut, I think.

[17:19] <masak> pmichaud: oh yes.

[17:19] <s1n> agreed

[17:20] <s1n> there are a few poisonous people in the perl5 camp

[17:20] <masak> also, it's in the atmosphere in there.

[17:20] <masak> it's much less... respectful than the one here.

[17:20] <Juerd> 18:19 <@masak> after spending some time on #perl on magnet, I just want to say: I really like you, #perl6.

[17:20] <Juerd> +1

[17:21] <pmichaud> #perl has unfortunately had that tradition

[17:21] <pmichaud> and that somewhat pre-dates Perl 6

[17:21] <Juerd> By a decade at least.

[17:22] <masak> in there, it's "you're an asshole!". in here, it's more like "after looking at your arguments, and pondering a while, I'd just like to say that you, sir, are an asshole".

[17:22] <Juerd> Hm

[17:22] <markmont> I just read the comp.lang.perl archives for July - September 1993 to see if there were people freaking out over the changes in Perl 5 alpha 1, and there weren't.  People were focused on getting useful things done, and it was a respectful forum.

[17:22] <masak> and even that is very uncommon.

[17:22] <Juerd> masak: Uncommon in either channel.

[17:22] <pmichaud> so if people think we're trying to break from Perl 5 -- then yes, there are some areas where we are trying to make a definitive break.

[17:23] <masak> Juerd: just a fictional example.

[17:23] <Juerd> It was one of my permanent channels for years

[17:23] <masak> Juerd: I guess my real point is that people generally tend to avoid being deliberately hurtful in here.

[17:23] <Juerd> I haven't seen much name calling.

[17:23] *** cognominal left
[17:26] <Wolfman2000> ...well, a miracle can happen. I think I've finally got a database hooked up in Catalyst. We're partway there to having a pastebin

[17:27] *** und3f joined
[17:28] <pugs_svn> r29025 | pmichaud++ | [pm.txt]:  Another Pm-posed question... 

[17:28] <pugs_svn> r29025 | 

[17:28] <pugs_svn> r29025 | Pm-11: S11:257 says "Without an import list, C<import> imports

[17:28] <pugs_svn> r29025 |     the C<:DEFAULT> imports."  How does one import one of the

[17:28] *** mubot left
[17:28] <pugs_svn> r29025 |     other tagsets?  (I think I'm missing something obvious here.)

[17:28] *** und3f left
[17:29] <jnthn> pmichaud: iirc use Foo :TAG;

[17:29] <pmichaud> jnthn: that seems to conflict with

[17:29] <pmichaud>     use Sense :EXPORT;                  # import and re-export the defaults

[17:30] <jnthn> pmichaud: I seem to remember thinking that too.

[17:30] <pmichaud> it could be possible that :EXPORT, :MY, :OUR, etc are just "special"

[17:30] <jnthn> pmichaud: I think that's possible.

[17:30] <pmichaud> and that any colonpair that isn't special is a taget

[17:30] <moritz_> I also think use Foo :TAG; and either :EXPORT is wrong, or special

[17:30] <jnthn> I think it's the uppercase/lowercase convention.

[17:31] <pmichaud> it's also the case that I'm referring to C<import> instead of C<use>

[17:31] <s1n> just to round out my opinion, it seems clear that some people are bitter that perl6 is still on-going, they see it as we abandoned perl5 and that perl6 is unnecessarily complex

[17:31] <s1n> none of the reasoning holds up, but then again, everyone who hates perl6 seems to forget to do a 'use logic;'

[17:31] <huf> the root of some of that is their mistaken impression that if a project takes a long time, then it's evil.

[17:31] <pmichaud> there's also

[17:31] <pmichaud>     require Sense :OUR<ALL> # but this works

[17:32] <s1n> huf: yes that too

[17:32] <pmichaud> which presumably imports the :ALL tagset

[17:32] <s1n> but the perl community is _very_ different than c++ and python

[17:32] <s1n> which has had the exact same problem

[17:32] <s1n> (c++0x and python3000)

[17:32] <s1n> yet no one in those communities were disdainful of the pending change

[17:33] <Wolfman2000> c++0x? That sounds like a mouthful.

[17:33] <s1n> they act as if perl6 ran over their dog or spit in their food

[17:33] <Wolfman2000> python3000 at least sounds nice.

[17:33] <s1n> Wolfman2000: they wanted the spec done by 2009, that obviously didn't happen (it's been about 11 years)

[17:33] *** cognominal joined
[17:33] *** cognominal left
[17:33] <pmichaud> 11?

[17:33] <pmichaud> 11?!

[17:34] <s1n> yeah, they were talking about it right after c++98

[17:34] * pmichaud subtracts  November 2009 from April 2000 and gets..... 9.5 years

[17:34] <s1n> yay, a phd and he can do math :)

[17:34] <s1n> yeah, c++0x is gonna be awesome, and everyone is welcoming it with open arms

[17:34] <s1n> yet it's been in work _forever_

[17:35] *** Whiteknight left
[17:35] <Juerd> s1n: In a way it is comforting to see that people are passionate about Perl 6

[17:35] <Juerd> Even if passionate in the wrong way.

[17:35] <pmichaud> Juerd: +1

[17:36] <Juerd> They wouldn't have spent all the time debating the issue if they really didn't care.

[17:36] <pmichaud> If Perl 6 were truly irrelevant, then it would be far more ignored than it is :)

[17:36] <Juerd> Yea.

[17:36] <Juerd> (Don't tell them that! ;))

[17:36] * pmichaud considers tweeting that.

[17:36] <Juerd> Hehe

[17:37] <Juerd> You'd be giving them ideas

[17:37] <pmichaud> and here I thought ideas were a good thing.

[17:37] <Wolfman2000> ...considering how we seem to be communicating...decently...

[17:37] <Juerd> pmichaud: Touché

[17:37] <Wolfman2000> I may as well ask. What are your thoughts on using Skype for chatting with each other?

[17:37] <Juerd> I don't use Skype and I find it much easier to type English than to speak it.

[17:38] <pmichaud> when I want to chat voice, I'd consider skype.  :)

[17:38] <huf> skype is the devil ;)

[17:38] <Juerd> Many of my clients want me to use skype

[17:38] <pmichaud> but trying to illustrate a line of code over the telephone is... painful :)

[17:38] <huf> or at least not software.

[17:38] * jnthn is a native English speaker, but doesn't like voice calls still

[17:38] <Juerd> But those conversations always turn out to be a huge waste of time.

[17:38] <Juerd> So I don't do that anymore.

[17:38] <Wolfman2000> pmichaud: screen sharing is starting to make its way into skype

[17:38] <Wolfman2000> already on the Mac version

[17:39] <Juerd> What use is screen sharing?

[17:39] <pmichaud> still, with skype it'd be harder to have multiple conversations going on simultaneously, as we often do here

[17:39] <Wolfman2000> Juerd: to illustrate the line of code

[17:39] <Juerd> Let me put it differently - how is screen sharing more useful than IRC?

[17:39] <Wolfman2000> pmichaud: I'm not suggesting we chuck IRC

[17:40] <Wolfman2000> Juerd: ...good question. I'll get back to you.

[17:40] <pmichaud> Wolfman2000: wasn't necessarily taking it that way :)

[17:40] *** cognominal joined
[17:42] * Wolfman2000 is going to need to have to change his mysql password at this rate...

[17:44] *** payload1 joined
[17:44] *** payload left
[17:44] <Wolfman2000> Hmm...what IS my feather email address anyway?

[17:44] <Juerd> [email@hidden.address]
[17:45] <Juerd> Hmm

[17:45] <Wolfman2000> ...right, should have realized

[17:45] <Juerd> Note .nl

[17:46] *** icwiener left
[17:48] * jnthn should try and make it to .nl next year.

[17:49] * jnthn misses stroopwaffels.

[17:49] <Juerd> jnthn: If you come to the Perl Workshop I'll get you a box of stroopwafels to bring home :)

[17:50] <jnthn> I'm SO coming!

[17:50] <Juerd> perlworkshop.nl

[17:50] <jnthn> oooh, is there a date yet?

[17:50] <Juerd> We have a date already

[17:50] <jnthn> oh nice

[17:50] <Juerd> Yes. And it's very likely that it'll be held at the StayOkay in Arnhem again.

[17:50] <jnthn> Ahh...in Arnhem again. :-)

[17:50] <Juerd> We love that place.

[17:51] <jnthn> The food there is win.

[17:51] <jnthn> And it's just an all round nice place.

[17:51] <Wolfman2000> ...alright, more a perl 5 question, but... should use utf8; come before or after the package declaration?

[17:52] <Juerd> Wolfman2000: Before any non-ascii code.

[17:52] <jnthn> Juerd: OK, I'll block that date out in my calendar. :-)

[17:52] <Juerd> Wolfman2000: Apart from that, it doesn't matter much.

[17:52] <Wolfman2000> Juerd++: Noted.

[17:52] <Juerd> jnthn: Great; I'm looking forward to meeting you again.

[17:52] <Juerd> jnthn: Can I notify the organization that you'll be there?

[17:53] <Wolfman2000> Still working on the website right now...this may take awhile. Not used to using the model here, and I'll DEFINITELY need more than one Controller unlike my other page.

[17:57] *** payload1 left
[17:57] *** payload joined
[17:57] <pmichaud> std:  class A { 1 };   class B;   say('hmmm....');

[17:57] <p6eval> std 29025: ok 00:01 108m␤

[17:57] <jnthn> Juerd: Yes. :-)

[17:58] <Juerd> jnthn++

[17:58] <jnthn> Juerd: Hopefully this year the Ukrainian workshop doesn't have a date conflict, but either way, you asked first, so if that happens you get me. :-)

[17:59] <markmont> There's a problem with setting $! in die by doing find_contextuals followed by infix:= ... infix:= can call die if the variable is read-only, and that would be bad.  I'd just copy a little code, but the actual work is done by Object::!STORE which not only can call die itself, but calls a bunch of other stuff that could, in theory, wind up calling die.  Any thoughts?

[17:59] <jnthn> I hope not that, 'cus I like my little Ukrainian adventure each year. :-)

[18:00] <Juerd> :)

[18:01] <pmichaud> markmont: I'd just use store_dynamic_lex and be done with it :)

[18:01] <pmichaud> at least for now :)

[18:01] <pmichaud> eventually I somewhat expect it'll be bind instead of assign anyway

[18:01] <Wolfman2000> Juerd: I recall you said you wanted to do a kernel update or something today. Do you know roughly how much time I have before I'll be disconnected?

[18:02] <Juerd> Wolfman2000: Yeah... about that... I forgot.

[18:02] <Juerd> So it's not going through.

[18:02] <Juerd> (today)

[18:02] <Juerd> Sorry

[18:02] <Wolfman2000> Juerd: That's fine. Tomorrow's a better day for you to do it for me anyway due to college classes.

[18:02] <Wolfman2000> ...I'm still finding it funny how I'm going to become a teacher, yet I can't get rid of my Bachelors.

[18:03] *** icwiener joined
[18:03] <masak> it's much easier to think of the #perl denizens as cleverly programmed bots badmouthing Perl 6. it also explains why arguing with them yields little result.

[18:04] <markmont> pmichaud: Will do :)

[18:04] <huf> masak: i still think the basis of the problem isnt something you can get at with arguments or logic

[18:04] <huf> because it's mostly emotional

[18:04] <masak> nod.

[18:05] <pmichaud> ...but we can work on the fringes a bit

[18:05] <masak> yes, that's probably what's within range.

[18:05] <pmichaud> every once in a while we confront someone with facts and they say "oh...."

[18:05] <masak> :)

[18:06] <pmichaud> I'm not sure I'd march into the lion's den, but I'll hold an occasional chat/post/tweet with a lion

[18:08] <s1n> holy crap, #perl is chock full of people who haven't done 'use logic;' yet

[18:08] <moritz_> the freenode #perl, or the irc.perl.org #perl?

[18:09] <masak> the latter.

[18:09] <masak> we've been talking there all day with the fine folks who... have different views about things.

[18:11] <kidd`> btw, is http://twitter.com/rakudoperl deliberately abandoned? last tweet is from September 17th.  

[18:11] <pmichaud> not deliberately, no

[18:11] <pmichaud> I've been super-busy on nqp-rx

[18:11] <pmichaud> I need to tweet some rakudoperl stuff

[18:11] <moritz_> just low on bus number ;-)

[18:11] <pmichaud> I should just make it a point to tweet twice a day to that

[18:11] <kidd`> maybe it could be a good way to comunicate things little by little, without having to fight with lions 

[18:12] <pmichaud> kidd`: good suggestion, but my experience has been that you need a bit of sustained effort with the lions

[18:12] <pmichaud> something more than 140-chars :)

[18:12] <pmichaud> maybe others would have more luck at it than I

[18:13] <pmichaud> besides, I spent much of my week battling in a different arena with different lions :)

[18:13] <jnthn> ;)

[18:13] <moritz_> pmichaud: I could write  an IRC bot which would allow more people to use the rakudoperl twitter account ;-)

[18:13] <pmichaud> moritz_: I'd accept that

[18:14] * jnthn is SO glad that he's taking the time out to cook something decent today, rather than the quickest thing he can throw together.

[18:14] *** nbrown_ joined
[18:15] *** frew joined
[18:16] <Wolfman2000> If it helps, the #catalyst people are at least being friendly towards me...then again, I'm not asking when Catalyst will use Perl 6 or anything.

[18:16] *** frew left
[18:18] <masak> Wolfman2000: yes, I've also had good experiences on #catalyst. they're pretty helpful.

[18:18] <kidd`> moritz_: the twitter-IRC bot is a good idea IMHO

[18:18] *** xenoterracide left
[18:18] <Wolfman2000> moritz_: The only concern I have with the twitter bot...how would you decide who can use it?

[18:18] <moritz_> I hope I can make hugme do that

[18:18] <moritz_> Wolfman2000: by nick whitelist

[18:19] <Wolfman2000> moritz_: Should have guessed.

[18:19] *** xenoterracide joined
[18:20] <moritz_> hugme already verifies if people are registered to freenode

[18:20] <Wolfman2000> hugme: help

[18:20] <hugme> Wolfman2000: (add $who to $project | list projects | show $project | hug $nickname)

[18:20] *** frew joined
[18:20] <Wolfman2000> can't help but feel I'm missing some options

[18:20] <moritz_> hugme: cuddle Wolfman2000 

[18:20] * hugme cuddles Wolfman2000; moritz_++

[18:20] <s1n> masak: you should know that i'm provoking them

[18:21] <moritz_> s1n: that's not always a good basis for a dialog

[18:21] <moritz_> Wolfman2000: ok, cuddling is not documented

[18:21] <masak> s1n: I see. I'm not sure that's the way to go. but it's your call.

[18:21] <s1n> conversing with them is not a dialog

[18:21] <masak> s1n: no, but there are people listening in.

[18:21] <masak> s1n: keeping up dignity is important on its own.

[18:21] <s1n> i am being serious from time to time

[18:22] <masak> I'm being serious all the time.

[18:22] <masak> I don't have time to joke around.

[18:22] <masak> it's draining enough as it is staying in that channel. I feel as if I've sprung a leak.

[18:24] <diakopter> he

[18:24] <diakopter> hee

[18:25] <Wolfman2000> ...and now due to what may be a misunderstanding, Catalyst is apparently giving me access to update the PODs as needed.

[18:25] <masak> :)

[18:25] <masak> #catalyst++

[18:26] *** cognominal left
[18:26] <Wolfman2000> All I wanted to know was the proper way to have all controllers be able to use a common sub. Apparently now I have to create that either using a base controller or a role...whatever a role is in Perl 5.

[18:27] <masak> probably a Moose role.

[18:29] *** nbrown left
[18:34] <zaslon> lolmasakhazblogged! masak++ 'Week 19 of Web.pm -- building a tutorial': http://use.perl.org/~masak/journal/39863?from=rss

[18:35] <masak> many of the discussions on #perl seem to end up with 'yawn. let me know when Perl 6.0.0 is out.' as the conclusion.

[18:35] <moritz_> oh, they come to a conclusion?

[18:35] * moritz_ is genuienly surprised

[18:36] <masak> they have no trouble coming to conclusions, trust me. :)

[18:38] <Wolfman2000> Building a tutorial...this should be a good read.

[18:38] <jnthn> wow masak++ blogs twice today!

[18:38] <masak> and a third one (by necessity) coming up :)

[18:38] <masak> and I'm already pretty tired. :)

[18:38] <Wolfman2000> ...you had to use my own words.

[18:38] <masak> I shall sleep well tonight.

[18:39] <masak> Wolfman2000: they were very fine words.

[18:39] <masak> they warmed my heart.

[18:39] * masak edits the post to say 'Wolfman2000++'

[18:39] <Wolfman2000> *chuckles*

[18:40] <Wolfman2000> Astaire? Who comes up with these names?

[18:41] <masak> Wolfman2000: that program is a port of Ruby's Sinatra. I hope that explains it. :)

[18:41] <Wolfman2000> Frank Sinatra...guessing Fred Astaire. Good enough.

[18:41] <masak> Wolfman2000: I'm guilty of the naming. suggestions welcome.

[18:41] *** PacoLinux left
[18:41] <Wolfman2000> masak: I thank you for at least not using Spears

[18:42] <moritz_> lol

[18:42] <masak> does she dance?

[18:42] <Wolfman2000> ...I wouldn't call it dancing

[18:42] <Tene> hi masak

[18:42] *** PacoLinux joined
[18:42] *** payload left
[18:42] <masak> Wolfman2000: bet she doesn't do this: http://www.youtube.com/watch?v=Y8n7WQIXQDs

[18:42] <masak> Tene: oh hai

[18:42] <moritz_> she mostly offends the audience by not singing, but using playback

[18:46] <markmont> Improved attempt (pmichaud++, jnthn++) at getting rid of that set_global '$!' in die: http://github.com/markmont/rakudo/commit/1eaaa816d8581b46ec6a882dea0889d5ea4db880

[18:47] <Tene> It kinda seems to me that $! should be a context var.

[18:47] <Tene> ... and that's what your patch does.

[18:47] <Tene> :)

[18:47] <moritz_> Tene: then apply it ;-)

[18:48] <Wolfman2000> masak: 4 words for that scene.

[18:48] <Wolfman2000> Big Lipped Alligator Moment.

[18:49] <masak> :)

[18:49] <masak> Wolfman2000: I kinda like it.

[18:49] <masak> it might not take the plot forward, but hey, he's dancing on the roof.

[18:49] <masak> that's a pretty clear metaphor.

[18:50] *** oZ1 joined
[18:50] *** oZ1 left
[18:50] *** oZ] joined
[18:53] *** Chillance joined
[18:53] <s1n> pmichaud: have time this evening?

[18:54] *** nbrown_ is now known as nbrown

[18:55] *** nbrown is now known as nbrown_

[18:55] *** Paks left
[18:55] *** nbrown_ is now known as nbrown

[18:59] *** NorwayGeek left
[18:59] *** NorwayGeek joined
[19:00] <s1n> masak: i'm not really trying in #perl anymore

[19:00] *** NorwayGeek left
[19:01] <huf> s1n: since at least 20 minutes ago :)

[19:01] *** NorwayGeek joined
[19:01] <s1n> they're just being fecitious (spelling?)

[19:02] <s1n> i think the root of the problem is 2 fold: 1) it's taken a long time to get perl6 going and 2) they would have to learn something new

[19:02] <s1n> maybe we can take something away from that

[19:02] *** NorwayGeek left
[19:03] <huf> you're still looking for rational reasons

[19:03] <huf> stop it ;)

[19:03] *** NorwayGeek joined
[19:03] <s1n> no, i found those reasons a long time ago

[19:03] <huf> ah. keep it up then 

[19:03] <s1n> if there had been a not too radically different perl6 in 2002, there wouldn't be this problem

[19:04] <s1n> i.e. if there had been a few things, like classes, junctions, and the grammar engine

[19:04] <s1n> but that ship has sailed, so keep up the good work #perl6

[19:04] <moritz_> then it would have been perl 5.somthing, not Perl 6

[19:05] *** frew left
[19:05] <s1n> moritz_: yeah, but even if you had called it perl6, there would have been little if any resistance

[19:05] <s1n> i think people just dont like the unknown, and perl6 is a big unknown to perl5 people

[19:07] *** pkkm joined
[19:07] *** NorwayGeek left
[19:07] <s1n> i think the only thing that will bridge the gap is the next BigThing written in perl6

[19:07] *** NorwayGeek joined
[19:08] <s1n> CPAN galvanized perl5, perl6 needs something epically proportioned

[19:09] <colomon> Philosophical Question I hit last night with my rakudopatch:

[19:10] <colomon> Should .Str be guaranteed to return Str, or is a class derived from Str okay?

[19:11] <moritz_> anything conforming to Str should be fine

[19:11] *** zloyrusskiy joined
[19:11] * s1n has to go run 9 miles now

[19:12] *** zloyrusskiy left
[19:16] *** NorwayGeek left
[19:16] *** NorwayGeek joined
[19:19] *** NorwayGeek left
[19:19] *** NorwayGeek joined
[19:23] <colomon> moritz_: then I suppose I got it right last night.

[19:24] <colomon> and I should add a test or two to verify / "document" that.

[19:24] <colomon> I'll be away from the net for the next few hours, but I'll try to get the tests pounded out and then check them in when I have access again.

[19:25] <moritz_> have the appropriate amount of fun ;-)

[19:26] *** colomon left
[19:28] *** NorwayGeek left
[19:28] *** NorwayGeek joined
[19:30] *** cxreg joined
[19:35] *** athaba joined
[19:36] *** cognominal joined
[19:41] *** cognominal left
[19:43] <zaslon> lolmasakhazblogged! masak++ 'November 8 2009 -- people may call you a troll, but...': http://use.perl.org/~masak/journal/39864?from=rss

[19:44] *** NorwayGeek_ joined
[19:45] <jnthn> masak: lol :-)

[19:46] <jnthn> Nice subject.

[19:46] <masak> I feel exhausted.

[19:46] <masak> I need to go lie down somewhere.

[19:47] * moritz_ suggests $Home::bed

[19:47] *** nihiliad left
[19:47] <masak> good idea.

[19:48] <Woodi> masak: still here ?

[19:48] <Tene> Hmm... getting some weird behavior from NQP.

[19:48] <masak> Woodi: yes, but not for long, I think.

[19:48] <Tene> -> #parrot

[19:48] <Woodi> about last blog... look into html-template Makefile.PL and you will be know answer..

[19:49] <Woodi> anyway, i tried 5 or so p6 modules and noone installs...

[19:49] <Woodi> mainly build errors...

[19:50] <masak> Woodi: oh, you're right!

[19:50] <masak> Woodi: so it must be that proto sets PARROT_DIR, and that's why it gets further. yes that makes sense.

[19:50] <Woodi> .pbc was required ?

[19:50] <masak> Woodi++

[19:50] <masak> Woodi: I think that Makefile.PL's seriously old

[19:50] *** jan_ left
[19:50] <Tene> dates back to pre-install days?

[19:51] <masak> oh yes.

[19:51] <masak> pre-most anything.

[19:51] <jnthn> Prehistoric makefiles.

[19:51] <masak> anyway, I'm in no condition to fix that today. will do it tomorrow. :)

[19:51] <jnthn> masak: Sleep well. :-)

[19:52] <Woodi> other modules have other bugs... not in code just in build...

[19:52] <masak> thanks. :)

[19:53] * moritz_ never had problems installing SVG or SVG::Plot

[19:53] <Woodi> what is: RAKUDO_DIR=$PARROT_DIR/languages/rakudo

[19:53] <masak> moritz_: this is in the installed-modules branch, though.

[19:53] <Woodi> for me rakudo installs to /usr/bin as perl6 binary...

[19:54] <masak> Woodi: it's something that made sense when Rakudo was always in that directory in Parrot.

[19:54] <masak> which it was, a year or so ago.

[19:54] *** jaffa8 is now known as jaffa4

[19:54] <Woodi> many hardcoded things things..

[19:54] *** scottt joined
[19:55] <Woodi> i will try SVG :)

[19:55] <moritz_> masak: that's what i'm talking about, yes

[19:55] <Wolfman2000> ...I am really questioning if roles are really needed for Catalyst.

[19:56] <Woodi> err... how to install svg ? no Makefile.*...

[19:56] <moritz_> ./proto install SVG

[19:57] <moritz_> worked in the installed-modules branch last I tried

[19:57] <Woodi> no idea how to install proto :)

[19:57] <jaffa4> what is perl 6?

[19:57] *** lmc left
[19:58] <Woodi> k, enought for me for today... gn good ppls

[19:58] <moritz_> good night Woodi 

[19:58] <masak> 'night Woodi

[19:58] *** masak left
[19:59] <moritz_> jaffa4: you're not here for the first time - what is this, a quiz?

[20:00] *** NorwayGeek left
[20:01] <jaffa4> just a test

[20:01] * moritz_ recommends writing tests for official test suite instead

[20:01] <jaffa4> really?

[20:02] <jaffa4> do not you have enough tests?

[20:02] <jaffa4> What kind of tests?

[20:03] *** fax joined
[20:05] <moritz_> t/spec/TODO contains an (incomplete) list of tests that need to be written

[20:06] <Juerd> Maybe that should be put in a chart :)

[20:07] <Juerd> (j/k)

[20:07] *** nihiliad joined
[20:09] <Wolfman2000> And...roles may not be needed after all.

[20:09] * moritz_ fourier-transforms Juerd and puts him into a chart

[20:13] <Juerd> \o/

[20:14] <jaffa4> ? t/spec/TODO

[20:15] <moritz_> http://svn.pugscode.org/pugs/t/spec/TODO

[20:16] <moritz_> !

[20:18] <jaffa4> pugscode

[20:18] <jaffa4> how misleading!

[20:18] <mathw> history provides the reason

[20:21] <Juerd> The test suite started in the pugs repository

[20:21] <Juerd> And... still lives there :)

[20:21] <Juerd> It likes being there I think.

[20:21] <moritz_> for now, yes

[20:22] <Juerd> Many things like being there. It's gezellig.

[20:22] <jaffa4> rakudo: print glob "*"

[20:22] <p6eval> rakudo 97ced1: Could not find non-existent sub glob␤in Main (file src/gen_setting.pm, line 324)␤

[20:22] *** pkkm left
[20:23] <jaffa4> rakudo: print (glob "*")

[20:23] <p6eval> rakudo 97ced1: Could not find non-existent sub glob␤in Main (file src/gen_setting.pm, line 324)␤

[20:23] <Juerd> rakudo: sub glob { `ls -1 @_` }; print glob "*"

[20:23] <p6eval> rakudo 97ced1: Unable to parse block; couldn't find final '}' at line 2, near "`ls -1 @_`"␤in Main (file <unknown>, line <unknown>)␤

[20:23] <moritz_> it's qx/.../ in Perl 6, and disabled in p6eval 

[20:23] <Juerd> Oh

[20:24] <eternaleye> Wolfman2000: Re syntax highlighting of perl6, see Syntax::Hilight::Perl6 - it was written by a guy who used the nick azawawi, and it has multiple varieties of html output. One of them even has code folding ;D

[20:25] <Wolfman2000> eternaleye: I don't wish to get into cold folding

[20:25] <eternaleye> (and yes, it's a P5 module)

[20:26] <Wolfman2000> eternaleye: aware it's P5

[20:27] <eternaleye> (heh, scrolling down shows someone already pointed it out)

[20:28] <pmichaud> (pugscode misleading)   two thoughts:  (1) we still have the option of moving some things into the perl6 account on github, (2)  since perl6.org now points to feather, perhaps we could now do something under the perl6.org domain

[20:28] <pmichaud> afk, soccer game

[20:28] <eternaleye> (FYI, I'm backlogging)

[20:28] <Wolfman2000> ah

[20:29] <Wolfman2000> pmichaud: back up a second. I thought feather was originally...different. Now...we have control over all of perl6.org?

[20:31] <moritz_> we have

[20:32] <eternaleye> TimToady: Is there any chance that gimme5's shebang could be set to '#!/usr/bin/env perl'? /usr/local/bin/perl isn't particularly portable.

[20:32] <Wolfman2000> eternaleye: symlink already made

[20:32] <moritz_> Daniel White kindly agreed to make perl6.org available for us

[20:32] <Wolfman2000> "Daniel White"++

[20:32] <Wolfman2000> Dirty HTML code...watch out. Your days are numbered.

[20:40] *** ash__ joined
[20:41] <ash__> hi

[20:41] <moritz_> hi ash__ 

[20:41] <ash__> i am a perl developer for last 5 years 

[20:42] <ash__> is perl 6 ready for production use?

[20:42] <moritz_> not yet

[20:43] <Juerd> It will be, before another 5 years have passed :)

[20:43] <ash__> this is a childish question

[20:43] <mathw> Juerd: It's so good to be able to say that :)

[20:43] <ash__> is there any value for using perl6

[20:43] <moritz_> sure

[20:43] <Juerd> mathw: I've been saying it for at least 5 years now ;)

[20:44] <mathw> ash__: definitely

[20:44] <Juerd> As a new product, Perl 6 needs a lot of testing.

[20:45] <ash__> every now and then i check for perl6 but things are not geting anywhere, 

[20:45] <mathw> I beg to differ

[20:45] <mathw> Progress is being made very steadily now

[20:45] <Juerd> And knowing Perl 6 early might help in the future. I hope to guide businesses through the transition from 5 to 6.

[20:45] <moritz_> http://rakudo.org/status <-- doesn't look like "going nowhere" to me

[20:46] <Juerd> ash__: It's certainly getting somewhere. 

[20:46] <ash__> could you please tell me why shall we use perl6

[20:46] <mathw> Because it's better

[20:46] <Juerd> ash__: Because you like it, love it, or because it's the best tool for the job.

[20:46] <ash__> in what sense

[20:46] <mathw> That's the overly simple answer of course

[20:46] <oZ]> Everyone: This is my first day in #perl6, and it seems there's already been three queries on whether perl6 is real and relevant or not. Is this the usual, or does today just suck?

[20:46] <mathw> Plenty of better languages have fallen over the years

[20:46] <moritz_> because Perl 5 has not much space left for evulation

[20:46] <Juerd> ash__: But if you don't like it, don't love it, or if it isn't the best tool for the job, there are still many other programming languages that may suit you better.

[20:46] <moritz_> oZ]: today is particularly bad

[20:47] <mathw> oZ]: It's high, but a lot of people still ask. The thing with the people who ask in here is that they can get good answers.

[20:47] <Juerd> oZ]: That's today.

[20:47] <oZ]> Gotcha. I've noticed you guys are 20x more pleasant than #perl, so we're off to a good start. Forgive the lurking.

[20:47] <moritz_> oZ]: and welcome to #perl6 ;-)

[20:47] <ash__> i know perl, php, java, c#, perl is the one provide me living 

[20:47] <Juerd> Lurkers are great... just a bit scary ;)

[20:47] <oZ]> Thanks. :)

[20:47] <mathw> ash__: For me, the key things in Perl 6 are the object-oriented programming model, the grammar system and lazy evaluation (as well as the cleaned up syntax, increased consistency and junctions)

[20:48] <mathw> Having the ability to use Perl 5 modules will help people make the transition

[20:48] <ash__> from my experience its not only the language other thing like good IDE etc for example ruby on rails

[20:48] <Juerd> ash__: Perl 6 is not yet interesting as a tool to use in your job. For now, it's being used by people who do it for fun and/or because they care.

[20:48] <mathw> Hopefully the Rakudo Star release will get Perl 6 into a lot of hands so people can try it for themselves

[20:49] <mathw> There's a lot of stuff in my job I'd do with Perl 6 now, if it was up to speed

[20:49] <ash__> without having supprting ide and framework it will be very difficlt to become succesful

[20:49] <Juerd> ash__: Ruby on Rails makes people sad in the long run.

[20:50] <eternaleye> (backlogging) jnthn: dillusion (n.): You think you see a pickle, but it isn't really there.

[20:50] <mathw> yes, and Perl 5 has huge momentum with CPAN and the installed base

[20:50] <oZ]> With any luck, Padre may be actually useful and usable some day, and the IDE issue will imrpove.

[20:50] <Tene> ash__: there are MANY people who successfully use Perl with no IDEs.

[20:50] <mathw> it should be more possible to write good IDEs for Perl 6

[20:50] <Tene> Me, for example.

[20:50] <mathw> But I'm one of those programmers who don't get on with them very well

[20:51] * Juerd never used an IDE with Perl.

[20:51] <Juerd> Linux is my IDE :)

[20:51] <mathw> With the noteable exception of C#, I do tend to use an IDE for that

[20:51] <Juerd> I never understood the point of IDEs, to be honest.

[20:51] <oZ]> Tene: That may be true, but IDEs are useful for many people, myself included. I may currently use TextMate, but I'd be a Komodo user if it wasn't so slow.

[20:51] <szabgab> and you are in the top 0.001% of the programmer community

[20:51] <huf> shells and programmer's editors are complex enough to do anything an ide can

[20:51] <Juerd> szabgab: Ordered by what? :)

[20:51] <ash__> well personaly i use notepad

[20:51] <szabgab> amount of perl usage :-)

[20:52] <Wolfman2000> ash__: Get thee to notepad++ right now.

[20:52] <mathw> Juerd: a really good one is helpful if you're unfamiliar with the libraries, or for exploring an unfamiliar codebase, but it has to be a good one. C# gives the advantage of the reflection systems

[20:52] <ash__> i have three developer work underme

[20:52] <Juerd> n...notepad. For real?

[20:52] <mathw> wow, notepad

[20:52] <ash__> they dont want to use notepad , they need ide

[20:52] <oZ]> I think he meant 'Notepad++'.

[20:52] <mathw> man

[20:52] <huf> i hope so

[20:52] <ash__> yes notepad++

[20:52] <mathw> ah

[20:52] <mathw> okay

[20:52] <moritz_> ash__: there's an IDE with Perl 6 support already, and good syntax hilighting for vim

[20:52] <mathw> that's a completely different program then

[20:52] <szabgab> karma notepad

[20:53] <Juerd> ash__: You need a programmer's editor; IDE's have that. But you can use a good editor without the rest of the environment.

[20:53] <Wolfman2000> @karma notepad

[20:53] <lambdabot> notepad has a karma of 38

[20:53] <moritz_> @karma notepad

[20:53] <lambdabot> notepad has a karma of 38

[20:53] <szabgab> ty

[20:53] <Wolfman2000> ...we're giving notepad too much karma when we suggest the ++ version

[20:53] <Wolfman2000> We need to fix that.

[20:53] <Tene> ash__: moritz is right, if you want a good Perl (5,6) IDE, you should take a look at padre.

[20:53] <Juerd> @karma c

[20:53] <lambdabot> c has a karma of 0

[20:53] <Juerd> Huh, what?

[20:53] <huf> :))))

[20:53] <moritz_> @karma C

[20:53] <Juerd> C is supposed to top the karma ranking.

[20:53] <lambdabot> C has a karma of 0

[20:53] <Juerd> In EVERY channel.

[20:53] <Wolfman2000> Apparently not.

[20:54] <moritz_> Juerd: unless people like C-- ;-)

[20:54] <mathw> I think it's special-cased

[20:54] <szabgab> overflow ?

[20:54] <moritz_> @karma C

[20:54] <lambdabot> C has a karma of 0

[20:54] <moritz_> yes, special cased

[20:54] <szabgab> C reached karma overflow

[20:54] <moritz_> I just --'ed

[20:54] <Juerd> (special case)--

[20:54] <szabgab> karma++

[20:54] <szabgab> @karma

[20:54] <lambdabot> You have a karma of 75

[20:54] <szabgab> @karma karma

[20:54] <lambdabot> karma has a karma of 1

[20:54] <huf> @karma a

[20:54] <lambdabot> a has a karma of 5

[20:54] <Juerd> @karma

[20:54] <lambdabot> You have a karma of 6

[20:54] <Juerd> Yay

[20:54] <Juerd> I can haz 6

[20:55] <ash__> i used debian, but with ubuntu i am more comfortable

[20:55] <Wolfman2000> I know this isn't the right room, but...any reason why my database connecting isn't working here? (This is for work on the new website.) http://scsys.co.uk:8001/35949

[20:55] <ash__> with a shell script(from net) I been able to install whole contelpanel 

[20:55] <oZ]> ->search()->count();

[20:55] <ash__> and hosting 200 website so far so good

[20:55] <oZ]> er, without the parens for your code. :)

[20:55] <Wolfman2000> oZ]: I'm not searching for anything. I want all.

[20:56] <Juerd> Wolfman2000: That's searching with no conditions.

[20:56] <ash__> i love the power of commandline but still ease of use is a key factor

[20:56] <oZ]> What Juerd said.

[20:56] <oZ]> You have to have a query to get the count.

[20:56] <Wolfman2000> ...and now I have an exception.

[20:56] <Wolfman2000> due to lack of >

[20:57] <Wolfman2000> oZ]: placed the empty search() in, didn't change the query, still have the original error.

[20:59] <Wolfman2000> oZ]: If it matters, it seems that my Model folder only contains DBIC.pm, while my tables are in Schema/Result/TableName.pm

[21:00] *** fax left
[21:01] *** fax joined
[21:01] <oZ]> Wolfman2000: That should be the proper placement, and then your model() line is checking the DBIC model for a schema called Users. Does your Users class' defined columns match the database? I'm still checking.

[21:01] <Wolfman2000> oZ]: Not calling any columns here: just the table names.

[21:02] <ash__> ok bye for today

[21:03] <oZ]> Wolfman2000: Could you paste your connect_info, whether it's inside Model/DBIC.pm or the yml file?

[21:03] <Wolfman2000> oZ]: hang on

[21:03] *** ash__ left
[21:04] <lisppaste3> wolfman2000 pasted "Connect info" at http://paste.lisp.org/display/90004

[21:04] <Wolfman2000> oZ]: that's from Model/DBIC.pm

[21:04] <Wolfman2000> Everything below that connect batch is POD

[21:05] *** [particle] left
[21:05] <eternaleye> Wolfman2000: (re Symlink already made) Yes, on feather. But my box doesn't have a /usr/local/bin/perl either. `env perl` just calls the first one in $PATH.

[21:06] <Wolfman2000> eternaleye: can't help you there

[21:06] <Juerd> env is not portable.

[21:08] <oZ]> Wolfman2000: Sorry for the delay. Get rid of that last hashref, and just supply mysql_enable_utf8 as a fourth key to the connect_info hashref.

[21:09] <Wolfman2000> oZ]: No error...but at this point it's me not using a template correctly.

[21:09] <oZ]> Heh.

[21:09] *** nihiliad left
[21:09] <oZ]> Well, it's progress. :)

[21:09] *** mubot joined
[21:09] <Wolfman2000> Okay, I stashed it in $c->stash->{users}. The templates should be able to call c.users

[21:09] *** pointme left
[21:10] *** zaslon left
[21:10] *** pointme joined
[21:10] *** zaslon joined
[21:10] *** carlin left
[21:11] <eternaleye> Wolfman2000: My point was that /usr/local/bin/perl breaks for a lot of people. `env perl` falls under the heading of 'sensible defaults', because almost all of the time it will DTRT

[21:11] <oZ]> Wolfman2000: Stash gives keys to root, so it's just [% users %]

[21:11] <Wolfman2000> oZ]++: We have progress!

[21:12] <oZ]> Woo!

[21:12] <moritz_> might I remind you that this is a Perl 6 channel?

[21:12] <Wolfman2000> moritz_: Might I remind you that this is for a Perl 6 website?

[21:13] *** carlin joined
[21:13] <moritz_> Wolfman2000: it's still Perl 5

[21:13] <Wolfman2000> Besides: normal support channels went dead awhile ago.

[21:13] <oZ]> Wolfman2000: Feel free to message me privately.

[21:13] <eternaleye> moritz_: He's working on a pastebin for Perl 6

[21:13] <moritz_> eternaleye: I know

[21:13] *** IllvilJa joined
[21:16] *** jan_ joined
[21:16] *** nihiliad joined
[21:22] *** pdcawley joined
[21:27] *** jaffa4 left
[21:31] *** _eMaX_ left
[21:33] *** icwiener left
[21:33] *** icwiener joined
[21:44] *** mj41_ joined
[21:54] <Wolfman2000> http://i34.tinypic.com/4j429y.png  The colors and layout can change. The point is: we have a basic front end.

[21:55] <eternaleye> \o/

[21:56] <Wolfman2000> I figure the recent pastes will go on the left, and any other needed navigation can go in the footer.

[22:00] *** xabbu42 joined
[22:02] *** mj41 left
[22:15] *** hcchien left
[22:20] *** hcchien joined
[22:21] *** NorwayGeek_ left
[22:21] *** NorwayGeek joined
[22:23] *** kaare left
[22:24] *** NorwayGeek left
[22:24] *** NorwayGeek joined
[22:27] *** eternaleye left
[22:29] *** icwiener left
[22:36] *** athaba left
[22:37] *** nihiliad left
[22:37] *** _eMaX_ joined
[22:38] *** pmurias joined
[22:40] <pugs_svn> r29026 | colomon++ | [t/spec] Four tests showing that DerivedFromStr.Str returns an object of type DerivedFromStr (when inheriting Str.Str's implementation). 

[22:45] *** colomon joined
[22:48] * carlin finally got Apache to exec perl6

[22:48] *** am0c left
[22:48] *** iblechbot left
[22:48] <Wolfman2000> carlin: Using Web.pm for this, or something else?

[22:49] <carlin> Wolfman2000: just a basic Hello world script at the moment, was going to have a poke around at Web.pm later though

[22:50] <Wolfman2000> carlin: You may get to poke at Web.pm first: I've been charged to take care of a new pastebin for us.

[22:51] *** kst left
[22:52] *** kst joined
[22:56] *** hugme left
[22:56] *** hugme joined
[22:58] <moritz_> hugme: twit hugme_test this line now appears on twitter, if everything worked

[22:58] * hugme hugs moritz_; tweet delivered

[22:59] <Wolfman2000> moritz_: you use rakudoperl, right?

[22:59] <Wolfman2000> that is, for twitter

[23:00] <moritz_> Wolfman2000: no, that's pmichaud's account

[23:00] <moritz_> Wolfman2000: but I hope to use that too, soon ;-)

[23:00] <Wolfman2000> which one is yours?

[23:01] <Wolfman2000> dinner: afk

[23:02] <moritz_> Wolfman2000: currently I have only hugme_test for testing hugme

[23:03] <frettled> Hey, guys, what should I blog about tonight?  :D

[23:06] <frettled> Sorry, didn't mean to scare everyone else into fetal positions beneath their desks!

[23:07] <moritz_> frettled: blog about the bots in #perl6 ;-)

[23:07] <frettled> Hmm!

[23:07] <frettled> And those are the ones that have a Voice instead of op, right?

[23:07] <frettled> :D

[23:08] *** moritz_ sets mode: +v hugme

[23:08] <moritz_> right ;-)

[23:08] <frettled> How do I classify the bug-submitting bot, AKA masak?

[23:08] <moritz_> your choice ;-)

[23:09] <frettled> muahaha.

[23:09] <frettled> Let's see.  I've forgotten what dalek does.  I genuinely don't know what ilbot2 and ilogger2 do, except I suspect the latter is responsible for the web updates.

[23:09] <frettled> Add IRSeekBot to that list.

[23:10] <moritz_> dalek reports commmits to rakudo, nqp-rx, the book and so on

[23:10] <Juerd> dalek announces commits

[23:10] <Juerd> "the book" ;0

[23:10] <Juerd> s/;0/:)/

[23:10] <moritz_> ilbot2 is the logging bot corresponding to irclog.perlgeek.de

[23:10] <moritz_> ilogger2 for another one; don't know about IRSeekBot 

[23:10] <frettled> lambdabot takes care of karma for us, lisppaste3 handles the paste.lisp.org bits, phenny is a secretary, and pugs_svn tracks pugs commits?

[23:11] <Juerd> Pugs repository commits

[23:11] <frettled> p6eval handles various online Perl 6 code evaluation

[23:11] <Juerd> Which holds more than just pugs

[23:11] <jnthn> Mainly the test suite and spec are what get reported by pugs_svn

[23:11] <frettled> yup, like the spec

[23:11] <frettled> mm

[23:12] <moritz_> and masak usually doesn't have voice, but handles RT submissions nonetheless ;-)

[23:12] <frettled> :D

[23:13] <moritz_> http://transfixedbutnotdead.com/2009/11/08/best-things-in-life-come-in-threes/ lovely

[23:13] *** Juerd sets mode: +v moritz_

[23:13] <frettled> haha :)

[23:13] *** pmurias_ joined
[23:14] <moritz_> zaslon reports blog posts

[23:14] *** moritz_ sets mode: +v zaslon

[23:15] <frettled> ah, yes, our newish bot member

[23:16] <jnthn> *and* zasolan is written in Perl 6 \o/

[23:16] <carlin> pointme provides links to projects tracked by proto

[23:17] <carlin> and mubot dies every 12 hours or so but also tracks karma

[23:17] <Juerd> Where's zasolan's source? :)

[23:17] <Juerd> s/zasolan/zaslon/

[23:18] <Juerd> http://github.com/moritz/rssbot

[23:18] <carlin> pointme: rssbot

[23:18] <pointme> carlins's rssbot is at http://github.com/carlins/rssbot/

[23:18] <Juerd> Correct spelling helps in google too.

[23:19] <frettled> Are the numbers for ilbot2, ilogger2 and lisppaste3 fixed, or just chosen because the names without numbers were accidentally taken when the bots logged back on the last time?

[23:20] <moritz_> frettled: ilbot2 is the successer of ilbot, which sucked :-)

[23:20] *** lichtkind left
[23:20] <frettled> moritz_: :D

[23:21] *** meppl joined
[23:23] <frettled> perl6: my $a; say $a+$a;

[23:23] <p6eval> pugs: 0␤

[23:23] <p6eval> ..rakudo 97ced1: Use of uninitialized value␤Use of uninitialized value␤0␤

[23:23] <p6eval> ..elf 29026: Use of uninitialized value $a in addition (+) at (eval 122) line 4.␤Use of uninitialized value $a in addition (+) at (eval 122) line 4.␤0␤

[23:23] <frettled> hah

[23:23] <frettled> std: my $a; say $a+$a;

[23:24] <p6eval> std 29026: ok 00:02 109m␤

[23:24] *** pmurias left
[23:26] *** NorwayGeek left
[23:26] *** eternaleye joined
[23:27] *** markmont left
[23:28] *** markmont joined
[23:30] *** sunnavy left
[23:30] *** sunnavy joined
[23:31] *** nsh left
[23:31] *** PacoLinux left
[23:32] *** baest left
[23:32] *** sbp left
[23:32] *** frederico joined
[23:32] *** arnsholt left
[23:33] *** sbp joined
[23:33] *** arnsholt joined
[23:33] *** Khisanth left
[23:34] *** frederico left
[23:35] *** nsh joined
[23:35] <frettled> There, I think I got it all down now, let's see.

[23:35] <frettled> hrm, paste.lisp.org is irresponsive.

[23:37] <frettled> No, it's my ISP's international provider's link across the Atlantic that's buggy.  GRR.

[23:38] *** oZ]1 joined
[23:39] *** Whiteknight joined
[23:39] <frettled> whoa.  that killed Firefox, too.

[23:40] <frettled> good thing I saved my blog entry first, haha

[23:41] <frettled> http://pastebin.com/d473612bc

[23:41] <frettled> Juerd, jnthn, moritz_ - any corrections/comments?

[23:42] *** starek joined
[23:42] *** starek left
[23:42] <moritz_> frettled++

[23:43] <moritz_> frettled: mabe you could mention that mubot also handles aliases for karma tracking

[23:43] <frettled> What kind of aliases are those?

[23:43] <frettled> As in moritz_ and moritz being the same?

[23:43] <moritz_> for example kyle is know as KyleHa here on the channel, but as kyle on pugs, so he has two karma accounts on lambdabot

[23:43] <moritz_> right

[23:43] <jnthn> frettled: If you're noting that zaslon is written in Perl 6, it may be wroth noting that mubot also is. :-)

[23:44] <jnthn> Our own dog food. We're nomming it.

[23:44] <Wolfman2000> back from dinner. I have to say...I'm not a big fan of steak.

[23:44] <moritz_> jnthn: s/dog food/bot food/ ;-)

[23:44] <jnthn> ;-)

[23:44] <frettled> jnthn: ah, brilliant, thanks!

[23:44] <jnthn> Wolfman2000: Next time, I'll happily eat it for you...

[23:44] * jnthn <3 steak

[23:45] <Wolfman2000> jnthn: Fine a way to allow teleportation, and perhaps we'll have something.

[23:45] <s1n> heh, now if the irc bots saved all the logs and the log browser were hosted up off Web.pm (or some such), that would be dogfooding it :)

[23:45] <Wolfman2000> s1n: I think that's one of the goals.

[23:46] <carlin> frettled: pointme is also written in Perl 6

[23:46] <frettled> whoa, neat!

[23:46] <Wolfman2000> eternaleye: You here? Got a question for you regarding the new website.

[23:46] <quietfanatic> Hi #perl6

[23:46] <moritz_> hola

[23:46] *** kst left
[23:47] <frettled> okie-dokie

[23:47] <quietfanatic> jnthn: When executing "Foo is Bar {...}" the call to trait_mod:<is> has no knowledge of the name "Foo".  That's what I meant.

[23:47] *** Khisanth joined
[23:47] *** kst joined
[23:47] <Wolfman2000> Evening Khisanth. Surprised to see you in here.

[23:47] <frettled> Now all I need to do is to add my blog to zaslon, and, ehrm.

[23:48] <jnthn> quietfanatic: Ah, ok

[23:48] <jnthn> quietfanatic: That may well be fixable.

[23:48] <carlin> zaslon: help

[23:48] <zaslon> usage: add <name> <link to rss feed> | remove <name> | link <name>

[23:48] <frettled> hrm, zaslon doesn't answer privmsg with help.  *clickaurl*

[23:48] <moritz_> frettled: or play zaslon yourself ;-)

[23:48] <frettled> ah, there it happened anyway.

[23:48] *** oZ] left
[23:48] <s1n> what is zaslon? #feels out of the loop

[23:48] <jnthn> quietfanatic: I mean, we parsed the name already...

[23:48] <frettled> zaslon: add frettled http://howcaniexplainthis.blogspot.com/feeds/posts/default

[23:48] <zaslon> I am now following frettled's blog

[23:48] <jnthn> quietfanatic: I'll see what I can do. :-)

[23:49] *** reid05 left
[23:49] *** reid05 joined
[23:49] <carlin> lets see if it worked

[23:49] <carlin> zaslon: link frettled

[23:49] <quietfanatic> jnthn++

[23:49] <zaslon> frettled's blog is at Failure()<0xb71e5584>

[23:49] <frettled> heh

[23:49] <s1n> lol

[23:49] <carlin> aww :(

[23:49] <frettled> carlin: I suspect the problem is that blogspot uses Atom, not RSS.

[23:50] <moritz_> astrojp: add frettled http://howcaniexplainthis.blogspot.com/feeds/posts/default?alt=rss

[23:50] <moritz_> zaslon: add frettled http://howcaniexplainthis.blogspot.com/feeds/posts/default?alt=rss

[23:50] <zaslon> Sorry, I am already following frettled's blog

[23:50] <moritz_> zaslon: remove frettled 

[23:50] <zaslon> I am no longer following frettled's blog

[23:50] <moritz_> zaslon: add frettled http://howcaniexplainthis.blogspot.com/feeds/posts/default?alt=rss

[23:50] <zaslon> I am now following frettled's blog

[23:50] <moritz_> zaslon: link frettled 

[23:50] <zaslon> frettled's blog is at http://howcaniexplainthis.blogspot.com/

[23:51] <carlin> \o/

[23:51] <moritz_> astrojp: sorry for the mis-hilight

[23:51] <s1n> what's the general purpose of zaslon? linking perl6 blogs in irc?

[23:51] <frettled> yup

[23:51] <carlin> It won't announce the most recent post though

[23:51] <frettled> s1n: and what moritz_ suggested I blog about tonight, is what the bots here do.

[23:52] <s1n> frettled: okay, i'll have to read it after my system upgrade

[23:52] <moritz_> frettled++ nice post

[23:52] <moritz_> maybe we should link that on perl6.org or so

[23:53] <jnthn> It'd probably make the channel a little more understandable for those who are new to it. :-)

[23:53] <eternaleye> Wolfman2000: What's the question?

[23:53] <Wolfman2000> eternaleye: We didn't discuss all URL formats. When it comes to registering...should we attempt to keep the same URL, or can we allow a different URL to take place?

[23:54] *** pnate joined
[23:55] <s1n> pmichaud: ping

[23:55] <eternaleye> Wolfman2000: Not sure what you mean by 'when it comes to registering'. Are you asking whether we should use the same URL scheme for retrieving a user's posts regardless of whether it's registered vs. different based on registration status?

[23:55] <pugs_svn> r29027 | moritz++ | [perl6.org] link to bot explanations 

[23:55] <frettled> moritz_: sure, but perhaps better, copy the contents into a more permanent location than a blog.

[23:56] <frettled> moritz_: that makes it easier for other people to fix it when it gets out of date next week, too :D

[23:56] <Wolfman2000> eternaleye: ...no. The registration page will have a URL. Should that same URL be used for POST/submitting?

[23:56] <moritz_> frettled: good idea, will look into that tomorrow

[23:56] <eternaleye> Wolfman2000: Ah. I'd say no, since they do different things. Maybe URL/register and URL/submit ?

[23:57] <astrojp> moritz_: no problem. :)

[23:57] <moritz_> frettled: community/bots.html might be good

[23:57] <Wolfman2000> eternaleye: Basic no was all I needed. I feel awkward about using submit on its own.

[23:57] <moritz_> frettled: if I'm allowed to rip off your blog post for that ;-)

[23:57] <frettled> moritz_: sure, consider it some sort of public domain thingy text, copyright transferred to the Perl 6 community™

[23:57] <eternaleye> Wolfman2000: Well, if we use /submit, we can have that be the webinterface page for pasting something as well

[23:58] <moritz_> frettled++ again

[23:58] <Wolfman2000> eternaleye: Won't be that easy to work with on Catalyst from what I'm seeing. Let me get more done if possible.

[23:58] *** payload joined
[23:58] <moritz_> bed &

[23:58] <Wolfman2000> You can check out what I'm doing on my feather box if you want.

[23:58] <frettled> I doubt that the text would have what we call «verkshøyde» in Norwegian, that is, «a work worthy of (copyright) protection» :)

[23:58] <eternaleye> Wolfman2000: /submit for webinterface and /submit/auto for POST w/ client?

[23:58] <frettled> moritz_: goodnight!

[23:58] * frettled hits the sack as well.

[23:58] <moritz_> frettled: it's nice to ask anyway ;-)

[23:59] <frettled> Thanks for the inspiration, guys!

[23:59] <moritz_> sleep well too

[23:59] <frettled> moritz_: absolutely, that's my position as well.  Thanks for the assistance and idea!

[23:59] *** nihiliad joined
[23:59] <Wolfman2000> eternaleye: I'll see what I can do. No guarantee.

[23:59] <frettled> moritz_++ of course

