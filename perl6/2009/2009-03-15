[00:01] <masak> mberends: how you proceed depends on what you want to do with the local commit.

[00:01] <masak> mberends: besides, aren't you working in branches yet? :)

[00:01] <masak> you should try it, it's very nice.

[00:02] <jnthn> masak++ # good post!

[00:02] <masak> danke.

[00:03] <masak> I spent most of today writing it. :)

[00:03] <jnthn> Nice that you found motivation for blogging. :-)

[00:03] <mberends> pulled after temporarily  moving Makefile.in. Thanks for the refactoring!

[00:03] <masak> oh, I've had the motivation all along.

[00:03] <masak> mberends: you're welcome.

[00:04] <jnthn> Sure, I wasn't implying that you weren't motivated at other times too. :-)

[00:04] <masak> jnthn: no, I just mean that my blogging draught wasn't the cause of lack of motivation.

[00:04] <jnthn> masak: On Windows users - hey, I'm one. :-P

[00:04] <masak> jnthn: I know. :)

[00:05] <jnthn> I guess I'm just too busy writing Rakudo, to write code running on Rakudo.

[00:05] <masak> some of my best friends are Windows users.

[00:05] <jnthn> (Though hopefully that will change soon.)

[00:05] <masak> jnthn: with me it's almost the other way around.

[00:05] <jnthn> Well, we need both.

[00:05] <masak> aye.

[00:06] <jnthn> So it's good there are folks doing either side of it. :-)

[00:06] <masak> jnthn: what do you plan to write in Perl 6?

[00:06] <mberends> jnthn, do you use Cygwin?

[00:06] *** sri_kraih_ left
[00:06] <jnthn> mberends: No

[00:06] <jnthn> masak: Grammar::Generative at first

[00:07] <masak> jnthn: sounds cool, though I'm not sure what that implies.

[00:07] <jnthn> Using grammars to generate text output from a data structure.

[00:08] <jnthn> As in, the opposite on what .parse does today (takes text and produces a data structure)

[00:08] <jnthn> *of what...

[00:08] <masak> jnthn: nice.

[00:08] <jnthn> masak: If I an make it work. ;-)

[00:08] <masak> :)

[00:08] <masak> release early and often. :)

[00:08] <masak> it's very late. I should start thinking about biking home.

[00:08] <jnthn> Wow, yes.

[00:08] <skids> jnthn: ever thought of applying grammars to network packets?

[00:09] <masak> thanks, #perl6, for today.

[00:09] *** masak left
[00:09] <jnthn> skids: Not in much detail, but I don't see why you couldn't.

[00:10] <skids> checksums could be a fun form of torture there :-)

[00:13] *** pmurias left
[00:14] *** Limbic_Region joined
[00:24] *** mberends left
[00:32] *** nihiliad joined
[00:37] <skids> rakudo: my $i = 1; my @a = ($i++, $i, $i++).say

[00:37] <p6eval> rakudo 5b1ff9: OUTPUT«132␤»

[00:38] <jnthn> skids: Well, I guess embedded closures make it less bad...

[00:39] *** |MoC| joined
[00:39] * jnthn -> sleep

[00:45] *** meppl joined
[00:56] *** M_o_C left
[01:02] *** mikehh left
[01:06] *** ujwalic left
[01:09] *** ruoso left
[01:21] *** awarefish left
[01:35] *** cai_ joined
[01:43] *** kate21de1 left
[01:50] *** |MoC| is now known as M_o_C

[01:51] *** ujwalic joined
[01:59] *** PeepOle left
[02:04] *** nbrown left
[02:20] *** wknight8111 joined
[02:21] *** Whiteknight left
[02:26] *** wknight8111 left
[02:30] <literal> perl6: my %h = <a b c>; say %h<a b>.perl

[02:30] <p6eval> rakudo 5b1ff9: OUTPUT«Odd number of elements found where hash expected␤current instr.: 'parrot;Perl6Hash;!STORE' pc 7586 (src/classes/Hash.pir:154)␤»

[02:30] <p6eval> ..pugs: OUTPUT«*** Odd number of elements found where hash expected: VList [VStr "a",VStr "b",VStr "c"]␤    at /tmp/7DYxMrPwCj line 1, column 1-16␤»

[02:30] <p6eval> ..elf 25833: OUTPUT«Not a HASH reference at ./elf_h line 251.␤ at ./elf_h line 4377␤»

[02:30] <literal> oops

[02:31] <literal> perl6: my %h = (a=>1, b=>1 c=>1); say %h<a b>.perl

[02:31] *** DemoFreak left
[02:31] <p6eval> rakudo 5b1ff9: OUTPUT«Statement not terminated properly at line 1, near "c=>1); say"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:31] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "%h"␤    expecting "=", operator, ")", context, ":" or "("␤    at /tmp/jwqCoQqFCP line 1, column 4␤»

[02:31] <p6eval> ..elf 25833: OUTPUT«Parse error in: /tmp/sZc5kikaIZ␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: my %h = (a=>1, b=>1 c=>1); say␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[02:31] <p6eval> ..STD_r...

[02:31] <literal> perl6: my %h = <a b c d>; say %h<a b>.perl

[02:31] <p6eval> rakudo 5b1ff9: OUTPUT«["b", undef]␤»

[02:31] <p6eval> ..pugs: OUTPUT«\("b", undef)␤»

[02:31] <p6eval> ..elf 25833: OUTPUT«Not a HASH reference at ./elf_h line 251.␤ at ./elf_h line 4377␤»

[02:31] <literal> perl6: my %h = <a b c d>; say %h<a c>.perl

[02:31] <p6eval> rakudo 5b1ff9: OUTPUT«["b", "d"]␤»

[02:31] <p6eval> ..pugs: OUTPUT«\("b", "d")␤»

[02:31] <p6eval> ..elf 25833: OUTPUT«Not a HASH reference at ./elf_h line 251.␤ at ./elf_h line 4377␤»

[02:32] <literal> k

[02:33] <TimToady> perl6: my %h = enum <a b c>; say %h<a b>.perl

[02:33] <p6eval> rakudo 5b1ff9: OUTPUT«[0, 1]␤»

[02:33] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&enum"␤    at /tmp/6xjqrO87qc line 1, column 9-21␤»

[02:33] <p6eval> ..elf 25833: OUTPUT«Undefined subroutine &GLOBAL::enum called at (eval 125) line 3.␤ at ./elf_h line 4377␤»

[02:34] *** simcop2387 joined
[02:34] *** Tene_ joined
[02:34] <TimToady> literal: were you trying to do that?

[02:45] *** Tene left
[02:51] <literal> I just making sure that %hash<a b c> was valid slice syntax, I wasn't sure

[02:51] <TimToady> nodnod

[02:52] *** alester joined
[02:55] *** meteorjay joined
[02:57] *** cai__ joined
[03:06] *** ujwalic left
[03:14] *** cai_ left
[03:14] <diakopter> std: <>

[03:14] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Obsolete use of <>; in Perl 6 please use =<> or () instead at /tmp/wZVHzwSVqW line 1:␤------> [32m<[31m>[0m␤FAILED 00:02 34m␤»

[03:15] <diakopter> std: =<>

[03:15] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:15] <diakopter> std: =<>()

[03:15] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:15] <diakopter> std: =<>()[]

[03:15] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:16] <diakopter> std: =<>()[]<>()[]

[03:16] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:16] * diakopter blinks

[03:16] <diakopter> rakudo: =<>()[]<>()[]

[03:16] <p6eval> rakudo 5b1ff9: RESULT«invoke() not implemented in class 'ResizablePMCArray'␤current instr.: '_block20' pc 139 (EVAL_15:66)␤»

[03:17] <diakopter> std: =<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]<>()[]

[03:17] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:18] <diakopter> std: 3

[03:18] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:18] *** M_o_C left
[03:18] <diakopter> std: return 3

[03:18] <diakopter> std: print 3

[03:18] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:18] <diakopter> std: yield 3

[03:19] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   yield used at 1 ␤ok 00:02 34m␤»

[03:19] <diakopter> std: use v5; exit(1)

[03:19] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:19] *** justatheory left
[03:20] <diakopter> std: =<><><><><><><>

[03:20] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 53m␤»

[03:20] <diakopter> ooo 53m

[03:20] <diakopter> std: =<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

[03:20] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:21] <diakopter> std: ()()

[03:21] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:21] <diakopter> std: ()<>()

[03:21] *** amoc left
[03:21] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:21] * diakopter can't lose

[03:21] <diakopter> I mean, can't win.

[03:21] <TimToady> std: say =<>

[03:22] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:22] <TimToady> works better when it isn't a pod comment :)

[03:22] * diakopter tries not to laugh

[03:22] <diakopter> well, rakudo liked it

[03:23] <diakopter> std: say =<>()[]<>()[]

[03:23] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:23] <TimToady> shouldn't you thrown a few {} in there for good measure?

[03:23] <diakopter> sure ;D

[03:24] <diakopter> std: say =<>()[{}]<>()[{}]

[03:24] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:26] <diakopter> std: =<>('with')[{'only'}]< three bracket pairs >('morse')[{'code'}]

[03:26] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:27] <diakopter> what's the "Undefined" result mean

[03:28] <diakopter> hm; is that a segfault

[03:28] <TimToady> probably YAML complaining about the return

[03:29] <diakopter> speaking of, viv's YAML contains NULs

[03:29] <TimToady> on what input?

[03:29] <diakopter> 'use v6; say 3'

[03:30] <diakopter> std: use use

[03:30] <p6eval> std 25833: OUTPUT«Can't call method "Str" on an undefined value at Cursor.pm line 1110.␤FAILED 00:02 33m␤»

[03:30] <diakopter> that's a new one

[03:31] * diakopter rips std a new one

[03:31] <TimToady> std: use use Foo;

[03:31] <p6eval> std 25833: OUTPUT«Undeclared name:␤      Foo used at 1 ␤ok 00:02 34m␤»

[03:32] <diakopter> std: use use;

[03:32] <p6eval> std 25833: OUTPUT«ok 00:02 33m␤»

[03:32] <diakopter> std: use use used; ;)

[03:32] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/Aq1CWVfpzE line 1:␤------> [32muse use used; ;[31m)[0m␤FAILED 00:02 34m␤»

[03:33] <diakopter> hrm

[03:33] <TimToady> std: use

[03:33] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:33] <TimToady> std: use 

[03:33] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:33] <TimToady> std: use ()

[03:33] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:34] <diakopter> std: use '';

[03:34] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:34] <s1n> std: use;

[03:34] <diakopter> std: use .();

[03:34] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:34] <s1n> std: use .

[03:34] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Obsolete use of . to concatenate strings; in Perl 6 please use ~ instead at /tmp/0qRISO0mo7 line 0:␤------> [32m[31m[0m␤FAILED 00:02 34m␤»

[03:34] <TimToady> use Foo ()

[03:35] <TimToady> std: use Foo ()

[03:35] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:35] <diakopter> std: use lax; !();

[03:35] <p6eval> std 25833: OUTPUT«ok 00:02 35m␤»

[03:35] <diakopter> std: !use lax;

[03:35] <p6eval> std 25833: OUTPUT«Undeclared routines:␤  lax used at 1 ␤   use used at 1 ␤ok 00:02 36m␤»

[03:36] <s1n> std: use 'Foo' ()

[03:36] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/5eDlhBxcaN line 1:␤------> [32muse 'Foo' [31m()[0m␤    expecting any of:␤     infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤FAILED 00:02 34m␤»

[03:36] <diakopter> std: use !Bar;

[03:36] <p6eval> std 25833: OUTPUT«Undeclared name:␤      Bar used at 1 ␤Undeclared routine:␤ use used at 1 ␤ok 00:02 36m␤»

[03:37] <diakopter> std: use Bar!;

[03:37] <p6eval> std 25833: OUTPUT«Can't call method "Str" on an undefined value at Cursor.pm line 1110.␤FAILED 00:02 35m␤»

[03:37] <s1n> std: use &Foo ()

[03:37] <diakopter> there's that oddity again

[03:37] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/2xTRy0oZ7t line 1:␤------> [32muse &Foo [31m()[0m␤    expecting any of:␤      infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤FAILED 00:04 49m␤»

[03:37] <TimToady> has something to do with <arglist>?

[03:37] <diakopter> std: use C!

[03:37] <p6eval> std 25833: OUTPUT«Can't call method "Str" on an undefined value at Cursor.pm line 1110.␤FAILED 00:02 35m␤»

[03:37] <diakopter> std: C!

[03:38] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/0p9qUvXXpv line 1:␤------> [32mC![31m[0m␤    expecting any of:␤       infix or meta-infix␤      infix stopper␤    standard stopper␤ terminator␤FAILED 00:02 34m␤»

[03:38] <diakopter> std: C!!.()

[03:38] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/n5B6jMxOGu line 1:␤------> [32mC[31m!!.()[0m␤    expecting any of:␤   POST␤   argument list␤      infix or meta-infix␤      infix stopper␤    infix_prefix_meta_operator␤       postfix␤       

[03:38] <p6eval> ..postfix_prefix_meta_operator␤       standard stopper␤...

[03:38] <diakopter> std: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

[03:38] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/LlYpi1FsVU line 1:␤------> [32m!!![31m!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![0m␤    expecting any of:␤      POST␤   infix or meta-infix␤        infix stopper␤    infix_prefix_meta_operator␤       postfix␤    

[03:38] <p6eval> ..   postfix_prefix_meta_opera...

[03:38] <diakopter> oh, it liked 3 of them

[03:38] <TimToady> std: !!! !!! !!! !!! !!!

[03:38] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:39] <s1n> std: ??? !!!

[03:39] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:39] <s1n> what does that even mean?

[03:39] <diakopter> warn then die?

[03:39] <TimToady> it means warn die

[03:39] <TimToady> yes

[03:39] <s1n> so ??? is warn?

[03:40] <TimToady> !!! is die and ... is fail

[03:40] <s1n> std: !!!...???

[03:40] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:40] <s1n> heh

[03:40] <diakopter> and TODO throws NotImplementedException

[03:40] <s1n> rakudo: !!!...???

[03:40] <p6eval> rakudo 5b1ff9: OUTPUT«Statement not terminated properly at line 1, near "???"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[03:41] <s1n> std: use ???

[03:41] <diakopter> std: TODO it

[03:41] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:41] <p6eval> std 25833: OUTPUT«Undeclared name:␤      TODO used at 1 ␤Undeclared routine:␤        it used at 1 ␤ok 00:02 34m␤»

[03:41] <s1n> std: TODO.perl

[03:41] <p6eval> std 25833: OUTPUT«Undeclared name:␤      TODO used at 1 ␤ok 00:02 34m␤»

[03:41] <diakopter> (kidding about TODO)

[03:42] <diakopter> std: ...()

[03:42] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:42] <s1n> std: diakopter!was :kidding

[03:42] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   diakopter used at 1 ␤ok 00:02 34m␤»

[03:42] <diakopter> std: .>.()

[03:42] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/75IrTIdXRz line 1:␤------> [32m[31m.>.()[0m␤    expecting any of:␤        prefix or noun␤   statement end␤    statement list␤   whitespace␤FAILED 00:02 34m␤»

[03:42] <diakopter> std: .>=.()

[03:42] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/Eiw6tjyfwx line 1:␤------> [32m[31m.>=.()[0m␤    expecting any of:␤       prefix or noun␤   statement end␤    statement list␤   whitespace␤FAILED 00:02 34m␤»

[03:42] <s1n> std: <\ >

[03:42] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:43] <s1n> wee

[03:43] <s1n> backslash-space is unspace, right?

[03:43] <diakopter> std: <html><body></body></html>

[03:43] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:43] <s1n> sweet

[03:44] <s1n> std: for\ (1..2){}

[03:44] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   for used at 1 ␤ok 00:02 34m␤»

[03:44] <s1n> std: <\ >

[03:44] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:44] <diakopter> std: \ 

[03:44] <s1n> isn't that wrong?

[03:44] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:44] <diakopter> std: \ \ \ \ \ \ \ 

[03:45] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:45] <TimToady> std:

[03:45] <diakopter> std: \                                                       \ 

[03:45] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:45] <s1n> std: \h\e\l\l\o\ \w\o\r\l\d\ 

[03:45] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/Gz3MnKAvbZ line 1:␤------> [32m\h\[31me\l\l\o\ \w\o\r\l\d\[0m␤    expecting any of:␤        postfix␤  postfix_prefix_meta_operator␤FAILED 00:02 34m␤»

[03:45] <TimToady> std:                            # I am a comment

[03:45] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:46] <s1n> std: \# am i a comment?

[03:46] <diakopter> std: .\                        ()

[03:46] <p6eval> std 25833: OUTPUT«Undefined␤ok 00:02 33m␤»

[03:46] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:46] <s1n> std: use \#{yay} Foo

[03:46] <p6eval> std 25833: OUTPUT«Can't call method "Str" on an undefined value at Cursor.pm line 1110.␤FAILED 00:02 34m␤»

[03:46] <s1n> uhoh

[03:47] * diakopter suspects p6eval borkery

[03:47] <diakopter> (blame it on the messenger)

[03:47] <s1n> std: die

[03:47] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:47] <TimToady> cheerfully, even

[03:47] <s1n> std: !die???...!!!

[03:47] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/a14aPScGP7 line 0:␤------> [32m[31m[0m␤    expecting noun␤FAILED 00:02 36m␤»

[03:47] <TimToady> listops have to have \s

[03:47] <diakopter> std: use rakudo*;

[03:47] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:48] <diakopter> std: use *rakudo;

[03:48] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/LogI6TFa6b line 1:␤------> [32muse *[31mrakudo;[0m␤    expecting any of:␤     POST␤   infix or meta-infix␤        infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       standard stopper␤

[03:48] <p6eval> ..statement modifier loop␤  terminator␤...

[03:48] <s1n> std: use *

[03:48] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:48] <diakopter> std: use *;

[03:48] <s1n> std: use 1..2

[03:48] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:48] <TimToady> std: use 1.2

[03:48] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:48] <TimToady> std: use 1.2.3

[03:48] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/cH8C0nSOJA line 1:␤------> [32muse 1.2.[31m3[0m␤    expecting postfix_prefix_meta_operator␤FAILED 00:02 34m␤»

[03:48] <s1n> std: use {false}

[03:48] <TimToady> std: use v1.2.3

[03:48] <diakopter> std: use 1.2;

[03:48] <p6eval> std 25833: OUTPUT«Undeclared routines:␤  false used at 1 ␤ use used at 1 ␤ok 00:02 34m␤»

[03:48] <p6eval> std 25833: OUTPUT«ok 00:02 33m␤»

[03:48] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:49] <s1n> std: false

[03:49] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   false used at 1 ␤ok 00:02 34m␤»

[03:49] <diakopter> std: False

[03:49] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:49] <s1n> std: use {False}

[03:49] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:49] <s1n> hmm

[03:49] <TimToady> use is counting the name as part of its token

[03:49] <s1n> i bet this looks highly annoying to bystanders :)

[03:50] <diakopter> std: say sub {}; <<>>

[03:50] <s1n> std: use\

[03:50] <TimToady> or perhaps it's backtracking too aggresively

[03:50] <p6eval> std 25833: OUTPUT«ok 00:04 34m␤»

[03:50] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:50] <s1n> std: {\ False\ }

[03:50] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:50] <s1n> sanity

[03:50] <TimToady> must be backtracking badly

[03:50] <s1n> std: \ use

[03:50] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:51] <s1n> std: \ use Foo

[03:51] <p6eval> std 25833: OUTPUT«Can't call method "Str" on an undefined value at Cursor.pm line 1110.␤FAILED 00:02 33m␤»

[03:51] <s1n> hmm

[03:51] <diakopter> std: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[03:51] <p6eval> std 25833: OUTPUT«ok 00:04 34m␤»

[03:51] <s1n> sweet

[03:51] <diakopter> trying to stacko

[03:52] <diakopter> though, if STD.pm wouldn't do it...

[03:52] <s1n> std: use 'Foo'

[03:52] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:52] <diakopter> std: {use Python}

[03:52] <s1n> std: require DidntEvenCheckTheSpecForThis

[03:52] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:53] <s1n> require is still around?

[03:53] <s1n> std: require use

[03:53] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:53] <s1n> nice

[03:53] <diakopter> std: {need require}

[03:53] <p6eval> std 25833: OUTPUT«Undeclared routines:␤  need used at 1 ␤  require used at 1 ␤ok 00:02 35m␤»

[03:53] <s1n> std: require need use

[03:53] <diakopter> std: {want 1}

[03:53] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/UVfaSuYJ7a line 1:␤------> [32mrequire need [31muse[0m␤    expecting any of:␤ infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤FAILED 00:02 34m␤»

[03:53] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:53] <diakopter> std: {want 1}

[03:53] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:53] <diakopter> std: {want want 1}

[03:53] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:53] <s1n> std: require use; require need; require want

[03:53] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:54] <diakopter> std: {want want want use P}

[03:54] <p6eval> std 25833: OUTPUT«Undeclared name:␤      P used at 1 ␤Undeclared routine:␤   use used at 1 ␤ok 00:03 38m␤»

[03:54] <s1n> std: want want

[03:54] <diakopter> std: {want want want use P;}

[03:54] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:54] <p6eval> std 25833: OUTPUT«Undeclared name:␤      P used at 1 ␤Undeclared routine:␤   use used at 1 ␤ok 00:02 34m␤»

[03:54] <diakopter> std: {want want want P;}

[03:54] <p6eval> std 25833: OUTPUT«Undeclared name:␤      P used at 1 ␤ok 00:02 34m␤»

[03:54] <s1n> std: \ require 'Foo'

[03:54] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:55] <diakopter> std: use Smileys; (:  ;)

[03:55] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unable to parse parenthesized expression; couldn't find final ')' at /tmp/YopmV3MsSz line 1:␤------> [32muse Smileys; ([31m:  ;)[0m␤    expecting any of:␤       prefix or noun␤   semicolon list␤   statement end␤    whitespace␤FAILED 00:02 34m␤»

[03:55] <s1n> TimToady: so i can't use a Str with use?

[03:55] <s1n> diakopter: the first smily was okay :)

[03:55] <diakopter> std: my $bar; use $bar;

[03:55] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   use used at 1 ␤ok 00:02 35m␤»

[03:56] <diakopter> std: chomp;

[03:56] <s1n> playing with the std is fun!

[03:56] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:56] <diakopter> trying to catch STD is fun!

[03:56] <s1n> std: std:

[03:56] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Illegal redeclaration of 'std' at /tmp/a6M6D6xApT line 0:␤------> [32m[31m[0m␤    expecting statement end␤FAILED 00:02 33m␤»

[03:56] <s1n> heh

[03:56] <diakopter> std: std.()

[03:57] <s1n> std: :std

[03:57] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   std used at 1 ␤ok 00:02 34m␤»

[03:57] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:57] <diakopter> std: std()

[03:57] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   std used at 1 ␤ok 00:02 34m␤»

[03:57] <diakopter> std: std

[03:57] <s1n> std: .std

[03:57] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   std used at 1 ␤ok 00:02 34m␤»

[03:57] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:57] <s1n> yay!

[03:57] <diakopter> heh

[03:57] <s1n> rakudo: .std

[03:57] <p6eval> rakudo 5b1ff9: OUTPUT«Method 'std' not found for invocant of class 'Failure'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[03:57] <s1n> :(

[03:57] <diakopter> rakudo: this

[03:57] <p6eval> rakudo 5b1ff9: OUTPUT«Could not find non-existent sub this␤current instr.: '_block14' pc 53 (EVAL_16:38)␤»

[03:57] <s1n> std: :)

[03:57] <diakopter> rakudo: .this

[03:57] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/5Ir1X4LIb1 line 1:␤------> [32m[31m:)[0m␤    expecting any of:␤   prefix or noun␤   statement end␤    statement list␤   whitespace␤FAILED 00:02 34m␤»

[03:58] <p6eval> rakudo 5b1ff9: OUTPUT«Method 'this' not found for invocant of class 'Failure'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[03:58] <s1n> std: :

[03:58] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/KPHjw0jHrR line 1:␤------> [32m[31m:[0m␤    expecting any of:␤    prefix or noun␤   statement end␤    statement list␤   whitespace␤FAILED 00:02 34m␤»

[03:58] <diakopter> rakudo: .eval

[03:58] <p6eval> rakudo 5b1ff9: OUTPUT«Method 'eval' not found for invocant of class 'Failure'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[03:58] <diakopter> rakudo: .perl

[03:58] <p6eval> rakudo 5b1ff9: RESULT«"undef"»

[03:58] <s1n> yay

[03:58] <diakopter> rakudo: .perl.eval

[03:58] <p6eval> rakudo 5b1ff9: OUTPUT«Method 'eval' not found for invocant of class 'String'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[03:58] <diakopter> rakudo: .perl.invoke()

[03:58] <p6eval> rakudo 5b1ff9: OUTPUT«Method 'invoke' not found for invocant of class 'String'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[03:58] <s1n> rakudo: "True".eval

[03:58] *** fuzzbox joined
[03:58] <p6eval> rakudo 5b1ff9: OUTPUT«Method 'eval' not found for invocant of class 'Str'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[03:58] *** cai__ left
[03:59] <s1n> rakudo: eval "True"

[03:59] <p6eval> rakudo 5b1ff9: RESULT«.new()»

[03:59] <diakopter> std: use TimToady;

[03:59] <p6eval> std 25833: OUTPUT«ok 00:02 33m␤»

[03:59] <s1n> std: .new()

[03:59] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[03:59] <diakopter> std: /.is_cool

[03:59] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unable to parse regex; couldn't find final '/' at /tmp/VnesSTom1K line 0:␤------> [32m[31m[0m␤    expecting any of:␤     infix stopper␤    quantifier␤       rxinfix␤        standard stopper␤   ws␤FAILED 00:02 34m␤»

[03:59] <s1n> std: $\ *YAY

[03:59] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Obsolete use of $\ variable; in Perl 6 please use the filehandle's :ors attribute instead at /tmp/dmXhaMk2nS line 1:␤------> [32m$\[31m *YAY[0m␤FAILED 00:02 34m␤»

[03:59] <s1n> uh oh

[04:00] <diakopter> std: .abs

[04:00] * diakopter waits

[04:00] <p6eval> std 25833: OUTPUT«ok 00:05 40m␤»

[04:00] <s1n> std: $t = 1

[04:00] <p6eval> std 25833: OUTPUT«Potential difficulties:␤  Variable $t is not predeclared at /tmp/gB3rJyl0PU line 1:␤------> [32m$t[31m = 1[0m␤ok 00:02 35m␤»

[04:00] <diakopter> std: .abs.abs.abs.abs

[04:00] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:00] <s1n> std: my $t = 1

[04:00] <p6eval> std 25833: OUTPUT«ok 00:02 35m␤»

[04:00] <s1n> std: my $\ t = 1

[04:00] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Malformed "my" declaration␤Obsolete use of $\ variable; in Perl 6 please use the filehandle's :ors attribute instead at /tmp/maeA9ojjgC line 1:␤------> [32mmy $\[31m t = 1[0m␤FAILED 00:02 34m␤»

[04:00] <diakopter> std: use lax; $t = 1;

[04:00] <s1n> nice

[04:01] <p6eval> std 25833: OUTPUT«Potential difficulties:␤  Variable $t is not predeclared at /tmp/Ip4djFRsSN line 1:␤------> [32muse lax; $t[31m = 1;[0m␤ok 00:02 35m␤»

[04:01] <s1n> not very laxy

[04:01] <diakopter> std: use strict;

[04:01] <p6eval> std 25833: OUTPUT«ok 00:02 33m␤»

[04:01] *** cai__ joined
[04:01] <diakopter> std: use v5 { boo };

[04:01] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/rr43ct9yU0 line 1:␤------> [32muse v5 [31m{ boo };[0m␤    expecting terminator␤FAILED 00:02 33m␤»

[04:01] <s1n> std: my @\ t

[04:01] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/Fx9tJwVJqu line 1:␤------> [32mmy @\ [31mt[0m␤    expecting any of:␤  POST␤   infix or meta-infix␤        infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       shape definition␤ standard

[04:01] <p6eval> ..stopper␤       statement modifier loop...

[04:01] <diakopter> std: use v5; { boo };

[04:02] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   boo used at 1 ␤ok 00:02 34m␤»

[04:02] <s1n> TimToady: it seems unspace can't be mixed with some twigils

[04:02] <s1n> std: $$$

[04:02] <TimToady> use v5 is currently a no-op

[04:03] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Obsolete use of $$ variable; in Perl 6 please use $::PID instead at /tmp/hGrYo4mmT2 line 1:␤------> [32m$$$[31m[0m␤FAILED 00:02 34m␤»

[04:03] <s1n> std: $\ ::PID

[04:03] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Obsolete use of $\ variable; in Perl 6 please use the filehandle's :ors attribute instead at /tmp/MXLggf9j9l line 1:␤------> [32m$\[31m ::PID[0m␤FAILED 00:02 34m␤»

[04:03] <s1n> std: $:\ :PID

[04:03] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:04] <s1n> std: $::\ P\ I\ D

[04:04] <diakopter> std: (True) x!! (False)

[04:04] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/b77UdHqP4Z line 1:␤------> [32m$::\ [31mP\ I\ D[0m␤    expecting any of:␤     infix or meta-infix␤      infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       standard stopper␤ statement modifier

[04:04] <p6eval> ..loop␤  terminator␤     unspa...

[04:04] <p6eval> std 25833: OUTPUT«ok 00:02 36m␤»

[04:04] <diakopter> std: (True) x!! (False)

[04:04] <p6eval> std 25833: OUTPUT«ok 00:02 36m␤»

[04:04] <diakopter> pugs: (True) x!! (False)

[04:04] <p6eval> pugs: RESULT«""»

[04:04] <diakopter> rakudo: (True) x!! (False)

[04:04] <p6eval> rakudo 5b1ff9: RESULT«""»

[04:04] <diakopter> hm

[04:05] <diakopter> rakudo: (False) x!! (True)

[04:05] <p6eval> rakudo 5b1ff9: RESULT«"0"»

[04:05] <diakopter> rakudo: (False) x (True)

[04:05] <p6eval> rakudo 5b1ff9: RESULT«"0"»

[04:05] <s1n> std: OUTPUT«ok 00:02 34m␤»

[04:06] <p6eval> std 25833: OUTPUT«Undeclared name:␤      OUTPUT used at 1 ␤ok 00:04 34m␤»

[04:06] <s1n> std: «ok 00:02 34m␤»

[04:06] <diakopter> std: 2253325 235235

[04:06] <p6eval> std 25833: OUTPUT«ok 00:04 34m␤»

[04:06] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/6f3c8P3IOB line 1:␤------> [32m2253325 [31m235235[0m␤    expecting any of:␤   infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤FAILED 00:02 34m␤»

[04:06] <diakopter> std: 2253325\ 235235

[04:06] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/jKHoAuhuDR line 1:␤------> [32m2253325\ [31m235235[0m␤    expecting any of:␤  infix or meta-infix␤      infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       standard stopper␤ statement modifier

[04:06] <p6eval> ..loop␤  terminator␤     un...

[04:06] <s1n> what the heck does that << mean?

[04:07] <s1n> rakudo: «ok 00:02 34»

[04:07] <diakopter> std: nibble

[04:07] <p6eval> rakudo 5b1ff9: OUTPUT«Syntax error at line 1, near "\x{ab}ok 00:02 "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[04:07] <p6eval> std 25833: OUTPUT«Undeclared routine:␤   nibble used at 1 ␤ok 00:02 34m␤»

[04:07] <diakopter> std: //

[04:07] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/41Lsm8oPxN line 1:␤------> [32m/[31m/[0m␤    expecting ws␤FAILED 00:02 36m␤»

[04:07] <diakopter> std: / /

[04:07] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/WNFpQ1mrlM line 1:␤------> [32m/ [31m/[0m␤    expecting ws␤FAILED 00:02 36m␤»

[04:07] <s1n> std: /\ /

[04:07] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:07] <s1n> heh

[04:07] <diakopter> heh

[04:07] <TimToady> std: / <?> /

[04:07] <p6eval> std 25833: OUTPUT«ok 00:02 35m␤»

[04:07] <s1n> seems like it has issues with unspace...

[04:08] <diakopter> std: \/ \/

[04:08] <s1n> std: /\ <\ >\ /

[04:08] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unable to parse regex; couldn't find final '/' at /tmp/PzVlnPl1X6 line 0:␤------> [32m[31m[0m␤    expecting any of:␤     infix stopper␤    quantifier␤       rxinfix␤        standard stopper␤   ws␤FAILED 00:02 34m␤»

[04:08] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unrecognized regex assertion at /tmp/P9H6xul2EC line 1:␤------> [32m/\ <\ [31m>\ /[0m␤    expecting any of:␤     assertion␤        name␤   unspace␤FAILED 00:02 34m␤»

[04:08] <s1n> std: <?>

[04:08] *** nbrown04 joined
[04:08] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:08] <diakopter> std: _\|/_

[04:08] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/A7mZIMyyy2 line 1:␤------> [32m_\[31m|/_[0m␤    expecting any of:␤  postfix␤  postfix_prefix_meta_operator␤FAILED 00:02 34m␤»

[04:08] <s1n> std: <\ ?>

[04:08] <diakopter> std: _\o/_

[04:08] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:08] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/9dWDycXLqN line 1:␤------> [32m_\[31mo/_[0m␤    expecting any of:␤  postfix␤  postfix_prefix_meta_operator␤FAILED 00:02 34m␤»

[04:08] <diakopter> std: /<>/

[04:08] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unrecognized regex assertion at /tmp/ZkHtx4jB0y line 1:␤------> [32m/<[31m>/[0m␤    expecting any of:␤   assertion␤        name␤FAILED 00:02 34m␤»

[04:09] <diakopter> std: /<\ >/

[04:09] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unrecognized regex assertion at /tmp/8eBYRQCufr line 1:␤------> [32m/<\ [31m>/[0m␤    expecting any of:␤ assertion␤        name␤   unspace␤FAILED 00:02 34m␤»

[04:09] <diakopter> std: /< >/

[04:09] <p6eval> std 25833: OUTPUT«ok 00:03 35m␤»

[04:09] <diakopter> !!!

[04:09] <diakopter> std: /<.>/

[04:09] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:09] <s1n> std: ^%%^^&#@!$^*#@(*%&#()%&*

[04:09] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/YiCEPe1dMK line 1:␤------> [32m^[31m%%^^&#@!$^*#@(*%&#()%&*[0m␤    expecting any of:␤     noun␤   prefix or meta-prefix␤      prefix_postfix_meta_operator␤     variable␤       whitespace␤FAILED 00:02 36m␤»

[04:09] <s1n> heh

[04:09] <TimToady> std: /< a b c >/

[04:09] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:09] <TimToady> that's what < > parses as

[04:10] <s1n> std: < >

[04:10] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:10] *** meppuru joined
[04:10] <diakopter> std: \<\>

[04:10] <s1n> std: <#%>@<@@@@@@<>!$>%<><$@>$!@?>#>!@%$*@&(#%<>><>?><@%>@%><#(*@&*$&(*(*&%>@<>>*(#&%(@#$@<>$@#()!@*(%^&)!@(_($@_)(@*^&($$>??(*&^$)(^

[04:10] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/oWwgZoegf7 line 1:␤------> [32m\<\>[31m[0m␤    expecting escape␤FAILED 00:03 36m␤»

[04:10] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/L34lesAJRG line 1:␤------> [32m<#%>[31m@<@@@@@@<>!$>%<><$@>$!@?>#>!@%$*@&(#%<>>[0m␤    expecting any of:␤     POST␤   infix or meta-infix␤        infix stopper␤    postfix␤        postfix_prefix_meta_operator␤ 

[04:10] <p6eval> ..     standard stopper␤ stat...

[04:10] <diakopter> std: \\

[04:10] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/O9IXhEpjz5 line 1:␤------> [32m\[31m\[0m␤    expecting any of:␤   capterm␤  prefix or noun␤FAILED 00:02 35m␤»

[04:10] <s1n> yay, it properly dies on complete trash, and lots of it

[04:10] *** nbrown04 left
[04:11] <diakopter> std: 3 // 2

[04:11] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:11] <s1n> std: 3 /\ /2

[04:11] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unable to parse regex; couldn't find final '/' at /tmp/5JvpcekI59 line 0:␤------> [32m[31m[0m␤    expecting any of:␤     infix stopper␤    quantifier␤       rxinfix␤        standard stopper␤   ws␤FAILED 00:02 34m␤»

[04:11] <diakopter> std: 3 //// 2

[04:11] *** cai__ left
[04:11] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/MGM88KwUXV line 1:␤------> [32m3 ///[31m/ 2[0m␤    expecting ws␤FAILED 00:02 36m␤»

[04:11] <diakopter> std: 3 /// 2

[04:11] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unable to parse regex; couldn't find final '/' at /tmp/i6jmlt5KNN line 0:␤------> [32m[31m[0m␤    expecting any of:␤     infix stopper␤    quantifier␤       rxinfix␤        standard stopper␤   ws␤FAILED 00:02 34m␤»

[04:11] <s1n> std: 3\  /\ /\  2

[04:11] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unable to parse regex; couldn't find final '/' at /tmp/MW1HHT7G9j line 0:␤------> [32m[31m[0m␤    expecting any of:␤     infix stopper␤    quantifier␤       rxinfix␤        standard stopper␤   ws␤FAILED 00:02 34m␤»

[04:11] <diakopter> std: 3 / / / 2

[04:12] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/GZjAfcRuDw line 1:␤------> [32m3 / / [31m/ 2[0m␤    expecting ws␤FAILED 00:02 36m␤»

[04:12] <diakopter> std: 3 / /~/ 2

[04:12] <s1n> std: 3\ /\/\/ 2

[04:12] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/qLnsiPSQv5 line 1:␤------> [32m3 / /[31m~/ 2[0m␤    expecting any of:␤    rxinfix␤  ws␤FAILED 00:02 36m␤»

[04:12] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unable to parse regex; couldn't find final '/' at /tmp/twu1D4Lt8D line 0:␤------> [32m[31m[0m␤    expecting any of:␤     infix stopper␤    quantifier␤       rxinfix␤        standard stopper␤   ws␤FAILED 00:02 34m␤»

[04:12] <s1n> std: /

[04:12] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/7a9yatU4gK line 0:␤------> [32m[31m[0m␤    expecting ws␤FAILED 00:02 36m␤»

[04:12] <diakopter> std: 3 /\ /\ /

[04:12] <p6eval> std 25833: OUTPUT«ok 00:02 34m␤»

[04:12] <s1n> lol

[04:12] <s1n> i bet TimToady is just grinding his teeth :)

[04:13] <diakopter> what did that parse as? (my last)

[04:13] <diakopter> TimToady: how was termite death?

[04:13] <TimToady> got a lot of 'em, probably have some left

[04:13] <s1n> diakopter: termite death? sounds like an underground metal band

[04:13] <diakopter> underground is right.

[04:14] <s1n> did they play with Beetle Scourge and Ant Infestation last year?

[04:14] <diakopter> std: right // left

[04:14] <p6eval> std 25833: OUTPUT«Undeclared routines:␤  left used at 1 ␤  right used at 1 ␤ok 00:02 36m␤»

[04:14] <s1n> std: &left // &right

[04:14] <p6eval> std 25833: OUTPUT«ok 00:03 46m␤»

[04:14] <diakopter> std: [RRR+]()

[04:14] <p6eval> std 25833: OUTPUT«ok 00:02 36m␤»

[04:14] <diakopter> nice

[04:14] <s1n> huh? what was that last ne?

[04:15] <s1n> (mine)

[04:15] <s1n> and diakopter's for that matter

[04:15] <diakopter> std: [RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR+]()

[04:15] <p6eval> std 25833: OUTPUT«ok 00:02 36m␤»

[04:15] <diakopter> rakudo: [RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR+]()

[04:15] <p6eval> rakudo 5b1ff9: OUTPUT«Statement not terminated properly at line 1, near "+]()"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[04:15] *** nbrown04 joined
[04:15] <s1n> rakudo: &left // &right

[04:15] <diakopter> rakudo: [R+]()

[04:16] <p6eval> rakudo 5b1ff9: RESULT«Null PMC access in can()␤current instr.: '!dispatch_method' pc 16869 (src/builtins/guts.pir:104)␤»

[04:16] <p6eval> rakudo 5b1ff9: RESULT«0»

[04:16] <diakopter> rakudo: [RR+]()

[04:16] <p6eval> rakudo 5b1ff9: OUTPUT«Statement not terminated properly at line 1, near "+]()"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[04:16] <diakopter> std: [RR+]()

[04:16] <p6eval> std 25833: OUTPUT«ok 00:02 36m␤»

[04:16] <s1n> diakopter: what does that mean?

[04:16] <diakopter> oo, something rakudo catches but std doesn't

[04:16] <diakopter> or is it the other way around

[04:17] <diakopter> well, it's supposed to mean reverse the order of a binary operation without commutativity before reducing

[04:17] *** nbrown04 left
[04:17] <diakopter> but rakudo reverses the incoming list

[04:17] <diakopter> last I checked

[04:17] <s1n> std: [R\ /](1..2)

[04:18] *** nbrown04 joined
[04:18] <p6eval> std 25833: OUTPUT«##### PARSE FAILED #####␤Unable to parse array composer; couldn't find final ']' at /tmp/ju8iSF9MFK line 1:␤------> [32m[R\ /[31m](1..2)[0m␤    expecting any of:␤        prefix or noun␤   whitespace␤FAILED 00:05 40m␤»

[04:18] <pugs_svn> r25834 | lwall++ | [STD etc.] more ability to do sequential child nodes in viv

[04:18] <pugs_svn> r25834 | lwall++ | various buglets

[04:18] * s1n goes to check lwall's commit

[04:18] <diakopter> cetera is right

[04:19] <s1n> std: [R/](1..3)

[04:19] <p6eval> std 25833: OUTPUT«ok 00:02 36m␤»

[04:19] <s1n> rakudo: [R/](1..3)

[04:19] <diakopter> "operator context"

[04:19] <p6eval> rakudo 5b1ff9: RESULT«1.5»

[04:20] <s1n> std: [*/](1..4)

[04:20] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Unable to parse array composer; couldn't find final ']' at /tmp/VzewdIFluC line 1:␤------> [32m[*/[31m](1..4)[0m␤    expecting any of:␤  prefix or noun␤   whitespace␤FAILED 00:02 34m␤»

[04:20] <s1n> std: [*](1..4)

[04:20] <diakopter> std: [R=]()

[04:20] <p6eval> std 25834: OUTPUT«ok 00:02 36m␤»

[04:20] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Unable to parse array composer; couldn't find final ']' at /tmp/RlsEuXLjqN line 1:␤------> [32m[R=[31m]()[0m␤    expecting any of:␤      prefix or noun␤   whitespace␤FAILED 00:02 34m␤»

[04:20] <TimToady> std: 42 RRRRRRRRRRRRRXXXXXXXXXXXXXX* 3

[04:20] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:20] <diakopter> std: [R=]]()

[04:20] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Unable to parse array composer; couldn't find final ']' at /tmp/CEvcTHLIRL line 1:␤------> [32m[R=[31m]]()[0m␤    expecting any of:␤     prefix or noun␤   whitespace␤FAILED 00:02 34m␤»

[04:20] <diakopter> std: [R==]]()

[04:20] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Unable to parse array composer; couldn't find final ']' at /tmp/a9b8tLrOMW line 1:␤------> [32m[R==][31m]()[0m␤    expecting prefix_circumfix_meta_operator__S_082reduce␤FAILED 00:02 34m␤»

[04:20] <diakopter> std: [R==]()

[04:20] <p6eval> std 25834: OUTPUT«ok 00:02 36m␤»

[04:20] <s1n> std: [/+](1..4)

[04:21] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤quantifier quantifies nothing at /tmp/5pJLN27CTQ line 1:␤------> [32m[/+[31m](1..4)[0m␤    expecting quantmod␤FAILED 00:02 34m␤»

[04:21] <s1n> huh?

[04:21] <diakopter> std: [R\]]()

[04:21] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/VEp45CeJEj line 1:␤------> [32m[R\[31m]]()[0m␤    expecting any of:␤        postfix␤  postfix_prefix_meta_operator␤FAILED 00:02 34m␤»

[04:21] <s1n> quantifier quantifies nothing?

[04:22] <TimToady> yes, your regex started with /

[04:22] <s1n> std: [++](1..10)

[04:22] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Unable to parse array composer; couldn't find final ']' at /tmp/EFWenso1c9 line 1:␤------> [32m[++[31m](1..10)[0m␤    expecting any of:␤ noun␤   prefix or meta-prefix␤      prefix_postfix_meta_operator␤     whitespace␤FAILED 00:02 36m␤»

[04:22] <TimToady> I suspect you'd have better luck with \

[04:22] <s1n> i was trying to double up ops to see what it would do

[04:22] <TimToady> if you don't put a valid infix in [], it will try again as an array composter

[04:22] <s1n> std: [\/*](1..32)

[04:22] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤quantifier quantifies nothing at /tmp/LP77i71a7H line 1:␤------> [32m[\/*[31m](1..32)[0m␤    expecting quantmod␤FAILED 00:02 34m␤»

[04:22] <TimToady> composer even

[04:22] <diakopter> std: () <== .()

[04:23] <s1n> oo

[04:23] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:23] <TimToady> there's no infix /*

[04:23] <diakopter> feed to anonymous list?

[04:23] <s1n> std: [~](1..4)

[04:23] <p6eval> std 25834: OUTPUT«ok 00:02 36m␤»

[04:23] <diakopter> std: .() <== .()

[04:23] <s1n> those reduction operators all have to be infix?

[04:23] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:23] <diakopter> std: ..() <== ..()

[04:23] <TimToady> yes

[04:23] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/sz8Ihs3H2M line 1:␤------> [32m[31m..() <== ..()[0m␤    expecting any of:␤        prefix or noun␤   statement end␤    statement list␤   whitespace␤FAILED 00:02 34m␤»

[04:24] <diakopter> std: () <<== ()

[04:24] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:24] <diakopter> std: ()==>>()

[04:24] <s1n> why not post or pre, if they return a value ultimately, i would imagine i could double up reduction operators, one for pre/post and one for infix

[04:24] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:24] <diakopter> std: ()>>()

[04:24] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:24] <diakopter> std: ()>>>>()

[04:24] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:24] <diakopter> std: ()>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>()

[04:24] <s1n> std: [~*](1..10)

[04:24] <p6eval> std 25834: OUTPUT«ok 00:02 36m␤»

[04:24] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:24] <s1n> ooo

[04:25] <TimToady> reduction operators on a unary would return nothing

[04:25] <diakopter> std: ()>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[04:25] <s1n> TimToady: what does that previous one i did mean?

[04:25] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Obsolete use of >> to do right shift; in Perl 6 please use +> or ~> instead at /tmp/703YI6tGP6 line 0:␤------> [32m[31m[0m␤FAILED 00:02 34m␤»

[04:25] <diakopter> std: ()>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1

[04:25] <p6eval> std 25834: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/H7P74NbpbU line 1:␤------> [32m()>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[31m1[0m␤    expecting any of:␤        infix or meta-infix␤      infix stopper␤    postfix␤        postfix_prefix_meta_operator␤      

[04:25] <p6eval> ..standard stopper␤ terminator␤FA...

[04:25] *** meppl left
[04:25] <diakopter> std: ()>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>()

[04:25] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:25] <TimToady> s1n: you made a valid array composer, then called () on it

[04:26] <diakopter> []>>[]

[04:26] <TimToady> ~* is stringified whatever

[04:26] <diakopter> std: []>>[]

[04:26] <s1n> forgive my ignorance, what's an array composer?

[04:26] <p6eval> std 25834: OUTPUT«ok 00:02 34m␤»

[04:26] <TimToady> [1,2,3]

[04:26] <diakopter> [1..Inf]

[04:26] <diakopter> [Inf..1]

[04:26] <TimToady> [ expr ]

[04:26] <s1n> rakudo: [1~*10]

[04:26] <diakopter> rakudo: [Inf..1]

[04:26] <p6eval> rakudo 5b1ff9: OUTPUT«Statement not terminated properly at line 1, near "10]"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[04:26] <p6eval> rakudo 5b1ff9: RESULT«[]»

[04:26] <diakopter> rakudo: [Inf..1].perl

[04:27] <p6eval> rakudo 5b1ff9: RESULT«"[]"»

[04:27] <s1n> ooo

[04:27] <TimToady> there's no ~* infix

[04:27] <diakopter> rakudo: [1..0].perl

[04:27] <p6eval> rakudo 5b1ff9: RESULT«"[]"»

[04:27] <diakopter> rakudo: [1..10].perl

[04:27] <TimToady> ranges never autoreverse

[04:27] <p6eval> rakudo 5b1ff9: RESULT«"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"»

[04:27] <diakopter> rakudo: [1..Inf].perl

[04:27] <diakopter> (meanie)

[04:27] <diakopter> sorry p6eval

[04:28] <s1n> TimToady: so what does [~*](1..10) really mean then?

[04:28] * diakopter tests moritz__ system

[04:28] <p6eval> rakudo 5b1ff9: No output (you need to produce output to STDOUT)

[04:28] <TimToady> make an array of one element, the contents of which is the stringified * token

[04:28] <s1n> oh, not at all what i thought i was cleverly doing

[04:28] <TimToady> which someday will make a closure

[04:29] <TimToady> what did you think you were doing?  what kind of an operator is ~* supposed to be?

[04:29] <TimToady> what would $a ~* $b mean?

[04:30] <s1n> it wasn't, i was just goofing with it, but it would be need if it did ~ as prefix first and * as infix

[04:30] <s1n> s/need/neat/

[04:30] <diakopter> concatenate $a $b times?

[04:30] <s1n> sure why not

[04:30] <diakopter> oh, that's x

[04:31] <diakopter> std: '' ~x ''

[04:31] <p6eval> std 25834: OUTPUT«Undeclared routine:␤   x used at 1 ␤ok 00:02 34m␤»

[04:31] <TimToady> std: sub infix:<~*> ($a,$b) { ... }; [~*]()

[04:31] <diakopter> rakudo: '' ~x ''

[04:31] <p6eval> std 25834: OUTPUT«ok 00:03 39m␤»

[04:31] <p6eval> rakudo 5b1ff9: OUTPUT«Could not find non-existent sub x␤current instr.: '_block14' pc 66 (EVAL_16:42)␤»

[04:31] <TimToady> see, if you define the operator, it works in a reduce

[04:31] <diakopter> pugs: '' ~x ''

[04:31] <p6eval> pugs: OUTPUT«*** No such subroutine: "&x"␤    at /tmp/SiIULJezD7 line 1, column 1 - line 2, column 1␤»

[04:31] <s1n> rakudo: sub infix:<~*> ($a,$b) { ... }; [~*]()

[04:32] <p6eval> rakudo 5b1ff9: OUTPUT«Malformed routine definition at line 1, near "infix:<~*>"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[04:32] <diakopter> pugs is fast

[04:32] <diakopter> pugs: '' x ''

[04:32] <p6eval> pugs: RESULT«""»

[04:32] <diakopter> pugs: ''x'x'

[04:32] <p6eval> pugs: RESULT«""»

[04:32] <diakopter> pugs: 'x'x'x'

[04:32] <p6eval> pugs: RESULT«""»

[04:32] <diakopter> rakudo: 'x'x'x'

[04:32] <p6eval> rakudo 5b1ff9: RESULT«""»

[04:32] <diakopter> rakudo: 'x'x!!'x'

[04:32] <p6eval> rakudo 5b1ff9: RESULT«"x"»

[04:32] <diakopter> oo

[04:33] <diakopter> rakudo: 'x'x!!''

[04:33] <p6eval> rakudo 5b1ff9: RESULT«""»

[04:33] <diakopter> rakudo: 'x'x!!(-1)

[04:33] <p6eval> rakudo 5b1ff9: RESULT«"x"»

[04:33] <TimToady> why use !! instead of ?

[04:33] <diakopter> rakudo: 'x'x?()

[04:33] <p6eval> rakudo 5b1ff9: RESULT«""»

[04:33] <diakopter> rakudo: 'x'x?~()

[04:33] <p6eval> rakudo 5b1ff9: RESULT«""»

[04:33] <diakopter> rakudo: 'x'x~?()

[04:34] <p6eval> rakudo 5b1ff9: RESULT«""»

[04:34] <diakopter> rakudo: 'x'x~?(1)

[04:34] <p6eval> rakudo 5b1ff9: RESULT«"x"»

[04:34] <s1n> std: ?~()

[04:34] <p6eval> std 25834: OUTPUT«ok 00:02 36m␤»

[04:34] <diakopter> rakudo: 'x'x~?(null)

[04:34] <s1n> rakudo: ?~()

[04:34] <p6eval> rakudo 5b1ff9: OUTPUT«Could not find non-existent sub null␤current instr.: '_block14' pc 59 (EVAL_16:40)␤»

[04:34] <p6eval> rakudo 5b1ff9: RESULT«Bool::False»

[04:34] <diakopter> rakudo: 'x'x?~(False)

[04:34] <p6eval> rakudo 5b1ff9: RESULT«""»

[04:34] <diakopter> ah

[04:34] <diakopter> wait

[04:35] <diakopter> rakudo: 'x'x?~(True)

[04:35] <TimToady> rakudo: say ~False

[04:35] <p6eval> rakudo 5b1ff9: RESULT«"x"»

[04:35] <p6eval> rakudo 5b1ff9: OUTPUT«0␤»

[04:35] * diakopter boggled

[04:35] <diakopter> afk&&&

[04:35] <TimToady> rakudo: say ~True

[04:35] <p6eval> rakudo 5b1ff9: OUTPUT«1␤»

[04:36] <s1n> that was fun, taught me some new things about p6 :)

[04:36] <TimToady> True and False return numbers because they're enums

[04:36] * s1n hopes TimToady didn't pull out all his hair because of my goofing off

[04:36] <diakopter> what's the logical contextualizer

[04:37] <TimToady> nah, I'm just glad I don't have to backlog it...

[04:37] <diakopter> lol

[04:37] <diakopter> "I can't come to dinner now; if I leave, I'll never be able to catch up"

[04:38] <diakopter> what's the $custom contextualizer

[04:38] <TimToady> I have no idea what you're asking

[04:38] <s1n> hah, when TimToady says that, just walk away

[04:38] *** cai_ joined
[04:39] <diakopter> no, it just means my question is entirely ambiguous... at least two possible plurality interpretations with equal odds

[04:40] <diakopter> (or none)

[04:41] *** Limbic_Region left
[04:43] *** nbrown04 left
[05:09] *** alester left
[05:10] *** bacek_ joined
[05:11] *** bacek left
[05:23] *** alester joined
[05:24] *** nbrown04 joined
[05:25] *** nbrown04 left
[05:28] *** Chillance left
[05:54] *** nbrown joined
[05:55] *** alester left
[06:00] *** cai_ left
[06:46] *** tomheady joined
[06:47] *** Kimtaro_ joined
[06:54] *** Kimtaro left
[07:05] *** bacek_ left
[07:10] *** mberends joined
[07:15] *** bacek_ joined
[07:32] *** Kisu joined
[07:32] *** kate21de joined
[07:36] *** diracdelta1 joined
[07:50] *** meppuru left
[07:53] *** diracdelta left
[08:36] *** bacek__ joined
[08:37] *** bacek_ left
[08:39] *** krunen_ is now known as krunen

[09:07] *** abra joined
[09:15] *** schmalbe joined
[09:21] *** squ joined
[09:22] <squ> say 1

[09:22] <squ> 'perl6: say 3;'

[09:22] <squ> perl6: say 3;

[09:22] <p6eval> elf 25834, pugs, rakudo 5b1ff9: OUTPUT«3␤»

[09:23] <squ> perl6: say 1;

[09:23] <p6eval> elf 25834, pugs, rakudo 5b1ff9: OUTPUT«1␤»

[09:23] <squ> perl6: say 'wtf';

[09:23] <p6eval> elf 25834, pugs, rakudo 5b1ff9: OUTPUT«wtf␤»

[09:23] <squ> what is it?

[09:23] <squ> how to get perl6?

[09:24] <mberends> squ, do you mean on your computer?

[09:24] <squ> yep

[09:24] <mberends> which operating system do you use? that may affect how to proceed.

[09:25] <squ> freebsd

[09:25] <squ> xp

[09:25] <squ> isnt it in development?

[09:25] <squ> and what is the release date

[09:25] <mberends> most Perl 6 people have Unix compatible systems, although Windows is generally OK too.

[09:26] <mberends> "Christmas"

[09:26] <squ> seriously?

[09:26] <mberends> yes, it is in development, and it will be Christmas when it is complete. No idea which year, though. ;-)

[09:27] <squ> what do they offer now?

[09:27] <squ> sources?

[09:27] * mberends looks for the most appropriate url. hang on...

[09:28] <mberends> http://www.rakudo.org/how-to-get-rakudo

[09:28] <mberends> you'll need git and subversion, gcc and make.

[09:29] <squ> no binaries?

[09:29] <squ> (for windows)

[09:30] <squ> cos it got no make

[09:30] <mberends> sometimes, but they quickly becomes dated (it's exciting on the bleading edge)

[09:30] <mberends> FreeBSD should give you a make.

[09:31] <mberends> or Cygwin on Windows.

[09:31] <squ> thanks

[09:31] <mberends> There are some #perl6 members using MSVC and nmake, but they're not awake yet today.

[09:33] * mberends does enough Windows @work that he doesn't feel like doing Perl 6 in it (yet).

[09:34] <mberends> squ, I can walk you through getting started in a Unix-ish environment if you like

[09:35] <squ> ill connect with fbsd here

[09:35] <mberends> squ++

[09:38] <mberends> just say it when you begin with 'git clone ...'

[09:38] *** DemoFreak joined
[09:52] *** ejs joined
[09:53] *** squ left
[10:05] *** finanalyst joined
[10:18] *** ejs left
[10:19] <pugs_svn> r25835 | lwall++ | [STD] revamp parameter rule not to need fake <?before>

[10:19] <pugs_svn> r25835 | lwall++ | [viv] ignore reductions that aren't the whole rule

[10:31] *** abra left
[10:36] *** pmurias joined
[10:38] *** squ joined
[10:39] <squ> got perl6

[10:39] <squ> :)

[10:39] <mberends> squ: hi, which operating system are you running now?

[10:40] <squ> how to copy from xterm?

[10:40] <mberends> it doesn't copy.

[10:40] <squ> freebsd

[10:40] <mberends> very nice. how did you proceed to get perl6?

[10:40] *** slavik2 joined
[10:41] <squ> its on a website

[10:41] <slavik2> What are the chances of parrot on symbian? Heh

[10:41] <mberends> did you download a tarball or did you use git?

[10:41] *** frioux left
[10:41] <squ> git

[10:42] <squ> just 3 commands everythings works ok

[10:42] <mberends> squ: excellent, then you'll always be up to date.

[10:42] <mberends> slavik2: in two Christmases ;)

[10:42] *** Kisu left
[10:43] <slavik2> Haha

[10:43] <mberends> squ: gnome-terminal and some other improved xterms do copy/paste

[10:43] <slavik2> Symbian did port posix c to symbian :)

[10:44] <mberends> slavik2, building Rakudu in 128M RAM is practically impossible, 256M is ok.

[10:45] <squ> perl6 uses about 200mb of space

[10:45] <slavik2> Mb, gcc can build it ;)

[10:46] <mberends> cool!

[10:46] <pugs_svn> r25836 | lwall++ | [STD] remove fossil parsing of no-longer-specced :foo.() et al.

[10:46] <pugs_svn> r25836 | lwall++ | [t/spec] remove fossil test for that feature.

[10:46] <slavik2> On a bigger system

[10:46] * mberends thinks about buying a G1 phone sometimes, to replace his 9300i

[10:46] <slavik2> As long as it runs in 128mb

[10:47] <slavik2> Mb, communicators for life !!!!!

[10:47] <TimToady> 128mb is slightly more than 1 bit

[10:48] <mberends> there goes that bot again, always interjecting unexpectedly ;)

[10:48] <slavik2> Haha

[10:48] *** Kimtaro joined
[10:48] <TimToady> hellow mberends you fantastic person you

[10:48] <mberends> TimToady, who wrote your source code?

[10:48] <TimToady> sorry, can't type in the middle of the night...

[10:49] <slavik2> Rakudo: say ?{0 == 1}

[10:49] <TimToady> I believe it was the result of some genetic programming

[10:49] <slavik2> rakudo: say ?{0 == 1}

[10:49] <p6eval> rakudo 5b1ff9: OUTPUT«1␤»

[10:49] <slavik2> :(

[10:49] <TimToady> an unevaluated closure is true

[10:50] <slavik2> No assertions?

[10:50] <slavik2> Err

[10:50] <squ> where are specifications of what is going to work?

[10:50] <slavik2> P00p, i got the syntax wrong, didn't i?

[10:50] <squ> [109] (root@j)~/rakudo# ./perl6 -e 'my @list = (2); print @list >>+<< 3;'

[10:51] <slavik2> Btw, what's with not having an install target for rakudo?

[10:51] <squ> [110] (root@j)~/rakudo# ./perl6 -e 'my @list = (3,2,3); print @list >>+<< 3;'

[10:51] <squ> Non-dwimmy hyperoperator cannot be used on arrays of different sizes or dimensions.

[10:51] <squ> ? :)

[10:52] <TimToady> rakudo: my @list = 3,2,3; say @list <<+> 3

[10:52] <p6eval> rakudo 5b1ff9: OUTPUT«Statement not terminated properly at line 1, near "3"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[10:52] <TimToady> rakudo: my @list = 3,2,3; say @list <<+>> 3

[10:52] <p6eval> rakudo 5b1ff9: OUTPUT«656␤»

[10:52] <TimToady> there's the dwimmy form

[10:52] <mberends> squ: http://www.rakudo.org/status and http://perlcabal.org/syn/

[10:52] *** diracdelta1 left
[10:53] <squ> mberends, and is this the only resource?

[10:53] <mberends> slavik2: it's just a difficult, moving target. some have tried and foundered.

[10:54] <slavik2> :(

[10:54] <mberends> squ, no, there are many more, but the size of this margin is too small to write...

[10:55] *** M_o_C joined
[10:55] <TimToady> you can always read the source code, a lot of which is written in Perl 6 :)

[10:55] <squ> are there binaries for windows?

[10:56] <squ> would wish to show it friends :)

[10:56] <TimToady> occasionally, but the get out-of-date rapidly

[10:56] <TimToady> you can always run small bits here if you have irc

[10:57] <mberends> jnthn++ is the leading Windows developer. jnthn, are you awake? jnthn !

[10:57] <TimToady> perl6: say 'howdy, squ'

[10:57] <p6eval> elf 25836, pugs, rakudo 5b1ff9: OUTPUT«howdy, squ␤»

[10:57] <squ> no I would like to copy it to flash

[10:57] <TimToady> well, maybe it's your job to make that work!

[10:58] *** slavik2 left
[10:58] * mberends runs his laptop on Debian in a flash drive

[10:59] <TimToady> perl6 isn't quite an OS yet...

[10:59] <TimToady> but it's almost as close as emacs :P

[11:00] <mberends> emacs is an operating system with an almost useable text editor

[11:01] <squ> sent him a memo

[11:03] <TimToady> ooh, it's the ides of March. time to watch out for minions with knives...

[11:03] *** masak joined
[11:03] *** squ left
[11:03] <TimToady> o/

[11:03] <masak> o/

[11:04] <mberends> masak, did you just make squ quit?

[11:04] <masak> who knows?

[11:04] <masak> stranger things have happened.

[11:04] <TimToady> it is the ides of March, after all

[11:04] <mberends> squ knows :)

[11:05] <masak> TimToady: I'm sure theres a pun in there somewhere.

[11:05] <TimToady> wait, that means I should stay out of forums...

[11:05] *** Kimtaro_ left
[11:05] * masak looks up 'ide' in the dictionary

[11:06] <masak> an ide is a kind of carp, it seems.

[11:06] <masak> ah, but 'ides' is from Latin 'idus'.

[11:12] <masak> I see you've been torturing poor STD while I was sleeping. :)

[11:18] *** sri_kraih joined
[11:23] <jnthn> Windows binaries - not that I know of, but it ain't hard to build on Windows.

[11:27] *** ruoso joined
[11:37] <masak> ok, so veriables declared inside an eval don't survive to the outside, right?

[11:43] *** ejs joined
[11:52] *** |jedai| joined
[11:53] *** |jedai| is now known as jedai

[12:02] *** ruoso left
[12:04] <masak> rakudo: my Int $a = 5; eval($a)

[12:04] <p6eval> rakudo 5b1ff9: OUTPUT«Parameter type check failed on call to 'eval'.␤current instr.: 'die' pc 15808 (src/builtins/control.pir:204)␤»

[12:04] <masak> might I suggest that the type check be relaxed somewhat to things that can be stringified?

[12:13] *** ruoso joined
[12:24] *** ujwalic joined
[12:34] *** ujwalic left
[12:56] *** pmurias left
[12:56] *** pmurias_ joined
[12:56] *** pmurias joined
[12:56] *** pmurias left
[12:56] *** pmurias_ is now known as pmurias

[12:57] *** pmurias left
[12:57] *** pmurias joined
[13:00] <jnthn> masak: no, you can think of it as an innner lexical scope

[13:02] *** Kimtaro left
[13:04] <pugs_svn> r25837 | pmurias++ | [re-smop] added bool to s0native

[13:06] <pmurias> ruoso: do you think it's worth keeping SMOP__NATIVE__bool_create and SMOP__NATIVE__bool_fetch?

[13:09] <ruoso> probably not

[13:09] <pmurias> ruoso: hi

[13:09] <ruoso> hi pmurias 

[13:09] * ruoso cooking

[13:13] *** schmalbe left
[13:14] *** wayland76 left
[13:18] <ruoso> pmurias, I was wondering... should we have separated build processes for each of the modules? I tend to think so... what do you think?

[13:19] <pmurias> i'm not sure that having seperate SConstruct files would help us much

[13:20] <ruoso> maybe it would make it easier to enable/disable modules

[13:20] <ruoso> I was actually thiking it would be nice to have one .so for each module

[13:22] *** amoc joined
[13:22] <pmurias> scons is flexible enough to allow doing that with a single SConstruct

[13:23] <amoc> rakudo: my @foo; 0..2 ==> @foo;

[13:23] <p6eval> rakudo 5b1ff9: OUTPUT«Statement not terminated properly at line 1, near "==> @foo;"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[13:23] *** Whiteknight joined
[13:27] <jnthn> amoc: Pipe operators not implemented yet, fyi.

[13:28] <pmurias> ruoso: having the build system seperate from the source code might be a good idea if some windows person wants to add a Visual Studio Project or something of that sort

[13:28] <ruoso> interesting

[13:29] <amoc> i see. it says they're kind of less interesting without laziness..(?)

[13:29] <amoc> (to jnthn)

[13:30] <ruoso> amoc, without lazyness, they're just plain assignments

[13:31] <amoc> ruoso: ah, i see,

[13:36] <jnthn> amoc: Yeah, they'll probably come with lazy lists. Waiting for the spec to settle on that before spending too many tuits...

[13:38] *** jan_ joined
[13:41] *** ludan joined
[13:44] <pugs_svn> r25838 | pmurias++ | [s0native] added smop_s0native_{init,destr},a test for it, and a SConstruct to build it

[13:45] *** ludan left
[13:47] *** wayland joined
[13:48] <pugs_svn> r25839 | pmurias++ | [s0native] added return 0 to the test

[13:48] <pugs_svn> r25839 | pmurias++ | [re-smop] added a Makefile so make and make test works

[13:58] <pugs_svn> r25840 | pmurias++ | [s0native] SMOP__NATIVE__bool_{false,true} are defined in the header

[13:59] *** amoc left
[14:00] *** amoc joined
[14:02] *** kate21de left
[14:05] *** zuv joined
[14:06] *** meppl joined
[14:07] <masak> jnthn: re inner lexical scope. aye, and it's probably a good idea to keep that the default. but there are times when I want an eval-in-this-scope. Tene_ promised to implement one for me at one point.

[14:10] <pmurias> ruoso: do we want to keep the whole list of preloaded idconsts in s0native?

[14:12] <ruoso> pmurias, I think the list for s0native is usefull

[14:14] *** kate21de joined
[14:21] <mberends> masak: would november-wiki.org be a willing host for a Perl 6 'cheat' clone? http://cheat.errtheblog.com/

[14:22] <masak> mberends: I definitely think so. dogfooding is always good.

[14:22] <masak> mberends: are you on the mailing list?

[14:22] <mberends> oh, no. where to sign up?

[14:23] <masak> november-wiki over at google groups

[14:23] <ruoso> pmurias, I was thinking, considering we should have mold up before the native types... we could make the RI DSL more powerful

[14:23] <ruoso> like, supporting Perl 6 signatures directly

[14:23] *** Kisu joined
[14:24] <ruoso> where it would short-circuit when the capture is native and the signature contains native types that are directly received in the capture (instead of being wrapped into a scalar)

[14:25] <ruoso> maybe even with another STD backend that would generate it from Perl 6 code...

[14:33] *** sri_kraih_ joined
[14:33] *** meteorjay left
[14:36] *** mberends left
[14:36] <masak> rakudo: sub formalize($text, :case($case), :justify($justify)) {...}

[14:36] <p6eval> rakudo 5b1ff9: OUTPUT«Unable to parse multisig; couldn't find final ')' at line 1, near ":case($cas"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[14:36] <masak> wtf> this a known regression?

[14:36] <masak> that one is straight from S06.

[14:36] <masak> I'm pretty sure it used to work.

[14:38] <ruoso> rakudo: sub formalize($text, :$case, :$justify) {...}

[14:38] <p6eval> rakudo 5b1ff9: RESULT«{ ... }»

[14:39] <masak> ok, so the sugared form still works.

[14:39] <ruoso> masak, your signature was just wrong ;)

[14:39] <masak> ruoso: nope. see S06.

[14:39] <ruoso> std:  sub formalize($text, :case($case), :justify($justify)) {...}

[14:39] <p6eval> std 25840: OUTPUT«ok 00:02 35m␤»

[14:39] <ruoso> interesting

[14:39] * masak submits rakudobug

[14:47] <masak> rakudo: my $a = "foo"; $a ~~ /$a/; say "alive"

[14:47] <p6eval> rakudo 5b1ff9: OUTPUT«Null PMC access in get_string()␤current instr.: 'parrot;PGE;Grammar;' pc 251 (EVAL_17:107)␤»

[14:47] <masak> is this a known one? how do I work around it?

[14:47] <pmurias> ruoso: what i'm wondering is that if we are going to add bits of Perl 6 to the RI DSL does it make sense to switch to Perl 6 syntax with parts in C?

[14:47] * masak submits rakudobug

[14:48] <jnthn> masak: (signature one) It's not a bug. We have a ticket saying it's to implement in fact.

[14:48] <jnthn> Well, not a regression anyway.

[14:48] <masak> jnthn: it used to work!

[14:49] <jnthn> masak: Parse, or work? I've never known it to work... :-|

[14:49] <masak> perhaps I'm thinking of some other Perl 6 implementation...

[14:49] <jnthn> Perhaps.

[14:49] *** sri_kraih left
[14:49] <jnthn> I know we have a ticket to implement it in Rakudo for a while though.

[14:50] <ruoso> pmurias, that was what I meant

[14:50] <jnthn> (Should be an easy patch to write.)

[14:50] <masak> jnthn: no, it used to work! we have it in the November source, code that is currently running on the web on an older version of Rakudo.

[14:51] <masak> please make it work again.

[14:53] <jnthn> OK, then clearly it wasn't tested...

[14:53] * masak adds this to the ticket

[14:54] <jnthn> Will look at it early next week, anyway.

[14:54] <masak> excellent.

[14:56] <pmurias> ruoso: how will we embed the C code?

[14:56] <ruoso> good question

[14:56] <masak> rakudo: my $a = "foo"; my $workaround = eval("/'$a'/"); say $a ~~ $workaround

[14:56] <p6eval> rakudo 5b1ff9: OUTPUT«foo␤»

[14:57] <masak> that works.

[14:57] <ruoso> maybe we could write the C part in P6 as well

[14:57] <ruoso> like... 

[14:57] <ruoso> has $!foo means a member of the struct

[14:58] <jnthn> masak: To make that one really work would need PGE changes...

[14:58] * masak suspected that

[14:59] <masak> maybe I should dive into PGE some day instead... but PGE feels very much like pmichaud's baby...

[15:00] <jnthn> I don't think pmichaud would mind people patching it.

[15:00] <jnthn> However, I don't think it's trivial to get into either.

[15:00] <masak> no, not this one. it's a two-world thing.

[15:00] <jnthn> I've tended to delegate to pm on PGE issues so far.

[15:00] <masak> aye. separation of concerns.

[15:00] <jnthn> Aye. I've got enough to be concerend about. ;-)

[15:02] <masak> :)

[15:03] *** meteorjay joined
[15:03] <pmurias> ruoso: not handwritting C could solve mostly solve our refcounting problem, right?

[15:03] *** sri_kraih joined
[15:04] <ruoso> maybe

[15:04] <masak> jnthn: um, to be fair, I might have simply been confused about caller/callee-side on the matter of named params. sorry about that. :/

[15:04] *** ced-2 joined
[15:05] <masak> I'll see if I find the TODO ticket, and merge them.

[15:05] <jnthn> masak: Ah. That would answer it...

[15:05] <masak> aye.

[15:06] * masak adds that too

[15:06] <masak> heh, and it turns out I was the reporter of the old bug. :P

[15:06] <masak> same one-liner, even.

[15:08] <pmurias> ruoso: the question is will we have enought RIs to make writting a Perl 6 to C translator worth it

[15:09] *** pmurias left
[15:09] *** pmurias joined
[15:13] <ruoso> the complexity of dealing with non-native capture/identifier and eventually scalar-wrapped values is worth it, I think

[15:13] *** sri_kraih_ left
[15:18] *** zuv left
[15:19] *** ujwalic joined
[15:23] *** FurnaceBoy joined
[15:24] *** sri_kraih_ joined
[15:25] <diakopter> I'm going to catch a lot of flak for this, I'm sure.

[15:26] <diakopter> so, I'm prepared this time. :)

[15:26] *** ced-2_ joined
[15:27] <diakopter> er, I thought I was

[15:27] <diakopter> nm

[15:29] <diakopter> S01 says perl6 -e '' automatically 'use lax;', as well as 'v6;'

[15:29] <diakopter> is that still valid?

[15:29] <diakopter> std: v6;

[15:29] *** Psyche^ joined
[15:29] <p6eval> std 25840: OUTPUT«ok 00:02 34m␤»

[15:29] <diakopter> std: v;

[15:29] <p6eval> std 25840: OUTPUT«Undeclared routine:␤   v used at 1 ␤ok 00:02 34m␤»

[15:29] <diakopter> std: v0;

[15:29] <p6eval> std 25840: OUTPUT«ok 00:02 34m␤»

[15:29] <diakopter> std: v-1;

[15:29] <p6eval> std 25840: OUTPUT«Undeclared routine:␤   v used at 1 ␤ok 00:02 34m␤»

[15:30] <diakopter> is that still correct, I mean

[15:30] *** Patterner left
[15:30] *** Psyche^ is now known as Patterner

[15:30] <pmurias> v6 is a bare version literal

[15:31] <pmurias> and a bare literal at the start of the program switches to lax mode

[15:32] <masak> rakudo: sub foo { return }; say foo.WHAT; say ?(foo ~~ Nil)

[15:32] <p6eval> rakudo 5b1ff9: OUTPUT«Nil␤0␤»

[15:32] * masak submits

[15:32] *** awarefish joined
[15:33] *** sri_kraih left
[15:33] <diakopter> rakudo: v6; $b = 1;

[15:33] <p6eval> rakudo 5b1ff9: OUTPUT«Scope not found for PAST::Var '$b' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[15:33] <diakopter> masak: there's one for you to submit

[15:34] <diakopter> (unless it's already in the list somewhere I guess)

[15:34] <diakopter> auto-declare

[15:34] <masak> oh, it couldn't hurt.

[15:34] * masak submits

[15:34] <pmurias> the lax mode is one of the least important Perl 6 features so it's not very high priority

[15:34] <diakopter> "use lax; mode should autodeclare"

[15:34] <pmurias> an declared variables are treated as package ones in lax mode

[15:35] <masak> I'll submit it, and we'll advertise for a second bug wrangler, one whose aim it is to reduce redundancy on RT. :)

[15:35] <pmurias> s/an declared/undeclared/

[15:35] <pmurias> diakopter: how's ironperl doing?

[15:37] <diakopter> changed direction after recognizing your criticism was valid/helpful; realized tycho's parser is too integrated to substitute a different front-end.  but I still want to use the tycho runtime, so I'm still pursuing the source translation idea, though to the tycho language instead of to the C# tycho api.

[15:38] <diakopter> still struggling with how to use STD/viv's YAML output.  haven't pursued mildew's output b/c I haven't read through mildew's source to see what it's doing

[15:39] <diakopter> (but I want to)

[15:39] <diakopter> would you like to give us a short narrative on mildew's operation/structure?

[15:39] <diakopter> to ease my reading of it? :)

[15:39] <pmurias> ok

[15:40] * diakopter browses the source

[15:40] *** ced-2 left
[15:41] <pmurias> diakopter: i have to leave in 10~15 minutes

[15:41] <pmurias> the viv AST to mildew AST handling lives in src/VAST/*

[15:42] <pmurias> mildew AST is defined in src/AST

[15:43] *** sri_kraih joined
[15:44] <pmurias> ruoso: one thing we need to choose is if we want to write C in Perl6ish syntax or enable mildew to emit C/native-code for a subset of Perl 6

[15:45] <ruoso> I was thinking about the second choice

[15:46] <ruoso> but maybe just write another compiler instead of trying to plug it into mildew

[15:49] * diakopter learns about PadWalker

[15:49] <pmurias> &

[15:49] *** pmurias left
[15:50] *** sri_kraih_ left
[15:54] <diakopter> om_.

[15:56] <diakopter> on another note, S07 has many instances of "lazyness", which probably should be consistent throughout as "laziness"?

[15:56] <diakopter> unless I'm missing some pun

[15:58] <ruoso> diakopter, it's probably my fault... is there one which is most correct?

[16:00] <diakopter> laziness

[16:00] <ruoso> diakopter, please feel free to fix it

[16:01] <diakopter> ok... well, interestingly 'lazyness' returns more google hits

[16:03] <diakopter> 'lazyness' could be viewed as self-demonstrable, which is punny

[16:06] <diakopter> std: v5;

[16:06] <p6eval> std 25840: OUTPUT«ok 00:02 34m␤»

[16:06] *** Sepheebear left
[16:06] *** Tene joined
[16:07] *** hercynium joined
[16:09] <masak> rakudo: sub foo { say "OH HAI" }; (::"foo").()

[16:09] <p6eval> rakudo 5b1ff9: OUTPUT«ResizablePMCArray: Can't pop from an empty array!␤current instr.: 'parrot;Perl6;Grammar;Actions;typename' pc -3013000 ((unknown file):-1)␤»

[16:09] <masak> hah!

[16:09] <masak> is there a way to turn a Str value into a routine and call it?

[16:10] <diakopter> eval?

[16:10] <masak> diakopter: besides that.

[16:10] <diakopter> std: &'say'

[16:11] <p6eval> std 25840: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/kXXGUSNUCS line 1:␤------> [32m&[31m'say'[0m␤    expecting variable␤FAILED 00:03 48m␤»

[16:11] <diakopter> std: 'say'()

[16:11] <p6eval> std 25840: OUTPUT«ok 00:02 34m␤»

[16:11] <masak> that works for literal strings.

[16:11] <masak> how about a string in a variable?

[16:11] <s1n> slightly off topic: what's the smallest decimal rational number p5 can represent and is there an equivalent in the spec for p6?

[16:12] <s1n> aside from -Inf that is :)

[16:15] <diakopter> well, if it's lazily represented/calculated, you can get arbitrarily small, since you can get arbitrarily large...

[16:17] *** Tene_ left
[16:22] <diakopter> s1n: there's this.... http://keithbriggs.info/xrc.html

[16:23] <diakopter> (with lots of related links included)

[16:24] *** Southen_ joined
[16:24] *** Kisu left
[16:28] *** kate21de1 joined
[16:29] *** kate21de left
[16:32] *** hercynium left
[16:33] *** edenc joined
[16:35] *** Kisu joined
[16:42] *** Southen left
[16:47] *** ejs1 joined
[16:47] *** ejs left
[16:47] *** awarefish left
[16:47] *** awarefish joined
[16:51] <masak> I've just written a small test framework that generate stubs from an index list of test descriptiong. right now, it's called Test::Ix.

[16:51] <masak> I don't have time to blog about it, but if anyone's interested, an example test file is at http://github.com/masak/druid/blob/master/t/01-game-rules.t

[16:52] <masak> the module is at http://github.com/masak/druid/blob/master/lib/Test/Ix.pm

[16:52] <diakopter> Perl 6.  It's so dynamic, its specification is user-mutable even at implementation-time!

[16:52] <masak> and a small helper script to inject sub stubs is at http://github.com/masak/druid/blob/master/bin/add-test-stubs

[16:53] <masak> diakopter: yup. I saw no Perl 6 people at the latest Waterfall Development Workshop.

[17:02] <masak> man, I can't spell. s/generate/generates/. s/descriptiong/descriptions/. :/

[17:11] <diakopter> std: loop;

[17:11] <p6eval> std 25840: OUTPUT«Undeclared routine:␤   loop used at 1 ␤ok 00:02 34m␤»

[17:11] <diakopter> std: loop{}

[17:11] <p6eval> std 25840: OUTPUT«Undeclared routine:␤   loop used at 1 ␤ok 00:02 34m␤»

[17:11] <diakopter> std: loop {}

[17:11] <p6eval> std 25840: OUTPUT«ok 00:02 33m␤»

[17:11] <diakopter> std: loop {}.do()

[17:11] <p6eval> std 25840: OUTPUT«##### PARSE FAILED #####␤Statements must be separated with semicolon at /tmp/JEFZJbgDQl line 1:␤------> [32mloop {}[31m.do()[0m␤    expecting any of:␤    blockoid␤ infix stopper␤    statement␤       whitespace␤FAILED 00:02 33m␤»

[17:12] <diakopter> std: do loop {}

[17:12] <p6eval> std 25840: OUTPUT«ok 00:02 34m␤»

[17:12] *** Whiteknight left
[17:12] <diakopter> std: do do loop {}

[17:12] <p6eval> std 25840: OUTPUT«ok 00:02 34m␤»

[17:12] *** ced-2 joined
[17:16] *** c9s left
[17:17] <diakopter> std: do do do {};

[17:17] <p6eval> std 25840: OUTPUT«ok 00:02 34m␤»

[17:17] <diakopter> pugs: do do do {};

[17:17] <p6eval> pugs: RESULT«undef»

[17:17] <diakopter> pugs: do do do {1};

[17:17] <p6eval> pugs: RESULT«1»

[17:18] <diakopter> pugs: do do do{1};

[17:18] <p6eval> pugs: RESULT«1»

[17:18] <diakopter> rakudo: do do do {1};

[17:18] <p6eval> rakudo 5b1ff9: RESULT«1»

[17:18] <diakopter> perl6: do do do {1};

[17:19] <p6eval> elf 25840: RESULT«1␤»

[17:19] <p6eval> ..pugs, rakudo 5b1ff9: RESULT«1»

[17:19] *** c9s joined
[17:21] *** mberends joined
[17:25] <finanalyst> perl6: my $x=1|5; $x+=3;$x.perl.say

[17:25] <p6eval> rakudo 5b1ff9: OUTPUT«any(4, 8)␤»

[17:25] <p6eval> ..pugs: OUTPUT«\(4 | 8)␤»

[17:25] <p6eval> ..elf 25840: OUTPUT«Unknown rule: infix_postfix_meta_operator:=␤It needs to be added to ast_handlers.␤ at ./elf_h line 2044␤»

[17:25] <finanalyst> how do I get the minimum value out of the junction?

[17:26] <finanalyst> perl6: my $x=1|5; $x+=3;$x.min.say

[17:26] <p6eval> pugs: OUTPUT«any(VInt 4,VInt 8)␤»

[17:26] <p6eval> ..rakudo 5b1ff9: OUTPUT«Junction<0xb61073b8>␤»

[17:26] <p6eval> ..elf 25840: OUTPUT«Unknown rule: infix_postfix_meta_operator:=␤It needs to be added to ast_handlers.␤ at ./elf_h line 2044␤»

[17:27] *** ced-2_ left
[17:28] *** ujwalic left
[17:33] <masak> finanalyst: 

[17:33] <masak> rakudo: say ((1|5) + 3).eigenstates.min

[17:33] <p6eval> rakudo 5b1ff9: OUTPUT«4␤»

[17:40] <finanalyst> masak: just reading backlog

[17:41] <finanalyst> masak: thanx. why eigenstates and not just .min?

[17:41] <masak> finanalyst: because a junction is inherently strange.

[17:41] <finanalyst> :)

[17:42] <masak> where 'strange' is very narrowly defined as 'behaving as several objects at the same time'

[17:43] <finanalyst> as in strange attractor??? 

[17:44] <masak> finanalyst: no, as in 'behaving as several objects at the same time'.

[17:45] <masak> or perhaps s/objects/values/

[17:46] <finanalyst> masak: still cant get junction to work. just posted a solution to scripting game problem on p6-users

[17:46] <finanalyst> which defined cards with Ace value of 1

[17:46] <finanalyst> s/1/11/

[17:46] <finanalyst> but i want to try ace=1|11

[17:47] <finanalyst> the routine for adding values in a hand of cards only seems to work if there is a single number

[17:48] <masak> finanalyst: I'm not exactly sure what it is you want to do.

[17:48] *** ced-2_ joined
[17:49] <finanalyst> in this problem I draw cards at random. sometimes there is an ace, sometimes not

[17:49] *** nihiliad left
[17:49] <finanalyst> if there is an ace, there is a junction, when not, just an integer is generated

[17:49] *** nihiliad joined
[17:49] <masak> finanalyst: I see an email by Richard Hainswort. is that you?

[17:49] <finanalyst> yes

[17:49] <masak> s/wort/worth/

[17:49] <masak> ok.

[17:49] <masak> reading it.

[17:50] <finanalyst> make the value for ace 1|11, and the problem arises on line 46

[17:51] <finanalyst> i tried $score = ([+] values %hand).eigenstates.min;

[17:51] <finanalyst> but this fails when none of the cards is an ace

[17:52] <masak> ah.

[17:52] <masak> this is very possibly a topic for p6l.

[17:53] <masak> but you'd need to minimize it to its essentials.

[17:53] <finanalyst> rakudo: my @x=1,2,3,4; say [+] @x

[17:53] <p6eval> rakudo 5b1ff9: OUTPUT«10␤»

[17:54] <finanalyst> rakudo: my @x=1,2,3,4; say ([+] @x).eigenstates.min

[17:54] <masak> the core problem is something like this: how does one treat a value which might or might not be a junction?

[17:54] <p6eval> rakudo 5b1ff9: OUTPUT«Method 'eigenstates' not found for invocant of class 'Integer'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[17:54] <finanalyst> rakudo: my @x=1|11,2,3,4; say ([+] @x).eigenstates.min

[17:54] <p6eval> rakudo 5b1ff9: OUTPUT«10␤»

[17:54] <masak> i.e. it might be an Any, in which case we want to do just .min, or it might be a Junction, in which case we want .eigenstates.min

[17:55] <masak> and smartmatching feels like a somewhat heavy-handed solution.

[17:55] <masak> (if it even works)

[17:55] <finanalyst> why can eigenstates not be used with an integer?

[17:55] <diakopter> s1n: also, see http://en.wikipedia.org/wiki/Stern-Brocot_tree

[17:57] <finanalyst> masak: isnt an integer a singleton, which is a degenerate junction?

[17:57] <masak> finanalyst: not in the type system of Perl 6, no.

[17:57] <finanalyst> writing an email to p6l

[17:57] <masak> you have Object as the base class, with Any and Junction deriving it.

[17:58] <masak> what you call 'singleton' is simply an instance of a class deriving Any.

[18:05] *** ced-2 left
[18:08] <pugs_svn> r25841 | moritz++ | [irclog] allow dot in channel name

[18:08] <moritz__> good evening

[18:08] <diakopter> moritz__: hi

[18:08] <masak> moritz__: hello there.

[18:10] <moritz__> great news I see

[18:10] <moritz__> commit e9aca5feac943b526021646f7144b1a7736fe201, Make lexicals visible inside of eval

[18:10] <masak> indeed.

[18:11] <diakopter> moritz__: on the irclogs, some long unbroken strings have spaces inserted... I assume this is to accomodate smaller monitors?  I was going to suggest using a zero-width breaking space instead

[18:11] <masak> moritz__: I just wrote a testing framework that uses that.

[18:11] <masak> didn't even know it was fixed only recently.

[18:12] <moritz__> diakopter: you're right... and patches welcome

[18:12] <moritz__> diakopter: the souce is in misc/irclog/ in the pugs repo

[18:13] <diakopter> &#8203;

[18:17] <moritz__> let's hope it works...

[18:17] <diakopter> hm, apparently not many browsers/OSes combos like it

[18:17] <pugs_svn> r25842 | moritz++ | [irclog] use breaking zero-width space to break long words, diakopter++

[18:17] <diakopter> I guess we'll find out :)

[18:18] <moritz__> aye

[18:21] <diakopter> when did/does your site start using r25842

[18:23] <moritz__> it does now...

[18:24] <moritz__> but some pages are still in the cache

[18:24] *** moritz__ is now known as moritz_

[18:28] * diakopter looks at http://irclog.perlgeek.de/perl6/2009-03-15#i_986618

[18:29] <diakopter> cool

[18:30] <moritz_> looks fine in firefox here

[18:30] *** r0bby left
[18:31] *** r0bby joined
[18:33] <diakopter> ah, I figured you might insert the html entity, but I guess if you're sending Content-Type=application/xhtml+xml; charset=utf-8   ... that should be enough

[18:33] <moritz_> aye

[18:34] <moritz_> it works really well if you declare the character encoding properly; I don't know why so many people always escape anything that's non-ASCI

[18:34] <moritz_> I

[18:36] *** ced-2_ left
[18:40] *** ced-2 joined
[18:41] <moritz_> I see we had some interesti in GSOC projects

[18:41] <moritz_> and I was away :(

[18:42] <moritz_> (and for future reference: yes, it's OK to /msg me)

[18:44] <dalek> rakudo: d2ad095 | (Moritz Lenz)++ | src/setting/Match.pm:

[18:44] <dalek> rakudo: in Match.perl, quote hash keys

[18:44] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d2ad095fdcc9e6f74d530a03fd04c782eb5efef6

[18:46] *** Kisu left
[18:59] <pugs_svn> r25843 | moritz++ | [t/spec] more tests for BUILD

[19:00] * moritz_ submits three bug reports assembled over the weekend

[19:03] <masak> nice.

[19:04] <masak> moritz_: about the escaping of non-ASCII: that's cargo-culting.

[19:05] <masak> even I am sometimes positively surprised over how good the UTF-8 support is getting everywhere.

[19:05] <masak> use.perl.org being a notable exception. :/

[19:05] <moritz_> another aspect could be that people just don't know about encodings

[19:06] <moritz_> and if you don't know about them, they sometimes "magically" work, and sometimes not

[19:06] <masak> that's certainly a big cause, yes.

[19:06] <pugs_svn> r25844 | putter++ | [elfparse] Sketched in rx :my modifier support.  Also tweaked README and Makefile.

[19:08] <TimToady> perlmonks being another notable

[19:08] <moritz_> aye

[19:08] <moritz_> perlmonks is some latin-1 version, which breaks non-latin-1 stuff in <code>...</code> tags

[19:09] <pugs_svn> r25845 | putter++ | [elf] EmitSimpleP5.pm: added Var hook for elfparse.

[19:09] <moritz_> TimToady: I think it might be a sane idea to let parameters in pointy blocks default to Object instead of Any...

[19:09] <moritz_> TimToady: because for @stuff -> $x { ... } will not DWIM if there are Junctions in @stuff

[19:10] <moritz_> it autothreads over $x, but since `for' is mostly used in void context...

[19:10] <moritz_> the joining that follows the autothreading doesn't do anything at all

[19:10] <moritz_> so basically we loose the information what kind of Junction was in @stuff

[19:11] <TimToady> seems like a weak reason to break symmetry though

[19:11] <TimToady> but I'll think about it

[19:12] <moritz_> more important: write code involving junctions ;-)

[19:13] <TimToady> there's a lot to be said for the view that blocks are transparent to Junctions, since you can usually see the code you're calling

[19:13] <TimToady> and most of the time don't think of blocks as closures even

[19:14] * moritz_ is glad somebody sees some sense in what he says ;-)

[19:15] <moritz_> (although jnthn will probably kill me for it, because he'll end up implementing it ;)

[19:16] <TimToady> but defaulting those parameters to Object shouldn't be that hard, conceptually

[19:16] <TimToady> we did it that way precisely to get the decision to fall out of ordinary dispatch semantics

[19:16] <moritz_> aye

[19:17] <TimToady> well, later

[19:17] <TimToady> dechurching & :)

[19:20] <masak> there's an internet connection in church?

[19:20] <jnthn> It'd not be so hard to make pointy blocks default to Object, fwiw.

[19:20] <moritz_> good ;-)

[19:21] *** masak left
[19:21] <moritz_> jnthn: I found two nice OO bugs for you over the weekend

[19:22] <jnthn> moritz_: RT'd?

[19:22] <moritz_> jnthn: yes

[19:22] <jnthn> moritz_: Danke, I'll look at them on my Rakudo day(s). :-)

[19:23] <moritz_> my @x=1|11,2,3;my $s=[+] @x; $s.perl.say; say ?($s ~~ Junction)

[19:23] <moritz_> rakudo: my @x=1|11,2,3;my $s=[+] @x; $s.perl.say; say ?($s ~~ Junction)

[19:23] <p6eval> rakudo d2ad09: OUTPUT«any(6, 16)␤Null PMC access in get_integer()␤current instr.: 'parrot;Junction;!type' pc 9186 (src/classes/Junction.pir:180)␤»

[19:24] <moritz_> it seems that writing articles (and trying out the stuff you write) is nearly as effective in finding bugs as normal programming is :)

[19:28] <moritz_> rakudo: my $a = 5; eval 'say $a'

[19:28] <p6eval> rakudo d2ad09: OUTPUT«5␤»

[19:29] * moritz_ closes another ticket

[19:30] *** japhb left
[19:32] <finanalyst> moritz_: i was doing something similar on junctions earlier today

[19:32] *** ced-2_ joined
[19:34] *** finanalyst left
[19:36] <diakopter> std: v.32;

[19:36] <p6eval> std 25845: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/kgwbxaj0HC line 1:␤------> [32mv.[31m32;[0m␤    expecting postfix_prefix_meta_operator␤FAILED 00:02 34m␤»

[19:36] <diakopter> std: v0.32;

[19:36] <p6eval> std 25845: OUTPUT«ok 00:02 34m␤»

[19:37] <diakopter> std: 3.

[19:37] <p6eval> std 25845: OUTPUT«##### PARSE FAILED #####␤Obsolete use of . to concatenate strings; in Perl 6 please use ~ instead at /tmp/sJJTSwhiTH line 0:␤------> [32m[31m[0m␤FAILED 00:02 34m␤»

[19:38] *** ced-2__ joined
[19:39] <diakopter> std: .52

[19:39] <p6eval> std 25845: OUTPUT«ok 00:02 34m␤»

[19:39] <diakopter> rakudo: .52 * 3

[19:39] <p6eval> rakudo d2ad09: RESULT«1.56»

[19:40] <diakopter> std: .\ 32

[19:40] <p6eval> std 25845: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/020FHSgD5o line 1:␤------> [32m.\ [31m32[0m␤    expecting any of:␤        dotty method or postfix␤  unspace␤FAILED 00:02 35m␤»

[19:42] <diakopter> rakudo: 00325 + 00010

[19:42] <p6eval> rakudo d2ad09: OUTPUT«Leading 0 does not indicate octal in Perl 6␤Leading 0 does not indicate octal in Perl 6␤»

[19:42] <diakopter> std: 00325 + 00010

[19:42] <p6eval> std 25845: OUTPUT«Potential difficulties:␤  Leading 0 does not indicate octal in Perl 6 at /tmp/ATVqnTRsJo line 1:␤------> [32m00325[31m + 00010[0m␤  Leading 0 does not indicate octal in Perl 6 at /tmp/ATVqnTRsJo line 1:␤------> [32m00325 + 00010[31m[0m␤ok 00:02 34m␤»

[19:44] *** ced-2 left
[19:48] <diakopter> . o O ( grammars can express [some portion of] type system definitions )

[20:00] *** ced-2_ left
[20:01] <diakopter> std: 0_001._____0___1

[20:01] <p6eval> std 25845: OUTPUT«ok 00:02 34m␤»

[20:18] <literal> rakudo: my @a = <red blue>; say "@a[]"

[20:18] <p6eval> rakudo d2ad09: OUTPUT«@a[]␤»

[20:18] <literal> unimplemented?

[20:26] <s1n> rakudo: my @a = [red, blue]; say "@a"

[20:26] <p6eval> rakudo d2ad09: OUTPUT«Could not find non-existent sub red␤current instr.: '_block14' pc 56 (EVAL_17:40)␤»

[20:26] <s1n> rakudo: my @a = <red blue>; say "@a"

[20:26] <p6eval> rakudo d2ad09: OUTPUT«@a␤»

[20:27] <s1n> rakudo: my $a = "oh hai"; say "$a"

[20:27] <p6eval> rakudo d2ad09: OUTPUT«oh hai␤»

[20:29] <s1n> rakudo: my %hash = (:a<A>, :b<B>); say "%hash"

[20:29] <p6eval> rakudo d2ad09: OUTPUT«%hash␤»

[20:29] <s1n> literal: guess not

[20:31] <jnthn> literal: yes, unimplemented

[20:31] <literal> s1n: you need the braces for interpolation

[20:31] <literal> well, you will need them once it's implemented...

[20:32] *** schmalbe joined
[20:33] <jnthn> The praces work now. :-)

[20:33] <jnthn> *braces

[20:33] <jnthn> Just not "@foo[]"

[20:33] <jnthn> rakudo: my @a = <a b>; say "{@a[]}"

[20:33] <p6eval> rakudo d2ad09: OUTPUT«a b␤»

[20:34] <literal> I meant the braces in "%hash{}" :P

[20:35] *** ced-2 joined
[20:36] <jnthn> literal: Ah, OK.

[20:37] <diakopter> TimToady: see std: 0_001._____0___1  S02: "A single underscore..."

[20:47] *** ced-2__ left
[20:47] *** schmalbe left
[20:53] <literal> rakudo: my $foo = 'bar'; chop $foo; say $foo;

[20:53] <p6eval> rakudo d2ad09: OUTPUT«bar␤»

[20:53] <literal> and rakudo doesn't have s/// yet, right?

[20:54] <literal> so what can I use? substr?

[20:55] <literal> rakudo: my $foo = 'bar'; $foo = substr($foo, -1); say $foo;

[20:55] <p6eval> rakudo d2ad09: OUTPUT«r␤»

[20:55] <Matt-W> literal: $string.subst is implemented

[20:55] <literal> rakudo: my $foo = 'bar'; $foo = substr($foo, 0, -1); say $foo;

[20:55] <p6eval> rakudo d2ad09: OUTPUT«ba␤»

[20:55] <literal> yup

[20:56] <literal> Matt-W: ok

[20:56] <Matt-W> it's like s/// but just not the syntax

[20:56] <mberends> rakudo: "literal".subst( /lit/, "lot").say

[20:56] <p6eval> rakudo d2ad09: OUTPUT«loteral␤»

[20:58] <literal> rakudo: 'foo'.subst(/;$/, '').say

[20:58] <p6eval> rakudo d2ad09: OUTPUT«Statement not terminated properly at line 1, near "(/;$/, '')"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[20:58] <literal> rakudo: 'foo;'.subst(/\;$/, '').say

[20:58] <p6eval> rakudo d2ad09: OUTPUT«foo␤»

[20:59] *** eternaleye left
[20:59] <literal> rakudo: 'foo;'.subst(/;$/, '').say

[20:59] <p6eval> rakudo d2ad09: OUTPUT«Statement not terminated properly at line 1, near "(/;$/, '')"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[20:59] <literal> rakudo: 'foo;'.subst(/\;$/).say

[20:59] <p6eval> rakudo d2ad09: OUTPUT«No applicable methods.␤␤current instr.: 'parrot;P6metaclass;dispatch' pc 130 (src/classes/ClassHOW.pir:93)␤»

[20:59] <literal> can't omit the replacement argument? hm

[21:00] <mberends> true

[21:00] *** pmurias joined
[21:02] <pmurias> LS

[21:02] <pmurias> sorry

[21:02] <literal> . ..

[21:12] *** alester joined
[21:20] *** ced-2_ joined
[21:24] <diakopter> std: "&say2()"

[21:24] <p6eval> std 25845: OUTPUT«ok 00:04 46m␤»

[21:26] *** Chillance joined
[21:26] *** amoc left
[21:28] <pugs_svn> r25846 | hinrik++ | [util/perl6.vim] fix minor typo

[21:34] *** ced-2 left
[21:38] *** alester left
[21:46] *** nacho_ joined
[21:47] *** amoc joined
[21:58] *** ejs1 left
[22:11] *** Sepheebear joined
[22:16] <pugs_svn> r25847 | moritz++ | [t/spec] some fudge improvements

[22:17] *** eternaleye joined
[22:18] *** japhb joined
[22:19] *** rmt_ left
[22:27] *** hercynium joined
[22:31] <diakopter> moritz_: irclog server up?

[22:32] <moritz_> diakopter: yes

[22:47] *** ujwalic joined
[22:48] <ujwalic> is   '-a' an example or prefix or postfix ? 

[22:48] <moritz_> where do you have that from?

[22:49] <ujwalic> in the doc

[22:49] <ujwalic> -a

[22:49] <moritz_> which doc?

[22:50] <ujwalic> book/ch09_pct.pod     ....including postfix (C<-a>),....

[22:50] <moritz_> I think that's simply wrong

[22:51] <ujwalic> is it a typo ?

[22:51] <moritz_> it should be prefix, I think

[22:51] <ujwalic> I was thinking same :)

[22:51] <moritz_> and what's called a suffix in there should be a poxtfix

[22:52] <ujwalic> true

[22:52] * moritz_ improves that

[22:53] <ujwalic> can someone correct it .... along with :multi('CLispRatio', 'Number)  in the same pod

[22:54] <ujwalic> typos

[22:54] <ujwalic> missing ' after Number

[22:54] * moritz_ fixing

[22:57] <moritz_> ujwalic: fixes commited, thank you

[22:57] <ujwalic> :)

[23:00] *** pmurias left
[23:10] *** yahooooo left
[23:14] *** oskie joined
[23:27] <diakopter> std: say "&say("hi")"

[23:27] <p6eval> std 25847: OUTPUT«ok 00:04 46m␤»

[23:28] <diakopter> rakudo: say "&say("hi")"

[23:28] <p6eval> rakudo d2ad09: OUTPUT«Statement not terminated properly at line 1, near "hi\")\""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[23:28] <diakopter> pugs: say "&say("hi")"

[23:28] <p6eval> pugs: OUTPUT«hi␤1␤»

[23:28] * diakopter summons masak

[23:29] *** kate21de joined
[23:29] <moritz_> no need. We know that the only working interpolation is $scalar and { block }

[23:29] <moritz_> and there's already a ticket for that

[23:29] <diakopter> std: say "&say("&say("&say("hi")")")"

[23:30] <p6eval> std 25847: OUTPUT«ok 00:04 46m␤»

[23:30] <diakopter> pugs: say "&say("&say("&say("hi")")")"

[23:30] <p6eval> pugs: OUTPUT«hi␤1␤1␤1␤»

[23:30] <diakopter> interesting

[23:31] <diakopter> rakudo: say "{ ' 3 ' }"

[23:31] <p6eval> rakudo d2ad09: OUTPUT« 3 ␤»

[23:33] <diakopter> rakudo: say "{ say { " 4 " }.do(); say { " 5 " }.do() }"

[23:33] <p6eval> rakudo d2ad09: OUTPUT«Method 'do' not found for invocant of class 'Block'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[23:33] <diakopter> rakudo: say "{ say { " 4 " }(); say { " 5 " }() }"

[23:33] <p6eval> rakudo d2ad09: OUTPUT« 4 ␤ 5 ␤1␤»

[23:33] <diakopter> rakudo: say "{ say { " 4 " }(); say { " 5 " }(); 3; }()"

[23:33] <p6eval> rakudo d2ad09: OUTPUT« 4 ␤ 5 ␤3()␤»

[23:34] <diakopter> interestinger and interestinger

[23:36] <diakopter> rakudo: say "{ my $a = 2; { say --$a~"b" }(); { say ++$a~"c" }(); 3~"d"; }"

[23:36] <p6eval> rakudo d2ad09: OUTPUT«1b␤2c␤3d␤»

[23:37] <moritz_> wtf are you trying to do?

[23:37] <diakopter> lol

[23:37] <diakopter> I was trying to get it to output exactly what it outputted

[23:37] <diakopter> so it succeeded

[23:37] <moritz_> ;-)

[23:37] <diakopter> I'm trying to figure out how the interpolation works

[23:40] <diakopter> rakudo: my $a = 2; say "{ { say --$a~"b" }(); { say ++$a~"c" }(); 3~"d"; } ** $a **"

[23:40] <p6eval> rakudo d2ad09: OUTPUT«1b␤2c␤3d ** 2 **␤»

[23:41] <diakopter> rakudo: my $a = 2; say "{ { say ++$a~"b" }(); { say ++$a~"c" }(); 3~"d"; } ** $a **"

[23:41] <p6eval> rakudo d2ad09: OUTPUT«3b␤4c␤3d ** 4 **␤»

[23:41] <diakopter> rakudo: my $a = 2; say "** $a ** { { say ++$a~"b" }(); { say ++$a~"c" }(); 3~"d"; } ** $a **"

[23:41] <p6eval> rakudo d2ad09: OUTPUT«3b␤4c␤** 2 ** 3d ** 4 **␤»

[23:42] *** ujwalic left
[23:42] <diakopter> ok, so it invokes the block while interpolating

[23:42] <moritz_> the interpolation is quite simple...

[23:42] <moritz_> it finds the opening bracket...

[23:42] <moritz_> and then parses the rest as Perl 6

[23:43] <moritz_> until it finds a closing bracket that doesn't belong to the Perl 6 it tries to parse

[23:43] <moritz_> at that point, it reverts to string parsing

[23:43] *** yahooooo joined
[23:44] *** kate21de1 left
[23:44] <diakopter> rakudo: my $a = 2; say "{ my $b = 3; say $a*$b } ** $b **"

[23:44] <p6eval> rakudo d2ad09: OUTPUT«Scope not found for PAST::Var '$b' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[23:48] *** M_o_C left
[23:49] *** DemoFreak left
[23:54] *** japhb_ joined
