[00:00] <sjohnson> he might have saved about 25 bucks

[00:00] <sjohnson> oops, i mean i got the 3rd edition

[00:00] <DanielC> The book is $33 at amazon

[00:00] <sjohnson> yeah that is very affordable

[00:00] <DanielC> I think it is.

[00:00] <sjohnson> my boss works at a bookstore, so i highly doubt he'll order from amazon

[00:00] <sjohnson> but i would have

[00:01] <sjohnson> i bought my book on Ruby from amazon for really cheap, but the style of writing is impossible

[00:01] <sjohnson> i eventually had to put it down as i found David Flanagan's writing style extremely frustrating

[00:01] <sjohnson> as opposed to the camel book

[00:02] <sjohnson> and then i found out about Perl 6

[00:02] <sjohnson> and "threw in the towel" with Ruby

[00:02] <DanielC> Ruby is a very nice language, and I think it's good to learn multiple languages. Later on, you should consider giving Ruby another try.

[00:03] <DanielC> Don't let a bad book put you off from a good language.

[00:03] <sjohnson> k cool

[00:03] <sjohnson> that's good advice

[00:04] <DanielC> http://www.math.umd.edu/~dcarrera/ruby/0.3/

[00:04] <DanielC> This is something I wrote many years ago. It's about an older version of Ruby.

[00:04] <sjohnson> thanks

[00:04] <sjohnson> 1.8?

[00:04] <DanielC> I don't have access to this website anymore (I've long lost my password and I am no longer at U of Maryland).

[00:05] <DanielC> I don't understand why the school never deleted my account.

[00:05] <TimToady> rakudo: say '⚀⚀' .. '⚅⚅'

[00:06] <sjohnson> probably cause kids complained that the page was too useful

[00:06] <p6eval> rakudo 77f9d7: OUTPUT«⚀⚀⚀⚁⚀⚂⚀⚃⚀⚄⚀⚅⚁⚀⚁⚁⚁⚂⚁⚃⚁⚄⚁⚅⚂⚀⚂⚁⚂⚂⚂⚃⚂⚄⚂⚅⚃⚀⚃⚁⚃⚂⚃⚃⚃⚄⚃⚅⚄⚀⚄⚁⚄⚂⚄⚃⚄⚄⚄⚅⚅⚀⚅⚁⚅⚂⚅⚃⚅⚄⚅⚅␤»

[00:07] <TimToady> hmm, hangs in my rakudo

[00:10] <StephenPollei> grep Integr *pod --> S02-bits.pod:such as C<Callable>, C<Failure>, and C<Integral>. .. Integral is only mentioned once but never really explained, is it just Int ??

[00:10] <DanielC> Hangs my Rakudo too.

[00:13] *** DanielC left
[00:16] <TimToady> it's a utf8-from-terminal issue

[00:16] *** DanielC joined
[00:16] <TimToady> works in a file

[00:16] * DanielC 's X11 doesn't seem to get along with Compiz

[00:17] *** buubot joined
[00:23] *** kate21de joined
[00:24] <DanielC> Oh... I've seen Rakudo do weird things when reading Unicode from the terminal.

[00:24] <DanielC> That must be what's happening here.

[00:25] <DanielC> I filed a bug report, lets see...

[00:26] <DanielC> http://rt.perl.org/rt3/Public/Bug/Display.html?id=66312

[00:30] <pugs_svn> r27079 | stephenpollei++ | added more types like AnyChar Bool Grapheme

[00:39] *** bacek joined
[00:41] *** M_o_C left
[00:45] *** wknight8111 joined
[01:19] *** sri_kraih left
[01:22] *** molaf_x left
[01:23] *** molaf_x joined
[01:26] *** Ingmar joined
[01:41] <pugs_svn> r27080 | lwall++ | [CORE] couple more missing types

[01:57] *** justatheory joined
[02:03] *** DanielC left
[02:09] *** wknight8111 left
[02:17] *** Chillance left
[03:20] *** donaldh left
[03:20] *** donaldh joined
[03:32] *** buubot_ joined
[03:32] *** buubot_ left
[03:52] *** meppuru joined
[03:54] *** meppuru left
[04:05] *** ashizawa left
[04:05] *** ashizawa joined
[04:07] *** meppl left
[04:21] *** skids_ left
[04:26] *** payload left
[04:50] *** alester joined
[04:57] *** nihiliad left
[05:17] *** sparc left
[05:29] *** justatheory left
[05:43] *** ejs joined
[05:46] *** viklund joined
[06:06] *** viklund left
[06:20] *** REPLeffect left
[06:24] *** cognominal joined
[06:25] *** ejs left
[06:35] *** amoc joined
[06:35] *** viklund joined
[06:38] *** ejs joined
[06:50] *** alester left
[07:09] *** viklund left
[07:11] *** viklund joined
[07:17] <eternaleye> rakudo: say "⚁".name

[07:17] <p6eval> rakudo 77f9d7: OUTPUT«Method 'name' not found for invocant of class 'Str'␤»

[07:19] *** ejs left
[07:20] *** donaldh left
[07:20] *** donaldh joined
[07:53] *** amoc left
[08:03] *** viklund left
[08:04] *** kate21de1 joined
[08:08] *** simcop2387 left
[08:08] *** amoc joined
[08:10] *** justjohnny joined
[08:10] *** bacek left
[08:12] *** justjohnny left
[08:20] *** kate21de left
[08:29] *** barney joined
[09:02] *** M_o_C joined
[09:13] *** jferrero joined
[09:16] *** amoc__ joined
[09:19] *** Maghnus joined
[09:23] *** amoc left
[09:28] *** amoc joined
[09:28] *** amoc left
[09:28] *** Guest89867 joined
[09:28] *** Guest89867 left
[09:29] *** amoc joined
[09:42] *** amoc__ left
[09:52] *** pmurias joined
[09:53] *** masak joined
[09:53] <masak> greetings, backtracking-camels.

[09:55] <masak> rakudo: say False.name

[09:55] <p6eval> rakudo 77f9d7:  ( no output )

[09:55] <masak> no output?

[09:55] <masak> perl6: say False.name

[09:55] <p6eval> rakudo 77f9d7: OUTPUT«Method 'name' not found for invocant of class ''␤»

[09:55] <p6eval> ..elf 27080: OUTPUT«Can't locate object method "name" via package "False" (perhaps you forgot to load "False"?) at (eval 123) line 3.␤ at ./elf_h line 5881␤»

[09:55] <p6eval> ..pugs: OUTPUT«*** No such method in class Bool: "&name"␤    at /tmp/7y9Yq5rFh2 line 1, column 5 - line 2, column 1␤»

[09:55] <masak> rakudo: say False.name

[09:56] <p6eval> rakudo 77f9d7: OUTPUT«Method 'name' not found for invocant of class ''␤»

[09:56] * masak submits rakudobug

[09:56] <pmurias> masak: hi

[09:56] <masak> pmurias: hello.

[09:56] <masak> I came here mainly because I backlogged over DanielC's git adventures. came to tell him that his changes aren't really lost even after a hard reset.

[09:57] <masak> but he's not here, so...

[09:58] *** russell_ joined
[09:59] <pmurias> masak: how can i restore changes lost after a hard reset (not counting retyping them)?

[10:00] * pmurias also learnt what the --hard option does the hard way

[10:00] <masak> pmurias: I don't really know. I just know that the commit still exists until the next GC run.

[10:00] <masak> if you know the SHA1 hash of the commit, it's easy.

[10:00] <masak> just cherry-pick it back in.

[10:01] <masak> if not, hunting through the objects in .git/ would be a possibly time-consuming last resort...

[10:01] <masak> but I bet there's a better way.

[10:01] * masak heads over to #git to ask

[10:10] <masak> ah! found the answer myself! :)

[10:10] <masak> git-reflog.

[10:11] <masak> very nice subcommand, I really should use it more.

[10:14] *** payload joined
[10:18] <masak> by the way, I'm glad C<rotate> went from being in-place to returning a new array. my initial reaction on the first spec addition was that it should. :)

[10:19] <masak> but the examples at S32/Containers:498 and :502 haven't been changed to match the new semantics.

[10:22] <masak> ok, going offline again. I'm hoping to get some significant Hitomi work done offline today.

[10:22] *** masak left
[10:22] *** rfordinal joined
[10:23] <payload> yee, hitomi work ftw. need to set up a perl 6 blog till end of month

[10:24] *** sjohnson left
[10:25] *** sjohnson joined
[10:26] *** agentzh joined
[10:28] *** sri_kraih joined
[10:37] *** A-Tech joined
[10:42] *** payload left
[10:43] <moritz_> rakudo: say 'a'..'z' Z 1, 2, 3

[10:43] <p6eval> rakudo 77f9d7: OUTPUT«a1b2c3␤»

[10:43] <moritz_> rakudo: say 'a'..'c' Z 1, 2, 3

[10:43] <p6eval> rakudo 77f9d7: OUTPUT«a1b2c3␤»

[10:43] <moritz_> rakudo: say ('a'..'c' Z 1, 2, 3).join(',')

[10:43] <p6eval> rakudo 77f9d7: OUTPUT«a,1,b,2,c,3␤»

[10:45] <moritz_> does t/spec/S32-container/zip.t 11-12 fails for anybody else?

[10:55] *** DanielC joined
[10:55] <DanielC> moin

[11:00] <DanielC> @seen mberends

[11:00] <lambdabot> mberends is in #perl6. I last heard mberends speak 22h 41m 26s ago.

[11:00] <DanielC> :-(

[11:00] <DanielC> @seen masak

[11:00] <lambdabot> I saw masak leaving #perl6 37m 30s ago, and .

[11:00] <DanielC> masak: ping?

[11:09] <M_o_C> DanielC: [12:22:33] <masak> ok, going offline again. I'm hoping to get some significant Hitomi work done offline today.

[11:09] <DanielC> thanks

[11:09] <M_o_C> np

[11:10] *** smtms joined
[11:20] *** donaldh left
[11:20] *** donaldh joined
[11:29] *** Whiteknight joined
[11:34] <mberends> @seen DanielC 

[11:34] <lambdabot> DanielC is in #perl6. I last heard DanielC speak 24m 33s ago.

[11:34] <DanielC> o/

[11:34] <mberends> o/

[11:34] <DanielC> mberends!

[11:34] <DanielC> Good to see you.

[11:34] <DanielC> How do you like JSON?

[11:35] <mberends> likewise, you're roaring through the file formats!

[11:35] <DanielC> I'm making progress, though not always through  direct path.

[11:36] <DanielC> I assume you've seen my latest changes?

[11:40] <mberends> yes! like it! JSON is nice. it would be interesting to survey the current "popularity" of the various formats in terms of how often they are currently used in Rakudo, Parrot and Pugs. I think we may end up with serialize() and deserialize() functions that takes a subroutine reference to select an emitter/parser option.

[11:41] *** pmurias left
[11:41] <mberends> yeah, it's not always a direct path ;)

[11:41] <DanielC> I like JSON. The only reason I didn't go for it earlier is that I didn't want to write a parser for it. But viklund mentioned that Parrot already has a JSON <-> Parrot parser.

[11:43] <DanielC> module-meta.pir has most of the json functions we need. The only thing I haven't figured out is how we are going to get the byte offset "Foo::Bar" inside the json file.

[11:44] <DanielC> But we can already read a json subset from a file, parse it, and convert back to json.

[11:45] <mberends> It would be a great help if the index that we build (in a parrot hash for example) contains not only the offset in the metadata file, but also the length in bytes. That way we could separate the file IO from the parsing/emitting, they become string ops.

[11:46] <mberends> in a test case, could you try to build a full Parrot data structure with all the fields that we are proposing, and verify the conversions to and from?

[11:47] <DanielC> I have done that but visually. I wasn't sure how to write a test for that.

[11:47] <DanielC> The JSON output is not going to come in any predictable order.

[11:48] <mberends> order is np. removals are draining all my tuits, but in some pseudo-pir:

[11:49] <DanielC> So I wasn't sure how to check that two json strings are equivalent, or that two parrot objects are equivalent.

[11:49] <mberends> the short answer: is_deeply

[11:56] <mberends> two strings, just: is( have, want, "test description" )

[11:56] <DanielC> Right. That's now what I did?

[11:58] <mberends> two data structures: is_deeply( have, want, 'deep structure comparison' )  according to Synopsis of parrot/runtime/parrot/library/Test/More.pir

[11:58] <DanielC> ah

[11:59] <DanielC> So you can do is_deeply( $P0, $P1, "test deep structures")  ?

[11:59] <mberends> yes. if it follows the Perl 5 standard, it should recurse the nested contents, comparing all.

[11:59] <DanielC> cool

[12:00] <DanielC> seems to work

[12:01] <mberends> extra cool. going afk for lunch, bbiab &

[12:01] <DanielC> k

[12:03] *** vreg left
[12:31] *** araujo left
[12:56] *** rfordinal left
[13:00] <mberends> DanielC: pushed a small addition to design-notes.html

[13:01] <DanielC> ok

[13:01] <DanielC> I am hunting a really weird Parrot bug.

[13:01] <DanielC> http://pastebin.com/m428594f4

[13:01] <DanielC> Go to #parrot to join the fun.

[13:04] <mberends> no tuits for a few days - but it's normal for hash keys to switch order

[13:05] *** amoc left
[13:06] <DanielC> mberends: You don't understand, is_deeply is not comparing $P0["a"] with $P1["a"]

[13:07] <DanielC> The Parrot guys just figured out that is_deeply doesn't support hashes.

[13:08] <mberends> gah, that's a pity. The original is_deeply in Perl 5 took a lot of debugging as well for corner cases.

[13:08] <DanielC> We'll have to forget about using is_deeply for the time being.

[13:08] <mberends> :(

[13:08] <DanielC> The Parrot guys said they'd file a ticket.

[13:09] <DanielC> I mean, "hashes" are not much of a corner case. They are a very important data structure.

[13:09] <mberends> they're probably glad you discovered the bug :)

[13:09] <DanielC> :)

[13:12] <DanielC> Could have been worse... It could have been a bug in json.

[13:12] <DanielC> Fortunately, json seems to work well.

[13:13] <mberends> ok, then we need to substitute many string comparisons for the single is_deeply(). In Perl we could AND them together in a single ok() test, but in PIR we each member of the data structure must be tested separately.

[13:13] <mberends> s/PIR we/PIR/

[13:17] *** Jedai joined
[13:17] <DanielC> I think I know how we can get the byte offset and length of the json data.

[13:17] <DanielC> Get the json string for each group of modules separately.

[13:17] <DanielC> So we can compute the length of each separately.

[13:18] <DanielC> Then just catenate them together. Prepend { "version": "0.1", "datafile": "modules.data", "groups": [   ... and append ] } at the end.

[13:18] *** pmurias joined
[13:18] <DanielC> Then we can just compute the offsets.

[13:18] *** skids_ joined
[13:18] <mberends> sounds good. string processing is much faster than file IO.

[13:18] <DanielC> Oh, and put commas in between... but you get the idea.

[13:18] <mberends> yes

[13:19] <DanielC> This means that every time we install a new module we have to rewrite the entire metadata and the entire index.

[13:20] <DanielC> But I figure that's ok. People install modules infrequently.

[13:20] <mberends> yes, it's hard to avoid that without ugly file formats

[13:20] <mberends> it's definitely ok

[13:20] <DanielC> Expensive writes + fast reads = good compromise

[13:21] <DanielC> Ok, I'll be afk for a while.

[13:21] <DanielC> see ya

[13:21] <DanielC> afk &

[13:21] <mberends> :)

[13:26] <avar> w 3

[13:28] *** payload joined
[13:34] *** amoc joined
[13:41] <Infinoid> DanielC et al: http://nopaste.snit.ch/16909 should fix is_deeply for hashes

[13:45] *** rjh left
[13:47] <mberends> Infinoid: thanks, will try with DanielC later :)

[13:47] *** rjh joined
[13:59] *** simcop2387 joined
[14:01] <Infinoid> (corner cases) I'd love additional eyeballs on that sort of thing.  I'm pretty sure that it won't successfully compare values which are instances of the Undef class, for example

[14:03] <Infinoid> And if Undef is what you get if you do a lookup on a hash which doesn't contain the key you provide, the simple key-count check is insufficient and it will also need a followup check to make sure hash2 doesn't contain anything missing from hash1

[14:03] <Infinoid> My brain hurts from generating a sentence that long, with grammar that bad.  I'm gonna go sit in the corner now.

[14:06] *** amoc left
[14:14] *** bejuryu joined
[14:24] *** DanielC left
[14:30] <pmichaud> good morning, #perl6

[14:34] *** jrockway joined
[14:35] <pmichaud> Actually, looking up non-existent keys in hashes normally returns NULL (in Parrot)

[14:36] *** meppl joined
[14:46] *** explorer__ joined
[14:49] *** pmurias left
[14:49] *** payload left
[14:49] *** explorer__ left
[15:03] *** perl7 joined
[15:03] *** jferrero left
[15:20] *** donaldh left
[15:20] *** donaldh joined
[15:21] *** kane_ joined
[15:24] *** kane___ left
[15:25] *** DanielC joined
[15:26] *** amoc joined
[15:26] *** Whiteknight left
[15:27] <perl7> hi from the future

[15:41] *** nihiliad joined
[15:41] *** amoc left
[15:51] *** sri_kraih left
[15:53] *** iblechbot joined
[15:58] *** barney left
[15:59] <perl7> any perl6 man here?¿

[16:02] *** sri_kraih joined
[16:02] *** lichtkind joined
[16:04] * skids_ wonders if perl7 will be a graphical computing language.  (Screw unicode!  go for bitmaps!)

[16:05] <perl7> I'm ready ... but I need to spend time before perl6 runs

[16:06] <lichtkind> perl7: do you have an project called perl 7?

[16:07] <perl7> yes, the next version of perl

[16:07] <skids_> .o0(maybe we should write perl6 in perl7)

[16:08] <perl7> what was the first: egg or hen?

[16:09] <skids_> The egg, of course.

[16:09] <skids_> (because you did not specify the species of the egg)

[16:11] <perl7> will be perl6 released this year?

[16:11] <skids_> Depends, how much of it do you need to work?

[16:11] <perl7> I think in v 1.0

[16:12] <skids_> Version numbers are such an arbitrary thing.

[16:13] *** bejuryu left
[16:13] <perl7> so this year.... no

[16:13] <skids_> didn't say that.  But I wouldn't know.

[16:15] <perl7> on Chrismast?

[16:15] <Sark23> why need perl 6 long to finish? the start of perl 6 was a long time ago but now isn't finish, why?

[16:17] <skids_> quality takes time.

[16:17] <Sark23> hm, how many people are developer on rakudo?

[16:18] *** barney joined
[16:19] <skids_> Less than we would like, but a lot more than there were.

[16:20] <skids_> note rakudo and parrot are conjoined projects presently, so it's a combined effort of the two projects.

[16:20] <skids_> You can see the contribution levels by taking a git log of rakudo and an svn log of parrot.

[16:21] <skids_> (and there's a graph somewhere)

[16:22] *** Psyche^ joined
[16:24] <skids_> http://github.com/rakudo/rakudo/graphs/impact

[16:24] <skids_> wierd -- from the mousovers that looks like it is parrot's impact graph, not rakudo.

[16:25] <skids_> e.g. where's jnthn?

[16:25] *** justatheory joined
[16:25] <skids_> OIC, scroll right

[16:39] *** Patterner left
[16:39] *** Psyche^ is now known as Patterner

[16:40] *** lollan joined
[16:43] <lollan> hi guys, I usally use perl 5, even tough I like it I'd like to use perl 6, I know it's not completly over but I was wondering if I could talk with some people who use it in here. Does somebody have 5 minutes ?

[16:43] <skids_> yep, fire away

[16:46] <lollan> thanks skids_ first (I know it sounds silly) is it stable enough for me to write code ?

[16:46] <DanielC> I wouldn't use it in "production" but you can certainly use it for non-critical applications.

[16:46] <skids_> There are sections of the spec that are implemented and stable.  There are other places where there is flux.  It depends on what you want to do.

[16:47] <skids_> Like, what are some of the applications you would target?

[16:47] <DanielC> lollan: There is already a wiki and a board game written in Perl 6.

[16:47] <lollan> ok ok

[16:48] <lollan> Well skids_ I wanted to use perl6 as a script engine for some game I'm coding

[16:48] <DanielC> It's slow right now, so you can't use it for anything performance critical.

[16:49] <skids_> lollan: that would involve a lot of concurrency?

[16:49] <lollan> skids_, It can but I don't plan to, why is it a problem ?

[16:49] *** Chillance joined
[16:50] <skids_> Concurrency other than coroutines is really not specced yet, and even coroutines are not implemented yet.

[16:50] <lollan> Ok the slow thing will be a problem for me. I see that there are many implementation of perl6, I mean the specification is the same but I see several engine to run it like pugs, parrot or SMOP.

[16:50] <lollan> skids_, so basically I should not go into parrallel impletation

[16:51] <skids_> Yes, right now what's working best is the class system.

[16:51] <skids_> So projects that use complex classes and typing will be the best fit.

[16:51] <lollan> about the many implementation of perl6, what is that ? and which one does people prefer these days ?

[16:52] <lollan> skids_, from what you say it seems like it is still in its early days

[16:52] <lollan> the class system is one of the fundamental of any languages no ?

[16:52] <skids_> rakudo is the leader, SMOP is actively developed.  Elf is at a transition phase so I don't know quite what's up with it.  Pugs is old and not developed much anymore.

[16:52] <lollan> DanielC, what do you use perl6 for ?

[16:53] <lollan> Ok, it's a bit sad for pugs I do find haskell efficient ^^. What's Elf ?

[16:53] <DanielC> lollan: I only use Perl 6 to test Perl 6.

[16:53] <skids_> Yes, the class system is very fundamental.  Perl6's is really extremely complex/powerful, though, so even just having that working is a major thing.

[16:53] <lollan> skids_, ok

[16:54] <DanielC> lollan: But I am writing very non-trivial programs with Perl 6.

[16:54] <skids_> parsers are another good use, since the regexp stuff works OK.

[16:54] <lollan> DanielC, ok

[16:54] <DanielC> parsers work great.

[16:54] <DanielC> The Perl 6 grammar system is really cool.

[16:55] <lollan> what do you mean by grammar system ?

[16:55] <skids_> regexps are fully classed now.

[16:55] <DanielC> The Perl 5 regexes have been extended. Now you can write entire grammars.

[16:55] *** A-Tech left
[16:56] <DanielC> The grammar for Perl 6 is itself written in Perl 6.

[16:56] <lollan> DanielC, that sounds like something efficient 

[16:56] <DanielC> Rakudo uses Perl 6 grammars to parse Perl 6. That should give you an idea of how powerful it is.

[16:56] <lollan> so the core of perl6 is not in C anymore ?

[16:56] <DanielC> nope!

[16:56] <DanielC> self-hosting

[16:56] <DanielC> http://daniel.carrera.bz/2009/06/rpn-calculator-in-perl-6/

[16:57] <DanielC> That post is an introduction to Perl 6 grammar.

[16:57] <lollan> cheers DanielC 

[16:57] <DanielC> You get to build a cool RPN calculator with Perl 6.

[16:57] <skids_> well, there's some C, for basic data structures.

[16:58] *** clug joined
[16:58] <DanielC> very little I think.

[16:58] <lollan> yes for data structure I don't think it's completly avoidable

[16:58] <lollan> Rakudo is another perl6 implementation ?

[16:58] <DanielC> yes

[16:58] <DanielC> It is probably the most advanced one.

[16:58] <DanielC> It is built on Parrot.

[16:58] <lollan> ok why so many implementation of perl6 ?

[16:58] <DanielC> Parrot + Perl 6

[16:58] <clug> Perl6 should have a way to change request variables into arrays like php does with $_GET and $_POST

[16:59] <lollan> clug, the old CGI system is dead then ? (not a bad news)

[16:59] <DanielC> lollan: You see, Perl 6 is a specification now, just like C and C++. There are many C compilers right? Anyone who wants can write a Perl 6 compiler. As long as they pass the test suite, it can be called Perl 6.

[16:59] <skids_> http://svn.pugscode.org/pugs/src/perl6/STD.pm <-- the entire perl6 grammar in perl6, a.k.a. Larry's playground

[17:00] <lollan> DanielC, I didn't see that like that, it's pretty efficient (and cool) !

[17:00] <DanielC> :-)

[17:01] <clug> ooh write a perl compiler in php

[17:01] <clug> and compile the perl into php code ahahahaha

[17:01] <lollan> :-) that means as well that lexers with perl6 must be pretty cool

[17:01] <lollan> clug, a compiler in php would be quite slow no ?

[17:02] <clug> it would be awesome

[17:02] <lollan> ^^

[17:02] <clug> Does perl have goto?

[17:02] <DanielC> clug: I hope not.

[17:02] <skids_> of course.

[17:02] <clug> http://perldoc.perl.org/functions/goto.html

[17:02] <clug> hmm python has a better implementation

[17:03] <clug> they also implement comefrom

[17:03] <lollan> I don't use goto with perl5 so I wouldn't know, there are to many ways to toy with reference anyway

[17:03] <skids_> But you should rarely need it given the versatility of the control structures.

[17:03] <lollan> clug, I didn't know that

[17:03] <DanielC> Unless you are writing assembly, there is no place for a goto in a program.

[17:03] <lollan> the comefrom stuff

[17:04] <clug> http://en.wikipedia.org/wiki/COMEFROM

[17:04] <clug> what about comefrom?

[17:04] <lollan> DanielC, we can agree on that

[17:04] <lollan> club: if you're code is structured enough why would you need a comefrom

[17:04] <skids_> I beg to differ.  goto in C is a huge benefit to code readability and maintainability.

[17:04] <lollan> ?

[17:04] <clug> yeah, I write all my loops using goto

[17:04] <lollan> I don't completly agree with C

[17:05] <DanielC> clug: You are kidding, right?

[17:05] <clug> yes

[17:05] <lollan> but it's true that sometimes it is useful goto in C, when I was coding C for processor stuff, goto was often used instead of switch and stuff

[17:05] <DanielC> k

[17:05] <skids_> lollan: you just have to know when to use it, and when not to.

[17:05] <lollan> skids_, yep

[17:05] <lollan> clug, you killed me

[17:05] <lollan> lmao

[17:06] <skids_> e.g. it's best used for undoing stuff in failure conditions.

[17:06] <lollan> perl6 looks alright for me I just wonder which implementation would be complete first

[17:07] <skids_> rakudo is the safest bet IMO.  But keep an eye on what SMOP is up to.

[17:07] <lollan> SMOP idea looks good, I didn't dig into it yet but it really looks like some kind of well tought experimentation

[17:08] *** clug left
[17:08] <lollan> I didn't know rakudo before now to be honest

[17:08] <lollan> I knew of parrot because of all the langugages implemented with it

[17:08] <skids_> rakudo: "pleased to meet you, lollan".say

[17:08] <p6eval> rakudo 77f9d7: OUTPUT«pleased to meet you, lollan␤»

[17:12] <lollan> lol

[17:13] <lollan> These days it looks like it's fashion and reliable to implement languages with a VM or a spec.

[17:13] <skids_> but not both? :-)

[17:13] <lollan> lol

[17:13] <lollan> I was looking at some languges earlier I found stuff like Clojure, Jruby and stuff like that

[17:14] <lollan> I don't understand the thing with those one though but perl6 rox

[17:14] <lollan> I'll stay on perl and haskell this year too

[17:14] <lollan> thanks guys ^^

[17:14] <skids_> coded-in-a-single-sitting labguages?

[17:15] <lollan> no I know a bunch of them but I don't code in many

[17:15] <lollan> it's manly C++, Java , Haskell, perl5  and lua from time to time

[17:15] <lollan> even tough I know python I do my best not to use it lol

[17:16] <lollan> same with C#

[17:16] <lollan> I just felt last week that perl5 did its time

[17:16] <skids_> I keep managing to find better things to do with my time than learn python, though it is on the TODO list somewhere down there.

[17:16] <lollan> skids_, well I should have done like you

[17:16] <lollan> lol

[17:17] *** Chillance left
[17:17] <skids_> Damn, now I don't have the excuse of deciding whether to learn that or ruby first anymore :-)

[17:17] <lollan> but I heard that django was "cool" so I gave it a go to finally come back on perl and php

[17:17] <lollan> skids_, If I were you I'd learn python not ruby

[17:18] <lollan> I found ruby people and ruby language a bit off

[17:18] <lollan> it's weird to say but there's too much freedom in that

[17:18] <lollan> it's like there's no structure

[17:19] <skids_> I've done some php, ergo I know php stands for "prefer to have perl"

[17:21] <lollan> come on skids_ php is not that bad. to be honest with you if it wasn't for catalyst I would still be doing some php today (I speak of php from version 4 before that It's like you said)

[17:21] <skids_> It's OK, if you don't have perl.  Certainly much preferable to bash.

[17:22] <lollan> lol you know speaking of bash I heard that some dude are pretty into it making crazy huge stuff with it

[17:22] <skids_> But I came in already knowing perl, so it was like -- wow, nothing here impresses me at all.

[17:22] <lollan> skids_, all those implementation will they have a standard lib with them ?

[17:22] <skids_> You mean, for embedding?

[17:23] <lollan> skids_, php is not impressive it's just useful, yeah for embedding even with mod_perl embedding with php is nice

[17:23] <lollan> I'm like you I prefer perl especially with CPAN but php is not bad

[17:24] <skids_> I'm not sure if there's a formal Perl6 implementation-netural spec for embedding yet.

[17:24] *** frew joined
[17:24] <skids_> Certainly, Parrot intends to allow embed of just aboyut anything that runs on it.

[17:25] <lollan> yep soon chossing a language would be useless with parrot

[17:25] <skids_> I would actually like to see bash implemented on Parrot, but only because then we could make a busybox that comes with a bunch of languages preinstalled.

[17:26] <lollan> the more the better as long as the implementation is well done I don't see the problem

[17:28] <lollan> skids_, are you involve into the imp. of perl6 ?

[17:28] <lollan> I mean one of them ?

[17:29] <skids_> I'm too frazzled to actually string together a coherent commit.  I do peck at things though.

[17:30] <skids_> And keep track, to the extent I have time to.

[17:34] <lollan> ok ok anyway you and DanielC  just convert someone to perl6, I have a look around and toy with some imp. ; cheers guys

[17:34] <skids_> /etc/init.d/ <-- people who like to write crazy long things in bash :-)

[17:35] <skids_> best of luck, drop by with questions, of course

[17:36] <lollan> lol I had a look at that some while back especially the networking script

[17:37] <lollan> I always wondered why do linux bother with stuff like bash when there are so many scrypt languages which are more understandable ?

[17:38] <skids_> It's cowardice.  Nobody wants to declare an official language for their distro due to language wars.  Bash wins by default.  (luckily the csh/ksh/bash wars seem mostly over)

[17:39] <lollan> lol ok ok

[17:40] <lollan> I'll have to run, I was at work (yes working saturday sucks but it's for my own self so it's cool)

[17:40] <lollan> thanks again skids_ 

[17:40] <lollan> see you around

[17:40] <skids_> np anytime

[17:41] *** charsbar_ left
[17:41] *** charsbar joined
[17:42] *** lollan left
[17:52] *** barney left
[17:54] *** amoc joined
[18:01] *** perl7 left
[18:04] *** iblechbot left
[18:06] *** minazo joined
[18:38] *** minazo left
[18:40] *** Chillance joined
[19:10] *** cotto left
[19:20] *** donaldh left
[19:20] *** donaldh joined
[19:21] *** kate21de1 left
[19:26] *** jan_ joined
[19:29] *** mberends left
[19:41] *** ZuLuuuuuu joined
[19:49] *** payload joined
[20:01] *** FurnaceBoy joined
[20:09] *** pmurias joined
[20:16] *** sparc joined
[20:25] *** araujo joined
[20:32] *** viklund joined
[20:40] *** ZuLuuuuuu left
[20:46] *** masak joined
[20:46] <masak> oh hai.

[20:46] <masak> DanielC: pong.

[20:46] *** kate21de joined
[20:47] <masak> I'm growing to like Genshi. I've studied it in detail today.

[20:47] <masak> currently blocking on something like expat bindings for Hitomi. would that be possible in Parrot today?

[20:48] *** Fuad joined
[20:48] <Fuad> Hello=)

[20:48] <masak> Fuad: hi!

[20:49] <DanielC> hi

[20:49] <DanielC> masak: I forget what I wanted to ask you :-)

[20:49] <masak> DanielC: ok. :)

[20:49] <masak> DanielC: nice to see progress with your parrot-library stuff!

[20:49] <DanielC> masak: I'm sure it was something about the parrot-module-lib ting.

[20:50] <DanielC> Yeah :-)

[20:50] <DanielC> The project is coming along really well. I'm happy.

[20:50] <DanielC> I've learned a lot about Parrot in the process.

[20:51] <masak> sounds nice.

[20:51] <DanielC> Initially I thought it would be very hard because I didn't know Parrot, but I have found Parrot very easy to learn.

[20:52] <masak> I like the ROADMAP. it makes me excited.

[20:52] <DanielC> :-)

[20:52] <Fuad> hey masak:)

[20:52] <masak> unfortunately, I have to sleep now, because I'm treating a light cold.

[20:53] <DanielC> Ok, good night.

[20:53] <masak> Fuad: have you downloaded Rakudo yet, or are you just here to say hi? :)

[20:53] <Infinoid> DanielC: Did you have a chance to check out that patch?

[20:54] <DanielC> Infinoid: Which patch?

[20:54] <DanielC> Infinoid: Is there already a patch for the is_deeply bug?

[20:55] <Infinoid> Yes.  I guess you left shortly before I linked you to it

[20:55] <DanielC> Oops, sorry.

[20:55] <Infinoid> http://nopaste.snit.ch/16909

[20:55] <DanielC> *click*

[20:55] <Infinoid> That gets your test case passing here, was hoping for some more eyeballs on it tho

[20:56] *** masak left
[20:56] <Infinoid> I'm also not sure whether is_deeply is currently kosher with regards to definedness/existingness of keys

[20:56] <DanielC> Well, I'm no expert on parrot, I'm not sure how I can help.

[20:56] <Infinoid> I can crash it by passing in a hash which contains some Undefs, for example

[20:57] <DanielC> hn

[20:57] <DanielC> hmm

[20:57] <Infinoid> well, it would help me to understand how (or if) perl6 does exists() on hash keys

[20:59] <Infinoid> Can perl6 create hash keys containing Undef values?  Should is_deeply compare !defined and !exists elements as equivalent?

[20:59] <DanielC> Btw, I've only been using Rakudo < 3 weeks. So it's hard for me to do much more than test.

[20:59] <pmurias> ruoso: hi

[20:59] <Infinoid> Fair enough. :)

[20:59] <DanielC> rakudo: my %h = ( "foo" => undef );

[20:59] <p6eval> rakudo 77f9d7:  ( no output )

[20:59] <DanielC> Infinoid: Looks like it can.

[21:00] <Infinoid> I was just thinking of nailing some more of the corner cases, that's all

[21:00] <DanielC> yeah

[21:00] <Infinoid> Ok.  Passing that hash to is_deeply() will probably crash it

[21:00] <DanielC> Are Rakudo hashes implemented as Parrot hashes?

[21:01] <Infinoid> I don't know.  If you're using Parrot's is_deeply(), it probably doesn't matter either way

[21:02] <Infinoid> I don't see a rakudo-specific hash pmc

[21:03] <DanielC> pmichaud would know the answer.

[21:03] <DanielC> Do you know if this patch will make it to the Tuesday release?

[21:05] <Infinoid> I will commit it today, so yes.  I mainly wanted to know the extent of further work

[21:06] <DanielC> I'm impressed. I didn't expect a patch so soon. Good work :)

[21:06] <Infinoid> I do worry that it may expose bugs in rakudo's test suite that were hidden by the previous breakage, but that's probably a good thing overall

[21:07] <DanielC> Exposing bugs++

[21:07] <DanielC> I think it is a good thing.

[21:07] <DanielC> You want to find out about bugs as early as possible.

[21:09] <Infinoid> I'll make sure nothing else broke in parrot or rakudo, and check it in

[21:10] <Infinoid> I've also added another parrot test to cover it.

[21:13] <Infinoid> What's the right spectest thingy to run for rakudo?

[21:13] <viklund> ?

[21:13] <DanielC> make spetest ?

[21:13] <DanielC> make spectest ?

[21:13] <viklund> make spectest !

[21:14] <Infinoid> Great.  For some reason, I seem to remember "spectest_regression", but I think that's disappeared

[21:14] <Infinoid> thanks

[21:18] <viklund> @seen viklund

[21:18] <lambdabot> You are in #perl6. I last heard you speak just now.

[21:19] <viklund> nice

[21:19] <viklund> Good Night

[21:23] *** viklund left
[21:30] *** pmurias left
[21:39] *** rfordinal joined
[21:39] *** rfordinal left
[21:41] *** Fuad left
[21:55] *** Whiteknight joined
[21:55] *** rfordinal3643 joined
[22:04] *** justatheory left
[22:04] *** PacoLinux left
[22:10] <lichtkind> ruoso: ping

[22:13] *** M_o_C left
[22:16] <lichtkind> good night

[22:16] *** lichtkind left
[22:22] *** rfordinal3643 left
[22:30] *** kate21de left
[22:30] *** justatheory joined
[22:48] *** xinming_ joined
[23:08] *** xinming left
[23:20] *** donaldh left
[23:20] *** ZuLuuuuuu joined
[23:20] *** donaldh joined
[23:23] *** ruoso left
[23:40] *** cognominal left
[23:41] *** sri_kraih left
[23:51] *** ZuLuuuuuu left
