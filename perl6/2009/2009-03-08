[00:07] *** justatheory joined
[00:09] <TimToady> sparc_: not any more, you also have to get rakudo these days

[00:09] <sparc_> oh ok, cool :)

[00:09] <Sartak> http://rakudo.org/how-to-get-rakudo it's very easy nowadays

[00:09] <sparc_> i just got rakudo downloaded, and used the --gen-parrot option

[00:10] <sparc_> it's a nice install process so far, gracias :p

[00:10] *** justatheory left
[00:11] <sparc_> Sartak: ossum, thanks

[00:11] *** Ariens_Hyperion left
[00:20] *** ZuLuuuuuu left
[00:25] *** alester is now known as AndyAway

[00:26] <pugs_svn> r25741 | putter++ | [elf_h] Flatten some logical infix op applications before emitting.

[00:26] <pugs_svn> r25741 | putter++ | Eg, &&(&&(2,3),4) -> &&(2,3,4).  For elfblue, to keep code emitted from STD_red and STD.pm trees identical.

[00:30] <pugs_svn> r25742 | lwall++ | [STD] give intelligent error message when placeholder fights with signature

[00:36] *** meppl left
[00:39] <pugs_svn> r25743 | lwall++ | [implicit-parameter.t] placeholder conflict requires eval_die_ok

[00:43] *** M_o_C left
[00:46] *** mikehh left
[00:47] *** [particle]1 joined
[00:47] <mncharity> hmm, STD.pm/gimme5 is looking more and more like a p6 implementation, rather than merely a parser.

[00:49] *** M_o_C joined
[00:51] <mncharity> TimToady: a random question, what is your vision for STD.pm with respect to scope?

[00:52] *** protorom joined
[00:53] <mncharity> as time passes, my impression is STD.pm keeps getting bigger, mostly with p6 code embedded in the regexen, and is moving beyond "just enough analysis to do a correct parse" towards... full lexical analysis?  a full p6 implementation?

[00:54] <diakopter> he said yesterday (here) that he didn't have that purpose... he wants to port gimme5 to viv's emitp5

[00:54] <diakopter> first, at least

[00:55] <diakopter> but, (imho) in order to do that... a lot of that p6 code in those regexen needs to be understood/interpreted... :P

[00:56] *** justatheory joined
[00:57] <diakopter> I think it was yesterday.

[00:57] <diakopter> maybe it was the day before.

[00:57] *** M_o_C left
[01:00] <pugs_svn> r25744 | putter++ | [elfparse] Fork src/perl6/STD.pm and gimme5, r25030.

[01:00] <pugs_svn> r25744 | putter++ | Elf had been tracking STD.pm HEAD, then stumbled and stopped on r25030.  This forking makes it easier to non-linearly chase after the current STD.pm.

[01:01] <mncharity> diakopter: ah, thanks!  pondering...

[01:02] *** protorom left
[01:04] *** [particle] left
[01:12] *** sparc_ left
[01:19] <mncharity> http://irclog.perlgeek.de/perl6/2009-03-06#i_961681 thru http://irclog.perlgeek.de/perl6/2009-03-06#i_961938

[01:20] *** c1sung left
[01:20] <diakopter> mncharity: yeah.. "translate gimme5 to viv"

[01:22] <mncharity> "just trying to get other people to do my work"... hmm... so if I go away, gimme5 might be translated into p6 and... oh, viv is p5.

[01:22] <mncharity> so a p6->p5 compiler written in p5.  which might then be translated into p6.

[01:23] <diakopter> well, a compiler of just the parser

[01:23] <mncharity> yeah... sigh.

[01:23] <diakopter> but yeah I guess ... theoretically...

[01:23] <diakopter> it could source translate the entire way

[01:27] * mncharity builds rakudo.  though I suspect http://rakudo.org/status 's "accessing outer lexicals from eval" and "nested package/grammar/class declarations" mean rakudo can't run elf, and "Perl 6 closures in regexes" than it can't run STD.pm.  ah well.

[01:28] <mncharity> hmm, actually, STD_red-based elf might not need "accessing outer lexicals from eval"...?

[01:34] <cspencer> what does a "Non-Positional argument for @vals in call to foo" imply?

[01:38] *** justatheory left
[01:39] <mncharity> context?

[01:40] <cspencer> sure, let me get an example here, one second...

[01:41] <mncharity> oh, it's a rakudo error message?

[01:41] <cspencer> yes :)

[01:41] <cspencer> rakudo: class Any is also { multi method foo(@vals:) { say "vals is a: " ~ @vals.WHAT } }; 2.foo;

[01:42] <p6eval> rakudo ed4cd1: OUTPUT«Non-Positional argument for @vals in call to foo␤current instr.: 'die' pc 16289 (src/builtins/control.pir:204)␤»

[01:42] <cspencer> so i'm aware that "2" isn't an array, but i suppose i was expecting @vals to slurp it in or something...

[01:42] <cspencer> or do i need to write another multi method for that case?

[01:43] <cspencer> rakudo: class Any is also { multi method foo(@vals:) { say "vals is a: " ~ @vals.WHAT } }; (2).foo;

[01:43] <p6eval> rakudo ed4cd1: OUTPUT«Non-Positional argument for @vals in call to foo␤current instr.: 'die' pc 16289 (src/builtins/control.pir:204)␤»

[01:44] <diakopter> class Any is also { multi method foo(@vals:) { say "vals is a: " ~ @vals.WHAT } }; 2.foo(3);

[01:44] <diakopter> rakudo: class Any is also { multi method foo(@vals:) { say "vals is a: " ~ @vals.WHAT } }; 2.foo(3);

[01:44] <p6eval> rakudo ed4cd1: OUTPUT«No applicable candidates found to dispatch to for 'foo'␤current instr.: 'parrot;P6metaclass;dispatch' pc 320 (src/classes/ClassHOW.pir:161)␤»

[01:44] <diakopter> oh, I see

[01:44] <diakopter> rakudo: class Any is also { multi method foo(@vals:) { say "vals is a: " ~ @vals.WHAT } }; ([2]).foo();

[01:44] <p6eval> rakudo ed4cd1: OUTPUT«vals is a: Array␤»

[01:44] <cspencer> rakudo: class Any is also { multi method foo(@vals:) { say "vals is a: " ~ @vals.WHAT } }; (2,).foo;

[01:45] <p6eval> rakudo ed4cd1: OUTPUT«vals is a: Array␤»

[01:49] <mncharity> "regression fudge"... tasty fudge which is turning itself back into flour and sugar...?

[01:50] <diakopter> or fudge that, when eaten, helps one regress...

[01:52] <mncharity> hmm, so fudge that reminds one of grad school talk snacks, or childhood treats

[01:57] * mncharity wonders "what's a $*foo ?".  It seems assorted $+foo's have turned into them...

[01:58] <mncharity> wait, that's just a global... curious...

[02:01] *** tcliou|Away left
[02:01] *** LCamel left
[02:01] *** brunoV left
[02:04] *** DemoFreak left
[02:06] <Sartak> a contextualizable global I think

[02:10] <mncharity> thanks :)

[02:13] <TimToady> yes, we encourage all access to globals through context vars now

[02:14] <TimToady> as for executing p6 closures, it's not really much problem for gimme5, so I don't see why it would be much more problem when viv translates p6 to p5

[02:14] <TimToady> I do have to write some things oddly for gimme5 that viv would find it easier to backtraslate

[02:15] <TimToady> and there are aspects to the backtranslation that assume p5 is doing things that it really isn't, like context vars emulated with local

[02:16] <TimToady> mncharity: see above

[02:16] <TimToady> groceries &

[02:16] *** orafu left
[02:25] <bacek> rakudo: my $c = &infix:<cmp>; say 5 &$c 42;

[02:25] <p6eval> rakudo ed4cd1: OUTPUT«Statement not terminated properly at line 1, near ":<cmp>; sa"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:25] <bacek> std: my $c = &infix:<cmp>; say 5 &$c 42;

[02:25] <p6eval> std 25744: OUTPUT«############# PARSE FAILED #############␤Syntax error (two terms in a row?) at /tmp/QRQxXFHKzd line 1:␤------> [32mmy $c = &infix:<cmp>; say 5 &$c [31m42;[0m␤    expecting any of:␤      infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤ 

[02:25] <p6eval> ..terminator␤FAILED...

[02:26] *** orafu joined
[02:26] <bacek> std: my $c = &infix:<cmp>; say &$c(5, 42);

[02:26] <p6eval> std 25744: OUTPUT«ok 00:03 48m␤»

[02:26] <bacek> rakudo: my $c = &infix:<cmp>; say &$c(5, 42);

[02:26] <p6eval> rakudo ed4cd1: OUTPUT«Statement not terminated properly at line 1, near ":<cmp>; sa"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:27] *** orafu left
[02:27] * bacek wears masak's hat

[02:27] *** orafu joined
[02:30] <mncharity> re context vars, nod.  I'm not sure I follow the rest.  If it's a "you can do a transliteration from p6 to p5 with little analysis, don't really need a compiler" suggestion, I don't see how containers, etc, can be either compiled away or implemented without crippling performance, without a non-trivial compiler.

[02:31] *** Maghnus left
[02:32] *** Maghnus joined
[02:35] <mncharity> The "smop is so brute fast we don't have to be smart" argument, while I don't buy it, has some plausibility... well, at least it's been argued.  But I don't see how to do p6 on p5 without at least type analysis, which seems beyond the scope of viv.  Or I'm just missing the point entirely... :)

[02:35] *** Maghnus_ joined
[02:36] <diakopter> the amount of substitutions in gimme5.... 

[02:36] <mncharity> drat.  not the right thing.  svn revert, and I'll make another try at :my another day.

[02:36] *** Maghnus_ left
[02:36] <mncharity> ...?

[02:36] <diakopter> and the code generation.... it's definitely non-trivial, imho.

[02:38] <mncharity> ok.  but my impression is it's all local.  no "we know this variable is doesn't escape scope and is never mumbled, so instead of the slow general p6 variable thing, we'll do simple and fast instead".

[02:39] <mncharity> gimme5 seems to do "everything simple and fast".

[02:39] <mncharity> the "fast" of which I am almost daily grateful. :)

[02:40] <diakopter> my guess is that his Perl 6 code is very Perl 5y.

[02:40] <mncharity> but the "everything simple" doesn't seem to get you full p6 on p5.

[02:40] *** c9s__ joined
[02:42] <mncharity> re p5y, http://perlcabal.org/svn/pugs/view/src/perl6/STD.pm , dunno

[02:43] <mncharity> end of day for me.  cheers, and thanks all.

[02:44] <diakopter> ttyl

[02:45] *** alester joined
[02:46] <mncharity> You'd think you could get a good number for the diameter of a hydrogen atom without having to read primary literature, "please pay $30 to see this article" literature, but it seems no.  sigh. :/

[02:46] <mncharity> good numbers can rarely be counted on

[02:47] *** mncharity left
[02:50] <alester> t/harness can miss options. :-(

[02:51] *** Maghnus left
[03:06] *** Maghnus joined
[03:22] *** Whiteknight left
[03:28] *** Chillance left
[03:30] *** orafu left
[03:30] *** OuLouFu joined
[03:32] <bacek> rakudo: my $x=-7; $x min= -9; say $x

[03:32] <p6eval> rakudo ed4cd1: OUTPUT«-9␤»

[03:35] *** OuLouFu is now known as orafu

[03:46] *** literal left
[03:50] *** literal joined
[03:53] <bacek> rakudo: multi sub foo(Code $c, *@values) { ... }; say foo(1..5);

[03:53] <p6eval> rakudo ed4cd1: OUTPUT«No applicable candidates found to dispatch to for 'foo'␤current instr.: '_block14' pc 89 (EVAL_18:45)␤»

[03:53] <bacek> rakudo: multi sub foo(Code $c = sub { ... }, *@values) { ... }; say foo(1..5);

[03:53] <p6eval> rakudo ed4cd1: OUTPUT«No applicable candidates found to dispatch to for 'foo'␤current instr.: '_block14' pc 89 (EVAL_18:45)␤»

[03:53] <bacek> perl6: multi sub foo(Code $c = sub { ... }, *@values) { ... }; say foo(1..5);

[03:54] <p6eval> elf 25744: OUTPUT«Parse error in: /tmp/6tIb4SID36␤panic at line 1 column 30 (pos 30): Missing right brace␤WHERE: multi sub foo(Code $c = sub { ... }, *@values) { ... }; say ␤WHERE:                              /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:255:in `_block_rest'␤ 

[03:54] <p6eval> ..ST...

[03:54] <p6eval> ..pugs: OUTPUT«*** Unimplemented stub called␤    at /tmp/s8iVjAWyVW line 1, column 61-70␤       /tmp/s8iVjAWyVW line 1, column 50-54␤»

[03:54] <p6eval> ..rakudo ed4cd1: OUTPUT«No applicable candidates found to dispatch to for 'foo'␤current instr.: '_block14' pc 89 (EVAL_18:45)␤»

[03:54] <bacek> perl6: multi sub foo(Code $c = sub { ... }, *@values) { say ~@values }; say foo(1..5);

[03:54] <p6eval> rakudo ed4cd1: OUTPUT«No applicable candidates found to dispatch to for 'foo'␤current instr.: '_block14' pc 89 (EVAL_19:45)␤»

[03:54] <p6eval> ..pugs: OUTPUT«␤1␤»

[03:54] <p6eval> ..elf 25744: OUTPUT«Parse error in: /tmp/uORW50A4aA␤panic at line 1 column 30 (pos 30): Missing right brace␤WHERE: multi sub foo(Code $c = sub { ... }, *@values) { say ~@value␤WHERE:                              /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:255:in `_block_rest'␤ 

[03:54] <p6eval> ..ST...

[03:58] *** literal left
[03:58] *** literal joined
[03:59] <bacek> rakudo: my $f = sub { ... }; say $f ~~ Code;

[03:59] <p6eval> rakudo ed4cd1: OUTPUT«1␤»

[04:01] <bacek> rakudo: say -3 cmp -9

[04:01] <p6eval> rakudo ed4cd1: OUTPUT«1␤»

[04:01] <bacek> rakudo: say -3 <=> -9

[04:01] <p6eval> rakudo ed4cd1: OUTPUT«1␤»

[04:01] *** literal left
[04:01] *** literal joined
[04:04] <TimToady> rakudo: say '-3' cmp '-9'

[04:04] <p6eval> rakudo ed4cd1: OUTPUT«-1␤»

[04:04] <TimToady> bug in cmp

[04:04] <TimToady> er, no

[04:04] <TimToady> sorry

[04:05] <TimToady> confusing with p5

[04:05] <bacek> :)

[04:05] <TimToady> rakudo: say -3 leg -9

[04:05] <p6eval> rakudo ed4cd1: OUTPUT«-1␤»

[04:05] <TimToady> nevermind

[04:05] <bacek> perl6: say min(<5 -3 7 0 1 -9>)

[04:05] <p6eval> pugs: OUTPUT«-9␤»

[04:05] <p6eval> ..rakudo ed4cd1: OUTPUT«-3␤»

[04:05] <p6eval> ..elf 25744: OUTPUT«Undefined subroutine &GLOBAL::min called at (eval 123) line 3.␤ at ./elf_h line 4377␤»

[04:06] <bacek> Looks like pugs is correct here...

[04:06] <diakopter> rakudo: say 'a' leg 'b'

[04:06] <p6eval> rakudo ed4cd1: OUTPUT«-1␤»

[04:06] <TimToady> perl6: say min <d e a d b e e f>

[04:06] <p6eval> rakudo ed4cd1: OUTPUT«a␤»

[04:06] <p6eval> ..pugs: OUTPUT«d␤»

[04:06] <p6eval> ..elf 25744: OUTPUT«Undefined subroutine &GLOBAL::min called at (eval 123) line 3.␤ at ./elf_h line 4377␤»

[04:06] <TimToady> rakudo gets that one right

[04:06] <TimToady> and pugs worng

[04:06] <TimToady> there's a lovely word

[04:07] <diakopter> EALLWORNGOUT

[04:07] <TimToady> at least elf is consistent :)

[04:08] <bacek> perl6: say min { $^a cmp $^b } <5 -3 7 0 1 -9>

[04:08] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "7"␤    expecting operator, ":" or ","␤    at /tmp/bGjr8kdnZs line 1, column 31␤»

[04:08] <p6eval> ..rakudo ed4cd1: OUTPUT«Statement not terminated properly at line 1, near "7 0 1 -9>"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[04:08] <p6eval> ..elf 25744: OUTPUT«Parse error in: /tmp/iaTks5N6PJ␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: say min { $^a cmp $^b } <5 -3 ␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[04:08] <p6eval> ..STD_r...

[04:08] <bacek> perl6: say min { $^a cmp $^b }, <5 -3 7 0 1 -9>

[04:08] <p6eval> pugs: OUTPUT«*** Cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subOuterPads = [PRuntime {pr_pad = MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xb651a6e9>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store ...

[04:08] <p6eval> ..elf 25744: OUTPUT«Use of uninitialized value $a in string comparison (cmp) at ./elf_h line 4283.␤Use of uninitialized value $b in string comparison (cmp) at ./elf_h line 4283.␤Undefined subroutine &GLOBAL::min called at (eval 124) line 3.␤ at ./elf_h line 4377␤»

[04:08] <p6eval> ..rakudo ed4cd1: OUTPUT«-3␤»

[04:08] *** sparc_ joined
[04:09] <bacek> perl6: say min { $^a cmp $^b }, <-3 -9>

[04:09] <p6eval> elf 25744: OUTPUT«Use of uninitialized value $a in string comparison (cmp) at ./elf_h line 4283.␤Use of uninitialized value $b in string comparison (cmp) at ./elf_h line 4283.␤Undefined subroutine &GLOBAL::min called at (eval 124) line 3.␤ at ./elf_h line 4377␤»

[04:09] <p6eval> ..rakudo ed4cd1: OUTPUT«-3␤»

[04:09] <p6eval> ..pugs: OUTPUT«*** Cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subOuterPads = [PRuntime {pr_pad = MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xb661cb51>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store ...

[04:09] <diakopter> rakudo: [Rcmp] -1,0,1,0,-1,0,1,0,-1

[04:09] <p6eval> rakudo ed4cd1: OUTPUT«Could not find non-existent sub Rcmp␤current instr.: '_block14' pc 53 (EVAL_16:38)␤»

[04:09] <diakopter> eh

[04:10] <diakopter> what'd I do wrong there

[04:10] <TimToady> perl6: say [min] <d e a d b e e f>

[04:10] <p6eval> elf 25744: OUTPUT«Undefined subroutine &GLOBAL::min called at (eval 133) line 3.␤ at ./elf_h line 4377␤»

[04:10] <p6eval> ..rakudo ed4cd1: OUTPUT«a␤»

[04:10] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected end of input␤    at /tmp/d4WdTTUQf7 line 2, column 1␤»

[04:11] <diakopter> rakudo: [cmp] -1,0,1,0,-1,0,1,0,-1

[04:11] <p6eval> rakudo ed4cd1: OUTPUT«Could not find non-existent sub cmp␤current instr.: '_block14' pc 53 (EVAL_16:38)␤»

[04:11] <TimToady> perl6: say [min] <5 -3 7 0 1 -9>

[04:11] <p6eval> elf 25744: OUTPUT«Parse error in: /tmp/Jm4TJb0bXz␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: say [min] <5 -3 7 0 1 -9>␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[04:11] <p6eval> ..STD_red/st...

[04:11] <p6eval> ..rakudo ed4cd1: OUTPUT«-3␤»

[04:11] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "7"␤    expecting operator, ":" or ","␤    at /tmp/glBjVEOt6P line 1, column 17␤»

[04:11] <bacek> diakopter: there is no reduce metaop for cmp

[04:11] <TimToady> yes, because it's "diffy"

[04:11] <diakopter> rakudo: [eqv] -1,0,1,0,-1,0,1,0,-1

[04:11] <p6eval> rakudo ed4cd1: OUTPUT«Could not find non-existent sub eqv␤current instr.: '_block14' pc 53 (EVAL_16:38)␤»

[04:12] *** nekobaka joined
[04:12] <diakopter> rakudo: [eqv]() -1,0,1,0,-1,0,1,0,-1

[04:12] <p6eval> rakudo ed4cd1: OUTPUT«Could not find non-existent sub eqv␤current instr.: '_block14' pc 53 (EVAL_16:38)␤»

[04:12] <TimToady> std: [eqv]() -1,0,1,0,-1,0,1,0,-1

[04:12] <p6eval> std 25744: OUTPUT«ok 00:02 37m␤»

[04:13] <TimToady> heh, took the - as binary

[04:13] <bacek> rakudo looks totally wrong returning -3 for [min] <5 -3 7 0 1 -9>...

[04:13] <TimToady> probably using leg on it

[04:13] <bacek> and "min <5 -3 7 0 1 -9>" as well

[04:14] <bacek> TimToady: no.

[04:14] <bacek> It actually uses infix:cmp

[04:14] <TimToady> which is picking leg

[04:14] <bacek> my @array = <5 -3 7 0 1 -9>;

[04:14] <bacek> # Tests for C<min>:

[04:14] <bacek> is @array.min,  -3, "basic method form of min works";

[04:14] <bacek> is min(@array), -3, "basic subroutine form of min works";

[04:14] <TimToady> or leg semantics

[04:14] <bacek> this is from t/spec. Is it correct?

[04:14] <diakopter> rakudo: [>=] -1,0,1,0,-1,0,1,0,-1

[04:14] <TimToady> - comes before '0'

[04:14] <p6eval> rakudo ed4cd1: RESULT«Bool::False»

[04:15] <diakopter> rakudo: [<=] -1,0,1,0,-1,0,1,0,-1

[04:15] <p6eval> rakudo ed4cd1: RESULT«Bool::False»

[04:15] <TimToady> I don't see any way that -3 can be the correct answer

[04:16] <TimToady> oh, wait, I see what's happening

[04:16] <TimToady> <...> is returning strings

[04:16] <TimToady> perl6: say [min] +«<5 -3 7 0 1 -9>

[04:16] <diakopter> rakudo: min(-3, 7, 0)

[04:17] <p6eval> pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting block, "\\", variable name, "\187" or "\171"␤    at /tmp/JqjjymoOim line 2, column 1␤»

[04:17] <p6eval> ..rakudo ed4cd1: OUTPUT«say requires an argument at line 1, near " [min] +\x{ab}<"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[04:17] <p6eval> ..elf 25744: OUTPUT«Parse error in: /tmp/LOyoUEDumz␤panic at line 1 column 13 (pos 13): Error in quotesnabber␤WHERE: say [min] +«<5 -3 7 0 1 -9>␤WHERE:            /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:1324:in `quotesnabber'␤  (eval):1:in `__quote_7233927'␤ 

[04:17] <p6eval> ..STD_red/prelude.r...

[04:17] <bacek> oh..

[04:17] <p6eval> rakudo ed4cd1: RESULT«-3»

[04:17] <TimToady> perl6: say [min] +<< <5 -3 7 0 1 -9>

[04:17] <p6eval> pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting block, "\\", variable name, ">>" or "<<"␤    at /tmp/OkgFSJFM3D line 2, column 1␤»

[04:17] <p6eval> ..rakudo ed4cd1: OUTPUT«say requires an argument at line 1, near " [min] +<<"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[04:17] <p6eval> ..elf 25744: OUTPUT«Undefined subroutine &GLOBAL::min called at (eval 125) line 3.␤ at ./elf_h line 4377␤»

[04:17] <TimToady> perl6: say [min] map {+$_}, <5 -3 7 0 1 -9>

[04:18] <p6eval> elf 25744: OUTPUT«Parse error in: /tmp/L1OTI3l5dJ␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: say [min] map {+$_}, <5 -3 7 0␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[04:18] <p6eval> ..STD_r...

[04:18] <p6eval> ..rakudo ed4cd1: OUTPUT«-9␤»

[04:18] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "map"␤    expecting operator, ":" or ","␤    at /tmp/lKOkmKCgCV line 1, column 11␤»

[04:18] <TimToady> there you go

[04:19] <TimToady> but seems like if all the strings are numbers, the dwimmy thing to return is a list of numbers

[04:19] <TimToady> not a list of strings

[04:20] *** Limbic_Region left
[04:21] <TimToady> course, if you really mean numbers, (5,-3,7,0,1,-9) is no longer than the <> form

[04:23] <bacek> rakudo: say "-3" cmp "7"

[04:24] <p6eval> rakudo ed4cd1: OUTPUT«-1␤»

[04:24] *** Kimtaro left
[04:25] <bacek> rakudo: say "5" cmp "-3"

[04:25] <p6eval> rakudo ed4cd1: OUTPUT«1␤»

[04:28] *** Kimtaro joined
[04:35] *** WootKit joined
[04:41] *** WootKit left
[05:21] *** masak joined
[05:22] <masak> good morning!

[05:22] *** alester left
[05:22] <cspencer> masak: good morning!

[05:24] <masak> I'm being visited by my kid sister this weekend, so not much time for Perl 6. but I have this two-hour window before she wakes up. :)

[05:25] <cspencer> heh :)

[05:28] <cspencer> congrats on your november wiki prize winning :)

[05:29] <masak> thank you. :)

[05:32] *** araujo left
[05:32] <masak> rakudo: for any(1,2) -> $x {}

[05:32] <p6eval> rakudo ed4cd1: OUTPUT«No exception handler and no message␤current instr.: 'return' pc 15956 (src/builtins/control.pir:39)␤»

[05:33] <masak> bug?

[05:33] <bacek> masak: actually no.

[05:33] <masak> why not?

[05:33] <bacek> rakudo: for any(1,2) -> $x {}; 1

[05:33] <p6eval> rakudo ed4cd1: OUTPUT«No exception handler and no message␤current instr.: 'return' pc 15956 (src/builtins/control.pir:39)␤»

[05:33] * masak smiles

[05:33] <bacek> rakudo: for any(1,2) -> $x { ; }; 

[05:33] <p6eval> rakudo ed4cd1: OUTPUT«No exception handler and no message␤current instr.: 'return' pc 15956 (src/builtins/control.pir:39)␤»

[05:34] <bacek> rakudo: try { for any(1,2) -> $x {}; }

[05:34] <p6eval> rakudo ed4cd1: RESULT«Null PMC access in find_method()␤current instr.: '_block14' pc 77 (EVAL_17:44)␤»

[05:34] * masak submits rakudobug

[05:34] <bacek> rakudo: sub foo { for any(1,2) -> $x {}; }; foo

[05:35] <p6eval> rakudo ed4cd1: RESULT«any(undef, undef)»

[05:35] <masak> there's a return in there somewhere.

[05:35] <bacek> in REPL

[05:35] <bacek> rakudo: sub foo { return }; foo

[05:35] <p6eval> rakudo ed4cd1: RESULT«undef»

[05:36] <masak> what REPL? it behaves the same from the command line.

[05:37] <bacek> masak: command line REPL :)

[05:38] <masak> bacek: :P

[05:38] <bacek> rakudo: my $f = -> { {} }; &f

[05:38] <p6eval> rakudo ed4cd1: RESULT«Null PMC access in find_method()␤current instr.: '_block14' pc 77 (EVAL_18:44)␤»

[05:39] <masak> rakudo: &f

[05:39] <p6eval> rakudo ed4cd1: RESULT«Null PMC access in find_method()␤current instr.: '_block14' pc 77 (EVAL_16:44)␤»

[05:39] * masak submits

[05:41] <masak> oh, moritz_++ already submitted the first of those.

[05:41] * masak should read already submitted bugs before submitting

[05:43] <masak> rakudo: <>

[05:43] <p6eval> rakudo ed4cd1: RESULT«[]»

[05:43] <masak> rakudo: <STDIN>

[05:43] <p6eval> rakudo ed4cd1: RESULT«"STDIN"»

[05:43] <masak> those two were low-hanging fruit. ;)

[05:43] * masak submits them

[06:13] * bacek waves masak with "pull request" :)

[06:14] <masak> :)

[06:14] *** Maghnus left
[06:14] <bacek> I've moved List.min/max into settings and fixed Range.min and Range.max. Last 4 commits in my master bracnh

[06:14] <bacek> branch

[06:15] <masak> cool.

[06:15] <bacek> Ah. List.reduce as well

[06:15] <bacek> afk & kids time

[06:16] *** nihiliad left
[06:41] *** Maghnus joined
[06:42] *** WootKit joined
[06:47] *** cspencer left
[06:48] *** awarefish joined
[06:52] *** awarefish left
[06:56] *** WootKit left
[06:57] * masak sometimes gets bitten by the false friend `grep { !/<regex>/ }, @a`

[06:59] *** Tene joined
[07:05] *** sri_kraih joined
[07:06] *** masak left
[07:07] *** finanalyst joined
[07:10] *** SamB left
[07:11] *** Tene_ left
[07:12] *** nikn left
[07:16] *** NoirSoldats joined
[07:21] *** NoirSoldats left
[07:36] *** NoirSoldats joined
[07:36] *** NoirSoldats left
[07:37] *** Helios left
[07:41] *** Helios joined
[07:45] *** eternaleye joined
[07:48] <bacek> std: my @list; my  @result = @list.map():{ $_ * 2 };

[07:48] <p6eval> std 25744: OUTPUT«ok 00:02 35m␤»

[07:57] *** kate21de joined
[08:35] *** kate21de left
[08:36] *** DemoFreak joined
[08:37] *** kate21de joined
[08:39] *** NoirSoldats joined
[08:43] <pugs_svn> r25745 | finanalyst++ | Added descriptions to standard rules, regrouped rules, added new rule <word> to enable definition of <wb>.

[08:43] <pugs_svn> r25745 | finanalyst++ | Eliminated deprecated <lt><gt><dot><sp>.

[08:43] <pugs_svn> r25745 | finanalyst++ | Changed deprecated <null> to <?> and deprecated <fail> to <!>.

[08:46] <bacek> perl6: my @array = <a b c d>; @array.map: { $_ ~= "c"; $_ ~ "d" }; say ~@array;

[08:46] <p6eval> rakudo ed4cd1: OUTPUT«ac bc cc dc␤»

[08:46] <p6eval> ..pugs: OUTPUT«*** Can't modify constant item: VStr "a"␤    at /tmp/9N3L5nB60J line 1, column 38-47␤»

[08:46] <p6eval> ..elf 25745: OUTPUT«Permission denied at ./elf_h line 315.␤»

[08:47] * bacek dislike mutating map...

[08:47] *** ejs joined
[08:48] *** NoirSoldats left
[08:49] *** Sepheebear left
[08:50] *** NoirSoldats joined
[08:52] *** Sepheebear joined
[08:52] <bacek> perl6: my @array = <a>; @array.map: { $^a ~= "A"; $^b ~= "B" }; say ~@array;

[08:52] <p6eval> pugs: OUTPUT«*** Can't modify constant item: VStr "a"␤    at /tmp/anjhypUtEd line 1, column 32-42␤»

[08:52] <p6eval> ..elf 25745: OUTPUT«Use of uninitialized value in subroutine entry at ./elf_h line 188.␤Can't use string ("") as a subroutine ref while "strict refs" in use at ./elf_h line 188.␤ at ./elf_h line 4377␤»

[08:52] <p6eval> ..rakudo ed4cd1: OUTPUT«Cannot assign to readonly variable.␤current instr.: 'die' pc 16289 (src/builtins/control.pir:204)␤»

[08:53] <bacek> heh. And it actually doesn't work.

[08:56] *** duke_leto joined
[08:56] *** Sepheebear left
[08:58] *** Sartak left
[08:59] *** Sepheebear joined
[09:04] *** barney joined
[09:09] *** Kimtaro_ joined
[09:26] *** Kimtaro left
[09:40] *** NoirSoldats left
[09:41] *** NoirSoldats joined
[09:51] *** ejs left
[09:55] *** araujo joined
[09:59] *** NoirSoldats left
[10:02] *** NoirSoldats joined
[10:08] *** NoirSoldats left
[10:08] *** mikehh joined
[10:19] *** NoirSoldats joined
[10:29] *** duke_leto left
[10:29] *** c1sung joined
[10:38] *** NoirSoldats left
[10:42] *** M_o_C joined
[10:45] *** NoirSoldats joined
[10:49] *** elmex left
[10:49] *** elmex joined
[10:56] *** NoirSoldats left
[11:03] *** elmex left
[11:03] *** elmex joined
[11:09] *** explorer joined
[11:15] *** elmex left
[11:37] <dalek> rakudo: 4947aea | (Moritz Lenz)++ | docs/ChangeLog:

[11:37] <dalek> rakudo: [ChangeLog] mention last/next working in grep()

[11:37] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/4947aeae9a2d79b9d9a760b143104e196db7e588

[11:38] <pugs_svn> r25746 | moritz++ | [t/spec] tests for last and next in grep

[11:58] *** NoirSoldats joined
[12:00] *** pmurias joined
[12:05] *** Ariens_Hyperion joined
[12:07] <mikehh> Hi, when I run the rakudo make spectest it no longer threads.  It takes me 30 minutes now rather than about 15

[12:08] <mikehh> is there any reason it has been disabled

[12:08] <mikehh> and how do I get it back - I remember some config option but I can't find it at the moment

[12:12] *** abra joined
[12:14] *** abra left
[12:14] *** abra joined
[12:19] <bacek> commit 5944501430c79ff16647469d383750c4a301bd16

[12:19] <bacek> Author: pmichaud [email@hidden.address]
[12:19] <bacek> Date:   Tue Feb 24 20:38:51 2009 -0600

[12:19] <bacek>     Updated harness that doesn't rely on Parrot::Test::Harness.

[12:19] <bacek>     This version doesn't honor the --jobs option; patches welcome

[12:19] <bacek>     to re-add that feature.  Also needs testing on Win32.

[12:19] <bacek> mikehh: that's reason why

[12:21] *** pidus left
[12:22] <mikehh> ok - I'll have a look

[12:25] *** [particle] joined
[12:33] *** pidus joined
[12:37] *** [particle]1 left
[12:38] <pugs_svn> r25747 | moritz++ | [t/spec] tests for RT #63710, bare <> and <STDIN> should be disallowed

[12:48] <dalek> rakudo: 137dcfa | (Cory Spencer)++ | src/ (2 files):

[12:48] <dalek> rakudo: Implement .map in Pure Perl 6

[12:48] <dalek> rakudo: Squashed commit of the following:

[12:48] <dalek> rakudo: commit cc76a676174b883e5b9025d36fdd34e9b7e13fe0

[12:48] <dalek> rakudo: Merge: f1d4f77... ed4cd14...

[12:48] <dalek> rakudo: Author: Cory Spencer <cspencer@sprocket-2.local>

[12:48] <dalek> rakudo: Date:   Sat Mar 7 19:03:50 2009 -0800

[12:48] <dalek> rakudo:     Merge branch 'master' of git://github.com/rakudo/rakudo into any-pm

[12:48] <dalek> rakudo:     Conflicts:

[12:48] <dalek> rakudo:     	src/setting/Any-list.pm

[12:48] <dalek> rakudo: commit f1d4f77de8c5a46ecfed86bf9060d2eb5dc9072a

[12:48] <dalek> rakudo: Author: Cory Spencer <cspencer@sprocket-2.local>

[12:48] <dalek> rakudo: Date:   Sat Mar 7 18:09:59 2009 -0800

[12:48] <dalek> rakudo:     Remove the PIR map method and replace with a Perl 6 version.

[12:48] <dalek> rakudo: commit a8824fac6d139c91352ee9f775a5e37eca4d446c

[12:48] <dalek> rakudo: Author: Cory Spencer <cspencer@sprocket-2.local>

[12:48] <dalek> rakudo: Date:   Sat Mar 7 12:55:10 2009 -0800

[12:48] <dalek> rakudo:     Removed PIR of grep and replaced with P6 version.

[12:48] <dalek> rakudo: Signed-off-by: Moritz Lenz [email@hidden.address]
[12:48] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/137dcfa6c3f660eb1fb3da4dd07cd6b2fcf369dd

[12:49] <moritz_> @tell cspencer sorry for being inaccurate earlier... if you did only one commit, you don't need to --squash the commit (that only adds more clutter in that case)

[12:49] <lambdabot> Consider it noted.

[12:54] *** elmex joined
[12:54] *** meppl joined
[13:07] *** barney left
[13:14] <dalek> rakudo: 8b2a4ad | (Cory Spencer)++ | src/ (2 files):

[13:14] <dalek> rakudo: Replaced the PIR Any.pairs method with a Perl 6 version.

[13:14] <dalek> rakudo: Signed-off-by: Moritz Lenz [email@hidden.address]
[13:14] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8b2a4adcf8c05a377ae16a2b1e2953ae7a105b1e

[13:48] *** orafu left
[13:51] *** SamB joined
[13:52] *** Whiteknight joined
[14:03] <dalek> rakudo: a6bd3a0 | (Moritz Lenz)++ | docs/running.pod:

[14:03] <dalek> rakudo: [docs] added a man page as docs/running.pod

[14:03] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a6bd3a0cd5bfc19b6a43b512de78dbe67892ef65

[14:30] *** WootKit joined
[14:35] *** Ariens_Hyperion left
[14:41] *** simcop2387 left
[14:42] *** cspencer joined
[14:44] <cspencer> good morning!

[14:44] <lambdabot> cspencer: You have 1 new message. '/msg lambdabot @messages' to read it.

[14:45] <pugs_svn> r25748 | lwall++ | [STD] shorten parsefail message to get more into irc message

[14:51] *** WootKit left
[14:54] *** simcop2387 joined
[15:04] <pmurias> diakopter: ping

[15:04] <diakopter> pmurias: ppong

[15:04] <pmurias> hi

[15:04] <diakopter> howdy

[15:05] <pmurias> when will you import ironperl into the git repo? ;) i want to see what it would take to integrate it with mildew

[15:09] *** jan_ left
[15:09] <diakopter> well, I need to identify whether Tim's parser (C++) can be used on mono/linux (if it can be translated trivially to C++/CLI), or if it needs to be swapped out for another parsing system first

[15:09] <diakopter> however...

[15:11] <pmurias> what do you use Tim's parser for?

[15:12] <diakopter> that's what I was just thinking.  I suspect the parser is needed only for parsing the tycho language.

[15:13] <diakopter> so, if (and this sounds funny to me) all that needs to occur is to translate/reformat mildew's output to the C# VM api of tycho, then the parser is not needed.

[15:14] <diakopter> I spent 6 hours or so yesterday stepping through various test programs on tycho to familiarize myself with the codebase.

[15:15] <diakopter> a tough decision is whether to fork his codebase or to build upon it.

[15:15] <diakopter> ...(more)

[15:16] <pmurias> so you are building ironperl on top of tycho

[15:18] <pmurias> one problem i can see with it that tycho seems to a very dynamic sort of language, and in Perl 6 it's possible to infer quite a lot of type information which seems to be a potential performance loss

[15:19] <pmurias> diakopter: if you are having problems with git you can always import ironperl into the pugs repo

[15:20] <diakopter> that's the question... (whether or not to fork the codebase)

[15:20] <diakopter> because there's already a lot of VM features that are *close* to Perl 6's requirements, but not exactly matching

[15:21] <diakopter> it's GPLv2, btw

[15:21] <diakopter> (tycho)

[15:23] <diakopter> I haven't had problems with git

[15:23] <diakopter> I've just committed the one test entry

[15:23] <diakopter> just watching rakudo's patch queue build up makes me look askance

[15:24] <diakopter> pmurias: are you on linux?

[15:24] <pmurias> yes

[15:24] <diakopter> which kernel/distro?

[15:25] <pmurias> debian lenny

[15:26] <diakopter> ok.  I'm using ubuntu jaunty.  if you want to prepare, you could build mono 2.5 from svn

[15:26] <pmurias> i have windows vista too but i prefer not to use it unless i'm forced too

[15:27] <diakopter> hrm, probably the first thing to do, then, is see if I can get tycho to run purely from its API without using the parser.

[15:28] *** duke_leto joined
[15:29] *** explorer is now known as Guest84032

[15:30] <pmurias> why doesn't the parser run on linux?

[15:32] <diakopter> well, it is pure C++, but it would have to be built differently from how it's built now (visual studio) to run on mono

[15:33] <diakopter> so, the .net calls to the C++ library would have to be a different calling convention, of sorts.

[15:33] <diakopter> and that just seems like a bit more infrastructure work than necessary for now..

[15:33] <diakopter> it's a naive recdescent parser..

[15:35] <diakopter> let me see if it will run on mono in pure C#...

[15:35] <diakopter> I'm thinking that forking is going to be the way to go...

[15:36] <diakopter> regarding what you said about dynamic vs. type inference

[15:36] <diakopter> yes I'm sure there will be large performance overheard.

[15:37] <diakopter> well, until tycho's "native types" can be ported/renamed to Perl 6's primitives

[15:37] <diakopter> then it can just use those.  esp the immutable ones.

[15:38] *** netsquire joined
[15:38] <diakopter> but actually, there are plenty of other options

[15:38] <pmurias> what does using tycho give us?

[15:38] *** Guest84032 left
[15:39] <diakopter> scopes, captures, multiple and hierarchical namespaces, object references/proxies, an optional type system

[15:39] <diakopter> s/captures/closures/

[15:40] <diakopter> and two numeric systems (and the standard operators) for integers and Reals

[15:40] <diakopter> along with arrays, sets, bags

[15:40] <diakopter> and lazy lists

[15:41] <diakopter> well, and lazy anything

[15:41] <diakopter> so, a decent chunk of what parrot provides.

[15:42] <diakopter> however, perhaps the biggest thing.... it has a module system

[15:42] <diakopter> and importing of existing .dlls (including everything accesible to mono, which is gigantic)

[15:44] <diakopter> so really, creating "native" tycho types that are wrappers around things from, say, the http://www.goletas.com/solutions/collections/ library.... would be excellent.

[15:46] <diakopter> since tycho's type system piggybacks on top of .Net's type system, it has generics (with covariance/contravariance, using an open-source C# extension lib)

[15:48] <pmurias> train&

[15:48] *** pmurias left
[15:50] <diakopter> tycho's AnyObject type is analogous to the DLR's DynamicObject type, which is essentially equivalent to C#'s 'dynamic' type (marker), which just means make all method dispatching runtime instead of compiletime.  it's still a static type, per instance.

[15:50] <diakopter> C#4, I mean

[15:53] <pmichaud> good morning, all

[15:53] <diakopter> 'morn

[15:55] <s1n> morning

[15:55] *** nihiliad joined
[16:04] *** jan_ joined
[16:07] <diakopter> it also has a macro system, but it's dependent on the parser (of course)

[16:08] *** [particle] left
[16:10] *** [particle] joined
[16:15] *** duke_leto left
[16:28] *** [particle]1 joined
[16:28] <diakopter> wow, that's a testament to good software design.

[16:29] <diakopter> all the runtime unit tests work just fine after commenting out any blocks/classes/methods that are dependent on the parser...

[16:30] <dalek> rakudo: a7214ac | (Moritz Lenz)++ | src/ (2 files):

[16:30] <dalek> rakudo: re-implement List.min in Perl 6; Patch courtesy by bacek++

[16:30] <dalek> rakudo: Closes RT #63712

[16:30] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a7214ac28c5c7c47932f1e76a15c8707524f964d

[16:36] <literal> is it preferred to have builtins implemented in Perl 6? isn't PIR faster?

[16:37] <diakopter> cuter in Perl?

[16:37] <moritz_> Perl 6 offers several advantages

[16:37] <moritz_> cuter

[16:37] <cspencer> literal: i believe the perl 6 builtins get compiled down to PIR

[16:37] <moritz_> you can do parametric roles

[16:38] <moritz_> you can get interfaces correct that you can't in PIR

[16:38] <literal> cspencer: and it all gets compiled down to machine code at some point...

[16:38] <moritz_> but yes, plain PIR is faster

[16:40] <moritz_> and for example next() and last() work automatically in grep and map as they should

[16:45] *** Ariens_Hyperion joined
[16:47] *** sri_kraih_ joined
[16:47] *** [particle] left
[16:51] *** Tene_ joined
[17:01] *** Whiteknight left
[17:02] *** Tene left
[17:02] *** abra left
[17:03] *** jhorwitz joined
[17:07] *** sri_kraih left
[17:08] *** Kimtaro joined
[17:11] *** lisppaste3 left
[17:13] *** Kimtaro_ left
[17:22] *** shyfx joined
[17:23] *** shyfx left
[17:27] <pmichaud> re: 137dcf  -- I'd prefer to not see type constraints on invocants.

[17:28] <pmichaud> Also, we should not constrain the invocant to be an array.

[17:30] <pmichaud> any thoughts as to the best way to send comments on these commits?

[17:30] *** nekobaka left
[17:31] <pmichaud> 0

[17:32] <pmichaud> + for @list -> $x {

[17:32] <pmichaud> 0

[17:32] <pmichaud> + if (&$by($res, $x) > 0) {

[17:32] <pmichaud> 0

[17:32] <pmichaud> + $res = $x;

[17:32] <pmichaud> 0

[17:32] <pmichaud> + }

[17:32] <pmichaud> 0

[17:32] <pmichaud> ooops, sorry.

[17:32] <pmichaud> cut-n-paste from github doesn't work.

[17:33] <pmichaud> bacek, moritz:  ping

[17:34] <moritz_> pmichaud: pong

[17:34] <moritz_> pmichaud: send them p6c?

[17:35] <pmichaud> it's kinda hard to get the relevant diff into the message, it appears.

[17:35] <moritz_> git-show 137dcf

[17:35] <moritz_> then copy+paste

[17:35] <pmichaud> okay, that could help.

[17:35] <moritz_> I can remove the type constraints

[17:35] <moritz_> (although it'll have to way ~2 hours)

[17:36] <pmichaud> yes, in general I think type constraints on invocants should be a no-no.  _Especially_ in Any.

[17:36] <moritz_> ok

[17:37] <pmichaud> also, the multi sub for min() is incorrect.  In places where we know the code to be incorrect, we should comment it as such.

[17:40] <moritz_> ok, min() does require an ordering

[17:40] <moritz_> I'll also fix that

[17:40] <moritz_> shame on me for not checking that earlier

[17:40] <pmichaud> it's a multi method.  There's a sub that has an ordering, and one that doesn't (iirc, unless it's changed)

[17:40] <moritz_> For a C<min> function that does not require an ordering, see the

[17:40] <moritz_> C<[min]> reduction operator.

[17:41] <pmichaud> Yes.  I think (especially in converting PIR methods to Perl 6) we need to make sure that we re-verify them against the spec before we commit them.

[17:43] <pmichaud> Why does map() have to have two methods?  Can't it be done with just one?

[17:43] <pmichaud> ick!  We're using postcircumfix:<[ ]>  in map!?!?

[17:43] <pmichaud> bad bad bad

[17:44] <moritz_> how should it be done?

[17:44] <moritz_> with an iterator?

[17:44] <pmichaud> Yes, of some sort.

[17:44] <pmichaud> map is supposed to be lazy, iirc

[17:44] <pmichaud> @values.end causes that to not be the case.

[17:44] <lambdabot> Unknown command, try @list

[17:44] <moritz_> right

[17:45] *** Ariens_Hyperion left
[17:45] <pmichaud> for any type of "iterator" operation, I think using indices is likely the wrong way to do it.

[17:45] <moritz_> is a Perl 6-level for() OK?

[17:45] <pmichaud> should be okay for Rakudo.

[17:46] <moritz_> then I'll re-write it like that

[17:47] <pmichaud> oh, I see why the subscripting is being done -- it's to get the correct arity in the map.

[17:47] <pmichaud> hmmm.

[17:47] <moritz_> that can be done differently

[17:47] <pmichaud> anyway, I definitely don't want the two separate map() methods.

[17:47] <pmichaud> should be just one.

[17:48] <moritz_> for self.list -> $x { @a.push($x); take expr(|@a) if @a == arity }

[17:48] <pmichaud> oh, that's nicer, yes.

[17:48] <moritz_> ok

[17:49] <moritz_> I'll fix that tonight

[17:50] <pmichaud> should I send comments like these to the list?  Or should we just fix them and move on?

[17:50] <moritz_> send them to the list so that others can learn from it

[17:53] *** Ariens_Hyperion joined
[17:53] <pmichaud> should I do it as a reply to the ticket, or just a new thread?

[18:01] <pmichaud> I'm replying to (and reopening) the tickets.

[18:14] <moritz_> perl6: my $x = { 2 * $_ }; say $x.arity

[18:14] <p6eval> elf 25748: OUTPUT«Use of uninitialized value $_ in multiplication (*) at (eval 123) line 3.␤Can't call method "arity" without a package or object reference at (eval 123) line 4.␤ at ./elf_h line 4377␤»

[18:14] <p6eval> ..pugs: OUTPUT«1␤»

[18:14] <p6eval> ..rakudo a7214a: OUTPUT«0␤»

[18:14] <moritz_> isn't that wrong?

[18:14] <cspencer> pmichaud: sorry for the bad map implementation, that was me!

[18:15] <cspencer> i couldn't quite figure out a single map method implementation that worked for all types

[18:15] <cspencer> that's probably on account of my own inexperience though :)

[18:15] <moritz_> a 'for $values.list { ... }' should work

[18:16] <cspencer> ok, that's what i'd done in grep, i'll redo it like that too

[18:16] <cspencer> (unless you'd already started on it)

[18:16] <pmichaud> I won't have time to do many of these fixes today.

[18:16] <moritz_> pmichaud: I guess cspencer and I will figure it out

[18:17] <pmichaud> Indeed, it looks like most of my time is going to be spent reviewing other people's commits and not writing code :-|   I guess that's the role of the pumpking, though.  :-)

[18:17] <cspencer> i've got the next couple of hours, i'll resubmit them later for review

[18:17] <pmichaud> I'm fine with being the reviewer and not the fixer.  :-)

[18:17] <cspencer> and i'm happy to fix my mistakes! :)

[18:17] <moritz_> ;-)

[18:17] <pmichaud> I agree with masak, I'd prefer to tell others what I'd like to see different than to change them myself.

[18:18] <pmichaud> that gives more people more experience

[18:18] <pmichaud> s/masak/moritz

[18:18] <cspencer> that works for me

[18:18] <pmichaud> I do think the "Any" methods are the likeliest candidates for moving to setting at this point.

[18:18] <cspencer> if i've got questions re: implementation, should i send them to the list?

[18:18] <pmichaud> I looked at most of the other classes and it appeared to me that they needed to stay in PIR a bit longer.

[18:18] <pmichaud> maybe I can just publish a list of candidate PIR methods to be migrated, and let others do the migration.

[18:19] <pmichaud> cspencer: yes, I'd send questions to the list.

[18:19] <pmichaud> questions are good.

[18:20] <cspencer> alright, i'm off to the ferry, i'll send in fixed up Any methods later on tonight or tomorrow

[18:20] <pmichaud> someone else might beat you to them :-)

[18:20] <pmichaud> but that'd be great.

[18:20] <pmichaud> I'm off as well, have a soccer game shortly.  bbl.

[18:20] *** Maghnus_ joined
[18:21] *** Ariens_Hyperion left
[18:26] <moritz_> I think I have a fix for map

[18:26] <moritz_> will spectest now, and commit later

[18:33] *** Psyche^ joined
[18:37] *** Maghnus left
[18:37] *** Maghnus_ is now known as Maghnus

[18:37] *** cspencer left
[18:44] <pugs_svn> r25749 | moritz++ | [t/spec] bring minmax.t more in line with current S32

[18:45] *** justatheory joined
[18:46] <dalek> rakudo: 167e251 | (Moritz Lenz)++ | src/setting/Any-list.pm:

[18:46] <dalek> rakudo: make .map more Perlish, and fix complaints by pmichaud++

[18:46] <dalek> rakudo: In particular:

[18:46] <dalek> rakudo:  * removed some type constraints on invocants

[18:46] <dalek> rakudo:  * .map should work when lists become lazy, ie not querying @list.end

[18:46] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/167e251639c9b37ffd9201c33e06839732bcbf54

[18:50] *** Patterner left
[18:50] *** Psyche^ is now known as Patterner

[18:52] <pugs_svn> r25750 | moritz++ | [S32/Containers] remove nonsensical return value from min/max

[18:54] *** Ariens_Hyperion joined
[19:00] <pugs_svn> r25751 | moritz++ | [S32/Containers] forgot to bump version number; fixed date from the future

[19:00] *** jhorwitz left
[19:08] <dalek> rakudo: 0f1c600 | (Moritz Lenz)++ | src/setting/Any-list.pm:

[19:08] <dalek> rakudo: Remove type constraints that either don't make sense or aren't checked anyway

[19:08] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/0f1c600d7f086996a11cea203bca474de36610ba

[19:14] *** cxreg left
[19:14] *** yves left
[19:14] *** scrottie left
[19:14] *** gbacon left
[19:14] *** szbalint left
[19:14] *** gravity left
[19:14] *** allbery_b left
[19:14] *** ilbot2 left
[19:14] *** f00li5h left
[19:14] *** mj41 left
[19:15] *** mj41 joined
[19:15] *** gravity joined
[19:15] *** allbery_b joined
[19:15] *** szbalint joined
[19:15] *** f00li5h joined
[19:15] *** cxreg joined
[19:15] *** yves joined
[19:15] *** ilbot2 joined
[19:15] *** scrottie joined
[19:15] *** gbacon joined
[19:33] <pugs_svn> r25752 | moritz++ | [t/spec] test next() and last() in map

[19:37] *** ujwalic joined
[19:38] <ujwalic> is this for Rakudo

[19:40] *** ujwalic left
[19:40] *** ujwalic joined
[19:40] <ujwalic> is this for Rakudo

[19:40] *** ffbb left
[19:41] <moritz_> what is for Rakudo?

[19:42] <ujwalic> moritz_: http://github.com/rakudo/rakudo/tree/master

[19:42] <moritz_> yes

[19:43] <ujwalic> I am building it for win32  it needs parrot/parrot_config

[19:43] <moritz_> did you do a 'perl Configure.pl --gen-parrot'?

[19:43] <ujwalic> yes

[19:44] <moritz_> did it succeed?

[19:44] <ujwalic> failed in between

[19:44] <moritz_> so what was the failure?

[19:45] <ujwalic> lost internet connection, power failure

[19:45] <moritz_> then try a 'make parrot'

[19:45] <moritz_> and then 'make'

[19:45] <moritz_> or re-try the Configure step

[19:45] <ujwalic> let me re-try

[19:47] <dalek> rakudo: 051ad51 | (Moritz Lenz)++ | src/setting/Any-list.pm:

[19:47] <dalek> rakudo: remove implicit type constraint in .pairs

[19:47] <dalek> rakudo: Also refactored to make a bit faster when no indices are given, pmichaud++

[19:47] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/051ad5115268e5415bebb1988cbf0b1be626156b

[19:48] <ujwalic> where to put OpenGL (GLUT) src in parrot to recognise it

[19:48] *** justatheory left
[19:49] <japhb> ujwalic: Parrot is expecting GL and GLUT headers to be installed into system paths (or /usr/local on unix systems)

[19:49] *** finanalyst left
[19:49] *** Ariens_Hyperion left
[19:49] <ujwalic> me on win32 PATH or INCLUDE env varable

[19:50] <japhb> rurban on MAGnet:#parrot keeps altering that

[19:50] <japhb> but yes, I think it should work if you have it in INCLUDE

[19:51] <japhb> let me update and check the login

[19:51] <japhb> er

[19:51] <japhb> logic

[19:52] <ujwalic> let me try them

[19:55] <japhb> ujwalic: looking at the code in config/gen/opengl.pm, it looks like $ENV{INCLUDE} needs to include one or more directories that contain a subdirectory named 'gl', in which should be all the .h files.

[19:55] <japhb> That's for MSVC.  For cygwin, it looks in /usr/include/w32api/GL/*.h

[19:57] <ujwalic> japhb: me using MSVC, my INCLUDE contains both GL/gl.h and GL/glut.h

[19:57] <japhb> You can run the gen::opengl config step verbose, and it should tell you what headers it finds.

[19:57] <japhb> What exactly is your full INCLUDE?

[19:58] <ujwalic> INCLUDE=C:\wrk\mesa\Mesa-7.3\include;C:\wrk\glut-3.7.6\include

[19:59] <japhb> OK, and both of those contain GL subdirectories, I assume ... if so, it should find them.

[19:59] <japhb> I'd say, run that config step verbose, and nopaste the output

[19:59] *** Ariens_Hyperion joined
[20:00] <ujwalic> ok

[20:00] <japhb> And you probably want to do this in #parrot, since Rakudo doesn't enter the equation until Parrot is happy.  ;-)

[20:00] <ujwalic> sure :)

[20:01] <japhb> ujwalic: just remember, it's on irc.perl.org

[20:01] <bacek> good morning

[20:02] <bacek> perl6: my @array = <a b c d>; @array.map: { $_ ~= "c"; $_ ~ "d" }; say ~@array;

[20:03] <p6eval> elf 25752: OUTPUT«Use of uninitialized value in subroutine entry at ./elf_h line 188.␤Can't use string ("") as a subroutine ref while "strict refs" in use at ./elf_h line 188.␤ at ./elf_h line 4377␤»

[20:03] <p6eval> ..pugs: OUTPUT«*** Can't modify constant item: VStr "a"␤    at /tmp/gGJq06qmSE line 1, column 38-47␤»

[20:03] <p6eval> ..rakudo 051ad5: OUTPUT«ac bc cc dc␤»

[20:09] <bacek> perl6: my @array = <a b c>; my %hash = @array.map: { $^a => $^b }; say %hash.perl;

[20:09] <p6eval> rakudo 051ad5: OUTPUT«{"a" => "b"}␤»

[20:09] <p6eval> ..elf 25752: OUTPUT«Use of uninitialized value in subroutine entry at ./elf_h line 188.␤Can't use string ("") as a subroutine ref while "strict refs" in use at ./elf_h line 188.␤ at ./elf_h line 4377␤»

[20:09] <p6eval> ..pugs: OUTPUT«*** Missing required parameters: $a $b␤    at /tmp/VHLHrtAvFS line 1, column 33-59␤»

[20:11] <bacek> moritz_: you've got a bug in Any.map.

[20:11] <moritz_> bacek: that's bad :(

[20:12] <moritz_> bacek: would you care to elaborate?

[20:13] <bacek> After "for" you should check if (@args) { @args.splice(undef x ($arity-@args)); take (&$expression(|@args) }

[20:13] <moritz_> is that actually specced?

[20:13] <moritz_> and I don't know if the signature will accept undef

[20:13] <bacek> moritz_: no idea. But is was before in PIR version.

[20:14] <moritz_> that doesn't mean it's actually better

[20:14] <bacek> if signature will not accept undef it's not "map" problem :)

[20:15] <bacek> rakudo: sub foo (Int $x, Int $y) { $x+$y }; map &foo, undef x 3;

[20:15] <p6eval> rakudo 051ad5: OUTPUT«Use of uninitialized value␤»

[20:15] <bacek> rakudo: sub foo (Int $x, Int $y) { 1 }; say [~] map &foo, undef x 3;

[20:15] <p6eval> rakudo 051ad5: OUTPUT«Use of uninitialized value␤␤»

[20:16] <moritz_> anyway, we need spec clarification and tests.

[20:16] <bacek> rakudo: sub foo (Int $x, Int $y) { say "hi"; 1 }; say [~] map &foo, undef x 4;

[20:16] <p6eval> rakudo 051ad5: OUTPUT«Use of uninitialized value␤␤»

[20:16] <bacek> moritz_: indeed. 

[20:16] <bacek> What happened in my last example?

[20:17] <moritz_> you need xx for list replication

[20:18] <bacek> rakudo: sub foo (Int $x, Int $y) { say "hi"; 1 }; say [~] map &foo, undef xx 4;

[20:18] <p6eval> rakudo 051ad5: OUTPUT«Parameter type check failed for $x in call to foo␤current instr.: 'die' pc 16009 (src/builtins/control.pir:204)␤»

[20:18] <bacek> ah.

[20:18] <moritz_> rakudo: sub foo (Int $x, Int $y) { say "hi"; 1 }; say [~] map &foo, Int xx 4

[20:18] <p6eval> rakudo 051ad5: OUTPUT«hi␤hi␤11␤»

[20:18] <dalek> rakudo: 2daf6b7 | (Moritz Lenz)++ | docs/guide_to_setting.pod:

[20:18] <dalek> rakudo: added "guide to setting" document

[20:18] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/2daf6b76c2308ec3221283c8868ea545ab91ca33

[20:20] <bacek> moritz_: btw, whats wrong with my List.max?

[20:21] <moritz_> bacek: I haven't looked at it yet

[20:21] <bacek> moritz_: ah. ok.

[20:21] <moritz_> the three patches I applied caused more works afterwards than I'd expected

[20:23] <bacek> hey! pmichaud didn't complain about List.min! :)

[20:24] *** jedai left
[20:24] <moritz_> well, he did

[20:24] <moritz_> though it was the spec that was a bit inaccurate

[20:24] *** lisppaste3 joined
[20:25] <moritz_> btw your .reduce patch also uses x instead of xx

[20:26] <bacek> moritz_: yes. I've fixed it already in my local repo.

[20:26] <bacek> But we need consistent behaviour in map and reduce.

[20:29] <moritz_> aye

[20:29] <moritz_> as I said, we need spec clarification and tests.

[20:32] <moritz_> rakudo: say (1..6).map({$^a + $^b + $^c}).perl

[20:32] <p6eval> rakudo 2daf6b: OUTPUT«[6, 15]␤»

[20:33] <moritz_> perl6: say (1..6).map({$^a + $^b + $^c}).perl

[20:33] <p6eval> rakudo 2daf6b: OUTPUT«[6, 15]␤»

[20:33] <p6eval> ..pugs: OUTPUT«(6, 15)␤»

[20:33] <p6eval> ..elf 25752: OUTPUT«Global symbol "$c" requires explicit package name at (eval 125) line 3.␤ at ./elf_h line 4377␤»

[20:34] <bacek> perl6: say (1,2).reduce: { $^a + $^b + $^c }

[20:34] <p6eval> rakudo 2daf6b: OUTPUT«Use of uninitialized value␤3␤»

[20:34] <p6eval> ..pugs: OUTPUT«3␤»

[20:34] <p6eval> ..elf 25752: OUTPUT«Can't call method "reduce" without a package or object reference at (eval 123) line 3.␤ at ./elf_h line 4377␤»

[20:35] <bacek> perl6: say (1,2).reduce: { $^a + $^b * $^c }

[20:35] <p6eval> pugs: OUTPUT«1␤»

[20:35] <p6eval> ..elf 25752: OUTPUT«Can't call method "reduce" without a package or object reference at (eval 123) line 3.␤ at ./elf_h line 4377␤»

[20:35] <p6eval> ..rakudo 2daf6b: OUTPUT«Use of uninitialized value␤1␤»

[20:36] <bacek> perl6: say (1..4).reduce: { $^a + $^b * $^c }

[20:36] <p6eval> elf 25752: OUTPUT«Can't call method "reduce" without a package or object reference at (eval 124) line 3.␤ at ./elf_h line 4377␤»

[20:36] <p6eval> ..pugs: OUTPUT«7␤»

[20:36] <p6eval> ..rakudo 2daf6b: OUTPUT«Use of uninitialized value␤7␤»

[20:36] <bacek> ok, pugs and rakudo agreed about reduce :)

[20:37] <moritz_> but where does the undef warning come from?

[20:39] <bacek> moritz_: second round of reduce.

[20:39] <bacek> * $^c

[20:40] <moritz_> ah

[20:40] <moritz_> I somehow misread that

[20:40] *** c9s__ left
[20:40] <moritz_> @tell pmichaud I hope I addressed all your concerns with the built-ins in Perl 6. If so, please close the tickets

[20:40] <lambdabot> Consider it noted.

[20:41] *** c9s__ joined
[20:44] *** Whiteknight joined
[20:49] *** masak joined
[20:49] <masak> good evening.

[20:50] <moritz_> good localtime()

[20:51] <masak> you can tell where my focus is at tonight by the two errors I've found. :)

[20:51] <pugs_svn> r25753 | masak++ | [CORE.pad] fixed value of pi

[20:51] <masak> here comes the first one.

[20:52] <masak> the second one is that viv doesn't output valid YAML.

[20:52] <moritz_> atan2(1,1)*4.14159265 wtf?

[20:52] * moritz_ didn't know that viv emitted yaml at all

[20:53] <masak> moritz_: I think it's a typo originating from 3.14159265 being changed to the formula, and the decimals remaining.

[20:53] <masak> moritz_: viv emits an AST.

[20:53] <masak> the AST is in YAML.

[20:53] <moritz_> ah, that makes sense

[20:53] <masak> or, is supposed to be.

[20:54] <masak> the test for that it fails is to try to Load() the YAML output from viv when the input is 'say 2 + 2'

[20:54] <moritz_> which yaml module did you try?

[20:54] <masak> YAML from CPAN.

[20:55] <moritz_> try YAML::XS

[20:55] <moritz_> that's the one that emits it

[20:55] <masak> (but that shouldn't matter. I believe most of them recognize correct YAML.)

[20:55] <masak> I'll try YAML::XS too.

[20:55] <moritz_> the various YAML modules have slightly different ideas of what YAML actually is

[20:55] <moritz_> ingy++ currently ports python's yaml module to perl right now, which should be much better

[20:56] <masak> ah.

[20:56] * masak looks forward to meeting ingy on NPW

[20:56] <masak> I want to ask him what happened to Kwid.

[20:57] <masak> YAML::XS approves of the output. moritz_++

[20:58] <masak> now I just need to understand why the difference occurs. either they embody two different versions of YAML, or one of the modules is misimplemented.

[20:58] <moritz_> most likely both are

[21:00] <masak> I didn't say 'exactly one' :)

[21:00] *** donaldh joined
[21:00] <masak> need to sleep now.

[21:00] <masak> g'night.

[21:00] *** masak left
[21:01] <moritz_> good night

[21:05] *** Ariens_Hyperion left
[21:08] <ujwalic> moritz_:on win32 is is unable to find parrot/parrot_config

[21:08] <moritz_> ujwalic: did parrot compile fine?

[21:09] <ujwalic> nop

[21:09] *** Kimtaro_ joined
[21:09] <moritz_> you need to fix that first.

[21:09] <ujwalic> ya trying 

[21:10] <moritz_> I think you can configure parrot to not use any opengl bindings at all

[21:10] <moritz_> if that's what causes the trouble

[21:10] <ujwalic> now the error is with link

[21:11] <ujwalic> it is using link not link.exe 

[21:11] <moritz_> please try in #parrot

[21:11] <diakopter> ujwalic: I'll talk with you about it in #parrot

[21:11] <diakopter> sry, lag

[21:11] <ujwalic> moritz_:thank you

[21:27] *** Kimtaro left
[21:28] <bacek> rakudo: multi sub foo(Code &x, *@values) {...}; multi sub foo(*@values) {...}; say foo(sub {}, 1,2,3);

[21:28] <p6eval> rakudo 2daf6b: OUTPUT«Ambiguous dispatch to multi 'foo'. Ambiguous candidates had signatures:␤:(Code x, Any @values)␤:(Any @values)␤␤current instr.: '_block14' pc 101 (EVAL_18:52)␤»

[21:30] <bacek> @msg pmichaud  "multi sub foo(Code &x, *@values) {...}; multi sub foo(*@values) {...}; say foo(sub {}, 1,2,3)" reason why min() implementation cheating.

[21:31] <lambdabot> Not enough privileges

[21:31] <bacek> @say pmichaud  "multi sub foo(Code &x, *@values) {...}; multi sub foo(*@values) {...}; say foo(sub {}, 1,2,3)" reason why min() implementation cheating.

[21:31] <lambdabot> Maybe you meant: faq map slap src

[21:31] <moritz_> it's @tell here

[21:31] <moritz_> bacek: but... no need

[21:31] <bacek> ETOOMANYBOTIMPLEMENTATIONS

[21:31] <moritz_> bacek: the spec says that the sub version needs a comparison sub

[21:31] <moritz_> if one doesn't want that, [min] is fine

[21:32] <bacek> so, min(@array) shouldn't work?

[21:32] <moritz_> no.

[21:33] <bacek> Which "no"? :)

[21:33] <moritz_> no, it shouldn't work.

[21:33] <moritz_> read S32/Containers

[21:33] <bacek> It's open in my vim.

[21:34] <bacek> And S29-list/minmax.t as well...

[21:34] <moritz_> that's not enough, you need to read it ;-)

[21:34] <bacek> is min(@array), -3, "basic subroutine form of min works";

[21:34] <moritz_> svn up please

[21:35] <bacek> It's called svn rebase here :)

[21:35] <moritz_> whatever

[21:37] *** netsquire left
[21:37] <bacek> svn is terribly slow...

[21:38] <bacek> afk & $work->accept(self)

[21:46] *** Ariens_Hyperion joined
[21:48] *** rkendall joined
[21:56] <moritz_> rakudo: my $s = 6; sub n ($d) { return $s if $d == 1 }; say n(1).perl

[21:56] <p6eval> rakudo 2daf6b: OUTPUT«6␤»

[21:56] <diakopter> rakudo: my $s = '"6"'; sub n ($d) { return $s if $d == 1 }; say n(1).perl

[21:56] <p6eval> rakudo 2daf6b: OUTPUT«"\"6\""␤»

[21:57] <diakopter> rakudo: my $s = '6'; sub n ($d) { return $s if $d == 1 }; say n(1).perl

[21:57] <p6eval> rakudo 2daf6b: OUTPUT«"6"␤»

[21:57] <diakopter> nice

[21:57] * moritz_ tries to reduce a really nasty rakudo bug to a smaller example

[21:59] <moritz_> rakudo: my $a = 3, my $x = 5; say $x.perl;

[21:59] <p6eval> rakudo 2daf6b: OUTPUT«Unable to set lvalue on PAST::Val node␤current instr.: 'parrot;PAST;Val;lvalue' pc 566 (src/PAST/Node.pir:161)␤»

[21:59] * moritz_ stupid

[22:01] *** kjwcode joined
[22:02] *** donaldh left
[22:04] <kjwcode> Where does one find information on PerlA 6, as described in docs/guide_to_setting.pod in the Rakudo distribution?

[22:08] *** Ariens_Hyperion left
[22:09] <moritz_> did you mean Perl 6?

[22:10] <moritz_> the space between "Perl" and "6" is a non-breaking space, if your editor shows that PerlA 6, it means that its UTF-8 support is borken

[22:10] <diakopter> probably pasted from guide_to_setting.pod ...?

[22:10] <moritz_> oh, it seems perldoc assumes latin1 as default

[22:10] <kjwcode> moritz_:  I was reading it in perldoc -- that may explain it.  I was confused when I saw "PerlA".

[22:11] <kjwcode> Thank you for clearing that up.  :)

[22:11] <moritz_> kjwcode: I'll add an =encoding directive, maybe that helps

[22:11] <kjwcode> moritz_: Sounds great.  Thank you!

[22:11] <moritz_> kjwcode: changes pushed - could you please pull and try again?

[22:12] <kjwcode> moritz_: That's got it -- now showing as Perl 6.

[22:12] <moritz_> great

[22:13] <moritz_> anyway, that documents needs more contents I guess

[22:13] <dalek> rakudo: ab00c66 | (Moritz Lenz)++ | docs/guide_to_setting.pod:

[22:13] <dalek> rakudo: [docs] add an =encoding directive for kjwcode++

[22:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/ab00c669cfcd15b920013469b9ac71d79b97250d

[22:14] <kjwcode> Yup -- I think it gives me enough of a hint to play around a bit, when combined with the checkin message for perl6.pir.  That's where I register things defined in src/settings, right?

[22:20] <moritz_> kjwcode: no. New files need to be added to build/Makefile.in

[22:21] <kjwcode> moritz_: That makes sense.  I'm reading through the tidings for March 2009, which give some detail as to what the settings are and how to work with them.  Shall I submit a patch that adds that link to guide_to_setting.pod?

[22:22] <moritz_> kjwcode: I can just add it, since I'm editing it right now anyway

[22:23] <kjwcode> moritz_: Sounds good.  Do the docs at http://svn.pugscode.org/pugs/docs/Perl6/Spec/S32-setting-library/ still mostly apply, or is that too Pugs-specifc?

[22:23] <moritz_> kjwcode: they mostly apply, but they are not fully up-to-date

[22:24] <kjwcode> Is there a better set of docs at the moment?

[22:24] <moritz_> no

[22:25] <moritz_> we need to fix them

[22:25] <kjwcode> Okay, cool -- that's likely enough to get me started.  Is there a canonical "to-do" list?

[22:25] <moritz_> no

[22:27] <moritz_> we respect the freedom of others so much that we don't tell them what to do, even when they ask for it :-)

[22:27] <dalek> rakudo: 8bbc31c | (Moritz Lenz)++ | docs/guide_to_setting.pod:

[22:27] <dalek> rakudo: add links to guide_to_setting.pod.

[22:27] <dalek> rakudo: Also mention Makefile changes needed when adding a new file. kjwcode++ for

[22:27] <dalek> rakudo: asking.

[22:27] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8bbc31c6073002c97dc1dc7a64d5a1ba3c73840d

[22:28] <kjwcode> Works for me.  :)  I should play with it and try to make it work before I try to dig in too much, anyway.

[22:37] <ujwalic> :)

[22:41] *** kjwcode left
[23:05] *** |jedai| joined
[23:08] *** Porsbo left
[23:08] *** Porsbo joined
[23:12] <ujwalic> how to install rakudo in diff dir

[23:13] <moritz_> 1) write the installer 2) install it 3) ... 4) profit!

[23:13] <ujwalic> got it :)

[23:13] <moritz_> 3) should be "submit patch" ;-)

[23:14] *** PacoLinux left
[23:18] *** aindilis joined
[23:21] <pmichaud> hello, all

[23:21] <lambdabot> pmichaud: You have 1 new message. '/msg lambdabot @messages' to read it.

[23:21] *** M_o_C left
[23:21] <moritz_> hi pmichaud 

[23:23] *** bacek_ joined
[23:24] <pmichaud> moritz++  # starting settings guide

[23:24] <pmichaud> I'm hoping I'll have time (+energy) to flesh a lot of this stuff out later tonight.

[23:24] <pmichaud> but I'm very glad you're starting them for us.

[23:28] *** kate21de1 joined
[23:30] *** justatheory joined
[23:34] *** kate21de left
[23:40] <pmichaud> afk # dinner

[23:44] *** rkendall left
[23:48] <mikehh> built parrot r37210 and rakudo usihg it passes make spectest - took over half-an-hour

[23:49] <moritz_> yes, it's slow since parallel testing doesn't work anymore :(

[23:49] <mikehh> I was looking at that - have a couple of ideas I am thinking about

[23:50] *** sparc_ left
[23:50] <mikehh> how do I figure out the rakudo revision?

[23:51] <moritz_> git-show HEAD|grep ^commit

[23:52] <mikehh> commit 8bbc31c6073002c97dc1dc7a64d5a1ba3c73840d ?

[23:53] <moritz_> aye

[23:53] <mikehh> hmmmmnnn :-}

[23:54] <moritz_> the "joy" of a distributed version control system: not having a short commit identifier

[23:54] <moritz_> though usually the first six to eight digits are enough

[23:55] <mikehh> well it seems to include the revision you posted about an hour or so ago

[23:56] <moritz_> rakudo: print 1

[23:56] <p6eval> rakudo 8bbc31: OUTPUT«1»

[23:56] <moritz_> so p6eval uses the first 6

[23:57] <mikehh> it seens to work fine with parrot and rakudo in deparate directories in my home directory

[23:57] <mikehh> separate

[23:57] *** wayland76 left
[23:58] <moritz_> nice

[23:58] *** wayland76 joined
[23:58] <mikehh> I did a perl Configure.pl --parrot-config=../parrot/myconfig

[23:59] <moritz_> anyway, bed time here - have the appropriate amount of fun ;-)

[23:59] <wayland76> g'night :)

[23:59] <wayland76> ...and good morning to everyone else :)

[23:59] <mikehh> same for me I think - I will test on AMD64 in the morning

