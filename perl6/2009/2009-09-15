[00:00] *** patspam1 joined
[00:00] *** patspam1 left
[00:00] *** alester left
[00:08] *** Confield joined
[00:12] <colomon> Is it possible to export variables from a .pm file?

[00:16] *** frew_ joined
[00:17] *** Limbic_Region joined
[00:24] *** rhr_ joined
[00:25] *** sevvie left
[00:35] *** kcwu joined
[00:36] *** ab5tract left
[00:37] *** rhr left
[00:38] <colomon> Ack, where are perl 6 heredocs when I need them?

[00:41] *** synth left
[00:47] *** __ash__ joined
[00:48] *** etoxam left
[00:49] *** __ash___ joined
[00:58] *** maja_ joined
[00:59] <colomon> How do you do a multiline quote with interpolation?

[01:01] <avuserow> colomon: double quotes worked for me as of the last Rakudo release

[01:02] *** rhr joined
[01:02] <colomon> Really?  Errr... but that would require escaping all the double quotes in the quote, which would be pretty awkward in this case.

[01:03] *** sm` left
[01:03] *** sm` joined
[01:04] *** frew_ left
[01:05] <colomon> Oh, qq// is it.

[01:06] *** __ash__ left
[01:06] *** __ash___ is now known as __ash__

[01:06] <colomon> but it breaks horribly on my code because of included {}s which are meant to be text rather than code.  ARgh.

[01:07] *** maja left
[01:07] <colomon> avuserow: thanks!

[01:14] *** rhr_ left
[01:20] *** rhr_ joined
[01:34] *** rhr left
[01:34] *** ihrd joined
[01:49] *** Whiteknight left
[01:53] *** Limbic_Region left
[01:55] *** sevvie joined
[02:04] *** agentzh joined
[02:05] <colomon> Huh.  Does \N do weird things to performance?

[02:10] <colomon> geez, I've forgotten basic perl 5 programming.

[02:10] *** Chillance left
[02:19] *** bgs100 left
[02:21] <s1n> pmichaud: ping

[02:23] *** SmokeMachine joined
[02:27] *** jglick left
[02:27] <colomon> rakudo: my $a = qq[{pi}     is pi]; say $a;

[02:27] <p6eval> rakudo a9ff30: OUTPUT«3.14159265358979     is pi␤»

[02:28] <colomon> Weird.  I'm losing the whitespace after the {} in my code at the moment...

[02:29] *** PZt left
[02:57] <pugs_svn> r28240 | colomon++ | [t/spec] Check in very early draft version of the code to auto-generate a full 

[02:57] <pugs_svn> r28240 | suite of trig tests.

[02:59] <colomon> Right now that code is at least an order-of-magnitude uglier than I would like it to be.  I was hoping the wiser heads out there could take a look and advise.

[03:00] <colomon> I'm also getting a segmentation fault now, no idea why, will worry about it in the morning.

[03:02] *** he_ left
[03:02] *** BinGOs left
[03:02] *** baest left
[03:02] *** Patterner left
[03:02] *** szbalint left
[03:02] *** c1sung left
[03:02] *** Tene left
[03:02] *** [particle] left
[03:02] *** japhb left
[03:02] *** szabgab left
[03:02] *** huf left
[03:02] *** bloonix_ left
[03:02] *** edenc left
[03:02] *** astinus left
[03:02] *** TimToady left
[03:02] *** sunnavy left
[03:02] *** wolverian left
[03:02] *** cookys left
[03:02] *** cosimo left
[03:02] *** Ryan52 left
[03:02] *** tomaw` left
[03:02] *** literal left
[03:02] *** IRSeekBot left
[03:02] *** bigpresh_ left
[03:02] *** kcwu left
[03:02] *** pjcj left
[03:02] *** Gothmog_ left
[03:02] *** eiro left
[03:02] *** jantore left
[03:02] *** felipe left
[03:02] *** Confield left
[03:02] *** he_ joined
[03:02] *** BinGOs joined
[03:02] *** TimToady joined
[03:02] *** baest joined
[03:02] *** Patterner joined
[03:02] *** szbalint joined
[03:02] *** c1sung joined
[03:02] *** Tene joined
[03:02] *** [particle] joined
[03:02] *** japhb joined
[03:02] *** szabgab joined
[03:02] *** huf joined
[03:02] *** literal joined
[03:02] *** IRSeekBot joined
[03:02] *** Ryan52 joined
[03:02] *** astinus joined
[03:02] *** tomaw` joined
[03:02] *** wolverian joined
[03:02] *** cookys joined
[03:02] *** sunnavy joined
[03:02] *** bloonix_ joined
[03:02] *** bigpresh_ joined
[03:02] *** edenc joined
[03:02] *** cosimo joined
[03:02] *** irc.freenode.net sets mode: +o TimToady

[03:03] <pugs_svn> r28241 | colomon++ | [t/spec] Fix typo in generate-tests.pl commit. 

[03:03] *** eiro joined
[03:03] *** pjcj joined
[03:03] *** kcwu joined
[03:06] *** jantore joined
[03:11] *** ihrd left
[03:12] *** frew_ joined
[03:12] <carlin> rakudO: class Alpha { has $!beta; method gamma { my $!beta = 'omega'; while $!beta { say 'Delta'; }; }; }; my $a = Alpha.new; $a.gamma;

[03:12] <carlin> rakudo: class Alpha { has $!beta; method gamma { my $!beta = 'omega'; while $!beta { say 'Delta'; }; }; }; my $a = Alpha.new; $a.gamma;

[03:12] <p6eval> rakudo a9ff30:  ( no output )

[03:12] <carlin> rakudo: class Alpha { has $!beta; method gamma { $!beta = 'omega'; while $!beta { say 'Delta'; }; }; }; my $a = Alpha.new; $a.gamma;

[03:12] <p6eval> rakudo a9ff30:

[03:12] <p6eval> ..OUTPUT«Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤Delta␤…

[03:17] <carlin> Ideally, that first one should have either failed or complained

[03:18] <s1n> phenny: tell pmichaud we need to send out this months' hackathon notice, ideas for locations? saxby's in allen or mckinney is free and usually pretty quiet (my recommendation is saxby's in allen). see http://www.wififreespot.com/tex.html

[03:18] <phenny> s1n: I'll pass that on when pmichaud is around.

[03:22] <carlin> rakudo: class Alpha { has $!beta; method gamma { my $!beta = 'omega'; say $!beta; }; }; my $alpha = Alpha.new(beta => 'delta'); $alpha.gamma;

[03:22] <p6eval> rakudo a9ff30: OUTPUT«delta␤»

[03:24] <carlin> rakudo: class Alpha { has $!beta; method gamma { $!beta = 'omega'; say $!beta; }; }; my $alpha = Alpha.new(beta => 'delta'); $alpha.gamma;

[03:24] <p6eval> rakudo a9ff30: OUTPUT«omega␤»

[03:27] <carlin> rakudo: class Foo { method bar { my $!baz = 'lorem'; say $!baz; }; }; Foo.bar;

[03:27] <p6eval> rakudo a9ff30: OUTPUT«No such attribute '$!baz'␤in method Foo::bar (/tmp/y3FBPZsapq:2)␤called from Main (/tmp/y3FBPZsapq:2)␤»

[03:29] * carlin thinks trying to declare a $!foo variable with my should fail or warn but isn't sure ...

[03:35] *** donri left
[03:35] *** cdarroch left
[03:39] *** russell__ joined
[03:41] *** russell__ left
[03:49] *** stephenlb left
[04:06] *** maja_ left
[04:06] *** maja joined
[04:08] *** felipe joined
[04:13] <ingy> diakopter: hi

[04:16] *** molaf joined
[04:17] *** agentzh left
[04:22] *** tak11 left
[04:24] *** elmex left
[04:24] *** elmex joined
[04:27] *** elmex left
[04:27] *** elmex joined
[04:29] *** molaf left
[04:30] *** elmex left
[04:35] *** elmex joined
[04:35] *** elmex left
[04:35] *** elmex joined
[04:36] *** dukeleto joined
[05:24] *** frew_ left
[05:38] *** sevvie left
[05:49] *** dukeleto left
[05:51] *** justatheory left
[05:59] *** dukeleto joined
[06:21] *** sri_kraih joined
[06:26] *** iblechbot joined
[06:31] *** alexn_org joined
[06:35] *** |Jedai| joined
[06:37] *** elmex left
[06:38] *** elmex joined
[06:41] *** orafu left
[06:41] *** orafu joined
[06:46] *** barney joined
[06:47] *** abra joined
[06:48] *** araujo left
[06:48] *** Jedai left
[07:07] *** frettled left
[07:26] *** frettled joined
[07:26] <frettled> good morning

[07:26] *** konenkovs joined
[07:28] *** frettled left
[07:33] *** frettled joined
[07:37] *** konenkovs left
[07:41] <dukeleto> frettled: howdy

[07:44] *** kidd joined
[07:47] *** abra left
[07:50] *** zamolxes left
[08:06] <moritz_> good day everybody

[08:08] *** cmv joined
[08:08] <moritz_> I just updated http://rakudo.de/ with new charts (number of commits to rakudo per month; number of projects known to proto)

[08:12] *** pnu left
[08:12] <Matt-W> Good morning

[08:15] <frettled> moritz_++ for the good morning news :)

[08:18] * moritz_ bows

[08:19] <bionoid> Hi guys. Did those "Solved in Perl 6" slides make it online?

[08:19] <moritz_> yes

[08:20] <moritz_> jnthn.net -> slides

[08:20] <bionoid> great, thanks moritz_ 

[08:22] *** cmv left
[08:23] *** Grrrr left
[08:25] *** cmv joined
[08:26] *** Grrrr joined
[08:30] *** masak joined
[08:31] <masak> oh hai, amigos.

[08:31] <Matt-W> I see jnthn made extensive use of unicode support for those slides :)

[08:32] <moritz_> Matt-W: I think he had a translator :-)

[08:32] <moritz_> oh hai masak

[08:32] <moritz_> masak: see bottom of rakudo.de for new charts :-)

[08:33] <Matt-W> I thought jnthn spoke Japanese

[08:33] <Matt-W> I may have imagined that though

[08:34] <masak> oi! jnthn's slides are up? \o/

[08:34] <moritz_> he also casually kicks Chuck Norris' in the guts when he seems him :-)

[08:34] <moritz_> masak: aye, on jnthn.net

[08:35] <masak> moritz_++ # modules graph

[08:35] <Matt-W> Those are good slides

[08:36] *** snarkyboojum joined
[08:36] <masak> curious question: why do the module count start at 20?

[08:36] <moritz_> because that's where projects.list started

[08:36] <moritz_> before it had a different name

[08:37] <masak> ah, right.

[08:37] <masak> now I remember.

[08:37] <masak> modules.list or something.

[08:37] <moritz_> and even before that it was inline as a Perl 6 data structure, or something

[08:38] <moritz_> of course you're welcome to contribute a more accurate history :-)

[08:41] <masak> I might. :)

[08:42] <moritz_> I think generating the data once and putting it into projects.hist.0 and then simply concatenating that and the new file would be rather easy

[08:43] <masak> nod.

[08:46] <masak> er. slide 15 of "Solved in Perl 6" is a bit not-recommended...

[08:46] <masak> or rather, line two of that program is redundant. :)

[08:47] <Matt-W> the shuffle a list into random order one?

[08:47] <masak> that one.

[08:48] <Matt-W> I know nothing about that bit of the list api

[08:48] <moritz_> what's wrong with it?

[08:48] <masak> >>. doesn't enforce any ordering.

[08:48] <Matt-W> Oh yes I thought that

[08:48] <moritz_> aye

[08:48] <Matt-W> But I'm not sure it's enough to provide actual randomness

[08:48] <Matt-W> Because chances are if you do it twice it may well come out the same

[08:48] <masak> people who assume it does should be punished by the compiler. :)

[08:49] <Matt-W> At least in a non-threading implementation

[08:49] <masak> the idea with that construct is to be able to introduce threading.

[08:49] <Matt-W> Yes, but at the moment it's linear

[08:49] <Matt-W> So would make a very poor example

[08:49] <moritz_> and even in threading implementations there are chances that on long lists early items are processed before later items

[08:49] <Matt-W> 'ordering not enforced' is not the same as 'random'

[08:50] *** meppl joined
[08:50] <masak> Matt-W: I think my point is that the program introduces two sources of non-ordering: one intentional, and one discouraged.

[08:51] <moritz_> aye, it would have beeen better to just .say for @order

[08:51] <Matt-W> yes, in this case you want to print out in order guarenteed

[08:51] <Matt-W> So you should use a for

[08:53] <masak> same in slide 26. :)

[08:56] <Matt-W> slide 26, ordering doesn't matter...

[08:56] <Matt-W> however if that autothreads it could behave strangely

[08:56] <Matt-W> unless there's line-based buffer locking on STDOUT, which is entirely possible

[08:56] <Matt-W> in which case it's okay

[08:57] <Matt-W> I think we're going to find that there are quite a few cases where we might reach for the hyperoperators but where the lack of ordering and potential threading means we have to reach for loops instead

[08:57] <Matt-W> Almost like we need an ordered linear version...

[08:57] <moritz_> I think that say() and print() should be atomic operations

[08:57] *** Blixtor joined
[08:58] <Matt-W> moritz_: there's a good argument for that, yes

[08:58] <moritz_> Matt-W: well, the order version is called "for" :-)

[08:58] <Matt-W> on a per-filehandle basis

[08:58] <moritz_> *ordered*

[08:58] <Matt-W> moritz_: yes but .name.say for @objects doesn't have quite the same ring to it...

[08:59] <Matt-W> still, it might encourage people to write purer things which work better with hypers

[08:59] <Blixtor> Hi, I've a problem running spectests t/spec/S03-operators/arith with current head, is this expected?

[08:59] <moritz_> Blixtor: whta's the problem? A few passing TODO tests are expected

[09:00] <Blixtor> perl6 binary consumes more and more memory

[09:00] <Blixtor> and test does not seem to come to an end during 'make spectest'

[09:01] <masak> I'm not sure it'd be a good idea to make print and say atomic.

[09:01] <masak> I'm not expert, but my feeling is that sometimes you'd actually want different threads to print at the same time.

[09:02] <masak> min you, I see the allure of writing @products.sort(*.get_price)>>.name>>.say and similar things. it's very convenient.

[09:03] <masak> on the other hand, saying '.say for ...' isn't very hard either.

[09:04] <masak> ooh! slide 32 is *very* nice.

[09:04] <masak> (the 'multi win(::T, T)' part)

[09:04] <moritz_> Blixtor: did you update to the latest rakudo?

[09:04] <moritz_> masak: aye, jnthn++ fixed that a few months ago

[09:05] <Blixtor> moritz_: yes, I did 'git pull'; perl Configure.pl --gen_parrot; make; make spectest

[09:05] <masak> moritz_: I know. I just haven't seen that example before.

[09:05] <Blixtor> moritz_: or is this the wrong way of doing things?

[09:06] <moritz_> Blixtor: no, that's the right way - I'm trying it here now

[09:06] <Blixtor> moritz_: great, thanks for checking this out!

[09:07] *** am0c joined
[09:07] <moritz_> Blixtor: are you on a 32 or 64 bit platform?

[09:08] <Blixtor> moritz_: 64bit, open solaris

[09:08] <moritz_> arith.t takes 14 seconds here, and doesn't consume huge amounts of memory...

[09:08] <moritz_> Blixtor: if you run 'make t/spec/S03-operators/overflow.t', does that pass for you?

[09:08] <Blixtor> I killed the test at ~1 gig ...

[09:08] *** alexn_org left
[09:08] <moritz_> quite understandable :-)

[09:09] <Blixtor> moritz_: yes, that runs fine

[09:09] <moritz_> so it's not an issue with big numbers, and I'm at loss here

[09:10] <jnthn> masak: The slide that uses >>. to output sorted results is Wrong.

[09:10] <jnthn> That's what I get for writing slides while jetlagged...I maybe shoulda corrected it before putting them online, but forgot.

[09:10] <Blixtor> @moritz_: anything I can do to help debug this?

[09:10] <lambdabot> Unknown command, try @list

[09:10] <jnthn> (It came up in the talk.)

[09:10] <masak> jnthn: good. :)

[09:10] <masak> jnthn: very nice slides, by the way.

[09:10] <masak> I'm reading 'The Way to Rakudo *' right now.

[09:11] <moritz_> Blixtor: you could try to rm -rf parrot_install/* and then reconfigure again, if there's an old version of parrot interfering somehow

[09:11] <Blixtor> moritz_: I have this problem since an update yesterday ... a couple of weeks earlier the spectest was already running through fine for me

[09:11] <jnthn> masak: Thanks.

[09:11] <Blixtor> moritz_: I'll try that and let you know then, thanks

[09:11] <jnthn> It's *so* tempting to use >>. for that. :-/

[09:12] <jnthn> I think I may randomize the dispatch somehow.

[09:12] <mikehh> rakudo (a9ff309) builds on parrot r41266 - make test / make spectest (up to 28241) PASS - Ubuntu 9.04 amd64

[09:12] <mikehh> rakudo - t/spec/S03-operators/arith.rakudo - TODO passed:   120, 131-132

[09:13] <lisppaste3> moritz_ pasted "segfault-at-exit workaround" at http://paste.lisp.org/display/87086

[09:13] <masak> ooh! a mountain metaphor!

[09:13] <mikehh> Note on i386 (r41265) the test only TODO passes 131 and two segfaults after (exit 11) - t/spec/S12-attributes/class.rakudo and t/spec/S14-roles/basic.rakudo

[09:14] <moritz_> mikehh: when you're on i386 again, could you please spectest with the patch in http://paste.lisp.org/display/87086? (no hurry really)

[09:14] <moritz_> those two are know (though they used to have a different exit status, iirc)

[09:15] <mikehh> moritz_: I will probably be able to do it after #ps

[09:16] <mikehh> moritz_: I have to on this platform for $work at the moment :-{

[09:16] <moritz_> mikehh: sure, no hurry

[09:16] <mikehh> stay

[09:17] <moritz_> it's enough if I get the results before the Rakudo release on Thursday :-)

[09:17] <jnthn> masak: Was a nice excuse to show more pretty pictures. ;-)

[09:20] <masak> (pretty pictures)++

[09:20] *** riffraff joined
[09:20] <masak> nice to see that over the weekend, the less-than-awesome memory errors on Rakudo exit have been solved. someone++

[09:21] <moritz_> somehow I think it's NotFound++ or WhiteKnight++

[09:29] <Blixtor> moritz_: reconfigure did not help me, still the same problem with memory usage growing by around 15-20 MB/5sec

[09:30] <moritz_> Blixtor: last idea: try with a newer parrot. echo 41266 > build/PARROT_REVISION; perl Configure --gen-parrot && make spectest

[09:30] <moritz_> Blixtor: if that still doesn't help, please open a ticket by writing a mail to [email@hidden.address]
[09:33] <Blixtor> moritz_: I'll try that

[09:48] *** iblechbot left
[09:48] *** meteorjay left
[09:52] *** dakkar joined
[09:55] <colomon> Blixtor: that sounds kind of like a Rat bug I fixed a couple of weeks ago.  Have you updated your spectests lately?

[09:55] *** zamolxes joined
[10:03] <Blixtor> colomon: I was (incorrectly?) under the impression that 'make spectest' does the update automatically

[10:03] <colomon> it may?  

[10:04] <carlin> It does

[10:04] <colomon> svn info t/spec

[10:06] <carlin> It runs `cd t/spec && svn up`

[10:07] <colomon> okay, so much for that thought

[10:07] <colomon> have you identified the failing line of arith.t?

[10:22] <Blixtor> colomon: no, I've not been digging into this yet, I'm still trying the last suggestion of moritz_

[10:22] <Blixtor> colomon: and doing other things on the side ;)

[10:23] <colomon> I understand.  :)

[10:30] <Blixtor> colomon: ok, the problem is still there, so I'll start digging and see if I can find the problematic testcase

[10:32] *** payload left
[10:34] *** payload joined
[10:35] *** hanekomu joined
[10:52] *** Gothmog_ joined
[11:09] *** payload left
[11:14] <lisppaste3> Blixtor pasted "perl6 binary eats up all memory" at http://paste.lisp.org/display/87090

[11:15] <Blixtor> moritz_: d'oh, I found the problem

[11:15] <moritz_> Blixtor: do tell

[11:15] <Blixtor> moritz_: I had some problems in the past with this spectest, so I played around with the test a bit

[11:16] <Blixtor> make spectest does the svn update

[11:16] <Blixtor> now there was some conflict while doing the update, which I didn't see

[11:16] <Blixtor> and the make does not complain about it

[11:17] <Blixtor> the conflict markers in turn lead (in this specific case) to the described behaviour of the perl6 binary

[11:17] <Blixtor> have a look at  http://paste.lisp.org/display/87090

[11:17] <Blixtor> this is a minimal test case that leads for me to the described behavior

[11:18] <colomon> wacky!

[11:18] <Blixtor> of course I'd forgotten about playing around with the spectest in the first place ;)

[11:19] <Blixtor> this seems to be some really weird parsing issue, as if you change the 'say' line under the conflict markers slightly (remove the # in the string), it leads correctly to a syntax error

[11:20] <moritz_> Blixtor: could you please submit that as a bug report?

[11:20] <Blixtor> moritz_, colomon: can you reproduce the behavior with my pasted code?

[11:20] *** sm` left
[11:20] <colomon> give me a moment

[11:21] *** jauaor joined
[11:21] <moritz_> Blixtor: I have to rebuild rakudo first :-)

[11:21] <colomon> (just ran it through std.pm)

[11:21] <Blixtor> moritz_: I'll submit the bug report if one of you can confirm - not that there is something else fishy with my checkout here

[11:21] *** frederico joined
[11:21] *** mberends joined
[11:22] <Blixtor> moritz_: I'm no longer trusting myself ;)

[11:22] <moritz_> yes, confirmed

[11:22] <colomon> watching it in activity monitor now

[11:22] <moritz_> running for 2 minutes now

[11:22] <jauaor> good localtime()

[11:22] <Blixtor> moritz_: watch out, it's getting big rather quickly!

[11:23] <moritz_> yes, at least 10M per second

[11:23] <moritz_> jauaor: OH HAI

[11:23] <colomon> yeah, up to one gig vm here...

[11:23] <jauaor> moritz_: HAI FOR YOU TOO

[11:23] <jauaor> :P

[11:23] <Blixtor> ok, I'll file the bug report then, thanks for your help guys!

[11:24] *** sm` joined
[11:24] <colomon> Blixtor++

[11:24] <masak> Blixtor++

[11:25] <colomon> moritz_: when you have some spare time, can you look at t/spec/S32-trig/generate-tests.pl ?

[11:26] <moritz_> colomon: I'll probably queue that for tonight

[11:26] <colomon> it's unforgivingly ugly write now, but I don't have any good ideas for making it better.

[11:26] <colomon> thanks!

[11:27] *** fredrecsky joined
[11:27] *** fredrecsky left
[11:31] <Blixtor> what information about the revision of Rakudo should I include in the bug report? And how do I obtain that?

[11:31] <colomon> git log 

[11:31] <Blixtor> I'm trying to follow the instructions at http://www.rakudo.org/developers-guide

[11:31] <colomon> if you used git to get it

[11:32] <colomon> the top commit string from that

[11:32] <moritz_> git rev-parse HEAD

[11:33] <Blixtor> ok, thanks

[11:33] <colomon> (which is the same as I said, only smarter)

[11:34] <Blixtor> jup, I noticed ;)

[11:34] <Blixtor> bug report is filed!

[11:35] <moritz_> Blixtor++ indeed

[11:36] <Blixtor> maybe this information about how to get the version/revison could be included on the page I referenced ...

[11:37] <masak> Blixtor: feel free to submit a patch.

[11:37] <moritz_> bah, I can't remember my rakudo.org password or user name

[11:38] <Blixtor> masak: is the webpage source somewhere in the repository?

[11:38] <moritz_> no, it's not

[11:38] <moritz_> I can fix it as soon as I have recovered my password

[11:39] *** iblechbot joined
[11:40] <masak> Blixtor: oh, sorry, you actually meant "page". I thought you were reading from a file in the Rakudo repository...

[11:40] <Blixtor> masak: no, I meant the page at rakudo.org (that I googled up when looking for information how to submit a bug report)

[11:40] <Blixtor> moritz_: great, thanks!

[11:42] *** mikehh_ joined
[11:43] <moritz_> updated.

[11:45] *** frederico left
[11:49] <Blixtor> moritz_++

[11:52] <Blixtor> I'm running the complete (and now unchanged (; ) 'make spectest' now. Is anybody interested in the results? Can I submit these somewhere to help?

[11:52] <moritz_> just give a short summary here

[11:52] <moritz_> we don't have a smoke aggregator yet

[11:53] <Blixtor> moritz_: ok, will do

[11:55] *** SmokeMachine left
[11:56] *** mikehh left
[11:58] *** payload joined
[11:59] *** KyleHa joined
[12:01] <colomon> moritz_: You pasted "work around segfaults at exit" earlier.  What was that about?

[12:02] <moritz_> colomon: about working around segfaults at exit

[12:02] <moritz_> last week man rakudo spectests segfaulted (or die with bus error) on the newest parrot

[12:03] <moritz_> s/man/many/

[12:03] <moritz_> but it seems to be fixed now anyway

[12:05] *** kidd left
[12:05] <colomon> huh.  I never saw that, but that generate-tests.pl script I wrote started segfaulting, apparently at the end of the program, around the time I tried to add the hyperbolic trig tests to mix.

[12:05] <colomon> was wondering if there might be a connection, because darned if I can see what I could be doing that would cause it.

[12:05] <moritz_> colomon: please update to today's parrot and see if it still segfaults

[12:06] <colomon> Just svn up parrot and rebuild?

[12:06] <moritz_> svn up parrot, rebuild parrot, reconfigure and recompile rakudo

[12:07] <colomon> Wow, that is a LOT of changes in parrot!

[12:07] <colomon> mostly involving .gitignore, on further inspection.

[12:15] *** takadonet joined
[12:15] <takadonet> morning all

[12:16] *** patmat left
[12:19] *** payload left
[12:22] *** payload joined
[12:22] <masak> #moose is a friendly channel, almost up there with #perl6.

[12:22] *** araujo joined
[12:26] <moritz_> that's good to hear

[12:29] <moritz_> masak++ # the April list

[12:30] * Matt-W waves

[12:31] * wayland76 also waves, sending a a fine spume of salt spray into the evening breeze

[12:31] <wayland76> (actually just going to bed -- night all)

[12:31] <Matt-W> night

[12:33] *** synth joined
[12:34] *** payload1 joined
[12:34] *** payload left
[12:35] <masak> moritz_: oh, you liked that one - nice. I've been toying with the idea of making another list with features instead of bugs.

[12:36] <masak> and not so much from RT as from RAKUDO comments in the various projects out there.

[12:36] <moritz_> I don't know if it's worth the effort, pmichaud and jnthn will have lots and lots to do to just cover the features listed in the ROADMAP :/

[12:37] <masak> true.

[12:37] <masak> and only 198 days left. o_O

[12:38] <moritz_> t/spec/S32-str/flip.rakudo ..................................... Failed 10/13 subtests

[12:38] <masak> hm, maybe I should make an "April countdown" web app using Web,pm... :)

[12:39] *** KyleHa left
[12:40] <Matt-W> :)

[12:40] <Matt-W> yes you should

[12:40] <Matt-W> do it now

[12:40] <Matt-W> Have it render the days remaining using SVG.pm

[12:40] <masak> yummy -- but slightly non-platform-indep

[12:41] <moritz_> the basics of SVG work in pretty much every browser except in IE and konqueror

[12:41] <masak> hence 'slightly non-platform-indep' :)

[12:44] <Matt-W> pfft

[12:44] <Matt-W> trivialities

[12:44] <Matt-W> :P

[12:45] <Matt-W> do a simple version for the poor souls who have to use IE

[12:45] <masak> I would probably do the simple version regardless.

[12:46] <masak> but throwing something up on feather and redirecting daysleftuntilrakudostar.com to it (or something) would be kinda fun.

[12:46] <moritz_> or perl6.com :-)

[12:46] <masak> and then fixing S32/Temporal, so that one can show the code without being ashamed...

[12:47] <moritz_> oh wait, perl6.info would fit better

[12:47] <masak> I had a thought the other day... maybe separating Time, Date and DateTime is already a proliferation of classes. I saw Ruby use only Time for all of those, and I kinda liked that.

[12:52] <moritz_> anyway, if somebody's looking for a nice Perl 6 task, implementing :by on Ranges would be kinda cool

[12:52] <moritz_> it's not parsed yet

[12:53] <moritz_> but you can construct it with Range.new(:from(1), :to(5), :by(0.5))

[12:53] <masak> I heard it'd be difficult before PGE changes.

[12:53] <moritz_> yes, but the range logic can be done before

[12:53] <masak> oh, definitely.

[12:54] <moritz_> that's something that requires care (:by only works for numeric ranges; reversion of ranges must be thought of etc.), but it's not too hard all in all

[12:54] <masak> there are numerous lurkers in here. maybe one or two of them will rise to the task. :)

[12:54] <moritz_> I'd be happy to guide and answer questions, of course

[12:54] <masak> :by only works for numeric ranges? since when?

[12:54] *** alexn_org joined
[12:55] <moritz_> always

[12:55] <masak> 'a'..'c' :by(.5) used to be allowed.

[12:55] <moritz_> and what did it produce?

[12:55] <colomon> ?????

[12:55] <masak> I know we've talked about it, at least.

[12:55] <masak> <a a b b c>

[12:55] <moritz_> that's kinda scary

[12:55] <masak> yes, but scary good, right? :P

[12:56] <moritz_> anyway, reading S03 would be required to do the job :-)

[12:56] <moritz_> (and simplifying it if needed, or only partially implementing it)

[12:57] <colomon> moritz_++: New parrot does indeed seem to have cured my seg fault.  Yay!

[12:57] <masak> hm... did we ever use any of the ideas from http://paste.lisp.org/display/83194 ?

[12:57] <moritz_> not my doing at all.

[12:58] <masak> moritz_: at least you reported the bug.

[13:02] *** ruoso joined
[13:03] <masak> wohoo! spectests pass!

[13:03] <jnthn> Sheesh, 100 days and we drop to single digits...

[13:04] <jnthn> At this rate I'm going to feel like I'd better like, write some code or something. :)

[13:04] * moritz_ thinks that one can see jnthn's vacation on the commits-to-rakudo graph :-)

[13:04] <jnthn> The commits to blizkost graph on the other hand... ;-)

[13:04] * jnthn did some hacks while at the conference

[13:05] *** PZt joined
[13:06] <Matt-W> jnthn++

[13:06] <Matt-W> I was thinking

[13:06] <Matt-W> How does one go about doing Parrot-level bindings to an external library?

[13:07] <Matt-W> And making it so you can say use Library; in perl 6

[13:08] <masak> Matt-W: you're very welcome to find out and write up a tutorial. I sure'd like to know as well.

[13:09] <Matt-W> heh

[13:09] <Matt-W> I walked into that one didn't I :)

[13:10] <Matt-W> jnthn++ might find out though while he works on making Blizkost work with use Module :lang<perl5> or however it works...

[13:10] <takadonet> OMG 15500 test passed!

[13:10] <Matt-W> yay!!

[13:10] *** jaldhar joined
[13:13] * masak looks at Camelia and smiles warmly

[13:13] <moritz_> ok, parrot 1.6.0 release is tagged

[13:15] <jnthn> Matt-W: My current patch that I'm hacking on will make use CGI:lang<perl5> work.

[13:16] <moritz_> wow.

[13:16] <jnthn> Matt-W: Actually the "install something under CGI in the namespace" bitg already works.

[13:16] <jnthn> (locally)

[13:16] <jnthn> Trouble is I've f00ked up calls on packages somehow.

[13:16] <jnthn> It's like I'm not refcounting something properly, but I don't see where yet.

[13:17] <Matt-W> Cool

[13:17] <Matt-W> I'm really impressed with that

[13:17] <jnthn> Once I fix calls on packages, then I've probably done enough "basic" parameter and return value marshalling to make various things usable.

[13:17] <Matt-W> I was kind of thinking of looking at something to process GObject Introspection data and turn it into Parrot language bindings

[13:18] <Matt-W> Have to look at Parrot's NCI though

[13:18] <moritz_> jnthn: can arrays and hashes be passed around yet?

[13:18] <jnthn> After that it's importing, which I think I know how to do, followed by being able to round-trip any Perl 6 object (well, actually any Parrot object) into Perl 5 land.

[13:18] <Matt-W> That's going to be scary

[13:18] <jnthn> the second of which I don't know how to do, and looks hard.

[13:18] <jnthn> moritz_: Well, not really...

[13:19] <jnthn> moritz_: References to them perhaps can.

[13:19] <Matt-W> that's object roundtripping isn't it

[13:19] <jnthn> moritz_: There's *loads* of bits to fill out.

[13:19] <jnthn> Matt-W: I can round-trip Perl 5 scalars already, afaict.

[13:19] <jnthn> Basically, I want to get the "big pieces" working first.

[13:19] <jnthn> And then it's easy for others to flesh out details, if they wish to.

[13:20] <jnthn> Anyway, my aim for my trip hacking is that by the end of the month, Blizkost is far enough along that you can use Perl 5 DBI will enough to actually do something useful.

[13:20] <jnthn> *well

[13:20] <moritz_> $jnthn.clone for ^10;

[13:20] <Matt-W> That would be super cool

[13:21] <Matt-W> Yes we need more jnthns

[13:21] <Matt-W> We need a quad-core jnthn

[13:22] <jnthn> IMO, one of me is quite enough for me to put up with. :-)

[13:22] <dalek> rakudo: c22d81b | moritz++ | build/PARROT_REVISION:

[13:22] <dalek> rakudo: bump PARROT_REVISION to the 1.6.0 release

[13:22] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c22d81b7e1c2314835d16c0c9895152aa4c2b05a

[13:23] <Matt-W> jnthn: nonsense, you're no trouble at all

[13:23] <moritz_> well, at least not to us :-)

[13:24] *** JimmyZ joined
[13:25] <jnthn> Yes, I'm well behaved here. :-)

[13:25] <jnthn> $admiree probably doesn't need another 9 of me admiring her though. ;-)

[13:26] <Matt-W> That's okay

[13:26] <Matt-W> One of you can admire her full time

[13:26] <Matt-W> The other nine of you can write code

[13:26] *** Chillance joined
[13:26] <jnthn> \o/ finally...I found a version of PuTTY patched up to handle Korean chars properly...

[13:26] <jnthn> plz PuTTY devs incorporate those patches... :-)

[13:28] <Matt-W> I think you might have to tell them somewhere they actually look

[13:28] * moritz_ tries to put some pictures into his next blog posts - and fails half of the time :)

[13:28] <jnthn> Matt-W: Aye, probably. :-)

[13:28] <jnthn> Matt-W: I rather suspect though that they're already aware of them.

[13:28] <Matt-W> Probably

[13:28] <Matt-W> I assume the author of the patches has told them

[13:29] <jnthn> And either will incorporate them or have sound reasons for not doing so.

[13:29] <jnthn> PuTTY is a nice bit of software.

[13:29] <Matt-W> it is

[13:31] <jnthn> ooh! My patched PuTTY also makes hyperlinks clickable.

[13:31] <jnthn> \o/

[13:32] <carlin> Could solaris be added to test 4 in S02-magicals so that it doesn't fail (or am I missing the point of the test?)?

[13:32] <moritz_> carlin: patches welcome

[13:33] *** __ash__ left
[13:34] <carlin> It's a one word change :) I was just thinking there might be a reason that its not there

[13:34] <moritz_> carlin: do you have a commit bit for pugs already?

[13:35] <carlin> Yip

[13:35] *** cmv left
[13:35] <moritz_> no, probably just that nobody thought of it before

[13:35] <Blixtor> carlin: I just noticed as well ;)

[13:36] <Blixtor> my results from 'make spectest': Failed 5/422 test scripts, 98.82% okay. 3/15713 subtests failed, 99.98% okay.

[13:37] <Blixtor> t/spec/S12-attributes/class.rakudo and t/spec/S14-roles/basic.rakudo lead to Parrot stacktraces

[13:37] <moritz_> these two are known

[13:37] <moritz_> (and not easily fixable)

[13:38] <Blixtor> the one mentioned by carlin fails for me as well (also 'solaris' missing)

[13:39] <Blixtor> and I have test 171 of t/spec/S03-operators/arith.t failing as well as test 11 of t/spec/S32-num/power.t

[13:39] *** __ash__ joined
[13:41] <Blixtor> looking more closely, they both seem to test 1**Inf and lead to NaN on my machine ...

[13:41] *** am0c left
[13:42] <Blixtor> so overall no big problems to report, good!

[13:44] <masak> shouldn't 1**Inf lead to NaN?

[13:44] <moritz_> rakudo: say 1**Inf

[13:44] *** riffraff left
[13:44] <p6eval> rakudo a9ff30: OUTPUT«1␤»

[13:47] <moritz_> masak: I think it makes sense to return 1 here

[13:48] <pugs_svn> r28242 | carlin++ | [S02-magicals/config.t] Add solaris as a known OS 

[13:51] *** JimmyZ left
[13:51] <masak> moritz_: hm, I think you're right.

[13:51] <masak> rakudo: 0 ** 0

[13:52] <p6eval> rakudo a9ff30:  ( no output )

[13:52] <masak> rakudo: say 0 ** 0

[13:52] <p6eval> rakudo a9ff30: OUTPUT«1␤»

[13:52] <moritz_> rakudo: say 1.001 ** Inf

[13:52] <p6eval> rakudo a9ff30: OUTPUT«Inf␤»

[13:52] <masak> 0**0 should yield NaN, though.

[13:52] <moritz_> I long resisted against 0 ** 0 being defined. I had no success.

[13:53] <masak> there are several good arguments for it being NaN.

[13:53] <moritz_> I know.

[13:53] <masak> what did people bring as arguments against?

[13:54] <moritz_> that the IETF floating point standards defines 0 ** 0 to be 1, or so

[13:56] <masak> then they are wrong, too. :/

[13:57] *** Whiteknight joined
[13:58] *** sevvie joined
[13:59] <arnsholt> This pages argues (from mathematics) in favour of 0 ** 0 == 1: http://mathforum.org/dr.math/faq/faq.0.to.0.power.html

[13:59] <arnsholt> Their arguments aren't too shabby

[13:59] <moritz_> http://irclog.perlgeek.de/perl6/2007-02-06#i_-54180 for previous discussion

[14:01] <moritz_> I wonder why they don't even mention that 0^0 could be 0

[14:01] <moritz_> (unless I missed it on fast skimming)

[14:01] <arnsholt> They mention it

[14:01] <moritz_> that would make the function 0^x continuous

[14:02] <arnsholt> Yep. But it seems they prefer x^0

[14:03] <__ash__> are there any callbacks you can register right now? 

[14:03] <masak> __ash__: what do you mean?

[14:03] <moritz_> on the meta class? don't think so

[14:03] <masak> quietfanatic and I were discussing it on Twitter.

[14:03] *** pnu joined
[14:04] <__ash__> like maybe you could register an 'inherited' callback? so when a class inherits from another class it calls that callback, or a trace function? 

[14:06] <masak> __ash__: interesting; that was the exact use case quietfanatic had as well.

[14:07] <masak> __ash__: I checked with the Moose people; they don't have it yet, but it shouldn't be so hard to add, they said. http://gist.github.com/187247

[14:08] <__ash__> kk, i'll look at that, Moose, isn't that perl5's object system that sorta mimics perl6's object system?

[14:09] <moritz_> sorta, yes. There has been a lot of cross-inspiration

[14:09] <masak> I think Rakudo can borrow quite a lot of the MOP infrastructure from Moose.

[14:10] <masak> when tuits allow, I'll have a look at the Moose tests and see which ones can be translated to the Perl 6 spectest suite.

[14:12] *** molaf joined
[14:15] <__ash__> jnthn was saying he was going to try to implement most of the SMOP OO API on perl foundation 

[14:16] *** molaf left
[14:18] *** Blixtor left
[14:21] <jnthn> If you want to hook inheritance independent of meta-class, best is to .wrap the trait handler.

[14:22] <jnthn> Or at least, that's what comes to mind first.

[14:22] <masak> jnthn: do you have a working code example?

[14:23] <jnthn> masak: It's kinda a PITA to do it right now.

[14:23] <jnthn> because

[14:23] <Matt-W> trait handlers are still a bit washy?

[14:23] <jnthn> 1) The nice syntax for selecting a multi-variant isn't implemented.

[14:24] <jnthn> (meaning getting hold of the multi you wish to wrap is tricky)

[14:24] <jnthn> and 2) even though you can do it, you're currently going via a non-spec interface that is likely to change/break in the next month or two.

[14:25] <Matt-W> Is there any spec at all on selecting a particular multi variant yet?

[14:25] <jnthn> Or put another way, you can probably do this today if you really want to, but if you're going to then know you're using stuff that is going to move under you.

[14:25] <jnthn> Matt-W: Yeah, IIRC it's like &foo:(Int, Int) or similar.

[14:26] <jnthn> std: multi foo { }; &foo:(Int, Int)

[14:26] <p6eval> std 28242: OUTPUT«ok 00:04 58m␤»

[14:26] <jnthn> aye, I think that.

[14:26] <jnthn> nyi though

[14:26] <jnthn> (though I guess not that hard)

[14:26] <Matt-W> Cool

[14:26] <Matt-W> like the syntax

[14:26] <Matt-W> It makes good sense

[14:26] <jnthn> The way you can do it now is by introspecting the signature.

[14:27] <jnthn> But what Rakudo currently provides is a stop-gap.

[14:27] <Matt-W> mmm

[14:27] <Matt-W> ouch

[14:27] <jnthn> Signatures are going to get revised drastically in October (provided I survive Asia ;-))

[14:28] <jnthn> One thing I want to do under my grant (plz comment ;-)) is get the signature introspection API into the synopses.

[14:28] * masak sincerely hopes jnthn survives Asia

[14:28] <masak> grant URL?

[14:28] <jnthn> masak: So far I'm doing a lot better than surviving. ;-)

[14:28] <jnthn> masak: http://news.perlfoundation.org/2009/09/hague_grant_application_rakudo.html

[14:29] <jnthn> Matt-W: I'm not sure off hand how the syntax is parsed.

[14:29] <jnthn> Matt-W: I think it's probably straightforward to implement though.

[14:31] <hanekomu> jnthn: are you still in Tokyo?

[14:32] <literal> rakudo: sub foo ($a, $b = $a + 1, $c) { say $b }; foo(2);

[14:32] <p6eval> rakudo a9ff30: OUTPUT«too few arguments passed (1) - 4 params expected␤in sub foo (/tmp/UxJlGr42W7:1)␤called from Main (/tmp/UxJlGr42W7:2)␤»

[14:32] <literal> rakudo: sub foo ($a, $b? = $a + 1, $c?) { say $b }; foo(2);

[14:32] <p6eval> rakudo a9ff30: OUTPUT«3␤»

[14:32] <jnthn> hanekomu: no

[14:33] <jnthn> hanekomu: I'm in its anagram. ;-)

[14:33] <hanekomu> ah, nice

[14:33] <hanekomu> (wrongly romanized anagram, that is)

[14:33] <jnthn> Yes, it is. :-)

[14:33] <jnthn> Heh.

[14:33] <hanekomu> Toukyou != anagram(Kyouto)

[14:33] <jnthn> Romanization is an inprecise art. :-)

[14:33] <hanekomu> yes

[14:33] <hanekomu> Kyoto station itself is impressive

[14:33] <Matt-W> Friend of mine lives in Nagasaki

[14:34] <Matt-W> Are you going there at all?

[14:34] <hanekomu> also, if you have time, visit the Fushimi Inari shrine - thousands of Torii, very nice

[14:34] <jnthn> Matt-W: Planning to day-trip Nagasaki from Hakata.

[14:34] <Matt-W> Cool

[14:34] <Matt-W> he says it's nice there

[14:34] *** colomon left
[14:34] <jnthn> hanekomu: That's the one on the outskirts of Kyoto with loads of red pillars?

[14:34] <hanekomu> yes

[14:34] <Matt-W> he's not a Perl guy though, so won't be trailing you with a parasol and some cool drinks

[14:34] <hanekomu> a bit to the south of the station

[14:35] <jnthn> hanekomu: Aye, I'd got that on my "really want to see" list.

[14:35] <jnthn> Kyoto has an insane amount of stuff to see.

[14:35] <hanekomu> yes

[14:36] <hanekomu> Nijo castle is also fantastic. And Nishiki market. And... :)

[14:36] *** nihiliad joined
[14:36] <jnthn> I'd planned to day-trip to Osaka from here, but...well...I'll probably make it an afternoon/evening trip so I can have more time in Kyoto. :-)

[14:36] * hanekomu misses it

[14:36] <jnthn> hanekomu: You lived here once, or just visited?

[14:37] <hanekomu> no, just visited for a week this May (with my mother)

[14:37] <hanekomu> but I plan to return to Kyoto, and Tokyo and other places in Japan

[14:37] <jnthn> Yeah

[14:37] <jnthn> It's my first time in Japan.

[14:37] <jnthn> but I'm rather sure it won't be my last. :-)

[14:37] <hanekomu> And all the nice matcha-based sweets they have there.

[14:38] *** payload1 left
[14:39] <jnthn> Mm. And tempura. :-)

[14:39] <jnthn> I don't eat fish and seafood, but there's still a lot of nice food to be had in Japan even so.

[14:40] <jnthn> the quality is consistently between good and excellent.

[14:40] <hanekomu> yes.

[14:40] <jnthn> And actually does often go with price curve.

[14:41] <jnthn> That is, I've never paid a lot for something that wasn't reallly good.

[14:41] <hanekomu> Hm, Oyakodon

[14:42] <hanekomu> Ah, I remember - there's a restaurant called Katsukura on the 11th floor of Isetan (The Cube, Kyoto station) - lots of meat, and pickles, and other side dishes.

[14:42] <hanekomu> http://www.bento.com/kansai/rev/7027.html

[14:43] <jnthn> tonkatsu!! :-D

[14:44] <hanekomu> better description, and better pics here: http://paulstravelpics.blogspot.com/2008/09/kyoto-restaurant-reviews.html - scroll down a bit

[14:46] <jnthn> hanekomu: Ah, this is one of a chain?

[14:46] <hanekomu> you get to grind sesame with a mortar, then mix with tasty sauces.

[14:46] <hanekomu> yes

[14:49] <jnthn> hanekomu: Yeah, the Pauleys took me to one of the chain in Tokyo.

[14:49] <hanekomu> ah

[14:49] <jnthn> It *is* very, very good.

[14:50] *** Psyche^ joined
[14:50] *** SmokeMachine joined
[14:50] *** donaldh joined
[14:53] *** justatheory joined
[14:57] *** pmurias joined
[14:58] *** iblechbot left
[15:00] *** Patterner left
[15:00] *** Psyche^ is now known as Patterner

[15:01] *** hanekomu left
[15:02] <pmurias> ruoso: hi

[15:02] <ruoso> hi pmurias 

[15:02] <phenny> ruoso: 11 Sep 18:36Z <TimToady> tell ruoso please read the Guy Steele slides mentioned above and think about hyper iterators in terms of balanced (more or less) list splitting

[15:02] <pmurias> ruoso: what should i submit as the gsoc code sample?

[15:03] <ruoso> pmurias, I think the multi tests are very much illustrative

[15:03] <masak> ruoso: that's http://research.sun.com/projects/plrg/Publications/ICFPAugust2009Steele.pdf if you're curious.

[15:04] <ruoso> yeah... I was looking at it the other day...

[15:04] <ruoso> still trying to parse much of it

[15:05] *** jauaor left
[15:05] *** justatheory left
[15:06] <carlin> darnit, parrot failed to build on Haiku

[15:07] <__ash__> jnthn: in src/builtin/guts.pir is that where you would need to pun a role if your doing an explicit role method call? (the $var.Role::method(); issue)

[15:07] *** barney left
[15:08] <Matt-W> carlin: awwwww :(

[15:08] <__ash__> rakudo: role A { method foo { 'a' } };  A.new.A::foo; 

[15:08] <p6eval> rakudo a9ff30: OUTPUT«Method '!select' not found for invocant of class ''␤»

[15:09] <carlin> Probably because of how out-of-date the gcc is

[15:09] * carlin tries to upgrade it

[15:10] <ruoso> I'm mostly trying to understand what does it mean to have two slurpies in a signature...

[15:11] *** Eevee left
[15:14] *** pmurias left
[15:14] *** sharada joined
[15:14] *** pmurias joined
[15:14] <jnthn> __ash__: . new has already punned

[15:14] <jnthn> Ah, I see the isue, hmm...

[15:15] <__ash__> rakudo: class A { method foo { 'a' } };  A.new.A::foo;

[15:15] <jnthn> ruoso: I thought you could only have one slurpy array and one slurpy hash (and slurpy scalars are just unpackers in disguise)

[15:15] <p6eval> rakudo a9ff30:  ( no output )

[15:15] *** Eevee joined
[15:16] <jnthn> __ash__: It probably needs some fix in the punner.

[15:16] <jnthn> IIRC.

[15:16] <__ash__> k, i'll look at that then

[15:16] <jnthn> I did know what needed to be done to fix it at one point, but I forgetted it.

[15:17] <__ash__> no worries, if i figure it out i'll let you know

[15:19] *** cono left
[15:20] *** cono joined
[15:20] *** barney joined
[15:21] *** Exodist joined
[15:25] *** abra joined
[15:27] <pmichaud> good morning, #perl6

[15:27] <phenny> pmichaud: 03:18Z <s1n> tell pmichaud we need to send out this months' hackathon notice, ideas for locations? saxby's in allen or mckinney is free and usually pretty quiet (my recommendation is saxby's in allen). see http://www.wififreespot.com/tex.html

[15:27] <pmichaud> phenny:  tell s1n saxby's in allen sounds good to me

[15:27] <phenny> pmichaud: I'll pass that on when s1n is around.

[15:27] *** cdarroch joined
[15:28] *** KyleHa joined
[15:28] <jnthn> pmichaud!! :-)

[15:28] * jnthn waves from Kyoto

[15:29] <pmichaud> oh, sorry, I was waving in the wrong direction I think :-P

[15:29] <pmichaud> how's Kyoto/Japan/Far East?

[15:31] <jnthn> It's an awesome place.

[15:31] <jnthn> Kyoto has far too much to do. :-)

[15:32] *** sharada left
[15:33] *** payload joined
[15:35] <__ash__> so, jnthn, in the future the right way to add an inheritence hook is to setup a wrap on a trait? 

[15:36] <jnthn> __ash__: If you want to do so independent of meta-class, that's probably the place...

[15:36] <jnthn> __ash__: Otherwise, wrap add_parent on the metaclass you care about;.

[15:36] <masak> oh hai, pmichaud!

[15:38] <__ash__> so there wouldn't be a generic object hook you could setup to do that? no function like object.HOW.inherited() is called when a subclass inherits from something? 

[15:40] <jnthn> I don't think there's anything like that in the default meta-model.

[15:40] <jnthn> But it'd probably not be a hard module to write.

[15:40] <jnthn> (Once we have other bits in place, I guess...)

[15:43] <__ash__> I am working on a role based persistence mechanism (that kinda mimi's DataMapper from ruby) and that would be really useful for STI, although for now i am dumping things to a file, since I can't connect to a DB at the moment, but one day, it should be able to do STI 

[15:44] *** colomon joined
[15:44] <__ash__> right now i am still in the planning/what can i do/whats the right way to do it phase

[15:46] <__ash__> s/that kinda mimi's/that kinda mimics

[15:46] <jnthn> STD...STI...great, now we covered both acronyms for it... :-)

[15:47] <__ash__> single table inheritance :-P

[15:47] <jnthn> oh, phew

[15:47] * jnthn reminds himself that STD = short for Standard

[15:48] *** stephenlb joined
[15:49] <masak> jnthn: Perl 6 is contagious!

[15:49] <masak> jnthn: alternatively, "Perl 6: spread the love!"

[15:50] <jnthn> masak: all(<eww lol!>)

[15:51] <masak> :)

[15:59] * jnthn -> sleep

[16:00] *** asiekierka joined
[16:00] *** asiekierka left
[16:00] *** colomon left
[16:01] *** alexn_org left
[16:03] *** justatheory joined
[16:03] *** colomon joined
[16:04] *** donaldh left
[16:04] *** nihiliad left
[16:07] *** nihiliad joined
[16:09] *** ms11 joined
[16:17] <ruoso> jnthn, http://irclog.perlgeek.de/perl6/2009-09-11#i_1492820

[16:17] <pmurias> diakopter: hi

[16:17] <diakopter> pmurias: howdy

[16:17] *** jaldhar left
[16:19] <pmurias> still alive ;) had to wake up at 4 hour at night to retrieve a laptop i lost during a train trip

[16:19] <diakopter> you retrieved it, sounds like?

[16:19] * ruoso probably suffer a bit more parsing that slides because he's not fluent in LISP

[16:21] <pmurias> diakopter: yes, fortunatly

[16:21] *** abra left
[16:21] *** masak left
[16:22] <pmurias> diakopter: how did your viv stuff do?

[16:23] <diakopter> pmurias: I got vivjs to work... and the V8 context embedded in perl was able to handle/parse the quasi-JSON edition of STD.pm, but I tried pretty-printing it with json2.js' JSON.stringify() and it exploded into wanting a few more GB of memory than available (b/c of all the duplicated references)...

[16:23] <ruoso> TimToady, I *think* the non-flattening behavior of Perl 6 is already very friendly to parallelism

[16:23] <diakopter> but at least V8 was able to parse it and instantiate it

[16:24] <ruoso> TimToady, in a way that multi foo(*@a, *@b, *@c) would expect a multidimensional capture where the first dimension has 3 elements

[16:24] <pmurias>  diakopter: do you plan to write the compiler in js?

[16:25] <diakopter> interpreter, yeah

[16:25] <pmichaud> that would be incredible

[16:26] <diakopter> STD.pm in JSON is 11MB :)

[16:26] *** abra joined
[16:27] * diakopter thanks to the (anonymous?) person who wrote Acme::JavaScript::V8 last year...

[16:27] <ruoso> TimToady, theoretically, finding the elements in the "first dimension" is the way we ask the list to "split itself" in a hyper iterator

[16:28] <colomon> rakudo: say 31415926535 / 10000000000;

[16:28] <p6eval> rakudo a9ff30: OUTPUT«say requires an argument at line 2, near " \x{2}31415926"␤in Main (src/gen_setting.pm:2565)␤»

[16:28] <colomon> rakudo: say 31415926535 / 10000000000;

[16:28] <p6eval> rakudo a9ff30: OUTPUT«1␤»

[16:28] <colomon> That strikes me as wrong....

[16:28] <__ash__> thats not 1.... isn't that PI? 

[16:28] <pmurias> diakopter: you plan to interpret perl6 with an js interpreter rather than compiling it to js?

[16:29] <__ash__> or part of PI

[16:29] <colomon> __ash__: yes, I'm trying to convert to radians in rational numbers.

[16:29] <pmichaud> rakudo: say 31415926535 / 10000000000.0

[16:29] <p6eval> rakudo a9ff30: OUTPUT«3.1415926535␤»

[16:29] <__ash__> oh, those silly integers (and integer division) 

[16:29] <pmichaud> rakudo: say 31415926535.PARROT

[16:29] <diakopter> pmurias: well, the ast is "compiled" to a JS "expression tree" object...

[16:29] <p6eval> rakudo a9ff30: OUTPUT«Int␤»

[16:29] <pmichaud> rakudo: say 31415926535.WHAT

[16:29] <p6eval> rakudo a9ff30: OUTPUT«Int()␤»

[16:29] <colomon> Oooh, it's an overflow

[16:30] <pmichaud> rakudo:  say 314 / 100;

[16:30] <p6eval> rakudo a9ff30: OUTPUT«3.14␤»

[16:30] <colomon> I counted the wrong number of digits.

[16:30] <colomon> rakudo: say 314159265 / 100000000

[16:30] <p6eval> rakudo a9ff30: OUTPUT«3.14159265␤»

[16:30] <pmichaud> still shouldn't give "1", likely.

[16:30] <colomon> pmichaud: probably the overflow hoses the GCD calculation routine.

[16:30] <pmichaud> rakudo: say 31415926535 / 1000000

[16:30] <p6eval> rakudo a9ff30: OUTPUT«-2147.483645␤»

[16:31] <diakopter> pmurias: but the (stackless/continuation-returning-style) interpreter model I'm using allows the emitter to swap in "compiled" JS too... so it can all start out interpreted, and then as optimization phases are added, more can be "compiled"

[16:31] <pmichaud> I can't figure out why it thinks that 31415926535 is an int.

[16:31] <colomon> Are you sure it does?

[16:31] <pmichaud> rakudo: say 31415926535.PARROT

[16:31] <p6eval> rakudo a9ff30: OUTPUT«Int␤»

[16:31] <colomon> rakudo: say (1415926535 / 1000000).WHAT

[16:31] <p6eval> rakudo a9ff30: OUTPUT«Rat()␤»

[16:32] <colomon> whoops

[16:32] <pmichaud> rakudo: say (31415926535+1).PARROT

[16:32] <colomon> rakudo: say (31415926535 / 1000000).WHAT

[16:32] <p6eval> rakudo a9ff30: OUTPUT«Num␤»

[16:32] <p6eval> rakudo a9ff30: OUTPUT«Rat()␤»

[16:32] <pmichaud> rakudo: say (31415926535-1).PARROT

[16:32] <p6eval> rakudo a9ff30: OUTPUT«Num␤»

[16:32] <pmichaud> looks like Rakudo has trouble with integer constants that fall outside of the range of 32-bit ints

[16:32] <colomon> that number is too big for a 32-bit int, right?

[16:33] <pmichaud> yes

[16:33] <pmichaud> in most operations Rakudo auto-promotes it to a float

[16:33] <pmichaud> rakudo:  say 31415926535

[16:33] <p6eval> rakudo a9ff30: OUTPUT«31415926535␤»

[16:33] <pmichaud> that's.... weird

[16:33] <diakopter> pmurias: since the jseval() function exposed in Perl-land bypasses V8's JS eval() and sends the JS source straight to the v8 engine, jseval() is just as slow(/fast) as any other top-level JS code in V8

[16:34] <ruoso> diakopter, one thing you might want to evaluate is how far V8 can implement Perl 6 semantics, and what are you going to do about unsupported semantics...

[16:35] <__ash__> hmmm, on my computer perl6   say 31415926535 / 10000000000; printed 3.1415926535

[16:35] <__ash__> is that because i have mine compiled for 64 bit? 

[16:35] <pmichaud> __ash__: probably.

[16:35] <diakopter> ruoso: :) hey, it's an interpreter! any set of semantics can be emulated! ;)  srsly though, what specifically do you have in mind

[16:35] <__ash__> so parrot defaults int's capacity to the size its compiled for? (32 or 64) 

[16:36] *** zamolxes left
[16:36] <ruoso> diakopter, the thing is that in order to emulate Perl 6 semantics, you're probably going to need to implement a runtime library on top of V8, which might prove way slower than you expect (i.e. KindaPerl6)

[16:36] <ruoso> diakopter, otoh, you might simply choose to implement a subset of Perl 6

[16:36] <ruoso> "whatever V8 supports"-Perl 6

[16:37] <pmichaud> I've just added masak++'s mmorpg article and KyleHa++'s "how I got started" articles to http://rakudo.org/how-to-help

[16:38] <diakopter> ruoso: definitely, of course.  But that kind of delay won't be noticable anyway compared to the 2-4 seconds STD.pmc takes to startup/parse input :P

[16:38] <ruoso> that considering you need to run STD every time

[16:39] <ruoso> but if you're able to compile to some sort of bytecode, compile-time might be irrelevant

[16:40] <pmurias> and you can work around the STD startup time by using app-persistent

[16:40] <ruoso> diakopter, note that a Perl 6 subset that can be run in V8 is still way cool

[16:41] <pmurias> diakopter: you are targeting V8 only?

[16:41] <diakopter> pmurias: yes, b/c it's linked into perl with xs

[16:42] <pmurias> so you don't plan for the code to work in browsers?

[16:42] <diakopter> so STD can call out to it when it hits the end of a BEGIN{} and then resume

[16:42] <diakopter> well sure, if gimme5 was ported to a gimmejs

[16:43] <pmurias> hmm, if we rule out eval why do we need a parser at runtime?

[16:43] <diakopter> b/c it's mutable if STD is still running...

[16:44] *** sharada joined
[16:45] <pmurias> once the program parser you could freeze everything and load it from json/js?

[16:46] <pmurias> a perl 6 on js that *doesn't* run on browsers doesn't seem very usefull

[16:47] <pmurias> there is nothing wrong with developing using a standlone V8 at first if it's possible to browserize"

[16:47] <pmurias> it later

[16:48] <diakopter> yep; all it would need is a gimmejs... which would eliminate the Perl dependency

[16:49] <moritz_> once the compiler works it's a gimmejs ;-)

[16:49] <diakopter> likewise with rakudo using STD.pm; all it needs is a gimmenqp or gimmepir or gimme_Perl6_rakudo_r388382whatever

[16:51] <diakopter> moritz_: yeah :)

[16:51] *** sevvie left
[16:55] <pmurias> or cat if once rakudo matures enough

[16:55] *** pmurias left
[16:55] *** pmurias joined
[16:56] *** colomon left
[16:56] <moritz_> we're working on it ;-)

[16:58] *** colomon joined
[17:01] *** jaldhar joined
[17:01] <pugs_svn> r28243 | colomon++ | [t/spec] Update to trig test generator -- still ugly as sin, but now correctly generates a full suite of real number tests on all the forward trig functions. 

[17:02] <colomon> It's currently generating 3718 passing tests on my branch of Rakudo.  

[17:03] <colomon> Still need to do a ton of work for Complex numbers and all the inverse trig functions.

[17:03] *** sharada left
[17:06] *** smash_ joined
[17:06] <smash_> hello everyone

[17:06] *** hercynium left
[17:07] <colomon> hello

[17:14] *** Exodist left
[17:15] *** payload left
[17:15] *** payload1 joined
[17:18] *** pmurias left
[17:19] *** colomon left
[17:21] *** synth left
[17:22] *** garron joined
[17:23] <pmichaud> http://pmichaud.com/perl6/rakudo-tests-2009-09-15.png   # that's a really nice looking graph.  colomon++  moritz++  ash++  (let me know if I need to ++ anyone else)

[17:23] *** __ash__ left
[17:24] *** desertm4x joined
[17:24] * moritz_ was barely involved </gandalf>

[17:27] <dalek> rakudo: 1c35342 | pmichaud++ | docs/spectest-progress.csv:

[17:27] <dalek> rakudo: spectest-progress.csv update: 436 files, 15500 (71.5% of 21679) pass, 0 fail

[17:27] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/1c353426c2359d0005653b2221d9d789e2eb8b50

[17:30] *** sharada joined
[17:36] *** synth joined
[17:45] *** jauaor joined
[17:52] *** sharada left
[17:54] <dalek> rakudo: 42ff49e | pmichaud++ | docs/announce/2009-09:

[17:54] <dalek> rakudo: Initial draft of 2009-09 release announcement.

[17:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/42ff49e7d69d0bd93002eb37bc6c85f8566e462c

[17:54] <dalek> rakudo: 48b5d4d | pmichaud++ | docs/ChangeLog:

[17:54] <dalek> rakudo: Some ChangeLog updates.

[17:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/48b5d4d63e02a51df1e8d724df6a90b4edb9ef62

[17:56] *** M_o_C joined
[17:58] *** abra left
[18:01] *** sevvie joined
[18:02] *** colomon joined
[18:08] <diakopter> std: five(say(3),say(4,sub five{}))

[18:08] <p6eval> std 28243: OUTPUT«ok 00:02 38m␤»

[18:11] <smash_> rakudo: say "1"

[18:11] <p6eval> rakudo a9ff30: OUTPUT«1␤»

[18:12] <smash_> rakudo: say (1 if 0).perl

[18:12] <p6eval> rakudo a9ff30: OUTPUT«[]␤»

[18:12] *** blaze-x_ joined
[18:12] *** blaze-x_ is now known as blaze-x

[18:13] *** mikehh__ joined
[18:13] <blaze-x> is there a way to debug perl6 grammars? I'd just like to see what is going on, how my teststring is parsed

[18:14] <moritz_> when it's parsed successfully, you you inspect $/.perl

[18:14] <moritz_> or $/.chunks.perl

[18:17] <blaze-x> and when it parses unsucessfully? Anything I can inspect then?

[18:17] <pmichaud> I still hope to put a debugging mode into the regex engine

[18:18] <moritz_> blaze-x: Regexes current support PIR code blocks

[18:18] <moritz_> in the form {{{{ PIR HERE }}}}

[18:18] <moritz_> you can put print statements inside those

[18:19] <blaze-x> I see, but that might just be a bit too much, I'm just learning perl6, and don't know any PIR. I'll try to build up from a small example.

[18:20] <blaze-x> Maybe there is a way to put print statements inside grammars for debugging purposes?

[18:20] <moritz_> rakudo: 'foo' ~~ m/ f {{{{ print "1" }}}} o/

[18:20] <p6eval> rakudo a9ff30: OUTPUT«1»

[18:20] <moritz_> rakudo: 'foo' ~~ m/ f {{{{ print "1" }}}} oa/

[18:20] <p6eval> rakudo a9ff30: OUTPUT«1»

[18:21] <moritz_> you see that it gets as least as far as the 'f'

[18:21] <moritz_> if you only want to print a constant, PIR is no rocket science

[18:21] <blaze-x> I see, interesting... having a try thanks.

[18:22] <smash_> blaze-x: you can use $ ./perl6 --target=parse script.p6 to see the parsing tree

[18:23] <moritz_> smash_: that's no help for self-written regexes

[18:23] *** justatheory left
[18:23] <smash_> hmm, i must have misread his question then

[18:24] <diakopter> TimToady: bug in  viv --ast : children of the Comma node are not emitted

[18:27] *** mikehh__ is now known as mikehh

[18:29] *** rfordinal joined
[18:29] *** mikehh_ left
[18:31] <diakopter> yep; 13:14 < blaze-x> and when it parses unsucessfully? Anything I can inspect then?

[18:31] <diakopter> oops

[18:31] <diakopter> yep; STD::Comma is not transformed

[18:37] *** Util joined
[18:41] *** meppl left
[18:46] <smash_> RT#67866 can be resolved

[18:48] <moritz_> rakudo: say any("foo","bar").WHAT

[18:49] <p6eval> rakudo a9ff30: OUTPUT«Junction()␤»

[18:49] <moritz_> when we have tests, yes

[18:49] <colomon> rakudo: say asin(sin(2.35619449019234));

[18:49] <p6eval> rakudo a9ff30: OUTPUT«0.785398163397453␤»

[18:50] <moritz_> I've updated the ticket accordingly, smash_++

[18:50] <colomon> pugs: say asin(sin(2.35619449019234));

[18:50] <p6eval> pugs: OUTPUT«*** No such subroutine: "&asin"␤    at /tmp/gqMC42ejDc line 1, column 5-32␤»

[18:50] <moritz_> rakudo: say 2.35619449019234 - pi

[18:50] <p6eval> rakudo a9ff30: OUTPUT«-0.785398163397453␤»

[18:50] <colomon> oh, I see.

[18:51] <colomon> it doesn't have to be a full pi away, it can be pi/2 in the right circumstances

[18:51] <pmichaud> say sin(0.785); say sin(2.356);

[18:51] <pmichaud> rakudo: say sin(0.785); say sin(2.356);

[18:51] <p6eval> rakudo a9ff30: OUTPUT«0.706825181105366␤0.707244293145898␤»

[18:51] <moritz_> iirc returned angles are normalized to the range from -pi to pi

[18:51] <colomon> okay, time to rewrite my first stab at the asin test.  :)

[18:52] <colomon> moritz_: think it may actually be -pi/2 to pi/2.

[18:52] <moritz_> that's not enough for every function that returns an angle

[18:54] <colomon> it's enough for asin and acos, it's not enough for atan2.

[18:56] *** SmokeMachine left
[18:57] *** SmokeMachine joined
[19:01] <smash_> moritz_: what would be the most appropriate file in your opinion to add the tests for RT#67866 ?

[19:03] <moritz_> smash_: t/spec/S03-junctions/misc.t

[19:04] <moritz_> something like any(1, 2).WHAT  === Junction or so

[19:04] * smash_ nods.

[19:05] <moritz_> (btw when I take a ticket with the comment that it needs tests, others are very welcome to provide those; I just act as a placeholder)

[19:05] *** zloyrusskiy joined
[19:16] *** zloyrusskiy left
[19:16] <diakopter> std: say(:3,8,9)

[19:16] <p6eval> std 28243:  ( no output )

[19:16] <diakopter> (crash, I think)

[19:17] <[particle]> or rebuild

[19:17] <moritz_> timeout on the server, maybe

[19:17] <moritz_> [particle]: rebuild shouldn't affect the running copy, except for slowness

[19:18] <diakopter> what's the timeout limit

[19:18] <moritz_> 8s

[19:19] <moritz_> sh: line 1:  2657 CPU time limit exceeded /usr/bin/perl tryfile /tmp/4tiOdoFiXk >> /tmp/L4Ki81iK0U 2>&1

[19:19] <diakopter> hrm. well, it infinitely loops locally

[19:19] *** frederico joined
[19:19] <moritz_> and infinity > 8s ;-)

[19:20] <pmichaud> for sufficiently large values of infinity :-)

[19:20] <diakopter> TimToady: bug in STD.pm/gimme5:  std: say(:3,8,9) # loops whilever

[19:20] <moritz_> so far I found infinity always large enough ;-)

[19:21] <moritz_> [particle]: I read in the #ps logs that you want to release Rakudo next week - was that just a thinko/typo?

[19:21] <diakopter> memory usage doesn't increase and recursion warning doesn't appear

[19:21] <[particle]> moritz_: thinko

[19:22] <[particle]> i'm releasing this week

[19:22] <moritz_> great

[19:22] <[particle]> i'll do a practice run tonight

[19:22] <moritz_> great

[19:22] <[particle]> ~8h

[19:22] <pmichaud> [particle]: are you still expecting to do a "live release"?

[19:22] <pmichaud> er, "live release demo"?

[19:22] <[particle]> looks like my perl meeting is cancelled :(

[19:22] <pmichaud> :(

[19:22] <pmichaud> awww, howcome?

[19:23] <[particle]> ENOGROUPLEADERSHIP

[19:23] <pmichaud> eh, just do it as a video podcast or something, then!

[19:27] <diakopter> std: say(7,8,9)

[19:27] <p6eval> std 28243: OUTPUT«ok 00:02 38m␤»

[19:27] *** sharada joined
[19:27] <diakopter> moritz_: have you tried putting STD.pm in mod_perl

[19:28] <diakopter> STD.pmc I mean

[19:28] <moritz_> diakopter: no

[19:28] <diakopter> I wonder if its response time via p6eval would improve

[19:28] <diakopter> a web service of sorts.

[19:29] <moritz_> IMHO not really worth the trouble

[19:29] *** fredrecsky joined
[19:31] <moritz_> pmichaud, [particle]: the current release announcement draft lists old deprecation notices...

[19:31] <moritz_> what's your preference? write them as "have been removed", or delete them altogether?

[19:32] <diakopter> TimToady: also, bug in STD.pm/gimme5/viv -  std: say(7,8,9) # term missing args member

[19:35] *** mikehh_ joined
[19:35] *** iblechbot joined
[19:35] *** frederico_br joined
[19:38] *** mikehh left
[19:40] <diakopter> TimToady: scratch that last

[19:40] *** ruoso left
[19:40] *** fredrecsky left
[19:42] *** __ash__ joined
[19:43] *** cmv joined
[19:43] *** cmv left
[19:43] *** cmv joined
[19:49] *** frederico left
[19:51] *** sharada left
[19:54] *** frederico joined
[19:55] <pugs_svn> r28244 | fglock++ | [mp6] Javascript emitter, runtime tweaks 

[20:00] *** Whiteknight left
[20:00] *** M_o_C left
[20:03] <smash_> moritz_: just attached a simple patch in RT#67866 that adds tests, if those aren't enough just reply to the message

[20:04] <moritz_> smash_: you can commit them right away... have you got a commit bit for pugs yet? (that's where the tests live)

[20:04] <smash_> moritz_: i know, but i do not have a commit bit for pugs repo

[20:05] *** fredrecsky joined
[20:05] <moritz_> I can change that if you tell (or /msg) me your email address

[20:07] *** KyleHa left
[20:09] *** justatheory joined
[20:13] <pugs_svn> r28245 | smash++ | * add tests for RT#67866 

[20:13] *** mikehh_ is now known as mikehh

[20:13] *** frederico_br left
[20:13] *** frederico_br joined
[20:15] <smash_> moritz_: ok, added tests to pugs repo

[20:16] <moritz_> smash_: great

[20:19] *** meppl joined
[20:19] <moritz_> smash_: I've closed the ticket now, thank you

[20:19] <smash_> moritz_: great.. one down, many to go

[20:24] *** Confield joined
[20:26] *** frederico left
[20:26] *** frederico joined
[20:26] *** zamolxes joined
[20:29] *** fredrecsky left
[20:30] *** barney left
[20:32] *** kidd_ joined
[20:34] *** fredrecsky joined
[20:38] <mikehh> rakudo (48b5d5d) builds on parrot r41279 - make test / make spectest (up to 28245) PASS - Ubuntu 9.04 amd64

[20:38] <mikehh> rakudo - t/spec/S03-operators/arith.rakudo - TODO passed:   120, 131-132

[20:39] *** frederico_br left
[20:40] *** frederico left
[20:44] *** desertm4x left
[20:45] *** rfordinal left
[20:45] *** frederico_br joined
[20:45] *** rfordinal joined
[20:46] *** rfordinal3643 joined
[20:46] *** rfordinal left
[20:47] <pmichaud> I think I want to mark those arith.t tests as SKIP instead of TODO

[20:47] <pmichaud> they're false passes

[20:47] <moritz_> I think we should move them to overflow.t

[20:47] <pmichaud> +2

[20:47] <pmichaud> afk, grocery shopping

[20:48] *** rfordinal3643 left
[20:48] <moritz_> I have a local patch that removes the int() function. When I'm done spectesting and I'm still sufficiently awake I'm happy to do that

[20:48] *** rfordinal joined
[20:48] *** sri_kraih_ joined
[20:49] <moritz_> rakudo: say log(4063328477) / log(2)

[20:49] <p6eval> rakudo a9ff30: OUTPUT«31.9200148498582␤»

[20:49] <mberends> :-) proto's installed-modules branch is starting to use ~/.perl6lib

[20:49] *** sri_kraih left
[20:49] *** sri_kraih_ is now known as sri_kraih

[20:49] <moritz_> mberends++

[20:49] *** smash_ left
[20:55] *** pmurias joined
[20:58] *** frederico_br left
[20:59] <mberends> moritz_: it's not ready for general use yet. One lesson is that manual testing is soooo tedious. There is no test suite for proto. (I wonder if that's easy to create).

[21:00] <moritz_> mberends: I've learned that lesson for SVG::Plot

[21:00] <moritz_> and it's really not easy to write meaningful tests for that, too

[21:01] <mberends> I read your remarks earlier

[21:02] <moritz_> (and yes, testing stuff that works on the file system is always ugly)

[21:03] <mberends> indeed, and because proto does bootstrapping, it's ugly inside too

[21:04] * moritz_ wonder how many people are still using the int() function, despite early deprecation notice

[21:04] <pmurias> moritz_: whats the replacement? 

[21:04] * mberends was, in Temporal module and tests :/

[21:05] <moritz_> pmurias: .Int

[21:05] *** fredrecsky left
[21:05] <pmurias> rakudo: say 1.79.In

[21:05] <pmurias> rakudo: say 1.79.Int

[21:05] <p6eval> rakudo a9ff30: OUTPUT«Method 'In' not found for invocant of class 'Num'␤»

[21:05] <p6eval> rakudo a9ff30: OUTPUT«1␤»

[21:05] *** Whiteknight joined
[21:05] <mberends> rakudo: say 3.6.floor

[21:05] <p6eval> rakudo a9ff30: OUTPUT«3␤»

[21:17] <Util> rakudo: eval q[ class B0rk { say $.a; }; ]; eval q[ class Chef { say $.b; }; ]; say "Done";

[21:17] <p6eval> rakudo a9ff30: OUTPUT«Done␤»

[21:18] <Util> eval q[ class B0rk { say $.a; }; ]; eval q[ class Chef { say $.b; }; ]; say $!;

[21:18] <pmurias> moritz_: a sub int {die 'We are terribly sorry but you should use the .Int method instead of the int function'} would cure that swiftly

[21:18] <Util> rakudo: eval q[ class B0rk { say $.a; }; ]; eval q[ class Chef { say $.b; }; ]; say $!;

[21:18] <p6eval> rakudo a9ff30: OUTPUT«Lexical 'self' not found␤»

[21:19] *** takadonet left
[21:21] <mikehh> BTW if I run t/spec/S03-operators/arith.t on amd64 it fails (not ok) 6 tests - 130, 133, 191, 192, 193 and 197

[21:22] <Util> When I am logged in as "util", RT displays links to allow me to change existing tickets.

[21:22] <Util> I need to open a new ticket, but I see no link to allow that.

[21:22] <Util> Is some other privledge needed for my RT ID, or am I just missing something obvious?

[21:23] <moritz_> Util: it's only possible by mail (rakudobug@perl.org)

[21:23] <Util> moritz_, OK, thanks

[21:31] <mikehh> t/spec/S03-operators/arith.t passes SKIP tests 121, 123, 198

[21:35] <moritz_> I'm moving some of those tests to overflow.t (which is not run by default)

[21:36] *** mikehh_ joined
[21:36] *** mikehh left
[21:39] *** pmurias left
[21:42] *** mikehh_ left
[21:52] <pugs_svn> r28246 | moritz++ | Kill off prefix:<int> (as per r25890) 

[21:52] <pugs_svn> r28246 | 

[21:52] <pugs_svn> r28246 | Also remove a huge chunk of commented-out Perl 5 code form pack.t.

[21:52] <pugs_svn> r28246 | It confused me greatly twice already - if anybody wants it back,

[21:52] <pugs_svn> r28246 | it can be found in the perl 5 git repo.

[21:54] <dalek> rakudo: 27dcc8d | moritz++ | docs/announce/2009-09:

[21:54] <dalek> rakudo: mention context vars in release announcement

[21:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/27dcc8d2875904494529cc752b9e5fdf62eaf1fd

[21:54] <dalek> rakudo: c3d93dc | moritz++ | docs/announce/2009-09:

[21:54] <dalek> rakudo: mark deprecation notices as being a thing of the past

[21:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c3d93dc6b63de8650090fc1b2b6dfe6d6c284319

[21:54] <dalek> rakudo: 9a61441 | moritz++ | src/builtins/any-num.pir:

[21:54] <dalek> rakudo: sub int() is gone (as announced in the 2009-08 release), give a helpful error message instead

[21:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/9a61441ec3281f0306f88f67d47eeee5a3ae35f4

[21:54] <pugs_svn> r28247 | moritz++ | [t/spec] move arithmetic tests with large numbers to overflow.t 

[21:54] * moritz_ -> bed

[21:57] *** dakkar left
[22:10] *** synth left
[22:10] *** estrabd joined
[22:10] *** estrabd left
[22:10] *** meppl left
[22:11] *** Helios- joined
[22:14] *** snarkyboojum left
[22:15] *** snarkyboojum joined
[22:15] *** Helios left
[22:18] *** Util left
[22:23] *** mberends left
[22:33] *** jauaor left
[22:34] *** zamolxes left
[22:35] *** tak11 joined
[22:37] *** kidd_ left
[22:37] *** mikehh joined
[22:37] *** Chillance left
[22:40] *** snarkyboojum left
[22:41] *** snarkyboojum joined
[22:43] *** rbaumer joined
[22:46] *** nihiliad left
[22:47] *** rbaumer left
[22:47] *** iblechbot left
[22:48] *** blaze-x left
[22:49] *** rbaumer joined
[22:51] *** synth joined
[22:51] *** hercynium joined
[22:53] *** rbaumer left
[22:53] *** rbaumer joined
[23:06] *** KatrinaTheLamia left
[23:09] *** KatrinaTheLamia joined
[23:14] *** blaze-x joined
[23:14] *** lisppaste3 left
[23:14] *** lisppaste3 joined
[23:21] *** __ash__ left
[23:23] *** synth^2 joined
[23:24] *** sm^^^ joined
[23:26] *** rfordinal left
[23:29] *** sevvie left
[23:33] *** sm` left
[23:36] *** cdarroch left
[23:44] *** pjcj left
[23:47] <diakopter> whee

[23:49] *** bgs100 joined
[23:51] *** frikipedista8928 joined
[23:51] <frikipedista8928> 12hola auxilio

[23:54] <frikipedista8928> 12hola

[23:54] <frikipedista8928> 12hello

[23:54] <frikipedista8928> 12s.o.s.

[23:55] <frikipedista8928> 12hi

[23:56] *** frikipedista8928 left
[23:56] <diakopter> ok

