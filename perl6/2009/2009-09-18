[00:09] <diakopter> rakudo: say 1,,3

[00:09] <p6eval> rakudo 2953ac:  ( no output )

[00:09] <diakopter> rakudo: say 1,,3

[00:09] <p6eval> rakudo 2953ac:  ( no output )

[00:10] <diakopter> well, it worked when I /msg

[00:10] <TimToady> std: say 1,,3

[00:10] <p6eval> std 28279: OUTPUT«[31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix , instead at /tmp/iwlzkE2jue line 1:␤------> [32msay 1,,[33m⏏[31m3[0m␤FAILED 00:03 38m␤»

[00:10] <diakopter> rakudo 2953ac: OUTPUT«13␤»

[00:10] <TimToady> I think STD is correct here :)

[00:11] <TimToady> a nullterm is only allowed at the end of the list

[00:11] <TimToady> otherwise the semantics are unclear--people will expect it to pass an undef or something

[00:14] <diakopter> rakudo: say 1;3,

[00:14] <p6eval> rakudo 2953ac: OUTPUT«No result object␤in Main (src/gen_setting.pm:2815)␤»

[00:15] <TimToady> o_O

[00:15] <diakopter> one'd think it'd say 1 at least

[00:16] <diakopter> (if it got that far, I mean)

[00:16] <TimToady> rakudo: 3,

[00:16] <p6eval> rakudo 2953ac: OUTPUT«No result object␤in Main (src/gen_setting.pm:2815)␤»

[00:16] <TimToady> rakudo: 3

[00:16] <p6eval> rakudo 2953ac:  ( no output )

[00:20] *** mdxi left
[00:20] *** mdxi joined
[00:21] *** sevvie joined
[00:27] *** payload left
[00:30] *** muixirt_ joined
[00:35] *** jrtayloriv left
[00:36] *** jrtayloriv joined
[00:38] <dalek> rakudo: a7ac444 | pmichaud++ | src/parser/grammar.pg:

[00:38] <dalek> rakudo: Fix handling of twigil in param_var for anonymous invocant (RT #69206, masak++)

[00:38] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a7ac444d15e146952cc3b231b76316005b569f52

[00:39] *** muixirt_ left
[00:40] *** jrtayloriv left
[00:41] *** jrtayloriv joined
[00:42] *** athomason joined
[00:44] *** cono left
[00:47] *** muixirt left
[00:51] *** _jaldhar joined
[00:53] *** payload joined
[00:55] *** maja_ joined
[00:55] *** maja left
[01:03] *** sm` left
[01:03] *** sm` joined
[01:10] *** nihiliad joined
[01:18] *** justatheory left
[01:25] <dalek> rakudo: a969c9e | (Solomon Foster)++ | src/setting/Any-num.pm:

[01:25] <dalek> rakudo: Add Any versions of the inverse trig functions.

[01:25] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a969c9ed8aca9aee638286b407a31cbe327a4305

[01:45] *** __ash__ joined
[01:46] *** JimmyZ joined
[01:46] <JimmyZ> moritz_:<pre>DBI connect('database=moritz5;host=localhost','moritz',...) failed: Too many connections at lib/IrcLog.pm line 30

[01:51] *** frew_ left
[01:59] *** Helios- left
[02:03] *** Helios- joined
[02:07] *** ilbot2 left
[02:07] *** ilbot2 joined
[02:24] *** zpmorgan left
[02:35] *** SmokeMachine joined
[02:48] *** dukeleto left
[02:51] *** JimmyZ left
[03:01] *** frew_ joined
[03:04] *** frew__ left
[03:18] *** cdarroch left
[03:33] *** saran joined
[03:33] <saran> Good morning friends

[03:36] <KatrinaTheLamia> I plead the fifth!

[03:38] <TimToady> that only works here

[03:40] <TimToady> up

[03:42] <saran> Tim : Great to see the announcement of Rakudo Perl 6 development release #21 ("Seattle"

[03:42] *** azawawi joined
[03:42] <azawawi> good morning

[03:43] <azawawi> moritz_: ping

[03:43] <TimToady> I am Toady, not Tim

[03:43] <TimToady> I am merely a Toady of Tims

[03:45] <saran> Toady : am in windows..when i try to clone using "git clone git://github.com/rakudo/rakudo.git" it says <snip> $ git clone git://github.com/rakudo/rakudo.git <br> fatal: destination path 'rakudo' already exists and is not an empty directory. <snip>

[03:45] <azawawi> moritz_: Moose on feather fails. Could you please fix it? Please see http://gist.github.com/188860

[03:46] <azawawi> moritz_: feather1 ofcourse...

[03:47] <TimToady> saran: alas, I know next to nothing about git, and little about Windows either

[03:49] <wayland76> I on the other hand, am a Tim, and know nothing of any Toadys other than TimToady :)

[03:50] <saran> Toady : Hw shld i get the latest release of seattle in my machine

[03:52] <TimToady> azawawi: try again with Moose

[03:55] *** __ash__ left
[03:57] <azawawi> TimToady: Yay! it works. Many thanks TimToady++

[03:57] *** synth^2 joined
[03:57] * azawawi releases the next Syntax::Highlight::Perl6 ...

[03:58] *** synth^3 joined
[04:01] <TimToady> saran: try going into rakudo dir and saying 'git pull'

[04:02] *** frew__ joined
[04:05] <azawawi> TimToady: building rakudo on win32 ?

[04:05] <TimToady> so it would appear

[04:05] <saran> TimToady : Thanks .. it works..any other svn steps to get the latest seattle in live

[04:06] <TimToady> make realclean

[04:06] <TimToady> perl Configure.pl --gen-parrot

[04:06] <TimToady> should download the latest, I think

[04:07] <azawawi> saran: http://padre.perlide.org/trac/wiki/BuildingOnPortableStrawberry#ParrotandRakudo

[04:08] <azawawi> saran: that's what use to build the latest. I will be releasing Seattle shortly as a zip file to work with almost-six msi distribution

[04:10] <saran> azawawi : i have already installed strawberry and rakudo..am working to sync with the latest seattle release

[04:11] <azawawi> saran: what version of strawberry?

[04:12] *** dukeleto joined
[04:13] <azawawi> saran: if you follow these instructions, you'll get a fully working rakudo installation under c:\strawberry\six

[04:13] *** stephenlb left
[04:15] <saran> azawawi : strawberry perl 5.10.0.6

[04:15] *** synth left
[04:16] *** synth^2 left
[04:16] <azawawi> saran: for a ready-made PDX over Padre distribution, you can follow also these instructions http://ahmadzawawi.blogspot.com/2009/09/upgrading-to-rakudo-perl-6-pdx.html

[04:17] <azawawi> saran: that provides Perl 6 highlighting, STD error checking, and quick fixes for various STD warnings/errors... 

[04:18] <azawawi> saran: and you can run your Perl 6 script using rakudo through Padre IDE...

[04:19] <azawawi> saran: almost six distro = strawberry + Padre + Padre::Plugin::Perl6 + rakudo

[04:19] <saran> azawawi : back after 2 mins

[04:21] <pugs_svn> r28280 | lwall++ | [multi.t] does isn't associative 

[04:23] <s1n> way off topic: anyone in here obtain a phd?

[04:23] <s1n> (aside from pmichaud)

[04:23] <saran> azawawi : pls look at my blog http://twitter.com/perlsaran and am not sure what i am missing

[04:24] * azawawi takes a look

[04:25] <saran> This is what the link followed before a week to install rakudo  http://www.perlfoundation.org/perl6/index.cgi?roadmap_to_helping_with_development

[04:26] <azawawi> saran: vista or xp?

[04:27] <saran> azawawi : xp

[04:28] <saran> TimToady : How to check whether seattle release is updated and in sync

[04:28] <azawawi> saran: git checkout Seattle

[04:28] <azawawi> saran: git pull

[04:29] <azawawi> saran: forget the last command, only 'git checkout Seattle'

[04:30] <TimToady> that won't track the head though, I'd think

[04:30] <TimToady> if you want that

[04:31] *** justatheory joined
[04:31] <saran> azawawi : i used "git pull" in rakudo folder

[04:31] <azawawi> saran: then you have the latest...

[04:31] *** Entonian joined
[04:32] <azawawi> saran: git checkout master and then git pull

[04:32] <azawawi> saran: that's HEAD

[04:32] <saran> azawawi : but i missed "git checkout seattle" ..

[04:32] <azawawi> saran: if you need to stay only on Seattle

[04:32] <azawawi> saran: then git checkout Seattle

[04:33] <saran> azawawi : got it

[04:33] <azawawi> saran: switching branch/head is very fast in git

[04:36] <saran> azawawi : back after breakfast

[04:37] <azawawi> saran: i'll be in #padre @ irc.perl.org

[04:37] <azawawi> saran: cya

[04:42] *** azawawi left
[04:45] <saran> TimToady : shall use "mingw32-make" and "mingw32-make test" and "mingw32-make install" after the "perl configure.pl --gen-parrot" success

[04:51] *** zamolxes left
[04:53] *** Entonian left
[04:58] *** JimmyZ joined
[05:02] *** meppl joined
[05:06] *** nihiliad left
[05:14] *** synth^2 joined
[05:15] *** synth joined
[05:19] *** frew__ left
[05:29] *** azawawi joined
[05:29] <azawawi> [particle]: ping

[05:29] *** jrockway_ joined
[05:31] <saran> test message

[05:32] *** synth^3 left
[05:33] <clkao> win 21

[05:33] *** synth^2 left
[05:40] *** jrockway left
[05:46] <azawawi> moritz_: latest win32 rakudo binary for almost-six-0.41,  http://feather.perl6.nl/~azawawi/six/six-seattle.zip , blog coming soon...

[05:50] *** azawawi left
[05:57] *** cmv left
[05:58] *** arthur-_ left
[06:03] *** spinclad joined
[06:08] *** sm^^^ joined
[06:12] *** justatheory left
[06:15] *** ilbot2 left
[06:16] *** ilbot2 joined
[06:18] *** sm` left
[06:27] *** justatheory joined
[06:27] *** dukeleto left
[06:30] *** justatheory left
[06:31] *** am0c joined
[06:35] *** tak11 left
[06:41] *** orafu left
[06:41] *** orafu joined
[06:41] <saran> can some one give some link related with the hash implementation in perl6

[06:44] <JimmyZ> saran: Do you mean  rakudo? 

[06:45] <saran> jimmyz : yes

[06:50] *** rfordinal joined
[06:52] *** saran left
[06:57] *** iblechbot joined
[07:02] *** saran joined
[07:02] <saran> Jimmyz : Did i missed out any of ur link or message?

[07:03] <JimmyZ> saran: yes

[07:04] <saran> jimmyz : Pls resend

[07:05] *** bigpresh_ left
[07:05] *** bigpresh_ joined
[07:05] <JimmyZ> Is this what you want ? http://github.com/rakudo/rakudo/blob/master/src/classes/Hash.pir 

[07:06] <JimmyZ> or parrot hash pmc?

[07:06] <saran> jimmyz : no..i just want a basic example and working of hash in parrot

[07:10] *** rfordinal left
[07:13] <JimmyZ> rakudo: my @a = (1); @a[0] := @a; @a.perl

[07:13] <p6eval> rakudo a969c9: OUTPUT«rtype not set␤in Main (src/gen_setting.pm:3469)␤»

[07:14] *** am0c left
[07:20] *** donaldh left
[07:22] *** donaldh joined
[07:22] <JimmyZ> rakudo: my %a = (:a<A>, :b<B>); %a{a} = %a; %a.perl;

[07:23] <p6eval> rakudo a969c9: OUTPUT«Could not find non-existent sub a␤»

[07:23] *** snearch joined
[07:26] *** rfordinal joined
[07:26] <TimToady> std: my %a = (:a<A>, :b<B>); %a{a} = %a; %a.perl;

[07:26] <p6eval> std 28280: OUTPUT«Undeclared routine:␤   a used at 1␤ok 00:03 39m␤»

[07:27] <TimToady> std: my %a = (:a<A>, :b<B>); %a<a> = %a; %a.perl;

[07:27] <p6eval> std 28280: OUTPUT«ok 00:03 39m␤»

[07:31] *** muixirt joined
[07:35] <JimmyZ> rakudo: my %a = (:a<A>, :b<B>); %a<a> = %a; %a.perl;

[07:36] <p6eval> rakudo a969c9:  ( no output )

[07:36] <JimmyZ> rakudo: my %a = (:a<A>, :b<B>); %a<a> := %a; %a.perl;

[07:36] <p6eval> rakudo a969c9: OUTPUT«rtype not set␤in Main (src/gen_setting.pm:3469)␤»

[07:37] <TimToady> zzz &

[07:38] *** dukeleto joined
[07:41] *** reqamst joined
[07:48] *** desertm4x joined
[07:52] *** xinming_ joined
[07:52] *** xinming left
[07:56] *** pdcawley joined
[08:07] *** cmv joined
[08:15] <desertm4x> Is there a generic way to create an own Container class either extending the List or Array class/role. I would like to add some methods that basically grep the array, but as some of the greps are lengthy and would occur at many different places, I'd like to avoid copying them to all these places.

[08:20] *** dakkar joined
[08:49] *** ssm joined
[09:04] *** cotto left
[09:06] *** snearch left
[09:07] *** jauaor joined
[09:08] *** cotto joined
[09:10] *** rbaumer joined
[09:13] *** zaphar_p2 left
[09:13] *** pdcawley left
[09:14] *** payload left
[09:28] *** rbaumer left
[09:28] *** saran left
[09:33] *** Whiteknight joined
[09:39] <moritz_> re

[09:42] <clkao> $66/win 21

[09:50] *** pdcawley joined
[10:01] *** payload joined
[10:03] *** arthur-_ joined
[10:03] *** masak joined
[10:03] <masak> aloha, perl6ers.

[10:05] <moritz_> \ö/

[10:06] <masak> moritz_: the antennae suit you.

[10:06] <moritz_> hairs, actually ;-)

[10:06] <moritz_> but thanks for the compliment

[10:09] <masak> you only have two strands of hair?

[10:09] <JimmyZ> hello, masak

[10:10] <masak> JimmyZ: 你好, JimmyZ 

[10:11] <JimmyZ> masak: I think I found some bugs, but needs to review.

[10:12] <masak> bring'em on.

[10:12] <JimmyZ> rakudo: class Alpha { has @!a = < beta gamma >; method postcircumfix:<[ ]>($key) { return @!a[$key]; }; }; my $a = Alpha.new; say $a[1];

[10:12] <p6eval> rakudo a969c9: OUTPUT«No such attribute '@!a'␤in method Alpha::postcircumfix:[ ] (/tmp/scXNRVM0V7:2)␤called from method Alpha::postcircumfix:[ ] (/tmp/scXNRVM0V7:2)␤called from Main (/tmp/scXNRVM0V7:2)␤»

[10:12] <JimmyZ> rakudo: class Alpha { has @!a = < beta gamma >; method postcircumfix:<{ }>($key) { return @!a[$key]; }; }; my $a = Alpha.new; say $a{1};

[10:12] <p6eval> rakudo a969c9: OUTPUT«gamma␤»

[10:12] <JimmyZ> rakudo: class Alpha { has @!a = < beta gamma >; method postcircumfix:<( )>($key) { return @!a[$key]; }; }; my $a = Alpha.new; say $a(1);

[10:12] <p6eval> rakudo a969c9: OUTPUT«gamma␤»

[10:12] <JimmyZ> Is the first one a bug/

[10:13] <masak> looks like.

[10:13] <JimmyZ> another:

[10:13] *** Woodi joined
[10:13] *** am0c joined
[10:13] <JimmyZ> rakudo: my $a = 1; repeat while $a<2 -> $b { $a++ }

[10:14] <p6eval> rakudo a969c9: OUTPUT«Confused at line 2, near "$b { $a++ "␤in Main (src/gen_setting.pm:3469)␤»

[10:14] <JimmyZ> rakudo: my $a = 1; repeat while $a < 2 -> $b { $a++ }

[10:14] <p6eval> rakudo a969c9: OUTPUT«Confused at line 2, near "-> $b { $a"␤in Main (src/gen_setting.pm:3469)␤»

[10:14] <masak> yes, bug. but that one I reported for you a few days back. :)

[10:14] <masak> er, or a very close variant of it.

[10:15] <JimmyZ> rakudo: my $a = 1; while $a< 10 -> $b { $b.defined.say; };

[10:15] <p6eval> rakudo a969c9: OUTPUT«Confused at line 2, near "$b { $b.de"␤in Main (src/gen_setting.pm:3469)␤»

[10:15] <JimmyZ> rakudo: my $a = 1; while $a < 10 -> $b { $b.defined.say; };

[10:15] <p6eval> rakudo a969c9:

[10:15] <p6eval> ..OUTPUT«1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1􏿽xE2

[10:16] <JimmyZ> and this?

[10:16] <JimmyZ> rakudo: my $a = 1; while $a<10{ $^b.defined.say; };

[10:16] <masak> aye, the one I reported had $^a.defined in it.

[10:16] <p6eval> rakudo a969c9: OUTPUT«too few arguments passed (0) - 1 param expected␤in Main (/tmp/sVh0tTxHbM:0)␤»

[10:17] <JimmyZ> rakudo: my $a = 1; while $a<10 { $^b.defined.say; };

[10:17] <masak> that's the one.

[10:17] <p6eval> rakudo a969c9:

[10:17] <p6eval> ..OUTPUT«1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1􏿽xE2

[10:17] <masak> feel free to add any of those to the ticket from a few days back.

[10:17] <JimmyZ> the space between '0{'

[10:17] *** alexn_org joined
[10:17] <masak> aye.

[10:18] <JimmyZ> and like this: 

[10:18] <JimmyZ> rakudo: my $a = 1; while $a<10 -> $b { say $b.defined; $a++; }

[10:18] <p6eval> rakudo a969c9: OUTPUT«Confused at line 2, near "$b { say $"␤in Main (src/gen_setting.pm:3469)␤»

[10:18] <JimmyZ> rakudo: my $a = 1; while $a < 10 -> $b { say $b.defined; $a++; }

[10:18] <p6eval> rakudo a969c9: OUTPUT«1␤1␤1␤1␤1␤1␤1␤1␤1␤»

[10:18] <JimmyZ> the *space*

[10:19] <moritz_> phenny, tell azawawi I think Moose is fixed now on feather1

[10:19] <phenny> moritz_: I'll pass that on when azawawi is around.

[10:20] <masak> JimmyZ: aye. there are a couple of other known spacing issues reported too.

[10:20] <am0c> my $a = 1; while $a < 10 { $^b.defined.say }

[10:20] <masak> it's nice to keep track of them, becuase they are annoying when they bite people.

[10:20] <am0c> rakudo: my $a = 1; while $a < 10 { $^b.defined.say }

[10:20] <p6eval> rakudo a969c9: OUTPUT«1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1

[10:20] *** Woodi left
[10:21] <am0c> rakudo: my $a = 0; say $a<10

[10:21] <p6eval> rakudo a969c9: OUTPUT«1␤»

[10:21] <JimmyZ> masak: I can't find why from the grammer. :(

[10:21] *** Whiteknight left
[10:21] <masak> JimmyZ: it's probably not so easy... then it would have been fixed already.

[10:22] <masak> the grammar can be subtle.

[10:23] <JimmyZ> yes.

[10:26] <masak> rakudo: sub bar(:$foo) { say $foo }; class A { has $!foo = 'OH HAI'; method x { bar( :$!foo ) } }; A.new.x

[10:26] <p6eval> rakudo a969c9: OUTPUT«Symbol '$1foo' not predeclared in x␤in Main (src/gen_setting.pm:3469)␤»

[10:26] <masak> I'd be very interested to know where the '1' comes from.

[10:27] <moritz_> shift + 1 => !

[10:28] <masak> er.

[10:28] <JimmyZ> masak: token pblock { [ <.ws> <lambda> <.ws> <signature> ]? <.ws> <block> {*} }

[10:28] <JimmyZ>  

[10:28] <JimmyZ> token xblock { <EXPR> <pblock> {*} }

[10:28] <moritz_> ;-)

[10:29] <masak> rakudo: sub bar(:$foo) { say $foo }; class A { has $.foo = 'OH HAI'; method x { bar( :$.foo ) } }; A.new.x

[10:29] <p6eval> rakudo a969c9: OUTPUT«Symbol '$1foo' not predeclared in x␤in Main (src/gen_setting.pm:3469)␤»

[10:29] <JimmyZ> token pblock { [ <.ws> <lambda> <.ws> <signature> ]? <.ws> <block> {*} }

[10:29] <JimmyZ> token xblock { <EXPR> <pblock> {*} }

[10:29] <masak> moritz_: your theory falls apart with :$.foo. I think.

[10:30] *** rgrau joined
[10:33] *** payload left
[10:33] *** JimmyZ left
[10:38] *** pdcawley_ joined
[10:42] *** M_o_C joined
[10:52] <moritz_> diakopter: ping

[10:55] *** pdcawley left
[10:55] *** pdcawley_ is now known as pdcawley

[11:08] *** zamolxes joined
[11:18] *** pdcawley_ joined
[11:18] *** pdcawley left
[11:18] *** pdcawley_ is now known as pdcawley

[11:24] *** agentzh joined
[11:32] *** payload joined
[11:35] *** jauaor left
[11:39] <pugs_svn> r28281 | moritz++ | [new perl6.org] two column layout for community/ 

[11:39] <pugs_svn> r28282 | moritz++ | [new perl6.org] two-column layout for compilers/ 

[11:48] *** pdcawley_ joined
[11:53] <pugs_svn> r28283 | moritz++ | [new perl6.org] introduction to specification page 

[11:58] *** pdcawley left
[11:58] *** pdcawley_ is now known as pdcawley

[12:01] *** ejs joined
[12:08] *** SmokeMachine left
[12:10] *** masak left
[12:12] *** iblechbot left
[12:12] <takadonet> morning all

[12:12] <moritz_> \o/

[12:13] *** ruoso joined
[12:17] *** abra joined
[12:18] *** abra left
[12:18] *** abra joined
[12:21] *** masak joined
[12:23] *** pdcawley_ joined
[12:23] *** xinming_ is now known as xinming

[12:23] *** rfordinal3643 joined
[12:30] <masak> I don't know what to respond to this kind of tweet: http://twitter.com/augustl/status/4077483740

[12:31] *** mberends joined
[12:31] *** pmurias joined
[12:32] <masak> I once saw a blogpost comment say something like "Sometimes I daydream that I have the power to choose one meme to remove forever from the minds of people. If I did have that power, I'd choose this one." -- referring to the eternal joke about DNF/Perl 6/Plan 9.

[12:32] <pmurias> masak: what does the checkpoint part of the tote diagram do?

[12:32] <masak> pmurias: it's basically a hook where you can plug in git-commit or whatever.

[12:33] <masak> pmichaud: it's also the point where the state of the tests is registered, and subsequent runs are compared against that state to determine whether progress has been made.

[12:33] <masak> erm, pmurias, not pmichaud. :/

[12:33] <masak> (just re-activating my membership in the Club of People Who Can't Tab-complete)

[12:33] <mberends> masak, I dreamt that tote is just REPL in the large: Review, Edit, Prove, Loop

[12:34] <masak> 哈哈

[12:34] <masak> I whipped up a proto-tote yesterday, for private purposes.

[12:34] <masak> conclusion: it does work, at least for me.

[12:34] <ruoso> bom dia

[12:35] <masak> bom dia, ruoso.

[12:35] *** TiMBuS joined
[12:37] <masak> mberends: I see you left smiley-adorned comments for me in the proto git-log :P

[12:38] <TiMBuS> rakudo question: does Set/Bag exist? and if so how would i use them..

[12:38] <masak> TiMBuS: they don't.

[12:38] <TiMBuS> aw :(

[12:38] <masak> I once wrote up a grant application to implement them.

[12:38] <masak> and a few other things.

[12:38] <TiMBuS> wanted to do the Right Thing and use not a hash for once

[12:39] <masak> TiMBuS: tell us more about your use case.

[12:39] <mberends> masak: nobody else reads 'em ;)

[12:39] *** pdcawley left
[12:39] *** pdcawley_ is now known as pdcawley

[12:39] <TiMBuS> im just tracking irc nicks.

[12:40] <TiMBuS> they're always unique. i dont need to keep any values tied to them, i just want to keep a list of nicks

[12:41] <masak> sounds like a KeyHash to me.

[12:41] <TiMBuS> oh?

[12:41] <masak> yes, I think so.

[12:41] <masak> let me check.

[12:41] *** rfordinal left
[12:41] <TiMBuS> yeah ive got that syn open

[12:41] <masak> hm, maybe even a KeySet.

[12:42] <TiMBuS> whats the difference between a keyset/keybag and set/bag

[12:43] <masak> the former autodelete pairs whose values match the default.

[12:44] <masak> oh! and Set and Bag are immutable.

[12:45] <TiMBuS> oh

[12:46] *** finanalyst joined
[12:46] <finanalyst> hi to any(every)one

[12:47] <finanalyst> i keep running into <Method 'postcircumfix:[ ]' not found for invocant of class 'Failure'>

[12:47] *** mzedeler joined
[12:47] <finanalyst> it means I have mispelt something

[12:47] <finanalyst> but I wish there was a little more information

[12:48] <masak> join the club. :)

[12:48] *** mzedeler left
[12:48] <masak> the 'Failure' part indicates that whatever you're trying to index isn't there.

[12:48] <finanalyst> rakudo: my %x=<a b> Z 1,[3,4]; say %x<bc>[0]

[12:48] <p6eval> rakudo a969c9: OUTPUT«Method 'postcircumfix:[ ]' not found for invocant of class 'Failure'␤»

[12:49] <masak> right.

[12:49] <masak> because there's no %x<bc>

[12:49] <masak> that's going to be fixed eventually.

[12:49] <finanalyst> but this is something i use quite alot, so it would be nice to know what the invocant was

[12:50] <masak> indeed.

[12:50] <masak> right now they only way to guard oneself against this is to develop in very small steps.

[12:50] <masak> that way, you know with greater certainty what line caused the error.

[12:50] <finanalyst> 'fixed eventually' == 'when it reaches the level of irritability for someone to fix' ?

[12:51] <finanalyst> i have tried to, but i just refactored something and this came up

[12:51] *** sri_kraih left
[12:52] <finanalyst> i wish there was some way even of tracing line numbers before the error

[12:52] <masak> finanalyst: it wouldn't surprise me if fixing this is blocking on something.

[12:52] <finanalyst> ah

[12:52] <masak> finanalyst: I can assure you that pmichaud is aware of the degree to which it irritates people.

[12:52] <finanalyst> by the way, does $*LINE or similar work?

[12:53] <masak> that's $?LINE, I think.

[12:53] <moritz_> I don't think so

[12:53] <masak> me neither.

[12:54] <finanalyst> shame. it would be nice to sprinkle "say $?LINE" through the code

[12:54] <moritz_> rakudo: say $?LINE

[12:54] <p6eval> rakudo a969c9: OUTPUT«Symbol '$?LINE' not predeclared in <anonymous> (/tmp/HGaimLr94M:2)␤in Main (src/gen_setting.pm:3469)␤»

[12:55] * finanalyst sigh

[12:56] <moritz_> at least the error message is quite good

[12:56] <masak> don't just do something. stand there!

[12:57] <finanalyst> rakudo: $*trace_line = 1

[12:57] <p6eval> rakudo a969c9:  ( no output )

[12:57] <moritz_> anybody's got a perl 6 related subdomain to spare?

[12:57] <finanalyst> rakudo: say $*trace_line

[12:57] <p6eval> rakudo a969c9: OUTPUT«Contextual $*trace_line not found␤␤»

[12:58] <moritz_> I'd like to make the new version of perl6.org available somewhere

[12:58] <moritz_> and since it uses absolute links (in the form href="/community/") I can't easily put it into a subdirectory

[12:59] <finanalyst> interesting. using REPL and setting $*xxx , I was able to get the value of the variable $*xxx back on the next line (if you see what i mean)

[12:59] *** zamolxes left
[12:59] <moritz_> std: $*foo = 2

[12:59] <p6eval> std 28283: OUTPUT«ok 00:02 38m␤»

[12:59] <moritz_> std: say $*foo

[13:00] <p6eval> std 28283: OUTPUT«ok 00:02 37m␤»

[13:00] <TiMBuS> its because the repl is compiling each line into its own block

[13:00] <TiMBuS> so any globals stay

[13:01] <finanalyst> yes, but it was irritating that variables would not persist over several lines

[13:01] <finanalyst> with globals this can be worked around

[13:01] <TiMBuS> i wrote a patch a long while ago to make vars without 'my' autovivify on the repl, and set themselves in the outer namespace

[13:02] <finanalyst> patch doesnt seem to be included in current repl

[13:02] <TiMBuS> nope i didnt really submit it

[13:03] *** sm^^^ left
[13:03] *** sm` joined
[13:04] <TiMBuS> was on git, i guess. i was looking for a way to modify the PCT so it could tell me when it was in REPL mode, instead of trying to guess from the arguments passed

[13:05] *** abra left
[13:05] <TiMBuS> and frankly i dont know how 'use strict/no strict' would be "properly" implemented anyway so i guess i ditched the idea =/

[13:07] <masak> could someone make an IRC client module in Perl 6 that makes this possible? http://gist.github.com/189041

[13:07] <TiMBuS> i get the feeling this was pointed at me?

[13:07] <masak> no, at everybody.

[13:08] <masak> especially at the lurkers. come one people! :)

[13:08] <masak> s/one/on/

[13:08] <TiMBuS> well my irc bot already does that but, not so perl 6-y

[13:08] <masak> oh, so maybe my idea isn't so new, then.

[13:09] <masak> I like that my example code is very, um, succinct.

[13:09] <TiMBuS> it is

[13:09] <masak> it should be possible to write something like that.

[13:09] <masak> maybe even today.

[13:09] <TiMBuS> i use mmd to trigger events, based on the method name

[13:10] <masak> I stole the regex idea from Tene++'s LolDispatch.

[13:10] *** ihrd joined
[13:10] <moritz_> you could use traits

[13:10] <masak> LolDispatch does.

[13:10] *** ihrd left
[13:10] <moritz_> method foo handles rx{...} {...}

[13:10] *** ejs1 joined
[13:10] <masak> hm, even better.

[13:10] *** rgrau left
[13:11] <TiMBuS> i just used where

[13:11] <masak> actually, the hard part is writing the IRC client itself, I wager.

[13:11] <TiMBuS> multi method on_message ( $msg where { $^msg ~~ /^\!8ball/ }, $from, $channel )

[13:11] <masak> um.

[13:11] <masak> oh! in a signature. cool!

[13:11] <TiMBuS> i dont know enough about perl6 :(

[13:12] <moritz_> the problem with 'where' is that it's only an epsilon tighter

[13:12] <masak> TiMBuS: if you want to, you can write $msg where /.../

[13:12] <masak> I think.

[13:12] <moritz_> so when sombody writes Str $msg, it always wins

[13:12] <TiMBuS> i think i tried that and it didnt work =/

[13:12] <masak> moritz_: well then, write Str $msg where /.../ :)

[13:12] <TiMBuS> heh

[13:12] <masak> TiMBuS: I think it should.

[13:12] <TiMBuS> lemme see

[13:14] <TiMBuS> i should probably make the bot join this irc i guess

[13:15] <moritz_> TiMBuS: beware, you'll get all sorts of feedback ;-)

[13:15] <TiMBuS> aa

[13:15] <masak> we have an advanced taste in bots in here.

[13:16] <masak> because we've used them a lot.

[13:16] <TiMBuS> hey the where thing worked

[13:16] <masak> :)

[13:16] <moritz_> s/advanced/particular/ ;-)

[13:17] *** ejs1 left
[13:17] *** sri_kraih joined
[13:17] <TiMBuS> well, you can suggest things to add to it if you want

[13:17] <TiMBuS> the bot is fairly stunted in that it can't thread

[13:17] <masak> moritz_: http://www.angryflower.com/advan.html :)

[13:18] <Tene> masak: the problem with writing an IRC client is that Parrot doesn't have async IO support yet.

[13:18] <masak> ah.

[13:18] <masak> well, that kinda puts a damper on things.

[13:18] <TiMBuS> and yeah that too

[13:18] <TiMBuS> one irc server only

[13:18] <masak> how come it doesn't? all I hear about with Parrot is asynch IO.

[13:19] <moritz_> asnch != threaded, in general

[13:19] <TiMBuS> i wanted to make a twitter bot but it would ping out if it had to wait for the site

[13:19] <Tene> masak: there's other IO cleanups that need to happen first, or something...

[13:19] <moritz_> POE is all asynchron, but single threaded

[13:20] *** Jedai joined
[13:20] <TiMBuS> how does it avoid locking?

[13:20] *** Jedai left
[13:20] *** ejs left
[13:20] <devin> non-blocking i/o

[13:20] *** ejs1 joined
[13:20] <Tene> exactly

[13:21] *** psychoschlumpf left
[13:21] *** meteorjay joined
[13:23] *** punter joined
[13:23] *** Jedai joined
[13:23] <TiMBuS> hm. slightly back to my topic. moritz_ im using .* to dispatch events. so would Str $msg still override plain ol $msg

[13:24] *** punter left
[13:24] <TiMBuS> or would they both get called

[13:27] *** Jedai left
[13:27] <masak> sounds like a job for science!

[13:27] <masak> rakudo: class A { method x($msg) { say "untyped $msg" }; method x(Str $msg) { say "Str-typed $msg" } }; A.new.*x("OH HAI")

[13:27] <p6eval> rakudo a969c9: OUTPUT«Str-typed OH HAI␤»

[13:27] <masak> there you go. :)

[13:27] <TiMBuS> aw

[13:28] <TiMBuS> wait you didnt declare them multi

[13:28] <masak> o_O

[13:28] <masak> hold on.

[13:28] <masak> rakudo: class A { multi method x($msg) { say "untyped $msg" }; multi method x(Str $msg) { say "Str-typed $msg" } }; A.new.*x("OH HAI")

[13:28] <p6eval> rakudo a969c9: OUTPUT«Str-typed OH HAI␤untyped OH HAI␤»

[13:28] <TiMBuS> woot

[13:28] <jnthn> Yes, .* calls all multi variants too :-)

[13:29] * jnthn has weak-fi, may vanish at any moment

[13:29] *** molaf joined
[13:29] <TiMBuS> its practically made for an event model

[13:30] <masak> the comments in proto will befuddle future archeologists: "#       YES: cheese speleology!"

[13:30] <mberends> YES!

[13:30] *** am0c left
[13:31] <masak> I propose a new unit. it measures poetic weirdness.

[13:31] <masak> I call it... the _why.

[13:31] <masak> proto just increased its poetic weirdness by a few milli_whys.

[13:32] <moritz_> #69202 is really obscure, masak

[13:32] <moritz_> masak++

[13:32] * jnthn wonders if he even wants to look

[13:32] <masak> yes, that one was very strange.

[13:33] *** SmokeMachine joined
[13:33] *** pdcawley_ joined
[13:33] <TiMBuS> masak, so how did you expect .reply to work? i currently use '.msg(@replies.pick, $channel)' but i assume your example assumes the object will instead keep the state of the current event... which is not a bad idea

[13:33] <masak> it took a separate git branch to isolate it.

[13:33] <masak> TiMBuS: I just stuffed every thing away in the Session object $_ in the signature.

[13:33] <TiMBuS> oooh right

[13:34] * masak beams

[13:34] <jnthn> masak: wow, ouch

[13:34] <masak> jnthn: any idea why?

[13:34] <jnthn> Yeah.

[13:34] <masak> that's even sicker. :)

[13:35] <jnthn> ;-)

[13:35] *** pdcawley left
[13:35] *** pdcawley_ is now known as pdcawley

[13:35] <jnthn> It's because sig construction builds a junction of the types at the moment.

[13:35] <jnthn> And I guess for some reason it's finding your all method. 

[13:35] <jnthn> :-/

[13:35] <masak> ah!

[13:35] <masak> yes, I believe there's a Parrot bug that confuddles methods and global subs.

[13:36] <jnthn> Yeah, may be Parrot bug too.

[13:36] <masak> yuck.

[13:36] <jnthn> I'm not sure *why* it's happening, just that it's calling your all instead.

[13:36] <jnthn> So you end up trying to get the $!a of a Str.

[13:36] <masak> fortunately, all our problems will go away by April... :/

[13:37] <masak> jnthn: note that I'm not even calling A.x

[13:37] <jnthn> Given that signature creation is getting an epic re-write soon anyway, this one probably will be. :-)

[13:37] <jnthn> Yeah, the sig object is built before then.

[13:37] <jnthn> erm, sorry

[13:37] <jnthn> is built at BEGIN time

[13:38] *** ejs2 joined
[13:38] <ruoso> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say $a.find_possible_candidates(1,2);

[13:38] <p6eval> rakudo a969c9: OUTPUT«Attributes of type 'MMD_Cache *' cannot be subclassed from a high-level PMC.␤in Main (/tmp/aojiQ2pM9V:0)␤»

[13:39] * ruoso just checking...

[13:39] *** agentzh1 joined
[13:39] *** agentzh left
[13:39] *** xinming left
[13:39] <jnthn> heh

[13:39] <jnthn> not sure what to do about that one.

[13:39] *** pdcawley left
[13:40] <ruoso> having a way to get the entire list of candidates would probably be a viable workaround

[13:40] *** pdcawley joined
[13:40] <dalek> rakudo: 4b141a8 | mberends++ | tools/test_summary.pl:

[13:40] <dalek> rakudo: [tools/test_summary.pl] implement some simple relative benchmarking

[13:40] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/4b141a8efa9616ef57afaa6d9b4eee2f3cac62cf

[13:40] <jnthn> ruoso: .candidates 

[13:40] <jnthn> ruoso: you can probably iterate over that.

[13:41] <jnthn> we could probably do with getting such thingies into the spec at some point.

[13:41] <ruoso> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say join ", ": grep { $_.signature ~~ :(1,2) }, $a.candidates

[13:41] *** agentzh1 left
[13:41] *** agentzh joined
[13:41] <p6eval> rakudo a969c9: OUTPUT«Confused at line 2, near ": grep { $"␤in Main (src/gen_setting.pm:3469)␤»

[13:41] <ruoso> oops

[13:41] <ruoso> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say join ", ", grep { $_.signature ~~ :(1,2) }, $a.candidates

[13:41] <p6eval> rakudo a969c9: OUTPUT«Null PMC access in type()␤in Main (/tmp/k770kDLnAm:2)␤»

[13:41] <ruoso> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say join ", ", $a.candidates

[13:41] <p6eval> rakudo a969c9: OUTPUT«Null PMC access in type()␤in Main (/tmp/5ntl23v2XH:2)␤»

[13:42] <jnthn> Hmm.

[13:42] <jnthn> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say $a.candidates.perl

[13:42] <p6eval> rakudo a969c9: OUTPUT«Null PMC access in find_method()␤in Main (/tmp/66K19yHqOh:2)␤»

[13:42] <jnthn> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say $a.candidates

[13:42] <p6eval> rakudo a969c9: OUTPUT«Null PMC access in type()␤in Main (/tmp/JSNebHBeLm:2)␤»

[13:42] <jnthn> ...eww...

[13:43] <ruoso> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say "Alive"

[13:43] <p6eval> rakudo a969c9: OUTPUT«Alive␤»

[13:43] <masak> jnthn: rakudobug?

[13:44] <jnthn> masak: npmca always is

[13:44] *** simcop238 joined
[13:44] <masak> :)

[13:44] * masak goes through the motions

[13:44] <jnthn> Feel free to submit; I'd like to try and get some "official" introspection interface agreed on for multis though.

[13:45] <jnthn> Then we can have spectests.

[13:45] <masak> \o/

[13:45] <jnthn> And then it's more worthwhile fixing it (because we'll then be sure not to break it again...)

[13:45] <ruoso> I think .candidates is consusus

[13:45] <jnthn> ruoso: consensus?

[13:46] <mberends> masak: I'm thinking of refactoring proto into MVC form. Ecosystem.pm is the Model, and Installer is View and Controller. How about separating those roles?

[13:46] <jnthn> ruoso: Agree though that it's fine.

[13:46] <masak> mberends: soudns good.

[13:46] <mberends> :)

[13:46] <masak> that's how I think about it anyway.

[13:46] <Matt-W> as in &my-multi.candidates ?

[13:47] <ruoso> jnthn, I mean, having $multi.candidates as spec is "general agreement"

[13:47] *** ejs1 left
[13:47] <ruoso> consensus in portuguese only means that

[13:47] *** simcop2387 left
[13:47] <jnthn> ruoso: OK, then we're agreeing. :-)

[13:50] <masak> I'm getting back to my usual level of bug submitting. there's been a drought lately, for unknown reasons.

[13:51] * ruoso adding a new section on S06 for Introspection

[13:51] <jnthn> masak: getting harder to find bugs? ;-)

[13:52] <masak> jnthn: the past month indicates it is. the past two days indicate it isn't. :)

[13:52] <jnthn> ruoso: Great. I want to try and get some filling out of and consensus on signature introspection at some point in the future too.

[13:52] <jnthn> (now now...)

[13:54] * jnthn enjoys probably the most spacious room he's going to have in his entire stay in Japan.

[13:54] <Matt-W> where are you?

[13:54] <jnthn> Matt-W: Nara.

[13:54] <jnthn> Which after Kyoto is a wonderfully peaceful city.

[13:54] <Matt-W> :)

[13:54] <Matt-W> Not heard of it

[13:54] <jnthn> It was once the capital.

[13:55] <jnthn> But these days, quite small and not so significant.

[13:55] <jnthn> Thus I only decided to have a single night here. Turns out it's really quite a nice place though.

[13:55] <jnthn> Not so much jaw-dropping sights, but unlike Kyoto it's fairly consistently nice.

[13:56] <jnthn> Kyoto has some awesome things to see, but walking between them it's kinda "meh".

[13:56] <jnthn> So I spent my time jumping between the nice bits. Here it was nice to just stroll, sit in a park, etc.

[13:56] *** Jedai joined
[13:57] <masak> I like such places.

[13:57] <masak> Lisbon was great for walking, too.

[13:58] *** agentzh left
[13:58] <devin> the best way to get around kyoto is taxi, bicycle, or bus

[13:58] <devin> you can rent bicycles

[14:00] <masak> mberends: tell me a bit about projects.state

[14:00] <ruoso> jnthn, I just realized we could rename $multi.find_possible_candidates to $multi.cando

[14:01] <jnthn> ruoso: find_possible_candidates was really an internal-ish thing that I never expected to become public API anyway, but yes, we could rename it.

[14:01] <jnthn> devin: The subway was vaguely useful too.

[14:01] <jnthn> But quite limited in coverage.

[14:03] *** FCO joined
[14:04] <pugs_svn> r28284 | ruoso++ | [spec/S06] add a section for Introspection, with three proposed methods... 

[14:04] <ruoso> jnthn, ^^

[14:05] <ruoso> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say $a.signature

[14:05] <p6eval> rakudo 4b141a: OUTPUT«No signature found␤␤»

[14:06] <ruoso> TimToady, you probably want to take a look at the change I made in S06

[14:12] <masak> rakudo: 3,

[14:12] <p6eval> rakudo 4b141a: OUTPUT«No result object␤in Main (src/gen_setting.pm:2815)␤»

[14:12] <masak> was this ever reported?

[14:12] <finanalyst> rakudo: my $y=3; for ^$y { .say }; my %x=<a b c> Z 1,3,3; $y = %x.delete('b'); say 'new ' ~ $y; for ^$y { .say }

[14:13] <p6eval> rakudo 4b141a: OUTPUT«0␤1␤2␤new 3␤0␤»

[14:13] * masak submits rakudobug

[14:14] <finanalyst> masak: is there any reason the second ^$y should not be a range?

[14:15] <masak> finanalyst: don't think so.

[14:15] <finanalyst> so this is a bug?

[14:15] <masak> rakudo: my %x=<a b c> Z 1,3,3; my $y = %x.delete('b'); say $y.WHAT;

[14:15] <p6eval> rakudo 4b141a: OUTPUT«Array()␤»

[14:15] *** agentzh joined
[14:15] <masak> rakudo: my %x=<a b c> Z 1,3,3; my $y = %x.delete('b'); say (^$y).WHAT;

[14:16] <p6eval> rakudo 4b141a: OUTPUT«Range()␤»

[14:16] <ruoso> there has been a recent spec change in that respect, hasn't it?

[14:16] <masak> rakudo: my %x=<a b c> Z 1,3,3; my $y = %x.delete('b'); say (^$y).perl;

[14:16] <p6eval> rakudo 4b141a: OUTPUT«0..^1␤»

[14:16] <masak> ah.

[14:16] <masak> it's an empty range.

[14:16] <masak> I don't know whether it's a bug or not.

[14:17] <finanalyst> rakudo: my %x=<a b c> Z 1,3,3; my $y = %x.delete('b'); say $y

[14:17] <p6eval> rakudo 4b141a: OUTPUT«3␤»

[14:17] <finanalyst> so what changes? 

[14:17] <masak> finanalyst: it looks like a number when printed, but it's an Array.

[14:17] <masak> see above.

[14:18] <finanalyst> should it be an Array?

[14:18] <masak> that's the 1M$ question.

[14:18] <carlin> JimmyZ++ # following up that bug that I never bothered too ... I should probably do something about the others

[14:19] <finanalyst> rakudo: my %x=<a b c> Z 1,3,3; my $y = + %x.delete('b'); say $y.WHAT

[14:19] <Tene> rakudo: $*msg = "O HAI"; say $*msg;

[14:19] <p6eval> rakudo 4b141a: OUTPUT«Num()␤»

[14:19] <p6eval> rakudo 4b141a: OUTPUT«Contextual $*msg not found␤␤»

[14:20] <carlin> rakudo: my $socket = IO::Socket::INET.socket(2,1,6); $socket.bind('127.0.0.1', 4242); $socket.listen(); $socket.recv(); while $socket.accept() {};

[14:20] <p6eval> rakudo 4b141a: OUTPUT«Null PMC access in get_bool()␤in Main (/tmp/RDL9C5b1po:2)␤»

[14:20] *** agentzh2 joined
[14:20] <finanalyst> my %x=<a b c> Z 1,3,3; $y = %x.delete('b'); say 'new ' ~ $y; for ^+$y { .say }

[14:20] <carlin> Known?

[14:20] *** SmokeMachine left
[14:20] <masak> carlin: probably not. feel free to report it.

[14:20] <finanalyst> rakudo: my %x=<a b c> Z 1,3,3; $y = %x.delete('b'); say 'new ' ~ $y; for ^+$y { .say }

[14:21] <p6eval> rakudo 4b141a: OUTPUT«Symbol '$y' not predeclared in <anonymous> (/tmp/KpGhPVjw0s:2)␤in Main (src/gen_setting.pm:3469)␤»

[14:21] <carlin> masak: Okay, sure :)

[14:21] <finanalyst> rakudo: my %x=<a b c> Z 1,3,3; my $y = %x.delete('b'); say 'new ' ~ $y; for ^+$y { .say }

[14:21] <carlin> How about ...

[14:21] <p6eval> rakudo 4b141a: OUTPUT«new 3␤0␤»

[14:21] <carlin> rakudo: grammar foo { rule TOP { 'lorem' | <.panic> }; method panic { die "The sky is falling!"; }; }; foo.parse('blah');

[14:21] <p6eval> rakudo 4b141a: OUTPUT«Null PMC access in find_method()␤in method foo::panic (/tmp/DbgEqS8ZnV:2)␤called from regex foo::TOP (/tmp/DbgEqS8ZnV:2)␤called from Main (/tmp/DbgEqS8ZnV:2)␤»

[14:21] *** finanalyst left
[14:21] <masak> carlin: never seen it before. that's two, way to go! carlin++

[14:22] <masak> package them up nicely and send them to RT.

[14:22] <carlin> Right-e-o. One more, not sure what is supposed to happen here

[14:23] <jnthn> yeah, I hate it when people package bugs up carelessly

[14:23] <jnthn> :-)

[14:23] <carlin> rakudo: class Alpha { has $!beta; method gamma { my $!beta = 'omega'; while $!beta { say 'Delta'; }; }; }; my $a = Alpha.new; $a.gamma;

[14:23] <p6eval> rakudo 4b141a:  ( no output )

[14:24] <carlin> Or even

[14:24] <masak> my $!beta; o_O

[14:24] <carlin> rakudo: class Alpha { has $!beta; method gamma { $!beta = 'omega'; say $!beta; }; }; my $alpha = Alpha.new(beta => 'delta'); $alpha.gamma;

[14:24] <p6eval> rakudo 4b141a: OUTPUT«omega␤»

[14:25] <masak> carlin: that last one looks fine by me.

[14:25] <carlin> rakudo: class Foo { method bar { my $!baz = 'lorem'; say $!baz; }; }; Foo.bar;

[14:25] <p6eval> rakudo 4b141a: OUTPUT«No such attribute '$!baz'␤in method Foo::bar (/tmp/VN8Cw2TD55:2)␤called from Main (/tmp/VN8Cw2TD55:2)␤»

[14:25] <masak> I don't think 'my $!attr;' should be allowed in methods.

[14:26] <carlin> Yeah, rakudo just silently ignores it

[14:26] <masak> maybe that can be submitted as a ticket.

[14:28] <carlin> Oh and

[14:29] <carlin> my $s = IO::Socket::INET.new; $s.open('127.0.0.1', 123456); $s.send('foo'); say "Lorem ipsum"; # try it from the REPL, evalbot seems to handle it

[14:29] <carlin> rakudo: my $s = IO::Socket::INET.new; $s.open('127.0.0.1', 123456); $s.send('foo'); say "Lorem ipsum"; # try it from the REPL, evalbot seems to handle it

[14:29] <p6eval> rakudo 4b141a: OUTPUT«Lorem ipsum␤»

[14:32] *** sm^^^ joined
[14:35] <carlin> here the REPL silently exits

[14:37] *** agentzh left
[14:40] *** Psyche^ joined
[14:41] *** sm` left
[14:43] *** nihiliad joined
[14:43] *** carlin left
[14:44] <mberends> masak: er, projects.state will store metadata about projects that proto has worked with locally, and which cannot be obtained from the project files themselves. It is formatted like projects.list so that the same routines handle reading and writing. The possible values of state are to be laid down by a specially convened bikeshed meeting.

[14:44] *** riffraff joined
[14:44] <masak> oki.

[14:44] <moritz_> mberends++ # 'specially convened bikeshed meeting'

[14:45] *** kidd_ joined
[14:45] <masak> as long as proto itself can be installed, I'm fine with that.

[14:46] <mberends> ...but never uninstalled

[14:47] <masak> :)

[14:49] * mberends never thought about installing proto itself ;)

[14:50] <masak> hm, as soon as I said it I started questioning whether it's that important...

[14:50] <masak> I think I'm getting too attached to proto. I shouldn't let that happen.

[14:51] *** TiMBuS left
[14:52] * mberends raps masak over the knuckles

[14:52] * masak whimpers

[14:52] * Matt-W throws custard

[14:53] <masak> o_O

[14:53] <mberends> yum!

[14:53] <masak> sigh, someone re-Tweeted the Perl 6/DNF joke. :(

[14:53] <mberends> don't let them bait you

[14:54] <masak> mberends: i.e. don't reply at all, just let them be?

[14:54] *** __ash__ joined
[14:54] <mberends> yeah, they may be out to taunt you

[14:54] *** KyleHa joined
[14:54] *** __ash__ left
[14:55] * mberends isn't really paranoid, they really _are_ out to get us

[14:56] <masak> mberends: I've had that thought too. it's something Heisenbergian over it all: if I and others start a grassroots drive to defend/hype Perl 6 on Twitter, then people might catch on and try to actively taunt us.

[14:56] <mberends> :)

[14:57] *** jan__ left
[14:57] *** Patterner left
[14:57] *** Psyche^ is now known as Patterner

[14:57] <masak> but there are a couple of successes already. I especially like the "eeew, Perl 6 has hyphens in identifiers" guy.

[14:57] <TimToady> maybe I should get quietfanatic to rename is gaming platform to DNF...

[14:57] <TimToady> *his

[14:57] <masak> I replied "it's got apostrpohies too :)"

[14:58] <masak> and the guy actually sent a nice tweet back, saying "thanks! apostrophes, eh... well i suppose one benefit is that perl poetry will look more like english ;)"

[14:58] <Matt-W> Does it?

[14:58] <Matt-W> I thought apostrophes were gone...

[14:58] <TimToady> usually the best approach is something self-deprecating and aikidoish, unless the best approach is to ignore it :)

[14:58] <masak> rakudo: my $ka'pla = 42; say "Alive!"

[14:59] <p6eval> rakudo 4b141a: OUTPUT«Alive!␤»

[14:59] <TimToady> apostrophes as :: is gone

[14:59] <TimToady> it's just part of the name

[14:59] *** sri_kraih_ joined
[14:59] <Matt-W> aaah okay

[14:59] <Matt-W> Getting my wires crossed

[14:59] <TimToady> std: $ain't

[14:59] <p6eval> std 28284: OUTPUT«Potential difficulties:␤  Variable $ain't is not predeclared at /tmp/TnwknAz8iq line 1:␤------> [32m$ain't[33m⏏[31m<EOL>[0m␤ok 00:02 37m␤»

[14:59] <Matt-W> So I can call my variables $arthur's-weight

[14:59] <masak> yup.

[14:59] <Matt-W> woooooo

[14:59] <TimToady> in both cases there must be a letter following

[14:59] <masak> $arthur's-wizard

[15:00] <TimToady> though people keep asking for trailing '

[15:00] <masak> but personally, I'd just go with $merlin.

[15:00] *** Exodist joined
[15:00] <masak> TimToady: don't cave in! :)

[15:00] <Matt-W> I think trailing would be scary

[15:00] <Matt-W> However

[15:00] <Matt-W> Haskell programmers would love it

[15:00] <Matt-W> because they like calling functions things like f'

[15:01] <Matt-W> or they would, if Haskell would let them

[15:01] <Matt-W> they do in their research papers

[15:01] <Tene> TimToady: aw, c'mon...

[15:01] <Tene> or should that be: cmon'

[15:02] <Matt-W> no it should be c'mon

[15:02] <TimToady> I wish I knew what I was doin'

[15:02] <Matt-W> you can't respell things just to make a point

[15:02] <Matt-W> unless it's about spelling, I suppose

[15:02] *** justatheory joined
[15:02] <Matt-W> suddenly feeling quite keen on the idea of being able to say sub f'() { }

[15:03] <Matt-W> this is probably an evil urge and should be dealt with at once

[15:03] <mdxi> there's also nothing to contract there :)

[15:03] *** hanekomu left
[15:03] <TimToady> it's short for ", no, the other one"

[15:03] <Tene> ♪ I've got a theory... ♪

[15:05] *** sri_kraih__ joined
[15:05] <Matt-W> Tene: no, it's not a dancing demon

[15:06] <Tene> Yeah, something isn't right there.

[15:06] <mdxi> geh, can you imagine if, because of the apostrophe which represents the elision of the terminal G in many English words, people started putting them after words which actually *end* in an N, the way they seem to have decided that the genitive apostrophe-S actually means "WARNING: AN S IS APPROACHING!"

[15:06] <Tene> ...

[15:06] <mdxi> now i'm depressed

[15:07] <Tene> Me too.

[15:07] * sjohnson pats both you guys on the back

[15:07] <sjohnson> there there

[15:07] <masak> :)

[15:07] *** agentzh joined
[15:08] <Matt-W> haha

[15:08] <Matt-W> I tweeted about apostrophes in identifiers

[15:08] <TimToady> hugme: hug mdxi

[15:08] * hugme hugs mdxi

[15:09] <Matt-W> a friend replies that's nothing, you can have spaces in PHP identifiers... although you probably shouldn't

[15:09] <masak> moritz_++ # http://perlgeek.de/blog-en/perl-6/when-we-reach-100-percent-we-did-something-wrong.html

[15:09] * Matt-W -> singing lesson &

[15:09] <moritz_> thanks

[15:09] <moritz_> masak: it seems you're quite a bit behind with your bagblogging ;-)

[15:10] <masak> moritz_: oh, you have no idea. :(

[15:10] <masak> moritz_: it's been a week since I opened my feed reader. I'll _get_ to these tabs in little over two months.

[15:10] *** riffraff left
[15:10] <masak> yup, I'm a packrat.

[15:11] <moritz_> Rat.pack('I2')

[15:12] *** agentzh left
[15:12] *** agentzh1 joined
[15:14] <diakopter> std: my $_'_

[15:14] <p6eval> std 28284: OUTPUT«ok 00:02 37m␤»

[15:15] <TimToady> std: my $_-_-_-_-_-_-_-_-_-_-_-_

[15:15] <p6eval> std 28284: OUTPUT«ok 00:02 37m␤»

[15:16] <Juerd> Is _ considered alphanumeric or has the spec changed?

[15:16] <diakopter> yes?

[15:16] <Juerd> Or have I remembered it wrong :)

[15:17] <moritz_> _ is alphanumeric

[15:17] <masak> strange, but true.

[15:18] *** sri_kraih left
[15:18] *** sri_kraih__ is now known as sri_kraih

[15:18] <Juerd> Is it alpha or number? :)

[15:19] <masak> alpha, methinks.

[15:20] <masak> good news! spectesting only took 71 minutes today.

[15:21] * masak goes home to prepare for tonight's pancake party

[15:21] <masak> o/

[15:21] *** masak left
[15:21] <diakopter> >o

[15:22] <moritz_> pancakes++

[15:24] <sjohnson> pancakes?

[15:24] <sjohnson> heh

[15:24] <sjohnson> i hate it when people criticize me for eating pancakes at night

[15:24] <sjohnson> they looked at me like they wanted to burn me at the stake

[15:25] <TimToady> sjohnson: call them Swedish Pancakes and then it's perfectly acceptable

[15:25] <devin> it's always morning somewhere

[15:25] *** agentzh2 left
[15:25] <TimToady> or if they're round pancakes, call them ebelskivers

[15:25] <TimToady> s/round/spherical

[15:27] <sjohnson> heh

[15:33] *** zpmorgan joined
[15:33] *** ejs2 left
[15:36] *** sri_kraih_ left
[15:39] *** pdcawley left
[15:41] <mdxi> pancakes are *always* acceptible, as are waffles

[15:43] <TimToady> mdxi: except for those of us who are allergic to them...

[15:44] *** M_o_C left
[15:44] <mdxi> i was thinking within a social context, not a medical one -- my apologies

[15:46] <TimToady> 'sokay, I believe in context sensitivity :)

[15:46] <TimToady> half my jokes come from taking things out of context

[15:46] *** desertm4x_ joined
[15:46] * sjohnson postpones the surprise pancake party

[15:46] *** desertm4x left
[15:51] *** mofino joined
[15:53] *** snearch joined
[15:56] *** agentzh joined
[15:56] *** agentzh1 left
[16:07] *** agentzh left
[16:07] *** agentzh joined
[16:14] *** ejs joined
[16:18] *** azawawi joined
[16:20] * araujo didn't know TimToady told jokes

[16:21] <azawawi> hi

[16:21] <phenny> azawawi: 10:19Z <moritz_> tell azawawi I think Moose is fixed now on feather1

[16:21] <azawawi> moritz_: thank you

[16:21] <azawawi> moritz_++

[16:21] <azawawi> moritz_: ping

[16:23] <pugs_svn> r28285 | lwall++ | [viv] always assume --pos, make args entries for diakopter++ 

[16:23] *** Exodist left
[16:25] *** cmv left
[16:28] <diakopter> whee

[16:28] <sjohnson> hey

[16:30] <diakopter> hey

[16:31] * diakopter retweets my own tweet

[16:34] *** donaldh left
[16:36] *** ejs1 joined
[16:36] *** ejs1 left
[16:37] *** jan_ joined
[16:39] <moritz_> azawawi: pong

[16:39] *** [particle] left
[16:40] <azawawi> moritz_: i nearly finished my Six win32 updater for Padre::Plugin::Perl6 :)

[16:41] <moritz_> what does it do?

[16:41] <azawawi> moritz_: with it you can select rakudo's release that you need to play with... 

[16:41] <azawawi> moritz_: and it downloads it and installs it to c:\strawberry\six...

[16:41] <moritz_> nice

[16:42] <azawawi> moritz_: i need your help about a couple of things regarding seattle's announcement

[16:42] <moritz_> shoot

[16:43] <azawawi> moritz_: '=$handle' is deprecated in favor of '$handle.get' (one line), do rakudo actually output a warning that it is deprecated?

[16:43] <azawawi> moritz_: do/does

[16:43] <moritz_> rakudo: say =$*IN

[16:43] <p6eval> rakudo 4b141a: OUTPUT«prefix:<=> has been superseded by $handle.lines and $handle.get␤in Main (/tmp/na5RKIPFbF:2)␤»

[16:43] <sjohnson> just told my boss that i am starting to hate my job and life because anything that isn't Perl is not fun to program in

[16:44] <moritz_> sjohnson: what did he say?

[16:44] *** stephenlb joined
[16:44] <sjohnson> he seemed to tell i wasn't happy at work

[16:45] <sjohnson> he might let me go, which would cause a dire catastrophe in my life

[16:45] <sjohnson> is it okay to hate javascript?

[16:45] <diakopter> no

[16:45] <sjohnson> i am wondering if i am the only one, and soemthing is wrong with me

[16:45] <diakopter> :)

[16:45] <TimToady> you should program JS using Perl 6, is all...

[16:45] <diakopter> or vice versa.

[16:46] <azawawi> std: say =$*IN;

[16:46] <TimToady> which is what diakopter is workin on at the moment

[16:46] <p6eval> std 28285: OUTPUT«[31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix = instead at /tmp/0sjFtIcjgW line 1:␤------> [32msay =[33m⏏[31m$*IN;[0m␤FAILED 00:02 37m␤»

[16:46] <diakopter> and fglock

[16:46] <sjohnson> i wonder if i should phon a suicide hotline

[16:46] <sjohnson> phone*

[16:46] <sjohnson> they probably wouldn't understand my complaint

[16:46] <TimToady> if you're thinking suicidal thoughts, then yes

[16:47] <TimToady> if you're on antidepressants, you should call your doctor and talk about it

[16:48] <sjohnson> ahh i would never kill myself, just get pretty bummed out from time to time

[16:48] <TimToady> if you're simply *unhappy*, then probably not

[16:48] *** _jaldhar left
[16:48] <sjohnson> having to work with PHP and javascript 90% of the day, everyday

[16:48] <TimToady> it's quite possible to be unhappy without being clinically depressed

[16:49] <azawawi> moritz_: perfect, now i have a couple of examples regarding Six updater

[16:49] <azawawi> moritz_: thanks, moritz_++

[16:49] <TimToady> it's also quite possible to be clinically depressed and blame it on your unhappiness :)

[16:49] <mofino> sjohnson, at least you have that, you could be stuck with a lifetime of manual labour

[16:49] <mofino> not that there is anything wrong with manual labour...

[16:49] <huf> i beg to differ

[16:49] <sjohnson> true, i did that a lot in highschool

[16:50] <diakopter> sjohnson: let's get to the bottom of your JS hatred. :) What about JS gets to you? I suspect there's a way to Perlify it...?

[16:50] <sjohnson> got paid dick all and was made fun of all the time for being smarter than them :)

[16:50] <mberends> perldoc Timer::Hires

[16:50] <sjohnson> things like declaring $string = '';

[16:50] <sjohnson> to instantiate a string

[16:50] <mberends> er, wrong window :|

[16:50] <sjohnson> and forgetting to do that, and everything hanging if i do a += opperand

[16:51] <sjohnson> variables being null when passed by functions having to always be "babysitted"

[16:51] <sjohnson> in the functions themselves

[16:52] <mofino> doesn't sound so horrendeous

[16:52] <diakopter> anything else?

[16:52] *** azawawi left
[16:52] <mdxi> sjohnson: have you thought of something like shunting yourself sideways a little, like starting a test suite for your javascript codebase? becoming the Testing Guru or something like that?

[16:52] <pugs_svn> r28286 | moritz++ | [new perl6.org] design fixes; more camlia goodness 

[16:53] <sjohnson> window.top.window. type scoping calls

[16:53] <mdxi> sjohnson: and are you using a tool like firebug to help with the debugging?

[16:53] <sjohnson> yes, i also hate firebug

[16:53] <pugs_svn> r28287 | moritz++ | [new perl6.org] added images, and index.html 

[16:53] <diakopter> sjohnson: me 2

[16:53] <mdxi> nevermind that, then :)

[16:53] <sjohnson> trying to edit CSS properties in firebugs from its interface is like pulling teeth

[16:53] <diakopter> sjohnson: do you use a Windows machine?

[16:53] <sjohnson> yes, windows XP

[16:54] <diakopter> have you tried IE8's JS debugger?  it's *many* times faster than firebug, and much much easier to navigate imho.

[16:54] <sjohnson> interesting...

[16:54] <sjohnson> does it come with IE8?

[16:54] <diakopter> yeah

[16:54] <diakopter> hit F12

[16:55] <pugs_svn> r28288 | moritz++ | [new perl6.org] fix link 

[16:55] <diakopter> the function call profiler with it is also excellent

[16:55] <moritz_> what I don't like about js is that new blocks don't introduce new scopes

[16:56] <diakopter> every time I try to use the JS "dev tools" in Safari, Chrome, or Firefox, I'm severely disappointed by breakage, ugliness, and slowness, and end up going back to IE8's debugger.

[16:57] <diakopter> but I keep giving the latest builds' another chance every week or two

[16:57] <diakopter> :)

[16:57] <mdxi> (opera has one now, too, called dragonfly. don't know anything about its quality or workings though)

[16:57] <diakopter> builds no trailing apostrophe

[16:57] <diakopter> well, maybe trailing apostrophe with implied "dev tools"

[16:57] <moritz_> .oO( trailing catastrophy )

[16:58] <sjohnson> diakopter: will try

[16:58] <moritz_> http://sandbox.rakudo.de/ (early) preview of the new perl6.org site

[16:58] <sjohnson> firebug's clunkyness definitely was part of my JS rant

[16:59] <diakopter> mdxi: I haven't tried Opera's... thanks for the reminder about it.

[17:03] <TimToady> moritz_: nice.  maybe the MORE links should be white

[17:04] <TimToady> and possibly right justified

[17:04] <TimToady> or centered

[17:04] <sjohnson> TimToady: do you like any other languages besides Perl?

[17:05] <TimToady> English is pretty okay

[17:05] <TimToady> Japanese is kinda fun

[17:06] <moritz_> TimToady: I'll see how that looks

[17:06] <sjohnson> i like Japanese a lot too

[17:06] <sjohnson> it's "cute"

[17:07] <diakopter> I tried speaking in tongues once, but I glossed over its lexicon too quickly.

[17:09] * araujo thinks japanese girls are cute too

[17:10] <mdxi> moritz_: nice. i like the splitting-out of things

[17:10] *** cdarroch joined
[17:12] <pugs_svn> r28289 | moritz++ | [new perl6.org] make the box headings link to the sub pages 

[17:12] <moritz_> mdxi: thanks

[17:12] <sjohnson> pugs_svn's + sign is cute

[17:12] <sjohnson> :)

[17:12] <moritz_> I'm not sure what to do with the download box

[17:13] *** alexn_org left
[17:13] *** ChanServ sets mode: +o pugs_svn

[17:14] *** syntheticore joined
[17:14] <moritz_> I hope you looked at the sub pages too (only some of them exist right now)

[17:15] *** [particle] joined
[17:16] *** M_o_C joined
[17:16] <mdxi> i did

[17:17] *** syntheticore left
[17:20] <pugs_svn> r28290 | moritz++ | [new perl6.org] center the Â»MOREÂ« links, make them white. TimToady++ 

[17:20] *** syntheticore joined
[17:20] *** moritz_ sets mode: -o pugs_svn

[17:21] *** moritz_ sets mode: +v pugs_svn

[17:23] *** syntheticore left
[17:25] <TimToady> moritz_: no fun :)

[17:26] *** syntheticore joined
[17:26] <moritz_> TimToady: I know :(

[17:28] <ruoso> TimToady, I know you probably saw it already... but I've made some changes in S06 that need your review....

[17:30] *** syntheticore left
[17:30] <moritz_> ruoso: the bindability check can already be made with smart matching against .signature

[17:31] <ruoso> moritz_, it's a bit more than that... it's about getting the list of possible candidates

[17:32] * ruoso assuming moritz_ was talking about .cando($capture)

[17:33] <diakopter> rakudo: say(eval('blahblah')); say('hi');

[17:33] <p6eval> rakudo 4b141a: OUTPUT«␤hi␤»

[17:33] <ruoso> one thing that should be noted is that the API is the same for only vs multi routines...

[17:38] *** rfordinal3643 left
[17:38] <chturne> Apologies if this is a FAQ, but where is the help needed at the moment in Perl 6?

[17:38] <chturne> (Or, wheres a good place to start)

[17:41] <TimToady> chturne: well, here on irc, and http://perl6.org, and all the links you find there

[17:41] <TimToady> are you familiar with Perl 5?

[17:42] <chturne> Yes

[17:43] *** alexn_org joined
[17:43] <chturne> Ah, I didn't see that link before. I guess a good starting place would be to write lots of Perl 6 code then! And file good bug reports :D

[17:43] <TimToady> then http://perlgeek.de/blog-en/perl-5-to-6/ is useful as a bootstrap

[17:44] <TimToady> chturne: yes, real code finding real bugs is The Best

[17:44] <chturne> Thanks TimToady.

[17:46] <TimToady> chturne: note, on the perl-5-to-6 link, you want to visit in the order down on the left margin

[17:46] <TimToady> since it bloggily comes up in reverse order

[17:47] <chturne> Heh, yes, it start looking weird quickly before I figured that out!

[17:47] *** jrtayloriv left
[17:55] *** rfordinal joined
[17:56] *** agentzh left
[18:03] <pugs_svn> r28291 | lwall++ | [STD] revise LTA message on $x<10 

[18:03] <pugs_svn> r28291 | [Cursor] provide reliable way of resetting position before panic

[18:04] *** timbunce joined
[18:06] <Tene> HI TIM

[18:06] * TimToady almost types /kick

[18:07] <Tene> who's being kicked?

[18:09] <TimToady> sorry, just a C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cstartle reflex when someone shouts

[18:10] <TimToady> o.O

[18:10] <Tene> o.O

[18:10] <huf> that's an odd reflex there

[18:10] <TimToady> O.o

[18:10] <huf> and who took my fork!

[18:10] <Tene> Hmm.  Apparently you are startled.

[18:11] <timbunce> Has any thought been given to teaching the ohloh.net code scanner how to recognize perl6 code?

[18:11] <TimToady> universal negatives are difficult

[18:12] <timbunce> um, how about has it been discussed?

[18:12] <TimToady> not that I know of

[18:13] <TimToady> (difficult to prove, but not difficult to disprove)

[18:13] <Tene> TimToady: should closures and subs be printable?

[18:13] <TimToady> (except for the part about finding the disproof....)

[18:14] <TimToady> Tene: I'd think the default should be yes, though exactly what you mean by "closure" is subject to ambiguity

[18:14] <TimToady> we can certainly get at the original code, at least until it's thrown away

[18:15] <TimToady> but I suspect that throwing away the source code will not be default, is what I mean

[18:15] <Tene> What do you think about: sub f ($a, $b) { say $a, $b }; my $c = &f.assuming(5); say $c;

[18:15] <TimToady> however, a real closure is also all the lexical state it captures around it

[18:16] *** jauaor joined
[18:16] <jauaor> :)

[18:16] *** alexn_org left
[18:17] <timbunce> In the hope I can tickle someone into contributing a perl6 recognizer for ohloh, the project page is http://sourceforge.net/apps/trac/ohcount/

[18:18] <TimToady> well, there's always (sub f ($a, $b) { say $a, $b }).assuming(5)

[18:18] <TimToady> or some such

[18:18] <Tene> Eh, true.

[18:18] <TimToady> but one would perhaps like the simplified form

[18:18] <TimToady> which you could also do for closures with known bindings, presumably

[18:19] <TimToady> it's just a matter of traversing the AST and doing all the substitutions in the right order :)

[18:19] <TimToady> easy...

[18:19] <Tene> Would "-> $b { say 5, $b }" be valid?

[18:20] <TimToady> I'd think something like that would be okay

[18:20] <Tene> Hmm.  Okay.

[18:20] <TimToady> likewise if $a had been in the outer lexical scope instead of a param

[18:21] <TimToady> well, except for the rw-ness of $a

[18:21] <TimToady> hmm

[18:21] <TimToady> if we lose the container identity it could be problematic

[18:21] <Tene> Well, it's probably relevant to ask what the purpose of stringification is.  Is it just to provide information to the programmer?  an attempt at serialization?

[18:23] <TimToady> I'm thinking that, at least within a process, we have a way of designating a particular lexical scope frame with an opaque (autogenned?) designator

[18:23] <TimToady> so you'd end up with -> $b { say SOMEMAGICdeadbeef::<$a>, $b } for the lexical $a

[18:24] <Tene> Hmm.  That doesn't seem like it would be particularly useful for serialization or for the programmer...

[18:24] <TimToady> and serializing that would probably assume some kind of snapshot of the current value

[18:25] <TimToady> it's potentially useful to distinguish two different $a values in the debugger

[18:25] <TimToady> if you see that deadbeef isn't hte same as deadface

[18:26] <Tene> although, should ~ and .perl() of &c be different?

[18:26] <Tene> are there implied different purposes for those?

[18:26] <TimToady> there's no guarantee that ~ has to be parseable

[18:26] <TimToady> merely human readable

[18:27] <TimToady> it's okay for ~ to be ambiguous for non-essential details, for instance

[18:27] <TimToady> ~%hash is ambiguous if keys or values contain tab, for instance

[18:27] <Tene> So, for example, ~ could have '5' and .perl could have deadface::

[18:28] <TimToady> yeah

[18:29] <Tene> Okay. :)

[18:29] *** timbunce left
[18:33] <muixirt> hmm ... Arrays are lists of data of the same type that are indexed by number?

[18:34] <TimToady> where "same type" is often just Object

[18:35] * jauaor wonders if there is a way to induce his former employer to use perl6 :P

[18:36] <TimToady> yes, but it might take a few more years

[18:36] <TimToady> has something to do with world domination first

[18:36] <jauaor> haha

[18:36] <jauaor> TimToady: former employer wants me to get into ruby

[18:36] <jauaor> mmm....

[18:37] *** stephenlb left
[18:38] <TimToady> well, you could be a double agent, I suppose

[18:39] <muixirt> "Arrays are lists of data objects that are indexed by number" would be a better explanation?

[18:39] <jauaor> TimToady: haha

[18:44] * muixirt was looking at http://en.wikibooks.org/wiki/Perl_6_Programming/Variables_and_Data

[18:44] <TimToady> it's probably wrong

[18:46] <cognominal> TimToady, can MAD in Perl 5 can be used for syntactic highligting? How to get the output anyway?

[18:47] <TimToady> it could, but you need to compile Perl 5 specially to get MADSKILLS

[18:47] *** syntheticore joined
[18:47] <TimToady> and it's slightly bitrotted

[18:48] <cognominal> I recompiled it I just don't know how to use it.

[18:51] <colomon> rakudo: given 1.5 { when 1..2 { say 'between one and two' }; say 'not'; };

[18:51] <p6eval> rakudo 4b141a: OUTPUT«between one and two␤»

[18:53] <mdxi> heh :)

[18:53] <TimToady> cognominal: offhand, I don't remember all the details, but you set PERL_MADSKILLS in the environment, and then a debug dump of some sort spits out raw mad xml

[18:53] <cognominal> thx

[18:54] <TimToady> which you run through nomad to move things around to sane locations on the tree

[18:54] <TimToady> other than that, you'll have to look at the source code

[18:54] <TimToady> I'm not sure how much it has mutated since I last looked at it

[18:54] *** stephenlb joined
[18:55] <cognominal> that's probably enough to get me started...

[18:55] <cognominal> I see indeed to env vars PERL_XMLDUMP and PERL_MADSKILLS

[18:56] <TimToady> most of the code can be found by greping for MAD or mad

[18:56] <TimToady> the basic idea is that it modifies the actual Perl 5 tree as little as possible, just annotating all the places where Perl lied to itself

[18:57] <TimToady> nomad is what does the "unlying"

[18:57] <colomon> rakudo: given 1.5 { when Range.new(from => 1, to => 2, by => 1/3) { say 'between one and two' }; say 'not'; };

[18:57] <p6eval> rakudo 4b141a: OUTPUT«between one and two␤»

[18:57] <cognominal> The lexer lies a lot, I have read toke.c a long time a go

[18:58] *** M_o_C left
[18:58] <colomon> rakudo: say Range.new(from => 1, to => 2, by => 1/3).list.perl

[18:58] <TimToady> the parser also lies to itself :)

[18:58] <p6eval> rakudo 4b141a: OUTPUT«[1, 2]␤»

[19:01] <TimToady> gah, how did it get to be lunch time already?!?

[19:02] *** integral left
[19:03] *** kidd_ left
[19:04] *** sm^^^ left
[19:06] *** sri_kraih_ joined
[19:07] *** sri_kraih_ left
[19:10] *** ejs1 joined
[19:10] *** sri_kraih_ joined
[19:10] *** ejs1 left
[19:11] <pugs_svn> r28292 | diakopter++ | [vijs] implement Concatenation, Comma; generalize .args calling convention 

[19:11] *** integral joined
[19:14] *** kidd_ joined
[19:18] <diakopter> vijs: say 'howdy ' ~ 'world'

[19:18] <p6eval> vijs 28291: OUTPUT«howdy world␤␤  time in interpreter: 0.045004 s␤»

[19:19] <diakopter> vijs: say 'Meesa ' ~ '»ö«'

[19:19] <p6eval> vijs 28291: OUTPUT«Meesa »ö«␤␤     time in interpreter: 0.044941 s␤»

[19:19] <muixirt> vijs?

[19:19] <diakopter> 6js

[19:20] <diakopter> this little Perl 6 interpreter I'm toying

[19:20] <cognominal> written in javascript?

[19:20] <diakopter> yeah

[19:21] <diakopter> uses TimToady's STD parser in Perl 5, which is linked to Google's V8 JS VM

[19:22] <muixirt> sounds complicated

[19:22] <cognominal> in what format is the STD parse tree? I guess I have already asked, by my memory is volatile

[19:23] <diakopter> there's a YAML emitter and a "JSON" (not really JSON, but JS) emitter I wrote...

[19:23] <cognominal> Perl 6 in a browser is definitively yhe way to

[19:24] <diakopter> but viv (6->5) uses the VAST system to construct/post-process it

[19:24] <cognominal> your stuff is in the pugs repository?

[19:24] *** iblechbot joined
[19:25] <diakopter> yeah; see http://perlcabal.org/svn/pugs/revision/?rev=28292 for hints

[19:27] *** justatheory left
[19:27] <cognominal> the V8 source is independent of chrome?

[19:28] <diakopter> yep; see http://perlcabal.org/svn/pugs/view/src/perl6/js/README  it builds with gcc on several platforms/architectures

[19:28] <diakopter> also msvc++

[19:28] *** sri_kraih left
[19:28] *** sri_kraih_ is now known as sri_kraih

[19:28] <diakopter> sorry g++

[19:29] <cognominal> why the python requirement?

[19:29] <diakopter> v8 uses scons to build..

[19:30] <cognominal> that's like the cons a make in Perl I read in TPJ a long time ago?

[19:31] <syntheticore> rakudo: class Bar {

[19:31] <syntheticore>   has %!foo;

[19:31] <syntheticore>   

[19:31] <syntheticore>   method blub {

[19:31] <syntheticore>     %!foo = { 1 => 2, 3 => 4 };

[19:31] <syntheticore>     say "init";

[19:31] <phenny> syntheticore: 04 Sep 02:28Z <TimToady> tell syntheticore sets should be defined in terms of === so that sets of objects work; === should autothread; === is defined as $x.WHICH eqv $y.WHICH to compare identity

[19:31] <syntheticore>     say %!foo.{1};

[19:31] <p6eval> rakudo 4b141a: OUTPUT«Unable to parse block; couldn't find final '}' at line 2, near ""␤in Main (src/gen_setting.pm:3469)␤»

[19:31] <syntheticore>   }

[19:31] <syntheticore>   method postcircumfix:<{ }> ( $key ) {

[19:31] <syntheticore>     say "postcircumfix";

[19:31] <syntheticore>     say %!foo.perl;

[19:31] <syntheticore>   }

[19:31] <syntheticore> }

[19:31] <syntheticore> Bar.new.blub;

[19:31] <diakopter> oo

[19:32] <diakopter> cognominal: I don't know

[19:33] <syntheticore> can somebody tell me why the above doesn work?

[19:33] <diakopter> on irc? b/c it's more than 1 line

[19:33] *** ejs left
[19:33] <syntheticore> <{}> gets called after init and i get this: No such attribute '%!foo'

[19:34] <syntheticore> sorry

[19:34] <diakopter> try http://paste.lisp.org/new/perl6

[19:35] *** azawawi joined
[19:35] <azawawi> hi

[19:35] <syntheticore> thnx

[19:36] <azawawi> moritz_: here is the final thing http://feather.perl6.nl/~azawawi/six_updater.png , I am going to blog about it in the morning.

[19:39] *** finanalyst joined
[19:39] <lisppaste3> syntheticore pasted "wrong postcircumfix method called?" at http://paste.lisp.org/display/87292

[19:43] *** syntheticore left
[19:43] *** syntheticore joined
[19:52] *** azawawi left
[19:56] *** snearch left
[19:58] *** molaf left
[20:02] *** takadonet left
[20:11] *** sri_kraih left
[20:20] *** dakkar left
[20:22] <TimToady> syntheticore: you call it as %!foo.{}, which is not the same as self.{}

[20:23] <syntheticore> TimToady: exactly

[20:24] <syntheticore> so I think my own implementation of {} shouldn't even be called, as I mean the Hash method with this

[20:24] <TimToady> I agree

[20:25] <syntheticore> nice ;)

[20:25] <moritz_> [email@hidden.address] for bug reports

[20:25] <TimToady> oh, wait...

[20:25] * moritz_ hasn't really been paying attention

[20:25] <syntheticore> so how can I work around this for the moment? Not use the operator at all?

[20:26] <TimToady> %!foo()() should work

[20:26] <TimToady> er, try %!foo().{}

[20:27] <TimToady> nope, but at least a different error

[20:27] <syntheticore> => invoke() not implemented in class 'Hash'

[20:28] <TimToady> well, at least we know it knows it's a Hash now...

[20:28] <syntheticore> say $!foo.perl in the postcircumfix method also fails with "No such attribute '%!foo'"

[20:29] <syntheticore> so it seems the operator is not seen as a real method right now

[20:30] *** cmv joined
[20:30] <TimToady> well, it's simply dispatching to the wrong routine somehow

[20:32] <syntheticore> ok, I guess I'll just use a regular method instead for now

[20:33] <TimToady> if you declare $self explicilty as Bar it just fails when it calls the wrong routine

[20:34] <TimToady> oh, here's sort of a workaround

[20:34] <TimToady> make it: class Bar does Associative {...}

[20:34] <TimToady> you get a warning, but the right answer

[20:35] *** ruoso left
[20:37] <syntheticore> hmm, doesn't work for me..

[20:37] <syntheticore> same result

[20:38] <syntheticore> incidentally, the real code where this happens already uses "does Associative"

[20:39] <TimToady> oh, I also have it %!foo{1} without hte .

[20:39] <TimToady> strange

[20:40] <TimToady> it's possible that it's getting mixed up with %!foo() notation somehow too

[20:40] <TimToady> but it'll probably take jnthn++ or pmichaud++ to chase it down

[20:41] <TimToady> in any case, definitely a bug

[20:41] <syntheticore> yeah, I'm getting that feeling too ;)

[20:41] <TimToady> syntheticore++

[20:42] <syntheticore> another question:  How is the syntax for set operations supposed to work: && and ||, AND and OR, something entirely different?

[20:44] *** zerhash joined
[20:45] *** finanalyst left
[20:47] *** DiegoAltheman joined
[20:48] *** stephenlb left
[20:51] <TimToady> pugs/ext/Set/lib/Set.pm seems to have some notions about that, though maybe we'd have ASCII workarounds for the Unicode challenged

[20:52] <TimToady> I think we'd also at one time discussed (+) (*) (-) and such as ASCII set op

[20:53] <TimToady> ops

[20:58] *** muixirt left
[21:00] <syntheticore> thanks, I'll have a look at that tomorrow, have to leave now unfortunately

[21:05] *** syntheticore left
[21:07] *** arthur-_ left
[21:07] *** arthur-- joined
[21:07] *** DiegoAltheman left
[21:09] *** Woodi joined
[21:40] *** zerhash left
[21:43] *** jrtayloriv joined
[21:48] *** chturne left
[21:52] *** justatheory joined
[21:52] *** KyleHa left
[21:53] *** zerhash joined
[21:54] *** Whiteknight joined
[21:54] *** pmurias left
[22:07] *** iblechbot left
[22:08] *** stephenlb joined
[22:13] *** nihiliad left
[22:17] *** stephenlb left
[22:31] *** cdarroch left
[22:37] *** meppl left
[22:46] *** kidd_ left
[23:24] *** frew__ joined
[23:32] *** sri_kraih joined
[23:41] <diakopter> would anyone like to write a test driver/harness against the spectests for vijs?

[23:42] *** M_o_C joined
[23:44] *** avar left
[23:45] *** avar joined
[23:46] *** desertm4x__ joined
[23:50] *** cmv left
[23:54] *** desertm4x_ left
[23:56] *** FCO left
