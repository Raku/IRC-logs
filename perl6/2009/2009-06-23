[00:02] *** japhb left
[00:07] *** aindilis joined
[00:07] *** bacek left
[00:12] *** stDavid left
[00:18] *** Limbic_Region joined
[00:23] *** jaldhar joined
[00:24] *** jferrero left
[00:29] *** s1n1 joined
[00:38] *** DemoFreak left
[00:38] *** payload joined
[00:41] *** nErVe left
[00:42] *** japhb joined
[00:42] *** rindolf left
[00:42] <wayland76> bots: ping

[00:43] *** cdarroch left
[00:44] *** athomason left
[00:47] <wayland76> pmichaud: ping?

[00:49] *** ihrd joined
[00:50] *** ihrd left
[01:00] *** stDavid joined
[01:13] *** s1n1 left
[01:32] *** stDavid left
[01:38] *** s1n1 joined
[01:46] *** jaldhar left
[01:47] *** jaldhar joined
[01:51] *** mycelium joined
[01:56] *** agentzh left
[01:56] *** agentzh joined
[02:03] *** molaf_x joined
[02:04] *** molaf_xx left
[02:05] *** Chillance left
[02:06] *** hercynium joined
[02:07] *** last joined
[02:14] *** stDavid joined
[02:16] *** eternaleye left
[02:32] *** mycelium left
[02:43] *** stDavid left
[02:44] *** KyleHa joined
[02:52] <KyleHa> I'm looking at [perl #66868] Zero-arg sub params interpreted as parameterless sub...

[02:52] <KyleHa> I came up with this to put in S06-signature/arity.t:   dies_ok { a_zero( 'hello', 'world' ) }, 'no matching sub signature';

[02:54] *** twigil joined
[02:54] <KyleHa> That seems right, if this is a run time error, but I'm not sure that it is.  Anyone have an opinion?

[02:54] *** twigil left
[02:58] *** cotto joined
[03:05] <wayland76> perl6: a_zero( 'hello', 'world' )

[03:05] <p6eval> pugs: OUTPUT«*** No such subroutine: "&a_zero"␤    at /tmp/628bzGrqTY line 1, column 1 - line 2, column 1␤»

[03:05] <p6eval> ..rakudo 10f223: OUTPUT«Could not find non-existent sub a_zero␤»

[03:05] <p6eval> ..elf 27178: OUTPUT«Undefined subroutine &GLOBAL::a_zero called at (eval 124) line 3.␤ at ./elf_h line 5881␤»

[03:05] <wayland76> std: a_zero( 'hello', 'world' )

[03:05] <p6eval> std 27178: OUTPUT«Undeclared routine:␤   a_zero used at 1 ␤ok 00:02 37m␤»

[03:05] *** azawawi joined
[03:06] <KyleHa> The test file I'm working in defines:  sub a_zero () {};

[03:06] <wayland76> KyleHa: Well, STD errors on it, and, while my compilers-fu is somewhat sketchy, it seems to me that that indicates a parser error

[03:06] *** last left
[03:06] <wayland76> ok, let me try again :)

[03:06] <wayland76> std: sub a_zero () {}; a_zero( 'hello', 'world' )

[03:06] <p6eval> std 27178: OUTPUT«ok 00:02 37m␤»

[03:07] *** skids left
[03:07] <wayland76> perl6: sub a_zero () {}; a_zero( 'hello', 'world' )

[03:07] <p6eval> pugs: OUTPUT«*** No compatible multi variant found: "&a_zero"␤    at /tmp/R4WRwR6UpN line 1, column 19 - line 2, column 1␤»

[03:07] <p6eval> ..elf 27178, rakudo 10f223:  ( no output )

[03:07] <wayland76> rakudo: sub a_zero () {}; a_zero( 'hello', 'world' )

[03:07] <p6eval> rakudo 10f223:  ( no output )

[03:07] <azawawi> hi

[03:08] <KyleHa> The bug report says the TimToady says it should error out with "no matching sub signature."

[03:08] <wayland76> Well, STD likes it, and pugs fails 

[03:08] <wayland76> Yeah, I'd say that's run time, but I'm pretty much randomly guessing

[03:09] <KyleHa> I'm glad I'm not the only one guessing!

[03:09] <wayland76> We're approaching the time of day when it's hard to get answers, because many of the appropriate people are asleep.  But sometimes TimToady is still around at this time

[03:11] <KyleHa> That's good to know.

[03:11] <KyleHa> This is about the time I'm most free since the kids are in bed, but I haven't passed out myself yet.

[03:13] *** Casan left
[03:16] <wayland76> Well, it's 1pm here (Australia), and I find that from about 2pm to about 4pm, it's not a good time to ask questions

[03:16] <wayland76> Which timezone are you in?

[03:17] <azawawi> wayland76: good morning from +2 timezone :)

[03:18] <KyleHa> I'm in central time (Chicago).  It's 10pm here.

[03:18] <azawawi> 6:18am here

[03:18] <wayland76> azawawi: Yes, I know you're around at this time.  bacek often is too.  But jnthn and pmichaud and moritz_ and masak and TimToady and the like seem to not be available as much

[03:19] <wayland76> Oh, and ruoso and pmurias

[03:19] <wayland76> And it seems to me like they're the people with the best handle on the situation

[03:21] <wayland76> (nothing personal against the rest of us, of course)

[03:22] <wayland76> KyleHa: Anyway, my guess is that you'll have to just make assumptions, and ask for forgiveness if you're wrong :)

[03:22] <wayland76> (forgiveness rather than permission)

[03:23] <KyleHa> wayland76: Yeah, I'm going that route now.

[03:23] <KyleHa> I'll commit the tests I think are right and answer the bug emails with notes about that and pleas for assistance.

[03:23] *** frew joined
[03:24] <KyleHa> (Stop me before I screw up your test suite even more!)

[03:30] *** mycelium joined
[03:31] *** Limbic_Region left
[03:31] *** Patterner left
[03:36] <pugs_svn> r27179 | kyle++ | [t/spec] Add a test to show bug #66868

[03:40] <pugs_svn> r27180 | kyle++ | [t/spec] add test to show bug #66854

[03:51] *** FurnaceBoy left
[03:52] *** azawawi left
[04:00] *** azawawi joined
[04:00] <azawawi> std: '';

[04:00] *** justatheory left
[04:00] <p6eval> std 27180: OUTPUT«ok 00:02 35m␤»

[04:02] <azawawi> std: module Foo::Bar { }; module Moo::Bar;

[04:02] <p6eval> std 27180: OUTPUT«ok 00:02 36m␤»

[04:04] <azawawi> std:

[04:04] <azawawi> std: ;

[04:04] <p6eval> std 27180: OUTPUT«ok 00:02 35m␤»

[04:06] *** s1n1 left
[04:07] *** s1n1 joined
[04:12] <azawawi> TimToady: thanks for the fix; for STD->parse(''), im getting "Not a reference at lib/Cursor.pm line 203". It seems related re-init setting on re-parse. 

[04:16] *** hercynium left
[04:19] *** s1n1 left
[04:25] *** justatheory joined
[04:26] *** justatheory left
[04:30] *** meppl joined
[04:35] *** agentzh left
[04:41] *** azawawi left
[04:42] *** ihrd joined
[04:53] *** xinming_ joined
[05:02] <amoc> rakudo: enum Color <foo bar>; sub foo { 'sub' }; say foo; #63650

[05:02] <p6eval> rakudo 10f223: OUTPUT«Redefinition of routine foo␤0␤»

[05:04] *** frew left
[05:06] <amoc> rakudo: class A { ... };

[05:06] <p6eval> rakudo 10f223: OUTPUT«Can't return outside a routine␤in Main (/tmp/9k1eH40Qly:2)␤»

[05:11] *** xinming left
[05:16] <amoc> rakudo: enum Color <black white pink>; sub pink { 'sub' }; say pink; #63650

[05:16] <p6eval> rakudo 10f223: OUTPUT«Redefinition of routine pink␤2␤»

[05:17] *** ejs joined
[05:17] <amoc> rakudo: enum Color <black white pink>; sub pink { 'sub' }; say pink(); #63650

[05:17] <p6eval> rakudo 10f223: OUTPUT«Redefinition of routine pink␤invoke() not implemented in class 'Integer'␤in Main (/tmp/cgkJudknVS:2)␤»

[05:21] *** xinming_ left
[05:22] *** xinming joined
[05:23] *** ejs left
[05:24] *** ejs joined
[05:30] *** molaf_x left
[05:32] *** agentzh joined
[05:35] *** finanalyst joined
[05:40] *** ejs left
[05:41] *** mikehh_ joined
[05:51] *** mikehh left
[05:55] *** finanalyst left
[05:57] <pugs_svn> r27181 | kyle++ | [t/spec] Add Greek tests to autoincrement

[06:04] <wayland76> Yay kyle :)

[06:04] <KyleHa> Don't cheer too loud.

[06:05] <KyleHa> I quit playing chess an hour ago because I was feeling too dumb, but that didn't stop me from going into the pugs repo...

[06:05] <amoc> non-loud-yay kyle :D

[06:06] <KyleHa> Heh, thanks.

[06:07] *** xinming_ joined
[06:11] *** xinming left
[06:14] *** azawawi joined
[06:15] <moritz_> good morning

[06:15] <azawawi> moritz_: good morning

[06:15] <azawawi> where can i find TimToady's 'Perl 6 errors' talk at YAPC? is there any video/slides?

[06:25] *** KyleHa left
[06:32] *** sw1sh1 joined
[06:38] <amoc> moritz_: good morning!

[06:39] <moritz_> oh hai

[06:42] *** nihiliad left
[06:49] *** xinming joined
[06:49] *** PZt joined
[06:50] <moritz_> phenny, tell KyleHa, yes, it should be a runtime error

[06:50] <phenny> moritz_: I'll pass that on when KyleHa is around.

[06:50] *** finanalyst joined
[06:59] *** DemoFreak joined
[06:59] *** rfordinal joined
[07:02] *** payload left
[07:03] *** iblechbot joined
[07:03] *** meppl left
[07:05] *** xinming_ left
[07:10] <sw1sh1> hi, i just started to read wiki to learn perl6, and already found at least four things that dont work in pugs, is it still so incomplete or what?

[07:11] <moritz_> yes

[07:11] <moritz_> and it's not developed anymore

[07:11] <moritz_> we mostly use rakudo these days

[07:12] <sw1sh1> ok, i'll try rakudo then

[07:12] <moritz_> http://rakudo.org/how-to-get-rakudo

[07:13] <sw1sh1> thanks

[07:14] *** payload joined
[07:17] *** mikehh_ left
[07:29] *** ejs joined
[07:39] *** ejs1 joined
[07:48] *** ejs left
[07:49] *** barney joined
[07:50] *** ihrd left
[07:56] *** twigil joined
[07:59] *** mjk joined
[08:01] <Matt-W> Morning

[08:03] *** xinming_ joined
[08:04] <amoc> morning!

[08:17] *** meppl joined
[08:21] *** andreasg_ left
[08:21] *** literal joined
[08:21] *** andreasg_ joined
[08:22] *** agentzh left
[08:24] *** xinming left
[08:25] *** agentzh joined
[08:28] *** donaldh joined
[08:30] *** masak joined
[08:30] <masak> morning, lurkers!

[08:31] <huf> lurkers, morning!

[08:34] <Matt-W> o/

[08:34] <azawawi> masak: yeah it is a good morning :)

[08:35] <Matt-W> No it's not

[08:35] <Matt-W> It was only good once I got into somewhere with air conditioning

[08:35] <moritz_> http://www.perlmonks.org/?node_id=773757 # the yapc seems to spawn some interest in Perl 6

[08:35] <Matt-W> The air outside feels like someone's been boiling slugs in it

[08:35] *** amoc__ joined
[08:36] <Matt-W> moritz_: cool

[08:37] *** synthEEEE left
[08:37] <masak> it's a good morning, albeit a slightly late one.

[08:38] <masak> wohoo! a hurkle!

[08:39] <Matt-W> also my car's been written off

[08:39] <Matt-W> so now I have to trawl through the used car market to find a suitable replacement

[08:39] <masak> still, that sounds like good news.

[08:40] <Matt-W> well it's news

[08:40] <Matt-W> which is a good start

[08:41] <masak> rakudo: say [?^] 1, 1, 1

[08:41] <p6eval> rakudo 10f223: OUTPUT«1␤»

[08:42] <azawawi> masak: another attempt at picture blogging, http://ahmadzawawi.blogspot.com/2009/06/padres-perl-6-quick-fixes-in-action.html :)

[08:42] * masak likes picture blogging

[08:43] *** clintongormley joined
[08:43] <masak> azawawi++ # nice!

[08:44] <azawawi> thx and that's just the beginning; p6 var/sub/method refactoring is next :)

[08:52] <Matt-W> Hmm

[08:52] <Matt-W> Ctrl+~ is not an easy keystroke on a UK keyboard

[08:52] <moritz_> easier than on a German keyboard :-)

[08:52] <Matt-W> (poking around the entries about Padre)

[08:52] <huf> how do you code on anything but the US layout anyway? :)

[08:53] *** amoc left
[08:53] <Matt-W> moritz_: is it?

[08:53] <azawawi> Matt-W: really?

[08:53] <moritz_> Matt-W: on the German keyboard you need AltGr + another key to create the ~

[08:53] <Matt-W> azawawi: ~ requires shift on the UK layout

[08:53] <azawawi> Matt-W: what about Ctrl-1?

[08:53] <moritz_> Matt-W: so you'd need Crtl+AltGr+Q or so

[08:53] *** mjk left
[08:53] <Matt-W> moritz_: sounds about the same as Ctrl+Shift+#

[08:54] <Matt-W> which is what it is here

[08:55] <azawawi> Matt-W, moritz_: so is Ctrl + 1 easier to use on a uk, german keywords?

[08:55] <moritz_> azawawi: it sure is

[08:55] <azawawi> s/keywords/keyboard/ :)

[08:55] <Matt-W> definitely

[08:56] <Matt-W> huf: coding on a UK keyboard is easy, because the punctuation is mostly in the same place as the US layout so we don't have quite so many insane key combinations as some of the other european layouts have to suffer

[08:56] <azawawi> then i should 'borrow' it from Padre's core since it is using it :)

[08:57] <huf> Matt-W: ah

[08:57] <szabgab> that's the brace jumper!

[08:57] <huf> i took one look at our national layout and forever said no... :)

[08:57] <azawawi> szabgab: lol

[08:57] <moritz_> speaking of weird keyboards... writing perl on a keyboard without a dollar sign is a real pain

[08:58] <Matt-W> I bet

[08:58] <Matt-W> fortunately we have one of those

[08:58] <Matt-W> although it'd be easier if it wasn't shift-4, I suppose

[08:58] <szabgab> huf, whz that kezboard lazout is really nice 

[08:58] <moritz_> at least I couldn't find it on the Norwegian layout

[08:59] <szabgab> reallz

[08:59] <szabgab> sorrz, that was a tzpo

[08:59] <huf> szabgab: altgr to get ';'? *real* nice ;)

[08:59] <masak> moritz_: I've been doing most of my computer work with a US layout for over two years now. not going back. I say this as someone whose mother tongue has a strange alphabet. it's a matter of having good software to compensate.

[08:59] <Matt-W> German keyboards seem pretty horrible for coding to me

[09:00] <huf> isnt german the one that has the "paired" chars "unpaired"?

[09:00] <Matt-W> the extra letter keys do nasty things to the availability of your punctuation

[09:00] <moritz_> masak: agreed

[09:00] <huf> as in, [] and {} are not next to each other... or was it <>?

[09:00] <moritz_> Matt-W: right

[09:00] <moritz_> huf: [] and {} are next to each other, but you need AltGr to reach it

[09:00] <masak> moritz_: I can still switch, but the Swedish layout now seems quaint and slightly unnatural.

[09:01] <moritz_> < and > are on the same key, separated by shift

[09:01] <moritz_> (sigh)

[09:01] <huf> oh yeah, that was it ;)

[09:02] <moritz_> you get used to it, but it makes switching between US and German layout a real pain.

[09:03] <masak> so don't. that's my point.

[09:03] <masak> use US, and emulate the rest.

[09:03] <masak> Emacs is your friend. even vim helps.

[09:04] <moritz_> well, I also use other programs than vim

[09:05] <moritz_> like icew{weasel,dove}, the shell etc.

[09:05] <masak> aye, Firfox/Gmail is about the only time I switch, too.

[09:05] <moritz_> so I really need an input method that's handled either by X or the OS

[09:05] <masak> for longer emails, I simply type things out in Emacs and copy/paste.

[09:06] <moritz_> plus, I have a job as an administrator, and have to cope with whatever keyboard the poeple I work with use

[09:06] <moritz_> so I can't get around switching anyway

[09:08] <masak> no, it's probably not possible to get around it altogether.

[09:08] <masak> I just try to minimize it, and to make my default as pleasant as possible.

[09:08] <huf> i just dont use the extra chars, so the US layout is fine

[09:09] <masak> huf: and you're... from the US?

[09:09] <huf> hungary

[09:10] <masak> which means you skip some accents and the like?

[09:10] <huf> we've got a few accented chars, but it's perfectly legible without them

[09:10] <huf> plus, code is in english anyway 

[09:10] <masak> huf: that's not an acceptable solution for Germans and Swedes, I'd say.

[09:10] <masak> huf: plus, it feels like a bad compromise.

[09:10] <moritz_> I just find it impolite to transliterate other people's names

[09:10] <masak> that, too.

[09:11] <moritz_> in emails or so it's fine to substitute &auml; with ae, but for example not in websites I write

[09:13] <moritz_> or æ with ae

[09:16] <moritz_> .øØ( thought bubbles for wrong thoughts )

[09:17] <moritz_> maybe I should use capslock as the compose key

[09:18] *** payload left
[09:18] <wayland76> moritz_: But do you have to type non-English on the keyboards of people you administer?

[09:18] *** bacek joined
[09:19] <krunen> I use US-International with no-dead-keys for norwegian. AltGr-[ZLW] is [ÆØÅ]. That also has «» and some other snacks.

[09:19] <moritz_> wayland76: usually not

[09:19] <wayland76> That's what I thought

[09:19] <wayland76> I have two keyboards

[09:19] <wayland76> One is US-ASCII or something

[09:20] <wayland76> The other is US-International + Greek + Hebrew + APL

[09:20] <wayland76> (although it doesn't have all those symbols printed on it)

[09:20] <moritz_> sounds pretty scary :-)

[09:20] <wayland76> And I use Scroll lock to switch layouts

[09:21] <wayland76> And the scroll lock led lights up when I'm not in US-International :)

[09:21] <moritz_> what kind of tool do you use for the switching?

[09:22] <wayland76> I press Scroll lock :)

[09:22] <moritz_> on the backend, I mean

[09:22] <wayland76> (just in case I didn't make myself clear, I have two physical keyboards)

[09:23] <moritz_> but the switching between Greek and US-International, for example, is handled in software, no?

[09:23] <Matt-W> I wish I had a compose key on windows

[09:23] <Matt-W> on linux I can type virtually anything from a latin-ish european language easily

[09:23] <wayland76> setxkbmap

[09:23] <moritz_> wayland76: thanks

[09:23] <wayland76> I have a perl script that finds the second keyboard, and runs setxkbmap on it

[09:24] <wayland76> setxkbmap is configured with a bunch of undocumented but moderately straightforward config files in /usr/share/X11/xkb with all the combining being done by the files in /usr/share/X11/locale/<locale>/Compose and the like

[09:25] <wayland76> I'm also planning to make a keyboard that I might be able to sell that does US-International + Greek + Maths/APL

[09:26] <moritz_> locales. gah.

[09:26] <moritz_> I try to avoid those like hell

[09:26] <wayland76> Well, yes, but the compose sequences are kinda cool :)

[09:27] <moritz_> right

[09:27] <moritz_> and perl5 doesn't handle Unicode correctly if the wronge locale is set.

[09:28] <wayland76> Well, this isn't the generic locale stuff, it's X-specific stuff, which pretty much means a huge list of compose sequences mapping to characters

[09:28] <wayland76> Unfortunately my second keyboard doesn't have a right windows key

[09:28] <moritz_> a different locales system.

[09:28] <moritz_> oh wow

[09:29] <moritz_> well, off to lunch

[09:29] <wayland76> But it does have keys that produce no scancodes :(

[09:29] <Matt-W> hah

[09:29] <wayland76> well, not a different locales system

[09:29] *** bionoid joined
[09:29] <Matt-W> PuTTY has compose key support built in

[09:29] <Matt-W> that'll do for me :)

[09:29] <Matt-W> %hash«key» :D

[09:29] <Matt-W> (did that render right?)

[09:30] <wayland76> But just that the locale stuff in XWindows doesn't do a lot of the stuff that's done by other software

[09:30] <wayland76> ie. a different set of config files that do different things.

[09:30] <wayland76> Matt-W: French rather than Texan :)

[09:30] <wayland76> PuTTY++ ++ ++

[09:31] <wayland76> I avoid Windows as much as possible, but PuTTY is a good bit of software for which I have been thankful often enough

[09:31] <huf> yeah, frustrating movie. the end is nice tho

[09:32] <wayland76> For those wondering about the locale files, but too lazy to look, I'll paste one line from them

[09:32] <wayland76> <Multi_key> <o> <r>                     : "®"   registered # REGISTERED SIGN

[09:32] <bionoid> Also there is a google code mod called "puttycyg" that allows you to use putty as a local cygwin terminal if you _have_ to do some actual work on Windows ;)

[09:32] <wayland76> I haven't seen "PuTTY: the movie" yet :)

[09:32] <huf> i meant windows the movie :)

[09:33] <wayland76> I take it by "nice", then, than you mean that Windows dies a violent death, but somewhere offscreen where we don't have to watch?

[09:33] <wayland76> (afk for a bit, but will backlog)

[09:33] <huf> ;)

[09:36] *** azawawi left
[09:50] *** amoc__ left
[09:50] *** amoc joined
[09:52] <masak> I have a Model M keyboard here at work. I have to bribe my co-workers constantly so they won't complain about the clattering too much -- but it's well worth it.

[10:01] <wayland76> masak: I just got an Avant Stellar :)

[10:01] <wayland76> Buckled spring, but the keyboard can be reprogrammed from the keyboard, without software :)

[10:01] <masak> (springs)++

[10:02] <wayland76> My only gripes are that it doean't have n-key rollover, and that I haven't figured out a way to make it send any keycode that isn't already on one of the keys

[10:03] <wayland76> I wonder if the Optimus Maximus has n-key rollover :)

[10:03] <masak> rakudo: enum A <b>; say A::c

[10:03] <p6eval> rakudo 10f223: OUTPUT«Null PMC access in invoke()␤in Main (/tmp/eZqi9x5plT:2)␤»

[10:03] * masak submits rakudobug

[10:04] <masak> rakudo: say q<< <<woot>> >>

[10:04] <p6eval> rakudo 10f223: OUTPUT«Statement not terminated properly at line 2, near ">>"␤in Main (src/gen_setting.pm:0)␤»

[10:04] * masak submits rakudobug

[10:05] <masak> rakudo: say (map -> $a, $b { $a }, 1..5).perl; for 1..5 -> $a, $b {}

[10:05] <p6eval> rakudo 10f223: OUTPUT«[1, 3]␤StopIteration␤in Main (/tmp/2qZBAsxsOE:2)␤»

[10:05] * masak submits rakudobug

[10:05] <masak> rakudo: sub foo(--> Array of Str) { my Str @a = <foo bar baz>; @a }; foo

[10:05] <p6eval> rakudo 10f223: OUTPUT«Use of type object as value␤Type check failed on return value␤in sub foo (/tmp/gJcBE0Ht4P:2)␤called from Main (/tmp/gJcBE0Ht4P:2)␤»

[10:05] * masak submits rakudobug

[10:06] <masak> what? I had a few lying around. :)

[10:07] *** last joined
[10:14] <masak> lunch &

[10:15] *** sw1sh joined
[10:16] *** sw1sh1 left
[10:17] *** AzureStone_ joined
[10:20] *** last left
[10:20] *** AzureStone left
[10:28] *** last joined
[10:29] *** amoc left
[10:30] *** amoc joined
[10:34] *** ejs2 joined
[10:43] *** ejs1 left
[10:45] *** payload joined
[10:49] *** payload left
[10:49] *** payload joined
[11:05] <moritz_> is there a cheap test somehow to figure out if an integer is a square number, without calculating sqrt($x)?

[11:08] <last> moritz_: I don't think so.  

[11:08] <barney> only test positive integers

[11:09] *** sri_kraih_ left
[11:11] <last> moritz_: There are certainly pretty good first-pass filters you could use.  Like if it's even, it has to be divisible by four.  

[11:13] <last> moritz_: http://www.mathpages.com/home/kmath265.htm

[11:13] *** s1n1 joined
[11:14] *** sri_kraih joined
[11:16] <huf> btw, will rakudo be self-hosting eventually?

[11:16] *** s1n2 joined
[11:17] <moritz_> last: thanks, that looks pretty interesting

[11:18] <moritz_> huf: well, it'll always need parrot, presumably.

[11:18] <huf> self-hosting on parrot is what i mean

[11:18] <huf> entirely written in perl6 and able to compile itself

[11:19] <moritz_> some of the runtime will probably always remain in PIR, for speed reasons

[11:19] <moritz_> but it's pretty much written in Perl 6 already (the parser, the action methods (ie transforming the parse tree into a syntax tree, and the setting (ie builtins))

[11:20] *** donaldh left
[11:20] <moritz_> it might become self-hosting if there's something to gain from it

[11:20] <moritz_> but at some point we'll surely get rid of the Perl 5 dependency for building and testing

[11:20] *** donaldh joined
[11:21] *** ejs1 joined
[11:21] *** barney left
[11:21] <moritz_> last: if it were a pressing problem I'd probably invent something along these lines for binary numbers, but it doesn't seem to warrant the effort for project euler :-)

[11:22] *** szabgab joined
[11:22] *** mizioumt joined
[11:25] <last> mortiz_: I believe a quick (?) binary filter is to count the number of zero digits at the end of the number.  That number has to be even for a square.

[11:26] *** payload left
[11:27] <last> moritz_: Seems like there ought to be a fast hex equivalent to the sort of tests on that page, but I should probably do paying work rather than try to figure it out.  :)

[11:28] <moritz_> last: :-)

[11:28] <masak> moritz_: you could calculate [+} 1, 3, 5 ... $n until you go above your number. :)

[11:30] *** ejs2 left
[11:30] *** s1n1 left
[11:30] <moritz_> masak: :/

[11:30] <masak> no good? :)

[11:31] <moritz_> not particularl efficient

[11:31] <moritz_> *particularly

[11:31] <masak> no, definitely not.

[11:31] <masak> but it avoids sqrt.

[11:32] <moritz_> I should've asked for something *faster* than sqrt() :-)

[11:32] <masak> yes...

[11:32] <last> How are bignums stored internally?

[11:32] <masak> ok, I'd like to talk about StrPos, one of those nice ideas, which so far hasn't seen an implementation anywhere (AFAIK).

[11:33] <masak> in my opinion, the substr multi in S32/Str.pod is missing a variant whete $start is an Int.

[11:33] <masak> same with index and rindex.

[11:33] <masak> I'll willingly add those; just seeking confirmation first that I'm not insane.

[11:34] <masak> um, that what I'm proposing is not insane. :P

[11:35] <moritz_> last: dunno, I just use them :-)

[11:36] <moritz_> masak: I think the only one how maybe has a faint idea of how StrPos works is TimToady 

[11:36] <masak> moritz_: it's described fairly well in S02.

[11:36] <masak> the important point is that StrPos is _not_ and Int.

[11:36] <masak> nor does an Int coerce into a StrPos.

[11:37] <moritz_> in my mind they are multi-valued objects

[11:37] <moritz_> ie a StrPos could know "I'm 5 graphs, or 8 codes, from the start"

[11:38] <masak> moritz_: not sure you're seeing my point. the way substr works now (with Ints) will still be supported in Perl 6.0.0.

[11:38] <masak> the current signatures in S32/Str don't allow for that.

[11:38] <masak> (same with index and rindex)

[11:38] <moritz_> masak: I didn't even get to your point yet :-)

[11:39] <masak> Rakudo and the spec are at odds on that point right now.

[11:39] <masak> moritz_: ok, I'm too eager. :) go on.

[11:39] <masak> (I do agree about the multivaluedness)

[11:39] <moritz_> the point is, if you have an integer and want it to be interpreted as a StrPos (like when using it with substr) you have to be very clear about your units, again

[11:39] <masak> moritz_: S02 mentions that, too.

[11:40] <masak> an Int defaults to the current scope's string abstraction level.

[11:40] <moritz_> maybe that's what's controlled by 'use codes;' etc.

[11:40] <masak> aye.

[11:41] <moritz_> though I don't quite understand the talk about a StrLen knowing its length also in bytes

[11:42] <moritz_> because I thought that Str's don't have a byte level, only Buf's

[11:42] <masak> arguably the spec is self-contradictory in places.

[11:42] <masak> there are geological layers of insight involved.

[11:43] <moritz_> masak: but IMHO you can go ahead and add the Int candidates of these multis

[11:43] * masak goes ahead

[11:43] <masak> as far as I can see, that's one Int variant for every StrPos variant.

[11:43] *** cognominal left
[11:44] *** Whiteknight joined
[11:44] <moritz_> be careful for example with substr

[11:45] *** ejs2 joined
[11:45] <moritz_> given substr(Str $s, StrPos $start = 0, StrLen $len = *, Str $replacement?)

[11:45] <masak> the defaults? yes.

[11:45] <masak> just realized that.

[11:45] <moritz_> will you allow (Str, Int, StrLen)?

[11:45] <masak> I think so.

[11:45] <moritz_> so you need Int|StrPos and Int|StrLen?

[11:46] <masak> ah, I can write it like that? great.

[11:46] <moritz_> I'm not sure.

[11:46] *** azawawi joined
[11:46] <moritz_> we had so much back and forth on that one

[11:47] <azawawi> yellow

[11:47] <masak> rakudo: sub foo(Int|Str $a = "foo") { say $a }; foo(); foo(5); foo("bar")

[11:47] <p6eval> rakudo 10f223: OUTPUT«sh: ./perl6: No such file or directory␤»

[11:47] <masak> not supported in Rakudo, at least.

[11:48] <masak> I'll write it the long way for the time being.

[11:49] <moritz_> std: foo(Int|Str $a = "foo") { say $a }; foo(); foo(5); foo("bar")

[11:49] <p6eval> std 27181: OUTPUT«##### PARSE FAILED #####␤Unable to parse argument list; couldn't find final ')' at /tmp/yijaDp463J line 1:␤------> [32mfoo(Int|Str [31m$a = "foo") { say $a }; foo(); foo(5); f[0m␤    expecting any of:␤ infix or meta-infix␤      infix stopper␤    standard stopper␤

[11:49] <p6eval> ..terminator␤FAILED 00:02…

[11:50] *** jdv79_ left
[11:50] <masak> same error as Rakudo, incidentally.

[11:51] *** frew joined
[11:51] <masak> oh! and won't the signatures (Str $string: StrPos $start, StrLen $length?) and (Str $string: StrPos $start, StrPos $end?) tie if no third argument is provided?

[11:52] <masak> should I remove one of the question marks?

[11:53] <last> moritz_: Reason I ask about bignums is because that is going to determine how to efficiently look for large squares.  If your potential squares fit into a 32-bit Int, you're probably better off just building a table of all the 32-bit squares (should take 256K of memory) and doing a binary search into it.  (At least, assuming you're doing a enough lookups to make it worth optimizing.)  (Hey, I'm compiling in another window.)

[11:53] *** ejs1 left
[11:54] *** jdv79 joined
[11:56] *** wayland76 left
[11:57] <pugs_svn> r27182 | masak++ | [S32/Str] Added Int variants to index/rindex/substr

[11:57] <pugs_svn> r27182 | masak++ | 

[11:57] <pugs_svn> r27182 | masak++ | There has to be a way to send in an Int to these Str methods. Arguably,

[11:57] <pugs_svn> r27182 | masak++ | StrPos and StrLen are not Ints -- that's their point. Also, removed

[11:57] <pugs_svn> r27182 | masak++ | optionality from the $end param in substr, because IMO that would lead

[11:57] <pugs_svn> r27182 | masak++ | to MMD ties when no third argument is provided.

[12:03] *** azawawi_ joined
[12:04] *** wayland76 joined
[12:04] <masak> like this:

[12:04] <masak> rakudo: multi foo(Str $a, Str $b?) {}; multi foo(Str $a, Int $b?) {}; foo("bar")

[12:04] <p6eval> rakudo 10f223: OUTPUT«Ambiguous dispatch to multi 'foo'. Ambiguous candidates had signatures:␤:(Str $a, Str $b?)␤:(Str $a, Int $b?)␤in Main (/tmp/kKYhDPWV05:2)␤»

[12:05] <masak> you don't know if it's a Str or an Int that wasn't provided. :)

[12:05] *** azawawi left
[12:06] *** ejs1 joined
[12:07] *** azawawi_ left
[12:08] *** jdv79 left
[12:12] *** Whiteknight left
[12:14] <moritz_> last: I expect them to be 64bit ints, but I also estimated the current run time is sufficient. It's not a program I have to run often :-)

[12:15] *** ejs2 left
[12:20] *** Whiteknight joined
[12:21] *** lichtkind joined
[12:22] <last> moritz_: Ah, obviously building a 16GB table to speed up your calculations is probably a bit impractical.

[12:25] <last> moritz_: I mean 32GB -- 4 GB 64-bit numbers.

[12:25] *** skids joined
[12:26] <wayland76> ...unless he can keep it on disk and it's still faster

[12:28] *** zamolxes joined
[12:37] *** FurnaceBoy joined
[12:38] *** Util joined
[12:38] *** s1n2 left
[12:45] *** Util left
[12:46] *** mizioumt left
[12:48] *** broquaint joined
[12:49] *** s1n1 joined
[12:50] *** twigil1369 joined
[12:54] *** cognominal joined
[12:56] *** synth joined
[12:58] <pmichaud> Good morning, #perl6

[12:59] <wayland76> Good morning

[12:59] <wayland76> Did you get my message asking about the branch with the make files?

[13:00] <masak> mornin'.

[13:00] <pmichaud> I'm way behind on email

[13:00] <pmichaud> (and other messaging environments)

[13:00] <pmichaud> today's the first "free" day I've had since last Thursday

[13:01] *** ejs1 left
[13:03] <pmichaud> wayland76: was the message sent via email, irc, rt, or ... ?

[13:03] <wayland76> ok.  The basic question was, can you give me a link to a diff (or the branch) that has the changed makefiles in it?

[13:03] <wayland76> (sent via lambdabot and phenny)

[13:04] *** Gothmog_ left
[13:04] *** twigil left
[13:04] <pmichaud> branch is the "ins" branch in github

[13:04] <wayland76> Ok, thanks.  

[13:04] <pmichaud> it's out of date already, but the basic issues are addressed there

[13:05] <wayland76> Ok

[13:05] <pmichaud> current problem is that pbc_to_exe still depends on the build tree

[13:05] <wayland76> Ok.  I´m going to need to make my RPM patches follow it, that´s all :)

[13:06] <pmichaud> sounds good.  :-)

[13:06] *** jaldhar left
[13:06] <pmichaud> But I really hope the whole install process gets a good refactor rather than us just plastering more slop on top of it to make things work.

[13:07] <pmichaud> (It's a hope, not an expectation, alas.)

[13:07] <wayland76> Well, I´ve been talking to kid51

[13:08] <pmichaud> excellent

[13:08] <wayland76> My hope all along has been to make the Rakudo install process use any relevant and useful bits from the parrot install process

[13:08] <pmichaud> Please, no.

[13:08] <wayland76> And he said that you said that the Parrot install process needs reworking

[13:08] <pmichaud> In some ways I think that's the wrong direction.

[13:09] <pmichaud> should we switch this discussion to #parrot ?

[13:09] <wayland76> Ok, although I´ll need to go to bed sometime soon.  I´ll be there in a minute

[13:11] *** skids_ joined
[13:18] *** pmurias joined
[13:19] <pmurias> wayland76: re keep on disk, doing two multiplications is likely (way) faster then doing a disk lookup

[13:19] <wayland76> pmurias: Yes, I wasn´t following the thread closely enough :)

[13:23] *** stDavid joined
[13:29] *** molaf_x joined
[13:29] *** Util joined
[13:32] <Util> What is Perl 6 equiv of Perl 5's $::foo and &::bar? Is the bare :: shortcut for main:: still around?

[13:33] *** mizioumt joined
[13:34] <masak> Util: I don't believe so, but safest bet is to check the synopses.

[13:34] <moritz_> maybe the $*foo thing?

[13:36] *** c9s joined
[13:37] <masak> surely not an exact equivalent?

[13:37] <moritz_> no

[13:37] <moritz_> but it used to mean "look in the global namespace"

[13:38] *** stDavid left
[13:42] *** jaldhar joined
[13:42] <pmichaud> GLOBAL::

[13:44] <masak> THERMONUCLEAR::

[13:44] <Util> PEACE::

[13:44] <masak> :)

[13:44] <pmichaud> I don't think there's a shortcut for GLOBAL::  .

[13:45] *** bacek left
[13:45] <pmichaud> and GLOBAL:: is really CORE::GLOBAL

[13:46] *** araujo left
[13:47] <Util> Maybe binding (:=) symbols in the current package to the same-named symbols in GLOBAL:: at the top of a module will be a good equivalent Perl 6 idiom?

[13:48] *** azawawi joined
[13:49] <azawawi> hi, is ctrl-shift-1 an easy shortcut to use on uk/german keyboards?

[13:49] <moritz_> better than Ctrl+~ in any case

[13:50] <azawawi> moritz_: thx

[13:51] *** alester joined
[13:51] <alester> Anyone know who texted me about admin access for pmichaud from 201 area code?

[13:52] *** stDavid_ joined
[13:54] *** stDavid_ left
[13:54] <pmichaud> alester: particle

[13:55] <alester> aha

[13:55] *** Util left
[13:55] <alester> I have never seen his phone #

[13:55] <pmurias> azawawi: ctrl-shift-1 is ctrl-! ?

[13:56] <azawawi> pmurias: yeah..

[13:56] *** Gothmog_ joined
[13:57] <rgs> on french keyboards you need a shift to type 1, so shift-1 isn't possible. (or hit both shift keys ?)

[13:57] <pmurias> azawawi: re quick fix animated gifs, $foo = -1 should be changed into my $foo = -1; and if(1) {...} into if 1 { }

[13:57] <pmurias> rgs: what's more important then 1?

[13:58] <moritz_> 0

[13:59] <azawawi> pmurias: sure but what if you had $foo == 1... it is a bit generic i know.

[13:59] *** REPLeffect joined
[14:01] *** jaldhar left
[14:03] <masak> perldoc.perl.org is one of the nicest-layouted Perl pages on the Web.

[14:03] <masak> but what happened to the bullet list here? http://perldoc.perl.org/perlsyn.html#Switch-statements

[14:04] <moritz_> =item o

[14:04] <moritz_> ...

[14:04] <rgs> fixed in bleda

[14:04] <rgs> blead

[14:04] *** jaldhar joined
[14:04] <rgs> (with =item *)

[14:05] <pmurias> azawawi: fixing $foo == 1 is hard as it's need some value in $foo for the comparision to be usefull

[14:05] <masak> oh, good.

[14:08] <moritz_> rgs: btw I found your post on the future of perl 5 very interesting, thank you

[14:08] <rgs> thanks

[14:09] <masak> URL?

[14:10] *** last left
[14:10] <moritz_> http://consttype.blogspot.com/2009/06/future-of-perl-5.html

[14:10] <masak> dz

[14:12] *** masak left
[14:12] <wayland76> 'night all

[14:12] *** wayland76 left
[14:13] *** finanalyst left
[14:19] <azawawi> pmurias: here is the new try { } quick fix which only appears when you have no std errors - http://feather.perl6.nl/~azawawi/quick_fix/quick_fix_ani.gif

[14:26] <moritz_> azawawi: $foo is a variable, not an attribute (in your animation)

[14:27] <azawawi> moritz_: i know. :)

[14:27] <azawawi> moritz_: but im lazy :)

[14:30] <pmurias> use !!! instead of #XXX-implement

[14:32] <azawawi> pmurias: for # (TODO|XXX...etc) - implement; i think we can have that configurable in Padre somewhere

[14:32] <pmurias> rakudo: !!!

[14:32] <p6eval> rakudo 10f223: OUTPUT«Syntax error at line 2, near "!!!"␤in Main (src/gen_setting.pm:0)␤»

[14:33] <pmurias> pugs: sub foo {!!!};foo();

[14:33] <p6eval> pugs: OUTPUT«*** Unimplemented stub called␤    at /tmp/BxPjH9moyb line 1, column 15-20␤       /tmp/BxPjH9moyb line 1, column 10-13␤»

[14:34] <azawawi> pmurias: what's !!! ?

[14:34] <pmurias> azawawi: die, as this thing is not implemented yet

[14:34] <moritz_> it's the "this is a stub" marker

[14:34] <pmurias> the lethal variant

[14:34] <moritz_> right

[14:34] <moritz_> ... is fail()

[14:35] <moritz_> !!! is die()

[14:35] <moritz_> and ??? is warn()

[14:35] <moritz_> or so.

[14:35] <azawawi> really? :)

[14:35] * azawawi learnt a lot of Perl 6 while doing implementing quick fixes...

[14:36] <azawawi> s/learnt/learned/

[14:38] *** dj-dongdot joined
[14:39] *** cottoo joined
[14:39] *** cotto left
[14:41] *** ruoso joined
[14:41] *** azawawi left
[14:42] *** nihiliad joined
[14:57] *** justatheory joined
[14:58] <jaldhar> take a look at this code:  repeat { state $count = 0; } until ++$count == 5;

[14:58] <jaldhar> rakudo gives: Symbol '$count' not predeclared in <anonymous> 

[14:59] <jaldhar> is that right?

[14:59] *** sri_kraih_ joined
[14:59] <moritz_> that's right

[15:00] <moritz_> because the scope of $count is limited to the block it's declared in

[15:00] <spx2> ~

[15:00] <s1n1> am i reading that snippet right, an infinite loop? or are state variables only assigned like that once?

[15:00] <moritz_> s1n1: it's a compile time error, nothing else.

[15:01] *** s1n1 is now known as s1n_yapc

[15:01] <s1n_yapc> moritz_: but i was referring to the intent of the repeat {} loop

[15:01] <moritz_> rakudo: while 1 { state $x = 0; last if $x++ > 5 }; say $x

[15:01] <s1n_yapc> in that it does it repeatedly reassign $count to 0?

[15:01] <p6eval> rakudo 10f223: OUTPUT«Symbol '$x' not predeclared in <anonymous> (/tmp/zvUygAeK4O:2)␤in Main (src/gen_setting.pm:3225)␤»

[15:01] <jaldhar> moritz_: so the repeat...until is not "part" of the block?  but why is for or while different?  (or is it?)

[15:01] <moritz_> rakudo: while 1 { state $x = 0; say $x; last if $x++ > 5 };

[15:01] <p6eval> rakudo 10f223: OUTPUT«0␤1␤2␤3␤4␤5␤6␤»

[15:01] <moritz_> jaldhar: it's not different

[15:02] <jaldhar> s1n_yapc: no only the first time

[15:02] <s1n_yapc> moritz_: okay

[15:02] <moritz_> jaldhar: a block extends from its opening brace to its closing brace

[15:02] <moritz_> no Perl 5-like exceptions

[15:03] <jaldhar> moritz_: ok.  I was thinking about things like for < 1 2 3 4 5 > -> $count { say $count; }

[15:05] <moritz_> jaldhar: that's something else

[15:05] <moritz_> there -> $count is a signature

[15:05] <moritz_> which introduces $count as a formal parameter for that block

[15:06] <jaldhar> I see

[15:08] <pmichaud> (the arrow is part of the block, not part of the 'for')

[15:09] <moritz_> right

[15:09] <huf> how do blocks differ from anonymous subs?

[15:09] <moritz_> rakudo: my $x = -> $a { $a * $a }; say $x.WHAT

[15:09] <p6eval> rakudo 10f223: OUTPUT«Block()␤»

[15:09] <moritz_> huf: return() stops at sub boundaries, but not at block boundaries

[15:10] <pmichaud> rakudo: my $x = sub ($a) { $a * $a };  say $x.WHAT;

[15:10] <p6eval> rakudo 10f223: OUTPUT«Sub()␤»

[15:10] <huf> so you cant do for @list sub { .. } ?

[15:10] <moritz_> huf: no

[15:10] <pmichaud> std:  for @list sub ($_) { ... }

[15:10] <p6eval> std 27182: OUTPUT«##### PARSE FAILED #####␤Missing block at /tmp/GGe2qS4QtC line 1:␤------> [32mfor @list [31msub ($_) { ... }[0m␤    expecting any of:␤    infix or meta-infix␤      infix stopper␤    parameterized block␤      standard stopper␤ terminator␤Other potential difficulties:␤  Variable

[15:10] <p6eval> ..@list is not pred…

[15:11] <moritz_> huf: 'for' has a grammar rule that expects a block afterwards

[15:11] <huf> mhm

[15:11] <pmichaud> it wants a block, not a sub declaration.

[15:11] <moritz_> you can do it with map, though

[15:11] <moritz_> rakudo: say <a b c>.map: sub ($x) { uc $x }

[15:11] <TimToady> rehi

[15:11] <p6eval> rakudo 10f223: OUTPUT«ABC␤»

[15:11] * TimToady is in despair at the backlog...

[15:11] *** moritz_ sets mode: +o pmichaud

[15:12] <huf> but $a = -> {}; and the you can do $a(); correct?

[15:12] <moritz_> huf: correct

[15:12] <TimToady> correct

[15:14] *** sri_kraih left
[15:18] *** rfordinal left
[15:19] *** rfordinal joined
[15:20] *** donaldh left
[15:20] *** donaldh joined
[15:20] *** donaldh left
[15:20] *** dj-dongdot left
[15:30] *** masak joined
[15:31] *** jaldhar left
[15:33] <masak> rakudo: given 42 -> $foo { say $foo }

[15:33] <p6eval> rakudo 10f223: OUTPUT«42␤»

[15:34] <masak> rakudo: my @a = 1..3; given @a -> $a, $b, $c { say $a }

[15:34] <p6eval> rakudo 10f223: OUTPUT«too few arguments passed (1) - 3 params expected␤in Main (/tmp/mYGyO3r5rL:1)␤»

[15:35] <TimToady> rakudo: my @a = 1..3; given @a -> [$a,$b,$c] { say $a }

[15:35] <p6eval> rakudo 10f223: OUTPUT«Statement not terminated properly at line 2, near "-> [$a,$b,"␤in Main (src/gen_setting.pm:0)␤»

[15:35] <TimToady> that one should work

[15:35] <masak> std: my @a = 1..3; given @a -> [$a,$b,$c] { say $a }

[15:35] <p6eval> std 27182: OUTPUT«ok 00:02 38m␤»

[15:35] <moritz_> well, rakudo doesn't do any parameter unpacking yet

[15:36] * masak looks forward to parameter unpacking

[15:36] <TimToady> parameter unpacking is the road to tree matching

[15:36] <masak> std: my [$a,$b,$c] = [1..3];

[15:36] <p6eval> std 27182: OUTPUT«##### PARSE FAILED #####␤Malformed my at /tmp/MYGV8rIMyu line 1:␤------> [32mmy [31m[$a,$b,$c] = [1..3];[0m␤    expecting scoped declarator␤FAILED 00:02 35m␤»

[15:37] <TimToady> [] is not a signatre

[15:37] <TimToady> *ture

[15:37] *** jaldhar joined
[15:39] *** s1n_yapc left
[15:39] *** rfordinal left
[15:40] *** Psyche^ joined
[15:40] *** Psyche^ is now known as Patterner

[15:43] <masak> TimToady: so the thing between '->' and '{' is not a signature?

[15:43] *** frew left
[15:45] *** Whiteknight left
[15:45] <TimToady> it is a signature, by context

[15:45] <TimToady> it wouldn't be a signature without the -> in front

[15:47] *** Chillance joined
[15:47] *** last joined
[15:52] <PerlJam> TimToady: so, how do you do the array unpacking as masak intended?

[15:53] <TimToady> basically you bind the inside of [] or () as a subsignature

[15:53] <TimToady> they're really much the same

[15:53] *** s1n1 joined
[15:53] <TimToady> the [] is more like documentation that you only expect a list

[15:54] <masak> that's all very well, but how to write it?

[15:54] <TimToady> you already have signature binding, how hard can it be to call itself recursively?

[15:56] * masak follows not

[15:57] *** s1n1 left
[15:57] <PerlJam> yeah, I think I need some syntax or something.

[15:58] <masak> yes, my thought exactly.

[15:58] <masak> we're syntax-deprived simpletons, here. :)

[15:59] <moritz_> Perl 6: syntax driven development

[16:02] <PerlJam> at a guess,  :([$a,$b,$c]) = [1..3];    # not sure if I need := though

[16:02] *** cdarroch joined
[16:02] <PerlJam> (not sure of anything really, this is just what my memory tells me right now)

[16:03] * PerlJam checks the synopsis

[16:03] <huf> can you do something like erlang and its ilk have?

[16:03] <huf> take apart a complex data structure in one line

[16:03] *** cottoo left
[16:06] <moritz_> like haskell's pattern matching?

[16:06] <PerlJam> huf: probably.  That sounds like what we're talking about now.

[16:07] <masak> yes. it's especially attractive in for loops, I think.

[16:07] <masak> std: my @a = [[1, 2], [3, 4]]; for @a -> [$a, $b] { say ($a => $b).fmt }

[16:07] <p6eval> std 27182: OUTPUT«ok 00:03 39m␤»

[16:08] <masak> \o/

[16:08] <PerlJam> std: :([$a,$b,$c]) = [1..3]

[16:08] <p6eval> std 27182: OUTPUT«ok 00:02 37m␤»

[16:08] <masak> std: my :([$a,$b,$c]) = [1..3]

[16:08] <p6eval> std 27182: OUTPUT«##### PARSE FAILED #####␤Malformed my at /tmp/KJ7D9vzRZq line 1:␤------> [32mmy [31m:([$a,$b,$c]) = [1..3][0m␤    expecting scoped declarator␤FAILED 00:02 35m␤»

[16:08] <masak> :(

[16:08] <moritz_> my ($a, $b, $c) = 1..3;

[16:09] <PerlJam> moritz_: he wants the more complicated version of that though :)

[16:10] <PerlJam> masak: I think :($a,$b,$c) doesn't need the my

[16:10] <masak> moritz_: given @a = [[1,2],[3,4]], how do I assign directly from @a into four new variables?

[16:11] <masak> PerlJam: oh. that's good news, in that case.

[16:11] <masak> PerlJam: if they don't need the my, how do I express an 'our' equivalent? :)

[16:11] *** viklund joined
[16:11] <PerlJam> masak: can you do that in subroutine signatures?

[16:12] <huf> is this just in sub signatures?

[16:12] <viklund> o/

[16:14] * PerlJam doesn't know if :() can be used in an lvalue context though

[16:14] <jaldhar> come on guys you need to implement :-) somehow

[16:15] <PerlJam> all of the examples in the synopses I've found have :() as rvalue

[16:15] <masak> jaldhar: write a module!

[16:15] <amoc> std:  sub foo ([$a, $b]) { ... }

[16:15] <p6eval> std 27182: OUTPUT«ok 00:02 37m␤»

[16:17] *** azawawi joined
[16:17] <azawawi> home sweet home :)

[16:18] <PerlJam> rakudo: sub postfix:< :-) >($x) { say "$x : happy?" };  "jaldhar" :-)

[16:18] <p6eval> rakudo 10f223: OUTPUT«jaldhar : happy?␤»

[16:19] <masak> huh, don't postfix ops require unspace nowadays?

[16:19] <PerlJam> oh .. maybe.  If so, bug.

[16:19] <masak> an already-reported one, I suspect.

[16:20] <masak> std: sub postfix:< :-) >($x) { say "$x : happy?" };  "jaldhar" :-)

[16:20] <p6eval> std 27182:  ( no output )

[16:20] <PerlJam> rakudo++

[16:20] <masak> note that STD.pm chickened out on that one.

[16:20] *** M_o_C joined
[16:20] <masak> it didn't say "ok".

[16:21] <PerlJam> it didn't complain either.  That makes rakudo right  ;)

[16:21] <masak> I'm not saying you're right. :P

[16:22] <jaldhar> PerlJam: awesome!

[16:23] *** rfordinal joined
[16:23] <PerlJam> btw, when I was writing that example for jaldhar, I wanted to write "suffix" rather than "postfix".  Am I the only one who thinks that way?

[16:24] <masak> PerlJam: yes. :P

[16:24] <amoc> rakudo: sub postfix:< PFIX >($x) { say "$x : happy?" };  "jaldhar" PFIX

[16:24] <p6eval> rakudo 10f223: OUTPUT«jaldhar : happy?␤»

[16:25] <TimToady> that's no good

[16:25] <jaldhar> fwiw postfix sounds better to me

[16:25] <jaldhar> suffix means eg -ing -ed etc.

[16:25] <TimToady> std: sub postfix:< PFIX >($x) { say "$x : happy?" };  "jaldhar" PFIX

[16:25] <huf> you could impement those too :D

[16:25] <p6eval> std 27182: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/5Z3yTfkubI line 1:␤------> [32m>($x) { say "$x : happy?" };  "jaldhar" [31mPFIX[0m␤    expecting any of:␤     infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤ 

[16:25] <p6eval> ..terminator␤FAILED 00:05 45…

[16:25] <PerlJam> jaldhar: prefix/suffix make a natural pair for me.

[16:26] <TimToady> std: sub postfix:< :-) >($x) { say "$x : happy?" };  "jaldhar" :-)

[16:26] <p6eval> std 27182: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/cOYifZWMBl line 1:␤------> [32m>($x) { say "$x : happy?" };  "jaldhar" [31m:-)[0m␤    expecting any of:␤      infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤ 

[16:26] <p6eval> ..terminator␤FAILED 00:05 45m…

[16:26] <last> moritz_: I'm too lazy to prove this, but it appears that just as there are only 22 possible last two digits (base 10) for squares, there are 44 possible last two hex digits for a square.  That should provide a very fast test to filter out 82% of all positive integers as  non-squares (presuming you can easily get at the binary representation of your number).

[16:26] <TimToady> std: sub postfix:< :-) >($x) { say "$x : happy?" };  "jaldhar"\ :-)

[16:26] <p6eval> std 27182: OUTPUT«ok 00:05 45m␤»

[16:26] <PerlJam> okay, two bugs then

[16:26] <TimToady> lunch &

[16:27] <masak> I'm not submitting, because I believe both are known/submitted.

[16:27] <PerlJam> yeah, I was going to look just in case

[16:28] *** aindilis left
[16:28] *** s1n1 joined
[16:29] *** clintongormley left
[16:30] <masak> PerlJam: good idea.

[16:31] <masak> rakudo: "foo" ~~ /foo/; sub bar() { say $/ }; bar

[16:31] <p6eval> rakudo 10f223: OUTPUT«Use of uninitialized value␤␤»

[16:32] <masak> what if I want $/ to be $OUTER::/ in a sub?

[16:33] <PerlJam> isn't OUTER for lexical scopes anyway?  I thought $/ was dynamically scoped.

[16:34] <PerlJam> (well, supposed to be dynamically scoped even if rakudo doesn't think so)

[16:37] *** amoc left
[16:42] <PerlJam> oh no, looks like $/ is lexically scoped.

[16:42] * PerlJam really needs to use perl 6 more 

[16:42] <moritz_> isn't it context<rw>?

[16:42] *** s1n1 left
[16:42] <masak> in the interests of release-early, let me announce Grampa, an XPath matcher for Match objects: http://github.com/masak/grampa

[16:43] <masak> s/me/us/, viklund++ is in it too.

[16:43] <azawawi> masak: hi

[16:43] <moritz_> grampa = grammar paths?

[16:43] <masak> azawawi: greetings.

[16:43] <masak> moritz_: aye.

[16:43] *** icwiener joined
[16:43] *** Chillance left
[16:44] <azawawi> masak: I am looking for Larry's recent YAPC speech. Any links/slides/video would be appreciated.

[16:45] <acajou> me would also be interested...

[16:45] <masak> azawawi: I'm as in the dark as you about that.

[16:45] <masak> I'm not on YAPC|NA.

[16:45] <acajou> s#me#/me# :)

[16:45] <moritz_> usually they take much more time to appear somewhere

[16:45] <azawawi> masak: so we're in the same ship; cool :)

[16:45] <acajou> I wish some were Webcast...

[16:46] <masak> azawawi: yes, so let me know if you find something... :)

[16:46] * acajou too!

[16:46] * azawawi will do for sure

[16:47] <masak> afk # food

[16:47] <azawawi> hmmm... PerlCritic quick fixes or Perl 6 rename var / extract method :)

[16:47] *** frew joined
[16:48] *** Psyche^ joined
[16:49] <masak> azawawi: the totally unbiased answer of this channel is "Perl 6 rename var". :)

[16:56] *** mj41 left
[16:57] *** s1n1 joined
[16:59] *** mj41 joined
[17:04] *** icwiener_ joined
[17:05] *** Patterner left
[17:05] *** Psyche^ is now known as Patterner

[17:08] *** ruoso left
[17:09] *** cottoo joined
[17:11] *** zamolxes left
[17:13] *** M_o_C left
[17:18] *** icwiener left
[17:20] *** [particle] left
[17:20] *** [particle] joined
[17:21] <pmichaud> azawawi/masak:  Larry's talk did not have slides this year.

[17:21] <pmichaud> It was completely live demo.

[17:22] <azawawi> pmichaud: thx

[17:24] <azawawi> pmichaud: who wrote the 'padre' dumper for PGE highlighter?

[17:24] *** perlmongo joined
[17:24] <pmichaud> azawawi: some hacker called "pmichaud"

[17:24] <pmichaud> s/called/nicknamed/

[17:24] <pugs_svn> r27183 | lwall++ | [CORE] add Cat type

[17:25] <pmichaud> TimToady: is the "Cat" type meant to chase down the Rats?

[17:26] <TimToady> it's meant to be a virtual string

[17:26] <pmichaud> forgot my smiley :-|

[17:26] <TimToady> cats play with string, after all

[17:26] <azawawi> pmichaud: after enabling it in Padre Perl 6; i found that it does not generate any 'pod_comment' or 'hash_comment' records.

[17:27] <pmichaud> I think we're not currently capturing pod_comments

[17:27] <azawawi> pmichaud: it is really super-fast... pmichaud++

[17:28] *** nErVe joined
[17:31] *** justatheory left
[17:31] <masak> what's a virtual string? I thought we had enough issues with our physical strings... :P

[17:31] <pmichaud> The physical strings had insufficient virtuality.

[17:31] <pmichaud> :-P

[17:32] <pmichaud> which is yet another issue with physical strings, which is why the virtual strings are addressing that issue....

[17:32] <pmichaud> obviously I have been too long at yapc|10 and my brain is now tapioca.

[17:34] <moritz_> and you learned about all these new layers of indirection that you have to implement? ;-)

[17:34] <pmichaud> it's abstraction levels, all the way down.

[17:34] <masak> what's wrong with this picture? http://news.perlfoundation.org/2009/06/

[17:34] <PerlJam> it's not a picture at all?  :)

[17:35] <masak> PerlJam: well, the thing that hits your retinas is. but s/picture/page/, if that makes you see it.

[17:35] <PerlJam> But the word "no" appears far too often in regards to progress.

[17:36] <masak> I was referring to the posts numbering.

[17:36] <PerlJam> oh, yeah 

[17:36] <PerlJam> that too

[17:36] <masak> OTOH, this explains why I thought posts IX and X were missing last time.

[17:42] <szabgab> azawawi, do you think the parrot based syntax highlighter is fast enough for use ?

[17:44] <pugs_svn> r27184 | moritz++ | [t] simplify a test to not use outer lexicals in classes

[17:44] <pugs_svn> r27185 | moritz++ | [t] move oo/class_inheritance_become_infinite_loop.t to spec/

[17:44] *** s1n1 left
[17:44] <moritz_> the file that I just moved also causes errors in rakudo

[17:44] <azawawi> szabgab: yeah it is very fast; but ofcourse we lose STD's error reporting if we use it.

[17:44] <moritz_> with an error I haven't seen before

[17:44] *** s1n1 joined
[17:44] <moritz_> "Null PMC access in get_string()

[17:44] <moritz_> current instr.: 'parrot;P6metaclass;register' pc 654 (runtime/parrot/library/P6object.pir:434)

[17:45] *** s1n1 is now known as s1n_yapc

[17:45] <moritz_> "

[17:45] <szabgab> azawawi, then we should try to generalize it to be able to highlight any parrot based syntax

[17:45] <szabgab> and we are on the right track to world domination

[17:46] <azawawi> szabgab: sure once we get p6 refactoring working first...

[17:46] <szabgab> ok, so tomorrow?

[17:46] <szabgab> or next week ?

[17:46] <azawawi> szabgab: no idea really :)

[17:48] *** explorer joined
[17:49] *** s1n_yapc left
[17:50] <huf> is anyone working on p6 vim integration?

[17:50] <viklund> huf: how do you mean?

[17:50] <moritz_> huf: literal++ did some very good work

[17:51] <moritz_> huf: I don't know what else you'd need

[17:51] <masak> huf: there's a perl6.vim in the Pugs repository.

[17:51] <moritz_> http://github.com/hinrik/vim-perl is the up-to-date location

[17:51] <huf> hmm.. padre has its own editor, right? no way to embed vim/emacs?

[17:52] <szabgab> huf, not likely but we have plugins for both vi and emacs mode

[17:52] <huf> eh :*

[17:52] <huf> :( i mean

[17:52] <szabgab> just neither of them really for production use

[17:52] <moritz_> but perl6.vim is pretty good for syntax hilighting

[17:53] <szabgab> yeah, I guess it is better for the vim addicts among us :-)

[17:53] <moritz_> rakudo: say (-8) % 5

[17:53] <p6eval> rakudo 10f223: OUTPUT«2␤»

[17:53] *** jaldhar left
[17:53] <huf> i just dont see why we need another editor when there are two that can do everything :D

[17:53] <pugs_svn> r27186 | lwall++ | [CORE] add Test::EXPORT::DEFAULT entries

[17:53] <pugs_svn> r27186 | lwall++ | [Cursor] import from DEFAULT to fix 'use Foo::Bar; use Foo;' problem

[17:54] *** s1n1 joined
[17:54] <PerlJam> if padre were more vim-like, I'd probably use it more.

[17:54] <moritz_> huf: they don't make coffee.

[17:54] <huf> moritz_: is that a challenge? :D

[17:54] *** jaldhar joined
[17:54] <masak> huf: writing your own plugins in Perl is quite an incentive.

[17:54] *** barney joined
[17:54] <moritz_> huf: no, but you're surely invited to view it as such ;-)

[17:54] <huf> :))))

[17:54] <szabgab> huf, the simple answer is that neither vim nor emacs fits most of the people out there

[17:54] <huf> odd people

[17:54] <huf> ;)

[17:55] *** justatheory joined
[17:55] <huf> o well, that means no padre and automatic refactoring and whatnot for me 

[17:55] <szabgab> yeah, but that's about 99.37% of the (potential) user

[17:55] <szabgab> =-

[17:55] <szabgab> +-

[17:56] <masak> "szabgab turned to speak entirely in symbols"

[17:56] <szabgab> but we would welcome someone to fix the vi plugin to make it really awesome

[17:56] <huf> oh, i understand the need for a full-featured IDE by the time p6 is ocmplete

[17:56] <PerlJam> szabgab: it sounds like you just said padre isn't for power users as they all use vim/emacs anyway

[17:56] <huf> i just dont like to use more than one program for one purpose

[17:57] <huf> editing text -> vim

[17:57] <szabgab> power users can use Padre but I think most of them can also use vimacs

[17:57] <huf> yeah, we'll probably cope

[17:57] <szabgab> huf, funny I used to use similar  explanation why I am using gvim on windows

[17:58] <PerlJam> szabgab: I was just thinking that many of padre's cool features are geared towards power users, but maybe they're geared more towards making "ordinary" people power users.

[17:58] <szabgab> but then I decided I can try to stop using it in order to build padre

[17:58] <pmichaud> a thought:  perhaps the purpose of an ide should be to help people become more powerful :-)

[17:59] <PerlJam> unix is still my ide of choice :)

[17:59] <szabgab> I think my primary intention is to make Padre really good for beginners. As I am not good enough to build such a tool, the way to do that is to make Padre interesting for power users who in turn will make Padre really awesome for everyone

[17:59] <PerlJam> szabgab++

[18:00] <huf> nah. they'll make another vim :D

[18:00] *** Molaf left
[18:00] <szabgab> huf, in a way yes I guess

[18:00] *** Molaf joined
[18:00] <szabgab> but with a default editing mode similar to notepad and co

[18:00] <PerlJam> huf: vim is nice, but there are some things I wish it had that it does not.

[18:00] <huf> PerlJam: yep

[18:00] <PerlJam> huf: If textmate and vim had a kid, that would be the perfect editor.

[18:01] <pugs_svn> r27187 | moritz++ | [t] merge syntax/decl_vs_assign_prec.t into spec/

[18:01] <moritz_> Q: how do you know you're in a geek channel? A: the people around you talk about text editors having kids

[18:02] <szabgab> PerlJam, I'd really like to see a list of all the awesome features of Textmate,  preferably in the form of open tickets on http://padre.perlide.org/

[18:02] <PerlJam> szabgab: padre seems to have all of the awesome features I care about (except that it's not enough like vim :)

[18:02] <szabgab> and/or we have a page listing features of padre that are linked to tickets

[18:03] <szabgab> oh, nice to hear that

[18:03] <huf> just make it an option to embed vim instead of padre's own editor

[18:03] <huf> there's a simple ide that does that, dunno if it could be done in this case

[18:03] <szabgab> huf, rindolf shopped around for embedding vim but did not come up with any solution

[18:04] <szabgab> so for now the Padre::Plugin::Vi is the best bet

[18:04] <szabgab> it has serious missing features but it does have the two modes of vim

[18:05] *** bacek joined
[18:07] *** jferrero joined
[18:07] *** jferrero left
[18:08] <moritz_> 621 files in t/spec/, 30 left to be moved.

[18:08] *** explorer left
[18:08] *** nErVe left
[18:09] <masak> moritz_: I just want to take this opportunity to say that I think your work on the test suite has been amazing.

[18:09] *** explorer joined
[18:09] <moritz_> thanks

[18:09] * moritz_ happy

[18:09] <dalek> rakudo: 0e0671a | moritz++ | t/spectest.data:

[18:09] <dalek> rakudo: another passing integration test

[18:09] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/0e0671a13c6f2f21613eb18a458222febd4c7146

[18:10] <pugs_svn> r27188 | kyle++ | [t/spec] Fix the Greek autoincrement test I wrote past my bed time

[18:10] *** KyleHa joined
[18:11] <masak> KyleHa: yes, never autoincrement Greeks past your bedtime. :)

[18:11] *** fdgkldgjfg joined
[18:11] <KyleHa> "x" means "hex", folks.

[18:11] <phenny> KyleHa: 06:50Z <moritz_> tell KyleHa yes, it should be a runtime error

[18:12] <fdgkldgjfg> where is perl 6?

[18:12] <KyleHa> phenny: Thank you!!

[18:12] <moritz_> fdgkldgjfg: wherever you install it ;-)

[18:12] <PerlJam> rakudo: "Perl 6 is right here!".say

[18:12] <p6eval> rakudo 10f223: OUTPUT«Perl 6 is right here!␤»

[18:12] <masak> rakudo: say "fdgkldgjfg: I'm right here!"

[18:12] <p6eval> rakudo 10f223: OUTPUT«fdgkldgjfg: I'm right here!␤»

[18:12] <masak> PerlJam: great minds think alike.

[18:12] <fdgkldgjfg> rakudo fails, i want a perl6 that can pass spec

[18:12] <PerlJam> indeed :)

[18:13] <masak> fdgkldgjfg: yeah, know the feeling.

[18:13] * moritz_ too

[18:13] <huf> o/

[18:13] <masak> \o

[18:13] <fdgkldgjfg> i know, i'll make my own

[18:13] <huf> i want a time-machine

[18:13] <masak> yes, you do that.

[18:13] <masak> I want a cat.

[18:13] <huf> among other problems, it'd solve this 

[18:13] <PerlJam> fdgkldgjfg: just wait in a cryogenic chamber for a while.

[18:13] <huf> altho it'd stifle p6 development

[18:13] <huf> if we could just bring back future versions

[18:13] <fdgkldgjfg> freeze myself up in the mountains?

[18:13] <moritz_> fdgkldgjfg: feel free, and tell us where your project lives

[18:14] <fdgkldgjfg> i will call it perlthon.

[18:14] <masak> fdgkldgjfg: I'd love to have another Perl 6 implementation.

[18:14] <huf> masak: get a cat. seriously. they are better than a million hotdogs.

[18:14] <masak> huf: I know!

[18:14] <fdgkldgjfg> masak: why, is rakudo bad iyo?

[18:14] <KyleHa> Spec says "Decrement of 'A00' should fail".  What does that mean?  How do I test for that "fail"?

[18:14] <masak> fdgkldgjfg: "bad" is a strong word.

[18:14] <PerlJam> fdgkldgjfg: we just don't have enough of them.  There's only 3 (I think)

[18:14] <fdgkldgjfg> make a motivational post out of it?

[18:15] <fdgkldgjfg> masak: explain (i'm interested)

[18:15] <moritz_> KyleHa: I assume it will return some undef value

[18:15] <huf> dont more implementations mean more implementation-dependent clusterfucks? like we have with c/c++ compilers?

[18:15] <huf> ;)))

[18:15] <moritz_> fdgkldgjfg: read masak's blog, he often points out some weaknesses

[18:15] <masak> fdgkldgjfg: Rakudo keeps getting more and more great with every day. for real.

[18:15] <moritz_> fdgkldgjfg: as do I on my blog

[18:15] <masak> fdgkldgjfg: but there are times when it still really sucks.

[18:15] <fdgkldgjfg> please post a link, i'm bored at work

[18:15] *** xinming joined
[18:15] <moritz_> http://use.perl.org/~masak/journal/

[18:16] <moritz_> http://perlgeek.de/blog-en/perl-6/

[18:16] <masak> why, thanks. :)

[18:16] <fdgkldgjfg> sweet. i tried reading yegge's blog earlier... it actually made me go back to working

[18:20] <masak> fdgkldgjfg: we'll get you un-bored at work in no time!

[18:20] <pmichaud> moritz_: (RT #66826)   the patch contains some executable code at the bottom... is that intentional, or is it to be stripped out when applying the patch?

[18:20] <moritz_> fdgkldgjfg: also http://planetsix.perl.org/ is a nice blog aggregator, covering most Perl 6 blogs out there

[18:21] <fdgkldgjfg> a king among men, you are

[18:21] <fdgkldgjfg> and when my boss catches me i am merely researching

[18:21] <moritz_> pmichaud: to be stipped (actually forgot to remove it)

[18:21] <KyleHa> fdgkldgjfg: How do you pronounce your nick?

[18:21] <masak> fdgkldgjfg: yes, "future technologies in computing". :)

[18:21] <pmichaud> moritz_: okay, thanks.

[18:21] <fdgkldgjfg> fitzkerpatrick

[18:21] <masak> KyleHa: as it sounds, of course. :P

[18:21] <pmichaud> I suspect the problem is that the code for operator overloading tries to adjust the optable

[18:22] <viklund> fdgkldgjfg: :D

[18:22] <moritz_> I also tried it with an already-parsed op (infix:<eqv>, same result)

[18:22] <pmichaud> right

[18:22] <pmichaud> I think that's the same issue

[18:22] <PerlJam> masak: I just saw your post regarding 3d svg from Jun 19.    Very cool.

[18:22] <masak> fdgkldgjfg: I think I'll call you "Fitz" for short.

[18:23] <masak> PerlJam: thank you! I'm halfway to doing the next level of cool with regards to that. interactive 3d SVG.

[18:23] <moritz_> masak: do you know if current browsers support that at all?

[18:23] <masak> moritz_: yes, I think most do.

[18:24] <masak> SVG is fairly deployed nowadays.

[18:24] <masak> and screw the rest. :P

[18:24] <sbp> who maintains p6eval again?

[18:24] <sbp> (no information from /whois)

[18:24] * moritz_ mostly

[18:25] * masak very little

[18:25] * viklund not at all

[18:25] <sbp> moritz_, masak, !viklund: would it be possible to have it inhabit another channel?

[18:25] * masak thinks so

[18:25] <moritz_> sbp: sure, if the inhabitants of the other channel don't oppose that

[18:25] <masak> unless all the inhabitants are also bots.

[18:25] <sbp> it's my channel so they'll like it or face the jolly fist of doom

[18:26] <sbp> or both, more than likely. and yes, they're mainly bots

[18:26] <masak> bots don't have a say.

[18:26] *** p6eval left
[18:27] <sbp> don't be so sure; they can already form unions

[18:27] *** p6eval joined
[18:27] * masak read 'they can already form unicorns'

[18:27] <PerlJam> masak: that proves it ... you live in a fantasy land.

[18:28] <PerlJam> (or you've done too many drugs ;)

[18:28] <masak> that reminds me. I've forgotten to feed my unicorn today.

[18:29] <masak> also, I hear Perl 6 is very big on the Unicorn standard.

[18:30] <sbp> hehe

[18:31] <viklund> haha, ha, aaa...

[18:31] <pugs_svn> r27189 | kyle++ | [t/spec] Added some more greek autoincrement tests

[18:31] * masak slaps viklund 

[18:31] <masak> @slap viklund 

[18:31] * lambdabot pokes viklund  in the eye

[18:32] <viklund> hey!

[18:32] * masak hides

[18:33] *** xinming_ left
[18:35] *** KyleHa left
[18:38] *** eternaleye joined
[18:39] *** _jaldhar joined
[18:39] *** stDavid joined
[18:40] *** jaldhar left
[18:40] <moritz_> rakudo: say  "\x[391]\x[3c9]";

[18:40] <p6eval> rakudo 10f223: OUTPUT«Αω␤»

[18:41] *** barney left
[18:41] <moritz_> rakudo: say "\x[392]\x[3b1]"

[18:41] <p6eval> rakudo 10f223: OUTPUT«Βα␤»

[18:41] *** s1n1 left
[18:42] <pugs_svn> r27190 | lwall++ | [STD] unbreak the check for do {} while

[18:45] *** stDavid left
[18:46] *** athomason joined
[18:47] *** perlmongo left
[18:51] *** alester left
[18:55] *** eternaleye left
[18:58] <sbp> confusing error message:

[18:58] <sbp> rakudo: my @a = 1...{ $_ >= 3 ?? () !! $_ + 1 }

[18:58] <p6eval> rakudo 0e0671: OUTPUT«Use of uninitialized value␤Use of uninitialized value␤Method 'postcircumfix:{ }' not found for invocant of class 'Failure'␤»

[18:58] <sbp> code from t/spec/S03-operators/series.t

[19:00] <masak> sbp: a very common error message, if you ask me.

[19:00] <masak> it means you're trying to index undef.

[19:00] <moritz_> sbp: that's because rakudo doesn't parse infix:<...> correctly

[19:01] <moritz_> sbp: I have a patch here that changes that, but it's not helpful either

[19:01] <moritz_> because it then says "null PMC access in find_method"

[19:01] <sbp> masak: where does the indexing take place?

[19:01] <sbp> moritz_: ah, fair enough. no problem that ... isn't implemented

[19:01] <sbp> was just entirely baffled by the error

[19:01] *** bacek left
[19:02] <sbp> I'm mainly waiting for the sequence guessing 1, 3, 5 ... and so forth

[19:02] <sbp> just because it's going to be a fun thing to demonstrate to people

[19:03] <masak> sbp: I don't know.

[19:03] <sbp> depending on whether the level of smarts it has exceeds people's boredom limitation... :-)

[19:03] <sbp> which, thinking about it, is probably quite unlikely

[19:03] <sbp> especially due to http://www.research.att.com/~njas/sequences/

[19:04] *** sw1sh left
[19:04] <moritz_> sbp: the sequence guessing will be very boring, because it covers only constant differences and factors

[19:05] <sbp> so, not even prime numbers?

[19:06] <moritz_> no.

[19:06] <sbp> so ... isn't even going to be as powerful as ^1?$|^(11+?)\1+$? :-)

[19:06] <moritz_> that's a good task for a module

[19:06] <sbp> :-)

[19:07] <TimToady> std: do { s/.// } while $_;

[19:07] <p6eval> std 27190: OUTPUT«##### PARSE FAILED #####␤Obsolete use of do...while; in Perl 6 please use repeat...while instead at /tmp/8bLJkBM9Ea line 1:␤------> [32mdo { s/.// } while $_[31m;[0m␤FAILED 00:04 37m␤»

[19:08] *** azawawi left
[19:11] *** stDavid joined
[19:19] *** stDavid left
[19:25] *** stDavid joined
[19:26] <TimToady> n

[19:27] <masak> ∞

[19:31] *** meppl left
[19:31] <lichtkind> isnt :M file modification time - script start?

[19:32] <moritz_> it is, see S32::IO

[19:34] <TimToady> well, that's just how it was copied over from P5; not sure forcing it into that syntax really makes sense in P6

[19:36] <lichtkind> moritz_: i red that Syn but oh wait its numers not timepoints

[19:45] *** justatheory left
[19:49] *** ejs joined
[19:56] *** fdgkldgjfg left
[19:57] *** jan_ left
[20:01] *** explorer is now known as Guest88545

[20:02] *** Guest88545 left
[20:02] *** jferrero joined
[20:07] *** stDavid left
[20:07] *** justatheory joined
[20:07] *** jan_ joined
[20:11] *** ejs left
[20:18] *** REPLeffect left
[20:21] *** alester joined
[20:26] *** jaldhar_ joined
[20:27] *** _jaldhar left
[20:35] *** stDavid joined
[20:35] *** mizioumt left
[20:39] *** _jaldhar_ joined
[20:39] *** jaldhar_ left
[20:41] *** frew left
[20:56] *** frew joined
[20:59] <masak> [particle]: ping

[21:07] <sjohnson> masak: you there?

[21:07] <masak> sjohnson: yes, for a while longer.

[21:07] <masak> then I'm going to bed.

[21:08] <lichtkind> moritz_: cached trait bedeited memoized?

[21:09] <sjohnson> masak: isn't perldoc somewhat close to perls commandline help?

[21:09] <PerlJam> "bedeited"?

[21:09] <moritz_> lichtkind: ENOPARSE

[21:09] <masak> sjohnson: not sure I understand the question.

[21:09] <masak> perldoc is a command-line tool for getting Perl help, yes.

[21:10] <masak> it's also a subdomain to perl.org

[21:10] <sjohnson> oh, it was the blog i read

[21:10] <sjohnson> about how you thought 1) an irb thing would be nice and 2) a command-line help like ruby

[21:10] <lichtkind> moritz_: eno? I HAz found it now in syn6 now anyway :)

[21:10] *** stDavid left
[21:10] <masak> sjohnson: yes, but perldoc is Perl 5 only. I'm talking about Perl 6.

[21:10] <sjohnson> gotcha

[21:10] <masak> sjohnson: and my vision for u4x is only partly overlapping with perldoc.

[21:11] <sjohnson> well, just so you know, i agreed with everything you wrote

[21:11] <sjohnson> i would also like to see those things

[21:11] <moritz_> lichtkind: that meant "I couldn't parse your sentence"

[21:11] <masak> good. let's build it together.

[21:11] <sjohnson> well, i would offer my services in any way i can

[21:12] <lichtkind> moritz_: understood but i dunno the call ENOPARSE, i asked for meaning of sub trait cached

[21:13] <masak> sjohnson: do you have Pugs commit access?

[21:13] <sjohnson> nope

[21:13] <masak> sjohnson: could you /msg me your email address?

[21:13] <sjohnson> i can't write in Haskell either

[21:14] <moritz_> there's much more than pugs to the pugs repo

[21:14] <moritz_> including documentation project(s)

[21:14] <masak> not necessary to know Haskell.

[21:17] <masak> sjohnson: there should be an email in your inbox now.

[21:17] <masak> sjohnson: welcome aboard!

[21:17] <sjohnson> thanks

[21:17] <sjohnson> !

[21:17] <masak> sjohnson: if you're free at 19 UTC tomorrow, there will be an inspirational meeting on #perl6-soc that you could come to.

[21:18] <masak> we'll be talking about grok, the tool that will deliver u4x.

[21:18] <masak> now I've got to dash.

[21:18] *** masak left
[21:19] *** cottoo left
[21:26] *** _jaldhar_ left
[21:35] *** frew left
[21:44] *** viklund left
[21:44] *** icwiener_ left
[21:46] *** bacek joined
[21:47] *** jferrero left
[22:04] *** cotto joined
[22:05] *** bacek left
[22:07] *** hatseflats left
[22:07] *** pmurias left
[22:09] <lichtkind> laydies: Appendix A has now 400 entries

[22:10] *** eternaleye joined
[22:11] *** eternaleye left
[22:16] *** hatseflats joined
[22:22] *** bacek joined
[22:25] *** frew joined
[22:30] *** cotto left
[22:32] *** lichtkind left
[22:36] *** iblechbot left
[22:37] *** jferrero joined
[22:53] *** nihiliad left
[23:03] *** szabgab left
[23:04] *** szabgab joined
[23:21] *** xomas left
[23:25] *** zamolxes joined
[23:27] *** [hrx] joined
[23:29] *** payload joined
[23:32] *** tarpsocks joined
[23:32] <tarpsocks> hey

[23:33] <sjohnson> hi

[23:35] <pugs_svn> r27191 | lwall++ | [STD] more error errors

[23:37] <TimToady> ho

[23:37] *** Limbic_Region joined
[23:39] *** xomas joined
[23:42] *** cdarroch left
[23:44] *** [hrx] left
[23:44] <sjohnson> so... TimToady, is Perl community suggestions still in the works?

[23:44] <sjohnson> i think string editing via $string[3] type access, would stop the Python-based whiners

[23:44] *** twigil1369 left
[23:44] <sjohnson> also also, the Perl-based whines (me) too ;)

[23:46] *** Whiteknight joined
[23:47] <sjohnson> using subst to grab 1 char, using s// for 1 char, and split (//, $string) is kind of tedious for certain applications :[

[23:59] *** bacek left
[23:59] *** drbean left
