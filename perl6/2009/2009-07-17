[00:00] *** Chillance left
[00:01] *** yahooooo left
[00:03] *** ssm joined
[00:10] *** skids left
[00:10] *** Hale-Bopp left
[00:10] *** gfldex left
[00:10] *** simcop2387 left
[00:10] *** PZt left
[00:10] *** asciiville left
[00:10] *** cognominal_ left
[00:10] *** FurnaceBoy left
[00:10] *** Ehtyar left
[00:10] *** pugs_svn left
[00:10] *** unitxt left
[00:10] *** frew left
[00:10] *** elmex left
[00:10] *** jauaor left
[00:10] *** dLux left
[00:10] *** synth left
[00:10] *** drbean left
[00:10] *** ibrown left
[00:10] *** PacoLinux left
[00:10] *** eiro left
[00:10] *** meppl left
[00:10] *** bigpresh_ left
[00:11] *** PerlJam joined
[00:11] *** elmex joined
[00:11] *** PZt joined
[00:11] *** jauaor joined
[00:11] *** asciiville joined
[00:11] *** eiro joined
[00:11] *** Hale-Bopp joined
[00:11] *** gfldex joined
[00:11] *** simcop2387 joined
[00:11] *** skids joined
[00:11] *** cognominal_ joined
[00:11] *** dLux joined
[00:11] *** FurnaceBoy joined
[00:11] *** meppl joined
[00:11] *** unitxt joined
[00:11] *** synth joined
[00:11] *** Ehtyar joined
[00:11] *** pugs_svn joined
[00:11] *** frew joined
[00:11] *** bigpresh_ joined
[00:11] *** drbean joined
[00:11] *** ibrown joined
[00:11] *** PacoLinux joined
[00:11] *** jiing joined
[00:11] *** patmat joined
[00:11] *** tarbo2 joined
[00:11] *** buu joined
[00:11] *** IRSeekBot joined
[00:11] *** jjore joined
[00:11] *** RonOreck joined
[00:11] *** Lorn joined
[00:11] *** mj41 joined
[00:11] *** StephenPollei joined
[00:11] *** he_ joined
[00:11] *** Gothmog_ joined
[00:11] *** edenc joined
[00:11] *** shachaf joined
[00:11] *** ascent_ joined
[00:11] *** jiing_ joined
[00:11] *** yves joined
[00:11] *** hexmode joined
[00:11] *** scrottie joined
[00:11] *** ashizawa joined
[00:11] *** c9s joined
[00:11] *** cosimo joined
[00:11] *** kcwu joined
[00:11] *** spinclad joined
[00:11] *** rhr joined
[00:11] *** krunen joined
[00:11] *** BinGOs joined
[00:11] *** felipe joined
[00:11] *** kolibrie joined
[00:11] *** irc.freenode.net sets mode: +o PerlJam

[00:11] *** nnunley joined
[00:11] *** Aisling joined
[00:11] *** stepnem left
[00:12] *** bigpresh_ left
[00:12] *** bigpresh_ joined
[00:12] *** yahooooo joined
[00:12] *** bigpresh_ is now known as Guest24823

[00:18] *** kborer left
[00:19] *** stepnem joined
[00:24] *** ihrd joined
[00:24] *** ihrd left
[00:29] *** meppl left
[00:33] *** frew_ joined
[00:35] *** cspencer left
[00:39] *** dukeleto joined
[00:43] *** cspencer joined
[00:44] *** dukeleto_ joined
[00:44] *** cspencer left
[00:59] *** FurnaceBoy left
[01:02] *** meppl joined
[01:02] *** meppl left
[01:08] *** dukeleto left
[01:28] *** Whiteknight left
[01:47] *** justatheory left
[01:49] *** justatheory joined
[01:52] *** dukeleto joined
[01:52] *** dukeleto left
[01:52] *** dukeleto_ left
[02:03] *** kate21de left
[02:14] *** justatheory left
[02:27] *** eternaleye left
[02:27] *** kane___ joined
[02:32] *** simcop2387 left
[02:32] *** colomon joined
[02:32] *** kane___ left
[02:43] *** ihrd joined
[02:43] *** simcop2387 joined
[02:43] *** kane_ left
[02:43] <colomon> I love Perl6!

[02:50] <sjohnson> me too

[02:52] <TimToady> it's okay in spots

[02:52] <colomon> Did what feels like my first real programming in it today -- modifying a Perl 5 program to be Perl 6ish.

[02:52] <colomon> It's beautiful.

[02:52] <TimToady> I'll settle for cute and adorable...

[02:53] <colomon> I'm not sure cute really fits, actually.

[02:53] <colomon> It's all elegant and such.

[02:54] *** azawawi joined
[02:54] <azawawi> hi

[02:56] <sjohnson> some cute things about Perl

[02:56] <colomon> Time for bed.  Just had to get that out of my system.  Thanks, all.

[02:56] *** colomon left
[02:57] <sjohnson> $_ is cute

[02:57] *** justatheory joined
[02:59] *** azawawi left
[03:01] *** kane_ joined
[03:09] <pugs_svn> r27588 | lwall++ | [camelia] put back TM

[03:14] <sjohnson> Ôºà„ÄÄÔΩÄ„Éº¬¥Ôºâ

[03:17] *** Limbic_Region left
[03:20] *** donaldh left
[03:20] *** donaldh joined
[03:23] *** ihrd left
[03:37] *** frew_ left
[03:39] *** skids left
[03:40] *** justatheory left
[03:52] *** Khisanth left
[03:52] *** Khisanth joined
[03:53] *** justatheory_ joined
[03:57] *** szabgab joined
[04:15] *** synth left
[04:17] *** synth joined
[04:24] *** FCO joined
[04:29] *** araujo left
[04:30] *** SmokeMachine left
[04:30] *** jauaor left
[04:41] *** eternaleye joined
[04:42] *** frew|work joined
[04:45] *** alester joined
[04:47] *** frew_ joined
[04:49] *** szabgab left
[04:50] *** szabgab joined
[05:01] *** szabgab left
[05:01] *** szabgab joined
[05:05] *** justatheory_ is now known as justatheory

[05:14] *** ironcamel1 joined
[05:15] <szabgab> ironcamel1, why 1 ?

[05:15] *** DemoFreak joined
[05:16] <szabgab> can't you use the same nick on two channels with the freenode web interface ?

[05:16] <ironcamel1> this account is view the web client... my ironcamel account i use a client that i wrote

[05:16] <ironcamel1> as a plugin for vim

[05:16] <szabgab> oh I see

[05:16] <ironcamel1> i keep 2 clients running for error checking/debugging etc

[05:17] <szabgab> I have enough errors in one client :-)

[05:18] <ironcamel1> szabgab, one suggestion for your website is don't make users have to register to leave a comment.  just my opinion.

[05:18] <szabgab> anyway we still have to see if the Perl 6 regexes are going to become ugly because of the extensive escaping or not

[05:18] <ironcamel1> well, of course they will be

[05:19] <ironcamel1> they will be full of backslashes everywhere

[05:19] <szabgab> regarding the comment system, if that can be done with the disqus thhing then I can try to do that

[05:19] <ironcamel1> unless you can do something clever with the literal q{} strings in the regexes

[05:21] *** ironcamel joined
[05:28] *** kate21de joined
[05:32] *** szabgab left
[05:47] *** sparc joined
[05:47] *** riffraff joined
[05:48] *** frew|work left
[05:49] *** frew_ left
[05:50] <Khisanth> I guess parsing html will look ugly ...

[05:57] <ironcamel1> yes indeed

[06:02] *** frew_ joined
[06:04] *** finanalyst joined
[06:07] *** frew|work joined
[06:11] *** rfordinal3643 left
[06:11] *** rfordinal joined
[06:15] <Khisanth> well at least it matches

[06:19] *** tann joined
[06:30] *** Su-Shee joined
[06:30] <Su-Shee> good morning.

[06:31] <tann> 'moring, pretty pirl

[06:31] *** rfordinal left
[06:32] *** justatheory left
[06:35] *** barney joined
[06:39] *** kane_ left
[06:39] *** japhb joined
[06:44] *** szabgab joined
[06:45] *** rgrau joined
[06:49] *** ihrd joined
[06:49] *** ihrd left
[06:53] <moritz_> std: sub a { }; say a ~~ 4

[06:53] <p6eval> std 27588: OUTPUT¬´##### PARSE FAILED #####‚ê§Preceding operator expects term, but found infix ~~ instead at /tmp/CpslxfakGq line 1:‚ê§------> [32msub a { }; say a ~~[31m 4[0m‚ê§FAILED 00:02 36m‚ê§¬ª

[07:00] *** rfordinal joined
[07:03] *** rfordinal left
[07:07] <Matt-W> Morning

[07:07] <sjohnson> hello

[07:08] <moritz_> oh hai

[07:10] <sjohnson> does anyone here hate programming in Javascript, PHP, CSS, and HTML all in one?

[07:10] <Su-Shee> sjohnson: I don't besides PHP. 

[07:10] <moritz_> sjohnson: yes ;-)

[07:11] <Su-Shee> actually, I really like the combi js, css and html/xul :)

[07:11] *** synthEEEE joined
[07:11] <sjohnson> moritz_: me too

[07:11] <sjohnson> i think i'm gonna have to quit my job

[07:11] <sjohnson> this is getting far too boring and painstaking

[07:12] <Su-Shee> sjohnson: you forgot the additional window with the database/sql stuff. ;)

[07:13] <sjohnson> yes, i did forget that :)

[07:13] <sjohnson> i become very happy programming Perl scripts at work to do routine things

[07:14] <sjohnson> i almost jump at the opportunity

[07:14] <sjohnson> contrasted with the unbelievable pain of coding in PHP

[07:14] <sjohnson> ... PHP and friends, i mean

[07:14] <Su-Shee> sjohnson: until today I managed to avoid to get any php job but the one I've tried once and hated.

[07:15] <sjohnson> Su-Shee: this may seem like a no brainer, but you like Perl, right? 

[07:15] <Su-Shee> sjohnson: totally. 

[07:16] <sjohnson> me too

[07:17] <Su-Shee> sjohnson: I had a perl crisis a few years ago and let myself be seduced by python and a little ruby, but went back.

[07:17] <sjohnson> please tell me how that went

[07:17] <sjohnson> as i also had a crisis

[07:17] <sjohnson> but came back once i found that Perl 6 does all that Perl 5 didn't do

[07:18] <jeekobu> I'm in the middle of such a crisis I guess

[07:18] <jeekobu> For my research scripts anyway.  Python has easy memoization and built-in big int support, P5 doesn't

[07:18] <Su-Shee> well, from the outside it looked like perl wouldn't make it into more contemporary programming, so I checked other things out. then came a) perl6 and b) cool new shiny things in perl5 and I jumped back immediately.

[07:19] <sjohnson> jeekobu: do you know if Perl 6 can handle it?

[07:19] <Su-Shee> jeekobu: check higher order perl, there's plenty about memoization.

[07:19] <sjohnson> Su-Shee: i checked out ruby too

[07:19] <sjohnson> i think David Flanagan's book is confusing as hell

[07:19] <sjohnson> obviously will get 5 stars on amazon, but an example of the worst kind of technical manual i have ever read

[07:19] <sjohnson> the Camel book is so much nicer

[07:19] <sjohnson> and a hell of a lot funnier to read

[07:19] <Su-Shee> sjohnson: it's mostly that I read many amazing details about perl 5 (like HOP) which convinced me even more. I got in touch with perl's sexiness again.

[07:20] *** donaldh left
[07:20] <Su-Shee> sjohnson: and if you check out projects like moose for example - it's a-ma-zing how flexible perl is.

[07:20] <jeekobu> sjohnson: You mean the current implementations?  I don't know

[07:20] *** donaldh joined
[07:20] <jeekobu> sjohnson: Sort of why I drifted back to checking out P6; it's been a few years

[07:20] <Su-Shee> sjohnson: and there's nothing like CPAN. 

[07:21] <jeekobu> sjohnson: OTOH I'm vary wary of jumping on a still-rapidly-evolving platform.  That's been a huge part of Python's problem.  (And various other software platforms.)

[07:22] <sjohnson> righto

[07:22] <sjohnson> my biggest gripe in Perl 5 is no trim function

[07:22] <Su-Shee> trim?

[07:22] *** synth left
[07:22] <bionoid> sjohnson: for real? it's like a 0,2 liner

[07:23] <Su-Shee> *hihi* 0.2 liner :))

[07:23] *** dakkar joined
[07:23] <sjohnson> yeah, having to reinvent the wheel for the 50 perl scripts i have that use it

[07:23] <sjohnson> gets annoying fast

[07:23] <Matt-W> yeah that bugs me too

[07:23] <Matt-W> It's so common it just feels like it should be a builtin

[07:24] <sjohnson> Matt-W, i couldn't agree more

[07:24] <sjohnson> having to refine my own trim function every single time i write a script that uses it, or install String::Strip with CPAN...

[07:25] <sjohnson> on every system I migrate to..

[07:25] <moritz_> maybe you could sneak it into Scalar::Util, which is a core module?

[07:25] <sjohnson> i would like to, but how sneaky would i have to be?

[07:25] <sjohnson> i want to do whatever it takes to get it backported into Perl 5

[07:26] <sjohnson> i could live with a core module

[07:26] <moritz_> no idea really

[07:26] <sjohnson> until Perl 6 comes out

[07:27] <Su-Shee> (oooh, please let me get the job where the ceo says "oh, yes, let's have an eye on perl 6, we're commited to use perl the next decade..")

[07:27] <sjohnson> moritz_: maybe i could get in touch with the Core Module author?

[07:28] <sjohnson> i convinced the ANSIColor author to inclide a stripColors function

[07:28] <sjohnson> so maybe it might be all that is needed

[07:28] <sjohnson> include*

[07:28] <moritz_> Su-Shee: when will that be decided?

[07:28] <moritz_> sjohnson: it's dual lived, so you'll find the author by a quick CPAN search

[07:28] <Su-Shee> moritz_: they said, they'll contact me "end of the week - monday the latest.."

[07:29] <moritz_> Su-Shee: then I wish you the best of luck

[07:29] <sjohnson> moritz_: i am wondering if you think it might work, not so much who the author is

[07:29] <sjohnson> if you have faith, then i will give it my best

[07:29] <moritz_> sjohnson: it's worth a try.

[07:29] <moritz_> I've never tried to get something into a core module (except documentation), so I really can't tell

[07:29] <sjohnson> perhaps if i make a good case for it

[07:30] <sjohnson> about how frustarting it is getting an @INC error

[07:30] <sjohnson> on migrating systems

[07:30] <sjohnson> when emergencies happen

[07:30] <sjohnson> ... based on a true story!

[07:30] *** alester left
[07:31] <sjohnson> perhaps matt-w might be kind enough to let me use his quote

[07:31] <sjohnson> :3

[07:33] *** asciiville left
[07:33] <sjohnson> *puppy dog eyes*

[07:34] <Su-Shee> sjohnson: just find 2 good arguments why it's missing and offer the already written code.

[07:37] *** payload joined
[07:43] <Matt-W> My quote?

[07:44] <Su-Shee> It's so common it just feels like it should be a builtin

[07:44] <Su-Shee> that one.

[07:47] <Matt-W> Oh

[07:47] <Matt-W> yes

[07:47] <Matt-W> sure

[07:52] *** beggars joined
[07:56] *** pmurias joined
[08:02] *** sri_kraih joined
[08:05] *** payload left
[08:11] *** tann left
[08:16] *** pmurias_ joined
[08:18] *** unitxt left
[08:32] *** agentzh1 left
[08:33] *** agentzh joined
[08:37] *** payload joined
[08:46] *** payload left
[08:55] *** sri_kraih left
[08:56] *** Ehtyar left
[08:56] *** sri_kraih joined
[08:59] *** kate21de1 joined
[09:07] *** zamolxes joined
[09:07] *** synthEEEE left
[09:11] *** athomason left
[09:12] *** payload joined
[09:13] *** payload left
[09:13] *** payload joined
[09:13] *** DemoFreak left
[09:14] *** athomason joined
[09:14] <szabgab> calling die() now gives me a Null PMC access in get_pmc_keyed()

[09:14] <moritz_> rakudo: die('a')

[09:14] <p6eval> rakudo 9a7a1d: OUTPUT¬´a‚ê§Null PMC access in get_pmc_keyed()‚ê§current instr.: 'perl6;Perl6;Compiler;eval' pc 289208 (src/gen_actions.pir:24161) (src/gen_setting.pm:3340)‚ê§¬ª

[09:15] <moritz_> bah.

[09:15] <moritz_> rakudo: 1/0

[09:15] <p6eval> rakudo 9a7a1d: OUTPUT¬´Divide by zero‚ê§¬ª

[09:15] <moritz_> bah, no line number

[09:16] *** kate21de left
[09:23] <Matt-W> who broked it?

[09:23] <moritz_> probably the parrot folks

[09:25] <Matt-W> entirely possible

[09:25] <Matt-W> I do look forward to the day when it's a bit more of a stable footing

[09:25] <Matt-W> Although I'm in no rush, because Parrot can become much more awesome before then

[09:26] *** szabgab left
[09:26] *** PZt left
[09:29] <dalek> rakudo: 3d5f23c | moritz++ | docs/architecture.svg:

[09:29] <dalek> rakudo: [docs] shiny chart of Rakudo's architecture (svg)

[09:29] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/3d5f23c88d046fd6dcb6d8c8e2858a72e9765e86

[09:31] <Matt-W> moritz_: I liked that architecture chart

[09:32] *** szabgab joined
[09:33] *** explorer joined
[09:38] <spinclad> std: 2++4

[09:38] <p6eval> std 27588: OUTPUT¬´##### PARSE FAILED #####‚ê§Syntax error (two terms in a row?) at /tmp/TYzGLCkRqI line 1:‚ê§------> [32m2++[31m4[0m‚ê§    expecting any of:‚ê§     POST‚ê§   infix or meta-infix‚ê§        infix stopper‚ê§    postfix‚ê§        postfix_prefix_meta_operator‚ê§       standard stopper‚ê§ statement

[09:38] <p6eval> ..modifier loop‚ê§  terminator‚ê§     whitespac‚Ä¶

[09:39] * spinclad (goes on backlogging)

[09:41] *** payload left
[09:41] *** payload joined
[09:52] *** szabgab left
[09:55] <pugs_svn> r27589 | hinrik++ | Move perlintro.pod6 to perlintro.pod

[09:55] *** PZt joined
[10:06] <pugs_svn> r27590 | hinrik++ | [docs] Fix some formattting in perlintro.pod, replace Pugs with Rakudo

[10:11] <pugs_svn> r27591 | hinrik++ | [docs] perlintro.pod: Use semantic Pod blocks, move Author section to the end, more reformatting

[10:17] *** frew_ left
[10:17] *** frew|work left
[10:19] *** pmurias_ left
[10:21] <pmurias> moritz_: re inclusion into Scalar::Util doesn't it contain magical functions?

[10:21] <moritz_> pmurias: dunno, the name doesn't imply that

[10:23] <pmurias> i just read through the function list and most of the functions seemed deeply tied into the perl5 language/implementation

[10:24] <moritz_> C<Scalar::Util> contains a selection of subroutines that people have

[10:24] <moritz_> expressed would be nice to have in the perl core, but the usage would

[10:24] <moritz_> not really be high enough to warrant the use of a keyword, and the size

[10:24] <moritz_> so small such that being individual extensions would be wasteful.

[10:25] *** szabgab joined
[10:25] <moritz_> seems to fit, although no black magic is required for trim()

[10:25] <szabgab> std: 1+1

[10:25] <p6eval> std 27591: OUTPUT¬´ok 00:02 36m‚ê§¬ª

[10:25] *** szabgab left
[10:26] <literal> hm, perldoc.perl.org has a new design

[10:26] <moritz_> wohoo

[10:27] <literal> very neat

[10:27] <moritz_> imho a bit dark, but very nice

[10:31] <moritz_> it's a strange irony that the one perl site which a very decent layout already got a new one, while others could use it much more

[10:32] <literal> heh, yeah

[10:33] <literal> perlmonks and use.perl have awful designs

[10:34] <pugs_svn> r27592 | hinrik++ | [docs] perlintro.pod: Use K<> and =input blocks instead of C<> and =code where appropriate

[10:37] *** clintongormley joined
[10:40] *** ihrd joined
[10:40] *** szabgab joined
[10:41] *** ihrd left
[10:43] <pugs_svn> r27593 | hinrik++ | [docs] perlintro.pod: Reformat the email L<>inks

[10:44] <Matt-W> oh my

[10:44] <Matt-W> that's weird

[10:44] <Matt-W> going to take a while to get used to the new perldo

[10:48] <Matt-W> although the search engine isn't finding me anything at all

[10:48] <Matt-W> weird

[10:49] <Matt-W> and some nasty scrolling redraw effects too. No, I think I preferred the old perldoc.

[10:50] <szabgab> rakudo: 1+1

[10:50] <p6eval> rakudo 3d5f23:  ( no output )

[10:51] <szabgab> rakudo: 'aab' ~~ m/ a | aa /; say $/

[10:51] <p6eval> rakudo 3d5f23: OUTPUT¬´a‚ê§¬ª

[10:51] <moritz_> szabgab: how stand-alone is the stand-alone Padre download? do you still need a strawberry perl installed?

[10:51] <szabgab> shouldn't that be aa ?

[10:51] <moritz_> longest token matching is NYI

[10:51] <moritz_> pmichaud is working on it this summer

[10:51] *** DemoFreak joined
[10:52] <szabgab> the stand-alone includes Strawberry

[10:52] <moritz_> ok, thanks

[10:52] <szabgab> actually it currently installs in c:\strawberry

[10:52] <moritz_> my girlfriend wants to learn perl

[10:52] <literal> how big is the download?

[10:52] <moritz_> and has no internet connection, and only windows

[10:52] <moritz_> so I looked around what to download for her

[10:53] <szabgab> so how are the test starting at line 55 in pugs/t/spec/S05-metasyntax/longest-alternative.t passing ?

[10:56] * moritz_ takes a look

[10:56] <szabgab> it is still a bit far from being really beginner friendly - the built in help is not that good yet

[10:56] <szabgab> it is about 14 mb

[10:56] <szabgab> oh I guess they are skipped in that external test skipper

[10:56] <szabgab> not by fudge

[10:56] <szabgab> I keep forgetting about that

[10:56] <moritz_> only a selection of spectests is run, yes

[10:56] <szabgab> rakudo: 'aab' ~~ m/ a || aa /; say $/

[10:57] <p6eval> rakudo 3d5f23: OUTPUT¬´a‚ê§¬ª

[10:57] <szabgab> evalbot does not have a good day it seems

[10:57] <moritz_> she just needs an editor with syntax hilighting and a button that runs the script

[10:57] <moritz_> hm, why?

[10:57] *** M_o_C joined
[10:57] <szabgab> oh and in the stand-alone padre there still is no icon to launch padre :-(

[10:58] <szabgab> but I hope there will be one by the birthday

[10:58] <moritz_> but a simple link on the desktop will do for starting it, no?

[10:58] <szabgab> moritz_, why what ?

[10:59] <moritz_> 12:57 < szabgab> evalbot does not have a good day it seems

[10:59] <szabgab> yes it will do

[11:01] <szabgab> earlier it seemed to be dead and now it took a long time - though eventually answered

[11:05] *** colomon joined
[11:20] *** donaldh left
[11:20] *** donaldh joined
[11:29] *** synth joined
[11:36] *** meppl joined
[11:41] *** ejs joined
[11:42] <pmurias> mildew: say "alive!?"

[11:42] <p6eval> mildew: OUTPUT¬´alive!?‚ê§¬ª

[11:43] *** s1n joined
[11:45] <szabgab> how do you explain $/   is that a magic variable that is both a scalar and an array ?

[11:45] <szabgab> why is the array part not called @/   ?

[11:45] <moritz_> it's an object.

[11:46] <moritz_> and @ really only implies the Positional role, % implies the Mapping role

[11:46] <moritz_> and $/ does both

[11:47] <szabgab> oh so there is an @/  ?

[11:47] <moritz_> no

[11:47] <moritz_> @($/) or $/.list

[11:47] <lambdabot> Unknown command, try @list

[11:47] <moritz_> lambdabot: shut up

[11:47] <szabgab>  I think these roles and stuff are still way over my head

[11:50] <pmurias> szabgab: $/ is not really magical

[11:50] <moritz_> for a Perl 5 programmer it is ;-)

[11:50] <pmurias> it just gets set after you do a match

[11:52] <pmurias> szabgab: when you keep an array in $foo "$foo = [1,2,3]" is $foo both a scalar and an array?

[11:52] <szabgab> I think I have to go back to square one and try to understand why do we need to have arrays that have a $ as a sigil

[11:53] <szabgab> rakudo: my $x = (1, 2, 3); say $x.WHAT; say $x[0];

[11:53] <p6eval> rakudo 3d5f23: OUTPUT¬´Array()‚ê§1‚ê§¬ª

[11:53] <moritz_> actually it should be a Capture

[11:53] <pmurias> szabgab: they are array refs from perl5

[11:53] <szabgab> rakudo: my $x = [1, 2, 3]; say $x.WHAT; say $x[0];

[11:53] <moritz_> but $x = [1, 2, 3]; would create an Array

[11:53] <p6eval> rakudo 3d5f23: OUTPUT¬´Array()‚ê§1‚ê§¬ª

[11:54] <szabgab> pmurias, yes I think I understand that but why do we need them ?

[11:54] <pmurias> we don't

[11:54] <szabgab> I thought the whole point was automatic reference/dereference

[11:55] <szabgab> and I was hoping to get a good explanation

[11:56] <szabgab> or that they will be removed :-)

[11:56] <pmurias> arrays with the @ sigil could be removed without much harm

[11:57] <moritz_> .oO( then we'd get PHP )

[11:57] <szabgab> I meant to remove arrays with $

[11:57] <moritz_> and give up polymorphism?

[11:57] <szabgab> I don't understand how are they consistent with the design

[11:58] <moritz_> I mean you couldn't create a variable that either holds a hash or an array

[11:58] <pmurias> szabgab: Arrays are objects, you can hold objects in scalars

[11:58] <pmurias> the meaning of a '@' is this container does the Positional role

[11:59] <szabgab> which means ?

[11:59] <moritz_> that you can call .[] on it

[11:59] <szabgab> that you can say @x[3] ?

[12:00] <moritz_> right

[12:00] <moritz_> %hash[3] will fail.

[12:00] <pmurias> in $x = [1,2,3] $x is a Scalar which contains an Array, in @x = 1,2,3 @x is an Array

[12:00] <szabgab> but you can do that on $x as well if it holds an array

[12:00] *** icwiener joined
[12:00] <moritz_> right, but only then

[12:00] <moritz_> think of @ as an abbreviation of a type constraint

[12:01] <pmurias> szabgab: there is a difference between holding and containing

[12:01] <moritz_> (at lesat for now)

[12:01] *** eiro left
[12:01] *** eiro joined
[12:01] <szabgab> so you mean @x can hold only arrays while $x can hold both scalars, arrays and hashes

[12:01] <pmurias> you need to use VAR($x) to get at the $x variable

[12:01] <pmurias> $x can hold anything

[12:02] <szabgab> ok, what about $y ?

[12:02] <szabgab> ;-)

[12:02] <pmurias> szabgab: do you see the difference between binding and assigment?

[12:05] <szabgab> not really :-)

[12:06] <pmurias> it's obvious once you try to implement binding & assignment ;)

[12:07] <moritz_> my ($x, $y); $x := $y; # now if you assign to $x, the value is also in $y, and vice versa

[12:08] <pmurias> binding is like *foo = *bar; assignment is like $foo = $bar;

[12:10] * Matt-W reads backlog

[12:10] <Matt-W> Ah yes that confused me to start with

[12:15] <szabgab> back later &

[12:15] *** szabgab left
[12:15] *** Jedai joined
[12:24] *** ejs1 joined
[12:35] *** ejs left
[12:42] *** riffraff left
[12:43] <moritz_> @seen masak

[12:43] <lambdabot> I saw masak leaving #perl6 1d 15h 36m 44s ago, and .

[12:46] * moritz_ would like to know how many people follow planetsix.perl.org

[12:46] <pmurias> moritz_: re %hash[3] would fail, wouldn't %hash := \(...);%hash[3] work?

[12:47] <moritz_> pmurias: maybe

[12:48] *** ejs1 left
[12:48] <moritz_> phenny: tell szabgab I notice that all your Perl 6 examples still use parens after 'if', ie 'if ($str ~~ m/\=/) {' - is there a good reason for that? or plain old habit?

[12:48] <phenny> moritz_: I'll pass that on when szabgab is around.

[12:49] *** takadonet joined
[12:49] <takadonet> morning all

[12:50] <Matt-W> moritz_: I follow planetsix.perl.org

[12:51] <Matt-W> takadonet: hi

[12:54] <moritz_> Matt-W: I guess the number is in the order of 1k or so, an IRC poll won't bring a reasonable result for that :-)

[12:55] <Matt-W> moritz_: no probably not

[13:00] *** explorer left
[13:01] *** rgrau left
[13:08] *** drbean left
[13:10] *** colomon left
[13:10] *** rjh left
[13:11] *** rjh joined
[13:25] *** drbean joined
[13:28] *** szabgab joined
[13:40] *** skids joined
[13:43] *** dukeleto joined
[13:58] *** colomon joined
[14:01] *** PerlPilot joined
[14:06] *** jan_ left
[14:07] *** rfordinal joined
[14:08] *** unitxt joined
[14:15] *** PerlPilot left
[14:18] *** lichtkind joined
[14:24] *** nihiliad joined
[14:26] *** rfordinal left
[14:28] *** icwiener left
[14:28] *** jlaire joined
[14:32] *** araujo joined
[14:35] *** c1sung left
[14:35] *** c1sung joined
[14:35] <araujo> morning

[14:35] <lambdabot> araujo: You have 1 new message. '/msg lambdabot @messages' to read it.

[14:37] <Matt-W> afternoon

[14:39] *** colomon left
[15:02] *** beggars left
[15:03] <lisppaste3> Lorn pasted "recompiling re-smop" at http://paste.lisp.org/display/83747

[15:03] <Lorn> pmurias: help ^^

[15:03] *** payload left
[15:03] <Lorn> pmurias: every 'svn up' i got a new error :P

[15:05] *** kane_ joined
[15:05] *** payload joined
[15:11] *** Su-Shee left
[15:20] *** donaldh left
[15:20] *** donaldh joined
[15:22] <cj> [Coke]: enough out of you!

[15:23] *** hercynium joined
[15:25] *** nihiliad left
[15:26] *** payload left
[15:31] *** jan_ joined
[15:32] <pugs_svn> r27594 | pmurias++ | [re-smop] unbreak build

[15:32] <pugs_svn> r27595 | pmurias++ | [re-smop] disable SMOP_PROFILE and SMOP_MOLD_DEBUG

[15:32] <pugs_svn> r27596 | pmurias++ | [re-smop] remove debuging statements from mildew

[15:33] <pugs_svn> r27597 | pmurias++ | [re-smop] make tools/ri support %yeast

[15:33] <pmurias> Lorn: there's a bug at runtime which causes smop to loop infitly

[15:34] * [Coke] whistles innocently at cj.

[15:35] <pmurias> cycling&

[15:43] *** KyleHa joined
[15:43] <pmichaud> Good morning, #perl6

[15:46] *** KyleHa1 joined
[15:46] <Lorn> pmurias: Good afternoon, from Brazil

[15:46] <KyleHa1> constant $foo = 22; lives_ok { $foo *= 1 }, 'identity';   # pmichaud, what do you think?

[15:46] <Lorn> pmurias: works fine now, re-smop and re-mildew

[15:48] *** mhsparks joined
[15:48] *** mhsparks left
[15:49] <pmichaud> KyleHa1: that looks odd to me

[15:49] <pmichaud> I'd say it's not a valid spectest

[15:49] <KyleHa1> Okeydoke.

[15:49] *** dakkar left
[15:52] *** sri_kraih left
[15:52] <pugs_svn> r27598 | kyle++ | [t/spec] Test for RT #64522

[15:52] <pugs_svn> r27599 | kyle++ | [t/spec] fix the plan I forgot

[15:53] *** sri_kraih joined
[15:53] <pugs_svn> r27600 | kyle++ | [t/spec] Can one "modify" a constant to its original value?  I assume so here, but maybe s/lives_ok/dies_ok/g

[15:53] <pugs_svn> r27601 | kyle++ | [t/spec] fudge constant.t for Rakudo

[15:53] <pugs_svn> r27602 | kyle++ | [t/spec] Nope, can't assign to a constant, even if it doesn't change it.

[15:54] <KyleHa1> This concludes the fruits of my train ride.  Time to work...

[15:55] *** kst left
[15:59] *** ispy_ joined
[15:59] *** molaf joined
[16:02] *** kst joined
[16:03] *** iblechbot joined
[16:04] *** payload joined
[16:08] *** KyleHa left
[16:08] *** zamolxes left
[16:12] *** nihiliad joined
[16:15] *** donaldh left
[16:22] *** lichtkind_ joined
[16:25] *** KyleHa1 left
[16:31] *** FCO left
[16:32] *** lichtkind left
[16:32] *** FCO joined
[16:35] *** agentzh left
[16:37] *** lichtkind_ is now known as lichtkind

[16:38] *** icwiener joined
[16:39] *** szabgab left
[16:39] *** tann joined
[16:47] *** cdarroch joined
[16:48] *** FurnaceBoy joined
[16:53] *** KyleHa joined
[16:56] *** DeathAnchor joined
[16:57] *** Patterner left
[16:58] *** tann left
[17:02] *** Psyche^ joined
[17:02] *** Psyche^ is now known as Patterner

[17:06] *** barney left
[17:09] *** DeathAnchor left
[17:09] *** finanalyst left
[17:11] <pmurias> Lorn: re works fine, lucky you re-mildew loops here

[17:11] *** frew_ joined
[17:17] <Lorn> pmurias: no, i did not get any re-mildew loops, all tests ran ok in re-mildew

[17:22] *** kane_ left
[17:27] *** orafu joined
[17:46] *** pmurias left
[17:46] *** dukeleto_ joined
[17:46] *** pmurias joined
[17:47] *** tann joined
[17:51] *** kane_ joined
[18:00] *** hercynium left
[18:02] *** dukeleto left
[18:14] *** szabgab joined
[18:22] *** sparc left
[18:25] *** ispy_1 joined
[18:27] *** unitxt left
[18:28] <dalek> rakudo: faf91f9 | pmichaud++ | docs/spectest-progress.csv:

[18:28] <dalek> rakudo: spectest-progress.csv update: 415 files, 11802 passing, 2 failing

[18:28] <dalek> rakudo: Failure summary:

[18:28] <dalek> rakudo:     S12-attributes/instance.rakudo 121 - Can initialize one attribute based on another (1)

[18:28] <dalek> rakudo:     S12-attributes/instance.rakudo 122 - Can initialize one attribute based on another (2)

[18:28] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/faf91f9103926661b7deb2a2e230ae1e9c4f2a10

[18:30] *** clintongormley left
[18:33] *** pmurias left
[18:35] *** ispy_ left
[18:37] *** tann left
[18:40] *** justatheory joined
[18:40] <pmichaud> TimToady:  STD.pm:4479  has           :my $sigspace    is context<rw> = $*sigspace    // 0;

[18:41] <pmichaud> doesn't that need to be CALLER::<$*sigspace>  or something like that?

[18:42] *** explorer joined
[18:43] *** ispy_1 left
[18:49] *** szabgab left
[18:53] *** lichtkind left
[18:55] *** Guest98203 joined
[19:01] *** Guest98203 left
[19:01] *** olafk joined
[19:04] <TimToady> those were probably all $+sigspace at the time, which was (at the time) defined to imply one level of caller

[19:04] <TimToady> it currently works because of the stupid translation that gimme5 does, and the resulting support from p5 semantics

[19:04] <TimToady> so yes, but when I fix that I'll also have to fix gimme5 :)

[19:04] <pmichaud> in the final version, is it likely to become CALLER::<$*sigspace>, or will we have a notation that implies one level of caller?

[19:05] <pmichaud> okay.

[19:05] <pmichaud> I guess the notation that implies one level of caller is  CALLER::   :-)

[19:05] <TimToady> I think it's better if it starts looking in this space

[19:05] <pmichaud> oh, I agree

[19:06] <pmichaud> I'm looking to start refactoring PGE to be more STD-like and ran into that.

[19:06] <TimToady> looks like there are a number of places that are wrong that way

[19:06] <pmichaud> yes

[19:07] <pmichaud> it's okay if they're wrong -- perhaps we just want to XXX them for now

[19:07] <pmichaud> I don't mind if STD.pm is wrong in places, as long as we know where they are :-)

[19:08] <pmichaud> migrating PGE to handle some of the new semantics is going to be interesting.  I'm starting to think it's easier to start over than to migrate what I already have.

[19:08] <pmichaud> (because then I don't have to deal with Parrot deprecation issues)

[19:09] <pmichaud> I wonder how hard it would be to write the operator precedence parser in NQP

[19:09] <TimToady> well, Cursor does most of the regex semantics, but not all

[19:09] <pmichaud> right

[19:09] <TimToady> doesn't try to do & or && yet

[19:09] <pmichaud> that's one of the significant differences from what PGE does now

[19:09] <pmichaud> so starting over seems easier

[19:10] <TimToady> and it only fakes LTM with a trie

[19:10] <pmichaud> is the faking not likely to be good enough?

[19:10] <TimToady> oh, it's good enough, unless you mean "fast enoguh"

[19:10] <TimToady> *enough

[19:10] <pmichaud> got it.

[19:11] <pmichaud> grammars are essentially subclasses of Cursor?

[19:11] <TimToady> yes

[19:12] <pmichaud> okay, good.

[19:13] <TimToady> the current cursor encapsulates the current Match state as well as the current language

[19:14] <TimToady> in theory you could freeze a cursor to have everything you need to provide the setting for an eval

[19:14] <pmichaud> okay.  I like this design.

[19:14] <TimToady> but currently the p5 implementation keeps a few things in localized globals just to keep things from getting too slow

[19:14] <pmichaud> it fills in a lot of the "holes" that I've been struggling with for years.

[19:15] <TimToady> and in theory each cursor is immutalbe, and you just continually derive new ones

[19:15] <TimToady> but for ratchet code you can actually reuse them mostly

[19:16] <pmichaud> I hadn't caught that aspect of it.... that's helpful to know.

[19:16] *** unitxt joined
[19:16] <TimToady> but immutable cursors plus lazy lists is a brain-dead easy way to do backtracking

[19:16] <TimToady> the interesting thing is to see the translation that gimme5 does to STD.pm5

[19:17] <TimToady> where it needs to do lazymap vs where it can just get away with conditionals

[19:17] <pmichaud> PGE's model had been to compile regexes into explicit subroutines to do the matching.... is that consistent with STD/gimme5's approach?

[19:17] <TimToady> they're always methods in STD

[19:17] <pmichaud> where the methods are a compiled form of the regex?

[19:17] <TimToady> always methods on the current cursor

[19:18] <TimToady> yes

[19:18] <pmichaud> fantastic

[19:18] <TimToady> again, you can see how they translate to p5 semantics in STD.pm5

[19:18] <pmichaud> for the past week or so I've been having trouble getting motivated to write Rakudo code... perhaps that's an indication I need to be doing regex stuff

[19:18] <TimToady> and note that it's hardly using p5 regexen at all

[19:19] <TimToady> if viv were a bit further along, we could actually emit the rakudo code from it

[19:19] <pmichaud> every time I sit down to make a change in Rakudo, I think "yeah, but I'm going to throw it out once we start doing std-like stuff"

[19:19] <TimToady> but I haven't quite got it to the place where it can replace gimme5

[19:19] <pmichaud> on another topic, while you're here

[19:19] <pmichaud> did you see the discussion yesterday regarding binding?

[19:19] <TimToady> yes, not really sure what to think about it yet

[19:20] <pmichaud> okay.

[19:20] <pmichaud> I'll just re-register the notion that := having semantics similar to signature bind feels more "correct" the more I think of it.

[19:20] <pmichaud> that's the way I'm going to head for now, at any rate :-)

[19:21] <pmichaud> in particular, it matches more closely with the idea that      my @a := $v;   requires that $v does positional

[19:21] <TimToady> yes, proxies enforcing the additional constraints

[19:21] <pmichaud> correct

[19:21] <TimToady> and for unadorned @a you presumably don't need the proxy

[19:22] <TimToady> er

[19:22] <TimToady> unadorned $a

[19:22] <TimToady> since @a is adorned :)

[19:22] <pmichaud> at any rate, that looks dead-simple to implement in rakudo, and resolves several of the binding issues I had asked about at NPW

[19:22] <pmichaud> it also unifies our binding semantics some what, which I think will likely simplify a few other sections of code that are kinda weirdish.

[19:23] <TimToady> so we can get pure ref aliasing still as long as you do it with 'my $a :='

[19:23] <pmichaud> that works for me.

[19:23] <pmichaud> anyway, we'll head that direction in Rakudo, and if things change later I don't think it'll be a killer for us.

[19:24] <TimToady> still think we need a way of telling primitive binding to allow trailing stuff

[19:24] <TimToady> so that for and map don't have to count args

[19:24] <pmichaud> yes, we need that also somehow

[19:24] <TimToady> maybe it's just an out parameter where it can put the remainder

[19:25] <TimToady> basically an implied capture parameter at the end

[19:25] <TimToady> (or parcel)

[19:27] <pmichaud> okay, thanks for the quick tips -- they give me some solid directions to move in

[19:36] *** zamolxes joined
[19:40] *** nbrown left
[19:41] *** takadonet left
[19:43] *** justatheory left
[19:47] *** KyleHa left
[19:50] *** nbrown joined
[19:52] *** olafk left
[19:53] *** justatheory joined
[19:56] *** szabgab joined
[19:57] *** sri_kraih_ joined
[19:59] *** alester joined
[20:07] *** M_o_C left
[20:13] *** sri_kraih left
[20:14] *** baest joined
[20:17] *** icwiener_ joined
[20:21] *** dukeleto_ left
[20:22] *** nwc10 joined
[20:32] *** icwiener left
[20:35] *** molaf left
[20:49] *** rfordinal joined
[20:55] *** kate21de1 left
[20:58] *** iblechbot left
[21:09] *** kate21de joined
[21:12] *** kate21de left
[21:14] *** frew_ left
[21:16] *** frew left
[21:23] <payload> rakudo: 1.0.atan2(1.0)

[21:23] <p6eval> rakudo faf91f:  ( no output )

[21:23] <payload> rakudo: say atan2(1.0, 1.0)

[21:23] <p6eval> rakudo faf91f: OUTPUT¬´Could not find non-existent sub atan2‚ê§¬ª

[21:24] <payload> why is atan2 only a method?

[21:25] <payload> rakudo: say 1.atan2(1.0)

[21:25] <p6eval> rakudo faf91f: OUTPUT¬´Method 'atan2' not found for invocant of class 'Int'‚ê§¬ª

[21:28] *** dukeleto joined
[21:28] *** skids left
[21:28] *** dukeleto left
[21:29] *** dukeleto joined
[21:40] *** icwiener_ left
[21:44] *** frew joined
[21:46] *** davef joined
[21:48] *** davef left
[21:57] *** tarbo2_ joined
[22:00] *** dukeleto left
[22:03] *** tarbo2 left
[22:16] *** Limbic_Region joined
[22:26] *** payload left
[22:30] *** alester left
[22:33] *** sri_kraih_ left
[22:45] *** payload joined
[22:45] *** M_o_C joined
[22:49] *** nihiliad left
[23:01] *** explorer left
[23:06] *** frew left
[23:11] *** explorer joined
[23:13] <TimToady> n

[23:13] <TimToady> nm

[23:14] <sjohnson> toady!

[23:14] <TimToady> you were supposed to say np

[23:15] <sjohnson> np

[23:26] <pugs_svn> r27603 | lwall++ | [S06-signature/optional.t] nullterm allowed only after final comma

[23:26] <pugs_svn> r27603 | lwall++ |     also, eval_dies_ok would always have died anyway due to missing {...}

[23:27] *** nwc10 left
[23:30] *** tann joined
[23:45] <tann> rakudo: my $x = "\tx\t\n"; $x.trim; say "[$x]";

[23:45] <p6eval> rakudo faf91f: OUTPUT¬´[  x       ‚ê§]‚ê§¬ª

[23:46] <TimToady> rakudo: my $x = "\tx\t\n"; $x.=trim; say "[$x]";

[23:46] <p6eval> rakudo faf91f: OUTPUT¬´[x]‚ê§¬ª

[23:46] <TimToady> rakudo: my $x = "\tx\t\n".trim; say "[$x]";

[23:47] <tann> TimToady: will there be a left_trim/right_trim?

[23:47] <p6eval> rakudo faf91f: OUTPUT¬´[x]‚ê§¬ª

[23:47] *** frew joined
[23:48] <TimToady> there is none specced currently

[23:48] <TimToady> and the situation doesn't arise very often

[23:48] <tann> neither is trim specced :)

[23:48] <TimToady> and when it does s/\s+$// works

[23:48] <TimToady> is so

[23:48] <TimToady> S32-setting-library/Str.pod

[23:50] *** charsbar_ left
[23:50] *** charsbar joined
[23:51] <tann> s32 .t file shows trim_start and trim_end but i guess they won't make it then

[23:54] <tann> methinks, trim_start, trim_end are bad names as people would think the trimming starts and expect the trimming to end :)

[23:54] *** |Jedai| joined
[23:54] *** payload left
