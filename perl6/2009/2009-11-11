[00:01] *** seanstickle left
[00:02] *** synth joined
[00:02] *** synth left
[00:04] *** synth joined
[00:04] <dalek> rakudo: f16c9e2 | pmichaud++ | docs/spectest-progress.csv:

[00:04] <dalek> rakudo: spectest-progress.csv update: 451 files, 32696 (85.2% of 38389) pass, 15 fail

[00:04] <dalek> rakudo: Failure summary:

[00:04] <dalek> rakudo: S02-lexical-conventions/unicode.rakudo aborted 5 test(s)

[00:04] <dalek> rakudo: S12-introspection/methods.t aborted 10 test(s)

[00:04] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f16c9e2763e6326e2c6f2ea875717e1e11d6b75f

[00:04] *** synth left
[00:05] *** synth joined
[00:06] *** meppl joined
[00:08] <jnthn> S12-introspection/methods.t # unexpected... :-/

[00:10] *** pnate joined
[00:10] *** [synth] joined
[00:10] *** [synth] left
[00:15] *** [synth] joined
[00:20] *** lestrrat is now known as lest_away

[00:26] *** synth left
[00:27] *** nihiliad left
[00:33] *** orafu left
[00:33] *** orafu joined
[00:34] * jnthn pokes zaslon 

[00:35] *** [synth] left
[00:39] <pmichaud> s1n/others:  note that I'll be late to p6m tonight

[00:39] <pmichaud> afk

[00:41] <japhb> jnthn, is it expected that blizkost no longer builds against current Parrot (at least, Plumage can't build it)?

[00:44] <jnthn> japhb: Yes, I think the PCC changes probably hit it quite hard.

[00:44] <japhb> jnthn, ah, OK.  I wanted to make sure I hadn't broken something in Plumage it needed.

[00:44] <jnthn> No, almost certainly not.

[00:49] <jnthn> OK, sleep for me...night o/

[00:52] *** lest_away is now known as lestrrat

[00:55] <Woodi> jnthn: ...

[00:56] <Woodi> 1Gb memory looks not so much for Rakudo build now...

[00:56] <Woodi> 820 Mb used for settings...

[00:56] <Wolfman2000> ...and among the new pieces of stress to my convoluted puzzle...I apparently now have two full time job opportunities while I'm trying to get through college...and neither job seems to allow the flexibility of staying with college.

[00:57] <Wolfman2000> I'm starting to wonder whether you guys are good luck for me or not.

[00:58] <Woodi> Wolfman2000: easy, collage is important and Perl6 ALPHA :)

[00:58] <Wolfman2000> Woodi: I don't get how ALPHA fits into "important"

[00:59] <Woodi> whatewer you do Perl6 will wait :)

[00:59] <Woodi> probably :)

[00:59] <Woodi> "first things first"..

[01:03] <Wolfman2000> Woodi: Hmm...true. Still, I want to at least get a dedicated Perl 6 pastebin up.

[01:03] <Wolfman2000> I'm actually almost ready to test that part...slowly.

[01:04] <Woodi> you write it entirelly in Perl 6 ?

[01:05] <Wolfman2000> Woodi: nope. This is in Perl 5. masak is working on a Perl 6 version. Eventually we'll combine forces or something.

[01:06] <Wolfman2000> I still don't know enough about Web.pm to even attempt.

[01:07] <Woodi> Rakudo master at least builds :)

[01:09] <Wolfman2000> Woodi: Would you at least know how much the master branch has been updated within the past...week?

[01:10] *** maluco left
[01:11] <Woodi> Wolfman2000: probably no updates in last few weeks :) but required Parrot version changed today

[01:12] <Woodi> and debian upgraded libicu sho i needed to rebuild

[01:16] <Woodi> k, gn #perl6

[01:24] *** justatheory joined
[01:25] *** synth joined
[01:30] *** meteorjay left
[01:39] *** [synth] joined
[01:44] <colomon> Wolfman2000: do you want to know how much the master branch has updated recently?

[01:45] <Wolfman2000> colomon: I'm curious.

[01:45] *** oZ] left
[01:45] <colomon> One sec...

[01:46] <lisppaste3> colomon pasted "rakudo git log for november" at http://paste.lisp.org/display/90149

[01:47] <colomon> Most of the changes are quite minor, but there's been about one a day in November.

[01:49] <emma> 08:56 < Wolfman2000> masak: ...that means we're going to be competing then

[01:49] <emma> 08:57 <@masak> Wolfman2000: competition in here is usually quite mutually beneficial.

[01:50] <Wolfman2000> colomon: understood

[01:50] <emma> ^ Is this the start of a code-off?

[01:50] <Wolfman2000> emma: no clue.

[01:50] <emma> "we'll settle this with regular expressions" 

[01:51] *** synth left
[01:51] <diakopter> my PAST interpreter in JavaScript proceedeth.  it passes the first 10 nqp-rx test files

[01:51] <diakopter> whee.

[01:55] <diakopter> and 16-ternary.t and 36-callable.t

[02:01] *** seanstickle joined
[02:04] *** eternaleye joined
[02:04] *** eternaleye left
[02:05] *** Exodist joined
[02:06] *** eternaleye joined
[02:09] *** oZ] joined
[02:11] *** wknight8111 left
[02:13] *** nihiliad joined
[02:19] *** elmex left
[02:25] *** PZt left
[02:25] *** PZt joined
[02:31] *** seanstickle left
[02:33] *** am0c left
[02:34] *** hercynium left
[02:48] *** oZ] left
[02:48] *** oZ] joined
[03:04] * diakopter reads golang.org

[03:13] *** astrojp joined
[03:22] *** snarkyboojum joined
[03:22] *** frew joined
[03:24] *** astrojp left
[03:26] *** pattm joined
[03:26] <pattm> ned:~$ Database last updated on 10-Nov-2009                                       21:33:02 EST. Domain servers in listed order: www.greatestate.com www.westonmass.net www.myefact.com www.efactusa.com 205.178.190.14 bash: Database: command no                                      t found

[03:27] <pattm> whoops

[03:27] <pattm> sorry, accidental cutpaste :(

[03:27] <pattm> stupid putty buttons 

[03:29] *** yjh left
[03:35] *** crazed_ joined
[03:36] *** crazed left
[03:37] *** crazed_ is now known as crazed

[03:43] *** elmex joined
[03:45] *** seanstickle joined
[03:51] *** jaldhar joined
[03:52] *** ihrd joined
[03:52] *** ihrd left
[03:54] *** kst left
[03:55] *** kst joined
[03:58] *** fax left
[04:00] *** envi^office joined
[04:02] *** hercynium joined
[04:08] *** meppel joined
[04:09] *** kst left
[04:09] *** meppl left
[04:09] *** kst joined
[04:13] <Wolfman2000> Back from 2nd dinner. 1st dinner sucked. eternaleye: first attempt at pasting went...unsuccessful. Trying to understand what went wrong.

[04:14] <eternaleye> Wolfman2000: Okay. Have you got the API the commandline client will use figured out? If so, maybe I can start with getting an actual CLI client coded up.

[04:14] <Wolfman2000> eternaleye: Didn't get that far yet. Sorry.

[04:14] <Wolfman2000> I need to make sure the thing pastes and can be viewed first.

[04:14] <eternaleye> Wolfman2000: Not a problem; I'm in no rush :D

[04:14] <Wolfman2000> What I can tell you: whatever your client does, it has to be able to send POST data.

[04:16] <Wolfman2000> Also, while I'm here: is there a permanent way to force MySQL into a sort of strict mode?

[04:22] <eternaleye> Wolfman2000: Global sql_mode is probably what you want: http://dev.mysql.com/doc/refman/5.0/en/server-sql-mode.html - session is for that connection; global is for _all_ connections

[04:22] <eternaleye> (I googled 'mysql persistent strict')

[04:22] <eternaleye> (I can haz the googlemancy powerz)

[04:23] <eternaleye> Also, POST is easy enough with either curl or wget

[04:24] <eternaleye> I'm thinking to use curl or wget, wrapped in perl for the first client, then transition to pure-perl so that it works on Windows

[04:24] <Wolfman2000> eternaleye: what I'm also debating...do we allow anonymous pastings with the CLI?

[04:25] <eternaleye> Wolfman2000: Yes.

[04:25] <Wolfman2000> right: check credentials before parsing the files.

[04:25] <eternaleye> Wolfman2000: Although I'd recommend setting up Apache to deny unreasonable numbers of connections from individual IPs

[04:26] <Wolfman2000> eternaleye: Don't know how to do that yet, not worried at this point

[04:26] <eternaleye> where 'unreasonable' is > 20..30

[04:26] *** kst left
[04:26] *** kst joined
[04:27] <eternaleye> Wolfman2000: http://dominia.org/djao/limitipconn.html

[04:27] <eternaleye> There are other modules that do the samwe thing.

[04:27] *** oZ] left
[04:27] <eternaleye> It's a popular wheel to reinvent ;D

[04:28] <Wolfman2000> eternaleye: sorry, on slight brain burnout. will read that later.

[04:28] <eternaleye> Wolfman2000: Mainly pasted it so it's there for you to come back to in the backlog

[04:28] <Wolfman2000> eternaleye: that means I'd have to remember to check the backlog

[04:29] <eternaleye> Wolfman2000: irclog.perlgeek.de has a nice search function

[04:30] <Wolfman2000> let's see if I can at least set the global modes without causing problems.

[04:31] *** nihiliad left
[04:33] <Wolfman2000> ...figures

[04:51] *** gfx joined
[04:53] *** jweisgram_ joined
[04:55] *** jweisgram_ left
[04:55] *** hercynium left
[04:56] *** valnour left
[04:56] *** xinming joined
[05:01] <pmichaud> hugme: tweet rakudoperl The Rakudo-ng branch -- enode 7|mst 8|chanserv 9|frew]                                                                            

[05:01] * hugme hugs pmichaud; tweet delivered

[05:01] <pmichaud> grrrrr

[05:02] <pmichaud> hugme: tweet rakudoperl The Rakudo-ng branch -- http://use.perl.org/~pmichaud/journal/39874

[05:02] * hugme hugs pmichaud; tweet delivered

[05:02] <pmichaud> better.

[05:03] <pmichaud> time for sleep

[05:03] <pmichaud> bbl

[05:10] *** jweisgram left
[05:14] *** xinming_ left
[05:29] *** cottoo joined
[05:29] *** cotto left
[05:29] *** justatheory left
[05:30] *** metal joined
[05:32] <metal> !help

[05:35] *** stephenlb left
[05:36] *** Exodist left
[05:36] <Wolfman2000> metal: what's the problem?

[05:37] *** am0c joined
[05:38] *** orafu left
[05:39] *** orafu joined
[05:43] <metal> no

[05:44] *** frew left
[05:45] *** frew joined
[05:51] *** metal left
[05:54] <Wolfman2000> Juerd: If you are there, I will require DateTime::Format::MySQL installed please.

[05:54] <Wolfman2000> ...wait, use the bots

[05:54] <Wolfman2000> phenny: tell Juerd to please install DateTime::Format::MySQL on feather.

[05:54] <phenny> Wolfman2000: I'll pass that on when Juerd is around.

[05:54] *** seanstickle left
[05:56] *** frew left
[05:57] *** frew joined
[06:03] *** gfx left
[06:04] *** nbrown_ left
[06:05] *** nbrown joined
[06:06] *** justatheory joined
[06:10] *** justatheory left
[06:16] *** quietfanatic_ joined
[06:17] <quietfanatic_> Oh, whoops, still logged on in the kitchen.

[06:17] <quietfanatic_> I gues I'll use that to backlog huh

[06:18] <diakopter> I thought it was in the dining room, with the lead pipe.

[06:19] <diakopter> by Miss Scarlet.

[06:22] *** PZt left
[06:30] <Wolfman2000> phenny: tell Juerd I may want postgresql at this rate. Mysql + Catalyst + DBIC = Trainwreck at this stage.

[06:30] <phenny> Wolfman2000: I'll pass that on when Juerd is around.

[06:30] <Wolfman2000> ...pastebins are NOT supposed to be this compliated, are they?

[06:31] *** frew left
[06:38] *** quietfanatic left
[06:39] *** quietfanatic_ is now known as quietfanatic

[06:40] *** PZt joined
[07:06] *** NorwayGeek left
[07:10] *** JimmyZ joined
[07:12] *** payload joined
[07:12] *** Su-Shee joined
[07:14] *** lisppaste3 left
[07:14] *** _eMaX_ left
[07:14] *** zaphar_ps left
[07:14] *** IllvilJa left
[07:14] *** Bucciarati left
[07:14] *** dukelet0 left
[07:14] *** mdxi left
[07:14] *** silug left
[07:14] *** pmichaud left
[07:14] *** zaphar_ps joined
[07:15] *** pmichaud joined
[07:15] *** dukelet0 joined
[07:15] *** mdxi joined
[07:23] <mathw> Morning

[07:51] *** pointme left
[07:54] <zaslon> loljnthnhazblogged! jnthn++ 'Starting to get over the hump': http://use.perl.org/~JonathanWorthington/journal/39873?from=rss

[07:57] <zaslon> lolpmichaudhazblogged! pmichaud++ 'The Rakudo-ng branch': http://use.perl.org/~pmichaud/journal/39874?from=rss

[07:59] *** iblechbot joined
[08:06] *** lisppaste3 joined
[08:06] *** _eMaX_ joined
[08:06] *** IllvilJa joined
[08:06] *** Bucciarati joined
[08:06] *** silug joined
[08:10] *** barney joined
[08:11] <moritz_> good morning

[08:12] *** yahooooo left
[08:15] *** payload left
[08:15] <moritz_> Wolfman2000, Juerd: I installed DateTime::Format::MySQL on feather

[08:15] *** [synth] left
[08:18] *** payload joined
[08:18] *** nbrown left
[08:22] <Woodi> morning

[08:24] <Woodi> moritz_: should Plumage be default installer for all Parrot based languages or just for things wroted in Parrot language ?

[08:25] <mathw> morning

[08:27] <moritz_> Woodi: I don't know

[08:27] <moritz_> #parrot is probably the better place to ask

[08:28] <moritz_> good morning mathw 

[08:28] <mathw> hi moritz_

[08:32] *** mariuz joined
[08:39] *** rgrau` joined
[08:41] *** NorwayGeek joined
[08:41] *** NorwayGeek left
[08:42] *** NorwayGeek joined
[08:45] *** NorwayGeek left
[08:45] *** NorwayGeek joined
[08:46] *** NorwayGeek left
[08:47] *** NorwayGeek joined
[08:55] *** PZt left
[09:02] *** JimmyZ left
[09:04] *** PZt joined
[09:09] *** pdcawley left
[09:09] *** pdcawley joined
[09:10] <pugs_svn> r29050 | lwall++ | [STD] refactor most P6 rules out to STD::P6 subgrammar 

[09:10] *** yahooooo joined
[09:10] *** envi^office left
[09:11] *** reid05 left
[09:12] *** reid05 joined
[09:30] *** bryan[c1] joined
[09:31] <bryan[c1]> can someone recommend a good article or something to enhance my knowledge of regular expressions?

[09:33] <Su-Shee> bryan[c1]: "mastering regular expressions" or something perl 6 specific?

[09:34] *** bryan[c1] left
[09:37] *** jaldhar left
[09:37] *** jaldhar joined
[09:39] *** lestrrat is now known as lest_away

[09:41] *** mberends joined
[09:46] <Woodi> mberends: ping

[09:48] <jnthn> morning, folks

[09:48] <Woodi> o/

[09:48] <moritz_> o morning

[09:49] <frettled> Good morning!

[09:50] <jnthn> Woodi: Yes, that memory usage seems rather...high. :-/

[09:50] <mberends> Woodi: pong

[09:51] <Woodi> mberends: just trying to install http-daemon with not--gen-parrot rakudo...

[09:51] <Woodi> and had problems with Configure.pm 

[09:52] <mberends> Woodi: right, there was something in the backlog about the directory layout being neither parrot-in-rakudo or rakudo-in-parrot

[09:52] <Woodi> looks things change...

[09:52] <Woodi> i would like what is "normal"...

[09:53] <moritz_> "normal" is installed.

[09:53] <Woodi> so /opt/perl/bin/perl6 is right one if parrot there too ?

[09:53] <moritz_> IMHO yes

[09:54] <mberends> at short notice there is no remedy except to restructure your Rakudo installation... next week I shall have some time to fix the thing properly.

[09:54] <Woodi> rakudo_dir will be in that case /opt/perl/bin... but rakudo Test.pm is moved deeply into parrot-dev install

[09:55] <mberends> afk& # teaching Perl 5 on Padre in London :)

[09:55] <Juerd> Good morning

[09:55] <phenny> Juerd: 05:54Z <Wolfman2000> tell Juerd to please install DateTime::Format::MySQL on feather.

[09:55] <phenny> Juerd: 06:30Z <Wolfman2000> tell Juerd I may want postgresql at this rate. Mysql + Catalyst + DBIC = Trainwreck at this stage.

[09:55] <Woodi> gl :)

[09:56] * moritz_ installed that module already

[10:01] * moritz_ would also like to know what kind of trainwreck that is

[10:02] *** TiMBuS joined
[10:03] <jnthn> pmichaud++ # good post

[10:08] *** payload left
[10:12] *** kst left
[10:13] *** kst joined
[10:18] <Woodi> rakudo: my $tpm = %*VM<config><libdir> ~ %*VM<config><versiondir> ~ "Test.pm"; say "$tpm"; if $tpm ~~ :f { say "ok" };

[10:19] <p6eval> rakudo f16c9e: /home/p6eval//p2/lib/parrot/1.7.0-develTest.pm␤

[10:19] <Woodi> rakudo: my $tpm = %*VM<config><libdir> ~ %*VM<config><versiondir> ~ "/Test.pm"; say "$tpm"; if $tpm ~~ :f { say "ok" };

[10:19] <p6eval> rakudo f16c9e: /home/p6eval//p2/lib/parrot/1.7.0-devel/Test.pm␤

[10:20] <Woodi> any idea how to automatically get rakudo test.pm install path ?

[10:21] *** zaslon left
[10:22] *** pointme joined
[10:22] *** zaslon joined
[10:22] *** mubot joined
[10:22] <moritz_> my best bet would be 'use Test;' and then inspect %*INC

[10:23] <Woodi> err :)

[10:24] <moritz_> err, what's wrong?

[10:25] <Woodi> if it can be use(d) it why Makefile tries to install it ?  :)

[10:25] <jnthn> .oO( didn't err used to be a Perl 6 operator? )

[10:25] <moritz_> Woodi: which Makefile?

[10:26] <Woodi> json one :)

[10:26] <Woodi> http-daemon particulary

[10:27] <moritz_> json is quite a different beast than http-daemon

[10:27] <Woodi> prove need test.pir maybe ?

[10:27] <moritz_> anyway, the likely answer is "because it's out of date"

[10:29] <Woodi> i'm aware of it... just wondering is agrement new path/names conventions...

[10:32] <Woodi> for %*INC.kv -> $k, $v { say "$k: $v"; }

[10:32] <Woodi> rakudo: for %*INC.kv -> $k, $v { say "$k: $v"; }

[10:32] <p6eval> rakudo f16c9e: Temporal: 1␤Hash: 1␤Rat: 1␤Junction: 1␤Block: 1␤Pair: 1␤Bool: 1␤NYI: 1␤Num: 1␤Signature: 1␤traits: 1␤IO: 1␤Complex: 1␤List: 1␤Array: 1␤Parameter: 1␤Whatever: 1␤Any: 1␤Int: 1␤Mapping: 1␤Range: 1␤Match: 1␤IO/Socket/INET: 1␤IO/Socket: 1␤Attribute: 1␤Object: 1␤Str: 1␤Code: 1␤Buf: 1␤Safe:

[10:32] <p6eval> ../hom…

[10:32] <Woodi> $keys are @ ?

[10:36] <Woodi> is p6 Data::Dumper available ?

[10:37] *** pnu left
[10:39] <Woodi> moritz_: what you say works perfectly - use and then inspect :)

[10:39] <rgrau`> rakudo: my $b = 4,5,6; my $a=1,2,3,$b; say $a.perl

[10:39] <p6eval> rakudo f16c9e: [1, 2, 3, [4, 5, 6]]␤

[10:41] <Woodi> rgrau`: .WHAT works too

[10:42] <Woodi> coffe &

[10:43] *** NorwayGeek left
[10:43] *** TiMBuS left
[10:55] <rgrau`> rakudo: my $b = 4,5,6; my $a=1,2,3,$b; say $a.WHAT , "(.WHAT asks for the Class AFAIK)"

[10:55] <p6eval> rakudo f16c9e: Array()(.WHAT asks for the Class AFAIK)␤

[10:55] *** elmex left
[10:57] <Woodi> right

[10:58] *** pnu joined
[10:58] <Woodi> .perl can be used as serialisation or like json for js ?

[10:59] *** envi^home joined
[11:00] <jnthn> Woodi: Yes, that's the right kinda idea.

[11:01] <jnthn> .perl is like Data::Dumper built in.

[11:01] *** elmex joined
[11:01] <Woodi> so i can say .perl | perl -e STDIO ?

[11:02] <mathw> jnthn: I was going to ask you today about helping with the ng branch. Unfortunately my internet connection's insanely unstable at the moment.

[11:02] *** payload joined
[11:02] <mathw> jnthn: so if I ask things and then go quiet, that's why

[11:03] *** kst left
[11:03] *** pnu left
[11:03] *** pnu joined
[11:03] *** kst joined
[11:04] <jnthn> mathw: OK. :-)

[11:04] <mathw> But there is a very simple question which probably has a very nasty answer: is there anything I can pick up?

[11:05] <jnthn> Flu?

[11:05] <jnthn> ;-)

[11:05] <mathw> umm

[11:05] <jnthn> mathw: Oh, you didn't want a nasty answer... :-)

[11:05] <mathw> something that will still allow me to sing in the gig I'm in tonight might be preferable

[11:06] <jnthn> mathw: We're actually at the point where we're starting to bring back the setting. :-)

[11:06] <mathw> ahah

[11:06] <jnthn> mathw: That is, we actually can write operator decls in there now.

[11:06] <jnthn> And classes and other bits.

[11:06] <mathw> woo

[11:06] <mathw> I can do that

[11:06] <jnthn> *nod*

[11:06] <mathw> as it's in Perl 6 :)

[11:06] <jnthn> However, we've still got some missing bits that will cause ouch.

[11:07] <mathw> no doubt

[11:07] <jnthn> I think "for" loops are still kinda missing.

[11:07] <jnthn> I fear given/when is too.

[11:07] <mathw> umm

[11:07] <mathw> okay

[11:07] <mathw> those are quite important

[11:07] <jnthn> ;-)

[11:07] <jnthn> given/when should be easy enough to put back.

[11:07] <jnthn> Mostly because I doubt in terms of the PAST they make they would need to change at all from master.

[11:08] <jnthn> The for loops are a bit more interesting, because laziness plays in here.

[11:08] <jnthn> And the relation between for and map.

[11:08] <mathw> hmm

[11:08] <mathw> I think I shan't look at for loops

[11:08] <jnthn> pmichaud++ has those bits in his head much more than I, so I'm inclined to leave him to put that back.

[11:08] <jnthn> If you want to put something core back though, given/when should be fairly approachable.

[11:08] <mathw> mmm

[11:10] <jnthn> mathw: You can almost copy-paste the grammar decls from STD for given/when/default to get the parsing.

[11:10] *** IllvilJa left
[11:10] <mathw> I shall take a look

[11:10] <jnthn> Note statement_control:given needs to become statement_control:sym<given>.

[11:10] <jnthn> (We don't have that bit of sugar.)

[11:12] * mathw adds rules

[11:13] <Woodi> running http-daemon gives: the int() sub and .int method have been replaced by the .Int method..

[11:13] <Woodi> it's from rakudo internal ?

[11:14] <mathw> jnthn: so you think the action methods for given/when/default are going to be much the same?

[11:16] *** pnate2 joined
[11:16] <jnthn> mathw: I'd think so, yeah.

[11:17] *** cotto_work left
[11:19] <Woodi> Int works; what can i do with: invoke() not implemented in class 'Integer' ?

[11:19] <moritz_> where does this error come from?

[11:19] <Woodi> http-daemon: make run

[11:20] <Woodi> i replaced int(..) to Int and it helps. but cannot find any invoke 

[11:20] <moritz_> you need (...).Int instead

[11:21] <Woodi> kind conversion ?

[11:21] *** kst left
[11:21] <mathw> hmm

[11:22] <mathw> rakudo's just segfaulting

[11:22] <mathw> stashed my changes, it's still segfaulting

[11:22] *** kst joined
[11:22] <mathw> booooo

[11:22] <moritz_> rm -rf parrot_install; make realclean; build again

[11:22] <mathw> that's what I just did

[11:22] <mathw> and it works

[11:22] <mathw> yay

[11:22] <mathw> now to test

[11:23] <mathw> woohoo

[11:23] <mathw> it's broken

[11:23] <mathw> that's good, I'd have been most astonished if it wasn't

[11:24] <jnthn> mathw: Note that you can't just copy-paste the actions without changing the method names.

[11:24] *** NorwayGeek joined
[11:24] <jnthn> If you didn't already do that.

[11:24] <mathw> yes, I figured that bit out

[11:24] <mathw> I've got

[11:25] <mathw> Method 'blocktype' not found for invocant of class 'PAST;Op'

[11:25] <mathw> current instr.: 'perl6;Perl6;Actions;statement_control:sym<when>' pc 88129 (src/gen/perl6-actions.pir:825)

[11:25] <Woodi> moritz_: s/Int\((.+)\)/($1).Int/ resolved :)

[11:25] <moritz_> mathw: is that the ng branch?

[11:25] <mathw> moritz_: yes

[11:26] <jnthn> mathw: Can you nopaste your diff so I can glance at it?

[11:27] <mathw> sure

[11:27] <mathw> I'm finding the error stack highly confusing

[11:28] <mathw> http://gist.github.com/231876

[11:28] <mathw> no doubt something needs migrating to new-way that I don't know about

[11:29] *** pnate left
[11:30] <moritz_> mathw: uhm, where is the EXPR rule whose capture you're accessing in there?

[11:31] <mathw> moritz_: I'm not sure, actually. It's mentioned several times in the grammar, but doesn't seem to be defined in there

[11:31] <jnthn> mathw: OK, does given work?

[11:31] <mathw> jnthn: I'll check

[11:31] <jnthn> Let's do one at a time. :-)

[11:32] <mathw> heh no

[11:32] <mathw> non-existent sub declare_implicit_function_vars

[11:32] <mathw> is there an alternative to that?

[11:32] *** mj41_ left
[11:33] <jnthn> mathw: As a first effort, try just ripping that line out.

[11:33] <jnthn> I think we're handling it automatically now as part of .finishpad or so.

[11:33] <mathw> oooh

[11:33] <mathw> that would be fancy

[11:34] <mathw> okay, something of an improvement

[11:34] <mathw> it runs

[11:35] <jnthn> \o/

[11:35] <mathw> I'm not sure it's right though

[11:35] <jnthn> But does $_ get set? :-)

[11:35] <mathw> given 1 { say $_; }

[11:35] <mathw> produces

[11:35] <mathw> Object()

[11:35] <jnthn> Ah.

[11:35] <mathw> this seems wrong

[11:35] <jnthn> I think that's a no.

[11:37] *** moritz_ sets mode: +o mathw

[11:37] <jnthn> mathw: I think maybe look at the output of --target=pir

[11:38] <jnthn> mathw: And see what the signature code for the inner block looks like

[11:38] <jnthn> There'll be a set_signature_elem line, which if you paste here I can explain.

[11:38] <mathw> set_signature_elem does not appear in the PIR

[11:40] <jnthn> Oh?

[11:40] <jnthn> That's...odd.

[11:41] *** pnate joined
[11:42] <Woodi> PERL6LIB keeps *.pm ? where *.pir should go ?

[11:43] *** kst left
[11:44] *** kst joined
[11:44] <moritz_> I think rakudo searches for .pm and .pir files in the same directories

[11:48] <mathw> jnthn: want to see the PIR?

[11:48] <mathw> (had a net glitch again, am on hold with tech support)

[11:48] <mathw> jnthn: http://gist.github.com/231884

[11:49] <jnthn> mathw: thanks, looking

[11:50] <mathw> as far as I can see, it looks up $_ from the outer scope, but there's nothing to do anything given-y with it

[11:53] <mathw> but then, I'm not sure there's anything to cause that in the action method

[11:53] * mathw doesn't understand the swapping <EXPR> and <xblock> thing

[11:54] *** pnate2 left
[11:54] * moritz_ doesn't understand wher <EXPR> comes from

[11:57] <moritz_> ah, from xblock

[11:57] *** IllvilJa joined
[11:58] <moritz_> but why is it $<EXPR> and not $<xblock><EXPR>?

[12:00] <Woodi> must be automagic :)

[12:00] <mathw> moritz_: no I think you're correct

[12:01] <mathw> however, that's only mentioned in when, so it's not the problem with given :)

[12:01] <mathw> bah, tech support are useless as always

[12:01] <mathw> are you using a router

[12:01] <mathw> yes

[12:02] <mathw> plug the modem directly into your computer, it's probably the router's fault

[12:02] * mathw scowls

[12:07] *** kst left
[12:07] *** kst joined
[12:21] <jnthn> mathw: Sorry, got dragged in to sort out some flash/perl interaction bug.

[12:22] <mathw> jnthn: no problem

[12:23] <mathw> As far as I'v egot is convincing myself that there's no mechanism in the PIR which can possibly allow $_ to be set properly inside the given, by which I assume I'm missing something in the action method which would do that

[12:24] <jnthn> mathw: looking at the PIR, I agree.

[12:24] <jnthn> The block is not getting a signature / optional $_.

[12:25] <moritz_> rakudo: given 5 -> $x { say $x }

[12:25] <p6eval> rakudo f16c9e: 5␤

[12:25] <moritz_> rakudo: given 5 -> $x { say $x; say $_ }

[12:25] <p6eval> rakudo f16c9e: 5␤Use of uninitialized value␤␤

[12:26] *** payload left
[12:26] <mathw> std: giv{

[12:26] <p6eval> std 29050: ===SORRY!===␤Unable to parse subscript; couldn't find final '}' at /tmp/m8DUR2ZoAd line 1 (EOF):␤------> giv{⏏<EOL>␤Undeclared routine:␤        giv used at line 1␤FAILED 00:01 101m␤

[12:26] <mathw> argh

[12:26] <mathw> damned cat

[12:26] <mathw> std: given 5 -> $x { say $x; }

[12:26] <jnthn> :-)

[12:26] <p6eval> std 29050: ok 00:01 104m␤

[12:27] <mathw> interestingly

[12:27] <mathw> my local rakudo-ng-with-given can't parse that

[12:27] <mathw> but I used the rules from STD

[12:30] <jnthn> That's...odd.

[12:30] <mathw> yes

[12:30] <mathw> especially since I can't see why STD can handle it either

[12:31] *** kst left
[12:31] *** payload joined
[12:31] *** kst joined
[12:31] <moritz_> does rakudo's xblock rule do the same as STD's?

[12:32] <jnthn> Yeah, that's what I'm pondering. It may do the wrong thing.

[12:32] <jnthn> Also, fixing that may fix the other issues.

[12:32] <mathw> rakudo says

[12:32] <mathw> token xblock($*IMPLICIT = 0) { <EXPR> <.ws> <pblock($*IMPLICIT)>

[12:32] <mathw> }

[12:33] <mathw> STD's is messier

[12:33] <moritz_> that looks rightish

[12:33] <mathw> token xblock {

[12:33] <mathw>         :my $*GOAL ::= '{';

[12:33] <mathw>         :my $*BORG = {};

[12:33] <mathw>         <EXPR>

[12:33] <mathw>         { $*BORG.<culprit> //= $<EXPR>.cursor(self.pos) }

[12:33] <mathw>         <.ws>

[12:33] <mathw>         <pblock>

[12:33] <mathw>     }

[12:34] <mathw> the difference is the <pblock> rule

[12:34] <mathw> STD's looks for signature

[12:35] <moritz_> right, I just found that too

[12:35] <mathw> rakudo's calls <.newpad> and then goes to <blockoid>

[12:35] <moritz_> rakudo-ng's pblock is really just block

[12:35] <mathw> yes

[12:35] <mathw> that did strike me as odd

[12:36] <jnthn> Oh.

[12:36] <jnthn> That...might just be the source of the problem.

[12:36] <mathw> :)

[12:37] <moritz_> somehow I thought of pblock as "pointy block", not "parameterized block"

[12:38] *** payload left
[12:38] <mathw> either way it's still not the same as a normal block

[12:40] <jnthn> Aye

[12:40] * mathw experiments

[12:41] <jnthn> OK, I think I'm done sorting out the "fun"

[12:41] <jnthn> *sigh* I can't help but feel that a browser that allows you hit "back" and return to a page that did a POST to without prompting you to reload, is buggy.

[12:41] <jnthn> Or at least breaking protocol.

[12:42] <moritz_> what kind of browsers do that?

[12:42] <jnthn> Firefox was.

[12:42] <jnthn> Well, does

[12:42] <jnthn> IE doesn't.

[12:42] <moritz_> well, it does ask me

[12:43] <huf> it usually asks you if you want to do it

[12:43] <huf> might be a bug, firefox has a few of those i hear ;)

[12:43] <jnthn> It was showing a cached copy of the page.

[12:43] <jnthn> Why on earth it thought it was OK to cache a page resulting from a POST, I've no idea.

[12:43] <jnthn> Ah well, issue worked around.

[12:44] <mathw> ah yes it does sometimes from the cache when it realy shouldn't

[12:44] <jnthn> Yeah.

[12:45] <jnthn> It feels wrong-ish to me.

[12:45] * mathw fails to comprehend how to fix pblock

[12:45] <jnthn> mathw: Looking.

[12:48] <jnthn> mathw: eh, I think our pointy blocks just ain't very pointy at all. :-)

[12:53] *** kst left
[12:53] *** whooosh joined
[12:54] *** kst joined
[12:54] <jnthn> mathw: I sorta need to feed myself a bit before I collapse. :-)

[12:54] <jnthn> mathw: I'll have a crack at fixing pblock shorly.

[12:54] <jnthn> *shortly

[12:55] *** masak joined
[12:56] <masak> good too-late-to-even-pretend-it's-morning, #perl6.

[12:57] <moritz_> rakudo: say "good {time}, masak"

[12:57] <p6eval> rakudo f16c9e: good 1257943750.76453, masak␤

[12:58] <masak> :)

[12:59] <Juerd> rakudo: say date

[12:59] <Juerd> ;)

[12:59] *** lisppaste3 left
[12:59] *** lisppaste3 joined
[13:00] * moritz_ wonders why rakudo on p6eval's server is so abysimal slow

[13:00] <p6eval> rakudo f16c9e:  ( no output )

[13:02] *** rgrau` left
[13:04] *** NorwayGeek left
[13:06] *** pmurias joined
[13:08] <Woodi> should Configure.pm used for build be in project lib/ ?

[13:11] <masak> aye.

[13:11] <masak> as soon as mberends shows up next time, I'm going to ask him what he thinks about Configure.pm under the new installed-modules regime.

[13:14] <pugs_svn> r29051 | pmurias++ | [mildew-js] load Failure.pm, t/fail.t passes 

[13:14] <Woodi> masak: building modules should be possible from cmd too.

[13:14] <pmichaud> hello

[13:14] <masak> Woodi: yes.

[13:15] <Woodi> and just cleaned http-daemon. now looking into web and have de ja vu or something...

[13:15] <masak> Woodi: I've always been a proponent of proto making things possible, but not making projects dependent on it.

[13:15] <masak> pmichaud: \o

[13:15] *** SmokeMachine joined
[13:16] <Woodi> hi :)

[13:16] *** jnthn sets mode: +o pmichaud

[13:16] <pmichaud> people are having issues with xblock/pblock...?

[13:16] <mathw> pmichaud: yes

[13:16] <mathw> pblock appears to be the same as block

[13:16] <jnthn> pmichaud: Our pblock isn't...pointy :-)

[13:16] <moritz_> pblock in ng doesn't match a pointy block

[13:17] <pmichaud> right, I didn't add that in yet.

[13:17] <jnthn> pmichaud: So we've been discovering. :-)

[13:17] <pmichaud> but see the definition of pblock in nqp-rx for an example of what it should look like

[13:17] <masak> people interested in new languages might want to check out the new Go language: http://developers.slashdot.org/story/09/11/11/0210212/Go-Googles-New-Open-Source-Programming-Language

[13:17] <mathw> pmichaud: I'll take a look

[13:18] <jnthn> masak: Spent half an hour this morning glancing over that. :-)

[13:18] <moritz_> Go is an interesting mixture of really good and really bad ideas, IMHO

[13:18] <Woodi> masak: perl-sqlit3 works ?

[13:18] <masak> Woodi: to my knowledge, yes.

[13:18] <Su-Shee> moritz_: "but it's from google!1!"

[13:18] <moritz_> the bad idea is that they don't have exceptions

[13:18] <masak> moritz_: oh, that's too bad. :/

[13:18] <moritz_> and checking the return value of each function is so web 1.0

[13:19] <Woodi> masak: it's just wrapper from parrot ?

[13:19] <mathw> pmichaud: that looks far more comprehensible than the pblock in STD

[13:19] <moritz_> (actually it's pre-web 1.0)

[13:19] <masak> Woodi: aye. but don't say "just". :)

[13:19] <pmichaud> mathw: yes, I would suggest going with it to begin with

[13:20] <pmichaud> STD's pblock is a bit more complex because it's doing some advanced error handling.  I totally agree with the error handling, but at this point it's more important to get correct functionality in pblock, I think; and I'm also hoping to find a slightly cleaner way to handle the errors.

[13:20] <Woodi> masak: ok :) maybe there is wrapper for ncurses ?

[13:20] <moritz_> http://golang.org/doc/go_lang_faq.html#exceptions

[13:20] <pmichaud> "Everything works in Go.  No exception!"

[13:20] <masak> Woodi: I've seen ncurses in Parrot, so at least it's possible.

[13:20] <masak> pmichaud: :)

[13:20] <moritz_> basically they say "it didn't fit in our design, so we left it out"

[13:21] <pmichaud> designs are much easier when you don't have to handle the exceptional cases.  :)

[13:21] <mathw> I've read a bit about Go this morning, as my dodgy internet has let me do so

[13:21] <mathw> I'm not convinced

[13:21] <jnthn> I'm not fond of the declaration syntax for functions.

[13:21] <moritz_> their concurrency ideas sound interesting

[13:22] <jnthn> De-values the name of the thing a bit.

[13:22] <moritz_> I'm curious if it works out well in practice

[13:22] *** whooosh left
[13:22] <jnthn> moritz_: Yes, that was what I found most interesting from it.

[13:23] <mathw> pmichaud: I'm curious - pblock's action method in both NQP-rx and Rakudo-ng just does make $<blockoid>.ast. Shouldn't it be doing something with any pointiness it might have found?

[13:23] <pmichaud> mathw: method signature will have already taken care of it

[13:23] <mathw> ooh

[13:23] <mathw> cunning

[13:23] <mathw> okay

[13:23] <mathw> of course, my given statement is still missing something

[13:23] <pmichaud> at least, that's the case in nqp-rx

[13:24] * mathw wonders if it's really actually using the new grammar

[13:24] <pmichaud> I'm not sure what will be needed to fully handle the signature in Rakudo

[13:25] <pmichaud> might need a $*IN_DECL setting in pblock

[13:25] <pmichaud> oh, looks like not.

[13:28] <pmichaud> pblock's action method has to be a bit special, though, as it's the thing that has to handle $_ as an implicit parameter.

[13:28] <jnthn> pmichaud: Ah, that belongs in pblock's action? OK...I was wondering where it was meant to go.

[13:28] <mathw> still something wrong with the parsing of it here :(

[13:28] <mathw> every time it sees -> it gets confuesd

[13:29] <pmichaud> mathw: we have to tell infix:sym<->  and  prefix:sym<->  not to match there

[13:29] <mathw> oh

[13:29] <pmichaud> when we have full ltm with fate we won't have to do that, but at the moment we do

[13:29] <mathw> okay

[13:29] <pmichaud> (see nqp for examples of that also)

[13:30] *** am0c left
[13:31] <pmichaud> actually, that probably shouldn't be an issue here -- EXPR should be able to deal with it already, but possibly doesn't

[13:31] <mathw> NQP doesn't have anything for infix:<-> on that

[13:31] <pmichaud> well, try it just for prefix:sym<->

[13:31] <pmichaud> really it shouldn't happen at all, though

[13:31] <mathw> ideally no

[13:31] <pmichaud> but I think EXPR may have a bug in it

[13:32] <moritz_> std: sub x -> $x {  }

[13:32] <mathw> where is EXPR defined?

[13:32] <p6eval> std 29051: ===SORRY!===␤Malformed block at /tmp/yM6jiysi55 line 1:␤------> sub x ⏏-> $x {  }␤    expecting any of:␤        block␤  routine_def␤        terminator␤      trait␤FAILED 00:01 101m␤

[13:32] <pmichaud> (I meant nqp-rx's EXPR, not STD's)

[13:32] *** NorwayGeek joined
[13:32] <mathw> hmm that didn't seem to help

[13:32] <pmichaud> mathw: okay, I'll take a closer look in just a minute

[13:32] <pmichaud> EXPR is in src/cheats/hll-grammar.pir

[13:33] <pmichaud> (in nqp-rx)

[13:33] <mathw> I feel dreadful, I try to help out and I end up just finding more things for you and jnthn to fix

[13:33] <pmichaud> oh, don't feel dreadful about that

[13:33] <pmichaud> I at least know that we still have a lot to fix :)

[13:33] <pmichaud> and I'm very glad you're trying to help out and learning in the process

[13:33] <masak> mathw++ # dreadfully help1

[13:33] <masak> s/1/ful!/

[13:33] <mathw> What will be really learning is when I see what the fixes for this lot are

[13:34] <moritz_> std: sub x (-> $x ) { }

[13:34] <pmichaud> it also (pardon the pun)  points out what people find most interesting/useful/important at any (argh!) given time :)

[13:34] <p6eval> std 29051: ===SORRY!===␤Malformed parameter at /tmp/K7BWGQHEnW line 1:␤------> sub x (⏏-> $x ) { }␤    expecting any of:␤  name␤   parameter␤  signature␤      whitespace␤FAILED 00:01 106m␤

[13:34] <mathw> pmichaud: jnthn mentioned that he thought adding given/when/default might be something suitable for me to look at, it wasn't so much that I found it out myself

[13:35] *** iblechbot left
[13:35] <pmichaud> he probably didn't realize that pointies weren't done yet

[13:35] <mathw> no I don't think he did

[13:35] <jnthn> pmichaud: I thought they were, yes.

[13:35] <pmichaud> or implicit $_, whichis needed for the non-pointy block :)

[13:35] <jnthn> pmichaud: I remember some discussion we had about implicit $_ in ng a while back.

[13:35] <mathw> it'll parse given 1 { say $_; }

[13:35] <mathw> but it just says 'Object()' at the moment

[13:35] * moritz_ can't read, and confused with -> with -->

[13:36] <jnthn> pmichaud: And I'd kinda assumed that you'd done it at that point. :-)

[13:36] <pmichaud> jnthn: no, I still hadn't figured out the parameter handling in ng yet

[13:36] <jnthn> Ah.

[13:36] <mathw> so I need to wait for someone clever to do pblock

[13:36] <mathw> and then I can continue

[13:37] <pmichaud> I'll do pblock immediately after I write my informal hague grant report to the grants managers

[13:37] <pmichaud> (I'm trying to close out my grant this month)

[13:37] <jnthn> pmichaud++ # ok, I'll leave that one for you. :-)

[13:37] <mathw> :)

[13:37] <mathw> pmichaud++

[13:38] <pmichaud> jnthn: I may need a bit of help on the $_ param

[13:38] <pmichaud> but let me get the rest in place first

[13:38] <jnthn> pmichaud: Oh, that bit is probably not quite so bad.

[13:40] *** kst left
[13:40] *** kst joined
[13:41] <pmichaud> jnthn: probably not -- I had a little difficulty following when I looked at it last week (but I was also extremely tired at the time)

[13:49] *** pnate2 joined
[13:50] * moritz_ didn't get any new emails for the last few hours, not even spam or mailing list mails, and wonders if his mail server is broken

[13:51] * pmichaud sends moritz' mail address to a spam bot to help him test his mail server.

[13:52] <moritz_> pmichaud: no problem if you receive the delivery failures :-)

[13:58] *** kst left
[13:58] *** kst joined
[14:03] *** pnate left
[14:04] * mberends shows up, ears burning

[14:04] * jnthn takes a fire extinguisher to mberends ears

[14:04] * pmichaud throws water onto mberends ears.

[14:05] * mberends wipes the excess moisture off with two towels

[14:05] * moritz_ joins the towel party

[14:05] <pmichaud> Wasn't that a Tolkein novel... "The Two Towels"?

[14:06] * pmichaud thinks he misplaced a consonant.

[14:06] <mberends> pmichaud: a toweletta

[14:06] <masak> mberends: hiya, Hot Ears.

[14:06] <mberends> masak: you'e the one who set fire to my ears!

[14:07] <masak> mberends: I did? sorry about that... :/

[14:07] <mberends> forgiveness > permission

[14:07] <masak> was it something I blogged? :)

[14:07] <jnthn> .oO( must never lend masak my blowtorch again )

[14:07] <mberends> s/blogged/backlogged/

[14:08] <mberends> about Configure.pm, you threatened to bash my ears about that

[14:08] <PerlJam> good morning

[14:08] <masak> mberends: I'm pretty sure I didn't say it like that. :)

[14:08] <masak> mberends: just wanted to discuss it, peacefully. 

[14:08] <mberends> must be my paranoia playing up again ;)

[14:09] * mberends gets peaceful

[14:09] <masak> just because your ears aren't burning doesn't mean they're not out to bash 'em...

[14:09] <mberends> yeah

[14:10] <mberends> masak: will you have time to plan installed-modules and Configure.pm this evening?

[14:10] <masak> yes.

[14:11] *** payload joined
[14:11] <moritz_> speaking of this evening... do we want a #perl6book meeting tonight?

[14:11] * masak does

[14:11] <moritz_> would you mind doing it a bit later than usual, 19:00 UTC?

[14:12] <moritz_> (this question also goes to pmichaud, jnthn, PerlJam)

[14:12] <masak> a bit later is fine by me.

[14:12] <mberends> masak: good, any time after 18:00 UTC, gotta &work() now &

[14:12] <PerlJam> 1900UTC is fine by me.  

[14:12] <masak> mberends: have the appropriate amound of fun! see you tonight!

[14:12] * jnthn books that time into his schedule

[14:12] <PerlJam> jnthn: do you have punitis?

[14:12] * moritz_ sighs

[14:13] *** moritz_ sets mode: +v jnthn

[14:13] <moritz_> our punbot :-)

[14:13] *** whooosh joined
[14:14] <jnthn> I'd like to voice my concern about this mode change...

[14:14] <jnthn> ;-)

[14:15] <obra_> 'morning

[14:15] <moritz_> hi obra_, what's up?

[14:15] <jnthn> hi obra_ 

[14:15] <masak> obra_: \o

[14:15] <PerlJam> jnthn: I'm not sure if you're corny or campy today, but it's some c-word.

[14:15] <obra_> masak: me, barely

[14:15] <PerlJam> crazy perhaps?

[14:16] <masak> obra_: that was for moritz_, I presume. :)

[14:16] <moritz_> m<tab> :-)

[14:16] <masak> obra_: welcome to the club of people who mis-tab on me and moritz_ :)

[14:16] <jnthn> PerlJam: Putting var traits in tends to leave one that way. :-)

[14:16] <PerlJam> :-)

[14:16] <moritz_> but mathw and masak are even worse, the mis-tab with two leading characters

[14:16] <masak> oh, true.

[14:17] <obra_> masak: sorry about that :)

[14:17] <moritz_> one of you should .flip :-)

[14:17] <masak> that's why I tend to throw a cat at mathw when I intend to say something. :)

[14:17] *** jaffa4 joined
[14:17] <masak> obra_: it's ok. :)

[14:18] <pmichaud> later is much better than me

[14:18] <pmichaud> much better for me

[14:18] <pmichaud> (sorry, too many conversations again)

[14:18] <moritz_> 1900 UTC it is then

[14:18] *** reid05 left
[14:19] <moritz_> .oO( pmichaud is a conversative :-)

[14:19] *** kidd` joined
[14:19] <moritz_> wow, that word actually exists

[14:19] *** reid05 joined
[14:19] <moritz_> I just wanted to make a pun on conservative

[14:19] <masak> moritz_: isn't 19:00 UTC the usual time?

[14:20] * masak confused

[14:20] <moritz_> didn't we have 18:30 UTC usually?

[14:20] <pmichaud> 18:30 is parrotsketch

[14:20] <moritz_> or was that #ps?

[14:20] <masak> yes.

[14:20] <pmichaud> 19:00 is book

[14:20] <masak> still fine by me, though.

[14:20] <masak> just not later than usual. :P

[14:21] <pmichaud> personally, I think there's just far too much Perl 6 activity taking place for a dead language.

[14:21] <moritz_> any starting time between 19H and 20H UTC is fine by me, then

[14:23] <masak> pmichaud: well, a minimum of activity is needed, so we can change the name of the language everywhere.

[14:23] <pmichaud> I've already done my bit:  "Rakudo"  :-)

[14:24] <masak> also, don't worry, because it's all *academic* activity, which doesn't count.

[14:24] <PerlJam> masak++

[14:24] <pmichaud> Besides, I think we should give Perl 5 a name.  "Classic Perl", perhaps.  :-)

[14:24] *** mj41 joined
[14:24] <pmichaud> "Perl:  The Original Series"

[14:25] <masak> Vanilla Perl. oh wait.

[14:25] <pmichaud> We have a winner!

[14:25] <PerlJam> as long as we don't accidentally create the "New Perl" meme

[14:25] <jaffa4> Perl Reloaded.

[14:25] <masak> "Perl 6: a New Deal"

[14:25] <pmichaud> Perl Overloaded.

[14:25] <jaffa4> Revenge of The Perl.

[14:25] <pmichaud> "I for one, welcome our new Perl overloads."

[14:26] <masak> I, for one, welcome these new Perl 6 Overloads.

[14:26] <moritz_> Vanilla Perl and Stracciatella Perl!

[14:26] <masak> dang, pmichaud is faster :)

[14:26] <jaffa4> Perl Squared.

[14:26] <PerlJam> Perl to the Perl

[14:27] <PerlJam> Perl is dead.  Long live Perl!  (oh wait, we've already been there)

[14:27] <moritz_> I thought it wasn't dead after all :-)

[14:27] <jaffa4> Perl on a new horse.

[14:27] <pmichaud> The Legend of the Black Perl.  (Oh, wait)

[14:27] <masak> Perl: Imerial Edition.

[14:27] <jaffa4> Perl Strikes back.

[14:28] <masak> Perl: Second Coming.

[14:28] <jaffa4> Perl Renasaince.

[14:29] *** kst left
[14:30] *** kst joined
[14:30] * Woodi fells something will happen soon...

[14:30] <PerlJam> something is always happening.

[14:31] <Woodi> brainstormes usually have some/side effects :)

[14:32] * jnthn shows up with a patch for var traits, after an adventure involving making POST::Compiler recurse infinitely. Oops.

[14:34] * PerlJam looks at ng's Grammar.pm and Actions.pm for a few minutes

[14:35] *** pdcawley_ joined
[14:41] <colomon> Is there a guide for mere mortals to build ng somewhere?

[14:41] <pmichaud> At the moment, no.

[14:41] <pmichaud> It will become much simpler once nqp-rx is in Parrot.

[14:42] <pmichaud> Perhaps I should do that before working on pblock

[14:42] <pmichaud> so that more people can be building ng

[14:42] <moritz_> colomon: build parrot, install it. Build nqp-rx, install it (into the same location)

[14:42] <moritz_> colomon: then configure ng, and build

[14:42] <masak> not necessarily the same location. just configure nqp-rx to find parrot.

[14:43] <masak> (with --parrot-config to Makefile.PL)

[14:43] <PerlJam> colomon: perl Configure.pl --parrot-config=/path/to/parrot_config  # very useful

[14:43] <moritz_> well, rakudo and nqp-rx should use the same parrot ;-)

[14:43] <PerlJam> colomon: you use that same line for both nqp-rx and ng :)

[14:44] <jnthn> pmichaud: ping

[14:44] <colomon> danke, everyone.  will try it now.

[14:44] <masak> right, Configure.pl of course, not Makefile.PL

[14:44] * masak is behind the times :)

[14:45] <pmichaud> jnthn: pong

[14:45] <jnthn> pmichaud: I've got code-gen for variable traits working

[14:45] <pmichaud> \o/

[14:45] <jnthn> my $x of Int # now dispatches to the right place

[14:45] <jnthn> Anyway, my Int $x should really do the same thing.

[14:46] <jnthn> My first thought was "well fine, just build us an AST that we can tweak"

[14:46] <jnthn> But now I'm looking at it and thinking "gah, we parse a multi_declarator, and thus a declarator, after this"

[14:46] <PerlJam> colomon: make sure your parrot revision is the same as in rakudo/build/PARROT_REVISION if you're not using the --gen-parrot option to Configure.pl

[14:46] <jnthn> And wondering if we really want to be capturing <typename>+ into some contextuval

[14:46] <jnthn> *contextual

[14:47] <colomon> PerlJam: I'm too lazy to do anything other than --gen-parrot.  :)

[14:47] <jnthn> So the nested decls can use them.

[14:47] <pmichaud> does STD.pm do that?

[14:47] <jnthn> pmichaud: No, it doesn't.

[14:47] <masak> jnthn: contextuval = contextual + nothingmuch :)

[14:47] <pmichaud> (in general I'm not happy with the multi_declarator/declarator sequence of rules in STD.pm)

[14:47] *** kst left
[14:47] <PerlJam> masak: heh, I was thinking the same thing :)

[14:47] <jnthn> pmichaud: Wait, does STD do which bit?

[14:47] *** kst joined
[14:47] <pmichaud> does STD provide a contextual for traits

[14:48] <pmichaud> er, <typename>+

[14:48] <jnthn> pmichaud: No

[14:48] <jnthn> pmichaud: I can do it either way I guess.

[14:48] <jnthn> I'm just looking at the code I'm about to write and thinking "oh gee, this is going to look horrible by the time we're done"

[14:48] <PerlJam> colomon: I don't know that nqp-rx and ng keep build/PARROT_REVISION in sync.  You'll want to use the parrot revision that Rakudo expects though, I think

[14:49] <pmichaud> rakudo's PARROT_REVISION is generally more up to date

[14:49] <jnthn> Because the type name there could be any of...

[14:49] <jnthn> * Variable declarator

[14:49] <jnthn> * Bunch of variables declared through a variable declarator

[14:49] <masak> wohoo! suddenly 'make test' on the ng branch looks much better!

[14:49] <Woodi> colomon: you can use ready Makefile for build parrot and rakudo, http://perl.lunski.pl/perl6/spi/

[14:49] <jnthn> * Routine or some kind, but we don't actually pass that back up the tree anyway, we emit code to install it somewhere

[14:49] <jnthn> *of

[14:50] <jnthn> pmichaud: It just gets massively neater if the individual actions have the typename available.

[14:50] <jnthn> Well, the match node and thus ast of...

[14:50] <Woodi> do rakudo soon need to build nqp-ng ?

[14:50] <pmichaud> jnthn: yeah, I know what you mean.  That whole section of declarators feels like it wants a refactor somehow.

[14:50] <pmichaud> jnthn: anyway, go with whatever seems cleanest or best to you

[14:51] <jnthn> I mena, for now in scoped I can look for PAST::Var, but I know that in a day or two, I'm just going to he tearing my hair out over this. :-)

[14:51] <jnthn> std: my Int $x of Str;

[14:52] <p6eval> std 29051: ok 00:01 103m␤

[14:52] <jnthn> heh

[14:52] <jnthn> Well, guess semantic check.

[14:52] <pmichaud> maybe that's really the same as   "my $x of Int of Str"

[14:52] <jnthn> pmichaud: Yeah, it would be.

[14:52] <jnthn> oh

[14:52] <jnthn> wait

[14:52] * jnthn ponders how that associates

[14:53] <PerlJam> std: my $x of Int of Str

[14:53] <p6eval> std 29051: ok 00:01 101m␤

[14:53] <jnthn> Is that of Str going as a trait mod on $x?

[14:53] *** whooosh left
[14:53] <jnthn> e.g. if I wrote my $x of List of Book

[14:53] <PerlJam> std: my $x of Int of Str of Int of Str

[14:53] <p6eval> std 29051: ok 00:01 101m␤

[14:54] <jnthn> Then that's parametric like List[Book], iirc.

[14:54] <pmichaud> jnthn: correct

[14:54] <jnthn> So no, it's not quite the same. :-)

[14:54] <pmichaud> so  I'd take     my Int $x of Str  to be parametric like   Int[Str]

[14:54] <pmichaud> which doesn't make sense for Int

[14:54] <pmichaud> but

[14:54] <jnthn> Oh?

[14:54] <jnthn> Hmm. And ouch.

[14:54] <pmichaud> my List $x of Str  would be   List[Str]

[14:55] <pmichaud> that would be my expectation at least, based on present knowledge.

[14:55] * jnthn groans

[14:55] <jnthn> Yeah, I guess that can be made to work. :-)

[14:55] <pmichaud> I'm not sure that's actually correct.

[14:55] <jnthn> Me either.

[14:55] <jnthn> It sure isn't what current Rakudo does.

[14:56] <jnthn> I suspect current Rakudo silently discards one of the types.

[14:56] <pmichaud> in that sense, the <typename>+ should really end up being the equivalent-ish of an "of Type" trait

[14:56] <jnthn> Which is of course wrong too.

[14:56] <jnthn> Well, we compile it (even in master) to a trait dispatch, yes.

[14:56] <jnthn> The question is just about its relationship with any other "of Type" trait.

[14:56] <pmichaud> whatever currently handles the trait dispatch in (variable_declarator?)  should probably have some way of seeing "oh, there was also a typename trait, add that as well)

[14:57] <jnthn> Well, I was just going to push a call to trait_mod:<of> onto the traits list for the variable.

[14:57] <pmichaud> wfm

[14:57] *** pdcawley left
[14:57] *** pdcawley_ is now known as pdcawley

[14:57] <jnthn> Yes, but it won't quite work, because we need to "merge" the two.

[14:57] <pmichaud> thus my comment

[14:58] <pmichaud> whatever does the "normal"   "of XYZ" handling should probably be made smart enough to also see the traits supplied by <typename>+

[14:58] <jnthn> *nod*

[14:59] <jnthn> Sure, I can do that. It's just a bit magical. :-)

[14:59] <pmichaud> i.e.,  basically treat     my Int $x   as syntactic sugar for   my $x of Int

[14:59] <jnthn> Sure, I have been - I just hadn't been handling the merging up until now.

[14:59] <pmichaud> okay

[14:59] <PerlJam> where does the implementation type go?

[15:00] <pmichaud> that's an "is" trait

[15:00] <pmichaud> my $x is Scalar of Int of ....

[15:00] <pmichaud> I'm not sure we handle that yet.  Basically the implementation type is implied by the sigil if not explicitly given.

[15:01] <jnthn> No, we've never handled that yet.

[15:01] <pmichaud> shouldn't be too difficult when we get to it :)

[15:02] <moritz_> 1) spec it properly 2) test it 3) implement it 4) ... 5) profit!

[15:03] <moritz_> of course they are partially parallelizable :-)

[15:03] <masak> I still don't grok what a Scalar is.

[15:03] *** KyleHa joined
[15:03] <pmichaud> It's a container

[15:03] *** kst left
[15:03] <pmichaud> just like Array and Hash are containers

[15:03] <masak> kind of a one-element array?

[15:03] <pmichaud> yeah

[15:03] <masak> ok.

[15:03] <pmichaud> it's basically the least restrictive form of container

[15:03] *** kst joined
[15:06] <Wolfman2000> masak: The way my luck has been with Catalyst, DBIC, and Mysql last night...I think a part of me wants Web.pm to be closer to done so that I can actually have a pastebin on Perl 6 written in Perl 6

[15:06] <PerlJam> where is it specced that "of Foo of Bar" is the same as "Foo[Bar]" ?

[15:06] <masak> Wolfman2000: that's what I'm aiming for.

[15:06] <masak> Wolfman2000: maybe I'll spend some time on it today.

[15:07] <jnthn> PerlJam: Probably S14.

[15:07] <Wolfman2000> masak: I would...rather not explain the hurdles I failed to get over. But I need to anyway for context.

[15:07] <masak> yes, please.

[15:07] <Wolfman2000> masak: However you plan on handling database joins...make them consistent, and make them WORK.

[15:07] <PerlJam> jnthn: ah,  thanks.

[15:08] <jnthn> =head2 Relationship Between of And Types

[15:08] <masak> Wolfman2000: what prompted the need for joins in a pastebin?

[15:08] <PerlJam> yeah, reading now  :)

[15:08] <Wolfman2000> masak: the pastebin I'm designing allows for registering, tags, annotations/grouping.

[15:08] <Wolfman2000> Each key part requires a separate table.

[15:08] <masak> Wolfman2000: oh, cool!

[15:09] <masak> I didn't plan to be that ambitious on the first go.

[15:09] <Wolfman2000> masak: Only reason I'm trying to be this ambitious...well, http://www.pumpproedits.com <-- I made that. Granted, that's in Python/Pylons, but we're talking similar complexity.

[15:10] <Wolfman2000> Actually, should be less complex, but...well, that website was in Pylons and Postgresql, while I'm trying Catalyst and I'm stuck with Mysql.

[15:10] <colomon> Two of the "make test" tests failed on my ng build, is that expected at the moment?

[15:10] <jnthn> colomon: yes

[15:11] <PerlJam> only 2?  ;)

[15:11] <moritz_> test, not spectest

[15:11] <PerlJam> still.

[15:11] <colomon> PerlJam: make spectest is failing gloriously at the moment.  :)

[15:12] <moritz_> it should pass about 90 tests (not files, single tests)

[15:12] <jnthn> Glorious fail!

[15:12] <masak> Wolfman2000: I think I'm drifting over to the TDD/release-early camp more and more. that's why I'm surprised your adding everything at the outset. YMMV. http://use.perl.org/~masak/journal/39483

[15:13] <KyleHa> Does it run the spectests?

[15:13] <moritz_> yes

[15:13] <KyleHa> Far out.  That's progress!

[15:13] <Wolfman2000> masak: ...The Cult of Dome? Sorry, I can't say I'm understanding it.

[15:13] <pmichaud> fsvo "run"  :)

[15:14] <masak> Wolfman2000: not 'dome', 'done'. :)

[15:14] <moritz_> for "run" as in "fail" :-)

[15:14] <jnthn> We can run the spectests in the sense that I can run a marathon.

[15:14] <jnthn> It'll be quite some work before a successful running. :-)

[15:15] <Wolfman2000> masak: ah. I'll give it another read later: right now taking care of another assignment, non perl related I'm afraid.

[15:17] <KyleHa> Well, I didn't think it PASSED the spectests, but I'm impressed that it's up to running them.

[15:18] <lisppaste3> moritz_ pasted "passing spectests in ng branch" at http://paste.lisp.org/display/90175

[15:18] <KyleHa> Seven whole files!

[15:18] <jnthn> Wow.

[15:19] <moritz_> this reminds me of the good old days when I used to run 'make spectest' (which is now spectest_all or so) to see if any new tests would pass

[15:19] <moritz_> and submit patches to spectest.data

[15:19] <moritz_> (what is now spectest was called spectest_regression or so)

[15:19] <KyleHa> Sounds like fun.

[15:20] *** Psyche^ joined
[15:20] <moritz_> now tools/update_passing_tests_data.pl does the same, with much less noise and more information

[15:20] *** kst left
[15:21] *** kst joined
[15:25] *** pmurias left
[15:29] *** zamolxes joined
[15:29] *** fax joined
[15:30] *** jaldhar left
[15:30] *** payload left
[15:30] <moritz_> masak: that could the kind of style question you're interested in: http://www.perlmonks.org/?node_id=806515

[15:31] *** jaldhar joined
[15:31] <masak> moritz_: it is indeed. thanks.

[15:32] <japhb> Woodi: Plumage will be the default installer for anything on parrot (language, library, whatever).  Of course languages are welcome to port their own "native" installers, but they need not do so.

[15:34] *** Patterner left
[15:34] *** Psyche^ is now known as Patterner

[15:35] *** jaldhar left
[15:35] *** jaldhar joined
[15:36] <KyleHa> I'm running that tools/update_passing_test_data.pl now.  I'm surprised by how much it says works (in 'master').  Has this not been done in a while, or does it not work the way it used to, or am I not reading the results right?

[15:38] <jnthn> pmichaud: OK, the only thing I think is left in the typed variables (not attributes) thing now is filling out the trait_mod.

[15:38] <moritz_> KyleHa: it seems to have problems with files marked with #icu

[15:38] <pmichaud> jnthn++

[15:38] <KyleHa> Intensive Care Unit?

[15:38] <jnthn> pmichaud: Any requests for "what next"?

[15:38] <moritz_> KyleHa: and reports them even though they are in t/spectest.data already

[15:38] <moritz_> KyleHa: unicode library

[15:38] <pmichaud> I think I'll do pblock, then work on nqp-in-parrot

[15:38] *** kst left
[15:39] <KyleHa> Oh, I see.

[15:39] <pmichaud> jnthn: no requests that I can think of at the moment

[15:39] <jnthn> 'k

[15:39] <pmichaud> I haven't even tried running "make spectest" yet to see the fireworks :)

[15:39] *** kst joined
[15:39] *** pmurias joined
[15:39] <jnthn> pmichaud: Expect glorious fail.

[15:39] *** jaldhar left
[15:40] <moritz_> KyleHa: also some test files run all tests, and pass some of them, but there's no point putting them in t/spectest.data because they simply don't implement that feature yet

[15:40] <moritz_> for example there's an LTM test

[15:40] <masak> moritz_: I put in a reply: http://www.perlmonks.org/?node_id=806515

[15:40] <moritz_> which rakudo runs, and it passes some sanity tests in there

[15:41] <moritz_> KyleHa: but if you find some low-hanging fruits for fudging and inclusion, feel free :-)

[15:42] *** nihiliad joined
[15:43] <pmurias> masak: does a lot of people actually want to keep the parenthesis in if's?

[15:43] <masak> pmurias: maybe not a lot. but a vocal minority.

[15:43] <pmurias> i find it similiar to wanting to unpack @_ manually

[15:44] <KyleHa> If minorities weren't vocal, you'd never hear from them.

[15:44] <masak> pmurias: believe it or not, there are proponents for the mutating sigils in Perl 5 as well. :)

[15:45] <pmurias> mutating sigils actually have some sense

[15:45] <masak> they do.

[15:45] <pmurias> extra parens in ifs are just extra cruft

[15:45] <moritz_> they are needed for Perl 5's context model

[15:45] <masak> moritz_: that sounds like material for a blog post.

[15:46] <masak> moritz_: along with how Perl 6 does without them.

[15:46] <pmurias> you could add extra parens everywhere (but you might just switch to lisp)

[15:46] <moritz_> (the mutating sigils, not the parens)

[15:46] <moritz_> masak: nice idea, yes

[15:47] *** justatheory joined
[15:47] <masak> moritz_: it's all yours. :)

[15:52] <KyleHa> Is t/spec/S32-trig/trig.t obsoleted by all the other trig tests?

[15:53] <moritz_> we should ask colomon 

[15:54] *** kidd` left
[15:56] <pmurias> perl6: say (do {if 0 {}}).perl

[15:56] <p6eval> elf 29051, pugs: undef␤

[15:56] <p6eval> ..rakudo f16c9e: 0␤

[15:56] <pmurias> is rakudo right here?

[15:56] <moritz_> no

[15:56] <moritz_> IMHO it should really be Nil

[15:57] <pmurias> Nil? 

[15:57] <dalek> rakudo: a02a26e | (Kyle Hasselbacher)++ | tools/update_passing_test_data.pl:

[15:57] <dalek> rakudo: tools/update_passing_test_data.pl: ignore spectest.data comments better

[15:57] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a02a26ea384145c812b3d8d6b5274bec2c7f66dd

[15:57] <moritz_> the thing that's an empty list in list context, and undef in scalar context

[15:58] *** kst left
[15:58] *** meppel left
[15:58] *** kst joined
[15:58] *** payload joined
[16:02] <KyleHa> What's bitwise negation in Perl 6 (that is, prefix ~ in Perl 5)?

[16:02] *** kst left
[16:03] *** hudnix left
[16:03] <moritz_> rakudo: say +! 4

[16:03] <p6eval> rakudo f16c9e: 0␤

[16:03] *** kst joined
[16:03] <moritz_> rakudo: say +^ 4

[16:03] <p6eval> rakudo f16c9e: -5␤

[16:03] <moritz_> that's it

[16:03] <moritz_> rakudo: say ~^ 4

[16:03] <p6eval> rakudo f16c9e: 0 1 2 3␤

[16:03] <Woodi> masak: ping

[16:03] <moritz_> erm

[16:03] <masak> Woodi: pong

[16:04] <KyleHa> Hmmm.  In Perl 5, I get 'say ~0' as a huge number, but in Perl 6, 'say +^ 0' is -1.

[16:04] <Woodi> masak: Squerel isn't part of Web ?

[16:04] *** jaldhar joined
[16:04] <PerlJam> rakudo: say ~^4

[16:04] <p6eval> rakudo f16c9e: 0 1 2 3␤

[16:04] <PerlJam> heh, that's a rakudo bug

[16:05] <PerlJam> (maybe)

[16:05] <PerlJam> rakudo: say ~^~4

[16:05] <p6eval> rakudo f16c9e: 0 1 2 3␤

[16:05] <PerlJam> no, definitely

[16:06] <masak> Woodi: it is, currently.

[16:06] <masak> Woodi: though the relation 'part of Web.pm' is a bit problematic, and has never been wholly nailed down.

[16:06] <masak> Woodi: I consider Web.pm as a sort of incubator for projects that will be needed for web-related modules.

[16:07] <Woodi> masak: k

[16:08] *** kst left
[16:08] *** kst joined
[16:12] <pmichaud> pointy blocks should now "work" in ng, for various values of "work"

[16:12] *** kst left
[16:12] <pmichaud> we still don't handled implicit $_ yet

[16:12] <pmichaud> *handle

[16:13] *** kst joined
[16:13] <pmichaud> afk, lunch

[16:16] *** alester joined
[16:17] <alester> Where's my backup admins at? https://twitter.com/clonezone/status/5622151808

[16:17] *** kst left
[16:17] *** kst joined
[16:18] * PerlJam wasn't aware that there were any backup admins for rakudo.org

[16:19] <KyleHa> We have backups?

[16:19] <Woodi> masak: may I move Test.pm and Configure.pm from web/lib into somewhere else ? web/tools or web/plib ?

[16:19] <moritz_> I think I've mentioned that a few times here on the channel

[16:19] <masak> Woodi: oh dear, is there a Test.pm still in there? :/

[16:20] <masak> Woodi: what is it you're doing, by the way? packaging something?

[16:20] <Woodi> making moduless are possible to build...

[16:21] *** payload left
[16:21] <Woodi> and make way to put make install into modules...

[16:21] *** kst left
[16:21] *** mariuz left
[16:21] *** kst joined
[16:22] <moritz_> that's what the installed-module branch in proto aims at

[16:22] <Woodi> it is root of all evil...

[16:23] *** mariuz joined
[16:23] <Woodi> it makes installation code not required...

[16:23] <Woodi> so no way to install

[16:24] <Woodi> assume you have /usr/lib/perl6 for modules...

[16:24] <moritz_> the branch I'm talking about doesn't

[16:24] <Woodi> none of modules is possible to install... ENOTSEEYET

[16:25] <Woodi> moritz_: branch cannot do magic if module do not designate what .pm files belong to module...

[16:26] <moritz_> Woodi: right, but that can be declarative

[16:26] <Woodi> not at the moment...

[16:27] <Woodi> i think module/lib should be only for important modules, not build tools...

[16:28] <Woodi> maybe plib for private module libraries ?

[16:29] <moritz_> some Perl 5 modules use 'inc' for build tools, iirc

[16:30] <Woodi> works for me

[16:30] <[particle]> inc/Module/Install.pm

[16:30] <moritz_> that's what I meant, [particle]++

[16:30] <Woodi> and blib is ?

[16:31] <PerlJam> Woodi: staging area for installation "build lib" or somesuch

[16:31] <Woodi> so install copies from blib ?

[16:31] <[particle]> it's the install tree

[16:32] <[particle]> files are copied to blib (the install tree), and testing is performed from there

[16:32] <masak> I don't know why, but every time I think of questions related to 'what proto should do', a great weakness comes upon me.

[16:32] <[particle]> that way, you're testing things as they will be installed, not as they are in source

[16:32] <Woodi> good for packaging too (tgz, etc)

[16:33] <Woodi> masak: proto_project_dir can be good for versioning

[16:34] <masak> Woodi: versioning? please, please do not make proto handle versions. make something that works instead.

[16:34] <Woodi> masak: except it should be downloading directory imo...

[16:34] <masak> cf. pigs, lipstick, etc.

[16:34] *** cotto_work joined
[16:34] <[particle]> mmm, pork.

[16:34] <Woodi> masak: why ? :)

[16:34] <masak> Woodi: because we deserve something that works.

[16:35] <moritz_> masak: I've written the blog post now... will be published in a week :-)

[16:35] <masak> and proto isn't it.

[16:35] <masak> moritz_: :)

[16:35] <moritz_> so that I can stay in the ironman competition a bit longer :-)

[16:35] <Woodi> masak: 1. name is superb; 2. proto works - ppls use it atm

[16:36] <moritz_> fsvo "works"?

[16:36] <Woodi> masak: and i just removed perl6 installing things from proto and started (after month) working to me too

[16:36] <masak> Woodi: I know. see http://use.perl.org/~masak/journal/38876

[16:37] <Woodi> masak: but then i had stuck with modules "design"...

[16:37] <PerlJam> masak: proto may be a victim of its own success relative to Woodi   :)

[16:37] <masak> PerlJam: frothing at the mouth and mumblings of 'Austria' are early symptoms.

[16:37] <pugs_svn> r29052 | kyle++ | [t/spec] fudge S04-phasers/in-eval 

[16:38] <Woodi> the most successful Perl 6 installer of the decade is true as 100% :)

[16:38] <masak> I rest my case.

[16:38] <PerlJam> he

[16:39] <PerlJam> heh even

[16:41] <Wolfman2000> moritz_: thanks for installing DateTime::Format::MySQL. I'll mess with it once I actually get the initial query I'm trying to do to work.

[16:42] <Woodi> masak: so i will move config.pm and test.pm from lib to inc and add inc to perl6lib, k ?

[16:42] <masak> Woodi: I have no idea whether that is 'k' or not. :/

[16:42] <Woodi> o(k) ?

[16:42] <masak> I don't feel I have an overview of the problem landscape.

[16:42] <alester> No, we don't have backup admins, but last time there was something b0rken on rakudo.org, there was much hue and cry over the need for them.

[16:43] *** NorwayGeek_ joined
[16:43] <Woodi> backups ? was looking on github in perl projects and rakudo was: moust forked thing :)

[16:44] <moritz_> alester: it's an old problem, and the cries have long since faded

[16:44] <moritz_> (the RSS feed thing)

[16:44] <alester> I figured.

[16:44] *** jaldhar left
[16:44] <PerlJam> alester: Well ... make me an admin and i'll fix broken things if I can when I can.

[16:45] <pugs_svn> r29053 | pmurias++ | [mildew-js] empty blocks have a value (TODO make it Nil) 

[16:45] <pugs_svn> r29054 | pmurias++ | [mildew-js] added t/dollar_bang.t to TESTS-js 

[16:45] <masak> someone complained about rakudo.org's feed today on Twitter: http://twitter.com/clonezone/status/5622151808

[16:45] <PerlJam> deja vu

[16:46] *** mariuz left
[16:47] <Woodi> re-mildew Perl6 compiler need a lot of Perl5 Moose to install...

[16:47] <pmurias> Woodi: you mean re-mildew needs Moose, yes

[16:48] <Woodi> a lot, a lot of keypressing in -e CPAN :)

[16:48] *** jaldhar joined
[16:48] <pmurias> Woodi: i think it's possible to make CPAN install stuff without asking

[16:49] <Woodi> hmm, to late...

[16:49] <Woodi> what module Mouse do ? :)

[16:49] <pmurias> Woodi: by the way, installing {mildew-js,re-mildew} is a bit rough so if have problems ask

[16:49] <pmurias> Woodi: Moose without meta stuff

[16:49] <Woodi> oki

[16:50] <PerlJam> Woodi: Mouse is a tiny Moose

[16:50] <Woodi> but re-mildew emits plain old C ?

[16:50] <KyleHa> Is there a way for me to determine from Rakudo whether my CPU is 32 bit or 64 bit?

[16:50] <moritz_> KyleHa: probably over %*VM<config>

[16:50] <KyleHa> More to the point, I want to know when an int will overflow.

[16:51] <jaffa4> what is *?

[16:51] <PerlJam> jaffa4: contextual

[16:51] <moritz_> an asterisk

[16:51] <pmurias> re-mildew it emits C but it needs SMOP for the runtime to work

[16:51] <PerlJam> jaffa4: assuming you're referring to %*VM<config>

[16:51] <Woodi> to link ?

[16:51] <jaffa4> contextual? yes,.

[16:51] <pmurias> Woodi: yes

[16:51] <jaffa4> How does that differ from local or global declaration?

[16:52] <moritz_> it's lexotic :-)

[16:52] <Woodi> pmurias: let modules install and make all works then i see what happens :)

[16:52] <PerlJam> moritz_: heh, you were reading my mind (I was trying hard not to say that :)

[16:53] *** oZ] joined
[16:53] <KyleHa> Would it be bad for spectests to use some Perl 5?

[16:54] <moritz_> it should be avoided whenever possible

[16:54] <pmurias> Woodi: re-mildew doesn't support much features yet, i'm working on mildew-js now (which is a javascript backend for re-mildew) and features re-mildew after it passes the re-mildew tests

[16:54] <KyleHa> Yeah, that was my thought too.

[16:54] <pmurias> KyleHa: how do you want o use Perl 5?

[16:54] *** NorwayGeek left
[16:54] <KyleHa> pmurias: I want to get its value of '~0'.  8-)

[16:55] <pmurias> the only place where using Perl 5 is acceptable is in perl5 interop tests

[16:55] <KyleHa> I see S03-operators/overflow.t works for me, but that may be because it's aimed at 32 bit procs, and I have a 64 bit proc.

[16:55] <Woodi> pmurias: but it is one language more in chain p6->js->c...

[16:56] <masak> &

[16:57] <pmurias> Woodi: yes, but js can run in browsers

[16:58] <Woodi> pmurias: how many MB m-js is now ? :)

[16:58] *** oZ] left
[16:58] *** oZ] joined
[16:59] <pmurias> Woodi: you mean how big is the source code?

[16:59] <jaffa4> How does that differ from local or global declaration?

[16:59] <Woodi> pmurias: no, compiler compiled to js

[17:00] <pmurias> it's not yet bootstraped

[17:00] <Woodi> i do not expect something comparable to css, but.... realy no idea what to think...

[17:01] <pmurias> css = ?

[17:01] <Woodi> pmurias: but what should be expected ? mean: for what can be used, if big then not for plain www users...

[17:01] <moritz_> jaffa4: read r29049 of the pugs repo, it explains that in great detail

[17:02] <Woodi> p6 compiler should weight more then cascade style sheets...

[17:02] <Woodi> or for server side usage ?

[17:03] <pmurias> you would compile p6 to js on the server and if you don't use eval the user doesn't have to download the compiler

[17:04] <pmurias> just compiled code + runtime

[17:04] <Woodi> super. but it implies i have no idea how big picture looks like :)

[17:05] <TimToady> pmurias: regarding if 0 {} returning Nil, see S04:197 and S04:266

[17:05] <pmurias> you compile p6 code with mildew-js to js and the the user downloads the js

[17:06] <TimToady> this was an explicit change from P5 so that we could write list comprehensions without special syntax

[17:06] <pmichaud> back from lunch

[17:06] <dalek> rakudo: 50e495b | (Kyle Hasselbacher)++ | t/spectest.data:

[17:06] <dalek> rakudo: [spectest.data] add a couple runnable files

[17:06] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/50e495b8dd96c1df579ff64a4d549ffb9cb62952

[17:06] <Woodi> pmurias: ah, that explains everything :)

[17:07] <jnthn> pmichaud: w/b. I'm finally gearing up to put parametric roles back.

[17:07] <pmurias> TimToady: thanks

[17:07] <jaffa4> I see

[17:07] <pmurias> the actuall problematic case was if 1 {}

[17:08] <pmurias> TimToady: does if 1 {} return 1 or Nil?

[17:09] <TimToady> KyleHa: the difference on bitwise complement between p5 and p6 results from the fact that p6's Int is reallly BigInt, so if we do unsigned complement we end up with Inf

[17:09] <KyleHa> Aha.

[17:09] <TimToady> so signed complement seems more useful

[17:09] <TimToady> pmurias: it returns Nil too

[17:09] *** cdarroch joined
[17:10] *** masak left
[17:13] <pugs_svn> r29055 | pmurias++ | [S04] clarify the return value of {} 

[17:13] <pmurias> TimToady: forgive me if i'm wrong ;)

[17:14] <Wolfman2000> phenny: tell Juerd Sorry to make another request, but mysql is causing too many problems for me. Any chance of installing postgresql, or will I have to adapt to using SQLite instead?

[17:14] <phenny> Wolfman2000: I'll pass that on when Juerd is around.

[17:14] <TimToady> pmurias: well, I'll just have forgive you for the editing collision :)

[17:15] <colomon> KyleHa: trig.t is officially obsolete.  I think I told rakudo not to run it?

[17:16] <KyleHa> Yes, it doesn't run, but it's still in the pugs repo.  Can it go away completely, or is there something in there we need?

[17:17] <colomon> As far as I know it can go away completely, I was just paranoid about making it so.

[17:18] <colomon> I suppose it will still be hiding in svn history anyway...

[17:18] <pugs_svn> r29056 | lwall++ | [S04] clarify Nil semantics of empty blocks and missing branches, pmurias++ 

[17:18] <KyleHa> Yes.

[17:18] <KyleHa> Thanks, colomon++

[17:18] <colomon> Want me to get rid of it?

[17:19] <KyleHa> If you don't, I will.

[17:19] <colomon> I'll take it.

[17:20] <pugs_svn> r29057 | colomon++ | [t/spec] Delete dead trig.t tests. 

[17:20] *** _jaldhar joined
[17:22] <colomon> KyleHa++ # for appropriate prodding

[17:22] *** jaldhar left
[17:24] <TimToady> moritz_: context vars aren't precisely lexotic, but they are dynlexic.

[17:24] <TimToady> lexotic is specifically about preferring the lexical search over the dynamic search

[17:25] <TimToady> and context vars are purely dynamic search, albeit into lexpads

[17:25] * colomon is wondering what percentage of the sentences of #perl6 would have been meaningless gibberish just the week before...

[17:25] <moritz_> colomon: aren't the still? ;-)

[17:26] <moritz_> TimToady: got it, thanks

[17:26] <moritz_> s/the/they/

[17:26] *** explorer joined
[17:27] <cognominal> TimToady is clearly a lexomane

[17:27] <moritz_> not a dynlexomane? ;-)

[17:27] <pugs_svn> r29058 | kyle++ | [t/spec] refudge S10-packages/basic.  One more pass since parrot rev bump 

[17:29] <cognominal> ...and a syno maniac too, probably what perl is sinful chinese to many

[17:33] <TimToady> 哈哈

[17:34] <TimToady> I guess a laugh/yawn is something that "fits in your mouth"

[17:37] <TimToady> and makes a "ha" sound

[17:41] <cognominal> anyway, with OO in Perl 6, TimToady is a role model

[17:42] <TimToady> you're pretty classy yourself

[17:42] <jnthn> You both have your good attributes. :-)

[17:42] * pmichaud wonders if he is a Failure, albeit a very interesting one.  :-)

[17:42] <[particle]> if you both introspect, i think you'll find you're not objective enough

[17:44] * TimToady is picturing Introspector Clouseau

[17:44] <TimToady> "Cato, what have you done to my brain?"

[17:45] <TimToady> mb

[17:46] *** mberends left
[17:46] *** TimToady sets mode: +vv dalek hugme

[17:46] *** TimToady sets mode: +vvvv ilbot2 ilogger2 IRSeekBot lambdabot

[17:46] *** TimToady sets mode: +vvvv lisppaste3 mubot p6eval phenny

[17:46] *** TimToady sets mode: +vvv pointme pugs_svn zaslon

[17:49] <[particle]> v++

[17:51] <KyleHa> smolder.plusthree.com not feeling well today?

[17:51] * jnthn finally finds and catches the irritating buzzy insect that's been distracting him on and off all afternoon

[17:51] <TimToady> debugging, eh?

[17:52] <jnthn> *groan*

[17:52] <PerlJam> jnthn: come on!  That was *much* better than some of your earlier puns.  :)

[17:53] <jnthn> It was an admiring groan. :-)

[17:56] <TimToady> .oO(it wasn't that good...)

[17:57] *** payload joined
[17:58] *** NorwayGeek_ is now known as NorwayGeek

[17:58] <TimToady> y'know, the bug metaphor isn't very good.  with a meatspace bug, it's more efficient to just let it bite you and fly away again.

[17:58] <TimToady> unlike with a computer bug, that keeps biting over and over

[17:59] <TimToady> well, assuming you don't get malaria, which isn't very efficient either, except in the way that it is...

[18:00] <moritz_> oh, I've been bitten by some meatspace bugs multiple times

[18:00] <TimToady> well, fleas are special

[18:06] <Woodi> TimToady: any ideas about filesystem layout for versioned modules ? or it should be db or git or ... ? 

[18:09] *** stephenlb joined
[18:11] *** explorer left
[18:20] <pugs_svn> r29059 | kyle++ | [t/spec] move a test that passed only because previous test autovivified 

[18:22] *** payload left
[18:23] * pmichaud decides he really ought to write an article about how modules aren't likely to be tied to a filesystem.  Except he doesn't want to touch that tarbaby.

[18:24] * jnthn -> store, bbs

[18:28] <pmichaud> ugh, requiring default values to be in their own blocks is making $_ a pain

[18:31] <Wolfman2000> brb/afk

[18:32] *** Wolfman2000 left
[18:35] <pmichaud> jnthn: ping  (when you get back)

[18:42] *** fax left
[18:43] <dalek> book: 30057bc | masak++ | src/basics.pod:

[18:43] <dalek> book: [basics] more minor fixes

[18:43] <dalek> book: review: http://github.com/perl6/book/commit/30057bc9d95b780681353cfc99cc433bfdff91b2

[18:43] <dalek> book: a6cee3d | masak++ | :

[18:43] <dalek> book: Merge branch 'master' of github.com:perl6/book

[18:43] <dalek> book: Conflicts:

[18:43] <dalek> book: 	src/basics.pod

[18:43] <dalek> book: review: http://github.com/perl6/book/commit/a6cee3de231b9325f654768182e6af3dcf0b138b

[18:44] *** justatheory left
[18:45] *** mberends joined
[18:52] <jnthn> pmichaud: pong, I'm back

[18:52] <pmichaud> I'm a little concerned about handling $_ as a default parameter

[18:53] <jnthn> (just unpacking shopping, but go ahead)

[18:53] <pmichaud> a bare pblock is generally equivalent to      <-> $_ is ref = OUTER::<$_> { ... }

[18:54] <pmichaud> (perhaps not 'is ref', not relevant to this discussion)

[18:54] <pmichaud> but since default parameters are now always required to be Parrot subs, we're likely to end up with a *lot* of Parrot subs that do nothing but look up two outer scopes for $_

[18:55] <jnthn> pmichaud: Right. It did run through my mind earlier that this may be an issue for us.

[18:55] <jnthn> If nothing against an extra flag we set on the signature, that the binder recognizes and handles specially.

[18:55] <jnthn> "default from outer" or something.

[18:56] <pmichaud> since this is extremely common, I think I'd prefer that.

[18:56] <jnthn> Yeah.

[18:56] <jnthn> Same.

[18:56] <pmichaud> let me test and check in what I have now

[18:56] <pmichaud> the code that generates the default $_ is at line 128

[18:56] <pmichaud> you can switch it to whatever you decide for the binder

[18:57] <pmichaud> test succeeded.

[18:57] <jnthn> pmichaud: You just create a Parameter object, followed by a Signature?

[18:57] <pmichaud> signature, followed by parameter, but yeah.

[18:57] <jnthn> oh, yes

[18:57] <jnthn> OK, cool

[18:57] <pmichaud> it's pretty obvious how it works when you see it

[18:57] <jnthn> I can probably have this together Real Quick.

[18:58] <pmichaud> I suspect you can :-)

[18:58] <pmichaud> just a "bind from outer" flag that binds the variable to its equivalent outer would be excellent

[18:58] <jnthn> Right.

[18:58] <pmichaud> er, default from outer

[18:58] <pmichaud> whatever

[18:58] <jnthn> I'll just put it as a generic flag.

[18:58] <jnthn> If there's anything else that needs it, it'll be there. :-)

[18:59] <jnthn> (And if not, it's all guts.)

[18:59] *** seanstickle joined
[18:59] <pmichaud> pushed.

[18:59] <jnthn> (that is, not exposed leakily)

[18:59] <jnthn> oh, maybe apart from introspection...

[18:59] *** seanstickle left
[18:59] <jnthn> can solve that if we need to.

[19:00] <dalek> book: 25e3c18 | masak++ | src/classes-and-objects.pod:

[19:00] <dalek> book: [OO] added three questions

[19:00] <dalek> book: These questions could eventually be incorporated as exercises (if we decide

[19:00] <dalek> book: to have exercises), or they could perhaps be incorporated in the text itself.

[19:00] <dalek> book: I plan to write full answers to these three questions as well.

[19:01] <dalek> book: review: http://github.com/perl6/book/commit/25e3c186a7b883107cb732268e86d658740c8035

[19:02] <pmichaud> hugme tweet rakudoperl rakudo-ng now has pointy blocks again

[19:02] * hugme hugs pmichaud; tweet delivered

[19:03] <jnthn> oh no!!!

[19:03] <jnthn> when I went to the store, I forgot to buy beer. :-/

[19:03] *** cdarroch left
[19:03] <[particle]> hugme: hug jonathan

[19:03] * hugme hugs jonathan

[19:03] <jnthn> :-)

[19:03] <jnthn> Eh, it's open for another 2 hours...

[19:03] * pmichaud watches as rakudo development grinds to a complete stop.

[19:04] <pmichaud> Q:  "Why did Rakudo fail?"    A: "Insufficient beer."

[19:04] <[particle]> EBEERRUN

[19:05] * KyleHa has a new respect for the pugs/VICTUALS file.

[19:05] <pmichaud> I'm not sure which concerns me more -- the fact that jonathan is running short of beer, or the fact that he went to the store AND FORGOT TO BUY BEER.

[19:06] <pmichaud> :)

[19:06] <KyleHa> I have a dream that someday, I too might consume something worthy of inclusion in VICTUALS.

[19:07] *** SmokeMachine left
[19:08] *** ssm left
[19:08] *** daemon left
[19:08] *** _jaldhar left
[19:08] *** oZ] left
[19:08] *** reid05 left
[19:08] *** pointme left
[19:08] *** barney left
[19:08] *** zaphar_ps left
[19:08] *** xinming left
[19:08] *** jan_ left
[19:08] *** szabgab left
[19:08] *** colomon left
[19:08] *** [particle] left
[19:08] *** PacoLinux left
[19:08] *** Infinoid left
[19:08] *** carlin left
[19:08] *** araujo left
[19:08] *** arthur-_ left
[19:08] *** athomason left
[19:08] *** cosimo left
[19:08] *** yath left
[19:08] *** Maddingue left
[19:08] *** japhb left
[19:08] *** hicx174 left
[19:08] *** Juerd left
[19:08] *** jnthn left
[19:08] *** lambdabot left
[19:08] *** omega_ left
[19:08] *** parduncia left
[19:08] *** constant left
[19:08] *** cognominal left
[19:08] *** sri__ left
[19:08] *** spinclad left
[19:08] *** jiing_ left
[19:08] *** pugs_svn left
[19:08] *** krunen left
[19:08] *** Woodi left
[19:08] *** frew__ left
[19:08] *** dukeleto left
[19:08] *** hatseflats left
[19:08] *** cls_bsd left
[19:08] *** phenny left
[19:13] *** Wolfman2000 joined
[19:13] *** payload joined
[19:18] <dalek> book: 5a61748 | masak++ | src/classes-and-objects.pod:

[19:18] <dalek> book: [OO] added answer to the first question

[19:18] <dalek> book: review: http://github.com/perl6/book/commit/5a61748a3030fd8748973c8f5a60230aa0e7209c

[19:22] <Wolfman2000> ...okay, I think I'm doing a little better. These past few days have been slightly stressful.

[19:22] *** SmokeMachine joined
[19:22] *** masak joined
[19:25] <Wolfman2000> masak: I am starting to not like Catalyst. or MySQL.

[19:25] <masak> Wolfman2000: sorry to hear that.

[19:25] <Wolfman2000> mysql--; postgresql++; sqlite++;

[19:26] <Wolfman2000> @karma mysql

[19:26] <Wolfman2000> ...the bot's not here? BAH

[19:27] <moritz_> zaslon: karma mysql

[19:27] <zaslon> Sorry, I don't understand that command

[19:27] <KyleHa> Pg > MySQL

[19:27] <moritz_> mubot: karma mysql

[19:27] <mubot> mysql has a karma of -1

[19:27] <moritz_> mubot: karma postgresql

[19:27] <mubot> postgresql has a karma of 1

[19:27] <Wolfman2000> ...hold on a second...one of my scripts is acting up.

[19:27] *** cdarroch joined
[19:28] <Wolfman2000> moritz_++: thanks.

[19:34] <Wolfman2000> masak: What are your thoughts of sqlite anyway?

[19:34] *** NorwayGeek_ joined
[19:35] <masak> Wolfman2000: that it's what currently works with Web.pm :)

[19:36] <Wolfman2000> If nothing else, SQLite does seem like a good fallback. But...is it a good primary?

[19:37] <PerlJam> fallback?

[19:37] <Wolfman2000> ...great: I've angered a fan.

[19:37] <PerlJam> not at all

[19:37] <Su-Shee> I like sqlite very much. small, fast, convenient. great project. 

[19:38] <moritz_> Wolfman2000: sqlite is very good, unless you have lots of concurrent accesses

[19:38] <PerlJam> sqlite is great if you need a self-contained RDBMS with a small set of tables with a small amount of data in them.  :)

[19:38] <PerlJam> (where you get to pick what "small" means here)

[19:38] <Su-Shee> PerlJam: though small is relative relative ;)

[19:38] <Wolfman2000> PerlJam: ...you just answered my question.

[19:39] <Su-Shee> no, he didn't really. 

[19:39] <Wolfman2000> I'm debating chucking the mysql database that I have planned for the Perl 6 Pastebin I'm making and using sqlite instead. It will probably work better with DBIC and Catalyst.

[19:39] <Su-Shee> for the average joe web developer and website and minor shops, sqlite would be a great choice.

[19:39] <Wolfman2000> masak: If I run into further trouble, I'll probably find a way to email you the schema I made.

[19:40] <Wolfman2000> Su-Shee: You can't read my mind.

[19:40] <masak> Wolfman2000: oki.

[19:41] <Su-Shee> Wolfman2000: ah well whatever. use what you want. none of my business anyway.

[19:41] *** cognominal joined
[19:42] <Wolfman2000> Su-Shee: I'm thinking of sqlite. I'm not expecting postgresql to be installed on feather...that, and I probably will need to learn how to work with sqlite at some point anyway.

[19:43] *** PZt left
[19:44] *** NorwayGeek left
[19:44] *** eternaleye left
[19:47] *** spinclad joined
[19:47] *** cls_bsd joined
[19:47] *** constant joined
[19:47] *** sri__ joined
[19:47] *** phenny joined
[19:47] *** jiing_ joined
[19:47] *** hatseflats joined
[19:47] *** pugs_svn joined
[19:47] *** krunen joined
[19:47] *** dukeleto joined
[19:47] *** Woodi joined
[19:47] *** parduncia joined
[19:47] *** frew__ joined
[19:47] *** irc.freenode.net sets mode: +vv phenny pugs_svn

[19:47] *** envi^home left
[19:48] *** japhb joined
[19:48] *** _jaldhar joined
[19:48] *** oZ] joined
[19:48] *** reid05 joined
[19:48] *** pointme joined
[19:48] *** barney joined
[19:48] *** zaphar_ps joined
[19:48] *** xinming joined
[19:48] *** jan_ joined
[19:48] *** szabgab joined
[19:48] *** colomon joined
[19:48] *** [particle] joined
[19:48] *** PacoLinux joined
[19:48] *** Infinoid joined
[19:48] *** carlin joined
[19:48] *** araujo joined
[19:48] *** arthur-_ joined
[19:48] *** yath joined
[19:48] *** hicx174 joined
[19:48] *** Juerd joined
[19:48] *** Maddingue joined
[19:48] *** omega_ joined
[19:48] *** ssm joined
[19:48] *** daemon joined
[19:48] *** athomason joined
[19:48] *** cosimo joined
[19:48] *** lambdabot joined
[19:48] *** irc.freenode.net sets mode: +ovov japhb pointme Juerd lambdabot

[19:48] *** jnthn joined
[19:50] <TimToady> wow

[19:52] <Wolfman2000> TimToady: surprised at the split?

[19:52] <TimToady> just surprised it recovered so well  :)

[19:53] <dalek> book: 5992bee | masak++ | src/classes-and-objects.pod:

[19:53] <dalek> book: [OO] added answer to the second question

[19:53] <dalek> book: review: http://github.com/perl6/book/commit/5992beed104b1bec29f97191ef087c9376ebb6ab

[21:29] *** xenoterracide left
[23:19] *** masak left
