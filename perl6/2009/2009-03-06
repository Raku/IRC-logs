[00:00] <s1n> moritz_: ping

[00:16] *** skids joined
[00:28] *** armagad left
[00:32] <wayland76> In response to diakopter's question about reference material for Context...

[00:33] <wayland76> There's a section on them in S29 that I'm hoping will someday (soon?) move to S32

[00:33] <wayland76> @tell diakopter There's a section on Contexts in S29 that I'm hoping will someday (soon?) move to S32

[00:34] <lambdabot> Consider it noted.

[00:53] <diakopter> k..

[00:53] <lambdabot> diakopter: You have 2 new messages. '/msg lambdabot @messages' to read them.

[01:00] *** bacek_ joined
[01:18] *** M_o_C left
[01:32] <diakopter> E2MANYWTDI

[01:34] <skids> Well, I got that but for 3 seconds I was thinking of the hazards involved in accidentally typing your password into IRC :-)

[01:34] *** shinobi-cl joined
[01:34] <diakopter> ESUCKYPASSWORD

[01:37] *** bacek_ left
[01:39] *** _jaldhar_ joined
[01:45] *** nihiliad joined
[01:48] <diakopter> (The Paradox of Choice)

[01:48] *** shinobi-cl left
[01:50] <pugs_svn> r25719 | wayland++ | Made Basics contain Object, Any, Pattern, and Scalar

[01:52] <pugs_svn> r25720 | wayland++ | Any + Scalar -> Basics (along with Object and Pattern)

[01:59] * wayland76 votes for S08, and hopes someone has the Capture-foo to do it :)

[02:03] <wayland76> (i'm backlogging :) )

[02:03] <wayland76> Notes to those keen to expand beyond Latin-1 -- Perl6 can be extended to do this fairly easily, I believe

[02:05] <wayland76> I predict World War 3 around 2020-2025.  I hope I'm wrong :)

[02:05] *** shinobi-cl joined
[02:07] <wayland76> If we're worried about the hashy component of slice, maybe we could call the slice/capture things "cookies".  As in "hash cookies" :)

[02:08] <wayland76> (in Australia at least, a "slice" is what some Americans would call a "tray bake"; the same form factor as brownies, but different ingredients, depending on the slice recipe -- lemon slice can be good :) )

[02:09] *** shinobi-cl left
[02:09] *** shinobi-cl joined
[02:10] *** frodwith joined
[02:12] *** bacek_ joined
[02:26] *** Minazo joined
[02:27] *** _jaldhar_ is now known as jaldhar

[02:28] * skids never heard of a "tray bake"

[02:28] <skids> In my house we'd call that "what were you too lazy to roll individual cookies?"  :-)

[02:29] <wayland76> Well, you can have multi-layered things too

[02:29] <wayland76> For example, a layer of biscuit-crumbs in butter

[02:30] <wayland76> and a layer of opaque white lemon-flavoured jelly-like stuff (or maybe you'd say jello-like)

[02:30] <wayland76> and then a layer of semi-transparent jelly/jello

[02:31] <wayland76> Well, when I explained the Australian use of the word "slice" to Americans and Canadians, the only alternative anyone was able to offer was "tray bake"

[02:32] <wayland76> Oh, and when I said "biscuit crumbs", all Americans should read it as "cookie crumbs" :)

[02:32] <diakopter> "____ bars"

[02:32] <diakopter> lemon, river, etc

[02:32] <wayland76> Oh, good point diakopter :)

[02:32] *** shinobi-cl left
[02:33] *** shinobi-cl joined
[02:34] <skids> "homemade pop tarts?"  I dunno

[02:35] <wayland76> A bit like that, I guess (at least, judging by the Wikipedia page on pop tarts :) )

[02:37] <skids> I think I'll stick with "giant square cookie"

[02:37] *** Tene joined
[02:38] <wayland76> Feel free to, but if you also understand how I use "slice", you'll get the joke above about hash cookies :)

[02:39] <wayland76> Incidentally, skids, we usually cut them into pieces about the size of your index finger after they're all cooked

[02:39] <wayland76> as per diakopter's suggestion of ___ bars

[02:40] <skids> being that we are particularly unimaginative, we'd probably call them "sticks"

[02:40] <diakopter> river bars will be the death of me.

[02:42] <diakopter> I like the idea, in general, of breaking up the S__ into smaller portions... has anyone else commented on that?

[02:42] *** fridim_ joined
[02:43] <skids> as long as it is done in moderation, though I suspect there will be places where there was some good "flow" that will be lost.  But they are unwieldy unless they get split.

[02:44] <skids> then again a huge index might be intimidating

[02:44] <diakopter> that's my opinion, too.... it'll need a *lot* more consensus though.....

[02:44] <skids> put it this way -- they can always be glued back end to end.

[02:45] <wayland76> I presume S__ means the synopses

[02:45] <wayland76> If so, thanks (I did that :) )

[02:46] <wayland76> My thought is that, to increase manageability, parts of the unwieldy synopses could be moved into S32

[02:46] <wayland76> Of course, there's a lot of things that won't go, but there are probably also some that will :)

[02:47] <skids> given the corresponding apocolypses etc stay with there numbers, it might be good to have a way to figure out how to find the relevant pairs of sections.

[02:48] <wayland76> ?

[02:48] <wayland76> I presume you mean "their numbers", but I still don't understand

[02:49] <wayland76> Quick question -- are you aware that the synopses are based on the chapters in the Camel book?

[02:49] <skids> each synopsis in the original set was paired with the apocolyse "justification" that gets into rationale.

[02:49] <wayland76> (Programming Perl, 3rd edition is the one that I have)

[02:49] <skids> of that I was not aware.

[02:51] <wayland76> skids: http://dev.perl.org/perl6/doc/design/apo/A01.html (Apocalypse 1) talks about the chapter correspondance

[02:52] <wayland76> By "pairs of sections", you don't by any chance mean the way that http://perlcabal.org/syn/ matches each Spec with its corresponding Apocalypse, do you?

[02:52] <skids> ok, now how does someone who just clicks on a "perl documentation" pick up on that?

[02:52] <skids> yes, that's what I meant

[02:53] <wayland76> pick up on the chapter arrangement?

[02:53] <wayland76> Btw, the long term plan is that the Specs (I really should stop calling them synopses) are supposed to specify the language for implementors, not document it for users

[02:54] <wayland76> ...and when the specs and at least one implementation have settled down a little, some user documentation will be written

[02:54] <wayland76> Actually, some people are starting now.  That's what U4X (Userdocs for Christmas) is all about.  

[02:55] <skids> I think the perlcabal page explanatory text might be improved a shade, is all.

[02:56] <wayland76> You mean the one in /syn/ , or the one at / ?

[02:56] *** tarbo2 joined
[02:56] <skids> syn

[02:57] <wayland76> In what way?  

[02:57] <wayland76> Do you want them to declare that they're not user documentation?

[02:57] <skids> hold on fingers covered in mango

[02:59] <wayland76> holding on (to my horses, but not to your fingers :) )

[02:59] <s1n> wayland76: get any other responses for that rakudo newbie email?

[03:01] <wayland76> s1n: No, but there was a thread on IRC where pmichaud et. al. were discussing the fact that they really want some good doco on how a developer can become a Rakudo contributor

[03:03] *** shinobi-cl left
[03:03] *** shinobi-cl joined
[03:03] *** shinobi-cl left
[03:04] <skids> phew.  Mangos: delecious, but very messy.

[03:05] <wayland76> That's why I've been eating dried pears :)

[03:05] <wayland76> I bought a bag of cheap pears, and put them through the dehydrator :)

[03:08] <skids> Anyway just to say stuff like: Synopsis are updated, Apocolypses and Exegeneseseseses are historical, the document set is aimed at developers but can be useful for when the user docs do not go into enough detail.  Draft means really really draft.  SXX above a certain number are overflow from the originals or additions, changed stuff has usually been discussed on p6l or IRC, and STD.pm supersedes everything.

[03:10] <skids> enough to get people oriented.  The stuff people who have been around take for granted.

[03:11] <wayland76> s1n: The comments are somewhere in the discussion at http://irclog.perlgeek.de/perl6/2009-03-04 from 00:30 to 01:21 (yes, that's a lot of discussion, but I think it's mostly the early section that will interest you)

[03:11] <skids> (And really as an aside other than p6l summaries changes and clarifications have not been well documented.)

[03:12] <skids> (So if you go on vacation and come back 3 weeks later, you might be in for some surprises unless you sit down and read a LOT of material to catch up)

[03:13] <wayland76> skids: I agree -- it's hard for an outsider to keep up with things.  I was one for about 7 years, so I know :)

[03:14] <skids> Anyway that's enough complaints from me, back to trying to grok Parrot internals.  More constructive use of time :-)

[03:14] <wayland76> It also looks like, according to the current /syn/ I'm wrong about the current docs not being user documentation for Perl 6.

[03:14] <s1n> well, i've tried very unsuccessfully to devote 4-6 hours a week to contributing and haven't really gotten anywhere

[03:14] <wayland76> skids: Enjoy :)

[03:15] <s1n> so i've been an outsider looking in for a year now

[03:15] <wayland76> s1n: Yeah, that'd be difficult.  Hopefully it will improve in the next month or two, as a few of the current things settle down.

[03:16] <s1n> wayland76: i'm always looking for work, solid work, so if you want, feel free to throw things my way

[03:16] <skids> Oh by the way do we have a word for code that is both valid (and same-functional) P5 and P6 at the same time?

[03:16] <s1n> otherwise i'm left to my unimaginitive devices

[03:17] <wayland76> s1n: Well, we need some developer documentation

[03:17] <wayland76> Or a spec for Captures

[03:18] <s1n> i don't think i'd be any good at writing a spec yet

[03:18] <wayland76> But as for actual coding, I'm afraid I personally am waiting on calls to external languages to be working

[03:18] <s1n> but i have dug around rakudo enough to at least keep my head afloat

[03:18] <skids> Or I think with "is export" fixed up (?) more setting work is now possible.

[03:18] <wayland76> s1n: Well, the information for a spec on captures is mostly there in other documents, and just needs to be collected in one place and written up friendly-like :)

[03:19] <wayland76> skids: I don't understand your question about the word for "code" being valid

[03:19] <wayland76> s1n: Skids has a point about working on the setting, too

[03:20] <s1n> yeah, i thought that sounded most interesting, but for non-contributors, where do i start?

[03:21] <s1n> i mean, if i code something, how am i going to get it into master?

[03:21] <skids> I was just wondering if there's a word for code that parses in two different languages and does the same thing.

[03:21] <wayland76> s1n: Are you familiar with git?

[03:21] <s1n> wayland76: only minimally

[03:21] <s1n> i tried to manage my own fork on github

[03:22] <s1n> it's not easy, especially for beginners, to manage 2 remotes

[03:22] <wayland76> skids: I don't know if we have a word for that.  

[03:22] <wayland76> s1n: You're ahead of me, then

[03:22] <s1n> especially when pmichaud stopped paying attention to the fork queue

[03:23] <wayland76> Judging by the IRC backlog, they're trying to get the hang of git, just like we are

[03:23] <wayland76> And are hoping that they'll be able to get back to the fork queue

[03:24] <s1n> well, i just joined p6c, so i think i'll pop off an email later

[03:24] <wayland76> Am I right in presuming you've seen this?  http://wiki.github.com/rakudo/rakudo/steps-to-create-a-patch

[03:27] <diakopter> no. way.

[03:27] <diakopter> (sorry, not in reference to any other previous msg)

[03:28] <s1n> wayland76: yes, i even appended the last bit about the rebase

[03:28] <s1n> though i think the rebase might night have been right, dunno, it seemed to work :)

[03:29] <wayland76> Ok.  Have you seen http://www.rakudo.org/node/23 ? (the todo list for rakudo.org )

[03:29] <skids> rebase worked wonders for me.

[03:29] <wayland76> diakopter: In reference to what?

[03:31] <wayland76> s1n: Actually, have you considered helping with November?

[03:31] <diakopter> erm. you'll see in a day or two. :)

[03:31] <wayland76> diakopter: Ok.  That sounds ominous :)

[03:31] <diakopter> mruhaha

[03:32] <wayland76> s1n: The devs were just saying how wonderful it was to have people working on November, because it meant that the November team was discovering real bugs in Perl 6

[03:32] <skids> Hrm... found a good DNS name?

[03:32] <skids> (wrt "no. way.")

[03:32] <wayland76> Or, you could go through the bug list, and write tests for them :)

[03:33] *** sri_kraih joined
[03:34] <diakopter> no, I just stumbled upon (no, not using StumbleUpon) a project that will make IronPerl in weeks not years.

[03:34] <s1n> wayland76: no i haven't thought of helping with november

[03:35] <s1n> i'm actually mostly interested in getting rakudo working more completely

[03:35] <s1n> but it's been real hard trying to become a contributor

[03:36] <s1n> i've only had like 1 actual patch accepted, and that was written last summer

[03:36] <s1n> it's frustrating to say the least

[03:37] <wayland76> diakopter: Hooray :)

[03:39] * diakopter is flabbergasted

[03:39] <wayland76> s1n: I agree, and feel pretty much the same myself

[03:40] <wayland76> s1n: Try your message to p6c then.  That's probably your best bet :)

[03:42] *** Minazo left
[03:44] <s1n> wayland76: yes, i need to work on my thesis, but i'll get an email out tonight or tomorrow

[03:46] <wayland76> s1n: Ok, great :)

[03:46] <pugs_svn> r25721 | wayland++ | Added more comments and things, as per suggestions by skids.  

[03:47] <wayland76> skids: Try that on for size :)

[03:47] <wayland76> Go to http://perlcabal.org/syn/ and click "refresh".

[03:47] <wayland76> I think I covered everything you wanted except the part about these not being user docs

[03:48] <skids> Thanks!

[03:54] *** hercynium joined
[03:56] <skids> So here's an idea -- after the heavy lifting reorganizing the Synopsis is done, whenever a change happens to one of the more solid Synopsis, the people who would dare do that should take care to link relevent IRC logs and/or p6l threads.

[03:57] <skids> At that point, we finally have a record of design changes, in the SVN log.

[03:57] <skids> (or git if that ever happens)

[03:58] <skids> (of course not applicable to grammar tweaks)

[03:58] <skids> Erm I meant, English grammar tweaks, that is :-)

[03:59] *** nihiliad left
[04:00] <wayland76> skids: Well, I like the idea, but people will forget.  It's really one for TimToady to decide

[04:00] <s1n> here's another idea, rather than getting spammed by pugs-commits to the spec, why not just use an RSS feed with links to the diff?

[04:02] <wayland76> s1n: Interesting.  I don't think I'm the one to answer that.  

[04:02] <wayland76> Maybe because replies need to go to the mailing list?

[04:03] <s1n> i'm sure we could do something, maybe reply links in the feed message

[04:04] <s1n> i mean, email updates, really? throwback to the early decade for sure

[04:08] *** alester joined
[04:10] *** bacek_ left
[04:11] *** OuLouFu joined
[04:12] <wayland76> s1n: All I know is they had a similar discussion on the xorg list a few months ago, and couldn't agree on what was noise, and what was signal

[04:13] *** bacek joined
[04:14] *** bacek left
[04:14] *** bacek_ joined
[04:14] <bacek_> hi there

[04:15] <s1n> wayland76: not trying to say it's noise or not, just saying it's easier to read in a feed than in a million email updates

[04:15] <wayland76> hi where?  Oh, here!  Hi :)

[04:16] <s1n> plus the diff in the email is hard to use when very minor changes occur

[04:16] <wayland76> s1n: Well, there's been talk about moving the spec stuff to a different repo, and maybe into git :)

[04:20] *** meppuru joined
[04:23] *** Minazo joined
[04:31] <meppuru> good night

[04:32] *** meppuru left
[04:36] <wayland76> Does anyone know who wrote the parrot .spec file?

[04:40] *** nihiliad joined
[04:40] *** nihiliad left
[04:40] *** nihiliad joined
[04:42] <wayland76> Don't worry about the spec file question.  But does anyone know how the install target is going?

[04:42] <wayland76> (ie. "make install" for Rakudo?)

[04:51] *** bacek_ left
[05:00] <skids> Jeez I start to finally get into comprehending the Parrot core and then suddenly from out of nowhere I have a social life for a change.  Awesome, but bad timing.

[05:07] <wayland76> Well, I know the cure for that.  Explain the Parrot core to those in your social life :)

[05:23] *** nihiliad left
[05:26] <pugs_svn> r25722 | wayland++ | Assuming .^methods returns an array of Method objects, I'mve documented things 

[05:26] <pugs_svn> r25722 | wayland++ | appropriately.  Now we just have to decide what the attribute descriptors are.  

[05:30] *** fridim_ left
[05:35] *** alester left
[05:45] *** sri_kraih_ joined
[06:00] *** |jedai| joined
[06:02] *** sri_kraih left
[06:08] *** Minazo left
[06:18] *** hercynium left
[06:22] *** masak joined
[06:35] <wayland76> masak: hi :)

[06:36] <masak> wayland76: good morning to you, sir.

[06:39] *** depesz left
[06:49] *** Kimtaro left
[07:02] *** rindolf joined
[07:08] <wayland76> Anyone here vaguely familiar with Configure.pl?

[07:09] <wayland76> I'm trying to put it in better shape so it works with a pre-installed parrot

[07:09] <wayland76> rather than having to build its own

[07:11] *** AzureStone joined
[07:13] <masak> TimToady: for what it's worth, I think 'self' in a sub should be caught at compile time when possible and disallowed, even if (as you wrote) there's no practical barrier to calling the first argument 'self' even in a sub. every time I've written 'self' in a sub so far (and it has happened three or four times), it was because I demoted a method to a sub and overlooked the 'self'.

[07:22] *** Kimtaro joined
[07:36] <masak> http://use.perl.org/~masak/journal/38601

[07:50] *** mj41 joined
[08:01] *** frodwith left
[08:09] *** ejs joined
[08:12] <masak> http://use.perl.org/~masak/journal/38602

[08:16] *** duke_leto joined
[08:17] <masak> a blog post about not having the time to blog. how postmodern.

[08:17] * masak rolls eyes

[08:17] <wayland76> Enabled by Perl 6.  The first... you know what I mean :)

[08:17] <masak> indeed.

[08:20] <moritz_> "Traversing the AST of a Perl 6 program from inside Perl 6 is, like, awesome."

[08:20] <moritz_> how do you do that?

[08:20] <masak> I call STD.

[08:20] <masak> and parse the result.

[08:20] <moritz_> ah

[08:21] <masak> I wish I had something to show, but I don't, yet.

[08:21] <masak> that item was the only one which was a bit premature.

[08:21] <masak> the other ones have already happened.

[08:21] <moritz_> ;-)

[08:22] <masak> I was hoping no-one would call me out on it. :P

[08:22] *** zamolxes joined
[08:22] * moritz_ is not going to $work today, has a bit of a flu

[08:22] <moritz_> maybe I'll get around to blogging

[08:22] <masak> or writing Perl 6 code.

[08:22] *** riffraff joined
[08:23] <moritz_> are there any builtins yet to be written in Perl 6?

[08:25] <moritz_> (I mean new ones, not those that could be ported from PIR)

[08:25] <wayland76> rakudo: Any.^methods.say

[08:26] <p6eval> rakudo e47c34: OUTPUT«Method 'methods' not found for invocant of class 'P6metaclass'␤current instr.: 'parrot;Perl6Object;!.^' pc 1600 (src/classes/Object.pir:685)␤»

[08:26] <wayland76> Ah well :)

[08:27] <masak> rakudo: class A { method !bar() { say "OH HAI" }; method foo() { self.bar } }; A.foo

[08:27] <moritz_> well, introspection is a bit beyond my scope

[08:27] <p6eval> rakudo e47c34: OUTPUT«Could not locate a method 'bar' to invoke on class 'A'.␤current instr.: 'die' pc 16351 (src/builtins/control.pir:204)␤»

[08:29] <masak> rakudo: my %h; say %h<nosuch>.defined; say %*ENV<nosuch>.defined

[08:29] *** DemoFreak joined
[08:29] <p6eval> rakudo e47c34: OUTPUT«0␤1␤»

[08:29] <masak> another strange thing about %*ENV.

[08:29] <moritz_> it's a known bug that accessing a hash element autovivifies it

[08:30] <moritz_> and a quite emberassing one, if you ask me

[08:30] <literal> I thought that was a feature

[08:30] <masak> moritz_: but look at the output.

[08:30] <masak> moritz_: it's different for %h and %*ENV

[08:31] <masak> literal: it was in Perl 5, I guess.

[08:31] <moritz_> not even there.

[08:31] <masak> literal: but even there, there's an apology about it in perldoc.

[08:31] <masak> moritz_: well, it isn't a bug in Perl 5.

[08:31] <moritz_> in Perl 5 when you access $a{foo}{bar} autovivifies $a{foo}

[08:32] <moritz_> but never the last indexed key

[08:32] <masak> oh, right.

[08:32] <literal> I can see how "say %hash<a><b><c>;" creating 'a' and 'b' would be bad, but creating them when doing "%hash<a><b><c> = 1" would be convenient

[08:32] <masak> oh, of course.

[08:32] <moritz_> literal: that's how it specced in Perl 6

[08:32] <masak> that's another matter entirely.

[08:32] <literal> ok

[08:32] <masak> it's the difference between reading and writing.

[08:33] <literal> but if you do "if exists %hash<a><b><c>", when 'a' and 'b' don't exist, will it return false or throw an exception?

[08:35] <moritz_> I guess it'll be false

[08:35] <literal> that would also be convenient

[08:41] <Matt-W> false, surely

[08:42] <Matt-W> because <a><b><c> obviously doesn't exist if <a> doesn't

[08:42] <masak> new slogan: "When Perl 6 becomes endemic, everyone will have STD!"

[08:42] <Matt-W> masak: might want to keep that one under wraps

[08:42] <masak> Matt-W: perhaps you're right. :)

[08:43] <wayland76> Problems parsing Perl 6?  STD will give you AIDS :)

[08:43] <masak> ouch. :P

[08:43] <masak> std: say 42

[08:43] <p6eval> std 25722: OUTPUT«ok 00:02 34m␤»

[08:44] <masak> if I get non-ok results from STD locally on that one, what should I do?

[08:44] <masak> I've done an svn up and a make, but I still get errors.

[08:44] <Matt-W> wonder if your build is more recent than the one std is using

[08:44] * moritz_ tries at home

[08:45] <masak> I have a feeling it's just a dirty cache or something.

[08:45] <masak> but I don't know what to do about it.

[08:45] <moritz_> 'make clean'

[08:45] <Matt-W> rm -rf, then svn co :)

[08:46] * masak makes clean

[08:47] <masak> nope, still error.

[08:47] <masak> Can't locate object method "term__S_390identifier" via package "STD" at /Users/masak/work/hobbies/pugs/src/perl6/STD.pm line 1369.

[08:47] * masak ponders the rm -rf alternative

[08:50] <moritz_> it's all fine here

[08:50] <masak> vewy, vewy stwange.

[08:50] * masak checks out Pugs anew

[08:51] <wayland76> My theory is the problem is you're on an S/390 :)

[08:53] <masak> yes, why didn't I think of that?

[08:53] <wayland76> (sorry, couldn't resist :) )

[08:53] <masak> :)

[08:56] <masak> clean checkout, same problem.

[08:56] <masak> is it possible that a bug in the automatic translation of STD.pm to Perl 5 manifests only on my computer?

[08:57] <Matt-W> yes

[08:57] <masak> oh, good.

[08:58] <masak> and a serviceman from the STD corporation is on the way to my house as we speak, right?

[08:59] <Matt-W> umm

[08:59] <Matt-W> if they are, it's nothing to do with me

[09:01] <masak> Matt-W: by the way: http://irclog.perlgeek.de/perl6/2009-03-05#i_959401

[09:03] <moritz_> (line-linkable irc logs)++

[09:04] <masak> moritz_++

[09:04] <Matt-W> hmmmm

[09:04] <moritz_> I stole that idea from the previous logger

[09:04] <masak> nevertheless. good theft.

[09:05] <Matt-W> gargh

[09:05] <Matt-W> so how do you spell it?

[09:05] <masak> Damian.

[09:05] <Matt-W> oh right

[09:05] <Matt-W> yes I fixed the readme

[09:06] <masak> but not the summary.

[09:06] <Matt-W> yeah

[09:06] <Matt-W> fixed by removing the reference, I'm not directly porting his method

[09:06] <masak> goodie.

[09:06] <masak> now, about those tests...

[09:06] <masak> I got the impression that you said that some tests were failing.

[09:07] <Matt-W> oh it parses fine

[09:07] <Matt-W> but the action methods don't trigger

[09:07] <masak> Matt-W: so your tests don't fail enough, is that what you're saying? :)

[09:07] <Matt-W> yes

[09:07] <masak> make them fail, then.

[09:08] <masak> shouldn't be that hard.

[09:08] <Matt-W> I will

[09:08] <masak> good. when you do, I'll look at them again.

[09:08] <Matt-W> I should test $field ~~ Form::Field

[09:08] <Matt-W> or whatever it needs to be

[09:08] <Matt-W> I'm very, very confused with match objects and result objects and action methods and make

[09:08] *** OuLouFu left
[09:09] <masak> it'll pass.

[09:14] *** mberends joined
[09:14] <mberends> happy morning to all

[09:15] <Matt-W> happy morning to you

[09:16] <moritz_> moinon, god of the greeting, be with you!

[09:17] <masak> mberends: felicitations on the fine morning, sir.

[09:20] <mberends> the old laptop is successfully repaired, but I balked at GBP 140 for a 60GB OCZ SSD. The Asus Eee PC has persuaded me of the merits of flash memory, so it will use LiveUSB henceforth. There are some nice case hacks documented to mount a hub and multiple pendrives inside the laptop.

[09:20] <literal> LiveUSB?

[09:21] <mberends> similar to LiveCD as in Knoppix, but in a USB flash drive

[09:25] <wayland76> I remember reading something where Linus (Torvalds) said that he only trusted one kind of flash memory, and he had some argument that made sense

[09:25] <wayland76> But I've forgotten it

[09:25] <wayland76> His argument, though, was that for standard-type disk usage, it would fail after a while

[09:25] <wayland76> Unless it was the special kind

[09:26] <mberends> all disks fail, it's just a matter of how soon.

[09:27] <mberends> all storage should be backed up, or replicated

[09:27] <wayland76> Agreed

[09:27] <wayland76> RAID USB hub?

[09:28] <mberends> if the laptop chipset allows (near) concurrent I/O, then yes

[09:40] <wayland76> Looks like I might be wrong -- http://torvalds-family.blogspot.com/2008/10/so-i-got-one-of-new-intel-ssds.html

[09:49] <mberends> Nice review, Intel probably does cacheing in CMOS to speed the writes. SSD is at the start of the learning curve, there will be huge improvements in hardware and filesystems during the next few years. I plan to change all my hard drives to flash memory as they come up for replacement.

[09:49] <moritz_> http://www.perlfoundation.org/perl6/index.cgi?rakudo_feature_status "handles handle only String and List of String, Tepy and Regex not work yet" - what does this mean? FTW is Tepy?

[09:50] <masak> :)

[09:50] <Matt-W> Tepy??

[09:51] <masak> and so, the FUD campaign begins.

[09:51] <masak> soon, people will say, "what!? Perl 6 doesn't have a Tepy built in?"

[09:51] <masak> people will blog about shunning Perl 6 when they discovered the lack of Tepy.

[09:52] <masak> Guido van Rossum will come out saying that Python has had a Tepy since 2.3.

[09:53] <Matt-W> rofl

[09:53] <masak> TimToady will conjecturally add a Tepy to one of the synopses, but it'll be too late.

[09:53] <Matt-W> all the while dodging the question of what a Tepy actually is

[09:53] <masak> the damage is already done.

[09:53] <mberends> it's a topy^H^H^Hypo

[09:53] <masak> I think it should have been "Typo" in the article.

[09:54] <mberends> :)

[09:54] <masak> moritz_: btw, you misspelled "WTF" above. "FTW" is almost the opposite.

[09:55] <moritz_> right

[09:55] <masak> Tepy FTW!

[09:55] <masak> maybe I will name my next Perl 6 project Tepy.pm.

[09:55] <moritz_> it was Ilya how introduced that

[09:56] <masak> his English is under construction.

[09:56] <moritz_> :)

[10:06] *** rkendall joined
[10:06] <wayland76> FTW has two meanings that are diametrically opposite.  ]

[10:07] <literal> wayland76: huh? how so?

[10:08] <literal> "what the fuck" and "fuck the world" or something?

[10:08] <literal> "for the win" and "fuck the world" or something?

[10:08] <literal> even

[10:09] <moritz_> http://rakudo.org/status

[10:09] <moritz_> seems the chart is a bit too broad for the page

[10:10] <mberends> Re: http://www.perlfoundation.org/perl6/index.cgi?rakudo_feature_status , the sequence of headings 1. "Common things that are known to have problems or not work in Rakudo" 2."Things that do (mostly?) work in Rakudo" should be reversed, then the cup would be half full instead of half empty.

[10:10] <rkendall> moritz_ that depends on your screen size (it's a flexible layout)

[10:11] <moritz_> rkendall: ah, good. then it'll display fine for most people, I hope ;-)

[10:11] <moritz_> mberends: I'm moving that over to rakudo.org anyway, I can change the order

[10:11] <masak> looks ok here.

[10:11] <rkendall> although I do think the site could loose one of the sidebars, that would make it work better on smaller screens

[10:12] <moritz_> I thought about it also, but I didn't have the motivation to change it yet

[10:12] <masak> though the search box covers the graph a bit.

[10:12] <literal> yeah, the stuff in the right sidebar could be moved to the left one

[10:12] <moritz_> rkendall: aye. The right bar is mostly useless, its content could be stuffed into the left one

[10:12] <rkendall> or the other way

[10:12] * moritz_ likes navigation left

[10:12] <masak> move it to the left.

[10:14] <mberends> the rightmost part of a page is truncated on small displays, so put the important stuff on the left

[10:15] <moritz_> anyway, regexes++ # let me convert from one wiki markup to another quite fast

[10:17] <masak> though recent experiences have taught me that they are not always enough. I cannot say this with total certainty, of course, since it might be my fault. but I believe that regexes can only get you so far.

[10:17] *** M_o_C joined
[10:18] <wayland76> literal: http://en.wiktionary.org/wiki/FTW

[10:18] <wayland76> (oh, you got them in a later comment)

[10:18] <wayland76> (I was referring to "For the Win" and "The world")

[10:18] <moritz_> masak: they worked in my case, that was enough to safe me 15 minutes for boring and error-prone hand edits

[10:19] <Matt-W> masak: you're correct, they can only do so much by themselves

[10:19] <masak> moritz_: well, for one-off things, sure, they work.

[10:19] *** DemoFreak left
[10:21] <moritz_> masak: for parsing Perl 6, they also work ;-)

[10:21] <moritz_> at least some regexes do ,-)

[10:21] <masak> heh.

[10:22] <masak> I think the futility of doing it with regexes is a bit more apparent in the Perl 6 case.

[10:23] <moritz_> I don't think STD.pm is futile ;-)

[10:25] *** duke_leto left
[10:26] * mberends wonders whether the PCRE library will eventually be superceded by P6RE

[10:26] <masak> moritz_: I didn't say STD.pm was futile. you know what I mean. :)

[10:26] <masak> by the way, STD.pm works for me if I call it standing in src/perl6/.

[10:27] <masak> it doesn't work for me when I call it from elsewhere.

[10:27] <masak> I believe that is a recently introduced bug.

[10:28] <moritz_> I never tried it from anywhere else

[10:29] <masak> well, I could cd into the directory, but it's nice if it works from elsewhere.

[10:29] * masak worksaround for now

[10:29] <masak> you need to set PERLLIB to the src/perl6 dir, and that used to work. doesn't anymore.

[10:29] <masak> that's the problem I was experiencing earlier.

[10:33] <mberends> *PERL6LIB

[10:34] <masak> mberends: no, PERLLIB.

[10:34] <masak> STD is Perl 5.

[10:34] <masak> that is, the translated version is.

[10:34] * mberends retreats

[10:35] <masak> by the way, is there a convenient opposite of slurp($file) in Perl 6?

[10:36] <Matt-W> opposite?

[10:36] <Matt-W> vomit($file)?

[10:36] <masak> something like barf($file, $contents)

[10:36] <moritz_> lol

[10:36] <Matt-W> print?

[10:36] <masak> Perl 6 -- the disgusting language.

[10:36] <mberends> i wrote one called squirt()

[10:36] <masak> mberends: reminds me of the Zune.

[10:36] <Matt-W> what would it do that print can't?

[10:36] <masak> Matt-W: open/close the file.

[10:37] <Matt-W> ah

[10:37] <Matt-W> write one!

[10:37] <mberends> i did

[10:37] <Matt-W> then sneak it into the spec

[10:37] <Matt-W> and try to convince larry he wrote it

[10:37] <Matt-W> and that it's a great idea

[10:37] <masak> Tepy.barf

[10:37] <mberends> Python surely has it

[10:41] <mberends> see lines 65-70 in http://github.com/eric256/perl6-examples/blob/c4eb7dcc8012f996bcd642b809c0a4a72e1ee3a4/lib/Configure.pm

[10:42] <masak> mberends: overwrites old files. bug or feature? :)

[10:42] <mberends> "feature"

[10:43] <masak> very well.

[10:43] <Matt-W> failure case

[10:43] <masak> rakudo: say slurp("nonexistent")

[10:43] <p6eval> rakudo e47c34: OUTPUT«Unable to open filehandle␤current instr.: 'open' pc -90764 ((unknown file):-1)␤»

[10:45] *** PacoLinux joined
[11:14] *** masak left
[11:20] *** ejs left
[11:21] *** ejs joined
[11:44] *** ejs1 joined
[11:46] *** parduncia joined
[11:51] *** ejs left
[12:05] *** pmurias joined
[12:30] <rkendall> Hi, had a logo idea which I just posted to perl6-users

[12:32] <moritz_> nice idea

[12:33] <rkendall> (to add speach bubble to Parrot logo as a way to combine it with other logos - such as Rakudo's)

[12:36] <moritz_> I did read the mail before I commented here ;-)

[12:37] <rkendall> was just in case someone else was listening too.

[12:38] *** |jedai| left
[12:41] *** pmurias left
[12:43] *** ruoso joined
[12:48] <ruoso> Hello!

[12:49] <rindolf> Hi ruoso 

[12:51] <moritz_> rkendall: do you know how to change a redirection link in drupal with command line tools?

[12:51] <rkendall> do you mean the URL alias?

[12:51] <moritz_> yes

[12:51] <moritz_> dunno

[12:51] <moritz_> we have 'lastest_release' link for parrot

[12:52] <moritz_> I think it's a redirect, not an URL alias

[12:52] <rkendall> where is the link, just in a page on the site?

[12:53] <moritz_> yes

[12:53] <moritz_> on http://www.parrot.org/download

[12:53] <moritz_> the "urrent development Release"

[12:53] <moritz_> we'd like to automate that it actually follows the latest release

[12:54] <moritz_> if it can't be made easily, we'll just make a symoblic link latest/ on the ftp server

[12:54] <rkendall> don't think that would be managed by drupal, rather by apache

[12:54] <rkendall> or like that

[12:56] <rkendall> would also be handy to have a 'latest' ftp URL

[13:09] *** pmurias joined
[13:09] <pmurias> ruoso: hi

[13:29] *** bacek joined
[13:32] *** DemoFreak joined
[13:40] <ruoso> hi pmurias 

[13:42] <ruoso> pmurias, have you seen that we need to rewrite SMOP?

[13:47] *** mberends left
[13:55] <pmurias> ruoso: we extract the invocant using a macro in most places so it shouldn't be that big a problem

[13:56] <pmurias> got to catch a train&

[13:56] *** pmurias left
[13:56] *** skids left
[14:04] *** rkendall left
[14:24] *** |jedai| joined
[14:27] *** jaldhar left
[14:31] *** renormalist left
[14:36] *** jaldhar joined
[14:41] *** ejs1 left
[14:42] <pugs_svn> r25723 | putter++ | [elf_h] EmitSimpleP5.pm: lt,gt added to fastpath operator handling (for elfparse).  Some cleanup of same.  PrimitivesP5.pm: Added infix:<+&>.

[14:46] *** frodwith joined
[14:48] <pugs_svn> r25724 | putter++ | [elfparse] EXPR now appears[1] to be running.  comp_unit accepts '3'.  [1]:devEXPR.pm is currently separately compiled so STD lexicals aren't linked up.

[14:52] *** bigpresh left
[14:54] *** |jedai| left
[14:54] *** skids joined
[15:02] *** AndyAway is now known as alester

[15:04] *** Tene_ joined
[15:05] *** bigpresh joined
[15:06] *** |jedai| joined
[15:14] *** parduncia_ joined
[15:14] *** fridim_ joined
[15:15] *** fridim__ joined
[15:15] *** parduncia_ left
[15:15] *** Tene left
[15:17] *** Kimtaro left
[15:19] *** meppl joined
[15:30] *** pjcj left
[15:31] *** parduncia left
[15:34] *** nihiliad joined
[15:35] *** fridim_ left
[15:35] *** fridim__ left
[15:41] *** rodi joined
[15:48] *** pjcj joined
[15:55] *** zostay joined
[16:01] <pugs_svn> r25725 | lwall++ | [Cursor] add :actions option to parse and parsefile

[16:01] <pugs_svn> r25725 | lwall++ | [viv] use new :actions option

[16:02] <TimToady> moritz_: you've got a formato on the $<?>, which eats the "tag"

[16:03] <TimToady> @tell masak you've got what appears to be a typo, or perhaps you really meant Just Ducking Foo It

[16:03] <lambdabot> Consider it noted.

[16:04] *** Kimtaro joined
[16:04] <moritz_> TimToady: ah, I should fix that

[16:05] * moritz_ is so used to perlmonks.org markup...

[16:05] *** nihiliad left
[16:07] *** nihiliad joined
[16:08] *** nihiliad left
[16:09] *** nihiliad joined
[16:11] *** justatheory joined
[16:11] <rodi> should the methods in rakudo/src/setting/Str.pm be largely synyonymous with the ones in S32/Str.pod?

[16:12] <alester> Man, there was this Italian place in the city that made the best formato.

[16:13] <moritz_> rodi: yes

[16:13] <moritz_> rodi: although Str.pod uses more advanced Perl 6 than it's available for Rakudo yet

[16:15] <rodi> moritz_: yeah, just trying to find a reasonable place to start a little hacking.

[16:15] <rodi> I think I have a pretty good feel for the limits of which parts of P6 I can use in Rakudo.

[16:16] <moritz_> that's good

[16:16] <moritz_> many of the builtins are still written in PIR

[16:17] <moritz_> so if something isn't in src/setting/ it doesn't mean it's not implemented

[16:18] <rodi> right- in src/classes/Str.pir, for example?

[16:19] <moritz_> for example

[16:19] <moritz_> there's also src/builtins/any-str.pir

[16:20] * diakopter looks at :actions

[16:22] <rodi> moritz_: if you can forgive my ignorance of how things fit together, do these PIR classes eventually merge with the P6 classes in some meaningful way- e.g. is this largely because of bootstrapping, or is it the architectural intent?

[16:23] <moritz_> rodi: in the end most or all builtins will be written in Perl 6...

[16:24] <moritz_> rodi: though to achieve higher efficiency, maybe with embedded PIR

[16:24] <rodi> makes sense.

[16:24] <[particle]1> or where it's not possible to write in p6

[16:25] <[particle]1> like infix:<+>

[16:25] <rodi> also makes sense.

[16:25] <moritz_> [particle]1: you can, with embedded PIR

[16:25] <rodi> Now that rakudo supports embedded PIR,

[16:25] <[particle]1> right, sorry, i meant pure perl 6 of course

[16:25] <rodi> is there any notion that these should start merging soon?

[16:25] <[particle]1> yes

[16:26] <[particle]1> you're welcome to try :)

[16:26] <rodi> heh

[16:26] * rodi forks

[16:26] <rodi> what the hell.

[16:26] <[particle]1> i've written some Str builtins in p6, but they're not handy atm for commit

[16:26] <[particle]1> oh, right. Str.perl

[16:27] <[particle]1> wait, maybe it was Int.perl. 

[16:27] <[particle]1> yeah, that's what it was.

[16:27] <[particle]1> wanna write Str.printf soon

[16:34] *** hercynium joined
[16:35] *** Ariens_Hyperion joined
[16:36] *** Ariens_Hyperion left
[16:36] <diakopter> I don't understand what assigning to $::ACTIONS does

[16:37] <diakopter> oh, a package global?

[16:37] <alester> moritz++ !!! http://rakudo.org/status

[16:38] <diakopter> I'd be curious to see another metric on that graph

[16:39] <diakopter> the green/red/blue/yellow measures adjusted for increases in the gray measure

[16:41] <diakopter> (since that would show when and how many items move from fail/todo/regr to pass

[16:41] <diakopter> )

[16:41] *** frioux_ joined
[16:42] <dalek> rakudo: f6cdf9b | pmichaud++ | docs/spectest-progress.csv:

[16:42] <dalek> rakudo: spectest-progress.csv update: 317 files, 7121 passing, 0 failing

[16:42] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f6cdf9bd3af2e27b574a0f1727cfc15fe14e1a08

[16:42] *** ruoso left
[16:43] <diakopter> (assuming that no tests are ever removed from spec)

[16:43] *** M_o_C left
[16:43] *** wayland76 left
[16:45] *** tcliou|Away joined
[16:45] *** LCamel joined
[16:46] *** moritz_ joined
[16:46] *** M_o_C joined
[16:46] *** wayland76 joined
[16:46] *** szabgab joined
[16:46] *** lambdabot joined
[16:46] *** buubot joined
[16:46] *** simcop2387 joined
[16:46] *** ewilhelm joined
[16:46] *** pugs_svn joined
[16:46] *** literal joined
[16:46] *** irc.freenode.net sets mode: +o moritz_

[16:46] <TimToady> diakopter: it should be thought of as a context variable, but Perl 5 can only emulate context vars with local currently

[16:47] <diakopter> if I didn't know any better, I'd suspect STD/Cursor is about to get action callbacks :P

[16:50] *** riffraff left
[16:52] <moritz_> alester: do you think we should link to it from the front page?

[16:52] <alester> you mean up in the menu?

[16:53] <moritz_> yes

[16:53] <alester> done

[16:56] *** zamolxes left
[17:15] <TimToady> diakopter: it already had callbacks, which is how viv works.  this is just an interface change

[17:21] *** bsdx joined
[17:25] <diakopter> ok. I guess I was hinting that lwall++ might be committing actions for an interpreter soon. ;)

[17:30] <TimToady> I'm not actually much interested in doing that.  If I did anything with it near term, it would be to translate gimme5 to viv.

[17:30] <TimToady> there are plenty of other interpreters in the works, and I don't care to compete, if only because would be perceived as the automatic winner :)

[17:31] <diakopter> lol

[17:31] <TimToady> bad enough that I'm claiming the standard parser

[17:32] <TimToady> and might have to claim standard Setting if the various current efforts don't converge

[17:32] <diakopter> well, the Setting becomes the bootstrapped compiler eventually anyway

[17:33] <TimToady> just trying to get other people to do my work :)

[17:33] *** schmalbe joined
[17:51] <pugs_svn> r25726 | putter++ | [elfparse] Move EXPR into std.pm.

[17:56] *** M_o_C left
[18:05] *** bsdx left
[18:08] <pugs_svn> r25727 | pmichaud++ | Fix a couple of typos, redirect "mailing lists" link to perl6-specific lists.

[18:09] *** jan_ joined
[18:10] <pugs_svn> r25728 | pmichaud++ | Add a link to the Rakudo wiki (on github).

[18:12] <pmichaud> good afternoon, folks.

[18:12] <PerlJam> buenos tardes pmichaud 

[18:12] <diakopter> howdy

[18:13] <pmichaud> yes, it seems I'm often tardy.

[18:13] <pmichaud> Good work to everyone who's been updating rakudo.org, perl6-projects.org, etc.  Exciting stuff.

[18:15] <moritz_> thanks ;-)

[18:15] <pmichaud> anyone know how to create a "permanent top-posted page" on rakudo.org?

[18:16] <pmichaud> i.e., some content that always remains at the top regardless of later posts or edits?

[18:20] *** FurnaceBoy joined
[18:28] *** ejs joined
[18:34] <diakopter> pmichaud: check "Promoted to front page" and "Static on front page"

[18:36] <pmichaud> diakopter: thanks!

[18:40] *** Psyche^ joined
[18:51] <pmichaud> I'm guessing I don't have those privileges.

[18:51] <pmichaud> or I don't know where to look.

[18:52] <pmichaud> I'll go ahead and create the page first, though.

[18:52] *** Patterner left
[18:52] *** Psyche^ is now known as Patterner

[18:53] *** ruoso joined
[18:55] *** mncharity joined
[18:56] *** japhb joined
[18:56] *** spx2 joined
[18:57] <mncharity> ooooo, spiffy http://perl6-projects.org/ and /topic.

[18:58] *** mncharity changes topic to: http://perl6-projects.org/ | nopaste: http://sial.org/pbot/perl6 | evalbot: 'perl6: say 3;' | irclog: http://irc.pugscode.org/ | ~290 days 'til Xmas

[18:58] <[particle]1> pmichaud: how about a git.rakudo.org with a redirect?

[19:00] <literal> how is augment different from monkey patching? is the augmented version only visible in its surrounding lexical scope?

[19:12] <pugs_svn> r25729 | putter++ | [elfparse] Discarded Match variants.  rx { } code blocks emitted inline.

[19:12] <pmichaud> [particle]: sounds great to me -- andy controls the domain, though.

[19:12] <alester> particle: Add it to the todo list

[19:13] <alester> and what you'd want it to redirect to

[19:13] <pmichaud> probably http://github.com/rakudo/rakudo, I would think.

[19:13] *** FurnaceBoy left
[19:14] <alester> just add a note, and I'll get to it.

[19:14] <pmichaud> I think we can remove "current test results" from the todo list now.  moritz++

[19:14] <alester> Then do that, and put it at the bottom of the page in the "stuff we did" list.

[19:15] <pmichaud> done.

[19:16] <pmichaud> oh, also "state of rakudo" is done.

[19:19] <TimToady> literal: no, augment changes the existing class.  you can use 'my class is Other' to get the other behavior, after all

[19:21] <literal> so the "use MONKEY_PATCHING;" is gone or is it different somehow?

[19:23] <[particle]1> lazyweb++ beat me to it :)

[19:24] <TimToady> you still need to "use MONKEY_PATCHING" to enable the use of augment or supersede

[19:24] <TimToady> we try to make it difficult

[19:27] <TimToady> we believe in aping, not monkeying

[19:29] <ruoso> I had just now realized that "Foo::Bar::Baz" makes it really difficult to lexically redefine that name 

[19:30] <TimToady> why do you think that?

[19:30] <ruoso> because that means

[19:30] <TimToady> the current lexical scope may also have a Foo::Bar:Baz

[19:30] <TimToady> and it will be found in preference to the global one

[19:30] <ruoso> take package Foo, look for the package Bar inside it, then look for the package Baz inside the later

[19:31] <TimToady> current STD algorithm: find Foo looking outward in lexical scopes, the upward in package scopes.

[19:31] <TimToady> only after you have found Foo do you think about the Bar::Baz part

[19:32] <TimToady> though I suppose I could be argued into the other position

[19:32] <ruoso> yes

[19:32] <ruoso> does that mean "use" needs to create a new full package hierarchy in the lexical scope?

[19:33] <TimToady> but "find me the closest Foo that happens to contain Bar::Baz seems rather perilous

[19:33] <ruoso> hmm

[19:33] <TimToady> not if Foo is just an alias

[19:33] <ruoso> but then you'll get a lot of packages you didn't ask for

[19:33] <TimToady> and nearly all short names will be aliases to long names in any case

[19:34] <TimToady> eh, but they're all in Foo

[19:34] <ruoso> but you didn't ask for Foo

[19:34] <ruoso> you asked for Foo::Bar::Baz

[19:35] <TimToady> but Bar and Baz don't pollute my namespace

[19:35] <TimToady> only the Foo namespacew

[19:35] <ruoso> and you'll get Foo::Boing::Boing without any notice, as long as someone already loaded that module

[19:35] <TimToady> so?

[19:35] <ruoso> I thought that was one of the things we were trying to fix 

[19:35] <TimToady> what's to fix?

[19:35] *** icwiener joined
[19:36] <ruoso> so I can use a different version of Foo::Boing::Boing

[19:36] <ruoso> lexically speaking

[19:36] <ruoso> then I don't need to monkey patch anything

[19:38] <TimToady> then ask for a different version of Foo::Boing::Bong, and it should install it in your own Foo.  perhaps what we need is a way to pull things in on demand from higher variants of Foo

[19:38] <TimToady> if not found in my Foo

[19:39] <ruoso> hmm... 

[19:40] <ruoso> but if Foo is aliased to GLOBAL::Foo

[19:40] <[particle]1> how do i augment a :auth<cpan> flavor of Foo inside class Foo :auth<mine> ?

[19:40] <ruoso> it will install there

[19:40] <ruoso> [particle]1, same problem I'm trying to deal here

[19:41] <[particle]1> yeah, i'm trying to put it in perl 6 syntax, to expose the problem

[19:41] <TimToady> my class or our class will create a local Foo

[19:41] <[particle]1> what is the default :auth?

[19:41] <TimToady> oh, something like http://www.perl.org

[19:41] <ruoso> the problem is not on the declaration side

[19:42] <ruoso> but on the "use" side

[19:42] <ruoso> so I can "use Foo::Boing::Boing :auth<mine>" in a lexical scope

[19:42] <ruoso> the problem is

[19:42] <ruoso> if Foo is an alias to GLOBAL::Foo

[19:43] <ruoso> it will install that in the global namespace

[19:43] <ruoso> which is not the intended here

[19:43] <TimToady> then don't do the use in the GLOBAL package  :P

[19:43] <ruoso> it's nto the use that is there

[19:44] <ruoso> it's the class declaration

[19:44] <ruoso> class Foo { } in a package

[19:44] <ruoso> will cause it to be in GLOBAL::Foo

[19:44] <ruoso> class Foo::Bar::Baz { } in a file

[19:44] <ruoso> s/package/file/

[19:44] <TimToady> only if it's the first declaration in a file

[19:44] <ruoso> which is the case I'm trying to address

[19:44] <TimToady> 'kay

[19:45] <ruoso> so if I "use Foo::Bar::Baz"

[19:45] <ruoso> it will alias Foo

[19:45] <ruoso> to the Foo on that file

[19:45] <ruoso> which happens to be GLOBAL::Foo

[19:45] <ruoso> if I later "use Foo::Boing::Boing :auth<mine>"

[19:45] <ruoso> and that file has a "my class"

[19:46] <ruoso> (which means it don't register itself in GLOBAL::)

[19:46] <ruoso> it will insert into my locally aliased Foo

[19:46] <ruoso> which happens to be GLOBAL::Fo

[19:46] <ruoso> so Foo::Boing::Boing will end up appearing in GLOBAL

[19:47] <ruoso> one solution I can thikn

[19:48] <ruoso> is that "use" always create a new local hierarchy, instead of binding the first package in the name

[19:48] <ruoso> so...

[19:48] <ruoso> "use Foo::Bar::Baz"

[19:48] <ruoso> will create a local Foo, with a local Bar, that has an alias in Baz that points to the actual package there

[19:49] <ruoso> so Foo::Bar::Baz would be the same as GLOBAL::Foo::Bar::Baz, as expected

[19:49] <ruoso> but then Foo::Boing::Boing won't appear in GLOBAL

[19:50] <ruoso> of course that only works if you never "use Foo;"

[19:50] <ruoso> which means it's a bad solution

[19:50] <TimToady> treat package name as single string in lex scope maybe

[19:50] <ruoso> unless..

[19:51] <ruoso> unless we use pmuria's idea

[19:51] <ruoso> and always clone the package when importing

[19:51] <TimToady> MY::<Foo::Bar::Baz> ::= alias

[19:52] <TimToady> well, I need to go to work--will backlog

[19:52] <diakopter> work-- indeed

[19:52] <ruoso> that basically means... namespace is not hierarchical...

[19:52] <ruoso> it's a plain list ?

[19:52] <ruoso> s/list/hash/

[19:54] <TimToady> would also have to search hierarchically, I suspect

[19:54] <TimToady> this may be wrong any way we decide :)

[19:54] <TimToady> bbl &

[19:56] <ruoso> in which case would the hiearchical search be needed?

[19:57] <ruoso> hmmm

[19:59] *** fridim_ joined
[19:59] <diakopter> i'm finding it difficult to follow the scenario w/o test cases

[20:01] *** Maghnus joined
[20:03] <pmichaud> fwiw, the lexical scoping of namespaces has always been a bit opaque to me... but I figured it was just that I hadn't studied it enough.

[20:03] <pmichaud> looks like you've traversed the same "Huh?" questions that I was having :-|

[20:06] <ruoso> pmichaud, I guess we're going to end with a plain namespace after all

[20:06] <ruoso> the major implication to that seems to be

[20:06] <ruoso> module Foo { module Bar { class Baz  { } } }

[20:07] <pmichaud> where "plain namespace" means "non-hierarchical"?  Or did you mean something else?

[20:07] <ruoso> plain as non-hierarchical, yes

[20:08] <pmichaud> I think I'll hold judgement and hope another answer is found.  A ton of stuff in PCT, PGE, and Parrot has been predicated on hierarchical namespaces.

[20:09] <pmichaud> Sadly, I started out by doing non-hierarchical as an early simplification, then had to go through various evolutions to become hierarchical.

[20:10] <ruoso> but I don't really see other good solution 

[20:10] <ruoso> otherwise we loose the lexical meaning of "use"

[20:10] <ruoso> that...

[20:10] <ruoso> or we drop support for globals at all

[20:11] <pmichaud> agreed, the two had never melded well in my head.

[20:11] <ruoso> and every "use" implies in a new clone of the package

[20:11] <pmichaud> that's going to be ugly for pre-compiled stuff.

[20:11] <pmichaud> at least in Parrot.

[20:11] <ruoso> yeah... we would need a lot of cow

[20:14] <ruoso> I think I'm starting to like the idea of dropping support for globals

[20:14] <ruoso> of course GLOBAL:: would still be there

[20:15] *** lambdabot left
[20:15] <ruoso> and you would still be able to access GLOBAL::Foo::Bar::Baz

[20:15] <ruoso> but without the GLOBAL:: in the front, you would always get a local copy

[20:15] <pmichaud> feels like PHP somehow.  :-)

[20:16] <ruoso> it does?

[20:16] <pmichaud> $GLOBAL['some global value']

[20:16] <pmichaud> the notion of "superglobals"  (special names that are imported into every package)

[20:16] <pmichaud> etc.

[20:16] <ruoso> hmm... I think that goes into the opposite direction

[20:17] <ruoso> nothing GLOBAL gets aliased in your package

[20:17] <ruoso> and every package you "use" is private to you

[20:17] <ruoso> but if you really want to use globals,

[20:17] *** lambdabot joined
[20:17] <ruoso> the GLOBAL:: namespace is still there for you

[20:18] <pmichaud> did we ever get resolution on captures, return, and the like?  I didn't see it in the scrollback.

[20:18] <ruoso> pmichaud, I saw the scrollback... but we got no resolution

[20:19] <ruoso> but anyway... I think I'm really liking the 'use clones packages' solution

[20:24] *** hercynium left
[20:26] <pmichaud> I'm now confused about the meaning of a Capture in item context.  A Capture in item context is... itself?

[20:27] <pmichaud> (going with the "every object in item context is just itself" meme)

[20:28] <ruoso> that was already reverted in IRC

[20:29] <ruoso> not yet reverted in the spec, it seems

[20:29] <pmichaud> so, a Capture in item context is what now?

[20:29] <ruoso> if a capture contains only a single argument (named or positional) it returns that item in item context

[20:29] <pmichaud> okay.

[20:29] <ruoso> otherwise it returns itself

[20:29] <pmichaud> do you know where that is in the irc logs?

[20:29] <ruoso> so "return a => 1" makes it a pair

[20:29] <ruoso> pmichaud, hmm... actually it was in p6l

[20:29] <ruoso> "new Capture behavior"

[20:30] <ruoso> "return 1" makes it a num

[20:30] <pmichaud> I thought I read through that thread... I must've missed that.

[20:30] <ruoso> I think I sent the idea in the first email with the subject

[20:30] <ruoso> and TimToady agreed in his direct reply to that

[20:32] <pmichaud> okay, I see it now.

[20:33] <pmichaud> thanks.

[20:34] *** FurnaceBoy joined
[20:34] *** FurnaceBoy left
[20:36] *** armagad joined
[20:40] *** araujo joined
[20:51] *** [particle]1 left
[20:53] *** ejs left
[20:58] *** [particle]1 joined
[21:05] *** japhb left
[21:06] *** [particle]1 left
[21:09] *** Ariens_Hyperion joined
[21:09] *** schmalbe left
[21:10] *** [particle]1 joined
[21:11] *** lambdabot left
[21:13] *** lambdabot joined
[21:19] <pmichaud> in what sense are private method calls "private"?

[21:19] <pmichaud> simply by convention of the !, or something else enforcing it also?

[21:20] <ruoso> pmichaud, it doesn't participate in regular dispatch

[21:20] <ruoso> you need to call it with an special syntax...

[21:21] <ruoso> class Foo { method !bar { }; mathod baz { self.bar } } # FAIL

[21:21] <pmichaud> so, there's a private method dispatcher?

[21:21] <ruoso> yes

[21:21] <pmichaud> okay.

[21:21] <ruoso> self!bar

[21:21] <pmichaud> and it doesn't do inheritance or stuff like that, I guess?

[21:21] <ruoso> exactly

[21:22] <pmichaud> so, we have  subroutine dispatch, method dispatch, and private dispatch

[21:22] <ruoso> yse

[21:22] <pmichaud> any others I'm forgetting?

[21:23] <ruoso> hmmm... not that I remember

[21:24] *** fridim_ left
[21:25] *** rindolf left
[21:26] <[particle]1> since ops are subs, no

[21:26] * pmichaud prepares to do some jnthn++ code refactoring again.  :-|

[21:32] <ruoso> I guess meta-ops might have a different dispatch

[21:33] <[particle]1> can you define your own meta-op?

[21:33] <pmichaud> sure.

[21:33] <[particle]1> i can't remember that new bit of spec

[21:33] <ruoso> well, you need a custom grammar, I thnk

[21:33] <ruoso> but you still can do it

[21:34] * ruoso later &

[21:34] *** ruoso left
[21:35] <pmichaud> for example, the 'R' operator is infix_prefix_meta_operator:<R>

[21:35] <[particle]1> ah, infix_prefix_meta. sweet.

[21:35] <pmichaud> STD says that X is infix_circumfix_meta_operator, but I suspect it's now supposed to be infix_prefix_meta_operator

[21:36] <[particle]1> i bet you're right

[21:36] <[particle]1> i heard perl6

[21:36] <[particle]1> *heart

[21:43] *** elmex joined
[21:58] *** Ariens_Hyperion left
[21:58] <mncharity> "happiness is a working operator precedence parser"

[21:59] <literal> haha

[22:08] <pugs_svn> r25730 | putter++ | [elfparse] /<comp_unit>/ parses '2+3*4'.

[22:08] <pugs_svn> r25730 | putter++ | std.pm: unpod infixish.  analysis.pm: bugfix - RxAlt branches get separate "have I seen this subrule multiple times" counters.  emit5.pm: run coerce(Match) during matching instead of afterward.

[22:15] *** dduncan joined
[22:17] *** ZuLuuuuuu joined
[22:21] *** awwaiid joined
[22:22] *** rodi left
[22:22] *** Ariens_Hyperion joined
[22:27] <mncharity> joys of STD.pm :my-ness next.  code slow or big, choose one.  another day.  then onwards to parsing 'say 3'.

[22:27] <mncharity> g'night all. &

[22:27] *** mncharity left
[22:36] *** alester is now known as AndyAway

[22:39] *** icwiener left
[22:42] *** cognominal left
[22:45] *** [particle]1 left
[22:46] *** krunen joined
[22:46] <pugs_svn> r25731 | lwall++ | [STD] infix_circumfix_meta_operator:<X> should be infix_prefix, pmichaud++

[22:46] <pugs_svn> r25731 | lwall++ | [STD] all non-transparent metas have transparent precedence, oops!

[22:46] *** cognominal joined
[22:56] *** Whiteknight joined
[23:03] *** Limbic_Region joined
[23:06] *** [particle]1 joined
[23:08] *** milton13 joined
[23:09] *** skids left
[23:10] *** bacek left
[23:37] *** awarefish joined
[23:41] *** M_o_C joined
[23:42] *** Ariens_Hyperion left
[23:42] *** Ariens_Hyperion joined
[23:48] *** nihiliad left
[23:52] *** Whiteknight left
