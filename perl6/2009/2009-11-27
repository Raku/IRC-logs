[06:42] *** Bucciarati left
[15:32] *** literal left
[15:32] *** mj41 left
[18:13] *** ilogger2 joined
[18:15] *** TimToady sets mode: +v ilogger2

[18:39] *** ascent joined
[18:44] *** rjh_ joined
[18:45] *** lmc joined
[19:05] *** diakopter sets mode: +oo TimToady [particle]

[19:05] <diakopter> oh

[19:05] <Wolfman2000> Lots of ops today. Wonder what the occasion is.

[19:05] *** diakopter sets mode: +o Wolfman2000

[19:06] <Wolfman2000> diakopter: I don't idle in here long enough. Besides: soon as I disconnect/quit, it's gone. THanks anyway.

[19:06] *** Wolfman2000 sets mode: -o Wolfman2000

[19:07] <TimToady> long weekend, is all, and attacks often happen on long weekends

[19:07] * colomon still hasn't figured out what he can do as operator...

[19:07] <Wolfman2000> colomon: set the topic, kick people, ban people, control channel modes

[19:07] <TimToady> mostly, /kick people who are misbehaving

[19:07] <colomon> gotcha, /kick.  that I think I can remember.

[19:08] <Wolfman2000> Of course, there are plenty that have autojoin set up on their client, so kicking doesn't always work

[19:08] <diakopter>  /ipkb ircname

[19:08] <TimToady> that's what bans are for

[19:08] <rgrau_> ban works then

[19:09] <Wolfman2000> TimToady: Care to explain how I can set up XChat Aqua so that I only automatically rejoin specific channels?

[19:09] *** PacoLinux joined
[19:09] <colomon> TimToady: I don't think I buy the idea of not reducing fractions if one denominator is a multiple of the other.  It seems like the only case it really makes sense for is dollars and cents.

[19:09] <TimToady> but generally just the presence of operators prevents most griefers from trying

[19:09] <TimToady> why would I care to explain something I know nothing about?

[19:10] <TimToady> btw 'care to explain' is one of those phrases that aspergery people should avoid using because it makes neurotypical people think you're being snotty when you're not

[19:11] <Wolfman2000> ...noted

[19:11] <Wolfman2000> I'll simplify the issue then.

[19:11] <Wolfman2000> My IRC client only allows a blanket "auto rejoin" for all or none

[19:11] <TimToady> then don't :)

[19:12] <TimToady> I've never used autorejoin myself

[19:12] <Wolfman2000> One particular server I take part in often does kicks for...well, "fun".

[19:12] <Wolfman2000> It's primarily for that server.

[19:13] <TimToady> yes, well, I think we should optimize for how we want it to be, not necessarily for how it is

[19:13] <TimToady> and personally I just stay away from such servers

[19:14] <diakopter> or p0wn them with one of the many /usr/bin/perl backdoors

[19:14] <Wolfman2000> ...depending on certain situations, that may happen in a few months.

[19:14] <TimToady> you could probably run separate client processes in different windows somehow

[19:14] <Wolfman2000> diakopter: I'm not going to get myself klined

[19:14] <diakopter> (I wasn't referring to Wolfman2000)

[19:15] <Wolfman2000> diakopter: wasn't obvious. My apologies.

[19:25] *** masak joined
[19:25] <masak> o/

[19:25] <Wolfman2000> afternoon masak

[19:25] <masak> Wolfman2000: evening.

[19:26] <Wolfman2000> Did November work this time around?

[19:26] <masak> yup.

[19:26] <masak> Wolfman2000++

[19:26] <masak> someone want to help me reply to this Twitterer? http://twitter.com/fail2code/status/6109938235

[19:27] <Wolfman2000> masak: trying to come up with a reply

[19:28] <masak> I'm looking for a combination of honest, witty and understanding.

[19:28] <[particle]> something like: try implementing it. talk about horror...

[19:28] <Wolfman2000> my thinking...

[19:28] <Wolfman2000> @fail2code Can you explain more of your feelings about this? What is fascinating? What is horrible? Input helps make the language better. :)

[19:28] <lambdabot> Unknown command, try @list

[19:28] <masak> [particle]: aye, something like that. :)

[19:28] <jnthn> The horror is about how fascinating you find it? ;-)

[19:28] <Wolfman2000> guess I wasn't what you were looking for.

[19:28] <masak> Wolfman2000: good thinking, but we lost him at 'explain'... :)

[19:29] <Wolfman2000> ...right, I did that again

[19:29] <Wolfman2000> /botignore @fail2code What are your feelings of Perl 6 in more detail? What is fascinating? What is horrible? Input helps make the language better. :)

[19:30] * Wolfman2000 isn't in witty mode yet

[19:30] <[particle]> jnthn: what's the size of perl6.obj on your system?

[19:31] <[particle]> i think i may be out of disk space, and that's why my rakudo build is faliing.

[19:31] <[particle]> my figners ar eflaiing too

[19:31] <masak> Wolfman2000: I took [particle]'s suggestion and merged yours in at the end.

[19:32] <Wolfman2000> masak++: gotcha. I thought you wanted all of us to reply

[19:32] <jnthn> [particle]: 22.3 KB or so.

[19:32] <jnthn> [particle]: Note that the PBC ends up in a resource file.

[19:32] <masak> Wolfman2000: I did. I find this PR stuff fascinating, to the extent that I grok it.

[19:32] <[particle]> hrmm, i've got 5.5MB free

[19:32] <jnthn> [particle]: Which we link in separately.

[19:33] <[particle]> oh, right, how big is perl6.exe?

[19:33] <jnthn> [particle]: I think I last encountered that situation in like, 1995... :-)

[19:33] <[particle]> yeah, well, it's a vm.

[19:33] <jnthn> [particle]: 4.3 MB but that's in ng, so I suspect master is bigger.

[19:34] <[particle]> ok, that's likely it, i'll see what i can delete. maybe msvc docs or some service pack files or something

[19:38] * jnthn wonders just how big the .exe is in master

[19:38] *** cotto joined
[19:38] <jnthn> [particle]: If you're building 64 bit, you can almost half the size of it by building a 32-bit version instead, probably. ;-)

[19:39] <[particle]> i've got 83MB now, rebuilding...

[19:40] <jnthn> Yay

[19:40] <jnthn> [particle]: What OS, BTW?

[19:40] <[particle]> vista x86

[19:40] <[particle]> as perl 5.10.1, msvc 2008

[19:41] * jnthn 's new laptop is Win7.

[19:41] <jnthn> Well, will be.

[19:41] <jnthn> :-)

[19:41] <[particle]> i've been using win7 since this summer on my laptop. feels better, but not as good on the battery as i hoped

[19:42] <Wolfman2000> I tried Windows 7...it's even more of a Mac clone now

[19:43] <[particle]> aha! perl6.exe is 6,888,448 bytes

[19:44] <Wolfman2000> that's...small

[19:44] <[particle]> nmake still fails, but that's when trying to write perl6.exe.manifest, which i don't care about

[19:44] *** araujo joined
[19:46] *** araujo left
[19:46] <jnthn> [particle]: Do you still get a perl6.exe out?

[19:47] <[particle]> yes

[19:47] <[particle]> but i can't make test, because make fails. sigh, i'll submit a rakudobug

[19:48] *** araujo joined
[19:49] <jnthn> [particle]: Is it a Rakudo bug?

[19:49] <jnthn> [particle]: Or a pbc2exe bug?

[19:50] <jnthn> [particle]: I guess either way, I can look into it a bit when I've got Win7 about...which I guess will exhibit the same issue.

[19:50] <[particle]> it probably will... are you xp now?

[19:51] <jnthn> yeah

[19:51] <[particle]> i haven't been able to build on my win7 laptop, with the same issue, so either it's my environment or my platform

[19:52] *** eternaleye joined
[19:52] <[particle]> it's not entirely clear to me whether it's pbc_to_exe or rakudo makefile, but it's likely pbc_to_exe. question is, why isn't it a problem for me to build parrot, if it's pbc_to_exe?

[19:53] <eternaleye> o/

[19:53] <phenny> eternaleye: 15:14Z <Wolfman2000> tell eternaleye I think parallelism is implemented...at least, on the rakudo bot

[19:53] <jnthn> [particle]: Sure...if it's pbc_to_exe that has the issue it'll be installation or path related I guess.

[19:54] <jnthn> [particle]: We won't know for sure until we get it tracked down.

[19:59] <[particle]> ok, parrot does have parrot.exe.manifest... looking into the parrot makefile

[20:01] <[particle]> ah, it may be a simple bug...

[20:02] <jnthn> That would be nice. :-)

[20:04] *** Exodist joined
[20:04] <[particle]> from parrot's makefile: 	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1

[20:05] <[particle]> from the rakudo make output: mt.exe -nologo -manifest perl6.exe.manifest -outputresource:perl6.exe.manifest;1

[20:05] <[particle]> notice the output resource names don't match

[20:06] <[particle]> with parrot, it uses $@, which is 'parrot.exe'. with rakudo, it's using 'perl6.exe.manifest'

[20:07] <[particle]> check parrot's tools/dev/pbc_to_exe.pir, lines 654-72

[20:07] <[particle]>     manifest_file_name  = exefile

[20:07] <[particle]>     manifest_file_name .= '.manifest'

[20:08] <[particle]>     embed_manifest_str  = 'mt.exe -nologo -manifest '

[20:08] <[particle]>     embed_manifest_str .= manifest_file_name

[20:08] <[particle]>     embed_manifest_str .= ' -outputresource:'

[20:08] <[particle]>     embed_manifest_str .= exefile

[20:08] <[particle]>     embed_manifest_str .= ';1'

[20:08] <[particle]> this should result in '... -outputresource:perl6.exe;1'

[20:08] <[particle]> but it doesn't.

[20:11] *** obra joined
[20:11] <obra> '$TIMEOFDAY

[20:11] <obra> TimToady: I'd love to get your input on http://www.nntp.perl.org/group/perl.perl5.porters/2009/11/msg153965.html

[20:11] <[particle]> hola obra

[20:13] <masak> o/

[20:15] <masak> ironically, I'm getting slight mojibake in the fourth paragraph of that message.

[20:19] <TimToady> I'm fine with generalizing \X to mesh more with the Unicode notion of graphemes

[20:20] <TimToady> which is basically where Perl 6 is aiming for its default notion of "character"

[20:20] <Wolfman2000> 無 <-- so is this a grapheme?

[20:20] <TimToady> yes

[20:20] * masak thinks so

[20:21] <TimToady> also happens to be a codepoint

[20:21] <Wolfman2000> a code point somewhere...hang on

[20:21] <Wolfman2000> .u 7121

[20:21] <phenny> U+7121 CJK UNIFIED IDEOGRAPH-7121 (無)

[20:21] <Wolfman2000> that's the one

[20:25] *** japhb joined
[20:36] *** eternaleye left
[20:37] *** eternaleye joined
[20:37] *** eternaleye left
[20:42] <dukeleto> pmichaud: any comments re: http://github.com/leto/nqptap/commit/fbb061dcceb8a3b9717be873bc9756245173b563 ?

[20:42] *** pmurias joined
[20:43] *** mberends joined
[20:43] *** pnate joined
[20:43] <pmurias> diakopter: is anyone other then us using V8.pm?

[20:44] <masak> I have an enum. how do I get a list of its values, in the order I defined them?

[20:44] *** colomon joined
[20:44] <masak> er, a list of the names of the values.

[20:45] <jnthn> rakudo: enum Foo <a b c>; say Foo.^methods(:local)

[20:45] <p6eval> rakudo 7347ec:  ( no output )

[20:46] <mberends> \o guys

[20:46] <jnthn> mberends: o/

[20:47] <masak> hi mberends!

[20:47] <mberends> Foo.perl probably NYI

[20:47] * colomon is very confused by the last few minutes backlog...

[20:49] <diakopter> pmurias: I don't know.. :) did you know it was originally named ACME::JavaScript (I think)?

[20:49] <dukeleto> pmichaud: nevermind :)

[20:49] * colomon ah, my client dropped a key line from masak.

[20:52] * diakopter read that as "key lime"

[20:52] <diakopter> I must be hungry

[20:52] * jnthn hands diakopter some citrus fruits

[20:52] <masak> with keys in them?

[20:53] * colomon now wants key lime pie...

[20:54] <jnthn> masak: Your comment doesn't appeel to me. :-P

[20:55] <masak> jnthn: pear not, I'm very grapeful.

[20:56] <jnthn> Those are appling.

[20:56] <masak> .oO( sour grapes )

[20:57] * jnthn blows a raspberry at masak

[20:58] <masak> I think we've had that idiom up for discussion before. still, I had to go look it up again. :)

[20:58] <masak> 'to make a rude noise by putting your tongue between your lips and blowing'

[21:00] <arnsholt> masak: A labio-lingual trill =D

[21:01] <masak> I love it when you talk dirty.

[21:01] <masak> std: subset Foo of Int where sub($_) { return 1 }

[21:01] <p6eval> std 29203: [31m===[0mSORRY![31m===[0m␤sub() interpreted as function call at line 1; please use whitespace instead of parens␤Unexpected block in infix position (two terms in a row) at /tmp/3TgSVH0PgV line 1:␤------> [32msubset Foo of Int where sub($_) [33m⏏[31m{ return 1 }[0m␤    expecting

[21:01] <p6eval> ..an…

[21:01] <masak> std: subset Foo of Int where sub ($_) { return 1 }

[21:01] <p6eval> std 29203: ok 00:01 105m␤

[21:01] <masak> ok, so where clauses to subtypes can be subs, if declared as such. that helps.

[21:01] <colomon> :O 

[21:01] <arnsholt> masak: There's a stale old pun I really have to combat making right now ^^

[21:01] *** bluescreen joined
[21:02] <jnthn> masak: Erm. I'm not too sure on that.

[21:02] <masak> arnsholt: does it contain fruit?

[21:02] <masak> jnthn: works in Rakudo. :)

[21:02] <jnthn> masak: Oh.

[21:02] <arnsholt> masak: It contains linguists

[21:02] * jnthn keeps quiet :-)

[21:02] <masak> arnsholt: are they cunning?

[21:02] <arnsholt> And, er, cleverness

[21:02] <masak> right.

[21:02] <masak> I think we'll leave it at that.

[21:02] <masak> this is a family channel.

[21:02] <colomon> what the heck does Foo back there do?

[21:03] <arnsholt> Yeah, I think we better

[21:03] <jnthn> Yeah, let's prune this punning.

[21:03] <arnsholt> I prefer raisins, meself

[21:04] <colomon> partridge berries.

[21:05] <masak> rakudo: sub foo(@bar) { [<] @bar }; subset Ascending of List where &foo; say (1, 2, 4, 7) ~~ Ascending

[21:06] <masak> that works locally! \o/

[21:06] <masak> std: sub foo(@bar) { [<] @bar }; subset Ascending of List where &foo; say (1, 2, 4, 7) ~~ Ascending

[21:06] <p6eval> rakudo 7347ec:  ( no output )

[21:06] <p6eval> std 29203: ok 00:02 131m␤

[21:06] <masak> that means where clauses can be separated and re-used. woot!

[21:06] <jnthn> std: subset Ascending where { [<] @^xs }

[21:06] <p6eval> std 29203: ok 00:01 106m␤

[21:06] <sjohnson> yo masak

[21:06] <sjohnson> and colomon 

[21:07] <masak> sjohnson: hello!

[21:07] <colomon> greetings!

[21:07] <colomon> masak++ for factoring wheres

[21:08] <jnthn> colomon: I just realized why it works fine.

[21:08] <jnthn> :-)

[21:08] * jnthn is a bit slow today

[21:08] <colomon> jnthn: it is supposed to work, I hope?

[21:09] <jnthn> colomon: Yeah. We treat the RHS of the where, if it's not a block, as something to smart-match against.

[21:09] <jnthn> But smart-matching against a sub invokes it and uses the result. :-)

[21:09] <colomon> woot!

[21:09] <jnthn> So however it's treated, it does what we want.

[21:09] <masak> convenient.

[21:10] <jnthn> In other words, even if we pick the wrong way to treat it, we still get the right answer anyway.

[21:10] <jnthn> ;-)

[21:10] <masak> The Impossible Dream of Babbage!

[21:10] <colomon> does that mean you can do something like $x where 1..5     ?

[21:12] <jnthn> masak: Heh. Now we just need to make the rest of Perl 6 fall out that way, and we won't have any more bugs. ;-)

[21:12] <TimToady> where is always smartmatch, the subs aren't an exception

[21:12] <masak> jnthn: speaking of bugs...

[21:12] * masak just got a Null PMC access in his new script

[21:13] <jnthn> masak: Surprise!

[21:14] <masak> awww... for me? you shouldn't have... :P

[21:14] <sjohnson> muri dana

[21:14] <jnthn> .oO( next time, use "Peved!" instead )

[21:15] <masak> Preved! \o/

[21:15] <jnthn> masak: Do you think the rest of the channel can bear us making puns in Russian too? :-)

[21:16] <masak> jnthn: I think you just went a bit too fir.

[21:18] <jnthn> OK, I've leave off.

[21:18] <colomon> I pine for the days when people around here spent more time programming than punning...

[21:19] <masak> yeah, but what's the pun in that?

[21:19] <masak> rakudo: my @a = 1, 2, 3; my @b = (@a.shift for ^3); @b[0].WHAT

[21:19] <p6eval> rakudo 7347ec: Null PMC access in find_method('WHAT')␤in Main (file <unknown>, line <unknown>)␤

[21:19] <masak> there's my bug.

[21:19] * masak submits rakudobug

[21:19] <jnthn> That's an...odd...one.

[21:20] <masak> the odd ones are the only ones left nowadays. :)

[21:21] <masak> as a bug hunter, one learns not to be choosy.

[21:22] <colomon> unless you want to work in ng

[21:22] <masak> yeah, but then you don't have any features, instead. :P

[21:23] <masak> are ranges and lists supposed to flatten inside of the list of values in enums?

[21:24] *** hcchien joined
[21:25] <TimToady> it would be rather weird to have the name of an enum element be an unflattened list

[21:30] <masak> TimToady: how do I get all the names the elements of an enum, in order?

[21:30] <masak> TimToady: simplest one I've found so far is SomeEnum.pick(*),sort

[21:31] <colomon> Does there "where" thing work in reverse for "when"?  By which I mean, if you have when { ... }, will it execute the block and fire the when's block if it returns true?

[21:31] <masak> hardly very idiomatic.

[21:32] <TimToady> colomon: don't know what you mean by "in reverse"; when and where are really the same thing, they just use their boolean differently

[21:33] *** Picta joined
[21:33] <TimToady> both do a smartmatch on the current topic, but where assumes the topic is a type, and when just uses $_

[21:33] <colomon> TimToady: I mean, we're "used" to where's clause being a block, and when's being something which is smartmatched.  

[21:33] <TimToady> speak for yourself; where has always been a smartmatch to me :)

[21:35] <masak> man, this is the funkiest code I've written in Perl 6.

[21:38] *** Picta left
[21:39] <TimToady> masak: you might try SomeEnum::.keys since Type:: is supposed to be the stash of the type; no guarantees about rakudo though

[21:39] <masak> TimToady: oki, thanks.

[21:40] <TimToady> doesn't guarantee order either

[21:40] <TimToady> though of course, enums are only conventionally in a particular order

[21:40] <TimToady> they're just a convenient way to write a lot of constants

[21:41] <colomon> my impression is that rakudo's enums are pretty dodgy right now.

[21:42] <jnthn> colomon: They're better now than they were. Trouble is, the spec seems to want them to be a bunch of different things at once...

[21:42] <TimToady> well, STD's enums are probably even dodgier, given it can't even evaluate a list

[21:42] <jnthn> colomon: I'm just not sure at all how to put them back in ng.

[21:43] <jnthn> I guess I could try and delegate 'em to Pm since my previous 2 attempts ain't been so awesome. ;-)

[21:44] *** iblechbot joined
[21:44] *** hicx174 joined
[21:44] <jnthn> TimToady: fwiw, the problem is more giving them all of their runtime semantics/behaviors rather than producing the name to value mapping...

[21:44] <TimToady> an enum is just sugar for constant declarations, and constants are values that can also be used as subsets representing that single value

[21:45] <jnthn> TimToady: Yeah, but there's also an expection, that the enum's name can also function as a role.

[21:45] <jnthn> TimToady: And that you can do .pick on it

[21:45] <TimToady> .pick is minor

[21:45] <jnthn> TimToady: And other bits.

[21:45] <jnthn> Well, all of the bits on their own are minor.

[21:45] <jnthn> I just didn't find a nice way yet to do do *all* of them. :-)

[21:48] <TimToady> I don't know if "but" really needs a role, mostly it just has to intuit a has-a relationship for the enum property, I suppose, and a role might be one way to do it

[21:48] <TimToady> but yeah, that part is a bit mushy

[21:49] <TimToady> might be more of a punning thing too

[21:50] <TimToady> but that might just be something that "but" does rather than something enum knows how intrinsically

[21:50] <TimToady> so I'd ignore "but" for the moment

[21:50] <TimToady> does that help?

[21:51] <jnthn> TimToady: Perhaps. I fear we have tests trying to use the enum name on the RHS of "does" too. I guess we can always declare 'em wrong...

[21:51] <jnthn> TimToady: The test file S12-enum/as-role.t for example.

[21:51] <TimToady> in other words, if you wrote a fake enum entirely by putting constants into a module, it might still work just as well in 'but' and 'does'

[21:52] <TimToady> but it would do so by some kind of role generation

[21:52] <TimToady> that's how I see it today, but maybe I'm forgetting something fundamental

[21:52] <TimToady> I do that once every decade or so...

[21:53] *** M_o_C joined
[21:53] <jnthn> :-)

[21:54] <jnthn> TimToady: I'll keep those bits in mind when I/we get to looking at them again in ng. Thanks.

[21:54] <TimToady> lemme think about it s'more in the meantime

[21:54] <pmurias> diakopter: do you think if we were to release V8.pm on cpan bundling v8 would be a good idea?

[21:54] <TimToady> bbl &

[21:58] <masak> rakudo: sub foo($b) { $b == 42 }; subset FortyTwo of Int where &foo; say 42 ~~ FortyTwo

[21:58] <masak> rakudo: sub foo($a, $b) { $b == 42 }; subset FortyTwo of Int where &foo.assuming(0); say 42 ~~ FortyTwo

[21:58] <p6eval> rakudo 7347ec:  ( no output )

[21:59] <diakopter> pmurias: sure, I think that'd be cool

[21:59] <p6eval> rakudo 7347ec:  ( no output )

[21:59] <masak> locally, the first one gives 1 and the second one gives a 'Not enough positional parameters passed'.

[21:59] <masak> jnthn: should the second one work?

[22:00] <diakopter> pmurias: just a snapshot of trunk (which is "stable") should suffice

[22:01] <jnthn> masak: Um

[22:01] <jnthn> masak: I *think* so.

[22:01] <diakopter> pmurias: or you could include a switch in the Makefile.pl that could pull the latest from svn trunk if the user had subversion installed... of course, including it would also require dependencies on python, scons, g++ (or msvc++)

[22:02] <jnthn> Since that should return a curry sub.

[22:02] <jnthn> uh, curried

[22:02] <jnthn> .oO( mmm...vindaloo )

[22:02] <masak> :)

[22:04] * jnthn would almost go back to Riga again just for That Restaurant.

[22:05] <masak> it was indeed a Good One.

[22:05] *** _eMaX_ joined
[22:06] <jnthn> Yeah...it does kinda beat my local one here. :-/

[22:06] <jnthn> OTOH, there's a Very Good One back in England, where I'm heading next week.

[22:08] <masak> OK. here we go.

[22:08] <masak> http://gist.github.com/244255

[22:08] <masak> that code works. it's a bit slow, but it classifies poker hands, down to the resolution of two hands of the same type.

[22:09] <jnthn> o_O

[22:09] <jnthn> You just introduced 2, 4, 6, 8... as type names. :-)

[22:09] <masak> yeah, sorry about that :P

[22:09] <masak> it does work, though.

[22:09] <jnthn> lol

[22:09] <masak> and there is prior art.

[22:10] <jnthn> std: my 2 $x;

[22:10] <p6eval> std 29203: [31m===[0mSORRY![31m===[0m␤Malformed my at /tmp/p6P4NB6VeF line 1:␤------> [32mmy [33m⏏[31m2 $x;[0m␤    expecting scoped declarator␤FAILED 00:01 105m␤

[22:10] <masak> you can have subs called 1 in Perl 5.

[22:10] <jnthn> std: enum Foo ( 2, 4, 6 ); my 2 $x;

[22:10] <p6eval> std 29203: [31m===[0mSORRY![31m===[0m␤Malformed my at /tmp/b7QB5cmy4S line 1:␤------> [32menum Foo ( 2, 4, 6 ); my [33m⏏[31m2 $x;[0m␤    expecting scoped declarator␤FAILED 00:01 105m␤

[22:10] <jnthn> rakudo: enum Foo ( 2, 4, 6 ); my 2 $x;

[22:10] <p6eval> rakudo 7347ec: Malformed declaration at line 2, near "2 $x;"␤in Main (file <unknown>, line <unknown>)␤

[22:10] <jnthn> ooh, OK, not as type names.

[22:10] <jnthn> :-)

[22:10] <masak> jnthn: well, no, not as such.

[22:10] <jnthn> rakudo: enum Foo ( 2, 4, 6 ); &2

[22:10] <jnthn> rakudo: enum Foo ( 2, 4, 6 ); say &2.WHAT

[22:10] <masak> I just name the enum values as numbers, which should be kosher.

[22:11] <p6eval> rakudo 7347ec:  ( no output )

[22:11] <p6eval> rakudo 7347ec:  ( no output )

[22:11] <masak> jnthn: I think you must quote the 2.

[22:11] <jnthn> Oh well, at least Rakudo let you dod it, rather than exploding. :-)

[22:11] <jnthn> subset FullHouse of PokerHand where OnePair & ThreeOfAKind;

[22:11] <jnthn> wow!

[22:11] <masak> :)

[22:11] <jnthn> That's...beautiful.

[22:12] <masak> this will do for blogging tonight.

[22:12] *** astrojp joined
[22:13] <diakopter> masak: I think FullHouse will hit on all ThreeOfAKind, as well..?

[22:15] <masak> diakopter: well, shouldn't it? it's higher in the type hierarchy.

[22:16] <jnthn> take Card.new(:$suit, :$rank); # heh

[22:18] <masak> hm, I should probably have made that one a map.

[22:20] <jnthn> masak: Yeah but "take Card" is cute.

[22:20] <jnthn> (Cuteness Driven Development)++

[22:20] <masak> yes, it is. slightly misleading, though, since we're not taking cards at that point. :)

[22:21] <jnthn> Yeah, true. 

[22:21] *** colomon left
[22:21] * masak submits the where-and-assuming rakudobug

[22:22] *** colomon joined
[22:22] *** justatheory joined
[22:27] <pmurias> diakopter: unless you want to do a lot of build magic there is no way we can get rid of the dependency on scons

[22:33] <Tene> masak: "$_ == $rank" -- does "==" work for "knight"?

[22:33] <masak> Tene: yes.

[22:33] <Tene> Huh.

[22:33] <masak> Tene: it's numeric comparison.

[22:33] <Tene> Oh, "enum".

[22:33] <masak> :)

[22:33] <Tene> nice.

[22:33] <masak> cunning, even. :P

[22:33] <Tene> There should be a version of "grep" that smartmatches, IMO.

[22:34] <Tene> grep $rank, @cards>>.rank

[22:34] <masak> that oughta work, actually.

[22:34] * masak makes local experiments

[22:35] <Tene> rakudo: my @a = <a b c d e a e a>; say (grep 'a', @a).perl;

[22:35] <p6eval> rakudo 7347ec: ["a", "a", "a"]␤

[22:35] <Tene> rakudo: my @a = <a b c d e a e a>; say @a.grep('a').perl;

[22:35] <p6eval> rakudo 7347ec: ["a", "a", "a"]␤

[22:35] <Tene> Nice.

[22:35] <Tene> Yeah, do that.  It looks much nicer.

[22:36] <masak> yes, this works:

[22:36] <masak> rakudo: enum A <a b c d>; my @a = a, b, c, b, c, b, a; for A.pick(*).sort -> $rank { say (grep $rank, @a).elems }

[22:36] <p6eval> rakudo 7347ec:  ( no output )

[22:36] <masak> locally.

[22:36] <masak> Tene++ # suggestion

[22:37] <Tene> rakudo master doesn't have parameterized containers yet, right?

[22:37] <Tene> List[Card]

[22:38] <Tene> Rakudo: Bag.new();

[22:38] <Tene> rakudo: Bag.new();

[22:38] <p6eval> rakudo 7347ec: Could not find non-existent sub Bag␤in Main (file src/gen_setting.pm, line 324)␤

[22:38] <Tene> Still, very nice work, masak. :)

[22:38] <masak> thanks :)

[22:38] <Tene> oh, one more...

[22:39] <colomon> btw, masak, very interested to see this code you are working on.  :)

[22:39] <Tene> rakudo: my @a = <a b c d e>; say [lt] @a;

[22:39] <p6eval> rakudo 7347ec: 1␤

[22:39] <Tene> rakudo: my @a = <a b c d e a>; say [lt] @a;

[22:39] <p6eval> rakudo 7347ec: 0␤

[22:39] <masak> colomon: http://gist.github.com/244255

[22:39] <Tene> can you use '<' on Enums?  If so, do Straight with [<]

[22:40] <masak> Tene: necessary but not sufficient.

[22:40] <colomon> masak: for the book?

[22:40] <Tene> Ah.

[22:40] <Tene> Right.

[22:40] <masak> colomon: maybe.

[22:40] <colomon> :0

[22:40] <masak> colomon: after writing it, this piece of code, or something like it, feels like a good candidate.

[22:42] <colomon> You certainly are doing interesting things with where.

[22:42] <jnthn> masak: It could introduce both enums and subset types.

[22:43] <jnthn> masak: "Other Typey Things" chapter? :-)

[22:43] <masak> jnthn: well, the MMD example already uses enums currently.

[22:43] <masak> don't know if it should, though.

[22:43] <jnthn> Oh?

[22:43] <jnthn> Isn't that the json one?

[22:43] <masak> I mean the rock-paper-scissors one.

[22:44] <jnthn> oh, OK.

[22:44] <jnthn> wait, that uses enums?!

[22:44] * jnthn never wrote that one in terms of enums...

[22:44] <jnthn> I guess you can....

[22:44] <masak> no, I kinda rewrote it... :/

[22:44] <masak> it looked much better that way.

[22:44] <masak> but I'm not 100% sure it should stay that way.

[22:45] <masak> maybe we should 'simplify' a little by not introducing enums at that point.

[22:51] <jnthn> Yeah...we have to write some "not what a guru would write" code in the earlier chapters in some senses, I think.

[22:52] <jnthn> It is, after all, OK to speak in baby speak too as a beginner. :-)

[22:53] <masak> guru? moi?

[22:53] <masak> only in the sense that the prices of my courses are exorbitant. :P

[22:53] <eiro> haha ... yes you are

[22:53] <masak> I just work here...

[22:53] <eiro> hello all 

[22:54] <masak> o/

[22:55] <arnsholt> It amuses me that guru means heavy/weighty at the base ^^

[22:56] <arnsholt> Even though it makes sense, I keep seeing some balloon-shaped guru, rather than the more standard mental image of the thin ascetic =)

[22:59] <Tene> My job title is "guru".  That's even what it says on my business cards.

[22:59] <arnsholt> Very cool

[23:00] <jnthn> Tene: But are you heavy/weighty at the base though?

[23:00] <jnthn> :-)

[23:00] <Tene> My feet are a little bit larger than usual.

[23:01] <jnthn> That'll do! True guru! :-)

[23:03] <masak> rakudo: enum SomeEnum <a b c>; say SomeEnum::.keys

[23:03] <masak> locally, I get "invoke() not implemented in class 'Perl6Role'"

[23:03] <p6eval> rakudo 7347ec:  ( no output )

[23:03] <masak> is that worth a rakudobug submission?

[23:04] <masak> std: enum SomeEnum <a b c>; say SomeEnum::.keys

[23:04] <p6eval> std 29203: ok 00:01 106m␤

[23:04] *** robert__ joined
[23:04] * jnthn looks confused at what the indent was there

[23:04] <jnthn> *intent

[23:04] <jnthn> Oh

[23:04] <jnthn> Treating it as a namespace...hm

[23:04] <masak> yah. a stash, said TimToady.

[23:04] * jnthn is vaguely surprised Rakudo even parses that.

[23:05] <masak> heh.

[23:05] <jnthn> I guess if it ends with :: we're meant to treat it as a stash...I guess I can go with that.

[23:05] <jnthn> File rakudobug if you like.

[23:06] * masak likes

[23:07] <jnthn> Many bugar today. :-)

[23:07] <masak> min rakudo e kass. :)

[23:08] <arnsholt> masak: Det tror jeg ikke på ett eneste sekund =p

[23:08] <jnthn> Ja ar inte en bra compilerwriter.

[23:08] <jnthn> *Jag

[23:08] <jnthn> :-)

[23:08] <masak> ja, ja.

[23:08] <masak> we all suck to some extent. :)

[23:09] <jnthn> Just remember: if you think you suck, black holes suck SO much more.

[23:09] <jnthn> .oO( I should be a motivational consultant )

[23:09] <masak> jnthn++ pmichaud++ # have written the most compliant implementation out there so far

[23:09] <Wolfman2000> back from errands and whatnot. masak: what implementation? rakudo?

[23:10] <masak> Wolfman2000: yes, that one.

[23:10] <mathw> Evening

[23:11] *** iblechbot left
[23:11] <jnthn> hi, mathw :-)

[23:12] <masak> oh hai mathw!

[23:14] <mathw> :)

[23:15] <mathw> I can haz sweet and sour chikn ballz

[23:15] <mathw> The cat's eyeing them acquisitively though

[23:15] <jnthn> I can haz a jellus!

[23:15] <mathw> you can join the cat in that then

[23:16] * masak stores the word 'acquisitively' in his brain; nice one

[23:23] <mathw> oh dear

[23:23] <mathw> it seems the cat does have a taste for batter

[23:24] <mdxi> http://i45.tinypic.com/2ptcxfr.jpg

[23:24] <mathw> aaaaawww

[23:25] <jnthn> awww...the cute!

[23:25] <jnthn> mathw: That's...healthy. :-)

[23:25] <mathw> keeps him quiet for a bit...

[23:25] <mathw> I'm off to bed shortly anyway, so I shall have to take it away from him

[23:25] <jnthn> OTOH, it won't make that much difference, given the main component of a cat's diet is cheezburgers.

[23:25] <mathw> quite

[23:25] <mathw> and it's far healthier than chocolate

[23:26] <mathw> ...which is poisonous to cats

[23:26] <mathw> goodnight all

[23:26] <jnthn> o/

[23:26] <mathw> I may do some lolsql tomorrow :)

[23:28] <jnthn> \o/

[23:28] <masak> mathw: 'night

[23:29] <jnthn> Talking of SQL. I was doing some code review today (can't say what in...) and discovered something an incredible and innovative way to handle dynamic SQL query generation.

[23:29] <masak> so, are there plans to do a Perl 6 advent calendar? where do I sign up for a few days' worth?

[23:30] <jnthn> Produce chunks of SQL, interpolating variables into them (without escaping, so you get vulnerabilities). The chunks should correspond to the SELECt, FROM, etc. Then pass those SQL strings to a stored procedure. The SP then concatenates and execs them.

[23:30] <jnthn> Yes, I actually encountered this!

[23:30] <jnthn> The real world is a scary place.

[23:30] <jnthn> The SP actually had parameters like @SelectClause.

[23:31] <jnthn> I think using lolsql would actually have been an improvement. :-/

[23:31] <masak> probably.

[23:32] <jnthn> I'm not quite sure what thought process you go through to actually create something like that... :-/

[23:32] <jnthn> It's like, enterprise level fail.

[23:32] <jnthn> Thankfully my job is only to whine about the code, not to actually maintain it.

[23:33] * jnthn is glad the bulk of that is done and he can return to the much saner world of Rakudo hacking.

[23:33] <colomon> masak: there are indeed plans afoot for an advent calendar.

[23:36] <arnsholt> jnthn: It's the kind of thought process where you haven't heard of parameter binding I think

[23:36] <colomon> PerlJam and I were discussing it this morning.  But I think he may have taken discussion to one of them fancy google wave things, and I'm not on there yet.

[23:37] <jnthn> arnsholt: Yes, but they'd actually heard of it enough to use it to pass the manually-constructed chunks of SQL to the SP. That was the bewildering part. :-)

[23:38] <arnsholt> Now THAT is a WTF

[23:38] <jnthn> Right. :-)

[23:38] <arnsholt> Consider sending it to thedailywtf.com? =)

[23:40] <jnthn> arnsholt: NDA. :-(

[23:41] <jnthn> Thus the "can't tell you where it's from" at the start of this. :-)

[23:41] <jnthn> oh gah

[23:41] <jnthn> I just tried to sign up to blogs.perl.org. The signup form tells me, "Text entered was wrong. Try again."

[23:41] <arnsholt> Point, point. Reading comprehension is not my strong point I suppose. At least not at one in the morning =)

[23:41] <jnthn> ...and doesn't tell me which field I didn't fill in right. And they all look fine to me.

[23:42] <colomon> jnthn: It just throws me out with mysterious errors every time I try to login.

[23:43] <jnthn> colomon: Ah, not just me having issues then...

[23:43] * jnthn leaves it for another time

[23:44] <colomon> jnthn: mind you, not the same error you are describing...

[23:45] <jnthn> colomon: I get the impression they're still working out the kinks.

[23:45] <masak> colomon: cool. anyway, I'm prepared to contribute some Perl 6 advent calendar day blog posts if need be.

[23:46] <colomon> masak:  \o/   I'm sure any contributions from you would be welcome.  :)

[23:46] <colomon> afk (son's dinner)

[23:46] <masak> sleep &

[23:47] *** masak left
