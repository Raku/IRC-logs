[00:00] *** frew left
[00:14] *** justatheory left
[00:23] *** amoc joined
[00:29] *** bacek__ joined
[00:41] *** wollmers left
[00:42] *** nsh joined
[00:53] *** fridim left
[01:16] *** aindilis left
[01:16] *** aindilis joined
[01:21] *** ra joined
[01:25] *** FurnaceBoy joined
[01:27] *** PhatEddy left
[01:28] *** eternaleye joined
[01:29] *** ra left
[01:30] *** meppl left
[01:59] *** whiteknight left
[02:01] *** justatheory joined
[02:04] *** eternaleye_ joined
[02:05] *** eternaleye left
[02:12] *** alester joined
[02:15] *** nsh left
[02:39] *** cdarroch left
[02:45] *** szabgab_ joined
[02:45] *** szabgab left
[02:56] *** payload left
[02:56] *** zostay left
[02:59] *** zostay joined
[03:14] *** eternaleye_ left
[03:16] *** zostay left
[03:18] *** skids left
[03:20] *** donaldh left
[03:20] *** donaldh joined
[03:31] *** [particle]1 joined
[03:37] *** frew joined
[03:44] *** orafu left
[03:44] *** orafu joined
[03:49] *** [particle] left
[03:50] *** TimToady sets mode: -b *!n=stefan@71.59.220.*

[03:50] *** TimToady sets mode: -b *!*@c-67-174-249-33.hsd1.ca.comcast.net

[03:50] *** DemoPhreak joined
[03:50] *** TimToady sets mode: -b *!*@cpe-72-130-0-248.socal.res.rr.com

[03:50] *** TimToady sets mode: -b *!*@*ompugoat.biz

[03:51] *** TimToady sets mode: -b heyhey*!*@*

[03:51] *** TimToady sets mode: -b *!*n=heyhey@218.25.39.*

[03:51] *** TimToady sets mode: -b *!*n=heyhey@221.130.185.*

[03:53] *** wollmers joined
[03:53] *** wollmers left
[03:56] *** lambdabot joined
[04:06] *** DemoFreak left
[04:10] <s1n> moritz_: i'll have to respond tomorrow :/

[04:16] *** FurnaceBoy left
[04:31] <frew> can I do given $foo; to set $foo for the topic of the rest of the current scope?

[04:31] <frew> rakudo: given 1; .say

[04:31] <p6eval> rakudo 3412a2: OUTPUT«Could not find non-existent sub given␤current instr.: '_block14' pc 60 (EVAL_18:47)␤»

[04:31] <frew> well, it could be nice

[04:34] <TimToady> no, that's not currently supported

[04:34] <TimToady> but why wouldn't you just say $_ = 1?

[04:35] <TimToady> (we do reserve the semicolon syntax for that sort of end-of-block semantics, but most of the time it would not contribute to readability)

[04:35] <frew> that's true

[04:37] <frew> I'd forgotten about manually setting it

[05:06] *** hercynium left
[05:14] *** hcchien left
[05:14] *** clkao left
[05:14] *** hcchien joined
[05:14] *** alester left
[05:15] *** clkao joined
[05:19] *** eternaleye joined
[05:33] *** clkao_ joined
[05:33] *** clkao left
[05:34] *** clkao_ is now known as clkao

[05:36] <pugs_svn> r26817 | lwall++ | [Cursor] remove accidental whitespace in :< x > macro

[05:38] *** ihrd joined
[05:39] *** ihrd left
[05:44] *** _REPLeffect joined
[05:45] *** _REPLeffect is now known as REPLeffect

[05:49] *** eMaX joined
[06:04] *** LadyLunacy joined
[06:13] *** LadyLuna1y left
[06:21] *** mib_p02slb joined
[06:22] *** eMaX left
[06:23] *** eMaX joined
[06:24] *** mib_p02slb left
[06:27] *** justatheory left
[06:45] *** mberends joined
[06:53] *** iblechbot joined
[07:20] *** donaldh left
[07:20] *** donaldh joined
[07:27] *** frew left
[07:32] *** Kisu joined
[07:33] *** sri_kraih_ joined
[07:36] *** ejs joined
[07:42] *** finanalyst joined
[07:49] *** sri_kraih left
[08:00] *** eMaX left
[08:06] *** _mg_ joined
[08:09] *** NoirSoldats joined
[08:12] <Tene> Ooo... when did rakudo spectest learn to run multiple in parallel?

[08:12] <moritz_> Tene: about a month (or two) ago

[08:13] <moritz_> commit ea9417560bd818e31419b6fcbdf3d265a93f186a

[08:13] <moritz_> Date:   Tue Apr 7 16:59:43 2009 +0200

[08:13] <moritz_> re-enable parallel testing in t/harness again

[08:14] <Tene> Heh.

[08:14] <Tene> OK

[08:14] <Tene> Man, so many tests...

[08:14] <Tene> la la la waiting for spectests... 

[08:16] <Tene> ♪ spectests song... ♪

[08:16] <moritz_> 15min with parrot configured with --optimize and parallel harness

[08:16] <Tene> I didn't think to run it under time... :(

[08:17] <moritz_> the harness prints the "wallclock secs" at the end

[08:17] <Tene> ah nice

[08:18] *** EvanCarroll joined
[08:18] *** EvanCarroll left
[08:24] *** spx2 joined
[08:25] <mberends> Tene: be happy. spectest takes 2235 secs (~37min) on this dual AMD64

[08:28] <Tene> Files=388, Tests=13826, 1105 wallclock secs ( 7.01 usr  1.73 sys + 1937.50 cusr 99.34 csys = 2045.58 CPU)

[08:29] <moritz_> mberends: but in serial mode, right?

[08:29] <moritz_> Tene: more importantly, did it PASS? :-)

[08:29] <moritz_> (except the known segfault in slice.t)

[08:29] *** ejs1 joined
[08:30] <Tene> Oops, didn't mean to also push to the hll branch.

[08:30] <Tene> moritz_: 

[08:30] <Tene> Test Summary Report

[08:30] <Tene> -------------------

[08:30] <Tene> t/spec/S32-io/IO-Socket-INET.t                               (Wstat: 0 Tests: 3 Failed: 2) Failed tests:  2-3

[08:32] <moritz_> Tene: could you re-run that test?

[08:32] <moritz_> it sometimes fails, seemingly randomly

[08:32] <moritz_> (but usually only the third fails)

[08:32] <dalek> rakudo: 1064529 | tene++ |  (4 files):

[08:32] <dalek> rakudo: Make everything actually compile under a different HLL.

[08:32] <dalek> rakudo: Not completely right, but nothing too wrong either.

[08:32] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/106452996dfcd185c24550bc3fb4a7b44a54de8f

[08:33] <Tene> moritz_: yes, it passes all three

[08:36] *** spx2_ left
[08:37] <moritz_> Tene: in that commit one comment says "MUST BE LOWERCASE", but then you use get_hll_namespace ['Perl6';'Grammar']

[08:37] <moritz_> Tene: does that mean we have both 'perl6' and 'Perl6'?

[08:38] *** ejs left
[08:39] <Tene> moritz_: get_hll_namespace [ ... ] == get_root_namespace [ 'perl6' ; ... ]

[08:39] <Tene> so, yes.

[08:39] <Tene> moritz_: the issue is that Parrot lowercases whatever HLL name we use

[08:39] <Tene> so if we set 'Perl6' as the HLL name, the namespace would be get_root_whatever [ 'perl6' ]

[08:40] <moritz_> Tene: ah

[08:40] <Tene> so in the case where we need to look at the hll namespace directly, it fails

[08:40] <moritz_> Tene: is that lower casing a parrot bug?

[08:40] <Tene> which we do in src/parrot/Protoobject.pir

[08:40] <moritz_> and if yes, is there a ticket for it?

[08:40] <Tene> it's a design issue.  I asked for feedback from it on the list, and I don't remember the overall response.

[08:41] <Tene> It's currently working as specced.

[08:41] <Tene> So, not an impl. bug, but maybe a design bug.

[08:43] <Tene> no, I don't think there's a ticket for it.

[08:43] <Tene> At least, I didn' tmake one.

[08:43] *** eMaX joined
[08:43] *** masak joined
[08:44] *** meppl joined
[08:44] <masak> good beforenoon, perl 6 people.

[08:44] <lambdabot> masak: You have 1 new message. '/msg lambdabot @messages' to read it.

[08:44] <masak> @messages

[08:44] <lambdabot> eternaleye said 2h 59m 20s ago: (re set operations) something like this? -- multi sub infix:<⊂>( Any @subset_candidate, Any @superset_candidate --> Bool ) { return Bool::True if ( all( @subset_

[08:44] <lambdabot> candidate ) ~~ any(@superset_candidate) ); }; say ([ 1, 3 ] ⊂ [ 1, 2, 3 ]).perl # Works in Pugs!

[08:44] <masak> eternaleye: aye, something like that. :)

[08:45] <Tene> there's a Set.pm in pugs that defines those.

[08:45] <masak> eternaleye: there's also a Set.pm somewhere in the Pugs repo that defines... aye.

[08:45] <Tene> :) masak++

[08:46] <masak> thing is, I don't think anyone has the big picture on how Sets and Bags will play into the rest of the language.

[08:46] <masak> as far as I see it, we don't want to introduce too much new syntax.

[08:46] <masak> it would be best if the new features could just "blend in" somehow.

[08:54] <moritz_> masak: maybe ask TimToady, he often has a quite concrete (albeit not complete) idea in the back of his mind

[08:55] <masak> yes. I expect to have plenty of discussions with TimToady (and the rest of #perl6) about Sets and Bags in the near future.

[09:02] <Tene> hmm... decent number of failures in .HLL 'perl6'

[09:02] <Tene> I have a vague idea about most of them.

[09:02] <Tene> spectest still running, though... :(

[09:02] *** bacek__ left
[09:05] *** payload joined
[09:10] <Tene> Files=388, Tests=13422, 1563 wallclock secs ( 7.11 usr  1.41 sys + 2653.90 cusr 97.25 csys = 2759.67 CPU)

[09:10] <Tene> spectests actually do run slower in .HLL 'perl6'

[09:10] <Tene> they also fail a lot

[09:15] *** cognominal joined
[09:17] <masak> after backlogging, I just have one question:

[09:17] <masak> "how  do u make your own chanle" :)

[09:17] <masak> oh, and also how is babby formed.

[09:19] <masak> mberends: it might be a good idea to start making a list of things that proto does not do, but that its successor ("pro-II"?) might.

[09:20] *** mhsparks joined
[09:22] <mberends> does u rly want 2 get me started?

[09:23] <masak> well... thinking about features has never hurt, I think.

[09:23] <masak> it's still important not to overdesign, of course, but just listing features seems fairly harmless.

[09:24] <mberends> mainly integrating with the 'use' command to be designed in August.

[09:25] <masak> yes, absolutely.

[09:25] <masak> also with the whole package idea championed by frettled++.

[09:26] <jnthn>  H H

[09:26] <mberends> O   AI!

[09:27] <masak> jnthn: o/

[09:27] <mberends> it would be best to minimize dependencies, and avoid config files, environment variables and so on if possible.

[09:27] <masak> aye.

[09:27] <masak> make Perl 6 monolithic, in a sense.

[09:28] <masak> one problem with CPAN is that it's very postmodern. it shows all the pipes sticking out, making me answer all these questions the first time, and then spewing out kilometer upon kilometer of make output.

[09:29] <masak> proto was designed partly as a reaction against that.

[09:29] <moritz_> I think that proto could very well rely on some config file parsing module, but should simply include a copy of it

[09:30] <mberends> that's when PERL6LIB should be phased out. There is a similar background and reasoning behind P5's PERLLIB, but the goals this time are a bit more ambitious. Yes, I think proto's config file idea is much better so far.

[09:30] *** LylePerl joined
[09:30] *** donaldh left
[09:30] <masak> the comments are out-of-date in config.proto, by the way. :/

[09:30] <Matt-W> Fix them!

[09:30] <masak> I'll see if I'll have time to fix that.

[09:31] <Matt-W> Out of date comments are the source of much evil

[09:31] *** payload left
[09:31] <masak> Matt-W: aye, sir.

[09:31] <mberends> I would not mind if ./perl6 also had a config file in /etc or wherever Windows should do similar.

[09:31] <masak> mberends: sounds like a sane idea.

[09:31] <mberends> just like bash etc

[09:32] <mberends> TimToady was very against that in P5 though

[09:32] *** jferrero joined
[09:32] <masak> mberends: I'm sensing a disfactoring of Installer.pm coming up.

[09:32] <mberends> and with good reason

[09:32] <masak> mberends: thinking of creating a separate class Ecosystem.pm -- name still up for discussion.

[09:33] <masak> likely a separate class Project will fall out of that, too.

[09:33] <mberends> yes, you mentioned that yesterday, probably one part to do Ecosystem and another part for Install.

[09:34] <masak> yes.

[09:34] <masak> Install makes use of (and haz) Ecosystem.

[09:34] <mberends> that Ecosystem part might overlap ~/.perl6.conf or /etc/perl6.conf

[09:35] <masak> sure, but this is proto. :)

[09:37] <mberends> proto per se AGNI except to beautify a class design. a big monolithic mess is simpler and also does the job.

[09:37] <mberends> lurkers: Ain't Gonna Need It ;)

[09:40] <mberends> back to that 'use' command, versioning and disambiguating authors/authorities should be based on filesystem hierarchy as much as possible, but not obsessively so if sensible configuration data helps.

[09:41] *** Guest89223 left
[09:41] <mberends> s/disambiguating/distinguishing/

[09:42] <mberends> Ecosystem should support that, but the results *may* not depend on proto, ever.

[09:44] <mberends> the .NET Global Assembly Cache is could almost work for P6

[09:44] <mberends> s/is // #gah

[09:45] <masak> mberends: well, I'm going to resist any Functional Additions to proto as long as it seems sensible.

[09:45] <masak> people are welcome to fork off, though. :)

[09:47] *** payload joined
[09:48] <mberends> would you prefer a clean break / fork between proto and pro-II, or a gradual morph?

[09:48] <masak> mberends: that would depend on the reqs for pro-II, I think.

[09:48] * mberends votes for morph

[09:48] <masak> morph is usually easier, yes.

[09:49] <masak> it's the "from fail to work < from work to fail" rule all over again.

[09:50] <mberends> an excellent way of putting it

[09:51] <masak> mberends: well, it was you who said it the first time. :)

[09:51] <mberends> that's what forks usually do too, and Darwinism finishes the job

[09:51] <masak> it resonates well with me though, because it reminds me of Dawkins' "There are a lot more ways of being dead than of being alive."

[09:52] <masak> believe it or not, that amounts to the same thing. :)

[09:52] <mberends> :) life is precious, and rare

[09:52] <masak> that, too.

[09:52] <masak> but the point is, I think, that once you've got something going (life, sockets, proto, etc), it's a good idea to keep builing from that...

[09:53] <masak> ...instead of starting over with something that doesn't work yet.

[09:53] <mberends> to a point. the state of P5 guts are the reason for P6.

[09:54] <masak> oh, to be sure.

[09:54] <masak> but note that we're not throwing out all of P5 either.

[09:57] <mberends> proto's guts are nice IMNSHO, hence morph, into multiple classes if that is justified. After the 'use' case, I think popularity-contest would be the next feature I'd like to add.

[09:57] <masak> "what's popularity-contest, precious?"

[09:59] <mberends> the Debian term for statistics about number of installations, kind of deployment feedback. It's done via email.

[10:00] <masak> ok, I can think rationally about that as long as I don't think of it as an addition to proto. :P

[10:00] <mberends> Another feature idea would be wtop-stubber-kwalitee enhancement

[10:01] <masak> oh, yes.

[10:01] <masak> but I see that as a separate project, if for no other reason than the fact that deps already point from that towards proto.

[10:02] *** donaldh joined
[10:02] <mberends> ?? that's a reason _not_ to separate, surely?

[10:02] <lambdabot> Plugin `compose' failed with: Unknown command: ""

[10:03] <masak> lambdabot: ssh.

[10:03] <masak> grownups talking.

[10:03] <masak> mberends: I guess it depends.

[10:03] <masak> mberends: if I do the Ecosystem disfactor, I can have WTOP depend on proto.

[10:04] <masak> the former simply asks the latter for all known projects, whether they're installed, etc.

[10:04] <masak> oh, and their locations on disk.

[10:05] <mberends> the similarities to debian packaging are everywhere

[10:06] <masak> oh, I would love to see an installer that piggy-backed on the APT system.

[10:06] <masak> but I'm not the person to start such a project.

[10:07] <mberends> if support for gzip and ar could be built in (ie no external lib or exe dependency) then I would look no further. I'm still wondering about whether those two could be written in PIR.

[10:08] <masak> I don't see why not.

[10:08] <masak> lurkers: ^^ projects for you!

[10:09] <mberends> it's a task bigger than 1 hackathon.

[10:10] <masak> indeed.

[10:11] *** payload left
[10:11] *** pmurias joined
[10:12] <mberends> you're right, there is no reason why not. how about this approach: they're both written in C, so try the C to Parrot compiler on them? I don't know the status of C on parrot, though.

[10:13] <masak> sounds like a fun experiment.

[10:14] <mberends> the experiment is hackathon sized :)

[10:15] <mberends> afk &

[10:16] *** eMaX left
[10:16] *** eMaX joined
[10:17] <masak> lunch &

[10:21] *** payload joined
[10:41] *** payload left
[10:52] *** clkao left
[10:52] *** clkao joined
[11:02] *** clintongormley joined
[11:20] *** donaldh left
[11:20] *** donaldh joined
[11:41] *** pmurias left
[11:50] *** eMaX left
[11:51] *** eMaX joined
[11:59] *** VX joined
[12:12] *** ashizawa joined
[12:19] *** payload joined
[12:21] *** H1N1[A] left
[12:22] *** H1N1 joined
[12:27] *** payload left
[12:27] *** payload joined
[12:40] *** abra joined
[12:42] *** ruoso joined
[12:44] <ruoso> Hello!

[12:52] <Matt-W> hi ruoso

[12:58] *** iblechbot left
[13:02] *** ejs2 joined
[13:03] *** payload1 joined
[13:04] *** payload left
[13:11] *** ejs1 left
[13:16] *** payload joined
[13:16] *** payload1 left
[13:28] *** payload left
[13:29] *** lichtkind joined
[13:40] *** skids joined
[13:45] *** exodist joined
[13:48] *** H1N1 is now known as H1N1[A]

[13:50] * mberends groks gregorian, julian and other date representations

[13:53] *** Kisu left
[13:57] *** alester joined
[13:59] *** finanalyst left
[14:03] *** ejs2 left
[14:04] *** payload joined
[14:09] *** LadyLuna1y joined
[14:19] *** LadyLunacy left
[14:22] <masak> I wouldn't dare say I *grok* gregorian. I've heard of it, that's all. :)

[14:26] *** payload left
[14:27] *** _mg_ left
[14:27] <mberends> excellent Calendar FAQ http://www.tondering.dk/claus/calendar.html

[14:28] <mberends> you could call some of it "applied numerology"

[14:29] <moritz_> there's not even one calendar I grok :)

[14:30] <masak> calendars are serious business.

[14:30] <arnsholt> masak: Gregorian is the calendar we're using today, so I'd say you probably grok it reasonably well =)

[14:30] <Infinoid> calendars have always seemed arbitrary and a bit ... "un-round" to me

[14:30] * Infinoid just hates divisors that aren't powers of 2 :)

[14:30] <masak> arnsholt: oh, yeah, right. Gregorian is that calendar. :P

[14:31] <masak> arnsholt: but still, "grok" is a strong word.

[14:31] <masak> "grok reasonably well feels" like a half-oxymoron.

[14:31] <arnsholt> Julian is the predecessor, which is still used by the orthodox church to compute the date for Easter

[14:33] <masak> it's interesting to follow the evolution of the concepts of time and money. as society deepends, these two concepts become more abstract and removed from reality.

[14:33] <masak> time used to be related to the movements of the sun.

[14:33] <masak> money used to be related to the physical posession of real things.

[14:33] <arnsholt> Infinoid: Calendars are as arbitrary as they are because the Earth's orbital period isn't an integer (and even the integer part of it is kinda nasty to work with)

[14:34] <mberends> so when I transcribe one algorithm, today is 2009-05-26 :P hopefully just a topy.

[14:34] <masak> nowadays, time is vibrations of atoms, and money is numbers created by banks.

[14:34] <arnsholt> masak: Just as an aside, calendars don't have to be solar. They can be lunar as well, like the Muslim and Jewish ones

[14:35] <masak> arnsholt: oh, right. and the Chinese one.

[14:35] <arnsholt> Yeah

[14:35] <masak> would be fun to base a calendar on the movements of Venus or something. :)

[14:35] <moritz_> the curious thing about time is that I haven't seen a good definition of it

[14:36] <moritz_> it seems it's one the things that are too fundamental to define (what a horror for a mathematician)

[14:36] <mberends> "it's just there to prevent everything happening simultaneously"

[14:36] <Infinoid> arnsholt: Yeah, I'm submitting a ticket for that (Earth's orbital period being non-integer)

[14:36] <masak> I always liked this Jack Handey quote: 'I wish I lived on a planet that had two suns---regular sun and "rogue" sun. That way, when somebody asked me what time it was, I'd say, "Regular time?" And they'd say, "Yeah." And I'd say, "Sorry, all I have is rogue time." It'd be fun to be a stuck-up rogue-time guy.'

[14:37] <moritz_> and how do you define "simultaneously"? "happining at the same time"?

[14:37] <mberends> together

[14:37] <moritz_> bah, recursive defintions are even more evil than eval :-)

[14:37] <masak> moritz_: pfesh, semantics. :)

[14:37] <arnsholt> No! Semantics are fun! =D

[14:38] <arnsholt> Says the linguist

[14:38] <moritz_> mberends: "together" isn't very precise

[14:38] <mberends> mumble

[14:44] <TimToady> I'm not together yet...

[14:47] <TimToady> the reason I'm opposed to .conf files for both p5 and p6 is that it leads to invisible monkey patching, as if people can modify your setting without telling you they're changing the language you start in.

[14:47] <TimToady> I'm fine with redefining the language as long as it's done declaratively.

[14:48] <TimToady> I don't even mind using a configuration file as long as the *use* of it is declared.

[14:49] <TimToady> but every Perl 6 program using CORE for the setting had better start out being the same language at the top of the file, or we're screwed before we start

[14:49] <mberends> TimToady: that's a very useful possibility

[14:49] * moritz_ still doesn't see how a module database can work reasonably without config files

[14:49] <TimToady> this is language policy, not database policy :)

[14:50] <TimToady> for a database, the configuration files *are* the declaration

[14:50] <mberends> moritz_: there would be files, including database files. all is fair if you predeclare (the files).

[14:51] <masak> let's take Rakudo as a concrete example. where would it put its module database?

[14:51] <masak> in a subdir of the Rakudo installation, or in a fixed dir on the disk somewhere?

[14:52] <moritz_> if installed, probably under /usr/lib/perl/6.0/

[14:52] <masak> for the former, the problem is that we have to have something like a RAKUDO_DIR env variable.

[14:52] <moritz_> or /usr/lib/rakudo/

[14:52] <mberends> that's implementation detail, either is allowed. Look at Samba to compare.

[14:52] <[particle]-> TimToady: that should be codified, so it's clear that modifying the setting *must* be declared and cannot happen automagically to meet the perl 6 spec

[14:52] *** justatheory joined
[14:52] <[particle]-> sorry for dangling that modifier, ETOOEARLY still

[14:52] *** mikehh_ joined
[14:53] <masak> mberends: I don't think it's that easy to dismiss as "implementation detail". underdesign might mean that bad compromises have to be struck later.

[14:53] <masak> cf proto. :)

[14:53] <TimToady> well, it's already implied by the notion that once a module is registered as official, it's immutable

[14:53] <TimToady> and you must version or auth it to change it

[14:54] *** abra left
[14:54] <[particle]-> modules are closed but classes are open?

[14:55] <[particle]-> ^^ re: immutable

[14:55] <moritz_> so basically we need a mapping from long name (including unicode short name, version and author) to file name

[14:55] <TimToady> no, what you get out of the library API is immutable; you can modify them after that with monkey patching

[14:55] <moritz_> and a mechanism to avoid that for local testing

[14:55] <TimToady> but everyone who pulls Foo out of the official library should be getting the same Foo

[14:56] <[particle]-> ok. got it. and agreed, that is implied and makes sense.

[14:56] <TimToady> (implying ver and auth in Foo)

[14:56] <masak> moritz_: yes, the mapping thing worries me somewhat.

[14:56] <masak> moritz_: it's nontrivial.

[14:56] <[particle]-> we need CPANfs

[14:56] <mberends> masak: details was not meant to be dismissive, sorry. But implementations will vary in what they need...

[14:57] <TimToady> or to put it another way, language mutation must be fully named, either with module:ver:auth or by a pedigree of lexically scoped declarations

[14:57] *** iblechbot joined
[14:58] <TimToady> what would happen to the Web if we had multiple roots to http:// that went different places?

[14:58] <[particle]-> ask china

[14:58] <TimToady> that's what mutatable configuration files would do to the languge

[14:58] <TimToady> and it's to be construed as deeply suboptimal

[14:59] <TimToady> the U is supposed to mean "universal"

[14:59] <masak> mberends: yes, naturally. I'm just implying that the details around modules aren't yet implemented enough to have been proven practical. there may well be one or two impossibilities in there that we don't notice yet. things like "we cannot have any config files or env vars, and the location of the Rakudo install is variable. d'oh!"

[14:59] <[particle]-> indeed.  this way lies madness.

[14:59] <TimToady> but essentially locales are the same kind of madness

[15:00] <masak> TimToady: the "U" used to mean "Universal". nowadays it mean "Uniform". :/

[15:00] <TimToady> you're choosing to be in an ambiguous language based on someone else's external definition

[15:00] <[particle]-> but locales are declared

[15:00] <TimToady> it's fine to use locales as long as you declare that you want to be in such an ambiguous situation

[15:01] <mberends> the predeclare config route look fruitful - some kind of 'use thisconfig' above the remaining 'use' lines.

[15:01] <TimToady> but we try not to make Perl 6 ambiguous that way except by express declaration

[15:01] <TimToady> so if you want to use locales in Perl 6, you must declare that.

[15:01] * moritz_ likes that

[15:01] <TimToady> otherwise you get flat Unicode semantics

[15:02] <TimToady> which tries to do the right thing for everyone to the extent possible without local assumptions

[15:02] *** mib_2gjite joined
[15:02] <TimToady> anyway, yes, I still feel strongly about that.  :)

[15:03] <mib_2gjite> i need help 

[15:03] <masak> mib_2gjite: with Perl 6?

[15:03] <mib_2gjite> whoz op ?

[15:03] <masak> mib_2gjite: do you have a Perl 6 question?

[15:03] *** mib_2gjite was kicked by TimToady (TimToady))
[15:03] *** mikehh left
[15:04] <masak> I think "whoz op?" will be my new greeting in #perl6. :)

[15:04] <TimToady> I think anything from mibbit is likely in need of kicking and/or banning these days

[15:04] <TimToady> I cleaned out some ban slots last night just for that purpose :)

[15:04] <masak> aww, not so sure. some of my best friends use mibbit.

[15:04] <mberends> :)

[15:05] <TimToady> yes, but I recognize the style here from the past several days

[15:05] <TimToady> haven't decided whether it's an irritating bot or non-bot

[15:06] <moritz_> we don't have to decide

[15:06] <masak> not sure the difference is essential. :)

[15:06] <moritz_> the "irritating" part is important, not the botness

[15:07] <TimToady> anyway, anyone coming in from mibbit and being semi-incoherent should be assumed to be the same person, for now

[15:07] *** MalamSAlam joined
[15:07] <TimToady> you see

[15:07] * mberends ducks

[15:07] <masak> what could a Perl 6 bot do in here to come across as pleasant, besides doing eval tasks, conversions, messages or karma?

[15:08] *** MalamSAlam left
[15:08] <moritz_> masak: being silent

[15:08] <masak> moritz_: that's an important criterion, yes. :)

[15:08] <masak> moritz_: but in terms of impressiveness...

[15:08] <moritz_> maybe hand out ops

[15:08] <masak> good one.

[15:08] <moritz_> have some lookup for project homepages

[15:08] <moritz_> (but not as annoying as purl, please)

[15:09] <masak> maybe hand out a prize every evening, based on some unknown rule.

[15:09] <masak> moritz_: not being as annoying as purl is the easy part.

[15:09] <moritz_> "the most active lurker"

[15:09] <masak> :D

[15:09] *** mhsparks left
[15:10] <masak> "most polite committer"

[15:10] *** mhsparks joined
[15:10] <masak> "happiest-sounding debater"

[15:10] *** M_o_C joined
[15:10] <masak> "most talked-to person"

[15:10] <moritz_> lowest smiley-to-quotes ratio

[15:11] <[particle]-> cutest network packet

[15:11] <masak> awwww. <3

[15:14] *** amoc left
[15:19] *** nihiliad joined
[15:20] *** donaldh left
[15:21] *** donaldh joined
[15:25] <pmichaud> good morning, #perl6

[15:26] <sbp> hey pmichaud

[15:27] <masak> whoz op, pmichaud.

[15:27] <sbp> (translation: masak is a secret mibbit user)

[15:28] <pmichaud>  /kick masak

[15:28] <masak> :P

[15:28] <pmichaud> I already read the backlog :-P

[15:28] <masak> I just wanted to know how  do u make your own chanle...

[15:30] <sbp> masak: obviously a perl6 bot should implement a game of perl6 syntax nomic

[15:30] <pmichaud> In your case, you start by writing your own IRC server in Perl 6.

[15:30] <sbp> where people compete to convolute perl6 into the most egregious areas of syntaxitude

[15:30] <TimToady> it isn't already?

[15:30] <sbp> heh, heh

[15:31] <masak> sbp: problem with programming-lang nomics is that they're so different from the original version...

[15:32] <sbp> just thought that as well as being a ripe source of entertainment, it might also have the unwanted side-effect of producing ideas that may actually be useful; sort of how Damien's Quantum Superpositions joke, which everybody thought hilarious, became junctions, which everybody thinks even more hilarious

[15:33] <sbp> *Damian

[15:33] <sbp> might not work on IRC so well given the limited space

[15:34] *** jan_ joined
[15:34] <TimToady> but I can see a line of daily recursive Setting files being installed in *PAN to define the new language of the day based on earlier ones :)

[15:35] <masak> rakudo: multi sub infix:<!+> { $^a + $^b }

[15:35] <p6eval> rakudo 106452: OUTPUT«Malformed routine definition at line 1, near "infix:<!+>"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:86)␤»

[15:35] <pmichaud> masak:  not yet... working on that now :-)

[15:35] <TimToady> take a while to compile after it's nested several thousand settings deep though...

[15:35] <masak> pmichaud: cool.

[15:36] <TimToady> I guess the new game would be called cpanic, or some such...

[15:36] <sbp> someone could make a GA for syntax evolution whose fitness function is based on how much people chuckle at the results. though I have a feeling that it'd just turn out like $insert-your-most-hated-programming-language-here

[15:37] *** register72 joined
[15:39] <jnthn> hi register72, welcome to #perl6 :-)

[15:39] <register72> hi everybody

[15:39] <register72> how may I help?

[15:39] <sbp> give us the spec for perl7

[15:39] <masak> register72: a very good question, sir!

[15:39] <mberends> finish perl6?

[15:40] <jnthn> register72 has just been asking me in private message about getting involved in Perl 6, so I suggested he joined here to get more ideas. :-)

[15:40] <masak> register72: you can help with the test suite.

[15:40] <masak> register72: or with one of the implementations. or with documentation.

[15:40] <jnthn> mberends: :-P

[15:40] <masak> register72: or you can write programs in Perl 6, dragging out bugs.

[15:40] * sbp still isn't used to people coming to tech channels askign *to* help rather than *for* help...

[15:41] <masak> jnthn: "suggested he join". an excellent time to use the subjunctive. :P

[15:41] <register72> I know that there is some development about a perl6 web framework going on right?

[15:41] * masak admires his own grammar nazi hat

[15:42] <masak> register72: yes.

[15:42] <jnthn> masak: My English not the good, sorry.

[15:42] <jnthn> masak: btw how is chanel formed?

[15:42] <masak> jnthn: *lol*

[15:42] <masak> jnthn: "chanle" :)

[15:43] <jnthn> register72: See http://github.com/masak/web/ for more on the web stuff

[15:43] <mberends> jnthn: as in Mandlebrot ;)

[15:43] <jnthn> register72: Or ask masak ;-)

[15:44] * masak looks skywards and whistles

[15:44] *** Kisu joined
[15:44] * sbp squinteth at http://feather.perl6.nl/~masak/november-smoke.html

[15:44] *** Psyche^ joined
[15:44] <masak> no, actually, questions are fine.

[15:44] <sbp> masak: how come it's showing 100% for all these?

[15:44] <sbp> and then some are marked as not ok and browned out

[15:44] <masak> sbp: those are called TODO tests.

[15:45] <sbp> more like RFEs than Bugs?

[15:45] *** Patterner left
[15:45] *** Psyche^ is now known as Patterner

[15:45] <masak> aye.

[15:45] <sbp> okay, thanks

[15:45] <masak> np.

[15:45] <masak> patches welcome. :)

[15:45] <masak> also, that smoke is against Oslo, not Bratislava or bleeding.

[15:46] <masak> (because Oslo is all that builds on feather presently)

[15:47] <sbp> =item A URI module based on RFC 3986, using Perl 6 grammars.

[15:47] <sbp> — http://github.com/masak/web/blob/d42596a457ebe15115a7ea07ae96bdc9034231a7/doc/GRANT-PROPOSAL.pod

[15:47] <sbp> masak: and IRIs?

[15:47] <register72> masak is your framework a template like system for html rendering?

[15:47] <register72> anyway

[15:47] <register72> to come back to the point

[15:47] <register72> I would like to contribute some C code

[15:47] <register72> but could be also interested in writing some general framework in perl6

[15:47] <register72> so I am open to suggestions

[15:47] <sbp> register72: do you know CGI.pm from ye olde perl5 days?

[15:48] <sbp> it's kinda meant to be a replacement of that

[15:48] <register72> yes

[15:48] <register72> ah ok

[15:48] <sbp> so yeah, some templating

[15:48] <sbp> cf. this:

[15:48] <sbp> =item A slightly more advanced XML-aware templating system, similar to

[15:48] <sbp> Python's Genshi.

[15:48] <masak> register72: it's not a template-like system, but it has one or two of those. (or "endorses" them, or whatever the relation turns out to be)

[15:48] <register72> ok

[15:48] <jnthn> register72: There's (intentionally) not that much C in Rakudo. On the other hand, if you want to help rakudo along, I'm sure there's some Parrot issues that you could work on that would directly help Rakudo.

[15:48] <jnthn> And that'd involve C.

[15:49] <register72> ok

[15:49] <jnthn> Rakudo is mostly written in Perl 6 or subsets of Perl 6, plus PIR.

[15:49] <jnthn> With just a small sprinkling of C.

[15:49] <masak> sbp: sorry, IRIs?

[15:49] <register72> jnthn could you provide me some pointers?

[15:49] <TimToady> C already has pointers

[15:49] <jnthn> register72: int *foo;

[15:50] <jnthn> char *bar;

[15:50] <jnthn> ;-)

[15:50] <register72> emh

[15:50] <register72> better initialize them

[15:50] <register72> ;)

[15:50] <register72> char* bar=NULL;

[15:50] <sbp> masak: RFC 3987. basically URIs that allow unicode in them

[15:50] <jnthn> pmichaud: Do we have anywhere a list of Parrot issues that'd really help Rakudo along?

[15:50] <sbp> for example, an actualy U+0020 space is allowed in an IRI

[15:51] <register72> int* foo=&perl6_parrot_pointers;

[15:51] <pmichaud> jnthn: we have trac tickets, but I don't know that they're organized by "helps rakudo"

[15:51] <sbp> whereas it's not allowed in a URI; you have to encode it as %20 (or some servers interpret + as a space in certain contexts; well, just query strings)

[15:51] <mberends> wouldn't Q:C{ printf "hello, world"; } be cool?

[15:51] <pmichaud> I might be able to tag them.

[15:51] <masak> sbp: a guy wrote to ihrd and me the other day, saying he'd implemented URI.pm using RFC 2396 as a basis.

[15:51] <sbp> masak: browsers are sorta flipping back and forward between IRIs and URIs these days

[15:52] <sbp> heh, poor guy

[15:52] <masak> sbp: ok. I don't know much about URIs; so far that has been ihrd++'s department.

[15:52] <masak> an unresolved question for me is how much URI handling should be built into Web.pm.

[15:53] <sbp> m'kay. I can't even find URI.pm in Web.pm

[15:53] *** eMaX left
[15:53] <jnthn> register72: If you wanted to take on something bigger that would help Rakudo but also Parrot in general, we're very much in need of a PIR-level profiler.

[15:53] <register72> ok

[15:53] <masak> sbp: no, there's no such class yet.

[15:54] <jnthn> register72: We currently don't have a good way of knowing about performance bottlenecks 'cus we just don't have the tools to tell us.

[15:54] <sbp> ah. I thought you wrote somewhere you were just incorporating November's URI.pm?

[15:54] <masak> sbp: there's a project called uri, though.

[15:54] <jnthn> Or not really easily anyway.

[15:54] <sbp> hmm, okay

[15:54] <masak> sbp: aye, that project is just November's URI.pm pulled out.

[15:54] <sbp> ah!

[15:54] <masak> (AFAIU)

[15:55] <register72> that's pretty tough

[15:55] <sbp> masak: Got Link™? having trouble finding it on the intergoogles

[15:55] <masak> sbp: hold on.

[15:56] <register72> I am not so confident that I can make it since I know pretty well how to code in C but I don't know almost nothing about parrot internals

[15:56] *** PhatEddy joined
[15:56] <register72> but I can try to have a look

[15:56] <register72> ok

[15:56] <moritz_> register72: then maybe start with smaller features, or bug fixes

[15:56] <moritz_> register72: also join #parrot on irc.perl.org

[15:56] <masak> sbp: http://github.com/ihrd/uri http://github.com/ronaldxs/uri

[15:57] <masak> second one's the one I heard about yesterday.

[15:57] <sbp> cool, thanks

[15:57] <register72> jnthn are you into parrot?

[15:57] <jnthn> register72: A ticket that directly affect Rakudo: https://trac.parrot.org/parrot/ticket/536

[15:57] <jnthn> register72: yeah, as "jonathan" there

[16:00] <PhatEddy> Yesterday jnthn was having trouble with "make t/spec/sometest" under windows - if it involved mingw32-make I may have a fix

[16:01] <PhatEddy> If one replaces "t\\*.t t\\*\\*.t t\\*\\*\\*.t: all Test.pir" with "$(shell $(PERL) -e "print join(' ', (<t\\*.t>, <t\\*\\*.t>, <t\\*\\*\\*.t>))"): all Test.pir" (more)

[16:01] *** mikehh_ is now known as mikehh

[16:01] <PhatEddy> it seems a bit ugly to me but it seems to work

[16:01] <jnthn> register72: Also this one is a real pain for Rakudo - we could pass more tests with this fixed: https://trac.parrot.org/parrot/ticket/24

[16:02] <PhatEddy> any interest in a patch like this?

[16:02] <register72> jnthn: saw the ticket and I see also that parrot has a "trace" core. "Tracing" has some  connection with profiling so I guess that know I have some material 

[16:02] <jnthn> register72: Yes, that'd be a place to start looking.

[16:03] <register72> thanks guys

[16:03] <sbp> hmm. URI ~ URI could join the two URIs according to normal resolution, and URI ~ Str could just bung the string onto the end of the URI, utf-8 and %HH encoded...

[16:03] <jnthn> register72: A profiling runcore sounds like an interesting idea.

[16:03] <masak> sbp: in other words, you want operator overloading too :)

[16:04] <[particle]-> PhatEddy: did you try that with msvc? i don't think $(shell ...) will do anything useful in cmd/nmake

[16:04] <sbp> YES!!@

[16:04] <sbp> heh

[16:04] <masak> sbp: coming soon, accoring to pmichaud.

[16:04] <jnthn> register72: chromatic who is on #parrot now and then was talking about refactoring runcores a bit to make things more pluggable as something to help with implementing another runcore for profiling too.

[16:04] <masak> sbp: by the way, what do you mean by "join the two URIs according to normal resolution"?

[16:04] <register72> ok

[16:04] <jnthn> Anyway, if you want to look into any of the issues I've mentioned, that'd be awesome. :-)

[16:05] <sbp> masak: so joining http://example.org/test/ and ../filename gives http://example.org/filename

[16:05] <sbp> and *not* http://example.org/test/../filename

[16:05] <sbp> standard uri join

[16:05] <masak> sbp: that's quite a nice idea.

[16:06] *** mizioumt joined
[16:06] <PhatEddy> [particle]-: sorry I don't work with msvc.  I just got it to work with mingw32-make ... but the make program should be identifiable in the configuration/Configure.pl ...

[16:06] * jnthn away for a bit

[16:06] <masak> sbp: I was going to object that that isn't close enough to real concatenation, but I think I like it, so... :)

[16:06] <[particle]-> PhatEddy: ok, well i'm a bit distracted (on phone) so i may be missing something and you may be spot on

[16:07] <sbp> masak: it can chain like concatenation too because a ~ b ~ c just means join(join(a, b), c)

[16:08] <masak> sbp: aye, that's quite nice.

[16:08] <sbp> the head of the chain would have to be absolute though, I think (a URI with a ':' in it)

[16:08] <sbp> can't remember the rules precisely

[16:08] <masak> sbp: I was going to say something like that.

[16:09] <PerlJam> sbp: is using .. in that manner part of the URI/URL spec?

[16:10] <PhatEddy> [particle]-: bbiab - and hopefully you'll be less distracted.  I do have nmake and will try to experiment with that as well ..

[16:10] <sbp> PerlJam: yeah

[16:10] *** register72 left
[16:10] <sbp> § 5 in RFC RFC 3986

[16:10] *** ejs joined
[16:10] <PerlJam> sbp: thanks

[16:11] <sbp> (spot the point where I had to look up the number and forgot what I'd typed already)

[16:11] <moritz_> maybe my IRC logs should recognize RFC 3986 and turn it into a link... 

[16:13] <sbp> masak: actually, despite what you've put in GRANT-PROPOSAL.pod, I guess it does make sense for URI.pm to be separate, because an HTTP client library is bound to want to use it, but isn't going to want to use anything else in Web.pm really

[16:13] <sbp> it's one of the few shared aspects between the client and server architectures I suppose

[16:14] <moritz_> ah, be careful here... a HTTP server that automatically transforms /foo/../ into / could be very dangerous ;-)

[16:14] <moritz_> that aside, I agree

[16:17] <masak> sbp: indeed.

[16:17] <masak> sbp: and Web.pm is HTTP-engine-agnostic.

[16:22] *** REPLeffect left
[16:23] <sbp> what's the perl6 state of the art for HTTP client side operations?

[16:23] <moritz_> nothingmuch, I fear

[16:24] <moritz_> there was a basic LWP::Simple implementation at a hackathon (or so I've been told), but the code was never published

[16:24] <moritz_> rakudo: say "\r".ord

[16:24] <p6eval> rakudo 106452: OUTPUT«13␤»

[16:24] <sbp> thanks

[16:26] *** kane__ joined
[16:31] *** nbrown_ joined
[16:34] <masak> interesting PerlMonks thread from the past about the Perl 6 future: http://www.perlmonks.org/?node_id=404127

[16:35] <ruoso> pmichaud, were you able to take a look at the problem I mentioned yesterday?

[16:35] <Tene> sbp: I can give you something tonight if you want.

[16:35] <masak> Tene++

[16:36] <PerlJam> masak: unfortunately perl 6 won't be out in 2012  ;)

[16:36] <moritz_> not "out", but "in" (use)

[16:36] <Tene> masak: web.pm *should* be http engine agnostic, but now isn't

[16:37] <masak> Tene: well, it's more like we're using it wrong right now.

[16:37] <masak> HTTP::Daemon shouldn't really be a part of Web.pm

[16:37] <masak> just the middleware to accommodate it.

[16:38] <Tene> exactly

[16:38] *** eMaX joined
[16:38] <masak> PerlJam: you're probably right, but I've realized I don't care about the "out" property of Perl 6, so...

[16:38] <PerlJam> yeah, as long as it's useful (and it is now)

[16:39] <masak> Tene: I promise to remedy that before the situation grows too silly.

[16:39] <PerlJam> (rakudo is anyway :-)

[16:39] <masak> and Pugs too, to some degree.

[16:39] <sbp> Tene: oh, cool

[16:39] <ruoso> rakudo: class Foo { method bar($a) { say $a }; method foo { $.bar('ok') } }; Foo.new.foo;

[16:39] <sbp> Tene: I was kinda thinking about various things connected with it

[16:39] <p6eval> rakudo 106452: OUTPUT«too few arguments passed (1) - 2 params expected␤current instr.: 'parrot;Foo;bar' pc 136 (EVAL_21:74)␤»

[16:39] <PerlJam> pugs is too frozen in time to be useful enough

[16:39] <ruoso> is that a known bug?

[16:39] <sbp> Tene: a) using such a thing, b) checking such a thing does encoding right, c) checking that the general architecture is sound

[16:40] <sbp> especially encoding, because it's always tricky

[16:40] <moritz_> ruoso: the $.method abbreviatioin doesn't always work in rakudo

[16:40] <masak> ruoso: wtf?

[16:40] * masak submits rakudobug

[16:40] <moritz_> ruoso: but self.method should work

[16:40] <ruoso> it does...

[16:40] <ruoso> I was just wondering if that was already a known issue

[16:41] <moritz_> known to me and pmichaud, at least ;-)

[16:41] *** [1]nbrown joined
[16:41] <pmichaud> it's a known issue.

[16:41] <moritz_> dunno if known to RT

[16:41] <pmichaud> there's even a ticket for it.

[16:41] *** cognominal left
[16:41] <moritz_> ok

[16:41] * masak suspects it's in RT...

[16:41] <ruoso> hi pmichaud

[16:42] <pmichaud> RT #61988

[16:43] * masak hits the undo button

[16:43] <Tene> sbp: Yes, I am encoding-stupid... would love help getting it right in http stuff I'm working on.

[16:44] * masak is encoding-stupid too, but on the learning curve

[16:44] *** cognominal joined
[16:44] * moritz_ is pretty encoding-aware

[16:44] <skids> rakudo: my $a; my sub b { return { "OH HAI".say } }; $a = b(); $a.perl.say; $a();

[16:44] <p6eval> rakudo 106452: OUTPUT«{ ... }␤OH HAI␤»

[16:45] <skids> rakudo: my $a; my sub b { { "OH HAI".say } }; $a = b(); $a.perl.say; $a();

[16:45] <p6eval> rakudo 106452: OUTPUT«OH HAI␤1␤invoke() not implemented in class 'Integer'␤current instr.: '_block14' pc 122 (EVAL_20:61)␤»

[16:45] <skids> rakudo: my $a; my sub b { { $^f; "OH HAI".say } }; $a = b(); $a.perl.say; $a();

[16:45] <p6eval> rakudo 106452: OUTPUT«too few arguments passed (0) - 1 params expected␤current instr.: '_block27' pc 291 (EVAL_20:122)␤»

[16:45] <skids> rakudo: my $a; my sub b { { $^f; "OH HAI".say } }; $a = b(); $a.perl.say; $a(1);

[16:45] *** masak left
[16:45] <p6eval> rakudo 106452: OUTPUT«too few arguments passed (0) - 1 params expected␤current instr.: '_block27' pc 298 (EVAL_20:124)␤»

[16:45] <skids> rakudo: my $a; my sub b { return { $^f; "OH HAI".say } }; $a = b(); $a.perl.say; $a(1);

[16:45] <p6eval> rakudo 106452: OUTPUT«{ ... }␤OH HAI␤»

[16:45] <pmichaud> skids:  note that your nested block is an immediate block

[16:46] <moritz_> rakudo++ # getting all of tese right so far

[16:46] <skids> If it is an immediate block, then is the code in S04 lift wrong?

[16:46] <pmichaud> checking

[16:46] <pmichaud> no, those are pointy subs

[16:47] <pmichaud> (or pointy blocks)

[16:47] <pmichaud> so they aren't immediate

[16:47] <skids> rakudo: my $a; my sub b { -> $f { $^f; "OH HAI".say } }; $a = b(); $a.perl.say; $a(1);

[16:47] <pmichaud> rakudo:  my $a; my sub b { -> { "OH HAI".say } }; $a = b(); $a.perl.say; $a();

[16:47] <p6eval> rakudo 106452: OUTPUT«Cannot use placeholder var in block with signature. at line 1, near "; \"OH HAI\""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:86)␤»

[16:47] <p6eval> rakudo 106452: OUTPUT«{ ... }␤OH HAI␤»

[16:47] <pmichaud> rakudo++

[16:48] <skids> rakudo: my $a; my sub b { -> $f { $f; "OH HAI".say } }; $a = b(); $a.perl.say; $a(1);

[16:48] <p6eval> rakudo 106452: OUTPUT«{ ... }␤OH HAI␤»

[16:48] <skids> OK, good then.

[16:48] <skids> Though that's probably going to end up being a FAQ.

[16:48] *** nbrown left
[16:48] *** [1]nbrown is now known as nbrown

[16:50] <ruoso> skids, what was the behavior you expected?

[16:50] *** cdarroch joined
[16:50] <moritz_> there can be no language with a FAQ

[16:50] <moritz_> if there were one, people would ask "why isn't there a FAQ?", which would be a FAQ

[16:50] <moritz_> (proof by contradiction)++

[16:51] <skids> My mind was open :-)  I just hadn't remembered reading anything about pointies not being immediate.

[16:51] <pmichaud> iirc, only bare blocks can be immediate

[16:51] <Tene> moritz_: but would they ask it *frequentlyz?

[16:51] <skids> Even if there's a topic?

[16:52] <ruoso> yes... bare blocks have a .() implied

[16:52] <moritz_> Tene: sufficiently frequently to qualify as FAQ (compared to all other questions, at least ;-)

[16:52] <ruoso> rakudo: sub foo { { say 'hello' } }; foo();

[16:52] <p6eval> rakudo 106452: OUTPUT«hello␤»

[16:53] <moritz_> without it much of the test suite wouldn't work

[16:53] <ruoso> rakudo: sub foo { { say 'hello' }.() }; foo(); # this would be the implied call\

[16:53] <p6eval> rakudo 106452: OUTPUT«hello␤»

[16:53] <skids> It's probably the most FAQ-free behavior, mind you (makes sense)

[16:54] <ruoso> skids, it only looks weird while it is in a single line

[16:54] <ruoso> if you put it into a long file

[16:54] *** nbrown_ left
[16:54] <ruoso> the other way around would be a FAQ

[16:54] <skids> Though maybe the placeholder case might be a bit iffy.

[16:54] *** cognominal left
[16:55] <ruoso> on the other hand....

[16:55] <skids> (non pointy with placeholders)

[16:55] <ruoso> I'm not sure a block that is being returned is really "bare"

[16:55] <skids> note the return case worked as a closure, just the fall-off-end didn't.

[16:55] <ruoso> rakudo: sub foo { { say 'hello' } }; my $a = foo;  say 1; $a.(); say 2;

[16:56] <p6eval> rakudo 106452: OUTPUT«hello␤1␤invoke() not implemented in class 'Integer'␤current instr.: '_block14' pc 103 (EVAL_22:57)␤»

[16:56] <ruoso> it's important to realize that "for" has this same semantics applied

[16:56] <ruoso> a 'bare for' is executed immediatly

[16:56] <ruoso> but a 'for' being used as the return of a sub, even if implicit, is lazy...

[16:56] *** REPLeffect joined
[16:57] * [particle]- has spectest failures with msvc

[16:57] <skids> And to make things more confusing, there's the caveat about for returning a value :-)

[16:57] <skids> (which newbies won't expect)

[16:57] <TimToady> sub postfix:< km>($n) { }; 4 km;

[16:58] <TimToady> std: sub postfix:< km>($n) { }; 4 km;

[16:58] <ruoso> TimToady, is a block that is being implicitly returned in a sub considered a 'bare block'?

[16:58] <p6eval> std 26817: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/iQg9PIMmJw line 1:␤------> [32msub postfix:< km>($n) { }; 4 [31mkm;[0m␤    expecting any of:␤ infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤FAILED 00:04

[16:58] <p6eval> ..44m␤»

[16:58] <skids> sub foo { { say $^d ~ 'hello' } }; my $a = foo;  say 1; $a.(1); say 2;

[16:58] <TimToady> std: sub postfix:[' km']($n) { }; 4 km;

[16:58] <p6eval> std 26817: OUTPUT«ok 00:03 44m␤»

[16:58] <TimToady> that's better

[16:58] <skids> rakudo: sub foo { { say $^d ~ 'hello' } }; my $a = foo;  say 1; $a.(1); say 2;

[16:58] <p6eval> rakudo 106452: OUTPUT«too few arguments passed (0) - 1 params expected␤current instr.: '_block26' pc 296 (EVAL_22:123)␤»

[16:58] <skids> ...that's the only case that's iffy in my mind but could go either way.

[16:59] <TimToady> ruoso: you can't implicitly return a block

[16:59] <ruoso> you can implicitly return a closure

[16:59] <[particle]-> what happens to placeholders in a bare block? warning?

[16:59] <[particle]-> use values from outer scope?

[16:59] <TimToady> a bare block as the last statement will not be taken as a return value

[17:00] *** riffraff joined
[17:00] <ruoso> TimToady, isn't it a bit inconsistent with the way 'for' is handled?

[17:01] <TimToady> S04: 560

[17:02] *** mhsparks left
[17:02] <TimToady> people's expectations of bare blocks are inconsistent

[17:02] * sbp gets confused by "Yes, Byte is both a string and a number." in S29:95; Byte derives from AnyChar, which derives from Str... so it's also deriving from Num?

[17:02] <moritz_> "a".sqrt

[17:03] <sbp> rakudo: "a".sqrt

[17:03] <p6eval> rakudo 106452:  ( no output )

[17:03] <sbp> rakudo: say "a".sqrt

[17:03] <p6eval> rakudo 106452: OUTPUT«0␤»

[17:03] <Infinoid> rakudo: say "a"+1

[17:03] <p6eval> rakudo 106452: OUTPUT«1␤»

[17:03] <sbp> rakudo: say "a".ord.sqrt

[17:03] <p6eval> rakudo 106452: OUTPUT«9.8488578017961␤»

[17:04] <skids> sbp: "a" isn't a byte, though.

[17:04] <sbp> nope. and "a".ord is just a Num, not a Str

[17:04] <ruoso> rakudo: say 'a' ~~ AnyChar

[17:04] <p6eval> rakudo 106452: OUTPUT«Could not find non-existent sub AnyChar␤current instr.: '_block14' pc 59 (EVAL_17:47)␤»

[17:05] <ruoso> sbp, rakudo doesn't seem to implement that part of the spec yet

[17:05] <ruoso> pugs: say 'a' ~~ AnyChar

[17:05] <p6eval> pugs: OUTPUT«*** No such subroutine: "&AnyChar"␤    at /tmp/3XjdvyREaC line 1, column 5 - line 2, column 1␤»

[17:05] <ruoso> nor does pug

[17:05] *** cognominal joined
[17:08] *** eMaX left
[17:09] * sbp finds the C<open> implementation in rakudo/src/builtins/io.pir

[17:09] <sbp> couldn't find anything about encoding of files in the Synopses

[17:09] <sbp> and the only thing I found about encoding in general was in http://rakudo.org/2009/01/perl-6-design-minutes-for-31-d.html which seems to indicate that encoding and decoding within I/O operations hasn't really been thought about yet?

[17:11] <skids> so basically rakudo has everything right functionally but the placeholder bare block should be a syntax error not a dispatch error, and could be more specific.

[17:11] <jnthn> [particle]-: (fails in msvc) I get a handful too.

[17:11] <jnthn> 4ish.

[17:11] <[particle]-> 2 in S02-magicals/env.t

[17:11] <jnthn> (2 about numeric stuff, one weird, one slice.t segv that is know)

[17:11] <[particle]-> and the slice.t segv.

[17:11] <jnthn> [particle]-: Oh, I thought I pushed a patch yesterday to fix env.t

[17:12] <jnthn> Yeah, slice.t segv I investigated a bit and wrote a ticket about.

[17:12] <[particle]-> i recall that segv. env.t surprised me a bit

[17:12] <jnthn> It's almost certainly GC related.

[17:12] <jnthn> (the segv, not env.t)

[17:12] <TimToady> ruoso: and I wouldn't describe for as caring about its context in that sense.  It's only that void context happens to be considered eager.

[17:12] <[particle]-> yep

[17:14] <pmichaud> skids:  (placeholder bare block as syntax error)  -- I'm not sure it's a syntax error.  It _might_ be a semantic error, or it could be that placeholder blocks should not be treated as immediate blocks.

[17:14] <TimToady> though perhaps void must be considered strictly eager, or "for 1..*" won't work

[17:15] <dalek> rakudo: cf98479 | pmichaud++ | docs/spectest-progress.csv:

[17:15] <dalek> rakudo: spectest-progress.csv update: 388 files, 11257 passing, 0 failing

[17:15] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/cf98479eeebb2176267698eb1589e511abcc92e0

[17:15] *** payload joined
[17:16] <TimToady> I suspect a placeholder block should be supported as "non-bare" but disrecommended as devious

[17:17] <pmichaud> how much disrecommended?  Generate a warning?  ;-)

[17:17] <pmichaud> "Devious use of placeholder block at ..."

[17:17] <TimToady> I'm thinking of posting the culprit's name in the town square, more like...

[17:17] <sbp> hmm. p6eval gives me 13025 (i.e. 0x32E1) for "\c[CIRCLED KATAKANA TU]".ord, which is right, but when I read a file from disc with an actual "\c[CIRCLED KATAKANA TU]\n" line in it and then ord what it read, it gives me 227, which is the first byte of CIRCLED KATAKANA TU utf-8 encoded...

[17:18] <sbp> so it seems it's just reading bytes and converting them to codepoints...

[17:19] <sbp> and it also seems to do the same the other way round, so "say" just bungs out the unicode characters as bytes (which means you can see the character fine if your locale settings are set to UTF-8)

[17:20] <moritz_> so there's a decoding step missing on reading.

[17:20] <pmichaud> sbp: You're correct that rakudo doesn't impose any encoding semantics on things read from files yet.

[17:20] <TimToady> I absolve in advance anyone who breaks rakudo to fix this :)

[17:20] <TimToady> or parrot :)

[17:21] <pmichaud> TimToady: The "fix" is that files should assume utf8 ?

[17:21] <TimToady> files are assumed to be "text", and that means Unicode

[17:21] * pmichaud works for absolution.

[17:21] <pmichaud> No problem.

[17:21] <pmichaud> That's easily fixed.  :-)

[17:23] *** eMaX joined
[17:23] <sbp> rakudo: say "\c[CIRCLED KATAKANA TU]\n".chars();

[17:23] <p6eval> rakudo cf9847: OUTPUT«2␤»

[17:23] <TimToady> files that aren't text should generally have their own open-like methods anyway

[17:23] <sbp> rakudo: say "\c[CIRCLED KATAKANA TU]\n".bytes();

[17:23] <pmichaud> Seems reasonable.

[17:23] <p6eval> rakudo cf9847: OUTPUT«Method 'bytes' not found for invocant of class 'Str'␤current instr.: 'parrot;P6metaclass;dispatch' pc 252042 (src/gen_actions.pir:0)␤»

[17:24] <sbp> sorry if I'm being thick, but what does it mean for a file to be text/Unicode?

[17:24] <sbp> all files are sequences of bytes, which means that there must be a decoding stage to interpret them correctly as Unicode, i.e. as sequences of Unicode characters

[17:24] <TimToady> one of UTF-8, UTF-16LE, UTF-16BE, UTF-32LE, or UTF-32BE

[17:24] <sbp> aha, thanks

[17:25] <sbp> hmm, I like the idea of referring to files encoded in any of those encodings as text files

[17:25] <pmichaud> for the time being, Rakudo will assume utf8.  I'm not sure Parrot supports any of those other encodings yet.

[17:26] <TimToady> with a bias towards UTF-8, but if there are nulls, intuiting one of the others is okay, I think

[17:26] <TimToady> since I hate BOMs with a passion

[17:26] <TimToady> (but recognize BOMs too, of course)

[17:26] <ruoso> rakudo: my @a = (/ a /, / b /, / c /); my @b = map -> &rx { token { <rx> u } }, @a; my &subrx = sub ($/) { for @b -> &eachrx { my $match = Match.new($/); my $result = eachrx($match); if $result {return $result;}; }; return Match.new($/);  }; say 'au' ~~ token { <subrx> }; say 'bu' ~~ token { <subrx> }; say 'cu' ~~ token { <subrx> }

[17:26] <p6eval> rakudo cf9847: OUTPUT«␤␤cu␤»

[17:27] <ruoso> pmichaud, that's the problem I'm facing... maybe it can be narrowed down a bit more...

[17:27] <sbp> moritz_: Str.bytes is mentioned in your Perl6-Str-0.0.3/lib/Perl6/Str.pm but doesn't seem to be implemented in rakudo yet (see test above). what's the status with that?

[17:28] *** jan_ left
[17:32] *** jan___ joined
[17:32] <pmichaud> rakudo:  rx()

[17:32] <p6eval> rakudo cf9847: OUTPUT«Could not find non-existent sub rx␤current instr.: '_block14' pc 53 (EVAL_17:43)␤»

[17:33] <ruoso> pmichaud, note the signature

[17:33] *** Kisu left
[17:33] <pmichaud> rakudo: my @a = /a/, /b/, /c/; my @b = map -> &rx { token { <rx> u } }, @a;   for @b { .WHICH.say }

[17:33] <p6eval> rakudo cf9847: OUTPUT«146001524␤146001524␤146001524␤»

[17:34] <ruoso> hah

[17:34] <ruoso> there it is

[17:34] <pmichaud> well, maybe.

[17:34] <pmichaud> there are some odd things that happen with subs in rakudo.

[17:34] <pmichaud> that might cause them to report odd .WHICH values

[17:35] <ruoso> the actual problem is consistent with the WHICH behavior

[17:35] <pmichaud> agreed.

[17:35] <pmichaud> I wonder if the token isn't being cloned properly.

[17:36] <pmichaud> rakudo:  my @a = 1, 2, 3;   my @b = map -> $rx { sub { $rx.say } }, @a;   for @b { $_(); }

[17:36] <p6eval> rakudo cf9847: OUTPUT«3␤3␤3␤»

[17:36] <ruoso> hmm... now that was unexpected

[17:38] <pmichaud> rakudo:  my @a = 1, 2, 3;   my @b = map -> $rx { $rx }, @a;   for @b { $_.say; }

[17:38] <p6eval> rakudo cf9847: OUTPUT«1␤2␤3␤»

[17:38] <TimToady> I suspect we could also recognize SCSU and BOKU compressions of unicode when indicated by BOM

[17:38] <ruoso> pmichaud, ok... now *that*'s just weird

[17:39] <pmichaud> why is that?

[17:39] <ruoso> ah

[17:39] <ruoso> sorry...

[17:39] <ruoso> I thought there was a closure there also

[17:39] <pmichaud> the problem comes down to something similar with the given/take one we've described earlier

[17:39] <ruoso>  rakudo:  my @a = 1, 2, 3;   my @b = map -> $rx { my $a = $rx; sub { $a.say } }, @a;   for @b { $_(); 

[17:40] <p6eval> rakudo cf9847: OUTPUT«Unable to parse block; couldn't find final '}' at line 1, near ""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:86)␤»

[17:40] <pmichaud> sorry, gather/take

[17:40] <ruoso>  rakudo:  my @a = 1, 2, 3;   my @b = map -> $rx { my $a = $rx; sub { $a.say } }, @a;   for @b { $_(); }

[17:40] <p6eval> rakudo cf9847: OUTPUT«3␤3␤3␤»

[17:40] <pmichaud> as far as map is concerned, the sub { ... } that is returned is the same sub each time

[17:40] <pmichaud> there's nothing there to indicate that it should be cloned

[17:40] <ruoso>  rakudo:  my @a = 1, 2, 3;   my @b = map -> $rx { my $a = $rx; my $b = sub { $a.say }; say $b.WHICH; $b }, @a;   for @b { $_(); }

[17:40] <p6eval> rakudo cf9847: OUTPUT«146329000␤146329000␤146329000␤1␤2␤3␤»

[17:41] <pmichaud> yes, we can force a cloning

[17:41] <ruoso> uh?

[17:41] <pmichaud> rakudo:  my @a = 1, 2, 3;   my @b = map -> $rx { my $b = sub { $rx.say }; $b }, @a;   for @b { $_(); }

[17:42] <p6eval> rakudo cf9847: OUTPUT«1␤2␤3␤»

[17:42] <pmichaud> compare with

[17:42] <pmichaud> rakudo:  my @a = 1, 2, 3;   my @b = map -> $rx { sub { $rx.say }; }, @a;   for @b { $_(); }

[17:42] <p6eval> rakudo cf9847: OUTPUT«3␤3␤3␤»

[17:42] <pmichaud> so, going back to the original

[17:42] <ruoso> pmichaud, the fact it is a closure means it needs to be cloned

[17:43] <pmichaud> ruoso: in the general case, if I do      return $x      does $x get cloned?

[17:43] <pmichaud> currently no -- it gets placed into a capture

[17:44] <pmichaud> and then it's "cloned" upon assignment to something else

[17:44] <ruoso> but the closures are different in each iteration

[17:44] <ruoso> by definition

[17:44] <ruoso> they have a different lexical scope as their outer scope

[17:44] <ruoso> rakudo: my @a = (/ a /, / b /, / c /); my @b = map -> &rx { my $t = token { <rx> u }; $t }, @a; my &subrx = sub ($/) { for @b -> &eachrx { my $match = Match.new($/); my $result = eachrx($match); if $result {return $result;}; }; return Match.new($/);  }; say 'au' ~~ token { <subrx> }; say 'bu' ~~ token { <subrx> }; say 'cu' ~~ token { <subrx> }

[17:44] <p6eval> rakudo cf9847: OUTPUT«au␤bu␤cu␤»

[17:45] <ruoso> cool

[17:45] <ruoso> workaround++

[17:45] <pmichaud> ruoso: so, you're saying that    return { ... }    should always force a clone, while   return $some_other_value;   shouldn't.

[17:46] <ruoso> no... when you declare a closure, it is specific to that moment

[17:46] <ruoso> it should be cloned *before* being used in that block

[17:46] <TimToady> in theory {...} is always cloned, but sometimes you can optimize it away

[17:46] <pmichaud> Yes, I'm thinking we just mis-optimize it at the moment.

[17:48] *** eternaleye left
[17:48] *** payload left
[17:53] <pmichaud> okay, I think I've found the closure bug.  I suspect I'll try to fix it and the outer lexicals issue in PGE

[17:53] <pmichaud> (the one that currently requires use to use 'token' instead of 'regex')

[17:54] <pmichaud> s/use/us/

[17:54] <pmichaud> spectesting the utf8 IO stuff

[17:56] *** icwiener joined
[17:58] <ruoso> YAY! Faz' Yarn version works!

[17:59] <pmichaud> lunchtime.

[18:00] *** ejs left
[18:07] *** icwiener_ joined
[18:11] *** eMaX left
[18:12] *** NoirSoldats_ joined
[18:12] *** NoirSoldats left
[18:19] *** Kisu joined
[18:20] *** hercynium joined
[18:20] *** ejs joined
[18:23] *** icwiener left
[18:41] *** hercynium left
[18:42] *** eMaX joined
[18:51] *** M_o_C left
[19:01] <dalek> rakudo: 3f8ff62 | pmichaud++ | src/builtins/io.pir:

[19:01] <dalek> rakudo: Default file I/O to utf8 encoding.

[19:01] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/3f8ff6258e1e6a9a8d3b6c66a7a4d667c85e6bea

[19:01] <dalek> rakudo: 7b56f00 | pmichaud++ | :

[19:01] <dalek> rakudo: Merge branch 'master' of [email@hidden.address]
[19:01] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7b56f00fbbd3ac7cab98c20429051e7cfd2785ca

[19:03] *** nihiliad left
[19:06] *** nihiliad joined
[19:07] *** nihiliad left
[19:11] *** ejs left
[19:13] *** nihiliad joined
[19:17] *** obra joined
[19:18] *** alester left
[19:19] *** ejs joined
[19:20] *** donaldh left
[19:20] *** donaldh joined
[19:22] *** pmurias joined
[19:31] *** alester joined
[19:37] <pmurias> ruoso: hi

[19:38] <pugs_svn> r26818 | pmurias++ | [re-mildew] pushed method signatures in the right direction -

[19:38] <pugs_svn> r26818 | pmurias++ | t/capture_expansion.t passes

[19:38] *** obra left
[19:40] <pugs_svn> r26819 | pmurias++ | [re-mildew] fixed test

[19:44] <moritz_> rakudo: module Foo { say (1,2,3).map: { $_ } }

[19:44] <p6eval> rakudo 7b56f0: OUTPUT«Parameter type check failed; expected something matching  but got something of type Code() for expr in call to map␤current instr.: 'die' pc 17050 (src/builtins/control.pir:225)␤»

[19:51] *** ruoso left
[19:52] <jnthn> rakudo: say (1,2,3).map: { $_ }

[19:52] <p6eval> rakudo 7b56f0: OUTPUT«123␤»

[19:53] <jnthn> rakudo: module Foo { say (1,2,3).WHAT }

[19:53] <p6eval> rakudo 7b56f0: OUTPUT«List()␤»

[19:53] *** riffraff left
[19:54] <jnthn> rakudo: module Foo { say { $_ }.WHAT }

[19:54] <p6eval> rakudo 7b56f0: OUTPUT«Code()␤»

[19:54] <jnthn> rakudo: say { $_ }.WHAT

[19:54] <p6eval> rakudo 7b56f0: OUTPUT«Block()␤»

[19:54] <jnthn> ah ffs

[19:54] <jnthn> that's why

[19:55] *** nbrown left
[19:57] <pugs_svn> r26820 | moritz++ | [t/spec] tests for map inside modules

[19:59] <moritz_> rakudo: say Block ~~ Code

[19:59] <p6eval> rakudo 7b56f0: OUTPUT«1␤»

[19:59] <jnthn> moritz_: yeah, it's not quite that straightforward. :-)

[20:08] *** nihiliad left
[20:11] *** nihiliad joined
[20:14] *** jhorwitz joined
[20:19] *** anon1254 joined
[20:20] *** mizioumt1 joined
[20:20] *** anon1254 left
[20:22] *** clintongormley left
[20:26] *** PacoLinux left
[20:27] *** PacoLinux joined
[20:31] *** icwiener-_- joined
[20:31] *** icwiener-_- is now known as icwiener

[20:34] *** dduncan joined
[20:34] *** dduncan left
[20:37] *** mizioumt2 joined
[20:39] *** mizioumt left
[20:47] *** icwiener_ left
[20:53] *** NoirSoldats joined
[20:55] *** mizioumt1 left
[20:55] *** NoirSoldats_ left
[20:55] *** jhorwitz left
[21:04] <pugs_svn> r26821 | moritz++ | [t/spec] RT #62730

[21:08] *** DemoPhreak is now known as DemoFreak

[21:11] *** pmurias left
[21:14] *** skids left
[21:23] *** amoc joined
[21:25] *** mizioumt2 left
[21:26] <moritz_> rakudo: my @a := 1; say @a.WHAT

[21:26] <p6eval> rakudo 7b56f0: OUTPUT«Int()␤»

[21:33] *** icwiener left
[21:36] *** mberends left
[21:39] *** masak joined
[21:39] <masak> oh hai, kittehs.

[21:40] <masak> whoz op?

[21:41] <moritz_> how to mkae now chanle???

[21:41] <masak> :)

[21:41] *** ejs left
[21:42] <masak> I just blogged about w7 of Web.pm: http://use.perl.org/~masak/journal/38973

[21:43] <masak> (I hope I didn't forget anything, there was so much happening this week)

[21:44] <PerlJam> masak: do you do the preambles by hand or is there some place you get them from?

[21:44] <masak> PerlJam: http://www.lolcatbible.com/index.php?title=Matthew_5

[21:45] <masak> PerlJam: crazy, huh? :)

[21:45] <PerlJam> indeed.

[21:45] * moritz_ wonders if shlomi finds those offensive ;-)

[21:45] <PerlJam> heh

[21:46] <masak> they translations are not always tasteful, but I try to filter out the interesting bits.

[21:46] <masak> s/y//

[21:46] <iluvs2pac> hi how iz compiler formed?

[21:46] <iluvs2pac> how world get prel6?

[21:46] <masak> iluvs2pac: a Perl 6 compiler?

[21:47] <masak> I think we've just sunk to a new low. :)

[21:47] <jnthn> Delighted to be a part of it. :)

[21:47] <jnthn> Will Rakudo Day on Friday.

[21:47] <moritz_> ;-)

[21:47] <masak> not that I'm complaining. I love the contrast between exquisite parser discussions and lolspeak.

[21:47] <masak> jnthn: \o/

[21:48] <jnthn> Not had Rakudo time today - dealing with $other_stuff.

[21:48] <jnthn> But hopefully get back to working on other stuffs tomorrow.

[21:49] <masak> I haven't backlogged yet -- any news on those operator overlords?

[21:49] <jnthn> pmichaud is our operator overlord ;-)

[21:49] <moritz_> masak: no

[21:49] <jnthn> masak: not seen any news though

[21:49] <masak> ok.

[21:50] * masak sits tight

[21:50] * moritz_ wonders about implementing infix:<ff>

[21:50] <jnthn> I suspect other distraction (like, the one involving grammar.pg and Latin-1) haven't helped...

[21:50] <pmichaud> I'm about this  >  <  close to having operator definitions in Perl 6.

[21:50] <jnthn> moritz_: I'd wondered about that too.

[21:50] <moritz_> things is, that operator needs state internally

[21:50] <masak> aye.

[21:50] <pmichaud> I've already gotten it to parse   &infix:<+> and the like.

[21:50] <jnthn> pmichaud: The angles go the other direction. ;-)

[21:50] <moritz_> and it needs to have that state separately for each source code locations it appears in

[21:51] <pmichaud> jnthn: when the angles swap sides, then it'll be done :-)

[21:51] <jnthn> pmichaud: Really happy you got it parsing that bit at least. :-)

[21:51] <moritz_> I don't see a way to declare such a thing in Perl 6

[21:51] <pmichaud> yes.  Right now I'm just figuring out how to add things to the optable.

[21:51] <jnthn> moritz_: Global is a bit ugly too.

[21:52] <jnthn> moritz_: Consider for 1..$big_number { eval('1 ff 2') }

[21:52] <masak> moritz_: it feels like it should have something to do with closures, just like that canonical incrementer example.

[21:53] <jnthn> masak: It can be attached to the current block but we need to be damm sure we clone it along with the current block.

[21:53] <moritz_> jnthn: global won't work either, unless infix:<ff> know its caller's source location (including column information)

[21:53] <jnthn> moritz_: True. I think it maybe wants to hang off the enclosing block.

[21:53] <meppl> good night

[21:53] <moritz_> jnthn: I don't understand what that means

[21:53] <masak> jnthn: you just tipped me off to another evil way to break Rakudo when the time comes. :)

[21:54] <masak> meppl: 'night.

[21:54] <jnthn> moritz_: I mean, maybe we should associate the state of the flip-flop with the block.

[21:54] <jnthn> moritz_: Then we only need a block-unique identifier, and those aren't so hard.

[21:54] <meppl> ;)

[21:55] <moritz_> jnthn: would that work with two ff ops in a block?

[21:55] <masak> gosh, I sure hope so.

[21:55] *** meppl left
[21:55] <jnthn> moritz_: For sure. I'm not being very good at explaining here. :-)

[21:56] <moritz_> jnthn: is it something that can be (theoretically) written in pure Perl 6?

[21:56] <jnthn> moritz_: I meant that the storage for all of the flip-flops in a block would be associated with that block, and we'd just generate a unique ID for each flip-flop, but it only has to be unique to that block, not globally.

[21:57] <moritz_> jnthn: ah

[21:57] <jnthn> moritz_: If we implement can do &CALLER::?BLOCK

[21:57] <jnthn> moritz_: Then you can mix in a role with a storage location (e.g. a hash) perhaps.

[21:57] <jnthn> Though then the unique identifier for it is still a bit tricky.

[21:57] <moritz_> another idea might be a macro

[21:58] <moritz_> because a macro can have local storage per "call"

[21:58] <jnthn> yeah, but when you do a macro you lose the multi-dispatch.

[21:58] <jnthn> And thus ff becomes not overloadable.

[21:58] <moritz_> multi macros? ;-)

[21:58] <jnthn> Ssshhh!

[21:58] <masak> :)

[21:59] <masak> protomacros.

[21:59] <moritz_> the macro could store the state, and re-dispatch to an ordinary multi

[21:59] <jnthn> Yeah, perhaps.

[21:59] <jnthn> It is an interesting question though, how to get the unique identifier for the operator.

[22:00] <jnthn> .oO( caller's bytecode program counter )

[22:00] * moritz_ is sufficiently convinced by the macro idea that he doesn't have to write a mail to p6l

[22:00] <jnthn> .oO( oh, that's not really pure Perl 6 :-) )

[22:00] <masak> oh noes, midnight!

[22:00] <jnthn> Welcome to Thursday.

[22:01] <masak> I kinda liked Wednesday... :/

[22:01] <jnthn> You can have another one next week.

[22:01] <jnthn> They're a renewable resource.

[22:01] <masak> yes, but given the rate at which we're consuming them...

[22:02] <masak> I'm not sure how long they'll last.

[22:02] <moritz_> masak: I'm sure the calendar FAQ that mberends linked to earlier today has an answer to that ;-)

[22:02] <masak> anyway, off to bed with me. I have to at least pretend to be doing something about my wretched sleep habits of late.

[22:03] <jnthn> masak: Enjoy going to bed with you.

[22:03] <moritz_> good night masak

[22:03] <jnthn> night

[22:03] <masak> good night. it was nice speaking to you.

[22:03] *** masak left
[22:04] <jnthn> pmichaud: BTW, does this mean that you've got multi trait_auxilliary:is($x, $y) { } parsing too? ;-)

[22:04] <pmichaud> no.

[22:04] <moritz_> :<is> please ;-)

[22:04] <pmichaud> trait_auxiliary:<is>  would parse, yes.

[22:04] <jnthn> Oh, yes

[22:04] <jnthn> That's the one I meant.

[22:04] <jnthn> :-)

[22:04] <jnthn> OK, I'm happy.

[22:05] <jnthn> We can haz traits.

[22:05] <pmichaud> it doesn't add it into the parser.... but 'is' is already in the parser.

[22:05] *** iblechbot left
[22:05] <jnthn> The "adding to the parser" bit for traits ahdn't occured to me so much.

[22:05] <jnthn> It's more declaring overloads of existing ones.

[22:06] <pmichaud> sure, that'll work.  I have that part working already also :-)

[22:06] <pmichaud> the "adding into the parser" is the current obstacle -- not huge, just requires a bit of fiddling around at compile-time to make it happen.

[22:06] <jnthn> std: multi trait_auxiliary:<foo>($x, $y) { }; my $x is 42; my $y foo 42;

[22:07] <p6eval> std 26821: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/RObLCBh6VC line 1:␤------> [32mt_auxiliary:<foo>($x, $y) { }; my $x is [31m42; my $y foo 42;[0m␤    expecting name␤FAILED 00:03 38m␤»

[22:07] <jnthn> std: multi trait_auxiliary:<foo>($x, $y) { }; my $x is Int; my $y foo Int;

[22:07] <p6eval> std 26821: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/PvqgrspKv9 line 1:␤------> [32mo>($x, $y) { }; my $x is Int; my $y foo [31mInt;[0m␤    expecting any of:␤     infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤ 

[22:07] <p6eval> ..   trait␤FAILED...

[22:07] <jnthn> Heh, std doesn't allow that either.

[22:07] <moritz_> jnthn: I think I gave TimToady a bit of a headache with that one

[22:07] <pmichaud> afaict, std only handles infix:, postfix:, prefix:, etc. at the moment

[22:07] <jnthn> Aye.

[22:07] <pmichaud> I might not have seen the code that handles the other.

[22:08] <jnthn> That's quite enough for now. :-)

[22:08] <pmichaud> std also doesn't seem to handle the assoc, equiv, tighter, or looser traits yet.

[22:08] <jnthn> Ooh, does that mean we might be a bit ahead of std? ;-)

[22:08] <pmichaud> i.e., all infix: operators are treaded as equiv(&infix:<+>)

[22:08] <jnthn> (on that issue...)

[22:08] <pmichaud> yes, I'm aiming for supporting at least equiv

[22:08] <jnthn> woo

[22:08] <jnthn> pmichaud++

[22:09] <pmichaud> if I can get that to work, tighter/looser/assoc won't be far behind.

[22:09] *** LadyLunacy joined
[22:09] <moritz_> fwiw, pugs never did the precedence/associativity traits either

[22:09] <pmichaud> we may run into a few issues with postfix: ops, though, dealing with precedence.

[22:10] <jnthn> At the PGE/Rakudo level, or in a wider Perl 6 sense?

[22:10] <pmichaud> PGE/Rakudo level

[22:10] <pmichaud> TimToady++ has already solved it in STD.pm, but that solution doesn't map well to PGE's current operator parser

[22:11] <pmichaud> it would've been a lot nicer to implement PGE after STD.pm was written, instead of before.  :-)

[22:12] <pugs_svn> r26822 | moritz++ | [t/blocks] remove outdated tests

[22:12] <pugs_svn> r26822 | moritz++ | 

[22:12] <pugs_svn> r26822 | moritz++ | The recent spec changes imply that it should be re-written in terms of

[22:12] <pugs_svn> r26822 | moritz++ | augment slang MAIN { ... }, which would be quite different from what it looked

[22:12] <pugs_svn> r26822 | moritz++ | like now

[22:14] <moritz_> 64 test files remaining that needs review wrt moving to spec/

[22:14] <moritz_> with less than 300 individual tests in total

[22:14] <jnthn> Impressive!

[22:14] <moritz_> (in contrast: t/spec is 589 files, 16.5k tests)

[22:15] <pmichaud> really?  There are that few tests left to go?

[22:15] <moritz_> pmichaud: really.

[22:15] <pmichaud> so the total size of t/spec is upper-bound by 16.8k?

[22:15] <jnthn> Once I've got traits and deference in, I plan to go through S12-* and S14-* and see what's left.

[22:15] <pmichaud> (as it exists today, that is)

[22:16] <moritz_> (the individual test counts are done by grepping for plan \d+, so not too reliable, but right order of magnitude)

[22:16] <moritz_> jnthn: I leave t/oo/syntax-but.t for you to review ;-)

[22:17] <jnthn> moritz_: OK, pester me if I forget. :-)

[22:17] *** lichtkind_ joined
[22:17] <moritz_> I'm a bit at loss what to do with t/perl5/

[22:17] <moritz_> it contains Perl 5 code in '{ use v5; ... }' blocks

[22:18] <moritz_> should I make that S01-Perl-5-integration/ or so?

[22:18] <jnthn> moritz_: Oh, for testing Perl 5 / Perl 6 integration?

[22:18] *** LadyLuna2y joined
[22:18] <moritz_> jnthn: right

[22:19] <jnthn> S01-Perl-5-integration sounds like a sane name for it.

[22:19] <jnthn> moritz_: Do you know how much of it Pugs managed to pass, btw?

[22:19] <moritz_> jnthn: quite a few, at some point

[22:20] *** LadyLuna1y left
[22:20] <moritz_> jnthn: I remembered I once loaded a non-XS perl 5 module from within pugs, and it sort of worked

[22:20] <moritz_> (linked against libperl, and with some internal bridge)

[22:20] *** lichtkind left
[22:20] *** lichtkind_ is now known as lichtkind

[22:21] <jnthn> Looks like it's ~75 tests.

[22:21] <moritz_> actually it's all eval($str, :lang<perl5>)

[22:21] <moritz_> but still

[22:22] <jnthn> aye

[22:22] <jnthn> That's a bit easier to handle.

[22:22] <jnthn> (Doesn't need parser assistance.)

[22:22] <moritz_> aye

[22:22] <moritz_> modify_inside_p5_p6.t being an exception

[22:22] <moritz_> but it uses something that's both valid Perl 5 and Perl 6

[22:23] <moritz_> (just with different semantics each)

[22:23] <jnthn> *nod*

[22:25] <pugs_svn> r26823 | moritz++ | [t] move perl5/* to spec/S01-perl-5-integration/

[22:25] <pugs_svn> r26823 | moritz++ | 

[22:25] <pugs_svn> r26823 | moritz++ | (Didn't review them all, but the ones I looked at were rather sane)

[22:26] *** LadyLunacy left
[22:26] <moritz_> ok, 52 files left ;-)

[22:29] *** hercynium joined
[22:30] *** alester is now known as alester_away

[22:33] *** raiph_ joined
[22:34] <moritz_> bed time for me

[22:35] *** payload joined
[22:35] <raiph_> g'night

[22:40] *** justatheory left
[22:41] <raiph_> tene: i'd like to call your attention to http://pleasedieinafire.net:2080/post/9

[22:42] *** payload left
[22:42] *** payload joined
[22:43] *** justatheory joined
[22:48] *** Ariens_Hyperion joined
[22:49] *** nihiliad left
[22:50] *** Ariens_Hyperion left
[22:51] *** payload1 joined
[22:52] *** payload left
[23:05] *** skids joined
[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:20] *** nbrown joined
[23:27] *** vx64z joined
[23:27] *** mib_zwepfp joined
[23:28] *** mib_zwepfp left
[23:30] *** eMaX left
[23:30] *** eMaX joined
[23:32] *** nbrown_ joined
[23:38] *** lichtkind left
[23:38] *** exodist left
[23:45] *** VX left
[23:46] *** nbrown left
[23:46] *** nbrown_ is now known as nbrown

