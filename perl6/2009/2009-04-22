[00:03] *** orafu left
[00:09] *** orafu joined
[00:15] *** [particle]1 left
[00:18] *** bacek_ joined
[00:53] *** sri_kraih joined
[01:01] *** sri_kraih__ joined
[01:19] *** sri_kraih left
[01:25] *** ispy_ left
[01:31] *** eternaleye joined
[01:40] *** meppl joined
[01:41] <eternaleye> Is there an infix junctive operator for 'none'? I know there's & => 'all', | => 'any', ^ => 'one', but is there something like ! => 'none'?

[01:41] *** sri_kraih__ left
[01:42] *** sri_kraih joined
[01:53] <skids> eternaleye: I do not believe so.

[02:02] *** Limbic_Region left
[02:06] *** cspencer joined
[02:11] <eternaleye> perl6: multi infix:<!>( *@list ) is precedence('q=') is assoc('list') { return none( @list ); }; say (1 ! 2 ! 3).perl

[02:11] <p6eval> pugs: OUTPUT«(1 ! 2 ! 3)␤»

[02:11] <p6eval> ..rakudo 266557: OUTPUT«Malformed routine definition at line 1, near "infix:<!>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[02:11] <p6eval> ..elf 26354: OUTPUT«No viable candidate for call to multimethod infix__33(#,#) at (eval 127) line 8␤ at ./elf_h line 5881␤»

[02:11] <eternaleye> perl6: multi infix:<!>( *@list ) is precedence('q=') is assoc('list') { return none( @list ); }; say (1 ! 2 ! 3)

[02:11] <p6eval> pugs: OUTPUT«none(VInt 1,VInt 2,VInt 3)␤»

[02:11] <p6eval> ..rakudo 266557: OUTPUT«Malformed routine definition at line 1, near "infix:<!>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[02:11] <p6eval> ..elf 26354: OUTPUT«No viable candidate for call to multimethod infix__33(#,#) at (eval 126) line 8␤ at ./elf_h line 5881␤»

[02:24] *** amoc joined
[02:28] *** meppl left
[02:31] *** kate21de1 left
[02:33] *** kimtaro joined
[02:33] *** agentzh joined
[02:35] *** payload joined
[02:39] *** alanhaggai joined
[02:39] *** dukeleto joined
[02:40] *** Kisu joined
[02:50] *** Kisu left
[02:52] *** Kisu joined
[03:06] *** nihiliad joined
[03:29] *** agentzh left
[03:30] *** agentzh joined
[03:34] *** dukeleto left
[03:42] *** orafu left
[03:42] *** orafu joined
[03:53] *** dukeleto joined
[03:57] *** meppl joined
[03:57] *** meppuru joined
[04:10] *** skids left
[04:13] *** meppl left
[04:16] *** cspencer left
[04:50] *** dukeleto left
[05:09] *** nihiliad left
[05:13] *** alester joined
[05:28] *** MrKrueger joined
[05:38] *** tarbo2 joined
[05:43] *** meppuru left
[05:45] *** c9s joined
[06:00] *** azawawi joined
[06:00] <azawawi> hello

[06:03] *** alester left
[06:09] <moritz_> good localtime

[06:11] <azawawi> hi moritz_

[06:12] <azawawi> moritz_: it is time to have proper p6 syntax highlighting now... im going through the trees :)

[06:13] <moritz_> what do you mean?

[06:14] <azawawi> moritz_: in S:H:P6 we used to hack our way; now im going to go more specific a bit

[06:15] <moritz_> azawawi: you can use .chunks on the match objects now

[06:16] <azawawi> moritz_: in STD or rakudo?

[06:16] <moritz_> azawawi: both

[06:17] <azawawi> moritz_: any docs on .chunks?

[06:17] <moritz_> azawawi: though the one in rakudo is a wee bit broken wrt the keys, but that shouldn't stop you

[06:17] <moritz_> azawawi: S05

[06:18] <azawawi> moritz: szabgab also told me about the p6 highlighting hack he recently made to Padre::Plugin::Perl6

[06:18] <azawawi> moritz_: using rakudo

[06:19] <azawawi> moritz_:http://padre.perlide.org/changeset/4000

[06:19] <azawawi> moritz_: it is not perfect though

[06:21] <azawawi> moritz_: how can we make all of S29 and S32 more function documentation index-friendly? :)

[06:21] <azawawi> moritz_: smart-tags?

[06:21] <moritz_> azawawi: first of all by generating HTML from the Pod

[06:21] *** iblechbot joined
[06:22] <azawawi> moritz_: i used to index =item function-name and then assume the rest is its documentation in S29

[06:23] <azawawi> moritz_: but now functions are in S29 and S32

[06:23] <azawawi> moritz_: for help on functions and tooltips in Padre...

[06:34] <pugs_svn> r26355 | azawawi++ | [S:H:P6] updated to jquery-1.3.2

[06:37] <dalek> rakudo: fd0a4d5 | (Stephen Weeks)++ | src/builtins/control.pir:

[06:37] <dalek> rakudo: Use load_lang opcode for eval with :lang

[06:37] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/fd0a4d581d8df767af5c5cecce5fa6c567ca8b39

[06:41] <pugs_svn> r26356 | azawawi++ | [S:H:P6] version is now 0.042. Latest STD in included.

[06:44] *** dukeleto joined
[06:44] <pugs_svn> r26357 | azawawi++ | [S:H:P6] Ignore *.store files

[06:47] *** agentzh left
[06:49] *** alanhaggai_ joined
[06:49] *** alanhaggai left
[06:51] *** alanhaggai_ is now known as alanhaggai

[06:59] <pugs_svn> r26358 | leto++ | Additional tests for log10() of a Complex

[07:02] *** DemoFreak joined
[07:04] *** agentzh joined
[07:16] <Matt-W> Morning

[07:21] *** M_o_C joined
[07:32] *** FurnaceBoy left
[07:36] *** rblasch joined
[07:38] <dukeleto> morning'

[07:41] *** FurnaceBoy joined
[07:55] *** azawawi left
[07:56] *** lumi left
[07:56] *** lumi joined
[08:04] *** prologic joined
[08:06] *** prologic left
[08:06] *** kimtaro_ joined
[08:24] *** kimtaro left
[08:42] *** agentzh left
[08:42] *** agentzh joined
[08:46] *** ejs joined
[08:51] *** DemoFreak left
[08:57] *** bacek_ left
[08:57] *** ejs1 joined
[09:03] *** jeremiah_ joined
[09:04] <jeremiah_> Congrats to masak and hinrik for their SoC project!

[09:05] *** ejs left
[09:07] *** mikehh joined
[09:08] <moritz_> indeed

[09:09] <moritz_> and to tewk and allison

[09:09] <moritz_> and darbelo and cotto

[09:09] <moritz_> and pmurias and ruoso

[09:09] <cotto> yay!

[09:09] <cotto> now the fun part begins

[09:13] *** kidd_ joined
[09:13] <moritz_> fun++

[09:14] <moritz_> if you need any mathematical expertise for that project, feel free to ask (though I doubt that you'll need it)

[09:17] <cotto> probably not, but I'll remember that you offered

[09:22] *** agentzh left
[09:22] *** agentzh joined
[09:23] *** ejs joined
[09:29] <jeremiah_> Yes - congratulations to all.

[09:29] <jeremiah_> I only have met masak in RL so that is why I started out with him. :)

[09:31] *** ejs1 left
[09:31] <moritz_> the only Perl 6 developer that I met in RL is jnthn

[09:32] <moritz_> :/

[09:33] <jeremiah_> moritz_: You mean "Thunderously apoplectic" jnthn?

[09:33] <jeremiah_> heh

[09:39] *** pmurias joined
[09:51] *** pmurias left
[10:15] <arnsholt> Any of you guys planning on participating in the Perl Iron Man blogging contest?

[10:16] * jnthn got back home safely at 2am...crashed on his bed...and didn't wake up until mid-day!

[10:17] *** azawawi joined
[10:17] <azawawi> hello

[10:18] <jnthn> arnsholt: I blog about once a week anyway, so may well submit mine...

[10:20] <arnsholt> Heh. Decided on a title and colour yet? =)

[10:26] *** SamB joined
[10:32] <pugs_svn> r26359 | masak++ | [S05] typo: removed extra 'returned'

[10:39] *** kimtaro_ left
[10:42] *** kane_ joined
[10:43] *** agentzh left
[10:45] *** agentzh joined
[10:45] *** mhsparks joined
[10:56] <alanhaggai> is away: gone fishing.

[11:12] <moritz_> dukeleto: t/spec/S32-num/log.rakudo, Parse errors: Bad plan.  You planned 29 tests but ran 27. - do you have anything to do with that?

[11:15] <dalek> rakudo: d0a5de5 | (Moritz Lenz)++ | src/setting/Match.pm:

[11:15] <dalek> rakudo: Match.perl: work around RT #64952

[11:15] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d0a5de55a1da8c7307e6c486fd9b548fcbc0b727

[11:30] *** cognominal joined
[11:35] *** ruoso joined
[11:42] *** amoc left
[11:44] <mikehh> t/spec/S32-num/log.rakudo - Failed 2/29 subtests (less 4 skipped subtests: 23 okay) - and the same message as mottitz

[11:45] <mikehh> s/mottitz/moritz_/

[11:48] *** hcchien left
[11:48] *** clkao left
[11:49] <pugs_svn> r26360 | moritz++ | [t/spec] fix rakudo fudging of log.t; simplify a test

[11:49] <moritz_> dukeleto: when you add tests that make rakudo die, you have to #?rakudo skip them, not just 'todo'

[11:54] *** fridim_ joined
[11:56] *** clkao joined
[11:56] *** clkao left
[11:56] *** clkao joined
[11:59] <mikehh> moritz_ how do you get the rakudo test to try without re-running the whole test suite - I did a make testable and then?

[12:01] <moritz_> mikehh: make t/spec/S32-num/log.t

[12:01] <pmichaud> -good morning, #perl6

[12:03] <moritz_> good localtime() pmichaud 

[12:04] <jnthn> hi, pmichaud 

[12:04] <jnthn> Hope your trip home went fine?

[12:04] <mikehh> moritz_: good that works then - the spectests now pass - rakudo (fd0a4d5) on parrot r38266

[12:04] *** kidd_ left
[12:04] <mikehh> Kubuntu Intrepid Amd64

[12:05] *** icwiener joined
[12:08] <pnu> rakudo: class N { method Num { return 41 } }; say N.new + 1;

[12:08] <p6eval> rakudo d0a5de: OUTPUT«42␤»

[12:08] <pnu> oh, i must have old version..

[12:08] <pnu> cool

[12:09] <mikehh> moritz_: how come log10 of complex unit (i) is ok but not log10 complex in general?

[12:11] <moritz_> rakudo: say log10(1i)

[12:11] <p6eval> rakudo d0a5de: OUTPUT«0␤»

[12:11] <moritz_> that's wrong.

[12:11] <moritz_> rakudo: say log(1i)

[12:11] <p6eval> rakudo d0a5de: OUTPUT«0+1.5708i␤»

[12:11] <moritz_> rakudo: say log(1i)/log(10)

[12:11] <p6eval> rakudo d0a5de: OUTPUT«0+0.682188i␤»

[12:11] <moritz_> that's the correct result

[12:12] <moritz_> but a log10 of a complex number is a really weird beast, I don't know what you ever need that for

[12:12] <pmichaud> trip home was fine, last flight was delayed 2hrs, and I ended up sitting next to the iPod from hell.

[12:13] <pmichaud> however, the oslo->newwark trip was _very_ nice, I ended up with an entire row of seats to myself, _and_ a powerport.  :-)

[12:13] <jnthn> "I PLAYS MY TECHNO SO LOUD!!!"

[12:13] <jnthn> Oh, nice!

[12:14] <jnthn> Mine was fine...though didn't make the train home from Wien - Bratislava that I'd hoped, so was home by 2am instead of 1am. But no biggie.

[12:14] <jnthn> Slept until mid-day today though!

[12:15] <pmichaud> good sitghtseeing in Oslo?

[12:16] <pmichaud> *sightseeing

[12:16] <ruoso> @tell pmurias I know why it's breaking when the refcount is on... nagc really can only be used in the msot basic types, it shouldn't be used when the DESTROY call recurses, we need an additional gc that is able to handle recursing in the interpreter... just as lowlevel.sm0p did...

[12:16] <lambdabot> Consider it noted.

[12:18] <pmichaud> I now have a patch that blesses regexes into the Regex class... but it depends on a change to Parrot, so it'll have to go in after the release.

[12:18] <moritz_> pmichaud: you can always push it to a branch, if you want testing

[12:19] <fridim_> Outch, Camelia is really horrible oO

[12:19] <jnthn> Weather in Oslo was gorgeous...went to see the royal palace, which I'd not seen before, and then hung around by the sea for quite a while...had ice cream, enjoyed the sun and fresh air. :-)

[12:20] <jnthn> Ooh, very happy you've done that patch!

[12:23] <pmichaud> afk, taking kids to school

[12:23] *** ejs left
[12:24] *** araujo joined
[12:27] <Matt-W> jnthn: That sounds wonderful

[12:27] <pnu> rakudo: class B { method Str { return 'xxx' } }; say B.new;

[12:27] <p6eval> rakudo d0a5de: OUTPUT«xxx␤»

[12:28] <moritz_> rakudo: class B { method Str { return 'xxx' } }; say B

[12:28] <p6eval> rakudo d0a5de: OUTPUT«B␤»

[12:28] <pnu> i just upgraded my rakudo and it segfaults for this..

[12:31] <pnu> rakudo: class X { method Str { return 'x' } }; say 'y' ~ X

[12:31] <p6eval> rakudo d0a5de: OUTPUT«yX␤»

[12:32] <pnu> rakudo: class X { method Str { return 'x' } }; say 'y' ~ X.new

[12:32] <p6eval> rakudo d0a5de: OUTPUT«yx␤»

[12:33] <pnu> First one say "Could not find non-existent sub y" on my machine.

[12:33] <moritz_> pnu: are you using perl6 -e '...' ?

[12:33] <pnu> The second one "Could not find non-existent sub x"

[12:33] <pnu> yep.

[12:33] <moritz_> pnu: then you can't use single quotes inside -e '...'

[12:34] <pnu> oh no, i made that same mistake again..

[12:34] <pnu> that was strange behaviour indeed. :-/ sorry, my bad.

[12:39] *** abra joined
[12:39] *** abra left
[12:41] *** abra joined
[12:43] *** aff joined
[12:44] *** hanekomu joined
[12:47] *** iblechbot left
[12:49] <pnu> rakudo: class B { method Bool { return Bool::False } }; if B.new { say 'true' }

[12:49] <p6eval> rakudo d0a5de: OUTPUT«true␤»

[12:50] *** jferrero joined
[12:50] <moritz_> rakudo: class B { method true { return Bool::False } }; if B.new { 

[12:50] <p6eval> rakudo d0a5de: OUTPUT«Unable to parse block; couldn't find final '}' at line 1, near ""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:50] <moritz_> rakudo: class B { method true { return Bool::False } }; if B.new { say 'true' }

[12:50] <p6eval> rakudo d0a5de:  ( no output )

[12:51] <moritz_> rakudo: class B { method true { return Bool::False } }; say (?B.new).perl

[12:51] <p6eval> rakudo d0a5de: OUTPUT«Bool::False␤»

[12:53] <pnu> ok, i should call that method "true" not "Bool"?

[12:54] <moritz_> yes.

[12:58] *** payload left
[12:59] <pmichaud> Yes, the handling of booleans (and their relationships) isn't entirely clear.

[13:01] <jnthn> Last I knew, we needed to do something like role Bool::True { method true { 1 } }; role Bool::False { method true { 0 } }

[13:02] <jnthn> And True and False are just aliases to these.

[13:02] <pmichaud> ...but then how do we have a Bool type?

[13:02] <jnthn> Oh, gah, yes. :-|

[13:02] <pmichaud> i.e.,   Bool::True ~~ Bool    ?

[13:02] <jnthn> oh

[13:02] <jnthn> role Bool { method true { ... } }

[13:03] <jnthn> role Bool::True does Bool { method true { 1 } }

[13:03] <jnthn> etc

[13:03] <jnthn> Would cut it.

[13:03] <jnthn> I *think*.

[13:03] <pmichaud> is there a .Bool method?

[13:03] <pmichaud> (in Object)

[13:04] <moritz_> that's not clear to me

[13:04] <jnthn> Not sure, but if there is then it's a coercion...

[13:04] <jnthn> Like Str etc

[13:04] <pmichaud> right.  But then which "wins"...   .true or .Bool ?

[13:04] <pmichaud> i.e., if I override .Bool but don't override .true

[13:04] <jnthn> I think we can say, .Bool gives you something that is ~~ Bool

[13:05] <jnthn> Whereas .true gives you some "native" unboxed value.

[13:05] <pmichaud> and prefix:<?> always uses .true ?

[13:06] <Matt-W> This makes my head hurt

[13:06] <jnthn> That may work.

[13:06] <pmichaud> same here -- I've asked several times before but not gotten clean answers :-|

[13:06] <Matt-W> I always thought Bool would be a simple matter

[13:06] *** exodist joined
[13:06] <Matt-W> I guess it's not so much about 'true' as 'do you think you are true'

[13:06] <jnthn> Basically the best I managed to get this down to, was that True and False are roles that have a true method.

[13:06] <pmichaud> so overriding .Bool would change the way that something coerces to a Bool, but wouldn't affect testing for boolean-ness or prefix;<?>

[13:07] <jnthn> I guess .Bool should by default call .true, which by default tests .defined

[13:07] <jnthn> Or something like that... 

[13:07] <pmichaud> that seems confusing to me.

[13:07] <jnthn> Same

[13:07] <Matt-W> and so most of the time you would override .true for custom types

[13:07] <Matt-W> which might trip a lot of people

[13:07] <pmichaud> It seems confusing to me that overriding .Str will affect prefix:<~>, but overriding .Bool doesn't affect prefix:<?>

[13:07] <jnthn> True and False want to be roles that override true though, last I knew.

[13:07] <pmichaud> otoh, there's another related confusion.

[13:07] <jnthn> Though maybe they need to override .Bool also.

[13:08] <pmichaud> if I override .Int  (but not .Num), how does that affect numification ?

[13:08] <moritz_> and isn't it .int now?

[13:08] <Matt-W> I suppose it depends what it's numifying to...

[13:08] <moritz_> because int as a prefix is gone

[13:09] *** DemoFreak joined
[13:09] <pmichaud> and yes, perhaps it's .int now

[13:09] <jnthn> int and Int ain't the same thing.

[13:09] <Matt-W> absolutely not

[13:09] <moritz_> another thing that I thought about late last night... how do I say how to coerce to a parametric type?

[13:10] <Matt-W> I think a lot of programmers would assume that overriding .Bool would alter the behaviour of prefix<?> appropriately

[13:10] <jnthn> Foo[P1, P2](...)

[13:10] <moritz_> I mean method Array[Int] { ... } isn't valid syntax, is it?

[13:10] <moritz_> std: method Array[Int] { [1] }

[13:10] <p6eval> std 26360: OUTPUT«##### PARSE FAILED #####␤Malformed method at /tmp/6jBHt8UPev line 1:␤------> method Array[Int] { [1] }␤    expecting any of:␤  blockoid␤ method_def␤       terminator␤       trait␤  whitespace␤FAILED 00:02 34m␤»

[13:10] <jnthn> phone

[13:11] <Matt-W> moritz_: always have to ask the hard questions...

[13:12] *** pmurias joined
[13:13] <wayland76> Matt-W: jnthn escaped at the right time then :)

[13:14] <moritz_> Matt-W: I started off with simple questions :-)

[13:14] <pmichaud> Do we still want/need the 'quotemeta' method in S32-setting-library/Str.pod ?

[13:14] <pnu> Matt-W: yes, that's exactly what i assumed too.. I'm trying to define coersion to Bool.

[13:15] *** pmurias left
[13:15] <Matt-W> I would have thought ? would do return self.Bool, but it seems my understanding of the very nature of true and false is wrong

[13:16] <moritz_> pmichaud: it's not useful for regexes anymore, but I've seen it used for user stuff some times (although very seldom)

[13:16] <moritz_> IMHO we could rip it out

[13:16] <pmichaud> Matt-W: It's just that the spec has gone through many revisions and has never had this particular aspect re-unified.

[13:16] <moritz_> it's as simple as .subst(/\W/, { "\\$/"}, :g)

[13:17] <pmichaud> yes, but I was going to eliminate the [A-Z...] part

[13:17] <pmichaud> (because it's obviously wrong)

[13:17] <Matt-W> pmichaud: yeah, so we get to melt our brains out trying to do that :)

[13:17] <pmichaud> personally I think I'd like to see .true defined in terms of .Bool

[13:17] <moritz_> pmichaud: maybe TimToady needs it for his p5 -> p6 translation plans

[13:18] <moritz_> like p5=>

[13:18] <pmichaud> moritz_: that's possible.  But then it should probably be p5quotemeta or export(:P5)  or somesuch

[13:19] <pmichaud> Personally, it looks like a p5-thinko to me.

[13:19] <pmichaud> Even the regex isn't p6.

[13:20] <pmichaud> (hasn't been that way since 2004.)

[13:20] *** pmurias_ joined
[13:21] <moritz_> then rip it out

[13:23] <pugs_svn> r26361 | pmurias++ | [re-smop] fixed a bug in adhoc_signature

[13:23] <pugs_svn> r26361 | pmurias++ | added tests for lexical scope,adhoc_signature and scalar

[13:23] <pugs_svn> r26361 | pmurias++ | the lexical scope tests uncover a refcounting bug

[13:24] *** pmurias_ is now known as pmurias

[13:25] <pmurias> ruoso: hi

[13:25] <lambdabot> pmurias: You have 1 new message. '/msg lambdabot @messages' to read it.

[13:25] <jnthn> pmichaud: How are we doing for a name for the release?

[13:25] <jnthn> It's for sure I'm giving a talk about Rakudo at Bratislava.pm tomorrow ;-)

[13:27] *** alanhaggai left
[13:27] <Matt-W> Perhaps it should be called Bratislava, in order to get them to buy jnthn lots of beer

[13:27] *** iblechbot joined
[13:28] *** [particle]1 joined
[13:28] <ruoso> hi pmurias 

[13:29] <moritz_> we obviously need more support from various .pm groups

[13:31] <PerlJam> good morrow #perl6

[13:31] <Matt-W> oh

[13:31] <patmat> hello :)

[13:31] * Matt-W discovers there's a Nottingham.pm

[13:31] <Matt-W> ...only the site's down

[13:32] <PerlJam> Seems to me that there's a good fund raising/marketing opportunity with rakudo release naming

[13:33] <Matt-W> quite possibly

[13:33] <PerlJam> The PM that gets chosen is like "king for the month" (until the next release)

[13:33] <Matt-W> also an incentive to get Rakudo 1.0 out before we run out of names

[13:34] <moritz_> there are more than enough .pm groups out there

[13:34] <moritz_> more than 100, for sure

[13:34] <moritz_> I hope we'll get 1.0 (or 6.0) out before 2017

[13:36] <pnu> rakudo: prompt 'broken'

[13:36] <p6eval> rakudo d0a5de: OUTPUT«brokenMethod 'readline' not found for invocant of class 'IO'␤current instr.: 'prompt' pc 21935 (src/builtins/io.pir:166)␤»

[13:36] <moritz_> that was me, I fear

[13:37] <moritz_> should be s/readline/get/ in IO.prompt

[13:38] <literal> when does rakudo have releases? once a month?

[13:38] <PerlJam> literal: yep

[13:38] <literal> ok

[13:38] <PerlJam> right after the parrot releases

[13:39] <pmichaud> jnthn: I haven't reviewed all of the suggestions I've received, but thus far I think Bratislava is in the lead.

[13:39] * PerlJam votes for Bratislava too then

[13:39] <PerlJam> :)

[13:39] <pmichaud> I think TimToady suggested 2014 :-)

[13:39] <moritz_> it's a realistic goal, I think

[13:39] <pmichaud> Stockholm is high on my list also.

[13:39] <moritz_> although it's likely very usable much earlier

[13:40] <PerlJam> Why 2014?

[13:40] <pmichaud> Because that's how long it took Tolkein for LOTR

[13:40] <PerlJam> ah.

[13:41] <pmichaud> anyway, unless anyone has any reason for holding it, I'll probably do the release later today instead of waiting until tomorrow.

[13:41] <hanekomu> i heard that at npw as well, and my tolkien fandom time was long ago, but didn't he take over twenty years to publish lotr after the hobbit?

[13:41] <PerlJam> I was trying to come up with some formula for perl6's incubation period based on previous perls 

[13:41] <hanekomu> istr that the hobbit was in the 30s; lotr was 50s, no?

[13:41] * hanekomu checks

[13:41] <PerlJam> hanekomu: I didn't think any of them were published until after the war

[13:42] <hanekomu> Hobbit 1937

[13:42] <moritz_> well, Perl 6 was announced... when? 2001?

[13:42] <hanekomu> LotR 1954-55

[13:42] <hanekomu> so ok

[13:42] <hanekomu> 17 years

[13:42] <pmichaud> 2000, I think.

[13:42] <hanekomu> see, i just bought you 3 years

[13:42] <moritz_> :-)

[13:43] <pmichaud> hanekomu: Perhaps, but TimToady did say 2014.  

[13:43] <pmichaud> Personally, I'd like to shoot for something much sooner than that :-)

[13:43] <moritz_> IMHO concurrency and pluggable object models are a large unknown factor

[13:44] <PerlJam> 2010 would be a good year

[13:44] <moritz_> who can tell how long it will take to implement threads, events and STM?

[13:44] *** zamolxes joined
[13:44] <pmichaud> We're rapidly whittling away the unknowns, however.  :-)

[13:44] <moritz_> portable IO will also take some time

[13:45] <PerlJam> moritz_: it just has to be portable *enough* for the first release  :)

[13:45] <pugs_svn> r26362 | pmichaud++ | [spec]: Clean up 'quotemeta' in Str.pod, add some questions/comments.

[13:45] <moritz_> I don't think that what parrot has right now is close to what Perl 6 needs.

[13:45] <pmichaud> moritz_: perhaps, but we can always write our own stuff in Parrot.

[13:45] <pmichaud> That _is_ one of its advantage -- we can add "core" capabilities without having to construct an entire VM.

[13:46] <pmichaud> so if Parrot's built-in IO PMCs don't do what we want, we can create our own.

[13:46] <moritz_> pmichaud: yes, I know. But it still needs to be done

[13:46] <moritz_> which is my entire point

[13:46] <moritz_> same with concurrency

[13:46] <moritz_> and Unicode string levels

[13:47] <moritz_> and module versioning

[13:47] <pmichaud> rakudo:  my %h = 1..6;  say %h.exists('1');

[13:47] <p6eval> rakudo d0a5de: OUTPUT«1␤»

[13:47] <moritz_> I don't what to be a pessimist, but all of those could mean lots of work

[13:48] <pmichaud> but the work parallelizes much better than it used to, also.

[13:48] <pmichaud> yes, they are still lots of work.

[13:48] <moritz_> onto as many hackers as we have

[13:48] <moritz_> which isn't a huge number at the moment

[13:49] * moritz_ is a bit gloomy today

[13:49] <pmichaud> moritz_: yes, but you didn't see the number of people playing with rakudo at the hackathon :-)

[13:49] *** PacoLinux joined
[13:49] <pmichaud> It was.... gratifying.

[13:50] <pmichaud> Especially compared with what we had at the Frozen Perl workshop in February (more)

[13:50] <moritz_> pmichaud: I can imagine, yes. And I've noticed a host of new names in here

[13:50] <moritz_> which is of course a good thing

[13:50] <Matt-W> When's the next exciting gathering?

[13:50] <pmichaud> the major difference being between Feb and Apr being that it's now far easier to get a working Rakudo today than it was then.

[13:50] <pmichaud> Matt-W: the next gathering on my calendar is YAPC::NA, June.

[13:50] <Matt-W> Sounds expensive

[13:50] <moritz_> and that NPW was very Perl 6 centric

[13:51] <Matt-W> Crossing the Atlantic isn't cheap :(

[13:51] <pmichaud> There's a Parrot/Perl 6 workshop scheduled for the two days prior to YAPC::NA

[13:51] <pmichaud> The next european gathering that I'm likely to attend (if I'm able to attend is YAPC::EU)

[13:51] <Matt-W> woohoo

[13:51] <pmichaud> That's in Lisbon.

[13:51] <pmichaud> I'm submitting talks in the expectation that somehow I'll be able to go.

[13:51] <Matt-W> :)

[13:51] <Matt-W> hope you can

[13:52] <pmichaud> (talk submissions are due by Apr 30, for those who are thinking of such things)

[13:52] *** aff left
[13:53] <ascent_> Is there anything what could be done by someone who knows Perl5, C (but without any language-development background) and doesn't have time to get into Parrot (looks like complicated) ?

[13:53] <moritz_> ascent_: yes, I've written a TODO for our build system

[13:53] <moritz_> let me find that link...

[13:53] *** hanekomu left
[13:54] *** alester joined
[13:54] <moritz_> ascent_: http://rt.perl.org/rt3/Ticket/Display.html?id=64868

[13:54] <moritz_> you can also start to learn Perl 6, and write tests

[13:54] <alester> ping pmichaud

[13:54] *** skids joined
[13:54] <Matt-W> August in Lisbon

[13:54] <Matt-W> ouch

[13:55] <Matt-W> Maybe I can go :)

[13:55] <moritz_> hot?

[13:55] <pmichaud> alester: pong

[13:55] <alester> Have you looked at the patch mailing stuff in git?

[13:55] <Matt-W> moritz_: I suspect so

[13:55] <pmichaud> alester: briefly

[13:55] <alester> I sent in my first git patch last night, and it's pretty butt-simple.

[13:56] <Matt-W> moritz_: I'm not good with hot

[13:56] <PerlJam> alester: what did you patch?

[13:56] <pmichaud> alester: Where did you send the patch?

[13:56] <moritz_> alester: are you talking about the mail-patch branch?

[13:56] <alester> let me find it.

[13:56] <alester> It was a patch to git.

[13:58] <alester> A 2-parter: http://www.spinics.net/lists/git/msg101458.html and http://www.spinics.net/lists/git/msg101457.html

[13:58] <pmichaud> alester: if you could make a bullet list of the steps you used to create the patch, that would be useful.  We could try it out.

[13:58] <alester> Do you have a git source distro?

[13:58] <alester> It's all in Documentation/SubmittingPatches 

[13:59] <pmichaud> no, I don't have a git source.  Surely it's available online somewhere, though :-)

[13:59] <alester> maybe I'll gratutiously patch something in Rakudo

[14:00] <alester> Now, I'm not sure what you do with it on your end to maintain all the state info that's in it.

[14:00] <pmichaud> I think I can figure that out.  At this stage the important thing is that it be easy to review.

[14:00] <alester> yeah, and I think you'll agree it is.

[14:00] <alester> The 1/2 and 2/2, it did automatically for me.

[14:00] <alester> so it's one file per

[14:01] <pmichaud> were these short patches to begin with?  Would we still want someone to squash multiple commits together?

[14:01] <alester> Probably.

[14:01] <alester> You want to have logically-combined commits.

[14:01] <pmichaud> right.

[14:02] <ascent_> moritz_: I'll look into build system. Where I can find Perl6 tests?

[14:02] <alester> OK, lemme see what i can do here.

[14:03] <pnu> coersion to numberic context calls always method Num, even if Int would be sufficient and method Int defined?

[14:03] <moritz_> ascent_: in the pugs repo in t/, http://svn.pugscode.org/pugs/t/

[14:03] <ascent_> moritz_: oh, I've looked at rakudo and parrot. :)

[14:03] <pmichaud> pnu: See the discussion earlier -- we're not sure how Int and Num play with numification.

[14:04] <moritz_> ascent_: rakudo's 'make spectest' imports the important part of these tests

[14:05] * alester rebuilds his rakudo install, untouched for weeks.

[14:06] <dalek> rakudo: 04ee8d0 | pmichaud++ | docs/spectest-progress.csv:

[14:06] <dalek> rakudo: spectest-progress.csv update: 374 files, 10467 passing, 0 failing

[14:06] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/04ee8d0e08db9ec3634e1ded6b3b271c30ed33a6

[14:07] *** zamolxes left
[14:08] *** rindolf joined
[14:10] *** dalek joined
[14:10] *** cspencer joined
[14:11] <ruoso> pmurias, hi again

[14:11] <cspencer> good morning!

[14:14] <PerlJam> the download link from github ... does that give you a tarball of the latest repo or of a release?

[14:15] <pmichaud> latest repo, if done on trunk.

[14:15] <PerlJam> Or ... how does one obtain releases?  http://www.rakudo.org/how-to-get-rakudo doesn't seem to mention it.

[14:16] <pmichaud> seems like we need to improve that.  Currently I'm just uploading them to my server and publishing them there.

[14:16] <pmichaud> We don't yet have an official place for them.

[14:16] <alester> CPAN for now?

[14:16] <pmichaud> I thought about doing CPAN, but someone would probably need to walk me through the pieces needed to set that up.

[14:17] <alester> You've never uploaded to CPAN?

[14:17] <pmichaud> Only Parrot.

[14:17] <alester> Then it should be same.

[14:17] <alester> What are you thinking would be different?

[14:17] <pmichaud> well, it's different because Parrot was already set up with wahtever metainformation CPAN needs.

[14:17] <pmichaud> Rakudo doesn't hae that.

[14:17] <alester> I don't think we care.

[14:18] <pmichaud> surely the indexer cares.

[14:18] <alester> We're just using CPAN for distribution, not the meta indexing hoohah.

[14:18] <pmichaud> ah.

[14:18] <pmichaud> I know we had to deal with indexing in the Parrot uploads, though.

[14:18] <alester> OK, I don't know about that.

[14:18] <alester> But I bet that if we just use it as distro, it won't matter.

[14:18] <alester> "Here, go download rakudo-14.tar.gz"

[14:20] *** pmurias left
[14:20] <pmichaud> oh, hey!  GitHub has a "upload" section in its downloads.

[14:20] <alester> Well, tehre we go.

[14:20] <pmichaud> Maybe I can upload the tarballs into the rakudo repository directly.

[14:20] <alester> Prob'ly we should be hanging out in #github, huh?

[14:20] <pmichaud> Perhaps.  I tend to get too many channels open as it is, though :-)

[14:21] <alester> So what's a few more? :-)

[14:21] <pmichaud> Right now I need to be hanging out at lunch, so I'm going to do that.

[14:21] <pmichaud> I'll look at uploading the tarballs in a bit.

[14:21] <Matt-W> mmm lunch

[14:21] <alester> lunch?

[14:21] <alester> What tz are you in?

[14:21] <pmichaud> back in good old cdt

[14:21] <alester> How long you been workin'?

[14:22] <pmichaud> but my stomach is still in europe, I think.

[14:22] <alester> By my clock, it's 0921

[14:22] <pmichaud> it's also worth noting that github has the snapshots of the releases at http://github.com/rakudo/rakudo/downloads

[14:22] <pmichaud> they aren't exactly the same as the tarballs I've been creating... but then perhaps they don't need to be.

[14:23] <pmichaud> anyway, I'll try that later.  Having them on github sounds like it could be very useful.

[14:23] <pmichaud> afk, lunch.

[14:30] *** nihiliad joined
[14:30] <PerlJam> In any case ... perhaps someone could update rakudo.org/how-to-get-rakudo to point at github's download section?  That seems to track anything that's been tagged, so as long as releases are tagged it tracks releases.

[14:41] *** azawawi left
[14:42] *** masak joined
[14:43] <masak> greetings, paradise camels.

[14:43] <cspencer> masak: salutations

[14:43] * masak tips hat

[14:43] <moritz_> PerlJam: why don't you do it?

[14:43] <PerlJam> I don't think I have access.

[14:44] <moritz_> PerlJam: then get access by pestering alester 

[14:44] <alester> or if you don't want to do it, tell me what it shouldsay

[14:45] <masak> arnsholt: I'll be doing the Iron Man thing.

[14:45] <Matt-W> hi masak

[14:45] <masak> jeremiah_: thank you! really looking forward to being a mentor.

[14:45] <masak> Matt-W: top of the day, sir.

[14:46] <PerlJam> alester: I don't know what it should say, but give me access and I'll figure it out and write it :)

[14:46] <alester> Tell ya what.

[14:46] <PerlJam> alester: I'm perlpilot on rakduo.org

[14:46] <alester> Figure it out and I'll give you access. :-)

[14:53] <cspencer> moritz_: ping

[14:53] <moritz_> cspencer: pong

[14:54] <cspencer> moritz_: regarding your comments on the trig sub -> setting patch (i can't remember if i'd asked you about this), should i go ahead and apply that?

[14:54] <cspencer> you'd had some concerns about it not being correct for Int types in the future, once the export issue was fixed...

[14:55] <PerlJam> alester: okay, I think I've figured out what to say.

[14:55] <moritz_> cspencer: IMHO yes. If you want to make sure you don't break anything, wait until after tomorrow's release

[14:55] <alester> ok

[14:55] <cspencer> also, is there a better way to share functionality between Int and Num rather that sticking stuff in Any?

[14:55] <cspencer> s/that/than/

[14:56] <moritz_> it's not just Int and Num, it's that sin("3.14") should work

[14:56] <moritz_> so it needs to go into Any, as much as we may hate that

[14:57] <cspencer> ah, right of course

[14:57] <cspencer> hmmm.

[14:57] *** Eimi joined
[14:58] <alester> ok, you can edit the pages now, PerlJam

[14:58] <PerlJam> alester: danke

[14:59] <alester> What's the RT queue email address.

[14:59] <moritz_> [email@hidden.address]
[15:05] *** araujo left
[15:05] *** araujo joined
[15:12] <dukeleto> moritz: oops, I sent a patch to rakudobug that makes the log.t test pass. I didn't run the unmodified code through the new tests to make sure they got properly fudged. /facepalm

[15:15] <moritz_> dukeleto: happens to the best of us

[15:16] <dukeleto> moritz: i will make sure to in the future

[15:21] <jnthn> pmichaud: Bratislava.pm will also hold a celebratory opekačka if we get the release named after us. ;-)

[15:21] <jnthn> Oh, someone just proposed getting drunk on Thursday in support of it too.

[15:22] *** antone joined
[15:22] <antone> hello all

[15:23] <masak> antone: hello.

[15:23] <masak> antone: so, have you tried Perl 6 yet? :)

[15:23] <antone> just got my first try of rakudo to build and felt like celebrating :-)

[15:23] <masak> \o/

[15:23] <moritz_> rakudo: say 'try me out now! ;-)'

[15:23] <p6eval> rakudo 04ee8d: OUTPUT«try me out now! ;-)␤»

[15:24] *** hercynium joined
[15:24] <antone> will do

[15:25] <dukeleto> antone: congrats

[15:27] <antone> it actually runs too .-)

[15:28] <antone> yay

[15:28] <masak> time to start writing that awesome Perl 6 code, then.

[15:29] <antone> where would one go to find the latest docs ?

[15:29] <moritz_> http://perl6-projects.org/

[15:29] <antone> ty

[15:29] <moritz_> it has links to all kinds of stuff

[15:29] <moritz_> including docs

[15:29] <moritz_> and specification

[15:30] <alester> OK, I've submitted two patches with the git format-patch and git send-email.

[15:30] <antone> and svg butterflies, nice

[15:30] <masak> moritz_++ # perl6-projects

[15:31] *** pmurias joined
[15:31] <moritz_> alester: git send-email is suboptimal, because RT swallows the header, thus making the meta information unavailable to the reviewer

[15:31] <pmurias> ruoso: hi again

[15:31] <alester> I also sent it to the mailing list.

[15:31] <moritz_> good

[15:32] <alester> which is prob'ly how we want to do be doin' that.

[15:32] <moritz_> that's why (among other things) I started the mail-patch branch

[15:32] <alester> I don't know what that is.

[15:32] *** rblasch left
[15:32] <moritz_> a script that automates the mail sending

[15:32] <alester> a branch on rakudo or on git?

[15:33] <moritz_> on rakudo

[15:33] *** justatheory joined
[15:33] <PerlJam> moritz_: so ... is it written in perl 6?  :)

[15:33] <moritz_> PerlJam: not quite, off by 1

[15:34] <pmichaud> One would want to be able to report bugs about a broken perl6 w/o having to try to use that broken perl6.  :-)

[15:34] <masak> bah, excuses. :)

[15:34] <masak> how often do we submit bugs that go "the bug reporting facility is broken"? :)

[15:35] <PerlJam> masak: selection bias.

[15:35] * masak steps back and looks at his faulty reasoning

[15:35] <PerlJam> (or I guess it's more like rejection bias :)

[15:35] <masak> aye.

[15:35] *** Eimi left
[15:36] * literal notes that Perl 5's perlbug(1) is written in Perl 5

[15:36] <moritz_> literal++

[15:36] <moritz_> though it might be a *bit* more stable than Rakudo

[15:36] <literal> hehe

[15:36] <pmurias> ruoso: we could deal with the recoursion/DESTROYALL problem by making DESTROYALL take care of free'ing the object

[15:37] <ascent_> moritz_: http://rt.perl.org/rt3//Public/Bug/Display.html?id=64868 - 2 is needed? If you'll get new checkout of rakudo, then you do perl Configure.pl first and you'll get died by Configure.pl.

[15:37] <pmichaud> okay, time for me to review release name candidates.

[15:38] <moritz_> ascent_: you'll either have a parrot installed, or run Configure.pl with --gen-parrot

[15:38] <moritz_> (s/installed/available/)

[15:38] <pmichaud> (RT #64868) -- there's already a check for the Makefile being out of date.  I agree that it would be good to check if the Parrot being used is out of date also.

[15:39] <pmichaud> A good first approximation would be to have the Makefile target also depend on build/PARROT_REVISION

[15:39] <ascent_> moritz_: already done 1 and 3. Cannot reproduce 4, looks like fixed.

[15:39] <pmichaud> so that if that file changes, we do a check against Parrot

[15:40] <pmichaud> any changes to build/Makefile.in, build/PARROT_REVISION, or the Parrot executable itself probably should imply the need for a make realclean and re-configure.

[15:40] <moritz_> ascent_: seems like, yes

[15:41] <pmichaud> #4 is going to change altogether anyway -- the dynpmc.pl script will be going away.

[15:46] <moritz_> pmichaud: in what time frame?

[15:46] *** Psyche^ joined
[15:46] <pmichaud> as soon as I can make sure we have sufficient tools in Parrot to be able to work around it.

[15:47] <pmichaud> (dynpmc.pl itself will probably disappear from the Parrot repo in July.  However, we should not be depending on it, and it's only available in the source directory, not the installed version of Parrot.)

[15:47] <moritz_> "before christmas" (/me runs for cover)

[15:49] <ruoso> pmurias, hmmm... that's an interesting solution

[15:50] <cspencer> perl6: sub :d() { say "foo" }; :d()

[15:50] <p6eval> pugs: OUTPUT«*** ␤    Unexpected ":d"␤    expecting "=", subroutine parameters, trait or block␤    at /tmp/4j62UT0koR line 1, column 5␤»

[15:50] <p6eval> ..rakudo 04ee8d: OUTPUT«Malformed routine definition at line 1, near ":d() { say"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[15:50] <p6eval> ..elf 26362: OUTPUT«Parse error in: /tmp/ge768zQHQo␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: sub :d() { say "foo" }; :d()␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[15:50] <p6eval> ..STD_red...

[15:51] <moritz_> cspencer: don't even think about it :-)

[15:51] <cspencer> moritz_: heh :)

[15:52] <cspencer> is ':' an illegal character for sub names?

[15:52] <moritz_> cspencer: there's been a spec change... $stuff ~~ :e now desgurs to $stuff.e irrc

[15:52] <moritz_> *iirc

[15:52] <moritz_> but I don't know if Rakudo supports that yet

[15:52] <cspencer> ah ok, lemme go look for that...

[15:52] <moritz_> yes, : is not part of an identifier

[15:53] <moritz_> (it should be in the smart match table in S03)

[15:56] <patmat> hey, installed Rakudo right now, but i have a problem if i start a simple code, it is:

[15:56] *** Psyche^ is now known as Patterner

[15:56] <patmat> http://www.pastie.org/454667

[15:56] <patmat> what is it?

[15:57] <patmat> here is the example code:

[15:57] <patmat> http://www.pastie.org/454668

[15:58] <jnthn> replace =$*IN with $*IN.get

[15:58] <cspencer> looks like the code you're running is using the = prefix operator to iterate over $*IN and it's been removed

[15:58] <moritz_> man, pastie.org seems really slow here

[16:00] <patmat> thanks for that, it works.. it was an example from a german Perl6 tutorial (perl-6.de)

[16:00] <patmat> seems like its not that actual :P

[16:00] <masak> well, that detail changed a couple days ago.

[16:01] <patmat> whats $*IN anyway? (i know what it does)

[16:01] <patmat> IN standing for..?

[16:01] <jnthn> STDIN

[16:01] <masak> patmat: standard input.

[16:01] *** clkao_ joined
[16:01] <patmat> oh, thx

[16:01] <masak> patmat: the $ means 'scalar', and the '*' means 'some kind of global/contextual'.

[16:01] <patmat> yup $ i know, right

[16:02] <patmat> i wasn't really into Perl5.. but it seems like Perl6 will be great

[16:02] <masak> it is.

[16:02] <patmat> just gave it a try after some Ruby/Python experience

[16:03] <Tene> rakudo: 'say 1' ~~ /<Perl6::Grammar::TOP>/; say $/.perl

[16:03] <p6eval> rakudo 04ee8d: OUTPUT«No result object␤current instr.: 'parrot;PCT;Grammar;ast' pc 86 (src/PCT/Grammar.pir:87)␤»

[16:04] <patmat> the syntax looks clean

[16:04] <masak> Tene: that one's RT'd.

[16:04] <Tene> moritz_: you said you fixed all of the issues with Match.perl

[16:04] <moritz_> rakudo: 'say 1' ~~ /<Perl6::Grammar::TOP>/; say ~$/

[16:04] <p6eval> rakudo 04ee8d: OUTPUT«say 1␤»

[16:04] <moritz_> rakudo: 'say 1' ~~ /<Perl6::Grammar::TOP>/; say $/.PARROT

[16:04] <p6eval> rakudo 04ee8d: OUTPUT«Perl6Scalar->Match␤»

[16:05] <masak> whoa.

[16:05] *** kane_ left
[16:05] <moritz_> Tene: I don't know what's special about it

[16:05] <pmichaud> I do!  I do!

[16:05] <masak> rakudo: 'say 1' ~~ /<Perl6::Grammar::TOP>/; say $/.chunks.elems

[16:05] <moritz_> rakudo: 'say 1' ~~ /<Perl6::Grammar::TOP>/; say %($/).keys.perl

[16:05] <p6eval> rakudo 04ee8d: OUTPUT«No result object␤current instr.: 'parrot;PCT;Grammar;ast' pc 86 (src/PCT/Grammar.pir:87)␤»

[16:05] <pmichaud> Perl6::Grammar::Top might have difficulty parsing that when there's no action object present.

[16:06] <moritz_> ah

[16:06] <Tene> pmichaud: is that the right way for me to match against the Perl 6 grammar?

[16:06] <pmichaud> Tene: fsvo "right"

[16:06] <moritz_> pmichaud: but it does parse

[16:06] <pmichaud> I think the "official" line at the moment is that it would be    Perl6.parse('say 1')

[16:07] <moritz_> pmichaud: otherwise ~$/ wouldn't reproduce the original string

[16:07] <pmichaud> Perl6::Grammar only exists in Rakudo at the moment.

[16:07] <pmichaud> moritz_: I agree, it parses -- so I'm not entirely sure that's the problem.  But it's a likely candidate.

[16:07] <moritz_> rakudo: Perl6::Grammar.parse('say 1', :actions(Any.new)); say $/.perl

[16:07] <p6eval> rakudo 04ee8d: OUTPUT«Method 'parse' not found for invocant of class ''␤current instr.: 'parrot;P6metaclass;dispatch' pc 662 (src/classes/ClassHOW.pir:171)␤»

[16:08] <moritz_> pmichaud: somehow I suspect missing type mappings or so

[16:08] <pmichaud> Rakudo doesn't think that Perl6::Grammar is an instance of Grammar.

[16:08] <moritz_> could it be that it's not a Perl 6 grammar, and doesn't generate Perl 6 Match objects?

[16:08] <moritz_> ah

[16:08] <pmichaud> I wonder how hard it would be to fix that.

[16:08] <Tene> pmichaud: look at that paste in #parrot.

[16:08] <pmichaud> Might be a pain.

[16:08] <Tene> pmichaud: infix:=> is calling .item() on the Match object

[16:09] <Tene> which is just .tailcall .ast()

[16:09] <moritz_> which should go away, no?

[16:10] <pmichaud> it should return self.

[16:10] <pmichaud> But if we do that, lots of other things will break.

[16:10] <Tene> moritz_: if we can update all of the other languages first.

[16:10] <pmichaud> and actually, it should probably return a reference to self.... but we don't have a way to do that in Parrot.

[16:11] <pmichaud> I wonder how hard it would be to get Perl6::Grammar to be an instance of Grammar.

[16:11] <pmichaud> perhaps I could just addparent it

[16:11] <literal> uhm, how can a package be an instance of anything?

[16:11] <pmichaud> Perl6::Grammar is a grammar.

[16:12] <pmichaud> which is a special type of class

[16:12] <pmichaud> which is a special type of module

[16:12] <pmichaud> which is a special type of package.

[16:12] *** clkao left
[16:12] <pmichaud> more properly, I should say "I wonder how hard it would be to get Grammar to be a parent class of Perl6::Grammar"

[16:12] <literal> :)

[16:15] * pmichaud tries something.

[16:15] *** clkao_ is now known as clkao

[16:20] *** charsbar joined
[16:24] <pmichaud> rakudo:  say Perl6::Grammar ~~ Grammar;

[16:25] <p6eval> rakudo 04ee8d: OUTPUT«0␤»

[16:25] <pmichaud> Tene: possible patch coming up

[16:25] <Tene> :)

[16:26] <pmichaud> oh!  I know another "for sure" fix, though.

[16:26] <pmichaud> > say Perl6::Grammar ~~ Grammar;

[16:26] <pmichaud> 1

[16:26] <lambdabot>   Not in scope: `say'Not in scope: data constructor `Perl6'    Not in scope: ...

[16:29] *** payload joined
[16:30] <pmichaud> okay, maybe I don't.

[16:30] <pmichaud> rakudo:  say Perl6::Grammar.HOW

[16:30] <p6eval> rakudo 04ee8d: OUTPUT«␤»

[16:30] <pmichaud> rakudo:  say Perl6::Grammar.HOW.PARROT

[16:31] <p6eval> rakudo 04ee8d: OUTPUT«Could not locate a method 'PARROT' to invoke on class 'P6metaclass'.␤current instr.: 'die' pc 17498 (src/builtins/control.pir:225)␤»

[16:33] <patmat> so.. a stupid question from me, because it isnt mentioned in the tutorial...

[16:33] <patmat> so

[16:34] <patmat> my $variable ...

[16:34] <patmat> why the my? what is it used for?

[16:34] <patmat> it just isn't mentioned in my actual german tutoril

[16:34] <pmichaud> it declares $variable as being local to the current scope.

[16:34] <patmat> tutorial

[16:34] <patmat> oh as i thought :))

[16:34] <patmat> ok so whats also available instead of my?

[16:34] <masak> patmat: there's also "our".

[16:35] <patmat> oh ok

[16:35] <masak> patmat: and, for attributes in class declarations, "has".

[16:35] *** jeremiah_ left
[16:36] <[particle]> and state

[16:36] *** hcchien joined
[16:36] <masak> and "temp", I guess.

[16:37] <literal> and let? :P

[16:37] <pmichaud> my, our, state, has, constant, augment, and supercede

[16:37] <masak> oh, I want "let" :>

[16:37] <pmichaud> let and temp are currently named unaries, it appears.

[16:38] <masak> any reason for that?

[16:38] <pmichaud> that's just what STD.pm says.  I haven't thought about it myself.

[16:38] *** jeremiah_ joined
[16:38] <PerlJam> wait ... let is still around?

[16:38] <PerlJam> for some reason I thought it had died

[16:38] <masak> no, it's just resting.

[16:39] <literal> haha

[16:39] <masak> S04:113

[16:40] <pmichaud> From S03:4171

[16:40] <pmichaud> "Note that C<temp> and C<let> are I<not> variable declarators, because

[16:40] <pmichaud> their effects only take place at runtime.  Therefore, they take an ordinary

[16:40] <pmichaud> lvalue object as their argument.  See S04 for more details.

[16:40] <pmichaud> "

[16:40] <masak> ah, right.

[16:40] <masak> I was reaching the same conclusion from reading S04.

[16:41] <revdiablo> How are you guys reading the synopses, btw? I struggle to find the best way every time I want to refer to one.

[16:41] <[particle]> ack from checkout

[16:41] <[particle]> or use spack here

[16:41] <masak> revdiablo: often enough, I open the pod files in vim.

[16:41] <PerlJam> revdiablo: vi the pod file from the pugs repo

[16:41] <alester> spack?

[16:42] <masak> buubot: spack continuation

[16:42] <buubot> masak: S04-control.pod:4 S17-concurrency.pod:1

[16:42] <masak> buubot++

[16:42] *** ruoso left
[16:42] <[particle]> spack C<let>

[16:42] <revdiablo> Ah, good idea, I'll checkout the Spec somewhere

[16:42] <[particle]> buubot: spack C<let>

[16:42] <buubot> [particle]: S02-bits.pod:1 S03-operators.pod:1 S04-control.pod:3 S05-regex.pod:2 S12-objects.pod:1

[16:43] <alester> That just tickles me.

[16:43] <[particle]> as it should. it rocks.

[16:44] <masak> neither C<temp> nor C<let> are in S29. :/

[16:44] *** iblechbot left
[16:45] <masak> I must have missed that they are functions when I made my laundry list.

[16:45] *** cdarroch joined
[16:45] *** braceta joined
[16:46] *** braceta left
[16:47] <pmichaud> I often read the specs directly from http://svn.pugscode.org/pugs/docs/Perl6/Spec/

[16:48] <pmichaud> I have it handily bookmarked in my browser :-)

[16:48] <masak> I read them in Firefox too, but I don't bookmark. instead, when I type "S05", the awesomebar realizes what I want.

[16:49] *** ejs joined
[16:49] <masak> Firefox is so good nowadays that other browsers feel slightly quaint to use.

[16:49] <sbp> technically you should refer to them as, e.g., S03:r26362:4171...

[16:49] <masak> well, there's often little sense to refer to older ones.

[16:50] <sbp> could add the phase of the moon too, as a lunations float

[16:50] <masak> people doing archeology may do their own correlating of date and SVN revision.

[16:50] <masak> OH HAI people from the future doing Perl 6 archeology!

[16:50] * masak waves

[16:51] <sbp> quick, spread some disinformation!

[16:51] <masak> they cannot wave back, due to the nature of time.

[16:51] <sbp> don't make it easy for them. they don't like that

[16:51] <masak> well... we should talk a little about the Pery type. :>

[16:52] <revdiablo> sbp: The archaeos I work with do a fine job of making their own lives more difficult, nothing to worry about. =)

[16:52] <sbp> heh, heh

[16:52] <pmichaud> "HELLO FROM THE FUTURE, YOU SHOULD HAVE LEFT want() IN THE SPEC."

[16:52] <cspencer> when did return types from subs start being enforced? :)

[16:52] <pugs_svn> r26363 | duff++ | minor typo

[16:52] <jnthn> cspencer: couple of weeks back :)

[16:52] <pmichaud> this past week, I think.

[16:52] <PerlJam> pmichaud: that would *never* happen.

[16:52] <cspencer> rakudo: our Int sub foo() { return fail() }; foo()

[16:53] <pmichaud> okay, a bit longer.

[16:53] <revdiablo> I wonder if I still have a commit bit on the pugs repo

[16:53] <p6eval> rakudo 04ee8d: OUTPUT«Type check failed on return value␤current instr.: 'die' pc 17498 (src/builtins/control.pir:225)␤»

[16:53] <masak> pmichaud: "DID want() AFTER ALL..."

[16:53] <cspencer> should a fail() fail a type check in this case?

[16:53] <[particle]> revdiablo: if you don't i can fix that

[16:53] <moritz_> revdiablo: I don't think any of them were revoked

[16:53] <jnthn> For upper-case types, I think not...

[16:53] <jnthn> report as rakudobug

[16:54] <revdiablo> I don't have anything to commit, was merely curious

[16:54] * masak submits rakudobug

[16:54] <[particle]> === CREDITS

[16:54] <[particle]> + merely curious

[16:54] <masak> *lol*

[16:59] <pmichaud> Tene:  getting Perl6::Grammar.parse( ) to work is going to require a bit of refactoring.  I'll go ahead and do it, but it should probably wait until after the release.

[16:59] <pmichaud> That should also fix the other issues we're seeing.

[17:00] <pmichaud> okay, what's the best way to get a specific spectest revision number into Rakudo's Makefile...?

[17:04] <pmichaud> Or should I just put a copy of the tests into the tarball directly?

[17:05] *** jan_ joined
[17:08] <pmichaud> Rakudo release tarballs now appear at http://github.com/rakudo/rakudo/downloads

[17:09] *** hercynium left
[17:09] <jnthn> I guess if we're doing this, we should make sure we put a warning somewhere for people wanting to hack on rakudo telling them not to do it on the tarball copy with the out-of-date tests etc.

[17:09] <pmichaud> likely.

[17:10] <pmichaud> What I'm trying to guard against is the case where someone downloads a tarball a week from now, and "make spectest" fails because the tests have been modified since the time of the release.

[17:10] <jnthn> Also, people who are installing stuff are used to configure/make/make test/make install. I wonder if we should have make test in the tarball actually run the spectests...

[17:10] <masak> that should go on the 'how do I submit a bug ticket' page.

[17:10] <pmichaud> ooooh, that's the answer.

[17:10] <pmichaud> I should have "make test" run a local copy of the spectests (held in a different dir)

[17:11] <pmichaud> how's this....

[17:12] <pmichaud> in a tarball release, there's a directory t/99-spectests that contains the copy of t/spec appropriate for that tarball.

[17:12] <pmichaud> "make test" runs those tests.

[17:12] <jnthn> That works.

[17:12] <pmichaud> Perhaps we also have "make spectest" check for t/99-spectests and use that instead of t/spec.

[17:13] <pmichaud> or should "make spectest" always use the latest svn copy?

[17:13] <pmichaud> or perhaps it warns somehow if t/99-spectests exists.

[17:14] *** ejs left
[17:15] <jnthn> *nod*

[17:15] <jnthn> Yeah, warning is good.

[17:15] <pmichaud> might be easy to miss the warning, though.

[17:16] <masak> put the warning in the spectest summary.

[17:16] <pmichaud> that works.

[17:17] * jnthn reviews changelog

[17:17] <pmichaud> yes, we should update CREDITS, ChangeLog, etc.

[17:17] <pmichaud> many thanks to everyone that has been keeping those files up-to-date already.

[17:19] <jnthn> aye

[17:20] <jnthn> It's been kept quite nicely filled out

[17:22] *** japhb joined
[17:23] <pmichaud> hmmm... handling fudging in t/99-spectest/ takes a bit of work.

[17:23] <pugs_svn> r26364 | pmurias++ | [re-smop] added a test which shows a bug in hash

[17:25] *** rindolf left
[17:25] <jnthn> pmichaud: ship a ready-fudged copy?

[17:25] <pmichaud> oh, that's a possibility.

[17:25] <[particle]> not if fudging also deals with icu

[17:25] <pmichaud> that's true also.

[17:26] <pmichaud> fudging itself doesn't modify the output, it just modifies the test files that get run.

[17:26] <jnthn> I thought icu bits were more int he test harness.

[17:26] <pmichaud> well, the harness would still have to be empowered to know what files to skip

[17:26] <moritz_> rakudo: say Positional ~~ Any

[17:26] <p6eval> rakudo e8f624: OUTPUT«1␤»

[17:26] <masak> there was some spec patch I've almost forgotten about... something about getting the character description from a character.

[17:26] <pmichaud> currently the harness is (loosely) tied to t/spec

[17:26] * masak goes looking for something like the Char class in the spec...

[17:27] <pmichaud> I think I'll give the harness an option to process a directory other than t/spec for spectest.data

[17:27] <pmichaud> then it can be t/99-spectest without too much difficulty.

[17:27] *** mhsparks left
[17:27] <jnthn> rakudo: Positional[Int] ~~ Any

[17:27] <p6eval> rakudo e8f624:  ( no output )

[17:27] <jnthn> rakudo: say Positional[Int] ~~ Any

[17:27] <p6eval> rakudo e8f624: OUTPUT«1␤»

[17:28] <jnthn> oh hmm

[17:28] <jnthn> rakudo: say Positional[Int] ~~ Object

[17:28] <p6eval> rakudo e8f624: OUTPUT«1␤»

[17:28] <jnthn> rakudo: say Object ~~ Positional[Int]

[17:28] <p6eval> rakudo e8f624: OUTPUT«0␤»

[17:28] <pmichaud> jnthn: that's because we set Any and Object to always return true, I suspect.

[17:28] <jnthn> rakudo: say Any ~~ Positional[Int]

[17:28] <p6eval> rakudo e8f624: OUTPUT«0␤»

[17:28] <[particle]> pmichaud: why 99- and not release- ?

[17:28] <jnthn> pmichaud: Yeah.

[17:28] <masak> pmichaud: shouldn't they?

[17:28] <pmichaud> [particle]1: so that it matches the 00-parrot and 01-sanity forms

[17:28] <jnthn> But it kinda surprises me...

[17:29] <jnthn> (I thought this was why Positional and Any were sorting to same precedence level.)

[17:29] <moritz_> if you include a copy of t/spec/, why not as t/spec/?

[17:29] <jnthn> rakudo: multi f($x) { 1 }; multi f(@x) { 2 }; f(1); f([1,2])

[17:29] <moritz_> the 'svn up' will simply say 'Skip .'

[17:29] <p6eval> rakudo e8f624:  ( no output )

[17:29] <jnthn> rakudo: multi f($x) { 1 }; multi f(@x) { 2 }; say f(1); say f([1,2])

[17:29] <p6eval> rakudo e8f624: OUTPUT«1␤2␤»

[17:29] <jnthn> oh hmm

[17:29] <pmichaud> oh, that's possible too.

[17:30] <pmichaud> I was worried about what svn up would do in that case, but you're right, it'll skip.

[17:30] <masak> strange that the above case resolves, but not the one in the RT thread.

[17:30] <jnthn> So the RT ticket I responded to actually brings up an issue that's nothing to do with sigil based dispatch...

[17:30] <pmichaud> We could even svn-up only if .svn exists.

[17:30] <jnthn> masak: Yeah.

[17:30] <moritz_> jnthn: I think it's something else

[17:30] <masak> jnthn: then what has it to do with?

[17:30] <[particle]> so why not just svn export instead of including?

[17:31] <jnthn> rakudo: multi f($x, %h?) { 1 }; multi f(@x) { 2 }; say f(1); say f([1,2])

[17:31] <p6eval> rakudo 5c8015: OUTPUT«1␤Ambiguous dispatch to multi 'f'. Ambiguous candidates had signatures:␤:(Any $x, Associative.new() %h?)␤:(Positional.new() @x)␤␤current instr.: '_block14' pc 132 (EVAL_16:56)␤»

[17:31] <moritz_> not matching the sigil-implied type is one malus

[17:31] <pmichaud> oh, I was planning svn export, yes.

[17:31] * masak finds he cannot make the spec patch because he doesn't grok Unicode levels enough

[17:31] <pmichaud> as far as putting a copy of spec in the tarball.

[17:31] <moritz_> and not filling up an optional parameter is also one malus

[17:31] <jnthn> Ah, something to do with optional parameters...

[17:31] <pmichaud> Anyway, we're in basic agreement that the release tarball should include the corresponding t/spec/ ?

[17:31] <[particle]> yes.

[17:31] <jnthn> pmichaud: I agree with that, yes.

[17:32] <pmichaud> okay.  I shall make it so.

[17:32] <moritz_> did I miss a discussion about that?

[17:32] <Tene> re want(): We could make any use of want() return a proxy object from the sub itself that holds a continuation that, when evaluated, invokes the continuation with the type it's being evaluated for!

[17:32] <pmichaud> moritz_: about release tarball holding t/spec ?

[17:32] <moritz_> pmichaud: yes

[17:32] <pmichaud> Tene: hmmm?

[17:33] <Tene> pmichaud: a non-serious suggestion.

[17:33] <pmichaud> Tene: I'm a bit confused.  What you describe sounds like the way we're talking about doing contextual returns, yes.

[17:33] <pmichaud> oh.

[17:33] <Tene> pmichaud: no, what we're doing is having the sub explicitly return a proxy object.

[17:33] <Tene> what I suggested was that calling want() takes a continuation at that point and immediately returns a proxy object from the sub itself.

[17:34] <Tene> when that proxy object is evaluated, it invokes the continuation and returns the appropriate context back into where want() was called.

[17:34] <pmichaud> moritz_: we're just now having the discussion.

[17:34] <pmichaud> (there's not been a discussion prior)

[17:34] <moritz_> ah, ok

[17:35] <moritz_> what's wrong with svn up'ping a specific revision?

[17:35] <pmichaud> I have to store the revision number somewhere.

[17:35] <pmichaud> Also, that would presume that svn.pugscode.org is always available

[17:35] <Tene> and an internet connection available

[17:35] <pmichaud> (as in, if we move the spectests to a different location at some point...)

[17:35] <moritz_> that's less to store than a checkout ;-)

[17:36] <moritz_> pmichaud: don't get me wrong, but do you think that early rakudo releases are for eternity?

[17:36] <pmichaud> agreed that including the spectests would increase the size of the tarball.

[17:36] <pmichaud> moritz_: as in, do I think people will use them for long?  No.

[17:36] <moritz_> pmichaud: I wouldn't mind if it stopped working in 4 month, because it'll be hopelessly outdated by then

[17:36] <[particle]> svn export is of the tests is very small, especially gzipped

[17:37] *** LylePerl joined
[17:37] <Tene> moritz_: we've already had instances of people downloading the tarball, running 'make spectest', and then reporting test failures in here because we've already updated the spectests since the release

[17:37] <pmichaud> t/spec looks like 3MB unzipped on my machine

[17:37] <pmichaud> Tene: I think moritz_ is simply referring to whether the repo is available in 4 months

[17:37] <[particle]> pmichaud: export or checkout?

[17:37] <pmichaud> particle:  export

[17:38] <moritz_> Tene: I know. That's why I said "check out a specific revision"

[17:38] <pmichaud> 3640    spec

[17:38] <moritz_> and I don't see svn.pugscode.org going away soon...

[17:38] <[particle]> gone are the days of ascii....

[17:38] <moritz_> if we change something, it'll remain as a read-only mirror

[17:38] <pmichaud> right.

[17:39] <pmichaud> 440K zipped.

[17:41] *** jhorwitz joined
[17:41] <pmichaud> I can see handling t/spec either way (copy in tarball or checkout of specific revision) -- any votes for/against either of those approaches?

[17:42] <Tene> I vote for copy

[17:42] <moritz_> 440K is not the world

[17:42] <moritz_> ok, copy

[17:42] <moritz_> probably less effort

[17:43] <pmichaud> it's about the same effort either way.

[17:43] <pmichaud> specific revision checkout is slightly more effort, but not significantly so.

[17:46] *** ejs joined
[17:49] <[particle]> copy

[17:49] <pmichaud> okay, 3 votes for copy sounds like a trend to me.

[17:50] <pmichaud> moritz++ for reminding me that "svn up" in an exported dir is a no-op.

[17:50] <pmichaud> that makes it all very simple to manage.

[17:50] <frettled> pmichaud: is this the same discussion as yesterday?

[17:50] <pmichaud> frettled: possibly.

[17:50] <pmichaud> I had a lot of discussions yesterday, and the day before that, and the day before that, and ...   Much of it is a blur.

[17:51] <frettled> pmichaud: hehe

[17:51] *** barney joined
[17:51] <pmichaud> frettled: we're currently planning to include a copy of the spectests in release tarballs.

[17:51] <moritz_> at least on IRC we have our automatic note taking bot ;-)

[17:51] <frettled> pmichaud: I'm all for it, as long as it's also easy to get updated tests :)

[17:52] <pmichaud> frettled: well, if one wants updated tests, they really should be using the git checkout and not release tarballs.

[17:52] <[particle]> agreed.

[17:52] <frettled> pmichaud: quite

[17:52] <pmichaud> because updated tests on a release tarball are almost certain to have some failures.

[17:53] <pmichaud> although that might be an interesting way to measure progress :-)

[17:53] <frettled> hmm :)

[17:53] *** masak left
[17:53] <frettled> I suddenly had a vision of something like popularity-contest (Debian's package popularity thingy), but for spectests.

[17:54] * moritz_ wishes he had popularity-contest for CPAN modlues

[17:54] <frettled> that, too, but we'll get that when we start using Debian's packaging system for Perl 6 modules.

[17:55] * frettled whistles and stares at nothing in particular.

[17:55] <Tene> I've had a lot of conversations about CPAN lately

[17:55] <Tene> and significant problems with the CPAN culture

[17:56] <frettled> s/$/s/

[17:56] <moritz_> frettled: now your string is unlimited (since you removed the end) ;-)

[17:56] <Tene> heh

[17:56] <Tene> $ is zero-width match

[17:56] <Tene> :P

[17:57] <moritz_> ORLY?

[17:58] *** jferrero left
[17:58] <frettled> I suppose one could ask the suitable bot for that as well.

[17:59] <moritz_> frettled: we have such a bot in #perlde ;-)

[17:59] *** szabgab joined
[17:59] <moritz_> frettled: but it only works with literals, not with regexes, after I crafted a backtracking-until-heat-death-of-the-universe regex

[18:00] <frettled> moritz_: ah, those :D

[18:07] <cspencer> if i wanted to look at getting the s:ii/.../ syntax working, where might i start? :)

[18:07] <frettled> This is my fault, isn't it?

[18:07] <pmichaud> cspencer: the tricky part is parsing the adverbs.

[18:08] <cspencer> pmichaud: is the adverb parsing part not implemented yet?

[18:08] <pmichaud> cspencer: that's correct.

[18:08] <cspencer> ok, maybe i'll stick to a somewhat lower hanging fruit then :)

[18:08] <pmichaud> although technically in this case they're modifiers.

[18:08] <pmichaud> But still, not yet parsed.

[18:09] <cspencer> pmichaud: i'll push out the trig -> setting patch tomorrow after the release, if it's okay with you

[18:10] <pmichaud> cspencer: that sounds good.  I had a question about the radians/gradians/degrees switch, though.

[18:10] <cspencer> ok

[18:11] <cspencer> pmichaud: what question was that? 

[18:11] <pmichaud> nm, it's that way in the spec.

[18:11] <pmichaud> I was curious about the check for ^r / ^g / ^d as opposed to the entire term.

[18:11] <pmichaud> but that's indeed what S32 says, so we go with that.

[18:11] <cspencer> yeah, i'd just followed the spec myself, though it seemed a little odd

[18:12] <frettled> hm

[18:12] *** dukeleto|work joined
[18:13] <cspencer> i should create a set of tests to cover the degree/gradian parts too

[18:13] <pmichaud> do we have tests for the trig functions?

[18:13] <pmichaud> heh

[18:13] <cspencer> :)

[18:15] <frettled> I see what you mean about seeming odd.

[18:16] *** ejs left
[18:16] <PerlJam> sin($n :base('gratuitious'))

[18:17] <PerlJam> cos($n :base('radiation'))

[18:17] <cspencer> tan($n :base('dodecahedron'))

[18:18] <moritz_> tan($x, :base('dem'))

[18:18] <frettled> cotan($w, :base('mu'))

[18:19] <PerlJam> seems like those should have some one-letter adverbs  (maybe that's what's intended)

[18:19] <PerlJam> sin($x :r)

[18:19] <pmichaud> no, it's definitely  :base<r>

[18:20] <pmichaud> or just 'r'

[18:20] <pmichaud> sin($x, 'radians')

[18:20] * moritz_ would like :deg :gra(d) :rad

[18:20] <pmichaud> sin($x, :base('radians'))

[18:20] <pmichaud> sin($x, :base<radians>)

[18:20] <moritz_> tan $kard's :base<room>;

[18:20] <pmichaud> :deg :gra(d) :rad were discussed a few years ago

[18:21] <moritz_> never mind then

[18:21] <pmichaud> and ultimately rejected in favor of :base, I think.

[18:21] <moritz_> all your base are...

[18:21] <frettled> I wondered why noone had said that earlier, perhaps we're just too tired of the meme.

[18:22] <frettled> sin($x, :base<meme>)

[18:22] <pmichaud> sin($x, :base<are belong to us>)

[18:22] <PerlJam> Hmm.

[18:22] <PerlJam> what happens when you actually pass a list like that?

[18:23] <[particle]> Failure

[18:23] <pmichaud> ummm... it's a list?  ;-)

[18:23] <pmichaud> in this particular case it would end up being an Array ~~ Regex match

[18:23] <moritz_> the regex match stringifies the list, probably

[18:24] <pmichaud> and since none of the elements of the list match ^r ^g ^d, we'd end up with the default.

[18:24] <pmichaud> sin($x, :base<alpha beta gamma delta>)   would likely choose gradians, though.

[18:24] <moritz_> which seems kind of scary to me :/

[18:24] <PerlJam> me too

[18:24] <frettled> ooooh-kaaay

[18:25] <frettled> I sense an obfuscated perl 6 contest coming up

[18:25] <pmichaud> or, more precisely, it would choose whichever option was tested first in the code

[18:25] <skids> Ah cmon we have to leave some stuff in there for the obfuscated code contests :-)

[18:25] <frettled> yes!

[18:26] *** FurnaceBoy left
[18:27] <PerlJam> skids: except this would be more like non-deterministic programming :)

[18:28] <pmichaud> cspencer: I'm wondering if !convert-to-base should just be !base, though.

[18:28] <pmichaud> I guess a longer name is fine.

[18:28] <cspencer> sure, i can do that

[18:28] <pmichaud> whatever feels righter to you.

[18:28] <cspencer> i'm not particularly attached to the name :)

[18:29] <cspencer> i think i'd picked it because at one point i thought i'd have to have a convert-from-base, but that wasn't the case :)

[18:29] *** pmurias left
[18:30] <moritz_> maybe for atan/asin/acos etc?

[18:30] <pmichaud> yes, I wondered about those also.

[18:30] <pmichaud> well, if we have a !base then we can have a !debase also :-P

[18:30] <cspencer> oh perhaps, lemme go look at those...

[18:30] <pmichaud> then we can really debase our scalars :-P

[18:30] <cspencer> hah :)

[18:31] <Tene> We need make sure Perl remains appealing to the bdsm crowd...

[18:33] <frettled> don't worry

[18:34] <Tene> Do we still have tie?

[18:34] <Tene> ;)

[18:34] <moritz_> OH NOEZ, we lost that

[18:34] <moritz_> but we have binding

[18:35] <Tene> and bind()

[18:35] <pmichaud> We do have Tieable, though.  :-)

[18:35] *** eternaleye left
[18:35] *** ejs joined
[18:36] <skids> (and chaining ops)

[18:36] <wayland76> Fairly simple solution -- Whip.pm :)

[18:36] <pmichaud> use Whip;

[18:36] <Tene> and we certainly have a lot of subs.

[18:36] <moritz_> lol

[18:37] <skids> rename roundrobin to whip :-)

[18:37] <wayland76> actually, that's not a bad idea :)

[18:37] <skids> (can't blame a guy for trying)

[18:37] <Tene> And we can play with roles.

[18:37] *** iblechbot joined
[18:37] <wayland76> whip is much shorter than roundrobin

[18:37] <wayland76> and we don't have to tell anyone where we got the name

[18:37] <skids> I might add it is also more descriptive.

[18:38] <wayland76> Then again, no-one like my ARGH suggestion either :)

[18:38] <Tene> no doms for our subs, though.

[18:38] <skids> I noticed ARGH but not what it was for -- hash of ARGV somehow?

[18:38] <wayland76> Basically %*OPTS

[18:39] <PerlJam> wayland76: you've got to admit that it's a crazy rename.

[18:39] <wayland76> But no-one liked it, although moritz_++ told me that I could have my cake, and let others have theirs too :)

[18:39] <wayland76> Oh, admitted

[18:39] <wayland76> Even crazier than the roundrobin -> whip one that was just proposed

[18:39] <wayland76> At least that has the length argument in its favour

[18:40] <frettled> :)

[18:42] <wayland76> PerlJam: I always use %ARGH in my Getopt scripts, though

[18:42] <literal> wayland76: you mean in Perl 5?

[18:42] <wayland76> literal: Yes; sorry for lack of clarity :)

[18:43] <literal> what do you need an %ARGH for there?

[18:43] <wayland76> Anyway, it's probably my bedtime.  It's 4am here

[18:43] <PerlJam> wayland76: that's okay, I often use $o rather than $self in my perl 5 OO programs  :)

[18:43] <literal> I always just call GetOptions() and assign the options straight to lexicals

[18:43] <wayland76> GetOptions(\%ARGH, 'length|l=i');

[18:44] <wayland76> I usually like the hash better

[18:44] <wayland76> (but don't read drug references into that :) )

[18:44] <frettled> wayland76: you seem to be confusing "bedtime" with "wakeup call" ;)

[18:45] <wayland76> frettled: Quite possibly.  I'm by myself for a couple of weeks, so I'm doing the "sleep when sleepy, eat when hungry" thing

[18:45] <frettled> wayland76: aw, man, I miss those days.

[18:46] *** ejs left
[18:46] *** Psyche^ joined
[18:46] <wayland76> Well, I'm also trying to get my whole sleeping schedule turned around again by Sunday, so that I'll be able to get up early, and stay awake until at least 7pm :)

[18:47] * skids discovers given 1 { when 1 { loop {}}} as a handy make-do for NYI LABEL.last

[18:47] <wayland76> Btw, someone on #parrot just told the purl bot to open the pod bay doors :)

[18:47] <pugs_svn> r26365 | azawawi++ | [S:H:P6] updated to version 0.043 (not released yet).

[18:47] <wayland76> What's NYI?

[18:48] <wayland76> Oh I know

[18:48] <skids> Not Yet Implemented

[18:48] <wayland76> Not yet implemented :)

[18:48] <wayland76> skids: Can you add that to the Perl6 Setting as LABEL.last?

[18:49] <skids> IIRC labels are not even parsed yet.

[18:49] <skids> rakudo: label: for 1..2 { 1; }

[18:49] <p6eval> rakudo 5c8015: OUTPUT«Statement not terminated properly at line 1, near ": for 1..2"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[18:50] *** M_o_C left
[18:51] <wayland76> std: label: for 1..2 { 1; }

[18:52] <p6eval> std 26365: OUTPUT«ok 00:02 35m␤»

[18:52] <wayland76> masak: label: for 1..2 { 1; }

[18:52] <wayland76> The "masak" compiler must be offline :)

[18:52] <frettled> yup

[18:52] *** Patterner left
[18:52] *** Psyche^ is now known as Patterner

[18:52] <frettled> I was tempted to do a nick change and a quick parody, but couldn't arse myself into it.

[18:52] <cspencer> i don't think that S32-Numeric indicated that the $base param to the trig functions was named, but should i implement it that way none the less?  ie funcname(:$base = 'radians') in the signature

[18:53] <pmichaud> well, using $base = 'radians'  allows it to be specified either positionally or by name.

[18:53] <wayland76> I don't think the S32 people knew what they were doing much, with the possible exception of the IO stuff

[18:53] <pmichaud> (Rakudo doesn't implement that, though, due to some Parrot limitations)

[18:54] <pmichaud> using :$base = 'radians'  would mean it could only be accessed by name.

[18:54] <frettled> wayland76: it's still listed as "draft", so I suppose it's open to changes.

[18:54] <wayland76> bed afk & :)

[18:54] <pmichaud> s/accessed/specified/

[18:54] <cspencer> right, should i leave it as is and wait for a patch that allows positionals to be accessed as named?

[18:54] <pmichaud> cspencer: I'd probably follow the spec for now, yes.

[18:54] <wayland76> No, it's listed as draft because it's got holes in it big enough to drive a truck through, and that makes it drafty :)

[18:54] <cspencer> ok

[18:55] <frettled> wayland76: sideways!

[18:55] <wayland76> frettled: Feel free to hack away on it, though :)

[18:55] *** kaether joined
[18:55] <frettled> kthx

[18:55] <wayland76> I should mention, I'm the one who created most of the S32 stuff, mostly from bits and pieces from elsewhere, especially S29

[18:56] <kaether> Anyone see TimToady online today?

[18:56] <wayland76> So when I say they didn't know what they were doing, I know what I'm talking about :)

[18:56] <moritz_> @seen TimToady 

[18:56] <lambdabot> TimToady is in #perl6. I last heard TimToady speak 2d 1h 22m 27s ago.

[18:56] <wayland76> @seen TimToady

[18:56] <lambdabot> TimToady is in #perl6. I last heard TimToady speak 2d 1h 22m 30s ago.

[18:56] <wayland76> Sorry :)

[18:56] <MrKrueger> good night

[18:56] <frettled> yes, good night!

[18:56] <kaether> Anyone know if he is still in Oslo or at SFO?

[18:56] <wayland76> 'night MrKrueger

[18:56] <kaether> My wife is at the airport waiting for him =-)

[18:56] <frettled> I think TimToady is playing at being tourist.

[18:56] <wayland76> ...or UFO :)

[18:57] <MrKrueger> ;)

[18:57] <kaether> We think the wrong day was perhaps communicated...

[18:57] <wayland76> (UFO was supposed to follow SFO, but it's funnier after tourist :) )

[18:57] <pmichaud> I'm pretty sure that TimToady is not back in SFO yet.

[18:58] <frettled> I thought he was leaving tomorrow.

[18:58] *** MrKrueger left
[18:58] <wayland76> @traceroute TimToady

[18:58] <lambdabot> Unknown command, try @list

[18:58] <pmichaud> I know they were planning to spend at least one more day in Oslo sightseeing, and so it's very unlikely they could have made it back to SFO this early.

[18:58] <kaether> yeah... I think Glo gave us the wrong day.

[18:58] <pmichaud> I left Oslo yesterday morning (Oslo time) and didn't arrive in DFW until yesterday evening (DFW time)

[18:58] *** rblasch joined
[18:59] <frettled> kaether: I'm pretty sure that tomorrow is the day they're leaving, but I don't recall at which time.

[18:59] <kaether> Ok, sending abort sequence to airport pickup

[18:59] <skids> UFO = unleft from oslo :-)

[18:59] <frettled> kaether: we could try asking szabgab ...

[18:59] <frettled> he's still in Oslo, maybe he's seen TimToady afoot.

[18:59] <frettled> or sjn, perhaps.

[18:59] <pmichaud> phone, today?

[18:59] <frettled> brb after checking with sjn

[19:00] <szabgab> no TimToady sighting here

[19:00] * skids is glad he doesn't get stalked by #perl6

[19:01] <kaether> Someone else in the family thought maybe they'd said Thursday, so we're reasonably sure we're a little early now.

[19:01] <[particle]> pmichaud: i was planning on making the phone call this week, i fthere is one

[19:01] <[particle]> (it has been three weeks since my last call)

[19:01] <pmichaud> [particle]:  I'm planning on being there also, so there's at least two of us :-)

[19:01] <frettled> kaether: sjn confirms Thursday as day of departure

[19:01] <kaether> thanks

[19:02] <kaether> I <heart> IRC.

[19:02] *** dukeleto|work left
[19:03] <moritz_> .u heart

[19:03] <skids> Isn't that \C[HEART] or something?

[19:03] <moritz_> rakudo: say "\c[heart]"

[19:03] <p6eval> rakudo 5c8015: OUTPUT«perl6regex parse error: Unrecognized character name heart at offset 8, found 'h'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10792 (compilers/pge/PGE/Perl6Regex.pir:1367)␤»

[19:03] <moritz_> rakudo: say "\c[black heart]"

[19:03] <p6eval> rakudo 5c8015: OUTPUT«perl6regex parse error: Unrecognized character name black heart at offset 8, found 'b'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10792 (compilers/pge/PGE/Perl6Regex.pir:1367)␤»

[19:03] <pmichaud> rakudo:  say "\c[black heart suit]"

[19:03] <p6eval> rakudo 5c8015: OUTPUT«♥␤»

[19:04] *** dukeleto|work joined
[19:04] * frettled idles, board games at sjn's place.  :)

[19:04] <pmichaud> rakudo:  say "\c[white heart suit]"

[19:04] <p6eval> rakudo 5c8015: OUTPUT«♡␤»

[19:04] <skids> which games?

[19:05] *** barney left
[19:07] <Tene> where did phenny go?

[19:07] * Tene harasses sbp 

[19:08] <sbp> good question!

[19:08] *** phenny joined
[19:08] <Tene> .u heart

[19:08] <phenny> U+2766 FLORAL HEART (❦)

[19:08] <Tene> .u heart suit

[19:08] <phenny> U+2661 WHITE HEART SUIT (♡)

[19:09] <Tene> .u umbrella

[19:09] <phenny> U+2602 UMBRELLA (☂)

[19:09] <Tene> rakudo: say "\c[umbrella]"

[19:09] <p6eval> rakudo 5c8015: OUTPUT«☂␤»

[19:11] <pmichaud> rakudo:  say "\c[umbrella]".ord

[19:11] <p6eval> rakudo 5c8015: OUTPUT«9730␤»

[19:12] <Tene> rakudo:  say "\c[umbrella]".ord.fmt('%x')

[19:12] <p6eval> rakudo 5c8015: OUTPUT«2602␤»

[19:14] <Tene> pmichaud: where can I see the \c stuff implemented?

[19:14] <pmichaud> Tene: I just ask ICU for the information.

[19:15] <pmichaud> The code for that is in src/pmc/codestring.pmc

[19:15] <pmichaud> the "codename_to_ord" method, iirc

[19:15] <Tene> charname

[19:15] <pmichaud> yes, charname.

[19:32] *** kaether_ joined
[19:35] *** kaether left
[19:35] *** rblasch1 joined
[19:35] *** kaether_ is now known as kaether

[19:36] *** mib_op56hu joined
[19:38] *** mib_op56hu left
[19:51] *** davidad joined
[19:53] *** rblasch left
[20:00] <ascent_> moritz_,pmichaud: RT #64868 - patch ready.

[20:02] <pmichaud> ascent_: excllent.  I'll look at the patch a bit later.  It seems to do a fair bit of refactoring, so I may wait to apply after the relese.

[20:02] <pmichaud> *release

[20:03] <moritz_> ascent_+++

[20:03] <moritz_> ascent_++ actually ;-)

[20:03] <ascent_> :)

[20:16] *** jhorwitz left
[20:16] *** LadyLunacy joined
[20:17] <moritz_> rakudo: my $möh = 3; say $möh;

[20:17] <p6eval> rakudo 5c8015: OUTPUT«error:imcc:syntax error, unexpected USTRINGC, expecting STRINGC ('unicode:"$m\x{f6}h"')␤   in file 'EVAL_17' line 44␤Lexical '$möh' not found␤current instr.: '_block14' pc 71 (EVAL_17:47)␤»

[20:18] *** azawawi joined
[20:18] *** icwiener left
[20:22] *** samlh joined
[20:27] *** wollmers joined
[20:28] *** LadyLunacy left
[20:32] <payload> hiho     is there a recording of the talk of larry? http://sipb.mit.edu/projects/talks/2009/larry_wall/

[20:34] <moritz_> payload: I don't know, but on google video you'll find a tech talk which was quite similar, in big parts

[20:35] *** davidad left
[20:35] <PerlJam> payload: there was supposed to have been a video available somewhere, but I don't know where.

[20:35] <PerlJam> payload: you can find an older version of that talk online though.

[20:37] <payload> thx PerlJam und danke moritz_ http://www.youtube.com/watch?v=JzIWdJVP-wo

[20:38] *** frew|work joined
[20:48] *** masak joined
[20:54] *** alester left
[20:56] *** exodist left
[20:56] *** exodist joined
[20:56] *** szabgab left
[20:57] *** azawawi left
[20:58] <wollmers> I wonder if the specs allow insignificant white-space in literals, e.g like say "\x[ c4, 20, c4 ]";

[20:59] <masak> std: say "\x[ c4, 20, c4 ]";

[20:59] <p6eval> std 26365: OUTPUT«ok 00:04 35m␤»

[20:59] <masak> rakudo: say "\x[ c4, 20, c4 ]";

[20:59] <p6eval> rakudo 5c8015: OUTPUT«perl6regex parse error: Invalid digit in \x[...], \o[...], or \c[...] at offset 19, found ' '␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10792 (compilers/pge/PGE/Perl6Regex.pir:1367)␤»

[20:59] <masak> wollmers: opinions differ. :)

[20:59] * masak submits rakudobug

[21:01] *** rblasch joined
[21:02] <pmichaud> I think the whitespace is intended to be allowed, yes.

[21:02] <pmichaud> rakudo: say "\x[c4, 20, c4 ]"

[21:02] <p6eval> rakudo 5c8015: OUTPUT«perl6regex parse error: Invalid digit in \x[...], \o[...], or \c[...] at offset 18, found ' '␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10792 (compilers/pge/PGE/Perl6Regex.pir:1367)␤»

[21:04] *** pmurias joined
[21:04] *** pmurias left
[21:04] <Tene> pmichaud: why does Failure print to stderr instead of throwing a warning?

[21:04] <pmichaud> Because at the time Failure was implemented, throwing a warning wasn't available.

[21:05] <Tene> Can I fix it?

[21:05] <pmichaud> I'm not sure it should be a warning.  It may need to be something more severe.

[21:05] <pmichaud> And it may not be the same for all Failures.

[21:05] <pmichaud> Beyond that, Failure really needs to become a role.

[21:06] <pmichaud> If you want to set things so that Failure objects simply throw their associated exception, I can probably agree to that.

[21:07] *** rblasch1 left
[21:07] <pmichaud> I'd prefer the change to wait until after the release, though.

[21:07] <Tene> for now, should I set severity to warning so they auto-resume?

[21:07] <PerlJam> rules can't yet be parameterized can they?

[21:07] <Tene> the motivation to get it in an exception is so you can catch it.

[21:08] <pmichaud> setting severity to warning is probably okay.

[21:08] <pmichaud> But I'd also like a note in the code that says "we're likely to refactor all of this into a Role"

[21:09] <pmichaud> PerlJam: no, we don't have parameters on rules yet.

[21:11] *** hirschnase joined
[21:12] <wollmers> std: say "\c[ SPACE, SPACE ]";

[21:13] <Tene> Yay, segfault!

[21:13] <p6eval> std 26365: OUTPUT«ok 00:04 35m␤»

[21:13] <Tene> No time now to dig into it... nm on that exception

[21:13] <wollmers> rakudo: say "\c[ SPACE, SPACE ]";

[21:13] <p6eval> rakudo 5c8015: OUTPUT«perl6regex parse error: Unrecognized character name SPACE  at offset 16, found 'S'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10792 (compilers/pge/PGE/Perl6Regex.pir:1367)␤»

[21:13] <moritz_> std: say "\c[foobar]"

[21:13] <p6eval> std 26365: OUTPUT«ok 00:04 35m␤»

[21:14] <moritz_> STD.pm doesn't do any validation of character names

[21:14] <wollmers> STD.pm allows white-space

[21:14] *** masak left
[21:15] <wollmers> rakudo: say "\c[SPACE, SPACE]";

[21:15] <p6eval> rakudo 5c8015: OUTPUT«  ␤»

[21:15] *** maja_ joined
[21:15] <pmichaud> interesting.

[21:15] <wollmers> moritz: got the difference?

[21:15] <moritz_> wollmers: yes, I thought it was s/SPACE/BLANK/ that was wrong

[21:16] <moritz_> wollmers: I never remember which is the new and which is the old name

[21:17] *** hirschnase left
[21:19] <wollmers> moritz: unicode.org says 'SPACE'

[21:19] <moritz_> I should probably believe them ;-)

[21:21] <wollmers> STD.pm allows white-space around code points.

[21:21] <moritz_> wollmers: please file a bug report (mail:rakudobug@perl.org)

[21:22] <wollmers> std: say "\c[       DOT ABOVE , SPACE ]";

[21:22] <p6eval> std 26365: OUTPUT«ok 00:04 35m␤»

[21:22] <literal> std: say "\c[OH MY GOD UNICODE]";

[21:22] <p6eval> std 26365: OUTPUT«ok 00:04 35m␤»

[21:23] <wollmers> moritz: ok, tomorrow. Specs could also be more precise.

[21:24] <moritz_> wollmers: feel free to clarify them ;-)

[21:24] *** wollmers left
[21:40] *** semn2kdojinej joined
[21:43] *** skids left
[21:43] *** exodist left
[21:45] <pugs_svn> r26366 | moritz++ | [t/spec] simplify unicode.t a bit

[21:45] <pugs_svn> r26367 | moritz++ | [t/spec] fix unicode.t, and fudge for Rakudo

[21:46] <pmichaud> moritz_: is that fudging based on your local Rakudo?

[21:46] <pmichaud> or based on the current head.

[21:46] <pmichaud> ?

[21:46] <moritz_> pmichaud: rakudo master + svn HEAD

[21:46] <moritz_> pmichaud: but it's not in t/spectest.data

[21:46] <pmichaud> okay.

[21:46] <pmichaud> that works for me.

[21:47] *** wknight8111 joined
[22:12] *** iblechbot left
[22:22] *** rblasch1 joined
[22:25] * ingy move his irsii #perl6 window to #6

[22:25] <ingy> pmichaud: who started this channel?

[22:33] *** ispy_ joined
[22:40] *** nihiliad left
[22:41] *** rblasch left
[22:43] <Tene> ingy: chanserv says audrey2, 2005

[22:54] *** Limbic_Region joined
[22:54] *** payload left
[22:54] *** payload joined
[22:55] *** JarJarBinks joined
[23:02] <ingy> Tene: it was me actually :)

[23:02] <ingy> I invited audrey

[23:02] <ingy> she prolly registered it

[23:02] <Tene> :)

[23:24] *** lumi_ joined
[23:28] *** ispy_ left
[23:32] *** frew|wor1 joined
[23:32] <LylePerl> rakudo: $*CWD.say

[23:32] <p6eval> rakudo 5c1952: OUTPUT«Use of uninitialized value␤␤»

[23:34] *** rblasch1 left
[23:34] *** LylePerl left
[23:38] *** lumi left
[23:42] *** justatheory left
[23:44] *** bacek_ joined
[23:55] *** fridim_ left
[23:58] *** skids joined
[23:58] *** frew|wor2 joined
