[00:03] *** KatrinaTheLamia left
[00:08] *** japhb left
[00:09] *** KatrinaTheLamia joined
[00:14] *** nihiliad joined
[00:16] <pmichaud> rakudo:  class A { };  multi sub infix:<+>(A $a, $b) { 5 };   say A + 1;

[00:16] <p6eval> rakudo 0d4fe0: OUTPUT«5␤»

[00:16] <pmichaud> \o/

[00:18] <pmichaud> rakudo:  class A { };  multi sub infix:<+>(A $a, $b) { 5 };   say (* + 1).(A);

[00:18] <p6eval> rakudo 0d4fe0: OUTPUT«5␤»

[00:18] <pmichaud> \o/!

[00:24] *** ihrd joined
[00:25] *** Avada left
[00:32] <dalek> rakudo: 81d6216 | pmichaud++ |  (6 files):

[00:32] <dalek> rakudo: Move prefix:<-> into the setting.

[00:32] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/81d6216f5681a0ada0f6bc4eb0419950e030b486

[00:37] *** Whiteknight left
[00:40] <pmichaud> rakudo: say -(3|4)

[00:40] <p6eval> rakudo 0d4fe0:  ( no output )

[00:43] <quietfanatic> Is there a way to make a tail call in p6?

[00:43] <quietfanatic> like goto &sub in p5?

[00:43] <pmichaud> yes

[00:43] <pmichaud> (looking it up again in S06)

[00:44] <pmichaud> nextsame and nextwith

[00:45] <quietfanatic> But that just calls the next multi, doesn't it?

[00:45] <pmichaud> right

[00:45] <pmichaud> I guess not, then.

[00:45] <pmichaud> (I was probably mis-remembering the 'tail call' bit.)  Although perhaps S04 has something.

[00:45] <quietfanatic> Oh wait, there may be a method form

[00:45] <cognominal> I suppose that's up to the compiler to decide

[00:46] <quietfanatic> rakudo: sub a {say 1}; sub b {&a.nextsame; say 2}; a()

[00:46] <p6eval> rakudo 0d4fe0:  ( no output )

[00:46] <quietfanatic> rakudo: sub a {say 1}; sub b {&a.nextsame; say 2}; b()

[00:46] <p6eval> rakudo 0d4fe0:  ( no output )

[00:46] <quietfanatic> huh

[00:46] *** jaldhar left
[00:49] <quietfanatic> nextsame and nextwith do make tail calls, but apparently not to an arbitrary routine.

[00:52] *** jaldhar joined
[01:05] *** carlin joined
[01:08] *** jrtayloriv left
[01:14] *** justatheory left
[01:21] *** dukeleto left
[01:21] <dalek> rakudo: d0b88cf | pmichaud++ | Configure.pl:

[01:21] <dalek> rakudo: Check for some more needed Parrot files during Configure.pl .

[01:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d0b88cf04a18714c1bbf7b2ad625e6d01ba4bc69

[01:21] <dalek> rakudo: 586076e | pmichaud++ |  (5 files):

[01:21] <dalek> rakudo: Move prefix:<~> into setting.

[01:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/586076e86a1dd9d7a593342d86efdd5105db7b91

[01:23] <jnthn> pmichaud++ # nice work on operating overloading!

[01:24] *** aindilis joined
[01:40] *** justatheory joined
[01:43] <cognominal> jnthn++ : blizkost now compiles on Mac OS X 

[01:44] <pmichaud> jnthn: thanks :-)

[01:45] <pmichaud> jnthn: even nicer, I ended up just doing it all in p6 settings instead of any special PIR-to-Rakudo conversions

[01:46] <pmichaud> jnthn: even more bizarre:  on many of my spectest runs, the p6 versions end up being _faster_ than the PIR versions.  Which means you've either done a great job on dispatch speed for Perl6MultiSubs, or we don't do so well at dispatch of Parrot MultiSubs, or both :-)

[01:46] <pmichaud> (not much faster, just slightly faster.  More importantly:  NOT SLOWER)

[01:48] *** nbrown_ joined
[01:50] *** nbrown left
[01:50] *** nbrown_ is now known as nbrown

[01:54] <pmichaud> I know that  infix:<==>  is defined as   +$a === +$b    and infix:<eq>   is defined as ~$a === ~$b

[01:54] <pmichaud> how about the other relational ops -- are they defined similarly in terms of infix:<===> or infix:<cmp> ?

[01:55] <pmichaud> in particular,  infix:<le>, infix:«<=», etc?

[02:03] *** tak11 joined
[02:04] <TimToady> depends on where you use the circularity saw

[02:04] <pmichaud> so, implementation-dependent?

[02:05] <pmichaud> (for now, if nothing else?)

[02:05] <TimToady> code that depends on where the circularity saw cuts is probably erroneous

[02:05] <TimToady> or at least non-portable

[02:06] <pmichaud> yeah.

[02:11] *** rhr_ joined
[02:14] <pugs_svn> r28091 | carlin++ | Fixed XHTML validation error 

[02:14] *** agentzh joined
[02:24] *** rhr left
[02:27] *** xomas_ joined
[02:33] *** carlin left
[02:34] *** frew__ joined
[02:34] *** colomon left
[02:34] *** japhb joined
[02:35] *** colomon joined
[02:35] *** aindilis left
[02:35] *** nbrown_ joined
[02:38] *** nbrown left
[02:38] *** nbrown_ is now known as nbrown

[02:42] *** xomas left
[02:46] <dalek> rakudo: aab4bf9 | pmichaud++ | src/classes/ (3 files):

[02:46] <dalek> rakudo: infix:<===> should not be defined in terms of infix:<==> or infix:<eq>.

[02:46] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/aab4bf9ad6dcd1aa10ae5faa13855c44b00951f1

[02:48] *** xomas_ left
[02:53] *** adam-pwgsc left
[02:55] *** frew___ joined
[03:12] *** frew left
[03:13] <s1n> pmichaud: will you be there on saturday?

[03:13] <pmichaud> I plan to be there, yes.

[03:13] <s1n> did you see the tentative plan?

[03:13] <s1n> i scraped it right from your last talk

[03:13] <pmichaud> I didn't see it yet, no.

[03:15] *** drbean_ joined
[03:15] *** cls_bsd left
[03:16] *** agentzh left
[03:16] *** agentzh joined
[03:17] *** agentzh left
[03:17] *** agentzh joined
[03:21] <pugs_svn> r28092 | pmichaud++ | [t/spec] Fudge some now-failing tests that don't quite make sense to me  

[03:21] <pugs_svn> r28092 | (exactly what Perl 6 feature is being tested?)

[03:22] *** agentzh left
[03:22] *** agentzh joined
[03:23] * frew__ looks forward to getting rakudo compiling again

[03:23] <frew__> I haven't had it working since the changes to allow it to build from an installed parrot

[03:23] *** cls_bsd joined
[03:24] <pugs_svn> r28093 | lwall++ | [irclog/camelia] unbox the bug, quietfanatic++ 

[03:28] *** meppl left
[03:28] <dalek> rakudo: f351f60 | pmichaud++ |  (4 files):

[03:28] <dalek> rakudo: Move infix:<ne>, infix:<!eq>, infix:<!=>, and infix:<!==> into setting.

[03:28] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f351f6099c2b0b83a9a8ef70d0fe5bf940125b29

[03:39] *** drbean left
[03:41] *** dukeleto joined
[03:50] <dukeleto> quietfanatic: parrot has something called ".tailcall"

[03:51] * dukeleto is taking blizkost out for a drive

[03:56] *** mikehh joined
[03:57] <mikehh> rakudo (f351f60) builds on parrot r40835, make test / make spectest (up to r28093) PASS - Ubuntu 9.04 amd64 (g++)

[03:57] <mikehh> rakudo (f351f60) - t/spec/S05-match/capturing-contexts.rakudo - TODO passed: 14

[04:01] *** mrsaturn_ joined
[04:06] *** mrsaturn_ left
[04:07] <dukeleto> "blizkost fails to compile on darwin/perl 5.10.0" (97 lines) at http://nopaste.snit.ch/17710

[04:09] *** w0rmie left
[04:09] *** w0rmie joined
[04:24] *** mrsaturn_ joined
[04:37] <pmichaud> frew__: rakudo doesn't build for you?

[04:38] *** cognominal left
[04:40] *** PZt left
[04:44] *** cognominal joined
[04:50] <dukeleto> jonathan: ping

[04:52] <quietfanatic> dukeleto: Ah, that yields it possible, though it'd take a Q:PIR.

[04:52] <quietfanatic> And of course it can't be delegated to a sub.  (Unless it's a macro)

[04:53] *** mberends left
[05:05] *** frew__ left
[05:08] *** justatheory left
[05:11] *** carlin joined
[05:14] *** nihiliad left
[05:20] <pugs_svn> r28094 | pmichaud++ | [t/spec]:  Unfudge a passing test for RT #64946. 

[05:21] *** duke_leto joined
[05:26] *** Confield left
[05:34] *** JimmyZ joined
[05:38] <pmichaud> http://use.perl.org/~pmichaud/journal/39543  # latest Rakudo day report

[05:43] <JimmyZ> pmichaud++

[05:43] *** wayland76 left
[05:44] *** wayland76 joined
[05:46] <pugs_svn> r28095 | pmichaud++ | [t/spec]:  Unfudge passing test for RT #68680. 

[05:48] <dukeleto> pmichaud: latest parrot installs the files that you wanted with "make install" instead of "make install-dev"

[05:53] *** finanalyst joined
[05:53] *** w0rmie left
[05:54] *** Juerd_ joined
[05:58] *** Juerd_ is now known as Juerd

[05:59] *** dbrock left
[06:07] *** molaf joined
[06:10] *** dukeleto left
[06:14] *** molaf left
[06:15] *** frederico joined
[06:18] *** desertm4x joined
[06:19] *** sri_kraih_ joined
[06:19] *** krakan left
[06:20] *** krakan joined
[06:30] *** rfordinal3643 left
[06:30] *** rfordinal joined
[06:35] *** eMaX joined
[06:36] *** sri_kraih left
[06:36] *** sri_kraih_ is now known as sri_kraih

[06:45] *** ihrd left
[06:51] *** ihrd joined
[06:52] *** duke_leto left
[06:52] *** rfordinal left
[07:02] *** rfordinal joined
[07:04] *** rbaumer left
[07:04] *** iblechbot joined
[07:04] *** rbaumer joined
[07:08] *** dukeleto joined
[07:10] *** rbaumer left
[07:16] <pugs_svn> r28096 | carlin++ | [Differences.pod] Removing what I think is a superfluous =head1 and possibly the cause of the double-bullets on the HTML converted page 

[07:23] *** mrsaturn_ left
[07:24] *** azawawi joined
[07:24] <azawawi> hi

[07:24] <dukeleto> seen jonahtan

[07:24] <dukeleto> azawawi: howdy

[07:25] <wayland76> @seen jnthn

[07:25] <lambdabot> jnthn is in #perl6. I last heard jnthn speak 6h 2m 1s ago.

[07:25] <dukeleto> msg jnthn i have created some issues for blizkost at http://github.com/jnthn/blizkost/issues

[07:26] <dukeleto> @msg jnthn i have created some issues for blizkost at http://github.com/jnthn/blizkost/issues

[07:26] <lambdabot> Not enough privileges

[07:26] <dukeleto> darn

[07:26] <azawawi> shouldnt rakudo's "perl6.exe --version" report the actual release and date instead of "This is Rakudo Perl 6."?

[07:26] <wayland76> phenny: tell dukeleto to use you

[07:26] <phenny> wayland76: I'll pass that on when dukeleto is around.

[07:26] <dukeleto> ?

[07:26] <phenny> dukeleto: 07:26Z <wayland76> tell dukeleto to use you

[07:27] <azawawi> moritz_: pingo

[07:27] <wayland76> dukeleto: You have to specifically tell things to phenny, or he doesn't respond

[07:28] <wayland76> phenny: tell pmichaud azawawi thinks that perl6 --version should report the actual version too :)

[07:28] <phenny> wayland76: I'll pass that on when pmichaud is around.

[07:29] <dukeleto> phenny: tell jnthn to check his messages in #parrot

[07:29] <phenny> dukeleto: I'll pass that on when jnthn is around.

[07:29] *** Su-Shee joined
[07:29] <Su-Shee> good morning!

[07:29] <dukeleto> Su-Shee: hola

[07:30] * wayland76 consider's Gandalf's respnse to "Good morning", and keeps his mouth shut :)

[07:30] <azawawi> wayland76: im thinking of releasing a Six upgrade installer for strawberry's "Almost Six" on a weekly and release-based timeline...that's why i may need perl6 --version

[07:31] <Su-Shee> wayland76: :))

[07:33] *** rgrau joined
[07:46] *** mrsaturn_ joined
[07:51] *** mrsaturn_ left
[07:51] *** azawawi left
[07:52] <carlin> There is an open ticket about --version

[07:52] <carlin> rt #68752

[07:58] <sjohnson> carlin thanks for the bot a few days ago

[07:59] <carlin> sjohnson: that's alright :)

[07:59] <sjohnson> is it okay if i saw the bot was cute?

[08:00] <carlin> why was that?

[08:01] <ihrd> hi there

[08:02] <ihrd> I created Perl6 modules list on the perl6 wiki http://www.perlfoundation.org/perl6/index.cgi?perl6_modules_list

[08:02] *** rbaumer joined
[08:03] <sjohnson> oops, say*

[08:03] <ihrd> Just as first approach 

[08:04] <ihrd> I think page on the perl6.org will be better one

[08:05] <Su-Shee> ihrd: cool, I've wanted to put something like this in the redesign anyway.

[08:05] <carlin> sjohnson: depends why you think it was cute

[08:07] <ihrd> Su-Shee: very good, do you have redesign drafts?

[08:07] <ihrd> I can help with markup if your need any help

[08:08] <sjohnson> carlin: for good reasons, it's oaky

[08:08] <sjohnson> okay*

[08:08] <ihrd> and I am dreaming about RSS feed with new perl6 modules

[08:10] <sjohnson> i just liked your initiative, carlin

[08:14] <carlin> heh, wasn't that hard

[08:14] <carlin> I'm surprised no one did it before me

[08:15] <carlin> correction: wasn't that hard with only getting rakudo to work

[08:15] *** ewilhelm left
[08:17] <Su-Shee> ihrd: drafts are here: http://sushee.no-ip.org/p6p/ will do some stuff this weekend.

[08:22] *** ejs joined
[08:24] <ihrd> Su-Shee: ok, so let me know how can I help :)

[08:24] *** ihrd left
[08:25] <Su-Shee> ok :)

[08:26] *** cls_bsd left
[08:26] *** cls_bsd joined
[08:32] *** ejs1 joined
[08:37] <carlin> someone should update the /topic to point to perl6.org

[08:37] *** payload joined
[08:40] *** dbrock joined
[08:40] *** ejs left
[08:42] *** Juerd changes topic to: »ö« | http://perl6.org/ | nopaste: http://paste.lisp.org/new/perl6 | evalbot usage: 'perl6: say 3;' or rakudo: / pugs: / std: | irclog: http://irc.pugscode.org/ | UTF-8 is our friend!

[08:43] <Juerd> carlin: You can also do this yourself. The topic is not locked (channel mode +t). :)

[08:44] <carlin> oh

[08:44] * carlin doesn't understand IRC flags :p

[08:50] *** JimmyZ left
[08:52] <szbalint> :)

[08:56] *** sjohnson sets mode: +t
 
[09:08] *** cognominal left
[09:12] *** breinbaas left
[09:12] *** breinbaas joined
[09:13] *** tlb joined
[09:18] *** patrickas left
[09:21] *** cotto left
[09:22] *** ejs2 joined
[09:23] *** cotto joined
[09:31] *** ejs1 left
[09:33] <jnthn> o/

[09:33] <phenny> jnthn: 07:29Z <dukeleto> tell jnthn to check his messages in #parrot

[09:34] <dukeleto> jnthn: hola

[09:34] *** cotto left
[09:34] <jnthn> dukeleto: hi

[09:35] *** cotto joined
[09:35] <dukeleto> jnthn: i made a bunch of commits and created some issues on blizkost's github

[09:37] <jnthn> dukeleto: nice

[09:37] <dukeleto> jnthn: i can get the repl to start up, but I get $ ./blizkost  > print "I am blizkost!\n";Class 'P5Interpreter' not found

[09:37] <jnthn> dukeleto: See, you're fulfilling this dream that I'd write the first bit of this, and then @other would write the test. ;-)

[09:38] <dukeleto> jnthn: yes, I got the test actually working and failing quite hard :)

[09:38] <jnthn> dukeleto: :-)

[09:38] <jnthn> dukeleto: I'm guessing it must somehow be failing to load the PMC library.

[09:39] <jnthn> I'm not sure why it would fail there, but work otherwise though.

[09:39] <dukeleto> i very much dislike that load_bytecode in parrot fails silently

[09:39] <dukeleto> jnthn: the harness gets further

[09:40] <jnthn> Yeah, it rather sucks that it fails without telling what/why.

[09:40] <dukeleto> jnthn: $P1 = $P0.'command_line'(args) is what kills the harness

[09:40] <dukeleto> jnthn: positional inside named args at position 3

[09:40] <jnthn> That's odd...

[09:41] <dukeleto> jnthn: can you make sense of that?

[09:41] <jnthn> OK, I'll have to dig in to that, but I'm kinda tied up right now.

[09:41] <jnthn> No, that sounds...odd.

[09:42] <dukeleto> jnthn: full output at http://github.com/jnthn/blizkost/issues#issue/2

[09:43] <jnthn> oh hmm, it looks like it's something about the signature of compile...

[09:43] <jnthn> If it doesn't already take a slurpy parameter, you could try adding one.

[09:43] <jnthn> To see if that makes the problem go away.

[09:45] <dukeleto> jnthn: i tried every permutation of named and slurpy params :(

[09:45] <jnthn> aww

[09:45] * jnthn wonders if eval looked sane

[09:47] <dukeleto> jnthn: coke told me about dumper.pbc in the parrot runtime, but I can't get that to work either

[09:47] *** M_o_C joined
[09:48] *** sri_kraih left
[09:48] *** sri_kraih joined
[09:50] <dukeleto> i am going to run against that wall a few more times

[09:52] <jnthn> dukeleto: OK - I'll look too when I get a spare moment (things are kinda crazy here for next couple of days).

[09:53] <dukeleto> jnthn: at your leisure :)

[10:04] *** donaldh joined
[10:06] *** Chillance joined
[10:27] *** szabgab left
[10:27] *** wayland76 left
[10:30] *** cognominal joined
[10:44] *** ruz_ joined
[10:44] *** ruz left
[10:55] *** meppl joined
[10:58] *** desertm4x left
[11:04] *** desertm4x joined
[11:04] *** xomas_ joined
[11:11] *** maerzhase joined
[11:12] <nothingmuch> moritz_: your openid sucks: http://blog.woobling.org/2009/05/your-openid-sucks.html

[11:17] <M_o_C> nothingmuch: Cool :)

[11:18] <nothingmuch> spread the love =)

[11:18] <nothingmuch> OpenID is misunderstood. it's a shame, it's really well thought out

[11:18] <nothingmuch> i want to cry every time I see a Yahoo OpenID in use

[11:19] *** majosee99 joined
[11:20] *** donaldh left
[11:20] *** majosee99 left
[11:20] *** donaldh joined
[11:21] <M_o_C> Can't exactly comment on that, it seems like I should learn more about OpenID first :)

[11:27] *** agentzh left
[12:01] *** soupdragon is now known as sharada

[12:16] *** ruoso joined
[12:17] <pugs_svn> r28097 | ruoso++ | [perl6.org] revert r28089, since it made the layout break in systems with bigger fonts 

[12:19] <pmichaud> good morning, #perl6

[12:19] <phenny> pmichaud: 07:28Z <wayland76> tell pmichaud azawawi thinks that perl6 --version should report the actual version too :)

[12:20] *** tak11 left
[12:20] <pmichaud> phenny: tell wayland76  I think perl6 --version should report the actual version.  But I don't know of a clean way to do that yet... patches welcome.

[12:20] <phenny> pmichaud: I'll pass that on when wayland76 is around.

[12:20] *** Front_slash joined
[12:20] *** takadonet joined
[12:20] <takadonet> morning all

[12:21] <pmichaud> good morning, takadonet 

[12:22] <takadonet> how are you doing pmichaud?

[12:22] <pmichaud> doing well today

[12:24] *** rbaumer left
[12:27] *** szabgab joined
[12:36] <takadonet> pretty quiet in here today....

[12:36] <pmichaud> It is.

[12:39] <takadonet> Hopefully that means people are hacking with or on rakudo :)

[12:41] *** carlin left
[12:42] *** carlin joined
[12:43] *** nihiliad joined
[12:43] *** carlin left
[12:47] *** pmurias joined
[12:48] *** smuj joined
[12:49] <smuj> rakudo: my $x=10; ++$x; say $x;

[12:49] <p6eval> rakudo 0d4fe0: OUTPUT«11␤»

[12:50] <smuj> rakudo: my $x=10; --++$x; say $x;

[12:50] <p6eval> rakudo 0d4fe0: OUTPUT«10␤»

[12:50] <smuj> rakudo: my $x=10; ++--++--++$x; say $x;

[12:50] <p6eval> rakudo 0d4fe0: OUTPUT«11␤»

[12:50] <smuj> rakudo: my $x=10; +-+-+-+$x; say $x;

[12:50] <p6eval> rakudo 0d4fe0: OUTPUT«10␤»

[12:51] <smuj> rakudo: my $x=10; $x+-+-+-+$x; say $x;

[12:51] <p6eval> rakudo 0d4fe0: OUTPUT«10␤»

[12:52] <smuj> perl6: my $x=10; $x+-+-+-+$x; say $x;

[12:52] <p6eval> elf 28097: OUTPUT«Useless use of addition (+) in void context at (eval 129) line 4.␤10␤»

[12:52] <p6eval> ..pugs, rakudo 0d4fe0: OUTPUT«10␤»

[13:03] *** awwaiid_ is now known as awwaiid

[13:03] *** rgrau left
[13:06] <smuj> rakudo: say "5"..8

[13:06] <p6eval> rakudo 0d4fe0: OUTPUT«5678␤»

[13:06] <smuj> rakudo: say "5"..9

[13:06] <p6eval> rakudo 0d4fe0: OUTPUT«567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889␤»

[13:06] <smuj> rakudo: say "-5"..9

[13:07] <p6eval> rakudo 0d4fe0:  ( no output )

[13:07] <smuj> perl6: say "-5"..9

[13:07] <p6eval> elf 28097: OUTPUT«-5-4-3-2-10123456789␤»

[13:07] <p6eval> ..rakudo 0d4fe0:  ( no output )

[13:07] <p6eval> ..pugs: OUTPUT«␤»

[13:08] *** iblechbot left
[13:12] <smuj> perl6: say "-5"..50

[13:12] <p6eval> rakudo 0d4fe0:  ( no output )

[13:12] <p6eval> ..elf 28097: OUTPUT«-5-4-3-2-101234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950␤»

[13:12] <p6eval> ..pugs: OUTPUT«-5-6-7-8-9.0.1.2.3.4.5.6.7.8.9/0/1/2/3/4/5/6/7/8/9000102030405060708091011121314151617181920212223242526272829303132333435363738394041424344454647484950␤»

[13:12] <smuj> rakudo: say "-5"..50

[13:12] <p6eval> rakudo 0d4fe0:  ( no output )

[13:13] <smuj> rakudo: say "hello"

[13:13] <p6eval> rakudo 0d4fe0: OUTPUT«hello␤»

[13:13] <pmichaud> "-5"..50 is considered an empty range

[13:14] <pmichaud> rakudo:  say "-5" gt 50

[13:14] <p6eval> rakudo 0d4fe0: OUTPUT«0␤»

[13:14] <smuj> gives me 5 here!

[13:14] <pmichaud> rakudo:  say "-5" gt "50"

[13:14] <p6eval> rakudo 0d4fe0: OUTPUT«0␤»

[13:14] <pmichaud> checking.

[13:15] <pmichaud> oh, it's timing out

[13:15] <smuj> oops, nope, "5"..50 gives me 5 here

[13:16] <smuj> "-5"..50 just loops - ^C required

[13:16] <pmichaud> well, I'll see about cleaning up the range implementation a bit, but some things are just weird in the Perl 6 spec with respect to ranges

[13:16] <smuj> yeah, so I've found out :)

[13:17] <smuj> not a problem, just playing!

[13:18] <pmichaud> I'm guessing that "-5"..50  should produce (according to the spec):   "-5", "-6", "-7", "-8", "-9"

[13:18] <pmichaud> (five elements)

[13:19] <smuj> it's the number 9 which confuses me (and maybe Rakudo)

[13:19] <smuj> rakudo: say "5"..8

[13:19] <p6eval> rakudo 0d4fe0: OUTPUT«5678␤»

[13:19] <smuj> rakudo: say "5"..9

[13:19] <p6eval> rakudo 0d4fe0: OUTPUT«567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889␤»

[13:19] <pmichaud> rakudo:  say "5".."9"

[13:20] <p6eval> rakudo 0d4fe0: OUTPUT«56789␤»

[13:20] <pmichaud> rakudo:  say ~9.chars

[13:20] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[13:20] <pmichaud> rakudo say (~9).chars

[13:20] <pmichaud> rakudo: say (~9).chars

[13:20] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[13:20] *** carlin joined
[13:20] <pmichaud> for some reason the ..9 is producing a string with 2 characters

[13:21] <pmichaud> rakudo:  say ("5"..9).perl

[13:21] <p6eval> rakudo 0d4fe0: OUTPUT«"5"..9␤»

[13:21] <smuj> yeah, 99 produces 3 etc

[13:21] <pmichaud> or there might be a problem with computing the endpoint in string ranges

[13:21] <PerlJam> good morning #perl6

[13:21] <PerlJam> "5"..9 looks like it's going 5..90 to me.

[13:22] <pmichaud> well, "90" is the first string that is gt "9"

[13:23] <pmichaud> all of the others are le

[13:24] <smuj> in $x..$y should $y try to transform into the same type as $x?

[13:26] *** PZt joined
[13:26] <pmichaud> smuj: I don't know.

[13:26] <smuj> k

[13:26] <smuj> I'll leave ya in peace now! :)

[13:26] <PerlJam> maybe it should fial

[13:26] <PerlJam> er, fail

[13:27] <PerlJam> (not dwimmy, I know)

[13:27] <pmichaud> also, the use of the word "longer" in S03:2962 bugs me a bi

[13:27] <pmichaud> *bit

[13:29] <PerlJam> pmichaud: why?

[13:38] *** frew joined
[13:39] *** Confield joined
[13:40] *** ejs1 joined
[13:42] *** rbaumer joined
[13:45] *** drbean_ is now known as drbean

[13:45] *** ejs1 left
[13:45] *** frettled left
[13:52] *** ejs2 left
[13:54] *** frew left
[13:55] *** Front_slash left
[14:09] <carlin> rakudo: sub foo() {}; multi sub foo() {};

[14:09] <p6eval> rakudo 0d4fe0: OUTPUT«Redefinition of routine foo␤push_pmc() not implemented in class 'Sub'␤»

[14:09] <PerlJam> carlin: that only works if you've got a proto in place before hand.

[14:12] *** maerzhase left
[14:13] *** sahadev joined
[14:14] <carlin> PerlJam: I know, I don't think the push_pmc bit is right

[14:14] <carlin> and if you do that twice from the command line ...

[14:14] *** alester joined
[14:15] *** jaldhar left
[14:21] *** KyleHa joined
[14:21] *** Psyche^ joined
[14:22] *** Patterner left
[14:22] *** Psyche^ is now known as Patterner

[14:31] *** rfordinal left
[14:31] *** rfordinal joined
[14:38] *** nihiliad left
[14:41] *** ewilhelm joined
[14:45] *** eiro is now known as haiwepa

[14:49] <colomon> rakudo: class Integer { has $.n; }; subset Positive of Integer where { $_.n > 0 }; my Integer $i = Positive.new(n => 5); say $i.WHAT;

[14:49] <p6eval> rakudo 0d4fe0: OUTPUT«()␤»

[14:51] *** rfordinal left
[14:52] *** tlb left
[14:54] <colomon> rakudo: class Integer { has $.n; }; subset Positive of Integer where { $_.n > 0 }; my Integer $i = Positive.new(n => 5); say $i.n;

[14:54] <p6eval> rakudo 0d4fe0: OUTPUT«set_integer_native() not implemented in class 'Integer'␤in Main (/tmp/XrlwGqCvJc:2)␤»

[14:54] <colomon> Okay, that I had not expected.

[14:54] <carlin> I get that if I run it twice in a row in the CLI

[14:55] <colomon> : rakudo: class Integer { has $.n; }; my Integer $i = Integer.new(n => 5); say $i.n;

[14:55] <carlin> I didn't think the evalbot could show those types of errors though

[14:56] <carlin> rakudo: sub foo;

[14:56] <p6eval> rakudo 0d4fe0: OUTPUT«Malformed routine definition at line 2, near "foo;"␤in Main (src/gen_setting.pm:3454)␤»

[14:56] <carlin> rakudo: foo

[14:56] <p6eval> rakudo 0d4fe0: OUTPUT«Could not find non-existent sub foo␤»

[14:56] <carlin> hrm

[14:58] <colomon> rakudo: class Integer { has $.n; }; my Integer $i = Integer.new(n => 5); say $i.n;

[14:58] <p6eval> rakudo 0d4fe0: OUTPUT«set_integer_native() not implemented in class 'Integer'␤in Main (/tmp/MFJd1dgG0Q:2)␤»

[14:59] <colomon> rakudo: class Frobozz { has $.n; }; my Frobozz $i = Frobozz.new(n => 5); say $i.n;

[14:59] <p6eval> rakudo 0d4fe0: OUTPUT«5␤»

[14:59] <colomon> Ah, Integer may be a reserved word of some sort?

[15:00] *** molaf joined
[15:01] <colomon> rakudo: class Frobozz { has $.n; }; subset Baz of Frobozz { where $_.n > 0 }; my Frobozz $i = Baz.new(n => 5); say $i.n;

[15:01] <p6eval> rakudo 0d4fe0: OUTPUT«Statement not terminated properly at line 2, near "{ where $_"␤in Main (src/gen_setting.pm:3454)␤»

[15:01] <colomon> rakudo: class Frobozz { has $.n; }; subset Baz of Frobozz where { $_.n > 0 }; my Frobozz $i = Baz.new(n => 5); say $i.n;

[15:01] <p6eval> rakudo 0d4fe0: OUTPUT«5␤»

[15:01] *** arnsholt joined
[15:02] <colomon> rakudo: class Frobozz { has $.n; }; subset Baz of Frobozz where { $_.n > 0 }; my Frobozz $i = Baz.new(n => 5); say $i ~~ Frobozz;

[15:02] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[15:02] <colomon> rakudo: class Frobozz { has $.n; }; subset Baz of Frobozz where { $_.n > 0 }; my Frobozz $i = Baz.new(n => 5); say $i ~~ Baz;

[15:02] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[15:03] <colomon> rakudo: class Frobozz { has $.n; }; subset Baz of Frobozz where { $_.n > 0 }; my Frobozz $i = Baz.new(n => 5); say $i.isa(Frobozz);

[15:03] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[15:04] <colomon> rakudo: class Frobozz { has $.n; }; subset Baz of Frobozz where { $_.n > 0 }; my Frobozz $i = Baz.new(n => 5); say $i.isa(Baz);

[15:04] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[15:05] <colomon> rakudo: class Frobozz { has $.n; }; subset Baz of Frobozz where { $_.n > 0 }; my Baz $i = Frobozz.new(n => 5); say $i.isa(Baz);

[15:05] <p6eval> rakudo 0d4fe0: OUTPUT«0␤»

[15:05] <colomon> aha!  That's finally got it.

[15:06] <colomon> in the August release that returned true.  In the current build, it returns false.

[15:06] <colomon> Not sure what the right answer should be.

[15:07] *** donaldh left
[15:09] *** nbrown_ joined
[15:10] *** nbrown_ left
[15:12] *** abra joined
[15:13] *** szabgab left
[15:13] *** szabgab joined
[15:13] *** IRSeekBot left
[15:13] *** nihiliad joined
[15:17] *** Su-Shee left
[15:27] *** nbrown left
[15:27] *** justatheory joined
[15:29] <yath> hm. would be cool to have something like B::Deparse for rakudo that adds a comment to the statement in which synopsis i'd have to look ;)

[15:32] *** hobbsc joined
[15:32] <hobbsc> anyone have issues/reservations about perl6 in production environments?

[15:33] *** eMaX left
[15:34] <KyleHa> That may depend on what you're producing.

[15:34] <sjn> hobbsc: like as in aeroplanes or nuclear power plants?

[15:35] <KyleHa> Do lives hang in the balance, or just your own patience?

[15:35] *** eMaX joined
[15:38] *** M_o_C left
[15:39] *** rfordinal joined
[15:40] <hobbsc> hobbsc: nah, municipal stuff

[15:40] <hobbsc> just using it for system glue/automation

[15:40] <carlin> "Approaching turbulence, raise the Aircraft set_integer_native() not implemented ft"

[15:41] <pugs_svn> r28098 | lwall++ | [S03] qualify "longer" to mean graphemes for pmichaud++ 

[15:41] <carlin> hobbsc: for most tasks it's just as ready as Perl 5

[15:44] <hobbsc> thanks for the input

[15:49] *** finanalyst left
[15:50] <Tene> hobbsc: Perl 6 in theory?  No.  Rakudo running on Parrot today?  Yes, I'd have reservations.

[15:52] *** finanalyst joined
[15:55] <hobbsc> 5.10 seems to be working well, i considered upgrading across the board

[15:55] <hobbsc> may be too early yet

[16:01] *** carlin left
[16:02] *** haiwepa is now known as eiro

[16:04] <TimToady> the design is not entirely stable yet either; we've made no backward compatibility guarantees to the current spec

[16:04] *** sharada left
[16:07] <yath> what's the state of ponie, btw? or is there a successor?

[16:08] <TimToady> the ponie effort was premature and was declared dead at one point

[16:08] <yath> hm

[16:08] <pmichaud> I think the current successor (just started) is http://use.perl.org/~JonathanWorthington/journal/39530

[16:08] <TimToady> there will certainly be some kind of successor, but I don't know if it will be called ponie

[16:08] <TimToady> there are actually several approaches to p5 interop, and we'll probably try them all at some point

[16:09] *** desertm4x left
[16:09] <yath> i wonder if it's possible to embed perl5 inside rakudo and use O.pm for creating PIR or so.

[16:09] <yath> ah

[16:09] *** mrsaturn_ joined
[16:09] <yath> blizkost apparently does that 8-)

[16:09] *** mrsaturn_ is now known as mrsaturn

[16:10] <mrsaturn> g'morning everyone

[16:10] <pmichaud> good morning, mrsaturn 

[16:11] *** hudnix joined
[16:12] <yath> hm, blizkost looks cool.

[16:13] <TimToady> mrsaturn: we're looking forward to your rings disappearing in November :)

[16:15] <mrsaturn> :(

[16:15] <TimToady> temporarily

[16:17] <pmichaud> -O-

[16:17] <lucs> http://geology.com/news/2009/saturns-rings-to-disappear-on-811.shtml

[16:20] <TimToady> ah, someone messed the data around

[16:20] <TimToady> I was reading an article from the other side of the pond, and they thought 8/11 meant 11/8

[16:21] <TimToady> interesting

[16:21] <mrsaturn> I knew 18 days ago wasn't november

[16:21] <TimToady> well, mrsaturn, you're off the hook for another 23 years or so.

[16:21] *** Guest4616 left
[16:21] <TimToady> 'course, it's also possible that someone changed the spec

[16:25] *** M_o_C joined
[16:26] *** JimmyZ joined
[16:28] *** finanalyst left
[16:30] *** zamolxes joined
[16:33] *** szbalint left
[16:38] <quietfanatic> Are multi subs supposed to be able to take constant named arguments?

[16:38] <quietfanatic> multi doit (type<a>, *@args) {...}

[16:38] <quietfanatic> that's :type<a>

[16:39] <ruoso> quietfanatic, I guess they can... the same way as they can take constant positional argumetns

[16:40] *** pippo_ left
[16:40] <quietfanatic> Just Rakudo hasn't implemented them yet.  I can work around that for now.

[16:40] <ruoso> std: multi (:type<a>, *@args) {... }

[16:40] <ruoso> oops

[16:40] <p6eval> std 28098: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed parameter at /tmp/LvZHWTfOfI line 1:␤------> [32mmulti ([33m⏏[31m:type<a>, *@args) {... }[0m␤    expecting any of:␤       name␤   parameter␤ signature␤       whitespace␤FAILED 00:03 40m␤»

[16:40] <ruoso> std: multi a (:type<a>, *@args) {... }

[16:40] <p6eval> std 28098: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed parameter at /tmp/wSGsrKdEka line 1:␤------> [32mmulti a ([33m⏏[31m:type<a>, *@args) {... }[0m␤    expecting any of:␤     name␤   parameter␤ signature␤       whitespace␤FAILED 00:02 39m␤»

[16:41] <quietfanatic> Oh, ruoso.  I saw you reverted my change.   I don't mind, but would it be better if we shrank the header to line it up with the boxes?

[16:41] <ruoso> quietfanatic, the problem is that the difference scales when the fonts are bigger

[16:41] <quietfanatic> ...looks like that doesn't work.

[16:42] <quietfanatic> Yeah.  I made it scale larger depending on font size, but there's screen size limitations too.

[16:42] <quietfanatic> What would be ideal is to make the boxes never have to squeeze to two columns.

[16:42] <ruoso> yeah.. 50 em or so requires a huge screen for bigger fonts

[16:43] <ruoso> quietfanatic, that could be made by making their size in %

[16:43] *** Su-Shee joined
[16:43] <quietfanatic> Yes, but their statically-determined height means the text could conceivable overflow below them.

[16:44] <Su-Shee> yeah. weekend. my perl instead of office perl. :)

[16:44] <quietfanatic> On a small font size/large screen, the header looks crooked on top right now.

[16:50] *** ruoso left
[16:54] *** beggars joined
[16:56] *** ejs joined
[16:57] *** jrtayloriv joined
[16:58] *** rfordinal3643 joined
[16:59] *** jauaor joined
[17:00] *** rfordinal left
[17:00] *** rfordinal3643asd joined
[17:05] *** dukeleto left
[17:12] *** nbrown joined
[17:17] *** ruoso joined
[17:19] *** rfordinal3643 left
[17:25] *** abra left
[17:27] <TimToady> there are no good synonyms for 'context'; thinking about changing 'my $FOO is context' to 'your $*FOO'

[17:28] <TimToady> (can't use 'context' as declarator because it looks too much like 'constant')

[17:30] *** mrsaturn left
[17:30] <ruoso> TimToady, your is not a bad idea at all

[17:31] <TimToady> it should really probably be 'our', but that one's taken, and probably can't be swiped

[17:31] * ruoso keeps voting for the death of the globals

[17:32] <TimToady> well, I'm close to at least having more things default to 'my' rather than 'our'

[17:32] <TimToady> list subs

[17:32] <TimToady> *like

[17:32] <TimToady> goodness, neural programming from BASIC...

[17:32] <ruoso> that is certainly going to be a shock for p5 programmers, but I do support the idea

[17:32] <TimToady> but the fact is, we're already saying that multi dispatch only looks in lexical scopes

[17:33] <TimToady> so there's not much point in having subs with package aliases at all

[17:33] <TimToady> unless you really want one

[17:33] <TimToady> in which case you can always say 'our sub'

[17:33] <ruoso> I wonder if that is really a declarator

[17:33] <ruoso> since it's just "declare a my with an alias in the package"

[17:34] <TimToady> well, other way around, really

[17:34] <TimToady> you don't get it cloned

[17:34] <ruoso> not cloned, aliased

[17:35] <TimToady> talking about cloned closures

[17:35] <TimToady> they get separate my vars

[17:35] *** szabgab left
[17:35] <TimToady> whereas our vars all point to the same var

[17:35] <TimToady> so the alias is in the lexical pad, not in the package

[17:36] <ruoso> TimToady, hmmm... alright... 

[17:36] <ruoso> but defaulting subs to my have another side

[17:36] <TimToady> but yes, I'd like the default to be right, and 'our' doesn't feel like the right default for subs

[17:37] <TimToady> classes maybe

[17:37] *** rfordinal3643asd left
[17:37] <ruoso> people is used to be able to call Package::foo() even without importing the symbol

[17:37] <ruoso> in fact, sometimes I only "require" instead of "using" some module to avoid the clutter in my lexical scope

[17:37] <ruoso> (in p5 I mean)

[17:38] <TimToady> yes, we have a similar problem with constants that are 'my', which is why (for the moment) they are 'our'

[17:38] <TimToady> but I don't like it

[17:39] <ruoso> it makes a lot of sense for infra-estructural multi-subs to be "my" and "is export"

[17:39] <TimToady> for instance, if enum Bool <False True> is 'my', you can't (currently) say Bool::True

[17:39] <ruoso> but if we think in plain "structured programming", having them our by default is sane

[17:39] <TimToady> so I think that exported things need to be lookupable

[17:39] <TimToady> as if they were packagey

[17:40] <TimToady> even if they're really 'my'

[17:40] <ruoso> TimToady, you mean having they as I was thinking "our" worked

[17:40] <ruoso> just aliased in the package?

[17:41] <TimToady> which is presumably not a problem for constants, since they don't need cloning

[17:41] <TimToady> but then that's pretty much the same as saying that constants default to 'our'

[17:41] * ruoso .oO ( "multi foo is export is global {...}" )

[17:42] <ruoso> where "is global" installs an alias in the package, in contrast to "our" that declares in the package and alias locally

[17:43] <TimToady> seems relatively useless to me

[17:44] <ruoso> it's indeed a minor semantic thing

[17:44] <TimToady> and also rather opaque to newbies

[17:44] *** colomon left
[17:44] <ruoso> but maybe just saying "if you want regular structured-programming package routines, use 'our multi foo'"

[17:45] <TimToady> you have a very strange definition of structured programming

[17:45] <ruoso> I mean in the sense that people who does structured programming expect the language to look like

[17:46] <TimToady> stuctured programming looks like Pascal

[17:46] <ruoso> routines in namespaces

[17:46] <TimToady> not in Pascal

[17:46] * ruoso tries to remember how namespaces were in non-object pascal

[17:46] *** mrsaturn joined
[17:46] *** mrsaturn left
[17:47] <TimToady> routines were essentially lexically scoped

[17:47] *** mrsaturn joined
[17:47] <TimToady> but structured programming historically means, mostly, avoiding goto

[17:48] <TimToady> blocks should only have only one entry point (and one exit in the strict form)

[17:48] <ruoso> well.. I mean it as opposed to OO programming (inside the imperative-programming universe)

[17:48] <TimToady> okay, the no-dispatcher universe, maybe

[17:49] <TimToady> I don't know of a good term for that, really

[17:49] * ruoso usually hear "structured" ;)

[17:50] <TimToady> I fear the term has come to mean something approaching "dark ages"

[17:50] <ruoso> hahaehae

[17:50] <TimToady> they didn't seem dark at the time :)

[17:51] <ruoso> anyway... people working with without-OO-imperative-programing expect namespaces to behave like "our"

[17:52] *** mrsaturn left
[17:53] <ruoso> although Pascal doesn't have namespaces apparently... and php only got proper namespaces when it got OO...

[17:53] <ruoso> but in p5, people uses the namespaces a lot, I think...

[17:53] <ruoso> when doing non-OO-imperative-programmign (NOOIP)

[17:58] *** hobbsc left
[18:01] *** colomon joined
[18:02] <JimmyZ> Good before-dawn, #perl6

[18:04] <Su-Shee> JimmyZ: a good before-dusk to you. :) 

[18:06] <JimmyZ> Su-Shee: thanks

[18:23] *** Front_slash joined
[18:25] *** JimmyZ left
[18:39] *** szabgab joined
[18:41] <pugs_svn> r28099 | fglock++ | svn-commit.2.tmp 

[18:43] <TimToady> er...

[18:44] *** jaldhar joined
[18:44] <ruoso> now *that's* an unusual commit message

[18:44] *** smuj_ joined
[18:45] <ruoso> TimToady, anyway... what do you think about the idea of splitting the "Conceptual Types" from the "Storage Types" when dealing with numbers?

[18:45] *** zamolxes left
[18:47] <TimToady> that's more or less how it's already split up; Num is supposed to represent what normal people think numbers are

[18:47] <TimToady> normal != mathematician

[18:48] <TimToady> however, certain subset types are privileged in indicating promises about storability

[18:48] <TimToady> such as Int

[18:48] <sjohnson> common man == Num?

[18:48] <Tene> Apparently Boeing is currently debating about whether or not to migrate their support scripts from perl.

[18:48] <TimToady> s/man/people/ :)

[18:49] <sjohnson> how about something to represent numbers as imagined by toddlers too :)

[18:49] <Tene> Also whether to migrate them, if they do, to python or Perl 6

[18:50] <ruoso> TimToady, er... you don't need to be a mathematician to know that about imaginary numbers

[18:50] <PerlJam> Tene: are they planning on migrating 2 years from now if they do?

[18:50] <Tene> Apparently.

[18:51] <ruoso> I mean... Complex ~~ Num being false is very much weird... and I'm a social scientist

[18:51] <PerlJam> Tene: That's one of those business decisions I have trouble understanding sometimes.  If they have something that works in perl, why change?   (unless they honestly believe perl is dead)

[18:52] <TimToady> well, maybe they're having trouble finding programmers

[18:52] <Su-Shee> PerlJam: the main reason I heard over the last year here in germany: trouble finding developers

[18:52] <TimToady> also Boeing's perl probably includes a fair bit of JPL

[18:52] <sjohnson> nietzsche python users would say that

[18:52] <Tene> They're having a lot of trouble finding new hires that know perl.

[18:52] <PerlJam> If they're having trouble finding perl programmers, then perl is dead in their area.

[18:53] <sjohnson> i would love to work fulltime with perl 5 / 6

[18:53] <Tene> The majority of new college grads that apply know and use python.

[18:53] <PerlJam> Tene: but see,  that's the weird thing ... so what? If they know python, then perl shouldn't be too difficult to pick up.   

[18:53] <Su-Shee> Tene: here java.

[18:53] *** ejs left
[18:53] <ruoso> problem is, scripting languages were all obscure for the formal education... then they started being subject of cs graduation in several colleges... but perl was left behind in that respect

[18:54] <Su-Shee> PerlJam: well, I know _very_ few python/java people actually willing to switch. ;)

[18:54] <PerlJam> Knowing a specific language is just a fine skin over the important stuff.

[18:54] <sjohnson> fwiw, i had to learn Perl because someone wrote our book data processor in it

[18:54] <sjohnson> thank Goodness for that

[18:54] <PerlJam> (knowing the concepts and how to design things and how to solve problems is way more important than knowing a specific languag)

[18:54] <sjohnson> otherwise i wouldn't have picked it up

[18:55] * ruoso had perl as his first serious language... 

[18:55] <sjohnson> PerlJam true, but it is nice if you have that skill, and can program quickly with a language you are versatile in

[18:55] <Su-Shee> perl was my first ever programming language... 

[18:55] <PerlJam> I'm certainly a "perl person", but I picked up python and ruby and php with no problems.

[18:55] <PerlJam> and haskell

[18:55] <PerlJam> pugs++  :)

[18:56] <pugs_svn> r28100 | fglock++ | mp6 update 

[18:56] <sjohnson> PerlJam, what are your brief thoughts on the Python/Ruby vs Perl debate?  if you don't want to answer here (or at all)... can you plz pm me?

[18:56] <PerlJam> maybe that's a one-way relation though.

[18:56] <TimToady> er...

[18:56] <PerlJam> it only works out if you start as a perl person  :)

[18:56] <Su-Shee> PerlJam: me too - but: here, everybody I know who likes python simply doesn't consider a perl job. (not to mention the java fellows) - so very few (still existing) perl developer apply for a job..

[18:57] <PerlJam> sjohnson: what debate?  It's not a contest.

[18:57] <takadonet> The bioinformatics field uses Perl extensively but for anyone heavily lifting, we use C

[18:58] <PerlJam> Su-Shee: that's like saying .... "I only work on Ford vehicles;  I won't work on Chevy or Chrysler"

[18:58] * ruoso today refuses Java jobs

[18:58] <ruoso> after 4 years of heavy suffering

[18:58] <Su-Shee> PerlJam: well as long as it people and developers more or less have free picks what they work...

[18:59] <sjohnson> was just wondering if you could mention if there are things you dislike about Ruby or Python

[18:59] <Su-Shee> free choice? take a pick? I mixed up something..

[18:59] <PerlJam> sjohnson: Implicit lexicals.

[19:00] <PerlJam> There are very few language-level things that I dislike about either ruby or python.

[19:00] <PerlJam> ruby feels more like perl though. 

[19:00] <PerlJam> (I guess that's as it should be)

[19:00] <sjohnson> i don't like ruby's english word block start and ends

[19:01] <Su-Shee> sjohnson: that's pretty nice, because {} on a german keyboard suck to type.

[19:01] <PerlJam> sjohnson: Every language has some technical debt.   Perl, for a long time, still used EQ as a synonym for eq (for instance)

[19:01] <sjohnson> Su-Shee... i could mail you a US keyboard if you like :)

[19:01] *** jaldhar left
[19:02] <Su-Shee> sjohnson: i've tried, drives me crazy to switch - I still have to write german texts.. :) 

[19:02] <TimToady> new slogan: Perl 6 pays off your technical debt.

[19:02] <PerlJam> sjohnson: Also, that's kind of part of their perl-nature too.

[19:03] <pmichaud> TimToady: hmmm, does it?  ;-)

[19:03] <PerlJam> sjohnson: I mean, TMTOWTDI works in other languages, albeit differently  :)

[19:03] <TimToady> ...by making you a new technical loan :)

[19:03] <TimToady> technical debt consolidation, yum

[19:03] <pmichaud> Ah, the Federal Reserve approach to fixing the technical economy

[19:03] <pmichaud> other languages have been making subprime loans, we convert them

[19:03] <sjohnson> TimToady: while we're at it, can we make http://eppy7890.files.wordpress.com/2009/06/joe_camel.jpg the Perl 6 camel mascot?

[19:04] <pmichaud> (Perl 6 already has a mascot :-)

[19:04] <Su-Shee> sjohnson: oh god please no

[19:05] <PerlJam> pmichaud: And TimToady controls inflation how?  :)

[19:05] <pmichaud> PerlJam: Perl 6 is all about controlled expansion and extension of the language economy :)

[19:05] <sjohnson> it's my imaginary mascot that is not public, because it reminds me of how cool and tough P6 is

[19:06] <TimToady> joe camel only thinks he's cool

[19:06] <pmichaud> I tend to think of P6 as being "cool and tough" in a more elegant sense than brute strength

[19:06] <PerlJam> sjohnson: tough as in it'll beat you up?  or tough as in it fights for you?

[19:06] <Su-Shee> sjohnson: strange.. I always think of perl 6 as being smooth and fluffy.. :)

[19:06] <sjohnson> tough as in he is a lot more suited for any problem than Python or Ruby will ever be

[19:07] *** smuj left
[19:07] <pmichaud> "the skillful warrior never has to fight"

[19:07] <TimToady> and a camel that is stupid enough to smoke proves this how? :)

[19:07] <PerlJam> sjohnson: That may be true, but it also may be beside the point if we can't get anyone but the echo chamber to use perl 6  ?)

[19:07] <PerlJam> er :)

[19:08] <sjohnson> TimToady: he isn't really inhaling that smoke, he's just trying to get young kids interested in Perl by his badboy image

[19:08] <PerlJam> sjohnson: you're going downhill, fast.

[19:08] <PerlJam> unless you're describing EvilPerl or something

[19:09] <TimToady> I'm planning to win their hearts *before* they get to junior high school

[19:09] <TimToady> Teach Your Baby Perl

[19:09] <Su-Shee> TimToady: I'd say chances are good for winning at least the girls with camelia... 

[19:10] <TimToady> that is one of my explicit aims

[19:10] <sjohnson> we could make a Japan-friendly representation of camelia too

[19:10] <TimToady> there's already one in the topic

[19:11] <sjohnson> is it that little thing on the very top left?

[19:11] <TimToady> yes, that's also camelia

[19:11] <TimToady> in supersonic attack mode, I believe

[19:12] <pmichaud> recent twitter post:  http://eppy7890.files.wordpress.com/2009/06/joe_camel.jpg

[19:12] <pmichaud> oops, wrong link

[19:12] <pmichaud> http://eppy7890.files.wordpress.com/2009/06/joe_camel.jpg

[19:12] <sjohnson> see pmichaud? it's working

[19:12] <pmichaud> grrrr

[19:12] <pmichaud> stupid cut-n-paste

[19:12] <pmichaud> http://twitter.com/trodrigues/statuses/3605522918

[19:12] <pmichaud> http://twitter.com/pedrocs/statuses/3605617735

[19:13] <sjohnson> http://twitter.com/stviewonder

[19:13] <Su-Shee> szabgab introduced me to "scratch" (http://info.scratch.mit.edu/Support/Reference_Guide_1.4) - that's something I totally would love based on Perl 6 .. visual programming by moving around items on a tablet pc...

[19:13] <Su-Shee> (perl 6 for children..)

[19:14] <PerlJam> "Scratch projects are made up of objects called sprites."  boy does that take me back in time.

[19:14] <sjohnson> TimToady: have you ever tried your hand at the japh thing?

[19:14] <PerlJam> (I first encountered sprites on my TI-99/4a  :)

[19:14] <Su-Shee> PerlJam: scroll down to those "visual blocks" - totally love those..

[19:15] <TimToady> I am glad those people find camelia offensive.  That's another one of my explicit aims.  :)

[19:15] <sjohnson> how could they find that cute little Perl 6 bug offensive

[19:15] <sjohnson> if they think that's offensive, what would they say about Joe Camel?

[19:16] <TimToady> I hope they find it so offensive they go and destroy someone else's community, not ours.  :)

[19:16] <Su-Shee> _offensive_?! did I miss yet another internet meme? ;)

[19:17] <araujo> Teaching kids perl ..... now this will indeed become into a religion

[19:17] <araujo> :)

[19:17] <sjohnson> heh araujo 

[19:17] <sjohnson> then comes Teach Your Kids Ruby

[19:18] <sjohnson> and the religion wars start in a different form

[19:18] <sjohnson> what I need is "Teach Your Girlfriend Perl"

[19:18] <sjohnson> now THAT would be a great book

[19:18] <TimToady> *tweet* Illegal use of sexist metaphors at line 42.

[19:18] <pmichaud> aha!

[19:19] <pmichaud> that's what we need instead of ===SORRY!===

[19:19] <pmichaud> *tweet!*

[19:19] <TimToady> how tweet it is...

[19:19] <pmichaud> and in addition to displaying the exception on the screen, it automatically posts it to your twitter account so everyone else can see your silly mist^W^W^W that you're struggling as much as they are.  :)

[19:23] <PerlJam> And that's the real reason Perl6 must come with networking support builtin as part of the standard distribution.  

[19:23] <TimToady> shh!

[19:24] <ruoso> pmichaud, the portuguese perl mongers are notoriously sexist 

[19:24] <TimToady> we'll fix you later

[19:24] <ruoso> 90% of the messages in the lisbom-pm mailing list are about some sexist joke

[19:24] <PerlJam> ruoso: some cultural changes are by accretion, others are by attrition.

[19:24] *** jauaor left
[19:25] <ruoso> PerlJam, agreed... I'm very happy about the camelia, I think TimToady was very smart on bringing this issue up... specially on times where sexism is getting worse in some communities (*cough*ruby*cough*)

[19:26] <PerlJam> Is it really getting worse in the ruby community?

[19:26] <Su-Shee> ruoso: you're referring to the "p0rnstar" presentation?

[19:26] <PerlJam> That seemed more like a one-off thing than a community endorsed way of being

[19:27] <ruoso> Su-Shee, not only that... at FISL they had fashion models walking around with shirts that said "we hire ruby"

[19:27] <PerlJam> I mean, perl has its share of obnoxious personas too :)

[19:27] <Su-Shee> ruoso: hm. ok. 

[19:28] <pmichaud> afk # kid pickups

[19:28] <Su-Shee> I personally think it has more to do with some hip, unconventional image thing... 

[19:29] * ruoso might need to notice that he is not portuguese, but brazillian, even if he spent some time in lisbon a while ago

[19:30] <TimToady> the world will be fixed by people who are never entirely comfortable in their own cultures

[19:30] <TimToady> it's a complex process, and there are no simple answers, other than individual effort

[19:31] <Su-Shee> ruoso: I see perl bikini-wear in our future.. ;)

[19:31] <PerlJam> TimToady: awareness is always a good first step  ;)

[19:31] <TimToady> well, it really comes down to humility, I think

[19:32] <TimToady> we need that, as well as hubris

[19:32] * PerlJam needs more of both

[19:33] * ruoso has a lot of unconfortableness

[19:33] <PerlJam> ruoso: me too!

[19:33] <TimToady> ruoso: good, that's the price of having a wide dynamic range

[19:33] <PerlJam> this one is interesting (if true): http://twitter.com/merbist/statuses/3570996955

[19:37] *** zamolxes joined
[19:41] *** colomon left
[19:43] *** Front_slash left
[19:44] *** eMaX left
[19:49] <[particle]> oh give me a break!

[19:49] <[particle]> ww

[19:51] <ruoso> [particle], feel free to take it now

[19:51] <[particle]> :P

[19:52] <[particle]> my break starts in 68 minutes, when i finish work and head for the mountains

[19:52] <PerlJam> mountains++

[19:59] *** frederico left
[20:00] *** terje_ joined
[20:00] *** terje_ is now known as bionoid

[20:04] *** takadonet left
[20:08] <mikehh> rakudo (7666e92) builds on parrot r40842, make test / make spectest (up to r28100) PASS - Ubuntu 9.04 amd64 (g++)

[20:10] <PerlJam> mikehh: is that an automated thingy?

[20:13] <mikehh> PerlJam: no

[20:14] <mikehh> just reporting on my testing procedures for parrot

[20:15] *** colomon joined
[20:15] <mikehh> and I thought that this should be repeated in #perl6

[20:19] *** M_o_C left
[20:34] <colomon> rakudo: multi sub infix:<**>(Complex $a, Num $b) { exp($b * log($a)) }; say 1i ** 3;

[20:34] <p6eval> rakudo 0d4fe0: OUTPUT«NaNNaNi␤»

[20:35] <colomon> rakudo: multi sub infix:<**>(Complex $a, Num $b) { exp($b * log($a)) }; say 1i ** 3.0;

[20:35] <p6eval> rakudo 0d4fe0: OUTPUT«NaNNaNi␤»

[20:36] <colomon> rakudo: say log(1i);

[20:37] <p6eval> rakudo 0d4fe0: OUTPUT«0+1.5708i␤»

[20:37] <colomon> rakudo: say 3.0 * log(1i);

[20:38] <p6eval> rakudo 0d4fe0: OUTPUT«0+4.71239i␤»

[20:38] <colomon> rakudo: say exp(3.0 * log(1i));

[20:38] <p6eval> rakudo 0d4fe0: OUTPUT«-1.83691e-16-1i␤»

[20:40] <colomon> rakudo: sub iPower($a, $b) { exp($b * log($a)) }; say iPower(1i, 3.0);

[20:40] <p6eval> rakudo 0d4fe0: OUTPUT«NaNNaNi␤»

[20:40] <colomon> Errr... seems like a bug?

[20:41] *** andrewz joined
[20:41] <andrewz> is 6 rdy for production? can it use perl5 mods?

[20:42] <PerlJam> andrewz: yesish and noish.

[20:43] *** renormalist joined
[20:44] <PerlJam> andrewz: The Rakudo implementation is quite usable for a variety of tasks.  You could use it in production as long as you realize that are some things that just don't work.

[20:45] <PerlJam> andrewz: however, there will be a release called "Rakudo Star" in the spring of 2010 that aims to be something people outside of the pioneers circle can and should start using.

[20:47] <andrewz> PerlJam: thanks!

[20:48] <andrewz> PerlJam: is there a list of things that dont work ?

[20:48] <andrewz> also what happened to the haskell based version

[20:48] <andrewz> too slow?

[20:48] <PerlJam> andrewz: I'm actually not sure if there's a list of non-working things.

[20:48] <PerlJam> no, pugs just lost momentum.

[20:49] <andrewz> ah darn

[20:50] <PerlJam> The lead developer (audrey tang) had some life issues that caused her to back off quite a bit and there weren't enough lambda camels to make up for that loss.

[21:04] *** bionoid left
[21:08] *** ruoso left
[21:10] *** Su-Shee left
[21:17] *** nbrown left
[21:17] *** nihiliad left
[21:17] *** nihiliad joined
[21:18] *** nbrown joined
[21:21] *** sri_kraih left
[21:22] *** Whiteknight joined
[21:42] *** KyleHa left
[21:48] <diakopter> sjohnson: heh.  "Teach your Boyfriend Perl"

[21:48] <diakopter> but that begs the question.. Teach *what* to your boy/girlfriend Perl?

[21:49] <sjohnson> be sure to order my previous bestselling volume: "Teach Your Girlfriend how to Setup a VCR"

[21:50] *** sahadev left
[21:50] <diakopter> I mean, doesn't Perl already know how to do enough?  why teach it more?

[21:51] *** smuj_ left
[21:51] <sjohnson> perhaps you misunderstood my intention of the title

[21:51] <diakopter> no; I'm being trollish :P

[21:51] <diakopter> hugme: hug diakopter

[21:51] * hugme hugs diakopter

[21:52] <TimToady> willful misinterpretation is the basis of half my humor :)

[21:52] <diakopter> .. and the other half is accidental misinterpretation!

[21:52] <TimToady> er, I wasn't going to say that

[21:52] <TimToady> :)

[21:52] <diakopter> lol.

[21:53] <diakopter>  /msg chanserv help

[21:53] <diakopter> ha

[21:54] <TimToady> did you notice we were chidden for maintaining a flock of opers?  :)

[21:55] <diakopter>  /msg chanserv quiet #perl6 *!*@*

[21:55] <diakopter> no

[21:56] <diakopter> I count 9

[21:57] <TimToady> it fluctuates, depending on who is on semi-permanently

[21:58] <diakopter> what's the threshold before phrienoad admins gurgle

[21:59] <TimToady> Any, apparently

[21:59] <TimToady> they think we should all be able to oper ourselves up at a moment's notice

[22:00] <TimToady> but historically it always seemed that that was a bit problematic

[22:00] <diakopter> hrm.. sounds like a job for a bot

[22:00] <TimToady> and when we went without operators, we ended up infested

[22:01] *** pmurias left
[22:01] <mikehh> rakudo (7666e92) builds on parrot r40846, make test / make spectest (up to r28100) PASS - Ubuntu 9.04 amd64 (gcc)

[22:03] <sjohnson> if people want to keep ops, they should employ GNU screen technology with a remote irc shell

[22:06] <TimToady> diakopter: the incident in question is here: http://irclog.perlgeek.de/perl6/2009-08-27#i_1438135

[22:08] <sjohnson> ahh, us / them mentality is subjective

[22:08] <TimToady> it doesn't seem that way to us :)

[22:09] <pmichaud> my irc client doesn't even display chanops

[22:09] <pmichaud> so I have no idea who has ops and who doesn't :)

[22:09] <sjohnson> pmichaud: hit /n

[22:10] <pmichaud> I think my point is that I'd not even be aware if I was a part of "us" or "them".  It's just "all us butterflies" to me.  :)

[22:11] <TimToady> those still in the larval state maybe don't see it that way :)

[22:12] <TimToady> anyhoo, if there was an approved way to handle this that doesn't otherwise suck, I'm certainly not opposed to progress

[22:12] *** lollan left
[22:12] *** REPLeffect left
[22:12] <sjohnson> how bout i wrote a bot to do it

[22:13] <sjohnson> that ops based on all info parameters of the irc mask

[22:13] <TimToady> well, that's how irc.perl.org handles it, but I don't know how that squares with freenode culture

[22:14] <TimToady> researches welcome :)

[22:14] <sjohnson> i didnt realize there was an unspoken culture rule

[22:14] <TimToady> *researchers

[22:14] <BinGOs> This is why there are services

[22:14] <TimToady> most cultures have unspoken rules...

[22:15] <BinGOs> so you don't have to write bots.

[22:15] <[particle]> please have some culture and don't speak any more of them

[22:15] *** mikehh left
[22:15] *** mikehh joined
[22:16] <sjohnson> hmm

[22:17] <sjohnson> says nothing on the motd about bots

[22:17] <sjohnson> Utility Bots and Pseudo Servers

[22:17] <sjohnson> Coming soon! 

[22:17] <sjohnson> on the website

[22:18] <sjohnson> pretty sure this culture bot thing is superstition

[22:19] <sjohnson> and lastly, nowhere in the freenode policy does it mention bots

[22:23] *** ChanServ sets mode: +o hugme

[22:23] *** ChanServ sets mode: +o pugs_svn

[22:23] *** ChanServ sets mode: +o dalek

[22:23] *** ChanServ sets mode: +o lambdabot

[22:23] <sjohnson> chanserv technology

[22:24] <diakopter> channel title appendix: "beware the bots with ops! They know not what they [can] do."

[22:27] <sjohnson> heheh

[22:28] <diakopter> has anyone mentioned that the colors of the boxes on perl6.org are somewhat close to Camelia's, but not exact?  Would they look better if they matched more closely?

[22:28] <sjohnson> talk to su-shee

[22:28] <TimToady> they used to be closer

[22:29] <TimToady> colors that look good in small quantities don't always look good in large quantities :)

[22:31] <sjohnson> has anyone seen those tiny MicroSDHC things that hold 8 gigs?

[22:31] <sjohnson> my oh my those things are small

[22:31] <sjohnson> http://www.davidgilson.co.uk/wp-content/uploads/2008/12/microsdhc-16gb.jpg

[22:31] <sjohnson> 16 gigs on that little guy

[22:32] *** lucs left
[22:32] <diakopter> I think Camelia should flap her wings (or merely blink or wink) every few minutes.

[22:32] <diakopter> or lay some eggs.

[22:34] <TimToady> go wild

[22:34] <TimToady> but skip the eggs

[22:36] <sjohnson> ... because butterflies don't lay eggs i don't think

[22:36] <sjohnson> if we're going to teach kids Perl, we might as well look credible.

[22:36] <sjohnson> hmm, maybe they do lay eggs

[22:36] <sjohnson> well i'll be

[22:37] <TimToady> yes, well, I think she's a little too young to get in on the B&B action

[22:37] <diakopter> Q:"Perl 6.  that's the language with a BUG as its mascot.  Why would the community want its brand to connote/evoke thoughts of bugs???"  A:"Because having a bug as the mascot signifies that all bugs in Perl 6 programs can be blamed on the language itself."  Q:"Ummm.."

[22:37] <diakopter> many female butterflies mate immediately after emerging from chrysalis

[22:38] <TimToady> a Perl 6 program can never be fully debugged :)

[22:38] *** Limbic_Region joined
[22:39] <diakopter> Limbic_Region: wb!

[22:39] *** ababo joined
[22:49] *** colomon left
[22:50] *** ababo left
[22:51] <TimToady> commuting &

[22:55] *** nihiliad left
[23:05] <dalek> rakudo: 7666e92 | pmichaud++ |  (6 files):

[23:05] <dalek> rakudo: Move infix:<%>, infix:<div>, and infix:<mod> to the setting.

[23:05] <dalek> rakudo: However, we don't actually implement infix:<div> or infix:<mod> yet,

[23:05] <dalek> rakudo: so add dummy versions of those to NYI.pm for now so people know

[23:05] <dalek> rakudo: what's going on.

[23:05] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7666e92876576ce0dc9b1f5b8a5f035e78a80e81

[23:10] *** molaf left
[23:22] *** Chillance left
[23:22] *** reqamst left
[23:25] *** M_o_C joined
[23:26] *** reqamst joined
[23:33] *** frew__ joined
[23:34] <pioto> how do div and mod differ from / and %? float vs. int?

[23:41] <TimToady> div and mod are mostly reserved for user-defined types that don't want the coercive semantics of / and %

[23:48] *** frew__ left
[23:59] *** cognominal left
