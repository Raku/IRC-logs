[00:07] *** kent\n left
[00:07] *** kent\n joined
[00:12] *** pyrimidine joined
[00:16] *** cotto left
[00:17] *** cotto joined
[00:20] *** pyrimidine left
[00:25] *** pyrimidine joined
[00:35] *** carlin joined
[00:47] *** nErVe left
[01:13] *** DakeDesu joined
[01:14] <pyrimidine> jnthn: around?

[01:18] *** KatrinaTheLamia left
[01:29] *** pyrimidine left
[01:30] *** pyrimidine joined
[01:35] *** meppl left
[01:38] *** bpetering joined
[01:40] <pyrimidine> can we compose multiple traits into attributes yet with rakudo?

[01:40] <pyrimidine> something like 'has $.foo is rw is aliased<bar>'

[01:45] <pyrimidine> this popped up from looking at jonathan's example from his last post (maybe in response to takadonet's question a couple of days ago here)

[01:45] *** bpetering is now known as missingthepoint

[01:45] <pyrimidine> http://irclog.perlgeek.de/perl6/2009-08-18#i_1403903

[01:47] *** KatrinaTheLamia joined
[01:56] <missingthepoint> morning #perl'ers :)

[02:02] *** pyrimidine left
[02:02] *** DakeDesu left
[02:03] *** lucs left
[02:03] *** pyrimidine joined
[02:05] *** lucs joined
[02:05] <pyrimidine> missingthepoint: morning

[02:07] <missingthepoint> morning. :)

[02:11] *** beggars joined
[02:13] *** Whiteknight left
[02:26] <carlin> how do I throw an exception?

[02:30] <carlin> rakudo: sub a { return Exception; }; try { say a; CATCH { say 'foo'; } };

[02:30] <p6eval> rakudo 0d4fe0:  ( no output )

[02:30] <carlin> ^ seg faults

[02:30] <carlin> but I think that's wrong anyway

[02:37] <missingthepoint> carlin: i think you just 'die'

[02:38] <missingthepoint> rakudo: { die 'exception. :*(' CATCH { say "caught exception: $!" }}

[02:38] <p6eval> rakudo 0d4fe0: OUTPUT«Statement not terminated properly at line 2, near "CATCH { sa"␤in Main (src/gen_setting.pm:3390)␤»

[02:38] <missingthepoint> oh hmm.

[02:38] <missingthepoint> rakudo: do { die 'exception. :*(' CATCH { say "caught exception: $!" }}

[02:38] <p6eval> rakudo 0d4fe0: OUTPUT«Statement not terminated properly at line 2, near "CATCH { sa"␤in Main (src/gen_setting.pm:3390)␤»

[02:38] *** nbrown left
[02:40] *** nbrown joined
[02:40] *** xomas joined
[02:42] <missingthepoint> oh my goodness. i need caffeine. :O

[02:42] <missingthepoint> rakudo: do { die 'exception. :*('; CATCH { say "caught exception: $!" }}

[02:42] <p6eval> rakudo 0d4fe0: OUTPUT«caught exception: exception. :*(␤exception. :*(␤in Main (/tmp/5wqVgzZrOz:2)␤»

[02:42] *** xomas_ left
[02:44] <missingthepoint> that's probably more confusing (or just foolish) than helpful. :*(

[02:45] <missingthepoint> FWIW, i was wondering the exact same thing the other day.

[02:45] *** pyrimidine left
[02:52] <missingthepoint> you might be right, but it might not be implemented in Rakudo.

[02:58] <missingthepoint> but how would we know if it's not implemented? :/

[03:01] *** azawawi joined
[03:01] <azawawi> moritz_: ping

[03:02] <carlin> rakudo: sub a { die 'test'; }; try { say a; CATCH { say 'foo'; } };

[03:02] <p6eval> rakudo 0d4fe0: OUTPUT«foo␤»

[03:02] <azawawi> moritz_: Could you please add #padre @ irc.perl.org to http://irclog.perlgeek.de/  ?

[03:02] <carlin> missingthepoint++ # thanks, die is right :)

[03:04] <carlin> rakudo: say Exception;

[03:04] <p6eval> rakudo 0d4fe0:  ( no output )

[03:04] <carlin> Hm, I wonder if that's known

[03:05] *** pyrimidine joined
[03:07] <pyrimidine> jnthn: nm, 'has Str $.description is rw is aliased<desc>;' works partially (desc is ro, description is rw). Just need to work out how to create the mutator for rw aliases.

[03:11] *** azawawi left
[03:12] *** pyrimidine left
[03:17] *** Limbic_Region left
[03:17] *** tak11 joined
[03:21] *** justatheory joined
[03:33] *** braceta left
[03:36] <s1n> is it still not possible to set environment variables (%*ENV) in rakudo yet? 

[03:45] *** pyrimidine joined
[03:48] <pyrimidine> rakudo: %*ENV.keys.join(',').say

[03:48] <p6eval> rakudo 0d4fe0: OUTPUT«PERL6LIB,TERM,SHELL,USER,LD_LIBRARY_PATH,LS_COLORS,PATH,MAIL,PWD,EDITOR,LANG,HISTCONTROL,HOME,SHLVL,LOGNAME,LESSOPEN,LESSCLOSE,_␤»

[03:52] <pyrimidine> s1n: just testing on p6eval and locally, doesn't look as if you can set %*ENV yet

[03:53] <pyrimidine> rakudo: %*ENV<THIS_NEVER_EXISTS> = 123; say %*ENV<THIS_NEVER_EXISTS>

[03:53] <p6eval> rakudo 0d4fe0: OUTPUT«␤»

[03:54] <carlin> rakudo: %*ENV = { 'a' => 'b' }; say %*ENV;

[03:54] <p6eval> rakudo 0d4fe0: OUTPUT«a  b␤»

[03:55] <missingthepoint> is rakudo.org being updated?

[03:56] <missingthepoint> (i can't load it.)

[03:58] *** macae joined
[04:02] *** macae left
[04:10] <pyrimidine> missingthepoint: rakudo.org is working for me

[04:12] *** tak11 left
[04:13] <missingthepoint> pyrimidine: oh noes, teh DNS iz broked! :*(

[04:14] *** tak11 joined
[04:16] <pyrimidine> missingthepoint: THE DEE-ENN-ESS ES BORKEN, RUN FOR TEH HILLZ

[04:22] <missingthepoint> actually, it's just "broked"... 'www.rakudo.org' works, but 'rakudo.org' doesn't. that's not so bad... unless the first page google results for 'rakudo' link to is 'rakudo.org'

[04:30] *** rjh left
[04:30] <pyrimidine> missingthepoint: rakudo.org is working for me as well.  maybe someone is watching?

[04:30] * pyrimidine queueing the spooky music...

[04:36] *** wayland76 left
[04:36] *** macae joined
[04:37] *** tak_ joined
[04:37] *** tak11 left
[04:38] *** wayland76 joined
[04:38] *** pyrimidine left
[04:42] <carlin> rakudo: say $?LINE;

[04:42] <p6eval> rakudo 0d4fe0: OUTPUT«Symbol '$?LINE' not predeclared in <anonymous> (/tmp/hJIrcUzgwq:2)␤in Main (src/gen_setting.pm:3390)␤»

[04:42] <carlin> :(

[04:45] *** wayland joined
[04:50] *** nihiliad left
[05:02] *** szabgab joined
[05:06] *** wayland76 left
[05:07] *** molaf joined
[05:07] *** tak_ is now known as tak11

[05:08] <missingthepoint> translate.google.com says someone is watching. ;)

[05:13] *** wayland left
[05:15] *** nsh left
[05:19] *** sbp left
[05:20] *** sri_kraih_ joined
[05:22] *** frederico joined
[05:25] *** wayland__ joined
[05:25] *** meteorjay left
[05:30] *** phenny left
[05:30] <missingthepoint> rakudo: use LWP::Simple; my $l = LWP::Simple.new; say ?($l.get('http://rakudo.org') ~~ /'Get Rakudo'/)

[05:30] <p6eval> rakudo 0d4fe0: OUTPUT«Can't find ./LWP/Simple in @*INC␤in Main (src/gen_setting.pm:445)␤»

[05:31] *** SmokeMachine left
[05:32] *** wayland76 joined
[05:34] *** SmokeMachine joined
[05:37] *** unitxt left
[05:37] *** sri_kraih left
[05:37] *** sri_kraih_ is now known as sri_kraih

[05:38] *** unitxt joined
[05:40] *** unitxt left
[05:42] *** SmokeMachine left
[05:45] *** orafu left
[05:45] *** orafu joined
[05:47] *** justatheory left
[05:49] *** macae left
[05:55] *** wayland__ left
[06:04] *** wayland76 left
[06:05] *** wayland76 joined
[06:05] *** zloyrusskiy joined
[06:13] *** tak11 left
[06:15] *** tak11 joined
[06:28] *** xomas left
[06:33] *** zloyrusskiy left
[06:33] *** cono_ joined
[06:35] *** DHGE joined
[06:36] *** zloyrusskiy joined
[06:41] *** sbp joined
[06:41] *** nsh joined
[06:43] *** tak11 left
[06:45] *** tak11 joined
[06:50] *** agentzh joined
[06:50] *** SmokeMachine joined
[06:50] *** zloyrusskiy left
[06:58] *** zloyrusskiy joined
[07:17] *** zloyrusskiy left
[07:22] *** beggars left
[07:39] *** Eevee joined
[07:42] *** Chillance joined
[07:53] *** fredrecsky joined
[08:00] *** frederico left
[08:01] *** jaffa8 joined
[08:01] <jaffa8> hi

[08:01] <jaffa8> where can I see what tests have been passed?

[08:02] <moritz_> jaffa8: download rakudo, run 'make spectest' and see

[08:03] <jaffa8> ok

[08:03] <jaffa8> where can I download a pugs binary?

[08:04] <moritz_> I don't know of any up-to-date binaries

[08:05] <jaffa8> Can I see the pugs test results somewhere?

[08:06] <moritz_> it used to be smoke.pugscode.org. No idea if that still works.

[08:10] <jaffa8> it does not seem to.

[08:10] <carlin> it doesn't, there is http://perlcabal.org/smoke.html but it's rather out of date

[08:13] <jaffa8> I guess rakudo inherited the test of pugs

[08:16] <jaffa8> Why was rakudo started?

[08:17] <jaffa8> What was not pugs continued?

[08:23] *** adhoc_ is now known as adhoc

[08:24] <moritz_> well, pugs is written in haskell, and most people in the perl community don't speak that all too well

[08:24] <moritz_> and it's not something you learn on a whim

[08:26] <carlin> rakudo: say Exception;

[08:26] <p6eval> rakudo 0d4fe0:  ( no output )

[08:26] <carlin> is that known?

[08:27] <moritz_> carlin: no; please report.

[08:32] * carlin filed bug

[08:33] *** Jedai joined
[08:38] *** Eevee left
[08:44] *** duke_leto joined
[08:52] *** Eevee joined
[08:53] *** rblasch joined
[08:56] <duke_leto> I’ve been wondering: A year (or more) ago, I was really hot for perl 6, because it was going to have all those nifty UTF-8 operators like ¥ and ← and ⇒ and stuff… I’ve tried some of them and rakudo never liked it :-(

[08:56] <duke_leto> Are they going to come or has that idea been dropped?

[09:03] <mberends> duke_leto: the ability to define your own Unicode operators has now come :-)

[09:16] *** Front_slash joined
[09:24] <duke_leto> mberends: :-) yay! That’s a step forwards ;-)

[09:25] <duke_leto> Because I’d really love to read code like if $a ≤ $b {…}

[09:31] <duke_leto> (and write it)

[09:36] *** M_o_C joined
[09:40] *** DHGE left
[09:41] *** masak joined
[09:41] <masak> o/

[09:42] <mberends> o/ masak

[09:43] <mberends> rakudo: sub infix:<≤>($a,$b){$a<=$b}; if 4 ≤ 5 { "lessorequal".say} # see duke_leto 

[09:43] <p6eval> rakudo 0d4fe0: OUTPUT«lessorequal␤»

[09:43] <masak> mberends: oh hai. whenever it's convenient for you, I'd like to pair up around proto, which has a number of pending refactors/fixes.

[09:43] <masak> mberends: oh, and by the way, still enjoying your condiments on my bread. mberends++

[09:44] <mberends> heh, well apart from unpredictable distractions, now would be good :)

[09:45] <masak> I'm fairly available too. ok, here's the outline:

[09:46] <masak> (1) the sources-as-classes refactor, (2) the independent-priority-graph refactor, (3) adapting proto for an installed Rakudo.

[09:46] <masak> the two former I mentioned in a nice restaurant in Lisbon. the latter is perhaps the more urgent. anyone of these is up for grabs.

[09:48] <mberends> I'm up for (3) first.

[09:49] <masak> good. we should probably discuss that one a bit.

[09:49] <mberends> (1) should be fairly simple, (2) depends on more abstraction redesign first

[09:49] <masak> proto has never needed 'sudo' privs before. now that it does, I think that entails some other reconsideration.

[09:49] <masak> maybe it's time to try that "central lib/" idea, for example...

[09:51] <masak> the simplest thing that could possibly work with a central lib/ directory would be to have a directory somewhere, such as /usr/share/perl6-proto/lib (just a suggestion)

[09:51] <masak> and then "install" the PIR files there -- or, if there is no make step, the .pm files.

[09:52] <masak> slightly large rewrite, but it means our PERL6LIB worries are over, once and for all.

[09:52] <masak> it also means people have to play nice(r) with module names.

[09:53] <mberends> agreed. the dirname is a bikeshed topic, but we should try to avoid future upheavals

[09:54] <mberends> later today japhb++ planned to discuss similar issues for Parrot modules

[09:55] <masak> I threw in '-proto' in the dirname because I still consider proto to be a very unofficial, under-the-radar phenomenon. thus, it shouldn't take an "official" path like /usr/share/perl6/lib

[09:56] <mberends> masak++: yes, that's fine, if people agree with the proto defaults down the line, we can remove 6 characters from the dirname easily

[09:57] <masak> sure, but remember that this solution _cannot_ be the final solution.

[09:57] <masak> it doesn't do authorities and version.

[09:57] <masak> s/version/versions/

[09:57] <mberends> that's what the database-y alternative plans to handle

[09:58] <masak> aye.

[09:59] <masak> but does that mean that up in the filesystem, one can only have one module of a given name installed?

[09:59] <mberends> that's "the simplest thing that could possibly work" ;)

[10:00] <masak> it is indeed.

[10:00] <masak> let's do that now, too.

[10:01] <mberends> putting :ver and :auth into the filesystem is a bad idea imho

[10:01] <masak> hm, changing the installation path is a pretty large change to proto.

[10:01] <M_o_C> Is it intended that the parrot sources must be located in <parrot path>/src? And does "sources", i. e. the parrot source directory as specified in the makefile, refer to the svn co of trunk or is this something else?

[10:01] <masak> I was thinking first about upgrading the config file and making it backwards-compatible, but that feels like a lot of work, to be honest.

[10:02] <masak> instead, I'll just let proto self-deprecate if it notices it has been upgraded but has an old config file.

[10:02] <masak> I'll start with that commit.

[10:03] <mberends> most other installers (including CPAN) do everything apart from the final install step without su privileges. proto should also work in stages, if possible. That's a considerable change.

[10:04] <masak> I can see the need for that. how would it work in practice? invoking proto several times?

[10:05] <masak> I think I would deplore that slightly.

[10:05] *** jauaor left
[10:06] <jaffa8> Does anyone know about cabal install Pugs?

[10:06] <jaffa8> How should it work?

[10:06] <mberends> masak: unfortunately, that's probably the common solution. OTOH, shelling to a 'sudo' might prompt for a password.

[10:08] <masak> mberends: I'd be more comfortable with. "the module and all its dependencies have been built and tested. we're now ready to install" -- user gets put into a shell either inside or outside of proto, and is told what to write.

[10:09] <masak> something in the order of 'sudo ./proto finish-install'

[10:09] <masak> speaking of './proto', it's probably time to put proto in the path, too.

[10:11] <mberends> M_o_C: yes, although Parrot experts can override numerous settings. The Rakudo Configure.pl finds out about your Parrot from <parrot>/bin/parrot_config

[10:12] <mberends> masak: shell inside proto if possible, that way proto has a bit more control

[10:12] <masak> good.

[10:13] <mberends> masak: putting proto in the path will hinder its main design objective, which was to become obsolete ;)

[10:14] <masak> perhaps a full-blown shell is overkill, though. perhaps it should be "do you want to install this module globally? (will require sudo password) [Y/n]"

[10:14] * mberends likes that

[10:14] <masak> mberends: true, and then the config file would have to go somewhere more global as well. so I'll stand down on that idea.

[10:15] <mberends> are we ever going to port proto to Windows?

[10:16] <mberends> jnthn++ was reading create_new_project recently and snickering

[10:16] <masak> aye. I saw that.

[10:16] <masak> things in proto are made on an as-needed basis. often the needs are mine.

[10:17] <mberends> the simplest thing... is Unix-y right now

[10:17] <masak> the Windows compat is no different -- if someone comes along and wants it badly enough, it'll happen.

[10:17] <M_o_C> Thanks, mberends.

[10:18] <masak> jaffa8: it's been a long time since I used 'cabal install Pugs', but I got it to work then. "how should it work?" is difficult to answer sensibly... it should install Pugs. it did for me, after some persuasion.

[10:19] <mberends> masak: if we can count on $HOME existing, we can base proto's lib there

[10:19] *** xinming_ joined
[10:19] <masak> instead of globally, you mean? yes, perhaps that's prederable.

[10:19] <jaffa8> masak, i am trying on windows

[10:19] <jaffa8> I get an error

[10:19] <masak> jaffa8: oh, that might make things less... straightforward.

[10:20] <jaffa8> missing dependency on foreign librarz

[10:20] <masak> jaffa8: that's pretty clear, at least.

[10:20] <mberends> jaffa8: which library name?

[10:20] <masak> jaffa8: your quest, should you choose to accept it, is to find and install this library.

[10:20] <jaffa8> perl5/p5embed.h

[10:20] <jaffa8> I set the include path

[10:21] <mberends> jaffa8: that's from the Perl 5 source code

[10:21] <jaffa8> masak, I started that "quest

[10:21] <jaffa8> I found the files in the pug distribution

[10:21] <jaffa8> I set the path

[10:21] <jaffa8> cabal install Pugs --extra-lib-dirs=D:\standalone\pugs\src

[10:22] <jaffa8> but it has no effect

[10:22] <jnthn> dobry den :-)

[10:22] <mberends> jaffa8: have you tried also installing Strawberry Perl 5?

[10:23] <jaffa8> what for?

[10:23] <mberends> jnthn: dobor dan :)

[10:24] <mberends> jaffa8: I think Strawberry Perl includes the file you are lacking

[10:24] <masak> jnthn: добрый день :)

[10:25] *** Su-Shee joined
[10:25] <Su-Shee> heyho.

[10:25] <jaffa8> jnthn, can you tell me how to install pugs?

[10:26] <jaffa8> mberends, I have the header file

[10:26] <mberends> jaffa8: cool! one step closer...

[10:28] <jnthn> jaffa8: No.

[10:28] <jaffa8> How come? You must have done many times

[10:28] <jnthn> jaffa8: Not for (literally) years.

[10:29] <jaffa8> jnthn, do you have a version of pugs?

[10:29] <jnthn> jaffa8: And even then I didn't install it; I built from source.

[10:29] <jnthn> no, I use the evalbot here in channel if I want to check something

[10:29] <jaffa8> Does that use pugs?

[10:30] <mberends> jaffa8: dunno if this helps, http://perl6.cz/wiki/Pugs_on_MS_Windows (it's old)

[10:30] <jnthn> jaffa8: It can

[10:30] <jnthn> pugs: say 42

[10:30] <p6eval> pugs: OUTPUT«42␤»

[10:31] <jnthn> jaffa8: Normally I'm only interested in the output of Pugs in certain specific cases.

[10:31] <jaffa8> pugs:while ( $u ~~ m:p/a/ ) {}

[10:31] <jaffa8> pugs:my $u;( $u ~~ m:p/a/ ) {}

[10:31] <jaffa8> it is not working

[10:32] <jaffa8> pugs: y $u;( $u ~~ m:p/a/ ) {}

[10:32] <p6eval> pugs: OUTPUT«*** ␤    Unexpected ";("␤    expecting "::"␤    Variable "$u" requires predeclaration or explicit package name␤    at /tmp/xEydusvUpt line 1, column 5␤»

[10:32] <jaffa8> pugs: m $u;( $u ~~ m:p/a/ ) {}

[10:32] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "u"␤    expecting term postfix or operator␤    at /tmp/6j2JJ1gdAz line 1, column 9␤»

[10:32] <jaffa8> pugs: my u; if ($u ~~ m:p/a/ ) {}

[10:32] <p6eval> pugs: OUTPUT«*** ␤    Unexpected ";"␤    expecting word character, ":" or "("␤    at /tmp/dc0uhEgh98 line 1, column 5␤»

[10:32] <jaffa8> pugs: my $u; if ($u ~~ m:p/a/ ) {}

[10:32] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[10:33] <jaffa8> jnthn, Is this the most recent pugs?

[10:33] <mberends> jaffa8: unless you have a good reason, rather use Rakudo

[10:33] <jaffa8> I have a good reason.

[10:33] <mberends> ok􏿽x9E

[10:34] <jnthn> jaffa8: Probably...remember Pugs hasn't really seen active development for a couple of years.

[10:34] <jaffa8> Is that supposed to be an error message?

[10:35] <jaffa8> pugs: my $u; if ($u =~ m:p/a/ ) {}

[10:35] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "m"␤    There is no =~ operator in Perl 6 -- did you mean ~~ (match) or ~= (concat-assign)?␤    at /tmp/pT9kJTEbZn line 1, column 18␤»

[10:35] <jaffa8> pugs: my $u; if ($u ~~ /a/ ) {}

[10:35] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[10:36] <jaffa8> pugs: my $u; if ($u ~~ m/a/ ) {}

[10:36] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[10:36] <jnthn> jaffa8: I think it's just something broken in the regex handling.

[10:36] <mberends> pugs: my $u = "yay"; if ($u ~~ m:p5/a/ ) { "matched".say }

[10:36] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[10:37] <carlin> jaffa8: why do you need to use pugs instead of rakudo?

[10:37] <jaffa8> rakudo did not handle the perl6 statement I used

[10:38] <jaffa8> this-->>> my $u; if ($u =~ m:p/a/ ) {}

[10:38] <masak> jaffa8: it's ~~

[10:38] <jaffa8> even then

[10:38] <mberends> rakudo: my $u = "yay"; if ($u ~~ m/a/ ) { "matched".say }

[10:38] <masak> and it might work if you put the :p inside the //

[10:38] <p6eval> rakudo 0d4fe0: OUTPUT«matched␤»

[10:38] <jaffa8> rakudo: my $u; if ($u =~ m:p/a/ ) {}

[10:38] <p6eval> rakudo 0d4fe0: OUTPUT«Colons cannot be used as delimiters in quoting constructs at line 2, near ":p/a/ ) {}"␤in Main (src/gen_setting.pm:3390)␤»

[10:39] <reqamst> Is AUTOLOAD implemented currently?

[10:39] <masak> jaffa8: you know, it occurs to me that it might be more effective to ask about such things here, rather than try a whole different implementation. :)

[10:39] <mberends> the :p is the problem

[10:39] <jaffa8> rakudo: my $u; if ($u =~ /:p a/ ) {}

[10:39] <p6eval> rakudo 0d4fe0:  ( no output )

[10:39] <masak> see? :)

[10:40] <jaffa8> Can some try this: my $u="􏿽xE4  a  a"; while ($u =~ /:p a/ ) {print "got "}

[10:40] <M_o_C> rakudo: my $u; if ($u =~ :p/ a/ ) {}

[10:40] <p6eval> rakudo 0d4fe0: OUTPUT«Statement not terminated properly at line 2, near "/ ) {}"␤in Main (src/gen_setting.pm:3390)␤»

[10:40] <jaffa8> Can some try this: my $u="􏿽xE4  a  a"; while ($u ~~ /:p a/ ) {print "got "}

[10:41] <jaffa8> rakudo: my $u="􏿽xE4  a  a"; while ($u ~~ /:p a/ ) {print "got "}

[10:41] <p6eval> rakudo 0d4fe0: OUTPUT«got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got

[10:41] <p6eval> ..got go…

[10:41] <jaffa8> rakudo: my $u="􏿽xE4  a  a"; while ($u ~~ m:g /:p a/ ) {print "got "}

[10:41] <p6eval> rakudo 0d4fe0: OUTPUT«Colons cannot be used as delimiters in quoting constructs at line 2, near ":g /:p a/ "␤in Main (src/gen_setting.pm:3390)␤»

[10:42] <masak> jaffa8: I'm sorry, you have a strange byte in your $u string.

[10:42] <masak> neither my client nor the IRC logs can see what it is.

[10:42] <jaffa8> How would you parse a string for matches repeatedly?

[10:42] <jaffa8> rakudo: my $u="a  a  a"; while ($u ~~ m:g /:p a/ ) {print "got "}

[10:42] <p6eval> rakudo 0d4fe0: OUTPUT«Colons cannot be used as delimiters in quoting constructs at line 2, near ":g /:p a/ "␤in Main (src/gen_setting.pm:3390)␤»

[10:42] <masak> jaffa8: I think I'd just use .comb

[10:43] <jaffa8> what is .comb?

[10:43] <masak> rakudo: say "foo foooo foooo fo".comb(/fo+/).perl

[10:43] <p6eval> rakudo 0d4fe0: OUTPUT«["foo", "foooo", "foooo", "fo"]␤»

[10:43] <masak> that's .comb

[10:44] <masak> S32/Str contains the details.

[10:44] <jaffa8> rakudo: my $u="a  a  a"; while ($u ~~ m:g /:g :p a/ ) {print "got "}

[10:44] <p6eval> rakudo 0d4fe0: OUTPUT«Colons cannot be used as delimiters in quoting constructs at line 2, near ":g /:g :p "␤in Main (src/gen_setting.pm:3390)␤»

[10:44] <jaffa8> rakudo: my $u="a  a  a"; while ($u ~~ /:g :p a/ ) {print "got "}

[10:44] <p6eval> rakudo 0d4fe0: OUTPUT«got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got got

[10:44] <p6eval> ..got go…

[10:44] <jaffa8> masak,ok

[10:44] <jaffa8> it is quite a weird name

[10:44] <masak> jaffa8: my approach has the advantage of actually working. :)

[10:44] <M_o_C> Is there a difference between http://perlcabal.org/syn/ and http://feather.perl6.nl/syn/?

[10:44] <jaffa8> it does not remind me of anything

[10:45] <masak> jaffa8: no, 'comb' is a verb meaning 'pick out the things you're interested in'.

[10:45] <masak> it's the figure-ground opposite of 'split'.

[10:46] <jaffa8> what is that .perl at the end?

[10:47] *** molaf left
[10:47] <mberends> jaffa8: it's a built in Data::Dumper

[10:47] <carlin> M_o_C: No, http://feather.perl6.nl/ and http://perlcabal.org/ look like they're just different domains pointed to the same server

[10:47] * jnthn -> bbq, bakc later

[10:48] <M_o_C> Ok, thanks

[10:48] <jaffa8> ok

[10:50] <jaffa8> rakudo: say "foo foooo foooo fo".comb(/(f)o+/).perl

[10:50] <p6eval> rakudo 0d4fe0: OUTPUT«[Match.new(␤ # WARNING: this is not working perl code␤ # and for debugging purposes only␤ ast  => "foo",␤ Str => "foo",␤ from => 0,␤ to   => 3,␤ positional => [␤  Match.new(␤    ast  => "f",␤    Str => "f",␤    from => 0,␤    to   => 1,␤   ),␤ ],␤), Match.new(␤ # WARNING: this

[10:50] <p6eval> ..is n…

[10:51] *** Whiteknight joined
[10:51] <mberends> jaffa8: don't worry about the warning, .perl for pattern matches is under construction

[10:52] <jaffa8> I wonder if I use brackets, then how do I get the value of those?

[10:52] <jaffa8> in comb?

[10:54] <mberends> rakudo: "foo foooo foooo fo" ~~ /(f)o+/; say $/[0]

[10:55] <p6eval> rakudo 0d4fe0: OUTPUT«f␤»

[10:56] <jaffa8> rakudo: "foo foooo foooo fo" ~~ /(f)o+/; say $/[1]

[10:56] <p6eval> rakudo 0d4fe0: OUTPUT«Use of uninitialized value␤␤»

[10:56] <mberends> rakudo: "foo foooo foooo fo" ~~ /(fo+)o/; say $/[0]; say $/[1]

[10:56] <p6eval> rakudo 0d4fe0: OUTPUT«fo␤Use of uninitialized value␤␤»

[10:59] <reqamst> rakudo: my num $number

[10:59] <p6eval> rakudo 0d4fe0: OUTPUT«Malformed declaration at line 2, near "num $numbe"␤in Main (src/gen_setting.pm:3390)␤»

[10:59] <reqamst> Why I can't use native types? Is it a bug?

[11:00] <carlin> rakudo: my Num $number;

[11:00] <p6eval> rakudo 0d4fe0:  ( no output )

[11:00] <reqamst> yes, there is no problem with immutable types

[11:01] <mberends> reqamst: native types are not yet implemented

[11:02] <reqamst> mberends: I see, thanks.

[11:04] <reqamst> gdzie ten TBH?

[11:04] <reqamst> oops, wrong channel

[11:06] <masak> Polish, right?

[11:07] <reqamst> right

[11:07] <masak> mberends: I just pushed a deprecation message for proto. could you run it and see that it works?

[11:07] <masak> (at present, if you follow the instructions, you'll just get the deprecation message again. but that's next on the agenda.)

[11:09] *** rafl joined
[11:09] <masak> & # hunting for food

[11:13] *** azawawi joined
[11:14] *** eiro_ joined
[11:14] <azawawi> moritz_: Thanks a lot for adding it. That really help with searching IRC logs. cool :)

[11:15] <azawawi> moritz_: s/help/helps

[11:16] *** azawawi left
[11:16] *** Infinoid_ joined
[11:16] *** wayland_ joined
[11:16] *** Front_slash left
[11:16] *** wayland76 left
[11:16] *** gfldex left
[11:16] *** patmat left
[11:16] *** mberends left
[11:16] *** Maddingue left
[11:16] *** eiro left
[11:16] *** Infinoid left
[11:16] *** gabiruh left
[11:16] *** Aisling left
[11:16] *** awwaiid left
[11:16] *** Aisling joined
[11:17] *** mberends joined
[11:17] *** Front_slash joined
[11:17] *** wayland76 joined
[11:17] *** gfldex joined
[11:17] *** gabiruh joined
[11:17] *** Maddingue joined
[11:17] *** awwaiid joined
[11:17] *** patmat joined
[11:17] *** irc.freenode.net sets mode: +o mberends

[11:22] *** meppl joined
[11:23] *** wayland76 left
[11:24] <M_o_C> Win32 Problem: I have a SVN CO in .\Parrot\src and Parrot is installed in .\Parrot. Rakudo git-clone resides in .\rakudo-git-clone. When I try to mingw32-make Rakudo I get the following error:

[11:26] <lisppaste3> MoC pasted "Win32 make fails" at http://paste.lisp.org/display/85891

[11:29] *** leedo_ joined
[11:29] *** leedo left
[11:46] *** masak left
[11:46] *** masak joined
[11:47] *** DarkWolf84 joined
[11:49] <DarkWolf84> hi all

[11:49] <DarkWolf84> :)

[11:49] <masak> DarkWolf84: o/

[11:50] <DarkWolf84> I have strange problem with installed rakudo and unicode

[11:50] <masak> let's hear it.

[11:52] <DarkWolf84> when i try to print some unicode chars it writes a jubberish

[11:52] <moritz_> M_o_C: did you do a 'make install-dev' in parrot?

[11:52] <DarkWolf84> like 

[11:52] <DarkWolf84> no

[11:53] *** hanekomu joined
[11:53] <masak> rakudo: say 'ʀɐƙʊðɵ'

[11:53] <p6eval> rakudo 0d4fe0: OUTPUT«ʀɐƙʊðɵ␤»

[11:53] <moritz_> DarkWolf84: rakudo does input and output in UTF-8. If you use a diferent character encoding on your console you'll only see rubbish

[11:53] <masak> works here.

[11:53] <DarkWolf84> yeah

[11:53] <DarkWolf84> rakudo: say "􏿽xFA􏿽xC4􏿽xD2􏿽xC1􏿽xD7􏿽xC5􏿽xCA"

[11:53] <p6eval> rakudo 0d4fe0: OUTPUT«�������␤»

[11:54] <masak> DarkWolf84: what you entered there was not UTF-8.

[11:54] <M_o_C> Ah, there's the problem, I only did make install. Thanks moritz_

[11:54] <DarkWolf84> strange

[11:54] <masak> DarkWolf84: it might have been some latin-* encoding, perhaps.

[11:54] <DarkWolf84> why is that

[11:55] <masak> DarkWolf84: here on IRC, it's probably because of the way your IRC client is set up.

[11:56] <masak> for the Rakudo execution, it's probably the way your shell or your filesystem is set up.

[11:56] <DarkWolf84> i have to check the web logs

[11:56] <masak> s/filesystem/editor/

[11:56] <DarkWolf84> my client should use utf8

[11:57] *** phenny joined
[11:59] <masak> phenny: welcome back.

[11:59] <phenny> masak: 22 Aug 19:32Z <s1n> tell masak i noticed there was no longer a Web.pm. am i mistaken or is that an ironic name for the project now

[11:59] <phenny> masak: 22 Aug 19:36Z <s1n> tell masak LolDispatch doesn't compile, rakudo thinks it's missing an =end, might be bug worthy

[11:59] <phenny> masak: 22 Aug 23:33Z <s1n> tell masak i can't seem to clone november, it keeps timing out... any idea what's up with that?

[12:00] <masak> phenny: tell s1n not an ironic name. but I wouldn't say that the use case is very clear either right now. Web.pm is a set of modules at different levels. maybe it'll make sense to load them through 'use Web;' at the top, maybe not.

[12:00] <phenny> masak: I'll pass that on when s1n is around.

[12:01] *** hanekomu left
[12:01] *** DarkWolf84 left
[12:01] *** DarkWolf84 joined
[12:02] <DarkWolf84> rakudo: say "Здрасти"

[12:02] <p6eval> rakudo 0d4fe0: OUTPUT«Здрасти␤»

[12:02] <DarkWolf84> works

[12:03] <masak> aye, much better.

[12:03] <DarkWolf84> that was "hi" in Bulgarian :)

[12:04] <masak> ah, pretty similar to Russian, then.

[12:04] <DarkWolf84> yeah

[12:04] <masak> is there a singular and a plural form, as in Russian?

[12:04] <masak> phenny: tell s1n cloning from git://github.com/viklund/november.git works fine here.

[12:04] <phenny> masak: I'll pass that on when s1n is around.

[12:04] <DarkWolf84> yeah

[12:05] <DarkWolf84> most of the plural forms in Russian end with и

[12:06] <masak> да.

[12:06] <DarkWolf84> in Bulgarian too

[12:07] <masak> like пироги.

[12:07] <DarkWolf84> да

[12:10] <DarkWolf84> is the evalbot here installed or just from source dir

[12:11] <DarkWolf84> i tried perl6 in the rakudo source dir and utf8 works

[12:11] <DarkWolf84> but installed version is not

[12:12] <masak> that's pretty interesting.

[12:13] <masak> I could imagine that the evalbot runs Rakudo in the current directory.

[12:14] <DarkWolf84> maybe that is related to icu linking

[12:15] <moritz_> masak: it does not

[12:15] <moritz_> masak: it installs rakudo

[12:15] <masak> I sit corrected.

[12:15] <moritz_> rakudo: say %*VM<config><prefix>

[12:16] <p6eval> rakudo 0d4fe0: OUTPUT«/home/evalenv/p2␤»

[12:18] <DarkWolf84> ok I'll make it again

[12:23] <DarkWolf84> is something needed for the parrot lib directory

[12:23] <moritz_> disc space

[12:23] <moritz_> or what do you mean?

[12:24] <DarkWolf84> like ld path

[12:24] <DarkWolf84> or something like that

[12:24] <moritz_> if libicu is installed normally on your system everything should be fine.

[12:24] <DarkWolf84> ok

[12:25] * moritz_ tried to visualize object creation and initialization in Perl 6:  http://moritz.faui2k3.org/files/build.svg

[12:31] <masak> moritz_: nice.

[12:31] <moritz_> masak: thanks

[12:31] * moritz_ is quite fond of SVG these days...

[12:31] * masak too

[12:33] <mberends> moritz_++

[12:33] <phenny> mberends: 22 Aug 16:11Z <masak> tell mberends TimToady would like you to rewrite create-new-project in TECO for greater platform independence...

[12:34] <moritz_> TECO?

[12:34] *** duke_leto left
[12:34] <mberends> :) pull the other one, it haz bells on

[12:34] <masak> moritz_: http://en.wikipedia.org/wiki/Text_Editor_and_Corrector

[12:37] <mberends> "TECO command sequence more closely resembles transmission line noise" sounds familiar ;)

[12:40] <masak> $TECO is readonly

[12:40] <DarkWolf84> oh I got it it is the interactive shell

[12:41] <DarkWolf84> oneliners write corect utf8 and the normal programs

[12:42] <masak> DarkWolf84: I can confirm that.

[12:43] * moritz_ too

[12:43] <moritz_> DarkWolf84: would you please submit a bug report to [email@hidden.address]
[12:45] <mberends> masak: proto's deprecation notice is a good start. It would be nice to save the list of existing projects somewhere, because once we move to a different base dir we cannot expect to find the old projects any more.

[12:46] <masak> nod.

[12:47] <mberends> perhaps just keep the old basedir in the proto config file

[12:47] <jaffa8> hi, the rakudo does not give good error messages

[12:47] <moritz_> jaffa8: in what cases?

[12:47] <masak> another thought I had: if we put proto itself through it installation process, it would be antisocial to keep the module names Installer and Ecosystem. they would have to be renamed to App::Proto::Installer and Perl6::Ecosystem, or the like.

[12:47] <jaffa8> for bad regular expression

[12:47] <jaffa8> it does not give a line number

[12:48] <moritz_> rakudo: /,/

[12:48] <p6eval> rakudo 0d4fe0: OUTPUT«Syntax error at line 2, near "/,/"␤in Main (src/gen_setting.pm:3390)␤»

[12:48] <moritz_> well, in this case it gives a line number.

[12:48] <masak> mberends: yes, keeping the old basedir is fine, but I think I plan to remove all PERL6LIB handling for those...

[12:48] <jaffa8> rakudo: while ( $filenamelist =~ /\G(.+?),|\G(.+)/g ) {}

[12:48] <DarkWolf84> masak, I'll try but I've never pasted bug before

[12:48] <p6eval> rakudo 0d4fe0: OUTPUT«perl6regex parse error: Alphanumeric metacharacters are reserved at offset 38, found '('␤in Main (src/gen_setting.pm:3390)␤»

[12:48] <moritz_> oh.

[12:48] <jaffa8> here you are

[12:48] <masak> DarkWolf84: you meant moritz_. :) it's not that hard.

[12:48] <DarkWolf84> I'm not shure what to do

[12:48] <DarkWolf84> ok

[12:48] <moritz_> jaffa8: care to submit a bug report?

[12:49] <masak> DarkWolf84: paste enough information to reproduce the problem.

[12:49] <DarkWolf84> ok

[12:49] <jaffa8> where is it?

[12:49] <moritz_> jaffa8: just write an email to [email@hidden.address] includiing this example and the complaint that it gives no line number.

[12:49] <DarkWolf84> ok

[12:49] <DarkWolf84> I'll do it

[12:51] <masak> DarkWolf84++

[12:51] <jaffa8> I have done it

[12:53] <mberends> masak: yes, the old basedir must not exist in PERL6LIB. Would you be happy to ask the user for permission to wipe the old config.proto and automatically create a new one?

[12:53] <masak> jaffa8++

[12:54] <moritz_> do you really have enough users alreay to care about migration/backward compatibility?

[12:54] <masak> mberends: that's even better. we'll go with that.

[12:54] <mberends> @karma jaffa8

[12:54] <lambdabot> jaffa8 has a karma of 1

[12:54] <masak> moritz_: (1) yes, (2) what we're doing is the next simplest thing from not caring at all.

[12:55] <moritz_> masak: ok

[12:55] <moritz_> masak: do you happen to know how many users you have, roughly?

[12:55] <masak> if the user upgrades, she will need a new version of the config file anyhow.

[12:55] <mberends> moritz_: all of Austria for starters

[12:55] <masak> moritz_: that's hard to tell. we don't phone home or anything.

[12:55] <moritz_> mberends: oh, I forgot :)

[12:56] <masak> moritz_: but I'm sometimes pleasantly surprised at seeing projects created by mberends' script.

[12:56] <masak> so people seem to tend to use it.

[12:56] <masak> & # commuting

[12:56] *** masak left
[12:57] <mberends> the main reason proto doesn't phone home is the hardware and bandwidth it would cost us

[12:57] <moritz_> ;-)

[13:00] <DarkWolf84> oops

[13:01] <DarkWolf84> i've pasted the bug too

[13:04] *** jaffa8 left
[13:05] *** xinming_ is now known as xinming

[13:09] *** jaffa8 joined
[13:09] <jaffa8> I have this in my code

[13:09] <jaffa8> print <<eof;

[13:10] <jaffa8> What can I use in Perl 6?

[13:22] *** masak joined
[13:25] <colomon> jaffa8: that's not implemented in Rakudo yet.

[13:26] <mberends> jaffa8: print "

[13:26] <mberends> jaffa8:  hello

[13:26] <mberends> jaffa8: "; # multiline string

[13:28] <pmichaud> there's also:

[13:28] <pmichaud>     print qq{

[13:28] <pmichaud>     hello

[13:28] <pmichaud>     };

[13:29] <jaffa8> ok

[13:29] <mberends> hi ^

[13:29] <pmichaud> (good morning, #perl6)

[13:29] <mberends> oops hi pmichaud 

[13:29] <jaffa8> rakudo: $b=qq<wewewewe>;

[13:29] <p6eval> rakudo 0d4fe0: OUTPUT«Symbol '$b' not predeclared in <anonymous> (/tmp/Cx4nd5be0U:2)␤in Main (src/gen_setting.pm:3390)␤»

[13:30] <jaffa8> rakudo: my $b=qq<wewewewe>;

[13:30] <p6eval> rakudo 0d4fe0:  ( no output )

[13:30] <jaffa8> where can I get and std parser?

[13:31] <pmichaud> if you want to build the std parser for yourself, it's in the pugs repository

[13:31] <pmichaud> if you just want something online, use  "std: " on this channel

[13:31] <pmichaud> std:  my $b=qq<wewewewe>;

[13:31] <p6eval> std 28050: OUTPUT«ok 00:04 39m␤»

[13:32] <pmichaud> see also perl6-projects.org for links to the std parser

[13:32] <s1n> morning all

[13:32] <phenny> s1n: 12:00Z <masak> tell s1n not an ironic name. but I wouldn't say that the use case is very clear either right now. Web.pm is a set of modules at different levels. maybe it'll make sense to load them through 'use Web;' at the top, maybe not.

[13:32] <phenny> s1n: 12:04Z <masak> tell s1n cloning from git://github.com/viklund/november.git works fine here.

[13:35] <masak> s1n: the 'Web.pm' brand is important, but I don't know yet whether it'll be part of use statements. it's first and foremost a social project, an incubator for web projects that we need. I'm pretty sure that the MVC framework will not be called 'Web'. that's why I removed those stubbed module files.

[13:36] <masak> mornin', pmichaud.

[13:36] <s1n> masak: it's gathered attention as Web.pm, not Web, you've built a brand around a non-existant module...

[13:36] <s1n> masak: i understand where you're coming from, but newcomers wishing to use it may not

[13:37] <masak> s1n: that's a valid point.

[13:37] <masak> s1n: if there's a simple mechanism by which Web.pm can pull in those other 'endorsed' modules, I think that'd be a good use for it.

[13:37] <s1n> pmichaud: do hll_globals have any mechanism for callback when being assigned? i want to perform an action in C/PIR when one is set

[13:40] <s1n> masak: sure, it doesn't sound like an easy fix, but you should look into it, i was rather surprised to see there was no Web.pm, maybe rebuild the brand or come up with a sort of component loading module named Web.pm...

[13:40] <masak> s1n: it could be an easy fix. I'm sure it'll come back before week 20.

[13:40] <mberends> pmichaud: after using rakudo/tools/test_summary.pl rather a lot, there seems little reason for both 'test' and 'plan' counts per script, so I've posted a deprecation notice on line 132. Do you sometimes need the separate figures or can one be dropped, and if so, when?

[13:41] <s1n> masak: okay, it's your project, i just wanted to give you an outsider's perspective

[13:41] <masak> s1n: much appreciated. thanks.

[13:42] <pmichaud> mberends: looking

[13:43] <mberends> pmichaud: the polite timing would be after the September release

[13:44] <mberends> btw, the planless testing discussed recently would wreck our spectest statistics :-(

[13:45] <moritz_> mberends: I know, which is why I use it only sparingly

[13:45] <pmichaud> mberends: all that I really need/use personally at the moment are the statistics at the end

[13:46] <mberends> ok, I reformatted them a little as well for you :)

[13:46] *** braceta joined
[13:47] <masak> I've come to really like planless testing. but I see the argument for not using it in the Perl 6 spectests.

[13:49] *** icwiener joined
[13:50] <pmichaud> mberends:  I'll run my daily tests with the revised test-summary.pl script and can give better feedback then

[13:50] <pmichaud> (running them now, will take an hour or two)

[13:50] <mberends> the 'test' column can be dropped because (1) it's the sum of several other columns (2) it should match 'plan' (3) it doesn't occur in the subtotals at the end

[13:50] <pmichaud> I think I'm fine with dropping the 'test' column, yes.

[13:50] <pmichaud> we can go ahead and do that now, and if it's a problem for someone we'll put it back

[13:50] <pmichaud> (or come up with some other answer)

[13:51] <mberends> pmichaud++

[13:52] *** simcop2387 left
[13:53] <moritz_> as long as the format of spectest-progress.csv doesn't change I'm fine with that

[13:53] <mberends> moritz_: yes, that's staying the same

[13:58] <pmichaud> afk # one last trip to the airport

[14:00] <jaffa8> rakudo: ">${filename}.dbg"

[14:00] <p6eval> rakudo 0d4fe0: OUTPUT«Can't use $ as non-variable in interpolated string at line 2, near "${filename"␤in Main (src/gen_setting.pm:3390)␤»

[14:00] <jaffa8> std: ">${filename}.dbg"

[14:01] <p6eval> std 28050:  ( no output )

[14:01] <jaffa8> how would you do this in rakudo: "${fn}"?

[14:02] <masak> rakudoÖ sub foo { "OH HAI" }; say "like this: {foo}"

[14:02] <masak> rakudo: sub foo { "OH HAI" }; say "like this: {foo}"

[14:02] <p6eval> rakudo 0d4fe0: OUTPUT«like this: OH HAI␤»

[14:03] <jaffa8> I mean a variable

[14:03] <jaffa8> how would you do this in rakudo: "${thisisavar}thisisnotavariablename"?

[14:04] <masak> rakudo: my $variable = "OH HAI"; say "{$variable}likethis"

[14:04] <p6eval> rakudo 0d4fe0: OUTPUT«OH HAIlikethis␤»

[14:04] <masak> rakudo: class Austria { BEGIN { say self } }

[14:04] <p6eval> rakudo 0d4fe0: OUTPUT«Lexical 'self' not found␤»

[14:04] <masak> pmichaud: do you know if this has been ticketed?

[14:10] *** nihiliad joined
[14:12] <jaffa8> std: if ( $l ~~ /^(.+?);(.+?);(.+?);(.+?)(?=\s)/ ) {}

[14:12] <p6eval> std 28050: OUTPUT«[31m===[0mSORRY![31m===[0m␤Semicolon must be quoted at /tmp/0GlqyoJKBH line 1:␤------> [32mif ( $l ~~ /^(.+?);[33m⏏[31m(.+?);(.+?);(.+?)(?=\s)/ ) {}[0m␤Other potential difficulties:␤  Variable $l is not predeclared at /tmp/0GlqyoJKBH line 1:␤------> [32mif ( $l[33m⏏[31m

[14:12] <p6eval> ..…

[14:17] <masak> jaffa8: so, the rule is: if it's an alphanumeric, you don't need to escape of quote it. if it's not, you do. (if you mean it literally and not as an operator)

[14:18] <jaffa8> ok, $1 is $0 no

[14:18] <jaffa8> w

[14:19] <masak> aye.

[14:19] <masak> ok, my latest Rakudo doesn't build.

[14:20] <masak> p6opaque.c:275: error: 'struct PMC' has no member named 'pmc_ext'

[14:21] <masak> no activity today 'sides mberends++' patch, so it's probably something Parrot did.

[14:23] <jaffa8> How would you do something like this?

[14:23] <jaffa8> push @{ $table{ lc "$1.$2" } }, lc $3;

[14:23] <moritz_> http://perlgeek.de/blog-en/perl-6/object-construction-and-initialization.html there you go, corrections very welcome

[14:23] <moritz_> jaffa8: %table{ lc "$0.$1" }.push: lc $2;

[14:24] <moritz_> rakudo: say %*VM<config><revision>

[14:24] <p6eval> rakudo 0d4fe0: OUTPUT«40556␤»

[14:24] <jaffa8> rakudo: %table{ lc "$0.$1" }.push: lc $2;

[14:24] <p6eval> rakudo 0d4fe0: OUTPUT«Symbol '%table' not predeclared in <anonymous> (/tmp/d85m6y719M:2)␤in Main (src/gen_setting.pm:3390)␤»

[14:24] <masak> rakudo: my %table = "foo.bar" => []; "foo bar baz" ~~ / (\w+) \s* (\w+) \s* (\w+) /; %table{ lc "$0.$1" }.push: lc $2; say %table.perl

[14:24] <p6eval> rakudo 0d4fe0: OUTPUT«{"foo.bar" => ["baz"]}␤»

[14:25] <jaffa8> moritz_, Did you use :

[14:25] <jaffa8> rakudo: %table{ lc "$0.$1" }.push(lc $2);

[14:25] <p6eval> rakudo 0d4fe0: OUTPUT«Symbol '%table' not predeclared in <anonymous> (/tmp/VkUhvxwpad:2)␤in Main (src/gen_setting.pm:3390)␤»

[14:25] <moritz_> jaffa8: you have to declare variables with 'my' before you can use them.

[14:25] <moritz_> like masak++ did

[14:25] <jaffa8> that I understand

[14:25] <jaffa8> What about >>:<<?

[14:26] <moritz_> that's a syntax for a method call

[14:26] <moritz_> $foo.method: a, b, c

[14:26] <masak> 'invocant colon'

[14:26] <moritz_> is the same as $foo.method(a, b, c)

[14:26] <jaffa8> you mean this is alternative syntax

[14:26] <moritz_> yes

[14:27] <masak> artificial sweetener.

[14:27] <jaffa8> funny

[14:27] <moritz_> convenient.

[14:27] *** Psyche^ joined
[14:27] <masak> unnecessary.

[14:27] <moritz_> like perl ;-)

[14:27] <jaffa8> faster

[14:27] <masak> error-prone.

[14:28] <moritz_> don't we all love listops? ;-)

[14:28] <masak> no.

[14:28] <jaffa8> Why is it error-prone?

[14:28] <carlin> masak: rakudo builds alright for me after git pull and svn up'ing parrot

[14:28] <masak> jaffa8: I guess it's a matter of taste, but I find the parentheses clearer.

[14:28] <masak> carlin: that's interesting.

[14:28] * moritz_ tries

[14:29] *** jan_ left
[14:29] *** icwiener left
[14:30] <masak> carlin: I did realclean on Parrot, and install-dev. then I did make clean on Rakudo and tried to build it. did you do the same?

[14:30] <moritz_> p6opaque.c: In function ‘Parrot_P6opaque_clone’:

[14:30] <moritz_> p6opaque.c:275: error: ‘PMC’ has no member named ‘pmc_ext’

[14:30] <moritz_> that's what I get with latest rakudo+parrot

[14:30] <jaffa8> 􏿽xCDs it possible to change the character set of the source?

[14:31] <jaffa8> What if I do not want utf8?

[14:32] <masak> moritz_: yup, same as mine.

[14:33] <masak> jaffa8: Rakudo is a bit weak on encodings at present. it's one of the things being worked on. contributions are welcome.

[14:34] <moritz_> jaffa8: implementations should auto-detect character encodings on their BOM if present. In other cases you have to pass an option to the compiler

[14:34] <moritz_> something like perl6 --encoding=UTF-16 script.pl

[14:34] <moritz_> don't know what the exact syntax is, but it's not yet supported

[14:35] <japhb> urgle.  The problem with having kids on a school day schedule is that they stay on it on the weekends, even when you need more sleep ....

[14:36] <moritz_> ouch.

[14:36] <moritz_> japhb: I think it was you who asked about the various object initialization methods in Perl 6. I wrote something up here: http://perlgeek.de/blog-en/perl-6/object-construction-and-initialization.html

[14:37] <carlin> after make realclean on parrot it still wfm ... so I must be doing something different

[14:37] <carlin> or wrong

[14:37] <mberends> moritz_++: nice article. spello: initiliaztions

[14:38] <jaffa8> what is this in Perl 6: $l = <dic>?

[14:38] <japhb> moritz_, Ah, thank you.  I'll look at that in a bit, as soon as I start some rebuilds.

[14:38] <mberends> jaffa8: <a b c> is the new qw{a b c}

[14:39] <jaffa8> Is it now readline?

[14:39] <moritz_> japhb: thanks

[14:39] <jaffa8> Is qw throuwn out?

[14:40] <moritz_> it's spelled <...> now

[14:40] <mberends> jaffa8: it's quote words. yes, afair qw{} is gone.

[14:40] <moritz_> of or q:w{...}

[14:40] <moritz_> which can be shortened to qw{...} I think

[14:40] <moritz_> std: qw{a b}

[14:40] <p6eval> std 28050: OUTPUT«ok 00:03 37m␤»

[14:40] <moritz_> yes

[14:41] <mberends> timtowtdi

[14:41] <jaffa8> std: print qw{a b}

[14:41] <p6eval> std 28050: OUTPUT«ok 00:02 37m␤»

[14:41] <DarkWolf84> I made a executable with pbc_to_exe but it ends with "Class '[ 'parrot' ; 'Perl6MultiSub' ]' not found"

[14:41] <moritz_> but notice that you can't use qw() with round parenthesis, that's a sub call

[14:41] <japhb> So what's the canonical Parrot / Rakudo build sequence now that the "builds against installed Parrot" thing happened?  I'm guessing 'cd <parrot_build_dir>; perl Configure.pl; make install; cd <rakudo_build_dir>; perl Configure.pl; make install'?

[14:41] <moritz_> japhb: you're missing 'make install-dev' for parrot

[14:41] <japhb> moritz_, instead of or in addition to 'make install' for parrot?

[14:41] <moritz_> japhb: in addition

[14:42] <mberends> japhb: and Rakudo's Configure.pl needs --parrot-config=

[14:42] <japhb> moritz_, ah, so install-dev adds additional files needed for building things?

[14:42] <mberends> japhb: right

[14:42] <moritz_> japhb: yes

[14:43] <moritz_> mberends: unless it's installed in rakudo/parrot_install/, which is the default invocation with --gen-parrot

[14:43] <japhb> mberends, --parrot-config= what?  Directory of parrot install, or path to config binary?

[14:43] <mberends> the binary

[14:43] *** Patterner left
[14:43] *** Psyche^ is now known as Patterner

[14:43] <japhb> mberends, OK, got it.

[14:43] <jaffa8> is pbc to exe reliable?

[14:44] <japhb> .oO( Why would anyone install parrot except to build stuff on it? )

[14:44] <moritz_> DarkWolf84: did you install rakudo? ('make install')

[14:44] * japhb goes to look at install-dev target

[14:44] <mberends> jaffa8: for making perl6.exe, definitely. for other programs ymmv.

[14:45] <DarkWolf84> yeah

[14:45] <jaffa8> ymmv?

[14:45] <japhb> Your Mileage May Vary

[14:45] <DarkWolf84> but it instals in ./parrot_install

[14:46] <mberends> jaffa8: your success will depend on many other things :)

[14:46] <jaffa8> SUch as?

[14:46] <jaffa8> luck?

[14:46] *** c9s___ is now known as c9s

[14:46] <jaffa8> What are the known problems?

[14:47] <mberends> jaffa8: there are other ways to make .pbc files, and depending on what goes into them, the result may either work or fail

[14:48] <jaffa8> that sound pretty cryptic to me.

[14:48] <jaffa8> What are other ways?

[14:48] <jaffa8> Hex editor

[14:48] <jaffa8> ?

[14:48] <jaffa8> I guess everybody uses parrot.exe to make pbc fies.

[14:49] *** DanielC joined
[14:50] <mberends> jaffa8: there are lots of examples of .pir source programs that your could compile to .pbc and maybe to .exe

[14:50] <mberends> in the parrot source tree

[14:51] <jaffa8> How can one deploy files?

[14:51] <jaffa8> IS there program for that?

[14:51] <mberends> ouch, we're struggling to make that still

[14:52] <mberends> proto (being discussed today) is an early attempt, there are other projects being worked on.

[14:52] <japhb> proto had discussions earlier today?  What time frame?

[14:52] <japhb> I'm working on the parrot module ecosystem today, in fact.

[14:53] <mberends> http://irclog.perlgeek.de/perl6/2009-08-23#i_1420618

[14:53] <jaffa8> how many files are needed for a simple deployment?

[14:53] <jaffa8> E.g. hello world

[14:54] <jaffa8> I guess parrot exe and lib are needed.

[14:54] <japhb> mberends, excellent, thank you

[14:54] <mberends> japhb: I like your plan so far

[14:54] * japhb prepares to eat proto's brains

[14:55] <japhb> mberends, you mean https://trac.parrot.org/parrot/wiki/ModuleEcosystem ?

[14:55] <mberends> japhb++: yes

[14:55] <japhb> mberends, ah, thank you!

[14:56] <mberends> jaffa8: 

[14:56] <mberends> jaffa8: yes, and the perl6 executable

[15:02] <jaffa8> Has anyone seen this:  Pugs can compile Perl 6 programs into Perl 5 source code

[15:02] <jaffa8> http://209.85.129.132/search?q=cache:-mnYwDXc8UoJ:www.perlfoundation.org/perl6/index.cgi%3Ffud+perl+5+perl+6+conversion+table&cd=5&hl=hu&ct=clnk&gl=hu

[15:06] <mberends> japhb: this project may overlap a small part or yours, for the Rakudo case only: http://gitorious.org/parrot-module-lib/main/blobs/master/ROADMAP

[15:06] <mberends> *of yours

[15:06] *** Front_slash left
[15:07] <japhb> mberends, reading ....

[15:09] <japhb> mberends, ooh, yeah, all of that looks useful.

[15:09] * japhb adds parrot-module-lib to the @eat-these-brains

[15:10] <carlin> freshly cloned rakudo, I ran Configure --gen-parrot, make clean, cd to parrot, make realclean, svn up, Configure, make install-dev, cd to rakudo, Configure, make install. Did I miss anything?

[15:20] <masak> carlin: no, it all looks good. I'm running Rakudo-in-Parrot, though. but that shouldn't make a difference.

[15:21] <carlin> builds fine :s

[15:23] *** molaf joined
[15:27] <jnthn> oh hai

[15:27] <masak> yayitsjnthn

[15:27] <jnthn> japhb: I'm around for the rest of my $day

[15:27] <jnthn> yayitsmasak!

[15:27] <jnthn> masak: What's cooking today?

[15:27] *** justatheory joined
[15:27] <japhb> jnthn, Great!  How long will that last?  :-)

[15:27] <japhb> (timezones are one thing, sleeping schedules another ...)

[15:28] <jnthn> japhb: Well, I got up quite early-ish today, but I reckon there's a good 6-7 hours yet. :-)

[15:29] *** simcop2387 joined
[15:29] <japhb> jnthn, :-)

[15:31] <jnthn> masak: Is the build fail with latest Parrot rather than recommended one?

[15:32] <Su-Shee> is poll and select already implemented?

[15:32] <masak> jnthn: yes. some parrot after 40719 breaks Rakudo.

[15:33] <masak> carlin: ah, and that explains why it runs for you. of course... :/

[15:34] <jnthn> Parrot is really good at breaking the Rakudo build these days.

[15:34] <jnthn> In fact, it's really excelled at it since the last release.

[15:34] <masak> it doesn't bother me much, as long as there's not a recent feature/fix I really need.

[15:35] <jnthn> masak: Sure, but really best is to build the Parrot that Rakudo says it needs.

[15:35] <masak> jnthn: I'm sure it is. I just like it this way. :)

[15:35] <masak> I'm usually among the first to spot this type of error.

[15:38] <jnthn> Aye.

[15:38] <mberends> Su-Shee: no select: http://irclog.perlgeek.de/perl6/2009-08-10#i_1379225

[15:39] <Su-Shee> just found another interesting posting on the subject...

[15:39] <Su-Shee> http://perl-yarg.blogspot.com/2009/08/working-with-rakudo-and-parrot.html

[15:39] <Su-Shee> ah. which is the same fellow. :)

[15:44] *** rindolf joined
[15:44] <rindolf> Hi all.

[15:44] <rindolf> Su-Shee: here?

[15:45] <Su-Shee> yes.

[15:45] <rindolf> Su-Shee: hi.

[15:45] <rindolf> Su-Shee: what's up?

[15:45] <rindolf> Su-Shee: BTW, why aren't you present on #perl no longer?

[15:46] <Su-Shee> rindolf: it's a little too much alphamale-ing sometimes, so I take a break. ;)

[15:46] <rindolf> Su-Shee: ah.

[15:47] <Su-Shee> rindolf: just tested a teenytiny blog engine based on mojo, very nice. 

[15:48] <DarkWolf84> what i need to use executable generated from pbc_to_exe

[15:50] <jaffa8> std:/^-h|--help$/

[15:51] <jaffa8> std: /^-h|--help$/

[15:51] <p6eval> std 28050: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse regex; couldn't find final '/' at /tmp/ZbKfXvUEHo line 1:␤------> [32m/^[33m⏏[31m-h|--help$/[0m␤    expecting any of:␤      infix stopper␤    quantifier␤       regex atom␤     regex_infix␤      standard stopper␤   terminator␤    

[15:51] <p6eval> ..ws␤FAILED 00:02 37m␤»

[15:51] <jaffa8> std: /^\-h|\-\-help$/

[15:51] <p6eval> std 28050: OUTPUT«ok 00:02 37m␤»

[15:52] * sri_kraih really hopes rakudo star will have async io

[15:53] <rindolf> Su-Shee: ah.

[15:53] <rindolf> Su-Shee: does it have comments?

[15:53] <rindolf> Su-Shee: Altreus and I are writing our own blog engine. Based on Cat, though.

[15:53] <Su-Shee> rindolf: I know, I'm very much waiting for it. ;)

[15:54] <rindolf> Su-Shee: it will be ready faster if you contribute<tm>.

[15:54] <sri_kraih> rindolf: comments are so 2008...

[15:54] <sri_kraih> in 2009 everybody just tweets

[15:54] <rindolf> sri_kraih: you mean now people post responses as separate blog entries on their blogs?

[15:54] <Su-Shee> rindolf: I focus on gui stuff. I simply can't to everything :/

[15:55] <Su-Shee> ah, THOSE comments :)) I thought comments in the source :))

[15:55] <jnthn> sri_kraih: Was http://perl-yarg.blogspot.com/2009/08/working-with-rakudo-and-parrot.html your post?

[15:55] <sri_kraih> jnthn: nope

[15:55] <rindolf> Su-Shee: yes, blog comments.

[15:55] <jnthn> sri_kraih: Ah, OK.

[15:56] <sri_kraih> but i can relate to it

[15:56] <jnthn> sri_kraih: It's a good post, that's all. :-)

[15:56] <rindolf> sri_kraih: I'm using plurk.com which is a micro-blogging service that has micro-comments.

[15:56] <sri_kraih> would love to port Mojo to Rakudo...

[15:56] *** Chillance left
[15:56] *** missingthepoint left
[15:56] <japhb> rindolf, 'micro-comments'?  What are those, 14 chars max?

[15:56] <rindolf> japhb: no. 140

[15:57] <japhb> "Ogg agree."

[15:57] <japhb> rindolf, just teasing.  :-)

[15:57] <rindolf> japhb: ah.

[15:57] *** Confield joined
[15:57] <Su-Shee> japhb: "OMG!" and "SRY :)" fits in less.

[15:57] <jnthn> sri_kraih: Seeing people saying "we could really use this to do X concrete application" is good to know. :-)

[15:57] <masak> here's a post that audreyt++ just made: http://pugs.blogs.com/audrey/2009/08/why-such-me.html

[15:57] <sri_kraih> i think as soon as rakudo does async io i can have port a full http 1.1 server over

[15:57] <rindolf> Su-Shee: there was a "Noise to Signal" strip about 1-char micro-blogging.

[15:57] *** FCO joined
[15:58] <sri_kraih> *-have

[15:58] <jnthn> sri_kraih: Since it helps give some focus. 

[15:58] *** Confield left
[15:58] <masak> sri_kraih: let me know when you embark on such a project. I might want to be at least tangentially involved.

[15:59] *** Confield joined
[15:59] <rindolf> masak: had audrey been sick?

[15:59] <masak> rindolf: yes. hepatitis.

[15:59] <masak> and burnout.

[15:59] <rindolf> masak: ah.

[15:59] *** rblasch_ joined
[15:59] <sri_kraih> masak: sure

[16:00] <rindolf> masak: yes, I wondered where she has been.

[16:00] *** molaf left
[16:01] <japhb> rindolf, the burnout as I understand it contributed mightily to the hepatitis.

[16:01] <rindolf> japhb: ah.

[16:01] <jaffa8> Who burnt out?

[16:01] <rindolf> jaffa8: audreyt.

[16:01] <jaffa8> When?

[16:01] <masak> now that I think about it, the vacuum after audreyt++'s disappearance from this channel, and from Pugs development, hit me just as hard as the _why disappearance seems to hit the Ruby community.

[16:01] <masak> jaffa8: around 2007.

[16:02] <jaffa8> What has he been doing since then?

[16:02] <moritz_> she, actually

[16:02] <jaffa8> that is 2,5 years

[16:02] <masak> jaffa8: recovering, I imagine.

[16:02] <moritz_> working on other things

[16:02] <moritz_> not as exposed as before

[16:03] <japhb> masak, yeah, losing audreyt++ was painful.  Kept asking after her, but noone who knew was telling.

[16:03] <rindolf> http://en.wikipedia.org/wiki/Hepatitis - wow, sounds nasty.

[16:03] <jaffa8> She was employed

[16:03] <jaffa8> was not she?

[16:04] <masak> japhb: the news trickled down over the years after that. still, there's a clear hole left after her.

[16:04] <rindolf> http://he.wikipedia.org/wiki/%D7%93%D7%9C%D7%A7%D7%AA_%D7%9B%D7%91%D7%93

[16:04] <masak> jaffa8: yes.

[16:04] <japhb> masak, NODNOD

[16:04] <moritz_> http://www.perlmonks.org/?node_id=790671 perl 5.10.1 released! YaY!

[16:05] <jaffa8> Why are you showing Hebrew webpages?

[16:05] <japhb> YES!

[16:05] <M_o_C> Huh, released on the weekend :o

[16:05] *** SmokeMachine left
[16:05] <rindolf> jaffa8: because Hebrew is my native tongue.

[16:06] <jaffa8> ok

[16:06] <rindolf> jaffa8: I didn't know what Hepatitis was, but I was familiar with the Hebrew term.

[16:06] <jaffa8> ok

[16:06] <rindolf> jaffa8: there's a link to the English version.

[16:06] <jaffa8> Are you in Israel?

[16:06] <rindolf> jaffa8: yes, I live in Tel Aviv.

[16:07] <jaffa8> must be fun

[16:08] *** rblasch left
[16:08] <M_o_C> Did someone apply Whiteknights patch to master yet?

[16:08] <jaffa8> Since when have you lived there?

[16:08] <rindolf> jaffa8: since I was 5 years old.

[16:09] <rindolf> jaffa8: I was born here.

[16:09] <rindolf> But my parents moved to the states when I was 1 y.o.

[16:09] <jaffa8> Are you Russian?

[16:09] <rindolf> jaffa8: no.

[16:09] <rindolf> jaffa8: I'm Jewish.

[16:09] <M_o_C> nvm, apparently they still test it.

[16:09] <rindolf> jaffa8: and Israeli born.

[16:09] * japhb chuckles at lines 99-101 of http://gitorious.org/parrot-module-lib/main/blobs/master/HOWTO

[16:10] <rindolf> jaffa8: I know many Russians though.

[16:10] <jaffa8> DId you parent come from Russia?

[16:10] <rindolf> jaffa8: no.

[16:10] <rindolf> jaffa8: my mother was born in Iraq.

[16:10] *** rblasch__ joined
[16:10] <rindolf> jaffa8: and my father is also Israeli born, to Polish and Lithuanian immigrants.

[16:10] <jaffa8> Is not that unusual?

[16:10] <rindolf> jaffa8: not all Israelis are Russian.

[16:10] <rindolf> jaffa8: or their parents came from Russia.

[16:11] <jaffa8> that is clear from me

[16:11] <jaffa8> I heard there were so many Russians there, one can hear Russian speaking everywhere

[16:11] <jaffa8> on the beach.

[16:11] <rindolf> There are many Moroccans, Romanians, Tunisians, Syrians, Yemenites.

[16:12] <rindolf> jaffa8: hearing Russian spoken is not uncommon.

[16:12] <rindolf> We've received many immigrants from the former USSR.

[16:13] <jaffa8> Do you practice your religion?

[16:14] <rindolf> jaffa8: no, I'm not religious.

[16:14] <rindolf> jaffa8: I'm a Jew by peopleship - not by faith.

[16:14] <rindolf> jaffa8: I do however, not eat leavened bread on Passover.

[16:15] <rindolf> But I use electricity on Sabbath, etc.

[16:15] <rindolf> And eat non-kosher foods.

[16:15] <jaffa8> Why do you keep one rule and not another?

[16:16] <japhb> He likes matzoh?

[16:16] <japhb> :-)

[16:16] <rindolf> jaffa8: well, I consider the Passover matzos thing an ethnic custom.

[16:16] <rindolf> Which I like to observe.

[16:16] <M_o_C> Hm, so some jews also refuse the use of electricity on Sabbath?

[16:17] <Su-Shee> jaffa8: for the same reasons on fridays in germany many people eat fish and no meat - "custom derived from relegion" :)

[16:17] <japhb> M_o_C, there is a *lot* that is forbidden on the Sabbath, for a strict observer.

[16:17] <rindolf> I think that God, if he exists, cares little for old testament ethics.

[16:17] <jaffa8> probably

[16:17] <rindolf> M_o_C: yes, some Jews don't use electricity on Sabbath.

[16:17] <jaffa8> or he may be in another galaxy

[16:17] <rindolf> jaffa8: heh.

[16:17] <jaffa8> leading another group of people

[16:18] <japhb> obStargateReference

[16:18] <M_o_C> japhb: Well, I'm not really that well informed in regards of the Tora...

[16:18] <rindolf> Su-Shee: is this something related to Christianity?

[16:18] *** rblasch_ left
[16:18] <rindolf> M_o_C: according to the interpretation of the Torah, it was forbidden to light fire.

[16:18] <rindolf> But you could still keep a fire burning.

[16:19] <rindolf> M_o_C: light fire in Sabbath I mean.

[16:19] <rindolf> M_o_C: and Jews concluded that Electricity was fire-like.

[16:19] <cognominal> rindolf, since the old testament, jewish have been in the entertainment business meaning writing and now producing fictions

[16:19] <M_o_C> Yep, I interpreted it that way. Thanks for explaining.

[16:19] <Su-Shee> rindolf: yes, a "fasting on friday" thing.

[16:19] <rindolf> cognominal: :-)

[16:19] *** adam-pwgsc joined
[16:20] <rindolf> cognominal: "God is my favourite fictional character." -- Homer Simpson.

[16:20] <Su-Shee> rindolf: and fish is/was considered no meat and therefore fasting.

[16:20] <rindolf> Su-Shee: ah.

[16:20] <rindolf> Su-Shee: what about vegetables?

[16:20] <cognominal> rindolf, I suppose that if you are not restricted to kasher, you can eat camels too.

[16:21] <cognominal> I don't remember the exact rule about 2 toed animals...

[16:21] <rindolf> cognominal: Camels may be kosher.

[16:21] <rindolf> cognominal: not sure.

[16:21] <KatrinaTheLamia> rindolf, why is it that Homer Simpson gets all the most intelligent lines... despite being a rather dumb characters

[16:21] <rindolf> cognominal: they should either make a hoof print or recycle their food.

[16:21] <Su-Shee> rindolf: also allowed, I think. several german dishes go back to this "no meat" thing and have meat not visually but hidden included in the dish. ;)

[16:21] <rindolf> KatrinaTheLamia: I don't know.

[16:22] <rindolf> Su-Shee: ah.

[16:22] <rindolf> KatrinaTheLamia: it's been a while since I watched the Simpsons.

[16:22] <rindolf> But I used to like it.

[16:23] <jaffa8> what is minus in regular expressions?

[16:23] <rindolf> jaffa8: in p6?

[16:23] <jaffa8> yes

[16:24] <rindolf> why does my spell checker highlights Jaffa? It's a very old city for crying out loud.

[16:24] <masak> rakudo: say "foo" ~~ /<-[bar]>/

[16:24] <p6eval> rakudo 0d4fe0: OUTPUT«f␤»

[16:24] <rindolf> masak: negation?

[16:24] <masak> jaffa8: it's a negated character class.

[16:25] <masak> rindolf: it's a negated character class.

[16:25] <rindolf> masak: ah.

[16:25] <rindolf> masak: but not negation in general?

[16:25] <masak> rindolf: what would that mean inside a regex?

[16:25] <rindolf> masak: like match anything except "masak"?

[16:25] <japhb> mberends, am I correct in reading http://gitorious.org/parrot-module-lib/main/blobs/master/src/json.pir that the runtime/parrot/library/JSON.pir does to-json only, and not from-json, by design?

[16:26] <rindolf> masak: a lot of people ask us about it.

[16:26] <masak> :)

[16:26] <masak> rindolf: the closest two things I can think about are the !~~ operator and <!after ...> negative lookahead.

[16:26] <rindolf> masak: http://perl.net.au/wiki/Freenode_Sharp_Perl_FAQ#How_can_I_match_anything-except-a-regex_inside_a_Perl_regular_expression.3F

[16:26] <rindolf> masak: I'm not saying implementing it would be a good idea.

[16:27] <masak> rindolf: ISTR regexes can have !~~ inside of them.

[16:27] <japhb> Why doesn't 'perl6 --version' include either a release number or a git rev?

[16:27] <rindolf> masak: ah.

[16:27] <masak> but I don't know if it's implemented in Rakudo/PGE yet.

[16:27] <mberends> japhb: lines 13-21 should do from-json

[16:27] <masak> japhb: you're right, it definitely should, at least the release name.

[16:28] <masak> japhb: care to submit a Rakudobug?

[16:28] <japhb> masak, I can, but it will have to wait.  I'm trying to be head down right now.

[16:28] <masak> ok. later works.

[16:29] <japhb> (Yesterday was my birthday, but I had to go to someone else's party.  So for my birthday I'm getting a day to do nothing but hack on Parrot, and dangit I am making the *most* of it!)

[16:29] <masak> :D

[16:30] * Su-Shee got herself a new job for her birthday last week. ;)

[16:30] <japhb> Su-Shee, awesome

[16:31] <jaffa8> What kind of job?

[16:31] *** DarkWolf84 left
[16:31] <Su-Shee> japhb: yeah, only the gift wrapping was a little difficult.. ;)

[16:31] <Su-Shee> jaffa8: coding perl. :)

[16:31] <dalek> rakudo: e2b5e8f | moritz++ |  (2 files):

[16:31] <dalek> rakudo: re-enable building on latest parrot. Also bump PARROT_REVISION

[16:31] <dalek> rakudo: Patch courtesy by Andrew Withworth, Whiteknight++

[16:31] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/e2b5e8fc7172381091159935cde8fc3797276c78

[16:31] <rindolf> Su-Shee: mazal tov!

[16:32] <rindolf> Su-Shee: for your birthday I mean.

[16:32] <Su-Shee> rindolf: that's for birthdays as well?

[16:32] <rindolf> Su-Shee: yes.

[16:32] <masak> Su-Shee: grattis! # sv 'congratulations'

[16:32] <rindolf> masak: slovekian? Slovenian?

[16:33] <Su-Shee> rindolf: ah, ok. :)

[16:33] <masak> Swedish.

[16:33] <rindolf> masak: oh.

[16:33] <rindolf> :-S

[16:33] <rindolf> masak: gratis means costless in English.

[16:33] <rindolf> Must be confusing.

[16:33] <masak> in Swedish too.

[16:33] <Su-Shee> rindolf: in german as well.

[16:33] <masak> it's not confusing, the vowels are different.

[16:33] <jnthn> .oO( gratis is accepted as an English word now? )

[16:33] <Su-Shee> masak: ttis makes the i short and tis is with long i?

[16:34] <masak> Su-Shee: no, the 'a' before the 't' or 'tt'.

[16:34] <Su-Shee> ah. ok.

[16:34] <Su-Shee> jnthn: wasn't everything latin? ;)

[16:34] <masak> Su-Shee: and 'short'/'long' actually changes the kind of vowel, not just the length.

[16:35] <japhb> jnthn, yes, quite

[16:35] <masak> the 'a' in 'gratis' sounds like the one in 'father'. the 'a' in 'grattis' sounds like the one in 'pattern'.

[16:35] <japhb> heck, half of English is Latin by way of French anyway ....

[16:35] <masak> indeed.

[16:36] <rindolf> japhb: some of it is directly from Latin.

[16:36] <jaffa8> Rakudo is not very fast

[16:36] <japhb> rindolf, sure

[16:36] <jaffa8> it ran for 45 seconds for me

[16:36] <Su-Shee> rindolf: what isn't in indoeuropean languages.. ;))

[16:36] <rindolf> But it's all lies. Half of English is from Yiddish..

[16:36] <masak> japhb: it hasn't been optimized much.

[16:37] <rindolf> Su-Shee: also in Persian and Indian languages?

[16:37] <japhb> rindolf, the swearing?

[16:37] <japhb> ;-)

[16:37] <rindolf> Su-Shee: they are IE too.

[16:37] <rindolf> Su-Shee: but I imagine they are less influenced than Latin than European IE languages.

[16:38] <cognominal> rindolf, you got some chutzpah to pretend that

[16:38] * rindolf got stuck at work today.

[16:38] <rindolf> cognominal: :-)

[16:38] <Su-Shee> .oO(chuzpe..) :)

[16:39] <rindolf> chutzpah is an Hebrew word in origin.

[16:39] *** zloyrusskiy joined
[16:39] <rindolf> I think it appears in the Bible.

[16:40] <Su-Shee> rindolf: I know, we use it in german, but it's writte chuzpe here.

[16:40] *** jaffa8 left
[16:40] <rindolf> I once heard a speech given in Anglo-Saxon.

[16:40] <cognominal> it is unkown in French

[16:40] <rindolf> Su-Shee: how is it pronounced?

[16:40] <KatrinaTheLamia> English? There is no language known as English. English describes a style of syntax for matching words together. The words themselves come almost entirely from other languages.

[16:41] <Su-Shee> rindolf: oh yeah... how do I write that.. :)

[16:41] <rindolf> cognominal: http://en.wiktionary.org/wiki/chutzpah

[16:41] <huf> KatrinaTheLamia: that's true for all languages as far as i know

[16:41] <japhb> KatrinaTheLamia, that makes it no different than any other natural language ....

[16:41] <huf> japhb++

[16:41] <rindolf> japhb++

[16:42] <rindolf> http://en.wiktionary.org/wiki/Chuzpe#German

[16:42] <rindolf> No pronunciation unfortunately.

[16:42] <rindolf> No wonder you prefer it over Dreistigkeit

[16:43] <Su-Shee> rindolf: the chu a little like in church and then with a sharp sz, short p and the e is like hm...

[16:43] * moritz_ prefers Dreistigkeit, actually

[16:43] <rindolf> moritz_: ah.

[16:43] <KatrinaTheLamia> japhb, huf yeah... I've heard all sorts of wild and crazy definitions for what constitutes something as a "natural" language. I dunno, most of what I read makes me just want to learn and use sanskrit instead >.>

[16:43] <rindolf> moritz_: you have some chutzpe to prefer it.

[16:43] <moritz_> rindolf: no, freedom ;-)

[16:43] <moritz_> the 'e' is not pronounced at all, I think

[16:44] <rindolf> moritz_: I was joking . :-)

[16:44] <masak> rindolf: my Google-fu cannot help me answer the question whether chutzpah is a word from the Bible or not. :/

[16:44] <rindolf> We pronounce Hutzpah with the stress on the "ah".

[16:44] <rindolf> As opposed to the Yiddish Hooooooooooootzpah

[16:44] <Su-Shee> moritz_: my grandmother used it and she pronounced it like tschuszpe.

[16:44] <japhb> mberends, let me see if I understand ... compilers/json/JSON.pir first does a PGE match against the JSON grammar, then uses JSON::PIR to convert the match to PIR source, then uses PIRC to compile it to bytecode, then tailcalls the bytecode to produce the thawed data structure?

[16:45] <rindolf> Su-Shee: is verboten pronounced as fferboten?

[16:45] <Su-Shee> rindolf: yes, in that case.

[16:46] <mberends> japhb: checking..

[16:46] <lisppaste3> MoC pasted "Rakudo Makefile" at http://paste.lisp.org/display/85906

[16:46] <moritz_> http://www.nntp.perl.org/group/perl.modules/2009/08/msg67299.html # my mail to [email@hidden.address]
[16:46] <Su-Shee> rindolf: if a word derives from greek/latin and starts with a "v" it's more like "w"

[16:46] <rindolf> http://en.wiktionary.org/wiki/verboten - what is its etymology?

[16:46] <rindolf> Su-Shee: ah.

[16:46] <rindolf> Su-Shee: "more like"?

[16:46] <Su-Shee> rindolf: pronounced more like a w.

[16:47] <rindolf> [OE. forbeden, AS. forbeódan; pref. for- + beódan to bid; akin to D. verbieden, G. verbieten, Icel., fyrirbj&omac;&edh;a, forbo&edh;a, Sw. förbjuda, Dan. forbyde. See Bid, v. t.]

[16:47] <Su-Shee> rindolf: verboten comes from "gebote" (10 commentments). if you _have_ to do something, it's a "gebot". if you must NOT do something it's a "verbot"

[16:48] <rindolf> Seems like its Germanic in origin.

[16:48] <rindolf> http://machaut.uchicago.edu/?resource=Webster%27s&word=forbid&use1913=on

[16:48] <cognominal> I think american english is not frozen by an academy like french.

[16:48] <mberends> moritz_++ for Perl 6 modules on CPAN email suggestion

[16:49] <Su-Shee> rindolf: yeah, looks like it. the important part is the "bot" in the middle. ;) 

[16:49] <cognominal> French evolves thx  to semi-illiterate people like sons of arabic immigration that don't give a shit about the Académie Française.

[16:49] <Su-Shee> cognominal: but the french have extremely cool dictionaries thanks to the academy. :)

[16:50] <cognominal> I don't think you have it on line like the very good Littré

[16:50] <cognominal> There is even a free Littré app on the iPhone.

[16:51] <rindolf> cognominal: there's fr.wiktionary.org

[16:51] <rindolf> It's bigger than en.wiktionary.org

[16:51] <cognominal> http://en.wikipedia.org/wiki/Dictionnaire_de_la_langue_française_(Littré)

[16:51] <Su-Shee> cognominal: yeah, but I'm loughing every day about the "petit robert" and its 9cm "petitness" in my shelf. ;)

[16:51] <rindolf> Su-Shee: heh, heh.

[16:51] <rindolf> Su-Shee: lough is a lake, BTW.

[16:51] <rindolf> Like Loch.

[16:52] <rindolf> My spell-checker highlights it.

[16:52] <rindolf> It didn't use to.

[16:52] <moritz_> except that most English can't pronounce "loch" ;-)

[16:52] <rindolf> Maybe the en_GB one is incopmlete.

[16:52] <rindolf> lokh, no?

[16:52] <moritz_> no

[16:52] <rindolf> Like Genghis Khan.

[16:52] <cognominal> for an up to date online dictionnary (but not free) there is Antidote RX done by people from Quebec lacks etymology though

[16:52] <moritz_> that's what most say, and that's what's wrong

[16:52] <rindolf> Or Khalif.

[16:52] <rindolf> moritz_: ah.

[16:53] <moritz_> rindolf: it's pronounced with soft ch like you find in German

[16:53] <Su-Shee> rindolf: I _think_ our ch is like an arabian h.

[16:53] <cognominal> loughing?

[16:54] <rindolf> Su-Shee: which one? a Kh or a 3? Muhhamad or Khalif/Khan?

[16:54] <rindolf> Su-Shee: two different sounds.

[16:55] <cognominal> I don't think the Larousse or the Petit Robert are available on computers in any useable form. Last time I checked one used to have the CD/DVD in the reader to use it.

[16:55] <Su-Shee> rindolf: the muhammad h.

[16:55] <masak> mberends: I got distracted by some ideas I had for a file-backended mini-ORM, as a precursor to an early MVC for Web.pm.

[16:55] <cognominal> come on. Why not dongles why they are at it.

[16:55] <mberends> japhb: by golly you're right, the JSON data is translated to PIR which is then compiled in line 70 and executed in line 71

[16:55] <masak> mberends: I'd be happy to pick up the proto restructuring at some later time.

[16:58] <Su-Shee> moritz_: let's hope, someone answers.. 

[16:58] <mberends> masak: yes distracted randomly here too. getting ready for a pretty week ahead too.

[16:58] <masak> mberends: aye. same here.

[16:58] <mberends> *pretty busy

[17:01] *** hanekomu joined
[17:01] <japhb> mberends, OK, so I'm not entirely insane.

[17:02] <Su-Shee> moritz_: why don't you write a nice perl 6 programming book? 

[17:02] <japhb> mberends, are the JSON grammar and emitter fully compliant?  Or are there things in JSON still not handled correctly?

[17:02] <moritz_> Su-Shee: I'm really thinking about it.

[17:03] <Su-Shee> moritz_: I suggest "contemporary object oriented programming with perl 6"

[17:03] <mberends> japhb: it is a fairly whacky way to convert a data file to a data structure. when your only tool is a hammer, every problem looks like a nail ;)

[17:03] <japhb> mberends, :-)

[17:04] <moritz_> Su-Shee: "Perl 6" implies "object oriented" already ;-)

[17:05] <japhb> mberends, question still applies though ... can I assume that the current JSON code is just "correct", and not worry about edge cases?

[17:05] <Su-Shee> moritz_: yeah, but I meant something focussing on architecture and roles and all this stuff contrary to something like "the handbook" or "perl 6 for computer linguists" (which would be probably later be called "the grammar for grammars" or something like this. ;)

[17:06] <moritz_> Su-Shee: problem is, I don't understand most of Perl 6's OO :)

[17:06] <Su-Shee> moritz_: well if YOU don't - what will the rest of us do? ;)

[17:07] <mberends> japhb: there is meant to be a 'make test' to give some idea of correctness. I just passed all 78 tests here :-)

[17:07] <Su-Shee> I feel bad every day because I don't use all the cool features.

[17:07] <japhb> mberends, all right, I'll call that infrastructure for now then, thx

[17:08] <moritz_> Su-Shee: jnthn, ruoso and TimToady probably understand it

[17:08] <Su-Shee> oh, that many? ;)

[17:08] <mberends> japhb: agreed

[17:08] <moritz_> Su-Shee: presumably pmichaud too

[17:09] <Su-Shee> moritz_: "gee, they need a second car soon.." ;)

[17:11] <rindolf> They tell that after Millikan received his Nobel Prize, someone at the news conference asked him "Is it true that only three people understand Einstein's General Theory of Relativity". So he replied: "Really? Who's the third?"

[17:12] <rindolf> http://en.wikipedia.org/wiki/Robert_Millikan - him.

[17:12] <rindolf> My spell-checker also highlights Millikan.

[17:17] <dalek> rakudo: e781e94 | mberends++ | tools/test_summary.pl:

[17:17] <dalek> rakudo: tools/test_summary.pl: remove the almost redundant 'test' report column

[17:17] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/e781e94b57939e41f7322f98b765cacad7a7c7b4

[17:17] <dalek> rakudo: c4c67da | mberends++ | :

[17:17] <dalek> rakudo: Merge branch 'master' of [email@hidden.address]
[17:17] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c4c67daa2468762fa38d7951054036e4316e0d64

[17:20] *** masak left
[17:21] <japhb> ARG, github failing

[17:21] <japhb> sigh

[17:21] <Tene> github is down?

[17:22] <japhb> Seems to be coming back slowly.

[17:22] <japhb> It was internally timing out tree browsing.  (You got the fail octopus)

[17:22] * Tene considers harassing/trolling his friend who works at engineyard.

[17:23] <Su-Shee> "his up until now but not tommorow anymore" friend... ;)

[17:24] <Su-Shee> -m+r 

[17:26] <carlin> rakudo: method foo() {}; multi sub foo {};

[17:26] <p6eval> rakudo 0d4fe0:  ( no output )

[17:26] <carlin> anyone know if that is known?

[17:27] <japhb> Tene, feel free to troll.  github is sleeping again.  :-)

[17:27] * Tene already did: 11:25 <Tene> OMG GITHUB IS LIKE SLOW TODAY U WORK AT ENYA CANT U FIX IT?????

[17:28] <japhb> heh

[17:28] <carlin> (oh, it's a seg fault not a no-output)

[17:30] <japhb> Frack.  OK, of the git-hosting services, any of them that can be claimed to be stable?  (That's a serious question -- no point in switching to SF or gitorious or what have you only to see same fail level)

[17:30] *** rblasch__ left
[17:31] <Tene> "running your own" has always been pretty stable for me.

[17:31] *** DanielC left
[17:31] <japhb> Seriously github?  Failing on front page?

[17:31] <Tene> except for that time when I was traveling for work and the flatmate pulled out the ethernet cable.

[17:31] <japhb> Tene, ouch

[17:32] <japhb> Tene, I'm looking for the social stuff to work as well, not just pure repo hosting

[17:32] <Tene> we could always have mirrors on several of the popular hosting sites.

[17:32] <japhb> True

[17:33] *** nbrown left
[17:38] <mikehh> rakudo (c4c67da) builds on parrot r40742 - make test / make spectest (up to 28050) PASS - Ubuntu 9.04 amd64 (g++)

[17:39] *** nbrown joined
[17:48] *** jauaor joined
[17:57] <carlin> rakudo: multi sub infix:<~> {}; sub infix:<~> {}; say "a"~"b".perl;

[17:57] <p6eval> rakudo 0d4fe0: OUTPUT«␤»

[17:57] <carlin> rakudo: multi sub infix:<~> {}; sub infix:<~> {}; say "a"~"b";

[17:58] <p6eval> rakudo 0d4fe0: OUTPUT«␤»

[17:58] <carlin> rakudo: multi sub foo {}; sub foo {}; foo

[17:58] <p6eval> rakudo 0d4fe0:  ( no output )

[17:59] <jnthn> std:  multi sub foo {}; sub foo {}; foo

[17:59] <p6eval> std 28050: OUTPUT«[31m===[0mSORRY![31m===[0m␤Illegal redeclaration of package routine foo at /tmp/sjUNJHro9E line 1:␤------> [32mmulti sub foo {}; sub foo[33m⏏[31m {}; foo[0m␤    expecting new name to be defined␤FAILED 00:02 37m␤»

[17:59] <jnthn> std++ # we'll steal that check at some point :-)

[18:00] <carlin> atm it's a seg fault

[18:00] <moritz_> doesn't segfault here.

[18:01] <carlin> > multi sub foo {}; sub foo {}; foo

[18:01] <carlin> Segmentation fault

[18:01] <carlin> Hmm

[18:01] <lambdabot>   <no location info>: Empty record update

[18:02] <moritz_> carlin: it might be different on the REPL

[18:02] <moritz_> even on the REPL it doesn't segfault here.

[18:07] *** zloyrusskiy left
[18:10] <carlin> fresh rakudo build with recommended parrot revision still does it

[18:10] <moritz_> that's bad.

[18:11] <jnthn> If it's a memory corrutpion issue, it's completely feasible that it would manifest itself differently on different platforms.

[18:11] <jnthn> carlin: If you know how to use GDB, then a backtrace would be interesting to see.

[18:11] <moritz_> no problems with -G and that code

[18:12] <moritz_> now running with gcdebug

[18:16] *** adam-pwgsc left
[18:16] *** mberends left
[18:22] <carlin> jnthn: I have gdb how I do I create a backtrace?

[18:22] <jnthn> gdb perl6

[18:22] <jnthn> r

[18:22] <moritz_> run $yourscript.pl

[18:22] <jnthn> enter the code

[18:22] <moritz_> watch it die

[18:23] <moritz_> then 

[18:23] <moritz_> bt

[18:23] <jnthn> then bt

[18:23] <moritz_> .oO( concurrency gone wrong ;-)

[18:23] * jnthn and moritz_ star in the GDB duet!

[18:25] *** davef joined
[18:26] *** davef left
[18:27] <carlin> jnthn: http://gist.github.com/173374

[18:28] <moritz_> oh, that way it also segfaults here

[18:28] <moritz_> I tried with the multi first

[18:29] <carlin> Ah

[18:29] <carlin> So I'm not insane

[18:32] <carlin> rakudo: multi sub foo {}; sub foo {}; foo; # doesn't die

[18:32] <p6eval> rakudo 0d4fe0:  ( no output )

[18:32] <carlin> rakudo: multi sub foo {}; sub foo {}; foo # does

[18:32] <p6eval> rakudo 0d4fe0:  ( no output )

[18:33] *** nbrown_ joined
[18:33] <moritz_> p6eval is bad in showing segfaults or exceeded resource limits

[18:33] <moritz_> (patches welcome)

[18:34] <moritz_> carlin: could you please write a bug report (including backtrace)?

[18:35] *** nbrown__ joined
[18:35] <moritz_> Su-Shee: just wanted to tell you: I like your idea of a perl6-projects.org with sub pages; if you come up with a neat design for the sub pages, I'll contribute content

[18:36] <Su-Shee> moritz_: is in the making, I'm a little slow behind due to the new job..

[18:37] <moritz_> Su-Shee: don't need to rush. I'd be fine with having it in a sub folder for a while

[18:38] <Su-Shee> moritz_: I realized on masak's comment on doing work twice that there isn't a perl 6 cms.. ;)

[18:38] <moritz_> ;-)

[18:38] <moritz_> Su-Shee: well, SSI exists and is the simplest thing to avoid duplicate work

[18:39] <moritz_> Su-Shee: we have a virtual host on apache2, and I can configure it to allow anything we need

[18:39] <Su-Shee> SSI like server side includes or...did I miss something yet again?

[18:39] <moritz_> server side includes, yes

[18:40] <Su-Shee> *pew* :)

[18:40] <jnthn> carlin: Ouch.

[18:40] <carlin> can someone run this twice from the perl6 cli:

[18:40] <jnthn> carlin: Thanks for backtrace

[18:40] <carlin> rakudo: multi sub infix:<~> {}; sub infix:<~> {}; say "a"~"b";

[18:40] <p6eval> rakudo 0d4fe0: OUTPUT«␤»

[18:41] <carlin> only segfaults on the second execution here

[18:41] <jnthn> oh

[18:41] <jnthn> it actually looks not so bad...

[18:41] <jnthn> appears we deref a null pointer

[18:42] *** hanekomu left
[18:42] <moritz_> that sounds much more debuggable than a classical memory corruption

[18:43] <jnthn> moritz_: indeed

[18:45] <carlin> bug report sent

[18:45] <moritz_> thanks, carlin++

[18:46] * jnthn can probably patch that at some point

[18:48] <carlin> Good luck :) I better go, night all

[18:48] *** carlin left
[18:49] *** nbrown left
[18:52] *** nbrown_ left
[19:09] *** nbrown__ left
[19:14] *** Aisling left
[19:15] *** nbrown joined
[19:17] *** rblasch joined
[19:19] *** justatheory left
[19:22] <Tene> jnthn: My friend was already woken up about the github thing, apparently.  From what he tells me, the app/db aren't sharded at all, so if one person does a big query or downloads a big repo, it sucks for everyone else using the service.

[19:22] <japhb> ouch

[19:23] <Tene> and then he's irritated that they then claim it's a problem with EnYa.

[19:23] <japhb> I can imagine that.

[19:27] <japhb> How does one compile a program written purely in NQP?  (I'm crawling all over the directory tree piecing it together, but if someone knows off hand ...)

[19:27] <Tene> parrot compilers/nqp/nqp.pbc

[19:28] <Tene> --target=pir will generate PIR

[19:28] <Tene> are either of those what you're asking for?

[19:29] <jnthn> Tene: Ouch.

[19:30] <Tene> eh?

[19:30] <jnthn> Tene: The github thing.

[19:30] <japhb> Tene: from an installed parrot?  Wouldn't that have to be parrot <parrot_install_dir>/lib/<ver>-devel/library/nqp/nqp.pbc --target=pir <sourcefile>.nqp?

[19:30] <jnthn> (Was afk...only just noticed it)

[19:30] <Tene> jnthn: I got confused by s/jnthn/japhb/ and thought he was repeating himself.

[19:31] <jnthn> lol

[19:31] <Tene> japhb: from installed, it's $WHATEVER/languages/nqp/nqp.pbc

[19:31] <jnthn> japhb: I think you're right on the installed Parrot case, yes.

[19:31] <Tene> nqp is a language, not a library.

[19:31] <jnthn> Ah, but that.

[19:32] <Tene> also, I really need to add inter-lang support to nqp, so you can eval and load_library and such.

[19:32] <jnthn> That'd be quite cool.

[19:32] <japhb> Tene, oh yes, please

[19:32] <Tene> oh, that would be useful?

[19:32] <japhb> That would probably prove more than just useful.

[19:32] <Tene> I just meant from a standpoint of completeness.

[19:32] <Tene> What would you want to use it for?

[19:33] <japhb> Does NQP do the MAIN magic?

[19:33] <jnthn> japhb: I believe not.

[19:33] <japhb> Tene, I'm writing Parrot Plumage in NQP ... and JSON parsing is implemented as a language.

[19:34] <japhb> jnthn, OK, so does it just start running the file at the top of the mainline code?

[19:34] <japhb> Tene, to be clear: I didn't implement the JSON parser that way -- that's the way it *already* exists.

[19:36] <japhb> .oO( Ah, duh, NQP is based on PCT, so supports --target that way ... )

[19:36] <Tene> japhb: that's how I'd do the JSON stuff, fwiw.

[19:37] <Tene> IMO, the following is at least a very nice way to deal with such formats: my $json = read_whatever(); my $content = eval($json, :lang<JSON>);

[19:38] <japhb> Tene, right.  Which is why I want HLL interop in NQP.  ;-)

[19:38] <Tene> japhb: now, what I originally was talking about, was adding uspport to NQP for other languages to load libraries written in it.

[19:38] <Tene> but... I can certainly do what you want.

[19:38] <Tene> I'll try to get it done in the next day.

[19:38] <Tene> leaving for seattle tonight, though.

[19:38] <Tene> so... travel can get in the way.

[19:39] <japhb> Both will be useful in the long run ... since people will want to use the brains of Parrot Plumage as modules, I'm sure.

[19:39] <japhb> But loading the JSON language from NQP is my priority.  Thank you for putting it on your list.  :-)

[19:45] *** rfordinal3643 left
[19:45] <Tene> japhb: go ahead and assume that it'll be there the next time I have a chance to spend 30 minutes working on it.

[19:46] <japhb> :-)

[19:46] <Tene> AFK shower/lunch/laundry/packing/travel

[19:46] <japhb> good luck

[19:57] *** rblasch left
[19:58] <moritz_> when rakudo supports pluggable grammars I'll modify the quoting constructs not to take a single quote between n and t as a quote terminator

[19:58] <moritz_> so that you can write     say 'don't do that'

[19:58] <japhb> heh

[20:05] *** pyrimidine joined
[20:12] <japhb> Oh, very nice.  I'm only just started writing tests to see what NQP provides already and what it doesn't, and have been pleasantly surprised so far.  Good job, guys.

[20:14] <pugs_svn> r28051 | moritz++ | [t/spec] test for spec change r27054

[20:18] <jnthn> japhb: I've written a fair amount of it and while it's fairly minimal in terms of feture set, it seems to have got a good balance of small yet enough to not feel annoying.

[20:21] *** sri_kraih left
[20:21] *** Su-Shee left
[20:21] *** sri_kraih_ joined
[20:24] <japhb> jnthn, indeed

[20:25] <jnthn> pmichaud++ for that

[20:25] * japhb afk for bday lunch ... bbl, same bat channel

[20:26] <pugs_svn> r28052 | moritz++ | [t/spec/TODO] remove two items that I believe are covered now

[20:26] <pugs_svn> r28053 | moritz++ | [t/spec] test that "for" statement modifier temporizes $_ on the thunk

[20:27] *** sri_kraih_ left
[20:28] *** sri_kraih joined
[20:28] *** nbrown_ joined
[20:38] *** masak joined
[20:38] *** Aisling joined
[20:39] <masak> http://brunorc.wordpress.com/2009/08/23/whats-so-exciting-in-perl-6-fighting-bugs/ # nice YAPC::EU TimToady keynote summary post

[20:41] <moritz_> btw r28051 contains pretty scary code

[20:41] <moritz_> that second test I added... 

[20:42] * moritz_ shudders

[20:42] <moritz_> one-pass parsing is not for the faint of hearted.

[20:42] <masak> that's what I keep telling you. :)

[20:43] <masak> sometimes I kinda wish the alternative weren't worse.

[20:43] <moritz_> aye

[20:43] <jnthn> lolitsmasak :-)

[20:44] <jnthn> masak: I might if you're really unlucky turn your create new project script into Perl.

[20:44] <jnthn> ;-)

[20:44] <jnthn> masak: Because manually creating the project shell based upon what it does will take me a similar amount of time once I've done it a few times. :-)

[20:44] <masak> jnthn: cool!

[20:44] <masak> I went offline to bake bread. but I also accidentally wrote an ORM persistence module.

[20:45] <jnthn> Accidents happen.

[20:45] <jnthn> We'll forgive you.

[20:45] <jnthn> BTW does it have a cool name yet?

[20:46] <masak> aye.

[20:46] <masak> I think I will consider that week 14 of Web.pm and blog about it.

[20:46] <masak> it will take some time to retrace my steps.

[20:46] <pugs_svn> r28054 | moritz++ | [t/spec/TODO] rephrase moving intructions

[20:46] <pugs_svn> r28054 | moritz++ | 

[20:46] <pugs_svn> r28054 | moritz++ | I consider the moving of tests from t/ to t/spec/ mostly done. What's left is

[20:46] <pugs_svn> r28054 | moritz++ | some tests for run() of which I'm not sure how portable they are, some rather

[20:46] <pugs_svn> r28054 | moritz++ | obscure tests for which I haven't been able to find out if they are still

[20:46] <pugs_svn> r28054 | moritz++ | conforming to the spec, some regression tests and some disabled tests.

[20:47] <jnthn> moritz++: w00t!

[20:47] <masak> jnthn: I'm using custom traits on attributes!

[20:47] <masak> jnthn: yes. it's called Viper.

[20:47] <masak> and I don't expect it to last too long.

[20:47] <masak> it's just bootsmacking, er bootshackling.

[20:47] <masak> whatever.

[20:47] *** nbrown left
[20:47] *** braceta left
[20:47] <jnthn> masak: Oh noes! How many bugs did you find in the custom traits on attributes implementation?

[20:48] <masak> jnthn: none.

[20:48] <masak> jnthn: but I do have a question or two.

[20:48] <moritz_> masak: try harder, then ;-)

[20:49] <jnthn> masak: No bugs in fresh code?

[20:49] <masak> moritz_: I was baking bread!

[20:49] * jnthn checks masak's temperature...

[20:49] <masak> jnthn: maybe you hit the Ballmer peak with that traits implementation... :P

[20:50] <masak> moritz_: btw, that second test is a great obfuscation technique.

[20:50] <jnthn> masak: Oooh, plausible explanation!

[20:50] <reqamst> Masak was baking bread, Su-Shee was backing bread... Huh, bread6 channel?

[20:50] <jnthn> ...wait, did I check it in during evening or afternoon?

[20:50] <masak> oh, and I think 'whitespace' is actually an uncountable.

[20:51] <masak> :)

[20:51] <jnthn>  /join #bread6

[20:51] <masak> reqamst: baking bread is simply a very nice thing to do.

[20:52] <masak> it brings a certain sense of control over the chaotic and impersonal forces that rule our universe.

[20:52] <reqamst> masak: I must try. :)

[20:52] <masak> you really should.

[20:53] <reqamst> Yes! Baking bread must be like writing program. Implementing algorithm

[20:55] <masak> reqamst: actually, there are similarities. but baking bread is slightly more fysical. you're building concrete structures instead of abstract ones.

[20:55] <masak> reqamst: if you want some tips, we're discussing them on #bread6 right now. :)

[20:56] <reqamst> masak: Oh, I see.

[20:56] <jnthn> ...the worst thing is that we actually *are*.

[20:56] <masak> no, the worst thing is that I don't have any garlic butter right now.

[20:56] *** braceta joined
[20:56] *** jauaor left
[20:57] *** jauaor joined
[21:04] <colomon> No, the worst thing is that now you've got me wanting fresh baked bread, and the only thing I know how to bake takes about 20 hours from start to finish...

[21:04] <moritz_> fast-forward-bread? ;-)

[21:06] <masak> .oO( ▶▶ bread )

[21:12] *** jauaor left
[21:13] *** takadonet joined
[21:13] <takadonet> hey all

[21:13] <masak> takadonet: o/

[21:14] * moritz_ wonders if masak always raises the same hand, or if we sometimes see him from the and front and sometimes from the back

[21:14] <s1n> masak: oddly enough, i still can't clone november, though i can clone other things on github fine

[21:15] <masak> s1n: that is strange. I had no trouble cloning it.

[21:16] <s1n> masak: yes, i have been cloning other github projects all weekend

[21:17] <moritz_> s1n: do you use http:// or git://?

[21:17] <s1n> masak: git clone git://guthub.com/viklund/november.git

[21:19] <masak> s1n: the git:// one.

[21:19] <s1n> masak: yes, i know :)

[21:20] <masak> oh, sorry. :) not reading nicks correctly.

[21:26] <takadonet> Is http://www.rakudo.org/documentation broken for anyone else?

[21:27] <moritz_> takadonet: all rakudo.org pages are broken for me as soons as I allow it to set a cookie :(

[21:27] <jnthn> moritz_: Same.

[21:27] <jnthn> moritz_: That's why I haven't posted my last couple of things on there.

[21:28] <takadonet> who runs rakudo.org?

[21:28] <moritz_> takadonet: alester aka petdance and pmichaud

[21:29] *** justatheory joined
[21:30] *** sri_kraih_ joined
[21:31] *** rhr joined
[21:31] *** sri_kraih left
[21:31] *** sri_kraih_ is now known as sri_kraih

[21:32] *** rhr_ left
[21:39] *** pyrimidine left
[21:43] *** kidd_ joined
[21:44] * japhb is back ... Back to the Hack

[21:45] <japhb> What is the qx'' equivalent for NQP?

[21:45] <japhb> Or even system() for that matter?

[21:46] <moritz_> system is spelled run() in Perl 6. Don't know if NQP supports either.

[21:46] <jnthn> NQP doesn't really have built-ins.

[21:46] <jnthn> Erm, built-in subs.

[21:47] <jnthn> It fully supportings defining and calling subs.

[21:47] <jnthn> But I don't know that it includes anyway.

[21:47] <jnthn> (I'm quite sure it doesn't.)

[21:48] <moritz_> is ruby's { |foo| ... } the same as Perl 6's -> $foo { ... } ?

[21:48] <jnthn> moritz_: That was my understanding, but I've only really skimmed Ruby.

[21:49] <moritz_> jnthn: thanks

[21:50] <moritz_> rakudo: clas A { has $.b is rw }; my @a = map { A.new }, ^3; @a».b = 4; say @a[1].b

[21:51] <p6eval> rakudo 0d4fe0: OUTPUT«Attempt to define attribute $!b outside of class, role, or grammar at line 2, near "}; my @a ="␤in Main (src/gen_setting.pm:1789)␤»

[21:51] <jnthn> japhb: Maybe best bet for now is to use inline PIR to do whatever Rakudo's run does, and stick it inside a sub run(...) { ... }

[21:51] <japhb> jnthn, I was thinking that myself.

[21:51] <moritz_> rakudo: clas A { has $.b is rw }; my @a = map { A.new }, ^3; @a»b = 4; say @a[1].b

[21:51] <p6eval> rakudo 0d4fe0: OUTPUT«Attempt to define attribute $!b outside of class, role, or grammar at line 2, near "}; my @a ="␤in Main (src/gen_setting.pm:1789)␤»

[21:51] <moritz_> rakudo: clas A { has $.b is rw }; my @a = map { A.new }, ^3; @a.»b = 4; say @a[1].b

[21:51] <jnthn> ...wtf?

[21:51] <p6eval> rakudo 0d4fe0: OUTPUT«Attempt to define attribute $!b outside of class, role, or grammar at line 2, near "}; my @a ="␤in Main (src/gen_setting.pm:1789)␤»

[21:51] <moritz_> I mis-spelled "class"

[21:51] <jnthn> rakudo: clas A { has $.b is rw }

[21:51] <p6eval> rakudo 0d4fe0: OUTPUT«Attempt to define attribute $!b outside of class, role, or grammar at line 2, near "}"␤in Main (src/gen_setting.pm:1789)␤»

[21:51] <jnthn> moritz_: I know, but...it parses!

[21:51] <moritz_> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; @a».b = 4; say @a[1].b

[21:51] <p6eval> rakudo 0d4fe0: OUTPUT«Use of uninitialized value␤␤»

[21:51] <jnthn> std: clas A { has $.b is rw }

[21:52] <p6eval> std 28054: OUTPUT«Undeclared name:␤      A used at 1 ␤Undeclared routine:␤   clas used at 1 ␤ok 00:02 38m␤»

[21:52] <jnthn> oh

[21:52] <jnthn> so does STD

[21:52] <jnthn> heh, now I want to know what it parses as. :-)

[21:52] <moritz_> rakudo: clas A { has $.b is rw }; my @a = map { A.new }, ^3; @a.»b = 1..3; say @a[1].b

[21:52] <p6eval> rakudo 0d4fe0: OUTPUT«Attempt to define attribute $!b outside of class, role, or grammar at line 2, near "}; my @a ="␤in Main (src/gen_setting.pm:1789)␤»

[21:52] <moritz_> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; @a.»b = 1..3; say @a[1].b

[21:52] <p6eval> rakudo 0d4fe0: OUTPUT«Statement not terminated properly at line 2, near ".\x{bb}b = 1..3"␤in Main (src/gen_setting.pm:3460)␤»

[21:52] <moritz_> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; @a».b = 1..3; say @a[1].b

[21:52] <p6eval> rakudo 0d4fe0: OUTPUT«Use of uninitialized value␤␤»

[21:53] <moritz_> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; @a».b = 1..3; say @a[0].b

[21:53] <p6eval> rakudo 0d4fe0: OUTPUT«Use of uninitialized value␤␤»

[21:53] <moritz_> so it's just igoring the assignment?

[21:55] <jnthn> moritz_: Hmm

[21:55] <jnthn> I'm not sure what it's doing tbh.

[21:55] <jnthn> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; say (@>>.b).perl

[21:55] <p6eval> rakudo 0d4fe0: OUTPUT«say requires an argument at line 2, near " (@>>.b).p"␤in Main (src/gen_setting.pm:2550)␤»

[21:56] <jnthn> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; say (@a>>.b).perl

[21:56] <p6eval> rakudo 0d4fe0: OUTPUT«[undef, undef, undef]␤»

[21:57] <jnthn> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; say (@a>>.b).PARROT

[21:57] <p6eval> rakudo 0d4fe0: OUTPUT«Perl6Array␤»

[21:58] <jnthn> Hmm, I wonder if that wants to be List.

[21:58] <moritz_> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; @a[1].b = 4; say (@a>>.b).PARROT

[21:58] <p6eval> rakudo 0d4fe0: OUTPUT«Perl6Array␤»

[21:58] <moritz_> rakudo: class A { has $.b is rw }; my @a = map { A.new }, ^3; @a[1].b = 4; say (@a>>.b).perl

[21:58] <p6eval> rakudo 0d4fe0: OUTPUT«[undef, 4, undef]␤»

[22:14] *** pyrimidine joined
[22:14] <nothingmuch> where is junction eigenstate extraction best documented?

[22:15] <masak> nothingmuch: S32/Containers

[22:15] <nothingmuch> and the best permalink for that is the pugscode svn repo?

[22:15] *** cotto left
[22:16] <masak> 'permalink' in the sense that you want to link to the current version?

[22:16] <nothingmuch> yeah

[22:17] * nothingmuch is writing a blog post comparing McCarthy's amb to junctions for backtracking

[22:17] <masak> yes, probably the SVN repo then.

[22:17] <masak> http://perlcabal.org/syn/S32/Containers.html keeps being regenerated.

[22:17] <nothingmuch> basically you can't really say if ( $x >= $y ) {  } as if it wasa an assertion because you need to collapse the junction yourself

[22:17] <masak> nothingmuch: sounds interesting.

[22:17] <nothingmuch> $x and $y aren't mutated by that

[22:18] * nothingmuch is not really sure what to recocomend

[22:18] <nothingmuch> maybe there'sa  better construct for this?

[22:19] *** justatheory left
[22:19] *** rindolf left
[22:19] <masak> nothingmuch: not built into Perl 6, methinks.

[22:20] <nothingmuch> what's the most idiomatic way to construct junctions for $x and $y that contain the subset of values that pass that expression

[22:20] <nothingmuch> ?

[22:20] <masak> uhm, using all(), perhaps?

[22:21] <masak> or any()...

[22:21] <nothingmuch> ?

[22:21] <masak> I guess you're asking how to extract the values in a good way.

[22:22] <nothingmuch> http://scsys.co.uk:8001/32892

[22:22] <nothingmuch> that's the canonical amb example

[22:22] <masak> since you want to loop over both sets in all combinations, you might want to do 'for $x.eigenstates X $y.eigenstates { ... }'

[22:22] <masak> nothingmuch: ah. so you're actually changing $x and $y as you go.

[22:22] <nothingmuch> if my $x = any(1, 2, 3); my $y = any(1, 2, 3); i don't see a way to keep only the valid values with a single expression

[22:23] <jnthn> nothingmuch: Ah, you're basically added extra conditions that stack up?

[22:23] <nothingmuch> well, not exactly, $x and $y aren't junctions in this example

[22:23] <nothingmuch> amb is an implicit backtracking point

[22:24] <nothingmuch> the first and third assertions are simple

[22:24] <nothingmuch> that's just $x = $x >= 2;

[22:24] <jnthn> Right.

[22:24] <jnthn> The second one is a bit more interesting.

[22:24] <nothingmuch> exactly =)

[22:24] <japhb> It looks like Q:PIR{} syntax was partially implemented in NQP, but it wasn't finished.  Is there a reason for that?

[22:25] <jnthn> japhb: No, that's odd.

[22:26] <jnthn> nothingmuch: I think the issue is that with junctions, you end up computing various permuations of the values in $x + $y, that gives you a new junction, then you see if any of those values == 5

[22:26] <jnthn> But the link to the junctions $x and $y is lost at that point.

[22:26] <nothingmuch> yeah

[22:27] <nothingmuch> any takers for an idiomatic way to write that code with junctions?

[22:27] *** braceta left
[22:27] <nothingmuch> it doesn't need to be similar, it should just end up with some association of $x to 3 and $y to 2 in the end

[22:28] <jnthn> Hmm.

[22:29] <jnthn> Off hand, I can't think of one.

[22:29] <jnthn> It feels like a related problem to the one junctions solve, but not quite the same one.

[22:29] <nothingmuch> yeah

[22:29] *** frederico_br joined
[22:30] <masak> nod.

[22:30] *** pyrimidine left
[22:30] <masak> the question has been asked a few times on p6l.

[22:30] <masak> all people seem to agree on is that junctions do not easily bend to solve such problems.

[22:30] <nothingmuch> probably by me as well at some point =)

[22:32] <jnthn> I think it was December/January-ish something like this last came up on p6l.

[22:35] <jnthn> I think the outcome was, Junctions are designed to deal with a certain set of problems, and are more a linguistic device than a mathematical one, and that things that do Junction-alike stuff that doesn't really fit what Junctions do probably wants to be a different data structure.

[22:36] <masak> coincidentally, my journey with junctions has followed the same broad arc.

[22:36] <masak> I feel very confident with using them in conditions.

[22:36] <nothingmuch> <p>That said, although junctions are not truly capable of creating backtracking logic that doesn't mean they are more or less useful than <tt>amb</tt>, their applictions are simply different.They are most useful for collecting permuted results is what really interests you, sort of like <tt>amb-collect</tt>, but when overloading the data (and not the control flow) is really what you want.</p>

[22:36] <nothingmuch> that's how I summarized it

[22:37] <nothingmuch> actually let me post the whole draft

[22:37] <jnthn> nothingmuch: That sounds like a sensible conclusion.

[22:37] <nothingmuch> i was just hoping to provide an additional example that explains how this would be done more idiomatically

[22:37] <nothingmuch> but that's a flawed idea

[22:37] <jnthn> You've thought about it more than I have, of course, but it matches my feeling on this.

[22:37] <nothingmuch> the example doesn't want a permutation, it wants two scalar eigenstates

[22:38] <jnthn> I think it'd be possible to implement such a data structure in Perl 6 without too much effort.

[22:38] <jnthn> Though I suspect it's probably library rather than core language.

[22:38] <jnthn> It is a cool construct.

[22:39] <nothingmuch> http://nothingmuch.woobling.org/tmp/amb.html'

[22:40] <nothingmuch> i think the second paragraph is a little bit inaccurate

[22:40] * nothingmuch will reword

[22:41] <masak> nothingmuch: suddenly I want 'amb' (or the tools to make it) in Perl 6.

[22:42] <nothingmuch> you have it

[22:42] <nothingmuch> look at the test

[22:42] <nothingmuch> i implemented it in perl 5

[22:42] *** lollan joined
[22:42] <nothingmuch> (caveat tester, it actually segfaults in its urrent form due to a bug in unwinding subroutine invocation PERL_CONTEXT frames, but if you fiddle it a bit the test passes with Continuation::Delimited)

[22:42] <jnthn> nothingmuch++ # cool write-up :-)

[22:42] <masak> aye, nothingmuch++

[22:43] <jnthn> Thanks for pointing it out. And now you've mentioned hwo it works, it's even more interesting.

[22:43] <nothingmuch> http://github.com/nothingmuch/continuation-delimited/blob/master/t/04_amb.t

[22:43] <nothingmuch> comments and everything ;-)

[22:43] <nothingmuch> the p6 impl would be much more elegant

[22:44] <nothingmuch> this is what it needs to pass right now: http://scsys.co.uk:8001/32885

[22:44] <nothingmuch> and this is the output with tracing: http://scsys.co.uk:8001/32884

[22:45] <masak> http://lastofthecarelessmen.blogspot.com/2009/08/vector-joining-perl-6-ecosystem.html # someone blogs about proto :)

[22:45] <masak> http://use.perl.org/~masak/journal/39513 # lolibloggedtoo

[22:47] <japhb> I love how going to the pub is a todo item

[22:47] <jnthn> It's one of those todo items that doesn't need to get taken off the todo list after it's done.

[22:48] *** ihrd joined
[22:48] <jnthn> masakpost! :-D

[22:48] <japhb> jnthn, is a leading '!' the Rakudo way of saying "internal subroutine"?

[22:48] *** fredrecsky left
[22:49] <japhb> As in:  .sub '!qx'

[22:49] <japhb> I'm guessing it's by analogy with private class attributes

[22:50] <jnthn> japhb: Yeah, it's a convention that we use.

[22:50] <masak> std: class A { method !private() {} }

[22:50] <p6eval> std 28054: OUTPUT«ok 00:02 38m␤»

[22:50] <masak> japhb: not just internal.

[22:50] <jnthn> Taken from that concention. :-)

[22:50] <japhb> masak, oh?

[22:50] <jnthn> masak: I think japhb was talking about subs rather than methods.

[22:50] <jnthn> masak: For subs it's just a convention.

[22:50] <masak> oh, right. indeed.

[22:50] <japhb> OK, right, we're clear

[22:50] <nothingmuch> is http://dev.perl.org/perl6/doc/design/exe/E06.html#The_Wonderful_World_of_Junctions still the most perma link?

[22:50] <jnthn> Whereas method !private() { } is actually Perl 6 syntax. :-)

[22:52] <jnthn> masak: In your post, what are you using the trait for?

[22:52] <masak> jnthn: nothing, yet.

[22:53] <masak> jnthn: but it will provide various convinience methods eventually.

[22:53] <masak> right now it's just a stub.

[22:53] <jnthn> ah, ok

[22:53] <jnthn> nothingmuch: It doesn't immediately look out of date.

[22:53] <jnthn> my Floor::Wax|Dessert::Topping $shimmer; is

[22:53] *** cotto joined
[22:54] <jnthn> S09 is The Spec that is maintained.

[22:54] <jnthn> Junctions section in http://svn.pugscode.org/pugs/docs/Perl6/Spec/S09-data.pod

[22:54] <jnthn> I forget where it's HTML-ized...

[22:54] <s1n> cabal

[22:55] <jnthn> ah, yes

[22:55] <jnthn> http://perlcabal.org/syn/S09.html#Junctions

[22:55] <s1n> http://perlcabal.org/syn/S09.html#Junctions

[22:55] <s1n> lol

[22:55] <nothingmuch> i was considering using that but it's not good introductory material I think

[22:55] <jnthn> rakudo: say ('great minds think alike', 'all fools are the same').pick

[22:55] <nothingmuch> it's hard to see what you can do with them

[22:56] <p6eval> rakudo 0d4fe0: OUTPUT«great minds think alike␤»

[22:56] <jnthn> nothingmuch: Aye. The lesser evil may be your original suggestion.

[22:56] <nothingmuch> till you grok the whole thing that is

[22:56] <jnthn> I can't think of a better one off hand.

[22:56] <nothingmuch> exe it is then =)

[22:56] <nothingmuch> ok, now to see if I can make it stop segfaulting

[22:56] <nothingmuch> ^_^

[22:56] <s1n> nothingmuch: the spec is somewhere between spec and chatter

[22:57] <nothingmuch> s1n: i want a link in a blog post where someone who doesn't grok junctions can get an idea of what they are about

[22:58] <s1n> nothingmuch: aside from a few minor things, that first link you posted is more n00b-friendly

[22:59] <jnthn> nothingmuch: Happy debugging.

[22:59] <s1n> nothingmuch: junctions aren't rocket science though, despite their popularity, the n00b can think of them as sets with boolean eval (few other nice things, like pick)

[23:00] <jnthn> Don't let TimToady see you equating junctions and sets. ;-)

[23:00] <nothingmuch> s1n: the exegesis's advantage is that it provides a clear example of the linguistic advantage

[23:00] <nothingmuch> whereas the synopsis does not

[23:00] <s1n> jnthn: just wait until people _abuse_ junctions and make them sets

[23:00] <nothingmuch> been there, done that, that's why we have the Set type (or at least had it back in 2005-2006 when I was last up to date ;-)

[23:00] <s1n> nothingmuch: if you need real examples, i suggest the tests

[23:01] *** nbrown joined
[23:01] <jnthn> s1n: Yes, the problem is that said people will try and get bitten.

[23:01] <s1n> nothingmuch: more often than not, i give up with the spec and just read the tests

[23:01] <nothingmuch> why not the exegesis?

[23:01] <s1n> jnthn: that's what you think :)

[23:01] <nothingmuch> it's got clear examples and explanatory text

[23:01] <nothingmuch> not just examples that work

[23:02] <jnthn> nothingmuch: The general issue with the exegesis is that they aren't maintained relative to the spec.

[23:02] <s1n> nothingmuch: because the tests are far more complete :)

[23:02] <jnthn> nothingmuch: In thise case however, the two haven't really diverged.

[23:02] <jnthn> So it's a fine thing to link to still.

[23:02] <s1n> the cabal embeds smartlinks

[23:02] * jnthn grabs a beer to read masak's blog post with

[23:02] <nothingmuch> yeah, i'm not trying to detail how they should really wokr, just to get a quik handle on them if you haven't been exposed

[23:03] <nothingmuch> s1n: again, not the point of the blog post

[23:03] <s1n> nothingmuch: i know, just telling you how i grok things :)

[23:03] <s1n> nothingmuch: btw, nice talk on haskell at yapc :)

[23:04] <nothingmuch> i'd link to Perl6::Junction, it as a great synopsis, but it doesn't actually support eigenstate extraction

[23:04] <nothingmuch> and Q::SP's synopsis isn't that great either

[23:04] <nothingmuch> thanks =)

[23:05] <nothingmuch> bad delivery though, I thought I was going to faint (saw black spots and everything)

[23:06] <s1n> nothingmuch: no it was fine, you seemed kinda nervous, but content is king :)

[23:06] <nothingmuch> s/nervous/sick/;

[23:06] <jnthn> I imaigne that's kinda distracting when trying to give a talk.

[23:06] <nothingmuch> very very sick

[23:06] <nothingmuch> i thought i was going to cancel

[23:06] <jnthn> nothingmuch: Hope you're feeling much better now.

[23:06] <nothingmuch> yeah, it was just airplane flu

[23:07] <jnthn> eww

[23:07] <nothingmuch> it only ruined pittsburgh

[23:07] <nothingmuch> the other legs of the trip were successful

[23:07] <nothingmuch> most importantly: http://gallery.woobling.org/cathedral_peak, http://gallery.woobling.org/after_six

[23:07] <nothingmuch> also got to go mountain biking in santa cruz

[23:08] <nothingmuch> and the big NP in Maine

[23:08] <nothingmuch> i forget its name

[23:08] <nothingmuch> Acadia

[23:08] <nothingmuch> usaw many friends

[23:08] <nothingmuch> anyway, fun times

[23:09] <jnthn> Wow, looks like awesome fun.

[23:10] <jnthn> nothingmuch: Planning to do YAPC::Asia?

[23:10] *** wayland_ left
[23:11] <jnthn> masak: "Note that we haven't even bothered to define the trait we're using. Wonder when that'll bite us?" - in the future, it may have to be "sooner than it does now"

[23:12] <masak> jnthn: glad to hear that.

[23:12] *** wayland_ joined
[23:12] <masak> jnthn: I was actually surprised that I got away with sticking a bareword into the code like that.

[23:13] <masak> jnthn: also, I think you'll have to explain the reasoning behind the parameter list to trait_mod:<is>. I did a double-take on that one.

[23:14] <jnthn> Text::CSV.parse-file($filename, :output($type)); # :output($type) is _so_ cool

[23:14] <nothingmuch> jnthn: yp

[23:14] <nothingmuch> also climbing in .tw and Myogi in Japan: http://i-cjw.com/blog/2009/06/28/where-eagles-darent/

[23:14] <jnthn> If it does what I think it does...

[23:14] <masak> jnthn: I know! I hope to blog about it soon. :)

[23:14] <masak> jnthn: it does.

[23:15] <masak> jnthn: still mulling over how to combine it with typed attributes, though.

[23:15] <masak> that was one of the problems I ran into this evening.

[23:15] <jnthn> Mozes introspect the types of the attributes

[23:15] <jnthn> erm

[23:15] <jnthn> You can ...

[23:15] <masak> true.

[23:15] <masak> maybe that's the solution.

[23:15] <masak> but even then, how do I convert from a Str to... something arbitrary?

[23:16] <masak> there'd have to be an adapter function sent along.

[23:16] *** nbrown_ left
[23:18] <jnthn> masak: Rely on coercion, perhaps.

[23:18] <jnthn> $type($thingy-you-read)

[23:18] <masak> jnthn: aye, that might work.

[23:19] <jnthn> (yes, nyi, but maybe you can talk some Rakudo dev into it ;-))

[23:19] <masak> :)

[23:19] <jnthn> masak: I'd avoid defining your own coercion mechanism without good reason.

[23:19] * masak will think a bit more about it

[23:20] <masak> I have a feeling people will like :output(MyType). so it's worth it to make it work in many of the common cases. typed attributes is definitely a common case.

[23:21] <jnthn> *nod*

[23:21] *** M_o_C left
[23:21] <jnthn> masak++ # awesome post

[23:21] <jnthn> One of my favorites so far.

[23:21] <masak> thanks. :)

[23:22] <jnthn> I'm really excited to see the things people are starting to create in Perl 6.

[23:22] <masak> lately, I've come to focus on showing bare-metal thinking rather than high-level discussion in the Web.pm posts. I think that constitutes an improvement.

[23:24] <jnthn> masak: It can be nice to see the big picture once in a while, but yes, I'm enjoying it.

[23:24] * jnthn hasn't actually done a high-level post for ages.

[23:24] <jnthn> I think I may do one in late Nov / early Dec.

[23:24] <masak> I think we'll be building up to the big picture as we approach week 20.

[23:24] <jnthn> Which marks the 2 year point.

[23:25] <masak> wow. 2 years.

[23:25] <jnthn> (2 years of my involvement in Rakudo, that is.)

[23:25] <jnthn> Yes, it scares me too.

[23:25] <jnthn> I really didn't know what I was getting myself into.

[23:27] <masak> :)

[23:30] <masak> I'm glad I got to blogging week 14 today. I think this marks the first Web.pm week that was actually a week long. :P

[23:30] *** nbrown left
[23:31] <jnthn> It's OK, I have a liberal definition of "week" for my grant too.

[23:31] *** nbrown joined
[23:31] <jnthn> Well, "month"

[23:31] <jnthn> :-)

[23:32] <jnthn> I actually did get my current one done closer to on time than the previous one. :-)

[23:32] <masak> I'm not sure how to count with Web.pm.

[23:32] <masak> technically, I'm doing ihrd's weeks now, and my part is finished.

[23:33] <jnthn> Well, to me the important thing is: there's visible progress in the right direction.

[23:33] <masak> nod.

[23:33] <jnthn> And Web.pm certainly feels that way to me.

[23:34] <masak> to me too.

[23:34] <masak> there's just so _much_ to do! :/

[23:34] <masak> and by that, I don't necessarily mean the parts of Web.pm that fall within the grant.

[23:34] <masak> those parts are pretty much wrapped up already.

[23:35] * jnthn knows the feeling of so _much_ to do.

[23:35] *** wayland_ is now known as wayland76

[23:36] * wayland76 does too, with his 6 or so perl 6 projects :)

[23:38] * jnthn tries to plan what on earth to do this week.

[23:38] * masak washes up after the baking session

[23:38] * wayland76 is glad jnthn is on earth this week

[23:38] * wayland76 wonders whether jnthn is planning to do role {...} this week :)

[23:38] <jnthn> Yeah, hacking on the moon last week was a real drag.

[23:38] <jnthn> AWFUL ping times.

[23:39] <wayland76> ...and the added danger of becoming a ..... lunatic :)

[23:39] <jnthn> wayland76: erm, role Foo { ... }?

[23:39] <wayland76> jnthn: Yes :)

[23:39] <jnthn> wayland76: Ouch.

[23:40] <wayland76> I expect it's not ready to be done yet, but I figured it couldn't hurt to ask :)

[23:40] <jnthn> wayland76: I'll keep it in mind. Maybe.

[23:41] <jnthn> Hmm. Ideally I'd do a Rakudo day tomorrow. In reality, I probably need to clear up a couple of non-Perl 6 bits.

[23:41] <wayland76> Btw, is it supposed to tell me what file an error is in, as well as the line #?

[23:41] <jnthn> If it knows it.

[23:41] <jnthn> Well, if it can know it. If you think it should be telling you, it probably should be.

[23:42] <jnthn> File rakudobug if you've got a way to produce a missing one where it should not be missing.

[23:42] <wayland76> ok, because I had a project that was blocking on that -- I'll revisit it, and see if I can narrow down the bug, and submit a bug :)

[23:43] <jnthn> OK, thanks. :-)

[23:44] <masak> wow. it's very late.

[23:45] <masak> I'd better start trying to sleep now, so that I'll succeed before it's morning...

[23:45] <masak> see y'all tomorrow!

[23:46] *** masak left
[23:47] <nothingmuch> $x is to addition what factorization is to product

[23:47] <nothingmuch> what's the word I'm looking for?

[23:48] <japhb> nothingmuch, what constraints do you want on the things you're breaking the sum into?

[23:49] <japhb> (factorization has a clear constraint: the factors must be integers)

[23:49] <nothingmuch> <p>The expression <tt>1|2|3 + 1|2|3 == 5</tt> that at least one of the permuted sums is equal to <tt>5</tt>. Although it can't tell you which ____ amount to 5, the ability to do <tt>1|2|3 + 1|2|3</tt> is useful in its own right.</p>

[23:49] <japhb> summands?

[23:50] <japhb> (which is actually a match for 'factors' not 'factorization')

[23:50] <jnthn> *nod*

[23:50] <jnthn> summands fits there.

[23:50] <nothingmuch> yes, thanks =)

[23:50] <nothingmuch> yeah i rephrased it more since I asked ;-)

[23:50] <jnthn> I can't think of something to put in the $x though.

[23:50] * nothingmuch neither

[23:51] <wayland76> Or operands is the general term, if you prefer that

[23:51] <nothingmuch> but if we refactor that we don't need to =)

[23:52] *** jauaor joined
[23:53] <japhb> jnthn, what is the 'root_new' op?

[23:53] * japhb reading src/builtins/globals.pir

[23:54] <jnthn> japhb: Allows you to create an instane of something in a different HLL.

[23:54] <jnthn> Or potentially in a different HLL.

[23:54] <jnthn> Normally new is relative to the current HLL.

[23:55] <japhb> jnthn, OK, gotcha.

