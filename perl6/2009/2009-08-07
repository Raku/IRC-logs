[00:04] *** stepnem left
[00:05] *** stepnem joined
[00:07] *** stepnem left
[00:07] *** SmokeMachine joined
[00:09] *** lollan joined
[00:09] *** stepnem joined
[00:12] *** stepnem left
[00:16] *** stepnem_ joined
[00:17] *** stepnem_ is now known as stepnem

[00:38] *** hercynium left
[00:44] *** Whiteknight joined
[00:55] *** lollan left
[00:56] *** Rolo joined
[00:57] *** Avada left
[00:57] *** Avada joined
[00:58] *** Rolo left
[01:00] *** cognominal left
[01:00] *** Whiteknight left
[01:09] *** damyan left
[01:09] *** stepnem left
[01:09] *** araujo left
[01:09] *** eMaX left
[01:10] *** eternaleye left
[01:10] *** eternaleye joined
[01:11] *** stepnem joined
[01:11] *** araujo joined
[01:11] *** eMaX joined
[01:11] *** damyan joined
[01:14] *** KyleHa joined
[01:15] *** explorer joined
[01:32] *** Chillance left
[01:41] *** cytoplasm left
[01:44] *** skids_ joined
[01:47] *** skids_ left
[01:50] *** ihrd left
[01:51] *** frew joined
[01:56] *** explorer left
[01:57] *** alester joined
[02:00] <colomon> Is there a way to get bignums in Rakudo?

[02:00] *** ihrd joined
[02:01] <colomon> (My wife:  "You embiggen the one you have.")

[02:04] *** alester left
[02:04] *** alester joined
[02:06] *** alester_ joined
[02:07] *** stepnem left
[02:08] *** alester__ joined
[02:09] *** stepnem joined
[02:10] *** alester left
[02:11] *** stepnem left
[02:14] *** stepnem joined
[02:16] *** stepnem left
[02:16] <meppl> good night

[02:17] *** meppl left
[02:19] *** stepnem joined
[02:19] *** nihiliad joined
[02:22] *** KyleHa_ joined
[02:26] *** alester_ left
[02:26] *** nihiliad left
[02:26] *** nihiliad joined
[02:30] *** alester__ left
[02:43] *** justatheory joined
[02:45] *** alester joined
[02:49] *** nihiliad left
[03:02] *** JimmyZ joined
[03:02] <pugs_svn> r27888 | jimmy++ | [Spec]fixed the wrong space, now it's \x20, not \xC2A0

[03:20] *** ihrd left
[03:21] *** justatheory left
[03:22] *** nihiliad joined
[03:33] *** nacho__ joined
[03:35] *** nacho_ left
[03:51] <wayland76> finanalyst: pong :)

[04:00] *** justatheory joined
[04:06] *** sparc_ joined
[04:06] *** kimtaro joined
[04:07] <pugs_svn> r27889 | wayland++ | [S32/IO] Made some more mods to the filesystem due to interaction with finanalyst++

[04:11] *** PZt left
[04:28] *** r0bby left
[04:28] *** r0bby joined
[04:32] *** justatheory left
[04:35] *** unitxt left
[04:36] *** tann joined
[04:45] *** KyleHa_ left
[04:46] *** nihiliad left
[04:47] *** SmokeMachine left
[04:50] *** nacho__ left
[04:54] *** nihiliad joined
[05:01] <wayland76> KyleHa: ping?

[05:03] *** kst left
[05:03] *** kst joined
[05:05] *** frew left
[05:13] *** JimmyZ left
[05:20] *** tann left
[05:36] *** alester left
[05:39] *** alester joined
[05:45] *** orafu left
[05:45] *** orafu joined
[05:46] *** tann_ joined
[05:59] *** nihiliad left
[06:13] <moritz_> http://robonperl.blogspot.com/2009/08/first-usable-release-of-p6.html ++

[06:23] * araujo checks

[06:25] <araujo> exciting

[06:25] <araujo> :)

[06:47] *** PZt joined
[07:05] *** rfordinal joined
[07:08] *** huf_ joined
[07:18] *** huf left
[07:28] <pmichaud> Good morning, #perl6

[07:28] <Matt-W> Good morning pmichaud

[07:28] <Matt-W> Strange to have you in a similar time zone

[07:28] <pmichaud> Last day it will occur for a while :-)

[07:29] <pmichaud> (at the airpot now :-)

[07:29] <Matt-W> Has it been good?

[07:29] <pmichaud> the trip has been quite nice, yes

[07:29] <Matt-W> By the way, the Rakudo * plan, I like that a lot

[07:30] <pmichaud> thank you

[07:30] <pmichaud> Unless I sleep or get otherwise occupied, I plan to write up more details on the plane

[07:30] <Matt-W> Great

[07:30] <pmichaud> (plane has power so no battery issues :-)

[07:30] <Matt-W> Fantastic

[07:30] <Matt-W> Not all flying sucks

[07:30] <moritz_> oh hai

[07:31] <pmichaud> yes, I've had pretty good luck with traveling lately

[07:32] *** alester left
[07:32] <pmichaud> (I probably shouldn't have said that just before getting on a plane -- might have jinxed myself)

[07:33] <Matt-W> I find flying horribly uncomfortable, but I think that's because only business class is likely to have enough legroom for someone my height

[07:33] <pmichaud> For my cross-the-atlantic flight I have an exit-row seat with extra legroom  (not that I need it)

[07:33] <moritz_> pmichaud: is the ins2 branch still blocking on anything?

[07:34] <Matt-W> nice, I've had that a couple of times, it does make a difference

[07:34] <moritz_> ah, that's nice

[07:34] <Matt-W> Once when I flew to Basel for a long weekend, I got in row 1, chatted with the stewardess and my neighbours, very pleasant

[07:34] <Matt-W> On the way back, got in the same seat... and had the same neighbours

[07:34] <pmichaud> heh

[07:34] <pmichaud> ins2 branch is just blocking on tuits, I think

[07:35] <moritz_> tuits for doing what?

[07:35] <pmichaud> I didn't want to merge to trunk when I wouldn't have time to babysit it

[07:35] <Matt-W> making it wokr?

[07:35] <pmichaud> (in case something went wrong)

[07:35] <moritz_> ok

[07:35] <pmichaud> other than that I think ins2 is ready

[07:35] <Matt-W> great

[07:35] <pmichaud> I can see about merging it tomorrow or Sun

[07:35] <Matt-W> the best thing about a feature branch is when it's merged back as completed

[07:35] <moritz_> I might assist with babysitting this weekeend, I'm mostly online

[07:36] <pmichaud> It would be good to merge back this weekend, we'd get some tests before the release on the 20th

[07:36] <moritz_> right

[07:36] <moritz_> I went through the README

[07:37] <moritz_> it didn't need any updating at all

[07:37] <pmichaud> excellent

[07:37] <moritz_> (just found a typo ;-)

[07:37] *** broquaint left
[07:40] <moritz_> do we have different Failure objects yet, and if so, how can I distinguish them?

[07:41] <moritz_> (for implementing infix:<eqv> for undef)

[07:41] <pmichaud> We don't have different ones yet, no

[07:41] <moritz_> good

[07:41] <pmichaud> Eventually Failure will be a role

[07:41] <moritz_> so if $a ~~ Failure and $b ~~ Failure, $a eqv $b

[07:42] *** eMaX left
[07:42] <pmichaud> well, I don't think that two Failure objects necessarily implies equivalence

[07:42] <pmichaud> any more than  $a ~~ Int and $b ~~ Int implies $a eqv $b

[07:42] <pmichaud> I thought you meant "different types of Failure objects"

[07:42] <moritz_> that's why I'm asking ;-)

[07:43] <pmichaud> I fully expect that we'll have a variety of Failure types -- nobody has decided what those are yet

[07:43] <moritz_> but we don't have them right now

[07:43] <pmichaud> correct.

[07:44] <pmichaud> we have a Failure class (should be a role), and there can be multiple objecs of the Failure type

[07:45] <moritz_> I was trying to implement Test.pm's is_deeply in terms of eqv

[07:45] <moritz_> and found out that 'undef eqv undef' loops in the current implementation

[07:45] <moritz_> rakudo: say undef === undef

[07:45] <pmichaud> I'd like that very much

[07:45] <p6eval> rakudo 459f5a: OUTPUT«0␤»

[07:46] <moritz_> the problem is that I can't re-dispatch to ===, because Failure is not a value type

[07:46] <moritz_> so I was looking for other ways to check if two undef's are the same

[07:46] <Matt-W> can undefs ever be the same?

[07:46] <moritz_> my version was 'multi infix:<eqv> (Failure $a, Failure $b ) { True }'

[07:46] <Matt-W> can one undefinedness be the same as another?

[07:46] <moritz_> but that seemed a bit too simply

[07:46] <moritz_> Matt-W: sure

[07:47] <moritz_> eqv is structural equality

[07:47] *** rfordinal left
[07:47] <moritz_> roughly like $a.perl eq $b.perl

[07:47] <Matt-W> ah

[07:47] <moritz_> so 'undef eqv undef' should be true

[07:47] <Matt-W> yes, undef eqv undef should hold

[07:47] <pmichaud> starting simple is fine it it works

[07:47] <moritz_> ok

[07:48] <pmichaud> s/it/if/

[07:48] <pmichaud> (bit of a lag in the internet connection here)

[07:48] <moritz_> then I'll push my changes

[07:51] * Matt-W would write a patch for something, but has to do $dayjob :(

[07:51] <Matt-W> maybe later :)

[07:56] <Matt-W> From recent updates to the spec, it looks like I migth have somewhere to put my file statting code

[07:59] *** masak joined
[08:00] <masak> morning, rakudoers.

[08:04] <moritz_> oh hai Matt-W 

[08:04] <moritz_> erm, masak 

[08:04] <moritz_> :-)

[08:04] <moritz_> both, actually

[08:05] <masak> today it's just Lisbon and me.

[08:05] <masak> I'm thinking of what to go see.

[08:08] <Matt-W> hmm

[08:08] <Matt-W> I know almost nothing relevant about Lisbon

[08:09] <masak> I hear the Museum of Science is s'posed to be good.

[08:09] <masak> mberends gave that as a parting tip.

[08:09] <Matt-W> could be interesting

[08:13] *** masak left
[08:13] *** masak` joined
[08:14] *** finanalyst joined
[08:14] <masak`> hm, slightly flaky hostel wifi. I'm sitting a bit too far from the source.

[08:14] *** tann_ left
[08:15] *** sri_kraih_ left
[08:19] <pmichaud> just ran into mberends++ and jnthn++ at the airport :-)

[08:19] <masak`> :)

[08:19] <masak`> small town.

[08:19] *** masak` is now known as masak

[08:19] <pnu> does rakudo implement tying a variable, aka specifying the variable implementation type (my $foo is Bar) other than the default derived from the sigil?

[08:19] <pmichaud> pnu: not yet

[08:19] <pmichaud> (not currently on the short-term roadmap, either)

[08:19] <pnu> so i figured from the source, just verified.. thanks. :-)

[08:20] <finanalyst> pmichaud: when is here to doc planned for?

[08:20] <pmichaud> finanalyst: it will likely occur when we start using STD.pm

[08:20] <pmichaud> currently that's december-ish

[08:20] <pmichaud> we aren't too rushed on heredocs because there's always the various quoting forms available

[08:21] <masak> though it'll be nice when heredocs land.

[08:21] <pmichaud> sure

[08:21] <finanalyst> i have been using the quoting forms, but the autospacing aspect of hereto is attractive

[08:21] <pmichaud> agreed

[08:21] <masak> but I agree; no need to do it before STD.pm-compat.

[08:21] <pmichaud> one could easily write a function to take care of the autospacing aspect

[08:22] <finanalyst> mm

[08:22] <pmichaud> autospace(qq{ ... })

[08:22] <masak> nice idea.

[08:22] * moritz_ just wanted to suggest the same

[08:22] <moritz_> you could just strip off the amounts of whitespaces that make up the last line

[08:22] <pmichaud> for that matter, there could be an attribute to the quoting forms that says "strip 8 leading whitespace"

[08:23] <pmichaud> qq:strip(8) { ... lines with leading eight spaces removed ... }

[08:23] <finanalyst> or a string that is stripped off

[08:23] <moritz_> then that number would have to be maintained

[08:23] <finanalyst> a sort of stripper function :)

[08:23] <pmichaud> qq:strip { ... lines with leading spaces computed and stripped ... }

[08:23] <pmichaud> qq:strip(*) { ... same as :strip ... }

[08:23] <moritz_> qq:trim { ... }

[08:24] <moritz_> we call it trim in another place already

[08:24] <finanalyst> trim implies both sides

[08:24] <pmichaud> trim works too, although there's a semantic conflict with the trim() function

[08:24] <moritz_> (although it's not exactly the same)

[08:24] <pmichaud> might want to be some variant of :ws

[08:24] <finanalyst> :unindent

[08:24] <pmichaud> oooh, :unindent is nice :-)

[08:24] <pmichaud> anyway, the point is that we could provide a similar capability without having to use a heredoc :-)

[08:25] <moritz_> but please first spec it, then implement it

[08:25] <finanalyst> it is the indenting aspect that i miss most at present

[08:25] <pmichaud> right, I suspect that's the case for most people who want heredocs

[08:25] <pmichaud> they want the "automatically unindent my string" feature

[08:26] *** hanekomu joined
[08:26] <pmichaud> so perhaps we want a   Str.unindent  function :-)

[08:26] <pmichaud> my $x = qq{ ... text ... }.unindent

[08:26] <finanalyst> but that implies the qq{} is a single line

[08:27] <pmichaud> not at all

[08:27] <pmichaud> my $x = qq{

[08:27] <pmichaud>     text

[08:27] <pmichaud>      text

[08:27] <pmichaud>     text

[08:27] <pmichaud> }.unindent

[08:27] <Matt-W> would that then look at the last line, count the prefix whitespace length and lop that off each line?

[08:27] <pmichaud> Matt-W: that would be one way to do it; another would be to simply find the line with the least amount of ws

[08:27] <pmichaud> and use that

[08:28] <Matt-W> hmm true

[08:28] <finanalyst> better the line with least ws

[08:28] <Matt-W> the last line thing is a heredocish concept

[08:28] <masak> rakudo: sub autospace($str) { my @lines = $str.split("\n"); @lines>>.substr([min] map { indent $_ }, @lines).join("\n") }; sub indent($line) { $line ~~ /^ (\x20*)/; $0.chars }; say autospace(" foo\n  bar\n baz")

[08:28] <p6eval> rakudo 459f5a: OUTPUT«foo␤ bar␤baz␤»

[08:28] <pmichaud> show off.

[08:28] <Matt-W> easy enough to write too

[08:28] <pmichaud> :-)

[08:28] <pmichaud> so, while I'm here speculating about what could be done, masak++ is busy writing the code

[08:29] <Matt-W> isn't there a Str.lines method?

[08:29] <moritz_> so was I, but masak++ was faster

[08:29] <finanalyst> when will it be in rakudo?

[08:30] <pmichaud> anyway, jnthn++ and I put heredocs as a "nice to have" for Rakudo * but we expect to get them "for free" when we start using STD.pm

[08:30] <Matt-W> in about another five minutes

[08:30] <finanalyst> brill!

[08:30] <Matt-W> pmichaud: I hope so, it would make a lot of people happier to try Perl 6 I think

[08:30] <Matt-W> masak: implemented it in the rakudo tree yet?

[08:31] <moritz_> please don't put unspecced features in Rakudo

[08:31] <pmichaud> Matt-W: yes, I agree.  But jnthn++ and I both felt that it wouldn't be worth blocking Rakudo * on heredoc support, since there are many reasonable alternatives

[08:31] <moritz_> not unless there's a *very* good reason (like it is with Q:PIR)

[08:32] <Matt-W> pmichaud: indeed

[08:32] <finanalyst> how about a small module String::Extras

[08:32] <Matt-W> I was just going to call it Unindent.pm

[08:33] *** masak left
[08:33] *** rfordinal joined
[08:33] <pmichaud> "Undent.pm"  :-)

[08:33] <finanalyst> Unindent,whatever

[08:33] <finanalyst> Undent is for pulling teeth

[08:33] <finanalyst> :)

[08:34] <Matt-W> do we have is copy yet

[08:34] <moritz_> yes

[08:34] <Matt-W> woooo

[08:35] <finanalyst> i do need unindent, so if someone does an implementation, please let me know

[08:35] <Matt-W> not that i need it

[08:35] <Matt-W> I just thought of it

[08:35] <finanalyst> i have used is copy

[08:36] * Matt-W is turning it into a module

[08:37] <pmichaud> they're calling might flight, so I'll be leaving soon.

[08:37] <Matt-W> okay

[08:37] <Matt-W> have a good flight

[08:37] <finanalyst> safe landing

[08:37] <Matt-W> hope you can get some useful hacking done to pass the time

[08:37] <pmichaud> o/  I'm leaving ... on a jet plane... don't know when I'll be back again ... o/  

[08:37] <pmichaud> I have some books to read, puzzles to solve, documentation to write

[08:37] <pmichaud> even sleep would be useful :-)

[08:38] <pmichaud> catch you all on the other side of the atlantic :)

[08:40] <Matt-W> well

[08:40] <Matt-W> I'll still be on the same side of the atlantic...

[08:51] *** charsbar left
[08:51] *** charsbar joined
[08:53] <Matt-W> finanalyst: I have a module, it works!

[08:53] <finanalyst> how do i get it?

[08:55] <Matt-W> http://matthew-walton.co.uk/unindent.tar.bz2

[08:55] <Matt-W> I shall have to get it into an appropriate repo somewhere

[08:55] *** ihrd joined
[08:56] <Matt-W> perl6-examples perhaps

[08:56] *** ihrd left
[09:01] *** cognominal joined
[09:04] *** synthEEEE left
[09:04] *** synth joined
[09:08] *** payload left
[09:15] *** meppl joined
[09:17] *** M_o_C joined
[09:27] *** kimtaro_ joined
[09:29] *** kimtaro left
[09:35] *** kane_ left
[09:36] *** alexn_org joined
[09:41] <colomon> Anyone out there this morning?

[09:41] *** broquaint joined
[09:42] <moritz_> no, I'm indoor :-)

[09:42] <colomon> I've got a question and a bug.  Bug first:

[09:42] <colomon> I actually got a segmentation fault running a simple (but long running) Perl 6 script yesterday.

[09:43] <moritz_> did it consume much memory?

[09:44] <colomon> quite possibly, if it is leaking memory -- I was getting ready for bed rather than watching my computer when it happened.

[09:45] <moritz_> anyway, please submit a bug report for it

[09:46] <colomon> I'm running it again now with the Activity Monitor up.

[09:46] <colomon> Worth reporting even if it is running out of memory?

[09:47] <moritz_> yes; a simple program that leaks memory might help debugging rakudo and/or the GC

[09:47] <moritz_> if it's a leak

[09:47] <moritz_> if you just assemble ever larger data structures, there's not much point in reporting

[09:49] *** Khisanth left
[09:49] <lisppaste3> colomon pasted "memory leak?" at http://paste.lisp.org/display/84969

[09:50] <colomon> No data structures at all, it just iterates on $n.

[09:50] <colomon> It's just chewed up 70 MB of memory...

[09:51] * moritz_ has to build a rakudo first

[09:51] <moritz_> was that your question, or did you want to ask something else?

[09:52] <colomon> My question is about Bignums.  Does Rakudo implement them yet?

[09:52] <colomon> Seems like I'm getting floats instead...

[09:52] *** payload joined
[09:52] <moritz_> interesting question

[09:53] <moritz_> I think that if libgmp is installed while you configured parrot then bigints are supported

[09:53] <colomon> (Script just seg faulted again.  Definitely leaking memory, but I don't think it had come anywhere close to using all the available memory.)

[09:53] <moritz_> ok, then report please

[09:53] <colomon> I just use perl Configure.pl --gen-parrot to build parrot.

[09:53] <colomon> (will report.)

[09:53] <moritz_> rakudo: say 2**200

[09:54] <p6eval> rakudo e5a63d: OUTPUT«1.60693804425899e+60␤»

[09:55] <colomon> Yup, like that.

[09:57] <moritz_> hrmpf

[09:58] *** rfordinal left
[09:59] *** molaf joined
[10:00] *** alexn_or1 joined
[10:00] *** Front_slash joined
[10:01] <colomon> That's a recent change, isn't it?  It seems like the first version of Rakudo I played with had Bignums enabled.

[10:01] <moritz_> rakudo: say 2**2000

[10:01] <p6eval> rakudo e5a63d: OUTPUT«Inf␤»

[10:01] <moritz_> not all that recent

[10:01] <moritz_> colomon: are you sure you don't confuse it with pugs?

[10:02] <colomon> Not 100% sure.

[10:03] <colomon> pugs: say [*]1..30

[10:03] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "1"␤    expecting dot, ":", "(", term postfix, operator or ","␤    at /tmp/I6kUIO4DYk line 1, column 8␤»

[10:03] <moritz_> space!

[10:03] <colomon> rakudo: say [*] 1..30

[10:03] <p6eval> rakudo e5a63d: OUTPUT«2.65252859812191e+32␤»

[10:03] <colomon> perl6: say [*] 1..30

[10:03] <p6eval> elf 27889: OUTPUT«Parse error in: /tmp/wGZh67vGrA␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: say [*] 1..30␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤  STD_red/std.rb:210:in

[10:03] <p6eval> ..`_…

[10:03] <p6eval> ..pugs: OUTPUT«265252859812191058636308480000000␤»

[10:03] <p6eval> ..rakudo e5a63d: OUTPUT«2.65252859812191e+32␤»

[10:04] <moritz_> colomon: does rakudo pass t/spec/S03-operators/overflow.t for you (not run by default)?

[10:05] <colomon> 17 tests, all tests successful.

[10:05] *** molaf left
[10:06] *** alexn_org left
[10:06] <colomon> (rakudobug reported.)

[10:06] <moritz_> colomon: thanks

[10:08] <colomon> re overflow.t: is a float enough to store those overflows?  seems like a C double would be able to handle them "exactly"...

[10:09] <moritz_> maybe

[10:09] <moritz_> since they come from perl 5 originally, that would seem senible.

[10:10] <colomon> In Perl 5 they would be automatic Bignums, wouldn't they?

[10:14] <wayland76> Matt-W: File statting goes in IO::FSNode, right?

[10:14] <Matt-W> not as I understand it now...

[10:15] <Matt-W> I'm probably wrong though

[10:15] <Matt-W> I really don't get the FSNode stuff

[10:15] <Matt-W> it looks messy

[10:15] *** donaldh joined
[10:17] <wayland76> Well, maybe it is, but it's fairly simple

[10:17] <wayland76> IO::File is the data from inside the file

[10:17] <wayland76> IO::FSNode is the data that the filesystem knows about the file

[10:18] <wayland76> (permissions, type, and stuff)

[10:23] *** alexn_org joined
[10:23] <Matt-W> FSNode is kind of ugly

[10:24] *** payload left
[10:34] *** missingthepoint joined
[10:35] <missingthepoint> hi all :)

[10:35] *** Su-Shee joined
[10:36] <Su-Shee> good day, stars and starlets. ;)

[10:36] <missingthepoint> hi Su-Shee :)

[10:39] *** alexn_or1 left
[10:40] *** PZt left
[10:40] *** Muixirt joined
[10:43] <Muixirt> hi

[10:44] <Muixirt> why exactly doesn't rakudo work with the jit core?

[10:44] *** alexn_or1 joined
[10:46] *** JimmyZ joined
[10:48] *** synth left
[10:52] *** alexn_org left
[10:54] *** Muixirt left
[10:55] <Su-Shee> hi missingthepoint :)

[10:56] <Su-Shee> moritz_: seen heise.de?

[11:01] *** alexn_or1 left
[11:09] *** alexn_org joined
[11:20] *** donaldh left
[11:21] *** donaldh joined
[11:23] <wayland76> Matt-W: In what way is FSNode ugly?

[11:26] <JimmyZ> I think '^Foo.can(Foo, 'bar')' can work too.

[11:31] <pugs_svn> r27890 | jimmy++ | [t/spec/S12-introspection/meta-class.t] added missing grammar spectests for S02 and S12.

[11:32] *** ruoso left
[11:35] *** alexn_org left
[11:41] <colomon> rakudo: (1..3).map({$_ => $_*$_}).perl.say

[11:41] <p6eval> rakudo e5a63d: OUTPUT«Use of uninitialized value␤Use of uninitialized value␤Use of uninitialized value␤Null PMC access in invoke()␤in Main (/tmp/xCUuiEBOsh:2)␤»

[11:42] <moritz_> Su-Shee: not yet

[11:43] <moritz_> nice.

[11:44] <colomon> std: (1..3).map({$_ => $_*$_}).perl.say

[11:44] <p6eval> std 27890: OUTPUT«ok 00:02 38m␤»

[11:44] *** kimtaro_ left
[11:45] <colomon> moritz_: rakudobug?

[11:45] *** missingthepoint left
[11:45] <moritz_> colomon: it's parsed as a hash, not as a block

[11:45] <moritz_> colomon: which is correct, afaict

[11:45] <moritz_> std: * ** 2

[11:45] <p6eval> std 27890: OUTPUT«ok 00:02 37m␤»

[11:45] *** kimtaro joined
[11:46] <moritz_> std: * => * ** 2

[11:46] <p6eval> std 27890: OUTPUT«ok 00:02 37m␤»

[11:46] <moritz_> now *that* is an evil block :-)

[11:46] <colomon> moritz_: How do you do a map like that, then?  (Assuming my intent is clear from the code.)

[11:47] <moritz_> rakudo: (1..3).map({: $_ => $_*$_}).perl.say

[11:47] <p6eval> rakudo e5a63d: OUTPUT«Unable to parse block; couldn't find final '}' at line 2, near ": $_ => $_"␤in Main (src/gen_setting.pm:3366)␤»

[11:47] <moritz_> rakudo: (1..3).map({; $_ => $_*$_}).perl.say

[11:48] <p6eval> rakudo e5a63d: OUTPUT«[1 => 1, 2 => 4, 3 => 9]␤»

[11:48] <moritz_> rakudo: (1..3).map(* => * * *).perl.say

[11:48] <p6eval> rakudo e5a63d: OUTPUT«Null PMC access in invoke()␤in Main (/tmp/vjN8wtjJT9:2)␤»

[11:51] <colomon> Semicolon does the trick for my code.  Is it a hack or proper Perl 6?

[11:51] <moritz_> it's properl Perl 6

[11:52] <moritz_> basically { ... } can be a hash or a block

[11:52] <moritz_> and when ... is a list of pairs (or a single pair), then it's interpreted as a hash ref

[11:52] <moritz_> if you add a semicolon, it's not a list of pairs anymore

[11:53] *** unitxt joined
[11:53] <colomon> At the beginning -- semicolon at the end does not work, right?

[11:54] <colomon> Is there a Pair constructor?  (I haven't looked into Perl 6 OO at all yet.)  Seems like calling one would be a much more elegant way of doing this.

[11:55] <moritz_> rakudo: (1..3).map({$_ => $_*$_;}).perl.say # I think this should work too

[11:55] <p6eval> rakudo e5a63d:  ( no output )

[11:56] <moritz_> colomon: no, an explicit pair constructor would be too much to type when you write hashes

[11:56] <moritz_> rakudo: say 1

[11:56] <p6eval> rakudo e5a63d: OUTPUT«1␤»

[11:57] *** hah joined
[11:59] <colomon> moritz_: semicolon at the end (much more elegant IMO) does not work in my code.

[11:59] <colomon> moritz_++

[11:59] <colomon> I've got to go walk my son and my dog.  Back in an hour or so.

[11:59] *** arnsholt left
[12:01] <pugs_svn> r27891 | dakkar++ | fixed the tests

[12:03] *** kimtaro left
[12:05] <Matt-W> wayland76: nomenclature. FSNode - what node? filesystem node. Oooh. Why can't it just say that then?

[12:11] <pugs_svn> r27892 | jimmy++ | [t/spec/S12-introspection/meta-class.t]updated to 9 plans

[12:16] <JimmyZ> where's the weekly perl6 talking?

[12:16] <moritz_> there's a weekly conference phone call

[12:16] <moritz_> do you mean that?

[12:16] <JimmyZ> yes

[12:16] <JimmyZ> where'is it now?

[12:17] <moritz_> there's no "where" for a phone call that's spread over the world

[12:18] <JimmyZ> there were text-record on rakudo.org before. but I can't find it now.

[12:18] <moritz_> usually they are on chromatic's blog, and can also be found via planetsix

[12:19] <JimmyZ> moritz_: thanks, found it.

[12:21] *** hanekomu_ joined
[12:37] *** hanekomu left
[12:37] *** PZt joined
[12:43] <wayland76> Matt-W: Do you want it to be called IO::FilesytemNode >

[12:43] <moritz_> what about Filesystem::Node?

[12:43] <Matt-W> I'm not sure

[12:43] <Matt-W> I'm a little wary of the names getting too long

[12:43] <Matt-W> but I'd also like them to be explicit

[12:44] <wayland76> So am I, that's why I had FSNode

[12:44] <moritz_> 'File'

[12:44] <wayland76> moritz_: But isn't that the stuff that's *inside* the file?

[12:44] <Matt-W> File::Guts :P

[12:44] <moritz_> wayland76: that would be Buf or Str

[12:45] <moritz_> DirEntry (ouch)

[12:45] <finanalyst> What is wrong with FileNode? File is what's inside. FileNode is where its at

[12:46] <moritz_> sounds reasonable

[12:50] <Matt-W> mmm

[12:50] *** ruoso joined
[12:56] *** SmokeMachine joined
[12:58] *** molaf joined
[13:02] <colomon> moritz_: Those Null PMC accesses we got mucking about with the hash versus the code block in map: worth reporting as bugs?

[13:03] <finanalyst> Matt-W: been experimenting with your unindent. A problem arises with prefixing lines with tabs as opposed to spaces, but then how many spaces does a tab make up? So left with spaces

[13:04] <finanalyst> Matt-W: How can I get your function to be a method on Str classes?

[13:04] <moritz_> colomon: yes. It should die (at least if there's no semi at all), but null PMC access is always wrong

[13:05] <Matt-W> finanalyst: something I don't quite understand - sometimes a multi sub can be called as a method and it works, but it doesn't seem to in this case (or maybe that was a hole that was cleaned up). The sure way I know to do it is to add it to the Str class with 'is also' (augment, once that's implemented in rakudo)

[13:05] <Matt-W> finanalyst: and yes, tabs are a problem

[13:06] <moritz_> Matt-W: if you find a case where you can call a multi sub as a method, please submit a bug report.

[13:06] <KyleHa> I forgot I had this window open.

[13:06] <Matt-W> moritz_: it's not supposed to happen?

[13:07] <moritz_> Matt-W: no

[13:07] *** KyleHa left
[13:07] <finanalyst> i did thin

[13:07] <Matt-W> moritz_: okay, good. nice to know one way or the other, and it doesn't really make much sense to do so :)

[13:07] <Matt-W> epseically not when you've got augment class

[13:07] <finanalyst> is augment implemented? if so whats the syntax?

[13:07] *** synth joined
[13:08] <Matt-W> augment is not

[13:08] <Matt-W> we have the old one instead

[13:08] <Matt-W> class Str is also { }

[13:08] *** ssm left
[13:09] <colomon> rakudo: (1..3).map({$_ => $_*$_;}).perl.say

[13:09] <p6eval> rakudo e5a63d: OUTPUT«Use of uninitialized value␤Use of uninitialized value␤Use of uninitialized value␤Null PMC access in invoke()␤in Main (/tmp/8McBNVU08o:2)␤»

[13:10] <colomon> Okay, reported.

[13:10] <finanalyst> rakudo: class Str is also {method tail() {$_~'_tail'}}; my $a = '123'; say $a.coda;

[13:10] <p6eval> rakudo e5a63d: OUTPUT«Method 'coda' not found for invocant of class 'Str'␤»

[13:11] <finanalyst> rakudo: class Str is also rakudo: class Str is also {method tail() {$_~'_tail'}}; my $a = '123'; say $a.coda;{method tail() {$_~'_tail'}}; my $a = '123'; say $a.tail;

[13:11] <p6eval> rakudo e5a63d: OUTPUT«Unable to parse class definition at line 2, near "rakudo: cl"␤in Main (src/gen_setting.pm:1506)␤»

[13:11] <finanalyst> rakudo: class Str is also rakudo: class Str is also {method tail() {$_~'_tail'}}; my $a = '123'; say $a.tail;

[13:11] <p6eval> rakudo e5a63d: OUTPUT«Unable to parse class definition at line 2, near "rakudo: cl"␤in Main (src/gen_setting.pm:1506)␤»

[13:13] <Matt-W> rakudo: class Str is also { method tail () { this ~ '_tail' } }; my $a = '123'; say $a.tail;

[13:13] <p6eval> rakudo e5a63d: OUTPUT«Could not find non-existent sub this␤»

[13:13] <finanalyst> what is wrong here, please?

[13:13] <Matt-W> rakudo: class Str is also { method tail () { self ~ '_tail' } }; my $a = '123'; say $a.tail;

[13:13] <p6eval> rakudo e5a63d: OUTPUT«123_tail␤»

[13:14] <Matt-W> what's wrong is that in my IRC window it looks like you've got half pastes landing in the middle of your lines

[13:14] <finanalyst> rakudo: class Str is also { method tail () { $self ~ '_tail' } }; my $a = '123'; say $a.tail;

[13:14] <p6eval> rakudo e5a63d: OUTPUT«Symbol '$self' not predeclared in tail (/tmp/hkaLVN6HMt:2)␤in Main (src/gen_setting.pm:3366)␤»

[13:14] <Matt-W> and you're defining a method that's not the same as the one you're calling

[13:15] <finanalyst> 1st 2 tries were hamfisted, but third seemed to be ok

[13:15] <moritz_> there's no $self

[13:15] <moritz_> it's just self (without sigil)

[13:15] <finanalyst> just seen that self without sigil works

[13:16] <Matt-W> $self only works if you put it in explicitly

[13:16] <Matt-W> as in method tail($self:)

[13:16] <Matt-W> but I see little reason for that when you've always got self

[13:16] <finanalyst> thanx

[13:16] <Matt-W> I just keep calling it this, because I write C++ for a living

[13:18] *** Khisanth joined
[13:20] *** Khisanth left
[13:24] <[particle]> jimmy?

[13:24] <[particle]> the spaces in the specs for "Perl 6" are non-breaking for a reason.

[13:25] <[particle]> oh, looks like moritz replyed...

[13:26] <moritz_> [particle]: he's called JimmyZ in here, I think

[13:29] <JimmyZ> It's br0ke here

[13:31] <moritz_> what is broken, and in what way?

[13:32] <JimmyZ> It's displayed as traditional Chinese

[13:32] <JimmyZ> Is there any reason to use \xC2A0

[13:32] <JimmyZ> Is there any reason to use \xC2A0?

[13:33] <moritz_> yes, I explained that on p6l

[13:33] <[particle]> non-breaking space

[13:33] <moritz_> "Perl 6" and "Perl 5" are words

[13:33] <moritz_> so we don't want to break between the l and the digit

[13:33] <[particle]> so it doesn't ever render as Perl\n6

[13:33] <moritz_> if your editor displays it incorrectly, you have to set the character encoding to UTF-8

[13:34] <moritz_> but changing the spec because your local setup is broken is not an option.

[13:34] <moritz_> we need non-ASCII characters in the specs anyway

[13:34] <JimmyZ> I see

[13:34] <JimmyZ> sorry for that :(

[13:34] <moritz_> just revert that commit

[13:35] <moritz_> then all is fine again

[13:35] <[particle]> indeed

[13:35] *** explorer joined
[13:36] * ancients is away (4[O.F.F.L.I.N.E])

[13:36] <Matt-W> again?

[13:36] *** Khisanth joined
[13:37] *** ancients was kicked by moritz_ (color spamming))
[13:46] *** hanekomu joined
[13:46] *** nihiliad joined
[13:48] *** explorer left
[13:49] *** lisppaste3 left
[13:50] *** lisppaste3 joined
[13:53] *** hanekomu_ left
[14:06] * diakopter wonders for what O.F.F.L.I.N. stands

[14:06] <moritz_> diakopter: there's an E at the end

[14:07] <moritz_> maybe the color code prevented you from seeing it

[14:07] <moritz_> (they also confuse my IRC logging bot a bit)

[14:12] *** payload joined
[14:17] <diakopter> I did see the E

[14:18] *** finanalyst left
[14:24] *** IronMan joined
[14:24] <IronMan> Hi - I needed some help with XML parsing/subStr() method

[14:24] <IronMan> how to extract the value of "cur" from this XML format.. (the value can be of any number of digits)

[14:24] <IronMan> <BRS id="5" lWM="0" hWM="0" cur="0" int="0.0" sT="1249563008081" lST="1249606773948" lB="0" uB="0">

[14:27] <moritz_> IronMan: do you want to do it in Perl 6?

[14:28] <IronMan> Hi moritz_ I'm on v5.10.0

[14:28] <moritz_> IronMan: then you're wrong here

[14:29] <IronMan> Ok

[14:30] *** IronMan left
[14:30] <pugs_svn> r27893 | jimmy++ | [Spec]reverted \x20 to \xC2A0. "PerlÂ 6" and "PerlÂ 5" are words, so we don't want to break between the l and the digit, and it doesn't ever render as Perl\n6. [particle]++ and moritz_++ for explanation.

[14:31] *** Khisanth left
[14:35] *** Khisanth joined
[14:36] *** windsok joined
[14:37] *** windsok left
[14:37] *** mikehh joined
[14:39] <JimmyZ> p6l?

[14:39] <moritz_> perl6-language mailing list

[14:40] <JimmyZ> thanks.

[14:41] *** rfordinal joined
[14:44] *** Khisanth left
[14:46] *** mofino joined
[14:48] *** Psyche^ joined
[14:51] <pugs_svn> r27894 | moritz++ | [t/spec] fix a smartlink in class.t

[14:55] *** alester joined
[15:01] *** jan_ left
[15:01] *** rfordinal left
[15:05] *** Patterner left
[15:05] *** Psyche^ is now known as Patterner

[15:20] *** donaldh left
[15:20] *** donaldh joined
[15:35] *** hanekomu_ joined
[15:36] <wayland76> lambdabot: @tell ancients Some people seem to be getting quite annoyed at your IRC client.  Specifically, they don't like the colour-coding escape sequences it sends to the channel, and the way it continually announces you're offline.  

[15:36] <lambdabot> Consider it noted.

[15:37] <wayland76> lambdabot: @tell ancients I don't mind myself, but it seems quite a number of the regulars are getting annoyed

[15:37] <lambdabot> Consider it noted.

[15:37] <wayland76> After all, if we only comment on it when he goes offline, then he'll never see it

[15:37] <Su-Shee> wayland76: he's doing it in other channels too and has been kicked out of #perl the same time as here today. 

[15:38] <BinGOs> jiggedy

[15:38] <wayland76> Anyway, bedtime for me.  'Night all

[15:39] <wayland76> (not to be confused with rig-a-jig jig)

[15:41] *** ruoso left
[15:41] *** __ash__ joined
[15:52] *** jan_ joined
[15:53] *** mberends joined
[15:56] *** hanekomu left
[15:56] *** hercynium joined
[16:00] <mberends> good afternoon, #perl6*! There must have been a prize draw that I did not know about, because I just had a "workout with jnthn++" on the flight from Lisbon to London. Some heavy lifting, but not physically.

[16:03] *** JimmyZ left
[16:04] *** cdarroch joined
[16:09] *** KyleHa joined
[16:11] *** kane_ joined
[16:12] *** frederico joined
[16:14] *** hanekomu joined
[16:16] *** hanekomu left
[16:18] *** PZt left
[16:19] *** eiro left
[16:20] *** beggars joined
[16:23] *** fredrecsky joined
[16:24] *** frederico left
[16:25] *** rfordinal joined
[16:31] *** kane_ left
[16:33] *** hanekomu_ left
[16:41] *** fredrecsky left
[16:41] *** kane_ joined
[16:41] *** fredrecsky joined
[16:41] *** KyleHa left
[16:41] *** rindolf joined
[16:41] <rindolf> Hi all.

[16:42] <Su-Shee> hi. ;)

[16:42] <rindolf> Su-Shee: what's up?

[16:43] <Su-Shee> rindolf: food now. :)

[16:43] <rindolf> Su-Shee: f00d!!!

[16:48] *** molaf left
[16:50] <pugs_svn> r27895 | masak++ | [t/spec/S32-str] re-fudged encode.t after Rakudo patch

[16:52] <mberends> masak++ indeed

[16:54] *** explorer joined
[17:03] <hah> mhh..  'return\n  unless $foo;' is still allowed? => "Could not find non-existent sub unless"

[17:03] *** hanekomu joined
[17:04] <hah> without the newline it works as expected ;-)

[17:07] <mberends> hah: interesting, just tried it here too. various kinds of whitespace matter, it seems

[17:08] *** rfordinal3643 joined
[17:08] *** rfordinal left
[17:08] <mberends> it's probably in the same category as semicolon required after closing curly only if followed by more on the same line

[17:09] <mberends> @seen DanielC

[17:09] <lambdabot> Last time I saw DanielC was when I left ##english, ##freebsd, ##hrg, ##logic, #arch-haskell, #concatenative, #darcs, #dreamlinux-es, #friendly-coders, #functionaljava, #gentoo-haskell, #gentoo-uy, #

[17:09] <lambdabot> ghc, #haskell, #haskell-blah, #haskell-books, #haskell-freebsd, #haskell-in-depth, #haskell-overflow, #haskell-soc, #haskell.cz, #haskell.de, #haskell.dut, #haskell.es, #haskell.fi, #haskell.fr, #

[17:09] <lambdabot> haskell.hr, #haskell.it, #haskell.jp, #haskell.no, #haskell.ru, #haskell.se, #haskell_ru, #jhc, #jtiger, #macosx, #macosxdev, #novalang, #perl6, #rosettacode, #scala, #scannedinavian, #unicycling, #

[17:09] <lambdabot> xmonad and #yi 2m 8d 12h 18m 19s ago.

[17:09] <mberends> perspicacious bot

[17:11] *** tann_ joined
[17:12] *** takadonet left
[17:12] *** bionoid left
[17:12] *** PerlJam left
[17:12] *** elmex left
[17:12] *** adhoc left
[17:12] *** PerlJam joined
[17:12] *** takadonet joined
[17:12] *** bionoid joined
[17:12] *** adhoc joined
[17:12] *** elmex joined
[17:12] *** irc.freenode.net sets mode: +o PerlJam

[17:14] *** tann__ joined
[17:15] *** iblechbot joined
[17:17] <Su-Shee> wow. ;))

[17:17] <mberends> how wow?

[17:17] <Su-Shee> the bot I meant. :)

[17:18] <mberends> smart-ass if you ask me ;-)

[17:18] <Su-Shee> besides from the daily perl 6 awe I'm not wowing out loud here. :)

[17:19] <mberends> Su-Shee, YAPC in Lisbon was awesome. You really should try to attend the next one in Pisa.

[17:20] *** hercynium left
[17:20] <Su-Shee> mberends: I so very much wanted to but due to "the crisis[tm]" my clients didn't really pay in time. (or not at all..) :/

[17:20] <Su-Shee> oh, pisa, nice. :)

[17:21] <mberends> Su-Shee, I share such pain. The week away was pain relief, now it's back to the stresses of survival in hard times.

[17:23] <mberends> it's possible to do it on a low budget (hostels etc) so the most crucial thing is to manage taking the time off. The reward is really big though :)

[17:23] <Su-Shee> mberends: I start a new perl job next week which is employed with a nice salary and I so will go to the next yapc...

[17:23] <Su-Shee> (and the desktop summit which also had an extremely nice program I missed entirely)

[17:24] <mberends> Su-Shee: did you make any headway with Parrot to GUI bindings?

[17:26] <Su-Shee> mberends: nothing to show, but gathered a load of knowledge about X and GUI and a little NCI

[17:28] <mberends> Su-Shee: if you make any running examples, will you put them into the Pugs repository?

[17:30] <mberends> For my part, I returned from Lisbon with two Parrot issues that were blocking me exposed, and workarounds to allow me to continue anyway :-)

[17:30] <Su-Shee> mberends: sure, and into my github.

[17:30] <Su-Shee> mberends: you have seen tene's enlightenment window example?

[17:30] *** tann_ left
[17:31] <Tene> mberends: what do you want to know about gui bindings?  I got bindings to the Enlightenment libraries working.

[17:32] <mberends> Su-Shee, I did, and ... here comes Tene

[17:32] <Tene> I'm leaving shortly, but here for now.

[17:32] <Su-Shee> :)

[17:34] <mberends> Tene: hi, yes the Enlightenment example looked good, but istr that you did not want to publish the source just yet. Also, other immediately asked about binding other GUI libraries. I guess you had a reason for targeting Enlightenment.

[17:34] <mberends> *others

[17:35] <Tene> I targeted Enlightenment because it's fun and looks prettier than GTK IMO.

[17:35] *** charsbar left
[17:35] <Tene> That's all.

[17:35] <Tene> It's up on github, though, if you want to try it.

[17:35] <Tene> Or, I'd be glad to help anyone else get any other library wrapped with NCI.

[17:35] *** charsbar joined
[17:36] <mberends> Tene: thanks, I'll try it. URL?

[17:37] *** nihiliad left
[17:37] <Tene> http://github.com/tene/parrot-elementary/tree/master

[17:37] <Tene> Let me know if it works for you. :)

[17:37] * mberends git clones...

[17:39] <mberends> Tene: your "self portrait" looked great in masak++'s presentation :)

[17:39] <Tene> Heh. :)

[17:39] <Tene> It's not too far off.

[17:41] <mberends> that figures :)

[17:44] *** sparc_ left
[17:48] <Tene> mberends: I don't actually remember if I committed the NCI sigs for the Elementary functions to Parrot.

[17:48] <Tene> mberends: so if you get something weird about "couldn't compile NCI sig" or something, tell me.

[17:48] <mberends> Tene: on Ubuntu 9.04 here package 'evas' is missing, presumably part of Enlightenment.

[17:49] <Tene> mberends: yes, that's the big issue with using enlightenment libraries.  No distro actually ships them, and they're incomplete/unfinished.

[17:49] <__ash__> is there a working version of the parrot/examples/nci/Mysql? or parrot/ect/SQLite3? 

[17:49] <Tene> __ash__: not yet.  there are several people planning on working on those soon, though.

[17:50] <mberends> Tene: so I guess I build E17 from source?

[17:50] <Tene> mberends: yes, you can use http://www.rasterman.com/files/get_e.sh to do that, or there are some third-party repositories that provide packages, iirc.

[17:51] <__ash__> Tene: okay, just wonder, I saw them, tried compiling them and running their tests from the directories they are in but they both failed those

[17:51] <Tene> __ash	yes, they've bitrotted heavily. :(

[17:51] <mberends> Tene: thanks, that's a great help. (almost typed tanks)

[17:51] <Tene> mberends: after you get the EFL stuff installed, you'll find out that Elementary isn't included in that, and you'll need to download that separately and install that. :)

[17:53] <mberends> Tene: it's worth it as long as the thing works in the end. (yak shaving)++

[17:55] *** rfordinal joined
[17:56] *** rfordinal3643 left
[17:57] * mberends watches evas check out from svn...

[18:13] <mberends> so, sh get_e.sh says "pushd: not found" :/    bash strikes again! redoing...

[18:13] *** fredrecsky left
[18:16] *** Khisanth joined
[18:24] <pmichaud> good afternoon, #perl6

[18:25] <mofino> good day

[18:25] <moritz_> oh hai

[18:26] <japhb> pmichaud: On the fun side of the Atlantic yet?

[18:27] *** kimtaro joined
[18:27] <pmichaud> I've always found both sides of the Atlantic to be fun.  :-)

[18:28] <pmichaud> But yes, I've successfully hopped the pond.

[18:29] *** zamolxes joined
[18:29] <japhb> And when will you be falling over unconscious?  :-)

[18:29] <pmichaud> hopefully not before I board my next flight home :-)

[18:34] *** kimtaro left
[18:35] *** kane_ left
[19:04] *** kane_ joined
[19:10] <__ash__> is it supposed to be augment or is also ? to append onto an open class? 

[19:10] <moritz_> it's supposed to be 'augment'

[19:10] <moritz_> but it is not yet

[19:13] *** KyleHa joined
[19:14] *** sri_kraih joined
[19:15] <KyleHa> rakudo: my List $x = 1,2,3;say $x.WHAT;

[19:15] <p6eval> rakudo 7717c4: OUTPUT«Array()␤»

[19:18] *** mberends left
[19:19] *** Front_slash left
[19:20] *** donaldh left
[19:21] *** donaldh joined
[19:26] *** mberends joined
[19:30] *** KyleHa left
[19:39] *** zamolxes left
[19:44] <rindolf> rakudo: 5.WHAT

[19:44] <p6eval> rakudo 7717c4:  ( no output )

[19:44] <rindolf> rakudo: say 5.WHAT

[19:44] <p6eval> rakudo 7717c4: OUTPUT«Int()␤»

[19:44] <rindolf> rakudo: say 5.7WHAT

[19:44] <p6eval> rakudo 7717c4: OUTPUT«Syntax error at line 2, near "say 5.7WHA"␤in Main (src/gen_setting.pm:3366)␤»

[19:44] <rindolf> rakudo: say 5.7.WHAT

[19:44] <p6eval> rakudo 7717c4: OUTPUT«Num()␤»

[19:51] <rindolf> Do macros work in rakudo yet?

[19:53] <[particle]> no

[19:53] <rindolf> [particle]: I see.

[19:56] *** charsbar left
[19:56] *** charsbar joined
[19:57] *** Jedai joined
[20:00] *** nErVe joined
[20:00] *** hah left
[20:03] *** tann__ left
[20:06] *** ruoso joined
[20:08] *** arnsholt joined
[20:09] *** rfordinal left
[20:09] *** rfordinal joined
[20:26] *** jhelwig left
[20:26] *** buubot left
[20:28] *** buubot joined
[20:28] *** jhelwig joined
[20:28] *** rfordinal left
[20:31] *** jhelwig left
[20:31] *** buubot left
[20:33] *** takadonet left
[20:41] *** molaf joined
[20:41] *** ruoso left
[20:47] *** jhelwig joined
[20:48] *** buubot joined
[20:49] *** icwiener joined
[20:51] *** explorer is now known as Guest14794

[20:57] *** icwiener left
[20:59] *** icwiener joined
[21:00] *** zamolxes joined
[21:00] *** zamolxes left
[21:09] *** Su-Shee left
[21:23] <cxreg> rakudo: multi foo {}; multi foo {}; foo();

[21:23] <p6eval> rakudo 7717c4: OUTPUT«Ambiguous dispatch to multi 'foo'. Ambiguous candidates had signatures:␤:()␤:()␤in Main (/tmp/tsng3FETYP:2)␤»

[21:24] *** mikehh_ joined
[21:29] *** meppl left
[21:30] <__ash__> rakudo: class Base { method foo { '::foo' } }; class T is Base { method foo { 'T::foo'; self.Base::foo() } }; my T $a .= new; say $a.foo; 

[21:30] <p6eval> rakudo 7717c4: OUTPUT«Method 'Base::foo' not found for invocant of class 'T'␤»

[21:30] <__ash__> is there a work around for calling parent methods within a child? 

[21:30] <__ash__> (eg. super) 

[21:37] *** mberends_ joined
[21:39] *** mberends left
[21:40] *** mikehh left
[21:43] *** maja joined
[21:48] *** mikehh_ is now known as mikehh

[21:52] *** meppl joined
[21:54] *** maja_ left
[21:58] *** mberends_ left
[22:02] *** rfordinal joined
[22:07] <__ash__> so there isn't a way at the moment to call a super method if you override it? 

[22:12] *** alester left
[22:13] *** icwiener left
[22:19] *** Limbic_Region joined
[22:23] *** rindolf left
[22:42] *** __ash__ left
[22:42] <s1n> yay, when i get paid, i'll finally be able to get a netbook for the vanpool!

[22:42] *** KyleHa joined
[22:42] *** beggars left
[22:42] <s1n> that means i'll have time again to hack on rakudo

[22:43] *** nErVe left
[22:48] *** reppie joined
[22:55] *** molaf left
[22:56] *** SmokeMachine left
[22:58] *** cottoo joined
[22:58] *** cotto left
[22:59] *** cottoo is now known as cotto

[23:00] *** iblechbot left
[23:08] *** Patterner left
[23:12] *** Psyche^ joined
[23:12] *** cdarroch left
[23:12] *** Psyche^ is now known as Patterner

[23:13] *** hercynium joined
[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:24] *** jhelwig_ joined
[23:25] *** jhelwig left
[23:28] *** jhelwig_ is now known as jhelwig

[23:36] *** M_o_C left
[23:38] *** mberends joined
[23:42] <KyleHa> mberends: Is it true that you did an outstanding presentation on Perl 6 for the Perl 5 programmer?

[23:45] <mberends> KyleHa: it's great to get positive feedback: when rehearsing with masak++, it overran the timeslot by 10 minutes, so a few of the final slides were skipped. The overall response of the Perl 5 attendees at YAPC:EU towards Perl 6 was more positive than we had expected. So yes, it was very nice to have given the talk :-)

[23:45] <KyleHa> I heard also that it would make an appearance int he pugs repo.  Can you confirm or deny?

[23:46] <KyleHa> s/int he/in the/

[23:46] <mberends> KyleHa: confirm, it will be within 24 hours. Also, I'm encouraged to offer to repeat the presentation at other gatherings, for example London.pm

[23:47] <KyleHa> Hurray!  I'm looking forward to it!

[23:47] <mberends> :)

[23:48] <mberends> now the Perl workshops in Latvia and Italy are very tempting...

[23:49] *** Jedai left
[23:50] <KyleHa> I wouldn't mind going to Italy for a time, but I couldn't even make it to Pittsburgh in June, so I think Europe is even further away than the literal distance.

[23:52] <mberends> The same problem here, in the opposite direction. We can hope to do it eventually, as TimToady++ and pmichaud++ and several others do :)

[23:53] *** hanekomu left
