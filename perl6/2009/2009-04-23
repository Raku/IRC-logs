[00:04] *** sephee joined
[00:05] *** sephee left
[00:07] *** sephee joined
[00:27] *** DemoFreak left
[00:41] <skids> rakudo: my $i; for 3 xx 100 { .print; die("limit") if $i++ > 9 }

[00:41] <p6eval> rakudo 5c1952: OUTPUT«3Use of uninitialized value␤3333333333limit␤current instr.: 'die' pc 17498 (src/builtins/control.pir:225)␤»

[00:42] <skids> rakudo: my $i = 1; for 3 xx 100 { .print; die("limit") if $i++ > 9 }

[00:42] <p6eval> rakudo 5c1952: OUTPUT«3333333333limit␤current instr.: 'die' pc 17498 (src/builtins/control.pir:225)␤»

[00:42] <skids> rakudo: my $i = 1; for 3 xx * { .print; die("limit") if $i++ > 9 }

[00:42] <p6eval> rakudo 5c1952: OUTPUT«Use of uninitialized value␤»

[00:42] <skids> rakudo: my $i = 1; for 3 xx Inf { .print; die("limit") if $i++ > 9 }

[00:42] <p6eval> rakudo 5c1952:  ( no output )

[00:47] *** davidad joined
[00:48] <skids> rakudo: my $i = 1; for 3..3:by(0) { .print; die("limit") if $i++ > 9 }

[00:48] <p6eval> rakudo 5c1952: OUTPUT«Statement not terminated properly at line 1, near ":by(0) { ."␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[00:50] *** frew|wor1 left
[01:02] *** sri_kraih_ joined
[01:04] *** ispy_ joined
[01:10] *** abra left
[01:11] *** cdarroch left
[01:12] *** wknight8111 left
[01:14] *** sitaram joined
[01:16] <rewt> xx?

[01:17] *** sri_kraih left
[01:20] *** japhb left
[01:23] <skids> rewt: list repetition operator

[01:43] *** ispy_ left
[02:10] *** ispy_ joined
[02:12] *** ispy_ left
[02:22] *** ispy_ joined
[02:26] *** agentzh left
[02:33] *** agentzh joined
[02:33] *** cspencer left
[02:43] *** ispy_ left
[02:53] *** japhb joined
[02:55] *** eternaleye joined
[03:01] *** ispy_ joined
[03:20] *** ispy_1 joined
[03:20] *** ispy_ left
[03:38] *** orafu left
[03:38] *** orafu joined
[03:44] *** Limbic_Region left
[03:44] *** skids left
[03:46] *** ispy_1 left
[03:51] *** cspencer joined
[03:57] *** alanhaggai joined
[04:01] *** meppl joined
[04:02] *** jedai joined
[04:07] *** alester joined
[04:09] <mikehh> rakudo (5c19526) builds on parrot r38277 - make test/make spectest PASS - Kubuntu Intrepid Amd64

[04:19] *** amoc joined
[04:44] *** amoc left
[04:48] *** eternaleye left
[04:50] *** eternaleye joined
[05:13] *** frew|wor2 left
[05:22] <pmichaud> Release has been cut... okay to start committing and bumping PARROT_REVISION again.

[05:22] *** alanhaggai_ joined
[05:22] *** alanhaggai left
[05:23] *** alanhaggai_ is now known as alanhaggai

[05:40] <eternaleye> Hey, which one of you all is Mark Lentczner?

[05:41] <eternaleye> About the periodic table of operators: The noble metaop Xop is marked as :diffy, but STD permits [X~]. I understand the reasoning for it being dissallowed in op=, so should :diffy be split into two adverbial tags?

[05:42] <eternaleye> std: say [X~] ( [1,2,3], [4,5,6], [7,8,9] )

[05:42] <p6eval> std 26367: OUTPUT«ok 00:03 38m␤»

[05:42] <eternaleye> pugs: say [X~] ( [1,2,3], [4,5,6], [7,8,9] )

[05:42] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "["␤    expecting bare or pointy block construct, ":", identifier or operator␤    at /tmp/iqZaP6n3uY line 1, column 5␤»

[05:42] <wayland76> rakudo:  say [X~] ( [1,2,3], [4,5,6], [7,8,9] )

[05:42] <p6eval> rakudo ddb64e: OUTPUT«Statement not terminated properly at line 1, near "~] ( [1,2,"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[05:42] <eternaleye> Rakudo parsed (and ran) it some months ago, but not anymore

[05:43] <eternaleye> Ooh, that gives me an idea

[05:43] <eternaleye> Does SVN do bisect?

[05:43] <eternaleye> (It was before leaving the nest that it worked)

[05:44] <wayland76> rakudo:  say [X~] ( [1,2,3], [4,5,6], [7,8,9] );

[05:44] <p6eval> rakudo ddb64e: OUTPUT«Statement not terminated properly at line 1, near "~] ( [1,2,"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[05:44] <wayland76> rakudo:  say X~ ( [1,2,3], [4,5,6], [7,8,9] );

[05:44] <p6eval> rakudo ddb64e: OUTPUT«Could not find non-existent sub X␤current instr.: '_block14' pc 53 (EVAL_16:37)␤»

[05:44] <wayland76> rakudo:  say [~] ( [1,2,3], [4,5,6], [7,8,9] );

[05:44] <p6eval> rakudo ddb64e: OUTPUT«1 2 34 5 67 8 9␤»

[05:45] <eternaleye> Hm, svn--

[05:45] <eternaleye> Well, there's always a manual binary search

[05:48] *** kimtaro joined
[05:57] <eternaleye> Hm, seems [X] worked as recently as september, at least ( moritz++ #[ irclog.perlgeek.de ] )

[05:57] <eternaleye> rakudo: say [X] ( [1,2,3], [4,5,6], [7,8,9] )

[05:57] <p6eval> rakudo ddb64e: OUTPUT«Statement not terminated properly at line 1, near "( [1,2,3],"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[06:00] *** Kisu left
[06:03] *** azawawi joined
[06:10] <eternaleye> Oh wait. eternaleye-- # Braino. When I used [X] N months ago, it was with p6eval's pugs evaluator, not rakudo.

[06:13] *** alanhaggai_ joined
[06:17] *** alanhaggai left
[06:17] *** alanhaggai_ is now known as alanhaggai

[06:21] *** cspencer left
[06:23] <wayland76> ah, that would do it :)

[06:32] <azawawi> hi

[06:33] <azawawi> any blog posts on NPW '09 hackathon?

[06:45] *** ejs joined
[06:48] *** fridim_ joined
[06:48] <arnsholt> What's the difference between <something> and <.something> (in regexes)?

[06:49] <moritz_> eternaleye: I think the spec has beeen changed recently

[06:49] <moritz_> arnsholt: <.something> doesn't capture in $<something>

[06:49] <moritz_> just like the difference between (...) and (?:...) in Perl 5

[06:49] *** eternaleye left
[06:51] <arnsholt> Not at all what I was wondering if it could be. Ta muchly

[06:51] *** eternaleye joined
[06:53] *** iblechbot joined
[06:56] *** rblasch joined
[07:15] <arnsholt> Hmm.

[07:16] <arnsholt> rakudo: grammar G { rule a { foo } }; if "foo" ~~ /<G::a>/ {say "OK"}

[07:16] <p6eval> rakudo ddb64e: OUTPUT«OK␤»

[07:16] <arnsholt> That works. But if I wrap it in a class:

[07:16] <arnsholt> rakudo: class A { grammar G { rule a { foo } }; method b { if "foo" ~~ /<G::a>/ {say "OK"} } }; (my A $x .= new).b;

[07:16] <p6eval> rakudo ddb64e: OUTPUT«Null PMC access in get_string()␤current instr.: 'parrot;PGE;Match;new' pc 196 (compilers/pge/PGE/Match.pir:130)␤»

[07:16] <arnsholt> It errors out. Is that supposed to happen?

[07:18] <moritz_> arnsholt: surely not like this, a "Null PMC access" is always a bug (or not-yet-implemented) in Rakudo

[07:18] <moritz_> arnsholt: care to open a ticket?

[07:18] <arnsholt> Will do

[07:20] <arnsholt> Huh. Looks like it's some kind of weirdness attached with it happening in a method call

[07:22] <moritz_> maybe we have a ticket for that already...

[07:24] <moritz_> bah, rt.perl.org is down :/

[07:24] <moritz_> feel free to submit anway, we can merge the tickets later on if we find that they're duplicates

[07:26] <arnsholt> Actually, I just found something

[07:26] <arnsholt> rakudo: class A { grammar G { rule a { foo } }; method b { if "foo" ~~ /<A::G::a>/ { say "OK" } } }; (my A $x .= new).b

[07:26] <p6eval> rakudo ddb64e: OUTPUT«OK␤»

[07:27] <arnsholt> Looks like the path to the rule has to be given the full path

[07:27] <moritz_> hm

[07:27] <moritz_> don't know how it's supposed to be

[07:27] <moritz_> it's the same in Perl 5

[07:27] <moritz_> but then Perl 5 doesn't nest packages, notionally

[07:29] *** azawawi left
[07:29] <arnsholt> I think it might be related to something that puzzled me with the interactive interpreter: grammars seem to be retained between lines, so that I get a type redeclaration error if I use the same grammar name in two consecutive lines

[07:29] <arnsholt> And look at this:

[07:29] <arnsholt> rakudo: class A { grammar B { rule a { foo } } }; class Q { grammar B { rule a { bar } } };

[07:29] <p6eval> rakudo ddb64e: OUTPUT«Re-declaration of type B at line 1, near "};"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[07:30] *** [particle]1 left
[07:30] <arnsholt> Looks like grammars are stored differently from classes (and without all the namespace info)

[07:30] *** [particle]1 joined
[07:31] <moritz_> I'm pretty sure that's a  bug

[07:31] <moritz_> (and a new one)

[07:31] <arnsholt> Righties. In that case I'll submit it

[07:36] <arnsholt> And, with even more testing, it looks like it's a problem with classes as well.

[07:36] <arnsholt> rakudo: class A { class B {} }; class C { class B {} }

[07:37] <p6eval> rakudo ddb64e: OUTPUT«Re-declaration of type B at line 1, near "}"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[07:38] *** kane_ joined
[07:38] <eternaleye> arnsholt: Multi declarations are retained between lines too, so if you do a one-liner defining and using a multi, and then repeat it, you get an ambiguous dispatch error since they have the same signature.

[07:39] <arnsholt> eternaleye: Yeah, I was getting to that. 'Cept I noticed it with grammars being retained, so giving the grammar again in the next line would give me a redefinition error

[07:41] *** DemoFreak joined
[07:48] <arnsholt> moritz_: rt.perl.org is back. And it looks like rakudobug@ has gotten some spam

[07:48] <moritz_> arnsholt: yes, but I don't have privs to delete tickets

[07:49] <moritz_> and I don't want to reject them, because that generates reply mails (and thus more spam, potentially)

[07:50] *** clkao left
[07:50] *** hcchien_ joined
[07:50] *** hcchien left
[07:52] *** clkao joined
[07:58] *** aff joined
[07:59] *** clkao left
[08:00] *** hcchien_ left
[08:00] *** clkao joined
[08:01] *** kimtaro_ joined
[08:02] *** masak joined
[08:03] <masak> greetings, autothreading camels.

[08:03] *** hcchien joined
[08:05] *** pmichaud joined
[08:05] *** rewt joined
[08:05] *** Helios joined
[08:05] *** ingy joined
[08:05] *** lucs joined
[08:05] *** allbery_b joined
[08:05] *** frobnitz joined
[08:05] *** irc.freenode.net sets mode: +o pmichaud

[08:08] * frettled tests again on behalf of wayland76:

[08:08] <frettled> masak: label: for 1..2 { 1; }

[08:09] <masak> frettled: looks legit to me.

[08:09] *** amoc joined
[08:09] <masak> but I'd suggest asking std.

[08:09] <masak> std: label: for 1..2 { 1; }

[08:09] <p6eval> std 26367: OUTPUT«ok 00:02 35m␤»

[08:09] <frettled> oh, he did, but he wanted to know what the masak compiler said.

[08:09] <masak> I wouldn't trust the masak compiler if I were you.

[08:10] <masak> it's been known to be unreliable.

[08:10] <frettled> SEP :)

[08:10] <masak> if you think Rakudo and STD has been changing around a lot...

[08:13] *** xinming joined
[08:13] *** orafu left
[08:13] *** orafu joined
[08:18] *** kimtaro left
[08:22] *** zamolxes joined
[08:22] *** b_jonas joined
[08:55] <masak> s/has/have/ # grammar fail

[08:56] *** rblasch left
[08:58] <Matt-W> Morning

[08:58] <masak> Matt-W: a fine one at that, sir.

[09:00] <Matt-W> indeed

[09:00] <Matt-W> my last day at work before I go on holiday

[09:00] <Matt-W> I'll be taking my laptop, but probably won't get any Perl 6 done

[09:00] <masak> awww.

[09:00] <frettled> masak: well, it could have been:  if you (think Rakudo) and (STD has been ...)

[09:01] <masak> frettled++

[09:01] <masak> frettled: I should carry you around in a handbag, ready to create such reasons after-the-fact for me.

[09:05] <jnthn> pmichaud++ # release :-)

[09:07] <masak> pmichaud++

[09:07] <frettled> masak: it would have to be a handbag with wheels and an internet connection

[09:07] <jnthn> I quite like the choice of PM group too. ;-)

[09:07] <Matt-W> masak: Well I won't have an internet connection... so I won't be able to come asking for help when it breaks

[09:07] <masak> frettled: that could be arranged.

[09:07] <Matt-W> I'm more likely to write

[09:08] <masak> Matt-W: isolation can be a good thing for coding.

[09:08] <frettled> pmichaud++ 

[09:08] *** bacek_ left
[09:08] <frettled> (I definitively think we need more pmichauds)

[09:09] <Matt-W> masak: not when you need bugfixes to the compiler :)

[09:09] <Matt-W> I'll have to get a local copy of the spec and just do what I can

[09:09] <masak> aye.

[09:10] * b_jonas reads "I'll be taking my laptop, but probably won't get Perl 6 done"

[09:10] <masak> b_jonas: that's because he won't be gone till Christmas. :)

[09:10] <b_jonas> masak: lol, yes

[09:10] <masak> Matt-W: you'll be back before Christmas, won't you?

[09:11] <jnthn> .oO( yeah, but which one? ) ;-)

[09:11] <b_jonas> generalized Christmas is just five weeks away

[09:13] <Matt-W> yes I'll be back on tuesday

[09:13] <Matt-W> which is definitely before christmas

[09:13] <Matt-W> unless jnthn isn't telling us something

[09:14] <b_jonas> I count the week between the first and second weeks of exam term as christmas

[09:14] <b_jonas> only there's no such week in the spring, the first and second weeks of exams are adjacent

[09:15] <Matt-W> Aaah exams

[09:15] <Matt-W> I remember those

[09:16] <b_jonas> remember in this way http://xkcd.com/557/

[09:16] <Matt-W> Don't have to take ten all in a row anymore :)

[09:16] <b_jonas> or as something _others_ have

[09:16] <b_jonas> I never had to take ten all in a row

[09:16] <Matt-W> ooooh I have those dreams

[09:16] <b_jonas> I'm not in such a stupid university where people take exams for the sake of taking exams

[09:16] <Matt-W> usually when I have an exam coming up

[09:16] <frettled> I haven't had those dreams in years.

[09:17] <Matt-W> end of sixth form I had... twelve exams in two weeks, I think it was

[09:17] <Matt-W> that was fun...

[09:17] <b_jonas> in fact I hardly have exams now

[09:18] <Matt-W> I do them one at a time these days

[09:18] <b_jonas> but the six exam _weeks_ still are there

[09:18] <Matt-W> so you get to sit back and enjoy the discomfort of the people taking more exam-heavy subjects?

[09:19] <b_jonas> being a graduate student I also enjoy taking exams that I know I wouldn't have liked to take as an undergraduate

[09:19] <b_jonas> it's a really great feeling

[09:19] <b_jonas> I don't take thigs so seriously anymore

[09:19] <b_jonas> because it's not my degree on stake

[09:19] <Matt-W> :)

[09:19] <Matt-W> Yes, I found my perception of the world changed when I was a graduate student

[09:20] <Matt-W> Lots of things didn't seem anywhere near as vital anymore

[09:21] <b_jonas> well I have to admit I've also started to change in the last few years of being an undergraduate, I just decided to worry less about exams and homework and stuff and don't stress about failing stuff, and then I just worried less;

[09:21] <b_jonas> but now it's even better and I know being a graduate student causes it

[09:21] <b_jonas> (there are also downsides though)

[09:22] *** sitaram left
[09:30] <Matt-W> always downsides :(

[09:36] *** alanhaggai left
[09:36] *** alanhaggai joined
[09:38] *** NoirSoldats left
[09:49] *** mikehh left
[09:50] *** rblasch joined
[09:57] *** orafu left
[10:01] *** mjk joined
[10:02] *** orafu joined
[10:03] *** orafu left
[10:20] *** wollmers joined
[10:20] <arnsholt> When's a good time to talk to pmichaud?

[10:22] *** mhsparks joined
[10:26] *** ispy_ joined
[10:41] *** ispy_ left
[10:44] *** sephee left
[10:55] *** jferrero joined
[11:00] <mjk> why perl6 isn't execute? cygwin

[11:04] *** payload left
[11:05] <b_jonas> yes

[11:06] *** araujo left
[11:10] *** azawawi joined
[11:10] <azawawi> good evening...

[11:10] <arnsholt> Afternoon.

[11:10] <frettled> time()

[11:13] *** ispy_ joined
[11:13] *** mjk left
[11:14] <wayland76> arnsholt: pmichaud often shows up within the next hour or two, but I suspect he might've had a late night or something

[11:15] <wayland76> @seen pmichaud

[11:15] <lambdabot> pmichaud is in #perl6. I don't know when pmichaud last spoke.

[11:15] <arnsholt> wayland76: Cheers. I've poked around a bit in the regex stuff, and should probably have a word with him

[11:16] <wayland76> I saw him at 15:22, and the clock that said that now says 21:15

[11:17] <arnsholt> Thanks.

[11:18] <azawawi> where i can find talks/blog posts about what happened in hackathon NPW '09?

[11:19] <arnsholt> Well there's the official announcment of Iron Man blogging contest, which was announced during a lightning talk at NPW

[11:19] <arnsholt> I don't know of anything else though. Check the blogs of the speakers perhaps?

[11:19] <azawawi> arnsholt: thanks

[11:22] <wayland76> I don't know about elsewhere, but in Australia, the Iron Man competition is a triathlon that involves swimming through the surf

[11:22] <arnsholt> Yeah. It's an endurance blogging contest. Hence the name =)

[11:22] *** davidad left
[11:23] <wayland76> But we can go one better.  George Bush declared our (ex) Prime Minister "The Man of Steel" :)

[11:25] *** payload joined
[11:26] *** aff left
[11:29] *** b_jonas left
[11:29] <frettled> azawawi: try also http://www.perlworkshop.no/npw2009/

[11:30] <frettled> azawawi: I'm not sure how many of the talks have their presentations up yet.

[11:31] <azawawi> frettled: i have already been there. I have not found any talk slides/multimedia so far. Thanks :)

[11:32] <jnthn> I didn't get around to putting mine up yet...will do soonish

[11:32] <wayland76> azawawi: The IRC logs also contain info on this topic :)

[11:32] <frettled> wayland76: ehvil

[11:34] <wayland76> Well, it's true.  Most of the stuff I know about NPW came from there.  

[11:35] <azawawi> wayland76: yeah but it is strange that no one blogged about it until now

[11:36] <azawawi> wayland76: what happened there... what they did... etc

[11:36] <frettled> azawawi: http://www.perlworkshop.no/npw2009/talk/1732 - there's a link to the slides for that talk, at least.

[11:38] <azawawi> frettled: thanks. Now that's cool :)

[11:40] <frettled> azawawi: all talks are still in the schedule (http://www.perlworkshop.no/npw2009/schedule), but far from all talks have their slides on the web.  I'm not going to point fingers at anyone, since I don't know who to blame. :)

[11:43] <frettled> Hmm.  talkhub.org is not registered, perhaps I should create a web page for uploading talks on various technical topics.

[11:43] <frettled> But that sounds like _work_.

[11:48] *** nbrown04 joined
[11:48] *** nbrown04 left
[11:51] *** jedai left
[11:52] *** alester left
[11:55] <wayland76> Was cruising an APL group, and found this: http://www.craigmurphy.com/blog/?p=1417#comment-66863

[11:56] <wayland76> Oops... http://www.craigmurphy.com/blog/?p=1417

[11:56] <wayland76> Does anyone want to try to beat the APL solution for brevity? :)

[11:56] <gfldex> is IO::Socket::recv() buffered?

[11:57] <wayland76> According to the P6 Spec, no

[11:58] <wayland76> S32 IO.pod -- IO::Readable

[12:07] <gfldex> seams not to be implemented

[12:09] <wayland76> Quite possibly

[12:09] <wayland76> I'm under the impression that Socket stuff is only partly implemented

[12:09] <wayland76> bacek will know if he's around

[12:10] <masak> wayland76: perl6 -e 'my $n=@*ARGS[0];for "A"..$n,("A"..^$n).reverse {say " "x(ord($n)-ord($_)),$_," "x (2*(ord($_)-65)-1),($_ eq "A"??""!!$_)}' E

[12:10] <masak> that works.

[12:10] <masak> let the golfing begin.

[12:11] <masak> wayland76: mberends++ and I implemented the sockets stuff. I'm sure there are things missing. but the kopipasta.pl script in Web.pm uses them for building a webapp, so _something_ works.

[12:12] <bacek> I'm not around but it's buffered

[12:12] <masak> turns out I could remove a lot of spaces.

[12:12] <masak> perl6 -e 'my$n=@*ARGS[0];for"A"..$n,("A"..^$n).reverse {say " "x(ord($n)-ord($_)),$_," "x(2*(ord($_)-65)-1),($_ eq"A"??""!!$_)}' E

[12:13] <wollmers> rakudo: say "c\[LINE FEED]".ord;

[12:14] <p6eval> rakudo 3a5f61: OUTPUT«99␤»

[12:14] <bacek> masak: my $o=&ord;

[12:14] <masak> wollmers: \c

[12:14] <masak> bacek: thanks.

[12:14] <wollmers>  rakudo: say "\c[LINE FEED]".ord;

[12:14] <p6eval> rakudo 3a5f61: OUTPUT«perl6regex parse error: Unrecognized character name LINE FEED at offset 8, found 'L'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10792 (compilers/pge/PGE/Perl6Regex.pir:1367)␤»

[12:14] <wollmers>  rakudo: say "\c[LINE FEED (LF)]".ord;

[12:14] <p6eval> rakudo 3a5f61: OUTPUT«10␤»

[12:16] *** alanhaggai left
[12:16] <masak> bacek: I didn't manage to make it shorter with 'my&o=&ord;'.

[12:17] <moritz_> rakudo: my &o := &ord; say o('a')

[12:17] <p6eval> rakudo 3a5f61: OUTPUT«97␤»

[12:17] <moritz_> rakudo: my &o = &ord; say o('a')

[12:17] <p6eval> rakudo 3a5f61: OUTPUT«97␤»

[12:18] <bacek> rakudo: my&o=&ord;say o('a')

[12:18] <p6eval> rakudo 3a5f61: OUTPUT«97␤»

[12:19] <bacek> no way. It's longer

[12:19] <masak> still much longer than the APL solution...

[12:19] *** ejs1 joined
[12:20] <moritz_> the need to declare variables is, of course, a real killer for golfing

[12:22] <moritz_> perl6  -e 'my$n=@*ARGS[0];for"A"..$n,("A"..^$n).reverse {say " "x(ord($n)-ord($_)),$_," "x 2*ord($_)-131,($_ eq"A"??""!!$_)}' E

[12:22] <moritz_> a bit shorter

[12:22] <moritz_> the parenthesis aroudn the ternary aren't required either

[12:22] <masak> nice.

[12:22] <masak> getting somewhere.

[12:23] <moritz_> and '$n.ord ' is shorter than ord($n)

[12:23] <moritz_> ord($_) is .ord

[12:23] <masak> right.

[12:23] <moritz_> perl6  -e 'my$n=@*ARGS[0];for"A"..$n,("A"..^$n).reverse {say " "x($n.ord-.ord),$_," "x 2*.ord-131,$_ eq"A"??""!!$_}' E

[12:24] *** payload left
[12:24] *** kimtaro_ left
[12:25] <moritz_> perl6  -e 'my$n=@*ARGS[0];@_="A"..$n;for@_,@_.reverse {say " "x($n.ord-.ord),$_," "x 2*.ord-131,$_ eq"A"??""!!$_}' E

[12:25] <moritz_> not shorter

[12:26] <bacek> rakudo: my $x=ord('C')-ord('A'); say sprintf('%10s', 'C')

[12:26] <moritz_> and wrong :/

[12:26] <p6eval> rakudo 3a5f61: OUTPUT«         C␤»

[12:26] <bacek> rakudo: my $x=ord('C')-ord('A'); say sprintf('%10s', 'C'~' 'x$x)

[12:26] <p6eval> rakudo 3a5f61: OUTPUT«       C  ␤»

[12:26] <moritz_> perl6  -e 'my$n=@*ARGS[0];for"A"..$n,("A"..^$n).reverse {say " "x $n.ord-.ord,$_," "x 2*.ord-131,$_~~"A"??""!!$_}' E

[12:26] <bacek> rakudo: my $x=ord('C')-ord('A'); my$y=sprintf('%10s', 'C'~' 'x$x); say $y~$y.flip

[12:26] <p6eval> rakudo 3a5f61: OUTPUT«       C    C       ␤»

[12:27] <masak> use .fmt!

[12:27] <bacek> O!

[12:27] <moritz_> $_ eq"A" is longer than $_~~"A" because it requires one more whitespace

[12:28] *** ejs left
[12:28] <bacek> rakudo: my $x=ord('C')-ord('A'); my$y=('C'~' 'x$x).fmt('%10s'); say $y~$y.flip

[12:28] <p6eval> rakudo 3a5f61: OUTPUT«       C    C       ␤»

[12:30] <bacek> rakudo: for'A'..'C',{my$x=ord($_)-65; ('C'~' 'x$x).fmt('%10s').map: {$_~$_.flip}.say}

[12:30] <p6eval> rakudo 3a5f61: OUTPUT«Statement not terminated properly at line 1, near "'..'C',{my"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:30] <moritz_> wouldn't it be shorter to iterate over the .ords directly?

[12:30] <bacek> rakudo: for'A'..'C'{my$x=ord($_)-65; ('C'~' 'x$x).fmt('%10s').map: {$_~$_.flip}.say}

[12:30] <p6eval> rakudo 3a5f61: OUTPUT«_block45␤Parameter type check failed for expr in call to map␤current instr.: 'die' pc 17498 (src/builtins/control.pir:225)␤»

[12:30] <bacek> what???

[12:31] <bacek> rakudo: say for'A'..'C'{my$x=ord($_)-65; map ('C'~' 'x$x).fmt('%10s'){$_~$_.flip}}

[12:31] <p6eval> rakudo 3a5f61: OUTPUT«say requires an argument at line 1, near "for'A'..'C"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:31] <bacek> rakudo: say $_ for'A'..'C'{my$x=ord($_)-65; map ('C'~' 'x$x).fmt('%10s'){$_~$_.flip}}

[12:31] <p6eval> rakudo 3a5f61: OUTPUT«Statement not terminated properly at line 1, near "{my$x=ord("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:31] <wayland76> my($in) = 'E'; for 65..ord($in) { say; }

[12:32] <bacek> rakudo: for'A'..'C'{my$x=ord($_)-65; say map ('C'~' 'x$x).fmt('%10s'){$_~$_.flip}}

[12:32] <p6eval> rakudo 3a5f61: OUTPUT«Method 'postcircumfix:{ }' not found for invocant of class 'Str'␤current instr.: 'postcircumfix:{ }' pc 5649 (src/classes/Associative.pir:133)␤»

[12:32] <wayland76> rakudo: my($in) = 'E'; for 65..ord($in) { say; }

[12:32] <p6eval> rakudo 3a5f61: OUTPUT«say requires an argument at line 1, near "; }"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:32] <wayland76> rakudo: my($in) = 'E'; for 65..ord($in) { say $_; }

[12:32] <p6eval> rakudo 3a5f61: OUTPUT«65␤66␤67␤68␤69␤»

[12:32] <masak> wayland76: .say

[12:32] <wayland76> rakudo: my($in) = 'E'; for 65..ord($in) { .say; }

[12:32] <bacek> rakudo: for'A'..'C'{my$x=ord($_)-65; say map{$_~$x.flip}('C'~' 'x$x).fmt('%10s')}

[12:32] <p6eval> rakudo 3a5f61: OUTPUT«65␤66␤67␤68␤69␤»

[12:32] <p6eval> rakudo 3a5f61: OUTPUT«No applicable candidates found to dispatch to for 'map'␤current instr.: '_block27' pc 241 (EVAL_20:104)␤»

[12:35] <bacek> rakudo: for'A'..'C'{my$x=ord($_)-65; say map{$_~$x.flip},('C'~' 'x$x).fmt('%10s')}

[12:35] <p6eval> rakudo 3a5f61: OUTPUT«No applicable candidates found to dispatch to for 'map'␤current instr.: '_block27' pc 241 (EVAL_20:104)␤»

[12:35] <bacek> rakudo: for'A'..'C'{my$x=ord($_)-65; say map{$_~$_.flip},('C'~' 'x$x).fmt('%10s')}

[12:35] <p6eval> rakudo 3a5f61: OUTPUT«No applicable candidates found to dispatch to for 'map'␤current instr.: '_block27' pc 241 (EVAL_20:104)␤»

[12:35] <wayland76> rakudo: my($in) = 'E'; say join "\n", map { .chr } 65..ord($in);

[12:35] <p6eval> rakudo 3a5f61: OUTPUT«Statement not terminated properly at line 1, near "65..ord($i"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:36] <wayland76> rakudo: my($in) = 'E'; say join "\n", map { .chr _ ' ' xx $_ _ .chr()} 65..ord($in);

[12:36] <moritz_> wayland76: comma after }

[12:36] <p6eval> rakudo 3a5f61: OUTPUT«Statement not terminated properly at line 1, near "_ ' ' xx $"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:36] <wayland76> rakudo: my($in) = 'E'; say join "\n", map { .chr _ ' ' xx $_ _ .chr()}, 65..ord($in);

[12:36] <p6eval> rakudo 3a5f61: OUTPUT«Statement not terminated properly at line 1, near "_ ' ' xx $"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:37] <wayland76> moritz_: Thanks :).  I still don't have my working Rakudo RPM yet, so this golfing is my only chance to do P6 :)

[12:37] <masak> bacek: the _ operator is ~ nowadays.

[12:37] <moritz_> what is $_ _ supposed to mean?

[12:37] <wayland76> rakudo: my($in) = 'E'; say join "\n", map { .chr ~ ' ' xx $_ ~ .chr()}, 65..ord($in);

[12:37] <p6eval> rakudo 3a5f61: OUTPUT«A                                                                                                                                 A␤B                                                                                                                                   B␤C          

[12:37] <p6eval> ..  ...

[12:38] <wayland76> rakudo: my($in) = 'E'; say join "\n", map { .chr ~ (' ' xx $_) ~ .chr }, 65..ord($in);

[12:38] <p6eval> rakudo 3a5f61: OUTPUT«A                                                                                                                                 A␤B                                                                                                                                   B␤C          

[12:38] <p6eval> ..  ...

[12:38] *** ejs1 left
[12:39] <wayland76> rakudo: my($in) = 'E'; say join "\n", map { .chr ~ (' ' xx $_-65) ~ .chr }, 65..ord($in);

[12:39] <p6eval> rakudo 3a5f61: OUTPUT«AA␤B B␤C   C␤D     D␤E       E␤»

[12:39] <wayland76> rakudo: my($in) = 'E'; say join "\n", map { .chr ~ (' ' xx $_-66) ~ .chr }, 65..ord($in);

[12:39] <p6eval> rakudo 3a5f61: OUTPUT«AA␤BB␤C C␤D   D␤E     E␤»

[12:40] *** LylePerl joined
[12:40] *** broquaint joined
[12:42] <bacek> std: for'A'..'C'{for($_,$_.reverse){my$x=ord($_)-65; for ('C'~' 'x$x).fmt('%10s') {say $_~$_.flip}}}

[12:42] <p6eval> std 26367: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/7JvZ3y175s line 1:␤------> for'A'..'C'{for($_,$_.reverse){my$x=ord($_)-6␤    expecting any of:␤    POST␤   argument list␤      infix or meta-infix␤      infix stopper␤    postfix␤       

[12:42] <p6eval> ..postfix_prefix_meta_operator␤       standa...

[12:44] <masak> bacek: .flip

[12:44] <bacek> rakudo: say "foo".flip

[12:44] <p6eval> rakudo 3a5f61: OUTPUT«oof␤»

[12:44] <bacek> time to update local copy...

[12:45] *** abra joined
[12:47] <wayland76> rakudo: my($in) = 'E'; @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); $b= 'A' . join"\n",@a[0..@a-1]; say $b ~ @a.last ~ $b.flip

[12:47] <p6eval> rakudo 3a5f61: OUTPUT«Statement not terminated properly at line 1, near ". join\"\\n\""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:48] <wayland76> rakudo: my($in) = 'E'; @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); $b= 'A' . join"\n",@a[0..@a-1]; say $b ~ @a.pop ~ $b.flip

[12:48] <p6eval> rakudo 3a5f61: OUTPUT«Statement not terminated properly at line 1, near ". join\"\\n\""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:48] <wayland76> rakudo: my($in) = 'E'; @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); $b= 'A' ~ join "\n",@a[0..@a-1]; say $b ~ @a.pop ~ $b.flip

[12:48] <p6eval> rakudo 3a5f61: OUTPUT«Scope not found for PAST::Var '@a' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:104)␤»

[12:48] <wayland76> rakudo: my($in) = 'E'; my @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); $b= 'A' ~ join "\n",@a[0..@a-1]; say $b ~ @a.pop ~ $b.flip

[12:48] <p6eval> rakudo 3a5f61: OUTPUT«Scope not found for PAST::Var '$b' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:104)␤»

[12:48] <wayland76> rakudo: my($in) = 'E'; my @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); my $b= 'A' ~ join "\n",@a[0..@a-1]; say $b ~ @a.pop ~ $b.flip

[12:48] <p6eval> rakudo 3a5f61: OUTPUT«ABB␤C C␤D   D␤E     EE     EE     E␤D   D␤C C␤BBA␤»

[12:49] <bacek> rakudo: use APL::Parser; say {{{⍵⍪1 0↓⊖⍵}⍵,0 ¯1↓1⌽⌽⍵}↑(⎕a⍳⍵){(⍳⍺)⌽(⍺,⍺)↑(⍺,1)⍴⍵}⎕a}’E’

[12:49] <bacek> oh wait

[12:49] <p6eval> rakudo 3a5f61: OUTPUT«Can't find ./APL/Parser in @INC␤current instr.: 'die' pc 17498 (src/builtins/control.pir:225)␤»

[12:50] <wayland76> rakudo: my($in) = 'E'; my @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); my $b= 'A' ~ join "\n",@a[0..@a.end-1]; say $b ~ @a.pop ~ $b.flip

[12:50] <p6eval> rakudo 3a5f61: OUTPUT«ABB␤C C␤D   DE     ED   D␤C C␤BBA␤»

[12:51] <wayland76> rakudo: my($in) = 'E'; my @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); my $b= 'A' ~ join "\n",@a[0..@a.end-1],"\n"; say $b ~ @a.pop ~ $b.flip

[12:51] <p6eval> rakudo 3a5f61: OUTPUT«ABB␤C C␤D   D␤␤E     E␤␤D   D␤C C␤BBA␤»

[12:51] <wayland76> rakudo: my($in) = 'E'; my @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); my $b= 'A' ~ join "\n",@a[0..@a.end-1],""; say $b ~ @a.pop ~ $b.flip

[12:51] <p6eval> rakudo 3a5f61: OUTPUT«ABB␤C C␤D   D␤E     E␤D   D␤C C␤BBA␤»

[12:51] <bacek> wayland76: s/ //g

[12:52] <wayland76> rakudo: my($in) = 'E'; my @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); my $b= join "\n",'A',@a[0..@a.end-1],""; say $b ~ @a.pop ~ $b.flip

[12:52] <p6eval> rakudo 3a5f61: OUTPUT«A␤BB␤C C␤D   D␤E     E␤D   D␤C C␤BB␤A␤»

[12:52] <wayland76> Yeah, I know I can remove spaces.  But I still haven't gotten it to put them all in yet :)

[12:52] *** payload joined
[12:53] *** alester joined
[12:53] *** alester left
[12:53] <wayland76> rakudo: my($in) = 'E'; my @a = map {' ' xx ord($in)-$_ ~ .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); my $b= join "\n",'A',@a[0..@a.end-1],""; say $b ~ @a.pop ~ $b.flip

[12:53] <p6eval> rakudo 3a5f61: OUTPUT«A␤     BB␤   C C␤ D   D␤E     E␤D   D ␤C C   ␤BB     ␤A␤»

[12:55] <wayland76> rakudo: my($in) = 'E'; my @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); my $b= join "\n",map{' ' xx ord($in)-$_ ~ $_ }'A',@a[0..@a.end-1],""; say $b ~ @a.pop ~ $b.flip

[12:55] <p6eval> rakudo 3a5f61: OUTPUT«Statement not terminated properly at line 1, near "'A',@a[0.."␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:55] <wayland76> rakudo: my($in) = 'E'; my @a = map { .chr ~ (' ' xx $_-66) ~ .chr }, 66..ord($in); my $b= join "\n",map{' ' xx ord($in)-$_ ~ $_ }, 'A',@a[0..@a.end-1],""; say $b ~ @a.pop ~ $b.flip

[12:55] <p6eval> rakudo 3a5f61: OUTPUT«No applicable candidates found to dispatch to for 'map'␤current instr.: '_block14' pc 161 (EVAL_19:66)␤»

[12:55] *** jferrero left
[12:56] <wayland76> Oh well, I guess I'll stop filling up the channel now.  :)

[12:57] <LylePerl> rakudo: chdir()

[12:57] <p6eval> rakudo 3a5f61: OUTPUT«Could not find non-existent sub chdir␤current instr.: '_block14' pc 53 (EVAL_16:37)␤»

[13:00] <wayland76> APL FTW, I guess :)

[13:01] <masak> there will be modules...

[13:03] <masak> "your technological distinctiveness will be added to our own."

[13:03] <frettled> this ought to be really simple with TECO or VI ;)

[13:03] <wayland76> As bacek pointed out ... APL::Parser :)

[13:05] *** awwaiid joined
[13:07] <frettled> TECO::Parser!

[13:07] *** maja joined
[13:08] <wayland76> Now there's something to look forward to :)

[13:08] <moritz_> rakudo: say 'no netsplit'

[13:08] <masak> so, not no netsplit. :/

[13:08] <rakudo> Sorry, netsplit not found!

[13:08] <wayland76> :)

[13:09] <moritz_> actually it's a network outage, not a split

[13:09] <wayland76> Well, if there's anything on the other side of the outage, then it's a split :)

[13:10] <frettled> wayland76: even better, how about implementing Perl 6 in TECO?  :D

[13:10] <wayland76> Or does there have to be an IRC server on the other side of the outage?  Yes.  Am I wrong again? Yes :)

[13:10] <wayland76> frettled: Feel free :)

[13:11] <frettled> wayland76: I'd like to keep what's left of my sanity and NOT turn into RMS, thankyouverymuch.

[13:13] <wayland76> I thought that was if you implemented P6 in elisp

[13:16] *** p6eval left
[13:19] *** maja_ left
[13:19] <pmichaud> good morning.

[13:19] * pmichaud notices lots of really bizarre code in his scrollback window...

[13:19] * masak tips hat

[13:19] <masak> it... got a little golfy in here.

[13:21] <pmichaud> masak: did you want us to use "Stockholm" as a release name?  If yes, which month (except June -- it's already taken)?

[13:21] <wayland76> It's my fault.  Sorry

[13:22] <moritz_> no need to apologize

[13:22] <masak> pmichaud: I like Stockholm.pm, but I would like them do something for Perl 6 before they get a release named after them.

[13:22] <masak> pmichaud: I can email their list if you want.

[13:22] <wayland76> moritz_: It's easier to apologise before people get upset than afterwards :).  

[13:22] <masak> pmichaud: with Vienna, Oslo and Bratislava, all these had already done something for Perl 6/Rakudo.

[13:23] <wayland76> Has any other .pm group done anything for P6?

[13:23] <pmichaud> masak: that's fine; you had mentioned it at the hackathon and your contributions count as "things done for Perl 6/Rakudo"

[13:23] <pmichaud> wayland76: Pittsburgh has a Parrot/Perl 6 workshop planned

[13:23] <masak> pmichaud: oh.

[13:23] <wayland76> Oh, ok :)

[13:24] <moritz_> what's the deal with docs/STATUS? it seems a bit outdated and a bit low on To do items

[13:24] <pmichaud> masak: but if you want to use the opportunity to prod others at Stockholm.pm to do something for p6, that's fine with me.

[13:24] <moritz_> should we remove it from the repo, and keep the page on rakudo.org updated instead?

[13:24] <frettled> wayland76: RMS was a pretty darn good TECO programmer, and then he wrote some Editor MACroS for the TECO editor, which somehow evolved into everything, the kitchen sink and your local coffee machine.

[13:24] <masak> pmichaud: I was thinking of a somewhat bigger scale. all my contributions are either small patches or massive complaining.

[13:24] <pmichaud> masak: November isn't a "small patch".  Nor is proto.  Nor IO::Socket.  Nor ....  :-)

[13:25] <masak> RT tickets are just formalized complaints.

[13:25] <moritz_> masak: and massive amounts of testing and bug reporting

[13:25] * masak gives up

[13:25] <moritz_> it's not only the things that are commited to Rakudo repo that count

[13:25] <pmichaud> correct.  It's things done to help Perl 6.

[13:25] <moritz_> (not to forget blogging)

[13:26] <masak> ok, so what about next month, then?

[13:26] <wayland76> frettled: Ok, I see your point now :)

[13:26] <pmichaud> masak:  let's just say you have a weighted vote when it comes to selecting a possible release name :-)

[13:26] <pmichaud> May would be fine.

[13:26] <masak> I still think Stockholm.pm should arrange something for the occasion.

[13:26] <pmichaud> okay, let's wait for that then.

[13:26] <masak> I'll email them and say something to that effect.

[13:27] <wayland76> ...and tell them how hard you had to work to win this concession from us... :)

[13:27] <pmichaud> I'm not trying to push to get it as the next release (I'd like to see some non-European .pm's soon); just wanted to see if you were eager to have it listed.

[13:27] <frettled> Phew, I answered correctly when TimToady asked if Oslo had city walls.  (The answer was "no, Oslo never had any")

[13:28] <moritz_> that's pretty unusual, isn't it?

[13:28] <wayland76> Maybe someone could resuscitate the Dallas/Fort Worth .pm group :)

[13:28] <wayland76> Not really -- Melbourne never had city walls :)

[13:28] <pmichaud> moritz_: (STATUS) -- yes, it's really out of date.  I'm in favor of removing it and we'll point people to rakudo.org .

[13:29] <pmichaud> wayland76: yeah, DFW.pm hasn't been all that active so that's why I haven't put it on the list yet.  I'd probably pick Austin.pm before DFW.pm :-)

[13:29] <frettled> moritz_: somewhat, but not very unusual way up north.  Oslo lay between rivers.

[13:29] <wayland76> Well, do that, then :)

[13:29] <pmichaud> today I'm planning to blog and work on ROADMAP.

[13:30] <wayland76> I just remembered that there were 3 P6 people in DFW

[13:30] <frettled> Akershus fortress, however, was never successfully captured.

[13:30] <frettled> (http://en.wikipedia.org/wiki/Akershus_fortress)

[13:30] *** alanhaggai joined
[13:31] <arnsholt> pmichaud: You're the man behind the regex engine, no?

[13:31] *** mjk joined
[13:31] <pmichaud> arnsholt: for Parrot/Rakudo, yes.

[13:33] <arnsholt> Yeah, that's what my memory rold me. A few days ago, I submitted a bug about Rakudo not recognising double quoted strings in regexes. I had a look see around the code today to see what I could find

[13:34] <mjk> I put Rakudo from git under C:\cygwin\home\admin\rakudo(cygwin:/home/admin/rakudo), It compiled nicely. but it didn't do anything and just went back to the prompt

[13:34] <pmichaud> Actually, I have a patch that was done at the hackathon for handling double-quoted strings.

[13:35] <pmichaud> just haven't had a chance to apply it yet.

[13:35] <mjk> can anyone help me?

[13:35] <frettled> so much happened at the hackathon that I expect it will be a couple of weeks before all the patches are in ;)

[13:35] <arnsholt> Oh cool. In that case, my meanderings are pretty much moot. It did give me some more understanding of the code though

[13:35] <pmichaud> mjk: what did you use to build Rakudo?

[13:36] <pmichaud> arnsholt++ # reviewing PGE code

[13:36] <mjk> pmichaud: cygwin:gcc

[13:36] <mjk> cygwin on winxp

[13:36] <pmichaud> arnsholt: if I can provide any guideposts, let me know.  Much of PGE should be refactored soon, though, to bring it closer to spec and make a start on longest-token-matching.

[13:37] <moritz_> pmichaud: will LTM imply building of a DFA?

[13:37] <mjk> it can create perl6.exe, but run is failed

[13:37] <mjk> and make test is failed also

[13:37] <pmichaud> mjk:  I'm a bit lost when it comes to cygwin and other things.  Can you see if parrot runs, at least?  Just change to the "parrot" subdirectory and type "make test"

[13:37] <arnsholt> pmichaud: Thanks. I'll try to remember that

[13:38] <pmichaud> moritz_: something like a DFA, probably.

[13:38] <frettled> doesn't jnthn have parrot+rakudo working under Windows?

[13:38] <mjk> pmichaud: i try it

[13:40] *** exodist joined
[13:40] <moritz_> I think jnthn has "real" windows, not cygwin

[13:40] *** FurnaceBoy joined
[13:40] <frettled> ah

[13:42] *** iblechbot left
[13:43] <moritz_> pmichaud: did you commit your Regex type fixes already?

[13:45] <moritz_> rakudo: say #[ comment ] "foo"

[13:46] <arnsholt> moritz_: That works with my local build of rakudo from this morning

[13:47] *** payload left
[13:47] *** alanhaggai_ joined
[13:48] <wayland76> Didn't LylePerl have experience on Windows?  Or am I confused again?

[13:50] <pmichaud> moritz_: they're being tested right now.  Also, we're having to do some searching at the house for car keys... :-|   afk for a bit

[13:51] *** skids joined
[13:52] *** pugs_svn joined
[13:56] *** p6eval joined
[13:56] <mjk> pmichaud: parrot "make test" Result: PASS

[13:57] <mjk> pmichaud: All tests successful.

[13:57] <mjk> pmichaud: Files=387, Tests=11646, 1056 wallclock secs ( 2.95 usr  2.17 sys + 388.99 cusr 235.04 csys = 629.15 CPU)

[13:57] *** alanhaggai left
[13:58] *** alanhaggai_ is now known as alanhaggai

[13:58] <pmichaud> mjk:  okay, now try (from the rakudo dir)    parrot\parrot perl6.pbc

[13:58] <pmichaud> (or maybe it's parrot\parrot.exe perl6.pbc -- I can never remember with windows)

[13:58] <mjk> pmichaud: i am running "make test" on rakudo

[13:59] <arnsholt> Where can I find the camelia logo? I know I saw it on a page a few days ago, but I can't for the life of me remember where...

[14:00] <pmichaud> arnsholt: http://svn.pugscode.org/pugs/misc

[14:00] <moritz_> arnsholt: the svg is in the pugs repo in misc/camelia.svg

[14:00] <masak> pmichaud: people on the Stockholm list reacted positively. claes++ is pulling a bit on sponsors to try to recreate the Oslo hackathon success, pizza and all.

[14:00] <arnsholt> Cheers!

[14:00] <pmichaud> masak: oooh, that sounds awesome

[14:01] <pmichaud> if someone will let me know when it occurs, I can try to be online then.

[14:02] <mjk> pmichaud: All tests successful.Files=29, Tests=236, 84 wallclock secs ( 0.03 usr  0.05 sys + 61.78 cusr  3.27 csys = 65.13 CPU)Result: PASS

[14:02] <pmichaud> mjk:  that's from... ?

[14:03] <mjk> pmichaud: but perl6.exe isn't running

[14:03] <masak> pmichaud: I'll let you know when I hear something more. which might be tomorrow, or weeks from now.

[14:03] <mjk> $ perl6

[14:03] <mjk>  

[14:03] <mjk> admin@nb-mjk ~/rakudo

[14:03] <mjk> $ perl6 -v

[14:03] <mjk>  

[14:03] <mjk> admin@nb-mjk ~/rakudo

[14:03] <pmichaud> mjk:  I suspect a library loading issue somewhere.

[14:03] <pmichaud> i.e., the perl6.exe binary isn't able to dynamically load parrot or something like that.

[14:04] <mjk> pmichaud: can you give me a suggestion?

[14:04] <moritz_> is there something like strace or ldd for cygwin?

[14:04] <pmichaud> alas, I have zero experience with cygwin, much less understanding how its linkers work.

[14:06] <pmichaud> mjk: you might try posting to the [email@hidden.address] list.  Maybe someone there can help.

[14:07] *** kane__ joined
[14:07] *** iblechbot joined
[14:07] <mjk> pmichaud: OK! thank you

[14:08] <mjk> pmichaud: "make spectest" is failed on rakudo

[14:08] <pmichaud> well, yes, if perl6.exe isn't running for you, then "make test" and "make spectest" are likely to fail.

[14:09] *** alester joined
[14:12] <mjk> pmichaud: "make test" is use perl5.10

[14:13] *** semn2kdojinej left
[14:14] *** c9s left
[14:21] <LylePerl> mjk: Why not compile Rakudo natively on windows with MinGW32 rather than using cygwin?

[14:22] <mjk> LylePerl: my pc installed cygwin, not installed MinGW32:)

[14:23] <LylePerl> I've got a guide here:- http://www.perlfoundation.org/perl6/index.cgi?roadmap_to_helping_with_development

[14:23] <LylePerl> It shows you how to get MinGW32, git, and how to build Rakudo

[14:23] <LylePerl> amoung other thigs

[14:24] *** nemstep joined
[14:24] <LylePerl> http://www.perlfoundation.org/perl6/index.cgi?roadmap_to_helping_with_development#installing_mingw_gcc_compiler

[14:24] *** kane_ left
[14:24] <mjk> LylePerl: thanks, i'll try MinGW32

[14:26] <LylePerl> pmichaud: Is there a binary Rakudo for Windows? If not maybe I should build and zip one up every week or something?

[14:26] <[particle]> yes, there is

[14:26] <pmichaud> there is?  Oh.

[14:26] <patmat> i can't get the actual .zip running in work, for rakudo

[14:27] * [particle] searches for the link...

[14:27] <pmichaud> LylePerl: that said, building and zipping one up every week might be a good thing to have.

[14:27] <[particle]> http://sourceforge.net/project/showfiles.php?group_id=211372

[14:28] <eiro> hello

[14:28] <[particle]> hi, eiro

[14:28] <pmichaud> oooh, the sourceforge.net site is interesting.

[14:28] <[particle]> pmichaud: that's fperrad++'s doing

[14:28] <pmichaud> impressive.

[14:29] <[particle]> indeed

[14:29] <eiro> if i want my lib to be usable in any parrot langage (not only perl6), can i still write it in perl6 (or do i hanve to concider PIR or NCI) ? 

[14:30] <pmichaud> eiro: we're still working on language interop.

[14:31] <[particle]> the idea is that yes, you can write it in any language

[14:31] <pmichaud> eiro: but the intent is that libraries written in (e.g., perl6) can be used by other languages without too much difficulty.

[14:31] <pmichaud> of course, the perl6-written-library would require that the perl 6 runtime be available.

[14:31] <[particle]> for max portability Right Now, use nqp.

[14:33] <eiro> well ... i start my lib now but it can wait for interop. ... so the answer completly satisfy me. thanks 

[14:33] *** mjk left
[14:35] *** nihiliad joined
[14:39] *** azawawi left
[14:39] <LylePerl> Would be worth mentioning that sourceforge link on the "How to get Rakudo" page.

[14:40] <wollmers> std: say "\cZ".ord 

[14:40] <p6eval> std 26367: OUTPUT«ok 00:04 35m␤»

[14:40] <wollmers> rakudo: say "\cZ".ord

[14:40] <p6eval> rakudo 816a4c: OUTPUT«26␤»

[14:42] *** payload joined
[14:42] *** antone left
[14:44] <jnthn> masak: ping

[14:44] *** jferrero joined
[14:45] *** justatheory joined
[14:45] <masak> jnthn: 乓

[14:45] *** bsdperl joined
[14:45] *** bsdperl left
[14:46] <jnthn> masak: I'm pondering showing proto to my .pm group tonight. I already have a Rakudo install. Do I need to do anything specific to get proto to know where to put modules or find my Rakudo, etc?

[14:46] <wayland76> masak: That one came up as a box here :)

[14:46] *** bsdperl joined
[14:46] <masak> wayland76: it's Chinese for "pong".

[14:46] *** bsdperl left
[14:46] <masak> jnthn: just try it before you demo it. :)

[14:47] <masak> jnthn: it works for me, but buyer beware, here be dragons, etc.

[14:47] <jnthn> masak: I just tried

[14:47] <jnthn> 16:46 < masak> jnthn: just try it before you demo it. :)

[14:47] <jnthn> oops

[14:47] <jnthn> perl proto install SVG

[14:47] <jnthn> and got

[14:47] <jnthn> Downloading Perl 6...

[14:47] <jnthn> Couldn't download Perl 6: 256 at proto line 156.

[14:47] * masak checks that line

[14:48] <wayland76> rakudo: proto install Christmas

[14:48] <p6eval> rakudo 816a4c: OUTPUT«Malformed routine definition at line 1, near "install Ch"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[14:48] <masak> jnthn: you're on Windows, right?

[14:48] <masak> jnthn: do you have wget?

[14:48] <jnthn> masak: No

[14:49] <jnthn> ah

[14:49] <jnthn> but it's going to have other issues too

[14:49] <masak> aye, many, probably.

[14:49] <jnthn> 'env' is not recognized as an internal or external command,

[14:49] <jnthn> operable program or batch file.

[14:49] <masak> :/

[14:49] <patmat> are the rumors about the Christmas release this year true?

[14:49] <masak> patmat: no.

[14:49] <jnthn> (That was after I edited proto.config)

[14:49] <patmat> hehe

[14:49] <wayland76> patmat: Your guess is as good as ours

[14:49] <jnthn> (to tell it where my Rakudo was)

[14:50] <masak> patmat: but by Christmas this year, things will be pretty good, I guess.

[14:50] <masak> jnthn: ok.

[14:50] <patmat> :)

[14:50] <jnthn> masak: OK, no worries, I don't ahve time to debug it etc now. Was just curious if it'd work out of the box.

[14:50] <[particle]> perl 6 will definitely be out by christmas.

[14:50] <masak> jnthn: it's tricky, I don't have Windows, and most of the time I forget that it exists. so I/we haven't written proto for Windows.

[14:50] <jnthn> masak: Sure.

[14:51] <jnthn> Makes sense. I wasn't hugely optimistic.

[14:51] <masak> it could probably be done, but it'd take a dedicated developer who kept proto up-to-date.

[14:51] <patmat> i wish i could get rakudo running on that fu*kin Windows machine here at work

[14:51] <wayland76> But as soon as HTTP::Daemon and %*ENV work, those two problems can be easily fixed

[14:51] <masak> proto volunteers welcome.

[14:51] <jnthn> patmat: Rakudo itself running on Windows can work. I build it on Windows just fine here.

[14:51] <masak> wayland76: %*ENV works, to some degree.

[14:51] <jnthn> With MS VC++ compiler.

[14:52] <wayland76> masak: Just making assumptions based on your running env :)

[14:52] <[particle]> patmat: what toolchain are you using? msvc2008express works quite well

[14:52] <patmat> ok

[14:52] <wayland76> Note that both bash and Windows support the "set" command

[14:52] <patmat> should have the setup here at work lets see :)

[14:52] <masak> wayland76: no, we're running env to provide other programs with the right environment, not Rakudo.

[14:52] <wayland76> Oh, ok

[14:53] <masak> wayland76: and HTTP::Daemon is pretty functional too nowadays. native sockets, yay!

[14:53] <wayland76> So can you turf wget out of proto then?

[14:53] <wayland76> Oh, wait, but then HTTP::Daemon is a dependency for proto, and that's bad :)

[14:54] <[particle]> not if authorities are done right

[14:54] <masak> aye.

[14:56] <wayland76> authorities?

[14:57] <wayland76> What are those?

[14:57] <[particle]> buubot: spack authority

[14:57] <buubot> [particle]: S02-bits.pod:3 S11-modules.pod:5 S12-objects.pod:1 S22-package-format.pod:1

[14:58] <[particle]> S11?

[14:58] <wayland76> Ah, ok

[14:58] <[particle]> feh. what bot do i ask that, for a link?

[14:58] <[particle]> oh, right, irclog

[14:58] <[particle]> http://perlcabal.org/syn/S11.html

[14:58] <[particle]> faster to use my fingers in firefox.

[14:59] <japhb> First off: congrats guys on the Rakudo release!

[14:59] * [particle] senses a "but..."

[14:59] <[particle]> ;)

[14:59] <patmat> lol

[14:59] <masak> [particle]: how do authorities solve the fact that proto cannot assume that any other projects are installed?

[15:00] <japhb> Second, how complete is the IO::Socket support?  Can I reimplement "Network Programming with Perl" for Rakudo?

[15:00] <masak> japhb: give it a go.

[15:00] <[particle]> masak: proto can have it's own libraries, under its own authority

[15:00] <masak> japhb: Web.pm already uses the sockets.

[15:00] <masak> [particle]: ah, cunning.

[15:00] * masak wants those authorities

[15:00] <[particle]> ...hopefully enough to code them. :)

[15:01] <wayland76> Can we questions the authorities? :)

[15:01] <japhb> masak, so we've got listen(), bind(), etc., and all of TCP/UDP/RAW?  What about IPv4 versus IPv6?

[15:01] <masak> japhb: only TCP, AFAIK.

[15:01] <masak> INET4.

[15:02] <masak> patches welcome for the other things, as long as they keep to the spec.

[15:04] <japhb> masak: gotcha

[15:05] <wayland76> We should make IPv6 the default :).  

[15:06] <japhb> wayland76: tell that to the ISPs.  :-)

[15:06] <[particle]> what's ipv6, is that from the future?

[15:07] <japhb> [particle]: Given that it was IIRC only a couple years ago that the IETF decided to test whether they could hold a meeting using just IPv6, I'd say "Yes."

[15:09] <wayland76> IPv6 means we have 128-bit IP addresses

[15:09] *** pmurias joined
[15:09] <wayland76> And if I understand correctly, it works on Linux and Windows, at the least

[15:10] <wayland76> Also, I get the impression that, if you program using the IPv6 interface, you can still use IPv4 addresses, and have everything go via IPv4, but when you need to change to IPv6, just change the address, and it all happens

[15:10] <wayland76> *if* the program used the IPv6 interface in the first place :)

[15:11] <wayland76> Of course, my impression could be wrong :)

[15:11] <gfldex> your program might talk to a nameserver

[15:12] <gfldex> and that nameserver might talk to another nameserver

[15:12] <gfldex> and they all have to talk ipv6

[15:13] <wayland76> gfldex: ???  I don't think so

[15:13] <wayland76> Ah, yes, I see your point -- you're talking about AAAA records, right?

[15:13] * jnthn -> .pm group

[15:13] <wayland76> o/

[15:15] *** Psyche^ joined
[15:17] *** Patterner left
[15:17] *** Psyche^ is now known as Patterner

[15:22] *** araujo joined
[15:28] *** rblasch left
[15:30] *** kaether_ joined
[15:30] *** kaether_ left
[15:33] *** kaether left
[15:33] * [particle] finds a csv bnf grammar

[15:35] *** ejs joined
[15:35] <wayland76> Hey, could we write a BNF to Perl6 converter?

[15:35] <PerlJam> "we" could :)

[15:36] <[particle]> yes, but there are very many different ebnf interpretations

[15:36] <wayland76> (well, ok, we could; more I just wanted to bring the thought to people's minds)

[15:36] <[particle]> s/interpretations/syntaxes/

[15:36] <wayland76> [particle]: Good point.  Thanks :)

[15:36] <PerlJam> I've thought about it several  times, but see [particle] 

[15:36] *** c9s joined
[15:37] <PerlJam> But perhaps that's just lack of imagination to not figure a way to detect and adjust for the particular ebnf syntax

[15:37] *** iblechbot left
[15:37] <[particle]> an error-correcting parser hasn't really been written for parrot yet

[15:38] <[particle]> what should a csv module be called in perl6-land?

[15:38] *** exodist left
[15:39] <[particle]> can't wait for the great module-naming battles to come

[15:40] *** lambdabot joined
[15:40] <wayland76> Module, or parsing module?

[15:40] <wayland76> DBD::CSV ? :)

[15:41] <pmichaud> time for lunch here -- bbl.

[15:41] <[particle]> reader/writer, not following the as-yet-undefined dbi driver spec

[15:41] <wayland76> Format::CSV maybe?

[15:42] <wayland76> o/ to pm

[15:42] <PerlJam> there will be no battles because there can be any number of people using the exactly same namespace.

[15:43] <PerlJam> s/ly//

[15:43] <PerlJam> (odd, I dropped an ly earlier and added one here)

[15:43] *** exodist joined
[15:44] <wayland76> Oh, yes.  use CSV:auth(particle) and use CSV:auth(PerlJam)

[15:44] <wayland76> $o = CSV->new()

[15:44] <wayland76> Now what does it do :)

[15:44] <PerlJam> you get a compile-time error or two

[15:45] <PerlJam> (no my, you used -> when you meant ., and you didn't disambiguate the CSVs)

[15:46] <PerlJam> [particle]: I'd just put it in the CSV namespace for now.  You can always change it later.

[15:46] <wayland76> I still reckon Format::CSV, but it's your module :)

[15:47] * [particle] idly wonders if there's prior art in pugs repo, while rakudo rebuilds...

[16:02] * [particle] notes his picture has been updated

[16:03] *** iblechbot joined
[16:05] <pugs_svn> r26368 | pmurias++ | [re-smop] fixed ref counting bug in s1p hash

[16:24] <moritz_> I've got about half an hour spare tuits now - anything in particular I should work on?

[16:24] <moritz_> (like tests for a thing that you want to implement soon)

[16:28] <wollmers> moritz: review of spectests, e.g. #?rakudo 3 skip '\c$char' in t/spec/S02-literals/quoting.t (PASS)

[16:29] <wollmers> moritz: but I can do this systematically if you can manage commit access for me

[16:30] <moritz_> wollmers: I can ;-) just /msg me your email address and desired nick name

[16:30] <[particle]> free! pugs commit bits. all you need is an email address and a dream.

[16:31] <moritz_> (or if you don't fear spam you can simply write it here in the open)

[16:32] <pugs_svn> r26369 | moritz++ | [t/spec] test for RT #64918 (malformed UTF-8 string)

[16:33] *** FurnaceBoy left
[16:33] <wollmers> moritz: no secret, I always use real name Helmut Wollmersdorfer [email@hidden.address] and preferred short name (as nick) wollmers (the first 8 chars)

[16:34] <moritz_> wollmers: you should have got mail by now (two, actually ;-)

[16:36] *** mhsparks left
[16:36] <wollmers> moritz: got both - THX

[16:36] <moritz_> std: my $x; $x R~= 'foo'

[16:36] <p6eval> std 26369: OUTPUT«##### PARSE FAILED #####␤Can't reverse a concatenation because it's too fiddly at /tmp/MPzfbt5CIU line 1:␤------> my $x; $x R~= 'foo'␤FAILED 00:02 35m␤»

[16:37] <moritz_> std: my $x; $x R~ 'foo'

[16:37] <p6eval> std 26369: OUTPUT«ok 00:02 35m␤»

[16:42] <moritz_> rakudo: class A { has Int @.a is rw }; my $x=A.new; $x.a = (2, 3, 4); $x.a.push: 'foo'; say $x.a.perl

[16:42] <p6eval> rakudo f0fab2: OUTPUT«[2, 3, 4, "foo"]␤»

[16:46] *** masak left
[16:49] *** jhorwitz joined
[16:51] <pugs_svn> r26370 | moritz++ | [t/spec] test for RT #64474

[16:57] *** zamolxes left
[17:00] *** km2 joined
[17:01] <pugs_svn> r26371 | moritz++ | [t/spec] tests for RT #64464, regexes with dashes and hyphens

[17:03] <moritz_> rakudo: my $x = Bool::False; say ++$x;

[17:03] <p6eval> rakudo f0fab2: OUTPUT«1␤»

[17:04] <moritz_> rakudo: my $x = Bool::False; say $x.succ;

[17:04] <p6eval> rakudo f0fab2: OUTPUT«Null PMC access in isa()␤current instr.: 'parrot;List;!flatten' pc 7679 (src/classes/List.pir:236)␤»

[17:08] <pugs_svn> r26372 | moritz++ | [t/spec] tests for .succ/.pred on Bool

[17:09] *** pmurias_ joined
[17:11] *** payload left
[17:11] <skids> ?nopaste

[17:11] <lambdabot> Haskell pastebin: http://hpaste.org/new

[17:16] <skids> http://hpaste.org/fastcgi/hpaste.fcgi/view?id=4138

[17:22] *** pmurias left
[17:29] *** PhatEddy joined
[17:30] <PhatEddy> rakudo: my $x = slurp $*IN

[17:30] <p6eval> rakudo f0fab2: OUTPUT«Unable to open filehandle from path 'IO<0xb5fcdfe0>'␤current instr.: 'open' pc 1235 (src/classes/Object.pir:259)␤»

[17:31] <PhatEddy> It works the other way with $*IN.slurp

[17:32] <moritz_> looks like dispatch gone wrong

[17:32] <pmichaud> According to S32, slurp as a function expects a filename.

[17:32] <pmichaud>     multi slurp (Str $filename

[17:32] <pmichaud> 	Bool :$bin = False,

[17:32] <pmichaud> 	Str  :$enc = "Unicode",

[17:32] <pmichaud> 	--> Str|Buf

[17:32] <pmichaud>     )

[17:32] <moritz_> that's not very dwimmmy

[17:32] <PhatEddy> with mmd I can make it work either way from setting and make slurp by itself slurp stdin ...

[17:32] <pmichaud> feel free to fix the spec :-)

[17:32] *** ruoso joined
[17:36] <moritz_> rakudo: use Test; plan 1; isa_ok(1|2, Junction)

[17:37] <p6eval> rakudo f0fab2:  ( no output )

[17:38] <moritz_> rakudo: use Test; plan 1; isa_ok(1|2, Junction)

[17:39] <p6eval> rakudo f0fab2: OUTPUT«1..1␤Null PMC access in get_integer()␤current instr.: 'parrot;Junction;!type' pc 2569 (src/classes/Junction.pir:180)␤»

[17:43] *** jferrero left
[17:44] *** gbacon left
[17:45] <moritz_> rakudo: IO.readline

[17:45] <p6eval> rakudo f0fab2: OUTPUT«Could not locate a method 'readline' to invoke on class 'IO'.␤current instr.: 'die' pc 17498 (src/builtins/control.pir:225)␤»

[17:45] <moritz_> rakudo: IO.get

[17:45] <p6eval> rakudo f0fab2: OUTPUT«Null PMC access in get_bool()␤current instr.: 'parrot;IOIterator;' pc 7255 (src/classes/IO.pir:167)␤»

[17:46] *** rindolf joined
[17:50] *** cognominal left
[17:50] *** ejs1 joined
[17:51] *** pmurias_ left
[17:51] *** gbacon joined
[17:54] *** ejs left
[17:57] <moritz_> rakudo: my $x = :a<5>; say $x.map({.key => .value + 1}).perl

[17:57] <p6eval> rakudo f0fab2: OUTPUT«Method 'key' not found for invocant of class 'Failure'␤current instr.: 'parrot;P6metaclass;dispatch' pc 662 (src/classes/ClassHOW.pir:171)␤»

[17:57] <moritz_> rakudo: my $x = :a<5>; say $x.map({;.key => .value + 1}).perl

[17:57] <p6eval> rakudo f0fab2: OUTPUT«["a" => 6]␤»

[18:02] <pugs_svn> r26373 | szabgab++ | Smart::Links remove the --fast parameter that was not in use

[18:02] *** cdarroch joined
[18:06] *** rblasch joined
[18:09] <pugs_svn> r26374 | szabgab++ | Smart::Links slight cleanup

[18:16] <pugs_svn> r26375 | szabgab++ | Smart::Links retab

[18:22] <pugs_svn> r26376 | szabgab++ | Smart::Links separate out the perl 6 pod processing sub

[18:26] *** zamolxes joined
[18:29] *** davidad joined
[18:34] *** jan_ left
[18:39] *** jan_ joined
[18:42] *** FurnaceBoy joined
[18:43] *** alanhaggai left
[18:49] *** rindolf left
[18:49] <jnthn> rakudo: say [+] 1..10;

[18:49] <p6eval> rakudo 042614: OUTPUT«55␤»

[18:49] <jnthn> perl6: say [+] 1..10;

[18:49] <p6eval> elf 26376: OUTPUT«/home/evalenv/pugs/misc/STD_red/match.rb:117:in `block in to_dump0': undefined method `to_dump0' for nil:NilClass (NoMethodError)␤     from /home/evalenv/pugs/misc/STD_red/match.rb:117:in `map'␤       from /home/evalenv/pugs/misc/STD_red/match.rb:117:in `to_dump0'␤  from

[18:49] <p6eval> ../home/evalenv/pugs/...

[18:49] <p6eval> ..pugs, rakudo 042614: OUTPUT«55␤»

[18:49] *** asakra joined
[18:50] <asakra> rakudo: system("whoami")

[18:50] <p6eval> rakudo 042614: OUTPUT«Could not find non-existent sub system␤current instr.: '_block14' pc 60 (EVAL_16:41)␤»

[18:50] <moritz_> asakra: it's called run() in Perl 6

[18:51] <asakra> rakudo: run("whoami")

[18:51] <p6eval> rakudo 042614: OUTPUT«evalenv␤»

[18:51] <moritz_> asakra: and please don't make anything that breaks p6eval's environment ;-)

[18:51] <jnthn> moritz_: I'm sat next to him. ;-)

[18:51] <asakra> watching my fingers ;)

[18:51] <skids> ...with a tack hammer

[18:52] <moritz_> jnthn: a safe mode for Rakudo would be greatly appreciated

[18:52] *** rfordinal joined
[18:52] <rfordinal> :))

[18:52] <jnthn> moritz_: Yeah, so I fear I'm about to discover...

[18:52] <rfordinal> asakra : kill $$ :))

[18:53] <jnthn> It's $*PID

[18:53] <rfordinal> shit

[18:54] *** forcer joined
[18:54] <rfordinal> jnthn: http://photos-a.ak.fbcdn.net/hphotos-ak-snc1/hs005.snc1/2813_1154387702824_1321637451_395480_8142266_n.jpg

[18:55] <jnthn> oh noes it's me

[18:56] <skids> hidez cheezburgerz!

[18:56] <forcer> rakudo: say "hello world"

[18:56] <p6eval> rakudo 042614: OUTPUT«hello world␤»

[18:57] <forcer> rakudo: say `whoami`

[18:57] <p6eval> rakudo 042614: OUTPUT«say requires an argument at line 1, near " `whoami`"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[19:00] <moritz_> there are no backticks in Perl 6.

[19:01] * jnthn suggests that his pm gropu go to the pub, before they hack feather...

[19:01] <asakra> :) let's go!

[19:01] <moritz_> that's not feather

[19:02] <moritz_> it's timtowtdi.org

[19:02] *** asakra left
[19:04] *** rfordinal left
[19:14] <pugs_svn> r26377 | moritz++ | [t/spec] some unfudges for Rakudo

[19:14] <Tene> rakudo: run('ls /tmp')

[19:14] <p6eval> rakudo 042614:

[19:14] <p6eval> ..OUTPUT«01qJGK8PEb␤03CGTte0wU␤08lSVsfsr5␤0aX0WySk8k␤0bUVbBrzOe␤0EsQ3AIlw3␤0HIywuyFSs␤0KeE4YkFAC␤0lOFFKdtAt␤0ohM7aWYBs␤0OlqqtOmwm␤0oqDyzlIrF␤0PUzSTNPYL␤0RZx1Nl268␤0slmd1cWOi␤0TN9RkuDYj␤0TQAdeNMzf␤0Ud2OJFm9K␤0UIce5pXDD␤0usALESIIB␤0UuFKahafv␤0VO3QZBfZ0␤0W1fH47HeO␤0WI2HPAKsZ␤0X0l2TiVys␤0YeI7...

[19:14] <moritz_> rakudo: run('ls /tmp')

[19:14] <p6eval> rakudo 042614: OUTPUT«IJhvGTjiMz␤lsItNihCJ2␤»

[19:15] <pugs_svn> r26378 | szabgab++ | Smart::Links add tests

[19:16] *** dukeleto|work left
[19:18] <pmichaud> dalek doesn't seem to be reporting commits

[19:18] <frettled> raduko: run('echo OHAI')

[19:18] <frettled> (haha)

[19:18] <Tene> rakudo: run('pwd')

[19:18] <frettled> rakudo: run('echo OHAI')

[19:19] <p6eval> rakudo 042614: OUTPUT«/home/evalenv/rakudo␤»

[19:19] <p6eval> rakudo 042614: OUTPUT«OHAI␤»

[19:19] <frettled> ("raduko" indeed)

[19:19] *** dukeleto|work joined
[19:19] <frettled> hmmmmm

[19:21] <meppl> good night

[19:21] *** xinming_ joined
[19:22] *** forcer left
[19:23] *** meppl left
[19:24] *** xinming left
[19:26] *** cspencer joined
[19:28] *** FurnaceBoy left
[19:30] *** PhatEddy left
[19:34] *** barney joined
[19:41] *** amoc left
[19:46] <cspencer> rakudo: say acosec(pi/2)

[19:46] <p6eval> rakudo 042614: OUTPUT«0.819416801292645␤»

[19:46] <moritz_> cspencer: the release is done, feel free to push your trig patch

[19:47] <cspencer> just writing some spec tests, should be wrapped up in the next couple hours :)

[19:47] <cspencer> i think some of the functions may have been incorrect in the PIR, just verifying against the P5 Math::Trig module

[19:48] <moritz_> 10507 passing tests

[19:51] *** ejs1 left
[19:53] <frettled> nice!

[19:54] *** ruoso left
[19:54] <moritz_> now we need more tests

[19:56] <moritz_> http://nopaste.snit.ch/16389 # number of tests in t/, by category

[19:56] <cspencer> i should be adding several hundred more in a bit :)

[19:57] *** barney left
[19:59] <cspencer> moritz_: do you happen to know where a lot of the trig functions originated?

[19:59] *** rblasch1 joined
[19:59] <moritz_> cspencer: what do you mean? who wrote them?

[19:59] <cspencer> moritz_: yes

[20:00] <moritz_> cspencer: git blame is your friend ;-)

[20:00] <cspencer> heh, ok :)

[20:00] <cspencer> many of them were missing tests

[20:00] <moritz_> no surprise here

[20:00] <cspencer> and i'm using Math::Trig to auto-gen some right now, but the two don't agree

[20:00] <cspencer> and looking closer, i tend to think that some may be incorrect

[20:00] <cspencer> (for the less used ones like "acosec" at least)

[20:00] <moritz_> no surprise here ;-)

[20:01] <cspencer> so i'm going to rewrite them to agree with whatever Math::Trig says

[20:01] <cspencer> and assume that it's more correct

[20:01] <moritz_> I think atan2() changed a bit with Perl 6, so be careful there

[20:01] <moritz_> (but I don't remeber the details)

[20:01] <cspencer> that one's okay and is passing

[20:01] <moritz_> ok

[20:02] <cspencer> 22 down, 3 left to gen tests for

[20:04] *** irkoch joined
[20:06] *** ejs joined
[20:06] <pugs_svn> r26379 | szabgab++ | Smart::Links add more test, start reporting on unrecognized links

[20:09] *** rblasch2 joined
[20:09] *** rblasch1 left
[20:11] *** rblasch2 left
[20:12] <pugs_svn> r26380 | szabgab++ | fix the syntax of some smart links

[20:16] *** aindilis joined
[20:16] *** rblasch left
[20:17] <pugs_svn> r26381 | szabgab++ | Smart::Links eliminates some fals error reporting

[20:41] <[particle]> cspencer: i may be to blame for them

[20:41] <[particle]> it was so long ago...

[20:41] <[particle]> but they should be pretty easy to fix up, with proper tests

[20:42] <cspencer> [particle]: yes, it's no problem, it's just somewhat more difficult to verify sometimes :)

[20:46] <moritz_> anybody want to review/comment on a blog post before I publish it?

[20:47] <moritz_> http://nopaste.snit.ch/16390

[20:48] *** masak joined
[20:49] <masak> man, I should have test-run November before the Rakudo release. :/

[20:49] <pugs_svn> r26382 | szabgab++ | Smart::Links more tests

[20:49] * masak needs to write this down for next time

[20:49] <moritz_> masak: did it break horribly?

[20:49] <masak> I'm afraid so.

[20:49] <masak> I need someone to talk to about it... :)

[20:50] <masak> rakudo: for ["A"], 1, ["B"], 2 -> @x, $y { say @x, $y }

[20:50] <p6eval> rakudo 042614: OUTPUT«A1␤B2␤»

[20:50] <masak> rakudo: for ["A"], 1, ["B"], 2 -> Object @x, $y { say @x, $y }

[20:50] <p6eval> rakudo 042614: OUTPUT«Non-Positional argument or Positional of wrong element type for @x in call to _block32␤current instr.: 'die' pc 17536 (src/builtins/control.pir:225)␤»

[20:50] <masak> cspencer: around?

[20:50] <cspencer> masak: yessir

[20:50] <patmat> which tutorial is at the moment very good for perl6?

[20:50] <patmat> ebook, whatever

[20:50] <masak> rakudo: join '|'

[20:50] <p6eval> rakudo 042614: OUTPUT«Not enough arguments for join␤current instr.: 'die' pc 17536 (src/builtins/control.pir:225)␤»

[20:51] <cspencer> masak: uh oh

[20:51] <masak> cspencer: I see you ported join to the setting. kudos for that.

[20:51] <masak> however...

[20:51] <masak> cspencer: please don't introduce arbitrary constraints on perfectly good functions. it breaks peoples perfectly good code...

[20:52] <masak> cspencer: I'll stop now, before I get heated up. :) just don't do it.

[20:52] <masak> kthxbai.

[20:52] <cspencer> masak: sorry about that, i was relatively convinced at the time that i was following some spec :)

[20:52] <masak> cspencer: well, as far as I can tell...

[20:52] <masak> there's no such spec.

[20:53] <masak> Perl 5 thinks it's OK, S29 doesn't mention empty lists...

[20:53] * masak pushes a fix for that

[20:53] <moritz_> rakudo: say join();

[20:53] <p6eval> rakudo 042614: OUTPUT«Not enough arguments for join␤current instr.: 'die' pc 17536 (src/builtins/control.pir:225)␤»

[20:53] <moritz_> rakudo: say ().join

[20:53] <p6eval> rakudo 042614: OUTPUT«Cannot reduce() empty list␤␤»

[20:54] <cspencer> doh

[20:54] <cspencer> i should roll that back :(

[20:54] <masak> I'm doing it now.

[20:54] <cspencer> many mega apologies

[20:54] <masak> cspencer: it's OK. just don't do it again. :)

[20:54] <masak> we are heavy on forgiveness, as you know.

[20:54] <cspencer> masak: deal

[20:55] <masak> moritz_: also gives one more thing to spectest :P

[20:55] <moritz_> masak: I'm writing these now ;-)

[20:55] <masak> moritz_++

[20:55] <masak> the less November can be a test suite for regressions, the better.

[20:55] <[particle]> patmat: moritz_++ has a good tutorial if you know perl 5

[20:56] <[particle]> http://perlgeek.de/blog-en/perl-5-to-6/

[20:56] <masak> rakudo: for ["A"], ["B"] -> Object @x { say @x }

[20:56] *** dukeleto|work left
[20:56] <p6eval> rakudo 042614: OUTPUT«Non-Positional argument or Positional of wrong element type for @x in call to _block29␤current instr.: 'die' pc 17536 (src/builtins/control.pir:225)␤»

[20:56] <cspencer> masak: it was probably the "dies_ok({ join() }, 'join() must have arguments');" test in join.t that prompted that display of bad coding taste

[20:56] <masak> rakudo: for ["A"], ["B"] -> @x { say @x }

[20:56] <p6eval> rakudo 042614: OUTPUT«A␤B␤»

[20:57] <masak> cspencer: not so much bad taste as misreading what the test tested against.

[20:57] <cspencer> masak: yes, that too :)

[20:57] *** dukeleto|work joined
[20:58] <masak> is there any reason for the 'Object' version above to fail?

[20:58] *** alester left
[20:58] <skids> rakudo: ["A"].isa(Object).say

[20:58] <masak> rakudo: say ["A"] ~~ Array[Object]

[20:58] <p6eval> rakudo 042614: OUTPUT«1␤»

[20:58] <p6eval> rakudo 042614: OUTPUT«Use of protoobject as value␤0␤»

[20:59] <masak> skids: "Object @a" means "Positional @a of Object"

[20:59] <masak> er. kinda.

[21:00] <skids> Yes, but you are assigning @x[0] the value ["A"] not "A"

[21:00] <masak> indeed.

[21:00] <masak> that's the idea. that's why the param has a @ sigil.

[21:01] <skids>  for ["A"], ["B"] -> @x { say @x.perl.say }

[21:01] <masak> but the "Object" typing says something about the elements of @x, not about @x itself.

[21:01] <skids> rakudo: for ["A"], ["B"] -> @x { say @x.perl.say }

[21:01] <p6eval> rakudo 042614: OUTPUT«["A"]␤1␤["B"]␤1␤»

[21:02] <masak> skids: yes. that's what I expect.

[21:02] <skids>  rakudo: for [["A"]], [["B"]] -> Object @x { say @x }

[21:02] <p6eval> rakudo 042614: OUTPUT«Non-Positional argument or Positional of wrong element type for @x in call to _block31␤current instr.: 'die' pc 17536 (src/builtins/control.pir:225)␤»

[21:03] <masak> not sure p6eval responds if you put a space at the beginning like that.

[21:03] <skids>  rakudo: for *,* -> Whatever @x { say @x }

[21:04] <p6eval> rakudo 042614: OUTPUT«Non-Positional argument or Positional of wrong element type for @x in call to _block29␤current instr.: 'die' pc 17536 (src/builtins/control.pir:225)␤»

[21:05] <skids> rakudo: for 3,4 -> Num @x { say @x }

[21:05] <p6eval> rakudo f11795: OUTPUT«Non-Positional argument or Positional of wrong element type for @x in call to _block27␤current instr.: 'die' pc 17536 (src/builtins/control.pir:225)␤»

[21:05] <skids> rakudo: for [3],[4] -> Num @x { say @x }

[21:05] <p6eval> rakudo f11795: OUTPUT«Non-Positional argument or Positional of wrong element type for @x in call to _block29␤current instr.: 'die' pc 17536 (src/builtins/control.pir:225)␤»

[21:05] <pmichaud> Object @x  means   Positional[Object]

[21:06] <moritz_> and thus the same as @x (in block signatures)

[21:06] <moritz_> in all signatures, actually

[21:06] <pmichaud> I'm not sure of that.

[21:06] <pmichaud> There was a fair bit of discussion about parametric roles at NPW.

[21:07] <pmichaud> In particular, it was decided that [1,2,3]  is not  "does Positional[Int]"

[21:07] <moritz_> masak: there was a test in join.t that join() should die :/

[21:08] <pmichaud> I suppose a case could be made that all untyped arrays do Positional[Object], but afaik that hasn't been specced anywhere.  jnthn++ would be the one to clarify it.

[21:08] <pugs_svn> r26383 | moritz++ | [t/spec] test join on empty list

[21:11] *** masak left
[21:13] *** ispy_ left
[21:13] *** ejs left
[21:20] * jnthn back from the krčma

[21:20] <jnthn> BA.pm were quite happy about having the release named after them. :-)

[21:20] <jnthn> rakudo: my @a; say @a ~~ Positional

[21:20] <p6eval> rakudo f11795: OUTPUT«1␤»

[21:20] <jnthn> rakudo: my @a; say @a ~~ Positional[Object]

[21:20] <p6eval> rakudo f11795: OUTPUT«0␤»

[21:21] <jnthn> my @a; say @a.of

[21:21] <jnthn> rakudo: my @a; say @a.of

[21:21] <p6eval> rakudo f11795: OUTPUT«Object␤»

[21:21] <pmichaud> jnthn: excellent

[21:21] <pmichaud> rakudo:   say /x/.WHAT;

[21:21] <moritz_> jnthn: do you think @a ~~ Positional[Object] should be True?

[21:21] <p6eval> rakudo f11795: OUTPUT«Regex␤»

[21:21] <jnthn> pmichaud++

[21:21] <pmichaud> rakudo:  $_ = 'abc';   say /b/ ?? 'yes' !! 'no';

[21:21] <p6eval> rakudo f11795: OUTPUT«yes␤»

[21:22] <pmichaud> rakudo:  $_ = 'abc';   say /x/ ?? 'yes' !! 'no';

[21:22] <p6eval> rakudo f11795: OUTPUT«no␤»

[21:22] *** wknight8111 joined
[21:22] <jnthn> moritz_: I know why it's being considered not that.

[21:22] <jnthn> moritz_: But the .of result is correct and thus I think it should do Positional[Object].

[21:23] <moritz_> jnthn: good

[21:23] <jnthn> moritz_: Is there a test and a ticket?

[21:23] <moritz_> rakudo: say <foo bar>.keys.of

[21:23] <p6eval> rakudo f11795: OUTPUT«Object␤»

[21:23] <moritz_> jnthn: don't think so (unless masak just reported one)

[21:23] <moritz_> revdiablo: and in this example, should it give Int?

[21:24] <moritz_> revdiablo: sorry, I meant jnthn 

[21:24] <moritz_> where did that r come from? ;-)

[21:25] <jnthn> moritz_: I think maybe not.

[21:25] <jnthn> moritz_: I'm not sure I like typed arrays just "appearing"...

[21:25] <jnthn> When they weren't asked for.

[21:25] <jnthn> Also, I suspect .keys may not always be Int.

[21:26] <moritz_> hm

[21:26] <jnthn> (e.g. see custom keys or whatever they're called in S09)

[21:26] <moritz_> if they are custom, then .keys.of can be of that custom type

[21:26] *** dalek left
[21:26] *** dalek joined
[21:28] <jnthn> I'm not totally convinced they need all be of the same type.

[21:28] <moritz_> ok, we'll leave it for now then

[21:28] <jnthn> IMO, we really shouldn't be nailing down expected return types too soon in these cases.

[21:29] <pmichaud> moritz:  (blog post)  there's an error in

[21:29] <pmichaud> # output:

[21:29] <pmichaud> # a | b

[21:29] <pmichaud> # c | c

[21:29] <moritz_> ah, right

[21:29] * moritz_ should really copy&paste more

[21:29] <moritz_> pmichaud: thanks

[21:29] <pmichaud> for the use of .kv on a list, it's probably worth showing what the output would be.

[21:30] <pmichaud> Perl 5 folks might not immediately accept array element indices as "keys"

[21:30] <pmichaud> other than those items, it looks like a good post to me.

[21:31] <pmichaud> (even with those items it's a good post :-)

[21:31] * moritz_ pushes to test dalek

[21:31] <jnthn> I would do a Rakudo day tomorrow, but after a while away I have quite a pile of tasks tomorrow that would be rather a distraction.

[21:31] <jnthn> So will do a couple of 'em next week when things are calmer.

[21:31] <pmichaud> jnthn: I somewhat expected them to wait until next week :-)

[21:31] <moritz_> pmichaud: if can think of any other easy-to-explain but impressive feature that I could right about I'd be glad

[21:31] <pmichaud> (for exactly the reason you cited :-)

[21:32] <pmichaud> I think sorting hashes by value is easy-to-explain and impressive

[21:32] <pmichaud> also reductions.

[21:32] <moritz_> you means %h.sort: *.value ?

[21:32] <pmichaud> yes.

[21:32] <pmichaud> Considering what it required in P5.

[21:32] <jnthn> Some folks tonight were quite impressed with if [==] @foo { }

[21:33] <jnthn> And similar.

[21:34] <jnthn> pmichaud: I thought I might find time for it, because as of Monday my task list for this week was pretty light. But since I got back quite a few little bits appeared.

[21:34] *** skids left
[21:34] <pmichaud> also, being able to do things like  sort by case-insensitive value:    %h.sort: *.value.lc

[21:34] <jnthn> Anyway, next week. :-)

[21:34] <jnthn> Oh, the *.foo is *so* nice. :-)

[21:34] <jnthn> Does that second one work?

[21:34] <pmichaud> afaik it does

[21:35] <moritz_> rakudo: say {a => 'f' b => 'G' }.sort(*.value.lc).perl

[21:35] <p6eval> rakudo f11795: OUTPUT«Statement not terminated properly at line 1, near "b => 'G' }"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[21:35] <moritz_> rakudo: say {a => 'f', b => 'G' }.sort(*.value.lc).perl

[21:35] <p6eval> rakudo f11795: OUTPUT«invoke() not implemented in class 'String'␤current instr.: 'parrot;Any;!COMPARE_DO' pc 13582 (src/builtins/any-list.pir:356)␤»

[21:35] <pmichaud> my %h = <a alpha c Charlie b BETA>;  say %h.sort(*.value.lc).perl;

[21:36] <pmichaud> ooh, I'm guessing it doesn't.

[21:36] <pmichaud> my %h = <a alpha c Charlie b BETA>;  say %h.sort({.value.lc}).perl;

[21:36] *** cognominal joined
[21:36] <pmichaud> rakudo: my %h = <a alpha c Charlie b BETA>;  say %h.sort({.value.lc}).perl;

[21:36] <p6eval> rakudo f11795: OUTPUT«["a" => "alpha", "b" => "BETA", "c" => "Charlie"]␤»

[21:36] <pmichaud> rakudo: my %h = <a alpha c Charlie b BETA>;  say %h.sort(*.value.lc).perl;

[21:36] <p6eval> rakudo f11795: OUTPUT«invoke() not implemented in class 'String'␤current instr.: 'parrot;Any;!COMPARE_DO' pc 13582 (src/builtins/any-list.pir:356)␤»

[21:36] <jnthn> Thing is that *.value becoems a closure.

[21:37] <pmichaud> *.value.lc doesn't do the expec.... right

[21:37] <ingy> pmichaud: did you figger out that mac bug?

[21:37] <jnthn> I don't see an easy way to deal with that issue.

[21:37] <pmichaud> ingy: no, not yet.  I still need to get some other darwin testers on it.

[21:37] <ingy> pmichaud: anything I can do to help?

[21:38] <pmichaud> ingy: at this stage, I'd say make sure there aren't any copies of rakudo or parrot on the system, and try with a fresh checkout.

[21:38] <pmichaud> When you get to the stage that fails, we'll want to slap gdb on it.

[21:38] <pmichaud> and get a backtrace

[21:38] <pmichaud> and start looking from there.

[21:39] <jnthn> Did we not take a backtrace and find it failed in library loading?

[21:39] *** davidad left
[21:39] <pmichaud> yes, but I didn't copy the backtrace   (pmichaud--)

[21:39] <pmichaud> I got sidetracked onto some other task, I think.

[21:40] <jnthn> ah, ok

[21:40] <jnthn> well, debugging from there needs some gdb skill I guess.

[21:40] <jnthn> I know enough to get a bt but little beyond that.

[21:40] <Tene> jnthn: I'm getting a really weird segfault in my rakudo branch (porting to .HLL 'Perl6')... I ran out of time to debug it last night.

[21:40] <Tene> If you're in the mood to deal with segfaults... ;)

[21:41] <Tene> I'll be trying again in a few hours, hopefully.

[21:42] <jnthn> I suspect I'll be asleep in a few hours.

[21:42] *** donaldh joined
[21:43] <jnthn> If you can get a bt or stick the stuff in a branch so I can pull it and try it out though, can probably look soonish.

[21:43] <Tene> It's in the 'hll' branch

[21:43] <Tene> http://nopaste.snit.ch/16388 is the start of the bt...

[21:44] <jnthn> stack overflow, maybe?

[21:45] <Tene> it's some hundred thousand stack frames in.

[21:45] <Tene> so, likely

[21:45] <jnthn> Something to do with creating the PMCProxy recursively for a type.

[21:46] <Tene> right.

[21:46] <jnthn> Or trying to...

[21:46] *** jferrero joined
[21:46] <Tene> I didn't remember the syntax to go to the end of the bt until I saw moritz doing it in the scrollback today

[21:46] <jnthn> I guess trying to work out which PMC the PMC Proxy is failing to create is a good first step.

[21:46] <Tene> (bt -20)

[21:47] <moritz_> Tene: it wasn't me, but thanks for speaking well of me ;-)

[21:47] <Tene> moritz_: I was reading scrollback before really waking up, so... not surprised I got it wrong.

[21:55] <bacek> rakudo: rule c_body { '{' ~ '}' [ .* <c_body>* ] }; say '{ blah }' ~~ /<c_body>/;

[21:55] <p6eval> rakudo ffcde8: OUTPUT«Unable to parse c_body, couldn't find final '}'␤current instr.: 'parrot;PGE;Match;FAILGOAL' pc 2953 (compilers/pge/PGE/Regex.pir:458)␤»

[21:55] <bacek> What I'm doing wrong?

[21:56] <moritz_> bacek: PGE currently doesn't backtrack to find the closing delimiter

[21:56] <bacek> rakudo: rule c_body { '{' ~ '}' [ <-[{}]>* <c_body>* ] }; say '{ blah }' ~~ /<c_body>/;

[21:56] <p6eval> rakudo ffcde8: OUTPUT«{ blah }␤»

[21:56] <bacek> ah!

[21:56] <bacek> rakudo: rule c_body { '{' ~ '}' [ <-[{}]>* <c_body>* ] }; say '{ blah { foo } }' ~~ /<c_body>/;

[21:56] <p6eval> rakudo ffcde8: OUTPUT«{ blah { foo } }␤»

[21:56] <pmichaud> yes, I need to change that.

[21:56] <pmichaud> fixing.

[21:57] <bacek> hooray. It works.

[22:01] *** jnthn left
[22:01] *** buu left
[22:01] *** Maddingue left
[22:01] *** IRSeekBot left
[22:02] *** jnthn joined
[22:02] *** zev joined
[22:02] *** IRSeekBot joined
[22:02] *** Maddingue joined
[22:02] *** buu joined
[22:02] *** irc.freenode.net sets mode: +o jnthn

[22:02] <cspencer> is anyone else experiencing a build failure on rakudo HEAD?

[22:02] *** donaldh left
[22:03] <pugs_svn> r26384 | pmichaud++ | Update goal-matching semantics to allow expression backtracking.

[22:03] <cspencer> i'm getting this error: http://pastie.org/456398

[22:04] *** iblechbot left
[22:04] <Tene> jnthn: could you reproduce?

[22:04] <pmichaud> cspencer: make sure your parrot is up-to-date.

[22:05] <jnthn> Tene: Kinda distracted with other stuff atm, sorry...

[22:05] <jnthn> Will probably be tomorrow before I can look at it.

[22:05] <Tene> jnthn: no problem.  don't worry about it.  :)

[22:05] <jnthn> I'm still feeling a little sleep-deprived post-NPW and hackathon.

[22:05] *** wayland76 joined
[22:05] <jnthn> (Which were entirely worth getting sleep deprived for.)

[22:07] <pugs_svn> r26385 | pmichaud++ | Revert previous commit -- changing the order isn't quite so straightforward.

[22:07] <wayland76> I missed that, but I'm sleep deprived :)

[22:14] *** nihiliad left
[22:20] *** pmurias joined
[22:21] <eiro> my %foo = ( goo => < i want a hash > ); %foo<goo> is an array here. how to tell perl6 to have a hash ? 

[22:23] <moritz_> my %foo = goo => {  #[ hash here ] };

[22:23] *** pmurias left
[22:24] *** wknight8111 left
[22:25] <eiro> moritz_, that's what i tried but %foo.perl gives me {"goo" => { ... }}

[22:25] <eiro> that's weird! 

[22:25] <eiro> my %foo = ( goo => { < i want a hash > } ); say %foo.perl; 

[22:25] <eiro> rakudo: my %foo = ( goo => { < i want a hash > } ); say %foo.perl; 

[22:25] <p6eval> rakudo ffcde8: OUTPUT«{"goo" => { ... }}␤»

[22:26] <jnthn> That's because { } in this case is creating a block.

[22:26] <jnthn> Put hash in front to disambiguate.

[22:29] <eiro> jnthn, i understood the pb but not the solution 

[22:34] <jnthn> rakudo: my %foo = ( goo => hash { < i want a hash > } ); say %foo.perl;

[22:34] <p6eval> rakudo ffcde8: OUTPUT«Odd number of elements found where hash expected␤current instr.: 'parrot;Perl6Hash;!STORE' pc 10204 (src/classes/Hash.pir:237)␤»

[22:35] <jnthn> closer ;-)

[22:35] <jnthn> rakudo: my %foo = ( goo => hash { < i want a hash >.pairs } ); say %foo.perl;

[22:35] <p6eval> rakudo ffcde8: OUTPUT«Odd number of elements found where hash expected␤current instr.: 'parrot;Perl6Hash;!STORE' pc 10204 (src/classes/Hash.pir:237)␤»

[22:35] <jnthn> rakudo: my %foo = ( goo => hash < i want a hash > ); say %foo.perl;

[22:35] <p6eval> rakudo ffcde8: OUTPUT«{"goo" => {"i" => "want", "a" => "hash"}}␤»

[22:35] <jnthn> oh yay.

[22:39] <eiro> oh! last syntax is cool! 

[22:39] <eiro> thanks 

[22:40] *** exodist left
[22:41] <eiro> 'night all! 

[22:41] *** km2 left
[22:50] *** Limbic_Region joined
[23:02] *** payload joined
[23:06] *** skids joined
[23:14] *** jferrero left
[23:19] *** fridim_ left
[23:24] *** hcchien_ joined
[23:24] *** hcchien left
[23:24] <japhb> moritz_: what formatter is http://nopaste.snit.ch/16390 written for?

[23:27] *** payload left
[23:38] *** hcchien joined
[23:38] *** hcchien_ left
[23:46] <pugs_svn> r26386 | cspencer++ | Expanded coverage for trigonometry subs.

[23:47] <LylePerl> lyle

[23:48] <LylePerl> Oops, was supposed to be searching if someone had mentioned me or asked something :(

[23:52] *** cspencer left
[23:52] *** xinming_ left
[23:53] *** mjk joined
[23:56] *** mjk left
[23:57] *** clkao_ joined
[23:57] *** clkao left
