[00:00] *** lumi_ joined
[00:06] *** justatheory joined
[00:07] *** justatheory left
[00:19] *** TimToady joined
[00:23] *** rhr_ joined
[00:25] *** justatheory joined
[00:27] *** justatheory left
[00:34] *** justatheory joined
[00:36] *** rhr left
[00:36] *** asciiville left
[00:59] *** shinobi-cl left
[00:59] *** alester_ joined
[01:11] *** orafu left
[01:11] *** orafu joined
[01:13] *** shinobi-cl joined
[01:23] *** Whiteknight left
[01:45] *** xomas_ left
[01:46] *** xinming_ joined
[01:47] *** shinobi-cl left
[01:52] *** xomas_ joined
[01:53] *** missingthepoint joined
[01:55] *** alester_ left
[02:00] *** xinming left
[02:03] *** wayland76 joined
[02:04] *** dKingston left
[02:08] *** lucs left
[02:12] *** flexibeast joined
[02:13] *** explorer left
[02:22] *** alester_ joined
[02:33] *** molaf joined
[02:36] *** cognominal left
[02:45] *** meppl left
[02:50] *** jauaor joined
[03:04] *** sri_kraih joined
[03:05] *** hoelzro joined
[03:17] *** hoelzro left
[03:20] *** donaldh left
[03:20] *** donaldh joined
[03:24] *** cotto left
[03:26] *** hoelzro joined
[03:29] *** dukeleto joined
[03:38] *** hoelzro left
[03:42] *** hoelzro joined
[03:42] *** hoelzro left
[03:43] *** molaf left
[03:45] *** hoelzro joined
[03:59] *** synth joined
[04:04] *** hoelzro left
[04:08] *** dukeleto left
[04:18] *** hoelzro joined
[04:19] *** hoelzro left
[04:20] *** synthEEEE joined
[04:21] *** synth^3 joined
[04:24] *** ihrd joined
[04:25] *** nihiliad left
[04:30] *** dukeleto joined
[04:30] <dukeleto> hola

[04:30] *** dukeleto left
[04:39] <wayland76> phenny: ?

[04:41] *** synth left
[04:41] *** synth joined
[04:43] <wayland76> halo ?

[04:43] <wayland76> :)

[04:44] <wayland76> phenny: tell pmichaud I've found some problems with the "install" section of the ins2 makefile.  I hope to have a patch by the end of (my) day

[04:44] <phenny> wayland76: I'll pass that on when pmichaud is around.

[04:44] *** synthEEEE left
[04:49] *** synth^3 left
[05:03] *** kane___ joined
[05:13] *** szabgab joined
[05:17] *** kane_ left
[05:23] *** arejay left
[05:23] *** orafu left
[05:23] *** Patterner left
[05:23] *** rjh left
[05:23] *** c1sung left
[05:23] *** antiphase left
[05:23] *** shachaf left
[05:23] *** eternaleye left
[05:23] *** justatheory left
[05:23] *** Aisling left
[05:23] *** arthur-_ left
[05:28] *** Aisling joined
[05:28] *** arthur-_ joined
[05:28] *** orafu joined
[05:28] *** Patterner joined
[05:28] *** arejay joined
[05:28] *** eternaleye joined
[05:28] *** shachaf joined
[05:28] *** rjh joined
[05:28] *** c1sung joined
[05:28] *** antiphase joined
[05:39] *** cotto joined
[05:47] <eternaleye> (way, way, _way_ backlogging) re the discussion over dies_ok and specific error types, why not use junctions? none(X::Internal) would be the 'anything but Null PMC' equivalent,  with any() also DWIM-ing, possibly with a multi that accepts a single type for the 'simple case'

[05:49] <eternaleye> It would even be compatible with using smartmatch internally to do the comparison

[05:51] *** synthEEEE joined
[05:58] *** payload left
[06:03] *** synth left
[06:10] *** FurnaceBoy left
[06:15] *** synth joined
[06:15] *** rfordinal left
[06:15] *** rfordinal joined
[06:21] *** synth left
[06:21] <moritz_> eternaleye: the real problem is that we need to define the things like  X::Internal first, and what they are etc

[06:23] *** szabgab left
[06:24] *** kane___ left
[06:24] *** synthEEEE left
[06:32] *** alester_ left
[06:32] *** japhb_ joined
[06:33] *** Iqbal joined
[06:33] *** Iqbal left
[06:34] *** rfordinal left
[06:37] *** japhb left
[06:48] *** agentzh left
[06:49] *** agentzh joined
[06:50] <wayland76> phenny: tell pmichaud Ok, patch for ins2 branch added to http://rt.perl.org/rt3/Ticket/Display.html?id=63360

[06:50] <phenny> wayland76: I'll pass that on when pmichaud is around.

[06:55] *** iblechbot joined
[07:01] *** kane_ joined
[07:01] <missingthepoint> newbie question: 1. how do i tell rakudo to load libicu?

[07:02] <missingthepoint> 2. why do i need to? shouldn't it load by default if it's available?

[07:02] <moritz_> you have to tell parrot's Configure.pl to use it

[07:02] <moritz_> but it should be used by default.

[07:02] <moritz_> if available

[07:02] *** snearch joined
[07:02] <missingthepoint> hmm

[07:06] <wayland76> missingthepoint: What distro/OS?

[07:06] <missingthepoint> is there a rakudo make target that cleans out the built parrot?

[07:07] <missingthepoint> ('realclean' doesn't)

[07:07] <missingthepoint> wayland76: the os of maximal perversity

[07:08] <wayland76> What, you mean you're trying to run Windows on top of AmigaOS?

[07:08] <wayland76> Or are we just talking about plain, ordinary perversity, such as using Windows?

[07:08] <missingthepoint> plain, ordinary perversity, which is plenty for me today

[07:09] <moritz_> missingthepoint: delete the parrot/ dir, and you're done

[07:10] <missingthepoint> moritz_: should that be included in any of the existing make targets, or is it done v. infrequently?

[07:10] <missingthepoint> i guess it doesn't matter if rakudo moves to building against system parrot anyways

[07:10] <moritz_> right; I rarely do it

[07:10] <wayland76> missingthepoint: just what I was going to say

[07:11] <moritz_> (and on my system parrot is just a symlink to a git-svn checkout)

[07:11] <wayland76> I'm hoping my patch to the ins2 branch will clear up most of the remaining problems

[07:11] <missingthepoint> can you do symlinks anyhow on windows xp?

[07:11] * missingthepoint pines for a real OS

[07:12] <wayland76> missingthepoint: I thought shortcuts were equivalent, but not sure

[07:13] <missingthepoint> wayland76: nah, they're, well... perverse

[07:14] <missingthepoint> Unix fs symlinks are kinda the simplest possible thing that could work... but they also turn out to be the best IMHO

[07:16] <moritz_> missingthepoint: I'm not on PerverseOS

[07:16] <missingthepoint> moritz_: i envy you. unfortunately work and uni stuff mean Windows Xtremely Pervers is my easiest option

[07:18] *** Su-Shee joined
[07:18] <Su-Shee> good morning. :)

[07:18] <moritz_> good morning

[07:18] <moritz_> missingthepoint: I feel with you.

[07:18] <missingthepoint> good morning, Su-Shee :)

[07:20] *** donaldh left
[07:20] *** dakkar joined
[07:20] <wayland76> missingthepoint: I've been Linux-only since I stopped using Windows 98, at least at home

[07:21] <wayland76> I used Win2K at work for a while, but that's it

[07:21] *** donaldh joined
[07:21] <wayland76> So XP and Vista are things I've used only on others' computers

[07:23] <missingthepoint> wayland76: i'd be *nix-only in a jiffy, but emulated Photoshop <censored>

[07:23] <wayland76> What about Mac OS?  Or is that too $$$?

[07:24] <missingthepoint> honestly, haven't investigated much. that could even be ideal - OS X and up are beautiful within and without

[07:25] *** rfordinal joined
[07:26] <wayland76> I know a guy whose job is Windows Server, and at home, he's using Mac and Linux

[07:26] <wayland76> He was fine with Windows, until Vista came along

[07:26] <missingthepoint> heh

[07:26] <Su-Shee> It's coming in handy not gaming at all.. I'm Linux/BSD for 14 years now. ;)

[07:27] * missingthepoint high-fives Su-Shee 

[07:27] <wayland76> I play games -- web-based games :)

[07:28] * missingthepoint wishes he were stronger

[07:28] <wayland76> missingthepoint: exercise works better for that than wishes :)

[07:28] <Su-Shee> missingthepoint: I'm very passionate about open source and open access, so I use it.

[07:29] <Su-Shee> it's somewhat like the first waves of treehuggers or green parties: until "being green" was convenient, you had to carry your empty bottle a kilometre to the next container...

[07:29] <eternaleye> missingthepoint: Well, Linux ought to have PCI passthrough support for KVM virtual machines before too long, which means accelerated graphics in VMs. And someone already got OSX working in a VM

[07:30] <eternaleye> And Windows in a VM already works fine

[07:30] <missingthepoint> Su-Shee: in my case, "carrying the bottle a kilometre" means not drinking (unless Gimp can handle PSD files)

[07:31] <eternaleye> missingthepoint: It can handle some of them

[07:31] <Su-Shee> PSD?

[07:31] <eternaleye> partial support

[07:31] <eternaleye> PhotoShop Drawing

[07:31] <missingthepoint> photoshop documents

[07:31] *** ihrd left
[07:31] <wayland76> And with all the money you save by not buying Windows, you can get better hardware :)

[07:31] <missingthepoint> (drawing) :)

[07:31] <eternaleye> missingthepoint: It was a guess anyway

[07:31] <Su-Shee> ah

[07:32] *** szabgab joined
[07:32] <missingthepoint> eternaleye: maybe i can switch soon. i would like that very much... :)

[07:33] *** zamolxes_ left
[07:34] <Su-Shee> gimp somewhat sucks in terms of usability, but it's rather powerful.

[07:34] <missingthepoint> Su-Shee: i think you just described a lot of open source stuff ;)

[07:34] <missingthepoint> (though that has improved a LOT since i started using Linux)

[07:35] <Su-Shee> I decided to focus on the "powerful" thing.. :) 

[07:36] <missingthepoint> good choice. i reckon it's easier to customize something powerful yourself...

[07:36] <missingthepoint> than to wrestle with a deficient foundation.

[07:37] * missingthepoint peers at windows accusingly

[07:37] <Su-Shee> well I was somewhat lucky in a strange way, because I had to learn Linux the hard way in 1995, so I was never pampered by any attempt to make Linux read for the desktop or easier to use anyway. 

[07:37] <Su-Shee> ready.

[07:38] <missingthepoint> Su-Shee: somewhat similar, though a little later (1999)

[07:38] <Su-Shee> I annoyed 10 people for 3 month with extremely stupid questions and that was it. :)

[07:39] <missingthepoint> heh... i didn't annoy anyone, but learned very slowly as a result

[07:39] <missingthepoint> i wish i'd had people to annoy, or at least someone to say "read man pages, learn shell scripting, then learn C"

[07:40] <Su-Shee> well I wasn't really faster that way. ;)

[07:40] <Su-Shee> well I ignored shell and C and started with Perl. 

[07:40] <Su-Shee> because it was the programming language having a somewhat userfriendly book. ;)

[07:40] <Su-Shee> (and not some academic computer science thing..)

[07:40] <missingthepoint> TimToady++ :)

[07:41] <moritz_> Su-Shee: "learning" or "programming" perl?

[07:41] <wayland76> The power vs. user-friendly thing depends on how much you use it

[07:41] <Su-Shee> moritz_: neither. the pink perl 4 book

[07:41] * missingthepoint thinks linguistics + programming languages is a happy marriage

[07:41] <wayland76> I only use gimp once or twice a year, and never approach its full power

[07:42] <moritz_> Su-Shee: never heard of that; that's way before my programming time :-)

[07:42] <Su-Shee> missingthepoint: I can honestly say, that I probably wouldn't have gotten into programming if it wasn't for Perl and the kind of documentation it offered.

[07:42] <wayland76> I actually started as a Solaris user on my Uni's machines, also in 1995

[07:42] <szabgab> can someone point me to where is anything regarding sockets ? specifically lwp like things ?

[07:42] <wayland76> But it wasn't until I got the hang of the admin side of things that I could ditch WIndows

[07:42] <Su-Shee> moritz_: I bought it more or less when 5 came out, so I got the blue "programming perl" next.

[07:42] <wayland76> ...and until there was a decent package manager :)

[07:43] <moritz_> szabgab: t/spec/S32-io/IO-Socket-INET.t tests rakudo's sockets

[07:43] <szabgab> ty

[07:43] <szabgab> do you know what happened to the LWP::Simple of Cosimo ?

[07:44] <wayland76> I got into Perl just as Perl 5 was getting widespeard, so I was mostly able to avoid P4

[07:44] <Su-Shee> szabgab: there was a p6 lwp?

[07:44] <szabgab> Su-Shee, http://use.perl.org/~cosimo/journal/38826

[07:44] <eternaleye> (way, way, _way_ backlogging still) Khisanth: re parsing HTML being ugly: why? Just use single quotes: `rule tag {'<' $<name>=(\w)[<.ws><attribute>]* [['>' [ <content> | <tag> ] '</' $<name>  '>'] | '/>'] }` looks pretty readable to me

[07:44] <szabgab> he implemented it while I was teaching Perl 6 to TimToady  ;-)

[07:45] <Su-Shee> szabgab: totally missed it. 

[07:45] <Su-Shee> szabgab: and I commented 2.5 hours yesterday. ;)

[07:45] <szabgab> yes, thanks

[07:45] <moritz_> I don't think the source has mad it to any repostiory yet :(

[07:45] <szabgab> cosimo, ping ping , what happened to LWP ?

[07:46] *** frettled left
[07:47] <Su-Shee> moritz_: I really asking myself how much p6 we're missing.

[07:48] <missingthepoint> Su-Shee: I think I would have gotten into programming regardless, I waded through a C++ for dummies book to teach myself C

[07:48] <missingthepoint> Su-Shee: but Perl 5 was a special treat ;)

[07:48] <moritz_> Su-Shee: you mean there's a Perl 6 DarkPAN? :-)

[07:50] <Su-Shee> I'm sure of it. :)

[07:50] <Su-Shee> missingthepoint: *shiver* :)

[07:50] <missingthepoint> Su-Shee: you don't know the half of it.

[07:51] *** cognominal joined
[07:51] <Su-Shee> missingthepoint: I really never got friends with C. I can handle it and I like to do more for Arduino and X stuff, but that's it.

[07:52] <Su-Shee> moritz_: did you release all experiements in p6 you made?

[07:52] <Khisanth> eternaleye: heh well generally the main issue with html isn't parsing perfectly well-formed documents ...

[07:52] *** cognominal left
[07:53] <moritz_> Su-Shee: surely not, but I deleted nearlly all of them sooner or later

[07:53] <moritz_> or blogged them :-)

[07:53] <moritz_> or sent to RT :-)

[07:53] <missingthepoint> Su-Shee: C was my first love. I don't use it much, but it was my first language...

[07:54] <eternaleye> Khisanth: Well, in that case it's more of an 'ugly in, ugly out' situation ( or, 'ugly in, ugly parse' ;D )

[07:54] <Su-Shee> moritz_: ah yes. the deleted Perl 6 part is also very large on my hd. :)

[07:54] <Su-Shee> missingthepoint: mine the .. 4th or so..

[07:54] * missingthepoint thinks he'll keep his Perl6 learning attempts for later lulz

[07:55] <Su-Shee> if rakudo really is released in spring '10, I think I have to actually put something out there.

[07:57] <moritz_> Su-Shee: I hope you know that it's not a "Perl 6 is done" release, but rather a "we've got so far yet, check it out" release

[07:58] * Juerd_ expects Perl 6 to be done by the first christmas after spring then :)

[07:58] <Su-Shee> moritz_: the more additional written code is available, the easier people will adopt it, I expect.

[07:58] *** masak joined
[07:59] <Su-Shee> moritz_: and be it only to illustrate how to handle perl 6.

[07:59] <missingthepoint> are there plans to port bits of CPAN to P6? beyond Web.pm?

[07:59] <moritz_> missingthepoint: Tim Bunce is planning to port DBI to parrot

[07:59] <missingthepoint> (and the nebulous LWP::Simple)

[08:00] <missingthepoint> awesome!

[08:00] <moritz_> and I volunteered to add a Perl 6 layer

[08:00] <Matt-W> Morning

[08:00] <moritz_> oh, and there's an SVG module somewhere, a templating engine that masak works on etc.

[08:00] <Su-Shee> missingthepoint: let me put it that way: no matter how cool a programming language in itself might be - what use is it, if there is nothing like .. let's say SSL, database access, GUI bindings...

[08:00] <missingthepoint> double awesome.

[08:00] <masak> morn'

[08:00] <moritz_> speaking of the devil... :-)

[08:00] <Matt-W> missingthepoint: We intend that there will be libraries. We're hoping we won't have to write them all though :)

[08:01] <missingthepoint> Su-Shee: yes. bindings matter. hence the massive CPAN win. (that's what attracted me to Perl initially, actually)

[08:01] <Matt-W> masak: I liked your last Web.pm blog post

[08:01] <masak> Matt-W: thank you. it was a bitch to write. :)

[08:01] <moritz_> missingthepoint: http://github.com/masak/proto/blob/96b06b0ad0212ed73fc5383187444ecc52dd4e5b/projects.list

[08:01] *** frettled joined
[08:01] *** kst left
[08:02] <Su-Shee> missingthepoint: I think the reddit switch from lisp to python because of the environment missing is a lesson.

[08:02] *** kst joined
[08:04] <missingthepoint> moritz_: thankyou, that is great!

[08:04] <masak> I haven't backlogged, but the discussion you're having seems _very_ interesting.

[08:04] *** explorer joined
[08:04] <masak> providing a kick start for web-related libraries is one very important goal for Web.pm.

[08:05] <missingthepoint> masak: what's missing in p6 web-related libraries right now?

[08:05] <masak> missingthepoint: many things. I'd like Expat bindings, for example.

[08:05] <missingthepoint> that's eminently sensible.

[08:05] <masak> I'd like an XPath search library, and a CSS search library.

[08:06] <masak> an HTML tagsoup parser.

[08:06] <masak> most of these things are importable from the outside.

[08:06] <Su-Shee> rss, atom, web services APIs

[08:06] <missingthepoint> masak: you mean like HTML::Parser does currently, or something else?

[08:06] <missingthepoint> and what do you mean "importable..."?

[08:06] <masak> missingthepoint: haven't looked at HTML::Parser, but I guess yes.

[08:06] <masak> missingthepoint: I mean I don't care if they're pure-Perl6 at this point.

[08:07] <missingthepoint> ah, ok

[08:07] <cosimo> szabgab: afaik, LWP::Simple it's working. It was last time I tried.

[08:07] <szabgab> but where is it ?

[08:07] <cosimo> szabgab: you can find it in the S32-settings lib, IINM

[08:07] <missingthepoint> html parser docs <-- "We have tried to make it able to deal with the HTML that is actually 'out there'"

[08:07] <cosimo> szabgab: hold on, i can send you a link

[08:07] <masak> this weekend I had a guy called arthur-_ come and volunteer for writing Astaire, our Sinatra clone. that makes me very happy.

[08:08] <masak> missingthepoint: yes, like that.

[08:09] *** huf left
[08:10] <szabgab> cosimo, it would be better as I cannot find it

[08:10] <Matt-W> masak: Not that it means anything, but I considered volunteering, I just don't have time... need to do more work on Form with the tuits I have

[08:10] <masak> Matt-W: not that it means anything either, but I'd love to have your tuits on the project. but I'd like more to see Form commits. :)

[08:12] *** fridim_ joined
[08:12] <cosimo> szabgab: ok, will send a link Soon(tm)

[08:13] <Su-Shee> szabgab: here's another great example of perl totally being ignored... http://arstechnica.com/open-source/guides/2009/07/how-to-build-a-desktop-wysiwyg-editor-with-webkit-and-html-5.ars

[08:14] <szabgab> Su-Shee, that is in Python

[08:15] <moritz_> it ignores all other languages too

[08:15] <Su-Shee> szabgab: exactly my point.

[08:16] <Su-Shee> szabgab: arstechnica generally makes its examples and hacks NOT in perl even though it would be perfectly possible.

[08:16] <szabgab> Su-Shee, so now you have the platform to build it :-)  over at #padre ..

[08:16] <Matt-W> masak: you'd just like more of everything wouldn't you?

[08:16] <masak> Matt-W: aye! keep it coming.

[08:17] *** cognominal joined
[08:18] <szabgab> Su-Shee, I don't know how arstechnica decides in which language to show soething, isn't that authors writing that they post?

[08:19] <szabgab> so if somone wants more perl content there (5 or 6) she should write articles get it posted there

[08:19] <szabgab> or at a minimum find out what is needed to post an article and blog about it

[08:19] <Su-Shee> szabgab: ryan paul is either an editor anyway or the "I write the tutorials and examples" gui. the point I'm trying to make is that this is a very well received site and they do their examples not in Perl. if you read this, you wouldn't even guess that Perl has great GUI bindings.

[08:20] <Su-Shee> szabgab: it's a perception thing par excellence.

[08:20] <szabgab> thank you :-)

[08:22] <Su-Shee> oeh.. guy I mean. :)) too much GUI here. :)

[08:30] <szabgab> I have a working LWP::Simple now on my HD

[08:31] <szabgab> but I'd better reuse and extend the one cosimo wrote

[08:31] <moritz_> inverse NIH syndrome? :-)

[08:31] <Su-Shee> moritz_: this perlblog.org thing... can I have one?

[08:32] <moritz_> Su-Shee: sure, as soon as I have set up something working

[08:32] <Su-Shee> moritz_: I see.. I wanted to avoid that I have to get something working on my webhost.. ;)

[08:32] <szabgab> moritz_,  HIN

[08:33] <szabgab> Hate Inventing New

[08:34] <moritz_> Su-Shee: there seems to be a "move away from use.perl.org" wave that I want to catch. But first I have to get something up and running :/

[08:35] <Su-Shee> moritz_: don't let me pressure you, I'm just to lazy to install movable type on my webhoster..

[08:35] *** mj41_ left
[08:36] *** huf joined
[08:42] <szabgab> moritz_, written in perl 6 ?

[08:43] <moritz_> szabgab: I don't think I'll get something decent running in Perl 6 soon

[08:44] <moritz_> considering that we don't have database access yet...

[08:49] <Matt-W> And it's really slow...

[08:50] <moritz_> aye :/

[08:50] <Su-Shee> *click* *move* *movemore* 

[08:53] <Su-Shee> ah. great. I so much love all this blog-in-webhoster-package-mysql-customer-frontend stuff...

[08:57] *** zamolxes joined
[08:58] *** mj41 joined
[08:59] *** agentzh left
[09:00] *** agentzh joined
[09:01] *** rfordinal left
[09:07] <eternaleye> I just had an idea for a fun way to explain .wrap etc: make a variant of the 'stone soup' story, where you start with -> {;} and make something useful by adding stuff over time

[09:12] <masak> eternaleye: sounds like a good theme for a blog post. :)

[09:12] <masak> eternaleye: telling the story and interleaving Perl 6 code.

[09:12] <eternaleye> ENOBLOG

[09:13] <moritz_> that can be changed.

[09:13] <masak> indeed it can.

[09:13] <eternaleye> If I had a blog, I might be expected to update it. And it would disappoint me (and maybe others) when I inevitably forgot.

[09:14] <masak> eternaleye: you could guest-post at somebody else's blog.

[09:14] <eternaleye> Mmm. Maybe

[09:15] <szabgab> as ironman seems to be down let me spam you with my blog entry here:-) http://szabgab.com/blog/2009/07/1248597502.html

[09:15] <eternaleye> moritz_: BTW, next time davef is in here, talk to him about database stuff. He's working on porting JDBC via autoconversion and elbow grease.

[09:16] <Su-Shee> eternaleye: well there is a simple solution to that: don't pressure yourself and blog only if you have something to say you think is blogging worthwhile. who cares how often you update?

[09:16] <Su-Shee> eternaleye: it's not a contest, it's content. ;)

[09:16] <eternaleye> It's no DBI (though much like the proposed p6 DBDI), but it might be useful

[09:17] <eternaleye> Su-Shee: Well, yes, but there's also the fact that I may have taken the Perl Virtues a little too strongly to heart. Especially the one that starts with 'L'...

[09:18] <masak> eternaleye: you're too lazy even to say the whole word? :P

[09:18] <eternaleye> ;D

[09:19] <moritz_> L-ness driven to extremes :-)

[09:19] <eternaleye> Laziness and OCD interact in an interesting manner. It's not that I'm excessively lazy, it's that I know I go OCD on my writing and it turns into actual work

[09:19] <masak> hah, I just created a local Rakudo branch that parses Python-like for/else constructs! :)

[09:20] <masak> eternaleye: I know the feeling. but I still like the results, so it's worth it most of the time.

[09:21] <masak> if I get the for/else to DTRT too, I think I'll blog about this. :)

[09:21] <eternaleye> masak: Nice

[09:21] <moritz_> masak: parse, or actually execute?

[09:21] <eternaleye> s/$/!/

[09:21] <masak> parse, thus far.

[09:22] <masak> it's a trivial patch, actually: http://gist.github.com/156123

[09:23] <moritz_> masak: I expected nothing more complicated, actually :)

[09:23] <masak> moritz_: me neither. still, it's nice to see that there were no hidden complexities. :)

[09:23] <masak> there might be in the semantics, though.

[09:24] <moritz_> indeed

[09:24] <moritz_> when is the else block run?

[09:25] <masak> moritz_: when no if block inside the for loop was triggered.

[09:25] <masak> so there's a hidden state variable there.

[09:25] <moritz_> oh.

[09:25] <masak> one that belongs (dynamically) to that for loop.

[09:26] <masak> I actually don't particularly like the feature in Python either. :P

[09:26] <masak> but I thought I'd give a shot at implementing it, just to get a feel for it.

[09:26] <moritz_> dynamically?

[09:27] * jnthn had thought it was just, if there were no iterations of the loop.

[09:27] <moritz_> so if it calls a builtin written in Perl 6, and that uses an 'if'...

[09:27] <jnthn> for @results { .render } else { say "omg no results!" }

[09:28] <moritz_> jnthn: that would make some sort of sense, zyes

[09:29] * jnthn wonders exactly what the spec says

[09:29] <Su-Shee> do you reach that? -> http://sushee.schreibsturm.org/

[09:30] <eternaleye> 'Su-Shee's Blog'

[09:30] *** Jedai joined
[09:30] <eternaleye> Red at the top

[09:30] <Su-Shee> fine. :)

[09:32] <moritz_> Su-Shee: I hope you're preserving your old postings somehow?

[09:32] <Su-Shee> moritz_: yes.

[09:32] <Su-Shee> moritz_: the fourth archive, then. ;)

[09:33] *** kimtaro joined
[09:33] <moritz_> Su-Shee: maybe we need a blog archiving framework :-)

[09:33] <masak> this text makes it seem like the 'else' block is always executed... http://docs.python.org/reference/compound_stmts.html#the-for-statement

[09:33] <Su-Shee> moritz_: definetely. I went from old wordpress to new wordpress to textpattern to.. 

[09:34] <moritz_> Su-Shee: something ueber simple like a JSON dump with a defined structure

[09:34] <masak> ah! that's it! the only way to avoid the 'else' is to do a 'break'!

[09:34] *** ihrd joined
[09:35] <Su-Shee> moritz_: it's extremely annoying ever changing a blog engine. usally, things like tags and categories don't really match.

[09:37] *** meppl joined
[09:37] *** M_o_C joined
[09:49] <masak> oh, and speaking of Rakudo 1.0 -- I'm not sure Perl 5/CPAN compatibility is on anyone's roadmap, but that would be one feature which would make me much less hesitant to tag Rakudo as 1.0.

[09:52] * jnthn has it somewhere in the back of his mind.

[09:56] <Su-Shee> hm, movable type is really not bad.. 

[10:00] *** M_o_C left
[10:00] <missingthepoint> can anyone explain how the STD.pm <-> evalbot is impl here? (moritz_?)

[10:01] <missingthepoint> curious, because STD.pm uses Cursor, which is written in P5

[10:02] *** kimtaro left
[10:02] <missingthepoint> it's compiled to Perl 5, no?

[10:02] <missingthepoint> elf?

[10:03] <masak> missingthepoint: I think TimToady wrote his own translator, gimme5.

[10:04] <missingthepoint> masak: thanks

[10:11] *** rgrau joined
[10:13] <masak> jnthn: how do I make my 'else' block execute at the end of any non-breaked for loop?

[10:17] <jnthn> masak: Heh, I was wondering how you planned to do taht. :-)

[10:18] <masak> :P

[10:18] <jnthn> I guess you need something that handles the break.

[10:18] <jnthn> And maybe sets a "don't run this" variable

[10:18] <jnthn> That probably needs to be lexical.

[10:18] <masak> I actually don't have much of a clue about PAST. I blindly copied stuff and was happy when Rakudo built and even ran my script.

[10:19] <masak> jnthn: ok, that makes sense. I'll try that.

[10:19] <jnthn> You can call .unique on any PAST node to get a unique identifier and even supply a prefix.

[10:19] <masak> if I succeed, this'll be a blog post.

[10:20] <masak> jnthn: that's useful. I guess I can combine that with --target=PAST to see what I get.

[10:20] <jnthn> masak++ # getting into rakudo guts hacking

[10:20] <masak> just some trivial branch hacking to amuse myself. :)

[10:21] *** flexibeast left
[10:24] *** arejay left
[10:24] *** zamolxes left
[10:24] *** japhb_ left
[10:24] *** rjh left
[10:24] *** Patterner left
[10:24] *** antiphase left
[10:24] *** shachaf left
[10:24] *** eternaleye left
[10:24] *** c1sung left
[10:24] *** orafu left
[10:24] *** Jedai left
[10:24] *** cotto left
[10:24] *** Aisling left
[10:24] *** arthur-_ left
[10:25] *** Jedai joined
[10:25] *** cotto joined
[10:25] *** arthur-_ joined
[10:25] *** Aisling joined
[10:26] *** zamolxes joined
[10:26] *** japhb_ joined
[10:26] *** orafu joined
[10:26] *** Patterner joined
[10:26] *** arejay joined
[10:26] *** eternaleye joined
[10:26] *** shachaf joined
[10:26] *** rjh joined
[10:26] *** c1sung joined
[10:26] *** antiphase joined
[10:26] *** szabgab left
[10:27] *** xinming_ is now known as xinming

[10:34] *** ihrd left
[10:47] *** nsh left
[10:47] *** sbp left
[10:47] *** nsh_ joined
[10:47] *** sbp joined
[10:47] *** nsh joined
[11:03] <eternaleye> (way, way, _way_ backlogging still) pmichaud: re ins2 branch, most of what I've seen in 'packager-friendly' projects is that 'what to install' is unimportant outside of the project itself - the packager just cares that DESTDIR=foo on the 'install' make target works. Gentoo and Exherbo both use this as the basis of packaging.

[11:04] <masak> oh, right. backlogging.

[11:06] *** ruoso_ left
[11:07] <moritz_> @seen pmichaud 

[11:07] <lambdabot> pmichaud is in #perl6. I last heard pmichaud speak 19h 14m 12s ago.

[11:07] <moritz_> @seen diakopter

[11:07] <lambdabot> I saw diakopter leaving #perl6 13h 25m 1s ago, and .

[11:07] <moritz_> I was just wondering where the ', and .' went, but here it is again

[11:09] <masak> lambdabot is a mysterious creature.

[11:09] <moritz_> I wonder if it's actually written in perl :-)

[11:09] <masak> :)

[11:10] <moritz_> just like... that xkcd.. :-)

[11:10] <masak> moritz_: is there any chance you could pick another yellow for the ⏏ arrow in the logs?

[11:11] <masak> the current nuance doesn't agree very well with my eyes.

[11:11] <moritz_> masak: patches welcome :-)

[11:11] <masak> to where?

[11:12] <moritz_> misc/irclog/lib/IrcLog/WWW.pm line 21

[11:13] <masak> gotcha.

[11:13] <moritz_> it's used as a CSS color description

[11:13] <masak> ah, so those are CSS color values?

[11:14] <moritz_> aye

[11:14] <masak> moritz_++

[11:15] <pugs_svn> r27749 | moritz++ | [irclog] gah, left in way too many debugging warn()s

[11:15] <moritz_> you'll need to svn up / git svn rebase first :/

[11:15] <masak> hokay.

[11:16] <moritz_> sometimes I wish that 'git svn rebase' would automatically stash my local modifications, rebase, and then stash apply them

[11:16] <moritz_> afk

[11:17] <masak> moritz_: write an alias.

[11:17] <pugs_svn> r27750 | masak++ | [misc/irclog/lib/IrcLog/] changed arrow color to an eye-compatible one

[11:20] *** donaldh left
[11:21] *** donaldh joined
[11:21] *** Jedai left
[11:22] *** snearch left
[11:25] * jnthn afk for a couple of hours

[11:51] <moritz_> masak: I updated the server to latest svn, so newly generated pages will display the new colour

[11:51] *** rgrau left
[11:51] <moritz_> std: +++

[11:51] <p6eval> std 27750: OUTPUT«[31m===[0mSORRY![31m===[0m␤Preceding operator expects term, but found infix + instead at /tmp/kXjJMzUp2v line 1 (EOF):␤------> [32m+++[33m⏏[31m<EOL>[0m␤    expecting any of:␤ noun␤   prefix or meta-prefix␤      standard stopper␤ term␤   terminator␤       whitespace␤FAILED

[11:51] <p6eval> ..00:02 39m␤»

[11:51] <masak> moritz_++

[11:51] <moritz_> masak++ # JFDI

[11:58] *** M_o_C joined
[11:59] *** Psyche^ joined
[12:02] *** Patterner left
[12:02] *** Psyche^ is now known as Patterner

[12:04] *** Psyche^ joined
[12:05] *** Patterner left
[12:05] *** Psyche^ is now known as Patterner

[12:07] *** ingmar is now known as Ingmar

[12:23] <moritz_> http://radar.oreilly.com/2009/07/oscon-standing-out-in-the-crow.html

[12:23] <moritz_> "women make up only 1.5% of contributors to open source projects overall. They're 5% of the perl community and 10% of Drupal."

[12:24] <masak> the Drupal community seems like a fun one.

[12:24] <masak> kudos to them.

[12:25] <moritz_> aye

[12:26] <masak> this Drupal community member in particular impresses me to no end: http://www.youtube.com/watch?v=8mwKq7_JlS8

[12:26] <masak> like, I mean... wow!

[12:26] <moritz_> http://www.roblambert.com/wp-content/uploads/2007/07/oscon-2007-attendee-os.png

[12:27] <masak> I hope I'm not too age-ist by thinking that that video is very impressive. I simply wish that I were as knowledgeable at 12.

[12:28] <masak> I hope this kid represents the future in some way.

[12:29] <moritz_> and I hope it does not, in some other way :-)

[12:31] <Su-Shee> masak: the higher range of female participiants within web projects isn't what it seems to be. 

[12:31] <masak> Su-Shee: in what sense?

[12:31] <Su-Shee> masak: web projects simply have a much larger count of designers - which are often women.

[12:31] <masak> moritz_: to be more specific, what I like is that a 12-year-old obviously found his place as a productive member in a development community. that makes me very happy.

[12:31] <Su-Shee> masak: and let's face it - there's participiant and .. developer. ;)

[12:32] *** pmurias joined
[12:32] <masak> Su-Shee: still, I think it's a positive sign.

[12:32] <masak> I still don't see myself as a Rakudo committer. I'm more of a Rakudo complainer. :)

[12:33] <moritz_> masak: that aspect I agree with. OTOH when I want to get a job as a programmer, I'm not keen on competing with somebody who was so proficient at that age already

[12:33] <Su-Shee> masak: well, statistically it's not really, because those numbers are pretty constant for 10 years or so. certain areas around "core technology" attracts some women. but they never break the barrier.

[12:33] <Su-Shee> moritz_: doesn't matter. who cares what you coded in the age of 12 which was (I'm assuming) some 15 years ago...

[12:34] <masak> moritz_: that's just the backside of the immensely positive effect of incorporating 12-year-olds in the dev community.

[12:34] *** zamolxes left
[12:34] <masak> Su-Shee: but you're a dev, no?

[12:35] <moritz_> Su-Shee: if he continues to develop like this, I'll be no match for him in any way :/

[12:35] <Su-Shee> but that's a common phenomen in many scene that people start out at the age of 12 - it really doesn't matter in the long run...

[12:35] <moritz_> masak: you're right. I wouldn't complain if he hacked on Rakudo or Parrot :-)

[12:35] <Su-Shee> moritz_: you egal "length of experience" with "depth of experience"

[12:36] <masak> moritz_: I'm afraid we'll have to find our own 12-year-old. Drupal got dibs on him. :)

[12:36] <Su-Shee> masak: yes. but look here: I've made the website of perl6 projects - I didn't wrote a 100 tests or the next 3 important modules or something..

[12:36] <moritz_> Su-Shee: well, if I had started playing table tennis with 12 years I'd be loads better by now

[12:36] <masak> Su-Shee: point taken.

[12:37] <masak> Su-Shee: so, when will we see a module written by you? :)

[12:37] <Su-Shee> moritz_: I started politics and writing with 12. It might have opened one or two doors, but that's it. when we all become 30, noone cares for the kind of past you've got but only for what you can do _now_ 

[12:38] <Su-Shee> masak: when I started the new job and relaxed a little mentally. I'm not very creative while having certain kinds of stress.

[12:38] *** fridim_ left
[12:38] <masak> understood.

[12:38] *** SmokeMachine joined
[12:38] <Su-Shee> moritz_: let's set aside sports, I think this is something different due to physical questions.

[12:39] <Su-Shee> masak: but yes, I have to jump through certain hoops of socialization to play with the boys. ;)

[12:39] *** zarko joined
[12:39] *** synth joined
[12:40] <masak> Su-Shee: I guess you do. my mother tells of similar things from her boys-only work environment 20 years ago.

[12:40] *** zamolxes joined
[12:41] <masak> she used to work at an oil refinery.

[12:41] <masak> she told me that's where she learned to tell and enjoy/endure really crude jokes.

[12:42] <moritz_> masak: did she pass on those on to you? :-)

[12:42] <masak> :)

[12:42] <masak> I don't know!

[12:42] <masak> do I have a foul mouth, in your opinion?

[12:43] <moritz_> s/foul/fast/ :-)

[12:43] <Su-Shee> the most important thing is learning not to take critizism personally. men plainly critize totally different than women. 

[12:43] <moritz_> indeed

[12:43] <Su-Shee> besides that I really don't get the reluctance to do technology.

[12:43] <masak> aye.

[12:44] <masak> I wish more people would think like that.

[12:45] <Su-Shee> one day I realized that I won't get "cool technology" served on a silver platter. either I take/make it or it just passes over me.

[12:45] <Su-Shee> and the first female med students or physics student didn't go there because of the nice and women-friendly athmosphere of 1900. ;)

[12:46] <masak> guess not.

[12:47] <Su-Shee> besides that: the open source community is rather fluffy and cuddly compared to other scenes..

[12:47] <moritz_> unless you talk to the GNU libc maintainers, of course :-)

[12:48] <masak> they're not cuddly? who'd have thought!

[12:48] <moritz_> Su-Shee: actually 1900 was quite a good number (guessed? remembered?) - that's when Emmy Noether started studying in my home town

[12:53] <synth> Su-Shee: learning not to take criticism personally, in what context? sorry I didnt catch the whole convo but I am intrigued about what you're saying

[12:53] *** snearch joined
[12:54] * synth is a man and plainly criticizes everything :) wifey takes it personally though..

[12:54] <pmurias> masak: but they are extra fluffy to compensate for the lack of cuddliness

[12:54] <masak> pmurias: :)

[12:55] <Su-Shee> synth: for example if you critize my code as bad, unsecure, inefficient, plainly not elegant or don't like my indention style or find that my choice of editor/distribution is plain bad. ;)

[12:55] <Su-Shee> moritz_: not guessed, 2 years feminist theory and women's studies at universities. ;)

[12:56] <synth> Su-Shee: criticisms in that context are never personal is what you're saying?

[12:56] <synth> they're strictly about the matter at hand?

[12:56] <synth> or shouldn't be?

[12:56] <Su-Shee> synth: I have several choices in that case: shut up, go and cry and never come back. shut up, think you're an idiot and don't care. take what's correct and leave the rest as "he's just an annoying alpha male" or ignore you completely. 

[12:56] <moritz_> Su-Shee: wohoo

[12:57] <synth> Su-Shee: gotcha

[12:57] <Su-Shee> synth: even if it is: _who cares_? everyone has to learn that not everybody likes you.

[12:57] *** molaf joined
[12:57] <synth> Su-Shee: *nod* if people cant realize that they are in for a world of hurt

[12:58] * synth is overtly critical about everything in his life, to a fault

[12:58] <Su-Shee> synth: yeah, but women simply handle this entirely different. the say it differently - if they say anything at all, they suggest improvements rather then to critize.. 

[12:58] <synth> Su-Shee: yeah thats my wife for sure

[12:59] <synth> I tell her, criticize, I can take it.. I need someone to tell me my shit stinks some times

[12:59] <Su-Shee> (we're talking prototypes here - of course there's very social and polite coders and real bitches out there..)

[12:59] <Su-Shee> synth: yeah, but now imagine you're the only one being used to a certain social rule and you're thrown within 100 people doing it your way.

[13:00] <synth> Su-Shee: heh yeah

[13:00] <pmurias> it shouldn't be to hard to figure out that the social rule doesn't apply

[13:01] <synth> you'll learn quick, Id imagine

[13:01] <synth> ick keyboard is sticky.... laptop old... I need an upgrade

[13:01] <Su-Shee> pmurias: yeah but _experiencing_ it is something else entirely.

[13:02] *** nsh_ left
[13:03] <Su-Shee> anyway. the open source community is what it is and there will only be more women if women really want it. and even if they hate the community, you can still write code alone or with friends and plainly release it and having never to put up with a 600 alpha male chat channel. ;)

[13:05] *** explorer left
[13:05] <masak> does 'alpha male' have to amount to 'pushy, bullying and inconsiderate'?

[13:07] <Su-Shee> masak: in principle it hasn't, no. but I don't wanna really know what happened up until the pumpking recently resigned...

[13:09] <masak> Su-Shee: you make it sound like some king-of-the-hill wrestling happened. :) what really happened was that disagreements reached a tipping point, and the pumpking didn't find that the equation of being pumpking landed on the plus side of things.

[13:09] <masak> but if you mean that it was alphamaleish behaviour to react like that, then maybe yes.

[13:11] *** skids_ joined
[13:11] <masak> this post is the most pointed example of the less mature sides of the debate: http://use.perl.org/~pozer/journal/39242

[13:12] <masak> though I like reading the support for chromatic in the comments. :)

[13:12] *** fridim_ joined
[13:12] <pmurias> masak: did you read through some of the p5p threads?

[13:12] <masak> pmurias: no, I didn't. maybe that would make things clearer.

[13:13] <masak> are they online?

[13:13] * pmurias searches...

[13:13] <masak> actually, I saw one or two, but they weren't so bad.

[13:14] <masak> certainly not the-Hulk-like fights.

[13:15] <pmurias> masak: rafael posted links to some of the threads where they refuted some of the chromatics proposals

[13:15] <masak> that might have been the ones I read.

[13:15] *** [particle] left
[13:16] *** mj41 left
[13:17] <Tene> moritz_: parrot has support for mysql.  it would be pretty easy to get that wrapped up for use by HLLs.

[13:18] <masak> it's even been done once.

[13:18] <masak> but the code was bit-rotten last time I looked.

[13:18] <Tene> Huh.

[13:19] <masak> examples/nci/mysqltest.p6

[13:19] <masak> feel free to get it running again. :)

[13:20] <pmurias> masak: but i feel they shouldn't have started "debating" with chromatic on the blogs instead of pointing out the relevant threads and make him looks silly

[13:21] <masak> pmurias: you mean that there are a set of relevant threads that would make chromatic look silly? out of curiosity, do you have any links to those?

[13:21] *** jonjj joined
[13:24] *** jonjj left
[13:32] <pmurias> the class feature he proposed was discredited

[13:32] *** hoelzro joined
[13:32] *** [particle] joined
[13:35] * masak doesn't feel informed enough to opine in the debate on p5p, chromatic and rafael

[13:37] *** zarko1 joined
[13:39] *** colomon left
[13:46] *** zarko left
[13:49] <Su-Shee> If someone does code a perl 6 blog: please make a better userinterface than movable types.

[13:50] <masak> I'm hoping to be able to shove Web.pm under the feet of people who eventually write a Perl 6 blog.

[13:50] <masak> (by making it laughable to attempt it without Web.pm)

[13:50] *** kidd_` joined
[13:51] <Su-Shee> masak: I also still have it in mind. But I managed recently to mvc myself into a corner when I started to consider making a userinterface in javascript - which also should be mvc.. 

[13:51] <masak> Su-Shee: well, you know what they say. start simple.

[13:52] <masak> complexity is a feature that can be added stepwise, in working increments. :)

[13:52] <Su-Shee> masak: if you get your architecture right. ;)

[13:52] <masak> well, re-architecturing is what tests are for. :)

[13:53] <Su-Shee> well, we will have a perl6 blog engine some day. I'm sure of it.

[13:53] <masak> oh, it won't be long.

[13:53] <masak> half a year, tops.

[13:53] <masak> there's already Yarn in its various incarnations.

[13:55] <masak> mberends++ has promised to dogfood Yarn. he hasn't yet, but I have a feeling he will.

[13:55] * Su-Shee looks forward to again converting blog content from A to B :)

[14:03] *** lucs joined
[14:05] *** colomon joined
[14:05] <missingthepoint> night all :)

[14:05] *** iblechbot left
[14:05] *** PacoLinux joined
[14:06] *** missingthepoint left
[14:06] *** colomon left
[14:11] *** KyleHa joined
[14:21] *** zarko joined
[14:22] *** FurnaceBoy joined
[14:23] *** szabgab joined
[14:24] *** cls_bsd joined
[14:24] *** diakopter joined
[14:25] <KyleHa> @seen KyleHa

[14:25] <lambdabot> You are in #perl6. I last heard you speak just now.

[14:25] <KyleHa> Nyuck nyuck nyuck.

[14:25] *** grawity joined
[14:25] *** grawity left
[14:25] * moritz_ wonders why nobody else replied to Ben Morrow's mail on p6l - seems like the perfect topic for bikeshedding

[14:26] *** gbacon left
[14:27] <KyleHa> I, for one, did not feel qualified to answer.

[14:27] <KyleHa> I'm interested in the answers, however, since they'd make good test fodder.

[14:28] <KyleHa> It's also possible I didn't actually read Ben's email.

[14:28] <masak> moritz_: I thought of replying, but found I didn't have anything to add to your email. :)

[14:28] <moritz_> I thought more of the usual suspects like Tsa, Mark Reed, Jon Lang...

[14:29] <moritz_> masak: ah, one form of warnocking :-) Glad you said it now on IRC

[14:29] <szabgab> once I tried to recommend the use of X<> tags in the docs but it seems nearly noone adds them, are they  discouraged or shall I keep adding them ?

[14:30] <masak> moritz_: is it really warnocking after you answered? :)

[14:30] <masak> szabgab: I must admit to not having seen the light yet as to the X<> and C<> tags.

[14:31] <moritz_> masak: you can warnock replies also :-)

[14:32] <szabgab> oh I think C tags just make the text emphasized  - and thus they are good target for indexing but they are accidental

[14:32] <masak> moritz_: I think I'll need to re-read your reply. apart from the final 'no idea', I don't recall it as being full of open-ended things.

[14:32] <szabgab> X tags were specifically planned to be used to add entires to generate an index

[14:33] <masak> szabgab: ah, ok.

[14:33] <szabgab> for example I was just looking for the defintion of <ws>

[14:33] <szabgab> searching for <ws> did not help

[14:34] <szabgab> same with the word 'for'

[14:35] <moritz_> szabgab++ # adding an index

[14:36] <szabgab> so I keep adding them and I hope literal will add them to grok soon

[14:37] *** donaldh left
[14:37] *** frettled left
[14:37] *** charsbar left
[14:37] *** ilbot2 left
[14:37] *** rbuels left
[14:37] *** Tene left
[14:37] *** patmat left
[14:37] *** zarko1 left
[14:39] *** M_o_C left
[14:39] *** xinming left
[14:39] *** xinming joined
[14:41] <hoelzro> I suppose I should only publish the client-side UI for my "Try Rakudo!" project, and leave the server side stuff private, huh?

[14:41] *** eiro left
[14:41] *** eiro joined
[14:41] *** Exodist joined
[14:42] <moritz_> hoelzro: why do you think so?

[14:42] *** M_o_C joined
[14:42] <hoelzro> moritz_: that seems to be the general impression I'm getting about creating secure web-REPLs

[14:42] <moritz_> hoelzro: we're always happy to see source code that works with Rakudo somehow, and maybe you'll even get some contributions

[14:42] <hoelzro> I'd be more than willing to share it

[14:43] <hoelzro> I've no intention to horde it =)

[14:43] <moritz_> hoelzro: "security by obscurity"?

[14:43] *** donaldh joined
[14:43] *** frettled joined
[14:43] *** charsbar joined
[14:43] *** rbuels joined
[14:43] *** ilbot2 joined
[14:43] *** Tene joined
[14:43] *** patmat joined
[14:43] <hoelzro> moritz_: partially

[14:43] *** charsbar left
[14:43] <hoelzro> I'd like more hardcore Rakudo/Parrot devs to review it before making it more public, at the very least

[14:43] <moritz_> hoelzro: if you don't want any of your boxes compromized, I can offer you shell access on the server where p6eval runs

[14:43] <moritz_> hoelzro: you can run it there if you want

[14:43] <hoelzro> moritz_: thanks, but pmichaud already made me that offer =)

[14:43] <hoelzro> also, I've only done UI work so far

[14:44] <hoelzro> you can check it out here if you'd like: http://hoelzro.net/try-rakudo

[14:44] <hoelzro> it's still very much in infancy

[14:44] <hoelzro> but I feel that I have some good ideas about securing the client side

[14:44] <hoelzro> s/client/server/

[14:45] <hoelzro> but those ideas will require modifications to both Rakudo and Parrot

[14:45] *** Exodist left
[14:45] *** charsbar joined
[14:46] <moritz_> hoelzro: I'm sure that if it doesn't effect normal working they will be accepted

[14:46] <moritz_> hoelzro: I'm all for a secured rakudo/parrot, because that would make me hosting p6eval much safer too :-)

[14:46] <hoelzro> moritz_: well, for the moment, I was just going to remove certain opcodes/classes

[14:46] <hoelzro> but I've been thinking about PDD 18 (security) a lot

[14:46] <moritz_> sounds more like local patches then

[14:47] *** explorer joined
[14:47] <hoelzro> so if I can contribute something that helps security for Parrot in general, I'll do that

[14:47] <hoelzro> it'll make maintaining my try-rakudo branch easier =)

[14:47] <hoelzro> same goes for Rakudo

[14:48] <hoelzro> removing classes from Rakudo may be trickier, though

[14:49] <hoelzro> I should say, allowing Rakudo to start up, and then telling it to cut off all access and recollection of classes A...B

[14:49] <hoelzro> that'll be no picnic.

[14:49] *** charsbar_ left
[14:50] *** explorer left
[14:50] *** gbacon joined
[14:51] <moritz_> I think you can get away with disallowing inline PIR

[14:52] <hoelzro> moritz_: what about things like file I/O?

[14:52] <moritz_> the other dangerous opcodes (qx, run(), open() etc) are easily removed by monkey-patching

[14:52] <pugs_svn> r27751 | szabgab++ | add X<> tags to Predefined Subrules

[14:52] <hoelzro> (acutally, file I/O on a virtual file system would be cool)

[14:52] <moritz_> hoelzro: look at lib/Safe.pm in the Rakudo repo

[14:52] <hoelzro> moritz_: ok

[14:54] <hoelzro> ah

[14:54] <moritz_> rakudo: open('foo')

[14:54] <p6eval> rakudo 4c31fb: OUTPUT«operation not permitted in safe mode␤in Main (lib/Safe.pm:25)␤»

[14:56] * jnthn back

[14:58] <masak> rakudo: sub foo(&bar = { $^id }) { say bar("OH HAI") }; foo

[14:58] <p6eval> rakudo 4c31fb: OUTPUT«OH HAI␤»

[14:58] <masak> Rakudo++

[14:58] <Su-Shee> grrr. movable type isn't really the best blog I've ever installed.

[14:59] <Su-Shee> moritz_: I would think very hard if you want this for your site.

[14:59] <moritz_> rakudo: sub foo(&foo = sub infix<MOEP>($a, $b) { say "$a MOEP $B }){ 3 MOEP 5 }; foo()

[14:59] <pmichaud> good morning, #perl6

[14:59] <phenny> pmichaud: 04:44Z <wayland76> tell pmichaud I've found some problems with the "install" section of the ins2 makefile.  I hope to have a patch by the end of (my) day

[14:59] <phenny> pmichaud: 06:50Z <wayland76> tell pmichaud Ok, patch for ins2 branch added to http://rt.perl.org/rt3/Ticket/Display.html?id=63360

[14:59] <p6eval> rakudo 4c31fb: OUTPUT«Malformed routine definition at line 2, near "infix<MOEP"␤in Main (src/gen_setting.pm:3343)␤»

[15:00] <hoelzro> pmichaud: good morning

[15:00] <moritz_> Su-Shee: ok, thanks for the info

[15:00] <masak> rakudo: sub foo($n, &bar = &foo) { return unless $n; say $n; bar($n-1) }; foo(5)

[15:00] <hoelzro> pmichaud: would you like to see the "Try Rakudo!" UI as it stands right now?

[15:00] <p6eval> rakudo 4c31fb: OUTPUT«5␤4␤3␤2␤1␤»

[15:00] <masak> morning, pm.

[15:00] <Su-Shee> moritz_: you'll have to post-install plugins for certain common features and this is somewhat.. zaeh. ;)

[15:00] <moritz_> rakudo: sub foo(&foo = sub bar($a, $b) { } ) { bar() }

[15:00] <pmichaud> hoelzro: yes!

[15:01] <p6eval> rakudo 4c31fb:  ( no output )

[15:01] <pugs_svn> r27752 | kyle++ | [t/spec] Test for RT #63778

[15:01] <hoelzro> pmichaud: http://hoelzro.net/try-rakudo

[15:01] <hoelzro> no server-side yet, and only the command line part is "done"

[15:01] <hoelzro> but I feel it's off to a good start

[15:02] <masak> rakudo: sub foo(&foo = {;}) { say "OH HAI"; foo }; foo

[15:02] <p6eval> rakudo 4c31fb: OUTPUT«OH HAI␤»

[15:02] <jnthn> ...= sub infix<MOEP>($a... # note missing :

[15:02] <pmichaud> hoelzro: the interface looks excellent.  Should it be running the things I type in to the command line yet?

[15:02] <masak> rakudo: sub foo(&foo = &foo) { say "OH HAI"; foo }; foo

[15:02] <masak> hah!

[15:02] <p6eval> rakudo 4c31fb: OUTPUT«Null PMC access in isa()␤in sub foo (/tmp/d6DbO2Evkd:2)␤called from Main (/tmp/d6DbO2Evkd:2)␤»

[15:02] <hoelzro> pmichaud: it should just alert you

[15:03] * masak submits rakudobug

[15:03] *** explorer joined
[15:03] <pmichaud> okay, that's what it is doing, yes.

[15:03] <hoelzro> good =)

[15:03] <hoelzro> any thoughts on the interface (layout, coloration, etc) would be welcome

[15:03] <hoelzro> I'm going to put the UI stuff in a Git repo after work today

[15:04] <masak> rakudo: sub foo(&foo = &foo) {}; foo

[15:04] <p6eval> rakudo 4c31fb: OUTPUT«Null PMC access in isa()␤in sub foo (/tmp/YNtZwS8Tl8:2)␤called from Main (/tmp/YNtZwS8Tl8:2)␤»

[15:04] <moritz_> rakudo: sub foo(&foo = &foo) {};

[15:04] <p6eval> rakudo 4c31fb:  ( no output )

[15:04] <moritz_> ah, happens while calling

[15:04] <masak> aye.

[15:04] <KyleHa> Is that supposed to live?

[15:04] <masak> I think so.

[15:04] <pmichaud> hoelzro: if you want a git repo in the rakudo or perl6 accounts on github, let me know.

[15:05] <pmichaud> (or it can go into perl6-examples)

[15:05] <masak> KyleHa: the first &foo is the param, the second is the sub.

[15:05] <moritz_> so the first &foo would lexically override foo()?

[15:05] <hoelzro> pmichaud: ok, I'll ask after I get home from work

[15:05] <KyleHa> It seems the second &foo is taking a reference to foo before it's defined.

[15:05] <moritz_> sub foo(&foo = { say 3 }) { foo() };

[15:06] <moritz_> rakudo: sub foo(&foo = { say 3 }) { foo() };

[15:06] <p6eval> rakudo 4c31fb:  ( no output )

[15:06] <moritz_> that should print out 3\n, no?

[15:06] <moritz_> masak? :-)

[15:06] <jnthn> Probably.

[15:06] <pmichaud> no, you never called foo()

[15:06] <moritz_> ouch.

[15:06] <KyleHa> rakudo: sub foo(&foo = { say 3 }) { foo() }; foo;

[15:06] <masak> :)

[15:06] <p6eval> rakudo 4c31fb: OUTPUT«3␤»

[15:06] <jnthn> oh

[15:06] <jnthn> :-)

[15:06] <moritz_> rakudo++

[15:06] <pmichaud> rakudo ftw

[15:06] <moritz_> indeed

[15:06] <jnthn> Rakudo is becoming smarter than us. ;-)

[15:07] <masak> yes, rakudo++ caught most of the screwballs I threw at it. I had to try hard to find a bug. :)

[15:07] <hoelzro> pmichaud: I also had some insight into the server-side security, with some help from bpetering; check yesterday's logs for details

[15:07] <pmichaud> hoelzro: will do.  It may be a little while before I get to backlogging (lots of non-rakudo things happening around this house today)

[15:08] <hoelzro> sounds good

[15:10] <masak> had to think long to get the bug title right: "[BUG] Null PMC Access when calling a sub &foo with a parameter &foo defaulting to &foo in Rakudo"

[15:10] <masak> :)

[15:10] <pmichaud> does it work for other subs?

[15:10] <masak> yes.

[15:10] <masak> well, not in the sense that &foo is special.

[15:10] <hoelzro> quick question about patch submission: git-format-patch patches are just supposed to be sent to the Rakudo bugs e-mail with [PATCH] in the subject, right?

[15:10] <masak> but all those three have to be the same.

[15:10] <pmichaud> rakudo:  sub bar() { say 'bar'; };  sub foo(&x = &bar) { x() };  foo()

[15:10] <moritz_> rakudo: sub foo(&foo = &foo) { foo() }; foo({say "bar" })

[15:10] <p6eval> rakudo 4c31fb: OUTPUT«bar␤»

[15:10] <hoelzro> I feel like my patches may have gotten lost in the ether

[15:10] <p6eval> rakudo 4c31fb: OUTPUT«bar␤»

[15:11] <pmichaud> hoelzro: yes

[15:11] <moritz_> hoelzro: it's just that pmichaud++ had been at oscon, jnthn was busy and nobody else feels qualified to review them

[15:11] *** hercynium joined
[15:11] <hoelzro> ok, that's fine, just wanted to get some feedback =)

[15:11] <moritz_> our bus number is approximately 2.7 or so

[15:12] <hoelzro> pmichaud: that reminds me, I also had some insight into retaining lexicals in the REPL last night

[15:12] * hoelzro thinks maybe he should organize these thoughts into an e-mail

[15:13] <pmichaud> hoelzro: what's the insight?

[15:13] <hoelzro> pmichaud: well, I was thinking of the interpreter's eval method should return some sort of lexical context object, and you can provide that object to later calls to eval

[15:14] <pmichaud> Parrot doesn't have lexical context objects  :-(

[15:14] <pmichaud> (not yet)

[15:14] <hoelzro> pmichaud: just an idea, maybe something we could build on

[15:14] <masak> hoelzro: oh, that insight. :)

[15:14] <masak> we have it from time to time.

[15:14] <hoelzro> ah.

[15:14] <hoelzro> I thought I was being so smart and creative...

[15:14] <masak> yes, that's how I'd like it to be done, too.

[15:14] <pmichaud> This falls under the general heading of "turn contexts into PMCs", which has been on the todo list since last November but nobody seems to want to attack it.

[15:15] <pugs_svn> r27753 | szabgab++ | add also X<< >> tags to Predefined Subrules

[15:15] <masak> hoelzro: don't get discouraged, I didn't mean to take the enterprising spirit out of you. :)

[15:15] <hoelzro> =)

[15:15] <hoelzro> pmichaud: is that todo in RT?

[15:15] <pmichaud> hoelzro: you are being smart and creative, if you came up with the same solution that the other smart and creative folks came up with :-)

[15:15] <pmichaud> Parrot todos are in trac.

[15:15] <hoelzro> pmichaud: good point =)

[15:16] *** nihiliad joined
[15:17] <KyleHa> I'd be tempted to have a REPL just record everything and re-eval everything after each line is added except I'd replace each old 'say' with a noop.  Other output-producing commands would be discouraged.  8-)

[15:17] <pmichaud> the todo is https://trac.parrot.org/parrot/ticket/596

[15:17] <pmichaud> KyleHa: I've thought of that also, but decided it's not quite practical.  We'd also have to deal with "rand" and "pick" and other things like that.  :-)

[15:18] <KyleHa> 'srand $$' at the top.

[15:18] <masak> KyleHa: that works until a command takes a minute to run...

[15:19] <KyleHa> If brute force doesn't work, you're not using enough of it.

[15:19] <masak> I mean, suddenly you have a minute-long delay for all the subsequent commands.

[15:19] <KyleHa> (I didn't say I thought this was a GOOD idea.)

[15:19] <KyleHa> masak: Yeah, that would stink too.

[15:19] <pmichaud> I think I have a basic plan for getting the REPL to work in Parrot; it just needs tuits to either (1) execute the plan or (2) write down the plan for someone else to execute.

[15:19] <masak> KyleHa: fwiw, I've toyed with that idea too. :) I _really_ want to see a good Rakudo REPL.

[15:20] *** donaldh left
[15:20] <masak> pmichaud: is (2) a lot of work? otherwise it seems like a good plan to do that first, and then possibly (1).

[15:20] <moritz_> we don't have enough pmichauds around here :-)

[15:20] <hoelzro> pmichaud: thanks

[15:20] <pmichaud> masak: so far it feels like (2) is approx the same work as (1)

[15:21] <moritz_> then (1) is preferred, of course :-)

[15:21] *** donaldh joined
[15:21] <pmichaud> otoh, (2) has the benefit of drawing someone else into development :-) :-)

[15:21] *** snearch2 joined
[15:21] <pmichaud> either way, the tuits haven't been present to date

[15:22] *** snearch2 left
[15:22] <pmichaud> however, fixing the repl would be a really good Rakudo Day task

[15:22] <pmichaud> hmmmmmmm

[15:22] * pmichaud reviews his schedule for this week

[15:22] <szabgab> pmichaud, is any Rakudo hacking planned for Lisbon ?

[15:22] <hoelzro> pmichaud: what needs fixing with the repl?

[15:23] <pmichaud> szabgab: jnthn++ and I are planning to do hacking on Sunday and Thursday

[15:23] <masak> hoelzro: we don't have arrow keys, history, tab completion...

[15:23] <hoelzro> ah

[15:23] <pmichaud> masak: I have history and arrow keys

[15:23] <pmichaud> that part already works

[15:23] <szabgab> I'll be there starting from Friday afternoon

[15:23] <masak> oh right. scratch that.

[15:24] <pmichaud> szabgab: yes, I was thinking I might sit in on the Perl 6 training course on Saturday

[15:24] <szabgab> not that I can help you hack, but I can carry the beer :-)

[15:24] <szabgab> pmichaud that would be awesome 

[15:24] <pmichaud> well, my primary goal for Lisbon is not code as much as putting together the detailed plan for Rakudo's "major release"

[15:24] <szabgab> I will want to show you how we can now highlight Python code in Padre

[15:25] <masak> maybe we should call it 'awesome.0' instead of '1.0' :P

[15:25] <pmichaud> actually, that should read "publishing the detailed plan"

[15:25] <szabgab> using PCT

[15:25] <pmichaud> szabgab: yes, I read the announcement about it, and I think that's so cool.  I look forward to seeing it :-)

[15:25] <masak> szabgab: cool!

[15:25] <pmichaud> masak: that's not a bad name (awesome.0)

[15:26] <pmichaud> overall I think I would prefer something that isn't "1.0", yes

[15:26] <masak> pmichaud: I wasn't 100% serious, though. :)

[15:26] <KyleHa> class, module, package...is there another chunk-o-code type construct I'm forgetting?

[15:26] <pmichaud> grammar

[15:27] <pmichaud> role

[15:27] <masak> it might actually send the wrong signals to have such a cocky version 'number'...

[15:27] <KyleHa> Role, yeah.

[15:27] <masak> KyleHa: grammar.

[15:27] <masak> oh, pmichaud got that one first...

[15:27] <KyleHa> Thanks, masak++ and pmichaud++

[15:28] <masak> (karma for being redundant)++

[15:28] <hoelzro> hmm...in Parrot, closures are first-class objects, right?

[15:28] <jnthn> aye

[15:28] <jnthn> well, subs are

[15:29] <pmichaud> rakudo: my $closure = { 'first class' };  if $closure() { say 'yes' }

[15:29] <p6eval> rakudo 4c31fb: OUTPUT«yes␤»

[15:29] <hoelzro> all, a closure is just code + a lexical context

[15:29] <jnthn> There's no Closure type any more, it's just a clone.

[15:29] <szabgab> pmichaud, actually I'd like to get the example grammer you are going to show when you talk about PTC  so I can make sure I can create the highlighter for it,  spontaneously, on the spot

[15:29] <hoelzro> jnthn: a clone of a Sub?

[15:29] <jnthn> Of a sub attatched to a context.

[15:29] <jnthn> Yup

[15:30] <pmichaud> szabgab: you mean the parrot compiler toolkit ?

[15:30] <szabgab> yes

[15:30] <hoelzro> jnthn: thanks

[15:30] <szabgab> ah wrong letter order

[15:30] <pmichaud> szabgab: afaik, I'm not scheduled to give the PCT talk at lisbon.  Just "Hacking Rakudo Perl"

[15:31] <szabgab> oh :-(

[15:31] <pmichaud> (apparently there were only enough slots for me to be able to do one talk this year; I submitted three :-)

[15:31] *** rfordinal joined
[15:31] <szabgab> you can do a lightening talk with it :-)

[15:31] <pmichaud> I've already submitted my lightning talk

[15:32] <pmichaud> (and that's not it)

[15:32] <szabgab> yeah I think they had 50% more submissions than time

[15:32] <szabgab> I also submitted  talks and got only one slot, but have not written that yet

[15:33] <szabgab> but I'll mostly do live demo anyway

[15:33] <hoelzro> so I'm looking through the code for Parrot subs, and I was thinking: maybe we could decouple the context part of a Sub from Sub, encapsulate that into a LexicalContext class, and have Subs refer to LexicalContext objects?

[15:33] *** snearch left
[15:33] *** masak left
[15:34] <jnthn> hoelzro: I think there's a longer-term plan that a Parrot context, which is currently just a C structure, would become a PMC.

[15:34] <hoelzro> jnthn: that's kind of what I was going for =)

[15:35] <jnthn> Thing is, it adds more GC pressure.

[15:35] <hoelzro> curses

[15:35] <pmichaud> hoelzro: see https://trac.parrot.org/parrot/ticket/596  (I think that's much the same plan :-)

[15:35] <hoelzro> reading it over

[15:36] <pugs_svn> r27754 | kyle++ | [t/spec] Test for RT #63826

[15:39] <hoelzro> I'm feeling a bit like Leibniz or Wallace right now...

[15:40] <hoelzro> s/or/and/

[15:44] <lisppaste3> szabgab pasted "STD parsing error" at http://paste.lisp.org/display/84273

[15:45] <szabgab> that thing works in rakudo but STD complains

[15:45] <szabgab> Unrecognized regex metacharacter at (eval) line 11:

[15:45] <szabgab> at least whet we have in Padre complains that way

[15:46] <KyleHa> Line 11 is the last line?

[15:46] <szabgab> one before

[15:47] <szabgab> the closing of the comment token

[15:47] <KyleHa> Is it the double dollar that does it?

[15:48] <TimToady> it's the \#

[15:48] *** charsbar left
[15:49] <TimToady> I think it's taking it as a comment, so you lose the ]

[15:49] <moritz_> std: token foo { \# }

[15:49] <p6eval> std 27753: OUTPUT«[31m===[0mSORRY![31m===[0m␤Regex missing terminator at /tmp/ShtpoNlTso line 1 (EOF):␤------> [32mtoken foo { \# }[33m⏏[31m<EOL>[0m␤    expecting any of:␤      regex atom␤       rxinfix␤        termish␤  unspace␤  whitespace␤       ws␤FAILED 00:02 36m␤»

[15:49] <moritz_> std: token foo { '#' bar }

[15:49] <pmichaud> maybe try  '#'

[15:49] <p6eval> std 27753: OUTPUT«ok 00:02 36m␤»

[15:49] <pmichaud> moritz++

[15:50] <KyleHa> rakudo: token foo { \# }

[15:50] <p6eval> rakudo 4c31fb:  ( no output )

[15:50] *** charsbar joined
[15:50] <moritz_> rakudo++ # we found an instance where it parses better than STD.pm :-)

[15:51] *** rfordinal left
[15:51] <Lorn> in rakudo i have something like a list of object methods? like say @array.list_method ? 

[15:51] <szabgab> same problem with '#'

[15:51] <szabgab> this breaks the syntax highlighting :-(

[15:51] <szabgab> switching to PGE highlighting :-)

[15:52] <moritz_> rakudo: my @a; say @a.^methods().map({.name}).sort.join(", ")

[15:52] <p6eval> rakudo 4c31fb: OUTPUT«, Array, Scalar, delete, exists, item, pop, push, shift, splice, unshift, values␤»

[15:52] <Lorn> moritz_: great! thanks

[15:52] <szabgab> though I am not sure why I call it PGE

[15:53] <Lorn> moritz_: why they not show .WHAT method?

[15:53] <moritz_> Lorn: it seems inherited methods aren't shown that way

[15:53] <moritz_> rakudo: my @a; say @a.^methods(:all).map({.name}).sort.join(", ")

[15:53] <p6eval> rakudo 4c31fb: OUTPUT«, Array, Scalar, delete, exists, item, pop, push, shift, splice, unshift, values␤»

[15:54] <moritz_> rakudo: my @a; say @a.^methods(:tree).map({.name}).sort.join(", ")

[15:54] <pmichaud> (also .WHAT isn't truly a method in Perl 6, although Rakudo has it that way...)

[15:54] <p6eval> rakudo 4c31fb: OUTPUT«, Array, Scalar, delete, exists, item, pop, push, shift, splice, unshift, values␤»

[15:54] <moritz_> right, it's a macro

[15:56] *** zamolxes left
[15:57] <Lorn> all uppercase method is a MACRO? 

[15:57] <TimToady> szabgab: you say same problem with '#', but moritz++ showed it working above

[15:57] <szabgab> I think it was a caching issue in Padre

[15:57] <szabgab> now it seems to work

[15:57] *** abra joined
[15:58] <pmichaud> Lorn: "all uppercase"  usually indicates something "special"  (but not necessarily a macro

[15:58] *** justatheory joined
[15:58] <Lorn> pmichaud: ok, thanks

[16:00] *** PZt left
[16:00] *** Trey left
[16:00] *** ascent_ left
[16:00] *** integral left
[16:02] *** dakkar left
[16:02] *** Trey joined
[16:02] *** ascent_ joined
[16:04] <szabgab> thanks for the previous fixe, I have a question related to that regex , what is the recommended way to create a grammer of a line-based language? where some of the tokens represent full lines

[16:04] <szabgab> I used this    ^^   stuff  $$ \n?    

[16:05] <szabgab> but I guess there is something better

[16:06] *** SmokeMachine left
[16:07] *** colomon joined
[16:09] <KyleHa> This ticket perplexes me:  http://rt.perl.org/rt3/Public/Bug/Display.html?id=62900

[16:10] <KyleHa> Shouldn't it die there?  The error message may be less that awesome, but it seems to me the death is inevitable.

[16:11] *** colomon_ joined
[16:12] *** colomon left
[16:12] *** colomon_ left
[16:12] *** Juerd_ left
[16:12] *** integral joined
[16:12] <KyleHa> rakudo: role A::B {}; say 42 ~~ A;

[16:12] <p6eval> rakudo 4c31fb: OUTPUT«invoke() not implemented in class 'NameSpace'␤in Main (/tmp/Mxj4uHyzvt:2)␤»

[16:14] <KyleHa> rakudo: say 42 ~~ A;

[16:14] <p6eval> rakudo 4c31fb: OUTPUT«Could not find non-existent sub A␤»

[16:14] <KyleHa> Hmm.  Maybe it is a bug.

[16:18] <pmichaud> Rakudo doesn't recognize "A" as a namespace there

[16:18] <pmichaud> (when compiling)

[16:18] <pmichaud> so it treats it like a subroutine call

[16:18] <TimToady> STD just guess for the message, based on uppercase

[16:18] <TimToady> std: say 42 ~~ A

[16:18] *** colomon joined
[16:18] <p6eval> std 27754: OUTPUT«Undeclared name:␤      A used at 1 ␤ok 00:02 36m␤»

[16:19] <TimToady> *guesses

[16:19] <TimToady> std: say 42 ~~ a

[16:19] <p6eval> std 27754: OUTPUT«Undeclared routine:␤   a used at 1 ␤ok 00:02 36m␤»

[16:19] <pmichaud> std:  role A::B {};  say 42 ~~ A

[16:19] <p6eval> std 27754: OUTPUT«Undeclared name:␤      A used at 1 ␤ok 00:02 36m␤»

[16:19] <TimToady> hmm

[16:20] <TimToady> yes, only the stash is created, not the type object

[16:22] *** moritz_ sets mode: +o TimToady

[16:22] * TimToady levels up

[16:25] *** lisppaste3 left
[16:27] <TimToady> biab &

[16:30] *** szabgab left
[16:33] *** Psyche^ joined
[16:33] *** molaf left
[16:33] *** cdarroch joined
[16:34] *** alester left
[16:34] *** alester joined
[16:39] *** lisppaste3 joined
[16:44] *** Patterner left
[16:44] *** Psyche^ is now known as Patterner

[16:46] *** zarko left
[16:54] *** zarko joined
[16:56] *** rfordinal joined
[17:00] *** [particle]1 joined
[17:05] *** sparc left
[17:05] *** desertm4x joined
[17:10] *** payload joined
[17:10] *** SmokeMachine joined
[17:18] *** [particle] left
[17:23] *** KyleHa left
[17:26] *** zarko left
[17:27] *** zarko joined
[17:27] *** [particle]1 is now known as [particle]

[17:28] *** zarko left
[17:35] *** KyleHa joined
[17:38] *** nbrown_ joined
[17:38] *** zarko joined
[17:39] *** japhb_ left
[17:39] *** zarko left
[17:42] *** nbrown_ left
[17:43] *** nbrown left
[17:45] *** hercynium left
[17:45] *** abra left
[17:46] *** nbrown joined
[17:58] *** b2gills joined
[18:00] *** japhb joined
[18:01] *** payload left
[18:04] *** iblechbot joined
[18:09] <KyleHa> rakudo: sub a { 1 }; eval 'sub a { 2 }'; say a;

[18:09] <p6eval> rakudo 4c31fb: OUTPUT«1␤»

[18:10] *** kane_ left
[18:10] <KyleHa> perl6: sub a { 1 }; eval 'sub a { 2 }'; say OUR::a();

[18:10] <p6eval> pugs: OUTPUT«*** No such subroutine: "&OUR::a"␤    at /tmp/KZPLIeiFs4 line 1, column 38-46␤»

[18:10] <p6eval> ..rakudo 4c31fb: OUTPUT«Null PMC access in invoke()␤in Main (/tmp/IUgBKBGFHs:2)␤»

[18:10] <p6eval> ..elf 27754: OUTPUT«Subroutine a redefined at (eval 129) line 3.␤Undefined subroutine &GLOBAL::circumfix_O_32_41 called at (eval 126) line 7.␤ at ./elf_h line 5881␤»

[18:11] <moritz_> wow, three very different error messages ;-)

[18:11] *** nbrown left
[18:11] <KyleHa> std: sub a { 1 }; eval 'sub a { 2 }'; say OUR::a();

[18:11] <p6eval> std 27754: OUTPUT«Undeclared name:␤      OUR::a used at 1 ␤ok 00:03 36m␤»

[18:11] <TimToady> hmm

[18:12] <TimToady> must be a bug in OUR::

[18:12] <KyleHa> I figured it was because OUR::a was defined in the eval.

[18:12] <KyleHa> STD doesn't go into eval, does it?

[18:13] <moritz_> no.

[18:13] <TimToady> but it ought to see the outer sub a in the current package

[18:13] <wolverian> STD isn't just syntax, it does name lookups too?

[18:13] <TimToady> yes

[18:13] *** hercynium joined
[18:14] <moritz_> wolverian: it has to know if a name is a type to do the parsing right

[18:14] <wolverian> interesting. though perhaps obvious

[18:14] <wolverian> right. 

[18:14] <TimToady> and it also does settings "correctly", where UNIT::OUTER === SETTING

[18:14] <wolverian> I'm implementing a typed scheme right now, parsing isn't high on my reading list...

[18:15] <TimToady> std: my SETTING::Int $x

[18:15] <p6eval> std 27754: OUTPUT«ok 00:02 36m␤»

[18:15] <TimToady> std: my CORE::Int $x

[18:15] <p6eval> std 27754: OUTPUT«ok 00:02 36m␤»

[18:15] <TimToady> std: my UNIT::OUTER::Int $x

[18:15] <moritz_> TimToady: sorry, I don't know if I asked you before, and if so what the answer was... do you object to removing want() from the spec?

[18:15] <p6eval> std 27754: OUTPUT«ok 00:02 36m␤»

[18:15] <TimToady> hmm, maybe I'm fooling myself

[18:15] <KyleHa> rakudo: enum A <a b>; say a;

[18:16] <p6eval> rakudo 4c31fb: OUTPUT«0␤»

[18:16] <TimToady> std: my Foo::Bar $x;

[18:16] <p6eval> std 27754: OUTPUT«[31m===[0mSORRY![31m===[0m␤In "my" declaration, typename Foo::Bar must be predeclared (or marked as declarative with :: prefix) at /tmp/Hzy4GWBxKG line 1:␤------> [32mmy Foo::Bar[33m⏏[31m $x;[0m␤FAILED 00:02 36m␤»

[18:16] <KyleHa> rakudo: enum A <a b>; eval 'sub a { 3 }'; say a;

[18:16] <p6eval> rakudo 4c31fb: OUTPUT«a␤»

[18:16] <TimToady> I think want should probably go away

[18:17] <jnthn> I want it to.

[18:17] <TimToady> unless it gets implemented as a lazy continuation that waits till the result is bound :)

[18:17] <jnthn> Maybe in 6.0.1 ;-)

[18:17] * moritz_ notices the smiley at the end, and is happy

[18:17] <wolverian> by the way, why is enum's list argument a quoted list? it seems weirdly runtime-ish to me.

[18:17] <moritz_> std: my %h; enum %h;

[18:18] <p6eval> std 27754: OUTPUT«ok 00:03 39m␤»

[18:18] <moritz_> std: my %h; enum A %h;

[18:18] <p6eval> std 27754: OUTPUT«Undeclared name:␤      A used at 1 ␤ok 00:02 39m␤»

[18:18] <TimToady> many declarations run code at compile time

[18:18] <jnthn> wolverian: Certainly in Rakudo, we figure out what the type names are at compile time for named enums, and we get upset if we can't.

[18:18] <TimToady> (in theory)

[18:18] <moritz_> wolverian: I think you can give it anything that evaluates to a list or a list of pairs

[18:18] <TimToady> though STD cheats on enums

[18:18] <wolverian> okay, so it's compiletime runtime, that's fine. thanks. )

[18:19] <TimToady> like the args to 'use'

[18:19] <jnthn> rakudo: my %h; enum Foo %h;

[18:19] <p6eval> rakudo 4c31fb: OUTPUT«Could not find non-existent sub h␤»

[18:19] <jnthn> ...as I said, upset. ;-)

[18:19] <TimToady> not to mention confused

[18:20] <TimToady> but it looks like STD is backtracking on enum when it should have commited

[18:21] <jnthn> TimToady: Aye. Just not smart enough to knwo it's confused yet. :-)

[18:21] <moritz_> so you have to commit a commit fix ;-)

[18:21] <jnthn> rakudo: my %h; sub h { say "srsly wtf" }; enum Foo %h;

[18:21] <p6eval> rakudo 4c31fb: OUTPUT«srsly wtf␤Null PMC access in get_number()␤in Main (/tmp/RYyqcc1SKd:2)␤»

[18:22] <jnthn> wow

[18:22] <moritz_> where's masak when you need him? ;-)

[18:22] <moritz_> ok, I'll submit

[18:22] <jnthn> thanks.

[18:22] <TimToady> std: sub a { 1 }; eval 'sub a { 2 }'; say &OUR::a();

[18:22] <p6eval> std 27754: OUTPUT«ok 00:03 54m␤»

[18:22] <TimToady> that one works

[18:23] <jnthn> rakudo:  sub a { 1 }; eval 'sub a { 2 }'; say &OUR::a();

[18:23] <p6eval> rakudo 4c31fb: OUTPUT«invoke() not implemented in class 'Undef'␤in Main (/tmp/WNfVeWHBjC:2)␤»

[18:23] <jnthn> oh, we don't know about OUR yet.

[18:23] <TimToady> but maybe it's an accident

[18:23] <TimToady> std: sub a { 1 }; eval 'sub a { 2 }'; say &OUR::b();

[18:23] <p6eval> std 27754: OUTPUT«ok 00:03 54m␤»

[18:23] <TimToady> yeah, an accident, probably

[18:25] <TimToady> here's another bad backtrack:

[18:25] <TimToady> std: rx/ x \# /

[18:25] <p6eval> std 27754: OUTPUT«Undeclared routines:␤  rx used at 1 ␤    x used at 1 ␤ok 00:03 39m␤»

[18:25] <jnthn> Yeah

[18:25] <moritz_> ou.ch

[18:25] <jnthn> Grammar bug, or grammar engine bug?

[18:25] <TimToady> well, backtrack bug is independent of \# bug

[18:26] <jnthn> True

[18:26] <TimToady> backtrack bugs are usually trivial to fix

[18:26] <jnthn> I meant the backtrack.

[18:26] <TimToady> usually means it's missing a || <.panic: "phooey">

[18:26] <jnthn> Aye, Rakudo has taken various of those fixes from STD.pm. Often they bring nicer errors too.

[18:33] *** kane_ joined
[18:38] *** fridim_ left
[18:39] * jnthn -> dinner

[18:40] <pmichaud> back

[18:52] *** zamolxes joined
[18:52] *** masak joined
[18:54] <pugs_svn> r27755 | moritz++ | get rid of want(), it's not implementable

[18:54] <pugs_svn> r27755 | moritz++ | 

[18:54] <pugs_svn> r27755 | moritz++ | See <http://www.nntp.perl.org/group/perl.perl6.language/2009/03/msg31372.html>

[18:54] <pugs_svn> r27755 | moritz++ | for a discussion where nobody stood up in defense of want().

[18:55] *** molaf joined
[18:56] <masak> EDIDNOTWANT

[18:56] <pugs_svn> r27756 | moritz++ | [t/spec] remove tests for want(), which was removed a few minutes ago

[18:57] <pmurias> hoelzro: if you put it try rakudo on moritz box you won't feel guilty for security holes

[18:58] <pmurias> (as evalbot's security is purely trust based)

[18:58] <moritz_> s/purely/mostly/ ;-)

[18:58] <moritz_> (I know, I know... just leave me my illusions... ;-)

[18:59] <pmichaud> I recommend using moritz' box also

[18:59] <hoelzro> pmurias: I don't care if whose box we put it on, really; I just want to make it really secure for fun =)

[18:59] <hoelzro> (also as a matter of practicality)

[19:02] *** charsbar left
[19:03] *** jrtayloriv joined
[19:03] *** jrtayloriv left
[19:04] <pugs_svn> r27757 | moritz++ | [t/spec/TODO] new task: remove want() from assignment tests

[19:04] <moritz_> rakudo: sub a() { 3, 4 }; my $x; my @a = ($x = a(), 4); say @a.perl

[19:04] <p6eval> rakudo 4c31fb: OUTPUT«[[3, 4, 4]]␤»

[19:04] *** charsbar joined
[19:05] <moritz_> is that correct? or should it be [[3, 4], 4]?

[19:07] * masak thinks it correct

[19:07] <masak> oh wait.

[19:07] <masak> rakudo: sub a() { 3, 4 }; my $x; my @a = ($x = a(), 4); say $x.perl

[19:08] <p6eval> rakudo 4c31fb: OUTPUT«[3, 4, 4]␤»

[19:08] *** mberends joined
[19:08] <masak> moritz_: :)

[19:08] <moritz_> masak: that doesn't really answer my question.

[19:09] <masak> moritz_: well, things flatten, don't they?

[19:10] <moritz_> masak: there's also the question of relative precedence of , and =

[19:10] <masak> moritz_: I believe S03 is very clear on that.

[19:10] <b2gills> rakudo: sub a() { 3, 4 }; my $x; my @a = (($x = a()), 4);

[19:10] <p6eval> rakudo 4c31fb:  ( no output )

[19:11] <b2gills> rakudo: sub a() { 3, 4 }; my $x; my @a = ($x = a(), 4); say $x.perl

[19:11] <p6eval> rakudo 4c31fb: OUTPUT«[3, 4, 4]␤»

[19:11] *** rjh left
[19:11] <pmurias> moritz_: mostly? don't you fully trust us? ;)

[19:11] <b2gills> rakudo: sub a() { 3, 4 }; my $x; my @a = (($x = a()), 4); say $x.perl

[19:11] <p6eval> rakudo 4c31fb: OUTPUT«[3, 4]␤»

[19:11] <moritz_> masak: if naiively read the precedence table in S03 then it tells me that = is tighter, and therefore $x should only get the elements from a()

[19:12] <pmurias> hoelzro: releasing the code will make it more secure by having the exploits found sooner

[19:12] <masak> moritz_: no, there's a whole section on list assignment.

[19:12] <hoelzro> pmurias: then that's what I'll do

[19:12] <masak> moritz_: let me find it for you.

[19:13] <masak> line 1785.

[19:13] <moritz_> S03:1785 # too lazy to open an editor

[19:14] <masak> and it carries on explaining until S03:1861.

[19:14] <pmurias> hoelzro: if you want true obscurity you can deploy something else than you release (not recommending it) ;)

[19:16] <jnthn> moritz_: +        liste => { ...               }, # typo

[19:17] <moritz_> jnthn: oops

[19:17] <jnthn> would patch myself, but cooking

[19:17] <moritz_> I'll do it

[19:18] *** rjh joined
[19:18] <pugs_svn> r27758 | moritz++ | [S06] typo found by jnthn++

[19:19] <pmichaud> if the left hand side of eq is a scalar, it's an item assignment, and = binds tighter than comma

[19:19] <pmichaud> at present Rakudo doesn't do that -- it treats all ='s as list assignment

[19:19] *** snearch joined
[19:19] <pmichaud> sorry, it parses all ='s as list assignment

[19:19] <pmichaud> so Rakudo will incorrectly see   $x = a(), 4  as being   $x = (a(), 4)   instead of   ($x = a()), 4

[19:20] *** donaldh left
[19:20] <moritz_> pmichaud: ok, that answers my question

[19:20] *** pyrimidine joined
[19:20] <moritz_> and that's indepent of a possible @a =   to the left of the whole expression, right?

[19:20] <pmichaud> correct.

[19:20] *** donaldh joined
[19:20] <moritz_> thank you.

[19:21] *** sjohnson joined
[19:22] *** ruoso joined
[19:22] <masak> so... it's a bug? :>

[19:23] <moritz_> aye.

[19:23] * masak submits

[19:24] <pmurias> ruoso: hi

[19:25] *** masak left
[19:25] * ruoso very happy to see "want" go away

[19:26] <hoelzro> was want the Perl 6 version of wantarray?

[19:26] <moritz_> yes

[19:26] <moritz_> but it was designed to do even more than that

[19:26] <diakopter> moritz_: idea: irc.pugscode.org syntax highlight the rakudo: lines

[19:26] <ruoso> pmurias, hi

[19:26] <moritz_> diakopter: you're evil, I love you

[19:26] <diakopter> :)

[19:27] <diakopter> even better idea

[19:27] <moritz_> all perl6: lines

[19:27] <diakopter> syntax highlight them with the grammar/parser as it existed in source repo at the time the line was sent

[19:28] *** kane_ left
[19:28] <moritz_> bah, additional state

[19:28] <diakopter> (kidding)

[19:28] *** kane_ joined
[19:29] <moritz_> it was already an ugly hack to support nickname senstive r\d+ links

[19:29] *** Guest77012 left
[19:29] *** bionoid joined
[19:30] <moritz_> so that rakudo_svn  and pugs_svn r\d+ would link to the correct repo each

[19:30] <diakopter> sillier idea: for historical-to-now comparisons, display how the current rakudo outputs each line as well as how it did at the time.

[19:30] *** bionoid is now known as Guest44770

[19:32] <diakopter> silliness--

[19:35] *** edpratomo joined
[19:35] <moritz_> assign.t is a monster.

[19:35] <diakopter> to clarify, by "outputs", I meant the result of the p6eval

[19:35] *** simcop2387 left
[19:36] <moritz_> that#s what I understood too

[19:36] <TimToady> rakudo: my $silliness = "-100"; $silliness--; say $silliness

[19:36] <p6eval> rakudo 4c31fb: OUTPUT«-099␤»

[19:37] *** jauaor left
[19:38] <pugs_svn> r27759 | moritz++ | [t/spec] remove some instances of want() from assignment tests

[19:38] <diakopter> rakudo: my $silliness = "-100-"; $silliness--; say $silliness

[19:38] <p6eval> rakudo 4c31fb: OUTPUT«-099-␤»

[19:39] *** diakopter is now known as human_fuzzer

[19:39] *** simcop2387 joined
[19:39] *** human_fuzzer is now known as diakopter

[19:40] <diakopter> rakudo: my $silliness = "100-099"; $silliness--; say $silliness

[19:40] <p6eval> rakudo 4c31fb: OUTPUT«100-098␤»

[19:42] <ruoso> TimToady, sorry to keep bugging you about the same issues... but... any idea on the S11 issue?

[19:42] <moritz_> rakudo: say 5.elems

[19:42] <p6eval> rakudo 4c31fb: OUTPUT«1␤»

[19:44] <moritz_> rakudo: my $x; @$x = 2, 3, 4; say $x.perl

[19:44] <p6eval> rakudo 4c31fb: OUTPUT«Symbol '@$x' not predeclared in <anonymous> (/tmp/NMTyGe1XuW:2)␤in Main (src/gen_setting.pm:3343)␤»

[19:44] <pmurias> perl6: class Foo {multi foo(Int $foo) {say "hi"}};class Bar is Foo {multi foo($foo) {say "hello"}};Bar.foo(1);Bar.foo("hi")

[19:44] <p6eval> elf 27759: OUTPUT«No viable candidate for call to multimethod foo($,#) at (eval 132) line 20␤ at ./elf_h line 5881␤»

[19:44] <p6eval> ..rakudo 4c31fb: OUTPUT«Method 'foo' not found for invocant of class ''␤»

[19:44] <p6eval> ..pugs: OUTPUT«*** No such method in class Bar: "&foo"␤    at /tmp/v2OzMvvCPK line 1, column 93-103␤»

[19:44] <moritz_> rakudo: my $x; @($x) = 2, 3, 4; say $x.perl

[19:44] <p6eval> rakudo 4c31fb: OUTPUT«2␤»

[19:44] <pmurias> perl6: class Foo {multi foo(Int $foo) {say "hi"}};class Bar is Foo {multi foo($foo) {say "hello"}};Bar.new.foo(1);Bar.new.foo("hi")

[19:44] <p6eval> rakudo 4c31fb: OUTPUT«Method 'foo' not found for invocant of class 'Bar'␤»

[19:44] <p6eval> ..elf 27759: OUTPUT«No viable candidate for call to multimethod foo(Bar,#) at (eval 134) line 20␤ at ./elf_h line 5881␤»

[19:44] <p6eval> ..pugs: OUTPUT«*** No such method in class Bar: "&foo"␤    at /tmp/8YR3Qastbs line 1, column 93-107␤»

[19:45] <pmurias> perl6: class Foo {multi method foo(Int $foo) {say "hi"}};class Bar is Foo {multi method foo($foo) {say "hello"}};Bar.foo(1);Bar.foo("hi")

[19:45] <p6eval> pugs, rakudo 4c31fb: OUTPUT«hello␤hello␤»

[19:45] <p6eval> ..elf 27759: OUTPUT«hi␤hello␤»

[19:45] <edpratomo> rakudo: ([0, 0], [1, 1]).grep({say .perl; 1});

[19:46] <p6eval> rakudo 4c31fb: OUTPUT«0␤1␤»

[19:46] <edpratomo> pugs: ([0, 0], [1, 1]).grep({say .perl; 1});

[19:46] <p6eval> pugs: OUTPUT«\(0, 0)␤\(1, 1)␤»

[19:47] <pmurias> ruoso: is rakudo correct in my snippet?

[19:47] <ruoso> pmurias, yes... TimToady recently localized the multis to the current class

[19:48] <pmurias> so ClassHOW needs fixing here

[19:49] <ruoso> pmurias, yes... it does

[19:50] <edpratomo> hello

[19:50] <pmurias> hi

[19:50] <edpratomo> seems that rakudo is incorrect in ([0, 0], [1, 1]).grep({say .perl; 1});

[19:50] <edpratomo> ?

[19:51] *** pyrimidine left
[19:51] <moritz_> edpratomo: List.perl is not fully correct, yes

[19:51] <pmichaud> we're still waiting for a clear spec on parens, captures, and commas

[19:51] <edpratomo> i mean, $_

[19:52] <moritz_> rakudo: my $x = \(3, 4); say $x.perl; say $x.WHAT

[19:52] <p6eval> rakudo 4c31fb: OUTPUT«[3, 4]␤List()␤»

[19:52] <moritz_> edpratomo: and what do you think is wrong there?

[19:53] <edpratomo> looks correct

[19:53] <edpratomo> the $_ should contain [0,0] and [0,1], ith ink

[19:53] <edpratomo> [0,0] and [1,1]

[19:54] <pmichaud> rakudo:   say ([0,0], [1,1]).perl;

[19:54] <p6eval> rakudo 4c31fb: OUTPUT«[[0, 0], [1, 1]]␤»

[19:54] <pmichaud> I suspect it's an issue with .grep

[19:54] <edpratomo> yes

[19:54] <pmichaud> rakudo:  say ([0,0], [1,1]).map( { say .perl } )

[19:54] <moritz_> edpratomo: you're right, yes

[19:54] <p6eval> rakudo 4c31fb: OUTPUT«[0, 0]␤[1, 1]␤11␤»

[19:54] *** synth left
[19:55] <pmichaud> rakudo:  ([0,0], [1,1]).grep( { say .perl; } )

[19:55] <p6eval> rakudo 4c31fb: OUTPUT«0␤1␤»

[19:55] <pmichaud> rakudo:  ([0,0], [1,1]).grep( { say .WHAT; } )

[19:55] <p6eval> rakudo 4c31fb: OUTPUT«Int()␤Int()␤»

[19:55] *** hercynium left
[19:55] <moritz_> edpratomo: care to submit a bug report to [email@hidden.address]
[19:55] <pmurias> ruoso: are there cases where can returns more than one method yet we know which one to choose?

[19:55] <edpratomo> hmm never did that before

[19:55] *** szabgab joined
[19:56] <edpratomo> moritz_: never did that before

[19:56] <moritz_> edpratomo: it's enough if you copy&paste the lines from IRC, and a short line what you expected instead

[19:56] <edpratomo> moritz_: ok

[19:56] <ruoso> pmurias, yes... with subsets... 

[19:56] <pmichaud> rakudo:  my $test = { say .perl; };   say [0,0] ~~ $test

[19:56] <ruoso> pmurias, if more than one subset fits, the first wins

[19:56] <p6eval> rakudo 4c31fb: OUTPUT«0␤1␤»

[19:56] <pmichaud> it's a smartmatch bug.

[19:57] <moritz_> it autothreads?

[19:57] <pmichaud> here's a better one

[19:57] <pmichaud> rakudo:  my $test = { say .perl; };   [0,0] ~~ $test

[19:57] <pmurias> ruoso: i don't understand, example please?

[19:57] <p6eval> rakudo 4c31fb: OUTPUT«0␤»

[19:57] <pmichaud> something is happen to the [0,0] in the smartmatch to cause it to become its first element

[19:57] <pmichaud> rakudo:  my $test = { say .perl; };   [2,4] ~~ $test

[19:57] <pugs_svn> r27760 | kyle++ | [t/spec] Test for RT #63882

[19:57] <p6eval> rakudo 4c31fb: OUTPUT«2␤»

[19:57] <KyleHa> Some more experienced eyeballs on that one would make me happy.

[19:58] <moritz_> rakudo: [2,4] ~~ .elems.say

[19:58] *** synth joined
[19:58] <p6eval> rakudo 4c31fb: OUTPUT«24␤»

[19:58] <moritz_> KyleHa: will take a look, sure

[19:58] <KyleHa> Thanks!

[19:59] <pugs_svn> r27761 | moritz++ | [t/spec] rewrite more assignment tests to not use want()

[19:59] <pmichaud> rakudo:  [0,0] ~~ { say .perl }

[19:59] <p6eval> rakudo 4c31fb: OUTPUT«0␤»

[19:59] <ruoso> pmurias, if a parameter matches the type in two candidates which use subsets, it won't be an "ambiguous exception", but the first will win

[19:59] *** zamolxes left
[20:00] <moritz_> KyleHa: looks fine

[20:00] <KyleHa> Thanks, moritz++

[20:11] *** snearch left
[20:14] <pmurias> ruoso: i meant the ClassHOW.^can

[20:16] <ruoso> pmurias, what's the difference?

[20:18] <jnthn> AFAIK, .^can returns an iterator

[20:18] <jnthn> That (perhaps lazily) works out what methods are available to be called.

[20:23] *** sri_kraih_ joined
[20:25] *** icwiener joined
[20:34] *** hudnix_ joined
[20:34] <pmurias> what i don't understand is when does .^can returns multiple methods

[20:35] <jnthn> pmurias: What do you mean by "multiple method"?

[20:35] <pmurias> multiple elemens

[20:35] <pmurias> * elements

[20:35] <jnthn> pmurias: AFAIK, it returns an iterator that lets you get all possible methods that could be called.

[20:35] <pmurias> there are no iterators in Perl 6

[20:36] *** edpratomo left
[20:36] <jnthn> In Rakudo, it'll do it (plan to implement this Real Soon Now...) using the same mechanism that is used to do ordinary dispatch and deference.

[20:36] <jnthn> OK, something that does the Iterator role then. :-)

[20:37] <pmichaud>  I found the issue with smart matching

[20:37] <pmichaud> fixing now.

[20:37] <jnthn> pmichaud: Nice.

[20:37] <jnthn> pmichaud: About to start trying to untangle my bunch of patches.

[20:37] <pmichaud> yay

[20:38] <PerlJam> pmurias: It sure is weird to have a whole synopsis on iterators if they aren't in the language :)

[20:39] <pmurias> sorry, i think i'm mistaken

[20:40] *** sri_kraih left
[20:40] <jnthn> pmurias: I didn't quite figure out what I'm going to return just yet tbh.

[20:40] <jnthn> Might have to make a first approximation and see where masak breaks it. :-)

[20:41] <pmurias> are the iterators supposed to be visible in the language or are they just internal plumbing

[20:41] <jnthn> As far as I can follow it, the Iterator role exposes an interface that things that want to act iterator-y should provide.

[20:42] <pmurias> that's my understanding too

[20:42] <jnthn> But what goes under the hood I guess varies depending on what you're itereating.

[20:42] <jnthn> e.g. it'll look quite different for a filehandle than what .^can returns, I guess.

[20:43] <pmurias> but what i'm unsure of is are we supposed to use the iterator as lazy lists or using the Iterator role

[20:44] <jnthn> In the specific case of .^can?

[20:44] <pmurias> as lazy lists are just iterators which remember past values

[20:44] <pmurias> jnthn: in the general case of Perl 6 programming

[20:44] <ruoso> pmurias, they can be visible as well... there are a lot of iterators that are invisible to the user, but they are only invisible while you don't look for them

[20:44] <ruoso> pmurias, at the moment you start looking for them, they'll become visible

[20:44] <jnthn> ruoso: There's probably a decent bit of truth in that.

[20:45] <jnthn> Back to .^can though, I guess you probably should be able to say

[20:45] <jnthn> for $foo.^can('bar') -> $meth { ... }

[20:46] <ruoso> while if you do my @a = $foo.^can, it will eagerly return the list and store on the new array

[20:46] <jnthn> The only thing I'm not sure of is if you're also meant to be able to do $foo.^can('bar').()

[20:46] <jnthn> Right, but that's a property of array assignment, and nothing special to .^can

[20:46] <ruoso> jnthn, the crude return of $foo.^can is a capture, so it can intercept .() atoo

[20:47] <jnthn> atoo?

[20:47] <jnthn> oh, typo of too

[20:47] <ruoso> s/a//

[20:47] * jnthn tries to see acronyms in everything :-/

[20:47] <jnthn> Yeah, to invoke.

[20:47] <jnthn> That's kinda what falls out of Rakudo's current approach. Kinda.

[20:48] <pmurias> ruoso: what does $foo.^can return?

[20:48] <ruoso> it returns something that DWIM to call the desired method

[20:48] <ruoso> but can be used to iterate in all the possible candidates as well

[20:49] *** hercynium joined
[20:49] <ruoso> $foo.^can is a proto-invocation

[20:49] * jnthn is glad ruoso saw it that way too.

[20:49] <jnthn> Given that's what I implemented. :-)

[20:49] <jnthn> (not for .^can yet, but it's the underlying plumbing)

[20:50] <jnthn> If it's really that simple, .^can might be about to be very easy to implement in Rakudo...

[20:50] <ruoso> there's one extra bit to that...

[20:50] <pmurias> ruoso: possible candidates being all the inherited methods?

[20:50] <ruoso> which is that the invocation $foo.^can is a multi, not private to that object

[20:50] <jnthn> That and also also multi candidates.

[20:51] <jnthn> ruoso: erm?

[20:51] <jnthn> It's a call on the metaclass, no?

[20:51] <ruoso> jnthn, sorry... that didn't look right

[20:51] <ruoso> the dotty is lexically bound

[20:52] <ruoso> it's really like if "infix:<.>" was an operator

[20:52] <ruoso> getting the list of valid candidates is up to the metaclass

[20:53] <ruoso> deciding how to invoke the list is up to the current lexical scope

[20:53] <jnthn> Right, but it's the metaclass that returns the list (or iterator that would produce the list).

[20:53] <ruoso> at least that's how I understood some TimToady wordings in irc

[20:53] <ruoso> jnthn, exactly

[20:53] <jnthn> OK, I think we're agreeing. :-)

[20:54] <ruoso> it's about nextsame and stuff

[20:54] <jnthn> I'm not quite sure infix:<.> is really a multi-dispatch though.

[20:54] <ruoso> doing it in the caller side makes it easier

[20:54] <ruoso> jnthn, it's *kinda*

[20:54] <ruoso> jnthn, TimToady said something about it a while ago

[20:54] <jnthn> Oh sure, the metaclass provides the candidate list, and nextsame just consumes it. In Rakudo, nextsame ain't really all that special.

[20:55] <jnthn> The nasty is all in the dispatcher.

[20:55] <ruoso> yeah... it becomes just a special contextual variable

[20:56] <ruoso> $*CURRENT_INVOCATION_CANDIDATE_LIST or something longer

[20:56] <ruoso> and harder to type

[20:56] <jnthn> Aye. Right now, it's kept hidden away in Rakudo.

[20:56] <jnthn> It's stored as a lexical for sure.

[20:56] <jnthn> But under an unsigl'd name.

[20:57] <ruoso> I'm not yet sure how that works with the idea that not all dispatching happens through .^can

[20:57] <jnthn> In Rakudo, it pretty much does.

[20:57] <ruoso> but maybe that's just optimization

[20:58] *** pmurias left
[20:58] <ruoso> and .^can should return a proto-call even if that can't be decomposed into a list

[20:58] <jnthn> It's the most natural way to build Perl 6 dispatch semantics on the primitives Parrot provides.

[20:59] <jnthn> ...proto-call?

[21:00] <ruoso> jnthn, yeah... considering $foo.^can('method').()

[21:01] <jnthn> I don't understand the term "proto-call".

[21:01] <ruoso> it's a "soon-to-be-a-call"

[21:01] <jnthn> Unless you just mean "something callable"?

[21:01] <jnthn> Ah, OK.

[21:01] <jnthn> Well, if you bother to call it rather than just checking you can. But yes. :-)

[21:02] <ruoso> jnthn, but in the low-level, it's probably going to be called unless known otherwise

[21:03] <ruoso> since dotty semantics are complicated

[21:03] <ruoso> i.e.: nextsame and stuff

[21:03] <jnthn> Oh yes, I'm not saying we optimize away it's callability or anything.

[21:04] <jnthn> There'd be no saving from a Rakudo angle anyway.

[21:04] *** molaf left
[21:04] <ruoso> the point is that this is a pessimization for SMOP

[21:04] <jnthn> To make it also callable?

[21:04] <ruoso> since SMOP can handle direct calls

[21:04] <ruoso> jnthn, having to do it through .^can in order to support nextsame

[21:05] * ruoso decommute &

[21:05] * ruoso later &

[21:05] <jnthn> Ah, I see

[21:05] <jnthn> cu

[21:05] *** ruoso left
[21:06] *** Su-Shee left
[21:07] *** desertm4x left
[21:14] *** Whiteknight joined
[21:14] *** icwiener left
[21:22] * jnthn does a make spectest and wonders what the fallout will be

[21:33] *** [particle]1 joined
[21:37] *** lumi__ joined
[21:37] *** lumi_ left
[21:40] <jnthn> awww...fails :-(

[21:42] *** maja_ joined
[21:47] *** cdarroch left
[21:50] *** [particle] left
[21:51] *** KyleHa left
[21:52] *** skids_ left
[21:54] *** maja__ left
[21:59] *** hoelzro left
[22:00] <jnthn> rakudo: my $x = "\x[391]\x[391]\x[391]"; say (--$x ~~ Failure)

[22:01] <p6eval> rakudo 4c31fb: OUTPUT«1␤»

[22:01] <jnthn> rakudo: my $x = "\x[391]\x[391]\x[391]"; say --$x)

[22:01] <jnthn> rakudo: my $x = "\x[391]\x[391]\x[391]"; say --$x

[22:01] <p6eval> rakudo 4c31fb: OUTPUT«Syntax error at line 2, near ")"␤in Main (src/gen_setting.pm:3343)␤»

[22:01] <p6eval> rakudo 4c31fb: OUTPUT«Decrement out of range␤␤»

[22:01] <jnthn> Aww, how on earth have I managed to turn that into a Null PMC Access locally...

[22:02] *** mj41 joined
[22:02] <jnthn> oh

[22:02] <jnthn> I haven't

[22:03] * jnthn was looking at the wrong tests

[22:04] <jnthn> (it waws the hebrew ones, and they were todo...)

[22:05] <jnthn> rakudo: my $x = "\x[5d0]\x[5d0]\x[5d0]"; say --$x

[22:05] <p6eval> rakudo 4c31fb: OUTPUT«אאא␤»

[22:11] *** missingthepoint joined
[22:11] *** M_o_C left
[22:13] <jnthn> rakudo: say Callable ~~ Any

[22:13] <p6eval> rakudo 4c31fb: OUTPUT«1␤»

[22:13] *** alester left
[22:15] *** explorer left
[22:15] <missingthepoint> rakudo: say Dolphin ~~ Fish

[22:15] <p6eval> rakudo 4c31fb: OUTPUT«Could not find non-existent sub Fish␤»

[22:15] <missingthepoint> hmm :(

[22:16] <jnthn> rakudo: class Fish { }; class Dolphin is Fish { }; say Dolphin ~~ Fish; # Rakudo just needs a lil education.

[22:16] *** iblechbot left
[22:16] <p6eval> rakudo 4c31fb: OUTPUT«1␤»

[22:17] <missingthepoint> thanks for edumacatin' Rakudo. :)

[22:19] <jnthn> rakudo: say "we don't need to edukashun"

[22:19] <p6eval> rakudo 4c31fb: OUTPUT«we don't need to edukashun␤»

[22:19] *** SmokeMachine left
[22:20] <pmichaud> o/  all in all it's just another brick from The Wall o/

[22:21] <dalek> rakudo: 53059d1 | pmichaud++ |  (4 files):

[22:21] <dalek> rakudo: Correct Code.ACCEPTS and Regex.ACCEPTS .  [1,2,3] ~~ { ... }  should now work properly.

[22:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/53059d1c5435fce71029ecfad98b0b6f350d5d1e

[22:21] <missingthepoint> pmichaud: haha :=)

[22:21] <jnthn> pmichaud: I'm almost there with being ready to merge...

[22:22] <jnthn> pmichaud: I discovered a curiosity though.

[22:22] <jnthn> rakudo: say Object ~~ Bool::True

[22:22] * missingthepoint giggles at that little exchange...

[22:22] <p6eval> rakudo 4c31fb: OUTPUT«1␤»

[22:22] <jnthn> pmichaud: Well, this fails when we stop lying.

[22:22] <jnthn> Since

[22:23] <jnthn> method ACCEPTS($topic) {

[22:23] <jnthn>         return self;

[22:23] <jnthn>     }

[22:23] <jnthn> Guess what? Now that Object !~~ Any (phew!) the sig don't bind.

[22:23] <jnthn> So I've changed it to 

[22:23] <jnthn>     method ACCEPTS(Object $topic) {

[22:23] <jnthn>         return self;

[22:23] <jnthn>     }

[22:23] <moritz_> so it won't autothread

[22:23] <jnthn> But that now means it won't auto-thread. :-/

[22:24] <jnthn> (we were actually wanting Object ~~ Bool::True to work somewhere in the setting.)

[22:24] <jnthn> (not even in a test...but in the setting.)

[22:24] <pmichaud> it's okay with me if  ~~ Bool::True doesn't autothread, because the result is the same.

[22:25] <pmichaud> The bigger question is whether other .ACCEPTS methods need to accept Object parameters

[22:25] <jnthn> Right.

[22:25] <jnthn> I'm not feeling quite awake enough ATM to ponder if there's wider fallout.

[22:25] <moritz_> rakudo: say ?(none(1, 2) ~~ True)

[22:25] <p6eval> rakudo 4c31fb: OUTPUT«0␤»

[22:25] <jnthn> I pass all of the junctions tests anyways.

[22:25] <moritz_> that will give 1 if it stops autothreading.

[22:25] <pmichaud> where in the setting are we looking for   Object smart matching against true

[22:26] <jnthn> pmichaud: WALK

[22:26] <jnthn> See sig

[22:26] <jnthn> Matcher :$omit = False, Matcher :$include = True

[22:26] *** kst left
[22:26] <jnthn> That is, we default to omitting nothing and including every class's methods.

[22:26] <pmichaud> moritz_: I can argue that rakudo is wrong in the example you just gave

[22:27] <jnthn> It doesn't feel like a crazy thing to do to me...

[22:27] *** kst joined
[22:27] <pmichaud> for the moment, I think the correct thing is for   Object ~~ Bool::True to fail.

[22:28] <jnthn> The thing is 

[22:28] <jnthn> It doesn't just return false

[22:28] <pmichaud> The smart matching table says "Any".

[22:28] <moritz_> pmichaud: the smartmathing table says 'Any  Bool', not 'Object  Bool'

[22:28] <jnthn> It....explodes.

[22:28] <pmichaud> moritz_: exactly.

[22:28] <pmichaud> jnthn: we should fix WALK then to avoid smart matching Object against truth.

[22:28] <pmichaud> what line is doing it now?

[22:29] <jnthn> if $include.ACCEPTS($class) && !$omit.ACCEPTS($class) {

[22:29] <pmichaud> (what file?)_

[22:29] <jnthn> For WALK?

[22:29] <jnthn> Object.pm

[22:30] <jnthn> I can easily work around it.

[22:30] <jnthn> Just defauting to Ture (always matches) and False (never matches) felt like the Right Thing.

[22:31] <pmichaud> jnthn: it may indeed be the Right Thing.  But for now I think we go with a literal interpretation of the smart matching table ("Any", not "Object") and perhaps ask for clarification from p6l

[22:31] <jnthn> OK

[22:32] <jnthn> Beyond that, tests are looking quite good after I fix up other fallout.

[22:32] <moritz_> rakudo: say undef ~~ Any

[22:32] <pmichaud> because whatever we decide for boolean could be argued for many of the many other tests

[22:32] <p6eval> rakudo 4c31fb: OUTPUT«1␤»

[22:32] <jnthn> Aye.

[22:32] <jnthn> In that case, it may be a can of worms better left closed.

[22:32] <pmichaud> and it's pretty clear to me that the others need to autothread

[22:33] <pmichaud> in .WALK I think I would just skip over Object

[22:33] <pmichaud> although I guess that doesn't quite work

[22:33] <jnthn> ?

[22:34] <jnthn> No, it doesn't.

[22:35] <pmichaud> afk, dinner

[22:37] <jnthn> Time to make dalek flood...

[22:38] <pugs_svn> r27762 | jnthn++ | [t/spec] Start cleaning up/correcting some traits tests. Think Rakudo should be able to run this one soon, or at least much of it.

[22:39] <jnthn> rakudo: { .^can('n') }.signature.perl.say

[22:39] <p6eval> rakudo 4c31fb: OUTPUT«:(Object $_?)␤»

[22:40] *** explorer joined
[22:40] *** Limbic_Region joined
[22:41] <moritz_> 53059d1c5435fce71029ecfad98b0b6f350d5d1e seems to break t/spec/S06-multi/type-based.t

[22:42] <pugs_svn> r27763 | jnthn++ | [t/spec] ::FOO gives a Null PMC back. .does is now more sensitive to this (probably now that it delegates to the right place). Anyway, was probably slightly bogus pass in the first place.

[22:44] <pugs_svn> r27764 | jnthn++ | [t/spec] .does(Enum::Value) is on shakey ground, since the values are not roles, like the enum itself. Having investigated, we passed this for extremely bogus reasons before now. But I suspect these may not even be valid tests. Skip 'em for now with a note saying as much.

[22:45] <jnthn> moritz_: Is that pmichaud's latest push?

[22:45] <moritz_> jnthn: yes

[22:46] <jnthn> moritz_: lol.

[22:46] <jnthn> moritz_: I also broke and then fixed that test. ;-)

[22:46] <jnthn> In the bunch of stuff I'm about to push.

[22:46] * moritz_ will test again tomorrow

[22:47] * jnthn checks his and pm's code at least build together.

[22:47] <jnthn> yes

[22:48] <jnthn> push!

[22:48] <jnthn> o hrovno

[22:48] <jnthn> yes, I see the breakage too.

[22:49] <jnthn> pmichaud: See above... t\spec\S06-multi\type-based.t br0ked. :-(

[22:49] <Limbic_Region> jnthn - are you in Japan yet?

[22:49] <jnthn> Limbic_Region: Not yet

[22:49] <jnthn> Limbic_Region: Not for a while yet.

[22:50] <Limbic_Region> so Korea comes after that?

[22:50] *** nihiliad left
[22:50] <jnthn> Limbic_Region: Just trying to learn some stuff ahead of going. :-)

[22:50] <jnthn> Right.

[22:50] <jnthn> Having about 2 weeks in each.

[22:50] <jnthn> And hitting YAPC::Asia while I'm in Japan.

[22:50] <Limbic_Region> do you know what parts of Korea you will be in?  I might make some recommendations on things to do and places to go

[22:51] <jnthn> So far I know I will arrive into Busan.

[22:51] <jnthn> Other than that, I didn't plan much yet.

[22:51] <jnthn> Got the Japan bit pretty planned out, but not sure about Korea.

[22:51] <jnthn> Suggestions welcome.

[22:51] <Limbic_Region> oh, well - that place is know for it's Russian Juicy Girls :-)

[22:51] <jnthn> ...do I even want details? ;-)

[22:52] <Limbic_Region> waste of money - nuff said

[22:52] <Limbic_Region> regarding where to go and what to do - I will ping you on FB - best to leave the channel to somewhat on topic

[22:52] * jnthn is almost afraid to google

[22:53] <Limbic_Region> ok - if you must know

[22:53] <jnthn> "Hot girls pictures from Pakistan and celebrities juicy pictures..."...yeah, thanks Google.

[22:53] <Limbic_Region> in the cities where ever the US has US military, the bars employee what they call juicy girls

[22:53] <jnthn> Ah.

[22:53] <Limbic_Region> a juicy girl works for the bar and will sit with you, and get rather friendly as long as you are buying her drinks

[22:54] <Limbic_Region> the drinks are expensive - probably 10,000 won or more

[22:54] <jnthn> ...which are probably sold to you at inflated prices, in order to pay for said girl?

[22:54] <dalek> rakudo: 82b59c4 | jnthn++ | :

[22:54] <dalek> rakudo: Merge latest.

[22:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/82b59c45c398669a3bd72e25e07ee3527080fda5

[22:54] <dalek> rakudo: d043978 | jnthn++ | src/pmc/perl6multisub.pmc:

[22:54] <dalek> rakudo: Fix a bug in the narrowness analyzer for multi-dispatch (not being narrower is a necesary but not sufficeint condition for being tied).

[22:54] *** dalek left
[22:54] <Limbic_Region> but regardless of what you order - the girl is likely only drinking juice

[22:54] <jnthn> lolibrokedalek

[22:54] <Limbic_Region> this is so she can continue drinking all night long

[22:54] <jnthn> Cunning plan.

[22:54] *** dalek joined
[22:55] <jnthn> For her. Not for her drunkee.

[22:56] <jnthn> "This time is generally like a date in that the girl sits with the customer, asks questions about his life and pretends to be generally interested."

[22:56] <jnthn> I love the insinuation that on a date, a girl only pretends to be interested. ;-)

[22:56] <jnthn> wikipedia++

[22:56] <jnthn> OK, thanks for the warning.

[22:57] <jnthn> erm, any...good...recommendations for Korea? ;-)

[22:57] <Limbic_Region> plenty

[22:57] <Limbic_Region> regardless of what your tastes are

[22:57] <jnthn> Not Russian Juicy Girls, it seems.

[22:57] <Limbic_Region> buddhists temples, cuisine, night life, etc

[22:58] <Limbic_Region> they are a waste of money - if you want that kind of entertainment, I could point you in the right direction

[22:58] <jnthn> No, I don't really feel a need to pay people to pretend to like me. I'm not *that* bad. :-)

[22:58] <jnthn> Cuisine...now THAT is what I like.

[22:59] <Limbic_Region> well, the beer is mediocre at best - better to drink the soju if you like it

[23:00] * Limbic_Region is eating but promises to ping you on FB about food later

[23:01] <jnthn> Not tried it, but I live in an east european country, so am plenty used to things along those lines ;-)

[23:01] <jnthn> Cool

[23:01] <jnthn> Probably better there than filling #perl6 with it. ;-)

[23:02] * Tene searches for jnthn on FB

[23:02] <jnthn> rakudo: say "I { ("want", "don't want").pick } a Russian Juicy Girl";

[23:02] <p6eval> rakudo 53059d: OUTPUT«I don't want a Russian Juicy Girl␤»

[23:03] <jnthn> Well we did something right in Rakudo.

[23:03] <jnthn> (After tonights flurry of patches, Rakudo now lies to itself a bunch less too. Now tomorrow I can get back to doing interesting things.)

[23:03] <pmichaud> jnthn: type-based.t passes on my box

[23:04] <jnthn> pmichaud: orly?

[23:04] <jnthn> Hmm. :-S

[23:04] <pmichaud> perhaps I forgot to commit something?

[23:04] <pmichaud> no, looks like it's all there to me.

[23:05] <pmichaud> http://gist.github.com/156813

[23:06] <jnthn> pmichaud: Something else must be adrift.

[23:06] <jnthn> Oh!#

[23:06] <jnthn> pmichaud: Think I didn't realclean.

[23:07] <jnthn> And re-Configure

[23:07] <pmichaud> That might do it.

[23:07] <jnthn> And you'd added a file.

[23:07] <jnthn> (Code.pm)

[23:07] <pmichaud> yes, that would certainly do it.

[23:07] <jnthn> Yeah, I get fails all over the place.

[23:07] <jnthn> That'll be why.

[23:07] <jnthn> offs

[23:07] <jnthn> Parrot revision r40294 required (currently r40291)

[23:07] <jnthn> Where does it get the rev number from?

[23:07] <pmichaud> build/PARROT_REVISION

[23:07] <jnthn> And can we make this a warning rather than a omg-i-won't-write-makefile

[23:07] <jnthn> No, the current revision.

[23:08] <jnthn> I find if I've comitted that latest revsion

[23:08] <jnthn> And I go to re-configure

[23:08] <jnthn> Without re-configuring and re-building my Parrot

[23:08] <jnthn> I get this issue.

[23:08] <jnthn> It's annoying.

[23:08] <pmichaud> I don't follow (more)

[23:08] <pmichaud> the build/PARROT_REVISION I have is 40282

[23:08] <pmichaud> I haven't updated recently

[23:08] <jnthn> OK, the latest is the one reported there

[23:09] <jnthn> However, svn info in my Parrot build dir reports

[23:09] <jnthn> Parrot revision r40294 required (currently r40291)

[23:09] <Tene> jnthn: you need to reconfigure Parrot too.

[23:09] <jnthn> oops

[23:09] <jnthn> Tene: Yes, I know.

[23:09] <pmichaud> it gets 40291 from the parrot_config executable.

[23:09] <jnthn> Right, so I see.

[23:09] <jnthn> I guess I can go re-Configure my Parrot.

[23:10] <jnthn> I'd just prefer to see this as a warning that I might have a problem than a refusal to write a makefile.

[23:10] <pmichaud> for the average person, it needs to be stronger than a warning.

[23:10] <pmichaud> Otherwise we end up with the case that you just ran into with Code.pm, but on a much larger scale

[23:11] <pmichaud> (i.e., you overlooked the warning that was telling you your Makefile is out of date :-)

[23:11] <jnthn> :-P

[23:12] <jnthn> Anyway, hopefully the missing Code.pm in my makefile was the issue.

[23:12] <pmichaud> very likely.

[23:12] <jnthn> The tests that failed in that test would not be fun ones to fix. ;-)

[23:12] <pmichaud> Code.ACCEPTS was moved out of src/classes  and into src/setting

[23:12] <jnthn> Ah, OK.

[23:12] <jnthn> I noticed it got shorter in the process. :-)

[23:12] <pmichaud> so anything that would attempt to smartmatch against a closure would fail

[23:12] <jnthn> Ah

[23:12] <jnthn> Those tests that failed all would have.

[23:13] <pmichaud> it got short yes, but that's because we *were* doing the Regex.ACCEPTS logic in Code.ACCEPTS

[23:13] <pmichaud> i.e., dating from the time when we couldn't distinguish regexes from other code blocks

[23:13] <jnthn> Ah, you broke those two out now?

[23:13] <jnthn> Right.

[23:13] <jnthn> Cool

[23:13] <pmichaud> and   Array ~~ Regex    is different from Array ~~ Code

[23:13] <jnthn> That probably fixes other lingering odnesses.

[23:13] <pmichaud> which is why    [1,2,3] ~~ { .say }     was producing the wrong result

[23:14] <pmichaud> the Regex.ACCEPTS probably deserves to be written in setting as well

[23:14] <pmichaud> but I figured I'd just get it working for now.

[23:14] <jnthn> working is good.

[23:14] <jnthn> Are you planning to work on the PGE/NQP refactors this week?

[23:15] <pmichaud> either that or on the REPL

[23:15] <pmichaud> likely both

[23:15] * jnthn prefers PGE/NQP refactors

[23:15] <jnthn> That'll unblock the lexicals refactor.

[23:15] <jnthn> Which I really want.

[23:15] <pmichaud> well, the REPL may be my Rakudo Day

[23:15] <pmichaud> I need to catch up on those, too.

[23:15] <jnthn> *nod*

[23:15] <jnthn> I will do one this week.

[23:15] <pmichaud> I'm going to do 2-per-week until I catch up

[23:16] <pmichaud> conference season has kept me busy :-)

[23:16] <jnthn> Confirm type-based.t works now

[23:16] *** hyfen joined
[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:23] *** Whiteknight left
[23:24] *** missingthepoint left
[23:25] <pmichaud> good, glad I didn't hose anything.

[23:25] *** ihrd joined
[23:26] <dalek> rakudo: ea667e8 | pmichaud++ | docs/spectest-progress.csv:

[23:26] <dalek> rakudo: spectest-progress.csv update: 423 files, 12043 passing, 0 failing

[23:26] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/ea667e8db3d36da27479a7bbd7518ed308485b9b

[23:27] *** hoelzro joined
[23:27] <pmichaud> afk for a bit  # walk

[23:31] * jnthn -> sleep

[23:51] *** synth left
