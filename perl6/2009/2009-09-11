[00:00] *** elton_mcz joined
[00:00] *** tak_ joined
[00:00] *** tak11 left
[00:08] *** elton_mcz left
[00:10] *** Whiteknight joined
[00:13] *** ruoso joined
[00:13] *** ruoso_ joined
[00:15] *** ruoso_ left
[00:20] *** frew_ joined
[00:20] *** meppl left
[00:38] *** ihrd joined
[00:38] *** ihrd left
[00:40] *** alexe_ joined
[00:41] *** alexe_ is now known as alexe

[00:43] *** sevvie joined
[00:43] *** hercynium_ joined
[00:47] <mikehh> rakudo (5960161) builds on parrot r411796 - make test / make spectest (up to r28216) PASS - Ubuntu 9.04 amd64 (g++)

[00:47] <mikehh> rakudo - t/spec/S03-operators/arith.rakudo - TODO passed:   120, 131-132

[00:47] <mikehh> rakudo - t/spec/S02-names_and_variables.rakudo - Non-zero wait status: 11 (Segfault after passing tests)

[00:56] <colomon> On Complex.sin -- seems like more or less the same thing is happening to it as happened to Num.sin.  Only difference is it looks like it really is a Complex being passed in.  

[00:57] <colomon> Is it possible Complex.sin is calling a Parrot Complex.sin function rather than the Complex.sin defined in Complex.pm?  I added a "say" in Complex.pm's sin, and it is never called, even on the Complex.sin calls that work.

[00:57] *** hercynium left
[00:57] *** hercynium_ is now known as hercynium

[00:57] *** hercynium_ joined
[00:58] *** hercynium left
[00:58] *** hercynium_ is now known as hercynium

[01:15] *** alexe_ joined
[01:15] *** frew___ joined
[01:16] *** frew_ left
[01:17] *** alexe left
[01:17] *** alexe_ is now known as alexe

[01:27] <colomon> rakudo: say 0.0.cosh;

[01:27] <p6eval> rakudo 446d49: OUTPUT«1␤»

[01:27] <colomon> rakudo: say 0.0.cosh('degrees');

[01:27] <p6eval> rakudo 446d49: OUTPUT«57.2957795130823␤»

[01:28] <colomon> Ummm... that can't possible be right, can it?

[01:29] *** frew___ left
[01:29] <TimToady> did you mean arccos?

[01:30] <colomon> No, I meant cosh, hyperbolic cos.

[01:30] <colomon> Rakudo is treating it as if the output of the function was an angle measure, and so adjusting the output by base.

[01:31] <TimToady> hmm, that might work if the slope of the curve were .5 :)

[01:32] <TimToady> er, 1

[01:32] <TimToady> but somehow cosh never struck me as an identity function

[01:33] * wayland76 gets it -- cosh never struck me :)

[01:34] <TimToady> we're civilized in America; we don't cosh people, we club 'em

[01:34] *** dukeleto left
[01:36] *** Whiteknight left
[01:37] <wayland76> Well, I learned about coshes from American comic strips :)

[01:37] *** jaldhar left
[01:38] <colomon> I can't recall ever hearing of "cosh" for a blackjack-type weapon before.

[01:38] <wayland76> Well, you obviously don't read the right kind of comics :)

[01:39] <wayland76> I think it was a Phantom comic, possibly one older than I am

[01:40] <colomon> I have been reading comics older than I am (by a few months, anyway) lately, but they were circa-1970 Iron Man issues.

[01:42] <colomon> Anyway, can someone out there confirm I am not insane?  The hyperbolic functions take an angle as an argument, not return an angle.  If that is correct, then both the implementation and tests for cosh (and presumably the others) are flat out wrong.

[01:42] <colomon> Take a "hyperbolic angle" according to wikipedia.

[01:47] <TimToady> doesn't look like you can measure a hyperbolic angle in "degrees"...

[01:48] <TimToady> interestingly, you can think of ordinary angles as areas in a sector of a circle

[01:48] *** sri_kraih_ joined
[01:49] <TimToady> it just happens to be linear in ϑ

[01:52] <TimToady> anyway, I'd guess someone just cargo-culted the code from circular functions

[01:52] <colomon> TimToady: where are you getting the degrees thing?

[01:52] <TimToady> which degrees thing?  when talking about ϑ I mean circular functions

[01:52] <colomon> and if we use that logic, do we chuck out the different bases on Complex sin / cos as well?

[01:53] <colomon> "doesn't look like you can measure a hyperbolic angle in "degrees""

[01:53] <TimToady> it's a measure of area

[01:53] *** agentzh joined
[01:53] <TimToady> according to wikipedia

[01:54] <colomon> "Just as a point on a circular segment sweeps out an area proportional to the circular angle, so too it can be shown that with the above definition a point on a hyperbolic sector sweeps out an area proportional to the hyperbolic angle"

[01:54] <colomon> Also according to wikipedia.  ;()

[01:54] <TimToady> sure, I just doubt that anyone measures it in degrees for hyperbolics

[01:55] <TimToady> but I'm certainly not claiming to be an expert...

[01:56] *** Caelum left
[01:56] <TimToady> haven't thought about hyperbolic functions for 35 years...

[01:56] *** Caelum joined
[01:56] <TimToady> that was back when I was intelligent but stupid

[01:57] <colomon> They don't seem to have a lot of day-to-day uses, for sure.  

[01:59] * araujo guesses now TimToady is just .... intelligent?? 

[01:59] <TimToady> now I'm an idiot, but a very smart one

[02:00] <araujo> hahaha

[02:00] <wayland76> I engage in hyperbole but don't think much about its function :)

[02:00] <TimToady> I prefer to be elliptical

[02:02] <TimToady> angles are conic sections too, but they don't get much respect

[02:04] *** payload left
[02:04] *** arthur-- left
[02:04] *** rfordinal left
[02:04] *** Confield left
[02:04] *** cblaptop left
[02:04] *** krakan left
[02:04] *** betterwosld left
[02:04] *** jql left
[02:04] *** BooK left
[02:04] *** chipdude left
[02:04] *** hatseflats left
[02:04] *** psychoschlumpf left
[02:04] *** cj left
[02:04] *** pioto left
[02:04] *** |Jedai| left
[02:04] *** tarbo2 left
[02:05] *** BooK joined
[02:05] *** hatseflats joined
[02:05] *** cj joined
[02:05] *** Jedai joined
[02:05] *** sri_kraih left
[02:05] *** sri_kraih_ is now known as sri_kraih

[02:06] *** meppl joined
[02:07] *** __ash__ joined
[02:08] <colomon> phenny: tell pmichaud calls to Complex.sin appear to be rewired to calls to Parrot's Complex.sin function rather than Complex.pm's.  Not sure if this is worth fixing right away, as am having existential crisis about whether Complex trig should support anything other than radians.

[02:08] <phenny> colomon: I'll pass that on when pmichaud is around.

[02:10] *** psychoschlumpf joined
[02:11] <__ash__> colomon did you try mapping Perl6 Complex to parrot's complex like how he did with Num and Float

[02:16] *** hercynium left
[02:22] *** payload joined
[02:22] *** JimmyZ_ joined
[02:40] *** payload left
[02:45] *** Confield joined
[02:52] *** stephenl1 is now known as stephenlb

[03:05] *** jaldhar joined
[03:09] *** cdarroch left
[03:17] *** jaldhar left
[03:23] *** sri_kraih left
[03:23] *** jaldhar joined
[03:24] *** frew_ joined
[03:27] *** sri_kraih joined
[03:28] *** jaldhar left
[03:29] *** jaldhar joined
[03:30] *** dukeleto joined
[03:39] *** mepplock joined
[03:40] *** japhb left
[03:46] *** rez2009 joined
[03:47] *** rez2009 left
[03:55] *** meppl left
[04:08] *** mepplock left
[04:10] *** __ash__ left
[04:14] *** tak_ left
[04:14] *** synth left
[04:23] *** dukeleto_ joined
[04:28] *** jql joined
[04:30] *** zloyrusskiy joined
[04:32] *** dukeleto left
[04:32] *** dukeleto_ is now known as dukeleto

[04:40] *** meppl joined
[04:51] *** kent\n left
[04:53] *** kent\n joined
[05:01] *** iblechbot joined
[05:09] *** Avada joined
[05:09] *** Avada left
[05:18] *** sundar_ joined
[05:19] <pmichaud> phenny:  tell colomon that I'm thinking that perhaps we should ignore Parrot's built-in Complex type altogether and just write our own from scratch in Perl 6, similar to how we did Rat

[05:19] <phenny> pmichaud: I'll pass that on when colomon is around.

[05:19] <phenny> pmichaud: 02:08Z <colomon> tell pmichaud calls to Complex.sin appear to be rewired to calls to Parrot's Complex.sin function rather than Complex.pm's.  Not sure if this is worth fixing right away, as am having existential crisis about whether Complex trig should support anything other than radians.

[05:23] <Tene> I'm working on one of the facebook puzzles, and some of this stuff would be much easier in Perl 6. :)

[05:25] *** agentzh left
[05:26] *** Confield left
[05:34] *** justatheory left
[05:36] *** agentzh joined
[05:42] <sundar_> Hi.. I'm having some issues compiling parrot under Windows. Is there any guide or anything specifically for Windows?

[05:48] *** dukeleto left
[05:48] <wayland76> sundar_: I recommend the parrot channel on irc.parrot.org -- all the Parrot people hang out there

[05:49] <wayland76> ( #parrot channel, I should've said)

[05:53] *** frew_ left
[05:54] *** tilt joined
[05:54] <tilt> \o/

[05:56] <tilt> can perl6 connect to mysql? :P

[05:56] <tilt> does it have a CGI module? :)

[06:05] <dalek> rakudo: a0494f8 | pmichaud++ | build/PARROT_REVISION:

[06:05] <dalek> rakudo: Bump PARROT_REVISION.

[06:05] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a0494f8a4576694437cc8aa933a8f5f6ff29c5e2

[06:11] *** japhb joined
[06:18] <Tene> tilt: Perl 6 can connect to SQLite.  There's been some work on MSql support, but it's not quite there yet.

[06:19] <agentzh> Tene: really awesome...

[06:19] <Tene> tilt: For CGI, the answer depends on exactly what you want to do.  The Perl 5 CGI module is very large, and includes a lot of stuff.  Much of it is available in different individual libraries in Perl 6.

[06:19] <Tene> tilt: You should probably start looking at the web.pm repo, although remember that it's a work in progress, just like everything else around here. :)

[06:20] * Tene considers erecting one of those 1995-era "Construction In Progress" animated GIFs.

[06:21] <Tene> (give the anti-camelia crowd something legitimate to complain about...)

[06:28] *** Bzek joined
[06:30] *** rfordinal joined
[06:34] *** iblechbot left
[06:40] *** orafu left
[06:40] *** orafu joined
[06:49] *** rfordinal left
[06:59] *** Hammit joined
[07:02] *** stephenlb left
[07:07] *** rbaumer left
[07:09] *** pdcawley left
[07:11] *** carlin joined
[07:17] *** sundar_ left
[07:19] *** mj41_ left
[07:26] *** mikehh left
[07:28] *** mj41 joined
[07:37] *** rfordinal joined
[07:49] <Matt-W> Morning

[07:50] <agentzh> good localtime :)

[07:50] <moritz_> oh hai

[07:52] <araujo> iah ho

[07:53] <araujo> ;)

[07:55] * agentzh is always waiting to use perl 6 extensively in $production :D

[07:56] <agentzh> though looking at coco lua atm :P

[07:57] *** icwiener joined
[07:58] <araujo> coco lua?

[08:00] <agentzh> araujo: http://coco.luajit.org/

[08:00] * agentzh is currently pondering merging it into nginx's event model.

[08:03] *** KyleHa joined
[08:14] *** hanekomu joined
[08:21] <JimmyZ_> rakudo:  my int $y = undef;

[08:21] <p6eval> rakudo 446d49: OUTPUT«Malformed declaration at line 2, near "int $y = u"␤in Main (src/gen_setting.pm:3469)␤»

[08:21] <JimmyZ_> rakudo:  my int $y = Nil;

[08:22] <p6eval> rakudo 446d49: OUTPUT«Malformed declaration at line 2, near "int $y = N"␤in Main (src/gen_setting.pm:3469)␤»

[08:22] <JimmyZ_> rakudo:  my int $y = 'a';

[08:22] <p6eval> rakudo 446d49: OUTPUT«Malformed declaration at line 2, near "int $y = '"␤in Main (src/gen_setting.pm:3469)␤»

[08:22] <JimmyZ_> rakudo: my int $y = 1;

[08:22] <p6eval> rakudo 446d49: OUTPUT«Malformed declaration at line 2, near "int $y = 1"␤in Main (src/gen_setting.pm:3469)␤»

[08:22] <JimmyZ_> rakudo: my int $abc = 1;

[08:22] <p6eval> rakudo 446d49: OUTPUT«Malformed declaration at line 2, near "int $abc ="␤in Main (src/gen_setting.pm:3469)␤»

[08:22] <moritz_> JimmyZ_: "malformed declaration" has nothing to do what you put on the right side

[08:23] <moritz_> JimmyZ_: it means that rakudo can't cope with left side

[08:23] <JimmyZ_> rakudo: my $abc = 1;

[08:23] <p6eval> rakudo 446d49:  ( no output )

[08:24] <JimmyZ_> moritz_: rakudo doesnot support int?

[08:24] <moritz_> JimmyZ_: no

[08:24] <moritz_> no native types at all

[08:25] <JimmyZ_> rakudo: my Int $abc = 1;

[08:25] <p6eval> rakudo 446d49:  ( no output )

[08:25] <JimmyZ_> oh, I thought It had.

[08:26] *** patmat_ is now known as patmat

[08:26] *** hanekomu left
[08:31] *** szabgab left
[08:38] *** dukeleto joined
[08:55] *** ihrd joined
[08:55] *** ihrd left
[08:56] *** KyleHa left
[08:59] *** rfordinal left
[09:12] *** cmv joined
[09:17] *** payload joined
[09:29] *** Jedai left
[09:29] *** Hammit left
[09:32] *** M_o_C joined
[09:37] *** masak joined
[09:37] <masak> good late morning, cheese speleologists.

[09:37] <phenny> masak: 10 Sep 17:13Z <pmichaud> tell masak I expect us to have a decent REPL by December.  Probably sooner than that.

[09:37] <masak> sounds good.

[09:38] <masak> phenny: tell pmichaud that when I run `parrot examples/pge/demo.pir`, enter 'regex a*' and then 'pir', I get a Null PMC access in get_string(). has something bitrotted?

[09:38] <phenny> masak: yeah, sure, whatever

[09:39] <masak> o_O

[09:39] <JimmyZ_> Is phenny a bot/

[09:39] <masak> I used to think so... :)

[09:39] <M_o_C> It should be.

[09:39] <JimmyZ_> phenny: Are you a bot?

[09:41] <JimmyZ_> rakudo: constant Num π = atan2(4,4) * 4; π.say;

[09:41] <p6eval> rakudo 446d49: OUTPUT«3.14159265358979␤»

[09:42] <JimmyZ_> Can perl6 ouput more precision?

[09:47] * masak doesn't know

[09:48] <JimmyZ_> :(

[09:48] *** alexe left
[09:49] <carlin> from http://inamidst.com/phenny/modules/tell.py: elif rand > 0.999: response = "yeah, sure, whatever"     cute :)

[09:49] <masak> one in a thousand. :)

[09:58] *** Whiteknight joined
[10:08] *** Whiteknight left
[10:10] <Matt-W> Reminds me of a power I got in Champions Online last night. Experimental Blaster: 1% chance of turning target into a teddy bear

[10:12] <masak> that would explain all the hugging on this channel.

[10:14] <Matt-W> :)

[10:14] *** sharada joined
[10:19] <carlin> hugme should have a 1 in 1000 chance to refuse to hug someone ;)

[10:21] <Matt-W> no that would be wrong

[10:22] <Matt-W> hugme: hug carlin

[10:22] * hugme hugs carlin

[10:32] *** JimmyZ_ left
[10:33] *** pmurias joined
[10:38] <pmurias> if i have clone a repo from github is it possible to have git reuse data when cloning my fork?

[10:38] <pmurias> * cloned

[10:39] * masak doubts it

[10:39] <masak> though I'm pretty sure github does that, internally. they would be foolish not to.

[10:40] <pmurias> i remember reading that they do it

[10:44] *** ruoso left
[10:45] <pmurias> fatal: http://github.com/pmurias/perl/tree/git@github.com:pmurias/perl.git/info/refs not found: did you run git update-server-info on the server?

[10:45] <pmurias> what the heck?

[10:51] <pmurias> my fault

[10:52] <moritz_> pmurias: if you just 'remote add' the second clone it should reuse packs

[10:52] *** araujo left
[10:52] <moritz_> if you make a completely independent clone, not (obviously)

[10:54] *** cognominal left
[10:58] *** payload left
[11:02] *** cognominal joined
[11:38] *** spachy joined
[11:40] *** szabgab joined
[11:40] *** spachy left
[11:42] *** szabgab left
[11:42] *** szabgab joined
[11:44] *** synth joined
[11:45] *** mj41 left
[11:45] *** icwiener_ joined
[11:47] *** mj41 joined
[11:51] *** icwiener_ left
[11:55] *** jaldhar left
[11:57] *** payload joined
[12:01] *** icwiener left
[12:02] <masak> suddenly I'm not so sure Bielefeld exists.

[12:02] <moritz_> masak: it doesn't.

[12:02] <masak> see? :)

[12:02] <moritz_> at least I don't believe what THEY tell me

[12:03] <masak> probably wise.

[12:06] <moritz_> @seen Su-Shee

[12:07] <moritz_> phenny: seen Su-Shee

[12:07] <moritz_> where are the bots when you need them?

[12:07] <wayland76> see?  lambdabot was good for something after all :)

[12:07] <masak> hugme: hug Su-Shee

[12:07] * hugme hugs Su-Shee

[12:07] <masak> the important bot is here :)

[12:08] <masak> wayland76: oh lambdabot is quite OK, albeit somewhat chatty. it's purl that's the great nemesis.

[12:11] *** takadonet joined
[12:11] <takadonet> morning all

[12:12] <moritz_> @foo

[12:13] <masak> @morning, @takadonet. @@@

[12:14] <M_o_C> moritz_: At least phenny is in a bad mood today.

[12:20] <moritz_> he, talking about random features for hugme...

[12:20] <moritz_> randomly refusing hugging might be a bad idea

[12:20] <masak> nod.

[12:21] <moritz_> but it could look like "*hugme hugs masak and flushes" or so

[12:21] <masak> randomly giving extra hugs might be a good idea :)

[12:22] <moritz_> yes

[12:23] <moritz_> uhm, "to flush" is very ambiguous

[12:23] <moritz_> it can mean become red in the face

[12:23] <moritz_> or you can flush a toilet

[12:23] <masak> "blush" might be better.

[12:24] <moritz_> indeed

[12:25] <masak> in fact, the more variations on hugs, the better, I think.

[12:25] <masak> "* hugme gives moritz_ a long, warm hug"

[12:26] <masak> "* hugme jumps forward and hugs moritz_ forcibly"

[12:26] <masak> "* hugme takes moritz_ in its arms and applies an excellent hug"

[12:27] <moritz_> in rare cases, hugme could also handle out positive karma ;-)

[12:28] <masak> aye.

[12:32] *** szabgab left
[12:32] *** szabgab joined
[12:33] <masak> spectesting today took 88 minutes. :(

[12:33] <moritz_> did it produce many exit status 11?

[12:33] <masak> that, too.

[12:34] <masak> a frightening amount, actually.

[12:34] <masak> some of them are 10's.

[12:34] <masak> and 4's.

[12:34] <moritz_> masak: then could you please comment on https://trac.parrot.org/parrot/ticket/998 to tell them that it happens on your platform too?

[12:34] <masak> will do.

[12:34] <masak> moritz_++

[12:35] <masak> is the slowness related to this, you think?

[12:35] <moritz_> no

[12:36] <moritz_> slowness and non-zero exit status appeared at different parrot revisions

[12:36] <moritz_> sadly I was having a really hard time bisecting them

[12:37] <colomon> +

[12:37] <phenny> colomon: 05:19Z <pmichaud> tell colomon that I'm thinking that perhaps we should ignore Parrot's built-in Complex type altogether and just write our own from scratch in Perl 6, similar to how we did Rat

[12:38] <moritz_> that would make it easier to have different slot types

[12:38] <moritz_> ie a Complex of Rats or so

[12:38] * moritz_ likes the idea

[12:40] <colomon> Huh.  I don't know if it was just getting a good night's sleep or what, but all my doubts about how to handle these issues seem to have dissolved this morning.  :)

[12:43] <masak> great!

[12:44] <pugs_svn> r28217 | colomon++ | [t/spec] Unfudge tests for Num.sin / Num.cos with explicit base, fixed by pmichaud++'s commit d0355a5dde0973e01834d58de099e53b97fe70a6. 

[12:45] <colomon> May just mean I am confidently wrong now, but what the heck!   [:) 

[12:45] *** jaldhar joined
[12:45] <masak> I've gotten a lot of productive things done by being confidently wrong.

[12:45] <masak> as long as you're still impressionable, being confident in any direction is usually a boon.

[12:52] * takadonet loves using multiple cores to run the spectest

[12:52] <moritz_> me too

[12:52] <moritz_> it makes testing more convenient, but it doesn't solve the underlying problem

[12:53] <masak> something has definitely happened. testing used to take under 30 minutes here. now almost 90.

[12:54] <colomon> Glad that slowdown wasn't just my imagination!

[12:59] * moritz_ would be glad if the slowdown was just imaginary

[13:00] *** nihiliad joined
[13:02] *** tilt left
[13:02] <moritz_> anyway, until these errors-at-exit are fixed I can't meaningfully work on the test suite without breaking rakudo

[13:02] <moritz_> the test summary is just useless if you have to scroll several pages, reading carefully if there are any new/relevant ones

[13:03] <colomon> I wonder why I'm not getting these errors at exit?

[13:03] *** ruoso joined
[13:03] <colomon> (On the other hand, it seems like I keep on getting bus errors after running standalone p6 scripts...)

[13:03] <moritz_> colomon: which platform (CPU, OS) are you on?

[13:04] <colomon> OS X Intel.

[13:04] <moritz_> masak can reproduce them - bacek can't

[13:06] *** zloyrusskiy left
[13:10] <moritz_> maybe related to compiler versions?

[13:10] *** carlin left
[13:18] *** kidd joined
[13:20] *** agentzh1 joined
[13:20] *** ab5tract left
[13:28] *** agentzh left
[13:30] *** ssm joined
[13:35] *** payload left
[13:37] <masak> urgh, and now I get an ugly 'failed assertion' when running the squerl test file. :(

[13:40] *** Gothmog_ left
[13:44] *** carlin joined
[13:44] *** JimmyZ joined
[13:45] *** pmurias left
[13:45] *** pmurias joined
[13:47] *** Gothmog_ joined
[13:57] *** alester joined
[13:59] *** Confield joined
[14:02] *** krunen joined
[14:07] *** patspam joined
[14:08] *** JimmyZ left
[14:09] <masak> rakudo: ((Temporal::DateTime.new(date => Temporal::Date.new(:year(2010), :month(4), :day(1)), time => Temporal::Time.new(:hour(0), :minute(0), :second(0))).epoch - time) / (60 * 60 * 24)).ceiling.fmt("%d days left until April!").say

[14:09] <p6eval> rakudo 446d49: OUTPUT«Use of uninitialized value␤Use of uninitialized value␤Use of uninitialized value␤Use of uninitialized value␤Use of uninitialized value␤202 days left until April!␤»

[14:16] *** Bzek_ joined
[14:16] <colomon> I'm a little disturbed at the moment by how many of the trig.t tests are actually wrong....

[14:17] <colomon> (And correspondingly, by how many of the trig implementations in Rakudo are wrong, because they are passing the tests.)

[14:19] *** perletc joined
[14:22] *** patspam left
[14:22] *** patspam1 joined
[14:24] *** justatheory joined
[14:24] *** Bzek_ left
[14:25] <krunen> std: class A {...}; class A {}

[14:25] <p6eval> std 28217: OUTPUT«[31m===[0mSORRY![31m===[0m␤Illegal redeclaration of package symbol A at /tmp/yzK5PhGbLr line 1:␤------> [32mclass A {...}; class A[33m⏏[31m {}[0m␤FAILED 00:02 37m␤»

[14:26] *** Bzek left
[14:26] <krunen> hmm.. no predeclaration yet

[14:30] <frew__> what's the recommended way to get rakudo running on win32?

[14:36] <colomon> frew__: If you download that "Padre Standalone Plus Six" thing, it has rakudo in it.

[14:37] <colomon> Probably about a month old now, but that's the easiest way I know of to get it.

[14:37] <colomon> rakudo: atan(:x(1))

[14:37] <p6eval> rakudo 446d49: OUTPUT«No applicable candidates found to dispatch to for 'atan'␤in Main (/tmp/8Jp1xqLOyp:2)␤»

[14:38] <szabgab> colomon, frew__  next release of Almost six is due after the next release of Rakudo

[14:39] <frew__> ah, cool

[14:41] <colomon> szabgab++

[14:43] *** payload joined
[14:48] *** Psyche^ joined
[14:51] <colomon> As long as I'm overhauling trig stuff -- does the "named args" section of S32-trig/trig.t make sense to anyone?

[14:52] <colomon> It's all skipped in Rakudo, and as near as I can tell, it all depends on the name of the first argument to the trig functions.

[14:53] <colomon> Because of the way they are currently implemented in Rakudo, these tests will never pass, and they seem pretty daft to me.

[14:54] *** kidd left
[14:55] *** szabgab left
[15:01] *** __ash__ joined
[15:01] <masak> as a parallelism layman, I enjoyed http://research.sun.com/projects/plrg/Publications/ICFPAugust2009Steele.pdf -- perhaps others interested in parallelism will, too.

[15:02] <masak> actually, it's enjoyable just to leaf through a talk littered with Lisp, Haskell and Fortress code. :)

[15:03] <frew__> colomon: if I remember correctly that's how the named args are for all the functions

[15:04] <frew__> colomon: I think the named args for those are silly, but I added them into the tests because they are in the spec

[15:04] *** agentzh1 left
[15:04] *** SmokeMachine joined
[15:05] *** Patterner left
[15:05] *** Psyche^ is now known as Patterner

[15:05] *** justatheory left
[15:07] *** nihiliad left
[15:08] <colomon> In the spec where?

[15:08] *** patspam1 is now known as patspam

[15:09] <frew__> lemme look

[15:09] *** jferrero joined
[15:11] <frew__> http://svn.pugscode.org/pugs/docs/Perl6/Spec/S32-setting-library/Numeric.pod

[15:12] <frew__> method atan2 ( Num $y: Num $x = 1 ) # I figured that since it's documented, we should test it

[15:14] <carlin> urgh, I'm getting a bunch of random seg faults

[15:22] <masak> carlin: during spectesting?

[15:23] <carlin> masak: Nope, while running scripts. Usually on exit after the script has run, but I had one half-way through before

[15:24] <masak> I've had many on exit today as well.

[15:24] <masak> less than a week 'til next release, eh? :)

[15:25] <colomon> frew__: Next time TimToady shows up I'll check with him, but I'd be surprised if that were his intent for the rest of the trig functions.  atan2 is a very exceptional function.  :)

[15:25] <pmichaud> good morning, #perl6

[15:25] <phenny> pmichaud: 09:38Z <masak> tell pmichaud that when I run `parrot examples/pge/demo.pir`, enter 'regex a*' and then 'pir', I get a Null PMC access in get_string(). has something bitrotted?

[15:25] <masak> pmichaud: morning. what phenny said.

[15:26] <pmichaud> masak:  I suspect that demo.pir has indeed bitrotted

[15:26] <masak> ok.

[15:26] <pmichaud> better is probably to use Perl6Grammar

[15:26] * pmichaud checks

[15:26] <colomon> Good morning pmichaud!

[15:27] *** payload left
[15:27] <pmichaud> nopasting...

[15:29] <pmichaud> http://gist.github.com/185365   # new way to do demo.pir stuff

[15:29] *** payload joined
[15:29] <pmichaud> (Perl6Grammar has a REPL :)

[15:30] <masak> ah.

[15:32] <masak> works fine here too. thanks.

[15:32] <pmichaud> although something is wrong with the example I just gave -- since it's a token we shouldn't be building a stack for backtracking

[15:32] <masak> indeed.

[15:33] *** brunov joined
[15:33] <brunov> Hi there!

[15:33] <brunov> I'm reading s02

[15:34] <brunov> And either I don't quite understand something, or there seems to be an incosistency regarding embedded comments and the definition of bracket characters

[15:34] <masak> uh huh.

[15:34] <masak> what inconsistency?

[15:34] <brunov> In s02, "lexical conventions", it says "Characters with no corresponding closing character do not qualify as opening brackets."

[15:35] <masak> snowmen, for example.

[15:35] <masak> scnr. :)

[15:35] <brunov> further down, when defining embedded comments, it says "comments require the "#" to be followed by a backtick ("`") plus one or more opening bracketing characters."

[15:35] <brunov> but then the third example, the embedded comment uses the character "X" as a bracket

[15:36] <brunov> and since "X" doesn't have a closing characer, it shouldn't count as a bracket, right?

[15:37] <pmichaud> third example isn't an "X"

[15:37] <brunov> oh

[15:37] <TimToady> probably missing char in your font

[15:37] <brunov> oooooooh

[15:37] <brunov> *_*

[15:37] <brunov> dumb terminal

[15:38] <brunov> sorry!

[15:38] <masak> I see a 「 here.

[15:38] <brunov> ok, makes sense now. Thanks everyone!

[15:38] <masak> brunov: no problem! see if you can come upon a UTF-8-aware console.

[15:38] *** zloyrusskiy joined
[15:38] <masak> it's worth it. :)

[15:39] <brunov> ok, I'm using Ubuntu's default, which I think it is gnome-terminal. I'll probably have to switch if I want to read these correctly. Thanks again!

[15:39] * avuserow just successfully demoed a small CompSci project written in Perl 6

[15:39] <TimToady> I use gnome-terminal with utf-8

[15:40] <TimToady> probably just some config somewhere

[15:40] <TimToady> LANG or something

[15:40] <brunov> TimToady: cool, I'll definitely look into it

[15:40] <masak> might be fonts, too.

[15:40] <masak> avuserow: that's great! do you have the source somewhere, so we can ooh and aah?

[15:41] <pmichaud> avuserow: or even... a blog posting?  ;-)

[15:42] <avuserow> hm. I could blog about it. I'll just need to clean up a bit and get rid of the deadline cruft. :)

[15:42] <masak> avuserow: just don't overdo it! release early! :)

[15:43] <carlin> hmm, I also see an X in perldoc from gnome-terminal but 「in vim

[15:43] <masak> vim is correct.

[15:44] <TimToady> brunov: for the moment you might want to read the html versions under http://perlcabal.org/syn

[15:46] *** zloyrusskiy left
[15:47] <brunov> TimToady: yes, thanks! Some POD markup will be nowhere near as harmful as not having the proper characters rendered in UTF-heavy docs like these

[15:47] <TimToady> but I understand the desire to read the pods :)

[15:48] <TimToady> especially if you want to edit them too...

[15:48] *** nihiliad joined
[15:48] <TimToady> speaking of which, do you have a commit bit to the pugs repo, where the pod is stored?

[15:48] <brunov> I'd be happy to!

[15:48] *** jferrero left
[15:49] <TimToady> then /msg me your email and preferred nick, and I can send a commit bit

[15:49] <TimToady> (svn nick)

[15:49] <brunov> TimToady: I don't think so, no. I've been lurking the channel/blogs and such, but just today I decided to get started reading the synpopsys

[15:49] *** __ash__ left
[15:49] <TimToady> well, it's just nice to get instant gratification when the itch to edit comes upon you, is all :)

[15:50] <TimToady> but anyhoo, any time you want a commit bit, show up here, and someone can help, likely

[15:51] * masak is re-reading the Apocalypses

[15:51] <colomon> TimToady: Speaking of messing with the specs (and whatnot), I have just locally rewritten all the hyperbolic trig functions to allow you to specify them in degrees, gradians, etc.

[15:52] <colomon> I decided it was more consistent, even if most sane people will probably avoid using them in anything but radians.

[15:52] * pmichaud reads backscroll

[15:53] <TimToady> colomon: more bothersome to me is all the string args where the spec uses an enum

[15:53] <colomon> I will work on cleaning that up once the functions work right.  :)

[15:53] <colomon> sometime next week, probably.

[15:54] *** masak left
[15:55] <colomon> Once my changes have more completely infected the trig.t file, it will be easy to do the switchover there.

[15:57] <TimToady> what was the Q about atan2?

[15:58] *** agentzh joined
[15:58] <colomon> TimToady: The spec specifies a variable name for every argument to every trig function.  frew__ wrote up a bunch of tests to make sure you could use named arguments for them all.

[15:59] <colomon> My feeling is that the only such test that really makes sense is the atan2 test, because the $x and $y arguments do not come in the natural order, and really mean something.

[15:59] <colomon> s/test/tests/

[15:59] <colomon> For the other functions, the $x argument is just a placeholder.

[16:00] <TimToady> yeah, it's sort of redundant testing of a general property of the language

[16:01] <colomon> Well, it's a test rakudo completely fails at the moment, as none of the trig functions are implemented in terms of $x.

[16:02] *** meppl left
[16:02] <pmichaud> also Rakudo doesn't know how to accepted named arguments into positional parameters yet

[16:02] <pmichaud> *accept

[16:02] <TimToady> yes, it doesn't do the general property in question

[16:03] <colomon> pmichaud: Do we intend to re-write the trig functions into that format once it does?

[16:03] <TimToady> on the plus side, you'll get a lot more passing tests when it is implemented :)

[16:03] <pmichaud> ...into what format?

[16:03] <TimToady> you're confusing named args with enums

[16:03] <colomon> pmichaud: write now it is our Num multi method acosh($base = 'radians') is export

[16:04] <pmichaud> the 'radians' part needs to change, yes.  (more)

[16:04] <colomon> According to the spec it should be Num multi method acosh ( Num  $x: TrigBase $base = $?TRIGBASE ) is export

[16:04] <pmichaud> the spec is correct :-)

[16:04] <colomon> Not the radians, the Num $x: bit

[16:04] <TimToady> pretty much all the numeric functions try to stick with $x and $y

[16:05] <pmichaud> yes, we'll want to do that

[16:05] <colomon> (Even putting a space between "func" and the open parenthesis?)

[16:05] <pmichaud> otherwise    acosh(:x(...))   won't work

[16:05] *** justatheory joined
[16:05] <pmichaud> the space isn't critical :)

[16:05] <colomon> Then I vote we leave the tests.

[16:05] <colomon> Though I suspect a bunch of them will need to be rewritten.

[16:06] <TimToady> which space are you referring to, def, or call?

[16:06] <colomon> A huge quantity of the trig tests were wrong.  I've got a big patch to push through as soon as I've run a proper spectest.  (So in a couple of hours, at current speeds.)

[16:06] <colomon> TimToady: "func (" is what the spec says.

[16:06] <colomon> I would have thought it would be "func(".

[16:07] <pmichaud> I might also suggest eliminating the "Num" constraint on $x, but I'm not as picky about that.

[16:07] <TimToady> the space doesn't matter on the definition side

[16:07] <colomon> TimToady: Interesting and confusing.  :)

[16:07] <colomon> pmichaud: Oh, absolutely!  We've already implemented a few of them for Any and Complex as well, after all....

[16:07] <TimToady> I suspect common practice will eventually be to omit the space, but historically signatures have usually had the space in most languages

[16:08] <colomon> must go eat lunch.  Back soon.  TimToady++, pmichaud++

[16:10] <TimToady> interestinly though, on the call side, with a space sin (...) turns into a unary named prefix, not a listop, according to S03

[16:11] <colomon> How will take interact with the function definitions?

[16:12] <TimToady> which probably means the current multi method is wrong, and should be prefix:<func> instead, unless we change our mind about supporting traditional math notation

[16:12] <TimToady> func() is always a function call

[16:12] <TimToady> func ... is named unary, same as in Perl 5, for trig ops

[16:12] <TimToady> but most of the other named unaries have gone away

[16:13] <TimToady> don't know how confusing it would be if trig functions turned into listop precedence

[16:13] <TimToady> it's also a little confusing if they *don't*

[16:13] <colomon> Does that imply that the multi method should not have $base as an optional parameter?

[16:14] <colomon> (afk again)

[16:14] <TimToady> operators can have named args

[16:14] <pmichaud> how about optional positionals?

[16:14] <TimToady> but you'd have to call it either as a function, or with a :base adverb

[16:14] <pmichaud> okay.

[16:15] <TimToady> but if there's a good chance of calling it with multiple args with some frequency, that's a good argument for making it listop, not unary

[16:15] *** rfordinal joined
[16:16] *** ruoso left
[16:16] <TimToady> if the mathematicians would be happy, I wouldn't mind blowing away named unary precedence, but that's a hard "if" to predict

[16:16] *** agentzh1 joined
[16:16] *** agentzh left
[16:17] <TimToady> it would break things like: if sin $x == 2 {...}

[16:17] <TimToady> well, not that that would ever be true :)

[16:18] <Juerd> Aw, but overriding sin can be so fun!

[16:18] <TimToady> but the precedence would be surprising if sin were a listop

[16:21] *** cdarroch joined
[16:22] <avuserow> masak, pmichaud: http://auzon.blogspot.com/2009/09/applying-perl-6-in-compsci-projects.html

[16:23] *** cmv left
[16:23] *** cmv joined
[16:24] <PerlJam> avuserow: That's your blog?

[16:25] <avuserow> Yep

[16:25] <PerlJam> avuserow++ 

[16:25] <PerlJam> and again avuserow++

[16:25] <avuserow> @karma auzon

[16:25] <avuserow> hm. forgot how the bots here work

[16:26] *** carlin left
[16:30] *** cotto left
[16:33] <pmichaud> avuserow++  # nice post!

[16:35] <PerlJam> avuserow: did you also code a perl5 solution for your prof?

[16:35] *** frederico joined
[16:37] *** sevvie left
[16:37] <TimToady> does MAIN actually work in rakudo now?

[16:37] <avuserow> PerlJam: no. I did shell out to Perl5 in one part to handle binary data

[16:37] <avuserow> TimToady: yes. MAIN seems to work quite well.

[16:37] <PerlJam> avuserow: Is he going to actually run your program?

[16:38] <TimToady> heh, dint knowit

[16:38] <avuserow> PerlJam: no, it was strictly "do you have code?" and "did you demonstrate it?"

[16:39] <pmichaud> ...multi MAIN works in rakudo?!?

[16:39] <pmichaud> hmmmm.

[16:39] <TimToady> why didn't you use gather/take instead of push?

[16:39] *** nihiliad left
[16:39] <avuserow> didn't remember about gather/take

[16:39] <TimToady> oh wait, then it wouldn't be a scripting language

[16:40] <TimToady> it would be FP :)

[16:40] <TimToady> ah well, tmtowtdi

[16:41] *** icwiener joined
[16:41] *** nihiliad joined
[16:41] <avuserow> the assignments in this class are very loosely speced, so I could've done functional without them having a problem

[16:42] <TimToady> well, I hope your prof is impressed :)

[16:43] *** agentzh1 left
[16:43] <pmichaud> http://gist.github.com/185407   # multi MAIN does work in Rakudo!  jnthn++

[16:44] <pmichaud> actually, jnthn++ probably didn't even realize that the work he did caused this to start working :)

[16:44] <pmichaud> it just falls out of the other semantics

[16:44] *** patspam left
[16:44] <TimToady> jnthn++ and everyone-else++

[16:44] <pmichaud> we don't do option processing yet, though

[16:45] <avuserow> jnthn++ # for multi-dispatch, especially for MAIN

[16:45] *** Chillance joined
[16:49] <colomon> frew__++ # For adding the positional trig tests

[16:51] *** patspam joined
[16:54] *** pyrimidine joined
[16:56] <takadonet> hey pyrimidine

[16:56] <pyrimidine> o/

[16:58] *** cmv left
[17:03] <Tene> pmichaud: github is going to be migrating providers soon, and it looks like the transition might not be without problems.

[17:03] <pmichaud> Tene: url?

[17:03] <PerlJam> It's a good thing git makes complete copies of the repo on clone  :)

[17:04] <Tene> http://www.engineyard.com/blog/2009/engine-yard-and-github-transition/

[17:06] *** abra joined
[17:06] <PerlJam> "In fact, the transition from Subversion to Git has been one of the most aggressive technology transitions that I’ve ever seen!"  That's so true, but really an understatement IMHO

[17:06] <PerlJam> (regarding rails)

[17:07] <pmichaud> well, I don't know what sort of problems we're likely to encounter

[17:07] <pmichaud> anyway, the rakudo account is a paid account, so hopefully it'll get a measure of improved service over a free one

[17:10] <Tene> pmichaud: Sure.  Ideally, there won't be any problems.

[17:10] <Tene> Just wanted you to not be surprised if they have problems running on the new provider during th emiddle of the release, or something.

[17:10] <pmichaud> is there a transition date published somewhere?  

[17:11] <Tene> I can't find it mentioned anywhere on github's website.

[17:11] <pmichaud> Me neither.

[17:13] <Tene> Although, that post is about an hour old.

[17:13] <pmichaud> well, we'll keep an eye on it.  :)

[17:13] <pmichaud> I suspect neither github nor engineyard want any black eyes here :)

[17:15] <Tene> I'm a little bit irked by "... we didn’t want to subsidize that quota for non-Ruby developers."

[17:15] <pmichaud> really? why?

[17:16] <frew__> I agree

[17:17] <frew__> well, they seem to have billed themselves as free for all Open Source is all

[17:17] <pmichaud> github did that, not engineyard

[17:18] <frew__> I think I misunderstood soemthing

[17:18] <frew__> EY doesn't own GH?

[17:18] <pmichaud> EY *hosts* GH

[17:18] <frew__> ok

[17:18] <frew__> my bad

[17:18] <pmichaud> I don't think they own them.

[17:18] <frew__> I take it back

[17:18] <frew__> they can subsidize whoever they want then

[17:18] <frew__> :-)

[17:18] <pmichaud> afaict, engine yard has been providing free(ish) server hosting for github

[17:19] <frew__> got it

[17:20] <Tene> pmichaud: I don't actually object, and they can do whatever they want, it just sounded a little weird...

[17:20] <pmichaud> EngineYard is explicitly a ruby site for ruby-hosting.

[17:21] <frew__> I think that for those of us not intimate with EY, GH, and rails the article is hard to understand

[17:21] <frew__> right

[17:21] <pmichaud> I think it would be very hard to write an article that is easily understood.  :)

[17:21] <frew__> I'm not criticizing

[17:21] <pmichaud> it will be interesting to see what github has to say about it :)

[17:21] <frew__> I'm saying we are on the outside so it makes it hard

[17:21] <pmichaud> sure

[17:22] <pmichaud> anyway, as I said, Rakudo has a paid account, so hopefully we'll get some special care

[17:22] <frew__> do we need special care with anything?

[17:22] <pmichaud> I'd like to make sure we have as few service interruptions as possible :)

[17:22] <frew__> ah, right

[17:23] <Tene> github and Engine Yard often disagree with each other, from what I've seen.  GitHub posts announcements saying "We're down because of engineyard fails" and engineyard responds with "No, you're down because your app can't scale and will fail entirely when doing more than two repository exports at a time"

[17:23] <pmichaud> or, put another way, github isn't likely to be around long if they annoy their paying customers :)

[17:23] <frew__> you know you could do a mirror to gitorious or something, and because git works the way it does it would be easy to just mirror back and forth

[17:24] <frew__> I think that's what Moose does (athough it's shadowcat instead of gitorious)

[17:26] *** sevvie joined
[17:32] *** takadonet left
[17:36] <pugs_svn> r28218 | colomon++ | [t/spec] Try to create proper test cases for the "forward" hyperbolic trig functions, as well as a tan and cotan. 

[17:36] <colomon> Okay, I've just pushed the morning's big trig patch.  :)

[17:36] <colomon> If my $work continues to involve long compiles, there may be an afternoon patch as well.

[17:37] <dalek> rakudo: 84296e4 | (Solomon Foster)++ | src/setting/Num.pm:

[17:37] <dalek> rakudo: Fix implementations of the "forward" trig functions.

[17:37] <dalek> rakudo: Other than sin, cos, and tan, most of the forward trig functions were broken.  This patch fixes all the broken ones I have spotted thus far.  Corresponding massive overhaul to trig.t, which just appears to have been flat out wrong for many of the functions.

[17:37] <dalek> rakudo: Note that many if not most of the inverse trig functions remain broken.

[17:37] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/84296e43d89488073be442486b66e38abf2164ef

[17:52] *** jonathanturner joined
[17:52] *** PZt left
[17:53] *** iblechbot joined
[17:57] *** nihiliad left
[17:57] *** nihiliad joined
[18:01] *** frederico left
[18:04] <TimToady> phenny: tell masak, I particularly like the slide with "(this step requires ingenuity)" which is obviously the ??? before Profit!

[18:04] <phenny> TimToady: I'll pass that on when masak is around.

[18:05] *** patspam left
[18:05] <colomon> Is there a way to make git automatically do a git diff --check before committing?  Apparently I cannot remember that on my own...

[18:10] <TimToady> phenny: tell masak also, we're missing the list split primitive; I wonder if two more or slurpy arrays in a binding should auto-split a list

[18:10] <phenny> TimToady: I'll pass that on when masak is around.

[18:12] <Tene> colomon: chmod +x .git/hooks/pre-commit

[18:14] *** xenoterracide left
[18:15] <colomon> Oooooooooo

[18:16] *** __ash__ joined
[18:17] <colomon> Tene++  # I'd have known it myself if I'd just read the next chapter of Pro Git.  :)

[18:17] <__ash__> Is the right way to multi-thread in Parrot a Task? 

[18:17] <colomon> Wow, easy to set up client side hooks might be enough to get me to switch to git for work.

[18:18] <Tene> __ash__: no, not as I recall.

[18:18] <Tene> My vague memory is that tasks are run in the same thread they were created from, usually, in parrot right now.

[18:19] <__ash__> ah, okay, i was reading http://docs.parrot.org/parrot/latest/html/docs/pdds/pdd25_concurrency.pod.html and it gave me that impression

[18:19] <Tene> you want to use a ParrotThread.

[18:19] <Tene> __ash__: *please* feel free to try it and let me know what you find out.

[18:20] <__ash__> I was planning doing some tests with it, making Tasks and all in parrot

[18:20] <Tene> I was rathe runable to sort out the various bugs with Threads and HLLs in Parrot the other day. :(

[18:20] <__ash__> I'll let you know, i have been reading over that and the tests and the Task core stuff, to see what I can learn, just thought i'd ask in case someone knew already

[18:21] *** patspam joined
[18:23] *** patspam left
[18:23] *** patspam joined
[18:24] *** patspam left
[18:25] *** patspam joined
[18:29] <pugs_svn> r28219 | lwall++ | [S06] supply missing list splitting primitive as a form of binding, masak++ for 

[18:29] <pugs_svn> r28219 | cf  http://research.sun.com/projects/plrg/Publications/ICFPAugust2009Steele.pdf

[18:29] *** zloyrusskiy joined
[18:35] <__ash__> from PIR can you get a block as a function pointer? like a pointy block? 

[18:36] <TimToady> phenny: tell ruoso please read the Guy Steele slides mentioned above and think about hyper iterators in terms of balanced (more or less) list splitting

[18:36] <phenny> TimToady: I'll pass that on when ruoso is around.

[18:40] *** Jedai joined
[18:55] <__ash__> Tene: yeah, Tasks's aren't parallelized by default, they go to the built in schedule of the current instance of parrot and lets parrot do whatever it wants, so you can make a schedule that uses green threads or pthreads or forks or whatever you want, kind of nice i guess, but if you want a real posix thread then you have to use parrotthread

[18:59] <Tene> __ash__: did you figure out the block thing?

[19:02] *** szabgab joined
[19:03] *** justatheory left
[19:05] *** justatheory joined
[19:10] *** justatheory left
[19:13] *** zloyrusskiy left
[19:19] *** __ash__ left
[19:30] *** justatheory joined
[19:34] *** M_o_C left
[19:36] *** frew__ left
[19:39] *** abra left
[20:00] *** lambdabot left
[20:03] *** lambdabot joined
[20:12] *** payload left
[20:13] <dalek> rakudo: 3b63817 | pmichaud++ | docs/spectest-progress.csv:

[20:13] <dalek> rakudo: spectest-progress.csv update: 436 files, 14267 (69.2% of 20603) pass, 5 fail

[20:13] <dalek> rakudo: Failure summary:

[20:13] <dalek> rakudo: S32-str/samecase.rakudo aborted 5 test(s)

[20:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/3b6381761a44cb1865c8063a9e57bd0fe0ba4171

[20:15] *** icwiener left
[20:22] *** jaldhar left
[20:23] *** patspam1 joined
[20:23] *** patspam left
[20:28] *** thisguy joined
[20:30] *** cmv joined
[20:30] *** cmv left
[20:31] *** __ash__ joined
[20:31] *** cmv joined
[20:33] <__ash__> Tene, no i never figured out the block thing

[20:33] *** |Jedai| joined
[20:34] <Tene> __ash__: are you in #parrot on irc.perl.org ?

[20:34] <__ash__> no, irc.perl.org likes to get mad at me, sometimes wheni connect from my school campus it just hangs, i'll try

[20:34] <lisppaste3> tene pasted "parrotthread example for __ash__" at http://paste.lisp.org/display/86957

[20:36] *** |Jedai| left
[20:37] *** thisguy left
[20:40] <__ash__> Tene: do you know how to get a block's invoke function in perl6? like, specifically what I am doing is a simple async function that takes a block and then gives it to your example to execute

[20:41] *** payload joined
[20:41] <lisppaste3> tene pasted "Perl 6 async implementation for __ash__" at http://paste.lisp.org/display/86958

[20:41] <Tene> __ash__: like that?

[20:42] *** |Jedai| joined
[20:46] *** perletc left
[20:46] *** Jedai left
[20:48] <__ash__> yeah, like that, i didn't know you could do it that way, intersting

[20:49] <Tene> __ash__: you don't even need the inline PIR... I just used that so I coul dmake a parrotthread.

[20:50] *** pyrimidine left
[20:50] *** PZt joined
[20:50] <__ash__> hm... thats a lovely debug message

[20:51] <Tene> __ash__: oh, by the way, that doesn't work.

[20:51] <Tene> Because of Parrot's current problems with threads.

[20:51] <__ash__> thats the wrong way to do it? 

[20:51] <Tene> forgot to mention that...

[20:51] <Tene> __ash__: it's the right way to do it, but Parrot is broken.

[20:51] <__ash__> okay, thats what I was curious about

[20:52] <__ash__> anyone have any ideas about whats going on?

[20:52] <__ash__> is it that ParrotThread run_clones from within a HLL don't retain the HLL? 

[20:53] *** simcop2387 left
[20:54] *** simcop2387 joined
[20:57] <Tene> __ash__: the problem is that Parrot just does the wrong thing when it's trying to clone the interpreter.

[20:57] <__ash__> but didn't the pure PIR version work?

[20:58] <Tene> __ash__: the pir version I posted earlier does a lot less.

[20:58] <Tene> It doesn't have PIR classes, it doesn't have any dynamic libraries loaded...

[20:58] <Tene> and those are the two things that I've run into it failing to copy correctly.

[20:59] <Tene> When it enters the code path that's supposed to copy those, it does something broken instead, or runs into some data it' snot expecting, o rsomething.  Those code paths are completely untested, afaict.

[21:00] <__ash__> Hmmm, sounds like some simple tests would be helpful then, so, its specicially dynlibs and PIR classes? 

[21:00] <Tene> __ash__: I'm not entirely sure of the details.  For the former, look at ticket 757 in parrot's trac.

[21:00] <Tene> for the latter, add this at the beginning of the .pir: 

[21:01] <Tene> .loadlib 'libsqlite3'

[21:01] <Tene> or any other .so on your system

[21:02] <__ash__> hm... mine didn't crash, i ran it 3 times, i added the .loadlib outside of the main sub though, should it be inside the main sub? 

[21:02] <Tene> no, outside.

[21:03] *** frew_ joined
[21:04] <Tene> try adding this as the first line inside the main sub:

[21:04] <Tene> .include 'test_more.pir'

[21:04] <__ash__> What system are you on btw? I am on OS X

[21:04] <Tene> linux x86_64

[21:04] <__ash__> do i need to touch a test_more.pir? 

[21:05] <Tene> no, it will be loaded from Parrot's include directory.

[21:05] <__ash__> alright

[21:05] <Tene> do you actually have libsqlite3.so ?

[21:05] <__ash__> that one failed for me

[21:05] <__ash__> yeah, i have libsqlite3.so 

[21:05] <Tene> Hmm.

[21:06] <Tene> The issue revealed by including test_more.pir has a possible fix in a pair of patches on tt757

[21:06] <Tene> I don't understand what's going on well enough to be confident applying them.

[21:06] <__ash__> i have /opt/local/lib/libsqlite3.dylib and /usr/lib/libsqlite3.dylib (OS X uses .dylib not .so)

[21:06] * Tene nods.

[21:16] *** sharada left
[21:20] *** |Jedai| left
[21:28] *** alester left
[21:29] *** Whiteknight joined
[21:34] *** justatheory left
[21:35] *** sharada joined
[21:35] *** zamolxes joined
[21:37] <pugs_svn> r28220 | fglock++ | mp6 - simplified 'make' inside tokens 

[21:39] *** patspam1 left
[21:52] *** __ash__ left
[22:00] *** rdice joined
[22:05] *** pmurias left
[22:11] *** frew_ left
[22:12] *** justatheory joined
[22:16] *** jdv79 joined
[22:16] <jdv79> just wondering if stream and exception mgmt is better in p6?

[22:17] <pmichaud> Yes.

[22:17] <TimToady> but define "stream"

[22:17] <jdv79> handles like pipes and file handles

[22:18] <TimToady> and then define "and"

[22:18] <jdv79> they are only related in my mind cause i've hit annoyances in p5 with them

[22:18] <jdv79> they are not related.  just grouped in the same question.

[22:18] <TimToady> whew! :)

[22:20] <TimToady> any particular annoyances you want to know about?

[22:21] <TimToady> esp with streams, since we think we have the exceptions very much under control

[22:21] *** cmv left
[22:21] <jdv79> just capturing, redirecting, and tying them.  esp. the STD handles.

[22:22] <TimToady> most of that now falls naturally out of "context variables"

[22:23] <jdv79> it seems like the abstraction isn't high enough so different ways of seemingly doing the same thing cause odd errors

[22:23] <TimToady> well, there will always be issues syncronizing the abstractions with the various OSes ideas of concrete

[22:24] <TimToady> *synchronizing

[22:24] <jdv79> i did see a blurb about context vars lately.  sounds very nice.

[22:24] <TimToady> certainly redireciton we can do on a subcall by subcall basis

[22:24] <TimToady> and filehandles are just objects, so it's pretty easy to substitute anything else that implements the correct roles

[22:25] <TimToady> filehandles aren't "special" symbols like they are in P5

[22:25] <jdv79> ok, thanks.  that's what i was looking for.

[22:26] <TimToady> and file operations tend to map nicely into lazy lists, if you want them to

[22:26] <TimToady> however, p6 will be a little pickier about expicitly closing files for the same reason

[22:26] <TimToady> *explicitly

[22:27] <TimToady> otherwise it gets really easy to get race conditions in a lazy language

[22:28] <TimToady> and you can't rely on timely destruction to close your files when you might be running on a random GC on a random VM

[22:28] <TimToady> tradeoffs...

[22:29] <jdv79> makes sense.

[22:30] <TimToady> basically, anything transactional should be orthogonal to control flow, as much as possible

[22:31] *** mikehh joined
[22:31] <TimToady> hopefully we can give support for transactions that looks like control flow, however

[22:31] <TimToady> see STM and such

[22:32] <mikehh> rakudo (3b63817) builds on parrot r41220 - make test PASS / make spectest (up to 28220) FAIL - Ubuntu 9,04 i386 (g++)

[22:32] <mikehh> rakudo - 1 direct fail - t/spec/S12-introspection/walk.rakudo - Non-zero exit status: 1 - Parse errors: Bad plan.  You planned 10 tests but ran 8.

[22:32] <mikehh> rakudo - ./perl6 t/spec/S12-introspection/walk.rakudo - fails with (after ok 8):

[22:32] <mikehh> rakudo - set_pmc() not implemented in class 'Failure'

[22:32] <mikehh> rakudo - in regex _block424 (t/spec/S12-introspection/walk.rakudo:92)

[22:32] <mikehh> rakudo - called from method Perl6Object::WALK (src/gen_setting.pm:1871)

[22:32] <mikehh> rakudo - called from Main (t/spec/S12-introspection/walk.rakudo:94)

[22:32] <mikehh> rakudo - t/spec/S03-operators/arith.rakudo - TODO passed:   131

[22:32] <mikehh> rakudo - I got 112 tests PASSing but exiting with Non-zero wait status: 11

[22:32] <jdv79> i thought STM was dropped for now cause it was too much

[22:32] <TimToady> talking evenutalities here

[22:33] <TimToady> *eventualities

[22:33] <mikehh> on amd64 I got  - t/spec/S03-operators/arith.rakudo - TODO passed:   120, 131-132

[22:33] <TimToady> we want to get to a model where transactions can be written on top of an underlying event model

[22:34] <mikehh> so 120 and 132 don't pass on i386

[22:34] <TimToady> much like a TCP connection doesn't have to worry about the underlying back-and-forth

[22:35] <TimToady> but it's a long-term vision, I suspect

[22:35] <TimToady> we will have to build it up post-6.0.0, I think

[22:36] *** sri_kraih left
[22:36] *** sri_kraih joined
[22:39] <TimToady> basically, we'd like to take a monadic view of transactions as a computation of a series of events, but hopefully hiding the mental anguish of your typical monadic languages

[22:40] <sharada> TimToady: by using delimited continuations?

[22:42] *** s1n left
[22:42] <TimToady> perhaps, this is all subject to negotiation as we go forward, and our understanding of the problem matures from the viewpoint of the naive programmer

[22:42] *** meppl joined
[22:42] *** sevvie left
[22:43] *** nihiliad left
[22:44] *** lambdabot left
[22:46] *** perletc joined
[22:52] *** M_o_C joined
[22:54] <jdv79> wait, so how will scope guards be done then?

[22:58] *** SmokeMachine left
[23:12] <TimToady> depends on what you mean by "scope guards", I suppose

[23:14] *** lambdabot joined
[23:17] *** Caliginous_ joined
[23:17] <Caliginous_> Hi!

[23:17] <Caliginous_> is there perl mod to do same shit as flashgot or flashget?

[23:18] <jdv79> do x when this block is "done"

[23:18] <Caliginous_> done?

[23:18] <jdv79> upon exiting a scope run x

[23:18] <Caliginous_> where do I fine done?

[23:19] <jdv79> there is no done

[23:19] *** donri joined
[23:20] <donri> can you do something similar to inheritance and/or mixins with grammars?

[23:21] <TimToady> yes, grammars are just classes that happen to be based on cursors

[23:22] <TimToady> Caliginous_: in Perl 6 there will be a LEAVE block.  were you asking about Perl 5 or Perl 6?

[23:22] <Caliginous_> no!

[23:22] <Caliginous_> is there perl mod to do same shit as flashgot or flashget?

[23:23] <Caliginous_> or can I run flashgot from Mozilla::Mechanize?

[23:23] <TimToady> are you asking about Perl 5 or Perl 6?

[23:23] <diakopter> Caliginous_: I wrote a Perl 5 script to do multithreaded downloading (using WWW::Curl::Multi) but it works on win32 only afaik.

[23:23] <lambdabot> diakopter: You have 2 new messages. '/msg lambdabot @messages' to read them.

[23:23] <donri> TimToady: cursors?

[23:24] <TimToady> donri: abstraction of a match state in a particular language

[23:24] <Caliginous_> I ried that

[23:24] <Caliginous_> it said no messages

[23:24] *** perletc left
[23:24] <donri> roger

[23:25] <TimToady> but all token/rule/regex are really just methods, given that base

[23:25] *** jaldhar joined
[23:26] <TimToady> they're just always called on a cursor, and always return a cursor

[23:26] <TimToady> but there are certainly ways of attaching other information to such a cursor, which is how we get match trees and ASTs

[23:28] <donri> TimToady: can i treat a grammar both as a class and a role or just either?

[23:32] *** cdarroch left
[23:42] *** japhb left
[23:45] <donri> also means you can have methods and attributes in a grammar huh?

[23:48] *** s1n joined
