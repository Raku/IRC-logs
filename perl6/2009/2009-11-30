[00:02] <pmichaud> fail is the same as return() except it returns  a Failure object

[00:07] <diakopter> ng: our $FailureClass = $_.WHAT; our sub Failure() { return $FailureClass }; our sub fail { say $^a; return Failure.new($a) }; say Mu.WHAT.new

[00:07] <p6eval> ng 7d3cac: Method 'Str' not found for invocant of class 'Mu'␤

[00:07] *** snarkyboojum left
[00:07] *** snarkyboojum_ is now known as snarkyboojum

[00:07] <diakopter> on that note,

[00:08] <diakopter> ng: sub foo { say $^a; say $^a }; foo(3);

[00:08] <p6eval> ng 7d3cac: Not enough positional parameters passed; got 1 but expected 2␤current instr.: '&foo' pc 108 (EVAL_1:49)␤

[00:08] <diakopter> ng: sub foo { say $^a; say $a }; foo(3);

[00:08] <p6eval> ng 7d3cac: 3␤3␤

[00:08] <Tene> That's wrong.

[00:09] <Wolfman2000> I thought that was right actually

[00:09] <diakopter> the 2nd one is correct

[00:09] <Tene> rakudo: sub foo { say $^a; say $^a }; foo(3);

[00:09] <p6eval> rakudo 7ce13d: 3␤3␤

[00:09] <masak> Tene: no, it's spec. $a after $^a is OK, and the same var.

[00:10] <diakopter> masak: I'm sure Tene meant my first try

[00:10] <Tene> masak: Yes, I know.  You can ALSO use $^a every time.

[00:10] <masak> oh.

[00:10] <masak> yes, now I see.

[00:10] <masak> my bug submitting finger itches.

[00:10] <Tene> I'm rather entertained by implementing in ng the same things that I implemented in rakudo.

[00:10] <masak> :)

[00:11] <masak> by the way, yay! GGE can now be precompiled! and it starts much faster. \o/

[00:12] <Tene> masak: 'sec, lemme see if I can fix that real quick.

[00:13] <Tene> Actions.pm needs a conditional right around +1559

[00:14] <Tene> It needs to inspect $placeholder_sig

[00:14] <Tene> I don't have time to dig into Perl6::Compiler::Signature to see what I'm looking for, though.

[00:14] <Tene> That should be sufficient for somebody else here to do it, though. :)

[00:14] <Tene> AFK driving

[00:15] <diakopter> .oO( driving doesn't stop some folks from ircing )

[00:16] *** justatheory left
[00:17] *** lilstevey joined
[00:17] <lilstevey> Hello #perl6

[00:17] <diakopter> Hello lilstevey 

[00:20] <Juerd_> phenny: tell TimToady Could you provide (old or fresh) citations for the three [citation needed]s at http://en.wikipedia.org/wiki/Perl_6?

[00:20] <phenny> Juerd_: I'll pass that on when TimToady is around.

[00:20] <lilstevey> I've come seeking knowledge. I'm trying to dynamically attach a method to a class, and, cheekly hoping someone could give me a pointer towards any resources?

[00:21] <Juerd_> Interesting info in that wikipedia article.

[00:21] <Juerd_> Pugs will be used for bootstrapping? Oh?

[00:21] <Juerd_> Maybe I should add a few [citation needed]s myself :D

[00:22] <masak> lilstevey: hello. can you be more specific? is it something that you cannot solve with an eval() inside the class definition?

[00:23] <diakopter> masak: surely you mean "cannot solve withOUT an eval" :P

[00:23] <masak> no, I stand by what I wrote :)

[00:24] <diakopter> (eye roll)

[00:25] *** astrojp left
[00:25] <diakopter> Juerd_: imho, all between "It will be used for ..." and "... from within a program or library" can be excised

[00:26] <diakopter> (inclusively)

[00:26] <Juerd_> Agreed and (heh).

[00:26] <masak> lilstevey: there is some sense to diakopter's eye roll, of course. jnthn is doing some metaclass work in the ng branch which might do what you need. but it hasn't landed yet in master.

[00:27] <diakopter> I'm sure lilstevey would like to know how to do it with eval

[00:28] <lilstevey> masak & diakopter: maybe I should nopaste - my typing and explanation skills seem to limiting my throughput?

[00:29] *** snarkyboojum left
[00:29] <Juerd_> diakopter: Done.

[00:29] <masak> rakudo: class A { if rand < .5 { eval("method foo() \{ say q[foo] }") } else { eval("method bar() \{ say q[bar] }") } }; A.new.?foo; A.new.?bar

[00:29] <p6eval> rakudo 7ce13d:  ( no output )

[00:30] <masak> locally, that prints sometimes 'foo', sometimes 'bar'.

[00:30] <arnsholt> Juerd_: For the last [citation needed] you can pretty much just point to man perlre I think

[00:30] <masak> lilstevey: did that help? if not, feel free to go ahead and nopaste.

[00:31] <diakopter> Juerd_: you might mention that Pugs can be found at (and maintenance releases for various new versions of ghc are posted to) http://hackage.haskell.org/package/Pugs

[00:31] <Juerd_> arnsholt: What part?

[00:31] <arnsholt> Or just cite the regex from the camel book that correctly matches nested parens

[00:31] <Juerd_> diakopter: You know, it is a wiki ;)

[00:31] <masak> :)

[00:32] <diakopter> wtfomg; I thought it was Juerdpedia :D

[00:32] <Juerd_> :D

[00:32] <arnsholt> Juerd_: Well, there's (?{ code }) and (?{{ code }})

[00:32] <Juerd_> No. I would structure an article about Perl 6 very differently.

[00:32] <Juerd_> arnsholt: Yes, but that only implies what is written in the article to someone familiar with regular regular expressions.

[00:33] *** nickgibbon joined
[00:33] <arnsholt> True. But to make sense of the point you really have to know the difference between regular and other languages

[00:34] <masak> arnsholt: what _is_ the difference?

[00:35] <lilstevey> masak: eval - Probably - many thanks - I was hoping for a one liner to inject into something along the lines of http://pastebin.com/d23b178 but will have a play with eval - should be able to fire something off.

[00:35] <arnsholt> masak: In a word: centre-embedding

[00:35] <masak> arnsholt: such as XML nestedness?

[00:35] <arnsholt> Yep

[00:35] <masak> lilstevey: as I mentioned, jnthn is working on the one-liner solution.

[00:36] <masak> jnthn++, I mean. :)

[00:36] <arnsholt> masak: Essentially regular languages can only have simple repetition, you have no way of "counting" stuff so that they match up like parens

[00:37] <arnsholt> There's lots of nice theory round it if you want it formally, but that's the essence of it

[00:37] <masak> arnsholt: right, now I remember. Feynman explained this to me once (indirectly, through a book).

[00:38] <arnsholt> Feynman? Didn't know he talked about that kind of stuff

[00:38] <masak> in a book about computers and computing.

[00:38] <arnsholt> Ah, right

[00:38] <masak> starting from the fundamentals; very good stuff.

[00:38] <masak> so, regular languages correspond to finite state machines?

[00:38] <arnsholt> Exactly!

[00:38] <masak> which cannot count stuff because they're finite, and the natural numbers are not. :)

[00:39] <arnsholt> Not quite

[00:39] <arnsholt> A regular language can be infinite. a* for example

[00:39] <masak> yes, but then you don't care about the number of repetitions.

[00:39] <SirKay> wait, you've met Feynman?

[00:39] <quantumEd> every natural number is finite!

[00:39] <masak> SirKay: 'indirectly, through a book'.

[00:39] <SirKay> oh, lol

[00:39] <arnsholt> But you have no way of keeping state. If you say \(*\)* you have no way of saying that the two stars should match the same number of parens

[00:40] <masak> quantumEd: :)

[00:40] <arnsholt> What's finite about FSAs is that they have a finite number of states (AFAIK)

[00:40] <masak> quantumEd: the set of natural numbers has a cardinality which exceeds each natural number. sorry, I wasn't precise enough. :P

[00:40] <arnsholt> But finite state machines are isomorphic to regular languages

[00:41] <masak> arnsholt: nodnod.

[00:41] <lilstevey> sorry for being an indiot - is masak plus plus equivalent to "many thanks" - am a bit of an IRC virgin and wouldn't wish to increment kudos I didn't have to give?

[00:41] <arnsholt> For context-free languages you have something called push-down automata, which are a fairly intuitive expansion of FSAs

[00:41] <masak> arnsholt: FSA + stack, right?

[00:41] <quantumEd> lilstevey++

[00:41] <masak> @karma lilstevey

[00:41] <lambdabot> lilstevey has a karma of 1

[00:41] <arnsholt> masak: Pretty much, yeah

[00:41] <masak> lilstevey: there you go.

[00:42] <arnsholt> As for context-sensitive languages, apparently parsing them is NP-complete =)

[00:42] <lilstevey> many thanks, masak++

[00:42] <masak> lilstevey: and there's no need to apologise for questions. :) keep'em coming.

[00:43] <masak> arnsholt: I'm not comfortable enough with NP-completeness to know what that means.

[00:43] <arnsholt> Me neither, TBH

[00:43] <quantumEd> masak it just freaks me out that every natural number is finite, but the set of them is infinite

[00:43] <lilstevey> Thanks for the pointer - it's gone my bedtime so will disapear off to bed and try to have a play with eval in the week. ( perhaps then more questions to come ) Goodnight #perl6!

[00:43] <masak> arnsholt: does it mean that assigning parts of the text to AST nodes might take superpolynomial time?

[00:43] <arnsholt> I usually just parse it as "stupid-hard. here be dragons"

[00:43] <masak> lilstevey: g'nite.

[00:44] <masak> quantumEd: consider the set of numbers (2, 4, 6). each number is even, but the number of numbers is odd. does that also freak you out?

[00:44] *** lilstevey left
[00:45] <masak> arnsholt: yes, sure. I'm reading up on complexity now, through (Scott Aaronson)++'s online course, so I'm paying a little extra attention when I see stuff like that.

[00:45] <quantumEd> masak, no

[00:45] <masak> quantumEd: what's the significant difference? that there's infinity involved?

[00:46] *** colomon left
[00:46] *** colomon joined
[00:46] <arnsholt> Actually, it turns out context-sensitive grammars are even worse than NP-complete. They're PSPACE (whatever that means)

[00:46] <quantumEd> yeah

[00:47] <quantumEd> arnsholt, what does (whatever that means) mean?

[00:47] <arnsholt> quantumEd: It means that I have no idea what the difference between NP and PSPACE is

[00:47] <masak> arnsholt: it means that the memory requirements grow polynomially with the size of the problem.

[00:47] <arnsholt> Aha. Thanks

[00:48] <masak> arnsholt: see this lecture :) http://www.scottaaronson.com/democritus/lec6.html

[00:48] <masak> and this picture. http://en.wikipedia.org/wiki/PSPACE

[00:48] *** justatheory joined
[00:49] <arnsholt> Oooh, right. That graph looks familiar

[00:49] <arnsholt> It was in the slides of my algorithms class

[00:49] <arnsholt> Or at least one like it

[00:49] <quantumEd> I like the look of that NL class

[00:49] <masak> it's the class of all problems situated in the Netherlands.

[00:49] *** justatheory left
[00:49] <quantumEd> hehe

[00:50] <arnsholt> *giggle*

[00:54] <arnsholt> masak: Thanks for that link. Those are excellent slides

[00:55] <masak> you're welcome.

[01:10] <arnsholt> "We need 2^aleph-null choices like we need a hole in the head." =D

[01:11] <masak> :)

[01:12] <masak> oh, look at that. my watch says that I should have gone to sleep hours ago.

[01:12] <masak> I'll make the best of it and go to sleep now.

[01:12] <masak> good night, #perl6.

[01:12] <Wolfman2000> g'night

[01:12] *** masak left
[01:16] <colomon> ng: say "hello".flip

[01:16] <p6eval> ng 7d3cac: sh: ./perl6: No such file or directory␤

[01:16] <Wolfman2000> ...that's not a normal error, is it?

[01:17] <colomon> that's "there's no ng compiler right now."

[01:17] <colomon> it's being rebuilt, one hopes.

[01:17] <colomon> ng: say "hello".flip

[01:17] <p6eval> ng 7d3cac:  ( no output )

[01:18] <colomon> hey, that was supposed to work.

[01:18] <colomon> ng: say "hello".flip

[01:18] <p6eval> ng 7d3cac:  ( no output )

[01:18] <colomon> ng: say "hello"

[01:18] <p6eval> ng 7d3cac: hello␤

[01:19] <colomon> ng: for "hello".split("") { .say }

[01:19] <p6eval> ng 7d3cac: h␤e␤l␤l␤o␤

[01:19] <colomon> ng: for "hello".split("").reverse { .say }

[01:19] <p6eval> ng 7d3cac: o␤l␤l␤e␤h␤

[01:20] <colomon> ng:  "hello".split("").reverse.join.say

[01:20] <p6eval> ng 7d3cac: olleh␤

[01:20] <colomon> ng: flip("hello")

[01:20] <p6eval> ng 7d3cac:  ( no output )

[01:20] <colomon> ng: say flip("hello");

[01:20] <p6eval> ng 7d3cac: olleh␤

[01:20] <colomon> ng: say "hello".flip

[01:20] <p6eval> ng 7d3cac:  ( no output )

[01:21] <colomon> very puzzled how one can work and the other not...

[01:21] <Wolfman2000> colomon: typo?

[01:22] <colomon> ng: "hello".flip.say

[01:22] <p6eval> ng 7d3cac: olleh␤

[01:27] *** rgrau_ left
[01:28] <colomon> ng: say "hello".flip

[01:28] <p6eval> ng 7d3cac:  ( no output )

[01:30] <colomon> ng: say "hello".split("").reverse.join

[01:31] <p6eval> ng 7d3cac: olleh␤

[01:34] <colomon> ng: my $j = ("Hello"|"World");

[01:34] <p6eval> ng 7d3cac: Could not find non-existent sub prefix:?␤current instr.: '&infix:<===>' pc 8371 (src/builtins/Num.pir:18)␤

[01:37] *** dbrock` left
[01:40] *** cotto left
[01:40] <pugs_svn> r29214 | colomon++ | [t/spec] Reframe and fudge the junction autothreading index tests. 

[01:42] <ng_feed> rakudo-ng: colomon++

[01:42] <ng_feed> rakudo-ng: Turn on index.t test.

[01:49] <pugs_svn> r29215 | colomon++ | [t/spec] Refactor the fudge so that ng can pass it. 

[01:54] *** agentzh joined
[02:01] *** drbean_ joined
[02:09] <lisppaste3> colomon pasted "Bus error (?) in split-simple2.t seen in debugger" at http://paste.lisp.org/display/91257

[02:11] <ng_feed> rakudo-ng: colomon++

[02:11] <ng_feed> rakudo-ng: Add Any.chomp.

[02:11] <ng_feed> rakudo-ng: colomon++

[02:11] <ng_feed> rakudo-ng: Turn on chop.t and chomp.t.

[02:15] <arnsholt> colomon: Try rebuilding with debugging symbols?

[02:15] <colomon> is there an easy way to do that?

[02:16] <arnsholt> I think the easiest way is to just hack the Makefile and rebuild

[02:17] <arnsholt> Just add -g to CFLAGS

[02:17] <colomon> hack the parrot makefile and / or the rakudo makefile ?

[02:17] <arnsholt> The Rakudo Makefile primarily

[02:18] <arnsholt> It should be possible to get Parrot to build with debugging symbols by tweaking the config options appropriately

[02:18] <colomon> okay, rebuilding rakudo-ng.

[02:19] *** frew_ joined
[02:20] <Wolfman2000> evening frew_

[02:21] <Wolfman2000> I took care of some more updates...plus I figured out how to give you commit bit access.

[02:21] <Wolfman2000> Hopefully you'll like what you see.

[02:24] <colomon> arnsholt: with debugging turned on in rakudo, split-simple2.t works fine.   :| 

[02:24] <arnsholt> That's weird

[02:24] <arnsholt> And it was consistently failing before?

[02:25] *** orafu left
[02:25] *** orafu joined
[02:25] <colomon> arnsholt: No, it's more of a Heisenbug.

[02:26] <colomon> It seems consistent on a given build of rakudo, but that's it.

[02:26] <arnsholt> Then I'm out of tricks

[02:26] <arnsholt> But it's a NULL pointer deref, so it's definitely a bug somewhere

[02:28] <colomon> I've been running into them all day, I was hoping a trace or two might help jnthn or pmichaud puzzle it out.

[02:28] <arnsholt> True, true

[02:29] <arnsholt> But if you manage to get a trace with line numbers too I suspect they'll be even happier =)

[02:29] <colomon> Well, I'll leave debugging in for the moment and see if it happens again.

[02:46] <colomon> bedtime

[03:05] <diakopter> colomon: 

[03:05] <diakopter> earlier, it's that parsing issue

[03:06] <diakopter>  ng: say "hello".flip

[03:06] <p6eval> ng 812c27: olleh␤

[03:06] <diakopter> erm

[03:10] *** cognominal__ joined
[03:16] *** pnate2 joined
[03:17] *** cognominal_ left
[03:25] *** Exodist left
[03:28] *** zaslon left
[03:28] *** pointme left
[03:28] *** pnate left
[03:28] *** pointme joined
[03:29] *** zaslon joined
[03:32] *** ihrd joined
[03:32] *** Exodist joined
[03:38] *** JimmyZ_ joined
[03:46] *** JimmyZ_ left
[03:57] *** envi^office joined
[04:02] * Wolfman2000 goes for a BIG test file...gotta love (hate?) being slightly anal about covering all of the situations.

[04:08] <diakopter> "Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed."

[04:08] *** Exodist left
[04:08] <diakopter> what?  that's ... horribly unclear

[04:09] <diakopter> so no one can adopt a slightly-modified-edition of the AL2 for one's own project?

[04:14] <dj_goku> diakopter: your projects can be whatever license you choose.

[04:15] <dj_goku> diakopter: I would probably call it, al2-mod :D

[04:27] *** f00li5h[HireMe] joined
[04:27] * f00li5h[HireMe] meows

[04:28] <Cyrus> f00li5h[HireMe]: Told you.

[04:28] <Cyrus> You can see the pounds melting away.

[04:29] *** Exodist joined
[04:30] <avar> diakopter: Yes that's what it means, free software licenses are generally proprietary

[04:30] <avar> diakopter: i.e. if you want a similar license you have to write one all over again, you can't make a derived work

[04:37] <diakopter> sigh.  I don't suppose it can be incorporated by reference

[04:37] <diakopter> well, of course it can.

[04:38] <diakopter> Cyrus: what?

[04:38] <Cyrus> diakopter: It was a joke that spanned #perl and here.

[04:42] <avar> diakopter: such licenses usually explicitly prohibit adding terms, so you can't do that either

[04:47] <diakopter> avar: they prohibit adding terms for the redistribution of works released under them, but nothing prohibits making [external] modifications to the license for use in the initial release of one's own software.

[04:48] <Tene> You need to be careful when examining what restrictions apply to the license itself and what apply to software released under the license.

[04:51] <diakopter> Tene: the AL2 doesn't refer to itself (as a document apart from as it's attached to a Package) except [ambiguously, perhaps] in that sentence I quoted.

[04:52] <diakopter> so, the definition of "license" can be externally amended/redefined to mean the AL2 document plus the amendments listed in the amendment document itself.

[04:53] <avar> diakopter: There are no "external" terms, "the license" is the terms under which you distribute the software. If you add extra terms in the form of "these terms + GPL" that's counted as being under the license, which you explicitly can't modify

[04:53] <diakopter> avar: no

[04:53] <avar> (I'm only familiar with this case with the GPL, but maybe the AL2 is similar)

[04:54] <avar> Are you talking about dropping in the license and adding terms somewhere else "we're under the AL2 but you can only distribute the software on a tuesday" ?

[04:54] <avar> because that's the impression I got, maybe I'm mistaken

[04:56] *** patspam joined
[04:56] <diakopter> avar: what precisely would be wrong with that example?

[04:57] <diakopter> well, modified to be:

[04:59] <avar> Because you're distributing a legal document which is at odds with itself

[04:59] <avar> The first line of AL2 says: "License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

[04:59] *** patspam left
[05:00] <avar> Anyway, apache probably has a legal mailing list, ask there, I'm not a laywer

[05:00] <avar> but you'll probably get the same respons, gn

[05:01] <diakopter> "we're under the terms as listed in LICENSE [where LICENSE contains: see the accompanying AL2.txt for definitions and overall terms, but where "this license" and "the license" in AL2.txt refer to the contents of this file (LICENSE) and AL2.txt. And you may only release redistributions of this software on Tuesdays.]

[05:01] <diakopter> "

[05:01] <diakopter> avar: where did you get your copy of AL2

[05:01] <diakopter> because I don't see that line

[05:02] *** nihiliad left
[05:02] <diakopter> avar, oh, you're referring to the Apache License 2

[05:03] <diakopter> I was talking about the license that nearly all of the Perl 6 implementations use - the Artistic License 2

[05:03] <diakopter> but still, my point holds even if it were the Apache License

[05:06] <Wolfman2000> ...what license is Perl 6 on anyway? Not the implementations, the language.

[05:10] <diakopter> I'm pretty sure the spectests and synopses are protected by the http://svn.pugscode.org/pugs/LICENSE/Artistic-2 by default... but good point, that probably should be explicit on http://perlcabal.org/syn/

[05:16] *** xomas joined
[05:18] *** xomas is now known as xomas_

[05:23] <carlin> Would it be possible to modify the license by reference, so state "This software is released under AL2 sans point ii of section 4c."

[05:27] <diakopter> that's what I'm surmising, yeah

[05:27] <dj_goku> diakopter: I am with you (but I would get a lawyers opinion), that you can change as you see fit, just it won't be the same license and terms.

[05:28] <diakopter> yes, the AL2 just says you can't change the *document*

[05:28] <diakopter> ArtisticLicense2

[05:29] <mdxi> that's because if you could, someone could change the terms of the license and then say "I am totally following the terms of the Artistic License!"

[05:29] <mdxi> practically speaking, you can change it

[05:29] <mdxi> but you can't call it "the Artistic License" anymore

[05:29] <mdxi> just as specs are generally not open in a "modify this document" sense

[05:30] <mdxi> because then you don't have a spec at all

[05:30] <diakopter> yeah

[05:31] <diakopter> well, the Perl Foundation can change it :)

[05:31] <diakopter> (unless that clause is externally amended) :)

[05:37] <carlin> But you could still release it under AL2 and then lock it down extenrally; "This software is released under AL2, provided you don't redistribute it or modify it"

[05:38] <diakopter> too many "it"s :)

[05:41] <carlin> ... but you could probably still get around that using section 4c ... legal nightmare imo.

[05:43] <Wolfman2000> ...what controversy did I cause now diakopter?

[05:47] *** orafu left
[05:47] *** explorer left
[05:47] *** orafu joined
[05:58] <Wolfman2000> sleep for me

[06:31] *** xinming left
[06:54] *** kaare joined
[06:54] *** kaare is now known as Guest20022

[07:05] *** mberends joined
[07:29] *** cotto joined
[07:40] *** colomon_ joined
[07:40] *** colomon left
[07:40] *** colomon_ is now known as colomon

[07:57] *** colomon_ joined
[07:57] *** colomon left
[07:58] *** colomon_ is now known as colomon

[08:00] *** flip214 joined
[08:00] <flip214> Hello again!

[08:00] <moritz_> good morning

[08:00] <flip214> I've got some fresh questions again ...

[08:01] <flip214> I'm trying to define my own String class - for local charset/UTF8 type validation in the compiler

[08:01] <flip214> (if that makes sense in perl ?)

[08:02] <flip214> So that I can clearly tag my function "this takes an UTF8 string", and "this gets a local string"

[08:03] <flip214> Now there are some parts where I have to convert - eg. from "Str @ARGV"

[08:03] <moritz_> @*ARGS iirc

[08:03] <lambdabot> Unknown command, try @list

[08:03] <flip214> But simply using a "new" function with appropriate input types doesn't work

[08:04] <flip214> rakudo: class T is Str { method new(Str $x) { return bless $x; } }; my T @a= "a", "2"; say @a;

[08:04] <p6eval> rakudo 7ce13d:  ( no output )

[08:04] <flip214> is that just NIY?

[08:04] <flip214> I get a NULL PMC access in isa()

[08:04] <moritz_> you can't just bless anything, I think

[08:04] *** iblechbot joined
[08:05] <mberends> conceptually, UTF-8 should not be a "type" for a string. UTF-8 is a representation.

[08:05] <moritz_> and the spec provides a utf8 buffer type, which validates :-)

[08:05] <moritz_> but rakudo NYI it

[08:06] <mberends> so UTF8 is a "type" for a buf, which is not a string.

[08:07] <mberends> buf <--> string is tricky, seeing past work by others on the subject

[08:07] <flip214> So, what should I do? There are some API functions that need UTF8 input, and I have to assume that my commandline parameters are in local charset.

[08:07] <flip214> Some persistent data should be stored in local charset (possible, not sure about that yet) (for performance reasons) ...

[08:08] <flip214> and some other functions need to be tagged UTF8

[08:08] * mberends cannot help

[08:08] <flip214> I'd like to keep typechecking to the compiler

[08:08] <moritz_> currently rakudo decodes everything as UTF-8

[08:08] <flip214> Well, maybe Str is the wrong type anyway

[08:08] <moritz_> so @*ARGS contains Str objects, not Buf objects

[08:08] <flip214> and I should just use Buf

[08:09] <moritz_> http://perlgeek.de/blog-en/perl-6/strings-and-buffers.html if you haven't read it yet

[08:09] <flip214> But again, I'd like to use some different types ...

[08:11] <flip214> rakudo: my buf8 $x='aaa'; say $x;

[08:11] <p6eval> rakudo 7ce13d: Malformed declaration at line 2, near "buf8 $x='a"␤in Main (file <unknown>, line <unknown>)␤

[08:11] <flip214> rakudo: my Buf $x='aaa'; say $x;

[08:11] <p6eval> rakudo 7ce13d: Assignment type check failed; expected Buf, but got Str␤in Main (file <unknown>, line <unknown>)␤

[08:11] <flip214> rakudo: my Buf $x='aaa'.Buf; say $x;

[08:11] <p6eval> rakudo 7ce13d: Method 'Buf' not found for invocant of class 'Str'␤in Main (file src/gen_setting.pm, line 324)␤

[08:11] <moritz_> rakudo: my Buf $x = "foo".encode('UTF-8')

[08:11] <p6eval> rakudo 7ce13d:  ( no output )

[08:11] <moritz_> rakudo: my Buf $x = "foo".encode('UTF-8'); say $x[0]

[08:11] <p6eval> rakudo 7ce13d: elements() not implemented in class 'Buf'␤in Main (file <unknown>, line <unknown>)␤

[08:12] <flip214> rakudo: augment Str { ... }; my Buf $x='aaa'; say $x;

[08:12] <p6eval> rakudo 7ce13d: Confused at line 2, near "{ ... }; m"␤in Main (file <unknown>, line <unknown>)␤

[08:12] <flip214> How do I write type conversions?

[08:12] <moritz_> method TypeYouWantToConvertTo { ... }

[08:13] <flip214> rakudo: augment Str { method Buf($x) { return $x; } }; my Buf $x='aaa'; say $x;

[08:13] <p6eval> rakudo 7ce13d: Confused at line 2, near "{ method B"␤in Main (file <unknown>, line <unknown>)␤

[08:13] *** perl4lea joined
[08:13] <moritz_> std: rakudo: augment Str { method Buf($x) { return $x; } }; my Buf $x='aaa'; say $x;

[08:13] <p6eval> std 29215: ===SORRY!===␤Malformed augment at /tmp/Cv6DCVgTJb line 1:␤------> rakudo: augment Str ⏏{ method Buf($x) { return $x; } }; my Bu␤    expecting any of:␤  multi_declarator␤ typename␤FAILED 00:01 105m␤

[08:13] <moritz_> but you can't convert Str to Buf without specifying an encoding

[08:13] <moritz_> which is why we have the .encode method

[08:13] <flip214> rakudo: augment Str { method Buf() { return self.encode('UTF-8'); } }; my Buf $x='aaa'; say $x;

[08:14] <p6eval> rakudo 7ce13d: Confused at line 2, near "{ method B"␤in Main (file <unknown>, line <unknown>)␤

[08:14] <flip214> rakudo: augment class Str { method Buf() { return self.encode('UTF-8'); } }; my Buf $x='aaa'; say $x;

[08:14] <p6eval> rakudo 7ce13d: Re-declaration of type Str at line 2, near "; my Buf $"␤in Main (file src/gen_setting.pm, line 1671)␤

[08:14] <flip214> rakudo: class T { method Buf() { return self.encode('UTF-8'); } }; my T $x='aaa'; say $x;

[08:15] <p6eval> rakudo 7ce13d:  ( no output )

[08:18] *** perl4lea left
[08:20] <flip214> rakudo: class T { method BUILD(Str $a) { return $a; } }; my T $x='aaa'; say $x;

[08:20] <p6eval> rakudo 7ce13d: BUILD declared as a method; you probably wanted to declare it as a submethod.␤

[08:20] <flip214> rakudo: class T { submethod BUILD(Str $a) { return $a; } }; my T $x='aaa'; say $x;

[08:20] <p6eval> rakudo 7ce13d:  ( no output )

[08:20] <flip214> Null PMC access in isa()

[08:26] *** ejs joined
[08:35] *** dakkar joined
[08:36] *** ejs1 joined
[08:45] *** ejs left
[08:50] *** rindolf joined
[09:01] *** dbrock` joined
[09:16] *** riffraff joined
[09:21] *** quantumEd left
[09:21] *** meppl joined
[09:40] *** mberends left
[09:43] *** mberends joined
[09:45] *** payload joined
[09:46] *** riffraff left
[09:47] *** riffraff joined
[09:54] *** rgrau joined
[09:59] *** ihrd left
[10:01] *** ihrd joined
[10:02] *** ihrd left
[10:06] *** JimmyZ joined
[10:07] *** xinming joined
[10:12] <JimmyZ> ng: class Alpha { has @!a = < beta gamma >;};

[10:12] <p6eval> ng 812c27: No applicable candidates found to dispatch to for '&infix:<=>'␤current instr.: 'perl6;Alpha;_block22' pc 107 (EVAL_1:58)␤

[10:29] <lisppaste3> colomon pasted "broken from apparently infinite loop in S32-str/comb/t" at http://paste.lisp.org/display/91262

[10:32] *** JimmyZ left
[10:36] <ng_feed> rakudo-ng: colomon++

[10:36] <ng_feed> rakudo-ng: Set appropriate default value for Any.comb's Regex argument.

[10:41] <pugs_svn> r29216 | colomon++ | [t/spec] Switch m/oo/ to /oo/. 

[10:54] *** pmurias joined
[10:56] *** payload left
[10:59] *** envi^office left
[11:03] *** agentzh left
[11:10] *** dakkar left
[11:11] *** pmurias left
[11:15] *** jferrero joined
[11:20] <colomon> errr... how do you get a capture in ng?

[11:23] <colomon> rakudo: "   ghfhgfg   " ~~ /^\s*(.*)\s*$/; say $0

[11:23] <p6eval> rakudo 7ce13d: ghfhgfg   ␤

[11:24] <colomon> rakudo: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say $0

[11:24] <p6eval> rakudo 7ce13d: ghfhgfg␤

[11:24] <colomon> ng: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say $0

[11:24] <p6eval> ng 36e263: Confused at line 1, near "say $0"␤current instr.: 'perl6;HLL;Grammar;panic' pc 519 (src/stage0/HLL-s0.pir:336)␤

[11:25] <colomon> rakudo: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say $/[0]

[11:25] <p6eval> rakudo 7ce13d: ghfhgfg␤

[11:25] <colomon> ng: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say $/[0]

[11:25] <p6eval> ng 36e263: Can't postcircumfix:<[ ]> foreign objects yet.␤current instr.: '!postcircumfix:<[ ]>' pc 240719 (src/gen/core.pir:0)␤

[11:26] <moritz_> ouch

[11:29] *** SmokeMachine joined
[11:30] <colomon> moritz_: oh, someone else is awake!

[11:30] * moritz_ just came back from lunch

[11:32] <ng_feed> rakudo-ng: colomon++

[11:32] <ng_feed> rakudo-ng: Turn on pos.t test.

[11:32] <colomon> ng: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say $/

[11:32] <p6eval> ng 36e263: ␤

[11:33] <colomon> ng: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say ~$/

[11:33] <p6eval> ng 36e263: ␤

[11:34] <colomon> bother.  well, I have non-working versions of rindex and trim to show for my morning's efforts....

[11:37] <moritz_> ng: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say ?$/

[11:37] <p6eval> ng 36e263: 0␤

[11:37] *** beggars joined
[11:37] <moritz_> it doesn't match, which is why indexing into $/ doesn't work

[11:41] *** ejs1 left
[11:42] <colomon> so matching is broken?

[11:42] <colomon> broken/nyi?

[11:43] <moritz_> rakudo: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say ?$/

[11:43] <p6eval> rakudo 7ce13d: 1␤

[11:43] <moritz_> maybe it's not backtracking enough

[11:43] <moritz_> pmichaud: see above, a regex doesn't match in ng that does in master (and should, IMHO)

[12:01] *** ihrd joined
[12:01] *** ihrd left
[12:15] *** patspam joined
[12:15] *** patspam left
[12:21] *** iblechbot left
[12:28] *** flip214 left
[12:33] *** payload joined
[12:44] *** beggars left
[12:47] <ng_feed> rakudo-ng: colomon++

[12:47] <ng_feed> rakudo-ng: Initial stabs at Any.trim and Any.rindex.  Neither works, and rindex is commented out because it does not even compile yet.

[12:58] <lisppaste3> colomon pasted "Bus error in words.t" at http://paste.lisp.org/display/91266

[13:02] <ng_feed> rakudo-ng: colomon++

[13:02] <ng_feed> rakudo-ng: Implement Any.words.

[13:05] *** payload1 joined
[13:06] *** kst` joined
[13:08] *** transplant joined
[13:14] *** transplant left
[13:14] *** payload left
[13:17] *** charsbar left
[13:18] *** charsbar joined
[13:21] *** JimmyZ joined
[13:21] *** mariano__ joined
[13:29] *** cognominal joined
[13:31] *** payload1 left
[13:34] *** payload joined
[13:35] *** cognominal__ left
[13:38] *** clintongormley joined
[13:39] *** clintongormley left
[13:42] *** JimmyZ left
[13:43] *** clintongormley joined
[13:45] *** masak joined
[13:45] *** clintongormley left
[13:47] *** rindolf left
[13:49] *** clintongormley joined
[13:49] *** Exodist left
[13:51] <mathw> I have just been very surprised to discover how many of my colleagues and my friends don't know how to write Makefiles

[13:51] <mathw> Are they really all that complicated?

[13:51] <masak> to be honest, I only know the very basics.

[13:51] <masak> I know that there be dragons in the whitespace handling.

[13:52] <jnthn> I know that my make program has different ideas about whitespace to some other people's.

[13:52] <mathw> jnthn: everyone I've spoken to so far would only use GNU Make anyway, so assume that's not an issue

[13:52] <jnthn> mathw: Yeah, in that case it's not an issue.

[13:53] <mathw> That's what I thought

[13:53] <jnthn> mathw: It's more an issue for me when I hack makefiles, and then thanks to tab/space hanlding differences between gnu make and nmake I break the build.

[13:53] <mathw> But then I'm from the perspective of having learned how to write Makefiles years ago

[13:53] <jnthn> I'm not a makefile wizzard by any means, but I don't find the basic concept hard.

[13:53] <mathw> It seems most of my colleagues do...

[13:54] <jnthn> I think I understood prolog as "like doing all your programming using makefiles" at one point. ;-)

[13:55] <masak> heh. that disregards backtracking. :)

[13:55] <mathw> Actually that's a pretty good way to think about it

[13:55] <mathw> Except Makefiles don't go backwards, as masak said first

[13:55] <mathw> Of course, if you don't already grok Makefiles, it doesn't help your Prolog

[13:56] <masak> yesterday I started thinking about backtracking keywords in a programming language, and how they would look.

[13:56] <mathw> They look like this: !

[13:56] <mathw> Everything else is implicit :P

[13:56] <masak> I think i'd better explain using a nopaste. hold on. :)

[13:59] *** cognominal left
[13:59] <moritz_> masak: I've seen some backtracking keywords in lisp-like languages

[14:00] <masak> moritz_: cool. which ones?

[14:01] <mathw> Does anybody know if Windows has anything akin to popen()?

[14:01] <mberends> the only problem I had with Makefiles so far was that 'man make' is woefully inadequate. The solution is to keep a copy of http://www.gnu.org/software/make/manual/ handy.

[14:01] <moritz_> masak: I forgot :(

[14:04] <PerlJam> greeble

[14:04] <zaslon> loljnthnhazblogged! jnthn++ 'Failure()<0xb5098484>': Failure()<0xb50979f8>

[14:04] <masak> zaslon: whereas ng doesn't know how to fail, you sure do. :)

[14:04] <zaslon> Sorry, I don't understand that command

[14:05] <PerlJam> prolog is  the only language I've ever run across (that I can recall) that has "backtracking keywords"

[14:05] *** iblechbot joined
[14:07] <colomon> PerlJam: I've seen implementations of prolog in lisp... (mind you, that was nearly 20 years ago now, so the details are very fuzzy)

[14:07] <zaslon> loljnthnhazblogged! jnthn++ 'Laying the role meta-foundations': http://use.perl.org/~JonathanWorthington/journal/39943?from=rss

[14:07] <colomon> PerlJam: Do I need to be writing the first p6 advent calendar post for tomorrow?

[14:07] *** cognominal joined
[14:07] <jnthn> zaslon: I blogged that AGES ago!

[14:07] <zaslon> Sorry, I don't understand that command

[14:07] <PerlJam> colomon: if you want.  If not, I can probably do it tonight. 

[14:08] <PerlJam> colomon: Did we ever decide where these posts would go?

[14:08] <colomon> PerlJam: Not here.  Don't know what discussion there has been on the wave.

[14:08] <PerlJam> colomon: none really :)

[14:09] <PerlJam> I wonder if we can get perl6advent.blogspot.com or something and go from there.

[14:09] <colomon> PerlJam: I just figured we'd pick a blog that was easy to edit for the "table of contents" post, and everything else could go wherever.

[14:09] <colomon> PerlJam: oooo, interesting idea!

[14:10] <PerlJam> I've got a meeting at work shortly and some other tasks to do this morning, but if you want to try to do that, that would be excellent.

[14:10] <colomon> Let me see what I can do.  (While $work compiles, honest.)

[14:10] <PerlJam> Otherwise, I won't be too available for the next 2-3 hours.

[14:10] *** [particle]1 is now known as [particle]

[14:11] <masak> colomon, PerlJam: how are you planning to assign the days to different people?

[14:11] <colomon> I've only got about 30 minutes, then I've got to get cleaned up to take the boy to storytime at the library.

[14:11] <PerlJam> masak: volunteer for a day and just do it!  :)

[14:11] <masak> PerlJam: for 24 days?

[14:11] <masak> PerlJam: how many volunteers?

[14:12] <PerlJam> I dunno. As many as we can cajole on #perl6  :)

[14:12] <colomon> I think we have four or five at the moment?

[14:12] <masak> that sounds good.

[14:13] <jnthn> colomon: I'll volunteer to write one. I may need minor cajoling. :-)

[14:13] <PerlJam> meeting time for me.

[14:13] <mberends> what does a volunteer have to do?

[14:13] <colomon> jnthn: write one or I'll keep inserting bugs into ng!

[14:13] <masak> I like loose organizations in general, but I fear with too little structure, the advent calendar might come to a halt at day 11 or some such. :/

[14:14] <masak> maybe a schedule where people could pick particular days, say on a wiki somewhere, would help counter that.

[14:17] <colomon> http://perl6advent.wordpress.com

[14:17] <masak> colomon++

[14:19] <colomon> Looks like I've found the page to add contributors to the blog.  May have to have a wordpress.com account to be one?

[14:19] <colomon> I've never actually used wordpress before, so this will be a bit of an adventure for me...

[14:20] <colomon> Oooo, invites.

[14:22] <colomon> masak: using you as a guinea pig...

[14:22] <masak> excellent.

[14:22] <masak> I think I already have a wordpress account, for what it's worth.

[14:23] <colomon> brushingupmyknuth  ?  ;)

[14:24] <colomon> Does someone have an e-mail for PerlJam?

[14:24] <moritz_> perlpilot at gmail or so

[14:25] <colomon> github gives it as duff at pobox.

[14:26] <masak> colomon: it was an idea I had once, to plod through all the Knuth exercises.

[14:26] <moritz_> that's sounds better :-)

[14:26] <colomon> masak: It's a brilliant and brave idea.

[14:26] <masak> colomon: one might say that Perl 6 has nowadays occupied that slot in my life, though.

[14:26] <masak> colomon: I might take it up again some time.

[14:26] <colomon> masak: understood.

[14:27] <moritz_> *all* the knuth excercises?

[14:27] <moritz_> that was... ambitious :-)

[14:28] <masak> I had that vice already then. :)

[14:28] <colomon> masak: In theory I add you and PerlJam as contributors.  though it's not actually showing up on the users page.  You may have to do something with the invite?

[14:29] <masak> ok.

[14:29] <moritz_> if you want a guest post from me on one of my favourite topics, I might give it a shot

[14:29] <colomon> moritz_: sounds great.

[14:30] <moritz_> I guess you want things that already work in Rakudo?

[14:30] <jnthn> .oO( There's more than one way to Christmas )

[14:31] <colomon> I was certainly thinking that, but I guess things that are super-cool but don't work yet might be worth including...

[14:31] <masak> colomon: wordpress.com won't let me create a new account because my email address 'is already in use'. I guess that's because I have an account already.

[14:33] <colomon> Maybe I have to add you from the other page, then?  Hmmm...

[14:33] <colomon> jnthn: what e-mail address should I use for you?

[14:34] <jnthn> [email@hidden.address]
[14:34] <jnthn> <-- mynick

[14:35] <colomon> done.  And masak, you're added as a contributor, whatever that means.

[14:35] <masak> colomon: ok. still trying to log in.

[14:35] <Wolfman2000> *yawn* morning. colomon: I think I added masak and others as contributers to my github project, but I don't know if they had to be sent emails or something. I just...went for it.

[14:36] <moritz_> on github no confirmation is necessary

[14:36] <jnthn> colomon: oh...

[14:36] <jnthn> colomon: I already have a wordpress account.

[14:37] <jnthn> colomon: So not sure if this worked out..

[14:37] <jnthn> colomon: If you can add a username, mine there is "jnthnwrthngtn"

[14:37] <colomon> what e-mail is it attached to?

[14:37] <jnthn> The same one.

[14:38] <[particle]> i shun caps, sure. but jnthn shuns caps and vowels! he brings coolness to a new level :)

[14:38] *** Coke joined
[14:38] <colomon> okay, you're in

[14:39] <jnthn> colomon: yay, now I can has an email saying I'm added.

[14:39] <jnthn> colomon: yup, I see it.

[14:39] <jnthn> \o/

[14:39] <Coke> ah, jnthn, my online documentation resource!

[14:39] <Coke> (jk)

[14:39] <colomon> okay, off to storytime....

[14:40] <jnthn> .oO( Saying "The docs probably suck." makes me a resource? :-) )

[14:40] <pmichaud> good morning, #perl6

[14:40] <masak> morning, pmichaud.

[14:40] <jnthn> morning, pmichaud 

[14:42] <masak> I still think having a schedule with days in which people can pick days would be an all-round good thing.

[14:42] <Coke> ooh. I just figured out the answer to my question.

[14:42] <masak> that way, the problem of finding a volunteer each day would not be as urgent.

[14:42] <moritz_> masak: then just start such a page somewhere

[14:43] <masak> moritz_: nod. any suggestions? it needs to be somewhere everyone can edit.

[14:43] <moritz_> masak: pugs repo

[14:43] <masak> ah, of course!

[14:43] <masak> thanks.

[14:43] * masak makes it so

[14:44] <pmichaud> ng: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say ?$/

[14:44] <p6eval> ng f2ba53: sh: ./perl6: No such file or directory␤

[14:45] <jnthn> Coke: Happy to be of service!

[14:45] <jnthn> ;-)

[14:47] <moritz_> ng: "  ghfhgfg  " ~~ /^\s*(.*?)\s*$/; say ?$/

[14:47] <p6eval> ng f2ba53: 0␤

[14:47] <moritz_> rebuild finished

[14:48] <pmichaud> ng: "  ghfhgfg  " ~~ /^\s*(.*)\s*$/; say ?$/

[14:48] <p6eval> ng f2ba53: 1␤

[14:48] *** ruoso joined
[14:48] <pmichaud> ng: "  ghfhgfg  " ~~ /^\s*(.*!)\s*$/; say ?$/

[14:48] <p6eval> ng f2ba53: 1␤

[14:49] <pmichaud> ng: "  ghfhgfg  " ~~ /^\s*(.*!)\s*/; say $/

[14:49] <p6eval> ng f2ba53:   ghfhgfg  ␤

[14:49] <pmichaud> ng: "  ghfhgfg  " ~~ /^\s*(.*?)\s*/; say $/

[14:49] <p6eval> ng f2ba53:   ␤

[14:49] <pmichaud> ng: "  ghfhgfg  " ~~ /^\s*(.*?)$/; say $/

[14:49] <p6eval> ng f2ba53: ␤

[14:49] <pmichaud> looks like a backtracking bug somewhere.

[14:49] <pugs_svn> r29217 | masak++ | [misc/perl6advent] added schedule 

[14:50] <masak> people, go and sign yourselves up for days! http://svn.pugscode.org/pugs/misc/perl6advent-2009/

[14:50] <masak> ANYONE, even lurkers, can volunteer.

[14:51] <Wolfman2000> masak: It may help if I understood WHAT we are volunteering for

[14:51] <pmichaud> is there a readme or something that explains what....

[14:51] <masak> it would be good to know we cover the first week before December begins.

[14:51] <masak> oh, good point.

[14:51] <masak> I'll write a micro-readme.

[14:54] *** xomas_ is now known as xomas

[14:54] <pugs_svn> r29218 | masak++ | [misc/perl6advent] added README 

[14:55] <masak> there you go. http://svn.pugscode.org/pugs/misc/perl6advent-2009/

[14:55] <Wolfman2000> which blog is this?

[14:56] <Wolfman2000> I may have missed it during scrollback

[14:56] <masak> another good point. :) I'll add the URL to the README.

[14:56] <masak> it's http://perl6advent.wordpress.com/

[14:57] *** Guest20022 left
[14:57] <Wolfman2000> since I covered my contributing here, does that mean I'm exempt from blogging?

[14:57] <masak> someone with tuits is very welcome to pick a less clichéd skin for the blog.

[14:57] <masak> Wolfman2000: no, it means you're an excellent candidate.

[14:57] <pmichaud> ...should it perhaps got to blogs.perl.org ?

[14:57] <pmichaud> *go

[14:57] <masak> pmichaud: I think it should.

[14:57] <Wolfman2000> I don't know if I have a blogpress account

[14:58] <Wolfman2000> Will you require me to make one?

[14:58] <colomon> pmichaud: blogs.perl.org officially doesn't work yet, there was a blog post on it this morning.  :)

[14:58] <colomon> masak++ for organizing!

[14:58] <pmichaud> colomon: okay then -- didn't know about that :)

[14:58] <pugs_svn> r29219 | masak++ | [README] added URL 

[14:58] <pmichaud> Anyway, I'll take at least one day in the first week.  I'm not particular about the day.

[14:59] <colomon> afk for real now....

[14:59] <masak> Wolfman2000: I think you'll need one for posting, yes.

[14:59] <Wolfman2000> apparently I have an account. Hang on while I retrieve my password

[15:01] <arnsholt> What exactly does 哈 mean?

[15:01] <masak> arnsholt: it represents the sound 'ha'.

[15:02] <masak> arnsholt: TimToady tells me it means 'Pugs', which is oddly fitting :)

[15:02] <Wolfman2000> masak: I'm in. What account information do you require from me?

[15:02] <masak> Lithos++ # weekly summaries

[15:02] <Wolfman2000> masak: "Pugs" can't work in kanji

[15:02] <Wolfman2000> pugusu, perhaps

[15:02] <masak> Wolfman2000: colomon holds the keys to the blog.

[15:03] <masak> Wolfman2000: no, not the sound. the meaning.

[15:03] <arnsholt> masak: Oh, right ^^

[15:03] <masak> Wolfman2000: 哈 sounds like HA1 in Mandarin.

[15:03] <Wolfman2000> masak: what information should I PM to colomon then?

[15:03] <masak> Wolfman2000: what you can do already, though, is pick a couple of days in the schedule I linked to.

[15:04] <masak> Wolfman2000: probably your username is enough.

[15:04] <Wolfman2000> lc(<--)

[15:04] <Wolfman2000> or <--.lc

[15:04] <masak> yes. PM that to colomon. :)

[15:05] <Wolfman2000> Dec 1st is tomorrow, right?

[15:05] <Coke> Wolfman2000: yes

[15:05] <Wolfman2000> and what do we talk about?

[15:06] <masak> Wolfman2000: consider the outer world, which will receive Perl 6 as 24 gifts during December.

[15:06] <masak> Wolfman2000: write about one such gift.

[15:06] <Wolfman2000> ...so we have to plan our gift giving so we don't overlap.

[15:06] <masak> nah. :)

[15:06] <masak> just write stuff, and let the anarchy sort it out. :)

[15:07] <Wolfman2000> ...despite my homework, I think I can claim the 1st of December easily.

[15:07] <masak> OTOH, if you want to claim a topic, feel free to write as much in the schedule.

[15:07] <Wolfman2000> ah

[15:07] <masak> Wolfman2000++

[15:07] <Wolfman2000> yeah, topic claiming is a good idea...

[15:07] <Wolfman2000> Dec 1: multi subs with constraints

[15:07] <masak> maybe I should do the same, then.

[15:07] <masak> that's a good topic.

[15:08] <Wolfman2000> ...though since my topic deals with types...I guess I"ll just say "someone else will explain the gift of types"

[15:08] <masak> Wolfman2000: another tip is to nopaste a draft here before you post, so that we can all praise/comment/improve.

[15:08] <Wolfman2000> or I can keep mine generic

[15:08] <Wolfman2000> masak: point

[15:08] <masak> Wolfman2000: don't worry too much about introducing things in the right order.

[15:08] <Wolfman2000> alright, what's another good day...well, seems like you have all of the Wednesdays

[15:08] <masak> it's not a course book.

[15:08] <masak> yes, for some reason I took the Wednesdays. :)

[15:09] <masak> it doesn't matter to me though, so feel free to move me over if you want one.

[15:09] <Wolfman2000> Wednesdays are generally bad for me

[15:09] <Wolfman2000> ...I may as well stick to Tuesdays then

[15:09] <Wolfman2000> I just have to come up with 3 more topics

[15:10] <masak> no rush.

[15:10] <Wolfman2000> let's see...grammar tutorial, since I've done minor work in that.

[15:10] <masak> that's way too big a topic to claim. :)

[15:10] <Wolfman2000> ...you're right

[15:10] <Wolfman2000> I can do a small part, such as token/role { stuff } and then using the token/role

[15:11] <masak> that sounds good.

[15:12] <Wolfman2000> ...my caesar cipher program can come in handy: letter rotating with comb and map

[15:12] <masak> that sounds nice.

[15:13] <masak> maybe we could agree on some small gimmick, such as "On December 1, my Perl 6 gift is: multi subs".

[15:13] <Wolfman2000> which leaves the final topic...up in the air for now

[15:14] <Wolfman2000> "(Hello in a foreign language), I am (name), and on December (date), my Perl 6 gift is: (gift)"

[15:14] <jnthn> .oO( On the first day of Christmas, my Perl 6 brought to me, dispatch with a multi )

[15:14] <Wolfman2000> I know the first part is basically copying the Nostalgia Critic.

[15:14] <Wolfman2000> jnthn: I'd like to think of this Perl 6 Advent thing as more than just Christmas here.

[15:14] <masak> jnthn: we have more than 12 days. :)

[15:14] <Wolfman2000> We can cover Hannukah and Kwaanza easily.

[15:14] <jnthn> masak: Yeah!

[15:15] <jnthn> masak: Couldn't resist the opportunity for corny/bad poetry though :-)

[15:15] <Wolfman2000> So...

[15:15] <Wolfman2000> colomon: You may want to make sure that blog of yours supports UTF-8 properly!

[15:15] <Wolfman2000> brb/afk while I get ready to head off to school. I'm almost done with this semester! :D

[15:16] <masak> Wolfman2000: have the appropriate amount of fun!

[15:16] *** envi^home joined
[15:17] <carlin> zaslon: add perl6advent http://perl6advent.wordpress.com/feed/

[15:17] <zaslon> I am now following perl6advent's blog

[15:17] <carlin> zaslon: link perl6advent

[15:17] <zaslon> perl6advent's blog is at http://perl6advent.wordpress.com

[15:17] *** PacoLinux joined
[15:18] <masak> phenny: tell colomon that it may be a good idea to write an 0th blog post today, which introduces the whole Perl 6 Advent Calendar endeavour to the world.

[15:18] <phenny> masak: I'll pass that on when colomon is around.

[15:19] * masak goes to buy food

[15:19] *** masak left
[15:23] *** IllvilJa left
[15:23] *** colomon left
[15:24] *** colomon joined
[15:29] *** KyleHa joined
[15:34] <frettled> Good news, everyone!  It turns out that Planet Perl Six can be configured to grab posts from a blog that contains specific keywords, rather than just shoving out all there is.  So it's possible for someone to have a more general-minded blog, yet get their Perl 6 related blog posts at the Perl 6 planet.  Woohoo.

[15:35] <frettled> Of course, when I asked, the answer was only «Yes, it's possible», nothing more, but hey, it was a technically correct answer.

[15:35] <moritz_> frettled: and, was your blog added?

[15:35] <moritz_> obra: are you the owner of planetsix?

[15:36] <frettled> moritz_: apparently not, I sent a response asking how I get my blog added.

[15:37] <Wolfman2000> done with showering and whatnot

[15:37] <Wolfman2000> I'll have the laptop packed up within 20 minutes

[15:37] <obra> moritz_: I ..was. A long time ago. I believe others can edit it

[15:37] <Wolfman2000> so any last minute things I need to know before I head off, now's the time.

[15:38] <obra> moritz_: give me urls

[15:38] <moritz_> obra: http://howcaniexplainthis.blogspot.com/ # filter for the Perl 6 tag (or keyword)

[15:38] <obra> moritz_: RSS/Atom feed urls please. with the filter in place

[15:38] <moritz_> obra: so in future should I send people to you? or to [email@hidden.address]
[15:39] *** payload1 joined
[15:39] <obra> I just have an ini file to work with

[15:39] <frettled> obra: ah, urhm, blogspot.com doesn't provide an in-place filter

[15:39] *** payload left
[15:39] <obra> moritz_: send mail to [email@hidden.address] cc me asking about helping maintain it

[15:40] <moritz_> obra: ok, thanks

[15:40] <obra> frettled: we're using planet. afaik, planet doesn't have such a feature 

[15:40] <frettled> obra: aaaw :(

[15:41] <frettled> I should get off my lazy bum and get working on the Oslo.pm planet.

[15:42] <obra> frettled: you might be able to use feedburner or something to get a filtered feed for us

[15:42] <frettled> obra: aha, I didn't think of that.

[15:43] <frettled> It's also a part of the don't-be-evil company, I see.

[15:43] <obra> is it now?

[15:43] *** payload1 left
[15:43] <obra> i've gotta run

[15:43] *** payload joined
[15:43] <obra> if you want a feed added for now, just mail [email@hidden.address]
[15:45] <frettled> obra: okay, thanks.

[15:47] *** colomon left
[15:47] *** colomon joined
[15:47] <Wolfman2000> is colomon's connection alright?

[15:48] <Khisanth> for some value of ...

[15:51] <arnsholt> frettled: I think Yahoo has an app that lets you create custom filters

[15:51] <arnsholt> Yahoo Tubes, IIRC

[15:51] <frettled> arnsholt: Feedburner evidently doesn't quite do it.

[15:51] <frettled> arnsholt: wooh, the intertubes!

[15:52] <arnsholt> Ah, no. It's Yahoo pipes

[15:52] <arnsholt> http://pipes.yahoo.com/pipes/

[15:53] <jnthn> A series of pipes just doesn't have the same ring to it.

[15:53] <arnsholt> Well, what can you do? =)

[15:53] <frettled> Pipes of peace?

[15:54] <[particle]> maybe it's a suite of pipes

[15:55] *** colomon_ joined
[15:55] *** nihiliad joined
[15:55] *** colomon left
[15:55] *** colomon_ is now known as colomon

[15:55] <Wolfman2000> better now colomon?

[15:56] <frettled> arnsholt: whoa, they were about to remove the entire service in August

[15:56] *** Psyche^ joined
[15:56] *** SmokeMachine left
[15:58] *** Patterner left
[15:58] *** Psyche^ is now known as Patterner

[15:58] <PerlJam> meeting let out early

[15:58] <PerlJam> colomon++

[15:59] <Wolfman2000> phenny: tell colomon username for wordpress is wolfman2000. I don't know if he got it previously due to the evil PEER

[15:59] <phenny> Wolfman2000: I'll pass that on when colomon is around.

[15:59] <Wolfman2000> and with that, I'm out

[15:59] <PerlJam> I think the Dec 1 entry should be another post on getting and installing rakudo (preferably by someone who hasn't done it much before)

[16:00] <Wolfman2000> ...I'm not prepared to give that topic discussion.

[16:00] <Wolfman2000> We'll talk more about this when I'm done with classes for the day. Hopefully you'll be up in about 10 hours.

[16:00] *** Wolfman2000 left
[16:00] <PerlJam> That way, when read as a whole later, the reader has good information to execute the code in the later entries.

[16:02] *** nihiliad left
[16:08] *** nihiliad joined
[16:13] *** KyleHa left
[16:20] *** colomon_ joined
[16:20] *** colomon left
[16:20] *** colomon_ is now known as colomon

[16:24] *** Coke left
[16:27] *** SmokeMachine joined
[16:27] <frettled> Ye gods, this pipe tool is clunky, but it just might work.

[16:31] <frettled> This looks like it's okayish: http://pipes.yahoo.com/pipes/pipe.run?_id=c30fa6b5be32693af535b6e46c4fabd6&_render=rss

[16:32] * frettled send off a mail to webmaster + obra with that link.  :)

[16:33] *** KyleHa joined
[16:36] <frettled> arnsholt: Thanks for the tip, BTW.

[16:36] *** colomon left
[16:36] <arnsholt> You're welcome

[16:36] <arnsholt> Anything that lets me do something other than schoolwork =)

[16:41] <frettled> Oh, OH!  Muahhahahaa.

[16:47] *** colomon_ joined
[16:54] *** pmurias joined
[16:54] <pmurias> ruoso: hi

[17:03] * colomon_ is back from storytime (mostly anyway -- out in the car with the MacBook and the sleeping boy).

[17:07] <colomon_> phenny: tell Wolfman2000 For some stupid reason, I need the e-mail address you used to subscribe to wordpress, rather than your wordpress id.

[17:07] <phenny> colomon_: I'll pass that on when Wolfman2000 is around.

[17:11] *** justatheory joined
[17:16] *** riffraff left
[17:17] *** payload left
[17:17] *** cotto_w0rk is now known as cotto_work

[17:18] *** cotto_work left
[17:19] *** cotto_w0rk joined
[17:19] *** cotto_w0rk is now known as cotto_work

[17:34] *** PZt joined
[17:36] *** stephenlb joined
[17:39] <zaslon> loljnthnhazblogged! jnthn++ 'Failure()<0xb77859d4>': Failure()<0xb77844a8>

[17:40] *** Coke joined
[17:42] <zaslon> loljnthnhazblogged! jnthn++ 'Laying the role meta-foundations': http://use.perl.org/~JonathanWorthington/journal/39943?from=rss

[17:42] <colomon_> zaslon: yes, we got the idea.

[17:42] <zaslon> Sorry, I don't understand that command

[17:44] <jnthn> Is this a hint that I need to blog some more or something? :-)

[17:45] <colomon_> zaslon is trying to make it look like you blog a lot so that you can focus on ng.  ;)

[17:45] *** jferrero left
[17:49] <colomon_> rakudo: say (1, 2, 3, 4, 5, 6).max

[17:49] <p6eval> rakudo 7ce13d: 6␤

[17:49] <colomon_> rakudo: say (1, 2, 3, 4, 5, 6).max(3)

[17:49] <p6eval> rakudo 7ce13d: No applicable candidates found to dispatch to for 'max'␤in Main (file <unknown>, line <unknown>)␤

[17:49] <colomon_> pity, that would be handy

[17:50] <Coke> what does the # there signify? EOF?

[17:50] <Coke> (in 6#)

[17:51] *** fridim_ joined
[17:51] <moritz_> Newline

[17:51] <moritz_> (not a # though, but a N/L character)

[17:53] *** pmurias left
[17:54] <Coke> ah. that used to be something that looked like N/L, no?

[17:54] <TimToady> still is

[17:54] <phenny> TimToady: 00:20Z <Juerd_> tell TimToady Could you provide (old or fresh) citations for the three [citation needed]s at http://en.wikipedia.org/wiki/Perl_6?

[17:55] <Coke> ah. I presume that whatever terminal magic I setup to be able to view the non-breaking space properly has altered my view of this character. whee.

[17:56] <Tene> Coke: what's the proper view of &nbsp; ?

[17:56] <TimToady> seems to me it oughta look like a space :)

[17:56] <Coke> Tene: was trying to edit one of the docs in pugs, and the nbsp there was garbled.

[17:57] <Coke> and after (I think it was mortiz++) helped me, they now do, in fact, look like spaces.

[17:57] <TimToady> perhaps it's a font issue

[17:57] <Tene> ah

[17:57] <moritz_> Juerd_: just put up a page on perl6.org/facts/ that contains the facts that wikipedia wants citatations for :-)

[17:58] <Coke> TimToady: this is exactly why I feared the unicode aspects of perl6. =-)

[17:59] * Coke idly wonders if there is an acid test for unicode.

[18:00] *** payload joined
[18:03] *** envi^home left
[18:05] <Coke> (not that we shouldn't drag ourselves into the future, mind you.)

[18:07] *** alester joined
[18:07] *** alester left
[18:15] <Juerd_> moritz_: I'm not qualified to determine facts :)

[18:20] * colomon_ finally has a build of $work libraries!  (Do they work?  Who knows!)

[18:28] *** hercynium joined
[18:33] <colomon_> Three work, the fourth bombs out.  Guess it could be worse...

[18:42] *** dakkar joined
[18:43] *** REPLeffect_ joined
[18:43] *** quantumEd joined
[18:44] *** cdarroch joined
[18:52] *** KyleHa left
[18:57] <colomon_> PerlJam: ping?

[18:59] <diakopter> ng: say

[18:59] <p6eval> ng f2ba53: ␤

[19:00] <diakopter> ng: .say

[19:00] <p6eval> ng f2ba53: Mu()␤

[19:01] <colomon_> no way!

[19:01] <diakopter> mu way

[19:02] <colomon_> MOO!

[19:08] *** rfordinal joined
[19:15] *** IllvilJa joined
[19:20] *** Nex6 joined
[19:21] *** nihiliad left
[19:22] *** mlawren joined
[19:22] *** mlawren is now known as markl1

[19:23] <markl1> rakudo: say <>.WHAT

[19:23] <p6eval> rakudo 7ce13d: List()␤

[19:24] *** markl1 left
[19:24] *** nihiliad joined
[19:25] *** KyleHa joined
[19:25] <colomon_> rakudo: say Nil.WHAT

[19:25] <p6eval> rakudo 7ce13d: Nil()␤

[19:30] *** hercynium left
[19:31] <diakopter> ng: ::say.WHAT

[19:31] <p6eval> ng f2ba53: Null PMC access in find_method('WHAT')␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[19:31] <diakopter> ng: say::say.WHAT

[19:31] <p6eval> ng f2ba53: Null PMC access in invoke()␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[19:33] <diakopter> ng: say &::

[19:33] <p6eval> ng f2ba53: Confused at line 1, near "say &::"␤current instr.: 'perl6;HLL;Grammar;panic' pc 519 (src/stage0/HLL-s0.pir:336)␤

[19:33] <diakopter> std: say &::

[19:33] <p6eval> std 29219: ok 00:02 126m␤

[19:34] <mberends> cool SVG demo (posted by warewolf++ in #perl@irc.perl.org): http://people.mozilla.com/~vladimir/demos/photos.svg

[19:35] <moritz_> nice

[19:37] <mberends> there was a 32" hardware one of those at last weekend's computer fair, multi touch sensitive, called "Microsoft Surface"

[19:37] *** clintongormley left
[19:38] <mberends> built horizontally into a table

[19:40] <mberends> the JavaScript in the source of the above url looks very nice. let's steal it :)

[19:41] *** rgrau` joined
[19:42] *** TimToady sets mode: +v iblechbot

[19:42] *** TimToady sets mode: +vvvv ilbot2 ilogger2 IRSeekBot lambdabot

[19:42] *** TimToady sets mode: +vvv lisppaste3 p6eval phenny

[19:42] *** TimToady sets mode: +vvv pointme pugs_svn zaslon

[19:46] *** rfordinal left
[20:00] <IllvilJa> dukeleto: would you be ok with adding into Math::MatrixReal something that corresponds to Math::GSL::Vector::normalize() ?

[20:01] <IllvilJa> That is, if I manage to create a patch that implement it, would you accept it (given the code itself is of sufficient quality)?

[20:02] <IllvilJa> (What I'm talking about is simply to implement a method in Math::MatrixReal that allows for conveniently computing a unit vector for a vector represented as a column vector matrix)

[20:07] <dukeleto> IllvilJa: hello! yes.

[20:26] *** perigrin joined
[20:28] *** ShaneC joined
[20:29] *** wknight8111 joined
[20:32] *** mariano__ left
[20:37] *** payload left
[20:38] *** mariano__ joined
[20:45] *** Exodist joined
[21:00] *** cotto_work left
[21:01] *** cotto_work joined
[21:03] *** Coke left
[21:11] *** cognominal left
[21:12] *** payload joined
[21:17] *** pmurias joined
[21:19] *** colomon joined
[21:19] *** colomon_ left
[21:25] *** KyleHa left
[21:27] *** ruoso left
[21:29] *** colomon left
[21:31] *** an0n1m8t3r joined
[21:33] *** an0n1m8t3r left
[21:41] *** hakmn joined
[21:42] <hakmn> i am tryin to execute shell-script using .cgi ...but have a problem in some phases

[21:42] <hakmn> here's .cgi http://pastebin.com/d7a1aec6f    & the shell script i' like to execute  http://fpaste.org/VUx5/

[21:43] <hakmn> i am able to echo but not execute adsl-stop command 

[21:44] <mberends> hakmn, are you sure you're in the right channel? 

[21:45] <mberends> here is for developing Perl 6, and is not doing CGI all that much

[21:45] <hakmn> ok thankyou

[21:45] *** hakmn left
[21:45] <mberends> ...good luck

[21:46] <Cyrus> Wacky.

[21:46] <BinGOs> they are getting the desired reaction on #perl at the moment

[21:47] <BinGOs> But if perl6 isn't for CGI what good is it!?

[21:47] <moritz_> BinGOs: writing books about it, and becoming rich

[21:47] <moritz_> or so I have been told

[21:48] <BinGOs> Aha. There is a niche for your profiteering then

[21:48] <BinGOs> Perl6 CGI Cookbook

[21:51] *** colomon_ joined
[21:53] <frettled> Perl 6 is for teh make u rich, mon!

[21:53] <frettled> Just wire me some money at … ;)

[21:54] <mberends> frettled: but wotcha gotta do 2 get rich mon?

[21:54] <frettled> mberends: perl it!

[21:54] <mberends> frettled: aaahh

[21:54] *** frettled sets mode: +o mberends

[21:55] * mberends 's op

[21:55] <jnthn> whoz?

[21:55] <sjohnson> BinGOs: all the non CGI stuff is pretty cool

[21:56] <mberends> all da perl haxxorz op

[21:59] <sjohnson> <-- 

[21:59] <sjohnson> perl hacker in training

[21:59] <frettled> phit

[22:00] *** masak joined
[22:01] <masak> did somebody say 'haxxorz'? :)

[22:02] <mberends> did that trigger a bot on your computer?

[22:02] <moritz_> masakbot!

[22:02] *** frettled sets mode: +o masak

[22:02] <frettled> masakbotwithkanelbulle

[22:02] <masak> mmm, op.

[22:03] <sjohnson> trigged his hax0r-like alter-ego

[22:03] <masak> frettled is being adorably native again.

[22:05] <sjohnson> unlike IE's javascript parser

[22:05] <masak> :D

[22:05] <frettled> I don't think «adorable» is something you'd want to use without a negation then, no.

[22:06] <frettled> argh.  stupidfsdfasghawebserver.  *idle

[22:07] <masak> now I don't really know what frettled is being. :)

[22:07] <mberends> frestrated

[22:07] <masak> 哈哈

[22:11] <frettled> masak: I love those little guys with the Chinese swords.

[22:12] *** synth joined
[22:12] *** arthur-_ left
[22:13] <masak> frettled: are you under the centuries-old western impression that every hanzi is also a picture? :)

[22:14] *** nickgibbon left
[22:15] <masak> frettled: this kind of hanzi falls into the category 'sound-meaning compound', with the sound being contributed by what you denote 'those little guys' and the meaning by 'the Chinese swords'.

[22:15] <sjohnson> (;'-`)

[22:15] <frettled> masak: I thought you used them specifically because they bore that resemblance.

[22:15] <quantumEd> (;`-')

[22:15] <masak> frettled: no, I use them because I think they are much more sensible than 'LOL' as a marker of laughter.

[22:16] *** SmokeMachine left
[22:16] <frettled> masak: aha

[22:16] <jnthn> frettled: Yeah, I coulda sword he did too. ;-)

[22:16] <masak> here we go... :)

[22:16] <frettled> :D

[22:16] <jnthn> \o/ I finished my .Net code review work.

[22:16] <masak> jnthn++

[22:16] <jnthn> @rakudo-distractions.pop

[22:16] <lambdabot> Unknown command, try @list

[22:17] <masak> lambdabot is a rakudo distraction. :P

[22:17] <colomon_> @rakudo-distractions now emtpy....

[22:17] <lambdabot> Unknown command, try @list

[22:17] <frettled> @lambdabot-distractions

[22:17] <lambdabot> Unknown command, try @list

[22:17] <masak> @unknown-command-try-@list

[22:17] <lambdabot> Unknown command, try @list

[22:17] <jnthn> say @reason-we-hate-lambdabot.elems # Inf

[22:18] <masak> works in ng? :)

[22:18] <frettled> heh

[22:18] <jnthn>  ng: say @reason-we-hate-lambdabot.elems

[22:18] <p6eval> ng f2ba53: Symbol '@reason-we-hate-lambdabot' not predeclared in <anonymous>␤current instr.: 'perl6;PCT;HLLCompiler;panic' pc 137 (src/PCT/HLLCompiler.pir:101)␤

[22:18] <jnthn> ng f2ba53: Inf

[22:18] <jnthn> aww!

[22:19] <frettled> That was an awesomely useful error message!

[22:19] <jnthn> "in <anonymous>" was probably unrequired noise.

[22:19] *** mariano__ left
[22:20] <jnthn> But yes, it's a lot awesomer than many of our errors.

[22:21] <frettled> It's unrequired noise in that simple statement, but it might be helpful for more complex statements.

[22:21] <jnthn> Yeah, true.

[22:21] <frettled> If it's possible to make the verbosity of error messages depend on the size of the context, then that would be awesomest.

[22:21] <jnthn> I mean, I'd want it if it actually had some useful location into. :-)

[22:22] <frettled> m

[22:28] *** IllvilJa left
[22:33] *** jferrero joined
[22:33] *** kkrev joined
[22:34] <masak> last day of November blogging, and I have no idea what to do for the Perl 6 part.

[22:34] <kkrev> where does the elf source live?

[22:34] *** hercynium joined
[22:34] *** iblechbot left
[22:34] <moritz_> in the pugs repo

[22:34] <masak> misc/elf

[22:35] * moritz_ was looking in v6/ first

[22:35] <mberends> masak, one question for you, are you still in a strange TDD loop on crack?

[22:35] <masak> I was looking through the Elf source the other day.

[22:35] <masak> mberends: yes, but I haven't pushed any of the code yet.

[22:35] <masak> mberends: much of GGE was developed with that TDD framework.

[22:36] <masak> no wait; all of it, in fact.

[22:36] <mberends> maybe blog about your progress there

[22:36] <masak> hm, yes.

[22:36] <masak> time is running out for actually _doing_ anything today anyway.

[22:36] <moritz_> giat - the glacial, interactive test loop

[22:37] <moritz_> rakudo: say "fiat".flip.succ.flip

[22:37] <p6eval> rakudo 7ce13d: giat␤

[22:37] <masak> 哈哈

[22:37] <colomon_> ng: say "fiat".flip.succ.flip

[22:37] <p6eval> ng f2ba53: giat␤

[22:37] <masak> ng" say 'succ'.flip.succ.flip

[22:37] <masak> ng: say 'succ'.flip.succ.flip

[22:37] <p6eval> ng f2ba53: tucc␤

[22:38] <moritz_> tucc - is that the Tux C Compiler?

[22:38] <masak> must be.

[22:38] <masak> with penguins doing all the JITting.

[22:39] <moritz_> better than what the bird does today :-)

[22:39] <mberends> eating raw fish instead of memory

[22:40] *** kkrev left
[22:42] <frettled> Will we get to see lolmasakhazblogged before or after midnight?

[22:42] <masak> only zaslon will tell.

[22:42] <moritz_> the answer is "yes", obviously

[22:42] <masak> or Bool::True.

[22:42] <mberends> FSVO midnight ;)

[22:44] *** pnate joined
[22:50] <moritz_> masak: might I ask to you to write one adevent calendar entry about fmt?

[22:50] <masak> moritz_: good idea!

[22:50] <masak> I will.

[22:52] *** IllvilJa joined
[22:53] * moritz_ adds another piece to his ever-growing list of Perl 6 TODO items: a Runge-Kutta module

[22:55] *** wknight8111 left
[22:55] <moritz_> (for the non-math geeks: integrating linear differential equations)

[22:55] *** rlarson`a joined
[22:55] <jnthn> moritz_: I have a feeling I did that...a looong time ago when I was young.

[22:56] <jnthn> (And not as a Perl 6 module ;-))

[22:56] <masak> awww.

[22:57] *** pnate2 left
[22:57] <zaslon> lolmasakhazblogged! masak++ 'November 30 2009 -- gobsmacked but still in the loop': http://use.perl.org/~masak/journal/39966?from=rss

[22:57] <masak> yay! I don't need to blog every day anymore! :)

[22:58] <jnthn> masak: You made it!

[22:58] <jnthn> masak++

[22:59] <masak> jnthn: though I missed November 20. :)

[23:00] <masak> no wait, November 19.

[23:00] <masak> mostly due to battery charger fail.

[23:00] <jnthn> masak: bouncing *off

[23:00] <jnthn> (not of)

[23:00] <jnthn> Did you mean frickin' ?

[23:00] <masak> oh. fixing.

[23:00] <jnthn> Not frackin' ? :-)

[23:01] <jnthn> I ain't heard the latter before ;-)

[23:01] <masak> it's from Battlestar Galactica. :)

[23:02] <moritz_> suddenly December

[23:02] <jnthn> omgdecember

[23:02] <jnthn> enonovember

[23:02] <moritz_> and I've got a thesis to finish, christmas gifts to buy, Perl 6 to finish... all before christams

[23:02] <jnthn> moritz_: Yeah but which one? ;-)

[23:03] <jnthn> .oO( But professor, you didn't specify *this* Christmas for the thesis! )

[23:03] <moritz_> akshually the thesis is due Dec. 14 2009

[23:04] <jnthn> ooh...that's soonish.

[23:07] <jnthn> masak++ # nice post

[23:07] <jnthn> lilstevey++ # also nice post

[23:07] <masak> yes, lilstevey++ # http://use.perl.org/~lilstevey/journal/39965

[23:07] <jnthn> .^add_method is *so* the way, but it's nyi in master. :-(

[23:08] <masak> works in ng? :)

[23:08] <jnthn> Because we were building classes at the "low level"

[23:08] <jnthn> masak: Yes. *Every* method you write is added by a call to add_method on the metaclass in ng. :-)

[23:08] *** pmurias left
[23:08] <masak> every so often, I'm picking up the "I'm not worthy to talk on #perl6" meme in tweets and blog posts.

[23:08] <jnthn> masak: It's one of the essential pieces for custom metaclasses, y'know. :-)

[23:09] <masak> I just want to say to that: _I'm_ not worthy to talk on #perl6 -- and I talk all the time! :D

[23:09] <jnthn> masak: Yes, I saw that. I find it a bit, well...it's not quite the environment we want.

[23:09] <masak> jnthn: you think we are being to egg-headed sometimes?

[23:09] <jnthn> masak: There *is* a lot going on here, which I guess can be intimidating.

[23:09] <masak> maybe we should rap more.

[23:10] <jnthn> masak: I think to a great degree it's inherent in what we're doing.

[23:10] <jnthn> masak: Sometimes there just have to be deep discussions on hard design and/or implementation issues.

[23:11] <masak> "y0 momma's metamodel is so fat, it needs another metamodel just to bootstrap!"

[23:11] <jnthn> :-D

[23:11] <jnthn> lol

[23:12] <masak> "Earlier today, on the borderline of yesterday, masak provided the following example during our IRC conversation, whilst taking part in other discussions. I'm slightly in awe of the multitasking" # you should have seen audreyt++ :)

[23:12] <frettled> jnthn: and it's entertaining and interesting to listen in when I can keep track.  When I can't give track, I have no cause for complaint.

[23:12] <jnthn> masak: I'm not sure that the need to speak in rhyme, would give the channel n00bs an easier time.

[23:13] *** pnate left
[23:13] <masak> jnthn: good point.

[23:13] <jnthn> .oO( And I don't use n00b to be derogatory, brothers realize I came from a meme factory... )

[23:14] <masak> :)

[23:14] <masak> now that I think about it, I find the high number of lurkers in here very comforting.

[23:15] <masak> it means that even though much of the rest of the world has written off Perl 6, there is still a fair amount of interest from some people.

[23:17] <jnthn> Yes, that's true.

[23:17] <frettled> If people have written off Perl 6, is that to reduce their Perl 5 taxes?

[23:19] <masak> .oO( Perl tax evasion )

[23:19] <mberends> masak++: nice that tote is keeping you going. Friendlier than the whip that pmichaud++ breaks out when there's no coding being done ;)

[23:19] <masak> we'll know Perl 6 is taken seriously when you can no longer write it off in your tax form.

[23:20] <masak> mberends: yes, much friendlier. and less imaginary, too. :)

[23:20] <jnthn> ...it's imaginary?

[23:21] <jnthn> .oO( $whip\i )

[23:21] * jnthn hopes to get a bunch of role bits sorted out tomorrow.

[23:22] <jnthn> I think we're close to having a lot of the meta-model back in place, and properly this time. :-)

[23:22] <jnthn> Provided I can make it work, infix:<does> and infix:<but> are now pure Perl 6. :-)

[23:26] *** Nex6 left
[23:27] <masak> cool!

[23:36] <perigrin> yay

[23:36] <sjohnson> y0

[23:44] *** ihrd joined
[23:57] *** ihrd left
[23:58] <diakopter> ng: say do { };

[23:58] <p6eval> ng f2ba53: Null PMC access in type()␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[23:58] *** meppl left
