[00:00] *** colomon joined
[00:06] <zaslon> lolperl6adventhazblogged! perl6advent++ 'Day 13: Junctions': http://perl6advent.wordpress.com/2009/12/13/day-13-junctions/

[00:17] *** pmurias left
[00:19] <colomon> \o/

[00:20] *** IllvilJa joined
[00:26] *** zaslon left
[00:26] *** mubot left
[00:26] *** pointme left
[00:26] *** zaslon joined
[00:26] *** pointme joined
[00:26] *** mubot joined
[00:27] * carlin should probably set up a cron that does a killall perl6 and restarts the bots every so many hours ...

[00:28] *** Alias joined
[00:28] *** Alias_ left
[00:30] *** TwhK joined
[00:31] *** meppl joined
[00:33] *** PacoLinux left
[00:33] *** PacoLinux joined
[00:40] *** hanekom__ left
[00:42] *** dreadpir` left
[00:43] *** TwhK left
[00:46] *** Limbic_Region joined
[01:06] *** Limbic_Region left
[01:13] *** Alias_ joined
[01:13] *** Alias left
[01:25] *** JimmyZ joined
[01:40] *** Baggio_ joined
[01:47] *** Alias joined
[01:47] *** Alias_ left
[01:51] *** jferrero left
[01:59] *** markmont left
[02:02] *** jferrero joined
[02:23] *** envi^home joined
[02:32] *** TiMBuS joined
[02:33] *** beggars joined
[02:44] *** Alias_ joined
[02:44] *** Alias left
[02:57] *** Espressox joined
[03:16] <colomon> rakudo: say (2.1 ... { * + 1.4 / 21 }, 3.5).perl

[03:16] <p6eval> rakudo 7ef386: Multiple Dispatch: No suitable candidate found for 'cmp', with signature 'PP->I'␤in Main (file <unknown>, line <unknown>)␤

[03:17] <colomon> rakudo: say (2.1, 2.2, 2.3 ... 3.5).perl

[03:17] <p6eval> rakudo 7ef386: Multiple Dispatch: No suitable candidate found for 'cmp', with signature 'PP->I'␤in Main (file <unknown>, line <unknown>)␤

[03:24] <colomon> rakudo: say ('a', 'b', 'c' ... 'z').perl

[03:24] <p6eval> rakudo 7ef386: Multiple Dispatch: No suitable candidate found for 'cmp', with signature 'PP->I'␤in Main (file <unknown>, line <unknown>)␤

[03:24] *** gfx joined
[03:29] *** Espressox left
[03:32] <diakopter> std: .......()

[03:32] <p6eval> std 29337: ok 00:01 104m␤

[03:32] *** JimmyZ left
[03:33] <diakopter> std: ...,...,.()

[03:33] <p6eval> std 29337: ok 00:01 105m␤

[03:34] *** Baggio_ left
[03:35] <diakopter> std: \ $/|()|1

[03:35] <p6eval> std 29337: ok 00:01 106m␤

[03:36] <diakopter> std: $/

[03:36] <p6eval> std 29337: ok 00:01 105m␤

[03:37] <diakopter> rakudo: say $/.WHAT

[03:37] <p6eval> rakudo 7ef386: Failure()␤

[03:46] *** araujo left
[03:47] <diakopter> std: 00

[03:48] <p6eval> std 29337: Potential difficulties:␤  Leading 0 does not indicate octal in Perl 6 at /tmp/Rh74TRcYVI line 1:␤------> 00⏏<EOL>␤ok 00:01 104m␤

[03:48] <diakopter> std: 0_0

[03:48] <p6eval> std 29337: ok 00:01 104m␤

[03:48] *** thowe joined
[03:48] <diakopter> std: O_O

[03:48] <p6eval> std 29337: Undeclared name:␤     'O_O' used at line 1␤ok 00:01 104m␤

[03:48] <diakopter> std: o_O

[03:48] *** dbrock joined
[03:48] <p6eval> std 29337: Undeclared routine:␤  'o_O' used at line 1␤ok 00:02 104m␤

[03:49] <diakopter> Undeclared name vs Undeclared routine?

[03:50] *** jferrero left
[03:57] <diakopter> rakudo: say "{"~"}" # :)

[03:57] <p6eval> rakudo 7ef386: ~␤

[04:02] *** araujo joined
[04:24] *** meppl left
[04:28] *** justatheory left
[04:31] <carlin> std: foobar

[04:32] <p6eval> std 29337: Undeclared routine:␤  'foobar' used at line 1␤ok 00:01 104m␤

[04:32] <carlin> std: FOOBAR

[04:32] <p6eval> std 29337: Undeclared name:␤     'FOOBAR' used at line 1␤ok 00:01 104m␤

[04:32] *** JimmyZ joined
[04:33] <carlin> std: sub FOOBAR {}; FOOBAR

[04:33] <p6eval> std 29337: ok 00:03 104m␤

[04:33] <JimmyZ> ng: gather { take }

[04:33] <p6eval> ng 0307c2: too few positional arguments: 0 passed, 1 (or more) expected␤current instr.: '&take' pc 14108 (src/builtins/Junction.pir:299)␤

[04:33] <JimmyZ> ng: take

[04:33] <p6eval> ng 0307c2: too few positional arguments: 0 passed, 1 (or more) expected␤current instr.: '&take' pc 14108 (src/builtins/Junction.pir:299)␤

[04:33] <JimmyZ> ng: take()

[04:33] <p6eval> ng 0307c2: too few positional arguments: 0 passed, 1 (or more) expected␤current instr.: '&take' pc 14108 (src/builtins/Junction.pir:299)␤

[04:33] <JimmyZ> ng: gather

[04:33] <p6eval> ng 0307c2: Could not find non-existent sub &gather␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[04:34] <JimmyZ> &take

[04:34] <JimmyZ> ng: &take

[04:34] <p6eval> ng 0307c2: Symbol '&take' not predeclared in <anonymous>␤current instr.: 'perl6;PCT;HLLCompiler;panic' pc 137 (src/PCT/HLLCompiler.pir:101)␤

[04:34] <JimmyZ> ng: take $_

[04:34] <p6eval> ng 0307c2: take without gather␤

[04:35] <TimToady> carlin: as the comment in STD.pm says: # just a guess, but good enough to improve error reporting

[04:35] <TimToady> std: gather { take }

[04:35] <p6eval> std 29337: ok 00:01 104m␤

[04:36] <TimToady> probably worth leaving in, since it does return a Nil

[04:36] <TimToady> and that may be all you need to return

[04:36] <JimmyZ> ng: gather { take }

[04:36] <p6eval> ng 0307c2: too few positional arguments: 0 passed, 1 (or more) expected␤current instr.: '&take' pc 14108 (src/builtins/Junction.pir:299)␤

[04:36] <JimmyZ> ng: gather { take $_}

[04:36] <p6eval> ng 0307c2:  ( no output )

[04:37] <JimmyZ> sometime I want take $_ by defalut :)

[04:37] <TimToady> nothing ever takes $_ by default in Perl 6

[04:37] <TimToady> except maybe /foo/

[04:38] <TimToady> and a few things that set $_ by default

[04:38] <JimmyZ> ng: $_ =2; print

[04:38] <p6eval> ng 0307c2:  ( no output )

[04:38] <TimToady> ng: say gather { .take }

[04:38] <p6eval> ng 0307c2: Method 'take' not found for invocant of class ''␤current instr.: '_block22' pc 101 (EVAL_1:46)␤

[04:38] <TimToady> std: $_ =2; print

[04:38] <p6eval> std 29337: Potential difficulties:␤  Unsupported use of bare 'print'; in Perl 6 please use .print if you want to print $_, or use an explicit argument at /tmp/bKxU3IAOOn line 1:␤------> $_ =2; print⏏<EOL>␤ok 00:01 106m␤

[04:39] <carlin> TimToady: ah, I didn't look at the source that was just a guess on what was happening from diakopter's example

[04:39] <JimmyZ> oh, $_ is not used by default as well as perl5?

[04:39] <TimToady> never for function calls

[04:40] <JimmyZ> what does $_ do?

[04:40] <TimToady> default for given/when or for/when

[04:40] <JimmyZ> any other?

[04:40] <JimmyZ> any others?

[04:40] <TimToady> any .foo means $_.foo

[04:41] <TimToady> but the . is required

[04:41] <TimToady> we are trying to get rid of all the lists that people have to memorize

[04:41] <TimToady> you no longer have to remember which functions default to $_

[04:42] <TimToady> just like you don't have to remember which blocks need ; at the end of a line

[04:42] <JimmyZ> oh, the best of syntax in perl5 is not in perl6 now...

[04:43] <JimmyZ> ng: $_ = take

[04:43] <p6eval> ng 0307c2: too few positional arguments: 0 passed, 1 (or more) expected␤current instr.: '&take' pc 14108 (src/builtins/Junction.pir:299)␤

[04:44] <TimToady> ng apparently requires an argument on take

[04:44] <JimmyZ> ng: sub foo {}; $_ = foo; $_()

[04:44] <p6eval> ng 0307c2: Null PMC access in can()␤current instr.: 'perl6;Mu;!STORE' pc 2047 (src/builtins/Mu.pir:387)␤

[04:44] <JimmyZ> ng: sub foo {}; $_ = foo; 

[04:44] <p6eval> ng 0307c2: Null PMC access in can()␤current instr.: 'perl6;Mu;!STORE' pc 2047 (src/builtins/Mu.pir:387)␤

[04:44] <JimmyZ> rakudo: sub foo {}; $_ = foo; 

[04:44] <p6eval> rakudo 7ef386:  ( no output )

[04:44] <JimmyZ> rakudo: sub foo {}; $_ = foo(); 

[04:44] <p6eval> rakudo 7ef386:  ( no output )

[04:45] <TimToady> missing a & on &foo

[04:45] <JimmyZ> rakudo: $_ = take

[04:45] <p6eval> rakudo 7ef386: too few positional arguments: 0 passed, 1 (or more) expected␤in Main (file <unknown>, line <unknown>)␤

[04:45] <TimToady> ng: sub foo {}; $_ = &foo; $_();

[04:45] <p6eval> ng 0307c2: sh: ./perl6: No such file or directory␤

[04:45] <TimToady> recompiling...

[04:46] <JimmyZ> rankudo: sub foo { say 'bar2000' }; $_ = foo; $_();

[04:46] <JimmyZ> rakudo: sub foo { say 'bar2000' }; $_ = foo; $_();

[04:46] <p6eval> rakudo 7ef386: bar2000␤invoke() not implemented in class 'Boolean'␤in Main (file <unknown>, line <unknown>)␤

[04:46] <TimToady> & !!!!

[04:46] <JimmyZ> TimToady: I see

[04:46] <TimToady> rakudo: sub foo { say 'bar2000' }; $_ = &foo; $_()

[04:46] <JimmyZ> rakudo: sub foo { -> {say 'bar2000'}; }; $_ = foo; $_();

[04:46] <p6eval> rakudo 7ef386: bar2000␤

[04:47] <JimmyZ> rakudo: sub foo { -> {say $_ ~ 'bar2000'}; }; $_ = foo; $_('foo');

[04:47] <p6eval> rakudo 7ef386: Too many positional parameters passed; got 1 but expected 0␤in Main (file src/gen_setting.pm, line 324)␤

[04:47] <JimmyZ> rakudo: sub foo { $_ -> {say $_ ~ 'bar2000'}; }; $_ = foo; $_('foo');

[04:47] <p6eval> rakudo 7ef386: Confused at line 2, near "-> {say $_"␤in Main (file <unknown>, line <unknown>)␤

[04:48] <JimmyZ> rakudo: sub foo { -> {say 'bar2000'}; }; $_ = foo; $_();

[04:48] <p6eval> rakudo 7ef386: bar2000␤

[04:48] <JimmyZ> rakudo: sub foo { return $_ -> {say $_ ~ 'bar2000'}; }; $_ = foo; $_('foo');

[04:48] <p6eval> rakudo 7ef386: Confused at line 2, near "-> {say $_"␤in Main (file <unknown>, line <unknown>)␤

[04:49] <TimToady> -> is a term, so can't follow $_

[04:49] <JimmyZ> rakudo: sub foo { return $a -> {say $^b ~ 'bar2000'}; }; $d_ = foo; $_('foo');

[04:49] <p6eval> rakudo 7ef386: Confused at line 2, near "-> {say $^"␤in Main (file <unknown>, line <unknown>)␤

[04:49] <TimToady> can't follow $a either

[04:49] <TimToady> std: sub foo { return $a -> {say $^b ~ 'bar2000'}; }; $d_ = foo; $_('foo');

[04:50] <p6eval> std 29337: ===SORRY!===␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?) at /tmp/nwmDUFtiMF line 1:␤------> sub foo { return $a ⏏-> {say $^b ~ 'bar2000'}; }; $d_ = foo; ␤    expecting any of:␤  bracketed infix␤ 

[04:50] <p6eval> ..infi…

[04:50] <diakopter> maybe /foo/ needs to be ./foo/ for more consistency

[04:50] <TimToady> nah, it's not like the list of / characters is very long :)

[04:50] <JimmyZ> I forgot how to pass args. 

[04:51] <TimToady> std: sub foo { return $a -> {say $^b ~ 'bar2000'}; }; $d_ = foo; $_('foo');

[04:51] <p6eval> std 29337: ===SORRY!===␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?) at /tmp/KKGtWBGkvd line 1:␤------> sub foo { return $a ⏏-> {say $^b ~ 'bar2000'}; }; $d_ = foo; ␤    expecting any of:␤  bracketed infix␤ 

[04:51] <p6eval> ..infi…

[04:51] <TimToady> std: sub foo { return -> {say $^b ~ 'bar2000'}; }; $d_ = foo; $_('foo');

[04:51] <p6eval> std 29337: ===SORRY!===␤Placeholder variable $^b cannot override existing signature ( ) at /tmp/ud5JwbQtcj line 1:␤------> sub foo { return -> {say $^b⏏ ~ 'bar2000'}; }; $d_ = foo; $_('foo');␤    expecting any of:␤     POST␤   postfix␤ 

[04:51] <p6eval> ..postfix_prefix_meta_operator␤       sta…

[04:51] <TimToady> std: sub foo { return {say $^b ~ 'bar2000'}($^a); }; $d_ = foo; $_('foo');

[04:51] <p6eval> std 29337: Potential difficulties:␤  Variable $d_ is not predeclared at /tmp/4JEXHH1iJH line 1:␤------> eturn {say $^b ~ 'bar2000'}($^a); }; $d_⏏ = foo; $_('foo');␤ok 00:01 108m␤

[04:51] <TimToady> std: sub foo { return {say $^b ~ 'bar2000'}($^a); }; $_ = foo; $_('foo');

[04:52] <p6eval> std 29337: ok 00:01 106m␤

[04:52] <diakopter> std: sub foo { return -> sub {say $^b ~ 'bar2000'}; }; $d_ = foo; $_('foo');

[04:52] <p6eval> std 29337: ===SORRY!===␤Invalid typename sub at /tmp/xxwGrhZ5NU line 1:␤------> sub foo { return -> sub⏏ {say $^b ~ 'bar2000'}; }; $d_ = foo; $_␤FAILED 00:01 107m␤

[04:52] <TimToady> rakudo: sub foo { return {say $^b ~ 'bar2000'}($^a); }; $_ = foo; $_('foo');

[04:52] <p6eval> rakudo 7ef386: Not enough positional parameters passed; got 0 but expected 1␤in Main (file src/gen_setting.pm, line 324)␤

[04:52] <TimToady> rakudo: sub foo ($a) { return {say $^b ~ 'bar2000'}($a); }; $_ = foo; $_('foo');

[04:52] <p6eval> rakudo 7ef386: Not enough positional parameters passed; got 0 but expected 1␤in Main (file src/gen_setting.pm, line 324)␤

[04:52] <diakopter> rakudo: sub foo { return {say $^b ~ 'bar2000'}($^a); }; $_ = foo(&foo); $_('foo');

[04:52] <JimmyZ> rakudo: sub foo { return -> $_ {say $^b ~ 'bar2000'}; }; $d_ = foo; $_('foo');

[04:52] <p6eval> rakudo 7ef386: foobar2000␤invoke() not implemented in class 'Boolean'␤in Main (file <unknown>, line <unknown>)␤

[04:52] <p6eval> rakudo 7ef386: Cannot use placeholder var in block with signature. at line 2, near " ~ 'bar200"␤in Main (file src/gen_setting.pm, line 2127)␤

[04:53] <JimmyZ> rakudo: sub foo { return -> $_ {say $_ ~ 'bar2000'}; }; $d_ = foo; $_('foo');

[04:53] <p6eval> rakudo 7ef386: Symbol '$d_' not predeclared in <anonymous> (/tmp/GZTWkqXiKX:2)␤in Main (file <unknown>, line <unknown>)␤

[04:53] <TimToady> rakudo: sub foo ($a) { return -> $b {say $b ~ 'bar2000'}($a); }; $_ = foo; $_('foo');

[04:53] <p6eval> rakudo 7ef386: Not enough positional parameters passed; got 0 but expected 1␤in Main (file src/gen_setting.pm, line 324)␤

[04:53] <JimmyZ> rakudo: sub foo { -> $_ {say $_ ~ 'bar2000'}; }; $_ = foo; $_('foo');

[04:53] <p6eval> rakudo 7ef386: foobar2000␤

[04:53] <diakopter> TimToady: it wants an arg on foo;

[04:53] <TimToady> rakudo: sub foo { return -> $b {say $b ~ 'bar2000'} }; $_ = foo; $_('foo');

[04:53] <p6eval> rakudo 7ef386: foobar2000␤

[04:54] <JimmyZ> rakudo: sub foo { -> $_ {say $^_ ~ 'bar2000'}; }; $_ = foo; $_('foo');

[04:54] <p6eval> rakudo 7ef386: Cannot use placeholder var in block with signature. at line 2, near " ~ 'bar200"␤in Main (file src/gen_setting.pm, line 2127)␤

[04:54] <TimToady> rakudo: sub foo ($b) {say $b ~ 'bar2000'}; $_ = &foo; $_('foo');

[04:54] <p6eval> rakudo 7ef386: foobar2000␤

[04:54] <diakopter> oh, I see what you were doing

[04:54] *** Alias joined
[04:54] *** Alias_ left
[04:54] <JimmyZ> how use $^ in a block? I forgot again 

[04:55] <TimToady> use it instead of a signature

[04:55] <TimToady> any -> counts as a signature, even if empty

[04:55] <TimToady> rakudo: $_ = {say $^b ~ 'bar2000'}; $_('foo');

[04:55] <p6eval> rakudo 7ef386: foobar2000␤

[04:57] <JimmyZ> rakudo: $_ = {say $^b ~ $^c x 2 ~ 'bar2000'}; $_('f', 'o');

[04:57] <p6eval> rakudo 7ef386: foobar2000␤

[04:57] <JimmyZ> rakudo: $_ = {say $^b ~ $^c x 10 ~ 'bar2000'}; $_('f', 'o');

[04:57] <p6eval> rakudo 7ef386: foooooooooobar2000␤

[04:58] <JimmyZ> rakudo: $_ = {say $^b ~ $^c x 10 ~ $^b ~ 'bar2000'}; $_('f', 'o');

[04:58] <p6eval> rakudo 7ef386: foooooooooofbar2000␤

[04:58] <TimToady> akudo: $_ = {say $^b ~ $^c x 10 ~ $^b ~ 'bar2000'}; .('f', 'o')

[04:59] <diakopter> rakudo: sub foo {say $^b ~ 'bar2000'}; foo(&foo); # TimToady :)

[04:59] <TimToady> rakudo: $_ = {say $^b ~ $^c x 10 ~ $^b ~ 'bar2000'}; .('f', 'o')

[04:59] <p6eval> rakudo 7ef386: foobar2000␤

[04:59] <p6eval> rakudo 7ef386: foooooooooofbar2000␤

[05:00] <TimToady> rakudo: say blech {}; say &blech

[05:00] <p6eval> rakudo 7ef386:  ( no output )

[05:00] <TimToady> rakudo: sub blech {}; say &blech

[05:00] <p6eval> rakudo 7ef386: blech␤

[05:00] <diakopter> :)

[05:00] <diakopter> wait, what happened in the 'say blech {}

[05:01] <JimmyZ> rakudo: sub foo {say $^b ~ 'bar2000'}; foo(&foo);

[05:01] <p6eval> rakudo 7ef386: foobar2000␤

[05:01] <JimmyZ> rakudo: sub foooo {say $^b ~ 'bar2000'}; foooo(&foooo);

[05:01] <p6eval> rakudo 7ef386: foooobar2000␤

[05:02] <diakopter> rakudo: sub foo { }; foo(:&foo)

[05:02] <p6eval> rakudo 7ef386: Symbol '&foo' not predeclared in <anonymous>␤in Main (file <unknown>, line <unknown>)␤

[05:02] <JimmyZ> rakudo: sub foooo {say $^b}; foooo(&foooo);

[05:02] <p6eval> rakudo 7ef386: foooo␤

[05:02] <JimmyZ> what's happend?

[05:02] <JimmyZ> ng: sub foooo {say $^b}; foooo(&foooo);

[05:02] <p6eval> ng 0307c2: &foooo␤

[05:03] <JimmyZ> bug?

[05:04] <JimmyZ> rakudo: sub foo {}; $_ = &foo; .say;

[05:04] <p6eval> rakudo 7ef386: foo␤

[05:04] <JimmyZ> ng: sub foo {}; $_ = &foo; .say;

[05:04] <p6eval> ng 0307c2: &foo␤

[05:04] <JimmyZ> pugs: sub foo {}; $_ = &foo; .say;

[05:04] <p6eval> pugs: <SubRoutine(&foo)>␤

[05:05] <TimToady> pugs++

[05:05] <JimmyZ> ng: sub foo {}; $_ = &foo; .WHAT.say;

[05:05] <p6eval> ng 0307c2: Sub()␤

[05:06] <JimmyZ> pugs: sub foo {}; $_ = &foo; .WHAT.say;

[05:06] <p6eval> pugs: Sub␤

[05:06] <JimmyZ> rakudo: sub foo {}; $_ = &foo; .WHAT.say;

[05:06] <p6eval> rakudo 7ef386: Sub()␤

[05:07] <diakopter> is it bad that I've been pronouncing github as gith-ub (in my mind)?

[05:08] <TimToady> depends on how plastic your brain is

[05:09] <diakopter> std: our @$$$$$$$$$$$$$$$$$$$$$$ # I still don't understand what this means

[05:09] <p6eval> std 29337: ok 00:01 106m␤

[05:12] <TimToady> same as:

[05:12] <TimToady> std: our @$

[05:12] <p6eval> std 29337: ok 00:01 105m␤

[05:13] <TimToady> which is equiv to our Positional $

[05:13] <TimToady> which would be an anonymous variable that is guaranteed to hold a Positional :)

[05:13] <Alias> TimToady: http://use.perl.org/~Alias/journal/40015

[05:14] <Alias> Managed to finally solve recursion without using regex recursion

[05:14] <carlin> to solve recursion you must first solve recursion

[05:15] <TimToady> you can say that again

[05:16] <diakopter> I can say this again

[05:18] <diakopter> Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Alias: Ali

[05:18] <Alias> (oh where's /kickban when you need it)

[05:19] *** ChanServ sets mode: +o Alias

[05:19] <Alias> Well, it's too late NOW isn't it :)

[05:19] *** Alias sets mode: -o Alias

[05:20] <TimToady> I dunno, considering it's diakopter that's the ChanServ, seems like it would suspend the statute of limitations

[05:20] <diakopter> Alias: direct recursion or indirect/mutual also?

[05:20] <Alias> diakopter, hrm?

[05:21] <Alias> I just make things, I don't know all these fancy terminalologies

[05:21] <Alias> This ignorance is my greatest asset sometimes, it seems :)

[05:21] * diakopter studies terminals

[05:22] * TimToady prefers dragons and winds

[05:22] <diakopter> Alias: what kind of input (and patterns) would you now be able to support

[05:23] <diakopter> (what's a minimualistic example of a recursion you can now support)

[05:23] <Alias> I've currently got arbitrary depth foo.bar.baz expressions on ARRAY/HASH/Object (but not VMethods), IF/ELSE/UNLESS and FOREACH

[05:23] <Alias> Plus whitespace chomping [%-

[05:24] <Alias> I'm at 68k of memory

[05:24] <diakopter> minimual: that's a new one

[05:24] <Alias> And I've got a budget of 100k

[05:24] <diakopter> what if foo.bar.baz is a reference to foo

[05:24] <TimToady> (you'll note he doesn't say 100k *what*)

[05:25] <Alias> Memory cost of "use"

[05:25] <TimToady> australian bytes are worth as much as american bytes

[05:25] <TimToady> *aren't

[05:25] <Alias> But we're getting close

[05:25] <TimToady> grr, can't tell jokes anymore

[05:25] <Alias> Parity expected some time next year :)

[05:26] <TimToady> but then your bytes will be worth 12.5% more than ours

[05:26] <Alias> TimToady, s/jokes/original jokes/ :)

[05:26] <TimToady> assuming only one parity bit

[05:26] <diakopter> ECC costs a bit more

[05:29] <diakopter> Alias: can you provide an example of what kind of recursion you're enabling?

[05:29] <Alias> [% IF foo %][% FOREACH item IN list %][% IF item.cool %]Awesome![% ELSE %][% FOREACH .... and so on

[05:30] <Alias> It's interesting only really because I'm NOT doing brace-flipping and compiling it into code

[05:30] <Alias> I'm trying to do it entirely inside normal regex/code

[05:37] *** JimmyZ left
[05:48] *** romanhunt left
[06:16] *** zloyrusskiy joined
[06:17] <carlin> rakudo: say '01'..20

[06:17] <p6eval> rakudo 7ef386: 0102030405060708091011121314151617181920␤

[06:17] <carlin> rakudo: say '01'..8

[06:17] <p6eval> rakudo 7ef386: 01020304050607080910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879␤

[06:23] <carlin> ng: say '01'..8

[06:23] <p6eval> ng 0307c2: "01"..8␤

[06:24] <carlin> ng: say '01'..20

[06:24] <p6eval> ng 0307c2: "01"..20␤

[06:24] <carlin> ng: say '01'..'20'

[06:24] <p6eval> ng 0307c2: "01".."20"␤

[06:24] <carlin> ng: say 1..8

[06:24] <p6eval> ng 0307c2: 1..8␤

[06:24] <carlin> oh

[06:25] <carlin> ng: say 1..'foobarbaz'

[06:25] <p6eval> ng 0307c2: 1.."foobarbaz"␤

[06:25] <carlin> heh

[06:33] <mberends> is that a Range, and ng being properly lazy?

[06:35] <mberends> ng: say (1.."foobarbaz").WHAT # seems to be that way

[06:35] <p6eval> ng 0307c2: Range()␤

[06:37] *** Baggio_ joined
[06:37] <carlin> ng: for 1..8 { .say }

[06:37] <p6eval> ng 0307c2: 1..8␤

[06:37] <carlin> ng: for 1...8 { .say }

[06:37] <p6eval> ng 0307c2: 1␤2␤3␤4␤5␤6␤7␤8␤

[06:38] *** Baggio_ left
[06:44] *** Baggio_ joined
[06:47] <hejki> ng: (1..8)>>.say

[06:47] <p6eval> ng 0307c2: sh: ./perl6: No such file or directory␤

[06:47] <hejki> rakudo: (1..8)>>.say

[06:47] <p6eval> rakudo 7ef386: 1␤2␤3␤4␤5␤6␤7␤8␤

[06:48] <hejki> btw.. how does hyper deal with lazy arrays?

[07:02] <TimToady> hyper is intrinsically eager

[07:04] *** Baggio_ left
[07:06] *** abra joined
[07:13] <mberends> TimToady: do you see any problem in adding exit status values to viv when errors/difficulties are encountered? currently the exit status seems to always be 0.

[07:17] <TimToady> it already exits non-zero on fatal errors

[07:18] <mberends> yes, it would be helpful to me to flag non-fatal errors too. I'm calling viv from C via popen().

[07:18] <mberends> pclose() returns the status

[07:19] <TimToady> seems reasonable

[07:20] <mberends> let me try to patch viv then without breaking anything (gradually)

[07:21] <TimToady> I doubt patching viv will work

[07:24] <mberends> hmm, true, looked at the code already

[07:25] <TiMBuS> hey, whats the best way to split a string in two in perl6? you cant slice a string can you

[07:26] <TimToady> by what criterion?

[07:26] <TiMBuS> x amount of characters

[07:26] <TiMBuS> uh, x amount of bytes

[07:26] <TimToady> strings don't come in bytes in Perl 6 :)

[07:27] <TimToady> though buffers do...

[07:27] <TimToady> and in theory buffers are sliceable, since they're arrays too

[07:28] <TimToady> but I don't think rakudo does much with buffers yet

[07:28] <TiMBuS> oh.

[07:28] <TiMBuS> :[

[07:29] <TimToady> or you can say /(. ** 10)(. ** 20)/

[07:29] <TiMBuS> yeah but x can change

[07:30] <TiMBuS> and i don't think ** works with scalars

[07:30] <TimToady> ng will soon support closures, so /(. ** {$x})/ would work then

[07:31] <TimToady> ng: my $x = 3; say "food" ~~ /(. ** {$x})/

[07:31] <p6eval> ng 0307c2: food␤

[07:31] <TimToady> probably took it as a separator instead of a count

[07:31] <TimToady> ng: my $x = 3; say "food" ~~ /(. ** {$x..$x})/

[07:31] <p6eval> ng 0307c2: food␤

[07:32] <TimToady> ah well, bug

[07:32] <TimToady> there's always substr

[07:32] <TiMBuS> yep

[07:32] <TimToady> or eval

[07:32] <TiMBuS> it would be nice if perl 6 had string slices

[07:36] *** c9s joined
[07:37] <TimToady> zzz &

[07:37] <mberends> g'nite

[07:41] *** JimmyZ joined
[07:46] <JimmyZ> ng: $_ = { say $^f ~ $^o x 2 ~ 'bar2000'; }; $_($o='o', $f='f'); 

[07:46] <p6eval> ng 0307c2: sh: ./perl6: No such file or directory␤

[07:46] <JimmyZ> rakudo: $_ = { say $^f ~ $^o x 2 ~ 'bar2000'; }; $_($o='o', $f='f'); 

[07:46] <p6eval> rakudo 7ef386: Symbol '$o' not predeclared in <anonymous> (/tmp/GC2fHIZa5v:2)␤in Main (file <unknown>, line <unknown>)␤

[07:46] <JimmyZ> ng: $_ = { say $^f ~ $^o x 2 ~ 'bar2000'; }; $_($o='o', $f='f'); 

[07:46] <p6eval> ng 0307c2: sh: ./perl6: No such file or directory␤

[07:47] <JimmyZ> ng: $_ = { say $^f ~ $^o x 2 ~ 'bar2000'; }; $_($o='o', $f='f'); 

[07:47] <p6eval> ng 0307c2: sh: ./perl6: No such file or directory␤

[07:49] <mberends> JimmyZ: ng may be recompiling in a cron job

[07:49] <JimmyZ> ng: $_ = { say $^f ~ $^o x 2 ~ 'bar2000'; }; $_($o='o', $f='f'); 

[07:49] <p6eval> ng 0307c2: Confused at line 1, near "$_($o='o',"␤current instr.: 'perl6;HLL;Grammar;panic' pc 519 (src/stage0/HLL-s0.pir:336)␤

[07:50] <JimmyZ> how to pass named args?

[07:50] <JimmyZ> ng: $_ = { say $^f ~ $^o x 2 ~ 'bar2000'; }; $_($^o='o', $^f='f'); 

[07:50] <p6eval> ng 0307c2: Confused at line 1, near "$_($^o='o'"␤current instr.: 'perl6;HLL;Grammar;panic' pc 519 (src/stage0/HLL-s0.pir:336)␤

[07:50] <JimmyZ> ng: $_ = { say $^f ~ $^o x 2 ~ 'bar2000'; }; $_('o', 'f'); 

[07:50] <p6eval> ng 0307c2: offbar2000␤

[07:50] <JimmyZ> ng: $_ = { say $^f ~ $^o x 2 ~ 'bar2000'; }; $_('f', 'o'); 

[07:51] <p6eval> ng 0307c2: foobar2000␤

[07:53] *** Baggio_ joined
[08:00] *** kaare joined
[08:00] *** kaare is now known as Guest50217

[08:04] *** cotto_w0rk joined
[08:08] *** Su-Shee joined
[08:09] <Su-Shee> good morning :)

[08:14] *** abra left
[08:14] *** abra joined
[08:14] *** abra left
[08:15] *** abra joined
[08:15] *** abra left
[08:15] *** JimmyZ left
[08:17] *** JimmyZ joined
[08:18] *** cotto_working joined
[08:19] *** abra joined
[08:19] *** abra left
[08:20] *** cotto_work left
[08:20] *** abra joined
[08:20] *** abra left
[08:22] *** abra joined
[08:22] *** abra left
[08:26] *** abra joined
[08:26] *** abra left
[08:30] *** kaare joined
[08:31] *** kaare is now known as Guest58143

[08:31] <hejki> is there a perl6 way of saying my @ar = 1, 2, 3, 4, 5; for 1..3 -> $i { @ar[$i].say } ?

[08:32] <Tene> rakudo: my @a = 1..5; for @a[1..3] { .say }

[08:32] <p6eval> rakudo 7ef386: 2␤3␤4␤

[08:33] <hejki> ahh

[08:33] <hejki> just what i was looking for :)

[08:35] *** cotto_w0rk left
[08:36] *** meppl joined
[08:38] <hejki> also is there a comfortable way of saying that a for loop shifts through an array n elems at a time?

[08:42] *** zloyrusskiy left
[08:43] *** Guest50217 left
[08:46] <hejki> rakudo: for 1..10 -> $a, $b, $c, $d, $e { say "a: $a b: $b c: $c d: $d e: $e"; }

[08:46] <p6eval> rakudo 7ef386: a: 1 b: 2 c: 3 d: 4 e: 5␤a: 6 b: 7 c: 8 d: 9 e: 10␤

[08:47] <hejki> mm.. wonder if i could use a presized array in -> ?

[08:48] *** hanekomu_ joined
[08:48] *** abra joined
[08:48] *** abra left
[08:51] *** JimmyZ left
[08:52] *** gfx left
[08:54] *** abra joined
[08:57] *** Baggio_ left
[08:57] *** Baggio_ joined
[08:59] *** abra left
[08:59] *** abra joined
[08:59] *** abra left
[09:02] *** abra joined
[09:06] *** abra left
[09:07] *** abra joined
[09:09] *** abra left
[09:10] *** abra joined
[09:10] *** abra left
[09:11] <hejki> rakudo: my @ar = "foobar".comb(/./); my Str $str = ~@ar; say "str: $str is " ~ $str.WHAT;

[09:11] <p6eval> rakudo 7ef386: str: f o o b a r is Str()␤

[09:11] <hejki> hmm.. how-to remove whitespace? :)

[09:13] <carlin> rakudo: my @ar = "foobar".comb(/./); my Str $str = @ar.join; say "str: $str is " ~ $str.WHAT

[09:13] <p6eval> rakudo 7ef386: str: foobar is Str()␤

[09:14] <hejki> :P

[09:14] *** abra joined
[09:14] <hejki> ty

[09:15] *** abra left
[09:16] *** abra joined
[09:17] <carlin> ~ adds spaces

[09:18] <carlin> rakudo: my @x = <foo bar baz>; say @a; say ~@a;

[09:18] <p6eval> rakudo 7ef386: Symbol '@a' not predeclared in <anonymous> (/tmp/Z02IYUbQ4N:2)␤in Main (file <unknown>, line <unknown>)␤

[09:18] <carlin> rakudo: my @x = <foo bar baz>; say @x; say ~@x;

[09:18] <p6eval> rakudo 7ef386: foobarbaz␤foo bar baz␤

[09:19] *** abra left
[09:19] *** abra joined
[09:20] *** abra left
[09:20] *** abra joined
[09:24] *** kaare joined
[09:24] *** abra left
[09:24] *** abra joined
[09:24] *** kaare is now known as Guest71037

[09:28] *** iblechbot joined
[09:29] *** JimmyZ joined
[09:37] *** Guest58143 left
[09:38] <JimmyZ> ng: sub foo { return {say $^f ~ $^g x 2 ~ 'bar2000'} }; $_ = foo; $_('f', 'o');

[09:38] <p6eval> ng 0307c2: foobar2000␤

[09:38] <JimmyZ> ng: sub foo { return {say $^f ~ $^e x 2 ~ 'bar2000'} }; $_ = foo; $_('f', 'o');

[09:39] <p6eval> ng 0307c2: offbar2000␤

[09:39] <JimmyZ> Is it a bug?

[09:41] <JimmyZ> ng: sub foo { return {say $^a ~ $^b x 2 ~ 'bar2000'} }; $_ = foo; $_('f', 'o');

[09:41] <p6eval> ng 0307c2: foobar2000␤

[09:41] <JimmyZ> ng: sub foo { return {say $^b ~ $^a x 2 ~ 'bar2000'} }; $_ = foo; $_('f', 'o');

[09:41] <p6eval> ng 0307c2: offbar2000␤

[09:41] <JimmyZ> pugs: sub foo { return {say $^b ~ $^a x 2 ~ 'bar2000'} }; $_ = foo; $_('f', 'o');

[09:41] <p6eval> pugs: offbar2000␤

[09:41] <JimmyZ> pugs: sub foo { return {say $^a ~ $^b x 2 ~ 'bar2000'} }; $_ = foo; $_('f', 'o');

[09:41] <p6eval> pugs: foobar2000␤

[09:41] <JimmyZ> oh

[09:44] *** jaldhar joined
[09:44] *** abra left
[09:44] *** abra joined
[09:44] *** JimmyZ left
[09:45] *** abra left
[09:45] *** abra joined
[09:45] <moritz_> good morning

[09:46] *** abra left
[09:46] <mberends> good moritz_, morning # tab fail ;-)

[09:49] *** abra joined
[09:57] *** abra left
[09:57] *** abra joined
[09:58] *** abra left
[10:00] *** abra joined
[10:01] *** abra left
[10:02] *** abra joined
[10:02] *** abra left
[10:03] *** abra joined
[10:04] *** abra left
[10:04] *** abra joined
[10:08] *** abra left
[10:09] *** abra joined
[10:11] *** c9s left
[10:16] *** kaare joined
[10:16] *** kaare is now known as Guest75509

[10:30] *** Guest71037 left
[10:54] *** Guest75509 left
[10:57] *** TiMBuS left
[11:24] *** Astoria` joined
[11:25] <colomon> quiet this morning

[11:25] <moritz_> quiet indeed

[11:26] <colomon> i keep thinking p6 needs a method which returns the first N elems of a lazy list (lazily)

[11:27] <moritz_> ( list )[^$N]

[11:27] <colomon> more or less like that, yeah

[11:28] <colomon> are slices lazy?

[11:28] <moritz_> I think so, yes

[11:29] <colomon> then this method might be really easy to define.  :)

[11:29] <sjohnson> hiiii

[11:30] <colomon> method head($n = 1) { self[^$n[; }

[11:30] <moritz_> multi sub infix:<take>(@lhs, $number) is equiv &infix<Z>( @lhs[^$number] ) { ... }

[11:31] <moritz_> rm

[11:31] <moritz_> multi sub infix:<take>(@lhs, $number) is equiv &infix<Z> {  @lhs[^$number] ) }

[11:32] <moritz_> > [1, 2, 3, 4, 5] $ take 2

[11:32] <moritz_> oh, no lambdabot :-)

[11:32] <colomon> won't that return the indies too?

[11:32] <moritz_> actually it's a type error

[11:32] <moritz_> .oO( of course )

[11:33] <moritz_> Prelude> take 2 [1, 2, 3, 4, 5] 

[11:33] <moritz_> [1,2]

[11:34] <colomon> why the Z?

[11:34] *** Guest75509 joined
[11:35] <moritz_> you'd want it to have looser precedence than the comma

[11:35] <colomon> oooo!

[11:35] *** cotto_working left
[11:36] <colomon> is equiv is setting precedence?

[11:36] <moritz_> yes

[11:37] *** colomon left
[11:45] *** Baggio_ left
[11:48] *** Baggio_ joined
[11:55] *** colomon joined
[11:56] <colomon> very cool

[11:59] *** kaare joined
[12:00] *** kaare is now known as Guest27330

[12:09] *** pmurias joined
[12:09] <pmurias> mberends: why are you calling viv from C?

[12:14] *** Guest75509 left
[12:15] <pmurias> Anonymous variable requires declarator at STD.pm line 304:

[12:15] <pmurias> ------>     { @*MEMOS[$⏏¢.pos]<endstmt> ||= 1; }

[12:16] <pmurias> what may be causing this?

[12:16] <moritz_> incorrect UTF-8 decoding maybe?

[12:18] *** fridim joined
[12:22] <moritz_> std: $¢

[12:22] <p6eval> std 29337: ok 00:01 107m␤

[12:39] *** xomas_ joined
[12:40] *** Baggio_ left
[12:44] <colomon> moritz_: just edited your comment on p6 Advent to say ~| for string or -- previously said "strong" or.  Hope this was actually a typo and not some use of the term strong I've not seen before...

[12:46] *** Baggio_ joined
[12:55] <pmurias> moritz_: this was part of the problem

[12:56] *** Baggio_ left
[12:57] <pmurias> moritz_: do you/evalbot have an up to date STD

[13:07] <mberends> pmurias: I'm trying to convert viv ast output to C structs. the yaml loader for that is almost working.

[13:09] <pmurias> mberends: what for?

[13:09] <mberends> ah, that's a sekrit ;-)

[13:10] <pmurias> i won't tell anyone ;)

[13:11] <mberends> 'course, if i kill you after i tell you ;)

[13:13] <mberends> suffice to say that if it works, it will be -Ofun for us, and if it fails, I don't want to have wasted the #perl6 community's time

[13:18] *** beggars left
[13:22] <pmurias> mberends: if you don't tell us what it is we will just waste our time trying to figure it out

[13:22] <mberends> pmurias: :-) :-)

[13:25] <pmurias> loading the ast into parrot, using it for syntax highlight in vim or writing a interpreter like sprixel are my current guesses

[13:27] <mberends> pmurias: good guesses. now you can stop wasting more time on it :)

[13:27] <pmurias> mberends: which one is correct?

[13:28] <mberends> pmurias: aw, you're too young to die, and we need your company ;)

[13:34] *** colomon left
[13:50] <pmurias> moritz_: did you remove by account at timtowtdi.org?

[13:54] <moritz_> pmurias: the server was replaced a few months ago

[13:55] <moritz_> pmurias: I can give you a new one if you need it

[13:55] <moritz_> afk

[13:56] <pmurias> a new one would be nice for checking if the STD just behaves strangly on my box

[14:03] *** fridim left
[14:19] *** Baggio_ joined
[14:21] <hejki> can i somehow compile perl6 code into a runnable binary? :)

[14:21] *** Baggio_ left
[14:22] <hejki> solving euler problems with rakudo seems to take aeons :P

[14:22] *** Baggio_ joined
[14:23] *** colomon joined
[14:44] <colomon> hejki: Pretty sure there's no way to make a binary from a perl6 program yet.  At least, not if your goal is to make it faster.

[14:44] <colomon> Think of it as an opportunity to work on your algorithm optimization skills for project Euler...

[14:46] <slavik> afaik, parrat == java for dynamic languages

[14:46] <pmurias> slavik: jvm?

[14:46] <slavik> parrot*

[14:46] <slavik> pmyes

[14:46] <slavik> jvm would be a better term

[14:47] <hejki> colomon: heh :P

[14:47] <slavik> I use 'java' interchangeably :(

[14:47] *** lmc joined
[14:48] <slavik> I think I like about jvm is ability to limit how much memory it can take up and also JMX :)

[14:48] <pmurias> JMX?

[14:50] <colomon> hejki: you're lucky if it's just running slow.  I think every math program I've written in perl 6 in the last month has starting getting bus errors as soon as I cranked up the number of calculations to anywhere near actually being useful.

[14:52] <slavik> pmurias: Java Management eXtensions

[14:52] <slavik> pmurias: you can connect to the JVM remotely and see what the heap size/usage is and such

[14:53] <slavik> pmurias: and if you are running a proper application server that has JDBC facilities, you can also pull data regarding database connections, like how many are active, how many used, how many connections have been made, etc.

[14:53] <slavik> same with JMS (Java Messaging Service)

[14:53] <hejki> colomon: :))

[14:55] <hejki> wonder how long it'll take to make it actually usable :)

[14:56] <colomon> hejki: my impression is there are just one or two bugs like this, but tracking them down is really hard.

[14:57] <hejki> :o

[14:59] *** colomon_ joined
[14:59] *** colomon left
[14:59] *** colomon_ is now known as colomon

[15:02] *** Baggio_ left
[15:02] *** pmurias left
[15:03] *** pmurias joined
[15:04] <hejki> would be neat to be able to: for 1..10 X $a..20 -> $a, $b { ... } to have some dependency between the loop variables :)

[15:10] *** colomon left
[15:20] *** lmc_ joined
[15:22] *** zaslon left
[15:22] *** pointme left
[15:22] *** mubot left
[15:22] *** pointme joined
[15:22] *** mubot joined
[15:22] *** zaslon joined
[15:25] <moritz_> if you want that kind of control, just use two nested loops

[15:26] <hejki> rakudo: my $str = "foobar"; say $str.reverse;'

[15:26] <p6eval> rakudo 7ef386: Syntax error at line 2, near "'"␤in Main (file <unknown>, line <unknown>)␤

[15:26] <hejki> zomg.. extra ' :>

[15:26] <hejki> rakudo: my $str = "foobar"; say $str.reverse;

[15:26] <p6eval> rakudo 7ef386: foobar␤

[15:26] <hejki> wot

[15:27] *** Baggio_ joined
[15:27] <mberends> hejki: try .flip

[15:27] <moritz_> rakudo: say "foobar".flip

[15:27] <p6eval> rakudo 7ef386: raboof␤

[15:27] <moritz_> reverse just reverses lists

[15:28] <moritz_> and views "foobar" as a one item list

[15:28] *** hanekomu_ left
[15:32] *** c9s joined
[15:33] *** lmc left
[15:34] <hejki> ahh ty :>

[15:36] <hejki> and another one, is there something like cmpthese or timethese ?

[15:37] <moritz_> pointme: benchmark

[15:37] <pointme> perlpilot's benchmark is at http://github.com/perlpilot/benchmark/

[15:38] <moritz_> hejki: as a module, yes

[15:46] *** Psyche^ joined
[15:49] <slavik> pmurias: JMX is neat stuff

[15:51] *** Patterner left
[15:51] *** Psyche^ is now known as Patterner

[15:53] <hejki> i guess i can use bash's time for comparison :)

[15:55] <mberends> hejki: otherwise make your own stopwatch: time() returns fractional seconds too

[15:57] *** colomon_ joined
[15:57] *** colomon_ is now known as colomon

[15:59] <moritz_> rakudo: say time(), ' ', time()

[15:59] <p6eval> rakudo 7ef386: 1260719334.62132 1260719334.62142␤

[16:03] <pugs_svn> r29338 | pmichaud++ | [perl6advent]:  Another potential topic idea. 

[16:03] <colomon> I've found p6 programs so slow that the command line time is fine for timing them.  :)

[16:04] <colomon> hejki: if you really wanted to do something like 1..10 X $a .. 20, you could right your own version of X which took a code block as the second argument, so you could do something like 1 .. 10 X { $^a .. 20 }.  Don't think it would be too hard...

[16:04] <hejki> :)

[16:05] *** pmurias left
[16:06] <moritz_> rakudo: multi sub infix:<X>(@a, Callable $b) { gather for @a -> $a { take $_ for $b($a) } }; .say for 1..4 X { $^a..5 }

[16:06] <p6eval> rakudo 7ef386: push_pmc() not implemented in class 'Sub'␤in Main (file <unknown>, line <unknown>)␤

[16:06] <moritz_> that means that infix:<X> is not overloadable yet :/

[16:07] <colomon> Oh yeah, it's in List.pir.

[16:07] <colomon> maybe in ng?

[16:07] <moritz_> I don't think ng has X yet

[16:07] <colomon> (change ranges the serieses)

[16:07] <colomon> but you'd be implementing it, all ng would have to have is X in the grammar.

[16:08] <moritz_> it's not that easy

[16:08] <colomon> (which it might not have, but ought to be easy to add, I think.)

[16:08] <moritz_> not that infix:<X> is assoc<list>

[16:08] <moritz_> s/not/note/

[16:08] <moritz_> so you need to retrieve an arbitrary long list of lists

[16:08] <moritz_> and I don't think you can do that in Perl 6 signature in ng yet

[16:09] <moritz_> need slices for that one

[16:09] <colomon> actually, problem would be that @a would kill ng dead.

[16:09] <pmichaud> one can always do $a

[16:09] <pmichaud> (as a workaround)

[16:09] <colomon> errr... we're being stupid.  in rakudo with a different operator name?

[16:10] <colomon> pmichaud: \o

[16:10] <moritz_> rakudo: multi sub infix:<Y>(@a, Callable $b) { gather for @a -> $a { take $_ for $b($a) } }; .say for  (1..4) Y { $^a..5 }

[16:10] <p6eval> rakudo 7ef386: 1␤2␤3␤4␤5␤2␤3␤4␤5␤3␤4␤5␤4␤5␤

[16:10] <colomon> rakudo: multi sub infix:<Y>(@a, Callable $b) { gather for @a -> $a { take $_ for $b($a) } }; .say for 1..4 Y  { $^a..5 }

[16:10] <p6eval> rakudo 7ef386: No applicable candidates found to dispatch to for 'infix:Y'␤in Main (file <unknown>, line <unknown>)␤

[16:10] <colomon> moritz_++

[16:11] *** Baggio_ left
[16:13] *** zloyrusskiy joined
[16:17] <pugs_svn> r29339 | colomon++ | [perl6advent] More detail on plans. 

[16:20] *** nihiliad joined
[16:25] <moritz_> colomon: do you have code for mandelbrot sets in Perl 6 already?

[16:25] <colomon> yes

[16:25] <moritz_> cool

[16:25] <colomon> wrote it last night.

[16:25] <moritz_> can it actually produce a decent picture without segfaulting first? :-)

[16:25] <colomon> no

[16:25] <colomon> :)

[16:25] <colomon> 41 x 41 works, 81 x 81 bus errors early on.

[16:26] <moritz_> what do you emit? ASCII art? or SVG?

[16:26] <colomon> I was thinking I might try to use it as a testbed to track down the damned segfault.

[16:26] <colomon> PBM file.

[16:27] <lisppaste3> colomon pasted "mandelbrot in p6" at http://paste.lisp.org/display/92029

[16:28] <colomon> It displays it rotated 90 degrees so it looks like a snowman for the holidays.

[16:28] * moritz_ checks out master to run it

[16:30] <colomon> if you took out the the (' ') in the join, you could use it for 0s and 1s ascii art, I guess.  :)

[16:31] <colomon> but anyway, it segfaults pretty darned reliably, so with any luck it can help track down the darned thing...

[16:31] <colomon> (Though you need to crank up $height and $width to get the segfaults.)

[16:36] * colomon is recompiling master with debugging turned on

[16:38] *** zloyrusskiy left
[16:41] <moritz_> do all odd values work as width/height?

[16:41] <colomon> should

[16:41] <colomon> It needs to be odd to get the symmetry right.

[16:42] <colomon> Actually, I guess the height doesn't have to be odd, strictly speaking, but the code is designed for square pictures, so width should really equal height.

[16:42] <moritz_> I have a greyscale version that emits pmm files :-)

[16:43] <moritz_> but segfaults for 41x41

[16:43] <colomon> greyscale based on the number of iterations before exiting?

[16:43] <moritz_> yes

[16:43] <colomon> nice.

[16:45] <lisppaste3> moritz_ annotated #92029 "greyscale version" at http://paste.lisp.org/display/92029#1

[16:45] <colomon> it would be pretty easy to make it do color, too.  I was trying to keep it straightforward.... hmmm....

[16:46] <moritz_> black/white is fine too

[16:46] *** payload joined
[16:46] <moritz_> I just felt like playing with it :-)

[16:46] <colomon> actually, it should be white/black, now that I think of it.

[16:47] <colomon> :)

[16:47] <colomon> Going to work up to mandel being the snowman operator.... ;)

[16:47] <moritz_> :-)

[16:48] <moritz_> making the output colored is as simple as replacing .map({ $_ xx 3 }) with a function that returns RGB values for $_

[16:49] <colomon> yes.  and I have a set of nice colors sitting around on my hard drive somewhere, from 1991 or so.  :)

[16:50] <colomon> I should probably steal the $max_iterations thing, at least.

[16:51] <moritz_> put it in a github repo, that'll make it easier to play with it asynchronously

[16:51] <colomon> I desperately wanted to use the series operator instead of subdivide, but it seems like all the operations more complicated than N1 ... N2 are broken in master (and non-existent in ng).

[16:51] <colomon> github, good idea, one minute.

[16:52] <moritz_> rakudo: say 1 ... *+4, 25

[16:52] <p6eval> rakudo 7ef386: 15913172125␤

[16:52] <colomon> rakudo: say 1, 2, 3 ... 25

[16:52] <p6eval> rakudo 7ef386: Multiple Dispatch: No suitable candidate found for 'cmp', with signature 'PP->I'␤in Main (file <unknown>, line <unknown>)␤

[16:54] *** rgrau left
[16:56] <colomon> http://github.com/colomon/mandelbrot

[16:57] *** tarski joined
[16:59] <colomon> I vote we keep mandelbrot.pl black and white (well, white and black) and start up a separate script for a color version.

[17:02] * moritz_ doesn't see how working series operators could simplfy or replace subdivided()

[17:09] *** colomon left
[17:20] *** hanekomu_ joined
[17:31] *** colomon_ joined
[17:31] *** colomon_ is now known as colomon

[17:31] <colomon> back again

[17:37] *** zloyrusskiy joined
[17:45] <moritz_> there and back again, a colomon's tale :-)

[17:46] *** envi^home left
[17:51] <moritz_> colomon: pushed the mandelbrot-colored.pl script

[17:51] <moritz_> actually it's still greyscale atm

[17:54] *** zloyrusskiy left
[17:56] *** zloyrusskiy joined
[18:00] *** jferrero joined
[18:01] *** abra left
[18:02] *** silug joined
[18:14] *** abra joined
[18:16] *** orafu left
[18:16] *** orafu joined
[18:21] <colomon> moritz_: let me poke through my old C++ source code...

[18:23] <colomon> > git pull

[18:23] <colomon> "You asked me to pull without telling me which branch you

[18:23] <colomon> want to merge with, and 'branch.master.merge' in

[18:23] <colomon> your configuration file does not tell me either. "

[18:23] <colomon> any ideas what that is?

[18:23] *** lmc_ left
[18:24] *** lmc_ joined
[18:24] <moritz_> branch "master"] remote = origin merge = refs/heads/master

[18:24] <moritz_> oops

[18:25] <moritz_> [branch "master"]

[18:25] <moritz_>         remote = origin

[18:25] <moritz_>         merge = refs/heads/master

[18:25] <moritz_> colomon: add that to your .git/config file

[18:25] *** colomon left
[18:27] *** payload left
[18:36] *** colomon joined
[18:37] *** justatheory joined
[18:39] <colomon> that did it.  moritz_++

[18:41] * moritz_ finds that behaviour from git LTA

[18:41] * colomon agrees with moritz_.

[18:42] <colomon> will have full color in a couple of minutes here.

[18:47] <diakopter> re: deciding yesterday whether or not to enable an interpreter mode, I think I decided that compiling every time is better; yes, the startup time of the executable will be higher than /usr/bin/perl, but... the rtcg (run time code generation) capabilities (string eval) are worth it.

[18:47] <arnsholt> Which synopsis talks about the semantics of use?

[18:49] <moritz_> arnsholt: probably S11

[18:50] *** abra left
[18:51] <arnsholt> Ah, right. Thanks

[18:52] *** am0c joined
[18:53] *** astrojp joined
[18:54] *** jferrero left
[18:55] <colomon> moritz_: I added a "+ 1" to the code and got a bus error.  :(

[18:55] <moritz_> :(

[18:57] <colomon> another couple of minutes, i'll be happy with the colors, and then try to look at capturing the segfault.

[18:59] <mberends> diakopter: I think we're used to higher startup times anyway, taking it philosophically as the price to pay for a more awesome language ;)

[19:00] <colomon> moritz_: Now in full color, but you can only get the tiniest picture to work.

[19:02] <moritz_> colomon: just push it nonetheless

[19:02] <colomon> already done, I think.

[19:02] <moritz_> pull

[19:03] <moritz_> ed

[19:03] <moritz_> woot

[19:03] <diakopter> mberends: yeah, but it will only ever get slower; this is the baseline I'm working with.

[19:03] <diakopter> is dalek not announcing?

[19:04] <moritz_> not announcing what?

[19:04] <diakopter> commits

[19:04] <diakopter> I was curious

[19:04] <colomon> we're working on a different repo.

[19:04] <diakopter> I didn't see anything from it for a while

[19:05] <colomon> people haven't been checking in very much....

[19:05] <moritz_> colomon: I managed 41x41 with color

[19:05] <colomon> \o/

[19:05] <colomon> can you post it somewhere, just so I can see?  :)

[19:06] <colomon> I think I got those colors from the fractint source, circa 1991.

[19:06] <moritz_> http://moritz.faui2k3.org/tmp/color.pmm

[19:06] *** rgrau joined
[19:07] <colomon> \o/

[19:07] <colomon> Now all we need to do is get it up to about 801 x 801, and then make it fast...  ;)

[19:09] <moritz_> 71 also works

[19:09] <colomon> oooo

[19:09] <colomon> that's actually kind of interesting.  I'd assumed it was the raw size that was causing the trouble.

[19:11] <moritz_> it's trouble for some sizes, but not for others

[19:13] <colomon> trying 111 on the black and white right now.

[19:16] <moritz_> 101 segfaulted after 82 lines

[19:20] <colomon> 111 still running....

[19:26] <diakopter> hmm; opensuse 11.2 seems not to come with perl

[19:27] * moritz_ finds that quite surprising

[19:27] <zloyrusskiy> opensuse 11.2 comes with Perl for default

[19:27] <zloyrusskiy> i'm using it

[19:27] <diakopter> oh, hm

[19:27] <zloyrusskiy> DVD version - 100%

[19:27] <diakopter> I did the network install, and it downloaded 2GB worth

[19:27] <zloyrusskiy> apparmor - using Perl

[19:28] <zloyrusskiy> and opensuse have apparmor in all distributions i think

[19:28] <diakopter> but then when I did  yast2 -i perl  it downloaded 7MB (for perl)... I expected it to say something like "perl already latest version"

[19:28] <diakopter> I mean, I didn't try it beforehand :)

[19:30] <diakopter> I installed an opensuse 11.2 VM just so I could have MonoDevelop 2.2 RC

[19:32] *** lmc_ left
[19:34] *** justatheory left
[19:34] *** lmc_ joined
[19:38] <moritz_> I've compiled the mandelbrot script down to pbc, and that too keeps segfaulting

[19:44] *** rgrau` joined
[19:45] *** rgrau` left
[19:45] *** payload joined
[19:57] *** colomon left
[20:24] *** meppl left
[20:30] *** colomon joined
[20:30] <colomon> moritz_: 111x111 w&b worked.

[20:32] <colomon> and my little guy just got upset because I scrolled Camelia off the screen.  :)

[20:37] *** zloyrusskiy left
[20:37] <moritz_> :-)

[20:45] *** pmurias joined
[20:57] <pugs_svn> r29340 | pmurias++ | [viv] mark code passed in -e as utf8 

[20:57] <pmurias> nothingmuch++ # his blog post about prove --state proved very usefull

[20:57] <pugs_svn> r29341 | pmurias++ | [mildew] $foo.^bar(...) 

[20:57] <pugs_svn> r29342 | pmurias++ | [mildew] 

[20:57] <pugs_svn> r29342 | fix eval in the js backend

[20:57] <pugs_svn> r29342 | CATCH {...} and CONTROL {...}

[20:57] <pugs_svn> r29342 | = calls fetch

[20:57] <pugs_svn> r29342 | handling of escapes in strings

[20:57] <pugs_svn> r29342 | &YYY helper sub

[20:57] <pugs_svn> r29342 | test are order according to the one which failed last

[21:11] <diakopter> # interesting  http://www.itu.dk/~sestoft/rtcg/rtcg-nwpt2005.pdf

[21:14] <arnsholt> diakopter: Indeed

[21:15] *** colomon left
[21:15] <arnsholt> I like the second table on page 6

[21:16] <arnsholt> The JITed code is faster than the C code. Which just goes to show that a good JIT compiler may very well outperform hand-written code

[21:16] <arnsholt> (even though the example in that case is rather trivial)

[21:18] *** Guest27330 left
[21:18] <pmurias>  having 4 slides per page is a really horrible formating

[21:19] <arnsholt> True. It always takes time to figure out which way they flow

[21:21] *** lmc__ joined
[21:23] *** mberends left
[21:28] *** justatheory joined
[21:28] *** colomon joined
[21:32] *** abra joined
[21:35] *** lmc_ left
[21:35] *** justatheory left
[21:35] *** jferrero joined
[21:36] *** zloyrusskiy joined
[21:41] *** lmc__ left
[21:41] *** lmc__ joined
[21:43] *** nihiliad left
[21:45] *** charsbar_ joined
[21:47] *** arnsholt left
[21:47] *** Maddingue left
[21:47] *** rhr left
[21:47] *** frettled left
[21:47] *** charsbar left
[21:47] *** frew left
[21:47] *** zibri left
[21:47] *** jrockway left
[21:47] *** ilbot2 left
[21:47] *** sjohnson left
[21:47] *** PerlJam left
[21:47] *** zostay left
[21:47] *** meteorswarm left
[21:47] *** IRSeekBot left
[21:47] *** revdiablo left
[21:47] *** simcop2387 left
[21:47] *** arnsholt joined
[21:48] *** simcop2387 joined
[21:48] *** Maddingue joined
[21:49] *** frew joined
[21:49] *** zostay joined
[21:49] *** jrockway joined
[21:50] *** revdiablo joined
[21:50] *** slbkbs joined
[21:51] <lisppaste3> colomon pasted "mandelbrot (221) crash backtrace" at http://paste.lisp.org/display/92048

[21:51] *** ilbot2 joined
[21:53] *** zibri joined
[21:53] *** zibri left
[21:53] *** jrockway left
[21:53] *** zibri joined
[21:53] *** jrockway joined
[21:53] *** charsbar joined
[21:53] *** sjohnson joined
[21:53] *** zibri_ joined
[21:53] *** jrockway_ joined
[21:54] *** jrockway left
[21:54] *** charsbar left
[21:55] *** IRSeekBot joined
[21:59] *** payload left
[21:59] *** payload1 joined
[21:59] *** zibri left
[21:59] *** zibri_ is now known as zibri

[22:03] *** nihiliad joined
[22:09] *** lmc joined
[22:16] *** _Jedai_3 joined
[22:18] *** payload1 left
[22:19] *** |Jedai| left
[22:19] *** wayland76 joined
[22:21] *** lmc__ left
[22:27] *** rhr joined
[22:29] *** _jaldhar joined
[22:33] *** justatheory joined
[22:34] <moritz_> hugme: tweet rakudoperl Perl 6 advent calendar day 13: Junctions http://perl6advent.wordpress.com/2009/12/13/day-13-junctions/

[22:34] * hugme hugs moritz_; tweet delivered

[22:40] *** arthur-_ left
[22:40] *** justatheory left
[22:41] *** colomon left
[22:42] *** p6eval left
[22:43] *** jaldhar left
[22:46] *** Alias left
[22:47] *** p6eval joined
[22:47] *** lmc left
[22:47] *** lmc joined
[22:48] *** tylerni7 left
[22:48] *** lisppaste3 left
[22:49] *** lisppaste3 joined
[22:50] *** lmc left
[22:50] *** Astoria` left
[22:50] *** tylerni7 joined
[22:53] *** tylerni8 joined
[22:53] *** tylerni8 left
[22:54] *** iblechbot left
[22:54] <moritz_> ouch, after 10 minutes of processing a log file I get

[22:54] <moritz_> duplicate named argument in call

[22:54] <moritz_> in Main (file <unknown>, line <unknown>)

[22:54] <moritz_> no idea what that call was, which file, which line

[22:55] <moritz_> nor why it didn't fail before

[23:02] *** Su-Shee left
[23:05] <diakopter> reproducible?

[23:05] <moritz_> rakudo: say 1 cmp 1/1

[23:05] <p6eval> rakudo 7ef386: 0␤

[23:05] <moritz_> diakopter: yes, found it

[23:05] <diakopter> cool

[23:05] <moritz_> diakopter: and now I'm hanging on the next error with now source location

[23:05] <moritz_> Multiple Dispatch: No suitable candidate found for 'cmp', with signature 'PP->I'

[23:05] <moritz_> in Main (file <unknown>, line <unknown>)

[23:06] <diakopter> rakudo or ng?

[23:06] <moritz_> rakudo

[23:07] <moritz_> my $min_y      = ([min] @.values.map: { [min] @($_) }) min 0;

[23:07] <moritz_> I see why [min] would use cmp

[23:07] <moritz_> but I need to sleep now. Maybe I can track it down tomorrow.

[23:12] <diakopter> 'nite

[23:24] <pugs_svn> r29343 | pmurias++ | [mildew] fix '\'', multis 

[23:27] *** yahooooo left
[23:27] *** zloyrusskiy left
[23:33] *** Wolfman2000 left
[23:42] *** hanekomu_ left
[23:43] *** PacoLinux left
[23:53] *** hanekomu_ joined
[23:56] *** hanekomu_ left
