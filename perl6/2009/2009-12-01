[00:00] *** fridim_ left
[00:01] *** pmurias joined
[00:01] *** nihiliad left
[00:01] <Tene> masak, jnthn: a standard solution to the intimidation problem is to separate into two channels, one being new-user-oriented.

[00:02] * pmurias is unsure if he should git svn dcommit mid migration to new STD mildew

[00:02] <Tene> I remember that #perl6 used to be about Perl 6 in general, and #pugs was where pugs dev happened, iirc...

[00:02] <Tene> #perl6-devel, maybe...

[00:02] <Tene> #rakudo

[00:02] <masak> but I like new users here! I just want them to be braver.

[00:03] <pmurias> Tene: #pugs i don't remember

[00:03] <masak> Tene: don't think it was ever #pugs.

[00:03] <masak> it was #perl6 in early 2005 when I got here.

[00:04] <pmurias> especially as autrijus created #perl6

[00:04] <Tene> masak: i don't trust my memory for anything... not surprised I'm wrong.

[00:05] <Tene> masak: might be helpful to identify why we're intimidating, and consider whether moving some of the intimidating discussion to a back room would be helpful.

[00:05] <masak> I'm not saying splitting into two channels would be a bad move... I'd probably hang out in both channels. but I like how #perl6 is all over the place, everything from lolspeak to compiler internals.

[00:05] <Tene> masak: I agree, I don't like the idea of pushing new users to a different channel.

[00:05] <Tene> masak: Me too. :)

[00:06] <masak> we even have some lolspeak in our compiler internals. :)

[00:06] <diakopter> what?  you mean all new Perl 6 users shouldn't have to pass the #perl6 gauntlet?

[00:08] <Tene> There shouldn't be a gauntlet, no.

[00:10] *** jferrero left
[00:12] <Tene> Okay, going home now.  The GF is dragging me out for some socializing, but I plan to lurk in the corner with my laptop the entire night hacking on Parrot.

[00:12] *** dakkar left
[00:12] <Tene> any requests for ng features?

[00:13] <diakopter> heh

[00:13] <diakopter> trailing while/until?

[00:13] <Tene> Sure. :)

[00:17] *** mberends left
[00:17] <diakopter> pmurias, mberends: http://perl_vs_v8.pastebin.com/d2c12b8a6   a simple/dumb microbenchmark.  v8 has higher startup time, but its loop scales much better

[00:17] <diakopter> just missed mberends

[00:19] <masak> don't worry, he backlogs.

[00:21] <pmurias> diakopter: would would be more intresting is a v8 vs C comparision

[00:21] <diakopter> :P

[00:21] <pmurias> diakopter: and measuring the cost of abstraction is more important than numerics

[00:21] *** hcchien left
[00:23] <diakopter> yes, a Perl scalar is just about the same level of abstraction as a JavaScript variable...

[00:23] <diakopter> has very similar semantics, I mean

[00:25] <sjohnson> diakopter: is there a way to dump available methods for a type?

[00:26] <sjohnson> rakudo:  say Array().methods;

[00:26] <p6eval> rakudo 7ce13d: invoke() not implemented in class 'ResizablePMCArray'␤in Main (file <unknown>, line <unknown>)␤

[00:26] <pmurias> diakopter: what i worry much is how having an extra layer (or two) of method calls will affect performance

[00:26] <pmurias> * much more

[00:26] <jnthn> sjohnson: .^

[00:26] <jnthn> rakudo: say Array.^methods

[00:26] <p6eval> rakudo 7ce13d: ScalarshiftArraypushspliceexistsunshiftpopitemvaluesdelete␤

[00:27] <jnthn> rakudo: say Array.^methods>>.name.join(' ')

[00:27] <p6eval> rakudo 7ce13d: pop item values delete Scalar  shift Array push splice exists unshift␤

[00:27] *** hcchien joined
[00:27] <zaslon> lolperl6adventhazblogged! perl6advent++ 'Failure()<0xb78752d4>': Failure()<0xb785928c>

[00:27] <sjohnson> thanks jnthn 

[00:28] <sjohnson> jnthn: is there such thing as a List()?

[00:28] <colomon_> oh cool, zaslon is tracking perl6advent!  (if awkwardly...)

[00:28] <colomon_> I'm still working on the "table of contents" post....

[00:28] <masak> yes, moritz_ added perl6advent earlier today.

[00:28] <masak> colomon_++

[00:30] <zaslon> lolperl6adventhazblogged! perl6advent++ 'Failure()<0xb785efe0>': Failure()<0xb7846fd0>

[00:32] <colomon_> It's short, but it's there now.  (Must read to my boy a bit.)

[00:32] <colomon_> I'm going to tackle the day 1 "How do you get rakudo working?" post in a bit.

[00:33] <zaslon> lolperl6adventhazblogged! perl6advent++ 'Perl 6 Advent Calendar': http://perl6advent.wordpress.com/2009/12/01/perl-6-advent-calendar/

[00:33] <colomon_> btw, feel free to suggest changes or just make them if you have permission.  :)

[00:37] <jnthn> sjohnson: List is how you refer to the type object in the namespace. List() is how it stringifies. List(...) would be a coercion, but that's NYI.

[00:37] <sjohnson> jnthn: my reason for curisoity is because i don't see pick and sort in that array method list

[00:38] <jnthn> sjohnson: I was gonna say "yeah, they're inherited" but...hm.

[00:38] <jnthn> .methods without :local is meant to show the whole load up the tree.

[00:43] <sjohnson> hmm

[00:43] <sjohnson> not sure how that is accomplished

[00:43] <sjohnson> *scratches head*

[00:43] <jnthn> rakudo: class A { method foo { } }; class B { method bar { } }; say B.^methods>>.name.join()

[00:44] <p6eval> rakudo 7ce13d:  ( no output )

[00:44] <jnthn> offs

[00:44] <jnthn> I'd expect that to start "bar foo ..." anyway.

[00:47] <masak> jnthn: it starts 'bar' locally, but 'foo' comes much later.

[00:48] <colomon_> jnthn: do the normal instructions for building rakudo work on windows?

[00:51] <jnthn> masak: orly?

[00:51] <jnthn> colomon_: Should.

[00:51] <masak> oh, wait.

[00:51] <jnthn> colomon_: Just remember to invoke make with the right name.

[00:52] <masak> it should be 'B is A'... :)

[00:52] <colomon_> jnthn: what compiler would that be using?

[00:52] <jnthn> masak: oh!

[00:52] <jnthn> duh yes :-)

[00:52] <jnthn> colomon_: I build with MS VC++

[00:52] <masak> right. 'bar', 'foo'. :)

[00:52] <jnthn> colomon_: e.g. the Visual C++ compiler

[00:52] <jnthn> masak: Yeah, sorry. :-)

[00:52] <jnthn> Perl 6 ain't *that* magical.

[00:53] <masak> jnthn: apparently, I accepted it without reflecting. :)

[00:53] <jnthn> masak: It *is* nearly 2am. ;-)

[00:54] <masak> that doesn't say much. :) I'm not even a little tired...

[00:54] *** pmurias left
[00:54] <jnthn> masak: Yes, same. :-/

[00:54] <nbrown> colmon_: I use mingw on windows and that works too

[00:54] <jnthn> masak: I gotta get up at 7am-ish for a flyg on Wednesday too.

[00:55] <masak> a fokker? :)

[00:55] <jnthn> I fokking hope not. :-P

[00:55] <colomon_> nbrown: Thanks.

[00:55] <jnthn> masak: Ryanair don't have any of those.

[00:56] <masak> maybe just as well.

[00:56] <jnthn> masak: Just aluminum tubes painted blue and yellow inside with non-reclining seats and 2,50 EUR coffee.

[00:56] <nbrown> colomon_: no problem, just thought more solutions is better

[00:56] <colomon_> nbrown: absolutely.  there's more than one way...

[00:56] <jnthn> masak: Yeah. I did a Fokker once.

[00:56] <jnthn> masak: It was...an experience. :-)

[00:56] <masak> it was a pleasant experience, my fokker I mean.

[00:57] <jnthn> masak: I didn't especially dislike it. Sadly, every time I fly these days I seem to get more nervous about it, not less. :-/

[00:57] <jnthn> Meta-model compositon papers seem to help though. :-)

[00:57] <masak> :)

[00:58] <jnthn> Ooh...I should print another @interesting-paper off for the journey on Wed.

[00:58] <masak> oh, definitely.

[00:58] <jnthn> Or maybe 2 given I've got 4-5 hours of train afterwards.

[00:58] <masak> for great justice.

[01:06] *** cdarroch left
[01:09] *** colomon_ left
[01:15] *** cognominal joined
[01:19] *** colomon joined
[01:22] <masak> 'night. :)

[01:22] *** masak left
[01:22] <colomon> 'night.

[01:22] <phenny> colomon: 30 Nov 15:18Z <masak> tell colomon that it may be a good idea to write an 0th blog post today, which introduces the whole Perl 6 Advent Calendar endeavour to the world.

[01:22] <phenny> colomon: 30 Nov 15:59Z <Wolfman2000> tell colomon username for wordpress is wolfman2000. I don't know if he got it previously due to the evil PEER

[01:23] <colomon> apparently masak and I were thinking along the same lines...  :)

[01:26] *** agentzh joined
[01:26] <jnthn> "Who is peer and why won't he stop resetting my connection?"

[01:27] <colomon> Wow, cygwin takes forever to download their git....

[01:28] *** justatheory left
[01:30] *** justatheory joined
[01:31] <jnthn> oh noes, not cygwin.

[01:31] <sjohnson> heh

[01:31] <sjohnson> i'm not a huge cygwin fan either

[01:31] <sjohnson> i think it is very clunky

[01:38] <colomon> I've long considered it essential for working on Windows boxes.

[01:38] <colomon> But it sucks on Vista, which was part of my reason for getting my first Mac this time last year...

[01:39] <SirKay> well there's your problem

[01:39] <SirKay> you were using vista

[01:40] <colomon> SirKay: Unfortunately, as a programmer who has to support Windows machines professionally, I cannot ignore it forever.

[01:40] <SirKay> oh my.

[01:40] *** zaphar_ps joined
[01:40] * jnthn *just* managed to avoid Vista.

[01:41] <colomon> But I couldn't bear the thought of my main laptop being a Vista machine, and erasing it and installing XP seemed a little past its sell-by date.  So I got a Mac instead.

[01:41] <SirKay> meanwhile, I've been talking to a more experienced programmer, and he suggests that as a beginner, I should do Python instead.

[01:41] <colomon> jnthn: I just tried to build rakudo using the standard instructions, and the --gen-parrot phase blew up on me.

[01:41] <jnthn> colomon: On cygwin?

[01:41] <colomon> As far as I know, I just used cygwin for git.

[01:42] <jnthn> oh.

[01:42] <arnsholt> SirKay: Perl vs. Python is largely a matter of preference

[01:42] <jnthn> The msys git port works wonderfully for me. ;-)

[01:42] <jnthn> And doesn't need cygwin.

[01:42] <colomon> That system's Perl is active state.

[01:42] <jnthn> colomon: How did she blow?

[01:42] <jnthn> colomon: Yeah, that's what I have too...

[01:42] <arnsholt> Some people prefer Python, others prefer Perl (I think you can guess where this channel stands =)

[01:42] <SirKay> but hypothetically, if I did Python, what would I have for support?  Perl has this channel, and it has perlmonks, and whatnot.

[01:43] <jnthn> The Perl community is one of the things that keeps me going, that's for sure. :-)

[01:43] <SirKay> my Perl-Fu is weak but not nonexistent.  On the other hand, my Python-Fu is nonexistent.

[01:43] <arnsholt> TBH, I don't know. Being a Perl guy, I've not paid that much attention to Python

[01:43] <lisppaste3> colomon pasted "How she blew" at http://paste.lisp.org/display/91315

[01:44] <jnthn> SirKay: In many ways, Python and Perl are philosophically different. I can understand how they fit easier for different people.

[01:45] <arnsholt> As jnthn points out, the main differences between Perl and Python are the philosophy behind it, and the syntax

[01:45] <SirKay> I'm simply concerned with no longer sucking at programming and starting to make nontrivial programs.

[01:45] <jnthn> SirKay: If you like what you've seen of Perl so far and it seems to fit for you so far, keep exploring. It's not always an easy language to learn, but I'm very glad I made the effort.

[01:46] <SirKay> I could go either way, to be honest.

[01:48] <jnthn> SirKay: Sure. And you should see which fits best for you and go for it. TBH, once you learn enough langauges, they all start looking the same anyway. Apart from Haskell. That always looks insane. :-)

[01:48] <arnsholt> Lisp is kinda funky as well =)

[01:49] <jnthn> (And when I say "looking the same" I really mean, you start seeing that "oh, that's just a lambda" and "that's just a class declaration" and "that's just a loop"...)

[01:49] <jnthn> Well, I do anyway. :-)

[01:49] <SirKay> I've been starting and stopping for 16 years.

[01:49] <jnthn> But maybe the compiler writer in me just wants to deconstruct all languages into their primitives. ;-)

[01:49] <arnsholt> jnthn: I'm not a compiler writer (not much of one, anyways =) and I have the same experience

[01:50] <arnsholt> Except, of course, for Haskell which melts my brain =)

[01:50] <jnthn> arnsholt: lol

[01:50] <jnthn> arnsholt: I did sorta figure it was likely a fairly shared experience.

[01:50] <jnthn> :-)

[01:51] <jnthn> SirKay: I guess I sorta started 16 years ago and got hooked somehow.

[01:51] <arnsholt> Yeah. People who say Perl is hard can just sod off. If you wanna talk hard, let's talk Haskell =)

[01:51] <SirKay> it's a shame, really.

[01:51] <SirKay> if I had applied myself and started learning properly in all that time

[01:51] <SirKay> I could be a computing demigod now

[01:51] <arnsholt> (I really would like to learn Haskell though. The concept is cool)

[01:52] <SirKay> Perl is not really any harder than anything else.  In fact, I'm one of those freaks who loves that you denote scalars with a dollar sign.

[01:52] <jnthn> SirKay: To be honest, the longer I do it, the more I realize it's good to have a mixture of things in my life.

[01:53] <SirKay> so yeah...I'll do either perl or python, I just want whatever will give me the quickest route to programming power.

[01:53] <SirKay> That is a vain and callow desire, but yeah.

[01:53] <jnthn> SirKay: Well, I guess you mainly want to get there so you can Build Cool Stuff. :-)

[01:53] <jnthn> Which sure isn't a vain and callow desire.

[01:54] * jnthn loves seeing cool tech in whatever language.

[01:54] <SirKay> are you a troper?

[01:54] <jnthn> ...troper?

[01:54] <jnthn> I guess that means no. :-)

[01:54] <SirKay> hmm, I guess not.

[01:54] <jnthn> If I have to ask.

[01:54] <SirKay> tvtropes.org

[01:54] <SirKay> though the site is down now.

[01:55] <SirKay> But alas.  Yes, I want to get results now, since I've been on and off for 16 years with no progress, with only myself to blame.

[02:05] <jnthn> SirKay: Heh. I just noticed...tvtropes.org (now up again) runs pmwiki!

[02:05] <SirKay> orly

[02:05] <jnthn> yarly

[02:05] <SirKay> nowai

[02:06] <colomon> Quick, gang, a cool one line p6 script?

[02:06] <SirKay> but yeah...uh...

[02:06] <jnthn> SirKay: ...you fit in hear pretty well, don't you? :-)

[02:06] <jnthn> lolspeaking fluently already. :-)

[02:06] <SirKay> if I could prevail upon you to share with me some cool secret that is the key to everything, if you know it, I'd like to know.

[02:06] <SirKay> I try.

[02:07] *** hercynium left
[02:08] <jnthn> colomon: role Pint[::Beverage] { }; class Beer { method drink { say "glug" } }; my Pint of Beer @beers = Pint[Beer] xx 4; @beers>>.drink;

[02:09] *** bryan[c1] joined
[02:09] <jnthn> colomon: Parallel dispatch, parametric roles, classes, types, repetition operator... ;-)

[02:09] <colomon> I should have specified "that runs on rakudo-master".  :)

[02:09] <colomon> still, awesome code there!

[02:09] <bryan[c1]> when i try to run a perl script in notepad off my desktop it says the file cant be found, why is that?

[02:10] <bryan[c1]> could it be my shebang line?

[02:10] <jnthn> colomon: Er. I think that (or something very close to it) already does. ;-)

[02:11] <colomon>    Method 'drink' not found for invocant of class ''

[02:11] <jnthn> colomon: Oh.

[02:11] <jnthn> my Pint of Beer @beers = Pint[Beer].new xx 4; # forgot the .new call - needed to pun the role

[02:11] <jnthn> bryan[c1]: Hi. Most likely you're interested in Perl 5 rather than Perl 6, so this isn't *quite* the place to ask. :-) On Windows, I dobut it's the shebang line.

[02:11] <jnthn> Since those don't mean much to Windows in general.

[02:12] <bryan[c1]> i got banned from #perl for asking a question and some dude started an argument

[02:12] <bryan[c1]> and of course, the n00b that just came in is always wrong

[02:12] <jnthn> bryan[c1]: *sigh* Sorry to hear that. :-(

[02:12] <bryan[c1]> but on any note

[02:12] <jnthn> bryan[c1]: How are you trying to run the script?

[02:12] <colomon> rakudo: role Pint[::Beverage] { }; class Beer { method drink { say "glug" } }; my Pint of Beer @beers = Pint[Beer].new xx 4; @beers>>.drink;

[02:13] <bryan[c1]> cmd

[02:13] <bryan[c1]> im in the desktop directory and everything

[02:13] <p6eval> rakudo 7ce13d:  ( no output )

[02:13] <bryan[c1]> activeperl installed

[02:13] <jnthn> Just typing "perl thescript.pl"?

[02:13] <bryan[c1]> yeah

[02:13] <jnthn> Where thescript.pl is the name of your script?

[02:13] <jnthn> Hmm

[02:13] <bryan[c1]> weird right?

[02:13] <bryan[c1]> maybe i need to reinstall activeperl

[02:13] <jnthn> Does just "perl -v" give you any output?

[02:13] <bryan[c1]> yeah

[02:14] <sjohnson> bryan[c1]: i would recommend Strawberry Perl over ActivePerl

[02:14] <jnthn> bryan[c1]: Something like "This is perl v..."

[02:14] <jnthn> OK.

[02:14] <jnthn> Hmm. Does it say what file is not found? :-/

[02:14] <bryan[c1]> yeah it worken jnthn

[02:14] <bryan[c1]> yeah

[02:15] <bryan[c1]> no such file or directory LOL

[02:15] <jnthn> OK, so it's in your path alright.

[02:15] <jnthn> dir myscript.pl shows it?

[02:15] <jnthn> (where myscript.pl is file name of your script...)

[02:15] <jnthn> Starting cmd doesn't actually dump you into your desktop directly by default, you'd need a "cd Desktop" first to do that...

[02:16] <bryan[c1]> oh well i did that

[02:16] <bryan[c1]> im not THAT much of a n00b

[02:16] <jnthn> :-)

[02:16] <bryan[c1]> C:\Documents and Settings\Owner\Desktop>

[02:16] <jnthn> Hey, me either, but we can all make mistakes now and then. :-)

[02:16] <jnthn> OK, in that case...yes, it's...odd.

[02:17] <SirKay> hmm.

[02:17] <bryan[c1]> kk ill un install AP and install straw

[02:17] <jnthn> k

[02:17] <bryan[c1]> only answer i suppose

[02:18] *** zamolxes joined
[02:19] *** JimmyZ joined
[02:19] <SirKay> jnthn

[02:19] *** orafu left
[02:20] *** orafu joined
[02:20] <jnthn> SirKay: No, I don't really think there's some secret "key to everything". :-)

[02:21] <SirKay> Okay.  But perhaps something short of that, then.

[02:25] <jnthn> Find topics and niches that you enjoy and pursue them. Accept that computing is too big to understand everything out there, so get a sense of the bigger picture and then specialize in what you like doing most. Expect to write code now and look back at it in a year and wonder what you were thinking - and realize that means you've learned and accept it as a good thing. Accept that some things are Just Hard and don't feel bad about finding them so. Look at w

[02:25] <SirKay> Look at w

[02:26] <jnthn> Look at what others have done to learn from it rather than re-inventing wheels, unless all the existing wheels for the task at hand are square-shaped, in which case make a round one.

[02:26] <SirKay> Well.

[02:26] <SirKay> I don't want to be one of those people who thinks they're a good programmer and just more or less cribs the entire CPAN.

[02:27] <bryan[c1]> well its there for a reason

[02:27] <jnthn> SirKay: Knowing when to re-use what's out there, and when to make your own thing, is a difficult - but IMHO important - skill.

[02:27] <bryan[c1]> 2(jnthn2): i installed stawberry but its still not working

[02:27] <jnthn> bryan[c1]: What's in your script?

[02:28] <bryan[c1]> just the shebang and print hello world

[02:28] <bryan[c1]> well print "hello world";

[02:28] <SirKay> I understand.  I'm just saying a lot of people just write a little code, append some cpan libraries, and call it good

[02:28] <jnthn> SirKay: And if it just solved their problem, why isn't it good? :-)

[02:28] <bryan[c1]> then thats what your code is sirkay, you're not expected to 'reinvent the wheel', as he just said above.

[02:29] <SirKay> it's good, but it doesn't make you good.

[02:29] <bryan[c1]> its still YOUR code

[02:29] <SirKay> if that makes sense.

[02:29] <bryan[c1]> but finding the ins and outs and makes modules is advanced stuff

[02:29] <SirKay> Forgive me for sounding elitist about this, but...one of the main reasons I've redoubled my resolve to learn is in response to people who think they're great programmers even though much of their shit is trivial.

[02:30] <jnthn> SirKay: I dunno. I've seen plenty of bad reinventions of things that there are already good solutions out there. :-)

[02:30] <SirKay> I'm sure that happens, but you know what I mean.

[02:30] <jnthn> bryan[c1]: OK, I remain...puzzled. 

[02:31] <SirKay> People who claim to be "senior cadre of the internet" for no real reason, or "core linux developers" even when they don't have a single line of code in the kernel.

[02:31] <jnthn> bryan[c1]: Maybe try and pull out the shebang line?

[02:31] <jnthn> Just in case.

[02:31] <bryan[c1]> k

[02:31] <bryan[c1]> the whole file is : print "hello";

[02:31] <bryan[c1]> on one line

[02:31] <jnthn> Sure, that should be fine.

[02:32] <bryan[c1]> nope

[02:32] <SirKay> however, I was rightly admonished, by the person who recommended I learn Python instead of Perl, to not focus so negatively, so let's just say that right now my goal is to be able to make, at the very least, nontrivial programs.  ideally I will make programs people actually use and are also nontrivial.

[02:32] <SirKay> but nontrivial is good for a start.

[02:33] <jnthn> OK, if there's no shebang line and that's all in the file, I guess it ain't finding the file you're trying to run. Notepad didn't by any chance follow it's annoying habbit of adding .txt to the filename when you saved it?

[02:33] <bryan[c1]> no its test.pl

[02:33] <SirKay> Am I making sense?

[02:33] <bryan[c1]> sirkay, using modules isnt against any moral rules of programming

[02:33] <bryan[c1]> just use them when you need to, no one really cares.

[02:34] <jnthn> SirKay: It's fine to want to make nontrivial programs. It's also fine to use existing libraries to help you make them.

[02:34] <bryan[c1]> whats with the looking down on module use?

[02:34] <bryan[c1]> when you get deep into programming you're going to thank god for them

[02:35] <jnthn> I sure do.

[02:35] <SirKay> okay I have made myself misunderstood.

[02:35] <bryan[c1]> DBI, LWP, any module with file handling

[02:35] <SirKay> I am not saying "don't use modules" or "don't use cpan."  that would be dumb.

[02:35] <SirKay> I am saying "it would be nice if people actually understood what went into those modules and could recreate them on their own later on"

[02:36] <bryan[c1]> you're wondering where the skill has gone since they exist

[02:36] <bryan[c1]> you can look at the source code for all of them

[02:36] <SirKay> yes, I'm talking about the people who don't.

[02:36] <bryan[c1]> well, they're thinking "all i need to learn is the syntax, i dont need to know how it works"

[02:36] <bryan[c1]> in that case, they're probably just using perl for a specific reason

[02:36] <bryan[c1]> or they are just a weird perl programmer

[02:36] <SirKay> and that's why I don't really consider them programmers.

[02:37] <bryan[c1]> then so be it

[02:37] <bryan[c1]> you're only entitled to your own opinion

[02:37] <SirKay> I agree with jnthn that improperly reinventing the wheel is a waste of time at best

[02:38] <nbrown> SirKay: I think that's fine if the scope of that person's interest is to only get past their problem, but you seem more interested in learning how to program and how things work

[02:38] <arnsholt> ISO annoys me. They've got all these nice "open" standards. Except they cost a small fortune to get

[02:38] <SirKay> now wait.  bryan, what is the problem?  I'm not talking about you or anyone in the channel here.

[02:38] <nbrown> SirKay: in that case, the best way is to use what you need, write what you can and learn from both as best you can

[02:38] <SirKay> indeed nbrown.

[02:38] <jnthn> Nicely put. :-)

[02:38] <bryan[c1]> with all do respect sirkay, you turned it into a discussion about programming into a spouting of your opinions

[02:39] <bryan[c1]> sorry that didnt make much sense

[02:39] <bryan[c1]> im kinda high

[02:39] <bryan[c1]> but that aside, i still stand by my point.

[02:39] <SirKay> I could have said something snide, but I didn't.

[02:39] <jnthn> SirKay: Seeking to understand stuff is fine, and a Good Thing. Please understand that people getting their job done by just using stuff is also fine. :-)

[02:39] *** Exodist_ joined
[02:39] <bryan[c1]> (SirKay) and that's why I don't really consider them programmers.

[02:39] <SirKay> bryan, I admit that I sort of got on my soapbox there.

[02:40] <SirKay> but there is a good reason for it.

[02:40] <bryan[c1]> they dont consider YOU a programmer, you're whining about already created code

[02:40] *** Exodist left
[02:40] <bryan[c1]> try coding in c++ without the standard library

[02:40] <SirKay> Hmm.

[02:40] <bryan[c1]> have fun with that

[02:40] <quantumEd> standard libraries suck

[02:41] <nbrown> jnthn: dumb question, but where did the setting go in the ng branch?

[02:41] <nbrown> I'm just looking at it for the first time and feel a little lost

[02:41] <SirKay> Well man, as you say, you are entitled to your opinion.

[02:41] <bryan[c1]> thats not my opinion

[02:41] <bryan[c1]> i dont have an opinion on you

[02:42] <bryan[c1]> heres what im saying

[02:42] <bryan[c1]> if you were to have this conversation about how modules are for n00bs with some experienced programmers, they would laugh at you behind your back as soon as you walked away

[02:42] <bryan[c1]> if they werent nice people at least

[02:42] <SirKay> You misunderstood my point completely.

[02:43] <bryan[c1]> no i didnt

[02:43] <bryan[c1]> im just trying to shorten it

[02:43] <SirKay> My point is not, and would never be "modules are for noobs."

[02:44] <SirKay> As you say, that would be like coding in C without libraries.

[02:44] <bryan[c1]> i know that, it was a shortened version of your point

[02:44] <bryan[c1]> a generalized one

[02:44] <SirKay> Except it isn't.

[02:44] <bryan[c1]> you don't understand MY point, thats the problem

[02:44] <bryan[c1]> im not saying you're wrong

[02:44] <bryan[c1]> stop being so technical

[02:44] <bryan[c1]> i dont talk that way in chat rooms

[02:45] <jnthn> ng_feed: It's in core now

[02:45] * SirKay shrugs.

[02:45] <bryan[c1]> you think modules are for people that dont really care HOW it works, but just want to get a task done (i.e. not 'real' programmers, as you stated above)

[02:45] <jnthn> gah

[02:45] <jnthn> nbrown: it's in src/core/ now

[02:45] *** Exodist_ left
[02:45] <SirKay> And that is wrong.

[02:45] <bryan[c1]> in more detail, people that dont look at the source of the module and understand whats really going on

[02:46] *** Exodist joined
[02:46] <bryan[c1]> you're saying that only mechanics should drive cars because they understand how it works

[02:46] <jnthn> nbrown: Renamed it to fit a bit more with spec naming and STD...

[02:46] <bryan[c1]> im not wrong, that was totally your demeanor this whole time, SirKay

[02:46] <nbrown> jnthn: thanks, I felt a little lost poking around

[02:47] <SirKay> Whatever.  I'm dropping the argument.

[02:47] <bryan[c1]> just use the modules

[02:47] <bryan[c1]> if you want to know how it works, look at the source code

[02:47] * jnthn needs to sleep...it's late

[02:47] <jnthn> o/

[02:52] *** JimmyZ left
[02:55] *** Wolfman2000 joined
[02:55] <Wolfman2000> ...alright, 11 hours then.

[02:55] <phenny> Wolfman2000: 30 Nov 17:07Z <colomon_> tell Wolfman2000 For some stupid reason, I need the e-mail address you used to subscribe to wordpress, rather than your wordpress id.

[02:55] <Wolfman2000> colomon: you there?

[02:55] *** seano` joined
[02:55] <colomon> yes.

[02:56] <colomon> just putting finishing touches on a "how to get rakudo" post.

[02:56] <Wolfman2000> So the rakudo post wll be the first gift then?

[02:56] <colomon> yes.

[02:56] <Wolfman2000> Guess that means I'm getting bumped to Thursday at least

[02:56] <colomon> Do you have a post ready to go as well?

[02:57] <Wolfman2000> colomon: just got online when not dealing with classes.

[02:57] <Wolfman2000> I was going to plan my stuff now actually.

[02:57] <colomon> understood.

[02:57] <Wolfman2000> I'll be able to juggle gifts with my finals...they're all take home this semester

[02:58] <Wolfman2000> I know I earlier claimed the idea of multi subs with constraints...I'm wondering if Types should be introduced first before we go into multi subs and constraints.

[02:58] <Wolfman2000> There should be some logic and planning to the calendar.

[02:59] <colomon> agreed that a general notion of easier to harder and building upon earlier posts would be a good thing.

[02:59] <Wolfman2000> ...now's a good of time as any to plan this.

[02:59] <Wolfman2000> If this is on the pugs repo, I think I can commit to it.

[03:00] <Wolfman2000> ...man, wish masak was here. This way we can plan this better.

[03:00] <colomon> our notes (what there are) are there.

[03:01] <colomon> Yeah, planning for more than a day or two will probably go better in the morning, when everyone else is awake again.

[03:02] <colomon> what is the e-mail address you used to create your wordpress account?  just the id isn't good enough for something reason.

[03:02] <Wolfman2000> colomon: thought I /msg'ed you it

[03:02] <Wolfman2000> guess it didn't take

[03:02] <colomon> it did.

[03:02] <colomon> I just completely failed to notice.

[03:02] <colomon> one sec.

[03:04] <colomon> bingo.  you're on it now.

[03:05] *** seano` left
[03:07] <Wolfman2000> colomon: got the email. Nice greet message. "If you don't care, just ignore this email.  :)"

[03:07] <colomon> :)

[03:09] <pugs_svn> r29220 | jafelds++ | Add myself to the list of volunteers. 

[03:11] <Wolfman2000> guess I'm definitely in now. Now we just have to figure out not only the schedule of when we speak...but the topics.

[03:11] <Wolfman2000> colomon: I'm guessing you've got the first day.

[03:12] <colomon> yes.

[03:13] <colomon> it's all cued up (queued up, too), just hoping to have some of the rest of the gang proofread it.

[03:14] <colomon> I think you should be able to see the draft if you go to "Posts" in the dashboard.

[03:14] <Wolfman2000> ...we cna make drafts? wow

[03:14] <pugs_svn> r29221 | jafelds++ | Add our gift to the schedule. 

[03:15] <Wolfman2000> I just can't view yours.

[03:15] <colomon> Really?

[03:15] <Wolfman2000> ...let me try something else

[03:16] <Wolfman2000> okay, maybe not. I'm not exactly used to wordpress that much here.

[03:16] <colomon> I've never actually tried doing anything with wordpress before, so I don't quite know what its capabilities are.

[03:16] <Wolfman2000> I can view your published post. Don't think I can view your draft

[03:16] <colomon> well hell.

[03:17] <colomon> okay, I'll proof it quickly and then post it.  we can probably fix any mistakes before anyone else notices.  :)

[03:17] <Wolfman2000> you're brave, that's for sure

[03:17] <Wolfman2000> anyway, I'm debating whether we should add a list of possible topics/gifts on the schedule file as well

[03:19] <colomon> It's probably not a bad idea.  Though I suspect masak doesn't have anything firm in mind for the days he picked (for example).

[03:19] <Wolfman2000> He can easily talk about Web.pm

[03:19] <colomon> maybe should add a topic brainstorming file as well.

[03:22] <colomon> Well, day 1 is live.

[03:22] <zaslon> lolperl6adventhazblogged! perl6advent++ 'Day 1: Getting Rakudo': http://perl6advent.wordpress.com/2009/12/01/day-1-getting-rakudo/

[03:26] *** envi^home joined
[03:26] *** KatrinaTheLamia left
[03:27] <pugs_svn> r29222 | colomon++ | [perl6advent] Claim some dates, start a brainstorming file. 

[03:27] *** JimmyZ joined
[03:30] <Wolfman2000> afk

[03:33] <TimToady> r/e

[03:35] <colomon> r/e ?

[03:35] <JimmyZ> ng: ~(Str.^methods).say;

[03:35] <p6eval> ng f2ba53: succ ACCEPTS WHICH pred perl acotan roots lcfirst sec asec trim cotanh map cis log sech rand bytes sin sqrt asin cosh asinh acosech abs uc ceiling floor substr asech ord round does flip split match acosec acosh words cosech cotan atan2 reverse isa ucfirst comb tan atan cos acos fmt chop

[03:35] <p6eval> ..t…

[03:35] <JimmyZ> ng: say ~(Str.^methods);

[03:35] <p6eval> ng f2ba53: WHICH pred perl ACCEPTS succ asec trim chr acotanh floor sech asech rand round sqrt asin split exp cosh match acosh words can cotan atan2 lcfirst sec map cis log sin does flip p5chop lc abs acotan acosech chomp index ceiling cotanh comb atan ord acos chop tanh atanh cosec chars roots uc

[03:35] <p6eval> ..r…

[03:35] <JimmyZ> rakudo: say ~(Str.^methods);

[03:36] <p6eval> rakudo 7ce13d: encode succ WHICH ACCEPTS perl sprintf Scalar Complex Str pred polar ucfirst comb tan atan cos acos fmt first trans chop rindex tanh values subst elems chomp index keys chr acotanh pairs kv capitalize pick evalfile atanh cosec exp p5chop lc join chars sinh can acotan lcfirst roots

[03:36] <p6eval> ..reduce …

[03:36] <pugs_svn> r29223 | colomon++ | [perl6advent] Another idea. 

[03:36] <JimmyZ> rakudo: ~(Str.^methods).say;

[03:36] <p6eval> rakudo 7ce13d:

[03:36] <p6eval> ..sprintfScalarComplexStrpredsuccencodeperlACCEPTSWHICHelemschompindexkeyschracotanhpairskvcapitalizepickevalfileatanhcosecexpp5choplcjoincharssinhcanacotanlcfirstrootsreducetrimaseccotanhmap:dcis:e:flogsechminrandmaxtruncatebytessortsinsqrtasinIntcoshgrepasinhacosechabsenducceilingp5chomps…

[03:36] <quantumEd> coool!

[03:38] <JimmyZ> ng++

[03:42] *** KatrinaTheLamia joined
[03:43] *** ShaneC left
[03:45] <diakopter> rakudo: Str.^methods.sort.say

[03:45] <p6eval> rakudo 7ce13d: Multiple Dispatch: No suitable candidate found for 'cmp', with signature 'PP->I'␤in Main (file <unknown>, line <unknown>)␤

[03:46] <diakopter> rakudo: Str.^methods[0].PARROT.say

[03:46] <p6eval> rakudo 7ce13d: Sub␤

[03:52] *** envi^office joined
[03:54] <diakopter> rakudo: Str.^methods.grep({ ~$^a eq 'capitalize' })[0]("hihi").say  # okay, so that's like JavaScript's Function.prototype.call

[03:54] <p6eval> rakudo 7ce13d: Hihi␤

[03:55] <nbrown> rakudo: class A {}; role A {}; say "alive";

[03:55] <p6eval> rakudo 7ce13d:  ( no output )

[03:55] <diakopter> nbrown: unfortunately we can't figure out why the evalbot spins on class definitions (and others)

[03:56] <nbrown> diakopter: yeah I thought that was true, but it was worth a shot

[03:57] <nbrown> std: class A {}; role A {};

[03:57] <p6eval> std 29223: ok 00:00 105m␤

[03:57] <nbrown> diakopter: I was just wondering if it was valid to name a class and a role the same thing

[03:59] <JimmyZ> rakudo: Str.^methods.grep({ ~$^a eq 'foo' })[0]("hihi").say

[03:59] <p6eval> rakudo 7ce13d: invoke() not implemented in class 'Undef'␤in Main (file <unknown>, line <unknown>)␤

[03:59] <JimmyZ> ng: Str.^methods.grep({ ~$^a eq 'foo' })[0]("hihi").sayng: 

[03:59] <p6eval> ng f2ba53: Confused at line 1, near "Str.^metho"␤current instr.: 'perl6;HLL;Grammar;panic' pc 519 (src/stage0/HLL-s0.pir:336)␤

[03:59] <JimmyZ> ng: Str.^methods.grep({ ~$^a eq 'foo' })[0]("hihi").say: 

[03:59] <p6eval> ng f2ba53: Confused at line 1, near "Str.^metho"␤current instr.: 'perl6;HLL;Grammar;panic' pc 519 (src/stage0/HLL-s0.pir:336)␤

[04:04] <diakopter> nbrown: that's a good question

[04:05] <perigrin> nbrown: I'm guessing here but I can't see how that would be valid given that in perl6 Roles and Classes are interchangeable-ish

[04:06] <perigrin> it fails in Moose because a Role and a Class are each packages and you can't have two packages with the same name. 

[04:07] <diakopter> perigrin: I agree...

[04:08] <diakopter> in fact, I suspect Role has a proper superset of Class's semantics

[04:08] <nbrown> perigrin: I agree too, I was just trying to understand the IO portion of S32

[04:08] <diakopter> (implying Class might be redundant)

[04:08] <perigrin> diakopter: not exactly

[04:08] <nbrown> and it has and IO class and role

[04:09] <nbrown> I was trying to determine if that made sense or needed work

[04:09] <perigrin> diakopter: I take that back ... in perl6 you may be right, I'm not entirely sure how the semantics there play out.

[04:10] <nbrown> diakopter: I'm little confused, how might it be redundant?

[04:11] <perigrin> nbrown: if you view a class as an set of Methods and Attributes

[04:11] <perigrin> and a Role as a Set of Methods and Attributes

[04:11] <diakopter> if any Class declaration means the same as a Role declaration with exactly the same content, then it's redundant

[04:12] <perigrin> hmm yeah diakopter just said it much shorter

[04:13] <diakopter> I don't know tho

[04:13] <nbrown> diakopter: ok..... I guess I was a little confused by the superset comment.  I don't really see the difference between the two except how you apply them

[04:13] *** jeremiah left
[04:14] *** jeremiah joined
[04:14] <diakopter> ng: die (*)

[04:14] <p6eval> ng f2ba53: too few positional arguments: 3 passed, 4 (or more) expected␤current instr.: 'perl6;Code;new' pc 9748 (src/builtins/List.pir:144)␤

[04:14] *** justatheory left
[04:14] <diakopter> perl6;Code;new ?

[04:17] <diakopter> rakudo: ::die (4)

[04:17] <p6eval> rakudo 7ce13d: Confused at line 2, near "(4)"␤in Main (file <unknown>, line <unknown>)␤

[04:17] <diakopter> rakudo: ::die(4)

[04:17] <p6eval> rakudo 7ce13d: 4␤in Main (file /tmp/E9vXTMcdLi, line 0)␤

[04:17] <diakopter> ng: ::die(4)

[04:18] <p6eval> ng f2ba53: Null PMC access in invoke()␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[04:20] *** alester joined
[04:20] *** astrojp joined
[04:23] *** astrojp left
[04:24] <diakopter> ng: my Int $a = 78.8; say $a.WHAT

[04:24] <p6eval> ng f2ba53: Rat()␤

[04:25] *** beggars joined
[04:32] <Wolfman2000> I'll be back on...within an hour. even if I idle.

[04:32] *** Wolfman2000 left
[04:33] <diakopter> TimToady: S05:2291

[04:34] <diakopter> should that list include something like "a reference to [a rule that causes a reference to] itself"

[04:36] *** beggars left
[04:37] *** xenoterracide joined
[04:37] <diakopter> pmichaud: any idea? (does ltm include only regular languages)

[04:51] *** quantumEd left
[05:04] *** Wolfman2000 joined
[05:10] <Wolfman2000> evening/morning

[05:12] <diakopter> , the first day

[06:03] *** beggars joined
[06:28] *** PZt left
[06:30] <diakopter> [OT] http://blog.sigfpe.com/2009/11/programming-with-impossible-functions.html

[06:36] *** stephenlb left
[06:52] <TimToady> diakopter: S05:2258 already disallows recursion on LTM

[07:08] *** JimmyZ left
[07:09] *** rgrau` left
[07:12] *** justatheory joined
[07:16] *** PZt joined
[07:20] *** rfordinal joined
[07:25] *** kaare joined
[07:26] *** kaare is now known as Guest87125

[07:26] *** alester left
[07:28] *** pnate joined
[07:31] *** justatheory left
[07:34] <moritz_> good morning

[07:41] <colomon> morning.

[07:41] *** rlarson`a left
[07:41] *** rfordinal left
[07:42] *** rlarson8` joined
[07:46] <dukeleto> moritz_, colomon: mornin'

[07:47] <colomon> o/

[07:49] <colomon> think I've got the boy asleep, back to bed for me...

[07:49] <moritz_> good night

[07:49] *** envi^home left
[07:59] *** colomon left
[08:11] *** iblechbot joined
[08:12] <mathw> Good morning

[08:22] *** broquaint left
[08:25] <pugs_svn> r29224 | moritz++ | [advent] volunteer for 4th Dec; brainstorming 

[08:27] *** dakkar joined
[08:53] *** JimmyZ joined
[09:01] *** meppl joined
[09:05] *** colomon joined
[09:26] *** pdcawley joined
[09:27] *** xinming left
[09:30] *** colomon_ joined
[09:30] *** colomon left
[09:30] *** colomon_ is now known as colomon

[09:30] *** mariuz joined
[09:34] *** xinming_ joined
[09:40] <sjohnson> rakudo:  my $x = "\t"; say split("\t", $x).perl;

[09:40] <p6eval> rakudo 7ce13d: ["", ""]␤

[09:40] <mathw> hi sjohnson 

[09:41] <sjohnson> y0

[09:41] <sjohnson> mathw: do you know if you can somehow return the same result in p5?  it will return nothing

[09:41] <sjohnson> as opposed to two empty strings

[09:42] <moritz_> sjohnson: yes, write it with comb

[09:42] <sjohnson> ...  what is that   *hides under pillow*

[09:42] <moritz_> $x.comb(/\T+/)

[09:42] <mathw> comb is much like split, but you say what you want to keep

[09:42] <moritz_> comb is searching for what you want, split is search for what you don't want

[09:43] <sjohnson> but in p5 though?

[09:43] <mathw> rakudo: my $x = "\t"; $x.comb(/\T+/).perl.say;

[09:43] <p6eval> rakudo 7ce13d: []␤

[09:45] *** colomon_ joined
[09:45] *** colomon left
[09:45] *** SirKay left
[09:45] *** colomon_ is now known as colomon

[09:47] <moritz_> in p5: grep length, split /\t/, $x;

[09:48] <sjohnson> i tried Dumper on that

[09:48] <sjohnson> doesn't print anything...

[09:48] <sjohnson> *scratches head*

[09:49] <moritz_> oh wait

[09:49] <moritz_> I misunderstood

[09:50] <moritz_> print Dumper [split(/\t/, $x), $x =~ /\t\z/ ? '' : ()]

[09:50] <moritz_> or so

[09:51] <sjohnson> thanks

[09:51] <sjohnson> my brother came into my room and brought this to my attention

[09:51] * mathw prefers the Perl 6 way

[09:51] <sjohnson> i guessed correctly that it would return nothing, but he thought it was better if it did it the perl6 way

[09:51] <mathw> I find using split and join and so forth as method calls leads to much more readable code

[09:51] <sjohnson> i think i sold him on p6 when i ran rakudo with him in my room

[09:51] <mathw> yay!

[09:52] <mathw> sjohnson++

[09:52] <sjohnson> thanks!

[09:53] <sjohnson> he ran into this problem with Java, where it was doing only half of what p6 was doing

[09:53] <sjohnson> something along the lines of only returning the left empty string

[09:53] <moritz_> mathw: agreed

[09:53] <mathw> Ah Java

[09:53] <mathw> some of its libraries do strange things

[09:54] <sjohnson> yeah this do.this.that.thenthis is my kind of syntax

[09:54] <sjohnson> another reason why i thought ruby would be great, but then perl 6 came knocking at my door

[09:55] <moritz_> I'm sure I'll love the feed operators once they are (partially) implemented

[09:55] <moritz_> writing multiple maps/greps in a statement feels always backwards

[09:55] <moritz_> but with feeds you can write them in forward

[09:56] <sjohnson> i need to lose my perl virginity, and start using map more often in my code

[09:56] <sjohnson> it's one of those things i know is very cool and powerful, but i'm afraid to use as i keep forgetting the syntax

[09:56] <moritz_>  @list ==> map { 2*$x + 1 } ==> grep { $x !% 3 } ==> my @result

[09:57] <moritz_> (assuming I understood how feeds are supposed to work)

[09:57] <mathw> sjohnson: I take it you never did functional programming then? That's how I learned to use map.

[09:57] *** rfordinal joined
[09:57] <sjohnson> mathw: i've used it about 3 times, i kind of get the idea, but maybe my uses are a bit novice-level.  i use it to do quick changes to every element of a list

[09:57] <mathw> That's a perfectly acceptable use of it

[09:58] <sjohnson> but there are probably uses that are beyond my wildest dreams

[09:58] <mathw> It's so ingrained in my way of thinking that I get angry with C++ for not having anonymous functions so I can easily map one over a list

[09:58] <mathw> (bring on the next standard, which does have lambdas)

[10:00] <sjohnson> i probably haven't done any funtional programming.  i don't fully grasp even what the term means

[10:00] <sjohnson> i have heard it used to describe things like ocaml and haskell though

[10:01] *** snearch_ joined
[10:02] <sjohnson> perl is pretty cool.  i use it a lot at work for my own use

[10:03] <sjohnson> unfortunately not much new stuff / excuses come up to use it at work, so i try to make time for it

[10:06] <sjohnson> i use it for all sorts of great things, like alternate vim frontends so that i quit editing 2 files at once in Vim by accident, or a handler for ls, so that if i type "ls l-"  it knows what i want to do 

[10:06] <sjohnson> or ls- l

[10:16] *** envi^office left
[10:19] *** riffraff joined
[10:21] <mathw> Perl is very cool indeed

[10:21] <mathw> Functional programming would refer to Haskell and OCaml, since they're functional programming languages

[10:21] <mathw> Haskell being just about the purest one going, OCaml is a bit more of a mixture

[10:21] <sjohnson> but does that mean that.. all you do is call functions?

[10:21] <mathw> Perl supports many functional concepts

[10:21] <sjohnson> i am not an expert with perl's OO syntax

[10:22] <mathw> well in its purest form, it means that any function's result is entirely determined by its arguments

[10:22] *** JimmyZ_ joined
[10:22] <mathw> and before you say well of course

[10:22] <mathw> think about functions which look at other sources of state

[10:22] <frettled> or take user input

[10:22] <mathw> yes

[10:23] <mathw> unfortunately that does mean that in pure functional programming, user input and network or file I/O are difficult to fit into the overall structure

[10:23] <mathw> you have to cheat

[10:23] <frettled> It's when you accept input that nearly all bets are off, muahaha.

[10:23] <frettled> (input from external sources, that is)

[10:23] <mathw> But the advantage is that pure functional code is very easy to reason about

[10:23] *** riffraff left
[10:23] <mathw> Proof of correctness is a lot easier

[10:23] <frettled> It is, that's why provers are often written in functional languages.

[10:23] <mathw> Absolutely

[10:24] <mathw> Language researchers are very into it

[10:24] <mathw> Well, some of them - some of them are presumably researching other paradigms

[10:25] <frettled> One of my favourite difficult classes from the university was called Verifiable Programming.

[10:25] *** riffraff joined
[10:25] <mathw> lots of preconditions, postconditions, invariants, bound functions and proofs?

[10:26] <frettled> No, wait, that was the name of the book.  The course was called Program Specification and Verification.

[10:26] <mathw> I did one called Program Construction and Verification

[10:26] <mathw> which was probably very similar

[10:26] <frettled> The first part of the course deals with how to specify your programs in order to avoid errors, the second part uses Hoare logic etc. for verification and proving.

[10:27] *** broquaint joined
[10:29] <mathw> Yes, it's basically the same course I did then

[10:29] <mathw> I really enjoyed it

[10:30] <frettled> Yup.

[10:30] <frettled> The lecturer was Ole-Johan Dahl, quite a character.

[10:30] <mathw> Our lecturer was writing his own textbook on the subject at the time

[10:30] <mathw> He used it as the course text, so we got handed out printouts of the late drafts of it

[10:30] <mathw> So I've got his entire textbook in almost-final form, for free

[10:30] <frettled> :)

[10:31] <mathw> Although have considered buying the actual book a few times

[10:31] <sjohnson> mathw: do you have any preference of C over C++ or vice-versa?

[10:32] <mathw> But it's him I got my thing for correct-by-construction programming from, even if I don't get a chance to exercise that very often

[10:32] <mathw> sjohnson: I prefer C++

[10:34] *** colomon_ joined
[10:34] *** colomon left
[10:34] *** colomon_ is now known as colomon

[10:34] *** JimmyZ_ left
[10:35] <sjohnson> mathw: may i ask a couple questions?  i was thinking of writing maybe an application someday, but i can never decide which one to try and learn

[10:35] <sjohnson> C or C++

[10:35] <mathw> Sure

[10:35] <sjohnson> though, 99% of the things i need coded can be best coded in Perl, so it's not a huge worry, but i am still curious

[10:36] <mathw> I do C++ for a living, so I know a bit of it :)

[10:36] <sjohnson> i do javascript and PHP and some perl for a living, but i'm probably not the best at it :)

[10:37] <mathw> I'm definitely not the best at it, but there's always someone better

[10:37] <mathw> So ask away :)

[10:38] <jnthn> o/

[10:38] <mathw> oh hai jnthn

[10:39] <mathw> By the way, if we're obstructing Perl talk with our other-languages talk, we'll take it somewhere else...

[10:40] *** JimmyZ left
[10:41] <jnthn> I was gonna say we'd happily steal things, but now I see PHP and C++ I'm not so sure that applies... ;-)

[10:44] <frettled> hehe

[10:52] <mathw> lol

[10:52] <mathw> no you probably don't want to

[10:53] <bryan[c1]> 2(jnthn2): why doesnt me perl work still?

[10:58] <jnthn> bryan[c1]: Well, because you didn't figure out why it won't...I kinda already gave you all my suggestions last night though.

[10:58] <bryan[c1]> last night?

[10:58] <bryan[c1]> im still in the same day hahahah

[10:59] <bryan[c1]> seriously though, i uninstalled activeperl and installed strawberry perl

[10:59] <bryan[c1]> i dont understand how it could just sit there and say it doesnt exist

[11:06] *** rfordinal left
[11:20] *** mariuz left
[11:21] *** agentzh left
[11:47] *** SmokeMachine joined
[12:06] *** envi^home joined
[12:12] *** ruoso joined
[12:14] *** bluescreen joined
[12:16] *** rfordinal joined
[12:25] *** bluescreen left
[12:25] *** bluescreen joined
[12:28] *** bluescreen left
[12:28] *** bluescreen joined
[12:32] *** iblechbot left
[12:50] *** payload left
[12:58] *** SmokeMachine left
[13:00] *** patspam joined
[13:00] *** patspam left
[13:03] *** allbery_b joined
[13:06] *** colomon_ joined
[13:06] *** colomon left
[13:06] *** colomon_ is now known as colomon

[13:06] *** dakkar left
[13:09] *** bryan[c1] left
[13:09] *** SmokeMachine joined
[13:11] *** takadonet joined
[13:16] <takadonet> hey all

[13:16] <moritz_> wow, quiet in here today

[13:16] <moritz_> hi takadonet 

[13:16] <takadonet> moritz_: how are you doing?

[13:17] <moritz_> stressed

[13:18] <takadonet> moritz_: work?

[13:18] <mathw> Hey

[13:18] <moritz_> kinda

[13:20] <moritz_> takadonet: what about you?

[13:22] *** snearch_ left
[13:22] <takadonet> moritz_: Busy at work working on my large Perl 5 project (485 modules) while helping one of our co-op student speed up his Perl 5 script which working on a data set of a few million records

[13:23] <moritz_> takadonet: what's the project about?

[13:23] <moritz_> some kind of data analysis?

[13:24] <takadonet> moritz+: Yes, for bioinformatics. I'm been heavily modifying this application called Gendb: http://www.cebitec.uni-bielefeld.de/groups/brf/software/gendb_info/  

[13:26] <moritz_> sounds pretty interesting

[13:27] <moritz_> sadly bielefeld is part of a huge consiparcy, and I can't take anything seriously that comes out of bielefeld :-)

[13:27] <takadonet> moritz_ : I really love it . This going to be my project for the next few years 

[13:27] <takadonet> I heard that 

[13:28] <takadonet> but really have no idea what's it really about

[13:28] <takadonet> <--- Canadian 

[13:28] <moritz_> http://en.wikipedia.org/wiki/Bielefeld_Conspiracy

[13:30] *** colomon left
[13:31] <takadonet> wow hehe

[13:32] *** tylerni7 joined
[13:34] *** iblechbot joined
[13:35] *** colomon_ joined
[13:37] * moritz_ wonders if pmichaud++ is doing a rakudo day or so soon

[13:44] *** colomon_ left
[13:45] *** payload joined
[13:46] <moritz_> std: undef

[13:46] <p6eval> std 29224: [31m===[0mSORRY![31m===[0m␤Obsolete use of undef as a value; instead, in Perl 6 please use the most appropriate of:␤       Mu (the "most undefined" type object),␤   a more specific undefined type object such as Int,␤       Nil as an empty list,␤    *.notdef as a matcher or method,␤

[13:46] <p6eval> ..Any:U as a type con…

[14:04] <pugs_svn> r29225 | masak++ | [misc/perl6advent-2009/schedule] nailed down a few topics 

[14:06] *** beggars left
[14:08] *** colomon joined
[14:12] *** mberends joined
[14:12] <colomon> moritz_: I hope pmichaud++ is doing a rakudo day today.  I think every day I'm the only one doing ng commits is probably two days later it gets....  ;)

[14:13] <mberends> moritz_: Bielefeld: klasse :-)

[14:13] <Wolfman2000> *yawn* morning

[14:13] <mberends> morning!

[14:16] *** perlygatekeeper joined
[14:20] <dbrock`> colomon: haha

[14:21] <moritz_> colomon: I hope you're not serious; so far your ng commits looked pretty good

[14:23] *** iblechbot_ joined
[14:24] *** iblechbot left
[14:24] *** xinming_ left
[14:24] <pmichaud> I'm surrfering from ISP fail at the moment :0|

[14:24] <pmichaud> *suffering

[14:24] <frettled> Pain! Suffering! Torment!

[14:24] <pmichaud> ISP currently giving about 30% packet loss

[14:25] <frettled> That sounds like a good name for a TECO parser for Perl 6.

[14:25] <moritz_> ISP--

[14:25] *** frettled sets mode: +oo colomon mberends

[14:26] <mberends> It was off topic, but hopefully bryan[c1] of http://irclog.perlgeek.de/perl6/2009-12-01#i_1785868 got his Strawberry Perl to work. OTOH, something must have gone badly wrong between asking a simple question and getting banned from #perl. His argument with SirKay was something both of them should have been mature enough to avoid. It goes against the #perl6 spirit of friendliness and wasted a lot of our mindshare. Next time bryan[c1] shows up, let's giv

[14:26] <mberends> e him lots of hugs.

[14:27] <moritz_> ENOHUGME

[14:28] <mberends> awww

[14:28] *** hugme joined
[14:28] <moritz_> it seems hugme doesn't recover from netsplits :(

[14:28] *** moritz_ sets mode: +v huf

[14:28] <mberends> hugme: hug moritz_ 

[14:28] * hugme hugs moritz_

[14:28] *** moritz_ sets mode: -v huf

[14:28] *** moritz_ sets mode: +v hugme

[14:29] <moritz_> sorry huf, tab fail :-)

[14:29] <huf> ;) OH NO

[14:35] *** pointme left
[14:35] *** zaslon left
[14:36] *** pointme joined
[14:36] *** zaslon joined
[14:39] <frettled> mberends: yikes, I'm glad I slept through that.

[14:39] <frettled> hugme: hug me

[14:39] * hugme hugs frettled

[14:39] * frettled smiles again.

[14:39] <mberends> frettled: had to read it in the backlog. addicted to backlogging ;)

[14:41] *** rodi joined
[14:41] <frettled> mberends: I'm kindof addicted to backlogging, but I'm slowly getting over it.  :D

[14:42] <frettled> So, does anybody else here want to join in implementing PST?

[14:42] <moritz_> PST?

[14:42] <frettled> Pain, Suffering and Torment - a TECO parser in Perl 6 :D

[14:43] *** xinming joined
[14:44] <moritz_> you mean parsing things like this: http://en.wikipedia.org/wiki/Text_Editor_and_Corrector#Example_programs ?

[14:44] <frettled> yep

[14:45] <frettled> I usually use TECO as a «STFU»-thing for people who think Perl is like line noise.

[14:48] *** rfordinal left
[14:48] <frettled> On a more serious note, I think it might be an opportunity for learning some grammar and parsing skills.  There is this thing about time, though, *Sigh*.

[14:48] *** Guest87125 left
[14:49] <moritz_> well, my TODO list for Perl 6 is already quite long

[14:49] <moritz_> pushing it to the end will do it no good

[14:50] <arnsholt> frettled: The TECO parser should have three main components, named Pain, Suffering and Torment ;p

[14:51] *** quantumEd joined
[14:51] <moritz_> (among them are: implement some builtins in ng; write more for the book; blog; write for the Perl 6 advent calendar; write a synopsis on testing; hack a bit on dev.perl.org/perl6/; convince TheDamian to finally put the current version of this S26 draft into the pugs repo; ...)

[14:51] <frettled> arnsholt: :D

[14:51] *** rgrau_ joined
[14:51] <frettled> moritz_: Yes, that ought to suffice for April …

[14:52] <moritz_> continued: help proto; investigate more about putting Perl 6 modules on CPAN.

[14:53] <moritz_> frettled: if I got a job as full-time Perl 6 hacker, I'd have a chance of getting 3/4 or so done until April :-)

[14:55] <frettled> moritz_: the last thingy can be solved through forgiveness ;)

[14:55] <frettled> moritz_: eh, the last thing from the first list, that is.

[14:55] * frettled pats itself.

[14:57] <mathw> hmm the perl 6 advent calendar

[14:58] <frettled> yes, I should check that one out

[15:03] * mathw subscribes to it

[15:03] <mathw> Are authors required?

[15:04] <moritz_> yes

[15:04] <moritz_> see http://svn.pugscode.org/pugs/misc/perl6advent-2009/

[15:06] <mathw> excellent

[15:06] <pugs_svn> r29226 | jafelds++ | Add other ideas for topics. 

[15:07] <mathw> I shall have to think of a topic or two I can write about usefully

[15:07] <mathw> and grab some days

[15:07] <mathw> and sort out anything else that needs sorting out

[15:08] * frettled too :D

[15:08] <moritz_> mathw: you don't even need to come up with ideas on your own, you can use some from the brainstorming list

[15:08] <mathw> yes, but then there's the matter of precisely how much scope to use etc.

[15:08] <mathw> something about Perl 6's OOP is probably a good starting point

[15:08] <mathw> or maybe the joy of for loops

[15:09] <mathw> when combined with pointy blocks

[15:09] <mathw> and the Z operator

[15:09] <mathw> and prefix:<^>

[15:09] <frettled> . o O ( against loops?  Could we have that? )

[15:09] <Wolfman2000> rakudo: say (1..6).pick(2)

[15:09] <moritz_> zip is another good idea

[15:09] <p6eval> rakudo 7ce13d: 61␤

[15:09] <Wolfman2000> rakudo: say (1..6).pick(2).join(" ")

[15:09] <p6eval> rakudo 7ce13d: 5 4␤

[15:09] <Wolfman2000> ...I forgot. Does pick allow picking the same value twice?

[15:09] *** colomon left
[15:09] <Wolfman2000> rakudo: say (1..6).pick(2).join(" ")

[15:09] <p6eval> rakudo 7ce13d: 4 2␤

[15:09] <Wolfman2000> rakudo: say (1..6).pick(2).join(" ")

[15:10] <p6eval> rakudo 7ce13d: 1 2␤

[15:10] <mathw> okay

[15:10] <frettled> rakudo: say (1..2).pick(4).join(" ")

[15:10] *** zloyrusskiy joined
[15:10] <p6eval> rakudo 7ce13d: 2 1␤

[15:10] <mathw> I should sign myself up

[15:10] <mathw> shame my pugscode SVN details are at home

[15:10] <Wolfman2000> rakudo: say (1..2).pick(4, true).join(" ")

[15:10] <p6eval> rakudo 7ce13d: Confused at line 2, near "(4, true)."␤in Main (file <unknown>, line <unknown>)␤

[15:10] <Wolfman2000> rakudo: say (1..2).pick(4, Bool::True).join(" ")

[15:10] <p6eval> rakudo 7ce13d: No candidates found to invoke␤in Main (file <unknown>, line <unknown>)␤

[15:11] <frettled> The rakudobot is annoyingly quick these days ;)

[15:11] <Wolfman2000> ...could have thought there was an option.

[15:11] <moritz_> rakudo: say (1..2).pick(4, :replace).perl

[15:11] *** zloyrusskiy left
[15:11] <p6eval> rakudo 7ce13d: [1, 2, 2, 1]␤

[15:11] <Wolfman2000> ...I thought adverbs weren't implemented in rakudo yet

[15:11] <moritz_> that's not an adverb to an operator

[15:11] *** quantumEd left
[15:12] <moritz_> it's just a named argument

[15:12] <pugs_svn> r29227 | jafelds++ | Plan to discuss this topic. 

[15:12] <Wolfman2000> ...oops. wonder why it didn't show that I uploaded schedule

[15:12] * Wolfman2000 doesn't understand pugs_svn

[15:13] <moritz_> pugs_svn: just reports revision number, author and log message

[15:13] <Wolfman2000> I could have thought it also reported files on occasion

[15:13] <moritz_> never

[15:13] <moritz_> but people generally put a small moniker in square brackets into the commit message

[15:14] <moritz_> to indicate the subsytem that was changed

[15:14] <Wolfman2000> ...yeah, that

[15:14] <moritz_> [advent] or [t/spec] or so

[15:24] <rgrau_> moritz_: how about announcing the perl6 advent on twitter account? (individually or every day)

[15:24] <frettled> or on perl6.org :D

[15:26] <mathw> and everywhere

[15:26] <mathw> everywhere!!

[15:27] <Wolfman2000> you guys are more fanatic about Perl 6 than I realized

[15:29] <frettled> Huh?

[15:29] *** colomon_ joined
[15:30] <Wolfman2000> ...don't worry about t

[15:30] <Wolfman2000> about it*

[15:30] * Wolfman2000 starts some of his final assignments.

[15:31] <mathw> I have pinned my entire future sanity on Perl 6

[15:31] <moritz_> hugme: tweet rakudoperl The Perl 6 advent calendar: http://perl6advent.wordpress.com/

[15:31] * hugme hugs moritz_; tweet delivered

[15:32] <moritz_> hugme: tweet rakudoperl perl6 advent calendar day 1: get and install rakudo http://perl6advent.wordpress.com/2009/12/01/day-1-getting-rakudo/

[15:32] * hugme hugs moritz_; tweet delivered

[15:33] <moritz_> rgrau_++ # good idea

[15:33] *** alester joined
[15:34] *** colomon joined
[15:35] <ng_feed> rakudo-ng: (Jonathan Scott Duff)++

[15:35] <ng_feed> rakudo-ng: Add while/until statement modifiers

[15:36] *** colomon_ left
[15:36] * jnthn back

[15:37] *** payload left
[15:39] <jeremiah> Whoah, that perl 6 advent calendar is a great idea. :)

[15:41] <frettled> Oooh, hugme-tweeting, that's neat.

[15:43] <Tene> pmichaud: I bet you know what I'm going to ask about. ;)

[15:44] <pmichaud> Tene: indeed, I do

[15:44] <pmichaud> I worked on it some last night but then ISP connection failed (and I was getting tired)

[15:44] <mathw> I assume hugme only pays attention to certain people

[15:44] <mathw> o/ jnthn

[15:44] <pmichaud> and this morning I'm trying to find a 50% slowdown in Parrot

[15:45] <pmichaud> (an as-yet-unexplained 50% execution cost, that is)

[15:45] <mathw> ouch

[15:45] <jnthn> pmichaud: huh?

[15:45] <mathw> good luck

[15:45] <jnthn> pmichaud: Parrot good 50% slower?

[15:45] <jnthn> *got

[15:45] <jnthn> lol

[15:45] <pmichaud> jnthn: no

[15:45] <pmichaud> see  http://nopaste.snit.ch/18908

[15:45] *** masak joined
[15:45] <masak> oh hai #perl6

[15:45] <jnthn> lolitsmasak

[15:46] <masak> omgitsjnthn

[15:46] <mathw> \o/ masak

[15:46] *** alexn_org joined
[15:46] <masak> I'm thinking I might write the Dec 2 advent post about .fmt today. that way, I don't have to write it tomorrow, just post it. :)

[15:46] <jnthn> pmichaud: huh...wtf.

[15:47] <mathw> masak: good plan

[15:47] <pmichaud> jnthn: that's exactly what I said :)

[15:47] <mathw> I'm already thinking about my advent calendar post

[15:47] <mathw> I may even do two

[15:47] <mathw> or three

[15:47] <pmichaud> did I get signed up for any dates this week?

[15:47] <mathw> I haven't signed up yet

[15:47] <masak> mathw: better grab the days before they're all occupied! :)

[15:47] <mathw> I need my home laptop for my pugscode SVN access

[15:47] <moritz_> pmichaud: don't think I've seen you in the list

[15:48] <mathw> I'd like December the 6th though

[15:48] <pmichaud> I'll take Dec 5

[15:48] <masak> pmichaud: do you have a pugs commitbit? :)

[15:48] <pmichaud> masak: yes, but I have a very slow ISP connection today

[15:49] <pmichaud> I suspect it'll take an hour to get an up-to-date copy of the pugs repo

[15:49] <jnthn> pmichaud: It's not in any way just that somehow we keep a reference to the parse tree around?

[15:49] <masak> pmichaud: I'll add you, then.

[15:49] <moritz_> pmichaud: I'll volunteer you

[15:49] <jnthn> pmichaud: And then GC keeps marking it and so kills us?

[15:49] <pmichaud> jnthn: and then GC cost?  might be

[15:49] <pmichaud> jnthn: I'm working on tracking it down now.... tht's going to be my rakudo day for vienna.pm grant

[15:49] <mathw> Could somebody updating the schedule add me for the 6th as well please?

[15:49] <jnthn> :-)

[15:50] <mathw> I'll porobably do at least one other day as well, but I need to think about scheduling

[15:50] <pugs_svn> r29228 | moritz++ | [advent] reorganize brainstorm list; volunteer pmichaud++ for Dec 5 

[15:50] <moritz_> mathw: will do

[15:50] <masak> dang, moritz_ beat me to it. :)

[15:51] <pmichaud> moritz_++   # thanks

[15:51] <moritz_> nearly-free karma

[15:51] <pmichaud> masak++  # just because

[15:51] <pugs_svn> r29229 | moritz++ | [advent] mathw++ for Dec. 6 

[15:51] <mathw> hugme: hug moritz_++

[15:51] * hugme hugs moritz_++

[15:51] <masak> in theory, I have made many excellent commits. :)

[15:51] <jnthn> Ooh, I should volunteer myself too.

[15:51] <jnthn> Not for this week though.

[15:51] <masak> jnthn: ...before it's too late! :)

[15:51] <mathw> I can see I'm going to have to thinka bout scheduling quickly

[15:52] <mathw> but for now, I have to think about getting my car fixed

[15:52] * mathw -> gone

[15:52] <jnthn> masak: I only have checkouts of parts of the Pugs repo.

[15:52] <jnthn> :-/

[15:52] *** tylerni7 left
[15:52] <jnthn> masak: Where is the bit I need?

[15:53] <masak> misc/perl6advent-2009/schedule

[15:53] <pmichaud> jnthn: misc/perl6-advent-2009

[15:53] <jnthn> thanks

[15:53] <pmichaud> what masak++ said

[15:53] * jnthn grabs that

[15:53] <Tene> jnthn: if you want to see if it's GC, try running with GC disabled.

[15:53] <jnthn> pmichaud: ^^

[15:53] <jnthn> ;-)

[15:53] <masak> anyone want to post a comment to http://oylenshpeegul.vox.com/library/post/perl-advent-calendars.html?_c=feed-atom about perl6advent?

[15:53] <pugs_svn> r29230 | duff++ | [advent] volunteer for a couple of days 

[15:53] <pugs_svn> r29231 | duff++ | [advent] add a potential topic 

[15:54] <PerlJam> masak: I did, but it apparently didn't go through because of some problem setting up my vox account.

[15:54] <PerlJam> (good $localtime btw)

[15:54] <masak> PerlJam: ah.

[15:54] <masak> PerlJam++ anyway.

[15:56] *** amackera joined
[15:58] <PerlJam> doh!  The vox email confirmation was flagged as spam.  (it's been so long since this has bitten me that I totally forgot to even check for it until now)

[15:58] <Tene> pmichaud: very well understood.  I fell asleep as soon as I got home last night, and slept mostly through the night.

[15:58] <masak> PerlJam: the curse of false positives.

[15:58] *** tylerni7 joined
[15:58] <pmichaud> Tene: yes -- at least I got a very good night's sleep... best one in a while

[15:58] *** perlygatekeeper left
[16:00] *** Psyche^ joined
[16:01] <Tene> Same here. :)

[16:02] <pugs_svn> r29232 | jnthn++ | [advent] Volunteer for two days. 

[16:02] <pugs_svn> r29233 | jnthn++ | [advent] You maded me a topic but I scheduled it. 

[16:02] <pmichaud> http://nopaste.snit.ch/18909

[16:03] <jnthn> pmichaud: Hmm. That doesn't seem to account for all of it then.

[16:03] <jnthn> pmichaud: How much gets blown by IMCC?

[16:04] * jnthn isn't so sure why it'd be different there though...

[16:04] <diakopter> who doth disturb my slumber [with a hilite]?

[16:04] <jnthn> pmichaud: Check that nqp fake executable doesn't start with a different runcore.

[16:05] <pmichaud> jnthn: that's why I did the run of nqp.pbc

[16:05] <pmichaud> (second run)

[16:05] <pmichaud> doesn't appear to be significant difference between nqp.pbc and nqp fakecutable

[16:06] <Tene> Oh, I know!  I could implement macros in ng, and then write an advent post on them!  Nothing could go wrong with that plan!

[16:06] <PerlJam> pmichaud: Would you volunteer for the Dec 24 slot?  Somehow I think it fitting that yours be the last post  :)

[16:06] <pmichaud> PerlJam: yes, I'll volunteer for that slot

[16:06] <pmichaud> also, note that Dec 17 is the release date

[16:06] <pmichaud> (it's also my wife's birthday :)

[16:06] <PerlJam> are you volunteering for that date as well?

[16:07] <pmichaud> not yet :)

[16:07] *** payload joined
[16:08] <Tene> PerlJam: no, he's volunteering his wife.

[16:08] <pmichaud> what's the pir opcode to disable gc?

[16:08] <PerlJam> I'm not sure she'd agree to that :)

[16:09] <pugs_svn> r29234 | duff++ | [advent] pmichaud takes Dec 24 

[16:09] *** quantumEd joined
[16:10] <[particle]> hrmm, there's sweep 0, mark 0, and one more....

[16:11] <pmichaud> I see  "sweepoff" and "collectoff"

[16:12] *** Patterner left
[16:12] *** Psyche^ is now known as Patterner

[16:12] *** pmurias joined
[16:12] <[particle]> sweepoff will disable marking

[16:13] <[particle]> collectoff will disable sweeping, iirc

[16:13] <[particle]> don't quote me on that, the names are funny

[16:13] <arnsholt> That sounds intuitive =p

[16:14] <pmichaud> =item B<sweepoff>()

[16:14] <pmichaud> Disable GC runs. (Nestable)

[16:14] <pmichaud> =item B<collectoff>()

[16:14] <pmichaud> Disable GC runs (nestable).

[16:14] *** perlygatekeeper joined
[16:14] <pmichaud> docs appear to be LTA

[16:14] <[particle]> op sweepoff() {

[16:14] <[particle]>     Parrot_block_GC_mark(interp);

[16:14] <[particle]> }

[16:14] <[particle]> op collectoff() {

[16:14] <[particle]>     Parrot_block_GC_sweep(interp);

[16:14] <[particle]> }

[16:14] <[particle]> the docs are definitely LTA

[16:14] <pmichaud> code is far more informative and concise than the docs here :-|

[16:15] <[particle]> the op names are LTA as well

[16:15] <arnsholt> Whut? Since when do I have +o? (Or has my IRC client lost it?)

[16:15] <pmichaud> well, it looks to me like the problem is indeed GC, and it's far more serious than we had imagined.

[16:15] <[particle]> don't ask why, just bask in the glow of +o

[16:16] <[particle]> i don't understand the big slowdown between executing directly and separate compile/load/execute

[16:16] <arnsholt> Heh

[16:16] <pmichaud> [particle]: it's gc

[16:17] <pmichaud> [particle]: it's the cost of marking the parse, past, and post structures, I suspect

[16:17] <[particle]> shouldn't they disappear after compilation?

[16:17] <pmichaud> if there aren't any references to them, probably

[16:17] <pmichaud> I'm not sure there aren't any references

[16:18] <[particle]> hrmm, what if you put a sweep 1; collect 1; after pir generation

[16:19] <[particle]> unconditionally run gc after compilation finishes

[16:19] <pmichaud> I suspect it makes no difference

[16:19] <pmichaud> because it's the existence of the tree that is expensive, and you incur the cost on every GC run

[16:19] <pmichaud> forcing a GC run doesn't avoid the cost later

[16:19] <[particle]> but generating the pir is fast

[16:20] <pmichaud> right

[16:20] <[particle]> so, in the interpreter teardown after generating pir, all objects are unconditionally destroyed

[16:20] <pmichaud> I'm not following where you're headed with this.

[16:20] <[particle]> but that's not necessarially timed, because it can happen outside the gc, in global

[16:20] <[particle]> destruction

[16:21] <[particle]> hrmm, no, you're using 'time'

[16:21] <pmichaud> if you're claiming that arranging for the parse/past/post trees to be reclaimed will help us, I think we're missing the point.

[16:21] <[particle]> i'm saying, when you write pir to a file and load it back in, you've destroyed the parse/past/post trees

[16:22] <pmichaud> [particle]: yes.

[16:22] <pmichaud> which means that the difference in execution is due to the existence of parse/past/post

[16:22] <[particle]> but not necessarially so when you compile/execute in the same interp

[16:22] *** pdcawley left
[16:22] <PerlJam> [particle]: you think the destruction takes so much time?

[16:22] <[particle]> and you can't mark them read-only

[16:23] <[particle]> no, i'm thinking of ways that those trees can be skipped by gc

[16:23] <[particle]> generational gc would help

[16:23] <pmichaud> it's a little worse than this...

[16:23] <pmichaud> these are not big trees

[16:24] <PerlJam> looks like the two of you have something to bring up in #ps today  :)

[16:24] <pmichaud> this program is *tiny*

[16:24] <pmichaud> it has basically two subs

[16:24] <[particle]> yes, the program is tiny, but has many pcc calls

[16:24] <[particle]> which means many contexts and arrays

[16:24] <pmichaud> [particle]: you're still missing the point

[16:24] <pmichaud> the pcc calls aren't the speed bottleneck we're aiming at

[16:25] <pmichaud> the number of pcc calls is the same when run combined and when run as separate pir

[16:25] <[particle]> yeah, you're right

[16:25] *** nihiliad joined
[16:25] <pmichaud> I'm saying that fib.nqp produces very small trees

[16:25] <[particle]> my jaw pain is getting in the way of clear thought.

[16:25] <pmichaud> very small parse/post/past trees

[16:25] <pmichaud> and if a program this small can produce trees that result in a 10 second slowdown

[16:26] <pmichaud> (merely by their existence)

[16:26] <pmichaud> then we have a serious problem for any larger programs, regardless of the number of pcc calls involved

[16:27] * pmichaud prepares to write this up for parrot-dev

[16:27] <pmichaud> oh, first I want to add my instrumentation

[16:27] <pmichaud> (will let us see the time used for each stage of compilation)

[16:28] <[particle]> wish you could show the # pmcs created for each stage

[16:31] <pmichaud> is there an easy way to get that number from pir?

[16:37] <pmurias> TimToady: would it be possible to make viv attach the unmangled operator name to nodes resulting from parsing an infix node?

[16:39] <TimToady> that's what SYM is

[16:39] <TimToady> or do you mean including the infix:<>?

[16:40] <pmurias> checking...

[16:40] *** ascent_ joined
[16:41] <pmurias> TimToady: they don't seem to have a SYM

[16:41] <TimToady> if I do viv -e '1 + 1' I get a SYM of +

[16:41] <pmurias> what i want is to get * from VAST::infix__S_Plus

[16:42] <TimToady> you mean +?

[16:42] <TimToady> or is the * making it generic?  :)

[16:43] <TimToady> the SYM: + is in the infixish node, not in the . node

[16:44] <pmurias> i mean + sorry

[16:44] <pmurias> what exactly is the . node?

[16:45] <masak> loliwroteadraft: http://gist.github.com/246434 # Perl 6 advent blog post about .fmt

[16:45] <TimToady> the equivalent of .caps in the match object

[16:46] <TimToady> it the nodes in textual order as a list

[16:46] <TimToady> for semantic purposes you generally want to use one of the named entries instead of indexing .

[16:47] *** cdarroch joined
[16:48] <TimToady> the . entry is more for translators and pretty-printers

[16:48] <pmurias> the reason i couldn't find the SYM is that i pruned the '.' before dumping the tree to yaml

[16:49] *** ascent left
[16:50] <TimToady> I guess there ought to be a name for the op to go with left and right

[16:51] <pmurias> go with left = ?

[16:53] <TimToady> huh?

[16:54] <masak> TimToady: I asked a few days ago whether the PairValSet generated by SomeEnum.mapping guarantees anything about the order, when doing .pairs, .keys, etc. maybe I missed your reply in the backlogs.

[16:54] <TimToady> it looks like I need to hoist the infix: pointer from inside its own node to the infixish node

[16:54] <TimToady> masak: in my copy it now says PairValSeq instead, but thinking about whether that makes sense in general

[16:55] <pmurias> TimToady: what does "go with left and right" mean in this context?

[16:55] <masak> TimToady: also, the other question: what do we gain from talking about PairValSet and PerlValSeq rather than Set[PairVal] and Seq[PairVal]?

[16:55] <TimToady> pmurias: I'm talking about the keys into the infixish hash

[16:56] <TimToady> masak: been thinking about that too  :)

[16:56] *** mberends left
[16:56] <masak> TimToady: ok, good. :)

[16:58] <masak> from my point of view, the parameterized-roles type system looks more credible if Perl 6 dogfoods it, rather than doing the antipattern and inventing $m * $n classes. :P

[16:59] <TimToady> well, orthogonality is good, especially where dehuffmanization is fine, but we can also have shortcut names, and a few shortcuts don't go $m * $n

[16:59] <TimToady> they just give you N degrees of separation with a small N

[17:00] <masak> nod.

[17:00] <TimToady> part of what I'm trying to balance there is the utility of being able to extract the original declaration order, versus

[17:01] <TimToady> allowing the programmer to set it up that way if needed

[17:01] <TimToady> my @mapping = enum <foo bar baz>;  enum FBB = @mapping   # speculative syntax

[17:02] <TimToady> well, s/my/consant/

[17:02] <TimToady> t

[17:02] <masak> that second assignment feels odd.

[17:02] <TimToady> the arg the other way is that it gives better introspection of an enum you didn't set up

[17:03] <TimToady> but it pretty much precludes just using the Stash as the source of it, since that's unordered

[17:03] <TimToady> so we'd have to have the mapping be stored duplicately

[17:04] <pmurias> TimToady: it might be better to always have an args attribute instead of sometimes having left and right

[17:04] <TimToady> or not use a stash, and fake a lookup with Foo::bar is used

[17:04] *** zloyrusskiy joined
[17:05] *** zloyrusskiy left
[17:06] <masak> TimToady: I'm looking at gimme5 and LazyMap.pm, taking breaks when my brain explodes. what do 'B', 'C' and 'L' stand for in the blessed LazyMap hash? 'block', something and something?

[17:09] <TimToady> block, called, and lazy

[17:09] <masak> thanks.

[17:10] <TimToady> thing is, a given call of the block may produce more than one value, and iter only returns one

[17:10] <masak> I see.

[17:10] <TimToady> but calling the block again on the processed value would be wrong, so they're stored separately

[17:11] *** justatheory joined
[17:11] <TimToady> it's actually pretty awful to try to debug code using it :/

[17:11] <colomon> masak++  # had no idea about .fmt before this.

[17:11] <TimToady> which was the other reason for avoiding lazymaps whenever possible; it wasn't just about efficiency

[17:11] <masak> I also looked a bit at the STD.pm5 output. it doesn't help me yet, except that I note that it's full of lazymap calls.

[17:12] <TimToady> only where something might backtrack

[17:12] <masak> colomon: I'm surprised about how unknown .fmt is. :)

[17:12] <zaslon> lolmasakhazblogged! masak++ 'Failure()<0xb4ff6b24>': Failure()<0xb4ff605c>

[17:12] <TimToady> unfortunately, it tends to propagate upward to the top of the rule

[17:12] <masak> zaslon: no, I haven't!

[17:12] <zaslon> Sorry, I don't understand that command

[17:14] <TimToady> I wonder if zaslon restarts itself periodically and gets confused when it does

[17:15] <masak> maybe I should blog more about failures... :)

[17:15] <zaslon> lolmasakhazblogged! masak++ 'November 30 2009 -- gobsmacked but still in the loop': http://use.perl.org/~masak/journal/39966?from=rss

[17:15] <masak> zaslon: oh, come on! that was yesterday.

[17:15] <zaslon> Sorry, I don't understand that command

[17:16] <masak> zaslon: don't be sorry, be quiet! </space-balls>

[17:16] <zaslon> Sorry, I don't understand that command

[17:16] *** alexn_org left
[17:16] * colomon feels slightly guilty about encouraging masak to blog again less than 24 hours after finishing his marathon...

[17:17] <masak> colomon: not to worry. it was my own choice. :)

[17:17] <masak> it will be a few days before I summarize the November blogging, though.

[17:19] <pugs_svn> r29235 | pmurias++ | [mildew] start updating to newest STD 

[17:19] <pugs_svn> r29236 | pmurias++ | [mildew] t/01-sanity/01-tap.t passes using the new STD 

[17:19] *** justatheory_ joined
[17:20] *** justatheory left
[17:20] <masak> I think I'll withdraw now to make some tea, and stare a bit more at the LazyMap implementation. :)

[17:20] *** justatheory_ is now known as justatheory

[17:20] <masak> see y'all around. o/

[17:20] <TimToady> pmurias: you do get args for a list associative operator, but it seems like ->{left} is faster than ->{args}[0]

[17:20] *** masak left
[17:21] <pmurias> faster to type?

[17:22] <pmurias> TimToady: having args for left and right associative operators would allow the same code branch to handle them

[17:22] <pmurias> TimToady: btw, VAST is now much sainer then when i made the STD snapshot

[17:26] <TimToady> I blame diakopter++

[17:27] *** iblechbot_ left
[17:27] <TimToady> that's not left and right as in associative, that's just the left arg and the right arg

[17:27] <TimToady> the op may or may not be associative at all

[17:29] <TimToady> but possibly I should rename args to "parcel" anyway, in which case it makes more sense to do binaries and unarys that way too

[17:30] <TimToady> *unaries  # who invented this stupid orthography, anyway

[17:30] *** stephenlb joined
[17:34] <pmurias> was orthography designed or were the most common ways to write something codified?

[17:34] <TimToady> mostly the latter

[17:38] <TimToady> but Samuel Johnson could have used a course in morphophonemics before doing his dictionary  :)

[17:39] <TimToady> and Webster's fixes were mostly cosmetic huffmanizations

[17:40] <TimToady> maybe we should all just switch to chinese characters, and then we wouldn't have to worry about how it's pronounced to read it.  :D

[17:44] *** payload left
[17:46] <zaslon> lolfrettledhazblogged! frettled++ 'Oslo.pm Past and Future': http:

[17:46] <jnthn> failurl

[17:47] <frettled> heh

[17:47] *** brrant joined
[17:47] <sjn> frettled uses http as a protocol for his blog! NICE! :D

[17:48] <frettled> :D

[17:48] <zaslon> lolfrettledhazblogged! frettled++ 'Oslo.pm Past and Future': http:

[17:48] * frettled eyes zaslon suspiciously.

[17:49] <frettled> hmm, how did I use those bots again.  *checks earlier blogpost*

[17:50] <frettled> pointme: zaslon

[17:50] <pointme> Tracks blog posts. It can be instructed to follow new blogs from the channel if you are particularly brave. It is written in Perl 6: http://github.com/carlins/rssbot

[17:50] <moritz_> pointme: hugme

[17:50] <pointme> Hugme hugs people! And gives commit access to various repos. It's source is at http://github.com/moritz/hugme/

[17:50] <frettled> zaslon: link frettled

[17:50] <zaslon> frettled's blog is at http://howcaniexplainthis.blogspot.com/

[17:50] <frettled> So that works, but not the one that's extracted from RSS/Atom, hmm.

[17:51] <diakopter> pmurias: hi

[17:51] <zaslon> lolfrettledhazblogged! frettled++ 'Oslo.pm Past and Future': http:

[17:54] <zaslon> lolfrettledhazblogged! frettled++ 'Oslo.pm Past and Future': http:

[17:55] <moritz_> lolzaslonfail

[17:57] <frettled> I have a strong suspicion we'll see a repeat performance in thirty seconds.

[17:57] <zaslon> lolfrettledhazblogged! frettled++ 'Oslo.pm Past and Future': http:

[17:57] <frettled> oh

[17:57] <frettled> Argh.

[17:58] *** fridim_ joined
[17:59] *** zaslon was kicked by moritz_ (moritz_))
[18:00] <frettled> Duh, good point, I could have done that, too.  :)

[18:00] <TimToady> I was just about to, but was waiting for one more time :)

[18:01] <pmurias> diakopter: hi

[18:02] <frettled> . o O ( I wonder if I can manage to sneak in a question to Barack Obama about Perl 6 when he's in Oslo next week )

[18:02] <pmurias> when will Perl 6 be founded? ;)

[18:03] <frettled> «Will the US increase Perl 6 funding to secure peace?»

[18:03] <moritz_> 0.1% of their defense costs will do nicely

[18:04] <moritz_> "defense"

[18:04] <TimToady> given the email logs, Perl 6 climate research is obviously all faked

[18:05] <frettled> this may cause some concern

[18:05] * TimToady wonders how often the phrase "just fake it for now" pops up...

[18:06] *** snearch joined
[18:07] *** barney joined
[18:07] <moritz_> echo 'select count(*) from irclog where line like "%just fake it%";' | mysql moritz5

[18:07] <moritz_> count(*)

[18:07] <moritz_> 5

[18:08] <moritz_> "fake it" 68 times :-)

[18:08] <diakopter> Results 1 - 10 of about 2,750,000 for "just fake it"

[18:08] <TimToady> and we've lost all the data from before 1980!!!

[18:09] <diakopter> (google)

[18:09] <diakopter> bing:  1-10 of 152,000,000 results

[18:09] *** riffraff left
[18:09] <diakopter> lol

[18:09] <TimToady> (all the Perl 6 data)

[18:10] <moritz_> bing knows a lot more about faking than google

[18:10] <diakopter> oh, and bing just found 3,000,000 more instances... now it says 155,000,000

[18:10] <diakopter> way to go bing!

[18:11] <jnthn> Yeah, but is it just faking it? :-)

[18:12] <TimToady> and if so, is it really 155,000,001?

[18:12] <Wolfman2000> ...is bing really supposed to be that good, despite it being a Microsoft product?

[18:13] <TimToady> vacuums have to be good at sucking

[18:14] <moritz_> I've banned bing from some of my sites, because the crawler referer-spammed

[18:16] <frettled> I think we've router-blocked Yahoo's crawlers, because they insist on DDoS-ing our webservers.

[18:16] <diakopter> Ω.suck

[18:16] <diakopter> std: Ω.suck

[18:16] <p6eval> std 29236: Undeclared routine:␤  'Ω' used at line 1␤ok 00:01 103m␤

[18:17] <TimToady> gee, where'd you find the horseshoe dingbat?  :)

[18:17] <frettled> pure luck

[18:17] <TimToady> but as you can see, if you hang it upside down, all the luck runs out

[18:18] <moritz_> frettled: that one is curious too... three times more hits from yahoo crawler than from googlebot, but only about 1% of visitors coming from it

[18:18] <frettled> yeah, that was clumsy, diakopter.

[18:18] <diakopter> Ѡ

[18:18] *** brrant left
[18:18] <TimToady> what's that, a goat-shoe?

[18:18] <frettled> moritz_: they typically send several parallel crawlers, visiting the same URLs, for reasons unknown to Man.

[18:19] <diakopter> cyrillic omega, apparently

[18:19] <diakopter> but yes, used as goat shoes in the #perl pen

[18:19] <frettled> so it's not Ѡelsh?

[18:21] <TimToady> I wonder how soon governments start outlawing fonts that contain indistinguishable glyphs...

[18:22] <frettled> There has already been something about it for IDN.

[18:23] <frettled> The cyrillic version of a, for instance, cannot be used for at least some TLDs.

[18:23] *** mberends joined
[18:24] <moritz_> the German NIC only allows 4 non-ascii characters that commonly used in .de

[18:24] <moritz_> (in .de domains, that is)

[18:28] <TimToady> whenever my cat sits on my lap between my laptop and the base station, my wifi connection drops; I must have a dense cat

[18:28] <moritz_> .oO( or the cat interferes? )

[18:29] <TimToady> cats do seem to know a lot about wavefunctions

[18:30] <frettled> Your cat obviously contains a lot of water.

[18:30] <frettled> It's water-fat.

[18:30] <TimToady> saltwater, I believe

[18:31] <frettled> You know how to use your krysknife, I suppose. ;)

[18:35] <frettled> Or perhaps you are not Fremen.  Hmm.  Wrong context?

[18:36] <allbery_b> one of the major absorption frequencies of water is in the middle of the 2.4 wireless band

[18:37] *** kthakore joined
[18:37] <allbery_b> inconvenient around "ugly bags of mostly water"

[18:37] <kthakore> hi

[18:37] *** Avada joined
[18:37] <frettled> allbery_b: yup, that was the hint, sortof.  It's bloody annoying.

[18:37] <kthakore> can some one answer this?  http://www.reddit.com/r/programming/comments/a9r6s/why_perl_lost_it/c0giz5a 

[18:37] <kthakore> I am curious as well

[18:38] <kthakore> what would the perl6 code of that look like?

[18:39] <jnthn> say $foo[0]<bar>

[18:40] <kthakore> jnthn:  wat are the equivalents of the other line?

[18:40] <Wolfman2000> rakudo: my @foo = {bar => 42, hi => 32}, {baz => 38, bye => 71}, {qux => 99, yow => 11}; say $foo[0]<bar>;

[18:40] <p6eval> rakudo 7ce13d: Symbol '$foo' not predeclared in <anonymous> (/tmp/IssprLTGsq:2)␤in Main (file <unknown>, line <unknown>)␤

[18:40] <Wolfman2000> rakudo: my @foo = {bar => 42, hi => 32}, {baz => 38, bye => 71}, {qux => 99, yow => 11}; say @foo[0]<bar>;

[18:40] *** brrant joined
[18:41] <p6eval> rakudo 7ce13d:  ( no output )

[18:41] *** quantumEd left
[18:41] <Wolfman2000> ...wonder where I went wrong.

[18:41] * Wolfman2000 just goes back to his homework.

[18:41] <kthakore> Wolfman2000: *g*

[18:41] <jnthn> my @foo = {bar => 42, hi => 32}, ...;

[18:42] <jnthn> rakudo: my @foo = {bar => 42, hi => 32}; say @foo[0]<bar>

[18:42] <p6eval> rakudo 7ce13d:  ( no output )

[18:42] <jnthn> ...

[18:42] <jnthn> Anyway, the main point is that you don't dereference stuff explicitly in Perl 6.

[18:42] <Wolfman2000> ...can't just be the both of us, can it jnthn?

[18:43] <jnthn> Wolfman2000: Suspect it's the bot. It's been acting up for ages.

[18:43] <jnthn> rakudo: class Foo { }; say "ok"

[18:43] <p6eval> rakudo 7ce13d:  ( no output )

[18:45] *** ruoso left
[18:45] *** dakkar joined
[18:46] *** quantumEd joined
[18:46] <pmurias> kthakore: that reddit post is very silly

[18:47] <TimToady> but you repeat yourself

[18:49] *** pmurias left
[18:50] <Wolfman2000> jnthn: I just ran my short program on Feather. It worked

[18:50] <kthakore> p6eval:  um ...

[18:51] <kthakore> Wolfman2000:  wth? 

[18:51] <kthakore> he just called me silly and left :p

[18:51] <kthakore> hilarious

[18:52] <kthakore> oops he didn't call me silly stupid me

[18:52] *** Avada left
[18:52] <kthakore> jnthn:  anywho ... are there different way of accessing the @foo like in perl5

[18:55] <jnthn> kthakore: Well...there are...but unlike Perl 5 I think there's One Obvious Right Way. :-)

[18:55] <jnthn> kthakore: I mean, you could write @foo[0]{'bar'} too.

[18:56] <Wolfman2000> actually jnthn, that fails on rakudo

[18:56] <Wolfman2000> Could not find non-existent sub bar

[18:56] <jnthn> Wolfman2000: I suspect you didn't write what I just did.

[18:56] * Wolfman2000 just compiled the master branch too

[18:56] <jnthn> Wolfman2000: Note the quotes :-)

[18:56] <jnthn> (around bar)

[18:56] <Wolfman2000> @foo[0]{'bar'}

[18:56] <lambdabot> Unknown command, try @list

[18:56] <Wolfman2000> well aware

[18:57] <jnthn> :-S

[18:57] <jnthn> ng: my @foo = {bar => 42, hi => 32}; say @foo[0]{'bar'}

[18:57] <p6eval> ng a77213: get_pmc_keyed() not implemented in class 'Block'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[18:57] <jnthn> oh, we didn't do hash composers in ng yet.

[18:57] <jnthn> rakudo: my @foo = {bar => 42, hi => 32}; say @foo[0]{'bar'}

[18:58] <p6eval> rakudo 7ce13d:  ( no output )

[18:58] <moritz_> ng: my @foo = {bar => 42, hi => 32}; say @foo[0]{'bar'}

[18:58] <p6eval> ng a77213: get_pmc_keyed() not implemented in class 'Block'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[18:58] <Wolfman2000> ng: my @foo = {bar => 42, hi => 32}; say @foo[0]<bar>

[18:58] <p6eval> ng a77213: get_pmc_keyed() not implemented in class 'Block'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[18:58] <kthakore> jnthn:  ah ok

[18:58] <Wolfman2000> ...sounds like a good thing to implement soon jnthn

[18:59] <moritz_> ng: my @foo = {bar => 42, hi => 32}.(); say @foo[0]{'bar'}

[18:59] <p6eval> ng a77213: get_pmc_keyed() not implemented in class 'Undef'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[19:05] <jnthn> Wolfman2000: Yeah...can likely steal it straight from master.

[19:05] *** iblechbot joined
[19:08] *** ruoso joined
[19:09] *** ingy joined
[19:11] <kthakore> moritz_:  so ... Perl6 cannot access an element from a array of hashes?

[19:18] <moritz_> kthakore: well, it can

[19:18] <moritz_> rakudo has problems with p6eval, and ng with hash literals

[19:18] <frettled> std: my @foo = {bar => 42, hi => 32}; say @foo[0]{'bar'}

[19:19] <p6eval> std 29236: ok 00:01 108m␤

[19:19] <moritz_> but in principle it works just fine

[19:19] <moritz_> $ perl6 -e 'my @foo = {bar => 42, hi => 32}; say @foo[0]{"bar"}'

[19:19] <moritz_> 42

[19:19] *** jaldhar left
[19:20] *** masak joined
[19:21] <diakopter> that's interesting

[19:21] <diakopter> o wait; lagged

[19:21] <diakopter> backlagged

[19:22] <masak> what do we tell this person? http://twitter.com/dpcwollmann/status/6239724751

[19:22] <frettled> ac

[19:22] *** frettled sets mode: +o masak

[19:22] <frettled> That you got op!

[19:22] <masak> ooh, I'm scared. :)

[19:22] <masak> oh wait.

[19:23] <frettled> GNU readline support would be Really Neat.

[19:23] <masak> is it doable?

[19:23] <frettled> I suppose so, but it's not a straight plugin, because there are at least two ways of doing it.

[19:23] <mberends> anything NCI is hard

[19:24] <frettled> I haven't added readline to other code in several years, and I've only done it once.

[19:24] <mberends> frettled: TAALTWTDI ?

[19:24] <masak> dang. but doesn't the REPL alreadu use something like GNU ReadLine?

[19:24] <frettled> I shot myself in the foot and didn't get it to understand all the cool commands that people - me included - usually expect from «readline support»

[19:24] <frettled> mberends: yep

[19:24] *** frettled sets mode: +o mberends

[19:25] <mberends> ooh!

[19:25] <moritz_> masak: parrot has a config probe for readline too

[19:25] <PerlJam> doesn't rakudo grok readline if parrot does or something?

[19:25] <moritz_> I guess that's a good question for pmichaud

[19:26] <masak> sometimes I've been toying with the idea of introducting &prompt and GNU readline to each other.

[19:26] <PerlJam> I have one box where rakudo seems to be readline-aware (but that appears to have happened quite by accident)

[19:26] <masak> maybe `prompt("> ", :@history)` or sump'n.

[19:27] <moritz_> PerlJam: the REPL, or prompt()?

[19:29] <PerlJam> the REPL

[19:29] <moritz_> it is here, too

[19:29] <frettled> Hmm, yes, running ./perl6 in the September 13 edition of rakudo _does_ yield a command history

[19:30] <frettled> it understands ESC-b and ESC-f for backward-word and forward-word, etc.

[19:41] <masak> sushi &

[19:41] *** perlygatekeeper left
[19:47] *** barney left
[19:48] *** SirKay joined
[19:51] *** xenoterracide left
[19:52] *** xenoterracide joined
[19:56] *** zostay joined
[20:04] *** alexn_org joined
[20:05] *** sundar joined
[20:05] *** alexn_org left
[20:05] *** alexn_org joined
[20:12] <diakopter> TimToady: does a non-greedy quantifier terminate ltm?  pmichaud?

[20:12] <PerlJam> HLL::Compiler handles the REPL and the command line, right?

[20:15] *** brrant left
[20:18] <diakopter> TimToady: duh, I see the answer right there (sry)

[20:19] <diakopter> sweet

[20:19] <diakopter> that makes the right-to-left conversion much easier :)

[20:20] *** pdcawley joined
[20:22] <Tene> PerlJam: Yes.

[20:23] <pugs_svn> r29237 | colomon++ | [perl6advent] Add topic to Dec 7, minor brainstorming notes. 

[20:24] <diakopter> compiling leading LTM patterns is analogous to computing leading FIRST patterns, but a tad higher order.

[20:24] <masak> pointme: masak

[20:24] <pointme> masak submits rakudo bugs ;-)

[20:25] <masak> pointme++ # spreading the meme that the bugs are MINE! :P

[20:25] <moritz_> pointme: moritz

[20:25] <pointme> Sorry, I don't know anything about that project

[20:25] <masak> we should definitely add something on project moritz.

[20:25] <moritz_> neither do I

[20:30] *** bluescreen left
[20:33] <moritz_> colomon, masak: I think my access to perl6advent.wordpress.com doesn't work... I'd dump my post in the pugs repo instead and let one of you publish it, if that works for you

[20:35] <masak> moritz_: sure, but it's too bad. better to have the post marked up by its author.

[20:36] <colomon> moritz_: do you have a wordpress account?

[20:36] <moritz_> colomon: yes

[20:36] *** moritz_ sets mode: +o colomon

[20:37] <colomon> e-mail?

[20:37] <colomon> address, I mean?

[20:37] <colomon> for it?

[20:37] <moritz_> colomon: the one you sent the invitation for

[20:37] <moritz_> s/for/to/

[20:38] <colomon> okay, you're in now.

[20:39] <moritz_> works

[20:39] <moritz_> colomon++

[20:41] <moritz_> what format does wordpress want? html?

[20:41] <colomon> html or it has a rich test editor.

[20:41] *** bluescreen joined
[20:41] <moritz_> ok. So I'll write in pod, convert it to HTML and feed that into wordpress :-)

[20:42] <diakopter> note to others who may ever follow this (reversing) strategy: alternations keep their left-to-right order, it's just sequence (both, concat, etc.) whose order needs switched (incl all literals more than 1 char in length)

[20:42] <colomon> That appeared to be masak's plan as well?  :)

[20:45] <colomon> I need to sit down and learn pod at some point.  pod and grammars.

[20:46] *** envi^home left
[20:47] * arnsholt is considering volunteering to write something on grammars

[20:47] <arnsholt> Except I should probably read for my exams instead =)

[20:53] *** ruoso left
[20:53] <PerlJam> colomon: er... how do I post to perl6advent?

[20:54] <colomon> PerlJam: did you register with wordpress?

[20:54] <PerlJam> aye

[20:55] <colomon> pobox e-mail?

[20:55] <PerlJam> (I apparently already had an account that I've never used)

[20:55] <PerlJam> yes, [email@hidden.address]
[20:55] <colomon> okay, you're in there too.

[20:56] <PerlJam> ah.  okay

[20:56] <PerlJam> colomon++

[20:57] <ascent_> huh, any ideas for domain perl6.pl? :)

[20:58] <moritz_> forward it to perl6.org until you have a good idea :-)

[20:58] <moritz_> hey, if you read "pl" as "people" it would be a great domain for a community site

[20:59] <Tene> I could post something on... exceptions?

[20:59] <PerlJam> Tene: go for it.

[20:59] <moritz_> Tene: sure, good idea

[20:59] *** quantumEd left
[21:00] <colomon> I'd take exception to that.

[21:00] <Tene> Hm.  I'd need useful examples of exceptions use, though...

[21:00] <colomon> ;)

[21:00] *** quantumEd joined
[21:00] <Tene> see, colomon objects, I can't do it.

[21:00] <Tene> I'll think of something else, then.

[21:00] <PerlJam> I think he was just punning.

[21:01] <PerlJam> (for the humor of it)

[21:01] <colomon> exactly.

[21:01] <colomon> apologies, it was irresistible.  I'm surprised no one beat me to it.

[21:02] <PerlJam> Hmm. I like Wordpress' interface for editing posts much better than blogspots.

[21:03] <colomon> so far I am very impressed with Wordpress, except that the invite thing seems not to work quite as I imagined.

[21:03] <moritz_> colomon: so you have to invite *and* add people to the blog?

[21:03] <colomon> moritz_: yes.

[21:03] <PerlJam> invite == invite people to use wordpress

[21:04] <moritz_> rakudo: my Int $x; $x *= 30; say $x

[21:04] <p6eval> rakudo 7ce13d: 30␤

[21:04] <colomon> The interface implied that it would be automatic, but as far as I could tell it never worked that way.

[21:04] <PerlJam> moritz_: that's a feature!  ;)

[21:04] <moritz_> PerlJam: I know, I just wanted to be sure it worked in rakudo

[21:04] <PerlJam> rakudo: my Int $x;  $x += 1; say $x;

[21:04] <p6eval> rakudo 7ce13d: 1␤

[21:05] *** ShaneC joined
[21:05] <PerlJam> (just checking :)

[21:05] <colomon> It has an "Add user to my blog as a contributor" tick box I ticked, but no one ever got added.

[21:05] <colomon> ng: my Int $x; $x *= 30; say $x

[21:05] <p6eval> ng a77213: 0␤

[21:05] <colomon> d'oh!

[21:06] <PerlJam> colomon: well, a Mu Int is devoid of value.  :)

[21:06] <colomon> ng: say Int ~~ Mu

[21:06] <p6eval> ng a77213: 1␤

[21:08] *** takadonet left
[21:08] <masak> ng: Mu[Mu]

[21:08] <p6eval> ng a77213: Method 'postcircumfix:<[ ]>' not found for invocant of class ''␤current instr.: '!postcircumfix:<[ ]>' pc 243650 (src/gen/core.pir:25138)␤

[21:09] <masak> jnthn: "invocant of class ''"?

[21:09] <moritz_> ng: 3[4]

[21:09] <p6eval> ng a77213: Can't postcircumfix:<[ ]> foreign objects yet.␤current instr.: '!postcircumfix:<[ ]>' pc 243650 (src/gen/core.pir:25138)␤

[21:10] <masak> foreign objects?

[21:11] <moritz_> alien Ints

[21:11] <masak> ng: trois[quatre]

[21:11] <p6eval> ng a77213: Confused at line 1, near "trois[quat"␤current instr.: 'perl6;HLL;Grammar;panic' pc 519 (src/stage0/HLL-s0.pir:336)␤

[21:12] * moritz_ changed his image on gravator.com and is surprised that github updated it immediately

[21:12] <masak> nice new image.

[21:12] <colomon> ack, too much perl 6 makes programming in C++ painful.

[21:13] <moritz_> masak: thanks. I put it on my CV today

[21:13] <colomon> I mean, why can't I just say for trimmed_surfaces, breps -> $brep { ... }  ?  Requiring a new loop to iterate over each array is a PITA.

[21:13] <PerlJam> colomon: too much perl6 makes programming in <insert almost any language> painful.

[21:15] <masak> ooh! pmichaud-on-parrotdev says I can speed up my Perl 6 code by turning off GC. :P

[21:17] <sjohnson> yo masak

[21:20] <masak> sjohnson: hi there!

[21:20] *** ShaneC left
[21:21] *** ShaneC joined
[21:23] <sjohnson> rakudo:  my $x = "\t";  say split("\t", $x).perl;

[21:23] <p6eval> rakudo 7ce13d: ["", ""]␤

[21:24] <colomon> PerlJam: I almost thing that one of my projects for next year ought to be building a p6 interface for my $work C++ libraries, just to make writing tests easier...

[21:24] <sjohnson> TimToady: is the above ^^ possible in p5, without getting complicated?  or was its split not meant for this, where as p6 has comb and split

[21:25] <PerlJam> sjohnson: my $x = "\t"; print split(/\t/, $x, -1), "\n";

[21:25] <moritz_> I've written my advent post for Dec 04, and scheduled it for publishing

[21:25] <PerlJam> sjohnson: (not sure what part you think might not be possible)

[21:25] <PerlJam> moritz++

[21:26] <moritz_> those of you who have admin access can probably view it already, and review/correct/bikeshed

[21:26] <colomon> dude!  scheduling ahead of time!  awesome!

[21:26] <PerlJam> colomon: yes, blogspot has that too, but it's way klunky

[21:26] <sjohnson> PerlJam++ # awesomeness

[21:28] <colomon> I see PerlJam has gotten to work, too.  :)

[21:28] <PerlJam> colomon: not really :)

[21:28] <PerlJam> But I plan to do what moritz_ has just done as well.

[21:29] <masak> moritz_: ooh, scheduled posts! I gotta take a look at that.

[21:30] <colomon> moritz_++ # nice post

[21:30] <moritz_> thanks colomon

[21:30] <colomon> The newline formating is a little off, if you don't mind I will try to clean it up.

[21:31] *** SmokeMachine left
[21:31] <moritz_> feel free

[21:31] <masak> moritz_: can I change the dash in the title to a colon, to conform with today's post?

[21:31] <moritz_> masak: sure

[21:32] <masak> I'll wait a bit, to avoid edit conflicts. :)

[21:33] *** brrant joined
[21:33] <colomon> "Warning: Moritz is currently editing this post"

[21:35] <PerlJam> There have been 59 views for Day 1.  Not bad for no advertising :)

[21:35] * moritz_ plans to do some advertising tonight

[21:35] <colomon> how's that?

[21:35] <PerlJam> moritz++

[21:35] *** bluescreen left
[21:36] <colomon> masak -- I take it this means you can see scheduled posts as well?

[21:36] <colomon> (I took care of the dash, btw.)

[21:36] <masak> aye.

[21:36] <masak> thanks.

[21:37] <moritz_> colomon: can you resubmit your changes? I fear I have hit reload accidentally

[21:37] <moritz_> and undone your changes :(

[21:37] <moritz_> moritz--

[21:37] <colomon> not sure if I can resubmit, but I'll see.

[21:37] * PerlJam wonders if there's a widget for displaying code

[21:37] <PerlJam> (maybe syntax highlighted)

[21:37] <moritz_> I've now logged out so that it dosn't happen again

[21:38] <colomon> yay, still had all the changes sitting in my browser.

[21:38] <colomon> PerlJam: I believe someone told me there was over the summer, but I don't remember the details.

[21:39] <colomon> (because I wasn't using wordpress at the time, so it was irrelevant to me.)

[21:39] <colomon> oh, moritz_'s test comments don't match the actual functions called.  :)

[21:40] <moritz_> dammit

[21:42] <PerlJam> Hmm.  I wonder how/if we should use the categories?

[21:42] <moritz_> I don't see much benefit. tags > categories

[21:43] <colomon> moritz_: shall I fix them?

[21:43] <moritz_> colomon: please do, if you feel like

[21:44] <PerlJam> masak: you'll let us know when your entry is ready for critique?  :)

[21:44] <colomon> done.

[21:44] <masak> PerlJam: oh, it has been all day. :)

[21:44] <moritz_> colomon++

[21:45] <colomon> So far, I'm really liking the blog setup for the calendar.  PerlJam++ for suggesting creating a blog for it.

[21:45] <PerlJam> colomon++ for actually doing it! :)

[21:45] <masak> colomon++ PerlJam++

[21:45] <moritz_> lolmoritzhazblogged: http://perlgeek.de/blog-en/perl-6/perl6-advent-calendar.html

[21:46] <masak> would somebody mind changing the theme of the perl 6 advent blog -- or show me how to do it? the current one feels a bit drab.

[21:46] <moritz_> masak: put a camelia in there somewhere!

[21:46] <PerlJam> camelia +1

[21:47] <PerlJam> If it could be styled similar to perl6.org, that would be awesome

[21:48] <masak> the blog has had 295 views today. I think it'll 10x or more before December is over.

[21:49] <colomon> I think probably only PerlJam and I have permission to change the theme.

[21:50] <moritz_> colomon: then you need to hand out theme bits liberally :-)

[21:50] <PerlJam> indeed.

[21:50] <PerlJam> The chance me changing the theme is close to zero right now.  :)

[21:50] <masak> either is fine by me. :) as long as the theme changes.

[21:51] * moritz_ just redditted it

[21:51] <PerlJam> masak and moritz are now admins too

[21:52] <colomon> PerlJam++

[21:52] <masak> yay, responsibility! \o/

[21:52] <PerlJam> and jnthn

[21:52] <jnthn> huh...what...

[21:52] <jnthn> I have to be responsible?!

[21:53] <PerlJam> you have the option to be responsible.

[21:53] <colomon> I would definitely encourage someone other than me to work on the theme.  My web pages are pretty uniformly boring.  :)

[21:54] <masak> heh. I just got called a 'true [Perl 6] believer' on Twitter. again. :)

[21:55] <PerlJam> Where in pugs is perl6.org?

[21:55] <colomon> (well, hopefully my content isn't that boring, but the style is very "1997 clean" .)

[21:55] *** zaphar_ps left
[21:55] <sjohnson> @karma

[21:55] <lambdabot> You have a karma of 4

[21:55] *** zaphar_ps joined
[21:56] *** rgrau_ left
[21:57] *** rgrau_ joined
[21:58] <moritz_> PerlJam: docs/feather/perl6.org/

[21:58] <PerlJam> yeah, just found it  :)

[21:58] <PerlJam> thanks

[21:59] <moritz_> PerlJam: feel free to put it as the second item under Community on the front page

[21:59] <moritz_> PerlJam: the IRC channel takes too much space there

[22:04] <pugs_svn> r29238 | duff++ | [perl6.org] Add link to Perl 6 Advent calendar 

[22:05] <PerlJam> so ... how does the website get updated?

[22:06] <moritz_> by cron job

[22:06] *** alexn_org left
[22:10] <colomon> perl6advent got its first comment!  \o/

[22:11] * PerlJam doesn't believe it.

[22:13] <jnthn> \o/

[22:13] <jnthn> Nice!

[22:13] <colomon> ng: say (7/4+2/3).perl

[22:13] <p6eval> ng a77213: 29/12␤

[22:17] <PerlJam> ng: say (4/4+2/3).perl

[22:17] <p6eval> ng a77213: 5/3␤

[22:18] <PerlJam> rakudo++

[22:18] *** iblechbot left
[22:19] <avar> Who turned Perl into Lisp?:)

[22:19] <sundar> Hi.. Is it possible to enable readline support in the interactive perl6 interpreter?

[22:20] <masak> sundar: it's enabled here.

[22:23] <moritz_> more specifically the readline header files need to be installed when parrot is configured

[22:23] <masak> moritz_++ # a reply which actually helps

[22:25] <moritz_> libreadline5-dev on debian

[22:27] <sundar> I'm on a Solaris machine.. I'll try to find if it has readline headers... Though, I'll have to then configure and build both parrot and rakudo, isn't it?

[22:28] <moritz_> right

[22:28] *** fridim_ left
[22:29] <moritz_> rakudo: say %*VM<config><readline>

[22:30] <p6eval> rakudo 7ce13d: Use of uninitialized value␤␤

[22:30] <moritz_> on my computer that gives "define"

[22:31] <moritz_> and the parrots Configure.pl says, among other things

[22:31] <moritz_> auto::readline -      Does your platform support readline.................yes.

[22:36] *** dakkar left
[22:37] <PerlJam> okay, so I said the chances of me changing the theme for perl6advent were zero ... turns out it was closer to one (such is being binary).   I've just added a couple of Camelia to the header, but perhaps it inspires someone to do better

[22:37] <PerlJam> (the past 30 minutes was the most I've ever played with GIMP too :)

[22:37] <frettled> :)

[22:38] <frettled> PerlJam++ - the website did improve

[22:43] <arnsholt> Is the plural of Camelia Cameliae? =)

[22:44] <jnthn> Depends on the language I guess. :-)

[22:44] <frettled> Papilio Camelia?

[22:45] <arnsholt> True, true

[22:45] * jnthn chooses Camelie ;-)

[22:45] <arnsholt> Lepidotera celopardalis? =D

[22:45] <arnsholt> Er, Lepidoptera

[22:45] <arnsholt> And camelopardalis

[22:46] <arnsholt> Apparenly I fail at writing

[22:46] <frettled> ng: say arnsholt.fail;

[22:46] <p6eval> ng a77213: Could not find non-existent sub &arnsholt␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[22:46] <frettled> ;)

[22:47] <arnsholt> ^^

[22:50] *** snearch left
[22:52] *** IllvilJa left
[22:53] *** pmurias joined
[22:58] <pmurias> kthakore: rehi

[23:02] <diakopter> pmurias: g'morning? :)

[23:04] <pmurias> diakopter: it four minutes past midnight here

[23:04] <diakopter> oh

[23:06] <moritz_> 22:48 <@masak> the blog has had 295 views today. I think it'll 10x or more  before December is over.

[23:06] <moritz_> 50x at least, if we continue to blog

[23:06] <masak> moritz_: :)

[23:07] <masak> do I hear 250x? 250x, anyone?

[23:07] <masak> moritz_: I meant per day.

[23:08] <moritz_> oh.

[23:08] <moritz_> I thought you meant in sum

[23:08] *** IllvilJa joined
[23:12] <masak> IllvilJa! \o/

[23:12] *** frew__ joined
[23:12] *** frew__ left
[23:13] <IllvilJa> Howdy!

[23:14] <IllvilJa> Just did my first github commit and push!

[23:14] <IllvilJa> Tiny patch, replaced 3 characters with 2 other characters in a Build.PL script.  But still, baby steps!

[23:15] <masak> IllvilJa++

[23:15] *** frew__ joined
[23:15] *** frew__ left
[23:16] <IllvilJa> Anyone knows if Russ Allbery is here at times?  I submitted, by mail, a patch for his Term::ANSIColor module.

[23:16] <masak> is it a Perl 5 module?

[23:16] <IllvilJa> The purpose were to let the colors 8 through 15 (you know, those BRIGHT and GOOD LOOKING colors) be available in addition to the duller color 0 through 7...

[23:16] <IllvilJa> Yes it is perl 5.

[23:17] <masak> I don't recognize the name "Russ Allbery".

[23:17] <allbery_b> this channel is for perl 6 development.  perl 5 modules are somewhat irrelevant.

[23:17] <IllvilJa> I asked about it on #perl, and I got a good response to ask the quesion on some mailing list for module maintainers on CPAN (but has not gotten around to do it yet)

[23:17] <masak> IllvilJa: I'm very familiar with those bright and good looking colors, yes. :)

[23:17] <allbery_b> (and no, I am not Russ)

[23:18] <masak> IllvilJa: my teens were spent in BASIC. both text mode and EGA used those 16 colors. :)

[23:18] <IllvilJa> (I know, I accidentally IMed you when I thought you were Russ... then realized I perhaps should use the 'info' command of Pidgin and thus understood I were mistaken...)

[23:19] <IllvilJa> The thing is that I (probably incorrectly) think Term::ANSIColor is a good candidate to port to perl6.

[23:19] <masak> just to be clear: I am not Russ, either.

[23:20] *** meppl left
[23:20] <masak> IllvilJa: I think it would, too.

[23:21] <IllvilJa> Maybe I should decide to be Russ, accept my own patch and when I try to port Term::ANSIColor to Perl 6 include support for the bold colors numbered 8 through 15.

[23:22] <masak> then we can brag that the Perl 6 module is better than the Perl 5 module. :P

[23:22] <IllvilJa> Um.. rather have it as an example that the Perl5 module's patch should be implemented and get Term::ANSIColor 2.03 created :-D.

[23:23] <masak> or that. :)

[23:28] * masak gets through the whole &LazyMap::iter subroutine, and actually understands it!

[23:28] <IllvilJa> The nice thing with Term::ANSIColor is that it is a conceptually simple module, so I can follow the "you are not good enough" approach and create some very "baby perl 6"-ish module which works but otherwise is "full of fail".

[23:29] <IllvilJa> Then I can improve it over time and learn some perl 6 in the process (or hope someone who is good enough tries to improve it ;-) )

[23:29] *** frew joined
[23:30] <moritz_> sounds like a very good plan

[23:30] <masak> I don't speak for everybody, but the "you are not good enough" approach is the only one I've ever followed. it might be too early for anyone to do anything else with Perl 6. :)

[23:31] <colomon> masak: LazyMap::iter ?

[23:31] <IllvilJa> Worse is better.  Fail is success.  Absolutely useless is optimal.  Hm... we start to sound a bit like Orwell's 1984 now...

[23:31] <masak> colomon: ok, look, so I'm trying to steal STD's backtracking for GGE.

[23:31] <moritz_> IllvilJa: the amazing thing is that it actually works. I started perl6-projects.org, somebody contributed a nice design. I blogged about an XML grammar, somebody else made a module of it, and put it on github, improved it etc.

[23:31] <masak> colomon: in so doing, I've been given a few pointers from TimToady where to look.

[23:32] <colomon> masak: ah.  carry on, then.  ;)

[23:32] <moritz_> masak: why? doesn't PGE do backtracking in a module that fits better for GGE?

[23:32] <masak> colomon: I think I just understood the core part of it. still don't really see where the backtracking takes place, though.

[23:32] * colomon still longs for iterator interface in ng...

[23:32] <masak> moritz_: PGE cheats. :(

[23:32] <moritz_> masak: how so?

[23:32] <masak> moritz_: it uses Parrot's coroutines and continuations.

[23:33] <masak> moritz_: of course, if you do it *that* way, then it's easy!

[23:33] <moritz_> masak: well, then get real continuations into Perl 6, and do it that way :-)

[23:34] <masak> moritz_: believe me, the thought has occurred to me. :)

[23:34] <masak> cf my last talk.

[23:35] <frettled> IllvilJa: What about 256-color while you're at it?  :D  (http://frexx.de/xterm-256-notes/)

[23:36] <pmurias> masak: gather/take can be used for getting coroutines

[23:37] <moritz_> pmurias: the laziness of gather/take is not completely guarntueed by the spec

[23:37] <moritz_> pmurias: does smop have continuations?

[23:37] <IllvilJa> frettled: Well, the 16 color palette seem to be some sort of "standard" that many terminal emulators support.

[23:37] <masak> pmurias: yes. that doesn't mean I (1) like that as my only option, or (2) see how to cross routine boundaries with gather/take.

[23:37] <pmurias> moritz_: the could be easily implemented

[23:38] <IllvilJa> With color 3 being dull yellow and color 11 is corresponding bright (and vivid and enlightening) yellow...

[23:38] <frettled> IllvilJa: Yes, it's based on 16-color ANSI.  The 256 color palette is based on 256-color ANSI, IIRC.

[23:38] <IllvilJa> Yes.  I think the gnome-terminal (and it's underlying widget, vte) only supports the 16 color palette.

[23:38] <pmurias> moritz_: smop has one-shot continuations - one would have to add a .clone method to them

[23:39] <frettled> IllvilJa: 256-color support is part of the xorg distribution, see e.g. http://www.opensource.apple.com/source/X11apps/X11apps-14.1/xterm/xterm-235/vttests/256colors2.pl for how to print those.

[23:39] <moritz_> so, let's summarize

[23:39] <moritz_> actively developed Perl 6 compilers:

[23:39] <frettled> IllvilJa: but your platform may not necessarily have it compiled into xterm, of course.

[23:39] <moritz_> rakudo, mildew, something JS based

[23:39] <moritz_> rakudo can use parrot's continuations

[23:39] <IllvilJa> Ok, 256 colors might show up in some future version of the Perl 6 Term::ANSIColor module :-).

[23:39] <pmurias> diakopter: what is your current continuation?

[23:39] <pmurias> diakopter: err compiler

[23:39] <frettled> IllvilJa: \o/

[23:40] <moritz_> mildew would not be hardpressed to get support via smop

[23:40] <frettled> IllvilJa: goodie, because it's been in rxvt for ages :D

[23:40] <IllvilJa> frettled: I'm a bit old fashioned, I'm damaged from learning programming on (Microsoft!!) basic on a Commodore 64 back in the 1980.s :-).

[23:40] <moritz_> sprixel used something CPSy anyway, afaict

[23:40] <colomon> IllvilJa: same here.

[23:40] <pmurias> moritz_: it would be also be easy to add them to mildew-js

[23:40] <moritz_> so, what stops us from real, guarantueed continuations in Perl 6?

[23:40] <IllvilJa> So 256, 4096 and 32 bit colors are really nice, but I'm a sucker for few-color (lack of) aesthetics.

[23:41] <frettled> IllvilJa: I may have learned programming at least thrice, the second time in Microsoft BASIC on an IBM PC.  :)

[23:41] *** slavik left
[23:41] <masak> moritz_: TimToady thinks continuations are like naked singularities. they should not be exposed directly in a programming language.

[23:41] <IllvilJa> I were shocked a couple of years ago to learn that the Basic I "grew up on" on the Commodore 64 actually were written by Microsoft.

[23:41] <masak> moritz_: but 'the event horizon is a lazy list'.

[23:42] <moritz_> masak: maybe it's one of those things that should be made possible, not necessarily easy?

[23:42] <colomon> IllvilJa: almost every small computer's basic was microsoft's back then, as far as I know.

[23:42] <masak> IllvilJa: yes. that's stuff that Bill Gates actually wrote, rather than copied. :)

[23:42] <moritz_> anyway, bed time here

[23:43] <moritz_> 'night

[23:43] <frettled> IllvilJa: Anyway, people who _really_ need this can of course reuse the code in the 256colors2.pl script, but it's nice to have things in modules for some people :)

[23:43] <masak> night, moritz_++.

[23:43] <IllvilJa> Seriously, the good thing with having just support for 16 colors is that you can give each color a symbolic name ('yellow', 'bright_red' etc). Then of course 256-colors support can use some sort of parametric names like color_33 or such...

[23:43] <colomon> goodnight, moritz_

[23:43] <frettled> IllvilJa: I think it's cool that you're patching, though.

[23:43] <frettled> IllvilJa: uh, there are far more than 256 color names out there :D

[23:43] <frettled> IllvilJa: See rgb.txt (IIRC) in any X11 distribution.

[23:44] <pmurias> moritz_: continuations limit your choice of implementation methods

[23:44] <frettled> IllvilJa: http://sedition.com/perl/rgb.html

[23:44] <IllvilJa> frettled: yes, but I would go even more nuts if I try to sort them out and map them to 256 specific colors.  Then I think parametrized color names (specifying r, g and b of each color as part of the name) is more manageable.

[23:44] <frettled> IllvilJa: those are well-defined in 8 bpc (16.7 million colors)

[23:45] <frettled> IllvilJa: the color codes are there, the mapping is already done by others.

[23:45] <IllvilJa> frettled: ok.  seem like some area to learn some more about in the future.

[23:46] * jnthn prints out two papers to read on his journey tomorrow

[23:46] <pmurias> jnthn: which ones?

[23:47] <IllvilJa> Well, it is fun to know that Bill Gates did SOME things that has benefit me directly.  (Another thing I think Microsoft created were the DHCP standard which also is a very nice thing to have)

[23:47] <frettled> IllvilJa: it's going to be out there on the intertubes for as long as we live, I suppose, so it should be easy to check out.  And of course, it's in your Linux distribution if it uses Xorg, and if you use Emacs, you can easily look them up.

[23:47] <IllvilJa> frettled: cool then.

[23:48] <IllvilJa> frettled: but as stated before, ignorance is strength, failure is success and worse is better, so I go initially for a worse variant which only knows about 16 colors...

[23:48] <frettled> IllvilJa: for instance, my favourite settings for an xterm or Emacs is cornsilk as the foreground color, black background.  The reason is that white on black is too contrasty.

[23:48] <frettled> IllvilJa: hee-hee :D

[23:49] <frettled> IllvilJa: yep, better to actually implement a small improvement than none at all.

[23:49] <frettled> Anyway, enough bike-shedding on my part for tonight, goodnight!

[23:49] <IllvilJa> frettled: I have a sick habit of creating one single colorscheme of foreground/background/cursor for every host I'm connecting to (and a matching terminal icon symbol).  Makes it easy to instinctively track all different terminal windows I have lying around.

[23:50] <IllvilJa> So yes, being able to use colors is not just a nice thing, it's critical to quickly manage all SSH connections.

[23:50] <IllvilJa> At least for me.

[23:52] <jnthn> pmurias: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.32.1784 and http://citeseer.ist.psu.edu/old/paepcke93userlevel.html

[23:58] *** slavik joined
