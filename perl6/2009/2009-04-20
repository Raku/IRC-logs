[00:08] *** ispy_ joined
[00:15] *** payload left
[00:26] *** nihiliad joined
[00:30] *** Kyosuke_Kiryu left
[00:36] <LylePerl> Through a painful process of building different versions of parrot and trying to build rakudo

[00:37] <LylePerl> I've narrowed the problem down to parrot r38030, everything prior will build rakudo on vista

[00:38] <wayland> LylePerl: Did you have a pastebin of the error somewhere?

[00:44] <LylePerl> http://rt.perl.org/rt3/Ticket/Display.html?id=64694

[00:45] *** ispy_1 joined
[00:45] *** ispy_ left
[00:47] <LylePerl> wayland: just updated the ticket with more info

[00:50] <arnsholt> Are there any known issues in Rakudo with using double quoted strings in regexes instead of single quoted ones?

[00:51] *** brunov left
[00:51] *** drbean left
[00:55] *** ispy_ joined
[00:55] *** ispy_1 left
[01:11] *** ispy_1 joined
[01:11] *** ispy_ left
[01:16] *** bacek_ joined
[01:17] *** nbrown joined
[01:18] *** meppl joined
[01:27] *** cognominal joined
[01:30] <skids> rakudo: sub a { grep { return 1; },1,2,3; return 2; }; a.say;

[01:30] <p6eval> rakudo 0d5515: OUTPUT«Type check failed on return value␤current instr.: 'die' pc 17428 (src/builtins/control.pir:225)␤»

[01:30] <skids> rakudo: sub a { grep { return 1; },1,2,3; }; a.say;

[01:31] <p6eval> rakudo 0d5515: OUTPUT«Type check failed on return value␤current instr.: 'die' pc 17428 (src/builtins/control.pir:225)␤»

[01:31] <skids> rakudo: sub a { grep { 1; },1,2,3; return 2; }; a.say;

[01:31] <p6eval> rakudo 0d5515: OUTPUT«2␤»

[01:32] <s1n> return from a grep?

[01:37] <skids> I was hoping it would return from the sub.

[01:39] <s1n> std: sub a { grep { return 1; },1,2,3; }; a.say;

[01:39] <p6eval> std 26297: OUTPUT«ok 00:02 36m␤»

[01:40] <skids> spec is pretty clear about statement blocks and standalone.

[01:40] <skids> But grep is not a statement, so that's an anon block.

[01:41] *** wknight8111 left
[01:42] *** nekobaka joined
[01:44] <Tene> skids: the proper way to do it is with &a.leave(1), iirc, but that's NYI.

[01:45] <Tene> I implemented it with exceptions, but pmichaud didn't like it.

[01:45] <skids> Tene: thanks.

[01:47] *** nekobaka left
[01:50] *** ispy_1 left
[01:51] *** ispy_ joined
[01:58] *** alanhaggai joined
[02:02] <skids> Hrm though re-reading S04 I think return should work there.

[02:02] <skids> (specwise)

[02:04] *** rhr_ joined
[02:06] <skids> Or no, I guess it would be "passed outside the scope" into grep's scope.

[02:16] *** kate21de1 left
[02:17] *** rhr left
[02:46] *** mikehh left
[02:55] *** meppl left
[03:03] *** [particle]1 joined
[03:05] *** ispy_ left
[03:06] *** dukeleto joined
[03:07] *** cspencer left
[03:24] *** FurnaceBoy joined
[03:40] *** nsh left
[03:46] *** orafu left
[03:46] *** orafu joined
[04:01] *** drbean joined
[04:02] *** nbrown left
[04:02] *** alanhaggai_ joined
[04:04] *** dukeleto left
[04:05] *** dukeleto joined
[04:07] *** alanhaggai left
[04:07] *** meppl joined
[04:07] *** nihiliad left
[04:08] *** alanhaggai_ is now known as alanhaggai

[04:11] *** SamB left
[04:45] <skids> rakudo: my @a; @a = for 1..3 { 1; }; @a.say

[04:45] <p6eval> rakudo 0d5515: OUTPUT«Statement not terminated properly at line 1, near "{ 1; }; @a"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[04:45] <skids> rakudo: my @a; @a = gather for 1..3 { take 1; }; @a.say

[04:45] <p6eval> rakudo 0d5515: OUTPUT«111␤»

[04:45] <skids> rakudo: my @a; @a = list for 1..3 { 1; }; @a.say

[04:45] <p6eval> rakudo 0d5515: OUTPUT«Statement not terminated properly at line 1, near "{ 1; }; @a"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[04:58] *** kate21de joined
[04:58] *** FurnaceBoy left
[04:58] <eternaleye> perl6: multi infix:<∈>( Any $item, Any @set --> Bool ) { return Bool::True if ( $item ~~ any(@set) ); }; say (3 ∈ [ 1, 2, 3 ]).perl

[04:58] <p6eval> pugs: OUTPUT«Bool::True␤»

[04:58] <p6eval> ..rakudo 0d5515: OUTPUT«Malformed routine definition at line 1, near "infix:<\u2208>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[04:58] <p6eval> ..elf 26297: OUTPUT«Undefined subroutine &GLOBAL::any called at (eval 128) line 6.␤ at ./elf_h line 5881␤»

[04:58] <eternaleye> Mathematicians will love Perl 6.

[04:59] <Tene> eternaleye: I hear custom operators in rakudo are coming up soon.

[05:00] <eternaleye> I look forward to it eagerly.

[05:00] <eternaleye> Imagine how many tests that'll make pass!

[05:00] <eternaleye> (I would look forward to it lazily, but Perl 6 is so exciting I can't stay in the proper paradigm)

[05:04] *** veritos joined
[05:04] <eternaleye> perl6: multi infix:<⊕>( Int $a, Int $b --> Int ) { return $a ^ $b ); }; say 3 ⊕ 7

[05:05] <p6eval> elf 26297: OUTPUT«Parse error in: /tmp/KSpiGafPot␤panic at line 1 column 61 (pos 61): Missing right brace␤WHERE: $b --> Int ) { return $a ^ $b ); }; say 3 ⊕ 7␤WHERE:                              /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:255:in `_block_rest'␤ 

[05:05] <p6eval> ..STD_red/std.rb:24...

[05:05] <p6eval> ..rakudo 0d5515: OUTPUT«Malformed routine definition at line 1, near "infix:<\u2295>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[05:05] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected ");"␤    expecting operator, ":", "," or "}"␤    at /tmp/GsOXABBsYv line 1, column 60␤»

[05:05] <eternaleye> perl6: multi infix:<⊕>( Int $a, Int $b --> Int ) { return $a ^ $b ; }; say 3 ⊕ 7

[05:05] <p6eval> elf 26297: OUTPUT«4␤»

[05:05] <p6eval> ..rakudo 0d5515: OUTPUT«Malformed routine definition at line 1, near "infix:<\u2295>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[05:05] <p6eval> ..pugs: OUTPUT«one(VInt 3,VInt 7)␤»

[05:05] <eternaleye> perl6: multi infix:<⊕>( Int $a, Int $b --> Int ) { return $a ^ $b ; }; say (3 ⊕ 7)

[05:05] <p6eval> elf 26297: OUTPUT«4␤»

[05:05] <p6eval> ..rakudo 0d5515: OUTPUT«Malformed routine definition at line 1, near "infix:<\u2295>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[05:05] <p6eval> ..pugs: OUTPUT«one(VInt 3,VInt 7)␤»

[05:06] <eternaleye> perl6: multi infix:<⊕>( Int $a, Int $b --> Int ) { return $a ^ $b ; }; say (3 ⊕ 7).perl

[05:06] <p6eval> elf 26297: OUTPUT«4␤»

[05:06] <p6eval> ..rakudo 0d5515: OUTPUT«Malformed routine definition at line 1, near "infix:<\u2295>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[05:06] <p6eval> ..pugs: OUTPUT«(3 ^ 7)␤»

[05:07] <eternaleye> perl6: multi infix:<⊕>( Int $a, Int $b --> Int ) { return $a +^ $b ; }; say (3 ⊕ 7)

[05:07] <p6eval> pugs: OUTPUT«4␤»

[05:07] <p6eval> ..elf 26297: OUTPUT«Undefined subroutine &GLOBAL::infix__43_94 called at (eval 125) line 6.␤ at ./elf_h line 5881␤»

[05:07] <p6eval> ..rakudo 0d5515: OUTPUT«Malformed routine definition at line 1, near "infix:<\u2295>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[05:07] <eternaleye> perl5ism--

[05:09] <eternaleye> Heh, with the right sub/multi/operator declarations, most cryptographic algorithms could probably be copy/pasted symbols and all into valid code.

[05:10] *** skids left
[05:15] *** ejs joined
[05:17] <Tene> that would be very interesting.

[05:21] <eternaleye> perl6: multi infix:<⊂>( Any @subset, Any @superset --> Bool ) { return Bool::True if all(@subset) ~~ any(@superset); }; say ( [2, 3] ⊂ [1, 2, 3, 4] ).perl

[05:21] <p6eval> pugs: OUTPUT«Bool::True␤»

[05:21] <p6eval> ..elf 26297: OUTPUT«Undefined subroutine &GLOBAL::all called at (eval 130) line 6.␤ at ./elf_h line 5881␤»

[05:21] <p6eval> ..rakudo 0d5515: OUTPUT«Malformed routine definition at line 1, near "infix:<\u2282>("␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[05:22] <eternaleye> junctions++

[05:22] <eternaleye> @karma junctions

[05:22] <lambdabot> junctions has a karma of 1

[05:22] *** DemoFreak joined
[05:25] *** justatheory left
[05:52] *** veritos left
[06:01] *** masak joined
[06:03] *** meppl left
[06:12] *** cspencer joined
[06:12] <pmichaud> Good morning

[06:13] <Tene> hi pmichaud :)

[06:13] <masak> good morning, Tene and pmichaud.

[06:16] <pmichaud> masak:  good journey, I hope ?

[06:18] <masak> pmichaud: I slept like a baby.

[06:18] <masak> woke up as we rolled into Stockholm.

[06:19] <pmichaud> Excellent.

[06:19] <moritz_> good morning

[06:20] <jnthn> Morning all

[06:20] <masak> still slightly tired, though. but it might be due to five nights of six hours sleep or less.

[06:20] <masak> moritz_, jnthn: morning!

[06:20] <masak> (per night, not in toto)

[06:20] <jnthn> pmichaud: What time you heading in to the venue? I has tram ticket for you...was thinking I'd set off in 20-25 minutes or so?

[06:21] * jnthn will brb

[06:21] <pmichaud> jnthn: I'm in the lobby -- we can depart whenever you wish (no rush)

[06:22] <Tene> morning jnthn

[06:22] <pmichaud> actually, I may grab a small snack at breakfast

[06:22] <sjn> good morning

[06:22] <pmichaud> either way, I'll be in the lobby around the time to go

[06:26] <pmichaud> bbiab

[06:27] <cspencer> howdy all

[06:28] <masak> cspencer: o/

[06:32] <jnthn> pmichaud: great, will be down in a little bit

[06:34] * jnthn lols at %*ARGH

[06:36] <masak> there will be modules.

[06:36] *** iblechbot joined
[06:39] <moritz_> there are modules.

[06:39] <Tene> what modules?  hm?

[06:39] <masak> moritz_: well, ok. specifically, modules that change things to the user's language preferences.

[06:40] <moritz_> I CAN HAZ LOLSIX?

[06:40] * literal thinks @*ARGV should be called @*ARGS if %*OPTS is preferred over %*ARGH 

[06:41] <masak> moritz_: now you're getting it.

[06:41] <pmichaud> literal: it is called @*ARGS 

[06:41] <literal> oh

[06:41] <masak> moritz_: Lingua::Perl6::Lolcode

[06:41] <masak> or ::Lolcat, perhaps.

[06:41] <pmichaud> Lingua::Perl6::CHEEZBURGER

[06:41] <pmichaud> I'm wondering why it's %*OPTS and not %*ARGS

[06:42] <pmichaud> I guess %*OPTS is a bit more readable

[06:42] <jnthn> use Lingua::Perl6::LarryDIDNOTWANT # adds all the syntax people suggested and Larry said no to ;-)

[06:42] *** azawawi joined
[06:42] <azawawi> hi *

[06:42] <literal> hello

[06:43] <masak> Lingua::Perl6::GetOffMyLawn to make Perl 6 behave exactly like Perl 5.

[06:43] <moritz_> masak: 'use v5;' is a bit shorter ;-)

[06:44] <jnthn> me -> hackathon

[06:44] <masak> moritz_: good point. :)

[06:44] <literal> moritz_: '' is even shorter (Perl 5 is still the default, right?)

[06:45] <moritz_> literal: only if the executable is called 'perl' - if it's called 'perl6', I don't think so

[06:45] <literal> ok

[06:45] <azawawi> any blog post on what happened in the hackathon?

[06:45] <pmichaud> that's one of my morning hackathon tasks

[06:45] <pmichaud> at least to describe some of the decisions and events of yesterday

[06:46] <azawawi> it would be also nice to have a picture with people names on it :)

[06:47] <Tene> pmichaud: do you still plan to have user-defined ops soon?

[06:47] *** alanhaggai_ joined
[06:47] <pmichaud> Tene: yes.

[06:47] <Tene> Thanks.  Didn't want to be spreading lies.  :)

[06:47] <pmichaud> Probably not for April release, but certainly for May.

[06:47] *** szabgab left
[06:48] <pmichaud> Both jnthn++ and I worked on an update roadmap last night (which needs some cleaning up), and user-defined ops is important on several levels.

[06:48] <pmichaud> time to depart

[06:48] <pmichaud> bbiab

[06:48] <moritz_> htaaof

[06:48] <literal> how long is this hackathon?

[06:48] <moritz_> (have the appropriate amount of fun)

[06:49] <literal> or, the NPW rather

[06:49] <arnsholt> NPW was thursday and friday last week. Hackathon from saturday to today

[06:49] <literal> oh, I see

[06:50] <azawawi> masak: any chance one could download your NPW slides?

[06:50] <masak> azawawi: sure.

[06:50] <masak> just go to the talk page.

[06:51] <masak> or fetch them from here: http://masak.org/carl/npw2009-november/talk.pdf

[06:54] * azawawi fetches it... :)

[06:59] <azawawi> masak: thank you, i will read it now.

[07:02] <Tene> rakudo: 'say 1' ~~ /<Perl6::Grammar::TOP>/; say $/.perl;

[07:02] <p6eval> rakudo 0d5515: OUTPUT«No result object␤current instr.: 'parrot;PCT;Grammar;ast' pc 86 (src/PCT/Grammar.pir:87)␤»

[07:03] <Matt-W> Morning

[07:03] *** alanhaggai left
[07:06] <masak> Tene: plz submit rakudobug.

[07:06] <Tene> I'm pretty sure I've seen it many times before

[07:06] <Tene> should already be filed...

[07:06] * masak checks

[07:06] <masak> rakudo: module A { sub foo() { return 42 }; say foo }

[07:06] <p6eval> rakudo 0d5515: OUTPUT«Null PMC access in find_method()␤current instr.: 'parrot;A;foo' pc 191 (EVAL_21:83)␤»

[07:06] * masak submits rakudobug

[07:07] *** mikehh joined
[07:07] <masak> Tene: no, I don't find it. I'll submit it just in case.

[07:07] <arnsholt> rakudo: "foo" ~~ /"foo"/

[07:07] <p6eval> rakudo 0d5515: OUTPUT«Statement not terminated properly at line 1, near "~~ /\"foo\"/"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[07:07] <masak> some heroic figure might show up eventually and sort out our rakudobugs...

[07:08] <masak> till then, I'd rather submit too many than too few.

[07:08] <Tene> nodnod

[07:08] <arnsholt> Is that a known bug, double quotes not working in regexes?

[07:08] <masak> arnsholt: aye.

[07:08] <masak> arnsholt: not sure if double quotes are specced in S05.

[07:09] <arnsholt> I think I saw something to that effect, but my reading comprehension at 4 in the morning or so last night may have been sub-par

[07:09] *** baest joined
[07:10] <arnsholt> S05, section Simplified lexical parsing of patterns: "Double quotes are also allowed, with the same interpolative semantics as the current language in which the regex is lexically embedded."

[07:11] <masak> ah.

[07:11] <masak> arnsholt: feel free to submits as a TODO rakudobug if you want.

[07:11] <masak> arnsholt: I know pmichaud is currently updating PGE, so it might be a good time.

[07:12] <arnsholt> 'k. rt.perl.org/rt3, right?

[07:12] <moritz_> arnsholt: [email@hidden.address]
[07:13] <moritz_> you can't submit through the web interface

[07:13] <Matt-W> masak: nice slides

[07:13] <masak> Matt-W: thank you. :)

[07:13] *** sephee left
[07:14] <arnsholt> moritz_: Righties

[07:15] <Matt-W> masak: I liked "Have the appropriate amount of fun"

[07:15] <masak> std: use Dog:ver(1.2.1 | 1.3.4):auth(/:i jrandom/);

[07:15] <p6eval> std 26297: OUTPUT«##### PARSE FAILED #####␤Number contains two decimal points (missing 'v' for version number?) at /tmp/NjH6lwgCul line 1:␤------> use Dog:ver(1.2.1 | 1.3.4):auth(/:i jrandom/);␤FAILED 00:02 35m␤»

[07:16] <masak> Matt-W: not my line originally, of course. :)

[07:16] <Matt-W> masak: And the slides themselves convey a great sense of excitement about what's happening

[07:16] *** sephee joined
[07:16] <masak> Matt-W: good. I am excited.

[07:16] <masak> Matt-W: especially after NPW and the hackathon.

[07:16] <Matt-W> :)

[07:16] <Matt-W> Was good then?

[07:17] <masak> Matt-W: http://use.perl.org/~masak/journal/38832

[07:19] *** projectorA joined
[07:21] <Matt-W> masak: Was good :)

[07:22] <masak> aye.

[07:22] <projectorA> Good morning, hackaton!

[07:22] <pugs_svn> r26298 | jnthn++ | Make S02 consistent with S14.

[07:22] <Matt-W> If I ever develop the ability to teleport from place to place, I will make a point of attending a similar gathering in the future

[07:23] * masak waves at projectorA 

[07:23] <jnthn> projectorA: You're looking good.

[07:23] <masak> Matt-W: I can already picture getting slightly annoyed at you blinking in and out of the room. :)

[07:24] *** bacek_ left
[07:24] <masak> Matt-W: muttering slightly, secretly wishing I'd have put in those twelve years of esoteric yoga training myself.

[07:24] <sjn> so when should we have the morning meeting?

[07:24] <wayland> masak: βαδ βου

[07:24] <sjn> 10:00

[07:25] <wayland> :)

[07:25] <sjn> is 10:00 ok?

[07:25] <masak> wayland: "Bad Boss"?

[07:25] <frettled> azawawi: I'll have a look at the pictures I put out there and add names for those I know.

[07:25] <azawawi> frettled: thx

[07:25] <masak> wayland: oh wait, that's a nu. "Bad Bun"?

[07:26] <wayland> Well, the "υ" is what you get if you type "y" on a greek-layout kbd

[07:26] <eiro> greek letters have better render than latin one! (on my term at least) 

[07:26] <masak> frettled: I'm the one in glasses dancing the boogie woogie.

[07:26] * frettled just has to clear the abuse queue at work.  Grrrr.

[07:26] <frettled> masak: kthx

[07:26] <masak> :)

[07:26] <masak> s/glasses/sunshades/

[07:27] <pmichaud> 10:00 ack

[07:27] <masak> eiro: greek letters rock.

[07:27] <wayland> But actually, I'm playing with keyboard layouts, and wanted to test :)

[07:27] *** szabgab joined
[07:27] <eiro> masak, sure

[07:28] <eiro> masak, your proposition for code reviewing is for web purpose only ? 

[07:28] <masak> eiro: no, for any purpose.

[07:28] <masak> eiro: but it helps to put it in blog format, I think.

[07:28] <wayland> rakudo: $βοο = "καλλω"; print $βοο;

[07:28] <masak> because then you address the general reader.

[07:28] <p6eval> rakudo 0d5515: OUTPUT«Scope not found for PAST::Var '$βοο' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:104)␤»

[07:29] <wayland> rakudo: my $βοο = "καλλω"; print $βοο;

[07:29] <masak> wayland: 'my'

[07:29] <p6eval> rakudo 0d5515: OUTPUT«error:imcc:syntax error, unexpected USTRINGC, expecting STRINGC ('unicode:"$\u03b2\u03bf\u03bf"')␤ in file 'EVAL_17' line 44␤Lexical '$βοο' not found␤current instr.: '_block14' pc 71 (EVAL_17:47)␤»

[07:29] * masak submits rakudobug

[07:29] <wayland> masak: Thanks :)

[07:29] <masak> that's what I do. :)

[07:29] <eiro> masak, you want me to blog my code ? 

[07:29] <masak> eiro: yes, please.

[07:29] <pmichaud> that looks like a Parrot bug.

[07:30] <eiro> masak, as you want 

[07:30] <eiro> it would be done 

[07:30] <masak> pmichaud: do I submit a parrotbug instead?

[07:30] <pmichaud> leave it as a rakudo bug -- I'll verify in Parrot and then link tickets if so.

[07:30] <wayland> rakudo: my $boo = "καλλω"; print $boo;

[07:30] <p6eval> rakudo 0d5515: OUTPUT«καλλω»

[07:30] <pmichaud> oh wait

[07:30] <wayland> rakudo: my $βοο = "call"; print $βοο;

[07:30] <p6eval> rakudo 0d5515: OUTPUT«error:imcc:syntax error, unexpected USTRINGC, expecting STRINGC ('unicode:"$\u03b2\u03bf\u03bf"')␤ in file 'EVAL_17' line 44␤Lexical '$βοο' not found␤current instr.: '_block14' pc 71 (EVAL_17:47)␤»

[07:30] <pmichaud> Parrot won't accept unicode lexicals?!

[07:30] <pmichaud> that's just.... wrong.

[07:31] <wayland> Yeah, it's definitely the variable :)

[07:31] <pmichaud> rakudo:  my $boo = '$βοο';  say $boo

[07:31] <p6eval> rakudo 0d5515: OUTPUT«$βοο␤»

[07:31] <pmichaud> Yes, that must be the problem.

[07:32] <wayland> rakudo: $þor = "will smite you for θις";

[07:32] <p6eval> rakudo 0d5515: OUTPUT«Scope not found for PAST::Var '$þor' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:104)␤»

[07:32] <wayland> rakudo: my$þor = "will smite you for θις";

[07:32] <p6eval> rakudo 0d5515: OUTPUT«error:imcc:syntax error, unexpected USTRINGC, expecting STRINGC ('unicode:"$\x{fe}or"')␤   in file 'EVAL_14' line 44␤»

[07:32] <wayland> rakudo: my $þor = "will smite you for θις";

[07:32] <p6eval> rakudo 0d5515: OUTPUT«error:imcc:syntax error, unexpected USTRINGC, expecting STRINGC ('unicode:"$\x{fe}or"')␤   in file 'EVAL_14' line 44␤»

[07:32] <wayland> (sorry :)

[07:32] <pmichaud> Ugh, IMCC bug.

[07:32] *** kate21de left
[07:32] <wayland> Not even Latin-1 unicode

[07:34] <wayland> Well, it turns out my keyboard testing wasn't so useless after all :)

[07:34] <cspencer> rakudo: multi foo(Int $x, Bool :$flag, *@vals) { say "bar 1" };  foo(1)

[07:34] <p6eval> rakudo 0d5515: OUTPUT«bar 1␤»

[07:34] <cspencer> rakudo: multi foo(Int $x, Bool :$flag, *@vals) { say "bar 1" };  foo(1, 2, 3, 4, 5)

[07:34] <p6eval> rakudo 0d5515: OUTPUT«No applicable candidates found to dispatch to for 'foo'␤current instr.: '_block14' pc 99 (EVAL_16:54)␤»

[07:35] <pmichaud> bug.

[07:35] <cspencer> can anybody explain why dispatch fails on the second?

[07:35] * masak submits

[07:35] <cspencer> rakudo: multi foo(Int $x,  *@vals) { say "bar 1" };  foo(1, 2, 3, 4, 5)

[07:35] <p6eval> rakudo 0d5515: OUTPUT«bar 1␤»

[07:35] <moritz_> shouldn't it complain that the slurpy args go before the named ones?

[07:35] * masak thought slurpies go last

[07:35] <cspencer> multi foo(Int $x, *@vals, Bool :$flag) { say "bar 1" };  foo(1, 2, 3, 4)

[07:36] * cspencer thought so too....

[07:36] <cspencer> rakudo: say 1

[07:36] <p6eval> rakudo 0d5515: OUTPUT«1␤»

[07:37] <cspencer> i'm off for the evening, have a good day all :)

[07:37] *** cspencer left
[07:38] <arnsholt> There. Submitted the bug. I'd take a stab at looking at the code, but I couldn't find it, embarrasingly enough

[07:39] <masak> arnsholt: don't worry. it'll be in there before you know it. :)

[07:41] <arnsholt> That works as well I suppose. I'll just get cracking at finding something else that doesn't work then =)

[07:41] <masak> arnsholt: a tip is to trawl through our 300 existing RT bugs.

[07:41] <masak> arnsholt: some things there ought to be trivial to fix.

[07:42] <arnsholt> True, true

[07:42] *** alanhaggai_ is now known as alanhaggai

[07:48] *** Eevee joined
[07:58] *** wayland__ joined
[08:02] <pugs_svn> r26299 | lwall++ | s/readline/get/

[08:04] <dalek> rakudo: 71033ee | pmichaud++ | docs/spectest-progress.csv:

[08:04] <dalek> rakudo: spectest-progress.csv update: 372 files, 10381 passing, 0 failing

[08:04] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/71033eef9fcedd7283843994009c3691f2e5ce8b

[08:05] <moritz_> TimToady: so there's no context dwimmery anymore, lines() returns all lines (lazily), and get always returns one?

[08:05] *** ejs left
[08:05] <TimToady> correct

[08:06] <masak> pmichaud: 0 failing? did the junctions failure get fixed already?

[08:06] <moritz_> masak: no, it was removed from spectest.data

[08:06] <moritz_> TimToady++

[08:06] <masak> oh, ok.

[08:07] <TimToady> we might possibly add a limit to lines, such that .lines(1) means get

[08:08] <Matt-W> TimToady: I think that would be useful

[08:08] <TimToady> which is not the same as .lines[^1]

[08:08] <Matt-W> what's .lines[^1]

[08:09] <TimToady> which can theoritcally read all the lines and then return only the first one

[08:09] <Matt-W> aaah

[08:09] <TimToady> ^1 is the range 0..0

[08:09] <Matt-W> so ^2 is 0..1?

[08:09] <TimToady> so ^$n serves as a limit of $n

[08:09] <TimToady> when subscripting

[08:09] <Matt-W> Nice

[08:09] <TimToady> but lines might read further ahead if it likes

[08:10] <TimToady> so I think a hard limit as a parameter is probably in order

[08:10] <TimToady> especially if the underlying interator supports it

[08:10] <TimToady> such that we don't have to do get;get;get;get;get

[08:10] <Matt-W> lines(5) would be nicer than that :)

[08:10] <TimToady> if it were ruby it'd probably be 5.lines  :)

[08:12] <masak> TimToady: that one might as well return the lines of the file "5" as anything else. :)

[08:15] *** wayland left
[08:16] <moritz_> ... of or the 5th file in the directory :-)

[08:19] <dalek> rakudo: 11352de | jnthn++ | build/gen_setting_pm.pl:

[08:19] <dalek> rakudo: Fix gen_setting_pm.pl changes yesterday to also work on Win32.

[08:19] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/11352def7454f9fecbb63a10b49f58544370e93e

[08:19] <dalek> rakudo: 039f6d5 | jnthn++ | :

[08:19] <dalek> rakudo: Merge branch 'master' of [email@hidden.address]
[08:19] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/039f6d5ee448955a422395b1e08cd316f58ade97

[08:20] *** cls_bsd_ joined
[08:20] *** cls_bsd left
[08:23] *** meppl joined
[08:24] <pugs_svn> r26300 | azawawi++ | [S:H:P6] Migrated to latest STD with problems... make test still fails

[08:24] <pugs_svn> r26300 | azawawi++ | [S:H:P6] Updated to latest Moose

[08:25] <sjn> Shall we have our morning meeting in the Cantina at 10:30? (need to finish before 11:00)

[08:27] <pugs_svn> r26301 | krunen++ | added tests for $/.list and $/.hash

[08:29] <moritz_> TimToady: will $/.kv return the keys/values of both the named and positional captures?

[08:29] *** [particle]2 joined
[08:30] <pugs_svn> r26302 | lwall++ | [S32] add limit to lines

[08:30] <pugs_svn> r26302 | lwall++ | [S07] refine get/iterator semantics; fix typos

[08:32] <TimToady> moritz_: good question; can argue it both ways

[08:32] <moritz_> TimToady: what's the other way?

[08:33] <TimToady> some might expect just the named

[08:33] <pmichaud> (the question likely applies to Capture)

[08:33] <TimToady> on the gripping hand, it might just fail

[08:33] <TimToady> yes, same Q for captures

[08:34] <TimToady> %$/.kv or @$/.kv would work, I guess

[08:38] <TimToady> so we could just outlaw .kv on Capturesque things

[08:39] <pmichaud> that's what I was expecting/thinking

[08:40] <moritz_> TimToady: we could also have .kv and .pairs do what .caps does now

[08:44] *** [particle]1 left
[08:44] <pugs_svn> r26303 | azawawi++ | [S:H:P6] Bumped version to 0.41 and released to CPAN :)

[08:50] <TimToady> moritz_: that would tend to imply that a Capture remembers the original order, even if named and positional were intermixed

[08:51] <TimToady> which might be useful, but I'm not sure that current implementations keep that info

[08:51] *** ejs joined
[08:52] <moritz_> TimToady: right

[08:52] <azawawi> TimToady: Hi, im seeing a CORE.pad.store in the current directory after executing the STD parser; shouldnt that be in the 'lex' folder?

[08:53] <TimToady> CORE.pad changes much less frequently than lex/

[08:53] *** rblasch joined
[08:54] <TimToady> eventually CORE.pad gets replaced with CORE.pm, which defines the standard setting, and compiles down to something like CORE.pad

[08:55] <masak> TimToady: STD.pm doesn't parse the things mentioned in S11 yet.

[08:55] <TimToady> which things?

[08:55] <masak> version numbers, for example.

[08:56] <azawawi> TimToady: yeah but we could tidy it up a little via STD->parse(temp_dir => 'some_temp_dir')

[08:56] <TimToady> std: use Foo:ver<4.2>;

[08:56] <p6eval> std 26303: OUTPUT«ok 00:02 34m␤»

[08:56] <masak> std: use Dog:ver(1.2.1 | 1.3.4):auth(/:i jrandom/);

[08:56] <p6eval> std 26303: OUTPUT«##### PARSE FAILED #####␤Number contains two decimal points (missing 'v' for version number?) at /tmp/VnJcN8TGSe line 1:␤------> use Dog:ver(1.2.1 | 1.3.4):auth(/:i jrandom/);␤FAILED 00:02 34m␤»

[08:57] <masak> STD.pm and S11 on collision course.

[08:57] <moritz_> I changed one occurence of 1.2.1 in S12 to v1.2.1

[08:57] <TimToady> they should all have a v

[08:57] <masak> I'll fix it.

[08:58] <TimToady> if we allow bare 1.2.1 then it's too easy to fall into the trap of thinking 1.2 works

[08:58] <TimToady> so the S11 usage is a fossil

[08:59] <masak> TimToady: and this goes for those within <> as well?

[08:59] <masak> :ver<v1.2.1> ?

[08:59] <TimToady> no

[08:59] <masak> ok.

[08:59] <TimToady> that would be redundant

[09:00] <masak> but :ver(v1.2.1 | 1.3.4) ? :)

[09:00] <masak> oops.

[09:00] <masak> :ver(v1.2.1 | v1.3.4)

[09:00] <moritz_> yes

[09:00] <TimToady> std: use Dog:ver(v1.2.1 | v1.3.4):auth(/:i jrandom/);

[09:00] <p6eval> std 26303: OUTPUT«ok 00:02 35m␤»

[09:00] <masak> :)

[09:02] <moritz_> is $obj but { (anonymous role) } specced?

[09:02] <moritz_> or does it need to be $obj but role { ... } ?

[09:04] *** payload joined
[09:05] <masak> std: use Dog:ver(1.2 | v1.3.4);

[09:05] <p6eval> std 26303: OUTPUT«ok 00:02 35m␤»

[09:05] <masak> TimToady: would that dwim to v1.2?

[09:05] *** blareg joined
[09:05] <blareg> hi

[09:06] <masak> blareg: hello.

[09:06] <blareg> anyone thought about or worked on a c compiler for perl

[09:06] <blareg> with an ide

[09:06] <blareg> hi

[09:06] <masak> blareg: re C compiler: I heard it mentioned a couple of days ago, making a C compiler on Parrot.

[09:06] <blareg> s/for/in

[09:06] <blareg> really

[09:07] <masak> blareg: don't think anyone's working on it.

[09:07] <blareg> nice

[09:07] <blareg> whats parrot

[09:07] <masak> blareg: it's a VM for dynamic languages.

[09:07] <masak> blareg: the next big version of Perl, Perl 6, is running on top of it.

[09:07] <masak> blareg: you're on the #perl6 channel. :)

[09:08] <blareg> yeah

[09:08] <blareg> k thats nice

[09:08] *** eiro is now known as toutfaux

[09:09] <pugs_svn> r26304 | masak++ | [S11] added 'v' to version numbers within :ver()

[09:09] <pugs_svn> r26304 | masak++ | 

[09:09] <pugs_svn> r26304 | masak++ | When the version numbers are within :ver<>, the 'v' can be omitted. But in

[09:09] <pugs_svn> r26304 | masak++ | :ver() they shouldn't be, because they'd be parsed as decimal numbers.

[09:09] <blareg> k thanks

[09:09] *** blareg left
[09:10] *** toutfaux is now known as eiro

[09:10] <wayland__> I wonder what impression he got :)

[09:10] *** wayland__ is now known as wayland76

[09:10] *** alanhaggai_ joined
[09:11] *** cognominal left
[09:16] *** alanhaggai left
[09:16] *** alanhaggai_ is now known as alanhaggai

[09:16] *** Kisu left
[09:17] *** Kisu joined
[09:17] <mikehh> rakudo (71033ee) builds on parrot r38222 - make test/make spectest PASS - Ubuntu Intrepid i386

[09:18] <pmichaud> thanks.  If anyone is running (32-bit) darwin, we apparently are having a build issue there.

[09:19] <omega> I think I have 32-bit at home, can check later if you want?

[09:19] <pmichaud> that would be great.

[09:19] <pmichaud> would like to have it resolved before Parrot release tomorrow.

[09:20] <pmichaud> (or be able to tell the Parrot folks about it so they can potentially hold the release)

[09:20] <omega> at least I have a MBP with Core Duo, not Core 2 Duo

[09:23] *** alanhaggai_ joined
[09:23] *** alanhaggai left
[09:26] <pugs_svn> r26305 | szabgab++ | Smart::Links move emit_pod to class, remove $line_anchor global

[09:29] *** cognominal joined
[09:30] *** ejs left
[09:31] <TimToady> masak: can't dwim 1.2, since it could just as easily mean v1.20

[09:31] <masak> TimToady: so what does it mean, since STD.pm parses it?

[09:32] <masak> or is it syntactical but a runtime error?

[09:32] <TimToady> STD.pm knows almost nothing about semantics

[09:32] <masak> fair enough.

[09:32] <TimToady> it would eventually be determined by whether you can smartmatch a version against Num

[09:32] <pugs_svn> r26306 | szabgab++ | set svn:ignore

[09:32] <TimToady> and since a version doesn't convert to Num (probably), it blows up

[09:33] <TimToady> I suspect there will be some pressure to numify to the Perl 5 floating form, but I will resist :)

[09:33] <masak> :)

[09:33] <masak> yes, do that.

[09:34] <TimToady> v1.2.3.p5float maybe

[09:34] <masak> returns a Str?

[09:34] <masak> oh, it can return a Num. nvm.

[09:35] <TimToady> no, a Num 1.20_300 or some such

[09:35] <TimToady> I forget the exact p5 format

[09:35] <masak> aye.

[09:36] <pugs_svn> r26307 | jnthn++ | [t/spec] skip a test that Rakudo has been passing for completely bogus reasons, and that is about to start parse-failing.

[09:40] <pugs_svn> r26308 | jnthn++ | [t/spec] Skip a test that we todo'd before; got away with that when we ignored traits on variables.

[09:41] *** cosimo joined
[09:42] <pugs_svn> r26309 | szabgab++ | Smart::Links move the parse_pod

[09:44] <frettled> TimToady: would that be a N􏿽xFAm or a N􏿽xFBm?  ;)

[09:45] <moritz_> let's call it Nom :-)

[09:47] <frettled> moritz_: I hope that's not an om nom nom joke.  (woops)

[09:48] *** PhatEddy joined
[09:49] <PhatEddy> rakudo: class Task {}

[09:49] <p6eval> rakudo 039f6d:  ( no output )

[09:50] <PhatEddy> if someone wants to close http://rt.perl.org/rt3/Public/Bug/Display.html?id=61128 dependent on closed tt 71 maybe they can ...

[09:51] * masak closes

[09:51] <masak> PhatEddy++

[09:51] *** c9s_ joined
[09:53] <masak> & # lunch and midday nap

[09:54] *** agentzh joined
[10:00] *** alanhaggai_ is now known as alanhaggai

[10:03] *** payload left
[10:09] *** c9s_ is now known as c9s

[10:20] *** fridim_ joined
[10:25] *** SamB joined
[10:29] *** agentzh left
[10:29] *** agentzh joined
[10:43] *** rhr_ left
[10:43] *** kidd left
[10:43] *** kidd joined
[10:43] *** jiing joined
[10:43] *** rhr joined
[10:51] *** aff joined
[10:58] *** payload joined
[11:00] *** icwiener joined
[11:12] *** payload left
[11:17] *** payload joined
[11:24] *** kst` joined
[11:39] *** iblechbot left
[11:43] <szabgab> moritz_, is File::Find::Rule installed on feather ?

[11:44] <moritz_> szabgab: yes

[11:44] <szabgab> tx

[11:44] <moritz_> as a rule of thumb nearly all perl modules that are available as a .deb in Debian unstable are installed on feather :-)

[11:45] <szabgab> actually I think I used to have an account on feather so I could have tried it but I don't remember the details

[11:46] <szabgab> it is either gabor or szabgab

[11:47] <moritz_> there's a /home/gabor/

[11:48] <szabgab> could you reset the password or set a public key on it ?

[11:49] <aff> Is there an equivalent of p5 Test::More::cmp_ok in rakudo's Test.pm? Or should I use "is" also for comparing numbers?

[11:49] <moritz_> szabgab: I don't remember my password, so I can only do it when I come back home

[11:50] <szabgab> :-)

[11:51] <moritz_> i can log in thanks to ssh pubkeys, but not become root

[11:51] <baest> aff: no cmp_ok, is is using eq

[11:51] <moritz_> hey, you're in luck, I had a screen open where I am root

[11:54] <pugs_svn> r26310 | jnthn++ | [t/spec] Tests for of trait verb on variables (some unfudges, some new).

[11:54] <aff> Reason for asking: p5 cmp_ok("2e4", "==", 2e4) says ok, but p6 is("2e4",2e4) says not ok.

[11:55] <dalek> rakudo: cb2b28b | jnthn++ | src/ (2 files):

[11:55] <dalek> rakudo: First cut of traits on variables; impelment of trait verb so 'my $x of Int' and similar now work.

[11:55] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/cb2b28b87b953b671979fd245a1cefb04782eb4b

[11:56] <baest> rakudo: use Test; ok("2e4" == 2e4)

[11:56] <p6eval> rakudo 039f6d:  ( no output )

[11:56] <baest> hmmm, works for me

[11:56] <aff> Ok thanks baest.

[11:56] <baest> np

[11:57] <moritz_> rakudo: ok(2 == 2, "hi")

[11:57] <p6eval> rakudo 039f6d: OUTPUT«Could not find non-existent sub ok␤current instr.: '_block14' pc 85 (EVAL_16:47)␤»

[11:57] <moritz_> rakudo: use Test; ok(2 == 2, "hi")

[11:57] <p6eval> rakudo 039f6d:  ( no output )

[11:58] <baest> weird, use not working with the bot?

[11:58] <moritz_> sh: line 1:  1159 Done                    echo 1160 CPU time limit exceeded | ./perl6 /tmp/ZPo5Wcwq6h >> /tmp/Q6UmTJPSCF 2>&1

[11:58] <moritz_> it probably doesn't precompile Test.pm

[11:59] <PhatEddy> rakudo: &f

[11:59] <p6eval> rakudo 039f6d:  ( no output )

[11:59] <moritz_> rakudo: use Test; plan 1; ok(1, "foo")

[11:59] <p6eval> rakudo 039f6d: OUTPUT«1..1␤ok 1 - foo␤»

[12:00] <PhatEddy> rakudo: sub f {say "hi"}; my $x = &f; $x()

[12:00] <p6eval> rakudo 039f6d: OUTPUT«hi␤»

[12:00] <baest> rakudo: use Test; plan 1; ok("2e4" == 2e4)

[12:00] <PhatEddy> http://rt.perl.org/rt3/Public/Bug/Display.html?id=63708 looks closeable ...

[12:00] <p6eval> rakudo 039f6d: OUTPUT«1..1␤ok 1 - ␤»

[12:00] <baest> wheee, moritz_++

[12:01] <moritz_> being root can be handy at times :-)

[12:02] <baest> how do you precompile a pm? I've never done that

[12:02] <moritz_> make Test.pir :-)

[12:02] <moritz_> and see what it does

[12:02] <baest> nifty

[12:03] <baest> on my machine, from 8.6s to 1s, very nice

[12:05] *** nsh joined
[12:07] *** alanhaggai_ joined
[12:11] *** DanielC joined
[12:12] <pugs_svn> r26311 | szabgab++ | Smart::Links replace File::Find by File::Find::Rule

[12:15] <PhatEddy> Since there is no comment on closing RT 63708 I will note the p6eval output in my reply to the ticket unless some objection ...

[12:17] <moritz_> PhatEddy: I'm building rakudo locally now... I don't always trust p6eval :/

[12:17] *** cls_bsd_ is now known as cls_bsd

[12:19] *** DanielC left
[12:20] <pugs_svn> r26312 | szabgab++ | Smart::Links separate out get_pugs_dev

[12:23] *** c9s_ joined
[12:23] *** aff left
[12:23] *** alanhaggai left
[12:28] *** ruoso joined
[12:28] <pugs_svn> r26313 | szabgab++ | Smart::Links move process_t_file to the class

[12:29] *** ispy_ joined
[12:34] *** alanhaggai_ left
[12:35] *** c9s__ joined
[12:38] *** gfldex joined
[12:38] *** c9s left
[12:42] *** payload1 joined
[12:45] *** payload left
[12:50] *** c9s_ left
[13:00] *** iblechbot joined
[13:01] *** pmurias joined
[13:08] *** payload1 left
[13:12] *** azawawi left
[13:19] <pugs_svn> r26314 | szabgab++ | Smart::Links process_yml_file moved

[13:33] *** azawawi joined
[13:37] *** iblechbot left
[13:38] *** skids joined
[13:43] <dalek> rakudo: 07bfffc | pmichaud++ | :

[13:43] <dalek> rakudo: Merge branch 'master' of [email@hidden.address]
[13:43] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/07bfffc46439a67b48d1f1986de1d0dc52fa5926

[13:43] <dalek> rakudo: 480902e | pmichaud++ | src/ (2 files):

[13:43] <dalek> rakudo: Updates to enable .hash to work on Match objects.

[13:43] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/480902edc93fd79bcfe354038c2cce078b9cb868

[13:49] *** payload joined
[13:51] *** PacoLinux joined
[13:51] <pugs_svn> r26315 | szabgab++ | Smart::Links move html generation to class

[13:52] *** azawawi left
[13:55] <pugs_svn> r26316 | lwall++ | -e test is now :e

[13:55] <pugs_svn> r26317 | szabgab++ | Smart::Links move some of the docs

[13:56] *** LylePerl left
[13:57] <pugs_svn> r26318 | szabgab++ | Smart::Links move global variable in sub

[13:57] *** rindolf joined
[13:58] *** PacoLinux left
[14:00] *** rafl joined
[14:02] <moritz_> rakudo: rule w { . }; 'a' ~~ m/<w>/; for %($/).kv -> $k, $v {say $v.WHAT };

[14:02] <p6eval> rakudo 480902: OUTPUT«Str␤»

[14:03] <skids> moritz_: did you get my reply on the Iterator.get ticket?  RT isn't showing it.

[14:03] <moritz_> skids: sorry, I can't check it right now, I don't have access to all of my mailboxes here

[14:04] <skids> Ah, well the short answer is: because nobady ever implemented prefix:<=> for Iterator. 

[14:04] <moritz_> ok :-)

[14:07] <pugs_svn> r26319 | lwall++ | [t] translate calls to prefix:<=> to get or lines

[14:08] <moritz_> pmichaud: your commit fixes RT #63904 (but we need tests)

[14:10] <moritz_> (taken that ticket now)

[14:10] *** PhatEddy left
[14:11] *** alanhaggai joined
[14:12] <moritz_> pmichaud: I gave you RT #63616 instead :-)

[14:14] <omega> pmichaud: did you want me to check anything specifically, or just that git pull origin master && perl Configer.pl --gen-parrot && gmake clean && gmake works?

[14:14] *** nihiliad joined
[14:15] <pmichaud> omega: just that they work.

[14:15] *** rindolf left
[14:16] <omega> pmichaud: ok :)

[14:16] <omega> building new parrot now

[14:19] <moritz_> rakudo: say ('a' ~~ /\c[65]/)

[14:19] <p6eval> rakudo 480902: OUTPUT«␤»

[14:19] <moritz_> rakudo: say ord('a')

[14:19] <p6eval> rakudo 480902: OUTPUT«97␤»

[14:19] <krunen> pmichaud: S05-match/capturing-contexts.t now passes, can be added to spectest

[14:19] <moritz_> rakudo: say ('a' ~~ /\c[95]/)

[14:19] <p6eval> rakudo 480902: OUTPUT«␤»

[14:20] *** alanhaggai_ joined
[14:20] *** payload left
[14:20] <moritz_> rakudo: say ('a' ~~ /\c[97]/)

[14:20] <p6eval> rakudo 480902: OUTPUT«a␤»

[14:20] <moritz_> rakudo: say ('a' ~~ /\C[97]/)

[14:20] <p6eval> rakudo 480902: OUTPUT«␤»

[14:20] <moritz_> rakudo: say ('b' ~~ /\C[97]/)

[14:20] <p6eval> rakudo 480902: OUTPUT«b␤»

[14:23] <skids> okayyy....

[14:23] <krunen> pmichaud: sorry, it is already done :)

[14:23] <pmichaud> krunen: okay, thanks :-)

[14:23] *** alanhaggai_ left
[14:23] <masak> moritz_: what does \C do?

[14:23] <masak> oh, ah.

[14:23] <masak> nvm. :)

[14:23] <pmichaud> (any character not .... )

[14:23] <masak> right.

[14:23] <masak> the evals make sense now.

[14:23] <pugs_svn> r26320 | szabgab++ | move the linksys datastructure to the class

[14:25] <masak> pmichaud: re [perl #64880], the double-quotes-in-regexes, in case the interpolation semantics is nontrivial, it might be good to know that even noninterpolating double quotes in regexes would facilitate writing one-liners with perl6 -e '', where single quotes (AFAIK) cannot be used.

[14:26] *** kane_ joined
[14:27] *** c9s__ is now known as c9s

[14:30] <omega> pmichaud: they build, and gmake test in rakudo directory passes..

[14:30] <omega> pmichaud: anything else I should try?

[14:31] *** PacoLinux joined
[14:31] *** rgs joined
[14:37] *** frew|work joined
[14:38] *** alanhaggai left
[14:39] *** alanhaggai joined
[14:39] <krunen> rakudo: rule ad { <alpha><digit> }; rule z { <ad> }; "a1 b2" ~~ /<z>+/; $/.perl.say

[14:39] <p6eval> rakudo 480902: OUTPUT«StopIteration␤current instr.: 'parrot;Match;_block2786' pc 56467 (src/gen_setting.pir:10103)␤»

[14:40] <krunen> it might be wrongish, but why the StopIteration?

[14:40] <baest> masak: I did the double quotes at NPW, it interpolates \*, but not variables

[14:40] <baest> masak: pmichaud has a patch somewhere in his mailbox :)

[14:40] <masak> baest: awesome.

[14:41] <pmichaud> yes, it's in my mailbox and in my queue of things to apply.

[14:41] <masak> yes, I think variable interpolation would depend on getting that little HLLs-talking-to-each-other detail working :)

[14:42] <moritz_> krunen: it's a bug.

[14:42] <masak> I haven't seen that bug in .perl before.

[14:42] <masak> I know .perl has gotten worse since it moved out into the setting.

[14:42] <baest> masak: yeah, pmichaud said that would be a pretty big change with scopes and that sort

[14:42] <masak> aye.

[14:43] <moritz_> masak: that's because it used to give a Null PMC access before :/

[14:43] *** cosimo left
[14:43] <masak> moritz_: ah.

[14:43] <krunen> moritz_: yeah, .perl is !good

[14:43] <moritz_> krunen: patches welcome :-)

[14:43] <masak> :)

[14:43] <masak> setting++

[14:43] <moritz_> actually I did the Match.perl in Perl 6 because the pir one had stopped working

[14:44] <moritz_> and I hit two major bugs

[14:44] <moritz_> one of which pmichaud++ removed now

[14:44] <moritz_> the other being that if you iterate over the named captures, they turn to Strings

[14:45] <moritz_> maybe I can find out what's wrong now, and what's causing the StopIterator

[14:45] <masak> moritz_++

[14:46] <pnu> How can i determine the type context in which the return value of the method i'm inside of, will be evaluated?

[14:46] <masak> pnu: like, List or Item?

[14:46] <moritz_> pnu: it's specced to be want(), but it's not implemented

[14:46] <moritz_> and probably not really implementable

[14:47] *** alester joined
[14:47] <masak> pnu: I think the Perl 6 way will turn out to be returning an object that behaves the way you want when evaluated by the calling context as a List, an Item, etc.

[14:47] <masak> pnu: that already works.

[14:48] <pnu> hmh. Where is want() specd?

[14:49] <literal> I think want() was killed

[14:49] <skids> Rumor has it it was discussed at Oslo, so we'll just have to wait for someone to summarize what's going to happen with want()ish stuff.

[14:49] <skids> Or should that be want()on?

[14:49] <moritz_> pnu: S04 or S06, I think

[14:49] * moritz_ sees a regression in t/spec/S03-operators/value_equivalence.t

[14:50] <pnu> ok, I'm in Oslo so maybe i'll ask from the guys what's the story.

[14:51] <pugs_svn> r26321 | szabgab++ | Smart::Links create process_test_files method

[14:51] <masak> rakudo: sub foo() { return class { method Str() { return "OH HAI" }; method Num() { return 42 } } }; say ~foo; say +foo

[14:51] <jnthn> DO NOT WANT()

[14:51] <p6eval> rakudo 480902: OUTPUT«!ANON10␤Class !ANON10 already registered!␤␤current instr.: '!meta_create' pc 19666 (src/builtins/guts.pir:493)␤»

[14:51] <masak> jnthn: is that the wrong syntax? :P

[14:51] <pmichaud> Match.perl might need to be updated after the recent changes.

[14:52] <jnthn> No, just my comment on want() ;-)

[14:52] <masak> jnthn: no, I meant my eval above?

[14:52] <jnthn> Ugh. Anonymous classes are...not quite so anonmous as would be good.

[14:53] <jnthn> file masakbug

[14:53] <jnthn> *rakudobug

[14:53] * masak files masakbug :)

[14:53] <masak> rakudo: sub foo() { return 5 but role {} }; say foo; say "alive"

[14:53] <skids> masak does need his own RT installation :-)

[14:54] <masak> this one hangs.

[14:54] * masak files another one

[14:54] <p6eval> rakudo 480902:  ( no output )

[14:54] <skids> masak: I didn't look to see if \(1,2,3).perl.say has an RT bug yet (recurses infinitely)

[14:54] *** mofino joined
[14:55] <masak> skids: I haven't submitted one, but feel free to scan RT before you submit.

[14:55] <skids> But I think the "but" bug has one.

[14:55] <masak> ok.

[14:55] <skids> Any constant "but" does that.

[14:55] <masak> ah.

[14:55] <masak> too bad.

[14:56] <jnthn> plz not another ticket for that one...

[14:57] <jnthn> Also anonymous roles are NYI.

[14:57] <jnthn> (NYS too... ;-))

[14:57] <pugs_svn> r26322 | szabgab++ | Smart::Links inline the list_t_files sub

[14:57] <skids> People want their "but False" API return values :-)

[15:00] <jnthn> Yeah...need to fix up True and False first.

[15:00] <jnthn> The enum-looking-thing that isn't an enum...

[15:00] *** iblechbot joined
[15:00] <masak> O RLY? I thought Bool was specced as an enum...

[15:01] *** rafl left
[15:01] <moritz_> spec != implementation

[15:01] <masak> OIC.

[15:01] <pnu> masak: yea, that proxy object idea might work but requires some mental refactoring for me..

[15:02] <masak> (mental refactoring)++

[15:02] * skids wonders whether type-reactive proxy objects would be lazy. 

[15:04] <masak> skids: in a sense yes, since the type conversion happens in methods.

[15:05] <pnu> in my case it would have to be lazy .. can't do my thing, really, until the evaluation type is known.

[15:05] <moritz_> closures++

[15:05] <masak> continuations++

[15:06] *** rafl joined
[15:06] <skids> coroutines++

[15:06] <skids> (just to get in on it)

[15:10] <pugs_svn> r26323 | szabgab++ | Smart::Links clean up some of the paramer passing and use methods instead

[15:15] <pnu> .. it would be nice to have some ready-made abstraction for this proxy-object concept; that should be quite common use case if it is the way of the camel as masak suggested. Not sure if that's possible though..

[15:16] *** c9s left
[15:16] <moritz_> pnu: we discusses that this or last month on p6l, Damian Conway pointed us to his Contextual::Return (Perl 5) module

[15:16] <moritz_> maybe that's good for some inspiration

[15:16] <skids> There was talk of using a block full of where's in Contextual::Return style

[15:17] <moritz_> anyway, $value but { method Str { #code for Str generation here } }; should work, once rakudo supports that syntax

[15:17] <pnu> moritz_: yes, that's exactly what i was thinking about.

[15:17] <moritz_> pnu: ah, good

[15:17] <masak> Contextual::Return is this idea plus some syntactic sugar.

[15:17] <pnu> contextuality++

[15:17] *** alanhaggai left
[15:18] *** exodist joined
[15:18] *** c9s joined
[15:18] *** justatheory joined
[15:19] *** c9s left
[15:19] <masak> context is the new black.

[15:22] <moritz_> rakudo: say WHAT(*-1)

[15:22] <p6eval> rakudo 480902: OUTPUT«Use of uninitialized value␤Num␤»

[15:22] *** c9s joined
[15:22] <moritz_> rakudo: say WHAT(*+1)

[15:22] <p6eval> rakudo 480902: OUTPUT«Block␤»

[15:26] <pnu> moritz_: where is this "$value but { method Str { ... } }" specd? (sorry, it's just so hard to search for "but" and/or remember the specs i've red until enough repetition)

[15:27] <mofino> rakudo: say WOT

[15:27] <p6eval> rakudo 480902: OUTPUT«Could not find non-existent sub WOT␤current instr.: '_block14' pc 53 (EVAL_16:37)␤»

[15:27] <mofino> :(

[15:27] *** abra joined
[15:28] <moritz_> pnu: S02 uses that syntax in an example

[15:28] <moritz_> search for 'but {'

[15:28] <masak> buubot: spack but\s\{

[15:28] <buubot> masak: Sorry, I couldn't find any matches for: but\s\{

[15:29] <masak> buubot: spack but {

[15:29] <buubot> masak: S01-overview.pod:2 S02-bits.pod:97 S03-operators.pod:89 S04-control.pod:26 S05-regex.pod:54 S06-routines.pod:53 S07-iterators.pod:7 S09-data.pod:18 S10-packages.pod:5 S11-modules.pod:15 S12-objects.pod:103 S13-overloading.pod:3 S16-io.pod:3 S17-concurrency.pod:10 S19-commandline.pod:6 S22-package-format.pod:3 S26-documentation.pod:16 S29-functions.

[15:29] <masak> oops.

[15:30] <moritz_> my Cat|Dog Fish $mitsy = new Fish but { Bool.pick ?? .does Cat !! .does Dog };

[15:30] <moritz_> that's the example

[15:30] <moritz_> uhm

[15:30] <moritz_> isn't 'new Fish' outlawed?

[15:30] <masak> yes.

[15:30] <masak> 'new: Fish' would be OK. 

[15:30] <moritz_> eek

[15:31] <TimToady> no, new: Fish is incorrect

[15:31] <TimToady> unless there is a new sub

[15:31] <TimToady> in which case new Fish works too

[15:31] <TimToady> er, actually the colon form never works

[15:31] <TimToady> listops never take colon

[15:31] <masak> oh, ok.

[15:31] <TimToady> new Fish: works

[15:32] <masak> ah, that's the one.

[15:32] <TimToady> std: new: Num

[15:32] <p6eval> std 26323: OUTPUT«ok 00:02 35m␤»

[15:32] <TimToady> std: $x = new: Num

[15:33] <p6eval> std 26323: OUTPUT«##### PARSE FAILED #####␤Illegal use of colon as invocant marker at /tmp/Sp9ZWV2rNE line 1:␤------> $x = new: Num␤Other potential difficulties:␤  Variable $x is not predeclared at /tmp/Sp9ZWV2rNE line 1:␤------> $x = new: Num␤FAILED 00:02 35m␤»

[15:33] <TimToady> first one was a label...

[15:34] * masak sees great obfu potential

[15:34] *** estrabd joined
[15:36] <pugs_svn> r26324 | szabgab++ | Smart::Links start generating stats page with list of test files without links

[15:37] <baest> TimToady: speaking of obfu, I'm worried that /<subrule>/ and /< stringliterallist>/ is somewhat similar and something especially people who tends to like whitespaces silly places would be hurt by

[15:37] <pnu> amm.. is the indirect object syntax " meth $obj: 'param'; " still ok? It's NIY i guess.. tried to use it.

[15:38] <pmichaud> NIY I think.

[15:39] *** ejs joined
[15:39] <literal> NIY?

[15:39] <jnthn> I think NYI

[15:39] <jnthn> Not Yet Impl

[15:39] <literal> ok

[15:39] <masak> well, Not Impl Yet, in this case. :)

[15:40] <masak> NYI and NIY, except the latter sounds slightly more hopeful for some reason.

[15:41] <masak> s/,/are equivalent,/

[15:41] *** abra left
[15:43] *** abra joined
[15:45] <pnu> ok, but anyway the butted object is the answer.

[15:46] <pnu> i just have to intantiate it from a live object, not class.

[15:46] * masak thinks so

[15:48] *** Psyche^ joined
[15:49] <pnu> it would be a creative use for the infinity negated with a vertical bar..  o|o in ASCII. :-)

[15:49] <TimToady> and O|O is Not Object Oriented

[15:50] <pugs_svn> r26325 | szabgab++ | Smart::Links add some more to the stats report

[15:50] <pnu> yes, they're very disoriented with the bar.

[15:50] <frettled> jnthn++ for a quick and concise explanation of what does and but do.

[15:51] <pnu> who does but?

[15:52] <frettled> But does not equal does, but but is more powerful than does.

[15:52] <frettled> In some ways.  :)

[15:52] * masak gets a sudden image of an Elvis and Costello act with '.WHO', 'does' and 'but'

[15:53] <masak> s/Elvis/Abbott/

[15:53] <frettled> .WHO does, but what?

[15:53] <pnu> this is all HOW for me.

[15:53] <masak> exactly.

[15:53] *** ssm_ joined
[15:54] <ingy-here> hi masak

[15:54] <masak> ingy-here: oh hai

[15:54] <ingy-here> sorry we failed to pair

[15:54] <masak> no problem.

[15:54] <ingy-here> i really thought you would be here today

[15:54] <masak> ingy-here: my current plan: start doing what I want with YAML::XS, and then simply port over to Perl 6 when it's possible.

[15:55] <masak> ingy-here: I might have been unclear on that point.

[15:55] <ingy-here> maybe we can pair up later this week

[15:55] <masak> ingy-here: gladly.

[15:55] <ingy-here> we are same tz i think

[15:55] <masak> aye.

[15:56] <ingy-here> is stockholm summer time gmt+2?

[15:56] <masak> it is.

[15:56] <ingy-here> cool

[15:56] <ingy-here> france too :)

[15:56] <masak> yeah, I'd really like to pair program Perl 6. I've done it once, and it's fun.

[15:57] <masak> alors.

[15:57] <ingy-here> awesome

[15:57] <frettled> Denmark, Norway and Sweden = CEST

[15:57] <frettled> Just ignore that the north-eastern part of Norway is further east than Istanbul.

[15:57] <ingy-here> we could get on voip and a shared screen session

[15:57] <ingy-here> i've done that all over the world

[15:59] *** Patterner left
[15:59] *** Psyche^ is now known as Patterner

[16:00] <masak> ingy-here: we could try that. I'm slightly skeptical if voip brings significant advantages over IRC, but willing to test it.

[16:01] <pugs_svn> r26326 | szabgab++ | Smart::Links move the gen_code_snippet to the class

[16:02] <pugs_svn> r26327 | lwall++ | [decode-utf-chunks] found another prefix:<=>

[16:03] <pugs_svn> r26328 | lwall++ | [STD] refactor PRE/POST to enable cleaner .ast processing

[16:04] *** ejs left
[16:13] <pugs_svn> r26329 | jnthn++ | [t/spec] Test for does at the point of declaration.

[16:14] <pnu> frettled: about but and does, search S14 for 'Which is why there’s a "but" operator' .. if that's of any help.

[16:14] <dalek> rakudo: 5919b0c | jnthn++ | src/builtins/guts.pir:

[16:14] <dalek> rakudo: Fix does at the point of declaration. (We're kinda cheating because we should really do it at compile time. This may result in shoes loudly being banged on tables.)

[16:14] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5919b0ce29ab47f8d056f8e3973bae9041aeb511

[16:17] <krunen> pmichaud: http://github.com/krunen/xml/

[16:19] *** orafu left
[16:19] *** orafu joined
[16:20] <pugs_svn> r26330 | lwall++ | [CORE] add end, chdir, get, and lines

[16:22] *** mofino left
[16:23] <frettled> pnu: jnthn explained it with stringify, but yes, essentially the same.

[16:36] *** masak left
[16:37] <pugs_svn> r26331 | lwall++ | change readline to get or lines; test for line limit

[16:42] <moritz_> @ask masak do you know if there were any tests for RT #61128?

[16:42] <lambdabot> Consider it noted.

[16:43] *** PacoLinux_ joined
[16:44] *** PacoLinux left
[16:44] *** PacoLinux_ is now known as PacoLinux

[16:46] <Tene> rakudo: 'say 1' ~~ /<Perl6::Grammar::TOP>/; say $/.hash.perl

[16:46] <p6eval> rakudo 5919b0: OUTPUT«No result object␤current instr.: 'parrot;PCT;Grammar;ast' pc 86 (src/PCT/Grammar.pir:87)␤»

[16:47] <Tene> pmichaud: you posted to twitter that .hash works on Match objects, but that doesn't seem to work...

[16:47] <moritz_> Tene: but I guess that's a different bug

[16:48] *** ejs joined
[16:48] <Tene> :(

[16:49] <Tene> I was wanting to add syntax hilighting to my Perl 6 pastebin.

[16:50] <pugs_svn> r26332 | moritz++ | [t/spec] RT #61128, parrot class names leaking through

[16:53] <moritz_> Tene: a noble quest

[16:56] *** FurnaceBoy joined
[16:56] <literal> I did that with Bot::Pastebot and Text::VimColor some time ago

[17:03] *** pyrimidine joined
[17:10] *** rblasch left
[17:11] *** Eimi joined
[17:12] *** cdarroch joined
[17:12] <pmichaud> Tene: we're still finding issues with .hash

[17:12] <pmichaud> I have fixes, but I'm delayed by big parrot bugs

[17:13] <PerlJam> (big parrot bugs)--

[17:13] <pmichaud> (which I'm trying to take care of before we get much closer to release.)

[17:14] *** kst` left
[17:14] *** payload joined
[17:14] *** kst joined
[17:19] <moritz_> @tell masak never mind, I just added one

[17:19] <lambdabot> Consider it noted.

[17:20] *** abra left
[17:22] *** nsh- joined
[17:23] <frettled> http://howcaniexplainthis.blogspot.com/2009/04/group-photos.html - I need two more IRC nicks, help please :)

[17:24] *** abra joined
[17:26] <moritz_> is NN = baest?

[17:26] <moritz_> and Martin something = mberends?

[17:27] <frettled> The last one is correct, I think.

[17:27] <frettled> I just forgot.  :=)

[17:27] *** jdv79 joined
[17:28] <frettled> so now NN is the last one, unless Gloria has a nick as well ;)

[17:29] <jdv79> anyone know, or can point me to a link about, why loop was chosen as the new name for a 3 arg for?

[17:29] <moritz_> I don't know it exactly, but 'for' was already taken

[17:30] <jnthn> 'cus...it's a loop? ;-)

[17:30] <jdv79> my first guess was that it was done to replace foreach with for.

[17:31] <jnthn> better to huffmanize iteration, since it's more common

[17:31] <moritz_> jdv79: in Perl 5 'for' and 'foreach' are synonyms

[17:31] <jdv79> i know all that.  but doesn't loop, if you didn't know what it described already, sound like the most general type?

[17:32] *** FurnaceBoy left
[17:32] <moritz_> and what would that imply?

[17:32] <TimToady> well, it kind of is the most general type

[17:33] <jdv79> i guess out of three it is, true.

[17:33] <Eimi> What is the infinite loop in Perl 6?  (The one that only breaks with explicit "last"?)

[17:33] <TimToady> loop {...}

[17:34] <Eimi> That seems most general to me.

[17:34] <frettled> generally, yes :)

[17:34] <jdv79> for some reason i thought loop would do some sort of MMD to effect a while/for/foreach.

[17:34] <jdv79> i don't know why i thought that.

[17:35] *** nsh left
[17:38] <Tene> pmichaud: let me know if I can help with Parrot bugs.

[17:43] *** [particle]2 is now known as [particle]-

[17:45] <pmichaud> Tene: will do.  Mostly it's that we've uncovered a few small bugs, and then while spectesting the small bugs we keep running into bigger bugs / issues that are showing up.  :-(

[17:46] <frettled> baest confirmed.

[18:04] <pugs_svn> r26333 | pmichaud++ | [t/spec]:  Some fudging until Rakudo can clean up I/O a bit.

[18:04] *** ezeki3l joined
[18:04] <ezeki3l> hi guis

[18:04] *** barney joined
[18:04] <ezeki3l> i heard Larry Wall was on freenub

[18:04] <ezeki3l> is it true?

[18:05] <skids> we ain't tellin.

[18:05] <skids> :-)

[18:05] <ezeki3l> uh common guis

[18:06] <skids> In that case, it's more fun when people don't realize who they are talking to. :-)

[18:06] <skids> But I'm sure if you dig...

[18:06] <pugs_svn> r26334 | szabgab++ | Smart::Links improve the stats page

[18:08] <frettled> Time to get packing.

[18:08] <skids> Make sure to turn the hotel lights off :-)

[18:10] *** ejs left
[18:10] <Tene> It took me a decent while to figure out who he was.

[18:11] <skids> Did you manage to embarrass yourself in the process?

[18:11] *** ssm_ left
[18:12] <Tene> Not that I recall.  Yes, he's around here.  He goes by the nick 'TimToady'.

[18:12] <pugs_svn> r26335 | szabgab++ | Smart::Links moving process_syn to the module

[18:13] *** szabgab left
[18:18] <ezeki3l> man, i just wana tell him how awesome he is

[18:18] <ezeki3l> and that he's such an inspiration to the rest of us, nerds

[18:27] *** nsh- left
[18:33] *** ejs joined
[18:33] *** piper69 joined
[18:33] <piper69> howdy folks 

[18:33] <piper69> is Larry here please

[18:33] *** rindolf joined
[18:33] <rindolf> Hi all.

[18:33] <rindolf> TimToady: here?

[18:33] *** rewt joined
[18:34] *** sproingie joined
[18:35] <piper69> rindolf: hi

[18:35] <piper69> :)

[18:35] *** abra left
[18:35] <rindolf> piper69: hi.

[18:36] <piper69> so i guess Mr. Larry is not here

[18:36] <rindolf> piper69: well, he spoke (or connected) about an hour ago.

[18:38] *** natschil joined
[18:40] <piper69> i just can't believe no one read this before !

[18:44] *** ejs left
[18:44] <diakopter> piper69: no one read what before

[18:45] <piper69> please excuse my ignorance, but i read somewere in a perl book, the Larry Wall used a single line bash script to generate the name "perl"? anyone knows what was that command! i can't find the book anywhere!

[18:45] <[particle]-> echo "perl"

[18:45] <[particle]-> :P

[18:45] *** Kisu left
[18:46] <piper69> not that :)

[18:46] <piper69> it was something that helped Mr. larry to generate the name

[18:48] * skids notes the qwerty positions of p e r and l.  Hrm.

[18:49] <sbp> “Perl was originally named "Pearl," after the Parable of the Pearl from the Gospel of Matthew. Larry Wall wanted to give the language a short name with positive connotations; he claims that he considered (and rejected) every three- and four-letter word in the dictionary.” — http://en.wikipedia.org/wiki/Perl#Name

[18:50] <sbp> sometimes when I want to name something I'll choose a bunch of letters that I like and do something similar, but it never quite works out because the wordlist that I use is too inclusive and has all kinds of weird random entries like xoae. should probably construct a better wordlist

[18:51] <sbp> I did make a wordlist once by downloading Wikipedia, the whole english version, and extracting every word used therein. but of course that wordlist is even worse...

[18:51] * skids loves loves loves aiksaurus :-)

[18:51] *** ejs joined
[18:51] <piper69> sometimes when I want to name something I'll choose a bunch of letters that I like and do something similar,

[18:52] <piper69> that is getting me closer 

[18:52] <sbp> well I just do: $ egrep '^[aeiouwy]{3,4}$' words, or whatever

[18:53] <rewt> skids, is that anything like thesaurus?

[18:53] <skids> It is a commandline thesaurus, yes.

[18:53] <skids> Though it could use more data files.

[18:53] <rewt> ah

[18:55] <skids> I like to find off-use definitions to justify my abuse of the english language. :-)

[18:55] <piper69> sbp: can you please explaing that command for me 

[18:56] <sbp> piper69: egrep is just grep but it uses an extended regular expression language. there's also pgrep on some systems if you want to use pcre (perl comatible regular expressions)

[18:56] <sbp> the first argument is the pattern, the second argument is the filename. see man egrep

[18:57] * sbp searches the web for more perl-naming details, and finds: “As a result of my kitten naming contest, the kittens are named Perl and Java.” — scary!

[18:57] <meppl> good night

[18:57] <skids> Should just be happy they didn't both end up named Colbert

[18:57] <sbp> 'night meppl

[18:57] <sbp> heh

[18:59] <meppl> ;)

[19:00] *** meppl left
[19:01] <sbp> piper69: sorry, I seriously can't find anything like what you describe

[19:02] <sbp> piper69: http://www.linuxjournal.com/article/3394 has an interview with Larry wherein he describes how he named the langauge though; perhaps that might interest you

[19:03] *** sri_kraih joined
[19:03] <sbp> funny how he looked at every three and four letter word, and then ended up choosing a five letter word, and *then* ended up cutting a letter out of it, though

[19:04] <Tene> That sounds pretty appropriate for LW.

[19:05] <sbp> he should've started with "pearl" and cut a letter out per version

[19:05] <sbp> so that now we'd be using nothing as the title; very compact

[19:05] <sbp> and perl7 would be made out of negative text

[19:05] <skids> interactive, in fact

[19:06] <Tene> Hmm... I'm not sure if you can have zero-length files on linux...

[19:06] <Tene> bash and touch aren't happy trying to create them.

[19:06] <ruoso> zero-length file names you mean

[19:06] <Tene> filenames, even

[19:06] <Tene> yes

[19:07] <sbp> try creating one using zero width space?

[19:07] <sbp> .u zero width

[19:07] <skids> Just build it into the OS kernel and present a commandline :-)

[19:07] <sbp> \xe2\x80\x8b

[19:08] <sbp> Tene: can I bring phenny in, or are we bot-lite here?

[19:08] <Tene> There are already several bots

[19:08] <Tene> phenny isn't noisy

[19:08] <Tene> Go ahead, IMO

[19:08] <sbp> she is made from python though

[19:09] *** phenny joined
[19:09] <sbp> .u zero width

[19:09] <phenny> U+200B ZERO WIDTH SPACE (​)

[19:09] <Tene> I *was* thinking of bringing in a Perl 6 bot soon.

[19:09] <sbp> yes, I've been thinking towards that direction too

[19:10] <sbp> though I'm kinda looking forward to not having to use perl5 modules for everything

[19:10] * sbp did a little cpan6 research the other day

[19:10] <sbp> doesn't look like anything concrete's decided on that front

[19:10] <Tene> There have been many proposals, some of them good, but nobody interested in implementing them yet

[19:10] <skids> Can phenny run on Pynie?

[19:10] <sbp> which surprised me; I thought work on that might progress at the same kind of pace as perl6, but it doesn't really seem to have started yet. or have I just missed things?

[19:10] <sbp> ah

[19:11] <piper69> sbp: well here is my question, how did Mr.Larry look the whole dictionary for 3 or 4 letter? 

[19:11] <sbp> skids: unsure, haven't tried. don't see why not though

[19:11] <sbp> piper69: probably just $ egrep '[a-z]{3,4}' words

[19:12] <sbp> none of your fancy <alpha> back in them days, dagnabbit

[19:12] <Tene> piper69: or just an iteration over all possible 4-letter words.

[19:12] <Tene> skids: unlikely.  Might be fun to investigate, though.

[19:13] <sbp> well he did say dictionary though, so it must be all the valid English words

[19:14] <skids> Maybe he touched files with the names of all words and then did bash for i in ??? ???? :-)

[19:14] *** japhb joined
[19:14] *** japhb left
[19:15] <Tene> I have secret plans of porting POE or implementing some other socket framework on Parrot real soon now.

[19:15] *** japhb joined
[19:15] <sbp> not so secret now

[19:15] <sbp> wonder how Low and Hanging that fruit is

[19:15] <Tene> I've got an HTTP::Daemon in Perl 6.

[19:16] <sbp> in pure perl6?

[19:16] <Tene> http://pleasedieinafire.net:2080/

[19:16] <literal> lovely domain

[19:16] <Tene> Well, it has a couple of pieces of inline PIR, but those can be replaced now that rakudo has socket support

[19:16] <sbp> wait, it must use perl5 networking modules though right?

[19:16] <Tene> No.

[19:16] <sbp> woah, rakudo has socket support?!

[19:16] <Tene> rakudo can't use perl 5 anything

[19:16] <Tene> Yes.

[19:17] <sbp> why didn't you tell me, man! I've been sitting here like an idiot...

[19:17] <Tene> Here's the code for that pastebin http://github.com/masak/web/blob/7af63c5a2e6a03530195ee098068974f3b2846fd/bin/kopipasta.pl

[19:17] <sbp> hmm, http://rakudo.org/node/34 says it's still coming

[19:17] <Tene> you were waiting for socket support?

[19:17] *** sri_kraih_ left
[19:17] <sbp> that's from 25th March

[19:17] *** ispy_ left
[19:17] <Tene> sbp: it's in the past few days

[19:17] <sbp> ah! cool

[19:17] <piper69> sbp: the "egrep '[a-z]{3,4}' words" will acualy look in the file and pick the 3 or 4 letters words. but how can you assign it the letters

[19:18] <Tene> was added at some conference everyone's been at last weekend

[19:18] <sbp> well, it might get me to experiment with sockety stuff

[19:18] <skids> you didn't lose much time and I think there's still some churn to come in the socket area.

[19:18] <sbp> piper69: hmm?

[19:18] <piper69> eg l p r e and it will list all possible combination

[19:18] *** ejs left
[19:18] <Tene> piper69: egrep '[lpre]{3,4}' /usr/share/dict/words

[19:18] <piper69> prel, plre, perl or erlp something like that

[19:20] <Tene> sbp: I'd love to collaborate on this with you

[19:20] <pmurias> ruoso: hi

[19:20] <ruoso> hi pmurias 

[19:21] <sbp> Tene: on what? me doing sockety stuff?

[19:21] <pmurias> it looks like my GSoC project got accepted :)

[19:21] <ruoso> yes... it looks so... congrats

[19:21] <sbp> defined @*ARGS[0] && @*ARGS[0] eq '--request' ?? request() !! daemon();

[19:21] <sbp> — is there no operator which is to && what // is to ||?

[19:22] <Tene> not sure.

[19:22] *** rindolf left
[19:22] <sbp> if not, we can petition for one

[19:22] <sbp> we'd even have a pretty catchy slogan:

[19:23] <sbp> I demand a slanty ampersand!

[19:23] <ruoso> pmurias, I'm a bit lost in where we are in re-smop

[19:24] <pmurias> looking into my working copy...

[19:24] * sbp finds http://github.com/rakudo/rakudo/commit/9fdea825ceb638bed9753e61a710bb8c7159dc20

[19:24] *** amoc joined
[19:24] <sbp> “Add IO::Socket initial implementation. Patch courtesy of Cosimo Streppone.”

[19:25] <Tene> Yeah.

[19:25] <sbp> looks straightforward enough

[19:25] <Tene> I just used some inline pir to do 'new "Socket"' etc.

[19:25] <Tene> but that's a bit nicer

[19:25] *** justatheory left
[19:27] <skids> does !// work?

[19:27] <sbp> Tene: where did you get the HTTP::Daemon you used?

[19:27] *** natschil left
[19:27] <pugs_svn> r26336 | pmurias++ | [re-smop] loading an empty setting works with garbadge collection disabled

[19:28] <sbp> rakudo: say notdefined // "defined!";

[19:28] <p6eval> rakudo 5919b0: OUTPUT«Could not find non-existent sub notdefined␤current instr.: '_block14' pc 53 (EVAL_16:37)␤»

[19:28] <sbp> that ain't no sub

[19:28] <sbp> rakudo: my $x = notdefined // "defined!"; say $x;

[19:28] <p6eval> rakudo 5919b0: OUTPUT«Could not find non-existent sub notdefined␤current instr.: '_block14' pc 56 (EVAL_17:39)␤»

[19:28] <sbp> oh sheesh. still thinking in python

[19:29] <sbp> rakudo: say $notdefined // "defined!";

[19:29] *** go|dfish joined
[19:29] <p6eval> rakudo 5919b0: OUTPUT«Scope not found for PAST::Var '$notdefined' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:104)␤»

[19:29] <skids> rakudo: my $a; $a // "defined".say

[19:29] <p6eval> rakudo 5919b0: OUTPUT«defined␤»

[19:29] <sbp> thanks, heh

[19:30] <sbp> rakudo: my $a; $a !// "defined".say

[19:30] <rewt> skids, i doubt it

[19:30] <pmurias> ruoso: re-smop is begining to run Perl 6 code, the is a ref counting bug i haven't looked into yet which forces turning refcouting of

[19:30] <p6eval> rakudo 5919b0: OUTPUT«Statement not terminated properly at line 1, near "!// \"defin"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[19:30] <Tene> sbp: I think masak copied it from the perl6-examples repo

[19:30] <sbp> Tene: it may be some time before I get anywhere near doing sane things in perl6... :-)

[19:30] <sbp> ah right, I did see the perl6-examples version

[19:31] <ruoso> pmurias, maybe it's related to the RI not being an RI of itself...

[19:31] *** abra joined
[19:31] *** LylePerl joined
[19:31] <[particle]-> tpf gsoc accepted projects list here: http://socghop.appspot.com/org/home/google/gsoc2009/dukeleto

[19:33] <pmurias> ruoso: a new RI is usually an instant segfault

[19:34] <ruoso> pmurias, that's probably because a RIless object is getting into a RELEASE or REFERENCE

[19:34] <ruoso> that was why we had the "an object without an RI is an RI of itself

[19:35] <pmurias> ruoso: is there a valid case when an object refcount drop beneath zero?

[19:35] <Tene> sbp: but yes, it was pretty exciting to see that all running on Perl 6.

[19:35] <pmurias> s/beneath/below

[19:36] <ruoso> pmurias, not really... in nagc, iirc, it even sets to 999 after it reaches 0

[19:36] <ruoso> but why do you ask?

[19:36] *** [particle]- left
[19:37] <pmurias> ruoso: i made nagc print out a warnings then

[19:37] *** piper69 left
[19:38] <ruoso> pmurias, 

[19:38] <sbp> Tene: yeah, and November of course

[19:38] <Tene> I wasn't really involved with November.  It's pretty nice, though, yes.

[19:38] <pmurias> s/warnings/warning/

[19:38] <ruoso> pmurias, why did you comment the ref_cnt = 999

[19:38] <Tene> mod_rakudo on mod_parrot is also nice, for web stuff.

[19:40] <sbp> mod_rakudo comes as part of the mod_parrot package?

[19:40] *** pyrimidine left
[19:40] <sbp> I can find the latter easy enough, but not much on mod_rakudo

[19:40] <Tene> I think so.  I'm not really sure how it's packaged.

[19:40] <Tene> I've only ever looked at mod_parrot from svn

[19:41] <Tene> it's in the mod_parrot svn repo, if that's what you're asking.

[19:41] *** pyrimidine joined
[19:42] <pmurias> ruoso: maybe a big negative value would be better

[19:42] <ruoso> why?

[19:42] <sbp> oh, the docs list it as mod_perl6 still:

[19:42] <sbp> [[[

[19:42] <sbp> mod_perl6 (Rakudo)

[19:42] <sbp> ]]] — http://www.parrot.org/mod_parrot

[19:42] <sbp> but wasn't that supposed to be changed?

[19:43] <sbp> did it not get changed?

[19:43] <Tene> ah

[19:43] <ruoso> pmurias, I mean... what is the problem with using an arbitrary big number? the object is going to be destroyed anyway... we're just making sure it doesn't get destroyed again...

[19:44] <sbp> ah, no:

[19:44] <sbp> 20:23 <diakopter> jhorwitz: was mod_perl6 going to become mod_rakudo?

[19:44] *** [particle]1 joined
[19:44] <sbp> 20:24 <jhorwitz> diakopter: no, i think i'm keeping it mod_perl6 until there's a competing project.  my goal is for it to be the "official" mod_perl6.

[19:44] <pmurias> ruoso: wouldn't just setting it to 1 do the same thing?

[19:44] <sbp> — http://irclog.perlgeek.de/perl6/2008-06-20

[19:44] <Tene> sbp: I don't remember if it was supposed to be changing.  mod-parrot is pretty much a single-person project.

[19:44] <Tene> and jhorwitz hasn't had much time for it in a while

[19:45] *** [particle]1 is now known as [particle]-

[19:45] <sbp> yeah, I'd only seen diakopter's question in results snippets

[19:45] <Tene> ah

[19:45] <sbp> and just assumed the answer would have been "yes"... :-)

[19:45] *** linuxer joined
[19:45] <ruoso> pmurias, theoretically, yes... but it gives the benefit of somehow showing that this object is being destroyed...

[19:46] <linuxer> a

[19:46] <pugs_svn> r26337 | pmurias++ | [re-smop] object don't get destroyed twice

[19:48] *** abra left
[19:48] *** linuxer left
[19:50] <pugs_svn> r26338 | ruoso++ | [re-smop] the LOwlevel STate machine first sketches...

[19:51] <ruoso> pmurias, I started the lowlevel state machine thingy... I think it will be helpfull when the RI DSL knows how to handle signatures

[19:53] *** cosimo joined
[19:55] <pmurias> ruoso: seems sensible

[19:55] <ruoso> pmurias, mildew -o is not working

[19:56] <pmurias> fixing...

[19:58] *** natschil joined
[20:00] *** pyrimidine left
[20:02] <pugs_svn> r26339 | pmurias++ | [re-mildew] fixed -o

[20:02] *** pyrimidine joined
[20:02] *** pyrimidine_ joined
[20:02] *** pyrimidine_ left
[20:03] <cosimo> rakudo: say $*PERL

[20:03] <p6eval> rakudo 5919b0: OUTPUT«Use of uninitialized value␤␤»

[20:03] <cosimo> is there a place where to report successful rakudo builds?

[20:06] <skids> cosimo: IIRC it's something to do with "make smoke"

[20:08] <skids> though that might be only a Parrot thing.

[20:10] <cosimo> anyway, rakudo r38208 builds and tests fine for me on Vista 32 bits

[20:10] <cosimo> at least is in the irc logs now :)

[20:14] *** cosimo left
[20:14] *** cosimo joined
[20:15] *** cosimo left
[20:15] *** barney left
[20:19] *** natschil left
[20:19] *** pyrimidine left
[20:32] *** ruoso left
[20:33] *** Gothmog_ joined
[20:34] *** pmurias left
[21:05] *** icwiener left
[21:05] *** justatheory joined
[21:09] *** icwiener joined
[21:12] *** nsh joined
[21:12] *** ascent_ joined
[21:15] *** ascent_ left
[21:15] *** ascent_ joined
[21:17] *** ascent_ left
[21:18] *** ascent_ joined
[21:22] *** ezeki3l is now known as failfish

[21:22] *** failfish is now known as ezeki3l

[21:22] *** iblechbot left
[21:23] *** go|dfish is now known as failfish

[21:40] *** donaldh joined
[21:50] *** [particle]- left
[21:54] *** AzureStone left
[21:55] *** AzureStone joined
[21:55] *** skids left
[21:57] *** [particle]1 joined
[21:57] *** amoc left
[22:08] <dalek> rakudo: 2703c20 | (Moritz Lenz)++ | src/ (2 files):

[22:08] <dalek> rakudo: rename s/readline/get/g, and remove prefix:<=>

[22:08] <dalek> rakudo: That's not fully correct, .get() still does unwanted context dwimmery, but

[22:08] <dalek> rakudo: it does make three of the four failing spectests pass again.

[22:08] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/2703c2075e5b990f5a32fcd1e217a242d58f074c

[22:09] <pugs_svn> r26340 | moritz++ | [t/spec] unfudge io.t for rakudo, and test the method form of .lines for now

[22:12] <dalek> rakudo: ae5e785 | (Moritz Lenz)++ | src/setting/IO.pm:

[22:12] <dalek> rakudo: implement limit to IO.lines

[22:12] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/ae5e78590857e3351e9191aa31f3f53e1bd08c96

[22:13] *** presh left
[22:13] *** sproingie left
[22:13] *** ezeki3l left
[22:14] <frettled> Okidoki, back from the restaurant, so I expect you'll see the ardent hackers becoming active within the next few minutes, unless they all got lost in the bat cave.

[22:14] *** mj41_ joined
[22:14] *** Matt-W left
[22:15] *** Whiteknight joined
[22:15] *** donaldh1 joined
[22:16] *** donaldh left
[22:16] *** sjn joined
[22:17] <frettled> sjn: home already?  :)

[22:19] *** moritz_ joined
[22:19] *** sproingie joined
[22:19] *** ezeki3l joined
[22:19] *** presh joined
[22:19] *** awwaiid joined
[22:19] *** antiphase joined
[22:19] *** bigpresh joined
[22:19] *** r0bby joined
[22:19] *** kolibrie joined
[22:19] *** irc.freenode.net sets mode: +o moritz_

[22:21] *** payload left
[22:24] *** Matt-W joined
[22:25] <sjn> frettled: yep

[22:28] *** jferrero joined
[22:31] *** icwiener left
[22:33] <moritz_> somehow io_in_for_loops.t is still borked

[22:33] <moritz_> or maybe the fudging is borked

[22:33] <moritz_> but that file seems so *wrong*

[22:34] <moritz_> it depends on IO working properly to get the right plan

[22:34] <moritz_> but it tests IO

[22:38] *** ZuLuuuuuu joined
[22:38] *** minazo joined
[22:41] <[particle]1> that's fragile.

[22:41] *** [particle]1 is now known as [particle]-

[22:41] *** nihiliad left
[22:43] <moritz_> yes

[22:44] <pugs_svn> r26341 | moritz++ | [t/spec] fix io_in_for_loops.t for now.

[22:44] <pugs_svn> r26341 | moritz++ | 

[22:44] <pugs_svn> r26341 | moritz++ | Since TimToady++ changed 'for =$fh' to 'for get $fh' the plan also changed,

[22:44] <pugs_svn> r26341 | moritz++ | since the test file is sufficiently broken to assume that the .lines and .get

[22:44] <pugs_svn> r26341 | moritz++ | etc. always return the right line count.

[22:52] <pugs_svn> r26342 | moritz++ | [t/spec] test that methods Num and Str are used for typecasting

[22:53] *** ispy_ joined
[22:54] <dalek> rakudo: 49e00b4 | git++ | src/classes/Object.pir:

[22:54] <dalek> rakudo: Added "get_number" method to Object.pir to allow numification/intification of Perl 6 classes.

[22:54] <dalek> rakudo: Signed-off-by: Moritz Lenz [email@hidden.address]
[22:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/49e00b4073895e86580a277a1594b767c775a3ba

[22:54] <dalek> rakudo: cea34fd | (Moritz Lenz)++ | t/spectest.data:

[22:54] <dalek> rakudo: we pass S13-type-casting/methods.t

[22:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/cea34fd87f5d302bbe3a7fc78c08b9cbe9caf436

[23:04] *** skids joined
[23:05] *** donaldh1 left
[23:05] <literal> hm, I see I got accepted for gsoc, yay

[23:24] <dukeleto> congrats

[23:26] <skids> rakudo: my $a; $a = do { for 1,2,3 { 1;} }; $a.perl.say

[23:26] <p6eval> rakudo cea34f: OUTPUT«Perl6Iterator.new()␤»

[23:26] <skids> rakudo: my $a; $a = do { eager for 1,2,3 { 1;} }; $a.perl.say

[23:26] <p6eval> rakudo cea34f: OUTPUT«Statement not terminated properly at line 1, near "{ 1;} }; $"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[23:27] <skids> rakudo: my $a; $a = eager do { for 1,2,3 { 1;} }; $a.perl.say

[23:27] <p6eval> rakudo cea34f: OUTPUT«Could not find non-existent sub eager␤current instr.: '_block14' pc 77 (EVAL_18:50)␤»

[23:28] *** nbrown joined
[23:31] <skids> std: my @a; @a = for 1..3 { 1;}; @a.perl.say

[23:31] <p6eval> std 26342: OUTPUT«##### PARSE FAILED #####␤for() interpreted as function call at line 1 ; please use whitespace instead of parens␤Unexpected block in infix position (two terms in a row) at /tmp/y9MGrqSVJF line 1:␤------> my @a; @a = for 1..3 { 1;}; @a.perl.say␤    expecting any of:␤  

[23:31] <p6eval> ..     ...

[23:37] *** Limbic_Region joined
[23:40] <skids> std: my @a; @a <== for 1..3 { 1;}; @a.perl.say

[23:40] <p6eval> std 26342: OUTPUT«ok 00:02 35m␤»

[23:41] <skids> std: my @a; @a = do { for 1..3 { 1;} }; @a.perl.say

[23:41] <p6eval> std 26342: OUTPUT«ok 00:02 35m␤»

[23:41] *** exodist left
[23:41] <skids> std: my @a; @a = loop { 1;}; @a.perl.say

[23:41] <p6eval> std 26342: OUTPUT«Undeclared routine:␤   loop used at 1 ␤ok 00:02 35m␤»

[23:42] <skids> std: my @a; @a = while 1 { 1;}; @a.perl.say

[23:42] <p6eval> std 26342: OUTPUT«##### PARSE FAILED #####␤while() interpreted as function call at line 1 ; please use whitespace instead of parens␤Unexpected block in infix position (two terms in a row) at /tmp/BHHbmHr1Nc line 1:␤------> my @a; @a = while 1 { 1;}; @a.perl.say␤    expecting any

[23:42] <p6eval> ..of:␤...

[23:48] *** bigpresh left
