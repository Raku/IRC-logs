[00:00] *** jamtech joined
[00:06] *** japhb left
[00:16] *** tomheady left
[00:17] *** FurnaceBoy left
[00:19] <diakopter> rakudo: my $a = 2; say "** $a ** "~{ { say ++$a~"b" }(); { say ++$a~"c" }(); 3~"d"; }()~" ** $a **"

[00:19] <p6eval> rakudo d2ad09: OUTPUT«3b␤4c␤** 2 ** 3d ** 4 **␤»

[00:27] <diakopter> std: #{ { { < } > } die here

[00:27] <p6eval> std 25847: OUTPUT«Undefined␤ok 00:02 34m␤»

[00:28] <diakopter> pugs: #{ { { < } > } say 'foo'

[00:28] <p6eval> pugs: RESULT«*** ␤    Unexpected ")."␤    expecting "use", statements or "}"␤    at /tmp/OMZw2qdKdS line 2, column 3␤»

[00:29] <diakopter> pugs: #{  } say 'foo'

[00:29] <p6eval> pugs: RESULT«foo␤Bool::True»

[00:29] <diakopter> std: #{  } die here plz

[00:29] <p6eval> std 25847: OUTPUT«Undeclared routines:␤  here used at 1 ␤  plz used at 1 ␤ok 00:02 34m␤»

[00:29] <diakopter> std: #{ { } die here plz

[00:29] <p6eval> std 25847: OUTPUT«Undefined␤ok 00:02 33m␤»

[00:29] <diakopter> std: #{ { } } die here plz

[00:29] <p6eval> std 25847: OUTPUT«Undeclared routines:␤  here used at 1 ␤  plz used at 1 ␤ok 00:02 34m␤»

[00:29] <diakopter> std: #{ { <> } } die here plz

[00:30] <p6eval> std 25847: OUTPUT«Undeclared routines:␤  here used at 1 ␤  plz used at 1 ␤ok 00:02 34m␤»

[00:30] <diakopter> std: #{ { < } > } die here plz

[00:30] <p6eval> std 25847: OUTPUT«Undeclared routines:␤  here used at 1 ␤  plz used at 1 ␤ok 00:02 34m␤»

[00:30] <diakopter> oh, ok

[00:30] * diakopter off-by-one

[00:31] *** Eevee_ joined
[00:31] <diakopter> std: #< { < } > > die here plz

[00:31] <p6eval> std 25847: OUTPUT«Undeclared routines:␤  here used at 1 ␤  plz used at 1 ␤ok 00:02 34m␤»

[00:33] <TimToady> diakopter: 0_001._____0___1 is a method call

[00:44] *** jamtech_ joined
[00:48] *** rob__ joined
[00:56] *** rob__ left
[01:01] *** jamtech left
[01:23] <pugs_svn> r25848 | lwall++ | [STD] improve error messages around decimal points

[01:24] <pugs_svn> r25849 | lwall++ | make blocks transparent to Junctions (in the absence of explicit parameter types)

[01:25] <TimToady> oops, forgot diakopter++ and moritz++

[01:25] <TimToady> dinner &

[01:38] <skids> rakudo: sub a (Int $a) { $a.say }; my $i = 1/2 + 1 + 1/2; $i.perl.say; a($i);

[01:38] <diakopter> oh...

[01:38] <skids> ...

[01:38] <p6eval> rakudo d2ad09: OUTPUT«2␤Parameter type check failed for $a in call to a␤current instr.: 'die' pc 15808 (src/builtins/control.pir:204)␤»

[01:39] <skids> If 2 as a rat or real shouldn't say "2" with .perl

[01:40] <skids> erm s/If//

[01:40] <diakopter> what might it say instead

[01:40] <skids> 2.0

[01:40] <skids> or 2/1

[01:41] <diakopter> how should it express sqrt(2) as a real

[01:42] <diakopter> (if it has only the float representation to some decimals

[01:42] <diakopter> )

[01:42] <skids> That depends, is it closure? :-)

[01:42] <diakopter> my point is, it can't retain all the specificity

[01:43] <skids> Isn't .perl supposed to be recompileable as precisely as it can be? (neglecting complex objects for now.)

[01:44] <skids> sqrt(2) should probably be to the limits of precision, that's what it would be if used.

[01:44] <diakopter> sure, but Int auto-exalts up to Rat and Real..., so it doesn't matter much?

[01:44] <skids> Well, it mattered to &a above

[01:45] <skids> So it would probably matter to a typed initializer for a new() in the same .perl.

[01:45] <diakopter> that's demoting a Rat to an Int, which maybe couldn't occur automatically

[01:46] <diakopter> sub a (Int $a) { $a.say }; my $i = 1/2 + 1 + 1/2; say $i.WHAT()

[01:46] <diakopter> rakudo: sub a (Int $a) { $a.say }; my $i = 1/2 + 1 + 1/2; say $i.WHAT()

[01:46] <p6eval> rakudo d2ad09: OUTPUT«Num␤»

[01:46] <diakopter> ok, Num

[01:47] <skids> Yeah IIRC Rats tend to hide in the woodwork, though this one's probably a real.

[01:48] <skids> rakudo: "(1/2).WHAT.say"

[01:48] <p6eval> rakudo d2ad09: RESULT«"(1/2).WHAT.say"»

[01:48] <skids> rakudo: (1/2).WHAT.say

[01:48] <p6eval> rakudo d2ad09: OUTPUT«Num␤»

[01:48] <skids> Or maybe Rakudo doesn't do that yet.

[01:50] *** jamtech_ left
[01:50] <skids> rakudo 2.0.WHAT.say

[01:51] <skids> rakudo: 2.0.WHAT.say

[01:51] <p6eval> rakudo d2ad09: OUTPUT«Num␤»

[01:53] <diakopter> rakudo: sub a (Int $a) { $a.say }; my Int $i = 1/2 + 1 + 1/2; say $i.WHAT()

[01:53] <p6eval> rakudo d2ad09: OUTPUT«Type mismatch in assignment.␤current instr.: 'die' pc 15808 (src/builtins/control.pir:204)␤»

[01:54] <skids> Hrm I'm not enough of a code wonk to comment on that.

[01:54] <diakopter> maybe it's 1.99999999999999999999999

[01:54] <skids> Being "pseudo-assignment" in some schools.

[01:58] <diakopter> std: #< "<" > die here

[01:58] <p6eval> std 25849: OUTPUT«Undefined␤ok 00:03 39m␤»

[01:58] <diakopter> std: #< "<" > > die here

[01:58] <p6eval> std 25849: OUTPUT«Undeclared routine:␤   here used at 1 ␤ok 00:03 41m␤»

[01:59] <diakopter> std: #< ( #( > ) > die here

[01:59] <p6eval> std 25849: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/cYJtiCDXPM line 1:␤------> #< ( #( > ) > die here␤FAILED 00:02 39m␤»

[02:00] <diakopter> std: #< ( < #( > ) > die here

[02:00] *** alc joined
[02:00] <p6eval> std 25849: OUTPUT«Undeclared routine:␤   here used at 1 ␤ok 00:07 59m␤»

[02:00] <diakopter> ooooo 7 seconds; new record

[02:01] <diakopter> fun game!

[02:01] *** hercynium left
[02:02] <diakopter> std: my $a = 3; $a\ #( sss ).++

[02:02] <p6eval> std 25849: OUTPUT«ok 00:03 43m␤»

[02:02] <diakopter> std: my $a = 3; $a\ #( sss )++

[02:02] <p6eval> std 25849: OUTPUT«ok 00:03 42m␤»

[02:03] <diakopter> std: my $a = 3; $a\ \ \/#( sss )++

[02:03] <p6eval> std 25849: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/cT85zrhcR2 line 1:␤------> my $a = 3; $a\ \ \/#( sss )++␤    expecting any of:␤    infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤     unspace␤ 

[02:03] <p6eval> ..whitespace␤FAILED ...

[02:05] <diakopter> std: my $a = 3; $a\ .\ .++

[02:05] <p6eval> std 25849: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/aANW5RVNzT line 1:␤------> my $a = 3; $a\ .\ .++␤    expecting any of:␤  dotty method or postfix␤  postfix_prefix_meta_operator␤     unspace␤FAILED 00:03 43m␤»

[02:05] <diakopter> std: my $a = 3; $a\ .\ ++

[02:05] <p6eval> std 25849: OUTPUT«ok 00:03 42m␤»

[02:05] <diakopter> std: my $a = 3; $a\ .\ \ \ ++

[02:05] <p6eval> std 25849: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/ZLnBOsUJNI line 1:␤------> my $a = 3; $a\ .\ \ \ ++␤    expecting any of:␤       dotty method or postfix␤  postfix_prefix_meta_operator␤     unspace␤FAILED 00:03 42m␤»

[02:05] <diakopter> std: my $a = 3; $a\ \ \ \ ++

[02:05] <p6eval> std 25849: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/3KsrMsAB1u line 0:␤------> ␤    expecting noun␤FAILED 00:03 50m␤»

[02:06] <diakopter> std: my $a = 3; $a\ \ ++

[02:06] <p6eval> std 25849: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/aRXojoZwF4 line 0:␤------> ␤    expecting noun␤FAILED 00:03 50m␤»

[02:06] <diakopter> std: my $a = 3; $a.++

[02:06] <p6eval> std 25849: OUTPUT«ok 00:03 42m␤»

[02:06] <diakopter> oh

[02:15] *** Kimtaro joined
[02:21] <skids> I'm still waiting for it to say "FAIL.  JUST.... FAIL."

[02:21] <diakopter> lol

[02:22] *** kate21de left
[02:32] *** ced-2 joined
[02:34] *** kate21de joined
[02:37] *** ced-2_ left
[02:44] *** tomheady joined
[02:52] *** Chillance left
[02:54] *** bacek__ left
[02:55] *** ced-2_ joined
[02:57] *** bacek__ joined
[02:57] <frooh> rakudo: 'frew' ~~ t/f/g

[02:58] <p6eval> rakudo d2ad09: OUTPUT«Could not find non-existent sub t␤current instr.: '_block14' pc 59 (EVAL_16:40)␤»

[02:58] <frooh> rakudo: 'frew' ~~ tr/f/g

[02:58] <p6eval> rakudo d2ad09: OUTPUT«Could not find non-existent sub tr␤current instr.: '_block14' pc 59 (EVAL_16:40)␤»

[02:59] <frooh> rakudo: 'frew'.trans('f', 'g')

[03:00] <p6eval> rakudo d2ad09: OUTPUT«Must pass a List of Pairs for transliteration␤current instr.: 'parrot;Any;trans' pc 12890 (src/builtins/any-str.pir:570)␤»

[03:00] <frooh> rakudo: 'frew'.trans([['f','g']])

[03:00] <p6eval> rakudo d2ad09: OUTPUT«Must pass a List of Pairs for transliteration␤current instr.: 'parrot;Any;trans' pc 12890 (src/builtins/any-str.pir:570)␤»

[03:00] <frooh> mmm

[03:01] <frooh> trans('frew', 'f', 'g')

[03:01] <frooh> rakudo: trans('frew', 'f', 'g')

[03:01] <p6eval> rakudo d2ad09: OUTPUT«Could not find non-existent sub trans␤current instr.: '_block14' pc 74 (EVAL_16:44)␤»

[03:08] *** ced-2 left
[03:10] <frooh> rakudo: my @a; for 1,2,3,4 { @a.push($_) }; @a.perl.say

[03:10] <p6eval> rakudo d2ad09: OUTPUT«[1, 2, 3, 4]␤»

[03:10] *** nihiliad left
[03:15] *** amoc left
[03:24] <meppl> good night

[03:24] *** meppl left
[03:31] *** araujo left
[03:48] *** nacho_ left
[03:53] *** agentzh joined
[04:00] *** awarefish left
[04:07] *** justatheory joined
[04:21] *** justatheory left
[04:23] *** Tene_ joined
[04:29] *** alc left
[04:34] *** Tene left
[04:51] *** ruoso_ joined
[04:54] *** ruoso left
[05:03] *** ced-2 joined
[05:08] *** ced-2_ left
[05:16] *** alc joined
[05:33] *** kate21de left
[05:33] *** mberends left
[05:36] *** WootKwok joined
[05:42] *** samlh joined
[05:59] *** WootKwok left
[06:13] *** tomheady left
[06:15] *** tomheady joined
[06:18] *** amoc joined
[06:25] *** DemoFreak joined
[06:29] *** cai_ joined
[06:49] *** amoc left
[06:59] *** Sepheebear left
[07:28] <pugs_svn> r25850 | lwall++ | [STD] optimize prior error messages not to increase token count

[07:28] <pugs_svn> r25850 | lwall++ | distinguish role arguments from role parameters

[07:28] <pugs_svn> r25850 | lwall++ | suppress undefined errors on ::T without $

[07:38] *** cai_ left
[07:38] *** cai_ joined
[07:38] *** mberends joined
[07:43] *** finanalyst joined
[07:51] <moritz_> rakudo: my $a = -> $x { 3 }; say $a.signature.perl

[07:51] <p6eval> rakudo d2ad09: OUTPUT«:(Any $x)␤»

[07:52] <mberends> moritz_: cute. is .signature recent?

[07:52] <moritz_> mberends: dunno

[07:53] *** wayland left
[07:53] <moritz_> anywawy, it's wrong (been that for seven hours ;-)

[07:55] <pugs_svn> r25851 | moritz++ | [t/spec] test that pointy block params default to Object

[08:04] <pugs_svn> r25852 | moritz++ | [t/spec] fix test added in previous commit; properly fudge for rakudo

[08:05] <moritz_> rakudo: my $x = -> { 3 }; my $z = -> { 4 }; any($x, $z).().perl

[08:05] <p6eval> rakudo d2ad09: OUTPUT«invoke() not implemented in class 'Junction'␤current instr.: '_block14' pc 122 (EVAL_21:55)␤»

[08:05] <moritz_> (that's RT #58004)

[08:09] *** quappa joined
[08:10] *** cai__ joined
[08:12] <quappa> looks like fresh rakudo does not build on FreeBSD. how and where may I report this?

[08:13] <moritz_> quappa: send a mail to [email@hidden.address]
[08:14] *** masak joined
[08:15] *** wayland76 joined
[08:15] <masak> good morning, #perl6ers.

[08:15] <wayland76> Good morning

[08:16] <mberends> masak: yes.

[08:19] <mberends> Test:Ix is interesting. Were you on the way to executing the tests table-driven as well. Generating code seems so... IDL-ish

[08:19] <quappa> moritz_, thanks, done! I failed to find the email address on rakudo.org :)

[08:21] *** amoc joined
[08:23] <masak> mberends: 'generating the tests table-driven'?

[08:23] *** quappa left
[08:23] <pugs_svn> r25853 | wayland++ | Fix typo for TimToady++ (I like the new changes :) )

[08:27] *** cai_ left
[08:28] <masak> mberends: well, I'm not sure I understand you correctly, but the tests are executed using the index. the call to run-tests(@tests) does all the traversal and running of the tests in the index.

[08:30] <mberends> sorry, I probably misunderstood. Generating stub code gives me CORBA shudders.

[08:35] <mberends> $class &

[08:35] <pugs_svn> r25854 | wayland++ | Removed IO::File::Windows, as it's no longer necessary, AFAIK.  

[08:36] <masak> mberends: I've never used COBRA, so I'm not getting those shudders. however, I can see how generating stub code might not always be ideal. and the synching problem will always be there.

[08:37] <masak> nevertheless, I liked writing Test::Ix. it uses a couple of nice techniques.

[08:37] *** ced-2_ joined
[08:42] *** DemoFreak left
[08:47] <Matt-W> Morning

[08:48] <wayland76> masak: CORBA (not COBRA) was designed by the Object Management Group -- does that give you the shudders? :)

[08:48] <wayland76> Matt-W: 'morning :)

[08:49] <masak> wayland76: ah, CORBA.

[08:49] <masak> wayland76: actually, it does give me slight shudders.

[08:49] <masak> but only because of those three words in a row.

[08:50] *** ced-2 left
[08:51] <masak> mberends: one might look at it this way. the test descriptions need to be written anyway, so putting them in the index is no extra work. in fact, there might be benefits to thinking top-down and listing the tests before implementing them. (it was for me.)

[08:51] <masak> mberends: after that, the code generation just consists of giving you convenient blocks that you would have created manually anyway in the second phase of implementing the tests.

[08:53] *** wayland76 is now known as eliza

[08:54] *** eliza is now known as wayland76

[08:54] *** wayland76 is now known as eliza

[08:54] *** eliza is now known as wayland76

[08:55] *** cai__ left
[09:28] *** alc left
[09:30] *** wayland76 left
[09:32] *** pmurias joined
[09:33] *** jedai left
[09:34] *** rmt_ joined
[09:57] *** ruoso_ left
[09:57] *** bacek__ is now known as bacek

[09:57] <bacek> good evening

[09:58] <masak> bacek: privet.

[09:59] <bacek> masak: привет :)

[09:59] <masak> nice. :) I'll do that next time. I'm still a bit confused about the keyboard layout of the Cyrillic letters.

[09:59] *** DemoFreak joined
[10:00] <bacek> masak: It's easy. You just need little bit of training :)

[10:01] <bacek> masak: or switch Input Method to "Cyrillic (transliteral)" if you are using X-Window

[10:01] <masak> I'm on Emacs and LEIM. it has russian-computer and russian-typewriter, neither of which is transliteral.

[10:02] <masak> I usually have to hunt a long while for the right letter. :)

[10:02] <masak> (I know the alphabet already, just not the locations of the keys)

[10:03] <bacek> masak: http://www.yandex.ru/index_engl_qwerty.html

[10:03] <masak> ah, nice. thanks.

[10:03] <bacek> masak: np :)

[10:04] <bacek> ouch. 257 open bugs...

[10:04] <bacek> 267...

[10:04] <masak> sorry about that :P

[10:06] <bacek> masak: it's all your fault! :)

[10:06] * moritz_ contributed a few over the weekend

[10:07] <masak> bacek: see? :) not _all_ my fault.

[10:08] <bacek> masak: I see!

[10:09] <bacek> moritz_: do we have tests for multiple return values for #63912?

[10:10] <moritz_> bacek: dunno

[10:11] <bacek> moritz_: it should be somewhere in S03, isn't it?

[10:11] <moritz_> bacek: or S06

[10:12] <bacek> t/spec/S06-advanced_subroutine_features/return.t

[10:12] <moritz_> spec/S04-statements/return.t

[10:12] <moritz_> spec/S06-advanced_subroutine_features/return2.t

[10:15] <bacek> wow... Just read S06#The_return_function

[10:18] <bacek> rakudo: sub foo { return ((1,2),3) }; my (@a, $b) = foo(); say @a; say $b;

[10:18] <p6eval> rakudo d2ad09: OUTPUT«123␤Use of uninitialized value␤␤»

[10:19] <bacek> moritz_: can you check #63912? It looks invalid AFAIU S06.

[10:20] <moritz_> rakudo: sub f { return 1, 2 }; my ($a, $b) = f(); say $a.perl; say $b.perl;

[10:20] <p6eval> rakudo d2ad09: OUTPUT«too many arguments passed (2) - at most 1 params expected␤current instr.: 'return' pc 15454 (src/builtins/control.pir:29)␤»

[10:21] <Matt-W> I may still have a bug that I haven't pinned down to a test case yet...

[10:21] <moritz_> bacek: if there's a ticket for the simple thing, we can close the more complicated case if it is invalid indeed

[10:22] <bacek> rakudo: sub foo { return :a<1>, :b<2> }; foo();

[10:22] <p6eval> rakudo d2ad09: OUTPUT«FixedIntegerArray: index out of bounds!␤current instr.: 'return' pc 15454 (src/builtins/control.pir:29)␤»

[10:22] <bacek> Hmm... I didn't expect it.

[10:24] *** pmurias left
[10:24] <bacek> moritz_: Can I move t/block/return_function.t to t/spec/S06?

[10:25] <moritz_> bacek: if you review it, for sure

[10:25] *** kane_ joined
[10:25] <bacek> moritz_: it's straight forward copy from spec.

[10:25] <moritz_> bacek: then go ahead

[10:25] <bacek> ...copy samples from spec...

[10:26] <bacek> moritz_: S06-advanced?

[10:26] <moritz_> bacek: yes

[10:28] <bacek> moritz_: done. Waiting for git svn dcommit

[10:28] <pugs_svn> r25855 | bacek++ | [t/spec] Move t/blocks/return_function.t to t/spec/S06.

[10:28] <bacek> finally :)

[10:41] *** araujo joined
[10:48] <bacek> rakudo: my $x := |(f);

[10:48] <p6eval> rakudo d2ad09: OUTPUT«Could not find non-existent sub f␤current instr.: '_block14' pc 53 (EVAL_17:38)␤»

[10:49] <bacek> rakudo: sub f {}; my $x := |(f);

[10:49] <p6eval> rakudo d2ad09: RESULT«[]»

[10:49] <bacek> rakudo: sub f { :a<a> }; my $x := |(f);

[10:49] <p6eval> rakudo d2ad09: RESULT«"a" => "a"»

[11:00] *** Sepheebear joined
[11:14] *** DemoFreak left
[11:27] *** ced-2 joined
[11:27] <jnthn> hi all

[11:30] <Matt-W> hi jnthn 

[11:30] <Matt-W> What miracles are you going to perform today?

[11:32] *** ced-2_ left
[11:32] <masak> oh hai, jnthn.

[11:33] *** ujwalic joined
[11:41] *** ced-2 left
[11:41] <jnthn> Matt-W: Probably very few today...

[11:42] *** ujwalic left
[11:42] <jnthn> Will do Rakudo day tomorrow or Wed.

[11:42] *** ced-2 joined
[11:43] <Matt-W> awwww

[11:43] <masak> Matt-W: patience! :)

[11:43] <Matt-W> Time to get out the mind control ray again

[11:43] <Matt-W> Get you some more grants

[11:55] <jnthn> Heh, I still have to complete my Array/Hash/List/Mapping refactor before my existing grant is done. :-P

[11:56] <literal> has there been any work on the command line tool mentioned in u4x/README ?

[11:56] <Matt-W> jnthn: sounds painful

[11:56] <jnthn> Matt-W: It is. :-(

[11:57] <Matt-W> :(

[11:59] *** ced-2_ joined
[12:03] *** ced-2 left
[12:06] *** skids left
[12:20] <masak> literal: no, not yet. just thought work.

[12:20] <masak> literal: current time plan is to implement the things in u4x/P2T1A, and then perhaps make a prototype of the command line tool to access those articles.

[12:25] <literal> I might want to work on that for GSoC

[12:26] *** pmurias joined
[12:27] <masak> literal: cool.

[12:36] *** zamolxes joined
[12:36] *** donaldh joined
[12:41] *** amoc left
[12:48] <literal> http://perlcabal.org/syn/S04.html#Closure_traits

[12:48] <literal> what does the '*' mean which comes after some of these?

[12:48] <literal> oh, never mind, it's explained afterwards

[12:50] * masak looks forward to some of those block types

[12:50] <masak> hm, maybe a wishlist for Perl 6 features -- along with short code snippets of what could be done with them -- would make a good blog post.

[12:51] *** pmurias left
[12:52] *** pmurias joined
[12:53] <Matt-W> masak: yes, just write something!!

[12:53] *** ruoso joined
[12:53] <masak> Matt-W: I'll have to queue it, though. I'd like to write a few other things first.

[12:53] <masak> but I'll keep it in mind.

[12:54] * masak is semi-exhausted from the massive blogging this weekend

[12:54] *** ruoso_ joined
[12:54] <Matt-W> there was blogging this weekend

[12:54] <Matt-W> hmm

[12:54] * Matt-W pokes his feed reader

[12:54] <ruoso_> Hello

[12:54] <masak> ruoso_: hi.

[12:55] <pmurias> ruoso_: hi

[12:56] <ruoso_> pmurias: I see you started porting things... pmurias++

[13:04] *** Kimtaro_ joined
[13:05] *** Kimtaro_ left
[13:08] <Matt-W> masak: wow, that was some very good blogging

[13:11] <masak> Matt-W: thank you. :)

[13:11] *** rmt_ left
[13:12] <Matt-W> masak: I now definitely definitely have your journal feed

[13:12] <Matt-W> so I won't miss any more

[13:12] <masak> ;)

[13:13] * Matt-W has been pondering writing about Form

[13:13] *** drbean_ joined
[13:13] <masak> another habit I think we should adopt: announcing new projects on p6u.

[13:13] <masak> we did this for November, but I still haven't done it for Druid.

[13:14] *** kane__ joined
[13:14] <masak> perhaps a nice touch would be to announce each others' projects? :)

[13:14] <Matt-W> :)

[13:14] <masak> Matt-W: want to try? I'll announce Form and you'll announce Druid.

[13:14] <Matt-W> "Ladies and gentlemen, I have the great honour to announce Carl Masak's latest project"

[13:14] <Matt-W> (with your surname using the right letters)

[13:15] <Matt-W> (which I can't remember how to type on this stupid operating system)

[13:15] * Matt-W misses his compose key

[13:15] <masak> 19th-century-style announcement. :)

[13:15] <Matt-W> well if you can't be florid from time to time...

[13:16] <masak> I'm not complaining.

[13:16] <Matt-W> ...life would be very dull :)

[13:16] <Matt-W> what I should do is subscribe to p6u rather than just reading it on google

[13:16] <masak> aye.

[13:18] * Matt-W initiates that process

[13:18] <Matt-W> but sure, announce Form if you like

[13:18] <Matt-W> and I'll go for Druid

[13:18] <Matt-W> any relevant URLs you particularly want mentioning?

[13:19] <masak> don't think so,

[13:19] <masak> it should all be in the README.

[13:19] <Matt-W> :)

[13:19] *** skids joined
[13:19] * jnthn mentioned Druid in one of his talks.

[13:20] <Matt-W> \o/

[13:20] <masak> jnthn: which one?

[13:20] <masak> and, prehaphs more importantly, why? :P

[13:21] <jnthn> what, you expect me to know what I talked abotu when and why? :-P

[13:21] <masak> I thought you had a URL or something... :)

[13:21] *** Kimtaro left
[13:21] <Matt-W> masak: I'm sure he said something like 'Druid is an amazing project' and 'masak is great' :P

[13:22] <jnthn> masak: I do and it's not up to date ;-)

[13:22] <Matt-W> possibly followed by muttering about all the bug reports

[13:22] <jnthn> masak: Oh! It was in Ukraine.

[13:22] <jnthn> IIRC

[13:22] <masak> Matt-W: :)

[13:22] <jnthn> I was talking about projects built on Rakudo.

[13:22] <masak> ok, so if I get any collaborators from Ukraine, I'll know why.

[13:22] <jnthn> mentioned November also.

[13:22] <Matt-W> p6u subscription complete, hurrah

[13:23] <masak> Matt-W: writing the Form announcement now.

[13:23] <Matt-W> Don't oversell it

[13:23] <Matt-W> There's not really that much of it yet :)

[13:24] <Matt-W> However, a certain level of nagging is required to keep me writing

[13:24] <Matt-W> This weekend I spent a lot of potential coding time practising the viol instead

[13:24] <Matt-W> I need to find a balance

[13:24] <masak> Matt-W: just going to present it as plain as I can.

[13:24] <Matt-W> I'm sure my neighbours would prefer me to code, as it's significantly quieter

[13:25] <masak> it's a free country.

[13:26] <Matt-W> hahahahahaha

[13:27] *** pmurias left
[13:31] <masak> Matt-W: does this work? http://gist.github.com/79876

[13:32] <Matt-W> masak: yes, although it's not a straight port of Damian's module because I don't understand how it works

[13:32] <Matt-W> And I'm trying to be as Perl 6-ish as possible

[13:32] <masak> Matt-W: of course.

[13:33] <masak> I'm not sure there is such a thing as a 'straight port'.

[13:35] *** frooh left
[13:36] <Matt-W> if there is, it's probably not a very good use of Perl 6 :)

[13:37] * masak ported Ruby code to Perl 6 yesterday

[13:37] <masak> interesting experience.

[13:37] <Matt-W> I read the code

[13:37] <Matt-W> it looks like Perl 6

[13:37] <Matt-W> that big hash initialisation without brackets around it is weird to Perl 5 eyes though

[13:38] <masak> aye.

[13:38] <masak> I make somewhat of a point of not using the parens there.

[13:38] <masak> I want people to get used to it.

[13:38] <Matt-W> I wasn't aware that you could actually do it

[13:38] <Matt-W> but I guess as a consequence...

[13:38] <Matt-W> my @a = 1, 2, 3, 4, 5;

[13:39] <masak> short question: if I get autogenerated mail from someone on p6u saying that they put my email in a whitelisting quarantine, I'm under no social obligation to follow their instructions to enable my email address with them, right?

[13:39] <masak> Matt-W: aye.

[13:39] <moritz_> masak: right

[13:40] <masak> and the slight annoyance I'm feeling from getting that email is also justified?

[13:40] <moritz_> yes.

[13:40] <masak> oh, good.

[13:40] <Matt-W> really you shouldn't have that kind of thing responding to mailing lists

[13:40] <masak> [email@hidden.address] if you're reading this, you've just spammed me. stop doing that.

[13:41] *** Exodist joined
[13:42] *** Kimtaro joined
[13:50] * ruoso_ later &

[13:50] <jnthn> Years ago I was on a mailing list. Some guy set an out-of-office message. Which responded to the mailing list...and then responded to itself when the mail came back...500 messages later I faked an unsubscribe email from the guy.

[13:50] *** ruoso_ left
[13:50] *** ruoso left
[13:51] <masak> jnthn: that happened on some list I was on as well. software sucks.

[13:51] <Matt-W> youch

[13:51] <Matt-W> most out of office autoresponders aren't that stupid

[13:51] <Matt-W> they only do once per sender per out of office period

[13:51] <Matt-W> classic example of why autoresponders are evil

[13:51] <jnthn> Aye. I dislike them.

[13:53] <skids> too add, calendar apps: rather than call you on the phone I'll just schedule you for a meeting.  Feh.

[13:53] <Matt-W> masak: Druid announcement... sent

[13:53] <masak> ooh!

[13:53] * masak looks

[13:54] <masak> Matt-W: thank you. I'm very happy about that.

[13:54] <masak> you'll note that the Form announcement already got a reply.

[13:54] <Matt-W> yes

[13:55] <Matt-W> I'm not quite sure what he means

[13:55] <Matt-W> and I got that autoreply

[13:55] <Matt-W> to add insult to injury, it's got a random unnecessary capital letter in the middle

[13:55] <Matt-W> s/unnecessary/incorrect/

[13:56] <jnthn> That rEally sucks, man.

[13:56] <Matt-W> "I am unable to read Your mail."

[13:56] <Matt-W> or something like that

[13:56] <masak> inconCeivable!

[13:56] <Matt-W> maybe I should make allowances that he's clearly not a native English speaker

[13:58] *** hercynium joined
[13:58] <masak> Matt-W: at resturaunts in Sweden, waiters sometimes use the plural "you" when addressing me. that feels bad for two reasons.

[13:58] <masak> first, I'm not there to be treated as somehow special or of higher rank. I'm there to eat.

[13:59] <masak> second, we successfully abolished those forms (as well as titles) in the late 50's. let's not reintroduce them. please.

[14:01] <Matt-W> heh

[14:01] <Matt-W> English hasn't had that kind of distinction for several centuries

[14:01] *** hercynium left
[14:01] <masak> What doest thou mean?

[14:01] <Matt-W> I remember being really baffled by it when I started learning German

[14:01] <Matt-W> thou is the informal second-person pronoun

[14:01] <Matt-W> but it's obsolete

[14:01] <masak> aye.

[14:02] <Matt-W> we just use the formal one now, and it has no particular connotation

[14:02] <skids> thou art screwn

[14:02] <skids> :-)

[14:02] <Matt-W> 'thou' is just a bit of historical baggage

[14:02] <Matt-W> and often misused by people trying to speak middle english

[14:02] <Matt-W> who don't notice that lots of other words have changed too

[14:02] <masak> heh :)

[14:03] <masak> speaking of which, I look forward to a Hamlet translation in Lolspeak.

[14:04] <Matt-W> I HAZ A KWESTSHUN: 2 B OR NOT 2 B?

[14:04] <Matt-W> I assume you've seen the lolspeak bible

[14:04] <masak> Matt-W: aye.

[14:04] <masak> I'm quoting from it in my weekly Web.pm reports.

[14:05] <Matt-W> oh yes I remember

[14:05] <masak> I've already elected a quote for today's post.

[14:05] <Matt-W> you included a quote from genesis last time

[14:05] <Matt-W> I thought it reads very well in lolspeak

[14:05] <masak> yah. that's what I'm after.

[14:06] <masak> not so much the lols of it, but a lingering literary value.

[14:08] *** alester joined
[14:10] <skids> Hmm I wonder how may "ang" and "enm" locales files have been implemented.

[14:10] *** kane__ left
[14:11] *** kane__ joined
[14:11] <skids> And we need a lolcats locale ID these days.

[14:13] * Matt-W hopes 'lol' isn't taken

[14:13] *** kane__ left
[14:14] *** kane__ joined
[14:21] <skids> hmm the most heavily populated locale using applications: libbonobo, gnome, gimp, audacity, and a few debian utils.

[14:22] <skids> lolcats gimp might be fun.

[14:24] <masak> IM IN UR PICT, CAN FILLZ UR SELECSHUNS.

[14:29] *** ejs joined
[14:32] *** ejs left
[14:35] <moritz_> any numeric nerds around? I'm looking for a linear solver in C or C++ that works with sparse, complex asymmetric matrices...

[14:35] <moritz_> any ideas?

[14:36] *** ejs joined
[14:36] <masak> moritz_: Matlab?

[14:38] <moritz_> masak: not available, and commercial :(

[14:38] <skids> Been my experience if you want what Matlab does, octave.

[14:39] <moritz_> octave might be worth investigating

[14:50] <krunen> moritz_: http://www.tau.ac.il/~stoledo/taucs/ might do it

[14:52] <moritz_> krunen: I looked at taucs... but the last update was 2003, and it doesn't even compile here :(

[14:53] *** Tene joined
[14:54] <krunen> I only looked at some code using it years ago. It still looks like lots of people us it, though...

[15:00] *** eternaleye left
[15:00] <krunen> moritz_: How about http://trilinos.sandia.gov/, http://en.wikipedia.org/wiki/Trilinos

[15:02] *** zamolxes left
[15:03] *** hercynium joined
[15:06] *** PacoLinux joined
[15:06] *** Tene_ left
[15:07] *** meppl joined
[15:07] <moritz_> krunen: I'll take a look

[15:20] *** donaldh left
[15:20] <krunen> moritz_: http://www.cgal.org/ has a patched and updated version of Taucs

[15:20] *** donaldh joined
[15:21] *** kane__ left
[15:21] *** kane__ joined
[15:23] <jnthn> (scheduling) Rakudo day will be tomorrow. :-)

[15:27] <masak> \o/

[15:28] <masak> I have some work on Rakudo's &unpack planned for tomorrow. and some November work in the evening.

[15:28] *** [particle]1 joined
[15:29] *** finanalyst left
[15:30] <jnthn> masak: Nice.

[15:31] <masak> Web.pm is stalling on unpack($str, 'H2')

[15:31] <skids> Is there anything new in unpack?

[15:32] <moritz_> you mean compared to Perl 5?

[15:32] <masak> skids: actually, IIRC from talking with TimToady, it's kind of endangered.

[15:33] <masak> he thought the interface was slightly too exposing of internals. or something, I don't exactly remember.

[15:33] <masak> he thought things should be done with things that called unpack rather than with unpack itself.

[15:34] <skids> If we could drop to bit level "character type" in the middle of a regexe, we wouldn't really need it.

[15:34] *** sri_kraih_ joined
[15:34] <moritz_> we can

[15:35] <skids> Though of course it doesn't really cover when you have a field of normal bytewise data that has been shifted a few bits, but neither does unpack IIRC.

[15:35] <skids> (Such situations are rare anyway)

[15:36] *** mberends left
[15:36] *** nihiliad joined
[15:42] *** Psyche^ joined
[15:44] * masak is fascinated by unpack

[15:44] *** Patterner left
[15:44] *** Psyche^ is now known as Patterner

[15:49] *** sri_kraih left
[15:50] <diakopter> moritz_: did you find/select a package

[15:51] <moritz_> diakopter: not yet. I'm still compiling Trilinos/amesos

[15:51] <moritz_> I know that mumps does what I want, but its interface is *really* ugly

[15:52] <diakopter> do you have access to [and willingness to use] matlab?

[15:53] <moritz_> in theory I have access, but in practice the license seems to have expired

[15:53] <moritz_> aka "no"

[15:55] <diakopter> http://www.math.uni-wuppertal.de/~xsc/xsc/cxsc.html  seems to have a sparse linear system solver library

[16:06] *** lambdabot left
[16:09] *** lambdabot joined
[16:10] *** justatheory joined
[16:15] *** vybircrey joined
[16:15] *** vybircrey left
[16:19] *** ejs left
[16:27] *** kane__ left
[16:34] <alester> Those wacky spammers!

[16:34] <alester> A new comment has been posted on your blog Perlbuzz, on entry #569 (Parrot 1.0 will be out in March 2009).

[16:34] <alester> I and my family we use Parrot 1.0 some years, its functions us

[16:34] <alester> arranges. Now we will try Rakudo.

[16:35] <moritz_> wtf?

[16:37] <alester> It's spamming.

[16:37] <jnthn> Fail at attempting to be convincing...

[16:38] <jnthn> Despite the key noun extraction win.

[16:38] <alester> "some years" of Parrot 1.0.  That is impressive.

[16:38] *** hercynium_ joined
[16:38] *** hercynium_ left
[16:38] <jnthn> Yeah, wish I'd used Parrot 1.0 for some years. ;-)

[16:39] <masak> I think we all do.

[16:39] *** hercynium left
[16:39] *** hercynium joined
[16:39] <alester> We'd have a better idea what to write.

[16:40] <masak> http://use.perl.org/~masak/journal/38651

[16:42] <masak> ooh, http://perlbuzz.com/2009/02/should-perl-6-use-the-cpan.html

[16:42] * masak reads

[16:43] *** M_o_C joined
[16:43] <moritz_> masak++

[16:44] <masak> work on Web.pm is slowly coming together. I'm positively surprised.

[16:44] <masak> also, chris2++ for Rack.

[16:45] <alester> masak, why the "oooh"

[16:46] <masak> alester: simply because this is a topic that interests me, and I hadn't seen the article before, and noticed that it had 28 comments.

[16:46] <masak> alester: I'm subscribing to Perlbuzz now.

[16:46] <alester> masak: I believe strongly that whatever we use for the CPAN for Perl 6 will not be based on the current infrastrcutre.

[16:46] <alester> Nor should it be.

[16:47] <alester> But I suspect that it just won't work out that way.

[16:47] <masak> alester: I'm deliberately agnostic on that issue.

[16:47] <moritz_> I strongly belive that we need a distribution solution RSN

[16:47] <moritz_> whatever it looks like

[16:47] <masak> my stake in this, proto, is deliberately made to bow to the Real Solution.

[16:47] <alester> moritz_: Yup, and what will happen is that some JFDIing will happen and other things will coalesce around it.

[16:48] <moritz_> alester: aye. My fear is just that we'll make the same mistakes that the perl 5 CPAN hackers did

[16:48] <alester> Dunno.  Who can tell?

[16:48] <moritz_> so it would be great if the designers of CPAN (if such a thing exists) would actually help us

[16:48] <alester> Other than that the people who actually Make It Happen are the ones who will make the choices.

[16:49] <masak> moritz_: indeed.

[16:49] <masak> moritz_: we should write to them.

[16:49] <alester> part of the problem is that there is the CPAN and the PAUSE

[16:49] <alester> and there's no definition of what the CPAN is.

[16:50] <alester> besides, we have no way of installing modules, so the CPAN angle is irreelevant

[16:51] <masak> this is a case where I would actually welcome spec-first-then-implement, just as with Perl 6.

[16:51] <alester> My point is that the implementor will win.

[16:51] <alester> If you can spec-then-implement, good for you.

[16:52] <alester> But the implementor first to market will win.

[16:52] <masak> I agree.

[16:53] <alester> and it was what I was trying to get across at Froen Perl

[16:53] <alester> butdidn't focus enough on.

[16:53] <masak> right now, I'm the only winner by that definition. and I've already disqualified myself.

[16:53] <alester> I need to write some more editorials.

[16:53] <masak> you could call github a de facto winner as well so far.

[16:54] <alester> There are no entrants, so no winner.

[16:54] <alester> Nobody has anything we can install 

[16:54] <alester> yet.

[16:54] <moritz_> so many good Perl 6 projects. So little time to participate in them :/

[16:55] <masak> alester: define 'anything we can install'.

[16:55] <alester> Is there anything we can install?

[16:55] <alester> Do we even have module loading in Rakudo yet?

[16:55] <moritz_> sure we have.

[16:55] <masak> of course.

[16:55] <masak> keep up. :)

[16:55] <alester> I was unaware.

[16:55] <moritz_> that's why we need something RSN ;-)

[16:55] <alester> masak: Your comment does nothign.

[16:56] <masak> alester: what do you mean?

[16:56] <alester> "keep up"

[16:56] <alester> I'm not a dipshit.

[16:56] <moritz_> masak: I think you can remove the rakudo-prelude from proto

[16:56] <masak> alester: I didn't mean to be rude.

[16:56] <masak> moritz_: ok.

[16:57] <masak> alester: but the fact is that we've had module loading since about August 2008.

[16:57] <masak> if not earlier.

[16:57] <alester> Fine.

[16:57] <masak> alester: if you don't know that, you're not keeping up. just sayin'.

[16:57] <alester> And my point is that there's no value in your sayin'.

[16:58] <masak> alester: in that case, apologies.

[16:58] <moritz_> http://nopaste.snit.ch/15885 # test suite status in numbers

[16:58] <masak> I will attempt to say only things of value from now on.

[16:58] <moritz_> masak: don't ;-)

[16:59] *** ced-2 joined
[16:59] <alester> masak: Seriously, what's the point in saying "You're not keeping up."  Why would you say that to someone?

[16:59] <masak> alester: you might have noticed the little smiley at the end of my statement.

[16:59] <masak> alester: that means I wasn't serious when I said it.

[16:59] <alester> Doesn't make it less insulting.

[17:00] <masak> alester: it was intended to make it less insulting.

[17:00] <alester> Not saying it at all would have reduced the insulting by 100%

[17:00] <masak> I think there is a certain humour here in #perl6.

[17:00] <masak> not all share it. I respect that.

[17:00] <masak> sorry to have inconvenienced you.

[17:00] *** alester is now known as AndyLunch

[17:01] <moritz_> rakudo: say ?('/tmp/ ~~ :d )

[17:01] <p6eval> rakudo d2ad09: OUTPUT«say requires an argument at line 1, near " ?('/tmp/ "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[17:01] <moritz_> rakudo: say ?('/tmp/' ~~ :d )

[17:02] <p6eval> rakudo d2ad09: OUTPUT«1␤»

[17:02] <moritz_> that's not a good error message for an unfinished string

[17:02] <moritz_> masak: one more workaround you can remove in proto RSN ;-)

[17:02] <jnthn> masak: Come on, keep up with people's humor preferences. :-P

[17:03] * jnthn tears more hair out trying to get generate JavaScript with ASP.NET repeater controls...

[17:03] <moritz_> ASP.NET raptor controls? ;-)

[17:03] <masak> jnthn: :)

[17:04] <masak> moritz_: aye.

[17:08] <pugs_svn> r25856 | pmurias++ | [re-smop] separated the noop REFERENCE and RELEASE and placeholder MESSAGE out of bool

[17:08] <moritz_> what is re-smop?

[17:12] <moritz_> rakudo: for 1..3 { when 1 { next }; .say }

[17:12] <p6eval> rakudo d2ad09: OUTPUT«2␤3␤»

[17:12] <moritz_> rakudo: for 1..3 { when /1/ { next }; .say }

[17:12] <p6eval> rakudo d2ad09: OUTPUT«2␤3␤»

[17:15] *** ejs joined
[17:21] *** ced-2_ left
[17:21] <gfldex> rakudo: grammar foo {regex bar { .* }; }; my Str $text = 'foo bar'; given $text { when /<fool::bar>/ { } }

[17:21] <p6eval> rakudo d2ad09: OUTPUT«Null PMC access in get_string()␤current instr.: 'parrot;PGE;Match;new' pc 196 (compilers/pge/PGE/Match.pir:128)␤»

[17:21] <gfldex> Null PMCs are bad, aint they?

[17:21] *** bacek left
[17:22] *** mikehh joined
[17:23] <[particle]1> well, rakudo should have a better error message there, but the bug is in your code

[17:23] <moritz_> what's the bug?

[17:23] <[particle]1> s/fool/foo/

[17:24] <moritz_> ah right, I think we have a ticket for non-existant grammar already

[17:24] <gfldex> fool does not exists

[17:25] <gfldex> could somebody drop me a link to the bug tracker pls?

[17:25] *** frioux joined
[17:25] <moritz_> http://rt.perl.org/rt3/

[17:26] <moritz_> the perl6 queue is of interest for you

[17:26] <gfldex> shouldn't rakudo.org have a link over there?

[17:26] <moritz_> it should

[17:29] <moritz_> masak: http://nopaste.snit.ch/15886 improves separation of code and data in proto

[17:29] <masak> moritz_: cool, thanks.

[17:30] <masak> that looks like almost-YAML. :) maybe we should be bold and go all the way to YAML.

[17:30] <moritz_> we should. But for that we'd need a parser module written in Perl 6

[17:31] <moritz_> and then we'd need to bundle it with proto

[17:31] <masak> aye. :/

[17:31] <moritz_> so I chose the "do something that actually works" path ;-)

[17:32] <masak> moritz_: the Perl 5 script already reads and writes pseudo-YAML, using home-grown methods that will break under certain conditions.

[17:32] <moritz_> meh

[17:34] <masak> there are interesting bootstrapping issues in connection with proto.

[17:34] <masak> anyway, thanks. I will review and most probably apply.

[17:34] * masak goes swimming

[17:34] *** masak left
[17:36] *** cognominal_ joined
[17:37] *** bacek joined
[17:41] *** ZuLuuuuuu joined
[17:47] *** cognominal left
[17:48] *** pmurias joined
[17:48] <pmurias> moritz_: re-smop is a refactored version of smop

[17:51] <moritz_> pmurias: is it for that capture thing?

[17:51] *** justatheory left
[17:51] *** justatheory_ joined
[17:53] *** AndyLunch is now known as alester

[17:54] <pmurias> moritz_: yes, we also split smop into modules and i do some generall cleanup

[17:55] <moritz_> ah, nice

[18:03] *** lovingyou joined
[18:05] *** Limbic_Region joined
[18:06] *** ced-2_ joined
[18:13] *** mico joined
[18:14] *** mico left
[18:14] *** mico joined
[18:17] <pugs_svn> r25857 | pmurias++ | [re-smop] ported over idconst

[18:19] *** ced-2 left
[18:23] <mikehh> rakudo (d2ad095_ builds on parror r37487 - make test/makr spectest PASS - Kubintu Intrepid i386

[18:24] <mikehh> s/makr/make/

[18:26] *** mico_ joined
[18:27] *** mico_ left
[18:27] <pugs_svn> r25858 | pmurias++ | [re-smop]

[18:27] <pugs_svn> r25858 | pmurias++ | remove the object is it's own RI if the RI field is NULL rule

[18:27] <pugs_svn> r25858 | pmurias++ | copied over 01_base.pod

[18:30] <pmurias> @tell ruoso what do we need empty capture in s0native for?

[18:30] <lambdabot> Consider it noted.

[18:32] *** mico left
[18:36] *** ced-2 joined
[18:48] *** schmalbe joined
[18:52] *** ujwalic joined
[18:57] *** |jedai| joined
[19:00] *** ced-2_ left
[19:08] *** DemoFreak joined
[19:08] *** pmurias left
[19:08] *** nihiliad left
[19:15] *** justatheory_ left
[19:15] *** justatheory joined
[19:18] *** ced-2_ joined
[19:20] *** donaldh left
[19:20] *** donaldh joined
[19:32] *** ced-2 left
[19:40] *** ujwalic left
[19:49] *** smtms joined
[19:54] *** amoc joined
[20:04] *** Eevee_ is now known as Eevee

[20:08] *** ispy_ joined
[20:09] *** schmalbe left
[20:16] *** ced-2 joined
[20:16] *** cj joined
[20:17] <cj> diakopter: you seem to have disappeared

[20:22] <jnthn> std: 

[20:22] <jnthn> std: role Foo[$ where { $*thingy == 42 }: ] { }

[20:22] <p6eval> std 25858: OUTPUT«##### PARSE FAILED #####␤Malformed "role" declaration␤Illegal use of colon as invocant marker at /tmp/3FON1tESEA line 1:␤------> role Foo[$ where { $*thingy == 42 }: ] { }␤    expecting any of:␤       POST␤   blockoid␤ infix or meta-infix␤        infix stopper␤  

[20:22] <p6eval> ..postfix␤       postfix_pr...

[20:22] <jnthn> std: role Foo[$?CLASS where { $*thingy == 42 }: ] { }

[20:22] <p6eval> std 25858: OUTPUT«##### PARSE FAILED #####␤Malformed "role" declaration␤Illegal use of colon as invocant marker at /tmp/5PdK60ql5D line 1:␤------> ole Foo[$?CLASS where { $*thingy == 42 }: ] { }␤    expecting any of:␤  POST␤   blockoid␤ infix or meta-infix␤        infix stopper␤  

[20:22] <p6eval> ..postfix␤       postf...

[20:22] <jnthn> multi foo($x:) { }

[20:23] <jnthn> std: multi foo($x:) { } # *sigh*

[20:23] <p6eval> std 25858: OUTPUT«ok 00:02 35m␤»

[20:23] <jnthn> std: thanks

[20:23] <p6eval> std 25858: OUTPUT«Undeclared routine:␤   thanks used at 1 ␤ok 00:02 34m␤»

[20:23] <jnthn> ;-)

[20:23] <Matt-W> jnthn: roles that only mixin to a subset of classes?

[20:26] *** M_o_C left
[20:27] <TimToady> do you want an invocant on role signatures?

[20:32] *** nihiliad joined
[20:32] *** ced-2_ left
[20:36] <jnthn> TimToady: The spec says that all roles are implicitly parameterized on $?CLASS.

[20:37] *** lovingyou left
[20:37] *** lovingyou joined
[20:37] *** lovingyou left
[20:37] <jnthn> TimToady: Being able to alias that to something else feels kinda analogous to me as being able to alias self to $thethingiwhinedaboutitneedingtobeonp6l.

[20:37] *** pmurias joined
[20:37] <jnthn> But it does sneak in the ability to control what classes you can be mixed into.

[20:38] <jnthn> I'm not sure I especially want to encourage that though.

[20:38] <jnthn> I can just see role Foo[SomeOtherRole $me:] { }

[20:38] <jnthn> Which then means we break the "doing roles in any order is fine" rule.

[20:39] <TimToady> it just feels a lot more like a multi dispatch than a single to me...

[20:40] <jnthn> And then if you write a class there, if you're aiming for everything in a hierarchy, you rely on people writing the is before the does...again, not good.

[20:40] <jnthn> Oh, roles should *certainly* be multi-dispatch.

[20:40] <TimToady> and $?CLASS doesn't really have an isa relationship with $?ROLE

[20:40] <jnthn> $?CLASS inside a role is generic, right?

[20:40] <jnthn> But no, I don't think it has any isa relationship.

[20:41] <jnthn> I'm just saying that if it's generic then it should be an (implicit) parameter to the role.

[20:41] <jnthn> And debating with myself whether or not exposing that at all is a good idea.

[20:41] <TimToady> it's something more on the order of use COMPILING <$foo>

[20:41] <TimToady> like macros have

[20:42] <jnthn> I don't quite follow?

[20:42] <TimToady> anyway, my $foo ::= $?CLASS isn't good enough?

[20:42] <jnthn> I'm not really arguing for a way to rename, just a way to sneak in a compositon-time check.

[20:42] <jnthn> (Alias rather than rename)

[20:42] <jnthn> Yes, my $foo ::= $?CLASS is fine by me.

[20:43] <jnthn> I think I would prefer we didn't expose the implicit $?CLASS parameter on the whole.

[20:43] <jnthn> Far too many ways for people to shoot themselves in the foot.

[20:43] <jnthn> So on measure, no, I think I don't want an invocant in role signatures. :-)

[20:43] <TimToady> generics are always fun that way...

[20:44] <jnthn> And hey, if we get it wrong to not allow it, allowing it in the future is easy. Allowing it now and disallowing it in the future, OTOH...

[20:45] <TimToady> yes, the conservative approach is fine here

[20:45] <jnthn> I do wonder if we would want some trait on a sub or role that in multi-dispatch lets you veto the candidate as a whole on something independent of the parameters...

[20:45] <jnthn> Which would allow a neater expression of what Ovid wants.

[20:45] <TimToady> you can put anything in a where, doesn't have to relate to the parameter in question

[20:45] <jnthn> I know that.

[20:45] <TimToady> though there does need to be a parameter currently

[20:46] <jnthn> What sent me down the route of wondering about the invocant was...yes, that.

[20:46] <TimToady> well, dynamic rejection is nextsame;

[20:46] <jnthn> Ah, true.

[20:46] <jnthn> But I don't know if that plays ball in role composition. :-)

[20:46] <jnthn> Ah, does nextsame work in single dispatch as well as multiple?

[20:46] <TimToady> well, if it's a sort of dispatcher iterating a list...

[20:46] <TimToady> yes

[20:46] <jnthn> I'd been assuming only multiple...

[20:46] <jnthn> oh, dammit

[20:47] <jnthn> pmichaud: Yes, we do need a custom sub dispatcher. ;-)

[20:47] <TimToady> nextsame just tells the dispatcher "you don't see me"

[20:47] <jnthn> ...why is pmichaud always right. :-|

[20:47] <TimToady> er, perhaps because he sat in on all the design meetings from the start?

[20:48] <jnthn> Attending design meetings gives insight into the language? Wow!

[20:48] <jnthn> ;-)

[20:48] <jnthn> So would you expect nextsame to apply with roles too?

[20:48] <jnthn> I don't see it as an issue in fact...

[20:49] <jnthn> Parametric roles today in Rakudo already just fall out of multiple dispatch, after all...

[20:49] <TimToady> nextsame roughly corresponds to "next 'CANDIDATE'", assuming that all dispatchers label their loop "CANDIDATE"

[20:50] <jnthn> OK

[20:51] <TimToady> lunch &

[20:51] <jnthn> boring_day^Wnightjob&

[20:52] <jnthn> (gotta pay for my expensive hobby somehow...)

[20:54] *** ispy_ left
[20:54] <pmurias> jnthn: what's your hobby? ;)

[20:54] <frioux> probably travelling

[20:55] <jnthn> pmurias: Filling out more of http://travel.jnthn.net/ with markers. ;-)

[20:55] <frioux> jnthn: speaking of, have you heard LTE?

[20:55] <frioux> hobbies that is

[20:56] <jnthn> frioux: No. LTE = ...?

[20:56] <frioux> Liquid Tension Experiment

[20:56] <jnthn> Ah!

[20:56] <frioux> I think you'd like them given you amazon wishlist

[20:56] <jnthn> Yes. :-)

[20:56] <jnthn> I already have LTE 2. It's excellent.

[20:56] <frioux> I like 2 better than one, but they are both great

[20:57] <jnthn> I like DT too. Very happy to see they will be playing at a couple of places relatively near to me.

[20:57] <jnthn> In the summer.

[20:57] <frioux> haha, I bet they give a killer show

[20:57] <jnthn> They do.

[20:57] <frioux> I've never had the chance to see them

[20:57] <jnthn> If you get one, it's totally worth it.

[20:57] <frioux> Which is your favorite of their albums?

[20:57] <frioux> Oh I would for sure

[20:58] <jnthn> It's really hard to pick one.

[20:58] <frioux> pick 3

[20:58] <jnthn> Excluding live ones I assume... :-)

[20:58] <frioux> right

[20:58] <jnthn> Scenes from a memory has gotta be in there

[20:59] <jnthn> Probably train of thought too

[20:59] <jnthn> Then I'm torn between awake and images and words.

[20:59] <frioux> huh, my top two, tied, are probably scenes from a memory and Six Degrees of Inner Turbulence

[21:00] <jnthn> And third? :-)

[21:00] <frioux> That's harder...

[21:01] <frioux> I'd say images and words

[21:01] <jnthn> You listen much to When Day and Dream Unite?

[21:01] <frioux> coworker &

[21:17] <frioux> sorry, back

[21:17] <frioux> I don't even have that one

[21:17] <pmurias> jnthn: what's your hobby? ;)A[A[A[A[A#ifdef SMOP_LOWLEVEL_MEM_TRACE smop_mem_trace_del(value);

[21:17] <pmurias> #endif

[21:17] <pmurias> sorry

[21:18] <jnthn> frioux: It's interesting.

[21:18] <frioux> maybe I should check it out

[21:18] <frioux> have you heard their new album?  I wasn't very impressed with Octavarium

[21:18] <jnthn> Very early, so not so "polished".

[21:18] <frioux> right

[21:19] <jnthn> Octavarium wasn't bad, but in general wasn't as amazing as some of the others.

[21:19] <jnthn> I liekd Systematic Chaos more than Octavarium.

[21:19] <frioux> that's the newest one right?

[21:19] <frioux> I don't have it

[21:19] <jnthn> Yes

[21:19] <frioux> I should check it iout

[21:19] *** kate21de joined
[21:28] <jnthn> frioux: Where abouts are you located?

[21:30] *** ZuLuuuuuu left
[21:30] <frioux> Dallas TX

[21:30] <jnthn> Aha. :-)

[21:30] <frioux> a few miles from pmichaud apparently

[21:31] <frioux> but yeah, in the past 4 years I don't think that DT has been near here

[21:31] <jnthn> By contrast, I'm a few thousand miles from pmichaud.

[21:31] <frioux> hahaha, yet you still get a lot more work on rakudo than we texans... (not including pmichaud)

[21:31] <frioux> work done*

[21:33] <jnthn> I suspect my nearest DT concert is the one in Prague.

[21:34] <jnthn> If it ain't absolutely nearest, it's still easiest.

[21:34] <frioux> yeah, I like DT, but that's a little far for a concert

[21:34] <jnthn> Yeah, but I get to visit Prague and attempt to speak Czech as a bonus. ;-)

[21:34] <frioux> hahaha

[21:35] <frioux> I could go to mexico and attempt to speak spanish

[21:35] <jnthn> Czech is close enough to Slovak that I can usually make myself sufficiently understood.

[21:36] <frioux> huh, interesting

[21:36] <frioux> that makes sense I guess

[21:56] *** nihiliad left
[22:05] *** ced-2_ joined
[22:07] *** skids left
[22:11] *** ced-2 left
[22:12] *** hercynium left
[22:14] *** ejs left
[22:25] *** ced-2 joined
[22:27] <s1n> git question: anyone know how to get a diff after a git add but before a commit?

[22:27] <moritz_> maybe git diff --cached ?

[22:27] <gravity> git diff HEAD

[22:27] <moritz_> or git diff HEAD

[22:27] <s1n> moritz_: you're the man :)

[22:28] <s1n> moritz_++ gravity++

[22:28] <Tene> s1n: what moritz said

[22:30] <pugs_svn> r25859 | moritz++ | [t/spec] better tempfile name

[22:35] *** Woody4286 joined
[22:39] *** ced-2_ left
[22:39] *** Limbic_Region left
[22:40] *** donaldh_ joined
[22:41] <pugs_svn> r25860 | putter++ | [elfparse] <comp_unit> accepts 'say 3'.

[22:41] <pugs_svn> r25860 | putter++ | Support for <!{ }>; token prefix kludgery; crowbarred type-vs-identifier.

[22:47] *** kane__ joined
[22:47] *** kane__ left
[22:48] *** wknight8111 joined
[22:52] <dalek> rakudo: 84920ea | (Moritz Lenz)++ | docs/ChangeLog:

[22:52] <dalek> rakudo: [docs] update ChangeLog a bit

[22:52] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/84920ea9d58b60340ff0238dbf81489ca9dd9778

[22:55] *** skids joined
[23:18] *** DemoFreak left
[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:27] *** kate21de1 joined
[23:43] *** hercynium joined
[23:44] *** kate21de left
[23:44] *** donaldh_ left
[23:46] *** ced-2_ joined
[23:52] *** kate21de1 left
[23:55] *** pmurias left
[23:57] *** mikehh left
