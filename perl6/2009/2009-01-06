[00:02] <mncharity> re Tene's git and graphviz, am I the only one accumulating a *really big list* of "once p6 is working, I can finally do X" items?

[00:02] <mncharity> :)

[00:02] <Tene> mncharity: Perl 6 wouldn't make this problem much simpler.  It's already almost trivial in Perl 5.

[00:06] <Tene> mncharity: http://pleasedieinafire.net/cgi-bin/graphviz

[00:06] <Tene> I'd just need to add a little bit of user tracking or whatever.

[00:08] *** justatheory joined
[00:08] *** alexn_org left
[00:11] *** justatheory left
[00:13] <jnthn> Tene: That's a pleasant domain name. :-)

[00:14] <Tene> jnthn: I bought it originally so that I could give out my email address as [email@hidden.address]
[00:14] <Tene> It's now the domain pointing to my tiny underpowered server at home.

[00:14] <mncharity> re "add a little bit of user tracking or whatever"...  "Ruby on Rails (on Perl 6)" ;)

[00:16] <mncharity> though I don't know if rubinius can run rails yet.  and ruby on p6 would likely be rubinius.

[00:16] <s1n> what's up with the integration folder in the test suite?

[00:18] *** alexn_or1 left
[00:20] <jnthn> mncharity: Alternatively, Cardinal is the Ruby on Parrot implementation, which may be another path to this some day.

[00:20] *** meppl joined
[00:20] *** |jedai| left
[00:21] <Tene> I really need to give cardinal a big rewrite.

[00:21] <Tene> lots of issues.

[00:21] <Tene> And absurdly slow

[00:21] *** vixey left
[00:22] *** |jedai| joined
[00:23] <jnthn> Tene: Is that partly because of parsing speed?

[00:24] <mncharity> jnthn: nod

[00:25] <mncharity> re another path some day

[00:25] *** j1n3l0 joined
[00:26] *** GitHub197 joined
[00:26] <GitHub197> perl6-examples: 3mberends 07master0 SHA1-3df922d

[00:26] <GitHub197> re-spelled collaborates as collaborators

[00:26] <GitHub197> http://is.gd/eE2z

[00:26] *** GitHub197 left
[00:31] *** DemoFreak left
[00:33] <s1n> [particle]: was there a specific reason why negated options were needed?

[00:38] *** hercynium joined
[00:40] *** |jedai| left
[00:41] *** |jedai| joined
[00:42] *** ft left
[00:42] *** Limbic_Region left
[00:45] *** Limbic_Region joined
[00:56] *** cspencer left
[01:02] *** mberends left
[01:04] *** iblechbot left
[01:12] <pugs_svn> r24783 | putter++ | [elfparse] STD_green_run: started work on --format=p5 dumping.  STD_blue_run: honor --start=RULE.  nodes_create.pl: bugfix, now tagged executable.

[01:15] <mncharity> but... the version in svn is doing ./STD_green_run --start=integer -e 3, but not --start=number. :/  Sigh.  Debugging for another day.

[01:15] <mncharity> good night all &

[01:15] *** mncharity left
[01:16] *** Limbic_Region left
[01:24] *** j1n3l0 left
[01:24] *** j1n3l0 joined
[01:25] *** j1n3l0 left
[01:32] *** jklai left
[01:37] *** elmex left
[01:39] *** stephens left
[01:44] *** alc joined
[01:53] *** Exodist left
[01:56] <Tene> jnthn: it's all parsing speed

[01:57] <Tene> jnthn: precompiled cardinal runs about the same as rakudo

[02:15] *** jhorwitz left
[02:26] *** meppl left
[02:29] *** justatheory joined
[02:45] *** alanhaggai joined
[02:54] *** |jedai| left
[02:55] *** |jedai| joined
[02:57] *** wknight8111 left
[03:03] *** justatheory left
[03:05] *** |jedai| left
[03:05] *** |jedai| joined
[03:33] *** alanhaggai left
[03:41] *** fridim_ left
[03:45] *** plainhao joined
[03:58] *** hercynium left
[04:19] *** ChrisDavaz joined
[04:19] *** kisu left
[04:24] *** kisu joined
[04:45] *** plainhao left
[04:46] *** aindilis left
[05:02] *** ChrisDavaz left
[05:04] *** meppl joined
[05:04] *** Student left
[05:17] *** alester joined
[05:38] *** ChrisDavaz joined
[06:03] *** azawawi left
[06:06] *** meppl left
[06:19] *** |jedai| left
[06:20] *** |jedai| joined
[06:49] *** ashizawa joined
[07:02] *** vixey joined
[07:05] *** |jedai| left
[07:05] *** |jedai| joined
[07:13] *** mberends joined
[07:16] *** xinming_ joined
[07:23] *** ejs joined
[07:30] *** xinming left
[07:31] *** xinming joined
[07:38] *** xinming_ left
[07:41] *** ChrisDavaz left
[07:46] *** ChrisDavaz joined
[07:51] *** ChrisDavaz left
[07:58] *** ChrisDavaz joined
[08:12] *** preflex left
[08:12] *** alester left
[08:13] *** tcliou|Away joined
[08:13] *** tcliou|A1ay left
[08:13] *** maerzhase joined
[08:14] *** DemoFreak joined
[08:14] *** magnarjg joined
[08:21] *** Lunchy_ joined
[08:24] *** ChrisDavaz left
[08:28] *** Lunchy left
[08:30] *** |jedai| left
[08:30] *** |jedai| joined
[08:37] *** xinming_ joined
[08:45] *** iblechbot joined
[08:55] *** xinming left
[08:58] *** xinming joined
[09:00] *** maerzhase left
[09:11] *** xinming_ left
[09:14] *** donaldh joined
[09:27] *** magnarjg left
[09:38] *** elmex joined
[09:48] *** maerzhase joined
[09:53] *** DemoFreak left
[09:53] *** mj41 joined
[10:00] *** DemoFreak joined
[10:05] *** |jedai| left
[10:06] *** |jedai| joined
[10:10] *** ChrisDavaz joined
[10:15] <pugs_svn> r24784 | moritz++ | [S29] typos, thinkos and wording improvements, Brandon++, Tim++

[10:15] *** |jedai| left
[10:15] *** |jedai| joined
[10:23] *** ejs left
[10:30] *** Chillance joined
[10:30] *** masak joined
[10:37] *** damianc joined
[10:42] *** ruoso joined
[10:44] <ruoso> Hello!

[10:45] <ruoso> mildew: knowhow Foo { }

[10:45] <p6eval> mildew: OUTPUT«[SMOP_LOWLEVEL_MEM_TRACE] Leaking variable in global destruction: 0x8053610 (lowlevel io)␤[SMOP_LOWLEVEL_MEM_TRACE] Leaking variable in global destruction: 0x8053720 (lexical scope)␤[SMOP_LOWLEVEL_MEM_TRACE] Leaking variable in global destruction: 0x8053fc0 (S1P Package)␤[SMOP_LO...

[10:45] <ruoso> cool... it's fixed... now we just need to get rid from the warnings in evalbot

[10:46] <Matt-W> Hello ruoso

[10:46] <ruoso> hello Matt-W 

[10:52] <moritz_> ruoso: just introduce a switch or env var that supresses these warnings

[10:53] <ruoso> there's a compile-time switch

[10:53] <moritz_> (I had to rm -rf the build dir, wrong permissions...)

[10:53] <masak> greetings, Perl 6 buckaneers.

[10:53] <ruoso> moritz_, you can disable it in SConstruct

[10:54] <moritz_> @tell azawawi I've updated all debian packages on feather; re screenshot: very cool ;-)

[10:54] <lambdabot> Consider it noted.

[10:54] <moritz_> ruoso: how?

[10:54] <ruoso> moritz_, just remove -DSMOP_LOWLEVEL_MEM_TRACE

[10:54] <ruoso> from SConstruct

[10:57] <moritz_> mildew: knowhow Foo { }

[10:57] <p6eval> mildew: RESULT«unimplemented:  at src/AST/Helpers.pm line 108␤   AST::Helpers::XXX() called at src/VAST/noun.pm line 31␤   VAST::noun::emit_m0ld('VAST::noun=HASH(0xd145080)') called at src/AST/Helpers.pm line 131␤        AST::Helpers::EXPR('VAST::EXPR=HASH(0xd142fb0)') called at src/VAST/EXPR.pm

[10:57] <p6eval> ..line 8␤       V...

[10:57] *** damianc left
[10:57] <moritz_> that's probably because it didn't produce any output...

[10:58] <moritz_> so evalbot wrapped it in ( do { ... }).perl.priint

[10:59] <ruoso> mildew: knowhow Foo { ... }

[10:59] <p6eval> mildew: OUTPUT«unimplemented:  at src/AST/Helpers.pm line 108␤   AST::Helpers::XXX() called at src/VAST/term.pm line 48␤   VAST::term::emit_m0ld('VAST::term=HASH(0x91fbdc0)') called at src/VAST/noun.pm line 9␤    VAST::noun::emit_m0ld('VAST::noun=HASH(0xd1400b0)') called at src/AST/Helpers.pm line

[10:59] <p6eval> ..131...

[11:00] <ruoso> mildew: knowhow Foo {  };

[11:00] <moritz_> mildew: knowhow Foo { }; $*OUT.say("alive");

[11:00] <ruoso> mildew?

[11:01] <moritz_> does mildew invoke gcc?

[11:01] <p6eval> mildew: RESULT«unimplemented:  at src/AST/Helpers.pm line 108␤   AST::Helpers::XXX() called at src/VAST/noun.pm line 31␤   VAST::noun::emit_m0ld('VAST::noun=HASH(0xd1450f8)') called at src/AST/Helpers.pm line 131␤        AST::Helpers::EXPR('VAST::EXPR=HASH(0xd143028)') called at src/VAST/EXPR.pm

[11:01] <p6eval> ..line 8␤       V...

[11:01] <p6eval> mildew: OUTPUT«Could not find variable $*OUT in the lexical scope.␤»

[11:01] <moritz_> perl6: say "alive"

[11:01] <p6eval> elf 24784, pugs, rakudo 35016: OUTPUT«alive␤»

[11:01] <ruoso> it does...

[11:01] <ruoso> it compiles the m0ld code to C, then compiles the C code and run it

[11:02] <moritz_> that explains why it's so freakin' slow

[11:02] <ruoso> mildew: knowhow Foo { }; $OUT.print("Hello from mildew!");

[11:02] <ruoso> moritz_, that and STD

[11:02] <ruoso> std: knowhow Foo { }; $OUT.print("Hello from mildew!");

[11:02] *** alc left
[11:02] <moritz_> and it also explains why there might be problems: p6eval doesn't have write privileges by default

[11:02] <p6eval> mildew: OUTPUT«Hello from mildew!»

[11:02] <p6eval> std 24784: OUTPUT«00:06 84m␤»

[11:02] <moritz_> I should just fuck security, and change that

[11:02] <ruoso> it opens a tmpfile

[11:03] <moritz_> if it's in /tmp/, that's no problem

[11:03] <ruoso> yes, it is a tmpfile

[11:04] <ruoso> std: knowhow Foo { has $.bar}; Foo.bar = 1; $OUT.print(Foo.bar.FETCH);

[11:04] <ruoso> mildew: knowhow Foo { has $.bar}; Foo.bar = 1; $OUT.print(Foo.bar.FETCH);

[11:04] <p6eval> std 24784: OUTPUT«00:05 86m␤»

[11:04] <p6eval> mildew: OUTPUT«1»

[11:04] <ruoso> STD takes forever to parse that...

[11:05] *** |jedai| left
[11:05] <ruoso> btw... I'm aware that the code above wasn't supposed to work...

[11:05] *** |jedai| joined
[11:06] <ruoso> but I'm still unsure on how to implement return without it beign "is ref"

[11:06] <ruoso> mildew: knowhow Foo { has $.bar}; my $a = 1; Foo.bar := $a; my $a = 2; $OUT.print(Foo.bar.FETCH);

[11:06] <p6eval> mildew: OUTPUT«2»

[11:07] *** ChrisDavaz left
[11:14] <ruoso> mildew: knowhow Foo { has $.bar }; Foo.^dispatch('bar', (1,2,3));

[11:14] <p6eval> mildew: OUTPUT«Can't call method "emit" without a package or object reference at src/AST.pm line 247.␤»

[11:15] <ruoso> mildew: knowhow Foo { method bar { $OUT.print("Hello!") }; Foo.^dispatch('bar'); 

[11:15] <p6eval> mildew: OUTPUT«############# PARSE FAILED #############␤Unable to parse knowhow definition␤Unable to parse block; couldn't find final '}' at /tmp/m58i3kD7f1 line 1:␤------> [32mprint("Hello!") }; Foo.^dispatch('bar');[31m[0m␤    expecting whitespace␤»

[11:15] <ruoso> mildew: knowhow Foo { method bar { $OUT.print("Hello!") } }; Foo.^dispatch('bar'); 

[11:15] <p6eval> mildew: OUTPUT«Could not find method dispatch.␤»

[11:16] <ruoso> mildew: knowhow Foo { method bar { $OUT.print("Hello!") } }; Foo.^!how.dispatch(Foo, 'bar'); 

[11:16] *** ashizawa left
[11:16] <p6eval> mildew: OUTPUT«reading empty register 16␤»

[11:16] <ruoso> hm

[11:16] <ruoso> ok

[11:17] <ruoso> mildew: knowhow Foo { method bar { $OUT.print("Hello!") } }; Foo.^!how.dispatch(Foo, 'bar', 1); 

[11:17] <p6eval> mildew: RESULT«unimplemented:  at src/AST/Helpers.pm line 108␤   AST::Helpers::XXX() called at src/VAST/noun.pm line 31␤   VAST::noun::emit_m0ld('VAST::noun=HASH(0xd145310)') called at src/AST/Helpers.pm line 131␤        AST::Helpers::EXPR('VAST::EXPR=HASH(0xd144520)') called at src/VAST/EXPR.pm

[11:17] <p6eval> ..line 8␤       V...

[11:17] <ruoso> hmpf

[11:17] <ruoso> mildew: knowhow Foo { method bar { $OUT.print("Hello!") } }; Foo.^!how.dispatch(Foo, "bar", 1); 

[11:18] <p6eval> mildew: RESULT«unimplemented:  at src/AST/Helpers.pm line 108␤   AST::Helpers::XXX() called at src/VAST/noun.pm line 31␤   VAST::noun::emit_m0ld('VAST::noun=HASH(0xd145310)') called at src/AST/Helpers.pm line 131␤        AST::Helpers::EXPR('VAST::EXPR=HASH(0xd144520)') called at src/VAST/EXPR.pm

[11:18] <p6eval> ..line 8␤       V...

[11:18] <ruoso> meh...

[11:19] <moritz_> rakudo now passes 6170 tests on my machine ;)

[11:20] *** moritz_ sets mode: +oooo [particle] masak ruoso rhr

[11:21] <masak> I thought we might have passed 6k after that last flood of new tests ;)

[11:25] <masak> TimToady: what do you think about providing default format strings to .fmt() ? That way, it can be called without any arguments at all sometimes.

[11:25] <masak> rakudo: say [1,2,3].fmt('%s')

[11:25] <p6eval> rakudo 35017: OUTPUT«1 2 3␤»

[11:25] <Matt-W> moritz_: woooo!

[11:25] <masak> rakudo: say [1,2,3].fmt()

[11:25] <p6eval> rakudo 35017: OUTPUT«too few arguments passed (1) - 4 params expected␤current instr.: 'parrot;List;fmt' pc 4155 (src/classes/List.pir:322)␤»

[11:25] <avar> how many tests does mildew pass?

[11:26] <moritz_> masak: it doesn't make sense to call .fmt explicitly (saying "I want it in a particular format") without specifying a format

[11:26] <moritz_> masak: then you'd just stringify it

[11:26] <masak> hm.

[11:26] <masak> true.

[11:27] <moritz_> use.perl.org-- # down

[11:27] <masak> rakudo: say ~[1,2,3]

[11:27] <p6eval> rakudo 35017: OUTPUT«1 2 3␤»

[11:27] <masak> rakudo: say ~{1 => 2, 3 => 4}

[11:27] <p6eval> rakudo 35017: OUTPUT«1   2␤3      4␤␤»

[11:28] <masak> rakudo: say {1 => 2, 3 => 4}.fmt("%s\t%s")

[11:28] <p6eval> rakudo 35017: OUTPUT«1   2␤3      4␤»

[11:28] <masak> oy! what with the extra newline in the stringification case?

[11:28] * masak submits rakudobug

[11:29] <moritz_> where is the bug?

[11:29] <masak> moritz_: it might be considered a bug that the last two results differ.

[11:31] <moritz_> so what does "%s\t%s" mean on hash?

[11:31] <masak> moritz_: key, tab char, value

[11:31] <moritz_> masak: and how should they the separated?

[11:32] <masak> by newlines, that's the default.

[11:32] <masak> but the operative word is 'separated'

[11:32] <masak> there shouldn't be a final newline

[11:32] <masak> (apart from the one that 'say' outputs)

[11:35] <masak> moritz_: re use.prgl.org down: aye, fail. however, RT is fast today. :)

[11:35] <moritz_> .oO( <use.perl.org rt parrot-svn>.pick(2) )

[11:36] <masak> some kind of cosmic law, aye.

[11:37] <masak> is there someone we should share our righteous ire with about use.perl.org, btw? someone who holds the keys to the webapp.

[11:38] <moritz_> I don't know who runs it

[11:40] <moritz_> I have another blog post coming, "Perl 6 Tidings 2009-01", but the server is very slow atm, it might take another 30min until the post shows up

[11:40] <masak> moritz_++

[11:40] <moritz_> (actually it's perl6.vim that's slow - I'm re-generating some pages that use Text::VimColor + perl6.vim for hilighting)

[11:41] <masak> ooh, gotta try that.

[11:41] <moritz_> and as soon as I started to write about its slowness, it's finished ;-)

[11:41] <moritz_> http://perlgeek.de/blog-en/perl-6/tidings-2009-01.html

[11:42] <masak> what's the state of Perl 6 syntax highlighting for Emacs?

[11:43] <moritz_> it's probably "whatever the file in util/ looks like"

[11:43] <moritz_> aka cperl-mode.el

[11:44] <Matt-W> perl6.vim is very very slow :(

[11:44] <Matt-W> It's a shame

[11:45] <moritz_> hinrik improved it very much, but used so many look-arounds in the regexes that it became abyssimal slow

[11:45] <Matt-W> Does anybody know if it's because of fundamental things about Perl 6 and vim's language, or can it be overcome with a brain-meltingly clever rework?

[11:46] <moritz_> it probably needs some re-thinking

[11:46] <moritz_> Perl 6 needs predictive parsing; you can't emulate that with lookarounds

[11:49] <masak> moritz_: typo in tidings: s/my last updated/my laste update/

[11:50] <masak> uh, but 'last', not 'laste', of course.

[11:51] * masak is mentioned twice! o/

[11:51] <moritz_> thanks, fixed

[11:52] *** lisppaste3 joined
[11:53] <literal> Matt-W: it's very slow because of predictive parsing and some dynamic things like Q//, for example, Q allows a lot of adverbs to come after it, in any order, which can affect the highlighting. Handling that with regexes is very hard/slow

[11:53] <literal> perl6.vim currently only pays attention to the first adverb, and it still needs a lot of regexes to do it

[11:54] <Matt-W> so

[11:54] <Matt-W> ouch

[11:55] <literal> Perl 6 is exactly the kind of language that vim's highlighting was not designed for :P

[11:55] <Matt-W> clearly the solution is to get vim to use perl 6 as a scripting system for syntax highlighting :P

[11:55] <literal> you'd need to patch vim for that

[11:56] <Matt-W> yeah I didn't say it'd be easy

[11:56] <masak> it's not impossible either.

[11:57] <Matt-W> Nice posts on planet perl 6 lately by the way. It's all very encouraging. I need to polish off what I've been working on and blog about it I think

[11:58] <literal> Matt-W: Padre (http://padre.perlide.org/) uses STD.pm for highlighting, which is more accurate and (I think) faster. You might want to try it

[11:58] <Matt-W> it's my list of things to do

[11:58] <Matt-W> err

[11:58] <Matt-W> it's ON my list

[11:58] <Matt-W> the list obviously has other things on it

[11:59] <masak> I had the idea yesterday to write a blogging system that wraps use.perl.org to make it useable.

[11:59] *** Ardonel|sleep joined
[11:59] <Matt-W> in Perl 6?

[11:59] <masak> aye.

[11:59] <Matt-W> Excellent

[11:59] <masak> Grammars FTW.

[11:59] <Matt-W> I still haven't got my grammar thing working

[11:59] <Matt-W> need to poke that again

[12:00] <Matt-W> but first, some lunch

[12:00] <masak> Matt-W: do that. they do work very well. pmichaud++

[12:00] <Matt-W> yeah I think I'm just misunderstanding some concepts maybe

[12:00] <Matt-W> I need to sit down and read the appropriate synopsis very carefully

[12:00] <masak> Matt-W: S05.

[12:00] *** Ardonel|sleep is now known as Ardonel

[12:00] <Matt-W> and then once I've got it working, write something about it

[12:00] <masak> aye, lunch. that's a good idea.

[12:01] <masak> Matt-W: sounds excellent.

[12:01] <Matt-W> because there cannot be too much information about Perl 6's awesomeness out there

[12:01] <Matt-W> since a lot of people think it's vapourware still

[12:01] <masak> Matt-W: where do they get that idea?

[12:01] <Matt-W> I may not be able to understand bits of the compiler that I want to improve, but I can do advocacy :)

[12:01] <Matt-W> masak: because they're not paying attention, I suspect

[12:02] <masak> Matt-W: this whole vapourware discussion has made me more wary about saying things about projects that I don't pay attention to.

[12:02] <Matt-W> I've learned to say 'I think' and 'I believe' and 'I'm not sure' a lot more

[12:03] <masak> that helps a little, but not very much.

[12:03] <masak> better to say "I don't know" when appropriate.

[12:03] <Matt-W> yes

[12:03] <Matt-W> I say that a lot too

[12:03] <Matt-W> unless I'm talking about java, in which case it's 'I don't like' :)

[12:04] <Matt-W> anyway

[12:04] <Matt-W> lunch &

[12:04] * masak likes Java

[12:04] <masak> it's not good for everything, mind you. but all in all it's a quite pleasant language.

[12:05] <Matt-W> I might hate it less if it wasn't for the rule-breaking around String

[12:05] <masak> heh :)

[12:05] <Matt-W> why does String get overloaded operators but nobody else can have them?

[12:05] <masak> yah, unfair. :)

[12:05] <Matt-W> I'm of the C++ school of thought, where you make your user-defined types look like builtin ones

[12:05] <masak> you should use a JVM scripting language, that'll soothe you.

[12:05] <Matt-W> like Perl 6 does :)

[12:05] <Matt-W> I wish

[12:05] <Matt-W> I only do Java at work

[12:06] <Matt-W> where it's Java

[12:06] <Matt-W> no Groovy or anything like that :(

[12:06] <masak> too bad.

[12:06] <Matt-W> yeah and until recently it was java 1.1

[12:06] <Matt-W> too terrible to contemplate

[12:06] <Matt-W> really really really & now

[12:07] <masak> :)

[12:07] <masak> I won't tempt you with more replies.

[12:08] *** Whiteknight joined
[12:09] * ruoso later &

[12:12] *** ruoso left
[12:14] *** masak left
[12:16] *** Whiteknight left
[12:21] *** Whiteknight joined
[12:31] *** Ardonel is now known as Ardonel|work

[12:32] *** xinming_ joined
[12:41] *** wknight8111 joined
[12:41] *** Whiteknight left
[12:51] *** xinming left
[12:51] *** Lorn joined
[13:02] *** mbaro joined
[13:02] *** mbaro left
[13:14] *** xinming joined
[13:23] *** Chillance left
[13:27] *** vixey left
[13:32] *** xinming_ left
[13:53] *** masak joined
[14:15] *** mj41 left
[14:18] *** mbaro joined
[14:18] <mbaro> would it be right to call perl just a scripting language?

[14:18] <mbaro> or a programming language?

[14:18] <PerlJam> sure, whatever.

[14:19] <mbaro> just semantics?

[14:19] <masak> mbaro: aye.

[14:19] <masak> different people mean different things by 'scripting'.

[14:19] <PerlJam> There's no clear concensus on what a "scripting language" is.

[14:19] <avar> PerlJam: A language you write scripts in

[14:19] <Matt-W> Some people use 'scripting' to talk about anything that doesn't have a separate compilation step

[14:19] <Matt-W> avar: sure, but what's a script?

[14:19] <avar> :)

[14:20] <PerlJam> Some use is as a derogatory term, others use it simply as descriptive.

[14:20] <masak> mbaro: as long as you think that scripting is cool, feel free to call Perl a scripting language. :)

[14:20] <[particle]> perl 6 *can* have a separate compilation step

[14:20] <[particle]> depends on the implementation

[14:20] <masak> 'cept for eval.

[14:20] <mbaro> masak yeah 

[14:20] <mberends> 'There Is More Than One Way To Define It' - TIMTOWTDI

[14:20] <Matt-W> well, you'd still have to carry the compiler around

[14:20] <PerlJam> avar: Oh ... so actors can read and understand scripting languages quite well then  :)

[14:20] <mbaro> but perl6 is not quite scripting anymore

[14:21] <mbaro> more programmaable

[14:21] <masak> mbaro: "programmable"? :)

[14:21] <[particle]> is javascript "just a scripting language"? i use it (rhino) to write command-line utilities.

[14:21] <Matt-W> Perl 6 definitely goes more towards the unambiguous area of a programming language

[14:21] <PerlJam> "more programmable" is equally meaningless or vague as "scripting"

[14:21] <Matt-W> But I'm sure people will still use it as a scripting sort of tool, gluing other things together

[14:22] <Matt-W> While other people will still moan about line noise

[14:23] <mbaro> also perl scraped the topaz project way back.

[14:23] <mbaro> didn't they?

[14:23] <literal> manipulexity and whipuptitude!

[14:23] <PerlJam> like 10 years ago.

[14:23] <masak> it's OO noise now, which is kinda cool.

[14:23] <Matt-W> Perl 6 does look a lot cleaner

[14:23] <masak> mbaro: topaz is a long time ago. think Rakudo nowadays.

[14:24] <PerlJam> "scripting" in the common vernacular is more an attribute of an implementation rather than a language (at least that's how people use it)

[14:24] <Matt-W> not having brackets around if conditions is quite liberating, and the for @list -> $thing syntax is really nice

[14:24] <mbaro> ah

[14:24] <masak> Matt-W: that's because you haven't seen a lot of Perl 6 golf, I wager :P

[14:24] <Matt-W> masak: I'm thinking mostly of the Perl 6 I've written - I'm not interested in the edge cases where people are deliberately pushing things

[14:24] <PerlJam> I mean, I wrote a C interpreter a long time ago that doesn't have the separate compilation step.  Does that mean C is a "scripting language"? 

[14:24] <mbaro> masak: rakudo?

[14:24] <Matt-W> Because that's not a typical pattern

[14:24] * mbaro looks it up

[14:24] <masak> mbaro: ...which isn't C++, btw, but instead a whole set of tools on top of Pattor, which is written in C.

[14:25] <masak> Matt-W: ack.

[14:25] <masak> [particle]: how soon will I be able to send flags to my Perl 6 programs?

[14:25] <mbaro> and you're right perl 6 yes it is in fact whole oo addition in Perl is that way in my personal view.

[14:26] <masak> mbaro: that did not parse.

[14:26] <masak> but sure, yes.

[14:26] <[particle]> masak: hopefully before parrot 1.0

[14:26] <masak> [particle]: oki, nice.

[14:26] <masak> [particle]: thinking of faking it in Druid for the time being.

[14:26] <mbaro> its got a lot of oo now is what i meant

[14:26] <masak> mbaro: yes, we drenched it in OO :)

[14:27] <[particle]> druid?

[14:27] <Matt-W> roles are nice

[14:27] <masak> [particle]: http://github.com/masak/druid/

[14:27] <mbaro> "drenched"

[14:27] <mbaro> heh

[14:27] <masak> Perl 6 has more OO than OO itself!

[14:27] <Matt-W> hmm

[14:27] <Matt-W> no it doesn't

[14:28] <masak> it doesn't?

[14:28] <Matt-W> well you can still say close($filehandle);

[14:28] <masak> Matt-W: that's just syntactic sugar, honey.

[14:29] <Matt-W> sort of the diet version

[14:29] <Matt-W> since $filehandle.close; is shorter :)

[14:29] <masak> .oO( "cancer of the semicolon" joke )

[14:30] <Matt-W> yes! Let's get rid of semicolons! We'll use newlines and | as statement separators

[14:30] <rakudo_svn> r35037 | pmichaud++ | [rakudo]: spectest-progress.csv update: 279 files, 6170 passing, 0 failing

[14:30] <masak> Matt-W: write a pragma. :)

[14:31] <Matt-W> no if I did that I'd replace all the $ with £ and call it "use British;"

[14:31] <masak> Matt-W: I'd use that. :)

[14:31] <masak> or, more likely, an Euro version.

[14:31] <Matt-W> they'd be almost identical

[14:31] *** pbuetow joined
[14:40] *** jferrero joined
[14:42] *** vixey joined
[14:48] *** cspencer joined
[14:58] <masak> Perl 6 has a Set class, right?

[14:58] <masak> buubot: spack Set

[14:58] <[particle]> yes

[14:58] <buubot> masak: S02-bits.pod:12 S03-operators.pod:17 S12-objects.pod:1 S17-concurrency.pod:1 S19-commandline.pod:1 S29-functions.pod:1

[14:58] <PerlJam> spack?

[14:58] <masak> how do I create a Set object? what are the names of the common operators?

[14:59] <literal> synopsis pod ack (ack is a replacement for grep)

[14:59] <masak> PerlJam: 'spack', or 'spec-ack', acks the spec.

[14:59] <literal> or that

[14:59] <PerlJam> ah

[14:59] <[particle]> spack seems short for spec-ack

[14:59] <PerlJam> I was trying to acronym the "sp" part for some reason.

[15:00] <PerlJam> (but I guess "syn pod" is good enough for that too)

[15:00] <masak> sure, whatever makes you happy. :)

[15:01] <masak> back to the question. say I want the intersection between two sets. how do I write it in Perl 6?

[15:01] <masak> do I have to import a module to do intersections?

[15:03] *** Student joined
[15:05] *** eric256 joined
[15:10] *** mj41 joined
[15:10] <mberends> eric256, on perl6-examples is it ok if I add a /lib directory for modules and a /bin for scripts, both to contain utilities?

[15:12] <masak> perl6: Set.new

[15:13] <p6eval> pugs: OUTPUT«*** No such subroutine: "&Set"␤    at /tmp/Y9pqcOpKNT line 1, column 1 - line 2, column 1␤»

[15:13] <p6eval> ..rakudo 35038: RESULT«undef»

[15:13] <p6eval> ..elf 24784: RESULT«Set.new(!!!)␤»

[15:16] <PerlJam> rakudo:  my $a = Set.new; say $a;  my $b = SomeRandomThing.new;  say $b;

[15:16] <p6eval> rakudo 35041: RESULT«Use of uninitialized value␤␤Use of uninitialized value␤␤1»

[15:16] <masak> aye.

[15:17] <masak> no such thing as Set in Rakudo yet.

[15:17] <masak> and there are no hints in the Synopses on how to construct a Set object, or what methods/operators are defined on them.

[15:18] <PerlJam> yeah.  I didn't realize it was so forgiving about parsing and executing Foo.new where Foo hasn't been previously declared.

[15:18] <masak> so, uncharted terrotory.

[15:18] <masak> PerlJam: feels a bit dangerous, aye.

[15:19] <Matt-W> I would have thought Rakudo should complain if you try and make an object from a class it doesn't know...

[15:19] <PerlJam> there was some talk about Set on p6l language a while back, but that's all I remember about it.  Maybe there's some good proto-spec info in the p6l archives.

[15:19] <PerlJam> Matt-W: me too

[15:19] <masak> I'll go have a look.

[15:19] <Matt-W> Wonder how hard it would be to fix that

[15:20] *** alester joined
[15:21] <eric256> mberends: definitly

[15:22] <mberends> thanks, will get a round tuit in about 30 mins

[15:23] <masak> by the time user-defined operators are implemented in Rakudo, someone could propose a decent Set syntax/semantics just by writing a Set.pm module

[15:23] <Matt-W> That might be the way to go about it actually

[15:23] <Matt-W> It's not like Set needs to be core compiler code is it - it's just a core library module I guess

[15:24] <PerlJam> Matt-W: I think that's what ended the Set talk on p6l last time :)

[15:24] <masak> Matt-W: sure. except for the parts of Set that participate in smartmatching.

[15:25] <PerlJam> though I think someone was arguing that Set needs to be first-class citizenry because of their relation to databases

[15:25] <eric256> masak: i've been kidna surprised thats not more of how perl6 has been approached. get a base going then write the rest qas perl6 modules that eventualy get compiled into the core language....dunno probably some downside to that speed wise though

[15:25] * eric256 spills hot cocoa down the front of hisself

[15:25] <masak> eric256: Hofstadter's Law.

[15:26] <masak> that's the whole secret, I think.

[15:26] <PerlJam> eric256: that *is* how it's being approached actually.  :-)

[15:26] <Matt-W> masak: I would hope that smartmatching can be handled for additional types in libraries as and when... Set shouldn't have to do special things for it

[15:26] <masak> Matt-W: sure, sure. it's just that it's specced already :)

[15:27] <masak> that's why 'spack Set' turned up so many hits on S03.

[15:29] <Matt-W> yeah, but if Set can be a standard module rather than a bit of core language, and do smartmatching and all the other clever things we like, it bodes very well for the content of future CPAN :)

[15:29] <masak> I think this might be the p6l thread in question: http://www.nntp.perl.org/group/perl.perl6.language/2007/02/msg27171.html

[15:30] <PerlJam> could be

[15:31] *** xinming_ joined
[15:31] <eric256> Tene++

[15:31] *** jhorwitz joined
[15:32] <eric256> http://pleasedieinafire.net/cgi-bin/graphviz thats pretty cool.... i wonder if the wiki has something that could handle that. that would be perfect

[15:33] <masak> no, that's not the right thread. this is more recent, however, and asks how to write literals for Set, among other Perl 6 types: http://www.nntp.perl.org/group/perl.perl6.language/2008/12/msg30028.html

[15:34] *** ejs joined
[15:34] <pmichaud> ...can I ask for a moratorium on rakudobugs involving sub/method parameters?

[15:34] *** ejs left
[15:34] <pmichaud> (an informal one, at least)

[15:34] *** ejs joined
[15:34] <masak> pmichaud: hokay.

[15:34] <pmichaud> we know that parameters don't work in trunk, and it's just giving a lot more to clean up.

[15:34] *** alc joined
[15:35] <Matt-W> They don't? I hadn't noticed...

[15:35] <pmichaud> they work *if* you're only using scalars.

[15:35] <Matt-W> But I shall remember not to file a bug if I do

[15:35] <Matt-W> Aaaah

[15:35] <Matt-W> That makes sense then

[15:36] <pmichaud> but things like 'is rw' and 'is copy' and passing scalar arguments to array parameters are all known to have issues.

[15:36] *** Exodist joined
[15:36] <pmichaud> (they're largely fixed in the rvar branch, but it's still going to be a day or so at least before I can finish it and merge to trunk)

[15:36] <Matt-W> I'm sure I've passed an ordinary array without any trouble, but I wasn't doing anything particularly fancy

[15:39] *** alc left
[15:39] *** xinming left
[15:43] <masak> pmichaud: re a temporary ".perl" method: the only thing I can think of is a string of some sort. though that will surely disappoint anyone who tries to feed the result through an eval. on the gripping hand, I can't think of anything that won't.

[15:44] <jnthn> masak: What about a TheClass.new(...) which sets up attributes to their current values?

[15:45] <masak> jnthn: you know, that's actually not half bad. :)

[15:45] <masak> (why didn't I think of that?)

[15:47] <masak> it will work as long as the 'new' method isn't custom-made.

[15:47] <masak> which is goodenuf in most cases.

[15:47] *** ejs left
[15:48] <PerlJam> anyone defining their own new is probably doing something wrong anyway  :)

[15:49] <masak> PerlJam: I'm glad you put that smiley there at the end.

[15:49] <eric256> if they make their own new they should make there own .perl too ;)

[15:49] <jnthn> masak: It'll fall apart fro anonymous classes too.

[15:49] <masak> oh, right. yes.

[15:52] <eric256> is there a way in svn to tell which files in a directory you've updated?

[15:52] <Matt-W> svn status

[15:52] <Matt-W> or do you mean updated in the repo

[15:53] <eric256> yea i realized i phrased that wrong. lol. i mean which files i've updated ever. i tried svn log | grep eric256

[15:53] <Matt-W> ah

[15:53] <eric256> but i'm not sure its giving me the full log

[15:53] <Matt-W> trickier

[15:53] <masak> eric256: svn log -v

[15:53] <PerlJam> eric256: if you "svn up" prior to "svn log", it should give you the full log.

[15:54] <eric256> thanks that worked. 

[15:54] <eric256> ohh but it only gives me revision numbers not which files. hmph ;)

[15:54] *** dwhipp joined
[15:55] <masak> eric256: svn log -v

[15:55] <PerlJam> -v will tell you which files

[15:55] <PerlJam> (your grep will ignore those lines however)

[15:55] *** xinming joined
[15:56] <eric256> yea i'm dumping it into a text file and scanning. looking for anything i did in pugs examples that would be good candidates to move ;)

[15:56] <eric256> that worked perfect. thanks

[15:58] <masak> eric256: svn log | perl -ne 'print if /\| eric256 \|/ ... /----/'

[15:58] <masak> oh, and '-v' on the 'svn log', too.

[16:02] *** xinming_ left
[16:03] *** plainhao joined
[16:12] <pugs_svn> r24785 | eric256++ | Updating [examples/rules/basic.pl] towards a working condition

[16:19] *** stephens joined
[16:19] *** xinming_ joined
[16:19] *** hercynium joined
[16:20] <[particle]> can you guarantee TheClass will have a new method that is the constructor?

[16:20] <[particle]> masak?

[16:21] <masak> [particle]: no. you can't.

[16:21] <[particle]> better to inspect the class and ask it

[16:21] <masak> [particle]: note the words "temporary .perl" :)

[16:21] <[particle]> (if that's possible)

[16:21] <jnthn> [particle]: It'd inherit a new from Object, no?

[16:22] <jnthn> So I think it's always have one - it's just what it'd do...

[16:22] <masak> right.

[16:23] <[particle]> ok, then, but i'm not sure how you stop it from becoming permanent :)

[16:24] <eric256> hmmm looking at my own code from 3 years ago is like looking at a strangers code...odd ;)

[16:25] <PerlJam> eric256: It's always that way.

[16:25] <PerlJam> eric256: that's why you should strive to be kind to the future strangers who may be looking at your code :)

[16:26] <masak> not only for that reason.

[16:27] *** alc joined
[16:28] *** masak left
[16:28] *** cspencer left
[16:29] <eric256> Matches don't have .perl yet right?

[16:32] *** lambdabot left
[16:32] *** |jedai| left
[16:32] *** |jedai| joined
[16:34] *** lambdabot joined
[16:36] *** justatheory joined
[16:37] *** Student left
[16:37] *** xinming left
[16:44] *** mbaro left
[16:45] <eric256> i took a first pass at adding to the glossary.. can someone check and make sure i didn't do anything stupid and suggest entries for some of the ones i left blank

[16:45] <eric256> http://www.perlfoundation.org/perl6/index.cgi?action=revision_compare&page_name=glossary_of_perl_6_terms_and_jargon&mode=source&Button=Compare+Revisions&new_revision_id=20090106164432&old_revision_id=20080212211028

[16:52] *** icwiener joined
[16:57] *** jferrero left
[17:00] *** plainhao left
[17:01] *** icwiener left
[17:03] *** plainhao joined
[17:05] *** Khisanth left
[17:06] *** Khisanth joined
[17:07] *** pdcawley joined
[17:07] *** Khisanth left
[17:07] *** xinming joined
[17:11] *** donaldh left
[17:12] *** azawawi joined
[17:12] <azawawi> hi *

[17:14] *** pjcj joined
[17:14] <azawawi> moritz_: ping

[17:20] *** xinming_ left
[17:21] *** justatheory left
[17:22] *** ruoso joined
[17:22] <mberends> perl6 -e'say @*ARGS;' a b c # rakudo r35051 says nothing, should say abc

[17:23] <mberends> can anyone verify this?

[17:23] <azawawi> i think those special variables are still not implemented last time i checked

[17:24] <azawawi> rakudo: say $*OS;

[17:24] <p6eval> rakudo 35051: OUTPUT«linux␤»

[17:24] <azawawi> rakudo: say $?OS;

[17:24] <p6eval> rakudo 35051: OUTPUT«Lexical '$?OS' not found␤current instr.: '_block14' pc 46 (EVAL_12:36)␤»

[17:24] <azawawi> rakudo: say @ARGV;

[17:24] <p6eval> rakudo 35051: OUTPUT«Scope not found for PAST::Var '@ARGV'␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[17:24] <PerlJam> azawawi: it's not ARGV anymore

[17:25] <azawawi> oh ;-)

[17:25] <azawawi> hi PerlJam

[17:25] <mberends> rakudo: say @*ARGS

[17:25] <p6eval> rakudo 35051: OUTPUT«␤»

[17:27] <mberends> rakudo: say %*VM<config>

[17:27] <p6eval> rakudo 35051: OUTPUT«mandir      /usr/local/mani_sysin   i_unistd        defineHAS_READLINE      1-Wchar-subscripts      1i_sysioctl     defineosname    linux-Wwrite-strings    1jitosname      LINUXPATCH      2jit_i386       fcomipi_sysndir i_systime       definebigendian 0oldincludedir 

[17:27] <p6eval> ../usr/includeinclude_dir /usr/local/includei_stddef      defineVERSION   0.8....

[17:29] <mberends> azawawi, @*ARGS was available a few weeks ago, worked for me quite well

[17:29] <azawawi> then great ;-)

[17:29] <azawawi> i havent used rakudo for a while

[17:29] *** hercynium left
[17:29] *** Student joined
[17:30] <azawawi> can rakudo parse STD.pm?

[17:30] <PerlJam> azawawi: not quite yet AFAIK

[17:31] <PerlJam> @*ARGS doesn't seem to work right from within -e scripts.

[17:31] <lambdabot> Unknown command, try @list

[17:31] <PerlJam> It works find in stand alone programs though

[17:32] <mberends> thanks, that fits the symptoms. it used to work in -e, so something broke

[17:33] <ruoso> I wonder if commit messages on spec changes could include the commit message in the subject line...

[17:35] *** Khisanth joined
[17:36] *** GitHub62 joined
[17:36] <GitHub62> perl6-examples: 3mberends 07master0 SHA1-9adc812

[17:36] <GitHub62> added /bin and /lib, prove script and Test::Harness

[17:36] <GitHub62> http://is.gd/eHQe

[17:36] <GitHub62> perl6-examples: 3mberends 07master0 SHA1-a6434cd

[17:36] <GitHub62> added documentation to prove and Test::Harness

[17:36] <GitHub62> http://is.gd/eHQi

[17:36] *** GitHub62 left
[17:38] <ruoso> it would also be nice if GitHub message was shorter

[17:39] <mberends> yes, sorry about that

[17:40] *** hercynium joined
[17:48] *** alc left
[17:48] <eric256> ruoso: definitly ;)

[17:49] <eric256> github can send the message to a URL, so i could make some sort of page that recieved the message and then posted a message to irc.. or something

[17:50] *** OuLouFu left
[17:50] *** orafu joined
[17:50] <ruoso> moritz_, I've just realized we would need to return something if the capture is empty (no invocant and no positional arguments)

[17:50] <ruoso> and there's also

[17:50] <ruoso> return a => 1

[17:52] <ruoso> perl6: sub foo { return a => 1 }; my $a = foo(); say $a.perl;

[17:52] <p6eval> elf 24785: OUTPUT«Pair.new(!!!)␤»

[17:52] <p6eval> ..pugs: OUTPUT«\\("a", 1)␤»

[17:52] <p6eval> ..rakudo 35054: OUTPUT«undef␤»

[17:54] <ruoso> should it be Pair or Hash?

[17:54] <ruoso> perl6: sub foo { return a => 1, b => 2 }; my $a = foo(); say $a.perl;

[17:54] <p6eval> pugs: OUTPUT«\\(\("a", 1), \("b", 2))␤»

[17:54] <p6eval> ..elf 24785: OUTPUT«Pair.new(!!!)␤»

[17:54] <p6eval> ..rakudo 35054: OUTPUT«undef␤»

[17:54] <ruoso> this should be a hash, for sure...

[17:58] <ruoso> perl6: sub foo { return 1, 2, 3, a => 1, b => 2 }; my $a = foo(); say $a.perl;

[17:58] <p6eval> elf 24785: OUTPUT«Pair.new(!!!)␤»

[17:58] <p6eval> ..rakudo 35054: OUTPUT«too many arguments passed (7) - at most 1 params expected␤current instr.: 'return' pc 14596 (src/builtins/control.pir:29)␤»

[17:58] <p6eval> ..pugs: OUTPUT«\\(1, 2, 3, \("a", 1), \("b", 2))␤»

[18:00] <ruoso> I think we need a dual container

[18:03] *** GitHub63 joined
[18:03] <GitHub63> perl6-examples: 3mberends 07master0 SHA1-57d23fe

[18:03] <GitHub63> added HTTP_Daemon.pm to /lib, a very simple web server

[18:03] <GitHub63> http://is.gd/eHY1

[18:03] *** GitHub63 left
[18:04] <mberends> sorry about the noise again

[18:04] <ruoso> mberends, not a problem... 

[18:04] <ruoso> it would just be nicer if it was shorter... but it's not really a burden

[18:06] <mberends> yes, a one liner would be ideal

[18:10] <eric256> could the svn bot be setup to monitor a twitter feed? i could have it send commit messages to twitter and the svn bot could pick them up

[18:10] <eric256> i'd even be happy to update the svnbot if the source is accessible

[18:12] <eric256> is it svnbot in rakudo/pugs/examples/network?

[18:12] <eric256> oh never mind

[18:12] <eric256> thats a perl6 one

[18:17] *** Psyche^ joined
[18:19] <eric256> i set it up at https://twitter.com/perl6examples

[18:23] <mberends> cool. does that mean #perl6 will not get any notification at all?

[18:24] <eric256> no i left perl6 on till i can contact whoever runs that bot ;)

[18:24] <eric256> shouldn't be too hard to get it to catch twitter updates along with svn updates. dunno

[18:24] *** barney joined
[18:25] <eric256> http://github.com/guides/post-receive-hooks it can send JSON data to a cgi app

[18:33] * ruoso later &

[18:33] *** ruoso left
[18:34] *** Patterner left
[18:34] *** Psyche^ is now known as Patterner

[18:34] *** aindilis joined
[18:35] *** stephens left
[18:36] *** stephens joined
[18:36] *** maerzhase1 joined
[18:48] *** hudnix left
[18:48] * eric256 attemts to setup CPAN on feather to install in his own directory...hmm

[18:48] <[particle]> eric: minicpan should do, i'd imagine

[18:49] <[particle]> oh, nm

[18:49] <[particle]> i misparsed that

[18:49] *** maerzhase left
[18:51] *** hudnix joined
[19:03] *** maerzhase1 left
[19:19] *** iblechbot left
[19:20] *** |jedai| left
[19:20] *** |jedai| joined
[19:28] *** athenot joined
[19:39] *** buubot left
[19:39] *** buubot joined
[19:44] *** maerzhase joined
[19:49] *** pdcawley left
[20:01] *** ruoso joined
[20:03] * ruoso fears the path things are taking in the Capture discussion...

[20:09] *** rindolf joined
[20:19] *** barney left
[20:22] <eric256> where is this capture discussion happening?

[20:22] <moritz_> eric256: on p6l

[20:22] <eric256> ahh

[20:22] <eric256> hey moritz_ do you run the bots?

[20:23] <moritz_> eric256: most of them

[20:24] <ruoso> eric256, "returning one or several values..." is the subject of the thread

[20:24] *** |jedai| left
[20:25] *** |jedai| joined
[20:26] <PerlJam> ruoso: you fear, yet you contribute to the fear of others  :)

[20:26] <ruoso> heh

[20:26] <ruoso> but I think we're pretty much preparing the capture spec

[20:27] <PerlJam> maybe

[20:27] <PerlJam> I'm waiting for one of the laterl-thinking folks to wake up and propose something that's strange and beautiful and right.

[20:27] <PerlJam> s/laterl/lateral/

[20:29] <ruoso> although there are no many possibilities

[20:29] * ruoso .oO(the last sentence doesn't look right)

[20:45] <eric256> captures sound very scary ;)

[20:45] <PerlJam> they aren't really.

[20:45] <PerlJam> Interactions with them are hard to pin down though

[20:46] <eric256> (1,2,3, a=>4, b=>5), not being a list of three Ints and two Pairs is odd. though i can see the desire to want to access the pairs by name

[20:46] <eric256> but then what would something like: return (1,2,3,a=>4,a=>5); do?

[20:47] <moritz_> eric256: a Capture is a collection of things that can be passed to subroutine or method

[20:48] <ruoso> eric256, return (1,2,3,a=>4,b=>5) contains a single positional argument

[20:48] <PerlJam> eric256: wait, that *is* a list of 3 Ints and two Pairs  (You haven't made it a Capture yet)

[20:48] <ruoso> return(1,2,3,a=>4,b=>5) is something else

[20:48] <ruoso> as well as

[20:48] <ruoso> return 1,2,3,a=>4,b=>5

[20:49] *** |jedai| left
[20:50] <ruoso> you can also use

[20:50] *** |jedai| joined
[20:50] *** justatheory joined
[20:50] <ruoso> (1,2,3,(a=>4),(b=>5))

[20:50] *** donaldh joined
[20:50] <ruoso> to make it a list of three ints and 2 pairs

[20:51] * ruoso later &

[20:52] *** ruoso left
[20:52] <eric256> like i said, they sound scary ;)

[20:52] <dwhipp> A more pedantic description of a Capture might be that it's the input to a binding operation; invocation of subs/methods are two examples of this, but so is ":=". Not sure about "="

[20:54] <moritz_> rakudo: say NaN ~~ NaN

[20:54] <p6eval> rakudo 35079: OUTPUT«0␤»

[20:54] <pugs_svn> r24786 | moritz++ | [t/spec] test for NaN ~~ NaN

[20:54] *** c9s_ joined
[20:54] <PerlJam> eric256: a Capture is just a container that can simultaneously hold items of different types.   This is very similar to typeglobs in perl 5; thus you have $a, @a, and %a as separate distinct things.

[20:55] <eric256> but no clear way to define which parts of your capture are which of those values

[20:55] <PerlJam> eric256: Captures just make that a bit more explicit and  they're objects in their own right that you can pass around and do various things with.

[20:55] <eric256> why not return Scalar=>5, Array=>(1..10), Hash=>( a=>1, b=>2); ?

[20:55] <PerlJam> eric256: have you read the discussion on p6l?

[20:56] <eric256> the most recent one yes

[20:56] <dwhipp> is "Capture" a role or a class?

[20:57] <PerlJam> I think of it as a class.

[20:57] <PerlJam> and the counterpart to Signature.

[20:57] <PerlJam> and the basis for Match objects

[20:57] <eric256> PerlJam: it seems to highlight exactly how confusing the return portion is. it sounds like a case where explicitly defining it is more DWIM than counting on magic 

[20:58] <eric256> but thats a pretty uneducated 2cents

[21:00] <dwhipp> I'm thinking that this really shouldn't be a discussion of the semantics of "return" statements, but of the semantics of assignment.

[21:00] * eric256 goes to read the syn and edumacate hisself

[21:01] <eric256> buubot: spack capture

[21:01] <buubot> eric256: S02-bits.pod:6 S03-operators.pod:17 S04-control.pod:7 S05-regex.pod:80 S06-routines.pod:15 S07-iterators.pod:1 S09-data.pod:1 S12-objects.pod:2 S13-overloading.pod:2 S29-functions.pod:3

[21:01] <PerlJam> dwhipp: in what little I've thought about it, I tend to agree.

[21:04] <dwhipp> @a = 1,2,3, b=>4  Vs \( @a, %b ) = 1,2,3, b=>4   --- the backslash is in the wrong place Vs current spec, though

[21:04] <lambdabot> Maybe you meant: activity activity-full admin all-dicts arr ask . ? @ v

[21:06] <moritz_> rakudo: class A { has @.a; method b { @.a = <1 2 3> }; }; A.new.b; say "alive";

[21:06] <p6eval> rakudo 35079: OUTPUT«Cannot assign to readonly variable.␤current instr.: 'die' pc 14950 (src/builtins/control.pir:204)␤»

[21:08] <eric256> am i missing the clear definition of captures in the syns? a lot of little bits, but it feels like i'm missing the beg section on captures

[21:09] <PerlJam> eric256: which have you read?

[21:09] <dwhipp> http://svn.pugscode.org/pugs/docs/Perl6/FAQ/Capture.pod

[21:10] *** preflex joined
[21:11] *** c9s left
[21:14] <pugs_svn> r24787 | moritz++ | [t/spec] tests for writing to array and hash attributes

[21:19] <pugs_svn> r24788 | moritz++ | [t/spec] update a fudge message

[21:21] *** mbaro joined
[21:33] *** pbuetow left
[21:34] *** rindolf left
[21:35] *** |jedai| left
[21:36] *** pdcawley joined
[21:36] *** |jedai| joined
[21:42] <Matt-W> moritz_: much ++ for adding that test, thanks

[21:46] *** mbaro left
[21:59] *** |jedai| left
[22:00] *** |jedai| joined
[22:08] *** eternaleye joined
[22:08] *** [particle] left
[22:09] *** [particle] joined
[22:10] *** perl6examples joined
[22:12] <eric256> there we go, one liner...now to figure out the (notice) thingy lol

[22:15] *** perl6examples left
[22:15] *** perl6examples joined
[22:16] <perl6examples> [perl6-examples] http://is.gd/eJ7i Eric Hodges - Modify the text some

[22:16] <perl6examples> [perl6-examples] http://is.gd/eJ7f Eric Hodges - Privmsg instead of notice

[22:16] <perl6examples> [perl6-examples] http://is.gd/eJ7i Eric Hodges - Modify the text some

[22:17] <eric256> ohh dear

[22:17] <mberends> wassup eric256?

[22:17] <eric256> it sent the same tweet twice ;) lol

[22:18] <eric256> could call it tweetbot lol

[22:18] <mberends> oh, a re-tweeter

[22:19] <eric256> yep, could pull in the perl6 or rakudo tweets as well...dunno, i'm not big on twitter but this is a handy way for github and my bot to converse ;)

[22:19] *** perl6examples left
[22:19] *** perl6examples joined
[22:20] *** Su-Shee joined
[22:20] <Su-Shee> Hi.

[22:23] <perl6examples> Tweet!

[22:24] *** |jedai| left
[22:24] *** |jedai| joined
[22:25] <perl6examples> [perl6-examples] http://is.gd/eJ9K Eric Hodges - Moved add_collaborator into bin folder

[22:26] <mberends> your tweetbot is well behaved now

[22:28] <eric256> hurrah

[22:28] <eric256> any other good perl6 twitterers? lol

[22:28] *** spx2 joined
[22:29] <spx2> I have a server and it has a dynamic ip connection to the internet,it's changing IP every time it connects,how do I make a dns for it in these conditions ?

[22:32] <[particle]> http://dyndns.org/

[22:34] <Su-Shee> would someone mind explaining to me how perl6 is doing @INC? I have parrot stuff in one hand, perl 6 build from parrot on the other and I just don't get it.

[22:35] <pmichaud> by default @INC is just '.'

[22:35] *** Lorn left
[22:35] <pmichaud> you can add more directories to that list, in which case Rakudo will search those additional directories for any modules you might 'use'

[22:35] *** Limbic_Region joined
[22:35] <pmichaud> that's about it.

[22:37] <Su-Shee> oh, _that_ difficult... ;) ok.

[22:38] <Su-Shee> if I want to use parrots SQLite3, I don't have to do some additional magic to load the PIR files behind the .pm files, just adding the directory to @INC?

[22:39] * eric256 hacks together a DNS protocol using Twitter, lmao

[22:43] <mberends> pmichaud, do you know of an RT concerning perl6 -e not populating @*ARGS from the command line? searching rt.perl.org draws a blank.

[22:45] <pmichaud> mberends: I don't know of one, no. 

[22:45] <pmichaud> that sounds like a bug.

[22:46] *** |jedai| left
[22:46] <pmichaud> Su-Shee: I don't know how SQLite3 is set up.  However, 'use' looks for a .pbc/.pir before loading the .pm.

[22:46] *** |jedai| joined
[22:47] <Su-Shee> pmichaud: I've just tried and it's use-ed without complaining. seem to work

[22:47] <Su-Shee> seems.

[22:48] *** xinming_ joined
[22:51] *** plainhao left
[22:54] *** xinming left
[22:58] *** Student left
[23:02] *** donaldh left
[23:05] <eric256> couldn't http://use.perl.org/~masak/journal/38212 that be written as a grammar?

[23:06] <eric256> a grammar to find all lines after a certain line and then only capture those lines that meet a certain pattern?

[23:06] <eric256> grammars are smarter than me, especialy when they don't have a .perl yet ;)

[23:07] <eric256> well Matches i guess...

[23:09] <PerlJam> yes, that could have been grammarized.

[23:12] *** Su-Shee left
[23:14] <eric256> could you help me out? i was trying to smart small with a rule that would match either rule item { =item (.*)  or .* }; but i don't think thats right

[23:15] *** spx2_ joined
[23:27] *** hercynium left
[23:28] <eric256> alright i seem to have it working. but getting the matched value is eluding me...hmm

[23:30] *** pdcawley left
[23:30] *** Tene is now known as ]]]]]]]]]]]]tene

[23:31] <mberends> eric256, show your rule, maybe I can help

[23:31] <pasteling> "eric256" at 72.1.122.62 pasted "S29 Functions parsing" (16 lines, 309B) at http://sial.org/pbot/34260

[23:31] *** spx2 left
[23:32] *** ]]]]]]]]]]]]tene is now known as Tene

[23:32] <eric256> i've tried $match[0] $match.[0] $match<item_line> $match.<item_line>....it just keeps coming back undef

[23:33] *** spx2_ left
[23:34] *** Exodist left
[23:34] * mberends preparing to run the S29 script

[23:40] *** maerzhase left
[23:40] <mberends> the pattern is multiline, but the data a single line. that can never match.

[23:41] <mberends> there are two ways to go: all multiline, or all single line.

[23:42] <mberends> I usually prefer single line, it's the Unix pipes and streams concept

[23:43] <mberends> but then you have to remember state from previous lines to control what to match on subsequent lines

[23:44] <mberends> a multiline solution would maintain a sliding window over a range of lines and pattern match over those concatenated. probably simpler in this case.

[23:45] <mberends> eric256, do you want to do it or shall I do it in the morning?

[23:48] *** eternaleye left
[23:49] *** Student joined
[23:51] <mberends> sorry, looking closer I see that a single line pattern is all that is needed

[23:57] <pasteling> "mberends" at 78.33.161.227 pasted "S29 items grammar solution for eric256" (17 lines, 341B) at http://sial.org/pbot/34261

