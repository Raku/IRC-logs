[00:00] <eiro> wow ... 'll try to find it ... somewhere in the house 

[00:00] <eiro> thanks a lot 

[00:00] <eiro> 'night all 

[00:00] <dryden> nice

[00:00] <dryden> good night erio

[00:01] <dryden> if i might ask sjohnson, where do you work?

[00:02] <sjohnson> small software company in BC Canada

[00:02] <arnsholt> eiro: In my copy of the Camel book, page 197 "The Little Engine That /Could(n't)?/"

[00:02] <sjohnson> i try to use perl as often as i can for work tasks

[00:02] <arnsholt> phenny: tell eiro In my copy of the Camel book, page 197 "The Little Engine That /Could(n't)?/" for backtracking

[00:02] <phenny> arnsholt: I'll pass that on when eiro is around.

[00:04] <dryden> that is sweet, i'm glad you're working in the field you seem to enjoy. us programming enthusiasts are lucky in the sense that our hobby can also be our profession...not everyone has that luxury.

[00:05] <sjohnson> well my job is alright, not a dream job really as I mostly do PHP and javascript which i hate

[00:05] <sjohnson> but better than doing manual labour as i used to do

[00:06] <dryden> i suppose it is better than manual labor, which is sort of what my parents do.

[00:07] <arnsholt> Speaking of JS, I'm a bit ambivalent. It's a cool language, but there are some icky parts

[00:07] <arnsholt> Like the optional ;

[00:07] <dryden> I get the feeling that there isn't a lot of perl in the so called "industry", which sort of makes me sad. My "dream job" would be to work for Google, and sadly they heavily use Python.

[00:11] <dryden> Gah...Python.

[00:12] *** jferrero left
[00:12] <araujo> http://i.imgur.com/1gF1j.jpg

[00:13] <dryden> haha

[00:14] <sjohnson> heh great photo

[00:14] <arnsholt> dryden: I think the important thing to remember WRT Python is that there's a difference in philosophy

[00:15] <sjohnson> darn

[00:15] <sjohnson> was hoping perl was on this chart

[00:16] <arnsholt> I especially liked the Lisp fan row. Describes my Lisp fan friend quite well =D

[00:16] <dryden> yeah me too. and yeah..i arnsholt, i understand they have a different philosophy and i suppose it works fairly well, i'm still not a fan.

[00:17] <sjohnson> i looked at Python code, and didn't really care for it too much

[00:17] <sjohnson> perl makes me feel like i can program with both sides of the brain

[00:17] * colomon can't see the graphic because most of his screen is currently dedicated to fiddle videos for his little boy...  :)

[00:17] <sjohnson> kind of like a lightning storm of creativity in my brain.  that's how i feel anyway

[00:17] <arnsholt> The indenting thing drives me spare for some reason. But the main problem is that it's not as easy to do list stuff with Python

[00:18] <arnsholt> Things like map and grep are a lot more accessible in Perl

[00:18] <arnsholt> sjohnson: Very nice description. Fits me rather well too, I fell

[00:18] <dryden> i really dislike their standard api, it's very ridiculous.

[00:18] <sjohnson> i would hate to have to import re in python everytime i got fancy with teh r3gexz 

[00:19] <sjohnson> i do like their standard libs though, kinda cool that you dont have to rely on CPAN for a number of some common tasks

[00:19] <arnsholt> Yeah. And it's possible to use it without going completely insane

[00:19] <dryden> there's no string.length() in python..why!? there's a static len() function, that's just silly.

[00:19] <arnsholt> For example I had to interface with a C lib a bit back, which only had Python and Ruby bindings

[00:20] <arnsholt> Easier to use Python than implement the Perl bindings (even though I'm considering of doing the Perl bindings no that I'm done with the project =)

[00:20] <arnsholt> dryden: Yeah, there are some wrinkles in the language

[00:21] <arnsholt> But then again, Perl has a couple of warts too =)

[00:21] <colomon> dryden: we realized the same thing with perl 6's eval unction last week (no method version, which felt inconsistent) and within about thirty minutes we'd added it to Rakudo.  :)

[00:21] <colomon> s/untion/function/

[00:21] <sjohnson> araujo: im going to redo that to include Perl heh

[00:21] <araujo> sjohnson, hehe

[00:29] *** payload joined
[00:32] *** cognominal left
[00:36] <dryden> i'm sorry i was away, my girlfriend called. but that's awesome. you guys quick to eliminate minor language inconsistencies.

[00:36] <dryden> are* quick

[00:38] <dryden> it's been awfully fun, you guys are awesome. I should get going. bye everyone.

[00:38] *** dryden left
[00:38] <colomon> dryden: actually, the fun thing about it was it was just a couple of us normal guys here, not the high powered language designers or implementors.

[00:40] <colomon> Perl 6 has a very relaxed approach to making changes.  :)

[00:41] <colomon> gotta run bathe my boy.  back later.

[00:41] <sjohnson> cya

[00:50] * arnsholt smacks forehead

[00:50] <arnsholt> I was wondering what the attribute $last was for in the Match object in nqp-rx

[00:51] <arnsholt> It wasn't $last. It was $!ast, which makes a lot more sense

[00:54] *** ihrd1 joined
[00:54] *** ihrd1 left
[01:07] *** justatheory joined
[01:11] *** Baggio_ joined
[01:19] *** Chillance left
[01:27] *** thowe left
[01:28] <eiro> arnsholt, the "perl6 book" (page 30) explains :, :ratchet and token nicely ! 

[01:28] <phenny> eiro: 00:02Z <arnsholt> tell eiro In my copy of the Camel book, page 197 "The Little Engine That /Could(n't)?/" for backtracking

[01:29] <eiro> (i couldn't sleep without knowing) 

[01:29] <arnsholt> Know the feeling =)

[01:29] <arnsholt> (And I really should get around to reading the Perl 6 book)

[01:30] <eiro> this is a very good book (i just started)

[01:35] <eiro> so now i can sleep :-) cya all

[01:37] *** alester joined
[01:37] *** alester left
[01:40] *** agentzh joined
[01:48] *** zykes- joined
[02:16] <sjohnson> araujo: OT - do you know much about 4chan pics?

[02:16] <sjohnson> having a real tough time finding the last piece for the language chart Perl puzzle

[02:17] *** xinming_ joined
[02:17] <sjohnson> its the pic with the guy leaning back in his chair with the white hair and moustache

[02:26] <zykes-> when's perl6 gonan be released ?

[02:27] <rjbs> You can download it right now.

[02:27] <zykes-> yeh, but what modules are available ?

[02:27] <zykes-> how "ready" is it contra perl5

[02:27] <rjbs> I wouldn't use it for performing my job.

[02:28] <zykes-> i don't get the whole, pugs, rakudo thing ?

[02:28] <rjbs> Same as gcc, icc, scc, etc.

[02:28] <rjbs> Different implementations have different strengths.  Also, the developers of each implementation tend to work on different parts of the langauge, which strengthens the design.

[02:29] <rjbs> Sprixel, for example, is written in JavaScript, which means you may end up being able to run Perl 6 in the browser.

[02:29] *** xinming left
[02:29] <zykes-> how many different compilers are ther ?

[02:29] <zykes-> for perl6 i mean

[02:30] <rjbs> http://perl6.org/compilers/ <-- might not be complete

[02:30] <diakopter> rjbs: 'cept sprixel is now sprixel#, in C#... but it may get ported back to javascript too

[02:30] <rjbs> diakopter: time to tell soembody to update /compilers :)

[02:30] <diakopter> meh.

[02:30] <diakopter> no need for hype on vapor/darkware

[02:30] <rjbs> nod

[02:31] *** JimmyZ joined
[02:31] <zykes-> so to run perl6 from the commandline

[02:31] * diakopter <-- king of throwaway code and rewriting

[02:31] <zykes-> rakudo is the correct thing ?

[02:31] <diakopter> zykes-: sure, for now

[02:31] <rjbs> yeah, I think it's almost certainly the most complete implementation atm.

[02:32] <rjbs> (and it's sort of the most mainline one, for various historical and other reasons)

[02:32] <zykes-> heh, when's perl6 gonna me "mature" or done ?

[02:32] <diakopter> could be never

[02:32] <diakopter> :)

[02:32] <diakopter> but rakudo* in April is expected to be stable-ish

[02:33] <zykes-> heh, doesn't seem to be any use in writing perl6 code atm then

[02:33] <rjbs> Why not?

[02:33] <rjbs> It's fun.

[02:33] <diakopter> and a decent subset of the Synopses

[02:33] <rjbs> It's educational.

[02:33] <zykes-> well is there modules avaiable for it now then ?

[02:33] <diakopter> zykes-: it's a great language in which to learn more programming techniques

[02:33] <rjbs> zykes-: Sure, but "modules" isn't a very useful measure.

[02:33] <zykes-> i'm kind of addicted to POE atm

[02:33] <zykes-> how come rjbs ?

[02:34] <rjbs> because what if there were 912031238 modules and each one was lame and useless?

[02:34] <rjbs> There is no database module.  There is no event-driven programming library as far as I know.  There is no crypto.

[02:34] <rjbs> (I think.)

[02:34] <rjbs> but there are HTTP and HTML libraries

[02:34] <rjbs> and other stuff

[02:35] <zykes-> where can one see the "available" modules?

[02:35] <diakopter> well, pugs has all of those, since pugs is linked to libperl (5)

[02:35] <zykes-> pugs is yet another perl6 compiler ?

[02:35] <diakopter> the first major/large implementation

[02:35] <diakopter> written largely in Haskell

[02:36] <rjbs> zykes-: Yes, but it's mostly dormant and outdated.

[02:36] <rjbs> but it was very, very influential

[02:37] <diakopter> imho the "use v5; { }; use v6" capability is extremely important, but many around here disagree with me on that.

[02:37] <zykes-> well i kind of like the modules, so i guess i need to wait then until stuff get's written.

[02:37] <rjbs> Sure, suit yourself!  We'll still be here.

[02:37] <diakopter> :)

[02:38] <rjbs> Perl 6's core functionality is much greater than Perl 5's, so learning the core language can help you learn a lot of interesting programming concepts, fwiw.

[02:38] <zykes-> well i guess one needs to write alot more to get the same stuff if there are no modules available

[02:38] <rjbs> ...btu as I said, I wouldn't use Perl6 to get my work job done.

[02:38] <rjbs> People aren't really using Perl 6 to implement enterprise web applications, so they're not doing the same stuff.

[02:39] <rjbs> You can't look at Perl 6, as it stands now, as competing with Perl 5.

[02:39] <zykes-> what is perl6 getting used for then ?

[02:39] <zykes-> toying ? :p

[02:39] <rjbs> Perl 6 is being designed and constructed.

[02:39] <rjbs> Software implemented with it is often very useful, but it is, as far as I see things, a proving ground, not a factory.

[02:39] <JimmyZ> use v6; { use v5; ... }  ...

[02:40] <rjbs> People are saying, "Can I do X with Perl 6?" and if they can't, they figure out whether it's a problem beyond not having the right core written.

[02:40] <diakopter> JimmyZ: exactly :)

[02:40] <rjbs> zykes-: Did you read the Perl 6 Advent Calendar?

[02:40] <zykes-> wasn't perl6 gonna have some event library ?

[02:40] <diakopter> std: use v6; { use v5; ... };  ...;

[02:40] <p6eval> std 29401: ok 00:01 104m␤

[02:40] <rjbs> I'm sure Perl 6 will have many even tlibraries.

[02:40] <rjbs> I don't know if a standard, core one was discussed.

[02:41] <rjbs> It woudl probably fall under concurrency, which isn't quite specified yet.

[02:41] <diakopter> TimToady's been toeing around the concurrency spec for a coupla years

[02:44] <diakopter> rjbs: re "Perl 6's core functionality is much greater than Perl 5's", well, yes, especially since it by definition subsumes all of Perl 5's core functionality, since Perl 6 must *be* Perl 5 as well.

[02:45] <rjbs> diakopter: Yeah, we'll see how that turns out... ;)

[02:45] <zykes-> the decade that happens :p

[02:56] <diakopter> rjbs: pugs did it... :(

[02:56] <diakopter> also, pmurias did it for [some past version of] mildew

[02:58] <sjohnson> araujo: http://imgur.com/LPPaL.jpg <-- now with perl

[02:59] <araujo> sjohnson, hahaha

[03:00] <araujo> hehe

[03:01] *** Baggio__ joined
[03:04] <araujo> man, I can't stop laughing watching Java .. as seen by... Haskell

[03:04] <go|dfish> Ruby as seen by Perl 

[03:06] <JimmyZ> araujo: ni hao a

[03:07] <araujo> JimmyZ, ni hao 

[03:08] <JimmyZ> ni zai nali a

[03:09] <diakopter> sjohnson: wow.

[03:11] <diakopter> JavaScript is definitely in the Perl family, imo.

[03:17] *** Baggio_ left
[03:26] *** Exodist joined
[03:32] *** cdarroch left
[03:37] *** Transformer joined
[03:40] *** Transformer left
[03:46] *** Baggio__ left
[03:57] *** _jaldhar joined
[04:02] *** JimmyZ left
[04:04] *** Baggio_ joined
[04:04] *** Student left
[04:13] *** colomon left
[04:22] *** payload left
[04:23] *** Baggio_ left
[04:25] *** meppl joined
[04:43] *** Wolfman2000 left
[04:56] *** patspam left
[04:57] *** meppel joined
[05:03] *** xinming_ is now known as xinming

[05:13] *** meppl left
[05:56] *** Baggio_ joined
[05:59] *** cls_bsd left
[06:01] <mberends> sjohnson++ and others++ # http://irclog.perlgeek.de/perl6/2009-12-30#i_1876551

[06:08] *** Baggio_ left
[06:13] *** Baggio_ joined
[06:25] *** msmatsko joined
[06:26] *** colomon joined
[06:26] *** msmatsko left
[06:29] *** cls_bsd joined
[06:33] *** Baggio_ left
[06:39] *** nookie joined
[06:49] *** jql left
[06:58] *** colomon left
[07:02] *** ppperlerrrr joined
[07:14] *** racheldaBROWN joined
[07:14] *** rachelBROWN left
[07:16] *** Baggio_ joined
[07:16] *** rgrau` left
[07:18] *** justatheory left
[07:21] <pugs_svn> r29419 | mberends++ | [vill] interim commit of src/graph_traverse, the spider that will do the low level work in test/yaml_compose_roundtrip (a lite YAML composer+serializer) 

[07:25] *** kaare joined
[07:26] *** kaare is now known as Guest25351

[07:52] *** kaare joined
[07:52] *** kaare is now known as Guest84746

[08:04] *** eternaleye_ joined
[08:06] *** Guest25351 left
[08:06] *** synth left
[08:15] *** eiro left
[08:19] *** ejs joined
[08:20] *** Su-Shee joined
[08:20] <Su-Shee> good morning

[08:21] <diakopter> good night

[08:21] *** eiro joined
[08:21] *** iblechbot joined
[08:24] *** synth joined
[08:38] *** eternaleye_ is now known as eternaleye

[08:49] *** ejs left
[09:17] *** ejs joined
[09:18] *** Chillance joined
[09:18] *** ejs left
[09:18] *** ejs1 joined
[09:29] *** ejs2 joined
[09:29] *** synth left
[09:34] *** Baggio__ joined
[09:39] *** ejs1 left
[09:39] <sjohnson> diakopter: JS thing is like Perl sure, but not Java so much

[09:40] *** Ash_ joined
[09:41] *** Ash_ left
[09:42] <mberends> sjohnson: that is also why V8 is a pretty decent runtime engine for Perl 6 implementations

[09:42] <sjohnson> hopefully didnt offend anyone by the Perl x and y lines

[09:42] <sjohnson> those were the best things i could think while at work :)

[09:46] *** Baggio___ joined
[09:48] <mberends> I didn't understand the "Perl as seen by Ruby fans" image

[09:51] <sjohnson> just tried to make a joke about ruby taking the good parts of Perl 5

[09:51] <sjohnson> in a thief-like context

[09:52] <mberends> ah, a sort of white-collar PHP

[09:52] <sjohnson> well, "stealing" the great regex engine was kinda what i was imagining

[09:52] *** Baggio_ left
[09:54] <sjohnson> one of my friends changed the jesus img in the perl / perl thing to http://dl.dropbox.com/u/347510/Untitled-1.jpg

[09:54] <sjohnson> which i also think works quite well

[09:54] <sjohnson> as far as 2000+ uses goes

[09:55] <mberends> less potentially offensive, fersure

[09:58] <sjohnson> i feel both ways about Perl that's for sure :)

[09:58] <sjohnson> anyways, bed time.. cya

[09:58] *** sjohnson sets mode: +o mberends

[09:59] *** Baggio___ left
[10:01] *** meneldor joined
[10:01] <meneldor> morning guys

[10:02] <mberends> hi meneldor

[10:03] *** Baggio__ left
[10:08] *** Baggio_ joined
[10:09] *** ppperlerrrr left
[10:10] *** cognominal joined
[10:24] *** kangu joined
[10:25] *** stephenlb left
[10:41] *** Student joined
[10:44] *** agentzh left
[10:47] *** colomon_ joined
[11:16] *** payload joined
[11:28] *** Baggio_ left
[11:36] *** pmurias joined
[11:39] <wolverian> there's no builtin subrule for delimited lists, right?

[11:40] <pmurias> mberends: seen code.google.com/p/v8/issues/detail?id=413?

[11:44] <Tene> wolverian: you shoul dbe able to do like: /<digit> ** ','/, but it seems to be NYI

[11:44] <Tene> oh, looks like it works in ng

[11:45] <Tene> ng: say "foo bar 1,2,3 baz" ~~ /<digit>**","/

[11:45] <p6eval> ng 4e4d82: 1,2,3␤

[11:45] <wolverian> oh, **. I looked for subrules only.

[11:45] <wolverian> thanks!

[11:45] <Tene> np

[11:48] *** cognominal left
[11:48] *** Baggio_ joined
[11:49] *** cognominal joined
[11:49] <pmurias> diakopter: i don't think mildew ever had use v5

[11:50] <pmurias> diakopter: mildew has use SDL:from<perl5> tho

[11:52] <mberends> pmurias: thanks for the suggestion, I'll try the 27-Dec patch at the bottom

[11:57] <pmurias> mberends: did it help?

[11:58] <mberends> not at first attempt, now checking SConstruct manually

[12:00] *** ejs2 left
[12:02] *** _Jedai_ joined
[12:04] <mberends> pmurias: the patch works only after also doing export GCC_VERSION=44

[12:05] <hejki> ng: say "." ~~ :s

[12:05] <p6eval> ng 4e4d82: 0␤

[12:05] <pmurias> does export GCC_VERSION=44 work without the patch?

[12:05] <hejki> rakudo: say "." ~~ :s

[12:05] <p6eval> rakudo db84bc: 4096␤

[12:05] *** |Jedai| left
[12:06] <hejki> rakudo: say qx{ls -l|tail -1}

[12:06] <p6eval> rakudo db84bc: operation not permitted in safe mode␤in Main (file /home/p6eval//p2/lib/parrot/1.9.0-devel/languages/perl6/lib/Safe.pm, line 24)␤

[12:06] <hejki> :)

[12:06] <hejki> i already thought it had something very severe stuff going on :P

[12:07] <hejki> how about unlink("."); ? :)

[12:07] <hejki> (cares not to try)

[12:07] <mberends> pmurias: I'll first complete the build and install the generated v8 files, then try re-building without the patch. still building..

[12:08] <hejki> oh.. use Safe; is actual mode :O

[12:08] <hejki> nice :)

[12:10] *** cognominal left
[12:11] *** cognominal joined
[12:16] *** dug joined
[12:18] *** dug left
[12:19] <mberends> pmurias, ok, the v8 files are installed as per JavaScript::V8 perldoc. Now running in cpan, 'make JavaScript::V8' gives "Cannot open 'xspp --typemap=typemap.xsp JavaScript-V8-Context.xsp |': No such file or directory in WithV8Context.xs, line 21"

[12:20] *** douglashunter joined
[12:22] *** MaCkeR joined
[12:22] *** MaCkeR left
[12:23] *** Baggio_ left
[12:25] <mberends> pmurias: "Warning: prerequisite ExtUtils::XSpp 0.01 not found" that'll be it :)

[12:29] *** Baggio_ joined
[12:31] *** masak joined
[12:32] <masak> o/

[12:32] <mberends> \o

[12:32] <pmurias> \o/

[12:33] <masak> :)

[12:34] <mberends> pmurias: \o/ JavaScript::V8 installed doing a manual make, but not from sudo cpan

[12:34] <hejki> hmm.. can i overload datatypes? they're classes after all, right?

[12:35] <pmurias> mberends: how did it fail when installing from sudo cpan?

[12:36] *** ruoso joined
[12:36] <hejki> ohai masak 

[12:36] <masak> o hei hejki

[12:37] <hejki> yet another beautiful day to explore perl6? :)

[12:37] <masak> naturally.

[12:37] <mberends> pmurias: "Could not make: Unknown error" :(

[12:37] <masak> hejki: actually, I did some beautiful exploration last night. I didn't run into one single bug, but I had a lot of fun with OO.

[12:37] <pmurias> that's bad :(

[12:38] <hejki> masak: nice.. i had severe brainfarts last night and basically just wasted my time :P

[12:38] <hejki> masak: thought i found a bug, but it actually was just me doing things oh-so-wrong :P

[12:38] <masak> that's alright too.

[12:38] <hejki> sure

[12:38] <pmurias> mberends: it failed after you installed ExtUtils::Xspp?

[12:38] <hejki> at least i did something :)

[12:38] <masak> hejki: been there, sone that.

[12:38] <masak> s/sone/done/

[12:38] <hejki> heh y

[12:39] <hejki> btw.. how much ng differs from rakudo? 

[12:39] <masak> lots.

[12:39] <hejki> hmm..

[12:39] <hejki> ng: say "." ~~ :s

[12:39] <hejki> .<

[12:39] <p6eval> ng 4e4d82: 0␤

[12:40] <masak> it's, like, the biggest branch, ever.

[12:40] <hejki> if it uses even remotely same kind of definitions for those operators my patches could be directly applied

[12:40] *** Baggio_ left
[12:40] <mberends> pmurias: it failed before that. actually, now in 'look JavaScript::V8', it *does* configure and make correctly. There must have been a previous incomplete build getting in the way.

[12:40] <masak> hejki: I'll leave it to you to find out. :)

[12:40] <hejki> heh :P

[12:40] <hejki> so i thought :P

[12:41] <hejki> how's ng with current parrot btw (i won't test it nao, i'm at work :P)

[12:44] *** tsv joined
[12:45] <mberends> pmurias: \o/ the JavaScript::V8 synopsis code runs ok :)

[12:46] <pmurias> make test works?

[12:46] <mberends> yes it also worked

[12:46] <mberends> 99 bottles of beer is quite a lot of output to check ;)

[12:48] *** cognominal left
[12:48] * pmurias realised he never run the synopsis code ;)

[12:49] <hejki> masak: i blame you for my slacking @ work

[12:49] * hejki is currently cloning and skimming ng branch :P

[12:49] *** eternaleye left
[12:49] <masak> hejki: sure, if that makes you feel better... :)

[12:49] <hejki> heh..

[12:50] <hejki> doing free-time stuff on paid working hours makes me feel better :)

[12:51] *** cognominal joined
[12:51] <hejki> mm.. Mu() is the new Failure()?

[12:51] <huf> there's Mu()? fuck yeah.

[12:51] <hejki> ng: say .WHAT

[12:51] <p6eval> ng 4e4d82: Mu()␤

[12:51] <pmurias> Mu() is the new undef is the new Object

[12:52] *** nookie left
[12:52] <colomon_> hejki: Mu is not Failure, but it is used for "undef" failures.

[12:53] <hejki> i should buy some of the neat perl6 books tbh

[12:53] <masak> hejki: one of them will publish around April.

[12:54] <masak> (the one we're building on #perl6book)

[12:54] *** mberends left
[12:54] <hejki> oreilly?

[12:54] * hejki prefers pdf

[12:55] *** mberends joined
[12:55] <hejki> is there a draft somewhere? :)

[12:56] <colomon_> http://github.com/perl6/book

[12:57] <masak> there's a PDF under Downloads...

[12:57] <masak> ...but it omits some of the newer chapters, which can still be read in source form.

[13:02] <mberends> pmurias: perl mildew -Bjs -e'say "V8 V8 ";' also works :-)

[13:04] <hejki> nice

[13:04] <hejki> masak: none of the ~~ :{d,f,l,s} is in ng yet.. where should i put these? (clearly some of the PIR part :))

[13:05] <colomon_> hejki: where did you put them in rakudo master?

[13:05] <hejki> builtins/any-str.pir

[13:05] <hejki> so Any.pir or Str.pir? :>

[13:05] <hejki> (i'd use Str.pir)

[13:05] <colomon_> sounds reasonable to me.

[13:06] <hejki> or hmm.. by definition should i be able to: 3 ~~ :d ?

[13:06] <hejki> i mean.. i can have a file named 3

[13:06] <hejki> but is it interpreted (in human terms) as a string or any? :)

[13:06] *** Student left
[13:06] <colomon_> well, what does the :d code do?

[13:06] <hejki> -d 

[13:06] <hejki> checks if it's a directory

[13:06] <colomon_> no, I mean what does it take as an argument?

[13:06] <hejki> hmm.. a string :)

[13:07] <hejki> so Str.pir it is 

[13:07] <colomon_> :)

[13:07] <hejki> think i'll add the :d and :f as well from master now when i'm on it :P

[13:07] <hejki> (and might even actually use the patch guideline instead of pastebinning stuff for masak - unless this is more favorable ;))

[13:10] <masak> hejki: I'd go with sending the patches by me. quicker, more efficient. :)

[13:10] <masak> unless I'm away for some reason.

[13:10] <hejki> well you're most often around when i'm around

[13:11] <masak> seems like it, yes.

[13:11] <hejki> which timezone?

[13:11] *** y3llow left
[13:11] *** y3llow joined
[13:11] <colomon_> unobe just forked rakudo on github and sends pull requests there when he has a patch.  that seems to work well.

[13:12] <hejki> well i'll pick on masak until i might be subject for push permissions ;)

[13:12] *** takadonet joined
[13:12] <takadonet> morning all

[13:12] <masak> takadonet: \o

[13:12] <colomon_> o/

[13:13] <takadonet> how are you guys doing today?

[13:14] <masak> pret-ty good. :)

[13:15] <mberends> happy to have kick-started a V8 :)

[13:15] <masak> takadonet: whoz op with you?

[13:15] <takadonet> masak: no idea hehe why?

[13:15] *** Student joined
[13:16] <masak> takadonet: sorry, I meant 'how are you today?'

[13:16] *** Student left
[13:16] <takadonet> masak: good good.

[13:17] <pmurias> mberends: make test-js in mildew works?

[13:20] *** abra joined
[13:23] <mberends> pmurias: some subtests not run, looking like viv errors, ok up to while.mildew..

[13:25] <pmurias> nopaste?

[13:26] <mberends> waiting until all tests done..

[13:28] *** Lorn left
[13:40] <mberends> pmurias++: Files=56, Tests=213, 1005 wallclock secs # slow but impressive :)

[13:40] <lisppaste3> mberends32 pasted "make test-js output for pmurias++" at http://paste.lisp.org/display/92811

[13:42] *** pmurias left
[13:42] *** pmurias joined
[13:43] <mberends> .oO( knocked the laptop off the table in excitement? )

[13:43] <pmurias> mberends: the p5 integration tests failed

[13:43] *** ruoso left
[13:45] <pmurias> mberends: it seems a bug of some sort that they got run by the test harness

[13:45] <mberends> ok, not very serious

[13:46] <pmurias> mberends: you are testing on EEE PC?

[13:46] <mberends> yes, Atom N270 1.6GHz processor

[13:50] <pmurias> EEE is your main development box?

[13:50] *** colomon_ left
[13:51] *** PacoLinux left
[13:53] *** orafu left
[13:53] *** orafu joined
[13:54] <mberends> pmurias, almost  50% of the time, especially when commuting etc. Today there are other machines available, but the portability is useful around home as well. Not many tasks require a lot of brute force, and the keyboard and 10" LCD size are quite comfortable after getting used to them

[13:56] *** Baggio_ joined
[13:56] <mberends> if the Motorola Droid could run Rakudo, I'd probably shrink into that ;)

[14:00] <masak> what's that, a vacuum cleaner?

[14:00] <takadonet> hehe

[14:02] <mberends> oh, Motorola Milestone in the UK http://en.wikipedia.org/wiki/Motorola_Droid

[14:04] *** Alias joined
[14:05] *** bluescreen joined
[14:06] *** pmurias left
[14:07] <avar> '/w 13

[14:09] * masak hugs avar, nice irssi user

[14:09] <mberends> .oO( a vacuum cleaner running Rakudo :)

[14:09] <masak> man, that would suck :P

[14:09] <mberends> lol lol

[14:09] <mberends> rotfl

[14:10] <masak> god thing you've vacuumed the floor.

[14:10] *** pmurias joined
[14:10] <masak> s/god/good/

[14:10] <masak> (thanks, I'll be here all week)

[14:10] <mberends> thank good for that

[14:11] <masak> divinity-based Freudian slips are uncanny.

[14:12] <masak> fortunately, they don't happen allah that often.

[14:12] <mdxi> o/` what if god was one of us? / vacuum ro-bot like one of us? o/` # with apologies to everyone

[14:13] <masak> :)

[14:14] *** payload left
[14:29] *** colomon joined
[14:31] <takadonet> colomon: welcome back

[14:35] *** soupdragon left
[14:35] <colomon> thanks

[14:36] *** TiMBuS left
[14:37] *** payload joined
[14:52] *** rgrau_ joined
[14:52] * masak catches himself writing `a ? b ! c` in a Perl 5 program

[14:54] <mberends> over here, that would result in a spec addition and implementation within 30 minutes ;)

[14:55] <mberends> agreed by a quick show of hands

[14:55] <masak> well, I wouldn't mind if someone told the Perl 5 parser to detect the above half-Perl6ism...

[14:55] <mberends> quite

[14:56] <mberends> there'd be no breakage of existing code

[14:56] <masak> oh, I'm not out to change the way things are done in Perl 5.

[14:56] <masak> but it would be an excellent place to detect unwarranted futurism and report intelligently on it.

[14:56] <mberends> heh, that's why they put us in this padded cell

[14:57] <masak> :)

[14:57] *** Baggio__ joined
[14:57] *** Su-Shee left
[14:57] <takadonet> how can you determine if an object has a method before calling it? i.e $object.can('drink_beer')?

[14:57] <masak> takadonet: there's $object.?drink_beer if that's enough for your purposes.

[14:58] <masak> otherwise what you wrote should work, with the addition of a '^' before 'can'.

[14:58] <takadonet> thanks guys. '^' with can will work

[14:59] <takadonet> hmmm Test.pm in rakudo main directory does not have a 'can_ok' test function

[15:00] <masak> patches welcome.

[15:03] *** PacoLinux joined
[15:06] *** pdcawley joined
[15:08] <takadonet> nuts....

[15:10] *** Baggio_ left
[15:11] <masak> almonds....

[15:14] *** patspam joined
[15:18] *** Baggio__ left
[15:21] *** pmurias left
[15:25] *** bluescreen left
[15:32] *** rgrau_ left
[15:40] *** Baggio_ joined
[15:44] *** bluescreen joined
[15:48] *** ash_ joined
[15:50] *** colomon left
[15:50] *** abra left
[15:55] *** Psyche^ joined
[15:55] *** douglashunter left
[15:55] *** fridim_ joined
[15:56] *** rgrau_ joined
[15:56] *** Patterner left
[15:56] *** Psyche^ is now known as Patterner

[16:01] *** _jaldhar left
[16:02] <masak> std: sub foo(?$) {}

[16:02] <p6eval> std 29401: ===SORRY!===␤Malformed parameter at /tmp/ZpqnCTjB6P line 1:␤------> sub foo(⏏?$) {}␤    expecting any of:␤      name␤   parameter␤  signature␤      whitespace␤FAILED 00:01 107m␤

[16:02] <masak> hm, are optional anonymous parameters not allowed?

[16:03] *** meneldor left
[16:05] <arnsholt> std: sub foo($param?) {}

[16:05] <p6eval> std 29401: ok 00:01 106m␤

[16:05] <masak> oh :/

[16:05] <masak> std: sub foo($?) {}

[16:05] <p6eval> std 29401: Potential difficulties:␤  Illegal to use ? twigil in signature at /tmp/GNWAks0cJM line 1:␤------> sub foo(⏏$?) {}␤ok 00:01 106m␤

[16:06] <arnsholt> It'd need a name too, no?

[16:06] <masak> arnsholt: thanks. I was momentarily confused.

[16:06] <masak> arnsholt: I'm actually in a situation where giving it no name makes sense.

[16:06] *** Baggio_ left
[16:08] <arnsholt> What kind of situation is that? Now I'm curious =)

[16:09] * masak considers where to start

[16:10] <masak> I'm doing a diagram renderer.

[16:10] <masak> I have different objects: so far 'image', 'text', 'box', and 'arrow'.

[16:10] *** synth joined
[16:11] <masak> they are defined by structural recursion, so a box can contain any object among the above ones.

[16:11] <masak> an arrow can have texts (or anything else) above or below itself.

[16:12] <masak> to make the rendering work, I make cute little methods that call each other.

[16:12] <masak> for example, for a box to find out how big it is, there are a width-of and a height-of which take a Box as its first argument.

[16:13] <masak> (a bit like methods, but these are multi subs)

[16:13] <arnsholt> Right

[16:13] <masak> the width-of for a Box calls the width-of of the thing it contains, and returns that with a bit of added padding.

[16:14] <masak> now,

[16:14] <arnsholt> And for some types the return value is the same for all objects of the class?

[16:14] <masak> I'm adding a new type of multi called allocate-region, so I only have to calculate all the sizes and positions once, and not all the time through the traversal of the raster image.

[16:15] <masak> this new multi takes relative $x and $y coordinates, so that parent elements can send in offsets to the allocation of their child elements.

[16:15] <masak> these are optional, because they have default values.

[16:15] <masak> so that's where the optional part comes from.

[16:16] *** colomon joined
[16:16] <masak> for the anonymous part: I have a top-level class called Object from which all the image element types inherit.

[16:16] <masak> and I make one multi of each type for Object, just to catch calls to multis I haven't written yet.

[16:17] <masak> all these do is die with a nice error message.

[16:17] <masak> so I never use the values of the parameters, and I might as well leave them as anonymous, just giving the sigil.

[16:17] <masak> there you go. :)

[16:17] * masak exhales

[16:18] *** pmurias joined
[16:18] <masak> I can't wait to show you the images that this tool spits out. :)

[16:18] <arnsholt> That makes sense. Thanks

[16:18] *** KyleHa joined
[16:18] *** vi joined
[16:18] <vi> ?

[16:19] <KyleHa> !

[16:19] <masak> ¿

[16:20] <vi> where browse if i want to download perl ?

[16:20] <masak> vi: Perl 5 or Perl 6?

[16:20] <vi> perl 6

[16:20] <masak> vi: perl6.org

[16:21] <masak> vi: also, check out the Perl 6 Advent Calendar if you haven't already.

[16:21] <KyleHa> I was looking at the P6 Advent Calendar yesterday, and I was glad I did.

[16:21] <vi> i am newbie, i want to learn about perl....

[16:22] *** perlygatekeeper joined
[16:22] <masak> vi: then the Advent Calendar is for you! http://perl6advent.wordpress.com/

[16:23] <masak> wow, there's a spike going on in the visitor statistics! we're up to above 1k again.

[16:23] <masak> seems a Czech site gives us a lot of hits right now: http://www.abclinuxu.cz/zpravicky/prvni-perl-6-adventni-kalendar

[16:24] <vi> advent calendar for what ?

[16:25] <masak> vi: each day during December, one of us wrote about some Perl 6 feature.

[16:25] <masak> vi: but it's easier to just show you than to explain: http://perl6advent.wordpress.com/

[16:29] *** tsv left
[16:30] <vi> if you want to use perl, I just need to download perl at perl.org? or other....

[16:31] <KyleHa> vi: If you know nothing about Perl, you might want to start by learning the difference between Perl 5 and Perl 6 to decide how to proceed.

[16:31] <vi> if I wanted to use perl, I just need to download perl at perl.org? or other...

[16:32] <masak> vi: what KyleHa said. in this channel, which is called #perl6, we're working on Perl 6, a not-yet-feature-complete language in the Perl family.

[16:32] <masak> vi: there's also the much more established Perl 5, which you will indeed find at perl.org

[16:42] <vi> thank u

[16:42] <masak> u are welcome.

[16:42] <masak> 你是中人吗?

[16:43] <masak> (just a guess)

[16:43] <masak> or maybe Czech?

[16:44] <mberends> masak++ # polyglot welcomebot

[16:44] <masak> vi: nie mamy czas?

[16:44] *** orafu left
[16:44] *** orafu joined
[16:45] <vi> i not understand

[16:45] <masak> vi: I was just curious as to where you're from.

[16:45] <masak> but then we've ruled out China and the Czech republic, I guess.

[16:46] <vi> indonesian

[16:46] <masak> oh, cool.

[16:47] <masak> not sure I have the fonts for that, though.

[16:47] <masak> and definitely not the polyglottery. :P

[16:47] <masak> vi: why did you get interested in Perl?

[16:48] <vi> for my thesis

[16:48] <masak> wow

[16:49] <vi> but i cannot to use perl

[16:49] <vi> i must learn about perl

[16:50] <sbp> there's always http://en.wikipedia.org/wiki/Perl of course

[16:50] <masak> vi: Perl is big. is there something in particular you'd like to learn?

[16:51] <xinming> vi: Perl if fun to learn. :-)

[16:51] <sbp> perl6 is basically perl, but with s/camel/butterfly/

[16:51] <frettled> Or s/camel/camelia/

[16:51] <frettled> ia = intelligent architecture ;)

[16:51] <KyleHa> I think there's a little bigger difference than the mascot.  8-)

[16:52] <sbp> well, the mascot is symbolic of all the rest though

[16:52] <frettled> Beware intelligence, it can bite you in the a...

[16:52] *** nbrown left
[16:52] <frettled> sbp: psychedelic, psychotic, brain-eating monster?

[16:53] <vi> for tagging the text....

[16:53] <masak> vi: so, you have some text coming in and you want to do something with it?

[16:54] <vi> ya

[16:54] <vi> can u speak indonesian ?

[16:54] <sbp> there's also a #perl note

[16:54] <masak> vi: sorry, not yet.

[16:55] *** zamolxes left
[16:55] <masak> vi: Saya tidak bisa berbahasa Indonesia. :/

[16:56] <vi> :) oooo

[16:56] <vi> I just need to download perl 6 and it can be used directly

[16:57] <masak> with caveats, yes. :)

[16:57] <vi> my english is not fluently

[16:57] *** meteorjay joined
[16:57] <masak> if you're new to Perl, then probably you should try Perl 5 first, not Perl 6.

[16:57] <sbp> jangan khawatir, Anda jauh lebih inggris fasih bahwa Indonesia

[16:58] <masak> vi: your English is good enough for me to understand you.

[16:58] <vi> ooooo .....;)

[16:59] <vi> tq...

[17:00] <ash_> vi: the Beginning Perl book http://www.perl.org/books/beginning-perl/ is really good and It should also be in indonesian 

[17:05] <vi> thank u...:) 

[17:05] <ash_> having interactive perl is also really useful if your just learning. you can use: perl -ple '$_=eval'    if you have perl 5 installed

[17:06] *** payload1 joined
[17:06] *** payload left
[17:10] *** xenoterracide left
[17:16] <mdxi> i don't speak indonesian, but i love rendang :)

[17:17] <diakopter> pmurias: oh

[17:17] <diakopter> (re: use v5)

[17:18] *** diakopter sets mode: +oooo masak mberends colomon wolverian

[17:19] <mberends> oh hai diakopter

[17:20] *** eric256 joined
[17:21] <diakopter> hi

[17:21] *** TimToady sets mode: +vvvv buubot dalek hugme iblechbot

[17:21] *** TimToady sets mode: +vvv ilbot2 ilogger2 IRSeekBot

[17:21] *** TimToady sets mode: +vvv lisppaste3 p6eval phenny

[17:21] *** TimToady sets mode: +v pugs_svn

[17:22] *** cdarroch joined
[17:22] <vi> mdxi : i know rendang....:)

[17:23] *** justatheory joined
[17:23] <cognominal> TimToady donne de la voix  :)

[17:24] <masak> TimToady est un voix-donateur.

[17:27] <cognominal> litteraly "donner de la voix" means shouting.

[17:28] <masak> oh, I see.

[17:28] <cognominal> bad pun, as usual

[17:28] <masak> in English, one sometimes 'gives voice to' concerns, but not always by shouting.

[17:28] <masak> cognominal: you're certainly in the right company. :)

[17:29] <TimToady> maybe I was just throwing my voice

[17:29] <cognominal> do you mean that's a exception?

[17:30] <TimToady> I have Failure to communicate...

[17:30] <eric256> the #perl channel isn't very open to talking about perl 6. lol at least not the few times i've been there when it comes up

[17:30] <eric256> :)

[17:30] * masak is reminded of http://paikea066.vox.com/library/post/throwing-shoes-other-global-insults.html

[17:31] <ash_> thats odd

[17:31] <masak> eric256: I agree. but then again, many of the people on that channel have a vested interest in Perl 5.

[17:31] <TimToady> so do we

[17:32] <masak> yes, but...

[17:32] * masak starts over

[17:32] <ash_> i may be wrong, but perl 6 might not exist without perl 5, but then again, shouldn't people plan for the future? 

[17:32] <takadonet> Perl 5 protects me from doing Java projects

[17:32] <eric256> its just odd to me cause i move back and forth between 5/6 and consider them intertwined...so their anti 6 feeling was a bit un-perlish to me

[17:32] <eric256> lol

[17:32] <pmurias> diakopter: it's mostly a matter of changing STD to get that working

[17:32] <takadonet> eric256: I'm in the same boat

[17:33] * diakopter switches to JEDI mode.  that's Just Effing Do It mode.

[17:33] <masak> the people on #perl (both of them) often feel they don't have to take Perl 6 into account, at least not yet. some of them feel irritated because people from outside of the community ask about Perl 6 as if it had a larger mindshare within the Perl community than it actually does.

[17:34] <masak> eric256: I move back and forth a lot too. I'm writing a program right now which sends data back and forth. both Perl 5 and Perl 6 has individual strengths.

[17:35] <diakopter> masak: I agree completely. That's due to the inaccurate marketing of Perl 6 and its implementations over the years.

[17:35] <masak> diakopter: yes.

[17:35] <diakopter> where "That" is "the incorrect perception about the larger mindshare"

[17:36] <masak> diakopter: maybe it's not possible to keep the right expectations on a thing like Perl 6 for 10 years.

[17:36] <ash_> TimToady: how do you write 'when not'?  

[17:36] <cognominal> Perl6 is growing exponentially, it is just starting very small. And the perl5 crowd  will be the first crowd that will be gobbled up.

[17:36] * eric256 doesn't see much gobbling for a while :P

[17:37] <eric256> i was just suprised by the antipathy towards it, like a red headed step child. hehe.

[17:37] <TimToady> the marketing has always been impossible: "Keep excitement up while not overpromising"

[17:38] *** pmurias left
[17:39] <TimToady> ash_: depends on the test; but usually I try to write the cases in the correct order so they're all positive

[17:40] <ash_> is there a convenient way to do a when not in a given statement? I can only come up with doing like: when $_ !~~ ... 

[17:40] <ash_> hmm, okay

[17:40] <TimToady> when none(42)   when :!r

[17:41] <diakopter> .oO( Real excitement doesn't need propped up; capability is louder than words.  Words can sell books, but software can sell more books. )  /me struggles to enter JEDI mode :/

[17:41] <TimToady> we could add a negative form, but I'm inclined against it since cases are generally more understandable if expressed positively

[17:41] <TimToady> and on any boolean expression, 'when not' already works

[17:42] <ash_> you can do like a macro pretty easy i imagine if you want to fix that, just do like: macro prefix:<when not> { when $_ !~~ ... } (insert appropriate macro stuff)

[17:43] <TimToady> we've thought about that, but it seems like a smell to have multi-word keywords, and also violates the expectations of a user who is thinking prefix:<not>

[17:43] <TimToady> I'd rather see whenn't  :)

[17:44] * masak has never felt the need for 'when not'

[17:45] <cognominal> masak, about the page you gave the url... "In France, of course, it’s a waffle. Throw a waffle at someone and you have said, in essence: “I loathe you. You are scum. Your people are donkey traders."  We don't throw waffle in France...

[17:45] *** supernovus joined
[17:45] <masak> cognominal: you don't?

[17:45] <eric256> lol cog, i'm guessing they dont throw tanks in russia either. lmao

[17:45] <masak> cognominal: what do you throw?

[17:45] <diakopter> 'when not' -> 'except'

[17:45] *** rgrau_ left
[17:46] <cognominal> I don't know anything thrown specific to french.

[17:46] <frettled> cognominal: cows

[17:46] <frettled> fecher la vache!

[17:46] <cognominal> fait chier!

[17:47] <eric256> now go away or i shall taunt you a second time!

[17:47] <cognominal> but that the NYT, what do they know...  that _was_ a  reputable paper

[17:48] <cognominal> *that's

[17:48] *** payload1 left
[17:49] <frettled> cognominal: you seem to be missing the satire

[17:49] <cognominal> probably

[17:49] <frettled> cognominal: please read the rest of the article, it ought to be self-evident.

[17:50] <frettled> if not, I shall be forced to throw a stave church (filled with the heads of my enemies) at you

[17:50] *** ruoso joined
[17:51] <cognominal> I don't accept religious arguments how heavy they are :)

[17:52] <cognominal> *no matter

[17:52] <masak> would a hyper function call syntax fly? something like foo>>( @array ) ?

[17:52] <frettled> hee-hee

[17:53] <colomon> masak: er?

[17:53] *** orafu left
[17:54] *** orafu joined
[17:54] <masak> that way, I wouldn't have to write 'map' all the time. :)

[17:54] * masak is hyper-lazy

[17:54] <colomon> Oh, foo is the function, and it takes one argument?

[17:54] <masak> right.

[17:55] <eric256> that would be crazy. lol

[17:55] <colomon> I proposed that back when I was working on the Mandelbrot Advent post, and it didn't fly very well.

[17:55] <colomon> but I didn't use that syntax.

[17:56] <colomon> I was using a similar argument -- to lazy to type hyper map.

[17:57] <TimToady> hyper (foo($_) for @array) is about the best we have currently

[17:58] <TimToady> there is the conjectural foo(each(@array))

[17:59] <TimToady> but unlikely to be in 6.0

[17:59] * diakopter reads pugs/docs/notes/docs_evil_plan.txt

[18:01] <TimToady> but we might consider each() to be a junction that responds to list context rather than boolean

[18:01] <pugs_svn> r29420 | diakopter++ | [sprixel] Add new dir for non-machine-readable writings on sprixel 

[18:01] <TimToady> and get autothreading for free

[18:02] <colomon> masak: isn't it terrible that map is starting to seem too clumsy to us?   it's still vastly nicer than anything I have available for my C++ code (for instance).

[18:03] <masak> colomon: convenience is addictive.

[18:03] <masak> TimToady: I thought the death of each() wasn't greatly exaggerated.

[18:04] *** Alias_ joined
[18:05] *** Alias left
[18:05] <TimToady> S09:1080 still conjectures an each(), though it's mixed up with ordinary junction semantics a bit more than a pure hyperizing junction would be

[18:06] <masak> ah, ok.

[18:06] <masak> std: / \b /

[18:06] <p6eval> std 29401: ok 00:01 105m␤

[18:06] <TimToady> in my thinking above I was assuming no values would ever be thrown away

[18:07] <masak> TimToady: switching tracks a bit.. why do both PGE and STD.pm accept \b, when S05 says it's been replaced?

[18:07] <TimToady> so basically each lets you autothread lists while all lets you autothread sets (assuming we allow all as the only junction that can actually represent a set)

[18:07] <masak> that sounds nice.

[18:08] <TimToady> I think \b would match a backspace

[18:09] <TimToady> std: /\b/

[18:09] <p6eval> std 29401: ok 00:01 105m␤

[18:09] <TimToady> but arguably it should be disallowed

[18:09] <masak> rakudo: say "  foo " ~~ / \b foo \b /

[18:10] <p6eval> rakudo db84bc: foo␤

[18:10] <masak> PGE doesn't interpret it as a backspace.

[18:15] *** orafu left
[18:15] *** orafu joined
[18:24] *** vi left
[18:24] <masak> in a multimethod which was the most specific one among a number of candidates, can I do 'callsame' to get the next most specific one?

[18:24] *** cotto left
[18:25] <masak> rakudo: multi f(Num $x) { say "Num" }; multi f(Int $x) { callsame; say "Int" }; f(42)

[18:25] <p6eval> rakudo db84bc: Null PMC access in clone()␤in Main (file <unknown>, line <unknown>)␤

[18:26] <ash_> isn't that nextsame? 

[18:26] <masak> only if I don't want to return.

[18:26] <masak> in my particular case, I do.

[18:27] <ash_> so... it would return twice? 

[18:27] <masak> but I'm asking because I suspect that the answer to my question is "no", and that I don't fully grok 'callsame' et al. yet.

[18:27] <ash_> how would that work? (logically speaking) which value would be the return value? 

[18:28] <masak> ash_: foo(Int) would call foo(Num). foo(Num) would return to foo(Int), and foo(Int) would return as usual.

[18:28] <masak> again assuming that it should work at all.

[18:30] *** xomas_ joined
[18:35] <ash_> masak: after looking at S06 and S12 i don't know how that should work... *off to check for a spec test to see if those make more sense*

[18:35] * arnsholt does not grok the nqp-rx code

[18:39] <ash_> masak: i think callsame is really for inheritance not for multi-methods specifically   

[18:39] <TimToady> it's for both

[18:39] <masak> ash_: well, it's also used when doing calls with .* and .+

[18:39] <masak> ash_: and for wrappers.

[18:40] <masak> TimToady: so, what should happen in my multi above?

[18:40] <TimToady> it's essentially just thrown a 'next' control exception to whatever dispatcher is running down a list

[18:40] <hejki> hmm.. WTB: class Foo { method bar { … } } :)

[18:40] <masak> I have a vague feeling I've been discussing this with jnthn++ before...

[18:41] <TimToady> that should say Num and then Int, I think

[18:41] <masak> the problem, I have a vague feeling he explained, is that the multi-dispatcher has already done away with the looser candidates.

[18:41] <masak> but I might mis-remember.

[18:41] * masak submits rakudobug for now

[18:41] <TimToady> it can't have, or it's not a Perl 6 dispatcher :)

[18:41] <masak> :)

[18:42] <TimToady> at minimum, it has to be able to reproduce the tail of the list

[18:44] <pugs_svn> r29421 | lwall++ | [STD] redirect /\b/ to use a p6 word boundary assertion instead 

[18:48] <ash_> TimToady: if a role defines a method with ^ in it and is composed into a class, would you expect that class to have the ^method? eg. role foo { method ^bar { } }; class Car does foo {}; Car.^bar; ? 

[18:50] *** pmurias joined
[18:51] *** masak left
[18:51] <pmurias> TimToady: what would i take to add 'use v5' to STD.pm?

[18:52] <TimToady> pmurias: finish turning STD_P5.pm into a Perl 5 grammar :)

[18:52] <hejki> misread turding :)

[18:53] <pmurias> diakopter: want to help make STD support 'use v5'?

[18:53] <TimToady> ash_: I would expect any method defined in a role to work identically to how it works in the class it's composed into

[18:53] <TimToady> you should know that STD_P5.pm is still a complete mess in the non-regex bits

[18:54] <TimToady> but we at least need to get it to the point where it can find the end of a P5 block

[18:55] <pmurias> it being a complete mess increases the propability of my changes improving it ;)

[18:55] <TimToady> STD_P5.pm is an attempt to get to a P5 grammar by cutting down the P6 grammar and adding in the special P5 bits

[18:55] <TimToady> it's currently partway through the cutting down stage

[18:56] <TimToady> but in theory we can at least get it to parsing as well as PPI does

[18:56] * justatheory does not parse

[18:56] <TimToady> that's because it's too dark inside of you

[18:56] *** seeker42 joined
[18:56] <justatheory> exactly

[18:56] <TimToady> errands &

[19:05] *** eternaleye joined
[19:05] *** eternaleye left
[19:08] *** seeker42 left
[19:09] <diakopter> pmurias: no, but thanks; I'm reimplementing STD/Cursor/gimme5... 

[19:13] <pmurias> not again... ;)

[19:20] *** Student joined
[19:23] *** rgrau` joined
[19:24] <pmurias> diakopter: how many parser engines did you write already?

[19:29] *** Lorn joined
[19:31] <colomon> pmurias: I'm sure once you've done your first dozen, it starts getting easy.  ;)

[19:31] <diakopter> pmurias: just 1, but many, many times.

[19:31] <eric256> Practice makes perfect

[19:31] <eric256> what is it parsing?

[19:33] <mberends> eric256: Perl 6 (or Perl 5) source code

[19:35] <eric256> is that all? lol.. i was trying to figure out what the name STD/Cursor/gimme5 means...

[19:36] *** supernovus left
[19:36] *** payload joined
[19:39] *** ash_ left
[19:39] *** ash_ joined
[19:39] *** meppel left
[19:43] <hejki> hmm.. do i need to stuck stuff into some export-line in builtins on ng branch?

[19:46] <Tene> hejki: eh?

[19:46] <hejki> like with master-branch of rakudo ..

[19:47] <Tene> I don't understand what you're asking.

[19:47] <hejki> lemme rephrase

[19:48] <hejki> the master-branch src/builtins/*.pir define a !EXPORT-line to add method-calls into so they're exported. is this still done in the same way in ng-branch?

[19:50] <Tene> I don't see it happening anywhere in src/builtins/*.pir in ng.

[19:50] <mberends> pmurias: what is your YAML::XS version? since changing 0.23 here to 0.32 this morning, STD.pm does not build, "YAML::XS::Load Error: Invalid leading UTF-8 octet was found at document: 0"

[19:50] <hejki> Tene: neither do i. how is stuff exported then? :)

[19:50] <hejki> i'm trying to add methods but i fail hard

[19:51] <Tene> Methods shouldn't need to be exported anywhere...

[19:52] <Tene> So, I think I'm missing something.  What are you trying to do that doesn't work?

[19:52] <hejki> make a method for Str-class via src/builtins/Str.pir

[19:53] <Tene> can you post the diff?

[19:53] <hejki> well mainly it just adds a test method (to first try out how-to make methods properly) but just a sec 

[19:54] *** abra joined
[19:54] <Tene> Make sure it's in the Str namespace and marked with :method

[19:58] <hejki> it's supposed to be C<.sub ':s' :method> and used in C<Str ~~ :s>. maybe this is why i'm failing

[19:59] <hejki> ?

[20:01] *** zamolxes joined
[20:03] <Tene> I don't see any indication that that's supposed ot be a method of Str

[20:04] <hejki> heh.. we talked this already over once today :P

[20:04] <Tene> Look at the pir it compiles to.

[20:04] <hejki> not you and me, but anyways :P

[20:05] <hejki> if i call it .sub 'schlumorp' instead of ':s' and call Str.schlumorp it does work just fine (sherlock!)

[20:05] <Tene> {"foo" ~~ :s} compiles to: &infix:<~~>("foo",1)

[20:05] <Tene> currnetly

[20:05] <Tene> Yes, of course it works.

[20:05] <hejki> hmm..

[20:06] <hejki> so i need to define a proper call for ~~ :s 

[20:06] <sjohnson> TimToady: as far as the "when not" thing is concerned, i thought it would be a cool addition as I use it sometimes like the if / unless pair

[20:06] <sjohnson> fwiw

[20:06] <Tene> I don't know where the correct place to do that is, but it's not currently making a Pair object there, like I thought it was supposed to.

[20:07] <hejki> eww

[20:08] *** abra left
[20:08] *** abra joined
[20:11] <sjohnson> starting to use unless quite a bit, actually

[20:11] <sjohnson> also like the while / until pair

[20:11] <Tene> Rakudo master compiles it to approximately: infix:~~("foo", infix:=>('s',1))

[20:13] *** plainhao joined
[20:13] *** abra left
[20:18] *** abra joined
[20:21] *** abra left
[20:25] <sjohnson> wow someone else uses weechat here

[20:25] <sjohnson> i suppose that makes two!

[20:27] <ash_> does anyone in here have OS X? and not 10.6?

[20:38] *** orafu left
[20:38] *** orafu joined
[20:40] <colomon> ash_: yes

[20:40] <colomon> (OS X, 10.5.8 I think)

[20:40] <ash_> does parrot's examples/opengl/shapes.pir work for you? 

[20:41] <colomon> no idea.

[20:41] <colomon> okay, I'm in that directory.  how would I run it?

[20:42] <colomon> ./parrot examples/opengl/shapes.pir

[20:42] <colomon> ?

[20:42] <colomon> Could not find a suitable GL shared library!

[20:42] <Tene> works for me!

[20:45] <colomon> afk for grocery shopping, back in a bit if more OS X experiments needed.  :)

[20:48] <ash_> colomon: k, thanks, its doing that for me to

[20:48] <ash_> Tene: are you on OS X? i think this is an OS X specific issue

[20:50] <Tene> ash_: No, I'm not.  I'm not really being helpful here. :)

[20:51] <ash_> Tene i know it works for me in linux, so just trying to track down the issue in OS X and get a proper bug report for parrot (although they have one, maybe i'll just do a patch instead...) 

[20:51] <arnsholt> I'd guess it's related to how OS X packages libraries

[20:52] <arnsholt> With frameworks and such

[20:53] <arnsholt> Also, FWIW, I get the same error in 10.6

[20:53] <ash_> well, i think its looking in the wrong folder, actually, i know it is on 10.6, i am just trying to figure out why its configured the way it is, thats why i was looking for someone with not 10.6, maybe 10.4 has a different layout, one that follows what parrot currently does, so yeah. /thinking outloud

[20:54] <pmurias> mberends: 0.27

[20:56] <mberends> thanks pmurias, be careful upgrading viv dependencies

[20:59] <pmurias> upgraded YAML::XS and i ge the same error

[20:59] <mberends> :(

[21:01] <pmurias> we need to move towards using only YAML::XS or YAML::Syck

[21:02] <ash_> Syck, so you know, isn't really maintained much anymore

[21:02] <mberends> using YAML::Syck alone did not work 3 days ago :(

[21:02] <pmurias> what happended?

[21:02] <ash_> whytheluckystiff (the guy that made syck) is gone

[21:03] <ash_> and deleted all his sites, and github account, and twitter account, etc. 

[21:03] <mberends> the YAML file format changed in subtle ways, anchor numbers were out of sequence and there were empty lines after [] sequences

[21:05] <mberends> pmurias, see comments in viv lines 11-17

[21:05] <pmurias> what programs did it confuse?

[21:06] <pmurias> nothing sensible should depend on anchor ordering

[21:08] <mberends> true. it may have been only vill, but now I don't remember exactly whether mildew was affected.

[21:11] * pmurias gets rids of YAML::Syck and sees what happens

[21:12] * ruoso just found out that Python doesn't really support threads...

[21:12] <mberends> pmurias: see http://irclog.perlgeek.de/perl6/2009-12-27#i_1870482 through to 07:22

[21:14] *** racheldaBROWN left
[21:14] <ash_> ruoso: python has a GLI, just like ruby, although they are system threads so they get scheduled by the OS which is good

[21:15] <ruoso> but it's not really threading support...

[21:15] <ash_> ruoso: if you want true concurrency in python look up Multiprocessing, it uses sub-process and shared memory to get real parallelism 

[21:15] <ruoso> pretty much what threads::shared does

[21:17] <ruoso> but threads::shared uses threads

[21:17] <ruoso> it's like POE

[21:17] <ruoso> Python is

[21:19] <ash_> stackless python has no GIL, and i know unladen swallow (an experimental python fork integrated with the llvm) is in the process of removing the GIL 

[21:19] <pmurias> YAML::XS seems to require something none UTF-8

[21:20] <mberends> that's right, it's looking for a byte order mark

[21:21] <pmurias> please don't use the BOM

[21:22] <pmurias> what i meant is that it mangles ¢ into Â¢

[21:22] <mberends> no, not using it at all, just getting the error message "Invalid leading UTF-8 octet". oh wait, that's not a BOM.

[21:26] <pugs_svn> r29422 | pmurias++ | [gimme5] remove some noop code 

[21:27] <pugs_svn> r29423 | pmurias++ | use only YAML::XS, it might be spewing out strange things but at least 

[21:27] <pugs_svn> r29423 | it should be compatible with itself

[21:28] <pmurias> mberends: i switched STD to pure YAML::XS

[21:29] *** racheldaBROWN joined
[21:29] <mberends> ok, trying to rebuild STD

[21:29] <ruoso> pmurias, http://github.com/skaphan/stmmap this is something I didn't know... and seems to fit quite well with smop

[21:30] * pmurias checks it

[21:33] <ruoso> Ok... time to go..

[21:33] <lisppaste3> mberends32 pasted "r29423 STD build error for pmurias" at http://paste.lisp.org/display/92839

[21:39] <pmurias> mberends: it works here

[21:39] *** ruoso left
[21:43] <mberends> pmurias: it could not YAML::XS itself over here, but something that YAML::XS depends on.

[21:43] <mberends> *could be

[21:45] *** orafu left
[21:45] <mberends> most Perl modules on this computer are Ubuntu versions, some are now CPAN upgraded. It would make sense to CPAN upgrade them all.

[21:48] *** orafu joined
[21:56] *** perlygatekeeper left
[22:03] *** cdarroch left
[22:04] *** eternaleye joined
[22:09] *** eternaleye left
[22:10] *** xenoterracide joined
[22:11] *** eternaleye joined
[22:11] *** eternaleye left
[22:21] <pmurias> mberends: could you check the what does the program i nopasted do?

[22:22] <pmurias> http://nopaste.info/e0c370dd5c.html

[22:25] *** benkim joined
[22:26] <mberends> pmurias: one success, one failure as predicted

[22:26] <lisppaste3> mberends32 pasted "utf8 test for pmurias" at http://paste.lisp.org/display/92844

[22:28] <mberends> cpan is busy upgrading many modules while the test runs

[22:28] *** kangu_ joined
[22:28] *** kangu left
[22:28] *** benkim left
[22:34] *** patspam left
[22:34] <pmurias> mberends: so it seems YAML::XS does like utf8 marked as such

[22:37] *** KyleHa left
[22:38] <mberends> ouch

[22:40] <pmurias> so what i plan to do is to make sure utf8 doesn't get mangled anywhere and unmark it before passing to YAML::XS

[22:40] <pmurias> OTOH we could just fix YAML::XS

[22:40] <pmurias> nothingmuch: ping

[22:41] <mberends> pmurias: whatever you think is best

[22:41] <pmurias> one is easier the other is more correct

[22:43] *** iblechbot left
[22:46] *** eric256 left
[22:48] <pugs_svn> r29424 | pmurias++ | try unmarking text sent to YAML::XS 

[22:48] <pmurias> mberends: see if that works for you

[22:48] <mberends> ok, right away

[22:50] *** eternaleye joined
[22:53] *** ejs joined
[23:00] <mberends> pmurias: \o/ STD make and ./tryfile ran ok

[23:07] *** colomon left
[23:18] *** soupdragon joined
[23:25] *** Alias_ left
[23:25] <jnthn> phenny: any messages for me?

[23:26] <jnthn> Aww. :-)

[23:26] <jnthn> <- alive, back "properly" in a bit.

[23:27] <mberends> phenny, tell jnthn welcome back

[23:27] <phenny> mberends: I'll pass that on when jnthn is around.

[23:28] <ash_> jnthn: welcome back?

[23:28] <pmurias> mberends: seems the hack works

[23:29] <mberends> pmurias: yes, doing mildew test now :)

[23:31] *** ejs left
[23:34] *** soupdragon left
[23:38] *** bluescreen left
[23:47] *** Guest84746 left
[23:49] *** fridim_ left
[23:50] *** ash_ left
[23:59] *** colomon joined
