[00:08] *** dukeleto left
[00:17] <pugs_svn> r28188 | lwall++ | [S04] clarify semantics of break for masak++ 

[00:26] *** zloyrusskiy joined
[00:30] *** tak11 left
[00:35] *** dukeleto joined
[00:46] *** damyan joined
[00:48] *** frew_ joined
[00:51] *** drbean_ joined
[00:56] *** M_o_C left
[00:59] *** drbean left
[01:08] *** drbean_ left
[01:13] *** drbean joined
[01:13] *** drbean left
[01:15] *** justatheory left
[01:23] *** drbean joined
[01:35] *** nihiliad joined
[01:37] *** drbean_ joined
[01:39] *** frew_ left
[01:40] *** cotto left
[01:44] *** drbean_ left
[01:48] *** Limbic_Region joined
[01:49] *** tak11 joined
[01:54] *** drbean left
[01:55] *** ruoso left
[02:01] *** d4r_delay joined
[02:01] *** d4r_delay left
[02:03] *** Limbic_Region left
[02:07] *** dalek left
[02:08] *** dalek joined
[02:09] *** drbean_ joined
[02:12] *** drbean_ left
[02:14] *** drbean_ joined
[02:19] *** drbean__ joined
[02:22] *** drbean_ left
[02:31] *** zloyrusskiy left
[02:33] *** drbean__ left
[02:36] *** jferrero left
[02:37] *** drbean joined
[02:38] *** drbean left
[02:40] *** alester joined
[02:40] *** meppl left
[02:49] *** drbean joined
[02:49] *** drbean left
[02:54] *** drbean joined
[02:57] *** colomon left
[02:59] *** stephenlb left
[03:00] *** drbean_ joined
[03:01] *** jaldhar joined
[03:03] *** justatheory joined
[03:06] *** sri_kraih left
[03:07] *** xinming_ joined
[03:10] *** drbean__ joined
[03:12] *** meppl joined
[03:15] *** drbean___ joined
[03:17] *** sri_kraih joined
[03:17] *** zostay joined
[03:18] *** drbean left
[03:18] *** drbean__ left
[03:20] *** xinming left
[03:24] <carlin> rakudo: IO.lines

[03:24] <p6eval> rakudo eefd95: OUTPUT«Null PMC access in find_method()␤in method IO::eof (src/gen_setting.pm:1176)␤called from method IO::lines (src/gen_setting.pm:1193)␤called from Main (/tmp/eUjZjPyItD:2)␤»

[03:26] *** drbean_ left
[03:38] *** nathon joined
[03:39] *** nathon left
[03:42] *** drbean___ left
[03:42] *** xomas_ left
[03:43] *** xomas joined
[03:46] *** drbean_ joined
[03:47] *** mepplock joined
[03:51] *** drbean_ left
[03:58] *** justatheory left
[04:02] *** drbean joined
[04:02] *** meppl left
[04:07] *** frew_ joined
[04:08] <dalek> rakudo: 2276af9 | pmichaud++ | docs/spectest-progress.csv:

[04:08] <dalek> rakudo: spectest-progress.csv update: 435 files, 13401 pass, 1 fail

[04:08] <dalek> rakudo: Failure summary:

[04:08] <dalek> rakudo: S32-temporal/Temporal.t 7 - gmtime defaults to current time

[04:08] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/2276af9bc0e5c6df695608ed12db9e206eaca9aa

[04:22] *** JimmyZ joined
[04:46] <jrtayloriv> I'm experiencing the following failures during 'make spectest' on x86_64 Linux: http://pastebin.com/d759611fb

[04:47] <jrtayloriv> (with latest git rakudo sources)

[04:49] <jrtayloriv> ahhh ... when I do './perl6 t/spec/S12-attributes/class.rakudo', I get this: src/call/pcc.c:608: failed assertion 'PObj_is_PMC_TEST(sig_pmc)'

[04:50] <jrtayloriv> oops -- looks like that was already in the backtraces I pastebin'd ... :)

[05:09] *** jaldhar left
[05:10] <pmichaud> S12-attributes/class.rakudo is known, assuming that it reports 0 failures

[05:10] * pmichaud looks at the pastebin

[05:11] <pmichaud> yes, those are known failures

[05:11] <pugs_svn> r28189 | pmichaud++ | [t/spec]:  Fudge/regress a spectest (mis)using contextuals. 

[05:18] *** alester left
[05:26] <jrtayloriv> pmichaud, ok thanks

[05:44] *** tak11 left
[05:46] <dalek> rakudo: 7734f9b | pmichaud++ |  (3 files):

[05:46] <dalek> rakudo: Enable contextual variable definitions and dynamic lookups.

[05:46] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7734f9b38ebb82e50637880c07eb943a35fe7a3b

[05:49] *** nihiliad left
[05:49] <pugs_svn> r28190 | mberends++ | [Temporal.t] improve stability of test 7, replace some floor() with div 

[06:01] *** cotto joined
[06:02] *** SmokeMachine joined
[06:05] *** abra joined
[06:12] *** jaldhar joined
[06:30] *** drbean_ joined
[06:36] *** drbean left
[06:40] *** orafu left
[06:40] *** orafu joined
[07:01] *** buu left
[07:04] *** buu joined
[07:08] <moritz_> OH HAI, I CAN HAZ KONTETKSHUAL VARS IN RADAUKU?

[07:16] <pugs_svn> r28191 | pmichaud++ | [t/spec]:  Add some tests for contextual variables. 

[07:20] <pmichaud> rakudo:  sub foo() { say $*VAR; };   { my $*VAR = 'yes'; foo(); }

[07:21] <p6eval> rakudo 7734f9: OUTPUT«yes␤»

[07:21] <dalek> rakudo: 86a9268 | pmichaud++ | src/classes/Failure.pir:

[07:21] <dalek> rakudo: Update Failure objects to output to contextual $*ERR.

[07:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/86a9268c8db1a43f9c08e4b11ef753ff5b5de0e7

[07:21] <dalek> rakudo: a746af0 | pmichaud++ | Test.pm:

[07:21] <dalek> rakudo: Adjust Test.pir $WARNINGS flag.

[07:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a746af0bebe5f98f8ad7de5dc1c31eff8c77fdff

[07:21] <dalek> rakudo: 8566a62 | pmichaud++ | src/builtins/globals.pir:

[07:21] <dalek> rakudo: Add ability for contextuals to also search  %*ENV.

[07:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8566a62a491b72e6fef9e23918ae4ce5e3c7db77

[07:23] *** tlbdk joined
[07:26] *** cotto left
[07:26] <pmichaud> rakudo:  say $*TERM;

[07:26] <p6eval> rakudo 7734f9:  ( no output )

[07:26] <pmichaud> rakudo:  say $*PATH;

[07:26] <p6eval> rakudo 7734f9:  ( no output )

[07:26] <pmichaud> (not updated yet)

[07:26] <moritz_> not yet updated

[07:27] <moritz_> updating now

[07:27] <pmichaud> oh well, I'll catch it in the morning and write my blog post then

[07:27] <pmichaud> too tired now to write coherently :)

[07:27] <moritz_> sleep well

[07:30] *** jlmoko left
[07:31] *** iblechbot joined
[07:42] *** Confield left
[07:44] <moritz_> rakudo: say $*TERM

[07:44] <p6eval> rakudo 8566a6: OUTPUT«screen␤»

[07:44] <moritz_> rakudo: say $*SHELL

[07:44] <p6eval> rakudo 8566a6: OUTPUT«/bin/bash␤»

[07:45] <mikehh> rakudo (7734f9b) builds on parrot r40989 - make test / make spectest (up to r28191) PASS - Ubuntu 9.04 amd64 (gcc)

[07:46] <mikehh> re-testing with latest stuff

[07:47] *** rfordinal joined
[07:48] <mikehh> rakudo (8566a62) builds on parrot r40989 - make test / make spectest (up to r28191) PASS - Ubuntu 9.04 amd64 (gcc)

[07:51] *** jlmoko joined
[08:15] *** Bzek joined
[08:23] *** xinming joined
[08:26] <jnthn> oh hai oh

[08:27] <jnthn> I made it to Tokyo in one piece. :-)

[08:30] *** sharada joined
[08:31] <mikehh> jnthn: I suppose congratulations are in order no CATastrophy :-}

[08:34] <mberends> jnthn: made it to the intertubes in Tokyo, even better :-)

[08:35] <jnthn> The hotel have an interesting approach to wifi in room.

[08:36] <jnthn> Seems they have a cable style thing throughout the building, so they supply anyone who wants net in the room with a cable modem or some such. :-/

[08:36] <jnthn> Anyway, after I figured out where on earth to plug the thing, it seems to work pretty nicely. :-)

[08:37] *** xinming_ left
[08:40] <jnthn> I'm too jet-lagged to do anything useful with the intertubes though.

[08:40] <jnthn> Unless lolcats are useful... ;-)

[09:11] <pmichaud> jnthn: hurray for safe arrival :)

[09:13] <jnthn> pmichaud: hurray for contextuals too :)

[09:15] * jnthn ponders that this is a curious time for pm to be awake.

[09:17] <pmichaud> it is... can't sleep for some reason

[09:17] <pmichaud> so I decided to hack another feature in :)

[09:17] <jnthn> .oO( protoregexes )

[09:17] <jnthn> ;-)

[09:17] <pmichaud> a working %*ENV

[09:17] *** JimmyZ left
[09:17] <jnthn> ooh

[09:18] <jnthn> shiny

[09:18] <jnthn> Plus will make some folks hapy.

[09:18] <jnthn> *happy

[09:19] *** JimmyZ joined
[09:19] <JimmyZ> rakudo: '小白'.say;

[09:19] <p6eval> rakudo 8566a6: OUTPUT«小白␤»

[09:20] <JimmyZ> Malformed UTF-8 string? Does it need ICU?

[09:20] <pmichaud> usually it gives "ICU not found" exception if it needs ICU

[09:22] <JimmyZ> I ran '小白'.say; but it is  output 'Malformed UTF-8 string'

[09:23] <JimmyZ> It's on windows.

[09:23] <pmichaud> are you doing this from a file, command line, or the interactive prompt ?

[09:23] <JimmyZ> interactive prompt

[09:23] <pmichaud> ah, that's the problem.

[09:23] <pmichaud> the interactive prompt doesn't always understand utf-8

[09:23] <pmichaud> I thought I fixed that already, but apparently not

[09:23] <pmichaud> try it from a file and see if it works

[09:24] *** cognominal left
[09:24] <JimmyZ> command line is the same.

[09:24] <pmichaud> right

[09:24] <pmichaud> has to be from a file

[09:26] <JimmyZ> if it is a ansi file, it is the same too. and if it is saved as utf8, it outputs Syntax error at line 1, near "\ufeff'\u5c0f\u767d'.say;" in Main (src\gen_setting.pm:3470)

[09:27] <pmichaud> it doesn't know what to do with the bom

[09:28] *** cognominal joined
[09:29] <JimmyZ> It can't work.

[09:29] <jnthn> Well that's a bommer.

[09:30] <pmichaud> I'm pretty sure people have been able to make it work under windows.  Anyway, worth filing a ticket.

[09:30] <pmichaud> I wonder if we should get rakudo to skip an optional bom at the beginning

[09:30] <pmichaud> .oO( "Someone set up us the bom" )

[09:31] <JimmyZ> pmichaud: parrot has the same problem too. I removed some code from parrot, so that I can compile it.

[09:31] <pmichaud> JimmyZ: yes, that's likely.

[09:31] <pmichaud> worth filing two tickets then :)

[09:31] <jnthn> pmichaud: I had to rip the bom out a couple of times an editor decided to stick it in for me.

[09:32] <JimmyZ> but, it is works well on irc.

[09:33] <JimmyZ> pmichaud: see TT #888

[09:33] <Patterner> ./perl6 -e "'小白'.say"  # works fine on my linux system

[09:33] <sharada> perl6: sub { "hello" # test }.()

[09:34] <p6eval> rakudo 8566a6: OUTPUT«Unable to parse block; couldn't find final '}' at line 2, near ""␤in Main (src/gen_setting.pm:3470)␤»

[09:34] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting operator or "}"␤    at /tmp/dTw330rqKz line 2, column 1␤»

[09:34] <p6eval> ..elf 28191: OUTPUT«Parse error in: /tmp/z97kcbaNcB␤panic at line 1 column 25 (pos 25): Missing right brace␤WHERE: sub { "hello" # test }.()␤WHERE:                         /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:255:in `_block_rest'␤  STD_red/std.rb:242:in `block in block'␤ 

[09:34] <p6eval> ..STD…

[09:34] <JimmyZ> perl6: sub { "hello" #`(test) }.()

[09:34] <p6eval> pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting operator or "}"␤    at /tmp/RRYxSFjDYY line 2, column 1␤»

[09:34] <p6eval> ..rakudo 8566a6: OUTPUT«Confused at line 2, near ".()"␤in Main (src/gen_setting.pm:3470)␤»

[09:34] <p6eval> ..elf 28191: OUTPUT«Parse error in: /tmp/ao0rJwy1GQ␤panic at line 1 column 27 (pos 27): Missing right brace␤WHERE: sub { "hello" #`(test) }.()␤WHERE:                           /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:255:in `_block_rest'␤  STD_red/std.rb:242:in `block in

[09:34] <p6eval> ..block'␤ …

[09:35] <JimmyZ> Patterner: Yes, also here.

[09:38] <JimmyZ> rakudo: ({ "hello" #`(test) })()

[09:38] <p6eval> rakudo 8566a6: OUTPUT«invoke() not implemented in class 'Perl6Str'␤in Main (/tmp/watm6zLKqp:2)␤»

[09:39] <JimmyZ> rakudo: ( * * * )(5);

[09:39] <p6eval> rakudo 8566a6:  ( no output )

[09:39] <JimmyZ> rakudo: ( * * * )(5).say;

[09:39] <p6eval> rakudo 8566a6: OUTPUT«25␤»

[09:39] <JimmyZ> rakudo: ({$_ * $_})(5).say;

[09:39] <p6eval> rakudo 8566a6: OUTPUT«Use of uninitialized value␤Use of uninitialized value␤invoke() not implemented in class 'Float'␤in Main (/tmp/CUW8p4FISH:2)␤»

[09:46] *** drbean joined
[09:48] *** drbean_ left
[09:50] *** masak joined
[09:50] <masak> hello, #perl6, you fantastic channel you.

[09:51] <sharada> JimmyZ woah!!

[09:51] <sharada> hi masak

[09:51] <sharada> that what how does it work

[09:51] <sharada> * is $_ in that context?

[09:52] <pmichaud> http://news.perlfoundation.org/2009/09/hague_grant_application_rakudo.html  # jnthn++'s latest Hague Grant application, if anyone wishes to comment

[09:53] <masak> sharada: yes. and it creates a closure around the expression, as well, so that the resulting object can be invoked.

[09:53] <masak> wohoo, a jnthn grant application! \o/

[09:53] *** pmurias joined
[09:57] <masak> I have a feeling I'll get a lot of Perl 6 work done today.

[09:57] <masak> question is, what should I focus on?

[10:01] *** frew_ left
[10:01] * jnthn is going to focus on sleep in a moment

[10:02] <jnthn> And yes, comments on the rant app most welcome.

[10:02] <jnthn> erm,

[10:02] <jnthn> grant

[10:02] <masak> :)

[10:02] <masak> jnthn: how's Asia?

[10:02] *** drbean_ joined
[10:03] <jnthn> masak: It's cool to be here, and I enjoyed hanging about in a busy market and a nice park for a while this afternoon (morning was mostly finding the hotel etc)

[10:04] <jnthn> Now though just too tired tot hink...only holding out on sleep so I can do it and not too bad a time and make the jetlag even worse.

[10:04] <masak> sounds reasonable.

[10:04] <jnthn> (well, morning was also immigration, and customs, and the train ride into the center, etc...)

[10:05] <cognominal> jnthn, good sleep, and enjoy japan

[10:05] *** Whiteknight joined
[10:05] <jnthn> Yeah, but I'm really struggling to stay awake. I can't do anything usefl.

[10:05] <jnthn> ah well, I'll try and make it 30 mins more or so, then I'll probably let myself sleep, and hope I don't wake up at too insane a time.

[10:06] <cognominal> what time is it, there?

[10:07] *** drbean left
[10:08] *** drbean joined
[10:08] <jnthn> 7:08 pm

[10:10] <pmichaud> wow, +15h from here

[10:10] <pmichaud> wait, does this mean..... jnthn++ is now from the future too?!?

[10:10] <masak> it does indeed.

[10:14] <masak> by the way, "someone set up us the BOM" should be someone's blog post title.

[10:14] *** sharada left
[10:16] *** drbean left
[10:17] <dalek> rakudo: e8b631c | mberends++ | src/builtins/globals.pir:

[10:17] <dalek> rakudo: [builtins/globals.pir] preload $HOME/.perl6lib and languages/perl6/lib in @*INC

[10:17] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/e8b631cd86ffeaeae8cf930c72ffd4a449e5d521

[10:17] <masak> whoa! :)

[10:18] <mberends> masak: proto is driving Rakudo development ;)

[10:18] <masak> scary :)

[10:19] <moritz_> that's the way it should be - the ecosystem evolves, and Rakudo adapts as needed

[10:19] <pmichaud> I think it was druid before that.  And November before that.

[10:20] <pmichaud> it's a bit breathtaking to see what has happened the year since November's announcement :)

[10:20] <masak> indeed.

[10:21] *** abra left
[10:24] <jnthn> Aye, we've come quite a way.

[10:24] <jnthn> By December it'll be about 2 years since I first started hacking on Rakudo. :-)

[10:25] <jnthn> And Rakudo two years ago had a very different feature set. :-)

[10:26] *** colomon joined
[10:26] <cognominal> what is druid? it is missing from perl6.org

[10:26] *** drbean joined
[10:27] *** drbean left
[10:27] <pmichaud> github.com/masak/druid

[10:28] *** drbean_ left
[10:28] <masak> cognominal: it's a game I wrote nearly a year ago. it stands apart from other connection games in that it shoots up into the third dimension.

[10:29] <dalek> rakudo: 825074a | pmichaud++ | src/ (4 files):

[10:29] <dalek> rakudo: Revise %*ENV processing to resolve RT #57400.

[10:29] <dalek> rakudo: Fix a bug in initialization of contextual variables.

[10:29] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/825074a837fb646e6a6dda8366f6983506a20c25

[10:29] <dalek> rakudo: 6e2104a | pmichaud++ | :

[10:29] <dalek> rakudo: Merge branch 'master' of [email@hidden.address]
[10:29] <masak> cognominal: for quite some time now, it has been waiting to simultaneously burst out into SVG-hood and Web-hood.

[10:29] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6e2104a9ee97bc95941b206c63d5edb28cf4f3f3

[10:29] <pmichaud> rakudo:  say %*ENV.perl;  # this should work when updated

[10:29] <p6eval> rakudo 8566a6: OUTPUT«{"PERL6LIB" => "", "TERM" => "", "SHELL" => "", "USER" => "", "LD_LIBRARY_PATH" => "", "LS_COLORS" => "", "PATH" => "", "MAIL" => "", "PWD" => "", "EDITOR" => "", "LANG" => "", "HISTCONTROL" => "", "HOME" => "", "SHLVL" => "", "LOGNAME" => "", "LESSOPEN" => "", "LESSCLOSE" =>

[10:29] <p6eval> .."", "…

[10:30] <pmichaud> rakudo:  %*ENV<XYZ> = 'hello';   run('say $XYZ');   # so should this

[10:30] <p6eval> rakudo 8566a6: OUTPUT«operation not permitted in safe mode␤in Main (lib/Safe.pm:25)␤»

[10:30] <cognominal> masak, I like all these block grames, pentominoes, tangrams, sliding blocks and the like

[10:31] <masak> cognominal: this is at least slightly related.

[10:31] <pmichaud> I wonder if we could get 'safe mode' to not be enabled for nicks that are deemed to be 'safe' already :-)

[10:31] <cognominal> masak, i think I know a two dimensional version of druid

[10:31] <masak> cognominal: what's it called?

[10:32] *** drbean joined
[10:32] <cognominal> I forgot

[10:32] <masak> heh.

[10:33] <pmichaud> > %*ENV<XYZ> = 'hello';   run('echo $XYZ');

[10:33] <pmichaud> hello

[10:33] <lambdabot>   <no location info>: parse error on input `%*'

[10:33] <masak> the ones I know about are Hex, Gonnect, Quax, Y, Havannah and a few other minor ones.

[10:35] <mberends> pmichaud++ # %*ENV eliminates another ugly hack in Proto

[10:35] <cognominal> That's a impressive game list : http://www.gamerz.net/pbmserv/

[10:36] <masak> aye, gamerz.net is one of those quietly astonishing phenomena.

[10:36] <cognominal> masak, that was probably hex

[10:36] <masak> Hex! \o/

[10:36] <masak> I won't say I'm any good at it, but I've been playing it for seven years now.

[10:36] <masak> it's a very deep and interesting game.

[10:36] <colomon> \

[10:37] *** drbean_ joined
[10:39] <pugs_svn> r28192 | pmichaud++ | [t/spec]:  Unfudge some %*ENV and contextual related tests for Rakudo. 

[10:39] <cognominal> masak, right now, I am addicted to  many combinatory games on my iPhone: Kitten escape,  theseus, subway, unblock me, tanzen, zentomino to name a few

[10:39] <masak> pmichaud++ # fixing RT #57400, a long-standing irritation

[10:39] *** drbean left
[10:40] <masak> the latter two sound familiar, the others don't...

[10:40] <pmichaud> if someone can verify that the issues in that ticket are indeed fixed (and properly tested), I'd be gratified to see that ticket close :)

[10:40] <pmichaud> okay, I'm going to see if I can get a couple of hours sleep before the kids awake

[10:40] <masak> if I were to enter the business as an iPhone app developer, I'd probably be writing connection games.

[10:40] <pmichaud> rakudo:  say %*ENV.perl;  # this should work when updated

[10:40] <p6eval> rakudo 8566a6: OUTPUT«{"PERL6LIB" => "", "TERM" => "", "SHELL" => "", "USER" => "", "LD_LIBRARY_PATH" => "", "LS_COLORS" => "", "PATH" => "", "MAIL" => "", "PWD" => "", "EDITOR" => "", "LANG" => "", "HISTCONTROL" => "", "HOME" => "", "SHLVL" => "", "LOGNAME" => "", "LESSOPEN" => "", "LESSCLOSE" =>

[10:40] <p6eval> .."", "…

[10:40] <cognominal> masak:  http://www.logicmazes.com/theseus.html

[10:40] <pmichaud> hmmm, not yet

[10:41] <pmichaud> afk # sleep

[10:42] *** drbean joined
[10:42] *** drbean left
[10:43] <masak> colomon: ah. nice realization of a simple game mechanics. cool.

[10:43] <masak> s/cs/c/

[10:44] *** drbean_ left
[10:45] <jnthn> OK, rest time....can't stay awake...

[10:46] <jnthn> o/

[10:46] <masak> jnthn: 'night

[10:47] <masak> the latest spec change says 'break' outside of a topicalizer block is a compile-time error.

[10:47] <masak> rakudo: break

[10:47] <p6eval> rakudo 8566a6: OUTPUT«␤»

[10:47] * masak submits rakudobug

[10:47] <masak> std: break

[10:48] <p6eval> std 28191: OUTPUT«ok 00:02 37m␤»

[10:48] <masak> TimToady: ^

[10:57] *** drbean joined
[11:02] *** drbean_ joined
[11:11] <colomon> masak: I can't take credit for that last one... my one-year-old decided to hit some keys when I wasn't looking.

[11:12] <masak> smart one-year-old.

[11:12] *** timbunce joined
[11:12] <masak> anyway, I like Theseus. I suddenly had the urge to write a Theseus maze generator in Perl 6.

[11:13] *** pmurias left
[11:18] <cognominal> masak, indead many of these games are representable by a graph and it is probably some interesting challenge to generate such graphs

[11:19] <masak> cognominal: with Theseus it seems entirely feasible to automate the whole process.

[11:19] <cognominal> http://www.kiragames.com/games/unblockme-free 

[11:20] <masak> let's say the shape of the outer walls of the labyrinth is given, for simplicity's sake.

[11:20] <masak> then the only thing left to fix is the exact layout of the walls.

[11:20] <cognominal> "only thing"  :)

[11:20] *** drbean left
[11:20] <masak> yes, well, hold on. there's more. :)

[11:21] <masak> we can rule out walls which entirely shut off parts of the maze.

[11:21] <masak> since those effectively change the shape of the outer walls, or even make the level trivial or impossible.

[11:22] <cognominal> btw speaking of cocoa, with snow leopard they have closure in C and objective C block.  I hope it will make to the iPhone.

[11:22] *** molaf joined
[11:22] <masak> then, we start moving Theseus around, making the Minotaur make his moves according to the rules. just make every move possible on that level, depth-first. collect every unique game position in a hash.

[11:23] <masak> when the search is done, compare the number of successful paths through the level to the number of deaths.

[11:24] <masak> an interesting level will be one where 0% < p <= 10% of probability of success.

[11:24] <masak> all this can be automated. it might take a very long time, but it can be left running. and it will churn out interesting Theseus levels with a given shape.

[11:27] <cognominal> with all this games, for generating or solving them, one needs some insight to avoid a combinatorial explosion that makes the search too long.

[11:27] <masak> I'll have to try it, but to me the search tree doesn't seem very wide in this case.

[11:29] *** JimmyZ left
[11:29] *** Chillance joined
[11:32] <masak> of course, the combinatorial explosion might arise on the level of selecting the right combination of walls... hm, 2^N... yes, that's probably the tricky part... :)

[11:32] <cognominal> Indeed there is not so many positions possibles

[11:33] *** PZt left
[11:36] *** PacoLinux left
[11:37] <moritz_> exponents kill ;-)

[11:37] <masak> factorials, too.

[11:38] <moritz_> factorials are just mean exponents in disguise

[11:38] <moritz_> log(N!) ~ N * log(N) + O(N)

[11:39] <masak> true, true.

[11:39] <masak> a bit meaner, even.

[11:40] *** Hammit joined
[11:40] <moritz_> hacking the build/Makefile.in and then forgetting to run Configure.pl is annoying ;-)

[11:41] *** leobm joined
[11:41] <cognominal> masak : probably a complex theseus game can be generated by the composition of simpler ones by removing/adding any wall that is irrelevant

[11:42] <masak> pardon, but that sounds like wishful thinking to me.

[11:43] <masak> of course, I'm speculating as much as you are when I say that. working code trumps guesses. :)

[11:46] *** drbean joined
[11:48] *** masak left
[11:57] *** PacoLinux joined
[11:58] <moritz_> now that we have context varialbes in place, we can switch to 'augment class', I think

[11:58] <moritz_> (at least I think that was the blocker)

[12:01] <Hammit> hi guys :) 

[12:01] <moritz_> hello Hammit

[12:01] <Hammit> how will perl6 handle using other languages libraries?

[12:01] <Hammit> like XS in perl5

[12:01] <moritz_> no

[12:01] *** z is now known as astinus

[12:01] *** drbean__ joined
[12:02] <moritz_> Rakudo supports loading of foreign libraries without writing any C glue code

[12:02] <Hammit> :o execellent

[12:02] <moritz_> at least for libraries which are written in another language that is implemented on top of parrot

[12:02] <Hammit> ok

[12:02] <moritz_> so lua, TCL and a bit of ruby work

[12:02] <Hammit> so its got nothing to do with perl6 then?

[12:03] <Hammit> to do more with parrot

[12:03] <moritz_> yes

[12:03] <Hammit> ok

[12:03] <moritz_> the Perl 6 semantics of foreign language interaction are still a bit unclear (at least to me :)

[12:04] <Hammit> do you think that will get fleshed out more later?

[12:04] <Hammit> or do you think it'll be avoided?

[12:04] *** PZt joined
[12:05] <moritz_> it will get fleshed out

[12:05] <Hammit> :)

[12:05] <moritz_> the syntax is pretty clear

[12:05] <moritz_> use SomeModule :from<language>;

[12:05] <Hammit> oh

[12:05] <Hammit> goodie :)

[12:05] <moritz_> and eval($foreign_code, :lang<language>);

[12:05] <Hammit> thaht's quite nice

[12:06] <moritz_> but I don't know if every Perl 6 implementation must support that, and to which extend

[12:06] <Hammit> yeah, ok

[12:06] *** drbean_ left
[12:07] <Hammit> so in some cases, where a c library already exists, it might be better to go perl5 path than re-implement the library on parrot to use in perl6

[12:07] <moritz_> well, parrot can call C libraries just fine

[12:07] <Hammit> oh hehehe

[12:07] <moritz_> so it's mostly a matter of plumbing

[12:08] <Hammit> ok, kewl

[12:08] <moritz_> actually parrot as a compiler that parses .h files and writes NCI signature files for you

[12:08] <Hammit> ok. ta. never heard of the NCI files before

[12:08] *** drbean left
[12:08] <moritz_> it's not complete yet, but it worked for an initial binding of mysql, postgres and sqlite (iirc)

[12:09] <moritz_> NCI = native call interface

[12:09] <Hammit> v.good

[12:09] *** molaf left
[12:09] <Hammit> same for c++ then right

[12:09] <cognominal> I suppose that Perl 6 will be unacceptably slow for a while, but it can gain traction if we can write scripts in Perl 6 that access perl 5 libraries

[12:09] <moritz_> no idea

[12:09] <Hammit> ok

[12:10] <Hammit> so we just write a perl script as per normal in p6, and before we use our p5 module, we turn on p5 compatibility more?

[12:10] <Hammit> mode*

[12:11] <moritz_> in an ideal world we just load the Perl 5 module

[12:11] <moritz_> use DBI :from<perl5>;

[12:12] <moritz_> my $handle = DBI.connect(....);

[12:12] <Hammit> oh...hehehehe of course :)

[12:12] *** drbean joined
[12:12] *** drbean left
[12:12] <cognominal> Hammit,  what blizkost will probably do is to wrap  perl 5 values into perl 6 values

[12:12] <moritz_> my $sth = $handle.prepare_cached('SELECT ...');

[12:12] <cognominal> s/values/containers/

[12:13] <Hammit> ok

[12:13] <cognominal> blizkost is the binding between Perl 6 and Perl 5. It is in its very early stage : less than 2 weeks old

[12:13] <Hammit> oh

[12:14] <Hammit> wow

[12:14] *** masak joined
[12:14] <moritz_> $ perl6 -e 'say eval("3+4", :lang<perl5>)'

[12:14] <moritz_> 7

[12:14] <moritz_> that works locally here

[12:14] <moritz_> rakudo: say eval("3+4", :lang<perl5>)

[12:14] <p6eval> rakudo 6e2104: OUTPUT«7␤»

[12:14] <Hammit> hehehe

[12:14] <moritz_> hey, it even works on the server

[12:14] *** payload left
[12:14] <moritz_> rakudo: say eval("[1, 2]", :lang<perl5>) # no idea if arrays work already

[12:15] <p6eval> rakudo 6e2104: OUTPUT«ARRAY(0x9659900)␤»

[12:15] <moritz_> rakudo: say eval("[1, 2]", :lang<perl5>).[0]

[12:15] <p6eval> rakudo 6e2104: OUTPUT«elements() not implemented in class 'P5Scalar'␤in Main (/tmp/IoxQhO4ObC:2)␤»

[12:15] <moritz_> seems like not ;-)

[12:15] <Hammit> :(

[12:15] <Hammit> ah well...worth a try

[12:15] <cognominal> moritz_,  I am working on it, but I have a lot to learn...

[12:16] *** jbt joined
[12:16] <cognominal> so far the hash and array pmc wrappers exist but they don't contain any method.

[12:17] <cognominal> also, there is currently no way to wrap a perl 5 reference to some perl 6 equivalent.  a capture?

[12:18] <moritz_> or maybe a Parcel?

[12:19] <moritz_> probably both aren't properly implemented in Rakudo yet

[12:19] <cognominal> moritz_, I don't know. I am reading a lot to figure out what's needed. I think, right now a capture would be a good start.

[12:19] <masak> I was present when the Parcel type was invented, but I never really grokked the need for it.

[12:20] <cognominal> I am confused with the commonalites and differences of Parcel, Signature, Capture...

[12:21] <moritz_> well, Signatures and Captures go together...

[12:21] <cognominal> probably things will get clearer when parrot will get there so that jnthn will be able to code them

[12:22] <moritz_> a Signature is something like a template, which contains variables

[12:22] <masak> is there a way to ask a Callable, "hey, if I give you this Capture, would your Signature match it?"

[12:22] <moritz_> and a Capture is a collection of values, and binding that to a signature binds the values to the variables

[12:22] <moritz_> masak: yes, smart matching

[12:22] <moritz_> (but probably NYI)

[12:22] <cognominal> A capture contains values while signature contains types?

[12:22] *** drbean__ left
[12:23] <moritz_> $capture ~~  &thing.signature

[12:23] <moritz_> cognominal: roughly like that, yes

[12:23] <masak> moritz_: ah, yes. thanks.

[12:24] <cognominal> types being classes/roles with constraints

[12:25] *** leobm left
[12:27] *** drbean_ joined
[12:30] *** PZt left
[12:33] *** drbean_ left
[12:33] *** drbean_ joined
[12:36] <moritz_> http://moritz.faui2k3.org/tmp/pg.svg rakudo spectest chart, generated by a Perl 6 module.

[12:38] <masak> \o/

[12:38] <moritz_> working on SVG::Plot has been very much -Ofun

[12:39] <masak> I wish I knew a way to eliminate those thin white lines between the bars...

[12:39] <moritz_> I keep telling myself that it's just a "throw-one-away" prototype for Tufte

[12:39] <moritz_> masak: it's a common rendering bug in various SVG rendering engines

[12:39] <masak> ok.

[12:40] <moritz_> I just multiplied all bar widths by (1 + $small_number)

[12:40] <moritz_> so there are no spaces in between if rendered correctly

[12:40] *** drbean_ left
[12:40] <moritz_> and still they did not disappear

[12:41] <moritz_> so I'm pretty sure it's a rendering bug

[12:43] <masak> I've had similar rendering problems with a generated SVG graph of mine.

[12:43] *** tlbdk left
[12:44] <masak> it's for my Druid OO refactoring blog post... which I still haven't posted. amazing!

[12:44] <masak> it's been in the queue since, I don't know, February.

[12:44] <moritz_> I've been asking myself if I'm sufficiently pissed off by this bug to use SVG paths instead of rects

[12:44] <moritz_> and decided the answer was "no"

[12:44] <masak> oh, the rects cause the problem, do they?

[12:45] <moritz_> because bar charts are just the wrong typo of chart for this set of data

[12:45] *** drbean joined
[12:45] <masak> anyway, the graph looks much better than the old one. moritz_++

[12:46] <moritz_> well, I'm pretty sure that if I used a closed path and then fill it it won't have such artifacts

[12:47] *** sharada joined
[12:47] *** Hammit left
[12:48] <masak> good to know.

[12:52] *** PZt joined
[12:54] <moritz_> (mind you, I didn't try it)

[13:01] *** Chillance left
[13:05] *** sri_kraih_ joined
[13:22] *** sri_kraih left
[13:22] *** sri_kraih_ is now known as sri_kraih

[13:27] *** zloyrusskiy joined
[13:57] *** nihiliad joined
[14:07] *** M_o_C joined
[14:09] *** cotto joined
[14:12] *** r0bby_ joined
[14:23] *** r0bby left
[14:42] *** colomon left
[14:55] *** Psyche^ joined
[14:55] *** Patterner left
[14:55] *** Psyche^ is now known as Patterner

[15:00] <pmichaud> rakudo:  say %*ENV.perl;

[15:01] <p6eval> rakudo 6e2104: OUTPUT«{"LS_COLORS" =>

[15:01] <p6eval> .."no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:…

[15:01] <pmichaud> \o/

[15:03] <masak> 'o-

[15:03] <masak> er, \o/

[15:05] <moritz_> rakudo: $*ENV<LC_COLORS> = ''; say $*ENV.perl

[15:05] <p6eval> rakudo 6e2104: OUTPUT«Method 'postcircumfix:{ }' not found for invocant of class 'Failure'␤»

[15:05] <moritz_> rakudo: %*ENV<LC_COLORS> = ''; say $*ENV.perl

[15:05] <p6eval> rakudo 6e2104: OUTPUT«undef␤»

[15:05] <moritz_> rakudo: %*ENV<LC_COLORS> = ''; say %*ENV.perl

[15:05] <p6eval> rakudo 6e2104: OUTPUT«{"LESSCLOSE" => "/usr/bin/lesspipe \%s \%s", "PATH" => "/usr/local/bin:/usr/bin:/bin:/usr/games", "LS_COLORS" =>

[15:05] <p6eval> .."no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;…

[15:06] * moritz_ just had a set of perl 5 backflashes

[15:07] <pmichaud> hmmmmm

[15:08] <moritz_> rakudo: say (-4/5) < 0

[15:08] <p6eval> rakudo 6e2104: OUTPUT«1␤»

[15:09] <pmichaud> rakudo:  say 4/0;

[15:09] <p6eval> rakudo 6e2104:  ( no output )

[15:09] <pmichaud> rakudo:  say 4/0;

[15:09] <p6eval> rakudo 6e2104:  ( no output )

[15:10] <pmichaud> hmmm

[15:10] <pmichaud> rakudo:  say 4/0;

[15:10] <p6eval> rakudo 6e2104:  ( no output )

[15:10] * pmichaud fixes.

[15:10] <moritz_> pmichaud: if there is Foo.pm and Foo.pir present, currently Rakudo always uses the .pir one - could that be changed to compare the timestamps, and only use the .pir if it's newer than the pm?

[15:11] <pmichaud> it could, yes, but I think there are other issues at play also

[15:11] <pmichaud> for example, what if it finds a .pir in one directory and a .pm in another?

[15:12] <moritz_> good question

[15:12] *** jbt left
[15:12] <pmichaud> in the larger realm of things, I'm suspecting that file timestamps won't be a real criteria

[15:13] <mberends> let's leave these refinements for the future module database

[15:13] <pmichaud> that's been my approach thus far, yes :)

[15:13] <moritz_> and its sensible; I just got bitten by that a few times in the last two days

[15:14] <moritz_> which is why I came up with it now

[15:14] <pmichaud> we could warn or fail if that's the case

[15:14] <moritz_> another solution would be speed up rakudo sufficiently that module precompilation feels much less necessary ;-)

[15:15] *** rfordinal left
[15:15] <cognominal> A question about S05, is there a way to expand a rule within another like in http://gist.github.com/181438

[15:15] *** iblechbot left
[15:17] <pmichaud> cognominal: I'm not aware of a way to do this at present, no.

[15:17] <pmichaud> although I hope your example means it should expand to

[15:17] <pmichaud> token t { [ <a> | <b> | <c> ] | <d> }

[15:18] <cognominal> yes, I was confused

[15:18] <cognominal> but you got the intent

[15:18] <pmichaud> I think that TheDamian's  Grammar::Parse module has a feature similar to that, so we might see something similar show up in S05

[15:19] <pmichaud> it might get difficult when working with something like

[15:19] <cognominal> you mean : Regexp::Grammars?

[15:19] <pmichaud> yeah, that

[15:19] <moritz_> when you implement variable interpolation you don't know all the possible captures at compile time anyway, no?

[15:19] <pmichaud> but it might get difficult with something like

[15:19] <pmichaud>     token t { <=v> | <b> }

[15:20] <pmichaud> er

[15:20] <pmichaud>     token t { <=v> <b> }

[15:20] <pmichaud> because there's not any way to statically determine that <b> results in an array capture

[15:20] *** ispy_ joined
[15:21] *** zloyrusskiy left
[15:22] <pmichaud> (variable interpolations are treated as subrules)

[15:24] <cognominal> pmichaud, I don't get the problem with your example

[15:25] <pmichaud> suppose we have

[15:25] <pmichaud>     token v { <a> | <b> | <c> }

[15:25] <pmichaud> and then we have

[15:25] <pmichaud>     token v { <=v> <d> }

[15:25] <pmichaud> which ought to be the same as

[15:25] *** meteorjay left
[15:26] <pmichaud>     token v { [ <a> | <b> | <c> ] <d> }

[15:26] <pmichaud> $<b> will always be a single match object (if it's the thing that matches)

[15:26] <pmichaud> arggggh

[15:26] <pmichaud> mistypes

[15:26] <pmichaud> let me start over

[15:26] <pmichaud> suppose we have

[15:26] <pmichaud>     token v { <a> | <b> | <c> }

[15:26] <pmichaud> and then we have

[15:26] <pmichaud>      token t { <=v> <d> }

[15:26] <pmichaud> then this should be the same as

[15:27] <pmichaud>     token t { [ <a> | <b> | <c> ] <d> }

[15:27] <pmichaud> however, consider

[15:27] *** mishu joined
[15:27] <pmichaud>      token t2 { <=v> <b> }

[15:27] <pmichaud> which would be the same as

[15:27] <pmichaud>      token t2 { [ <a> | <b> | <c> ] <b> }

[15:27] <pmichaud> in this case, $<b> would end up being an array of match objects, because it appears twice in the same lexical scope

[15:28] <cognominal> ok, got it

[15:28] <pmichaud> but we can't determine that by looking at the   token t2 { <=v> <b> }  definition

[15:29] <masak> ah, intricate.

[15:29] *** mishu left
[15:29] <pmichaud> of course, if one is interested only in the text of <=v>, and not its subtree structure, then we have

[15:30] <pmichaud>     token t { <.v> | <d> }

[15:30] <pmichaud> but I suspect that's not what you're looking for :)

[15:34] <cognominal> One can detect the error at execution time though.

[15:34] <pmichaud> it would require a lot of additional knowledge to do that

[15:34] <cognominal> ok

[15:35] <moritz_> how are captures of interpolated patterns organized

[15:36] <moritz_> s/$/?/

[15:36] <pmichaud> interpolated patterns don't capture by default

[15:36] <pmichaud> one can explicitly capture them, which then answers your question :-)

[15:36] <moritz_> ok

[15:37] <pmichaud> $<xyz>=<$var> /   # capture $var into $<xyz>

[15:37] <TimToady> <xyz=$var> more typically

[15:38] <pmichaud> would the $var in that case be treated as $var or as <$var> ?

[15:38] <TimToady> <$var>

[15:38] <pmichaud> okay

[15:38] <cognominal> really, my proposition does not need to authorize interpolated patterns in the expanded rule to be useful

[15:39] <TimToady> any foo= prefix inside <> is just recursive back to <>

[15:39] <pmichaud> TimToady: got it, thanks

[15:39] <pmichaud> TimToady: did you see my comment about $*XYZ automatically looking in %*ENV<XYZ> as potentially being unsafe ?

[15:39] <TimToady> no, haven't bled yet

[15:39] <pmichaud> okay

[15:40] <TimToady> waiting for coffee...

[15:40] <pmichaud> it was just a one-liner

[15:40] <pmichaud> that feature just reminds me a bit of PHP's "register_globals" and/or superglobals, which have been a big security issue

[15:43] <TimToady> but in that sense I suspect all dynamic variables are unsafe, when you don't know who is going to use your module and fail to init them at every entry point

[15:43] <pmichaud> %*ENV takes it a slight step farther, I think, in that the values come from outside the script

[15:44] <pmichaud> one could suppose that taint checks handle that

[15:44] <TimToady> you can get privilege escalation with sandboxen too

[15:45] <pmichaud> anyway, it was just a thought that occurred to me while implementing it (and given that I've just had to deal with a lot of register_global nastiness in $otherjob)

[15:45] <TimToady> nod

[15:45] <TimToady> I've just been trying to break myself of thinking that the Unix process model was forever

[15:46] <TimToady> so I've tended to look at internal feeds as pipes, etc.

[15:46] *** cotto left
[15:46] *** abra joined
[15:47] <TimToady> and generally think of subprocesses within a program as much as possible like subprocesses outside of programs

[15:47] <TimToady> anyway, will think on it more when the caffeine hits

[15:48] <pmichaud> great.  I don't have a strong opinion, it was more a "minor discomfort that I can easily ignore for a long time"  :)

[15:50] *** cotto joined
[15:50] *** jferrero joined
[15:55] *** justatheory joined
[16:05] <TimToady> std: sub { "hello" #`(test) }.()

[16:05] <p6eval> std 28192: OUTPUT«ok 00:04 37m␤»

[16:06] <sharada> cool

[16:07] <TimToady> just doublechecking something that confused rakudo when JimmyZ tried it earlier

[16:07] <TimToady> rakudo: sub { "hello" #`(test) }.()

[16:07] <p6eval> rakudo 6e2104: OUTPUT«Confused at line 2, near ".()"␤in Main (src/gen_setting.pm:3469)␤»

[16:07] <moritz_> bug, right?

[16:07] <TimToady> but rakudo will presumably get less confused after converging on STD

[16:08] <TimToady> yes, but not necessarily one I'd expect to be fixed before convergence

[16:08] <moritz_> what's so hard about it?

[16:09] <moritz_> I'll open a ticket anyway

[16:09] <TimToady> k

[16:11] *** jrtayloriv left
[16:12] <pmichaud> rakudo:   (sub { 'hello' }).()

[16:12] <p6eval> rakudo 6e2104:  ( no output )

[16:12] <pmichaud> rakudo:   (sub { 'hello' }).().say

[16:12] <p6eval> rakudo 6e2104: OUTPUT«hello␤»

[16:12] <pmichaud> rakudo:   (sub { 'hello' #`(test) }).().say

[16:12] <p6eval> rakudo 6e2104: OUTPUT«hello␤»

[16:13] <moritz_> rakudo:   (sub { "hello" #`(test) }).().say

[16:13] <pmichaud> I think rakudo gets confused by the .() after the "sub block"

[16:13] <p6eval> rakudo 6e2104: OUTPUT«hello␤»

[16:13] <moritz_> rakudo: sub { 'hello' }.()

[16:13] <pmichaud> I'm curious how std breaks down that particular construct

[16:13] <p6eval> rakudo 6e2104: OUTPUT«Confused at line 2, near ".()"␤in Main (src/gen_setting.pm:3469)␤»

[16:14] <TimToady> the intent has been that . after {} treats the {} as terminating an arglist, but it might actually be broken at the moment in STD

[16:14] <pmichaud> rakudo:  { 'hello' }.().say

[16:14] <p6eval> rakudo 6e2104: OUTPUT«hello␤»

[16:14] <pmichaud> rakudo:  { 'hello' #`(test) }.().say

[16:14] <p6eval> rakudo 6e2104: OUTPUT«hello␤»

[16:15] <pmichaud> rakudo:  ({ 'hello' #`(test) }).().say

[16:15] <p6eval> rakudo 6e2104: OUTPUT«invoke() not implemented in class 'Perl6Str'␤in Main (/tmp/N0pRy9YbLz:2)␤»

[16:15] <pmichaud> that one looks bogus

[16:15] <pmichaud> afk # library

[16:15] <TimToady> it's a bare block, so executes immediately

[16:15] <pmichaud> oh, yes, of course.

[16:15] <pmichaud> rakudo++  pmichaud--

[16:17] <TimToady> rakudo: <3 1 4 1 5 9 6 2 5>.sort: { +$_ }.say

[16:17] <p6eval> rakudo 6e2104: OUTPUT«_block61␤invoke() not implemented in class 'Boolean'␤in Main (src/gen_setting.pm:3469)␤»

[16:18] <TimToady> the intent was to support something like that

[16:18] <TimToady> but it might be a bad idea

[16:20] *** M_o_C left
[16:21] <TimToady> it would be better to have something that turns the entire statement into a term for the .say

[16:22] <TimToady> I have at times ponder introducing a ;. operator

[16:22] <TimToady> *pondered

[16:23] <moritz_> rakudo: say (-3.3).Int, ' ', (3.3).Int

[16:23] <p6eval> rakudo 6e2104: OUTPUT«-3 3␤»

[16:25] <TimToady> used to be that truncation policy was a performance win to avoid doing division, but maybe it isn't so much anymore

[16:26] <moritz_> rakudo: say (3/4).Int

[16:26] <p6eval> rakudo 6e2104: OUTPUT«0␤»

[16:30] <TimToady> ooh, I think I might have it.  we can already say $foo\i to disambiguate a postfix, so maybe \\ could do that and whack the precedence back down to term level too

[16:31] <TimToady> that would make it <3 1 4 1 5 9 6 2 5>.sort: { +$_ }\\.say

[16:32] <TimToady> with sort of a visual picture of the .say dominating the left side

[16:33] <moritz_> don't we have pipes for that already?

[16:33] <moritz_>  <3 1 4 1 5 9 6 2 5>.sort: { +$_ } ==> &say

[16:33] <moritz_> or whatever it look like

[16:33] <TimToady> &say is a function, not a method

[16:33] <moritz_> point taken

[16:34] <TimToady> just trying to make a way to keep a string of methods flowing in a rubyescque way

[16:34] <TimToady> but yeah, maybe it's ==> *.say or some such

[16:35] <TimToady> or @(*).say

[16:35] <TimToady> don't remember offheand

[16:35] <TimToady> *hand

[16:35] <TimToady> kinda klunky though

[16:36] <moritz_> maybe @* should be a WhateverList term ;-) (just kidding)

[16:36] <TimToady> and strange for single objects

[16:36] <moritz_> aye

[16:38] *** sri_kraih left
[16:38] <TimToady> otoh it is more visual than <3 1 4 1 5 9 6 2 5>.sort: { +$_ };.say

[16:38] <TimToady> and ;. suffers under golfing out newlines

[16:38] <TimToady> if the intent was $_.say

[16:39] <TimToady> but basically a backwards statement prefix of some sort :)

[16:40] <TimToady> I guess that would be a statement postfix...

[16:45] <TimToady> like "done", "gatethed", "tried", "voided"  :)

[16:45] <TimToady> *gathered

[16:48] *** frew_ joined
[16:48] *** masak left
[16:53] <TimToady> well, parens are usually better, and already there :)

[16:59] <moritz_> http://moritz.faui2k3.org/tmp/lines-neg.svg # SVG::Plot now understand ranges that don't begin from 0

[17:02] *** tak11 joined
[17:05] *** justatheory left
[17:11] *** sparc joined
[17:14] *** frew_ left
[17:22] *** justatheory joined
[17:27] *** jrtayloriv joined
[17:44] *** tak11 left
[17:46] *** payload joined
[17:49] <TimToady> pmichaud: I don't see your $*XYZ comment anywhere in the log

[17:53] <TimToady> but yeah, we should probably make the user explicitly say our $*XYZ = %*ENV<XYZ> in GLOBAL, which is pretty easy since UNIT starts in GLOBAL

[17:55] <TimToady> or rather our $XYZ, if we drop * in packages

[18:02] *** Bzek left
[18:03] <pugs_svn> r28193 | lwall++ | [S02] obliterate fallback from contextuals to %*ENV as a trust issue 

[18:03] <TimToady> pmichaud++

[18:03] <TimToady> which reminds me, does rakudo have a story on tainting yet?

[18:06] <TimToady> afk &

[18:12] <dukeleto> it would be super cool if someone added rakudo examples to http://en.wikipedia.org/wiki/Multiple_dispatch

[18:13] *** abra left
[18:14] *** abra joined
[18:14] *** abra left
[18:15] *** abra joined
[18:15] *** abra left
[18:16] *** abra joined
[18:17] *** timbunce left
[18:18] *** abra left
[18:18] *** donaldh joined
[18:19] *** iblechbot joined
[18:21] *** frew_ joined
[18:22] *** abra joined
[18:23] *** abra left
[18:24] *** abra joined
[18:26] <pmichaud> <3 1 4 1 5 9 6 2 5>.sort(+*).say

[18:26] <pmichaud> rakudo: <3 1 4 1 5 9 6 2 5>.sort(+*).say

[18:26] <p6eval> rakudo 6e2104: OUTPUT«112345569␤»

[18:26] <pmichaud> seems hard to beat that :-)

[18:28] <pmichaud> TimToady: rakudo doesn't have a tainting story yet, but Parrot is supposedly planning to develop a story for that also.

[18:28] *** donaldh_ joined
[18:28] <pmichaud> so I've mainly been waiting to see if/when the Perl 6 and Parrot stories converge :)

[18:29] * dukeleto likes stories

[18:45] *** donaldh left
[18:47] *** molaf joined
[18:48] *** donaldh_ left
[18:50] *** Zloyrusskiy joined
[18:51] *** Zloyrusskiy left
[18:52] *** Zloyrusskiy joined
[18:53] *** Zloyrusskiy left
[18:53] <cognominal> I have to get used to think Whatever when an * appear in an operand position. On the other hand it is such a powerful way to dwim when you don't know how to say what you mean that it will not be difficult once supported everywhere.

[18:55] <cognominal> I guess that's what so special about Perl. You think a feature a is just trouble and before you know it you can't live without it.

[18:56] <cognominal> I am sure the camelia logo is no different.

[18:58] *** Zloyrusskiy joined
[19:04] *** jaldhar left
[19:13] <dukeleto> camelia rocks. we need stickers

[19:23] *** jaldhar joined
[19:31] *** ispy_ left
[19:31] *** Whiteknight left
[19:39] <pmichaud> I can put stickers up on the cafepress/zazzle sites :)

[19:40] <pmichaud> draft of Rakudo day posting:  http://pmichaud.com/wiki/Perl6/Context

[19:40] <pmichaud> comments and suggestions welcomed

[19:41] *** nihiliad left
[19:44] <pmichaud> cognominal: (Whatever, * and dwim)  I think it's a similar story as the smart match operator.  When you first look at it, one thinks "trouble", but after a while it's just so powerful and natural...

[19:48] *** synth joined
[19:52] *** molaf left
[19:55] *** jrtayloriv left
[19:56] *** abra left
[19:57] <pmichaud> http://use.perl.org/~pmichaud/journal/39585  # rakudo day posting

[19:57] *** Zloyrusskiy left
[19:58] *** jrtayloriv joined
[20:00] *** Zloyrusskiy joined
[20:08] *** drbean left
[20:08] *** drbean joined
[20:09] *** icwiener joined
[20:12] *** drbean left
[20:14] *** mattp_ left
[20:16] <cognominal> pmichaud, I have not followed closely contextual variable but I am not sure to grasp the difference with temporary variables. Also, when I grep as see a lot of variables with the * twigil declared as temp.

[20:18] <cognominal> probably contxtual variables have  to do  with the GLOBAL and PROCESS space while temparory variable don't and my grep hits  fossils

[20:21] *** xomas left
[20:25] *** synth^2 joined
[20:25] *** synth^2 left
[20:27] *** sri_kraih joined
[20:29] *** drbean joined
[20:29] *** jlmoko left
[20:31] *** sri_kraih left
[20:33] *** jlmoko joined
[20:48] *** drbean left
[20:50] *** drbean joined
[20:53] <pmichaud> cognominal: yes, I suspect your grep is hitting fossils.  Previously  $*foo meant just 'global'

[20:54] <pmichaud> one of the primary differences between a contextual and a temp is that the outer contextuals are still available

[20:54] <pmichaud> for example,   my $*OUT = ...   still leaves $PROCESS::OUT available

[20:55] <pmichaud> afk, nap

[20:55] <cognominal> thx.  I am tired, see you tomorrow

[20:56] *** drbean left
[20:56] *** drbean joined
[21:09] *** sri_kraih joined
[21:09] *** drbean left
[21:12] *** sri_kraih left
[21:12] *** sri_kraih joined
[21:12] *** sri_kraih left
[21:13] *** sri_kraih joined
[21:13] *** sri_kraih left
[21:13] *** sri_kraih joined
[21:17] *** tylerni7 left
[21:18] *** synth left
[21:24] *** tylerni7 joined
[21:29] *** drbean joined
[21:32] *** iblechbot left
[21:36] *** drbean left
[21:58] *** Zloyrusskiy left
[22:01] *** Whiteknight joined
[22:01] *** drbean joined
[22:06] *** synth joined
[22:18] *** drbean left
[22:33] *** payload left
[22:34] *** drbean joined
[22:45] *** drbean left
[22:47] *** drbean joined
[22:52] <mikehh> forgot to report rakudo (6e2104a) builds on parrot r41004 - make test / make spectest (up to r28192) PASS - Ubuntu 9.04 amd64 (g++)

[22:53] *** drbean_ joined
[22:54] *** drbean left
[22:55] <mikehh> rakudo (6e2104a) builds on parrot r41019 - make test / make spectest (up to r28193) PASS - Ubuntu 9.04 amd64 (gcc)

[22:59] *** hjs joined
[23:00] *** drbean joined
[23:01] *** drbean left
[23:01] *** alester joined
[23:02] *** alester left
[23:03] *** alester joined
[23:05] *** drbean joined
[23:09] *** drbean left
[23:10] *** drbean joined
[23:16] *** frew_ left
[23:20] *** sharada left
[23:22] *** drbean__ joined
[23:23] *** drbean_ left
[23:24] *** drbean__ left
[23:25] *** jferrero left
[23:27] *** frew_ joined
[23:30] *** _jaldhar joined
[23:34] *** drbean left
[23:36] *** _jaldhar left
[23:36] *** _jaldhar joined
[23:37] *** drbean joined
[23:41] *** _jaldhar left
[23:41] *** _jaldhar joined
[23:42] *** jaldhar left
[23:51] *** masak joined
[23:52] <masak> oh hai. wonky connection, etc.

[23:52] <masak> is the following bug known/reported?

[23:52] <masak> rakudo: my $x = 'foo'; (class { method bar { say $x } }).new.bar

[23:52] <p6eval> rakudo 6e2104: OUTPUT«Lexical '$x' not found␤»

[23:56] <masak> it's no biggie, but it did stop me in the tracks of writing this: http://gist.github.com/181565

[23:56] <masak> using a fluent interface with chained methods felt like a cute thing to do. the workaround would be to have four normal methods. :)

[23:57] *** mepplock left
