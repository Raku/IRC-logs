[00:06] *** dukeleto joined
[00:08] *** SmokeMachine left
[00:08] *** hercynium left
[00:10] *** nihiliad joined
[00:12] *** rhr_ joined
[00:13] *** synth joined
[00:16] *** rhr left
[00:19] *** ihrd joined
[00:23] *** SmokeMachine joined
[00:23] *** freenose left
[00:28] *** arthur-_ left
[00:33] *** ihrd left
[00:40] *** __ash__ joined
[00:41] *** sri_kraih_ joined
[00:45] *** drbean left
[00:45] *** nErVe joined
[00:46] *** elton_ left
[00:48] *** sri_kraih left
[00:48] *** sri_kraih_ is now known as sri_kraih

[00:51] *** sri_kraih left
[00:52] <colomon> rakudo: class Foo { has $.x; multi method bar($baz = 'default') { say $baz; }; }; my $a = Foo.new(x => 2); $a.bar;

[00:52] <p6eval> rakudo 446d49:  ( no output )

[00:53] <colomon> std: class Foo { has $.x; multi method bar($baz = 'default') { say $baz; }; }; my $a = Foo.new(x => 2); $a.bar;

[00:53] <p6eval> std 28215:  ( no output )

[00:53] <colomon> std: class Foo { has $.x; multi method bar($baz = 'default') { say $baz; }; }; my $a = Foo.new; $a.bar;

[00:53] <p6eval> std 28215: OUTPUT«ok 00:03 40m␤»

[00:54] <colomon> rakudo: class Foo { has $.x; multi method bar($baz = 'default') { say $baz; }; }; my $a = Foo.new; $a.bar;

[00:54] <p6eval> rakudo 446d49:  ( no output )

[00:54] *** sharada left
[00:54] *** rfordinal left
[00:55] *** rfordinal joined
[00:55] *** arthur-_ joined
[00:56] *** sri_kraih joined
[00:58] <colomon> Anyone out there know if "is export" is actually implemented yet?

[01:00] <__ash__> should be, the tests aren't fudges for rakudo, so i  would assume they work

[01:00] <__ash__> t/spec/S11-modules/export.t has the relevant tests 

[01:02] <colomon> thanks, I'll take a look

[01:04] *** M_o_C left
[01:05] <colomon> __ash__++

[01:05] <__ash__> do you know if you can drop down to PIR code in perl6?

[01:05] <colomon> Yes, see for example src/setting/Num.pm

[01:06] <colomon> Mind you, I don't understand any of that, but Q:PIR is all over that file.

[01:07] *** SmokeMachine left
[01:07] <Confield> Is @_ going to be in Perl 6?

[01:08] <__ash__> cool, thanks, didn't know about that colomon

[01:08] <__ash__> colomon++

[01:08] <__ash__> Confield yeah, its in perl 6

[01:08] <colomon> __ash__: None of the tests in export.t actually test the method XXX is export format which is all over Num.pm.  (Which is why I had that file open.)

[01:11] *** mikehh_ joined
[01:13] *** Whiteknight left
[01:15] <Confield> __ash__: what are some ways around using @_? As a beginner I hate it. Maybe this way? http://www.shadowcat.co.uk/archive/conference-video/yapc-eu-2009/whyperl/

[01:17] *** rfordinal left
[01:18] <__ash__> using @_ isn't really required if you want to use named params or set up your function to take a set number of params

[01:19] *** hercynium joined
[01:20] *** wayland76 left
[01:20] <Confield> ok

[01:20] <colomon> Wow, I've so little used @_ in Perl 6 I forgot that was what it did!  :)

[01:20] *** wayland76 joined
[01:21] <lisppaste3> colomon pasted "method is export test" at http://paste.lisp.org/display/86839

[01:23] <colomon> __ash__: That paste shows how I think is export should work on class methods.  But it doesn't, the third test gets "Could not find non-existent sub bar".

[01:23] <colomon> Of course, I may have no clue how is export actually works.

[01:25] *** mikehh left
[01:25] <__ash__> do Bar::bar

[01:25] <__ash__> last line should be is(Bar::bar($a)... etc.

[01:26] <__ash__> indirect method calling doesn't work on class methods currently

[01:26] <__ash__> eventually doing bar $a: ; should be valid (which is the indirect way of calling bar) 

[01:28] <colomon> Ah.

[01:29] <colomon> Well, that let's me set up a test that works, so I guess I should check it in.  But it doesn't help with my actual problem at all.

[01:29] <__ash__> what is the problem? I am not sure i understand whats wrong

[01:30] <pugs_svn> r28216 | colomon++ | [t/spec] Add tests of "is export" on class method. 

[01:32] <colomon> I've been trying to track down why the $angle.num($base).sin('degrees') tests don't work in trig.t.

[01:32] <colomon> It works fine if I just call it here...

[01:32] <colomon> rakudo: say 360.0.sin("degrees");

[01:32] <p6eval> rakudo 446d49: OUTPUT«-2.44921270764475e-16␤»

[01:33] <colomon> But it fails with "too many arguments passed (2) - 1 param expected" in trig.t.

[01:33] <colomon> I thought it might have something to do with "is export" behaving oddly with default params, but the tests I just checked in work fine.

[01:35] <__ash__> my $angle = 180; $angle.num(10).sin('degrees'); right? throws that error

[01:36] <colomon> rakudo: my $angle = 180.0; $angle.in('degrees');

[01:36] <p6eval> rakudo 446d49: OUTPUT«Method 'in' not found for invocant of class 'Num'␤»

[01:36] <colomon> rakudo: my $angle = 180.0; $angle.sin('degrees');

[01:36] <p6eval> rakudo 446d49:  ( no output )

[01:37] <__ash__> so it only happens when you chain the methods? 

[01:37] <colomon> Assuming that last test was the error, it looks like calling from a variable is part of the issue?

[01:38] <__ash__> rakudo: my $angle = 180.0; say $angle.sin('degrees');

[01:38] <p6eval> rakudo 446d49: OUTPUT«1.22460635382238e-16␤»

[01:38] <colomon> good catch.

[01:38] <colomon> rakudo: my $angle = 180.0; say $angle.Num.in('degrees');

[01:38] <p6eval> rakudo 446d49: OUTPUT«Method 'Num' not found for invocant of class 'Num'␤»

[01:38] <colomon> Dang it, cut n paste issues.

[01:39] <colomon> rakudo: my $angle = 180.0; say $angle.Num.sin('degrees');

[01:39] <p6eval> rakudo 446d49: OUTPUT«Method 'Num' not found for invocant of class 'Num'␤»

[01:39] <__ash__> rakudo: my $angle = 180.0; say $angle.Num::sin('degrees');

[01:39] <p6eval> rakudo 446d49: OUTPUT«1.22460635382238e-16␤»

[01:39] <__ash__> shouldn't that be 0? 

[01:39] <colomon> Round-off error, no big deal.

[01:40] <__ash__> ah, got ya

[01:40] <__ash__> If you want to explicitly call a function on an object you do $var.Class::method();  btw

[01:41] *** rhr joined
[01:41] <colomon> Right, I was trying to convert $angle to a Num and then call sin on it.

[01:41] <colomon> Thought it was probably a Float instead of a Num.

[01:42] <__ash__> rakudo: say 1.5.WHAT;

[01:42] <p6eval> rakudo 446d49: OUTPUT«Num()␤»

[01:42] <__ash__> i don't think perl6 has a generic float, i think its called Num 

[01:42] <colomon> There is a Float type that pops up, I think it's from Parrot.  Numbers are still all funky in Rakudo.

[01:43] <__ash__> yeah, Num does inherit from parrot's Float

[01:45] <colomon> I'm very tempted to implement Num::Num just so I don't have to see that message any more...

[01:47] <colomon> __ash__: Can you try S32-trig/trig.t if you've got a minute or two?  I'd like to see if you get the same problem I'm getting.

[01:48] *** sri_kraih left
[01:48] *** sri_kraih joined
[01:48] <__ash__> alright, i am running the tests in it

[01:49] <colomon> That should work, then delete line 301 #?rakudo skip "method .sin plus base doesn't seem to work?" and try again?

[01:50] <__ash__> k, it fudged them so i got 0 errors, i'll unfudge that line

[01:52] <__ash__> line 302 died on me, too many arguments passed

[01:52] <colomon> Okay, so it's not just me.  __ash__++

[01:53] *** rhr_ left
[01:54] *** nErVe left
[01:55] <__ash__> my $a = 5; $a.Num.sin('degrees');

[01:55] <__ash__> rakudo: my $a = 5; $a.Num.sin('degrees');

[01:55] <p6eval> rakudo 446d49:  ( no output )

[01:56] <__ash__> can you tell what version p6eval is? 

[01:56] <__ash__> cause that last line i wrote causes the error for me

[01:56] <__ash__> but apparently not for p6eval

[01:57] *** rhr_ joined
[01:59] <colomon> 446d69 is a  Mon Sep 7 check in to git.

[02:00] <__ash__> colomon: try my $a = 5; $a.Num.sin('degrees'); and then try my $a = 5; say Num::sin($a.Num, 'degrees');

[02:00] <colomon> I'm actually using a more recent rakudo than that.  :)

[02:00] <__ash__> me too

[02:00] *** rhr left
[02:02] *** justatheory left
[02:03] *** alester left
[02:03] <__ash__> rakudo: my $a = 5; say $a.Num.sin('degrees');

[02:03] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/0ttIgQbEQc:2)␤»

[02:03] <__ash__> rakudo: rakudo: my $a = 5; say Num::sin($a.Num, 'degrees');

[02:03] <p6eval> rakudo 446d49: OUTPUT«Confused at line 2, near ": my $a = "␤in Main (src/gen_setting.pm:3469)␤»

[02:04] <__ash__> rakudo: my $a = 5; say Num::sin($a.Num, 'degrees');

[02:04] <p6eval> rakudo 446d49: OUTPUT«0.0871557427476582␤»

[02:04] <__ash__> so, for whatever reason its when it converts the Int to a Num I think

[02:04] <__ash__> thats causing the problem

[02:05] <colomon> rakudo: say 360.Num.sin('degrees');

[02:05] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/EkJU7yD2vm:2)␤»

[02:05] <__ash__> vs

[02:05] <colomon> rakudo: say (360 * 1.0).Num.sin('degrees');

[02:05] <__ash__> rakudo: say 360.0.sin('degrees');

[02:05] <p6eval> rakudo 446d49: OUTPUT«Method 'Num' not found for invocant of class 'Float'␤»

[02:05] <p6eval> rakudo 446d49: OUTPUT«-2.44921270764475e-16␤»

[02:06] <colomon> hey, there's the float sneaking in.  :)

[02:06] <colomon> rakudo: say (360 * 1.0).sin('degrees');

[02:06] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/E9hh0aqmQZ:2)␤»

[02:06] <__ash__> 360.0.sin('degrees'); works, but 360.Num.sin('degrees'); doesn't;

[02:07] <__ash__> rakudo: say (1.0 * 2).WHAT;

[02:07] <p6eval> rakudo 446d49: OUTPUT«Num()␤»

[02:07] <colomon> rakudo: say 360.0.WHAT

[02:07] <p6eval> rakudo 446d49: OUTPUT«Num()␤»

[02:07] <__ash__> thats weird how that float came in

[02:11] <colomon> So, this is both enlightening and mystifying.  :)

[02:14] *** rhr joined
[02:15] *** buubot left
[02:15] *** buubot joined
[02:15] <colomon> reckon I should submit that as a bug?

[02:16] <__ash__> yeah

[02:16] <__ash__> it would be worth noting

[02:16] <colomon> okay, I'm going to repeat some here just to get a clean sample.  :)

[02:16] <__ash__> i am looking at the PAST to see if there is any problems with that, i don't think so, i think it might be related to how it converts an Int to a Num

[02:17] <colomon> thanks!

[02:17] <colomon> rakudo: say 5.Num.sin('degrees');

[02:17] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/ikAjKOkV3I:2)␤»

[02:17] <colomon> rakudo: say 5.0.sin('degrees');

[02:17] <p6eval> rakudo 446d49: OUTPUT«0.0871557427476582␤»

[02:17] <colomon> rakudo: say (5 * 1.0).sin('degrees');

[02:17] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/DZhXZHeJmV:2)␤»

[02:19] <colomon> rakudo: say 5.sin('degrees');

[02:19] <p6eval> rakudo 446d49: OUTPUT«0.0871557427476582␤»

[02:20] <__ash__> it has to be related to that

[02:20] <colomon> The PAST, you mean?

[02:20] <colomon> (whatever that is?)

[02:20] <__ash__> i know doing 5.Num.WHAT says NUM but looking at the trace=1 its calling the sin in 2 different ways 

[02:21] <colomon> interesting.

[02:21] <__ash__> do perl6 --trace=1 some_file.pl where some_file.pl only contains the failing test (lots of junk is spit out

[02:21] <__ash__> )

[02:21] <colomon> Bug is reported, RT #69076.

[02:22] <__ash__> --trace=1 basically prints the opt codes before they are executed

[02:23] <__ash__> i see, when you do 5.Num its passing a float around inside and calling the float's version of sin which doesn't have a 2nd parameter for degrees

[02:23] <__ash__> (I think)

[02:25] <__ash__> yup, if you look at the last line before the exception is thrown in the trace output its calling sin on P8 (for me) which is a Float not a Num, so its doing the wrong lookup

[02:26] <colomon> __ash__++

[02:26] <__ash__> and in parrot/src/pmc/float.pmc line 536, float's sin doesn't take any parameters but itself

[02:27] *** rhr_ left
[02:28] *** alester joined
[02:29] <colomon> Any clue how to fix it?

[02:30] <__ash__> yeah, lines 5~7 need reworking in rakudo/src/setting/Int.pm

[02:31] <colomon> Int::Num is wrong?

[02:32] <__ash__> yeah, its not being cast to the right type

[02:35] <__ash__> doing $N0 = self converts the self object into a PASM number which is a Float, not a Num, i know calling 5.Num.WHAT returns Num for whatever reason, but its looking in the Float namespace for the sin function instead of the Num namespace 

[02:39] <__ash__> here is another example of what I am referring to

[02:39] <__ash__> rakudo: say 5.5.can('sin');

[02:39] <p6eval> rakudo 446d49: OUTPUT«sin␤»

[02:39] <__ash__> rakudo: say 5.Num.can('sin');

[02:39] <p6eval> rakudo 446d49:  ( no output )

[02:39] <__ash__> that should of said 'sin'

[02:40] <__ash__> rakudo: say 5.0.can('sin');

[02:40] <p6eval> rakudo 446d49: OUTPUT«sin␤»

[02:41] *** cdarroch left
[02:45] *** stephenl1 is now known as stephenlb

[02:46] <colomon> Any idea how we should take this from here?

[02:48] *** payload left
[02:49] <__ash__> not sure exactly, i am looking around to see if anything sparks any ideas

[02:49] <__ash__> ooo, look at this

[02:49] <__ash__> rak

[02:50] <__ash__> rakudo: say 5.5.sin('degrees');

[02:50] <p6eval> rakudo 446d49: OUTPUT«0.095845752520224␤»

[02:50] <__ash__> oops, i mean: 

[02:50] <__ash__> rakudo: say 5.5.*sin('degrees');

[02:50] <p6eval> rakudo 446d49: OUTPUT«0.095845752520224␤»

[02:50] <__ash__> rakudo: say 5.Num.**sin('degrees');

[02:50] <p6eval> rakudo 446d49: OUTPUT«Confused at line 2, near ".**sin('de"␤in Main (src/gen_setting.pm:3469)␤»

[02:50] <__ash__> rakudo: say 5.Num.*sin('degrees');

[02:50] <__ash__> i can't type right now

[02:50] <p6eval> rakudo 446d49: OUTPUT«get_iter() not implemented in class 'NCI'␤in Main (/tmp/6VOTeeo6yg:2)␤»

[02:54] *** huf_ joined
[02:56] *** sevvie_ joined
[02:59] *** sevvie left
[03:00] <colomon> I need to be getting to bed.  But you've made awesome progress here, thanks!

[03:02] <__ash__> no problem, i'll update the bug report with what i found to see if its useful

[03:02] <colomon> I'm predicting this will be fixed by someone tomorrow.  :)

[03:06] *** sm` left
[03:06] *** sm` joined
[03:17] *** sharada joined
[03:23] *** ab5tract left
[03:29] *** hercynium left
[03:31] *** zpmorgan left
[03:35] *** JimmyZ joined
[03:41] *** mepplock joined
[03:46] <__ash__> rakudo: say 1 /  0;

[03:46] <p6eval> rakudo 446d49:  ( no output )

[03:46] <__ash__> say 1.0 / 0;

[03:46] <__ash__> rakudo: say 1.0 /  0 ;

[03:46] <p6eval> rakudo 446d49:  ( no output )

[03:55] <spinclad> [backlogging from 'second system' discussion...]  'elephantine' is an old word for ivory... so imagine Perl 6 a procession of feature-laden elephants, carved in a single tusk.

[03:56] <spinclad> (q: but is this properly 'monstrous'?  a: it is indeed a great wonder to behold!)

[03:56] <JimmyZ> rakudo: (1/0).say;

[03:56] <p6eval> rakudo 446d49:  ( no output )

[03:56] *** meppl left
[03:56] <spinclad> rakudo: Inf.say

[03:56] <p6eval> rakudo 446d49: OUTPUT«Inf␤»

[04:00] *** nihiliad left
[04:09] *** synth left
[04:12] *** synth joined
[04:18] <__ash__> how does one add stuff to a bug report in perl bug ?

[04:23] *** drbean joined
[04:24] <dukeleto> __ash__: what do you mean?

[04:24] <__ash__> i figured it out, nevermind

[04:26] *** asciiville joined
[04:29] <asciiville> I wish #perl6 was on cable tv...

[04:29] *** sharada left
[04:29] <pmichaud> it isn't?

[04:30] <asciiville> :)

[04:30] *** tak11 left
[04:36] <asciiville> I am thinking about creating a long-winded post for the parrot-dev mail list to consider SQLite3 to be the default, embedded DB for Parrot, kind of like it is for PHP, and later Pythons

[04:38] <__ash__> http://rt.perl.org/rt3/Ticket/Display.html?id=69076 anyone have any comments on this? 

[04:39] <__ash__> how do you convert from one type to another explicitly? 

[04:41] <asciiville> I thought casting was an evil side effect of Java. :)

[04:42] <asciiville> er, uh, until generics of course

[04:42] <__ash__> but what if you want something to be a specific type? 

[04:43] *** stephenlb left
[04:43] <asciiville> autoboxing wouldn't help there I assume?

[04:44] <__ash__> rakudo: say "5.5".sin('degrees');

[04:44] <p6eval> rakudo 446d49: OUTPUT«Method 'Num' not found for invocant of class 'Str'␤»

[04:44] <__ash__> rakudo: say 5.5.sin('degrees');

[04:44] <asciiville> oh well :)

[04:44] <p6eval> rakudo 446d49: OUTPUT«0.095845752520224␤»

[04:44] <__ash__> rakudo: say 5.Num.sin('degrees');

[04:44] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/Y7vDSDQGfj:2)␤»

[04:45] <__ash__> stuffs not being cast to the right data types in those conversions

[04:45] <__ash__> thats why i wana know how to explicitly cast :P 

[04:45] <asciiville> rakudo: say (5.5).sin('degrees')

[04:45] <p6eval> rakudo 446d49: OUTPUT«0.095845752520224␤»

[04:46] <asciiville> rakudo: say (5.5).sin('radians')

[04:46] <p6eval> rakudo 446d49: OUTPUT«-0.705540325570392␤»

[04:46] <asciiville> rakudo: say "5.5".sin('radians')

[04:46] <p6eval> rakudo 446d49: OUTPUT«Method 'Num' not found for invocant of class 'Str'␤»

[04:46] <pmichaud> rakudo:  say "5.5".Num

[04:46] <p6eval> rakudo 446d49: OUTPUT«Method 'Num' not found for invocant of class 'Str'␤»

[04:47] <pmichaud> seems like we ought to fix that.

[04:47] <asciiville> Java do it with a "Something.valueOf"

[04:47] <__ash__> Int::Num isn't working like you'd exepct either i think

[04:47] <pmichaud> rakudo:  say 5.Num

[04:47] <p6eval> rakudo 446d49: OUTPUT«5␤»

[04:48] <__ash__> rakudo: say 1.Num.*sin('degrees');

[04:48] <pmichaud> rakudo:  say 5.Num.WHAT

[04:48] <p6eval> rakudo 446d49: OUTPUT«get_iter() not implemented in class 'NCI'␤in Main (/tmp/I8Q7je26EJ:2)␤»

[04:48] <p6eval> rakudo 446d49: OUTPUT«Num()␤»

[04:48] <asciiville> NCI?

[04:48] <__ash__> rakudo: say 1.0.*sin('degrees');

[04:48] <p6eval> rakudo 446d49: OUTPUT«0.0174524064372835␤»

[04:48] <pmichaud> oh, the fact that .* isn't working has to do with the fact that the sin() method appears to have been written in PIR

[04:48] <pmichaud> checking

[04:48] <__ash__> only 1 version of sin

[04:48] <pmichaud> that's enough to cause a problem.

[04:48] <__ash__> there is a sin in Num and a sin in Parrot's Float

[04:49] <s1n> and a s1n in #perl6 :)

[04:49] <asciiville> :)

[04:49] <__ash__> I don't get why 1.Num.sin('degrees') calls the Float sine not the Num sine too

[04:49] <asciiville> "5.5".s1n('radians')

[04:49] <asciiville> carp

[04:49] <pmichaud> rakudo:  say 1.Num.PARROT

[04:49] <p6eval> rakudo 446d49: OUTPUT«Float␤»

[04:49] <asciiville> rakudo: "5.5".s1n('radians')

[04:49] <p6eval> rakudo 446d49: OUTPUT«Method 's1n' not found for invocant of class 'Str'␤»

[04:49] <pmichaud> That's why.

[04:50] <pmichaud> 1.Num is returning a Parrot Float.

[04:50] <s1n> OUTPUT«-0.705540325570392␤»

[04:50] <pmichaud> and calling .sin on a Parrot Float gets us the Parrot .sin method

[04:50] <s1n> :)

[04:50] <__ash__> ah, well, i didn't know about that..., any way to coerce it a Num? 

[04:50] <pmichaud> sure

[04:50] <pmichaud> in Int.pm

[04:50] <asciiville> rakudo: (Num).WHAT

[04:50] <p6eval> rakudo 446d49:  ( no output )

[04:50] <pmichaud> change line 7 from

[04:51] <pmichaud>             %r = box $N0

[04:51] <pmichaud> to

[04:51] <pmichaud>     %r = new ['Num']

[04:51] <pmichaud>     %r = $N0

[04:51] <asciiville> that's from inline PIR?

[04:51] <pmichaud> yes

[04:51] <pmichaud> the box opcode is returning the Float

[04:52] <pmichaud> and since Float has a .sin already, it gets used in preference to the one we've written in Num

[04:52] <pmichaud> (and that one apparently doesn't dispatch properly using .*)

[04:54] <pmichaud> ideally Parrot's type mapping would get box to automatically return Rakudo Num objects instead of Parrot Float... but we haven't wanted to make that switch yet

[04:54] <__ash__> pmichaud: do you want to commit that change? that fixed some fudged tests in S32-trig/trig.t

[04:54] <pmichaud> I'm in the middle of another change; I can commit it tomorrow morning if nobody beats me to it

[04:54] <__ash__> alright, just checking

[04:57] <asciiville> Can't wait till rakudo gets a pythonish introspection: dir(Num)

[05:01] <__ash__> rakudo: say Num.HOW.methods(Num);

[05:01] <p6eval> rakudo 446d49:

[05:01] <p6eval> ..OUTPUT«StraseccotanhacotanhsechACCEPTSatanasechacostanhasinatanhcoseccoshsuccacoshperlWHICHcotanatan2Scalarsectancossinpredacosecsinhasinhcosechacotanacosechendchompreduceindexceilingp5chomp:dpairs:e:fcombunpolarordchopintcharsrootsucreversekeysisaucfirstsubstrcosfmtbytespickevalfilejoint…

[05:01] <__ash__> rakudo: say ~Num.HOW.methods(Num);

[05:01] <p6eval> rakudo 446d49: OUTPUT«asinh cosech acotan acosech Str asec cotanh acotanh sech ACCEPTS atan asech acos tanh asin atanh cosec cosh acosh succ WHICH perl cotan atan2 Scalar sec tan cos sin pred acosec sinh 1 1 end 1 reduce 1 ceiling p5chomp 1 pairs 1 1 comb unpolar ord chop 1 1 roots uc reverse keys

[05:01] <p6eval> ..isa u…

[05:02] *** __ash__ left
[05:03] <asciiville> dang!

[05:04] <asciiville> rakudo: say Num.HOW.methods(Num);

[05:04] <p6eval> rakudo 446d49:

[05:04] <p6eval> ..OUTPUT«sinhWHICHcotancosechatan2acotansecaseccotanhtansechatancosacossintanhasincoshsuccasinhperlScalaracosechStracotanhACCEPTSasechpredatanhcosecacosecacoshcanlcfirstrootsreduceComplextrimmap:dcis:e:flogminrandmaxtruncatebytessortsinsqrtIntgrepabsenducceilingp5chompunpolarsamecasefloorsu…

[05:04] <asciiville> that is awesome!

[05:06] <asciiville> doesn't roll trippingly of the tongue however. :)

[05:09] *** Bzek joined
[05:15] <asciiville> rakudo: say Num.HOW.methods(Int)

[05:15] <p6eval> rakudo 446d49:

[05:15] <p6eval> ..OUTPUT«IntpredsuccNumACCEPTSperlWHICHScalarabsRatStrreversekeysisaucfirstsubstrcosfmtbytespickevalfilejointrimchrfloorrandtruncateroundsortrindexsqrtsplitmatchgrepwordsvaluescanlcfirstComplexsrandpolarmapciskvsamecaselogmincapitalizemaxtransfirstsinflipIntdoesp5choplcsubstabselemschompend…

[05:15] <asciiville> k, i'm confused again ;)

[05:19] <asciiville> rakudo: say join("\n", Int.HOW.methods(Int))

[05:19] <p6eval> rakudo 446d49:

[05:19] <p6eval> ..OUTPUT«WHICH␤perl␤ACCEPTS␤Scalar␤2␤Rat␤Str␤Int␤pred␤succ␤Num␤can␤lcfirst␤uc␤srand␤1␤keys␤map␤1␤cis␤1␤1␤min␤max␤pick␤first␤1␤trans␤sin␤1␤join␤2␤1␤1␤end␤1␤1␤ceiling␤trim␤p5chomp␤pairs␤unpolar␤ord␤rand␤1␤1␤1␤1␤1␤grep␤values␤1␤roots␤reverse␤isa␤ucfirst␤kv␤samecase␤cos␤capitalize␤fmt␤bytes␤fli…

[05:20] <asciiville> a little clearer with the satellite characters

[05:21] <asciiville> rakudo: "xyz".reverse().say;

[05:21] <p6eval> rakudo 446d49: OUTPUT«xyz␤»

[05:22] <asciiville> rakudo: "xyz".uc

[05:22] <p6eval> rakudo 446d49:  ( no output )

[05:22] <asciiville> rakudo: "xyz".uc.say

[05:22] <p6eval> rakudo 446d49: OUTPUT«XYZ␤»

[05:23] <asciiville> rakudo: "   hello   ".trim.say

[05:23] <p6eval> rakudo 446d49: OUTPUT«hello␤»

[05:25] <asciiville> ((("     hello     ").trim()).say())

[05:25] <asciiville> rakudo: ((("     hello     ").trim()).say())

[05:25] <p6eval> rakudo 446d49: OUTPUT«hello␤»

[05:25] <asciiville> nice

[05:27] *** nickgibbon joined
[05:27] <asciiville> rakudo: say(  ((("   hello   ").trim()).say()) == "    hello    ".trim.say)

[05:27] <p6eval> rakudo 446d49: OUTPUT«hello␤hello␤1␤»

[05:38] *** agentzh joined
[05:41] *** synth left
[05:49] *** synth joined
[05:58] *** Confield left
[06:04] <JimmyZ> rakudo: Num.HOW.methods(Str).join(' ').say;

[06:04] <p6eval> rakudo 446d49: OUTPUT«pred encode succ ACCEPTS perl WHICH sprintf Scalar flip 1 does p5chop lc 2 1 1 end 1 reduce 1 ceiling p5chomp 1 pairs 1 1 comb unpolar ord chop 1 1 roots uc reverse keys isa ucfirst 1 cos fmt bytes pick 1 join trim chr floor rand 1 1 round 1 1 split 1 grep words values can

[06:04] <p6eval> ..lcfirst …

[06:05] <JimmyZ> rakudo: ~Num.HOW.methods(Buf)..say;

[06:05] <p6eval> rakudo 446d49: OUTPUT«say requires an argument at line 2, near ";"␤in Main (src/gen_setting.pm:2565)␤»

[06:05] <JimmyZ> rakudo: ~Num.HOW.methods(Buf).say;

[06:05] <p6eval> rakudo 446d49: OUTPUT«newpostcircumfix:[

[06:05] <p6eval> ..]decodelistofcharsrootsucreversekeysisaucfirstsubstrcosfmtbytespickevalfilejointrimchrfloorrandtruncateroundsortrindexsqrtsplitmatchgrepwordsvaluescanlcfirstComplexsrandpolarmapciskvsamecaselogmincapitalizemaxtransfirstsinflipIntdoesp5choplcsubstabselemschompendi…

[06:40] *** orafu left
[06:41] *** orafu joined
[06:44] <KatrinaTheLamia> oh BTW--decided to start work on Jerl 6 in Octobre. It will be pronounce like "Girl 6", BTW ~.^

[06:44] <araujo> KatrinaTheLamia, ?

[06:44] <KatrinaTheLamia> just need to freshen up on compiler design and working with the JVM--also I have another project that I need to work throughin Septembre

[06:45] <KatrinaTheLamia> araujo, oh--a little while back, I suggested a version of Perl 6 for the JVM ^.^

[06:46] <KatrinaTheLamia> I mean Rakudo is good and all--it really is. However the JVM has Enterprise support, and has existed for a while. Plus the sheer blashphlemy of Jerl 6 is hilarious in and of itself.

[06:52] <Matt-W> It's a good idea

[06:52] <Matt-W> Gives Perl 6 a potential foothold in Java houses, they can start writing bits of their systems in it and still use their existing components

[06:55] *** alester left
[07:00] *** iblechbot joined
[07:15] *** xinming left
[07:15] <KatrinaTheLamia> Matt-W, part of why I am decently looking into it with Jerl 6... I dunno, maybe if Jerl 6 goes decently, I may make a Jerl 5

[07:16] <KatrinaTheLamia> I think we may need to giver Camela a barrista make over once Octobre comes ~.^

[07:16] *** zloyrusskiy left
[07:17] *** asciiville left
[07:22] *** rfordinal joined
[07:23] *** rfordinal left
[07:28] *** nickgibbon left
[07:33] *** rgrau joined
[07:37] <araujo> well

[07:37] <araujo> that'd be an interesting thing to see

[07:37] <araujo> i guess

[07:38] <araujo> though, KatrinaTheLamia , why not to continue helping with rakudo?

[07:40] <KatrinaTheLamia> araujo, oh I prolly will. There will be more than a little crosspolination between the two projects. I also have another project known as SSBZ, that I has decided will _also_ be done in Perl 6, and that will require some way for Perl 6 to handle the graphics libraries available to Parrot and the JVM without much differences in APIs

[07:41] <KatrinaTheLamia> I mean, writing Jerl 6 will likely give a lot of helpful information on decent ways to implement and improve Rakudo--and vica versa.

[07:42] <KatrinaTheLamia> I am not writing Jerl 6 to complete with Rakudo--more compliment it, is all.

[07:42] <moritz_> diversity is a good thing

[07:42] <moritz_> but you also must understand that writing a Perl 6 compiler is no small task

[07:42] <moritz_> no matter in what environment

[07:45] <KatrinaTheLamia> moritz_, yush, I am aware. I've read a few things, and have messed around with figuring out how to implement a Postscript interpreter. I've also looked around the Spidermonkey code, and have read some stuff on embedded Python. I am mostly just going over the Dragon Book to compliment this other knowledge, which I prolly should have committed to memory _already_--don't know why it isn't in my mind.

[07:46] <KatrinaTheLamia> moritz_, if compilers really were easy to design we'd have 1006 of them being made all the time ^.^

[07:46] <arnsholt> KatrinaTheLamia: Iæd say you donæt have it committed to memory because it's quite complicated stuff

[07:47] <arnsholt> Er, s/æ/'/

[07:49] <KatrinaTheLamia> arnsholt, it is yush--there is lots to consider when making a compiler too. Though, I generally tend to just _get_ these sorts of things... generally the only time I have issues figuring stuff out is when I think I am going to have issues figuring stuff out.

[07:49] <araujo> o_0

[07:51] *** cotto left
[07:53] *** agentzh left
[07:54] *** sm` left
[07:54] *** sm` joined
[07:59] *** payload joined
[07:59] <colomon> __ash__, pmichaud:  %r = new ['Num']  %r = $N0  change doesn't seem to work for me, I still get the "too many arguments passed (2) - 1 param expected" after converting an Int to a Num and calling sin.

[08:00] <moritz_> colomon: just write %r = box $N0

[08:02] <colomon> moritz_: That's what the old code that definitely doesn't work did.  The two-step thing was pmichaud's proposed solution.

[08:02] <moritz_> colomon: what did it not work? I think it's used in quite some setting methods, with success

[08:03] <colomon> If you go through the log, there's a long discussion in two parts on this.

[08:03] <moritz_> ok, I'll backlog

[08:04] <colomon> basically, it's Int's Num function, and the %r = box $N0 is making some sort of weird float object that pretends to be a Num rather than a real Num.

[08:04] <colomon> so that

[08:04] <colomon> rakudo: say 360.0.sin('degrees');

[08:04] <p6eval> rakudo 446d49: OUTPUT«-2.44921270764475e-16␤»

[08:04] <colomon> works but

[08:04] *** pmurias joined
[08:04] <colomon> rakudo: say 360.Num.sin('degrees');

[08:04] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/CXJkarTx2u:2)␤»

[08:05] <colomon> The latter is calling a different sin function.

[08:06] <pmurias> KatrinaTheLamia: there are loads of compilers being written all the time... ;)

[08:06] <moritz_> ok, that's beyond my scoope

[08:06] <moritz_> *scope

[08:10] <pmurias> KatrinaTheLamia: the hard part with targeting jvm is that you have to find a way to map (most of) semantics correctly and vaguely fast 

[08:12] <colomon> moritz_: anyway, this is the mysterious error in sin I was worried about over the weekend.  __ash__++ tracked it down to lines 5-7 of Int.pm, and that was pmichaud's proposed solution, but as I said, it doesn't seem to work for me.

[08:13] <moritz_> colomon: have you tried something really simple like adding 0.0 or multiplying with 1.0 or so?

[08:14] <colomon> rakudo: say (360 * 1.0).sin('degrees');

[08:14] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/xguaXaW4aE:2)␤»

[08:14] <colomon> rakudo: say (360 + 0.0).sin('degrees');

[08:14] <p6eval> rakudo 446d49: OUTPUT«too many arguments passed (2) - 1 param expected␤in Main (/tmp/70qHTY6QkC:2)␤»

[08:15] <colomon> hadn't actually tried the + 0.0 before.  :)

[08:32] *** synth left
[09:00] *** masak joined
[09:00] <masak> o/

[09:00] <moritz_> \o

[09:01] <pmurias> \ö/

[09:01] <moritz_> >>ö<<

[09:02] <masak> "The Metamorphosis"

[09:07] <Matt-W> oh hai masak

[09:07] *** rbaumer left
[09:07] <masak> saluton, Matt-W

[09:07] <Matt-W> just got back from the vet

[09:08] <Matt-W> don't know how long until the cat forgives me

[09:08] <pmurias> untill it gets hungry enough ;)

[09:09] <Matt-W> That's usually the case, yes

[09:09] <Matt-W> He was fairly well-behaved really

[09:10] <Matt-W> and his sulking gives me a chance to do something vaguely useful with the rest of my morning off

[09:11] <JimmyZ> oh hi #perl6

[09:13] <masak> oh hai JimmyZ 

[09:15] <masak> so, I almost got Squirrel working yesterday.

[09:15] <masak> enough for it to be pretty exciting.

[09:15] <masak> I think I'll do some debugging today to see why it didn't get all the way.

[09:19] *** mepplock left
[09:22] *** masak left
[09:22] *** masak joined
[09:34] *** rbaumer joined
[09:38] * masak wants to see the slides of http://conferences.yapcasia.org/ya2009/talk/2238

[09:39] *** alexe joined
[09:39] *** ihrd joined
[09:39] <masak> people are buzzing about it on Twitter... :)

[09:39] *** ihrd left
[09:40] *** meppl joined
[09:43] *** alexe_ joined
[09:44] *** sharada joined
[09:44] *** sevvie_ left
[09:44] *** Grrrr left
[09:44] *** kst` joined
[09:44] *** Grrrr joined
[09:47] *** sevvie joined
[09:47] *** Aisling_ joined
[09:47] *** Eevee joined
[09:48] <Matt-W> masak: I want to see those slides too

[09:48] <Matt-W> it looks like great propaganda material

[09:49] <masak> even the title is great.

[09:50] *** cblaptop joined
[09:52] *** payload left
[09:54] *** Aisling left
[09:55] *** alexe left
[09:59] *** kst left
[10:01] *** Eevee_ left
[10:03] *** ssm left
[10:04] *** Whiteknight joined
[10:13] *** Whiteknight left
[10:20] *** M_o_C joined
[10:30] <moritz_> it does sound great for a mostly perl 5 audience

[10:30] *** Gothmog_ left
[10:30] <moritz_> s/<after great>/, especially /

[10:30] *** Gothmog_ joined
[10:31] <masak> that's what you'd have at any YAPC, no?

[10:32] <moritz_> aye

[10:46] *** JimmyZ left
[10:47] *** alexe_ left
[10:51] * masak is re-reading the Apocalypses

[10:51] <masak> this part about killing off the $pkg'var syntax made me giggle: "[...] we won't make the mistake of reintroducing a syntax that drives highlighting editors nuts. We'll try to make different mistakes this time."

[10:52] <moritz_> it's time for better highlighters

[10:52] <moritz_> see: perl6.vim

[10:53] <masak> 对

[10:54] <masak> commuting &

[10:54] *** masak left
[10:57] *** xinming joined
[11:06] *** payload joined
[11:08] *** finanalyst joined
[11:10] *** SkyRocknRoll joined
[11:10] <SkyRocknRoll> hi will perl6 support cpan?

[11:11] <moritz_> the question is more, will cpan support Perl 6?

[11:11] <moritz_> I'm working (a bit) on it

[11:11] <SkyRocknRoll> moritz_: can i use all cpan library in perl 6?

[11:11] <moritz_> others work on alternative solutions

[11:12] <moritz_> SkyRocknRoll: hopefully, yes

[11:12] <moritz_> rakudo: say eval('3+4', :lang<perl5>)

[11:12] <p6eval> rakudo 446d49: OUTPUT«␤»

[11:14] <moritz_> uh, hm

[11:14] <moritz_> if blizkost is installed properly that works

[11:21] *** ruoso left
[11:22] <M_o_C> Is Blitzkost a slavic word? Or more generell what does it mean if it has a meaning?

[11:22] *** finanalyst left
[11:22] <moritz_> that's explained in the README, iirc

[11:25] <M_o_C> Where exacty is Blitzkost hostet?

[11:25] <M_o_C> Google yields nothing useful, neither does http://github.com/search?q=blitzkost&x=0&y=0

[11:25] <moritz_> see http://use.perl.org/~JonathanWorthington/journal/ for the announceemnt

[11:26] <moritz_> M_o_C: it's Blizkost, not Blitzkost

[11:26] <M_o_C> Oh, rue

[11:26] <M_o_C> *true

[11:26] <M_o_C> >_>

[11:27] *** cblaptop left
[11:31] *** cblaptop joined
[11:31] *** sm` left
[11:31] *** sm` joined
[11:40] *** SkyRocknRoll left
[11:41] *** Rint joined
[11:50] *** veeru joined
[11:50] *** MoC` joined
[11:52] *** veeru left
[11:54] *** ab5tract joined
[12:01] *** rgrau left
[12:06] *** masak joined
[12:08] *** M_o_C left
[12:15] *** JimmyZ joined
[12:18] <takadonet> morning all

[12:21] <masak> morning, takadonet.

[12:25] <masak> hey, which synopsis talks about the semantics of term:<*>?

[12:26] *** Bzek left
[12:26] <moritz_> S02 iirc

[12:26] <moritz_> look for Whatever :-)

[12:27] <masak> yep, found it.

[12:29] <masak> rakudo: (* + 24).(24).say

[12:29] <p6eval> rakudo 446d49: OUTPUT«48␤»

[12:30] <masak> rakudo: ([*] 1..4).flip.say

[12:30] <p6eval> rakudo 446d49: OUTPUT«42␤»

[12:30] <masak> \o/

[12:34] *** meppl left
[12:34] *** finanalyst joined
[12:36] *** jaffa8 joined
[12:37] *** synth joined
[12:38] <jaffa8> perl6: print "uuu"􏿽xE9

[12:38] <jaffa8> perl6: print "uuu";

[12:38] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "\65533"␤    expecting term postfix, operator, ":" or ","␤    at /tmp/KBQ3LZhXMn line 1, column 12␤»

[12:38] <p6eval> ..elf 28216: OUTPUT«Parse error in: /tmp/srnQMDYlte␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: print "uuu"�␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤  STD_red/std.rb:210:in

[12:38] <p6eval> ..`_U…

[12:38] <p6eval> ..rakudo 446d49: OUTPUT«Confused at line 2, near "\ufffd"␤in Main (src/gen_setting.pm:3469)␤»

[12:38] <p6eval> elf 28216, pugs, rakudo 446d49: OUTPUT«uuu»

[12:39] <jaffa8> pugs: /../

[12:39] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[12:40] *** asciiville joined
[12:42] *** asciiville left
[12:44] <jaffa8> pugs: $e=~/../;

[12:44] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "=~/../;"␤    expecting "::"␤    Variable "$e" requires predeclaration or explicit package name␤    at /tmp/KSauahGsMK line 1, column 3␤»

[12:44] <jaffa8> pugs: $e~~/../;

[12:44] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "~~/../;"␤    expecting "::"␤    Variable "$e" requires predeclaration or explicit package name␤    at /tmp/dIYLIaiB5u line 1, column 3␤»

[12:45] <jaffa8> pugs: my $e~~/../;

[12:45] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[12:47] <jaffa8> pugs: my $e; $e~~/../;

[12:47] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[12:48] <masak> jaffa8: Pugs regex matching seems to have bitrotted.

[12:48] <moritz_> aye

[12:49] <moritz_> pugs compiles regexes to perl 5 regexes

[12:49] <moritz_> and then uses the perl 5 bridge to run them

[12:49] <moritz_> maybe that broke with perl-5.10

[12:49] <masak> sounds likely.

[12:51] <jaffa8> I see

[12:52] <jaffa8> DO you know how to translate \N into Perl 6?

[12:53] <masak> there's a \N in Perl 6 as well.

[12:53] <moritz_> but it means something different

[12:53] <moritz_> \N{LATIN SMALL LETTER A} translates to \c[LATIN SMALL LETTER A], I think

[12:54] <moritz_> rakudo: say " \c[LATIN SMALL LETTER A]"

[12:54] <p6eval> rakudo 446d49: OUTPUT« a␤»

[12:54] <moritz_> but in perl 5 it depends on 'use charnames qw(:full)' to be loaded

[12:54] *** payload left
[12:55] <jaffa8> rakudo: say "\c[LETTER A]"

[12:55] <p6eval> rakudo 446d49: OUTPUT«perl6regex parse error: Unrecognized character name LETTER A at offset 18, found 'L'␤in Main (src/gen_setting.pm:3469)␤»

[12:55] <jaffa8> rakudo: say "\c[LATIN LETTER A]"

[12:55] <p6eval> rakudo 446d49: OUTPUT«perl6regex parse error: Unrecognized character name LATIN LETTER A at offset 18, found 'L'␤in Main (src/gen_setting.pm:3469)␤»

[12:56] <jaffa8> rakudo: say "\c[LATIN BIG LETTER A]"

[12:56] <p6eval> rakudo 446d49: OUTPUT«perl6regex parse error: Unrecognized character name LATIN BIG LETTER A at offset 18, found 'L'␤in Main (src/gen_setting.pm:3469)␤»

[12:57] <moritz_> it's s/BIG/CAPITAL/

[12:57] <jaffa8> rakudo: say "\c[LATIN CAPITAL LETTER A]"

[12:57] *** ruoso joined
[12:57] <p6eval> rakudo 446d49: OUTPUT«A␤»

[12:58] <jaffa8> rakudo: say ">>\c[LATIN CAPITAL LETTER A]<<<"

[12:58] <p6eval> rakudo 446d49: OUTPUT«>>A<<<␤»

[12:59] <ruoso> bom dia #perl6

[12:59] <masak> ruoso: bom dia!

[13:00] <moritz_> is that portugese?

[13:01] <ruoso> yes

[13:01] <ruoso> "sim"

[13:03] * masak likes portuguese

[13:03] <masak> both of them.

[13:03] <mikehh_> rakudo (5960161) builds on parrot r411780 - make test / make spectest (up to r28216) PASS - Ubuntu 9.04 amd64 (g++)

[13:03] <mikehh_> rakudo - t/spec/S03-operators/arith.rakudo - TODO passed:   120, 131-132

[13:05] <colomon> mikehh_: Oh, interesting.  There's only one TODO passing on arith.t on my MacBook.  Wonder if it's a 32-bit versus 64-bit thing?

[13:05] * moritz_ sees the asme TODO passes as mikehh_ 

[13:07] <pmurias> ruoso: hi

[13:07] *** icwiener joined
[13:09] <moritz_> /asme/same/

[13:10] <jaffa8> p6eval returns strange characters.

[13:10] <jaffa8> Do you know that

[13:10] <jaffa8> ?

[13:10] <moritz_> s/strange/unusual/

[13:11] *** iblechbot left
[13:12] <jaffa8> it looks bad

[13:12] <colomon> moritz_: I'm definitely only getting TODO passed:   131  Admittedly that's with Monday's rakudo, but I don't see any sign there have been relevant changes since....

[13:13] <masak> jaffa8: are you referring to the ␤ character? that's a feature, not a bug.

[13:13] <ruoso> pmurias, hi

[13:13] *** elton_mcz joined
[13:13] <jaffa8> it is not displayed correctly here,

[13:13] <jaffa8> I am not sure what you see.

[13:13] <moritz_> colomon: could be a platform difference, yes

[13:13] <jaffa8> masak,yes

[13:13] <moritz_> jaffa8: does your IRC client properly support UTF-8? and your terminal? is it in the font?

[13:14] <jaffa8> no

[13:14] <moritz_> well

[13:14] <moritz_> then it won't work

[13:14] <masak> jaffa8: see topic: "UTF-8 is our friend!"

[13:14] <moritz_> the IRC logs also display it correctly, if your browser understands UTF-8

[13:15] <jaffa8> What character is that?

[13:15] <masak> jaffa8: ␤

[13:15] <ruoso> jaffa8, newline

[13:15] <ruoso> represented as a NL inside a dotted box here

[13:16] <masak> I only have a diagonally laid-out N and L here, without the box.

[13:16] <colomon> moritz_: 0x80000000 div 1 == 0x80000000 is test 120, I'm getting -0x80000000 here.

[13:18] <jaffa8> it does not degrade gracefully....

[13:19] <mikehh_> when I last tested on i386 I only got test 131 passing

[13:19] *** __ash__ joined
[13:19] *** mikehh_ is now known as mikehh

[13:19] <moritz_> then the tests should be moved to overflow.t

[13:19] <moritz_> jaffa8: suggestions for better solutions are welcome

[13:20] <MoC`> Btw, does someone know what hl "." does? It seems that it's a command on linux which is executed during a test, however Windows doesn't have a hl.exe

[13:20] <masak> jaffa8: how does it degrade for you? if all you see is a box with numbers, I'd say that's fairly graceful.

[13:20] *** MoC` is now known as M_o_C

[13:21] <masak> M_o_C: which Perl 6 project does this, you say?

[13:21] <moritz_> anyway, there's no way non-ASCII-chars can degrade gracefully if you don't understand the character encoding

[13:21] <jaffa8> I see this:  rakudo 446d49: OUTPUT«A␤»

[13:21] <masak> jaffa8: looks perfectly fine here. :)

[13:21] <moritz_> that looks perfectly fine for me

[13:21] *** finanalyst left
[13:21] <jaffa8> I see this ,appr. OUTOUTA<<a xA>>

[13:22] <jaffa8> I see this ,appr. OUTOUTA<<Aa xA>>

[13:22] <masak> jaffa8: we have basically reserved the right to be slightly inconsiderate with encodings, in order to urge evolution in the right direction. we respect it if you don't get a better client/console, but you might not meed with a lot of sympathy.

[13:22] <masak> s/meed/meet/

[13:22] <moritz_> masak++

[13:23] <M_o_C> Sry, I was mistaken, it seems like it tries to execute "." and Windows complains that there is no command or programm named ".". Happens in make spectest: t\spec\S02-magicals\env.rakudo ................................. Failed 2/14 subtests

[13:23] <jaffa8> sympathy seems to be reare community where I live.

[13:24] <colomon> moritz_, mikehh: occurs to me that it could also be a difference in Parrot versions.  

[13:24] <moritz_> poor jaffa8 

[13:24] <jaffa8> What about you?

[13:25] <jaffa8> Do you meet sympathy often?

[13:25] <moritz_> yes

[13:25] <jaffa8> How often?

[13:25] <masak> actually, yes. I think so.

[13:25] *** JimmyZ left
[13:25] <moritz_> I pick my acquaintances that way

[13:25] <moritz_> jaffa8: sadly too seldom. I see my girlfriend only on weekends

[13:26] <masak> I live in a fairly socialist state. its whole infrastructure runs on sympathy.

[13:26] <jaffa8> Where are you?

[13:26] <masak> Sweden.

[13:26] <moritz_> hugme: hug jaffa8 and masak 

[13:26] * hugme hugs jaffa8

[13:27] <moritz_> hugme: hug masak

[13:27] * hugme hugs masak

[13:27] <masak> current gov't is right-wing, but that hardly matters. 50 years of socialist roots go deep.

[13:27] <jaffa8> I am surprised

[13:27] <masak> hugme++

[13:28] <Matt-W> Apparently I live in a state with a communist health service

[13:28] <Matt-W> I haven't yet figured out why that's supposed to be a bad thing...

[13:28] <jaffa8> WHat state?

[13:31] <jaffa8> IN sweden, what can people understand?

[13:31] <masak> jaffa8: I'm not sure I understand; what do you mean? :)

[13:31] <moritz_> and I think Matt-W is UK based

[13:31] <jaffa8> IN sweden, what can people be sympathetic about?

[13:31] <Matt-W> I'm in the UK, yes

[13:32] <masak> jaffa8: a lot of things, I think. it's a very non-specific question.

[13:33] *** nihiliad joined
[13:33] <mikehh> moi aussi

[13:33] <moritz_> "everything they like" would be a possible answer

[13:33] *** payload joined
[13:33] <jaffa8> yes, I see that

[13:33] <moritz_> but it's kind of a non-answer as well

[13:34] <moritz_> ikwiki has an interesting concept - it stores its data (for example) in a git repository

[13:34] * moritz_ thinks about a possible November backend

[13:34] <mikehh> The NHS here has fault yes - but compared to the US system where millions can not afford health care there is no comparrison

[13:35] <jaffa8> land of freedom.

[13:35] <mikehh> freedom to starve

[13:35] *** patspam joined
[13:36] <Matt-W> yeah I can always go to the doctor and get some treatment

[13:36] <Matt-W> it might be a bit slow and it might be a bit primitive compared to the state of the art

[13:36] * masak checks out ikwiki

[13:36] <Matt-W> but a lot of the time it will be good and timely and work

[13:36] <mikehh> and I always thought the so-called justice system - well ...

[13:37] <moritz_> masak: I particularly like that I can edit the wiki off-line

[13:37] <jaffa8> moritz_,is it possible that your country has strong sense of community than others

[13:37] <jaffa8> ?

[13:38] <moritz_> jaffa8: I don't think mine has

[13:38] <moritz_> masak's, maybe

[13:38] <Matt-W> mikehh: the justice system is increasingly worrying here

[13:38] <moritz_> Matt-W: here too

[13:38] <Matt-W> and education

[13:38] <Matt-W> management culture infecting the police

[13:39] <moritz_> but in Germany the social situation depends very much on the region you live in

[13:39] <masak> we have _some_ sense of community... but then we look at our neighbours, in frettled's country, and then we realize that we have virtually nothing. :)

[13:39] <Matt-W> whole groups of kids who don't see why they should learn things and get a good job

[13:39] <mikehh> yeah - a lot lot of things are worrying

[13:39] <masak> we've had what amounts to a youth revolt here, what with the Pirate Bay situation and all.

[13:40] <masak> I've even been to a demonstration myself.

[13:40] <frettled> masak: Now you're _really_ scaring me.

[13:40] <Matt-W> mikehh: Having friends in the police does give me a possibly gloomier picture than I might otherwise have, of course

[13:40] <masak> frettled: which part?

[13:40] <frettled> masak: about that sense of community thing

[13:40] *** __ash__ left
[13:40] <mikehh> it's the media :-}

[13:40] <moritz_> masak: well, the pirate party made it into parliament, no?

[13:40] <moritz_> I think that's a great success

[13:40] <moritz_> I don't think we'll see that in Germany too

[13:40] <masak> moritz_: indeed.

[13:41] <frettled> I see, BTW, that there has been progress with the Date/Time/whatnot specifications in S02 and S32.  Goodie!

[13:41] <frettled> Accidentally, I've been a bit out of sorts, so I haven't even had time to read up on things :(

[13:41] <masak> frettled: just compare May 17 to June 6 any year, I dare you.

[13:42] <frettled> masak: ah, that's not community, that's national pride ;)

[13:42] <mikehh> Matt-W: getting too close to a problem tens to give a distorted picture

[13:42] <masak> frettled: good point.

[13:42] <mikehh> tends

[13:42] <jaffa8> Matt-W, what problems can you see?

[13:43] <Matt-W> mikehh: indeed, and when you work with people who've never worked and never will and have no concept of 'other people' other than as obstructions, and you do this all the time, it's bound to make you pessimistic

[13:43] <frettled> masak: well, good soundbite, anyway

[13:44] <mikehh> I think the problem is we live in a society that considers not working BAD and working GOOD

[13:44] <Matt-W> But do we

[13:45] <Matt-W> Some parts they're completely indifferent to it

[13:45] <jaffa8> WHat is that a problem, mikehh?

[13:45] <Matt-W> They just get benefits if they're not working, and they're happy

[13:45] <Matt-W> in fact, they're not sure why they should bother to work

[13:45] <KatrinaTheLamia> pmurias, ah, so to you, a goal of Jerl 6, you would fast running binary? Or by that, did you mean fast compiling time? I was thinking aiming for a fast running binary, with a small amount put on the small memory foot stamp (with no real care on the actual binary itself)--however it occurred to me that people may see Jerl 6 as to be interpreted. So I may need to work on both fast compile time and fast execution time. Which means I

[13:45] <KatrinaTheLamia>  may not be able to anything with footprint or binary size. Thank you for your input ^.^

[13:45] <KatrinaTheLamia> with no real care on the actual binary file size itself*

[13:46] <mikehh> well working does not in general benefit them

[13:46] <mikehh> and who are you working for anyway

[13:46] <jaffa8> themselves

[13:46] <jaffa8> ?

[13:47] <mikehh> most people who work for themselves have other motivations

[13:48] <Matt-W> most people work for someone else who keeps all the product and gives them a salary in return

[13:48] <jaffa8> What are you trying to say?

[13:48] <jaffa8> there could be benefit in it.

[13:49] <mikehh> sorry that was a sligt pun

[13:49] <mikehh> slight

[13:50] <mikehh> in the UK funds received from the state are called benefits

[13:53] <jaffa8> it boils down to how somebody is conditioned, I guess.

[13:53] <jaffa8> what belief system one gets.

[13:53] <Matt-W> yes there's a lot to that

[13:53] <Matt-W> and we've got conflicting belief systems, which isn't very helpful

[13:54] <mikehh> the puritan work ethic has pervaded Western society

[13:54] <Matt-W> some of it, at least

[13:54] <jaffa8> Which is?

[13:54] <mikehh> I ain't talkin' nabout them social misfits :-}

[13:55] *** Muixirt joined
[13:55] <Muixirt> hi

[13:55] <Muixirt> Invalid charset number '33' specified

[13:55] <Muixirt> what 's that supposed to mean?

[13:55] <moritz_> where did you get that error message from?

[13:56] <mikehh> Matt-W: well maybe we were

[13:56] <Muixirt> invoking a small perl6 program with rakudo

[13:57] <masak> Muixirt: could you nopaste it?

[13:57] <Muixirt> and '33' is nowhere in that program

[13:58] <Muixirt> masak, i fumble arounf with nci

[13:58] <mikehh> Gotta get my grandkids from school in about 10 minutes

[13:58] <moritz_> ah well, parrot stores charset numbers in conjunction with strings

[13:59] <moritz_> with things like 0 = binary, 1 = latin-1, 2 = Unicode or so

[13:59] <Muixirt> 33 = ??

[13:59] <moritz_> invalid

[14:01] *** patspam left
[14:02] *** patspam joined
[14:03] <M_o_C> Do any plans for making "make smoke" available to Rakudo exist?

[14:04] <Muixirt> moritz_, so this  pbc format is a fast moving target

[14:04] <KatrinaTheLamia> M_o_C, I suppose that would be a method of incinerating Rakudo? (where there is smoke, there is fire ~.^)

[14:05] <moritz_> M_o_C: no, it needs a champion who takes care of that

[14:05] <moritz_> Muixirt: what's pbc being a fast moving target has to do with your error message?

[14:06] <M_o_C> I'm just asking because last week someone at least created a Rakudo project on smolder.

[14:06] <Muixirt> moritz_, mixed up an installed parrot with rakudo

[14:07] *** __ash__ joined
[14:09] <moritz_> Muixirt: that's not just because of .pbc - I don't think parrot makes any stability guarantuees for ABIs, only APIs

[14:09] <moritz_> and compiled pmcs and dynops aren't pbc

[14:09] <Muixirt> ok

[14:11] *** vmbrasseur joined
[14:13] *** M_o_C left
[14:15] <KatrinaTheLamia> oh BTW--I has officially been played... a cheap copy of the Dragon Book that I acquired apparently was from The People's Republic of China. I should prolly be able to learn something here >.>

[14:15] <KatrinaTheLamia> I personally found it hilarious though... piracy++

[14:15] <KatrinaTheLamia> serves me the right ^.^

[14:16] <masak> KatrinaTheLamia: fitting also that the "Dragon Book" comes to you from China.

[14:17] <KatrinaTheLamia> (It should be noted, that like _most_ pirates, I am going to buy most of the stuff I pirated anyways--once my funds allow for the stuff)

[14:17] <KatrinaTheLamia> masak, very fitting indeed ^.^

[14:17] <masak> 龙书

[14:19] *** justatheory joined
[14:20] *** abra joined
[14:23] *** hanekomu left
[14:31] *** patspam left
[14:39] <pmurias> KatrinaTheLamia: binary? you mean a .class?

[14:42] *** jiing joined
[14:42] *** __ash__ left
[14:43] *** __ash__ joined
[14:44] <pmurias> KatrinaTheLamia: i wouldn't worry about the compilation time at the start

[14:45] *** payload left
[14:45] *** Tene joined
[14:50] *** Psyche^ joined
[14:50] <KatrinaTheLamia> pmurias, I mean the bytecode/machinecode that the JVM is capable of reading and understanding.

[14:52] *** Patterner left
[14:52] *** Psyche^ is now known as Patterner

[14:55] <pmurias> isn't machinecode what the CPU understands as opposed to bytecode which the JVM understands?

[14:57] <masak> yay, second Squirrel test passes! can now create a table, insert a row, and read it back out. \o/

[14:57] <Tene> masak: Sorry, life keeps coming up... :(

[14:57] <phenny> Tene: 09 Sep 21:26Z <masak> tell Tene that I've made nice progress on Squirrel. I've pushed it so that you can see (in the Web.pm repo). try running t/squirrel/sqlite-write.t -- the second test fails for me, even though I think it ought to pass. it's a mystery. will look at it tomorrow with fresh eyes.

[14:58] <masak> Tene: no worries, I'm experiencing progress here. :)

[14:58] <Tene> masak: Let me know if there's anything specific you want/need me to work on.

[14:58] <Tene> :)

[14:58] <pmichaud> Good morning, #perl6

[14:59] <masak> pmichaud: morning!

[14:59] <Tene> AFK teaching

[14:59] <masak> Tene: as usual, I'll need you most if I run into low-level trouble. but right now the path is pretty clear. all I need is lots and lots of tuits. :)

[15:00] <KatrinaTheLamia> pmurias, well, technically, there are some CPUs (mostly cellphones) designed to run JVM bytecode as though it were their own instruction set

[15:00] <masak> user-defined .{} syntax in Rakudo would be nice, too. but not a strict requirement.

[15:03] *** patspam joined
[15:03] *** alester joined
[15:06] <jaffa8> KatrinaTheLamia,what does the mean?

[15:10] <pmurias> masak: isn't there an inferior embedded language called squirrel?

[15:11] <__ash__> you mean http://squirrel-lang.org ? 

[15:12] <KatrinaTheLamia> jaffa8, it means, that in some cases JVM bytecode, can be in fact machinecode for certain chipsets.

[15:12] *** payload joined
[15:14] <pmurias> __ash__: yes

[15:14] <masak> pmurias, __ash__: I'm open for suggestions for other names than "Squireel". I chose that name because we'd been discussing SQL that day, and "Sequel" and "Squirrel" were apparently two different ways people chose to pronounce SQL.

[15:15] <TimToady> squerl

[15:15] <jaffa8> KatrinaTheLamia, your name....

[15:16] <jaffa8> what does your name mean?

[15:17] <TimToady> it's just like KermitTheFrog, except the the ends

[15:17] <masak> TimToady: cute :)

[15:17] <TimToady> s/the/for

[15:19] <__ash__> jaffa8: arm processors (like whats in the iphone) have a special set of instructions called Jazelle that let them run JVM byte code natively 

[15:23] <diakopter> __ash__: all arm processors? or since a certain time?

[15:24] *** sahadev joined
[15:24] <__ash__> any with the Jazelle instruction set, not all ARM processor have it, but i know the iphone does (Cortex-A8 is what the iphone has) 

[15:25] *** ejs joined
[15:26] *** frederico joined
[15:27] <TimToady> oh, wow, actually finished backlogging before dinnertime, for a change...

[15:27] <TimToady> I obviously woke up too early today

[15:28] *** patspam left
[15:31] *** Confield joined
[15:32] *** patspam joined
[15:33] *** hercynium joined
[15:34] <__ash__> is there a perl6 vim anywhere already?

[15:35] <diakopter> __ash__: yes, in http://svn.pugscode.org/pugs/util/perl6.vim

[15:35] <pioto> __ash__: yes, http://github.com/petdance/vim-perl/tree/master

[15:35] <diakopter> or that

[15:35] <masak> letter probably newer.

[15:35] <masak> s/e/a/

[15:35] <KatrinaTheLamia> jaffa8, I am a Coral Snake Lamia named Katrina ^.^--my other nick of FullMetalHarlot prolly isn't appropriate for FreeNode >.>

[15:36] <alester> Yes, the latter is newer

[15:36] <alester> and is going into the vim core

[15:36] <__ash__> alright, thanks

[15:42] <__ash__> if you drop down to PIR code, what is the %r i keep seeing, is that the return value of the PIR? 

[15:42] * masak looks up "lamia" and decides to be extra nice to KatrinaTheLamia from now on...

[15:44] <KatrinaTheLamia> masak, wait... wha? why?

[15:47] <masak> KatrinaTheLamia: "1. Classical Mythology. one of a class of fabulous monsters, commonly represented with the head and breast of a woman and the body of a serpent, said to allure youths and children in order to suck their blood."

[15:48] <masak> KatrinaTheLamia: "2. a vampire; a female demon."

[15:48] *** elton_mcz left
[15:49] <KatrinaTheLamia> masak, meh, most of that is a eon old smear campaign done by Hera... you'd think Hera wouldn't get nearly as jealous about her husband sleeping around. I mean, it is pretty clear that Hera is the _only_ one that doesn't realise it is an open relationship.

[15:50] <masak> KatrinaTheLamia: gotcha.

[15:52] <KatrinaTheLamia> yeah, my top half is human female, and my lower half snake. But, I really don't enjoy sucking blood. I am mostly a vegetarian. And I don't think I am a vampyr... though, I do sparkle in the sunlight... which is somewhat suspect. But yeah, I am technically a demon... but prolly more closer to one of Eris' Diamone (which I cannot find any information about the Diamone in this timeline >.>)

[15:52] <jaffa8> Are you male, female or both?

[15:53] *** sm` left
[15:53] <masak> name suggests female.

[15:53] <KatrinaTheLamia> jaffa8, female ^.^

[15:53] *** Guest36141 left
[15:53] <jaffa8> your name is not very friendly

[15:53] <KatrinaTheLamia> what? :(

[15:54] <KatrinaTheLamia> what is so unfriendly about it :O

[15:54] <pmichaud> "My name is plenty friendly, and I'll sever the head of anyone who disagrees with me on that!"  :-) :-)

[15:54] <jaffa8> vampire?

[15:54] *** fredrecsky joined
[15:54] <pmichaud> KatrinaTheLamia: I think your name is fine.  :)

[15:54] <masak> me too!

[15:55] <KatrinaTheLamia> jaffa8, not as far as I know... I mean, I don't desire drinking blood. And I can go out into the sun... though I find it odd that I start to sparkle >.> (only a sign of _how_ much exactly is _wrong_ with the world :O )

[15:55] <jaffa8> KatrinaTheLamia, you am not talking about you... just about the name you use.

[15:55] <masak> it's obviously a very well chosen name.

[15:55] <masak> now that I understand it better, I feel I know KatrinaTheLamia better, too.

[15:56] <KatrinaTheLamia> thankies masak 

[15:56] <rjh> hahahaha

[15:56] * KatrinaTheLamia huggles masak 

[15:56] * masak squeals huggedly

[15:56] <rjh> i feel like i'm at a sci-fi convention

[15:57] <KatrinaTheLamia> rjh, well it is #Perl6... so you aren't far off in the channel about TEH LANGUAGE OF TEH FUTURAH!

[15:57] <masak> rjh: what do you expe... what KatrinaTheLamia said. :)

[15:58] <KatrinaTheLamia> anyways... I think that last sentence I said dropped the IQ level of the room a few levels >.>

[15:58] <rjh> i'm going back to #perl where everyone is a jerk to each other

[15:58] <rjh> :)

[15:58] <KatrinaTheLamia> rjh, ah... but if we work things out, we may start a group hug...

[15:58] * KatrinaTheLamia actually censored that above sentence from something potencially more offensive >.>

[15:58] <jaffa8> I am thinking about a new name.

[15:59] <masak> jaffa8: don't fix it if it ain't broken :)

[15:59] <TimToady> jaffa9?

[15:59] <masak> 哈哈

[15:59] <TimToady> hey, I'm good with names :)

[15:59] <pmichaud> after that would be jaffb0

[16:00] <jaffa8> What about IamnicemonsterIwillnoteastyoutoday?

[16:00] <pmichaud> too long

[16:00] <TimToady> where's the west of your name?

[16:00] <rjh> jaffacake

[16:01] <pmichaud> how about "SatiatedFriendlyMonster"

[16:01] <KatrinaTheLamia> jaffa8, well, do you have a phenotype?

[16:01] <KatrinaTheLamia> jaffa8, any particular movie or music interests--or interests of other kinds?

[16:01] <masak> JaffaTheIncubus

[16:01] <KatrinaTheLamia> I mean TimToady is obvious a fan of Perl, and that is where his (I am assuming) name came from.

[16:01] <hercynium> JaffaKree!

[16:02] <pmichaud> TimToady likes Perl?

[16:02] <TimToady> you could pick a name that starts with 'p' like everyone else

[16:02] <jaffa8> TimToady, do you use Perl?

[16:02] <TimToady> I hate Perl, but I use it twice a day...

[16:02] * KatrinaTheLamia huggles TimToady 

[16:02] <hercynium> Perl is overrated. I'm waiting for Jade7

[16:03] <KatrinaTheLamia> clearly, we have not brainwashed TimToady well enough.

[16:03] <TimToady> oh, wait, that's Listerine

[16:03] <masak> :)

[16:03] * KatrinaTheLamia sends TimToady back to the "rehabilitater" for repair ^.^

[16:03] <jaffa8> TimToady, what do you use Perl for?

[16:04] <hercynium> said by somebody @ Boston.PM the other day: "I write perl at work to get things done but nobody knows it yet"

[16:04] <pmichaud> hercynium: I hear that a lot

[16:04] <hercynium> (he works at a heavy python-centric place (I used to work there too))

[16:04] <pmichaud> "I use Perl, but please don't tell my boss."

[16:05] <KatrinaTheLamia> "I use Perl 6, as it is Eris' favourite language ^.^"

[16:05] <pmichaud> mmm lunchtime

[16:05] <Tene> I'm always glad to see another discordian in the channel. ^^

[16:06] <jaffa8> I made a code formatter in Perl.

[16:06] <jaffa8> as far as I am concerned.

[16:06] <pmichaud> I made a Perl code de-formatter in Parrot. :-)

[16:06] <Tene> fdisk /dev/pmichaud

[16:06] <jaffa8> deformatter?

[16:07] <hercynium> just the other day, another former co-worker emailed me with a perl 6 question...

[16:07] <pmichaud> Yes.  It takes properly formatted Perl 6 code and turns it into an executable.

[16:07] <hercynium> he wanted to know if there was a working "http object" in perl6 yet

[16:08] <hercynium> I'm guessing he meant some sort of user-agent

[16:08] <pmichaud> I know we have mod_parrot and mod_perl6

[16:08] <pmichaud> I don't know if we have a user agent yet.  Shouldn't be too hard to create one.

[16:08] <Tene> HTTP client is one of the too-many items on my TODO

[16:09] <hercynium> I am curious as to what the state is of IO related stuff

[16:09] <jaffa8> IS it the same as the current perl -> pir -> pbc -> exe path?

[16:09] <pmichaud> some of it is ready, some is blocked, and some is closed.  :-)

[16:09] <hercynium> (sockets, files, pipes... asynch, etc?)

[16:09] <pmichaud> jaffa8: yes, that's basically how it works :)

[16:10] <TimToady> jaffa8: I once wrote a Perl 6 parser in Perl...

[16:10] *** cmv joined
[16:10] <KatrinaTheLamia> TimToady, heh... here is a challenge: Perl 6 parser in Perl 0 ^.^

[16:10] <hercynium> if I can do asynch work with sockets I think I have a few perl6 mini-projects I'd like to start

[16:10] <TimToady> Well, Perl 0 was turing complete

[16:10] <jaffa8> p6eval, Is it different from that?

[16:10] <pmichaud> I think Parrot (and thus Rakudo) is a little weak on async I/O

[16:10] <TimToady> unfortunately it was also classified, so I don't have a copy

[16:11] <pmichaud> anyway, lunchtime here. bbiaw

[16:11] <jaffa8> pmichaud, Is it different from that?

[16:11] <hercynium> ok.. (was going to also ask... wis that planned for Rakudo *?)

[16:12] <KatrinaTheLamia> TimToady, I am certain if you propose to Larry that you intend to write a Perl 6 parser in Perl 0, he would grin madly at your insane request and grant you a copy of Perl 0 ^.^

[16:12] <pmichaud> I don't think async I/O has been specifically targeted for Rakudo * yet

[16:12] <diakopter> tee hee

[16:12] <hercynium> OK. good to know :)

[16:13] <Tene> hercynium: I'm also blocking on async IO for some projects... I was working on getting threading support in Rakudo last night, and got farther than I did last time, but I ran into some nasty broken plumbing in the bowels of Parrot.

[16:13] <hercynium> KatrinaTheLamia: I just asked Clark Kent to let Superman know I've got an extra ticket to the U2 concert next week.

[16:13] <rjh> hahaha

[16:14] <KatrinaTheLamia> TimToady, I am also certain that such a insane request, if successfully pulled off, would prolly either ensure Perl 6's place in the world... or doom it for all eternity.

[16:14] <pmichaud> ...or both.

[16:14] * KatrinaTheLamia missed hercynium's joke completely... but has an idea of what he may have suggested >.>

[16:14] <diakopter> pmichaud: :}

[16:14] <hercynium> :)

[16:14] <__ash__> Tene: what kind of problems does parrot have with threading? I have been curious on that, not that i could help any in all likely hood

[16:14] *** frederico left
[16:15] * diakopter wonders what perl0 was codenamed.  maybe FOIA could help.

[16:15] <Tene> __ash__: Parrot's threading works well in restricted cases, as far as I can tell.  The problem is that it falls on its face when cloning the interpreter when certain things are true.

[16:15] <TimToady> hercynium: I'm going to have to reprogram your brain to forget something; sorry about that.

[16:16] <KatrinaTheLamia> ah, so TimToady is none of then Mr. Wall.

[16:16] <Tene> __ash__: Things like "has a class in a nested namespace" or "has ever loaded any dynamic libraries" so far.

[16:16] <KatrinaTheLamia> meh, neat ^.^

[16:16] * hercynium looks at the neuralyzer

[16:16] <hercynium> *where am I??*

[16:16] <KatrinaTheLamia> hercynium, I'll tell you where you are not... safe ^.^

[16:17] <__ash__> So, cloning the interpreter seems to not be cloning deep enough? 

[16:17] * Tene is reminded of http://yudkowsky.net/other/fiction/prospiracy-theory

[16:17] <hercynium> I'm never safe when I'm alone

[16:17] <KatrinaTheLamia> oh, you're not alone...

[16:17] <Tene> __ash__: It's not that it doesn't clone some things, it's that it crashes badly when it does the wrong thing when trying to clone them.

[16:18] <KatrinaTheLamia> because look, sprout, we appear to have visitors.--oh shoot, I've forgotten the rest of this TFS DBZ Abridged line of quotes >.>

[16:19] *** frew__ left
[16:19] *** frew_ joined
[16:19] <hercynium> Tene: I can't begin to pretend I understand how/why parrot does what it does... but is the interpreter cloned in-process when a thread is requested?

[16:20] <Tene> hercynium: Yes.

[16:21] <KatrinaTheLamia> Tene, wouldn't that make it behave more like a fork, than an actual thread?

[16:21] <hercynium> seems a bit heavy to me... it makes sense if you consider the interpreter as another "CPU" in the VM though, I guess

[16:21] <Tene> KatrinaTheLamia: I don't actually understand the issue well-enough to say; sorry.

[16:22] *** rfordinal joined
[16:22] * hercynium hunts down chromatic to sate his curiosity! ;-)

[16:24] <__ash__> Tene: should you be using a Task? http://docs.parrot.org/parrot/latest/html/docs/pdds/pdd25_concurrency.pod.html rather than an interpreter clone?

[16:24] <masak> Tene: speaking of TODO... do you think we'll see a decent Rakudo REPL by April?

[16:25] <KatrinaTheLamia> Tene, how I'd likely handle it, is merely have each thread have its own process inside the VM. Where it goes through both instruction stacks with the same otherwise interpreter states elsewhere. About the only thing local to those would be the relevant scope. I mean outside the actual instruction stack and local scope, it should see everything else the other threads see. If you are really nice, a possible feature to be able to re

[16:25] <KatrinaTheLamia> nice different threads could be added as well ^.^

[16:26] <KatrinaTheLamia> but then, serves me right for reading the UNIX 6 source code, as I've prolly screwed lots up >.>

[16:27] *** sm` joined
[16:29] <__ash__> Parrot has 2 different ways of concurrency that I see currently, creating a "Task" and "ParrotThreads" which create a clone of the Interpreter but I am not sure which is the right thing to use in rakudo

[16:29] <__ash__> the Task doesn't fully clone the Interpreter 

[16:29] *** masak left
[16:30] <__ash__> but like I said, I haven't really looked into how they work in much detail, so I am not sure what the big differences are

[16:30] *** cotto joined
[16:30] <__ash__> gotta go to lunch bbl

[16:30] *** __ash__ left
[16:31] <KatrinaTheLamia> yeah, since it would be a thread, and not an actual fork, I'd prolly just put the instruction stack and local scope of a thread into a seperate area of memory, and just switch which instruction is done based on the various nice levels of the threads.

[16:31] <KatrinaTheLamia> so we'd have main: 1 tick; thread 1: 1 tick; thread 2: 1 tick; main: 1 tick;--and so on... or something to that effect.

[16:32] <KatrinaTheLamia> prolly getting to the point to making Parrot able to be nicer to some threads than others, based on some manner of command.

[16:33] <KatrinaTheLamia> possibly have the niceness range from -23 to 23, with them defaulting to a nice value of 1

[16:34] *** icwiener left
[16:34] <KatrinaTheLamia> but then, I am likely messing a _lot_ up here >.>

[16:35] <KatrinaTheLamia> this is how I'd approach it without even looking at the current code.

[16:35] *** abra left
[16:37] <KatrinaTheLamia> again each "Kind::Thread" as I guess I could call it, would only contain the instruction stack and variables it can see at its scope--but can view various scopes of other namespaces... like global or main >.>

[16:37] <KatrinaTheLamia> just how I'd approach it.

[16:38] <KatrinaTheLamia> so that we don't have Kind::Threads eavesdropping on other Kind::Threads, as that is not proper behaviour, we'd most likely have their scope in the program not writable or readable by other Kind::Threads. Except for possibly the main thread, with would likely end up with some form of Semaphore files or something like that.

[16:39] <KatrinaTheLamia> you are more than welcome to tell me how wrong I am at any given time, BTW ~.^

[16:40] <Tene> KatrinaTheLamia: Threads and Tasks in Parrot haven't been worked on in a very long time.  If you're interested in trying to work on this and make it a bit more sane, it would be very welcome. :)

[16:40] * hercynium knows far too little about it to say she's wrong :)

[16:41] <KatrinaTheLamia> Tene, I may look into it ^.^

[16:41] <Tene> KatrinaTheLamia: If you do, feel free to ask me about anything.

[16:43] <KatrinaTheLamia> thankies Tene ~

[16:43] <KatrinaTheLamia> Tene, I'll assume parrot is on Github?

[16:43] * KatrinaTheLamia is still a level 1 Knave at Perl 6 :O

[16:45] <PerlJam> KatrinaTheLamia: parrot is an svn project still

[16:46] <Tene> KatrinaTheLamia: Parrot uses svn, but I always access it through git-svn, because I can't use svn without screwing things up.

[16:46] <Tene> (I learned that the hard way)

[16:46] <PerlJam> KatrinaTheLamia: https://svn.parrot.org/parrot/trunk # BTW

[16:47] <Tene> https://trac.parrot.org/parrot/wiki/git-svn-tutorial is an intro to using Parrot with git-svn.

[16:47] <KatrinaTheLamia> thankies~

[16:48] <PerlJam> Just so I don't have to read throughg scrollback ... you guys told KatrinaTheLamia about #parrot, right?

[16:48] <KatrinaTheLamia> on of these days, I will have finished my genocides of Slimes, and become a Level 2 Knave at Perl ^.^

[16:48] <KatrinaTheLamia> there doesn't appear to be anybody in #parrot BTW >.>

[16:48] <PerlJam> KatrinaTheLamia: irc.perl.org

[16:48] <PerlJam> KatrinaTheLamia: different network

[16:49] <KatrinaTheLamia> I knew that >.>

[16:50] <Tene> AFK teaching

[16:51] <KatrinaTheLamia> PerlJam, does irc.perl.org have SSL?

[16:52] <KatrinaTheLamia> hmm.. apparently not >.>

[16:55] <KatrinaTheLamia> oh and thankies PerlJam ^.^

[16:57] *** patspam left
[16:58] <PerlJam> KatrinaTheLamia: hey, if you're volunteering to do stuff... thank *you*  :)

[16:58] <KatrinaTheLamia> I expect to be paid in cuddles~ ^.^

[16:58] <KatrinaTheLamia> cookies would be nice too~ ^.^

[16:59] <PerlJam> hugme hug KatrinaTheLamia 

[16:59] * hugme hugs KatrinaTheLamia

[16:59] *** jan_ joined
[17:03] *** Bzek joined
[17:03] *** stephenlb joined
[17:04] *** M_o_C joined
[17:11] *** M_o_C left
[17:13] <pmichaud> phenny:  tell masak I expect us to have a decent REPL by December.  Probably sooner than that.

[17:13] <phenny> pmichaud: I'll pass that on when masak is around.

[17:22] *** frederico_br joined
[17:34] *** sevvie left
[17:41] *** fredrecsky left
[17:43] *** __ash__ joined
[17:46] *** Zloyrusskiy joined
[17:48] *** Zloyrusskiy left
[17:49] *** M_o_C joined
[17:50] *** rindolf joined
[17:52] <M_o_C> Interesting: When Java can't extract the files to the installation target because there are also files with the same name the german version will quit with the error: "Can't compress core files.". Very helpful diagnostic message, Sun, well done. :x

[17:59] *** frederico_br left
[18:05] *** patspam joined
[18:12] *** Bzek left
[18:13] *** ruoso left
[18:23] *** rindolf left
[18:26] *** payload left
[18:31] *** mberends joined
[18:31] *** patspam left
[18:31] *** patspam joined
[18:35] *** snearch joined
[18:36] *** snearch left
[18:38] *** sahadev left
[18:40] *** sevvie joined
[18:43] *** sevvie left
[18:43] *** sevvie joined
[18:47] *** __ash__ left
[18:47] *** patspam left
[18:47] *** zloyrusskiy joined
[18:48] *** patspam joined
[18:52] *** zloyrusskiy left
[18:56] *** jrtayloriv joined
[19:04] *** cdarroch joined
[19:05] *** ejs left
[19:08] *** MoC` joined
[19:08] *** japhb left
[19:15] *** rbaumer left
[19:19] *** patspam left
[19:19] *** patspam joined
[19:20] *** sm` left
[19:20] *** sm` joined
[19:20] *** patspam left
[19:21] *** patspam joined
[19:23] *** jrtayloriv left
[19:24] *** patspam left
[19:24] *** patspam joined
[19:25] *** M_o_C left
[19:28] *** pdcawley joined
[19:35] *** sevvie left
[19:37] *** rbaumer joined
[19:40] *** vmbrasseur left
[19:43] *** Zloyrusskiy joined
[19:49] *** __ash__ joined
[19:54] *** takadonet left
[19:56] *** rbaumer left
[20:02] *** mberends left
[20:07] *** alester left
[20:07] *** Zloyrusskiy left
[20:09] *** Zloyrusskiy joined
[20:21] *** patspam left
[20:21] *** patspam joined
[20:24] *** stephenl1 joined
[20:27] <colomon> __ash__: Did you get pmichaud's patch for the Int.Num method to work last night?  It didn't seem to work when I tried it.

[20:27] <__ash__> it works for some tests, but not all of them

[20:27] <__ash__> there still seems to be something returning a float when it should be returning a Num 

[20:28] <__ash__> the fact that its a for loop kinda messes it up because some of the tests in the loop works, while other dont

[20:29] *** patspam left
[20:29] *** patspam joined
[20:29] <colomon> Hey, actually that's really interesting.  Let me take another look at it...

[20:32] <__ash__> oh

[20:32] <__ash__> if you want to see what the parrot data type is do .parrot

[20:32] <__ash__> rakudo: say 1.Num.PARROT

[20:32] <p6eval> rakudo 446d49: OUTPUT«Float␤»

[20:32] <__ash__> ^^ float, not num, there are a few other conversions that return floats that should be returning Nums 

[20:33] *** icwiener joined
[20:34] <colomon> I'll bet it has something to do with the arithmetic operators.

[20:34] <__ash__> probably, look into Num division

[20:35] <__ash__> thats where i'd check nexct

[20:35] <__ash__> next

[20:35] <__ash__> rakudo: say (1 / 1.5).PARROT

[20:35] <p6eval> rakudo 446d49: OUTPUT«Float␤»

[20:35] <__ash__> ^^

[20:35] <__ash__> there you go

[20:35] <__ash__> thats another place its doing the wrong datatype

[20:36] <colomon> Give me a minute or two and I hope to have it narrowed down nicely.  :)

[20:36] *** stephenlb left
[20:36] <__ash__> kk

[20:39] <__ash__> it has to do with in the Q:PIR { } segments where it boxes the values

[20:40] <__ash__> the boxing returns a float in some cases

[20:44] *** Zloyrusskiy left
[20:44] <__ash__> http://docs.parrot.org/parrot/latest/html/src/ops/pmc.ops.html#box(out_PMC,_in_NUM) there, when it calls box it should be converting that into a Num but currently its converting the value into a float, pmichaud said there may be a way to get the box to return a Num which would be a nicer way of solving the problem because as it stands if you ever box a num it always returns a float where it should be returning a Num

[20:45] <colomon> I can confirm: with the patch in there, 5.Num.sin works in any base.

[20:45] <colomon> However, (5.Num * 2.0).sin('radians') fails.

[20:45] <__ash__> rakudo: say (5.Num * 2.0).PARROT;

[20:45] <p6eval> rakudo 446d49: OUTPUT«Float␤»

[20:45] <pmichaud> anytime we ask parrot to automatically box a numeric ($N0) into a PMC, it will currently make it into a Float

[20:46] <pmichaud> we can change it so that it always makes a Num, but we take a speed hit from doing that

[20:46] <__ash__> i'd guess all arithmetic will return a float 

[20:46] <pmichaud> if you'd like, instead of changing all of the "box" opcodes, we could try turning on the type mapping and see what happens

[20:46] <pmichaud> just a sec

[20:46] <pmichaud> (creating patch)

[20:47] <dalek> rakudo: 8ea834f | pmichaud++ | build/PARROT_REVISION:

[20:47] <dalek> rakudo: Bump to 41181, to (hopefully) get some speed improvements.

[20:47] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8ea834f7b900bebca048191ae67a98b762d06fb6

[20:48] <colomon> What's happening with the trig.t test is the angles are all specified in Int degrees, and then when we convert to whatever we're actually testing we turn it into a Float by accident.

[20:49] <colomon> Except degrees, which should work after the Int.Num patch.

[20:49] <pmichaud> I have a different patch to try

[20:49] <pmichaud> doing a quick test on it now

[20:49] <colomon> k

[20:50] *** payload joined
[20:50] <pmichaud> rakudo:  say 3.Num.PARROT

[20:50] <p6eval> rakudo 446d49: OUTPUT«Float␤»

[20:50] <pmichaud> okay.  just a sec

[20:51] <pmichaud> http://gist.github.com/184809   # patch to automatically convert all Float PMCs into Num objects in Rakudo

[20:51] <pmichaud> on my system with that patch, I get

[20:51] <pmichaud> pmichaud@plum:~/rakudo$ ./perl6

[20:51] <pmichaud> > say 3.Num.PARROT

[20:51] <pmichaud> Num

[20:51] <lambdabot>   Not in scope: `say'Not in scope: data constructor `Num.PARROT'

[20:51] <pmichaud> and "say 3.sin" works

[20:52] <pmichaud> try that patch, see what fails, and let's see if it makes things incredibly slow

[20:52] <pmichaud> (I can't do it now, have to help kids with homework)

[20:52] <colomon> pmichaud: Actually that one should work because I got Int.sin working a few days ago.

[20:52] <colomon> I'll try the patch asap here and report back.

[20:53] *** sharada left
[20:54] <colomon> Going to take a few minutes, as I've just updated to the latest rakudo, and want to make sure it works as-is before patching it.

[20:56] <__ash__> i am rebuilding rakudo right now with the patch applied 

[20:57] *** cmv left
[20:58] *** frew__ joined
[20:58] *** frew_ left
[20:59] <__ash__> it worked for me, trig passes all the tests from the seciton that was failing 

[20:59] <colomon> \o/

[21:01] <__ash__> now its a complex number problem, but the Num ones all pass 

[21:01] <__ash__> for me

[21:01] <colomon> If the Num stuff works, I can probably have Complex working pretty quickly, I think.

[21:01] <colomon> Unless there's some sort of hard-coded Float inside it...

[21:03] <__ash__> well at least you know how to figure out if its a Float and a good idea where to fix that

[21:03] <colomon> Yup.  Once again, __ash__++ and pmichaud++.  :)

[21:04] *** sevvie joined
[21:06] *** icwiener left
[21:07] *** krunen left
[21:13] *** l3thal joined
[21:14] *** japhb joined
[21:18] *** l3thal left
[21:26] * frettled unsnoozes, «complex,», he heard.

[21:26] <frettled> :)

[21:26] <__ash__> colomon was working on some of the trig functions that use complex

[21:27] <frettled> yes, I saw that was mentioned :)

[21:31] *** jaffa8 left
[21:32] <pmichaud> on my system, my patch causes all tests to pass and doesn't seem to hurt performance too much.  Shall I apply it?

[21:33] * pmichaud applies.

[21:33] <frettled> pmichaud++, I hope.

[21:34] <pmichaud> applied, pushed.

[21:35] <__ash__> pmichaud it worked for me too, i didn't clock it for a comparision however, but it does fix some bugs... 

[21:36] <pmichaud> on my system it seemed to cost about 5-10 seconds total -- that's noise level as far as I'm concerned

[21:37] <dalek> rakudo: d0355a5 | pmichaud++ | src/classes/Num.pir:

[21:37] <dalek> rakudo: Enable hll_map for Float->Num.  This enables us to pass some tests

[21:37] <dalek> rakudo: and doesn't seem to kill performance too much.

[21:37] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d0355a5dde0973e01834d58de099e53b97fe70a6

[21:39] *** ruoso joined
[21:40] * hercynium is all happy, his camelia shirt already shipped!

[21:40] <pmichaud> hercynium: let me know how it looks when you get it -- I have no idea what the quality will be.  where did you order from?

[21:41] <hercynium> spreadshirt - looking around online they seem to have better ratings in regard to quality

[21:41] <pmichaud> that's what I had heard as well.  But I don't know if that's for their vector-based shirts only or for the dot-matrix ones also

[21:42] *** tak11 joined
[21:42] <hercynium> I'll be sure to post my opinion when it comes, maybe after it's first washing :)

[21:47] *** huf_ is now known as huf

[21:48] *** rbaumer joined
[21:52] *** patspam left
[21:52] <ruoso> hercynium, can others reues the shirt you ordered?

[21:53] <hercynium> reues? re-use?

[21:53] <ruoso> reuse, yea

[21:53] <ruoso> but I already found it

[21:53] <hercynium> heh

[21:54] <hercynium> maybe my girlfriend, but I generally don't pass my clothes around, schwern-style ;-)

[21:54] <ruoso> heh

[21:55] <pmichaud> I can make other custom designs/slogans if anyone wants them

[21:55] <ruoso> I didn't get the phrase, tho

[21:56] <pmichaud> the "second system" phrase?

[21:56] <hercynium> ruoso: http://en.wikipedia.org/wiki/Second-system_effect

[21:57] <pmichaud> "What's your problem" has at least three meanings in English (more)

[21:57] <hercynium> however, Larry has (as usual) found multiple meanings for the quip,

[21:57] <hercynium> what pmichaud said :)

[21:58] <pmichaud> (1)  "describe the problem you're having, so that I can help"

[21:58] <pmichaud> (2)  "that's what is wrong with me... what's wrong with you?"

[21:58] <pmichaud> (3)  "Yes, I'm a second system.  Do you have a problem with that!?!"

[21:58] *** arthur-- joined
[21:59] <pmichaud> (latter is usually said sarcastically or in a threatening tone)

[22:00] <ruoso> it's cool... the only problem of having it in a tshirt is that few people know what "Second System" menas

[22:00] <pmichaud> sure, it's a bit of an inside joke

[22:00] <pmichaud> we'll take other taglines as they come

[22:00] <pmichaud> I'm still thinking of  "Less code.  More Perl 6."

[22:01] <ruoso> pmichaud, have you seen Tim Bunce's today post?

[22:01] <pmichaud> or perhaps even:  "The rumors of my death have been greatly exaggerated."

[22:01] <moritz_> ruoso: the outsiders still see a nice butterfly ;-)

[22:01] <pmichaud> ruoso: yes, I did see the post (I think)

[22:02] <moritz_> which post?

[22:02] <hercynium> I will tell people that it's Mothra's adolescent form

[22:02] * moritz_ saw nothing

[22:02] <pmichaud> moritz_: http://bit.ly/15VKCh

[22:02] <ruoso> Perl: a great language for getting your job done, for the last 20 years, and the next 20

[22:02] <hercynium> (perhaps python is godzilla's younger form?)

[22:03] <moritz_> pmichaud: thanks

[22:05] <lisppaste3> colomon pasted "MacBook Pro spectest fails before Float -> Num patch" at http://paste.lisp.org/display/86895

[22:07] *** payload left
[22:08] *** synth left
[22:10] <pmichaud> colomon: hmmmm

[22:11] <colomon> pmichaud: just to be clear, that's the before.  I had those failures in my previous build as well.

[22:11] <colomon> starting the after spectest run now, should have more info in a bit.

[22:11] <colomon> afk

[22:13] *** hercynium left
[22:20] *** arthur-_ left
[22:20] *** PZt joined
[22:25] *** nihiliad left
[22:39] *** synth joined
[22:39] *** MoC` left
[22:44] *** vmbrasseur joined
[22:44] *** Muixirt left
[22:46] *** sm` left
[22:51] *** vmbrasseur left
[22:55] *** ruoso left
[22:55] *** pmurias left
[23:05] *** hercynium joined
[23:08] <colomon> wow, the spectests are taking a long time these days... it's been running solid since my last comment here.

[23:12] <lisppaste3> colomon annotated #86895 "post-pmichaud Float -> Num fix" at http://paste.lisp.org/display/86895#1

[23:16] *** sevvie left
[23:26] *** frew_ joined
[23:27] <colomon> Num.sin and Num.cos tests that were previously skipped work just fine now.

[23:28] <colomon> I've got to run out and buy cat and dog food, but I'll take a look at the failing Complex tests (currently fudged) when I get back.

[23:41] *** meppl joined
[23:49] *** payload joined
[23:50] *** __ash__ left
[23:51] *** frew_ left
[23:59] *** tak_ joined
[23:59] *** tak_ left
