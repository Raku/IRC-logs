[00:00] *** snarkyboojum joined
[00:00] <TimToady> and so you end up wanting your own event loop that can translate external events to a consistent form, and then, of course, you've introduced yet another form of events into the world :/

[00:01] <sjohnson> sounds a bit complicated.. best if i just don't hit the array key

[00:01] <TimToady> it may be turtles all the way down, but it's events all the way back up...

[00:01] <StephenPollei> Null PMC access in get_string() -- you guys were interested in those kinds of things errors?

[00:01] <sjohnson> in the beginning, was Perl hard to write?

[00:01] <TimToady> for some definition of "you" that tends not to include me

[00:02] <sjohnson> back in the NASA days

[00:02] <TimToady> well, Perl was pre-NASA, actually

[00:02] <TimToady> it wasn't rocket science, if that's what you're asking :)

[00:02] <TimToady> but it was hard enough that nobody else did it

[00:03] <TimToady> it's the sort of thing that's easy if you're insane, and impossible otherwise... :)

[00:04] <StephenPollei> {my Role $cino; isa_ok($cino, Role );} that's what caused the Null PMC access

[00:04] <StephenPollei> nobody sane would do that

[00:05] <sjohnson> well you seem to really know C well, with those skills under your belt, i'm curious as to how difficult it was, in general, to implement

[00:05] *** Sexygirl joined
[00:05] <sjohnson> i only know how to do a hello world program in C, and with my skillset, me imagining how to undertake the task is very baffling for my puny brain

[00:06] *** Sexygirl left
[00:08] <sjohnson> but i would be curious to know what 'you' thought about it at the time

[00:08] *** Guest8221 left
[00:09] <sjohnson> if it was fun, east/difficult, rewarding, frustrating at times, etc

[00:09] <TimToady> all of the above

[00:09] <sjohnson> actually, 'hello world' was a bit too much for my C level, i think i wrote a "hello city" program

[00:10] <TimToady> it's about the same difficult as raising children

[00:11] *** justatheory joined
[00:13] <sjohnson> was integrated regex technology implemented / thought of right from Square One?

[00:13] <sjohnson> cause it is my favourite feature

[00:13] <TimToady> sure, that's the E of PEARL, extraction

[00:14] <sjohnson> heh

[00:15] <sjohnson> i thought it was Eclectic

[00:15] *** justatheory left
[00:15] *** DemoFreak left
[00:16] <pugs_svn> r27053 | stephenpollei++ | added more built-in types to check for existence

[00:17] *** davidad left
[00:17] *** davidad joined
[00:18] *** davidad left
[00:25] *** gfote left
[00:25] *** bacek joined
[00:43] <FurnaceBoy> sjohnson, there are at least 2 expansions

[00:44] <FurnaceBoy> Pray Everything Runs Legitimately

[00:48] *** sri_kraih_ joined
[00:49] *** takadonet joined
[00:49] <takadonet> hey everyone

[00:50] <sjohnson> heh

[00:53] <sjohnson> hey taka

[00:56] <takadonet> how are you doing sjohnson?

[00:57] <sjohnson> i bit worried, hoping i didn't forget my VISA card at a bar

[00:58] <takadonet> ouch

[01:01] <sjohnson> not concerned about someone taking it, just that my buddy threw a beer bottle in the parknig lot of the place

[01:01] <sjohnson> and hoping they didnt think it was me

[01:01] *** takadonet left
[01:01] <TimToady> maybe you need new buddies

[01:01] *** rhr_ joined
[01:03] *** sri_kraih left
[01:05] <sjohnson> yeah definitely

[01:05] <sjohnson> need guys i can talk about Perl with

[01:06] <sjohnson> for real tho!

[01:06] <sjohnson> i'd rather talk about "geek stuff" than what they talk about

[01:06] *** Molaf left
[01:09] *** xinming joined
[01:16] <sjohnson> rakudo:  say my $*DUMMY.WHAT

[01:16] <p6eval> rakudo 86aeaf: OUTPUT«Statement not terminated properly at line 2, near ".WHAT"␤in Main (src/gen_setting.pm:0)␤»

[01:16] <sjohnson> rakudo:  my $*DUMMY; say $*DUMMY.WHAT

[01:16] <p6eval> rakudo 86aeaf: OUTPUT«Failure()␤»

[01:16] <sjohnson> rakudo:  my $DUMMY; say $DUMMY.WHAT

[01:16] <p6eval> rakudo 86aeaf: OUTPUT«Failure()␤»

[01:18] *** mycelium joined
[01:18] <sjohnson> well rakudo thinks i'm a failure

[01:19] * sjohnson hangs his head in shame

[01:24] *** synth joined
[01:27] <jdv79> everyone fails

[01:27] *** ihrd joined
[01:28] *** ihrd left
[01:28] <StephenPollei> rakudo: my KeySet $pamu

[01:28] <p6eval> rakudo 86aeaf: OUTPUT«Malformed declaration at line 2, near "KeySet $pa"␤in Main (src/gen_setting.pm:0)␤»

[01:38] *** payload left
[01:55] *** meldrake left
[01:56] *** payload joined
[02:01] *** Whiteknight left
[02:17] <JDlugosz> Hey, what's this about "identify" on this server?  I did what it asked, but it tells me "... not a registered nickname."

[02:22] *** amoc__ left
[02:22] <Infinoid> If you didn't already have a nickserv account, it doesn't affect you

[02:23] *** xinming_ joined
[02:30] *** snarkyboojum left
[02:33] *** justatheory joined
[02:35] *** xinming left
[02:38] *** skids_ left
[03:07] *** frew|work joined
[03:49] *** eternaleye joined
[03:57] *** MrKrueger joined
[04:02] *** ihrd joined
[04:05] *** ihrd left
[04:13] *** meppuru left
[04:35] *** FurnaceBoy left
[04:40] *** justatheory left
[04:40] *** alester joined
[04:46] *** xinming_ is now known as xinming

[04:49] *** synth left
[04:49] *** synth joined
[04:55] *** unitxt left
[05:14] *** snarkyboojum joined
[05:25] *** frew|wor1 joined
[05:26] *** snarkyboojum left
[05:26] *** frew|work left
[05:31] *** snarkyboojum joined
[05:40] *** snarkyboojum left
[05:40] *** justatheory joined
[05:40] *** amoc joined
[05:48] <mycelium> hello. how relevant the book "Perl 6 and Parrot essentials" (A.Randal, D.Sugalski, L.Totsch, o'reilly, 2004) now?

[05:48] *** justatheory left
[05:49] *** masak joined
[05:50] *** DemoFreak joined
[05:53] *** literal joined
[06:01] *** synth left
[06:01] *** synth joined
[06:18] <araujo> mycelium, it wouldn't hurt to read i think, but things keep changing yet

[06:25] *** frew|wor1 left
[06:36] *** Traveler joined
[06:36] *** Traveler left
[06:53] *** cookys joined
[06:57] *** alester left
[06:58] *** xinming_ joined
[07:01] *** eternaleye left
[07:02] *** literal left
[07:02] *** phenny left
[07:05] *** xinming__ joined
[07:07] *** literal joined
[07:07] *** phenny joined
[07:08] *** eternaleye joined
[07:16] *** xinming left
[07:19] *** cotto left
[07:19] *** cottoo joined
[07:21] *** xinming_ left
[07:22] *** dakkar joined
[07:29] *** agentzh left
[07:33] *** barney joined
[07:35] <moritz_> mycelium: things like the language design prinicples discussed in the book are still very intersting, but much of the language has changed since...

[07:36] <moritz_> mycelium: but the book has been open-sourced since then, and kept reasonably up to date. The Perl 6 part now lives in pugs repo, in doos/tutorial iirc

[07:39] * masak wonders if we're entering a period of relative stability now

[07:40] <moritz_> TimToady's and pmichaud's recent discussions about list and captures make me believe otherwise :-)

[07:40] <Matt-W> Morning

[07:42] <masak> Matt-W: o/

[07:42] <masak> moritz_: I truly, fundamentally, don't grok Captures yet.

[07:44] * Matt-W doesn't either

[07:44] <mycelium> thanks to all (for answers to my question about perl book)

[07:46] <moritz_> masak: sometimes I think I do... and then I look at old test cases, or hear TimToady talking... and then it's all gone

[07:48] <masak> the evanescence of Capture. :)

[07:51] <moritz_> std: sub binary (0|1 $n) { $n }

[07:51] <p6eval> std 27053: OUTPUT«##### PARSE FAILED #####␤Unable to parse multisig; couldn't find final ')' at /tmp/6qtIIliCh8 line 1:␤------> sub binary (0|1 $n) { $n }␤    expecting any of:␤        param_sep␤        parameter␤        post_constraint␤  trait␤  type_constraint␤    whitespace␤FAILED

[07:51] <p6eval> ..00:02 38m␤»

[07:51] <moritz_> ouch, I'm sitting at a keyboard that has no dollar sign :/

[07:52] *** Molaf joined
[07:52] <masak> such is the tyrrany of the Eurozone...

[07:54] <Matt-W> ouch

[07:54] <Matt-W> kind of essential on a programmer keyboard

[07:54] <Matt-W> in any language

[07:54] <Matt-W> except for C programmers

[08:00] *** DanielC joined
[08:03] *** DanielC left
[08:04] *** DanielC joined
[08:05] <DanielC> Out of curiosity, why is it that #perl an #perl6 are not in irc.perl.org ?

[08:05] *** xinming joined
[08:06] <moritz_>  @historical_reasons

[08:06] <moritz_> and the fact that you shouldn't have to join a perl server just to chat about perl

[08:06] <moritz_> we don't want to encapsulate our community too much

[08:07] <DanielC> not encapsulating++

[08:08] <Matt-W> encapsulating++ # other things

[08:08] <pugs_svn> r27054 | lwall++ | [S12] dwim on things like: say "Foo = $foo.";

[08:08] *** Molaf left
[08:08] *** Molaf joined
[08:09] <pugs_svn> r27055 | lwall++ | [STD] say "$foo."; should not be a ."" method call

[08:09] <pugs_svn> r27055 | lwall++ | [CORE] add some missing types found by examples testing

[08:11] *** riffraff joined
[08:22] <DanielC> Parrot question: I'm using "substr" to step through every byte in an array (which is represented as a string). Is there a faster way to step through every byte in a byte stream?

[08:23] <DanielC> I wrote a checksum function in PIR and about 70% of the time is spent on "substr".

[08:23] *** snarkyboojum joined
[08:30] *** xinming__ left
[08:34] <Matt-W> split it into a list of characters and step over those

[08:34] <Matt-W> and remember that you'll be needing to use something that's actually a collection of bytes when it's implemented

[08:36] <DanielC> The program is already implemented, and currently I use "ord".

[08:36] <DanielC> I don't know how to split a string into a list of characters in PIR.

[08:40] <DanielC> $P0 = split '', $S0

[08:41] <moritz_> DanielC: I'm sure there's some way to access the bytes, but I don't know if it's available from PIR. But if you write it in C (as a PMC) it will surely work

[08:43] *** hanekomu joined
[08:43] <DanielC> Someone at #parrot just offered an alternative. Parrot already has an md5 function, and the test file shows how to use it.

[08:43] <DanielC> So I think I'll just go for that.

[08:43] <DanielC> (I'm assuming that that'll be fast)

[08:45] <moritz_> and if not, you can blame someone else :-)

[08:46] <DanielC> :-)

[08:46] <DanielC> It uses OpenSSL, so it really should be fast.

[08:50] <masak> I've been wanting to use that in November, too. so, DanielC, if you figure out how to call it from Rakudo, please blog about it or nopaste code here, or something. :)

[08:51] <DanielC> sure

[08:53] <jnthn> o/

[08:53] <DanielC> o/

[08:54] <masak> o/

[08:56] <Matt-W> masak: can't you write a module which provides a sub md5 and uses inline PIR?

[09:00] <Matt-W> oooh

[09:00] <masak> I suppose I could. I didn't say it's difficult, just that I haven't bothered to find out how to do it. :)

[09:00] <Matt-W> "Allison committed her remaining local changes to the pcc_rewiring branch, and I'm hoping that a few eyes looking over it will help resolve the remaining problems."

[09:00] * masak pictures free-running helpful eyes

[09:08] <DanielC> Yay! It works!

[09:09] <DanielC> And it runs much faster :-D

[09:10] <masak> DanielC++ # show us the code!

[09:10] <DanielC> This is all PIR, no Rakudo. Doy you still want it?

[09:11] <masak> yes, I think so.

[09:11] <Matt-W> oh yes

[09:11] <DanielC> Hmm... is the paste URL working?

[09:13] <DanielC> http://pastebin.com/m51548a6a

[09:13] <buubot> DanielC: The paste m51548a6a has been copied to http://erxz.com/pb/18189

[09:14] <masak> DanielC: thanks!

[09:14] <DanielC> masak: This is for the parrot-module-lib project.

[09:15] <masak> cool.

[09:15] <DanielC> It is light years faster than the Fletcher algorithm I wrote.

[09:15] <DanielC> I'll just document a little before I commit.

[09:17] *** barney left
[09:18] <Matt-W> light years is not a measurement of time!

[09:18] <DanielC> :-)

[09:21] <masak> neither is it a unit of speed.

[09:26] *** bacek left
[09:26] <jnthn> And anyway, I reckon it's only 100km faster.

[09:26] * jnthn yawns

[09:31] <Matt-W> morning jnthn

[09:32] *** clintongormley joined
[09:33] <jnthn> Matt-W: morning

[09:38] <Matt-W> I had an interesting thing this morning

[09:38] <Matt-W> switched my laptop from Fedora over to Ubuntu 9.04 last night

[09:39] <Matt-W> got all the stuff for building rakudo installed this morning

[09:39] <Matt-W> the arguments to the 'prove' that ships with Ubuntu are different

[09:39] <Matt-W> I had to change my Makefile

[09:39] <Matt-W> Form's is now prove --perl '$(RAKUDO)' -r t/

[09:40] <Matt-W> Found that quite surprising

[09:40] *** amoc left
[09:47] *** synth left
[09:47] <DanielC> masak:  I uploaded the new checksum program.

[09:55] *** mberends joined
[09:55] <DanielC> o/ mberends

[09:56] <mberends> o/ backlogging... I see you had some news :)

[09:56] <DanielC> md5 rulez!

[09:57] <Gothmog_> but br0ken

[09:57] <Gothmog_> ;-)

[09:58] <DanielC> Gothmog_: Depends on what you want it for.

[09:58] <DanielC> Gothmog_: Too many people throw around the "broken" thing without really understanding it.

[09:59] <mberends> there won't be an exploit for md5 that affects our use case. ever.

[09:59] <Gothmog_> Yeah, i was just kidding. I understand the issue quite well.

[09:59] <DanielC> We are not using md5 for cryptographic/security purposes. We are only using it as a checksum (aka. to detect accidental error).

[09:59] * mberends stumbled over the parrot md5 while reading docs offline this morning :)

[10:04] *** amoc joined
[10:06] *** agentzh joined
[10:09] <DanielC> On my computer the new checksum.pir takes 1min 34s to hash a 4 GiB file.

[10:09] <mberends> and how long would it take to copy to /dev/null instead?

[10:10] * DanielC tries

[10:11] <mberends> disk reading accounts for most of the time

[10:11] <DanielC> I'm sure.

[10:11] <Matt-W> that is quite a lot of data :)

[10:12] <Matt-W> can't throw 4GB files around with impunity quite yet

[10:12] <DanielC> Matt-W: "Genome::Human"? :-)

[10:12] <Matt-W> :)

[10:12] <Matt-W> that'd be fairly large

[10:12] <DanielC> I wonder how large the human genome is in GiB.

[10:12] <viklund_> Or, "Genome::Wheat" <- several factors larger

[10:12] <DanielC> really?

[10:13] <viklund_> yes, plants have larger genomes than animals in general

[10:13] <viklund_> The wheat genome is very tricky

[10:13] <DanielC> That is fascinating.

[10:13] <viklund_> the human genome is 3 giga basepairs, so about 3GIB

[10:13] <Matt-W> the whole area is extremely odd

[10:13] <DanielC> Is there any reason why? Is it because plants have been around longer maybe?

[10:14] <viklund_> DanielC: No, on land, animals were first

[10:14] <mberends> afk &

[10:14] <Matt-W> some plants have multiple copies of each chromosome

[10:14] <DanielC> So you can put the human genome on a DVD :)

[10:15] <Matt-W> DanielC: well, somebody's... a description of all the possibilities might be a bit bigger

[10:15] <viklund_> one hypothesis I heard is that plants can't run away, so they need more elaborate defenses (but I don't know if that's still a likely hypothesis, I don't keep up with plant research) 

[10:15] <DanielC> viklund_: ???  Maybe we are not agreeing on the word "plant" but in the Carboniferous period the world was all forest an insects but there were no animals.

[10:16] *** ruoso left
[10:16] <viklund_> DanielC: Ehm, the first things on land out of water were not plants (maybe they weren't animals either)

[10:16] <DanielC> mberends: Copying to /dev/null took 5 minutes (!!!)

[10:16] <viklund_> single celled protists and stuff probably...

[10:17] <viklund_> but I don't have any extensive knowledge here either (I do bacteria)

[10:17] <DanielC> What do you do for a living?

[10:17] <viklund_> PhD student in Molecular Evolution

[10:18] <DanielC> ok

[10:18] <masak> viklund_: interesting. I would at least have thought plants made it out of the water long before animals did.

[10:18] <masak> this is just a feeling, though. I haven't checked.

[10:18] <viklund_> masak: Yes, that's the intuition

[10:19] <DanielC> We might be disagreeing on the word "plant" because a lot of the things that people often think of as plants, are not, but I don't know what to call the more general type.

[10:19] <DanielC> e.g. algae is not a plant.

[10:20] <viklund_> DanielC: This question came up on a JC we had half a year ago, one of the younger lecturers said it, and we said "interesting", and that was basically it

[10:21] <masak> Wikipedia puts the oldest land plant fossils at late Silurian. I haven't found a corresponding time point for land animals.

[10:21] <viklund_> I guess I should check up on it in more detail, so I know what I'm talking about...

[10:21] <DanielC> http://en.wikipedia.org/wiki/Carboniferous  <-- Says that in the Carboniferous periods there were already plants and insects and this is the time when the first tetrapods (all amphibians at the time) went into land.

[10:22] <masak> ah. good.

[10:22] <viklund_>          kv bj

[10:22] <viklund_> daughter touching keyboard...

[10:22] <masak> she's showing early talent.

[10:23] <jnthn> std: kv bj

[10:23] <p6eval> std 27055: OUTPUT«Undeclared routine:␤   bj used at 1 ␤ok 00:02 35m␤»

[10:23] <jnthn> Well, she wrote a valid Perl 6 program.

[10:23] <DanielC> heh

[10:25] *** lichtkind joined
[10:26] <DanielC> http://en.wikipedia.org/wiki/Silurian  <--  The first "plants".

[10:26] <DanielC> According to wikipedia, the first fish to evolve legs are in the Devonian.

[10:26] <lichtkind> mberends: i did C yesterday night

[10:26] <DanielC> The Devonian also has the first "seed bearing plants"

[10:27] <DanielC> But in the Silurian we have moss and "the first fossil records of vascular plants".

[10:27] <masak> DanielC: and insects? did they come after the plants, too?

[10:27] <DanielC> masak: I always imagined so, but I don't know.

[10:27] * DanielC keeps reading Wikipedia

[10:27] <masak> I also imagine they did.

[10:28] <DanielC> "the first possible fossils of insects appeared around 416 Ma in the Early Devonian."

[10:28] <DanielC> Yes, that's after plants.

[10:29] <DanielC> "the first fish evolved legs and started to walk on land as tetrapods around 365 Ma"

[10:30] <DanielC> So insects come about 60 million years before tetrapods.

[10:30] <masak> though the 'fish evolved legs' is a bit of an oversimplification, I'd say.

[10:30] <DanielC> Well, that's from the introductory paragraph.

[10:30] <masak> it has been successfully popularized by images from the 60's, IIRC. :)

[10:30] <DanielC> It is supposed to be a simplification. I guess if I read the whole article I'll find details.

[10:31] <masak> DanielC: no, I mean the whole 'animals getting up on land' business. it's fascinating when you start to think of the motives the early water-dwelling creatures could have really had.

[10:32] <viklund_> That "fish evolved legs" after plants on land doesn't really contradict that there were animals on land before plants, they might have went extinct though, but as I said I'm going to do a check-up on this, going to work later today.

[10:32] <masak> DanielC: for example, crawling over a low embankment from one shallow pool to another.

[10:32] <masak> DanielC: and no legs were needed for that, just the ability to crawl and shuffle around.

[10:32] <DanielC> I documentary I saw said that it began with fish going to shallower and shallower waters to escape predators.

[10:33] <viklund_> masak: Laying eggs on land will protect them from predators

[10:33] <masak> sure, sure.

[10:33] <viklund_> and so on...

[10:33] <viklund_> that might have happened before plants even

[10:33] * masak likes the 'and so on...' part

[10:34] <viklund_> so I guess it's also a question of what we mean with "land animals"

[10:34] <viklund_> anyway, I'm speculating wildly here

[10:34] <DanielC> viklund_: What land animal came before legs?

[10:34] <viklund_> something crawling up, laying eggs in the sand, and the crawling back?

[10:35] <viklund_> a bony fish should be able to do that I think

[10:35] <DanielC> fish with legs == crawling ?

[10:35] <viklund_> no

[10:35] <DanielC> I don't think that they mean that the fish were walking around.

[10:35] <viklund_> snakes don't have legs

[10:35] * DanielC considers getting pedantic about snakes, but decides not to :)

[10:35] <viklund_> ;)

[10:37] <DanielC> Well, anyways, you are right that it depends on what we mean by "land animals". I was thinking of amphibians. But I would be interested to know if there were fish who would crawl on land and "hold their breath".

[10:37] <viklund_> when did crabs and such evolve?

[10:37] <DanielC> similar to tetrapods

[10:37] <viklund_> DanielC: yes

[10:37] <viklund_> ok

[10:40] <DanielC> At least, a documentary I saw seemed to say so. The documentary also painted the picture of athropods and vertebrates/tetrapods fighting for dominance for millenia.

[10:40] <DanielC> Some times one group dominates, and some times the other. It was very interesting.

[10:44] *** cls_bsd left
[10:50] <mberends> DanielC, the /dev/null copy must have been bytewise, maybe that's a cp thing. maybe try this instead: dd if=MyBigFile of=/dev/null bs=65536 count=65536

[10:51] *** integral left
[11:00] * DanielC tries dd

[11:01] * Matt-W tries to figure out how perl 5's unpack actually works

[11:01] *** payload left
[11:02] <DanielC> Matt-W: I have never understood pack/unpack.

[11:02] <Matt-W> me neither

[11:02] <Matt-W> but I need it now

[11:03] <masak> unpack is wonderful. and no, I don't grok it either.

[11:03] <DanielC> mberends: dd took 3min.

[11:03] <DanielC> mberends: Oh wait...

[11:03] <DanielC> The file is bigger than 4GiB.

[11:03] <DanielC> mberends: How do you make dd read only the first 4GiB?

[11:04] <DanielC> The file is 7.6 GiB

[11:04] <DanielC> actually, 7.6G

[11:05] <Matt-W> okay, I think i figured out unpack

[11:05] <masak> that was quick!

[11:06] <Matt-W> okay

[11:06] <Matt-W> no I didn't

[11:07] <Matt-W> argh

[11:08] <Matt-W> the documentation just bounces off me

[11:08] <Matt-W> I'm going to have some lunch

[11:08] <DanielC> mberends: So let's see... 7.6G is 7.07GiB. If 7.08GiB takes 3min to read, then 4GiB should take 1min 42sec. But the md5 program ran in 1min 34sec. So the cost of the md5 is clearly negligible.

[11:08] <DanielC> s/7.07/7.08/

[11:10] <antiphase> bytes read = bs*count or the file size, whichever smaller

[11:19] *** mycelium left
[11:22] *** eternaleye left
[11:23] <masak> rakudo: my $anthem = $*IN.slurp; say $anthem.chars; say $anthem.bytes;

[11:23] <p6eval> rakudo 86aeaf: OUTPUT«616␤639␤»

[11:24] <sjohnson> hey masak how's it going

[11:24] *** eternaleye joined
[11:25] <masak> sjohnson: hey sjohnson! it's going well, I think. too little time for Perl 6 lately, but I really shouldn't complain. :)

[11:25] <masak> sjohnson: how are you?

[11:26] <masak> rakudo: my @anthem = $*IN.slurp.comb; say @anthem.grep({ .bytes > 1 }).perl

[11:26] <p6eval> rakudo 86aeaf: OUTPUT«["Ä", "ä", "ß", "ö", "ü", "ö", "ü", "Ö", "ü", "Ö", "ß", "ü", "ü", "Ö", "ü", "Ö", "ä", "ß", "ü", "ö", "ö", "Ö", "Ö"]␤»

[11:26] <masak> :)

[11:26] <jnthn> \o/

[11:26] <sjohnson> could be better

[11:27] <masak> sjohnson: sorry to hear that.

[11:28] <jnthn> my @anthem = $*IN.slurp.comb; say @anthem.grep({ .bytes > 1 })>>.lc.uniq.perl

[11:28] <masak> rakudo: say $*IN.slurp.comb.grep({ .bytes > 1 }).join

[11:28] <p6eval> rakudo 86aeaf: OUTPUT«ÄäßöüöüÖüÖßüüÖüÖäßüööÖÖ␤»

[11:28] <jnthn> rakudo: my @anthem = $*IN.slurp.comb; say @anthem.grep({ .bytes > 1 })>>.lc.uniq.perl

[11:28] <p6eval> rakudo 86aeaf: OUTPUT«["ä", "ß", "ö", "ü"]␤»

[11:28] <masak> oh, the endless hours of fun to be had with the Austrian national anthem...

[11:29] * jnthn is happy to sneak paralell dispatch into another example

[11:29] <sjohnson> what do you guys use as your favourite console irc client?

[11:29] <jnthn> irssi

[11:29] <masak> rakudo: say $*IN.slurp.comb.grep({ .bytes > 1 })>>.lc.uniq.sort.join

[11:29] <p6eval> rakudo 86aeaf: OUTPUT«ßäöü␤»

[11:29] <sjohnson> i use weechat but am thinking to switch back to irssi because it won't save a chat conversation with a command by default

[11:29] <masak> sjohnson: ERC.

[11:30] <masak> it rocks.

[11:30] <sjohnson> and everywhere in that channel is making fun of me for suggesting this

[11:30] <sjohnson> such a simple f**king feature

[11:30] <sjohnson> </rant>

[11:31] *** wuno joined
[11:31] <sjohnson> i feel better already

[11:31] <sjohnson> rakudo: say "sjohnson, don't feel so bad about it";

[11:31] <p6eval> rakudo 86aeaf: OUTPUT«sjohnson, don't feel so bad about it␤»

[11:31] <masak> sjohnson: ERC gives your chat session the flexibility of Emacs. not much beats that. saving chats is just the beginning.

[11:33] <sjohnson> i am listening

[11:33] <sjohnson> and interested

[11:34] <masak> sjohnson: no, that's all. :) use ERC.

[11:34] <masak> the better you know Emacs, the more you'll be able to leverage into your ERC usage, of course.

[11:35] <masak> but knowing that an extensible, programmable, insanely configurable editor sits right behind your chat window is... kinda nice.

[11:35] <rjh> or kinda horrifying

[11:35] * jnthn is surprised that the Emacs operating system didn't come with an IRC client built in as well as a text editor. ;-)

[11:35] <masak> :)

[11:36] <sjohnson> to be honest, i'm move of a vi user

[11:36] <sjohnson> would i still like it?

[11:36] <masak> jnthn: I think my Emacs installation came with ERC, actually.

[11:36] <masak> jnthn: but it is a module, just like almost everything else.

[11:36] <masak> sjohnson: that's up to you to decide. I'm a vim user too.

[11:36] <masak> I simply use Emacs and vim for different things.

[11:37] <sjohnson> kind of like how i use Miracle Whip and mayonnaise for different things

[11:37] <masak> yes, kind of like that.

[11:37] * jnthn has to look up Miracle Whip

[11:39] <masak> Miracle Whip must be the Emacs isomorph in this analogy. :)

[11:39] <sjohnson> in all honestly i like miracle whip on as much things as mayonnaise

[11:39] <sjohnson> well dudes, i should be going to bed

[11:40] <sjohnson> nice chatting briefly with you guys.  tomorrow, i no longer pledge allegience to my current irc client

[11:40] <viklund_> jnthn: is it possible to decode a string to utf8 in rakudo (either directly or via some parrot and PIR) right now?

[11:41] <viklund_> that is, do you know if there is a parrot function to do it?

[11:41] <jnthn> I think maybe the transcode op?

[11:42] <viklund_> ok, we have problems with encodings in November, and I've realized we need to be able to converr

[11:42] <viklund_> s/r$/t

[11:42] *** H1N1 left
[11:42] <viklund_> s{$}{/}

[11:42] *** Sunbeam joined
[11:42] *** Sunbeam[Pinged] joined
[11:42] *** Sunbeam left
[11:42] * viklund_ is still in p5regex mode

[11:42] *** Sunbeam[Pinged] is now known as H1N1

[11:43] <jnthn> viklund_: Ah, mayve it's trans_encoding

[11:43] <jnthn> http://docs.parrot.org/parrot/latest/html/src/ops/string.ops.html

[11:44] <viklund_> jnthn: ok, thanks, I'll check that out tonight and see if I can feed it a Perl6String somehow

[11:44] <viklund_> c u

[11:44] <viklund_> o/

[11:45] *** wuno left
[11:52] <Matt-W> masak: having fun with svn?

[11:54] <masak> Matt-W: it's like, I know updating with SVN on the terminal window is easy. it's not trivial, but I can get around the errors that SVN, in its infantile stubbornness, throws at me. but to get those same errors as dialog windows, and then have to resolve them by navigating window menus... that's just sadism.

[11:56] *** payload joined
[11:57] <Matt-W> heh

[11:58] <Matt-W> well I'm going quietly mad over here

[11:58] <masak> I'm actually at a point in my life where the assertion that doing things on a CLI is easier than using a GUI seems not only obviously true, but impossible to question.

[11:58] <masak> and I'm a Mac OS X user!

[11:58] <Matt-W> I think it depends on the CLI and the GUI

[11:58] <Matt-W> I do prefer a GUI web browser

[11:58] <masak> oh, right. hum.

[11:58] <Matt-W> I hybridise

[11:59] <Matt-W> some things are easier on the CLI, definitely

[11:59] <Matt-W> I use GNOME Do (rather like Quicksilver) to launch GUI apps though

[11:59] <Matt-W> it's much easier to just do super-space pid<Enter> than trying to find the pidgin launcher and click on it

[11:59] <Matt-W> argh

[12:00] <Matt-W> why do we have to encrypt passwords before sending them over the wire

[12:00] <Matt-W> it's just causing me pain :(

[12:02] <payload> well humans tend to talk to each other instead of expressing themself with a bunch of fingers pointing at stuff. i think a cli and a gui relates much the same

[12:02] *** riffraff left
[12:03] <Matt-W> it's nice to be able to talk to the computer

[12:03] <Matt-W> argh

[12:03] <Matt-W> must stop writing Perl 6 things

[12:03] <Matt-W> this'd be so much less ugly in Perl 6

[12:03] <masak> :)

[12:04] <masak> Matt-W: that's how we reel people in, with the allure of beautiful code.

[12:05] <Matt-W> unfortunately I have to write perl 5 today

[12:05] <Matt-W> I'm not sure even if what I'm trying to do is correct

[12:11] *** mizioumt joined
[12:14] <DanielC> rakudo: class Foo { method bar() { return self } }; my $foo = Foo.new(); $foo.bar()

[12:14] <p6eval> rakudo 86aeaf:  ( no output )

[12:14] <DanielC> rakudo: class Foo { method bar() { return self } }; my $foo = Foo.new(); $foo.bar().perl.say

[12:14] <p6eval> rakudo 86aeaf: OUTPUT«Foo.new()␤»

[12:14] <DanielC> Ok. I guess that this means that "return self" does what I think it does.

[12:15] <masak> DanielC: what do you think it does?

[12:16] <DanielC> $foo2 = $foo.bar() would be another link to the same object.

[12:17] <DanielC> $foo2 and $foo are the same guy.

[12:19] <jnthn> That's what it does.

[12:19] <DanielC> thanks

[12:19] <jnthn> rakudo: class Foo { method bar() { return self } }; my $foo = Foo.new(); say $foo.WHERE; say $foo.bar().WHERE

[12:19] <p6eval> rakudo 86aeaf: OUTPUT«-1229318128␤-1229318128»

[12:19] <jnthn> Same memory address for both.

[12:20] <DanielC> .WHERE++

[12:20] <DanielC> I've noticed that Perl 6 has a lot of useful introspection features.

[12:21] <masak> rakudo: say 1.WHERE

[12:21] <p6eval> rakudo 86aeaf: OUTPUT«-1230127720␤»

[12:21] <masak> rakudo: say 1.WHERE; 2.WHERE

[12:21] <p6eval> rakudo 86aeaf: OUTPUT«-1229658184␤»

[12:21] <masak> rakudo: say 1.WHERE; say 2.WHERE

[12:21] <p6eval> rakudo 86aeaf: OUTPUT«-1229717120␤-1229732936␤»

[12:21] <Matt-W> WOOOHOO! Success!

[12:21] <Matt-W> ahem

[12:22] *** hanekomu left
[12:22] *** skids_ joined
[12:23] <jnthn> DanielC: Rakudo is implementing more and more of 'em too.

[12:23] <jnthn> rakudo: say Any.^methods(:local).elems # how many methods does Any have

[12:23] <p6eval> rakudo 86aeaf: OUTPUT«66␤»

[12:24] <DanielC> rakudo: 1.^methods.perl.say

[12:24] <p6eval> rakudo 86aeaf: OUTPUT«[{ ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ...

[12:24] <p6eval> ..}, { …

[12:24] <DanielC> ?

[12:24] <jnthn> .perl on a code isn't so useful yet.

[12:24] <masak> :)

[12:24] <DanielC> ok

[12:24] <jnthn> rakudo: Any.^methods>>.name>>.say

[12:24] <p6eval> rakudo 86aeaf: OUTPUT«can␤isa␤does␤Complex␤elems␤end␤keys␤kv␤pick␤sort␤values␤abs␤int␤log␤polar␤sqrt␤»

[12:25] <DanielC> cool....

[12:25] *** ruoso joined
[12:25] <jnthn> ...that wasn't 66 of em, p6eval!

[12:25] <DanielC> I really like all the introspection.

[12:25] <jnthn> I metamodel and liked it.

[12:26] <DanielC> I also love how everything is an object, so you can do 1.foo() and something.perl.say and so on.

[12:26] <Matt-W> I've loved that idea ever since I saw Ruby do 10.times { }

[12:26] <ruoso> Hello!

[12:26] <Matt-W> which I thought was pretty cool

[12:26] <ruoso> mildew: say 'Good Morning, #perl6'

[12:26] <DanielC> These are all things that I've always found very attractive about Ruby, and I'm very glad Perl 6 is copying them.

[12:26] <p6eval> mildew: OUTPUT«Good Morning, #perl6␤»

[12:26] <Matt-W> calling a method on a literal, and then giving it a closure

[12:26] <DanielC> Matt-W: Ruby++

[12:27] <Matt-W> apple's new multicore programming thing seems to be based on closures, by the way

[12:27] <Matt-W> they've added something very closure-like to C, C++ and Objective-C

[12:27] <DanielC> I'm glad that Perl 6 is copying so many great things from Ruby.

[12:27] <Matt-W> and they pass them around to different threads

[12:27] *** riffraff joined
[12:27] <Matt-W> I suspect it's something we could do very easily :)

[12:27] <Matt-W> DanielC: it's copying great things from all over, and then doing great things of its own

[12:28] <DanielC> Yes, it is.

[12:28] <Matt-W> Writing in Perl 5 seems primitive and clunky to me now, even with rakudo in the state it's in

[12:28] <DanielC> Perl 6 is also copying a lot of great things from Haskell, and things like hyperoperaors and junctions are brand new.

[12:29] <DanielC> Perl 6 seems like a mixture of my previous three favourite languages: Perl 5, Ruby and Haskell.

[12:29] <Matt-W> well I love Haskell

[12:29] <Matt-W> so I have no complaints

[12:29] *** riffraff left
[12:29] <DanielC> y

[12:29] <DanielC> Perl 6 = Perl 5 + Ruby + Haskell + new stuff.

[12:30] <DanielC> I love that.

[12:31] *** integral joined
[12:31] *** FurnaceBoy joined
[12:32] *** mib_ds9gzb joined
[12:32] <Matt-W> Perl 6 == AWESOME

[12:32] <DanielC> Question: I define class Foo and $foo is an instance. How do I tell Perl what it should do when I write "say $foo" ?

[12:32] <Matt-W> define method Str

[12:32] <Matt-W> which tells it what to do when it's asked to stringify

[12:33] <DanielC> class Foo { method Str { ... } }  <-- like that?

[12:33] <Matt-W> and return a suitable string to represent the instance

[12:33] <Matt-W> yes

[12:33] <DanielC> thanks

[12:33] *** hanekomu joined
[12:33] <Matt-W> rakudo: class A { method Str { say "Hello!" } }; say A.new;

[12:33] <p6eval> rakudo 86aeaf: OUTPUT«Hello!␤1␤»

[12:34] <Matt-W> hmm

[12:34] <Matt-W> where did that 1 come from?

[12:34] <DanielC> rakudo: class A { method Str { "Hello!" } }; say A.new;

[12:34] <p6eval> rakudo 86aeaf: OUTPUT«Hello!␤»

[12:34] <Matt-W> oh

[12:34] <Matt-W> silly me :)

[12:34] <DanielC> :-)

[12:34] <Matt-W> that's what I meant to write

[12:34] <Matt-W> DanielC++

[12:35] <DanielC> rakudo: 1 == 1 ? say "y" : say "n"

[12:35] <p6eval> rakudo 86aeaf: OUTPUT«Statement not terminated properly at line 2, near "? say \"y\" "␤in Main (src/gen_setting.pm:0)␤»

[12:35] <DanielC> rakudo: 1 == 1 ?? say "y" !! say "n"

[12:36] <p6eval> rakudo 86aeaf: OUTPUT«y␤»

[12:36] <DanielC> hm

[12:36] <Matt-W> you'll get used to that :)

[12:36] <DanielC> p6eval took some time to figure that out.

[12:37] <rjh> out of interest why are we using ?? !! now

[12:37] <DanielC> rakudo: say "ans " ~ 1 == 1 ?? "y" !! "n"

[12:37] <p6eval> rakudo 86aeaf: OUTPUT«n␤»

[12:37] <DanielC> rjh: Because ? : is too easy.  :-(

[12:37] <DanielC> rakudo: say "ans " ~ (1 == 1 ?? "y" !! "n")

[12:38] <p6eval> rakudo 86aeaf: OUTPUT«ans y␤»

[12:38] <rjh> They do stand out more, which is better

[12:39] <DanielC> I don't like ?? because it makes my text editor's syntax highlighting go beserk.

[12:39] *** amoc left
[12:39] <DanielC> rjh: Nice rationalization.

[12:39] <rjh> well, they're a conditional construct and they're often lazily used on one line

[12:40] <rjh> still don't like it

[12:40] <rjh> ancient perl dictates that ?? can be used as a symonym for // :)

[12:41] <jnthn> C# uses ?? for null-or

[12:42] <DanielC> If C# jumps off a cliff, would you jump off a cliff   <jk>

[12:44] <DanielC> Oh well. ?? will do.

[12:46] *** donaldh joined
[12:48] <jnthn> DanielC: Heh, was just noting another language making use of ??. :-)

[12:48] *** masak left
[12:48] *** payload1 joined
[12:48] *** payload left
[12:49] <jnthn> C# is in the top four (computer) languages I write in.

[12:49] <DanielC> What are the other three?

[12:55] <jnthn> Perl 5, Perl 6 (or subsets of), C.

[12:55] <jnthn> C I only really write for Rakudo/Parrot though.

[13:00] <DanielC> if you write class F { has $.a, $.b, $c is rw }  does that mean that $.a, $.b, $.c are all read-write or is it just $.c ?

[13:01] <rjh> std: class F { has $.a, $.b, $.c is rw }

[13:01] <p6eval> std 27055:  ( no output )

[13:02] <DanielC> rakudo: class F { has $.a, $.b, $.c is rw }; my $x = F.new(); $x.a = 1;

[13:02] <p6eval> rakudo 86aeaf: OUTPUT«Statement not terminated properly at line 2, near "is rw }; m"␤in Main (src/gen_setting.pm:0)␤»

[13:02] <jnthn> class F { has ($.a, $.b, $.c is rw) }; my $x = F.new(); $x.a = 1;

[13:03] <jnthn> rakudo: class F { has ($.a, $.b, $.c is rw) }; my $x = F.new(); $x.a = 1;

[13:03] <p6eval> rakudo 86aeaf: OUTPUT«Cannot assign to readonly variable.␤in Main (/tmp/JSryPiXZyJ:2)␤»

[13:03] <DanielC> I see.

[13:03] <rjh> weird that you need the brackets

[13:03] <jnthn> I think that's odd that it applied the is rw to $.a there..

[13:03] <DanielC> Is it possible to put the rw before? "has rw $a"

[13:03] <jnthn> no

[13:03] <DanielC> :-(

[13:04] <rjh> it didn't apply rw to $.a ?

[13:04] <DanielC> "Cannot assign to readonly variable"

[13:05] <jnthn> oh yeah!

[13:05] <jnthn> So it's right!

[13:05] <jnthn> duh. :-)

[13:05] <jnthn> rakudo 1, jnthn 0

[13:06] <rjh> jnthn: noticed your comment about MultiSub inheriting from PMCResizableArray

[13:06] <rjh> *RPA even

[13:06] <rjh> Out of curiosity how is that stupid

[13:07] <jnthn> Because a MultiSub has an array of candidates, rather than being an array.

[13:08] <jnthn> The way it is now, it inherits all of the things that arrays get.

[13:08] <jnthn> Which then causes all kinds of problems.

[13:08] <DanielC> rakudo: class F { has $.a, $.b }

[13:08] <jnthn> Because we expect a multi to be something you can talk about as one thing, rather than being a list.

[13:08] <p6eval> rakudo 86aeaf: OUTPUT«Lexical 'self' not found␤»

[13:08] <DanielC> ???

[13:08] <rjh> I see, it doesn't have methods that subs have

[13:08] <jnthn> DanielC: That parses as (has $.a), $.b

[13:09] <rjh> you had to fudge them in

[13:09] <DanielC> rakudo: class F { has ($.a, $.b) }

[13:09] <p6eval> rakudo 86aeaf:  ( no output )

[13:09] <jnthn> rjh: Well, the bigger problem is that on an isa check, it claims to be a list.

[13:09] <DanielC> jnthn: Is that correct or is it a bug?

[13:09] <jnthn> List flattning then tries to flatten out the multi, and then things explode.

[13:09] <rjh> so it should be a 'has' relation, not an 'isa'

[13:09] <DanielC> rakudo: class F { has ($.a, $.b = 1) }

[13:09] <jnthn> rjh: Right.

[13:09] <p6eval> rakudo 86aeaf:  ( no output )

[13:09] <rjh> thanks for explaining

[13:10] <rjh> So that's going to be fixed in the future, then?

[13:10] <jnthn> rjh: The number of workarounds Rakudo has got for this is...irritating.

[13:10] <DanielC> std: class F { has $.a, $.b }

[13:10] <rjh> It doesn't sound like it would be difficult to change.

[13:10] <p6eval> std 27055: OUTPUT«ok 00:02 37m␤»

[13:10] <jnthn> rjh: I hope so. I'm whined about it on #parrot in hope that somebody will take the initiative. :-)

[13:10] <jnthn> rjh: But otherwise I'll probably get to it myself.

[13:10] <DanielC> jnthn: So, this is a bug in Rakkudo?

[13:11] <jnthn> DanielC: std checks syntax, not semantic/runtime issues.

[13:11] <jnthn> Rakudo isn't saying it's a syntax error.

[13:11] <rjh> what is rakudo trying to do with has $.a, $.b

[13:11] <jnthn> std: my $a, $b;

[13:11] <p6eval> std 27055: OUTPUT«Potential difficulties:␤  Variable $b is not predeclared at /tmp/AfrqhbZrgk line 1:␤------> my $a, $b;␤ok 00:02 37m␤»

[13:11] <jnthn> It's exactly because of this.

[13:11] <jnthn> std: my ($a, $b);

[13:11] <p6eval> std 27055: OUTPUT«ok 00:02 37m␤»

[13:12] <jnthn> Same difference with has.

[13:12] <DanielC> But std did not have the same complaint about "has".

[13:12] <rjh> it doesn't know if $.b already exists

[13:12] <jnthn> Sure, because $.b would in theory work.

[13:12] <jnthn> erm,

[13:12] <jnthn> *could*

[13:13] <DanielC> ok

[13:13] <jnthn> It's just a method call.

[13:15] *** amoc joined
[13:15] <rjh> confusing... perl 5 allows my $a = 1, $b = 5; (with strict and warnings)

[13:15] <rjh> but not my $a, $b;

[13:16] <jnthn> Really?

[13:16] <jnthn> That surprises me a little.

[13:19] <rjh> i don't get why you'd prohibit my/has $a, $b

[13:20] *** payload1 left
[13:20] *** payload joined
[13:22] <dakkar> rjh: try with different names. $a and $b are special in Perl 5

[13:22] <dakkar> perl -Mstrict -Mwarnings -e 'my $foo=1,$bar=5'

[13:22] <dakkar> Global symbol "$bar" requires explicit package name at -e line 1.

[13:22] <baest> my ($x, $y) would work, though

[13:23] <dakkar> sure

[13:23] <rjh> dakkar: thx

[13:24] <rjh> so the second assignment is to the global $b

[13:24] <dakkar> yep

[13:24] * rjh still doesn't get the syntax

[13:24] <dakkar> the comma is the "comma operator", borrowed from C

[13:24] <rjh> $foo = (1, $bar = 5)

[13:24] <dakkar> it takes two expressions, evaluates them in order, and throws away the result of the first one, returing the second one

[13:25] <rjh> that doesn't seem sensible when declaring a variable

[13:25] <dakkar> my $foo=1,$bar=2 ==> my $foo=1;$bar=2;

[13:25] <dakkar> of course not

[13:25] <rjh> i see

[13:26] <dakkar> that's why you need parentheses

[13:26] <rjh> it's rather stupid that my() has such low precedence

[13:26] <dakkar> hmm

[13:27] <dakkar> I'm not sure it's just a matter of precedence

[13:27] <dakkar> when you write (in Perl 6) my ($foo,$bar)=(1,2); you get a signature on the lhs, and the rhs is seen as a capture

[13:28] <dakkar> (please someone stop me if I'm saying wrong things)

[13:29] <jnthn> dakkar: signature on lhs is correct.

[13:29] <dakkar> thanks :)

[13:29] *** pmurias joined
[13:29] <pmurias> ruoso: hi

[13:31] *** decasm joined
[13:32] <ruoso> hi pmurias 

[13:38] *** zev left
[13:38] <pmurias> ruoso: one thing i'm worried about is that the mildew with the amount of stuff in Perl 6 will be horribly slow

[13:39] <ruoso> pmurias, all evil is premature optimization squared

[13:41] *** synth joined
[13:42] *** zev joined
[13:46] *** amoc left
[13:46] *** amoc joined
[13:47] *** xinming_ joined
[13:48] *** cosimo_ joined
[13:52] *** dakkar left
[13:53] *** xinming left
[13:54] *** cosimo left
[14:04] *** snarkyboojum left
[14:09] *** pmurias left
[14:10] *** cls_bsd joined
[14:13] *** alester joined
[14:15] *** MrKrueger is now known as meppl

[14:20] *** cosimo_ left
[14:20] *** cosimo joined
[14:21] *** mib_ds9gzb left
[14:24] *** Matt-W_ joined
[14:25] *** Matt-W left
[14:25] *** Matt-W_ is now known as Matt-W

[14:27] *** justatheory joined
[14:35] *** ruoso left
[14:36] *** amoc left
[14:41] <pmichaud> good morning, #perl6

[14:41] <Matt-W> hi pmichaud

[14:42] <jnthn> hi pmichaud 

[14:43] *** buu joined
[14:43] <Matt-W> my server died :(

[14:43] <Matt-W> something chewed up all the memory

[14:43] <Matt-W> hammering the database in the process

[14:44] <Matt-W> wouldn't it be much easier if these things didn't have to be reachable from the internet

[14:46] <rjh> ...you'd replace your server with a carrier pidgeon? that doesn't sound easier.

[14:47] <rjh> -d

[14:48] <Matt-W> at least all you have to do is feed them

[14:48] <Matt-W> and defend them from birds of prey

[14:48] *** sri_kraih_ left
[14:48] <Matt-W> and jet engines

[14:49] <Matt-W> maybe two yoghurt pots and some string?

[14:49] <rjh> really, really long string

[14:49] *** sri_kraih joined
[14:49] <Matt-W> yes

[14:49] <Matt-W> kept nice and tight

[14:49] <Matt-W> but then you're vulnerable to an idiot with a pair of scissors

[14:50] <rjh> and then eventually we'd connect string across all the different computers

[14:50] <rjh> and route vibrations across them

[14:50] <rjh> ahem

[14:52] <payload> i want to use Web.pm. i put it in rakudo/projects/web but maybe it's the wrong place... perl6 rakudo/projects/web/Configure complains that there is no ./Configure in @*INC... perl6 -e '@*INC.say' prints "."

[14:54] *** buubot joined
[14:56] *** sri_kraih left
[14:57] *** sri_kraih joined
[15:09] <FurnaceBoy> rjh++

[15:17] *** payload left
[15:20] *** donaldh left
[15:21] *** donaldh joined
[15:25] *** skids_ left
[15:36] *** jferrero joined
[15:45] *** mizioumt left
[15:45] <viklund_> is there a guide somewhere on how to use Q:PIR?

[15:46] <pmichaud> right here.

[15:46] <moritz_> viklund_: Q:PIR{ pir code here }

[15:46] <pmichaud> note that each PIR statement has to be on a line by itself

[15:46] <moritz_> viklund_: return values can be assigned to %r

[15:47] <viklund_> moritz_: ok, thx

[15:47] <pmichaud> you're free to safely use $P0...$P9, $S0..$S9, $I0..$I9, $N0..$N9

[15:47] <viklund_> that is a start

[15:47] <moritz_> viklund_: and find_lex 'variablename' finds Perl 6 lexicals and parameters

[15:47] <pmichaud> note that the %r must be a PMC

[15:47] <moritz_> afk again :-)

[15:47] <viklund_> ok, I start with some simple stuff and then see what I can do

[15:47] *** nihiliad joined
[15:50] <pmichaud> there are several examples in src/setting

[15:50] <viklund_> yes, I'm looking at those

[15:56] *** payload joined
[15:56] *** ruoso joined
[15:59] <viklund_> shouldn't this work: http://pastebin.com/d2478cf78

[15:59] <viklund_> or have I misunderstood something?

[15:59] <viklund_> (probably the latter)

[15:59] <jnthn> viklund_: hmm, that doesn't look so wrong

[16:00] <jnthn> rakudo: my $r = Q:PIR { %r = box 1 }; say $r;

[16:00] <p6eval> rakudo 86aeaf: OUTPUT«1␤»

[16:00] <viklund_> ok, I'll recompile my rakudo to see

[16:01] <viklund_> if that's somehow the error

[16:03] <jnthn> Hmm...maybe but I dodn't remember that stuff changing of late.

[16:04] *** mizioumt joined
[16:05] <viklund_> oh, well, it can't hurt

[16:06] <viklund_> but it didn't work

[16:06] * jnthn je confusovany

[16:06] <jnthn> viklund_: What error do you get?

[16:06] <viklund_> Lexical '$r' not found

[16:06] <viklund_> but I can run it via ./perl6 -e <what jnthn wrote up there>

[16:07] <viklund_> that works

[16:07] <viklund_> oh

[16:07] <viklund_> I didn't paste the hole thing

[16:07] <viklund_> I had a 'use v6' at the top of that file as well

[16:08] <viklund_> when I removed that it worked

[16:08] <jnthn> :-|

[16:08] <jnthn> That's...odd;

[16:08] <viklund_> but it works now, so I'm happy, rakudobug?

[16:08] <viklund_> I can send one if you want to

[16:09] <pmichaud> I wonder if the 'use v6' was missing a semi.

[16:09] <viklund_> might

[16:09] <viklund_> pmichaud: yes, it was :p

[16:09] * viklund_ is embarrassed

[16:10] <jnthn> rakudo: use v6 my $foo;

[16:10] <p6eval> rakudo 86aeaf:  ( no output )

[16:10] <jnthn> rakudo: use pimp my $ride;

[16:10] <p6eval> rakudo 86aeaf:  ( no output )

[16:10] <viklund_> jnthn: LOL

[16:10] * jnthn suspects parsing bug.

[16:11] <jnthn> std: use pimp my $ride;

[16:11] <p6eval> std 27055: OUTPUT«ok 00:02 36m␤»

[16:11] <jnthn> oh

[16:11] * jnthn is a litle surprised

[16:13] *** amoc joined
[16:14] *** viklund joined
[16:18] *** mizioumt1 joined
[16:18] *** mizioumt1 left
[16:18] <moritz_> rjh: I backlogged a bit... beware: in Perl 5 $a and $b are not subject to "use strict", so if you want to test its behaviour, use different variables ;-)

[16:22] *** amoc^ joined
[16:23] *** mizioumt1 joined
[16:23] *** amoc^ is now known as amoc_

[16:23] *** mizioumt1 left
[16:24] *** mizioumt left
[16:25] *** amoc left
[16:27] *** Patterner left
[16:27] *** mizioumt joined
[16:27] *** Psyche^ joined
[16:27] *** Psyche^ is now known as Patterner

[16:27] <rjh> moritz_: yeah, I know they're "special" globals for sort, just forgot :)

[16:33] *** zamolxes joined
[16:48] <payload> proto doesn't build perl 6 :(

[16:51] *** unitxt joined
[16:55] *** unitxt left
[16:56] <payload> http://pastebin.com/m29155eb1

[16:57] <viklund> payload: just a moment

[16:58] <viklund> I think its pretty simple to fix

[16:59] <viklund> btw, are you using the default config file?

[16:59] <viklund> or have you changed rakudo to bleeding?

[17:00] <payload> well i changed to bleeding

[17:01] <viklund> did you uncomment self.CREATE in lib/Installer.pm and lib/Ecosystem.pm?

[17:01] <viklund> and additonally are you running proto from the proto dir?

[17:01] <moritz_> when I see just the title of an RT ticket and know "oh, that's by masak" - then you know that my vacations weren't long enough ;-)

[17:01] *** zamolxes left
[17:02] <payload> ah it's in two files... i just saw and uncommented in Ecosystem... need a sec

[17:02] <payload> yes, i run from ./proto/

[17:02] <viklund> ok

[17:02] <payload> ah done, thx

[17:03] <viklund> np

[17:03] *** jferrero left
[17:14] *** cottoo is now known as cotto

[17:17] *** finanalyst joined
[17:25] *** amoc_ left
[17:26] *** hanekomu left
[17:28] *** amoc joined
[17:37] <payload> hmm, tests of web.pm fail

[17:37] *** M_o_C joined
[17:37] <payload> :-\ t/01-web-basics.t ............ Unknown import list expression in use at line 2, near ";\nplan 1;\n"

[17:38] *** japhb left
[17:39] <payload> ah i think it uses the wrong  prove

[17:39] <payload> well no

[17:39] <payload> no idea

[17:42] *** synth left
[17:42] <viklund> unfourtunatly I dont know anything of Web.pm...

[17:42] <viklund> ask masak, when he shows up

[17:43] <viklund> there are some other ppl in that project too, forgot who now...

[17:43] *** hanekomu joined
[17:46] <Tene> Me!

[17:46] <Tene> Except I never looked at the tests.

[17:46] *** jferrero joined
[17:50] *** synth joined
[17:51] <payload> std: use foo.pm;

[17:51] <p6eval> std 27055: OUTPUT«ok 00:02 35m␤»

[17:52] *** clintongormley1 joined
[17:52] *** sri_kraih left
[17:53] *** clintongormley left
[17:53] *** buubot left
[17:54] *** buubot joined
[17:55] *** Molaf left
[17:55] *** Molaf joined
[18:05] *** japhb joined
[18:09] *** skids_ joined
[18:15] *** amoc left
[18:22] <TimToady> payload: yes, it parses, but it doesn't mean what you think it means

[18:22] <payload> well it is used in web.pm test 01 as      use Test.pm;        it fails a line afterwards ^^

[18:23] <payload> i think it must be       use Test;

[18:23] <payload> unless i want only to import    sub pm    in the Test module

[18:25] <payload> is there a way to see all modules which are importable? like in python the  help("modules")  ?

[18:26] <TimToady> not yet, the library API is still in negotiation

[18:29] <TimToady> but it's the sort of thing that I expect will be supported

[18:29] <TimToady> since we're moving toward more of a database-ish view of at least the officially installed modules

[18:30] <TimToady> btw, it's parsing (in STD) as use foo $_.pm

[18:31] <TimToady> perhaps we should require some whitespace after the module name

[18:45] *** eternaleye left
[18:50] <payload> rakudo: 

[18:50] <payload> =begin usage

[18:50] <payload> foo

[18:50] <payload> =end usage

[18:50] <payload> bah

[18:50] <payload> well it would say    =begin without matching =end at line 1, near "\nfoo\n=end "

[18:53] <payload> ah, it needs USAGE :-\

[19:03] <sjohnson> hello Toady

[19:15] *** Fuad joined
[19:15] <Fuad> Hello all

[19:16] <Tene> Hi!

[19:17] <jnthn> hi Fuad 

[19:18] <Fuad> Long time,jnthn:)

[19:19] <jnthn> Aye. :-)

[19:19] <jnthn> How's things?

[19:19] <Fuad> Fine here(: 

[19:19] <Fuad> How are you doing?

[19:19] <sjohnson> 4hello faud

[19:19] <sjohnson> fuad

[19:19] <jnthn> I'm good. Today is last day of work, then I'm having holiday. :-)

[19:19] <Fuad> sjohnson ;)

[19:19] <Fuad> jnthn,thats a great news:P

[19:20] *** donaldh left
[19:20] <Fuad> you can breather so easily now

[19:20] *** jferrero left
[19:20] <jnthn> :-)

[19:21] <Fuad> i will be in the army:>

[19:21] <Fuad> after 1 month

[19:21] <Fuad> for 1 year

[19:21] <jnthn> Ah, required national service?

[19:21] <Fuad> so no holiday for me;)

[19:21] *** donaldh joined
[19:21] <jnthn> Yes, army is almost certainly not a holiday.

[19:22] <Fuad> i was studing my masters degree,thats why i didnt go after my university graduation

[19:22] <jnthn> Ah, OK.

[19:23] * Fuad waves at mberends

[19:23] <Fuad> where is ,masak?:)

[19:24] <jnthn> He was around earlier today I think, maybe back later tonight.

[19:24] <Fuad> ah nice

[19:44] <sjohnson> jnthn: off topic, but do you use any irssi plugins?

[19:45] <jnthn> sjohnson: no

[19:45] <jnthn> sjohnson: I didn't even know there was such a thing. ;-)

[19:46] <sjohnson> indeed! they are written in.. you guessed it... PERL!

[19:46] <sjohnson> http://scripts.irssi.org/

[19:47] <jnthn> "This script strips the hungarian accents." - but I never speak with one!

[19:47] <sjohnson> yeah i don't need that one

[19:47] <sjohnson> ;)

[19:48] <sjohnson> i wodner if i should whip up a piglatin -> english translator

[19:48] *** spage joined
[19:49] <jnthn> How long do you it'd take me to get /kick'd if I started using http://scripts.irssi.org/html/dau.pl.html#switch_leet- ? ;-)

[19:50] <sjohnson> considering you are an op here, probably a few years

[19:50] <sjohnson> me, on the other hand

[19:51] <sjohnson> 5 minutes? :)

[19:51] <jnthn> Yeah I'd get all 1337 and kick you and everyone would be like w00t d00d!

[19:51] <jnthn> OK, time for me to go grab someone from the airport...back in a while.

[19:52] <Tene> jnthn: the only problem with that is that the server doesn't understand /|<1ck

[19:53] *** xinming joined
[19:53] *** Fuad left
[19:53] *** kane__ joined
[19:54] *** kane__ is now known as kane[laptop]

[19:56] *** Meldrake joined
[19:59] *** xinming_ left
[20:00] <sjohnson> maybe TimToady wrote some of these irssi plugins :)

[20:00] <pmichaud> phone # be there in 2

[20:03] <sjohnson> pmichaud: are you getting picked up from the airport/

[20:12] *** finanalyst left
[20:13] <pmichaud> sjohnson: ??

[20:16] <sjohnson> i thought jnthn was picking ya up

[20:17] *** skids_ left
[20:18] <TimToady> must have been two other people...

[20:18] <payload> i have following regex: / ^ \/pub\/ $ /

[20:19] <TimToady> Perl 6?

[20:19] <payload> how can i change    /  ...   /  to something where i don't have to escape   /  ?

[20:19] <payload> Perl 6, sure

[20:19] <TimToady> m[ ^ '/pub/' $ ]

[20:20] <payload> ah nice

[20:20] <TimToady> though in that case, / ^ '/pub/' $ / also works

[20:20] <TimToady> or m!! or m<> etc

[20:20] <TimToady> or use rx if you want to defer evaluation

[20:21] <sjohnson> does the same idea work in p5?

[20:21] <payload> well maybe i search some weird unicode ( )

[20:21] <sjohnson> i've been getting around it by putting what i want to check by in separate vars

[20:21] <TimToady> yes, though not internal quotes

[20:21] <sjohnson> probably the cludge way to do it, but it worked

[20:23] <TimToady> rakudo: say "abc" ~~ m『.(.).』

[20:23] <p6eval> rakudo 86aeaf: OUTPUT«abc␤»

[20:23] <TimToady> rakudo: say "abc" ~~ m『.(.).』[0]

[20:23] <p6eval> rakudo 86aeaf: OUTPUT«Method 'postcircumfix:[ ]' not found for invocant of class 'Regex'␤»

[20:23] <TimToady> rakudo: say ("abc" ~~ m『.(.).』)[0]

[20:23] <p6eval> rakudo 86aeaf: OUTPUT«b␤»

[20:24] <payload> rakudo: say "abc" ~~ m ⦃.(.).⦄

[20:24] <p6eval> rakudo 86aeaf: OUTPUT«abc␤»

[20:24] <sjohnson> can we get a Perl5 evaluator on here too?

[20:25] <payload> rakudo: say "abc" ~~ m ↪.(.).↩

[20:25] <p6eval> rakudo 86aeaf: OUTPUT«abc␤»

[20:25] <TimToady> addictive, ain't it?

[20:26] <payload> rakudo: say "abc" ~~ m ☃.(.).☄

[20:26] <p6eval> rakudo 86aeaf: OUTPUT«abc␤»

[20:26] <payload> omg

[20:26] <ruoso> is that right?

[20:26] <ruoso> (wtf symbols are that?)

[20:26] <payload> is a snowman always closed by a meteor

[20:26] <payload> ?

[20:26] <TimToady> snowman and comet?

[20:27] <TimToady> I think that's bogus

[20:27] <TimToady> std: abc" ~~ m ☃.(.).☄

[20:27] <p6eval> std 27055: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/XeeIOePMN4 line 1:␤------> abc" ~~ m ☃.(.).☄␤    expecting any of:␤    POST␤   argument list␤      infix or meta-infix␤      infix stopper␤  postfix␤  postfix_prefix_meta_operator␤       standard

[20:27] <p6eval> ..stopper␤       statement modifier…

[20:27] <TimToady> std: say "abc" ~~ m ☃.(.).☄

[20:27] <p6eval> std 27055:  ( no output )

[20:27] <sjohnson> TimToady: is a Perl5 evaluator on this chan too radical?

[20:28] <TimToady> no, too conservative

[20:28] <TimToady> std: say "abc" ~~ m ☃.(.).☃

[20:28] <p6eval> std 27055: OUTPUT«ok 00:04 37m␤»

[20:28] <payload> a python evaluator to act as a bad example?

[20:28] <TimToady> there you go

[20:29] <TimToady> rakudo: say "abc" ~~ m ☃.(.).☃

[20:29] <p6eval> rakudo 86aeaf: OUTPUT«abc␤»

[20:30] <TimToady> rakudo: say "abc" ~~ m ☄.(.).☃

[20:30] <p6eval> rakudo 86aeaf: OUTPUT«abc␤»

[20:30] <TimToady> o_O

[20:30] <TimToady> O_o

[20:31] *** icwiener joined
[20:31] <sjohnson> >_>

[20:31] <sjohnson> <_<

[20:32] <lichtkind> mberends: ping

[20:32] <TimToady> I don't see how both ☄☃ and ☃☄ can work

[20:32] <sjohnson> timtoady:  did you have to customize irssi to behave how you like it?

[20:32] <TimToady> some

[20:33] *** M_o_C left
[20:34] <sjohnson> did you map ^L to clear the buffer window?

[20:34] <payload> say 'perl6' ~~ m O.*O

[20:34] <payload> rakudo: say 'perl6' ~~ m O.*O

[20:34] <p6eval> rakudo 86aeaf: OUTPUT«perl6␤»

[20:36] *** rewt is now known as rewtv6

[20:36] <payload> rakudo: say 'perl6' ~~ m O\O\OO

[20:36] <payload> well :-\

[20:36] <p6eval> rakudo 86aeaf: OUTPUT«pe␤»

[20:37] *** rewtv6 is now known as rewt``

[20:37] *** rewt`` is now known as rewt

[20:40] <DanielC> @seen mberends

[20:40] <lambdabot> mberends is in #perl6. I last heard mberends speak 9h 50m 23s ago.

[20:41] <DanielC> @seen masak

[20:41] <lambdabot> I saw masak leaving #perl6 7h 52m 32s ago, and .

[20:42] <TimToady> sjohnson: no

[20:43] *** Meldrake left
[20:43] <TimToady> I mapped my page left and page right keys to switch windows

[20:43] <sjohnson> heh

[20:44] *** spage left
[20:44] <sjohnson> when was that keyboard made?  1912?

[20:45] <TimToady> it's a Lenovo T61

[20:45] <TimToady> it has two extra keys near the arrows

[20:46] <TimToady> I also use them to go left and right in my firefox tabs

[20:47] <sjohnson> imagine you're using Firefox... 10 tabs open, you're on tab 7.  you quickly switch to tab 3, read for a few seconds, then close it.  what tab (ideally) should you be left on?

[20:47] <sjohnson> after tab 3 closes?

[20:48] <TimToady> I almost never close embedded tabs, since my leftward ones are semi-permanent, and the rightmost one the most recent

[20:48] <TimToady> I use the tabs primarily as a stack

[20:49] <sjohnson> i would say in response to my question, ideally you should be left on tab 7, where you started

[20:49] <sjohnson> so you dont have to "click around" to get back to tab 7

[20:49] <sjohnson> (i suppose it would truly be "tab 6")

[20:50] <TimToady> everyone's a UI designer :)

[20:50] <sjohnson> if anyone is reading this and thinking "YES!  I agree!"  then Tab Mix Plus is the extension for you

[20:50] <sjohnson> so far, everytime i show this behaviour to someone in real life, they become a convert

[20:51] *** pmurias joined
[20:51] <sjohnson> TimToady: what is your main desktop OS of choice?

[20:52] <sjohnson> i like Windows XP the most

[20:59] *** rml` joined
[21:00] *** rml` is now known as Meldrake

[21:03] *** Meldrake left
[21:05] <TimToady> I'm using gnome on ubuntu

[21:08] *** Jedai joined
[21:09] <sjohnson> thats kind of neet that you can use the OS and have it come bundled with your creation

[21:11] *** d58f37219 joined
[21:12] *** d58f37219 left
[21:14] *** rml` joined
[21:14] <pmurias> does ubuntu install perl by default? (they don't even install gcc)

[21:17] <payload> i think its necessary for the boot ^^

[21:17] <StephenPollei> sometimes perl and python get installed due to dependancies even on nondevel machines where gc would never be

[21:20] <payload> python is necessary for gnome-sudoku

[21:21] <StephenPollei> python is needed on fedora redhat for lots of their gui admin tools iirc

[21:21] <StephenPollei> I think perl is needed for lots of other things

[21:23] <payload> kernel for example ^^

[21:23] *** pmurias left
[21:23] <payload> find /usr/ -exec grep -H --color '#!.*perl' '{}' ';'

[21:24] <StephenPollei> http://wiki.laptop.org/go/Distro_version_migration_nastiness forked a number of packages to remove unneeded dependencies. totem is the worst (removing gnome-desktop), but we'll also want slimmed down ntp and mtd-utils to remove perl dependency, removing PersonalCopyLite midi patches from SDL_mixer, etc.

[21:24] <StephenPollei>  ntp forked to split ntpdate into its own package, removing the perl dependency

[21:25] <StephenPollei> I think the olpc wanted to remove perl, but are having issues doing so

[21:25] *** amoc joined
[21:29] * ruoso decommute &

[21:29] *** ruoso left
[21:29] *** kane[laptop] left
[21:30] *** rml` left
[21:34] *** Meldrake joined
[21:34] <Meldrake> whois #Meldrake

[21:37] <payload> is it possible... after snowman operators and snowman and comet braces... is it possible to overload the semicolon ?

[21:43] *** Meldrake is now known as Meldrake_

[21:47] *** Chillance joined
[21:52] *** clintongormley1 left
[21:52] <TimToady> by itself, that is a meaningless question.  you can't overload something without additional information (arguments, longer token, etc.).  All you could do is hide the standard one

[22:01] *** amoc left
[22:07] <payload> well the intention is to run additional code in each line

[22:10] <payload> counting line-numbers... obfuscate code... return value stuff

[22:10] <TimToady> one would likely do that with semantic modifications to the AST

[22:11] <sjohnson> TimToady: i looked at the layout of your laptop with the page left / right keys

[22:11] <sjohnson> now that i have seen that, i wish all keyboards had that technology

[22:11] <sjohnson> now i deem all standard keyboards useless :(

[22:13] <sjohnson> including this one i bought for 5 bucks

[22:13] <payload> you can move left and right with sooo many keys ^^

[22:13] <payload> and combinations of them

[22:13] <sjohnson> but that key

[22:13] <sjohnson> the peace of mind i would receive

[22:14] <sjohnson> if i can quantify it somehow...

[22:14] * payload likes Super+W/A/S/D for window/tab related stuff

[22:15] <sjohnson> what's "super"?

[22:15] <sjohnson> shift?

[22:16] <payload> the key which has often a logo of a well known operating system printed on

[22:18] <sjohnson> I call it WinKey

[22:18] <sjohnson> GNU Hurd key you mean?

[22:20] <payload> yes, exactly ^^

[22:22] * antiphase clicks away on his Winkey-free IBM M-type

[22:24] <payload> the none gamers could use WinKey+H/J/K/L

[22:24] <payload> sure with additional shift, alt and control for different situations

[22:25] <sjohnson> payload: what do you use?

[22:25] <sjohnson> your version reply said Purple IRC

[22:25] <sjohnson> i don't think there is such a thing :)

[22:26] <payload> pidgin ^^

[22:26] <sjohnson> oh

[22:26] <sjohnson> that makes sense then

[22:26] <sjohnson> libpurple

[22:26] <payload> it is modularized to libpurple

[22:26] <payload> yes

[22:26] *** decasm left
[22:26] <sjohnson> lol Purple IRC

[22:26] <sjohnson> that's cute

[22:26] <sjohnson> i couldn't get pidgin to do irc.. i will try again now

[22:27] *** skids_ joined
[22:27] <payload> it's easy. pidgin isn't the best choice for xmpp but the best compromise for using everything imho

[22:28] <sjohnson> i use pidgin for my IMing on Windows XP

[22:29] *** sjohnson_ joined
[22:29] <sjohnson_> heh

[22:29] <sjohnson_> this is kinda cute

[22:29] <sjohnson_> supports UTF-8 out of the box

[22:30] <sjohnson_> IRC!

[22:30] <antiphase> ☃

[22:31] <sjohnson> i dont have that unicode character

[22:31] <payload> it's the snowman brace

[22:32] <payload> ☃ foo ☃           foo between snowman braces

[22:32] <sjohnson_> what do i have to do in Windows XP to get these cool braces you guys use

[22:32] <sjohnson_> haha i see it

[22:32] <sjohnson_> that's very cute

[22:32] <sjohnson_> unicode truly has all

[22:37] *** mizioumt left
[22:45] *** justatheory left
[22:46] <payload> :-\ Tags.pm isn't the most readable code

[22:47] *** nihiliad left
[22:47] <payload> well, it isn't easy i want to say... readable for sure

[22:48] *** icwiener left
[22:49] <viklund_> payload: are you looking at November?

[22:50] <payload> masak/web/lib/Tags.pm

[22:50] <viklund_> ah

[22:51] *** justatheory joined
[22:53] <viklund_> it's a nice piece of code

[22:54] <DanielC> @seen mberends

[22:54] <lambdabot> mberends is in #perl6. I last heard mberends speak 12h 4m 15s ago.

[22:54] <DanielC> @seen masak

[22:54] <lambdabot> I saw masak leaving #perl6 10h 6m 12s ago, and .

[22:54] <DanielC> :-(

[22:55] <payload> but it's hard to follow for someone who doesn't know some details of perl 6 ^^

[22:56] <viklund_> is it really that different from perl 5?

[22:56] <payload> well i dont know perl 5

[22:57] <sjohnson> payload: ... learn!

[22:57] <payload> ^^

[22:57] <viklund_> ahh, then I can see how it can be tricky

[22:59] <payload> what does the _%c?_ in    sub ($c?, *%attrs) {      mean?

[22:59] <DanielC> @karma

[22:59] <lambdabot> You have a karma of 11

[22:59] *** Whiteknight joined
[23:00] <viklund_> payload: the questionmark means that it's optional

[23:00] <viklund_> $c is an optional argument

[23:01] <viklund_> the * infront of the %attrs makes the %attrs slurp the rest of the parameters.

[23:01] *** payload left
[23:01] <viklund_> ouch

[23:02] *** payload joined
[23:02] <viklund_> hello again ;)

[23:02] <payload> pidgin is crashy :(

[23:03] *** hercynium joined
[23:05] <DanielC> Does anyone know how to pass a parameter to inline PIR in Rakudo?

[23:05] *** _Chillance_ joined
[23:05] <Tene> DanielC: explain?

[23:05] <viklund_> DanielC: find_lex

[23:05] *** _Chillance_ left
[23:05] <viklund_> ?

[23:05] *** _Chillance_ joined
[23:05] <DanielC> viklund_: Ok.

[23:05] <DanielC> Tene: You can insert inline PIR in Perl 6 with Rakudo.

[23:05] <Tene> Right.

[23:06] <DanielC> Tene: But that feature is only useful if you can pass a parameter to the PIR code.

[23:06] <viklund_> I'm grabbing vars from the lexical environment with " $P0 = find_lex "$string""

[23:06] <DanielC> I was trying to figure out how to do that.

[23:06] <viklund_> DanielC: it's not a parameter as such

[23:06] <Tene> DanielC: explain what you want to do by "pass a parameter"?

[23:06] <Tene> use a lexical variable?  invoke it as a subroutine?

[23:06] <DanielC> Tene: What viklund_ said.

[23:06] <Tene> Okay, yes.

[23:06] <DanielC> :)

[23:07] <viklund_> rakudo: my $str = 'asdf'; Q:PIR { $P0 = find_lex '$str' }

[23:07] <p6eval> rakudo 86aeaf:  ( no output )

[23:07] <DanielC> viklund_: Thanks. I didn't know what to call it.

[23:07] <viklund_> but I still wonder if there's anyway to change encoding on a string in PIR...

[23:07] <DanielC> viklund_: So, the input has to go into a PMC variable? How do you get the string out of $P0 ?

[23:08] <viklund_> $S0 = $P0

[23:08] <DanielC> thanks

[23:08] <viklund_> it autounboxes ;)

[23:08] <DanielC> cool

[23:08] <viklund_> are you bringing the md5 to rakudo-land?

[23:09] <DanielC> viklund_: Would that be useful?

[23:09] <DanielC> I was thinking of writing a blog post about Q:PIR. I am happy to make it the md5 function.

[23:10] <viklund_> DanielC: yes, we need a checksum in November for storing passwords, md5 is better than plaintext ;)

[23:10] <DanielC> viklund_: Ok. No problem!

[23:10] <viklund_> and later, we can convert it to some other one that parrot has support for

[23:11] <DanielC> Parrot has support for sha1 too.

[23:11] <viklund_> masak has talked about this for a long time, and when I saw your md5sum code I thought, "yes we got it"!

[23:11] <DanielC> :-)

[23:11] <viklund_> DanielC: I would guess that it's really simple to just switch

[23:11] <DanielC> Probably.

[23:11] *** snarkyboojum joined
[23:11] <DanielC> I'll do MD5 first, and we can see about switching afterwards.

[23:13] <viklund_> sounds good

[23:15] <DanielC> http://pastebin.com/m6626d419  <--  Help

[23:15] <DanielC> Error:  Statement not terminated properly at line 10, near "return $ch"

[23:15] <viklund_> you need a semi after the closing }

[23:15] <viklund_> on the Q:PIR

[23:16] <DanielC> thanks

[23:16] <DanielC> It works now.

[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:21] <viklund_> time for bed

[23:21] <viklund_> DanielC: If you want to check out how to use Q:PIR, look in src/setting in rakudo

[23:21] <viklund_> you have several examples there

[23:21] <DanielC> Ok, thanks.

[23:22] <viklund_> good night

[23:22] <DanielC> night

[23:22] *** Chillance left
[23:31] *** kane__ joined
[23:31] *** kane__ left
[23:32] *** hanekomu left
[23:33] <DanielC> @seen pmichaud

[23:33] <lambdabot> pmichaud is in #perl6. I last heard pmichaud speak 3h 19m 42s ago.

[23:36] <DanielC> pmichaud: ping?

[23:37] *** snarkyboojum left
[23:41] <DanielC> @tell pmichaud  sprintf doesn't like being inside Q:PIR {   }  see http://pastebin.com/m40db8f

[23:41] <lambdabot> Consider it noted.

[23:42] *** viklund left
[23:43] *** ihrd joined
[23:44] *** ihrd left
[23:44] *** justatheory left
[23:44] *** buubot left
[23:44] *** sparc left
[23:48] *** justatheory joined
[23:48] *** buubot joined
[23:48] *** sparc joined
[23:51] *** H1N1 left
[23:52] *** H1N1 joined
[23:54] <lichtkind> night

[23:54] *** lichtkind left
