[00:00] <TimToady> but is essentially a positional rather than a named argument to the trait

[00:01] <TimToady> so have to think about what using up positional args for that means long term

[00:02] <ruoso> hmm... I see...

[00:02] <ruoso> the trait could have  a (*@tags, *%tags) signature

[00:03] <TimToady> and then what if you want *@aliases or some such?

[00:03] <ruoso> aliases at the "is export" side?

[00:03] <TimToady> who knows what people will want someday?

[00:04] <ruoso> I know...

[00:10] *** alanhaggai joined
[00:10] <ruoso> TimToady, wasn't export(:DEFAULT) supposed to be parsed as a capture?

[00:13] *** gbacon joined
[00:16] *** eternaleye_ joined
[00:17] *** c9s__ left
[00:22] *** eternaleye left
[00:23] *** vixey left
[00:25] *** smtms joined
[00:25] *** eric2561 left
[00:27] *** smtms left
[00:27] *** stephens left
[00:31] *** cspencer joined
[00:34] <cspencer> should 'A'..'C':by(0.5) produce AABBCC or AABBC?

[00:34] <masak> cspencer: AABBC

[00:35] <cspencer> cool, thanks :)

[00:36] *** GitHub131 joined
[00:36] <GitHub131> perl6-examples: 3David Romano 07master0 SHA1-6e427f5

[00:36] <GitHub131> [euler] Added solutions for 1,4,5

[00:36] <GitHub131> http://is.gd/ejRq

[00:36] *** GitHub131 left
[00:42] *** masak left
[00:48] *** eternaleye_ left
[00:52] *** eric2561 joined
[01:00] *** armagad left
[01:00] *** cspencer left
[01:01] <eric2561> rakudo: ('A'..^'D')

[01:01] <p6eval> rakudo 34727: OUTPUT«sh: ./parrot: No such file or directory␤»

[01:01] <eric2561> rakudo: ('A'..^'D').perl

[01:01] <p6eval> rakudo 34727: OUTPUT«sh: ./parrot: No such file or directory␤»

[01:03] *** masak joined
[01:10] <ruoso> happy new year to you all!

[01:10] <masak> happy new year!

[01:11] <masak> 2009 -- the year of Perl 6.

[01:12] <avar> for 9 consequtive years

[01:21] *** alanhaggai_ joined
[01:24] *** alanhaggai left
[01:25] *** alanhaggai_ is now known as alanhaggai

[01:30] *** eternaleye_ joined
[01:31] *** buu_ joined
[01:33] <eric2561> avar++

[01:34] * eric2561 thinks masaks just hanging around to get the most out of new years ;) 

[01:34] <eric2561> watching monks from every timezone come along

[01:34] *** buu_ is now known as buu

[01:34] <masak> eric2561: of course. isn't everybody? :)

[01:42] *** hercynium left
[01:50] <masak> rakudo: my @a = 1,2,3,4; @a[0,1] >>+=<< @a[2,3]; say @a

[01:50] <p6eval> rakudo 34727: OUTPUT«sh: ./parrot: No such file or directory␤»

[01:53] *** eternaleye_ left
[02:01] <masak> rakudo: my @a = 1,2,3,4; @a[0,1] >>+=<< @a[2,3]; say @a

[02:01] <p6eval> rakudo 34727: OUTPUT«sh: ./parrot: No such file or directory␤»

[02:02] *** aindilis joined
[02:03] *** DemoFreak left
[02:21] *** alanhaggai_ joined
[02:23] *** alanhaggai left
[02:23] *** alanhaggai_ is now known as alanhaggai

[02:33] <masak> ok, here's the thing: I'd very much like fireworks in Perl 6 for this new year.

[02:34] <masak> I've written half a script. it's here: http://gist.github.com/42176

[02:34] <masak> I'm pretty sure it's reasonably correct (i.e. it should be printing fireworks)

[02:34] <masak> but on my computer, it segfaults.

[02:35] <masak> any idea why? is it leaky memory? do I do something out-of-bounds somewhere?

[02:50] *** Limbic_Region joined
[03:00] *** alanhaggai left
[03:01] *** alester joined
[03:17] *** masak left
[03:22] *** abebae left
[03:33] *** Limbic_Region left
[03:42] *** meppuru joined
[03:57] *** meppl left
[04:01] <pugs_svn> r24716 | unobe++ | [t/spec]: S05 - Moved some capturing tests and added a few

[04:02] *** elmex_ joined
[04:07] *** buubot joined
[04:08] *** buubot left
[04:08] *** buubot joined
[04:17] *** elmex left
[04:17] *** elmex_ is now known as elmex

[04:35] *** kisu left
[04:36] *** kisu joined
[04:51] *** pmurias left
[04:53] *** c9s__ joined
[04:56] *** alanhaggai joined
[05:00] *** alester left
[05:31] *** japhb_ joined
[05:33] *** japhb left
[05:45] *** alester joined
[05:57] *** meppuru is now known as meppl

[06:43] *** iblechbot joined
[06:54] *** alester left
[06:58] *** justatheory joined
[07:00] *** kanru joined
[07:09] *** lambdabot left
[07:12] *** lambdabot joined
[07:35] *** iblechbot left
[07:42] *** kanru left
[07:44] *** kanru joined
[07:44] <eric2561> happy new year! ;) missed by 45 minutes but i'm early for CA ;)

[07:48] <mberends> happy new year, eric256[12]{0,1} ! ;)

[07:52] *** c9s__ left
[08:08] <azawawi> Happy new year for Perl6

[08:20] * mberends is sure 2009 will have the Perl 6 Christmas we are longing for

[08:33] *** pdcawley joined
[08:42] *** azawawi left
[08:43] *** azawawi joined
[08:49] <pugs_svn> r24717 | azawawi++ | [S::H::P6] updated to version 0.02962... Releasing to CPAN

[08:49] <pugs_svn> r24717 | azawawi++ | [S::H::P6] requires latest versions of Moose and YAML::Syck

[08:49] <pugs_svn> r24717 | azawawi++ | [S::H::P6] latest moose fixes win32 Class::MOP installation problems

[08:55] <pugs_svn> r24718 | azawawi++ | [S::H::P6] Fixed license to perl and made some pod fixes

[08:57] *** japhb_ left
[09:12] *** japhb_ joined
[09:26] *** apeiron left
[10:02] *** DemoFreak joined
[10:27] *** maerzhase joined
[10:40] *** eternaleye_ joined
[10:48] *** iblechbot joined
[10:59] *** xinming left
[11:27] *** alech_ left
[11:28] *** alech joined
[11:36] *** pmurias joined
[11:37] <pmurias> ruoso: t/knowhow.t broke

[11:42] *** barney joined
[11:57] <pmurias> fixed it

[11:58] * ruoso too

[12:00] <pmurias> at least it's only 2 duplicated chars ;)

[12:00] <ruoso> I'll revert my changes, and set a prototype in let

[12:01] <pugs_svn> r24719 | pmurias++ | [mildew] fixed tiny error which broke knowhows

[12:01] <pmurias> ruoso: you mean a let($$) ?

[12:02] <ruoso> yeah

[12:03] <pmurias> make test takes too long

[12:04] <ruoso> indeed...

[12:04] <ruoso> rewriting m0ld in p5 using SMOP xs would make it faster ;)

[12:04] <pmurias> marginaly

[12:04] <pugs_svn> r24720 | pmurias++ | [mildew] removed debugging statements

[12:05] <ruoso> pmurias, gcc takes a long time also

[12:05] <ruoso> we would gain that time

[12:07] <pmurias> once i finish p5 integration support we could rewritte m0ld in p6

[12:07] <ruoso> that'd be cool

[12:09] <ruoso> I've been thinking about "is export(:DEFAULT)"

[12:10] <ruoso> is a trait something that is callable?

[12:12] <pmurias> traits are roles

[12:12] <pmurias> see S12:1397

[12:15] *** alanhaggai left
[12:18] <ruoso> so 'is export' calls trait_auxiliary:is($export, $sub; ...)

[12:19] <ruoso> and here we reach multis again

[12:20] <ruoso> and more than that... we also reach semilist

[12:24] <azawawi> ruoso: hi

[12:25] <azawawi> ruoso: what's are exact steps to build mildew? im thinking of integrating it with Padre.

[12:26] <pmurias> make in v6/smop

[12:27] * azawawi pastes error

[12:28] <pasteling> "azawawi" at 212.38.139.109 pasted "make in v6/smop errors" (10 lines, 645B) at http://sial.org/pbot/34156

[12:30] <pmurias> strange

[12:30] <azawawi> on feather1

[12:31] <pmurias> seems a ccache error

[12:32] <azawawi> i noticed ;-)

[12:35] <pmurias> azawawi: you use feather for development?

[12:35] <azawawi> yeah

[12:37] <azawawi> setting $ENV{CCACHE_DIR} has no effect on 'make'

[12:38] <ruoso> azawawi, now *that*'s an unusual error message

[12:41] <azawawi> deleted smop and svn up again and then make and same result...

[12:43] <ruoso> azawawi, I doubt it to be related to smop itself

[12:43] <ruoso> seems more like a condition in your working environment 

[12:43] <azawawi> anyone on feather1 to test it?

[12:44] <ruoso> pmurias, I think I know I way to simplify multi

[12:45] <ruoso> we allow the ACCEPTS code to throw a ControlExceptionPerfectSignatureMatch

[12:45] * azawawi not fair ;-)

[12:47] <ruoso> I think next thing on SMOP ROADMAP is "multi" and "semilist"

[12:47] <ruoso> this should allow us implementing "is export" correctly

[12:49] <azawawi> i think i have an old ccache on feather1... what's your ccache --version?

[12:49] <azawawi> 2.3 here

[12:50] <pmurias> azawawi: i don't have ccache

[12:50] <ruoso> er... neither do I

[12:50] <azawawi> aha we're getting somewhere

[12:50] <ruoso> pmurias, probably we need to disable ccache in SConstruct somehw

[12:55] <azawawi> interesting so scons is the culprit here

[12:58] <azawawi> scons v1.0.0.r3266 on feather1

[12:59] <ruoso> we need to disable ccache in SConstruct

[12:59] <azawawi> take a look at this http://www.scons.org/wiki/ExternalTools

[12:59] <azawawi> i think i got it

[13:00] <ruoso> azawawi, feel free to commit on v6/smop

[13:00] <ruoso> ;)

[13:00] <azawawi> worked ;-)

[13:00] * azawawi $_2009++

[13:02] <azawawi> but still there are errors...

[13:03] <azawawi> no pcl.h

[13:03] <moritz_> pmurias: what stops me from commiting is that I don't have any internet connection on the machine where I have my svn changes

[13:03] <moritz_> good day, and happy new year to all of you!

[13:03] <azawawi> moritz_: hey!

[13:05] <pugs_svn> r24721 | azawawi++ | [smop] ccache now finds $HOME

[13:05] <moritz_> azawawi: how are you?

[13:05] <azawawi> great

[13:05] <moritz_> man, this is annoying, I have roughly 4k lines to submit, and about +150 passing tests for rakudo

[13:06] <literal> nice

[13:06] <literal> put it on an usb key and transfer to an online computer? :P

[13:06] <azawawi> moritz_: lol, dont svn revert by mistake ;-)

[13:06] <moritz_> as well as a few additions to S29, and the removal of mention of .pos in S02

[13:07] <moritz_> literal: problem is, svn diff | patch -p0 doesn't reproduce file moves in a coherent manner

[13:07] <moritz_> as well as propsets

[13:07] <literal> moritz_: you can copy the working copy dir

[13:08] *** araujo left
[13:08] <pmurias> azawawi: re pcl.h you need libpcl

[13:09] <azawawi> moritz_: can u plz install libpcl? # pretty plz

[13:11] <azawawi> moritz_: sudo aptitude install libpcl1-dev   # i think

[13:12] * azawawi feels pretty stupid asking moritz_ to do that... ;-)

[13:12] *** pmurias left
[13:13] <azawawi> moritz_: and YAML::Syck can be upgraded to 1.05 through aptitude

[13:13] *** pmurias joined
[13:14] <moritz_> azawawi: sorry, I can't, I don't know my feather password, and the machine on which the ssh keys are has no internet access atm :(

[13:14] <moritz_> but there might be other feather admins around

[13:14] <azawawi> np

[13:14] <azawawi> enjoy your holiday ;-)

[13:15] <azawawi> btw, i noticed that github sent out some colored irc but it didnt generate much noise on your irc log

[13:17] *** justatheory left
[13:17] <moritz_> I think colours are stripped in the logs

[13:19] <Juerd> 14:11 < azawawi> moritz_: sudo aptitude install libpcl1-dev   # i think

[13:19] <Juerd> done

[13:19] <Juerd> Er, ongoing

[13:24] <moritz_> gone again &

[13:26] <azawawi> wow, thx, Juerd++

[13:27] <azawawi> ruoso: it works now

[13:36] <pmurias> ruoso: what methods on an interpreter are guaranted not to recurse

[13:39] <ruoso> pmurias, well...

[13:39] <ruoso> continuation, goto, 

[13:39] <ruoso> loop and eval certainly recurses

[13:40] <ruoso> azawawi, now that you have SMOP, you can just go into v6/mildew and "make test"

[13:40] <ruoso> you probably need to 'make' in src/perl6

[13:40] *** Whiteknight joined
[13:41] <azawawi> i always build STD... i tried make test and then i got Data::Streamer not found something

[13:41] <azawawi> but im there; gonna try it soon

[13:41] <azawawi> any plans to package it as a cpan module?

[13:43] <azawawi> mildew: say 'hello';

[13:43] <p6eval> mildew: OUTPUT«Could not find variable &say in the lexical scope.␤»

[13:43] <pmurias> mildew: $OUT.print('hello')

[13:43] <p6eval> mildew: OUTPUT«hello»

[13:43] *** c9s joined
[13:44] <azawawi> pmurias: so how much of perl6 is implemented in mildew?

[13:44] <azawawi> mildew: my $x = 10; $x++;

[13:44] <p6eval> mildew: OUTPUT«Can't locate object method "emit_m0ld" via package "VAST::Autoincrement" at src/VAST/statement.pm line 57.␤»

[13:45] <azawawi> mildew: my $x = 10; $x = $x + 1;

[13:45] <p6eval> mildew: OUTPUT«Can't locate object method "emit_m0ld" via package "VAST::Additive" at src/VAST/List_assignment.pm line 10.␤»

[13:45] * azawawi hmmm

[13:45] <azawawi> mildew: my ($x,$y) = (10,20);

[13:46] <p6eval> mildew: OUTPUT«unimplemented:  unknown scope declarator at src/AST/Helpers.pm line 108␤  AST::Helpers::XXX('unknown scope declarator') called at src/VAST/scope_declarator.pm line 27␤     VAST::scope_declarator::emit_m0ld('VAST::scope_declarator=HASH(0xc9594b0)') called at src/VAST/noun.pm line 9␤  

[13:46] <p6eval> .. VA...

[13:46] <pmurias> azawawi: see in mildew/t for what works

[13:47] *** DemoFreak left
[13:48] <pmurias> mildew does't implement much of the common things as we are trying to implement the stuff they are built of first

[13:49] <pmurias> things like &say and &infix:<+> are multis, and we don't have those yet

[13:49] <azawawi> pmurias: so any plans to package it in cpan?

[13:50] * azawawi thinks Padre mildew integration

[13:50] *** DemoFreak joined
[13:56] <pmurias> azawawi: i could try to package mildew for cpan, i didn't do it previously as STD in not on CPAN and i didn't see much need for releasing mildew/smop ther

[13:56] <azawawi> i already have STD.pmc in my CPAN Syntax::Highlight::Perl6

[13:57] <azawawi> however, STD namespace collision are bound to happen...

[13:59] <azawawi> and i stopped using the latest STD.pm for a while since it failed the parser re-use test when used inside a package.

[14:00] <pmurias> i'm currently working on smop/p5 interop and am unlikely to do the packaging before it's finished

[14:00] <azawawi> cool let me know when you're finished

[14:01] <azawawi> i think STD should be released as a separate package; although STD.pmc does not qualify atm as a proper p5 package.

[14:08] *** pdcawley left
[14:18] *** AzureStone left
[14:27] *** AzureStone joined
[14:40] *** AzureStone left
[14:40] *** ChrisDavaz left
[14:52] *** AzureStone joined
[15:04] *** alester joined
[15:11] *** alester left
[15:18] <literal> \q is mentioned once (but not explained) in S02, and it appears only twice in the spec tests in the form of q[$foo \q:s{$bar}] and q{$foo \q/$bar/}

[15:18] <literal> where can I find more info on \q ?

[15:26] *** cognominal left
[15:26] *** cognominal joined
[15:30] *** justatheory joined
[16:07] *** alester joined
[16:07] *** AzureStone left
[16:07] *** AzureStone joined
[16:07] *** alester left
[16:07] *** alester joined
[16:09] *** ft left
[16:09] *** AzureStone_ joined
[16:11] *** AzureStone__ joined
[16:24] *** mberends left
[16:25] *** mberends joined
[16:26] *** AzureStone left
[16:26] <pugs_svn> r24722 | pmurias++ | [smop] P5Interpreter.eval wrappes the eval in a Coro::State so that methods on smop objects can be invocked

[16:26] <pugs_svn> r24722 | pmurias++ | (it has memory leaks still)

[16:29] *** AzureStone_ left
[16:30] *** ejs joined
[16:33] *** AzureStone__ left
[16:38] *** maerzhase left
[16:49] *** ejs left
[16:55] *** maerzhase joined
[16:58] <pugs_svn> r24723 | ruoso++ | [mildew] small fix in package_declarator

[16:58] <ruoso> pmurias, the embedded p5 fails to find SMOP.pm here

[17:01] *** xinming joined
[17:11] *** hercynium joined
[17:12] <pmurias> ruoso: do you have SMOP make'ed?

[17:12] <ruoso> yes

[17:17] <pmurias> ruoso: sorry, comitted from v6/smop

[17:17] <pugs_svn> r24724 | pmurias++ | [smop] missing part of the last commit

[17:19] *** aindilis left
[17:22] *** smtms joined
[17:22] * ruoso realizes that it is starting to be very boring to write things in low-level

[17:23] *** AzureStone joined
[17:24] <pmurias> ruoso: any sollutions?

[17:24] <pmurias> * solutions 

[17:24] <ruoso> yes... write it in Perl 6 ;)

[17:25] * ruoso writing src-s1p/Multi.pm

[17:29] *** alester_ joined
[17:30] *** alester_ left
[17:34] *** ^aristotle joined
[17:34] <^aristotle> what happened to heredocs in perl6??

[17:34] *** vixey joined
[17:35] <literal> q:to/END/

[17:35] <literal> ...

[17:35] <literal> END

[17:35] *** c9s left
[17:35] <^aristotle> is that in any synopsis?

[17:35] <literal> yeah, S02 under Literals

[17:36] <literal> search for "Heredocs are no longer written with <<"

[17:36] <^aristotle> rakudo does not support this yet, I guess?

[17:37] <literal> looks like a lot of the Q tests are fudged for rakudo, so no

[17:38] <pugs_svn> r24725 | ruoso++ | [smop/src-s1p] Perl 6 code for Multi... it sure looks easier in Perl 6

[17:39] <^aristotle> OK

[17:39] <ruoso> pmurias, look at src-s1p/Multi.pm

[17:39] <^aristotle> thx

[17:39] *** ^aristotle left
[17:40] <pugs_svn> r24726 | hinrik++ | [util/perl6.vim] typo, p6EscEsclamation -> p6EscExclamation

[17:40] <pugs_svn> r24727 | ruoso++ | [smop/src-s1p] small fix in Multi.pm

[17:42] *** smtms left
[17:42] <pugs_svn> r24728 | ruoso++ | [smop/src-s1p] yet another fix in Multi.pm

[17:42] *** thepler joined
[17:45] <pmurias> ruoso: why don't you use a for?

[17:46] <ruoso> because for requires map, and map is a multi

[17:46] <pmurias> and @all_variants.map?

[17:48] <ruoso> I just thought that having the CONTROL block in the same level would be helpful

[17:48] *** thepler left
[17:48] <ruoso> TIMTOWTDI

[17:48] <ruoso> ;)

[17:49] <pmurias> is postfix:<++> a multi?

[17:50] <ruoso> yes, it is

[17:50] <ruoso> almost every operator is a multi

[17:53] *** dwhipp joined
[17:57] <dwhipp> rakudo: my @list = 1,2,3; my ($hd, @tl) = @list; say ([$hd], [@tl]).perl

[17:57] <p6eval> rakudo 34751: OUTPUT«[[1], []]␤»

[17:57] <dwhipp> pugs: my @list = 1,2,3; my ($hd, @tl) = @list; say ([$hd], [@tl]).perl

[17:57] <p6eval> pugs: OUTPUT«(\(1,), \(2,))␤»

[17:58] <dwhipp> pugs: my @list = 1,2,3; my ($hd, @tl) = |@list; say ([$hd], [@tl]).perl

[17:58] <p6eval> pugs: OUTPUT«(\(1,), \(2,))␤»

[17:58] <dwhipp> pugs: my @list = 1,2,3; my ($hd, *@tl) := |@list; say ([$hd], [@tl]).perl

[17:58] <p6eval> pugs: OUTPUT«*** Wrong number of binding parameters: 1 actual, 2 expected␤    at /tmp/v5HOtTj9Ar line 1, column 19-43␤»

[17:58] *** araujo joined
[17:58] <dwhipp> pugs: my @list = 1,2,3; my ($hd, *@tl) := @list; say ([$hd], [@tl]).perl

[17:58] <p6eval> pugs: OUTPUT«*** Wrong number of binding parameters: 1 actual, 2 expected␤    at /tmp/F5JFUUYLcW line 1, column 19-42␤»

[17:59] <dwhipp> pugs: my @list = 1,2,3; my [$hd, *@tl] := @list; say ([$hd], [@tl]).perl

[17:59] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "[$"␤    expecting "=", formal parameter, context, ":" or "("␤    at /tmp/fz9deWPkQy line 1, column 22␤»

[18:00] *** alester left
[18:07] <pugs_svn> r24729 | ruoso++ | [smop/src-s1p] making Multi a knowhow makes it easier to bootstrap..

[18:08] *** rindolf joined
[18:14] <dwhipp> pugs: my @list = 1,2,3; my ($hd, @tl) = @list; say ([$hd], [@tl]).perl

[18:14] <p6eval> pugs: OUTPUT«(\(1,), \(2,))␤»

[18:14] <dwhipp> pugs: my @list = 1,2,3; my ($hd, @tl); ($hd, @tl) = @list; say ([$hd], [@tl]).perl

[18:14] <p6eval> pugs: OUTPUT«(\(1,), \(2,))␤»

[18:14] <dwhipp> rakudo: my @list = 1,2,3; my ($hd, @tl); ($hd, @tl) = @list; say ([$hd], [@tl]).perl

[18:14] <p6eval> rakudo 34751: OUTPUT«[[1], [2, 3]]␤»

[18:20] <rakudo_svn> r34752 | pmichaud++ | [rakudo]: spectest-progress.csv update: 264 files, 5911 passing, 0 failing

[18:22] <dwhipp> rakudo: sub infix:<qqq> { ... }

[18:22] <p6eval> rakudo 34751: OUTPUT«Statement not terminated properly at line 1, near ":<qqq> { ."␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[18:22] <dwhipp> pugs: sub infix:<qqq> { ... }

[18:22] <p6eval> pugs: RESULT«\sub :(@_) "$_" := "Scalar" #<Scalar:0xb7a50165>␤          "@_" := "Array" #<Array:0xb7a5016d>␤          "&?ROUTINE" := "Sub" #<Sub:0xb7184961>␤          "&?BLOCK" := "Sub" #<Sub:0xb7184961> {"&infix:qqq" := "Sub" #<Sub:0xb6539a71>, "$_" := "Scalar" #<Scalar:0xb7a6fb39>␤         ...

[18:23] <dwhipp> std: sub infix:<qqq> { ... }

[18:23] <p6eval> std 24729: OUTPUT«Out of memory!␤»

[18:23] <pmichaud> Rakudo doesn't support operator overloading or custom ops yet.

[18:23] <pmichaud> I do expect to have some form of those in January, however.

[18:24] <dwhipp> ok, thx

[18:28] *** Psyche^ joined
[18:30] <pugs_svn> r24730 | ruoso++ | [smop/src-s1p] use if/else instead of when in Multi, since when requires smartmatch, which is itself a multi

[18:36] *** xinming left
[18:38] *** xinming joined
[18:40] *** Patterner left
[18:40] *** Psyche^ is now known as Patterner

[18:47] <dwhipp> std: sub ( [ $a, $b ] ) { ... }

[18:47] <p6eval> std 24730: OUTPUT«00:05 83m␤»

[18:48] <dwhipp> std: sub ( [ $a, $b ] ) { ... }.

[18:48] <p6eval> std 24730: OUTPUT«############# PARSE FAILED #############␤(Possible runaway string from line 1 to line 1)␤Obsolete use of . to concatenate strings; in Perl 6 please use ~ instead at /tmp/O4DkSVvFAV line 0:␤------> [32m[31m[0m␤00:05 86m␤»

[18:48] <dwhipp> rakudo: sub ( [ $a, $b ] ) { ... }

[18:48] <p6eval> rakudo 34754: OUTPUT«Statement not terminated properly at line 1, near "{ ... }"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[18:49] *** justatheory left
[19:08] <pasteling> "japhb" at 76.191.190.8 pasted "What's the cleanest way to express this Perl 5 "pseudo-continuation" in Perl 6?" (36 lines, 1.1K) at http://sial.org/pbot/34162

[19:08] <pmurias> ruoso: is there a reason for exposing SMOP::Native::int->fetch(...) instead of SMOP::Native::int::fetch(...?;

[19:09] *** alester joined
[19:09] <japhb_> I hope that question makes sense ...

[19:10] <pmurias> you could use gather/take 

[19:10] <pmurias> to create a coro

[19:11] <japhb_> pmurias: but I'm not "gathering" anything.  That seems contrived in the same way returning a one-off sub does to emulate a continuation.

[19:22] <pmichaud> japhb_: I think returning the closure is actually pretty clean here.

[19:22] <pmichaud> It doesn't have to be a "sub" though.

[19:22] <japhb_> pmichaud: In perl six, just "return {...}", right?

[19:23] <pmichaud> yes.

[19:23] <pmichaud> and then you can invoke it directly.

[19:23] <pmichaud> I suppose there will also be a way to throw a resumable exception.  

[19:23] <pmichaud> Or maybe there's a way to simply "throw" a continuation.

[19:23] <japhb_> pmichaud: Would you call that as $handler() or $handler.() ?

[19:23] <pmichaud> japhb_: either would work.

[19:24] <pmichaud> or maybe there's an adverb on 'return' that means "resumable"

[19:25] <japhb_> pmichaud: the idea of doing a naked 'yield' is what feels most natural to me ... "throwing" a continuation sounds like the desugared version of that

[19:25] <pmichaud> yes

[19:26] <japhb_> pmichaud: Is there a way to do it that allows me to say: pid_file_handler(); become_daemon; pid_file_handler();   ?

[19:27] <japhb_> (Barring the missing parens on become_daemon(), of course)

[19:31] <pmichaud> I know this is a silly question, but why can't become_daemon() be part of pid_file_handler?

[19:31] <pmichaud> but ultimately I'd be thinking that objects and methods would be the way to go here anyway

[19:32] <pmichaud> so that the first part and second part are just separate methods on your $handler object

[19:33] <japhb_> pmichaud: Oh, it certainly could ... I just wanted to separate the operations that are logically different into separate subs.  The act of daemonizing, and the act of processing a PID file, are only tangentially related, and certainly daemonizing does not feel like a subordinate operation ...

[19:33] <japhb_> Yes, I could make the pid file handling part of become_daemon(), but again, they're separate things.

[19:34] *** smtms joined
[19:35] <pmichaud> sure.

[19:35] <japhb_> pmichaud: So you're suggesting: my $pid_handler = new PidHandler(...); $pid_handler.top(); become_daemon(); $pid_handler.bottom(); END{ $pid_handler.cleanup() }

[19:35] <pmichaud> yeah, something like that.

[19:36] <pmichaud> I do see where gather/take doesn't seem natural for 'yield' in this instance.  Or maybe I'm just thinking about it wrong.

[19:36] <japhb_> That's certainly reasonable from the caller's point of view.  I think writing PidHandler in Perl 5 would seem wordy, but perhaps not so much in Perl 6.

[19:37] <japhb_> Yes, exactly re: gather/take v. yield

[19:38] <pmichaud> anyway, it's a worthy question for perl6-users or perl6-language

[19:39] <japhb_> Fair enough.  Mind if I summarize your points in my email?

[19:41] <pmichaud> no, I don't mind.

[19:41] <pmichaud> they're just "off-the-cuff" thoughts, though.

[19:42] <japhb_> k

[19:47] *** justatheory joined
[19:54] *** aindilis joined
[19:59] *** justatheory left
[20:10] <ruoso> pmurias, i'm not sure...

[20:10] *** Syntax joined
[20:13] *** rindolf left
[20:16] *** FurnaceBoy joined
[20:21] *** ejs1 joined
[20:35] <japhb_> *phew*, sent to p6u/p6l, finally

[20:44] <pmurias> ruoso: what did "i'm not sure" refer to?

[20:56] *** alester left
[20:56] *** ejs1 left
[21:12] *** kisu_ joined
[21:19] *** Syntax left
[21:27] *** eternaleye_ left
[21:29] *** kisu left
[21:30] <dwhipp> pugs: class A { has $.x; method foo { .bar }; method bar { say $.x } }; my A $a .=new( x => 42 ); $a.foo

[21:30] <p6eval> pugs: OUTPUT«␤»

[21:30] <dwhipp> rakudo: class A { has $.x; method foo { .bar }; method bar { say $.x } }; my A $a .=new( x => 42 ); $a.foo

[21:30] <p6eval> rakudo 34762: OUTPUT«Method 'bar' not found for invocant of class 'Failure'␤current instr.: 'parrot;A;foo' pc 316 (EVAL_13:137)␤»

[21:31] <dwhipp> rakudo: class A { has $.x; method foo { $.bar }; method bar { say $.x } }; my A $a .=new( x => 42 ); $a.foo

[21:31] <p6eval> rakudo 34762: OUTPUT«42␤»

[21:32] <dwhipp> rakudo: class A { has $.x; method foo { self.bar }; method bar { say $.x } }; my A $a .=new( x => 42 ); $a.foo

[21:32] <p6eval> rakudo 34762: OUTPUT«42␤»

[21:38] *** barney left
[21:45] *** unobe joined
[21:49] *** AzureStone left
[21:50] *** AzureStone joined
[21:52] <dwhipp> pugs: my $global = 1; class A { method foo { say "foo = $global" } }; A.foo

[21:52] <p6eval> pugs: OUTPUT«foo = 1␤»

[21:52] <dwhipp> rakudo: my $global = 1; class A { method foo { say "foo = $global" } }; A.foo

[21:52] <p6eval> rakudo 34765: OUTPUT«foo = ␤»

[22:00] <mberends> rakudo: $*global = 1; class A { method foo { say "foo = $*global" } }; A.foo

[22:00] <p6eval> rakudo 34765: OUTPUT«foo = 1␤»

[22:02] <dwhipp> yes, "global" was a bad name: I was trying to use the outer-lexical

[22:03] <mberends> is the outer scope another class?

[22:04] <dwhipp> No. just a file-scoped thingie

[22:04] <dwhipp> (worked on pugs, not rakudo)

[22:04] <mberends> right

[22:04] <dwhipp> I've filed a bug

[22:17] *** justatheory joined
[22:17] *** alester joined
[22:25] *** eternaleye_ joined
[22:26] *** alester left
[22:28] <pugs_svn> r24731 | unobe++ | [t/spec] S05 - Moved P5/Perl5 modifier tests into spec (rakudo can't parse them)

[22:33] *** justatheory left
[22:57] *** lisppaste3 left
[23:03] *** lisppaste3 joined
[23:12] <dwhipp> rakudo: my $a; $a //= 1

[23:13] <p6eval> rakudo 34768: OUTPUT«get_iter() not implemented in class 'Integer'␤current instr.: 'prefix:=' pc 17718 (src/builtins/misc.pir:17)␤»

[23:13] <dwhipp> pugs: my $a; $a //= 1

[23:13] <p6eval> pugs: RESULT«\1»

[23:23] *** dwhipp left
[23:33] *** FurnaceBoy left
[23:35] *** pmurias left
[23:43] *** sri_kraih joined
[23:44] *** obra joined
[23:49] *** iblechbot left
[23:59] *** vixey left
