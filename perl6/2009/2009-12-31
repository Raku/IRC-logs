[00:06] <frettled> Phew, I got my last blog entry of the year out.

[00:06] <frettled> Time for bed :)

[00:07] *** kangu_ left
[00:08] <colomon> jnthn: o/

[00:09] *** soupdragon joined
[00:31] *** ash_ joined
[00:35] *** eternaleye left
[00:40] <colomon> http://www.ioncannon.net/projects/code2009/

[00:41] *** rgrau` left
[00:42] *** pmurias left
[00:43] *** eternaleye joined
[00:43] *** eternaleye left
[00:54] <s1n> colomon: perl is basically MIA

[00:54] <colomon> yes, that's why I posted it.

[00:55] <s1n> hmm

[00:55] <colomon> Perhaps I'm very out of the loop, but I have a hard time believing more people are coding in bash than in perl.

[00:56] *** ash_ left
[00:56] <s1n> i agree, but i dunno

[00:56] <s1n> if perl5 is more popular than perl6, and perl5 is MIA on that list, i can't help but wonder if perl6 needs a new direction in order to gain attention.....

[00:56] <s1n> either that or the "poll" is slanted because it's on twitter :/

[00:57] <s1n> (perl is notorious for keeping-it-in-the-family)

[00:57] <diakopter> or, disproportionally fewer perl users use twitter, or even like ganging onto twitter trends/polls

[00:57] <colomon> well, and it's the first time I heard of this poll....

[00:57] <s1n> i always liked the book sales comparisons

[00:57] <colomon> someone just tweated perl, btw.  :)

[00:58] <s1n> look how big that C slice is :/

[01:01] *** racheldaBROWN left
[01:04] *** cognominal left
[01:05] *** eternaleye joined
[01:18] *** jferrero joined
[01:19] *** jferrero left
[01:20] *** jferrero joined
[01:20] *** jferrero left
[01:24] *** rachelBROWN joined
[01:31] *** ash_ joined
[01:38] *** rachelBROWN left
[01:38] *** rachelBROWN joined
[01:40] *** cognominal joined
[01:51] *** agentzh joined
[01:57] *** ash_ left
[02:23] *** colomon_ joined
[02:23] *** colomon left
[02:23] *** colomon_ is now known as colomon

[02:28] *** payload left
[02:43] <cognominal> rakudo:  say ?("\n" ~~ m/<-[\v]>/)

[02:43] <p6eval> rakudo db84bc: 1␤

[02:43] <cognominal> rakudo:  say ?("\n" ~~ m/<[\v]>/)

[02:43] <p6eval> rakudo db84bc: 0␤

[02:44] <cognominal> rakudo:  say ?("\n" ~~ "\v")

[02:44] <p6eval> rakudo db84bc: 0␤

[02:45] <cognominal> ng:  say ?("\n" ~~ "\v")

[02:45] <p6eval> ng 4e4d82: 0␤

[02:45] <cognominal> ng:  say ?("\n" ~~ '\v')

[02:45] <p6eval> ng 4e4d82: 0␤

[02:47] <cognominal> is \n a vertical whitespace?

[02:48] <cognominal> I probably need sleep

[02:58] *** rachelBROWN left
[02:58] *** rachelBROWN joined
[02:59] <cognominal> std:  say ?("\n" ~~ "\v")

[02:59] <p6eval> std 29424: ===SORRY!===␤Unrecognized backslash sequence: '\v' at /tmp/ipOw8AHQ61 line 1:␤------> say ?("\n" ~~ "\v⏏")␤FAILED 00:01 108m␤

[03:00] <cognominal> std:  say ?("\n" ~~ m/\v/)

[03:00] <p6eval> std 29424: ok 00:01 107m␤

[03:00] <cognominal> std:  say ?("\n" !~ m/\v/)

[03:00] <p6eval> std 29424: ===SORRY!===␤Unsupported use of !~ to do negated pattern matching; in Perl 6 please use !~~ at /tmp/ICAyMSfvyQ line 1:␤------> say ?("\n" !~ ⏏m/\v/)␤FAILED 00:01 106m␤

[03:00] <cognominal> std:  say ?("\n" !~~ m/\v/)

[03:00] <p6eval> std 29424: ok 00:01 108m␤

[03:24] *** Student left
[03:30] *** synth left
[03:31] *** gbacon left
[03:31] *** eternaleye left
[03:34] *** synth joined
[03:38] *** eternaleye joined
[03:38] *** eternaleye left
[03:41] *** Chillance left
[03:54] *** justatheory left
[03:59] *** justatheory joined
[04:02] *** Baggio_ joined
[04:04] <TimToady> cognominal: ~~ does not force its right hand argument to be a regex, so ~~ '\v

[04:04] <TimToady> would be a string match

[04:04] <TimToady> but \n should be matched by \v, oui

[04:05] <TimToady> radkudo: say ?("\n" ~~ /\v/)

[04:05] <TimToady> rakudo: say ?("\n" ~~ /\v/)

[04:05] <p6eval> rakudo db84bc: 1␤

[04:05] <TimToady> I don't think rakudo knows \x inside of character classes though

[04:10] *** Baggio__ joined
[04:10] *** justatheory left
[04:15] *** SmokeMachine joined
[04:27] *** Baggio_ left
[04:43] *** jql joined
[05:03] *** jql left
[05:04] *** jql joined
[05:07] <pugs_svn> r29425 | diakopter++ | Some thoughts, opinions, and challenges for TimToady, obra, et alii.  http://svn.pugscode.org/pugs/docs/sprixel/notes.txt 

[05:09] *** cognominal left
[05:11] <pugs_svn> r29426 | diakopter++ | fix typos and remove UTF-8 BOM 

[05:12] *** cognominal joined
[05:12] *** c9s_ joined
[05:12] *** c9s_ left
[05:12] *** SmokeMachine left
[05:19] *** PacoLinux left
[05:23] *** Baggio__ left
[05:30] *** PacoLinux joined
[05:48] *** Exodist left
[05:51] *** meppl joined
[05:56] *** chromatic joined
[05:57] <chromatic> May I disagree strongly with those opinions, diakopter?

[05:59] <diakopter> chromatic: yes

[05:59] <diakopter> please

[06:00] <chromatic> C2 is infeasable, especially if you consider Mono, V8, and GHC as backends.

[06:00] <chromatic> Mono is right out.

[06:00] <chromatic> V8... you'd need someone besides Daddy Googlebucks supporting it for that to work.

[06:00] <chromatic> GHC... now you conflict with C4.

[06:01] <chromatic> That leaves... well, Factor is a possibility, except for C4.

[06:01] <chromatic> Possibly also C1.

[06:02] <diakopter> I thought mono had the items in C2

[06:02] <chromatic> Mono has patent concerns.

[06:02] <chromatic> Game over.

[06:03] <diakopter> it does?

[06:03] <chromatic> Unless you get it from Novell directly, Microsoft's patent agreement does not apply.

[06:03] *** _jaldhar joined
[06:03] <diakopter> hm

[06:04] <chromatic> TPF will never (as long as it has competent legal representation) bless a Perl 6 implementation which primarily targets such an encumbered backend.

[06:05] <chromatic> I can quibble with the need for C2b-e for 6.0.0 as well.

[06:08] <diakopter> http://www.microsoft.com/interop/msnovellcollab/newmoonlight.mspx

[06:09] <diakopter> “End User” means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through a Distributor.

[06:09] <diakopter> "Distributors" means resellers, recipients, and distributors to the extent they are authorized (directly or indirectly) by a Party or its Subsidiaries to resell, license, supply, distribute or otherwise make available Party Implementations (whether the resale, licensing, supplying, making available, or distribution is on a stand-alone basis, or on an OEM basis as bundled with hardware or other software of the reseller or distributor, or otherwise).

[06:09] <chromatic> "to the extent originally provided by Novell during the Term and, if applicable, the Extension or Post-Extension Period, but only to the extent such Moonlight Implementations are used as Conforming Runtimes."

[06:10] <chromatic> http://lwn.net/Articles/367878/

[06:10] * diakopter clicks

[06:10] <chromatic> That's also only for Moonlight, not Mono in general.

[06:11] <chromatic> http://www.the-source.com/2009/12/more-on-the-moonlight-covenant/

[06:13] *** eternaleye joined
[06:14] <diakopter> oh, hmm; yeah, lots of limitations there on the out-of-browser moonlight

[06:15] <chromatic> That's not even considering technical considerations, such as supporting CPS.

[06:19] <diakopter> I shouldn't have mentioned the new moonlight agreement; it's unrelated.  This is much more relevant: http://tirania.org/blog/archive/2009/Jul-06.html

[06:22] *** ChanServ sets mode: -o diakopter

[06:22] <chromatic> http://lwn.net/Articles/341771/

[06:24] *** JimmyZ joined
[06:26] <diakopter> do you have a particular point from that email you want to highlight/discuss?  I haven't read anything damning...

[06:27] <chromatic> Plenty of people who have very picky legal advice find the licensing and promise troublesome.

[06:28] <chromatic> You personally may not care, and that's fine.  You don't have much to lose.

[06:29] <chromatic> I run a business and I'm not going to touch it.

[06:29] *** Baggio_ joined
[06:30] *** patspam joined
[06:30] <diakopter> I feel hurted by your comparison of yourself to me and your claim that I'm not worth very much, but I can continue to refrain from being overly defensive about my opinions.

[06:32] <chromatic> I don't mean any offense; I mean as an individual developer you're not a target.

[06:32] <chromatic> As an individual developer, I wouldn't be a target either.

[06:32] <chromatic> As a business owner, I have a lot more risk.

[06:33] <diakopter> ok, but that doesn't mean I don't have interest in an entity with limited liability

[06:33] <chromatic> So do I, but that's my livelihood, and I'm not going to risk it for a JIT that exists today.

[06:34] <chromatic> I strongly suspect TPF doesn't want to put other business owners in a similar situation.

[06:35] <diakopter> perhaps I need a primer in this "TPF's blessing" concept

[06:35] <diakopter> I may have had an idea of what it means sometime in the past.... but not today

[06:36] <chromatic> The theory goes that TPF will strongly suggest that you use a specific implementation of Perl 6.

[06:36] <chromatic> That's what you're arguing for in your proposal anyway.

[06:36] <diakopter> I argued for strong leadership from Larry

[06:37] <chromatic> I'm saying that I doubt TPF will want to take on the legal responsibility of holding the copyright for and distributing an implementation of Perl 6 built on a backend for which the legal rights to redistribution and patent licensing are in question.

[06:38] <diakopter> TPF doesn't need to hold the copyright for (nor distribute) any code if it doesn't want to

[06:39] *** justatheory joined
[06:39] <chromatic> Okay, so you want Larry to make a plan that TPF won't support.

[06:40] <chromatic> That to me does not seem to reduce fractiousness.

[06:40] *** justatheory left
[06:42] <chromatic> That is, again, barring any and all technical concerns about the plan (which remain almost completely unchanged since the initial analysis leading up to Parrot in 2001).

[06:43] <diakopter> point taken (about fractiousness); I don't see why TPF needs to be in the endorsing business, but okay.  if it wants to be fractious against Larry, I guess it has that right.

[06:44] <chromatic> TPF holds the trademark on Perl and the copyright on Rakudo.

[06:44] <chromatic> Who do you suggest should hold both, if not TPF?

[06:44] <diakopter> I don't think TPF should transfer them..

[06:45] <diakopter> why would it need to?

[06:45] <chromatic> Who's going to hold the copyright on this mythical new implementation of Perl 6 then?

[06:45] <diakopter> the authors?

[06:46] <chromatic> How does that help the community?

[06:46] <diakopter> as opposed to (who else are you suggesting should own it)?

[06:46] <chromatic> TPF

[06:47] <diakopter> how does it help the community for TPF's name to be in the copyright slot in the source code files, instead of a reference to a list of authors?

[06:47] <chromatic> TPF has legal resources to maintain the copyright, maintain a list of copyright assignments, and pursue copyright action pro and con.

[06:48] <diakopter> is that how Perl 5's copyright is managed?

[06:48] <chromatic> Yep.

[06:48] <diakopter> oh

[06:48] <chromatic> It is now.

[06:49] <chromatic> That's the standard approach to open source/free software community governance.

[06:51] *** patspam left
[06:54] <diakopter> I guess I don't see the benefit of "maintain the copyright, maintain a list of copyright assignments, and pursue copyright action pro and con."  What does that mean for Joe Fellow who submits a patch to, say, Gnome

[06:55] <chromatic> That depends on the size of the patch, for one, and (possibly) the nature of the change.

[06:56] <chromatic> In general, Joe Fellow has to be able to claim 1) unfettered copyright over the patch for the purpose of 2) licensing (or transferring the copyright, depending on the contributor agreement) the copyright to the appropriate foundation.

[06:56] <diakopter> how does it depend on those things?  must Joe assign copyright to anyone?

[06:57] <chromatic> No, but it's 1) difficult to redistribute while disclaiming conflicting copyrights or licensing concerns (such as patents) and 2) protect the community's copyright without it.

[06:57] *** SmokeMachine joined
[06:59] <diakopter> I don't understand those last 2 msgs. 

[06:59] * diakopter tries harder

[07:00] <chromatic> If you want to distribute it under an OSI-approved license, there can't be restrictions on redistribution -- such as uncertain copyright claims or patent claims.

[07:01] <chromatic> An OSI-approved license is useless if recipients can't themselves redistribute it.

[07:02] * diakopter tries even harder

[07:02] <diakopter> (sorry :/)

[07:03] <chromatic> If only Novell can distribute Mono under Microsoft's patent licensing, no one else can redistribute Mono without taking on patent risk.

[07:03] <chromatic> The same applies for copyright.

[07:03] <diakopter> the community promise doesn't mention novell

[07:04] <chromatic> It doesn't have to; to my knowledge no one outside of Microsoft, Novell, and their legal representation have seen their secret agreement.

[07:05] <diakopter> what secret agreement?  I'm referring to http://www.microsoft.com/interop/cp/default.mspx

[07:05] <chromatic> Microsoft and Novell have their own agreement; Miguel talked about it.

[07:07] <diakopter> oh.. I suppose that might refer to the non-ecma portions

[07:08] <chromatic> Likely, but we can only speculate until we read it.

[07:08] <diakopter> but those certainly aren't relevant to me

[07:08] <diakopter> the parts covered by the community promise are the ones that matter

[07:09] <chromatic> And the legal advice from several attorneys with experience in this field is "Don't rely on the community promise."

[07:10] <diakopter> I might be interested in the specifics of that advice

[07:11] <chromatic> It's in the LWN link I provided most recently.

[07:12] <diakopter> I don't see attorneys' names mentioned there..

[07:14] <chromatic> I don't either.

[07:14] <diakopter> I mean, it says "we"

[07:14] <chromatic> I assume it's the FSF's legal representation.

[07:14] <diakopter> "Since we published Richard's article .." but I don't know who comprise the "we"

[07:14] <chromatic> That's the FSF.

[07:18] <diakopter> looks like Donald Robertson is the only person whose bio claims graduation from a law program on the FSF Staff and Leadership pages

[07:20] <chromatic> How about an SFLC post then?

[07:20] <chromatic> http://www.softwarefreedom.org/blog/2009/jun/29/language-patents/

[07:23] *** synth left
[07:24] * diakopter reads

[07:31] *** szabgab left
[07:31] * diakopter confused further; Bradley Kuhn isn't a lawyer, and this essay is a cross-posting from his blog, not one of the SFLC's legal opinions/publications

[07:31] <chromatic> Bradley works for SFLC.

[07:32] <chromatic> His job is the legal protection of free software.

[07:37] <diakopter> ok, but why haven't the licensed attorneys at the SFLC commented on the Community Promise in an official capacity?  I'd be very glad to know their opinion if/when they do.

[07:38] <chromatic> Because no attorney is going to give specific legal advice to anyone other than a client in a very specific situation.

[07:40] <diakopter> http://www.softwarefreedom.org/resources/ links to http://www.softwarefreedom.org/resources/2008/osp-gpl.html

[07:41] <diakopter> I think the critique on osp-gpl.html is quite helpful

[07:41] <diakopter> I wish they'd write one on the community promise

[07:42] <chromatic> They might do so.

[07:46] <mberends> Shouldn't this pugs/docs/sprixel/notes.txt be posted elsewhere as individual points for discussion? It looks too opinionated and transient to belong permanently in a (mainly) technical repository. Mailing lists might be more appropriate.

[07:48] <mberends> (fwiw, I'm more optimistic than the author about the state of Perl 6)

[07:48] <chromatic> I think you're optimistic in different ways.

[07:50] <mberends> the recent "business case" discussion looked on the bright side

[07:53] <diakopter> did it?

[07:54] <mberends> businesses like dependable timescales, Perl 6 regards completeness as more important than deadlines, so that is less good for business

[07:54] *** szabgab joined
[07:56] <diakopter> let's be precise with terminology and not let individuals hide behind the "Perl 6" moniker

[07:57] <diakopter> I don't mean it's best to be that precise *all the time*, just in this case :P

[07:58] <chromatic> If you want to be precise, businesses who've provided jack and squat to Perl 6 development can want what they want.

[07:58] <mberends> the current businesses investing in Perl 6 (even myself) are venture capitalists, because the potential reward is great but definitely not soon.

[07:59] <diakopter> erm

[08:02] <mberends> "Perl 6" is fine as a moniker, just like C. It's what I hope my customers will want, one day not too far away.

[08:03] <diakopter> to be more clear, I meant "who regards completeness as more important than deadlines"?

[08:05] <chromatic> Are you volunteering yourself as project manager or Larry as project manager?

[08:07] <mberends> diakopter: sorry.  "completeness" was my personal aggregate of the opinions stated by people active in #perl6.

[08:08] <PerlJam> diakopter: why do you think Perl 6 is in danger of "ruining its brand"?

[08:11] <mberends> the perl6advent blog has successfully promoted the brand

[08:11] <diakopter> chromatic: I wasn't volunteering anyone. I was opining that Larry was best suited for the task of chopping down the spec to something manageable; I also believe he is uniquely positioned for the various interactions necessary to figure out best how to make the spec achievable

[08:12] <chromatic> You assume he doesn't think that the spec is both manageable and achievable now with any of the current implementations in your time frame.

[08:13] <diakopter> correct.  The time frame is the issue on which I'm trying to push (hard).

[08:13] <mberends> +1 to chopping down the spec to make implementations more feasible

[08:14] <mberends> Perl6-lite would suit me fine over 90% of the time

[08:14] <chromatic> Here's betting Larry defaults to Patrick and Jonathan and their plan for Rakudo Star.

[08:14] <PerlJam> indeed.

[08:16] <chromatic> There's your timeframe and your spec.

[08:16] <chromatic> What's next?

[08:16] <diakopter> unfortunately I doubt anyone would take that bet

[08:16] <PerlJam> diakopter: why?

[08:16] <colomon> Even as I'm having growing doubts about Rakudo Star, I sure can't see how publicly disavowing it now would help Perl 6's PR.

[08:17] <diakopter> PerlJam: "take that bet" meaning take chromatic's offer of the bet (and bet against chromatic)

[08:17] *** colomon left
[08:17] <mberends> colomon, are your doubts based on schedule slippage or something else?

[08:18] <mberends> ah, missed colomon :(

[08:18] <JimmyZ> +1 to chopping down the spec to make implementations more feasible too

[08:18] <diakopter> I don't think Rakudo Star should be disavowed.. I don't think any of the impls should be disavowed... there are _wonderful_ lessons learned and excellent best practices built up in them, esp Rakudo

[08:19] <chromatic> I notice the lack of the words "code" and "reuse".

[08:19] <diakopter> :)

[08:19] <diakopter> not char-for-char, much, probably not, no, imho.

[08:19] <diakopter> but certainly in form and structure and naming

[08:19] <diakopter> and algorithms

[08:20] <chromatic> In other words, and please correct me if I'm wrong, you're suggesting that to deliver a Perl 6 implementation sooner than is possible with Rakudo, the right approach is to start over, code-wise, on a new platform.

[08:20] <chromatic> Or at least a different platform.

[08:20] <chromatic> With which the current contributor base has far less practical experience.

[08:20] <PerlJam> (see netscape)

[08:20] <chromatic> And on which there are currently no credible implementations even in part.

[08:21] <diakopter> if I may clarify/backpedal/hedge a tad, I do believe that achieving solidarity and focus is more important than switching VMs/compiler-chains

[08:21] <chromatic> Also regarding which the technical risks are... well, let's call them, charitably, unknown..

[08:22] <diakopter> but I think the spec is what prevents the solidarity/focus

[08:22] <PerlJam> diakopter: you just want all of the implementors pulling in the same direction on the same implementation?

[08:22] <PerlJam> diakopter: I don't think the spec has anything to do with it at all.

[08:23] <diakopter> I don't just/merely want that.. but it is slightly more crucial than reevaluating VMs/compiler-chains

[08:24] <PerlJam> Unless you think that one or more implementations are actaully implementing something that would not be essential in this new, proposed, reduced spec.

[08:24] <chromatic> Even so, that would require that contributor time, effort, ability, and interest is completely fungible.

[08:27] <diakopter> chromatic: re "sooner than is possible with Rakudo", no, that's not what I was/am suggesting

[08:27] *** colomon_ joined
[08:27] <chromatic> Then I'm confused.

[08:27] <PerlJam> colomon_: <@mberends> colomon, are your doubts based on schedule slippage or something else?

[08:27] <PerlJam> (I'm interested in what you think too :)

[08:28] <diakopter> I'm saying that the implementations _need_ to drive the spec a lot more, and in order for that to occur, the spec needs to be dialed back significantly

[08:29] <PerlJam> diakopter: why?

[08:29] <diakopter> (as you pointed out, I'm assuming it's unachievable in my time frame)

[08:29] <PerlJam> diakopter: how do we know what to "dial back" if we don't have people trying to implement it?

[08:29] <colomon_> mberends, PerlJam: I'm worried about ng's schedule slippage, Rakudo's speed (both versions), and Rakudo's stability. 

[08:30] <chromatic> Are you saying that you believe it's important to release something labeled Perl 6.0 in a specific time frame?

[08:30] <PerlJam> colomon_: The first two I guess I can understand, but not the third.  Could you elaborate?

[08:30] <colomon_> And I guess, in particular I'm worried that the slippage makes it harder to deal with the other two issues in the R* timeframe.

[08:31] <diakopter> chromatic: yes. I haven't always believed that, but I do now. 

[08:31] <colomon_> PerlJam: My experience with both ng and master is that they are very prone to crashing under modest loads.

[08:31] <chromatic> That's a very different assertion than what I read from the document.

[08:32] <diakopter> it would be a very helpful clarification to the document

[08:32] <colomon_> PerlJam: It looks to me like there are at least two serious Heisenbugs.

[08:32] <PerlJam> colomon_: parrot related or more likely rakudo's fault?

[08:32] <PerlJam> (or still unknown?)

[08:32] <colomon_> PerlJam: examples would be the random spectest crashes in ng, and master's difficulties with the mandelbrot script.

[08:33] <colomon_> PerlJam: Still unknown.

[08:33] <PerlJam> colomon_: so ... when ng lands in the next couple of weeks, that seems like a good thing to focus on  :)

[08:34] <colomon_> PerlJam: I haven't been waiting for it to land.  :)

[08:34] <colomon_> PerlJam: But I'm not really deep enough into it to be able to debug things at that level, so I've mostly just been passing on stack traces and the like whenever I can.

[08:34] <PerlJam> colomon_: BTW, the (lack of) speed issue tends to bug me too.

[08:35] <diakopter> chromatic: I think a clarification like that would clarify what I mean by "salvage the brand"

[08:36] <PerlJam> diakopter: so ... perl 6 is now "critically late" rather than just "late"?

[08:36] <colomon_> PerlJam: I think Rakudo needs to be aboue 100x faster to be viable.  I suspect that is completely doable, I'm just worried we're rapidly running out of time to do it before April.

[08:36] <PerlJam> diakopter: why?

[08:36] <PerlJam> diakopter: or, why do you think that time is so important now?

[08:36] <mberends> colomon_: thanks. About speed, rakudo and parrot authors regularly show (with evidence) that their part is performing fine, and that the other part (rakudo/parrot) must be causing slowness.

[08:37] <chromatic> Well, fine-ish.

[08:37] <colomon_> mberends: they're probably both right, too.  :)

[08:37] <chromatic> Rakudo has to create a lot of ExceptionHandlers, for example.  Expensive.

[08:37] <diakopter> PerlJam: I'm sorry if it appears I'm disregarding your many direct questions to me; I'm not.. I'm still formulating replies (hopefully you'll stick around until I can finally reply :D)

[08:37] <chromatic> Parrot's GC really ought to be able to recycle garbage much faster.

[08:38] <chromatic> PCC is still slower and heavier than it ought to be.

[08:38] <chromatic> PMCProxy is a hack.

[08:38] <chromatic> Object attributes are expensive.

[08:38] <chromatic> ... but I also distrust Jonathan's PMC mutation code.

[08:39] <colomon_> mberends: Anyway, what I was trying to say was that even with my worries, I think the best approach is to blast ahead with ng / Parrot and try to get all that fixed by April.

[08:39] *** iblechbot joined
[08:39] <mberends> agreed

[08:39] <PerlJam> diakopter: no worries

[08:39] <diakopter> colomon_: I'd agree with that, but I don't see anywhere close to the resource availability levels required

[08:39] <PerlJam> diakopter: (and if I'm not around to see answers, I can always see the channel logs :)

[08:40] <chromatic> Fix the resource level problem and you fix most problems.

[08:43] <mberends> general question: what do people think about a two tier (small/large) spec, perhaps along the lines of Java Standard and Enterprise Editions?

[08:44] <PerlJam> mberends: I have no idea what a "small" perl 6 spec would look like.  Most of it seems essential to me (save the things I don't quite understand :)

[08:44] * chromatic sleeps

[08:44] *** chromatic left
[08:45] <diakopter> the length of S05 and S26 make the diakopter weep

[08:45] <diakopter> lengths

[08:45] *** eternaleye left
[08:45] <colomon_> It seems to me that Rakudo represents a sort of de facto small perl 6 spec already.

[08:46] <diakopter> don't get me wrong, I'm definitely in awe of the authors' brilliant spec-writing ability, when I read them.

[08:46] <PerlJam> colomon_: good point.

[08:46] <mberends> I don't have a clue either, that's really why I'm asking ;)

[08:46] <colomon_> (For instance, Rakudo's 32-bit Int versus the spec's bigint + Int32, Int64, etc.)

[08:47] <diakopter> but, ... (re S05,S26) they're overblown to high heaven.

[08:47] <PerlJam> colomon_: but no one has documented Rakudo's spec as how it differs from "Perl 6"

[08:47] <diakopter> colomon_: an excellent point.

[08:48] <colomon_> PerlJam: True.  But I'm not sure I see the benefit of explicitly spec'ing the small version.

[08:48] <colomon_> If anything, I'd be more in favor of dumping some of the more complicated bits from the spec.

[08:48] <PerlJam> Hmm.

[08:48] <PerlJam> Such as?

[08:49] * diakopter recalls the synopses that bringeth the tears

[08:50] <colomon_> Well, the Int32, Int64, etc types come to mind.  :)

[08:51] <mberends> It would be great to have a Debian style popularity-contest of language features that people actually use. Hey, that could be added to http://github.com/masak/gge/blob/master/COOLTHINGS

[08:51] <colomon_> Looking at the Rat spec, for instance, is enough to bring tears to my eyes.  There are so many types there, almost all completely irrelevant for any practical purpose I can see.

[08:52] <diakopter> do you mean http://perlcabal.org/syn/S32/Numeric.html#Rat ?

[08:52] <colomon_> diakopter: no, it's in S02 or S03.  give me a minute.

[08:53] <PerlJam> colomon_: so ... remove them from the spec ;)

[08:53] <diakopter> heh

[08:53] <colomon_> I'd be happy if it was just Int which defaults to sensible int size for the platform and auto-upgrades to bignum if needed, and Rat and FatRat.

[08:53] <mberends> there's a lot of Perl 6 language I've not used (yet). Maybe because I don't know enough about them. traits, parameterized types, feed operators to name a few

[08:53] <PerlJam> you haven't used feed operators because no one has implemented them  :)

[08:54] <diakopter> well, 'cept pugs

[08:54] <PerlJam> but pugs implemented something slightly different IIRC

[08:54] <colomon_> Ack, I don't see a handy nearby link, but if you look at S02, search for FatRat, and then back up a few paragraphs, you'll see what I'm talking about.

[08:55] <diakopter> oh

[08:55] <colomon_> uint64 and rat64 and rat8....

[08:55] <diakopter> pugs todo 'feed operators do not work'

[08:55] <diakopter> hmm, oh

[08:56] <diakopter> well, no

[08:56] *** Baggio_ left
[08:56] <diakopter> only some of them are TODOd that way

[08:56] <colomon_> I don't know why all the types are there, so I'm loath to just delete them myself.  But I suspect 99.9% of Perl 6's potential users would not ever notice they were "missing".

[08:57] <diakopter> hah

[08:57] <diakopter> there are plenty of mailing list email messages that might protest

[08:58] <colomon_> diakopter: I have to admit I have the vague impression that there are a handful of insane but vocal people on the mailing list.  :)

[08:58] <PerlJam> I like the complex type myself.  Mainly because I've yet to run across a platform that had "native complex numbers"  :)

[08:58] <diakopter> colomon_: hee

[08:59] <diakopter> yeah, fsvo "native"

[08:59] <PerlJam> colomon_: then let them re-add it to the spec and implement it!

[08:59] <colomon_> PerlJam: Hmmm....

[08:59] <PerlJam> "These types were deleted from the spec because they don't seem to be useful enough, if you disagree, please provide an implementation when you re-add them to the spec"

[09:00] <colomon_> I think having Rat and Complex is a Big Deal.

[09:00] <diakopter> plz understand, I was *not* the advocate of folks other than Larry nulling spec spans

[09:01] <colomon_> I just don't think we need rat8 and a form of Complex which allows seamless internal polar coordinate usage.  (The latter has blissfully stayed only on the mailing list as far as I know.)

[09:01] <PerlJam> diakopter: Why do you place so much on Larry?   Do you think if he blesses something that it'll be accepted by the community?  Do you think that Larry is the only one who can do this?

[09:02] <diakopter> dunno.  Yes.  Yes (maybe I'm wrong).

[09:02] * diakopter goes back to the yellow hilites from PerlJam above

[09:03] <diakopter> PerlJam> diakopter: why do you think Perl 6 is in danger of "ruining its brand"?   Let me define the terms better, first.

[09:03] <colomon_> Heck, forget the hassle of implementing them in the compiler, just think of the hassle of testing all those cases!

[09:04] <PerlJam> diakopter: excellent!  After I asked that one I thought about asking for a definition of "brand"  :)

[09:04] * colomon_ imagines a spectest which takes days to run, even with 100x faster Perl 6....

[09:05] <diakopter> brand is the aggregate market perception (and the self-referential "aggregate perception of the aggregate perception", and so on) of a particular meme (or trademark)... the ideas/thoughts/emotions/memories that are triggered when such a meme is invoked (communicated).

[09:06] <PerlJam> colomon_: Moore's Law is still in effect.

[09:07] <PerlJam> colomon_: oh, and Perl 6 is a 100-year (or more) language  :)

[09:07] <diakopter> it's all fun and games until someone gets hurt.

[09:07] <diakopter> or cries wolf.

[09:08] <diakopter> but seriously, the Perl 6 brand is "smug whimsy, personified"

[09:09] <diakopter> whimsicality isn't all bad

[09:09] <diakopter> lolcode is pure whimsy

[09:09] <PerlJam> smug?

[09:10] <diakopter> "highly self-satisfied" sez Webster

[09:10] <PerlJam> Are you specifically talking about Camelia, or just in general?

[09:10] <diakopter> both

[09:10] <PerlJam> okay

[09:10] <diakopter> well, Camelia doesn't project smugness, nor whimsy, really

[09:11] <diakopter> so, I take that back

[09:11] <colomon_> errr... so you're worried that if something isn't done soon, Perl 6's brand of "smug whimsy, personified" will be seriously threatened?

[09:12] <PerlJam> colomon_: no, he's saying that's what's wrong and needs fixing.

[09:12] <PerlJam> colomon_: before it's too late.

[09:12] <diakopter> let's run through some scenarios

[09:12] <hejki> perl6 is like lady gaga - monoclinous in a good way

[09:13] <mberends> Camelia is not smug, but the act of choosing her was

[09:13] <hejki> "self-sufficient" :)

[09:13] <diakopter> PerlJam> colomon_: oh, and Perl 6 is a 100-year (or more) language  :)

[09:13] <diakopter> PerlJam: it took me a minute to decide you definitely weren't making a pun about the duration of implementation

[09:14] <PerlJam> perhaps we doth pun too much then

[09:14] <PerlJam> :)

[09:14] *** kaare joined
[09:14] *** cognominal left
[09:14] * diakopter had to look up "monoclinous"

[09:15] *** kaare is now known as Guest5971

[09:15] *** partisan left
[09:15] * colomon_ is going to try to go back to bed, will backlog in the morning...

[09:15] <diakopter> hahaha

[09:15] *** hicx174 left
[09:15] <hejki> :)

[09:15] <hejki> well if i refer to lady gaga you could reason the meaning of 'monoclinous' :)

[09:16] <diakopter> only thing I've seen of lady gaga was some youtube video of her performing a piano song before she got fame

[09:16] <diakopter> well, and some SNL skit with a balloon outfit

[09:16] <hejki> lady gagas hermaphroditism is one of the favorite modern memes

[09:17] <diakopter> oh; I didn't know that one.  I must make a mental note to visit 4chan more often :P

[09:17] *** pmurias joined
[09:17] *** hicx174 joined
[09:17] <diakopter> (kidding, I won't)

[09:18] <hejki> :P

[09:19] <PerlJam> diakopter: I don't see the act of choosing Camelia as smug really (though Larry has occasionally seemed smug on #perl6)

[09:19] <diakopter> scenario 1: R* is released on parrot 2.4; it's cool; some people use it; programming.reddit.com shows some microbenchmarks; some people get their feelings hurt.

[09:20] <diakopter> (not end of story)

[09:20] <diakopter> and it showcases some of the unique features of Perl 6...

[09:20] <diakopter> but it doesn't have "use v5;"

[09:21] <diakopter> so it's ignored entirely by Perl 5 users, which means everybody.  Why use Perl 6 when you need to also be using Perl 5?

[09:23] <diakopter> put yourself your Larry's shoes when he wrote Synopsis 1

[09:23] <diakopter> (or even Apocalypse 1)

[09:24] * PerlJam needs to get some sleep now

[09:27] *** PerlJam left
[09:27] *** PerlJam joined
[09:28] <diakopter> PerlJam: We have the sum of $25,000,000 USD we made from some Oil deal that we want you to help us to receive. Since we are working here on Official capacity we cannot keep this funds hence my contacting you.

[09:28] <diakopter> some Oil deal

[09:29] <diakopter> anyway, think about the use cases for Perl 6

[09:29] <diakopter> what are they?

[09:29] <mberends> bash++

[09:30] <mberends> a PHP replacement

[09:30] <diakopter> In your answer, you must explicitly account for the questions "why would I use Perl 6 when I have ____ that has been stable [ish/enough] for 10-20 years now?"

[09:31] <diakopter> where "you must" means "please"

[09:31] <mberends> grammars position Perl 6 as an awesome test manipulator

[09:31] <diakopter> (I'm trying to nail down exactly what does Perl 6 provide as a unique offering)

[09:32] <mberends> *text, gah

[09:32] <diakopter> (besides edutainment for #perl6)

[09:33] <mberends> if it can be implemented successfully, automatic multicore/multithreading

[09:34] *** Su-Shee joined
[09:34] <Su-Shee> good morning

[09:34] <pmurias> diakopter: just read http://svn.pugscode.org/pugs/docs/sprixel/notes.txt

[09:35] <mberends> hi Su-Shee, you're entering a New Year debate about the past and future of Perl 6

[09:35] <diakopter> pmurias: also, there's lots of discussion here

[09:35] <diakopter> to backlog

[09:35] <Su-Shee> mberends: :)

[09:36] <Su-Shee> mberends: well I have my own agenda (which isn't really hidden though :)

[09:36] <pmurias> diakopter: you suggest using ocaml, that is wrong, ocaml is crap ;)

[09:36] <diakopter> Su-Shee: what's your agenda (I don't know it)

[09:36] <diakopter> pmurias: :)

[09:37] <Su-Shee> diakopter: "web", "information processing/data mining/social physics/mashups" (don't know how to put this stuff in one spiffy keyword), GUI prototyping

[09:37] *** partisan joined
[09:38] <Su-Shee> diakopter: though I would sign the petition for "system administrators and networking" as well. :)

[09:39] <Su-Shee> well the short form is: I consider Perl 6 my future favorite programming language. 

[09:41] <diakopter> mberends: I agree with those you mentioned (grammars, autoparallel).  any others?  (anyone)

[09:41] <diakopter> here's perhaps a better question:

[09:42] <diakopter> in which of the programming-language-choice cases does Perl 6 wish to compete?

[09:42] <mberends> at a lower level, the Perl 5 features must continue do be delivered: glue functionality, huge module library

[09:42] <Su-Shee> diakopter: you mean stuff like "I want it functional as Lisp and fast as C and CPANish as Perl5 and the most shiny OO ever invented?" ;)

[09:43] <diakopter> Su-Shee: yes, the Synopses.

[09:43] <diakopter> ::)

[09:43] <diakopter> :)

[09:44] <diakopter> Enterprise apps (Java, .Net, Ada, C/C++), not a chance.  needs huge corporate/govt backing.

[09:44] <Su-Shee> besides huge module library I want back the great tradition of exceptional documentation.

[09:45] <Su-Shee> diakopter: let's try it anyway. enterprise needs change as well.

[09:47] <Su-Shee> ah, one part I forgot: everything embedded and user app on little device like. which I suppose could be maybe nicely done with the conjunction of parrot and a minimal rakudo.

[09:48] <diakopter> "minimal rakudo"

[09:49] <diakopter> Glue functionality, huge module library

[09:49] <diakopter> Perl 5.

[09:49] <mberends> diakopter: I'd like to have Perl 6 as programming-language-choice as often as possible, that means for sysadmin, data munging, webservers, text and GUI apps.

[09:49] <pmurias> diakopter: Perl 6 is intended to be a better Perl 5

[09:49] <diakopter> AHA

[09:50] <diakopter> finally someone came right out and said it; thank you :)

[09:50] <Su-Shee> pmurias: that's where I see it, yes. 

[09:50] <diakopter> and seconded!

[09:50] <diakopter> I fully agree that's what it was intended to be

[09:50] <hejki> i've found out that lots of perl5 actives whine about the utf8 syntax

[09:50] <hejki> which might be a bit fatal for the success of perl6

[09:51] <diakopter> hejki: hold that thought

[09:51] <diakopter> , but it can't be that (a better Perl 5) at all without Perl 5

[09:52] <diakopter> I mean, without ALL of Perl 5.

[09:52] <Su-Shee> diakopter: besides speed, scripting perl 5 style like is rather nice. 

[09:54] <mberends> diakopter: you're just saying that (ALL of Perl 5)

[09:54] <diakopter> mberends: what do you mean?

[09:55] <mberends> hopefully lots of P6 code is *not* going to include 'use v5;'

[09:55] <Su-Shee> look, we'll be placing Perl 6 automatically in the right places by actually doing the appropriate projects. 

[09:56] <pmurias> use DBI:from<perl5> is more likely

[09:56] <diakopter> mberends: but then there will be no Perl 6 software.

[09:56] <Su-Shee> no. inacceptable. Perl 6 without a good DBI is unthinkable.

[09:57] *** eternaleye joined
[09:57] <diakopter> mberends: what 100,000-person strong army of porters is going to port (let's be honest, fork) much of the CPAN to make Perl 6 versions

[09:57] <mberends> I see the v5 capability as transitional, like 16 bit dos boxes in Windows

[09:57] <diakopter> it won't happen

[09:58] <mberends> diakopter: we have the early part of 100 years in which to do it ;)

[09:58] <Su-Shee> diakopter: everyone who likes the idea of perl 6 starts a project and scratches an itch.

[09:58] <diakopter> exactly

[09:58] <Su-Shee> diakopter: you're assuming that those are few people. 

[09:58] <diakopter> but it's not the "I need to put food on my table" itch

[09:59] <Su-Shee> those will come, too. 

[09:59] <diakopter> the v5 capability can't be transitional

[09:59] <Su-Shee> it's not just p5 folks waiting for a new perl, there's also everyone never used perl5 but coming from python or ruby or something looking into perl6

[10:00] <diakopter> excellent; that's another language-choice market

[10:00] <diakopter> people starting new projects

[10:00] *** payload joined
[10:00] <Su-Shee> well I can tell you that I rather write a p5 project again than using some merge like use this and that from perl5 and sugarcoat it with perl6.

[10:00] <diakopter> (as opposed to people merely "solving problems" or "doing tasks")

[10:01] <mberends> Perl 6 source code out-golfs and out-sexes rival languages

[10:01] <diakopter> Su-Shee: but it would take a million person-years to reproduce all the work in Perl 5

[10:01] *** eternaleye left
[10:01] <diakopter> to get all those libraries ported

[10:02] <mberends> no no

[10:02] <Su-Shee> diakopter: because you're assuming that you have to port _everything_ which you plainly don't have to.

[10:02] <diakopter> *without* the "use from:p5 capability

[10:02] <diakopter> not even everything

[10:02] <Su-Shee> I'm not going to do stuff like use SSL:from<perl5> or use Gtk2:from<whomever>

[10:02] <diakopter> just the capabilities mentioned in Programming Perl and Learning Perl

[10:03] <pmurias>  Su-Shee why not?

[10:03] <Su-Shee> pmurias: why would I use perl 6 then?

[10:03] <diakopter> ahah, my point comes to life

[10:04] <mberends> first off, the P5 achievement was done with fewer resources and in less time, ans secondly, Perl 6 is a better language in which to re-do such library building.

[10:04] <Su-Shee> and: not all libraries are difficult to do. 

[10:04] <diakopter> "fewer resources and in less time"?

[10:05] <mberends> Su-Shee: you would use a Perl 6 module as such, and not worry whether it internally contained a reference to P5

[10:05] <diakopter> many hundreds of folks over 15-20 years

[10:05] <mberends> "a million person-years" ? 

[10:05] <diakopter> "Perl 6 is a better language in which to re-do such library building"  ... maybe.  maybe not.  maybe it can't possibly be implemented with any efficiency.

[10:06] <Su-Shee> mberends: no, I wouldn't. 

[10:07] <diakopter> mberends: ok :) 1e6 years was an exaggeration.  but anything more than 1e2 is unattainable at current resource levels.

[10:07] <mberends> Su-Shee: do you care whether the Perl 5 modules you use require C?

[10:07] <Su-Shee> mberends: I prefer clean breaks over phasing from one version to another. but that's really just my thing.

[10:07] <Su-Shee> mberends: yes, I do. 

[10:07] <Su-Shee> mberends: and I base my decision of usage sometimes on it. 

[10:08] <Su-Shee> mberends: depends on the project, though.

[10:08] <mberends> so do I :)

[10:08] <Su-Shee> mberends: I don't expect a native Gtk Perl :)

[10:09] <mberends> I prefer language-pure code where possible, and accept the alternative as a necessity

[10:09] <Su-Shee> mberends: another part is that I personally think that if the Perl 6 community (and I know, I'm really not in the place to say something like this but I say it anyway :) doesn't get important stuff like a nice DBI, it's really not the language for success.

[10:10] <mberends> Su-Shee: fully agreed, a well integrated DBI is absolutely essential

[10:12] <Su-Shee> and just mention this: there are a bunch of projects which are actually willing to port their perl 5 modules to perl 6 when it's in a stage where it can be done easily.

[10:13] <pmurias> diakopter: the other thing besides the we shouldn't even consider ocaml, is that your plan requires TimToady to do a lot of stuff

[10:13] *** LionMadeOfLions left
[10:13] <Su-Shee> ocaml?! what would we do with ocaml?

[10:13] <Su-Shee> (besides moving to france)

[10:13] <mberends> nothing, it was a mock counterexample

[10:13] <pmurias> base our future implementatiuon on it

[10:13] <Su-Shee> ah. :)

[10:15] <Su-Shee> pmurias: your javascript integration for example is something I really like to see finished. 

[10:16] <diakopter> pmurias: you were serious about saying I was suggesting ocaml?

[10:16] <diakopter> I said "I could perhaps see an argument for..."

[10:16] *** eternaleye joined
[10:17] <diakopter> yes, but ultimately Perl 6 is TimToady's brand

[10:17] <diakopter> but, a noisy death of the Perl 6 brand would damage Perl 5

[10:18] <diakopter> , which (I would argue) is much less of his brand than the many thousands of folks who make their living using his software

[10:19] <diakopter> I'm not saying he can't do what he wants, but imho it would be a disservice to let Perl 6 die the death of 90,000 unwritten (and unimplemented) tests

[10:20] <diakopter> (because no one has the time/willingness to implement such a complicated language _fully_)

[10:20] <diakopter> therefore, to salvage the brand, the spec needs vivisected

[10:20] <diakopter> sleep, maybe&

[10:21] <pmurias> diakopter: if TimToady told you to work on add "use v5" to rakudo instead of working on your fun parser project would you do it?

[10:21] <pmurias> * adding

[10:22] * Su-Shee has to buy some stuff or otherwise we'll starve and have no toilet paper. ;) brb

[10:23] <mberends> death is an exaggerated state for any working computer language nowadays. Neither Perl 5 nor Perl 6 are in such danger. We are probably discussing expectations of relative success, market share, mindshare etc.

[10:24] <Su-Shee> perl5 certainly not, no. it's noth dead, but it doesn't seem to be on the rise again either. at least not here.

[10:25] <mberends> pmurias: do you think blizkost is a good start towards rakudo/p5 integration?

[10:26] <pmurias> dunno

[10:26] <pmurias> i'm not familiar with rakudo

[10:27] *** pdcawley left
[10:39] *** szabgab left
[10:39] *** szabgab joined
[10:43] *** JimmyZ left
[10:46] *** Student joined
[10:46] *** Student left
[10:51] *** pdcawley joined
[11:09] *** araujo left
[11:12] *** carlin joined
[11:13] <carlin> OHHAI from 2010 :-)

[11:13] <Su-Shee> *hihi*

[11:14] <hejki> :D

[11:15] *** eternaleye left
[11:15] <Su-Shee> did you guys had a discussion wether the language gets too complicated and will never be implemented fully or where did the ocaml thing come from?

[11:16] *** larsen joined
[11:17] *** agentzh left
[11:18] *** carlin left
[11:21] *** pmurias left
[11:26] *** eternaleye joined
[11:59] <mberends> Su-Shee: yes it was about the difficulty of implementation. If you check out the pugs repository, the seed document was pugs/docs/sprixel/notes.txt or see today's IRC backlog. I'm deliberately omitting a document URL because I consider many of the statements harmful to Perl in some way, and personally believe we should try to discourage such texts becoming too readily searchable by bots and spiders.

[12:04] <Su-Shee> hm. hmhm. you mean critics would pick their favorite topic then? :)

[12:05] <mberends> yes, kind of

[12:05] <Su-Shee> why not let them?

[12:05] <frettled> Nobody's stopping them.

[12:06] <mberends> free speech and all that, sure, I've also just written my $0.02 worth

[12:07] <soupdragon> I love perl 6 I don't care what anyone says!!!!

[12:07] <Su-Shee> no, I didn't mean it in the free speech thing.

[12:07] <Su-Shee> err, way.

[12:08] <Su-Shee> mberends: what are your concerns?

[12:10] *** pmurias joined
[12:10] *** pdcawley left
[12:10] *** dbrock left
[12:10] *** pugs_svn left
[12:10] *** mdxi left
[12:10] *** hugme left
[12:10] *** Infinoid left
[12:10] *** kcwu left
[12:10] *** cj left
[12:10] *** eternaleye left
[12:10] *** SmokeMachine left
[12:10] *** zamolxes left
[12:10] *** xomas_ left
[12:10] *** dukelet0 left
[12:10] *** REPLeffect_ left
[12:10] *** mtve left
[12:10] *** akl left
[12:10] *** RichiH left
[12:10] *** tomaw_ left
[12:11] *** eternaleye joined
[12:11] *** pdcawley joined
[12:11] *** SmokeMachine joined
[12:11] *** zamolxes joined
[12:11] *** xomas_ joined
[12:11] *** dbrock joined
[12:11] *** RichiH joined
[12:11] *** REPLeffect_ joined
[12:11] *** cj joined
[12:11] *** kcwu joined
[12:11] *** mdxi joined
[12:11] *** Infinoid joined
[12:11] *** pugs_svn joined
[12:11] *** akl joined
[12:11] *** tomaw_ joined
[12:11] *** dukelet0 joined
[12:11] *** hugme joined
[12:11] *** mtve joined
[12:11] *** irc.freenode.net sets mode: +vv pugs_svn hugme

[12:11] *** xomas_ left
[12:12] <mberends> I learned by running a webserver temporarily at home that it takes only a few hours for a URL posted in our irclog to send spiders after you 4 times a day. I think it's very bad when a significant contributor pours forth emotionally, and less informed observers could easily take the comments out of context. Those less informed people won't read the pugs repo without a URL.

[12:14] <mberends> .oO( where is masak when you really need him? )

[12:17] <Su-Shee> hm. interesting.

[12:17] <Su-Shee> I could add at least two concerns of my own, but I'm no implementor.

[12:17] <mberends> please tell!

[12:18] *** FalseVinylShrub joined
[12:18] <Su-Shee> disclaimer: this is totally subjective and derives by my absolutely personal view and wishes what I'd like to see with perl6:

[12:19] <Su-Shee> sometimes I get the feeling, it's all getting way too academic. I don't even understand what half of all p6-related projects actually _do_ and I can't read up on them to decide wether they're important for me or not.

[12:21] <Su-Shee> second: I'm a total pragmatic - I don't care for another really, really cool operator as long I have to essentially trade "a new feature" against (let's stick with this example) DBI.

[12:21] <Su-Shee> which is a feeling I often get.

[12:22] <mberends> Su-Shee: I agree on both points. any more?

[12:22] <Su-Shee> on the other hand I'm totally surprised how simple some things are to be implemented. see hejki's file flags for example.

[12:23] <Su-Shee> mberends: third, I don't see a clear road ahead. I don't get a feeling of "this is where this is going"

[12:24] <hejki> heh

[12:24] <hejki> the file flags weren't that simple in ng tho ;>

[12:24] <hejki> i guess they'll be once the method are properly specifed (like Tene++ said last night)

[12:25] <hejki> "method" ~~ *

[12:25] <Su-Shee> mberends: so to my very limited and subjective view, it often feels like "let's implement something cool" instead of "let's implement the basic stuff which each and every programming language supports and what people need to build the so desperately wished for module library" first

[12:26] <Su-Shee> hejki: it's not the parrot stuff anymore we took a look at?

[12:26] <mberends> Su-Shee: the third point was at the heart of the earlier discussion, the light at the end of the tunnel looks too distant.

[12:26] <hejki> well parrot has S_ISLNK macro in it

[12:26] <hejki> BUT

[12:27] <hejki> stat doesn't have opcode for that

[12:27] <hejki> in case you meant that scenario

[12:28] <Su-Shee> hejki: yes. 

[12:28] <Su-Shee> (I think ;)

[12:28] <hejki> :)

[12:30] <Su-Shee> mberends: I'm really a perl die-hard, I've tried pugs when it came up and I follow every release of rakudo - but I miss a "it's getting there" feeling. and a proper label like "it's going to be an extremely fancy programming language" or "it's the new, improved perl for _all_ of us" - along those lines I feel.

[12:31] *** mjk joined
[12:31] <mberends> Su-Shee: your first point does get addressed automatically over time, I believe. It comes from people implementing and documenting nice applications.

[12:33] <mberends> what is so nice about #perl6 is the lack of barriers, a newbie wanders in and gets suggestions from the main designers and developers.

[12:45] <hejki> true

[12:45] <hejki> a month ago i didn't even have the slightest clue that there were perl6 even on the making 

[12:46] <hejki> and now i've already submitted couple of patches

[12:46] <hejki> great job! :>

[13:00] <takadonet> morning all

[13:03] *** pmurias left
[13:05] *** pmurias joined
[13:08] *** pmurias left
[13:10] *** adhoc joined
[13:13] <mathw> hey

[13:13] <takadonet> mathw: how are you ?

[13:13] <mberends> hi mathw

[13:14] <mathw> I'm good, and you takadonet?

[13:14] <takadonet> mathw: Good, trying to found out which Test.pm module my bioperl6 is using...

[13:16] <takadonet> should be the one in my path/to/parrot/ but any changes I do to that Test.pm have  no any effect.

[13:21] <mberends> takadonet: try perl6 -e '.say for @*INC'

[13:21] <mberends> rakudo: .say for @*INC

[13:21] <p6eval> rakudo db84bc: /home/p6eval/.perl6/lib␤/home/p6eval//p2/lib/parrot/1.9.0-devel/languages/perl6/lib␤lib␤.␤

[13:22] <takadonet> bloody hell. Found it!

[13:22] <takadonet> mberends++ Thanks man

[13:22] <takadonet> I was almost there using locate and grep :)

[13:23] <mberends> :) nice

[13:30] *** SmokeMachine left
[13:37] *** cognominal joined
[13:37] *** masak joined
[13:37] *** REPLeffect_ left
[13:37] <masak> oh hai, #perl6

[13:38] <mberends> hai masak

[13:38] * masak reads http://svn.pugscode.org/pugs/docs/sprixel/notes.txt

[13:38] *** REPLeffect_ joined
[13:39] <masak> I'm having agreements and objections along the way, but I'll save them 'til I'm done reading.

[13:40] *** pmurias joined
[13:41] * pmurias wonders when will someone publish sprixel/notes.txt on reddit (or some other similarly silly place)

[13:41] <masak> it's definitely reddit material.

[13:41] <mberends> please no!

[13:42] <masak> it's out of our hands... and besides, it's a clear risk when releasing an open document like this.

[13:43] *** Baggio_ joined
[13:43] <takadonet> who wrote this?

[13:43] <mberends> diakopter

[13:45] <Su-Shee> why don't you just go ahead, disable logging for a few hours and discuss it?

[13:45] <masak> :)

[13:45] <masak> I don't see the need for disabling logging...

[13:46] <masak> the notes.txt are civil, and so far I only have civil agreements and objections.

[13:46] <masak> s/agreements/points of agreement/

[13:46] <mberends> there's no need to disable logging, that would ...what masak said

[13:46] <Su-Shee> :)

[13:47] <masak> Su-Shee: but it conjures up a fun image of nerds bashing each other when the camera's off :P

[13:47] <masak> ok, here we go.

[13:48] *** mjk left
[13:48] <masak> I respect diakopter. I've privmsg'd with him quite a bit lately, and I've come to realize that he's onto something. a couple of somethings, more like it.

[13:49] <masak> I also resonate with quite a few of the perceived issues in the docuemnt. not all, but many of them.

[13:49] <masak> I also very much root for Perl 6 and would like to see it widely adopted. that goes without saying.

[13:50] *** FalseVinylShrub left
[13:50] <masak> mberends: A3-4 remind me of a few months back when you discussed freezing the specification.

[13:51] <mberends> masak: kinda

[13:52] <masak> my reaction back then was a feeble "no... why?", and I got to really think about the whirlpool model.

[13:52] <masak> my reaction now is the same, although stronger.

[13:52] <masak> I don't perceive the spec changes as a problem. most often, they're actually helping the implementations get there sooner.

[13:54] <masak> that said, it might be a good idea to freeze the 6.0.0 version of the spec at some point.

[13:55] <masak> but considering all the (good) change that has been going on in 2009, I don't think 2010 will be the year to freeze the spec.

[13:57] <masak> I say this as someone with a fair amount of Perl 6 code 'out there', needing to be maintained in the face of Rakudo refactors/behvaiour changes.

[13:57] *** ruoso joined
[13:58] <pmurias> ruoso: hi

[13:58] <takadonet> masak: So you think one more year of flux of the spec is needed before we can freeze it?

[13:59] <masak> takadonet: I don't see freezing it as that urgent a goal. so far, and for a while hence, I see keeping the spec mutable as much more beneficial than freezing it.

[13:59] <pmurias> ruoso: how fast is stmmap?

[13:59] <masak> it surprised me at first that I think that way, but I do.

[14:00] <masak> it also creates an extremely democratic environment where lowly Perl 6 *users* like myself get a chance to influence the language, if ever so tinily.

[14:01] <masak> think about how 'succeed'/'proceed' came about as a result of someone complaining in the Advent Calendar's comment system.

[14:01] <masak> or how preifx:<=> was abolished when szabgab complained about it in a newbie Perl 6 course.

[14:02] <masak> or how &split got its parameters reversed in the dark of the night, and TimToady actually listened and changed his mind when I, omega__ and pmichaud confronted him. :)

[14:02] <takadonet> masak: It seems to me that people (not me) will only start learning a language when it's 'stable'. I started hacking on bioperl6 because I want to start using it at work ASAP 

[14:02] <masak> takadonet: noted.

[14:03] <masak> I'd say that Perl 6 *is* stable, to a very, very large degree.

[14:03] <masak> most things discussed in the Advent Calendar were nailed down years and years ago.

[14:03] <takadonet> masak: I'm allowed to use any language at work as long as I can justify it. Little hard to do that when bioperl in Perl 5 is the most complete kit for bioinformatics right now 

[14:04] <takadonet> masak: Also that my main project is written in it

[14:04] <masak> the things that are up for debate are largely untested/unimplemented parts of the spec. my point is that I see it as a sign of health, not a sign of pathology, that we dare keep these parts open until we know that they can be implemented and that the implementation is 'satisfactory'.

[14:05] <takadonet> agreed

[14:05] <masak> the opposite of doing that is the dreaded "don't look back"/"waterfall" model.

[14:05] <masak> ...which I'm now using as a strawman, buhaha.

[14:05] <takadonet> hehe

[14:06] <Su-Shee> you really want another year of flux and waiting and nyi things?

[14:06] <masak> well, seems to me the alternative is a year of stability and waiting and nyi things.

[14:07] <masak> if so, yes.

[14:07] <masak> I want the flux.

[14:07] <takadonet> nyi?

[14:07] <masak> not-yet-implemented.

[14:07] <Su-Shee> not yet implemented

[14:07] *** FalseVinylShrub joined
[14:08] <takadonet> Hopefully in a year, I should have the main component done of bioperl6

[14:08] <masak> the flux looks like this to me: several entities, the spec, the impls, the spectests and the app cheese are all involved in an intricate dance to find 'agreement' in some higher sense.

[14:09] <masak> freezing the spec would only mean that one of the dancers can't move.

[14:09] <masak> I don't see that as an advantage.

[14:09] <takadonet> what type of music will there be for this dance? 

[14:10] <masak> now, notes.txt brings up the possible risks of keeping the spec in flux. notably that there's no hard deadline, and what takadonet brings up, that people perceive Perl 6 as "not stable".

[14:10] <Su-Shee> I want a fast and working "core" of perl 6 (core == stuff every programming language nowadays has) so every module developer can really do his/her stuff without nyi basics and I would add "cool features" later. 

[14:11] <masak> the core is all we've been working on all along.

[14:11] *** Baggio_ left
[14:11] <takadonet> The definition of the core is different for different people

[14:12] <takadonet> I think the core is still being work on but is still usable 

[14:16] <masak> the size of the community should preferably grow in lock-step with the scope of the available implementation features.

[14:17] <masak> that's what happened with Pugs. that's what is happening with Rakudo.

[14:17] <masak> if Elf or Mildew or Sprixel brings some desirable feature to the table that Rakudo doesn't have, they will just as easily participate in the community growth thing.

[14:18] *** Chillance joined
[14:18] <masak> I don't see the problem of fracturing among the implementations that diakopter sees at all.

[14:20] <cognominal> my problem with rakudo is it is not clear what is implemented and what is not. Annotated specs would help.

[14:20] <masak> nod.

[14:20] <masak> we had that for Pugs. no-one's spent the tuits to make it work for Rakudo.

[14:20] <masak> I've looked into it. I can see why no-one has done it already. :)

[14:22] <cognominal> I expect that once rakudo goes past some critical mass, a lot of [web-based] tools will appear and will help a lot. 

[14:23] <masak> aye. working on that.

[14:24] <cognominal> I anticipated some  annotated spec ala XML but community based and many integretated tools.

[14:24] <cognominal> *anticipate

[14:24] <masak> but most importantly, the fractured-implementations image problem, if it is at all a problem (which I doubt), is not an *external* image problem.

[14:24] <masak> people from the outside think Perl 6 == Rakudo, or maybe, if they have a long-term memory or have used Haskell, Perl 6 == Pugs.

[14:25] <masak> a 'most-likely-to-succeed-with-a-concerted-effort implementation vehicle' will select *itself*, just as it has done so far.

[14:26] <masak> no need for TimToady dictatorially pointing at one particular implementation and saying "I believe that one will be the one to succeed the best".

[14:27] <cognominal> I don't think people care that much, they don't want at least one implementation that has a critical mass. It seems that landing ng will get is close and rakudo star will let the people know.

[14:27] <cognominal> s/don't//

[14:27] <cognominal> *get us

[14:27] <masak> yes.

[14:27] <masak> and landing ng is just a (large) part of fulfilling the promises made for April.

[14:28] <masak> so, it's not just willy-nilly, that's my point. it's been part of the plan since at least August.

[14:28] <masak> longer, if you count the preparation for the Rakudo Star announcement.

[14:28] * takadonet cannot wait for lazy list using gather/take

[14:29] <pmurias> masak: what's the hard part of getting the synopsis annotated with passing/not passing markings

[14:29] *** FalseVinylShrub left
[14:30] <cognominal> Once critical mass is attained people will step in to solve parrot problems  People don't want to be involved in a project with no clear future.

[14:31] <cognominal> masak, how stable (considering stuff is moving under you) are you web stuff?

[14:31] <cognominal> *your

[14:31] *** larsen left
[14:32] <masak> pmurias: the machinery is there already, tailored for Pugs. the hard part is making the glue work for Rakudo.

[14:34] *** Student joined
[14:34] <masak> cognominal: stable enough. not always fully there in terms of implementation, but often good enough to get a community started. what's lacking is integration, tutorials and packaging.

[14:34] *** Student left
[14:35] <cognominal> you got web sockets? :)

[14:35] <masak> well, Rakudo does.

[14:35] <Su-Shee> rakudo has web sockets?

[14:35] <masak> with mberends++' HTTP::Daemon, one can thus run a fully-Perl 6 web stack.

[14:35] <cognominal> I mean the new very small web spec

[14:35] <masak> it's cool, albeit a bit unstable still.

[14:36] <masak> cognominal: oh, I thought you meant vanilla sockets...

[14:36] <Su-Shee> no, web sockets are the xmlhttprequest replacement essentially.

[14:37] <pmurias> masak: one could imagine turning the smartlinks thing into a general tool

[14:37] <cognominal> http://www.w3.org/TR/2009/WD-websockets-20091222/

[14:37] <masak> pmurias: if I'm not mistaken, that has been done already on CPAN.

[14:37] <cognominal> that's the stuff pushed by the html5 guys and implementated by google in chrome.

[14:37] <masak> pmurias: but last time I looked at it, even that module was a bit hardcoded for Pugs.

[14:38] <cognominal> At last web programming will be less of a hack.

[14:38] <Su-Shee> cognominal: what I've read, firefox will have it in one of the next versions.

[14:38] *** synth joined
[14:38] <cognominal> I guess within weeks everyone but m$ will have it.

[14:39] <Su-Shee> didn't ms want to make ie9 a nice browser again? ;)

[14:39] <masak> last point on notes.txt: speed. all the points under C are really good to have, and I don't see why any implementation should ignore them. but the main contender will be speed, with stability as the obvious companion.

[14:39] <cognominal> it is so little and has so far reaching consequences.

[14:39] <pmurias> Su-Shee: was it ever a nice browser? ;)

[14:39] <masak> 'stability' here meaning 'not crashing and not leaking memory'.

[14:40] <Su-Shee> pmurias: I wouldn't know, I know only the quirks I have to handle ;)

[14:40] <masak> I could easily see an implementation overtaking Rakudo in mindshare if it overtakes Rakudo in speed.

[14:40] <masak> and so (I hope), 2010 will be the year of Perl 6 speed.

[14:41] <Su-Shee> cognominal: did you look into DOM storage? that's the next important thing besides web sockets

[14:41] <cognominal> With the Android and  the iPhone, and people browing the web from phone, ie will soon become history. I wish flash too, but that's wishfull thinking.

[14:42] <Su-Shee> cognominal: I so very much hope your crystal ball is right :)

[14:42] <cognominal> Su-Shee, I am aware of webclient side sql based stuff, but I did not look into it.

[14:43] <Su-Shee> cognominal: it's essentially enough space to stuff sessions appropriately into the clieant instead of in your database.

[14:43] <cognominal> Kill flash would do so much against global warming...

[14:45] <cognominal> On my mac,  my ventilator run most of the time because runaway flash plugins.

[14:46] <cognominal> Ho, and today, because looping in a zero-width rule... I wish the rule compiler would warn of that possibility  :)

[14:48] <masak> cognominal: me too.

[14:49] <masak> cognominal: been thinking of putting that in GGE.

[14:51] <cognominal> GCE?

[14:51] <masak> it's a grammar engine of mine.

[14:52] * colomon_ is finally caught up with #perl6.  Yay!

[14:52] <masak> a port of PGE from PIR to Perl 6.

[14:54] <colomon_> masak's dead right in terms of speed and stability, I think.

[14:56] <masak> there are some apps you can use without great speed. Perl 6 will still be a really nice experience for those.

[14:56] <colomon_> I mean, sure, there are more features I'd like to have, but if we had the capabilities of Rakudo ng + master and it was 100x faster and stable, that would be a perfectly fine Perl 6 implementation for me.

[14:56] <masak> even a more slimmed implementation but with greater speed would interest me.

[14:56] <masak> I mean, I'm used to working around stuff.

[14:58] <slavik> would be nice if Perl6 could approach C speed in similar situations.

[14:59] <colomon_> slavik: it would be nice, of course, but I'd be happy most of the time if it were just 10x slower than Perl 5.

[14:59] <masak> slavik: Andrew Shitov wrote an interesting Perl 6 - to - C++ converter.

[15:00] <masak> slavik: it's fast, but it has the obvious drawbacks of not having a proper object model/re-entrant runtime, etc.

[15:00] <cognominal> I am dabbling with a Perl 6 like syntax to insulate me of the Objective-C crap.

[15:00] <colomon_> masak: where is it now?  that might actually be useful for me for $work...

[15:02] <cognominal> already 2010 in Japan?

[15:03] <cognominal> so says my iPhone clock app

[15:04] <masak> colomon_: http://talks.shitov.ru/ppt/bapm2009/faster-perl6-en.pdf http://perl6.ru/p6c

[15:04] <cognominal> it is even 0:34 in Darwin Australia

[15:04] <colomon_> reading that now, masak++

[15:04] <ruoso> pmurias, I haven't seen any benchmark

[15:05] <masak> seems the source is at svn://svn.shitov.ru/p6c

[15:07] *** KyleHa joined
[15:12] <colomon_> masak: yup, I downloaded it a couple of minutes ago.

[15:13] <colomon_> interesting stuff, lots of boost.

[15:16] * masak downloads it, too

[15:19] <masak> it's clearly a cool proof-of-concept.

[15:20] <masak> also, thanks to its great speed, it's just the kind of wake-up kick we all need.

[15:24] *** KyleHa left
[15:25] *** colomon_ left
[15:26] *** colomon_ joined
[15:29] * masak backlogs over the interesting discussion between chromatic and diakopter earlier today

[15:30] <takadonet> ohhh

[15:32] <masak> I'm glad I got my comments off my chest before finding it. :)

[15:36] <pmurias> ruoso: i'm thinking of replacing m0ld with a p5 SSA AST

[15:37] <masak> colomon_: I'd be interested to hear more about your doubts about Rakudo Star. myself, I'm worried about ng, but I'm not yet ready to doubt the Rakudo Star deadline.

[15:37] <colomon_> masak: well, the worry about ng is informing the worry about Rakudo *.

[15:38] <masak> fwiw, I'm against chopping down the spec, except in the cases where it makes sense for other reasons than Getting There Sooner(TM). :)

[15:38] <colomon_> agreed that "getting there sooner" is not a good reason to chop stuff from the spec.

[15:39] <colomon_> Let me reverse course slightly to make my point.

[15:39] <masak> colomon_: ng was planned to land in November, then December, now January. as long as it lands before April, Rakudo will be able to acheive Stardom to a large extent.

[15:39] <colomon_> masak: I don't think that's right.

[15:40] <masak> let's talk about that, then.

[15:40] <masak> preferably about specific points on the ROADMAP.

[15:40] *** jferrero joined
[15:41] <colomon_> First, I think ng is in extreme danger of missing January, too.

[15:41] <pmurias> ruoso: then even with a simple optimzer we could infer a lot of types and emit much smarter code speeding stuff significantly

[15:41] <masak> colomon_: I wouldn't rule that out wither.

[15:41] <masak> s/wither/either/

[15:41] <colomon_> masak: I think the ROADMAP is sort of too specific; I'm more worried about general things.

[15:41] <masak> such as?

[15:42] <colomon_> Or rather: I think if we released the current Rakudo master as Rakudo Star, it would be an enormous PR disaster, due to the speed and stability issues.

[15:42] <colomon_> ng adds a lot of great stuff, but pushes us back even further on the speed and stability.

[15:42] <masak> we've never promised the speed for Rakudo Star.

[15:42] <masak> stability issues are always bad.

[15:43] <masak> but they're also more-or-less out of our hands, being Parrot issues.

[15:43] <colomon_> we may have never promised speed, but last summer pmichaud definitely told me it was a goal for R*.

[15:43] <masak> the Parrot people are dedicated to make Parrot 2.0 stable enough for Rakudo Star.

[15:43] *** patspam joined
[15:43] <colomon_> masak: I don't know how we know they are Parrot issues.

[15:44] <masak> colomon_: Rakudo Star -will- be faster when it comes to parsing.

[15:44] <masak> colomon_: I know they are Parrot issues.

[15:45] <masak> colomon_: to be clear: Rakudo won't be 100x faster by April. that was never the goal, AFAIU.

[15:45] *** justatheory joined
[15:47] <masak> mberends: it seems that the idea of the COOLTHINGS document was lost between my writing it and your reading it. :/

[15:48] <masak> mberends: that document contains a list of things that are specifically blocking on Perl 6 being able to parse Perl 6 code into an AST which it can then introspect.

[15:48] <colomon_> At this point I'd be ecstatic if Rakudo was 10x faster by April.

[15:48] <masak> mberends: thus, a 'Debian style popularity contest of language features' decidedly does not belong on that list...

[15:48] <takadonet> Lazy operators is what I really need right now.

[15:48] <masak> takadonet: what's lazy operators?

[15:49] <takadonet> masak: gather/tale

[15:49] <takadonet> take*

[15:49] <colomon_> afk, got to change boy's clothes so he can go out.

[15:49] <masak> that's more like a keyword.

[15:49] *** ispeak joined
[15:49] <takadonet> in the master branch, they are eager right now correct?

[15:49] <masak> what 'they'? 'gather' and 'take'?

[15:50] <masak> yes, those are eager. just as everything else in the master branch.

[15:52] <takadonet> masak: I'm planning to use gather and take in my grammar when parsing fasta file. Once they are lazy, it will make things a lot easier when implementing SeqIO

[15:52] <masak> nod.

[15:53] <masak> oh, and by the way: a Perl 5-Perl 6 bridge might actually be just as important as the speed requirement, IMHO.

[15:53] <takadonet> break &

[15:54] *** Psyche^ joined
[15:54] <masak> in the sense that, if I still get Rakudo's current features in a slow Perl 6 runtime, but with excellent connections back to Perl 5 and CPAN, I would definitely be interested.

[15:54] <masak> the speed thing wouldn't seem as critical, then.

[15:54] <colomon_> I suppose that's true.

[15:55] <masak> this is me agreeing with diakopter, I suppose. both about the speed and the p5p6 bridge.

[15:55] <colomon_> Errr, it would still be critical, but a different segment of the things I use Perl for would open up if I could seamless use CPAN.

[15:55] <masak> but I don't feel the urgency he does, or the need to force things through the spec or TimToady.

[15:56] <colomon_> btw, masak, the more I think about it, the more I think proto is critical for Rakudo *.

[15:56] <masak> oh no :/

[15:57] <colomon_> Not necessarily as something for end users, but I think being able to test Rakduo against a big hunk of current Perl 6 actual code is HUGE.

[15:57] <masak> indeed.

[15:57] <masak> that was the big advantage of Pugs, too.

[15:57] <masak> it drove the spec.

[15:58] <masak> THAT's what I'm interested in doing: -driving- the spec to where it makes the most sense, not freezing it in its current state or in the state it happens to be in at some arbitrary date.

[15:59] <masak> in fact, I like the flux thing so much, that I'd prefer we do it as long as it's practical. i.e. up until the moment we actually have critical mass.

[16:00] <masak> ...which probably won't be April, for all the good Rakudo Star will bring.

[16:01] <masak> I mainly see April as bringing in the next stage of early adopters, so that we can adapt to the power of a slightly larger community, and set our sights for the next big feature release, perhaps in April 2011.

[16:01] <masak> (that's not for me to decide, but you get the idea)

[16:04] <pmurias> the spec freeze will propably mean that the new changes will go into 6.0.1 :)

[16:04] <masak> sure. I just don't see the need for spec versioning until we have a reasonably feature-complete implementation.

[16:05] <colomon_> masak: I am entirely with you on the spec thing here.

[16:07] <masak> this is all extremely interesting, but I fear I need to log off until 2010.

[16:07] <colomon_> I think Rakudo Star also needs to be a sort of "Hey, it's not just vapor ware!" message to the world.  Which is why I worry about the speed -- because if it works but is super slow, it will still be considered a toy by most.

[16:07] <colomon_> I need to log off and run errands.

[16:07] <colomon_> Happy New Year!

[16:08] <masak> \o/

[16:08] *** masak left
[16:09] *** Patterner left
[16:09] *** Psyche^ is now known as Patterner

[16:12] <rjbs> Is R* really supposed to be "not a toy"?  Is "toy" just a word to avoid?

[16:13] <rjbs> Is anyone expected to start using R* to get his job done?  Is it a prototype release, a demonstration of a language that can be used for minor problems to see how things work?

[16:13] <rjbs> I think getting the "what this release is" label written just so will be very very important.

[16:24] *** soupdragon left
[16:26] *** SmokeMachine joined
[16:32] <pugs_svn> r29427 | pmurias++ | [mildew] start working on adding a ->simplified method to AST 

[16:41] *** plainhao left
[16:52] *** jferrero left
[17:00] *** xomas_ joined
[17:08] *** ispeak left
[17:11] *** SmokeMachine left
[17:14] *** cls_bsd left
[17:15] <diakopter> rjbs: pmichaud's journal entry about it

[17:15] *** Chillance left
[17:16] <Su-Shee> rjbs: actually, my company at least hope that R* can be at least used to start converting stuff to p6.

[17:17] *** cognominal left
[17:17] <rjbs> diakopter: I did read it; I mean the announcement and so on that occur when it is released.

[17:18] <diakopter> http://use.perl.org/~pmichaud/journal/39424  clarifies

[17:19] *** SmokeMachine joined
[17:21] <diakopter> and http://use.perl.org/comments.pl?sid=43556&cid=70194

[17:21] *** cognominal joined
[17:23] <diakopter> and http://use.perl.org/comments.pl?sid=43556&cid=69932

[17:27] <pugs_svn> r29428 | pmurias++ | [mildew] change AST nodes to be easier to be SSAfied 

[17:28] <diakopter> http://use.perl.org/comments.pl?sid=43556&cid=70186   is well-written, in my opinion.  the responses to its largest points are indequate.

[17:31] *** colomon__ joined
[17:31] *** colomon_ left
[17:38] *** iblechbot left
[17:45] <diakopter> inadequate*

[17:50] *** zloyrusskiy joined
[17:52] *** zloyrusskiy left
[17:53] <pmurias> it's a bit true

[17:54] <pmurias> in that an small incremental improvement on Perl 5 would be much easier

[17:55] <diakopter> mattw's response that "Rakudo Star is the first time an implementation and the spec have been in a state where anybody can say 'here is some of Perl 6. Have fun with it' and know that people will be able to take it and use it and do useful things with it." is ... wrong.

[17:56] <diakopter> "The shiny things are here, they're in the spec, many of them are in the code."  how many?  1 out of 10?

[17:58] <diakopter> I must admit, the entire reply by mattw reads (to me) like a recruitment/gospel pamphlet from a cult.

[18:00] <diakopter> and I agree with furry_marmot's characterizations of pmichaud's post, too.

[18:01] <diakopter> but what's most perplexing is pmichaud's reply to it, in which he equates "Perl 6" with "Rakudo"

[18:02] <diakopter> furry_marmot: "Perl 6 should have a release date. You prioritize what will go into that release, you implement it, and then you release it."  pmichaud: "I believe that this is exactly what the Rakudo Star announcement says we are going to do. It names a release date, says that we will prioritize what will go into that release, gives a criteria by which we will come up with priorities, and says we will focus our efforts over the next eight months on imple

[18:05] <diakopter> but furry_marmot wasn't saying an implementation of Perl 6 needs to release a subset implementation without calling it done.

[18:06] <diakopter> furry_marmot was saying that there ought to be "finished" milestones, and corresponding specs to those milestones.

[18:09] <diakopter> furry_marmot was talking about the release of a language-cum-implementation.

[18:15] <diakopter> I agree with pmichaud's statement here: "if "Perl 6 is finished" remains the primary criteria that most people use to decide whether or not to write applications in Perl 6 (and the criteria that we hold ourselves to), then we'll never get there."

[18:16] <diakopter> only the "Perl 6 is finished" criterion can trigger the belief that "Perl 6 is finishable" in outsiders.

[18:17] <diakopter> (unless the measures in my diatribe/entreaty are taken, as I wrote therein)

[18:17] <mberends> this debating about the meaning of "finished" is so boring. what matters is "usable" as in "production ready" for at least a few production scenarios.

[18:18] <diakopter> and it's the "Perl 6 may not be finishable" belief that holds up adoption/experimentation/participation

[18:18] *** LionMadeOfLions joined
[18:18] <diakopter> boring is often necessary/best.

[18:19] *** payload1 joined
[18:19] *** payload left
[18:19] <diakopter> "for at least a few production scenarios."  but which ones (what I was asking about 8 hours ago)?

[18:19] <diakopter> do they advance/improve Perl 5?

[18:22] <Su-Shee> yes, they're doing amazing stuff and advancing moose, catalyst and so on. very nice stuff.

[18:22] <diakopter> market uncertainty about the long-term feasbility of something and its growth path is vastly more influential than a tiny proof of concept, even if the proof of concept works.

[18:22] <diakopter> Su-Shee: I meant "do those production scenarios advance/improve Perl 5?"

[18:23] <diakopter> the production scenarios to which mberends was referring

[18:23] <Su-Shee> brb

[18:31] <mberends> a few productions scenarios would be (repeating) some of sysadmin, data munging, webservers, text and GUI apps. If a Perl 6 implementation can do some of that work approximately as well as other potential language choices, that would be "usable" to some people. It's all very subjective, this word-meaning stuff.

[18:33] <pugs_svn> r29429 | colomon++ | [t/spec] Refudge to dodge crash. 

[18:34] <pmurias> diakopter: you meant improve upon?

[18:39] <mberends> if Perl 6 is not to be regarded as "improving" Perl 5 (that's how the Perl 5 community generally sees it), there is no need to compete. Different strokes for different folks.

[18:40] <diakopter> what you mean by "that's how the Perl 5 community generally sees it" is not clear to me

[18:40] <Tene> That question rather bothers me.  Is Perl 6 not trying to be better than Perl 5?  If so, why bother?  If not, in which areas is Perl 6 aiming to be worse than Perl 5?  Are there Perl 5 markets that we're not targetting?

[18:41] *** xomas_ is now known as xomas

[18:41] <diakopter> Tene: exactly my point.

[18:42] <diakopter> (it can't strive to be better than Perl 5; it's an impossible task. it can only strive to add to it (to "improve upon it" by extensions))

[18:42] <Tene> ... it can't?  what?  Perl 5 is an unsurpassable maximum goodness?

[18:43] <diakopter> no, I mean, it can't be a "replacement" for Perl 5 (and be better at it)

[18:44] <Tene> Okay, I think I get what you're saying.  Not sure I agree with you.

[18:44] <mberends> the dialogs between masak and mst have shown two languages and communities, each with lots of merit and unfortunately occasional conflicts of interest. I do not wish to portray Perl 6 as superior while it's unable to replace Perl 5 in practice.

[18:44] <Tene> (Not sure I don't.)

[18:46] <diakopter> but the two communities don't necessarily need to have conflicts of interest.  that's one of my points (that the conflicts of interest need to be eliminated)

[18:46] <pmurias> Tene: Perl 6 is intended to be better then Perl 5

[18:47] <diakopter> mberends: Perl 6 should not be "portrayed as superior" ever

[18:47] <pmurias> the language is, the implementations aren't

[18:47] <diakopter> (as a potential replacement/substitute)

[18:47] <mberends> improvement?

[18:48] <diakopter> pmurias: yes; thank you for the clarification.  I am indeed referring to the implementations and their capabilities.

[18:48] <pugs_svn> r29430 | colomon++ | [t/spec] Refudge test to prevent crash.  (Exact same problems as elems.t, it seems that "my @a = ();" and then trying to treat it like an array has issues.) 

[18:48] <Tene> diakopter: "ever" seems to disagree with you just talking about implementations.

[18:48] <Tene> If there could never be an implementation that would be better than Perl 5...

[18:49] <diakopter> not *without* Perl 5, I mean.

[18:49] <diakopter> sorry; I'm being confusing. :/

[18:49] <Tene> What?

[18:49] <diakopter> Tene: it's difficult b/c I don't know how much of the past 24 hours you've backlogged

[18:49] <Tene> diakopter: all of it.

[18:49] <diakopter> ok.

[18:50] <diakopter> I'm refusing to give in to the notion that any Perl 6 implementation that doesn't make all of Perl 5 available is not useful

[18:50] *** perlygatekeeper joined
[18:50] <diakopter> is useful, I mean.  argh.

[18:50] * diakopter starts over, again.

[18:50] <diakopter> too many negators

[18:50] <mberends> triple negative :(

[18:51] <Tene> What about a Perl 6 that made all of Ruby available?  Or all of Java?

[18:51] *** jferrero joined
[18:51] * colomon__ apologies in advance to dalek...

[18:52] <diakopter> that would be interesting, too... but then it'd be "super-powerful pattern/grammar addons for Ruby" or "... Java"

[18:53] *** dalek left
[18:53] * colomon__ thought that would happen.

[18:53] <mberends> Tene: fine idea technically, but in all likelihood the users interested in that feature would be a lot fewer than in the Perl 6 -> Perl 5 case

[18:53] <Tene> So, all of those other languages that don't let you use Perl 5 are also not useful?

[18:53] *** dalek joined
[18:54] <Tene> If not, are you then saying that Perl 6 is a less-useful language than any other existing language?  If so, what's the use working on it?

[18:54] <diakopter> yes, it's less useful if it doesn't include all the capability of Perl 5.

[18:54] <Tene> Python's OO is less-capable than Perl 5's.

[18:55] <Tene> Python is useless?

[18:55] <diakopter> of course not

[18:55] <mberends> Pure single language code is more maintainable. Multiple language projects mostly arise out of technical necessity.

[18:55] <Tene> Python's XML parsing libraries are much less capable than Perl 5's.

[18:55] <Tene> I'm really not trying to be belligerent here, btw.  I'm just very confused about what you're trying to say, and it seems like you want feedback about that.

[18:56] <Tene> If what I'm saying isn't useful to you, please feel free to tell me to STFU. :)

[18:56] <diakopter> yes, Python's less useful *for those purposes* if those particular components are less capable.

[18:57] <diakopter> it doesn't make Python useless overall (in the least)

[18:58] <diakopter> I think perhaps a better way of saying what I'm trying to say is: a Perl 6 without all of Perl 5 available isn't Perl.

[18:58] <Tene> So Perl 5 without a C compiler isn't Perl, because a noticable part of CPAN isn't available?

[18:59] <diakopter> no, b/c a C compiler can be trivially added.

[18:59] <diakopter> (namely, the same C compiler that built the perl)

[18:59] <Tene> That just sounds way too much like a No True Scottsman fallacy.

[18:59] <colomon__> Tene++

[19:00] <diakopter> how does it sound like that?

[19:00] <Tene> I also question what purpose the category "Perl" would even be serving at that point.

[19:00] <Tene> As well, if half of CPAN was deleted, would Perl no longer exist?  If so, what existed before that half of CPAN was written?

[19:02] <Tene> "Okay, so it's not 'Perl', and therefore..." -- can you complete that?  "It's not useful."?

[19:02] <diakopter> there are some miscommunications here.

[19:03] <Tene> Probably. :)

[19:03] <Tene> this wouldn't be the first time I've completely missed the point.

[19:05] <diakopter> it's not unconstructive. My statements need clarification.

[19:05] <Tene> Yes.  I figure, if I'm misunderstanding, others probably will also, and this seems like an important topic.

[19:05] <diakopter>  <@Tene> So, all of those other languages that don't let you use Perl 5 are also not useful?

[19:06] <diakopter> Yes, insofar as they are proposed as a drop-in Perl 5 replacement (or successor)

[19:07] <Tene> That's not what you said at all originally. ><

[19:07] <diakopter> but my point is that Perl 6 *must not* be proposed as being able to replace Perl 5 for anything.

[19:07] <diakopter> ...*without* also including all of Perl 5 capability.

[19:08] <diakopter> by "originally", which sentence do you mean

[19:08] <Tene> So Perl 6 should be proposed as only being good for things that Perl 5 is incapable of doing?  That's kind of absurd.

[19:08] <Tene> 11:50 < diakopter> I'm refusing to give in to the notion that any Perl 6  implementation that doesn't make all of Perl 5 available is  not useful

[19:08] <diakopter> yes, and I corrected that

[19:08] <diakopter> the final "not useful" should have been "useful"

[19:09] <diakopter> that was a typo/thinko

[19:09] <Tene> Right.

[19:09] <diakopter> <@Tene> So Perl 6 should be proposed as only being good for things that Perl 5 is incapable of doing?  That's kind of absurd.

[19:09] <diakopter> yes, IFF someone tries to propose Perl 6 as a *replacement* for Perl 5.

[19:10] <diakopter> however, in that question, you (and I) are (again) confusing language and implementation/installation.

[19:11] <diakopter> let me try to explain.

[19:11] *** eternaleye left
[19:12] <Tene> Wait, are you just trying to persuade people of "Someone (unspecified) should go work on Perl 5 interop right now, and if you don't, you're doing it wrong, and everything else you're working on is useless."?

[19:12] <Tene> Or some variant of that?

[19:13] <diakopter> ok, I won't explain

[19:13] <Tene> Sorry, I think I'm confused again.

[19:13] <Tene> I'll wait.

[19:14] <Tene> I'm sorry if I've offended.

[19:19] <diakopter> (back from afk)

[19:20] <mberends> gotta go, happy 2010 everyone o/

[19:21] *** mberends left
[19:21] <diakopter> As conceived at the time of Apocalypse 1 (and still written in Synopsis 1), Perl 6 was intended to replace /usr/bin/perl

[19:22] <diakopter> (and to do that, it had to be specified to maintain backward compatability with "Perl 5 mode")

[19:23] <diakopter> That requirement in Synopsis 1 is absolutely crucial.  An implementation must be planned with it in mind.

[19:25] <diakopter> an explanation of "is crucial": without it, a Perl 6 implementation cannot be a "drop-in substitute".

[19:25] <diakopter> (and so it must be installed in $PATH/perl6 or whatever)

[19:25] <Tene> And the consequence of it not being a "drop-in substitute" is... what?

[19:26] <diakopter> it's not to spec

[19:26] <diakopter> so it's very different than the Creator intended

[19:27] <diakopter> capitalization ^ lighthearted metaphor

[19:27] *** douglashunter joined
[19:27] <Tene> None of the implementations so far have been entirely to spec.  The parts of the spec that have bee nworked on so far are the parts important to the people doing the work.

[19:27] <diakopter> sure

[19:27] <Tene> I can't see it happening any other way, unless someone comes up with mountains of cash.

[19:28] <diakopter> pugs did it.

[19:28] <Tene> "Pugs did v5 interop" is a very different assertion from "pugs had people working on tasks they didn't care about"

[19:29] <Tene> Pugs had v5 interop because Pugs had implementors who cared about v5 interop enough to work on it.

[19:29] <diakopter> "what people care about" isn't entirely up to invisible forces inside one's head.  it can be influenced by rational decisions, too.

[19:29] <Tene> That's right, and "But the spec says so" doesn't seem like a persuasive argument for anyone here.

[19:29] <Tene> So, again: 12:25 <@Tene> And the consequence of it not being a "drop-in substitute" is...  what?

[19:30] <diakopter> which is why my notes.txt emphasizes to clarify that point in Synopsis 1.

[19:30] <diakopter> either the spec needs clarified that it's crucial, or it needs dropped

[19:30] <Tene> There are lots of things in all of the synopses.  Why is this point so much more critical than all of the other items that aren't completely implemented?

[19:31] <diakopter> because it's so utterly different from what was originally imagined/designed.

[19:31] <Tene> I'm sorry.  Can you rephrase that?

[19:31] <diakopter> having "use v5" was meant to provide a way to use v5 CPAN while porting/upgrading/transitioning

[19:32] <Tene> Okay.

[19:32] <Tene> I don't see how that addresses my question at all, sorry. :(

[19:33] <diakopter> without integrated access to CPAN, a partial Perl 6 release won't be used in any of the scenarios originally intended.

[19:33] <diakopter> used/tested/experimented

[19:33] <diakopter> it'll just be a new language

[19:33] <diakopter> it loses its Perl lineage.

[19:34] <Tene> Most of the current implementors seem to be comfortable with a new language.  I still haven't seen arguments to persuade that this should be more important.

[19:34] <diakopter> ok, but that's very different from what the spec says.

[19:34] <Tene> This isn't the bible.  It's not like Rakudo needs to inherit a birthright. :)

[19:34] <Tene> 12:30 <@Tene> There are lots of things in all of the synopses.  Why is this point so much more critical than all of the other items that aren't completely implemented?

[19:36] <diakopter> because it's one of the biggest tasks.  and resources are extremely limited.

[19:36] <Tene> "New Language in the Perl Family" seems to be what many people are saying these days.  ref masak/mst

[19:36] <diakopter> ok, and that's fine, but the spec therefore needs updated to clarify the change in intent and use cases

[19:36] <Tene> What use would interop with v6 be to v5 if v6 isn't sufficiently implemented on its own to be worth using?

[19:37] <diakopter> another rhetorical question that indirectly supports my points.

[19:37] <diakopter> resources are extremely limited.

[19:37] *** SmokeMachine left
[19:37] <diakopter> so yes, there would be a tradeoff.

[19:37] <Tene> That supports your assertion that "someone" should stop working on implementing v6 itself and instead work on providing interop?

[19:38] <Tene> I don't see how that follows.

[19:38] <diakopter> but the definition of "sufficiently implemented on its own to be worth using" is what's under discussion.

[19:38] *** pmurias left
[19:41] <Tene> I'm sorry if I've missed it, but looking back I don't see an answer.  What do you assert is the reason that existing implementors should now prioritize Perl 5 interop over "producing a usable, nice, attractive language on its own" (as the existing implementors seem to see the situation)?

[19:41] <diakopter> if "use v5" is not going to be removed from Synopsis 1 and others, then yes, that should be a top priority.  Note that in my notes.txt document I claimed that would change implementations strategies a lot.

[19:41] <diakopter> Tene: it's conditional

[19:41] <diakopter> it's conditional on whether Perl 6 is spec'd to be "beside" a Perl 5 installation, or a drop-in-replacement.

[19:42] <Tene> Okay, but *why* should that be a top priority over other parts of the spec?

[19:42] <diakopter> because it's one of the biggest tasks.  and resources are extremely limited.

[19:42] <diakopter> (as I said above)

[19:42] <Tene> I must be missing something.  Let me re-read this for a while.

[19:42] <Tene> I really, really don't see how that's an answer at all.

[19:43] <diakopter> if it's not a necessary task, that's fine.

[19:43] <Tene> brb

[19:43] <colomon__> I'm with Tene on this.

[19:43] <Su-Shee> but along those lines you could easily argue that because it's such a big task and because ressources are extremely limited all base features to get proper p6 modules up and running should be implemented first.

[19:43] <diakopter> I'm just looking for an answer as to whether it's necessary.

[19:43] <colomon__> necessary for what?

[19:43] <diakopter> for the "finished" goal.

[19:44] <diakopter> if there's no "finished" goal, I'm with furry_marmot

[19:45] <Tene> Okay, so pretend I'm an implementor.  I'm sitting here, working on Rakudo.  I ask you "Why should I contribute my limited resources to v5 interop instead of the parts that are important to me?", and your answer is "Because it's the biggest task!", right?

[19:46] <diakopter> no.

[19:46] <Tene> Okay, then that answer should contain the part that I'm missing, I hope.

[19:46] <diakopter> my answer is to follow the suggestions in notes.txt first.

[19:48] <diakopter> actually, first, I'd say, 'Why do you ask me "Why should I contribute my limited resources to v5 interop instead of the parts that are important to me?", since I didn't say that to you, Mr. Rakudo Developer?'

[19:48] <Tene> 12:42 <@Tene> Okay, but *why* should that be a top priority over other parts of the spec?

[19:48] <Tene> 12:42 < diakopter> because it's one of the biggest tasks.  and resources are extremely limited.

[19:48] <diakopter> right, I wasn't addressing Rakudo

[19:49] <diakopter> (to the exclusion of mildew, vill, etc)

[19:49] <colomon__> Tene: but if you follow his other suggestions, the first thing to do is to abandon Rakudo...

[19:49] *** partisan left
[19:49] *** hicx174 left
[19:49] <Tene> diakopter: I'm confused... who is that document addressed to?

[19:49] <diakopter> Larry

[19:50] <diakopter> as I stated in the commit message

[19:50] <diakopter> and the Perl 6 Project Manager

[19:50] <diakopter> (as I stated in the commit message)

[19:50] <diakopter> I did not suggest abandoning Rakudo.

[19:51] <diakopter> there are much higher priority tasks.

[19:52] <diakopter> besides, Larry couldn't "abandon Rakudo".  The suggestions are directed at Larry.

[19:52] <Tene> So then your assertion is not "Existing contributers to Perl 6 implementations should be persuaded to work on v5 interop" but instead "'Someone' should do ... <notes.txt> and then 'someone' will start work on a Perl 6 implementation that includes v5 interop"?

[19:52] <Tene> s/Someone/Larry/

[19:53] <Tene> Again, please tell me if I'm wildly incorrect.

[19:54] <diakopter> it's wildly incorrect.

[19:54] <Tene> Okay.

[19:54] <diakopter> the notes.txt document doesn't presume what Larry's answer will be to the "whether v5 interop/substitute is crucial" question.

[19:55] <diakopter> (except where it does assume it won't change for the backend points)

[19:55] <diakopter> (binding with libperl, etc)

[19:55] *** chromatic joined
[19:56] <chromatic> I don't think anyone understands what you want, diakopter.  That's why we're all confused.

[19:56] <Tene> Nothing else in the spec is listed as "crucial", but would be a more-significant omission than v5 interop.  OO.  Regexes.

[19:57] <diakopter> I want the things in notes.txt.  A. Eliminate the psychological roadblocks to attracting a horde of eager Perl 6 implementors and contributors and fanchildren. B. Bring together the highly fractured/fractious implementation communities and their implementations. C. Repair the "useless implementation" and "unusable language" perceptions.

[19:58] <Tene> chromatic: Maybe we should ask Lerry to condense it into a series of documents explaining the details, and how the suggestions are to be implemented. :)

[19:58] <chromatic> No one knows what you mean by "useless implementation" and "unusable language".

[19:58] *** araujo joined
[19:58] <chromatic> Sometimes it seems like you think Perl 5 interop is necessary and sometimes it doesn't.

[19:59] <chromatic> No one knows what you mean by "fractured implementation communities".

[20:00] <chromatic> Per my recollection, about four people have tried to rephrase what you've said into specifics, and every time you've said "No, that's not quite it."

[20:02] <Tene> chromatic: I did get that part.  He wants either: "Larry declares that v5 interop is unnecessary and v6 is not a replacement" or "larry declares that v5 interop is an extremely important requirement"

[20:02] <Tene> diakopter: right?

[20:02] <diakopter> < chromatic> No one knows what you mean by "useless implementation" and "unusable language".   C. in the lower portion refers to C. in the upper portion.

[20:02] <diakopter> Tene: that's accurate

[20:02] <diakopter> thank you

[20:03] <Tene> I'm getting it! :)

[20:03] <chromatic> What does "extremely important" mean?

[20:03] <diakopter> definitively necessary

[20:03] <chromatic> What does "necessary" mean?

[20:03] <diakopter> to the "finished" goal

[20:03] <chromatic> Necessary for what?

[20:03] <chromatic> What does "finished" mean?

[20:04] <diakopter> "where Perl 6 will be someday/eventually"

[20:04] <chromatic> When is "someday"?  When is "eventually"?

[20:04] <diakopter> indeterminate

[20:04] <chromatic> Then what's the point?

[20:04] <diakopter> it's a question about whether it'll ever be a goal.

[20:04] <Tene> My understanding is "Any reasonable implementation should either: start work on v5 interop immediately, or determine that v5 interop is infeasible and abandon their project for an implementation working on v5 interop".

[20:04] <chromatic> It's been a goal for the past nine years.

[20:05] <chromatic> Why wouldn't it be a goal?

[20:05] <Tene> Is that right, diakopter?

[20:06] <diakopter> Don't ask me... I think it should be a goal.

[20:07] <diakopter> but if it's infeasible, then Perl 5 doesn't have much future, per se (as such, as a "Perl")

[20:07] <rjbs> It doesn't?

[20:07] <diakopter> SIGH

[20:07] <diakopter> <-- types badly

[20:07] <Tene> "True Perl"

[20:07] <diakopter> but if it's infeasible, then Perl 6 doesn't have much future, per se (as such, as a "Perl")

[20:07] <rjbs> It doesn't?

[20:07] <chromatic> Let's not get into that Perl 5 versus Perl 6 marketing nonsense.

[20:08] <diakopter> I don't see how it's [whatever it is you refer to by " ... marketing nonsense"] is nonsense?

[20:09] <chromatic> Because I don't like the "Let's all dance around holding hands, la la la, and ignore real problems in both Perl 5 and Perl 6 development, isn't it nice, you stupid Ruby jerks!" song and dance as of late.

[20:09] <chromatic> But that's the nonsense I want to avoid.

[20:09] <diakopter> oh good, me too.

[20:09] <diakopter> hopefully I wasn't doing that

[20:09] <chromatic> Can we assume, for the sake of this discussion, that Perl 6 will succeed or fail on its own merits?

[20:09] <chromatic> I don't think you were, but I want to avoid that before it even starts.

[20:10] <chromatic> That is, assume there are a million current active Perl 5 programmers, however you define "active" and "Perl 5 programmer", and maybe another million people who have programmed in Perl 5.

[20:10] <diakopter> I'm fairly certain the contents of notes.txt should have made it clear I want to focus on the problems and not ignore them.

[20:10] <chromatic> That leaves some 6.5 billion people who haven't programmed Perl 5 who may or may not program Perl 6.

[20:11] <diakopter> these are tasty numerals

[20:11] <chromatic> It's not that I don't care about those 2 million people, but that I care about the other 6.5 billion people some 3000 times more.

[20:12] <diakopter> look, I'm sometimes indulge in a messiah complex, but ... isn't that stretching it a little?

[20:12] <diakopter> *I

[20:13] <diakopter> I mean, "what?"

[20:13] <chromatic> In the next hundred years, will orders of magnitudes more people find themselves programming?  I find that likely.

[20:14] <Tene> This goes back to diakopter's earlier request that if Perl 6 is meant to be a "new language in the perl family", that v5 interop should be deemphasized explicitly in S01.

[20:14] <chromatic> Okay, but I don't understand the rationale of doing so.

[20:14] <Tene> I'm still lost on what that would accomplish, though.

[20:14] <diakopter> I'll grant you 1 decimal order of magnitude for sake of discussion, sure.

[20:15] <Tene> Something to do with "Finished", I think?

[20:15] *** perlygatekeeper left
[20:16] <diakopter> < chromatic> Can we assume, for the sake of this discussion, that Perl 6 will succeed or fail on its own merits?   As opposed to what?

[20:16] <chromatic> Whether it can steal sheep from Perl 5.

[20:16] <diakopter> that's exactly the question (whether it would never need to steal sheep)

[20:16] <Tene> diakopter: as opposed to the primary metric for success or failure being conversion of current P5 programmers.

[20:16] *** pdcawley left
[20:16] <chromatic> I like my phrasing better, because it gets rjbs's attention and then he talks in funny voices.

[20:17] <diakopter> who needs to be converted?

[20:17] <diakopter> if v5 interop is a feasible goal, why would anyone need converted

[20:17] <rjbs> Hm hey what?

[20:17] <chromatic> There's your marketing question though.  "Why would anyone use Perl 6?"

[20:18] <diakopter> I mean, this isn't the Reorganized Church of the Former-Day Monks

[20:18] <chromatic> Some vocal people have rejected the obvious (and, admittedly, simplistic) "Because Perl 5 will die after Perl 6 comes out."

[20:19] <diakopter> I thought that belief was generally rejected years ago

[20:19] <chromatic> Some people agree and others disagree with "Because it's a better language for (insert my current purposes) than any other language."

[20:20] <chromatic> That definition of "better" can include "installed on my machine already", "has great documentation", "the neighbor kid will help me use it", but in this sense, "because it has great libraries already available".

[20:21] <chromatic> Note, for example, Ruby adoption in English-speaking countries from 2000 through early 2006.

[20:21] <chromatic> Or Tcl in its entire history.

[20:21] <chromatic> Or Lisp before CL.

[20:21] <chromatic> (Or CL after CL.)

[20:22] <diakopter> sure, Perl 6 without "use v5" has its distinctives, compared to both Perl 5 and the other languages.

[20:23] <chromatic> But what we're talking about now is an *adoption* criterion.

[20:23] <diakopter> yes

[20:23] <chromatic> You can take "I can't use Perl 6 if it doesn't have DBI!" on its face, or understand its deeper meaning.

[20:23] <diakopter> (go on)

[20:24] <chromatic> On its face, it means someone needs to port the DBI module.

[20:24] <chromatic> Its deeper meaning is that everyone probably has some existing code they would like to reuse.

[20:25] <diakopter> yes

[20:25] *** sjohnson sets mode: +o diakopter

[20:25] <chromatic> Here's where the marketing nonsense comes in.

[20:26] *** ChanServ sets mode: -o diakopter

[20:26] <chromatic> Is p5 interop a gateway to p6?

[20:26] *** pdcawley joined
[20:26] <chromatic> No one wants to touch that question because of its implications.

[20:26] <diakopter> do you mean an adoption pathway?

[20:27] <chromatic> Lots of ways to mean it.

[20:27] <chromatic> Possibility 1) The most important reason people use Perl 5 is because of existing code, not any inherent quality of the language itself.  Thus, reusing that code with a better language is an improvement.

[20:27] <diakopter> "there is no hard & fast specification for interoperability/compatibility with installations of the Perl 5 implementation, so any paths to migration and adoption imagined by potential implementors/contributors are extremely speculative and often contradictory, which is a deterrent."

[20:28] <chromatic> The implication is that *rewriting* that existing code is an eventual goal, even if never realized.

[20:28] <chromatic> Possibility 2) Perl 6 has to compete with Perl 5 (for whatever "compete" means) on the basis of its available libraries.

[20:29] <chromatic> The implication there is that the stability and maturity of an implementation matters only insofar as it enables people to write the most beneficial libraries.

[20:29] <diakopter> yeah.  I believe (2) is a failure path

[20:29] <chromatic> Whichever one you choose determines what you mean by "production ready" and "stable" and "finished".

[20:30] <diakopter> ok.. what's the mapping

[20:30] <chromatic> You can actually choose a middle path between the two, however.

[20:31] <chromatic> Make a new Phalanx 2010.  Call that representative.  (Beware of sheep stealing!)

[20:31] <chromatic> Make an effort to port those to native Perl 6.

[20:31] <chromatic> Also concentrate on sufficient interop to support 80% of the rest of the Phalanx top 1000.

[20:32] *** douglashunter left
[20:32] <diakopter> that'd be great if we had more than about 10 FTEs

[20:32] <chromatic> That'd probably be instructive to support approach #1, too.  "These extensions are *unnecessary* in a brave new world."

[20:32] <s1n> diakopter: i finally read that rakudo * release response you linked earlier today

[20:32] <chromatic> Sure, but I already mentioned that contributor time, energy, interest, and ability isn't fungible.

[20:32] <diakopter> brb

[20:32] <s1n> diakopter: i must agree, it was a very well worded response

[20:35] <s1n> i think what holds perl6 back is a lack of a blessed implementation, there's nothing to rally behind except the most complete implementation of the moment, of which there have been several now

[20:36] *** PZt left
[20:36] <rjbs> I'm not sure what you mean by "holds back."

[20:36] <s1n> rjbs: from gaining further acceptance

[20:36] <Tene> rjbs: There are people who would contribute to or use Perl 6 if there were a blessed implementation who instead have not contributed to or used.

[20:37] <s1n> look at all the people working on perl5 code, imagine what perl6 would be like if they felt there was a blessed implementation to work with

[20:37] <rjbs> Can you defined "blessed" a bit more, and can you cite your evidence?

[20:37] <chromatic> That sounds... difficult to prove.

[20:37] <s1n> look at CPython as an example

[20:37] <s1n> there are many like it, but that one is "blessed" by the community

[20:38] <rjbs> So: people use it because people use it?

[20:38] <diakopter> how does the non-fungibility of human resources affect it?  Yes, we need 10 autrijus tangs or 5000 of me.

[20:38] <s1n> no, people use it because it's the accepted "gold standard"

[20:38] <rjbs> by whom?

[20:38] <rjbs> the community?

[20:38] <s1n> the community

[20:38] <rjbs> meaning: people use it

[20:38] <chromatic> Audrey works on what Audrey wants.  diakopter works on what diakopter wants.  chromatic works on what chromatic wants.  The Venn diagram is instructive.

[20:38] <s1n> the community agrees there is one primary implementation

[20:38] <chromatic> CPython also matches the current Python specification 100%.

[20:38] <s1n> that's the difference

[20:39] <rjbs> but they way they agree is *by using it*

[20:39] <rjbs> they don't have a vote, then use the one they voted on; usage IS the vote

[20:39] <s1n> chromatic: there are others that do too, i think US does as well

[20:40] <diakopter> chromatic: I see your point; are you saying rational persuasion is futile?

[20:40] <s1n> rjbs: that's kind of a circular argument; look at it however you want, there is one such implementation everyone in the python community rallies around and agrees is the definitive implementation

[20:40] <s1n> that keeps the community solid and working towards a common goal

[20:41] <rjbs> My point is that you started with this circular argument.

[20:41] <diakopter> (or more leadership from Larry wouldn't be helpful?)

[20:41] <rjbs> Also isn't CPython the original?

[20:41] <s1n> more or less

[20:41] <chromatic> I'm not saying rational persuation is futile, but that there are limits to what you can persuade people to do rationally.

[20:41] <chromatic> Larry knows this better than almost anyone else I've ever met.

[20:42] <rjbs> So people think it's standard because for ages it was all there was.

[20:42] *** LionMadeOfLions left
[20:42] *** xomas left
[20:42] *** pugs_svn left
[20:42] *** mdxi left
[20:42] *** hugme left
[20:42] *** Infinoid left
[20:42] *** kcwu left
[20:42] *** cj left
[20:42] *** dbrock left
[20:42] *** REPLeffect_ left
[20:42] *** dukelet0 left
[20:42] *** mtve left
[20:42] *** zamolxes left
[20:42] *** akl left
[20:42] *** RichiH left
[20:42] *** tomaw_ left
[20:42] <chromatic> Larry performs simulated community annealing to meet his goals, and that tends to meet the goals the community wishes to meet.

[20:42] <s1n> then he should know that a spec without an implementation is just pissing into an ocean of piss

[20:42] <rjbs> Okay, I think I'm going to do something fun now.

[20:42] <diakopter> s1n: that wasn't constructive

[20:42] <s1n> no it wasn't, sorry

[20:43] <s1n> but i would like everyone to rally around an implementation, be it rakudo or something else

[20:43] * diakopter too

[20:43] <Tene> You have to allow for a certain amount of unconstructive griping in discussions like this, and ignore and move past it.  I do it too.  Not a problem.

[20:43] <s1n> so outsiders don't have to learn what "rakudo" is and can just refer to it as "perl6"

[20:44] <chromatic> What's the point of the specification then?

[20:44] <diakopter> english explanation of the test suite.

[20:44] <s1n> i don't have a good answer to that, but i can explain what i have seen in the last 2 years of following perl6

[20:45] *** tomaw_ joined
[20:45] <s1n> i haven't been around forever, but a spec without some sort of blessed implementation leaves people asking "great, but where's the interpreter?"

[20:45] *** wormphlegm joined
[20:45] <chromatic> Okay, let's try this again.

[20:46] * diakopter resets _everything_

[20:46] <chromatic> What does some imprimatur on an implementation bestow that we don't currently have?

[20:46] <chromatic> (Also, what does that imprimatur provide that the specification doesn't?)

[20:46] <s1n> something to use

[20:47] <s1n> something to write code against that you know will work (if allowable by the spec)

[20:47] <diakopter> a "reference implementation" tag, I think you mean

[20:47] <s1n> something the community can put their weight into and move forward faster

[20:47] <s1n> diakopter: thank you

[20:48] <chromatic> Okay, so Larry says the magical sentence "You know, Rakudo's coming along nicely", and magical candy-dropping unicorns fly overhead.

[20:48] <s1n> no, not enough

[20:48] <s1n> more like Larry says "this (rakudo) is perl6"

[20:49] <chromatic> ... and then magical candy-flavored unicorns?

[20:49] <diakopter> in my opinion, though, it provides a stronger mandate for people such as myself, pmurias, mberends, ruoso, mncharity, fglock to work on interoperable software (in the same project) instead of mutually conflicting/competing software.

[20:49] <s1n> sure, that and it's a rally point

[20:49] <chromatic> http://rakudo.org/status/

[20:49] <s1n> you have like 5 different implementations all chasing their tails

[20:49] <s1n> and perl5 people saying "where's the interpreter?"

[20:49] *** pdcawley left
[20:49] <s1n> don't you think if everyone working towards one goal will gain momentum faster?

[20:50] <chromatic> Maybe those implementors should take a look at 1) how much of the specification they pass 2) how many other people they have working with them 3) their ability to add new features and fix bugs and perform some risk/reward analysis on their own.

[20:50] <diakopter> where's the graph of percent coverage of the specification by the test suite?

[20:50] <s1n> it's not the candy and unicorns you're looking for, but it's the first major hurdle in moving forward

[20:51] <s1n> people will go to perl.com and see "ooo look, perl6"

[20:51] <s1n> then maybe you get more rakudo contributors or more modules

[20:51] <s1n> maybe someone redoes cpan finally

[20:51] <chromatic> Well.

[20:51] <s1n> but you have to have a starting rally point

[20:52] <chromatic> I'm sorry, but after 24 monthly releases of Rakudo and 80% passing test suite, if that's not a rally point, you're not paying attention.

[20:52] <s1n> the spec is not that, it's beyond most people's ability to contribute to

[20:52] <rjbs> "Hey, everybody who was writing another Perl 6 implementation?  Your work is now officially less cared about!"

[20:52] <diakopter> my point is valid.

[20:52] <chromatic> What point?  That everybody jumps when Larry says so?  That Larry ever says so?

[20:52] <diakopter> where's the graph of percent coverage of the specification by the test suite?  and the rakudo coverage percentage of that, over time

[20:53] <s1n> well, larry is the benevolent dictator

[20:53] <chromatic> Where's the graph of any implementation's coverage percentage of that, over time?

[20:53] <chromatic> Have you ever seen Larry dictate where people spend their time?  Ever?

[20:53] *** SmokeMachine joined
[20:53] *** REPLeffect_ joined
[20:53] *** zamolxes joined
[20:53] *** akl joined
[20:53] *** dukelet0 joined
[20:53] *** mtve joined
[20:53] <s1n> none of that coverage stuff matters to outsiders

[20:53] <s1n> they look at perl6 and say "oo an incomplete spec and no official implementation..... hmm python looks interesting"

[20:54] <chromatic> Pull my other leg.  It has bells on.

[20:54] <diakopter> chromatic: sure, those graphs don't exist

[20:54] <rjbs> {{citation needed}}

[20:54] <diakopter> but that would be a much more persuasive metric

[20:54] <rjbs> (For example, I would accept a photos of the bells.)

[20:55] <chromatic> Show me that willing army of fungible implementors turned off by the lack of the simple word "official" in front of the word "Rakudo" on a web page somewhere.

[20:55] *** LionMadeOfLions joined
[20:55] *** xomas joined
[20:55] *** dbrock joined
[20:55] *** cj joined
[20:55] *** kcwu joined
[20:55] *** mdxi joined
[20:55] *** Infinoid joined
[20:55] *** pugs_svn joined
[20:55] *** hugme joined
[20:55] *** irc.freenode.net sets mode: +vv pugs_svn hugme

[20:55] <s1n> chromatic: i would, but they all moved on to python, javascript, scala, etc...

[20:55] <chromatic> Yes, and this paperweight keeps away tigers.

[20:56] <chromatic> Because do you see any tigers in my office?  QED.

[20:56] <chromatic> (And, quick, which Javascript implementation is "official"?)

[20:56] <s1n> okay, this isn't productive, i'll keep my mouth shut then

[20:57] <s1n> there isn't, whacky huh? but at least there are dozens of working implementations

[20:57] <chromatic> You don't have to keep your mouth shut.  I just doubt magical thinking.

[20:57] <diakopter> chromatic: my point is that "80% passing test suite" is, at best, misleading.

[20:57] <chromatic> Misleading to what?

[20:57] <s1n> chromatic: why, because the last 10 years of thinking has worked?

[20:57] <diakopter> let's add a few billion more generated tests, and we can reach 5 nines

[20:58] <chromatic> I can point to actual code and actual tests and actual passing tests you can run right now.  Your army of fungible polyglot implementors... well, show me a picture of one.

[20:58] <s1n> passing tests are totally meaningless to potential users

[20:58] <diakopter> you haven't addressed my claim that "80% passing test suite is misleading"

[20:58] <chromatic> Misleading to what?

[20:59] <Tene> diakopter: What soes "80% passing tests" assert that is untrue?

[20:59] <diakopter> nothing, technically.

[20:59] <Tene> ...

[20:59] <Tene> s/assert/imply/ ?

[20:59] <diakopter> but it implies that the test suite is somewhere close to complete

[20:59] <chromatic> Oh, your claim that users care about the presence or absence of the word "official" or "blessed" or "reference" as a primary criterion for selecting a language.

[20:59] <chromatic> Ah.

[20:59] <s1n> it's 80% passing of the spec that is maybe 65-70% complete? how does that percentage convince potential users and contributors exactly?

[20:59] <chromatic> Convince potential users of WHAT exactly?

[21:00] <s1n> using a non-existant official implementation

[21:00] <diakopter> I daresay it's nowhere close to 65-70% complete

[21:00] <rjbs> It tells them that there are a lot of tests, which make it much easier to hack on the program.

[21:00] <chromatic> Okay.  Now what does that magical candy-flavored pony word "official" mean here?

[21:00] <s1n> put yourself in the shoes of someone who has used perl5 before and hasn't followed the perl6 circus

[21:00] <rjbs> The notion that the implementation is 80% of the way done to completing the entire language is a problem.

[21:00] <s1n> you stumble on these charts, with passing tests count

[21:00] <rjbs> I agree that the "80% of tests pass" often gets the wrong point across.

[21:01] <s1n> are they convincing enough to start using .... which implementaton?

[21:01] <rjbs> I don't think anybody picks a language to used based on its core test suite.

[21:01] <s1n> exactly

[21:01] <chromatic> Ruby programmers don't.

[21:01] <rjbs> So why are you talking about it?

[21:01] <s1n> i'm saying the charts are meaningless

[21:01] <rjbs> They're not meaningless.

[21:02] <s1n> what are they good for then?

[21:02] <rjbs> They just don't mean "how much of Perl 6 The Language is actually implemented"

[21:02] <chromatic> I have my doubts that a programmer who can't tell that Rakudo's 80% passing rate is better than (let's make up an implementation) Omaha-9's 20% passing rate is better is a representative sample of language adoption.

[21:02] <rjbs> they tell you exactly what they say they tell you:

[21:02] <diakopter> "look, we don't enough resources to write/generate our test suite, but we can do trigonometry computations 1e5x slower than Perl

[21:02] <diakopter> "

[21:02] <chromatic> Why don't you fix that then?

[21:02] <rjbs> Of the large number of existing core tests, how many does the implementation pass?

[21:02] <rjbs> This is useful information.

[21:02] <diakopter> chromatic: I can't :(

[21:02] <chromatic> Guess you're not fungible then.

[21:02] <rjbs> Also useful is the actual test report, showing you *which* parts pass ro fail.

[21:03] <s1n> rjbs: that's useful, but it's not so much the charts...

[21:03] <diakopter> that's fine... that's what division of labor and good project mgmt is for.

[21:03] <s1n> i was referring to the pretty charts and the percentages

[21:03] <rjbs> The charts also show you the rate of change over time, which gives you an at-a-glance to the implementation's activity.

[21:04] <rjbs> Is it passing more of the existing tests, meaning it's getting active work, is it falling behind the curve? 

[21:04] <chromatic> Note that every specific metric rjbs has mentioned gives much more practical detail than the words "official" or "reference" or "blessed" or "alpha" or "stable".

[21:04] <rjbs> They're not a tell-all.  They're just not *meaningless*.

[21:04] <diakopter> what does rakudo-ng's test graph look like

[21:04] <s1n> rjbs: dead to rights

[21:05] <rjbs> If I wanted to open myself up to frowning-at here, I would say this of the whole thing:

[21:05] <Tene> rjbs: :( !!!

[21:06] <rjbs> Perl 6 is not going to be ready for many people to do "their jobs" with it for quite a while.  I think the key is getting the cutting edge people really excited and interested, so that when R* and similar releases of Perl 6 occur in the future, those people play with them for fun in their spare time.

[21:06] *** PZt joined
[21:06] <chromatic> Sounds reasonable to me.

[21:06] <rjbs> I think Perl 6, and rakudo especially, are now useful for solving some real problems, but more to the point they're great at demonstrating the strength of Perl 6 as a language.

[21:06] <s1n> i actually agree with that, sadly

[21:06] <rjbs> so the goal has to be "hey, you early adopters!  come check this stuff out"

[21:07] <rjbs> and then keep things steadily improving so they don't lose interest

[21:07] <s1n> that makes rakudo the unofficial impl though

[21:07] <rjbs> and eventually the early adopter types will produce some tools that are really useful to the muggles

[21:07] <diakopter> we're steadily approaching heat death, too.

[21:07] <s1n> muggles, lol

[21:07] <rjbs> "unofficial" is meaningless here.

[21:08] <s1n> diakopter: heat death?

[21:08] <rjbs> We don't need a reference implementation because there is a specification and (to be) comprehensive test suite.

[21:08] <Tene> s1n: eh?

[21:08] <Tene> unofficial what how?

[21:08] <diakopter> s1n: I'm Feeling Lucky it

[21:08] <rjbs> Many people, language fetishists especially, will use Rakudo because it's first to market.

[21:08] <chromatic> "unofficial" is super meaningless.  You want "How to download Perl 6" and "How to install Perl 6" documentation?  Tell people how to download and install whichever implementation is most useful for them.

[21:08] <rjbs> Other people will be drawn to other implementaitons because of what they offer.

[21:09] <rjbs> Imagine Sprixel in JS was much closer to complete and you could write Perl 6 to run in the browser.  Try to tell me the weird hardcore JS guys wouldn't be abusing the hell out of it.

[21:09] <diakopter> I doubt it

[21:09] <rjbs> If someone got Pugs working well enough to manage your window orientation in "monad," people would start doing weird shit.

[21:10] <Su-Shee> we will use whatever implementation is first "ready to use" in our company's needs definition and we (subjectively) consider the best one for the next 10 years of our perl stuff.

[21:10] <rjbs> I think Rakudo is likely to be first among equals, at least for quite a while.  "Official" just gets you nothing, as far as I can tell.

[21:10] <chromatic> "Official" is an easy way to shame people for forking.

[21:11] <s1n> i'm just stoking the embers, hopefully the next 10 years of perl6 goes better than the last

[21:11] <rjbs> Official matters more when there's an office.

[21:11] <chromatic> I have an office and there's a lion in it.

[21:11] <Tene> but if they fork, they're not helping!  they should be shamed!

[21:11] <rjbs> because they don't let unofficial employees collect paychecks.

[21:11] <diakopter> chromatic: I hope you don't think _I_ was endorsing the "official" label.

[21:12] <chromatic> I don't care who endorses the "official" label.  I argue against the idea, not the person or persons advocating it.

[21:12] <rjbs> (the o13n of rakudo)

[21:13] <diakopter> back to what I said, then.

[21:13] <diakopter> in my opinion, though, it provides a stronger mandate for people such as myself, pmurias, mberends, ruoso, mncharity, fglock to work on interoperable software (in the same project) instead of mutually conflicting/competing software.

[21:14] <rjbs> "it"?

[21:14] <chromatic> "same project"?

[21:14] <chromatic> You mean the "official" moniker?

[21:14] <rjbs> I think he means the lack of it.

[21:14] <rjbs> where same project == Perl 6

[21:14] <rjbs> but maybe he will tell us if I stop talking

[21:14] <chromatic> Do the funny voices!

[21:15] <diakopter> "it" being a project selected/constructed from a result of doing the analysis I recommended.

[21:15] <rjbs> 3Do you have change for a rupee?

[21:15] <chromatic> Henchman #23!

[21:15] <chromatic> sorry, 24... I'll be quiet now.

[21:16] * rjbs would rather be Two-Ton 21.

[21:16] <diakopter> I would like to work together with all of you in a more organized/concerted way, and [I assume] there are others who have some of the same concerns I expressed in notes.txt that are preventing that.

[21:17] * s1n agrees with diakopter even though i don't have time to contribute until i graduate :(

[21:18] * rjbs is pretty sure he has zero commits in any Perl-6-related thing.

[21:18] <rjbs> I just hang out here for the free food.

[21:18] *** colomon__ left
[21:18] <diakopter> my [recent change in my] degree of felt urgency is due to... wanting to "recover"/justify a lot of my (and others') sunk costs.

[21:19] <Tene> diakopter: eh?  howso?

[21:20] <diakopter> I'd rather my efforts not be in vain, so I'd like to work on something that has a higher expectation of success than I can assign it currently.

[21:21] <Tene> diakopter: Does that mean "increase the expectation of success of the projects I've worked on"?

[21:21] <diakopter> with the problems described in A.B.C. unresolved, it's fun and all, but risky.  I have opportunity costs, too.

[21:22] <diakopter> Tene: sure, if it's deserved.

[21:22] <diakopter> I mean, earned/merited.

[21:22] <diakopter> er, valid.

[21:22] <s1n> diakopter: i'm not sure i follow what you're saying

[21:22] <diakopter> sigh

[21:23] * s1n apologizes for being obnoxious

[21:24] <diakopter> I was describing my emotional motivation.  I tried to leave it out of notes.txt, but failed somewhat.

[21:24] <s1n> i guess i missed the notes.txt

[21:24] <diakopter> but I do believe my rational motivation/explanation has merits

[21:24] <diakopter> s1n: there's a lot of backlog

[21:25] <Tene> diakopter: given your feelings on the subject, why did you personally start working on a new implementation instead of contributing to an existing implementation?

[21:25] <Tene> (just curious)

[21:25] <diakopter> which time? ;)

[21:26] <Tene> If there are different motivations for the different times, I'd like to hear all of them.

[21:28] <diakopter> brb

[21:28] <s1n> diakopter: i've had motivation problems as well, i even decided that now is not the time for me to actively work on perl6, but not because of perl6's woes

[21:29] * rjbs is really hoping to do some more Inform programming soon.

[21:29] <rjbs> That should garner lots of attention! :-/

[21:30] *** cognominal left
[21:33] *** stephenlb joined
[21:36] *** cognominal joined
[21:37] *** Intensity joined
[21:38] <diakopter> Tene: I'm working on my latest effort in a NIH-driven attempt to reimplement nqp-rx-style grammars (and eventually fully STD-style grammars).  Prior to that, sprixel was an experiment to test out the general "feel" of the speed of a JS backend for STD/viv.  Prior to that, I wrote an implementation of Microsoft's MGrammar grammar language (but which owes a lot to my earlier experimenting with what I called "yap6", which was itself an evolution of MJD's re

[21:39] <Tene> diakopter: cut off after "MJD's re..."

[21:39] <diakopter> MJD's recursive descent combinator system from HOP).  I tried quite a few times to build a development environment for parrot/rakudo, smop/mildew, but I never really succeeded with those.

[21:39] <Tene> diakopter: http://scripts.irssi.org/scripts/splitlong.pl

[21:41] <diakopter> to actually answer your question, however:

[21:44] <diakopter> a few years ago, I was averse to working on parrot/perl6 because of what I perceived to be bad architecture in parrot, not to mention my own total lack of experience/ability to contribute.

[21:44] <diakopter> really, the question only applies to the last 6 months or so.

[21:47] <diakopter> better stated, my answers regarding solely the last 5 months matter.

[21:47] <diakopter> 6

[21:47] <Tene> So what are those answers?

[21:47] <diakopter> there's that 5<->6 confusion again

[21:47] <diakopter> the above description of what I'm working on now, and sprixel.

[21:48] *** orafu left
[21:48] *** orafu joined
[21:48] <diakopter> what I'm working on now, to have a C# implementation of nqp-rx/STD-style grammars, sprixel, to feel out a JS interpreter backend to STD/viv.

[21:50] <s1n> diakopter: is there a c# impl for parrot?

[21:51] <diakopter> "for" parrot?

[21:51] <s1n> diakopter: or are you targetting something else?

[21:51] <Tene> s1n: There's a .net bytecode translator.

[21:51] <s1n> Tene: interesting

[21:51] <diakopter> it targets the cli, either CLR or mono.

[21:51] <diakopter> it compiles to CIL.

[21:51] <Tene> s1n: last I heard, it's incomplete, but just needs the rest of the opcode definitions filled out, which jnthn didn't seem to think was too much work.

[21:52] <Tene> s1n: jnthn also wrote one for jvm bytecode, iirc

[21:53] <s1n> jnthn must not sleep :/

[21:53] <Tene> I haven't seen any C# compilers for Parrot.

[21:53] <Tene> s1n: I think there's a presentation about it on his website...

[21:54] <Tene> http://jnthn.net/papers/2007-oscon-net2pir-slides.pdf looks like

[22:12] *** ejs joined
[22:16] *** SmokeMachine left
[22:21] *** ejs left
[22:22] *** simcop2387_ joined
[22:25] *** jferrero left
[22:25] *** jferrero joined
[22:27] *** RichiH joined
[22:30] *** simcop2387 left
[22:53] *** hicx174 joined
[22:59] *** partisan joined
[23:06] *** xomas left
[23:07] *** xomas_ joined
[23:13] *** Su-Shee left
[23:25] *** mj41 joined
[23:30] *** mj41_ left
[23:39] *** Nhelo joined
