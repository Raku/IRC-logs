[00:01] *** Caelum left
[00:04] *** lichtkind left
[00:04] *** DemoFreak left
[00:05] *** Caelum joined
[00:14] *** tann_ joined
[00:14] *** tann left
[00:21] *** bacek left
[00:22] *** frew joined
[00:27] *** s1n1 joined
[00:46] *** mikehh left
[01:18] <amoc> eval: say 'may i test'

[01:18] <amoc> rakudo: say 'again'

[01:18] <p6eval> rakudo 1b06df: OUTPUT«again␤»

[01:18] <amoc> rakudo: say 'again 2'

[01:18] <p6eval> rakudo 1b06df: OUTPUT«again 2␤»

[01:21] *** kst left
[01:22] *** kst joined
[01:27] *** agentzh left
[01:31] *** cotto left
[01:38] *** netfish joined
[01:42] *** twigil joined
[01:47] *** mycelium joined
[01:49] *** molaf_xx joined
[01:49] *** synth joined
[01:51] *** molaf_x left
[01:56] *** payload left
[02:02] *** dukeleto joined
[02:04] *** amoc left
[02:07] *** amoc joined
[02:08] *** jonathanturner joined
[02:11] *** agentzh joined
[02:34] *** amoc__ joined
[02:35] *** amoc__ is now known as am0c

[02:44] *** amoc left
[02:45] *** tann_ left
[02:48] *** ihrd left
[02:48] *** cotto joined
[02:52] *** am0c left
[02:52] *** amoc joined
[02:53] *** cotto left
[02:57] *** kst left
[02:58] *** kst joined
[03:01] *** meppl joined
[03:07] *** azawawi joined
[03:07] <azawawi> hi

[03:07] <phenny> azawawi: 21 Jun 21:07Z <japhb> tell azawawi In http://ahmadzawawi.blogspot.com/2009/06/padres-perl-6-support-and-ecliptic.html, the last bullet point is incorrect: "Use of C++ constructor syntax (in Perl 6 new Foo should be written Foo->new)."

[03:07] * azawawi scratches his head

[03:08] *** cotto joined
[03:11] *** netfish left
[03:13] *** frew left
[03:14] <Tene> azawawi: wh?

[03:14] <Tene> eh?

[03:16] *** agentzh left
[03:16] <azawawi> Tene: what's wrong in my last bullet point in your opinion? 

[03:17] *** agentzh joined
[03:17] <Tene> It should be Foo.new instead of Foo->new, yes?

[03:18] <azawawi> lol

[03:18] <azawawi> i just woke up

[03:18] <azawawi> thanks

[03:18] <Tene> can you quick fix it?

[03:18] <Tene> ;)

[03:20] *** donaldh left
[03:20] <azawawi> done

[03:20] *** donaldh joined
[03:20] <azawawi> japhb: thanks. fixed :)

[03:22] <azawawi> Tene: now it is time to continue creating quick fixes for more popular STD errors/warnings.

[03:28] <azawawi> so once grok is ready, i think the process of tying STD error reporting to Perl 6 documentation would be very interesting.

[03:29] *** frew joined
[03:35] *** frew left
[03:40] *** s1n1 left
[03:40] *** justatheory left
[03:42] *** meppuru joined
[03:42] *** meppl left
[03:42] *** meppuru is now known as meppl

[03:44] *** alester joined
[03:56] <azawawi> std: "abc" ~~ //;

[03:56] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Null regex not allowed at /tmp/xAegvdquFJ line 1:␤------> [32m"abc" ~~ //[31m;[0m␤FAILED 00:04 36m␤»

[03:57] <azawawi> what's a good quick fix to null regex "abc" ~~ // ?

[04:04] <amoc> rakudo: Block.does(Code).say

[04:04] <p6eval> rakudo 1b06df: OUTPUT«1␤»

[04:07] <awwaiid> azawawi, your nick is the closest to mine as any I've ever seen!

[04:08] <azawawi> cool

[04:11] <Tene> azawawi: why would someone try to match against //?

[04:12] <azawawi> Tene: im going through all of STD's errors/warnings and im trying to find quick fixes for them

[04:13] <azawawi> Tene: so if a user types a null //, what possible fixes is there?

[04:14] <Tene> in Perl 5, // means "the most-recent successful match"

[04:14] <Tene> That doesn't exist in Perl 6, afaik.

[04:14] *** twigil left
[04:14] <TimToady> which is /<prior>/

[04:14] <Tene> Ah.

[04:14] <Tene> As a special case, // in 'split' means "split on every character"

[04:15] <japhb> TimToady: Oh sure, have all the answers.

[04:15] <Tene> so you could look to see if it's being used in 'split'

[04:15] <TimToady> otherwise you want /<?>/ or some such

[04:15] <Tene> and suggest '' as an alternate

[04:15] <TimToady> '' works in split

[04:15] <Tene> can you check for 'split' in your quick fix thing?

[04:16] *** twigil joined
[04:16] <azawawi> Tene: only if std warns/panics about it atm

[04:18] <azawawi> TimToady: i cannot replicate "Precedence too loose within ??!!; use ??()!! instead ".  my Perl $foo is weak :)

[04:20] *** kst left
[04:21] *** kst joined
[04:22] <azawawi> Tene: anything that generates warnings/errors can be a possible source for quick fixes (like PerlCritic for instance)

[04:22] <Tene> compile time only, or runtime also?

[04:24] <azawawi> Tene: currently, compile time.

[04:25] <azawawi> Tene: but there is no reason not to extend it to runtime also (in debugging mode for instance)...

[04:28] <azawawi> Tene: for instance we can quick fix a file that has trailing whitespace, hard tabs, inconsistent new lines,...

[04:33] <amoc> rakudo: multi sub infix:<,> { ... }

[04:33] <p6eval> rakudo 1b06df:  ( no output )

[04:34] <amoc> rakudo: multi sub infix:<,> { ... }; say "foooo~~"

[04:34] <p6eval> rakudo 1b06df:  ( no output )

[04:36] <azawawi> moritz_: any idea how to find a regex for a Perl 6 identifier?

[04:36] *** skids left
[04:38] <azawawi> std: eval { };

[04:38] <p6eval> std 27168: OUTPUT«ok 00:02 36m␤»

[04:40] <azawawi> TimToady: regarding eval { }; should STD warn about it? see S04-control, ...Perl 6's C<eval> function only evaluates strings, not blocks.

[04:40] <azawawi> rakudo: eval { }

[04:40] <p6eval> rakudo 1b06df: OUTPUT«Parameter type check failed on call to 'eval'.␤in Main (/tmp/dwbqAuIcXH:2)␤»

[04:40] <azawawi> rakudo: eval { };

[04:40] <p6eval> rakudo 1b06df: OUTPUT«Parameter type check failed on call to 'eval'.␤in Main (/tmp/VDG6FGmOnn:2)␤»

[04:40] <azawawi> rakudo: eval "";

[04:40] <p6eval> rakudo 1b06df:  ( no output )

[04:41] <azawawi> rakudo seems to handle it better

[04:43] *** azawawi left
[04:47] *** nihiliad left
[04:48] <eternaleye_> std: 42 ?? 1,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6;

[04:48] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Precedence too loose within ??!!; use ??()!! instead  at /tmp/SKCgZbyi2t line 1:␤------> [32m42 ?? 1[31m,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6;[0m␤    expecting any of:␤ POST␤   infix or meta-infix␤        infix or meta-infix (with precedence tighter than item

[04:48] <p6eval> ..assignment)…

[04:49] <eternaleye_> phenny: tell azawawi std: 42 ?? 1,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6; # re Precedence too loose within ??!!

[04:49] <phenny> eternaleye_: I'll pass that on when azawawi is around.

[04:49] *** eternaleye_ is now known as eternaleye

[04:50] <eternaleye> (grep'able backlogs)++ (postgres \o command)++

[04:52] <amoc> rakudo: 42 ?? 1,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6;

[04:52] <p6eval> rakudo 1b06df: OUTPUT«Ternary error␤»

[04:54] <eternaleye> rakudo: 42 ?? ( 1,2,3 Z 4,5,6 ) !! ( 1,2,3 X 4,5,6 );

[04:54] <amoc> rakudo: 1 ?? 1,2 !! 1,2

[04:54] <p6eval> rakudo 1b06df:  ( no output )

[04:54] <p6eval> rakudo 1b06df: OUTPUT«Ternary error␤»

[04:55] <eternaleye> rakudo: say( 1 ?? 1,2 !! 1,2 )

[04:55] <p6eval> rakudo 1b06df: OUTPUT«Ternary error␤»

[04:55] <eternaleye> rakudo: say 42 ?? ( 1,2,3 Z 4,5,6 ) !! ( 1,2,3 X 4,5,6 );

[04:55] <p6eval> rakudo 1b06df: OUTPUT«142536␤»

[04:58] <amoc> "," has looser precedence then '??', '!!'. but it doesn't handle the error properly.

[05:00] <twigil> can somebody help me with parrot? it says "parrot revision r39599 required"

[05:01] <amoc> twigil: what are you trying to do?

[05:03] <amoc> if you are compiling rakudo, just type "perl ./Configure --gen-parrot" then "make".

[05:03] <twigil> the problem is that the machine i'm doing it on doesn.t have a direct connection to the internet

[05:07] <twigil> maybe i should get the newest version from svn

[05:10] <Tene> twigil: the issue is that the rakudo you have requires a newer parrot than you have

[05:11] <twigil> Tene: thanks

[05:27] *** alester left
[05:34] *** finanalyst joined
[05:36] *** jjore_ joined
[05:37] *** jjore_ left
[05:38] *** jjore_ joined
[05:41] *** justatheory joined
[05:46] *** twigil left
[05:49] *** meppl left
[05:49] *** twigil joined
[05:52] *** justatheory left
[06:01] *** wormphlegm left
[06:06] *** kst left
[06:07] *** kst joined
[06:11] *** rfordinal left
[06:11] *** rfordinal joined
[06:32] *** pmurias joined
[06:34] *** rfordinal left
[06:40] *** user` joined
[06:41] *** user` left
[06:42] <Matt-W> eww 419 scam in RT

[06:46] *** twigil left
[06:47] <moritz_> moved one to the spam queue, thanks

[06:56] *** rfordinal joined
[06:56] *** pmurias left
[07:03] *** viklund joined
[07:03] *** wayland76 joined
[07:03] *** iblechbot joined
[07:04] <moritz_> rakudo: class A { }; say A.new() === A.new();

[07:04] <p6eval> rakudo 1b06df: OUTPUT«0␤»

[07:07] <moritz_> rakudo: class A { }; say A.new().WHAT === A.new().WHAT;

[07:07] <p6eval> rakudo 1b06df: OUTPUT«1␤»

[07:17] *** baest joined
[07:20] *** donaldh left
[07:21] *** donaldh joined
[07:35] *** ejs joined
[07:38] *** rfordinal left
[07:40] *** beggars joined
[07:42] *** azawawi joined
[07:42] <azawawi> hello

[07:42] <phenny> azawawi: 04:49Z <eternaleye_> tell azawawi std: 42 ?? 1,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6; # re Precedence too loose within ??!!

[07:43] <azawawi> eternaleye: thx

[07:43] <azawawi> std: 42 ?? 1,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6;

[07:43] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Precedence too loose within ??!!; use ??()!! instead  at /tmp/WKIVxdegxO line 1:␤------> [32m42 ?? 1[31m,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6;[0m␤    expecting any of:␤ POST␤   infix or meta-infix␤        infix or meta-infix (with precedence tighter than item

[07:43] <p6eval> ..assignment)…

[07:46] *** kst left
[07:46] *** kst joined
[07:47] *** DemoFreak joined
[07:51] *** ejs left
[07:52] *** barney joined
[07:54] <amoc> azawawi: the error is the right behavior according to S03. but rakudo just dies. #66840

[07:58] *** hanekomu joined
[07:58] *** hanekomu left
[07:58] *** eMaX joined
[08:01] *** rfordinal joined
[08:01] *** rfordinal left
[08:02] *** azawawi left
[08:03] <eternaleye> std: 1 ?? 1, 2 !! 3, 4;

[08:03] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Precedence too loose within ??!!; use ??()!! instead  at /tmp/Cnnizs0gTs line 1:␤------> [32m1 ?? 1[31m, 2 !! 3, 4;[0m␤    expecting any of:␤    POST␤   infix or meta-infix␤        infix or meta-infix (with precedence tighter than item assignment)␤     

[08:03] <p6eval> .. infix stopper␤    po…

[08:04] *** masak joined
[08:04] <eternaleye>  H H   masak

[08:04] <eternaleye> O   AI

[08:04] <masak> ahoj, scurvy parrotcamels!

[08:05] <moritz_> oh hai

[08:05] <moritz_> masak: I filled your role yesterday :-)

[08:06] <masak> moritz_: I would expect nothing less. :)

[08:06] <masak> moritz_: seems we'll have a second-ever #perl6-soc meeting on Wednesday 19:00 UCT, me and literal++.

[08:07] <moritz_> masak: I'll join, unless I forget it. Feel free to ping me on #perl6

[08:07] <masak> goodie.

[08:07] *** azawawi joined
[08:07] <masak> I'll announce it shortly before, so others who might have forgotten can join, too.

[08:08] <azawawi> masak: Hello captain :)

[08:09] <moritz_> masak++

[08:09] <masak> azawawi: I'm not the captain, just one of the first mates. :)

[08:09] <azawawi> masak: so who's the captain here then? :)

[08:09] <masak> azawawi: who could it be? :)

[08:10] * azawawi wonders :)

[08:10] <moritz_> perl6 is a fleet, not just a ship

[08:10] <masak> an armada.

[08:10] <moritz_> obra_ used to be the admiral

[08:10] <azawawi> the borg... :)

[08:11] <moritz_> TimToady, pmichaud, ruoso are certainly captains of their ships

[08:12] <azawawi> so how can i match a perl 6 identifier in p5 regex correctly?

[08:12] <azawawi> i need it to change new Foo-Bar::C to Foo-Bar::C.new

[08:12] <masak> azawawi: is "identifier" here limited to namespaces?

[08:13] <azawawi> masak: just a quick hack to get "Use Perl 6 constructor instead of C++'s" quick fix working correctly

[08:14] <masak> is that a yes? :)

[08:14] <azawawi> yeah

[08:14] <masak> I'd imagine peeking in STD.pm and/or Rakudo's parser.pg might help here.

[08:14] * moritz_ tries: (?:pL|_)w*(?:(?=pL|_)['-'(?:pL|L)w*)*

[08:15] <masak> o_O

[08:15] <azawawi> that's really complicated :)

[08:15] <moritz_> sorry,  (?:\pL|_)\w*(?:(?=\pL|_)['-](?:\pL|L)\w*)*

[08:15] <masak> Perl 5 is scary... :/

[08:15] <masak> at least use /x :P

[08:16] <azawawi> it is easy to write it in Perl 6 :)

[08:16] * azawawi tries it...

[08:17] <masak> is Pair parametrized like Hash?

[08:18] <moritz_> good question

[08:21] *** beggars left
[08:24] <azawawi> moritz_: thx and i think i need to extract that info from STD directly which would make it more robust and predictable than regex replacements

[08:26] *** ejs joined
[08:26] <moritz_> :-)

[08:31] <masak> I'm back to thinking about grok and about naming/classifying/storing things.

[08:31] <masak> people are encouraged to help me think this through.

[08:31] <masak> as an example, I'm trying to enumerate all instances of '+' in the Perl 6 grammar.

[08:32] *** ejs left
[08:32] <masak> there's the binary op, and the prefix (numifying) op...

[08:32] <azawawi> masak: im thinking of going simple and adding topic labels/tags like in blogs...

[08:32] *** ejs joined
[08:32] <masak> azawawi: yes. that sounds right. I hope to be able to co-opt Pod to do that.

[08:33] <masak> and then there's a postfix '+' in the grammar slang.

[08:33] <masak> I don't know how the latter is classified.

[08:33] <masak> STD.pm calls _something_ assertion:sym<+>. it might be that one.

[08:34] <masak> no, wait. it's gotta be quantifier:sym<+>.

[08:34] <masak> wonder what the assertion thing is.

[08:35] <azawawi> masak: like i said going simple :)

[08:35] <masak> yes, I'm all for simple too. that's my default design criterion. :)

[08:36] *** zamolxes left
[08:36] <masak> but I think using the grammatical categories of STD.pm would be a good way to label things.

[08:36] <masak> we need to do that anyway, to separate the different forms of operators.

[08:38] <azawawi> one thing while looking at STD, it does not go deeper than a literal; so it does not say this is a decimal_literal or a hex_literal...

[08:40] <azawawi> moritz_: when will rakudo be able to run STD.pm? what is stopping it at the moment?

[08:40] <masak> azawawi: I believe protoregexes is one big blocker.

[08:40] <masak> STD.pm uses them liberally.

[08:41] *** meppl joined
[08:42] <moritz_> and LTM

[08:43] <masak> oh, right.

[08:43] <masak> azawawi: I bet the Rakudo ROADMAP details the things missing quite well.

[08:45] <moritz_> btw 1) I compiled parrot and rakudo with clang on llvm. it works when configured --without-gmp, but a few tests fail

[08:46] <moritz_> 2) when I add Perl 6 multis of operators the setting, I get a Null PMC Acess in find_method

[08:50] <azawawi> std: eval { };

[08:50] <p6eval> std 27168: OUTPUT«ok 00:02 36m␤»

[08:50] <azawawi> rakudo: eval "this is right";

[08:50] <p6eval> rakudo 1b06df:  ( no output )

[08:51] <azawawi> is eval a routine (part of the settings)?

[08:55] <masak> azawawi: I sense a slight confusion of terminology in your question.

[08:55] <masak> azawawi: eval is a sub AFAIK, and hence a routine.

[08:56] <masak> azawawi: it's more common to talk about 'the setting' in singular, and I'm not sure it's specified what's part of it. by my understanding, that's up to individual implementations.

[08:57] <masak> in the case of Rakudo, eval is not in the setting.

[08:57] <masak> it's defined in src/builtins/control.pir

[08:58] <azawawi> masak: you sensed right :)

[08:58] <masak> (which, by the way, surprises me every time. I'd think a much likelier candidate would be src/builtins/eval.pir)

[08:58] <azawawi> rakudo: eval { }; 

[08:58] <p6eval> rakudo 1b06df: OUTPUT«Parameter type check failed on call to 'eval'.␤in Main (/tmp/lWAie5uf7g:2)␤»

[09:00] <moritz_> that's now written as try { ... };

[09:01] <moritz_> rakudo: multi eval(Int $a) { say $a}; eval 3;

[09:01] <p6eval> rakudo 1b06df:  ( no output )

[09:02] <azawawi> i know but shouldnt STD/rakudo flag it as an error or something?

[09:02] <moritz_> azawawi: it's a run time error

[09:02] <azawawi> moritz_: from S04, ...Perl 6's eval function only evaluates strings, not blocks

[09:02] <moritz_> which STD.pm doesn't handle in any way, and rakudo does ist (mostly) correctly

[09:03] <moritz_> azawawi: right, that's why you gute a "Parameter type check" failure

[09:03] <moritz_> azawawi: the parser doesn't know about eval, and doesn't have to

[09:03] <azawawi> moritz: i get it

[09:03] * azawawi hits his forehead

[09:06] <moritz_> it seems today is the first day of YAPC::NA

[09:06] *** eMaX left
[09:06] <masak> moritz_++ # work on '...' operator

[09:07] <azawawi> @karma

[09:07] <lambdabot> You have a karma of 160

[09:07] <moritz_> masak: today I also tried to add multis for infix:<eqv> (which is already parsed), same failure

[09:07] *** eMaX joined
[09:07] <masak> @karma

[09:07] <lambdabot> You have a karma of 224

[09:08] <moritz_> http://yapc10.org/yn2009/talk/2101 "Expect the unexpected." - like, a complete Perl 6 implementation?

[09:08] <masak> moritz_: yes, multis are not quite there yet.

[09:10] <moritz_> it severly limits the usefulness of the setting, sadly

[09:16] <moritz_> I think we've reached the point where most built-ins that can easily be written as subs and methods are already implemented

[09:16] <masak> some kind of saturation. maybe.

[09:16] <moritz_> next should be operators (blocking on said error) and implementation types

[09:16] <masak> a few things are eagerly awaiting laziness. :)

[09:17] <moritz_> I don't know what you need to get implementation types done

[09:17] *** bsb joined
[09:19] <moritz_> masak: btw I saw your Druid+3D post. VeryB cool.

[09:19] <moritz_> s/B//

[09:19] <masak> :)

[09:19] <masak> I should have done that long ago.

[09:19] <masak> there's nothing especially tricky involved.

[09:20] * viklund wonders why S02 is so looong

[09:21] <moritz_> viklund_: because it explains the syntax, not just "bits and pieces"

[09:21] <masak> maybe we should rename it.

[09:21] <masak> S03, S05, and S06 are almost as long.

[09:23] <viklund> I decided I should read all the synopses at least once

[09:23] <viklund> I'm halfway through S02 now

[09:23] <masak> I did that when I was home for Christmas.

[09:24] <masak> boy, have things happened since then.

[09:24] <masak> I remember feeling a sincere urge to update S29 at the time.

[09:24] <masak> that was before S32.

[09:24] <viklund> ;)

[09:24] <masak> I bet S32 is still incomplete, by the way.

[09:28] <viklund> incomplete in what sense?

[09:28] <masak> viklund: that things mentioned in the rest of the synopses are missing in S32.

[09:28] <masak> that's only a feeling, though.

[09:28] <viklund> ok, that's what I thought you meant

[09:30] *** payload joined
[09:30] *** viklund_ left
[09:31] *** kst left
[09:32] *** kst joined
[09:35] *** viklund left
[09:55] *** bacek joined
[10:08] *** synth left
[10:26] *** bacek left
[10:30] *** bacek joined
[10:42] *** Whiteknight joined
[10:59] *** mizioumt joined
[11:02] <masak> after the latest discussion on Str and Buf, can we say anything more about .pack and .unpack?

[11:02] <masak> should .unpack only be defined on Buf?

[11:03] <moritz_> presumably, yes

[11:03] <moritz_> and pack() should return a Buf

[11:03] <masak> right.

[11:03] *** b_jonas joined
[11:04] <masak> could there be an .unpack() method on Str, if that Str knows how it was encoded, or if the encoding is provided as an argument?

[11:04] *** aindilis left
[11:04] <moritz_> you mean one that does the same as $str.encode.unpack?

[11:05] <masak> essentially, yes.

[11:05] <masak> maybe that's overkill.

[11:05] *** gabiruh left
[11:05] <moritz_> the more I think about Perl 6 design the more I regret that multi dispatch doesn't have to consider named arguments

[11:05] <moritz_> they'd make some things so much neater

[11:06] *** mycelium left
[11:07] <masak> moritz_: I looked through STD today. seems it uses multi dispatch on named arguments.

[11:08] <moritz_> masak: have an example?

[11:08] *** zpmorgan joined
[11:09] <masak> moritz_: aye, the things starting at line 4809.

[11:09] <masak> that's multiple declarations of the method 'tweak', each with a different named parameter.

[11:09] <moritz_> aye

[11:10] <masak> (also, with a useless/inecplicable comment on top)

[11:10] <masak> "begin tweaks" -- yes, I can see that.

[11:10] <moritz_> that might be for gimme5

[11:10] <masak> oh.

[11:11] <masak> it's definitely some kind of magic.

[11:12] <moritz_> TimToady: see discussion above. multi method tweak(:$named_param) (found in STD.pm:4809) is not a requirement for Perl 6 - is it some kind of temporary hack?

[11:13] <masak> moritz_: your suspicion about gimme5 seems correct. on line 667 it matches against 'multi method tweak'.

[11:14] <moritz_> ok

[11:14] <b_jonas> heh

[11:14] <b_jonas> I just found an old quote from this channel on irseek

[11:14] <moritz_> please share

[11:14] <b_jonas> from 2007-01-27

[11:15] <b_jonas> "TimToady:  cbstream.rb is the irc gateway that's feeding PerlMonks' chatterbox to #cbstream on freenode."

[11:15] <b_jonas> "TimToady:  anyway, the implicit cbstream.rb challenge is at http://www.perlmonks.org/?node_id=596867"

[11:15] <b_jonas> "TimToady:  seems like a good chance to see how async {...} works"

[11:15] <b_jonas> "TimToady:  and, of course, to show how much prettier Perl 6 is... :)"

[11:16] <b_jonas> of course, since then it's become easier to write this kind of thing in perl5 because now Coro is more stable and there are three Coro-able http client modules, unlike when I started to write cbstream 

[11:17] <b_jonas> I'm still unsure what language I shall use when I rewrite cbstream (it's a long-term plan only, vaporware)

[11:17] <b_jonas> probably whatever I fancy when I actually start rewriting it

[11:18] <araujo> http://hpaste.org/fastcgi/hpaste.fcgi/view?id=6143#a6143

[11:18] <araujo> tiny stack based language i am working on

[11:18] * araujo just got quicksort working!

[11:18] <b_jonas> how does that work?

[11:19] <araujo> b_jonas, you mean?, the flow of the computation?

[11:19] <b_jonas> no, the language

[11:19] <araujo> oh

[11:19] <b_jonas> what do those punctuation mean

[11:19] <araujo> it is a stack based language

[11:19] <b_jonas> the %% and &% and &

[11:19] <araujo> right

[11:19] <araujo> it is what i call ... operator-message composition

[11:19] <b_jonas> + appends two arrays, right?

[11:19] <araujo> correct

[11:20] *** donaldh left
[11:20] <araujo> so, % is an operator that means 'dup' or duplicate the value in the stack

[11:20] <araujo> so

[11:20] <araujo> %%head means , dup dup head

[11:20] <araujo> & is swap

[11:20] <araujo> and so on

[11:20] <b_jonas> oh

[11:21] <b_jonas> and what does the (<) o do?

[11:21] *** iblechbot left
[11:21] <b_jonas> wait, I think o is composition

[11:21] <araujo> the language is what I call .. a stack based object oriented language

[11:21] <b_jonas> and you push that function for filter?

[11:21] <araujo> correct b_jonas !

[11:21] <b_jonas> or something

[11:21] <araujo> correct

[11:21] <b_jonas> but what's bk then

[11:22] <araujo> what i am about to explain

[11:22] <araujo> the language works with blocks

[11:22] <b_jonas> oh, it's postscript-like

[11:22] <araujo> like the smalltalk blocks 

[11:22] <b_jonas> so you can just use a constant 

[11:22] *** donaldh joined
[11:22] <araujo> blocks are units of delayed computations

[11:22] <b_jonas> and composing means making a function of two executable objects

[11:22] <b_jonas> makes sense

[11:22] <araujo> right

[11:22] <araujo> :)

[11:22] <b_jonas> funny

[11:23] *** kst left
[11:23] *** kst joined
[11:23] <b_jonas> and how does the definition part works? is it the dot that assigns the function to the name qsort or something?

[11:23] <araujo> blocks are kind of delayed computations delayed ... they are also the way to define 'functions' and stuff

[11:23] <araujo> correct b_jonas 

[11:23] <araujo> qsort [ .... ] .

[11:24] <araujo> the [ ] is multi-line block

[11:24] <b_jonas> does this still work if qsort already has the same value?

[11:24] <araujo> the ( ) is single-line block

[11:24] <araujo> they are the same

[11:24] <b_jonas> or so you have to quote qsort in that case?

[11:24] <b_jonas> hmm, [] and () is the same?

[11:24] <b_jonas> strange

[11:24] <araujo> yeah, because of the nature of the language

[11:24] <araujo> well

[11:25] <araujo> [ ] is for multi-line

[11:25] <araujo> ( ) single line

[11:25] <araujo> you can get that quicksort example in a single line with ( )

[11:25] <b_jonas> so how do variables work?

[11:26] *** lichtkind joined
[11:26] <araujo> well, so far ... the language contains what i call links ... it links a stack to a specific name

[11:26] <b_jonas> I don't really like this postscript-like execution when data can just stand in stead of code and is pushed

[11:27] <araujo> i am mixing some ideas here, ideas from stack based languages and object-oriented languages

[11:27] <araujo> everything is an object, and the main object representation is a Stack

[11:27] <araujo> when you say something like:

[11:27] <araujo> qsort [ ] .

[11:27] <b_jonas> so what's the plan? you write an interpreter then put up an evalbot and evangelize everyone to the language by showing with it how some programs can be written more easily in this language? (great way to get kicked out of all channels)

[11:28] <araujo> qsort is a symbol pointing to a stack containing a block

[11:28] *** Whiteknight left
[11:28] <b_jonas> and then... how do you call that function on a list or array or something?

[11:28] <araujo> not really interested to .. evangelize really , just commenting in the channels i know there are people interested on designing languages

[11:28] <b_jonas> how do you even create an array and print it

[11:28] <araujo> i am not really interested on competition , but fun

[11:29] <araujo> like this:

[11:29] <moritz_> araujo++ # very nice attitude

[11:29] <araujo> { 2 3 87 3 4 387 38 2 } qsort

[11:29] <araujo> then you get the list sorted

[11:29] <araujo> moritz_, :)

[11:29] <masak> moritz_: we'll soon be hitting 400 new/open tickets! \o/

[11:29] <azawawi> std: my @a; @a[-1];

[11:29] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Obsolete use of [-1] subscript to access final element; in Perl 6 please use [*-1] instead at /tmp/CGm1vUDph7 line 1:␤------> [32mmy @a; @a[-1][31m;[0m␤FAILED 00:02 38m␤»

[11:30] <azawawi> std: my @a; @a[ -1 ];

[11:30] <p6eval> std 27168: OUTPUT«ok 00:02 38m␤»

[11:30] <moritz_> masak: I'll do my very best

[11:30] <masak> :)

[11:30] <masak> Geburtstag.

[11:30] <azawawi> moritz_: does whitespace matter in [-1]  warning?

[11:30] <azawawi> rakudo: my @a; @a[ -1 ];

[11:30] <p6eval> rakudo 1b06df:  ( no output )

[11:30] <moritz_> I've always wondered if that message doesn't collide with custom array indexes

[11:30] <azawawi> rakudo: my @a; @a[-1];

[11:30] <masak> std: use v5; my $x = 'foo '; $x .= 'bar';

[11:31] <p6eval> rakudo 1b06df:  ( no output )

[11:31] <p6eval> std 27168: OUTPUT«Potential difficulties:␤  Possible obsolete use of .= as append operator; in Perl 6 please use ~= instead at /tmp/rG4gukX47o line 1:␤------> [32muse v5; my $x = 'foo '; $x .= [31m'bar';[0m␤ok 00:02 37m␤»

[11:31] <moritz_> azawawi: it seems to, yes

[11:31] <azawawi> so it is an std bug right? :)

[11:31] <moritz_> I'm not sure.

[11:31] <azawawi> std: my @a; @a[ -1];

[11:31] <p6eval> std 27168: OUTPUT«ok 00:02 38m␤»

[11:32] <azawawi> std: my @a; @a[-1 ];

[11:32] <p6eval> std 27168: OUTPUT«ok 00:02 38m␤»

[11:32] <moritz_> it might be intential

[11:32] <azawawi> std: my @a; @a[ -1 ];

[11:32] <p6eval> std 27168: OUTPUT«ok 00:02 38m␤»

[11:32] <masak> intentional, even.

[11:32] <moritz_> aye :-)

[11:32] <masak> TimToady: bug above?

[11:32] <TimToady> nope

[11:32] <masak> whoa!

[11:32] <azawawi> really? :)

[11:32] <masak> don't sneak up on me like that!

[11:33] <TimToady> which one?

[11:33] <TimToady> the v5 one is unimpl

[11:33] <masak> @a[-1] giving a warning, but not @a[ -1 ]

[11:33] <lambdabot> Unknown command, try @list

[11:33] <TimToady> yes, that's intentional

[11:33] <masak> lambdabot: oh, shut up.

[11:33] <masak> TimToady: what's the rationale?

[11:33] * azawawi listens

[11:33] <moritz_> allowing @a[ -1 ] when custom array indexes are defined?

[11:34] <TimToady> just leaving wiggle room

[11:34] <TimToady> could generalize later when we do more semantic analysis

[11:34] <masak> not sure I understand. wiggle room for making mistakes?

[11:34] <TimToady> but for now, any bogus p5 code will likely use [-1]

[11:35] <moritz_> TimToady: so how's YAPC going?

[11:35] <TimToady> and we're only dealing in probabilities

[11:35] <moritz_> did you alread hold your keynote?

[11:35] <TimToady> I'm still writing my talk, so I shouldn't be here

[11:35] <moritz_> oh :-)

[11:35] <masak> don't let us keep you. :)

[11:35] <TimToady> but if you want to be on the screen in a bit under two hours...

[11:36] <TimToady> in fact, I'm giving a talk about error messages

[11:36] <masak> yes, STD.pm is leading in the field on that.

[11:36] <TimToady> so I might show std: to them

[11:36] <moritz_> uhm, it looks much better on an ordinary terminal

[11:37] <TimToady> I went through all the panics, obs, worrys to see if I could actually produce them

[11:37] <TimToady> so think of it as a down payment on some error testing

[11:37] <masak> TimToady: you should have a test suite or something.

[11:37] <TimToady> what a concept

[11:37] <TimToady> but it's hard for an error message to run itself and spit out "ok"  :)

[11:38] <moritz_> throw some X::Syntax::Redeclaration error objects or whatever

[11:38] <masak> ah, the old 'if you try to fail and fail, what have you done?' paradox.

[11:38] <moritz_> and then type-check

[11:39] <TimToady> moritz_: std does not execute anything, how can it throw? :)

[11:39] <moritz_> TimToady: with die() :-)

[11:40] <moritz_> it won't be catchable from within Perl 6 code for now

[11:40] <masak> I'm running teststd right now. I'm getting a few failures.

[11:40] <moritz_> but from the perl 5 code which runs STD.pm

[11:41] *** payload1 joined
[11:41] *** payload left
[11:44] *** s1n1 joined
[11:45] <moritz_> rakudo: say 1

[11:45] <p6eval> rakudo 1b06df: OUTPUT«sh: ./perl6: No such file or directory␤»

[11:48] *** Whiteknight joined
[11:48] <moritz_> rakudo: sub postfix:<..>(Str $x) { $x.subst(rx{ / <-[/]>+ $ }, '') }; say "/foo/bar/baz"..

[11:48] <p6eval> rakudo 1b06df: OUTPUT«Statement not terminated properly at line 2, near "(rx{ / <-["␤in Main (src/gen_setting.pm:0)␤»

[11:49] <moritz_> rakudo: sub postfix:<..>(Str $x) { $x.subst(rx{ \/ <-[/]>+ $ }, '') }; say "/foo/bar/baz"..

[11:49] <p6eval> rakudo 1b06df: OUTPUT«Statement not terminated properly at line 2, near ".."␤in Main (src/gen_setting.pm:0)␤»

[11:49] <moritz_> hm. ENOLTM (LTM = longest token matching)

[11:49] *** Whiteknight left
[11:49] <moritz_> der probiert das als "string". und dann methodenname zu parsen

[11:49] *** ejs1 joined
[11:50] <moritz_> sorrz, wrong language

[11:50] <moritz_> and wrong channel :-)

[11:50] <moritz_> std: sub postfix:<..>(Str $x) { $x.subst(rx{ \/ <-[/]>+ $ }, '') }; say "/foo/bar/baz"..

[11:50] <p6eval> std 27168: OUTPUT«ok 00:06 50m␤»

[11:51] *** twigil joined
[11:51] <b_jonas> std: sub parentdir(Str $x) { $x.subst(rx{ \/ <-[/]>+ $ }, '') }; say parentdir("/foo/bar/baz")

[11:51] <p6eval> std 27168: OUTPUT«ok 00:04 42m␤»

[11:52] <moritz_> rakudo: sub parentdir(Str $x) { $x.subst(rx{ \/ <-[/]>+ $ }, '') }; say parentdir("/foo/bar/baz")

[11:52] <p6eval> rakudo 1b06df: OUTPUT«/foo/bar␤»

[11:55] *** hanekomu joined
[11:57] <b_jonas> I guess in perl6 you'll be actually able to define a greeting-suffix context so the statement 'good localtime' can work because good evaluates its argument in greeting-suffix context

[11:58] <wayland76> I had a ENOLTM a bit ago too, I suspect; it didn't no proto token whatever rules, and IIRC those depend on LTM :)

[11:59] <azawawi> std: rand(10);

[11:59] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Obsolete use of rand(N); in Perl 6 please use N.rand or (1..N).pick instead at /tmp/XxGfKnF6uX line 1:␤------> [32mrand[31m(10);[0m␤FAILED 00:02 35m␤»

[11:59] *** ejs left
[11:59] <azawawi> std: 1..10..rand;

[11:59] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤".." is not associative at /tmp/1xChtiH2ti line 1:␤------> [32m1..10..[31mrand;[0m␤    expecting any of:␤        infix__S_364DotDot␤       whitespace␤FAILED 00:02 36m␤»

[12:00] <azawawi> std: 1..10.rand;

[12:00] <p6eval> std 27168: OUTPUT«ok 00:02 36m␤»

[12:02] <masak> azawawi: though that parses as 1..(10.rand), methinks.

[12:02] <azawawi> masak: i noticed

[12:03] <b_jonas> I guess so

[12:03] * azawawi prepares another batch of quick fixes for release :)

[12:03] <b_jonas> that's why you have to write (1..10).each in ruby all the time

[12:03] <masak> method-call '.' binds really tightly. I guess that's sane.

[12:04] <b_jonas> yep

[12:04] <b_jonas> and .. has to bind weakly so 1 .. $x - 1 works

[12:04] <moritz_> right

[12:04] <b_jonas> though there you'd just write 1 ..^ $x of course

[12:05] <moritz_> that's what I just wanted to write, but b_jonas was faster :-)

[12:05] <b_jonas> but in general you sometimes want + and - stuff

[12:05] <moritz_> b_jonas: note that that's not the same

[12:05] <moritz_> rakudo: say 1..2 ~~ 2.5

[12:05] <azawawi> another interesting whitespace case

[12:05] <p6eval> rakudo 1b06df: OUTPUT«0␤»

[12:05] <azawawi> std: rand( 10 )

[12:05] <moritz_> rakudo: say 1..^3 ~~ 2.5

[12:05] <p6eval> std 27168: OUTPUT«ok 00:02 36m␤»

[12:05] <p6eval> rakudo 1b06df: OUTPUT«0␤»

[12:05] *** s1n1 left
[12:05] <moritz_> uhm, shouldn't the last one say 1 instead?

[12:05] <b_jonas> raduko: 1..5 ~~ 2.5

[12:06] <azawawi> TimToady: rand(10) and rand( 10 ) give different warnings

[12:06] <masak> moritz_: no, I don't think so.

[12:06] <b_jonas> rakudo: 1..5 ~~ 2.5

[12:06] <p6eval> rakudo 1b06df:  ( no output )

[12:06] <moritz_> rakudo: say 1..5 ~~ 2.5

[12:06] <p6eval> rakudo 1b06df: OUTPUT«0␤»

[12:06] <moritz_> rakudo: say 1..5 ~~ 2

[12:06] <p6eval> rakudo 1b06df: OUTPUT«0␤»

[12:07] <moritz_> rakudo: say 2 ~~ 1..5

[12:07] <p6eval> rakudo 1b06df: OUTPUT«1␤»

[12:07] <moritz_> rakudo: say 2.5 ~~ 1..5

[12:07] <p6eval> rakudo 1b06df: OUTPUT«1␤»

[12:07] <moritz_> rakudo: say 2.5 ~~ 1..^3

[12:07] <p6eval> rakudo 1b06df: OUTPUT«1␤»

[12:07] <moritz_> that was the problem

[12:07] <moritz_> the range has to go on the right

[12:07] <moritz_> ("of course" :-)

[12:07] <b_jonas> oh yeah, perl6' ~~ works the other way from ruby's ===

[12:07] <b_jonas> rakuso: 2.5 ~~ 1..2

[12:08] <b_jonas> rakudo: say 2.5 ~~ 1..2

[12:08] <p6eval> rakudo 1b06df: OUTPUT«0␤»

[12:08] <azawawi> std: rand(10)

[12:09] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Obsolete use of rand(N); in Perl 6 please use N.rand or (1..N).pick instead at /tmp/NCBYyoJ49q line 1:␤------> [32mrand[31m(10)[0m␤FAILED 00:02 35m␤»

[12:09] <azawawi> std: rand( 10 )

[12:09] <p6eval> std 27168: OUTPUT«ok 00:02 35m␤»

[12:09] <azawawi> std: rand( 10)

[12:09] <p6eval> std 27168: OUTPUT«ok 00:02 35m␤»

[12:09] <azawawi> std: rand(10 )

[12:09] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Obsolete use of rand(N); in Perl 6 please use N.rand or (1..N).pick instead at /tmp/LmQIg9HwJN line 1:␤------> [32mrand[31m(10 )[0m␤FAILED 00:02 35m␤»

[12:12] * azawawi thinks leading whitespace causes warning to go on/off in rand(10)

[12:13] <azawawi> std: rand (10)

[12:13] <p6eval> std 27168: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/WyLbHPgTte line 1:␤------> [32mrand [31m(10)[0m␤    expecting any of:␤        infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  term__S_296rand␤  terminator␤FAILED 00:02

[12:13] <p6eval> ..36m␤»

[12:16] <moritz_> std: ~ 1

[12:16] <p6eval> std 27168: OUTPUT«ok 00:02 37m␤»

[12:18] <masak> running teststd takes 31 minutes on my machine.

[12:18] <masak> I get failures in 8 test files.

[12:19] <moritz_> I'm looking at these now

[12:19] <moritz_> some of them seem to be reall problems iin STD.pm

[12:19] <moritz_> some are plain sytanx errors

[12:19] <masak> aye.

[12:20] <masak> the one in t/spec//S06-advanced_subroutine_features/stub.t is a member of the former set, I believe.

[12:20] <moritz_> aye

[12:21] *** payload1 left
[12:22] *** ejs1 left
[12:23] <pugs_svn> r27169 | moritz++ | [t/spec] fix some problems found by STD.pm, TimToady++

[12:25] <Matt-W> Afternoon

[12:26] * masak tips hat

[12:32] <wayland76> rakudo: slurp("filename"};

[12:32] <p6eval> rakudo 1b06df: OUTPUT«Statement not terminated properly at line 2, near "(\"filename"␤in Main (src/gen_setting.pm:0)␤»

[12:32] <wayland76> rakudo: slurp("filename");

[12:32] <p6eval> rakudo 1b06df: OUTPUT«Unable to open filehandle from path 'filename'␤in Main (/tmp/Z8xqkrnCfh:2)␤»

[12:33] <moritz_> oh, slurp() is another one that should be forbidden in safe mode

[12:33] *** bacek_ joined
[12:33] <wayland76> Hmm.  Looks like I need to update my rakudo again :(

[12:33] *** Whiteknight joined
[12:33] <wayland76> I was just checking whether it gives a Null PMC access like mine does

[12:34] *** bacek left
[12:36] *** zamolxes joined
[12:37] <wayland76> pmichaud: Regarding the makefile change, can you send me some kind of a link to your branch?  Preferably to somewhere where I can get it in standard diff format, but whatever works for you

[12:37] <wayland76> (I'm presuming here that he backlogs his own handle at least)

[12:39] <moritz_> git checkout origin/ins

[12:39] <moritz_> git diff master

[12:41] *** pmurias joined
[12:48] *** payload joined
[12:49] *** alester joined
[12:53] *** kst left
[12:53] *** kst joined
[12:56] <azawawi> std: (1 == 1) ?? 1 :: 2

[12:57] <p6eval> std 27169: OUTPUT«##### PARSE FAILED #####␤Please use !! rather than :: at /tmp/OzLBOc5wlv line 1:␤------> [32m(1 == 1) ?? 1 [31m:: 2[0m␤    expecting any of:␤     infix or meta-infix␤      infix stopper␤    standard stopper␤ terminator␤FAILED 00:02 36m␤»

[12:57] <azawawi> std: (1 == 1) ?? 1 !! 2

[12:57] <p6eval> std 27169: OUTPUT«ok 00:02 36m␤»

[12:57] <azawawi> std: #(1 == 1) ?? 1 !! 2

[12:57] <p6eval> std 27169: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/Fv7KLlnU9v line 1:␤------> [32m#(1 == 1) ?? 1 [31m!! 2[0m␤    expecting any of:␤      infix or meta-infix␤      infix stopper␤    infix_prefix_meta_operator␤       standard stopper␤ statement modifier loop␤ 

[12:57] <p6eval> ..terminator␤FAILED 00:03…

[12:57] *** s1n1 joined
[12:58] <azawawi> rakudo: (1==1) ?? 1 !! 2

[12:58] <p6eval> rakudo 1b06df:  ( no output )

[12:58] <azawawi> rakudo: #(1==1) ?? 1 !! 2

[12:58] <p6eval> rakudo 1b06df: OUTPUT«Can't use embedded columns in column 1 at line 2, near "(1==1) ?? "␤in Main (src/gen_setting.pm:0)␤»

[12:58] <azawawi> rakudo: # (1==1) ?? 1 !! 2

[12:58] <p6eval> rakudo 1b06df:  ( no output )

[12:58] <azawawi> what's wrong with #(1 == 1) ?? 1 :: 2 ?

[12:59] <azawawi> shouldnt it be a comment?

[12:59] *** eMaX left
[13:00] <azawawi> moritz_: what's wrong with #(1 == 1) ?? 1 :: 2'

[13:00] <azawawi> std: #(1 == 1) ??

[13:01] <p6eval> std 27169: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/U5c7wHQE8M line 1:␤------> [32m[31m[0m␤    expecting noun␤FAILED 00:02 37m␤»

[13:01] <azawawi> std: #(1 == 1) ?

[13:01] <p6eval> std 27169: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/zvHHiyKdAn line 1:␤------> [32m[31m[0m␤    expecting noun␤FAILED 00:02 37m␤»

[13:01] <moritz_> azawawi: no, #( is forbidden at start of line

[13:01] <moritz_> azawawi: because it's ambigous - it could be either a line or a block comment

[13:01] *** alester left
[13:02] <azawawi> moritz_: but the error message was obscure

[13:03] <azawawi> so in perl 6, if i want to "comment error line" quick fix; the best solution is to add a # and then a space before it...

[13:04] <moritz_> azawawi: right

[13:04] <moritz_> (to both)

[13:04] *** frew joined
[13:04] <azawawi> moritz_: where can i find more docs about that?

[13:05] <moritz_> azawawi: S02, I'd assume

[13:06] <masak> S02:166.

[13:07] *** gbacon joined
[13:07] <masak> I've gotten into the habit of commenting out lines with two '##' instead of just one.

[13:07] <dalek> rakudo: 6eb3554 | pmichaud++ | docs/spectest-progress.csv:

[13:07] <dalek> rakudo: spectest-progress.csv update: 404 files, 11532 passing, 4 failing

[13:07] <dalek> rakudo: Failure summary:

[13:07] <dalek> rakudo:     S12-enums/basic.rakudo 27 - short name of the enum without parenthesis is an enum

[13:07] <dalek> rakudo:     S32-num/rand.t aborted 3 test(s)

[13:07] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6eb35549ec9fe7d507ba042c64d315fb0156e93b

[13:07] <masak> every time I do that, I think "well, _I_ don't mind, but boy are people in general going to hate this..."

[13:08] <masak> then again, it's not like I have an alternate solution.

[13:12] *** DemoFreak left
[13:13] <pmurias> TimToady: may i put a .gitignore in src/perl6?

[13:15] <moritz_> somehow the newer GD::Graph versions don't seem to use the full width of the drawing area

[13:19] <dalek> rakudo: 0677565 | moritz++ | tools/progress-graph.pl:

[13:19] <dalek> rakudo: [tools/progress-graph.pl] better label spacing

[13:19] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/0677565135d00bd037b0c1306fe696b079c036c8

[13:19] <masak> moritz_++

[13:20] <masak> I've been looking at the progress graph and thinking about that spacing from time to time. moritz_ JFDIs.

[13:20] <moritz_> actually I've been anoyed for quite some time now.

[13:21] <moritz_> most annoying is that without any option GD::Graph tries to plots *all* captions

[13:21] <pmurias> rakudo: &infix:<\<>

[13:21] <p6eval> rakudo 1b06df:  ( no output )

[13:22] <masak> moritz_: aye, that's an ungood default.

[13:22] *** rjh left
[13:24] *** skids joined
[13:25] *** synth joined
[13:25] *** sitaram joined
[13:27] *** synthEEEE joined
[13:27] <s1n1> masak, moritz_: has there been an effort to use smolder instead?

[13:27] *** s1n1 is now known as s1n_yapc

[13:28] <moritz_> s1n: I think I saw that that on somebody's TODO list

[13:28] <masak> rakudo: class Month {}

[13:28] <p6eval> rakudo 1b06df:  ( no output )

[13:29] <masak> std: subset A of Int;

[13:29] <p6eval> std 27169: OUTPUT«ok 00:02 35m␤»

[13:29] <masak> rakudo: subset A of Int;

[13:29] <p6eval> rakudo 1b06df: OUTPUT«Statement not terminated properly at line 2, near "of Int;"␤in Main (src/gen_setting.pm:0)␤»

[13:29] * masak submits rakudobug

[13:29] *** Whiteknight left
[13:30] *** Whiteknight joined
[13:39] <b_jonas> so how many of you are on that YAPC::NA conference/

[13:39] *** sitaram left
[13:40] * kolibrie is at YAPC::NA

[13:41] * s1n_yapc obviously

[13:41] * moritz_ not, sadly

[13:42] <s1n_yapc> moritz_: if no one is working it, i might be interested

[13:42] * masak also not, also sadly

[13:43] <pmurias> moritz_: will you be at YAPC::EU?

[13:43] *** synth left
[13:44] <azawawi> std: 42 ?? 1,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6;

[13:44] <p6eval> std 27169: OUTPUT«##### PARSE FAILED #####␤Precedence too loose within ??!!; use ??()!! instead  at /tmp/9kk3J7TVFt line 1:␤------> [32m42 ?? 1[31m,2,3 Z 4,5,6 !! 1,2,3 X 4,5,6;[0m␤    expecting any of:␤ POST␤   infix or meta-infix␤        infix or meta-infix (with precedence tighter than item

[13:44] <p6eval> ..assignment)…

[13:44] <moritz_> pmurias: also not, also sadly

[13:44] *** twigil left
[13:44] <azawawi> std: 42 ?? 1,2,3 Z 4,5,6 !! (1,2,3 X 4,5,6);

[13:44] <p6eval> std 27169: OUTPUT«##### PARSE FAILED #####␤Precedence too loose within ??!!; use ??()!! instead  at /tmp/wGnxCKdDpG line 1:␤------> [32m42 ?? 1[31m,2,3 Z 4,5,6 !! (1,2,3 X 4,5,6);[0m␤    expecting any of:␤       POST␤   infix or meta-infix␤        infix or meta-infix (with precedence tighter

[13:44] <p6eval> ..than item assignmen…

[13:44] <pmurias> moritz_: why?

[13:44] <azawawi> std: 42 ?? (1,2,3 Z 4,5,6) !! 1,2,3 X 4,5,6;

[13:44] <p6eval> std 27169: OUTPUT«ok 00:02 37m␤»

[13:44] <masak> moritz_: that _is_ sad. how will we ever meet if you keep not showing up at conventions? :)

[13:45] <moritz_> pmurias: time constraints :(

[13:45] <moritz_> masak: I'll try very hard next year, I promise!

[13:45] <masak> you'd better.

[13:45] <masak> these things add up, you know.

[13:45] <masak> :P

[13:46] <moritz_> and I did show up at german perl workshop '08, and met jnthn

[13:46] *** twigil joined
[13:48] <masak> that's something, I guess.

[13:49] *** bacek_ left
[13:51] *** bacek_ joined
[13:52] *** KyleHa joined
[13:57] *** PacoLinux joined
[14:04] *** meppuru joined
[14:04] <finanalyst> moritz_: i found GD::Graph had problems. are you porting to perl6? 

[14:06] <azawawi> masak: List of new quick fixes so far: http://padre.perlide.org/trac/log/trunk/Padre-Plugin-Perl6/lib/Padre/Plugin/Perl6/Perl6Document.pm?rev=5470

[14:07] <moritz_> finanalyst: no, I'm using to generaate graphs :-)

[14:07] <finanalyst> moritz_: i also tried the procedure on your blog to make an executable. it did not work, even in rakudo directory. 

[14:08] <moritz_> finanalyst: in particular the one on rakudo.de is not wide enough

[14:08] <finanalyst> moritz_: for graphs, i found ploticus to be easier

[14:08] <moritz_> finanalyst: I know, that broke a few days after I posted it :-(.

[14:08] <azawawi> finanalyst: http://rt.perl.org/rt3/Public/Bug/Display.html?id=65994

[14:09] <masak> azawawi: nice! KUTGW.

[14:09] <azawawi> moritz_: not fair, i wrote gui for that :)

[14:10] <masak> no-one said it would be fair.

[14:10] <finanalyst> but precompiling modules into PIR does work!

[14:11] <finanalyst> i really would like some way of generating graphical output from perl6.

[14:12] <finanalyst> presently, i generate a ploticus script, then run it

[14:12] <moritz_> like, rendering SVG? :-)

[14:12] <b_jonas> how about gnuplot?

[14:12] *** iblechbot joined
[14:12] <moritz_> there are opengl bindings for parrot

[14:12] <moritz_> with some effort they should be usable from Perl 6

[14:12] *** ejs joined
[14:13] <b_jonas> eg. http://www.perlmonks.com/index.pl?node_id=740055

[14:13] * finanalyst looking to see opengl bindings

[14:14] <finanalyst> b_jonas: to use gnuplot from perl6, you need to generate a script, then run the script. I found ploticus easier to use to generate what I needed.

[14:15] <TimToady> everyone say hi to YAPC::NA

[14:15] <kolibrie> hi YAPC!

[14:15] <s1n_yapc> big screen hello

[14:15] <moritz_> rakudo: say "OH HAI"

[14:16] <p6eval> rakudo 067756: OUTPUT«OH HAI␤»

[14:16] <s1n_yapc> moritz_: now you're at yapc::na

[14:16] <masak> YAPC: \o

[14:16] <moritz_> s1n_yapc: kinda.

[14:16] <finanalyst> hi YAPC::NA

[14:16] <pmurias> hi ;)

[14:16] <b_jonas> hi YAPC

[14:16] <masak> weather is beautiful, wish we were there.

[14:16] <frew> Hello YAPC!

[14:17] *** deafferret joined
[14:17] <moritz_> you see, we're not only lurkers in here :-)

[14:17] <deafferret> HI YAPC! (jhannah)

[14:17] <deafferret> oh, bummer. missed the projector

[14:17] <masak> moritz_: or, at least, this is how you bring the lurkers out. :)

[14:17] <s1n_yapc> moritz_: that's right, some of us like to be annoying on the big screen :)

[14:17] <frew> haha, sucker

[14:17] <deafferret> why isn't this on irc.perl.org?

[14:17] <masak> deafferret: for hysterical raisins.

[14:18] <moritz_> deafferret: 1) historical reasons 2) to not encapsulate ourselves too much

[14:18] *** pmichaud joined
[14:18] <pmurias> freenode is considered friendlier

[14:18] <masak> hi pm.

[14:18] <moritz_> ask audreyt, she created it (I think)

[14:18] *** wigfield joined
[14:18] <frew> ...

[14:18] <b_jonas> I think it depends on where the evalbots are

[14:19] <b_jonas> well in the start at least

[14:19] <moritz_> my evalbot is both on freenode on irc.perl.org, so that's not an issue

[14:20] <masak> moritz_: I'm not 100% sure, but I think #perl6 might predate audreyt.

[14:20] *** stDavid joined
[14:20] *** meppl left
[14:20] <masak> but I wasn't there in the very-very beginning, just after a month or so of audreyt's appearance.

[14:20] <b_jonas> I see

[14:21] *** alester joined
[14:21] <s1n_yapc>  is TimToady is going to code in his keynote?

[14:22] <masak> s1n_yapc: he said he's to talk about errors.

[14:23] <KyleHa> I hope talking about errors isn't a mistake.

[14:23] *** payload1 joined
[14:24] *** payload left
[14:24] <azawawi> is there going to be a video of TimToady's speech?

[14:25] <finanalyst> is it online now?

[14:25] <moritz_> maybe on yapc.tv

[14:25] *** ejs1 joined
[14:26] <azawawi> cool

[14:26] *** payload1 left
[14:26] *** payload joined
[14:27] *** kst left
[14:27] *** donaldh left
[14:28] *** kst joined
[14:28] <finanalyst> doesnt seem to be

[14:28] <b_jonas> maybe he'll upload some text or slides

[14:30] *** ejs left
[14:30] *** rfordinal joined
[14:33] <finanalyst> i'm trying to use parrot from the rakudo installation, specifically to run ./parrot examples/opengl/shapes.pir but getting "error:imcc:No such file or directory". Should I have something else installed?

[14:35] <moritz_> finanalyst: that seems like a bug... care to ask on #parrot?

[14:35] *** ejs1 left
[14:35] <s1n_yapc> masak: yup, error messages

[14:36] <finanalyst> moritz_: just checking. trying to find an opengl example that works

[14:37] <moritz_> opengl_defines.pasm is missing.

[14:38] <moritz_> finanalyst: ah, it might get generated by Configure.pl if it detects your opengl installation correctly

[14:38] *** ejs1 joined
[14:38] <finanalyst> so if I dont have it, then opengl not detected?

[14:39] *** sitaram joined
[14:39] *** ruoso joined
[14:39] <moritz_> presumably.

[14:39] *** sitaram left
[14:40] <moritz_> auto::opengl -        Does your platform support OpenGL....................no.

[14:40] <moritz_> on one of my machines

[14:40] <moritz_> which is why there's no such file

[14:41] <pmurias> ruoso: hi

[14:41] <ruoso> Hello!

[14:41] <finanalyst> i have ubuntu and seem to have opengl installed

[14:41] <finanalyst> but not dev files.

[14:42] <masak> announcement: proto, the extremely humble installer, now defaults to fetching Rakudo Pittsburgh.

[14:44] <masak> ,,,and it fails (!) to install on my box.

[14:44] <ruoso> hi pmurias 

[14:44] <masak> that's not good.

[14:46] <s1n_yapc> rakudo: #{ }

[14:46] <p6eval> rakudo 067756: OUTPUT«sh: ./perl6: No such file or directory␤»

[14:46] <s1n_yapc> ouch

[14:46] <s1n_yapc> no build?

[14:47] <masak> s1n_yapc: it comes and goes, rebuilds every hour.

[14:49] <s1n_yapc> masak: it should build elsewhere and copy over the old one

[14:49] <masak> s1n_yapc: indeed. patches welcome.

[14:49] *** rfordinal left
[14:53] <s1n_yapc> masak: what exactly would i be patching?

[14:53] <masak> s1n_yapc: the build process, I guess.

[14:54] <masak> but it occurs to me now that those build scripts might not be puclicly accessible.

[14:55] <pugs_svn> r27170 | pmurias++ | [re-smop] infix + < == and != are multis

[14:55] <pugs_svn> r27170 | pmurias++ | started creating Test.pm

[14:55] <pugs_svn> r27170 | pmurias++ | started working on ModuleLoader

[14:55] <s1n_yapc> masak: then i can't patch anything

[14:55] <ruoso> pmurias, that looks promising ;)

[14:55] <masak> s1n_yapc: no. sorry, I was too quick. please patch something else. :)

[14:56] <masak> s1n_yapc: in return, I'll try and have a look at the build process.

[14:56] <ruoso> pmurias, you added the .so in svn

[14:56] *** azawawi left
[14:56] <s1n_yapc> masak: that's fine, i dont have a feather account, so i can't really help

[14:56] <s1n_yapc> not without the source anyways

[14:56] <masak> s1n_yapc: p6eval isn't on feather.

[14:57] <s1n_yapc> masak: where is it?

[14:57] *** sri_kraih_ joined
[14:57] <pugs_svn> r27171 | pmurias++ | [re-smop] .so files have no place in the repo

[14:57] <masak> on timtowtdi.org

[14:57] <s1n_yapc> wow, never knew about that site

[14:58] <pmurias> ruoso: i'm having my uni end-of-term exams atm so my gsoc project is progressing slowly atm

[14:58] <ruoso> pmurias, I think it's ok... since we're doing much better than I initially expected

[15:00] *** sri_kraih left
[15:01] <pmurias> in a couple of days i'll have much more time so it should progress faster

[15:02] <ruoso> pmurias, btw... Test.pm won't need to have the $LexicalPrelude{...} thing

[15:03] <ruoso> I think at the time we have Test.pm, we'll also have "is export" working too

[15:03] <TimToady> rakudo: say "\c[WHITE SMILING FACE]"

[15:03] <p6eval> rakudo 067756: OUTPUT«☺␤»

[15:03] *** ejs1 left
[15:03] <Whiteknight> TimToady++

[15:03] <phenny> Whiteknight: 21 Jun 12:56Z <masak> tell Whiteknight yes, I'm coming to YAPC::EU. will do a talk about Web.pm.

[15:05] *** ejs0 joined
[15:05] * ruoso moved back from Lisbon to Brasil right before a YAPC there... what a shame...

[15:11] *** hercynium joined
[15:13] <pmurias> ruoso: that Test.pm works a bit

[15:14] <ruoso> pmurias, I see... but I mean... you're installing the symbols in the CORE...

[15:14] *** nihiliad joined
[15:16] *** bacek_ left
[15:19] *** s1n_yapc left
[15:19] <skids> ruoso: FWIW, on smop install, you can get most of the libs in debian now through libhugs packages.  Sid currently has some version issues with the "network" library, but almost there without any local packages.

[15:20] <ruoso> skids, there are only two libs that are installed locally I think

[15:20] <ruoso> zip

[15:20] *** donaldh joined
[15:21] <skids> zip can be got by package now.

[15:21] <ruoso> and some other I don't recall right now

[15:21] <ruoso> ah... right... in sid...

[15:22] <skids> Right now the only thing holding back pure-package install is that libghc6-network requires an older version of ghc than what is installed, and ghc won't find the hugs version of "network" library for some reason.

[15:23] <pmurias> skids: doesn't libhugs imply hugsiness?

[15:23] <skids> There's "bundle" packages that autoinstall stuff.

[15:24] *** deafferret left
[15:25] <pmurias> hugs and ghc are seperate implementations, and i can't imagine them being binary compatible

[15:26] *** masak left
[15:26] <pmurias> there seems to be a lighc-utf8-string-dev package and that's the only library we use

[15:26] *** stepnem left
[15:27] <finanalyst> moritz_: ping

[15:29] <skids> pmurias: well, if that's the case then someone screwed up because pugs config picks up hugs libraries after the packages are installed.

[15:30] * skids hasn't actually had time to fix the network lib and try a build yet.

[15:30] <pmurias> maybe the hugs ones are not compiled...

[15:32] *** stDavid left
[15:32] *** frew left
[15:32] <pmurias> ruoso: re Test exporting stuff do we have the way it should be implemented worked out?

[15:32] *** Whiteknight left
[15:33] <ruoso> pmurias, there's still the issue about the pacakge

[15:35] *** rfordinal joined
[15:35] *** hercynium left
[15:36] <skids> ruoso: you won't take offense if I clean up some english grammar as I read through things, right? :-)

[15:36] *** wigfield left
[15:37] <ruoso> skids, on the contraire... I'd appreciate it

[15:42] *** justatheory joined
[15:44] <pmurias> skids: what are you reading through?

[15:46] *** kst left
[15:47] *** kst joined
[15:49] *** cotto left
[15:54] *** stDavid joined
[15:56] *** rindolf joined
[15:56] <rindolf> Hi all.

[15:56] <rindolf> In Firefox 3.0.x the CSS here is all wrong - http://rakudo.org/how-to-get-rakudo

[15:56] <rindolf> On Linux at least.

[15:56] <rindolf> I mean in the buttons at the upper nav-menu.

[15:56] *** hanekomu left
[16:00] *** stDavid left
[16:04] *** azawawi joined
[16:09] <PerlJam> rindolf: It looks fine for me until you get a window below a certain width, then it looks messed up.

[16:11] <rindolf> PerlJam: oh, I see.

[16:11] <rindolf> Well, my browser window is pretty wide at the moment.

[16:12] <PerlJam> that certain width looks to be about 1005 pixels.  Above that, it looks fine.

[16:13] *** Psyche^ joined
[16:14] *** rfordinal left
[16:14] *** rfordinal joined
[16:17] *** payload left
[16:17] <azawawi> what's the difference between +> and ~> ?

[16:18] <azawawi> std: 2 >> 1;

[16:18] <p6eval> std 27171: OUTPUT«##### PARSE FAILED #####␤Obsolete use of >> to do right shift; in Perl 6 please use +> or ~> instead at /tmp/DkWqQmpNKQ line 1:␤------> [32m2 >> [31m1;[0m␤FAILED 00:02 36m␤»

[16:18] <azawawi> rakudo: 2 +> 1;

[16:18] <p6eval> rakudo 067756:  ( no output )

[16:19] <azawawi> rakudo: say 2 +> 1;

[16:19] <p6eval> rakudo 067756: OUTPUT«1␤»

[16:19] <azawawi> rakudo: say 2 ~> 1;

[16:19] *** mtkatwork joined
[16:19] *** mtkatwork left
[16:19] <p6eval> rakudo 067756: OUTPUT«Could not find non-existent sub infix:~>␤»

[16:21] *** zamolxes left
[16:22] <pmurias> azawawi: one is a numeric and the other string bit shift

[16:23] <azawawi> pmurias: can u give me an example of the second one?

[16:24] <pmurias> rakudo: say 100 ~> 2

[16:24] <p6eval> rakudo 067756: OUTPUT«Could not find non-existent sub infix:~>␤»

[16:25] <pmurias> azawawi: it shifts all the bits in a string

[16:25] <pmurias> pugs: say 100 ~> 2

[16:25] <p6eval> pugs: OUTPUT«␤»

[16:25] <pmurias> pugs: say 100 +> 2

[16:25] <p6eval> pugs: OUTPUT«25␤»

[16:26] *** donaldh left
[16:27] <azawawi> pugs: say 1000 ~> 2

[16:27] <p6eval> pugs: OUTPUT«␤»

[16:27] <azawawi> pugs: say "1000" ~> 2

[16:27] <p6eval> pugs: OUTPUT«␤»

[16:27] <azawawi> pugs: say "1000" ~> 0

[16:27] <p6eval> pugs: OUTPUT«1000␤»

[16:27] <azawawi> pugs: say "1000" ~> 1

[16:27] <p6eval> pugs: OUTPUT«␤»

[16:29] *** stDavid joined
[16:29] *** Patterner left
[16:29] *** Psyche^ is now known as Patterner

[16:30] <azawawi> pmurias: thx

[16:30] *** pmurias left
[16:33] <moritz_> finanalyst: pong

[16:33] <finanalyst> moritz_: thanx for responding.

[16:33] <finanalyst> moritz_: about OpenGL and parrot, there is no one on #parrot to talk to :(

[16:34] <finanalyst> could you help a little?

[16:35] *** nihiliad left
[16:35] <finanalyst> i got a window to open with one of the parrot examples, but nothing appeared in the window

[16:36] <moritz_> finanalyst: I don't really know much about it... a mail to the parrot list (including output from Configure.pl) might be more helpful

[16:37] <finanalyst> ok, i'll do that.

[16:41] *** ejs joined
[16:43] *** stDavid left
[16:44] *** REPLeffect joined
[16:45] *** payload joined
[16:46] <KyleHa> I'm looking at the bug #66840 that came in on perl6-compiler.  The test I came up with is:  eval_dies_ok q[ 1 ?? 2,3 !! 4,5 ], 'Ternary error (bug #66840)';

[16:46] <KyleHa> Even that makes rakudo upchuck and die, so I'd have to fudge it with a skip, right?

[16:47] <moritz_> KyleHa: exactly

[16:47] *** ejs left
[16:47] <moritz_> t/spec/S03-operators/precedence.t would be a good place for a test

[16:47] <KyleHa> Is it OK to put that in the file with the other ternary op tests, or...Oh, thanks!

[16:48] <moritz_> that would also be fine.

[16:48] <moritz_> there's more than one way to do it ;-)

[16:48] <KyleHa> OK.  I'll stick it there since I already have it there.

[16:48] <moritz_> sure

[16:48] <moritz_> KyleHa: do you have a commit bit already?

[16:49] <KyleHa> Yes.

[16:49] <moritz_> great.

[16:49] *** mtkatwork joined
[16:49] <moritz_> ah, removing the Ha$ makes the name more familiar ;-)

[16:49] * moritz_ dumb.

[16:49] <KyleHa> *grin*

[16:50] *** mtkatwork left
[16:52] *** kst left
[16:52] *** kst joined
[16:53] <rindolf> Hmmm.... make spectest runs three processes that consume over 50% of my CPU each.

[16:53] <rindolf> So it's becoming somewhat sluggish.

[16:53] <rindolf> The computer I mean.

[16:55] <moritz_> three processes are expected

[16:55] <moritz_> (if your TAP::Harness is sufficiently new)

[16:55] <rindolf> moritz_: ah.

[16:55] <rindolf> And there are still no line numbers in Rakudo errors.

[16:56] <moritz_> rindolf: there are, mostly.

[16:57] <moritz_> rindolf: cases that don't include them are worth a ticket

[16:57] <pugs_svn> r27172 | kyle++ | [t/spec] Add test for bug #66840

[16:57] *** Chillance joined
[16:57] <rindolf> moritz_: ah.

[16:58] *** wigfield joined
[16:58] <rindolf> moritz_: http://erxz.com/pb/18409

[16:59] <rindolf> moritz_: the point is that .hok() is non-existent.

[16:59] <moritz_> rindolf: yes. Feel free to submit to [email@hidden.address]
[16:59] <rindolf> moritz_: OK.

[17:02] *** s1n1 joined
[17:02] *** Whiteknight joined
[17:02] *** frew joined
[17:02] *** cdarroch joined
[17:03] *** s1n2 joined
[17:03] <rindolf> moritz_: is there any way I can tell TAP::Harness to only use one process?

[17:04] <moritz_> rindolf: you can try the TEST_JOBS env var

[17:05] <rindolf> moritz_: ah.

[17:05] *** hercynium joined
[17:06] *** s1n1 left
[17:08] <rindolf> moritz_: submitted the bug.

[17:08] <moritz_> it seems I have to patch t/harness to honour TEST_JOBS

[17:08] <rindolf> Man svn from many http:// (not https://) repositories is very slow here.

[17:08] <rindolf> https:// works fine.

[17:11] *** finanalyst left
[17:12] *** alester_ joined
[17:13] <Trey> where's the spectest repo?  not in pugs anymore?

[17:14] <rindolf> There's some spam here - http://rakudo.org/how-to-help

[17:14] <rindolf> Trey: it is in pugs.

[17:14] <Trey> ok, i was wondering why i kept getting updates :)

[17:15] <dalek> rakudo: 10f2235 | moritz++ | t/harness:

[17:15] <dalek> rakudo: [t/harness] honour TEST_JOBS environment variable

[17:15] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/10f2235028194deddf3db350b5a4a5208484ac09

[17:17] *** jaldhar joined
[17:18] <azawawi> std: $];

[17:18] <p6eval> std 27172: OUTPUT«##### PARSE FAILED #####␤Obsolete use of $] variable; in Perl 6 please use $::PERL_VERSION instead at /tmp/KFd8cEsMoY line 1:␤------> [32m$][31m;[0m␤FAILED 00:02 36m␤»

[17:18] *** alester_ left
[17:18] <azawawi> std: $::PERL_VERSION;

[17:18] <p6eval> std 27172: OUTPUT«ok 00:02 35m␤»

[17:18] <azawawi> rakudo: say $::PERL_VERSION;

[17:18] <p6eval> rakudo 067756: OUTPUT«say requires an argument at line 2, near " $::PERL_V"␤in Main (src/gen_setting.pm:2416)␤»

[17:19] <azawawi> pugs: say $::PERL_VERSION;

[17:19] <p6eval> pugs: OUTPUT«*** Undeclared variable: ("$PERL_VERSION",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xb653118d>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0xb655ea09>}),("@_",PELexical {pe_type = (mkType "Array"), pe_proto = <Array:0xb6…

[17:19] <azawawi> std: say $::PERL_VERSION;

[17:19] <p6eval> std 27172: OUTPUT«ok 00:02 36m␤»

[17:21] *** hercynium left
[17:22] *** spx2 joined
[17:22] <spx2> is the  do BLOCK construct present in p6?

[17:22] <spx2> this one http://perldoc.perl.org/functions/do.html

[17:22] <moritz_> std: do { 1 }

[17:23] <p6eval> std 27172: OUTPUT«ok 00:02 36m␤»

[17:23] <spx2> omfg

[17:23] * spx2 runs away

[17:23] <moritz_> rakudo: do { say 1 }

[17:23] <p6eval> rakudo 067756: OUTPUT«1␤»

[17:23] <moritz_> what's wrong with it?

[17:23] <spx2> almost everything ?

[17:23] <spx2> http://perlmonks.org/?node_id=773663

[17:23] <spx2> check it out

[17:24] <spx2> and the fact that BrowserUK which is an usual on perlmonks

[17:24] <moritz_> I don't see an "almost everything"

[17:24] <spx2> thought it was ok to have something like this

[17:24] <spx2> do{{ 

[17:24] <spx2>     last unless $a==4 

[17:24] <spx2> }} while 1;

[17:24] <spx2> which is really beyond my worst nigthmares

[17:24] <spx2> </rant>

[17:25] <moritz_> that's nothing wrong with the do BLOCK syntax.

[17:25] <moritz_> what's unexpected is that last() doesn't work in statement-modifying loops in Perl 5

[17:25] <spx2> moritz_: why do we have this do BLOCK ? I never used it and I've written a fair amount of p5 code

[17:26] <moritz_> spx2: timtowtdi. It allows you to write code in the verb-followed-by-object form

[17:26] <moritz_> if you don't need it, don't use it.

[17:27] <moritz_> rakudo: my $x; do { $x++; last } for 1..3; say $x

[17:27] <p6eval> rakudo 067756: OUTPUT«1␤»

[17:27] <moritz_> spx2: does that DWIM, in your opinion?

[17:27] *** bizb joined
[17:28] *** nihiliad joined
[17:28] <spx2> I get some garbled characters on my screen

[17:28] <spx2> is that normal ?

[17:28] <spx2> except for the garbled characters yes it's ok

[17:28] <moritz_> spx2: when your client or terminal doesn'T handle UTF-8 that's normal.

[17:29] <moritz_> spx2: see http://irclog.perlgeek.de/perl6/2009-06-22#i_1257256 for a non-garbled version

[17:29] *** ejs joined
[17:29] <moritz_> .oO( assuming your browser handles UTF-8... ;-)

[17:29] <spx2> yeah it does :P

[17:30] <spx2> moritz_: do you use "do BLOCK" in your code ?

[17:30] <spx2> moritz_: do you find it useful in any way ?

[17:30] <moritz_> sometimes, and yes.

[17:31] *** meppuru is now known as meppl

[17:31] * spx2 needs to learn some new langauges :)

[17:31] <spx2> other than p5/p6 that is

[17:31] <moritz_> though it's less useful in Perl 6, because you can write loops as repeat { ... } while $condition;

[17:31] <moritz_> if the presence of a single construct deters you, good luck!

[17:31] <spx2> aaah yes ! post-condition

[17:32] <spx2> I like that

[17:32] <moritz_> (I'm also picky with languages; I abandoned python as soon as I learned it had no "use strict;"

[17:32] <moritz_> )

[17:32] <spx2> but maybe python has some form of "lint"

[17:33] <spx2> isn't "use strict" a lint ?

[17:33] <moritz_> no

[17:33] <moritz_> lint is a different tool

[17:33] <spx2> I think they both serve the same purpose

[17:33] <moritz_> use strict is something that modifies the behaviour of the compiler

[17:33] <moritz_> yes

[17:33] *** ejs left
[17:33] <moritz_> cars and bicycles serve the same purpose too

[17:33] *** mikehh joined
[17:34] <moritz_> (also note that "use strict" has runtime effects)

[17:35] <spx2> moritz_: you mean run-time like this ? perl -Mstrict -e 'eval "$a = 3";'

[17:35] <spx2> it didn't tell me that I did not use "my" for  $a

[17:36] <moritz_> spx2: no, I mean the effeccts of use strict 'refs';

[17:36] <moritz_> anyway, I'm off to play some table tennis

[17:36] <moritz_> have the appropriate amount of fun

[17:37] <azawawi> std: $*;

[17:37] <p6eval> std 27172: OUTPUT«##### PARSE FAILED #####␤Obsolete use of $* variable; in Perl 6 please use ^^ and $$ instead at /tmp/sQr9HpuCSL line 1:␤------> [32m$*[31m;[0m␤FAILED 00:02 36m␤»

[17:39] *** Whiteknight left
[17:39] *** Whiteknight joined
[17:40] <azawawi> what are ^^ and $$?

[17:40] <PerlJam> that's how you match the start and end of lines within a string.

[17:43] <azawawi> and $* 'was' supposed to do their functionality before?

[17:43] <rindolf> moritz_: I'm not getting many <<<Use of uninitialized value>>> warnings without line numbers.

[17:44] <Trey> rakudo: sub foo() { 1 } ; foo;

[17:44] <p6eval> rakudo 067756:  ( no output )

[17:44] <Trey> rakudo: sub foo() { 1 } ; foo(3);

[17:44] <p6eval> rakudo 067756:  ( no output )

[17:44] *** hercynium joined
[17:45] <Trey> is that right?  how do you specify foo taking zero args?

[17:45] <azawawi> PerlJam: thx

[17:45] <PerlJam> azawawi: $* was how you did multi-line matching.  You see it to a true value.

[17:45] <PerlJam> s/see/set/

[17:46] <PerlJam> But that's *really* old perl.  pre-/m days

[17:46] * azawawi finished a couple of quick fixes for today: http://padre.perlide.org/trac/log/trunk/Padre-Plugin-Perl6/lib/Padre/Plugin/Perl6/Perl6Document.pm

[17:48] <szabgab> azawawi, your blog made it to IronMan

[17:49] <Trey> rakuda sub foo($a) { say $a }; foo;

[17:49] <azawawi> szabgab: cool thx

[17:49] <Trey> rakudo: sub foo($a) { say $a }; foo;

[17:49] <p6eval> rakudo 10f223: OUTPUT«too few arguments passed (0) - 1 params expected␤in sub foo (/tmp/zXmkJZjcUF:1)␤called from Main (/tmp/zXmkJZjcUF:2)␤»

[17:49] <Trey> rakudo: sub foo($a) { say $a }; foo('hi', 'mom');

[17:50] <p6eval> rakudo 10f223: OUTPUT«too many arguments passed (2) - 1 params expected␤in sub foo (/tmp/r0oiTiXyDf:1)␤called from Main (/tmp/r0oiTiXyDf:2)␤»

[17:50] <Trey> rakudo: sub foo() { say $a }; foo('hi', 'mom');

[17:50] <p6eval> rakudo 10f223: OUTPUT«Symbol '$a' not predeclared in foo (/tmp/3xzc8AtR53:2)␤in Main (src/gen_setting.pm:3225)␤»

[17:51] *** japhb left
[17:51] <Trey> rakudo: sub foo() { say $^a }; foo('hi', 'mom');

[17:51] <p6eval> rakudo 10f223: OUTPUT«Cannot use placeholder var in block with signature. at line 2, near " }; foo('h"␤in Main (src/gen_setting.pm:1966)␤»

[17:52] <Trey> rakudo: sub foo() { say 'hi'}; foo('hi', 'mom');

[17:52] <p6eval> rakudo 10f223: OUTPUT«hi␤»

[17:53] <Trey> rakudo: sub foo() { @_.say }; foo('hi', 'mom');

[17:53] <p6eval> rakudo 10f223: OUTPUT«himom␤»

[17:53] <Trey> rakudo: sub foo { @_.say }; foo('hi', 'mom');

[17:53] <p6eval> rakudo 10f223: OUTPUT«himom␤»

[17:54] <rindolf> If I have a list (or two) and want to find all elements that appear an odd number of times in the list - how can I do that?

[17:54] <rindolf> For starters, one can assume the list will have at most two elements of every number.

[17:54] <rindolf> uniq(5,5,5) == [5]

[17:55] <rindolf> rakudo: uniq(5,5,5).perl().say

[17:55] <p6eval> rakudo 10f223: OUTPUT«[5]␤»

[17:55] <rindolf> rakudo: uniq(5,5).perl().say

[17:55] <p6eval> rakudo 10f223: OUTPUT«[5]␤»

[17:55] <rindolf> rakudo: ones(5,5).perl().say

[17:55] <p6eval> rakudo 10f223: OUTPUT«Could not find non-existent sub ones␤»

[17:55] <rindolf> Is it my imagination or has rakudo become much slower lately?

[17:55] <Trey> what's the rakudo bug email?  [particle] is sitting next to me and said to send that output, but he can't remember the address :)

[17:56] <PerlJam> rindolf: say [+^] 5, 5; say [+^] 5, 5, 5;

[17:56] <PerlJam> rindolf: perhaps

[17:56] <rindolf> PerlJam: let me try.

[17:56] <PerlJam> Trey: [email@hidden.address]
[17:56] <Trey> PerlJam: danke

[17:56] <rindolf> rakudo: ([+^] (5,5)).perl.say

[17:56] <p6eval> rakudo 10f223: OUTPUT«0␤»

[17:56] <rindolf> rakudo: ([+^] (5,5,5)).perl.say

[17:56] <p6eval> rakudo 10f223: OUTPUT«5␤»

[17:57] <rindolf> PerlJam: I want a list, not a number.

[17:57] <rindolf> rakudo: ([+^] (5,5,5,4)).perl.say

[17:57] <p6eval> rakudo 10f223: OUTPUT«1␤»

[17:57] <PerlJam> rindolf: yeah, that was meant more as a direction to go in rather than an answer to your problem.

[17:57] <rindolf> PerlJam: OK.

[17:58] *** kst left
[17:58] *** acajou joined
[17:59] *** kst joined
[17:59] *** Molaf left
[17:59] *** Molaf joined
[17:59] <KyleHa> Is there any reason to keep the empty directories in pugs/t ?

[18:00] <rindolf> I can write it like I wrote it in p5 - using a loop.

[18:04] <rindolf> How can rakudo's command-line (./perl6) preserve its history across invocations?

[18:06] *** Casan joined
[18:08] <PerlJam> rindolf: you're talking about the REPL?  I'm not even sure how it keeps its history from one iteration to the next. On some systems it seems to, on others it doesn't.

[18:08] <rindolf> PerlJam: ah.

[18:08] <rindolf> PerlJam: yes, the REPL.

[18:11] *** bizb left
[18:13] *** FurnaceBoy joined
[18:13] <rindolf> rakudo: do { my @h = (5,6,7); @h[-1].perl().say }

[18:13] <p6eval> rakudo 10f223: OUTPUT«undef␤»

[18:13] <rindolf> WTF?

[18:14] <rindolf> Isn't it a bug?

[18:14] <rindolf> rakudo: do { my @h = (5,6,7); @h[@h-1].perl().say }

[18:14] <p6eval> rakudo 10f223: OUTPUT«7␤»

[18:14] <rindolf> moritz_: here?

[18:15] <rindolf> OK, and some of the make spectest failed too.

[18:15] <PerlJam> rindolf: no, that's not a bug.

[18:16] <PerlJam> rakudo: my @h = (5,6,7); @h[*-1].perl.say;

[18:16] <p6eval> rakudo 10f223: OUTPUT«7␤»

[18:16] *** nihiliad left
[18:17] <rindolf> PerlJam: what is the reason for breaking compatibility this way?

[18:20] <TimToady> removes an error-prone discontinuity, and naturally falls out from the meaning of *

[18:21] <PerlJam> TimToady: Here I was typing lots of words to say the same thing as "error-prone discontinuity"

[18:22] <rindolf> OK, now my program works.

[18:24] *** DemoFreak joined
[18:24] <rindolf> But it's much slower than the p5 version.

[18:24] <KyleHa> Is there any reason to keep the empty directories in pugs/t ?

[18:24] *** icwiener joined
[18:27] <b_jonas> don't they remind you that you should write tests for those things/

[18:28] <rindolf> b_jonas: what?

[18:28] <KyleHa> No.  They're leftovers from tests that got moved into spec/

[18:29] <KyleHa> I went looking for Pugs tests to ponder moving into spec/ and I found some empty directories.  I'm looking for permission from someone more senior than me to get rid of them.

[18:29] *** spx2 left
[18:30] *** spx2 joined
[18:32] *** mizioumt1 joined
[18:34] *** athomason joined
[18:35] <rindolf> http://www.shlomifish.org/Files/files/code/perl/graham-for-rakudo.p6

[18:39] *** kidd_ left
[18:40] *** kidd_ joined
[18:41] *** mizioumt left
[18:41] *** nihiliad joined
[18:45] *** payload left
[18:47] *** barney left
[18:47] *** japhb joined
[18:49] *** _jaldhar joined
[18:49] *** jaldhar left
[18:53] *** mizioumt joined
[19:02] *** pnu left
[19:02] *** pnu joined
[19:03] *** jaldhar_ joined
[19:04] *** cotto joined
[19:06] <s1n2> std: my $prove = '\\\"foo \\\"bar\\\", \\\"baz\\\")\\\" \\\"barz\\\"';

[19:06] <p6eval> std 27172: OUTPUT«ok 00:02 36m␤»

[19:06] *** s1n2 is now known as s1n_yapc

[19:06] <s1n_yapc> rakudo: my $prove = '\\\"foo \\\"bar\\\", \\\"baz\\\")\\\" \\\"barz\\\"';

[19:06] <p6eval> rakudo 10f223:  ( no output )

[19:06] <s1n_yapc> huh?

[19:07] <s1n_yapc> pugs: my $prove = '\\\"foo \\\"bar\\\", \\\"baz\\\")\\\" \\\"barz\\\"'; say $prove

[19:07] <p6eval> pugs: OUTPUT«\\"foo \\"bar\\", \\"baz\\")\\" \\"barz\\"␤»

[19:07] <s1n_yapc> hmm

[19:08] <s1n_yapc> rakudo: my $prove = '\\"foo \\"bar\\", \\"baz\\")\\" \\"barz\\"';

[19:08] <p6eval> rakudo 10f223:  ( no output )

[19:08] <s1n_yapc> rakudo: my $prove = '\\\"foo \\\"bar\\\", \\\"baz\\\")\\\" \\\"barz\\\"'; say $prove

[19:08] <p6eval> rakudo 10f223: OUTPUT«\\"foo \\"bar\\", \\"baz\\")\\" \\"barz\\"␤»

[19:08] * s1n_yapc is braindead

[19:10] *** DemoFreak left
[19:11] *** mizioumt1 left
[19:11] *** hercynium left
[19:12] *** wigfield left
[19:13] *** stDavid joined
[19:13] *** _jaldhar left
[19:14] *** kst left
[19:14] *** kst joined
[19:18] *** wigfield joined
[19:20] *** donaldh joined
[19:22] *** DemoFreak joined
[19:32] *** azawawi left
[19:35] *** azawawi joined
[19:35] *** its joined
[19:43] *** stDavid left
[19:43] <s1n_yapc> dalek only post commit feed items?

[19:43] <s1n_yapc> we should make it hand out commitbit

[19:45] *** hercynium joined
[19:49] *** frew left
[19:51] <meppl> good night

[19:51] *** frew joined
[19:56] *** meppl left
[19:57] *** ruoso left
[20:00] *** pmurias joined
[20:00] <azawawi> std: rand(10)

[20:00] <p6eval> std 27172: OUTPUT«##### PARSE FAILED #####␤Obsolete use of rand(N); in Perl 6 please use N.rand or (1..N).pick instead at /tmp/boYoB54voi line 1:␤------> [32mrand[31m(10)[0m␤FAILED 00:02 35m␤»

[20:01] <azawawi> std: rand(10 )

[20:01] <p6eval> std 27172: OUTPUT«##### PARSE FAILED #####␤Obsolete use of rand(N); in Perl 6 please use N.rand or (1..N).pick instead at /tmp/CZbQ3UcH29 line 1:␤------> [32mrand[31m(10 )[0m␤FAILED 00:02 35m␤»

[20:01] <azawawi> std: rand( 10)

[20:01] <p6eval> std 27172: OUTPUT«ok 00:02 35m␤»

[20:01] <azawawi> TimToady: i think we have a leading space STD bug in rand( 10)

[20:02] <azawawi> std: rand(     10);

[20:02] <p6eval> std 27172: OUTPUT«ok 00:02 35m␤»

[20:02] <azawawi> std: rand(10      );

[20:02] <p6eval> std 27172: OUTPUT«##### PARSE FAILED #####␤Obsolete use of rand(N); in Perl 6 please use N.rand or (1..N).pick instead at /tmp/2tumXSTsxm line 1:␤------> [32mrand[31m(10      );[0m␤FAILED 00:02 35m␤»

[20:03] <azawawi> TimToady: and what's the difference between [-1] and [ -1] ?

[20:03] <azawawi> std: [-1];

[20:03] <p6eval> std 27172: OUTPUT«ok 00:02 37m␤»

[20:03] *** nihiliad left
[20:03] <azawawi> std: my @a; @a[-1];

[20:03] <p6eval> std 27172: OUTPUT«##### PARSE FAILED #####␤Obsolete use of [-1] subscript to access final element; in Perl 6 please use [*-1] instead at /tmp/EFSgrB1Rzy line 1:␤------> [32mmy @a; @a[-1][31m;[0m␤FAILED 00:02 38m␤»

[20:03] <azawawi> std: my @a; @a [-1];

[20:03] <p6eval> std 27172: OUTPUT«##### PARSE FAILED #####␤Unable to parse infix or meta-infix; couldn't find final ']' at /tmp/Qv3wuafxDv line 1:␤------> [32mmy @a; @a [-[31m1];[0m␤FAILED 00:02 36m␤»

[20:04] <azawawi> std: my @a; @a[ -1];

[20:04] <p6eval> std 27172: OUTPUT«ok 00:02 38m␤»

[20:07] *** nihiliad joined
[20:08] <TimToady> what, you expect me to be consistent :)

[20:09] <KyleHa> Consistently inconsistent?

[20:09] <KyleHa> Expect the unexpected!

[20:10] <moritz_> KyleHa: (re empty directories) they can be deleted

[20:10] <KyleHa> moritz_: Thank you.

[20:10] <moritz_> they are a left-over from me using git-svn, and git doesn't deal with directories at all

[20:16] <pugs_svn> r27173 | kyle++ | [t] remove empty directories

[20:16] <KyleHa> Pewf!

[20:17] <pugs_svn> r27174 | moritz++ | [t] remove test that seems so wrong to me (and has no smartlink)

[20:17] *** icwiener left
[20:22] <KyleHa> If I have an AoH, can I say 'foreach my %x ( @aoh )', or is it still my $h ?

[20:23] <moritz_> in Perl 6 you say 'for %aoh -> %h { ... }'

[20:23] <KyleHa> Thank you.

[20:23] <moritz_> siince the item is bound to %h, the derefencing step that you need in Perl 5 is gone

[20:23] <moritz_> likewise: 

[20:24] <Tene> for @aoh -> %h { ... }

[20:24] <moritz_> rakudo: my $a = [1, 2, 3]; sub f(@a) { say @a.elems }; f($a);

[20:24] <p6eval> rakudo 10f223: OUTPUT«3␤»

[20:24] *** REPLeffect left
[20:24] <moritz_> rakudo: for ({ a => 2 }, { b => 1 }) -> %h { say %h.perl }

[20:24] <p6eval> rakudo 10f223: OUTPUT«{"a" => 2}␤{"b" => 1}␤»

[20:25] <KyleHa> Hmmm, no need for 'my' ?

[20:25] <moritz_> not in signatures

[20:25] <moritz_> in -> $x, $y { ... } the '$x, $y' part is actually a signature

[20:25] <moritz_> just like when you say 'my $anon = sub ($x, $y) { ... }'

[20:26] *** kst left
[20:26] <moritz_> std: my Cat $a;

[20:26] <p6eval> std 27174: OUTPUT«##### PARSE FAILED #####␤In "my" declaration, typename Cat must be predeclared (or marked as declarative with :: prefix) at /tmp/Q20ynaHXVM line 1:␤------> [32mmy Cat[31m $a;[0m␤FAILED 00:02 35m␤»

[20:26] *** twigil left
[20:26] *** kst joined
[20:27] <pugs_svn> r27175 | lwall++ | [STD] allow whitespacey forms on rand and .[-1] checkers

[20:27] <pugs_svn> r27175 | lwall++ | [Cursor] reinit setting on reparse

[20:27] <moritz_> std: class Cat { }; class Dog { }; class Fish { }; my Cat|Dog Fish $mitsy = new Fish but { Bool.pick ?? .does Cat !! .does Dog }; # example from S02

[20:27] <p6eval> std 27174: OUTPUT«##### PARSE FAILED #####␤Malformed my at /tmp/tP7IIsgUad line 1:␤------> [32m}; class Dog { }; class Fish { }; my Cat[31m|Dog Fish $mitsy = new Fish but { Bool.p[0m␤    expecting any of:␤       multi_declarator␤ typename␤ whitespace␤FAILED 00:02 36m␤»

[20:28] <moritz_> TimToady: please either fix S02 or STD.pm ;-)

[20:28] <moritz_> it looks rather like two terms in a row

[20:28] <TimToady> it's only possible in theory :)

[20:29] <moritz_> (actually I was just looking of '$obj but { closure }' is really allowed

[20:29] <moritz_> and that's the only example in the spec)

[20:30] <TimToady> the parser doesn't care what's on either side of 'but'

[20:31] <TimToady> std: () but ()

[20:31] <p6eval> std 27175: OUTPUT«ok 00:02 36m␤»

[20:31] <moritz_> that's only half of an answer ;-)

[20:31] <moritz_> does the rest of the compiler needs to handle closures on the RHS?

[20:31] <TimToady> beats me

[20:32] <moritz_> well, let's say "yes" for the moment ;-)

[20:33] <pmurias> TimToady: figured out a solution for the use Foo;use Foo::Bar; problem?

[20:34] <moritz_> upon further review that test is mostly borked anyway

[20:34] <KyleHa> rakudo: my %x=(a=>1); say "interpolate, I say: %x<a>"

[20:34] <p6eval> rakudo 10f223: OUTPUT«interpolate, I say: %x<a>␤»

[20:34] <moritz_> KyleHa: NYI

[20:35] <PerlJam> KyleHa: for now you can use "interpolate, I say: {%x<a>}"

[20:35] <KyleHa> When you say "for now", does that mean it is sure to break?

[20:35] <moritz_> no

[20:36] <moritz_> curly braces interpolate as closures in double-quoted strings.

[20:36] <PerlJam> KyleHa: no, that means that you way that is currently broken will eventually work

[20:36] *** mizioumt left
[20:36] <KyleHa> Oh, cool.

[20:36] <KyleHa> Thank you all.

[20:36] <pugs_svn> r27176 | moritz++ | [t] remove oo/syntax-but.t

[20:36] <pugs_svn> r27176 | moritz++ | 

[20:36] <pugs_svn> r27176 | moritz++ | There were two kinds of tests in there. Some used $value but { closure }, but

[20:36] <pugs_svn> r27176 | moritz++ | the closure didn't return a role or an enum (so they were wrong). The other

[20:36] <pugs_svn> r27176 | moritz++ | onces were of the form '$value but True', which we test elsewhere anyway.

[20:37] <moritz_> damn, I can't type. "onces" :/

[20:37] *** hercynium left
[20:38] *** ejs0 left
[20:39] *** hercynium joined
[20:45] *** deafferret joined
[20:45] *** jan___ left
[20:45] *** bennymack joined
[20:47] *** jan_ joined
[20:48] *** deafferret left
[20:49] *** _jaldhar_ joined
[20:50] *** jaldhar_ left
[20:55] *** bennymack left
[20:55] *** jaldhar joined
[20:56] *** azawawi left
[20:57] *** _jaldhar_ left
[21:00] <rindolf> http://www.shlomifish.org/Files/files/code/perl/graham-for-rakudo.p6 - any comments?

[21:01] *** nihiliad left
[21:02] <pugs_svn> r27177 | kyle++ | [t/spec] Make autoincrement string tests data driven.  This should make it

[21:02] <pugs_svn> r27177 | kyle++ | easier to add tests for, e.g., Greek characters.

[21:03] <KyleHa> That autoincrement.t oughta be broken up, I reckon.

[21:04] *** b_jonas left
[21:05] <KyleHa> I just now figured out that NYI = 'not yet implemented'.

[21:06] <moritz_> KyleHa: the reason not to use data driven testing is very often that it's harder to fudge individual tests without botching the plan()

[21:06] <moritz_> KyleHa: that doesn't mean it's bad, it's just something you should be aware of

[21:06] <KyleHa> Indeed, I hadn't thought of that.

[21:07] *** nihiliad joined
[21:09] <moritz_> rindolf: I prefer to use dashes instead of underscores in identifiers

[21:09] <rindolf> moritz_: ah.

[21:09] <KyleHa> Now I'm wondering if I should add fudgy features to my test data structure.  Probably not.  There were a couple of tests that I didn't put in the data set because they were fudged already.

[21:09] *** s1n_yapc left
[21:09] <KyleHa> So I guess if any of those in the array need fudging, they'll have to be factored back out again.

[21:09] <moritz_> that works for now

[21:10] <moritz_> (and in the long run it has to be all implemented anyway ;-)

[21:10] *** stDavid joined
[21:10] <KyleHa> Yeah, well, no sense making it hard on implementers in the short run.

[21:16] *** lichtkind left
[21:19] *** azawawi joined
[21:19] <azawawi> hello

[21:20] <kolibrie> ua

[21:22] *** frew left
[21:22] <azawawi> Padre's Perl 6 plugin in action: http://ahmadzawawi.blogspot.com/2009/06/padres-perl-6-quick-fixes-in-action.html

[21:26] <japhb> phenny: tell finanalyst I wrote the OpenGL bindings.  They do work from both PIR and Perl 6 (in Rakudo).  Or at least, WFM.  :-)  The black window problem is a (really long-standing) bug in Parrot NCI when JIT is enabled.  You need to configure parrot with --jitcapable=0.

[21:26] <phenny> japhb: I'll pass that on when finanalyst is around.

[21:29] <moritz_> I just tested shapes.pir with current rakudo - works, albeit *very* slow

[21:29] <japhb> moritz_: how slow?  I find it ~75x times slower than the PIR version.

[21:30] <moritz_> japhb: how did you measure the speed?

[21:31] <japhb> let it run until the design has rotated at least one full turn, then hit Esc to quit and look at the average frame rate printed there.

[21:31] *** lambdabot left
[21:31] <japhb> s/there/in your terminal/

[21:32] <japhb> I should probably add a --benchmark option that runs it until it rotates exactly one full time, to make sure the comparison is as valid as possible.

[21:32] <moritz_> rakudo: 3.9 fps, parrot: 197 fps

[21:32] <japhb> Right now, they're *so* different, I'm only worried about order of magnitude.

[21:32] <p6eval> rakudo 10f223: OUTPUT«Statement not terminated properly at line 2, near "fps, parro"␤in Main (src/gen_setting.pm:0)␤»

[21:32] <moritz_> rakudo: 197 / 3.9

[21:32] <p6eval> rakudo 10f223:  ( no output )

[21:32] <moritz_> rakudo: say 197 / 3.9

[21:33] <p6eval> rakudo 10f223: OUTPUT«50.5128205128205␤»

[21:33] <japhb> So, within variability of architectures and build day.

[21:33] <moritz_> yes, the order of magnitude has stayed the same

[21:33] <japhb> Also, I compile Parrot with --jitcapable=0 --optimes.

[21:33] <japhb> er --optimize

[21:34] <moritz_> speaking of which, I could try opengl with clang... ;-)

[21:34] <japhb> :-)

[21:34] <japhb> If clang manages to get a working compile with --jitcapable=1 on 32-bit Intel, I'm all for switching *today*

[21:34] *** lambdabot joined
[21:35] <moritz_> I only have amd64 to test

[21:35] *** hercynium left
[21:35] <japhb> I have one of each.

[21:36] <japhb> Because I bought my laptop about one season before Core 2 came out.  :-(

[21:37] <moritz_> if you have no more than 3GB ram, 64bit rarely has practical benefits

[21:38] *** hercynium joined
[21:38] <moritz_> never try to compile parrot with --optimize with a debug build of clang

[21:38] <moritz_> it's just infintely slow

[21:38] <japhb> True, but Core 2 was intrinsically a much faster chip than the original Core, even for 32-bit stuff.  And I wouldn't constantly be getting skipping watching 720p or larger videos ...

[21:38] <japhb> heh

[21:39] *** kst left
[21:40] <moritz_> I have to confess I don't know much about individual processors/processor families

[21:40] *** kst joined
[21:40] <moritz_> just general statements about broader families

[21:40] *** azawawi left
[21:41] <moritz_> s/families/architectures/

[21:49] *** jaldhar left
[21:50] <pugs_svn> r27178 | kyle++ | [t/spec] Reduce my own test bloat.  One test per case instead of three.

[21:52] <japhb> moritz_: did you manage to get a clang build with OpenGL?

[21:52] *** bacek joined
[21:54] <moritz_> japhb: not yet. With --optimize it seems to hang somewhere...

[21:54] <japhb> nod

[21:56] *** KyleHa left
[21:56] <moritz_> and on the machine with clang I don't have the opengl headers yet *sigh*

[21:56] <japhb> oops

[21:56] *** hercynium left
[21:57] *** nihiliad left
[21:58] <moritz_> uhm, what packages do I need on debian for that?

[21:59] <moritz_> I have libl1-mesa-dev  and all dependencies

[22:03] <moritz_> ah, freeglut3-dev is missing

[22:03] <Tene> I still get FAIL with OpenGL.

[22:03] <Tene> :(

[22:04] <japhb> moritz_: sorry, multitasking

[22:04] <japhb> Tene: remind me again what the FAIL form was?

[22:04] *** iblechbot left
[22:04] <Tene> japhb: paste in #parrot

[22:05] <japhb> Tene: Ah yes, that one

[22:05] <japhb> frack.

[22:06] <japhb> That really seems to be a freeglut error.

[22:06] <Tene> How could I test that?

[22:06] <japhb> Oh yes, I recall, I was going to suggest trying an app that used freeglut to rule it out.

[22:06] <japhb> lemme see if I can find a good one.

[22:09] <moritz_> will any app do that depends on freeglut?

[22:09] <Tene> probably

[22:09] <japhb> moritz_: yeah, I was filtering the output of apt-cache just now

[22:09] *** pmurias left
[22:09] <moritz_> if you're on debian: adanaxisgpl depends on freeglut3

[22:09] <moritz_> japhb: 'debtags search hardware::opengl' is a real helper

[22:10] <Tene> I'm on Fedora.

[22:10] <moritz_> meh.

[22:10] <Tene> but I have that package

[22:11] <moritz_> or ssystem, if you want to download less ;-)

[22:11] *** last left
[22:12] <japhb> Tene: I generally assume that Debian has a first approximation of the union of all other (free) distros, so this produces a list of which some are likely to exist for you.  :-)

[22:12] <Tene> :)

[22:13] <japhb> moritz_: apt-get install debtags  :-)

[22:13] <japhb> I started with Debian long before such tags were all that useful, and never got in the habit

[22:14] <japhb> ah, nice

[22:15] <moritz_> I first did 'debtags tagsearch opengl' to find hardware::opengl

[22:17] *** donaldh left
[22:17] *** skids left
[22:35] *** rfordinal left
[22:36] *** rfordinal joined
[22:41] *** xomas is now known as shanker|away

[22:41] *** kst left
[22:42] *** kst joined
[22:42] *** shanker|away left
[22:42] *** xomas joined
[22:43] *** wigfield left
[22:49] *** nErVe joined
[22:54] *** rfordinal left
[22:54] *** alester left
[22:55] <amoc> rakudo: my $o = IO::A.new

[22:55] <p6eval> rakudo 10f223: OUTPUT«Null PMC access in invoke()␤in Main (/tmp/vgehkLTATe:2)␤»

[22:56] *** jaldhar joined
[22:57] * amoc submits [perl #66878]

[22:58] <nErVe> "Has 9 duplications and 24 losses, D/L Score is 37.5" i wan to extract lines like these any regex that wld do the trick..??

[23:08] *** Whiteknight left
[23:13] *** jferrero joined
[23:26] *** bsb left
[23:30] *** kidd_ left
[23:31] *** kidd_ joined
[23:39] *** cotto left
[23:49] *** kst left
[23:52] *** justatheory left
[23:53] *** skids joined
[23:56] *** jaldhar left
[23:56] *** nihiliad joined
[23:57] *** kst joined
[23:58] *** justatheory joined
