[00:10] *** BinGOs left
[00:11] *** BinGOs joined
[00:16] *** hanekomu left
[00:20] *** BinGOs left
[00:21] *** BinGOs joined
[00:51] *** TheOrz left
[01:02] *** wayland joined
[01:03] <wayland> Quick question -- I see the parrot repository has moved, and I've seen noises (excuse mixed metaphor) about putting perl6 in a separate repo.  Has this happened?

[01:03] *** alc joined
[01:03] <wayland> Or do I still use the old Parrot repo?

[01:03] <wayland> (sorry, I should say "rakudo", not perl6)

[01:12] *** PZt joined
[01:12] *** DemoFreak left
[01:14] <[particle]> wayland: parrot and rakudo are now in separate repositories. there will be an announcement within 24 hours with  the rakudo details, according to pmichaud

[01:14] <[particle]> rakudo is available at http://github.com/rakudo/rakudo.git

[01:15] <wayland> ok, all happy!  Thanks muchly

[01:15] <[particle]> currently, it must be checked out to languages/rakudo under a parrot checkout, or parrot must be checked out under parrot/ of a rakudo checkout

[01:15] *** Maghnus left
[01:21] *** hercynium joined
[01:23] *** jhuni joined
[01:27] <s1n> pmichaud: ping

[01:28] *** silug joined
[01:34] <pugs_svn> r25195 | hinrik++ | [util/perl6.vim] highlight Xop/Rop metaoperators

[01:41] *** silug left
[01:41] *** wayland left
[01:42] *** justatheory left
[01:45] <pugs_svn> r25196 | hinrik++ | [util/perl6.vim] some Pod formatting code fixes

[01:50] <pugs_svn> r25197 | hinrik++ | [util/perl6.vim] highlight the exclamation mark in negated Pod config options

[01:53] *** Limbic_Region left
[01:56] <pugs_svn> r25198 | particle++ | [S19] adding --extract-from-text, -x; similar behavior to perl 5, but file may now contain unicode text

[01:59] <pugs_svn> r25199 | hinrik++ | [util/perl6.vim] update TODO list

[02:06] *** icwiener_ left
[02:09] *** Whiteknight left
[02:10] <s1n> pmichaud: i have a ticket i want to work on, but i need some experienced help finding things and figuring out what everything does

[02:14] <pugs_svn> r25200 | particle++ | [S19] --autoloop-split, -a: assigns result to @_; signature and option name fixups

[02:18] *** TheOrz joined
[02:19] *** szabgab left
[02:19] *** SamB joined
[02:20] *** szabgab joined
[02:32] *** shinobi-cl joined
[02:32] <pugs_svn> r25201 | particle++ | [S19] shortened ++DEBUGGER to ++BUG, which seems a better mnemonic then ++DEB.

[02:33] <shinobi-cl> rakudo: my @array=1,2,3; my %hash; %hash{"shipoopi"} = @array; say %hash{"shipoopi"};

[02:33] <p6eval> rakudo 36369: OUTPUT«1 2 3␤»

[02:34] <shinobi-cl> rakudo: my %hash; %hash{"shipoopi"}; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; say %hash{"a};

[02:34] <p6eval> rakudo 36369: OUTPUT«Statement not terminated properly at line 1, near "{\"a};"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:34] <shinobi-cl> rakudo: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; say %hash{"a};

[02:34] <p6eval> rakudo 36369: OUTPUT«Statement not terminated properly at line 1, near "{\"a};"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:35] <shinobi-cl> rakudo: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; say %hash{"a"};

[02:35] <p6eval> rakudo 36369: OUTPUT«No applicable methods.␤␤current instr.: '_block14' pc 90 (EVAL_16:46)␤»

[02:36] <shinobi-cl> pugs: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; say %hash{"a"};

[02:36] <p6eval> pugs: OUTPUT«1 2 3␤»

[02:37] <shinobi-cl> pugs: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; say %hash{"a"}.elems;

[02:37] <p6eval> pugs: OUTPUT«3␤»

[02:37] <shinobi-cl> nice :)

[02:38] *** eternaleye joined
[02:39] <shinobi-cl> pugs: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; push %hash{"1"}, 'a'; push %hash{"1"}, 'b'; push %hash{"1"}, 'c'; my @z = %hash{"a"} Z %hash{"1"}; say @z;

[02:39] <p6eval> pugs: OUTPUT«1 2 3␤»

[02:39] <shinobi-cl> rakudo: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; push %hash{"1"}, 'a'; push %hash{"1"}, 'b'; push %hash{"1"}, 'c'; my @z = %hash{"a"} Z %hash{"1"}; say @z;

[02:39] <p6eval> rakudo 36369: OUTPUT«No applicable methods.␤␤current instr.: '_block14' pc 90 (EVAL_16:46)␤»

[02:40] <shinobi-cl> pugs: my @a = 1,2,3; my @b = "a","b","c"; my @z = @a Z @b; say @z;

[02:40] <p6eval> pugs: OUTPUT«123␤»

[02:40] <shinobi-cl> pugs: my @a = 1,2,3; my @b = "a","b","c"; my @z = zip(@a,@b); say @z;

[02:40] <p6eval> pugs: OUTPUT«1 a2 b3 c␤»

[02:40] <shinobi-cl> rakudo: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; push %hash{"1"}, 'a'; push %hash{"1"}, 'b'; push %hash{"1"}, 'c'; my @z = zip(%hash{"a"}, %hash{"1"}); say @z;

[02:40] <p6eval> rakudo 36369: OUTPUT«No applicable methods.␤␤current instr.: '_block14' pc 90 (EVAL_16:46)␤»

[02:40] <shinobi-cl> pugs: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; push %hash{"1"}, 'a'; push %hash{"1"}, 'b'; push %hash{"1"}, 'c'; my @z = zip(%hash{"a"}, %hash{"1"}); say @z;

[02:40] <p6eval> pugs: OUTPUT«1 a2 b3 c␤»

[02:42] <pugs_svn> r25202 | particle++ | [S19] don't special-case C<-e6>, require C<-e '6;'>

[02:45] <shinobi-cl> pugs: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; push %hash{"1"}, 'a'; push %hash{"1"}, 'b'; push %hash{"1"}, 'c'; my @z = zip(%hash{"a"}, %hash{"1"}); say @z.elems;

[02:45] <p6eval> pugs: OUTPUT«3␤»

[02:45] <shinobi-cl> pugs: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; push %hash{"1"}, 'a'; push %hash{"1"}, 'b'; push %hash{"1"}, 'c'; my @z = zip(%hash{"a"}, %hash{"1"}); say @z;

[02:45] <p6eval> pugs: OUTPUT«1 a2 b3 c␤»

[02:48] <pugs_svn> r25203 | particle++ | [t/spec] remove accidentally committed and empty dirs

[02:48] <shinobi-cl> pugs: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; push %hash{"1"}, 'a'; push %hash{"1"}, 'b'; push %hash{"1"}, 'c'; my @z = zip(%hash{"a"}, %hash{"1"}); say @z.reverse;

[02:48] <p6eval> pugs: OUTPUT«3 c2 b1 a␤»

[02:49] <shinobi-cl> pugs: my %hash; push %hash{"a"}, 1; push %hash{"a"}, 2; push %hash{"a"}, 3; push %hash{"1"}, 'a'; push %hash{"1"}, 'b'; push %hash{"1"}, 'c'; my @z = zip(%hash{"a"}, %hash{"1"}.reverse); say @z;

[02:49] <p6eval> pugs: OUTPUT«1 c2 b3 a␤»

[02:58] *** shinobi-cl left
[03:07] *** eternaleye left
[03:09] *** eternaleye joined
[03:11] *** TheOrz left
[03:11] *** TheOrz joined
[03:24] <pugs_svn> r25204 | putter++ | [elfish/on_sbcl] More build refactoring.  It should now be straightforward to add support for additional lisp implementations, and to debug clisp's.  See README.

[03:33] *** eternaleye left
[03:35] *** eternaleye joined
[03:44] *** jhuni left
[04:15] *** mberends joined
[04:18] *** Casan left
[04:37] *** legis joined
[05:08] *** Tene joined
[05:11] *** mtnviewmark joined
[05:19] <pugs_svn> r25205 | particle++ | [S19] remove -o, as -O now defaults to STDOUT -- TimToady++. shuffle some list items around, to match order in perl6() signature

[05:30] *** Tene_ left
[06:04] *** mberends left
[06:05] *** mtnviewmark left
[06:07] *** hercynium left
[06:19] *** TheDouche joined
[06:26] *** azawawi_ joined
[06:35] *** azawawi_ left
[06:43] *** azawawi left
[06:55] *** ashizawa joined
[07:04] *** Sepheebear left
[07:24] *** aindilis` left
[07:28] *** stephenlb left
[07:37] *** maerzhase joined
[07:50] *** mberends joined
[08:02] *** rindolf joined
[08:11] *** DemoFreak joined
[08:20] *** iblechbot joined
[08:20] *** smtms left
[08:29] *** TheOrz left
[08:42] *** mj41 left
[08:44] *** mj41 joined
[09:01] <pugs_svn> r25206 | moritz++ | [evalbot] rakudo should live in perl6/

[09:07] <pugs_svn> r25207 | moritz++ | [evalbot] rakudo doesn't have svn revisions anymore

[09:08] *** p6eval left
[09:08] *** p6eval joined
[09:09] <moritz_> rakudo: say 'test'

[09:09] <p6eval> rakudo c10807: OUTPUT«test␤»

[09:09] <moritz_> rakudo: say 'test'.perl

[09:09] <p6eval> rakudo c10807: OUTPUT«"test"␤»

[09:10] <moritz_> ok, we now see the first 6 digits of the git SHA1 of the last commit

[09:11] <moritz_> is that sensible? or is a there a more suitable version identifier?

[09:25] *** masak joined
[09:26] *** meppl joined
[09:28] *** TheDouche left
[09:28] *** Eevee left
[09:29] *** Eevee joined
[09:29] *** TheDouche joined
[09:30] *** TheDouche left
[09:32] *** PantheraUncia joined
[09:35] <PantheraUncia> Hi! Can somebody tell me what is wrong with git repo?

[09:35] <PantheraUncia> Getting pack 2c81413a3c450fbfed1dab20012c7cd1b2fcf694

[09:35] <PantheraUncia>  which contains 49819babdfc9914549c278b9d826316ea8366345

[09:35] <PantheraUncia> error: Unable to find ab74be6e7b81783ff462a7ed994aa82b7e824340 under http://github.com/rakudo/rakudo.git

[09:35] <PantheraUncia> Cannot obtain needed tree ab74be6e7b81783ff462a7ed994aa82b7e824340

[09:35] <PantheraUncia> while processing commit 1ab9b0738bcb9fddfb992f2d2d5c4ba0f571c043.

[09:35] <PantheraUncia> fatal: Fetch failed.

[09:36] <moritz_> PantheraUncia: not sure I can help you... what command did you issue that gave you that error?

[09:36] <PantheraUncia> git clone http://github.com/rakudo/rakudo.git

[09:37] <PantheraUncia> It is reproducible.

[09:38] <moritz_> PantheraUncia: same here, but it works if you use git:// instead of http://

[09:39] <PantheraUncia> OK, thank you.

[09:41] *** maerzhase left
[09:44] *** smtms joined
[09:44] *** jeremiah_ left
[10:00] *** jeremiah joined
[10:02] *** cai joined
[10:06] *** integral joined
[10:07] <jeremiah> OHAI!

[10:08] <jeremiah> So, if one wants to build the latest perl6, i.e. rakudo, then there is now a separate repo instead of using parrot?

[10:09] <jeremiah> I built perl6 recently by downloading parrot, and cd'ing into languages/perl6 

[10:09] <jeremiah> But now I would just clone the rakudo git repo I assume.

[10:10] <moritz_> jeremiah: yes, as languages/rakudo in the parrot directory

[10:12] <jeremiah> Okay, so pull the git repo, and cd parrot/languages/rakudo and build?

[10:12] <moritz_> first build parrot, then run rakudo's Configure.pl

[10:12] <jeremiah> Okay, so the procedure has not changed at all, just the location and name of the repos.

[10:13] <moritz_> well, previously you didn't have to check out two repos, and run two Configure.pl's

[10:13] <jeremiah> moritz_: Ah - so I have to clone parrot first, then clone rakudo to build perl6

[10:13] <jeremiah> ?

[10:15] *** szabgab left
[10:15] <moritz_> svn co https://svn.parrot.org/parrot/trunk parrot; cd parrot; perl Configure.pl; make; cd languages; git clone git://github.com/rakudo/rakudo.git; cd rakudo; perl Configure.pl; make

[10:15] <moritz_> if you already have a parrot checkout, you can re-use that, of course

[10:20] <jeremiah> moritz_: Thanks, that makes it clear.

[10:20] <jeremiah> I already have parrot so I will re-use that.\

[10:23] *** braceta joined
[10:29] <jeremiah> masak: Hmm, didn't know you were in Sweden too. 

[10:29] <jeremiah> I am in Gbg

[10:29] <jeremiah> Are you going to the Oslo Nordic Perl Workshop?

[10:29] <masak> jeremiah: aye.

[10:30] <masak> doing a talk, even.

[10:30] *** jtre joined
[10:30] <jeremiah> Cool, we'll meet IRL

[10:30] <jeremiah> Me too, what is your talk?

[10:30] <masak> jeremiah: about November.

[10:30] <jeremiah> I suppose I can check it out myself but I am lazy.

[10:30] <jtre> hello!, does perl 5.8 happen to support code references?

[10:30] <jeremiah> Cool, I was just looking at November, I think I am going to use that.

[10:30] <masak> jtre: yes, but this is #perl6

[10:30] <masak> jeremiah: very nice.

[10:31] <jtre> sorry i tried #perl and didn't have much luck

[10:31] <jeremiah> jtre: Yeah, the #perl channel is not a help channel, it is an  abuse channel. :)

[10:32] <moritz_> jtre: you might try #perlhelp, or #perl on irc.perl.org

[10:32] <masak> jtre: we're more helpful here, but it's still off-topic. :P

[10:32] <jeremiah> jtre: You might want to try #perl-help

[10:32] <jtre> okay thanks

[10:33] <jeremiah> moritz_: Have you spent time in #perl on irc.perl.org? It is not so helpful. :)

[10:33] <jtre> can I ask you to take a look at this then? (i'll move to perlhelp in future) http://pastebin.ca/1327873

[10:33] <jtre> it is copied from the higher order perl book, but won't compile, a can't find 'main' error

[10:33] <jtre> Undefined subroutine &main:: called at hanoi.pl line 4.

[10:33] <jeremiah> jtre: you are using the HOP book . . . 

[10:34] <jeremiah> ah, you said that, :)

[10:34] <jtre> yes, is that a good thing?

[10:34] <moritz_> yes.

[10:34] <moritz_> jtre: the website for that book has a few erratas published

[10:34] <jeremiah> jtre: That is a really good book.

[10:35] <jeremiah> #$disk <- worries me

[10:35] <jtre> I see, I'm on the online edition, I hoped the erratas would be updated

[10:35] *** shinobi-cl joined
[10:35] <jtre> ok, thanks, I'll check out the errata

[10:35] <jeremiah> jtre: Are you using the free pdf? That is probably the most up-to-date

[10:36] <jtre> yes I am

[10:36] <jeremiah> line 13 in your example - #$disk

[10:37] <moritz_> jtre: in the sub hanoi it calls itself recursively with only 4 args

[10:38] <jtre> argh, sorry I bothered you all

[10:38] <moritz_> jtre: if you 'use strict;' (I know MJD doesn't do it explicitly in the examples) you get an error message which is a bit more helpful

[10:42] *** shinobi-cl left
[10:42] *** Caelum left
[10:43] *** Caelum joined
[10:49] <pugs_svn> r25208 | hinrik++ | [util/perl6.vim] highlight autoquoted pair arguments to =use directives

[10:49] <pugs_svn> r25209 | hinrik++ | [util/perl6.vim] remove TODO item

[10:55] *** ruoso left
[11:02] *** elmex left
[11:03] *** iblechbot_ joined
[11:06] <pugs_svn> r25210 | hinrik++ | [util/perl6.vim] highlight =END specially and don't highlight anything after it

[11:13] *** alc left
[11:13] *** ruoso joined
[11:15] <pugs_svn> r25211 | hinrik++ | [util/perl6.vim] fix regression regarding implicit code blocks in Pod

[11:16] *** iblechbot left
[11:20] *** elmex joined
[11:20] <mberends> </lurk> moritz_: is it a known gotcha that named parameters cause errors if they are typed and then omitted? S06 is silent on typing.

[11:22] *** ashizawa left
[11:24] <mberends> rakudo: class A { method m(:$p) { say "param $p"; }; }; A.new.m("HAI");

[11:24] <p6eval> rakudo c10807: OUTPUT«param HAI␤»

[11:24] *** hudnix left
[11:24] <mberends> rakudo: class A { method m(Str :$p) { say "param $p"; }; }; A.new.m("HAI");

[11:24] <p6eval> rakudo c10807: OUTPUT«param HAI␤»

[11:24] <mberends> rakudo: class A { method m(Str :$p) { say "param $p"; }; }; A.new.m();

[11:24] <p6eval> rakudo c10807: OUTPUT«Parameter type check failed for $p in call to m␤current instr.: 'die' pc 16844 (src/builtins/control.pir:204)␤»

[11:25] <mberends> rakudo: class A { method m(:$p) { say "param $p"; }; }; A.new.m();

[11:25] <p6eval> rakudo c10807: OUTPUT«Use of uninitialized value␤param ␤»

[11:26] <mberends> rakudo: class A { method m(:$p) { my $p2 = $p // ""; say "param $p"; }; }; A.new.m();

[11:26] <p6eval> rakudo c10807: OUTPUT«Use of uninitialized value␤param ␤»

[11:27] <mberends> rakudo: class A { method m(:$p) { my $p2 = $p // ""; say "param $p2"; }; }; A.new.m();

[11:27] <p6eval> rakudo c10807: OUTPUT«param ␤»

[11:27] <mberends> rakudo: class A { method m(Str :$p) { my $p2 = $p // ""; say "param $p2"; }; }; A.new.m();

[11:27] <p6eval> rakudo c10807: OUTPUT«Parameter type check failed for $p in call to m␤current instr.: 'die' pc 16844 (src/builtins/control.pir:204)␤»

[11:29] *** wolverian joined
[11:30] <pugs_svn> r25212 | hinrik++ | [util/perl6.vim] highlight everything in '=for code' blocks as Pod code

[11:31] <mberends> <lurk>

[11:40] *** hudnix joined
[11:45] *** cai_ joined
[11:46] *** cai left
[11:50] *** cai_ left
[11:50] *** cai_ joined
[11:53] <pugs_svn> r25213 | hinrik++ | [util/perl6.vim] rename some stuff for clarity

[11:53] *** cai_ is now known as cai

[11:54] *** cai left
[11:54] *** cai joined
[12:03] *** cwc joined
[12:10] <moritz_> mberends: not known I think... care to open a ticket?

[12:16] *** lambdabot joined
[12:17] *** meppl left
[12:17] *** meppl joined
[12:21] <mberends> </lurk>ok, later. Typed named parameters seem to be unspecified. It's a low priority. As a practical note, strong typing is becoming a useful debugging aid for Perl 6 development.

[12:31] <masak> mberends: let me know if you want me to open the ticket.

[12:32] *** jtre left
[12:32] <mberends> yes please, my online time is limited during the coming few days. your rakudobug tools is faster too ;)

[12:33] <jeremiah> masak: Reading a bit of your use perl blog and I agree with you about _why's documentation - it's inspired.

[12:33] <mberends> *tool

[12:33] * masak submits

[12:33] <masak> jeremiah: care to help? :)

[12:33] <jeremiah> masak: Actually, yes.

[12:34] * masak thought so

[12:34] <jeremiah> But I want to write documentation.

[12:34] <moritz_> masak: it might be inspiring to have a theme for documentation examples

[12:34] <masak> jeremiah: excellent.

[12:34] <mberends> is there a repo for U4X contributions?

[12:34] <jeremiah> I write for The Perl Journal, so hopefully I can combine the two.

[12:34] <masak> mberends: yes, the Pugs one

[12:34] <masak> jeremiah: great. have you looked through the u4x README?

[12:34] <moritz_> I have troubles finding topics for my examples, so a general theme might be useful

[12:35] <mberends> I also want to write documentation in Pod 6

[12:35] <jeremiah> masak: No, where is that?

[12:35] <masak> moritz_: or a few general themes.

[12:35] <jeremiah> And what is u4x?

[12:35] <masak> jeremiah: hold on, I'll get you the URL.

[12:35] <moritz_> masak: or that, yes

[12:35] <masak> jeremiah: I'll get you two URLs :)

[12:35] * jeremiah loves URLs :)

[12:35] <masak> jeremiah: http://use.perl.org/~masak/journal/38279

[12:36] <jeremiah> I also have a cartoonist friend who is quite talented, so I might get him to help. :)

[12:36] <masak> I think you read that one, but apparently not the u4x part. :)

[12:36] <masak> jeremiah: http://svn.pugscode.org/pugs/docs/u4x/README

[12:36] <masak> linked from the first one, but still.

[12:36] <masak> jeremiah: sounds very nice.

[12:36] <jeremiah> masak: Yep, you're right about the first link, have to do more than skim this time.

[12:37] <masak> :)

[12:39] <jeremiah> masak: w00t - U4X is a great idea and crucial to the success of perl6 - good docs FTW!

[12:40] <masak> jeremiah: we're on the same page, it seems.

[12:41] <masak> jeremiah: I've not abandoned the u4x project, but it gets very few tuits at present.

[12:41] <masak> I expect to come back to it soonish.

[12:41] <masak> right now November and Druid are eating my tuits.

[12:41] <mberends> <lurk afk="true"> <!-- doing too much SVG these days -->

[12:41] <masak> mberends: :P

[12:41] <jeremiah> But Who TF is Micheal Dorn

[12:41] <moritz_> masak: sadly u4x.org is already taken

[12:41] <masak> jeremiah: I still have no idea. :P

[12:41] <jeremiah> hehe

[12:41] <masak> moritz_: no matter, u4x is a throwaway project name.

[12:42] <jeremiah> Aren't they all? :)

[12:42] <masak> I wish.

[12:44] *** rindolf left
[12:45] <masak> basically, the only function of the name 'u4x' is a cool little mental tag during the period of writing the docs. I don't expect that name to appear anywhere in the docs, or in relation to them.

[12:45] <masak> ...in the long run.

[12:50] <moritz_> masak: have you decided on the exact documentation format already?

[12:50] <moritz_> (uhm, I don't think that was a correct English sentence :-)

[12:50] <masak> moritz_: no. I'll do the thinking in connection to writing one representative documentation item for each big type of thing.

[12:51] <masak> I see no problem with the sentence, btw.

[12:52] <moritz_> ah right, my dictionary lists both 'decide sth' and 'decide on sth'

[12:53] <masak> 'decided on' is what I'd write in this case.

[12:53] <masak> so, to the extent that you trust my English language sense... :)

[12:54] <moritz_> :-)

[12:58] <masak> jeremiah: I'll let you know when u4x reaches the next stage.

[13:08] <Matt-W> 'decided on' is what I would have used as well

[13:09] *** ZuLuuuuuu joined
[13:11] *** cai left
[13:12] <jeremiah> masak: great, I probably won't start poking around until next week, after FOSDEM

[13:24] *** rob joined
[13:25] *** ZuLuuuuuu left
[13:25] *** rob is now known as Guest97879

[13:29] *** hanekomu joined
[13:30] *** PantheraUncia left
[13:49] <mberends> </lurk> Brits say 'decide on', Americans say 'decide' afaik.

[13:55] <jeremiah> Sometimes we say "decide upon"

[13:56] <jeremiah> That, in fact, might be the most grammatically correct.

[13:56] <Matt-W> Different Brits say different things though

[13:56] <Matt-W> We speak more than one variant of English

[13:57] <Matt-W> Although all of them are more correct than the ones they speak over in the other place

[13:57] <Matt-W> :P

[14:00] <[particle]> australia? agreed.

[14:00] <jeremiah> Two countries divided by a common language

[14:01] <mberends> And they're over sexed, over paid and over here.

[14:03] *** smtms left
[14:15] *** Caelum left
[14:16] *** Caelum joined
[14:29] *** cwc left
[14:32] *** smtms joined
[14:33] <masak> jeremiah: that's ok. I might not have done anything by then. in any case, it's nice to have someone to brainstorm ideas with.

[14:33] <smtms> cd

[14:34] <masak> smtms: ~$

[14:42] *** dalek left
[14:42] *** dalek joined
[14:46] *** rodi joined
[14:48] <TimToady> to Americans at least, you decide a question, but you decide on an answer, using question and answer loosely

[14:49] <rodi> I have decided on more kombucha.

[14:50] <TimToady> and "decide to" is more like "decide on"

[14:52] *** SamB left
[14:54] <TimToady> "

[14:54] *** Exodist joined
[14:54] <TimToady> "Today in school I had to decide my favorite color, so I decided on green."

[14:55] <Matt-W> Assuming that the speaker didn't just say "Today in school I had to decide my favourite colour, so I chose green."

[14:56] <Matt-W> But there are always loads of ways to phrase things

[14:56] <[particle]> not in pynglish!

[14:56] <Matt-W> It helps the poets and lyricists

[15:00] *** SamB joined
[15:00] <TimToady> in CA at least we'd tend to use "picked" over "chose"

[15:01] <rodi> In DC we would say "appropriated."

[15:01] <TimToady> :)

[15:01] <rodi> :)

[15:02] <TimToady> in the rest of the country we'd say "misappropriate" for that :)

[15:02] <rodi> Inside the beltway, we wouldn't hear you saying it ;)

[15:02] <Matt-W> In Nottingham they say whatever they like, as long as they manage to squeeze a 'duck' or 'ducky' in there somewhere

[15:03] <Matt-W> I've been here for five years and I'm still not used to it

[15:05] <TimToady> you guys probably have the low castle doorway that is labelled "Duck or Grouse"

[15:05] <Matt-W> Hah, quite possibly

[15:06] <masak> oh, so _that's_ what that low door is for!

[15:06] <Matt-W> My recorder teacher's music room door only comes up to my chin, but that's not labelled. Perhaps I should get her a sign :)

[15:07] <rodi> The building I work in at the LC has 14 half-floors of stacks that are an inch above my 5'9" head.

[15:08] <[particle]> that's a big head.

[15:08] <rodi> ;)

[15:08] <Matt-W> I don't like multistorey car parks

[15:08] <Matt-W> where I end up cleaning the ceiling with my hair

[15:08] <masak> [particle]: *lol*

[15:20] *** rindolf joined
[15:26] <masak> in other news, I'm seriously considering putting an project on github containing a Perl 6 project installer, so that poeple won't hesitate to divide their large projects into smaller independent modules.

[15:27] <[particle]> "Perl 6 project installer"?

[15:27] <Matt-W> What would that do?

[15:28] <masak> Matt-W: ideally, you go 'install november', where both 'install' and 'november' are used loosely, and it installs november for you.

[15:29] <masak> November contains a lot of re-usable modules. same for a couple of other git repositories I have laying around. it'd just be easier to know that coordinating all the different repositories wouldn't be a hassle.

[15:29] <Matt-W> yes it would

[15:29] <masak> in particular, setting PERL6LIB to the appropriate values.

[15:30] * [particle] wants a vmware image with parrot, rakudo, spectest/docs, dev tools, prophet, sd, perl6-examples, november, apache, mod_perl6...

[15:30] <masak> [particle]: sounds wonderful. couldn't you blog and ask lazyweb for it?

[15:30] <[particle]> i just asked lazyirc :)

[15:30] <masak> lazyirc is too lazy :)

[15:31] <masak> we're on IRC, we're already a lost cause.

[15:31] <masak> web users are more refined.

[15:31] <masak> and blog posts have more impact, all things considered.

[15:31] <PerlJam> [particle]: an image for parrot/rakudo/etc devs?  or for users?

[15:32] *** JarJarBinks joined
[15:33] <masak> for users, I presume. I'd call it a "Perl 6 bag of candy" of something.

[15:33] <masak> s/of/or/

[15:33] <PerlJam> yeah, that would be cool.

[15:33] *** alester left
[15:33] <PerlJam> you could hand 'em out at NPW :-)

[15:35] <masak> Matt-W: well, there's a conceptual difference between "follow these 28 really simple steps" and "follow this one really simple step". that's what I'm after. I don't doubt there'll be complexities still, but I'd like to sweep them mostly under the nearest carpet.

[15:35] <masak> PerlJam: also a great idea.

[15:35] <Matt-W> masak: something that knows how to go and fetch all the different modules and get the main thing knowing where they are would be handy

[15:36] <[particle]> perljam, yes, that's right

[15:36] <Matt-W> Also I'm sorry I've not done anything useful lately on anything Perl 6-related, I'll get to it at some point

[15:36] <PerlJam> masak: Sounds like CPAN-but-not-CPAN for perl6

[15:36] <masak> Matt-W: exactly. I just want it to handle all deps and set up all the env vars.

[15:36] <masak> Matt-W: no prob.

[15:36] <masak> Matt-W: we're all volunteers here.

[15:36] <masak> PerlJam: yes, that's a good description.

[15:37] <masak> PerlJam: mind you, I don't plan to write the next CPAN.

[15:37] <masak> just scratch an immediate itch.

[15:37] <mberends> there are design docs and a limited Perl 5 implementation of 6PAN somewhere in the pugs tree

[15:38] <PerlJam> masak: I don't think Andreas or whomever set out to write the first CPAN either  :)

[15:38] <masak> PerlJam: :)

[15:38] <masak> PerlJam: maybe if I design it to be inherently limited...

[15:39] <masak> mberends: I might take a look, but I don't intend to do something like that. just a tiny package installer and deps handler.

[15:39] <masak> sort of a proto-6PAN.

[15:39] <masak> ah! that's it: 'proto'. that's what I'll call it.

[15:39] <Matt-W> If nothing else, it might tell us something about how to do 6PAN

[15:39] <masak> aye.

[15:41] <Matt-W> A bit like one of my colleagues trying to calm me down yesterday saying it doesn't matter, we're always going to go down dead ends in development, you're not the first person who had to throw away a week of incredibly fiddly code, we've learned loads from it...

[15:41] <Matt-W> Well, maybe not

[15:42] <jeremiah> Hmmm, you could build a "Perl 6 bag of candy" with debian as a live CD. Might be kinda cool.

[15:42] <moritz_> hey, nice idea :-)

[15:42] <mberends> the existing design is pugs/misc/sixpan, talks about JIB files, and being similar to Debian in dependency handling

[15:42] <masak> jeremiah++

[15:42] <PerlJam> Matt-W: heh ... I had a similar conversation with a professor here with regard to one of his grad students.  She didn't want to do lots of work only to have to throw it away.

[15:42] <jeremiah> I have been fooling around with live debian CDs - the are easy to build

[15:42] <PerlJam> jeremiah: ubuntu too  ;-)

[15:43] <jeremiah> You can even build a live CD of your current system so we should try to get a "standard" complete install and build that.

[15:43] <Matt-W> PerlJam: I'll do it if I know it's throwaway going in and I know what I'm going to get out of it, but I was led down this path by someone else who, it turns out, wasn't paying attention.

[15:44] <jeremiah> Put some documentation, a nice tutorial, and people could boot from it and start writing perl 6 right away.

[15:44] <mberends> could someone please make a LiveCD of OSX to help compatibility testing ;)

[15:44] <PerlJam> Matt-W: but that's the thing about doing stuff no one has done before ... you don't know a priori what will be thrown away (if anything)

[15:44] <jeremiah> mberends: Shouldn't be too hard to make .dmg

[15:44] <PerlJam> sometimes it's everything and you start over

[15:44] <PerlJam> jeremiah: sounds like you're volunteering

[15:45] <jeremiah> mberends: Or once the CD / ISO is built, you can run it in Virtualbox

[15:45] <mberends> VirtualBox++

[15:45] <jeremiah> PerlJam: You bet! :)

[15:45] <jeremiah> I will start on this after FOSDEM, because I know I will not get much done this weekend at FOSDEM.

[15:45] <jeremiah> :)

[15:45] <Matt-W> PerlJam: that is true, but saying to somebody who wrote a giant library 'I want to put this in it' and he says 'put it here' and turns out to be wrong, that's quite different

[15:47] <TimToady> just bear in mind that PERL6LIB is a hack, and not the correct long-term solution for the officially installed library

[15:47] <PerlJam> Matt-W: yeah, well you flip the boxo bit on the guy and never listen to him again.  living is learning :)

[15:48] <masak> TimToady: oh. I didn't know that.

[15:48] <masak> but that's ok, my installer isn't long-term either.

[15:49] <Matt-W> PerlJam: It is, but I was very angry about it yesterday

[15:49] <TimToady> we'll use PERL6LIB to look for the user's hacks, but the standard lib will have a standard API and be searchable more like a database, so we can do wildcards efficiently

[15:49] <PerlJam> masak: nothing is as temporary as you intend it to be.

[15:50] <TimToady> and the standard lib will enforce that the version number changes when the code changes

[15:50] <Matt-W> Oooh sounds good.

[15:50] <masak> PerlJam: I hear ya.

[15:50] <mberends> the Makefile.p6 I posted to perl6-examples yesterday sniffs out how you got it to run, and then infers PARROT_DIR RAKUDO_DIR and PERL6LIB semi-automagically, that could help.

[15:50] *** stephenlb joined
[15:51] <TimToady> the standard lib is more like a repo, where the things you check in are considered immutable from then on

[15:51] <masak> TimToady: I hear you too. I'm all OK with building short-term solutions that'll break when the long term sets in.

[15:51] <masak> mberends: will take a look.

[15:51] <TimToady> which is why I just said "bear in mind" :)

[15:51] <masak> TimToady: aye :)

[15:52] <masak> mberends: though as I said, I'm a bit skeptical about using distro-specific tools...

[15:52] <mberends> the distro-specific 'ps' hack is a *temporary* workaround for a missing $*PROG special var.

[15:53] <masak> mberends: oh. :)

[15:53] <masak> mberends++

[15:53] <masak> mberends: did you also create a big fat RT TODO ticket for $*PROG?

[15:53] <mberends> for the umpteenth time, sorry, no.

[15:53] <TimToady> we should have a primitive in P6 that says "this code will start throwing deprecation warnings in a year"  :)

[15:54] * masak does so

[15:54] <masak> TimToady: with our luck, it wont get implemented in Rakudo until next year :)

[15:54] <moritz_> age(:upto<2009-06-30>);

[15:55] <TimToady> use till '2009-06-30';

[15:56] <[particle]> { ... :timeout{DateTime.new('next xmas')} }

[15:56] <PerlJam> TimToady: handling of versions and authors and such has seemed very databasey but you've never mentioned any specific database (that I've seen).  Do you have any ideas on how to do that (or not to do it)?  Incorporate sqlite as part of perl6 for instance?

[15:56] <TimToady> course what happens on 2009-07-01 is the directive gets delete

[15:56] <TimToady> *deletted

[15:56] <TimToady> *deleted, gah

[15:57] <TimToady> I don't actually care, as long as the API is correct

[15:57] <mberends> self deleting code - the ultimate garbage collection

[15:57] <moritz_> TimToady: well, but if the line is deleted, the version number changes

[15:57] <Matt-W> TimToady: would you expect different Perl 6 implementations to have their own library installs?

[15:58] <TimToady> yes, more or less

[15:58] <TimToady> but maybe there could be a standard one

[15:58] <TimToady> it would depend on having certain functionality available everywhere though

[15:59] *** ejs joined
[15:59] <TimToady> ability to do crypto checksums and such

[15:59] <PerlJam> Is there a spec or will there be a spec for such things?

[16:00] <TimToady> well, high-level is in S11, but that's merely describing the intended results

[16:01] *** Tene_ joined
[16:04] *** maerzhase joined
[16:13] *** ejs left
[16:14] *** Tene left
[16:16] *** ZuLuuuuuu joined
[16:18] <[particle]> should the default autoloop splitter be on horizontal whitespace only?

[16:18] *** justatheory joined
[16:20] <literal> why is it called an autoloop splitter? does it split loops? :P

[16:21] <[particle]> it's the split character for autoloops (-n and -p)

[16:21] <TimToady> the default should be autocomb

[16:21] <TimToady> which combs for \S+ by defualt

[16:21] <TimToady> *default

[16:22] <TimToady> split(' ') is P5Thik

[16:22] <TimToady> Think, eve

[16:22] <TimToady> even, even

[16:22] <moritz_> that's odd :-)

[16:23] <PerlJam> where are the results of the auto-comb stored?

[16:23] <[particle]> ah, ok, yes it is.

[16:23] <[particle]> will fix, today.

[16:24] <TimToady> PerlJam: haven't decided, maybe just comes in as @_

[16:25] <TimToady> P5's @F is ugly

[16:25] <[particle]> i decided on @_ last night, that's the S19 spec now

[16:25] <TimToady> good

[16:25] <[particle]> @Fugly

[16:25] <lambdabot> Unknown command, try @list

[16:25] <TimToady> @die

[16:25] <lambdabot> unexpected end of input: expecting number

[16:25] <masak> :)

[16:25] <[particle]> :)

[16:25] <TimToady> @die now!

[16:25] <lambdabot> unexpected "n": expecting number

[16:25] <PerlJam> and split in void context goes to @_ again  ?  ;->

[16:25] <TimToady> @die inf

[16:25] <lambdabot> unexpected "i": expecting number

[16:25] *** maerzhase left
[16:33] *** pmurias joined
[16:41] *** alester joined
[16:42] *** mberends left
[16:44] *** maerzhase joined
[16:50] *** ZuLuuuuuu left
[17:11] *** elmex left
[17:12] *** hercynium joined
[17:12] *** hanekomu left
[17:12] *** elmex joined
[17:14] *** [particle]1 joined
[17:15] <pugs_svn> r25214 | hinrik++ | [util/perl6.vim] consolidated all keyword regexes into a few big ones, added some comments

[17:15] *** pmurias left
[17:23] <pugs_svn> r25215 | hinrik++ | [util/perl6.vim] variable cleanup

[17:23] *** azawawi joined
[17:29] *** masak left
[17:31] *** [particle] left
[17:31] *** ayrnieu left
[17:33] *** ZuLuuuuuu joined
[17:34] *** ayrnieu joined
[17:38] *** eternaleye left
[17:38] *** azawawi left
[18:02] *** mberends joined
[18:03] *** Guest97879 left
[18:04] *** aindilis joined
[18:07] *** elmex left
[18:07] *** elmex joined
[18:24] *** aindilis` joined
[18:28] *** rindolf left
[18:37] *** icwiener joined
[18:38] *** aindilis left
[18:55] *** maerzhase left
[18:57] *** Psyche^ joined
[19:01] *** M_o_C joined
[19:07] <pugs_svn> r25216 | putter++ | [elfparse] README: Fixed incorrect problem description.

[19:09] <ruoso> TimToady, have you seen the proposed IO API I drafted?

[19:12] *** Patterner left
[19:12] *** Psyche^ is now known as Patterner

[19:19] *** sail0r_ joined
[19:28] *** spx2_ left
[19:33] *** spx2 joined
[19:42] *** schmalbe joined
[19:46] <rodi>  

[19:52] *** maerzhase joined
[19:54] *** IllvilJa joined
[20:09] *** rodi left
[20:15] *** schmalbe left
[20:19] *** ejs joined
[20:27] *** DemoPhreak joined
[20:29] *** braceta left
[20:29] *** sail0r_ left
[20:30] *** aindilis` left
[20:34] *** ejs left
[20:37] *** szabgab joined
[20:43] *** zamolxes joined
[20:43] *** DemoFreak left
[20:46] *** wolverian left
[20:46] *** wolverian joined
[20:49] *** legis left
[20:53] *** M_o_C left
[21:03] *** ruoso left
[21:03] <oskie> ooh, IO APIs - that's a hot potato

[21:19] *** spx2 left
[21:19] *** spx2 joined
[21:20] *** spx2 left
[21:21] <dalek> rakudo: f990451 | (Moritz Lenz)++ | tools/autounfudge.pl:

[21:21] <dalek> rakudo: [tools/autounfudge.pl] various small updates

[21:21] <dalek> rakudo:  * follow symlinks

[21:21] <dalek> rakudo:  * allow finer graded control over what we want to have fudged

[21:21] <dalek> rakudo:  * a bit more documentation

[21:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f990451545fb50a378069eb748d99cb09021c70d

[21:25] *** spx2 joined
[21:31] *** szabgab left
[21:40] *** szabgab joined
[21:40] *** jferrero joined
[22:09] *** Whiteknight joined
[22:23] *** jferrero left
[22:46] *** iblechbot_ left
[22:54] *** szabgab left
[22:54] *** szabgab joined
[23:01] *** hercynium left
[23:04] <alester> has ANYONE seen pmichaud lately?

[23:04] <moritz_> yes

[23:04] <moritz_> sporadically

[23:05] *** wknight8111 joined
[23:05] <moritz_> for example Tuesday 18:30 UTC at #parrotsketch ;-)

[23:05] <[particle]1> alester: try email

[23:05] <[particle]1> @pobox

[23:05] <lambdabot> Unknown command, try @list

[23:07] *** Whiteknight left
[23:09] *** ZuLuuuuuu left
[23:12] <alester> particle: I have.

[23:12] <alester> ok, goin' home to work on Frozen Perl slides

[23:12] *** alester left
[23:14] *** mdxi joined
[23:18] *** mberends left
[23:19] <literal> to what extent is m:P5// like Perl 5's regex flavor? is everything the same except for the lack of postfix modifiers?

[23:22] *** szabgab left
[23:25] *** szabgab joined
[23:37] <[particle]1> it *is* perl 5 regex

[23:38] <[particle]1> yeah, i think just postfix modifiers

[23:45] <literal> and is P5 the only adverb allowed, or can you use others, e.g. m:P5:pos($foo)/bar/

[23:48] *** icwiener left
[23:51] *** DemoPhreak is now known as DemoFreak

[23:57] *** Limbic_Region joined
