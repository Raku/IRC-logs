[00:00] *** dKingston_ joined
[00:00] *** dKingston left
[00:05] *** icwiener left
[00:09] *** wknight8111 left
[00:11] <cspencer> perl6: join()

[00:11] <p6eval> rakudo 370dd7: OUTPUT«No applicable methods.␤␤current instr.: '_block14' pc 59 (EVAL_16:38)␤»

[00:11] <p6eval> ..pugs: OUTPUT«*** No compatible multi variant found: "&join"␤    at /tmp/e1oP3YAh7S line 1, column 1 - line 2, column 1␤»

[00:11] <p6eval> ..elf 26023: OUTPUT«Undefined subroutine &GLOBAL::join called at (eval 122) line 3.␤ at ./elf_h line 5881␤»

[00:12] <cspencer> perl6: join(' ')

[00:13] <p6eval> rakudo 370dd7: RESULT«""»

[00:13] <p6eval> ..pugs: RESULT«" "»

[00:13] <p6eval> ..elf 26023: OUTPUT«Undefined subroutine &GLOBAL::join called at (eval 123) line 3.␤ at ./elf_h line 5881␤»

[00:15] <cspencer> perl6: my @a; @a.join

[00:15] <p6eval> pugs, rakudo 370dd7: RESULT«""»

[00:15] <p6eval> ..elf 26023: OUTPUT«Use of uninitialized value $sep in join or string at ./elf_h line 196.␤»

[00:17] <cspencer> hmmm....should "join" and "my @a; @a.join" both return the empty string since they're both joining on an empty list?

[00:20] *** Gruber left
[00:25] *** DemoFreak left
[00:31] *** Grrrr joined
[00:32] *** Sepheebear left
[00:37] *** stitchup joined
[00:41] *** justatheory left
[00:42] <mikehh> i did a make realclean and built against my previous parrot build and get the same failures

[00:43] <skids> cspencer: isn't "my @a" not an empty list, but an unbound name?

[00:45] <mikehh> ./perl6 t/spec/S29-conversions/ord_and_chr.rakudo - ok 300 - # SKIP named args, Segmentation fault

[00:45] <bacek_> perl6: say defined my @a

[00:45] <p6eval> elf 26023: OUTPUT«syntax error at (eval 123) line 3, at EOF␤ at ./elf_h line 5881␤»

[00:45] <p6eval> ..pugs, rakudo 370dd7: OUTPUT«1␤»

[00:46] *** rdesfo joined
[00:52] *** Unixmonkey joined
[01:00] *** rdesfo left
[01:00] *** amoc left
[01:04] *** ujwalic left
[01:11] *** bsb_ joined
[01:13] *** wayland76 joined
[01:17] *** cspencer left
[01:17] *** alc joined
[01:24] <meppl> good night

[01:25] *** fridim_ joined
[01:26] *** bsb left
[01:27] *** meppl left
[01:34] *** kst left
[01:34] *** kst joined
[01:49] *** Khisanth left
[01:54] *** Khisanth joined
[01:57] *** kimtaro joined
[02:02] *** alc left
[02:02] <wayland76> good night meppl

[02:06] *** ron_ joined
[02:07] <ron_> rakudo: say 102030405.split(0).perl

[02:07] <p6eval> rakudo 370dd7: OUTPUT«["1", "2", "3", "4", "5"]␤»

[02:09] *** orafu joined
[02:11] *** ron_ left
[02:14] *** alc joined
[02:14] *** Outh9X left
[02:25] *** OuLouFu left
[02:28] <s1n> frioux: ping

[02:28] *** dKingston_ left
[02:29] <s1n> masek going by another alias lately?

[02:30] *** alester joined
[02:37] <s1n> std: class 5g5 { has $.yay; }

[02:37] <wayland76> Maybe he's been overtaken by real life

[02:38] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Malformed class␤Unable to parse class definition at /tmp/QUWl8HPkpN line 1:␤------> class 5g5 { has $.yay; }␤    expecting any of:␤     name␤   trait␤FAILED 00:02 34m␤»

[02:38] <wayland76> It happened to me for a couple of weeks :)

[02:38] <s1n> yeah it happens

[02:38] <s1n> classes can't start with numbers?

[02:38] <wayland76> std: class g5g5 { has $.yay; }

[02:38] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[02:38] <s1n> guess not

[02:38] <wayland76> I guess not

[02:39] <wayland76> identifiers (whether classes or otherwise) traditionally have restrictions on their first characters

[02:39] <wayland76> Lets try this: 

[02:39] <s1n> i wasn't aware the same rule applied to classes/roles/methods/etc

[02:40] <lucs> s1n: masek or masak?

[02:40] <wayland76> std: $55fff

[02:40] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/jqtNyRwHft line 0:␤------> ␤    expecting prefix or noun␤FAILED 00:02 35m␤»

[02:40] <s1n> lucs: is there a difference?

[02:40] <wayland76> std: $fff

[02:40] <p6eval> std 26023: OUTPUT«Potential difficulties:␤  Variable $fff is not predeclared at /tmp/5ldosc3dvq line 1:␤------> $fff␤ok 00:02 35m␤»

[02:40] <wayland76> std: my($fff);

[02:40] <p6eval> std 26023: OUTPUT«Potential difficulties:␤  Variable $fff is not predeclared at /tmp/q3LxAXjYqF line 1:␤------> my($fff);␤Undeclared routine:␤   my used at 1 ␤ok 00:02 35m␤»

[02:40] <s1n> lucs: or did i just mispell his name?

[02:40] <s1n> std: my $fff

[02:40] <wayland76> std: my($fff) = "hi";

[02:40] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[02:40] <p6eval> std 26023: OUTPUT«Potential difficulties:␤  Variable $fff is not predeclared at /tmp/EaJ7s3Oeg5 line 1:␤------> my($fff) = "hi";␤Undeclared routine:␤    my used at 1 ␤ok 00:04 35m␤»

[02:40] <lucs> s1n: I've seen masak, but not the other...

[02:40] <wayland76> std: my $fff = "hi";

[02:41] <p6eval> std 26023: OUTPUT«ok 00:04 35m␤»

[02:41] <s1n> std: my ($fff) = ("hi")

[02:41] <wayland76> std: my $66fff = "hi";

[02:41] <p6eval> std 26023: OUTPUT«ok 00:04 36m␤»

[02:41] <p6eval> std 26023: OUTPUT«ok 00:04 38m␤»

[02:41] <s1n> huh?

[02:41] <s1n> std: my $6t;

[02:41] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/VYAdxZRwYh line 1:␤------> my $6t;␤    expecting any of:␤  POST␤   infix or meta-infix␤        infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       shape definition␤ standard

[02:41] <p6eval> ..stopper␤       statement modifier loop...

[02:41] <s1n> std: my $66ff;

[02:41] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/d8aFqvLZxl line 1:␤------> my $66ff;␤    expecting any of:␤    prefix or noun␤   whitespace␤Other potential difficulties:␤  Redeclaration of $66 (from line 1) at /tmp/d8aFqvLZxl line 1:␤------>

[02:41] <p6eval> .....

[02:41] <wayland76> std: my $66fff;

[02:41] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/w9W41s69aN line 1:␤------> my $66fff;␤    expecting any of:␤   prefix or noun␤   whitespace␤Other potential difficulties:␤  Redeclaration of $66 (from line 1) at /tmp/w9W41s69aN line 1:␤------>

[02:41] <p6eval> ..[32...

[02:42] <s1n> std: my $66ff = "this is wrong"

[02:42] <p6eval> std 26023: OUTPUT«ok 00:04 38m␤»

[02:42] <s1n> uhoh

[02:42] <wayland76> hahaha :)

[02:42] <wayland76> Did we find a STD bug?

[02:42] * s1n pokes TimToady

[02:42] <wayland76> TimToady: ping!

[02:43] <s1n> std: class 66ff { has $.poo };

[02:43] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Malformed class␤Unable to parse class definition at /tmp/iEJ1sgUtjM line 1:␤------> class 66ff { has $.poo };␤    expecting any of:␤    name␤   trait␤FAILED 00:02 34m␤»

[02:43] <s1n> std: class foo { has $.66ff }

[02:43] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Malformed class␤Unable to parse class definition␤Malformed has at /tmp/HoYOnfsuNZ line 1:␤------> class foo { has $.66ff }␤    expecting special_variable__S_185DollarDot␤FAILED 00:02 35m␤»

[02:44] <s1n> std: class foo { has $.66ff = "bzzzt" }

[02:44] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Malformed class␤Unable to parse class definition␤Malformed has at /tmp/Pa5j8emOnq line 1:␤------> class foo { has $.66ff = "bzzzt" }␤    expecting special_variable__S_185DollarDot␤FAILED 00:02 35m␤»

[02:44] <s1n> hmm odd bug

[02:44] <wayland76> Anyway, it looks like identifiers can't begin with a non-letter

[02:44] <wayland76> std: my $6 6fff = "hi";

[02:44] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/ljVYj6l0YI line 1:␤------> my $6 6fff = "hi";␤    expecting any of:␤       infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤     trait␤FAILED 00:02

[02:44] <p6eval> ..35m␤»

[02:44] <s1n> and non-twigil of any kind (such as .)

[02:44] <s1n> std: my $66\ ff = "hi"

[02:45] <p6eval> std 26023: OUTPUT«ok 00:04 38m␤»

[02:45] <s1n> heh

[02:45] <wayland76> Now that has obfus potential :)

[02:45] <wayland76> rakudo: $\  = "hi";

[02:45] <p6eval> rakudo 370dd7: OUTPUT«Syntax error at line 1, near "$\\  = \"hi\""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:46] <s1n> std: my $\ 6\ 6\ f\ f = "hi"

[02:46] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Malformed my␤Obsolete use of $\ variable; in Perl 6 please use the filehandle's :ors attribute instead at /tmp/jsrF52imeh line 1:␤------> my $\ 6\ 6\ f\ f = "hi"␤FAILED 00:02 35m␤»

[02:46] <diakopter> std: my $a66\ ff = "hi"; say $a66ff

[02:46] <s1n> std: $6\ 6 = "hi"

[02:46] <p6eval> std 26023: OUTPUT«Potential difficulties:␤  Variable $a66ff is not predeclared at /tmp/0z3CuNlfpg line 1:␤------> my $a66\ ff = "hi"; say $a66ff␤ok 00:04 38m␤»

[02:46] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/86HcMvDYhv line 1:␤------> $6\ 6 = "hi"␤    expecting any of:␤     infix or meta-infix␤      infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       standard stopper␤ statement modifier

[02:46] <p6eval> ..loop␤  terminator␤     unspa...

[02:46] <s1n> diakopter: nice one

[02:46] <wayland76> rakudo: $.\ = "hi"; 

[02:46] <p6eval> rakudo 370dd7: OUTPUT«Syntax error at line 1, near "$.\\ = \"hi\""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:47] <wayland76> rakudo: $^\ = "hi"; 

[02:47] <p6eval> rakudo 370dd7: OUTPUT«Syntax error at line 1, near "$^\\ = \"hi\""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:47] <wayland76> Oh well :)

[02:47] <s1n> rakudo: my $66ff = "hi"; say $66ff

[02:47] <p6eval> rakudo 370dd7: OUTPUT«Malformed declaration at line 1, near "$66ff = \"h"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:47] <s1n> heh

[02:47] <s1n> rakudo is more correct??

[02:48] <diakopter> how's that

[02:48] <s1n> diakopter: watch

[02:49] *** justatheory joined
[02:49] <s1n> std: my $66ff = "wrong";

[02:49] <p6eval> std 26023: OUTPUT«ok 00:04 38m␤»

[02:49] <s1n> rakudo: my $66ff = "wrong"

[02:49] <p6eval> rakudo 370dd7: OUTPUT«Malformed declaration at line 1, near "$66ff = \"w"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[02:49] <diakopter> std: my $66ff = "wrong"; say $66ff

[02:49] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Syntax error at /tmp/2g9Z14ik5z line 0:␤------> ␤    expecting prefix or noun␤FAILED 00:04 38m␤»

[02:49] <diakopter> std: my $66ff = "wrong"; say 1

[02:49] <p6eval> std 26023: OUTPUT«ok 00:04 38m␤»

[02:49] <s1n> something goofy with that declaration

[02:50] <s1n> usage becomes an error and only works if i assign it something

[02:52] <diakopter> std: my $1;

[02:52] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[02:52] <diakopter> std: my $01;

[02:52] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[02:52] <diakopter> std: my $$01;

[02:52] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[02:52] <diakopter> std: my $$$01;

[02:52] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[02:53] <diakopter> hm

[02:57] *** alc left
[02:58] <s1n> rakudo: class Foo { method bar { say "foobar" }; method baz { bar; }}; class Blah is Foo { method bar { say "meh" } }; Blah.bar

[02:58] <p6eval> rakudo 370dd7: OUTPUT«meh␤»

[02:58] <s1n> hmm, i must be doing something wrong then

[02:59] *** orafu left
[02:59] *** OuLouFu joined
[03:05] *** alester left
[03:08] *** orafu joined
[03:09] <diakopter> std: class Foo { method bar { say "foobar" }; method baz { bar; }}; class Blah is Foo { method bar { say "meh" } }; Blah.bar

[03:09] <p6eval> std 26023: OUTPUT«Undeclared routine:␤   bar used at 1 ␤ok 00:04 35m␤»

[03:10] <diakopter> std: class Foo { method bar { say "foobar" }; method baz { bar; }}; class Blah is Foo { method bar { say "meh" } }; (Blah $a = 3).bar

[03:10] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/65G5IHSoQs line 1:␤------> Foo { method bar { say "meh" } }; (Blah $a = 3).bar␤    expecting any of:␤      infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤ 

[03:10] <p6eval> ..terminator␤FAILED...

[03:10] <diakopter> std: class Foo { method bar { say "foobar" }; method baz { bar; }}; class Blah is Foo { method bar { say "meh" } }; (my Blah $a = 3).bar

[03:10] <p6eval> std 26023: OUTPUT«Undeclared routine:␤   bar used at 1 ␤ok 00:04 36m␤»

[03:10] <diakopter> std: class Foo { method bar { say "foobar" }; method baz { bar; }}; class Blah is Foo { method bar { say "meh" } }; (my Blah $a).bar

[03:10] <p6eval> std 26023: OUTPUT«Undeclared routine:␤   bar used at 1 ␤ok 00:04 36m␤»

[03:10] <diakopter> std: class Foo { method bar { say "foobar" }; method baz { bar; }}; class Blah is Foo { method bar { say "meh" } }; (my Blah $a).bar()

[03:11] <p6eval> std 26023: OUTPUT«Undeclared routine:␤   bar used at 1 ␤ok 00:04 36m␤»

[03:11] <s1n> wierd

[03:12] *** kst left
[03:12] *** kst joined
[03:23] <wayland76> Or weird even :)

[03:24] *** OuLouFu left
[03:33] *** fridim_ left
[03:36] *** alc joined
[03:39] *** Unixmonkey left
[04:32] *** alc left
[04:35] <mikehh> I am also getting something weird - I rebuild rakudp on parror r37816 ran make t/spec/S29-conversions/ord_and_chr.t it failed after ok 300

[04:36] <mikehh> I then ran ./perl6 t/spec/S29-conversions/ord_and_chr.rakudo and it passed - ran all the tests

[04:38] <mikehh> I reran make t/spec/S29-conversions/ord_and_chr.t it failed - I reran ./perl6 t/spec/S29-conversions/ord_and_chr.rakudo it had a Segmentation fault

[04:40] *** justatheory left
[05:00] *** kst left
[05:00] *** kst joined
[05:10] *** alc joined
[05:10] *** justatheory joined
[05:31] *** justatheory left
[05:40] <mikehh> ok I am now passing all tests on parrot r37816 - perl Configure.pl --test PASS, make smoke PASS, make fulltest PASS

[05:41] <stitchup> :)

[05:41] <mikehh> on Ubuntu Intrepid Amd64

[05:41] <stitchup> Goodnight #perl6

[05:41] <stitchup> o/

[05:41] *** stitchup left
[05:43] <mikehh> however I am still failing t/spec/S29-conversions/ord_and_chr.t on rakudo built on it

[05:44] *** parduncia joined
[05:57] *** mtnviewmark joined
[05:57] <mtnviewmark> std: *<=21

[05:57] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤(Possible runaway string from line 1)␤Unable to parse quote-words subscript; couldn't find right angle quote at /tmp/tFVVF44TSE line 0:␤------> ␤FAILED 00:02 34m␤»

[05:58] <mtnviewmark> std: { $_ <= 21 }

[05:58] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[05:58] <mtnviewmark> std: * <= 21

[05:58] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[05:58] <mtnviewmark> perl6: say 1 | 2

[05:58] <p6eval> elf 26023: OUTPUT«3␤»

[05:58] <p6eval> ..rakudo 370dd7: OUTPUT«Junction<0xb5fce930>␤»

[05:58] <p6eval> ..pugs: OUTPUT«any(VInt 1,VInt 2)␤»

[05:59] <mtnviewmark> perl6: say 3 | undef

[05:59] <p6eval> rakudo 370dd7: OUTPUT«Junction<0xb5fea188>␤»

[05:59] <p6eval> ..elf 26023: OUTPUT«Use of uninitialized value $b in bitwise or (|) at ./elf_h line 5775.␤3␤»

[05:59] <p6eval> ..pugs: OUTPUT«any(VUndef,VInt 3)␤»

[05:59] <mtnviewmark> perl6: $a = 3 | undef | 5; say $a < 10

[06:00] <p6eval> rakudo 370dd7: OUTPUT«Scope not found for PAST::Var '$a' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[06:00] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected " ="␤    expecting "::"␤    Variable "$a" requires predeclaration or explicit package name␤    at /tmp/C7kmlqYbUg line 1, column 3␤»

[06:00] <p6eval> ..elf 26023: OUTPUT«Undefined subroutine &GLOBAL::prefix__124 called at (eval 127) line 3.␤ at ./elf_h line 5881␤»

[06:00] <mtnviewmark> perl6: say (3 & undef & 5) < 10

[06:00] <p6eval> pugs: OUTPUT«all(VBool True)␤»

[06:00] <p6eval> ..rakudo 370dd7: OUTPUT«Use of uninitialized value␤Junction<0xb5fc5c78>␤»

[06:00] <p6eval> ..elf 26023: OUTPUT«No viable candidate for call to multimethod infix__38(#,$,#) at (eval 125) line 3␤ at ./elf_h line 5881␤»

[06:07] *** rgs joined
[06:07] <mtnviewmark> perl6: say 1|11 + 5

[06:07] <p6eval> rakudo 370dd7: OUTPUT«Junction<0xb60a74f8>␤»

[06:07] <p6eval> ..pugs: OUTPUT«any(VInt 1,VInt 16)␤»

[06:07] <p6eval> ..elf 26023: OUTPUT«17␤»

[06:08] <mtnviewmark> rakudo: my $a = 1|11 + 5; $b = ($a < 10) ? $a : 'moo'; say $b

[06:08] <p6eval> rakudo 370dd7: OUTPUT«Statement not terminated properly at line 1, near "? $a : 'mo"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[06:08] <mtnviewmark> heh

[06:08] <mtnviewmark> rakudo: my $a = 1|11 + 5; $b = ($a < 10) ?? $a !! 'moo'; say $b

[06:08] <p6eval> rakudo 370dd7: OUTPUT«Scope not found for PAST::Var '$b' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[06:09] <mtnviewmark> rakudo: my $a = 1|11 + 5; my $b = ($a < 10) ?? $a !! 'moo'; say $b

[06:09] <p6eval> rakudo 370dd7: OUTPUT«Junction<0xb6032480>␤»

[06:09] <wayland76> I shun that sort of junk  (junk-shun, get it?  :) )

[06:10] <mtnviewmark> rakudo: my sub st(Any $v, &pred) { pred($v) ?? $v !! undef; }; my $a = 1|11 + 5; my $b = st($a, * < 10); say $b

[06:10] <p6eval> rakudo 370dd7: OUTPUT«Use of uninitialized value␤Non-Callable argument for pred in call to st␤current instr.: 'die' pc 15621 (src/builtins/control.pir:204)␤»

[06:10] <mtnviewmark> oy! :-O

[06:10] <mtnviewmark> rakudo: my sub st(Any $v, &pred) { pred($v) ?? $v !! undef; }; my $a = 1|11 + 5; my $b = st($a, {$_ < 10}); say $b

[06:10] <p6eval> rakudo 370dd7: OUTPUT«Junction<0xb69dfdf8>␤»

[06:11] <mtnviewmark> rakudo: my sub st(Any $v, &pred) { pred($v) ?? $v !! undef; }; my $a = 1|11 + 5; my $b = st($a, {$_ < 10}); say $b.perl()

[06:11] <p6eval> rakudo 370dd7: OUTPUT«any(1, undef)␤»

[06:11] *** finanalyst joined
[06:11] <mtnviewmark> 1? not 6?

[06:11] <mtnviewmark> rakudo say (1|11 + 5).perl()

[06:12] <mtnviewmark> rakudo: say (1|11 + 5).perl()

[06:12] <p6eval> rakudo 370dd7: OUTPUT«any(1, 16)␤»

[06:12] <mtnviewmark> oy

[06:12] <mtnviewmark> rakudo: say ((1|11) + 5).perl()

[06:12] <finanalyst> its a junction

[06:12] <p6eval> rakudo 370dd7: OUTPUT«any(6, 16)␤»

[06:12] <mtnviewmark> right - just a operator precedence error on my part -- consider the irony!

[06:13] <mtnviewmark> rakudo: my sub st(Any $v, &pred) { pred($v) ?? $v !! undef; }; my $a = (1|11) + 5; my $b = st($a, {$_ < 10}); say $b.perl()

[06:13] <p6eval> rakudo 370dd7: OUTPUT«any(6, undef)␤»

[06:13] <mtnviewmark> rakudo: my $a = (1|11) + 5; my $b = ($a < 10) ?? $a !! 'moo'; say $b.perl()

[06:13] <p6eval> rakudo 370dd7: OUTPUT«any(6, 16)␤»

[06:13] <mikehh> I went back to my rakudo directory at build 7af829f did a make realclean and built against parrot r37816

[06:14] <mtnviewmark> ah - Junctions are an area where you wrap a sub-expression as a subroutine --- and bang! you get different results!

[06:14] <mtnviewmark> though it is understandable....

[06:15] <mikehh> make t/spec/S29-conversions/ord_and_chr.t passes

[06:16] <mikehh> i then did a make realclean, git pull (370dd76), make, make spectest_update, make  t/spec/S29-conversions/ord_and_chr.t - fails

[06:18] <mikehh> so does  ./perl6 t/spec/S29-conversions/ord_and_chr.rakudo  - Segmentation fault

[06:19] <mikehh> so at this stage all I can conclude is that the falult lies between 7af829f and 370dd76

[06:25] <mikehh> the only thing I can possibly attribute it to (from the git pull)  src/setting/Match.pm      |   23 +++++++++++++++--------

[06:26] <mikehh> all the other changes were doc changes and README

[06:27] *** wayland76 left
[06:28] <finanalyst> mtnviewmark: i think you are getting an auto threading result because of the callback to pred

[06:28] <finanalyst> rakudo: my sub st(Any $v, &pred) { my $z=pred($v);say $z.perl;$z ?? $v !! undef; }; my $a = (1|11) + 5; my $b = st($a, {$_ < 10}); say $b.perl()

[06:28] <p6eval> rakudo 370dd7: OUTPUT«Bool::True␤Bool::False␤any(6, undef)␤»

[06:28] <mtnviewmark> yup - I understand it - but it may be a pitfall for some

[06:29] <mtnviewmark> I actually wanted auto-threading in this case

[06:29] <finanalyst>  rakudo: my sub st(junction $v, &pred) { my $z=pred($v);say $z.perl;$z ?? $v !! undef; }; my $a = (1|11) + 5; my $b = st($a, {$_ < 10}); say $b.perl()

[06:29] <p6eval> rakudo 370dd7: OUTPUT«Malformed routine definition at line 1, near "st(junctio"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[06:30] <mtnviewmark> just that I was mentally in-lining the sub the first time --- and of course it doesn't thread the way I wanted when in-lined

[06:30] <finanalyst> rakudo: my sub st(Junction $v, &pred) { my $z=pred($v);say $z.perl;$z ?? $v !! undef; }; my $a = (1|11) + 5; my $b = st($a, {$_ < 10}); say $b.perl()

[06:30] <p6eval> rakudo 370dd7: OUTPUT«any(Bool::True, Bool::False)␤any(6, 16)␤»

[06:31] <mtnviewmark> now, if my suggestion to never accumulated undef back into Junctions from auto-threaded results is accepted... then we have an easy solution to the "black jack" conundrum on the mailing list

[06:31] <mtnviewmark> ...but not if you inline it!

[06:37] <diakopter> heh

[06:39] <mtnviewmark> actually - Junctions will show up other oddities: like:

[06:39] <mtnviewmark> rakudo: my $a = 3|5; say $a < $a;

[06:39] <p6eval> rakudo 370dd7: OUTPUT«Junction<0xb6092908>␤»

[06:39] <mtnviewmark> rakudo: my $a = 3|5; say ($a < $a).perl()

[06:39] <p6eval> rakudo 370dd7: OUTPUT«any(any(Bool::False, Bool::True), any(Bool::False))␤»

[06:40] <mtnviewmark> vs. 

[06:41] <mtnviewmark> rakudo: my sub lessthan($x, $y) { return $x < $y; }; my $a = 3|5; say lessthan($a, $a).perl()

[06:41] <p6eval> rakudo 370dd7: OUTPUT«any(any(Bool::False, Bool::True), any(Bool::False))␤»

[06:41] <mtnviewmark> oh

[06:41] <mtnviewmark> hmmmmmmmm.,

[06:41] <finanalyst> mtnviewmark: you have two code blocks in previous example

[06:41] <finanalyst> the subroutine, and the pred block

[06:42] <finanalyst> here you only have one

[06:42] <mtnviewmark> rakudo: my sub lessthan($x) { return $x < $x; }; my $a = 3|5; say lessthan($a).perl()

[06:42] <p6eval> rakudo 370dd7: OUTPUT«any(Bool::False)␤»

[06:42] <mtnviewmark> this is what I meant

[06:44] <mtnviewmark> again - I understand what is going on - it is just that within an expression, if a given junction is mentioned twice, people might be expecting that "selected" values will only be used against the same 'selected' value

[06:44] <finanalyst> u r not getting all combinations of a junction

[06:44] *** DemoFreak joined
[06:44] <mtnviewmark> right - I realize

[06:45] <mtnviewmark> consider 

[06:45] <finanalyst> rakudo: my sub lessthan(Junction $x) { return $x < $x; }; my $a = 3|5; say lessthan($a).perl

[06:45] <p6eval> rakudo 370dd7: OUTPUT«any(any(Bool::False, Bool::True), any(Bool::False))␤»

[06:45] <mtnviewmark> in most cases, users should not be aware that they are dealing with a Junction

[06:45] <mtnviewmark> so

[06:46] <mtnviewmark> you write something liek this:

[06:46] <finanalyst> in order to get auto-threading, the default type of a subroutine is Object, which excludes a junction

[06:46] <mtnviewmark> rakudo: my $a = 3|5; $b = $a < 4 ?? 'cat' !! 'dog'; say $b.perl()

[06:46] <p6eval> rakudo 370dd7: OUTPUT«Scope not found for PAST::Var '$b' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[06:46] <mtnviewmark> rakudo: my $a = 3|5; my $b = $a < 4 ?? 'cat' !! 'dog'; say $b.perl()

[06:47] *** kst left
[06:47] <p6eval> rakudo 370dd7: OUTPUT«"cat"␤»

[06:47] <mtnviewmark> whereas:

[06:47] *** kst joined
[06:47] <mtnviewmark> rakduo: my sub choose($x) { return $x < 4 ?? 'cat' !! 'dog'; }; my $a = 3|5; my $b = choose($a); say $b.perl()

[06:48] <mtnviewmark> rakudo: my sub choose($x) { return $x < 4 ?? 'cat' !! 'dog'; }; my $a = 3|5; my $b = choose($a); say $b.perl()

[06:48] <p6eval> rakudo 370dd7: OUTPUT«any("cat", "dog")␤»

[06:48] <mtnviewmark> I bet the user expected this output in the first statement

[06:49] <mtnviewmark> where the expression wasn't wrapped in a sub

[06:50] <mtnviewmark> I think the problem stems from the interaction of comparisons and junctions -- which isn't always what one wants

[06:50] <mtnviewmark> rakudo: my $a = 3|4; my $b = $a < 4; say $b.perl()

[06:50] <p6eval> rakudo 370dd7: OUTPUT«any(Bool::True, Bool::False)␤»

[06:50] <finanalyst> possibly, but junctions are weird and useful

[06:50] <mtnviewmark> perhaps, the problem here is that ??!! isn't autothreading

[06:51] <moritz_> it's not a problem

[06:51] <finanalyst> u have focussed here on any junctions

[06:51] <moritz_> nothing in boolean context autothreads

[06:51] <moritz_> if we change that, we open a whole can of worms

[06:52] <mtnviewmark> oh - I didin't mean "problem - needs to be changed" -- I meant "problem - causing problems for how users will likely think"

[06:52] <moritz_> I guess whatever we do, junctions will behave unexpectedly in some cases

[06:52] <mtnviewmark> usually, you think you can in-line a simple function, or wrap up a complex expression into a sub -- and that makes no difference to the program

[06:53] *** nacho left
[06:53] <mtnviewmark> but with junctions around, it might

[06:56] <moritz_> blocks are intended for simple functions, and they default to no autothreading

[06:56] <mtnviewmark> well - one might make the expression into a function because one needs it in multiple places... eh?

[06:57] <mtnviewmark> since functions can return Junctions to callers who don't suspect it....

[06:57] <finanalyst> rakudo: my sub st(Any $v, &pred) { my $z=pred($v);say $z.perl;$z ?? $v !! undef; }; my $a = (1|11) + 5; my $b = st($a, {$_ < 10}); say $b.perl

[06:57] *** orafu left
[06:57] <p6eval> rakudo 370dd7: OUTPUT«Bool::True␤Bool::False␤any(6, undef)␤»

[06:57] *** OuLouFu joined
[06:57] <diakopter> s/circumfix/outfix/g

[06:58] <finanalyst> moritz_: in the last code line of mine, is the block 'pred' autothreading?

[06:58] <mtnviewmark> the caller can get a value, and then by choice of how they structure their code can get different results - whereas the "expression" or "subroutine" choice is usually non-semantic

[06:59] <finanalyst> mtnviewmark: by including junctions, perl6 is making a semantic difference, I think

[06:59] <moritz_> finanalyst: seems like not

[07:00] <mtnviewmark> my $a = something(...); $b = $a < 10 ?? 'cat' !! 'dog'; return $b

[07:00] <mtnviewmark> so here's the point.... the code I just wrote --- usually you can choose to make that middle statement into a function call as this:

[07:00] <mikehh> moritz_: hi did you see my comments on that test

[07:00] <mtnviewmark> my $a = something(...); $b = pick_cat_or_dog($a); return $b

[07:01] <moritz_> mikehh: I did

[07:01] <mtnviewmark> but if something() returns a junction, then this choice makes a major difference.....

[07:01] <mtnviewmark> ... yet the writer of this code isn't even aware that something() might return a junction

[07:02] <mtnviewmark> (unless we auto-thread the continuations from returns.... :-)  )

[07:02] <moritz_> the whole point of autothreading is that not all code needs to be aware of junctions

[07:02] <mtnviewmark> right - these two functions don't look like they need to be aware of Junctions - only they author has to be

[07:03] <mtnviewmark> because pick_cat_or_dog() vs. $a < 10 ?? 'cat' !! 'dog'  --- will do different things if something() returns a junction

[07:04] <mtnviewmark> ( where   sub pick_cat_or_dog($x) { return $x < 10 ?? 'cat' !! 'dog'; }   ... of course )

[07:05] <finanalyst> rakudo: my sub choose($x) { return $x < 4 ?? 'cat' !! 'dog'; }; my $a = 3|5; say choose($a).perl; say ($a<4).perl

[07:05] <p6eval> rakudo 370dd7: OUTPUT«any("cat", "dog")␤any(Bool::True, Bool::False)␤»

[07:05] <mtnviewmark> Basically, it means I cannot write code ignorant of Junctions ever....

[07:05] <mtnviewmark> or I'll have to protect myself by making sure every value I get returned from a sub is passed to a sub, and not an expression with boolean context

[07:06] <finanalyst> mtnviewmark: not quite getting your argument. In last code fragment, both subroutine and < work produce consistent results, namely a junction.

[07:07] <mtnviewmark> no, the code where the ??!! operates direction on the junction doesn't produce a junction 

[07:07] <finanalyst> rakudo: my sub choose($x) { return $x < 4 ?? 'cat' !! 'dog'; }; my $a = 3|5; say ?(choose($a)); say ?($a<4)

[07:07] <p6eval> rakudo 370dd7: OUTPUT«1␤1␤»

[07:08] <finanalyst> here boolean context on both produces the same result

[07:08] <finanalyst> :)

[07:08] <mtnviewmark> uhm

[07:08] <finanalyst> it is the boolean context of ?(), or ??!!, that is different

[07:09] <mtnviewmark> rakudo: my sub choose($x) { return $x < 4 ?? 'cat' !! 'dog'; }; my $a = 3|5; say choose($a).perl(); say ($a < 4 ?? 'cat' !! 'dog').perl()

[07:09] <p6eval> rakudo 370dd7: OUTPUT«any("cat", "dog")␤"cat"␤»

[07:09] <mtnviewmark> there - see - the outputs are different

[07:09] <finanalyst> but different contexts have different results on containers 

[07:09] <finanalyst> u are using different contexts

[07:09] <mtnviewmark> but the programmer thinks: "all I did was put a common expression into a sub...."

[07:10] <finanalyst> 1st say imposes string context on result, 2nd say imposes boolean context

[07:10] <mtnviewmark> (or if they started with the sub) "all I did was in-line a simple one-expression sub..."

[07:10] <mtnviewmark> no - I don't think so.... the results are all in string context

[07:10] <moritz_> the idea of a programming language that doesn't need an FAQ is an illusion, I fear

[07:11] <finanalyst> what the programer thinks and what he does are not always the same

[07:12] <finanalyst> rakudo: my $a='hi there'; say ?($a); say $a

[07:12] <p6eval> rakudo 370dd7: OUTPUT«1␤hi there␤»

[07:12] <mtnviewmark> of course... BUT --- it is usually one of the major tenents of programming systems that wrapping or un-wrapping a subroutine around some code doesn't change the result

[07:12] <diakopter> where's the FHBW (Frequently head-banged wall)

[07:13] <mtnviewmark> oh - I'll go find it and bang it some more.... :-)

[07:13] <finanalyst> as in parameters passed by value, passed by reference, etc

[07:14] <diakopter> mtnviewmark: tenets?

[07:14] <mtnviewmark> right - remember all the bizarness with calling conventions and expressions like   foo($a[$i], $i)

[07:14] <mtnviewmark> in languages where foo() could modify $i, as seen in the outer scope?

[07:14] *** agentzh left
[07:15] <mtnviewmark> if foo is something like    foo($v, $i) { $i = 3, return $v; }

[07:15] <mtnviewmark> there are calling conventions where $v will be $a[3]!

[07:15] <mtnviewmark> but those things have long fallen by the wayside as producing semantics that are too hard to work with 

[07:15] *** nihiliad left
[07:16] <mtnviewmark> one of the reasons is that wrapping or un-wrapping such subroutines yields very odd results

[07:16] <mtnviewmark> er, yes tenets

[07:18] <mtnviewmark> oooo - late!

[07:18] <mtnviewmark> must sleep

[07:18] <mtnviewmark> laters

[07:18] *** mtnviewmark left
[07:18] <diakopter> std: my $a=1; $a[$a].$a

[07:18] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[07:19] <diakopter> std: my $a=1; ($a)$a[$a].$a

[07:19] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/oqljiVSkae line 1:␤------> my $a=1; ($a)$a[$a].$a␤    expecting any of:␤   POST␤   infix or meta-infix␤        infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       standard stopper␤

[07:19] <p6eval> ..statement modifier loop␤  t...

[07:19] <diakopter> std: my $a=1; $a[$a].$a($a)($a)

[07:19] <p6eval> std 26023: OUTPUT«ok 00:02 35m␤»

[07:20] * diakopter 's mind starts to mushify

[07:21] <diakopter> std: my $a=1; ++$a[$a++].++$a(++$a)($a++)

[07:21] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤Syntax error (two terms in a row?) at /tmp/5RGNv4BMVO line 1:␤------> my $a=1; ++$a[$a++].++$a(++$a)($a++)␤    expecting any of:␤     POST␤   infix or meta-infix␤        infix stopper␤    postfix␤        postfix_prefix_meta_operator␤      

[07:21] <p6eval> ..standard stopper␤ statement mo...

[07:22] <diakopter> std: my $a=1; ++$a[$a++].$a++(++$a)($a++)

[07:22] <p6eval> std 26023: OUTPUT«ok 00:02 38m␤»

[07:22] <diakopter> std: my $a=1; ++$a[--$a++].$a++(++$a--)(--$a++)--

[07:22] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤"--" and "]" are not associative at /tmp/mxyGmFmiI9 line 1:␤------> my $a=1; ++$a[--$a++].$a++(++$a--)(--$a++)--␤    expecting any of:␤       standard stopper␤ terminator␤FAILED 00:02 37m␤»

[07:24] *** bacek_ left
[07:24] <diakopter> std: my $a=1; ++$a[$a++].$a++(++$a--)(--$a++)--

[07:24] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤"++" and ")" are not associative at /tmp/asCRt8AEgM line 1:␤------> my $a=1; ++$a[$a++].$a++(++$a--)(--$a++)--␤    expecting any of:␤ standard stopper␤ terminator␤FAILED 00:02 38m␤»

[07:24] <diakopter> std: my $a=1; ++$a[$a++].$a++(++$a--)(--$a++)

[07:24] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤"++" and ")" are not associative at /tmp/tmkUv9YjPn line 1:␤------> my $a=1; ++$a[$a++].$a++(++$a--)(--$a++)␤    expecting any of:␤   standard stopper␤ terminator␤FAILED 00:02 38m␤»

[07:25] <diakopter> std: my $a=1; ++$a[$a++].$a++(++$a)(--$a++)

[07:25] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤"--" and ")" are not associative at /tmp/WvoOest51S line 1:␤------> my $a=1; ++$a[$a++].$a++(++$a)(--$a++)␤    expecting any of:␤     standard stopper␤ terminator␤FAILED 00:02 38m␤»

[07:25] <diakopter> std: my $a=1; ++$a[$a++].$a++(++$a)--($a++)

[07:25] <p6eval> std 26023: OUTPUT«ok 00:02 38m␤»

[07:25] <diakopter> std: my $a=1; ++$a[$a++].$a++(++$a)----($a++)

[07:25] <p6eval> std 26023: OUTPUT«ok 00:02 38m␤»

[07:25] <diakopter> std: my $a=1; ++$a[$a++].$a++--(++$a)----($a++)

[07:25] <p6eval> std 26023: OUTPUT«ok 00:03 38m␤»

[07:25] * diakopter starts to wonder

[07:26] <diakopter> std: my $a=1; ++$a[$a++----].$a++--(++$a)----($a++)

[07:26] <p6eval> std 26023: OUTPUT«ok 00:02 38m␤»

[07:26] <diakopter> pugs: 2++

[07:26] <p6eval> pugs: OUTPUT«*** Can't modify constant item: VInt 2␤    at /tmp/ihuhjqkIuk line 1, column 1 - line 2, column 1␤»

[07:26] <diakopter> rakduo: 2++

[07:26] <diakopter> rakudo: 2++

[07:26] <p6eval> rakudo 370dd7: OUTPUT«Unable to set lvalue on PAST::Val node␤current instr.: 'parrot;PAST;Val;lvalue' pc 566 (src/PAST/Node.pir:161)␤»

[07:26] <diakopter> rakudo: my $a = 1; --$a++

[07:26] <p6eval> rakudo 370dd7: RESULT«0»

[07:27] <diakopter> rakudo: my $a = 1; --$a++; say $a

[07:27] <p6eval> rakudo 370dd7: OUTPUT«1␤»

[07:27] <diakopter> pugs: my $a = 1; --$a++; say $a

[07:27] <p6eval> pugs: OUTPUT«*** Can't modify constant item: VInt 0␤    at /tmp/95ZOWdPcJ1 line 1, column 12-18␤»

[07:27] <diakopter> rakudo: my $a = 1; ++--$a++; say $a

[07:27] <p6eval> rakudo 370dd7: OUTPUT«2␤»

[07:28] <diakopter> rakudo: my $a = 1; ++++++++++++++++$a; say $a

[07:28] <p6eval> rakudo 370dd7: OUTPUT«9␤»

[07:28] <diakopter> rakudo: my $a = 1; ++++++++++++++++$a----------------; say $a

[07:28] <p6eval> rakudo 370dd7: OUTPUT«8␤»

[07:28] <diakopter> eh

[07:29] <diakopter> oh

[07:29] <diakopter> rakudo: my $a = 1; ++++++++++++++++$a------$a----------; say $a

[07:29] <p6eval> rakudo 370dd7: OUTPUT«Statement not terminated properly at line 1, near "$a--------"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[07:29] <diakopter> std: my $a = 1; ++++++++++++++++$a------$a----------; say $a

[07:29] <p6eval> std 26023: OUTPUT«##### PARSE FAILED #####␤"++" and "--" are not associative at /tmp/HmzHYui6YU line 1:␤------> my $a = 1; ++++++++++++++++$a------$a----------; say $a␤    expecting any of:␤   POST␤   postfix␤   postfix_prefix_meta_operator␤      standard stopper␤ terminator␤FAILED

[07:29] <p6eval> ..00:02 37m␤»

[07:30] <diakopter> std: my $a=1; ++$a[$a++].$a++--(++$a)----($a++)

[07:30] <p6eval> std 26023: OUTPUT«ok 00:02 38m␤»

[07:30] <diakopter> rakudo: my $a=1; ++$a[$a++].$a++--(++$a)----($a++)

[07:30] <p6eval> rakudo 370dd7: OUTPUT«Statement not terminated properly at line 1, near "(++$a)----"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[07:30] <diakopter> rakudo: my $a=1; ++$a[$a++].$a++--(++$a)($a++); say $a

[07:30] <p6eval> rakudo 370dd7: OUTPUT«Statement not terminated properly at line 1, near "(++$a)($a+"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[07:34] <mikehh> make test PASS make spectest - Failed 1/339 test programs. 0/10054 subtests failed.

[07:37] *** agentzh joined
[07:40] <mikehh> I coverted the test to a program without the use Test; just using if ststments and say - works fine

[07:45] *** Alias left
[07:57] *** wayland76 joined
[07:57] *** Maghnus left
[08:12] *** zamolxes joined
[08:23] *** kst left
[08:23] *** kst joined
[08:25] *** masak joined
[08:29] *** Alias joined
[08:30] <masak> good morning, butterflies.

[08:30] <lambdabot> masak: You have 1 new message. '/msg lambdabot @messages' to read it.

[08:30] <masak> @messages

[08:30] <lambdabot> literal said 15h 18m 32s ago: Implementation language? I thought Perl 6 was assumed :)

[08:30] <moritz_> good morning

[08:30] <moritz_> I like that attitude :-)

[08:30] <masak> moritz_: mornin'

[08:31] <masak> literal: I think it might be a good candidate, but I'd need to see a more precise list of desired features first :)

[08:33] <masak> actually, given the state of Rakudo, it'd take pretty special requirements to choose something else.

[08:34] <masak> still, sometimes it's quite liberating to prototype things in Moose and then port to Perl 6, for example.

[08:38] <Matt-W> Morning

[08:40] *** kane_ joined
[08:41] <masak> Matt-W: a very fine morning to you, sir.

[08:41] <wayland76> Hi Matt-W

[08:42] *** wayland76 left
[08:45] <szabgab> rakudo: my $x; $x//=42; say $x;

[08:45] <p6eval> rakudo 370dd7: OUTPUT«42␤»

[08:45] <bacek> good evening

[08:45] <moritz_> rakudo: my $x //= 42; say $x.perl

[08:45] <p6eval> rakudo 370dd7: OUTPUT«undef␤»

[08:45] <masak> heh.

[08:45] <masak> bug.

[08:45] <moritz_> masak: there's a job for you :-)

[08:45] <masak> -me does his job

[08:46] * masak does his job

[08:46] <moritz_> I found that over the weekend, but I think I forgot to report it

[08:46] <moritz_> anyway, it has been rather productive in terms of rakudo and test suite

[08:46] * Matt-W is back at work this week :(

[08:47] <masak> moritz_: I noticed. :)

[08:47] <masak> moritz_++

[08:47] <moritz_> I made a pass through the test suite, and looked at nearlly all #?rakudo skip's

[08:47] <masak> Matt-W: was your last week productive? anything new to look at?

[08:47] <Matt-W> masak: no not particularly

[08:47] <masak> moritz_: wow.

[08:47] <masak> Matt-W: feels a bit like my past week. :/

[08:47] <Matt-W> masak: I had a lot of other things to attend to unfortunately

[08:48] <Matt-W> masak: there are some new tests, but not really any new functionality

[08:48] <Matt-W> Still, more complete test coverage of the existing stuff is welcome

[08:48] <moritz_> unfortunately I didn't get around to write a new tidings post

[08:48] * Matt-W really needs enums to work properly

[08:48] <masak> moritz_: please do! I have no idea what happened since last time. :)

[08:49] <moritz_> masak: neither do I :-)

[08:49] <masak> :P

[08:49] <moritz_> but there's my mail reader, and git log in various repos

[08:53] <moritz_> it's nearly 11am here, and I'm still alone in the office

[08:54] <masak> sounds like a case of the Mondays.

[08:56] * bacek arrived today at work at 8:45...

[09:00] <moritz_> masak: Monday, DST switch, one of my cow-orkers on a conference, @other_reasons probably

[09:01] <masak> moritz_: oh, you went DST too?

[09:01] <moritz_> masak: yes

[09:04] *** orafu joined
[09:07] <finanalyst> rakudo:  my $a=1|11|13;sub e(Junction $j){my @states;->Any $x { @states.push($x); say 'in pointy block: '~ @states.perl }($j); say 'end of sub:' ~ @states.perl; return @states }; say e($a).perl

[09:07] <p6eval> rakudo 370dd7: OUTPUT«in pointy block: [1]␤in pointy block: [1, 11]␤in pointy block: [1, 11, 13]␤any(1)␤»

[09:07] <finanalyst> moritz_: a development of your suggestion on eigenstates

[09:08] <finanalyst> moritz_: but code not working as expected. why is say in sub e not working?

[09:10] <moritz_> rakudo: sub e(Object $x) { my @a; my $s = -> Any $p { @a.push($p) }; $s($x); @a} say e(2|3).perl

[09:10] <p6eval> rakudo 370dd7: OUTPUT«Statement not terminated properly at line 1, near "say e(2|3)"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[09:10] <moritz_> rakudo: sub e(Object $x) { my @a; my $s = -> Any $p { @a.push($p) }; $s($x); @a}; say e(2|3).perl

[09:10] <p6eval> rakudo 370dd7: OUTPUT«any(1, 2)␤»

[09:10] <moritz_> p5ism--

[09:10] <moritz_> I don't know why that doesn't work

[09:11] <bacek> rakudo: sub e(Object $x) { my @a; my $s = -> Any $p { @a.push($p) }; $s($x); say @a.perl; @a}; say e(2|3).perl

[09:11] <p6eval> rakudo 370dd7: OUTPUT«any(1, 2)␤»

[09:11] <finanalyst> rakudo: sub e(Object $x) { my @a; my $s = -> Any $p { @a.push($p) }; $s($x); say @a.perl; @a}; say e(2|3|4|5).perl

[09:11] <p6eval> rakudo 370dd7: OUTPUT«any(1, 2, 3, 4)␤»

[09:12] <bacek> rakudo: sub e(Object $x) { my @a; my $s = -> Any $p { say @a.perl; @a.push($p) }; $s($x); say @a.perl; @a}; say e(2|3).perl

[09:12] <p6eval> rakudo 370dd7: OUTPUT«[]␤[2]␤any(1, 2)␤»

[09:12] <bacek> rakudo: sub e(Object $x) { my @a; my $s = -> Any $p { say @a.perl; @a.push($p) }; $s($x); say @a.perl; \@a}; say e(2|3).perl

[09:12] <p6eval> rakudo 370dd7: OUTPUT«[]␤[2]␤any(1, 2)␤»

[09:13] <bacek> rakudo: sub e(Object $x) { my @a; my $s = -> Any $p { say @a.perl; @a.push($p) }; $s($x); say "ret " ~ @a.perl; \@a}; say e(2|3).perl

[09:13] <p6eval> rakudo 370dd7: OUTPUT«[]␤[2]␤any(1, 2)␤»

[09:13] <bacek> wow...

[09:13] <bacek> rakudo: sub e(Object $x) { my @a; my $s = sub(Any $p) { say @a.perl; @a.push($p) }; $s($x); say "ret " ~ @a.perl; \@a}; say e(2|3).perl

[09:13] <finanalyst> like i said the say inside the sub is not being processed

[09:13] <p6eval> rakudo 370dd7: OUTPUT«[]␤[2]␤ret [2, 3]␤[2, 3]␤»

[09:14] <bacek> Looks like autothreading in junctions throws .CONTROL_RETURN

[09:16] <moritz_> rakudo: my @a; sub p($x){@a.push: $x}; sub e(Object $x) { @a = (); p($x); @a }; say e(2|3).perl

[09:16] <p6eval> rakudo 370dd7: OUTPUT«[2, 3]␤»

[09:16] <moritz_> there you go

[09:16] <moritz_> rakudo:  sub e(Object $x) { my @a; my sub p($x) { @a.push($x) }; p($x); @a }; say e(2|3).perl

[09:17] <p6eval> rakudo 370dd7: OUTPUT«[2, 3]␤»

[09:17] <moritz_> if it doesn't work with blocks, use subs :-)

[09:17] <moritz_> rakudo:  sub e(Object $x) { my @a; my sub p($x) { @a.push($x) }; p($x); @a }; say e(2 ^ 3 ^ 7).perl

[09:17] <p6eval> rakudo 370dd7: OUTPUT«[2, 3, 7]␤»

[09:17] <finanalyst> rakudo:  sub e(Object $x) { my @a; my sub p($x) { @a.push($x) }; p($x); @a }; say e(2 & 3 & 7 & 1).perl

[09:18] <p6eval> rakudo 370dd7: OUTPUT«[2, 3, 7, 1]␤»

[09:18] <bacek> rakudo:  sub e(Object $x) { my @a; my sub p($x) { @a.push($x) }; p($x); @a }; say e(2 ^ 3 | 7 & 9).perl

[09:18] <p6eval> rakudo 370dd7: OUTPUT«[2, 3, 7, 9]␤»

[09:19] <bacek> bloody hackers. You just broke public contract of Junctions :)

[09:19] * moritz_ puts on his black hat

[09:20] *** OuLouFu left
[09:20] <masak> junctions _will_ be abused, period.

[09:21] <masak> the only thing we can do is make people realize, in as kind a manner as possible, that they're using junctions for things that they weren't really made for.

[09:22] <bacek> rakudo:  class Junction is also { method e{ my @a; my sub p($x) { @a.push($x) }; p(self); @a }; say (2 ^ 3 | 7 & 9).e.perl

[09:22] <p6eval> rakudo 370dd7: OUTPUT«Unable to parse block; couldn't find final '}' at line 1, near ""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[09:22] <bacek> rakudo:  class Junction is also { method e{ my @a; my sub p($x) { @a.push($x) }; p(self); @a }; }; say (2 ^ 3 | 7 & 9).e.perl

[09:22] <p6eval> rakudo 370dd7: OUTPUT«[2, 3, 7, 9]␤»

[09:23] <bacek> perl6 allows you to shoot your feet with nuclear blast :)

[09:23] <moritz_> I think it's kinda pointless to remove .eigenstates for philosophical if it an be obtained (inefficiently) with a one-liner

[09:24] <bacek> moritz_: it's @Larry's call

[09:24] <masak> sending signals is important too.

[09:25] *** agentzh left
[09:25] <finanalyst> junctions are cool, junctions are new; make junctions a tool; and devils will brew

[09:25] <masak> if it's private, there'll be a farily natural stigma against pulling the data out by force.

[09:26] <moritz_> masak: as long as we have an FAQ entry somewhere on why it's not publicly available to which I can point the anticipated hordes of perlmonks that's fine

[09:27] *** agentzh joined
[09:27] <masak> moritz_: that can be arranged, I'm sure.

[09:28] <finanalyst> if junctions are to be restricted to any/all comparisons in the core, surely it will be ok to write modules that extend the functionality

[09:30] *** kane_ left
[09:30] *** elmex left
[09:30] *** elmex joined
[09:30] <szabgab> using perl6.vim  is now complaining about missing syntax/pir.vim

[09:30] <finanalyst> i was thinking about a module junctions::extension01 with list eigenstates, and grep eigenstates  methods to allow for experimentation

[09:30] <szabgab> any idea why ?

[09:31] <szabgab> I mean perl6.vim in pugs/util/perl6.vim

[09:31] <moritz_> maybe literal++ added inline PIR hilighitng?

[09:31] <moritz_> syn include @p6PIR syntax/pir.vim

[09:31] *** kane_ joined
[09:32] <szabgab> yeah I saw that line but no pir.vim here

[09:32] <moritz_> szabgab: in a parrot checkout, you can cd editor; make; cp pir.vim ~/.vim/syntax/

[09:34] <szabgab> yeah, thanks, that worked

[09:34] <Matt-W> oooh nice

[09:34] <Matt-W> literal++

[09:35] <szabgab> its all because Padre generates 40-70% CPU load when editing plain .txt files 8-() so before I fix that I had to switch to vi :-)

[09:36] <szabgab> strangely it is ok when editing perl 5 perl 6 code

[09:39] <Matt-W> ewird

[09:44] <szabgab> rakudo: multi sub f($x, %b?) {}; multi sub f(%b?) {}; f(2)

[09:44] <p6eval> rakudo 370dd7: OUTPUT«Ambiguous dispatch to multi 'f'. Ambiguous candidates had signatures:␤:(Any $x, Any %b?)␤:(Any %b?)␤␤current instr.: '_block14' pc 76 (EVAL_16:44)␤»

[09:45] <szabgab> why is that Ambigous ?

[09:45] <moritz_> szabgab: because sigil-implied types aren't considered in mmd yet

[09:45] <szabgab> not specced or not implemented yet ?

[09:45] <szabgab> or incorrect use ?

[09:45] *** M_o_C joined
[09:46] <moritz_> not implemented yet

[09:46] <szabgab> so it will work at one point right?

[09:46] <moritz_> yes

[09:47] <moritz_> one point = when jnthn implements it :-)

[09:48] <Matt-W> Or somebody else

[09:48] <Matt-W> It could be somebody else

[09:48] <moritz_> in theory, yes

[09:49] <moritz_> in pratice jnthn is Unchallanged King of Rakudo Multi Dispatch :-)

[09:49] <Matt-W> Yes

[09:50] <Matt-W> Although that's a dangerous situation

[09:50] * bacek smells big "bus factor" here :)

[09:50] <moritz_> but one that you can't avoid when you have only two core contributers

[09:51] <moritz_> s/core/regular core/

[09:53] *** meppl joined
[10:03] *** kst left
[10:04] *** kst joined
[10:11] *** agentzh left
[10:11] *** agentzh joined
[10:14] <Matt-W> aye

[10:14] <Matt-W> and I don't have a clue about how rakudo works inside really

[10:15] <moritz_> maybe I have a clue, but surely nothing more :/

[10:20] <masak> I think I had one, but things have changed a lot since then.

[10:37] *** wayland76 joined
[10:38] <Matt-W> I think the starting point would have to be learning how PCT works

[10:39] *** Khisanth left
[10:40] <pugs_svn> r26024 | hinrik++ | [util/perl6.vim] make PIR highlighting optional

[10:40] *** smtms joined
[10:44] *** icwiener joined
[10:52] *** ruoso joined
[10:53] <ruoso> Hello!

[10:54] <wayland76> Hi :)

[10:54] <literal> hi

[10:55] <ruoso> It has been a long weekend

[10:56] <wayland76> Does that mean that you got an extra day off, or that the individual days felt longer?

[10:57] <ruoso> heh... I guess just the days the felt longr...

[10:59] <literal> he slowed down time

[11:00] <wayland76> Don't you have to be going pretty fast (relatively ;) ) to do that?

[11:31] *** amoc joined
[11:42] <Matt-W> no actually he'd have to be going ocnsiderably slower to experience more of the weekend than we did

[11:45] *** kimtaro left
[11:48] <wayland76> No, faster.  "As you are approaching 100% of the speed of light your time slows more and more..." -- yes?

[11:48] <ruoso> wayland76, actually... I think it is the opposite

[11:48] <ruoso> I mean, relative to the people not at that speed

[11:49] <wayland76> Hmm, maybe you're right.  So *we* have to be going faster, then :)

[11:50] <Matt-W> if you go faster, you experience less time than the people going slower

[11:50] <Matt-W> hence why you could get on a starship and go to another star at 99% of the speed of light, and still be alive when you arrived while everyone you knew on earth has died of old age

[11:51] <masak> literal: http://irclog.perlgeek.de/perl6/2009-03-30#i_1025107

[11:51] <wayland76> I'll try to remember that :).  

[11:52] <literal> masak: yeah, saw that

[11:53] <ruoso> one thing I never understood about relativity is how to measure the speed of the light... If we measure it based on our timing, wouldn't it look much slower than it actually is?

[11:55] *** alc left
[11:55] <masak> literal: good. I think Perl 6 is fine, if for no other reason than that I like when people use the language. :)

[11:55] <masak> that said, there are some things that are still _much_ easier to do with, say, Perl 5.

[11:56] <literal> yeah

[11:58] <wayland76> ruoso: Isn't the speed of light constant?  Or are you wondering how to measure that constant?

[11:58] <masak> here we go...

[11:59] *** nihiliad joined
[11:59] <ruoso> well... maybe I only ask that question becacuse I'm a social scientist... instead of a phisicyst

[11:59] <ruoso> ;)

[11:59] <ruoso> wikipedia tells me speed of light is an axiomatic constant...

[11:59] <ruoso> I, as an anthropologist, was expecting the relativity theory to be more relativist ;)

[12:00] <masak> ruoso: why not measure the time elapsed between a light source and a sensor which is stationary relative to the light source? if the distance is known, the speed of light can be approximated from that.

[12:02] <ruoso> but, if the the light travels at the speed of light, we would need to think from both the perspective of the observer

[12:02] <ruoso> and the perspective of the light itself

[12:02] <masak> 'course, this should preferably be done in a vaacum.

[12:03] <masak> ruoso: that's an interesting comment. I guess strange things happen when you plug c into some of the equations.

[12:04] <masak> having any rest mass is out of the question, for example.

[12:04] <ruoso> for instance... if the light takes 8 minutes (from our perspective) to get from the sun to earth

[12:04] <ruoso> how long does it take from the perspective of the light itself?

[12:04] <wayland76> I'm not sure what I am; computer scientist maybe?  Or maybe just lazy :)

[12:05] <masak> ruoso: if I'm not mistaken (and I might well be), time dilation would make the trip effectively instantaneous.

[12:05] <masak> ...from the perspective of the photon.

[12:06] <ruoso> but that would have interesting astronomical consequences

[12:06] <masak> why?

[12:06] <masak> because the light is fresh on arrival? :)

[12:06] *** namenlos_ joined
[12:07] *** sri_kraih joined
[12:07] <wayland76> http://www.physlink.com/Education/askexperts/ae283.cfm

[12:08] <wayland76> The second answer has a graph which answers some of these questions

[12:08] <wayland76> masak is right

[12:08] <Matt-W> because light, moving at the speed of light, experiences complete time dilation

[12:08] <Matt-W> time never passes for a photo

[12:08] <Matt-W> photon*

[12:09] <wayland76> Hmm.  So photons never experience time

[12:09] <wayland76> I wonder if that means that photons live in eternity?

[12:09] <wayland76> Or if beings made of light can't possibly exist :)

[12:09] <wayland76> Or something :)

[12:10] <masak> photons are not compatible with time.

[12:11] <wayland76> ...and if time passes for a photo, they call it a "movie" :)

[12:12] <masak> or an old photo.

[12:12] *** kst left
[12:13] *** kst joined
[12:13] <wayland76> It depends whether time passes in the photo or on the photo

[12:13] <wayland76> Sort of like the contents of a file vs. it's filesystem data :)

[12:14] <moritz_> photons are weird. How can a thing have no rest mass but still a spin?

[12:15] <wayland76> I never got far enough into quantum physics to understand spin, colour, flavour, and peppermint :)

[12:16] <ruoso> but if, for instance, the image we get into a telescope is the result of interacting with that photons

[12:16] <masak> moritz_: I feel the whole spin concept is suspect.

[12:16] <moritz_> masak: aye. But it works :/

[12:16] <masak> or at least not relatable to something really palpable.

[12:16] <masak> it's like it just happens to be called 'spin', but it's really something else.

[12:17] <masak> but IANAP.

[12:17] <moritz_> we know from experiment that electrons and photons have an intrinsic degree of freedom which happens to follow the same rules as an angular momentum

[12:19] <Matt-W> I know enough about it to know that 'spin' is a terrible word

[12:19] <masak> particle physics seems full of counterintuitive surprises.

[12:20] <Matt-W> Should've called it 'woogle factor' or something

[12:20] <masak> :D

[12:20] *** namenlos left
[12:21] <wayland76> Or the TLS (thing like spin) :)

[12:21] <Matt-W> well it's not really like spin at all though is it

[12:21] <Matt-W> or maybe it is

[12:22] <wayland76> How about TLAM (thing like angular momentum)

[12:22] <Matt-W> maybe it is helpful to think of spin half particles inhabiting a universe in which you have to rotate twice as far

[12:22] <wayland76> ?

[12:22] <Matt-W> it *is* fun for confusing children with

[12:22] <masak> Matt-W: you can confuse grown-ups with quantum mechanics too!

[12:23] <Matt-W> true

[12:23] <Matt-W> but how many grown-ups these days listen?

[12:24] <Matt-W> Anyway, I prefer confusing my colleagues by explaining how something I just did in a million lines of C++ would be so much nicer in Perl 6 :)

[12:25] <wayland76> Me.  I'm listening and I'm confused :)

[12:25] <masak> ah, those million-line workarounds in C++...

[12:26] <Matt-W> I don't think we're a representative cross-section of society in here

[12:26] <wayland76> (There's a saying in Sudan -- "If you're not confused, you don't understand the situation" :) )

[12:26] <wayland76> Well, no :)

[12:26] <Matt-W> Usually I don't feel like everyone in the room is smarter than me

[12:26] <wayland76> Hmm.  Well, I thought I was the dumb one around here :)

[12:27] <wayland76> (just a note for moritz_ -- it appears gluons and z-bosons also have spin but no mass)

[12:27] <moritz_> more weird stuff :(

[12:27] <wayland76> Oh, and neutrinos too :)

[12:28] * ruoso enjoys not being a phisicyst... people is already weird enough... ;)

[12:28] <moritz_> well, they sopposedly have mass

[12:28] <wayland76> It might help to think of spin as spin, but to think of mass as a deformation of space :)

[12:28] <Matt-W> There's another theory floating around that the universe is a hologram of things taking place on its outer surface...

[12:28] <Matt-W> That one really makes my head hurt

[12:28] <wayland76> Oh, yes, I'm wrong about the neutrinos and z-bosons

[12:29] <wayland76> but not gluons

[12:29] <moritz_> I never got deep into particle physics

[12:29] <wayland76> I enjoy not being a physicist too.  I took the easy option.

[12:30] <wayland76> moritz_: I'm deeper now that I've ever been before, thanks to Wikipedia over the last 5 minutes :)

[12:39] *** pmurias joined
[12:42] <pmurias> ruoso: hi

[12:57] <ruoso> hi pmurias 

[12:58] <pmurias> ruoso: how should i describe my releationship to the SMOP project in the proposal?

[12:58] <ruoso> you can say that you're a co-author

[12:58] <wayland76> Oh, I ws going to suggest "tempestuous" :)

[13:00] *** [particle]2 left
[13:01] *** [particle]1 joined
[13:01] <pugs_svn> r26025 | wayland++ | S32/IO.pod: Changed "TCP" to "INET"

[13:06] *** goksie joined
[13:10] <pasteling> "pmurias" at 78.8.156.39 pasted "GSoC application draft" (73 lines, 3.2K) at http://sial.org/pbot/35758

[13:11] <ruoso> pmurias++ very well done draft

[13:12] <ruoso> I have nothing to add or remov

[13:15] <finanalyst> i would like to provide a GUI with a perl6 program, is there any "easy" solution?

[13:16] <ruoso> finanalyst, I don't think there's much support yet

[13:16] <Matt-W> not heard of anything

[13:17] <finanalyst> there is some SDL in parrot, but I can never get it to work

[13:17] <finanalyst> also on the perl foundation site there is a proposal to link the TCL-Tk widgets to parrot, but there doesnt appear to be any update

[13:17] <ruoso> finanalyst, well... if you can handle SMOP limitations, SMOP can already call p5 classes

[13:18] <ruoso> so you could make a gtk2 app

[13:18] <finanalyst> if p5 then what about perl-tk?

[13:18] <moritz_> pmurias: nice proposal; I'd just use full names ("Daniel Ruoso")

[13:19] <Matt-W> pmurias: Haskell should have a capital letter

[13:19] <ruoso> finanalyst, gtk2-perl is prettier ;)

[13:19] <finanalyst> ruoso: i could never get it to work well :(

[13:19] * Matt-W hopes to be able to do GTK bindings for Perl 6 at some point using GObject introspection to generate most of it automagically

[13:19] <ruoso> gtk2 or SMOP?

[13:19] <moritz_> pmurias: oh, and you should add a few lines why smop is important; not all mentors know about Perl 6 as well as we do

[13:20] <ruoso> Matt-W, not generate... just use

[13:20] <ruoso> Matt-W, Perl 6 supports representation polymorphism

[13:20] <ruoso> no need to generate stubs

[13:20] <finanalyst> ruoso: ok. where do i find out bout using SMOP?

[13:21] <ruoso> finanalyst, well.. there's the wiki

[13:21] <ruoso> and there's the code

[13:23] <finanalyst> ruoso: just looked at perlfoundation's SMOP page. Not quite sure how to get started, viz., get a running version

[13:23] <ruoso> first, get the source

[13:23] <ruoso> it's inside pugs svn

[13:24] <finanalyst> Would it be possible for you to edit the SMOP page on TPF wiki to point to the SMOP wiki?

[13:25] <finanalyst> http://www.perlfoundation.org/perl6/index.cgi?smop

[13:25] <ruoso> that is the SMOP wiki

[13:25] <moritz_> that *is* the smop wiki :-)

[13:26] <finanalyst> uh oh. embarrassment

[13:26] <moritz_> and it has a "smop hacking" link

[13:26] <finanalyst> i saw all the links, but not read them all

[13:27] * ruoso runs to see if SMOP Hacking is still up-to-date

[13:27] <ruoso> almost up-to-date

[13:28] <ruoso> the dependencies are not

[13:28] *** PerlPilo1 left
[13:28] * Matt-W thinks about what bit of Form.pm to do next

[13:28] <Matt-W> So many tests to write...

[13:29] <finanalyst> is cmake different from make? I have Ubuntu Linux. Do I need to get a different program?

[13:29] <ruoso> we no longer use cmake

[13:29] <ruoso> we use scons now

[13:29] *** ejs joined
[13:30] <finanalyst> dependencies page is definitely out of date

[13:30] <ruoso> just apt-get install scons, iirc

[13:31] * ruoso brb &

[13:32] *** icwiener_ joined
[13:33] <ruoso> finanalyst, if you have any problem building it, just ask me or pmurias 

[13:33] <ruoso> but you might be glad to know that SMOP is going through a major refactoring that should make building it easier...

[13:34] <finanalyst> just using synaptic to set up the list of dependencies

[13:38] <ruoso> finanalyst, if you happen to install anything not in the dependencies list, would you mind updating the SMOP Dependencies page?

[13:43] *** orafu left
[13:43] *** dKingston joined
[13:45] *** orafu joined
[13:46] *** kst left
[13:46] *** kst joined
[13:46] *** ujwalic joined
[13:48] *** icwiener left
[13:54] *** kane_ left
[13:56] *** PacoLinux joined
[14:22] *** alc joined
[14:23] *** wayland76 left
[14:27] *** Schmidt joined
[14:30] *** frioux_ joined
[14:30] *** szabgab left
[14:31] <finanalyst> ruoso: u there?

[14:31] <ruoso> finanalyst, yes

[14:32] <finanalyst> had to $work for a while

[14:32] <finanalyst> there seem to be a lot of haskell packages for Ubuntu, but I am not sure which I need for SMOP

[14:33] <moritz_> probably a ghc6

[14:33] *** payload joined
[14:34] <finanalyst> the SMOP dependencies page lists haskell-zlib, cabal-install, and Cabal

[14:34] <ruoso> I have here installed (Debian lenny) ghc6, libghc6-http-dev, libghc6-network-dev, libghc6-parsec-dev, libghc6-utf8-string-dev

[14:35] <ruoso> and yes, haskell-zlib, cabal-install and cabal in my /usr/local

[14:35] *** amoc left
[14:36] <finanalyst> where do the latter come from ?

[14:38] *** frioux_ left
[14:39] *** frioux_ joined
[14:39] <pmurias> finanalyst: the cabal executable comes from cabal-install

[14:41] *** mj41 left
[14:46] <dalek> rakudo: 766b10d | pmichaud++ | docs/spectest-progress.csv:

[14:46] <dalek> rakudo: spectest-progress.csv update: 339 files, 8039 passing, 0 failing

[14:46] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/766b10d82d08ab0907efd7336ad66744dfb7a48c

[14:46] <finanalyst> pmichaud: is that the first time > 8000 tests?

[14:47] *** szabgab joined
[14:49] *** justatheory joined
[14:50] <masak> finanalyst: according to the review URL, yes.

[14:53] *** c9s_ joined
[14:53] <finanalyst> ruoso: in pugs/v6 there is mildew and smop, in which do i run make (or is it scons?)

[14:54] <ruoso> finanalyst, you first need to run make in smop

[14:54] <ruoso> once that's ready, you can use mildew

[14:54] <ruoso> mildew: say "Hello, finanalyst!"

[14:54] <p6eval> mildew: OUTPUT«Can't locate object method "13" via package "STD" at ../../src/perl6/STD.pm line 1525.␤»

[14:54] <ruoso> p6eval?

[14:54] <finanalyst> does scons replace make?

[14:55] <ruoso> finanalyst, yes

[14:55] <ruoso> not only make actually,

[14:55] <Matt-W> oooh 8,039 tests passing

[14:55] <ruoso> but the whole build system

[14:55] * ruoso lunch &

[14:56] *** wayland76 joined
[14:59] <pmurias> finanalyst: the Makefiles runs scons

[14:59] *** nihiliad left
[14:59] *** mj41 joined
[15:07] *** Psyche^ joined
[15:09] *** c9s left
[15:10] <pmichaud> finanalyst: yes, first time over 8000 for Rakudo.

[15:11] <finanalyst> +++++

[15:11] *** zamolxes left
[15:12] <moritz_> pmichaud: did you get around to fix the uniq block thing in PGE?

[15:12] <finanalyst> on my ubuntu synaptic packing list, the only reference to cabal is with hugs. Is this different from ghc6?

[15:13] *** kst left
[15:14] *** kst joined
[15:19] *** Khisanth joined
[15:20] *** hudnix joined
[15:20] *** kimtaro joined
[15:22] <pmichaud> moritz_: yes, I did.

[15:23] <pmichaud> I think I fixed it on Friday evening (maybe Thursday evening -- the days/nights are a blur)

[15:24] *** Patterner left
[15:24] *** Psyche^ is now known as Patterner

[15:25] <moritz_> ah great, I see that my stuff from Any-num.pm is already in there

[15:26] *** parduncia left
[15:27] <moritz_> time to remove the branch from github then

[15:27] *** PerlJam joined
[15:39] *** ejs1 joined
[15:39] <finanalyst> pmurias: not getting anywhere installing smop. how can i send u the error output

[15:39] <pmurias> finanalyst: ok

[15:40] <pmurias> finanalyst: you can nopaste it

[15:40] <finanalyst> /pugs/v6/smop# make

[15:40] <finanalyst> cd m0ld;ghc --make Setup.lhs;./Setup configure --user ;./Setup build;cp dist/build/m0ld/m0ld ../m0ld_exe

[15:40] <finanalyst> [1 of 1] Compiling Main             ( Setup.lhs, Setup.o )

[15:40] <finanalyst> Linking Setup ...

[15:40] <finanalyst> Configuring m0ld-0.0...

[15:41] <finanalyst> Preprocessing executables for m0ld-0.0...

[15:41] <finanalyst> Building m0ld-0.0...

[15:41] <finanalyst> scons -Q

[15:41] <finanalyst> gcc -o build/pcl_coro.os -c -O0 -g3 -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -I/usr/lib/perl/5.10/CORE -fPIC -Isrc -Iinclude -Ismop-base/include build/pcl_coro.c

[15:41] <finanalyst> build/pcl_coro.c:8:17: error: pcl.h: No such file or directory

[15:41] <moritz_> not paste it here!

[15:41] <finanalyst> build/pcl_coro.c:16: error: expected specifier-qualifier-list before ‘coroutine_t’

[15:41] <finanalyst> sorry :(

[15:41] <moritz_> please use the nopaste link from the /topic

[15:44] <pasteling> "finanalyst" at 193.110.4.137 pasted "using make in pugs/v6/smop" (24 lines, 1.6K) at http://sial.org/pbot/35762

[15:44] <pmurias> finanalyst: get libpcl1-dev

[15:48] *** ejs left
[15:53] *** nihiliad joined
[15:53] <finanalyst> pmurias: error now at p5interpreter. On the SMOP dependencies page, it says something about dh-make-perl. What is this?

[15:53] <moritz_> that's a script to build debian packages out of perl modules

[15:54] <pmurias> finanalyst: could you nopaste the error?

[15:55] <pasteling> "finanalyst" at 193.110.4.137 pasted "using make in pugs/v6/smop II" (20 lines, 2.7K) at http://sial.org/pbot/35763

[15:55] <ruoso> finanalyst, apt-get isntall libperl-dev

[15:59] *** FurnaceBoy joined
[16:02] <finanalyst> ruoso: thanx make in smop completed correctly. I have a short file of all the steps I took to get there. I can nopaste it

[16:02] <finanalyst> but how do i use mildew?

[16:02] <ruoso> finanalyst, would you mind putting it in the wiki?

[16:03] <ruoso> finanalyst, now to use mildew, just go to ../mildew

[16:03] <ruoso> perl mildew something.p6

[16:03] <ruoso> you can see what mildew already supports in the t directory

[16:05] <finanalyst> ruoso: you are using .p6 !!!!! I asked about this about a year ago and got a huge (-ve) response from some

[16:05] <pmurias> -ve ?

[16:05] <ruoso> finanalyst, er... being from the *nix world, extensions don't really mean much

[16:06] *** hercynium joined
[16:06] <finanalyst> :}

[16:06] <finanalyst> :)

[16:08] <masak> I agree. I've become less and less appreciative of file endings.

[16:09] <masak> they leak information that is not very often interesting, though an abstraction that might sometimes be useful to preserve.

[16:13] *** exodist joined
[16:13] <finanalyst> tried to run mildew from another directory. It cant locate STD.pm How do I get it into INC?

[16:14] <ruoso> finanalyst, have you checked out the entire pugs repo?

[16:14] <finanalyst> yes and I have STD.pm

[16:14] <ruoso> so get in that directory and run make

[16:14] *** ejs1 left
[16:15] <ruoso> ../../src/perl6 iirc

[16:15] *** Khisanth left
[16:18] <finanalyst> ruoso: bash: iirc: command not found. Tried running make. Cant find ./gimme5

[16:19] *** Khisanth joined
[16:19] <ruoso> hmm

[16:19] <ruoso> where's gimme5?

[16:20] <ruoso> are you inside src/perl6?

[16:20] <ruoso> is it up-to-date?

[16:20] <ruoso> finanalyst, gimme5 is there...

[16:20] <finanalyst> ruoso: something funny here. gimme5 is in directory. looking further

[16:21] <pmurias> finanalyst: re another directory , it worked from v6/mildew?

[16:22] <finanalyst> no problem is with STD.pm

[16:24] <pasteling> "finanalyst" at 193.110.4.137 pasted "make in pugs/src/perl6" (12 lines, 684B) at http://sial.org/pbot/35764

[16:24] <ruoso> weird

[16:24] <finanalyst> ruoso: not sure what the problem is

[16:25] <ruoso> try writing that line yourself

[16:25] <finanalyst> tried changing to root

[16:25] <ruoso> no no

[16:25] <ruoso> that's not the problem

[16:25] <ruoso> (unless you checked out as root

[16:25] <ruoso> which might mean you have no x permission in the directory)

[16:25] <finanalyst> thought it was permissions. yes checked out as root

[16:25] <ruoso> hmm

[16:25] <finanalyst> long time ago

[16:26] <ruoso> what does ls -lad . tells you?

[16:26] <finanalyst> ls -lad

[16:26] <finanalyst> drwxr-xr-x 4 richard richard 4096 2009-03-30 20:15 .

[16:26] <finanalyst> not permission!

[16:27] <ruoso> ls -lad gimme5

[16:27] *** msmatsko_ joined
[16:27] <finanalyst> pugs/src/perl6$ ls -lad gimme5

[16:27] <finanalyst> -rwxr-xr-x 1 richard richard 72130 2009-03-30 18:48 gimme

[16:27] <ruoso> ./gimme5 STD.pm >STD.pm5

[16:28] <finanalyst> found problem, i think. expecting perl to be in /usr/local/bin/perl

[16:28] <finanalyst> i have in /usr/bin

[16:28] <ruoso> hmm

[16:29] *** araujo left
[16:30] <finanalyst> gimme5 expects perl to be in /usr/local/bin, not /usr/bin it says so in README

[16:31] <ruoso> I wonder why it still does it...

[16:32] <ruoso> is there anyone still using perl 5.8?

[16:32] <moritz_> gentoo

[16:32] <PerlJam> lots of people still use 5.8 since 5.10 is still listed as a "testing release" or some such on cpan.org

[16:33] <ruoso> is it?

[16:33] <moritz_> maybe just replace it with #/usr/bin/env perl5.10.0

[16:33] <PerlJam> http://cpan.org/src/README.html

[16:33] <moritz_> that works on all platforms where 5.10.0 is in $PATH

[16:34] <PerlJam> moritz_: good idea I think

[16:34] <ruoso> indeed...

[16:34] <ruoso> and someone send a bug report to [email@hidden.address] about that page

[16:35] <PerlJam> ruoso: there's nothing wrong with that page.

[16:35] <ruoso> perl 5.10 is not testing

[16:35] <PerlJam> ruoso: what's wrong is that there hasn't been a 5.10.1 yet

[16:35] <ruoso> for a long time already

[16:36] <ruoso> (or maybe p5p uses a strange nomenclature for release status)

[16:36] <PerlJam> ruoso: read the top of that page I linked to.

[16:37] <ruoso> PerlJam, yeah... sorry... 

[16:39] *** kst left
[16:40] *** jhorwitz joined
[16:40] *** kst joined
[16:41] *** kst left
[16:42] *** masak left
[16:43] *** kst joined
[16:44] *** pmurias_ joined
[16:44] <finanalyst> lots of problems with perl assumed to being in /usr/local/bin so i added a link to /usr/bin

[16:45] *** msmatsko left
[16:48] *** rgs left
[16:50] *** rgs joined
[16:53] <finanalyst> does mildew have a -e flag to run one-liners?

[16:54] *** goksie left
[16:56] *** pmurias left
[17:00] <[particle]> what's wrong with #!/usr/bin/perl\nuse 5.010;

[17:00] <ruoso> finanalyst, I'm not sure... 

[17:01] <moritz_> [particle]: that it dies when the first perl in path is older than 5.10

[17:01] <pmurias_> finanalyst: it shouldn't be hard to add...

[17:02] <[particle]> yeah, so? then it tells you your perl is too old.  or do you not care about windows support?

[17:02] <moritz_> [particle]: windows doesn't honor the shebang line anyway, does it?

[17:03] <[particle]> that's not easy to answer

[17:03] <literal> @tell alester http://use.perl.org/comments.pl?sid=42657&cid=67953

[17:03] <lambdabot> Consider it noted.

[17:03] <[particle]> perl on windows does

[17:03] <moritz_> yes, but at the point where perl reads it, it's too late to pick a different perl anyway

[17:03] <[particle]> right

[17:04] <finanalyst> the path to perl in pugs/src/perl6 make and gimme5

[17:04] <[particle]> don't assume anything about 1 zillion users paths

[17:04] <moritz_> not so on linux, where it actually helps to write #!/usr/bin/env perl5.10 if the first perl in $PATH isn't new enough

[17:04] <[particle]> just point to perl, and use 5.010;

[17:04] <finanalyst> running mildew gives me: Undefined subroutine &main::Dump called at ../../src/perl6/viv line 161.

[17:04] <finanalyst> Can't call method "emit_m0ld" on an undefined value at ./mildew line 123.

[17:04] <[particle]> the user can select the proper perl

[17:05] <finanalyst> ruoso: bye got to go

[17:05] *** finanalyst left
[17:06] <ruoso> it sees TimToady successfully broke mildew ;)

[17:07] *** pmurias_ is now known as pmurias

[17:09] *** Alias left
[17:10] *** Khisanth left
[17:10] *** Alias joined
[17:24] *** FurnaceBoy left
[17:24] <pugs_svn> r26026 | hinrik++ | [util/perl6.vim] add note about where to find pir.vim

[17:28] *** gbacon left
[17:30] *** barney joined
[17:30] *** dalek left
[17:30] *** dalek joined
[17:30] *** dalek left
[17:30] *** dalek joined
[17:34] *** gbacon joined
[17:40] *** Alias left
[17:41] *** parduncia joined
[17:48] *** cognominal joined
[17:53] <pugs_svn> r26027 | putter++ | [elf_h] EmitSimpleP5.pm: Fixed the '@p::x emits as $a_p::x not $p::a_x' bug.  Tweaked 'is context', but it's still unusably (for std.pm) broken.

[17:55] *** cognominal_ left
[18:16] *** gfldex joined
[18:30] <pmurias> ruoso: do you think we should have a copy of STD with a fixed revision?

[18:35] <ruoso> pmurias, it's not that bad idea

[18:42] *** Meijito joined
[18:44] <Meijito> Hey, how delete from my @list = (1, 2, 3); 1? I tried: delete @list{"1"};, but it not works - "...Global symbol "%List" requires explicit package name at..." But, List are @List, not %List. :/ 

[18:46] <ruoso> Meijito, you seem to be using perl 5. This is not a perl 5 support channel.. Please ask that at #perl in freenode or at #perl-help at irc.perl.org

[18:48] *** simcop2387 left
[18:54] *** c9s_ is now known as c9s

[18:59] *** drbean_ joined
[19:02] *** alester joined
[19:04] <ruoso> pmurias, do you have any idea what's going on with the current STD?

[19:07] <pugs_svn> r26028 | ruoso++ | [mildew] add a special hack for viv to stop complaining about ::Dump, but this didnt solve the problem;

[19:09] <pmurias> sort of

[19:09] <pmurias> working on getting quoting to work

[19:10] <pugs_svn> r26029 | pmurias++ | [mildew] moved it more in the direction of working under current STD

[19:11] <ruoso> hmm.. seems better

[19:13] *** NoirSoldats left
[19:14] <ruoso> I mean... "say 1" works... but none of the tests do

[19:14] *** PacoLinux left
[19:14] *** kidd left
[19:14] *** PacoLinux joined
[19:15] *** kidd joined
[19:15] *** szabgab left
[19:15] *** ujwalic left
[19:15] *** namenlos_ left
[19:15] *** yahooooo left
[19:15] *** bacek left
[19:15] *** kcwu left
[19:15] *** jedai left
[19:15] *** diakopter left
[19:15] *** buubot left
[19:15] *** REPLeffect left
[19:15] *** mtve left
[19:15] *** Southen left
[19:15] *** Meijito left
[19:15] *** orafu left
[19:15] *** estrabd left
[19:15] *** skids left
[19:15] *** Diederich left
[19:15] *** Eevee left
[19:15] *** c1sung left
[19:15] *** pugs_svn left
[19:15] *** aindilis left
[19:15] <pmurias> ruoso: viv seems to return incorrect VAST for say "foo$ok"

[19:16] <ruoso> hmm...

[19:16] <ruoso> I think TimToady is in the middle of something in STD

[19:16] *** Meijito joined
[19:16] *** szabgab joined
[19:16] *** ujwalic joined
[19:16] *** orafu joined
[19:16] *** namenlos_ joined
[19:16] *** yahooooo joined
[19:16] *** kcwu joined
[19:16] *** bacek joined
[19:16] *** estrabd joined
[19:16] *** skids joined
[19:16] *** REPLeffect joined
[19:16] *** jedai joined
[19:16] *** buubot joined
[19:16] *** diakopter joined
[19:16] *** mtve joined
[19:16] *** Diederich joined
[19:16] *** Southen joined
[19:16] *** pugs_svn joined
[19:16] *** c1sung joined
[19:16] *** Eevee joined
[19:16] *** aindilis joined
[19:16] <ruoso> maybe restoring an old STD to inside mildew is a better ide

[19:16] <ruoso> *idea

[19:16] <ruoso> at least until he finishes whatever he's doing

[19:16] *** drbean left
[19:17] <pmurias> ruoso: we could try it

[19:18] *** NoirSoldats joined
[19:19] *** Maddingue left
[19:19] *** Maddingue joined
[19:23] *** Tene left
[19:23] *** Tene_ joined
[19:26] *** rindolf joined
[19:26] <rindolf> Hi all.

[19:26] *** simcop2387 joined
[19:27] <pmurias> rindolf: hi

[19:27] <rindolf> pmurias: sup? 

[19:29] *** Meijito left
[19:30] *** alc left
[19:32] <pmurias> rindolf: i wrote my GSoC application recently

[19:32] <rindolf> pmurias: ah. Good luck.

[19:33] *** darkwater joined
[19:33] <darkwater> Hello everyone

[19:33] *** araujo joined
[19:33] *** pmurias left
[19:37] *** darkwater left
[19:38] *** amoc joined
[19:46] *** Alias joined
[19:47] *** kidd left
[19:48] *** kidd joined
[20:06] *** Khisanth joined
[20:15] *** ujwalic left
[20:16] <moritz_> hi

[20:16] <literal> hi

[20:16] <rindolf> Hi moritz_ 

[20:16] <rindolf> Hi literal 

[20:16] * rindolf has been neglecting his CPAN modules lately.

[20:30] <ruoso> is the gsoc web app up already

[20:30] <ruoso> ?

[20:30] <literal> yes

[20:32] <ruoso> do you have a url at hand?

[20:34] <moritz_> http://socghop.appspot.com/

[20:35] <ruoso> thanks moritz_ 

[20:35] * ruoso .oO( wth does socghop mean? )

[20:35] <smtms> ruoso, soc + ghop

[20:37] <ruoso> and what does ghop mean?

[20:37] *** jcrigby joined
[20:37] <[particle]> google highly open participation or somesuch

[20:38] <[particle]> there's a secondary-school equivalent to soc

[20:42] <ruoso> anyway, glad to see there are proposals there already...

[20:43] <pmichaud> std:  my $x //= 2;

[20:43] <p6eval> std 26029: OUTPUT«ok 00:02 35m␤»

[20:45] *** [particle]2 joined
[20:49] *** barney left
[20:51] *** rindolf left
[20:53] *** PZt joined
[20:59] *** sri_kraih left
[21:00] *** sri_kraih joined
[21:03] *** [particle] left
[21:16] *** [particle] joined
[21:31] *** [particle]2 left
[21:38] *** jhorwitz left
[21:40] *** dKingston left
[21:41] *** dKingston joined
[21:44] *** FurnaceBoy joined
[21:47] *** Alias_ joined
[21:54] *** nihiliad left
[21:54] *** icwiener_ left
[21:56] *** exodist left
[21:56] *** Alias left
[22:06] *** alester left
[22:19] *** payload left
[22:21] *** Maddingu1 joined
[22:21] *** Maddingue left
[22:21] *** Maddingu1 is now known as Maddingue

[22:28] *** amoc left
[22:31] *** Outh9x joined
[22:32] *** frioux_ is now known as frioux_away

[22:35] *** FurnaceBoy left
[22:36] *** FurnaceBoy joined
[22:38] *** kidd left
[22:39] *** meteorja1 joined
[22:42] *** nihiliad joined
[22:43] *** hercynium left
[22:44] *** kidd joined
[22:50] *** meteorjay left
[22:55] *** wknight8111 joined
[22:59] <mikehh> moritz_: still failing that stooopid test - all others pass

[23:01] *** payload joined
[23:16] *** kane_ joined
[23:17] *** kane_ left
[23:24] *** mikehh left
[23:27] *** bacek_ joined
[23:28] *** Tene_ is now known as Tene

[23:31] *** Khisanth left
[23:37] *** kidd left
[23:45] *** Outh9x left
[23:48] *** eternaleye left
[23:50] *** eternaleye joined
[23:51] <wayland76> ruoso: ping!

