[00:09] *** beggars left
[00:22] *** betterwosld joined
[01:04] *** slava joined
[01:13] *** dukeleto joined
[01:21] *** [1]Limbic_Region joined
[01:23] *** [1]Limbic_Region left
[01:32] <dukeleto> seen fperrad

[01:32] <dukeleto> @seen fperrad

[01:32] <lambdabot> I haven't seen fperrad.

[01:36] *** colomon joined
[01:38] *** Limbic_Region left
[01:40] *** ag90 joined
[01:43] *** skids left
[01:46] <colomon> rakudo: say (4 + 0i) ** 2;

[01:46] <p6eval> rakudo 0d4fe0: OUTPUT«16␤»

[01:46] <colomon> rakudo: say (4 + 1i) ** 2;

[01:46] <p6eval> rakudo 0d4fe0: OUTPUT«17␤»

[01:48] <colomon> rakudo: say 1i ** 2;

[01:48] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[01:48] <colomon> rakudo: say 1i ** 3;

[01:48] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[01:49] *** ag90 left
[01:52] <colomon> rakudo: say abs(1i);

[01:52] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[01:52] <colomon> rakudo: say abs(4+1i);

[01:52] <p6eval> rakudo 0d4fe0: OUTPUT«4.12310562561766␤»

[02:00] <dukeleto> rakudo: say (8i).roots(4)

[02:00] <p6eval> rakudo 0d4fe0: OUTPUT«1.55377+0.643594i-0.643594+1.55377i-1.55377-0.643594i0.643594-1.55377i␤»

[02:01] <colomon> rakudo: say +(4+1i)

[02:01] <p6eval> rakudo 0d4fe0: OUTPUT«4+1i␤»

[02:02] <colomon> rakudo: say (4 + 1i).Num

[02:02] *** wayland76 joined
[02:02] <p6eval> rakudo 0d4fe0: OUTPUT«Method 'Num' not found for invocant of class 'Complex'␤»

[02:03] <wayland76> @seen moritz_

[02:03] <phenny> wayland76: 28 Aug 12:20Z <pmichaud> tell wayland76  I think perl6 --version should report the actual version.  But I don't know of a clean way to do that yet... patches welcome.

[02:03] <lambdabot> moritz_ is in #perl6. I last heard moritz_ speak 1d 4h 45m 47s ago.

[02:10] *** Makoryu joined
[02:17] *** M_o_C left
[02:18] *** Whiteknight left
[02:22] <TimToady> moritz_ is out sailing till Sunday, I believe

[02:27] <colomon> TimToady: Am I correct in assuming that operators like ** are intended to work with Complex?

[02:27] <TimToady> why not?

[02:28] <colomon> I don't think the spec mentions it, and I wanted to make sure the tests I've been writing are reasonable.

[02:28] <wayland76> Ok, thanks.  I was just going to suggest a clarity improvement for his blog post, but it's not really important :)

[02:28] <TimToady> certainly for integral powers it should work

[02:28] <dukeleto> colomon: i wrote many spec tests for complex numbers, but you may have found some new bugs

[02:29] <colomon> TimToady: There's no real reason they can't work for complex powers as well.  I've got an implementation to do it, in fact, but it fails for mysterious (non-math, I think) reasons.

[02:29] <wayland76> Does that mean that »**« is a hyper power?

[02:29] <TimToady> rakudo: say 1i ** 0.3

[02:29] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[02:30] <wayland76> In that case, I think we need a meta-operator called "super" :)

[02:30] *** tylerni7 joined
[02:30] <colomon> TimToady: yeah, it's just completely broken in current rakudo -- routinely returns incorrect results.

[02:30] <TimToady> rakudo: say (1..10) «**» 2

[02:30] <p6eval> rakudo 0d4fe0: OUTPUT«Non-dwimmy hyperoperator cannot be used on arrays of different sizes or dimensions.␤in Main (/tmp/dymW1j2irE:2)␤»

[02:31] <TimToady> o_O

[02:31] * dukeleto see's a bunch of colored smoke

[02:31] <colomon> rakudo: say (1..10 >>**>> 2

[02:31] <p6eval> rakudo 0d4fe0: OUTPUT«say requires an argument at line 2, near " (1..10 >>"␤in Main (src/gen_setting.pm:2550)␤»

[02:31] <colomon> rakudo: say (1..10)>>**>> 2

[02:31] <p6eval> rakudo 0d4fe0: OUTPUT«149162536496481100␤»

[02:31] <wayland76> I'll give say an argument

[02:32] <TimToady> funny it thinks <<**>> is non dwimmy

[02:32] <wayland76> rakudo: say "I'm going to punch your head!";

[02:32] <p6eval> rakudo 0d4fe0: OUTPUT«I'm going to punch your head!␤»

[02:32] <TimToady> rakudo: say (1..10) <<**>> 2

[02:32] <p6eval> rakudo 0d4fe0: OUTPUT«149162536496481100␤»

[02:32] <TimToady> no, only «**»

[02:32] <wayland76> Hmm.  Is that a bug?

[02:33] <dukeleto> rakudo: say (1i ) ** 2;

[02:33] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[02:33] <TimToady> I'll bet there's a copy-paste error somewhere

[02:33] <tylerni7> the internets say anyone who knows how to be nice can help out with perl6, is this true?

[02:33] <dukeleto> tylerni7: indeed it is

[02:33] <TimToady> you also have to be nice, most of the time

[02:33] <colomon> dukeleto: There are a lot of tests for Complex, but none for **.

[02:33] <tylerni7> I can do that mostly

[02:33] <dukeleto> tylerni7: welcome! how would you like to help?

[02:34] <wayland76> tylerni7: http://use.perl.org/~masak/journal/39445

[02:34] <dukeleto> colomon: do you have commit access to the spec test suite?

[02:34] *** weinig joined
[02:34] <colomon> Yes.

[02:34] *** weinig left
[02:34] <wayland76> tylerni7: Although masak has pointed out that the information in that link is open-ended, rather than closed-ended

[02:35] <colomon> Do y'all reckon I should create S32-num/power.t?  I don't see any tests for non-Complex **, either...

[02:35] <colomon> So far I've just been piggy-backing the Complex ** tests into complex.t.

[02:36] <tylerni7> I'm not sure what I'd be best at... I'm OK at perl 5, but I'd love to do whatever needs to be done that I can actually do?

[02:36] <dukeleto> colomon: that is good :) S32-num/complex.t is very sparse

[02:36] <wayland76> tylerni7: That link will suggest various roles you could fill in the community

[02:36] <TimToady> tylerni7: lots of ways to help out, depending

[02:37] <dukeleto> colomon: do you want to add your examples as todo'ed test cases?

[02:37] <colomon> dukeleto: That's what I've been thinking.

[02:37] <dukeleto> colomon++

[02:37] <TimToady> tylerni7: at minimum, you can tell us where our documentation sucks :)

[02:37] <wayland76> But it may also help to mention your skill-set.  Can you also write C?  Documentation?  Or would you prefer to try writing real-world perl 6 and submitting bug reports?  There are other options too, but those spring to mind at the moment

[02:38] *** hudnix left
[02:38] <wayland76> (afk &)

[02:38] <tylerni7> I think I'd probably be most useful doing bug reports or documentation

[02:38] <dukeleto> colomon: you very well may hit some parrot bugs. The parrot Complex PMC is barely tested and has some bugs with NaN handling, at least

[02:40] <tylerni7> so uh yea, I guess I'd be best as a priest?

[02:40] <dukeleto> tylerni7: you can run a smoke bot, which is an automated testing service that updates to the latest code and then submits test runs to a central server

[02:40] <colomon> rakudo: sub iPower($a, $b) { exp($b * log($a)) }; say iPower(1i, 3.0);

[02:40] <p6eval> rakudo 0d4fe0: OUTPUT«NaNNaNi␤»

[02:40] <colomon> versus

[02:40] <dukeleto> tylerni7: we all fill many roles as we go further in our quest

[02:40] <tylerni7> ok sounds good

[02:40] <TimToady> mostly we don't try to put people in boxes, so you can do whatever tickles your fancy

[02:40] <colomon> rakudo: say exp(3.0 * log(1i));

[02:40] <p6eval> rakudo 0d4fe0: OUTPUT«-1.83691e-16-1i␤»

[02:41] <TimToady> as you can see, some people just like to torment rakudo in-channel

[02:41] <tylerni7> heh

[02:41] <dukeleto> tylerni7: first thing is, have you downloaded some code and gotten it to compile on your machine? what platform are you on?

[02:41] *** calvinf joined
[02:41] <dukeleto> rakudo: say floor(NaN)

[02:41] <p6eval> rakudo 0d4fe0: OUTPUT«-2147483648␤»

[02:41] <tylerni7> I don't have perl 6 yet, I'm on 64bit linux

[02:41] <tylerni7> (ubuntu)

[02:42] <TimToady> same as me

[02:42] *** carlin joined
[02:42] <dukeleto> that isn't a rakudo bug, it's a parrot bug. I'm on it ;)

[02:43] <tylerni7> is there a link for the source of the smoke bot testing program thing?

[02:46] <TimToady> well, you probably want http://rakudo.org/how-to-get-rakudo first

[02:48] <TimToady> if you want to hack on tests or specs, you'll want a pugs commit bit (for the pugs repo, which holds a lot of stuff in addition to the pugs implementation)

[02:48] <TimToady> most of the web pages are stored there too

[02:48] <tylerni7> ok

[02:48] <TimToady> in fact, if you /msg me your email and preferred svn nick, I can give you a commit bit now

[02:49] <dukeleto> tylerni7: the test suite is written in perl

[02:49] <tylerni7> ok 

[02:49] <dukeleto> tylerni7: it's fun, I promise

[02:49] <tylerni7> hehe :P I'm not worried about that

[02:49] <TimToady> you have to understand that for some of us, our idea of fun is rather...masochistic...  :)

[02:50] <dukeleto> TimToady++

[02:50] <tylerni7> I said I've used perl before :P hehehe

[02:51] <TimToady> okay, pugs commit bit sent

[02:51] <tylerni7> ok I'm building rakudo now

[02:51] <TimToady> takes a little more work to get a rakudo commit bit, 'cause they require a signed agreement

[02:51] <colomon> What's the proper syntax to TODO a test?  is it just # TODO ?

[02:52] <dukeleto> colomon: #?rakudo todo 'some description'

[02:52] *** calvinf left
[02:52] <TimToady> on the line before the test

[02:52] <dukeleto> colomon: that is called "fudging" the test

[02:52] <TimToady> see t/spec/README for more

[02:52] <dukeleto> colomon: it can take a number as well to denote a group of tests.

[02:52] <TimToady> or it can treat a block of tests as one thing

[02:53] <dukeleto> colomon: #?rakudo 3 skip '3-arg log'

[02:53] <colomon> dukeleto++ TimToady++

[02:53] <dukeleto> colomon: there is also #?rakudo 3 todo 'foo'

[02:53] <TimToady> if it parses okay

[02:54] <colomon> skip if it doesn't parse, todo if it does, right?

[02:54] <TimToady> right

[02:54] <dukeleto> colomon: todo tests run, so that when they pass, you know about it. skipped tests don't run, because they b0rk the test process/fail to parse/don't apply to the current platform/compilation args

[02:54] <pmichaud> skip if it segfaults, also

[02:54] <pmichaud> (or otherwise aborts)

[02:54] <pmichaud> (good evening, #perl6)

[02:55] <dukeleto> pmichaud: howdy

[02:55] <colomon> Is there a code for "passes, but almost certainly for the wrong reasons"?

[02:55] <dukeleto> colomon: there should be :) usually a hilarious and scary comment takes it's place

[02:56] <TimToady> you can still mark it todo, and it will "unexpectedly succeed"

[02:56] <pmichaud> might as well leave it passing. but then (if possible) add a test that demonstrates the wrong reason :)

[02:56] *** sevvie joined
[02:57] <TimToady> though autounfudge may delete the todo

[02:57] <dukeleto> colomon: but I think writing another test that fails would be the best case scenario :)

[02:57] <colomon> Sure, I've got the tests that fail, too.

[02:57] <colomon> But like this sequence:

[02:57] <dukeleto> autounfudge sounds like a bland process

[02:57] <colomon> say 1i ** 2;

[02:58] <colomon> rakudo: say 1i ** 2;

[02:58] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[02:58] <colomon> rakudo: say 1i ** 3;

[02:58] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[02:58] <colomon> rakudo: say 1i ** 4;

[02:58] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[02:58] <dukeleto> rakudo: $x = 1i; say $x ** 2

[02:58] <p6eval> rakudo 0d4fe0: OUTPUT«Symbol '$x' not predeclared in <anonymous> (/tmp/RXsGuzYQ0n:2)␤in Main (src/gen_setting.pm:3454)␤»

[02:58] <dukeleto> rakudo: my $x = 1i; say $x ** 2

[02:58] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[02:59] <dukeleto> interesting. it does not seem to be a precedence issue

[02:59] <colomon> So the first two are wrong, and the third surely is also wrong but happens to be the correct answer by accident.

[02:59] <dukeleto> colomon: the third is not a good test

[02:59] <colomon> how so?

[03:00] <pmichaud> I think the ultimate problem at the moment is that Parrot likes to numify complex numbers into reals

[03:00] <dukeleto> x ** 4 and (ix)**4 are always the same number

[03:00] <dukeleto> since (i)**4 = 1

[03:00] <colomon> dukeleto: it's more than that:

[03:00] <dukeleto> so it is not a useful test

[03:00] <pmichaud> so since Rakudo doesn't have  infix:<**>(Complex, Any) yet, it's falling back to infix:<**>(Any, Any)

[03:00] <colomon> rakudo: say (4 + 1i) ** 2

[03:00] <p6eval> rakudo 0d4fe0: OUTPUT«17␤»

[03:01] <dukeleto> colomon: that is definitely a bug

[03:01] <pmichaud> and then Parrot numifies the 1i to be 1

[03:01] <pmichaud> (yes, that's broken)

[03:01] <pmichaud> example coming up

[03:01] <colomon> pmichaud: Yes, I've implemented nfix:<**>(Complex, Any) -- but another bug seems to break it.

[03:02] <dukeleto> colomon: the more tests the better :) 

[03:02] <colomon> Thought I'd focus on making sure there were tests for it first.

[03:02] <jeekobu> rakudo: say (2 + 1i + 3 + 2i) ** 2

[03:02] <p6eval> rakudo 0d4fe0: OUTPUT«34␤»

[03:02] <pmichaud> rakudo: say (2 + 1i + 3 +2i)

[03:02] <p6eval> rakudo 0d4fe0: OUTPUT«5+3i␤»

[03:02] <pmichaud> rakudo:  say (5 + 3i) * (5 + 3i)

[03:02] <jeekobu> Yeah

[03:02] <p6eval> rakudo 0d4fe0: OUTPUT«16+30i␤»

[03:02] <colomon> 34 = 25 + 9

[03:03] <jeekobu> Yup

[03:03] <pmichaud> Maybe I'll patch Parrot so it throws an exception when attempting to numify a Complex with a non-zero imaginary component

[03:04] <colomon> pmichaud: That seems like a very good idea.

[03:04] <pmichaud> oh, ick

[03:04] <TimToady> decommuting &

[03:05] <pmichaud>         return sqrt(re * re + im * im);

[03:05] <dukeleto> pmichaud: that is what a signalling NaN is for

[03:06] <dukeleto> pmichaud: feel free to add your comments to https://trac.parrot.org/parrot/ticket/954 :)

[03:06] <pmichaud> dukeleto: that ticket is well over my head

[03:06] <pmichaud> switching terminals... brb

[03:07] <dukeleto> pmichaud: i doubt it :) Does rakudo want to support the concepts of "quiet" NaN (the normal one) and signalling NaN (sNaN), which throws an exception at first use

[03:08] <dukeleto> parrot is toying with implementing the idea. I don't know if any HLL's would want it though

[03:08] <pugs_svn> r28101 | colomon++ | [t/spec/S32-num/power.t] Start to generate some tests for **. 

[03:08] <pmichaud> Perl 6 exceptions are of the "throw at first use" variety

[03:09] <colomon> I need to get some sleep now.  If someone could take a look at power.t there and see if it looks reasonable, and let me know what changes I can make, I'll try to get to them in the morning...

[03:09] <dukeleto> colomon: there?

[03:10] <dukeleto> duh

[03:10] <dukeleto> i see

[03:10] <dukeleto> colomon: i will take a look

[03:10] <pmichaud> I suspect the integer power tests should not be is_approx

[03:10] <colomon> Danke.

[03:11] <pmichaud> colomon: do you have your implementation of infix:<**>(Complex, Any) somewhere?  I'd like to take a look at it

[03:12] <pmichaud> rakudo:  say 3 % 0;

[03:12] <p6eval> rakudo 0d4fe0: OUTPUT«3␤»

[03:12] <pmichaud> o_O

[03:12] <pmichaud> rakudo:  say 3 / 0

[03:12] <lisppaste3> colomon pasted "** for Complex" at http://paste.lisp.org/display/86216

[03:12] <p6eval> rakudo 0d4fe0: OUTPUT«Divide by zero␤»

[03:13] <pmichaud> colomon: thanks

[03:13] <colomon> I believe the exact same code needs to be declared again as infix<**>(Any, Complex) as well.

[03:13] <pmichaud> I'm not sure that exp and log are completely working on complex numbers

[03:14] <dukeleto> pmichaud: for instance, floor(NaN) could raise a signalling NaN (exception) instead of returning ilogb(NaN), which is the fallback  in ieee754-2008 and the non-intuitive behavior that you mentioned

[03:14] <pmichaud> dukeleto: Rakudo will want to do whatever the Perl 6 specification says to do.  I don't know what that will be.  :-)

[03:15] <dukeleto> pmichaud: is there any documented stance for what the Perl 6 spec thinks of ieee754 ?

[03:15] <pmichaud> dukeleto: not that I'm aware of.

[03:16] <pmichaud> checking

[03:16] <pmichaud> oh, wait.  lots of stuff

[03:16] <pmichaud> see S02

[03:17] <pmichaud> S02:653

[03:19] <colomon> pmichaud: If you check the back log, you can see examples from me where complex log and exp work fine in isolation, but if you wrap a function around them the function's result is incorrect.

[03:20] <colomon> and now off to bed for real.

[03:20] <dukeleto> colomon: night!

[03:20] <dukeleto> pmichaud: nice! now I have ammunition to implement that stuff in parrot :)

[03:21] <pmichaud> buubot: spack ieee

[03:21] <buubot> pmichaud: Couldn't match input.

[03:21] <pmichaud> buubot: spack IEEE

[03:21] <buubot> pmichaud: Couldn't match input.

[03:21] <pmichaud> (I did ack -i ieee on the synopsis directory, lots of useful information there)

[03:22] <dukeleto> whoa: in the absence of explicit initialization, native floating-point types default to NaN,... The complex type defaults to NaN + NaN i.

[03:23] <dukeleto> more than one kind of NaN ?

[03:23] <pmichaud> rakudo: multi sub infix:<**>(Complex $a, $b) { ($a.log * $b).exp };  say 1i ** 2;

[03:23] <p6eval> rakudo 0d4fe0: OUTPUT«-1+0i␤»

[03:23] <carlin> rakudo: eval("sub foo"); eval("foo"); say $!;

[03:23] <p6eval> rakudo 0d4fe0: OUTPUT«maximum recursion depth exceeded␤»

[03:24] <dukeleto> so perl 6 distinguishes between complex NaN and real NaN

[03:24] *** sevvie left
[03:25] <pmichaud> my $a = 1i; my $b = 3;  say log($a), $a.log;

[03:25] <pmichaud> rakudo: my $a = 1i; my $b = 3;  say log($a), $a.log;

[03:26] <p6eval> rakudo 0d4fe0: OUTPUT«0+1.5708i0+1.5708i␤»

[03:26] <pmichaud> rakudo: my $a = 1i; my $b = 3;  say log($a) * $b, $a.log * $b;

[03:26] <p6eval> rakudo 0d4fe0: OUTPUT«0+4.71239i0+4.71239i␤»

[03:26] <pmichaud> rakudo: my $a = 1i; my $b = 3;  say exp(log($a) * $b), exp($a.log * $b);

[03:26] <p6eval> rakudo 0d4fe0: OUTPUT«-1.83691e-16-1i-1.83691e-16-1i␤»

[03:27] <pmichaud> a-ha

[03:28] <dukeleto> pmichaud: precedence ?

[03:29] <pmichaud> objectref-ness

[03:29] *** sevvie joined
[03:29] <pmichaud> rakudo:  my $a = -1i; sub foo($a) { exp($a) };  say foo($a), exp($a);

[03:29] <p6eval> rakudo 0d4fe0: OUTPUT«1+3.60739e-313i0.540302-0.841471i␤»

[03:34] *** Myspl joined
[03:35] <pugs_svn> r28102 | leto++ | Change integer tests in S32-num/power.t to use is() instead of is_approx(), set the planned number of tests and add a todo test for complex powers 

[03:35] *** Myspl left
[03:37] <pmichaud> rakudo:  say "3".exp

[03:37] <p6eval> rakudo 0d4fe0: OUTPUT«Method 'exp' not found for invocant of class 'Str'␤»

[03:40] <carlin> rakudo: proto foo { say 42; }; proto foo { say 42; }; foo;

[03:40] <p6eval> rakudo 0d4fe0:  ( no output )

[03:44] <dukeleto> rakudo: say (0**0)

[03:44] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[03:45] <dukeleto> rakudo: say (NaN**0)

[03:45] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[03:47] <dukeleto> who thinks that is intuitive ? ;)

[03:49] <carlin> rakudo: say "foo"**0; say "foo"**1;

[03:49] <p6eval> rakudo 0d4fe0: OUTPUT«1␤0␤»

[03:52] <wayland76> Just for everyone's reference, I linked perl6.org on the Wikipedia page for Perl 6.  If anyone else wants to link it on some of the other high-ranking perl6 websites... :)

[03:55] *** mepplock joined
[03:55] <pugs_svn> r28103 | leto++ | Add some tests to S32-num/power.t relating to Inf, NaN and complex numbers 

[03:55] <carlin> rakudo: proto foo($bar) {}; proto foo($baz, $quux) {}; foo;

[03:55] <p6eval> rakudo 0d4fe0:  ( no output )

[03:56] <carlin> does that segfault for anyone else?

[03:59] <dukeleto> carlin: I get a Bus error on darwin

[04:00] <carlin> rt #68242 is sort of related to this

[04:09] *** carlin left
[04:11] *** meppl left
[04:12] <pugs_svn> r28104 | leto++ | Add myself to AUTHORS. It took a while. 

[04:12] *** mepplock is now known as meppl

[04:16] *** Confield left
[04:23] *** nbrown left
[04:41] *** Karthz joined
[04:42] <Karthz> How can I be a volunteer? What kind of help could I do for Perl 6?

[04:43] <wayland76> Karthz: Overview of how to help http://use.perl.org/~masak/journal/39445

[04:43] <wayland76> But there are many ways, depending on your skill set

[04:43] <Karthz> Thanks!

[04:43] <wayland76> We also have a shiny new website: http://perl6.org/

[04:43] <Karthz> I am a Software Developer. However, I am new to Perl. I would love to learn Perl though.

[04:44] <wayland76> Ok, that's not a problem

[04:44] <Karthz> Yeah, I visited this chat from the new website only.

[04:44] *** frew joined
[04:44] <wayland76> I'd suggest reading over the first link I pasted.  Probably the first thing to do in your case is get a copy of the Rakudo implementation of the Perl 6 spec

[04:45] <wayland76> Once you have that, try out some examples and stuff, so that you can get a feel for what's done and what isn't

[04:45] <wayland76> What programming languages are you currently familiar with?

[04:46] <Karthz> I am familiar with Java, C++, C, and Python.

[04:46] <wayland76> Ok, you may find Perl a little different

[04:46] <wayland76> in that, you can do pretty much all the stuff you're familiar with

[04:47] <wayland76> But there are also a number of things borrowed from other languages that you'll be less familiar with

[04:47] <wayland76> one of the Perl slogans is "There's more than one way to do it", so Perl tends to provide features so that you can use any programming style you like

[04:47] *** cognominal joined
[04:48] <wayland76> ...up to a point.  They don't feel they have to get *everything* in, but they like to include lots

[04:48] <Karthz> cool. that sounds great. 

[04:49] *** hudnix joined
[04:49] <Karthz> Could you please tell me where I could get a copy of the "Rakudo implementation of the Perl 6 spec"?

[04:49] <wayland76> The long version of what I just said appears here: http://www.wall.org/~larry/pm.html  -- that was written before perl6 was designed, but some ideas still apply (you may not want to read the long version, so that's just FYI)

[04:50] * wayland76 is looking for the link for Karthz

[04:50] <Makoryu> Karthz: http://rakudo.org/how-to-get-rakudo <- Like this?

[04:50] <wayland76> http://www.rakudo.org/how-to-get-rakudo

[04:50] <wayland76> Ah, I'm too slow :)

[04:50] <Karthz> thanks to the both of you :)

[04:50] * Makoryu bows

[04:50] <wayland76> Quick overview -- the Rakudo implementation of the Perl 6 spec runs on the Parrot Virtual Machine

[04:51] <wayland76> So part of the setup is getting that installed

[04:51] <wayland76> If you're on an RPM system, you can also build RPMs of Parrot and Rakudo, if you prefer those

[04:52] <wayland76> (I'll be back in 2 minutes)

[04:53] <Makoryu> Speaking of Parrot, is there a J/K/Q implementation yet? (I know there's an APL implementation but.... it's APL.)

[04:55] <wayland76> You mean, is there an implementation of eg. the language called "J" that runs on Parrot?

[04:55] <Makoryu> Yep

[04:56] <wayland76> I don't know the answer to that -- the #parrot channel on irc.parrot.org will probably know though

[05:04] <pmichaud> there's been some interest in implementing J

[05:07] <pmichaud> afk, sleep

[05:12] *** kyle_l5l joined
[05:13] *** rwolf joined
[05:15] <Karthz> is there a Perl book that you would recommend?

[05:16] <Karthz> for beginners of Perl

[05:19] <Makoryu> Karthz: The Perl 6 wikibook seems to be geared towards beginners

[05:20] <wayland76> My approach when learning Perl 5 was to read the Perl 5 equivalent of http://perlcabal.org/syn/

[05:21] <wayland76> That also has the big advantage that it's up-to-date :)

[05:21] <wayland76> The Perl6 spec is fairly stable in most areas, but there are still areas that change

[05:22] <wayland76> For example, IO is still in draft mode, and so are threads

[05:25] *** cotto left
[05:26] *** eMaX joined
[05:26] *** cotto joined
[05:29] <Karthz> cool, thanks

[05:33] *** idontknowperl joined
[05:33] <idontknowperl> hello?

[05:33] *** idontknowperl left
[05:36] *** justatheory left
[05:36] *** beggars joined
[05:52] <wayland76> I should've mentioned that my link to the synopses might not be everyone's preferred method of learning, but it worked for me.

[05:52] <wayland76> Also, S02 could be confusing if you don't know Perl

[05:52] <wayland76> Karthz: Did you ever program in BASIC?

[05:53] <Karthz> long back.. that's the first language i ever learnt

[05:53] *** anfedorov joined
[05:53] <anfedorov> hi all

[05:53] <wayland76> hi

[05:54] <anfedorov> random guy on internet here, very impressed with perl6 architecture ;) you guys are brilliant!

[05:54] <wayland76> Karthz: Ok, so you'll be familiar with the idea that punctuation can mark a variable type

[05:54] <Karthz> wayland76: why do you ask? is there a relation between BASIC and Perl?

[05:54] <anfedorov> oops, I'm thinking Parrot, perl6 is neat too, though

[05:54] <anfedorov> :)

[05:54] <s1n> ouch!

[05:55] <wayland76> Well, in BASIC, a string is called STRINGNAME$ whereas in Perl, a scalar is is $stringname

[05:55] <wayland76> (scalars can be strings, ints, or whatever, like in Python)

[05:55] <wayland76> We also have @array and %hash

[05:55] <wayland76> so you can have $item = @array[0]

[05:56] <wayland76> or $item = %hash<key>

[05:56] <wayland76> Anyway, I'm going to be away from my keyboard for half an hour or so -- see you all in a bit

[05:57] <Karthz> sure, thanks a lot.

[05:58] *** jauaor joined
[05:58] <jauaor> hello

[06:02] *** SmokeMachine joined
[06:03] <spinclad> hugme: hug me

[06:03] * hugme hugs me

[06:03] <spinclad> :)

[06:06] *** fakewasabi joined
[06:07] *** eMaX_ joined
[06:07] *** fakewasabi left
[06:08] *** renormalist left
[06:08] *** eMaX left
[06:09] *** renormalist joined
[06:09] *** jaldhar joined
[06:10] *** anfedorov left
[06:25] <wayland76> back.  

[06:25] <wayland76> hugme: hug spinclad

[06:25] * hugme hugs spinclad

[06:46] *** SmokeMachine left
[06:50] *** rwolf left
[06:53] *** carlin joined
[07:10] *** zamolxes left
[07:14] *** sri_kraih joined
[07:17] *** SmokeMachine joined
[07:21] *** agentzh joined
[07:29] *** frew left
[07:31] *** Makoryu left
[07:32] <dukeleto> yay for proper perl6 syntax highlighting in vim

[07:34] *** Su-Shee joined
[07:34] <Su-Shee> good morning! :)

[07:35] *** omega_ left
[07:35] *** omega joined
[07:38] <dukeleto> 'ello

[07:38] *** FCO joined
[07:39] *** SmokeMachine left
[07:41] *** slava left
[07:42] *** jrtayloriv left
[07:45] *** beggars left
[07:54] *** Karthz left
[08:03] <pugs_svn> r28105 | leto++ | Add more tests for various power operations in S32-num/power.t 

[08:13] *** gr888 joined
[08:13] *** gr888 left
[08:15] *** molaf joined
[08:27] *** Rint joined
[08:32] *** caglar joined
[08:32] *** caglar is now known as Guest84939

[08:55] *** wormphlegm joined
[08:56] *** wormphlegm left
[08:56] *** wormphlegm joined
[08:57] *** wormphlegm left
[08:57] *** wormphlegm joined
[08:58] *** wormphlegm left
[09:00] *** IRSeekBot joined
[09:01] *** Oaksage joined
[09:01] *** PZt left
[09:08] *** agentzh left
[09:13] *** eMaX_ left
[09:18] *** eMaX joined
[09:20] *** agentzh joined
[09:44] *** agentzh left
[09:48] *** szbalint joined
[09:50] *** ejs joined
[10:16] *** abra joined
[10:19] *** agentzh joined
[10:22] *** kyle_l5l left
[10:30] *** agentzh1 joined
[10:33] *** wayland76 left
[10:33] *** wayland76 joined
[10:35] *** jaffa8 joined
[10:35] <jaffa8> hi

[10:36] *** PZt joined
[10:36] <jaffa8> How would you determine in Perl 6 regular expression if a captured group is not captured?

[10:37] *** iblechbot joined
[10:40] *** agentzh left
[10:48] *** M_o_C joined
[10:55] *** payload left
[10:55] <cognominal> jaffa8, I suppose that the name of the rule is missing as a key from the $/ tree

[11:03] <wayland76> You start by looking among the hostages!  (Yes, that's a joke, because I don't know the answer :) )

[11:04] *** beggars joined
[11:08] *** maerzhase joined
[11:14] <cognominal> jaffa8, if you meant checking within the expression itfself, you are ouf of luck because Perl 6 closure are not yet implemented by PGE

[11:16] <colomon> pmichaud++ # working implementation of Complex **

[11:21] *** Front_slash joined
[11:22] *** ceci joined
[11:29] *** synth left
[11:29] *** synth joined
[11:30] *** azawawi joined
[11:31] <azawawi> hi

[11:32] <jaffa8> I mean an expression like this

[11:32] <jaffa8> e.g/(a)|(b)/

[11:32] <jaffa8> According to synopsys

[11:33] <jaffa8> both are matched as $0

[11:33] <jaffa8> How do you know which is matched left or right?

[11:34] <azawawi> moritz_: ping

[11:38] <azawawi> moritz_: can u install sbcl on feather1?

[11:38] <azawawi> moritz_: thanks :)

[11:42] <pugs_svn> r28106 | colomon++ | [t/spec/S32-num/power.t] Changed is back to is_approx for Complex powers, fixed broken test, reorganized Complex tests, added several new tests, moved plan back to plan * anticipating more heavy work on power.t in the next few days.  (Have a patch for setting which makes all

[11:42] <pugs_svn> ..failing tests work, but breaks one of the NaN tests.  Not clear if the Complex NaN tests are correct. Patch is inelegant.) 

[11:44] <lisppaste3> colomon pasted "Patch to setting/Complex.pm to make Complex powers work (pmichaud++)" at http://paste.lisp.org/display/86224

[11:45] <colomon> I recognize that patch is inelegant, and hope someone has a notion of how to make it pretty.

[11:46] <colomon> Also, I'm hoping to make additional Complex number patches in the next few days.  I think sin and cos for Complex numbers are low-hanging fruit...

[11:51] <colomon> I believe the complex test cases should all be is_approx.  That is, unless there is some sort of Complex made of two Ints mode I am not aware of.

[12:20] <cognominal> rakudo: 'a' ~~ m/<a=a>/<b=b>/  and say keys %($/)

[12:20] <p6eval> rakudo 0d4fe0: OUTPUT«Method 'postcircumfix:{ }' not found for invocant of class 'Regex'␤»

[12:21] <cognominal> oops

[12:21] <cognominal> rakudo: 'a' ~~ m/<a=a>|<b=b>/  and say keys %($/)

[12:21] <p6eval> rakudo 0d4fe0: OUTPUT«Unable to find regex 'a'␤in regex PGE::Grammar::_block53 (/tmp/nqQiamD85d:1)␤called from Main (/tmp/nqQiamD85d:2)␤»

[12:21] *** jrtayloriv joined
[12:21] <cognominal> rakudo: 'a' ~~ m/<a='a'>|<b='b'>/  and say keys %($/)

[12:21] <p6eval> rakudo 0d4fe0: OUTPUT«Could not find non-existent sub m␤»

[12:22] <cognominal> rakudo: 'a' ~~ m/<a a>|<b b>/  and say keys %($/)

[12:22] <p6eval> rakudo 0d4fe0: OUTPUT«Unable to find regex 'a'␤in regex PGE::Grammar::_block53 (/tmp/Da0UsZbulh:1)␤called from Main (/tmp/Da0UsZbulh:2)␤»

[12:43] *** jrtaylor joined
[12:53] *** jrtayloriv left
[12:54] *** ejs left
[12:54] *** azawawi left
[12:56] *** r0bby left
[13:03] *** KyleHa joined
[13:05] <jaffa8> rakudo: print $/;

[13:05] <p6eval> rakudo 0d4fe0: OUTPUT«Use of uninitialized value␤»

[13:14] <jaffa8> std:$r~~/:p 3** 3.. /;

[13:14] *** synth left
[13:14] *** Ingmar left
[13:14] <jaffa8> std: $r~~/:p 3** 3.. /;

[13:14] <p6eval> std 28106: OUTPUT«Potential difficulties:␤  Variable $r is not predeclared at /tmp/QkIOYVcgvg line 1:␤------> [32m$r[33m⏏[31m~~/:p 3** 3.. /;[0m␤ok 00:03 38m␤»

[13:19] *** jrtaylor left
[13:20] *** jrtayloriv joined
[13:24] *** payload joined
[13:26] *** azawawi joined
[13:32] <pugs_svn> r28107 | azawawi++ | [MiniPerl6] Added create-mp6-lisp.pl to make it easy for people to  

[13:32] <pugs_svn> r28107 | [MiniPerl6] create mp6-lisp on win32 and *nix

[13:34] <pugs_svn> r28108 | azawawi++ | [MiniPerl6] Fixed a POD typo 

[13:38] <carlin> I thought it would be fun to make a basic implementation of perl6 in PHP, got halfway through my first preg_match() and remembered why I hate that language so much :(

[13:43] *** azawawi left
[13:43] *** rindolf joined
[13:43] <rindolf> Hi all.

[13:46] *** JimmyZ joined
[13:48] <jauaor> hi

[13:49] <jaffa8> calin, all you need to do so, to understand pugs.

[13:52] <jaffa8> calin, your plans are very ambitious.

[13:54] <wayland76> carlin: Allow me to point out that the current implementation of P6 has been worked on for (IIRC) over a year by two guys, and still isn't done

[13:55] <jaffa8> How much do they work at p6 on a week?

[13:55] <M_o_C> wayland76: To which implementation are you refering?

[13:55] <jaffa8> rakudo

[13:55] <jaffa8> he refers to rakudo

[13:55] <carlin> when I say "basic" I mean "able to use 'say'" ;) Would never have got anywhere near where the currents ones are

[13:56] <wayland76> rakudo of course :)

[13:56] <jaffa8> I am trying to write a p5 regular expression translator

[13:58] <carlin> but think how nice it would be, you could configure apache to use /index.php/ as the root (so example.com/foo.pl is actually example.com/index.php/foo.pl) have it read in the file and parse it

[13:58] <wayland76> s/the current/one of the current/

[13:59] <wayland76> carlin: Wouldn't you be better off putting a web frontend on rakudo?

[13:59] <wayland76> Or using Web.pm somehow?

[13:59] <carlin> Probably

[13:59] <carlin> It's using PHP, I never said it was a good idea :p

[14:02] <wayland76> anyway, night all, I'm going to bed (it's midnight(

[14:02] <carlin> Wayland76: Night

[14:09] *** carlin left
[14:09] <rindolf> wayland76: night.

[14:09] <rindolf> Isn't wayland76 Chinese?

[14:18] <jaffa8> if he is ...

[14:19] <jaffa8> then it is logical that he went to bed.

[14:19] <TimToady> however, the converse does not hold

[14:20] *** Psyche^ joined
[14:20] *** Patterner left
[14:20] *** Psyche^ is now known as Patterner

[14:21] *** beggars left
[14:24] <rindolf> --- [wayland76] (n=wayland@ppp118-208-212-161.lns10.mel6.internode.on.net) : Tim Nelson

[14:25] *** mehryar joined
[14:26] *** mehryar is now known as mehryarm

[14:27] <Su-Shee> I think, he's australian.. 

[14:29] *** mehryarm left
[14:32] <M_o_C> lns10.mel6.internode.on.net -> 150.101.212.56 which seems to belong to Australia (Melbourn as it seems which is supported by the mel6. part)

[14:33] *** agentzh1 left
[14:33] <TimToady> you know, when someone clicks 'download', it takes them to a github page that simultaneously manages to provide too much information and too little information

[14:34] <M_o_C> you mean on perl6.org?

[14:34] <TimToady> yes

[14:35] <TimToady> also, it's not clear how to get the head revision, only releases

[14:35] <Su-Shee> I've wanted to avoid the need that each month someone has to remember to change the download link pointing to the release. 

[14:35] <jaffa8> TimToady , what is your real life job?

[14:35] <TimToady> clown

[14:36] <jaffa8> I mean seriously

[14:36] <jauaor> haha

[14:36] <jauaor> TimToady: no more vacancy?

[14:37] <TimToady> I work for a chip design company

[14:37] <jaffa8> And what do you have to do?

[14:38] <TimToady> help them design chips, and the software that interfaces to them

[14:38] <jaffa8> Is it like when the software designs the layout based on some constraints?

[14:40] * araujo can't imagine chips optimized for perl

[14:40] <Su-Shee> why not? there was symbolics once, the lisp machine... 

[14:41] <TimToady> we are not making perl chips

[14:41] <araujo> :(

[14:41] <araujo> perl6 chips?

[14:42] <jaffa8> probably not

[14:45] *** nbrown joined
[14:46] <TimToady> Su-Shee: one could put an intermediate instruction page with generic instructions; "go to this page and click the first download in the top box"

[14:46] <TimToady> the intermediate page could also point off to http://rakudo.org/how-to-get-rakud

[14:46] <TimToady> o

[14:46] <TimToady> which is complementary

[14:47] <TimToady> just looking for ways to help the new folks a bit more...

[14:48] <Su-Shee> TimToady: that's what I have in the new version of the webpage (which also separates the subjects better and makes the pages better scale for future additions) - I can easily add a "download release", "get instructions" "download most recent from github (which has this nice download ability) and so on..

[14:48] <TimToady> cool

[14:48] <TimToady> looking forward to it

[14:49] *** jhorwitz joined
[14:49] <TimToady> mostly just wiggling my fingers over the keyboard waiting for the coffee to hit

[14:49] <Su-Shee> so we can offer everything the usal nice way for all folks .. bleeding edgers, stable conservatives.. and later hopefully binary versions and the usal 986503 distribution packages. ;)

[14:51] *** Chillance joined
[14:55] *** KyleHa left
[15:06] *** frew joined
[15:08] *** justatheory joined
[15:10] <pmichaud> good morning, #perl6

[15:13] <TimToady> +1

[15:14] <pmichaud> oh, I had never clicked on the "download" link on that page.  

[15:14] <pmichaud> I think it should go to rakudo.org/how-to-get-rakudo for the time being, until we have another page of downloads

[15:16] *** JimmyZ left
[15:16] <TimToady> that seems reasonable to me

[15:17] <TimToady> maybe add a sentence to rakudo's page saying "But if you want a released version, go to <a>github</a>"

[15:18] <pmichaud> yes, we should note the released versions on the rakudo page directly, I think.

[15:18] <pmichaud> it already says  "There are also snapshots of each monthly release available at http://github.com/rakudo/rakudo/downloads."

[15:19] <TimToady> 'kay, missed that

[15:19] <pmichaud> well, if you missed it, it might need to be more visible :)

[15:20] <yath> hm, is NQP the same as kp6?

[15:21] <pmichaud> yath: no

[15:21] <yath> pmichaud: what is/was kp6 then?

[15:21] *** nihiliad joined
[15:21] <yath> i thought that was used in parrot for bootstrapping perl6...

[15:21] <pmichaud> iirc, kp6 was a lightweight bootstrapping p6 for perl 5

[15:21] <TimToady> I'd put that up in front, s/also//, and then say, 'However, since rakudo is under active development...'

[15:21] <yath> pmichaud: ah

[15:21] <pmichaud> TimToady: yes, I agree

[15:21] <yath> pmichaud: so nothing related to parrot or rakudo?

[15:22] <pmichaud> yath: not as far as I know

[15:22] <yath> ok, thanks :)

[15:24] *** maerzhase left
[15:25] <Su-Shee> updated. 

[15:26] *** zloyrusskiy joined
[15:26] *** jrtayloriv left
[15:27] *** zloyrusskiy left
[15:29] *** FCO left
[15:30] <TimToady> it would appear that pugs_svn is hosed

[15:31] *** FCO joined
[15:34] *** anfedorov joined
[15:35] *** tlbdk joined
[15:36] <pmichaud> http://rakudo.org/how-to-get-rakudo  # updated

[15:37] *** anfedorov left
[15:38] *** jrtayloriv joined
[15:46] *** frew left
[15:47] <TimToady> Su-Shee++, pmichaud++  # I'm not a bot, but I play one on IRC

[15:49] *** Oaksage left
[15:49] *** beggars joined
[15:51] <pugs_svn> r28110 | colomon++ | Test for a Complex raised to a non-Int power. 

[15:52] *** jaffa8 left
[15:52] <colomon> Whoops, forgot the [t/spec/S32-num/power.t] bit.

[15:52] *** jaffa8 joined
[15:54] <pmichaud> colomon: [t/spec] is usually sufficient

[15:55] *** jrtayloriv left
[15:57] <M_o_C> Hrm, what kind of favicon is rakudo.org using? Is that supposed to be an official logo or something?

[15:58] <pmichaud> It's just a logo.  I don't know about "official logo".

[15:59] *** zloyrusskiy joined
[15:59] *** zloyrusskiy left
[15:59] *** anfedorov joined
[16:00] <M_o_C> Ok. I was just asking because I wondered wether somebody made that for rakudo or wether it's from the theme you're using

[16:00] <M_o_C> .

[16:01] <pmichaud> Rakudo didn't have any sort of logo so I had that one created as a temporary.

[16:02] <M_o_C> Ah, ok. Looks good btw :)

[16:03] *** jrtayloriv joined
[16:05] *** anfedorov left
[16:07] *** anfedorov joined
[16:09] *** andrewz left
[16:11] *** iblechbot left
[16:11] *** iblechbot joined
[16:21] <s1n> good mid-morning #perl6 :)

[16:21] <s1n> today looks like a fine day for a mini-hackathon

[16:23] *** anfedorov left
[16:24] *** anfedorov joined
[16:26] <rindolf> s1n: and a perfect day to shoot missiles on the Enemy's soldiers.

[16:27] *** anfedorov left
[16:27] *** maerzhase joined
[16:28] *** anfedorov joined
[16:33] *** r0bby joined
[16:34] *** anfedorov left
[16:38] *** Caomai joined
[16:38] *** maerzhase left
[16:38] *** maerzhase joined
[16:44] *** anfedorov joined
[16:44] *** anfedorov left
[16:45] *** anfedorov joined
[16:45] *** anfedorov left
[16:46] *** ntgrl joined
[16:49] *** integral is now known as exponential

[16:49] *** frew joined
[16:50] *** ntgrl is now known as integral

[16:51] *** exponential left
[17:01] *** r0bby left
[17:08] <payload> is there a better method than spam say subs to debug a rakudo error message like

[17:08] <payload> perl6regex parse error: Quantifier follows nothing in regex at offset 869, found ':'

[17:08] <payload> in Main (src/gen_setting.pm:3454)

[17:08] <payload> ?

[17:12] <jaffa8> what is regular expression?

[17:12] <jaffa8> that is easy

[17:16] <jaffa8> payload: it is not complete.

[17:17] *** xomas_ is now known as xomas

[17:19] * jauaor coding a bit in his tiny language

[17:22] <payload> :-/ it's not so easy when it is happening while importing a grammar module http://github.com/krunen/xml/blob/1b974536856270aaf183f259908ecf47c2a81953/lib/XML/Grammar/Document.pm

[17:22] *** Whiteknight joined
[17:27] <payload> this line dies   token name { <.alpha><.ident>+[:<.ident>+]? }

[17:28] *** FCO left
[17:28] *** frew left
[17:29] <jaffa8> try \:

[17:30] <jaffa8> payload

[17:32] <payload> thx ^^ works

[17:34] <payload> well... maybe there is more than one thing outdated in http://github.com/krunen/xml/tree/master

[17:34] <payload> krunen_: 

[17:38] *** justatheory left
[17:43] *** nihiliad left
[17:43] *** Caomai left
[17:45] *** eMaX left
[17:46] *** Front_slash left
[18:01] *** mberends joined
[18:07] *** a joined
[18:07] *** a left
[18:10] <s1n> pmichaud: ping

[18:10] <pmichaud> s1n: pong

[18:10] <s1n> pmichaud: wanna go a little early and go have lunch?

[18:10] <pmichaud> just got back from lunch, tnx

[18:10] <s1n> okay

[18:10] <pmichaud> I was thinking about getting there a bit early, though -- leaving here in about 10-15 mins

[18:10] <pmichaud> that should put me there around 1:45

[18:11] <s1n> yeah i was going to leave in about 10 minutes too, grab some potbelly and set up

[18:12] *** payload left
[18:17] *** payload joined
[18:17] <pugs_svn> r28111 | leto++ | [t/spec] Add tests for min/max with Inf/NaN 

[18:20] <pmichaud> rakudo:  say <-1 -Inf>.min

[18:20] *** eMaX joined
[18:20] <p6eval> rakudo 0d4fe0: OUTPUT«-1␤»

[18:21] <pmichaud> looks to me like Rakudo is correct there.

[18:21] <dukeleto> pmichaud: -1 should be less than -Inf ?

[18:22] <pmichaud> "-1" is less than "-Inf", yes.

[18:22] <pmichaud> (since "1" is less than "I")

[18:22] *** tak11 joined
[18:22] <dukeleto> pmichaud: could you please explain that? Is it because of stringification ?

[18:22] <dukeleto> pmichaud: is that the desired behavior?

[18:22] <pmichaud> rakudo:  say <-1 -Inf>.perl

[18:22] <p6eval> rakudo 0d4fe0: OUTPUT«["-1", "-Inf"]␤»

[18:22] <pmichaud> <...>  produces a list of strings

[18:22] <pmichaud> min does &infix:<cmp>

[18:22] <pmichaud> (by default)

[18:22] <dukeleto> pmichaud: aha

[18:23] <pmichaud> rakudo:  say "-1" cmp "-Inf";

[18:23] <p6eval> rakudo 0d4fe0: OUTPUT«-1␤»

[18:23] <pmichaud> (hmm, that might be a bit misleading :-)

[18:23] <pmichaud> rakudo:  say "-5" cmp "-Inf"

[18:23] <p6eval> rakudo 0d4fe0: OUTPUT«-1␤»

[18:24] <pmichaud> rakudo: say -5 cmp -Inf

[18:24] <dukeleto> pmichaud: so how would I make that work more intutively to my mathematician's eyes?

[18:24] <p6eval> rakudo 0d4fe0: OUTPUT«1␤»

[18:24] <pmichaud> don't use <...> if you don't want strings :)

[18:24] <pmichaud> use (-1, -Inf)

[18:24] <pmichaud> rakudo:   say (-1, -Inf).min

[18:24] <p6eval> rakudo 0d4fe0: OUTPUT«-Inf␤»

[18:24] <dukeleto> pmichaud: touché

[18:24] <dukeleto> pmichaud++ for learning me good

[18:25] <pmichaud> and your mathematician's eye ought to appreciate (-1, -Inf)  more than <-1 -Inf>  anyway :) :)

[18:25] <dukeleto> pmichaud: indeed they do :)

[18:26] <pmichaud> time for me to head to the local hackathon...bbl

[18:27] <dukeleto> pmichaud: have fun and say hello for me

[18:28] <payload> min is a method on (-1, -Inf)... shouldnt there be    min (-1, -Inf):  be possible?

[18:29] <payload> say min (-1, -Inf):

[18:29] <payload> rakudo: say min (-1, -Inf):

[18:29] <p6eval> rakudo 0d4fe0: OUTPUT«Statement not terminated properly at line 2, near ":"␤in Main (src/gen_setting.pm:3454)␤»

[18:29] <payload> std: min (-1, -Inf):

[18:29] <p6eval> std 28111: OUTPUT«ok 00:03 41m␤»

[18:29] <dukeleto> rakudo: say min (-1, -Inf);

[18:29] <p6eval> rakudo 0d4fe0: OUTPUT«No applicable candidates found to dispatch to for 'min'␤in Main (/tmp/axEaphQNQW:2)␤»

[18:30] *** eMaX left
[18:30] <pugs_svn> r28112 | leto++ | [t/spec] Use () instead of <> to build arrays of numbers, pmichaud++ 

[18:30] <pmichaud> rakudo:  say min(-1,-Inf);

[18:30] <p6eval> rakudo 0d4fe0: OUTPUT«No applicable candidates found to dispatch to for 'min'␤in Main (/tmp/XbKS7Tw3hD:2)␤»

[18:31] <pmichaud> rakudo:  say [min] -1, -Inf;

[18:31] <p6eval> rakudo 0d4fe0: OUTPUT«-Inf␤»

[18:31] <pmichaud> the current spec doesn't seem to have a min() function, just a min operator and a [min] reduction operator

[18:31] <pmichaud> oh, wait

[18:31] <pmichaud> there is a min() function, but it requires an ordering argument

[18:32] <pmichaud>  our multi min( Ordering $by,  *@values )

[18:32] <pmichaud> rakudo:   say min(&infix:<cmp>, -1, -Inf);

[18:32] <p6eval> rakudo 0d4fe0: OUTPUT«Method 'arity' not found for invocant of class 'MultiSub'␤»

[18:32] <pmichaud> bah

[18:32] <pmichaud> need to move &infix:<cmp> into the setting

[18:33] <pmichaud> rakudo:  say min( {$^a cmp $^b}, -1, -Inf);

[18:33] <p6eval> rakudo 0d4fe0: OUTPUT«-Inf␤»

[18:33] <pmichaud> afk

[18:33] * s1n going to borders

[18:36] <payload> oh no... i dont mean the min function.... i mean the indirect object notation ^^ their is a colon : not a semi*

[18:39] <TimToady> payload: rakudo doesn't really parse indirect objects correctly, I suspect

[18:40] *** abra left
[18:40] <TimToady> but yes, what you have there should be equivalent to (-1, -Inf).min

[18:41] *** eMaX joined
[18:41] *** nbrown left
[18:47] *** rfordinal joined
[18:52] *** jj_ joined
[18:53] *** jj_ left
[18:53] *** nbrown joined
[18:54] *** molaf left
[18:55] *** Zloyrusskiy joined
[18:56] *** Confield joined
[18:56] *** jauaor left
[19:03] *** rfordinal left
[19:06] <jaffa8> rakudo: for (1..3) {}

[19:06] <p6eval> rakudo 0d4fe0:  ( no output )

[19:06] <jaffa8> rakudo: for (1..3) { print $_}

[19:06] <p6eval> rakudo 0d4fe0: OUTPUT«123»

[19:06] <pugs_svn> r28113 | lwall++ | [S03] some tidying of /, %, div, and mod 

[19:07] <jaffa8> rakudo: for (7..3) { print $_}

[19:07] <p6eval> rakudo 0d4fe0:  ( no output )

[19:07] <jaffa8> rakudo: for reverse(7..3) { print $_}

[19:07] <p6eval> rakudo 0d4fe0:  ( no output )

[19:07] <jaffa8> rakudo: for (reverse(7..3)) { print $_}

[19:07] <p6eval> rakudo 0d4fe0:  ( no output )

[19:07] <jaffa8> rakudo: for (reverse(1..3)) { print $_}

[19:07] <p6eval> rakudo 0d4fe0: OUTPUT«321»

[19:16] *** jaffa8 left
[19:29] *** Zloyrusskiy left
[19:30] *** astinus is now known as z

[19:31] *** Makoryu joined
[19:32] *** pmurias joined
[19:34] *** _jaldhar joined
[19:35] *** _jaldhar left
[19:35] *** _jaldhar joined
[19:45] *** jaldhar left
[19:48] *** Eevee left
[19:49] *** Eevee joined
[19:51] *** SmokeMachine joined
[20:03] *** Eevee_ joined
[20:03] *** Chillance left
[20:07] *** scud joined
[20:11] *** rfordinal joined
[20:13] <spinclad> sadly, i won't be seeing the new perl6.org for another 3 days -- (1) pairnic.org gave a cache time of a week for the old address, and (2) perl6-projects.org now redirects its page to perl6.org.  :(

[20:13] *** sri_kraih left
[20:16] *** tlbdk left
[20:17] *** Eevee left
[20:18] *** sri_kraih joined
[20:25] *** iblechbot left
[20:31] <scud> hey, so I was checking out the perl6 website and I'm interested in helping out.  

[20:31] *** nferraz joined
[20:32] *** nferraz left
[20:35] <mberends> scud: great, what do you feel like doing?

[20:35] *** jaffa8 joined
[20:36] <scud> probably application development or documentation

[20:37] <scud> I gotta say though, I'm a complete newbie when it comes to helping out open source projects.  I have all this free time that I'd be more than willing to spend helping out.

[20:38] <mberends> Perl 6 needs both apps and docs :)

[20:39] <mberends> in open source you do whatever you want, and this channel gives you help and good company

[20:41] <pugs_svn> r28114 | frew++ | add test for RT68662 

[20:41] <scud> ok, cool.  I'm reading through the perl 6 wikibook now.

[20:42] <mberends> scud: most people begin by installing Rakudo, have you done that?

[20:42] <scud> no

[20:42] <scud> Ok, I'll get on that

[20:44] *** jaldhar_ joined
[20:48] *** nihiliad joined
[20:52] *** mberends_ joined
[20:52] *** mberends left
[20:52] *** SmokeMachine left
[20:54] <scud> Ok, built and installed Rakudo.  Ran a test helloworld.pl through it to make sure it was working and success :).

[20:55] *** mberends_ is now known as mberends

[20:55] *** anfedorov joined
[20:56] *** _jaldhar left
[20:57] <sjohnson> mberends: hi

[20:57] <sjohnson> long time no see

[20:57] <mberends> scud: that was quick. one important jobs for newcomers is to give feedback about the docs and webpages, because the experienced members gloss over any deficiencies.

[20:57] <mberends> sjohnson: hi, it has been a few weeks :)

[20:58] <rindolf> scud: are you Skud?

[20:58] <scud> no

[20:58] <rindolf> scud: ah.

[20:58] *** jrtayloriv left
[20:58] <scud> should I go with a different nick?

[20:59] <Su-Shee> scud: no. we just thought you were one of the few perl women. 

[20:59] *** anfedorov left
[20:59] <Su-Shee> (at least that's what I thought, just included rindolf here..)

[21:00] <scud> ok.  Oh, but have you seen all the negative feedback on the reddit link to perl6.org? 

[21:01] <rindolf> scud: yes, we also have a Skud - Kirrily Robert

[21:01] <sjohnson> can someone paste me the link

[21:01] <scud> http://www.reddit.com/r/programming/comments/9f7yt/new_main_perl_6_website_perl6org/

[21:02] <sjohnson> i actually thought the Perl6 site was kinda good

[21:02] <sjohnson> clean, colourful, has the cute bug, and has all the relevant links withuot having to scroll anywhere

[21:02] <Su-Shee> upon a website about Squeak :) <-- that's actually a compliment :)

[21:02] <rindolf> scud: the colours hurt my eyes.

[21:02] <rindolf> They should be more pastely.

[21:03] <rindolf> And probably less.

[21:03] *** nferraz joined
[21:04] *** jrtayloriv joined
[21:04] <rindolf> I like the rounded corners though.

[21:04] <Su-Shee> rindolf: I've had a more pastel colored variation.. channel went for the candy colors :)

[21:04] <rindolf> Su-Shee: ah.

[21:05] <scud> It's not bad, but why the butterfly I'm wondering?  I can see the 6 on the wings, but is there any specific reason for it?

[21:05] <rindolf> The download button should be higher on the page.

[21:06] <rindolf> Su-Shee: have you read http://www.shlomifish.org/Files/files/text/TheHackersGuideToMarketing.pdf ?

[21:06] *** nferraz left
[21:06] <Su-Shee> it was.. the page doesn't hold all information well anymore. I already have another version in the making. 

[21:06] <Su-Shee> rindolf: do I really want to?

[21:07] <rindolf> Su-Shee: it's good.

[21:07] <rindolf> Su-Shee: I enjoyed it.

[21:07] <rindolf> Su-Shee: very enlightening.

[21:08] <rindolf> Su-Shee: by a marketing expert.

[21:08] <rindolf> It was given in OSDC::Israel::2006

[21:08] <Su-Shee> rindolf: hm. ;)

[21:09] <rindolf> Su-Shee: and a gradient would be nice.

[21:09] <rindolf> gradients I mean.

[21:10] <rindolf> Constant colours don't give a place for the eye to rest.

[21:11] *** rfordinal left
[21:11] <Su-Shee> rindolf: hence great poster design using it successfully for about 100 years.. ;)

[21:11] *** KyleHa joined
[21:11] <jaffa8> the best would be if it were finished.,

[21:11] <KyleHa> @seen frew

[21:11] <lambdabot> I saw frew leaving #perl6 3h 42m 47s ago, and .

[21:11] <rindolf> Su-Shee: but thanks for your effort.

[21:15] <payload> rakudo: say '(foo)' ~~ /'(' ~ ')' .*?/

[21:15] <p6eval> rakudo 0d4fe0: OUTPUT«Unable to parse , couldn't find final ')'␤in regex PGE::Grammar::_block51 (/tmp/holtSrgh8v:1)␤called from Main (/tmp/holtSrgh8v:2)␤»

[21:15] <payload> i think this is a bug

[21:15] <payload> rakudo: say '(foo)' ~~ /'(' ~ ')' 'foo'/

[21:15] <Su-Shee> "but that website sings gay. Perl6 needs a mascot more manly than a camel, snake, gemstone, penguin, and moon. To start off with a butterfly mascot even more feminine than some retarded Brazilian half-moon is worthy of a special mention" I think, we're on the right track.. ;)

[21:15] <p6eval> rakudo 0d4fe0: OUTPUT«(foo)␤»

[21:16] <pugs_svn> r28115 | kyle++ | adjust RT #68662 test 

[21:18] *** anfedorov joined
[21:19] <mikehh> rakudo (7666e92) builds on parrot r40855, make test PASS / make spectest (up to r28114) 1 FAILure - Ubuntu 9.04 amd64 (gcc)

[21:19] <mikehh> t/spec/S06-operator-overloading/sub.rakudo - Failed test:  45 - Parse errors: Bad plan.  You planned 44 tests but ran 45.

[21:20] <mberends> Su-Shee: you don't  take that comment seriously, do you?

[21:20] <Su-Shee> mberends: no, I know who that is. ;)

[21:21] <mikehh> ./perl6 t/spec/S06-operator-overloading/sub.rakudo - ok 28 - "", no output ?

[21:24] *** [particle]1 joined
[21:24] *** nbrown_ joined
[21:25] <KyleHa> mikehh: That's from this test:  is (if+5), 10;

[21:25] <KyleHa> It just doesn't have a description.

[21:26] <KyleHa> mikehh: Also, I fixed the bad plan a short time ago; it should run clean again.

[21:27] *** anfedorov left
[21:27] <mikehh> KyleHa: ok

[21:27] <mikehh> will try again

[21:28] <lisppaste3> colomon annotated #86224 "Proper patch for Complex **" at http://paste.lisp.org/display/86224#1

[21:28] *** jaldhar_ left
[21:29] <colomon> Finally occurred to me I should look at how the other operators handled providing interfaces for Complex, Any; Any, Complex; and Complex, Complex.  Turns out "is default" is the key.

[21:31] *** ruoso joined
[21:31] *** jaldhar joined
[21:31] *** M_o_C left
[21:31] <mikehh> ok fixed

[21:32] *** M_o_C joined
[21:34] *** awwaiid left
[21:34] <mikehh> rakudo (7666e92) builds on parrot r40855, make test PASS / make spectest (up to r28115) PASS - Ubuntu 9.04 amd64 (gcc)

[21:37] *** anfedorov joined
[21:37] *** Su-Shee left
[21:38] *** zamolxes joined
[21:39] *** nbrown left
[21:41] *** [particle] left
[21:44] *** meppl left
[21:45] *** justatheory joined
[21:54] <pugs_svn> r28116 | colomon++ | [t/spec] Re-organize the sine tests. 

[21:55] *** nbrown_ left
[21:56] *** jaffa8 left
[21:58] *** terje_ joined
[21:58] *** terje_ is now known as bionoid

[22:00] *** eMaX left
[22:06] <TimToady> I do wish that chromatic wouldn't hold out the hope of someone "fixing" perl.org merely by volunteering when that is not in fact the dynamics of the situation :)

[22:08] <rindolf> TimToady: hi.

[22:08] <TimToady> howdy

[22:08] <rindolf> TimToady: I've started volunteering in perl.org

[22:08] <rindolf> TimToady: BTW, I heard some stuff about your health.

[22:08] <rindolf> From the latest State-of-the-Onion.

[22:09] <TimToady> how did you hear that, when (as far as I know) it wasn't recorded?

[22:11] <araujo> as far as you know ....

[22:11] <TimToady> also as far as I know, I didn't say anything about my health

[22:12] <TimToady> so my guess is that it's an older SOTO that is being referenced

[22:16] <rindolf> TimToady: someone blogged about it.

[22:17] <rindolf> TimToady: I wasn't successful in running the Combust on Mandriva Cooker yet.

[22:17] *** r0bby joined
[22:17] <rindolf> But I'm hopeful I can sort it out.

[22:17] <TimToady> I have no idea what you're talking about :)

[22:17] <rindolf> The worst is probably behind.

[22:17] *** s1n left
[22:18] <rindolf> TimToady: Combust is the CMS that the *.perl.org sites are using.

[22:18] <TimToady> ah, right, I had put it out of my memory

[22:19] *** s1n joined
[22:19] <rindolf> OK, I'm going to leave the computer on at night running a backup and a packages update.

[22:19] <TimToady> rindolf: do you twitter?

[22:19] <rindolf> TimToady: I mostly plurk.

[22:20] <rindolf> But I have a twitter account

[22:20] <rindolf> /shlomif

[22:20] <rindolf> http://twitter.com/shlomif

[22:20] <TimToady> it was just a twitterish microblog about the backup etc. :)

[22:23] <rindolf> I am using my twitter login for disqus, though, due to my LiveJournal OpenID not being accepted for some reason.

[22:26] *** kmaschine joined
[22:37] *** kmaschine left
[22:39] *** kmaschine joined
[22:40] *** maerzhase left
[22:41] *** nbrown joined
[22:43] *** meppl joined
[22:48] *** rindolf left
[22:49] *** rfordinal joined
[22:52] *** kmaschine left
[22:55] *** anfedorov left
[22:55] *** anfedorov joined
[23:05] *** anfedorov left
[23:10] *** anfedorov joined
[23:11] *** anfedorov left
[23:11] *** justatheory left
[23:12] *** anfedorov joined
[23:12] *** anfedorov left
[23:12] *** anfedorov joined
[23:12] *** anfedorov left
[23:13] *** anfedorov joined
[23:15] *** pmurias left
[23:16] *** tak11 left
[23:16] *** anfedorov left
[23:19] *** anfedorov joined
[23:20] *** anfedorov left
[23:20] *** anfedorov joined
[23:21] <payload> rakudo: say "bar < foo > baz" ~~ /'<' .*? '>'/

[23:21] <p6eval> rakudo 0d4fe0: OUTPUT«< foo >␤»

[23:22] <payload> rakudo: token content { .*? }; say "bar < foo > baz" ~~ /'<' <content> '>'/

[23:22] <p6eval> rakudo 0d4fe0: OUTPUT«␤»

[23:22] <payload> :-\

[23:24] *** anfedorov left
[23:30] *** rhr joined
[23:34] *** jhorwitz left
[23:44] *** rhr_ left
[23:52] *** anfedorov joined
[23:57] <pugs_svn> r28117 | colomon++ | [t/spec] Refactor cosine as well. 

[23:58] *** Whiteknight left
