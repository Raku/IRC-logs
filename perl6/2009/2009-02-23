[00:01] *** shinobi-cl left
[00:04] *** Ariens_Hyperion left
[00:07] <wayland> hi

[00:08] <skids> OK, so if I have the STD stuff working, how does one usefully get it to show you something other than "ok" or not ok?  Like a syntax tree, maybe?  I see Dump via YAML but have no clue what to jam in there.

[00:10] * skids only ever gets a few -'s and a ~

[00:11] * wayland offers skids a #, a %, and a |

[00:23] *** zophy left
[00:29] *** gravity left
[00:30] <wayland> (btw, I don't know the answer to your questions, skids)

[00:30] *** gravity joined
[00:34] <skids> wayland: don't worry I wasn't trying to feed YAML::Syck::Dump a bunch of #'s %'s and |'s

[00:38] *** zophy joined
[00:43] *** dukeleto joined
[00:44] *** mikehh left
[00:48] *** mikehh joined
[00:48] *** zophy left
[00:49] <wayland> just as well :)

[00:51] *** zophy joined
[00:54] *** dukeleto left
[01:02] <pugs_svn> r25486 | wayland++ | Added something to generate HTML for the S32 libs

[01:11] *** jhorwitz left
[01:14] *** aindilis` joined
[01:17] *** dukeleto joined
[01:28] *** aindilis left
[01:28] *** jferrero left
[01:34] *** fridim_ left
[01:38] *** aindilis` left
[01:40] <skids> wayland: is there a way to put unrendered-but-named tags in the SXX HTML via a pod directive?  The line numbers are handy but I might want to go through and give some of those important paragraphs anchors.

[01:40] <skids> (for linking to from the WITCH)

[01:58] <dukeleto> perl6: say (-1)**(1/2)

[01:58] <p6eval> pugs, rakudo 2a9382: OUTPUT«NaN␤»

[01:58] <p6eval> ..elf 25486: OUTPUT«nan␤»

[02:00] <wayland> Not that I know of, but I'm no big expert on the whole thing.  If moritz turns up, he might know.  

[02:00] <dukeleto> perl6: say (-1)**(1/2.0)

[02:00] <p6eval> pugs, rakudo 2a9382: OUTPUT«NaN␤»

[02:00] <p6eval> ..elf 25486: OUTPUT«nan␤»

[02:06] <dukeleto> perl6: say (-1+0i)**(1/2)

[02:06] <p6eval> rakudo 2a9382: OUTPUT«1␤»

[02:06] <p6eval> ..pugs: OUTPUT«6.123031769111886e-17 + 1i␤»

[02:06] <p6eval> ..elf 25486: OUTPUT«nan␤»

[02:18] *** zophy left
[02:19] *** dukeleto left
[02:22] <pugs_svn> r25487 | putter++ | [elfparse] Start porting EXPR to elf.

[02:25] *** dukeleto joined
[02:33] *** alc joined
[02:36] *** alester joined
[02:37] *** bsb joined
[03:00] *** agentzh left
[03:01] *** agentzh joined
[03:03] *** dukeleto left
[03:07] <pugs_svn> r25488 | wayland++ | Moved stuff from S16-io to S32-setting-library/IO

[03:13] *** Maghnus joined
[03:30] <pugs_svn> r25489 | wayland++ | Did some updates, and added a uri() method

[03:31] *** dukeleto joined
[03:34] *** dukeleto left
[03:47] <pugs_svn> r25490 | wayland++ | Created the draft spec here.  It's very drafty, but no more than some.  

[03:47] <pugs_svn> r25490 | wayland++ | 

[03:47] <pugs_svn> r25490 | wayland++ | Also added the $*DEFIN, etc, as per S16.  

[03:47] <s1n> wayland: man, you are very active on the mailing list!

[03:48] <s1n> i'm looking at my inbox an almost every one of my unread list emails you have participated in :)

[03:50] <wayland> Yeah, I have no idea what I'm doing, but I'm writing the specs, thus my need for frequent guidance :)

[03:51] <wayland> Actually, I know how to rework a document quite well, I just don't know enough perl6

[03:51] <wayland> Also, I've had commit conflicts before, so I commit early, commit often :)

[03:53] <s1n> wayland: i've almost had to stop reading the ml, there's just too much for me to even try to comprehend

[03:53] <s1n> 10 threads a week is about all i can earnestly digest, it's like 10 a day now

[03:54] <wayland> Well, my recommendation is that DateTime has Dave Rolsky on it now, and I'm just going to trust him to do the right thing :)

[03:54] <wayland> Which eliminates more than half the e-mail that I picked up this morning after the weekend.  

[03:55] <s1n> well, i've had to start just focusing on topics that interest me

[03:55] <wayland> Another problem is that in the middle of the day, there aren't so many people on IRC to answer my questions, so I tend to go for the mailing list

[03:55] <s1n> because there's too much activity to try and comprehend everything

[03:55] <wayland> Hopefully it will cool off soon when the specs are a bit more sorted out

[03:55] <s1n> i'm not complaining, it means good work is being done

[03:55] <s1n> just an observation

[03:55] <alester> in the spectests, what are the .rakduo and .t files?  How do they differ?

[03:56] <s1n> alester: the .t files are the official unmodified files

[03:56] <alester> huh

[03:56] <s1n> the .<impl> files are the fudged files for a specific implementation

[03:56] <wayland> My understanding is that the spectests are for *all* variants of perl6

[03:56] <s1n> alester: ever notice the #?rakudo comments? those are skipped (fudged out) for rakudo

[03:56] <wayland> not just rakudo; the .t files are for real perl6, the others are as s1n says

[03:57] <wayland> (ie. the .t files should work on rakudo, pugs, elf, smop/mildew/whatever)

[03:57] <alester> Eventually the .rakudo files will disappear as their corresponding .t passes.

[03:57] <s1n> wayland: that's what i said, .t are the official unmodified files, .<impl> are the fudged implementation specific files

[03:57] <alester> is what I'm assuming

[03:57] <s1n> alester: that is, let's say there's a bug in rakudo or a missing feature, it'll be fudged out for the time being

[03:57] <alester> right.

[03:58] <alester> and eventually the .rakudo files will fall away

[03:58] <wayland> s1n: I agree -- I just thought a different perspective might shed some additional light :)

[03:58] <s1n> alester: that's correct, a complete implementation will not fudge the spec and will pass all tests

[03:58] <alester> so the harness runs the .rakudo instead of the .t if there is one?

[03:58] <s1n> not if there is one, if it needs to be fudged

[03:59] <alester> also, s1n, why aren't your commits getting folded back to the main?  Your commits in my FQ are huge.

[03:59] <s1n> that is, if during processing it finds that fudging is needed, the .<impl> is creating and ran instead

[03:59] <s1n> alester: that's a good question :) i've been pestering jnthn and pmichaud all week

[04:00] <s1n> i have ranges working very nicely now and only sort of got jnthn's attention earlier, but i had to make some changes and had trouble with git

[04:00] <s1n> had to do a fast-forward because i modified Makefile.in and it was a pain in the but

[04:01] <s1n> that is, you can do the same by doing a git pull --rebase upstream master, then git pull --rebase origin rt_work (if you have my fork cloned)...

[04:02] <s1n> it was a pita managing that fork, i think i might have to hose it and start over if it's going to be that much dang work merging with git

[04:02] <s1n> alester: btw, what's FQ?

[04:02] <alester> Fork queue

[04:02] <s1n> how big are they?

[04:02] <s1n> should be in mostly Range.pir and Range.pm (few other really small patches)

[04:06] <alester> Dunno

[04:07] <alester> Crud, who's in charge of pugscode.org?

[04:08] <wayland> Dunno, but that's the sort of question I put to moritz_

[04:08] <alester> 'cause I don't know my pw on it.

[04:08] <s1n> alester: lemme see if i can help

[04:09] <alester> ok

[04:09] <s1n> alester: wait, which sub-site? pugs repo itself?

[04:09] <alester> y

[04:10] <alester> http://svn.pugscode.org/pugs

[04:10] *** justatheory joined
[04:11] <s1n> alester: i'm trying to remember the login page address...

[04:13] <s1n> alester: http://commitbit.pugscode.org?

[04:13] <alester> yeah, it's not responding

[04:13] <s1n> oops, s/\?/ \?/

[04:14] <s1n> ahh, yeah, looks like it's not, i think i have feather access but i've never used it

[04:15] <s1n> i'm gonna go to bed

[04:16] <s1n> alester: if you want that FQ cleared up, pester jnthn and pmichaud (like how i just name dropped them so their IRC client will pester them)   :)

[04:17] <alester> I don't care particularly.  Just wondering.

[04:17] <s1n> i know, just trying to get their attention :)

[04:18] <s1n> bed&

[04:21] *** DemoPhreak joined
[04:22] *** DemoFreak left
[04:22] *** cspencer joined
[04:41] *** dukeleto joined
[04:53] *** cspencer left
[04:54] *** dukeleto left
[04:55] *** cspencer joined
[04:56] *** Avada joined
[05:09] *** dukeleto joined
[05:40] *** zophy joined
[05:41] *** Avada left
[06:09] *** cspencer_ joined
[06:09] *** cspencer left
[06:12] *** nihiliad left
[06:12] *** dukeleto left
[06:14] *** bacek_ joined
[06:15] *** alexn_org joined
[06:15] <wayland> Hi all :)

[06:39] *** alester left
[06:42] *** alexn_org left
[06:50] *** dukeleto joined
[06:51] *** ashizawa joined
[06:51] *** justatheory left
[06:51] <cspencer_> is anyone familiar with generating patches from git? :)  i'm having no end of troubles in getting my patch pulled together

[07:05] *** agentzh left
[07:05] *** [particle] left
[07:05] *** pjcj left
[07:05] *** AzureStone left
[07:05] *** Porsbo left
[07:05] *** Matt-W left
[07:05] *** clkao left
[07:05] *** integral left
[07:05] <dukeleto> have you tried git format-patch ?

[07:06] *** agentzh joined
[07:06] *** [particle] joined
[07:06] *** pjcj joined
[07:06] *** Porsbo joined
[07:06] *** AzureStone joined
[07:06] *** clkao joined
[07:06] *** integral joined
[07:06] *** Matt-W joined
[07:11] <cspencer_> should that generate the patch without any additional arguments provided?

[07:15] <dukeleto> cspencer: it generates a different patch for each commit by default, but it has a bajillion setting to customize that

[07:17] <cspencer_> hmmmm...it's not producing any output for me, though i've got two modified files and one new one that i added

[07:17] <cspencer_> i must have done something to my local repo

[07:18] <cspencer_> i'll figure it out tomorrow :)

[07:18] *** cspencer_ left
[07:41] <pugs_svn> r25491 | leto++ | Add test for (-1+0i)**(1/2)

[07:53] *** zamolxes left
[07:56] *** dlocaus2 joined
[07:56] *** dlocaus2 left
[08:00] *** meppl joined
[08:07] <pugs_svn> r25492 | leto++ | Various exp(x) tests

[08:08] *** Tene_ joined
[08:09] *** bacek_ left
[08:21] *** Tene left
[08:26] <pugs_svn> r25493 | leto++ | Various sqrt(x) tests

[08:26] *** iblechbot joined
[08:31] <pugs_svn> r25494 | leto++ | Tests for abs(x) with Inf and NaN

[08:32] <moritz_> rakudo: say (1..3).perl

[08:32] <p6eval> rakudo 2a9382: OUTPUT«1..3␤»

[08:33] <moritz_> s1n: re your git pull request - you add class Range to settings with new functionality, but don't remove the old one in PIR, and you don't add it to Makefile.in (I'm looking at 3cfc0f2514f0e60dfdf148050f899a21c834cf27)

[08:33] *** DemoPhreak is now known as DemoFreak

[08:41] <moritz_> rakudo: class A { has $x = 3; method get { say $x }}; A.new.get(); A.new(x => 5).get();

[08:41] <p6eval> rakudo 2a9382: OUTPUT«3␤5␤»

[08:42] <moritz_> rakudo: class A { has $x = 3; method get { say $x }}; A.new.get(); A.new(x => 5).get(); say A.x;

[08:42] <p6eval> rakudo 2a9382: OUTPUT«3␤5␤Could not locate a method 'x' to invoke on class 'A'.␤current instr.: 'die' pc 16659 (src/builtins/control.pir:204)␤»

[08:43] <pugs_svn> r25495 | wayland++ | More S28 updates, including turning things into references to elsewhere, and better 

[08:43] <pugs_svn> r25495 | wayland++ | documenting the standard/default IO handles.  

[08:44] *** ejs joined
[08:44] <moritz_> rakudo: class A { has $x = 3; method get { say $x }}; A.new.get(); A.new(x => 5).get(); say A.x

[08:44] <p6eval> rakudo 2a9382: OUTPUT«3␤5␤Could not locate a method 'x' to invoke on class 'A'.␤current instr.: 'die' pc 16659 (src/builtins/control.pir:204)␤»

[08:44] <moritz_> rakudo: class A { has $x = 3; method get { say $!x }}; A.new.get();

[08:44] <p6eval> rakudo 2a9382: OUTPUT«3␤»

[08:50] <Matt-W> Morning

[08:51] <moritz_> good morning

[08:52] <Matt-W> I have a plan for how to tackle Form.pm

[08:52] <Matt-W> Now I just need the time in which to write some code

[08:52] <pugs_svn> r25496 | wayland++ | Fixed a few things based on advice from chrisdolan++

[08:53] *** ejs1 joined
[08:53] <dukeleto> how would I import the Inf and NaN symbols into src/builtins/any-num.pir ?

[08:53] * araujo wonders what the '!' means in '$!x'

[08:54] *** masak joined
[08:54] <moritz_> araujo: it means "private attribute"

[08:55] <araujo> moritz_, aah ... mmm.. interesting ... I guess the 'has' defines it as such?

[08:55] <masak> araujo: it defines it as an attribute.

[08:55] <masak> an instance attribute, even.

[08:56] <Matt-W> has $!x is a private one, has $.x is public

[08:56] <masak> but the '!' defines it as private.

[08:56] <masak> araujo: what Matt-W said.

[08:56] <araujo> aaah

[08:56] *** krunen joined
[08:56] <araujo> Thanks all :)

[08:57] <Matt-W> well, actually $.x just has auto-generated setter/getter accessor, rather than being exposed as itself...

[08:57] <masak> right.

[08:57] <masak> but it still makes sense to call it a 'public attribute'.

[08:57] <wayland> moritz_: How do I debug feather/script/update-syn ?

[08:58] <Matt-W> yes, but I'm feeling moderately pedantic this morning

[08:58] <moritz_> wayland: with patience :/

[08:58] <wayland> I added a new html-building line and it created the location http://perlcabal.org/syn/S32/ but didn't put any files in it

[08:58] <bacek> good evening

[08:58] <wayland> And I don't have any output or anything :)

[08:58] <wayland> Ah, an evening to be good on :)

[08:58] <moritz_> wayland: do you know which user runs that script  on feather?

[08:59] <wayland> not off the top of my head, but I'd guess agentzh :)

[08:59] <moritz_> do you have root privs?

[08:59] <wayland> Not that I know of :)

[08:59] <wayland> (probably not :) )

[08:59] <moritz_> what's your user name?

[08:59] <wayland> I don't even know whether I can log in

[08:59] <wayland> wayland, I think

[09:00] <wayland> that's my SVN id, anyway

[09:00] <moritz_> there's no /home/wayland on feather

[09:00] <wayland> Ok

[09:00] <moritz_> wayland: contact juerd to give you a new account - instructions are on feather.perl6.nl

[09:01] <wayland> ok, will do

[09:01] <moritz_> wayland: and then I can add you to sudoers.conf so that you can su - agentzh and run the script yourself, and see what it does

[09:01] *** ejs left
[09:01] <wayland> sounds good to me (unless someone else wants to do it for me :) )

[09:02] <agentzh> oh...sorry for putting that script under my home...

[09:03] <moritz_> araujo: no problem, it has to run under some user

[09:03] <pugs_svn> r25497 | leto++ | Tests for sign(x) with Inf and NaN

[09:03] <moritz_> erm, I meant agentzh 

[09:03] *** abra joined
[09:03] * agentzh goes back to $work.

[09:13] * wayland lambdabot @tell TimToady What would you think of the idea of moving all the special variable stuff from S02 to S28?

[09:14] <wayland> Whoops, confused /me with /msg

[09:14] * wayland is embarrased :)

[09:14] <moritz_> m<tab> is a bad idea in here anyway

[09:16] <wayland> My client refuses to tab unless there's a unique hit

[09:16] <Matt-W> mine cycles through

[09:17] <Matt-W> but doesn't indicate it's a non-unique result

[09:17] <Matt-W> you have to figure that out for yourself

[09:17] <wayland> Ouch :)

[09:17] <Matt-W> so I've done that wrong a few times

[09:17] <moritz_> wayland: that's actually a good idea for such crowded channels as here

[09:17] <wayland> Actually, correction, mine does a drop-down list

[09:17] <Matt-W> at least when I do m<tab> it puts me as the final alternative so I don't start talking to myself :)

[09:18] <wayland> It was Xchat, from my last computer, that didn't complete unless unique

[09:18] <wayland> Well, someone (Dumbledore?  Gandalf?) said that they often talked to themselves, and that it came from their old habit of always addressing the wisest person present :)

[09:19] <moritz_> that sounds more like Gandalf, not Dumbledore

[09:20] <wayland> It does, but now that I think about it, I have a feeling it wasn't Gandalf

[09:20] <wayland> Maybe some other book

[09:20] <moritz_> but I think I also dimly remeber a quote like this

[09:20] <moritz_> but I've read lots of fantasy, and sometimes mix up the different books :/

[09:21] <Matt-W> don't think that was Dumbledore

[09:21] <wayland> Hmm.  Google may be about to help me :)

[09:21] <Matt-W> although he did have a few moments of complete immodesty

[09:22] <Matt-W> I do seem to recall that he once told Harry he was rather cleverer than most people and therefore did indeed understand a great deal

[09:23] <wayland> Someone in a forum attributes this to Gandalf: "A habit of the old: they choose the wisest person present to speak to"

[09:23] <wayland> Matt-W: I suspect most people on this channel are rather cleverer than most people :)

[09:24] <pugs_svn> r25498 | leto++ | Various tests for Trig functions relating to Inf and NaN

[09:24] <Matt-W> wayland: It seems to be the case

[09:24] <Matt-W> wayland: certainly several people in this channel are rather cleverer than me...

[09:24] <wayland> And cleverer than me, and I'm above average

[09:25] <wayland> So the quuestion is, is Dumbledore being inherently immodest, or does the truth compel him in this case?  

[09:25] <wayland> A book on Google Books cites the Gandalf quote as being "2:127", so it must be LOTR

[09:27] <Matt-W> It would be a fairly Gandalfy sort of thing to say

[09:27] <Matt-W> A bit like a wizard never being late

[09:28] <moritz_> Matt-W: I think that only appears in the movie

[09:29] <wayland> I disagree with a lot of things in the movie, but that one always sounded very Gandalfy to me :)

[09:29] <Matt-W> moritz_: ah k. It's a good line, anyway

[09:31] <wayland> moritz_: Is there anything special that needs to be done to rename files in SVN?

[09:31] <moritz_> wayland: svn mv from to

[09:31] <wayland> Or do we just move the file, then svn delete/svn add?

[09:31] <wayland> Oh, ok, thanks :)

[09:33] <pugs_svn> r25499 | wayland++ | Moved String.pod to Str.pod

[09:55] <szabgab> anyone knows why I cannot fetch the git repository of rakudo ?  after some cloning I get:

[09:55] <szabgab> error: Unable to find ab75eb126432d1b91188073d637782b15f1a6f9e under http://github.com/rakudo/rakudo.git

[09:59] <moritz_> szabgab: don't use the http:// protocol

[09:59] <moritz_> szabgab: use git:// instead

[10:00] <szabgab> git clone git://github.com/rakudo/rakudo.git   

[10:02] *** elmex left
[10:04] *** DemoFreak left
[10:05] *** DemoFreak joined
[10:05] <szabgab> moritz_, that worked, thanks

[10:05] *** elmex joined
[10:07] *** pmurias joined
[10:07] *** mikehh left
[10:08] <masak> I look forward to the day when I can just update all my downloaded Perl 6 projects through proto.

[10:09] <masak> not too far away, I think.

[10:19] <szabgab> I just notice there is a perl6 executable!

[10:20] <szabgab> can I now remove my small shell script and use this?

[10:20] <masak> szabgab: sorry, what do you mean?

[10:21] <szabgab> rakudo/perl6   

[10:21] <wayland> szabgab: Yes, that's right :)

[10:21] <wayland> If it's in your path

[10:21] <szabgab> I used to have a stupid shell script called perl6

[10:21] * masak doesn't prefer the perl6 executable for various reasons

[10:21] <szabgab> running parrot perl6.pbc

[10:21] <wayland> It's been there for quite a while

[10:22] <masak> since Christmas 2007, I believe.

[10:22] <szabgab> wow, I have not noticed it earlier when I built rakudo

[10:22] <masak> szabgab: you have to build Rakudo in a certain way.

[10:23] <szabgab> so why were people helping me fix the shell script instead of telling me to use the executable ?

[10:23] <szabgab> ah, that explains, and now the default became that certain way ?

[10:23] <masak> szabgab: because everyone does not like the executable.

[10:23] <masak> szabgab: that's why you shouldn't distribute Perl 6 projects that assume the executable is there.

[10:23] <masak> szabgab: I don't know about the default changing. it's possible, though.

[10:23] <moritz_> we should make the fake executable the default target

[10:24] <masak> why, oh why?

[10:24] <masak> :/

[10:24] <szabgab> hmm, on one machine I got the executable, on the other one I did not

[10:24] <szabgab> what did I do differently ?

[10:24] <moritz_> 'make' builds it, 'make spectest' doesn't

[10:25] <szabgab> I use 'make' on both machines 

[10:26] <szabgab> the only difference I can see now is that on the one I did not get the thing I ran make languages  before that

[10:26] <moritz_> does 'make languages' even affect rakudo?

[10:27] <szabgab> wait, the build crashed for me

[10:28] <masak> moritz_: why should we target the fakecutable?

[10:29] <szabgab> that's what I get if I don't check exit codes...

[10:30] *** wayland left
[10:31] <moritz_> masak: because we then have a uniform, platform independent way to invoke rakudo

[10:32] <masak> ...which crashes all the time.

[10:32] <moritz_> it doesn't crash here.

[10:32] <masak> sorry if I'm not overjoyed about the prospect of providing a crappy user experience to my users.

[10:32] <masak> I prefer as few crashes as possible.

[10:32] <masak> moritz_: it crashes on Mac OS X.

[10:33] <moritz_> masak: I think the best user experience would be to fix the crashes, and then use the fake exe

[10:33] <masak> moritz_: ACK

[10:33] <masak> but until that happens...

[10:34] *** pmurias left
[10:34] <moritz_> how do I resolve a merge conflict in git?

[10:34] <moritz_> it says "Automatic merge failed; fix conflicts and then commit the result."

[10:34] <moritz_> so I resolved the conflict

[10:35] <moritz_> and tried a svn-commit

[10:35] <moritz_> and it says "fatal: cannot do a partial commit during a merge."

[10:35] <moritz_> s/svn/git/

[10:35] <moritz_> ah, I need to git-commit -a

[10:37] <szabgab> ok, so now on both of my machines I have the perl6 executable, strange I have not seen it built earlier

[10:37] <szabgab> I think it is good to have even if crashes now and then, someone will come along and fix it

[10:40] <jnthn> hi all

[10:40] *** Eevee left
[10:41] <moritz_> hi jnthn ;-)

[10:43] *** mberends joined
[10:44] <masak> hi jnthn, mberends.

[10:45] <moritz_> anyway, I'm keeping the fakexecutable branch on github up to date

[10:46] <moritz_> and when it passes on all platforms, we can merge it into master

[10:46] <mberends> hi, masak! proto bash->perl5 is going a little slowly, because off distractions, but it is taking shape.

[10:46] <mberends> *of

[10:47] <masak> mberends: cool. if you push an intermediate step, make sure you push to a branch, not to master.

[10:47] <mberends> right.

[10:57] <Matt-W> oh hai jnthn

[11:01] <moritz_> perl6: 2**30

[11:01] <p6eval> elf 25499: RESULT«1073741824␤»

[11:01] <p6eval> ..rakudo 2a9382: RESULT«1073741824»

[11:01] <p6eval> ..pugs: RESULT«1073741824/1»

[11:02] <moritz_> elf: print 1;

[11:02] <p6eval> elf 25499: OUTPUT«1»

[11:02] <moritz_> elf: print 1.perl

[11:02] <p6eval> elf 25499: OUTPUT«1»

[11:02] <moritz_> where does the \n come from in elf's output

[11:02] <moritz_> not from print, and not from .perl

[11:02] <bacek> perl6: sub bar { 1;;}; say bar

[11:02] <p6eval> rakudo 2a9382: OUTPUT«Null PMC access in isa()␤current instr.: 'parrot;List;!flatten' pc 5830 (src/classes/List.pir:253)␤»

[11:02] <p6eval> ..elf 25499, pugs: OUTPUT«1␤»

[11:03] <bacek> moritz_: this is much interesting :)

[11:20] *** bacek left
[11:20] <masak> so, first independent Rakudo release tomorrow?

[11:20] *** bacek joined
[11:58] <moritz_> TimToady++ "time_t must die.  This is non-negotiable.

[11:58] <moritz_> 2

[11:58] <moritz_> erm

[11:58] <moritz_> "

[11:59] <moritz_> is what I meant ;-)

[11:59] <Matt-W> woo

[11:59] * Matt-W can get behind that assertion

[12:10] <masak> assert(:woo)

[12:11] *** mib_amxadj joined
[12:11] <mib_amxadj> Hi everybody,

[12:11] <moritz_> hi

[12:12] <masak> mib_amxadj: hi. welcome.

[12:12] <moritz_> another m\w+ ;-)

[12:12] <mib_amxadj> Is there any official Perl6 grammar specification, mebbe an ANTLR or YACC grammar?

[12:12] <masak> mib_amxadj: there's STD.

[12:12] <moritz_> it's written in Perl 6 rules

[12:13] <masak> but quite approachable, if you ask me.

[12:13] <moritz_> http://svn.pugscode.org/pugs/src/perl6/STD.pm

[12:16] <mib_amxadj> moritz_: Is the Perl6 grammer final?

[12:16] <masak> mib_amxadj: it's still changing now and then, if that's what you're asking.

[12:16] <moritz_> mib_amxadj: nothing in Perl 6 is final

[12:17] <masak> ...and that's a good thing.

[12:17] <mib_amxadj> Well ok.

[12:17] <masak> if it's to be by the community, then it'll have to change until it and the community converge.

[12:17] <moritz_> but it's pretty stable in what it accepts

[12:17] <masak> and it's runnable.

[12:18] <masak> std: say "OH HAI"

[12:18] <p6eval> std 25499: OUTPUT«ok 00:05 37m␤»

[12:18] *** Maghnus- joined
[12:19] <masak> another M\w+ :)

[12:27] <jnthn> masak: Yeah, it's getting quite a pain to tab-complete your handle now. :-P

[12:27] <moritz_> we finally need mind reading software

[12:28] <moritz_> (or type a bit more on our own ;-)

[12:28] <masak> jnthn: I think it's a conspiracy, which the other M people forgot to tell me about.

[12:30] *** bacek left
[12:30] * jnthn so does *not* want mind reading software attached to an IRC client...

[12:32] <masak> historically, DWIM was a bad term.

[12:32] <masak> the Perl community uses it in a good sense.

[12:32] <masak> but I think that it's bad in many cases, and that Perl 6 even retreats in some cases where Perl 5 DWIM-med.

[12:34] <mib_amxadj> masak: Do you think, say in a year, Perl 6 will be finalised?

[12:34] *** alc left
[12:34] <masak> mib_amxadj: that's the million dollar question.

[12:35] <moritz_> I'm quite sure it won't

[12:35] <moritz_> there's just too much to do

[12:35] <masak> mib_amxadj: what I think you should ask yourself is this: what's the difference if it's "finished" or not?

[12:35] <masak> I mean, it's usable today.

[12:35] <moritz_> all this concurrency and unicode level stuff will turn out to be rather quickly

[12:35] *** ashizawa left
[12:36] <mib_amxadj> masak: I am developing Perl plugin for Netbeans, Thought if Perl 6 grammer is finalised, I could add support for Perl 6 too

[12:36] *** Maghnus left
[12:36] *** Maghnus- is now known as Maghnus

[12:37] <jnthn> Aye, I think while the core language is now pretty solid/stable, and we're getting increasingly close to a good and stable implementation of it, there's plenty of other topics like concurrency and IO etc that are currently underspec'd (though IO looks more encouraging of late...)

[12:38] *** wayland joined
[12:40] *** bacek joined
[12:40] <masak> the question is where in the process we'll call it 6.0.0.

[12:40] <masak> like it or not, 6.0.0 is important to people, especially to outsiders.

[12:41] <moritz_> I think we should avoid the parrot-1.0 mistake

[12:41] <jnthn> moritz_: Which part of it? ;-)

[12:41] <moritz_> where people just call it 1.0 because they expect other people to like it better when it's 1.0, even if it doesn't contain the things we want in it

[12:42] <masak> I think that's only partly a mistake.

[12:42] <moritz_> and to throw away things like deprecation cycles just to make it in time

[12:42] <jnthn> I think Parrot is not going to get a decent mass of people writing compilers for it until it calls itself 1.0.

[12:42] <jnthn> And it's not going to be so applicable to end users until it has working, complete compilers...

[12:43] <wayland> moritz_: your concurrency/unicode comment didn't grok for me -- did you leave a word out?

[12:43] <masak> there's a tendency in FOSS software to have low (<1.0) version numbers. that sometimes scares people away, I think.

[12:43] <moritz_> well, let's say we ship a very good, usable nearly-perl6 rakudo, but with Unicode support still only very basic - I don't want to be the one who tells the people out there "we call it 6.0, but it's still not the final stuff"

[12:44] <jnthn> Aye, for Perl 6 I think it's kinda different.

[12:44] <jnthn> The target audience for a 6.0.0 is rather large.

[12:44] <masak> moritz_: for some feature X that'll always be the case.

[12:44] <jnthn> For Parrot 1.0, it's much smaller.

[12:44] <jnthn> (e.g. compiler writers)

[12:44] <moritz_> wayland: s/quickly/dirty/

[12:44] <moritz_> wayland: then it somehow makes sense ;-)

[12:44] <wayland> Yup :)

[12:45] <wayland> I was looking at undefined specs earlier today

[12:45] <wayland> They both scare me

[12:45] <wayland> :)

[12:45] <wayland> My best bet, I think, would be to find people who know something, and ask them for help :)

[12:45] *** alexn_org joined
[12:46] <masak> wayland: something like that.

[12:47] <moritz_> I think for Unicode Larry has a mental piccture in his head of how it should work

[12:47] <moritz_> I've got the book "Unicode explained" for christmas, it cleared up some things for me

[12:47] <moritz_> (but mostly it was too verbose, and too little technical)

[12:49] <wayland> I guess we need to get some kind of brain dump from him then :)

[12:49] <s1n> moritz_: lemme send you a new pull request

[12:49] <moritz_> s1n: or just tell me which other commits to cherry-pick

[12:49] <s1n> moritz_: basically, i've been having trouble with git

[12:49] <wayland> I have a vague impression of UTF-8, a skim through some of the fonts in OOo's character map, and that's about it :)

[12:49] <s1n> moritz_: okay, shall i send you a pull request?

[12:49] *** mib_amxadj left
[12:50] <moritz_> s1n: I don't think that's going to help me

[12:50] <moritz_> s1n: just tell me the SHA1s of the commits that make what you want

[12:52] <s1n> ef8bb8a9bbc102a2aa96af93b81ee513eb8f4158 - that one fixes Range.pir and Range.pm (but Range.pm is not new at that point)

[12:53] <s1n> moritz_: 3cfc0f2514f0e60dfdf148050f899a21c834cf27 adds Range.pm

[12:53] <s1n> moritz_: 9aaa705962b1f5183b5e35d14acd69184665ff55 fixes the Makefile

[12:54] <s1n> moritz_: you'll probably want to play those back in the reverse of what i said :)

[12:54] <s1n> moritz_: that is, update Makefile.in, add Range.pm, update Range.pm and Range.pir

[12:56] <moritz_> meh, I get some conflicts on picking ef8bb8a9bbc102a2aa96af93b81ee513eb8f4158

[12:58] <s1n> hmm, well branch/fork management with git is difficult...

[12:58] *** icwiener joined
[12:58] <s1n> gotta go to work, lemme know if you have any questions about it

[12:58] <moritz_> I'm trying that out now

[12:59] <moritz_> actually it's not hard ;-)

[13:02] <masak> indeed not.

[13:02] <masak> just different.

[13:03] <wayland> bed.  Night all.  

[13:07] <moritz_> how do I move the last three commmits off to branch?

[13:08] <krunen> 'What? In riddles?' said Gandalf. 'No! For I was talking aloud to myself. A habit of the old: they choose the wisest person present to speak to; the long explanations needed by the young are wearying.' He laughed, but the sound now seemed warm and kindly as a gleam of sunshine.

[13:08] *** mikehh joined
[13:08] <masak> moritz_: http://stackoverflow.com/questions/364925/is-it-possible-to-retroactively-turn-a-set-of-commits-into-a-branch

[13:09] <moritz_> I found a better methods

[13:09] <masak> ok, good.

[13:09] <moritz_> git-checkout -b new_branch

[13:09] <moritz_> git-checkout old_branch

[13:09] <moritz_> git-reset --hard HEAD~3

[13:09] <masak> that works.

[13:09] <masak> git++

[13:10] <moritz_> that works in my case (but not in that question) because the commits are linear

[13:10] <masak> aye.

[13:12] <moritz_> s1n: I've applied your changes to the public branch range_to_settings - I must have screwed up something because 'make spectest' isn't clean, it says "Method 'ACCEPTS' not found for invocant of class 'Range'"

[13:19] *** skids left
[13:23] <jnthn> moritz_: You did re-configure?

[13:25] <moritz_> jnthn: don't think so, trying now...

[13:27] <moritz_> it could actually work if I wrote valid Perl 6 code ;-)

[13:29] <masak> harder than it seems.

[13:30] <jnthn> Yeah, we so shoulda stuck with doing it all in PIR.

[13:30] <jnthn> ;-)

[13:31] <moritz_> what I'm doing is only hard when I'm not concentrated ;-)

[13:35] *** aindilis joined
[13:40] *** aindilis` joined
[13:41] <moritz_> s1n: your code simply doesn't work. $topic isn't guarantueed to have .from and .to methods (it's self that has these methods), and for string ranges you can't use < or <= for comparison

[13:42] <moritz_> s1n: I'm trying it now with cmp instead

[13:43] <masak> that 'self.method vs .method' error is one I often make myself.

[13:43] <masak> it seems my brain wants two mutually exclusive things with the .method syntax.

[13:46] <Matt-W> I started off under the assumption that the default topic in a method is always self

[13:47] <Matt-W> But it seems that isn't the case

[13:47] <masak> no.

[13:47] <Matt-W> so I've been writing self.this and self.that

[13:47] <masak> aye.

[13:48] <masak> what you can do is rename the invocant in the params list.

[13:48] <Matt-W> you can say method foo($_:)

[13:48] <Matt-W> I'm not sure why you'd want anything else when self is always available

[13:48] <Matt-W> but maybe I just haven't imagined a weird enough situation yet

[13:51] <masak> Matt-W: well, renaming the invocant to $_ is the way to be able to say .method, so there's your situation.

[13:51] <masak> the question still is whether it's worth it for readability, though.

[13:53] <Matt-W> mmm

[13:53] <Matt-W> I see it for $_

[13:53] <Matt-W> but calling it $this or whatever, when there's always a self keyword...

[13:53] <Matt-W> seems a bit pointless

[13:54] <masak> Matt-W: well... don't do that, then.

[13:54] <masak> Perl 6 just gives you a lot of rope.

[13:54] <Matt-W> I wasn't planning to do it

[13:54] <Matt-W> :)

[13:56] *** aindilis left
[13:56] <masak> sometimes it helps to give variables informative names. maybe one could rename the invocant into $file or $target or whatever to increase readability in some cases.

[13:57] <masak> but that's all a question for a growing Perl 6 community to collectively figure out.

[14:24] <aindilis`> jrockway, ping

[14:28] <Matt-W> Indeed, and us, as members of that community, as we write things... things like Form.pm

[14:28] <masak> :)

[14:30] * jnthn wonders if anyone fancies taking on From.pm

[14:30] * Matt-W already started

[14:31] <PerlJam> Matt-W: What are you using as a spec?

[14:31] <Matt-W> E07 and Perl6::Form

[14:31] <Matt-W> I'm not currently aware of any other sources

[14:32] <PerlJam> well, you could see about tapping Damian's brain too  :)

[14:33] <Matt-W> yes I probably will

[14:33] <Matt-W> to have produced Perl6::Form he must've thought about it a lot :)

[14:34] <PerlJam> indeed.  Perl6::Form is quite cool.

[14:37] <Matt-W> I've found the code quite hard to get my head around

[14:37] <Matt-W> But some of the hardest bits I think will be done differently in Perl 6 anyway

[14:37] <PerlJam> Matt-W: I think everyone has that same experience when reading Damian's code.

[14:37] <Matt-W> he could do with a few comments here and there

[14:37] <Matt-W> so that the comment count is >0

[14:38] <masak> Matt-W: comment it and send him a patch. :)

[14:38] <Matt-W> well I have been commenting my copy

[14:38] *** skids joined
[14:38] <Matt-W> but I'll be embarking on the Perl 6 implementation soon, which will work differently in some areas

[14:38] <Matt-W> not necessarily just because it's in Perl 6, but also because I'm writing it

[14:41] <PerlJam> Hardly anyone writes idiomatic Perl 6 yet, so the more people writing it, the better we get at idioms.  :)

[14:41] <Matt-W> :)

[14:41] <Matt-W> Well we'll see how mine looks when I push some code into the git branch

[14:42] <Matt-W> hopefully later this week I'll have time to write something useful

[14:42] <Matt-W> only out three nights...

[14:45] <masak> PerlJam: how does one know whether one writes idiomatic Perl 6? :) I've been writing Perl 6 code almost every day for over half a year now, so I think I'm eligible.

[14:45] <PerlJam> masak: you are.

[14:45] <masak> yay \o/

[14:46] <masak> I've always wanted to write idiomatic Perl 6 code. :)

[14:46] <PerlJam> :-)

[14:49] <moritz_> masak: if you think "I'm repeating myself" or "this looks ugly" then you're not writing idiomatic Perl 6 code ;-)

[14:49] <masak> that still happens to me sometimes, though.

[14:49] <PerlJam> it happens to everybody.

[14:49] <masak> of course, when it happens, I try to refactor. :P

[14:49] <PerlJam> exactly!

[14:49] <moritz_> that's where the test suite kicks in

[14:50] <moritz_> welcome to XP

[14:51] <masak> I guess.

[14:51] <masak> or TDD, more precisely.

[14:51] *** Maghnus left
[14:51] <moritz_> yes

[14:51] *** cspencer joined
[14:51] *** cspencer left
[14:54] *** cspencer joined
[14:54] <masak> cspencer: hi... twice. :)

[14:54] <cspencer> masak: hey...once! :)

[14:57] *** Maghnus joined
[15:08] <masak> is there any equivalent of $/.from in Perl 5?

[15:08] * masak increasingly finds himeself forgetting such things

[15:09] <moritz_> masak: pos($str)

[15:09] <masak> moritz_: thank you.

[15:09] <masak> eew, that's gross. :P

[15:09] <Matt-W> can you say $str.pos instead?

[15:09] <PerlJam> Matt-W: not in perl 5

[15:09] <moritz_> no

[15:10] <masak> Matt-W: not in Perl 5.

[15:10] <Matt-W> oh sorry

[15:10] <Matt-W> wrong way round

[15:10] <Matt-W> visual studio is rotting my brain this afternoon

[15:11] <cspencer> is anybody here semi-proficient with git?

[15:11] <cspencer> i'm still in the early stages of figuring it out and i'm particularly baffled at the moment

[15:11] <PerlJam> cspencer: what's up?

[15:12] <moritz_> I can answer simple questions, and for harder I can point to #git

[15:12] <cspencer> well, i'd like to generate a patch against rakudo HEAD that invovles changes to two files and the addition of a new file

[15:12] <cspencer> though every time i do a "git diff", it fails to include the newly added file in the patch

[15:13] <moritz_> cspencer: make a 'git-add $file; git-commit -a; git-format-patch HEAD^'

[15:14] <cspencer> thank you!

[15:15] <cspencer> i was missing the "HEAD^" on the end of "git format-patch"

[15:17] * PerlJam realizes that he hasn't really looked at rakudo since the repo move.

[15:19] <cspencer> hmmm...i imagine it's bad form to submit a patch that end up breaking some of the tests :)

[15:19] *** hercynium joined
[15:21] <moritz_> it is indeed

[15:22] <cspencer> heh, i'll rework it then until it doesn't

[15:23] <cspencer> i'd rewritten some of the methods in src/builtins/any-list.pir into a perl 6 Any.pm class, and it seems some of the cases weren't quite handled

[15:23] *** eternaleye joined
[15:30] <moritz_> cspencer: you have to take care with methods that are "exported" as subs

[15:32] <Matt-W> yes please don't submit patches that pass fewer tests than the pre-patch code :)

[15:32] <Matt-W> it's okay if it passes more though

[15:32] <Matt-W> I think everyone likes that

[15:34] <cspencer> hah, yes, that's understandable :)

[15:35] * moritz_ thinks of re-writing Str.split(Regex) in Perl 6

[15:35] <Matt-W> ooh yes

[15:35] <Matt-W> I'd like to see the code for that :)

[15:36] * moritz_ too. If somebody showed me, I wouldn't have to write it myself ;-)

[15:38] <Matt-W> lol

[15:39] <Matt-W> hey I'm writing Form.pm

[15:39] <Matt-W> you can manage split

[15:39] <Matt-W> :P

[15:39] <moritz_> ;-)

[15:40] <PerlJam> just implement it in terms of comb  :-)

[15:40] <jnthn> Matt-W: Are you writing it such that Rakudo can run it and testing it with that along the way?

[15:40] <Matt-W> jnthn: yes

[15:40] <jnthn> Matt-W: Awesome.

[15:40] <Matt-W> I know no other way to ensure I'm barking in the correct forest when it comes to syntax :)

[15:40] <Matt-W> I'm also going to try and give it a test suite

[15:41] <jnthn> That would be great.

[15:41] <Matt-W> Well it'll help me

[15:41] <Matt-W> there will doubtless be numerous helper functions that all need to be working correctly

[15:41] <jnthn> Is it something we'd expect to test it in the spectests?

[15:42] <Matt-W> I don't know

[15:42] <Matt-W> If it's considered part of the spec, then yes

[15:42] <Matt-W> but I doubt it

[15:42] * jnthn ain't sure

[15:42] <Matt-W> well it's not part of the language, it's a core module

[15:43] <Matt-W> I'm not going to worry about it though

[15:43] <Matt-W> Once it actually works, we can discuss where it's going to live and where it should be tested

[15:44] <Matt-W> assuming, that is, that I can get it to such a point :)

[15:44] *** cspencer left
[15:46] <PerlJam> What's a "core module"?

[15:47] <moritz_> a p5ism

[15:47] <jnthn> "is also does" is terrible English... :-)

[15:48] <moritz_> I know :/

[15:49] *** mikehh left
[15:53] *** mikehh joined
[15:54] <PerlJam> good reason for using multi instead of is also too.

[15:54] <PerlJam> multi class IO::File does BarkRole { ... }

[15:55] <Matt-W> you can have multi classes???

[15:55] <moritz_> no

[15:55] <PerlJam> Matt-W: not yet.

[15:55] <moritz_> but changing the composition of the class later on is just... evil

[15:56] <Matt-W> mmmm

[15:56] <Matt-W> well some people would say reopening a class is evil too

[15:56] <moritz_> what do you need that for anyway?

[15:56] <Matt-W> I think it should be reserved for special occasions :)

[15:56] <Matt-W> home &

[15:56] <PerlJam> moritz_: easy things easy, hard things possible.  :)

[15:56] <moritz_> "evil things possible"

[15:56] <PerlJam> moritz_: what do you need goto for anyway?  :)

[15:58] <PerlJam> Perl allows for behaviors that can be used for evil because sometimes evil is good.

[15:58] <PerlJam> :-)

[15:59] *** eternaleye left
[16:00] *** alanhaggai_ joined
[16:01] *** alanhaggai_ is now known as alanhaggai

[16:03] *** Eevee joined
[16:03] *** szabgab left
[16:14] *** nihiliad joined
[16:16] <dukeleto> mornin'

[16:16] *** zophy left
[16:18] *** zophy joined
[16:24] *** justatheory joined
[16:42] *** Ariens_Hyperion joined
[16:43] *** DemoFreak left
[16:50] *** zamolxes joined
[16:51] *** dukeleto left
[16:54] *** cas joined
[16:56] *** cas left
[16:57] *** cas joined
[17:01] *** zophy left
[17:01] *** zophy joined
[17:03] *** justatheory left
[17:06] *** fridim_ joined
[17:08] *** ejs1 left
[17:11] *** iblechbot left
[17:11] *** justatheory joined
[17:16] <masak> TSa's explanations, while seemingly very well-written, almost always make me confused.

[17:18] *** ejs joined
[17:23] *** alester joined
[17:26] *** DemoFreak joined
[17:28] *** masak left
[17:28] *** estrabd joined
[17:34] *** PZt joined
[17:37] *** M_o_C joined
[17:49] <pugs_svn> r25500 | autarch++ | Some fixes to make this valid Perl 6 (returns is out, our RETTYPE is in)

[17:49] <pugs_svn> r25500 | autarch++ | 

[17:49] <pugs_svn> r25500 | autarch++ | Also some other formatting fixlets

[17:55] *** alanhaggai left
[17:57] *** schmalbe joined
[18:00] * Matt-W scowls at rakudo saying 'syntax error'

[18:00] *** abra left
[18:10] <Matt-W> can rakudo do the { make Thing.new } inside a rule?

[18:16] <jnthn> Matt-W: I don't think so.

[18:16] <Matt-W> damn

[18:16] <Matt-W> I was hoping I'd just done something wrong

[18:16] <jnthn> I don't think we have embedded (Perl 6) closures inside rules yet...

[18:16] <Matt-W> going to have to do it the other way then :(

[18:17] <jnthn> Note that you can associate a grammar with a class supplying actions.

[18:17] <Matt-W> ooh

[18:17] <Matt-W> how

[18:18] <Matt-W> would that give me a similar effect?

[18:18] <jnthn> You can write {*} in a rule and then call a Perl 6 action in a class where method names match rule names...

[18:18] *** rcharles joined
[18:18] <Matt-W> that sounds like it'd do

[18:18] <Matt-W> does it get the match object?

[18:20] <jnthn> Yeah

[18:20] <Matt-W> yay

[18:20] <Matt-W> jnthn++

[18:20] <jnthn> I think you do it by passing a :actions($instnace_of_the_class) to TheGrammar.new

[18:20] *** Psyche^ joined
[18:21] <jnthn> In fact, a patch was submitted for adding "make" recently and I'm pretty sure pmichaud reviewed it, I just can't remember if it was applied or not.

[18:21] <Matt-W> hmm

[18:21] <Matt-W> maybe I need to update

[18:21] *** rcharles_ joined
[18:21] <jnthn> This was maybe last week, or the week before...

[18:21] * jnthn is a tad hazy :-)

[18:21] <Matt-W> heh

[18:21] *** rcharles left
[18:22] *** rcharles_ left
[18:23] *** rcharles_ joined
[18:24] * jnthn -> dinner

[18:24] <rcharles_> hello

[18:26] *** Ariens_Hyperion left
[18:27] *** frioux joined
[18:32] *** Patterner left
[18:32] *** Psyche^ is now known as Patterner

[18:39] *** icwiener_ joined
[18:45] *** icwiener_ left
[18:48] *** zamolxes left
[18:48] *** japhb left
[18:53] *** Ariens_Hyperion joined
[18:53] *** icwiener left
[18:53] *** rcharles_ left
[18:56] *** Tene joined
[19:07] *** Tene_ left
[19:08] *** alexn_org left
[19:10] *** Ariens_Hyperion left
[19:11] *** zophy left
[19:11] *** neodemi joined
[19:17] *** zophy joined
[19:20] *** iblechbot joined
[19:20] *** IllvilJa left
[19:22] *** hanekomu joined
[19:25] *** Ariens_Hyperion joined
[19:31] *** rhr left
[19:33] *** rhr joined
[19:39] *** mberends left
[19:41] *** IllvilJa joined
[19:44] *** zophy left
[19:51] *** hanekomu left
[19:52] <bacek> good morning

[19:54] <bacek> perl6: my ($a,$b,$c)=1..3; $a += $b += $c; say ($a,$b,$c);

[19:55] <p6eval> rakudo 2a9382: OUTPUT«623␤»

[19:55] <p6eval> ..pugs: OUTPUT«653␤»

[19:55] <p6eval> ..elf 25500: OUTPUT«Unknown rule: infix_postfix_meta_operator:=␤It needs to be added to ast_handlers.␤ at ./elf_h line 2042␤»

[19:55] *** fridim_ left
[20:00] *** pmurias joined
[20:01] <pmurias> @tell ruoso shouldn't the metaclass be responsible for protoobject creation instead of it being always a p6opaque?

[20:01] <lambdabot> Consider it noted.

[20:09] <bacek> @tell jnthn proto infix:<:=>  should be "is assoc('right')" 

[20:09] <lambdabot> Consider it noted.

[20:19] <bacek> What the current policy for commiting in spec?

[20:19] <diakopter> shoot first, ask questions later?

[20:19] <bacek> diakopter: good answer :)

[20:20] *** zophy joined
[20:21] *** zophy left
[20:21] <pugs_svn> r25501 | bacek++ | [spec] Fix typo in map example.

[20:21] *** zophy joined
[20:22] *** zophy left
[20:23] *** zophy joined
[20:34] *** zophy left
[20:53] *** meppl left
[21:02] <alester> does anyone here have admin on pugscode.org?  I need credentials, or rather, my password reset.

[21:02] <diakopter> alester: sure; privmsg

[21:03] <alester> ?

[21:03] * PerlJam is mildly shocked that alester does *not* have admin on pugscode.org (since that's just feather.perl.nl)

[21:04] *** neodemi left
[21:04] <PerlJam> (but, of course, it helps if you know your password ;)

[21:05] *** M_o_C left
[21:06] <pugs_svn> r25502 | andy++ | fixing some quotes, and testing my commit powers

[21:13] <alester> Now I can go muck with tests. Whoo.

[21:30] *** iblechbot left
[21:35] *** fridim_ joined
[21:42] *** zamolxes joined
[21:52] *** bacek left
[21:58] <wayland> Question -- The stuff in Numeric.pod that I copied from S29 indicates that srand and atan2 are exported by default, but no other functions are.  Anyone know why?

[22:07] *** icwiener joined
[22:09] *** meppl joined
[22:18] *** hercynium left
[22:28] *** oskie left
[22:35] <mikehh> Question -- I have been trying to figure out how the .rakudo ext tests are generated when running make spectest

[22:36] <mikehh> I am probably missing something obvious but cannot see how at the moment

[22:42] <jnthn> mikehh: fudgeall is run at the start of make spectest, and it generates them.

[22:42] <lambdabot> jnthn: You have 1 new message. '/msg lambdabot @messages' to read it.

[22:44] <wayland> jnthn: Are you able to point me at something that explains parametric types and/or roles?  

[22:45] <wayland> I grepped the specs for "parametric", and the only thing I found that I was able to make sense of was the part about my Hash [of => Array [of => Hash]] %whatever

[22:46] <jnthn> Which is out of date anyway. fail.

[22:46] <jnthn> wayland: I did blog about them not so long ago.

[22:47] <wayland> :).  On the Rakudo site?

[22:47] <jnthn> wayland: http://use.perl.org/~JonathanWorthington/journal/38308

[22:47] <jnthn> it's on rakudo.org too

[22:47] <jnthn> See also the applicable test files in t/spec/S12-role/.

[22:47] <mikehh> so basically fudgall looks for rakudo: comments and generates the .rakudo test file if it finds them?

[22:48] <jnthn> mikehh: Pretty much, yes, though rakudo is a parameter to it - it'll take any implementation name in there.

[22:49] <jnthn> wayland: And if you have any more questions, feel free to ask. :-)

[22:49] <mikehh> I gathered that from the humpty stuff in the README which I finally tracked down

[22:49] <jnthn> :-)

[22:49] *** Whiteknight joined
[22:53] <Ariens_Hyperion> hi has anyone tested how long does parrot + perl take to startup?

[22:54] <mikehh> What confused me a bit is I have clean copies of parrot , pugs and rakudo aand copied a new setup of parrot and copied the rakudo and pugs/t/spec in and couldn.t see the files after make perl6

[22:55] <wayland> jnthn: My plan is, if I get some time to dedicate to it, to write S14 :)

[22:55] <mikehh> but they appeared after make spectest - all with the same timestamp

[22:55] *** schmalbe left
[22:56] <jnthn> wayland: Heh, I've had the same plan for weeks. ;-)

[22:56] <jnthn> wayland: Help very welcome, anyway.

[22:57] <jnthn> Many hands make light work. :-)

[22:58] <wayland> I'll probably be able to do a rough outline, but it will need some work when I'm done with it.  

[22:59] <wayland> My method so far has been to produce specs that create enough outrage that someone else will do it (cf. Temporal.pod :) )

[22:59] <jnthn> That's OK, in many ways hacking on something that exists is easier than starting afresh.

[22:59] <jnthn> haha!

[22:59] *** pmurias left
[22:59] <wayland> Well, you'll also notice that I haven't started any document from absolutely nothing

[22:59] <wayland> S07 came from a webpage of ruoso

[23:00] <wayland> S32 came from S16 and S29

[23:00] <jnthn> Aye

[23:00] <jnthn> S14 partly should come from S12.

[23:00] <wayland> But now that I have the spectests, that may help some

[23:00] <wayland> Maybe S02 too

[23:05] <wayland> Another question -- should all the stuff about Roles be moved from S12 to S14?

[23:05] <jnthn> Yes.

[23:05] <jnthn> Probably.

[23:05] <wayland> ok :)

[23:10] *** fridim_ left
[23:19] *** ejs left
[23:25] *** skids left
[23:28] *** bacek_ joined
[23:30] <meppl> good night

[23:30] <wayland> g'night :)

[23:30] <meppl> ;)

[23:31] *** meppl left
[23:33] <Ariens_Hyperion> Perl6 takes 0.422 ms to start in my machine, is this going to be improved?

[23:33] <pugs_svn> r25503 | wayland++ | S29: s/Container.pod/Containers.pod/

[23:33] <pugs_svn> r25503 | wayland++ | S14/S12: Extracted S14 from S12, added Jonathan's blog entry, a bit from S02, and a bit 

[23:33] <pugs_svn> r25503 | wayland++ | from the spectests

[23:34] <wayland> Ariens_Hyperion: The basic plan is, 1) get it working, 2) get it fast

[23:34] <Ariens_Hyperion> at least there is hope :)

[23:34] <wayland> So yes, we're expecting that to improve, but especially after the 6.0.0 release :)

[23:34] <jnthn> Ariens_Hyperion: Did you test that with a normal or an optimized build of Parrot? :-)

[23:34] <wayland> jnthn: Feel free to shoot holes in S14 :)

[23:35] <Ariens_Hyperion> I asked because I write perl scrips to do simple text manipulation and the program starts a new interpreter process each time a script need to bee ran

[23:35] <Ariens_Hyperion> jnthn: normal

[23:36] <Ariens_Hyperion> program => text editor

[23:36] *** iblechbot joined
[23:37] <pugs_svn> r25504 | wayland++ | Added S14 links

[23:37] <jnthn> Ariens_Hyperion: You might get better out of optimized, but I'd doubt a massive amount.

[23:38] <jnthn> Ariens_Hyperion: Someone did post on the Parrot dev list a while back a breakdown of what we do at startup.

[23:39] <wayland> jnthn: I feel that the section between "=head1 Parametric Types" and "=head2 Parametric Roles" needs work, but none of the information I saw seems to cover it (ie. unless it works because Hash is both a role and a class or something)

[23:40] <jnthn> wayland: OK, I'll hack on it. :-)

[23:43] <diakopter> rakudo: static IEnumerable<int> Evens() { return Integers().Where(n => { return n % 2 == 0; }); }

[23:43] <p6eval> rakudo 2a9382: OUTPUT«Statement not terminated properly at line 1, near "Evens() { "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[23:43] *** rcharles joined
[23:44] *** rcharles left
[23:45] <diakopter> rakudo: (from n in Integers() where n % 2 == 0 select n * n).Take(20).ForEach(n => { Console.Write("{0}, ", n); });

[23:45] <p6eval> rakudo 2a9382: OUTPUT«Statement not terminated properly at line 1, near "where n % "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[23:45] <diakopter> jnthn: apparently rakudo doesn't know C#3 yet :P

[23:47] *** nihiliad left
[23:48] *** icwiener left
[23:50] *** hercynium joined
[23:50] <jnthn> diakopter: :-P

[23:52] <jnthn> Integers() ==> grep { $^n % 2 == 0 } ==> map { $^n ** 2 } ==> ...

[23:52] <jnthn> Hmm, we don't ahve a take yet :-)

[23:52] <jnthn> (Plus pipe operators not implemented...yet... ;-))

[23:54] <jnthn> OH NO the Perl 6 spec temporarily has a reference to getting hangovers from Slovak alcohol!

[23:54] * jnthn should pick better examples in the future

[23:55] <wayland> Well, we don't want the Spec to be boring, right?

[23:55] <wayland> I mean, this is Perl :)

[23:55] <wayland> I intentionally included that :)

[23:56] <wayland> But feel free to remove it if you want :)

[23:56] <jnthn> It was in your commit, nobody will ever suspect me... ;-)

[23:56] <wayland> ...unless they look at the commit message :)

[23:57] <jnthn> Ssssh... ;-)

[23:57] <jnthn> I'll try and find time to work on it a bit tomorrow.

[23:58] <wayland> No worries.  I've probably done as much with it as I can, unless there are other parts to move from S12 :)

[23:59] <jnthn> wayland++ # motivating others to Do Stuff

