[00:04] *** _jaldhar left
[00:08] *** _jaldhar joined
[00:10] *** beggars left
[00:10] *** Chillance left
[00:13] *** Grrrr joined
[00:15] *** jaldhar_ joined
[00:20] *** _jaldhar left
[00:24] *** _jaldhar_ joined
[00:25] *** jaldhar_ left
[00:46] *** drbean left
[00:46] *** drbean_ joined
[00:47] *** Grrrr left
[00:47] *** Grrrr joined
[00:57] <asciiville> tene: The original issue was when passing Pointer PMCs vi Parrot NCI to libsqlite3. It appears that libsqlite3 was stepping on the pointer itself when trying to get either a database or statement handle.

[00:58] <Tene> asciiville: what libsqlite functions stomped like that?

[00:58] <asciiville> open, prepare

[00:58] <Tene> Huh.

[00:58] <Tene> They seem to work fine for me.

[00:58] <asciiville> out of the box?

[00:58] <Tene> Yes.

[00:59] <asciiville> from the Parrot source tree?

[00:59] *** sparc joined
[00:59] <Tene> Yes.

[01:00] <asciiville> I'm bewildered then. :)

[01:00] <Tene> I had to change the namespace of src/SQLite3/SQLite3.pir, but I can use it fine from rakudo now.

[01:00] <Tene> I'm investigating a problem when trying to bind_text, though.

[01:00] <asciiville> I think I found that one. SQLITE_TRANSIENT instead of SQLITE_STATIC

[01:01] <lisppaste3> tene pasted "Use SQLite3 from Rakudo" at http://paste.lisp.org/display/86684

[01:02] <asciiville> Ah. "SQLite3" for the namespace instead of "SQLite"?

[01:02] <Tene> Yes.

[01:02] <Tene> The filename needs to match the namespace to be loaded from any other HLL.

[01:03] <asciiville> That is awesome.

[01:03] <Tene> Can you test it in ext/SQLite3/ on an up-to-date parrot for me?

[01:03] <asciiville> Let me try.

[01:04] <Tene> I need to add several more functions to that library and move it to runtime/parrot/library/ so that it gets installed...

[01:04] <asciiville> Cool. Then I can pull stuff off github that I've been working on... :)

[01:10] *** drbean_ left
[01:10] *** drbean joined
[01:13] <asciiville> tene: it worked after I changed the namespace in SQLite3.pir. I wasn't familiar with the use SQLite3:from<parrot>; notation.

[01:13] *** stennie joined
[01:13] *** stennie left
[01:15] <Tene> asciiville: That actually works for any parrot-hosted language (that supports library loading), so you can use Foo:from<cardinal>, for example.

[01:15] *** drbean_ joined
[01:15] <Tene> The fact that it works without the :from<parrot> is kind of an accident, and not to be relied on.

[01:16] <asciiville> tene: an easter egg then?

[01:16] <Tene> Kinda.

[01:17] *** Whiteknight joined
[01:19] *** drbean left
[01:19] <asciiville> ":from<parrot>" is my new friend

[01:19] *** alester joined
[01:23] *** agentzh joined
[01:26] *** drbean_ left
[01:26] *** drbean joined
[01:32] *** drbean_ joined
[01:36] *** drbean__ joined
[01:48] *** drbean left
[01:51] *** sri_kraih left
[01:54] *** drbean_ left
[02:02] *** sri_kraih joined
[02:09] *** nihiliad left
[02:14] <TimToady> ruoso: yes, nextsame et al. are supposed to be handled by exception, and as usual, this might be optimized away in specific cases

[02:15] <TimToady> but you'll note that the original formulation of that concept was "next METHOD", and next is certainly exception based

[02:17] <TimToady> moritz_: yada is supposed to work in class defs, which is probably a good argument for executing class bodies at composition time

[02:18] <ruoso> TimToady, thanks... that clarifies a lot... which means nextsame is a simple function that works the same way in methods or routines... and the dispatcher is the one responsible for doing the right thing

[02:20] *** alester left
[02:21] <TimToady> and there can be a methodical form that specifies the scope to 'next', though that's unspecced

[02:23] *** jeekobu left
[02:23] <ruoso> TimToady, the other question was if we have a special variable containing the capture sent to the current invocation

[02:24] <TimToady> frettled: your Camelia is kinda 1st-gen, and points to perl6-projects.org

[02:24] <ruoso> or if that should be resolved by the dispatcher internally

[02:24] *** kborer joined
[02:24] <TimToady> I'm inclined to think that it would be inefficient to mandate such a variable

[02:25] <TimToady> a given dispatcher can always choose to make more info available

[02:26] <TimToady> but part of the reason for special nextsame verbs was to hide the actual mechanism, instead of assuming a particular loop label, for instance

[02:32] <ruoso> TimToady, right.. I think the dispatcher has means of doing it anyway

[02:33] <ruoso> it would only be really necessary to have such variable if nextsame wasn't implemented in terms of exceptinos

[02:33] <TimToady> exceptinos are the supersymmetric partners of exceptions, I suppose

[02:34] <ruoso> they are probably related to neutrinos... or maybe centrinos...

[02:35] *** meppl left
[02:38] *** carlin joined
[02:38] *** alester joined
[02:46] *** Whiteknight left
[03:14] *** alester left
[03:20] *** caxaf joined
[03:23] *** sri_kraih left
[03:26] *** caxaf is now known as shachaf

[03:32] *** alester joined
[03:46] *** meppl joined
[03:46] *** tak11 joined
[03:48] *** sri_kraih joined
[04:19] *** zloyrusskiy joined
[04:39] *** sri_kraih left
[04:43] *** sri_kraih joined
[04:50] *** SmokeMachine joined
[04:52] *** vmbrasseur joined
[04:55] *** Bzek_ joined
[05:04] *** patmadispam left
[05:14] *** tak11 left
[05:23] *** asciiville left
[05:34] *** alester left
[05:37] *** frew_ joined
[05:42] *** vmbrasseur left
[05:53] <Tene> lambdabot: msg masak update parrot and then look at http://gist.github.com/182167

[05:53] <Tene> @msg masak update parrot and then look at http://gist.github.com/182167

[05:54] <Tene> I hope that worked...

[05:57] *** justatheory left
[06:02] *** kidd left
[06:07] *** meppl left
[06:09] *** frew_ left
[06:10] *** agentzh left
[06:12] *** tak11 joined
[06:20] <moritz_> phenny, tell masak 07:53 < Tene> @msg masak update parrot and then look at http://gist.github.com/182167

[06:20] <phenny> moritz_: I'll pass that on when masak is around.

[06:27] *** rfordinal joined
[06:30] *** drbean__ left
[06:41] *** orafu joined
[06:48] <pugs_svn> r28196 | moritz++ | [S12] spec behaviour of stubbed classes 

[06:48] <pugs_svn> r28196 | 

[06:48] <pugs_svn> r28196 | This is a bit more general than what I had in mind first. If the implementors

[06:48] <pugs_svn> r28196 | say this is too hard to do it this way, we can degrade it to allow only a single

[06:48] <pugs_svn> r28196 | '...' term in the body of a stubbed class.

[06:49] *** rfordinal left
[06:54] <Tene> oh, we have a phenny!

[06:54] <Tene> I forgot!

[06:55] <moritz_> phenny++

[06:58] <Tene> .ie phenny++

[06:59] <Tene> hey wait a sec... masak said he'd be here like an hour ago!  Where is he?

[07:07] <Tene> phenny: summon masak

[07:12] *** rfordinal joined
[07:18] *** aa572 joined
[07:22] *** drbean joined
[07:25] <frettled> TimToady: whoops, thank you, will rectify.

[07:52] *** vmbrasseur_ joined
[07:57] *** reqamst joined
[08:05] <moritz_> rakudo: say (* * *).(3)

[08:05] <p6eval> rakudo 09b954: OUTPUT«9␤»

[08:05] <moritz_> rakudo: say <a b>.perl # with non-breaking spaces

[08:06] <p6eval> rakudo 09b954: OUTPUT«["a", "b"]␤»

[08:10] <moritz_> phenny: tell masak past weekend I stumbled upon the SVG.pm "feature" that arrays are ignored where a tag is expected, ie svg => [ [ $stuff ] ] ignores $stuff

[08:10] <phenny> moritz_: I'll pass that on when masak is around.

[08:11] <moritz_> phenny: tell masak a general solution might be to flatten the array in-place. An SVG specific solution to replace it automatically with a <g>...</g> element, which is generic grouping in SVG

[08:11] <phenny> moritz_: I'll pass that on when masak is around.

[08:11] *** agentzh joined
[08:21] *** sharada joined
[08:25] *** sharada left
[08:29] *** sharada joined
[08:32] <kent\n> ack. where is the rakudo channel?

[08:32] * kent\n has looked on magnet/freenode and not found it

[08:33] <Matt-W> This is the channel where we discuss Rakudo

[08:33] *** timbunce joined
[08:33] <Matt-W> and other Perl 6 related things

[08:33] <kent\n> as in, the distribution / compilation of rakudo itself? 

[08:33] <moritz_> kent\n: all aspects of rakudo development and usage

[08:33] <kent\n> awesome. 

[08:34] <kent\n> I'm trying to write a rakudo, build for gentoo, against an existing parrot, but when I pass it --parrot-config=/usr/bin/parrot_config its complaining its 'r0' 

[08:34] <kent\n> even though its not.

[08:35] *** jferrero joined
[08:35] <kent\n> ( parrot is also build from latest svn ) 

[08:36] *** sri_kraih left
[08:36] <kent\n> I'm assuming I'm use using it wrong, but I cant see how

[08:36] <kent\n> ( edocumentationlacking )

[08:36] <moritz_> kent\n: what does '/usr/bin/parrot_config revision' say?

[08:36] <kent\n> 0  :/

[08:37] <kent\n> so I guess rakudo's not lying

[08:37] <moritz_> aye :-)

[08:37] <kent\n> just parrot_config doesn't know what r'v it is

[08:37] <moritz_> in the build tree of parrot, what happens when you run ./parrot_config revision?

[08:37] <kent\n> I'll have to check, ( build tree is rm'd after installation ) 

[08:38] *** reqamst left
[08:39] <moritz_> if I can't help you, there's also #parrot on the irc.perl.org network

[08:40] <kent\n> yeah, noted, will be asking them :)

[08:40] * kent\n had just thought it was more rakudo related and was wrong :)

[08:40] <moritz_> well, it was a good start

[08:41] <moritz_> and there is a good deal of overlap between here and #parrot

[08:42] * kent\n still isnt entirely sure why parrot dumps droppings into /usr/src but you cant make everyone happy

[08:43] * kent\n thinks he sees the problem though

[08:44] <kent\n> when its building parrot there is no longer a .svn dir, and I guess it kinda needs that to work out the rv 

[08:52] *** rocketman joined
[08:52] *** zamolxes joined
[08:52] *** sharada left
[08:58] *** rocketman is now known as soupdragon

[08:58] *** masak joined
[09:02] *** tak11 left
[09:03] <kent\n> screw it, I'll just tell it not to exclude .svn in the rsync. less difficult. ;P 

[09:03] <moritz_> :-)

[09:04] <masak> olá, camelionauts.

[09:04] <phenny> masak: 06 Sep 22:32Z <mberends> tell masak web-druid runs ok on Linux but web/make.log says "no rule to make target 'lib/Handler/HTTPDaemon.pir'": there is no Handler directory

[09:04] <phenny> masak: 06:20Z <moritz_> tell masak 07:53 < Tene> @msg masak update parrot and then look at http://gist.github.com/182167

[09:04] <phenny> masak: 08:10Z <moritz_> tell masak past weekend I stumbled upon the SVG.pm "feature" that arrays are ignored where a tag is expected, ie svg => [ [ $stuff ] ] ignores $stuff

[09:04] <phenny> masak: 08:11Z <moritz_> tell masak a general solution might be to flatten the array in-place. An SVG specific solution to replace it automatically with a <g>...</g> element, which is generic grouping in SVG

[09:04] * masak feels sought after

[09:05] <moritz_> kent\n: you can also put the revision number into the .parrot_current_rev on the server, and rsync that to the client

[09:06] <moritz_> svn info | grep ^Revision: | cut -d ' ' -f 2 > .parrot_current_rev

[09:06] <kent\n> its not really client server, its just how gentoo buildsystem works, the "source fetch" phase mirrors upstream into $DIR1, and then the contents of $DIR1 are copied over to $BUILDDIR during "source prepare" 

[09:07] <kent\n> its generally fine, and makes things nice and atomic, but just in this case its a bit of a burn 

[09:07] <masak> phenny: tell mberends fixed, thanks. strange that the bug is not reproduced, though. I might have to to a full reinstall of those modules.

[09:07] <phenny> masak: I'll pass that on when mberends is around.

[09:08] <masak> moritz_: apart from not seeing how the <g>...</g> idea would work in practice, it sounds like a neat opportunity for some syntactic sugar.

[09:11] <moritz_> masak: I on the other hand don't see what the problem is, but I haven't tried to implement it yet

[09:12] <masak> moritz_: another, perhaps shorter-term solution would be to simply disallow arrays of arrays.

[09:18] *** reqamst joined
[09:28] <masak> something I've been mulling over now and then... in Perl 5, I can process files line-by-line using the /FROM_HERE/.../TO_HERE/ pattern. it works well with the -ne flags, for example.

[09:29] <moritz_> I think that's done with ff in Perl 6

[09:29] <masak> yes, but ff is woefully underspecced.

[09:29] <masak> and I doubt it does the trick with $. which Perl 5 does.

[09:29] <Matt-W> Well, you'll just have to spec it :)

[09:29] <masak> that's what I wanted to talk about.

[09:30] <Matt-W> Well there's no $. in Perl 6, so...

[09:30] <masak> Matt-W: it's spelled $*IN.ins

[09:31] <frettled> moritz_: tsk tsk, not using perl for that svn info thingy!  What were you thinking?  :D

[09:31] <moritz_> of bootstrapping :-)

[09:32] <frettled> masak: I think krunen is thinking about a proposal for generalized tree handling in Perl 6, that might make things easier, too.

[09:32] <masak> frettled: sorry, I don't see the connection.

[09:33] <frettled> masak: since essentially all XML is a tree form, you'd get generalized tree handling routines instead of having to roll your own, might reduce code.  It's not _directly_ related to your problem, just thought it was worth mentioning.  (Also to get krunen started, muahaha.)

[09:34] <masak> I wish krunen luck. wayland has been thinking along these lines, too.

[09:35] <masak> I wouldn't mind a good library to manage trees in Perl 6, but I honestly don't think it belongs in core.

[09:35] <Matt-W> I want to see it before I decide that :)

[09:35] <Juerd> I remember the time when TimToady wasn't on IRC and now he even uses Twitter! :)

[09:35] <frettled> I'm not sure that it's intended to be in the core.

[09:35] <masak> frettled: ah. wayland did, I think.

[09:38] <frettled> Is the distinction between «core» and «modules distributed with the core» meaningful in this regard, BTW?

[09:39] <Juerd> For Perl5 I once suggested that there be "core" and "standard"

[09:41] <frettled> Mm.

[09:41] <frettled> The core would contain core _language_ features, and the standard lib would contain additional, modular functionality?

[09:41] <Juerd> Yes

[09:42] <frettled> With Perl 6, this may make even more sense.

[09:42] <frettled> Core language features could be implementation dependent code.  Standard library features would be coded in Perl 6.

[09:43] <Juerd> In p5, strict.pm would be a core module, CGI.pm would be called standard.

[09:44] <frettled> So, in essence, things would be tidier in the bike shed if all the hand-held tools hung on the wall.

[09:44] <Juerd> I've never bothered to write a precise definition, though

[09:44] <Juerd> I'm not so good at real world metaphors for programming :)

[09:44] <frettled> I managed to stay serious for more than 12 minutes, I needed a break.  ;)

[09:45] *** rfordinal left
[09:45] <frettled> Juerd: see also http://en.wiktionary.org/wiki/bikeshedding :)

[09:46] <Juerd> I know what bikeshedding is

[09:46] * masak imagines that page being full of opinions about how the word should be defined

[09:46] *** SmokeMachine left
[09:46] <frettled> hee-hee

[09:46] <Juerd> Just can't see how you would need tools to do that :)

[09:46] <frettled> aha

[09:47] * frettled was probably too obscure, again.

[09:47] <frettled> But look over there, isn't that a diversion?!

[09:47] * frettled lunches.

[09:47] <carlin> top of the bikeshedding article: "Vote on a logo for Wiktionary"

[09:48] <masak> uh oh.

[09:49] <carlin> Wonder if they have any butterflies we can vote for ...

[09:50] <Juerd> Wictionary... isn't that the game where you have to draw something and people have to recognise the policy?

[09:50] *** rbaumer joined
[09:50] <Juerd> s/c/k/

[09:51] *** rblasch joined
[09:51] <carlin> I can't immagine Wiktionary's policies being anywhere near as bad as Wikipedia's

[09:53] <Juerd> bikeshedding[citation needed]

[09:53] <Juerd> {{NPOV}}

[09:54] <carlin> Some people[who?] claim[citation needed] that bikeshedding[jargon] ...

[09:54] <Juerd> :)

[09:57] <masak> lunch &

[09:57] <carlin> there's a few [citation needed]s in the Perl 6 article

[09:57] *** masak left
[09:59] <frettled> Ooh.

[10:00] *** soupdragon left
[10:05] *** _timbunce joined
[10:21] <mikehh> forgot to post this here - rakudo (205733f) builds on parrot r41105 - make test / make spectest (up to r28196) PASS - Ubuntu 9.04 amd64 (g++)

[10:22] *** timbunce left
[10:22] *** _timbunce is now known as timbunce

[10:25] *** payload joined
[10:33] <cognominal> is STD an acronym? besides being the STandDard Perl 6 grammar?

[10:33] <moritz_> I'm looking at the wikipedia article on Perl 6

[10:33] <moritz_> the example about macros look wrong to me

[10:34] <moritz_> no need for {{{ ... }}} unless you're inside a quasi... oh, we are. never mind.

[10:37] *** sharada joined
[10:39] <carlin> rakudo: my @a = < ♣ ♢ >; say @a.splice(0, 1).perl;

[10:39] <p6eval> rakudo 09b954: OUTPUT«["♣"]␤»

[10:40] <carlin> it outputs gibberish from the CLI from a file I'm getting "no ICU lib loaded"

[10:40] <carlin> s/from/but from/

[10:41] <moritz_> carlin: the REPL  is known to have lots of troubles with Unicode

[10:41] <moritz_> so you need to install libicu before configuring parrot

[10:51] <carlin> ah, now it works. Thanks moritz_ 

[10:53] *** Whiteknight joined
[10:55] *** agentzh left
[10:55] *** agentzh joined
[11:10] *** |Jedai| joined
[11:16] *** Jedai left
[11:22] *** hanekomu joined
[11:31] *** sm` left
[11:31] *** sm` joined
[11:34] *** agentzh left
[11:34] *** jhuni joined
[11:36] *** jferrero left
[11:37] *** jferrero joined
[11:43] *** masak joined
[11:47] <moritz_> http://github.com/languages/Perl Rakudo is the "most watched" and "most forked" perl project overall

[11:48] <frettled> nice

[11:49] *** rfordinal joined
[11:55] <masak> it's working! Tene++ \o/ !!!

[11:55] *** aa572 left
[11:55] <masak> so, people. time to dig down and write a Perl 6 web app with a database backend.

[11:56] *** jhuni left
[11:56] <masak> what do we do first? Druid? a simple weblog? something entirely different?

[11:56] <masak> this is big, I tell you. a new landscape opening up.

[11:58] <moritz_> a DB backend for Novemeber?

[11:58] <masak> yes, that too.

[11:59] <masak> November already has a bit of infrastructure, so I envision a kind of ORM-like thing being better for it than just directly fiddling with SQL.

[12:00] <masak> mst suggested Sequel as a good role model for that: http://sequel.rubyforge.org/

[12:02] *** hcchien joined
[12:02] <masak> but I was looking for something which makes a bit of a splash. Druid or a blog engine would do that, I think.

[12:02] *** BinGOs joined
[12:04] *** TimToady joined
[12:04] *** literal joined
[12:04] *** IRSeekBot joined
[12:04] *** Ryan52 joined
[12:04] *** sjn joined
[12:04] *** eiro joined
[12:04] *** astinus joined
[12:04] *** Caelum joined
[12:04] *** tomaw` joined
[12:04] *** wolverian joined
[12:04] *** cookys joined
[12:04] *** sunnavy joined
[12:04] *** bloonix_ joined
[12:04] *** bigpresh_ joined
[12:04] *** edenc joined
[12:04] *** cosimo joined
[12:04] *** irc.freenode.net sets mode: +o TimToady

[12:05] *** cxreg joined
[12:05] *** yves joined
[12:06] *** sevvie left
[12:08] *** rfordinal left
[12:11] *** IllvilJa joined
[12:26] <masak> phenny: tell Tene um, it's kinda crippling that one has to sit in the same directory as SQLite3.pir... any plans to change that?

[12:26] <phenny> masak: I'll pass that on when Tene is around.

[12:27] <masak> in the meantime, I think I'll peruse the Sequel source.

[12:28] <frettled> That's very IBM-ish of you.  :D

[12:28] *** jferrero left
[12:28] *** JimmyZ joined
[12:28] <masak> what is? perusing?

[12:29] <frettled> «Sequel» :D

[12:29] <masak> do elaborate.

[12:29] <frettled> See the «History» section for SQL in Wikipedia, it should be very early.

[12:30] <moritz_> isn't 'sequel' how some people pronounce SQL?

[12:30] <frettled> Yes.

[12:30] <frettled> «SQL» was coined as a term/initial abbreviation because of patents or something.

[12:32] <frettled> «It's pronounced «sequel»!  No, «ess-cue-el»!» - one of the great flame wars of the nineties.  Oh, the humanity.  :D

[12:32] <Matt-W> not always

[12:32] <Matt-W> I've met people who say 'sequel' (rare), 'ess cue el' (common) and 'squirrel' (very rare)

[12:33] <masak> squirrel!

[12:33] <masak> very rare -- I should bloody well hope so!

[12:33] <moritz_> squirrels++

[12:33] <hanekomu> I say "ess cue el" if I want to be picky, but normally "sequel" is much easier. For example, "ess cue el server" is a mouthful, but "sequel server" just flows.

[12:33] <hanekomu> not that i recommend that particular product, of course

[12:33] <carlin> I think people would look at them funny whe nthey start talking about "my squirrel"

[12:34] *** rfordinal joined
[12:34] <kent\n> "im going to install my squirrel" 

[12:34] <frettled> Or «mysqueal»

[12:34] <kent\n> "riiiiigh" 

[12:34] <Patterner> I use "SubeQuaL"

[12:34] <hanekomu> "and I could see the squirrels, and they were merry…"

[12:34] <kent\n> postgresquirrel 

[12:35] *** payload left
[12:35] <masak> actually, the 'y' in MySQL, it could be argued, should be pronounced in the way only us Swedes can successfully pronounce it -- since MySQL was originally a Swedish enterprise.

[12:35] <huf> this isnt a rare occurrence tho, think about libc functions or c types

[12:35] <huf> is there a standard way of saying "char"?

[12:35] <frettled> yes, at least two.

[12:35] <huf> ;)

[12:35] <hanekomu> :)

[12:35] <moritz_> oh, and there's the possible confusion with "squirrelmail"

[12:35] <hanekomu> the "jar" way of saying it encourages bad habits though

[12:36] <kent\n> the one that sounds like an automotive vehicle I'd argue is the wrong one 

[12:36] <masak> chARRR! btw, TLaPD is coming up.

[12:36] <hanekomu> people here (in Austria) often (always?) say "arjive" when they mean "archive". makes me cringe everytime.

[12:36] <huf> and then add to this mix coders whose first language isnt english... you get query pronounced as qw-ayer-ee

[12:36] <hanekomu> a bit like "two times", when they mean "twice"

[12:37] <kent\n> hanekomu: wht? you're joking ?

[12:37] <kent\n> Arjive?!?

[12:37] <hanekomu> well, English isn't our native language, so when they see "archive", they think of "arch-enemy" and such

[12:37] <frettled> kent\n: it could be worse, it could be a Flemish-speaker with a very bad accent.

[12:37] <kent\n> it could be worse, it could be a german, with a cold. 

[12:38] * kent\n is somewhat a bit of both at present

[12:38] * masak reads README.pod in http://github.com/jeremyevans/sequel/ ... liking Sequel already...

[12:38] *** frew__ left
[12:38] <huf> hanekomu: i've heard at least "kar", "char" and "ts-har with a hard h"

[12:39] <kent\n> every time people say "sequel" the initail thought is "the sequel to what exactly?" 

[12:39] <masak> I propose we standardize the pronunciation of 'char' to "Krakken!".

[12:39] <hanekomu> huf: in german? because i can't imagine an English speaker saying "ts-har", and it don't know what the different in English between "kar" and "char" is anyway

[12:40] <huf> hanekomu: hungarian, so pronounced with the hungarian ortography ;)

[12:40] <hanekomu> other differences: whatever they call #, !, @, *

[12:40] *** sharada left
[12:40] <huf> hanekomu: well, one is with a k and the other with the ch in chair and words like that

[12:40] <kent\n> # <-- hash 

[12:40] <kent\n> not sharp 

[12:40] <hanekomu> should be "hash, bang, at, star," right

[12:40] <frettled> octothorpe

[12:40] <kent\n> thats a different character 

[12:41] *** frew_ joined
[12:41] <hanekomu> i've heard octothorpe for # (well, "raute" is what some people call in German)

[12:41] <kent\n> ♯ <-- ;)

[12:41] <hanekomu> no one here says "bang", always "rufzeichen" = "exclamation mark"

[12:41] <kent\n> C♯ is "C-Sharp" , C# is "C-Hash" , imho. 

[12:42] <kent\n> s/h//

[12:42] <hanekomu> but for "@" some people say (not so much anymore since email addresses became ubiquitous) "klammeraffe" = "spider monkey"

[12:42] <hanekomu> go figure

[12:42] <huf> here it's "worm"

[12:43] <kent\n> whut

[12:43] <frettled> kanelbulle

[12:43] <frettled> dog turd

[12:43] <carlin> so there isn't one you can't bikeshed over the name of?

[12:43] <huf> ;)

[12:43] <frettled> carlin: of course not

[12:44] <frettled> we are geeks.

[12:44] <masak> snabel-a "(elephant's) trunk A"

[12:44] <kent\n> ~ <-- what about that?

[12:44] <frettled> alfakrøll/krøllalfa (alpha, curled/curly alpha)

[12:44] <frettled> tilde, squiggle, …

[12:44] <hanekomu> on a related note, I love the norwegian word for "cache": "hurtigbuffer" because "hurtig" is a quaint, almost childlike way of saying "fast" in german

[12:44] <kent\n> "squiggle" is not a legitamate name imo 

[12:44] <kent\n> too ambiguous

[12:45] <kent\n> { could be squiggle 

[12:45] <kent\n> & could be squiggle

[12:45] <kent\n> ~ is imo, only tilda

[12:45] <kent\n> tilde* 

[12:46] <kent\n> what about '=' ?

[12:46] <carlin> wave

[12:50] <kent\n> this explains why they use greek letters for everything -_-

[12:51] <frettled> –­-

[12:57] <masak> I kinda like the example code on http://sequel.rubyforge.org/ -- I think a good first step would be to translate it to Perl 6 and make it run.

[12:59] * ruoso watching the google tech talk on the natural programming project

[13:03] <frettled> masak: That example code reminds me of one of the pet peeves about many database scripting frameworks (I'm not saying that it's true of this Ruby framework): they focus too much on table creation and too little on data extraction, to the extent that it becomes unclear how to best extract data.

[13:03] <masak> frettled: oh, then you should go read the README.pod immediately.

[13:03] <masak> I did, and I was happily surprised.

[13:04] <masak> (to the point that I now wonder "how the heck am I supposed to implement that?")

[13:04] <masak> it would seem that it uses chained method calls, and somehow creates the SQL query lazily when needed.

[13:05] <masak> so

[13:05] <masak> DB[:countries].filter(:region => 'Middle East').reverse_order(:area).limit(5).avg(:GDP)

[13:05] <masak> becomes

[13:05] <masak> SELECT avg(GDP) FROM countries WHERE region = 'Middle East' ORDER BY area DESC LIMIT 5

[13:06] <masak> that's not "focusing too little on data extraction" in my book. :)

[13:06] <frettled> yes, it is.

[13:07] <frettled> (in my book)

[13:07] <masak> then you have different demands on such a layer than I currently have.

[13:07] <frettled> Compare the example for creating a table as a class with, er, the missing similar example for accessing the table as a class.

[13:09] <masak> I see a few examples of accessing the table as a class.

[13:09] *** zloyrusskiy left
[13:10] <frettled> Yes, but in order to grasp how to handle the table as a class, you need to read almost all the documentation, while table creation is extremely simple.

[13:10] <frettled> However, table creation is a rare event; table access is frequent.

[13:11] <masak> if that's your strongest complaint about the framework, I think they're onto something. :)

[13:11] <frettled> no, that's the immediately obvious complaint regarding the _documentation_ of the framework.

[13:12] <masak> frettled: I'm sure they'd be happy to receive suggestions.

[13:12] <frettled> I'm not a Ruby programmer, so I haven't used this framework.

[13:12] <frettled> masak: I'd much rather be involved in how this is solved for a new Perl-ish database framework.  :D

[13:12] <masak> help willingly accepted. :)

[13:12] <frettled> :)

[13:24] <cognominal> rakudo :  say (class { has $.a }).new.^attributes[0].^methods >>~>> ', '

[13:24] <cognominal> rakudo:  say (class { has $.a }).new.^attributes[0].^methods >>~>> ', '

[13:24] <p6eval> rakudo 09b954: OUTPUT«accessor, readonly, build, rw, name, type, ceiling, p5chomp, 1, pairs, 1, 1, comb, unpolar, ord, chop, 1, 1, roots, uc, reverse, keys, isa, ucfirst, 1, cos, fmt, bytes, pick, 1, join, trim, chr, floor, rand, 1, 1, round, 1, 1, split, 1, grep, words, values, can, lcfirst, 1,

[13:24] <p6eval> ..srand, …

[13:24] <cognominal> rakudo:  say (class { has $.a }).new.^attributes[0].^methods

[13:24] <p6eval> rakudo 09b954:

[13:24] <p6eval> ..OUTPUT«readonlybuildrwnametypeaccessorroundchopsplitmatchwordscanlcfirstucsrandComplexkeysmappolarcislogsubstrminmaxpickfirstevalfiletranssinIntjoinsubstabselemsendchompindexceilingtrimp5chomppairsunpolarordrandtruncatesortsqrtrindexintgrepvaluescharsrootsreverseisaucfirstkvsamecasecoscap…

[13:25] <cognominal> where the 1 are commong from?

[13:25] <frettled> rakudo: say (class { has $.a }).new.^attributes[0].^methods.perl

[13:25] <p6eval> rakudo 09b954: OUTPUT«[{ ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ...

[13:25] <p6eval> ..}, { …

[13:27] <JimmyZ> rakudo: ( * * * * * * * / * % * * * - * - * + * * * * * * * * * )(25).say;

[13:27] <p6eval> rakudo 09b954: OUTPUT«9765575␤»

[13:28] <cognominal> it seems they are from the methods specific to attributes

[13:28] <frettled> hmm

[13:28] <cognominal> nope

[13:29] *** kidd_ joined
[13:30] <frettled> Later in the sequence I get:

[13:30] <frettled> Array, , hash, Iterator, new, print, say, WALK, defined, Str, bless, WHENCE, WHERE, eigenstates, , true, Hash

[13:30] <frettled> and a bit earlier:

[13:30] <frettled> join, 2, 1, 1, 1, end, 1, ceiling, trim, p5chomp

[13:32] <masak> it's just the methods on Any, no?

[13:33] <cognominal> how to do symetric difference on the keys of hash

[13:37] <masak> cognominal: like this:

[13:37] <masak> rakudo: my %a = foo => 1, bar => 2; my %b = bar => 3, baz => 4; my @sym-diff = grep { %a.exists($_) xor %b.exists($_) }, %a.keys, %b.keys; say @sym-diff.perl

[13:37] <p6eval> rakudo 09b954: OUTPUT«["foo", "baz"]␤»

[13:37] <masak> voila, a legitimate use of 'xor'. :)

[13:42] <cognominal> no way to golf that?

[13:43] <masak> cognominal: define an operator?

[13:46] <masak> rakudo: my %a = foo => 1, bar => 2; my %b = bar => 3, baz => 4; say (%a.keys.grep({%b.exists($_)}), %b.keys.grep({%a.exists($_)})).perl

[13:46] <p6eval> rakudo 09b954:  ( no output )

[13:46] <masak> that works too. but not as elegant, if you ask me.

[13:46] <cognominal> indeed

[13:46] <masak> bit of a structural repetition.

[13:46] <jnthn> lolitsmasak

[13:46] <jnthn> :-)

[13:47] <masak> jnthn! \o/

[13:47] <jnthn> oh hai...oh gozimas.

[13:47] <masak> jnthn: so, when's the nearest Rakudo Day?

[13:47] <jnthn> ouch :-)

[13:47] <frettled> hihi

[13:48] <masak> or are you strictly on vacation?

[13:48] <frettled> masak: perhaps we should start requesting Rakudo Week and Rakudo Month!

[13:48] <masak> April will be Rakudo month, I think. :)

[13:48] <cognominal>  say (class { has $.a }).new.^attributes[*].^methods.sort() 

[13:48] <cognominal> rakudo: say (class { has $.a }).new.^attributes[*].^methods.sort() 

[13:48] <jnthn> Strictly as in, I'll happily check in on #perl6, may even make the odd commit, but I don't expect I'll make a straight day of hacking time.

[13:48] <p6eval> rakudo 09b954: OUTPUT«Multiple Dispatch: No suitable candidate found for 'cmp', with signature 'PP->I'␤in Main (/tmp/4AccdZOLAN:2)␤»

[13:49] <jnthn> Provided the grant gets the go-ahead though, I'll be back with a vengence in October. :-)

[13:49] <masak> sounds like a plan.

[13:49] <cognominal> I can't way for full signatures :)

[13:50] <jnthn> I usually spend a month in autumn wandering around somewhere. Last year it was Russia.

[13:50] <jnthn> Was kinda funny flying here, watching on the map and seeing all the places dotted along the trans-sib than I'd been do...apart from the distance between them flying was an hour, rather than a day on the train. ;-)

[13:50] <jnthn> s/than/that/

[13:50] *** PacoLinux joined
[13:51] <cognominal> jnthn, have fun in japan

[13:51] *** payload joined
[13:51] <jnthn> cognominal: Thanks, it's not hard to. ;-)

[13:52] <jnthn> Tokyo is a pretty cool city. Discovered the bay area today. Really nice area to relax and walk by the sa.

[13:52] <jnthn> *sea

[13:53] *** pmurias joined
[13:54] <jnthn> masak: Were you asking about Rakudo day because there was a specific thingy needing attention, btw?

[13:55] <jnthn> masak: If so, I can surely squeeze in some hacking time during YAPC::Asia.

[13:56] <cognominal> hum, is it possible to hyperoperate on a method? like :

[13:56] <cognominal> rakudo ( 0, 1 ) >> .WHAT

[13:56] <cognominal> rakudo: ( 0, 1 ) >> .WHAT

[13:56] <p6eval> rakudo 09b954: OUTPUT«Confused at line 2, near ">> .WHAT"␤in Main (src/gen_setting.pm:3469)␤»

[13:57] <jnthn> yes

[13:57] <jnthn> though .WHAT is a macro so bad example. ;-)

[13:57] <jnthn> rakudo: (-1, -2, -3)>>.abs.perl.say

[13:58] <p6eval> rakudo 09b954: OUTPUT«[1, 2, 3]␤»

[14:03] <cognominal> hum, what about the failing sort?

[14:04] <jnthn> .oO( fail sort wasn't in Knuth's algo book )

[14:04] <jnthn> cognominal: Failing sort?

[14:04] <jnthn> oh, I see it

[14:04] <jnthn> heh

[14:05] <jnthn> I'm not sure what trying to sort objects generally means.

[14:05] <pmurias> OT: what's a good large font supporting terminal?

[14:05] <Matt-W> for?

[14:06] <jnthn> say (class { has $.a }).new.^attributes[*].^methods.sort(*.name)

[14:06] <jnthn> rakudo: say (class { has $.a }).new.^attributes[*].^methods.sort(*.name)

[14:06] <ruoso> pmurias, xterm huge fonts are quite  big

[14:06] <p6eval> rakudo 09b954:

[14:06] <p6eval> ..OUTPUT«:d:e:fACCEPTSArrayBUILDBUILDALLCREATEComplexHashIntIteratorIteratorPARROTREJECTSScalarScalarStrStrWALKWHENCEWHEREWHICHabsblessbytescancapitalizeceilingcharschompchopchrcisclonecombcosdefineddoeseigenstateselemselemsendevalfilefirstflipfloorfmtfmtgrephashindexintisaitemitemiteratori…

[14:06] *** vmbrasseur_ left
[14:08] <cognominal> say (class { has $.a }).new.^attributes[*].^methods.sort(*.name)  >>~>> ', '

[14:08] <cognominal> rakudo: say (class { has $.a }).new.^attributes[*].^methods.sort(*.name)  >>~>> ', '

[14:08] <p6eval> rakudo 09b954: OUTPUT«, , 1, 1, 1, ACCEPTS, Array, BUILD, BUILDALL, CREATE, 1, Hash, 1, Iterator, Iterator, PARROT, REJECTS, Scalar, Scalar, Str, Str, WALK, WHENCE, WHERE, WHICH, 1, bless, bytes, can, capitalize, ceiling, 1, 1, chop, chr, cis, clone, comb, cos, defined, does, eigenstates, elems, 1,

[14:08] <p6eval> ..end,…

[14:16] *** ejs joined
[14:20] <jnthn> rakudo: say 3 ~~ 1..10;

[14:20] <p6eval> rakudo 09b954: OUTPUT«1␤»

[14:20] *** azawawi joined
[14:23] *** lambdabot left
[14:24] <azawawi> moritz_: ping

[14:24] <phenny> azawawi: 30 Aug 18:43Z <moritz_> tell azawawi I installed sbcl on feather

[14:24] <moritz_> azawawi: pong

[14:25] <azawawi> moritz_: what files are needed for a minimal rakudo PDX build?

[14:25] *** sharada joined
[14:26] <moritz_> azawawi: bascially all of the rakudo repo, except docs/, README, LICENSE etc.

[14:26] <moritz_> maybe you can also leave out tools/

[14:28] <azawawi> moritz_: what about the stuff in parrot directory?

[14:29] <azawawi> moritz_: or parrot_install i.e.

[14:29] *** M_o_C joined
[14:29] <moritz_> azawawi: it needs an installed parrot.

[14:29] <moritz_> (including install-dev, as documented in the README)

[14:34] <azawawi> moritz_: so i tried this... http://gist.github.com/182392

[14:35] <moritz_> well, you can easily test if it builds

[14:38] <azawawi> moritz_: thx :)

[14:38] <moritz_> azawawi: and it makes sense to include Test.pm and lib/Safe.pm

[14:39] <azawawi> moritz_: will do... 

[14:40] *** payload left
[14:40] <moritz_> is there a good reason to strive for such minimalism?

[14:41] <moritz_> (also note that it's illegal to distribute such a copy without the LICENSE file)

[14:41] <avar> what people are working on the sbcl bootstrapping now?

[14:41] <moritz_> (iirc)

[14:41] <moritz_> avar: flavio glock bootstrapped mp6 on sbcl

[14:41] *** IllvilJa left
[14:42] <avar> ah

[14:42] *** JimmyZ left
[14:42] <avar> Yeah I read that. I was just wondering because when I last checked he was working on bootstrapping kp6

[14:43] <pmurias> kp6 was bootstraped on p5 but it turned too slow

[14:43] <moritz_> which is why smop started, no?

[14:44] <pmurias> yes

[14:45] <azawawi> moritz_: the idea is include a minimal six in "almost six" strawberry

[14:46] <azawawi> moritz_: but i agree with you that minimalism does make sense a lot. I will investigate it keeping most of the stuff... 

[14:48] <azawawi> moritz_: s/does/does not/

[14:51] <masak> jnthn: I was asking about Rakudo Day because I like Rakudo Days. :)

[14:51] <masak> I have no current pressing issue that needs fixing.

[14:52] <pmurias> azawawi: what does a PDX build mean?

[14:52] <moritz_> PDX = code name of last release of Rakudo

[14:52] <TimToady> PDX is the Portland release

[14:52] <pmurias> ruoso: where should we keep C smopp5 tests?

[14:53] *** zloyrusskiy joined
[14:53] *** Psyche^ joined
[14:54] *** Patterner left
[14:54] *** Psyche^ is now known as Patterner

[14:54] *** zloyrusskiy left
[14:55] <avar> pmurias: Does bootstrapping mp6 help with that? Won't it be as slow as kp6 once it has the same featureset?

[14:56] <jnthn> masak: Ah, cool. :-)

[14:56] <avar> And wasn't the reason it was slow due to it not having any optimization at all and not something to do with the bootstrap process as such?

[14:56] *** sevvie joined
[14:57] <pmichaud> Good morning, #perl6

[14:57] *** sevvie left
[14:57] <masak> though I suddenly feel like traversing RT and putting together a list of bugs that absolutely, definitely must be fixed by Q2 2010.

[14:57] <masak> pmichaud: o/

[14:57] <pmurias> avar: the reason kp6 was slow was because it layered an object system on top of perl5

[14:57] *** sevvie joined
[14:57] <jnthn> oh hai pmichaud 

[14:57] <jnthn> masak: That wouldn't be a bad idea.

[14:58] <TimToady> _____________ <- puddle of morning TimToady greets pmichaud++

[14:58] <masak> so we're seeing the puddle sideways on?

[14:58] <TimToady> ___

[14:59] <masak> :P

[14:59] <pmurias> avar: lisp is supposed to be much faster then perl5 isn't it?

[14:59] <TimToady> lisp is supposed to be much better than every other language in every way

[15:00] <hanekomu> ostensibly, yes

[15:00] <pmichaud> lisp is even better than lisp :)

[15:00] <TimToady> you can say that again

[15:00] <moritz_> except when you could low number of parenthesis as a plus

[15:00] <carlin> http://xkcd.com/224/

[15:00] <hanekomu> http://xkcd.com/224/

[15:00] <hanekomu> jinx :)

[15:00] <moritz_> you can call that URL a buzzword :-)

[15:00] * pmichaud reads backscroll

[15:01] <hanekomu> moritz_: is that like communicating jokes in numbers?

[15:01] <hanekomu> A: "224" B: erupts in laughter.

[15:01] * TimToady attempts to backlog, wondering if it will take all day as usual

[15:02] * moritz_ would be happy if pmichaud and/or TimToady could review his last S12 change for sanity

[15:02] <moritz_> or jnthn, if he's about

[15:02] <TimToady> C: "224" <silence>

[15:02] <hanekomu> A: "you didn't tell it right"

[15:02] <TimToady> D: "some people can tell 'em, and some people can't"

[15:02] <hanekomu> :)

[15:02] *** patspam joined
[15:02] *** frew__ joined
[15:03] <hanekomu> I'm sure you could work that into one of your talks about shared culture

[15:03] <carlin> C: 224  D: Sorry, net is down

[15:03] <avar> pmurias: Yes Common Lisp implementations have C-like speeds. But when I last looked at (and worked on) mp6/kp6 compiler output it had a bunch of things that made it fantastically slow compared to native code that does the same thing

[15:04] <avar> pmurias: You end up loading and compiling 5000 lines of generated code, constructing Str objects and IO stuff just to do the equivalent of (format t "hello world")

[15:04] <avar> The workaround is an optimizing compiler, but those are hard :)

[15:05] *** patspam left
[15:05] *** patspam joined
[15:05] <avar> But yes, all other things being equal generating craptastic code in Common Lisp is probably going to be faster than generated Perl code for the same reason that generated C code is faster than generated Perl code.

[15:05] *** patspam is now known as patspamadison

[15:06] <jnthn> moritz_: Hmm.

[15:07] <jnthn> I guess that means a "..." in a class body implies an augment the next time we see the class.

[15:07] <moritz_> yes

[15:07] <pmichaud> would it have to be within the same scope ?

[15:08] <pmichaud> (fsvo "scope")

[15:08] *** cmv joined
[15:08] <TimToady> augment must be able to see the existing name

[15:09] <TimToady> one of the reasons it's a different declarator, since name search can go outside current scope

[15:09] <pmichaud> class A { has $.x; ... };  module B {  class A { has $.y; } }

[15:09] <azawawi> TimToady: I noticed a couple of duplicated 'our' variables in STD.pmc. http://gist.github.com/182405

[15:09] <TimToady> well, there's a problem there, I think

[15:09] <TimToady> std: class A { has $.x; ... };  module B {  class A { has $.y; } }

[15:10] <p6eval> std 28196: OUTPUT«ok 00:02 37m␤»

[15:10] <moritz_> pmichaud: wouldn't that declare B::A in the secodn case?

[15:10] <pmichaud> moritz_: I'm fine with that, I'm illustrating my question about "scope"

[15:10] <pmichaud> also, since it's exception based, could we end up with...

[15:10] <TimToady> seems like it should have conflicted in GLOBAL::A, but I guess the second is GLOBAL::B::A

[15:11] *** nihiliad joined
[15:11] <pmichaud> class A { has $.x; { ... } };   class A { has $.y; }

[15:11] <TimToady> std: class A { has $.x; ... };  module B { augment class A { has $.y; } }

[15:11] <p6eval> std 28196: OUTPUT«ok 00:02 37m␤»

[15:12] <TimToady> in this case we're augmenting the outer class A

[15:12] <pmichaud> also, what happens with something like:

[15:13] <pmichaud> class A { has $.x;  ...;   has $.y; };   class A { has $.z; }    # :-)

[15:13] <jnthn> :-P

[15:13] <TimToady> std: class A { has $.x;  ...;   has $.y; };   class A { has $.z; }    # :-)

[15:13] <p6eval> std 28196: OUTPUT«[31m===[0mSORRY![31m===[0m␤Illegal redeclaration of package symbol A at /tmp/OBUoDLint3 line 1:␤------> [32m{ has $.x;  ...;   has $.y; };   class A[33m⏏[31m { has $.z; }    # :-)[0m␤FAILED 00:02 37m␤»

[15:14] <pmichaud> hmmm

[15:14] <pmichaud> that might in itself be an argument against an exception-based model.... a parser can only correctly parse by executing the class blocks

[15:15] <TimToady> std: multi class A { has $.x; has $.y; };  multi class A { has $.z; }

[15:15] <p6eval> std 28196: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed block at /tmp/y2RcIGTnOG line 1:␤------> [32mmulti class [33m⏏[31mA { has $.x; has $.y; };  multi class A [0m␤    expecting any of:␤      block␤  routine_def␤        terminator␤     trait␤FAILED 00:02 37m␤»

[15:16] <jnthn> .

[15:16] * jnthn is tired

[15:16] <jnthn> sleep time for me

[15:18] <jnthn> o/

[15:18] <TimToady> g'night

[15:19] <pmurias> avar: if you have a bootstrapped compiler you are forced to keep the speed vaguely decent

[15:19] <TimToady> pmichaud: how the the parse depend on execution?

[15:20] * moritz_ also doesn't see the problem

[15:20] <TimToady> STD parses without execution currently

[15:20] <avar> pmurias: just execute and go for tea!

[15:20] <pmichaud> (long answer)

[15:21] <moritz_> TDD - tea driven development

[15:21] <TimToady> and I'd argue that the 'class {...}' form means that class bodies shouldn't execute till composition time anyway, maybe

[15:21] <masak> I think I can close this one http://rt.perl.org/rt3/Ticket/Display.html?id=57336

[15:21] <pmichaud> in general, we're trying to allow a partial definition of a class

[15:21] <masak> does anyone else agree?

[15:22] <TimToady> not sure ... is the right tool for partial definition

[15:22] <pmichaud> i.e., we want to be able to do:     class A { ... };   class B { #`(code that depends on A being a class) };   class A { #`(full definition of class A) };

[15:22] <TimToady> I'd say 'replacement definition of class A' there

[15:22] <pmichaud> however, as STD.pm just showed,  the second "class A" thinks it's an illegal class redeclaration

[15:23] <pmichaud> and according to what was checked in to S12, the way that the compiler knows that the second class A is not illegal is because the first class A threw an exception

[15:23] <TimToady> STD doesn't handle ... yet

[15:23] <masak> doesn't handle what yet? :P

[15:23] <pmichaud> from S12:

[15:23] <pmichaud> +If the class body throws an exception from a literal C<...> (yada) term,

[15:23] <pmichaud> +the class defintion is considered incomplete, and a second definition of

[15:23] <pmichaud> +that class does not complain, so you can write

[15:23] <TimToady> yes, but I didn't write that part :)

[15:24] <pmichaud> right; I'm commenting with respect to moritz++'s commit

[15:24] <moritz_> pmichaud: I still don't see where the problem is - the first class defintion of A is executed at compile time

[15:24] <pmichaud> as written, it would imply (to me) that a parser could only correctly parse by executing the class block to see if the class body throws an exception

[15:24] <moritz_> pmichaud: ie before class B is even parsed

[15:24] <pmichaud> that's fine with me

[15:24] <moritz_> pmichaud: it's specced that way anyway

[15:25] *** justatheory joined
[15:25] <pmichaud> moritz_: I'm not complaining about the fact that class A is executed; I know that.

[15:25] <TimToady> we're trying to avoid unnecessary execution at compile time; the necessary execution is bad enough

[15:25] <pmichaud> moritz_: my point is simply that this definition makes it difficult for STD to do an accurate parse

[15:26] <TimToady> you've basicaly just turned all class defs into BEGIN blocks

[15:26] <moritz_> TimToady: no, it was like that before

[15:26] <moritz_> "In either case, the code represented by ... executes at compile time as the body of a method of the metaclass, which is responsible for interpreting the keywords of the class definition."

[15:26] <moritz_> that's been in there for ages.

[15:26] <TimToady> hmm

[15:26] <pmichaud> this is correct.... I'd *love* to get rid of that, fwiw

[15:26] <moritz_> and which is what gave me this stupid idea :-)

[15:26] <TimToady> yes, that's a very ancient fossil

[15:27] <moritz_> anyway, as I noted in the commit message, I'm fine be de-generalizing my last commit

[15:27] <pmichaud> there was also a discussion at NPW as to whether the body of a class should execute at BEGIN, CHECK, or INIT

[15:27] <moritz_> to just allow class A { ... LIST }

[15:27] <TimToady> or COMPOSE

[15:27] <moritz_> and nothing else in there

[15:28] <pmichaud> hadn't noticed COMPOSE before :)

[15:28] <TimToady> just naming the time, not proposing a block :)

[15:29] *** carlin left
[15:29] <masak> rakudo: my @a; @a[0] := @a

[15:29] <p6eval> rakudo 205733: OUTPUT«rtype not set␤in Main (src/gen_setting.pm:3469)␤»

[15:30] <TimToady> we could go so far as to generalize a different direction, and say a statement list ending in a ... statement is appendable to by replacing the ... statement

[15:30] <pmichaud> anyway, moritz's immediate issue is that we'd like to be able to split our settings into separately compiled files, but there are some cross-dependencies whereby we need to be able to tell the compiler e.g. "Rat" is a class without its full definition needing to be available

[15:31] <TimToady> well, either we make 'class Rat {...}' work, or we make 'proto class Rat {}' work

[15:32] <moritz_> right. And one possible solution is stubbing classes, which was IMHO insufficiently specced

[15:32] <TimToady> it needs a parse def though, not involving execution

[15:32] <pmichaud> I'm fine with either approach; I was expecting 'class Rat {...}' to be largely syntactic-based and not execution based.

[15:33] <TimToady> YACV

[15:33] <TimToady> (context var)

[15:33] <TimToady> ((is one approach))

[15:34] <TimToady> (((doubtless with its own evilness)))

[15:34] <masak> rakudo: grammar A { token ws { 'a' }; rule b {x y}; }; say 'xab' ~~ m/ ^ <a::b> $ /

[15:34] <p6eval> rakudo 205733: OUTPUT«Null PMC access in get_string()␤in regex PGE::Grammar::_block59 (/tmp/DOwfZrm1dZ:2)␤called from Main (/tmp/DOwfZrm1dZ:2)␤»

[15:34] <pmichaud> A::b, perhaps?

[15:34] <masak> heh, a ticket whose phenotype has actually gotten _worse_ since it was created. :P

[15:34] <masak> hm.

[15:35] <masak> the ticket says a::b.

[15:35] <masak> apparently that's the bug. :)

[15:35] <pmichaud> well since there's no grammar named 'a'....

[15:35] <TimToady> std: grammar A { token ws { 'a' }; rule b {x y}; }; say 'xab' ~~ m/ ^ <a::b> $ /

[15:35] <p6eval> std 28196: OUTPUT«ok 00:03 38m␤»

[15:35] <TimToady> hmm

[15:35] <eiro> T/wg #soul9 

[15:35] <eiro> oops sorry

[15:35] <masak> eiro: irssi?

[15:35] <eiro> and hello world 

[15:35] <eiro> masak, yes :)

[15:36] <masak> eiro: consider switching to one which induces better habits. :P

[15:36] <masak> those commands doesn't seem nearly out-of-band enough to me.

[15:36] <TimToady> or rewriting irssi to have a sane interface :)

[15:36] <eiro> masak, i'd love to but i failed finding a decent irc client 

[15:36] <moritz_> masak: re RT #57336, I think is OK to close

[15:36] <masak> and it's more or less only irssi (and vim) users who inadvertently contribute to channel noise. :)

[15:36] <masak> moritz_: already did.

[15:37] <moritz_> TimToady, pmichaud: if we go for a syntax-only solution for stubbing classes, 'proto class A { }' seems cleaner

[15:37] <azawawi> moritz_: perl6.exe (PDX release) failed when run from outside its working directory, please see http://gist.github.com/182416 

[15:38] <moritz_> azawawi: yes, you need to 'make install' it - again please see the README

[15:38] <eiro> masak, how does vim users polute this chan ? (and do you guys have a suggestion about a cool irc client)

[15:38] <masak> eiro: I've been known to do :q on the channel. :)

[15:38] <masak> eiro: ERC is nice, if you like Emacs. which I do.

[15:38] <moritz_> because it makes it very clear up front that this is a proto definition

[15:39] * moritz_ is reasonably happy with vim, enough not to look for alternatives

[15:39] <azawawi> moritz_: :)

[15:40] <eiro> never used emacs as i'm a modal edition addict. thanks anyway

[15:40] <pmichaud> 'proto class A { }' can work, although Rakudo will have difficulty implementing it until we get contextuals in NQP and PGE

[15:40] <pmichaud> (same problem as 'is also'/'augment')

[15:41] <TimToady> except 'proto' implies *multiple* extra definitions

[15:41] <pmichaud> there is that.

[15:41] <TimToady> but ... only implies one

[15:41] <TimToady> and people will expecte ... to work anyway

[15:42] <TimToady> *expect

[15:42] <avar> eiro: Let me get this right. You don't want to use Emacs because you prefer to work in many different modes ?:) (slight troll)

[15:42] *** _jaldhar_ left
[15:42] <avar> (the joke being that emacs has like 2000 modes by default and you can make it modal 'ala vi if you want)

[15:43] <TimToady> I don't use emacs because it gives me arthritis in me pinky

[15:43] <avar> TimToady: Have you setxkbmap -option ctrl:swapcaps ?

[15:43] <eiro> avar, i'm too lazy to explore but i would be happy to see any demo/screencast 

[15:43] <masak> I'm confused by http://rt.perl.org/rt3/Ticket/Display.html?id=61566

[15:43] <masak> the error is gone, but the issue should remain.

[15:44] <TimToady> avar: not exactly

[15:44] <avar> It's recommended if you use Emacs so that every command doesn't require some sort of vulcan death grip

[15:44] <pmichaud> masak: I'm not sure what's confusing you there

[15:44] <avar> Keyboards used to have control where caps lock is now until MSFT screwed things up.

[15:44] <masak> pmichaud: that the binding of the 1 to the @a succeeds.

[15:45] <pmichaud> that's a rakudobug, yes.

[15:45] <masak> pmichaud: we argue in the bug report that it shouldn't.

[15:45] <masak> oh, good.

[15:45] <pmichaud> I didn't read it that way

[15:45] <TimToady> avar: I don't swap 'em--I destroy CAPSLOCK entirely and make 'em both control

[15:45] <pmichaud> <pmichaud> you should get a "Int does not do Positional role"

[15:45] <pmichaud> exception or something like that.

[15:45] <pmichaud> (from the ticket)

[15:45] <masak> right.

[15:45] <masak> I'm reading sloppily. :/

[15:46] <pmichaud> I suspect I can even fix that bug today.  :)

[15:46] <avar> TimToady: I WOULD DO THAT EXCEPT I FIND CAPS LOCK HELPFUL FOR YELLING

[15:46] <TimToady> but there are still far too many ^X thingies

[15:46] <azawawi> moritz_: Thanks for your help :)

[15:46] <pmichaud> I wonder how many times I've intentionally hit the "caps lock" key on this keyboard.  I suspect the number is surprisingly close to zero.

[15:46] <pmurias> TimToady: that's the better way of doing things ;)

[15:47] <pmurias> btw shouldn't you remap caps lock to escape?

[15:47] <TimToady> hey, I used to *hack* on Gosling's emacs, so it's not like I'm unaware of the interface :)

[15:48] <moritz_> pmichaud: which is why I bound my capslock key to ESC, which is nice for vim users :-)

[15:49] <TimToady> I've used so many different keyboards with strange ESC keys that I've learned to type ^[ instead

[15:50] *** beggars joined
[15:52] *** azawawi left
[15:53] <masak> rakudo: my $t = 5; say $t\i

[15:53] <p6eval> rakudo 205733: OUTPUT«Confused at line 2, near "\\i"␤in Main (src/gen_setting.pm:3469)␤»

[15:53] <pmichaud> std: my $t = 5;  say $t\i   # checking

[15:53] <p6eval> std 28196: OUTPUT«ok 00:02 38m␤»

[15:56] <TimToady> yes, there is no .i method anymore

[15:56] <masak> the ticket said as much.

[15:57] <masak> hm, looking at http://rt.perl.org/rt3/Ticket/Display.html?id=62900 , I don't actually know what "doing it right" would entail.

[15:57] *** cotto joined
[15:57] <pmichaud> rakudo:  my $t = 5;  say $t\++;  say $t;

[15:57] <p6eval> rakudo 205733: OUTPUT«Confused at line 2, near "\\++;  say "␤in Main (src/gen_setting.pm:3469)␤»

[15:57] <pmichaud> std:  my $t = 5;  say $t\++;  say $t; # checking

[15:57] <p6eval> std 28196: OUTPUT«ok 00:03 38m␤»

[15:58] *** kborer left
[15:58] <TimToady> just considered a degenerate case of unspace

[15:58] <pmichaud> right

[15:59] <moritz_> rakudo: say %*ENV\ <PATH>

[15:59] <p6eval> rakudo 205733: OUTPUT«/usr/local/bin:/usr/bin:/bin:/usr/games␤»

[15:59] <moritz_> rakudo: say %*ENV\<PATH>

[15:59] <p6eval> rakudo 205733: OUTPUT«/usr/local/bin:/usr/bin:/bin:/usr/games␤»

[15:59] * moritz_ suspects that the i is just not parsed as a postfix, but as part of term

[16:00] <TimToady> STD has in its POST rule: [ <.unsp> | '\\' ]?

[16:00] <pmichaud> rakudo has that also

[16:00] <masak> rakudo: sub s {}; s

[16:00] <pmichaud> but part of the difference is that rakudo's postfix is handled differently

[16:01] <p6eval> rakudo 205733: OUTPUT«s/// not implemented, try .subst as workaround at line 2, near ""␤in Main (src/gen_setting.pm:3469)␤»

[16:01] <masak> o_0

[16:01] <masak> moritz_: what's the meaning of this? :P

[16:01] <TimToady> he wants you to translate to Sweutch, I guess

[16:02] <pmichaud> anyway, we probably can't fix the postfix handling in rakudo until we have protoregexes

[16:02] <moritz_> masak: of what? bug!

[16:02] * masak zubmitz ze bug

[16:02] <moritz_> std: sub s { }; s

[16:02] <p6eval> std 28196:  ( no output )

[16:03] <moritz_> rakudo: sub s-expr { }; s-expr

[16:03] <p6eval> rakudo 205733:  ( no output )

[16:05] *** jaldhar joined
[16:10] <masak> heading to the store now. I'm on page 3 of 10 in RT, and have already built up quite a list. this will be interesting.

[16:10] *** masak left
[16:12] *** synth joined
[16:13] *** frederico joined
[16:18] *** kent\n joined
[16:21] *** abra joined
[16:29] *** kborer joined
[16:34] *** finanalyst joined
[16:36] *** timbunce left
[16:38] *** timbunce joined
[16:43] *** lmc joined
[16:44] *** lambdabot joined
[16:53] *** Bzek_ left
[16:57] *** abra left
[17:01] *** timbunce left
[17:03] *** payload joined
[17:06] *** abra joined
[17:19] *** sevvie left
[17:20] *** azawawi joined
[17:20] <azawawi> hi

[17:27] *** ejs left
[17:30] <pugs_svn> r28197 | moritz++ | [S12] undo '...' semantics in class bodies. 

[17:30] <pugs_svn> r28197 | 

[17:30] <pugs_svn> r28197 | Now only a single ... term in the classes marks that class as a forward

[17:30] <pugs_svn> r28197 | declaration, making it a declaration.

[17:30] <pmichaud> moritz++

[17:31] <pmichaud> I might be able to add this a bit later

[17:32] *** abra left
[17:32] <moritz_> that would really be great

[17:33] *** rblasch left
[17:37] *** rhr_ joined
[17:38] <moritz_> masak++ # Cheese speleology

[17:38] <dalek> rakudo: e2eaf33 | pmichaud++ | src/builtins/globals.pir:

[17:38] <dalek> rakudo: Remove contextual fallback to %*ENV (as per r28193).

[17:38] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/e2eaf3371e93abd20c1a7b82bba6b3410eb128b8

[17:39] *** tak11 joined
[17:39] <moritz_> pmichaud: should I remove that from the spectests too?

[17:39] <moritz_> or did you already do that?

[17:41] *** jaldhar left
[17:42] <pmichaud> I did a spectest run after removing it and everything passed

[17:42] <pmichaud> so I guess it's already been done

[17:43] <moritz_> not quite ;-)

[17:43] <pugs_svn> r28198 | moritz++ | [t/spec] remove %*ENV fallback from contextual variables (as per r28193) 

[17:44] <pmichaud> oh!  that file isn't in spectest.data

[17:44] <pmichaud> it probably should be, now :)

[17:44] <moritz_> it was passing before, too (I think)

[17:45] *** jaldhar joined
[17:45] <pmichaud> I'll let you add it to spectest.data :)

[17:45] <moritz_> ok

[17:47] <moritz_> done

[17:48] <pmichaud> git push

[17:48] <pmichaud> perl tools/progress-graph.pl

[17:48] <pmichaud> rsync -auv rakudo-tests-* pmichaud.com:www/perl6

[17:48] <pmichaud> oops, wrong window

[17:48] *** zamolxes left
[17:49] <pmichaud> we need to come up with a better mechanism for estimating the size of the spectest suite.... or we need to stop generating reports that depend on knowing the size of the suite

[17:49] <pmichaud> (or we need to get rid of the 'plan *' lines)

[17:50] <dalek> rakudo: 8d5a40a | moritz++ | t/spectest.data:

[17:50] <dalek> rakudo: add contextual.t to spectest.data, pmichaud++

[17:50] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8d5a40adf46e318490e4bec6ffa4bb16f70e9931

[17:50] <dalek> rakudo: c1d96ce | pmichaud++ | docs/spectest-progress.csv:

[17:50] <dalek> rakudo: spectest-progress.csv update: 435 files, 14255 pass, 0 fail

[17:50] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c1d96ceeb33539be5f007431d3e396040135e7af

[17:50] <moritz_> pmichaud: a good approach would be to only estimate them with ack when rakudo can't run them

[17:52] <pmichaud> where 'estimate them' is a sequence of (1) check for a plan line with a numeric value, (2) if no such plan line exists, count the number of calls to is/ok/isa_ok/etc. ?

[17:52] <moritz_> (1) would be a very good start already

[17:52] <pmichaud> well, that's what currently happens

[17:52] <moritz_> the number of test files that rakudo can't and that uses 'plan *' is not large

[17:52] <pmichaud> we're running into issues with the 'plan *' lines

[17:53] <pugs_svn> r28199 | lwall++ | [S10] specify time of execution of package blocks and module (non)mainline code 

[17:53] <pugs_svn> r28199 | [S12] give example of use of yada classes

[17:53] <moritz_> pmichaud: aren't we always using (1) right now, even if rakudo can run it?

[17:53] *** patspamadison left
[17:54] <pmichaud> moritz_: we might be, although my test_summary.pl script was also counting the number of tests rakudo actually ran.  I think mberends++ might've removed that, though

[17:55] <Tene> phenny: tell masak I very much plan to change that.  I'm very much not done with it yet.

[17:55] <phenny> Tene: I'll pass that on when masak is around.

[17:55] <phenny> Tene: 12:26Z <masak> tell Tene um, it's kinda crippling that one has to sit in the same directory as SQLite3.pir... any plans to change that?

[17:56] <Tene> .u €

[17:56] <phenny> U+20AC EURO SIGN (€)

[17:56] <Tene> Whiteknight: you can ask phenny in here

[17:57] <moritz_> phenny++

[17:57] <moritz_> I like here more with each day

[17:57] *** sm` left
[17:57] *** sm` joined
[17:58] <TimToady> rakudo: BEGIN our $answer = 42; say $answer

[17:58] <p6eval> rakudo 8d5a40: OUTPUT«Could not find non-existent sub BEGIN␤»

[17:59] <TimToady> std: BEGIN our $answer = 42; say $answer

[17:59] <p6eval> std 28199: OUTPUT«ok 00:02 38m␤»

[17:59] <Matt-W> Does that BEGIN only affect the 'our $answer = 42' ?

[18:00] <azawawi> moritz_: is perl Configure.pl --gen-parrot --gen-parrot-prefix=myfolder a supported way of installing parrot/perl6 to myfolder?

[18:00] <pmichaud> azawawi: yes.

[18:01] *** frederico left
[18:01] <azawawi> pmichaud: it dies here

[18:01] <azawawi> pmichaud: on PDX

[18:01] <pmichaud> dies with what?

[18:01] <azawawi> pmichaud: let me clean and try again...

[18:02] <pmichaud> it might want a full path for --gen-parrot-prefix

[18:02] <pmichaud> actually, I suspect that's the issue

[18:02] <TimToady> Matt-W: yes, it's a statement_prefix in STD

[18:03] <azawawi> pmichaud: in my case we used to install six on c:\strawberry\six

[18:03] <TimToady> but what I'm really wondering about right now if the fact that 'our' defines its init to run at INIT

[18:03] <TimToady> time

[18:03] <Matt-W> TimToady: I didn't know about that, that's cool.

[18:03] <TimToady> which is after the BEGIN, which is a problem

[18:03] <Matt-W> oh

[18:03] <pugs_svn> r28200 | moritz++ | [t/spec] test context vars in private and public class and instance methods 

[18:04] <azawawi> TimToady: any idea why we have a $DEBUG, $endsym and $SCOPE defined twice in STD.pmc?

[18:04] <TimToady> It might have to be modified to 'at INIT time, but no later than execution time of the 'our'

[18:04] <Matt-W> can BEGIN blocks have their own INIT blocks and their own INIT time? or would that just be too confusing?

[18:05] <TimToady> azawawi: probably to keep perl 5 from getting confused, since it's emulating context vars with local

[18:05] <TimToady> or there's an extra declaration in there to keep someone from complaining about somethign undefined somewhere :)

[18:05] <moritz_> Matt-W: I think they can

[18:05] <TimToady> is my recollection

[18:05] <pmichaud> azawawi: yes, --gen-parrot-prefix wants a full pathname, or at least something that isn't ambiguous (more)

[18:06] <pmichaud> if one just does  --gen-parrot-prefix=myfolder it gets installed to parrot/myfolder on my system

[18:07] <azawawi> pmichaud: http://gist.github.com/182488

[18:07] <TimToady> moritz_: in fact, in your blog yesterday you had: BEGIN { @*INC.push: 'src/svg/lib' }

[18:07] <TimToady> and that could lose the {} someday

[18:07] <TimToady> well, if you add ; at the end

[18:07] <pmichaud> azawawi: yes, that's exactly what I got

[18:07] <moritz_> TimToady: I know, but I currently like to blog about code that actually runs ;-)

[18:07] <TimToady> std: BEGIN @*INC.push: 'src/svg/lib';

[18:07] <p6eval> std 28199: OUTPUT«ok 00:03 37m␤»

[18:07] <pmichaud> parrot installed to parrot/myfolder/, but rakudo is looking in myfolder/

[18:08] <TimToady> nodnod, wasn't suggesting otherwise

[18:08] <Matt-W> TimToady: that is nice

[18:08] <TimToady> why I said "someday" :)

[18:08] <moritz_> sure

[18:11] <azawawi> pmichaud: failed again with full path (win32)

[18:12] <pmichaud> azawawi: oh, I see the problem.  Configure.pl doesn't understand its own prefix

[18:12] <pmichaud> looks like it would have to be --gen-parrot-prefix=<path>  --parrot-config=<path>/bin/parrot_config

[18:12] <pmichaud> Configure.pl:40 should be fixed to be smarter about that

[18:13] <M_o_C> Configure.pl doesn't understand its own prefix <-- Configure.pl prefix = Perl 6 prefix which is not neccessary Parrot prefix...

[18:13] <M_o_C> So it shouldn't be fixed but improved :)

[18:13] <moritz_> pmichaud: I can take a look at that iin a few minutes

[18:14] <pmichaud> moritz_: that would be great.  For now, I'd simply say that if --gen-parrot-prefix is supplied we use use it instead of parrot_install/bin/parrot_config

[18:14] <pmichaud> (on line 41)

[18:15] <M_o_C> Meh, sorry, I just realised I typed quicker than I could think.

[18:16] *** iblechbot joined
[18:16] * azawawi tries it

[18:17] *** timbunce joined
[18:21] <moritz_> I think I have a fix for --gen-parrot-prefix, testing it now

[18:21] *** rbaumer left
[18:26] <finanalyst> pmichaud: two questions, please. why does the total number of tests on the rakudo page fall? And how much of the do-not-work will be resolved by rakudo star?

[18:26] *** sri_kraih joined
[18:26] <pmichaud> finanalyst: total number of tests fall because (1) the spec has changed such that some tests are eliminated, and (2) we don't have an accurate mechanism for counting tests

[18:26] *** sri_kraih left
[18:26] <moritz_> (2) is a much larger effect than (1) at the moment, though

[18:27] *** sri_kraih joined
[18:27] <pmichaud> in the case of #2, some of the tests' "plan 123;"  lines have changed to read "plan *;", and the script that calculates the total number of spectests doesn't know what to do with "plan *;"

[18:27] <finanalyst> ah

[18:27] <pmichaud> as far as how much of the do-not-work will be resolved by Rakudo star, I can't definitively answer that until it's actually released :)

[18:27] <azawawi> TimToady: Can u please take a look at this http://gist.github.com/182503 ?

[18:28] <pmichaud> however, the items tagged with "1" at the bottom of docs/ROADMAP are all intended to be fixed by the Rakudo Star release.

[18:28] *** icwiener joined
[18:28] <finanalyst> what is the point of plan *? Isnt part of having a plan to do with a testable number of tests?

[18:29] <pmichaud> my overall intention at this point is that Rakudo Star gets released in April 2010 "no matter what".  If that means that some features aren't quite implemented, I think we can still have a "usable release".

[18:30] <pmichaud> i.e., I'm becoming more and more a believer that it's better to say "we're releasing on date YYYY-MM" than to say "the next release will absolutely have features A, B, C, ..., and Z"

[18:30] <pmichaud> especially if we adopt a "release often" philosophy

[18:31] <pmichaud> (all of this sounds worthy of a blog post, I guess)

[18:31] *** masak joined
[18:32] <moritz_> while writing my commit message I figured that what I planned to do was not what I had done. Back to hacking and testing...

[18:32] *** timbunce left
[18:32] <moritz_> I love writing of commit messages

[18:32] <masak> writing of commit messages loves you!

[18:32] <phenny> masak: 17:55Z <Tene> tell masak I very much plan to change that.  I'm very much not done with it yet.

[18:32] <moritz_> it forces you to recap what you did

[18:32] <masak> Tene: nod.

[18:33] <pugs_svn> r28201 | lwall++ | [S06] remove the slightly non-sensical 'use GLOBAL' in favor of 'defines' 

[18:33] *** payload left
[18:33] *** timbunce joined
[18:33] <azawawi> pmichaud: it worked with C:\strawberry\six>perl Configure.pl --gen-parrot --gen-parrot-prefix=c:\strawberry\six\myfolder --parrot-config=c:\strawberry\six\myfolder\bin\parrot_config.exe

[18:34] <pmichaud> azawawi: excellent.  That will continue to work, but we'll also fix it so that the --parrot-config option isn't necessary if --gen-parrot-prefix is specified.

[18:34] <moritz_> aye, I have a patch for that

[18:34] <moritz_> testing as we speak

[18:35] <pmichaud> afk, errands

[18:35] *** timbunce left
[18:35] <M_o_C> Hm... So it seems like RT#68746 only occurs on my system...

[18:35] <finanalyst> pmichaud: what governs the priorities of features, viz. which bits of rakudo get implimented first?

[18:36] <pmichaud> finanalyst: bigger itches get scratched first :)

[18:36] <pmichaud> finanalyst: if you're looking for a definitive formula, there isn't one.

[18:37] <finanalyst> no not a formula. just i've been waiting for variables in regexen for a while

[18:37] <finanalyst> and its been on the todo 

[18:37] <finanalyst> just trying to work out when it'll get done

[18:37] * moritz_ hops that this will fall out of the PGE refactors pretty easily

[18:37] <finanalyst> without annoying anyone

[18:37] <azawawi> pmichaud: thanks... building PDX as we speak... wonderful job on separating them, pmichaud++, moritz_++

[18:38] <dalek> rakudo: 6b22b9d | moritz++ | Configure.pl:

[18:38] <dalek> rakudo: when --gen-parrot-prefix is passed along, we should also search in that path for parrot_config

[18:38] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6b22b9dfb9e31e72845f2c68af6a9356d019e721

[18:38] <dalek> rakudo: 446d49f | moritz++ | :

[18:38] <dalek> rakudo: Merge branch 'master' of [email@hidden.address]
[18:38] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/446d49f4cae7d88b84c42d5c83df75bc0e3edde8

[18:38] <pmichaud> finanalyst: that will happen sooner rather than later

[18:38] <M_o_C> Plus it probably would make more sense to say "which bits of Perl 6 will be implemented soon" as you can already use Rakudo.

[18:38] <pmichaud> being able to get variables to work in regexes was blocking on getting lexicals to work in parrot

[18:39] <pmichaud> and that didn't really happen until last November

[18:39] <pmichaud> but it also requires a significant PGE refactor

[18:39] <pmichaud> because PGE doesn't really understand regexes embedded in lexical scopes just yet

[18:40] <pmichaud> anyway, I would expect variables to work in regexes by about the October 2009 release.

[18:40] <pmichaud> (it might happen for the September 2009 release, but that's a little less likely)

[18:40] <finanalyst> how easy would it be to create a gantt graph, showing which features are dependent on which?

[18:41] <pmichaud> we already have that

[18:41] <finanalyst> oh where?

[18:41] <pmichaud> not as a graph, but a description of what features are blocking on what components

[18:41] <pmichaud> in the ROADMAP

[18:41] *** patspam joined
[18:41] <pmichaud> each item in the roadmap identifies the pieces it's blocking on

[18:42] <pmichaud> 1  * lexical variable lookups in regexes (A)

[18:42] <pmichaud> the (A) indicates it's blocking on the PGE refactor

[18:43] <finanalyst> i am re-reading ROADMAP and can see that now

[18:43] *** iblechbot left
[18:44] <pmichaud> afk, lunch and then errands

[18:44] *** timbunce joined
[18:48] <pugs_svn> r28202 | lwall++ | [gimme5] remove dup our declarations for azawawi++ 

[18:48] <pugs_svn> r28202 | [Test] add testing_done

[18:48] <TimToady> er, done_testing...

[18:49] *** kidd_ left
[18:52] <azawawi> TimToady: thanks :)

[18:57] *** rbaumer joined
[18:58] *** patspam left
[19:03] *** azawawi left
[19:08] *** MoC` joined
[19:09] *** _timbunce joined
[19:11] *** wknight8111 joined
[19:16] *** meppl joined
[19:18] *** zamolxes joined
[19:20] *** ruoso left
[19:21] *** Whiteknight left
[19:24] *** pdcawley joined
[19:24] *** icwiener left
[19:25] *** M_o_C left
[19:25] *** icwiener joined
[19:27] *** MoC` left
[19:27] *** kidd joined
[19:27] *** pdcawley left
[19:27] *** pdcawley joined
[19:30] <pugs_svn> r28203 | azawawi++ | [STD] removed duplicated our $DEBUG 

[19:30] *** masak left
[19:31] *** rfordinal left
[19:32] *** rfordinal joined
[19:37] *** timbunce left
[19:37] *** _timbunce is now known as timbunce

[19:40] *** dukeleto joined
[19:42] <Tene> Aw, ' is only valid in the inside of an identifier.

[19:42] <Tene> not at the end

[19:42] <Tene> so I can't say $a' = f($a);

[19:43] <moritz_> correct

[19:44] *** PhatEddy joined
[19:46] *** kborer_ joined
[19:48] <sharada> :(

[19:51] *** rfordinal left
[19:51] *** |Jedai| left
[19:51] *** Hale-Bopp left
[19:51] *** krakan left
[19:51] *** BooK left
[19:51] *** psychoschlumpf left
[19:51] *** betterwosld left
[19:51] *** diakopter left
[19:51] *** hatseflats left
[19:51] *** chipdude left
[19:51] *** pioto left
[19:51] *** cj left
[19:51] *** PhatEddy left
[19:51] *** kidd left
[19:51] *** finanalyst left
[19:51] *** Grrrr left
[19:51] *** Tene left
[19:51] *** jan_ left
[19:51] *** pdcawley left
[19:51] *** orafu left
[19:51] *** ezra left
[19:51] *** pugs_svn left
[19:51] *** sbp left
[19:51] *** phenny left
[19:51] *** simcop2387 left
[19:51] *** pmichaud left
[19:51] *** kborer_ left
[19:51] *** wknight8111 left
[19:51] *** rbaumer left
[19:51] *** sri_kraih left
[19:51] *** kborer left
[19:51] *** cotto left
[19:51] *** cmv left
[19:51] *** frew__ left
[19:51] *** sharada left
[19:51] *** hanekomu left
[19:51] *** shachaf left
[19:51] *** szabgab left
[19:51] *** RonOreck_ left
[19:51] *** hugme left
[19:51] *** ssm left
[19:51] *** lambdabot left
[19:51] *** justatheory left
[19:51] *** Matt-W left
[19:51] *** patmat_ left
[19:51] *** athomason left
[19:51] *** JarJarBinks left
[19:51] *** Maddingue left
[19:51] *** akl left
[19:51] *** frodwith left
[19:51] *** nothingmuch left
[19:51] *** PerlJam left
[19:51] *** c9s left
[19:51] *** kent\n left
[19:51] *** cxreg left
[19:51] *** yves left
[19:51] *** reqamst left
[19:51] *** Guest98709 left
[19:54] *** Juerd joined
[19:54] *** kent\n joined
[19:54] *** obra_ joined
[19:54] *** broquaint joined
[19:54] *** ascent joined
[19:54] *** ingy joined
[19:54] *** yahooooo joined
[19:54] *** Aisling joined
[19:54] *** kolibrie joined
[19:54] *** renormalist joined
[19:54] *** omega joined
[19:54] *** integral joined
[19:54] *** frettled joined
[19:54] *** Khisanth joined
[19:54] *** kst joined
[19:54] *** viklund joined
[19:54] *** Eevee_ joined
[19:54] *** Guest98709 joined
[19:54] *** reqamst joined
[19:54] *** cxreg joined
[19:54] *** yves joined
[19:54] *** irc.freenode.net sets mode: +oo Juerd frettled

[19:54] *** Matt-W joined
[19:54] *** lambdabot joined
[19:54] *** justatheory joined
[19:54] *** larsen joined
[19:54] *** s1n joined
[19:54] *** ssm joined
[19:54] *** akl joined
[19:54] *** frodwith joined
[19:54] *** c9s joined
[19:54] *** Maddingue joined
[19:54] *** patmat_ joined
[19:54] *** PerlJam joined
[19:54] *** athomason joined
[19:54] *** JarJarBinks joined
[19:54] *** nothingmuch joined
[19:54] *** irc.freenode.net sets mode: +o Matt-W

[19:56] *** |Jedai| joined
[19:56] *** Hale-Bopp joined
[19:56] *** buu joined
[19:56] *** BooK joined
[19:56] *** psychoschlumpf joined
[19:56] *** betterwosld joined
[19:56] *** krakan joined
[19:56] *** cj joined
[19:56] *** pioto joined
[19:56] *** diakopter joined
[19:56] *** hatseflats joined
[19:56] *** chipdude joined
[19:56] *** pmichaud joined
[19:56] *** pdcawley joined
[19:56] *** orafu joined
[19:56] *** [particle] joined
[19:56] *** avar joined
[19:56] *** ezra joined
[19:56] *** pugs_svn joined
[19:56] *** simcop2387 joined
[19:56] *** phenny joined
[19:56] *** sbp joined
[19:56] *** irc.freenode.net sets mode: +ov pmichaud pugs_svn

[19:56] *** araujo joined
[19:56] *** kborer_ joined
[19:56] *** wknight8111 joined
[19:56] *** rbaumer joined
[19:56] *** sri_kraih joined
[19:56] *** kborer joined
[19:56] *** cotto joined
[19:56] *** cmv joined
[19:56] *** frew__ joined
[19:56] *** sharada joined
[19:56] *** hanekomu joined
[19:56] *** shachaf joined
[19:56] *** szabgab joined
[19:56] *** RonOreck_ joined
[19:56] *** hugme joined
[19:56] *** jrtayloriv joined
[19:56] *** tylerni7 joined
[19:56] *** r0bby joined
[19:56] *** dalek joined
[19:56] *** jrockway joined
[19:56] *** buubot joined
[19:56] *** cls_bsd joined
[19:56] *** moritz_ joined
[19:56] *** ilbot2 joined
[19:56] *** c1sung joined
[19:56] *** sjohnson joined
[19:56] *** allbery_b joined
[19:56] *** irc.freenode.net sets mode: +ooo araujo moritz_ sjohnson

[19:57] *** kborer left
[19:57] *** azawawi joined
[19:57] *** rhr joined
[20:01] *** PhatEddy joined
[20:01] *** kidd joined
[20:01] *** finanalyst joined
[20:01] *** Grrrr joined
[20:01] *** Tene joined
[20:01] *** jan_ joined
[20:01] *** lisppaste3 joined
[20:01] *** jjore joined
[20:02] *** r0bby left
[20:02] *** mberends joined
[20:02] *** nbrown joined
[20:02] <PhatEddy> buubot: print "test\n"

[20:02] <buubot> PhatEddy: Couldn't match input.

[20:03] <sharada> buubot: print "Couldn't match input."

[20:03] <buubot> sharada: Couldn't match input.

[20:03] *** Woody2143 left
[20:03] *** mtve left
[20:03] <moritz_> sharada++

[20:04] *** tak11 left
[20:04] *** M_o_C joined
[20:05] *** Woody2143 joined
[20:05] *** mtve joined
[20:05] *** mberends left
[20:05] *** synth left
[20:05] *** christine left
[20:05] *** mikehh left
[20:05] *** rjh left
[20:05] *** baest left
[20:05] *** rafl left
[20:05] *** Infinoid left
[20:05] *** solarion left
[20:05] *** dmpk2k left
[20:05] *** gfldex left
[20:05] *** mj41 left
[20:05] *** elmex left
[20:06] *** mtve left
[20:06] *** Woody2143 left
[20:06] *** jaldhar left
[20:06] *** REPLeffect left
[20:07] <azawawi> moritz_: win32's \ in paths confuses mingw32-make when building rakudo with perl Configure.pl --gen-parrot --gen-parrot-prefix=c:\strawberry\six --parrot-config=c:\strawberry\six\bin\parrot_config.exe

[20:07] <azawawi> moritz_: it only works when you use / instead of \

[20:09] *** rhr_ left
[20:12] <azawawi> moritz_: the error is like http://gist.github.com/182542 when you use \ instead of / in paths

[20:13] <M_o_C> azawawi: I already reported that (http://rt.perl.org/rt3/Ticket/Display.html?id=68746)

[20:13] <moritz_> it would be nice if one of you windows users could come up with a patch

[20:13] <moritz_> I can't fix and test it because I have no windows

[20:14] <azawawi> i see...

[20:14] <azawawi> sure i'll give it a try tomorrow

[20:15] <dukeleto> moritz_: do i need to escape colons (:) in pge strings ?

[20:15] <azawawi> moritz_: i see that parrot has its LICENSE included but not rakudo in the final thing

[20:15] *** nbrown left
[20:15] *** Grrrr left
[20:15] *** finanalyst left
[20:15] *** PhatEddy left
[20:15] *** jan_ left
[20:15] *** jjore left
[20:15] *** kidd left
[20:15] *** lisppaste3 left
[20:15] *** Tene left
[20:15] *** lmc left
[20:15] <azawawi> moritz_: im going to include parrot/rakudo's CREDITS/LICENSE along with lib/Safe.pm and Test.pm

[20:16] <azawawi> moritz_: it worked! thanks :)

[20:16] <moritz_> dukeleto: you need to escape everything that's not alphanumeric or an underscore

[20:16] <dukeleto> moritz_: touché

[20:16] *** Woody2143 joined
[20:16] *** mtve joined
[20:16] <moritz_> dukeleto: but you can also quote it with '...' or "..."

[20:16] *** jaldhar joined
[20:16] *** silug joined
[20:16] *** REPLeffect joined
[20:17] *** lisppaste3 joined
[20:17] *** nbrown joined
[20:17] *** kidd joined
[20:17] *** finanalyst joined
[20:17] *** Grrrr joined
[20:17] *** Tene joined
[20:17] *** jan_ joined
[20:17] *** jjore joined
[20:17] *** iblechbot joined
[20:17] *** mberends joined
[20:17] *** synth joined
[20:17] *** christine joined
[20:17] *** japhb joined
[20:17] *** elmex joined
[20:17] *** solarion joined
[20:17] *** mikehh joined
[20:17] *** rjh joined
[20:17] *** baest joined
[20:17] *** gfldex joined
[20:17] *** rafl joined
[20:17] *** mj41 joined
[20:17] *** Infinoid joined
[20:17] *** dmpk2k joined
[20:17] *** Grrrr left
[20:17] *** finanalyst left
[20:17] *** nbrown left
[20:17] *** jan_ left
[20:17] *** jjore left
[20:17] *** kidd left
[20:17] *** Tene left
[20:17] *** lisppaste3 left
[20:17] *** Tene joined
[20:17] *** Grrrr joined
[20:17] *** kidd joined
[20:18] *** jjore joined
[20:18] <moritz_> (you could also have a named argument that decides if a matcher should be treated as a string or a regex, and in the former case just use index())

[20:18] *** finanalyst joined
[20:19] *** finanalyst left
[20:20] *** azawawi left
[20:22] <mberends> phenny, tell pmichaud tools/test_summary.pl now tracks 'plan *;' lines and reports them above the Synopsis subtotals. Currently there are two occurrences (S32-num/rat.t and S32-trig/trig.t) with 740 and 2187 tests in them. All discrepancies between tests planned and run _should_ be logged.

[20:22] <phenny> mberends: I'll pass that on when pmichaud is around.

[20:22] <phenny> mberends: 09:07Z <masak> tell mberends fixed, thanks. strange that the bug is not reproduced, though. I might have to to a full reinstall of those modules.

[20:22] <mberends> oh, good. saw that in backlog :)

[20:23] *** Helios joined
[20:23] <moritz_> mberends, pmichaud: I have local patches for test_summary.pl that count tests run by rakudo correctly, even if they have a 'plan *'

[20:24] <moritz_> it just takes ages to test them

[20:26] <mberends> ages have doubled recently. moritz_, we may have done very similar stuff.

[20:27] *** PhatEddy joined
[20:27] *** nbrown joined
[20:27] *** wknight8111 left
[20:29] <moritz_> mberends: http://paste.lisp.org/display/86722

[20:29] <PhatEddy> buubot: eval: print "test\n"

[20:29] <buubot> PhatEddy: test 1     

[20:34] *** PhatEddy left
[20:36] <mberends> moritz_, our two mods begin the same, then proceed differently, but my way was committed here: http://irclog.perlgeek.de/perl6/2009-09-02#i_1456692

[20:43] <moritz_> mberends: yes, I know that. But unless somebody actually commits these changes they don't correct any statistics

[20:43] <moritz_> mberends: and I don't think that statistics are good reason to make testing any harder than it needs to be

[20:43] *** lisppaste3 joined
[20:44] *** patspam joined
[20:44] <mberends> moritz_: I guess colomon++ preferred to stay with 'plan *' until the trig and num tests are closer to stable

[20:45] <moritz_> mberends: I prefer 'plan *' in a lot of cases. counting tests can be really painful

[20:45] <mberends> *nod

[20:46] *** tak11 joined
[20:54] *** kidd left
[20:55] *** rfordinal joined
[20:56] *** beggars left
[21:03] *** BinGOs left
[21:03] *** krunen left
[21:03] *** nihiliad left
[21:03] *** sparc left
[21:03] *** pjcj left
[21:03] *** ruz_ left
[21:03] *** rfordinal left
[21:03] *** dukeleto left
[21:03] *** timbunce left
[21:03] *** hcchien left
[21:03] *** charsbar left
[21:03] *** leedo left
[21:03] *** zaphar_ps left
[21:04] *** BinGOs joined
[21:04] *** krunen joined
[21:04] <pugs_svn> r28204 | moritz++ | [t/spec] comment a "plan" inside POD that was confusing some statistics 

[21:04] <moritz_> mberends: turns out my first patch was bogus - the 'plan tests => $numbers' are actually perl 5 left-overs in POD sections

[21:04] <mberends> oh, ok

[21:04] <moritz_> and one of them was report 16k tests :/

[21:04] *** jrtayloriv left
[21:04] *** rfordinal3643 joined
[21:04] *** patspam left
[21:04] <mberends> moritz_: well caught then!

[21:04] *** nihiliad joined
[21:04] *** sparc joined
[21:04] *** pnu joined
[21:04] *** clkao joined
[21:04] *** Lorn joined
[21:04] *** ruz_ joined
[21:04] *** pjcj joined
[21:05] <moritz_> it wasn't all that hard, when the number jumped from 17k to 33k - that makes a physicist suspicious ;-)

[21:06] *** leedo joined
[21:06] *** hcchien joined
[21:06] *** zaphar_ps joined
[21:08] *** xenoterracide joined
[21:11] *** nbrown_ joined
[21:11] <xenoterracide> how easy will it be to migrate a perl 5 app to perl6 (generally speaking)? and is there any kind of target date for a full spec implementation of perl6? 

[21:13] <moritz_> if all goes well, you can just leave the application in perl 5, and embed { use v6;  perl 6 code here } blocks 

[21:13] <moritz_> and migrate as gradually as you want

[21:13] <moritz_> and no, we don't have a fixed date

[21:14] *** vmbrasseur_ joined
[21:14] <xenoterracide> perl6 is supposed to suport perl5 too? or a parrot implemention of perl5 is supposed to be done at the same time? *confused*

[21:15] <moritz_> xenoterracide: there's a section about that in S01, see http://perlcabal.org/syn/S01.html

[21:19] *** jrtayloriv joined
[21:20] <dalek> rakudo: f01875f | moritz++ | tools/test_summary.pl:

[21:20] <dalek> rakudo: [test_summary.pl] if we run a test, use the "plan" information gathered from its output

[21:20] <dalek> rakudo: This should reduce the number of 'plan *' related mis-counts even further.

[21:20] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f01875fb6153419f186b167f6c9966bf5c215532

[21:21] <moritz_> the script now reports 20622 tests in the spectest suite, which seems like a realistic number to me

[21:21] *** rasbatan joined
[21:22] *** rasbatan left
[21:25] *** nbrown left
[21:27] *** kborer_ is now known as kborer

[21:27] *** synth left
[21:27] *** kidd joined
[21:28] <pmichaud>  agreed, 20622 sounds more correct

[21:28] <phenny> pmichaud: 20:22Z <mberends> tell pmichaud tools/test_summary.pl now tracks 'plan *;' lines and reports them above the Synopsis subtotals. Currently there are two occurrences (S32-num/rat.t and S32-trig/trig.t) with 740 and 2187 tests in them. All discrepancies between tests planned and run _should_ be logged.

[21:30] <moritz_> I just pushed another proposed release name to github - including an URL of a blog post that tells about a nice hackathon

[21:30] <moritz_> I think it's a good idea to include some sort of reasons

[21:31] *** nbrown_ left
[21:31] <pmichaud> moritz++  # beat me to it :-)

[21:31] <moritz_> so that prospective release managers can make a somewhat informed decision and can explain in the release note why they chose it

[21:31] *** nbrown joined
[21:32] <dalek> rakudo: 01ae3fa | moritz++ | docs/release_guide.pod:

[21:32] <dalek> rakudo: [docs] propose ThousandOaks as a release name, in recognition of their cool Perl 6 hackathon

[21:32] <dalek> rakudo: Also remove some trailing whitespaces

[21:32] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/01ae3fae981eed2ecd8a75c94a72c119340044cf

[21:33] <xenoterracide> http://rakudo.org/status < so when this page show's green all the way to the top? is the perl 6 spec 100% implemented (in rakudo)?

[21:34] <pmichaud> xenoterracide: no.

[21:34] <pmichaud> xenoterracide: we don't have tests for all of the perl 6 spec yet

[21:34] <mberends> xenoterracide: we still need to write a lot more tests...

[21:34] <xenoterracide> ah

[21:34] <pmichaud> xenoterracide: and the perl 6 spec isn't finished

[21:34] <xenoterracide> ok

[21:35] <moritz_> oh, and the grey bar is smaller than it should be, because we had problems compiling our data

[21:35] <pmichaud> I think I'll go back and re-run the last month or so with the new test_summary.pl

[21:35] <pmichaud> so we get something a bit more realistic

[21:35] <pmichaud> or I could just do it starting with tonight's run and leave it at that.

[21:37] <mberends> pmichaud: leave it, whoever picks that nit is the volunteer ;)

[21:37] <moritz_> I'm fine with either approach

[21:37] <pmichaud> well, I might be the one to pick that nit :-)

[21:37] <pmichaud> it's an easy background task for my notebook :)

[21:38] * mberends just added Windows 7 next to Ubuntu, to try out Strawberry Perl etc

[21:39] *** sevvie joined
[21:40] <xenoterracide> strawberry perl an alternative to ... what is it? active perl?

[21:41] <moritz_> aye

[21:41] <xenoterracide> hmm... first time hearing about it

[21:42] <moritz_> it's said to be a bit more friendly if you want to compile and install XS modules

[21:43] <M_o_C> Huh, seems like the test suite was undergoing some refractoring between august and september?

[21:43] *** nbrown left
[21:44] <mberends> xenoterracide: the main advantage seems to be built in CPAN support, and a C compiler toolchain. http://strawberryperl.com

[21:44] <xenoterracide> well unfortunately I hadn't heard of it when I had my perl class. and I generally choose not to use windows

[21:45] *** nbrown joined
[21:46] <moritz_> M_o_C: not all that much actually - just colomon adding tons of new trigonometry tests

[21:47] <M_o_C> I was just wondering about that rather big drop.

[21:54] *** iblechbot left
[21:55] *** nbrown left
[21:55] <moritz_> that was related to the way we declare the number of tests, and aggregate the statistics about it

[21:55] <moritz_> soon you'll see that number is actually quite a bit higher

[21:55] <moritz_> (larger then 20k tests)

[21:56] <moritz_> anyway, bed &

[21:56] <M_o_C> Ah, ok.

[21:56] <M_o_C> Cya

[21:56] *** nbrown joined
[22:04] <japhb> pmichaud, NQP request: Can you make it detect use of = instead of := and give a friendly error message?  I keep losing time trying to figure out what's wrong with some complicated statement only to find I just skipped the : .

[22:08] *** sevvie left
[22:10] *** sharada left
[22:12] *** pmurias left
[22:14] *** tjc joined
[22:14] *** Helios left
[22:14] *** Helios joined
[22:15] *** mikehh left
[22:20] <pmichaud> japhb: yes, I'd like to add that.

[22:20] <pmichaud> japhb: so will do.

[22:20] <japhb> pmichaud, thanks!

[22:20] *** ruoso joined
[22:23] *** icwiener left
[22:27] *** jql joined
[22:36] *** alester joined
[22:37] *** colomon joined
[22:40] *** KatrinaTheLamia left
[22:42] *** jan joined
[22:42] *** vmbrasseur_ is now known as vmbrasseur

[22:43] *** jan is now known as Guest93158

[22:45] *** M_o_C left
[22:50] *** mberends left
[22:57] *** alester left
[23:06] *** r0bby joined
[23:18] *** sm` left
[23:20] *** ihrd joined
[23:21] *** sm` joined
[23:28] *** zerhash joined
[23:28] <zerhash> hey TimToady

[23:29] <zerhash> id like to help with perl6

[23:30] <avar> zerhash: what are you interested in working on?

[23:32] *** alester joined
[23:32] <zerhash> something easyish

[23:32] <zerhash> i am new to this

[23:32] <zerhash> but i do have lots of time on my hands

[23:32] <zerhash> testing may be a good place to start

[23:36] *** sevvie joined
[23:37] <zerhash> ya so how do i go about this?

[23:39] <TimToady> first of all, you'll need a pugs commit bit

[23:39] <TimToady> since the tests are stored in the pugs repo

[23:40] <TimToady> if you msg me your email and preferred svn nick, I can send a commit bit

[23:40] <TimToady> use /msg if you don't want to reveal your email to the wide world

[23:40] *** kmaschine joined
[23:42] <TimToady> a pugs commit bit also gives you the ability to hack on specs, web infrastructure, etc.

[23:46] *** alester left
[23:47] *** kmaschine left
[23:48] *** Whiteknight joined
[23:49] *** synth joined
[23:57] *** tjc left
[23:59] <pugs_svn> r28205 | zerhash++ |  

[23:59] <TimToady> I see that

[23:59] <TimToady> welcome aboard

