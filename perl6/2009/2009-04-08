[00:01] *** jferrero left
[00:13] *** DemoFreak left
[00:19] <skids> Hrm, well, tried https, which would not ask for a password for checkout but would for commit, but it seems to not want to let me change the username to my commitbit username.

[00:23] <dalek> rakudo: a2728b4 | pmichaud++ | build/Makefile.in:

[00:23] <dalek> rakudo: Refactor Makefile testing again -- previous method caused too much rebuild.

[00:23] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a2728b421d65ab98790e57497c8502cbf4471cae

[00:29] *** bacek_ joined
[00:35] <diakopter> usually if you just hit enter at the password prompt, it will ask for another username

[00:35] <diakopter> for me.

[00:39] *** rhr_ joined
[00:43] * skids sighs in relief as the data he ripped off the bad hd.... mounts!

[00:43] <skids> OK back to fighting svn.

[00:52] <pugs_svn> r26118 | skids++ | Test commit (moritz++ for the bit)

[00:52] <skids> diakopter++

[00:55] *** nihiliad joined
[00:56] *** orafu left
[00:56] *** orafu joined
[01:08] *** davidad left
[01:08] *** justatheory joined
[01:10] *** rhr joined
[01:18] *** ewilhelm_ joined
[01:23] *** rhr_ left
[01:25] *** ewilhelm_ left
[01:26] <pugs_svn> r26119 | skids++ | S07 flesh out generic array iterator

[01:26] <pugs_svn> r26119 | skids++ | S07 typo fixes, TODOs

[01:26] <pugs_svn> r26119 | skids++ | S07 add Coroutine section

[01:26] <pugs_svn> r26119 | skids++ | S17 delete old Coroutine material, add reference to S07

[01:26] *** sitaram joined
[02:01] *** wknight8111 left
[02:01] *** payload1 left
[02:27] *** nbrown joined
[02:35] *** payload joined
[02:56] *** hercynium left
[03:12] *** alester joined
[03:13] *** justatheory left
[03:22] *** eternaleye joined
[03:55] *** nbrown left
[03:58] *** orafu left
[04:04] *** SamB left
[04:09] *** Tene_ joined
[04:09] *** FurnaceBoy left
[04:11] *** davidad joined
[04:21] *** Tene left
[04:29] *** mberends joined
[04:33] <mberends> @tell masak HTTP Daemon fixed, read DEPENDENCIES: perl6 must now be is your search path

[04:33] <lambdabot> Consider it noted.

[04:34] *** mberends left
[04:36] *** sephee joined
[04:37] *** orafu joined
[04:45] *** skids left
[04:47] *** masak joined
[04:47] <masak> salutations, gimel-camels.

[04:47] <lambdabot> masak: You have 1 new message. '/msg lambdabot @messages' to read it.

[04:47] <masak> @massage

[04:47] <lambdabot> mberends said 13m 38s ago: HTTP Daemon fixed, read DEPENDENCIES: perl6 must now be is your search path

[04:47] <masak> hokay.

[04:50] *** eternaleye_ joined
[04:59] *** justatheory joined
[05:08] *** xinming left
[05:08] *** xinming joined
[05:09] *** eternaleye left
[05:10] <masak> rakudo: class A { method foo returns Int {} }; class B is A { method foo returns Str {} }

[05:10] <p6eval> rakudo 4abd89:  ( no output )

[05:11] <masak> what are the rules with the above, overriding a method with another whose return type isn't the same or narrower?

[05:12] <masak> is there a construct similar to this which restricts that kind of overriding?

[05:14] *** frioux|home left
[05:21] <pugs_svn> r26120 | masak++ | [u4x/TODO] diffy iffy fiddly

[05:23] <Tene_> looks like 'returns' types aren't enforced in rakudo ATM.

[05:24] *** justatheory left
[05:24] <masak> right.

[05:25] <masak> specifically, it's still allowed to fall out of a sub or method with any old value.

[05:30] *** Tene_ is now known as Tene

[05:30] <dalek> rakudo: 241ae0d | (Stephen Weeks)++ | src/builtins/control.pir:

[05:30] <dalek> rakudo: [die]: Set exception severity and type in die()

[05:30] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/241ae0ddb7c925877e32e097ea7f892cfe708dea

[05:32] <masak> Tene: we talked about eval-in-current-scope once, a possible solution for a better Rakudo REPL.

[05:33] <Tene> I remember that.

[05:33] <masak> Tene: I've had a different idea since then, which might be worth considering.

[05:33] <Tene> oh?

[05:33] <masak> something like eval-in-the-following-scope.

[05:33] <masak> it might be a bit more general, and useful for other things.

[05:33] <Tene> Yeah, that's pretty much what I was going to do.

[05:33] <masak> :)

[05:34] <masak> I'm not sure how to say "the current scope" in Perl 6.

[05:34] <masak> maybe &?ROUTINE or something similar.

[05:34] *** Doubi left
[05:34] <masak> but the point is that it's probably better to have a dedicated scope for the REPL evaluations.

[05:35] <masak> but you already seem to have realized that. :)

[05:35] <masak> ...in which case I'm simply glad to have realized it too.

[05:44] <masak> @tell mberends 2009/04/08 07:43:40 socat[28921] E execvp("perl6", "perl6", "httpd", "--request", ...): No such file or directory

[05:44] <lambdabot> Consider it noted.

[05:45] <masak> mberends: it worked yesterday! your fixes must have broken 'make run'. :)

[05:45] *** DemoFreak joined
[05:51] <masak> @tell mberends please ignore previous rambling, I seem to suck at following orders. everything works now. :)

[05:51] <lambdabot> Consider it noted.

[06:09] *** japhb joined
[06:13] *** dukeleto joined
[06:16] <eiro> hello world 

[06:20] <masak> eiro: salut.

[06:21] *** eternaleye_ left
[06:22] <eiro> hey ... speaking french also ? 

[06:23] <masak> eiro: mais naturellement.

[06:23] <moritz_> ne pas tres bien :/

[06:23] <eiro> sans google translate ? 

[06:23] *** eternaleye joined
[06:24] <moritz_> a few years in school

[06:24] <eiro> wow! i tought that english speakers who speak french too are rare

[06:25] <moritz_> well, I'm German ;-)

[06:25] <masak> eiro: oui, mais ne tres rapidement. j'ai [forgot] le plupart.

[06:25] <eiro> (i understood it become a pb for english and american people: they only speak one langage and everyone else speak 2 or 3 one)

[06:25] <moritz_> (actually few = 11, but I have to admit that I forgot nearly everything, and didn't learn as much as you'd expect from 11 years in school)

[06:26] <masak> @mberends also, what sleep cycle are you on, sir? :P

[06:26] <lambdabot> Unknown command, try @list

[06:26] <eiro> s/forgot/oubliÃ© 

[06:26] <masak> @tell mberends also, what sleep cycle are you on, sir? :) 4:33?

[06:26] <lambdabot> Consider it noted.

[06:26] <eiro> moritz_, come to Elsass! you'll practice 

[06:27] <masak> learning Esperanto ruined my French, sad to say.

[06:27] <moritz_> eiro: we mostly use UTF-8 here, your IRC client seems to send somethiing else

[06:27] <masak> I could probably pick it up again, with some work.

[06:27] <moritz_> eiro: is that in ivitation? ;-)

[06:27] <moritz_> s/in/an/

[06:27] <eiro> it's a shame for me: i live at 5km of the germany and never pratice 

[06:28] *** alester left
[06:28] <eiro> moritz_, well: i never close my door to a gentle geek! everyone is welcome at home 

[06:28] <eiro> (i hosted a NY vim user last summer)

[06:29] <moritz_> eiro: I'll get back to you ;-)

[06:29] <eiro> moritz_, damned ... i have hard time to configure my client via IRC ... everything is set to utf-8 :(

[06:30] <eiro> moritz_, noticed :)

[06:30] <moritz_> eiro: I know that, it took me quite some time to get a decent setup working

[06:31] <eiro> masak, i prefer to learn dead langages as latin or ancient greek vs esperanto: it helps to lean other langages

[06:31] <moritz_> terminal at home, then the local on the remote host, then screen, then irssi... very annoying

[06:31] <masak> eiro: was the hosting-a-vim-user an example of extreme hospitability? would it be more generous to be hosting Emacs users, or less? :P

[06:31] <eiro> (ok: it will be useless for swedish :) )

[06:31] <masak> eiro: I've learnt a bit of Latin too.

[06:31] <masak> eiro: no, not really useless.

[06:31] <masak> the Vikings conquered England a while ago. that left some linguistic marks.

[06:32] <eiro> masak, swedish is not a latin language ? indo-eurepean one, perhaps ? 

[06:32] <masak> eiro: correct.

[06:32] <masak> but so are most languages around here.

[06:32] <eiro> ok

[06:33] <eiro> so ... i'll earn my salary now :)

[06:33] <pugs_svn> r26121 | moritz++ | [t/spec] more unfudges

[06:34] <masak> eiro: but in terms of "it helps to learn other languages" -- as one who has studied both Esperanto and Latin... well, both help you learn other languages, but Latin is hard. ;)

[06:35] *** masak left
[06:35] <eiro> masak, my wife is a high school teacher of latin and ancient greek 

[06:35] <eiro> (it helps)

[06:36] * eiro concider to speak in latin here :)

[06:36] <eiro> ( eiro is ancient greek word )

[06:38] <sitaram> oesday igpay atinlay ountcay? :)

[06:42] <eiro> sitaram sorry ? 

[06:43] * eiro rot13 your line ... it's clueless :)

[06:43] *** legis joined
[06:44] <sitaram> eiro: that was "pig latin", typically produced by taking the first letter, putting it at the end, and adding "ay".

[06:44] <sitaram> I said "does pig latin count"; joke fell flat :(

[06:44] <sitaram> http://en.wikipedia.org/wiki/Pig_latin

[06:47] *** masak joined
[06:48] <eiro> wow ... i have pbs with very classical one 

[06:48] <eiro> so don't be rude again with me :)

[06:48] <masak> rude? us? :)

[06:48] <eiro> masak, no: i replied to sitaram 

[06:49] <masak> I see.

[06:49] <sitaram> he meant me -- sorry wasn't intended to be rude; a play on "latin".  That's why I added the Wikipedia link

[06:49] <eiro> sitaram, thanks for the link: i'll give it to my wife 

[06:49] <sitaram> apologies

[06:49] <eiro> sitaram, it was juste a joke 

[06:49] <sitaram> ;)

[06:49] * sitaram wipes brow!

[06:50] <masak> I'm glad we got that cleared up.

[06:50] <eiro> in france, when we don't understand a word or a sentence, we roll our eyes on the guy and tell him to not be rude 

[06:50] <eiro> (just popular joke ... i imagine that every nation have some)

[06:50] * pmichaud rolls his eyes.  Another 7.

[06:51] <masak> sitaram: I've now backlogged your joke. it was OK, I guess. :P I wonder what the Pig Latin equivalent to Greek would be?

[06:51] <sitaram> aah -- we have something similar in India too, sometimes.  We say "why are you swearing at me" or eqvt...

[06:51] <moritz_> sitaram: a -> α, b -> β ...

[06:51] <moritz_> erm, I meant masak 

[06:51] <masak> moritz_: it's all Greek to me.

[06:52] <masak> moritz_: also, I like the dots there.

[06:52] <masak> they make it look so easy! :)

[06:52] <sitaram> (like mathematical induction)

[06:53] *** iblechbot joined
[06:53] <sitaram> prove it for 1 and 2 and say QED [ok I know I'm leaving out the critical step!]

[06:53] <moritz_> masak: would you prefer \ldots?

[06:53] <moritz_> or \dots

[06:53] <moritz_> ;-)

[06:54] <masak> moritz_: generally, yes.

[06:54] <pmichaud> rakudo:  say "\c[ellipsis]";   # just checking

[06:54] <p6eval> rakudo 4abd89: OUTPUT«perl6regex parse error: Unrecognized character name ellipsis at offset 8, found 'e'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10552 (compilers/pge/PGE/Perl6Regex.pir:1323)␤»

[06:54] <pmichaud> d'oh!

[06:54] <pmichaud> rakudo:  say "\c[horizontal ellipsis]";   # just checking

[06:55] <p6eval> rakudo 4abd89: OUTPUT«…␤»

[06:55] <moritz_> ․‥…oO( … )

[06:55] *** xinming_ joined
[06:55] <moritz_> rakudo: say "\c[vertical ellipsis]";

[06:55] *** mberends joined
[06:55] <p6eval> rakudo 4abd89: OUTPUT«⋮␤»

[06:56] <moritz_> 8454 passing tests; nice

[06:56] <mberends> bonjour, #perl6! J'ai lu que c'est un matin Francais aujourd'hui!

[06:56] <lambdabot> mberends: You have 3 new messages. '/msg lambdabot @messages' to read them.

[06:56] <mberends> @massages

[06:56] <lambdabot> masak said 1h 12m 5s ago: 2009/04/08 07:43:40 socat[28921] E execvp("perl6", "perl6", "httpd", "--request", ...): No such file or directory

[06:56] <lambdabot> masak said 1h 5m 17s ago: please ignore previous rambling, I seem to suck at following orders. everything works now. :)

[06:56] <lambdabot> masak said 30m 7s ago: also, what sleep cycle are you on, sir? :) 4:33?

[06:57] <masak> mberends: ...which means you've been asleep for at most 4.5 hours. :)

[06:57] <mberends> sleep, do people still do that?

[06:57] <masak> not that it's any of my business. just impressed.

[06:57] <masak> I thought I was the one with the funny sleep habits. :)

[06:58] <mberends> actually, I'm awake 5 hours, slept 5 hours before that ;)

[06:58] * mberends worries about Oslo timings

[07:02] <mberends> masak: after we conque^H^H^H^H^H^Hfinish our projects, we should re-implement time.

[07:03] <masak> mberends: I agree. I have a local git repo with some early timespace implementations.

[07:03] <masak> mberends: but they're in Perl 7.

[07:04] <mberends> P2TP6A?

[07:04] <masak> 哈哈

[07:05] <masak> "internal joke" meter is pushing against that little knob which keeps it from looping around.

[07:05] *** japhb left
[07:06] <masak> s/internal/inside/

[07:06] *** Doubi joined
[07:06] *** japhb joined
[07:07] <pmichaud> afk # sleep

[07:10] <TimToady> eiro: which meaning of εἴρω?  to tie, or to say?

[07:10] <moritz_> I thought tie() was gone? :-)

[07:12] *** xinming left
[07:18] *** Doubi left
[07:19] <Matt-W> Morning

[07:19] <masak> Matt-W: good morrow, sir.

[07:20] <Matt-W> Hi masak

[07:23] <eiro> TimToady, in fact my wife surnamed me 'eromai' ( 'i ask to myself' or 'i ironically ask' ) 

[07:24] <eiro> it became ero ... which has no sense

[07:24] <rgs> heauton eromoumenos ?

[07:24] <eiro> i added the i ... now it mean: to say 

[07:26] <eiro> rgs, i don't understood :-) (i actually don't speak greek: my wife does) and i begun to learn latin 

[07:26] <rgs> I don't guarantee this is good greek

[07:27] <rgs> that would be "the one who makes himself loquacious"

[07:28] <mberends> would that be 'grok greek' here ?

[07:28] <eiro> heauton : 'self' 

[07:28] <eiro> that's the only part i read :)

[07:29] <masak> all those /path/to/my/rakudo metasyntactic paths meant to be replaced -- I think we should standardize on /some/weird/place/rakudo. it stands out a bit more.

[07:29] <moritz_> search for define:loquacious with google and see how different the explanations are

[07:29] <moritz_> chatty: full of trivial conversation; "kept from her housework by gabby neighbors" 

[07:29] <moritz_> Fluency (also called volubility and loquaciousness) is the property of a person or of a system that delivers information quickly and with expertise.

[07:29] <moritz_> those don't sound equivalent, to me :-)

[07:31] <rgs> we're in a semantic field where IRC nicknames can be easily chosen

[07:33] <eiro> :-)

[07:33] <eiro> it's just the way my wife call me :-)

[07:34] *** orafu left
[07:34] *** orafu joined
[07:38] *** cai_ joined
[07:46] *** eternaleye_ joined
[07:51] <masak> rakudo: say 24.reverse

[07:51] <p6eval> rakudo 4abd89: OUTPUT«Parameter type check failed for $delimiter in call to split␤current instr.: 'die' pc 15932 (src/builtins/control.pir:204)␤»

[07:52] * moritz_ sense a bug

[07:53] <masak> I was just wondering if it was my having too high expectations again, or whether it's acutally a bug.

[07:53] <masak> s/ut/tu/

[07:54] * moritz_ wonders if 24.reverse should pick the List.reverse or the Str.reverse

[07:55] <masak> moritz_: it's a scalar. it should pick the Str.reverse, IMO.

[07:55] <moritz_> maybe Str.reverse should be named Str.mirror

[07:55] <masak> :)

[07:55] <masak> seems a bit arbritary. might as well have been List.mirror and Str.reverse, no?

[07:56] <moritz_> not quite

[07:56] <moritz_> for composed characters a "mirror" describes more accurately what happens to the string

[07:56] <moritz_> IMHO

[07:57] <moritz_> rakudo: say "A\c[combining accent accute]"

[07:57] <p6eval> rakudo 4abd89: OUTPUT«perl6regex parse error: Unrecognized character name combining accent accute at offset 9, found 'c'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10552 (compilers/pge/PGE/Perl6Regex.pir:1323)␤»

[07:57] <moritz_> rakudo: say "A\c[combining accent acute]"

[07:57] <masak> "bob".mirror -> "dod" :)

[07:57] <p6eval> rakudo 4abd89: OUTPUT«perl6regex parse error: Unrecognized character name combining accent acute at offset 9, found 'c'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10552 (compilers/pge/PGE/Perl6Regex.pir:1323)␤»

[07:57] <moritz_> rakudo: say "A\c[combining accent grave]"

[07:57] *** Kyosuke_Kiryu joined
[07:57] <p6eval> rakudo 4abd89: OUTPUT«perl6regex parse error: Unrecognized character name combining accent grave at offset 9, found 'c'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 10552 (compilers/pge/PGE/Perl6Regex.pir:1323)␤»

[07:58] <moritz_> rakudo: say "A\c[combining grave accent]"

[07:58] <p6eval> rakudo 4abd89: OUTPUT«A􏿽xCC􏿽x80􏿽xE2􏿽x90􏿽xA4»

[07:58] <moritz_> rakudo: say "A\c[combining grave accent]".reverse

[07:58] <p6eval> rakudo 4abd89: OUTPUT«̀A␤»

[07:58] * moritz_ has to run, bye

[07:59] *** Kyosuke_Kiryu is now known as Hell_Kaiser

[07:59] *** cai_ left
[07:59] *** Hell_Kaiser is now known as Avada

[08:00] *** Avada left
[08:00] *** eternaleye left
[08:00] *** Kyosuke_Kiryu joined
[08:03] *** jedai left
[08:06] *** riffraff joined
[08:08] *** Kyosuke_Kiryu left
[08:11] <masak> in the interests of release-early: http://github.com/masak/pun/

[08:13] *** jedai joined
[08:13] *** jferrero joined
[08:19] *** mikehh_ joined
[08:19] *** xinming_ is now known as xinming

[08:20] *** DemoFreak left
[08:23] <moritz_> back

[08:23] <moritz_> once again we've seen that rakudo works on the codepoint level by deffault, not on the grapheme level

[08:31] <masak> moritz_: you're saying that's a submittable rakudobug?

[08:32] <moritz_> masak: it's a known TODO, and I guess we even have a ticket for that

[08:32] <masak> oh, ok.

[08:34] <moritz_> I'll have a few hours of (constantly interrupted) hacking time now/today - anyone needs tests for a specific topic?

[08:34] *** mikehh left
[08:35] <masak> moritz_: perhaps IO.ins and IO.outs? it's the only thing that comes to mind right now.

[08:38] <moritz_> masak: thanks for the suggestion

[08:38] <masak> moritz_: I saw you add a few tests for the former.

[08:38] <moritz_> aye

[08:39] <masak> moritz_: would be nice to also test for reading in list context; I didn't see a test for that when skimming it.

[08:39] <masak> just a suggestion.

[08:39] <moritz_> ok

[08:39] <moritz_> I think I'll do typed arrays first, then come back to IO

[08:39] <masak> moritz_++

[08:44] <moritz_> rakudo: my Int @a = 3..4; @a.push(3); say @a.perl

[08:44] <p6eval> rakudo 4abd89: OUTPUT«No applicable methods.␤␤current instr.: 'parrot;P6metaclass;dispatch' pc 447 (src/classes/ClassHOW.pir:93)␤»

[08:44] <moritz_> tests++

[08:44] <moritz_> masak: I'l ticket it when I commit/push the test

[08:44] <masak> goodie.

[08:58] <pugs_svn> r26122 | moritz++ | [t/spec] add tests for typed arrays

[09:00] <pugs_svn> r26123 | moritz++ | [t/spec] why do I always forget these svn props when adding new files?

[09:00] *** explorer__ joined
[09:00] *** explorer__ left
[09:07] *** bacek_ left
[09:10] <pugs_svn> r26124 | moritz++ | [t/spec] basic tests for dispatch on typed arrays

[09:11] <moritz_> rakudo: my @a of Int; say @a.of

[09:11] <p6eval> rakudo 4abd89: OUTPUT«Object␤»

[09:11] <moritz_> rakudo: my Int @a ; say @a.of

[09:12] <p6eval> rakudo 4abd89: OUTPUT«Int␤»

[09:12] <masak> heh.

[09:16] <pugs_svn> r26125 | moritz++ | [t/spec] add (failing) tests for dispatch on typed hashes

[09:19] <masak> moritz_: can I submit the above two p6eval exchanges as a rakudobug? or is that one already in there?

[09:20] <moritz_> masak: I'm doing a few tickets now anyway, I'll take care

[09:24] <masak> hokay.

[09:26] *** sitaram left
[09:36] *** brunoV left
[09:40] *** ashizawa left
[09:41] *** kane_ joined
[10:09] *** agentzh left
[10:09] *** agentzh joined
[10:10] <masak> lunch &

[10:10] *** masak left
[10:13] *** orafu left
[10:13] *** orafu joined
[10:27] *** SamB joined
[10:33] <jnthn> hi all

[10:33] <jnthn> Ooh, new tests. Yay. :-)

[10:33] <jnthn> rakudo: my @a; @a.push(42); say @a.perl

[10:33] <p6eval> rakudo 4abd89: OUTPUT«[42]␤»

[10:33] <jnthn> rakudo: my Int @a; @a.push(42); say @a.perl

[10:33] <p6eval> rakudo 4abd89: OUTPUT«No applicable methods.␤␤current instr.: 'parrot;P6metaclass;dispatch' pc 447 (src/classes/ClassHOW.pir:93)␤»

[10:34] <jnthn> rakudo: my @a; sub foo(Array $x) { say "ok" }; foo(@a)

[10:34] <p6eval> rakudo 4abd89: OUTPUT«ok␤»

[10:34] <jnthn> rakudo: my Int @a; sub foo(Array $x) { say "ok" }; foo(@a)

[10:34] <p6eval> rakudo 4abd89: OUTPUT«ok␤»

[10:35] <jnthn> OK, we're just getting screwed over by Parrot's multiple dispatcher.

[10:48] <jnthn> rakudo: my Int @a; sub foo(List $x) { say "ok" }; foo(@a)

[10:48] <p6eval> rakudo 4abd89: OUTPUT«ok␤»

[10:54] <jnthn> aw arse, the Rakudo makefile is br0ked on Windows.

[10:55] *** payload1 joined
[10:55] <jnthn> makefilecheck: Makefile

[10:55] <jnthn> #	@$(PERL) -e 'die "Makefile is out of date... try re-running Configure.pl\n" if (-M "build\Makefile.in" < -M "Makefile");'

[10:55] <jnthn> Commenting out that line helps.

[10:55] *** payload left
[10:56] <jnthn> oh, probably use of single quotes doens't work on win3

[10:56] <jnthn> 2

[10:57] *** payload1 left
[11:01] *** kane_ left
[11:01] <jnthn> oh, and it was already fixed in latest...

[11:07] *** iblechbot left
[11:20] *** LylePerl joined
[11:20] <LylePerl> Hi All

[11:21] *** mberends left
[11:21] *** mberends joined
[11:22] *** payload joined
[11:27] *** masak joined
[11:32] <jnthn> S09-typed-arrays\arrays.t has invalid plan

[11:32] <jnthn> Will fix later, if nobody beats me to it...lunch now

[11:33] <jnthn> (btw currently with local fixes 22 out 29 pass)

[11:35] <LylePerl> I've figured the problem with getting november to run (at least one of them)

[11:35] <masak> nice.

[11:35] <LylePerl> it's failing at compile stage

[11:35] <masak> interesting.

[11:35] <masak> but not when you run from the command line?

[11:36] <LylePerl> It's not finding the modules

[11:36] <LylePerl> from the command line I've set perl6lib, but not globally

[11:36] <LylePerl> I'm trying to update INC from the script in a BEGIN block

[11:36] <LylePerl> push ( @INC, 'c:/htdocs/cgi-bin/lib' );

[11:36] <masak> that would indeed explain it.

[11:37] <LylePerl> but I get the error "Scope not found for PAST::Var '@INC'

[11:38] <jnthn> try @*INC

[11:38] <LylePerl> ok

[11:43] <masak> oh right!

[11:43] *** payload1 joined
[11:43] *** payload1 left
[11:43] <masak> sorry, was inattentive. was fixing the Mac OS X Security Update Perl 5 breakage that finally hit me.

[11:44] <LylePerl> bingo :)

[11:44] *** payload left
[11:45] <masak> mberends: http://irclog.perlgeek.de/perl6/2009-04-08#i_1047867 -- we should have one of those lines in our ideal Perl 6 project Makefile. :)

[11:55] <pugs_svn> r26126 | masak++ | corrected plan in t/spec/S09-typed-arrays/arrays.t

[11:57] *** ruoso joined
[11:57] <mberends> masak: excellent idea

[11:58] <masak> mberends: also, I'm thinking of putting together a table of Well-Thought-Out-Practices against Perl 6 projects.

[11:59] <masak> not sure whether it'd be feasible to do automatically, though.

[11:59] <mberends> sounds like a job for Don Knuth ;)

[11:59] <masak> ;)

[12:00] <mberends> create a stub, and let the community fill in the details

[12:01] <masak> mberends: well, that's one way to do it. in that case, we'd want it on a wiki.

[12:01] <masak> but I'm thinking maybe we can get away with Less Work.

[12:01] <masak> for example, proto can download all Perl 6 projects nowadays.

[12:01] <masak> ./proto install all

[12:02] <mberends> the little eeePC will groan under that one

[12:02] <masak> :)

[12:03] <pmichaud> good morning #perl6

[12:03] <masak> use with caution. 's all.

[12:03] <masak> pmichaud: oh hai

[12:03] <masak> so it'd be conceivable to create a module that used proto to dump all the projects in one directory, and then performed a series of automated tests on them.

[12:04] <mberends> good am, pm

[12:04] <mberends> masak: that would be gr8

[12:05] *** Tene_ joined
[12:05] <masak> mberends: I just have to remember to start simple.

[12:05] <masak> one project, one well-thought-out practice.

[12:05] <masak> and then expand from that.

[12:06] <jnthn> morning pm

[12:07] <masak> hm, Kwalitee uses a positive scale, I think. we could use penalty points instead and call it Penaltee. :P

[12:07] <jnthn> rakudo: multi foo($x) { }; foo()

[12:07] <p6eval> rakudo 4abd89: OUTPUT«No applicable candidates found to dispatch to for 'foo'␤current instr.: '_block14' pc 64 (EVAL_16:40)␤»

[12:08] <moritz_> jnthn: I've got some tickets for

[12:08] <jnthn> rakudo: class A { multi method foo() { } }; A.new.foo(42)

[12:08] <p6eval> rakudo 4abd89: OUTPUT«Could not locate a method 'foo' to invoke on class 'A'.␤current instr.: 'die' pc 15932 (src/builtins/control.pir:204)␤»

[12:08] <LylePerl> Still doesn't work on IIS

[12:08] <moritz_> rakudo: my @x of Int; say @x.of

[12:08] <p6eval> rakudo 4abd89: OUTPUT«Object␤»

[12:09] <moritz_> rakudo: my Int @x; say @x.of

[12:09] <p6eval> rakudo 4abd89: OUTPUT«Int␤»

[12:09] <LylePerl> Although not surprising considering hello world doesn't work

[12:09] <masak> LylePerl: :)

[12:09] <masak> LylePerl: I appreciate your efforts in this.

[12:09] <LylePerl> With november on IIS I'm getting a different error:-

[12:09] <jnthn> moritz_: OK, great. :_)

[12:09] <LylePerl> This application has requested the Runtime to terminate it in an unusual way.

[12:09] <LylePerl> src\io\api.c:233: failed assertion 'pmc'

[12:09] <masak> funny error.

[12:09] <jnthn> moritz_: There's still lots of bits to fix up yet.

[12:09] <LylePerl> encase anyone knows what that means?

[12:10] <masak> LylePerl: that last part sounded like a parrot.

[12:10] <jnthn> OK, Slovak class time. Back later.

[12:10] <moritz_> jnthn: I wrote some tests for you, t/spec/S09-typed-arrays/arrays.t

[12:10] <moritz_> have fun ;-)

[12:10] <masak> LylePerl: now we only need to isolate it.

[12:10] <LylePerl> masak: I'll update the november group with my last Vista instructions to get it working with apache

[12:10] <pmichaud> jnthn: both Tene++ and I had some difficulty grabbing annotations out of exceptions

[12:10] <jnthn> moritz_: Yes, I have 22 out of 29 of them passing now. But I broke a couple of others along the way... :-(

[12:10] <masak> LylePerl: excellent.

[12:10] <LylePerl> masak: That would make sense

[12:11] <jnthn> pmichaud: Odd. Did you look at the annotations tests for examples?

[12:11] <pmichaud> after your class... any clues you can provide would be helpful :-)

[12:11] <jnthn> Sure.

[12:11] <pmichaud> yes, did look at the tests

[12:11] <LylePerl> Looks like I'll have to learn parrot :)

[12:11] <jnthn> pmichaud: OK.

[12:11] <pmichaud> I'll put together a patch with what I had thus far

[12:11] <masak> LylePerl: me too. :)

[12:11] <jnthn> pmichaud: More failing Parrot tests that pinpoint the issue could also be nice, if you can reduce it to that.

[12:12] <jnthn> pmichaud: But don't worry if not.

[12:12] <jnthn> Anyway, idem studovat. :-)

[12:12] <masak> LylePerl: but the principle is the same as for any software bug: remove as many parts as you can to pinpoint the error.

[12:12] <mberends> masak: Good Practices: same idea. in doing Pod Parser v2, I'm trying to learn from previous mistakes. more tests, more correct structure up front. Possibly your Test::ix as well.

[12:13] <masak> mberends: wow, you're the first person to utter the name of that module. :)

[12:13] <moritz_> rakudo: multi f(Int %h) { say 'int' }; multi f(Str %h) { say 'str' }; my Int %h = a => 3; f(%h)

[12:13] <p6eval> rakudo 4abd89: OUTPUT«No applicable candidates found to dispatch to for 'f'␤current instr.: '_block14' pc 133 (EVAL_17:53)␤»

[12:13] <masak> mberends: it sends a wink of appreciation to you.

[12:13] <pmichaud> (but otherwise, annotations appear to be available now -- see src/gen_actions.pir   and Test.pir in Rakudo for examples :-)

[12:14] <moritz_> pmichaud: great

[12:14] <mberends> ok, i'll use it ;)

[12:14] <masak> mberends: I haven't blogged about Test::Ix, but I suppose you've discovered the script that goes with it?

[12:14] <masak> in the bin/ dir of Druid.

[12:15] <LylePerl> masak: That's difficult with the simple hello world script

[12:16] <masak> LylePerl: why?

[12:16] *** Tene left
[12:16] <LylePerl> masak: because it's as bare bones as it can be

[12:16] <masak> LylePerl: well, yes and no.

[12:16] <LylePerl> masak: I'm guessing IIS invokes processes slightly differently

[12:16] <masak> LylePerl: is it in Perl 6?

[12:17] <LylePerl> masak: yes

[12:17] <masak> LylePerl: in that case, the level below would be PIR.

[12:17] <LylePerl> masak: I see :/

[12:17] <masak> if you can produce the error in pure PIR, the Parrot people will be able to help you better.

[12:17] <LylePerl> sounds like a plan

[12:17] <LylePerl> thanks for your help

[12:17] <masak> LylePerl: Rakudo can output to PIR instead of running a script, if you ask it to.

[12:18] <masak> perl6 --target=PIR file

[12:18] <pmichaud> afk, shuttling kids to school.

[12:19] <LylePerl> I'd better get back to work. Thanks for your help. I'll let you know how I get on with parrot and PIR

[12:19] <LylePerl> bye everyone

[12:20] <masak> LylePerl: thanks! see you.

[12:21] *** kane_ joined
[12:25] *** iblechbot joined
[12:26] *** exodist joined
[12:38] *** orafu left
[12:41] *** PhatEddy joined
[12:47] <masak> time to go study Chinese.

[12:47] *** masak left
[12:53] *** schinkelm joined
[12:53] *** schinkelm left
[12:54] *** schinkelm joined
[12:58] <dalek> rakudo: c76c692 | pmichaud++ | docs/spectest-progress.csv:

[12:58] <dalek> rakudo: spectest-progress.csv update: 349 files, 8444 passing, 0 failing

[12:58] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c76c692e9d97c3b88f955631fdc61d5db87a71e8

[12:59] <moritz_> that's a nice number, again ;-)

[13:01] *** rodi joined
[13:01] *** iblechbot left
[13:06] *** jferrero left
[13:20] *** ejs joined
[13:24] *** ashizawa joined
[13:29] *** ashizawa left
[13:33] *** ashizawa joined
[13:34] <Tene_> jnthn: check your messages in #parrot... I left you a nopaste demonstrating the issue.

[13:35] *** amoc joined
[13:40] *** payload joined
[13:41] *** skids joined
[13:48] *** Guest59237 left
[13:48] *** clintongormley joined
[13:51] *** ashizawa left
[13:53] *** ashizawa joined
[13:57] *** ashizawa left
[13:57] *** ashizawa joined
[13:58] *** ashizawa left
[13:58] *** ashizawa joined
[14:02] <jnthn> oh hai I'm back

[14:02] *** ashizawa left
[14:03] <jnthn> rakudo: my Int %h; say %h.of;

[14:03] <p6eval> rakudo 4abd89: OUTPUT«Int␤»

[14:03] <jnthn> rakudo: my Int %h = a => 42; say %h.of;

[14:03] <p6eval> rakudo 4abd89: OUTPUT«Object␤»

[14:03] *** ashizawa joined
[14:03] <jnthn> Ugh, yes.

[14:03] <moritz_> didn't you have the exact same problem for Str?

[14:03] *** ashizawa left
[14:03] <moritz_> rakudo: my Int &f = Int sub { 3 }; say &f.of

[14:03] <jnthn> moritz_: For Array, I guess you mean.

[14:04] <p6eval> rakudo 4abd89: OUTPUT«Statement not terminated properly at line 1, near "sub { 3 };"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[14:04] <moritz_> erm, yes

[14:04] <jnthn> moritz_: Yeah, it's gonna be the same kinda thing.

[14:04] <jnthn> moritz_: I'll get arrays all sorted out first, I think. Then look at hashes.

[14:04] <moritz_> rakudo: my Int &f; our Int sub a() { 3 };  &f = &a; say &f.of;

[14:04] <p6eval> rakudo 4abd89: OUTPUT«Object␤»

[14:05] <skids> jnthn++

[14:05] <PerlJam> Those aren't different manifestations of the same problem?

[14:05] <moritz_> rakudo: my Int &f; say &f.of; our Int sub a() { 3 };  &f = &a; say &f.of;

[14:05] <p6eval> rakudo 4abd89: OUTPUT«Int␤Object␤»

[14:05] * skids thrilled to see progress in that region

[14:05] <Tene_> jnthn: you see my messages in #parrot?

[14:05] <moritz_> jnthn: sure, do as you wish, my job is  just to make sure you're aware of them, and provide the tests ;-)

[14:06] *** araujo left
[14:06] <PerlJam> moritz++

[14:06] <jnthn> Tene_: Not yet...will look into it tomorrow probably.

[14:06] <jnthn> Tene_: Trying to get the typed array stuff sorted out today...

[14:06] <PerlJam> jnthn++ too :)

[14:06] <moritz_> indeed

[14:07] <jnthn> Ooh, that sub one is...interesting.

[14:07] *** ashizawa joined
[14:07] <jnthn> Ah, I didn't yet handle the our Int sub syntax

[14:07] <jnthn> our sub a() returns Int { ... } should do it.

[14:07] <jnthn> (Once the semantics are right, getting the alternative syntaxes supported should be the easy part though.)

[14:08] <jnthn> Anyway, *very* happy to see lots of tests getting written for it. :-)

[14:08] <moritz_> rakudo: my Int &f; ou sub a() returns Int { 1 }; say &f.of; &f = &a; say &a.of

[14:08] <p6eval> rakudo 4abd89: OUTPUT«Could not find non-existent sub ou␤current instr.: '_block14' pc 94 (EVAL_19:48)␤»

[14:08] <skids> jnthn: whenever you get to native types/S09 and packing, see http://www.perlfoundation.org/perl6/index.cgi?perl6_tasks for some corner cases.  I realize that may be a ways away.

[14:09] *** ashizawa left
[14:09] *** ashizawa joined
[14:09] <jnthn> skids: Nice. :-)

[14:09] <jnthn> Yes, a little while away.

[14:10] <jnthn> Maybe in a couple of months I get to look at those.

[14:11] * jnthn needs to do some non-Rakudo stuff for a little bit.

[14:18] <pmichaud> jnthn: find_lex_left seems to me to be the same as find_lex ...?

[14:18] <pmichaud> er, find_lex_lift

[14:19] <jnthn> pmichaud: Look *carefully*. ;-)

[14:19] <jnthn> pmichaud: It looks up the lexical from the point of view of the caller.

[14:19] <pmichaud> it does?

[14:19] <pmichaud> I don't see that.

[14:19] *** iblechbot joined
[14:20] <jnthn> oh hmm nor do I

[14:20] <jnthn> OH!!

[14:20] <jnthn> lift is an epicly confusing name for it

[14:20] <jnthn> We should rename that op. :-)

[14:20] <jnthn> Anyway, what it does is a find_lex starting in the *outer* scope.

[14:20] <pmichaud> ...but what does it do, exactly, that is different from find_lex ?

[14:20] <jnthn> Not the current one.

[14:21] <pmichaud> ah.

[14:21] <jnthn> It's for lexical multis to find their outer multi.

[14:21] <pmichaud> do we need an op for that?  Seems like it could be done with getinterp

[14:21] <pmichaud> in fact, we already have a sub for that.

[14:22] <jnthn> Yes, but it was an easy op to write and lexical multis are kinda common. ;-)

[14:22] <jnthn> So I sorta didn't want it to have much overhead.

[14:22] <jnthn> phone

[14:23] <jnthn> ah, phone fail

[14:23] <pmichaud> in general I think we need better lexical ops.

[14:26] *** minazo joined
[14:27] <jnthn> Quite possibly.

[14:27] <jnthn> Remember that imports are lexical by default.

[14:27] <pmichaud> I never forget that.

[14:27] <pmichaud> it scares me :-)

[14:28] <jnthn> It isn't completely unrelated that I started working on lexical multis shortly after I did the first package-based cut of importing. ;-)

[14:29] <jnthn> But we really need to solve the class hides lexicals issue before we switch over to importing to the lexpad.

[14:29] <jnthn> Plus work out a few more details.

[14:33] *** rodi left
[14:34] *** schinkelm left
[14:41] *** jeremiah_ left
[14:46] <moritz_> rakudo: my Int @a; say @a.of === Int

[14:46] <p6eval> rakudo 4abd89: OUTPUT«1␤»

[14:47] <jnthn> ooh a right answer! ;-)

[14:48] <moritz_> ;-)

[14:48] <moritz_> is there any syntax supported yet for typed arrays of arrays?

[14:49] <moritz_> is something like my @x of Array of Int

[14:49] <moritz_> or my Array of Int @x

[14:49] <moritz_> or so

[14:50] *** nihiliad left
[14:51] <Matt-W> moritz_: I'm sure I saw something about it in one of the synopses, so there is a syntax...

[14:51] <moritz_> Matt-W: I know the syntax, just not if it's supported

[14:51] <moritz_> rakudo: my Array of Int @a; say @a.of;

[14:51] <p6eval> rakudo 4abd89: OUTPUT«Use of protoobject as value␤Failure␤»

[14:51] <moritz_> rakudo: my Array of Int @a; say @a.of === Array[Int];

[14:51] <p6eval> rakudo 4abd89: OUTPUT«Use of protoobject as value␤Use of protoobject as value␤0␤»

[14:52] <moritz_> rakudo: my Array of Int @a; say "alive"

[14:52] <p6eval> rakudo 4abdx9: OUTPUT«Use of protoobject as value␤alive␤»

[14:52] <pmichaud> afk # fetching kid lunches

[14:52] <moritz_> it seems to be mis-parsed, otherwise there'd be no warning

[14:52] <jnthn> rakudo: my Array @a; say "alive"

[14:52] <p6eval> rakudo 4abd89: OUTPUT«alive␤»

[14:52] <jnthn> rakudo: my Array[Int] @a; say "alive"

[14:52] <p6eval> rakudo 4abd89: OUTPUT«Malformed declaration at line 1, near "Array[Int]"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[14:53] <jnthn> std: my Array[Int] @a

[14:53] <p6eval> std 26126: OUTPUT«ok 00:02 35m␤»

[14:53] *** minazo left
[14:53] <jnthn> rakudo: role Foo[::T] { }; my Foo of Int $x;

[14:53] <p6eval> rakudo 4abd89: OUTPUT«get_bool() not implemented in class 'Role'␤current instr.: 'parrot;PCT;HLLCompiler;command_line' pc 1516 (src/PCT/HLLCompiler.pir:801)␤»

[14:54] <jnthn> rakudo: role Foo[::T] { }; my Foo of Int $x; say "alive"

[14:54] <p6eval> rakudo 4abd89: OUTPUT«alive␤»

[14:54] <jnthn> Wonder hwat's specialny about Array...

[14:55] <jnthn> Ooh!!

[14:55] <jnthn> Array is not a parametric role yet.

[14:56] <jnthn> rakudo: my Positional of Int @x;

[14:56] <p6eval> rakudo 4abd89:  ( no output )

[14:56] <jnthn> rakudo: my Positional of Int @x; say "alive"

[14:56] <p6eval> rakudo 4abd89: OUTPUT«alive␤»

[14:56] *** meteorjay joined
[14:56] <moritz_> rakudo: my Positional of Int @x; say @x.of === Positional[Int]

[14:56] <p6eval> rakudo 4abd89: OUTPUT«1␤»

[14:56] *** meppl joined
[14:56] <moritz_> rakudo: my Positional of Int @x = [2, 3], [4, 5]; say @x.of === Positional[Int]

[14:56] <p6eval> rakudo 4abd89: OUTPUT«1␤»

[14:56] <moritz_> jnthn++

[14:59] <pugs_svn> r26127 | moritz++ | [t/spec] tests for 'my Int @x; @x.of'; tests for typed nested arrays

[14:59] *** FurnaceBoy joined
[14:59] <jnthn> moritz_: Also note

[15:00] <jnthn> rakudo: sub foo returns Int { }; say &foo.of

[15:00] <p6eval> rakudo 4abd89: OUTPUT«Int␤»

[15:00] <jnthn> Maybe good to have tests for that one too. :-)

[15:00] <jnthn> rakudo: sub foo returns Int { }; say &foo.returns # too

[15:00] <moritz_> maybe ;-)

[15:00] <p6eval> rakudo 4abd89: OUTPUT«Int␤»

[15:00] *** mberends left
[15:01] <moritz_> jnthn: is .of specced?

[15:01] *** eternaleye_ left
[15:02] *** brunov joined
[15:03] *** jan_ joined
[15:05] <moritz_> rakudo: sub foo returns Int ($x) { return $x }; say foo(3); say foo('s')

[15:05] <p6eval> rakudo 4abd89: OUTPUT«3␤Type check failed on return value␤current instr.: 'die' pc 15932 (src/builtins/control.pir:204)␤»

[15:06] * skids wonders if .Str ever got specced as well

[15:06] <moritz_> skids: it is

[15:07] <moritz_> both on match objects, and in general for conversion to Str

[15:07] <moritz_> I think there's a section in S13 stating that rather explicitly

[15:07] *** sitaram joined
[15:07] *** sitaram left
[15:08] *** sitaram joined
[15:08] <jnthn> moritz_: If it's not, it probably should be. ;-)

[15:08] <pugs_svn> r26128 | moritz++ | tests for return types

[15:08] <jnthn> moritz_: I think it falls naturally out of the fact the trait has that name though.

[15:08] * skids wonders if he ever even read S13 before

[15:09] <moritz_> jnthn: ah right, it's a trait, and traits are... what? methods?

[15:13] *** plash joined
[15:14] *** Tene_ left
[15:14] <jnthn> Well, they can introduce a property (read: attr and method)

[15:14] <jnthn> Though it's convention rather than anything else.

[15:14] <jnthn> In this case it's more like a

[15:15] <jnthn> rakudo: role Foo[::T] { method of { return T } }; my $x = 42 but Foo[Str]; $x.of.say

[15:15] <p6eval> rakudo 4abd89: OUTPUT«Str␤»

[15:15] <jnthn> (to give a pointless example... ;-))

[15:16] <jnthn> But it's really up to a role to provide the of

[15:16] <jnthn> Or whatever methods - if any - that it wants.

[15:19] *** Tene joined
[15:20] <dalek> rakudo: 7a22e0d | (Moritz Lenz)++ | t/spectest.data:

[15:20] <dalek> rakudo: we pass the new S06-signature/types.t

[15:20] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7a22e0d72f8ea70e0692d2828e6cf0a7c242fa63

[15:23] *** payload left
[15:25] *** hercynium joined
[15:27] <moritz_> rakudo: say 788 / 60

[15:27] <p6eval> rakudo 4abd89: OUTPUT«13.1333333333333␤»

[15:30] *** nihiliad joined
[15:39] *** riffraff left
[15:48] *** plash left
[15:52] *** hercynium_ joined
[15:52] *** hercynium left
[15:52] *** hercynium_ left
[15:52] <Matt-W> woohoo

[15:52] <Matt-W> Some time to work on Form!!

[15:52] * Matt-W updates Rakudo...

[15:52] *** khisanth_ joined
[15:53] *** Khisanth left
[15:55] *** khisanth_ is now known as Khisanth

[15:55] *** Psyche^ joined
[15:57] *** ejs left
[16:03] * jnthn might just have found the source of his failing tests

[16:03] <jnthn> > say &pop.candidates[0].arity

[16:03] <jnthn> 60248

[16:03] <lambdabot>   Not in scope: `say'    precedence parsing error

[16:03] <lambdabot>          cannot mix `(&)' [...

[16:03] <Matt-W> that's not good

[16:03] <jnthn> No!

[16:03] <Matt-W> I doubt even you could come up with a function with 60,248 arguments

[16:03] <moritz_> ... unless it's a generated one

[16:03] *** frew|work left
[16:04] *** frew|work joined
[16:04] <jnthn> rakudo: eval('sub foo(' ~ join(',', '$' xx 60248) ~ ') { }')

[16:04] <Matt-W> moritz_: even then... especially anything called 'pop'

[16:04] <p6eval> rakudo 4abd89:  ( no output )

[16:04] <jnthn> Please say that didn't actually really compile...

[16:05] <jnthn> rakudo: eval('sub foo(' ~ join(',', '$' xx 60248) ~ ') { }'); say &foo.arity

[16:05] <p6eval> rakudo 4abd89:  ( no output )

[16:05] <jnthn> No.

[16:05] <jnthn> :-)

[16:06] <Matt-W> interesting

[16:07] <Matt-W> Form's failing tests with latest rakudo

[16:07] <moritz_> Matt-W: did you declare any parameters like sub foo(Array @a) ?

[16:07] <moritz_> if so, I know why it's failing ;-)

[16:07] *** justatheory joined
[16:08] <Matt-W> 'type check failed on return value'

[16:08] <moritz_> that's pretty new as well

[16:09] <moritz_> btw my local rakudo tries to execute the eval above at least three minutes now

[16:09] <Matt-W> so I assume that rakudo actually checking declared return types is new?

[16:10] <moritz_> yes

[16:10] <Matt-W> right

[16:10] <jnthn> Matt-W: Yes, it hadn't used to check them before.

[16:10] <Matt-W> so I need to check if I'm declaring it right, and if I am, why it's failing

[16:10] <moritz_> (but only for explicit return; implicit return is still unchecked)

[16:11] *** Patterner left
[16:11] *** Psyche^ is now known as Patterner

[16:13] <Matt-W> What is the proper way to specify a method's return type?

[16:14] <moritz_> rakudo: class A { method foo returns Int ($x) { return $x } }; A.foo('bar')

[16:14] <p6eval> rakudo 4abd89: OUTPUT«Type check failed on return value␤current instr.: 'die' pc 15932 (src/builtins/control.pir:204)␤»

[16:14] <TimToady> moritz_: I'd actually been thinking of .flip for string reverse.  to me .mirror would reverse the bidi chars to their opposites

[16:14] <moritz_> TimToady: yes, that's better (and shorter ;-)

[16:14] <Matt-W> moritz_: so I'm doing that right then. Hmm.

[16:14] <TimToady> rakudo: class A { method foo ($x --> Int) { return $x } }; A.foo('bar')

[16:15] <p6eval> rakudo 4abd89: OUTPUT«Unable to parse multisig; couldn't find final ')' at line 1, near "--> Int) {"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[16:16] <Matt-W> TimToady: something I'm supposed to use later, after rakudo understands it?

[16:17] <jnthn> At the moment the only syntax Rakudo really understands is the of Int or returns Int.

[16:18] <Matt-W> is it valid to say "my Array of Str $foo"

[16:19] <jnthn> In Perl 6? Yes. In Rakudo? Not yet.

[16:19] <Matt-W> ah

[16:19] <Matt-W> that explains that

[16:19] *** hercynium joined
[16:19] <jnthn> my Positional of Str $foo might give you the checking you want though.

[16:19] <jnthn> (or will in the nearer future)

[16:19] <jnthn> But you might as well just say

[16:19] <jnthn> my Str @foo

[16:20] <Matt-W> yes that just occurred tome

[16:20] <jnthn> Which does (mostly) work.

[16:20] <Matt-W> too much C++

[16:20] <Matt-W> hmm got a null pmc

[16:20] <jnthn> rakudo: my Str @foo;

[16:20] <p6eval> rakudo 4abd89:  ( no output )

[16:20] <jnthn> rakudo: my Str @foo; say "alive"

[16:20] <p6eval> rakudo 4abd89: OUTPUT«alive␤»

[16:20] <jnthn> rakudo: my Str @foo; say "alive"; say @foo.of

[16:20] <p6eval> rakudo 4abd89: OUTPUT«alive␤Str␤»

[16:21] <jnthn> Matt-W: But things like .push, .pop etc are known broken.

[16:21] *** jbt joined
[16:21] <jnthn> I have a local patch, but I've got to get the "arity of sixty thousand" bug fixed first. ;-)

[16:21] <moritz_> btw I've compile and eval with 600 parameters, that worked

[16:22] <Matt-W> rakudo: sub a returns Array of Str { my Str @a = ('a', 'b'); return @a; }; a.perl.say;

[16:22] <p6eval> rakudo 4abd89: OUTPUT«Type check failed on return value␤current instr.: 'die' pc 15932 (src/builtins/control.pir:204)␤»

[16:23] <jnthn> Matt-W: Yes, Array isn't aprametric yet.

[16:23] <jnthn> It can't be until further refactors happen.

[16:23] <Matt-W> right

[16:23] <Matt-W> okay I'll drop the type constraint for the time being then

[16:23] <jnthn> rakudo: sub a returns Positional of Str { my Str @a = ('a', 'b'); return @a; }; a.perl.say

[16:23] <p6eval> rakudo 4abd89: OUTPUT«Type check failed on return value␤current instr.: 'die' pc 15932 (src/builtins/control.pir:204)␤»

[16:23] <jnthn> That one shoulda worked though. :-|

[16:24] <jnthn> rakudo: sub a returns Positional { my Str @a = ('a', 'b'); return @a; }; a.perl.say

[16:24] <p6eval> rakudo 4abd89: OUTPUT«["a", "b"]␤»

[16:24] <jnthn> rakudo: sub a returns Positional[Str] { my Str @a = ('a', 'b'); return @a; }; a.perl.say

[16:24] <p6eval> rakudo 4abd89: OUTPUT«Malformed routine definition at line 1, near "a returns "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[16:25] <jnthn> rakudo: sub a returns Positional of Str { }; say &a.of ~~ Positional[Str]

[16:25] <p6eval> rakudo 4abd89: OUTPUT«0␤»

[16:25] <jnthn> rakudo: sub a returns Positional of Str { }; say &a.of ~~ Positional

[16:25] <p6eval> rakudo 4abd89: OUTPUT«0␤»

[16:25] <jnthn> rakudo: sub a returns Positional of Str { }; say &a.of ~~ Str

[16:25] <p6eval> rakudo 4abd89: OUTPUT«1␤»

[16:25] <jnthn> oh!!

[16:25] <jnthn> rakudo: sub a returns (Positional of Str) { }; say &a.of ~~ Positional[Str]

[16:25] <p6eval> rakudo 4abd89: OUTPUT«Malformed routine definition at line 1, near "a returns "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[16:26] <jnthn> Matt-W: It's thinking that the of declaration there is another trait

[16:26] <jnthn> like a sub a of Str { }

[16:26] <Matt-W> ooh

[16:26] <jnthn> Rather than parsing it as a Positional of Str type.

[16:26] <jnthn> I think that might be because we're calling the wrong rule in the grammar though

[16:30] <pugs_svn> r26129 | lwall++ | [S32/Containers] join defaults to '' now; delete string reverse

[16:30] <pugs_svn> r26129 | lwall++ | [S32/Str] add string flip

[16:31] <jnthn> Ohh!

[16:31] * jnthn realizes his bug :-|

[16:34] <Matt-W> hurrah

[16:34] <Matt-W> did the realisation come with a fix?

[16:34] <TimToady> rakudo: <a b c>.join

[16:34] <p6eval> rakudo 4abd89:  ( no output )

[16:34] <jnthn> Matt-W: I know *how* to fix it.

[16:34] <TimToady> rakudo: <a b c>.join.say

[16:34] <p6eval> rakudo 4abd89: OUTPUT«a b c␤»

[16:34] <jnthn> Matt-W: Just a simple matter of coding now...

[16:34] <moritz_> so join is symmetric with [~] - nice

[16:34] <TimToady> rakudo: <a b c>.Str.say

[16:34] <p6eval> rakudo 4abd89: OUTPUT«a b c␤»

[16:34] <literal> hm, why does git print a bunch of "got <commit>" and "walk <commit>" lines when pulling rakudo? I've only seen this happen with a handful of repositories

[16:35] *** PZt left
[16:35] <PerlJam> literal: that's a question best left to #git  :)

[16:35] <moritz_> literal: and I've never seen it ;-)

[16:35] <literal> odd, happens everytime I pull

[16:35] <TimToady> yes, occurred to me that now we can say .Str we'd be better off default join to do what people expect it to :)

[16:35] <TimToady> *defaulting

[16:36] <TimToady> whenever I try to pull rakudo and remake, I get this:

[16:36] <TimToady> /home/larry/rakudo/parrot/parrot  perl6_s1.pbc --target=pir src/gen_setting.pm > src/gen_setting.pir

[16:36] <TimToady> Method '!make' not found for invocant of class 'Perl6;Grammar'

[16:36] <TimToady> current instr.: 'parrot;Perl6;Grammar;quote_literal' pc 118014 (src/parser/quote_expression.pir:477)

[16:36] <TimToady> that's with a make realclean and Configure.pl

[16:37] <Matt-W> strange. I did a pull, realclean, configure and make a little while ago and it worked fine.

[16:37] <TimToady> maybe it's finding an old parrot somehow

[16:37] <jnthn> TimToady: You may need a newer Parrot too? Or did you use --gen-parrot?

[16:38] <TimToady> on the Configure? that's probably it

[16:38] <jnthn> We're tracking Parrot quite closely at the moment.

[16:39] <moritz_> and when you re-built parrot, you need to 'make clean' in rakudo

[16:39] <jnthn> Unfortunately, I've just fixed a Parrot bug so I'm about to contribute to that too...

[16:40] <literal> ah, apparently you only get the got/walk noise when pulling via http

[16:40] <literal> "git:// does walking on the server. http:// does it on client"

[16:41] <moritz_> literal: I recommend against http://, because sometimes that didn't work for rakudo, with weird error messages

[16:45] *** Tene_ joined
[16:45] *** Tene left
[16:45] *** Tene_ is now known as Tene

[16:46] <jnthn> oh hmm

[16:47] <jnthn> Turns out that wasn't the bug I expected. Also, &pop() and pop() seem to dispatch to different things. wtf...

[16:50] *** sitaram left
[16:52] *** cdarroch joined
[16:53] *** buubot left
[16:53] *** buubot joined
[16:56] *** kane_ left
[16:56] <jnthn> Ohh!

[16:56] <jnthn> proto prefix:<pop> is equiv(prefix:<abs>) is subname('pop') { ... }

[16:57] *** DemoFreak joined
[16:57] <jnthn> rakudo: pop()

[16:57] <p6eval> rakudo 4abd89: OUTPUT«No applicable methods.␤␤current instr.: '_block14' pc 70 (EVAL_15:39)␤»

[17:01] *** PhatEddy left
[17:04] <pugs_svn> r26130 | lwall++ | .join now defaults to ''

[17:05] <TimToady> someone will need to fix rakudo's .join

[17:05] <moritz_> I'm working on it

[17:05] <TimToady> I patched the tests

[17:05] <moritz_> ah, good

[17:05] <moritz_> that'll be more work than deleting a single space ;-)

[17:06] <TimToady> interestingly, there wasn't a single spot in the test suite that used .join to add spaces, so I think changing the default is correct

[17:06] <moritz_> ./parrot/parrot perl6.pbc  -e 'say <a b c>.join'

[17:06] <moritz_> abc

[17:06] <moritz_> TimToady: if you commit, I'll do so too ;-)

[17:07] <TimToady> I already committed

[17:07] *** M_o_C joined
[17:07] <moritz_> ah

[17:07] <TimToady> see above

[17:07] <moritz_> right

[17:07] <TimToady> I shoulda said [t/*] or some such

[17:07] <moritz_> running the tests now

[17:14] <PerlJam> does split also default to '' (as join)?

[17:14] * pmichaud flips for flip.

[17:14] <TimToady> split doesn't default to anything

[17:15] <PerlJam> $str.split.join eq $str  # would be nice I think

[17:15] <diakopter> moritz_: the irclogs links to S32 don't work.. sorry I don't have any suggestions to fix it. :)

[17:16] <TimToady> it'll be bad enough that people expect split(' ') to work like p5

[17:16] <TimToady> if they write .split they'll expect the same thing half the time

[17:18] <PerlJam> that's probably true.  I know I use @foo = split;  all the time in perl5

[17:18] <PerlJam> it's only a small mental jump to expect @foo.split to do the same 

[17:19] <PerlJam> er, @foo = $str.split

[17:19] * PerlJam can't type *or* think

[17:19] <pmichaud> what is U+9FA6 ?!?

[17:20] <pmichaud> (yes, I know it's a unicode codepoint.  What unicode codepoint is it supposed to be?)

[17:20] <moritz_> diakopter: I know, and I'll fix it as soon as we have HTML rendered S32 links

[17:21] <dalek> rakudo: 582e78c | (Moritz Lenz)++ | src/builtins/any-list.pir:

[17:21] <dalek> rakudo: .join now defaults to empty separator

[17:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/582e78c78d66aad6f06c32f8d2417f18f88cd8a2

[17:23] <TimToady> pm it appears to be 1 off the end of the CJK region

[17:23] *** araujo joined
[17:23] <TimToady> so not a real character

[17:24] <pmichaud> in looking at http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[%3AGeneral_Category%3DOther_Letter%3A]

[17:24] <pmichaud> which (I think) displays all of the codepoints with the Lo property

[17:25] <pmichaud> it shows

[17:25] <pmichaud> U+4E00 ( 一 ) CJK UNIFIED IDEOGRAPH-4E00

[17:25] <pmichaud> …{20930}…U+9FC3 ( 鿃 ) CJK UNIFIED IDEOGRAPH-9FC3

[17:25] <TimToady> maybe they added some more that I don't know about

[17:25] <pmichaud> which (I think) means that 9fa6 has the Lo property

[17:25] <Matt-W> infix:<xx> isn't supposed to modify its left-hand argument is it?

[17:26] <PerlJam> pmichaud: http://unicode.org/cldr/utility/character.jsp?a=9FA6

[17:26] <jnthn> Matt-W: Don't believe so.

[17:26] <pmichaud> PerlJam: yes, I'm also presuming from that page that U+9FA6 should be a valid Letter.

[17:26] <TimToady> added in 4.1, it appears

[17:26] *** ejs joined
[17:26] <Matt-W> jnthn: didn't think so

[17:27] <pmichaud> infix:<XX> itself doesn't modify its left-hand argument, but it also doesn't clone it.

[17:27] <lucs> pmichaud: According to my copy of the Unicode Standard, version 2, U+9FA6 to U+9FFF are an unassigned block at the end of the CJK Unified Ideographs.

[17:30] <TimToady> 4.1

[17:30] <TimToady> so your version is about 2.1 versions out of date :)

[17:30] <lucs> Right :)

[17:30] <pmichaud> so, any suggestions for modifying the spectest?

[17:31] <pmichaud> should I pick 9fff ?

[17:31] <jnthn> moritz_: I gotta run do a bunch of deployment stuff for a client now, but latest commits get most of the S09 arrays.t passing.

[17:31] <TimToady> I don't know which spectest you're referring to

[17:32] <pmichaud> oh, sorry

[17:32] <pmichaud> t/spec/S05-mass/properties.t

[17:32] <jnthn> moritz_: 22 out of 29 it seems. Feel free to fudge and add to spectest.data.

[17:32] <pmichaud> jnthn++  # more passing spectests

[17:32] <jnthn> moritz_: Or I'll do it in a couple of hours when I get this other work done.

[17:32] <moritz_> jnthn: sure, will do

[17:32] *** dalek left
[17:32] <jnthn> Also, I wrote overlong commit messages and killed dalek. Again!

[17:32] <pmichaud> or I could pick u+9fc4, which is one off the end of the (5.1) cjk region

[17:32] *** dalek joined
[17:33] <jnthn> (Note for all who grab my latest commits: you need latest Parrot, since I just fixed the "oh hai you haz an arity of 60,000" bug.)

[17:33] *** pmurias joined
[17:33] <TimToady> any particular value seems fragile without versioning

[17:33] <pmichaud> jnthn: did you bump build/PARROT_REVISION ?

[17:33] <jnthn> pmichaud: I did.

[17:33] <moritz_> pmichaud: I have no particular opionion on that one, do as you wish

[17:33] <pmichaud> jnthn++

[17:34] <jnthn> pmichaud: But since the commit message that said so didn't appear here, thought I'd mention it.

[17:34] <pmichaud> jnthn: got it.

[17:35] <pmichaud> well, if any value is fragile, I think I'll go with 9fc4 for now, and put a note in the file

[17:36] <moritz_> at least it appeared on #parrot

[17:36] *** ejs left
[17:38] <PerlJam> how do I "make spectest" but not the whole thing?

[17:38] <pmichaud> how do you mean "not the whole thing"?

[17:39] <moritz_> PerlJam: make t/spec/path/to/file.t

[17:39] <PerlJam> I just want to run the spectests in one dir

[17:39] <pmichaud> if you want to do a subset of tests, create t/localtest.data   and then make that

[17:39] <pmichaud> for one dir,   make t/spec/dir/*.t

[17:39] <PerlJam> thanks

[17:39] <moritz_> grep ^S06 t/spectest.data > t/localtest.data; make localtest

[17:39] <pmichaud> (although note that this will run tests that aren't in spectest.data)

[17:39] <pmichaud> moritz++  # better answer

[17:41] <pugs_svn> r26131 | moritz++ | [t/spec] fix plan and typos in S06-typed-arrays/arrays.t; also fudged for

[17:41] <pugs_svn> r26131 | moritz++ | rakudo

[17:41] * Matt-W notes to self that you shouldn't confuse xx and x

[17:43] <dalek> rakudo: 8a2b924 | (Moritz Lenz)++ | t/spectest.data:

[17:43] <dalek> rakudo: we now pass S09-typed-arrays/arrays.t

[17:43] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8a2b92460be2fdda3c75472d3305a4398d3c2a20

[17:46] <TimToady> maybe r should reverse a string and rr reverse a list (mostly joking)

[17:52] <Matt-W> TimToady: Don't even THINK about it!

[17:53] <moritz_> ;-)

[17:53] <PerlJam> oh, and we should use .s to coerce to a string and .i to coerce to an integer too!

[17:54] <moritz_> I thought .i returned an imaginary number?

[17:54] <moritz_> oh wait, that's probably abolished

[17:54] * moritz_ is *so* yesterday

[17:54] <pugs_svn> r26132 | pmichaud++ | [t/spec]: Start refactoring S05-mass/properties.t into separate (smaller) files.

[17:54] <pugs_svn> r26132 | pmichaud++ | This should keep the tests shorter, and perhaps make them a little

[17:54] <pugs_svn> r26132 | pmichaud++ | easier to maintain.  The properties-general.t file handles general

[17:54] <pugs_svn> r26132 | pmichaud++ | category properties (as opposed to script and/or block properties

[17:54] <pugs_svn> r26132 | pmichaud++ | which will be broken out separately later).

[17:55] <moritz_> pmichaud: I'm switching Str.reverse to .flip at the moment (FYI)

[17:55] <pmichaud> moritz_++   # excellent

[17:55] <pmichaud> it shouldn't impact anything I'm working on.

[17:55] <pmichaud> (and vice-versa)

[17:56] <moritz_> rakudo: class Any is also { method a { $.Str } }; say 5.a.perl;

[17:56] <p6eval> rakudo 8a2b92: OUTPUT«"Int<0xb69ff0e8>"␤»

[17:56] <moritz_> that's... interesting

[17:57] <moritz_> I think  S05-mass/properties.t was a relict of Perl6::Rules or whatever that Damian-module was called

[17:58] *** cognominal left
[17:58] *** cognominal joined
[18:01] <pmichaud> sure.  I'm just updating it now.

[18:03] <moritz_> rakudo: 345.split(4).perl.say

[18:03] <p6eval> rakudo 8a2b92: OUTPUT«["3", "5"]␤»

[18:03] <moritz_> rakudo: "345".split(4).perl.say

[18:03] <p6eval> rakudo 8a2b92: OUTPUT«["3", "5"]␤»

[18:03] <moritz_> rakudo: 234.reverse

[18:03] <p6eval> rakudo 8a2b92: OUTPUT«Parameter type check failed for $delimiter in call to split␤current instr.: 'die' pc 16201 (src/builtins/control.pir:206)␤»

[18:04] <moritz_> I don't understand that

[18:04] <moritz_> there are two split multis

[18:04] <pmichaud> something isn't multi that should be 

[18:04] <pmichaud> or

[18:04] <pmichaud> it's dispatching to the wrong multi

[18:05] <moritz_> if there's no PIR split leaking in I suspect the latter

[18:05] <moritz_> both methods are multi

[18:05] <jnthn> Are they defined on the same class?

[18:05] <moritz_> jnthn: yes

[18:05] <moritz_> the sub form is not multi

[18:05] <moritz_> (I'll fix that)

[18:05] <pmichaud> oh, that's probably the problem.

[18:06] <pmichaud> or at least it might be a problem.

[18:06] <pmichaud> Parrot still has difficult keeping methods and subs distinct.

[18:06] <moritz_> but its delimiter has no type constraint (ie Any)

[18:06] <moritz_> ok, let me try that

[18:06] <jnthn> Also beware that if you call split(...) sub in a method and that class defines a method you'll end up calling the split method...

[18:06] <jnthn> Which is probably a bug.

[18:07] <pmichaud> (yes, that's the parrot bug I'm referring to)

[18:07] <jnthn> ok

[18:09] <Matt-W> if I declare a state variable inside a while block inside a sub, will it persist across sub calls or just loop repetitions?

[18:10] <jnthn> across the sub calls unless the sub is cloned, I think

[18:10] <PerlJam> Matt-W: should be sub calls 

[18:10] <Matt-W> thanks

[18:10] <PerlJam> Matt-W: it'll persist across loop repetitions too though  :)

[18:11] <jnthn> rakudo: sub foo($x) { while $x-- { state $y = 1; say $y++ } }; foo(3); foo(2);

[18:11] <p6eval> rakudo 8a2b92: OUTPUT«Cannot assign to readonly variable.␤current instr.: 'die' pc 16201 (src/builtins/control.pir:206)␤»

[18:11] <jnthn> rakudo: sub foo($x is copy) { while $x-- { state $y = 1; say $y++ } }; foo(3); foo(2);

[18:11] <p6eval> rakudo 8a2b92: OUTPUT«1␤2␤3␤4␤5␤»

[18:11] <moritz_> rakudo++ # being smarter than jnthn++ ;-)

[18:13] <jnthn> :-P

[18:14] <Matt-W> I guess I was kind of hoping it'd only attach to the nearest block

[18:14] <Matt-W> I'll just stick a my outside the loop

[18:15] <pmichaud> which is different from sticking your a outside the loop.  :-)

[18:17] <moritz_> what seemed like a fairly trivial change proves to be... interesting

[18:18] <pmichaud> That seems to happen a lot in Perl 6.  

[18:18] <PerlJam> rakudo: my ($,$)=1,2

[18:18] <p6eval> rakudo 8a2b92:  ( no output )

[18:18] <PerlJam> rakudo: constant ($,$) = 1,2

[18:18] <p6eval> rakudo 8a2b92:  ( no output )

[18:18] <PerlJam> rakudo: state ($,$) = 1,2

[18:18] <p6eval> rakudo 8a2b92: OUTPUT«Null PMC access in isa_pmc()␤current instr.: 'infix:=' pc 14683 (src/builtins/assign.pir:133)␤»

[18:19] <pugs_svn> r26133 | pmichaud++ | [t/spec]:  #?rakudo fudge some tests in properties-general.t .

[18:19] <PerlJam> rakudo: temp ($,$) = 1,2

[18:19] <p6eval> rakudo 8a2b92: OUTPUT«Statement not terminated properly at line 1, near "($,$) = 1,"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[18:19] <moritz_> pmichaud: actually the change for the default value of split was fairly trivial ;-)

[18:19] <PerlJam> looks like state and temp have a bug wrt anonymous scalars.

[18:21] <moritz_> temp is NYI

[18:21] <moritz_> and anonymous scalars in state? wtf?

[18:21] <PerlJam> oh, I though it was

[18:22] <PerlJam> moritz_: See S02:1796

[18:23] <PerlJam> Well, S02:1792 is the important sentence though

[18:23] <pmichaud> okay, time to grab lunch while waiting for a spectest run to finish.  bbl.

[18:23] <moritz_> and I thought Pelr 5 was obscure ;-)

[18:24] <moritz_> rakudo: say (reverse { a => 1, b => 1 }).perl

[18:24] <p6eval> rakudo 8a2b92: OUTPUT«{"1" => "b"}␤»

[18:25] <PerlJam> Hmm.  does "has" provide a declarative context?  If so,  what does  has $;   mean?

[18:25] <TimToady> I think maybe Hash.push should create sublists for dup keys

[18:26] <TimToady> it means an anonymous attribute, which is pretty useless I expect

[18:26] <PerlJam> I tend to want to outlaw useless constructs personally.

[18:26] <TimToady> you could even initialize it "has $ = 42;"

[18:26] <LylePerl> Hi All

[18:27] <LylePerl> I got IIS to work with pugs

[18:27] <TimToady> well, but then someone will think of a use for it. :)

[18:27] <moritz_> TimToady: I'm sure they will ;-)

[18:28] *** pmurias left
[18:28] <moritz_> PerlJam: ok, I stand correct, rakudo has a problem there.. care to submit a bug report?

[18:28] <moritz_> (although I suspect it's a fairly low priority TODO)

[18:28] <PerlJam> *real* low  :)

[18:28] <TimToady> std: has $ = 42;

[18:28] <p6eval> std 26133: OUTPUT«ok 00:02 35m␤»

[18:29] <pmichaud> PerlJam: We have to keep some useless constructs around so that Damian continues to have good OSCON talks :-P

[18:29] <moritz_> lol

[18:29] <pmichaud> (gone for lunch)

[18:29] <PerlJam> pm: hey, I just did a little patch for flip (and it passes all spectests)

[18:30] <moritz_> PerlJam: it shouldn't

[18:30] <moritz_> PerlJam: because the spec tests are out of date

[18:30] <PerlJam> moritz_: well, it passes after I modified them  to use $str.flip where it currently uses $str.reverse  :)

[18:30] <TimToady> is there still a Str.reverse implemntation out there

[18:31] <moritz_> TimToady: out there yes - not in my local copy

[18:31] <moritz_> but I suspect the test suite needs updates in several places

[18:31] <moritz_> and reverse.t is *full* of str-vs-list distinguishing tests

[18:32] <PerlJam> not in my copy  :)

[18:32] <moritz_> s/is/was/

[18:32] <moritz_> PerlJam: congratulations, we worked in parallel on the same thing, and thus duplicated effort :/

[18:32] <moritz_> anyway, show me your patch, it might be a lot nicer than mine ;-)

[18:33] <PerlJam> moritz_: not really.  Some of the effort was just for me to start doing things.  I always seem to have a problem getting started.

[18:34] <pasteling> "PerlJam" at 165.95.12.193 pasted "flip patch" (30 lines, 766B) at http://sial.org/pbot/35890

[18:35] <skids> TimToady: use for "has $" ... padding in a compact struct

[18:35] <moritz_> PerlJam: ah, mine does a bit more

[18:36] <PerlJam> moritz_: I'm sure.  Show me :)

[18:36] <pasteling> "PerlJam" at 165.95.12.193 pasted "spec patch for flip" (106 lines, 3.7K) at http://sial.org/pbot/35891

[18:36] <PerlJam> moritz_: your can critique my spec patch too :)

[18:36] <PerlJam> s/your/you/

[18:36] <moritz_> PerlJam: just a sec...

[18:37] <literal> .oO(does Bool have a .flip?)

[18:37] <diakopter> LylePerl: how'd you do it

[18:39] <pasteling> "moritz_" at 91.10.187.171 pasted "s/reverse/flip/ - a few more lines :/" (164 lines, 4.1K) at http://sial.org/pbot/35892

[18:40] <moritz_> PerlJam: my patch to the tests does roughly the same thing, but removes some duplicates and moves the flip tests to another file

[18:40] <PerlJam> yes, I see

[18:41] <moritz_> if the current run is clean, I'll commit

[18:41] <moritz_> PerlJam: for example your patch wouldn't handle flip(123)

[18:41] <moritz_> (I think so, didn't try it)

[18:41] <PerlJam> I wasn't sure about that reverse multi in the PIR there, but apparently it's not needed  anymore  :)

[18:42] <PerlJam> indeed it does not.

[18:42] <LylePerl> diakopter: setting up a handler mapping on IIS7. Still can't get rakudo to work on IIS though, I'm doing some more tests but I'm pretty sure it's a parrot issue

[18:43] <PerlJam> moritz_: this is one of the things I really haven't given enough thought about to keep straight in my head ... what goes in src/classes vs. src/builtins vs src/setting

[18:43] *** sri_kraih_ left
[18:44] <moritz_> PerlJam: everything new goes into setting ;-)

[18:44] <PerlJam> sure, except that some things have pieces spread out everywhere. :)

[18:44] <moritz_> PerlJam: and usually all things that are written in PIR and are callable as a method go in src/classes

[18:44] <moritz_> right ;-)

[18:45] <pugs_svn> r26134 | moritz++ | [t/spec] string reversal is now spelled flip()

[18:45] <PerlJam> moritz_: did you add a spectest for flip(123)?  I don't think there was one like that for reverse

[18:46] <moritz_> PerlJam: just did so, in r26134

[18:47] <moritz_> anyway, PerlJam++ PerlJam++ for both patches

[18:51] *** ruoso left
[18:52] *** barney joined
[18:54] <LylePerl> yep. I'm sure it's a parrot/iis issue, a basic PIR hello world script with correct content type header fails as well

[18:56] <LylePerl> I'll join the parrot channel and ask them. I'll let you know when I have Rakudo working with IIS and I'll update my blog with a guide

[18:56] <LylePerl> bye

[18:56] *** LylePerl left
[18:58] <hexmode> b

[19:04] * jnthn -> nomming cheezburger, bbs

[19:14] *** barney left
[19:21] <pugs_svn> r26135 | lwall++ | [S32/Containers] make it possible to reverse a hash without (too much) loss of

[19:21] <pugs_svn> r26135 | lwall++ |      information when there are duplicate values or list values

[19:28] <PerlJam> TimToady: was that patch not quite complete?  There seems to be something missing:  The intention is that %bar.push(%foo.reverse);  %baz.push(%bar.reverse);

[19:28] <TimToady> gah

[19:29] <TimToady> ADHD strikes!!! --more--

[19:29] <TimToady> You lose 42 hit points!

[19:29] <dalek> rakudo: 6b97553 | pmichaud++ | :

[19:29] <dalek> rakudo: Merge branch 'master' of [email@hidden.address]
[19:29] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6b97553103e247da96d1fafe6896d1a49b764f13

[19:29] <pugs_svn> r26136 | lwall++ | [CORE] add flip as core function

[19:29] <pugs_svn> r26136 | lwall++ | [STD] allow .= flip without warning

[19:32] <pugs_svn> r26137 | lwall++ | [Containers] finish the edit

[19:34] *** ymon joined
[19:35] *** legis left
[19:41] *** payload joined
[19:48] *** kane_ joined
[19:48] *** kane_ left
[19:48] *** ymon left
[19:50] *** kane_ joined
[19:53] *** M_o_C left
[20:01] <pmichaud> phone

[20:01] *** kane_ left
[20:12] *** FurnaceBoy left
[20:13] *** schinkelm joined
[20:14] *** FurnaceBoy joined
[20:14] *** pmurias joined
[20:14] *** FurnaceBoy left
[20:17] *** alester joined
[20:24] *** masak joined
[20:24] <masak> ahoj, people.

[20:24] *** donaldh joined
[20:24] <masak> so, .flip eh? :)

[20:25] <jnthn> masak: oh hai

[20:25] <moritz_> masak: yes ;-)

[20:25] <jnthn> masak++ # slovak! :D

[20:25] *** Caelum joined
[20:25] <moritz_> masak: what#s wrong with you? usually you're not around at this time of day

[20:26] <masak> jnthn: samozrejme :)

[20:26] <masak> moritz_: that is correct.

[20:26] <masak> found a wifi hotspot to leech on in my building.

[20:26] *** clintongormley left
[20:26] <masak> I'll try not to let it ruin my night's sleep...

[20:27] <moritz_> ;-)

[20:27] * masak has eaten a really nice pasta dinner, and is now moving on to rooibos, ice cream and cookies

[20:29] <masak> anyway. Lobster.

[20:33] *** alester left
[20:38] *** PZt joined
[20:39] <jnthn> masak: that sounds FAR too nice

[20:39] <jnthn> masak: Though I still win because I eated a cheezburger.

[20:39] <masak> jnthn: note that the Lobster wasn't part of my dinner. it's what I'm hacking on ATM. :P

[20:40] <masak> I suddenly realised that this could be miscomprehended.

[20:40] <masak> shouldn't name my projects after puns...

[20:41] <jnthn> masak: Akshually I don't like sea food. :-( It was more the pasta, ice cream and cookies that got me.

[20:41] <masak> jnthn: (seafood) it are teh BLECH, trust me.

[20:41] *** payload left
[20:41] <jnthn> masak: I noes. It r srsly DO NOT WANT.

[20:42] <jnthn> OK, time to see what chaos I can cause in Positional

[20:42] <pugs_svn> r26138 | pmichaud++ | [t/spec] Move script-related property tests into S05-mass/properties-script.t .

[20:42] *** frew|work left
[20:42] <masak> time to see what beauty I can cause in Lobster.

[20:43] <jnthn> rakudo: my @a; @a[1] = 42; say @a.perl

[20:43] <p6eval> rakudo 6b9755: OUTPUT«Null PMC access in isa()␤current instr.: 'parrot;List;!flatten' pc 7415 (src/classes/List.pir:236)␤»

[20:44] <jnthn> rakudo: my @a; @a[1|2] = 42; say @a.perl

[20:44] <p6eval> rakudo 6b9755: OUTPUT«get_integer() not implemented in class 'Junction'␤current instr.: 'parrot;Positional[::T];postcircumfix:[ ]' pc 4824 (src/classes/Positional.pir:68)␤»

[20:44] <masak> that last one...

[20:44] <pugs_svn> r26139 | pmichaud++ | [t/spec]:  Oops -- properties-script.t really does have a plan.  Really.

[20:44] <masak> what's it supposed to do?

[20:45] *** cspencer joined
[20:45] <jnthn> masak: I'm not completely convinced it'll work...

[20:45] *** schinkelm left
[20:45] <masak> jnthn: for all we know, it's working properly already. :)

[20:45] <jnthn> As an rvalue it should return a junction of the array elements I guess.

[20:45] <cspencer> good afternoon!

[20:45] <jnthn> Only question is if it can serve as an rvalue too.

[20:45] <jnthn> erm

[20:45] <jnthn> as an lvalue

[20:46] <jnthn> Anyway, not going to worry about that one for now.

[20:46] *** amoc left
[20:46] <masak> cspencer: greetings, sir.

[20:48] <jnthn> pmichaud: ping

[20:49] <diakopter> is there a syntax-highlighted version of STD.pm on feather somewhere?

[20:50] <cspencer> so i'd attempted to move the shift method out of Range.pir and into Range.pm the other day, but it failed and complained that a "shift_pmc" method wasn't available

[20:50] <pmichaud> jnthn: pong

[20:50] <cspencer> is there a way that i can associate shift and shift_pmc?

[20:50] <pmichaud> cspencer: we don't have a way to declare vtable methods yet.

[20:50] <pmichaud> (from Perl 6)

[20:50] <cspencer> ah ok

[20:50] <literal> diakopter: you can make one if you have vim

[20:50] <pmichaud> in some sense you eventually won't have to .

[20:50] <pmichaud> because it'll be taken care of in Object or Any.

[20:50] <jnthn> pmichaud: Are @foo[] and @foo[*] meant to be different?

[20:50] <diakopter> I need html :)

[20:51] <literal> diakopter: vim can do that

[20:51] <diakopter> oh?

[20:51] <pmichaud> jnthn: in general, I don't think they're different.

[20:51] <jnthn> pmichaud: For the first, in method postcircumfix:<{ }> we're doing:

[20:51] <literal> :TOhtml

[20:51] <jnthn> .tailcall self.'list'()

[20:51] <jnthn> However for @foo[*] we do

[20:51] <cspencer> pmichaud: is the solution similar to defining the get_number method in Object.pir?

[20:51] <pmichaud> cspencer: it might be -- I haven't tried it yet.

[20:51] <diakopter> literal: thanks; nm; I remembered the script that does that here..

[20:51] <jnthn> result = 'list'(self)

[20:51] <cspencer> ok, i'll check it out and see what breaks :)

[20:52] <jnthn> pmichaud: I wondered if it was an intentional difference or not. I don't need to change it really. It just got me curious.

[20:52] <masak> @tell mberends oh, and for some Pod6 tests, November's Test::InputOutput might be more fitting. http://use.perl.org/~masak/journal/37976

[20:52] <lambdabot> Consider it noted.

[20:52] <pmichaud> jnthn: I can't remember why there would be any difference between them.

[20:53] <pmichaud> feel free to re-work it.  But also note that our handling of * has to change also.

[20:53] <jnthn> pmichaud: OK. Thing is I sort of suspect they could potentially end up giving different results.

[20:53] <jnthn> Yeah, I'm not worry about that bit right now. :-)

[20:54] <pmichaud> in general there is/can be a difference between .'list'() and 'list'(), yes.

[20:56] <TimToady> yes, they're different

[20:56] <TimToady> since [] is 0 dimensional, not 1 dimensional like [*]

[20:57] <TimToady> so @foo[].WHAT is Array, while @foo[*].WHAT is List, I expect

[20:57] <moritz_> pmichaud: your recent commits to the test suite have many insertions but no deletions - is that intentional?

[20:57] <pmichaud> that is likely to be the difference.  Also, if you're looking at postcircumfix:{ }  -- chances are that I just copied it from Positional without investigating it too thoroughly.

[20:57] <literal> masak: heh, I would have just stuffed all those strings in an array of arrays and looped over it

[20:57] <masak> literal: that's what it does.

[20:57] <pmichaud> moritz_: I'm wanting to finish the refactor before I remove properties.t

[20:58] <pmichaud> (yes, a deletion is coming.)

[20:58] <moritz_> pmichaud: ok

[20:58] <masak> literal: with a few (very few) extra bits thrown in.

[20:59] <masak> such as using Perl 6's Pairs if it finds them.

[20:59] <literal> ok

[21:00] <masak> literal: Test::InputOutput is very down-to-earth. I put all the crazy, weird stuff in Test::Ix :)

[21:01] <literal> Ix?

[21:01] <literal> what does that do?

[21:02] <masak> literal: http://github.com/masak/druid/blob/master/t/01-game-rules.t

[21:02] <masak> it finds the test subs through a hierarchical index of strings.

[21:02] <literal> interesting

[21:02] <masak> encouraging the test writer to list and group the tests before writing them.

[21:03] <masak> the Test::Ix module is the nicest Perl 6 code I've ever written. http://github.com/masak/druid/blob/masak/lib/Test/Ix.pm

[21:03] <literal> "That page doesn't exist!", silly github

[21:03] <masak> oops.

[21:04] <masak> http://github.com/masak/druid/blob/master/lib/Test/Ix.pm

[21:04] <literal> hm, does "return ();" do something different from "return;" ?

[21:04] <masak> aye.

[21:05] <masak> not sure I like it, but that's the spec.

[21:06] *** exodist left
[21:06] <literal> just grepped S*.pod, no occurence of "return ()", one occurence of "return()"

[21:06] <literal> and that was in S17-concurrency.pod ...

[21:06] <masak> IIRC, 'return ()' returns an empty list, aka Nil.

[21:07] <masak> whereas 'return' returns undef. or something like that.

[21:07] <moritz_> I thought both return Nil, which is undef in scalar context, and the empty list in list context?

[21:07] <pmichaud> note that  return()  is different from  return ()

[21:08] <pmichaud> and   "return;"   is the same as "return();"

[21:08] <literal> yeah

[21:08] <masak> aye.

[21:08] <masak> makes sense.

[21:08] *** payload joined
[21:08] <moritz_> pmichaud: but is () an empty list? or is it a no-op?

[21:08] <pmichaud> it's an empty list

[21:08] <literal> so what does "return;" mean in list context, then?

[21:08] <pmichaud> an empty list.

[21:09] <pmichaud> "return;"  in scalar context gives an undef value.

[21:09] <literal> ah, but "return ();" is Nil ?

[21:09] <pmichaud> no.

[21:09] <[particle]-> that tells me "return;" returns Nil

[21:09] <pmichaud> "return;"  gives back Nil.  Nil is an empty list in list context, and undef in item context.

[21:09] <[particle]-> return (); returns empty list, which in scalar context, is ?

[21:09] <literal> so, there's no difference between "return;" and "return ();" in any context?

[21:10] <pmichaud> an empty list in scalar context becomes a Capture

[21:10] <pmichaud> (with no positional values)

[21:10] <[particle]-> there's the difference.

[21:10] <literal> ok

[21:10] <pmichaud> s/scalar context/item context/  # fwiw

[21:10] <[particle]-> oops

[21:10] <masak> rakudo: sub foo { return }; sub bar { return () }; say foo.WHAT; say bar.WHAT

[21:10] <p6eval> rakudo 6b9755: OUTPUT«Nil␤List␤»

[21:10] <pmichaud> it used to be that an empty list in item context became an Array, but that changed recently

[21:10] <moritz_> somebody[tm] told me that () in Perl 6 only had grouping functions, and never construct lists

[21:11] <moritz_> is that somebody wrong?

[21:11] <pmichaud> ()  produces an empty list.  Outside of that, it is used only for grouping.

[21:11] <masak> moritz_: in this corner case, yes.

[21:11] <literal> so what would "return Nil;" do?

[21:11] <masak> literal: return Nil? :)

[21:12] <moritz_> literal: probably the same as 'return;'

[21:12] <literal> ok

[21:12] *** Whiteknight joined
[21:12] *** moritz_ sets mode: +oo [particle]- literal

[21:13] *** wolverian left
[21:16] <masak> I've gotta blog about Test::Ix, before I forget how it works. some of that code scares me a little.

[21:16] <masak> such as the code that finds a variable declaration in another file, and executes it.

[21:16] <masak> or the code that figures out how many params a sub wants, and provides that number of params when calling it.

[21:17] <moritz_> .arity?

[21:17] <masak> aye.

[21:17] <moritz_> seems pretty standard to me ;-)

[21:18] <masak> heh. :)

[21:18] <masak> http://github.com/masak/druid/blob/master/lib/Test/Ix.pm#L89-91

[21:18] *** jbt left
[21:19] <masak> I think it felt great to do that because it was recently implemented at that time.

[21:20] <masak> but I actually use that feature in the Druid tests.

[21:24] <masak> TimToady: should I expect 42.flip to give me "24"?

[21:25] <TimToady> probably

[21:25] * masak crosses fingers

[21:25] <moritz_> rakudo: say 24.flip

[21:25] <p6eval> rakudo 6b9755: OUTPUT«42␤»

[21:25] <masak> whoa!

[21:26] <masak> your guys have been busy. :)

[21:26] <masak> s/r//

[21:27] <TimToady> rakudo: my $x = (^1000).pick; say $x + $x.flip

[21:27] <p6eval> rakudo 6b9755: OUTPUT«705␤»

[21:27] <moritz_> masak: I thought switching reverse to flip would a straight forward change... in the end the diff had ~130 lines :)

[21:28] <literal> what motivated that? reserve "reverse" for lists?

[21:28] <masak> moritz_: why? lots of calls to it?

[21:28] *** ejs joined
[21:28] <TimToady> literal: yes, to detangle the concepts, basically

[21:28] <moritz_> masak: no, lots of reverse subs and methods in differnt files with different signatures

[21:29] <literal> ok

[21:29] <moritz_> I ended up doing everything in Perl 6 in the end ;-)

[21:29] <masak> rakudo: say flip("sub")

[21:29] <p6eval> rakudo 6b9755: OUTPUT«bus␤»

[21:29] <TimToady> literal: basically, same process as splitting xx from x, .elems from .chars, etc

[21:29] <masak> rakudo: say flip("someone the bird")

[21:29] <p6eval> rakudo 6b9755: OUTPUT«drib eht enoemos␤»

[21:30] <literal> yeah, sounds good

[21:30] <TimToady> I wondered how long it would take for that example to come out :)

[21:30] <masak> been wanting to do it all evening. :)

[21:30] <masak> should have put .say at the end, though.

[21:33] <TimToady> nap &

[21:33] *** nihiliad left
[21:34] * jnthn wonders if he dares put that in his NPW slides

[21:34] * moritz_ encourages jnthn ;-)

[21:35] <masak> of course you dare.

[21:36] <masak> Perl is all about being impertinent in the right places.

[21:36] <jnthn> Wasn't the lovejuice slide at YAPC last year bad enough? ;-)

[21:38] <jnthn> woo I can haz fix0rs

[21:38] <jnthn> > my Int @foo; @foo[1] = 42; say @foo.perl; @foo[0] = "bah"

[21:38] <jnthn> [undef, 42]

[21:38] <jnthn> Type mismatch in assignment.

[21:38] <lambdabot>   <no location info>: parse error on input `@'

[21:39] <PerlJam> jnthn: nice

[21:41] <moritz_> commit it, test it, ship it!

[21:41] <moritz_> or was it the other way round? ;-)

[21:41] <masak> it ship, it test, it commit?

[21:41] <moritz_> flip it!

[21:41] <jnthn> .oO( plz to not gives these guys commit bits )

[21:41] <jnthn> ;-)

[21:41] <masak> it flip!

[21:42] <moritz_> jnthn: too late, mostly ;-)

[21:42] <masak> jnthn: no-one would ever be that careless, I'm sure.

[21:42] <jnthn> rakudo: my Int $a; my Int $b; ($a, $b) = (1, 2); say $a, $b;

[21:42] <p6eval> rakudo 6b9755: OUTPUT«12␤»

[21:42] <jnthn> rakudo: my Int $a; my Int $b; ($a, $b) = ("fu", "ck"); say $a, $b;

[21:42] <p6eval> rakudo 6b9755: OUTPUT«Type mismatch in assignment.␤current instr.: 'die' pc 16132 (src/builtins/control.pir:206)␤»

[21:42] <jnthn> Ah, good.

[21:42] <Tene> So, anyone have ideas on running a block on a sliding window across a list?

[21:43] <masak> Rakudo's built-in swearing filter.

[21:43] <Tene> i.e. on elements 0,1 then on 1,2 then on 2,3 etc.

[21:43] <masak> Tene: just slice it?

[21:43] <Tene> masak: hm?

[21:43] <masak> something like @a[ $ix ..^ $ix + $window-size ]

[21:43] *** donaldh left
[21:44] <Tene> masak: Sure, but just in a for-loop from 1..$index - size?

[21:44] <Tene> Would be nice if I could get it into a map somehow

[21:44] <Tene> or something.

[21:44] <masak> Tene: ah. yes.

[21:45] * masak advises Tene to experiment around

[21:45] <moritz_> rakudo: my $w = 3; my @a = 1..6; for ^(@a - $w) { say @a[$a ..^ $a+$w] };

[21:45] <p6eval> rakudo 6b9755: OUTPUT«Scope not found for PAST::Var '$a' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[21:45] <moritz_> rakudo: my $w = 3; my @a = 1..6; for ^(@a - $w) { say @a[$_ ..^ $_+$w] };

[21:45] <p6eval> rakudo 6b9755: OUTPUT«123␤234␤345␤»

[21:46] <moritz_> OH NOEZ, offbyone

[21:46] <moritz_> rakudo: my $w = 3; my @a = 1..6; for 0..(@a - $w) { say @a[$_ ..^ $_+$w] };

[21:46] <p6eval> rakudo 6b9755: OUTPUT«123␤234␤345␤456␤»

[21:47] <moritz_> I'm sure audreyt would have had an solution involving lazy lists and zip by now ;-)

[21:48] <Tene> Oh, interesting idea...

[21:48] <Tene> @a Z @a[1..*] Z @a[2..*]

[21:48] <lambdabot> Maybe you meant: activity activity-full admin all-dicts arr ask . ? @ v

[21:48] <Tene> approx

[21:49] <PerlJam> er ... what's the goal?

[21:49] <masak> rakudo: my @a = 1..6; for @a Z @a[1..*] Z @a[2..*] { say @a[$_ ..^ $_+3] }

[21:49] <p6eval> rakudo 6b9755: OUTPUT«234␤345␤456␤345␤456␤56Use of uninitialized value␤␤456␤56Use of uninitialized value␤␤6Use of uninitialized value␤Use of uninitialized value␤␤56Use of uninitialized value␤␤6Use of uninitialized value␤Use of uninitialized value␤␤Use of uninitialized value␤Use of uninitialized

[21:49] <p6eval> ..value␤...

[21:49] <moritz_> for [Z] map {@a[$_..*] } 1..3 -> $x, $y, $z { ... }

[21:49] <masak> .oO( [Z] ! )

[21:50] * masak can has exploding head

[21:50] <moritz_> masak: speaking of which... care to submit that as a bug?

[21:50] <masak> sure, just going to let my head finish exploding first.

[21:50] <moritz_> oh wait

[21:50] <moritz_> hm

[21:51] *** ejs left
[21:51] <moritz_> zip should stop when the shortest list ist exhausted, right?

[21:51] <masak> aye.

[21:51] <moritz_> but...

[21:51] <masak> ihrd and I talked about that the other day.

[21:51] <masak> so a definite yes.

[21:51] <moritz_> the undef warnings are from the $_+3

[21:52] <moritz_> you're reading beyond the limits of the array

[21:52] * masak still doesn't see it

[21:52] <moritz_> rakudo: my @a = 1..4; for @a Z @a[1..*] Z @a[2..*] { .say }

[21:52] <p6eval> rakudo 6b9755: OUTPUT«1␤2␤3␤2␤3␤4␤3␤4␤Use of uninitialized value␤␤4␤Use of uninitialized value␤␤Use of uninitialized value␤␤»

[21:52] <masak> oh!

[21:52] <masak> :/

[21:52] <moritz_> ok, it *is* a bug

[21:53] <masak> rakudo: my @a = 1..6; for @a Z @a[1..*] Z @a[2..*] -> $i, $, $ { say @a[$i ..^ $i+3] }

[21:53] *** lisppaste3 joined
[21:53] <p6eval> rakudo 6b9755: OUTPUT«234␤345␤456␤56Use of uninitialized value␤␤6Use of uninitialized value␤Use of uninitialized value␤␤Use of uninitialized value␤Use of uninitialized value␤Use of uninitialized value␤␤»

[21:53] <masak> I'd submit, but I feel a distinct lack of understanding.

[21:54] <moritz_> masak: you're using *values* from @a as *index* on @a, so you get at least an offby1 from 1..6 being one based

[21:54] <moritz_> ok, I'll do the submitting

[21:54] <masak> moritz_: ah, of course.

[21:54] * moritz_ checks the spec first

[21:55] <masak> rakudo: my @a = 1..6; for @a Z @a[1..*] Z @a[2..*] -> $i1, $i2, $i3 { say $i1, $i2, $i3 }

[21:55] <p6eval> rakudo 6b9755: OUTPUT«123␤234␤345␤456␤56Use of uninitialized value␤␤6Use of uninitialized value␤Use of uninitialized value␤␤»

[21:55] <masak> rakudo: my @a = 1..6; for @a Z @a[1..*] Z @a[2..*] { say $^i1, $^i2, $^i3 }

[21:55] <moritz_> rakudo: my @a = 1..4; say @a[1..*].perl

[21:56] <p6eval> rakudo 6b9755: OUTPUT«123␤234␤345␤456␤56Use of uninitialized value␤␤6Use of uninitialized value␤Use of uninitialized value␤␤»

[21:56] <p6eval> rakudo 6b9755: OUTPUT«[2, 3, 4, undef]␤»

[21:56] <masak> moritz_: now _that_'s a bug.

[21:56] <moritz_> masak: indeed

[21:56] <masak> aye, please submit.

[21:57] <jnthn> What on *earth*?!

[21:57] <jnthn> Epic bug.

[21:57] <PerlJam> It's a Whatever bug

[21:57] <jnthn> rakudo: (1..*).say

[21:57] <moritz_> offby1

[21:57] <p6eval> rakudo 6b9755: OUTPUT«Use of uninitialized value␤␤»

[21:57] <jnthn> rakudo: (1..*).perl

[21:57] <p6eval> rakudo 6b9755:  ( no output )

[21:57] <jnthn> rakudo: (1..*).perl.say

[21:57] <p6eval> rakudo 6b9755: OUTPUT«1..*␤»

[21:57] <moritz_> it's magic[tm]

[21:58] <jnthn> PerlJam: yah whatever ;-)

[21:58] <moritz_> rakudo: .say for 1..2 Z 2..5;

[21:58] <p6eval> rakudo 6b9755: OUTPUT«1␤2␤2␤3␤»

[21:59] <moritz_> rakudo: for 1..3 Z 1..2 Z 1..1 { say $^a, $^b, $^c };

[21:59] <p6eval> rakudo 6b9755: OUTPUT«111␤»

[21:59] <Tene> rakudo: my &foo = { say "$^a + $^b" }; for 1..10 &foo;

[21:59] <moritz_> it seems that zip actually works fine

[21:59] <p6eval> rakudo 6b9755: OUTPUT«too few arguments passed (0) - 2 params expected␤current instr.: '_block21' pc 136 (EVAL_20:57)␤»

[21:59] <Tene> jnthn: know if that should work?

[22:00] <jnthn> std: for 1..10 &foo

[22:00] <moritz_> Tene: it should complain about a syntax error

[22:00] <p6eval> std 26139: OUTPUT«##### PARSE FAILED #####␤Malformed block at /tmp/LEaI2hMAMC line 0:␤------> ␤    expecting any of:␤    argument list␤    infix or meta-infix␤      infix stopper␤    parameterized block␤      standard stopper␤FAILED 00:05 42m␤»

[22:00] <Tene> aw. :(

[22:00] <jnthn> moritz_: Yeah, that was what I thought

[22:00] <moritz_> `for' is special syntax, and expects a block

[22:00] <moritz_> if you don't want that, `map' is your friend

[22:00] <meppl> good night

[22:00] <Tene> does map deal with arity like for does?

[22:00] *** simcop2387 joined
[22:01] <PerlJam> yes

[22:01] <moritz_> Tene: better, actually ;-)

[22:01] <moritz_> at least in rakudo

[22:01] <Tene> ah.

[22:01] <moritz_> it's specced to work the same, though

[22:01] * jnthn watches make spectest hopefully

[22:01] *** meppl left
[22:01] *** skids left
[22:02] <moritz_> jnthn: did parallel spectest ever work on windows?

[22:02] <jnthn> OH NOES I HAZ MADE A FAIL

[22:03] <jnthn> moritz_: I didn't try it yet.

[22:04] <moritz_> masak: oh, [Z] wouldn't work, because [$anything] ... always returns a scalar - so it would be @ [Z] map { @a[$_..*] } 0..$window

[22:05] *** bacek left
[22:07] <Tene> jnthn: bug related to your current work...

[22:07] <Tene> rakudo: sub foo(@a) { say @a.perl }; foo(1..10);

[22:07] <p6eval> rakudo 6b9755: OUTPUT«Non-Positional argument or Positional of wrong element type for @a in call to foo␤current instr.: 'die' pc 16132 (src/builtins/control.pir:206)␤»

[22:07] <masak> moritz_: were you expecting that to reassure me, or to explode my head more? :P

[22:08] <jnthn> Tene: Ah, hmm.

[22:08] <moritz_> masak: ;-)

[22:08] <jnthn> Tene: I guess Range does Positional...

[22:10] <Tene> looks like [Z] is unerrepresented in spectests

[22:10] <Tene> only in reduce-le1arg.t

[22:11] <masak> it looks like the front of a superhero suit.

[22:11] <masak> The Great Zip!

[22:12] <masak> is it a train, is it a lizard? no... it's Zip!

[22:12] <moritz_> Tene: that's probably because it needs slice context to work

[22:12] <Tene> ah

[22:12] <moritz_> in it seems that nobody actually understands slice context

[22:12] <moritz_> so nobody would write tests for that

[22:12] <moritz_> and nobody implements it

[22:13] <moritz_> vicious circle

[22:13] <moritz_> writing tests without being able to test your tests can be frustrating

[22:13] <Tene> Hmm... +&foo isn't defined.

[22:14] <Tene> I wonder if it should be the number of required positional args...

[22:14] <masak> or the number of multi variants?

[22:14] <moritz_> or maybe a fail('U WANT TO NUMIFY UR SUBS? ORLY? U R CRAZY') ;-)

[22:15] <Tene> looks like apply-sliding-window would be approximately:

[22:15] <Tene> map(&block, [Z] map({@array[$_..*]}, 0..^&block.arity()));

[22:15] <masak> rakudo: sub foo {}; say +&foo

[22:15] <p6eval> rakudo 6b9755: OUTPUT«get_number() not implemented in class 'Sub'␤current instr.: 'prefix:+' pc 21434 (src/builtins/op.pir:119)␤»

[22:16] <masak> rakudo: class Sub is also { method get_number { 5 } }; sub foo {}; say +&foo

[22:16] <p6eval> rakudo 6b9755: OUTPUT«get_number() not implemented in class 'Sub'␤current instr.: 'prefix:+' pc 21434 (src/builtins/op.pir:119)␤»

[22:16] <masak> bah.

[22:17] <jnthn> rakudo: class Sub is also { method Num { $.arity } }; sub foo { }; say +&foo;

[22:17] <p6eval> rakudo 6b9755: OUTPUT«get_number() not implemented in class 'Sub'␤current instr.: 'prefix:+' pc 21434 (src/builtins/op.pir:119)␤»

[22:17] <masak> double bah.

[22:17] <jnthn> that one should work

[22:17] * masak submits rakudobug

[22:18] <jnthn> But guess we ain't re-mapping get_number vtable yet.

[22:18] <moritz_> there's a patch for that in RT

[22:18] <moritz_> by cspencer++

[22:18] <masak> oh.

[22:18] * masak stands down rakudobug readiness

[22:19] <cspencer> moritz: that patch passed all spectests a couple revisions back, and i'm hoping it still does what it's supposed to do

[22:19] <cspencer> though i can't quite remember why'd i implemented it, though i have a feeling it had to do with ranges

[22:19] <Tene> rakudo: map { say "$^a - $^b"}, 1..10 Z 1..10

[22:19] <p6eval> rakudo 6b9755: OUTPUT«No applicable candidates found to dispatch to for 'map'␤current instr.: '_block14' pc 142 (EVAL_19:58)␤»

[22:19] <Tene> jnthn: is that also relevant to your current work?

[22:20] * masak perks up again

[22:20] <masak> is that one in RT?

[22:20] <Tene> dunno

[22:21] * masak submits, just in case

[22:21] <jnthn> Tene: Perhaps.

[22:21] <jnthn> Tene: Looks like it may be the same solution, at least.

[22:22] <moritz_> why didn't the test suite catch that?

[22:22] <Tene> jnthn: it's the same if I use arrays not created through ranges.

[22:22] <moritz_> I thought map was rather well tested

[22:22] <Tene> rakudo: map { say "$^a - $^b"}, (1,2,3) Z (4,5,6)

[22:22] <p6eval> rakudo 6b9755: OUTPUT«No applicable candidates found to dispatch to for 'map'␤current instr.: '_block14' pc 156 (EVAL_17:62)␤»

[22:23] <Tene> looks like it's map + Z

[22:23] <jnthn> rakudo: say ((1,2,3) Z (4,5,6)).WHAT

[22:23] <p6eval> rakudo 6b9755: OUTPUT«List␤»

[22:23] <jnthn> rakudo: say ((1,2,3) Z (4,5,6)).PARROT

[22:23] <moritz_> rakudo: map { say "$^a - $^b }, (1, 2, 3, 4)

[22:23] <p6eval> rakudo 6b9755: OUTPUT«List␤»

[22:23] <p6eval> rakudo 6b9755: OUTPUT«say requires an argument at line 1, near " \"$^a - $^"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[22:23] <masak> rakudo: map { say "$^a - $^b" }, (1..10 Z 1..10)

[22:23] <p6eval> rakudo 6b9755: OUTPUT«1 - 1␤2 - 2␤3 - 3␤4 - 4␤5 - 5␤6 - 6␤7 - 7␤8 - 8␤9 - 9␤10 - 10␤»

[22:23] <masak> appears to be a parens thing.

[22:24] <masak> p6eval? hello?

[22:24] *** iblechbot left
[22:24] <moritz_> and old bot is no aeroplane

[22:25] <moritz_> masak: didn't p6eval already answer?

[22:26] <masak> moritz_: not in my reference frame.

[22:26] <moritz_> masak: the answer to which query do you miss?

[22:26] *** Kisu left
[22:26] <masak> moritz_: no, it's all arrived now.

[22:26] <masak> probably just a bit of lag near my end.

[22:27] *** Kisu joined
[22:27] * masak goes to sleep

[22:27] * moritz_ blames the hijacked wlan hotspot ;-)

[22:27] *** masak left
[22:27] <moritz_> good idea

[22:27] <moritz_> good night

[22:27] <jnthn> night

[22:27] <jnthn> moritz_: Are there tests for typed hashes too?

[22:28] <jnthn> Oh, moritz++ meant he was taking sleep too

[22:28] <moritz_> jnthn: not really, just for the dispatch thing

[22:31] <jnthn> moritz_: OK.

[22:39] <jnthn> ouch, we broke the 300 ticket mark.

[22:43] *** bacek joined
[22:46] <pugs_svn> r26140 | pmurias++ | [re-smop] ported over hash bvalue

[22:47] *** pmurias left
[22:52] <jnthn> rakudo: &map.assuming({})

[22:52] <p6eval> rakudo 6b9755:  ( no output )

[22:52] <jnthn> rakudo: my &doubler = &map.assuming({ 2 * $^n }); say &doubler 1,2,3;

[22:52] <p6eval> rakudo 6b9755: OUTPUT«Statement not terminated properly at line 1, near "1,2,3;"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[22:53] <jnthn> rakudo: my &doubler = &map.assuming({ 2 * $^n }); say &doubler(1,2,3);

[22:53] <p6eval> rakudo 6b9755: OUTPUT«246␤»

[22:53] <jnthn> Tene: Heh, I just found http://rt.perl.org/rt3/Ticket/Display.html?id=64482

[22:58] *** Tene_ joined
[22:59] *** Tene left
[22:59] *** Tene_ is now known as Tene

[22:59] *** Doubi joined
[23:00] *** DemoFreak left
[23:17] *** skids joined
[23:27] *** cspencer left
[23:33] *** bacek left
[23:36] *** cspencer joined
[23:40] <dalek> rakudo: 2ae3181 | jnthn++ | src/classes/ (2 files):

[23:40] <dalek> rakudo: Get type checking of operations involving arrays working. Along the way, fixed the bug where my @a; @a = 1; then made anything that referenced @a[0] blow up with a Null PMC Exception.

[23:40] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/2ae3181d3854d65ec8268d11ef1ef82e4eb2ccdd

[23:44] <dalek> rakudo: 0a9dd6d | jnthn++ | src/classes/ (2 files):

[23:44] <dalek> rakudo: Get typed hashes working in dispatch and have assignments to them typed-checked. Calling methods on them is still broken; need a few more things to become Perl6MultiSub.

[23:44] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/0a9dd6dc16cf92db529ecceb5c8370f1e4f1b212

[23:47] <jnthn> @tell masak maybe if you have time take a look at http://rt.perl.org/rt3/Ticket/Display.html?id=62968 and see if you think we're looking good on that one now.

[23:47] <lambdabot> Consider it noted.

[23:48] <jnthn> @tell masak we may want some tests for it if so; scribble on the ticket if there's still issues there :-)

[23:48] <lambdabot> Consider it noted.

[23:49] <jnthn> rakudo: role Foo {}; role Bar {}; sub baz(Foo Bar $a) {}; say "should not be alive here before 6.0.0"

[23:49] <p6eval> rakudo 0a9dd6: OUTPUT«should not be alive here before 6.0.0␤»

[23:49] <jnthn> Eh. Tomorrow. :-)

[23:50] <jnthn> erm, actually today...

[23:50] <jnthn> Anyway, night all

[23:50] <pmichaud> jnthn: good night :-)

[23:50] <jnthn> pmichaud: BTW Rakudo day zajtra

[23:50] <jnthn> erm

[23:50] <jnthn> s/zajtra/tomorrow/

[23:50] <pmichaud> jnthn: OKAY

[23:50] <pmichaud> jnthn: C U TMRW KTHXBYE

[23:51] <jnthn> pmichaud: Will likely do some tickets, maybe implement .wrap ;-)

[23:51] <pmichaud> ...anotations?

[23:51] <jnthn> OH YEAH

[23:51] <pmichaud> *annotations?

[23:51] <jnthn> Well, if Tene doesn't beat me to it. ;-)

[23:51] <pmichaud> no rush... it _did_ take me forever to get to them myself.  :-)

[23:51] <jnthn> He plans to do some stuff in that area tonight too. So I might not have much to do by the time tomorrow comes. ;-)

[23:51] <pmichaud> that would be fine with me.

[23:51] <Tene> pmichaud: I had an implementation last night, but had to wait on feedback from Jonathan to fix Exception.pmc.

[23:52] * jnthn fed back :-)

[23:52] <pmichaud> I plan to work on tickets tomorrow.  We also should be making our plans for hackathon in oslo

[23:52] <jnthn> Yes, agree.

[23:52] <pmichaud> I'll likely start a thread and wikipage for it tonight.

[23:52] <jnthn> Great.

[23:53] *** bacek_ joined
[23:53] <jnthn> Guess it wants to have: binding, parameter passing...

[23:54] <jnthn> Might be good to spend some time thrasing out a generally attack plan for multi-dimensional arrays and so forth too. Especially with Larry there if we have questions. :-)

[23:54] <pmichaud> yes.  I'm already making a list :-)

[23:54] <pmichaud> oh, are you planning to make it to YAPC::EU ?

[23:55] <jnthn> Yes, almost certainly I will be there.

[23:55] <pmichaud> okay.  allison and I were discussion our plans for YAPC::EU -- we may want to do a parrot meeting of some sort there.

[23:55] <pmichaud> *discussing

[23:55] <jnthn> OK. Is there not one at YAPC::NA (the VM workshop)?

[23:56] <pmichaud> I think that's more aimed at people who are interested in working on Parrot.  We were thinking of something like PDS -- i.e., planning for 2.0

[23:56] <jnthn> Or more a smaller Parrot-Rakudo meeting?

[23:56] <jnthn> Ah, OK.

[23:56] <pmichaud> (well, it was more allison's idea than my own :-)

[23:56] <jnthn> I had thought PDW would incorporate the planning for 2.0 too.

[23:56] <jnthn> But makes sense to separate them.

[23:56] <jnthn> And having it in Europe would be nice. :-)

[23:57] <pmichaud> I'm just trying to solidify my travel plans, and try to see who can fund them :-)

[23:57] <jnthn> I can easily tack on extra day(s) for a PDS anyway.

[23:57] <pmichaud> anyway, good to know you're likely for YAPC::EU.

[23:57] <jnthn> :-)

[23:58] <jnthn> Also at NPW I'd like to work out my next Hague Grant application, since typed arrays and hashes are coming together nicely now.

[23:58] <jnthn> And they were pretty much the last thing I have left to do on the current one.

[23:58] <pmichaud> yes, we should do that also.

[23:58] <jnthn> I guess by then you'll have the roadmap updated too, which will be good input into that.

[23:59] *** Doubious joined
