[00:04] *** hudnix left
[00:07] <pugs_svn> r29042 | lwall++ | [STD_P5] much more de-6-ization of the quasi-p5 grammar 

[00:12] *** lest_away is now known as lestrrat

[00:22] *** lichtkind left
[00:22] <pmichaud> jnthn: great work today, thanks for everything

[00:23] <pmichaud> jnthn: I hope to open lots of doors for us tonight :)

[00:24] *** fax left
[00:24] <jnthn> pmichaud: Great. Having use done properly will be a big step forward. :-)

[00:25] *** ihrd joined
[00:25] *** ihrd left
[00:27] *** quietfanatic left
[00:29] *** snarkyboojum joined
[00:31] *** szabgab left
[00:33] *** orafu left
[00:33] *** orafu joined
[00:35] *** simcop2387 left
[00:36] *** pmurias left
[00:40] *** simcop2387 joined
[00:41] *** szabgab joined
[00:47] *** icwiener left
[00:53] *** TimToady sets mode: +vv dalek hugme

[00:53] *** TimToady sets mode: +vvvv ilbot2 ilogger2 IRSeekBot lambdabot

[00:53] *** TimToady sets mode: +vvv lisppaste3 p6eval phenny

[00:53] *** TimToady sets mode: +vvv pointme pugs_svn zaslon

[00:57] *** xabbu42 left
[00:58] *** nihiliad joined
[01:14] *** quietfanatic joined
[01:33] <diakopter> pmurias: yes

[01:34] <Juerd> I don't know why, but police here started stopping people at random, asking for driving license and registration papers.

[01:34] <Juerd> It started a few weeks ago, and I've been stopped three times already.

[01:35] <Juerd> s/'ve been/was/? English is hard.

[01:35] <diakopter> either

[01:35] <diakopter> have been is more proper

[01:35] <Juerd> They just glance over the paperwork, wish you a good night, and drive off again.

[01:36] <diakopter> have been - implies it could happen again, which fits better with '... already'

[01:36] <Juerd> They're not checking it with databases, like they normally do (did).

[01:36] *** nihiliad left
[01:36] *** nihiliad joined
[01:37] <Juerd> Hm, I'm not used to verb forms implying anything about the future. :|

[01:37] <Juerd> Thanks. I should look this up.

[01:39] <diakopter> to clarify, it doesn't necessarily imply that, it just leaves the door open for that connotation somewhat more than 'was stopped'.  I think.

[01:40] <Juerd> Still an interesting part of the language that is entirely new to me

[01:41] <Juerd> Er, that's ambiguous. English isn't entirely new to me :)

[01:41] *** Chillance left
[01:41] <diakopter> 'I had been stopped 3 times' denotes that you don't expect to be stopped again (they're not stopping folks anymore, or you're not driving past them anymore)

[01:41] <diakopter> (and isn't confused by '... already')

[01:42] <Juerd> Technically, I haven't even been stopped this time. They just harrassed me while I had already parked my car, and was just cleaning the passenger seat a little.

[01:42] <Juerd> s/while/after/  # argh :)

[01:42] <diakopter> there, it's "I wasn't even stopped this time"

[01:43] <Juerd> Why is that?

[01:43] <diakopter> since the [singular/atomic] event is completed ("perfect")

[01:44] <Juerd> I'm beginning to see a pattern

[01:44] <Juerd> Thanks ]

[01:44] <Juerd> s/\]//

[01:44] <diakopter> :)

[01:45] <diakopter> even though it's a negative event (it didn't occur), you're talking about it as if it could have occurred, so in that theoretical past timeline, it did occur (and was completed)

[01:46] <Juerd> I recognised the term perfect from latin, and that reminds me that I forgot almost everything I've ever learned about latin...

[01:46] * diakopter as well (4 """years""")

[01:47] <Juerd> perfectum, imperfectum, plusquamperfectum, ...

[01:47] <Juerd> I lost all notion of what those mean. Maybe if I read about it it'll come back to me. Let's do that tomorrow.

[01:48] <Juerd> For now I'm wishing you a good night|* :)

[01:48] * diakopter wonders if there's a 1st person singular analogue of "Let's ..." "Let me .." except contracted.

[01:48] <diakopter> 'nite

[01:48] <diakopter> oh yeah.  "Lemme."

[01:48] <Juerd> Yes, it is: I'll do that tomorrow. :)

[01:49] <pugs_svn> r29043 | lwall++ | [t/spec] 3 instances of "Too late for semicolon form" 

[01:50] <Juerd> Welterusten :)

[01:54] *** elmex left
[01:55] *** quietfanatic left
[01:55] *** quietfanatic joined
[01:57] *** eternaleye joined
[01:58] *** elmex joined
[01:59] *** ShaneC left
[02:00] *** s1n left
[02:02] *** s1n joined
[02:03] *** snarkyboojum left
[02:04] *** parduncia left
[02:04] *** pnu left
[02:12] <dalek> book: 43015de | chromatic++ | src/basics.pod:

[02:12] <dalek> book: Minor edits to Basics chapter:

[02:12] <dalek> book:     - added =begin/=end programlisting tags

[02:12] <dalek> book:     - rephrased some prose for clarity

[02:12] <dalek> book:     - added X<> tags for indexing

[02:12] <dalek> book: review: http://github.com/perl6/book/commit/43015deadd20808b41e864d362303be15bc188df

[02:17] *** Wolfman2000 joined
[02:18] <diakopter> Wolfman2000: hiya

[02:18] <Wolfman2000> diakopter: Evening. Don't think your @ stayed upon my leaving for college BTW.

[02:18] *** diakopter sets mode: +o Wolfman2000

[02:18] <diakopter> there you go

[02:18] <Wolfman2000> Wasn't sure if it was meant to be permament or not.

[02:18] <Wolfman2000> diakopter++: Thanks.

[02:19] <Wolfman2000> ...may as well test to be sure.

[02:19] *** Wolfman2000 left
[02:19] *** Wolfman2000 joined
[02:19] <diakopter> nah; it's just so people don't feel left out...

[02:19] <Wolfman2000> *shrugs* don't worry about it

[02:19] <diakopter> also to deter griefers

[02:19] <Wolfman2000> where's that dictionary bot? I don't recall what a griefer is either.

[02:20] <diakopter> "oh look, 30 operators?  I'll find another channel to [make] grieve."

[02:20] <TimToady> it's not any kind of a club, just people who we know and who tend to stay connected 24/7

[02:20] <Wolfman2000> 24/7? Definitely not me. I use my laptop for just about everything.

[02:21] <TimToady> well, so do I

[02:21] <TimToady> but I ssh to a machine with screen and irssi :)

[02:22] <TimToady> and this machine has been up for 82 days now

[02:22] <TimToady> decommuting &

[02:22] <Wolfman2000> TimToady: I don't have such a machine that can be close to guaranteed to stay up...that I can keep bandwidth wasting.

[02:22] <Wolfman2000> My Slicehost box is out, I can't use my own box, and I can't waste Juerd's bandwidth on Feather.

[02:23] <diakopter> Wolfman2000: a zillion folks use screen+irssi on feather

[02:23] <diakopter> well, a zillion minus 1

[02:24] <Wolfman2000> ...right, that 1 is me

[02:24] <Wolfman2000> I need to learn a few more things about screen...and then somehow control a text based IRC client without trouble. THAT'S going to be the fun one.

[02:25] <diakopter> one trick is to make it use UTF-8

[02:25] <Wolfman2000> diakopter: I'll want to do that anyway.

[02:26] <diakopter> I mean, it can be tricky to do that.

[02:28] <Wolfman2000> In other news...I've been given a deadline for the Perl 6 Pastebin website I've been working on with others in here.

[02:28] <Wolfman2000> NC State is hosting an alumni function in my home town on December 8th. I have to RSVP by the 3rd. This will be a BIG boost to my resume if I get it completed by then.

[02:31] <Wolfman2000> Once I take care of some homework, I have to get cracking to hopefully get SOMETHING up before the week of Thanksgiving.

[02:36] *** pnu joined
[02:40] *** meppl left
[02:43] *** parduncia joined
[02:44] *** whooosh joined
[02:48] *** Whiteknight left
[02:49] *** whooosh left
[03:07] *** snarkyboojum joined
[03:10] *** Exodist joined
[03:22] *** nothingmuch left
[03:22] *** christine left
[03:22] *** renormalist left
[03:22] *** Grrrr left
[03:22] *** gfldex left
[03:22] *** sjohnson left
[03:22] *** cotto left
[03:22] *** wolverian left
[03:22] *** mtve left
[03:22] *** literal left
[03:22] *** TimToady left
[03:22] *** Trey left
[03:22] *** diakopter left
[03:22] *** Bucciarati left
[03:22] *** stepnem left
[03:23] *** literal joined
[03:24] *** renormalist joined
[03:24] *** nothingmuch joined
[03:24] *** christine joined
[03:27] *** hercynium_ joined
[03:28] *** TimToady joined
[03:28] *** Grrrr joined
[03:28] *** gfldex joined
[03:31] *** hercynium_ left
[03:33] *** diakopter joined
[03:33] *** Bucciarati joined
[03:36] *** meppl joined
[03:40] *** hercynium left
[03:41] *** JimmyZ joined
[03:41] <JimmyZ> A new bug?

[03:41] <JimmyZ> raudo: (27-13.2-13.2-0.6).say;

[03:41] <JimmyZ> rakudo: (27-13.2-13.2-0.6).say;

[03:41] <p6eval> rakudo 929998: 1.4432899320127e-15␤

[03:42] <JimmyZ> rakudo: Int(27-13.2-13.2-0.6).say;

[03:42] <p6eval> rakudo 929998: invoke() not implemented in class 'Integer'␤in Main (file <unknown>, line <unknown>)␤

[03:42] <JimmyZ> rakudo: (Int)(27-13.2-13.2-0.6).say;

[03:42] <p6eval> rakudo 929998: invoke() not implemented in class 'Integer'␤in Main (file <unknown>, line <unknown>)␤

[03:43] <diakopter> JimmyZ: it's the floating point value not rounding to 0...

[03:43] <diakopter> oh

[03:43] <JimmyZ> diakopter: But it's a really bug.

[03:43] <diakopter> yeah

[03:43] <diakopter> I mean

[03:43] <diakopter> not necessarily

[03:44] *** mubot joined
[03:44] <JimmyZ> So does the python...

[03:47] *** envi^office joined
[03:47] *** sjohnson joined
[03:47] *** cotto joined
[03:47] *** mtve joined
[03:48] <arnsholt> JimmyZ: That's just the way life is when you're using floating point numbers

[03:48] <arnsholt> A lot of common decimal numbers, like 0.1 IIRC, cannot be represented in binary with a finite number of bits

[03:48] <arnsholt> So you get round-off errors like that

[03:49] <arnsholt> If you really, really need absolute precision you have to implement your own fixed-point class

[03:50] <arnsholt> (The most common case for that is money, where rounding errors can be an absolute no-no)

[03:53] *** stepnem joined
[03:53] *** stepnem left
[03:53] <JimmyZ> arnsholt: I see, thanks. though it is a *big* bug.

[03:54] <JimmyZ> rakudo: (1/3*3).say;

[03:54] <p6eval> rakudo 929998: 1␤

[03:54] <arnsholt> It can be a problem, yes. But it's not really a problem. It really is impossible (as in, provably so) to make it work like you want to

[03:55] <arnsholt> Rationals OTOH, will do what you want, as you just found out =)

[03:55] <arnsholt> Er, "it's not really a bug"

[03:55] <arnsholt> Rather than "it's not really a problem"

[03:59] <JimmyZ> rakudo: ( (1/3) * 3 ).say;

[03:59] <p6eval> rakudo 929998: 1␤

[04:00] <JimmyZ> rakudo: print (1/3)*3

[04:00] <p6eval> rakudo 929998: 1

[04:01] <JimmyZ> oh, perl 5 outputs 0.333333333333333

[04:07] <arnsholt> Yeah, Perl 5 doesn't have Rationals built-int

[04:07] <arnsholt> Built-in, even

[04:07] <arnsholt> But there is a CPAN module that adds it I think

[04:08] <PerlJam> What's the supposed bug?

[04:09] *** meppel joined
[04:10] *** _jaldhar is now known as jaldhar

[04:10] <Wolfman2000> argh...homework took too long, plus dad made me watch some of the American football game

[04:15] *** nihiliad left
[04:17] <diakopter> nqp: say(hihi)

[04:17] <p6eval> nqp: Null PMC access in get_string()␤current instr.: 'print' pc 59901 (gen/nqp-actions.pir:0)␤

[04:17] *** stepnem joined
[04:18] <diakopter> nqp: hi; say(3)

[04:18] <p6eval> nqp: 3␤

[04:18] <diakopter> nqp: hi; say(333)

[04:18] <p6eval> nqp: 333␤

[04:18] <diakopter> weird

[04:21] *** pdcawley_ joined
[04:21] <pmichaud> nqp has difficulties with barewords at times

[04:21] <pmichaud> it looks at "hihi" as being a package lookup

[04:21] <diakopter> ok

[04:24] *** frew joined
[04:25] *** meppl left
[04:29] *** pdcawley left
[04:29] *** pdcawley_ is now known as pdcawley

[04:33] *** pdcawley_ joined
[04:42] *** gfx joined
[04:43] *** valnour joined
[04:49] *** meppel left
[04:49] *** pdcawley left
[04:49] *** pdcawley_ is now known as pdcawley

[04:55] *** envi^home joined
[05:02] *** snarkyboojum left
[05:02] *** quietfanatic left
[05:04] *** astrojp left
[05:23] *** snarkyboojum joined
[05:30] *** snarkyboojum left
[06:04] *** am0c left
[06:12] *** Wolf2k_Pinged joined
[06:15] *** gfx left
[06:16] *** gfx joined
[06:21] *** Wolfman2000 left
[06:25] <Wolf2k_Pinged> eternaleye: I finally have...a pinged nick. Hang on.

[06:25] *** Wolf2k_Pinged is now known as Wolfman2000

[06:26] *** gfx left
[06:26] <Wolfman2000> eternaleye: Trying this again. I finally have a better grasp on DB access through Catalyst and DBIC. Screenshot coming soon.

[06:28] <Wolfman2000> eternaleye: http://i38.tinypic.com/1zoypfb.png

[06:28] *** Thyssen left
[06:37] *** TiMBuS joined
[06:39] *** beggars joined
[06:41] *** tekie joined
[06:42] *** tekie left
[06:50] *** justatheory left
[06:51] <Wolfman2000> off to bed...I have a better idea on things at least.

[07:00] *** am0c joined
[07:07] *** frew left
[07:07] *** seanstickle joined
[07:20] *** Su-Shee joined
[07:20] <Su-Shee> good morning.

[07:34] *** seanstickle left
[07:39] *** NorwayGeek joined
[07:45] *** Exodist left
[07:53] <moritz_> moin

[08:00] *** beggars left
[08:10] *** stephenlb left
[08:11] *** payload left
[08:24] *** payload joined
[08:26] *** payload left
[08:26] *** payload1 joined
[08:27] *** NorwayGeek left
[08:36] *** NorwayGeek joined
[08:51] *** mariuz joined
[08:55] *** payload1 left
[08:55] *** payload joined
[08:55] *** namenlos joined
[08:57] <Juerd> Wolfman2000: IRC does not waste bandwidth :)

[08:57] <Juerd> Wolfman2000: It costs next to nothing.

[08:57] *** payload left
[08:58] <Juerd> Wolfman2000: Do a "ps axu | grep irssi | grep -vi screen" on feather :)

[08:58] *** payload joined
[09:04] *** payload left
[09:05] *** payload joined
[09:10] *** payload1 joined
[09:12] *** reid05 left
[09:13] *** reid05 joined
[09:13] *** pnate2 joined
[09:13] *** pnate left
[09:16] *** lestrrat is now known as lest_away

[09:26] *** payload left
[09:46] *** pnate joined
[09:51] *** rgrau left
[10:00] *** pnate2 left
[10:02] *** payload1 left
[10:14] *** envi^office left
[10:24] *** masak joined
[10:24] <masak> oh hai, #perl6.

[10:25] <moritz_> good morning masak, good noon #perl6 :-)

[10:25] <masak> :P

[10:29] *** JimmyZ left
[10:36] <jnthn> morning

[10:36] <masak> lolitsjnthn

[10:37] <jnthn> yayitsmasak

[10:39] *** dakkar joined
[10:41] <dalek> book: 3d5943c | moritz++ | src/basics.pod:

[10:41] <dalek> book: [basics] fix two POD errors

[10:41] <dalek> book: review: http://github.com/perl6/book/commit/3d5943c4c2a3109da6daf9aa1696e1cb5661f321

[10:49] *** mberends joined
[10:50] * mberends is teaching Perl 5 using Padre :-)

[10:50] <jnthn> :)

[10:53] <dalek> book: c4a1247 | moritz++ | src/basics.pod:

[10:53] <dalek> book: [basics] use single quotes consitently; typo

[10:53] <dalek> book: review: http://github.com/perl6/book/commit/c4a12477f6db4bc4dc7353acab82724ac00cff1e

[10:54] *** meppl joined
[10:54] *** pmurias joined
[10:54] *** payload joined
[10:58] *** IllvilJa left
[11:09] <sjohnson> hi masak

[11:09] <masak> Juerd: there's a trick to remembering the meaning of 'perfect'/'imperfect'/'plusquamperfect'.

[11:09] <masak> sjohnson: hi there! nice to see you.

[11:09] <sjohnson> you too

[11:10] *** TiMBuS left
[11:11] *** lest_away is now known as lestrrat

[11:12] *** IllvilJa joined
[11:15] *** NorwayGeek left
[11:21] <Juerd> masak: Do you want to share that trick?

[11:27] <Su-Shee> Juerd: perfect as in "perfectly ended past", imperfect as in "not perfectly ended yet" and plusquamperfect "even more (plus) in the past than perfect" :)

[11:28] <Juerd> Well, that I know, but those don't come natural to me.

[11:28] <Juerd> Dutch doesn't match those semantics :|

[11:29] <Su-Shee> contemporary spoken german doesn't as well. noone really uses plusquamperfect for example.

[11:30] <Su-Shee> (or future II for that matter)

[11:30] *** pnate left
[11:32] *** SmokeMachine joined
[11:37] *** NorwayGeek joined
[11:45] *** cookys joined
[11:49] *** stepnem left
[11:56] * Woodi like Year 1984 language simplification proposal: good, 1+good, 2+good, without-good, 1+without-good, 2+without-good; 3+ is forbiden

[11:59] *** payload left
[12:00] <jnthn> That's 10+without-good

[12:00] <jnthn> OH NOES I did a forbidden!

[12:01] <jnthn> If the attempt was to restrict the things people could think, using numbers is kinda a fail. It's far too easy to figure out what the next strongest possibility is. :-)

[12:03] <Woodi> THEY try to make ppls do not thing and simplification of language was way to do it. so, easy or not ppls should do not think

[12:05] <Woodi> was realy clever vision of future in that book :>

[12:05] *** envi^home left
[12:06] <Woodi> btw. anyone thinked about writing starship hardvare control library ?

[12:06] <Woodi> s/hv/hw/g

[12:06] *** payload joined
[12:07] *** envi^home joined
[12:08] <Woodi> you know, a2d2 was using some interface in that movies...

[12:08] <Woodi> StarTreak, StarGate...

[12:08] <Woodi> even Section 1 :)

[12:18] *** stepnem joined
[12:18] *** stepnem left
[12:26] *** IllvilJa left
[12:27] <masak> Juerd: learning what they mean. :) so, 'perfect' means 'finished', as in 'I have Xed'. 'imperfect' means 'unfinished', as in 'I was Xing'. note how that describes a still ongoing action. 'plu(squam)perfect' means 'more than finished', i.e. one step removed from the perfect form, i.e. 'I had Xed'.

[12:27] <masak> ah, and Su-Shee++ said the same, basically.

[12:29] <masak> Woodi: ISTR it was 'good', 'plusgood', 'doubleplusgood', 'ungood', 'plusungood' and 'doubleplusungood'.

[12:29] <masak> Woodi: incidentally, that's basically a 1-to-1 mapping of how Esperanto does it. :)

[12:30] <jnthn> Great. Now I want to learn Esperanto so I can tell people stuff was "trippleplusungood" :-)

[12:31] <masak> :)

[12:31] <jnthn> masak: Is it generative like that though?

[12:31] <jnthn> Or not so much?

[12:31] <masak> jnthn: oh, the generative part is very crucial. but it works differently.

[12:31] *** payload left
[12:31] <jnthn> Ah, OK. :-)

[12:32] *** payload joined
[12:33] <masak> jnthn: 'tre' and -eg- marks intensification. mal- marks opposites. so you have (for the above examples) 'bone', 'tre bone', 'bonege', 'malbone', 'tre malbone', 'malbonege'.

[12:34] <jnthn> Ah, so it's not quite using numbers?

[12:34] <masak> no.

[12:34] <jnthn> Ah, OK. :-)

[12:34] <jnthn> Cool.

[12:34] *** hcchien left
[12:34] <jnthn> "mal" and "bon" and "tre" all look somewhat like near-takings from various Romance languages.

[12:35] <masak> they are.

[12:35] <masak> though people tend to trip up on 'mal', thinking it has something to do with evil.

[12:35] <masak> or unhealth.

[12:35] <jnthn> Guess that maybe makes it easier for a certain group of people to learn.

[12:35] *** stepnem joined
[12:36] <jnthn> Oh yes, I think mal = ill in Spanish. Or something like that.

[12:36] <jnthn> The thing that came to mind more immediately was malhereusement (sp?) in French.

[12:36] <masak> aye.

[12:38] <masak> I've been writing a bit of Perl 5 in the past few days.

[12:38] <masak> two things have started tripping me up.

[12:38] <jnthn> Oh, 'cus of differences between 5 and 6?

[12:38] <masak> 1. sigils. when I don't think about it, I write the sigils unchanged, not by-result.

[12:39] <masak> 2. commas after blocks in map/grep/sort.

[12:39] <jnthn> Curious. I have other trip-ups, but usually not those ones.

[12:39] *** hcchien joined
[12:39] <masak> aye, it's a bit strange. :)

[12:39] <masak> all the other things I can handle.

[12:40] <jnthn> I've typed . instead of -> more than once.

[12:40] <moritz_> masak: I usually catch the sigils while writing, butcommas after map/grep/sort blocks is something I often tripped over

[12:40] <jnthn> I would mention that I sometimes miss off the semi when doing eval { ... } <newlne>

[12:40] <jnthn> But I don't think that's Perl 6's fault.

[12:40] * moritz_ too

[12:41] <jnthn> I managed that one before I was writing Perl 6 too.

[12:41] <moritz_> right, that's an inconsistency in Perl 5

[12:41] *** pmurias left
[12:42] <jnthn> The other thing that sneaked into my Perl 5 in the last week was an attempt to use prefix:<+>. :-)

[12:43] <masak> you can. :)

[12:43] <masak> but it probably won't do much.

[12:43] <moritz_> yes, it's a noop

[12:43] <moritz_> it just parses differently

[12:43] <jnthn> :-)

[12:43] <moritz_> print (localtime)[2]; # boom!

[12:43] <masak> as for the semicolons-after-closures, I make a point of always putting them in. even when the closing brace is last-on-the-line.

[12:44] <moritz_> masak: even after if ($stuff) { }; ?

[12:44] <masak> moritz_: er. no. but that's a special form. :)

[12:44] <moritz_> it's a block

[12:44] <moritz_> every block is a closure

[12:44] <masak> yes.

[12:45] <masak> but 'if' is parsed as a special statement.

[12:45] *** NorwayGeek left
[12:46] <masak> I just got the urge to tell #perl that we've decided to change the name of Perl 6 to something else. :P

[12:48] <masak> 'Perlcaml Prime', perhaps.

[12:48] *** hcchien left
[12:48] <moritz_> perl-ng :-)

[12:48] <masak> or just 'ng', perhaps.

[12:49] <moritz_> no, people would confuse that with the rakudo branch :-)

[12:49] <masak> better written 'ŋ' :)

[12:49] <moritz_> and ng.org is already taken => no go

[12:49] <masak> moritz_: I don't think I can have 'perl' in the name, since part of their criticism is that Perl 6 isn't Perl.

[12:50] <masak> moritz_: but I wouldn't mind confirming their predjudices about us.

[12:50] <huf> call it p6rl. 

[12:50] <pmichaud> good morning, perl6

[12:50] <masak> Perl 6 being an 'academic' language, for example.

[12:50] <masak> pmichaud: morning.

[12:50] <moritz_> well, I don't really mind their criticism

[12:50] <masak> huf: but we already are.

[12:50] <huf> problem solved then ;)

[12:51] <masak> moritz_: I don't mind it when it's directed at us. I mind it when it afflicts innocents.

[12:51] <jnthn> hi pmichaud 

[12:51] <moritz_> we should really take care that newcomers don't get between our frontiers

[12:52] <masak> nod.

[12:52] <jnthn> I'm guessing the use implementation didn't quite make it last night?

[12:52] *** lichtkind joined
[12:52] <Su-Shee> I would very much mind perl6 being an academic language.

[12:52] *** cognominal joined
[12:52] <masak> Su-Shee: sure. that's just their (#perl's) way of rationalizing their disinterest in Perl 6.

[12:53] <jnthn> Su-Shee: I think Perl 6 is too useful to have a shot at that. ;-)

[12:53] <pmichaud> jnthn: no, it didn't make it again.  got really tired; think I'm fighting off a cold or something

[12:53] *** hcchien joined
[12:53] <pmichaud> anyway, I'm up for it now, so about to get started

[12:53] <masak> Su-Shee: they don't even mean 'in academia', they mean 'experimental' or 'hypothetic'.

[12:53] <jnthn> pmichaud: Eww. It's the time of year for that.

[12:53] <moritz_> masak: maybe we should offer them a ceasefire - they stop misinforming newbies about Perl 6, and we stop misinforming newbies about Perl 5 :-)

[12:53] <Su-Shee> masak: well, many people plainly wait until they get a feel of "it's ready". 

[12:54] <masak> moritz_: heh. :)

[12:54] <Su-Shee> mr shee will plainly not even start to touch perl 6 until there's a working database module, for example.

[12:54] <masak> Su-Shee: indeed. I should work a bit on the database module.

[12:54] <jnthn> pmichaud: I've been waiting for my sort-of-almost-cold-thing to turn into a real one for a couple of weeks now...but nope.

[12:54] *** NorwayGeek joined
[12:55] <Su-Shee> masak: "having an environment" was the reason why reddit changed from lisp to python - not the power and elegance of the language itself. 

[12:56] <pmichaud> well, I did finally get a restful night's sleep for the first time in quite a few days, so hoping that will help

[12:56] <pmichaud> anyway, I'm going to disappear for a bit to work on use :)

[12:56] <jnthn> Yay. :-)

[12:57] *** kidd` left
[13:00] <masak> Su-Shee: yes, it's a powerful argument. and one which is easy to understand.

[13:00] *** takadonet joined
[13:00] <takadonet> morning all

[13:00] <moritz_> and a lot of work to change.

[13:01] <masak> Su-Shee: that's why I think pmichaud++ is doing the right thing with Rakudo Star -- short-circuiting the Catch 22 of apps/interest by saying "here's something that works, use it!".

[13:01] <moritz_> and hopefully it's also a sign that says "start developing libraries NOW"

[13:02] <masak> let's make such a sign.

[13:05] <frettled> «Book urgently in need of a new home»

[13:06] <frettled> Let the sign be a 'shopped image of book with a stylized house drawn around him.

[13:06] *** frettled sets mode: +o masak

[13:06] <Su-Shee> masak: I ran into that argument the last time I think when I tried dylan. nice language - and nothing really there. and I realized how much _all_ my projects profit from having a date module, a ssl module and so on.

[13:09] <masak> Su-Shee: nod.

[13:09] <masak> Su-Shee: that's why I think my Temporal rewrite is important.

[13:12] <Su-Shee> Temporal is like DateTime?

[13:12] <masak> Su-Shee: it's the name of the module containing DateTime, yes.

[13:13] *** payload left
[13:13] <jnthn> masak: I'm glad you've taken on working on that. It does matter.

[13:17] <takadonet> I think it's time to work on BioPerl6 again

[13:17] <masak> takadonet++

[13:20] <takadonet> Just don't tell me boss ok? :)

[13:20] <masak> jnthn: today is Temporal Tuesday, so I'll be giving the fork some love today.

[13:20] *** _eMaX_ joined
[13:20] <masak> takadonet: my lips are sealed. :)

[13:21] <jnthn> Temporal Tuesday! \o/

[13:22] <jnthn> .oO( Web.pm Wednesday tomorrow )

[13:22] <masak> indeed.

[13:23] <masak> see? the scheme is so easy, I don't even need to tell you how it works. :P

[13:23] <Su-Shee> "Webnesday"? ;)

[13:29] *** pnate joined
[13:33] *** hcchien left
[13:34] *** ruoso joined
[13:35] *** lichtkind left
[13:36] *** NorwayGeek left
[13:36] *** NorwayGeek joined
[13:38] *** hcchien joined
[13:40] *** payload joined
[13:43] <moritz_> thirsty thursday => beer :-) ?

[13:45] <jnthn> Thursday *is* the day my pm group tends to meet. ;-)

[13:45] <jnthn> Which usually does indeed mean beer. :-)

[13:45] <masak> I could drink some juice on Thursday...

[13:45] <moritz_> un thursday we usually have some geek (non-perl) meeting where we order pizza

[13:46] <jnthn> Mmm. Pizza. :-)

[13:46] *** payload left
[13:46] <moritz_> s/un/on/

[13:46] *** payload joined
[13:47] <moritz_> I told them about some aspects of Perl 6, like junctions and grammars

[13:47] <takadonet> what does "Use of type object as value" error message mean?

[13:47] <moritz_> the junctions gave some WTFy reactions :-)

[13:47] <moritz_> takadonet: it means that you used a type objects as a value

[13:47] <jnthn> takadonet: Pretty much what it says.

[13:47] <jnthn> lol

[13:47] <moritz_> like my Type $x; $x + 3;

[13:47] <moritz_> rakudo: my Int $x; $x + 3;

[13:47] <p6eval> rakudo 929998: Use of type object as value␤

[13:48] <moritz_> rakudo: my Int $x; say $x + 3;

[13:48] <p6eval> rakudo 929998: Use of type object as value␤3␤

[13:48] <moritz_> note that it's a warning, not an error

[13:48] <jnthn> takadonet: Basically, you're dealing with something like a Foo rather than an instance of Foo.

[13:48] <takadonet> hmmm

[13:48] <jnthn> To the degree that type objects aren't instances anyway.

[13:48] *** payload left
[13:48] *** payload joined
[13:50] *** IllvilJa joined
[13:51] <Wolfman2000> *yawn* morning. masak: I have database connections with Catalyst and DBIC working. The upcoming Pastebin website is still a go right now.

[13:51] *** _eMaX_ left
[13:56] *** pnate2 joined
[13:56] <masak> Wolfman2000: cool. I plan to put together a Web.pm pastebin this week.

[13:56] <Wolfman2000> masak: ...that means we're going to be competing then

[13:56] <masak> Wolfman2000: competition in here is usually quite mutually beneficial.

[13:57] <Wolfman2000> ...in other words, you think I can learn something from you and vice~versa

[13:57] <Wolfman2000> ...I do wonder how you plan on a pastebin without a Perl 6 DB access method anyway

[13:58] <moritz_> there is one.

[13:58] <masak> Wolfman2000: I have DB access.

[13:58] *** payload left
[13:58] <masak> Wolfman2000: you can have it, too. :)

[13:58] *** payload1 joined
[13:58] <Wolfman2000> moritz_: ...which one?

[13:58] <masak> see? it's already mutually beneficial. :)

[13:58] <masak> Wolfman2000: http://use.perl.org/~masak/journal/39686

[13:59] <Wolfman2000> ...sqlite only?

[13:59] <masak> Wolfman2000: Tene++ just made sure mysql works with parrot.

[13:59] <takadonet> "???" syntax is to produce a warn of that define stub/method correct?

[13:59] <masak> Wolfman2000: still haven't plugged that into Squerl, though.

[14:00] <masak> takadonet: correct.

[14:00] <moritz_> sqlite should be sufficient for a paste bin

[14:00] <Wolfman2000> ...yep. competition.

[14:01] <Wolfman2000> one pastebin with Catalyst, mysql, and a syntax highlighter for Perl 6 running on Perl 5.

[14:01] <Wolfman2000> The other using pure Perl 6 with Web.pm and Squerl.

[14:01] <masak> Wolfman2000: I don't want you to get your hopes up too high. putting together a pastebin, even a small one, might be quite tough.

[14:01] <masak> with Web.pm, I mean.

[14:02] <Wolfman2000> masak: I was able to make 4 other websites on my own and contribtue to others. What will make Web.pm harder to use?

[14:02] <masak> I wonder how much of the currently felt instabilities come from HTTP::Daemon.

[14:02] <masak> Wolfman2000: it's quite untested.

[14:03] <Wolfman2000> masak: ...true. Not much of Perl 6 IS tested.

[14:03] <masak> Wolfman2000: right. and this is not really a part of Perl 6, but a lib built on top of Rakudo.

[14:03] <takadonet> man I love rgrep :)

[14:05] *** maluco joined
[14:05] *** payload1 left
[14:05] *** payload joined
[14:07] *** pnate left
[14:08] *** payload left
[14:08] *** payload joined
[14:08] *** PerlJam left
[14:08] <takadonet> rakudo: sub warn{???};warn();

[14:08] <p6eval> rakudo 929998: Unable to parse block; couldn't find final '}' at line 2, near "???};warn("␤in Main (file <unknown>, line <unknown>)␤

[14:08] *** PerlJam joined
[14:09] <masak> rakudo: sub foo() { ??? }; foo

[14:09] <p6eval> rakudo 929998: Unable to parse block; couldn't find final '}' at line 2, near "??? }; foo"␤in Main (file <unknown>, line <unknown>)␤

[14:09] <masak> hm.

[14:09] <jnthn> masak: Don't think we parse ??? and !!! in Rakudo.

[14:09] <jnthn> Only ...

[14:09] <jnthn> I recall trying to put it in and running into parsing issues.

[14:09] <takadonet> ahhh

[14:10] <masak> jnthn: oki. I knew I'd used '...', so I guess I assumed that the other two were there, too.

[14:10] *** Thyssen joined
[14:10] <jnthn> masak: Yeah, my initial attempt was to add all three, but I had to back off.

[14:10] <takadonet> Well we were using '???' in Bioperl6 . Looks like I got to take that out

[14:10] <jnthn> masak: If we're lucky, the new grammar/grammar engine will allow them to be easily put in.

[14:11] <masak> I'm sure it will. :)

[14:12] <masak> after ng lands, we'll have no parsing bugs left in RT.

[14:12] <masak> I'll wake up one morning and feel slightly empty inside.

[14:12] <masak> and I'll look at my inbox and see that 318 bugs were fixed that night.

[14:13] <masak> that's when I'll know: the ng has landed.

[14:13] <jnthn> masak: 318? :-)

[14:13] <masak> or so. :)

[14:14] <jnthn> That's a bit ambitious. :-)

[14:14] <jnthn> We'll get a lot of 'em with ng though :-)

[14:14] <masak> 318 is a lot. :)

[14:14] * masak teaches the course "Impeccable logic" in his spare time

[14:17] <Wolfman2000> ...ng still hasn't landed yet?

[14:17] <pmichaud> jnthn: ping

[14:17] <jnthn> pmichaud: pong...and good timing, I just finished my @other-task :-)

[14:17] <jnthn> Like, 2 mins ago. :-)

[14:17] <PerlJam> Wolfman2000: did you think it would happen over night?

[14:17] <Wolfman2000> PerlJam: would have been nice

[14:17] <pmichaud> jnthn: when I compile Test.pm to Test.pir, the subs all appear to be in the global namespace instead of the 'Test' namespace

[14:18] *** pmurias joined
[14:18] <PerlJam> Wolfman2000: you *must* believe in magic  :)

[14:18] <jnthn> pmichaud: That's...odd.

[14:18] <pmurias> ruoso: hi

[14:18] <pmichaud> I don't think I changed anything that would cause that

[14:19] <ruoso> hi pmurias 

[14:19] <Wolfman2000> PerlJam: In what way?

[14:19] <jnthn> pmichaud: Oh, interesting.

[14:19] <jnthn> pmichaud: It looks like

[14:19] <jnthn> module Foo; sub test { } # gets it wrong

[14:19] <jnthn> module Foo { sub test { } } # gets it right

[14:20] <pmichaud> okay, checking.

[14:20] <pmurias> ruoso: do you think supporting use Foo:from<perl5> on mildew-js is important?

[14:20] <ruoso> I don't see how it could work

[14:20] <ruoso> unless you have perl5 embedded in the js vm

[14:21] <pmichaud> jnthn: oh, I see the problem

[14:21] <pmichaud> we switched package_def to call <.newpad>  in the ; case but then didn't change the actions logic

[14:21] <jnthn> pmichaud: I bet it's to do with the .newpad .finishpad

[14:21] <pmichaud> right

[14:21] <pmichaud> the package_def action is still creating its own block instead of using the one from .newpad

[14:21] <pmurias> ruoso: currently we have the js vm embeded in perl5

[14:22] <pmichaud>         my $block := $<block>

[14:22] <pmichaud>                      ?? $<block>.ast

[14:22] <pmichaud>                      !! PAST::Block.new( $<statementlist>.ast, :node($/) );

[14:22] <ruoso> pmurias, but can you callback?

[14:22] <pmichaud> that PAST::Block.new should be popping the block created by <.newpad>

[14:22] <jnthn> So it should.

[14:22] <pmichaud> heh

[14:23] <pmichaud> looks like I can just force a call to blockoid to get it :-)

[14:23] <pmurias> ruoso: that's how &say works

[14:23] <ruoso> pmurias, well... it it's possible, why not?

[14:24] <pmurias> v8 is not stackless so we might have some problems with that

[14:24] <jnthn> pmichaud: OK...so that fixes it for you?

[14:25] <pmichaud> don't know yet... will know in a sec

[14:25] <jnthn> 'k

[14:26] <pmurias> ruoso: http://svn.pugscode.org/pugs/v6/re-mildew/TESTS-js - the tests mildew-js passes

[14:34] <jnthn> pmichaud: I haz a fix, if you don't already.

[14:34] *** tlb joined
[14:35] <pmichaud> oh, sorry

[14:35] <pmichaud> yes, my fix worked.

[14:35] <jnthn> Mine too. ;-)

[14:35] <pmichaud> (forgot to come back here and report)

[14:35] <pmichaud> I just pushed mine

[14:35] <PerlJam> dueling patches!

[14:35] <jnthn> Two fixes enter. One fix leaves.

[14:36] <pmichaud> and have a 'use' that is sufficient to get t/01-sanity/99-test-basic.t

[14:36] <pmichaud> (it's really a major cheat at the moment)

[14:36] <Wolfman2000> ...more friendly competition between the two of you I assume?

[14:36] <pmichaud> friendly?  hardly!  jnthn++ is my arch nemesis

[14:36] <jnthn> When it shows up on github I'll compare it with fine. :-)

[14:37] <pmichaud> :)

[14:37] <jnthn> ;-)

[14:37] <ruoso> pmurias, that's cool... 

[14:37] * ruoso is a bit sad because $work is consuming all his time

[14:37] <pmichaud> jnthn: btw, having just watched a trace output....   .new is _really_ expensive.  :-(

[14:38] <pmichaud> we should probably fix that at some point soon.

[14:38] <jnthn> pmichaud: Yeah

[14:38] <jnthn> pmichaud: Note that Code.new is a custom constructor.

[14:38] <jnthn> pmichaud: Not going through the normal polava.

[14:38] <pmichaud> just creating the :DEFAULT pair was a pain (so I took it out)

[14:38] <jnthn> pmichaud: So at least *that* isn't horribly costly.

[14:38] <jnthn> orly? Ouch.

[14:39] <pmichaud> yes, I think it's better to short-circuit :DEFAULT since it's the common case

[14:39] <jnthn> Me too.

[14:39] *** Thyssen left
[14:40] <jnthn> So pmichaud Should I expect 99-test-basic.t to run here

[14:40] <jnthn> ?

[14:40] <jnthn> erm, s/So //

[14:40] <pmichaud> test 10 fails, fixing it now

[14:40] <jnthn> None of them run here.

[14:40] <pmichaud> did you reconfigure?

[14:40] <jnthn> "load_bytecode" couldn't find file 'Test.pir'

[14:40] <pmichaud> ah

[14:40] <jnthn> yeah

[14:40] <jnthn> I'm pretty sure I did

[14:41] * jnthn realcleans just in case

[14:41] <pmichaud> I need to fix the makefile to automatically build Test.pir

[14:41] <jnthn> Or do I need a newer nqp-rx or something?

[14:41] <jnthn> Ah, OK.

[14:41] <pmichaud> pushed

[14:42] <jnthn> pulled

[14:42] <jnthn> pmichaud: lol. Our dueling patches - some whitespace differences aside - were identical.

[14:43] <pmichaud> heh

[14:44] <jnthn> pmichaud: erm.

[14:44] <jnthn> pmichaud: nmake test not only made Test.pir but also did an svn up :-)

[14:44] <pmichaud> yeah, it pulled the spectests

[14:44] <pmichaud> I'll clean that up a bit also.

[14:45] <jnthn> No worries then.

[14:45] <jnthn> And now 99 runs up to test 9 here too.

[14:45] <jnthn> Excellent.

[14:45] <jnthn> Now I can haz spectests? ;-)

[14:45] <pmichaud> getting closer

[14:45] <pmichaud> adding .abs now

[14:46] <jnthn> pmichaud: lol. make spectest actually does run.

[14:46] <jnthn> And the fail is beyond epic.

[14:46] <pmichaud> to be expected.

[14:47] * masak cheers pmichaud and jnthn on

[14:47] <jnthn> pmichaud: We pass 93 tests! \o/

[14:47] <pmichaud> lol

[14:47] <jnthn> ...out of 30,000 ;-)

[14:47] <pmichaud> that many?!?

[14:47] <jnthn> Tests. Not test files. :-)

[14:47] <pmichaud> ...that many?!?

[14:47] <jnthn> :-)

[14:48] <jnthn> To say we didn't even put things like given/when and gather/take and for loops back yet, it's not so surprising. :-)

[14:49] <jnthn> (That hardly anything runs).

[14:49] <jnthn> On the up side, the spectest run is down to 78 seconds for me now.

[14:49] <pmichaud> lol

[14:49] <PerlJam> jnthn++

[14:49] <takadonet> hehe

[14:49] <pmichaud> okay, just pushed Any.abs

[14:49] <PerlJam> jnthn: now if you could just keep it there (approximately)    :-)

[14:50] <pmichaud> oh, I did that the hard way :-(

[14:50] <masak> .oO( two weeks till release, and Rakudo doesn't have for loops yet. I'm not worried. )

[14:50] <pmichaud> masak: if we're not far enough along by the release date, we release the non-ng version :)

[14:51] <masak> pmichaud: aye. :)

[14:51] <pmichaud> it will be a very interesting week, though.

[14:51] <jnthn> Aye, same.

[14:51] <masak> pmichaud: thing is, I kinda want you to succeed.

[14:51] <pmichaud> and I think it's just 9 days to release, yes?

[14:51] <PerlJam> pmichaud: with a note that says, "there are no visible changes from last release"?

[14:51] <masak> pmichaud: oh, right.

[14:51] <pmichaud> masak: oh, believe me, I really really really want to succeed :)

[14:51] <jnthn> All sleep is cancelled!

[14:51] <pugs_svn> r29044 | pmurias++ | [mildew-js] Scalars start filled with SMOP__NATIVE__bool_false 

[14:52] <pmichaud> being able to release ng as the november release would be a huge accomplishment.  maybe not likely, but definitely huge

[14:52] * masak quits babbling and leaves pmichaud and jnthn alone with the awesome work

[14:53] <jnthn> pmichaud++ # 99-test-basic.t passes :-)

[14:53] *** mubot left
[14:54] <pmichaud> yeah, but I commented out a few of the tests from 99-test-basic.t .  I'm not sure how many of those I feel ought to be available for 01-sanity

[14:55] <pmichaud> and oops, I forgot to credit KyleHa for the 99-test-basic.t tests.  

[14:55] <pmichaud> I need to do that in the log somewhere.

[14:55] *** kosmofield joined
[14:55] <pmichaud> okay, what was the issue with 'is export' on methods?

[14:56] <pmichaud> oh, I think I know.

[14:56] <jnthn> Finding the correct ns.

[14:56] <jnthn> Same as with lexical subs.

[14:56] <pmichaud> is there a way to discover that a given Parrot Sub is part of a multisub ?

[14:56] <pmichaud> i.e., without looking it up in its namespace?

[14:57] <pmichaud> we can't always go running to the namespace to decide that.

[14:57] <jnthn> Don't believe so.

[14:57] <pmichaud> can we flag them somehow?

[14:57] <pmichaud> or have something in the signature object that says "oh, this is a multi" ?

[14:57] <jnthn> Oh, is that the main reason we go digging in the NS?

[14:58] <pmichaud> afaict, it's the only reason for digging in the NS

[14:58] <jnthn> It doesn't belong in the signature object really...more a property of the code object.

[14:58] <pmichaud> oh, that would work too.

[14:58] <jnthn> But since we construct all of those, and can know when we make them if it's a multi or not...

[14:58] <jnthn> I could very easily add that.

[14:58] <pmichaud> I don't need to know which multi it's a member of... because any given Code object may be a member of many multis

[14:58] <jnthn> Yes.

[14:58] <jnthn> Just whether it's a multi member.

[14:58] <pmichaud> I just need to know "hey, this is a multi, so it gets added differently to namespaces"

[14:59] <pmichaud> attribute on Code sounds awesome.

[14:59] <jnthn> Just attr? We'll get at it with getattribute?

[14:59] <jnthn> Or accessor?

[14:59] <pmichaud> accessor is fine

[14:59] <pmichaud> you choose :)

[14:59] <jnthn> Let's try doing this as .multi

[14:59] <pmichaud> okay

[14:59] <pmichaud> we'll want to update the synopses, too :)

[15:00] <jnthn> .multi is already in the synopses.

[15:00] <pmichaud> then.... there ya go!

[15:00] <jnthn> The question is if an individual candidate of a multi should claim to be multi.

[15:01] <jnthn> If yes, that's a semantic change from what Rakudo master does.

[15:01] <pmichaud> I could argue that it's a multi of one :)

[15:01] <jnthn> But I doubt it'll bite anyone. :-)

[15:01] *** cognominal left
[15:02] <pmichaud> I can't find .multi in the synopses with a quick ack... but it's not vitally important right now :)

[15:02] <jnthn> pmichaud: S12

[15:03] <jnthn> in introspection section

[15:03] *** zamolxes joined
[15:04] <pmichaud> okay

[15:04] <pmichaud> wfm

[15:04] <masak> ooh! can I rename Perl 6 to "Proxylon"? :D

[15:05] <pugs_svn> r29045 | pmurias++ | [mildew-js] start of RoleHOW, 6/7 tests from t/role.t pass 

[15:05] <pmichaud> sounds like a new chemical.  or a Transformer(TM).

[15:05] <masak> pmichaud: yes, something like that.

[15:06] <masak> maybe "Proxylon VI".

[15:07] <jnthn> pmichaud: got a patch, make test'ing it.

[15:07] <jnthn> pmichaud: Will need to tweak this a little when I do multi-methods, but that's no biggie (multi-methods shouldn't be a big deal either...)

[15:07] <pmichaud> jnthn: okay, great.  The objects passed to the export trait... are they Code/Regex/Block  or are they Parrot Subs ?

[15:07] <jnthn> They're wrapped.

[15:07] <pmichaud> excellent

[15:07] <pmichaud> okay, methods become easier then :)

[15:08] <pmichaud> and.... oooh!  I get to use 'vivify' again!

[15:08] <jnthn> Wow, it's almost as if it's like, really useful. :-)

[15:09] <pmichaud> I'm trying to get    method xyz() is export { ... }   to work again.  Shortly after that we'll undoubtedly want   multi method xyz() is export { ... } 

[15:09] * colomon backlogs... 93 tests pass, woo-hoo!

[15:09] <pmichaud> so you might want to prepare your multi-method tweak :)

[15:09] <colomon> pmichaud: based on the trig work, I'm not convinced is export actually worked before.  :)

[15:09] <jnthn> pmichaud: bah, 5 lines added to implement .multi :-)

[15:09] <pmichaud> 5?!?  why so many?

[15:09] <pmichaud> ;-)

[15:09] <jnthn> :-P

[15:10] <pmichaud> colomon: based on what I know of rakudo, I'm convinced it didn't actually work before :)

[15:10] <pmurias> ruoso: do exceptions get rethrown if we don't set the .handled attribute?

[15:10] <jnthn> pmichaud: pushed

[15:10] *** KyleHa joined
[15:10] <colomon> pmichaud: fair enough, I was trying to be conservative in my critique.  :)

[15:10] <ruoso> pmurias, I think it's the catch block that has an implicit rethrow in the end

[15:10] <jnthn> pmichaud: OK, gonna have a 10 min break, make a cuppa tea and then do multi methods.

[15:10] <pmichaud> jnthn: okay, great

[15:11] <jnthn> ('cus yes, we will want them really quite soon)

[15:13] <pmurias> ruoso: that seems to be what the spec dictates, so the .handled flag on ControlExceptionReturn seems to be a bit pointless

[15:13] <ruoso> it gets rethrown *if* not handled

[15:14] * ruoso lunch &

[15:18] <pmichaud> jnthn: ummmm, ContainerDeclarand looks really wrongish to me.

[15:19] <pmichaud> oh, nm

[15:19] <pmichaud> I misread it

[15:19] <alester> I think Container Declarand plays for the Pistons.

[15:19] <pmichaud> ...and I was looking in the wrong directory anyway :-(

[15:20] <pmichaud> I think I might want to move all of the non-ng directories somewhere else

[15:21] * pmichaud does that.

[15:21] *** Patterner left
[15:21] <moritz_> btw you were passing a few spectests even before 'use Test;' worked

[15:21] *** Psyche^ joined
[15:21] *** Psyche^ is now known as Patterner

[15:21] <moritz_> because some tests for say and print don't use Test.pm

[15:21] *** pnate2 left
[15:23] *** cognominal joined
[15:26] <pugs_svn> r29046 | pmurias++ | [re-mildew] remove a TEST which test for nonspec $OUT 

[15:26] <pugs_svn> r29047 | pmurias++ | [mildew-js] exceptions, role.t passes 

[15:27] <pmichaud> still no easy way to get dalek to report the ng branch as well as master...?  :-|

[15:29] <jnthn> pmichaud: I'm curious how it looked wrongish. :-)

[15:29] <Wolfman2000> pmichaud: why not just have another bot that specifically listens to the other branch?

[15:29] <pmichaud> jnthn: sorry, I was looking at the non-ng branch

[15:29] <pmichaud> and.... well, nm.

[15:30] <jnthn> :-)

[15:30] <jnthn> OK...tea...metallica....multi methods.

[15:30] *** Achilles333 joined
[15:31] <pmichaud> might want to pull to get my recent changes

[15:32] <jnthn> Whoa...yes.

[15:32] <pmichaud> I just moved the old master files into a src/old/ subdir

[15:32] <jnthn> yup

[15:32] <jnthn> wfm

[15:32] <jnthn> I've been in the wrong place at least once. :-)

[15:32] <pmichaud> so I'm less likely to mistake them for the new ng ones in the future :)

[15:32] <pmichaud> same here :)

[15:33] <jnthn> token routine_declarator:submethod { <sym> <method_def> }

[15:34] <jnthn> pmichaud: For these, wondering if it might be nice to set a contextual.

[15:34] <jnthn> So method_def can create the right kinda thingy.

[15:34] <pmichaud> wfm

[15:34] <jnthn> 'k

[15:34] <jnthn> May as well do it while I'm in that bit of the code.

[15:34] <jnthn> rakudo: say Submethod

[15:34] <pmichaud> unless it's easy for submethod to simply modify what method_def returns

[15:34] <p6eval> rakudo 929998: Submethod()␤

[15:34] <jnthn> rakudo: say Submethod ~~ Method

[15:34] <p6eval> rakudo 929998: 0␤

[15:34] <jnthn> rakudo: say Submethod ~~ Routine

[15:35] <p6eval> rakudo 929998: 1␤

[15:35] <jnthn> pmichaud: Mmmm...no, it's a pain.

[15:35] <pmichaud> then go with the contextual

[15:41] *** zamolxes left
[15:42] *** payload left
[15:46] *** payload joined
[15:48] *** kosmofield left
[15:49] <pmichaud> jnthn: does Perl6MultiSub expect to have a list of Code objects or a list of Parrot Subs?

[15:50] <pmichaud> rephrased:  What's the proper procedure for creating a Perl6MultiSub and adding a Code object to it?

[15:50] <pmichaud> right now I have

[15:50] <pmichaud>     $P0 = new ['Perl6MultiSub']

[15:50] <pmichaud>     push $P0, codeobj

[15:51] *** nihiliad joined
[15:51] <jnthn> pmichaud: Now it wants a Code object.

[15:51] <jnthn> pmichaud: That should work.

[15:51] <pmichaud> hmmm, I'm getting a segfault.  I'll trace.

[15:51] <jnthn> pmichaud: alternatively, if you have a bunch of candidates to add in one go, there's the method.

[15:51] <jnthn> Oh, ouch.

[15:51] <jnthn> But possible.

[15:51] <jnthn> The code objects change rather than having Parrot subs in there was quite a notable one.

[15:52] <pmichaud> uh, vivify op fail

[15:52] <pmichaud> *ugh

[15:53] <pmichaud> It's "Perl6MultiSub", yes?

[15:53] <pmichaud> maybe vivify can't handle dynpmcs or hll-specific pmcs yet :-(

[15:53] <jnthn> pmichaud: yeah

[15:53] <jnthn> Oh.

[15:53] <jnthn> :-/

[15:53] <jnthn> Did you get a bt?

[15:54] <pmichaud> testing

[15:55] <pmichaud> #0  Parrot_Perl6MultiSub_elements (interp=0x9a7c008, pmc=0xb6be33a0) at perl6multisub.c:933

[15:55] <pmichaud> #1  0xb7e861b6 in Parrot_NameSpace_set_pmc_keyed_str (interp=0x9a7c008, pmc=0xb6be3558, key=0xb656ce94, value=0xb6be33a0) at ./src/pmc/namespace.pmc:134

[15:55] <pmichaud> #2  0xb7d411bb in Parrot_vivify_p_p_s_p (cur_opcode=0xb6d805c4, interp=0x9a7c008) at src/ops/experimental.ops:234

[15:55] <pmichaud> ...

[15:55] <pmichaud> oh, doesn't look like a vivify op problem

[15:56] <pmichaud> looks like something weird with setting the newly created MultiSub into the namespace

[15:56] <pmichaud> when it's as-yet empty, perhaps?

[15:56] <jnthn> oh!

[15:56] <jnthn> I bet I know what's wrong.

[15:59] <pmichaud> ooc, would things be easier if Perl6MultiSub extended ResizablePMCArray instead of MultiSub ?

[15:59] <jnthn> N

[15:59] <jnthn> *no

[15:59] <jnthn> It'd be horrible.

[16:00] <moritz_> pmichaud, Infinoid: i've sent a pull request on github to make dalek report rakudo's ng branch

[16:00] <moritz_> if it's correct, somebody just needs to merge it, and update the bot on feather3

[16:01] <masak> moritz_++

[16:03] <jnthn> pmichaud: oh hmm...it's not what I thought it would be. Hmm.

[16:03] <colomon> \o/   # then I can close the github ng commits tab I've had open in my browser for a week...

[16:03] <pmichaud> jnthn: okay, looking.

[16:03] <jnthn> oh, hang on

[16:03] <jnthn> I misread the bt.

[16:03] <pmichaud> when does candidates get created?

[16:04] *** am0c left
[16:04] *** am0c joined
[16:04] *** pmurias left
[16:04] <pmichaud> I'm guessing it doesn't get created until a push occurs

[16:04] <pmichaud> and so VTABLE_elements segfaults because candidates is uninitialized

[16:05] <jnthn> pmichaud: yeah, that's it

[16:05] <jnthn> got a patch

[16:05] <pmichaud> okay

[16:07] <pmichaud> btw, this change I'm making to export means it will be possible to have some multisub candidates exported while others are not

[16:07] *** meppl left
[16:08] <jnthn> pmichaud: sounds good

[16:08] <jnthn> pushed

[16:08] <pmichaud> pulled.

[16:09] *** payload left
[16:09] *** Achilles333 left
[16:09] <pmichaud> Cannot add non-Sub PMC to a MultiSub.

[16:10] <pmichaud> checking

[16:10] <pmichaud> nm, fail on this end

[16:11] <pmichaud> 102067 push P2, P17                                        P2=Perl6MultiSub=PMC(0xb6b967c0) P17=Perl6Sub=PMC(0xb6b979f4)

[16:11] <moritz_> we now pass t/spec/S03-operators/assign-is-not-binding.t

[16:11] <pmichaud> Cannot add non-Sub PMC to a MultiSub.

[16:11] <jnthn> huh

[16:11] <moritz_> and t/spec/S04-statements/until.t 

[16:12] <jnthn> pmichaud: But I use VTABLE_push in the normal candidate adding.

[16:12] <moritz_> adn three other files :-)

[16:12] <jnthn> pmichaud: oh, I see the problem.

[16:12] <jnthn> pmichaud: Is it a Method?

[16:12] <pmichaud> jnthn: I don't think it is at this point.

[16:12] <pmichaud> I'm just compiling Test.pm

[16:12] <jnthn> meh

[16:13] <moritz_> pmichaud: did you clean?

[16:13] <pmichaud> I can try that

[16:13] <jnthn> pmichaud: just comment out

[16:13] <jnthn>         if (!check_invokable(interp, sub))

[16:13] <jnthn>             Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,

[16:13] <jnthn>                     "Cannot add non-Sub PMC to a MultiSub.");

[16:13] <jnthn> The check is bogus now.

[16:13] <pmichaud> commenting out....

[16:14] <pmichaud> yay, that helped

[16:15] <jnthn> We may have multi methods.

[16:15] <jnthn> Yup

[16:16] <pmichaud> Just pushed fixes to export so that it properly handles methods and multis.

[16:16] <jnthn> Excellent.

[16:16] <jnthn> pmichaud++

[16:16] <Woodi> is echo '/opt/perl/bin/perl6' >> /etc/shells safe ? :) 

[16:17] <jnthn> pmichaud: Did you commit commetning out in P6MS too?

[16:17] <pmichaud> jnthn: yes, I think so.

[16:17] <jnthn> oh yes, you have. Good.

[16:18] <jnthn> Multi methods pushed too.

[16:22] <masak> here's a killer app for Perl 6 grammars: make a grammar for Java (6) programs, and create a program which allows you to sort methods in some desired order, possibly goverened by some arbitrary sort criterion written out as Perl 6 code.

[16:23] <masak> or just 'sort the methods in this class in the same order as in this interface'.

[16:24] <PerlJam> I want all of my ops output in precedence order  :)

[16:25] <pmichaud> jnthn: hmmmm

[16:26] <pmichaud> because methods no longer have the :method flag on them, they aren't showing up in the Parrot namespaces

[16:26] <pmichaud> > say -3.abs

[16:26] <pmichaud> Method 'abs' not found for invocant of class 'Integer'

[16:26] <lambdabot>   Not in scope: `say'

[16:26] <jnthn> pmichaud: Oh.

[16:26] <jnthn> pmichaud: ...but by default methods aren't supposed to go in the namespace, no?

[16:26] <TimToady> correct

[16:27] <pmichaud> sorry

[16:27] <pmichaud> I'll rephrase

[16:27] <jnthn> They're "has" scoped, and without an explicit "our" (which I didn't put back in)...

[16:27] *** moritz_ sets mode: +oo TimToady PerlJam

[16:27] <jnthn> (and which we never used to get right anyway...)

[16:27] <pmichaud> since methods no longer have the :method flag on them, they aren't found by P6object when trying to fake them into the Parrot classes

[16:27] <pmichaud> because P6object walks the method hierarchy

[16:27] <pmichaud> and it currently does it at the time the class is created

[16:27] <jnthn> :-/

[16:27] <pmichaud> while the methods get added much later

[16:27] <jnthn> Oh!

[16:27] <jnthn> Yeah

[16:27] <jnthn> ETOOSOON.

[16:28] <jnthn> Was going to say, how are you walking them, since they show up in the underlying parrot class.

[16:28] <pmichaud> I could have the registers done at CHECK time

[16:28] <jnthn> But yes, the timing will be an issue if you're handling this at "add_parent".

[16:28] <jnthn> You really want to do it at compose time I guess.

[16:29] <jnthn> Yes, that could do.

[16:29] <jnthn> You could also then collect them all together in a cheats file. ;-)

[16:29] <pmichaud> oh yes 

[16:29] <pmichaud> it's a parrot cheat, it goes there

[16:29] <pmichaud> those all occur at the end anyway

[16:29] <jnthn> Given that I'm not sure fudging bits into the Parrot namespaces is probably something we want to stop doing at some point.

[16:29] <pmichaud> I think we'll want to stop doing it, yes.

[16:30] <jnthn> erm, negatives fail...but you got my gist. :-)

[16:30] <pmichaud> I'll put them in as parrot cheats.

[16:30] <jnthn> wfm

[16:32] *** KyleHa left
[16:32] <pmichaud> okay, I need lunch

[16:32] <pmichaud> starting to feel productivity decline... lunch will help

[16:33] <jnthn> :-)

[16:33] <pmichaud> I'm glad we have Test.pm working.  And "is export".  On subs.  and methods.  and multis.

[16:33] <pmichaud> so far, it's been a good morning.  :)

[16:33] <TimToady> I'm still working on the incline part

[16:33] <jnthn> And multi methods.

[16:33] <pmichaud> okay, I'm gone to lunch.  bbiah

[16:34] <PerlJam> So, I know I've mentioned this before, but is there a compose-time block ala BEGIN, INIT, CHECK, etc?

[16:34] <TimToady> s/block/phaser/ and no

[16:34] <TimToady> (so far)

[16:35] <jnthn> PerlJam: What do you want to hook?

[16:35] <PerlJam> ah, we settled on calling those phasers?  interesting :)

[16:35] <pmichaud> PerlJam: oh, you should see the code... :)

[16:35] <TimToady> turns out to be important to rename them for several reasons

[16:35] <PerlJam> jnthn: nothing concrete, just thinking of various ways to settle method conflicts.

[16:35] <jnthn> pmichaud: Is it deliberate that we have Bool::True and True, but only Bool::False and not False? :-)

[16:35] <pmichaud> not deliberate

[16:35] <pmichaud> feel free to fix

[16:35] <TimToady> the passage describing them suddently became much clearer because "block" now always refers to the surrounding block

[16:36] <pmichaud> PerlJam: http://github.com/rakudo/rakudo/blob/ng/src/glue/phasers.pir

[16:36] <jnthn> pmichaud: 'k

[16:36] <jnthn> pmichaud: They need to does Abstraction to, then we win back ref.t

[16:36] <jnthn> *too

[16:36] <PerlJam> TimToady: and I guess all of the block specific "keywords" now all make sense inside phasers because they aren't really blocks?

[16:36] *** frew__ joined
[16:37] <TimToady> PerlJam: example?

[16:37] <PerlJam> TimToady: return

[16:37] <PerlJam> or leave

[16:37] <pmichaud> they're still blocks, afaict

[16:37] <TimToady> a phaser may or may not contain a block

[16:37] *** nihiliad left
[16:37] <TimToady> if it does, there are explicit braces

[16:38] <TimToady> but also we have $x = BEGIN rand()

[16:38] <TimToady> that's a blockless phaser

[16:38] *** fax joined
[16:39] <PerlJam> so, what does BEGIN { say "hi" ; return; say "there" }  mean?

[16:39] <TimToady> come to think of it, "blorst" kinda sounds like a Star Trek monster...

[16:39] <pmichaud> TOS, yes.

[16:39] <TimToady> it would be an error, since there's no sub to return from

[16:39] <jnthn> Need I even point at $*BORG? :-)

[16:40] <pmichaud> PerlJam: return is tied to Routines, not blocks

[16:40] <PerlJam> Yeah, I think I'll shutup now until I get the taxonomy straight in my head  :)

[16:40] <pmichaud> okay, gone for lunch

[16:40] <TimToady> and yes, we do need to come up with a better term than "lexical return" to make diakopter happy

[16:40] <[particle]> what about last?

[16:41] <jnthn> TimToady: Why is return lexical, btw?

[16:41] <[particle]> BEGIN { say 'hi'; last; say 'there' }

[16:41] <jnthn> I was trying to remember the reason.

[16:41] <TimToady> to do what the user expects

[16:41] * [particle] needs to re-read the specs

[16:41] *** ruoso left
[16:42] <PerlJam> std:  BEGIN -> $x { ... }

[16:42] <p6eval> std 29047: ok 00:01 112m␤

[16:42] <jnthn> TimToady: sub foo() { my $x = { return 42 }; return $x; }; my $a = foo(); $a(); # what happens?

[16:42] <PerlJam> [particle]: me too

[16:42] *** nihiliad joined
[16:43] <[particle]> this is how much i forget... re: C<if bank == 'CHECK' goto bank_lifo> is == automagic in pir?

[16:43] <TimToady> you get an error, because the routine that it knows it should return from is not in the dynamic scope

[16:43] <jnthn> [particle]: Think it does an MMD under the hood.

[16:43] <[particle]> bank is a string there, so i guess it should be ok

[16:44] <pmichaud> in PIR, == translates into   eq

[16:44] <[particle]> ok, perfect.

[16:44] <pmichaud> i.e., the opcode is actually      eq a, b, label

[16:44] <[particle]> that was my confusion. thanks.

[16:44] <pmichaud> the meaning of the 'eq' opcode depends on a

[16:45] <jnthn> oh, non-mmd then.

[16:48] <PerlJam> constant $foo = foo();  is semantically equivalent to   constant $foo = BEGIN foo();    ?

[16:48] <PerlJam> or constant $foo = BEGIN { foo() };

[16:48] <TimToady> we need a term for "dynamically scoped unwinding operation with a target discovered via lexical scoping"

[16:49] <jnthn> lexnamic

[16:49] <PerlJam> lexamic

[16:49] <jnthn> dynical

[16:49] <moritz_> exotic

[16:49] <PerlJam> strange

[16:49] <PerlJam> up, down, top, color ... oh wait  ;)

[16:50] <jnthn> thingihopethatpmimplementsnotme ;-)

[16:50] <TimToady> 50's SF: lexodyne

[16:51] <TimToady> lexception

[16:52] <TimToady> which is a little too close to l'exception  :)

[16:53] <TimToady> lexotic

[16:56] *** pmurias joined
[16:58] *** oZ] joined
[16:58] <pmurias> TimToady: STD::P5 is intended to evolve into a full perl 5 grammar?

[16:59] <TimToady> for some definition of P5 or other

[16:59] <TimToady> I doubt it will ever quite reach the insanity of p5's lexer/parser, but can quite probably do much better than PPI

[17:00] <moritz_> like, tracking prototypes?

[17:00] <TimToady> its original intent was just to let us find the end of a 'use v5' block

[17:00] <TimToady> but it may turn out useful for emulating p5 as well

[17:01] *** justatheory joined
[17:01] <TimToady> and maybe there's a longterm goal of moving 5.14 over to a P6-based parser  :)

[17:02] * moritz_ is glad to have seen a smily at the end of TimToady's last line

[17:07] <jnthn> pmichaud: OK, fixed up the boolean bits, so ref.t lives again.

[17:12] *** envi^home left
[17:12] <TimToady> well, I think "lexotic" will have to do for now

[17:14] *** alester left
[17:14] <TimToady> looks like existing uses are all having to do with exotic Lexuses :)

[17:14] <Wolfman2000> Alright, real world time for me.

[17:15] <Wolfman2000> If I'm lucky, I can be online around...6 PM EST to get back to...one of the Perl 6 pastebins.

[17:15] <pugs_svn> r29048 | masak++ | [u4x/TODO] added 'phaser' and 'lexotic' 

[17:15] <Wolfman2000> masak: We'll see who ends up with the best package.

[17:15] *** Wolfman2000 left
[17:15] <masak> Wolfman2000: :)

[17:21] *** zaphar_ps joined
[17:21] <Woodi> masak: i got: Found a PARROT_DIR to be /src/perl/parrot but there is no Rakudo nearby. Please contact the proto people.

[17:22] <masak> Woodi: hello.

[17:22] <Woodi> masak: so probably you are needed :)

[17:22] <masak> I guess I am a proto person. :)

[17:22] <masak> Woodi: was that in a project you tried to install? which one?

[17:22] <Woodi> json

[17:22] * masak has a look at json

[17:23] <Woodi> perl6 Configure

[17:23] <Woodi> from hand

[17:23] *** cotto_work left
[17:23] *** cotto_work joined
[17:23] *** alester joined
[17:23] <Woodi> shouldn't it be Configure.pl or something ?

[17:24] <masak> Woodi: hold on a bit. I'm looking at moritz_'s json, and I see no Configure.

[17:24] <masak> oh wait.

[17:25] <Woodi> it use lib/Configure.pm wroted by merends

[17:25] <Woodi> mberends++ :)

[17:26] <masak> aye.

[17:26] <masak> I seemed to have an old version, and git somehow wouldn't update it for me.

[17:26] <masak> now.

[17:26] <Woodi> i probably cp -r project_name/lib/*.pm to $PERL6LIB...

[17:26] <masak> Woodi: could you tell me a bit about your Rakudo setup?

[17:27] <Woodi> dpkg -L rakudo gives all files starting with /opt/perl/* :)

[17:27] <masak> ah, dpkg :)

[17:27] <masak> that's the clue I needed, I think.

[17:28] <Woodi> problem is: all modules are in development stage... requires --gen-parrot

[17:29] <masak> mberends++ Configure.pm is the most copied module in Perl 6 land. and it exists in fewer version than Test.pm, too. :)

[17:29] *** cotto left
[17:29] *** mtve left
[17:29] *** sjohnson left
[17:29] <Woodi> i just trying _last month_ to be perl6 user...

[17:30] <masak> Woodi: when November was more actively developed, we had a policy of targeting the latest monthly release of Rakudo.

[17:30] <Woodi> so, cp *.pm to will help

[17:30] <masak> not sure what you mean by that.

[17:31] <Woodi> targeting specific realease do not imply build/install location...

[17:31] <masak> Configure.pm thinks you either have rakudo-in-parrot or parrot-in-rakudo, but you probably have neither, since dpkg installed Rakudo for you.

[17:31] *** sjohnson joined
[17:31] *** cotto joined
[17:31] *** mtve joined
[17:31] <Woodi> i created that package

[17:31] <masak> which one?

[17:31] <masak> the Ubuntu package?

[17:31] <Woodi> rakudo.deb :)

[17:31] *** quietfanatic joined
[17:31] <masak> s/Ubuntu/Debian/

[17:32] <masak> Woodi++ # cool!

[17:32] <Woodi> .deb like in Debian :)

[17:32] <masak> Woodi: not saying you did anything wrong, just that you created a new situation which Configure.pm doesn't handle.

[17:32] <Woodi> Ubuntu inherits from Debian :)

[17:32] <masak> nod.

[17:32] <Woodi> masak: proto too

[17:32] <masak> aye.

[17:33] <masak> this is a situation which we should address.

[17:33] *** alester left
[17:33] <masak> problem is, I feel proto has grown larger than I can handle myself, and what little energy I have I'd like to use for landing the installed-modules branch.

[17:34] <Woodi> masak: may I extract some functionalities from proto ?

[17:34] <masak> Woodi: of course.

[17:35] <Woodi> masak: in truth i realy would like to move rakudo/parrot installation somewhere else..

[17:36] <Woodi> mean: more modularity

[17:36] <masak> I have very little overview over .deb packages.

[17:36] <Woodi> masak: what about .tgz :)

[17:37] <masak> those I feel I understand a bit more. :)

[17:38] <Woodi> is any accepted standard for crating modules in Perl6 ?

[17:38] <masak> sort of.

[17:38] *** stephenlb joined
[17:39] <masak> there are some Well-Throught-Out Practices.

[17:39] <masak> we like .pm files to sit in lib/

[17:39] <masak> and .t files to sit in t/

[17:39] <Woodi> where i can find example of something "standard" ?

[17:39] <masak> hold on.

[17:39] *** cotto left
[17:39] *** mtve left
[17:39] *** sjohnson left
[17:39] <masak> http://github.com/masak/proto/blob/master/PIONEER

[17:40] <masak> if you mean a project that follows those directives, I think json is a good example.

[17:40] <moritz_> it basically does nothing at all, and still follows them ;-)

[17:42] <Woodi> ok, so 1) perl6? (Makefile.PL|Configure) && make

[17:42] <Woodi> what about 2) install ?

[17:43] *** pnate2 joined
[17:43] <Woodi> copy *.pm to PERL6LIB or maybe *.pir

[17:43] *** SmokeMachine left
[17:44] *** SmokeMachine joined
[17:48] <Woodi> ehm, any plans for post-S11 module filenames convention ?

[17:49] *** tlb left
[17:49] *** rindolf joined
[17:49] <rindolf> Hi all.

[17:49] <rindolf> masak: here?

[17:49] *** mariuz left
[17:49] <Woodi> allo

[17:50] <rindolf> Hi Woodi 

[17:50] <masak> Woodi: I have yet to make someone who wants to tackle that. :)

[17:50] <masak> rindolf: yes.

[17:50] <masak> s/make/meet/

[17:50] <Woodi> "tackle" ?

[17:50] <masak> Woodi: realizing the details of S11 is... tricky.

[17:50] <rindolf> masak: hi. I read your use.perl.org blog entry about "Perl 6 is not Perl".

[17:51] <masak> rindolf: I'm still settling down after that one.

[17:51] *** iblechbot joined
[17:51] *** barney joined
[17:52] <rindolf> masak: I should first note that a quote I came up with (but was sort of invented by many people and is based on what was said about Fortran '90) is: "Perl 6 will be a wonderful language. Too bad it won't be Perl."

[17:52] <masak> rindolf: today we had a discussion here on #perl6, and we decided to change the name of Perl 6 to "Proxylon VI" instead. we feel that better reflects the nature of the language.

[17:52] *** mtve joined
[17:52] *** cotto joined
[17:52] <rindolf> masak: heh.

[17:52] <rindolf> masak: what is Proxylon?

[17:52] *** sjohnson joined
[17:52] <masak> no idea.

[17:52] <masak> rindolf: seriously though,

[17:53] <rindolf> masak: ah.

[17:53] <Woodi> masak: but plans ? Buu::Foo-1.40.pm or in bd ?

[17:53] <masak> rindolf: I don't agree that Perl 6 isn't Perl.

[17:53] <masak> rindolf: but I also feel that that isn't the main issue.

[17:53] <rindolf> masak: I'm not sure if it's Perl or not , but I don't care.

[17:53] <rindolf> IT's like saying that Open source is communism or Socialism - it's good for the people, so who cares if it is?

[17:53] <masak> rindolf: the main issue is that people on #perl have a black-and-white view on the world, which doesn't help newcomers.

[17:54] <rindolf> masak: ah.

[17:54] <masak> that's what my post was about.

[17:54] <masak> Woodi: your guess is as good as mine.

[17:55] <Woodi> rindolf: case was: newcomer wanted learn Perl and logical conclusion for she was not (becouse of 5-6 war)...

[17:55] * PerlJam is a people on #perl without a black-and-white view 

[17:55] <rindolf> So am I.

[17:55] * Woodi too

[17:56] <pmichaud> back again

[17:56] <rindolf> Well, we all agree that the Perl 6 implementations are probably still not ready to be used in production.

[17:56] <masak> sure.

[17:56] <rindolf> and that Perl 5 knowledge may help with P6.

[17:56] <PerlJam> rindolf: depends on what you mean by "production", but sure :)

[17:56] <Woodi> rindolf: sure, agree :)

[17:56] <diakopter> pugs is used in production in several places

[17:57] <PerlJam> diakopter: really?  where?

[17:57] <pmurias> the are well suited to production of bug reports ;)

[17:57] *** payload joined
[17:57] <PerlJam> pmurias++

[17:57] <diakopter> PerlJam: I don't know the specifics; sum1 said so a year or two ago

[17:57] * PerlJam doubts

[17:57] <diakopter> sum1 being the author

[17:57] <rindolf> PerlJam: yes, well.

[17:58] <diakopter> PerlJam: it's maintained at http://hackage.haskell.org/package/Pugs

[17:58] <diakopter> regular releases through end of '08...

[17:58] <rindolf> masak: well, if I could build a time machine, I would have renamed Perl 6 to some other name.

[17:59] <rindolf> J/K - don't mess with time.

[17:59] <masak> Proxylon VI!

[17:59] <rindolf> masak: heh.

[17:59] <rindolf> Proxylon EMACS!

[17:59] * PerlJam wonders what people's hangup is with the name.  seriously

[17:59] <masak> oh, that's a Roman 6.

[17:59] <oZ]> Seems Perl people aren't fond of change.

[17:59] <rindolf> masak: yeah, I know.

[17:59] <rindolf> I know my Roman numerals.

[18:00] <PerlJam> oZ]: There are lots of Perl people here who disprove that generality  ;)

[18:00] <diakopter> oZ]: Seems to me you like sweeping unfounded generalizations

[18:00] <Juerd> diakopter: Some daredevil using experimental code in production doesn't make the code production ready :)

[18:00] <oZ]> Present company excluded.

[18:01] <jnthn> oZ]: A lot more than present company excluded.

[18:01] <masak> food &

[18:01] *** masak left
[18:01] <rindolf> In any case, I've known emma from other channels - she's OK.

[18:02] <oZ]> A lot of quiet people, perhaps. Those who scream the loudest are the ones that get noticed, which screws up the PR for Perl and Perl 6.

[18:02] <rindolf> Though still a bit lacking knowledge.

[18:02] <diakopter> however, many people do have a resistance to particular degrees of change; sometimes it's rationally based on the circumstances, sometimes it's arbitrary.

[18:03] <PerlJam> The people who seem to be the most vocal about not changing Perl from Perl 5 are those that have never known any other perl.

[18:03] <PerlJam> those that have only known the perl of the last 8-10 years or so.

[18:04] * diakopter has known the perl of only the last 6 years (and it shows!)

[18:04] <oZ]> That's probably true, but I'd say that the majority of people who still use Perl are those who have only used Perl 5.

[18:04] <rindolf> PerlJam: I did very little Perl 4.

[18:04] <rindolf> If at all.

[18:05] <rindolf> But Perl so an explosive growth after Perl 5 came out.

[18:05] <takadonet> Never got this error before : "Internal Error: Rakudo_binding_bind_signature passed invalid signature"

[18:05] <oZ]> I started in 1999, and that still gives a fairly myopic view of Perl. That being said, I'm not averse to Perl 6 or Moose or whatever the new flavor happens to be, even if that means another language.

[18:05] <PerlJam> oZ]: why not?

[18:06] <moritz_> takadonet: on master or on the ng branch?

[18:06] <takadonet> moritz_: Master good sir

[18:06] <oZ]> Why am I not averse to new languages or ways of using them? Because if I expect to stay relevant as a developer, I can't use the same thing for the rest of my life. :)

[18:06] <takadonet> moritz_: Trying to fix some test in BioPerl6 that are failing

[18:06] <PerlJam> oZ]: in short, you are sane :)

[18:07] <oZ]> The sane people need to get louder, I guess. :)

[18:07] <quietfanatic> takadonet: I got that error recently too.  I think it was from trying to overload trait_mod:<is> in a module.

[18:07] <quietfanatic> (a module that used "is export")

[18:08] <pugs_svn> r29049 | lwall++ | [S04] define "lexotic" 

[18:08] <moritz_> takadonet: did you do a 'make realclean' before building rakudo? and did you remove all compiled .pir files in your project?

[18:08] <takadonet> quietfanatic: Well at the moment I have no idea where it came from. I commented some test to see how much farther I go could and  got that message

[18:09] <takadonet> moritz_: I have not

[18:09] <quietfanatic> Hmm

[18:09] <takadonet> moritz_ : I should do a clean rebuild

[18:09] <moritz_> takadonet: that would be my first try

[18:10] *** mberends left
[18:11] *** seanstickle joined
[18:11] <takadonet> moritz_ : where are the compiled .pir files?

[18:11] <moritz_> takadonet: where you put them ;-)

[18:11] <moritz_> they aren't generated by default

[18:12] <moritz_> only if you do a perl6 --target=PIR somewhere

[18:12] <Woodi> moritz_: --target=PIR is something like C .so files ?

[18:13] <Woodi> 'compiled .pm' ?

[18:13] <Woodi> or it is .pbc ?

[18:13] <moritz_> it's a PIR file

[18:13] <moritz_> so closer to assembler

[18:14] <Woodi> --target=PBC works ?

[18:15] <moritz_> no idea; it did once

[18:15] <moritz_> it also broke once

[18:15] <pmichaud> only --target=pir currently works

[18:15] <moritz_> at one point --target=PBC wouldn't work, but compiling to a PBC in a second step would

[18:15] <pmichaud> and the .pir file isn't necessarily able to run standalone yet

[18:15] <spinclad> Woodi: 'tackle': take on, try to do 

[18:15] <pmichaud> (these are actively being fixed in ng)

[18:16] <Woodi> i would like what .* should have compiled P6 module for faster loading etc..

[18:18] <Woodi> mean: what should do make install for P6 module except coping *.pm...

[18:18] <Woodi> thanks spinclad++ :)

[18:19] <Woodi> let someone tell me my questions are stupid :)

[18:19] *** pdcawley_ joined
[18:19] <rindolf> <oZ]> Why am I not averse to new languages or ways of using them? Because if I expect to stay relevant as a developer, I can't use the same thing for the rest of my life. :) - true.

[18:20] <rindolf> Of course, C or Fortran or C++ or LISP or whatever today are very different than they've been when they started.

[18:20] <oZ]> Some are closer to their core than others, but to be fair, the "core" of C is really, really simple.

[18:21] <moritz_> that's what I thought too

[18:21] <moritz_> until I learned more about pointers than I cared to know ;-)

[18:21] <rindolf> Fully Portable C is very hard.

[18:21] <oZ]> Quite true.

[18:21] <rindolf> Even making sure Perl 5 code will run on VMS is hard.

[18:22] <rindolf> And in C it may be much worse.

[18:22] <rindolf> Not sure about OpenVMS.

[18:23] <rindolf> I think dcantrell wanted to get a VMS CPAN smoking machine and I told him "Over my dead body."

[18:23] <rindolf> Because it will spam everything with failures.

[18:26] *** pdcawley left
[18:26] *** pdcawley_ is now known as pdcawley

[18:34] <takadonet> moritz+ : still getting the same error message. I will debug it when I get some free time

[18:37] *** hudnix joined
[18:37] *** eternaleye left
[18:39] <pmichaud> jnthn: ping

[18:40] <jnthn> pmichaud: pong

[18:40] *** REPLeffect_ joined
[18:40] <pmichaud> we have a small issue.

[18:41] <jnthn> Only a small one? :-)

[18:41] <pmichaud> the only way I can find to add methods to a builtin Parrot class is by adding the method to its namespace

[18:41] <pmichaud> and then it only will add it as a method if the :method flag is present

[18:43] <jnthn> Lovely.

[18:44] <pmichaud> is there a way to get our Method objects to have that flag?

[18:45] <jnthn> ooh...erm...epic ouch.

[18:45] <jnthn> It's a sub flag I think.

[18:46] *** _eMaX_ joined
[18:47] <pmichaud> okay, let me poke around a bit, then.

[18:47] <jnthn> Meaning the only way we might be able to get this to work at all is grabbing the .do and adding that.

[18:47] <jnthn> But that means we need the :method flag adding.

[18:47] <jnthn> Which might cause other issues.

[18:47] <jnthn> Since it'll pull the methods in then we'll go and re-add them through the metaclass, if we're associating the class with the ns.

[18:48] <jnthn> I'm pretty sure the dispatcher does go looking in the namespace's methods table though.

[18:48] <jnthn> And there's no accessor for that.

[18:49] <jnthn> Well, there is one, but it then nulls the namespace's pointer to it as it returns it.

[18:49] <takadonet> YES! got more BioPerl6 testing working!

[18:51] <jnthn> Hmm.

[18:51] <jnthn> pmichaud: Not sure. What's the main reason we're poking stuff into Parrot namespaces anyway?

[18:52] <pmichaud> jnthn: so that  3.abs will work

[18:52] <pmichaud> since 3 currently comes back as a Parrot Integer instead of a Rakudo Int

[18:52] <jnthn> :-S

[18:52] <pmichaud> last time I tried type mapping Integer to Int, we ended up with a ~3x slowdown

[18:52] <jnthn> Oh. :-|

[18:52] <pmichaud> (might not be so bad now... but still)

[18:52] <jnthn> That's ridiculous.

[18:52] <pmichaud> also, the values coming back from some of the libraries will often not be Rakudo data types

[18:53] <jnthn> Yes, but if every HLL decides to solve that by poking methods into the Parrot core types...well...

[18:53] <pmichaud> I agree, it's not a long term solution

[18:53] <pmichaud> but until hll mapping is reasonably fast, it's the only one we really have

[18:53] <jnthn> Yeah

[18:54] <jnthn> OK, so we'll have to fudge them in somehow.

[18:54] *** pmurias left
[18:54] <jnthn> .do and give those the method flag may do it.

[18:54] <jnthn> Let me check.

[18:54] <moritz_> the thread about auto promotion to BigInt on parrot-dev might also interest you

[18:54] <jnthn> If that causes a problem.

[18:54] <pmichaud> I'd prefer not to use the .do, though

[18:54] <pmichaud> (yes, we may have to)

[18:55] <pmichaud> but it feels like the wrong approach.  The methods really ought to be our Code objects

[18:55] <pmichaud> and our MultiSubs

[18:55] <spinclad> re 3x slowdown: now that pir::foo can take and return INS values, could we be closer to  1) native int etc types  2) less frequent box/unbox overhead ?

[18:55] <pmichaud> spinclad: it really doesn't reduce the overhead

[18:56] <pmichaud> spinclad: in many ways it increases it

[18:56] <jnthn> pmichaud: Oh, the problem is because it's saying "isa Sub"

[18:56] <spinclad> ouch

[18:56] <jnthn> :-/

[18:56] <jnthn> oh wtf, it gets worse

[18:56] <jnthn>     &&   value->vtable->base_type != enum_class_Object)

[18:56] <jnthn> Yes, it actually says "and it's not a high level object"

[18:57] <jnthn> (namespace.pmc:104)

[18:58] <spinclad> how does overhead increase?

[18:58] <jnthn> oh heh

[18:58] <jnthn> I already had to work around a bug in add_multi_to_namespace

[18:59] <moritz_> spinclad: I think lexicals can only PMCs, or so

[19:01] <jnthn> pmichaud: I'm struggling to see how to add the methods without them being the Parrot sub.

[19:01] <pmichaud> jnthn: actually, I'm thinking this might not be an issue

[19:01] <pmichaud> just a sec

[19:01] <jnthn> ok

[19:01] <pmichaud> i.e., I'm thinking we might be able to workaround a bit.

[19:01] <pmichaud> what implements find_method for non-Object types?

[19:02] <jnthn> checking

[19:02] <jnthn> I think it's in the default pmc

[19:03] <pmichaud> Parrot_find_method_with_cache...

[19:03] <jnthn> The wonderfully named find_method_direct_1 seems to be where we end up.

[19:04] <jnthn> oh, why does it even matter if they're :method ?

[19:04] <jnthn> We do

[19:04] <jnthn>         _class = VTABLE_get_pmc_keyed_int(interp, mro, i);

[19:04] <jnthn>         ns     = VTABLE_get_namespace(interp, _class);

[19:04] <jnthn>         method = VTABLE_get_pmc_keyed_str(interp, ns, method_name);

[19:05] <jnthn> So if it's this code, just dumping something into the namespace should do it.

[19:05] <pmichaud> yeah, but I don't think that can be it.

[19:05] <pmichaud> Because.... hmmm

[19:05] <jnthn> Because?

[19:05] <jnthn> :-)

[19:06] <jnthn> It didn't work?

[19:06] <pmichaud> I'm writing a short test case.

[19:06] <jnthn> ok

[19:06] <pmichaud> okay, that seems to do it.

[19:06] <pmichaud> but it seems like register should be sticking the objects into the namespace already anyway

[19:07] <pmichaud> so for some reason they aren't getting there

[19:07] <pmichaud> (just putting a sub into the namespace makes it act like a method, no flag needed)

[19:07] <jnthn> It's not a naming issue?

[19:07] <jnthn> (&foo)

[19:07] <jnthn> But I'd really guess not.

[19:08] <jnthn> Check what keys they're going in under though.

[19:12] <colomon> rakudo:  "{ fdfd, fdf   ,fdsgs,fdsg}" ~~ /\{ \s* (\w+) ** [\s*,\s*] \s* \}/;

[19:12] <p6eval> rakudo 929998: perl6regex parse error: Error in repetition controller at offset 59, found '['␤in Main (file <unknown>, line <unknown>)␤

[19:12] <colomon> rakudo:  "{ fdfd, fdf   ,fdsgs,fdsg}" ~~ /\{ \s* (\w+) ** [,\s*] \s* \}/;

[19:13] <p6eval> rakudo 929998: perl6regex parse error: Error in repetition controller at offset 59, found '['␤in Main (file <unknown>, line <unknown>)␤

[19:13] <pmichaud> it's not a naming issue -- these are methods

[19:13] <pmichaud> and method names don't have the &'s

[19:13] <jnthn> Sure

[19:13] <jnthn> I know they *shouldn't*, I was suggesting checking for sure that they don't.

[19:14] <pmichaud> right

[19:14] <TimToady> std: "{ fdfd, fdf   ,fdsgs,fdsg}" ~~ /\{ \s* (\w+) ** [\s*,\s*] \s* \}/;

[19:14] <jnthn> It's a long shot though.

[19:14] <pmichaud> (a bit distracted on #parrotsketch and nqp at the moment)

[19:14] <p6eval> std 29049: [31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix , instead at /tmp/edjEAzfMgw line 1:␤------> [32m"{ fdfd, fdf   ,[33m⏏[31mfdsgs,fdsg}" ~~ /\{ \s* (\w+) ** [\s*,\s[0m␤Undeclared routine:␤      fdfd used at line 1␤FAILED 00:02 109m␤

[19:14] <jnthn> 'k

[19:14] <jnthn> I need to do dinner now...will be distracted for the next while too while cooking.

[19:14] <pmichaud> no problem

[19:15] <spinclad> std: "{ fdfd, fdf   ,fdsgs,fdsg}" ~~ /\{ \s* (\w+) ** [\s*\,\s*] \s* \}/;

[19:15] <p6eval> std 29049: [31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix , instead at /tmp/PM6JvkHl2v line 1:␤------> [32m"{ fdfd, fdf   ,[33m⏏[31mfdsgs,fdsg}" ~~ /\{ \s* (\w+) ** [\s*\,\[0m␤Undeclared routine:␤      fdfd used at line 1␤FAILED 00:02 107m␤

[19:15] <TimToady> std: '{ fdfd, fdf   ,fdsgs,fdsg}' ~~ /\{ \s* (\w+) ** [\s*,\s*] \s* \}/;

[19:15] <p6eval> std 29049: [31m===[0mSORRY![31m===[0m␤Unable to parse regex; couldn't find right bracket at /tmp/2BnPMByeQ9 line 1:␤------> [32m  ,fdsgs,fdsg}' ~~ /\{ \s* (\w+) ** [\s*[33m⏏[31m,\s*] \s* \}/;[0m␤    expecting any of:␤       quantmod␤ regex atom␤       regex_infix␤      standard stopper␤

[19:15] <p6eval> ..terminator␤     ws␤FAILED…

[19:15] <TimToady> should be complaining about unrecognized metacharacter

[19:16] <colomon> TimToady: which one did I get wrong?

[19:16] <TimToady> std: /\s*,\s*/

[19:16] <p6eval> std 29049: [31m===[0mSORRY![31m===[0m␤Unable to parse regex; couldn't find final '/' at /tmp/PdAQdnWJKK line 1:␤------> [32m/\s*[33m⏏[31m,\s*/[0m␤    expecting any of:␤        quantmod␤ regex atom␤       regex_infix␤      standard stopper␤ terminator␤     ws␤FAILED 00:01 103m␤

[19:16] <TimToady> well, for one, you interpolated a closure unintentionally in double quotes

[19:17] <TimToady> std: '{ fdfd, fdf   ,fdsgs,fdsg}' ~~ /\{ \s* (\w+) ** [\s*\,\s*] \s* \}/;

[19:17] <p6eval> std 29049: ok 00:01 107m␤

[19:17] <pmichaud> jnthn: oh, I see the issue.

[19:17] <pmichaud> I'm using add_sub to put it in the namespace.

[19:17] <TimToady> and the , has to be \'ed

[19:18] <pmichaud> and since the thing to be added is not a Sub, nothing happens.

[19:18] <colomon> TimToady: Drat, not only am I full of fail, but I can't see how.

[19:18] <TimToady> std: /,/

[19:18] <p6eval> std 29049: [31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter (must be quoted to match literally) at /tmp/Ss6DYZtmhp line 1:␤------> [32m/[33m⏏[31m,/[0m␤    expecting any of:␤        regex atom␤       regex_infix␤      termish␤        ws␤FAILED 00:01 103m␤

[19:18] <TimToady> std: /\s*,/

[19:18] <p6eval> std 29049: [31m===[0mSORRY![31m===[0m␤Unable to parse regex; couldn't find final '/' at /tmp/Ksvz7aL5Q4 line 1:␤------> [32m/\s*[33m⏏[31m,/[0m␤    expecting any of:␤   quantmod␤ regex atom␤       regex_infix␤      standard stopper␤ terminator␤     ws␤FAILED 00:01 103m␤

[19:18] <TimToady> strange

[19:18] <pmichaud> nqp:  token { \s*, }

[19:18] <p6eval> nqp: Confused at line 1, near "token { \\s"␤current instr.: 'parrot;HLL;Grammar;panic' pc 448 (src/cheats/hll-grammar.pir:197)␤

[19:19] <pmichaud> not much better :-(

[19:19] <pmichaud> nqp:  token { , }

[19:19] <p6eval> nqp: Confused at line 1, near "token { , "␤current instr.: 'parrot;HLL;Grammar;panic' pc 448 (src/cheats/hll-grammar.pir:197)␤

[19:19] <spinclad> nqp:  token { \s*\, }

[19:19] <p6eval> nqp: Confused at line 1, near "token { \\s"␤current instr.: 'parrot;HLL;Grammar;panic' pc 448 (src/cheats/hll-grammar.pir:197)␤

[19:19] <pmichaud> oh, need a name

[19:19] <pmichaud> nqp:  token xyz { \s*, }

[19:19] <p6eval> nqp: Confused at line 1, near "token xyz "␤current instr.: 'parrot;HLL;Grammar;panic' pc 448 (src/cheats/hll-grammar.pir:197)␤

[19:19] <pmichaud> nqp:  token xyz { , }

[19:19] <p6eval> nqp: Confused at line 1, near "token xyz "␤current instr.: 'parrot;HLL;Grammar;panic' pc 448 (src/cheats/hll-grammar.pir:197)␤

[19:19] <pmichaud> bah.

[19:19] <TimToady> I suspect LTM is borrowing a bogus comma operator as an infix

[19:20] <colomon> TimToady: Wondered about the , after you safk

[19:20] <TimToady> std: /\s*-/

[19:20] <p6eval> std 29049: [31m===[0mSORRY![31m===[0m␤Unable to parse regex; couldn't find final '/' at /tmp/ct712ZAwuq line 1:␤------> [32m/\s*[33m⏏[31m-/[0m␤    expecting any of:␤   quantmod␤ regex atom␤       regex_infix␤      standard stopper␤ terminator␤     ws␤FAILED 00:01 105m␤

[19:21] <diakopter> nqp: token { \, }

[19:21] <p6eval> nqp: Confused at line 1, near "token { \\,"␤current instr.: 'parrot;HLL;Grammar;panic' pc 448 (src/cheats/hll-grammar.pir:197)␤

[19:21] <pmichaud> nqp essentially decided that <infixish> and <termish> needed to be parameterized in the operator precedence parser

[19:21] <spinclad> nqp:  token xyz { \s*\, }

[19:21] <p6eval> nqp:  ( no output )

[19:21] <TimToady> it's quite possible that Regex should not be inheriting from STD

[19:21] <pmichaud> instead of being hard-coded

[19:21] <diakopter> nqp: token foo { , }

[19:21] <pmichaud> and yes, Regex definitely does not inherit from STD

[19:21] <p6eval> nqp: Confused at line 1, near "token foo "␤current instr.: 'parrot;HLL;Grammar;panic' pc 448 (src/cheats/hll-grammar.pir:197)␤

[19:21] <pmichaud> (in nqp)

[19:22] <diakopter> nqp: token foo { \\, }

[19:22] <p6eval> nqp: Confused at line 1, near "token foo "␤current instr.: 'parrot;HLL;Grammar;panic' pc 448 (src/cheats/hll-grammar.pir:197)␤

[19:22] <pmichaud> nqp:  token foo { \, }

[19:22] <p6eval> nqp:  ( no output )

[19:22] <TimToady> I guess that's a hangover from before I had language braids

[19:22] <pmichaud> TimToady: I find it much cleaner if they're separate.

[19:22] <TimToady> feels kinda like a hangover...

[19:22] * diakopter left hanging

[19:27] <pmichaud> jnthn: okay, we can work around this little buglet

[19:27] <pmichaud> no :method flag needed ('phew!')

[19:28] <jnthn> pmichaud: heh, add_sub silently fails?!

[19:28] <jnthn> :-)

[19:28] <pmichaud> yes, it silently fails

[19:28] <pmichaud> well, maybe not

[19:28] <jnthn> Helpful. :-/

[19:28] <pmichaud> actually, P6object puts a push_eh/pop_eh block around it

[19:28] <pmichaud> so it could be failing and we just never hear it

[19:28] <jnthn> Ah, OK.

[19:28] <jnthn> possibly.

[19:28] <jnthn> Anyway, glad there's a solution.

[19:28] <pmichaud> oh, and there's a bug there in p6object on the eh handling :)

[19:28] <pmichaud> thrilling.

[19:29] <jnthn> Do we *need* the eh?

[19:29] <pmichaud> we did at one time, yes.

[19:29] <jnthn> I seem to recall there was some oddness there.

[19:29] <jnthn> I can't recall what though.

[19:29] <pmichaud> I don't know if that's still the case.  I'd had to change much more than that without knowing how it might affect deprecation

[19:29] <pmichaud> s/had/hate

[19:29] <jnthn> true.

[19:30] *** NorwayGeek left
[19:31] *** NorwayGeek joined
[19:31] <pmichaud> okay, looks like I just need a p6object fix.  easy-peasy.

[19:34] *** desertm4x joined
[19:34] <jnthn> Yay

[19:34] <jnthn> pmichaud++

[19:35] * jnthn loves eating onions...but hates chopping them

[19:35] *** NorwayGeek left
[19:38] *** NorwayGeek joined
[19:42] *** jaldhar left
[19:42] *** zloyrusskiy joined
[19:45] *** barney left
[19:49] <moritz_> you can cook them whole ;-)

[19:50] <TimToady> or eat them raw whole

[19:50] <jnthn> ...yes, but my mouth isn't quite big enough to take the whole cooked onion. :-P

[19:50] <TimToady> get perl onions

[19:51] <moritz_> jnthn: well, cutting them isn't that bad once they're cooked

[19:51] <jnthn> moritz_: oh, true. :-)

[19:51] *** zloyrusskiy left
[19:51] *** lisppaste3 left
[19:51] *** lisppaste3 joined
[19:53] *** stephenlb left
[19:53] <pmichaud> now to make sure my change doesn't break existing rakudo master :)

[19:54] <pmichaud> (and that existing rakudo master isn't broken in general...)

[19:55] <jnthn> :-)

[19:56] <pmichaud> it's been a while since we bumped PARROT_REVISION

[19:56] <TimToady> I'm getting one of those headaches you get when you realize you need a major refactor...

[19:56] <TimToady> I need to move most of STD methods into STD::P6

[19:56] <TimToady> and leave just the service routines in STD

[19:56] <pmichaud> TimToady: just adopt rakudo's grammar as the new STD.  :-)

[19:56] <pmichaud> (its new one, of course)

[19:57] <pmichaud> anyway, I'm joking of course at this point -- but I do see a lot of very nice convergence ahead for the two grammars :)

[19:58] <TimToady> well there are things I *do* want to inherit in Regex and in P5, such as EXPR

[19:58] <pmichaud> right

[19:59] <pmichaud> NQP has a base "HLL::Grammar" class that provides an EXPR suitable for many languages

[19:59] <pmichaud> and then the various grammars for regexes, nqp, perl6, etc. all inherit from it

[19:59] <pmichaud> (currently the EXPR is written in PIR, but I expect it to translate to NQP)

[19:59] <TimToady> that's more or less what STD is supposed to do

[20:00] *** jan_ left
[20:00] <pmichaud> HLL::Grammar also provides basic number and quoting rules, since those are common to languages too

[20:01] <pmichaud> I haven't quite convinced myself that Quote deserves to be its own grammar/language yet.   It might for Perl 6, but other languages probably want it to be part of MAIN

[20:01] <TimToady> I can finesse it with any number of classes and roles, but not until I detangle STD from STD::P6

[20:02] <pmichaud> Well, I shall watch the refactor closely :)

[20:02] <TimToady> so I deserve my headache :)

[20:02] <pmichaud> I'll also chime in if I have any helpful ideas

[20:04] *** rgrau joined
[20:10] *** seanstickle left
[20:12] *** justatheory left
[20:20] <jnthn> pmichaud: OK, I'm back and can hack on stuff some more. Any priorities?

[20:20] *** justatheory joined
[20:22] <pmichaud> jnthn: not that I can think of at the moment

[20:23] <pmichaud> I'm trying to get the builtin classes we have already done fixed up

[20:23] <jnthn> pmichaud: OK, great. :-)

[20:23] <pmichaud> (testing old rakudo == slow, though)

[20:24] <oZ]> Off topic: Does anyone know of anything DBIx::Class-like in the works or working currently with perl6?

[20:24] <pmichaud> in the works, yes.

[20:24] <pmichaud> haven't heard about "working currently"

[20:25] <oZ]> OK/.

[20:25] <moritz_> it partially works

[20:25] <oZ]> (Minus the /)

[20:25] <moritz_> oZ]: http://use.perl.org/~masak/journal/39686

[20:25] *** masak joined
[20:26] <oZ]> Huh.

[20:26] <moritz_> not quite DBIx::Class like

[20:26] <oZ]> At least a look at how OO/ORM wrappers for SQL would look like.

[20:29] <pmichaud> iirc, Tim Bunce is also heading up an effort for DBI-related stuff for Perl 6

[20:29] <pmichaud> I haven't kept up with progress there.

[20:31] *** rindolf left
[20:31] <moritz_> it's been mostly sleeping the last few weeks

[20:32] <oZ]> I think I'm just trying to figure out how to get my hands dirty with perl6 without it being so much of a hassle that I give up. ;)

[20:33] <pmichaud> jnthn: my plan for the rest of today is to finish cleaning up some of the Test.pm stuff and getting the base classes in place.  Tonight I'm going to write up a status report (also for my grant) and a plan for the upcoming week(s)

[20:33] <pmichaud> tomorrow I'll likely just start tackling spectests

[20:34] <jnthn> pmichaud: OK, sounds great.

[20:34] <pmichaud> I have to go do school pickup -- bbi30

[20:34] <jnthn> pmichaud: So basically, within reason, whatever I feel like putting back?

[20:34] <jnthn> OK. :-)

[20:34] <pmichaud> yes

[20:34] <pmichaud> I plan to be playing with eval/repl/module import a bit more

[20:34] <jnthn> OK, nice.

[20:34] <pmichaud> but I'm not wanting to hold anyone back on working on things, so whatever feels "ripe" to you

[20:35] <jnthn> :-)

[20:35] <pmichaud> I still need a partial day to get hash and lazy list stuff all in place

[20:35] <pmichaud> IO might be a good LHF

[20:35] <jnthn> *nod*

[20:35] <jnthn> Oh, that's true.

[20:35] <jnthn> I'll look at that.

[20:35] <jnthn> I'll do parametric roles another day. That fruit hangs higher.

[20:35] <jnthn> It's not an evening fruit. :-)

[20:36] <masak> jnthn: by the way, did you ever do a full Konventa booking?

[20:37] <jnthn> masak: oh noes, I didn't

[20:37] <masak> jnthn: I'm about to do one now.

[20:37] <jnthn> masak: did you?

[20:37] <jnthn> Oh, OK.

[20:37] <jnthn> :-)

[20:37] <jnthn> masak: 3 + 1?

[20:37] <masak> jnthn: well, first I'll see if there really is a bug.

[20:38] <jnthn> By seeing if it actually lets you book it? ;-)

[20:38] <masak> yes.

[20:38] <masak> of course. 

[20:38] *** desertm4x left
[20:38] <masak> I mean, I'm naturally curious. :)

[20:38] <jnthn> Same. ;-)

[20:39] <jnthn> masak: oh! The deal is not only cheaper, but includes some nom.

[20:39] <masak> I know! it's weird.

[20:39] <masak> I thought the 50 EUR/night deal was pretty good.

[20:40] <jnthn> Konventa Seta - Single room, 4 nights, 19 Nov 2009 to 23 Nov 2009 

[20:40] <jnthn> Total price for booking: 111 EUR

[20:40] <jnthn> *snicker*

[20:40] <masak> 对

[20:40] <masak> jnthn: I _did_ alert them to the problem...

[20:40] <jnthn> Yes, I know!

[20:41] *** jan_ joined
[20:41] <moritz_> masakbug!

[20:41] <jnthn> Well, what to do.

[20:41] <masak> my conscience is pure, mostly.

[20:42] <jnthn> Impressively, it's managed to fill out the country code for Slovakia in the phone number box...but then completely failed to fill out the country box. :-)

[20:43] <jnthn> LTA.

[20:43] <jnthn> :-)

[20:43] <masak> :)

[20:46] <masak> "Thank you for your booking!"

[20:46] <jnthn> lol

[20:46] <masak> I've now, for all intents and purposes, used a 3-night deal to cover a 4-night stay. wtf.

[20:47] <moritz_> \o/

[20:47] <masak> I'm beginning to think that my use of software actually causes bugs.

[20:47] <jnthn> Where's their RT tracker? :-)

[20:47] <masak> nowhere to be seen.

[20:47] <masak> jnthn: we'll be arriving at the same time. that feels good if they choose to complain when we arrive.

[20:48] <masak> jnthn: I don't mind paying for that extra night, but it's not always funny to get into an argument with your hotel on arrival abroad. :P

[20:48] <jnthn> Oh, I don't mind paying for it either (and expect to be)

[20:49] <masak> nod.

[20:49] <jnthn> It's still a saving.

[20:49] <masak> my receipt contains a number of contradictions.

[20:49] <jnthn> And includes nom. \o/

[20:49] <masak> "3 night stay" "pay only for 2", "4 nights".

[20:50] <jnthn> :-)

[20:50] * jnthn is amused

[20:50] <masak> "offer includes: [...] VAT; Non-refundable" (hey, those are not offers)

[20:50] <jnthn> :-)

[20:51] <masak> "rich breakfast buffet every morning [...] 1x breakfast"

[20:52] <jnthn> It's the same one. Every morning.

[20:52] <jnthn> :-)

[20:52] <masak> ewww.

[20:52] <jnthn> lol

[20:52] <moritz_> you couldn't make good use of more than one breakfast each morning, could you?

[20:52] <masak> moritz_: nono, it's clear from the table that it's 1 breakfast.

[20:52] *** KyleHa joined
[20:53] <masak> it's also clear that it's rich, and served every morning.

[20:54] <TimToady> maybe it means you can eat there if you're rich

[20:55] <masak> jnthn: allegedly, this is Czech: http://www.youtube.com/watch?v=y3oFc-phIBA&NR=1&feature=fvwp

[20:56] <masak> jnthn: they've subtitled it in Swedish, and it's occasionally funny.

[20:56] *** justatheory left
[20:56] <masak> jnthn: "Jag anger att du mår bra!", for example. ("I indicate that you feel good!")

[20:57] * jnthn Czechs it out

[20:57] <jnthn> Does "hur" mean what I think it does? :-)

[20:58] <masak> no. :)

[20:58] <masak> means "how".

[20:58] <jnthn> aww

[20:58] <jnthn> :-)

[20:58] <masak> the title, "Min man e kass!", means "My husband isn't any good!"

[20:58] <jnthn> lol

[21:00] * jnthn is amused

[21:01] * jnthn wishes he understood Swedish more than a few words :-)

[21:01] <masak> I'm done distracting you now. :)

[21:01] <masak> that song may or may not be a good way to learn Swedish.

[21:02] <jnthn> lol

[21:02] <jnthn> My vocabularly can't get any worse.

[21:03] <jnthn> oh noes...we fail to parse ternaries...

[21:03] <jnthn> That's scary.

[21:03] <Patterner> All I know I learned from http://www.slayradio.org/mastering_swedish.php

[21:03] <diakopter> nqp: say(3 ?? 4 !! 5)

[21:03] * jnthn delegates to pmichaud++

[21:03] <p6eval> nqp: 4␤

[21:03] <jnthn> Yeah, apparently that didn't make it into Rakudo.

[21:04] <diakopter> rakudo-ng?

[21:04] <masak> Patterner: that course is awesome.

[21:04] <moritz_> ng is a refractoring branch in rakudo

[21:04] <diakopter> sigh.

[21:05] <diakopter> I meant, "jnthn: do you mean rakudo-ng or rakudo?"

[21:05] <jnthn> diakopter: ng

[21:05] <jnthn> Det är rena fasan att se en fasan!

[21:05] * diakopter cowers

[21:07] <masak> jnthn: :)

[21:08] <masak> jnthn: Swedish is broken.

[21:08] <jnthn> masak: No more than any other natural language, surely. :-)

[21:09] <masak> well, all natural languages have their specialties, it seems...

[21:09] <masak> even constructed languages leave much to be desired. perfection is nowhere to be found.

[21:09] <pmichaud> ternary isn't working in Rakudo?  I wonder what's up with that...

[21:10] <pmichaud> I would've thought it'd come over from nqp-rx

[21:10] <Woodi> masak: what about math ?

[21:10] <moritz_> rakudo: say((3 ?? 4 !! 5)

[21:10] <p6eval> rakudo 929998: say requires an argument at line 2, near "((3 ?? 4 !"␤in Main (file src/gen_setting.pm, line 2593)␤

[21:10] <moritz_> rakudo: say(3 ?? 4 !! 5)

[21:10] <p6eval> rakudo 929998: 4␤

[21:10] <moritz_> pmichaud: please don't make empty say() a parse error in rakudo-ng, it gives LTA error messages

[21:10] <masak> Woodi: math is ok, I guess. musical notes are very nice, too.

[21:10] <pmichaud> moritz_: it's spec.

[21:10] <pmichaud> std:  say()

[21:11] <p6eval> std 29049: ok 00:01 104m␤

[21:11] <jnthn> pmichaud: I figure you've more chance of working out quickly than I.

[21:11] <pmichaud> std:  say

[21:11] <p6eval> std 29049: ok 00:01 102m␤

[21:11] <moritz_> pmichaud: last I asked TimToady he said it doesn't neet to be compile time

[21:11] <jnthn> say what? :-)

[21:11] <pmichaud> okay, it *used* to be spec.

[21:11] <jnthn> :-)

[21:11] <moritz_> sometimes the spec does change ;-)

[21:12] <jnthn> class Whatever is Failure { ... }

[21:12] <jnthn> ...really?

[21:12] <pmichaud> jnthn: probably not any more

[21:13] <jnthn> pmichaud: That's too bad, given how amusingly it reads. :-)

[21:13] *** Su-Shee left
[21:13] <jnthn> pmichaud: Can I just stick it in as class Whatever { } for now?

[21:13] <pmichaud> jnthn: sure.

[21:13] <jnthn> (Decided to put things in that'll let us parse IO.pm)

[21:14] <pmichaud> something happened to unicode named parameters in master

[21:14] <pmichaud> S02-lexical-conventions/unicode.rakudo aborted 5 test(s)

[21:15] <moritz_> it did so since the pcc-reapply branch

[21:15] <moritz_> or whatever it's called

[21:15] <pmichaud> hmmm

[21:15] <pmichaud> that feels like a regression

[21:15] <jnthn> Some issue with named params where the names have unicode.

[21:15] <pmichaud> checking

[21:15] <jnthn> pmichaud: I don't know that it was pcc_reapply

[21:15] <jnthn> pmichaud: I think it may have been my doing in the sig work.

[21:15] <pmichaud> it might not have been... but that would be an easy explanation :)

[21:16] <jnthn> pmichaud: Note that I don't run that test (too lazy to install ICU...)

[21:19] <dalek> rakudo: 01c042f | pmichaud++ | build/PARROT_REVISION:

[21:19] <dalek> rakudo: Bump PARROT_REVISION to get p6object and other fixes.

[21:19] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/01c042fe88248e8e6a650fe4691b17706b65a13a

[21:19] *** r0bby_ is now known as r0bby|android

[21:20] *** r0bby|android is now known as r0bby

[21:28] <pmichaud> yay, method xyz is export now works

[21:28] <pmichaud> > say (-3).abs

[21:28] <pmichaud> 3

[21:28] <pmichaud> > say abs(-3)

[21:28] <pmichaud> 3

[21:28] <lambdabot>   Not in scope: `say'

[21:29] <pmichaud> afk for a bit

[21:29] * masak glares at lambdabot 

[21:29] <jnthn> .oO( /kick lambdabot NOT IN CHANNEL: `lambdabot` )

[21:29] *** r0bby is now known as r0bby|android

[21:29] *** r0bby|android is now known as r0bby

[21:31] *** dakkar left
[21:36] *** __ash__ joined
[21:39] <japhb> masak: now if only you had mutant powers and could shoot lasers or death rays from your eyes, then we'd be in business.  Of course, you'd have to remember not to keep melting expensive laptops ....

[21:39] *** justatheory joined
[21:40] <masak> japhb: I can't help thinking there's a context in which what you just said makes sense. :P

[21:40] <japhb> "* masak glares at lambdabot "

[21:40] <masak> oh!

[21:40] <masak> :)

[21:40] <masak> yes.

[21:41] <masak> I think I prefer it like this, actually.

[21:41] <masak> question: under which circumstances does $/ get reset to undef?

[21:41] <japhb> That's the problem with async communication -- by the time you get a response, you've switched tasks and swapped out all your context

[21:41] *** sasykes joined
[21:42] <moritz_> masak: unsuccessful match

[21:42] <masak> japhb: true. but there are things I really like about async communication as well.

[21:43] <masak> moritz_: what about entering a new block?

[21:43] <moritz_> masak: then the outer is used, afaict

[21:43] <japhb> efficient for carryon on multiple discussions at once, for one ...  :-)

[21:43] <japhb> er carrying on

[21:43] <moritz_> rakudo: 'a' ~~ /./; { say $/ }

[21:43] <p6eval> rakudo 01c042: a␤

[21:45] <moritz_> in an outer scope it's of course till undef

[21:45] <moritz_> rakudo: { 'a' ~~ /./ }; say $/

[21:45] <p6eval> rakudo 01c042: Use of uninitialized value␤␤

[21:47] <masak> moritz_: I have what I think is a strange case of $/ getting re-set when entering a block. I'm trying to reproduce it with a small enough example.

[21:49] <masak> rakudo: regex foo { foo }; my @a = /<foo>/ => { say $<foo> }; for @a -> $f { my ($r, &d) = $f.kv; if "foo" ~~ $r { d() } }

[21:49] <p6eval> rakudo 01c042: Method 'postcircumfix:{ }' not found for invocant of class 'Failure'␤in Main (file src/gen_setting.pm, line 324)␤

[21:49] <masak> note 'Failure', which means that it can't index $<foo>

[21:49] <jnthn> pmichaud: The error I get for the ?? !! is "Method 'ternary' not found for invocant of class 'Perl6;Grammar'"

[21:49] <masak> (because $/ is undef)

[21:49] <jnthn> pmichaud: I don't see any good reason why yet, or anything missing from the NQP grammar, though.

[21:50] <masak> rakudo: regex foo { foo }; my @a = /<foo>/ => { say $/.WHAT }; for @a -> $f { my ($r, &d) = $f.kv; if "foo" ~~ $r { d() } }

[21:50] <p6eval> rakudo 01c042: Failure()␤

[21:50] <masak> jnthn: maybe the error is in the OP parser?

[21:50] <moritz_> masak: it inherits $/ from the lexical scope, not from the dynamic one

[21:51] <moritz_> masak: don't know if that's supposed to be the case

[21:51] <masak> how does one find out whether that's supposed to be the case?

[21:51] <moritz_> by reading the spec

[21:52] <masak> oh, allright :)

[21:53] <moritz_> S02 says

[21:53] <moritz_> Any remaining special variables will be lexically scoped.

[21:53] <moritz_> This includes C<$_> and C<@_>, as well as the new C<$/>,

[21:53] <dalek> book: 5b115b5 | chromatic++ | src/multi-dispatch.pod:

[21:53] <dalek> book: Edited multidispatch chapter, mostly for prose.

[21:53] <dalek> book: Improved some formatting.

[21:53] <moritz_> hrm

[21:53] <dalek> book: Left some editorial notes for authors.

[21:53] <jnthn> masak: Maybe, but we share that with NQP.

[21:53] <dalek> book: review: http://github.com/perl6/book/commit/5b115b5d35296b38624c56bdf64d27a2678b2142

[21:53] <masak> jnthn: oh, true.

[21:53] <jnthn> masak: So I've no idea whoz OP.

[21:54] <masak> moritz_: so the bug is in me, not in Rakudo?

[21:54] <moritz_> masak: not quite sure

[21:54] <masak> why not?

[21:54] <moritz_> because I haven't found the explicit definition of the scoping rules for $/

[21:54] <moritz_> if it's OUTER:: or CALLER::

[21:55] <masak> moritz_: S05 says 'C<$/>, which is a contextual lexical declared in the outer subroutine'

[21:55] <masak> does that help?

[21:55] <masak> 'contextual' seems to indicate CALLER::

[21:56] <moritz_> not quite

[21:56] <moritz_> to me that implies that each routine has an implict '$/ is context' declaration

[21:56] <moritz_> but your example doesn't have a routine

[21:56] <moritz_> just blocks

[21:57] <masak> aye.

[21:57] <masak> I think that's why I expected it to work.

[21:57] *** Wolfman2000 joined
[21:57] <masak> but perhaps it's explanation enough that the block uses a different $/ than the ~~.

[21:58] <moritz_> this is all very confusing to me, and covered in far too many different places of the spec

[21:58] <moritz_> let's just wait for pmichaud to clear it up, I'm sure he knows the scoping rules better

[21:58] <Wolfman2000> Afternoon. masak: I'll be starting on more of my pastebin work soon.

[21:59] <masak> Wolfman2000: cool! I'm having a Temporal Tuesday, so I'll probably not work on the pastebin tonight.

[21:59] <masak> Wolfman2000: but you go ahead.

[21:59] <Wolfman2000> ...it's Monday at your place?

[22:00] <pmichaud> what's the question?

[22:00] <masak> Wolfman2000: no. how did you arrive at that? :)

[22:01] <Wolfman2000> masak: I thought you were going to a Temporal on Tuesday.

[22:01] <masak> pmichaud: in my evals above, why do I get Failure?

[22:01] <Wolfman2000> When today at my time is Tuesday

[22:01] <masak> Wolfman2000: right. that's why I'm doing it today. :)

[22:01] <masak> because today is Tuesday.

[22:01] <pmichaud> masak: each block gets its own $/

[22:02] <Wolfman2000> ...then I may as well know. What IS a Temporal?

[22:02] <masak> each block, even.

[22:02] <pmichaud> currently rakudo treats match as being a rebind of lexical $/, not an assignment

[22:02] <masak> Wolfman2000: it's a module with DateTime stuff in it.

[22:02] <masak> pmichaud: makes sense, I think.

[22:02] <pmichaud> so, in    { 'a' ~~ /./ };  say $/;

[22:02] <pmichaud> the inner match isn't affecting the outer $/

[22:02] <pmichaud> I'm not sure if it should or not.

[22:02] *** jaffa8 joined
[22:03] <Wolfman2000> ah. I'm using DateTime on the pastebin myself. I'd use DateTime::Format::MySQL, but it won't install on Feather due to hard coded man page installation. :(

[22:03] <pmichaud> istr that matches rebind $/, not assign to them.

[22:03] <jaffa8> hi

[22:03] <jaffa8> how come do you have time for this

[22:03] <jaffa8> ?

[22:03] <moritz_> jaffa8: we take the time for this

[22:03] <Wolfman2000> jaffa8: english?

[22:03] <masak> jaffa8: time for what? IRC?

[22:03] <jaffa8> yes

[22:03] <jaffa8> being here

[22:03] <jaffa8> talking

[22:04] <jaffa8> thingking

[22:04] <jaffa8> discussing

[22:04] <masak> jaffa8: that's the way we communicate with each other.

[22:04] <moritz_> pmichaud: but should a block default to the OUTER::$/ or the CALLER::$/?

[22:04] <masak> jaffa8: I have time for it because I only work 50%, because I want to do Perl 6.

[22:04] <jaffa8> What do you work?

[22:04] <pmichaud> blocks default to OUTER::$/

[22:04] <pmichaud> but a rebind breaks that, of course.

[22:05] <masak> jaffa8: I don't know why, but I'd rather not discuss that right now.

[22:05] <masak> jaffa8: I usually have no problem discussing personal details, but I think your question was kinda sudden.

[22:05] <jaffa8> you do know why.... well....

[22:05] <masak> jaffa8: I'd rather stay on topic for now.

[22:07] <Wolfman2000> masak: Unsure what the topic is at this point.

[22:07] <masak> Wolfman2000: $_

[22:07] <moritz_> Wolfman2000: Perl 6

[22:08] <moritz_> masak: based on pmichaud++'s expectation I think rakudo behaves correctly

[22:08] *** Whiteknight joined
[22:08] <masak> moritz_: me too.

[22:08] <moritz_> masak: and the correct solution is to pass $/ as a formal parameter to the block

[22:08] <masak> moritz_: that's what I eventually did.

[22:09] <jaffa8> Have you concentrated on compilation speed issues lately?

[22:09] <moritz_> no

[22:10] <pmichaud> yes

[22:10] <masak> jaffa8: if you're interested in what's on the agenda for Rakudo, have a look at docs/ROADMAP.

[22:10] * pmichaud has concentrated on compilation speed issues a bit.  rewrote the regex engine to make it easier to do that, too :)

[22:10] <jaffa8> masak: I do not know why but I like to ask questions personally.

[22:11] <Wolfman2000> jaffa8: I ask questions a lot. Nothing to be ashamed of.

[22:11] <masak> jaffa8: aye. :) and usually, that's ok with me.

[22:11] <moritz_> jaffa8: that's usually fine, if the number of personal question stays low compared to number of on-topic questions

[22:11] <masak> jaffa8: but tonight I clammed up. sorry. :)

[22:11] <moritz_> just as it's fine by masak not to discuss some of them

[22:12] <jaffa8> you know it is suprising that compilation is that slow.

[22:12] <masak> jaffa8: not really.

[22:12] <masak> jaffa8: it's surprising that it is that fast. :)

[22:13] <pmichaud> I'm certainly surprised at times :)

[22:13] <jaffa8> 50 lines per second?

[22:13] <moritz_> if you know what's really going on under the hood, you'd be surprised that it ever finishes

[22:13] <spinclad> jaffa8: we could add a couple more layers of overhead if you like

[22:13] <Wolfman2000> masak: We may be in friendly competition here, but...I'm not going to be stubborn and ignore your advice if you have a good idea. http://i37.tinypic.com/2nve4a1.png  That's what my entry page looks like so far.

[22:14] <masak> Wolfman2000: oh, friendly competition means sharing.

[22:14] <masak> Wolfman2000: looks nice. Cayalyst, I see?

[22:14] <Wolfman2000> masak: Yes.

[22:15] <Wolfman2000> If this is going to be a perl pastebin, may as well use a perl program.

[22:15] <jaffa8> I have a theory... is the parson recursive descent based?

[22:15] <jaffa8> =parser.

[22:15] <pmichaud> it's both recdescent and bottom-up

[22:15] *** stephenlb joined
[22:15] <masak> jaffa8: nice theory, though. it shows you know a bit about parsers. :)

[22:15] * justatheory is nice

[22:16] * masak pats justatheory 

[22:16] * justatheory purrs

[22:16] <masak> :)

[22:16] *** solarion joined
[22:17] <jaffa8> you have not profiled the code yet I guess.

[22:17] *** SmokeMachine left
[22:17] <moritz_> bad guess

[22:17] <pmichaud> a small bit of profiling.  the tools for profiling haven't been really available yet.

[22:17] <jaffa8> to figure what is responsible for the bulk of the ""spped"

[22:18] <pmichaud> the bulk of the expense is likely the method call overhead that parrot imposes

[22:18] <pmichaud> the new regex design is able to inline a lot of that, though (as soon as I'm convinced that's where a big costs lies)

[22:18] <masak> pmichaud++

[22:18] <jaffa8> so you do not know.

[22:19] <pmichaud> right now our focus is on "runs correctly" more than "runs fast"

[22:19] <Wolfman2000> I also support making it run right first.

[22:20] <masak> me too!

[22:20] <masak> it's been quite a ride so far. :)

[22:20] <masak> I care about speed, but I care more about seeing Perl 6 come alive.

[22:20] <pmichaud> the next couple of weeks should be a nice ride, too.  :)

[22:20] <masak> I don't doubt it. :)

[22:20] <jaffa8> you mean bumpy

[22:21] <pmichaud> bumpy, yes, but also fun

[22:21] <spinclad> hugme: hug jaffa8 

[22:21] * hugme hugs jaffa8

[22:21] <masak> spinclad: you beat me to it! :)

[22:21] <masak> hugme: hug jaffa8

[22:21] * hugme hugs jaffa8

[22:22] *** KyleHa left
[22:24] <jnthn> pmichaud: Added a few more little pieces.

[22:24] <pmichaud> jnthn: do you have any idea what 07-ref.t was intended to test in the first place?

[22:24] <jnthn> pmichaud: Nothing big, just little bits.

[22:24] <jnthn> pmichaud: No idea.

[22:24] <pmichaud> I'm thinking of taking it out.

[22:24] <jnthn> pmichaud: And you know, after I fixed it, I realized two of the tests were todo'd!

[22:25] <pmichaud> I'm thinking of taking out several tests that don't really seem to do much for us.

[22:25] <pmichaud> (at the 01-sanity level)

[22:25] <jnthn> pmichaud: Feel free. 

[22:25] <jnthn> pmichaud: The more important point is that it led me to fix True and False.

[22:25] <pmichaud> I removed 'for' from Test.pm, so we really don't need it at the moment.

[22:25] <pmichaud> yes, your fixes are awesome.

[22:25] <jnthn> So it's served its purpose. ;-)

[22:25] <pmichaud> I'm a little curious as to why you have one instance of  $*IN_DECL := 0;    when the rest of them are $*IN_DECL := ''

[22:26] <pmichaud> but that's a minor nit :)

[22:26] <jnthn> s/you/STD/ and your question becomes mine. :-)

[22:26] <pmichaud> heh

[22:26] <pmichaud> touche'

[22:26] <jnthn> I don't know.

[22:26] <spinclad> .oO( but... but... if True and False were borken... how could anything wrok? )

[22:26] <jnthn> spinclad: Boolean logic is overrated.

[22:26] <pmichaud> spinclad: rakudo has a tradition of having True and False do whatever we feel like.

[22:27] <pmichaud> rakudo:  True = 5;   say True;

[22:27] <p6eval> rakudo 01c042: 5␤

[22:27] <pmichaud> :-D

[22:27] * jnthn looks ill, then realizes this is fixed in ng :-)

[22:27] <Wolfman2000> pmichaud: How were you able to set "True" to 5 instead of "$True"?

[22:27] <pmichaud> Wolfman2000: True is a constant

[22:27] <pmichaud> well, "constant"

[22:27] <pmichaud> so the compiler recognizes it as a bareword constant

[22:27] <Wolfman2000> ...why are you changing a constant then?

[22:28] <pmichaud> and then passes that as the lhs to &infix:<=>

[22:28] *** pnate2 left
[22:28] <pmichaud> and since the current master branch doesn't have good rw container handling, it happily does the assignment

[22:28] <pmichaud> i.e., rakudo (master) doesn't really understand constants all that well

[22:28] <pmichaud> it tends to want to treat everything as a variable.

[22:28] <pmichaud> as jnthn++ said, this is fixed at a fundamental level in ng

[22:28] <spinclad> ... *how* are you changing a constant ... is answered

[22:29] <jnthn> pmichaud: I'll change that decl to ''

[22:29] <pmichaud> jnthn:  +1

[22:29] <jnthn> pmichaud: And hopefully STD adopts this. ;-)

[22:29] <pmichaud> maybe change it in STD.pm, too :)

[22:29] <jnthn> ooh...dare I? :)

[22:29] <Wolfman2000> jnthn: dare.

[22:30] <Wolfman2000> Far as I can tell, Perl 6 is still safe to be daring with. We have until April.

[22:30] <jnthn> I haven't actually got it built locally. :-)

[22:30] <jnthn> So I'd not know if I broked it. :-)

[22:31] *** justatheory left
[22:32] <jnthn> rakudo: my $foo; undefine $foo

[22:32] <p6eval> rakudo 01c042:  ( no output )

[22:33] <jnthn> rakudo: my $foo = 42; undefine $foo; say $foo

[22:33] <p6eval> rakudo 01c042: Use of uninitialized value␤␤

[22:33] <pmichaud> jnthn: oh, it would be nice to have   "my Int $a"  working again, if you wanted to work on that :-)

[22:33] <jnthn> pmichaud: Oh, even if we only parse that we'll get a win.

[22:33] <jnthn> (in terms of being able to parse a bunch of the setting)

[22:33] <pmichaud> right

[22:34] <pmichaud> and I'm not likely to get to it before tomorrow afternoon

[22:34] <pmichaud> so, if you wanted to start, feel free :)

[22:34] <jnthn> Well, I can make it parse easy enough, I suspect. :-)

[22:40] <jnthn> pmichaud: defined.t passes again.

[22:41] <dalek> book: 21fdcc7 | moritz++ | src/multi-dispatch.pod:

[22:41] <dalek> book: [mmd] fix grammaro, and further discussion on one "=for author" note

[22:41] <dalek> book: review: http://github.com/perl6/book/commit/21fdcc7c189762e1a151725ddb2341331957fbe8

[22:41] <moritz_> rakudo: my Int $x = 5; undefine $x; say $x.WHAT

[22:41] <p6eval> rakudo 01c042: Failure()␤

[22:41] <moritz_> that looks...wrong

[22:41] <moritz_> shouldn't that still be an (undefined) Int?

[22:42] *** fonzotic joined
[22:43] *** payload left
[22:43] *** payload joined
[22:44] <mathw> moritz_: I would have thought so...

[22:44] <pmichaud> right.  In order to fix that we really need the type information on the variable...

[22:45] <pmichaud> jnthn: (undefined) ... ummmmm, interesting.  :-)

[22:45] <jnthn> ;-)

[22:45] <pmichaud> although "is ref" feels better whenever dealing with variables.

[22:45] <jnthn> pmichaud: Yeah, it won't stay like that. :-)

[22:45] <jnthn> pmichaud: I doubt.

[22:46] <jnthn> pmichaud: Given the type info needs.

[22:46] <pmichaud> oh?

[22:46] <jnthn> pmichaud: Well, I guess I could shoot for

[22:46] <pmichaud> I don't understand

[22:46] <jnthn> pmichaud: What moritz_ said about suggests that

[22:46] <jnthn> my Int $x = 42; undefine $x; say $x.WHAT; # Int

[22:46] *** Jim__ joined
[22:46] <pmichaud> right

[22:46] <pmichaud> I believe that to be true

[22:47] <pmichaud> but I believe that needs to be implemented in &infix:<=>

[22:47] <jnthn> pmichaud: Right, so the undefine impl I checked in won't handle that. :-)

[22:47] <jnthn> pmichaud: Oh.

[22:47] <pmichaud> because   $x = undef    should probably do something similar

[22:47] <jnthn> In that case, my undefine impl is Mary Poppins then. :-)

[22:47] <pmichaud> it is.

[22:47] <pmichaud> but I still think the $x param should be 'is ref'

[22:47] * moritz_ wonders why undefine() needs to be a function of its own when $thing = undef does the same

[22:48] <moritz_> maybe a left-over from perl 5 and the undef() function

[22:48] <pmichaud> I'm not certain about the $thing = undef semantic

[22:48] <jnthn> pmichaud: It's only going to fail later on in infix:<=>

[22:48] <pmichaud> jnthn: why?

[22:48] <jnthn> Because that will also say "is it rw", no?

[22:48] * jnthn thinks he's missing something

[22:48] <pmichaud> yes, but iiuc   'is rw' has a somewhat different meaning than 'is ref'

[22:49] <pmichaud> and whenever we're talking about modifying a container, I think 'is ref' is really what we want

[22:49] <pmichaud> but I could be wrong about that

[22:49] <pmichaud> anyway, I postpone that question to later for now

[22:49] <jnthn> I was under the impression that "is rw" = "is ref" + container check.

[22:49] <pmichaud> have to take daughter to fencing class

[22:49] <jnthn> erm

[22:49] <jnthn> rw check

[22:49] <jnthn> OK. :-)

[22:49] <pmichaud> I think "is rw" also coerces to a rw value if it can

[22:49] <pmichaud> gotta run

[22:49] <pmichaud> bbl

[22:49] <jnthn> Oh.

[22:49] * jnthn changes it to is ref :-)

[22:50] *** jaffa8 left
[22:50] <jnthn> ...and tries to work out what a coercion to an rw value means.

[22:52] <jnthn>  > my Monkey $x;

[22:52] <jnthn> In "my" declaration, typename Monkey must be predeclared

[22:52] <jnthn> std++

[22:52] <jnthn> (stealing from std)++

[22:53] <jnthn> (no built-in Monkey)--

[22:53] *** alan___ joined
[22:53] <mathw> hmm odd

[22:53] *** Jim__ is now known as jweisgram

[22:54] <jnthn> mathw: The lack of monkey?

[22:54] *** alan___ left
[22:54] <moritz_> jnthn: to me "coercion to an rw value" sounds like what autovivification does

[22:55] <jnthn> moritz_: Ah, OK...that would make some sense.

[22:55] <jnthn> Presuming we're passing in something vivifiable.

[23:00] <masak> jnthn: waitwait, STD.pm has a Monkey built-in?

[23:00] <zaslon> lolmasakhazblogged! masak++ 'November 10 2009 -- think of the children!': http://use.perl.org/~masak/journal/39872?from=rss

[23:01] <jnthn> masak: BTW, after listening a few more times, I think that "mi man e kass" is actually "nemame cas" = "we don't have time" or something like that.

[23:01] <masak> jnthn: oh! makes sense. :)

[23:01] <jnthn> masak: But I struggle to follow Czech anyway, let alone when it's sung in a throaty accent. :-)

[23:01] *** iblechbot left
[23:02] <masak> jnthn: I like the word 'nemame'. I think I could have figured that one out, given a few seconds. 'cas' is obviously from Russian.

[23:02] <jnthn> *nod*

[23:02] <jnthn> What's a boll-parti? (parti I can guess)

[23:03] <masak> jnthn: a 'ball party'. and no, it doesn't make sense. and it's not inherently dirty either, just nonsensical.

[23:03] <jnthn> ah, OK. :-)

[23:03] <jnthn> I wondered if it was some special Swedish type of event. :-)

[23:03] <masak> 'party' as in political party, not a party that one throws.

[23:04] <jnthn> oh?

[23:04] <jnthn> OK.

[23:04] <jnthn> Then I couldn't guess. :-)

[23:04] <masak> the other type of party is called 'fest', from the (I guess) Germanic word.

[23:04] <moritz_> masak++ # NOT WANTing Temporal::DateTime.new(:date(Temporal::Date.new(:year(2010), :month(4), :day(1))), :time(Temporal::Time.new(:hour(0), :minute(0), :second(0))), :timezone(Temporal::Timezone::Observance.new(:offset(0), :isdst(False), :abbreviation(''))))

[23:04] <jnthn> omgwtfplzno

[23:04] <masak> moritz_: tell me about it!

[23:04] * jnthn goes to read masak++'s most 

[23:04] <moritz_> though of course :isdst(False) could be written as :!isdst

[23:04] <jnthn> *post

[23:05] <masak> jnthn: does 'most' mean 'bridge'?

[23:05] <masak> moritz_: not in current Rakudo. :/

[23:05] <masak> moritz_: there's an RT ticket about that.

[23:05] <moritz_> I know

[23:05] <jnthn> masak: yes

[23:05] <moritz_> but in principle ;-)

[23:05] <jnthn> masak: Damm! Now I know why I struggle to recognize rectangles...

[23:05] <masak> :)

[23:06] *** seanstickle joined
[23:06] <moritz_> German "Most" is actually must (the drink)

[23:06] <jnthn> There's a drink called must?

[23:07] <masak> oh yes.

[23:07] <moritz_> http://en.wikipedia.org/wiki/Must

[23:07] <masak> jnthn: you'd like it. :)

[23:07] <jnthn> masak: If I DateTime.new('omg srsly NOT a date'), what do I get?

[23:07] <moritz_> hopefully a fail()

[23:07] *** payload left
[23:07] <masak> jnthn: right now, a silent failure. I'm still mulling about that one.

[23:07] <masak> yes, a fail().

[23:08] <masak> see the source. http://github.com/masak/rakudo/blob/72fd37f7117461629a75807b447c0c0c5b707c4d/src/setting/Temporal.pm

[23:08] <jnthn> masak: a fail('something here') isn't really a silent failure. :-)

[23:08] <jnthn> moritz_: I Must try that!

[23:08] <masak> jnthn: no? what is it, then?

[23:09] <jnthn> masak: A soft failure.

[23:09] <jnthn> masak: If I try and use the Failure you give back, it'll explode unless I check it properly.

[23:09] <masak> ah. soft.

[23:09] <masak> jnthn: I'm not sure I like that behaviour, though.

[23:10] <moritz_> it's the default perl 6 failure behaviour

[23:10] <masak> jnthn: because what I most often do (in the tests) is try to call methods on the returned object.

[23:10] <jnthn> masak: I've found TimToady tends to encourage soft fail semantics over hard fail.

[23:10] <masak> jnthn: and then the failure error isn't triggered.

[23:10] <moritz_> it should be.

[23:10] <jnthn> masak: That may be a Rakudo bug.

[23:10] <jnthn> Erm

[23:10] <jnthn> That *is* a Rakudo bug.

[23:11] <masak> jnthn: I also think it's partly bad because a .new method should either return a new object of the given type, or die.

[23:11] <jnthn> I think trying to call a method on a Failure that isn't known is meant to throw the exception within it.

[23:11] <japhb> jnthn, how much magic is there in making fail work?  Is it a reasonable thing to add to NQP?  (It's certainly something I *want*, but I'm trying to stay within the design parameters for NQP here)

[23:11] <jnthn> masak: Hmm. That is an interesting argument.

[23:11] <masak> jnthn: that's why I'm leaning towards death, at least as a conservative first approximation.

[23:11] <masak> hm. that didn't come out right. :)

[23:12] <jnthn> japhb: Thing is, it needs some kind of Failure object (= now we need a standard library) and to get the throw-exception-on-dispatch semantics may well need a custom dispatcher.

[23:12] <moritz_> ;-)

[23:12] <masak> s/death/using die()/

[23:12] <jnthn> masak: lol :-)

[23:12] <moritz_> it's pretty easy to s/ « die » /fail/ later on

[23:12] <masak> exactly.

[23:12] <moritz_> but it does make a difference for testing

[23:12] <masak> nod.

[23:12] <jnthn> It's still easy to s/fail/die/ :-)

[23:12] <japhb> jnthn, OK, fair enough.  Too bad.  I always liked fail's ability to effectively be a return value and an exception at the same time.

[23:12] * masak does that, for now

[23:13] <jnthn> japhb: Yeah, it's a nice idea.

[23:13] <jnthn> japhb: I think what it needs may go beyond what NQP can cleanly provide though.

[23:14] <japhb> jnthn, yup ...

[23:14] <jnthn> japhb: As always final call is pmichaud++'s though. :-)

[23:14] <japhb> :-)

[23:15] <jnthn> masak++ for working on Temporal :-)

[23:15] <masak> it's fun work. and quite immediate, as opposed to other things I'm working on.

[23:17] <jnthn> *nod*

[23:21] <jnthn> .oO( phew, git commit --ammend saves my reputation again )

[23:22] <japhb> masak: speaking of other things ... just a reminder that Plumage can make short term use of proto merging the installed_modules branch

[23:22] <jnthn> Sheesh, we comitted so much today that http://github.com/rakudo/rakudo/commits/ng only has today's commits!

[23:22] <frettled> masak++ keep on posting about stuff like that

[23:22] <jnthn> (on the first page)

[23:22] <frettled> jnthn: \o/

[23:23] <jnthn> Alas, the next step is to put back variable trait decls, so I can do container types.

[23:23] <masak> japhb: good to know. if it's only me working on the installed-modules branch, it'll take a while. if more hands decide to help, it'll go faster.

[23:23] <jnthn> And that probably needs more branes than I can spare tonight. :-)

[23:23] <masak> frettled: thanks. :)

[23:23] <frettled> We almost nailed mst last week, I see.  He was only about 16 hours from falling short of the absolute 10-day deadline, muahaha.

[23:25] *** pmurias joined
[23:26] <masak> frettled: I have a feeling (based on what he's written in some blog posts) that he is very well aware of such deadlines.

[23:26] <frettled> m-hm :D

[23:27] *** payload joined
[23:28] <moritz_> is there an easy way to see when I last missed some deadline for the ironman thing?

[23:28] <masak> define 'easy' :)

[23:28] *** __ash__ left
[23:28] <masak> I sure wouldn't mind seeing a web app with everyone's status on it.

[23:29] <moritz_> without doing date arithmetic myself

[23:29] <masak> preferably with a combination of progress bar and exact time left.

[23:29] <japhb> masak: At the moment I'm too busy trying to replace proto to have the tuits to fix it.  ;-)

[23:29] <moritz_> and somhow I get the impression that ironman doesn't like my feed, and throws up dates and so on

[23:29] <masak> japhb: sounds like you're doing what you should. :)

[23:30] <frettled> moritz_: I think the automatic thingybob for providing you with the correct Iron Man avatar works.

[23:31] <moritz_> frettled: you mean the image?

[23:31] <moritz_> frettled: that doesn't tell me anything

[23:31] <frettled> Though it appears that I haven't gotten my real Iron Man badge yet, even though I've been blogging for more than six months now.

[23:31] <frettled> moritz_: it should change to a Paper Man if you miss a deadline.

[23:31] <moritz_> I can't even tell my status from looking at the badge

[23:31] <moritz_> because they are just in different colors, and I can't map color to material easily

[23:32] *** hercynium joined
[23:32] <moritz_> maybe I'm just mentally impared

[23:32] <moritz_> and it also doesn't tell me when I last missed a deadline

[23:32] <frettled> aha

[23:32] <moritz_> or which one

[23:32] <frettled> I don't think the badge thingybob tells you that, no.

[23:33] <masak> moritz_: you're lucky to have a badge! I'm on use.perl, which sucks a bit more every day. :(

[23:33] <moritz_> I don't put that badge on my blog because it contains nearly 0 information

[23:34] <frettled> Paper man: http://ironman.enlightenedperl.org/munger/mybadge/male/hanekomu.png

[23:34] <masak> but you could if you wanted.

[23:34] <frettled> Iron Man: http://ironman.enlightenedperl.org/munger/mybadge/male/mst.png

[23:34] <frettled> Somethingelse Man: http://ironman.enlightenedperl.org/munger/mybadge/male/masak.png

[23:34] <masak> yay! I'm Somethingelse Man!

[23:35] <moritz_> i'm also paper man

[23:35] <moritz_> though I'm pretty sure that I blogged regularly for the last six weeks or so

[23:35] <frettled> masak: I think it's cute that our blogs are at the top of the list on the planet, though.

[23:35] <masak> frettled: that's bronze, whatever that means.

[23:35] <moritz_> that's why I'd like to know what went wrong

[23:35] <frettled> masak: it's the one before Iron

[23:35] <masak> frettled: woot.

[23:36] <frettled> masak: maybe I should complain, I haven't missed a day, I even started first :)

[23:36] <masak> I think we could put together a graphical-ironman-status web app on feather pretty easily.

[23:37] <frettled> hmm, yeah

[23:37] <masak> frettled: in that case, I think you should complain.

[23:37] <masak> and sooner rather than later.

[23:39] <moritz_> there seem to be some spam submissions on the feed list

[23:39] *** payload left
[23:40] <frettled> Argh, no, it appears that I may have missed a submission by 35 minutes between September 13 and 23, or the post dates were wrong.  Hrm.

[23:40] <frettled> Ah, well.  The main point is to be blogging about perlish things.

[23:40] *** fonzotic left
[23:40] <frettled> moritz_: oh?  Hms, that's not nice.  :(

[23:41] *** pmurias left
[23:41] *** wknight8111 joined
[23:42] *** Whiteknight left
[23:45] *** namenlos left
[23:45] <sjohnson> 1heh

[23:46] <pmichaud> back again

[23:47] <frettled> On the Perl again

[23:47] <frettled> Just can't wait to get on the Perl again

[23:48] <frettled> The life I love is making Rakudo with friends

[23:48] <frettled> And I can't wait to get on the Perl again

[23:48] <frettled> (with apologies to Willie Nelson)

[23:48] <frettled> Good night!

[23:48] <jnthn> night, frettled 

[23:49] <masak> night, frettled

[23:50] <jnthn> pmichaud: I'm done for the day coding wise.

[23:50] <pmichaud> jnthn: okay.  around tomorrow?

[23:50] <jnthn> pmichaud: The .once() thingy would be very cool to have for variable traits and so on.

[23:51] <jnthn> pmichaud: Yeah, tomorrow should be good for me.

[23:51] <pmichaud> jnthn: yes, it would.  I'll bump it up on my list.

[23:51] <pmichaud> jnthn: hope you're getting some rakudo days in :)

[23:51] <jnthn> pmichaud: Got some phone conf in the morning, about $new-work

[23:51] <pmichaud> I suspect I'll grab some rakudo days as well, adding more new features into ng

[23:52] <pmichaud> tonight is writing a blog report about what's been done so far

[23:52] <masak> \o/

[23:52] <pmichaud> I'd like to start tweeting our progress, but much of it doesn't make sense without the background about what 'ng' is :-)

[23:52] <jnthn> pmichaud: But afternoon and evening are probably totally free.

[23:52] <pmichaud> jnthn: sounds excellent

[23:53] <jnthn> pmichaud: I've counted the time between yesterday and today that I spent on Rakudo as a Rakudo day.

[23:53] <jnthn> It was more than enough between them to add up to one. :-)

[23:53] <jnthn> I'm blogging about my hacking at the moment. :-)

[23:53] <pmichaud> jnthn: +1

[23:54] <pmichaud> I should probably count the .lineof work and stuff I did as a rakudo day.  It doesn't fall under the other grants.

[23:55] <jnthn> Yes, for sure.

[23:55] <jnthn> It was a massive win.

[23:55] <jnthn> It's made an epic difference to my productivity since you did it.

[23:57] <pmichaud> I'm curious to see how it affects spectest timings in master

[23:57] <pmichaud> I should know tomorrow

[23:57] <pmichaud> (since I just bumped PARROT_REVISION today)

[23:57] <jnthn> Yes, that would be nice.

[23:58] <jnthn> Since if it helps there, it'll help in ng too. :-)

[23:58] <jnthn> When we get to the spectests being usefuller.

[23:58] <masak> 'night.

[23:58] *** masak left
[23:58] <jnthn> night masak

