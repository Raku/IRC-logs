[00:09] *** pbuetow left
[00:10] *** justatheory left
[00:20] <jnthn> Limbic_Region: Yes, there are issues with NaN and Inf floating point numbers that cause a bunch to fail. :-(

[00:32] *** [particle] joined
[00:36] *** nek joined
[00:39] * jnthn -> sleep

[00:41] *** braceta left
[00:51] *** [particle]1 left
[00:57] *** sail0r joined
[00:59] *** sail0r left
[00:59] *** sail0r joined
[01:01] *** sail0r left
[01:02] *** jferrero left
[01:02] *** meppl joined
[01:28] *** hercynium_ joined
[01:34] *** wknight8111 left
[01:40] *** DemoFreak left
[01:59] *** hercynium_ left
[01:59] *** meppl left
[01:59] *** hercynium_ joined
[02:02] *** dukeleto left
[02:03] *** hercynium left
[02:48] *** jrockway left
[02:49] *** jrockway joined
[02:51] *** dukeleto joined
[02:54] *** [particle]1 joined
[02:57] *** shinobi-cl joined
[02:57] <shinobi-cl> hi all

[02:58] <shinobi-cl> i want to know all u ppl opinion, if you care :)

[02:58] <shinobi-cl> i have some old perl code to read some doom files...

[02:58] <shinobi-cl> and im looking for a rather large project where to spend my time..

[02:59] <shinobi-cl> so, the thing is... if i wanted to do a doom port in perl (i?ve seen even Delphi ports!)

[02:59] <shinobi-cl> do u think is a good idea starting on perl6?

[03:01] <shinobi-cl> i dont care for 3d rendering, in fact i like software rendenring much more

[03:01] *** unobe joined
[03:01] <shinobi-cl> so 3d libraries are not an issue, timers are more an issue in fact (as old doom uses 35hz for timing)

[03:02] *** mdxi left
[03:07] <shinobi-cl> now tht perl5 has a decent and usable oop implementation i?m tempted to start it on perl5

[03:12] *** dukeleto left
[03:13] *** [particle] left
[03:13] *** mdxi joined
[03:17] *** meppl joined
[03:19] *** kisu_ joined
[03:20] <shinobi-cl> lalala

[03:22] *** dukeleto joined
[03:28] *** Limbic_Region left
[03:33] *** meppuru joined
[03:33] *** meppl left
[03:33] *** meppuru is now known as meppl

[03:35] *** kisu left
[03:37] <buu> Haha

[03:37] <buu> "now that perl5 has oop"

[03:43] <shinobi-cl> well

[03:43] <shinobi-cl> not NOW really

[03:43] <shinobi-cl> by now i mean SINCE MOOSE

[03:44] <shinobi-cl> that lib alone makes oop in perl an enjoyable thing

[03:47] <buu> Wow.

[03:47] <shinobi-cl> :/

[03:48] <shinobi-cl> so, now a project like a computer game is feasible in perl5

[03:49] <shinobi-cl> but... im still not decided if making something in perl5 would be a waste of time, being that p6 seems ?close? by now

[03:54] <shinobi-cl> ahh fuck it, i?ll do it in perl6

[03:54] <shinobi-cl> night all

[03:54] *** shinobi-cl left
[04:07] <mdxi> that was pretty awesome

[04:13] *** xinming_ is now known as me

[04:13] *** me is now known as xinming

[04:51] *** dukeleto left
[04:55] *** nek left
[04:57] *** cspencer joined
[05:05] *** masak joined
[05:14] *** [particle] joined
[05:15] *** sepheebear joined
[05:15] *** _jedai_ joined
[05:18] *** |jedai| left
[05:21] *** dukeleto joined
[05:22] *** meppl left
[05:26] <mberends> masak: OH HAI

[05:26] <masak> mberends: OH HAI

[05:26] <mberends> U HAZ DO SVG?

[05:27] <masak> IS DO IT NAO.

[05:28] <mberends> U HAZ C MI SVG? http://autoexec.demon.nl:8888/svg/

[05:28] <masak> O, I C!

[05:29] <masak> mberends++

[05:29] *** dukeleto left
[05:29] <mberends> SIZ SVG IS BIG & SMAL

[05:29] <masak> YA -- IZ BIG & SMAL & SLICES

[05:30] <mberends> SLICES = CROP R CLIP R SUMTIN

[05:31] *** nek joined
[05:31] <masak> IZ VRY GOOD. I CAN HAZ MORE CODING SVG NAO.

[05:32] <masak> mberends++

[05:32] *** [particle]1 left
[05:33] <mberends> U C SVG TINY? IZ BETR 4 U & LIL SYS. http://www.w3.org/TR/SVGTiny12/

[05:34] *** dukeleto joined
[05:35] *** _jedai_ left
[05:35] *** |jedai| joined
[05:37] <masak> YA -- I CAN HAZ C.

[05:37] <mberends> OK I GOAZ 2 WRK BAI

[05:37] <masak> BAI!

[05:38] *** mberends left
[05:38] *** cspencer left
[05:40] *** mtnviewmark joined
[05:45] *** Exodist left
[05:49] <masak> mtnviewmark: hi!

[05:49] <masak> how's it going?

[05:49] <mtnviewmark> good!  

[05:49] <mtnviewmark> I've made my way through most of STD.pm

[05:50] <mtnviewmark> there are lots of discrepancies between STD.pm and Syn03

[05:50] <masak> mtnviewmark: that's something we need to address.

[05:50] <mtnviewmark> I'm making a list -- which do you think is considered more authoritative?

[05:50] <masak> STD, but I also guess it depends.

[05:51] <mtnviewmark> oh - really?  fie I was hoping the Synop

[05:51] <masak> STD.pm is newer, in a sense.

[05:51] <masak> it's what $larry has been working on lately.

[05:51] <mtnviewmark> hmmm... okay, though some of the issues seem like clear STD.pm errors -- mostly associativity declarations

[05:52] <masak> also, there's something to be said for an executable specification :)

[05:52] *** dukeleto left
[05:52] <masak> IIRC, it passes the whole test suite... OTOH, that doesn't mean it's correct.

[05:52] <mtnviewmark> if I assemble a list of differences - and posted it to the perl6-dev mailing list, would that be likely to get a response from $larry or others involved in adjudicating such differences?

[05:53] <mtnviewmark> hmmm.... I wonder if there is really a postfix:<i> operator!

[05:53] <mtnviewmark> I'm not even sure how you'd write such a thing!

[05:53] <masak> moritz_: p6l.

[05:53] <masak> sorry, mtnviewmark: p6l.

[05:53] <mtnviewmark> p6l?

[05:53] <masak> mtnviewmark: and I think you will get a response within a few days.

[05:53] <masak> perl6-language.

[05:54] <masak> and yes, there is a postfix:<i>

[05:54] <masak> rakudo: say 4 + 5i

[05:54] <mtnviewmark> ah - okay, I'll subscribe and send my findings when I've gotten through the end -- (currently at %conditional)

[05:54] <p6eval> rakudo 35576: OUTPUT«4+5i␤»

[05:54] <mtnviewmark> oy!

[05:54] <masak> :)

[05:54] <masak> clear omission from S03, yes.

[05:54] <masak> rakudo: say (1 + 2i) * (4 - 5i)

[05:54] <mtnviewmark> and one wonders how you apply it to a varaible, say $t

[05:54] <p6eval> rakudo 35576: OUTPUT«14+3i␤»

[05:55] <masak> mtnviewmark: you don't, I guess.

[05:55] <mtnviewmark> std: my $t; ($t)i;

[05:55] <p6eval> std 24912: OUTPUT«00:05 83m␤»

[05:55] <masak> rakudo: my $t = 5; say ($t)i;

[05:55] <p6eval> rakudo 35576: OUTPUT«0+5i␤»

[05:55] <masak> huh! :)

[05:55] <mtnviewmark> by the way - what is that supposed to mean? the output format from std: ???

[05:56] <masak> mtnviewmark: I think it's the number of seconds. I don't know what 83m means.

[05:57] <TimToady> 83 megabytes

[05:58] <masak> ah.

[05:58] <TimToady> rakudo: my $t = 5; say $t.i

[05:58] <p6eval> rakudo 35576: OUTPUT«Method 'i' not found for invocant of class 'Int'␤current instr.: '_block14' pc 80 (EVAL_17:44)␤»

[05:58] <masak> TimToady: should that work?

[05:58] <TimToady> think so

[05:58] * masak submits rakudobug

[05:59] <TimToady> pugs: my $t = 5; say $t.i

[05:59] <p6eval> pugs: OUTPUT«*** No such method in class Int: "&i"␤    at /tmp/DFnrL3cinP line 1, column 16 - line 2, column 1␤»

[05:59] <TimToady> hmm

[06:00] <TimToady> rakudo: my $t = 5; say $t\i

[06:00] <masak> well, it's only fair -- if [] and {} have dot forms, why not i?

[06:00] <p6eval> rakudo 35576: OUTPUT«Statement not terminated properly at line 1, near "\\i"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[06:00] <TimToady> rakudo: my $t = 5; say $t\ i

[06:00] <p6eval> rakudo 35576: OUTPUT«0+5i␤»

[06:00] <masak> heh!

[06:00] <masak> I'll submit that $t\i one as well.

[06:01] <mtnviewmark> just noticed that STD has .= forms at same precedence as =

[06:01] *** _jedai_ joined
[06:02] <TimToady> indeed, syntactically it's just an assignop

[06:02] *** |jedai| left
[06:02] <mtnviewmark> okay, Syn03 has it with the other . ops, down at %methodcall

[06:02] <masak> mtnviewmark: no, that's another .=

[06:02] <TimToady> that means the postfix, not the infix

[06:02] <mtnviewmark> oh - there are two?

[06:03] <masak> :)

[06:03] <TimToady> $x.=foo is parsed as postfix

[06:03] <TimToady> $x .= foo is parsed as (weird) infix

[06:03] <mtnviewmark> 'k - then that one is missing from Syn03

[06:03] <mtnviewmark> (I think)

[06:03] <TimToady> S03 isn't particularly complete

[06:04] <TimToady> esp. the table is not intended to be exhaustive

[06:04] <mtnviewmark> hmmm... well, so much for basing my updated chart on it.... ;-O

[06:04] <mtnviewmark> no, I scoured the text...

[06:04] <mtnviewmark> but now I'm reading STD.pm

[06:04] <TimToady> as mentioned, STD is more recent thinking

[06:04] <TimToady> S03 hasn't caught up in every respect

[06:05] <mtnviewmark> is that true for associativity?  There are many discrepencies there

[06:05] <TimToady> would have to see the individual cases

[06:05] <mtnviewmark> Okay -

[06:05] <mtnviewmark>     %autoincrement isn't :assoc<left>

[06:05] <mtnviewmark>     %symbolic_unary isn't :assoc<left> or :assoc<right> as needed

[06:05] <mtnviewmark>     %concatenation is :assoc<left>, not list as in Syn03

[06:05] <mtnviewmark>     %named_unary isn't :assoc<left>

[06:05] <mtnviewmark>     %tight_and is :assoc<left>, not list as in Syn03

[06:05] <mtnviewmark>         (token infix:sym<^^> is hand set to list)

[06:05] <mtnviewmark>     %conditional is :assoc<right>, not left as in Syn03

[06:05] <mtnviewmark> (heh!)

[06:06] <TimToady> but while STD can parse all of t/, it doesn't necessarily do it right :)

[06:07] <TimToady> well, default is left

[06:07] <mtnviewmark> oh - I couldn't find that - is that just implicit in the code for EXPR?

[06:07] <TimToady> and for some things it doesn't really matter if left or list

[06:07] <TimToady> yes, EXPR

[06:08] <TimToady> assuming I recall it correctly, it's been a while

[06:08] <mtnviewmark> doesn't left or list kind of imply whether it is a chain of calls, or one call with many args (to some conceptual, underlying function?)

[06:09] <TimToady> yes, but where the op would end up with the same semantics, list is just an optimization, like for concatenation

[06:09] <TimToady> but it should probably be list in STD

[06:09] <TimToady> (for that reason)

[06:10] <mtnviewmark> hmmmm... I thought && being :assoc<list> was nice and clear, though I understand how it is the same as :assoc<left>

[06:10] <TimToady> hmm, is conditional really left in S03?  that'd be an oopsie

[06:10] <mtnviewmark> the chart currently has it as Infix, List

[06:10] <mtnviewmark> yes - it is

[06:10] *** dukeleto joined
[06:10] <mtnviewmark> er, infix, List was for && that is

[06:11] <TimToady> understood

[06:11] <mtnviewmark> did \ cease to be an operator?

[06:11] <mtnviewmark> seems so 

[06:11] <TimToady> prefix:<\\> is kind of an operator

[06:12] <mtnviewmark> and <== and friends seem to have become operators (they aren't in Syn03)

[06:12] <TimToady> but it requires an absence of whitespace after it

[06:12] <TimToady> go back and forth about feed ops, but it's easier to treat them as ops, I think

[06:12] <mtnviewmark> okay, but the grammer in STD.pm doesn't seem to parse prefix:<\\> as an operator

[06:13] <TimToady> and anyone who mixes foo ==> bar if $baz is just asking for it anyway

[06:13] <TimToady> hmm

[06:13] <mtnviewmark> at least not at the precedence level of prefix:<|>, prefix:<^> and prefix<=>

[06:13] <TimToady> it's a <capterm> looks like

[06:13] <mtnviewmark> yes - even though I was basing on Syn03, I put them on the chart anyway - they felt far too much like operators

[06:14] <mtnviewmark> but, based on STD.pm today, I'll put them in the main area

[06:14] <TimToady> anyway, STD is close to right

[06:15] <TimToady> *closer

[06:15] <TimToady> I'll try to glare at it all tomorrow and align it

[06:15] <mtnviewmark> good - now I just have to plow my way through the twisty maze of meta-op parsing and dottyop parsing

[06:15] <TimToady> mtnviewmark++

[06:16] <mtnviewmark> I'll produce a list of differences as I found them and post to perl6-language

[06:16] <TimToady> have the appropriate amount of fun :)

[06:16] <TimToady> thanks

[06:16] <mtnviewmark> I'm sure it'll drive me dotty....

[06:16] * TimToady sniggers

[06:17] <TimToady> I don't recall, did you treat metaops like actines/lathinides before?

[06:17] <TimToady> *actinides

[06:18] <TimToady> there's no way to draw a chart with them all nowadays, however

[06:18] <TimToady> the metaops in STD aren't even generating all the ones there ought to be yet

[06:19] <masak> Perl 6 operators have finally passed the barrier of tractability :)

[06:20] <TimToady> @a X>>=:=<<X @b

[06:20] <lambdabot> Maybe you meant: activity activity-full admin all-dicts arr ask . ? @ v

[06:20] <TimToady> maybe I did at that

[06:20] <masak> lambdabot++

[06:20] <masak> lambdabot: you're much nicer than that purl girl.

[06:21] <TimToady> hello masak, you fantastic person you!

[06:21] <masak> haha

[06:23] *** dukeleto left
[06:24] <mtnviewmark> No - i didn't treat them as auxiliary series - those were the no lost file text operators

[06:24] <mtnviewmark> the only meta op back then (2004) was hyper, and it was it's own

[06:25] <mtnviewmark> the new metas have a special place above the table now (and have crowns and royal sashes) 

[06:25] <mtnviewmark> (!)

[06:25] <mtnviewmark> alas, the loss of the file operators meant my great joke of the "Filinis" at precendence 8-1/2 is gone

[06:26] <masak> mtnviewmark: I realize that TimToady didn't get a copy of the new table. maybe one of us should send him one?

[06:27] <masak> he does have some inside knowledge in these matters, after all.

[06:27] *** maerzhase joined
[06:27] <mtnviewmark> well - you could send him the "Almost the Third Edition"... but I'm getting close to "Breath from the Third Edition"

[06:28] <mtnviewmark> and now STD.pm is going to have me do some arranging.

[06:28] <masak> :)

[06:28] <masak> I'll let you decide.

[06:28] <mtnviewmark> I could send it to him too.... though my message might get lost in his inbox

[06:28] <TimToady> I'm pretty busy at work, so take your time

[06:29] * mtnviewmark thought TimToady got to do this for work....

[06:29] <mtnviewmark> :-)

[06:29] <TimToady> some of the time

[06:29] <TimToady> and some of the rest of the time too :)

[06:29] <TimToady> but not all of the time

[06:30] * mtnviewmark wonders about temporal junctives....

[06:34] *** cognominal left
[06:42] *** dukeleto joined
[06:50] *** maerzhase left
[06:51] *** maerzhase joined
[06:52] *** dukeleto left
[06:53] *** cognominal joined
[06:59] *** namenlos joined
[07:03] *** ashizawa joined
[07:10] *** maerzhase left
[07:12] *** mtnviewmark left
[07:18] *** cognominal left
[07:22] *** meppl joined
[07:24] *** [particle]1 joined
[07:29] <moritz_> good morning

[07:30] <masak> guten morgen!

[07:32] * masak wishes he had clones who could do more work for him

[07:32] <Patterner> masak's clones probably wish the same...

[07:33] <masak> I've got November, Druid, u4x, two secret projects that might not amount to anything... and that's just the Perl 6 stuff

[07:33] <masak> then there's Real Life: work and uni.

[07:33] <masak> oh, and S29, and diverse Rakudo improvements.

[07:35] *** ashizawa left
[07:36] *** ashizawa joined
[07:36] *** _jedai_ left
[07:36] *** |jedai| joined
[07:37] *** hercynium_ left
[07:39] <masak> does anyone want to help me figure out why November p6w doesn't build?

[07:39] <pasteling> "masak" at 130.238.45.242 pasted "November p6w build failure" (40 lines, 3.4K) at http://sial.org/pbot/34489

[07:40] <masak> that 'line 3, near ";\n\nUse Con"' makes me suspect that the error is in Tags.pm

[07:41] <masak> but building Tags.pm individually works fine.

[07:42] *** [particle] left
[07:45] *** vixey joined
[07:48] <moritz_> November.pm also uses Config

[07:49] <masak> aye, but not on line 3.

[07:49] <masak> a lot of the modules use Config.

[07:49] <masak> (which should really be named November::Config, by the way)

[07:49] <moritz_> if I precompile Config.pm,, it takes much more time before the same error appears

[07:50] <masak> what might that mean?

[07:50] <masak> moritz_++ # for investigating

[07:50] <moritz_> dunno

[07:51] <masak> if I precompile Config.pm, I get another error when making November.pm

[07:51] <pasteling> "masak" at 130.238.45.242 pasted "another error" (23 lines, 1.8K) at http://sial.org/pbot/34490

[07:52] <moritz_> after 'make Config.pir' I still get the "parse role" error

[07:53] * moritz_ tries  'make -k'

[07:53] <masak> what's '-k', precious?

[07:54] <moritz_> the same as --keep-going

[07:54] <moritz_> ie don't abort on error, but build what you can

[07:54] <masak> cool.

[07:54] <moritz_> makes no difference here

[07:55] <masak> huh -- just made clean, then Config, then November -- now I get a _third_ error!

[07:55] <masak> "Could not find non-existent sub Config"

[07:55] <masak> :(

[07:55] <moritz_> weird

[07:56] <masak> the order clean, Tags, Config, November again produces the Null PMC access.

[07:56] <masak> there's something rotten in the state of Denmark.

[07:57] * Khisanth didn't know there were than many Danish developers

[07:57] <masak> Khisanth: have you read Hamlet?

[07:57] <Khisanth> yes :)

[07:58] <masak> ok.

[07:58] *** iblechbot joined
[07:59] * moritz_ did not, but still knows the qutoe

[07:59] <moritz_> *quote

[07:59] <masak> I've a good mind to submit all of this as a rakudobug, even though I know that it's not the most helpful approach.

[08:00] <masak> November is not meant to be a sieve for all this brokenness, the test suite is.

[08:00] * masak grumbles

[08:00] <moritz_> what we ought to have in the test suite are a few modules that actually *do* something, and that include one another etc.

[08:01] *** hudnix left
[08:01] <masak> yes, of course.

[08:01] <masak> moritz_: and I'm not blaming you specifically for that. it's just something that's not there yet, but ought to be.

[08:02] <moritz_> i know

[08:02] *** mberends joined
[08:02] <moritz_> ideally I'd like to have a small application sitting in the test suite

[08:03] <Matt-W> Morning

[08:03] <masak> Matt-W: \o

[08:03] <Matt-W> Sounds like we need to put some more stuff in the test suite

[08:04] <masak> November has been exceedingly unlucky the past week. after I got it out of its half-month bit rot, the rvar branch merged. after I fixed _that_, jnthn's branch merged. :/

[08:04] <masak> Matt-W: oh yes.

[08:06] *** cognominal joined
[08:06] <masak> if someone with the tuits and enthusiasm wishes to reduce the current November build failures to a minimal case, I'd be very grateful.

[08:06] <masak> I could do it, but I've been going at it for a week now, and I feel like the Red Queen.

[08:07] <masak> actually, forget about the clones. I need volunteers.

[08:10] <masak> volunteers, here's how you volunteer: (1) acquire November. (2) cd november/p6w. (3) make. (4) observe the error. (5) fiddle with things (comment out and remove code, make names shorter and re-order stuff) until the error is isolated. (6) profit!

[08:10] <masak> kthxbai.

[08:11] *** hudnix joined
[08:11] <masak> it's actually fun work, like being Sherlock Holmes for a day. I usually find it mentally rewarding.

[08:11] <moritz_> (7) send bug report

[08:12] <masak> aye, or paste it here. whatever.

[08:12] *** maerzhase joined
[08:12] <mberends> masak: POD HAZ BITROT 2

[08:12] <masak> mberends: OIC.

[08:12] <masak> IT SUX

[08:13] <masak> but that's what being an early adopter means. I'm not surprised or disappointed or anything. in general, this is a fun ride.

[08:13] <mberends> tip: s/perl6 --target=pir/parrot perl6.pbc --target=pir/

[08:14] <masak> mberends: aye, good idea.

[08:14] <masak> ihrd did the inverse subst some time ago. I guess he thought it was a good idea.

[08:15] <masak> reverting that now.

[08:15] *** |jedai| left
[08:15] *** |jedai| joined
[08:15] *** maerzhase1 joined
[08:15] *** jimmy_ joined
[08:16] *** AzureStone left
[08:16] <masak> pushed.

[08:17] <jimmy_> 测试

[08:17] <masak> the error persists.

[08:18] <jimmy_> Test

[08:18] <jimmy_> mibbit++

[08:18] <masak> indeed.

[08:19] <jimmy_> it can tranlate languages.

[08:20] <jimmy_> s/tranlate/translate/

[08:21] <Patterner> 失败

[08:21] <jimmy_> perl6 has been in development, progress a bit slow

[08:22] <masak> jimmy_: fell free to help.

[08:22] <masak> s/fell/feel/

[08:23] <jimmy_> I played out in Chinese characters, was mibbit automatically translated into English to irc

[08:23] <masak> well, that's close, I guess. 'played out' should have been 'typed'.

[08:24] <jimmy_> Yes, automatic translation is not very accurate

[08:24] <masak> we're not quite there yet, no. :)

[08:25] <jimmy_> just I typed : 是的，自动翻译不是很准确 

[08:25] <Matt-W> I like this stage, it's like back at the start of the process on perl6-language when I used to venture obvious opinions

[08:25] <Matt-W> There's a feeling like you can shape where this amazing thing is going

[08:25] <masak> aye.

[08:26] <Matt-W> Except at the moment, seeing part of the language implemented and actually being able to write code in it, I can see that it's a far better language than I imagined it would be back then

[08:26] <masak> I like the distance Rakudo has come already.

[08:27] <masak> pmichaud++ and jnthn++ do impressive things with their bare hands.

[08:27] <jimmy_> seems that mibbit used google Translation 

[08:27] <masak> jimmy_: not that surprising :)

[08:28] <jimmy_> masak: a little

[08:29] <Matt-W> masak: I remain in awe of their work. The whole thing just makes my head spin, which is why I'm so keen to look at documentation. It's something I can comprehend, and yet it's also very helpful to people.

[08:30] <jimmy_> freenode servers will be restarted?

[08:30] <masak> Matt-W: same here. I can do small things on Rakudo, but that's all.

[08:31] *** maerzhase left
[08:35] <Matt-W> masak: I basically understand PIR and I thought I understood how Rakudo was put together, but whenever I look at seeing about fixing something in RT, I can't find the code responsible for it

[08:35] <masak> that happened to me a lot during the summer. it's sort of the head-against-wall phase.

[08:36] <masak> it passes, to a certain degree at least.

[08:36] *** DemoFreak joined
[08:37] <Matt-W> At some point I'm going to have to see if someone can guide me through some of it, that would probably be hugely helpful

[08:37] <masak> Matt-W: sure. we should take and afternoon some day.

[08:37] <masak> s/and/an/

[08:37] <Matt-W> yes

[08:54] *** stephens left
[09:00] *** alester left
[09:00] *** perl6examples left
[09:00] *** jiing left
[09:00] *** Eevee left
[09:00] *** cj left
[09:00] *** szabgab left
[09:00] *** Grrrr left
[09:00] *** frodwith left
[09:00] *** SubStack left
[09:00] *** obra left
[09:00] *** szabgab joined
[09:00] *** Grrrr joined
[09:00] *** jiing joined
[09:01] *** barney joined
[09:02] *** IRSeekBot left
[09:04] *** |jedai| left
[09:05] *** |jedai| joined
[09:05] *** cj joined
[09:09] *** dukeleto joined
[09:09] *** ejs joined
[09:13] *** vixey left
[09:31] *** jferrero joined
[09:35] *** donaldh joined
[09:38] *** donaldh left
[09:39] *** AzureStone joined
[09:45] *** [particle] joined
[09:46] *** |jedai| left
[09:48] *** |jedai| joined
[10:02] *** [particle]1 left
[10:11] *** mberends left
[10:12] <masak> rakudo: say * ~~ Whatever

[10:12] <p6eval> rakudo 35577: OUTPUT«1␤»

[10:13] *** jimmy_ left
[10:19] <Matt-W> Is Whatever a special thing

[10:20] <moritz_> either a special, or a very normal thing, depending on your point of view :-)

[10:31] <masak> whatever...

[10:46] *** |jedai| left
[10:47] *** |jedai| joined
[11:00] *** nek left
[11:01] *** braceta joined
[11:22] *** spx2 left
[11:22] *** spx2 joined
[11:26] <jnthn> hi all

[11:31] <Matt-W> hi

[11:32] * jnthn gets back to parametric roles

[11:44] *** tux300181 left
[11:44] *** tux300181 joined
[12:06] *** [particle]1 joined
[12:15] *** spx2 left
[12:15] *** spx2 joined
[12:23] *** ruoso joined
[12:24] *** [particle] left
[12:25] <jnthn> moritz_: ping

[12:26] <moritz_> jnthn: pong

[12:26] <jnthn> OH HAI

[12:26] <jnthn> I'm looking through parameterized.t

[12:26] <jnthn> It seems to muchly test mixins of parameterized roles, so I may rename it appropriately.

[12:26] <jnthn> However, I spotted this:

[12:27] *** Patterner left
[12:27] <jnthn> lives_ok {$a does InitialAttribVal[42]},

[12:27] <jnthn> and later

[12:27] <ruoso> Hello!

[12:27] <jnthn> ok !$a.HOW.does($a, InitialAttribVal[42]), ".HOW.does gives correct information (1-2)";

[12:27] <jnthn> hi ruoso 

[12:27] <jnthn> Why would this be expected to hand back false?

[12:28] *** |jedai| left
[12:30] *** |jedai| joined
[12:30] *** Psyche^ joined
[12:30] *** Psyche^ is now known as Patterner

[12:31] <moritz_> jnthn: probably the test is wrong

[12:32] <moritz_> jnthn: I just updated it synactically, I haven't reviewed its semantics

[12:32] <moritz_> jnthn: since you understand the topic much better than I, feel free to change the tests as you see fit

[12:32] <jnthn> moritz_: OK, if you've not reason to believe it really should work that way, then I'll happily change it.

[12:33] <jnthn> Just wanted to check you didn't have spec-based reasons for writing it like that. :-)

[12:33] <moritz_> http://www.thealmightyguru.com/Humor/Docs/ShootYourselfInTheFoot.html # old, but still very good

[12:35] <jnthn> haha!

[12:35] <moritz_> I particularly liked the ones about assembly and modula-2

[12:37] <masak> yes, that one's a classic.

[12:39] <masak> what would be a worthy Perl 6 analog of the items in that list?

[12:40] <rakudo_svn> r35586 | jonathan++ | [rakudo] Get parametric roles working with mixins via the does operator.

[12:40] *** namenlos left
[12:40] <moritz_> what's the difference between does and but?

[12:40] <jnthn> but does a copy first

[12:41] *** namenlos joined
[12:41] <jnthn> And then does it to the copy

[12:41] <jnthn> (literally, it is defined in terms of infix:<does>)

[12:41] <ruoso> masak, "when Perl 6 is out you find out that your specie evolved and no longer carry a foot" 

[12:41] * ruoso hides

[12:41] <moritz_> so does modifies in-place?

[12:41] <jnthn> moritz_: aye. which was...painful...to make work. :-)

[12:41] <ruoso> moritz_, the operator does, not the method

[12:41] <masak> ruoso: boo :) no more of that meme.

[12:42] <masak> ruoso: I want something that highlights the beauty of Perl 6, but still points out its weaknesses. being late is not a weakness in this case.

[12:43] <pmichaud> "Perl 6 gives you even more ways to shoot yourself in the foot.  You can even shoot both feet at the same time, as well as any permutation of your feet and others' feet that you wish.  Fortunately, you soon wake up and discover that it's all just a dream, since Perl 6 doesn't exist anyway."

[12:43] <ruoso> masak, readibility problems in Perl 5 is FUD, IMNSHO

[12:43] <masak> ruoso: I agree.

[12:44] <masak> ruoso: that doesn't mean we have to make FUD jokes ourselves.

[12:44] <moritz_> but it's fun, sometimes :-)

[12:44] <masak> moritz_: of course. :)

[12:44] <ruoso> "you might have shot or not your foot,  but you have to wait for the possibilities to collapse"

[12:45] <masak> pmichaud: my colleague always teases me about Perl 6 being 'vapourware', since he knows it makes me steam inside. he liked your description above.

[12:46] <masak> ruoso: I like the direction that one is going.

[12:47] <masak> 'you try to shoot both feet using MMD and junctions, but it turns out that you've misunderstood the syntax, and you car explodes instead'

[12:47] <moritz_> "Perl 6 makes you shoot your (and everbody else's) feet from at least eight angles at the same time, but you discover that two directions aren't implemented yet, and the other six are bullets are too slow to hurt you:

[12:47] <ruoso> you know, every time I see the "Perl is dead" or "Perl 6 is vapor" I think: If perl were dead and perl 6 irrelevant we wouldn't see so much fuz about it... it would simply disappear... 

[12:47] <moritz_> s/:/"/

[12:48] <jnthn> try { shoot_foot and die } or fail

[12:48] <masak> ruoso: I wish it worked like that. people calling a thing dead can help kill that thing.

[12:48] <moritz_> jnthn: NULL PMC access in type()

[12:48] <moritz_> :-)

[12:48] <masak> moritz_: :D

[12:48] <jnthn> # at least make it *compile* guys...we didn't cargo-cault English into Perl 6 for nothing ;-)

[12:49] <jnthn> Well, half of English.

[12:49] <masak> jnthn: sure, but as moritz_ pointed out, it doesn't run.

[12:49] <jnthn> rakudo: try { shoot_foot and die } or fail

[12:49] <p6eval> rakudo 35586: RESULT«{ ... }»

[12:49] <jnthn> It's fine.

[12:49] <masak> oh good.

[12:49] <masak> what's that result?

[12:50] <jnthn> rakudo: try { shoot_foot and die } or epic fail

[12:50] <p6eval> rakudo 35586: RESULT«{ ... }»

[12:50] <masak> !

[12:50] <moritz_> jnthn: fail() should return some kind of undefined value

[12:50] <jnthn> rakudo: try { shoot_foot and die } or omg anything here I will do a lightning talk on this fail

[12:50] <p6eval> rakudo 35586: RESULT«{ ... }»

[12:50] <masak> :)

[12:50] * pmichaud snickers.

[12:50] <jnthn> (or course, we never invoke any of the preceding listops because fail throws a return exception...)

[12:51] <jnthn> It's great for documentation though.

[12:51] <masak> makes for more English-like code.

[12:51] <jnthn> could not be bothered fail()

[12:51] <masak> haha

[12:51] <jnthn> weird fail()

[12:51] <ruoso> masak, but I also have a strong belief that Perl 6 will be as revolutionaire as Perl itself was. So I just keep working and thinking "you'll come back and ask for forgiveness" ;) ;)

[12:51] <masak> rakudo: I can write anything before fail

[12:51] <p6eval> rakudo 35586: OUTPUT«No exception handler and no message␤current instr.: 'return' pc 15582 (src/builtins/control.pir:39)␤»

[12:51] <pmichaud> rakudo:  try { shoot_foot and die }

[12:51] <p6eval> rakudo 35586: RESULT«Null PMC access in find_method()␤current instr.: '_block14' pc 74 (EVAL_16:43)␤»

[12:51] * masak submits rakudobug

[12:52] <moritz_> ok, it's find_method, not type that Null's out

[12:52] <moritz_> :-)

[12:52] <moritz_> that sure looks like progress

[12:52] <masak> ruoso: trolls don't ask forgiveness. but helping release a great product can be rewarding, yes.

[12:52] <ruoso> masak, not everyone that buys FUD is a troll

[12:53] <ruoso> most of them are inocent bystanders

[12:53] <masak> ruoso: point.

[12:53] <masak> I sure has taught me not to make judgments laregly based on rumours.

[12:53] <masak> s/I/it/

[12:57] *** riffraff joined
[12:59] <masak> Concurrent Euclid: You shoot yourself in somebody else's foot.

[12:59] <masak> I've always liked that one.

[13:04] *** ashizawa left
[13:23] <pmichaud> rakudo: my $x = :a<5>; say $x.map({ ; .key => .value + 1}).perl;

[13:23] <p6eval> rakudo 35589: OUTPUT«["a" => 6]␤»

[13:23] <pmichaud> rakudo: my $x = :a<5>; say $x.map({ .key => .value + 1; }).perl;

[13:23] <p6eval> rakudo 35589: OUTPUT«Method 'key' not found for invocant of class 'Failure'␤current instr.: '_block14' pc 101 (EVAL_16:49)␤»

[13:25] <masak> pmichaud: should the former one work, or are my expectations wrong?

[13:25] <moritz_> pmichaud: that's because it's parsed as hash, I think

[13:25] <masak> s/former/latter/

[13:25] <moritz_> pmichaud: and it could very well be what the spec says, but I'm not sure

[13:25] * masak either

[13:25] <pmichaud> I'm not clear on the spec here either.

[13:25] <pmichaud> Rakudo sees the "block" as a hash composer, because it consists of a single Pair.

[13:26] <pmichaud> so it executes it "immediately", per the spec.

[13:26] <moritz_> so it's "works as designed"?

[13:26] <pmichaud> depending on how one interprets "designed", yes :-)

[13:27] <Matt-W> Hmm I like the one about CSS: "You shoot your right foot with one hand, then switch hands to shoot your left foot but you realize that the gun has turned into a banana."

[13:27] <Matt-W> even though CSS is not a programming language

[13:27] <moritz_> there's a lot of truth in that page

[13:27] <pmichaud> anyway, I think we'll need some spec clarification before Rakudo can do anything about that one.

[13:28] <Matt-W> I wonder if Haskell would be "You give your foot to the gun, which returns you a different foot with a bullet hole in it"

[13:29] <moritz_> probably :-)

[13:30] <moritz_> ... but only after studying typ^Wballistic theory for two years

[13:30] <Matt-W> Although I'm sure there's potential to bring Monads into it, there's always potential for Monads in a Haskell joke

[13:30] <Matt-W> Or maybe arrows or applicative functors

[13:30] <masak> Matt-W: 'you read a tutorial about the Gun monad, try to shoot yourself in the foot for a few hours, and after a few hours emerge with a beautiful two line program for shooting yourself in the foot ... that the compiler won't accept.'

[13:30] <moritz_> Matt-W: especially about writing a Monads tutorial

[13:31] <Matt-W> I got my head around Monads pretty easily actually

[13:31] <jnthn> "Then somebody gives you a kick in the monads"

[13:31] <Matt-W> The problem was, then I tried to deal with arrows

[13:31] <masak> Matt-W: :)

[13:31] <Matt-W> and when I finally figured out what they were (or so I thought), they started throwing applicative functors at me

[13:31] <moritz_> Matt-W: I thought I understood Monads at one point conceptually, but I still lost the war against the type checker

[13:31] <masak> there's always one more level.

[13:32] <Matt-W> I used state monads extensively in my compiler project

[13:34] <Matt-W> the trick I found was understanding what the monad syntax is sugar for, and then what the real syntax means, and then it all fell into place

[13:35] <masak> yes, something similar for me with monads. and with git.

[13:39] <jnthn> OK, slovak class

[13:39] * jnthn is still fighting a weird bug

[13:39] <jnthn> with parametric roles and mixins

[13:40] <jnthn> back later

[13:41] * Matt-W envisages jnthn jumping up in the middle of his class and shouting "I've got it! That's the problem!" and running for a computer to fix the bug

[13:49] <masak> except he shouts it in slovak.

[13:53] <Matt-W> Well of course, but I don't speak any Slovak so I can't provide an accurate quote

[13:55] *** _jedai_ joined
[13:56] *** estrabd joined
[13:58] *** |jedai| left
[14:00] *** riffraff left
[14:07] *** unobe left
[14:07] *** ejs left
[14:15] *** iblechbot left
[14:15] *** iblechbot joined
[14:17] <pmichaud> eval("I've got it!  That's the problem!", :lang<slovak>)

[14:21] <masak> :)

[14:23] <Matt-W> umm

[14:23] *** maerzhase1 left
[14:23] <Matt-W> wouldn't that try and interpret it as written in Slovak?

[14:23] <pmichaud> Sure, thus solving the problem.  :-)

[14:24] <Matt-W> or causing a parse error

[14:24] <pmichaud> what Rakudo will really want is:   eval("...", :target<lolcode>)   which runs the "..." source through the compiler to produce LOLCODE output :-)

[14:25] <Matt-W> heh

[14:25] <Matt-W> why would you want to produce LOLCODE? :P

[14:25] <pmichaud> CHEEZBURGERS

[14:26] <Matt-W> Although I think I actually understand the LOLCODE compiler in the Parrot repository, so it does have a purpose :)

[14:26] *** maerzhase joined
[14:26] <pmichaud> understanding being one of its purposes :-)

[14:26] <pmichaud> er, "promoting understanding" being one of its purposes.

[14:27] *** [particle] joined
[14:30] <Matt-W> yes, and it's serving it quite well really

[14:30] <Matt-W> maybe I should redo my dissertation compiler using PCT

[14:30] <Matt-W> Would be really easy I think

[14:40] <rakudo_svn> r35592 | pmichaud++ | [rakudo]: spectest-progress.csv update: 284 files, 6254 passing, 0 failing

[14:41] <Matt-W> hurrah!

[14:41] *** iblechbot left
[14:42] *** [particle]1 left
[14:57] *** maerzhase1 joined
[14:57] *** namenlos left
[15:02] *** jferrero left
[15:11] *** maerzhase left
[15:21] *** _jedai_ left
[15:21] *** |jedai| joined
[15:31] *** iblechbot joined
[15:37] *** mberends joined
[15:38] *** Lorn joined
[15:40] *** maerzhase joined
[15:42] * jnthn is back

[15:43] <jnthn> Sadly, I didn't have any flashes of insight about the bug during Slovak class. :-(

[15:43] <jnthn> Hmmm...a Perl 6 grammar to parse Slovak. :-)

[15:43] *** bsdperl_ joined
[15:47] *** maerzhase1 left
[15:48] *** hudnix left
[15:49] *** dalek left
[15:50] *** dalek joined
[15:50] *** bsdperl left
[15:52] <pmichaud> std:  my $t = 5; $t\i

[15:52] <p6eval> std 24912: OUTPUT«############# PARSE FAILED #############␤Syntax error at /tmp/7zlQrv1NB3 line 1:␤------> my $t = 5; $t\i␤    expecting any of:␤        POST␤   infix or meta-infix␤        infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       standard stopper␤

[15:52] <p6eval> ..statement modifier loop␤  terminator␤     wh...

[15:56] *** alester joined
[15:56] *** schmalbe joined
[15:57] <masak> hm, did I remember to report that to the ticket about postfix:<i>? don't remember.

[15:57] *** barney left
[15:57] <pmichaud> you reported that it didn't parse in Rakudo.

[15:58] <pmichaud> I'm replying now to report that it doesn't parse in STD.pm either (duplicate of RT #60148, for that part)

[15:58] <pmichaud> (replied.)

[16:00] *** |jedai| left
[16:00] *** |jedai| joined
[16:00] <masak> ok. good.

[16:05] *** spx2 left
[16:10] *** spx2 joined
[16:12] *** vixey joined
[16:13] * jnthn does a spectest run, hoping his changes don't cause epic fail

[16:13] *** mberends left
[16:17] *** justatheory joined
[16:17] *** stephens joined
[16:18] *** cognominal left
[16:18] *** cognominal joined
[16:20] <rakudo_svn> r35593 | infinoid++ | [codingstd] Fix a trailing_space.t failure in rakudo.

[16:21] <masak> ok, I found the parsing error in November from this morning.

[16:22] <masak> November builds now.

[16:23] <masak> \o/

[16:24] *** schmalbe left
[16:28] <moritz_> what was the problem?

[16:34] <masak> a line 'role Session;' that wasn't the first line.

[16:34] <masak> the error message wasn't very helpful.

[16:40] <masak> 'make test' still gives errors, but it does it faster now that building works. :)

[16:40] <masak> moritz_: maybe I will follow your idea now and make the test target depend on all

[16:41] <masak> I also have an idea of how to temporarily fix the test failures.

[16:46] <TimToady> do you ever try parsing November with STD?  It might find certain errors quicker, and future proof you against rakudo convergence with STD

[16:46] <TimToady> it might have found the role problem, for instance

[16:46] <masak> TimToady: it's an interesting suggestion.

[16:46] <masak> I don't currently have Perl 5.10.

[16:47] <masak> but if I get it, I will try.

[16:47] <TimToady> it's also quite likely to find places where rakudo is giving you more slack than STD allows :)

[16:47] <masak> TimToady: can STD hand me an AST with interesting info too? I want to graph the growth of November :)

[16:48] <masak> TimToady: yes, that might be good to know, too.

[16:48] <TimToady> well, viv can give you a rudimentary AST

[16:48] *** [particle]1 joined
[16:48] <masak> TimToady: that might be enough. will try that.

[16:48] <masak> slightly OT: what's the easiest way to install 5.10 on Mac OS X nowadays?

[16:49] * masak tries from source

[16:49] <pasteling> "moritz_" at 132.187.31.74 pasted "November + STD.pm - nearly happy marriage" (38 lines, 1.5K) at http://sial.org/pbot/34494

[16:49] *** |jedai| left
[16:50] *** |jedai| joined
[16:51] <masak> moritz_++

[16:51] <masak> will look at the things it found.

[16:51] <moritz_> masak: it parses /^ \w+ $/ as variable $/

[16:51] <masak> moritz_: yes, I had that problem in Druid for a while too. but that was in an interpolated eval string :)

[16:52] *** [particle] left
[16:52] <TimToady> hh

[16:52] <TimToady> huh

[16:53] <TimToady> I guess that's the right answer from the viewpoint of LTM, but...

[16:53] <masak> TimToady: I can change it, but it'll be a common pitfall :)

[16:54] <moritz_> at least it's green up to the $, and read starting from /]

[16:54] <TimToady> does the problem go away with a space between $ and /?

[16:54] * moritz_ tries

[16:55] <masak> I would guess so.

[16:55] <TimToady> strange, bare /^ \w+ $/ doesn't fail

[16:55] *** ruoso left
[16:55] <moritz_> uhm, it also fails with ws

[16:55] <TimToady> then it's not the $/ var

[16:56] <moritz_> right

[16:56] <TimToady> runaway / from earlier, maybe?

[16:56] <moritz_> but I wonder where it found the suffix regex modifier

[16:56] <TimToady> but then why that error

[16:56] <TimToady> right

[16:56] <moritz_> no /\w in sight

[16:57] <TimToady> where can I find a copy of the file?

[16:59] *** maerzhase left
[16:59] <TimToady> I see a bug in STD, I think.  is there any /] anywhere?

[16:59] <masak> TimToady: http://github.com/viklund/november

[16:59] <moritz_> http://moritz.faui2k3.org/tmp/November.pm

[16:59] <moritz_> TimToady: aye

[17:00] <moritz_> it's [$string, /regex/]

[17:00] <rakudo_svn> r35594 | jkeenan++ | Applying patch submitted by jimmy in TT#175.  POD corrections in two files.

[17:00] <moritz_> std: [rx/a/]

[17:00] <p6eval> std 24912: OUTPUT«can't create lex/STD/termish.store: Permission denied at Cursor.pm line 532␤00:07 101m␤»

[17:02] <TimToady> patching

[17:04] <masak> November++ # constantly finding new uses

[17:05] <pugs_svn> r24913 | lwall++ | [STD] spurious ] removed from obsolete modifier test

[17:05] <TimToady> okay, Novermber.pm now parses in STD

[17:05] <masak> thank you.

[17:05] <TimToady> obviously a fossil from translating <[abc]> to < a b c >

[17:06] <masak> what about the warnings about unknown routines in the nopaste?

[17:06] <masak> something to be concerned about?

[17:07] *** maerzhase joined
[17:07] <TimToady> not really, if they come from use calls

[17:07] <TimToady> STD doesn't do "use" yet

[17:07] <masak> TimToady: but 'if' and 'else'?

[17:08] <TimToady> those you need to worry about

[17:08] <masak> ok, pasting that code too, hold on

[17:08] <TimToady> means you have if() somewhere

[17:08] <pasteling> "masak" at 130.238.45.242 pasted "the code with if and else warnings" (102 lines, 3.3K) at http://sial.org/pbot/34495

[17:09] <masak> TimToady: I don't think I do.

[17:09] <moritz_> ack 'if\(' p6w/

[17:09] <moritz_> no result

[17:09] <masak> lines 80 and 83 which the warnings indicate contain closing braces

[17:10] <masak> (uh oh, gotta go soon)

[17:10] <moritz_> maybe it's an if that's used as an expression?

[17:10] <alester> moritz: Or    ack -Q 'if(' p6w/

[17:10] <masak> I don't see that either.

[17:10] <moritz_> std: 1 + if 1 { 2 }

[17:10] * alester tires of quoting regexes

[17:10] <p6eval> std 24913: OUTPUT«############# PARSE FAILED #############␤Syntax error at /tmp/O7UD6a1QSy line 1:␤------> 1 + if 1 { 2 }␤    expecting any of:␤ infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤00:05 85m␤»

[17:11] <moritz_> alester: thanks, I didn't know that

[17:11] <alester> -Q = \Q, basically

[17:11] <masak> alester: thanks from me too :)

[17:13] <TimToady> probably a backtracking problem out of statement_control:if

[17:13] <masak> ok. nothing to worry about, then.

[17:14] <masak> see y'all around.

[17:14] *** masak left
[17:15] <PerlJam> alester++

[17:15] <alester> :-)

[17:16] <alester> you guys oughta run ack --man some time just for fun.

[17:17] <PerlJam> yeah.  I already know enough features to cover 95% of what I use it for, so there is little incentive to read the docs  :-)

[17:17] <moritz_> alester: or just continue reading #perl6. I learned amazing things here... :-)

[17:18] <alester> and yet, isn't htat -Q handy?

[17:18] <moritz_> it is indeed

[17:18] <PerlJam> yep

[17:19] <PerlJam> -w is handy too

[17:19] <TimToady> it's parsing Text__Markup__Wiki__Minimal__Syntax::TOP as a listop

[17:20] <TimToady> and eating the block as an argument

[17:20] *** aindilis joined
[17:24] *** Exodist joined
[17:28] <szabgab> I am trying to catch up with the basics again, but I could not find how to read from STDIN

[17:28] <szabgab> I tried    my $input = $*IN.readline;

[17:28] <szabgab> but it segfaulted on Rakudo

[17:29] *** REPLeffect left
[17:30] <rakudo_svn> r35597 | jonathan++ | [rakudo] Various (some rather subtle) changes to infix:<does> and infix:<but>, to bring them up to date, fix various bugs and ensure they work in the parametric case too.

[17:39] *** meppl left
[17:39] *** meppl joined
[17:41] <pugs_svn> r24914 | jnthn++ | [t/spec] Update perameterized roles test that checks mixins to match how I read S12, and fudge it for Rakudo.

[17:42] <pugs_svn> r24915 | jnthn++ | [t/spec] Rename test.

[17:43] <pugs_svn> r24916 | jnthn++ | [t/spec] What on *earth* was I thinking? Correct the last patch...

[17:46] <jnthn> Enough code! To the pub!!

[17:46] * jnthn afk

[17:46] <pmichaud> ("role Session;" error message) -- Rakudo just gives the same error message that STD.pm does for that one, I think.

[17:47] <pmichaud> std:   say 'hello';  role Session;

[17:47] <p6eval> std 24916: OUTPUT«00:05 83m␤»

[17:47] <pmichaud> okay, I'm wrong.

[17:47] <pmichaud> Rakudo just gives the same error message that STD.pm claims to give if reading the STD.pm code.

[17:47] <pmichaud> Either that or I'm misinterpreting what should happen there.

[17:48] <pmichaud> rakudo:  say 'hello';  role Session;

[17:48] <p6eval> rakudo 35597: OUTPUT«Unable to parse role definition at line 1, near ";"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[17:49] <pmichaud> afk for a while # errands

[17:49] *** hercynium joined
[17:50] <rakudo_svn> r35598 | jonathan++ | [rakudo] Add parameterized-mixin.t, which is currently heavily fudged (that should change tomorrow) but tests todays additions.

[17:59] *** bsdperl_ left
[17:59] *** bsdperl joined
[18:06] <szabgab> rakudo: "42".bytes

[18:06] <p6eval> rakudo 35597: OUTPUT«Method 'bytes' not found for invocant of class 'Str'␤current instr.: '_block14' pc 63 (EVAL_13:40)␤»

[18:06] <szabgab> rakudo: "42".chars

[18:06] <p6eval> rakudo 35597: RESULT«2»

[18:18] *** justatheory left
[18:18] *** stephens is now known as stephenlb

[18:27] *** jhorwitz joined
[18:28] *** braceta left
[18:36] *** pbuetow joined
[18:41] *** |jedai| left
[18:42] *** |jedai| joined
[18:50] *** Psyche^ joined
[18:55] *** riffraff joined
[19:02] *** [particle] joined
[19:03] *** lambdabot left
[19:06] *** lambdabot joined
[19:06] *** Patterner left
[19:06] *** Psyche^ is now known as Patterner

[19:08] *** [particle]2 joined
[19:16] *** justatheory joined
[19:18] *** riffraff left
[19:24] *** [particle]1 left
[19:30] *** |jedai| left
[19:31] *** |jedai| joined
[19:55] *** |jedai| left
[19:56] *** |jedai| joined
[20:02] *** [particle]1 joined
[20:04] *** ejs joined
[20:09] *** pmurias joined
[20:09] *** pmurias left
[20:09] *** mberends joined
[20:15] *** _jedai_ joined
[20:17] *** |jedai| left
[20:19] <diakopter> rakudo: Grammar;

[20:19] <p6eval> rakudo 35600: RESULT«Grammar»

[20:20] <diakopter> rakudo: Grammar NQP;

[20:20] <p6eval> rakudo 35600: OUTPUT«Statement not terminated properly at line 1, near "NQP;"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[20:20] *** [particle] left
[20:26] <pmichaud> std:  Grammar NQP;

[20:26] <p6eval> std 24916: OUTPUT«############# PARSE FAILED #############␤Syntax error at /tmp/4bigtXB4cx line 1:␤------> Grammar NQP;␤    expecting any of:␤   infix or meta-infix␤      infix stopper␤    standard stopper␤ statement modifier loop␤  terminator␤00:05 85m␤»

[20:32] *** pmurias joined
[20:34] *** _jedai_ left
[20:35] *** |jedai| joined
[20:35] *** c9s left
[20:35] *** c9s joined
[20:37] *** ejs1 joined
[20:47] *** ejs left
[20:52] *** ejs1 left
[20:53] *** meteorjay left
[20:54] <diakopter> std: Grammar;

[20:55] <p6eval> std 24916: OUTPUT«00:05 82m␤»

[20:55] <[particle]1> std: grammar NQP;

[20:55] <p6eval> std 24916: OUTPUT«00:05 82m␤»

[20:55] <diakopter> -_-

[20:55] <diakopter> o_o

[20:56] <diakopter> pmurias: ping

[21:01] *** riffraff joined
[21:01] *** justatheory left
[21:01] *** |jedai| left
[21:01] *** pmurias left
[21:01] *** |jedai| joined
[21:11] *** Su-Shee joined
[21:11] <Su-Shee> hi

[21:20] <pugs_svn> r24917 | duff++ | test

[21:21] <meppl> good night

[21:22] <pugs_svn> r24918 | duff++ | untest

[21:27] *** meppl left
[21:28] *** [particle] joined
[21:34] <pugs_svn> r24919 | duff++ | retest

[21:35] <pugs_svn> r24920 | duff++ | unretest

[21:36] *** Su-Shee left
[21:46] *** [particle]2 left
[21:50] *** |jedai| left
[21:51] *** |jedai| joined
[21:51] *** Lorn left
[22:01] *** wknight8111 joined
[22:01] *** [particle]1 left
[22:01] *** bsdperl left
[22:02] *** bsdperl joined
[22:11] *** _jedai_ joined
[22:13] *** |jedai| left
[22:21] *** pmurias joined
[22:22] <pmurias> diakopter: pong

[22:26] *** TimToady joined
[22:28] <moritz_> rakudo: say "(a)" ~~ m/'(' ~ ')' a*/ 

[22:28] <lambdabot> moritz_: You have 1 new message. '/msg lambdabot @messages' to read it.

[22:28] <p6eval> rakudo 35601: OUTPUT«(a)␤»

[22:29] <moritz_> @clear

[22:29] <lambdabot> Messages cleared.

[22:29] <moritz_> rakudo: say "(a)" ~~ m/:dba("paren expression") '(' ~ ')' a*/ 

[22:29] <p6eval> rakudo 35601: OUTPUT«(a)␤»

[22:29] <moritz_> rakudo: say "(a]" ~~ m/:dba("paren expression") '(' ~ ')' a*/ 

[22:29] <p6eval> rakudo 35601: OUTPUT«Unable to parse "paren expression", couldn't find final ')'␤current instr.: 'parrot;PGE;Match;FAILGOAL' pc 2927 (compilers/pge/PGE/Regex.pir:456)␤»

[22:29] *** moritz_ sets mode: +o TimToady

[22:30] <TimToady> thanks

[22:31] <moritz_> that's quite nice ;-)

[22:31] <moritz_> (the :dba stuff)

[22:31] <TimToady> std: say "(a]" ~~ m/:dba("paren expression") '(' ~ ')' a*/ 

[22:31] <p6eval> std 24920: OUTPUT«00:07 88m␤»

[22:32] <moritz_> rakudo: sub { 1;

[22:32] <p6eval> rakudo 35603: OUTPUT«Unable to parse block; couldn't find final '}' at line 1, near ""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[22:32] <moritz_> rakudo: m{

[22:32] <p6eval> rakudo 35603: OUTPUT«Statement not terminated properly at line 1, near "{"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[22:32] <TimToady> I think rakudo could afford to lose the extra quotes in the message

[22:33] <TimToady> makes it sound like it's not a real paren expression...

[22:33] <moritz_> just like <block> isn't delimited differently

[22:35] <moritz_> rakudo: :($a); say 1;

[22:35] <p6eval> rakudo 35603: OUTPUT«too few arguments passed (0) - 1 params expected␤current instr.: '_block14' pc 40 (EVAL_15:28)␤»

[22:35] <moritz_> rakudo: :($); say 1;

[22:35] <p6eval> rakudo 35603: OUTPUT«Syntax error at line 1, near ":($); say "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[22:36] *** _jedai_ left
[22:37] *** |jedai| joined
[22:40] *** justatheory joined
[22:41] <pmichaud> the quotes in the message are actually an artifact of something else going on from the Parrot side.

[22:41] <pmichaud> we can get rid of them at some point, but it was actually more work to get rid of them than leave them there :-|

[22:41] <pmichaud> TimToady: did you see my earlier std parse for   $t\i ?

[22:42] <pmichaud> std:  my $t = 5;  say $t\i;

[22:42] <p6eval> std 24920: OUTPUT«############# PARSE FAILED #############␤Syntax error at /tmp/uYRiu08SdJ line 1:␤------> my $t = 5;  say $t\i;␤    expecting any of:␤  POST␤   infix or meta-infix␤        infix stopper␤    postfix␤        postfix_prefix_meta_operator␤       standard stopper␤

[22:42] <p6eval> ..statement modifier loop␤  terminat...

[22:42] <moritz_> pmichaud: I'm currently plugging in some more :dba markers into rakudo's grammar - any objections?

[22:42] <pmichaud> moritz_: only put them where we're currently using ~

[22:42] <pmichaud> STD has more, yes, but PGE/rakudo doesn't have a way to make use of those yet.

[22:43] *** maerzhase left
[22:43] <moritz_> pmichaud: ok

[22:43] *** Limbic_Region joined
[22:46] *** On joined
[22:48] <On> haaaaptchi...

[22:49] <On> Is Perl dead and Phyton reborn?

[22:49] * On does not think so... just hypothetical question :)

[22:49] <moritz_> On: just reverse your nick name, and you have your answer

[22:51] <On> :)

[22:51] <On> Is Larry saying something sometimes here?

[22:52] <moritz_> yes

[22:52] <On> Would like to hear what he thinks of this: http://www.web-app.net/?Is_Perl_dead_and_Phyton_reborn_/&action=viewnews&id=60

[22:52] * On is a Perl fighter, a true partizan.

[22:53] <moritz_> On: if you want an informed and well-researched article about perl's state, read (and recommend) http://www.heise-online.co.uk/open/Healthcheck-Perl-The-Perl-Future--/features/112388/0 instead

[22:53] <On> Perl made me getting a job, a wife and kids... so if it dies, I die too!

[22:54] <On> Thanks

[22:55] <PerlJam> On: Perl isn't likely to die any time soon.

[22:55] <PerlJam> (and I fully expect there to be perl-fud 10 years from now just like there is today)

[22:56] <PerlJam> perl is dying!  (along with physics, literature, and bunches of other maturing disciplines)

[22:56] <moritz_> the mere fact that people are proclaiming its death mean that it's not - if it were, nobody would be talking about it

[22:56] *** namenlos joined
[22:57] <On> I get this strange feeling that PHP activists been fighting Perl for years now, you can even find them on perlmonks, its tragic.

[22:58] <moritz_> it's annoying, yes. But tragic? dunno

[22:58] <On> PHP namespaces.... never understood what they were thinking of, certainly not of a language for large applications.

[22:59] *** riffraff left
[23:01] *** Southen joined
[23:05] <TimToady> I just figure it's people who are trying to motivate us :)

[23:06] <moritz_> I personally prefer positive motivation ;-)

[23:07] <vixey> On, oh PHP is great for large applications you just need to use include($_GET['page']) and stuff :p

[23:10] *** wolverian left
[23:13] *** wolverian joined
[23:13] *** wolverian left
[23:13] *** wolverian joined
[23:16] <wolverian> hrm, feather's irssi is giving me glib warnings

[23:18] *** Southen_ left
[23:18] <TimToady> my warnings are always glib

[23:20] <wolverian> are they critical too?

[23:20] <Limbic_Region> TimToady - surgery?

[23:21] *** |jedai| left
[23:21] * jnthn is back from the pub

[23:21] *** |jedai| joined
[23:21] <moritz_> wolverian: I'll do an upgrade on feather, dunno if that might help

[23:21] *** [particle]1 joined
[23:22] <wolverian> I was thinking that perhaps someone is doing an upgrade right now.

[23:23] <moritz_> I didn't when you reported the warnings

[23:23] <wolverian> weird.

[23:24] <wolverian> the errors are all related to the config file

[23:24] <wolverian> perhaps it got corrupted somehow.

[23:32] *** |jedai| left
[23:33] *** |jedai| joined
[23:34] <diakopter> TimToady: lol @ glib pun

[23:37] *** gravity joined
[23:38] *** namenlos left
[23:38] *** vixey left
[23:42] *** [particle]2 joined
[23:43] *** [particle]3 joined
[23:45] *** ruoso joined
