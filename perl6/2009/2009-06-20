[00:10] *** Muixirt left
[00:11] *** DanielC left
[00:20] *** kst left
[00:20] <pugs_svn> r27152 | lwall++ | [t/spec] patching difficulties spotted by STD

[00:21] *** kst joined
[00:27] <pugs_svn> r27153 | lwall++ | [STD] parse 'need'

[00:27] <pugs_svn> r27153 | lwall++ | [Cursor] botched earlier canonicalization of $:, didn't check for $::

[00:30] <pugs_svn> r27154 | lwall++ | [t/std.t] overzealous use of 'need'; Test needs to import

[00:31] *** damianc joined
[00:32] *** damianc left
[00:42] *** nErVe joined
[00:42] <nErVe> hello every one..

[00:43] <nErVe> i was wndering what regular expression would define values like these

[00:43] <nErVe> :0.210867130540167

[00:43] <nErVe> i have them in a file and i dont need them as such

[00:43] <nErVe> so want ot delete them

[00:43] <skids> perl5?

[00:43] <nErVe> yes

[00:43] <nErVe> OHH..

[00:44] <nErVe> i m sorry

[00:44] <skids> \:\d+\.\d+ but yeah try #perl

[00:44] <nErVe> i forgot this was perl 6

[00:49] <nErVe> hey skids thanks for the help

[00:49] <skids> np

[00:49] <nErVe> would the regex you gave delete the value

[00:49] <skids> s/ \:\d+\.\d+//g would, assuming you want the colon gone too.

[00:50] <skids> erm, extra space in there.

[00:50] <nErVe> i was suggested  =~ /:\d+\.\d+/

[00:50] <nErVe> byt ~perl

[00:50] <nErVe> #perl i mean

[00:50] <skids> Maybe, perl6 escapes all literal metas so I've been getting into that habit.

[00:51] <nErVe> so the exact regex to delete the values would be..??

[00:51] <nErVe> s/ \:\d+\.\d+//g as you said ..??

[00:52] <nErVe> right..I m sorry I am newbie at regex

[00:52] <skids>  s/:\d+\.\d+//g (minus the accidental space and the exra \)

[00:58] *** M_o_C joined
[01:01] <buu> nErVe: Please note that the s/// operator has nothing to do with the actual regex

[01:07] *** dukeleto joined
[01:09] *** sri_kraih left
[01:10] *** sri_kraih joined
[01:11] *** tann left
[01:14] *** Sunbeam joined
[01:15] <nErVe> i was reading more about regex

[01:15] <nErVe> from what i understand in could stand for substitution

[01:15] <nErVe> is that right buu

[01:15] *** icwiener_ left
[01:18] *** DemoFreak left
[01:22] *** Whiteknight left
[01:22] <nErVe> just a last bit

[01:23] <nErVe> if i was to delete/substitute numbers the regex would be ?

[01:24] <last> nErVe: If you just want to delete the numbers (without determining what they are) the s///g skids wrote should do the trick, I believe.

[01:24] <nErVe> well this time is different i want o delete Node21 and values like them

[01:25] <nErVe> last ..any suggestions.?

[01:26] <last> nErVe: not sure what you mean by Node21?

[01:27] <nErVe> well i want to delete "NODE21" similarly "NODE22"

[01:27] <buu> NODE\d+

[01:27] <buu> Maybe.

[01:28] <last> nErVe, NODE\d+ would be NODE followed by one or more digits.  Does that sound right?

[01:28] <last> deleting it would be s/NODE\d+//g

[01:30] <nErVe> its does not delete..

[01:32] <nErVe> http://scsys.co.uk:8002/30044

[01:34] <nErVe> last you there buddy..?

[01:35] <last> sorry, was working in another window

[01:36] <nErVe> ne ways i was wonderin if you could find out the error in my script

[01:37] <last> actually, your script works great for me.

[01:38] <last> the NODE digits are deleted.

[01:38] <last> well, NODE and the digits.

[01:38] <last> Is that not happening for you?

[01:38] <last> (I'll be a minute, I've got to calm a baby here.)

[01:38] <nErVe> welli want ot delte the node21 both

[01:39] <nErVe> i mean the digit and the word node

[01:39] <nErVe> also it doesnt not delete either

[01:40] <nErVe> ne clue wat i cld be doing wrong

[01:46] <last> is it lower case or upper case?

[01:47] <last> the way you've got it will only delete all upper case "NODE"

[01:48] *** athomason left
[01:48] <nErVe> oh so i have to make the smaller case in the regex ..??

[01:49] <last> it is case sensitive, so it will match the case you use in the regex.

[01:49] *** sri_kraih left
[01:50] *** sri_kraih joined
[01:50] <last> if you want it to be case insensitive, you need to add the letter i after the g, so it's     $line =~ s/NODE\d+//gi;

[01:51] <nErVe> hey thanks a lot that is a new trick I learnt

[01:51] <nErVe> man life as a life science student is horrible..

[01:51] <nErVe> hehe..

[01:51] <nErVe> but its nice to have people like yourself around

[01:52] <last> glad I could help.

[01:52] *** wolverian left
[01:52] <nErVe> btw just one more thing if you would not mind...how would i open edit and save the same file again

[01:52] <nErVe> i mean i have open the file

[01:52] <nErVe> now i ve deleted the things i dont want 

[01:52] <nErVe> now i want to save it

[01:53] *** mkfort joined
[01:53] <last> I usually move the existing file to a backup, then copy it with the changes to a new file with the original file name.

[01:54] <last> give me a sec...

[01:55] <nErVe> well thats not needed in my case because currently im working on fake data sets the actual file will be much larger

[01:57] <last> http://gist.github.com/132998 is the way I do it.

[01:57] <last> (I'm sure there are better ways to write that code, that's just the script I've had sitting around for the last ten years.)

[01:58] <last> Doing it in place is more complicated, I'd suggest going with the backup unless you don't have the disc space for it.

[01:59] *** molaf_xx joined
[01:59] <nErVe> could you please explain the code..

[02:01] <last> huh, something went wrong with the gist?  one sec.

[02:04] <last> Try it again, first try had an embedded ASCII 0 character that messed up github.

[02:06] <nErVe> http://scsys.co.uk:8002/30045 do you think this will work..??

[02:06] <last> You need to move the second open statement up out of the loop.

[02:07] <last> everything else looks right.

[02:07] <skids> For Perl5 there are commandline options for that.

[02:07] <last> does require loading the entire file into memory to work, but as long as you've got enough memory to do that...

[02:08] <nErVe> well i have a 3 gb ram 

[02:08] <nErVe> but i will running it on power mac at the uni

[02:08] <nErVe> its has 8gb..

[02:08] <nErVe> the max i ve ever seen..

[02:09] <nErVe> i got syntax error at 8 and 16

[02:09] <skids> e.g. perl -pne -i.bak 's/:\d+\.\d+//g'

[02:10] <nErVe> with the open statement you told me to move

[02:10] <last> open(TFILE,">$treeFile"); # needs quotes and semicolon

[02:10] <nErVe> i have given them

[02:11] <last> skids: I always forgot about the command line options.  That's beautiful.

[02:12] <nErVe> ohh i forgot to save the file..

[02:12] <nErVe> i ran it now it gives me..Use of uninitialized value $_ in print at ./notung_file_parser.pl line 15.

[02:13] <last>     print TFILE $line;

[02:14] <last> because you are using $line as the variable in the loop instead of $_

[02:15] *** M_o_C left
[02:15] *** molaf_x left
[02:18] <nErVe> Scalar found where operator expected at ./notung_file_parser.pl line 17, near "TFILE $line"

[02:18] <nErVe> 	(Do you need to predeclare TFILE?)

[02:18] <nErVe> syntax error at ./notung_file_parser.pl line 17, near "TFILE $line"

[02:18] <nErVe> Global symbol "$line" requires explicit package name at ./notung_file_parser.pl line 17.

[02:19] <nErVe> go it..

[02:19] <nErVe> got it..i think he errot..

[02:19] <nErVe> error

[02:20] <nErVe> i had used the $line at close

[02:21] <nErVe> btw can you help me modify you code the one u posted to work with one i have written..??

[02:24] <last> Just replace the line         # insert your s/// code here!!   with the two s/// expressions you use.  You don't need the $line =~ bits, because you will be working directly with $_ in my code.

[02:24] <last> Need to get my nose down into some ugly C++ code now.

[02:35] *** last left
[02:54] *** mkfort left
[02:59] *** hercynium left
[02:59] *** hercynium joined
[03:01] *** cdarroch left
[03:16] *** hercynium left
[03:20] *** donaldh left
[03:21] *** donaldh joined
[03:34] *** nErVe left
[03:48] *** FurnaceBoy left
[03:50] *** skids left
[03:51] *** meppuru joined
[03:51] *** dduncan joined
[03:51] *** meppl left
[03:51] *** meppuru is now known as meppl

[04:15] *** tann joined
[04:15] *** justatheory left
[04:34] *** amoc left
[04:36] *** amoc joined
[04:41] *** dduncan left
[04:45] *** twigil joined
[04:53] *** goksie_ joined
[04:54] *** goksie_ is now known as whoisthatgoksie

[04:55] <whoisthatgoksie> morning 

[04:55] *** drbean left
[04:56] <whoisthatgoksie> is the negative index not allowed in perl6?

[04:57] <twigil> whoisthatgoksie: ask p6eval :)

[04:58] <whoisthatgoksie> my @test = (1..10); say @test[-1]; output  Use of uninitialized value

[05:01] <twigil> looks like it is not

[05:01] *** mkfort joined
[05:02] <whoisthatgoksie> not allowed?

[05:02] <twigil> ah, no

[05:02] <twigil> rakudo: my @test = (1..10); say @test[*-1];

[05:02] <p6eval> rakudo 1b06df: OUTPUT«10␤»

[05:02] <twigil> just add an asterisk

[05:03] <whoisthatgoksie> thanks for learning it the new way

[05:03] <mkfort> except that compiling everything takes all day so everything else is slow

[05:04] <mkfort> oops, wrong channel :/

[05:04] *** amoc left
[05:06] *** amoc joined
[05:07] *** azawawi joined
[05:07] <azawawi> hi

[05:08] *** drbean joined
[05:09] *** dukeleto left
[05:10] <tann> why did larry decide to put the asterisk in there? 

[05:11] <tann> > my @a = 1..10; say @a[*-1];

[05:11] <tann> 10

[05:11] <tann> > 

[05:11] <lambdabot>   <no location info>: parse error on input `='

[05:11] <lambdabot>   not an expression: `'

[05:11] *** beggars joined
[05:15] <TimToady> it removes a discontinuity, and a source of bugs

[05:15] <TimToady> and it falls out of the meaning of * naturally

[05:17] *** azawawi left
[05:21] *** sri_kraih left
[05:24] <whoisthatgoksie> reading S09 now.. @test[*+1] is giving Use of uninitialized value

[05:30] *** beggars left
[05:34] <twigil> @test[+1] works :)

[05:34] <lambdabot> Unknown command, try @list

[05:34] <twigil> sorry, lambdabot

[05:35] <whoisthatgoksie> sure...

[05:35] <whoisthatgoksie> i was just trying the statement in the S09

[05:40] *** justatheory joined
[05:47] *** justatheory left
[05:53] *** mkfort left
[05:59] *** ihrd joined
[06:00] *** whoisthatgoksie left
[06:01] *** ihrd left
[06:01] <tann> rakudo: for 1..5 :by(2) -> $i { say $i }

[06:01] <p6eval> rakudo 1b06df: OUTPUT«Statement not terminated properly at line 2, near ":by(2) -> "␤in Main (src/gen_setting.pm:0)␤»

[06:02] <tann> ^^^ looked at the code...it seems p6 relies on parrot iterator for this?

[06:03] *** amoc left
[06:04] *** whoisthatgoksie joined
[06:06] <TimToady> :by is not yet implemented in rakudo, I think

[06:10] <tann> i looked at the code and it called out to parrot iterator (or so i thought) :)

[06:11] *** kst left
[06:11] *** kst joined
[06:14] <TimToady> I don't think rakudo's parser knows what to do with :by

[06:14] <TimToady> STD parses it, however

[06:14] *** user_793 joined
[06:14] <TimToady> std: for 1..5 :by(2) -> $i { say $i }

[06:14] <p6eval> std 27154: OUTPUT«ok 00:02 38m␤»

[06:15] <tann> ah..thanks

[06:15] <TimToady> though eventually you'll probably just say

[06:16] <TimToady> std: for 1,3,5...* -> $i { say $i }

[06:16] <p6eval> std 27154: OUTPUT«ok 00:03 39m␤»

[06:16] <TimToady> if you want the whole series

[06:16] <TimToady> that relies on laziness, which parrot does not yet provide

[06:16] <tann> oh..neat

[06:17] *** user_793 left
[06:17] *** azawawi joined
[06:18] <azawawi> http://feather.perl6.nl/~azawawi/padre-perl6-export.png

[06:21] *** azawawi left
[06:30] *** alester_ joined
[06:30] <Matt-W> phenny: tell masak you're living in the future!

[06:30] <phenny> Matt-W: I'll pass that on when masak is around.

[06:32] *** iblechbot joined
[06:47] *** alester_ left
[07:20] *** donaldh left
[07:20] *** donaldh joined
[07:20] *** tann left
[07:31] *** sitaram_ joined
[07:31] *** sitaram_ left
[07:38] *** ihrd joined
[07:45] *** Su-Shee joined
[07:45] <Su-Shee> good morning.

[08:02] *** ihrd left
[08:13] *** avar left
[08:13] *** avar joined
[08:41] *** iblechbot left
[08:43] *** whoisthatgoksie left
[08:46] *** gbacon left
[08:46] *** finanalyst joined
[08:54] *** ZuLuuuuuu joined
[09:04] *** rfordinal left
[09:04] *** rfordinal joined
[09:09] *** kst left
[09:09] *** kst joined
[09:18] *** rfordinal3643 joined
[09:23] *** rfordinal3643_ joined
[09:25] *** rfordinal left
[09:38] *** pmurias joined
[09:41] *** rfordinal3643 left
[09:46] *** nErVe joined
[10:12] *** buubot left
[10:17] *** agentzh left
[10:17] *** agentzh joined
[10:20] *** buubot joined
[10:21] *** rfordinal joined
[10:24] *** rfordinal3643 joined
[10:30] *** iblechbot joined
[10:30] *** kst left
[10:30] *** rfordinal3643 left
[10:31] *** kst joined
[10:39] *** rfordinal3643_ left
[10:48] *** rfordinal left
[10:58] *** DemoFreak joined
[11:07] *** nErVe left
[11:10] *** lichtkind joined
[11:20] *** donaldh left
[11:20] *** donaldh joined
[11:27] <Su-Shee> lichtkind: I added two urls to your xing posting.

[11:28] <lichtkind> Su-Shee: ah thanks. schaun :)

[11:28] <lichtkind> Su-Shee: i mean schau an

[11:28] <Su-Shee> just moritz' 5-6 tutorials and "the wikibooks book"

[11:32] *** masak joined
[11:33] *** last joined
[11:33] <masak> happy weekend, #perl6 lurkers!

[11:33] <phenny> masak: 06:30Z <Matt-W> tell masak you're living in the future!

[11:33] <Su-Shee> masak: coulnd't be better with internet, notebook on the sofa and strawberries. :)

[11:33] <masak> oh yes. it's great here -- you should all come, too.

[11:34] <Su-Shee> to where?

[11:34] <masak> the future.

[11:34] <Su-Shee> masak mcfly? ;)

[11:34] *** hanekomu joined
[11:34] *** hanekomu left
[11:34] <masak> the secret isn't a deLorean, it's Rakudo. :)

[11:34] <masak> but I need to backlog to be sure what exactly Matt-W meant.

[11:35] * masak backlogs

[11:35] *** lichtkind left
[11:48] *** lichtkind joined
[11:50] *** flexibeast joined
[11:51] <masak> no, there's no context in the backlog to clarify Matt-W's "living in the future" remark. I'm kinda hoping he was referring to my latest blog post.

[12:04] <lichtkind> Su-Shee: thanks but the links are know but the docs page is currently in bad state im currently reformating, im aware that what i do is only one of many tutorials but i had these links look: http://www.perlfoundation.org/perl6/index.cgi?perl_links_table

[12:09] <lichtkind> Su-Shee: are you more interested in perl 6 docs?

[12:11] <Su-Shee> lichtkind: interested? I'm _so_ waiting for a real book... so yeah, I'm really interested. :)

[12:11] <Su-Shee> lichtkind: I just added them because they're rather good right now and there's isn't too much waving the perl6 flag right now. :)

[12:12] <lichtkind> Su-Shee: how you mean that?

[12:13] <Su-Shee> lichtkind: it's not that we've got a perl6 hype on our hands right now so I smuggle one in with useful links. ;)

[12:13] <lichtkind> Su-Shee: hype sucks, only lamer wnat to surf on a hype wave :)

[12:13] <lichtkind> i should write LAMORZZ

[12:14] <Su-Shee> lichtkind: a little more recognition can't hurt.

[12:14] <masak> lichtkind: no, it's not only lamers that would recognize Perl 6 through a hype.

[12:14] <lichtkind> Su-Shee: it is recognized or it would'nt be headlined by Ix magazine

[12:15] <masak> it's not nearly recognized enough.

[12:15] <Su-Shee> lichtkind: don't know. if "ck" was the editor - he's supporting perl anyway for .. every since.

[12:16] *** viklund joined
[12:16] <Su-Shee> I think I've explained about 20 times within the last 12 weeks that perl isn't dead and perl 6 no vaporware. 

[12:16] <lichtkind> Su-Shee: he is supportive but has not much clue about perl 6, moritz_++ was , but what i ment, and i know that because i spoke with him, without general backing no story gets to the frontpage like the perl 6 tut did

[12:16] <Su-Shee> which is difficult to tell because international tech media says otherwise..

[12:17] <Su-Shee> lichtkind: I know, I write regularly for Heise. 

[12:17] <lichtkind> Su-Shee: did you see Perl 6 Tutorial 

[12:17] <lichtkind> mom

[12:17] <Su-Shee> lichtkind: gimme gimme gimme. ;)

[12:17] <lichtkind> Su-Shee: did you see http://wiki.perl-community.de/cgi-bin/foswiki/view/Wissensbasis/Perl6Tutorial

[12:18] <lichtkind> Su-Shee: i tried to write for heise maybe i wil

[12:18] <Su-Shee> lichtkind: I don't think this is how a new technology spreads in the german realm...

[12:19] <lichtkind> Su-Shee: what you mean ?

[12:19] <Su-Shee> I mean that I don't think that Heise is the main source of any tech stuff which later on gets more well known (or starts a hype :)

[12:19] <Su-Shee> lichtkind: _very_ nicely done. can't you do it in english?

[12:20] *** wolverian joined
[12:21] <lichtkind> Su-Shee: i currently do, but it was originally writte for foo magazine which is german

[12:22] <lichtkind> Su-Shee: i have here 3,4 wiki prjects on my leg thats why i currently try to bind one of them to yours :)

[12:22] *** nsh left
[12:22] <Su-Shee> lichtkind: ah. how sneaky. :)

[12:23] <lichtkind> Su-Shee: i meake the 2 tutorials in parallel german and english, otherwise we have the november wiki and wikipedia 

[12:24] <Su-Shee> I'm trying to understand the parrot-to-perl-binding stuff and write about that.

[12:24] <Su-Shee> which I feel having an epiphany any moment now. 

[12:25] <lichtkind> Su-Shee: seen the book in the svn ?

[12:25] <Su-Shee> no, where?

[12:27] <lichtkind> Su-Shee: svn: trunk/docs/book/

[12:28] <lichtkind> Su-Shee: https://svn.parrot.org/parrot/trunk/docs/book/

[12:29] <Su-Shee> ah parrot! yes, I know it.

[12:29] *** M_o_C joined
[12:30] <Su-Shee> hmpf. perlcommunity.de doesn't like my login.

[12:31] <lichtkind> Su-Shee: yes there are sometimes problems with that but try it tina is very helpfull and its much better nowadays

[12:32] <Su-Shee> ok, I give up. 

[12:33] <lichtkind> Su-Shee: why?

[12:33] <Su-Shee> because I'm registered but the login throws an error. :)

[12:34] <lichtkind> Su-Shee: nevver on my side, but if you throw a bugreport it will be took care

[12:37] <lichtkind> Su-Shee: come into the #perlde tina is almost always there, battie is her child

[12:37] <lichtkind> on magnet of course

[12:38] *** sbp joined
[12:38] *** nsh joined
[12:39] <Su-Shee> magnet?

[12:39] <lichtkind> Su-Shee: also know as irc.perl.org

[12:40] <Su-Shee> ah. I see.

[12:41] <lichtkind> Su-Shee: so you not take one of the wikis

[12:45] <Su-Shee> lichtkind: I can't, I have to work too much right now for another project to care for.

[12:45] <Su-Shee> (thanks to annoying customers not paying their bills..)

[12:46] <lichtkind> Su-Shee: send them love :)

[12:48] <Su-Shee> and asked for a nice, cosy park bench to sleep on! 

[12:51] <lichtkind> Su-Shee: no need to be afraid :)

[12:52] *** cotto left
[12:53] <masak> perl6: for 1,2,3, { say $_ }

[12:53] <p6eval> rakudo 1b06df: OUTPUT«Could not find non-existent sub for␤»

[12:53] <p6eval> ..pugs: OUTPUT«1␤2␤3␤»

[12:53] <p6eval> ..elf 27154: OUTPUT«Parse error in: /tmp/9lN36lTpDy␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: for 1,2,3, { say $_ }␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[12:53] <p6eval> ..STD_red/std.rb:2…

[12:54] <masak> arguably, Rakudo gets this one right.

[12:54] <masak> but I find it fairly easy to forget a trailing comma before the block.

[12:57] *** jdv79 joined
[12:58] *** cotto joined
[13:00] *** sparc left
[13:02] *** phenny joined
[13:05] <lichtkind> Su-Shee: what exactly was you errur msg while login?

[13:05] <masak> hm, 'forget to remove a trailing comma', that is.

[13:06] <masak> I sometimes think that a source tool that compared the previous and the current saved version of a program, would be able to do wonders with error reporting.

[13:08] <lichtkind> Su-Shee: please try it , tina tries to analyze it

[13:08] <Su-Shee> lichtkind: Argument-Exception: Not enough arguments 

[13:13] *** amoc joined
[13:30] *** twigil left
[13:34] *** Gothmog_ joined
[14:05] <TimToady> std: for 1,2,3, { say $_ }

[14:05] <p6eval> std 27154: OUTPUT«##### PARSE FAILED #####␤Expression needs parens to avoid gobbling block at /tmp/LuGXItuiPx line 1:␤------> for 1,2,3, { say $_ }␤Missing block (apparently gobbled by expression) at /tmp/LuGXItuiPx line 1:␤------> ␤    expecting parameterized

[14:05] <p6eval> ..block␤FAILE…

[14:05] *** agentzh left
[14:06] <masak> yes, that would help.

[14:07] *** agentzh joined
[14:13] *** ZuLuuuuuu left
[14:17] *** jhorwitz joined
[14:19] *** Whiteknight joined
[14:20] *** s1n_pvmw joined
[14:24] *** skids joined
[14:25] *** sri_kraih joined
[14:25] *** mj41_ joined
[14:27] *** DHGE joined
[14:40] *** mj41 left
[14:44] * masak submits rakudobug

[14:44] <masak> I'm slow today. :)

[15:00] *** DHGE left
[15:02] *** jferrero joined
[15:15] *** macae joined
[15:18] *** twigil joined
[15:20] *** donaldh left
[15:20] *** donaldh joined
[15:30] *** nihiliad joined
[15:41] *** M_o_C left
[15:49] *** cognominal left
[16:00] *** ZuLuuuuuu joined
[16:00] *** digitalise joined
[16:00] *** digitalise left
[16:10] *** justatheory joined
[16:13] *** twigil left
[16:13] *** fridim_ joined
[16:15] *** s1n_pvmw left
[16:20] *** Psyche^ joined
[16:21] *** jferrero left
[16:23] *** gbacon joined
[16:29] *** jferrero joined
[16:30] *** beggars joined
[16:31] *** frew|work joined
[16:32] *** Patterner left
[16:32] *** Psyche^ is now known as Patterner

[16:36] <masak> ok, golf challenge! given a line of input on $*IN (minus final newline), return "Yes" iff the line is a palindrome. I'm sure it can be written quite succinctly.

[16:37] <masak> rakudo: say 'Yes' if .flip eq $_ given $*IN.get

[16:37] *** jhorwitz left
[16:37] <p6eval> rakudo 1b06df:  ( no output )

[16:38] <masak> hm. maybe that's about it. :)

[16:40] *** M_o_C joined
[16:42] <TimToady> rakudo: say 'Yes'if .flip eq$_ for $*IN.get

[16:43] <p6eval> rakudo 1b06df:  ( no output )

[16:45] <masak> ah, 'for'. nice.

[16:48] *** FurnaceBoy joined
[16:51] <masak> how do I write 'the same digit, repeated one or more times' as a Perl 6 regex?

[16:51] <masak> and same question, but '...that works in Rakudo?'

[16:52] *** macae left
[16:55] <pmichaud> masak:   / (\d) $0*

[16:55] <lambdabot> pmichaud: You have 2 new messages. '/msg lambdabot @messages' to read them.

[16:55] <pmichaud> masak:   / (\d) $0* /

[16:55] <masak> pmichaud: thanks.

[16:55] *** alester left
[16:56] *** cognominal joined
[16:56] <masak> rakudo: $_ = 1; .say; .=subst(/(.) $0*/, { $/.chars ~ $0 }, :g); .say

[16:56] <p6eval> rakudo 1b06df: OUTPUT«1␤Use of uninitialized value␤Use of uninitialized value␤0␤»

[16:56] <masak> I expected that one to say '11' the second time.

[16:56] <masak> what am I missing?

[16:59] <pmichaud> I'm not sure.

[16:59] <masak> rakudo: $_ = "foo"; say .subst(/o/, { ~$/ }, :g)

[16:59] <p6eval> rakudo 1b06df: OUTPUT«foo␤»

[16:59] <masak> rakudo: $_ = "foo"; say .=subst(/o/, { ~$/ }, :g)

[16:59] <p6eval> rakudo 1b06df: OUTPUT«Use of uninitialized value␤Use of uninitialized value␤f␤»

[16:59] * masak submits rakudobug

[16:59] <TimToady> {} has its own $/ maybe?

[17:00] <masak> some strange interaction between .= and $/

[17:00] <masak> TimToady: that doesn't explain why .subst works above.

[17:01] <pmichaud> it might be an odd interaction with $_ .  Or perhaps with the way .= has been implemented.

[17:04] *** s1n1 joined
[17:05] *** rfordinal joined
[17:13] *** FurnaceBoy left
[17:16] *** amoc left
[17:19] *** fuad joined
[17:19] <fuad> hello

[17:20] *** amoc joined
[17:22] <masak> fuad: hi there!

[17:23] *** s1n1 is now known as s1n_yapc

[17:25] *** fuad left
[17:28] <lichtkind> is ** a regex metachar?

[17:31] <masak> lichtkind: well, it's two chars...

[17:31] <masak> lichtkind: but yes, it has a separate meaning.

[17:31] <lichtkind> yes but i mean its that category

[17:31] *** amoc left
[17:31] <lichtkind> because there are 2 more regex related categories

[17:31] *** amoc joined
[17:32] <masak> not sure I follow.

[17:34] <lichtkind> masak: straigth out of say02:     regex_assertion:<!>                         /<!before \h>/

[17:34] <lichtkind>     regex_backslash:<w>                         /\w/ and /\W/

[17:34] <lichtkind>     regex_metachar:<.>                          /.*/

[17:34] <lichtkind>     regex_mod_internal:<P5>                     m:/ ... :P5 ... /

[17:34] <lichtkind> to which one belongs ** ?

[17:35] <lichtkind> i think metachar

[17:35] <masak> I would say, neither of those.

[17:35] <lichtkind> maybe also assertion

[17:35] <lichtkind> it hast to

[17:35] <masak> but better ask TimToady. or look in STD.pm yourself.

[17:36] *** azawawi joined
[17:36] <azawawi> good evening

[17:38] <azawawi> masak: ping 

[17:39] <masak> azawawi: pong.

[17:39] <azawawi> masak: I have just finished quick fix feature for Padre Perl 6

[17:40] <masak> azawawi: woot!

[17:40] <azawawi> masak: if you had written if() and then pressed alt-/,  it will asks whether to insert a space after if or insert sub if { } or comment the whole line with the error.. 

[17:41] <azawawi> masak: s/ask/ask/

[17:41] <azawawi> masak: if you write . to string concatenate, it will suggest ~ ... 

[17:42] *** jferrero left
[17:42] <masak> :)

[17:42] <azawawi> masak: new Foo -> Foo.new

[17:42] <azawawi> masak: undeclared foo; -> it will insert my $foo; before :)

[17:43] <masak> oh, wow. :)

[17:43] * azawawi wonders if rakudo error messages will improve like STD's 

[17:44] <azawawi> STD error/warning messages rock. TimToady++

[17:46] <azawawi> pmichaud: i cant figure out how to highlight comments/pod in rakudo padre's PGE dumper

[17:49] *** masak left
[17:56] <TimToady> azawawi: rakudo hasn't been worrying about error messages much because the plan is to eventually run STD directly

[17:56] <azawawi> TimToady: http://feather.perl6.nl/~azawawi/quick_fix/

[17:58] *** Molaf left
[17:58] *** Molaf joined
[18:00] <azawawi> i see; now we can use either S:H:P6/STD or rakudo/PGE highlighting in Padre Perl 6. The quick fixe, outline tree, and useful error messages are based currently on the STD highlighter.

[18:02] <pmurias> azawawi: the quick-fix is eclipse inspired?

[18:02] <azawawi> pmurias: yup

[18:03] <azawawi> pmurias: this is an initial implementation using the right click menu

[18:04] <azawawi> pmurias: next step is integration with Ecliptic's CTRL-~, http://search.cpan.org/~azawawi/Padre-Plugin-Ecliptic-0.10/lib/Padre/Plugin/Ecliptic.pm 

[18:10] *** REPLeffect left
[18:22] *** Su-Shee left
[18:22] *** azawawi left
[18:28] <Whiteknight> masak: are you going to be at YAPC?

[18:29] <cotto> ENOMASAK

[18:30] *** frew|work left
[18:34] <amoc> i remember he has a presentation about perl6

[18:53] *** [particle]ventus joined
[19:02] *** finanalyst left
[19:08] *** [particle]ventus left
[19:16] <Matt-W> phenny: tell masak yes I was referring to your blog entry

[19:16] <phenny> Matt-W: I'll pass that on when masak is around.

[19:20] *** donaldh left
[19:20] *** donaldh joined
[19:21] *** m-i-l-a-1 is now known as m-i-l-a-n

[19:26] *** fridim_ left
[19:28] *** fridim_ joined
[19:37] *** `alpha joined
[19:37] <`alpha> greetings

[19:37] <`alpha> I would like to know if perl6 has/will have a fast way to perform a deep comparison of data structures ?

[19:39] *** kst left
[19:39] *** kst joined
[19:39] *** M_o_C left
[19:46] *** [particle]ventus joined
[19:47] <eternaleye> `alpha: Well, the === operator does a deep comparison of the contents, and =:= checks if two variables are bound to the same container

[19:47] <`alpha> cool

[19:47] <`alpha> thanks eternaleye 

[19:49] <eternaleye> rakudo: my $foo = [ 1, 2, [ 3, 4 ]; my $bar = [ 1, 2, [ 3, 4 ]; my $baz = [ 1, 2, [ 3, 5 ]; say "Yes" if $foo === $bar; say "Yes" if $bar === $baz;

[19:49] <p6eval> rakudo 1b06df: OUTPUT«Statement not terminated properly at line 2, near "= [ 1, 2, "␤in Main (src/gen_setting.pm:0)␤»

[19:49] <eternaleye> Hm, rakudo may not implement it yet, though

[19:49] <eternaleye> pugs: my $foo = [ 1, 2, [ 3, 4 ]; my $bar = [ 1, 2, [ 3, 4 ]; my $baz = [ 1, 2, [ 3, 5 ]; say "Yes" if $foo === $bar; say "Yes" if $bar === $baz;

[19:49] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "$foo"␤    expecting "=", context, ":" or "("␤    at /tmp/RmUf2VGPEF line 1, column 4␤»

[19:49] <`alpha> rakudo: say "ok" if [1,2,3] === [1,2,3]

[19:49] <p6eval> rakudo 1b06df:  ( no output )

[19:49] <`alpha> >.<

[19:49] <`alpha> rakudo: say "ok" if [1,2,3] === [1,2,3]

[19:49] <p6eval> rakudo 1b06df:  ( no output )

[19:49] <`alpha> O.o

[19:50] <`alpha> does not work?

[19:50] <eternaleye> Might be NYI

[19:50] <`alpha> I see

[19:53] <eternaleye> Here's a question for the spec-writers: If the block for a ... expression has a slurpy param, what happens? For instance, if I had 2, 3, 5, 7 ... -> *@prev_primes { for @prev_primes[*-1]..* { return $_ if isPrime( $_ ); }; }; would it work?

[19:54] <eternaleye> s/isPrime( $_ )/isPrime( $_, @prev_primes )

[20:00] <eternaleye> [revised] 2, 3, 5, 7 ... -> *@prev_primes { for @prev_primes[*-1]^..* { return $_ if $_ % all( @prev_primes ) != 0; }; };

[20:04] *** justatheory left
[20:13] *** sri_kraih left
[20:14] *** sri_kraih joined
[20:24] <amoc> rakudo: [1,2,3].WHICH.say; [1,2,3].WHICH.say

[20:24] <p6eval> rakudo 1b06df: OUTPUT«-1232973856␤-1232984608␤»

[20:27] <amoc> rakudo: say 'value identity is same' if [1,2,3] === [1,2,3]

[20:27] <p6eval> rakudo 1b06df:  ( no output )

[20:27] <amoc> i think it's because Array is a mutable type. and there identity doesn't belong to their contents.

[20:27] <amoc> s/there/their/;

[20:31] *** [particle]ventus left
[20:33] *** s1n_yapc left
[20:42] *** ZuLuuuuuu left
[20:43] *** kst left
[20:43] *** kst joined
[20:50] *** s1n1 joined
[20:50] *** s1n1 left
[20:51] *** s1n1 joined
[20:52] *** xomas is now known as xomas_

[20:52] *** xomas_ is now known as xomas

[20:57] *** nErVe joined
[21:05] *** `alpha left
[21:19] *** awwaiid joined
[21:20] <TimToady> you want eqv for deep comparison

[21:21] <TimToady> rakudo: say 'value identity is same' if [1,2,3] eqv [1,2,3]

[21:21] <p6eval> rakudo 1b06df: OUTPUT«No applicable methods.␤in Main (/tmp/QawfkFdHbF:2)␤»

[21:22] <TimToady> rakudo: say 'value identity is same' if 42 eqv 42

[21:22] <p6eval> rakudo 1b06df: OUTPUT«No applicable methods.␤in Main (/tmp/WiIJXkpzHp:2)␤»

[21:22] <TimToady> nyi I guess

[21:22] <TimToady> errands &

[21:28] *** eMaX joined
[21:31] *** smtms left
[21:32] *** smtms joined
[21:46] *** kst left
[21:46] *** eMaX left
[21:47] *** s1n1 left
[21:47] *** kst joined
[21:48] *** pmurias left
[21:53] *** Whiteknight left
[21:53] *** fridim_ left
[21:54] *** eMaX joined
[21:57] *** rindolf joined
[21:57] <rindolf> Hi all.

[22:04] <viklund> o/

[22:05] *** cotto left
[22:15] *** sbp left
[22:15] *** phenny left
[22:16] *** nsh left
[22:17] *** cotto joined
[22:22] *** Ehtyar joined
[22:24] *** Ehtyar left
[22:33] *** iblechbot left
[22:42] *** nErVe left
[22:55] *** cotto left
[23:00] *** nsh joined
[23:08] *** smtms left
[23:09] *** beggars left
[23:13] *** kst left
[23:13] *** kst joined
[23:15] *** lichtkind left
[23:18] <pugs_svn> r27155 | kyle++ | [t/spec] This fixes the TASKS item for S06-signature/slurpy-params-2.t

[23:18] <pugs_svn> r27155 | kyle++ | There was a todo fudge command that would extend past the end of the 

[23:18] <pugs_svn> r27155 | kyle++ | block it was in, and I think that's what fudge was unhappy about.

[23:18] <pugs_svn> r27155 | kyle++ | 

[23:18] <pugs_svn> r27155 | kyle++ | Out of the tests that now run, a couple of them didn't pass.  I marked 

[23:18] <pugs_svn> r27155 | kyle++ | them with todo fudges, but I don't really understand the tests, so the 

[23:18] <pugs_svn> r27155 | kyle++ | descriptions are empty.

[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:21] *** rindolf left
[23:23] *** eMaX left
[23:23] *** tann joined
[23:24] <tann> rakudo: my @fib = 1, 1...&[+];

[23:24] <p6eval> rakudo 1b06df: OUTPUT«Statement not terminated properly at line 2, near "...&[+];"␤in Main (src/gen_setting.pm:0)␤»

[23:25] <tann> std: my @fib = 1,1...&[+];

[23:25] <p6eval> std 27155: OUTPUT«ok 00:03 51m␤»

[23:43] *** M_o_C joined
[23:49] *** gbacon left
[23:52] *** meppl left
