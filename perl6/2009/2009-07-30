[00:23] * jnthn -> sleep

[00:49] *** meppl joined
[00:57] <eternaleye_> (way, way, _way_ backlogging) Juerd: re mnemonic for |@array, I always saw it as being 'flattened against a wall'

[01:01] <Juerd> Nice one

[01:01] <Juerd> And impressive case of backlogging :)

[01:02] *** arthur-_ left
[01:05] *** rfordinal left
[01:10] *** orafu left
[01:11] *** orafu joined
[01:15] *** synth left
[01:19] *** sri_kraih left
[01:21] *** bpetering joined
[01:23] *** Whiteknight left
[01:29] *** meppl left
[01:30] *** arthur-_ joined
[01:32] *** arthur-_ left
[01:33] *** Limbic_Region left
[01:45] *** synth joined
[01:49] <eternaleye_> (way, way, _way_ backlogging still) pmichaud, moritz_: re Tim Bunce and DBDI, someone should get him and davef talking, since davef has been working on wholesale translation of the JDBC system to P6

[01:51] <pmichaud> eternaleye_: noted

[01:55] <eternaleye_> I think davef has been working from that old message and perlbuzz discussion, when Tim said that in his view, P6-DBDI == JDBC was the way to go. AFAICU, davef's method has been programmatic translation combined with manual tune-ups/corrections

[02:00] *** alester joined
[02:04] *** SmokeMachine joined
[02:11] *** KyleHa joined
[02:14] <KyleHa> Howdy, #perl6.

[02:16] *** szabgab joined
[02:16] *** jdv79 left
[02:21] <bpetering> hey Kyle :)

[02:21] *** wayland76 joined
[02:22] <Tene> wayland76: just read your email.  ncigen still exists, but was never quite finished well enough to be able to parse *every* header.

[02:22] <Tene> it was tewk's project, and he's kinda dropped off the map

[02:26] *** jferrero left
[02:27] *** unitxt joined
[02:27] <wayland76> Right

[02:28] <wayland76> And IIRC, it's written in PIR, which I don't speak

[02:29] <wayland76> It sounds like it might be worthwhile finishing for those projects, though

[02:30] *** dukeleto left
[02:42] <bpetering> KyleHa: i'm AKA "missingthepoint", but occasionally masquerade as myself :)

[02:42] <KyleHa> bpetering: I suspected as much.

[02:42] <KyleHa> Happy to have you here either way.  8-)

[02:46] <szabgab> bpetering, hi

[02:46] <szabgab> have we lost your for our cause over at #padre ?

[02:46] <szabgab> you

[02:55] <szabgab> anyone with a windows machine who would be able to give us a hand in testing the new .msi installer of "Almost six" ?

[02:56] <szabgab> http://strawberryperl.com.nyud.net/download/padre/almost-six-0.41.msi

[02:57] <szabgab> This will install in C:\strawberry   and it contains Strawberry Perl 5.10, Rakudo - Chicago + Padre 0.41 + Padre::Plugin::Perl6

[02:57] *** SmokeMachine left
[02:59] <bpetering> szabgab: no ;)

[03:00] <bpetering> how would you like 2 hours a week?

[03:03] *** molaf joined
[03:04] <bpetering> (i'm dividing up my time according to perl projects to work on)

[03:04] *** fridim_ joined
[03:06] *** synth left
[03:08] <szabgab> bpetering, hi

[03:09] <szabgab> any time you give is good for you

[03:09] <szabgab> us

[03:09] <szabgab> both you and us :-)

[03:11] <szabgab> I just installed Almost six, it worked on my virtual window with a few issues I noticed and listed here: http://mail.perlide.org/pipermail/padre-dev/2009-July/001165.html

[03:16] *** tolkad joined
[03:17] <tolkad> evalbot: perl6: say 3;

[03:18] *** tolkad left
[03:18] <TimToady> perl6: say 4

[03:18] <p6eval> elf 27807, pugs, rakudo 13ba2f: OUTPUT«4␤»

[03:19] <szabgab> TimToady: say 5

[03:19] <szabgab> no

[03:20] <szabgab> TimToady: say 6     ;-)

[03:30] <TimToady> 5.9999999999999999999999

[03:31] <pmichaud> wayland76: does the current ins2 branch work out okay for you?

[03:31] <pmichaud> wayland76: also, what distro are you building RPMs for?

[03:35] <szabgab> TimToady, almost six ...

[03:37] <pugs_svn> r27808 | kyle++ | [t/spec] Tests for P5 style subs without signatures

[03:37] <pugs_svn> r27809 | kyle++ | [t/spec] Tests for RT #64102 (enum functional form)

[03:38] <pugs_svn> r27810 | kyle++ | [t/spec] Test for RT #64184 and another junction test fix

[03:38] <pugs_svn> r27811 | kyle++ | [t/spec] Test for RT #64220

[03:38] <pugs_svn> r27812 | kyle++ | [t/spec] Tests for RT #64268

[03:40] <KyleHa> That new S06-signature/unspecified.t runs under Rakudo, but it warrants review.

[03:41] *** ihrd left
[03:43] <TimToady> they should maybe be Object rather than Any, since slurpies are specced not to autothread

[03:45] *** samlh joined
[03:45] <KyleHa> What is Any but not Object?  A Junction?  Just out of curiosity...

[03:46] <samlh> yes

[03:46] <pmichaud> A Junction is Object but not Any

[03:46] <wayland76> pmichaud: I'm building for Fedora 10

[03:47] <samlh> ah, sorry

[03:47] <wayland76> I'll be installing 11 as soon as I have my new computer

[03:47] <pmichaud> wayland76: You might want to subscribe to 

[03:47] <KyleHa> Any other suggestion for unspecified.t ?

[03:47] <pmichaud> https://bugzilla.redhat.com/show_bug.cgi?id=498390

[03:47] <pmichaud> I'm looking at unspecified.t now

[03:48] <pmichaud> KyleHa: If I was understanding today's earlier conversation correctly, then    sub simple { 'simple' }    would be the same as   sub simple() { 'simple' }

[03:48] <pmichaud> i.e., taking no arguments.

[03:48] <TimToady> correct

[03:49] <KyleHa> Does that mean passing it arguments dies?

[03:49] <pmichaud> yes, with too many arguments.

[03:49] *** molaf left
[03:50] <wayland76> pmichaud: Thanks

[03:50] <KyleHa> I didn't keep the code, but I tried an explicitly 'sub empty()', and it lived through receiving arguments.

[03:50] <pmichaud> KyleHa: that's a Parrot bug.

[03:50] <KyleHa> OK.

[03:50] <KyleHa> I'll fix the 'sub simple' tests.

[03:50] <pmichaud> Currently Parrot doesn't have a mechanism to define "sub with zero arguments

[03:53] <pmichaud> wayland76: apparently Rakudo Perl 6 has been accepted for inclusion in Fedora 12

[03:53] <pmichaud> (tenatively accepted, at any rate)

[03:54] <wayland76> Cool :)

[03:54] <pmichaud> the build+spec that is in the bugzilla ticket isn't the one we put together, though.  Gerd Pokorra has been emailing me off-list to arrange for it, though (and I keep pointing him to the RT tickets that others have been working on)

[03:54] <pmichaud> anyway, I'm pretty comfortable with the ins branch at the moment, so I may be migrating it to trunk soon.  I haven't decided if I'll do that pre- or post- yapc, though.

[03:55] <wayland76> Ok.  I worked with Gerd on the Parrot one, then when we got something we both liked, Allison said we were going to do things completely differently :)

[03:55] <pugs_svn> r27813 | kyle++ | [t/spec] fix unspecified.t after advice from TimToady++ and pmichaud++

[03:56] <pmichaud> afk for a while

[03:56] <TimToady> btw, going to pt tomorrow, don't know what my connectivity will be till the conference

[03:56] *** hoelzro_ joined
[03:56] <TimToady> so don't take silence for consent.  or for lack thereof :)

[03:57] *** hoelzro_ left
[03:59] <TimToady> 'course, it's hard to know what the connectivity will be at the conference too :)

[04:00] <KyleHa> How can one confer without connectivity?

[04:04] <TimToady> I don't think sort: {1} can guarantee any order

[04:05] <TimToady> except maybe to leave the order unchanged

[04:05] <KyleHa> I have it leaving the order unchanged.

[04:06] <KyleHa> The sort in Perl 6 is still stable, right?

[04:06] *** dukeleto joined
[04:06] <TimToady> ah, so you do

[04:06] *** arejay left
[04:06] <TimToady> nevermind

[04:07] *** arejay joined
[04:07] <TimToady> didn't notice the last one was missing {1}

[04:08] <KyleHa> I'll make that stand out better.

[04:11] <pugs_svn> r27814 | kyle++ | [t/spec] improved readability/clarity after comments from TimToady++

[04:12] <KyleHa> G'night, and thanks!

[04:12] *** KyleHa left
[04:13] *** alc joined
[04:21] <wayland76> pmichaud: ins2 builds and tests fine for me :)

[04:31] *** arejay left
[04:32] *** arejay_ joined
[04:45] *** ashizawa left
[04:45] *** ashizawa joined
[04:49] *** alester left
[05:01] *** alester joined
[05:17] *** desertm4x joined
[05:24] *** hercynium left
[05:24] *** eternaleye joined
[05:24] *** eternaleye_ left
[05:29] <eternaleye> somone with ops: perhaps the text "evalbot: perl6: say 3;'" in the title could be changed to "evalbot usage: 'perl6: say 3;'" since it's been a perennial source of confusion among newcomers

[05:29] <eternaleye> *someone

[05:30] <eternaleye> Typing in a hammock is hard

[05:30] *** frioux joined
[05:30] <wayland76> Oh, what a life of pain and misery, having to type in a hammock :)

[05:30] *** hamez_ joined
[05:31] <eternaleye> Worse when it's been >100F for 3 days

[05:31] <eternaleye> In an area that usually doesn't break 85

[05:32] *** frioux left
[05:32] *** frioux joined
[05:33] *** frioux left
[05:35] <wayland76> Well, I guess that makes a difference :)

[05:37] *** hamez left
[05:39] *** frew_ joined
[05:39] *** frew left
[05:48] *** hamez_ left
[05:50] *** ashizawa left
[05:51] *** ashizawa joined
[06:05] *** tann joined
[06:05] <tann> rakudo: say caller(0).perl;

[06:05] <p6eval> rakudo 13ba2f: OUTPUT«Could not find non-existent sub caller␤»

[06:06] <tann> p6eval: say caller(0).perl;

[06:09] *** justatheory left
[06:12] *** justatheory joined
[06:14] *** justatheory left
[06:25] *** moritz_ changes topic to: »ö« | http://perl6-projects.org/ | nopaste: http://paste.lisp.org/new/perl6 | evalbot usage: 'perl6: say 3;' | irclog: http://irc.pugscode.org/ | UTF-8 is our friend!

[06:25] <moritz_> eternaleye++

[06:30] *** alester left
[06:34] *** unitxt left
[06:37] <bpetering> thanks moritz_++

[06:40] <bpetering> and eternaleye++

[06:43] <bpetering> VICTORY. (i'll explain later)

[06:43] <bpetering> moritz_ and eternaleye: thanks, as a (still mostly-) newbie i appreciate stuff like that

[06:44] <moritz_> stuff like improved topic?

[06:54] <wayland76> Does anyone see any problems with this whitespace rule? ...

[06:54] <wayland76> rule ws         { \s+ | '//' .*\n };

[06:54] <wayland76> It's giving "maximum recursion depth exceeded"

[06:58] *** fridim_ left
[07:02] <moritz_> it should be token ws

[07:02] <moritz_> otherwise each whitespaces in the rule calls ws

[07:04] *** Su-Shee joined
[07:04] <Su-Shee> good morning, future :)

[07:05] *** araujo joined
[07:05] *** azawawi joined
[07:05] <azawawi> hi

[07:07] *** rfordinal joined
[07:08] <cbk> morning

[07:08] <cbk> but night for me

[07:08] *** redicaps joined
[07:10] <wayland76> moritz_: Ok, thnaks ;)

[07:11] <wayland76> (or thanks, if you prefer them instead; I'm offering either)

[07:11] <moritz_> snacks are just fine, thank you ;-)

[07:12] <cbk> Is there a simple way to change the standard output to a file handle so i can use say $someLineToWrite; and write that to a file?

[07:12] <cbk> I allready looked in S32::IO could really find a good example

[07:13] *** ejs joined
[07:13] <cbk> I seam to remember seeing this somewhere on the net but can't find it any more

[07:13] *** azawawi left
[07:13] <moritz_> I guess you can just assign to $*OUT

[07:13] <moritz_> don't know if that works in Rakudo, though

[07:17] *** alc left
[07:19] <wayland76> SOme info on $*OUT also in S28

[07:20] <moritz_> perl6 -e '$*OUT=open("README", :w); say "foo"'

[07:20] <moritz_> works locally here

[07:20] <moritz_> (and overwrites README)

[07:21] <cbk> I also find info in S16

[07:21] <cbk> moritz_, yah thats how I'm doing it now

[07:22] *** ejs1 joined
[07:24] *** dakkar joined
[07:24] <cbk> cool that works, but now how do i chang it back? :(

[07:24] <wayland76> There are a number of ways

[07:25] <moritz_> $*OUT = $backup_that_you_previously_made_of_OUT

[07:25] <wayland76> Did you note what it said in S28, just below the variable list

[07:25] <wayland76> The way moritz_ suggested probably works now, but is full of Perl-5 think (I'm surprised :) )

[07:26] <moritz_> well, the Perl 6'ish solution is to just introduce a new scope

[07:26] <Su-Shee> .oO(tomorrow's accusation.. "you're so full of perl5-think...!" ;)

[07:26] <moritz_> and since $*OUT is a contextual variable, it's only overridden within the scope, no?

[07:26] <cbk> Well I want to do it the perl 6 way

[07:26] <wayland76> Although it might also be possible to use $PROCESS::OUT

[07:26] <moritz_> or if I understood the scoping wrongly, you can still say 'temp $*OUT = open(...)'

[07:27] <wayland76> The perl6 way is to do { $*OUT=open("README", :w); say "foo"; close(); } say "hi";

[07:27] <moritz_> (of course temp is NYI)

[07:27] <wayland76> The code I just wrote should put foo in README, and "hi" on terminal

[07:27] <moritz_> wayland76: that's what I meant too

[07:27] <wayland76> But I haven't tested it

[07:27] <cbk> wayland76, I'll try it

[07:27] <wayland76> Yeah, I know that's what you means, but cbk didn't :)

[07:28] <wayland76> s/means/meant/

[07:28] <moritz_> rakudo doesn't do context vars yet

[07:28] <wayland76> cbk: moritz_ confirms that it doesn't work :)

[07:28] <wayland76> So we have to do it the P5 way until we get more features :(

[07:28] <wayland76> but pmichaud++ and jnthn++ for features so far :)

[07:29] <moritz_> indeed

[07:30] <moritz_> compare rakudo today to what it used to be 6 months ago

[07:31] *** ejs left
[07:31] <wayland76> I'm waiting for LTM/protoregex before I do comparison

[07:32] <wayland76> But the ROADMAP, which has less progress than expected, will probably get a big jump in the next few months

[07:33] *** dukeleto left
[07:34] *** redicaps left
[07:39] <wayland76> I can hardly *believe* how slow Rakudo is :)

[07:39] <wayland76> Not that I'm complaining -- features first, them optimise

[07:39] <wayland76> But it's surprising :)

[07:41] <Matt-W> Morning

[07:41] <Su-Shee> wayland76: what's the reason btw for being slow?

[07:41] *** fridim_ joined
[07:41] <moritz_> 1) missing optimizations 2) parrot

[07:42] <moritz_> 3) Perl 6

[07:42] <Su-Shee> :) 

[07:42] <cbk> wayland76, looks like once you set $*OUT it will not go back to the terminal after you process the  {} block.  I even tried the S16 way with the temp on the front of it :(

[07:43] <Matt-W> sounds like a bug

[07:43] <Matt-W> or possibly just the lack of temp

[07:44] * Matt-W tries to wrench his brain into Java mode

[07:45] <moritz_> lack of temp

[07:45] <moritz_> it's NYI

[07:45] <moritz_> same for contextual variables

[07:45] <cbk> Matt-W, or maybe my lack of perl 6 foo

[07:45] <moritz_> no

[07:45] <moritz_> it's really not yet done in Rakudo

[07:45] <moritz_> don't blame yourself

[07:47] <cbk> moritz_, ok but that should be worked on next.  NFL season starts in September!

[07:47] <cbk> ;)

[07:49] <tann> NFL = Not Fully Lax P6?

[07:49] <wayland76> cbk: Yeah, moritz_ said it was broken, so you have to to it the P5-think way :)

[07:50] <moritz_> tann: Not (yet) Fundamentally Lazy Perl 6 :-)

[07:50] <wayland76> tann: As an Australian, I'm unsure, but if I had to guess, I'd suggest it might be some kind of sport reference

[07:51] <wayland76> One of those things where you watch grown men grovel in the mud, fighting for posession of a pig's bladder

[07:51] <wayland76> Some kind of primitive ritual :)

[07:51] *** alc joined
[07:51] <Matt-W> wayland76: Isn't it rugby with armour?

[07:51] <moritz_> :-)

[07:52] <wayland76> Matt-W: Don't ask me.  I'm from Victoria -- "Australian Rules Football" country :)

[07:52] * moritz_ spends two or three hours a weeking pushing a small white piece of plastic over a table, while somebody else tries to prevents me from doing it. Just as stupid, but -Ofun :-)

[07:52] *** tann left
[07:53] <cbk> wayland76, primitive ritual and pig's bladder.... lol

[07:53] <wayland76> Ok, this is getting silly.  My grammar has been running for more than 10 minutes :)

[07:53] <moritz_> how large is the input text?

[07:54] <Matt-W> moritz_: I spend about an hour a week propelling a small white hollow sphere over a net with a rubber-coated bat... and another couple of hours wearing a silly costume being repeatedly thrown across the room

[07:54] <Matt-W> moritz_: also -Ofun

[07:54] <cbk> wayland76, but you forgotz the beer!

[07:54] <wayland76>  1054  6754 46235 /usr/share/X11/xkb/symbols/us

[07:54] <wayland76> cbk: Well, the beer isn't usually actually consumed on the field :)

[07:55] *** sri_kraih joined
[07:55] <wayland76> My Dad told me he once heard about a game of cricket told from an alien's point of view

[07:55] <Matt-W> And that bit about the little red ball hitting the wicket, that's particularly tasteless.

[07:55] <wayland76> "The high priest took the crimson orb, and cast it along the centre of the temple to the chief acolyte

[07:55] <cbk> well not in the NFL....  nothing to say you can't get a local game going and drink at the same time.

[07:55] <wayland76> etc :)

[07:56] <cbk> wayland76, sounds cool!

[07:56] <wayland76> Food calls.  Eating is also a primitive ritual, but I'm kinda attached to it :)

[07:56] <Matt-W> wayland76: it's one of the best

[07:56] <wayland76> Matt-W: Are you saying it's from HHG2G?

[07:57] <wayland76> If so, could you fill in cbk while I'm afk food? :) &

[07:57] <Matt-W> wayland76: the from the alien's point of view thing isn't, but they had their own treatment of cricket

[08:07] *** Su-Shee left
[08:11] *** rhr joined
[08:20] *** rhr_ left
[08:44] *** buubot left
[08:44] *** buubot joined
[08:57] *** zamolxes left
[09:11] *** clintongormley joined
[09:12] *** cls_bsd left
[09:13] *** donaldh joined
[09:35] *** buubot left
[09:35] *** buubot joined
[09:40] <moritz_> http://llvm.org/Logo.html other projects have differenet logos :-)

[09:41] <moritz_> I wonder if camelia will ride the dragon, one day :-)

[09:51] <sri_kraih> wow, that dragon is acyually cool

[09:51] <sri_kraih> ah...apple...

[09:52] <moritz_> aquool? :-)

[09:54] *** hah joined
[09:58] *** eiro left
[09:58] *** eiro joined
[10:00] *** zamolxes joined
[10:11] *** ssm joined
[10:16] *** ejs joined
[10:17] *** ejs1 left
[10:24] *** pmurias joined
[10:30] *** nesttle joined
[10:30] *** nesttle left
[10:37] *** alc left
[10:37] <pugs_svn> r27815 | pmurias++ | [re-mildew] added for

[10:45] *** M_o_C joined
[10:47] * jnthn hates incompetent peopel

[10:47] <jnthn> *people

[10:47] * moritz_ hopes jnthn doesn't talk about the #perl6 crowd :-)

[10:47] <jnthn> No

[10:47] *** lichtkind joined
[10:47] <jnthn> The idiots at the datacenter who decided to offer me a nice deal on a server upgrade, and have now managed to completely screw it up.

[10:48] <Matt-W> :(

[10:50] <moritz_> idiots--

[10:55] *** meppl joined
[11:04] * pmurias figured out how to increase the number of tests mildew passes... implement the :P5 regex modifier ;)

[11:06] *** mikehh joined
[11:07] <mikehh> rakudo (13ba2f3) builds on parrot r40377 - make test PASS/ make spectest (up to 27815) two tests FAIL - reported before - Ubuntu 9.04 amd64

[11:07] <mikehh> t/spec/S12-enums/basic.rakudo - Parse errors: Bad plan.  You planned 30 tests but ran 28 - fails with Method 'Num' not found for invocant of class ''

[11:08] <mikehh> t/spec/S12-introspection/walk.t - Parse errors: Bad plan.  You planned 10 tests but ran 4. - fails with Parameter type check failed; expected Any, but got Object for $class in call to block_86 (+ backtrace)

[11:20] *** donaldh left
[11:20] *** donaldh joined
[11:40] *** jauaor joined
[11:40] <jauaor> morning

[11:50] *** mikehh_ joined
[11:59] *** M_o_C left
[12:02] *** rfordinal left
[12:04] *** meppl left
[12:09] *** meppl joined
[12:09] *** mikehh left
[12:11] *** ruoso joined
[12:27] *** xinming_ joined
[12:30] *** JimmyZ joined
[12:33] *** mikehh_ is now known as mikehh

[12:35] <pmurias> ruoso: hi

[12:35] *** lichtkind left
[12:36] <pmurias> ruoso: what parts of the module loading spec are we blocking on?

[12:37] <pmurias> ruoso: we might make some educated guesses or flip some coins and do it anywat

[12:37] <pmurias> * anyway

[12:38] *** xinming left
[12:42] *** szabgab left
[12:45] *** bpetering left
[12:49] <jnthn> rakudo: class Foo { submethod BUILD { say "called" } }; Foo.new

[12:49] <p6eval> rakudo 13ba2f: OUTPUT«called␤»

[12:51] *** jimmy_ joined
[12:54] *** jimmy_ is now known as JimmyZ_away

[12:55] *** JimmyZ_away is now known as JimmyZ_

[12:55] <JimmyZ_> test?

[12:55] *** bpetering joined
[12:58] *** JimmyZ_ left
[13:00] *** JimmyZ_ joined
[13:00] *** JimmyZ left
[13:04] <colomon> rakudo: say (1..20).max;

[13:04] <p6eval> rakudo 13ba2f: OUTPUT«20␤»

[13:06] <colomon> rakduo: my %a{1..20} = 1..20; say %a.keys.max;

[13:07] <colomon> ominous pause there...

[13:07] <colomon> or just mispelling.

[13:07] <colomon> rakudo: my %a{1..20} = 1..20; say %a.keys.max;

[13:07] <p6eval> rakudo 13ba2f: OUTPUT«Statement not terminated properly at line 2, near "{1..20} = "␤in Main (src/gen_setting.pm:3363)␤»

[13:08] <colomon> rakudo: my %a; %a{1..20} = 1..20; say %a.keys.max;

[13:08] <p6eval> rakudo 13ba2f: OUTPUT«9␤»

[13:08] <colomon> There!  That's what I was looking for.

[13:09] <moritz_> colomon: rakudo stringifies the hash keys...

[13:09] <moritz_> colomon: and for string based comparison '9' lt '10'

[13:09] <colomon> Thought that must be it.

[13:10] <colomon> But it seems kind of an odd choice?  Certainly wasn't what I was expecting, given that I explicitly used Ints as the keys.

[13:10] <moritz_> rakudo: say (+«<2 3 4>)>>.WHAT

[13:10] <p6eval> rakudo 13ba2f: OUTPUT«say requires an argument at line 2, near " (+\x{ab}<2 3 4"␤in Main (src/gen_setting.pm:2467)␤»

[13:10] <moritz_> std: say (+«<2 3 4>)>>.WHAT

[13:10] <p6eval> std 27815: OUTPUT«ok 00:03 39m␤»

[13:11] <moritz_> colomon: I think it's not specced that way, but I'm not entirely sure

[13:15] <colomon> Should we pursue it or ignore it for now?

[13:16] *** desertm4x left
[13:16] *** desertm4x joined
[13:17] <moritz_> you could read up what the spec says about the type of hash keys

[13:17] *** szabgab joined
[13:17] <colomon> I don't see any obvious sign it is covered in the spec at all.

[13:17] <colomon> But I might not be looking in the right place.

[13:17] <moritz_> and if it allows any value types (and not just Str) then open a TODO bug report

[13:17] <moritz_> S02 and S09 are the obvious places to look

[13:17] <colomon> http://perlcabal.org/syn/S32/Containers.html#Hash

[13:17] <colomon> Oh, S32 not the obvious place to look?

[13:18] <moritz_> it's the third obvious place :-)

[13:18] <jnthn> Hash keys are strings by default.

[13:18] <moritz_> where's that specced?

[13:19] <jnthn> I forget, but I remember it being discussed and I'm pretty sure that was the outcome.

[13:19] <jnthn> S02 as a first guess.

[13:19] <moritz_> ok

[13:20] *** iblechbot joined
[13:20] <colomon> "The key type of a hash may be specified as a shape trait--see S09."

[13:20] <colomon> That's all I see in S02 so far.

[13:20] <jnthn> *nod*

[13:21] <jnthn> It's in S09.

[13:21] <jnthn> The standard Hash is just

[13:21] <jnthn> my Any %hash{Str};

[13:21] <colomon> rakudo: my %a{Str}; %a{1..20} = 1..20; say %a.keys.max;

[13:21] <p6eval> rakudo 13ba2f: OUTPUT«Statement not terminated properly at line 2, near "{Str}; %a{"␤in Main (src/gen_setting.pm:3363)␤»

[13:21] <jnthn> Though I hope it means Object rather than Any. :-)

[13:22] * moritz_ hopes that too

[13:22] <moritz_> and I guess Hash isn't parametric yet?

[13:22] <jnthn> "oh noes my hash assignment auto-threaded wtf?"

[13:22] <jnthn> moritz_: No, not yet.

[13:22] <jnthn> moritz_: We kinda fake it by mixing in Associative[::T]

[13:22] <colomon> rakudo: my Str %a{Int}; %a{1..20} = 1..20; say %a.keys.max;

[13:22] <p6eval> rakudo 13ba2f: OUTPUT«Statement not terminated properly at line 2, near "{Int}; %a{"␤in Main (src/gen_setting.pm:3363)␤»

[13:23] <jnthn> But Hash (and Array and List) all need to become parametric roles at some point.

[13:24] <moritz_> jnthn: I'll fix the spec

[13:25] <colomon> I still don't see anything that says that keys will be strings.  Closest I've found is

[13:25] <colomon> "To declare a hash that can take any object as a key rather than just a string or integer..."

[13:25] <moritz_> 15:21 <@jnthn> The standard Hash is just

[13:25] <moritz_> 15:21 <@jnthn> my Any %hash{Str};

[13:26] <moritz_> that's what tells you explicitly that it's Str

[13:26] <pugs_svn> r27816 | moritz++ | [S09] standard hash defaults to Object for values

[13:26] <pugs_svn> r27816 | moritz++ | 

[13:26] <pugs_svn> r27816 | moritz++ | We don't want to autothread on assignment to hash. jnthn++

[13:27] *** Su-Shee joined
[13:27] <Su-Shee> back

[13:27] *** arthur-_ joined
[13:28] <moritz_> wb

[13:29] *** szabgab left
[13:29] <Su-Shee> we had a power outage/shortage/breakdownage today. not nice when you're a household filled with computers.. ;)

[13:30] <moritz_> bah

[13:31] <moritz_> that's ugly

[13:33] <colomon> moritz_: ah, yes, read right by that at least three times.  sigh. but mystery explained, anyway! moritz_++ jnthn++

[13:33] *** jan_ left
[13:35] *** stepnem left
[13:37] *** stepnem joined
[13:38] <pugs_svn> r27817 | jnthn++ | [t/spec] Rename S14-traits/basic.t to variables.t to better indicate that its tests relate to traits on variables. Still not sure it's not somewhat bogus in places though. Also add routines.t, which has basic tests for traits being applied to routines.

[13:39] *** stepnem left
[13:41] *** stepnem joined
[13:42] *** stepnem left
[13:43] *** mkelly32 left
[13:44] *** stepnem joined
[13:44] *** stepnem left
[13:44] *** jauaor left
[13:46] *** stepnem joined
[13:46] *** meppl left
[13:47] *** ruoso left
[13:51] *** szabgab joined
[13:51] *** szabgab left
[14:10] *** hercynium joined
[14:13] <pmichaud> Good morning, #perl6

[14:13] <moritz_> oh hai pmichaud 

[14:15] *** Su-Shee left
[14:15] *** alester joined
[14:15] *** cls_bsd joined
[14:16] <Matt-W> hi pmichaud 

[14:17] <pmichaud> (overriding $OUT, from backscroll):   The correct mechanism is   my $OUT is context = open(...)

[14:18] <pmichaud> that causes subsequent prints to go to the new value of $OUT, and it's lexically scoped.

[14:18] <pmichaud> (nyi in rakudo, of course)

[14:18] * moritz_ doesn't really understand contextual variables

[14:19] <pmichaud> they're like environment variables in a shell :-)

[14:20] <moritz_> but when is a shell started?

[14:20] <pmichaud> well, perhaps this helps

[14:20] <pmichaud> inside of the print() function, it writes values to $*OUT

[14:20] <pmichaud> what $*OUT means is "look outward through my callers' scopes until I find a contextual named $OUT, and use that"

[14:21] <pmichaud> so if a caller defines a new contextual $OUT, then that hides any other declarations of $OUT for the functions that it calls

[14:21] <pmichaud> so if I do 

[14:22] <moritz_> and if I assign to $*OUT, then that's scoped to the next dynamic scope where it was declared?

[14:22] <pmichaud> if you assign to $*OUT, you're changing it in the caller's scope where it was originally declared

[14:22] <dalek> rakudo: 5797a68 | jnthn++ | src/pmc/p6opaque.pmc:

[14:22] <dalek> rakudo: Fix bug relating to submethod dispatch on a proto-object.

[14:22] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5797a6889ac928912cc0206b0fbf4de700f79b73

[14:22] <dalek> rakudo: a100a60 | jnthn++ | src/builtins/guts.pir:

[14:22] <dalek> rakudo: Ensure that proto-objects use the correct dispatcher, just like any other object.

[14:22] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a100a60237e19d3b446d3954bb65e882de0f7183

[14:22] <dalek> rakudo: 21cbaef | jnthn++ | t/spectest.data:

[14:22] <dalek> rakudo: Add S14-traits/routines.t to spectest.data.

[14:22] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/21cbaefa689391a5ee6c383b4dc681cfec99afb5

[14:23] <moritz_> and since $/, $_ and $! are declared implicitly in each block, { $_ = 3} leaves the outer $_ unchanged

[14:24] <moritz_> rakudo: $_  = 4; { $_ = 8 }; .say

[14:24] <p6eval> rakudo 13ba2f: OUTPUT«8␤»

[14:24] *** KyleHa joined
[14:24] <moritz_> rakudo: $_  = 4; if 1 { $_ = 8 }; .say

[14:24] <p6eval> rakudo 13ba2f: OUTPUT«8␤»

[14:25] <moritz_> rakudo: $_  = 4; sub f  { $_ = 8 }; f();  .say

[14:25] <JimmyZ_> rakudo: say.^method.map({.name}).join(',');

[14:25] <p6eval> rakudo 13ba2f: OUTPUT«4␤»

[14:25] <p6eval> rakudo 13ba2f: OUTPUT«say requires an argument at line 2, near ".^method.m"␤in Main (src/gen_setting.pm:2467)␤»

[14:25] <JimmyZ_> rakudo: say.^method.join(',');

[14:25] <p6eval> rakudo 13ba2f: OUTPUT«say requires an argument at line 2, near ".^method.j"␤in Main (src/gen_setting.pm:2467)␤»

[14:25] <JimmyZ_> rakudo: say('ss').^method.join(',');

[14:25] <p6eval> rakudo 13ba2f: OUTPUT«ss␤Method 'method' not found for invocant of class 'ClassHOW'␤»

[14:26] *** JimmyZ_ is now known as Jimmy_

[14:27] <Jimmy_> .^method

[14:27] <Jimmy_> rakudo: .^method

[14:27] <p6eval> rakudo 13ba2f: OUTPUT«Method 'method' not found for invocant of class 'ClassHOW'␤»

[14:28] <Jimmy_> rakudo: $_ = 1; say .^method

[14:28] <p6eval> rakudo 13ba2f: OUTPUT«Method 'method' not found for invocant of class 'ClassHOW'␤»

[14:29] <jnthn> rakudo: $_ = 1; say .^methods

[14:29] <p6eval> rakudo 13ba2f:

[14:29] <p6eval> ..OUTPUT«predsuccWHICHACCEPTSperlScalarabsStrintcharsrootsucreversekeysisaucfirstsubstrfmtbytespickevalfilejointrimchrfloorrandtruncateroundsortrindexsqrtsplitmatchgrepwordsvaluescanlcfirstComplexsrandpolarmapciskvsamecaselogmincapitalizemaxtransfirstflipIntdoesp5choplcsubstabselemschompend…

[14:30] <pmichaud> (back to print)

[14:30] <pmichaud> consider the following from the view of the print function

[14:30] <Jimmy_> rakudo: $_ = 1; say .^methods

[14:30] <p6eval> rakudo 13ba2f:

[14:30] <p6eval> ..OUTPUT«absScalarStrpredsuccWHICHACCEPTSperlreducesrandtrimreverseisa:dpolar:eucfirst:frandtruncatefmtfirsttranssortsqrtgrepsubstelemschompucindexchrpairssamecasesubstrflipdoescharscanlcfirstrootsComplexmapciscomblogminmaxbyteschoprindexIntvaluesabsendceilingp5chompkeysunpolarkvfloorordcap…

[14:30] <pmichaud> print 'hello';   { my $OUT is context = open(...);   print "data to file\n"; }   print " world\n";

[14:31] <Jimmy_> say('ss').^methods.join(',');

[14:31] <Jimmy_> rakudo: say('ss').^methods.join(',');

[14:31] <p6eval> rakudo 13ba2f: OUTPUT«ss␤»

[14:32] <mikehh> oops - in my earlier posts I used r40377 instead of r40337 for parrot

[14:32] <pmichaud> the "prints" outside of the block see the global definition of $*OUT, so they send their output to the standard output.  The print inside the block sees the local definition of $*OUT, so sends its data to a file.

[14:32] *** nihiliad joined
[14:33] <moritz_> I understand that so far

[14:33] <Jimmy_> rakudo: say Any.^methods.join(',');

[14:33] <pmichaud> in the case of $_, its definition is more like

[14:33] <moritz_> but is it correct that each block has an implicit my $_ is context<rw> etc?

[14:33] <p6eval> rakudo 13ba2f:

[14:33] <p6eval> ..OUTPUT«1,1,uc,ceiling,p5chomp,unpolar,samecase,floor,1,ord,round,flip,1,does,split,1,words,srand,reverse,isa,1,ucfirst,comb,fmt,first,trans,chop,1,values,2,1,1,1,keys,chr,pairs,kv,capitalize,2,1,p5chop,lc,join,1,can,lcfirst,roots,1,reduce,trim,1,map,1,cis,1,1,min,rand,1,max,bytes,1,1,1,gr…

[14:33] <Jimmy_> what's 1? 

[14:34] <pmichaud> my $_ is context<rw> := OUTER::<$_>

[14:34] <Jimmy_> rakudo: say Any.^methods.perl

[14:34] <p6eval> rakudo 13ba2f: OUTPUT«[{ ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ...

[14:34] <p6eval> ..}, { …

[14:34] <pmichaud> Jimmy_: the "1" come from Parrot MultiSub objects, they stringify to the number of multis in the object.

[14:35] * pmichaud wonders if changing that in Parrot would require a deprecation cycle.

[14:36] <Jimmy_> Will '1' be removed?

[14:36] <Jimmy_> or 2

[14:36] <pmichaud> moritz_: so, since $_ is initially bound to OUTER::<$_>, changing the value of $_ in an inner block is actually changing its value in the outer block

[14:36] <moritz_> Jimmy_: at some point soemthing more informative will be printed

[14:37] <moritz_> rakudo: { 'a' ~~ /a/ }; say $/

[14:37] <pmichaud> Jimmy_: those will undoubtedly be converted into Perl6MultiSubs at some point (instead of Parrot MultiSubs), at which point they'll stringify properly to the name.

[14:37] <p6eval> rakudo 13ba2f: OUTPUT«Use of uninitialized value␤␤»

[14:37] <moritz_> pmichaud: is it different for $_ and $/?

[14:38] <pmichaud> currently a pattern match *binds* the value of $/, it doesn't assign to it

[14:38] <moritz_> oh.

[14:38] <moritz_> rakudo: { $/ = 'foo' }; say $/

[14:38] <p6eval> rakudo 13ba2f: OUTPUT«foo␤»

[14:38] <Jimmy_> pmichaud: thanks. that's good to expect.

[14:38] <moritz_> then rakudo seems sane here

[14:39] <pmichaud> I'm not entirely certain that binding is the correct behavior... but at some point I was led to believe that binding was correct.

[14:39] <moritz_> rakudo { $_ := 4 }; .say

[14:39] <moritz_> rakudo: { $_ := 4 }; .say

[14:39] <p6eval> rakudo 13ba2f: OUTPUT«Use of uninitialized value␤␤»

[14:40] <moritz_> rakudo++ # being consistent

[14:42] *** dukeleto joined
[14:42] <hah> rakudo: my $s = "ab"; $s ~~ /(a)/ and say ~$0; $s.match(/(b)/) and say ~$0;

[14:43] <p6eval> rakudo 13ba2f: OUTPUT«a␤a␤»

[14:43] <KyleHa> Hello #perl6!

[14:43] <Jimmy_> Hello KyleHa

[14:44] <Jimmy_> POD ERRORS at the end of http://perlcabal.org/syn/S32/Containers.html#Hash

[14:46] *** abra joined
[14:48] <pmichaud> hah: I'm guessing .match needs to set $/.  Right now we have ~~ doing it (which is likely wrong)

[14:57] *** Psyche^ joined
[14:57] *** Patterner left
[14:57] *** Psyche^ is now known as Patterner

[14:58] <PerlJam> good morning #perl6

[14:59] <pmichaud> Good morning, PerlJam

[14:59] *** SmokeMachine joined
[15:00] <pugs_svn> r27818 | kyle++ | [t/spec] eval_dies_ok was passing for the wrong reason

[15:02] *** molaf joined
[15:02] <PerlJam> pmichaud: I heard on the radio this morning that you're going to get (or already got) some nasty weather today.

[15:02] <pmichaud> already got

[15:02] <pmichaud> quite a lightning storm overnight

[15:04] <KyleHa> rakudo: sub foo { my $a = 5; say $^a; }; foo(3);

[15:04] <p6eval> rakudo 21cbae: OUTPUT«5␤»

[15:05] <KyleHa> Should that say 3 or just die?

[15:05] <pmichaud> should probably be a redeclaration error.

[15:05] <PerlJam> there should be a redeclaration warning there

[15:05] <pmichaud> 3 would definitely be wrong.

[15:05] <KyleHa> Right now "{$foo; $^foo}(1)" lives, but the spec test expects it to die.

[15:06] <KyleHa> So the definition of 'sub foo' up there should die too?

[15:06] <PerlJam> I think the spec test is wrong to expect death.

[15:06] <PerlJam> redeclarations should only die in the presence of "use fatal"

[15:06] <PerlJam> (or some such)

[15:08] <KyleHa> I turn to S06 for guidance.

[15:09] *** dukeleto left
[15:10] *** ruoso joined
[15:10] <KyleHa> S06 is silent on the matter, at least in the placeholder section I read.

[15:10] <moritz_> rakudo: {$foo; $^foo}(1)

[15:10] <p6eval> rakudo 21cbae:  ( no output )

[15:10] <moritz_> that one should die, IMHO

[15:10] <moritz_> KyleHa: ask p6l.

[15:11] <KyleHa> Good idea.  Thank you.

[15:11] <PerlJam> moritz_: why should it die?

[15:11] <moritz_> because $foo is not declared.

[15:11] <PerlJam> It should fail, certainly.  But not die.

[15:11] <moritz_> std: {$foo; $^foo}(1)

[15:11] <p6eval> std 27817: OUTPUT«Potential difficulties:␤  Variable $foo is not predeclared at /tmp/S0clLF1kP7 line 1:␤------> {$foo⏏; $^foo}(1)␤ok 00:02 37m␤»

[15:11] <moritz_> compile time error, even

[15:12] <moritz_> std: {$^foo; $foo}(1)

[15:12] <p6eval> std 27817: OUTPUT«ok 00:02 37m␤»

[15:12] <PerlJam> Hmm.  So blocks don't get the implicit signature until the placeholder is parsed?

[15:12] <moritz_> std: { $^foo; my $foo }

[15:12] <p6eval> std 27817: OUTPUT«Potential difficulties:␤  Useless redeclaration of lexical variable $foo at /tmp/n4g8hoV7fJ line 1:␤------> { $^foo; my ⏏$foo }␤ok 00:02 37m␤»

[15:12] <moritz_> PerlJam: once you mention $^foo, $foo is implicitly declared

[15:13] *** meppl joined
[15:13] *** bpetering left
[15:16] *** molaf left
[15:17] <PerlJam> moritz_: maybe the spec could be improved slightly by saying those exact words somewhere closer to the top of section on placeholders.

[15:17] *** zamolxes left
[15:17] <moritz_> PerlJam: feel free to add them

[15:18] *** jan joined
[15:18] *** jan is now known as Guest8577

[15:18] <moritz_> the spec is not a holy cow only to be touched by the sacred shepherds

[15:20] *** donaldh left
[15:20] <jnthn> .oO( where I come from the shepherds herd sheep ;-) )

[15:20] <PerlJam> heh

[15:20] *** donaldh joined
[15:20] <pmichaud> jnthn: traveling tomorrow?

[15:20] <jnthn> pmichaud: Yes

[15:20] <jnthn> pmichaud: Night.

[15:21] <pmichaud> Me too.  All day.

[15:21] <pmichaud> as in *all day*

[15:21] <jnthn> well, you have got a little further to come ;-)

[15:21] <moritz_> pre-yapc?

[15:21] <PerlJam> YAPC::EU?

[15:21] <jnthn> Yes.

[15:21] <Jimmy_> rukudo: use v5; say 'hello';

[15:21] <Jimmy_> rakudo: use v5; say 'hello';

[15:22] <p6eval> rakudo 21cbae: OUTPUT«Can't find ./v5 in @*INC␤in Main (src/gen_setting.pm:445)␤»

[15:22] <moritz_> v5.pm is going to be a curious module.

[15:22] <jnthn> pmichaud: Where are you staying?

[15:22] * jnthn is at Hotel Alif

[15:26] <Jimmy_> rakudo: say rand

[15:26] <p6eval> rakudo 21cbae: OUTPUT«0.148975009172322␤»

[15:27] <BinGOs> He is at the Radisson SAS according to http://yapceurope2009.org/ye2009/wiki?node=WhoIsStayingWhere

[15:27] <jnthn> ah, ok

[15:27] <jnthn> Fancy! ;-)

[15:28] *** unitxt joined
[15:28] <BinGOs> I booked there because the Alif was supposedly full.

[15:29] <BinGOs> It appears to be the 'official' Birmingham.pm hotel as well >:)

[15:29] *** justatheory joined
[15:30] <pmichaud> also, the Radisson appears to be much closer to the venue :-)

[15:30] <pmichaud> (I booked there because the Alif was full also)

[15:31] <jnthn> pmichaud: I expect I'll spend Saturday looking around Lisbon a bit.

[15:31] <jnthn> pmichaud: I guess you'll spend some of it asleep. ;-)

[15:31] <pmichaud> jnthn: perhaps.  I'm thinking about crashing szagab's Perl 6 training course, though :-)

[15:32] <jnthn> Ah, that's on Sat?

[15:32] <jnthn> OK. :-)

[15:32] <pmichaud> Sat + Sun, I think.

[15:32] <pmichaud> I'm eager to see how much NQP+PGE work I can get done tomorrow, too.  I have a *long* layover in Newark.

[15:33] <pmichaud> and the Newark->Lisbon flight is powered.

[15:33] <jnthn> Did you manage any so far this week, or too many @distraction?

[15:33] <pmichaud> I did some planning, but not coding yet.  A few @distractions.

[15:33] <pmichaud> Also I've been working on getting the "make install" stuff in place.

[15:33] <jnthn> *nod*

[15:34] <jnthn> Planning is good.

[15:34] <moritz_> pmichaud: it seems that the sun compiler issue is not ins2-related

[15:34] <pmichaud> moritz_: there are a couple of sun compiler issues.

[15:34] <moritz_> I can take a look at updating the instructions in README in the ins2 branch, if that would be any help

[15:35] <pmichaud> that would be a big help, yes.

[15:35] <pmichaud> I'm trying to decide when I should merge ins2 to master.

[15:35] <moritz_> merge early, merge often :-)

[15:35] <moritz_> it's the only way to get some serious testing

[15:35] <pmichaud> well, this merge has the potential to change the way people have been working

[15:36] <PerlJam> change how?

[15:36] <pmichaud> well, it would no longer be running from the parrot/ subdir

[15:38] <pmichaud> the basic instructions remain the same  "perl Configure.pl --gen-parrot"

[15:38] <pmichaud> but if you're used to doing "rm -rf parrot/"  to get rid of the current copy of parrot, that's no longer the case.

[15:38] <moritz_> where does --gen-parrot install to?

[15:38] <pmichaud> parrot_install

[15:39] <PerlJam> Given that we're all early adopters I don't think most people will mind change too much as long as they're given a heads-up on it.  :)

[15:39] <moritz_> proto might have to change

[15:39] <moritz_> but if you buy masak++ a beer at yapc he'll forgive you :-)

[15:39] <jnthn> pmichaud: So we'll just build with --gen-parrot, and get a Parrot tree somewhere, and then an install tree somewhere?

[15:39] <pmichaud> jnthn:  yes

[15:39] <pmichaud> parrot tree is ./parrot

[15:39] <pmichaud> install tree is ./parrot_install

[15:40] <jnthn> Right, so I'd still have a Parrot tree I can work against if need be.

[15:40] <pmichaud> yes.

[15:40] <jnthn> Just need to make sure I make install to see the changes in Rakudo?

[15:40] <jnthn> Rather than just make?

[15:40] <pmichaud> but you have to be sure to do "make install-dev"

[15:40] <jnthn> ah, install*-dev*.

[15:40] <moritz_> then the new invocation is just 'rm -rf parrot parrot_install'

[15:40] <jnthn> OK.

[15:41] <jnthn> But anyway, sounds fine to me.

[15:42] <pmichaud> okay.  I may do the merge after lunch then.

[15:42] <pmichaud> (in about 2 hrs)

[15:42] <jnthn> ok

[15:50] *** kst left
[15:51] <KyleHa> Hey, I think I made it past the half way point on my list of tickets!

[15:52] <KyleHa> Of course, my list is out of date...

[15:52] <KyleHa> ...and I've skipped more than a couple due to various inadequacies.

[15:52] <KyleHa> Still, I'm pretty happy.

[15:55] *** SmokeMachine left
[15:59] * moritz_ is pretty happy about that too

[15:59] *** ejs1 joined
[15:59] *** dukeleto joined
[16:00] <KyleHa> Rt 64574 has a patch that can't be applied anymore.

[16:00] <pmichaud> std:  { my $a;  say $^a; }

[16:00] <p6eval> std 27818: OUTPUT«Potential difficulties:␤  Useless redeclaration of lexical variable $a at /tmp/2kV47jatWr line 1:␤------> { my $a;  say ⏏$^a; }␤ok 00:02 37m␤»

[16:03] *** cliffclark joined
[16:05] *** clintongormley1 joined
[16:09] *** ejs left
[16:17] *** clintongormley left
[16:17] *** payload joined
[16:18] *** abra left
[16:19] *** kst joined
[16:19] *** zamolxes joined
[16:19] *** abra joined
[16:20] *** dakkar left
[16:21] *** cliffclark left
[16:25] <Jimmy_> rakudo: audience

[16:25] <p6eval> rakudo 21cbae: OUTPUT«Could not find non-existent sub audience␤»

[16:25] <Jimmy_> rakudo: { my $a; say $^a; }

[16:25] <p6eval> rakudo 21cbae: OUTPUT«Use of uninitialized value␤␤»

[16:27] <Jimmy_> rakudo: { my $a; say $a; }

[16:27] <p6eval> rakudo 21cbae: OUTPUT«Use of uninitialized value␤␤»

[16:27] <Jimmy_> rakudo: my $a; say $a; 

[16:27] <p6eval> rakudo 21cbae: OUTPUT«Use of uninitialized value␤␤»

[16:27] *** Jimmy_ left
[16:28] *** cclark joined
[16:30] *** cclark left
[16:31] *** cclark joined
[16:34] *** abra left
[16:35] *** abra joined
[16:36] *** ejs1 left
[16:46] *** cdarroch joined
[17:03] <KyleHa> I just dropped my CLA in the mail to TPF.  Off to lunch.

[17:08] *** ruoso left
[17:10] *** SmokeMachine joined
[17:10] *** charsbar_ left
[17:10] *** lumi_ joined
[17:12] *** charsbar joined
[17:19] *** lumi left
[17:20] *** fridim_ left
[17:31] *** meppl left
[17:35] *** lumi joined
[17:40] *** lumi left
[17:42] *** lumi joined
[17:44] *** icwiener joined
[17:52] *** icwiener_ joined
[17:53] *** cclark left
[17:58] *** lumi_ left
[18:00] *** ivast joined
[18:00] *** lumi left
[18:01] *** sciart joined
[18:01] *** molaf joined
[18:04] *** icwiener left
[18:13] *** icwiener_ left
[18:14] *** jauaor joined
[18:14] *** lumi joined
[18:15] *** jauaor left
[18:15] *** meppl joined
[18:18] *** jauaor joined
[18:23] *** Guest8577 left
[18:27] <dalek> grok: 4c37cca | (Hinrik Örn Sigurðsson)++ |  (2 files):

[18:27] <dalek> grok: Assume Pod 6 is in UTF-8

[18:27] <dalek> grok: review: http://github.com/hinrik/grok/commit/4c37cca73b3647e70cf9edc47c9d6b66eec2f3f9

[18:27] <dalek> grok: 873b563 | (Hinrik Örn Sigurðsson)++ |  (2 files):

[18:27] <dalek> grok: Update to match Perl6-Doc 0.44

[18:27] <dalek> grok: review: http://github.com/hinrik/grok/commit/873b56301ebf5eb0d8082a19a6fba2c983051d52

[18:38] <KyleHa> perl6: class D is ::C {};

[18:38] <p6eval> rakudo 21cbae: OUTPUT«Null PMC access in isa()␤in Main (/tmp/pbFtLIvemS:2)␤»

[18:38] <p6eval> ..pugs:  ( no output )

[18:38] <p6eval> ..elf 27818: OUTPUT«Parse error in: /tmp/YgIJ3Xkn7U␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: class D is ::C {};␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[18:38] <p6eval> ..STD_red/std.rb:210:…

[18:40] <KyleHa> std: class D is ::C {};

[18:40] <p6eval> std 27818: OUTPUT«ok 00:02 36m␤»

[18:41] <KyleHa> Really?  Is that legal?  Is there something implied to be on the left of the :: there?

[18:43] <literal> maybe to disambiguate in case you have: class C { }; class B { class C { }; class D is ::C {}; }

[18:43] <literal> or something

[18:44] *** abra left
[18:44] <jnthn> Generally, writing ::C introduces a new type.

[18:44] <jnthn> Apart from...it doesn't actually get bound anything.

[18:45] <KyleHa> So by saying that, it's introducing a new type that could be defined/declared later?

[18:45] <KyleHa> I just want to know if it's supposed to live or die so I can test it.  8-)

[18:46] <jnthn> Yeah, but your later declaration would I guess we too late.

[18:46] <jnthn> erm, definition.

[18:46] *** kane_ joined
[18:46] <KyleHa> Right now Rakudo gives a NPMCA, so I know it's wrong...

[18:46] <PerlJam> KyleHa: see S02:1620

[18:46] <KyleHa> Perljam: Will do, thanks.

[18:47] <jnthn> Aye, I suspect in this case it should give a "WTF are you doing?" error. :-)

[18:47] <PerlJam> I don't know if that helps though :)

[18:47] <PerlJam> Well, read S02 anyway :)

[18:48] <KyleHa> I think I'll leave it as 'dies'.

[18:48] <jnthn> Or perhaps nicer is a "trying to inherit from a non-existent class" or something.

[18:49] <PerlJam> jnthn: if that type had been bound earlier, would it have worked properly?  :)

[18:49] <jnthn> PerlJam: Sure, but then you'd have just written the type name, not a binding, I guess.

[18:50] <jnthn> Consider sub foo(T $x) { } and sub foo(::T $x) { }

[18:50] <PerlJam> oh, right.

[18:51] <PerlJam> yeah, a WTF error seems appropriate for class Foo is ::Bar;

[18:51] <jnthn> As a general note, also remember that STD checks syntax, not semantics, genreally.

[18:51] <jnthn> So while it may say "yes I can parse class Foo is ::Bar", it may later say "huh, no" in a semantic check.

[18:52] <jnthn> (In a compiler rather than just a parser)

[18:52] <KyleHa> Right.  I figured if it barfed, I'd know 'dies' is right, but it didn't, so I was still unsure.

[18:53] <pugs_svn> r27819 | kyle++ | [t/spec] Test for RT #64642

[18:55] * jnthn -> food

[18:58] * PerlJam munches on some pecans

[19:19] *** sciart left
[19:20] *** donaldh left
[19:20] *** donaldh joined
[19:22] <pugs_svn> r27820 | kyle++ | [t/spec] Tests for RT #64688

[19:24] *** hah left
[19:38] *** M_o_C joined
[19:38] *** sciart joined
[19:39] *** molaf left
[19:40] *** molaf joined
[20:12] <pugs_svn> r27821 | moritz++ | [t/spec] unfudge three passing tests for rakudo

[20:20] *** japhb left
[20:23] *** hanekomu joined
[20:31] *** hanekomu left
[20:31] *** lumi left
[20:46] *** sciart left
[20:48] *** payload left
[20:52] *** desertm4x left
[20:52] *** jevin joined
[21:00] *** KyleHa left
[21:01] *** lumi joined
[21:05] *** jferrero joined
[21:07] *** masak joined
[21:07] <masak> oh hai from Lisbon!

[21:07] <moritz_> oh hai to lisbon!

[21:07] <masak> \o/

[21:08] <masak> I've just witnessed the quickest sunset in my life.

[21:08] <masak> they've apparently optimised the process here in the south.

[21:08] <moritz_> never been that far south before?

[21:09] <masak> well yes, but never in the evening :)

[21:10] <pmichaud> I'll be heading to lisbon tomorrow.  Will arrive on Sat.

[21:11] <moritz_> I can very much recommend to get a git-svn copy of the parrt repo first ;-)

[21:11] <pmichaud> oooh, maybe I should figure out how to do that, yes.

[21:11] <pmichaud> it would be easier to work from git than svn.

[21:12] <jnthn> masak: Ooh, I'm heading there tomorrow night. ;-)

[21:12] <pmurias> moritz_: there's no wi-fi in lisbon? ;)

[21:12] <moritz_> much easier offline, right

[21:12] <masak> this place has a lot of emotion, compared to Sweden.

[21:12] <moritz_> pmurias: there'll be no on the flight, I guess

[21:12] <masak> both happiness and some sadness.

[21:12] <pmichaud> especially since I hope to be able to do lots of new stuff while in transit.

[21:12] <pmichaud> it would be nice to create branches quickly.

[21:12] <pmichaud> and do intermediate commits.

[21:12] <jnthn> masak: Well, Sweden always feels to me like this amazing picture of calm. :-)

[21:12] <moritz_> pmichaud: I can give you a copy with complete history, that's much faster to copy than to check it out yourself

[21:13] <masak> jnthn: we're calm, because our default reaction is stalling. :)

[21:13] <pmichaud> right now my notebook is busy installing a vm copy of fedora11

[21:13] *** ivast left
[21:13] <pmichaud> oh, wait, I can do it

[21:13] <moritz_> I'll need a few minutes to upload it anyway

[21:13] <pmichaud> okay

[21:13] <pmichaud> is it just "git-clone", or do I do something else?

[21:13] <moritz_> I'll give you a tar ball

[21:14] <moritz_> because I'd have to publish all branches manually

[21:14] <pmichaud> right.

[21:14] <moritz_> to make them available to a git-clone

[21:14] <moritz_> which kinda sucks

[21:14] <pmichaud> tarball should be fine

[21:14] *** payload joined
[21:15] <pmichaud> (ugh, setting up a fedora box is just as painful as I remember it being a couple of years ago)

[21:16] <masak> is it a good idea to set the computer clock to the local timezone?

[21:17] <pmichaud> I never seem to run into problems with it.

[21:17] * masak sets

[21:18] <pmichaud> For server boxes I tend to make the hardware clock be UTC.  

[21:18] <moritz_> I do that for my home boxes too

[21:18] *** clintongormley1 left
[21:18] <pmichaud> For my desktop/notebook boxes I just follow the defaults.

[21:18] <moritz_> but I do set the timezone to $here

[21:18] <pmichaud> (setting the timezone to the appropriate place)

[21:18] <masak> hour--

[21:19] <moritz_> is Lisbon in GMT + 1 hour DST right now?

[21:19] <mikehh> rakudo (279abf9) builds on parrot r40348 - make test PASS/ make spectest (up to 27821) same two tests FAIL - Ubuntu 9.04 amd64

[21:19] <mikehh> t/spec/S12-enums/basic.rakudo - Parse errors: Bad plan.  You planned 30 tests but ran 28 - fails with Method 'Num' not found for invocant of class ''

[21:19] <mikehh> t/spec/S12-introspection/walk.t - Parse errors: Bad plan.  You planned 10 tests but ran 4. - fails with Parameter type check failed; expected Any, but got Object for $class in call to block_86 (+ backtrace)

[21:19] <pmichaud> google says that current lisbon time is 22:19

[21:19] <pmichaud> so that's GMT + 1

[21:20] <jnthn> Lisbon is afaik same time zone as UK

[21:20] <mikehh> me time(zone) as where I am - Aberdeen, Scotland

[21:20] <masak> jnthn: yes, seems so.

[21:20] <jnthn> So 1 hour different from much of the rest of western/central Europe.

[21:21] <mikehh> that should have been same

[21:21] <pmichaud> google says current time in uk is 22:20

[21:21] <moritz_> auld Aberdeen - it's been quite some time since I last saw that...

[21:22] * pmichaud mentally notes that Lisbon is +6h from Dallas, for reference when calling home

[21:22] <mikehh> been here (mostly) for the last 4 years

[21:23] <moritz_> it's there that I heard some of the most incomprehensible "English" ever ;-)

[21:24] <mikehh> dunno - I was in Glasgow for about 6 months in 2001

[21:30] *** M_o_C left
[21:32] *** molaf left
[21:37] *** SmokeMachine left
[21:38] *** maja left
[21:39] <masak> for some reason, I kinda like this comment: http://use.perl.org/comments.pl?sid=43492&cid=69796

[21:39] <masak> if for nothing else, slanning is very honest about his reaction to seeing Perl 6 code. :)

[21:42] *** alester left
[21:43] *** maja joined
[21:46] *** Whiteknight joined
[21:53] *** iblechbot left
[21:53] *** japhb joined
[21:57] <payload> masak: line 5 in this gist http://gist.github.com/158336      could be also      when / ...... / {

[21:59] *** pmurias left
[22:00] <masak> payload: yes, sure.

[22:00] <masak> but for various small reasons, I'd stick with 'if'.

[22:01] <masak> I also think that in real Perl 6.0.0, the '$_ ~~' shouldn't be needed in the 'if' test.

[22:01] <masak> just that Rakudo doesn't implement that yet.

[22:01] <moritz_> that's wrong.

[22:01] <masak> oh!

[22:02] <masak> I feel I'm about to learn something.

[22:02] <moritz_> 'when' implies smart matching. I've never read that 'if' does the same

[22:02] <payload> ^^

[22:02] <masak> moritz_: regexes in bool context auto-match against $_ ...

[22:02] <masak> I vividly recall discussing that with pmichaud.

[22:03] <masak> it's really useful in 'grep' blocks, for example.

[22:04] <moritz_> yes, but that's not related to 'if' any way

[22:04] <moritz_> afaict

[22:04] <masak> both induce bool contexts.

[22:05] *** dukeleto_ joined
[22:05] <moritz_> yes

[22:05] <masak> hm, t/spec/S32-list/grep.t doesn't seem to prove my point.

[22:05] <moritz_> but  if 'foo' { say "bar" } always says bar, not only if $_ is also 'foo'

[22:05] *** dukeleto_ left
[22:05] *** dukeleto left
[22:06] *** gbacon left
[22:06] <masak> neither does t/spec/S04-statements/if.t, it seems...

[22:06] <masak> moritz_: nono, what I'm talking about just goes for boolified regexes.

[22:07] <masak> when regexes boolify, they match against $_

[22:07] <moritz_> pmichaud: http://moritz.faui2k3.org/tmp/parrot-all-r40349.tar.gz is the parrot git-svn tar ball

[22:07] <payload> rakudo: $_ = 4; say( /4/ ?? True !! False ); $_ = 2; say( /4/ ?? True !! False )

[22:07] <p6eval> rakudo 21cbae: OUTPUT«1␤0␤»

[22:07] <masak> there, it works, for some reason.

[22:07] <masak> in my script, it didn't.

[22:07] <moritz_> don't you have the regex in $_?

[22:07] <masak> no.

[22:08] <masak> I have a line of input in $_.

[22:08] <moritz_> maybe there's a difference between regex objects, and /.../ or m/.../ objects

[22:08] <moritz_> s/objects/constructs/

[22:08] <masak> that might be it.

[22:09] <moritz_> rakudo: $_ = 4; my $r = rx/3/; say ?$r

[22:09] <p6eval> rakudo 21cbae: OUTPUT«0␤»

[22:09] <masak> rakudo: m/^/

[22:09] <p6eval> rakudo 21cbae:  ( no output )

[22:09] <masak> moritz_: overall, Rakudo seems to conform to the behaviour I'm decribing.

[22:10] <masak> but not in the particular case of my script.

[22:10] <masak> rakudo: for $*IN.lines() { say .substr(0,1) }

[22:10] *** wero joined
[22:10] <p6eval> rakudo 21cbae: OUTPUT«L␤L␤L␤H␤V␤v␤v␤␤H␤l␤e␤H␤h␤v␤v␤␤M␤f␤a␤E␤V␤v␤v␤»

[22:10] *** wero left
[22:10] <moritz_> say $*IN.lines>>.subst(0,1)

[22:11] <moritz_> say $*IN.lines>>.substr(0,1)

[22:11] <masak> rakudo: for $*IN.lines() { if /^[L|a]/ { say .substr(0,1) } }

[22:11] <moritz_> rakudo: say $*IN.lines>>.substr(0,1)

[22:11] <moritz_> ETOOLATE

[22:11] <p6eval> rakudo 21cbae: OUTPUT«L␤L␤L␤a␤»

[22:11] <p6eval> rakudo 21cbae: OUTPUT«LLLHVvvHleHhvvMfaEVvv␤»

[22:11] <masak> rakudo: say $*IN.lines>>.substr(0,1)>>.sort

[22:11] <p6eval> rakudo 21cbae: OUTPUT«LLLHVvvHleHhvvMfaEVvv␤»

[22:11] <moritz_> try .sort

[22:11] <masak> hm.

[22:11] <masak> ah.

[22:12] <masak> rakudo: say $*IN.lines>>.substr(0,1).sort

[22:12] <p6eval> rakudo 21cbae: OUTPUT«EHHHLLLMVVaefhlvvvvvv␤»

[22:12] <masak> too much >>

[22:13] <masak> I think I'll go find a shower now. you guys take care.

[22:13] *** masak left
[22:13] *** gbacon joined
[22:15] <payload> rakudo: my $n = 0; for $*IN.lines() { if /L/ { $n++ } }; say $n

[22:15] <p6eval> rakudo 21cbae: OUTPUT«4␤»

[22:16] *** ivast joined
[22:16] *** lumi left
[22:21] *** donaldh_ joined
[22:30] *** nihiliad left
[22:36] *** lumi joined
[22:49] *** hoelzro left
[22:51] *** Limbic_Region joined
[22:56] *** donaldh_ left
[23:06] <jnthn> Is method postcircumfix:<[ ]>(*@@slice --> T) { ... } the correct sig?

[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:22] *** sri_kraih left
[23:24] *** dukeleto joined
[23:27] *** eternaleye left
[23:29] *** ivast left
[23:30] *** meppl left
[23:31] <literal> what is T ?

[23:35] *** dukeleto_ joined
[23:37] *** ihrd joined
[23:42] *** dukeleto left
[23:48] <[particle]> pmichaud: what's wrong with using the full 8 digit date?

[23:48] <pmichaud> it's a bit more detail than I'd like.

[23:49] <pmichaud> We could do that.  Feel free to propose it on the list :-)

[23:49] <dalek> rakudo: a53a1cd | pmichaud++ | docs/spectest-progress.csv:

[23:49] <dalek> rakudo: spectest-progress.csv update: 423 files, 12114 passing, 8 failing

[23:49] <dalek> rakudo: Failure summary:

[23:49] <dalek> rakudo:     S12-enums/basic.rakudo aborted 2 test(s)

[23:49] <dalek> rakudo:     S12-introspection/walk.t aborted 6 test(s)

[23:49] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a53a1cdc8cb02da32b00e9e86b5f34929d32a2b2

