[00:03] <skids> std: my @a; @a = do for 1..3 { 1;}; @a.perl.say

[00:03] <p6eval> std 26342: OUTPUT«ok 00:02 35m␤»

[00:03] *** DemoFreak left
[00:03] <skids> rakudo: my @a; @a = do for 1..3 { 1;}; @a.perl.say

[00:03] <p6eval> rakudo cea34f: OUTPUT«[Perl6Iterator.new()]␤»

[00:04] <skids> rakudo: my $a; $a = do for 1..3 { 1;}; $a.perl.say; $a.get.say;

[00:04] <p6eval> rakudo cea34f: OUTPUT«Perl6Iterator.new()␤Could not locate a method 'get' to invoke on class 'Perl6Iterator'.␤current instr.: 'die' pc 17453 (src/builtins/control.pir:225)␤»

[00:05] *** FurnaceBoy joined
[00:06] <skids> rakudo: my @a; @a = do for 1..3 { 1;}; @a.perl.say; @a[0].say

[00:06] <p6eval> rakudo cea34f: OUTPUT«[Perl6Iterator.new()]␤-1␤»

[00:06] <skids> (which comes from a stopped iterator, I know because in my own tree I have $a.get implemented)

[00:07] <skids> So if the Iterator stopped, where'd the data it produced go to?

[00:12] *** jferrero left
[00:21] *** bacek_ joined
[00:24] * skids ponders .iterator versus .Iterator

[00:31] *** ZuLuuuuuu left
[00:34] *** hudnix joined
[00:36] *** japhb left
[00:36] <hudnix> perl6: if(1) {say "hello";}

[00:37] <p6eval> rakudo cea34f: OUTPUT«Statement not terminated properly at line 1, near "{say \"hell"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[00:37] <p6eval> ..pugs: OUTPUT«hello␤»

[00:37] <p6eval> ..elf 26342: OUTPUT«Parse error in: /tmp/BpPKUqa7Bi␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: if(1) {say "hello";}␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[00:37] <p6eval> ..STD_red/std.rb:...

[00:38] <hudnix> rakudo: if(1) {say "hello";}

[00:39] <p6eval> rakudo cea34f: OUTPUT«Statement not terminated properly at line 1, near "{say \"hell"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[00:39] <hudnix> rakudo doesn't even have "if" yet? or has the syntax changed?

[00:39] *** orafu left
[00:40] <mikehh> hudnix: yes

[00:40] <hudnix> yes to which? :)

[00:40] <skids> ditch the parens

[00:41] <hudnix> rakudo: if 1 {say "hello"}

[00:41] <p6eval> rakudo cea34f: OUTPUT«hello␤»

[00:41] <hudnix> ah ok

[00:42] *** orafu joined
[00:43] <skids> (actually you can use the parens, but you'd be asking for the truth value of a "list 1" not of "1" -- it's the lack of space after "if" that really killed your first try.

[00:51] *** frew|wor1 joined
[00:56] *** scook0 joined
[01:13] *** kimtaro joined
[01:19] *** awarefish joined
[01:26] *** wayland joined
[01:26] *** meppl joined
[01:30] <s1n> hudnix: if(1) is a method call, you'll either need a space before the () or remove them altogether

[01:30] *** kimtaro left
[01:30] *** awarefish left
[01:32] *** awarefish joined
[01:33] *** ispy_1 joined
[01:34] *** ispy_ left
[01:35] *** orafu left
[01:35] *** orafu joined
[01:37] *** wayland76 left
[01:39] *** ispy_ joined
[01:39] *** ispy_1 left
[01:45] *** ispy_1 joined
[01:45] *** ispy_ left
[01:50] *** LimbicRegion joined
[01:51] *** awarefish left
[01:53] *** agentzh left
[01:54] *** agentzh joined
[01:54] *** kimtaro joined
[02:01] *** cspencer joined
[02:01] <cspencer> good evening all

[02:05] <skids> oh hai

[02:06] *** Whiteknight left
[02:14] *** Kisu joined
[02:14] *** Limbic_Region left
[02:14] *** LimbicRegion is now known as Limbic_Region

[02:16] *** nsh left
[02:19] *** fridim_ left
[02:23] *** nbrown left
[02:23] *** nbrown joined
[02:27] *** lumi joined
[02:27] *** FurnaceBoy left
[02:27] *** cspencer_ joined
[02:33] *** cspencer left
[02:35] *** cdarroch left
[02:38] *** ispy_1 left
[02:43] *** coppro joined
[02:46] <coppro> I'm sure you've heard this a lot, and I apologise for being a broken record, but is there a link to a development roadmap or the like somewhere?

[02:48] <cspencer_> there should be one distributed in the docs/ directory

[02:48] <cspencer_> though i'm not sure of how often it's updated

[02:48] <cspencer_> http://github.com/rakudo/rakudo/blob/cea34fd87f5d302bbe3a7fc78c08b9cbe9caf436/docs/ROADMAP

[02:50] *** alanhaggai joined
[02:51] <wayland> Not very often.  It says it was in August last year, but I think they actually updated it in November

[02:52] <wayland> But most of the stuff in section 1 hasn't been completed (with the exception that we've got the beginning of the Setting, which they called the Prelude back then)

[02:52] <coppro> Ah

[02:53] <coppro> What about Parrot?

[02:53] <wayland> Parrot's a different kettle of fish :)

[02:53] <wayland> They're already at version 1.0

[02:53] <wayland> And while work continues they have a recent ROADMAP somewhere

[02:56] <wayland> Don't get the impression that there's no progress on Rakudo, though

[02:56] <coppro> yeah, I don't

[02:56] <wayland> They've been getting a fair bit done, but not following the ROADMAP

[02:56] <coppro> Although I'm a bit confused how the eventual deployment of Perl 6 is going to go

[02:56] *** eternaleye joined
[02:56] <coppro> Pugs => initial Perl 6 => runs on Parrot => Rakudo => self-boostraps?

[02:57] <wayland> Pugs is mothballed

[02:57] <coppro> oh

[02:57] <wayland> Rakudo = Perl6 on Parrot

[02:57] <coppro> yeah

[02:57] <cspencer_> coppro: there're multiple implementations of perl6 in various states of completion

[02:57] <wayland> But Perl6 is a spec, and Rakudo is an implementation of that spec

[02:57] <coppro> right

[02:57] <wayland> SMOP is another one

[02:58] <coppro> What's Rakudo written in?

[02:58] <skids> PIR

[02:58] <cspencer_> PIR and some Perl 6

[02:58] <wayland> SMOP is in C, and is intended to integrate well with Perl5

[02:58] <coppro> ah, I get it now, you're writing directly in Parrot

[02:58] <coppro> okay

[02:58] <wayland> But also Perl6 now

[02:59] <wayland> They've got to the point where parts of Perl6 can be implemented in Perl6

[02:59] <cspencer_> and writing perl6 in perl6 is so much nicer than PIR

[02:59] <wayland> That's called the Setting

[02:59] <cspencer_> :)

[02:59] <wayland> Parrot Roadmap: https://trac.parrot.org/parrot/wiki/ParrotRoadmap

[02:59] <skids> Also as Parrot adds stuff the PIR becomes smaller, because there are more features to use.

[02:59] <coppro> neat

[02:59] <coppro> anyways, I have to go, but thanks!

[02:59] <wayland> ok :)

[02:59] <wayland> bye

[03:00] <skids> Eventually, rakudo will also integrate STD.pm, which is the self-parsing grammar, and is both a standard and code. 

[03:01] <coppro> my head is starting to spin

[03:01] *** coppro left
[03:01] * skids remonds self not to scare newbies with acronyms

[03:01] *** silug joined
[03:01] *** meppuru joined
[03:06] *** Limbic_Region left
[03:09] *** alanhaggai left
[03:17] *** meppl left
[03:27] *** japhb joined
[03:28] *** alanhaggai joined
[03:30] <wayland> skids: remond yourself all you want, but don't redmond yourself :)

[03:33] *** nbrown left
[03:36] *** perlooooooooo joined
[03:36] <perlooooooooo> helllo

[03:36] *** agentzh left
[03:37] <perlooooooooo> i am trying to develop a email extractor and i get an odd error

[03:37] <perlooooooooo> can anyone help me?

[03:43] *** orafu left
[03:43] *** orafu joined
[03:43] <skids> in perl6?

[03:44] *** justatheory left
[03:44] <skids> wayland: I never redmond anything :-)

[03:57] <wayland> skids: Me either, if I can help it.  

[03:59] *** MrKrueger joined
[04:03] <perlooooooooo> thank you guys

[04:04] <perlooooooooo> do you want to see my code?

[04:06] <wayland> perlooooooooo: Yes, but in a pastebin.

[04:06] <wayland> http://sial.org/pbot/perl6

[04:06] <perlooooooooo> ok

[04:06] <wayland> Got to that website, and paste your code in.  A message should automatically appear in this channel saying that it's there

[04:08] <perlooooooooo> http://pastebin.com/m6e6b4bb1

[04:08] <buubot> perlooooooooo: The paste m6e6b4bb1 has been copied to http://erxz.com/pb/17149

[04:08] <perlooooooooo> so 

[04:08] <perlooooooooo> i have a function that should extcrat all the first email of a url from craiglist

[04:08] <c9s> oooooooooo

[04:09] <perlooooooooo> when i dont use it as a function it works perfectly

[04:09] <perlooooooooo> i dont undestand where is the problem

[04:15] *** meppuru left
[04:17] <perlooooooooo> Missing base argument at /usr/local/share/perl/5.8.8/HTTP/Response.pm line 91

[04:17] <perlooooooooo> i have this error 

[04:17] <perlooooooooo> Missing base argument at /usr/local/share/perl/5.8.8/HTTP/Response.pm line 91

[04:18] <perlooooooooo> what is it?

[04:18] <perlooooooooo> pleaaaaaaaaase

[04:21] *** frew|wor1 left
[04:26] <skids> I haven't worked with HTTP:: in quite some time.

[04:26] <skids> there would be more people who work with it on the main perl channel.

[04:26] <wayland> perlooooooooo: Note that this is a Perl 5 problem.  If you join #perl, I'll try to help you there.  

[04:27] <perlooooooooo> ok

[04:27] <wayland> This is a channel for Perl 6, not perl 5 :)

[04:27] <perlooooooooo> thanks

[04:27] *** eternaleye_ joined
[04:31] *** cspencer_ left
[04:39] *** perlooooooooo left
[04:41] <wayland> Turns out perloooooo was probably a spammer.  No more help for him.

[04:42] *** wayland is now known as wayland76

[04:47] *** MrKrueger left
[04:55] *** eternaleye left
[04:56] *** agentzh joined
[05:12] *** payload joined
[05:13] *** ticos joined
[05:17] *** PZt joined
[05:18] *** skids left
[05:18] *** ezeki3l left
[05:24] *** meppl joined
[05:29] <wayland76> moritz_++ # ARGH e-mail :)

[05:30] *** justatheory joined
[05:36] *** justatheory left
[05:41] *** eternaleye_ is now known as eternaleye

[05:45] *** andreas12345647 joined
[05:46] *** andreas12345647 left
[05:46] *** aff joined
[06:02] *** awwaiid left
[06:20] *** DemoFreak joined
[06:32] *** ticos left
[06:34] <moritz_> ;)

[06:34] <pugs_svn> r26343 | moritz++ | [t/spec] fix some svn props

[06:44] *** amoc joined
[06:50] *** ejs joined
[06:52] *** kimtaro left
[06:52] *** ejs left
[06:53] *** ejs joined
[06:53] *** iblechbot joined
[06:57] *** ejs left
[06:57] *** ejs joined
[07:04] *** cj left
[07:07] *** cj joined
[07:11] *** payload left
[07:21] <Matt-W> Morning

[07:30] *** payload joined
[07:32] <wayland76> Not here it's not :)

[07:33] <wayland76> rakudo: sub judge { rand > 0.5 ? "guilty" : "not guilty"; }; say judge, "have you seen my toothbrush";

[07:33] <p6eval> rakudo cea34f: OUTPUT«Statement not terminated properly at line 1, near "? \"guilty\""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[07:34] <wayland76> rakudo: sub judge { rand > 0.5 ?? "guilty" :: "not guilty"; }; say judge, "have you seen my toothbrush";

[07:34] <p6eval> rakudo cea34f: OUTPUT«ResizablePMCArray: Can't pop from an empty array!␤current instr.: 'parrot;PGE;OPTable;parse' pc 1809 (compilers/pge/PGE/OPTable.pir:504)␤»

[07:34] <wayland76> That looks like a bug.  Is it a known bug?

[07:35] <moritz_> I think so

[07:35] <moritz_> it should complain about :: vs. !!

[07:46] *** charsbar joined
[07:48] <wayland76> rakudo: sub judge { rand > 0.5 ?? "guilty" !! "not guilty"; }; say judge, "have you seen my toothbrush";

[07:48] <p6eval> rakudo cea34f: OUTPUT«guiltyhave you seen my toothbrush␤»

[07:49] <wayland76> rakudo: sub judge { rand > 0.5 ?? "guilty" !! "not guilty"; }; say judge, "have you seen my toothbrush";

[07:49] *** masak joined
[07:49] <p6eval> rakudo cea34f: OUTPUT«guiltyhave you seen my toothbrush␤»

[07:49] <wayland76> rakudo: sub judge { rand > 0.5 ?? "guilty" !! "not guilty"; }; say judge, "have you seen my toothbrush";

[07:49] <p6eval> rakudo cea34f: OUTPUT«guiltyhave you seen my toothbrush␤»

[07:49] <wayland76> rakudo: say rand

[07:49] <p6eval> rakudo cea34f: OUTPUT«0.291138380141096␤»

[07:49] <wayland76> rakudo: sub judge { rand > 0.5 ?? "guilty" !! "not guilty"; }; say judge, "have you seen my toothbrush";

[07:49] <p6eval> rakudo cea34f: OUTPUT«not guiltyhave you seen my toothbrush␤»

[07:49] <wayland76> Good :)

[07:49] <wayland76> std: sub judge { rand > 0.5 ?? "guilty" :: "not guilty"; }; say judge, "have you seen my toothbrush";

[07:50] <p6eval> std 26343: OUTPUT«##### PARSE FAILED #####␤Malformed routine␤Found ?? but no !!; possible precedence problem␤Please use !! rather than :: at /tmp/I5HYeKHWiG line 1:␤------> [32msub judge { rand > 0.5 ?? "guilty" [31m:: "not guilty"; }; say judge, "have you[0m␤    expecting any of:␤      infix or

[07:50] <p6eval> ..met...

[07:50] <wayland76> Well, not a bug worth submitting, then, I think :)

[07:52] <masak> wayland76: there's one about ?? :: already in RT.

[07:52] <lambdabot> masak: You have 2 new messages. '/msg lambdabot @messages' to read them.

[07:52] <masak> @massage

[07:52] <lambdabot> moritz_ asked 15h 9m 39s ago: do you know if there were any tests for RT #61128?

[07:52] <lambdabot> moritz_ said 14h 32m 37s ago: never mind, I just added one

[07:52] <masak> moritz_++

[07:52] * masak backlogs

[07:56] *** riffraff joined
[08:04] *** cosimo joined
[08:06] <Matt-W> yay more tests

[08:07] <masak> Matt-W: morning, sir.

[08:07] <Matt-W> Good morning!

[08:07] <Matt-W> If you see me this evening, please nag

[08:07] <Matt-W> I must do some more Form.pm

[08:08] <Matt-W> got to figure out why it's crashing Rakudo and file a bug

[08:08] <masak> Matt-W: was just going to ask about that.

[08:08] <masak> Matt-W: oh, it's crashing Rakudo?

[08:08] <Matt-W> Yeah

[08:08] * masak suddenly gets curious

[08:08] * masak does './proto update form'

[08:08] <Matt-W> I wrote a fairly primitive full justification method, and the first time I called it it crashed Rakudo

[08:08] <Matt-W> it's not in github yet

[08:08] <Matt-W> I was feeling fairly ill at the time so I didn't follow it up straight away

[08:08] <masak> Matt-W: please upload a branch or something.

[08:09] <Matt-W> I can do it later, can't get at the code from my office

[08:09] <masak> ah, ok.

[08:09] <Matt-W> IT's on the laptop at home, which is asleep

[08:09] <masak> I see.

[08:09] <Matt-W> I used quite a few things in that method that I've not used before, so I currently have numerous candidates for the cause of the crash

[08:10] <Matt-W> I used [+] and map :)

[08:10] <Matt-W> and Z

[08:10] <Matt-W> or did I use Z in the end

[08:10] <pmichaud> grrrr...

[08:10] <Matt-W> can't remember now

[08:11] <pmichaud> who removed prefix:<=> from Rakudo?

[08:11] <Matt-W> I think I did

[08:11] <Matt-W> pmichaud: not me!

[08:11] <pmichaud> I'd prefer not to break existing scripts and slides so abruptly.

[08:11] <moritz_> pmichaud: it was me

[08:11] <moritz_> pmichaud: I can add it back in if you want

[08:12] <pmichaud> Until people have time to update their modules, tutorial slides, etc., I'd prefer to keep things working.

[08:12] <pmichaud> I.e., given that more people are using rakudo now, we need to start thinking in terms of deprecation cycles.

[08:13] <masak> phenny: ah, new bot. welcome.

[08:13] <masak> .u smiley

[08:13] <phenny> masak: Sorry, no results for 'smiley'.

[08:13] <pmichaud> or, if we don't honor prefix:<=>, we need to at least provide a useful error message that tells someone why the information on the slide they just read isn't working properly, instead of making them guess.

[08:14] <masak> .u white smiling

[08:14] <phenny> U+263A WHITE SMILING FACE (☺)

[08:15] <moritz_> what's the currently recommend method of dying from PIR in rakudo?

[08:18] <pmichaud> 'die'

[08:18] *** kidd` joined
[08:18] <pmichaud> 'die'('message')

[08:19] <moritz_> ok, I have a patch, let me test that...

[08:23] <moritz_> pmichaud: http://nopaste.snit.ch/16355 feel free to push that, I can't push from $here :/

[08:24] <pmichaud> okay

[08:25] <masak> literal: congrats on being accepted for gsoc. :)

[08:25] <frettled> pmichaud: BTW, how far did you guys get on the roadmap?

[08:25] <masak> literal: how long do I have to implement P2T1A before you dig into your stuff?

[08:25] <pmichaud> frettled: you mean on creating the updated one?

[08:26] <frettled> pmichaud: yup

[08:27] *** [particle] joined
[08:28] <pmichaud> we got the basic pieces in place.  I expect to be updating the ROADMAP on the airplane.

[08:28] <dalek> rakudo: 0e73267 | pmichaud++ | docs/ChangeLog:

[08:28] <dalek> rakudo: Update ChangeLog.

[08:28] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/0e73267078a0f9a2bde0ecf15cde2a857c09c55a

[08:28] <dalek> rakudo: 69b3180 | pmichaud++ | src/ (2 files):

[08:28] <dalek> rakudo: Restore prefix:<=> to provide a useful error message (moritz++)

[08:28] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/69b31808f41b41ed34dc273500faccc7cd5fb8cb

[08:28] <pmichaud> (i.e., turning it into something more readable/useful)

[08:29] <moritz_> pmichaud: if you apply such patches with 'git-am' you automatically preserve meta data

[08:29] <pmichaud> moritz_: oh yeah.

[08:29] <frettled> Ah, that's excellent. I was worrying that you might have been out of time yesterday. :)

[08:30] <moritz_> (I have no problem with this kind of attribution, just think it's nicer to our contributors)

[08:30] <moritz_> and git-am -s adds a signed-off-by lines

[08:30] <pmichaud> yes, but git's "patch" isn't quite as robust as the standard "patch"

[08:30] <moritz_> yes, ti seems to have problems with cr/lf issues

[08:31] <pmichaud> also it doesn't seem to work well whenever there's an offset

[08:35] <jnthn> morning folks

[08:35] <pmichaud> good morning, jnthn

[08:35] <pmichaud> wireless working at the hotel again?

[08:35] <jnthn> yeah

[08:35] <pmichaud> or are you someplace else now?

[08:35] <jnthn> though I gotta check out in not so long

[08:35] <jnthn> Plan to walk around Oslo for a bit.

[08:35] <jnthn> Then gotta head for airport at 4pm-ish.

[08:36] <pmichaud> svn.pugscode.org is down?

[08:36] <aff> Thank you guys for coming to Oslo and for making NPW an interesting event!

[08:36] <pmichaud> I can't seem to update t/spec here.

[08:36] <pmichaud> aff:  Oslo and NPW have been great.

[08:37] <jnthn> I can reach it...

[08:37] <moritz_> seems to work here

[08:37] <jnthn> Yes, NPW was excellent.

[08:37] <pmichaud> svn: PROPFIND of '/pugs/t/spec': Could not read status line: connection was closed by server (http://svn.pugscode.org)

[08:37] <pmichaud> maybe it's some weird airport network issue.

[08:37] <aff> pmichaud and jnthn: I enjoyed your talks very much.

[08:38] <pmichaud> I can reach svn.pugcode.org via http

[08:38] <frettled> ditto, I learned lots from you guys.

[08:39] <aff> I am porting my first application to p6 :)

[08:39] <pmichaud> aff:  excellent!  That's exactly what helps us most.

[08:39] <wayland76> Matt-W needs Wake-on-LAN on his laptop :)

[08:40] <Matt-W> it's on wifi

[08:40] <Matt-W> I don't think you can do it on wifi

[08:40] <Matt-W> what I should do is have the code mirrored on my LAN server

[08:40] <Matt-W> and set that up for remote login

[08:40] <moritz_> wake-on-air? :-)

[08:41] <pmichaud> my laptop has "wake on power button".

[08:41] <pmichaud> ahhhh, svn up works now.

[08:41] <pmichaud> Good.

[08:41] <wayland76> Yay ROADMAP updates :)

[08:41] <moritz_> usually wake != boot

[08:42] <wayland76> Someone was asking about the Perl6 ROADMAP earlier today, and We pointed him at the one that claims not to have been updated since August last year :)

[08:42] <pmichaud> Would like to have up-to-date spectests before getting on plane

[08:42] <Matt-W> mine does wake on open lid :)

[08:42] <pmichaud> the file hasn't been updated much since August of last year.

[08:42] <Matt-W> I'll have to build a robot which I can get to open the lid over the internet

[08:42] <wayland76> Just don't control the robot from your laptop :)

[08:43] <frettled> heh

[08:43] <moritz_> that somehow reminds me of a nice little story... http://thedailywtf.com/Comments/Open-Sesame.aspx

[08:43] *** kane__ joined
[08:43] *** [particle]- left
[08:44] <moritz_> probably the ssh solutions was much safer than any card reader (unless they used a broken random number generator :)

[08:45] <frettled> heh

[08:46] *** bacek_ left
[08:49] *** kane__ left
[08:49] *** kane__ joined
[08:50] *** agentzh left
[08:50] *** agentzh joined
[08:55] <masak> rakudo: multi method dispatch(@chunks, %param?) { say defined %param }; dispatch([1,2,3]); dispatch([1,2,3], { "OH" => "HAI" })

[08:55] <p6eval> rakudo 69b318: OUTPUT«No applicable candidates found to dispatch to for 'dispatch'␤current instr.: '_block14' pc 106 (EVAL_17:52)␤»

[08:55] <masak> bug in Rakudo or in masak?

[08:55] <moritz_> s/method/sub/?

[08:55] <masak> moritz_: ah, thank you.

[08:55] <frettled> and where do we post masak bugs, anyway?

[08:56] <moritz_> frettled: [email@hidden.address]
[08:56] <moritz_> oh wait

[08:56] <masak> frettled: [email@hidden.address] :P

[08:56] <frettled> :)

[08:56] <frettled> masak: \o/

[08:56] <masak> frettled: you can't submit them through the web interface, only mail.

[08:56] *** yahooooo joined
[08:57] <frettled> masak: and I suppose patches are submitted via BK instead of svn or git ;)

[08:58] <moritz_> BK?

[08:58] <masak> Burger King?

[08:58] <frettled> BitKeeper

[08:58] <jnthn> I CAN HAZ CHEEZBURGER!

[08:59] <frettled> ohnoes

[08:59] <masak> rakudo: class A { multi method dispatch(@chunks, %param?) { say %param.perl, defined %param } }; A.new.dispatch([1,2,3]); A.new.dispatch([1,2,3], { "OH" => "HAI" })

[08:59] <jnthn> ohnoes now I can't

[08:59] <p6eval> rakudo 69b318: OUTPUT«{}1␤{"OH" => "HAI"}1␤»

[08:59] <masak> I'm slightly surprised that the former is defined.

[08:59] <masak> but maybe it has to be that way.

[08:59] <moritz_> masak: that's because %param is an instance

[08:59] <masak> an instance?

[09:00] * Matt-W writes some Perl 5 and finds it very strange

[09:00] <moritz_> objects

[09:00] <jnthn> An instance of Hash

[09:00] <moritz_> objects of normal classes are always defined

[09:00] <jnthn> ohnoes I have to check out

[09:00] <masak> ok, you two don't seem to think this is an error, so I guess it isn't :)

[09:00] <jnthn> catch y'all later :-)

[09:00] <masak> jnthn: o/

[09:01] <masak> Matt-W: I find the more frequently you switch, the easier it becomes.

[09:01] <wayland76> bye :)

[09:04] *** payload left
[09:05] <masak> rakudo: my %h = { foo => "1" }; %h<foo bar baz> //= 2,3,4; say %h.perl

[09:05] <p6eval> rakudo 69b318: OUTPUT«{"foo" => "1", "bar" => undef, "baz" => undef}␤»

[09:05] <frettled> masak: I think I grokked the code in your previous example now, and yes, I think it makes sense that it works the way it did.

[09:06] <masak> frettled: with the instantiated hash?

[09:06] <moritz_> but the last one is... weird

[09:06] <frettled> masak: yep

[09:06] <masak> frettled: well, I just want a simple way to test if the parameter was passed.

[09:06] <masak> moritz_: submit a rakudo/

[09:06] <masak> ...bug?

[09:07] <masak> I was thinking maybe some interaction between list assignment and defined-or disallows that.

[09:08] *** payload joined
[09:08] *** rblasch joined
[09:09] <moritz_> masak: I think it's a manifestation of a different bug

[09:09] <masak> which one?

[09:09] <moritz_> it's ok that the //= does nothing

[09:09] <moritz_> but mentioing %foo<bar> autovivifies it

[09:10] <frettled> argh, I forgot that Firefox is _very_ unhappy about searching through any of perlcabal.org/syn/S*.html.

[09:10] <moritz_> rakudo: my %h; %h<foo>; say %h.perl

[09:10] <p6eval> rakudo 69b318: OUTPUT«{"foo" => undef}␤»

[09:10] <moritz_> masak: that's long known and ugly

[09:11] <masak> moritz_: still, assigning with //= should overwrite the undef value.

[09:11] <frettled> masak: Anyway, S06/Optional parameters/ - "Missing optional arguments default to their default values, or to an undefined value if they have no default."

[09:11] <masak> moritz_: or do the autovivification and the assignment happen in the wrong order?

[09:11] <frettled> masak: so it appears that there is a bug, then, since you haven't specified a default for %param

[09:11] <moritz_> masak: does //= dwim over lists values?

[09:11] <moritz_> masak: if so, where's that specced?

[09:11] <masak> frettled: or maybe {} is the default for Hash...

[09:12] <masak> moritz_: that's part of what I'm wondering.

[09:12] <masak> moritz_: and if not, how does one write what I meant?

[09:12] <moritz_> masak: maybe you need a hyper

[09:12] <frettled> masak: the way I read the spec, the default values are the ones you specify in the sub declaration.

[09:12] *** amoc left
[09:13] <Matt-W> masak: I think you might be right - it works for musical instruments, anyway.

[09:13] <moritz_> for <a b c> Z 1, 2, 3 -> $k, $v { %h{$k} //= $v }

[09:14] * masak 's head explodes from three conversations at once

[09:14] <wayland76> masak: Let's talk about having multiple conversations too :)

[09:14] <masak> :)

[09:14] <frettled> :)

[09:14] <moritz_> frettled: if %h were undef, you couldn't assign values to it

[09:15] <masak> ack. it's more dwimmy that it's {}.

[09:15] <wayland76> rakudo: for <a b c> Z 1, 2, 3 -> $k, $v { %h{$k} //= $v }

[09:15] <frettled> moritz_: hrm, that's breaking the principle of least surprise.

[09:15] <p6eval> rakudo 69b318: OUTPUT«Scope not found for PAST::Var '%h' in ␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:104)␤»

[09:15] <masak> but... I just want a nice way to see if the hash was passed or not.

[09:15] <moritz_> frettled: maybe tye spect needs to be updated to only refer to scalar optional parameters

[09:15] <moritz_> s/tye/the/

[09:16] <moritz_> rakudo: my %h = a => 5; for <a b c> Z 1, 2, 3 -> $k, $v { %h{$k} //= $v }; say %h.perl

[09:16] <frettled> moritz_: or to allow assignment to undefined non-scalars ;)

[09:16] <p6eval> rakudo 69b318: OUTPUT«{"a" => 5, "b" => 2, "c" => 3}␤»

[09:16] <moritz_> frettled: that would be much weirder, overall

[09:16] <frettled> moritz_: would it?

[09:17] <moritz_> frettled: yes.

[09:17] <frettled> moritz_: I don't see how, though.

[09:17] <moritz_> frettled: if you have an undef value, it's usually not a "normal" object, but a proto object

[09:17] *** nnunley left
[09:18] <moritz_> frettled: so if a default value is such a proto object, a %h<a> = 3 would call the postcircumfix:<< < > >> method as a class method

[09:18] <moritz_> frettled: which doesn't have access to attributes - so it's going to barf

[09:18] <masak> moritz_: what does 'my %h;' do?

[09:19] <moritz_> masak: it calls Hash.new under the hood, I assume

[09:19] <masak> then it can be argued that '%h?' should, too.

[09:19] <frettled> moritz_: so essentially, it's been designed into a corner where you can't get out of without getting hacks all over your feet ;)

[09:19] <moritz_> frettled: right

[09:19] <frettled> moritz_: $expletive

[09:19] <moritz_> frettled: of course there are other options...

[09:20] <frettled> moritz_: yes, _is rw_, for instance, seems like it would help.

[09:20] * frettled is a Perl 6 spec n00b, though.

[09:20] <moritz_> frettled: like having %h? defaulting to a Hash.new(defined => 0) or so

[09:20] <frettled> moritz_: no, that's the wrong solution, becaus it still means you can't say whether you got passed an empty hash or not.

[09:21] <frettled> s/caus /cause/

[09:21] <moritz_> frettled: you could, because an empty hash defaults to being defined

[09:21] <frettled> ah, I misunderstood the magic

[09:21] * frettled <- stupid.

[09:22] <moritz_> but there's a drawback... every modifying call to a hash would have to set its defined flag

[09:22] <frettled> mm

[09:22] <frettled> I think this is a design weakness.

[09:23] <moritz_> the problem is that we're doing in-band communication

[09:23] <moritz_> instead of asking the hash parameter if it was defined, we should ask the capture if that hash was given

[09:24] <masak> aye.

[09:24] <moritz_> especially since objects can respond with False to .defined at will anyway

[09:24] <frettled> the way you put it, it seems like there is a straight-forward way of doing so, and that would be good.

[09:24] <frettled> Conceptually, that's much cleaner than asking the variable.

[09:25] <moritz_> the simplest solution that works with the current spec is to split it into two multis

[09:25] <moritz_> but that's not always convenient

[09:26] *** agentzh left
[09:26] <frettled> I was considering to suggest that, but I thought it would be neater to use the optional argument as, well, optional.

[09:26] *** agentzh joined
[09:26] <frettled> In more complex cases it would make more sense to create multiple methods.

[09:27] <frettled> (going Java)

[09:29] <frettled> There doesn't appear to be a test for this in S06, though.  Unless I'm misreading the tests or missing a test, only scalars are tested.  But my test-fu is weak.

[09:29] *** pmurias joined
[09:30] <moritz_> frettled: it might well be missing... but let's try to get clarification on the spec first, and then write tests :-)

[09:30] <frettled> moritz_: yep.

[09:30] <frettled> moritz_: though the spec is pretty clear about it, really, I just had to read the right part of it.

[09:31] <frettled> It's right there in the intro of S06/Parameters and arguments/

[09:31] <frettled> It speaks of "container argument" as opposed to a scalar.

[09:31] *** payload left
[09:32] *** payload joined
[09:37] <frettled> so if anyone has the test-fu to write a test for testing whether optional hash and array parameters are 1) immutable, 2) defined with their correct default value, and 3) handles correctly with is rw, is copy, etc.

[09:37] <frettled> ...that would be nice. Then I can leech on and see how that's tested.  :D

[09:38] *** kidd` left
[09:41] <frettled> Lunch in T-19 minutes

[09:43] <masak> frettled: that's mixing of two constructs. :) it's either just "T minus 19" or "lunch in 19 minutes"...

[09:44] <Matt-W> my lunch today will include arguments

[09:44] <antiphase> t(lunch) = NOW() + 19;

[09:46] *** mhsparks joined
[09:52] *** rindolf joined
[09:57] <frettled> masak: Ah, but I didn't tell you what T was.  *waves arms desperately*

[09:57] <masak> :P

[09:57] <masak> you'd probably need to redefine infix:<-> as well.

[10:03] *** patmat joined
[10:04] <wayland76> class T { return -NOW() };

[10:04] <pugs_svn> r26344 | pmurias++ | [re-smop] LOST compiles (the MESSAGE is still empty)

[10:05] <masak> wayland76: a slight nit: you can't return from a class body.

[10:06] <wayland76> That's why I didn't send it to rakudo :)

[10:06] <wayland76> Ah, I know...

[10:06] <masak> rakudo: class A { method closure() { return { say $!greeting } } }; class B { has $!greeting; method run-code(Callable $c) { $c() } }; B.new().run-code( A.new().closure() )

[10:06] <p6eval> rakudo 69b318: OUTPUT«No such attribute '$!greeting'␤current instr.: 'parrot;A;_block29' pc 347 (EVAL_22:129)␤»

[10:06] <wayland76> class T { new { return -NOW() } };

[10:06] <masak> that works.

[10:06] <masak> 'method new', though.

[10:07] <wayland76> masak is a fully-implemented perl6 compiler :)

[10:07] <wayland76> rakudo: class T { method new { return -NOW() } };

[10:07] <p6eval> rakudo 69b318:  ( no output )

[10:08] <masak> rakudo: class A { has $!greeting = "I'm guessing this is actually the specced behaviour"; method closure() { return { say $!greeting } } }; class B { has $!greeting; method run-code(Callable $c) { $c() } }; B.new().run-code( A.new().closure() )

[10:08] <p6eval> rakudo 69b318: OUTPUT«I'm guessing this is actually the specced behaviour␤»

[10:08] <masak> Rakudo++

[10:09] *** agentzh left
[10:09] *** agentzh joined
[10:12] *** payload left
[10:22] *** orafu left
[10:22] *** orafu joined
[10:26] <aff> Is hash:delete not implemented yet? 

[10:27] <masak> aff: correct. only %h.delete($key)

[10:27] <aff> masak: Thanks

[10:29] <pugs_svn> r26345 | pmurias++ | [re-smop] SMOP__NAGC__RI__create takes a WEAKREF argument

[10:32] *** orafu left
[10:32] *** orafu joined
[10:35] *** ascent__ joined
[10:35] *** ascent__ left
[10:36] *** pjcj joined
[10:36] *** rindolf left
[10:43] *** agentzh left
[10:47] *** Maghnus left
[10:48] *** Maghnus joined
[10:48] *** iblechbot left
[10:51] *** patmat left
[11:02] *** phenny left
[11:02] *** orafu left
[11:02] *** orafu joined
[11:04] *** mikehh left
[11:08] *** azawawi joined
[11:14] *** smtms joined
[11:18] *** orafu left
[11:18] *** orafu joined
[11:38] *** iblechbot joined
[11:40] *** jedai left
[11:44] *** fridim_ joined
[11:47] *** rgs left
[11:49] <moritz_> masak: yes, it's specced like that... $!greeting is not a lexical, so a block won't close over it

[11:50] <masak> but note that the block did in effect close over it.

[11:50] <moritz_> how so?

[11:51] <moritz_> it's a method, so it has access to the attributes

[11:51] <moritz_> I don't see any closing.

[11:56] <masak> the closure uses the 'self' defined in the closure() method, even though it's called in the run-code($c) method.

[11:58] <pugs_svn> r26346 | pmurias++ | [re-smop] LOST passes tests

[11:59] *** nsh joined
[12:03] *** abra joined
[12:04] *** Psyche^ joined
[12:07] *** Patterner left
[12:07] *** Psyche^ is now known as Patterner

[12:10] *** azawawi left
[12:13] *** cosimo left
[12:20] <masak> class A { has Callable $.c; method foo() { say defined $.c } }; A.new.foo

[12:20] <masak> I must say this is highly counterintuitive.

[12:20] <masak> rakudo: class A { has Callable $.c; method foo() { say defined $.c } }; A.new.foo

[12:20] <p6eval> rakudo 69b318: OUTPUT«1␤»

[12:21] <masak> if that one is defined, what in the world is it defined to be?

[12:21] *** ihrd joined
[12:23] <masak> I feel both this case and the case with the default parameters undermines the whole concept of definedness.

[12:24] <masak> to me, 'defined' should be able to show whether the variable in question has been assigned to, initialized etc.

[12:27] <masak> moreover...

[12:28] <masak> rakudo: class A { has $.c; method foo() { say defined $.c } }; A.new.foo

[12:28] <p6eval> rakudo 69b318: OUTPUT«0␤»

[12:28] <masak> now it works as we all expect it to!

[12:28] <masak> so the current behaviour is actually a kind of punishment for adding types!

[12:28] <frettled> muahaha

[12:29] * masak mutters inaudibly

[12:29] <frettled> masak: it's a shame that you never got to hear sjn and I practice our evil laughter.

[12:30] <masak> frettled: looking forward to hearing it next time we meet.

[12:30] <frettled> masak: that's a deal!

[12:31] <baest> masak: I think it's only Roles

[12:31] <frettled> yes, we play them as best we can.

[12:32] <baest> rakudo: class B { }; class A { has B $.c; method foo() { say defined $.c;} }; A.new.foo'

[12:32] <LylePerl> pmichaud: The issue I was having on Vista turned out to be an issue with Rakudo's realclean and not the code itself.

[12:32] <p6eval> rakudo 69b318: OUTPUT«Statement not terminated properly at line 1, near "'"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:32] <baest> rakudo: class B { }; class A { has B $.c; method foo() { say defined $.c;} }; A.new.foo';

[12:32] <LylePerl> pmichaud: Maybe that's the same issue on Darwin?

[12:32] <p6eval> rakudo 69b318: OUTPUT«Statement not terminated properly at line 1, near "';"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:85)␤»

[12:32] <baest> rakudo: class B { }; class A { has B $.c; method foo() { say defined $.c;} }; A.new.foo;

[12:32] <p6eval> rakudo 69b318: OUTPUT«0␤»

[12:32] <baest> sorry for the noise

[12:32] <masak> baest: I think you're right.

[12:32] <masak> but I don't think roles should behave like this either.

[12:32] <baest> indeed

[12:33] <baest> would be _very_ weird

[12:34] <frettled> And the guys who can answer conclusively are either having a good walk in the sunshine or on their way to/from an airport.

[12:34] <masak> moritz_ seemed to argue earlier that the optional-params case was correct.

[12:37] <frettled> Yes, at least correct according to spec, and as far as I could tell, it was.

[12:38] <masak> right.

[12:38] <masak> that's why I'm not submitting it as a rakudobug, because it's really a spec issue.

[12:39] <masak> by the way, what's a way to write an empty code block in Perl 6?

[12:39] <frettled> But Someone􏿽xAE should probably write new tests.  I don't know how yet. :)

[12:39] <masak> i.e. 'my Callable $c = ...'

[12:40] <frettled> oh, an empty anonymous/implicit sub?

[12:40] <masak> rakudo: my Callable $c = -> {}

[12:40] <p6eval> rakudo 69b318:  ( no output )

[12:40] <masak> ah, that's the way.

[12:40] <frettled> That was almost too easy.

[12:41] <frettled> no black candles or goats necessary.  But then again, it's not SCSI.

[12:42] <masak> frettled: the important point being that the 'obvious' solution is wrong here.

[12:42] <masak> rakudo: my Callable $c = {}

[12:42] <p6eval> rakudo 69b318: OUTPUT«Type mismatch in assignment.␤current instr.: 'die' pc 17466 (src/builtins/control.pir:225)␤»

[12:42] <masak> because {} is an empty Hash.

[12:42] <masak> rakudo: say Hash ~~ Callable

[12:42] <p6eval> rakudo 69b318: OUTPUT«0␤»

[12:44] <frettled> masak: Yes, and I don't think I quite got an answer to how to check whether an argument was used in any other way than doing multiple dispatch to eliminate the alternatives.

[12:44] <masak> frettled: indeed.

[12:45] <masak> this discussion is not-yet-resolved.

[12:45] <frettled> Since defined() obviously isn't the correct way to do it, an alternative method is necessary, e.g. another property for each parameter that's specified in the sub/method definition.

[12:46] <frettled> That would be quite useful, since it allows us to separate between the following cases:

[12:46] <frettled> 1) The parameter was not used.

[12:46] <frettled> 2) The parameter was used, but was undefined.

[12:47] <frettled> I'm not eager to fight for this, since I'm not sure where the snowball will stop rolling.

[12:47] <masak> whoa, "obviously isn't the correct way"? please explain -- I didn't know it was obvious that it isn't the correct way, let alone that it isn't the correct way...

[12:48] <masak> frettled: for a typed variable, the case 2) will never occur.

[12:48] <masak> s/variable/parameter/

[12:48] <frettled> masak: ah, right, that was mentioned earlier as well.

[12:49] <frettled> I used "obviously" loosely; it's not quite obvious to me that this is the way it _ought_ to be, but it's obvious that it's the way it _is_.

[12:49] <masak> ah. :)

[12:50] <masak> I think 'defined' should be used to test whether a variable, parameter or attribute has been initialized.

[12:50] <masak> I think that typing shouldn't affect this maxim.

[12:53] <frettled> Yup.

[12:53] <frettled> As I said before, it breaks with the principle of least surprise, and it also breaks with the principle of not having special exceptions for common cases.

[12:54] <masak> mm.

[12:54] <masak> I think I'm ready to submit a rakudobug after all.

[12:54] <masak> but it'll be one helluva rakudobug... :)

[12:54] * masak submits

[12:59] <aff> In a function call, must the argument list follow a function name without whitespace in between? 

[12:59] <aff> E.g. ok(sum (1,2,3) == 6);

[13:00] <aff> use Test; plan 2; sub sum (*@numbers) { return [+] @numbers; }; ok(sum(1,2,3) == 6); ok(sum (1,2,3) == 6);

[13:00] <aff> I get not ok 2

[13:01] <masak> rakudo: say +(sum (1,2,3))

[13:01] <p6eval> rakudo 69b318: OUTPUT«Could not find non-existent sub sum␤current instr.: '_block14' pc 85 (EVAL_16:49)␤»

[13:01] <masak> rakudo: sub sum (*@numbers) { return [+] @numbers; }; say +(sum (1,2,3))

[13:01] <p6eval> rakudo 69b318: OUTPUT«6␤»

[13:01] <masak> rakudo: sub sum (*@numbers) { return [+] @numbers; }; say +(sum (1,2,3) == 6)

[13:01] <p6eval> rakudo 69b318: OUTPUT«0␤»

[13:07] <masak> aff: the expression (1,2,3) == 6 is treated as one value and sent as a param to sum.

[13:08] <aff> Not a bug then?

[13:08] <masak> don't think so.

[13:08] <aff> Ok thanks

[13:08] <masak> use parentheses. :)

[13:10] <frettled> hmm.

[13:10] <frettled> rakudo: sub sum (*@numbers) { return [+] @numbers; }; say +(sum <1 2 3> == 6)

[13:10] <p6eval> rakudo 69b318: OUTPUT«0␤»

[13:10] <frettled> just curious :)

[13:13] <masak> I guess the answer can be formulated like this, too: infix:<==> has higher precedence than listop function calls.

[13:15] <frettled> mm

[13:16] <frettled> Just use the periodic table of operators (GIYF).  Caveat: there are two syntax changes since it was updated in February.

[13:18] <aff> Ok thanks guys

[13:19] *** patmat joined
[13:20] *** cosimo joined
[13:20] <frettled> masak: Emacs? Jolly good!

[13:21] <masak> frettled: I'm sorry? :)

[13:21] *** aff left
[13:22] *** ihrd left
[13:22] <frettled> masak: I just asked for your IRC client's version, it responded with ERC 5.2, which runs under Emacs.  So, does that mean you have syntax hilighting for Perl 6 in Emacs?  :D

[13:23] <masak> frettled: I don't use Emacs much to write Perl 6 code.

[13:23] <frettled> I was wondering why people us e.g. <==> to quote == instead of using bold, underline or inverse.

[13:23] <masak> I prefer vim for coding.

[13:25] <patmat> is there an actual, really good ebook/tutorial for Perl6 in the net?

[13:25] <patmat> i mean for programming newbies

[13:26] * frettled guesses "no".

[13:26] <masak> patmat: unfortunately not, only bits and pieces.

[13:26] <patmat> :(

[13:26] <masak> patmat: on the other hand, the current implementations are equally fractured and incomplete, so you'd need a high quotient of patience and research anyway.

[13:27] <patmat> ok so i let it be :P

[13:27] <patmat> at the moment

[13:27] <masak> patmat: I have a bunch of recommended reading for you though, if you plan to stay long enough to let me remember it.

[13:27] <masak> especially moritz_++'s perl5-to-perl6 blog posts.

[13:27] <frettled> I suspect that programming newbies might be better off learning another language, as the situation is right now.

[13:27] <masak> (assuming you have prior Perl 5 experience)

[13:28] <frettled> I'd even go so far as to suggest that programming newbies don't look at Perl 5 either.

[13:28] <masak> frettled: well, it's theoretically possible to learn programming by learning Perl 6.

[13:28] <masak> frettled: but it'll be a tough ride. :)

[13:28] <frettled> masak: it's also _practically_ possible to learn programming without learning a programming language.  :)

[13:28] *** ejs left
[13:28] <masak> frettled: I'd tend to agree.

[13:28] <frettled> (though it's not very practical, ha ha)

[13:29] <frettled> I appreciated learning Simula and then LPC (Lars Pensj􏿽xF6's C, object-oriented C for MUD programming), but YMMV.

[13:32] <wayland76> patmat: The advice I tend to give people is that Perl is a good last language to learn.  

[13:33] <wayland76> After you've learned one or two others that can only do some things, then learn Perl, because it can do all of them :)

[13:33] <wayland76> The disadvantage to perl is that, because it can do everything, it tends to be big

[13:33] <patmat> i wouldnt look to Perl 5 :)

[13:33] <patmat> better Python/Perl

[13:35] <wayland76> patmat: You say "Programming Newbie", but you seem to have some background.  Do you mind if we ask what languages you've already tried?

[13:35] <masak> patmat: here's why Perl 6 might be interesting to learn. let's say you have a file with a number on every line, and you want to sum those numbers. now, in most languages that would be a lot of trickery with opening files and for loops.

[13:35] <frettled> Python is also pretty far down on the list of languages for newbies, since it tends to be confusing for the next language.

[13:36] <masak> patmat: in Perl 6, it's 'say [+] lines("myfile.txt")'

[13:36] <frettled> In awk, it's: awk '{ n+=$1 } END { print n }' myfile.txt

[13:37] <frettled> >:->

[13:38] <masak> what I like about the Perl 6 version is that it aligns very well with the problem specification. it contains the primitives "say" "addition" "lines" and the file.

[13:38] <masak> that's much the same as was used to describe the problem.

[13:38] <baest> frettled: shorter in p5: perl -n -e ' $n+=$_; END { print $n }' myfile.txt

[13:39] <frettled> baest: perl -ne >:->

[13:39] <patmat> wayland76: i learned a bit of Ruby, and Python

[13:39] <patmat> and in eaaarly days, QBasic :P

[13:39] <frettled> yow

[13:39] <frettled> well, there are worse things to learn than QBasic.

[13:40] <masak> indeed.

[13:40] <wayland76> I did GWBASIC, followed by QBasic, followed by QuickPascal, all before I got to Uni

[13:40] <wayland76> Oh, and Assembly, and had a look at ForTran :)

[13:41] <wayland76> Anyway, patmat, it sounds like you're not quite a newbie

[13:41] <masak> I did GWBASIC, Turbo Basic, QBasic, Turbo Pascal, 386 Assembly, Visual Basic and a smattering of C before I got to Uni.

[13:42] <wayland76> I'd say stick with Ruby until Perl 6 is readier -- check back in about 6 months :)

[13:42] * frettled did assembly, MS BASIC(A), Logo, then had a few years' worth of recess before going to the University and discovering that I was supposed to do informatics.

[13:42] * frettled will not recommend assembly as the starting point.

[13:43] <wayland76> I had BASICA too, and a little Logo at school

[13:43] <wayland76> oh, and apple basic (as in Apple ][ )

[13:43] <masak> patmat: I'd add to wayland76's suggestion that looking at Perl 6 at the current stage is quite awesome too, but at times frustrating.

[13:43] <frettled> As opposed to masak, I don't recall _which_ assembly, because I think I was only 8 or 9 at the time and only wanted to use the beeper to create music with loops and conditionals.

[13:44] <masak> ah, the beeper.

[13:44] <frettled> or "speaker", as it would be called in the IBM PC.

[13:44] <wayland76> Who remembers what the GW in GWBASIC stood for?  (I do, I'm just testing... :) )

[13:44] <masak> aye.

[13:44] * moritz_ does not

[13:44] <wayland76> Well, it was a fine speaker, but had lame circuitry leading to it

[13:45] * masak doesn't either

[13:45] <frettled> but it wasn't a PC, it was a loose board with 1 or 2 KiB memory and a 5- or 6-digit calculator-type display.

[13:45] <frettled> I didn't know, but it was apparently "Graphics and Windows".

[13:46] * frettled cuddles his uni's local acronym/initial database.

[13:46] <wayland76> frettled: I was told "Gee-Whiz" :)

[13:46] <frettled> hehe

[13:46] <masak> seems the name question is disputed: http://en.wikipedia.org/wiki/GW-BASIC#Name

[13:47] <wayland76> masak: I was just looking at that to check if I was right :)

[13:47] <masak> hm. today is not a productive day, $WORK-wise.

[13:48] *** yahooooo6 joined
[13:49] <moritz_> same here

[13:49] <wayland76> Lets make that anonyous!

[13:50] <wayland76> (anonymous = clown version of unanimous)

[13:51] *** yahooooo left
[13:52] * frettled mumbles something about $expletive script kiddies and $expletive customers and @expletive.

[13:53] <wayland76> Is it just me, or are we mostly sysadmins here?

[13:53] <Matt-W> I'm not a sysadmin

[13:54] <Matt-W> I run my home network sloppily, but that's just so I can get stuff done

[13:54] <moritz_> wayland76: I'm one, though only part time

[13:54] <frettled> I fled consulting to become a sysadmin.  I'm not sure that's a wise choice, but at least I'm not earning loads of money coding Java, which of course would be awful.

[13:54] <masak> I'm decidedly not a sysadmin.

[13:54] <masak> I'm a regular code monkey.

[13:54] <frettled> ooh, a code monkey!

[13:54] <Matt-W> I'm a code monkey too

[13:54] <wayland76> ok :)

[13:54] <frettled> I need one or two of those!

[13:54] * frettled holds on to masak tightly.

[13:55] <Matt-W> C++ mostly, bits of Perl and some Java when I can't avoid it

[13:55] * frettled holds on to Matt-W tightly.

[13:55] <masak> frettled: let go of my tail!

[13:55] <Matt-W> Plus a lot of Perl 6 evangelism

[13:55] *** ispy_ joined
[13:56] <wayland76> ok, only about half sysadmins then

[13:56] <frettled> I like solving problems, but when I've done so, I don't like implementing the solution.  That's the boring part.

[13:56] <Matt-W> I like making things

[13:56] <wayland76> frettled: tell me about it :)

[13:56] <Matt-W> Preferably flying by the seat of my pants, experimental stuff

[13:56] <wayland76> I think we're all exhibiting the virtue of laziness :)

[13:57] <frettled> This is outrageous, by the way: I printed the periodic table of elements and showed it to one of my co-workers, and he called me "very nerdy".

[13:58] <Matt-W> Try the table of perl 6 operators

[13:58] <frettled> That's theone.

[13:58] <frettled> s/eo/e o/

[13:58] <Matt-W> it's beautiful

[13:58] <Matt-W> tempted to print it out at work

[13:58] <frettled> Yes, especially after it got antlers, signatures and hand-written corrections.

[13:58] <moritz_> where is it btw? we should link to it from perl6-projects.org

[13:58] <Matt-W> we can do A3 on the colour laser

[13:59] <frettled> moritz_: http://www.ozonehouse.com/mark/periodic/

[14:00] <moritz_> frettled: thanks

[14:00] *** pmurias left
[14:03] <frettled> np

[14:03] *** pmurias joined
[14:03] <pugs_svn> r26347 | pmurias++ | [re-smop] started adding .m0ld tests to s1p

[14:03] <pugs_svn> r26347 | pmurias++ | even this simple one uncovers a memory leak

[14:09] <pugs_svn> r26348 | moritz++ | [perl6-projects.org] add link to periodic table

[14:11] *** cognominal left
[14:12] <patmat> masak ok i stick to it, that it could be awesome.. but i'd need a good documentation or better say ebook/tutorial for it

[14:12] <literal> moritz_: the "Perl 6 highlighting for vim" link can be changed to http://github.com/hinrik/vim-perl

[14:12] <masak> patmat: did you check out moritz_'s perl5-to-perl6 blog?

[14:13] <patmat> whats the page again? sorry im in work

[14:13] <patmat> i hate it to be a Supporter... even for Windows stuff

[14:13] <masak> patmat: http://perlgeek.de/blog-en/perl-5-to-6/

[14:13] <patmat> its my first job, i want to be a coder once

[14:13] <patmat> thanks

[14:13] <masak> should be enough to get your feet wet.

[14:14] <patmat> so is there an easy way to install perl6 on a windows machine? cause for work...

[14:14] <patmat> private i like to use linux/bsd

[14:14] <literal> moritz_: never mind, I'll update :)

[14:15] <pugs_svn> r26349 | hinrik++ | [perl6-projects.org] update perl6.vim link

[14:15] <moritz_> literal++ # JFDI :-)

[14:15] <masak> moritz_: the order of the index in your blog linked above doesn't correspond to the order of the posts. just thought you'd like to know.

[14:17] <moritz_> masak: that's intional. One is alphabetic, the other is by date

[14:17] <patmat> so is there a way to install it on Windows?

[14:17] <masak> moritz_: oh, ok.

[14:17] *** cosimo left
[14:18] <masak> patmat: http://rakudo.org/how-to-get-rakudo

[14:18] <pugs_svn> r26350 | hinrik++ | [perl6-projects.org] link to Perl 6 Programming on Wikibooks

[14:19] <frettled> Now all we need is that syntax hilighter for Emacs.

[14:19] <masak> patmat: I'd recommend the tarball approach mentioned in the "If you don't have git installed..." paragraph.

[14:19] <masak> frettled: I've found that cperl-mode does a decent job.

[14:20] <masak> s/\./ highlighting Perl 6./

[14:20] <literal> there is an old modified cperl-mode.el in the pugs repo

[14:21] <literal> don't know how much it supports

[14:21] *** rewt left
[14:21] *** rewt joined
[14:22] <masak> literal: do you know when you'll be starting your GSoC work? I'd like to have P2T1A implemented by then.

[14:22] <literal> P2T1A ?

[14:23] <masak> yes, a throwaway prototype.

[14:23] <masak> actually, not even that.

[14:23] <masak> it's enough documentation to be able to say something sensible about the documentation data format.

[14:23] <moritz_> May 23: 	

[14:23] <moritz_> * Students begin coding for their GSoC projects

[14:23] <masak> oh, good.

[14:23] <moritz_> http://socghop.appspot.com/document/show/program/google/gsoc2009/timeline

[14:24] <literal> yeah, may 23rd officially

[14:24] <moritz_> of course nobody can prevent literal from starting earlier :)

[14:24] <literal> http://nix.is/gsoc/gsoc-u4x.html

[14:24] <literal> there's a schedule there

[14:25] <masak> seems my deadline can still be May 23, given that schedule.

[14:25] <frettled> masak: cperl-mode is okay, except that it does different parsing mistakes than perl-mode.  :)

[14:25] <masak> the 'start prototyping grok' will ideally be helped by my musings.

[14:25] <frettled> I suspect that Perl 6 may be easier to hilight.

[14:26] <masak> frettled: I've always found cperl-mode much, much more stable than perl-mode. don't know why.

[14:26] *** cosimo joined
[14:26] <masak> I think it might have been implemented with failure robustness in mind, whatever that means for Perl code parsing.

[14:26] <moritz_> frettled: I don't think so - the ambiguty between terms and operators is more present in Perl 6

[14:26] <literal> frettled: Perl 6 has more orderly syntax yeah, but it also has much more of it...

[14:27] <literal> and yeah, the predictive parsing thing

[14:27] <pugs_svn> r26351 | pmurias++ | [re-smop] removed surplus REFERENCE from capture

[14:28] <literal> frettled: though emacs has much better support for external processes so one could probably use STD.pm to highlight it

[14:28] <frettled> yup, that was suggested this weekend.

[14:29] <moritz_> that said, the grammar for Perl 6 is much shorter than perly.{c,y} and toke.c

[14:29] *** cosimo left
[14:29] <masak> moritz_: that's because it's written in a much more high-level language. :)

[14:29] <literal> moritz_: any reason your perl-5-to-6 isn't mentioned on perl6-projects.org ?

[14:30] *** nsh left
[14:31] <moritz_> literal: the blog is assembled on planetsix, which is already there... but we could add it anyway

[14:31] <literal> ok

[14:32] <moritz_> just don't add the normal perl 6 part of my blog, that would be a duplicate

[14:32] <literal> yeah

[14:36] <pugs_svn> r26352 | hinrik++ | [perl6-projects.org] add link to Perl 5 to 6 lessons

[14:37] *** skids joined
[14:40] *** nihiliad joined
[14:47] *** masak left
[14:48] *** nsh joined
[14:48] * skids backlogging -- wifi wake on lan is called WOWLAN, and theres a smattering of support on various adaptors.

[14:49] * moritz_ knows WOW without the LAN part :-)

[14:57] *** eternaleye left
[15:01] <patmat> i think i choose PUGS

[15:02] <patmat> for the work here

[15:02] *** mofino joined
[15:04] <literal> what work?

[15:04] <wayland76> patmat: That's kind of dangerous -- most of the active developers are working on Rakudo

[15:04] * skids backlogging: not a sysadmin.  A net admin.  As in actual network hardware, not PCs/servers, e.g. those sysadmins that call themselves netadmins.

[15:07] *** yahooooo6 left
[15:08] <skids> however it would not hurt to keep pugs somewhat in sync with the test suite as the standard changes.

[15:08] <skids> If not the big stuff, at least the simple method renames and such.

[15:09] <moritz_> skids: feel free

[15:09] <skids> :-)

[15:09] <skids> Was more encouragement to patmat if he really likes haskel

[15:12] <moritz_> that said there is a Dec 2008 pugs release here: http://hackage.haskell.org/cgi-bin/hackage-scripts/package/Pugs

[15:12] <skids> So last night I was trying to suss whether we need both .iterator and .Iterator, or whether .iterator is now cruft.

[15:13] <PerlJam> skids: what's .Iterator or .iterator?

[15:13] <PerlJam> skids: aren't they all  ['Iterator'] now?

[15:13] <PerlJam> or am I thinking of something completely different?

[15:14] <moritz_> PerlJam is talking abouth Rakudo, skids about the spec

[15:14] <skids> .Iterator would have to follow the "methods named after a class are for casting/coercing" whereas .iterator might offer more flexibility in semantics.

[15:15] <skids> But I can't think of a situation where the difference would matter.

[15:15] <PerlJam> ah.

[15:16] <skids> Of course as I've often said esoteric CS minutia elude me.

[15:17] *** smtms left
[15:18] <skids> If it is the case that the spec should now exclusively say .Iterator I wouldn't mind doing that, but don't want to if there's some reason for .iterator.

[15:18] *** yahooooo joined
[15:19] <[particle]> lowercase means it's a base type

[15:20] <[particle]> er, that's too many loaded words.

[15:20] <moritz_> .true usually returns a Bool

[15:20] <PerlJam> yeah, I was about to ask what a "base type" is  :)

[15:20] <moritz_> not a native type

[15:20] <moritz_> if you meant s/base/native/

[15:21] *** kane__ left
[15:25] <skids> Yeah rakudo-wise I get that some of the .iterator calls are looking for Parrot 'iterator', but is there a reason for .iterator on the spec level?

[15:31] *** lumi left
[15:31] *** lumi joined
[15:32] *** aindilis` joined
[15:34] *** edenc joined
[15:35] <patmat> wayland76: ok pugs doesnt work anyway.. so i need Rakudo for Windows :)

[15:36] <PerlJam> patmat: unless you want to make pugs work.

[15:36] <patmat> literal: i'm at a company, in the IT Support.. sucks a bit, but its my first job.. so.. its ok for the beginning

[15:36] <patmat> PerlJam: nah, the reason that most people work on rakudo is enough :)

[15:36] <literal> why do you need pugs there?

[15:37] <PerlJam> literal: he needs perl6 to do Great and Wonderous Things.

[15:37] <wayland76> literal: He needs something to learn Perl 6 with

[15:38] <wayland76> That's why I told him that it's not recommended

[15:38] <wayland76> (pugs not recommended; perl 6 is :) )

[15:38] *** cognominal joined
[15:38] <patmat> right

[15:38] <literal> yeah, Rakudo would be a better choice

[15:38] <patmat> i dont need Perl or any other language for work :P but i need it, because i want to learn something!!

[15:38] <patmat> and to be a programmer once :)

[15:39] <patmat> because Support simply sucks.

[15:39] <moritz_> aye

[15:40] <literal> if you haven't programmed at all, then Perl 5 would probably be a better starting point, I think

[15:40] <wayland76> patmat: I had a job that involved support once.  You're right that programming is better :)

[15:40] <patmat> no, not Perl 5..

[15:41] <wayland76> literal: He's done some python and ruby and QBasic, and didn't like Perl 5 for some reason :)

[15:41] <PerlJam> literal: don't discourage him!   How often do you think someone will be able to say "Perl 6 was my first programming language"?

[15:41] <literal> hehe

[15:41] <baest> hehe, that would be cool

[15:41] <literal> PerlJam: too late, if what wayland76  says is true

[15:41] <PerlJam> yeah

[15:42] *** Psyche^ joined
[15:42] <PerlJam> After using python and ruby web frameworks and then using Catalyst, I can see how they win.  Syntax matters and they have less extra stuff you have to type to get work done.

[15:43] <PerlJam> speaking of web frameworks ... how is Web.pm coming along?

[15:45] *** Patterner left
[15:45] *** Psyche^ is now known as Patterner

[15:53] *** rblasch left
[15:54] *** nsh- joined
[15:59] *** justatheory joined
[16:02] *** exodist joined
[16:02] *** nsh left
[16:03] <patmat> argh, cant get rakudo running on that windows machine, hrm

[16:04] <patmat> even git port is closed

[16:05] <[particle]> try git clone http://github.com/rakudo/rakudo/tree/master

[16:05] <arnsholt> What does the make function/operator/thing do in regexes?

[16:06] <[particle]> 'make' generates the ast

[16:07] <[particle]> which can then be extracted with Match.ast

[16:07] <patmat> soo initializing.. wait wait

[16:07] <arnsholt> [particle]: Aha. Thanks. And I pass anything I want it to have as children as arguments?

[16:07] <patmat> download error- failed connect to github.com:80; No error

[16:08] *** Eimi left
[16:08] <[particle]> arnsholt: you pass what you want to generate the ast of

[16:09] *** Kisu left
[16:09] <[particle]> / (\d+) { make $0 ) / # create the ast for the number matched

[16:09] <[particle]> / (\d+) { make $0.sqrt ) / # create the ast for the square root of the number matched

[16:10] <arnsholt> Righties

[16:10] *** cspencer joined
[16:11] <arnsholt> Frustratingly enough, { make $0 } causes a syntax error

[16:12] <[particle]> inside a regex, in rakudo?

[16:12] <arnsholt> Yah.

[16:12] <[particle]> yeah, doesn't work yet.

[16:12] <[particle]> you can't embed perl 6 closures in rakudo regexes yet iirc

[16:12] <arnsholt> Damn. That'd be a real relief

[16:14] *** sproingie left
[16:33] *** nsh- left
[16:36] *** cspencer is now known as cspencer_

[16:36] *** cspencer_ is now known as cspencer

[16:43] *** nsh joined
[16:46] *** riffraff left
[16:54] *** FurnaceBoy joined
[16:57] *** cdarroch joined
[17:01] *** revdiablo joined
[17:03] <revdiablo> I just noticed that unary = was killed in favor of .get() and .lines().  Any suggestions on where I can read up on the discussion that lead up to that?

[17:04] <revdiablo> I think it's a nice change, but it seems to have changed suddenly after sitting in the spec for a long time

[17:04] *** azawawi joined
[17:04] <azawawi> hi

[17:04] *** pmurias_ joined
[17:05] <literal> azawawi: perl6.vim has moved to https://github.com/hinrik/vim-perl

[17:07] *** azawawi left
[17:09] *** sri_kraih_ joined
[17:13] *** azawawi joined
[17:20] *** pmurias left
[17:21] <cspencer> is there any way of getting at the unicode accent info on a character? (ie. identifying that a character contains an umlaut)

[17:21] <cspencer> (in either PIR or P6)

[17:22] *** nsh- joined
[17:22] <[particle]> revdiablo: it's in the irclog over the past few days

[22:30] *** ilogger2 joined
[22:30] * moritz_ is close to tackling the Match.perl problem

[22:31] *** ispy_ joined
[22:38] *** FurnaceBoy joined
[22:42] *** lumi joined
[22:42] *** Limbic_Region joined
[22:48] <s1n> frew|work: ping

[22:50] *** skids joined
[22:52] <frew|work> s1n: hey

[22:56] <moritz_> .say for @('ab' ~~ m/(.)+/)

[22:57] <moritz_> rakudo: .say for @('ab' ~~ m/(.)+/)

[22:57] <p6eval> rakudo ad7389: OUTPUT«a␤b␤»

[22:57] <moritz_> rakudo: 'ab' ~~ m/(.)+/; say $0.WHAT

[22:57] <p6eval> rakudo ad7389: OUTPUT«List␤»

[22:57] <moritz_> rakudo: 'ab' ~~ m/(.)+/; say $0.WHAT; say $1.WHAT

[22:57] <p6eval> rakudo ad7389: OUTPUT«List␤Failure␤»

[23:12] <dalek> rakudo: 50f6111 | (Moritz Lenz)++ | src/setting/Match.pm:

[23:12] <dalek> rakudo: handle quantified captures in Match.perl

[23:12] <dalek> rakudo: Actually this works only decently for named (and not positional) captures

[23:12] <dalek> rakudo: because of another rakudobug (RT #64952).

[23:12] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/50f6111550cdf341fee85e3ed0bd04f4dec936bf

[23:22] <dalek> rakudo: 581f573 | (Stephen Weeks)++ | src/parser/actions.pm:

[23:22] <dalek> rakudo: Migrate actions.pm to use .ast instead of $()

[23:22] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/581f5735e9271bbac8de8d229c7efbb26677bb55

[23:28] *** [particle]1 joined
[23:30] *** kate21de1 joined
[23:39] *** DemoFreak joined
[23:42] *** DemoFreak left
[23:52] <s1n> is there a perl6 equivalent to require?

[23:55] *** orafu joined
[23:57] <skids> s1n: require is specced, S11

[23:58] <dalek> rakudo: 2665575 | (Stephen Weeks)++ | src/parser/actions.pm:

[23:58] <dalek> rakudo: Fix actions.pm by replacing .ast() with .ast

[23:58] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/266557519b67bd77107992ab0a08543a140141c2

