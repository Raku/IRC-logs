[00:04] <cspencer> i'm trying to move the shift method over from Range.pir -> Range.pm, but i'm getting a "shift_pmc() not implemented in class 'Range'" error when i do

[00:05] <cspencer> is there any way of associating the P6 shift method with the shift_pmc vtable method?

[00:09] *** cspencer left
[00:10] *** cspencer joined
[00:27] <brunoV> pdc, this is a personal suggestion. Before coding *anything* in perl, ask first if it's already been done. Most of the time, it has, and you only have to glue CPAN modules together.

[00:30] *** plash left
[00:30] <pdc> that sounds like it would ruin the fun!

[00:31] <brunoV> pdc, the fun is in looking at your non-trivial program working after 15 minutes of CPAN shopping

[00:31] <literal> "and if you must reinvent the wheel, try to invent a better one"

[00:31] <pdc> I take your point though, and reinventing the wheel is something I should eventually stop doing. But in C at least, I quite like coding stuff which I could just import if I wanted

[00:32] <pdc> good point brunoV. developing apps quicker would be great and is one reason I plan to learn a scripting lang

[00:34] <pdc> but I use reinvention as learning experiences. Doing a lot of work yourself is (imo) a great way to really get to grips with a language. That's important in C and I should think it is even more so in Perl

[00:36] <pdc> although I keep reading how you don't need to learn all of Perl to start writing useful code, just a small subset with what you need

[00:36] *** xinming left
[00:40] <brunoV> pdc, also, I don't know if they've suggested this to you yet, but www.perlmonks.org is a great place to join, ask question and look to from time to time

[00:41] <pdc> I've read about and briefly visited it, thanks

[00:44] *** fridim joined
[01:00] *** davidad left
[01:03] *** dKingston left
[01:04] *** dKingston joined
[01:14] *** amoc joined
[01:22] *** plash joined
[01:31] *** xinming joined
[01:36] *** xinming_ joined
[01:41] *** brunoV left
[01:41] *** brunoV joined
[01:44] *** xinming__ joined
[01:47] *** xinming left
[01:47] *** xinming__ is now known as xinming

[02:00] *** justatheory joined
[02:01] *** ZuLuuuuuu joined
[02:02] *** xinming_ left
[02:03] <pasteling> "ZuLu" at 193.140.225.206 pasted "Gives "too few arguments passed"" (5 lines, 97B) at http://sial.org/pbot/35865

[02:03] <ZuLuuuuuu> Hi, why this code gives "too few arguments passed"? http://sial.org/pbot/35865

[02:24] *** dKingston left
[02:28] *** ZuLuuuuuu left
[02:29] *** davidad joined
[02:43] *** bacek_ joined
[02:46] *** davidad left
[02:47] *** meppl left
[02:49] *** meppl joined
[02:49] *** davidad joined
[02:58] *** c9s_ joined
[02:59] *** c9s_ is now known as c9s__

[02:59] *** c9s__ is now known as c9s_

[03:11] <pugs_svn> r26098 | diakopter++ | hgis

[03:18] *** nihiliad left
[03:30] *** meppuru joined
[03:30] *** brunoV left
[03:33] <szabgab> on http://perlcabal.org/ shouldn't the links to feather point to perlcabal (shall I remove the hostname from those links?)

[03:34] *** Tene joined
[03:35] *** sephee left
[03:44] *** mjk joined
[03:45] *** mjk left
[03:45] *** mjk joined
[03:45] *** mjk left
[03:46] *** mjk joined
[03:46] *** meppl left
[03:49] *** justatheory left
[03:51] *** orafu joined
[04:03] *** |mjk| joined
[04:03] *** SamB left
[04:04] *** mjk left
[04:04] *** |mjk| left
[04:06] *** mib_531n77 joined
[04:06] *** OuLouFu left
[04:06] *** mib_531n77 left
[04:09] *** mberends joined
[04:20] *** cspencer left
[04:20] *** frioux|home left
[04:20] <mberends> @tell masak 1) I like Configure.p6 because it resembles rakudo/Configure.pl and proto/lib/Configure.pm. 2) Copying Configure.pm into $project/lib is good 3) PERL6LIB->RAKUDO_DIR iffy, might lead to Rakudo abuse. 4) agree Configure->make autorun off by default, but prefer a prompt asking preference instead of editing Configure.pm (git pull clobbers). 5) PERL6LIB good idea, but 'export' is often preferred to 'env', must find out why.

[04:20] <lambdabot> Consider it noted.

[04:21] *** mberends left
[04:23] *** c9s__ joined
[04:24] *** frioux|home joined
[04:35] *** brunoV joined
[04:40] *** c9s left
[04:40] *** c9s__ is now known as c9s

[04:42] *** c9s left
[05:03] *** amoc left
[05:09] <s1n> frioux|home: ping

[05:15] *** amoc joined
[05:24] <pasteling> "mibbit" at 192.117.127.193 pasted "just trying" (1 line, 12B) at http://sial.org/pbot/35869

[05:27] *** Southen left
[05:41] *** justatheory joined
[06:06] *** FurnaceBoy left
[06:10] *** DemoFreak joined
[06:17] *** nihiliad joined
[06:21] *** justatheory left
[06:30] *** c9s_ is now known as c9s

[06:51] *** masak joined
[06:51] <masak> howdy, #perl6

[06:51] <lambdabot> masak: You have 1 new message. '/msg lambdabot @messages' to read it.

[06:51] <masak> @massage

[06:51] <lambdabot> mberends said 2h 30m 49s ago: 1) I like Configure.p6 because it resembles rakudo/Configure.pl and proto/lib/Configure.pm. 2) Copying Configure.pm into $project/lib is good 3) PERL6LIB->RAKUDO_DIR

[06:51] <lambdabot> iffy, might lead to Rakudo abuse. 4) agree Configure->make autorun off by default, but prefer a prompt asking preference instead of editing Configure.pm (git pull clobbers). 5) PERL6LIB good idea,

[06:51] <lambdabot> but 'export' is often preferred to 'env', must find out why.

[06:53] *** mberends joined
[06:54] <mberends> masak: good euro-morning!

[06:54] <masak> morn'!

[06:54] <szabgab> mmm

[06:54] <masak> I'm composing a quick answer, but now I can tell you directly instead of via lambdabot :)

[06:55] <masak> mberends: 1) I tend not to like '.p6' endings. executables are executables. 3) Rakudo abuse, in what way? 4) go right ahead; I don't fully understand, but it sounds good. 5) not sure we can use 'export' in this instance. I've tried.

[06:57] <masak> by the way, I'm now dogfooding proto.

[06:57] <masak> should lead to an avalanche of improvements.

[06:57] *** Southen joined
[07:02] <mberends> masak: 1) let's meet in the middle with capitalized Configure 3) a) rakudo/ should not be a library dir in the long term, Test.pm is a homeless exception b) pointing PERL6LIB there establishes the wrong precendent that rakudo/ works as a library dir c) people able to but not understanding a) put more modules into rakudo/ 4) will do soon 5) will research

[07:05] <masak> mberends: 1) deal. 3) agreed. I didn't think of it that way. let's do it your way, and complain loudly for a long-term solution.

[07:06] *** payload left
[07:07] *** fridim left
[07:12] <mberends> masak: i've been offline about a week, but read most of the logs. keep up the dogfooding and proto improvements. Pod::Parser v2 passes 1 test ;)

[07:13] <masak> mberends: thanks. yesterday was some short-and-sweet proto work, today will be Web.pm. good luck with Pod::Parser v2.

[07:13] <masak> mberends: oh, and my sekkrit plan right now is to finish the Lobster, and then hook up November with HTTP::Server.

[07:19] *** ejs joined
[07:20] *** iblechbot joined
[07:22] *** ejs left
[07:23] *** ejs joined
[07:24] *** payload joined
[07:26] <mberends> masak: now the sekkrit's out ;) that's HTTP::Daemon currently, but nvm. I'll mibbit in and out during $class this week :)

[07:29] <masak> ah, I thought HTTP::Daemon and HTTP::Server were two different entities.

[07:29] <masak> anyway, I'll attempt to tame the daemon today.

[07:42] *** brunoV left
[07:48] *** baest joined
[07:50] *** agentzh joined
[07:54] *** mib_7bnr0h joined
[07:55] *** mib_7bnr0h left
[08:02] *** meppuru left
[08:07] *** bacek_ left
[08:09] *** davidad left
[08:16] *** payload left
[08:19] <jnthn> morning, all(#perl6)

[08:19] <masak> jnthn: marnin'.

[08:20] *** nihiliad left
[08:20] *** pmurias joined
[08:22] *** zamolxes joined
[08:22] <moritz_> OMG JUNCTIONS, wont't that autothread in some totally unpredictable way? :-)

[08:24] <masak> moritz_: no, it won't compile due to the mismatched parenthesis :P

[08:25] <masak> so we're safe, for now.

[08:25] <moritz_> :-)

[08:27] <masak> mberends: I have a good mind to write a 'Perl 6 project Well-Thought-Out Practices' somewhere. but it's a bit of work to put everything into words, and I'm not sure it belongs in proto. it's more of a blog post.

[08:28] *** cxreg joined
[08:33] <masak> hm. I'm considering adding an 'all' pseudopackage to proto, which would expand to mean all Perl 6 projects. but do I want it to expand to all installed projects when updating, or do I want a separate 'installed' pseudopackage for that?

[08:33] <moritz_> the former

[08:33] <masak> oki, good.

[08:34] <masak> that one was my favourite.

[08:37] *** kane_ joined
[08:37] *** cognominal joined
[08:40] *** Southen left
[08:42] <masak> make some coffee, grab the newspaper, run './proto update all'... http://gist.github.com/90672

[08:42] <masak> only works locally on my box right now.

[08:59] *** cognominal left
[09:03] *** cognominal joined
[09:08] <masak> there, pushed.

[09:09] <masak> now you can do './proto install all' as well. :)

[09:09] <szabgab> OT, have any of you created screencast on linux ? I cannot manage to do it

[09:16] *** ruoso left
[09:18] *** PerL_MonK joined
[09:19] *** payload joined
[09:37] * Matt-W is getting twitchy, having not done anything on Form for a while

[09:37] <Matt-W> I have plans, just... a lack of time

[09:37] <masak> I know the feeling.

[09:40] <jnthn> There exist people who don't have that feeling?

[09:40] <pugs_svn> r26099 | pmurias++ | [re-smop] fixed bug in interpreter

[09:41] <literal> mberends: I believe export is preferred to env because export is the bash way while env is the csh (or some such) way

[09:43] <masak> literal: no, I think that env is the sh-agnostic way.

[09:43] <literal> could be

[09:44] <masak> literal: but export does not work in this case.

[09:44] <masak> because each &run call makes its own subshell.

[09:44] *** pmurias left
[09:45] <masak> hm. maybe if the export and the actual command were put in the same &run call...

[09:45] <masak> that might actually work.

[09:45] <masak> but I'd like a resource saying that export trumps env before changing anything. :)

[09:46] <moritz_> if it starts a new subshell anyway, can't you just do 'VAR=VALUE command'?

[09:47] <masak> moritz_: that's what we currently do.

[09:47] <masak> except I've been told that doing that _without_ putting an 'env' before is bash-specific, so I stick an 'env' before.

[09:48] <moritz_> ok

[09:48] <masak> shell scripting is gnarly.

[09:48] <moritz_> which is why we love perl :-)

[09:48] <eiro> hello guies 

[09:49] <masak> eiro: oh hai!

[09:49] <Matt-W> Indeed there's a reason why we have Makefile.pl instead of Makefile.sh

[09:49] <Matt-W> hi eiro

[09:50] <masak> Matt-W: but the current well-thought-out practice is to have a Configure, written in Perl 6. :P

[09:50] <Matt-W> yeah but the principle's the same :)

[09:50] <masak> not many projects do that right now, though.

[09:50] <masak> aye, same principle.

[09:50] <Matt-W> I see it as more of a mid-term goal

[09:51] *** Southen joined
[09:53] <masak> rakudo: print chr($_) for <20013 25991 65281>

[09:53] <p6eval> rakudo 0310a3: OUTPUT«中文！»

[09:53] <masak> Rakudo++

[09:54] <jnthn> .oO ( middle woman? )

[09:54] <masak> the Perl 5 executable gives the same result, but complains about "Wide character" thrice.

[09:54] <Matt-W> incomplete unicode fonts --

[09:54] <moritz_> Unicode++ UTF-8++ (I have no idea what these characters mean ;-)

[09:55] <moritz_> masak: start with the -CS option

[09:55] <literal> masak: -CO :)

[09:55] <literal> or that

[09:55] <literal> Perl 5 likes to assume Latin 1

[09:55] <moritz_> perl -CS -wE 'print chr($_) for <20013 25991 65281>'

[09:55] <moritz_> (-E is a perl 5.10-ism)

[09:55] <masak> jnthn: no, "Chinese (language)". 中 does indeed mean middle, and you understandably confused 文 with 女

[09:56] <literal> moritz_: you're missing a qw there

[09:56] <moritz_> literal: no

[09:56] <moritz_> literal: <...> works in Perl 5 as well, for obscure reasons

[09:56] <literal> oh right, as lons as you don't add some * and stuff

[09:56] <jnthn> masak: Well, both look a bit like an ironing board....

[09:56] <literal> long

[09:56] <moritz_> literal: actually it's a glob, but if you don't use meta characters like *, ?, {} etc it works

[09:56] * moritz_ too slow ;-)

[09:56] <masak> jnthn: the reason China names itself "the middle kingdoms" goes back to early times when the country was a small kingdom among many.

[09:57] <rgs> perl -CS -wE 'say chr for <2{0013,5991} 65281>' # golf !

[09:57] <masak> jnthn: I'm past the point where I see such visual similarities between different sinographs.

[09:57] <moritz_> rgs++

[09:58] <masak> jnthn: the first has four strokes, the second has only three.

[09:58] <moritz_> if you want to golf, you can omit the -w and a space, obviously ;-)

[09:58] <literal> rgs: "20013 25591" is actually shorter than "2{0013,5991}" :)

[09:58] <masak> rgs++

[09:58] <masak> literal: still, the idea is cool! :)

[09:58] <rgs> well

[09:58] <moritz_> but it feels much more golfy ;-)

[09:59] <literal> true

[10:01] <masak> jnthn: will there be a Rakudo day this week?

[10:01] <jnthn> masak: Samozrejme.

[10:01] <masak> :)

[10:01] * masak thought so

[10:01] <jnthn> Probably Thu or Fri.

[10:01] *** iblechbot left
[10:01] * Matt-W likes Rakudo Day

[10:01] * Matt-W thinks everyone should have a Rakudo Day

[10:02] <Matt-W> Or maybe a Perl 6 Day

[10:02] <masak> every day is Perl 6 day!

[10:04] <jnthn> Planning on typed arrays and hashes - or at least a good bit of progress towards them - for Tue or Wed.

[10:04] <masak> nice.

[10:05] <masak> Rakudo Whatever-we'll-call it will be the best release ever!

[10:05] <masak> s:2nd/' '/-/;

[10:06] <moritz_> masak: so far every rakudo release was the best release ever, at that time ;-)

[10:06] <masak> of course.

[10:06] <masak> nothing says propaganda needs to be logical.

[10:06] <masak> :P

[10:07] <moritz_> jnthn: cool. I just submitted an article which mentions them as not yet implemented; if you do it this week, I might still be able to remove that notice ;-)

[10:08] <masak> http://perlgeek.de/blog-en/perl-6/tidings-2009-04.html  # for those who want to read it

[10:08] <Matt-W> typed arrays and hashes

[10:08] <Matt-W> I thought that already worked...

[10:09] <moritz_> rakudo: my Int @a = <foo bar>; say @a[0]

[10:09] <p6eval> rakudo 0310a3: OUTPUT«get_iter() not implemented in class 'Integer'␤current instr.: '_block14' pc 59 (EVAL_17:41)␤»

[10:09] <Matt-W> oh dear

[10:09] <Matt-W> that is bad

[10:10] <jnthn> masak: BTW, on Chinese, I didn't study any of it at all for over a year and a half. :-( And I was quite depressed during the month I did spend trying to learn some, so little stuck.

[10:10] <jnthn> Would like to have another shot at it sometime though. :-)

[10:11] <masak> jnthn: Chinese is a big undertaking. needs virtually undivided attention. at least from me.

[10:11] <masak> it's not that it's very hard, it's just... a complete, internally consistent set of Other Stuff. a bit like Haskell.

[10:12] <Matt-W> I suspect it's slightly harder than Haskell

[10:12] <Matt-W> Haskell doesn't have hundreds of different characters to learn to read :)

[10:12] <jnthn> masak: Yeah, I don't see me being able to give it the time it'd need for serious progress for a while.

[10:13] <masak> jnthn: I barely have the time to keep it fresh.

[10:13] <masak> ...while also working half-time and studying other things.

[10:14] *** PerL_MonK left
[10:14] <masak> Matt-W: I think you're right; to the extent they are comparable, Haskell is easier. then again, I'd say _all_ programming languages are easier to learn than _all_ spoken languages.

[10:14] <Matt-W> masak: I would agree

[10:14] <masak> perhaps with some rare exceptions, like Dis and Toki Pona. :)

[10:15] <Matt-W> languages for human communication are generally vastly more complicated

[10:15] *** Southen left
[10:15] <masak> aye. even Esperanto is jarringly complex.

[10:16] <moritz_> so we'll invent a vastly more complex programming language, just to disprove the "natural languages are more cmplex" theory ;-)

[10:16] <jnthn> I fear the complexity may be a required element of any natural language that's going to be successful in the mainstream.

[10:16] <jnthn> (Constructed language, that is...)

[10:16] <Matt-W> I think you need complexity in order to express the range of meanings which we use in everyday speech

[10:17] <jnthn> Otherwise it may well lack the expressivity to make it good to use.

[10:17] <Matt-W> Let alone in literature

[10:17] <masak> jnthn: necessary, but not sufficient. exhibit A: all conlangs out there. :P

[10:17] <Matt-W> There is a reason why so many synonyms survive in languages like English - because they don't mean *exactly* the same thing

[10:17] <masak> Matt-W: and because people have one brain each.

[10:17] <sbp> Toki Pona is no exception

[10:17] <moritz_> and because different people want to see different synonyms die ;-)

[10:18] <sbp> the words are easy to learn

[10:18] <sbp> but most things are not expressed with single words

[10:18] <sbp> and in some of the larger units that you construct with them you can almost think of them as random phonemes, quite frankly

[10:18] <masak> sbp: you have a point. Toki Pona does not express things more easily than other languages.

[10:18] <sbp> right. like you need five or six words to say "duck"

[10:18] <Matt-W> The concepts you want to express are just as complicated

[10:18] <sbp> and even then it's not entirely distinguishable from swan, say

[10:19] <sbp> (it's something like: bird which sits above water)

[10:19] <Matt-W> Could you cast an analogy there between languages which use the Latin alphabet to construct words, and languages which use a much wider range of characters to represent entire syllables or words?

[10:20] *** orafu left
[10:20] <sbp> yeah. there's a good page about this, hang on

[10:20] *** OuLouFu joined
[10:20] <sbp> Matt-W: http://www.zompist.com/yingzi/yingzi.htm

[10:25] <Matt-W> sbp: that's really interesting, thanks

[10:28] *** payload1 joined
[10:28] *** payload left
[10:34] *** SamB joined
[10:34] *** Southen_ joined
[10:35] *** sitaram joined
[10:44] *** payload1 left
[10:44] *** payload joined
[10:52] <masak> rakudo: role Foo {}; role Bar {}; sub baz(Foo Bar $a) {}; say "should not be alive here before 6.0.0"

[10:52] <p6eval> rakudo 0310a3: OUTPUT«should not be alive here before 6.0.0␤»

[10:52] * masak submits rakudobug

[10:53] *** mib_yk3mtq joined
[10:59] <jnthn> masak++ # thanks, that's on my to deal with list

[11:01] *** ludan joined
[11:01] *** mib_yk3mtq left
[11:01] <masak> with pleasure.

[11:01] <masak> moritz_++ for blogging about it. I didn't have a complete overview of the situation before.

[11:14] <masak> rakudo: $*IN.readline # should this one wait for user input?

[11:14] <p6eval> rakudo 0310a3:  ( no output )

[11:14] <masak> because it doesn't.

[11:15] *** ludan left
[11:15] <masak> rakudo: my IO $a; $a.readline # mwhahaha.

[11:15] <p6eval> rakudo 0310a3: OUTPUT«Null PMC access in get_bool()␤current instr.: 'parrot;IOIterator;' pc 6971 (src/classes/IO.pir:162)␤»

[11:15] * masak submits rakudobug

[11:17] <masak> rakudo: IO.readline # golf FTW

[11:17] <p6eval> rakudo 0310a3: OUTPUT«Null PMC access in get_bool()␤current instr.: 'parrot;IOIterator;' pc 6971 (src/classes/IO.pir:162)␤»

[11:31] *** payload1 joined
[11:32] *** payload left
[11:46] <dalek> rakudo: a04f610 | (Moritz Lenz)++ | build/Makefile.in:

[11:46] <dalek> rakudo: insert newline in Makefile.in, as suggested on p6c

[11:46] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a04f610fb3f6f77429bb7a35ed1613eda8900951

[11:47] *** jeremiah_ joined
[11:48] <jeremiah_> rakudo: say "Hello, my name is foo" 

[11:48] <p6eval> rakudo 0310a3: OUTPUT«Hello, my name is foo␤»

[11:48] <jeremiah_> ^^ Gabor told me to say that.

[11:50] <masak> rakudo: my $name = "jeremiah_"; say "hello, my name is $name"

[11:50] <p6eval> rakudo 0310a3: OUTPUT«hello, my name is jeremiah_␤»

[11:52] <jeremiah_> But my name really is foo.

[11:52] <masak> oh, sorry.

[11:52] <masak> rakudo: my $name = "foo"; say "hello, my name is $name"

[11:52] <p6eval> rakudo 0310a3: OUTPUT«hello, my name is foo␤»

[11:53] <jeremiah_> I am going to heckel you during your talk in Oslo masak 

[11:53] <jeremiah_> :)

[11:53] <masak> is that so?

[11:53] <jeremiah_> Although I think it is spelled heckle.

[11:54] <masak> as long as you behave, I don't mind heckling.

[11:54] <jeremiah_> :)

[11:54] <jnthn> Oh awesome does that apply to me too? ;-0

[11:54] <masak> jnthn: er.

[11:54] <jeremiah_> Yes, I will heckle you too.\

[11:54] <jeremiah_> So sure, it applies.

[11:54] <jnthn> jeremiah_: No no I meant could I heckel masak too.. ;-)

[11:54] <jnthn> erm, however you spell it

[11:54] <masak> :)

[11:54] <jnthn> <- not a native English speaker, honest ;-)

[11:55] <masak> allright, you can all heckle me. I'm sure I deserve it for some reason. :P

[11:55] <jeremiah_> What is your mother tongue? i386?

[11:55] <jnthn> BBC Micro BASIC. ;-)

[11:55] <moritz_> so what does "heckle" mean?

[11:55] <jeremiah_> My mother tongue is cat.

[11:56] <jeremiah_> heckle means to harass

[11:56] <jnthn> Did that make learning lolspeak easier? ;-)

[11:56] <jeremiah_> Usually performers on the stage get heckled by people in the audience.

[11:56] *** ihrd joined
[11:56] <ihrd> hi there

[11:56] <jeremiah_> jnthn: Well, yes. But my real accomplishment is translating Ulysses into cat.

[11:56] <jeremiah_> That was hard.

[11:57] <masak> ihrd: OH HAI

[11:57] <moritz_> that's easy. `cat Ulysses.txt'

[11:57] <jeremiah_> heh

[11:58] <ihrd> masak, HAI

[11:59] <masak> ihrd: как дела?

[12:00] <jeremiah_> rakudo: use v6;

[12:00] <p6eval> rakudo 0310a3:  ( no output )

[12:01] <jeremiah_> rakudo: use v6; say '1..2'; say 'ok 1';

[12:01] <p6eval> rakudo 0310a3: OUTPUT«1..2␤ok 1␤»

[12:01] *** c9s left
[12:08] <moritz_> rakudo: say (:foo).value.perl

[12:09] <p6eval> rakudo 0310a3: OUTPUT«1␤»

[12:09] <moritz_> rakudo: say (:!foo).value.perl

[12:09] <p6eval> rakudo 0310a3: OUTPUT«0␤»

[12:09] <ihrd> masak, fine, I am working on me first patch for rakudo and this is make me happy :)

[12:09] <masak> :)

[12:09] * masak is patching Rakudo too

[12:09] <moritz_> ihrd++

[12:14] * Matt-W likes to see happy people

[12:14] <masak> happiness is like the GNU GPL: infectious.

[12:16] <moritz_> isn't it the other way round? ;-)

[12:16] <jnthn> Yeah but so is flu. :-)

[12:18] *** mib_dfzp3n joined
[12:21] *** stevenhirsch joined
[12:22] <stevenhirsch> rakudo: say "hello world"

[12:22] <p6eval> rakudo 0310a3: OUTPUT«hello world␤»

[12:24] *** amoc left
[12:25] <masak> hello, stevenhirsch.

[12:25] <stevenhirsch> hi masak

[12:25] * masak tips hat

[12:25] <stevenhirsch> how are you today?

[12:26] *** iblechbot joined
[12:27] <masak> stevenhirsch: sun is shining, I'm hacking Rakudo and coding Perl 6. I'd say pretty good. :)

[12:27] <masak> stevenhirsch: and you?

[12:27] <stevenhirsch> cool!  raining here in ny

[12:27] <Matt-W> masak: ooh what are you hacking on?

[12:28] <masak> Matt-W: sekkrit. :P

[12:28] <masak> um, and don't backlog.

[12:29] *** daemon left
[12:32] *** Kisu left
[12:32] *** Kisu joined
[12:34] <masak> for those who don't want to wait until NPW to heckle me, here's a patch that implements IO.ins: http://gist.github.com/90740

[12:34] <masak> it passes all spectests, and produces the right results.

[12:34] <masak> but I feel it's not very good PIR, so I post it here, waiting for some kind soul to review.

[12:35] <Matt-W> masak: why does it have =item readline and then implement a method called 'ins'

[12:35] <masak> Matt-W: fixed. :)

[12:35] <masak> I saw that one too after posting.

[12:36] <masak> the gist has been corrected, and the patch as well.

[12:38] <literal> .ins ?

[12:38] <literal> oh, a method, not a file extension

[12:39] <masak> aye.

[12:39] <masak> one that I feel I need now and then.

[12:40] <masak> walk &

[12:41] *** Kisu left
[12:41] <Matt-W> masak: I can't comment on the PIR as my own PIR is dreadful

[12:41] *** Kisu joined
[12:41] <moritz_> ah, is that Perl 6's $. ?

[12:43] <moritz_> the patch isn't very nice, but I don't know how to improve it ;-)

[12:43] <moritz_> except writing it in Perl 6, of course

[12:43] <moritz_> and have a private method inc_ins or so, and call that from pir

[12:43] <literal> what does "ins" stand for? I read the Pod and I still don't get the name

[12:44] <moritz_> Industrial-strength Numeric counting-Solution

[12:44] <moritz_> short INS, or ins

[12:44] <moritz_> ;-)

[12:45] <literal> if only the past tense of read were more distinguishable from its present tense in English

[12:45] *** payload1 left
[12:46] <literal> .recorded works, though

[12:46] <literal> but that sounds more like something that's been written

[12:47] <moritz_> .read-past-tense ;-)

[12:47] * moritz_ isn't up for serious discussions today

[12:47] <literal> .has-read

[12:48] <moritz_> .I-HAS-READ

[12:48] <literal> that would be the Perl6::LOLCAT grammar version

[12:49] <literal> or...lolcat Setting

[12:52] <literal> damn, github has cool graphs

[12:55] <jeremiah_> literal: URL?

[12:55] <jeremiah_> I likes me pretty graphs. :)

[12:55] <literal> http://github.com/rakudo/rakudo/graphs/impact

[12:55] <literal> this for example

[12:55] <literal> and other graphs there under the "Graphs" tab

[12:55] <jeremiah_> Whoah. That is cool.

[12:58] <moritz_> somehow I feel that overrepresents my impact

[12:59] * masak back from walk

[12:59] <masak> ok, so we agree that my patch is bad. :)

[13:00] <masak> and I was wrong about the spectests -- it actually makes a few of them fail.

[13:00] * masak investigates

[13:00] *** pmurias joined
[13:07] <masak> whoa... my patch introduces a really strange bug. :/

[13:08] <masak> I do 'perl6 t/spec/S16-filehandles/io.rakudo', and after the last line '# FUDGED!', Rakudo re-prints the plan, '1..58'.

[13:08] <masak> if I add an 'exit 0' at the end of the test file, it stops doing that.

[13:08] * masak compiles to PIR and diffs

[13:09] <moritz_> rakudo: use Test; plan 1; isa_ok True, Bool::True

[13:09] <p6eval> rakudo 0310a3:  ( no output )

[13:10] <jnthn> masak: Show me the patch?

[13:10] <masak> http://gist.github.com/90740

[13:10] <masak> the PIR diff says I have an extra 'say' call at the end :/

[13:14] *** donaldh joined
[13:14] *** ejs1 joined
[13:15] <jnthn> + $I0 = ins

[13:15] <jnthn> + inc $I0

[13:15] <jnthn> + ins = $I0

[13:15] <jnthn> inc ins # should do it

[13:15] <masak> it didn't.

[13:15] <jnthn> Or even better perhaps

[13:15] <jnthn> 'prefix:++'(ins)

[13:15] <masak> because I didn't find a way to initialize it as 0.

[13:16] <masak> and I got an error 'Undef mumble mumble inc'.

[13:16] <jnthn> 'prefix:++'(ins) # should auto-viv

[13:16] <masak> ok, trying that.

[13:17] <masak> maybe I should follow moritz_++'s advice too, and put ins-inc'ing in a method...

[13:17] <moritz_> rakudo: say :!foo.value

[13:17] <p6eval> rakudo 0310a3: OUTPUT«0␤»

[13:23] *** araujo left
[13:23] *** ejs left
[13:28] *** Tene_ joined
[13:38] *** iblechbot_ joined
[13:40] *** Tene left
[13:41] <masak> feh, running the spectests takes a lot of time nowadays...

[13:41] <moritz_> yes

[13:41] <moritz_> I should really look into making it parallel again

[13:42] <masak> again? what made it not parallel?

[13:42] <moritz_> the switch away from parrot's harness

[13:42] <masak> oh.

[13:44] <PacoLinux> for me, making the spectest on saturday took 29 mins, yesterday was nearby 70 mins 

[13:45] *** riffraff joined
[13:45] <masak> next time I'll time it.

[13:47] *** c9s joined
[13:48] <jnthn> Ouch. That's...quite an increase.

[13:48] <masak> two thirds of the files in t/spec are listed in t/spectest.data.

[13:49] <moritz_> that's both good and bad

[13:49] *** c9s_ joined
[13:49] <moritz_> bad because it means we need many more tests

[13:49] <masak> 348 out of 544.

[13:49] *** c9s_ left
[13:49] * masak idly wonders if he could get a non-GSoC grant for writing S09 tests this summer

[13:50] *** c9s_ joined
[13:50] *** iblechbot left
[13:50] <literal> you should apply for a TPF grant

[13:50] <moritz_> I guess the hague grants are limited to actualy implementation work

[13:51] <moritz_> but I'm not sure about the policy

[13:51] <masak> moritz_: I think so too.

[13:51] *** c9s is now known as c9s__

[13:51] <masak> would be fun to apply for a Hague grant, if I found some niche of Rakudo where I felt I could really make a difference.

[13:51] *** ejs1 left
[13:52] <masak> literal: maybe a TPF grant is the right answer for that. just going to finish my current one first. ;)

[13:52] *** c9s_ is now known as c9s

[13:53] <moritz_> "Grants will be made to projects which obviously and concretely advance the completion of a Perl 6 implementation. Other Perl 6 projects, while potentially very worthwhile, are not the focus of Hague grants."

[13:53] <moritz_> from http://www.perlfoundation.org/ian_hague_perl_6_development_grants

[13:54] <moritz_> that still leaves a bit space open for discussion

[13:54] <moritz_> if some implementors assert that thorough tests are vital for this area of implementation

[13:55] <masak> maybe I could write tests and then help implement them.

[13:56] <masak> jnthn: changing to 'prefix:++'(ins) worked fine, all spectests pass now. do I commit?

[13:57] <jnthn> masak: Can you show me final patch you're about to commit?

[13:58] <masak> certainly. hold on.

[13:58] <jnthn> S09 - I am pondering filing a proposal.

[13:58] <jnthn> To work on some implementation.

[13:58] <jnthn> Once I'm done with my current grant.

[13:58] <jnthn> Having test coverage work going on at the same time would to me at least seem a nice thing.

[13:58] <masak> I think I would like writing those tests.

[13:58] <masak> http://gist.github.com/90763

[13:59] *** payload joined
[14:02] <jnthn> I think your tests would make a harsh mistress. :-)

[14:03] <jnthn> masak: Patch looks OK to me.

[14:03] <jnthn> You could btw have written method ins in PIR

[14:03] <jnthn> erm

[14:03] <jnthn> in Perl6

[14:03] <jnthn> method ins { $!ins }

[14:03] <masak> I'll do that, and then commit.

[14:05] <moritz_> would a 'has $.ins' also work?

[14:06] <jnthn> not here

[14:06] <moritz_> because it's used from PIR before?

[14:06] <jnthn> well, it may if the stage 1 promised to never use them...

[14:07] <moritz_> which adds unwanted interdepencies, right

[14:07] <jnthn> If we totally pull IO out of the stage 1, OTOH (which would be fine) then yes, that would work then.

[14:07] <jnthn> Yeah, I'm trying to keep the S1 clean of dependencies on the setting.

[14:07] <jnthn> Not entirely sucessfully though. :-(

[14:08] <moritz_> make spectest takes 23 minutes here

[14:08] <masak> would .ins be 'is export' or not?

[14:09] <moritz_> masak: don't think so

[14:09] <jnthn> think not

[14:10] <masak> good, then I don't think so either.

[14:10] <moritz_> democractic coding ;-)

[14:11] <PerlJam> When we we know how many slots TPF has for gsoc?

[14:11] <masak> the tyrrany of the #perl6 majority. :)

[14:11] <PerlJam> (or, if "we" already know, how many slots did TPF get? :)

[14:11] <literal> close to April 20th probably

[14:14] *** brunoV joined
[14:14] *** alester joined
[14:15] *** Front_slash joined
[14:19] *** dKingston joined
[14:21] <jnthn> OK, time for me to go to pm group

[14:23] <ihrd> jnthn: bye!

[14:23] *** b2gills joined
[14:23] <PerlJam> jnthn: have fun!

[14:23] <jnthn> Will do! :-)

[14:25] *** meppl joined
[14:28] *** ihrd left
[14:29] *** pjcj left
[14:30] *** pjcj joined
[14:35] <pmichaud> good morning #perl6

[14:35] <PerlJam> good morning Pm

[14:37] <masak> hi pm

[14:43] <dalek> rakudo: e83b2b8 | (Carl Masak)++ | src/ (2 files):

[14:43] <dalek> rakudo: implemented IO.ins

[14:43] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/e83b2b8196eb091fde20ecd06c3b859bf2dfb85a

[14:44] <pmichaud> (hague grants and tests) -- I think a case could be made that S09 tests are on the critical path.

[14:45] *** brunoV left
[14:47] <literal> masak: btw, what does "ins" stand for?

[14:48] <masak> literal: the number of records (normally lines) that have been read in.

[14:48] <literal> yes, but "ins" isn't a word :P

[14:48] <masak> literal: neither is sprintf.

[14:49] <literal> but it means something

[14:49] <moritz_> but it is short for "string print formatted" or so

[14:49] <literal> is "ins" supposed to be a plural of "in" or something?

[14:49] <moritz_> that might be it

[14:50] <masak> aye.

[14:50] <literal> I would have gone for .nr (like Perl 5's $NR)

[14:50] <masak> the alternatives were much worse, and then TimToady suggested 'ins'.

[14:50] <masak> I immediately took a liking to it.

[14:50] <PerlJam> literal: you mean like AWK's $NR  *shudder*

[14:50] <literal> I guess

[14:52] <PerlJam> masak: so ... does that mean there's an IO.outs in our futures?

[14:53] <masak> PerlJam: only time will tell. but S32/IO.pod seems to suggest that.

[14:54] *** elmex joined
[14:55] *** brunoV joined
[15:00] *** exodist joined
[15:01] <mberends> ahem: .ins and .outs: http://irclog.perlgeek.de/perl6/2009-03-14#i_984777

[15:01] <masak> mberends++

[15:02] <masak> but know that that was after throwing about alternatives for quite a while.

[15:02] <mberends> yep

[15:02] <literal> cool

[15:04] *** cognominal left
[15:06] *** mofino joined
[15:09] *** justatheory joined
[15:19] *** cognominal joined
[15:20] *** donaldh left
[15:20] *** donaldh joined
[15:22] <dalek> rakudo: 8f4dc52 | pmichaud++ | docs/spectest-progress.csv:

[15:22] <dalek> rakudo: spectest-progress.csv update: 349 files, 8436 passing, 0 failing

[15:22] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8f4dc52a68fdc38dbd2ca675de00943f8a789998

[15:23] * masak accidentally relies on the (nonexistent) laziness of =$*IN

[15:28] <PacoLinux> make spectest  back to  27m38.179s (maybe my machine was cpu busy yesterday :) )

[15:30] <masak> probably.

[15:30] <[particle]> pacolinux: what was it before?

[15:30] <masak> it took 28 minutes here.

[15:31] <PacoLinux> saturday 29 mins, sunday 77 mins

[15:31] <masak> today's short'n'sweet script: one that extracts all TODO comments out of a Perl script. here done for proto's installer: http://gist.github.com/90800

[15:32] *** nihiliad joined
[15:33] <PerlJam> your length tolerance on one-liners is clearly more than mine.

[15:33] <masak> :P

[15:34] <masak> it can probably be golfed a bit; a one-liner to me is simply a script that can be written on the command line.

[15:35] <PerlJam> Me too, but there's a threshhold at which it becomes an actual file on disk and yours would have reached that threshhold for me.

[15:35] <literal> my $line = $*IN.readline  <-- can't this be written as my $line = =$*IN;  ?

[15:35] <PerlJam> (of course, it would have probably then started gaining features and such)

[15:35] <masak> literal: yes.

[15:36] <masak> PerlJam: the command line has an impressively short feedback loop. at least for me.

[15:36] <masak> it has many disadvantages, too. but I like the short feedback loop.

[15:44] *** Tene joined
[15:46] *** dukeleto|work joined
[15:47] *** mberends left
[15:47] <dukeleto|work> mornin'

[15:47] <moritz_> hi there

[15:48] <masak> oh hai

[15:53] <mofino> Can you guys feel that?  IT'S PERL SIX!

[15:54] <masak> mofino: indeed.

[15:54] *** pedrolance joined
[15:54] *** pedrolance left
[15:54] <masak> mofino: so, have you written your first module in Rakudo yet? :)

[15:55] <mofino> no sir, I was just thinking about that

[15:55] <mofino> it'

[15:55] <dukeleto|work> mofino: my sigil sense is tingling

[15:55] <mofino> it's time to invest some effort in learning perl6

[15:55] <masak> high time, I'd say.

[15:55] <mofino> high time?!  but it's only noon!

[15:55] <sitaram> what's the best way for a perl5 old hand who's kinda lost touch to do that? (learn perl6.  fast)

[15:56] *** Tene_ left
[15:56] <masak> mofino: http://use.perl.org/~masak/journal/38184

[15:56] <masak> mofino: and that was in December. :)

[15:56] <dukeleto|work> masak: is there a document describing how to create and package Rakudo modules?

[15:56] <masak> dukeleto|work: don't know exactly what you mean, but we're working on similar things in proto.

[15:57] <masak> dukeleto|work: it's quite similar to the Perl 5 way, I'd say.

[15:57] <masak> sitaram: hanging around here is not a bad idea.

[15:57] <masak> sitaram: otherwise, I can recomment moritz_'s blog, the specs, and Actually Writing Something in Rakudo.

[15:57] <pmichaud> Parrot has its own ideas about how language modules should be packaged.  I haven't quite decided if I agree with Parrot's notions.

[15:58] <sitaram> masak: step 1: I

[15:58] <sitaram> masak: step 1: I'm on it (hanging around here...!)

[15:58] <dukeleto|work> pmichaud: which parrot notions are you not agreeing with?

[15:58] <brunoV> hi all, I want to start playing around with rakudo. I checked out three weeks ago or so, how often do you think I should update?

[15:58] <sitaram> step 2/3 -- I'll google and come back if I can't easily/obviously find them

[15:59] <sitaram> step 4: will do -- thanks masak 

[15:59] <pmichaud> the idea that language-specific libraries belong under /usr/lib/parrot, I think.

[15:59] <masak> sitaram: np. good luck!

[15:59] <masak> and do ask, about anything.

[15:59] *** c9s__ is now known as c9s_

[16:00] <masak> brunoV: depends on what you want to do.

[16:00] <masak> brunoV: nowadays, it's enough to take the monthly releases, unless you're VERY cutting-edge.

[16:00] <dukeleto|work> brunoV: it changes every hour, updating once a day is usually enough to get the latest features

[16:01] <PerlJam> brunoV: I update once a day or so just to see what's new.  Many  times I'm pleasantly surprised.  Occasionally I'm bummed that there's nothing new  :)

[16:01] <dukeleto|work> brunoV: but if you are looking for stability, stick with monthly releases

[16:01] *** cognominal left
[16:01] <brunoV> masak, dukeleto, PerlJam, thanks! so you pull from github, right?

[16:01] <PerlJam> brunoV: aye

[16:02] <masak> brunoV: I pull from github, but the projects I develop are tested against the monthlies.

[16:02] <masak> (so that other people won't have to pull from github if they don't want to)

[16:03] *** Psyche^ joined
[16:03] *** xinming left
[16:03] <brunoV> thanks all, I'll update then

[16:03] <dukeleto|work> brunoV: yes, I have a fork on github where I add features and then I do a "pull request" to the rakudo github user when I want them to check it out

[16:04] *** xinming joined
[16:04] *** exodist left
[16:04] <brunoV> dukeleto, ooo but I am so far from messing with the source code! I'm barely starting to play with the language

[16:04] *** xinming left
[16:04] *** exodist joined
[16:04] <pmichaud> note that pull requests tend to get lost or ignored right now.

[16:04] <pmichaud> at least, I'm generally not looking at them.

[16:05] *** Whiteknight joined
[16:05] <dukeleto|work> pmichaud: what is the preferred method now? patches and tickets on RT?

[16:06] <pmichaud> Yes.

[16:06] <pmichaud> See the wiki pages that describe the preferred method.

[16:06] <dukeleto|work> pmichaud: good to know

[16:07] <dukeleto|work> pmichaud: I thought that the github-squashed-feature-branch was also one of the submission methods, but I guess that was mortiz's suggestion

[16:08] *** cognominal joined
[16:09] *** Front_slash left
[16:10] <literal> sitaram: this is definitely useful -> http://perlgeek.de/blog-en/perl-5-to-6/

[16:10] <moritz_> dukeleto|work: after the move to git we were trying different methods; this was one of the attempts

[16:10] * PerlJam slowly kills himself with bratwurst

[16:10] <sitaram> literal: I just saw that, and the other 2 categories in it, (perl-6 and perl-tips) -- thanks!

[16:11] <masak> sitaram: found the spec yet?

[16:11] * masak is on his way to go swimming

[16:11] <sitaram> not yet; still on one of the other pages + multitasking :(

[16:11] <literal> http://perlcabal.org/syn

[16:12] <masak> literal++

[16:12] <sitaram> thanks...  (found moritz's blog easy enough of course...)

[16:12] <masak> sitaram: read moritz_'s stuff first. the specs are for in-depth study.

[16:13] <sitaram> (and it's the first hit on google for "perl 6 spec")

[16:13] <sitaram> masak: looks like it; thanks

[16:14] <sitaram> actually I did go through the apocalypses a long time ago, but forgot most due to non use, and even my perl 5 is rusty...

[16:14] *** OuLouFu is now known as orafu

[16:14] <sitaram> (looking forward to getting my hands dirty again)

[16:14] <masak> sitaram: the apocalypses are superseded many times over. :)

[16:14] <literal> the apocalypses are interesting reading

[16:14] <masak> literal: they are indeed.

[16:14] <masak> but they also show their age.

[16:14] <literal> more down-to-earth than the specs, though outdated :P

[16:15] *** Patterner left
[16:15] *** Psyche^ is now known as Patterner

[16:15] <masak> I think a thesis could be written merely on the diffs between the apocalypses and the spec.

[16:15] <masak> and the rationales behind them.

[16:16] * sitaram hardly remembers any of the apocalypses so their being superseded doesn't matter :)

[16:17] <sitaram> (except the regex one; since I used Parse::RecDescent a fair bit once)

[16:17] *** smtms left
[16:18] *** meppl left
[16:18] <masak> sitaram: that'd be S05 nowadays. it's changed quite a bit.

[16:18] *** masak left
[16:19] <sitaram> regexes are what originally hooked me into perl back in the day, so I'll be able to grok them well enough; it's the rest of it that'll be a bit of a challenge :)

[16:20] *** zamolxes left
[16:23] *** dKingston left
[16:23] <moritz_> IMHO regexes/grammars are one of the killer features of Perl 6, and the one that's best implemented in Rakudo right now

[16:24] <PerlJam> Is it specced somewhere that you can do array-unpacking in pointy blocks?  my @aoa = [ [1,2],[3,4] ];  for @aoa ->  [$a,$b] { ... }   

[16:25] <pmichaud> std:  my @aoa;  for @aoa -> [$a, $b] { ... }

[16:25] <p6eval> std 26099: OUTPUT«ok 00:02 37m␤»

[16:25] <PerlJam> Well, that STD likes it is good enough I guess :)

[16:26] <moritz_> PerlJam: yes, it is. Either in S04 or S06

[16:31] *** spooneybarger joined
[16:33] *** spooneybarger left
[16:41] *** xinming joined
[16:41] <pugs_svn> r26100 | lwall++ | Be explicit about design uncertainty wrt semantics of junctional collapse.

[16:41] *** hercynium joined
[16:45] *** orafu is now known as OuLouFu

[16:45] *** OuLouFu is now known as orafu

[16:51] *** kane__ joined
[16:51] *** gbacon left
[16:55] *** kane_ left
[16:59] *** gbacon joined
[17:10] *** donaldh left
[17:11] *** sitaram left
[17:12] *** riffraff left
[17:13] *** c9s_ left
[17:16] *** gdonald joined
[17:31] *** gdonald_ joined
[17:31] *** zamolxes joined
[17:33] *** c9s_ joined
[17:35] *** orafu left
[17:40] *** eternaleye left
[17:40] *** gdonald left
[17:42] *** zamolxes left
[17:46] *** gdonald joined
[17:55] *** gdonald_ left
[17:59] *** ejs joined
[17:59] *** barney joined
[18:01] *** gdonald_ joined
[18:08] *** hercynium left
[18:10] *** gdonald left
[18:14] *** icwiener joined
[18:16] *** gdonald joined
[18:22] *** icwiener left
[18:24] *** stevenhirsch left
[18:24] *** hercynium joined
[18:25] *** gdonald_ left
[18:26] *** gdonald_ joined
[18:28] *** PZt joined
[18:29] *** ejs left
[18:36] *** PhatEddy joined
[18:37] <PhatEddy> perl: print "hello\n"

[18:39] <PhatEddy> in perl one can print/stringify a qr// regex, is there anything similar for p6?

[18:41] *** gdonald left
[18:41] <TimToady> nothing is specced

[18:41] <[particle]> ohm

[18:43] <PhatEddy> For split() I would like to do some introspection to see if a regex does capturing.  Trying to worry about cases like /(A)|B/.

[18:44] <PhatEddy> Anyone have a thought on how?

[18:48] <pmichaud> my guess would be to see if either list or hash context produces a non-empty list/hash

[18:48] <pmichaud> (of the resulting match)

[18:48] <pmichaud> for the regex itself... not sure how that would work.

[18:49] <pmichaud> I don't think we have that level of introspection yet.

[18:50] *** gdonald_ left
[18:51] <PhatEddy> The problem being that if the 'b' matches then nothing is returned but "perldoc -f split" indicates we should add an undef to the return list.

[18:52] <PhatEddy> Seems like maybe a todo ...

[18:53] <pmichaud> rakudo:  say split(/b/, 'b').perl;

[18:53] <p6eval> rakudo 0310a3: OUTPUT«["", ""]␤»

[18:53] <pmichaud> doesn't look like "nothing is returned"

[18:54] <pmichaud> or if you mean from a match

[18:54] <TimToady> rakudo: say split(/(b)/, 'b')

[18:54] <p6eval> rakudo 0310a3: OUTPUT«␤»

[18:54] <TimToady> rakudo: say split(/(b)/, 'b').perl

[18:54] <pmichaud> rakudo doesn't know what to do with captures yet, no.

[18:54] <p6eval> rakudo 0310a3: OUTPUT«["", ""]␤»

[18:54] <pmichaud> (in split)

[18:54] <TimToady> should possibly be an :option

[18:55] <pmichaud> I'm not exactly sure what should happen there.

[18:55] <pmichaud> should the split parts be interleaved with the captured match objects?

[18:55] <PhatEddy> I have a patch for the captures (it's an rt) but '1A2B3'.split(/(A)|B/ doesn't work right yet ...

[18:55] <pmichaud> PhatEddy: I'm thinking the spec needs some work.

[18:55] <pmichaud> Perhaps I'm wrong... but I'd want to see a few test cases.

[18:56] *** araujo joined
[18:56] <pmichaud> for example, with  '1A2B3'.split(/(A)|B/)  ..... what should be returned?

[18:57] <TimToady> spec says alternating strings and Match objects, basically

[18:57] <pmichaud> because of the capture, or because of a flag, or ...?

[18:58] <TimToady> that's why I suggested a flag :)

[18:58] <pmichaud> Right.

[18:58] <pmichaud> we also have things like

[18:58] <pmichaud> '1A2B3'.split( / $<a>=(A) | B /)

[18:58] <pmichaud> and

[18:58] <TimToady> and then it doesn't auto-trigger just because you split on /(x)$1/ or some such

[18:59] <PhatEddy> in perl5 the example returns ['1', 'A', '2', undef, '3']

[18:59] <TimToady> right

[18:59] <pmichaud> '1AX2B3'.split( / (A(X)?) | B /)

[19:00] <TimToady> that's why it returns a Match in P6

[19:00] <TimToady> if you want to get fancier, then a comb is probably better

[19:01] <TimToady> but if Match behaves like Capture, then maybe it's responsive to list/slice context in terms of flattening

[19:01] <TimToady> but I still think that argues for an explicit flag if you want the delimiter match

[19:02] <pmichaud> anyway, Rakudo wants a clearer spec.

[19:02] <pmichaud> (for split)

[19:02] <TimToady> then we don't have to introspect the Regex, which seems evil(ish)

[19:02] <TimToady> not quite as dwimmy as p5, admittedly

[19:03] <pmichaud> well, if it was a flag, then ['1', Match of A, '2', Match of B, '3']  would still do what was generally wanted in string contexts.

[19:04] <pmichaud> i.e.,   for '1A2B3'.split(/(A)|B/, :flag) { .say }    # '1', 'A', '2', 'B', '3'

[19:04] <TimToady> could possibly distinguish flags for the internal context too

[19:04] <TimToady> :str :list :slice or some such

[19:04] <pmichaud> I agree that match can be responsive to list/slice context

[19:04] <TimToady> but interspersed Matches might be good enough

[19:05] <pmichaud> I'm happy to provisionally adopt interspersed Matches for experimentation purposes

[19:05] <pmichaud> we just need a flag :-)

[19:05] <pmichaud> fwiw, in PHP it's   PREG_SPLIT_CAPTURE_DELIM

[19:06] <PhatEddy> pmichaud: should the 'B' really be captued in that last example?

[19:06] <TimToady> :all maybe

[19:06] <pmichaud> and would we want a similar option for comb ?

[19:06] <TimToady> no

[19:06] <pmichaud> okay, good.  :-)

[19:06] <TimToady> you can always write (.*?) to get that in comb

[19:06] <TimToady> or some such

[19:07] <TimToady> comb is really just syntactic sugar for m:g//

[19:07] <TimToady> biab &

[19:08] *** dukeleto|work left
[19:13] <PhatEddy> Well the rt is 64062 and I was hoping to update it with the newest patches today or tomorrow.

[19:13] <PhatEddy>  For the moment I may note that the spec is in progress and add a delim flag I guess?

[19:14] <pmichaud> yes.

[19:25] *** meppl joined
[19:27] <TimToady> the reason I suggested :all is that :delim (or :delims) seems to suggest returning *only* the delims

[19:27] *** NoirSoldats left
[19:27] *** plash left
[19:28] <TimToady> and the possible abbreviations fo :delims are ambiguous in various ways

[19:32] *** NoirSoldats joined
[19:32] <PhatEddy> for the moment then I expect the delim flag will be ':all'

[19:33] <pmichaud> agreed, :all

[19:34] *** dukeleto|work joined
[19:37] <PhatEddy> I didn't quite understand the other proposed flags but think I can muddle along until they show up in a spec someplace ...

[19:48] *** dKingston joined
[19:52] <pugs_svn> r26101 | lwall++ | [S32/Str] add :all flag to split

[19:57] *** cdarroch joined
[19:58] *** barney left
[20:11] <PhatEddy> Sorry but looking now at the spec and rt 64062 the premise of the ticket, in terms of return values seems not quite right (http://rt.perl.org/rt3/Public/Bug/Display.html?id=64062)

[20:12] <PhatEddy> Where the initial ticket indicates dashes there should be match objects - no?

[20:13] <[particle]> looks like i'm going to have time to work on S19 again very soon

[20:14] <[particle]> which means i'll be writing tests. yay!

[20:19] <moritz_> so did the order of arguments to the sub form of split() just change?

[20:19] <pmichaud> PhatEddy: go by the spec.  The ticket has people thinking in terms of p5-split (which is different from p6-split)

[20:21] <pmichaud> moritz_: yes, it looks to me as though someone added 'is export' at some point in the spec's history

[20:21] <pmichaud> moritz_: I think that's probably an error... checking history.

[20:23] <pmichaud> no, that's not it.  Apparently it's been 'is export' for quite some time.

[20:28] *** sri_kraih_ joined
[20:31] <pmichaud> apparently goes back to 2006:  http://irclog.perlgeek.de/perl6/2006-09-24#i_-134460

[20:32] <pmichaud> I'm not sure where we picked up the p5-meme that   split(/rx/, $val)  should work.

[20:33] <pmichaud> maybe the spectests were incorrect and we followed those.

[20:34] <PhatEddy> isn't split(/rx/, $val) the second split prototype in the spec?

[20:35] * PhatEddy dawns that the spec might be revised

[20:36] <pmichaud> Note that the first (invocant) argument of both split functions in the current S32 are Str

[20:36] <pmichaud> split(/rx/, $val) would be looking for a function with a Regex as the first arg.

[20:42] *** sri_kraih left
[20:55] *** iblechbot joined
[20:57] *** meppl left
[21:00] <moritz_> dukeleto: ping

[21:07] *** Whiteknight left
[21:08] *** iblechbot_ left
[21:13] *** araujo left
[21:13] *** araujo joined
[21:28] *** PerL_MonK joined
[21:32] *** payload left
[21:34] *** [particle] left
[21:42] *** nihiliad left
[21:45] *** pmurias_ joined
[21:46] *** pmurias_ left
[21:49] *** jan_ left
[21:50] *** pmurias_ joined
[21:51] *** pmurias_ left
[21:55] *** jan joined
[21:55] *** pmurias_ joined
[21:55] *** jan is now known as Guest59237

[21:56] *** FurnaceBoy joined
[21:56] *** Lyle joined
[21:56] <Lyle> hi

[21:57] <PerlJam> hello

[21:57] <Lyle> Been playing about with Rakudo for the first time

[21:57] *** pmurias_ left
[21:57] <PerlJam> cool

[21:58] <Lyle> Got it working through CGI with apache, but no luck with IIS

[21:58] <Lyle> Settings are all right by IIS isn't picking up the output for some reason

[21:58] *** meppl joined
[21:58] *** dKingston left
[21:58] <Lyle> I've put a request in IIS.net and emailed Jan (ActiveState) about it, but he's away for a week

[21:59] *** dKingston joined
[21:59] *** pmurias left
[21:59] *** archpollux joined
[22:00] *** archpollux left
[22:00] *** pmurias joined
[22:01] *** c9s_ left
[22:03] <Lyle> Trying to get November to work on Vista as well

[22:03] <PerlJam> awesome.

[22:04] <Lyle> Not much luck yet, but I have managed to come up with 4 patches to help it build already :)

[22:04] <moritz_> Lyle: ah, that was you... does Rakudo build on vista without modifications now?

[22:05] <Lyle> I haven't downloaded the current tree yet

[22:05] <Lyle> I'll give it a go in a min :) I'm still downloading the zip, I'll have to teach myself git at some point

[22:05] <moritz_> no hurry; just let me know the result

[22:23] *** payload joined
[22:24] *** iblechbot left
[22:32] *** PhatEddy left
[22:35] *** Aisling joined
[22:46] *** nihiliad joined
[22:51] *** cognominal left
[22:58] <diakopter> std: 3**7;0b1

[22:58] <p6eval> std 26101: OUTPUT«ok 00:02 35m␤»

[23:03] *** exodist left
[23:05] *** pmurias left
[23:09] *** ruoso joined
[23:12] <ruoso> Hello!

[23:12] <diakopter> ruoso: hi

[23:13] <ruoso> so... what's new...

[23:18] *** mikehh joined
[23:19] * diakopter in 'gone dark' mode

[23:24] * ruoso trying to get 3g modem to work on linux... 

[23:25] <ruoso> is the last change in junctions made to simplify "1 < 1|5 < 5"?

[23:29] *** Whiteknight joined
[23:30] *** amoc joined
[23:51] <Lyle> moritz: yes the latest does build on vista without modification. Thanks :)

[23:53] *** DemoFreak left
