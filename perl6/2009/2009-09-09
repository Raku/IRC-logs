[00:00] <ruoso> I'm actually not sure it's worth splitting the two objecsts

[00:01] <TimToady> Num is narrower than Rat

[00:01] <TimToady> in terms of precision

[00:02] <ruoso> I was meaning in terms of signature match

[00:03] *** cdarroch left
[00:04] <TimToady> pragmatically, they should probably be considered equivalent, but useful as tiebreakers

[00:04] *** frew__ joined
[00:05] * ruoso uses Rat then

[00:08] *** ihrd joined
[00:09] *** arnsholt joined
[00:28] *** nErVe left
[00:29] <frew__> pmichaud: ping?

[00:35] *** zerhash left
[00:40] *** sri_kraih left
[00:41] *** sri_kraih joined
[00:42] *** nbrown joined
[00:53] *** mrsaturn left
[00:54] *** meppl joined
[01:03] *** xinming left
[01:08] *** justatheory left
[01:08] *** justatheory joined
[01:09] *** justatheory left
[01:09] *** justatheory joined
[01:11] *** mrsaturn joined
[01:11] *** hercynium left
[01:14] *** patspam left
[01:15] *** mrsaturn left
[01:15] <pmichaud> frew__: pong

[01:15] <pmichaud> oops, I forgot tonight was meeting night (I couldn't have made it anyway -- too many things going on around the house)

[01:15] <frew__> yeah, I figured that

[01:19] <zaphar_ps> has anyone been able to build recent rakudo on Mac OSX?

[01:20] <zaphar_ps> actually rakudo might build just fine but the parrot revision it has as a dependency is broken

[01:22] *** sevvie left
[01:23] *** ysth joined
[01:29] <colomon> zaphar_ps: Yes

[01:29] *** nihiliad joined
[01:29] <zaphar_ps> yes you have built it or yes it's broken on OSX right now?

[01:30] <colomon> I took this afternoon's Rakudo from github, changed build/PARROT_REVISION to 41159, and then did the standard perl Configure.pl --gen-parrot build process.

[01:30] <colomon> It fails a few spectests, but other than that works okay.

[01:30] <zaphar_ps> ok so that revision builds just fine then?

[01:31] *** frew__ left
[01:31] <colomon> Yes, that was the latest Parrot as of earlier today, and it builds just fine.

[01:32] <zaphar_ps> thanks

[01:32] <colomon> You're welcome.

[01:33] *** etoxam joined
[01:34] *** sevvie joined
[01:35] *** frew__ joined
[01:43] *** mrsaturn joined
[01:50] *** agentzh joined
[01:53] *** Whiteknight left
[01:54] *** __ash__ joined
[01:57] *** frew__ left
[02:05] *** ihrd left
[02:12] *** frew__ joined
[02:13] *** payload left
[02:13] *** __ash__ left
[02:13] *** etoxam left
[02:19] *** etoxam joined
[02:27] <pugs_svn> r28208 | ruoso++ | [spec-S32-Temporal] Complete rewrite of Temporal.pod taking into account today IRC talks, TAI time, alternative calendars, time-zone information and, most importantly, the perl 5 DateTime API 

[02:27] <ruoso> TimToady, ^^

[02:32] *** nihiliad left
[02:32] *** nihiliad joined
[02:32] <pugs_svn> r28209 | ruoso++ | [spec-S32-Temporal] minor pod fixes 

[02:33] *** vmbrasseur joined
[02:40] *** patspam joined
[02:41] <pugs_svn> r28210 | ruoso++ | [spec-S32-Temporal] Gregorian::Duration doesnt have a time-zone. 

[02:47] *** hercynium joined
[02:48] <PerlJam> "most importantly"?

[02:48] <PerlJam> :-)

[02:49] <jnthn> heh

[02:51] <ruoso> PerlJam, ok... maybe I over-stated that ;)

[02:52] <frew__> wayland76: my roommate says you have a queen

[02:52] <frew__> that's false right?

[02:53] <frew__> also there is no Australian SS in charge of books....right?

[02:53] <PerlJam> frew__: The queen of england is Australia's queen too.

[02:53] <PerlJam> (but what do I know?  I'm just an american)

[02:53] <frew__> srsly?

[02:53] <PerlJam> frew__: last time I checked

[02:53] <frew__> weird..

[02:59] <jnthn> All your Australia are belong to uk.

[02:59] <jnthn> ;-)

[03:00] <akl> canada's, too

[03:00] <akl> yay for the commonwealth

[03:00] <mrsaturn> http://wiki.answers.com/Q/Does_the_Queen_of_England_rule_over_Australia

[03:00] <mrsaturn> is true

[03:01] <akl> I feel like 'kind of' is a better answer to that, but that's nowhere near as conclusive :)

[03:02] <ruoso> as true as any contemporary monarchy can be... at least they share the costs of the people doing nothing ;)

[03:04] *** patspam left
[03:05] *** patspam joined
[03:05] *** jaldhar joined
[03:09] *** patspam left
[03:09] *** patspam joined
[03:26] *** PacoLinux left
[03:31] *** patspam left
[03:31] *** patspam joined
[03:42] *** mepplock joined
[03:47] *** mepplock left
[03:49] <wayland76> Yes, the queen is our head of state.  She appoints the governor-general (who is usually recommended by the prime minister at the time)

[03:50] <wayland76> But just because we have the same queen doesn't mean that the British parliament rules us or anything

[03:51] <wayland76> Just out of interest, I'm under the impression that the Queen officially becomes a Presbyterian when she crosses into Scotland (could be wrong about this, but it was true at one time)

[03:53] <wayland76> As for SS in charge of books, that probably depends what SS stands for :)

[03:57] *** meppl left
[03:58] *** drbean left
[04:04] *** justatheory left
[04:05] <wayland76> ruoso / TimToady: I haven't been following the calendar stuff, but I'm hoping it's been discussed with autarch -- his original plan was to make the basic Temporal stuff quite simple, and to leave the more complex stuff up to non-core modules.  

[04:06] <wayland76> Personally, I don't care, but I think he's a good person to have on board for this kind of stuff

[04:08] *** tak11 left
[04:10] *** ihrd1 joined
[04:12] <wayland76> ruoso: The "multi calendartime" etc don't declare a return value -- maybe  multi calendartime($epoch = time(), $calendar = $*CALENDAR, *%options --> DateTimeWhatever)

[04:15] *** alester joined
[04:15] *** mrsaturn left
[04:17] *** patspam left
[04:22] *** avuserow joined
[04:22] <avuserow> Hi guys. I'm trying to read in binary data using Rakudo's latest release. lines() says that the :bin flag isn't supported. Do I have any other options?

[04:23] <TimToady> .slurp perhaps

[04:25] <avuserow> hm. slurp doesn't even tell me that :bin isn't supported, but it still complains about malformed UTF-8

[04:29] *** ihrd1 left
[04:45] *** ihrd joined
[05:04] *** tarbo2 joined
[05:14] *** vmbrasseur left
[05:18] *** alester left
[05:26] *** frew__ left
[05:29] *** cmv left
[05:30] *** meppl joined
[05:32] *** dukeleto joined
[05:39] *** zamolxes left
[05:40] *** tarbo2 left
[05:41] *** nihiliad left
[05:43] *** tarbo2 joined
[05:49] *** dukeleto_ joined
[05:56] *** dukeleto left
[05:56] *** dukeleto_ is now known as dukeleto

[06:00] *** kidd left
[06:14] *** xinming joined
[06:22] *** ejs joined
[06:29] *** hugme joined
[06:29] <moritz_> good morning

[06:30] <moritz_> avuserow: reading in binary isn't implemented in Rakudo yet, sorry

[06:31] *** Khisanth left
[06:31] <araujo> good local time

[06:31] <lambdabot> araujo: You have 1 new message. '/msg lambdabot @messages' to read it.

[06:32] <moritz_> good global time ;-)

[06:32] *** cotto left
[06:37] *** ejs left
[06:40] *** orafu left
[06:40] *** orafu joined
[06:41] <dukeleto> good localtime()

[06:44] <pugs_svn> r28211 | moritz++ | [perl6.org] include favicon link in the html 

[06:46] <pugs_svn> r28212 | moritz++ | [perl6.org] include type= in the favicon link 

[06:47] <moritz_> somehow my firefox refuses to display the favicon of perl6.org correctly

[06:47] <moritz_> but it could be just caching

[06:47] <moritz_> I noticed before that firefox caches the favicon more aggressively than other stuff

[06:49] <arnsholt> Works for me with Opera

[06:49] <arnsholt> (Assuming Camelia is what you want as a favicon =)

[06:51] <moritz_> it is

[06:53] <moritz_> speaking of opera - I think I finally found something in SVG that firefox renders better than opera ;-)

[06:54] <arnsholt> Heh

[06:56] <moritz_> (it's something related to <text> elements and the dominant-baseline attribute - I haven't figured out the details yet)

[06:58] *** mberends joined
[06:58] *** Khisanth joined
[06:58] *** explorer joined
[06:59] *** araujo left
[07:00] *** stephenlb left
[07:10] *** nbrown left
[07:19] <moritz_> rakudo:  ( { say $^x } ).(3)

[07:19] <p6eval> rakudo 446d49: OUTPUT«too few arguments passed (0) - 1 param expected␤in Main (/tmp/7o0izA2nfH:1)␤»

[07:20] <moritz_> what's wrong with that? is that closure executed immediately?

[07:20] <moritz_> rakudo:  ( {;  say $^x } ).(3)

[07:20] <p6eval> rakudo 446d49: OUTPUT«too few arguments passed (0) - 1 param expected␤in Main (/tmp/YX0UXvlC6G:1)␤»

[07:21] *** ihrd left
[07:24] *** rfordinal joined
[07:26] *** M_o_C joined
[07:27] *** snearch joined
[07:33] *** iblechbot joined
[07:34] *** ejs joined
[07:36] *** rbaumer left
[07:36] *** Bzek joined
[07:40] *** dukeleto left
[07:43] *** drbean joined
[07:43] *** ejs1 joined
[07:52] *** ejs left
[07:55] *** dukeleto joined
[07:55] *** zloyrusskiy left
[08:01] *** zloyrusskiy joined
[08:19] *** snearch left
[08:24] *** mberends left
[08:24] *** dukeleto_ joined
[08:25] *** zamolxes joined
[08:34] *** dukeleto left
[08:34] *** dukeleto_ is now known as dukeleto

[08:37] *** masak joined
[08:37] <masak> oh hai

[08:37] <Matt-W> o/ masak

[08:37] <masak> does anyone want to help me draft a reply to this tweeter?: http://twitter.com/mhalligan/status/3857343212

[08:38] <Matt-W> Hmm

[08:38] <ysth> should be a one-liner of some sort

[08:38] <masak> I'm looking for something that acknowledges that he was trying to be funny, yet informs him about the state of affairs.

[08:39] <Matt-W> I assume it needs to fit in a tweet

[08:39] <masak> Matt-W: yes.

[08:40] <dukeleto> masak: #trollhug ?

[08:41] <masak> dukeleto: that's fine, but verging on rude, I think.

[08:41] <masak> note that audreyt++'s hugging technique doesn't outright call the trolls trolls.

[08:41] <Matt-W> Maybe we should produce several replies independently :)

[08:42] <masak> sure, go ahead.

[08:42] <masak> but I think there's a combination of tongue-in-cheek and matter-of-fact that anyone replying to would benefit from including in their reply.

[08:42] <Matt-W> Yes

[08:42] <Matt-W> If I think of something appropriate, I'll do it

[08:43] <dukeleto> the guy seems like he is talking past his abilities

[08:43] <masak> yes.

[08:43] <masak> we all do, at times.

[08:43] <Matt-W> Like a lot of statements about Perl 6, it comes from a lack of knowledge

[08:43] <masak> it's like, the joke is floating around out there, free for exploitation.

[08:43] <dukeleto> indeed, but there is doing it in a negative way, and a positive way

[08:44] <masak> one possible answer would be: "you know, that's not very funny". but chances are he won't see why.

[08:44] <masak> it might even be people have already given him positive feedback on that joke. he's already had one retweet.

[08:45] *** xomas_ left
[08:48] <masak> how about "hello. if you think that's funny, you might want to check out how far Perl 6 has come at this point" ?

[08:49] <moritz_> "I wonder where I can download a compiler for santa claus?"

[08:49] *** kidd joined
[08:49] <moritz_> and then a link to http://rakudo.org/how-to-get-rakudo

[08:50] <masak> moritz_++

[08:51] <masak> I'll do that one.

[08:52] <Matt-W> Something like "@mhalligan We're working hard to make Perl 6 an everyday reality. Unfortunately, even when the increasingly awesome compiler is finished it won't deliver chocolate, presents or money." possibly

[08:53] <masak> but it will! :)

[08:53] <Matt-W> you can write that module

[08:55] <masak> Chocolate::Presents::Money

[08:56] <Matt-W> I told him that

[08:56] <Matt-W> So you're stuck with it now

[08:56] <Matt-W> :P

[08:57] <masak> that's fine.

[08:57] <masak> I'm glad for this discussion. and for the sudden communal interest in micro-PR.

[08:57] *** athomason left
[08:58] <Matt-W> This is the kind of thing Twitter is so good for

[08:58] <Matt-W> Although he's going to suspect we're conspiring with all the mentions he's going to get

[08:58] <masak> well, we are.

[08:58] <Matt-W> This is true

[08:58] <Matt-W> and there's no point hiding that

[08:58] <Matt-W> need to go now

[08:58] <Matt-W> boring meeting time

[09:01] *** athomason joined
[09:01] *** mberends joined
[09:02] <mberends> good TAI-morning

[09:03] <masak> mberends: \o/

[09:04] <mberends> hi masak, there's a bit more settled in proto TODO

[09:04] <masak> goodie.

[09:04] <masak> I'm in the middle of writing up a weeb, so I'm afraid I cannot do more than skim it.

[09:04] <mberends> it's enough for me to start coding

[09:05] * masak skims

[09:09] <mikehh> rakudo (62879bb) builds on parrot r41171 - make test / make spectest (up to 28212) PASS - Ubuntu 9.04 i386 (g++)

[09:09] <mikehh> rakudo - t/spec/S03-operators/arith.rakudo - TODO passed:   131

[09:09] <mikehh> rakudo - t/spec/S06-multi/proto.rakudo, t/spec/S12-attributes/class.rakudo and t/spec/S14-roles/basic.rakudo - Non-zero wait status: 11 (Segfault after passing tests)

[09:10] <masak> aha. refresh/update. I like.

[09:11] <mberends> masak, if we're "breaking whatever needs to be broken", I'd like to rename config.proto

[09:11] <mberends> *gulp*

[09:12] <masak> why?

[09:12] <mberends> it's very non intuitive (to me). the most intuitive would have been proto.conf

[09:13] <mberends> (principle of least surprise)

[09:13] <masak> config.proto was probably thusly named because I already had deps.proto

[09:14] <mberends> but if you're not keen, we'll leave it

[09:14] <masak> I'm neither keen nor anti-keen, but I don't see an overwhelming need to change it.

[09:15] <mberends> ok, I'll wait another few months ;)

[09:15] <masak> 哈哈

[09:15] <masak> a bigger problem is how to find that file from an arbitrary directory.

[09:16] <mberends> ah

[09:16] <moritz_> ~/.ecosystem/proto/config ?

[09:16] *** sevvie left
[09:16] <masak> moritz_: but ~/.perl6lib (as it's called nowadays) is for modules, not for config files...

[09:17] <masak> might as well put it as ~/.proto.conf, in that case.

[09:17] <mberends> ~/.proto/config

[09:17] <moritz_> what about a ~/.perl6/ which contains lib/ and other stuff?

[09:17] <masak> mberends: ah, yes. better.

[09:17] <moritz_> anyway, I should stop bikeshedding :-)

[09:18] <mberends> moritz_: :-) your ideas are always welcome

[09:18] *** _tim__ left
[09:19] <masak> hehe. "laziness++ ;)" ;)

[09:20] <mberends> we could switch Rakudo to moritz_++'s idea (~/.perl6/lib) now quite trivially, before too much depends on it

[09:20] <masak> fine by me.

[09:20] * mberends likes ~/.perl6/lib a lot. moritz_++

[09:21] <masak> mberends: done skimming. kudos on the fine plan.

[09:21] <masak> I have but one remaining concern.

[09:21] *** sevvie joined
[09:21] <masak> I'll try to put it into words.

[09:22] <masak> we're setting a bit of a bad precedent here, with this non-root, $HOME-only installation.

[09:22] <mberends> true

[09:22] <masak> the proto philosophy is to do good behind the scenes.

[09:22] <masak> I fear that this might do some harm.

[09:23] <masak> take 'pun' as an example of when the $HOME-only install is not only meaningless, but outright wrong.

[09:23] <masak> pun has no modules, only three script files.

[09:23] <mberends> the "installed rakudo" has another lib/ directory, but installing requires root in  many environments

[09:24] <masak> a 'make install' target (which it currently doesn't have, but it would be a good idea) would put the script files in a /bin directory somewhere.

[09:24] <moritz_> so you could look in ~/.perl6/proto/config or so if proto is configured for home or global installation

[09:24] *** _tim__ joined
[09:24] <masak> moritz_: yes.

[09:24] <masak> at least with user accounts configured for 'sudo', it would work.

[09:26] <moritz_> well, if the user has root privs she can also make the global installation dir writable for her user or group

[09:26] <moritz_> I think perl 5's CPAN.pm as an 'acquire root' command config

[09:26] <moritz_> which you can leave empty if you install in ~

[09:29] <mberends> masak, could we run the pun scripts into parrot_install/lib/1.5.0-devel/languages/perl6/ ? that seems to do duty as a kind of installed bin/ directory.

[09:30] <mberends> although it makes no sense to add that dir to $PATH

[09:30] <masak> for pun especially, that would be fitting.

[09:30] <masak> (since pun provides alternative executables)

[09:32] <mberends> the perl6 "executable" is in /home/martin/rakudo/parrot_install/bin though, that would be the $PATH candidate

[09:32] <mberends> sans my name, of course ;)

[09:33] * mberends does not like adding directories to PATH

[09:35] * mberends does 'sudo ln -s <parrot_install>/bin/perl6 /usr/local/bin' instead

[09:41] *** sharada joined
[09:45] <mberends> ok, the "projects providing executable commands" seems to be orthogonal to module libraries, so it can remain a question to be resolved later. I'd like pmichaud's approval before replacing ~/.perl6lib with ~/.perl6/lib in Rakudo, however, although it looks sane.

[09:45] <masak> ruoso++ # Temporal rewrite

[09:46] <masak> mberends: nod.

[09:47] <moritz_> mberends: did you ask for approval before adding ~/.perl6lib?

[09:47] <mberends> yes

[09:47] *** sevvie left
[09:48] <mberends> nobody uses it yet, so the current impact it nil. It's more a matter of what we live with in future...

[09:50] <masak> right. that path will probably be a lot more long-lived than proto.

[09:56] *** cmv joined
[09:59] <cognominal> what is the difference btetween the Pattern subset and the Matcher role?

[10:05] <masak> cognominal: Pattern seems to be a role, and Matcher a subset.

[10:05] <Juerd> moritz_: http://juerd.nl/i/661a62775d092068f4536c0fe39f8e89.png  feather2 had a high fork rate just before it crashed.

[10:06] <masak> cognominal: but my guess is that one of them could just as well be made to go away.

[10:08] *** mikehh left
[10:10] <cognominal> object that do a role are indeed a subset of the class they belong to.

[10:10] <cognominal> *objects

[10:14] <cognominal> Also in

[10:14] <cognominal>      our multi method clone (::T $self --> T) {...}

[10:14] <cognominal>      our multi method clone (::T $self, *%attributes --> T) {...}

[10:15] <cognominal> the second multi encompasses the first

[10:16] <cognominal> is there a point of having both, it seems that's a pmc implementation detaill  that leaks into Perl 6

[10:17] <cognominal> Anyway, it does not matter much, the neat result is the same

[10:18] *** mikehh joined
[10:21] *** sm` left
[10:21] *** sm` joined
[10:39] *** tarbo2 left
[10:39] *** avuserow left
[10:39] *** jql left
[10:39] *** Tene left
[10:39] *** krakan left
[10:39] *** betterwosld left
[10:39] *** BooK left
[10:39] *** diakopter left
[10:39] *** chipdude left
[10:39] *** hatseflats left
[10:39] *** psychoschlumpf left
[10:39] *** cj left
[10:39] *** pioto left
[10:39] *** |Jedai| left
[10:39] *** buu left
[10:39] *** sharada left
[10:40] *** buu joined
[10:40] *** diakopter joined
[10:40] *** avuserow joined
[10:42] *** _tim__ left
[10:43] *** ruoso left
[10:44] *** _tim__ joined
[10:44] *** _tim__ left
[10:49] *** carlin joined
[10:51] *** tarbo2 joined
[10:51] *** jql joined
[10:51] *** |Jedai| joined
[10:51] *** BooK joined
[10:51] *** psychoschlumpf joined
[10:51] *** betterwosld joined
[10:51] *** krakan joined
[10:51] *** cj joined
[10:51] *** pioto joined
[10:51] *** hatseflats joined
[10:51] *** chipdude joined
[10:53] <moritz_> Juerd: thanks for the info - I'll look into giving stuff stricter resource limits

[10:53] *** iblechbot left
[10:54] *** iblechbot joined
[11:12] <masak> Matt-W: *loul* @ TAIME

[11:13] *** agentzh left
[11:15] *** rbaumer joined
[11:18] <Matt-W> masak: eh?

[11:18] <masak> oh, ah. "Wilson", not "Walton". sry. :/

[11:18] <masak> it was a p6l some other Matt just sent.

[11:18] <Matt-W> aaah

[11:18] <Matt-W> okay

[11:19] <moritz_> masak: that's diakopter then, iirc

[11:19] <masak> by the way, watch as the bikeshedding has started around Temporal again. :/

[11:19] <masak> moritz_: aha, ok.

[11:19] <Matt-W> I prefer not to watch...

[11:19] <Matt-W> I have limited tuits, and diving in is unlikely to expedite the process

[11:20] <Matt-W> Quite the opposite, in fact

[11:20] * Matt-W -> lunch &

[11:20] <moritz_> btw http://moritz.faui2k3.org/tmp/access.svg # updated visitors-per-day statistics from perl6.org

[11:21] <moritz_> the blog posts, twitters etc. about the new perl6.org layout had caused quite a wave of visitors

[11:21] <moritz_> (and it's a nice oocasion to show-off SVG::Plot)

[11:22] <M_o_C> Interestingly that post got no comments :o

[11:22] <masak> moritz_: my first impression is that the labels at the bottom are upside-down.

[11:24] <masak> moritz_: probably because they form vertical "rows", and then they should logically have their baseline to the left.

[11:24] <masak> er, to the right.

[11:24] <moritz_> masak: makes sense - I'll change that

[11:25] <masak> an alternative might be to slant them 45 degrees ccw. but I think just rotating them 180 degrees is better.

[11:26] <masak> moritz_++ # putting SVG graphs to good use

[11:27] <moritz_> rotating 45 degrees makes exact positioning much harder

[11:27] <M_o_C> I'd also go for a 180° rotation for the time being.

[11:28] <masak> moritz_: true.

[11:32] <diakopter> yah

[11:32] *** sm` left
[11:32] *** sm` joined
[11:33] <diakopter> masak: yeah, me

[11:33] <diakopter> yeah, I, I mean

[11:34] <masak> diakopter: ok. *loul*, then.

[11:35] <masak> diakopter: also, thanks for not choosing a nick starting with the letter "M".

[11:36] <M_o_C> :D

[11:37] <moritz_> :-)

[11:40] *** explorer is now known as Guest53746

[11:57] *** pmurias joined
[12:05] *** takadonet joined
[12:05] <takadonet> morning all

[12:06] <masak> takadonet: o/

[12:08] *** sharada joined
[12:14] *** ruoso joined
[12:15] *** diakopter is now known as mdiakopter

[12:16] *** mdiakopter is now known as miakopter

[12:16] *** miakopter is now known as diakopter

[12:16] <pmichaud> good morning, #perl6

[12:16] <ruoso> good morning, pmichaud 

[12:16] *** iblechbot left
[12:17] <masak> morning, pmichaud

[12:20] <moritz_> oh hai pmichaud

[12:20] *** JimmyZ joined
[12:31] <Matt-W> hai pmichaud

[12:31] <Matt-W> can haz LTM? :P

[12:32] <pmurias> ruoso: hi

[12:32] <moritz_> http://moritz.faui2k3.org/tmp/access.svg # now with labels rotated the other way round

[12:32] <masak> moritz_++

[12:32] <ruoso> hi pmurias 

[12:33] <moritz_> masak++ for suggesting it

[12:33] <pugs_svn> r28213 | ruoso++ | [spec-S32-Temporal] uses Instant instead of Rat for the return of time(), Allow base Duration type to work with TAI-seconds delegating to Gregorian::Duration otherwise, Add some methods to Gregorian::DateTime to make the distinction of Instant vs DateTime more evident 

[12:34] <masak> I see I will have to do some rebasing....

[12:34] <moritz_> hugme: list projects

[12:34] <hugme> moritz_: I know about these projects: json, perl6-examples, proto, svg-matchdumper, svg-plot, temporal-flux-perl6syn, tufte

[12:36] <ruoso> masak, see my last commit on Temporal.pm. It should clarify things regarding your comments on the list

[12:36] <masak> ruoso: yes. I see it does.

[12:37] <masak> ruoso: it's already much better than a few days ago.

[12:38] <masak> wait, so now we have both Instant and DateTime? :/

[12:38] <ruoso> yeah.. Instant is independent of TimeZone, Calendars and other variations

[12:38] <ruoso> just TAI-time semantics

[12:39] <ruoso> DateTime implements the semantics of a specific calendar

[12:39] <ruoso> by default the Gregorian calendar

[12:39] <masak> I will have to mull over that...

[12:39] <masak> I'm all for being correct about these things, but I often value API simplicity more.

[12:40] <ruoso> the definition of year, month, day, hour, minute and second is specific to the gregorian calendar

[12:40] <ruoso> other calendars specify different cycles

[12:40] <pmichaud> "Things should be as simple as possible, but no simpler."  :-)

[12:40] <ruoso> the hebrew calendar have the day starting at sunset

[12:41] <ruoso> so you not only need to take the timezone in concern, but the geographical posistioning as well

[12:41] <pugs_svn> r28214 | masak++ | fixed minor typo 

[12:42] <masak> IMO, Java made the mistake of overvaluing the "but no simpler" part, exposing too much complexity to the end programmer.

[12:42] <moritz_> aye; there's nothing wrong with oversimplifying things a bit

[12:43] <ruoso> masak, it's funny you mention Java, since java DateTime doesn't support all the needed semantics

[12:43] <moritz_> and offer a module that exposes all the complexity

[12:43] <ruoso> it's just wronfg

[12:43] <masak> thus, things like these have been created: http://joda-time.sourceforge.net/

[12:43] <moritz_> ruoso: I don't think we should have anything more complicated than DateTime in core.

[12:44] <ruoso> moritz_, by "anything more complicated than DateTime" you mean?

[12:44] <masak> ruoso: my point is, I think, that the ones who win at bikeshedding and specifications are often the ones who take the most things into account. I'm not sure that always leads to the most easy-ti-use design.

[12:44] <masak> s/-ti/-to/

[12:45] <ruoso> masak, note that Instant and Duration are still available for the simpler use

[12:45] <ruoso> they just don't pretend to be possible to turn TAI into a datetime spec

[12:45] <masak> ruoso: aye. that is indeed a plus.

[12:45] <ruoso> because it isn't 

[12:45] <ruoso> (unless you select a calendar, a time-zone and, in some calendars, the geographical position)

[12:48] <ruoso> and most importantly... DateTimes allow you to ask things like grep { .month == 1 }, @dates

[12:48] <ruoso> and this question should respect the original timezone used to define that objects

[12:49] <ruoso> for instance, an order placed in Japan must have its date according to the actual date it happened, even if that TAI-second is already another date in the current timezone

[12:50] <masak> ...so Instant is the hassle-free version of DateTime, for when you don't give a damn about dates.

[12:50] <ruoso> exactly

[12:50] <masak> good.

[12:51] <ruoso> and, the same way you can't get the encoding of a Str, you can't get the Date of an Instant

[12:51] <ruoso> you need to "encode" it using a Calendar

[12:51] <masak> what's the way to do that for the gregorian calendar?

[12:51] <ruoso> the default $*CALENDAR is the Gregorian Calendar

[12:51] <ruoso> so 

[12:52] <ruoso> localtime($instant) returns what you want by default

[12:52] <ruoso> or gmtime($instant) if you want it in the gmt timezone

[12:53] <ruoso> or, more generically, calendartime($instant, $calendar, *%options)

[12:53] <masak> nod.

[12:53] <ruoso> (where Calendar::TimeZoneObservant calendars support the :time-zone option)

[12:55] <masak> paraphrasing, "hide the appropriate amount of complexity".

[12:56] <pugs_svn> r28215 | ruoso++ | [spec-S32-Temporal] move Duration to the top, making it more generic, while it still delegates to Gregorian::Duration if you use anything different than :tai in the constructor 

[12:57] *** zamolxes left
[13:00] * ruoso wonder about Gregorian::Calendar/DateTime/Duration vs Calendar/DateTime/Duration::Gregorian

[13:00] <pmichaud> ruoso++  # excellent description above of the difference between Instant and DateTime

[13:01] <pmichaud> somehow  Calendar::Gregorian feels righter to me

[13:02] <masak> ditto.

[13:02] <pmichaud> or perhaps even... (shudder)   Calendar[Gregorian]

[13:03] <ruoso> hmm... I like the package-scoping

[13:03] <pmichaud> yes, I think I prefer that as well

[13:04] <masak> "take this fine Gregorian, and let him parameterize this Calendar..."

[13:04] <ruoso> the thing is, what is more usfull? having to look at the Calendar sub-packages to list the supported calendars?

[13:04] <M_o_C> What do the brackets mean?

[13:04] <masak> M_o_C: parameterized roles.

[13:05] <moritz_> arguments to param... what masak said

[13:05] <M_o_C> Ah, I already suspected it had something to do with roles.

[13:05] <ruoso> the other idea is having an entire calendar implementation inside a package

[13:05] <pmichaud> I somewhat like that idea

[13:05] <pmichaud> but I'm needing to look at the existing Calendar/DateTime/Duration stuff.

[13:05] <ruoso> pmichaud, you like all ideas :)

[13:05] <PerlJam> good morning #perl6

[13:05] <pmichaud> no, there are some ideas I do not like.  Such as the notion of trying to put the calendar stuff into the TAI representation :)

[13:07] *** SmokeMachine joined
[13:07] <masak> M_o_C: watch:

[13:07] <masak> rakudo: class Beer {}; role Bottle[::T] { multi method put(T $a) {}; multi method put($a) { die "You cannot put {$a.WHAT} in a Bottle of {T.WHAT}!" } }; class Water {}; my $beer-bottle = Bottle[Beer].new; $beer-bottle.put(Water)

[13:07] <p6eval> rakudo 446d49: OUTPUT«You cannot put Water() in a Bottle of Beer()!␤in method Bottle[::T]::put (/tmp/3Bqmjdll52:2)␤called from Main (/tmp/3Bqmjdll52:2)␤»

[13:07] <masak> Education By Beverage.

[13:07] <ruoso> cool

[13:08] <moritz_> that looks like a jnthn++ example

[13:08] <masak> jnthn++

[13:08] <masak> it is.

[13:08] * wayland76 can put water in a beer bottle :)

[13:09] <masak> wayland76: not with my Bottle role, you can't. :)

[13:09] <wayland76> masak: Well, there is that :)

[13:09] <M_o_C> Nice example indeed.

[13:09] <wayland76> Error: Insufficient reality in Bottle role :)

[13:09] <masak> I still haven't used parameterized roles in a real project, but that example inspires me.

[13:10] <ruoso> any example with Beer should inspire me

[13:10] <moritz_> hey, we could parameterize plots with the graph type

[13:11] <masak> moritz_: does that buy us anything over just using Plot::PlotType?

[13:11] <wayland76> Hmm.  If inspire = inhale, then beer is not for inspiring :)

[13:11] <pmichaud> http://www.pmichaud.com/perl6/rakudo-tests-2009-09-09.png  # spectest summary with updated suite size estimates

[13:11] <M_o_C> However it sort of confuses me, as I thought roles were not meant to be standalone classes but instead classes can be constructed using roles.

[13:11] <moritz_> masak: don't think so

[13:12] <wayland76> M_o_C: Every role also works as a class.  This is called "punning".

[13:12] <moritz_> pmichaud: that looks quite sane to me

[13:12] <dalek> rakudo: 872cd0d | pmichaud++ | docs/spectest-progress.csv:

[13:12] <dalek> rakudo: Revise spectest-progress.csv results since August 2009 release to

[13:12] <dalek> rakudo: use the updated and more-accurate counting of the spectest suite.

[13:12] <dalek> rakudo: (moritz++)

[13:12] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/872cd0dfa1a565de83fc4c59d76007bde74aa21c

[13:12] <dalek> rakudo: 5960161 | pmichaud++ | docs/spectest-progress.csv:

[13:12] <dalek> rakudo: spectest-progress.csv update: 436 files, 14268 (69.3% of 20599) pass, 0 fail

[13:12] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/59601615368406078308c5c0423ce4bf6b8252a4

[13:12] <wayland76> Basically, you probably won't need classes much any more

[13:12] <Matt-W> nice big spectest jumps lately

[13:12] <pmichaud> moritz_: there's a bit of a discontinuity between 08-20 and 08-21; I figured making the transition from the old method of counting to the new one made more sense as of a release date

[13:13] <ruoso> wayland76, actually you will still use classes for things that really *are* classes

[13:13] <M_o_C> masak: If it makes sense then there's no reason not to do it :) Plus you get used to using the New Stuff.

[13:13] <ruoso> wayland76, the problem is that OO programmign started to call everything a class just because it was the only way to be done

[13:13] <masak> M_o_C: you're half right.

[13:13] <M_o_C> I guess I got the second one right?

[13:13] <masak> M_o_C: I'd prefer an application where param'd roles actually fit very well.

[13:14] <masak> I think that'd increase the joy of trying them out.

[13:14] <Matt-W> We have parameterised roles, can we do it for classes as well?

[13:14] <moritz_> pmichaud: wfm

[13:14] <ruoso> Matt-W, parametrised roles make sense because the parameter is set at class composition time

[13:14] <M_o_C> Well, I don't know how the plot module's layed out, I just thought that moritz_'s suggestion made sort of sense from a theoretical point of view.

[13:15] <ruoso> Matt-W, a parametrised class is simply a class that uses a parametrised role

[13:15] <moritz_> in the next release announcement we should mention that we changed our way of counting the spectests, which accounts for a different percentage of passed overall tests

[13:15] <pmichaud> I was thinking either that, or simply don't cite the percentage of passed overall tests :)

[13:15] <pmichaud> I'm still trying to come up with good answers to the "when we reach 100%, we're done" question.

[13:16] <Matt-W> ruoso: ah okay, some slightly different thought patterns required (maybe some punning too)

[13:16] <moritz_> pmichaud: I could blog a few random thoughts about taht

[13:17] <pmichaud> moritz_: that would be excellent, yes.

[13:17] <PerlJam> pmichaud: just like we're done with perl 5?  :)

[13:17] *** Guest53746 left
[13:17] <pmichaud> PerlJam: yes, I've used that one also. :)   While accurate, it doesn't seem explanatory.

[13:17] <moritz_> my working title will be "when we reached 100% we did something wrong"

[13:17] <PerlJam> moritz++

[13:17] <moritz_> s/reached/reach/

[13:18] <M_o_C> moritz++ indeed.

[13:18] <pmichaud> I have the sense that if you ask random X programmer  "Is Perl 5 done?"  their gut instinct is "yes", fsvo "done"

[13:19] <PerlJam> We should asymptotically approach 100%, never quite reaching it until the language is dead.

[13:19] *** jaffa8 joined
[13:19] <PerlJam> pmichaud: What if you s/Perl 5/Ruby/ or s/Perl 5/Python/?  How do you think that would change the answer?

[13:19] <jaffa8> hi

[13:19] <pmichaud> of course, the question "Is Perl 5 done?" pastes over the underlying notion of "which Perl 5?", since "Perl 5" is by no means a static definition.

[13:19] <jaffa8> I am looking for testers.

[13:20] <Matt-W> people would say Python is 'done' I think

[13:20] <Matt-W> in that it's released

[13:20] <pmichaud> PerlJam: I don't think it would change the answer much

[13:20] <jaffa8> Would anyone bother to test something?

[13:20] <Matt-W> what people really want to know when they ask if Perl 6 is 'done' is 'when will I be able to use it'

[13:20] <Matt-W> although perhaps not phrased to imply quite such a level of enthusiasm

[13:20] <pmichaud> Matt-W:  correct, mostly.

[13:21] *** ejs1 left
[13:21] <pmichaud> an unfortunate side-effect of having a specification is that it provides a target that is separate from "release"

[13:21] <jaffa8> Would anyone bother to test regular expression converter?

[13:21] <PerlJam> Matt-W: I don't know ...  I've seen some criticism of Rakudo Star because, while it'll be usable, it won't be the full language spec.

[13:22] <pmichaud> Perl 5 doesn't have this problem, in that the implementation _is_ the spec.

[13:22] <PerlJam> jaffa8: perhaps you'd get more response if you actually give people something to test than asking if they'd test it.

[13:22] <PerlJam> :-)

[13:23] <Matt-W> PerlJam: That is a problem, and people also see that the spec isn't done yet and so assume nothing's going to happen this decade

[13:23] <M_o_C> Maybe it would make sense to release different versions of the spec with the rakudo releases which will contain only the implemented stuff? Because I think that even now it's somewhat awkward because of the dynamic spec.

[13:23] <Matt-W> masak: do you have intentions for u4x with regard to Rakudo *?

[13:24] <jaffa8> I mean this could be tested: http://www.equinoxbase.com/p5p6regconv/converter.html

[13:24] <PerlJam> M_o_C: I can see it now ... "Rakudo Star is Perl 6  1.0 but it implements version 3.7 of the spec" 

[13:24] <masak> Matt-W: good question. I don't know. maybe it'd be good to have some intermediate "release" of u4x by then.

[13:25] *** ejs joined
[13:25] <takadonet> jaffa8: I will play around with it

[13:25] <jaffa8> ok

[13:25] <PerlJam> M_o_C: though I think it would be a good idea to have a "spec release" just like we have implementation releases

[13:26] <PerlJam> s/release/snapshot/ really

[13:26] <PerlJam> (but that's the concept people have difficulty with)

[13:26] <masak> jaffa8: first impression: it does not degrade gracefully, for those of us with JavaScript turned off by default.

[13:26] <jaffa8> Is there anyone who does not use javascript?

[13:27] <moritz_> quite many geeks, actually

[13:28] <masak> jaffa8: blind people.

[13:28] <masak> jaffa8: people on exotic platforms.

[13:28] <jaffa8> it is supposed to be modern in this design.

[13:28] <PerlJam> jaffa8: do you or do you not put the delimiters to the regex?

[13:28] <masak> jaffa8: people with text-based browsers.

[13:28] <masak> jaffa8: I found a bug: (foo(bar))\2 is converted to /(foo(bar))$1/

[13:29] <PerlJam> jaffa8: the interface makes it seem like you could put something in either the perl5 or perl6 boxes and expect it to DTRT (but it doesn't)

[13:29] <masak> jaffa8: should be $0[0]

[13:29] <jaffa8> PerlJam: I am not sure what you mean

[13:29] <pmichaud> jaffa8: I think PerlJam means that the perl6 box shouldn't be editable

[13:30] <PerlJam> jaffa8: that the converter works both ways

[13:30] <PerlJam> jaffa8: what pmichaud said

[13:30] <jaffa8> ok, it does not.

[13:30] <jaffa8> it is one-way only

[13:31] <PerlJam> jaffa8: It seems like you can put delimiters, but it doesn't honor modifiers?

[13:31] <jaffa8> masak: are you sure about $0[0]?

[13:31] *** zamolxes joined
[13:31] <masak> jaffa8: yes, it's right there in S05.

[13:31] <jaffa8> PerlJam,it should honor gmsx

[13:32] <PerlJam> jaffa8: then /foo<CR>/x is broken

[13:32] <pmichaud> I haven't been able to get it to honor gmsx

[13:32] <pmichaud> /a\012b/ doesn't appear to work.

[13:33] <moritz_> jaffa8: [0-9] gets translated to /<[0..9]]>/ (]] is wrong)

[13:33] <jaffa8> you tear it apart, just joking

[13:33] <PerlJam> jaffa8: you wanted testing  :)

[13:33] <jaffa8> continue.

[13:34] <PerlJam> jaffa8: perhaps if you had an automated test suite for the converter ...

[13:34] <PerlJam> ;)

[13:34] <jaffa8> I tested it.

[13:34] <moritz_> jaffa8: $ -> $ is also wrong

[13:34] <jaffa8> there are so many cases.

[13:34] <moritz_> jaffa8: that should be $ -> \n?$

[13:35] <moritz_> I planned to write such a thing for ages, never got around to it :-)

[13:35] <moritz_> jaffa8++

[13:35] <pmichaud> I agree, it's pretty impressive.   jaffa8++

[13:35] <moritz_> std: / a++ /

[13:35] <p6eval> std 28215: OUTPUT«ok 00:02 37m␤»

[13:36] *** ejs1 joined
[13:36] <moritz_> do we have the possesive quantifiers in Perl 6?

[13:36] <moritz_> std: / a*+ /

[13:36] <p6eval> std 28215: OUTPUT«ok 00:02 37m␤»

[13:37] <moritz_> jaffa8++ # getting (?i:foo) right

[13:39] *** SmokeMachine left
[13:39] <jaffa8> so are there possesive quantifiers?

[13:40] <moritz_> not sure yet

[13:41] <jaffa8> Why do you say /foo<CR>/x is broken, what should it be?

[13:41] <PerlJam> I thought we did it as a modifier  :keep or something

[13:42] <PerlJam> jaffa8: it backwhacks the carriage return in the perl6 version.  It shouldn't

[13:43] <jaffa8> so what is wrong with /foo\<CR\>/?

[13:43] <JimmyZ> From S02, I found parrøt and dötnet, is it right?

[13:44] *** ejs left
[13:44] <moritz_> jaffa8: in /x mode whitespaces in the regex are ignored

[13:45] <moritz_> so having an \<CR> in the translated version gives it a significance it should not have

[13:45] <jaffa8> ok, I know how x should work.

[13:46] <moritz_> re possessive quantifiers, we don't have them in Perl 6 directly

[13:46] <PerlJam> moritz_: possessive quantifiers just don't do backtracking, right?

[13:46] <moritz_> right

[13:46] <JimmyZ> Ok, I will update it.

[13:46] <moritz_> you can translate a*+ to [:ratchet a*]

[13:46] <PerlJam> http://perlcabal.org/syn/S05.html#Backtracking_control  Read the fourth bullet point :)

[13:47] <moritz_> JimmyZ: uhm, you should give us more context to answer your question

[13:47] <jaffa8> moritz_, so there is no a*+ in Perl 6

[13:47] <JimmyZ> moritz_: todo(:parrøt<0.42>, :dötnet<1.2>));

[13:47] <JimmyZ> this line from S02

[13:47] <moritz_> JimmyZ: that's just an example

[13:47] <PerlJam> jaffa8: a*+ in other regex engines  is  a*: in perl 6

[13:47] <JimmyZ> I think it is parrot and dotnet

[13:48] <moritz_> JimmyZ: and I think it intentionally does not use parrot and dotnet

[13:48] <JimmyZ> ok

[13:48] <moritz_> (to emphasize that it's not tied to parrot, or any other particular implementation)

[13:48] <JimmyZ> moritz_: though I don't know why.

[13:49] <jaffa8> so is a*: is the same as  [:ratchet a*]?

[13:49] <moritz_> yes

[13:49] <moritz_> unless :s is present, of course :-)

[13:50] *** PacoLinux joined
[13:50] <moritz_> jaffa8: the perl 5 test suite is a great source for obscure regexes that you could check

[13:51] <jaffa8> ok

[13:52] <jaffa8> I guess a++ is a+:

[13:52] <moritz_> aye

[13:56] <pmichaud> okay, I have a question for the temporal design

[13:56] <pmichaud> suppose I have a unix timestamp (# of seconds since 1-jan-1970 gmt).  How do I get the local calendar time from that?

[13:58] *** pmurias left
[13:58] *** [particle] left
[13:58] *** [particle] joined
[14:00] *** zamolxes left
[14:02] *** SmokeMachine joined
[14:03] *** patspam joined
[14:06] *** alester joined
[14:11] <M_o_C> Btw, it seems that rakudo.org contains no info about Rakudo *. You should probably change that.

[14:12] <M_o_C> s/probably //

[14:13] <Juerd> I'm sure that you can do that if you ask

[14:13] <Juerd> And that everyone will be happy with your contribution too :)

[14:13] *** justatheory joined
[14:13] <M_o_C> True, problem is the only reason I realised that was because I was searching for that information.

[14:14] <Juerd> M_o_C: http://use.perl.org/~pmichaud/journal/39411

[14:14] *** [1]jaffa8 joined
[14:15] <pmichaud> I'm also working on a better description of Rakudo * (but don't let that stop any efforts to go ahead and put something on rakudo.org)

[14:18] *** nihiliad joined
[14:19] *** frew__ joined
[14:19] *** frew_ left
[14:22] *** abra joined
[14:31] *** jaffa8 left
[14:31] *** [1]jaffa8 is now known as jaffa8

[14:33] *** SmokeMachine left
[14:34] *** payload joined
[14:36] *** kidd left
[14:39] *** dukeleto left
[14:40] *** dukeleto joined
[14:41] *** cotto joined
[14:43] *** Saran joined
[14:46] <PerlJam> pmichaud: the two questions that come to mind when I think about Rakudo* are:  Will it be fast? What *won't* be implemented?  The first one is just something that I tend to worry about (perhaps too much) and the second it what I hear from others in the form of  "will it have X?"  (X is often "threads" too)

[14:46] *** rfordinal left
[14:46] <pmichaud> PerlJam: good to know :)

[14:47] *** SmokeMachine joined
[14:48] <pmichaud> I think I need to run through all of the synopses and put a bunch of X<...> markers in them so that we can use them to identify specific synopsis sections

[14:51] *** Psyche^ joined
[14:51] *** gbacon left
[14:53] <jaffa8> PerlJam, it is already implemented partly

[14:53] <PerlJam> jaffa8: which "it"?  Threads?

[14:53] <jaffa8> Perl 6

[14:54] *** ejs2 joined
[14:55] *** finanalyst joined
[14:56] *** carlin left
[15:04] *** ejs1 left
[15:05] *** gbacon joined
[15:06] *** sm` left
[15:06] *** sm` joined
[15:08] *** Patterner left
[15:08] *** Psyche^ is now known as Patterner

[15:08] *** ejs2 left
[15:10] *** JimmyZ left
[15:16] *** rfordinal joined
[15:18] <cognominal> is :@a  an array of Pairs?

[15:19] <moritz_> no

[15:19] <moritz_> it's a pair a => @a

[15:19] <moritz_> rakudo: my @a = <a b c>; say (:@a).perl

[15:19] <p6eval> rakudo 446d49: OUTPUT«"a" => ["a", "b", "c"]␤»

[15:20] <moritz_> rakudo: my @a = <a b c>; say :@a.perl

[15:20] <p6eval> rakudo 446d49: OUTPUT«"a" => ["a", "b", "c"]␤»

[15:20] <PerlJam> Larry gets the colon, but man does it seem overused sometimes :)

[15:20] <masak> PerlJam: I respectfully disagree. :)

[15:20] <moritz_> overused? not really, IMHO

[15:21] <PerlJam> There's colons all over the place.  They're everywhere!   ;)

[15:21] <masak> I had that reaction when sitting in on szabgab++'s class before YAPC too. I was honestly surprised.

[15:22] * moritz_ tries to count the number of uses in the Main slang

[15:22] <moritz_> signature creation

[15:22] <moritz_> pair construction

[15:22] <moritz_> named parameters

[15:22] <masak> the specific situation was that the adverb colon had just been clarified satisfactorily by szabgab. then we came upon another colon, and people sort of assumed that it'd be another adverbial colon. but it happened to be an invocant colon. this seemed to be a bit too much for people. :)

[15:22] <PerlJam> backtracking control

[15:22] <moritz_> method thing ($f.method: )

[15:22] <moritz_> PerlJam: that's not the Main slang :-)

[15:23] <moritz_> adverbs (which are quite like pairs, in some sense, maybe)

[15:24] <moritz_> anything I forgot?

[15:24] <cognominal> the twigil?

[15:24] <moritz_> that's 5 uses so far, of which 3 are rather similar

[15:24] <moritz_> cognominal: right

[15:24] <masak> do double colons count? :)

[15:25] <moritz_> yes

[15:25] <moritz_> 7

[15:25] <masak> well, there's A::B and ::T

[15:25] <PerlJam> moritz_: in painting the picture of colons-everywhere, I'm not going to restrict my mentioning of them because of where they come from  ;)

[15:25] <moritz_> PerlJam: :-)

[15:26] <moritz_> ok, in regexes we have backtracking control (:, ::, :::), adverbs (:i) and declarations (:my $x = 3;)

[15:26] <cognominal> I don't mind, but the doc begs for a good index and the ecosystem for a syntax aware editor that open the doc at the good page.

[15:26] <masak> moritz_: and in quantifiers.

[15:27] <moritz_> masak: quantifiers? example?

[15:27] <moritz_> cognominal: that's what `grok' is for

[15:27] <cognominal> grok?

[15:27] <moritz_> (but it needs more docs to feed it)

[15:27] <moritz_> literal++'s SoC project

[15:27] <PerlJam> masak: a*: is just a special case of the non-backtracking :

[15:28] *** JimmyZ joined
[15:28] <moritz_> an application, not a special case

[15:28] *** moritz_ sets mode: +o PerlJam

[15:28] <JimmyZ> rakudo: my Int $x = *; $x.say;

[15:28] <p6eval> rakudo 446d49:  ( no output )

[15:28] <masak> well, syntactically it can be seen as a separate operator.

[15:28] <literal> cognominal: "cpanp -i App::Grok" if you'd like to try it

[15:28] <PerlJam> moritz_: now do the same tally but for other symbols in Perl.  How many different uses are there for $?  or @?  or %?  or ^? or &?  etc.

[15:28] <moritz_> let's take ^

[15:29] <PerlJam> masak: yes, LTM means that it is.

[15:29] <masak> moritz_: in ranges.

[15:29] <masak> moritz_: meta-class.

[15:29] <moritz_> xor

[15:29] <moritz_> twigils

[15:29] <moritz_> prefix:<^>

[15:29] *** payload left
[15:30] <moritz_> anything else we missed?

[15:30] <masak> moritz_: ff^ et al.

[15:31] <PerlJam> moritz_: are we counting regex too?

[15:31] <moritz_> PerlJam: separately, yes

[15:31] <moritz_> there's ^ and ^^ in regexes

[15:32] <PerlJam> I guess what really matters is not how many syntactic categories the symbol appears in, but how many semantic categories.

[15:33] <PerlJam> (but in any case, : wins with the most :)

[15:33] <masak> PerlJam: of course, ^ doesn't have any : at all!

[15:33] *** mikehh_ joined
[15:33] <moritz_> rakudo: say (3 ^ 5 ^ 7).perl

[15:33] <p6eval> rakudo 446d49: OUTPUT«one(3, 5, 7)␤»

[15:33] <moritz_> we forget that one, it seems

[15:34] <moritz_> s/forget/forgot/

[15:34] <moritz_> I wonder if + or * have more :-)

[15:35] <masak> + has five, IIRC.

[15:35] <moritz_> it lost its meaning as a sigil

[15:35] <masak> Main( prefix, infix ), twigil( depr ), Regex( postfix ), version( postfix )

[15:36] <masak> true. so, four.

[15:36] *** rfordinal left
[15:36] <PerlJam> weird ... I was just trying to type "filename" and I actually typed "filebane"  

[15:36] <PerlJam> must be some kind of freud coming out there :)

[15:36] <moritz_> * has main (prefx, infix, term), twigil, ** (infix, term), slurpy, regex(postfix infix)

[15:36] <masak> then there's the somewhat special + signs in 1e+5 and 42+5i, as TimToady pointed out.

[15:37] <moritz_> masak: + has also Regex(<+[..]>)

[15:37] <masak> moritz_: oh, there's ++ too, if we're counting that.

[15:37] <masak> moritz_: right, so again five. forgot that one.

[15:37] <masak> moritz_: and there's all the num operators which start with a +.

[15:37] <moritz_> aye

[15:37] <masak> but it feels weird to count those, as well as ++.

[15:38] <masak> I think I've internalized too much of LTM for it to feel right.

[15:38] <moritz_> right :-)

[15:38] <moritz_> oh, * is not a prefix, I got that one wrong

[15:38] *** patspam left
[15:38] *** patspam joined
[15:45] *** cmv left
[15:47] *** mikehh left
[15:50] *** ejs joined
[15:53] *** rbaumer left
[15:54] * TimToady fuzzes into existence

[15:55] <PerlJam> Is there a notation for unpacking a pair within a for loop?  something like  for @array_of_pairs -> [$key,$value] { ... }  ?

[15:56] <masak> don't think so, but I expect something like that to be a syntax-extending module.

[15:58] *** mikehh_ is now known as mikehh

[15:58] <TimToady> but there's always for @array_of_pairs».kv -> $key, $value {...}

[15:58] <PerlJam> ah!  I keep forgetting about >>

[15:59] *** kidd_ joined
[16:00] *** JimmyZ left
[16:02] <PerlJam> But still, we have a sig for unpacking arrays, why not for pairs too?

[16:03] <masak> ₱

[16:04] <masak> or ℘ or ℙ

[16:05] *** payload joined
[16:05] *** [1]jaffa8 joined
[16:05] <cognominal> Timtoady, what linguistic books would you recommend for someone who want to understant what natural language principles  you translated to Perl

[16:05] *** Saran left
[16:06] *** Bzek left
[16:06] <cognominal> *understand

[16:08] *** rfordinal joined
[16:10] *** finanalyst left
[16:10] *** finanalyst joined
[16:10] *** jaffa8 left
[16:10] *** [1]jaffa8 is now known as jaffa8

[16:11] <[particle]> cognominal: try http://search.barnesandnoble.com/booksearch/isbninquiry.asp?r=1&ean=3110142554 :)

[16:12] <cognominal> :)

[16:13] <cognominal> the price is just not right :(

[16:13] <kidd_> [particle]: ist that price for real, or it's part of humour?

[16:14] <kidd_> it might be like reading 'Gödel Escher Bach' :)

[16:14] *** abra left
[16:15] <[particle]> that's for real, but you can get a cheaper version here: http://www.amazon.com/Cruel-Unusual-Intrepid-Linguist-Library/dp/0440208505

[16:15] *** abra joined
[16:17] <TimToady> cognominal: not much from any book, except maybe the book I'll write after Perl 6 is done :)

[16:17] *** SmokeMachine left
[16:18] *** jferrero joined
[16:20] <TimToady> some ideas from tagmemics, some UC Berkeley classes concerning on prototypes and anthropology, some notions like "How to do things with words"

[16:20] *** hercynium left
[16:21] *** masak left
[16:21] <TimToady> most of which I absorbed through the skin, not from books

[16:22] <TimToady> oh, maybe Umberto Eco's The Search for the Perfect Language, that's a good one

[16:22] <PerlJam> (Umberto Eco)++

[16:23] <TimToady> that book talks a lot about the problems of similar-things-should-look-similar

[16:23] <TimToady> what makes foolish consistencies foolish, as it were

[16:25] *** pyrimidine joined
[16:26] <PerlJam> TimToady: do you read the english translations of Umberto Eco's work?

[16:27] <TimToady> yes, my Italian is a bit rusty :)

[16:27] *** vmbrasseur joined
[16:27] <PerlJam> I wonder what's lost in translation there :)

[16:28] *** vmbrasseur left
[16:28] <TimToady> He seems to have very good translators, and probably helps a lot with the translations in any case

[16:30] <jaffa8> I read one book of Umberto, it was depressing

[16:31] *** cahek joined
[16:31] <TimToady> jaffa8: maybe you were just depressed anyway :)

[16:31] <jaffa8> maybe

[16:32] <jaffa8> What is the effect of those books on you, anyway?

[16:33] <jaffa8> I mean emotionally

[16:34] <TimToady> I find that Eco's notions of joy are not much related to surface happiness

[16:35] *** ysth left
[16:35] <TimToady> and there's a lot of "fun", on some level

[16:35] <TimToady> but yes, he's not a Disney scriptwriter

[16:36] *** hercynium joined
[16:36] <PerlJam> I've noticed that what my wife and her family calls "fun", I think is just silly.  Not fun-silly, just silly.

[16:38] <TimToady> anyway, the Search for the Perfect Language is non-fiction, and not exactly optimistic, but perhaps realistic

[16:38] <TimToady> it's a history book, in any case

[16:38] <TimToady> and doesn't talk about anything modern

[16:38] <TimToady> except by implication

[16:39] <jaffa8> I have not read that one.

[16:40] <TimToady> SWMBO is requiring me to go take a walk so I don't drop dead

[16:40] <TimToady> bbl &

[16:41] *** Exodist joined
[16:42] *** jrtayloriv left
[16:44] <cognominal> thx TimToady, I like Eco

[16:45] *** stephenlb joined
[16:45] <cognominal> I sure will like "Programming Perl 6"

[16:46] *** pnu left
[16:47] *** pnu joined
[16:52] <cognominal> subtitle: create your own slang  ?   :)

[16:53] <cognominal> somehow the missing 'in' within Programming Perl was prescient

[16:53] <payload> (#66498) two words: snowman. comet.   :D

[17:04] *** cdarroch joined
[17:18] *** ruz_ left
[17:19] *** Exodist left
[17:27] *** ejs left
[17:35] *** nihiliad left
[17:40] *** hercynium left
[17:46] *** dukeleto left
[17:48] <cj> TimToady: .pl was already taken!

[17:50] *** bbb_ joined
[17:50] *** pmurias joined
[17:50] <pmurias> cj: prolog uses .pl

[17:51] <cj> pmurias: my point exactly. ;)

[17:51] <bbb_> webchat wriiten in php?

[17:53] *** ejs joined
[17:55] *** abra left
[18:00] *** jaldhar left
[18:02] *** SmokeMachine joined
[18:07] *** bbb_ left
[18:10] *** abra joined
[18:12] *** masak joined
[18:12] <masak> evening, little snowmancomets.

[18:13] *** rbaumer joined
[18:14] * masak is stuck in a Live Apple Keynote coverage

[18:15] *** nihiliad joined
[18:22] *** payload left
[18:26] *** payload joined
[18:28] *** hercynium joined
[18:29] <hercynium> hey there, I have a non-code-related question for you guys

[18:29] <masak> is it Perl-6-related?

[18:29] <hercynium> yep!

[18:29] <hercynium> I'd like to buy a "second system" T shirt...

[18:29] <hercynium> and maybe a few to give out at the next Boston.PM

[18:29] <masak> cool.

[18:30] <hercynium> which store should I buy from.... Cafe Press or Spreadshirt?

[18:31] <masak> I don't even have the beginning of an idea.

[18:31] <hercynium> (I can't tell the diff... maybe you make more from one or the other?)

[18:31] <[particle]> hercynium: pmichaud set those up last week, only he knows....

[18:31] <masak> try both, and go for the one you like better?

[18:32] <hercynium> sounds like a plan. I'm game for it.

[18:32] <hercynium> heh

[18:32] *** finanalyst left
[18:32] <hercynium> when I saw that logo on a slide at YAPC::NA, I think it was pmichaud whom I said "where can I get that on a shirt?"

[18:35] <pmichaud> http://cafepress.com/rakudo

[18:35] <pmichaud> http://rakudo.spreadshirt.com/

[18:35] <pmichaud> http://zazzle.com/rakudo

[18:35] <hercynium> ooo, I think I found something that explains it... spreadshirt is based in europe?

[18:36] <hercynium> so, for me in the US, cafepress would probably be best to benefit perl6?

[18:36] <pmichaud> I've heard some people say they like spreadshirt's quality better

[18:37] <pmichaud> I've not tried any of them myself yet as far as actually purchasing any products, so I don't know the relative quality

[18:37] <pmichaud> which is partially why I did all three :)

[18:37] <hercynium> OK, cool.

[18:37] <hercynium> thanks, pmichaud and masak

[18:38] <moritz_> spreadshirt charges $ 14 for shipment to Germany. *gulp*

[18:39] <hercynium> holy shipping charges batman

[18:39] <hercynium> ;-)

[18:41] *** cahek left
[18:43] <masak> rakudo: class Feeling { method mouth { ... } }; class Happiness is Feeling { method mouth { ")" } }; class Sadness is Feeling { method mouth { "(" } }; role Smiley[Feeling $f] { method smile { ":-" ~ $f.mouth } }; say Smiley[Happiness].new.smile

[18:43] <p6eval> rakudo 446d49: OUTPUT«:-)␤»

[18:44] <pmichaud> rakudo: class Feeling { method mouth { ... } }; class Happiness is Feeling { method mouth { ")" } }; class Sadness is Feeling { method mouth { "(" } }; role  Smiley[Feeling $f] { method smile { ":-" ~ $f.mouth } }; say Smiley[Happiness].new.smile

[18:44] <pmichaud> oops

[18:44] <p6eval> rakudo 446d49: OUTPUT«:-)␤»

[18:44] <pmichaud> rakudo: class Feeling { method mouth { ... } }; class Happiness is Feeling { method mouth { ")" } }; class Sadness is Feeling { method mouth { "(" } }; role  Smiley[Feeling $f] { method smile { ":-" ~ $f.mouth } }; say Smiley[(Happiness, Sadness).pick].new.smile

[18:44] <p6eval> rakudo 446d49: OUTPUT«:-)␤»

[18:44] <pmichaud> rakudo: class Feeling { method mouth { ... } }; class Happiness is Feeling { method mouth { ")" } }; class Sadness is Feeling { method mouth { "(" } }; role  Smiley[Feeling $f] { method smile { ":-" ~ $f.mouth } }; say Smiley[(Happiness, Sadness).pick].new.smile

[18:44] <p6eval> rakudo 446d49: OUTPUT«No applicable candidates found to dispatch to for '_block127'␤in Main (/tmp/dnqQdbuowh:2)␤»

[18:45] <masak> o_O

[18:45] <pmichaud> :-(

[18:45] <masak> rakudo: class Feeling { method mouth { ... } }; class Happiness is Feeling { method mouth { ")" } }; class Sadness is Feeling { method mouth { "(" } }; role Smiley[Feeling $f] { method smile { ":-" ~ $f.mouth } }; say Smiley[Sadness].new.smile

[18:45] <p6eval> rakudo 446d49:  ( no output )

[18:45] <masak> rakudo: class Feeling { method mouth { ... } }; class Happiness is Feeling { method mouth { ")" } }; class Sadness is Feeling { method mouth { "(" } }; role Smiley[Feeling $f] { method smile { ":-" ~ $f.mouth } }; say Smiley[Sadness].new.smile

[18:45] <pmichaud> Sadness.

[18:45] <p6eval> rakudo 446d49:  ( no output )

[18:46] <masak> p6eval--

[18:46] <pmichaud> rakudobug:  Rakudo doesn't know how to be sad.

[18:46] *** mberends left
[18:46] <masak> pmichaud: what could have caused the 'no applicable candidates' above?

[18:46] <arnsholt> What's the meaning of the "second system" slogan?

[18:46] <pmichaud> masak: I don't know.  I'm still learning the dispatch.

[18:47] <masak> arnsholt: there's something called "second system syndrome".

[18:47] <Juerd> arnsholt: http://en.wikipedia.org/wiki/Second-system_effect

[18:47] <arnsholt> Oh, right, right

[18:47] *** pen12346 joined
[18:47] <M_o_C> Is that second system thing explained somewhere? Because I don't really understand what it means.

[18:47] <arnsholt> Juerd's Wikipedia link is pretty good

[18:47] <TimToady> backlog about 30 seconds

[18:48] <M_o_C> Meh, sorry

[18:48] *** mberends joined
[18:48] <masak> mberends! \o/

[18:48] <M_o_C> Didn't notice scrollbar was half way up

[18:48] <pmichaud> "...to design the successor as an elephantine, feature-laden monstrosity. "

[18:48] <pmichaud> ...is that Perl 6?  ;-)

[18:48] <Juerd> butterfline?

[18:48] <masak> pmichaud: yes, but done right. :)

[18:49] *** lmc joined
[18:49] <pmichaud> "...to design the successor as an elephantine, feature-laden monstrosity done right."

[18:49] <masak> Smiley[Happiness]

[18:49] <jaffa8> elephantine?

[18:49] <jaffa8> Is that positive?

[18:49] <masak> jaffa8: no.

[18:49] <TimToady> depends on whether you think elephants are oversized, I suppose

[18:50] <Juerd> jaffa8: Sure. Elephants have good memory.

[18:50] <jaffa8> or powerful?

[18:50] <masak> jaffa8: it means "large", "bulky", "unwieldy"

[18:50] <TimToady> there's too much subtle elephantism in the world

[18:50] <mberends> masak: \o/ doin' da proto

[18:50] <hercynium> Elephants are excellently adapted animals

[18:50] <masak> mberends++

[18:50] <hercynium> (and I think they're cute)

[18:50] <masak> they are.

[18:51] <pen12346> http://www.thaiadpoint.com/tap8.1/bin/redir.php?p=2042&l=1357&u_id=363435

[18:51] <masak> "elephantine" is still usually not a compliment.

[18:51] <TimToady> just like "femenine"

[18:51] <TimToady> *feminine

[18:51] <TimToady> gah

[18:51] <jaffa8> the end is "done right"

[18:51] *** ejs left
[18:51] <Juerd> An elephant's end is done right?

[18:51] <masak> pen12346: hello, are you perchance a spammer?

[18:52] <TimToady> and thereby hangs a tail

[18:52] *** pen12346 was kicked by TimToady (TimToady))
[18:52] *** pen12346 joined
[18:52] <masak> that was quick.

[18:53] <masak> probably a bot.

[18:53] *** pen12346 left
[18:53] <masak> ...with hurtable feelings.

[18:54] <Juerd> role Bot { has Feeling $feeling; }...

[18:54] <masak> Bot[Sadness]

[18:54] <TimToady> the rejoin was presumably to check if it was also banned

[18:54] <pmurias> j

[18:54] <masak> TimToady: ah. bot psychology.

[18:56] <TimToady> "Tune in next week, same bot time, same bot channel!"

[18:56] * hercynium groans

[18:57] <TimToady> carefule, you're showing your age

[18:58] <masak> TimToady: not necessarily. that series aired in my country when I was growing up.

[18:58] <TimToady> .oO(cultural backwaters...)

[18:58] * hercynium used to watch reruns as a kid, in the 80's

[18:59] <masak> I suspect ours weren't reruns.

[18:59] <hercynium> The Batman TV series was a paragon of televised onomatopoeia

[19:00] <mberends> masak: .oO( preload project.state file with @old_project_names? )

[19:00] <TimToady> why do my fingerse keepe adding extra e's on the endse of wordse these dayse?

[19:00] <masak> mberends: .oO( your call. programmer's privilege how much to serve the transitioning user. )

[19:01] <hercynium> why was the first thing I thought of after reading that the word "goats"

[19:01] <moritz_> hercynium: too much /.e?

[19:01] <masak> hercynium: thanks for sharing. :)

[19:01] *** rba_ joined
[19:01] * hercynium has spent too much time in #perl on magnet

[19:02] <hercynium> ok, work has a bug. later guys!

[19:02] <masak> work does indeed have a bug.

[19:03] <masak> my neighbour, too. he came in here coughing earlier.

[19:07] <TimToady> there are a lot of people hacking here in silicon valley

[19:07] * masak groans

[19:07] *** rbaumer left
[19:07] *** rba_ is now known as rbaumer

[19:07] <TimToady> you get an assist

[19:08] <masak> :)

[19:09] <TimToady> in fact, I took up golf just so I could be a hacker³

[19:10] <masak> I just ran out of homonyms.

[19:11] <diakopter> and they locked the door behind you

[19:12] <masak> what is this, pun Wednesday or something? :)

[19:13] *** SmokeMachine left
[19:16] <diakopter> what bug? it works for me...

[19:19] <diakopter> TimToadye: how's the weather

[19:20] *** hercynium left
[19:20] <jaffa8> rakudo : /a\012b/

[19:21] <jaffa8> rakudo:  /a\012b/

[19:21] <p6eval> rakudo 446d49: OUTPUT«perl6regex parse error: Alphanumeric metacharacters are reserved at offset 14, found '1'␤in Main (src/gen_setting.pm:3469)␤»

[19:21] <TimToady> std: /a\012b/

[19:21] <p6eval> std 28215: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex backslash sequence at /tmp/ONKRl2GVpb line 1:␤------> [32m/a\[33m⏏[31m012b/[0m␤    expecting backslash␤FAILED 00:02 37m␤»

[19:21] <TimToady> std: /a\0o12b/

[19:21] <p6eval> std 28215: OUTPUT«ok 00:02 37m␤»

[19:21] <TimToady> std: /a\o12b/

[19:21] <p6eval> std 28215: OUTPUT«ok 00:02 37m␤»

[19:22] <TimToady> rakudo: /a\o12b/

[19:22] <p6eval> rakudo 446d49:  ( no output )

[19:22] <TimToady> rakudo: say "a\o12b" ~~ /a\o12b/

[19:22] <p6eval> rakudo 446d49: OUTPUT«a␤b␤»

[19:23] <TimToady> diakopter: a bit hot

[19:23] <moritz_> I have been thinking if abolishing want() was a bit too much

[19:24] <moritz_> specifically I thought about keeping a mechanism for querying if something is in void context or not

[19:24] <moritz_> for two reasons

[19:24] <moritz_> 1) getting good warnings

[19:24] <moritz_> 2) making lazy lists eager

[19:24] <moritz_> somebody[tm] said that 'for' and 'map' are synonymous

[19:25] <moritz_> if that's true, and you do 'for @list { .say }' not everything might be printed

[19:25] <moritz_> because the for would be lazily evaluated

[19:25] <TimToady> void is automatically eager

[19:25] *** nihiliad left
[19:26] <masak> I've been wanting proper continuations in the language lately. especially after realizing that PIR has them.

[19:26] <moritz_> but how does builtin know it's in void context?

[19:26] <moritz_> s/does/does the/

[19:26] <moritz_> or the list

[19:28] <TimToady> it doesn't know, it just returns an iterator

[19:28] *** abra left
[19:28] <moritz_> and something calls $it.void on it?

[19:28] <moritz_> which exhausts the iterator

[19:29] <TimToady> something like that

[19:29] <moritz_> ok, who or what calls .void?

[19:30] <TimToady> the implicit statement_prefix:<void> we put at the front of void statements, maybe?

[19:31] <moritz_> wfm

[19:32] <pmichaud> ak

[19:32] <pmichaud> afk

[19:32] <TimToady> hmm, I think we need to define the inside of a gather as "void lazy" though, if void is eager

[19:33] <TimToady> well, gather is magical in any case

[19:34] <TimToady> the laziness is attached to the takes, not to the outer loop

[19:34] *** araujo joined
[19:34] <jaffa8> rakudo: my $v="\033"; print $v;

[19:34] <TimToady> it's more of an async context there

[19:34] <p6eval> rakudo 446d49: OUTPUT«\123 form deprecated, use \o123 instead at line 2, near "\\033\"; pri"␤in Main (src/gen_setting.pm:3469)␤»

[19:35] *** pmurias left
[19:37] *** hercynium joined
[19:39] <araujo> hello

[19:39] <masak> o/

[19:42] <jaffa8> ok, I fixed the errors you mentioned me.

[19:42] <jaffa8> thanks, masak and pmichaud.

[19:43] <jaffa8> and others.,

[19:43] <TimToady> .oOo°  # michelin man waving

[19:43] <araujo> hah

[19:44] <masak> jaffa8: still just an empty page for us non-JavaScripters, though.

[19:44] <jaffa8> there should be a message too.

[19:44] <masak> there isn't.

[19:45] <jaffa8> I can see it in Opera.

[19:45] <jaffa8> what browser do you use?

[19:45] <masak> Firefox 3.

[19:45] <masak> I see it when I view source.

[19:45] <jaffa8> yes, it is in the header.

[19:47] <jaffa8> masak, try now.

[19:47] <masak> aye, that works.

[19:47] <masak> jaffa8++

[19:49] *** SmokeMachine joined
[19:54] *** cognominal left
[20:00] <masak> proto's projects.list now contains 35 projects.

[20:00] <TimToady> phone

[20:01] <moritz_> masak: that's another thing we can chart over time ;-)

[20:02] <masak> moritz_: oh, indeed. thanks to git.

[20:02] <masak> I've been thinking the same thing, actually.

[20:05] <jaffa8> What happened to the perl 5 to perl 6 converter?

[20:05] <moritz_> I guess it bitrotted

[20:05] *** SmokeMachine left
[20:05] <masak> is there code somewhere, publicly?

[20:06] <jaffa8> Could it convert code partially?

[20:06] <ruoso> TimToady, have you seen my changes to Temporal.pod?

[20:07] <masak> ruoso: TimToady is currently on the phone.

[20:07] <moritz_> masak: in pugs/misc/

[20:07] * masak looks

[20:07] <moritz_> misc/pX/Common/P5_to_P6_Translation

[20:08] <masak> ooh, Haskell.

[20:08] <jaffa8> Is it in Haskell?

[20:09] <masak> seems so.

[20:09] <masak> it was a common tool during the Golden Age.

[20:09] <M_o_C> Golden Age of what?

[20:10] <moritz_> of pugs

[20:10] <masak> ...of the history of Perl 6, actually.

[20:10] <masak> what we have now is nice and all, but it's relatively calm compared to the activity back then.

[20:10] <M_o_C> so to what does "it" refer? The converter, haskell or pugs?

[20:10] <masak> Haskell.

[20:11] <jaffa8> I have doubts if Haskell is really compact

[20:11] <araujo> the converter is in Haskell? :)

[20:11] <jaffa8> there are so many lines.

[20:12] <araujo> jaffa8, it is ... compared to many languages out there

[20:12] <araujo> also, remember to do this comparison with static languages too

[20:12] <masak> jaffa8: there are probably many lines because it does a whole lot.

[20:12] <moritz_> araujo: Haskell *is* a static language ;-)

[20:12] <araujo> food 

[20:13] <masak> Haskell is definitely a static language.

[20:13] <masak> anyone who has tried to get a program through GHC can tell you that.

[20:13] <moritz_> aye

[20:14] <araujo> you feel it very dynamic once you get used to it you know :P

[20:14] <masak> yeah, yeah. :)

[20:14] <masak> I feel dynamic once I get going with Java too.

[20:16] <araujo> I remember an interview of this guy ... the STL C++ author (what is his name?) ... telling that he never got used to java , I do think java is a hard language to get used to though

[20:16] *** justatheory left
[20:17] <jaffa8> but where is MADSKILLS?

[20:17] <araujo> Haskell might look tough or ugly at first, but people can certainly get used to it since it is a very simple language

[20:17] <moritz_> knowing Eiffel and C I didn't find it too hard to get used to Java

[20:17] <M_o_C> moritz_, masak: Does "static" only apply to typing or are there other things which can be static/dynamic about a language?

[20:17] *** justatheory joined
[20:18] <masak> good question. binding?

[20:18] <masak> syntax evaluation?

[20:18] <moritz_> monkey patching, for example

[20:19] <M_o_C> syntax evaluation? # True, didn't think of that.

[20:19] <moritz_> but yes, run time tzping and eval() are very typical points

[20:19] <mberends> araujo: http://en.wikipedia.org/wiki/Alexander_Stepanov

[20:19] <jaffa8> if I like about ghc..

[20:19] <jaffa8> it is very easy to make an exe out of it.

[20:20] <moritz_> I saw a great talk (only on youtube, sadly) where the speaker defined dynamic languages as "languages like perl, ruby, php, python, tcl and javascript"

[20:20] * masak would like a language with a built-in dynamic Alexander Stepanov...

[20:20] <araujo> mberends, that one :)

[20:21] <colomon>  rakudo: my $a = 1; my @b = (1, 2, 3); say ($a <<-<< @b).perl

[20:21] <p6eval> rakudo 446d49: OUTPUT«[0, -1, -2]␤»

[20:22] <moritz_> phenny: tell Su-Shee http://rakudo.spreadshirt.net/de/DE/Shop/Index/ Perl 6 goodies without horrible shipping costs. Sadly spreadshirt.de doesn't allow images on dark t-shirts (wtf?)

[20:22] <phenny> moritz_: I'll pass that on when Su-Shee is around.

[20:22] <colomon> rakudo: my $a = 1; my @b = (1, 2, 3); say ($a «-« @b).perl

[20:22] <p6eval> rakudo 446d49: OUTPUT«Non-dwimmy hyperoperator cannot be used on arrays of different sizes or dimensions.␤in Main (/tmp/LipUHwW8BT:2)␤»

[20:22] <araujo> Ok, anyway .. perl6 is going to be a dynatic language

[20:22] <colomon> Aha!

[20:22] <araujo> food time!

[20:23] <masak> Perl 6 is also going to be a static language.

[20:24] <jaffa8> so my is not going to be needed.

[20:24] *** rapacity left
[20:24] *** rapacity joined
[20:24] <araujo> dynatic is dynamic+static! 

[20:24] <TimToady> stynamic

[20:25] <masak> dynastic

[20:25] *** rapacity left
[20:25] <M_o_C> dyntastic :)

[20:25] <TimToady> well, now that quietfanatic is starting to follow in my footsteps...

[20:26] *** SmokeMachine joined
[20:26] <araujo> hah, food time for real :P

[20:28] *** vmbrasseur joined
[20:29] *** vmbrasseur left
[20:29] <TimToady> jaffa8: I am now imagining a style of programming that uses only 'state' declarations

[20:30] <masak> 'dynstatic'?

[20:30] <TimToady> "never call any closure more than once, or it will misbehave"

[20:30] *** dukeleto joined
[20:30] <TimToady> sort of a single-closure-semantics paradigm

[20:31] <[particle]> static-single-assignment

[20:32] <TimToady> sort of hyper structured programming: every block should have a single entry point, and you should only ever call it once

[20:32] <masak> YaY! first Squirrel test passes!

[20:32] <TimToady> sorta like html

[20:32] <moritz_> use_ok('Squirrel'); ?

[20:32] <masak> moritz_: I've never understood those use_ok tests...

[20:33] <TimToady> I'm an HTML programmer; what is this loop thing you keep talking about?

[20:33] <masak> loops are just a special case of on-the-fly code generation.

[20:33] <moritz_> uhm, you can write loops with only state variables

[20:34] <colomon> masak++ # even though as a dog lover I am required to be anti-squirrel...

[20:34] <moritz_> why? do squirrels attack your dog?

[20:35] <colomon> moritz_: No, but my dog would spend all her time chasing squirrels if given the chance.

[20:35] <masak> they gang up on the dog, turn it over, and carry it away...

[20:35] <diakopter> TimToady: wait, but, here's the question about this new language you're pondering:

[20:36] *** eiro left
[20:36] <colomon> I've also sustained minor injuries as she lunged at a squirrel while I've had her on leash....  :)

[20:36] <moritz_> which keeps her fit and healthy - isn't that an argument for squirrels?

[20:36] <diakopter> when you call one of these single-use routines, does control return back to the callsite or to directly after where the routine was declared? :)

[20:36] <colomon> moritz_: shhhh... I can't be heard saying things like that.

[20:37] <TimToady> diakopter: I knows a goto when I sees one.

[20:38] <TimToady> moritz_: yes, you can write a loop, but your hosed if you put a loop inside a loop, 'cause then the inner loop wouldn't reset

[20:38] <TimToady> *you're

[20:39] <TimToady> unless, of course, you recreate the closure :)

[20:39] <diakopter> hosed like piped?

[20:39] <moritz_> unless you manually reset the variables in the inner loop, of course

[20:39] <TimToady> the intertube is a series of hoses

[20:39] <diakopter> and the biggest one goes on forever

[20:40] <TimToady> well, yes, the entire universe *is* inside a black hole, so?

[20:41] <moritz_> saying the univers is *in* something implies that there's an outside, which kinda contradicts the defintion of "universe"

[20:41] <TimToady> I guess a black hole looks kinda like a hose in spacetime

[20:41] * ruoso decommute &

[20:41] *** ruoso left
[20:41] *** buubot left
[20:41] <TimToady> yeah, well, just because that's how the university defines universe doesn't make it so :P

[20:42] *** buubot joined
[20:42] * [particle] refills his klien bottle

[20:42] <mberends> rakudo: class Installer { method fetch { ... }; method fetch { ... }; };

[20:42] <diakopter> TimToady: it's goto, but with context injection

[20:42] <TimToady> wie klien ist es?

[20:42] <p6eval> rakudo 446d49:  ( no output )

[20:42] <pmichaud> My dog chases squirrels all the time.  And rabbits.  Her day is totally incomplete if she doesn't get to go out looking for rabbits, and she very forcefully lets us know that it's time to go look for rabbits.

[20:43] <masak> mberends: I think I reported that as a bug once.

[20:44] *** buubot left
[20:44] <mberends> why am I not surprised? ;)

[20:44] *** eiro joined
[20:44] *** buubot joined
[20:44] <colomon> pmichaud: I'd love to live somewhere rural enough I could let my dog chase off-leash to her heart's content.  She'd love it even more, of course!

[20:44] <TimToady> STD won't catch that one yet, since metaclasses are their own namespace

[20:44] <pmichaud> oh, my dog doesn't get to be off-leash :)

[20:44] *** rapacity joined
[20:45] *** pyrimidine left
[20:45] <pmichaud> at least, not normally.  Sometimes she manages to slip her collar and then we go a-chasing her (as happened last night, unfortunately)

[20:47] <TimToady> diakopter: mostly, the weather here has either been 10 degrees hotter or 10 degrees cooler than predicted

[20:48] <masak> mberends: yup: http://rt.perl.org/rt3/Ticket/Display.html?id=57788

[20:48] <mberends> :) masak++

[20:49] *** pyrimidine joined
[20:49] <TimToady> well, STD will find the subs, since it checks lexpad and package names

[20:49] <TimToady> but methods no longer go into either of those by default

[20:50] *** pyrimidine left
[20:50] *** pyrimidine joined
[20:50] *** dukeleto left
[20:57] * masak uses a given inside a gather!

[20:59] *** stephenlb left
[21:00] *** stephenlb joined
[21:23] *** [1]jaffa8 joined
[21:26] <masak> phenny: tell Tene that I've made nice progress on Squirrel. I've pushed it so that you can see (in the Web.pm repo). try running t/squirrel/sqlite-write.t -- the second test fails for me, even though I think it ought to pass. it's a mystery. will look at it tomorrow with fresh eyes.

[21:26] <phenny> masak: I'll pass that on when Tene is around.

[21:26] <masak> g'night, people.

[21:26] *** masak left
[21:35] *** sundar_ joined
[21:41] *** jaffa8 left
[21:41] *** [1]jaffa8 is now known as jaffa8

[21:49] *** pyrimidine left
[22:01] *** sundar_ left
[22:02] *** SmokeMachine left
[22:05] *** ruoso joined
[22:19] *** jaffa8 left
[22:19] *** mberends left
[22:20] *** lmc left
[22:23] *** Whiteknight joined
[22:24] *** sevvie joined
[22:25] *** Matt-W left
[22:32] *** Matt-W joined
[22:33] *** patspam left
[22:37] *** SmokeMachine joined
[22:42] *** stephenl1 joined
[22:53] *** stephenlb left
[22:54] *** kidd_ left
[23:01] *** jan_ left
[23:05] *** jaldhar joined
[23:06] *** zpmorgan joined
[23:09] *** cognominal joined
[23:12] *** jan joined
[23:12] *** jan is now known as Guest36141

[23:15] *** elton_ joined
[23:16] <s1n> pmichaud: so you fixed Env?

[23:17] <pmichaud> I did.

[23:18] <justatheory> moritz_: honk

[23:18] <s1n> pmichaud: no proxy objects?

[23:18] <pmichaud> I decided that %ENV itself would be the proxy for the entire environment

[23:19] <s1n> how did you fix that? was the change a parrot change?

[23:19] <pmichaud> i.e., I decoupled %ENV from Parrot's Env object, and we just set the environment when we're about to do something where that's liable to make a difference

[23:19] <pmichaud> e.g., just before run()

[23:20] <pmichaud> and opening a command pipe

[23:20] <s1n> hmm, the change was in run()?

[23:21] <pmichaud> several places

[23:22] <s1n> looks like !hash_to_env does some of those bits

[23:22] <pmichaud> but the convincing case is that   { my %*ENV = <a hash>;   run("command");  }   has to work

[23:22] *** tak11 joined
[23:23] <pmichaud> so that told me that proxy objects weren't really the way to go.

[23:23] <pmichaud> sorry I missed yesterday's meeting;  things got hectic around the house and I ended up forgetting about it until it was too late.  I did remember it the day before, though :)

[23:23] <s1n> pmichaud: it seemed way complicated to me but i wasn't in any position to argue with jnthn about it

[23:24] <pmichaud> well, I was the one who originaly thought we'd need proxy objects, so it's ultimately my fault :)

[23:24] *** hercynium left
[23:24] <s1n> it's alright, like i mentioned after the hackathon, i suspected people would miss this one

[23:25] <s1n> no sweat, mini-hackathon in two weeks :)

[23:25] <pmichaud> let me check that it's on my calendar... :)

[23:26] <pmichaud> It is.

[23:27] *** patspam joined
[23:28] *** hercynium joined
[23:32] *** sm` left
[23:32] *** sm` joined
[23:41] *** jferrero left
[23:49] *** ab5tract joined
[23:49] * ruoso .oO( it seems Temporal bikes^Wspec work stabilized a bit)

[23:58] *** patspam left
