[00:12] *** edenc joined
[00:13] <edenc> p6eval: say 3

[00:14] <edenc> perl6: say 3

[00:14] <p6eval> pugs, rakudo 6c43f9: OUTPUT«3␤»

[00:14] <p6eval> ..elf 27271:  ( no output )

[00:15] <edenc> p6eval: my @a = 1,2...[+]; say @a[5];

[00:19] <edenc> perl6: my @a = 1,2...[+]; say @a[5];

[00:19] <p6eval> elf 27271: OUTPUT«Parse error in: /tmp/3FI23Tld4g␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: my @a = 1,2...[+]; say @a[5];␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[00:19] <p6eval> ..STD_red/…

[00:19] <p6eval> ..rakudo 6c43f9: OUTPUT«Statement not terminated properly at line 2, near "...[+]; sa"␤in Main (src/gen_setting.pm:3225)␤»

[00:19] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "];"␤    at /tmp/OaGIz91dsB line 1, column 17␤»

[00:19] *** cognominal left
[00:24] <TimToady> rakudo: 1,2,...&[+]

[00:24] <p6eval> rakudo 6c43f9: OUTPUT«Statement not terminated properly at line 2, near "&[+]"␤in Main (src/gen_setting.pm:3225)␤»

[00:24] <TimToady> rakudo: 1,2,...&infix:<+>

[00:25] <p6eval> rakudo 6c43f9: OUTPUT«Statement not terminated properly at line 2, near ":<+>"␤in Main (src/gen_setting.pm:3225)␤»

[00:25] <TimToady> rakudo: 1,2...&infix:<+>

[00:25] <p6eval> rakudo 6c43f9:  ( no output )

[00:25] <TimToady> rakudo: say 1,2...&infix:<+>

[00:25] <p6eval> rakudo 6c43f9:  ( no output )

[00:26] <TimToady> rakudo: say 1,2...{ (state $i)++ < 100 ?? $^a + $^b !! () }

[00:26] <p6eval> rakudo 6c43f9: OUTPUT«Use of uninitialized

[00:26] <p6eval> ..value␤123581321345589144233377610987159725844181676510946177112865746368750251213931964183178115142298320401346269217830935245785702887922746514930352241578173908816963245986102334155165580141267914296433494437701408733113490317018363119032971215073480752697677…

[00:29] *** athomason left
[00:39] *** dduncan joined
[00:39] *** dduncan left
[00:44] *** snarkyboojum joined
[00:45] *** xinming_ joined
[00:46] *** synth left
[00:51] *** xinming left
[00:51] *** synth joined
[00:57] *** xinming_ left
[00:58] *** cognominal joined
[00:58] *** xinming joined
[00:59] *** synth left
[01:00] *** justatheory left
[01:18] *** DemoFreak left
[01:26] *** last joined
[01:27] *** SmokeMachine joined
[01:28] *** drbean_ joined
[01:32] *** twigil joined
[01:34] *** SmokeMachine left
[01:35] *** SmokeMachine joined
[01:35] *** payload left
[01:36] *** SmokeMachine left
[01:36] *** SmokeMachine joined
[01:36] *** wknight8111 left
[01:37] *** SmokeMachine left
[01:37] *** SmokeMachine joined
[01:38] *** SmokeMachine left
[01:39] *** lichtkind_ left
[01:40] *** drbean left
[01:46] *** mkfort left
[01:48] *** payload joined
[01:56] *** agentzh left
[01:58] *** molaf_xx left
[01:59] *** molaf_xx joined
[02:01] *** snarkyboojum left
[02:13] <amoc> rakudo: my $c = -> $x { state $i++; say "$x: $i" }; $c('a'); $c('b');

[02:13] <p6eval> rakudo 6c43f9: OUTPUT«a: 1␤b: 2␤»

[02:21] *** icwiener left
[02:32] *** snarkyboojum joined
[02:50] *** nihiliad joined
[02:52] *** snarkyboojum_ joined
[02:57] *** snarkyboojum left
[02:59] *** Limbic_Region left
[03:11] *** zamolxes joined
[03:14] *** viklund left
[03:15] *** FurnaceBoy left
[03:16] *** agentzh joined
[03:29] *** azawawi joined
[03:29] <azawawi> good morning

[03:32] *** last left
[03:32] *** cls_bsd left
[03:35] *** cls_bsd joined
[03:44] *** jaldhar joined
[03:47] <skids> do we have a working pastebot again?

[03:48] *** mkfort joined
[03:48] <skids> nopaste?

[03:53] <TimToady> lisppaste3?

[03:54] <TimToady> lisppaste3: uri?

[03:54] <eternaleye> paste?

[03:55] <eternaleye> Eh, I'll fetch from backlog

[03:55] <TimToady> http://irclog.perlgeek.de/perl6/2009-06-26#i_1268441

[03:57] <eternaleye> http://paste.lisp.org/new/perl6

[03:58] *** KyleHa joined
[03:58] <eternaleye> Lesson learned: psql and grep are slower than infrared clogs

[04:02] <skids> Ah, well, already have in in gist now at this point, but thanks.

[04:03] <skids> Can anyone topic that?

[04:03] <eternaleye> TimToady: Aha, lisppaste3 responds to 'url?' rather than 'uri?'

[04:03] <eternaleye> lisppaste3: url?

[04:03] <lisppaste3> To use the lisppaste bot, visit http://paste.lisp.org/new/perl6 and enter your paste.

[04:09] <skids> phenny: tell ruoso http://gist.github.com/136886

[04:09] <phenny> skids: I'll pass that on when ruoso is around.

[04:14] *** synth joined
[04:28] <pugs_svn> r27272 | lwall++ | [Cursor.pmc] fake up a YOU_ARE_HERE for .pm files to dump .yml

[04:28] <pugs_svn> r27272 | lwall++ | [Cursor.pmc] don't add & names for enums or exported constants

[04:28] <pugs_svn> r27272 | lwall++ | [Cursor.pmc] .yml doesn't include its setting, and hides GLOBAL as UNIT::GLOBALish

[04:28] <pugs_svn> r27272 | lwall++ | [DEBUG.pm] typo

[04:28] <pugs_svn> r27272 | lwall++ | [CORE.setting] change some classes to roles and subsets now that those work

[04:28] <pugs_svn> r27272 | lwall++ | [CORE.setting] fake up DEBUG module as enum for now

[04:28] <pugs_svn> r27272 | lwall++ | [STD.pm] fix SETTING and UNIT semantics

[04:28] <pugs_svn> r27272 | lwall++ | [STD.pm] don't add & names in constant context

[04:28] <pugs_svn> r27272 | lwall++ | [STD.pm] reconstruct CORE and GLOBAL correctly from SETTING that maybe isn't CORE

[04:28] <pugs_svn> r27272 | lwall++ | [STD.pm] don't localize $*CORE, $*GLOBAL, and $*UNIT since they're used outside .parsefile

[04:28] <pugs_svn> r27272 | lwall++ | [STD.pm] don't create new pad for role's signature before you know there is one

[04:28] <pugs_svn> r27272 | lwall++ | [Makefile] don't fail snapshot on unimportant transients

[04:29] <azawawi> wow

[04:29] <azawawi> overwhelming commit

[04:30] <TimToady> have the appropriate amount of fun...

[04:30] *** KyleHa left
[04:30] *** KyleHa joined
[04:30] <TimToady> std: 72

[04:31] <p6eval> std 27271: OUTPUT«ok 00:02 35m␤»

[04:32] <TimToady> I didn't quite get to the point of teaching use how to pull the .pm's .yml back in, however

[04:32] <KyleHa> perl6: my $x = 42;my $y = \$x; say $y.WHAT.perl

[04:32] <p6eval> elf 27272: OUTPUT«Undefined subroutine &GLOBAL::prefix__92 called at (eval 125) line 4.␤ at ./elf_h line 5881␤»

[04:32] <p6eval> ..pugs:  ( no output )

[04:32] <p6eval> ..rakudo 6c43f9: OUTPUT«Int␤»

[04:33] <TimToady> that's for tomorrow's airplane ride, I guess, and then I can kick Test and DEBUG out of CORE.setting

[04:34] <azawawi> meanwhile i will get viv syntax highlighting and rename variable refactoring up and running :)

[04:34] <azawawi> i really like viv

[04:34] <TimToady> it has it's ups and downs

[04:34] <KyleHa> rakudo: my $x = 42;say $x.WHAT.perl;

[04:34] <p6eval> rakudo 6c43f9: OUTPUT«Int␤»

[04:34] <KyleHa> An Int and a reference to an Int are both Int?

[04:35] <azawawi> TimToady: what are viv 's problems? 

[04:35] <TimToady> it's not done yet :P

[04:36] <TimToady> KyleHa: a capture containing a single item will behave as that single item in scalar context

[04:36] <azawawi> no problem... i'll take it as it is if it works :)

[04:37] <TimToady> std: 72

[04:37] <p6eval> std 27271: OUTPUT«ok 00:02 35m␤»

[04:37] <KyleHa> Are captures described in S02?

[04:38] * azawawi breakfast &

[04:38] <TimToady> they're kinda described all over the place

[04:39] <TimToady> I recommend a recursive grep of the Spec dir

[04:39] <KyleHa> Yeah, I did that...that's why I wasn't sure what the "one place" was.

[04:39] <KyleHa> Turns out there isn't a one place.

[04:41] <TimToady> well, I'm only going to get 4 hrs of sleep now, so I'd better try to zzz off

[04:42] *** KyleHa1 joined
[04:42] <TimToady> stupid how you have to get up early to fly west to a later time zone...

[04:42] *** KyleHa left
[04:42] * TimToady hits the hay &

[04:42] <TimToady> std: 72

[04:42] <p6eval> std 27272: OUTPUT«ok 00:02 35m␤»

[04:42] <KyleHa1> Hotel Wi-Fi is not exactly solid.

[04:43] <TimToady> std: Num::pi

[04:43] <p6eval> std 27272: OUTPUT«Undeclared name:␤      Num::pi used at 1 ␤ok 00:02 35m␤»

[04:43] <TimToady> std: pi

[04:43] <p6eval> std 27272: OUTPUT«ok 00:02 35m␤»

[04:43] <TimToady> strange that it exports pi and not Num::pi

[04:44] <TimToady> oh well, something else for tomorrow

[04:44] <TimToady> zzz & # thunk

[04:53] *** Molaf joined
[04:57] *** KyleHa joined
[04:57] *** KyleHa1 left
[04:58] *** KyleHa left
[04:58] *** KyleHa1 joined
[04:58] <eternaleye> re pastebots, I just sent http://gist.github.com/136901 on GitHub's contact form, so maybe someday we'll have a gist-lister bot

[04:59] *** KyleHa1 left
[05:02] *** s1n left
[05:02] *** s1n joined
[05:04] *** s1n left
[05:04] *** s1n joined
[05:07] <amoc> std: [+]

[05:07] <p6eval> std 27272: OUTPUT«ok 00:02 36m␤»

[05:15] *** azawawi left
[05:17] *** azawawi joined
[05:21] <azawawi> @tell literal i am having grok 0.06 win32 installation issues, please see http://gist.github.com/136907

[05:21] <lambdabot> Consider it noted.

[05:27] *** azawawi left
[05:29] *** Trey left
[05:38] *** justatheory joined
[05:40] *** meppl joined
[05:47] *** justatheory left
[05:49] *** M_o_C joined
[05:51] *** ejs joined
[05:54] *** skids left
[05:54] <pugs_svn> r27273 | kyle++ | [t/spec] Added autoincrement-range.t with a lot of overlap with autoincrement.t

[05:54] *** KyleHa joined
[06:05] *** KyleHa left
[06:05] *** KyleHa1 joined
[06:06] *** KyleHa1 left
[06:07] *** mberends joined
[06:09] *** [bjoern] left
[06:15] *** ejs left
[06:28] *** KyleHa joined
[06:28] <pugs_svn> r27274 | kyle++ | [t/spec] Bring autoincrement.t in line with autoincrement-range.t

[06:29] <KyleHa> Since I broke out autoincrement-range.t, I'm thinking that needs to be added to rakudo's t/spectest.data somewhere.

[06:38] *** ejs0 joined
[06:40] <pugs_svn> r27275 | kyle++ | [t] Fix lies in the README file.

[06:41] *** Avada joined
[06:41] <KyleHa> If that's not enough damage for the weekend, maybe I can pick it up again Sunday night when I'll be even more tired.  Nyuck nyuck nyuck.

[06:42] *** KyleHa left
[06:48] *** finanalyst joined
[06:52] <amoc> rakudo: class A { method new () { say "nth" }; method new ($x) { $x.say } }; my $o = A.new;

[06:52] <p6eval> rakudo 6c43f9: OUTPUT«too few arguments passed (1) - 3 params expected␤in method A::new (/tmp/NpWfihS7A0:2)␤called from Main (/tmp/NpWfihS7A0:2)␤»

[06:52] * amoc reading syns if he is wrong.

[06:54] <amoc> rakudo: class A { method new #{no-()}{ say "nth" }; method new ($x) { $x.say } }; my $o = A.new;

[06:54] <p6eval> rakudo 6c43f9: OUTPUT«too few arguments passed (1) - 3 params expected␤in method A::new (/tmp/Bk6hP9Eqsa:2)␤called from Main (/tmp/Bk6hP9Eqsa:2)␤»

[06:59] *** nihiliad left
[07:02] *** xinming_ joined
[07:03] *** nihiliad joined
[07:03] <amoc> rakudo: class A { submethod BUILD() { say "nth" }; submethod BUILD($x) { $x.say } }; my $o = A.new;

[07:03] <p6eval> rakudo 6c43f9: OUTPUT«too few arguments passed (1) - 3 params expected␤in submethod A::BUILD (/tmp/ZlHwBx56ry:2)␤called from Main (/tmp/ZlHwBx56ry:2)␤»

[07:04] <amoc> rakudo: class A { submethod BUILD($x) { $x.say }; }; my $o = A.new('hi');

[07:04] <p6eval> rakudo 6c43f9: OUTPUT«too few arguments passed (1) - 3 params expected␤in submethod A::BUILD (/tmp/TaM1q4vlXJ:2)␤called from Main (/tmp/TaM1q4vlXJ:2)␤»

[07:05] *** nihiliad left
[07:08] <amoc> std: class A { submethod BUILD($x) { $x.say }; }; my $o = A.new('hi'); # it may be at least not a grammatical err?

[07:08] <p6eval> std 27275: OUTPUT«ok 00:03 38m␤»

[07:15] *** xinming left
[07:21] *** Avada left
[07:25] <amoc> rakudo: class A { has $.bar is rw; submethod BUILD($.bar = 5) {} }; my $o = A.new(bar=>1); $o.bar.say

[07:25] <p6eval> rakudo 6c43f9: OUTPUT«Use of uninitialized value␤␤»

[07:26] * amoc does not report rakudobug (as there is "rakudo todo" flag in t/spec/S12-attributes/instance.t)

[07:31] *** moritz_ changes topic to: »ö« | http://perl6-projects.org/ | nopaste: http://paste.lisp.org/new/perl6 | evalbot: perl6: say 3;' | irclog: http://irc.pugscode.org/ | UTF-8 is our friend!

[07:38] *** DemoFreak joined
[07:39] *** zamolxes left
[07:39] <moritz_> rakudo: PAST::Val.new()

[07:39] <p6eval> rakudo 6c43f9:  ( no output )

[07:57] *** Ryan52 joined
[08:00] *** iblechbot joined
[08:04] <amoc> iblechbot: help

[08:04] <amoc> iblechbot: ping

[08:14] *** ejs joined
[08:15] *** ejs left
[08:16] *** Chillance joined
[08:17] *** amoc left
[08:19] *** ejs0 left
[08:23] *** viklund joined
[08:28] *** ejs joined
[08:34] *** amoc joined
[08:35] *** Su-Shee joined
[08:35] <Su-Shee> good morning.

[08:35] *** snarkyboojum_ left
[08:41] *** jlmoko left
[08:56] *** finanalyst left
[08:56] *** PZt joined
[08:59] *** ejs1 joined
[09:00] *** ejs left
[09:02] *** ejs1 left
[09:11] *** [particle]1 joined
[09:13] *** beggars joined
[09:24] *** ejs0 joined
[09:27] *** [particle] left
[09:29] *** jlaire joined
[09:34] *** icwiener joined
[09:38] <amoc> rakudo: class A { method foo() {say 'no argument~'}; method foo($a) { $a.say }}; my $o = A.new; $o.foo(1); $o.foo();

[09:38] <p6eval> rakudo 6c43f9: OUTPUT«1␤too few arguments passed (1) - 3 params expected␤in method A::foo (/tmp/llOR59FON7:2)␤called from Main (/tmp/llOR59FON7:2)␤»

[09:38] <amoc> std: class A { method foo() {say 'no argument~'}; method foo($a) { $a.say }}; my $o = A.new; $o.foo(1); $o.foo();

[09:38] <p6eval> std 27275: OUTPUT«ok 00:03 38m␤»

[09:39] <amoc> pugs: class A { method foo() {say 'no argument~'}; method foo($a) { $a.say }}; my $o = A.new; $o.foo(1); $o.foo();

[09:39] <p6eval> pugs: OUTPUT«1␤*** No such method in class A: "&foo"␤    at /tmp/dsSNGtRI1l line 1, column 100-108␤»

[09:40] <amoc> er...

[09:40] <amoc> pugs: class A { method foo() {say 'no argument~'}; method foo($a) { $a.say }}; my $o = A.new; $o.foo('one argument');

[09:40] <p6eval> pugs: OUTPUT«one argument␤»

[09:40] <amoc> pugs: class A { method foo() {say 'no argument~'}; method foo($a) { $a.say }}; my $o = A.new; $o.foo(); #no argument

[09:41] <p6eval> pugs: OUTPUT«*** No such method in class A: "&foo"␤    at /tmp/kSoItAAMb5 line 1, column 89-97␤»

[09:42] <amoc> pugs: class A { method foo() {say 'no argument~'} }; my $o = A.new; $o.foo(); #no argument + one dispatch

[09:42] <p6eval> pugs: OUTPUT«no argument~␤»

[09:42] * amoc check test-suites and tickets

[09:51] <moritz_> amoc: the error is that rakudo should complain about re-defintion of non-multi method

[09:57] *** pmurias joined
[09:57] <pmurias> skids_: ping

[10:00] *** payload left
[10:23] *** Muixirt joined
[10:34] *** ejs0 left
[10:49] * amoc is back

[10:50] * moritz_ is gone for the weekend

[10:52] <amoc> moritz_: have a good weekend!

[10:52] * amoc checks to submit 

[10:57] * TimToady has just settled in at gate A3

[11:03] <amoc> submitted [perl #67024]

[11:16] *** iblechbot left
[11:26] <TimToady> hmm, I'm thinking constant wants to be "our" rather than "my", actually

[11:27] <TimToady> otherwise, after class Num { constant pi is export = 3; }, you can get to pi but can't get to Num::pi

[11:39] <pmurias> perl6: sort(1,2,3,4)

[11:39] <p6eval> elf 27275: OUTPUT«Undefined subroutine &GLOBAL::sort called at (eval 122) line 3.␤ at ./elf_h line 5881␤»

[11:39] <p6eval> ..pugs, rakudo 6c43f9:  ( no output )

[11:39] <pmurias> perl6: say sort(1,2,3,4)

[11:39] <p6eval> elf 27275: OUTPUT«Undefined subroutine &GLOBAL::sort called at (eval 123) line 3.␤ at ./elf_h line 5881␤»

[11:39] <p6eval> ..pugs, rakudo 6c43f9: OUTPUT«1234␤»

[11:40] <pmurias> perl6: say sort([3,2,1,5])

[11:40] <p6eval> pugs: OUTPUT«1235␤»

[11:40] <p6eval> ..elf 27275: OUTPUT«Undefined subroutine &GLOBAL::sort called at (eval 123) line 3.␤ at ./elf_h line 5881␤»

[11:40] <p6eval> ..rakudo 6c43f9: OUTPUT«3 2 1 5␤»

[11:40] <pmurias> perl6: say sort({^a cmp $^b},[3,2,1,5])

[11:40] <p6eval> elf 27275: OUTPUT«Undefined subroutine &GLOBAL::cmp called at (eval 128) line 3.␤ at ./elf_h line 5881␤»

[11:40] <p6eval> ..rakudo 6c43f9: OUTPUT«3 2 1 5␤»

[11:40] <p6eval> ..pugs: OUTPUT«3 2 1 5<SubBlock(<anon>)>␤»

[11:42] *** fridim joined
[11:43] <TimToady> std: Num::pi

[11:43] <p6eval> std 27275: OUTPUT«Undeclared name:␤      Num::pi used at 1 ␤ok 00:02 35m␤»

[11:43] <TimToady> std: pi

[11:43] <p6eval> std 27275: OUTPUT«ok 00:02 35m␤»

[11:44] <pugs_svn> r27276 | lwall++ | [STD] make 'constant' have 'our' semantics

[11:47] <TimToady> std: Num::pi

[11:47] <p6eval> std 27275: OUTPUT«Undeclared name:␤      Num::pi used at 1 ␤ok 00:02 35m␤»

[11:52] <TimToady> std: Num::pi

[11:52] <p6eval> std 27275: OUTPUT«Undeclared name:␤      Num::pi used at 1 ␤ok 00:02 35m␤»

[11:56] *** vv31 joined
[11:57] <TimToady> std: Num::pi

[11:57] <p6eval> std 27276: OUTPUT«Undeclared name:␤      Num::pi used at 1 ␤ok 00:02 35m␤»

[11:58] <TimToady> hmm, need to force recompile of setting before that'll work

[11:58] <TimToady> well, they're boarding, so I'll have to shut down soon

[11:59] <pugs_svn> r27277 | lwall++ | [CORE.setting] just for a recompile

[11:59] <TimToady> bbl &

[12:00] *** ruoso joined
[12:07] <ruoso> Hello!

[12:07] <phenny> ruoso: 04:09Z <skids> tell ruoso http://gist.github.com/136886

[12:08] <amoc> rakudo: my @list = 1..4; say 2 ~~ @list;

[12:08] <ruoso> skids_, hi

[12:08] <p6eval> rakudo 6c43f9: OUTPUT«0␤»

[12:09] * ruoso @fisl10... will give a Perl 6 talk in about 3 hours

[12:13] *** xomas left
[12:13] <Su-Shee> ruoso: any live stream? :)

[12:13] <ruoso> Su-Shee, I think there is... but the talk is in portuguese

[12:14] *** xomas joined
[12:15] <Su-Shee> ruoso: which I'm sure will sound great, because portuguese has a nice ring.. but ok. I won't understand. :)

[12:16] *** skids joined
[12:17] * mberends wishes ruoso a good talk, and looks forward to learning some Portuguese at YAPC::EU

[12:17] *** wknight8111 joined
[12:19] <Muixirt> is there some workaround for the lack of 'buf' or 'buf8' in rakudo?

[12:21] <ruoso> skids, hi

[12:21] <skids> ruoso: hey

[12:22] <skids> Muixirt: I think Buf may be higher on pmichaud's TODO list nowadays.  At least he spent some time getting the specs straight with TimToady a week or so ago.

[12:22] <skids> ruoso: so did I get most of that right?

[12:23] <Muixirt> skids, thanks

[12:25] <Muixirt> skids, can stuff my binary data into strings without the unicode ballyhoo that mangles it?

[12:26] <amoc> it seems there is no ( Num ~~ Array ) case in smart-match operator in spec.. '~ '

[12:27] <amoc> ruoso: wishes good talk !

[12:31] *** payload joined
[12:31] <skids> Muixirt: there's really no good way to handle packed binary data yet.

[12:31] <skids> Except maybe if you can get it into an array as nums.

[12:33] <skids> (believe me, I've tried :-)

[12:33] <ruoso> skids, yes... it is... you could even commit it already

[12:33] <ruoso> amoc, thansk

[12:34] <ruoso> skids, the writing is correct... the struct SMOP__Object simply dfines the header for every SMOP__Object-compatible structure

[12:36] <ruoso> skids, a weak reference is an object that doesn't count in the reference counting

[12:36] <ruoso> skids, to solve circular-reference issues

[12:36] <ruoso> skids, and yes, the capture owns the object that you put inside it...

[12:36] <skids> OK, so the object may disappear with the reference intact.

[12:36] <skids> (if you are not careful)

[12:37] <ruoso> skids, and when that happens, your weakref starts pointing to false

[12:38] <skids> Ah, so a REFERENCE(weakref) would work, too, it's just a proxy object that the GC will route to false later.

[12:39] <skids> So how does one get ownership back from a returned capture?

[12:39] *** amoc__ joined
[12:40] *** amoc__ is now known as am0c

[12:40] <skids> Or I guess I mean, how does one extract a non-capture object from a capture... that's probably something I will find with more reading.

[12:40] <skids> How about #4?

[12:42] <ruoso> skids, to get ownership you just need to REFERENCE, then you also has the ownership

[12:43] <ruoso> skids, initially you would need to send MESSAGE to it,

[12:43] <ruoso> but that obviously creates a circularity problem

[12:43] <ruoso> so you can check if the capture you received is a native capture

[12:43] <ruoso> and, in that case, use the C functions to manipulate it

[12:43] <ruoso> and you can know if it is a native capture by looking at the responder interface

[12:46] <pmurias> ruoso: hi

[12:46] <ruoso> hi pmurias 

[12:47] <ruoso> skids, in #4, the capture owns the object inside it, yes...

[12:51] <pmurias> skids: re #3 most of the time MESSAGE should returns a native false, and the actual return value is passed by setr

[12:51] <skids> What I mean by #4 is, how many times would the code that got the capture release, and how many times would the code that sent the message release?

[12:52] <pmurias> 1-1

[12:52] <skids> OK, so it is a counting not total transfer of all ownership.  Just making sure.

[12:54] <skids> I'll have to read further to get to setr, but I'll put something vaguely correct in there until I do.

[12:56] *** amoc left
[12:56] *** payload left
[12:56] <skids> But first, I have to clean up after my cats :-P  

[13:00] <pmurias> ruoso: have you seen the new hack used to export stuff out of Test.pm?

[13:00] <ruoso> not yet... getting everything set up to the talk I'll give...

[13:02] <pmurias> ruoso: what's your talk title?

[13:03] <ruoso> Perl 6 - em busca do santo graal, the quest for the hole grail, in english

[13:06] *** fridim left
[13:12] *** wknight8111 left
[13:12] *** last joined
[13:13] *** wknight8111 joined
[13:19] <skids> Does it turn out that the grail is actually a woman (or, female butterfly?)

[13:33] *** Trey joined
[13:35] *** mberends left
[13:37] *** finanalyst joined
[13:39] *** snarkyboojum joined
[13:54] *** gabiruh joined
[13:57] <skids> Hrm, captures may survive a MESSAGE, correct?  So ownership isn't really transferred it is copied?

[13:58] *** M_o_C left
[14:00] *** M_o_C joined
[14:01] *** a3r0 joined
[14:05] *** Lorn left
[14:09] <jnthn> hi all - back from vacation

[14:15] <pmurias> skids: 1 unit of ownership is transfered

[14:16] *** M_o_C left
[14:16] <pmurias> skids: the reference counter represent the number of owners an object has

[14:21] <pugs_svn> r27278 | wayland++ | While I'm usually happy to let Larry be the benevolent dictator, this time I must put my 

[14:21] <pugs_svn> r27278 | wayland++ | foot down.  The repetition of my name (implying that I'm twice as important as the other 

[14:21] <pugs_svn> r27278 | wayland++ | person mentioned), while flattering, and while complying with the spirit of his dictum of 

[14:21] <pugs_svn> r27278 | wayland++ | treating everyone equally (in that it treats those with more merit ;) more highly than 

[14:21] <pugs_svn> r27278 | wayland++ | others), does not comply with the letter of the aforesaid dictum, in that my name appears 

[14:21] <pugs_svn> r27278 | wayland++ | twice, and the name of the mere benevolent dictator for life appears only once.  In order 

[14:21] <pugs_svn> r27278 | wayland++ | that the situation might be remedied immediately, I hereby make this commit to our 

[14:21] <pugs_svn> r27278 | wayland++ | repository.  

[14:23] <skids> pmurias: got it.  Just to check, though, captures don't get consumed by MESSAGE, right, unless the code calling the MESSAGE does not refer to them beyond that point?

[14:24] <skids> (that is, the code still has to release the capture itself)

[14:34] <ruoso> skids, usually the code that receives a capture should release it at the end

[14:35] <skids> Ah, that's a good thing to know.

[14:35] <ruoso> jnthn, welcome back

[14:36] <ruoso> in a few minutes we'll be live from the Perl 6 talk I'll be giving

[14:36] <Trey> ruoso: where?

[14:36] <skids> If it does not release the capture for some reason, it should not release the objects that were inside, or should it?

[14:36] <ruoso> Porto Alegre, Brasil

[14:37] <ruoso> Inernational Free Software Forum - FISL

[14:37] <ruoso> 7k atendents this year

[14:37] <skids> (and, corollary to that,  it need only release the capture, not the individual objects?)

[14:37] <Trey> nice.  slides online?

[14:38] <Trey> in English, then, I was going to say something em Português :)

[14:39] <ruoso> Trey, the slides are not yet online... they are currently in portuguese, but I now have a policy of bilingual posting, so I should translate the slides as well soon

[14:40] *** mjk joined
[14:40] <ruoso> skids, if it gets one of the objects inside the capture, it will own that object, so it should release it as well...

[14:42] <skids> so during a call both the capture object and the code own each object?

[14:42] <skids> And most cases, the caller will assume that the callee will release the capture object?

[14:43] <Trey> rakudo: sub baz { say "$^a!" }; try { baz 'one', 'two'; CATCH { default { say 'whoops' } }}

[14:43] <p6eval> rakudo 6c43f9: OUTPUT«whoops␤»

[14:43] <Trey> rakudo: sub baz { say "$^a!" }; { baz 'one', 'two'; CATCH { default { say 'whoops' } }}

[14:43] <p6eval> rakudo 6c43f9: OUTPUT«whoops␤too many arguments passed (2) - 1 params expected␤in sub baz (/tmp/kbM6jjGuyy:1)␤called from Main (/tmp/kbM6jjGuyy:2)␤»

[14:43] <skids> Or, it has to explicitly get the object out of the capture... and until then it does not own the object.

[14:43] <Trey> Is that correct?  I thought the presence or absence of "try" was not supposed to have any effect when a CATCH block was present

[14:44] <xinming_> might be a dumb question, How complete is rakudo perl 6 for now please? I mean, the completiness.

[14:44] <Trey> xinming_: http://rakudo.org/status

[14:46] <xinming_> Trey: thanks

[14:46] <xinming_> It seems, It catches up with old pugs implementation now.

[14:46] *** fridim joined
[14:50] <skids> xinming_: in most things.  pugs still has laziness, rakudo not yet.

[14:51] *** Limbic_Region joined
[14:51] *** PacoLinux left
[14:51] <xinming_> skids: Because It's based on haskell. :-)

[14:54] *** pmichaud_ is now known as pmichaud

[14:54] <skids> skids: yep, pugs got laziness for free. rakudo needs to work for it.

[14:54] <Trey> pmichaud: see last two rakudo's ^^ is my understanding of C<try> wrong?

[14:55] <pmichaud> Trey: I suspect we don't automatically convert CATCH blocks into try's

[14:56] *** mjk left
[14:56] *** |mjk| joined
[14:57] <Trey> once i figure out how the tests are laid out now, i'll add a test, my commit bit still works, but it's been three years since I've touched the test suite :)

[14:57] <jnthn> pmichaud: o/

[14:58] *** FurnaceBoy joined
[14:58] <pmichaud> hello, jnthn!

[14:59] <pmichaud> back from travels, or still on them?

[14:59] <jnthn> Back.

[14:59] <pmichaud> excellent.  I'll be back on Tue.

[14:59] <jnthn> OK. How's things? I've been almost entirely offline...

[14:59] <pmichaud> (I'll be around off-and-on between now and then, but currently I'm on "vacation")

[15:00] <pmichaud> things are fairly well.  Lots of little role and class issues have been making it to RT -- I'm hoping you can look at some of those.

[15:00] <jnthn> *nod*

[15:00] <pmichaud> I've been unable to switch PMCs to use 'rw' instead of 'readonly' -- Parrot segfaults and/or has memory corruption issues.

[15:00] <jnthn> Ouch.

[15:01] <jnthn> gc-related or not or unknown?

[15:01] <pmichaud> even simply adding the property (but not using it, or getting rid of the 'readonly' property) is sufficient to mess things up.

[15:01] <pmichaud> gc-related; or at least the -G flag causes the problems to disappear.

[15:02] <jnthn> OK, not good.

[15:03] <pmichaud> I started closing tickets on Thursday, but getting operator definition in setting ended up taking a long time (due to spectest slowness)

[15:03] <pmichaud> anyway, I think we can start defining operators in setting

[15:03] <pmichaud> (there are already a few there)

[15:04] <jnthn> OK, sounds good. I will git pull, plus be reading the spec commits over the next couple of days.

[15:04] <pmichaud> okay, good plan.

[15:04] <jnthn> Try and get caught up with what's been happening.

[15:05] <pmurias> skids: the calle has to explicitly get out the object from the capture

[15:05] <pmichaud> Not a whole lot of significance changed while you were gone -- I kept running into Parrot GC issues.

[15:05] <pmichaud> and preparation for pvmw and yapc::na

[15:06] <jnthn> OK, did they happen yet?

[15:06] <pmichaud> yes

[15:06] <jnthn> OK. How did they go?

[15:06] <pmichaud> pvmw was last weekend, yapc::na was mon-wed, hackathon on thurs  (when I worked on operators in setting)

[15:06] <pmichaud> they all went really well.  We had very good participation at pvmw

[15:06] <pmichaud> I need to write up my summary, although you can probably find whiteknight's summary on the web

[15:07] <jnthn> ok, great

[15:07] *** snarkyboojum left
[15:08] *** PacoLinux joined
[15:09] <skids> pmurias: ok, so the only ownership that is transferred is that of the aggregate capture object.  Much clearer now.

[15:09] <ruoso> Hey guys!! you're live now at FISL

[15:09] <ruoso> say hello to Porto Alegre

[15:09] <pmichaud> hello, Porto Alegre!

[15:09] <skids> hola!  Or is that only Spanish?

[15:10] *** beggars left
[15:10] <ruoso> hola is spanish... you can say "OI"

[15:12] <skids> "OI".say

[15:13] <skids> Aren't we a talkative bunch now? :-)

[15:14] *** |mjk| left
[15:15] *** gfldex is now known as Guest93618

[15:17] <pmurias> skids: it might be helpfull to look at the code a bit too

[15:18] <skids> Yeah, this last section really requires more reading than what I've done so far.

[15:18] <skids> But I think I can get it mostly right and then go back and fix details.

[15:21] <skids> However, it is good to try at least before reading the code, that way, I get the overview documentation to answer questions people who have not yet read the code might have.

[15:21] <skids> (which I might overlook otherwise)

[15:23] *** [bjoern] joined
[15:24] *** Guest93618 left
[15:24] *** azawawi joined
[15:24] <azawawi> hi

[15:27] <xinming_> BTW, it seems, feather is running out of swap, anyone here have priviledge to enlarge the swap?

[15:28] *** PacoLinux left
[15:32] *** PacoLinux joined
[15:33] <pugs_svn> r27279 | skids++ | Grammar, many clarifications, more explicit.  

[15:33] <pugs_svn> r27279 | skids++ | Will revisit after reading more code.

[15:38] *** PacoLinux left
[15:39] *** PacoLinux joined
[15:39] <pmurias> azawawi: hi

[15:41] <azawawi> pmurias: hey! I see mildew is moving nicely :)

[15:48] *** PacoLinux left
[15:51] <[bjoern]> rakudo: say (::&say)

[15:51] <p6eval> rakudo 6c43f9: OUTPUT«ResizablePMCArray: Can't pop from an empty array!␤in Main (src/gen_setting.pm:2183)␤»

[15:53] *** PacoLinux joined
[15:53] <[bjoern]> rakudo: ...

[15:53] <p6eval> rakudo 6c43f9: OUTPUT«Can't return outside a routine␤in Main (/tmp/nIP8tfmBs4:2)␤»

[15:55] <[bjoern]> rakudo: say nothing

[15:55] <p6eval> rakudo 6c43f9: OUTPUT«Null PMC access in isa()␤in Main (/tmp/lrWluvNZM0:2)␤»

[15:57] *** brunov joined
[15:57] *** lichtkind joined
[15:57] *** azawawi left
[16:00] <pugs_svn> r27280 | azawawi++ | [S:H:P6] experiment with viv's based coloring

[16:04] *** REPLeffect left
[16:07] *** a3r0 left
[16:08] <pugs_svn> r27281 | azawawi++ | [S:H:P6] Move find variable declaration and rename variable into their own functions...

[16:14] *** iblechbot joined
[16:14] *** PacoLinux left
[16:16] *** PacoLinux joined
[16:20] *** PacoLinux left
[16:22] *** PacoLinux joined
[16:26] *** icwiener left
[16:28] *** jonathanturner joined
[16:29] *** ruoso left
[16:35] *** maettu joined
[16:41] *** lichtkind left
[16:43] *** Psyche^ joined
[16:43] *** icwiener joined
[16:44] <pugs_svn> r27282 | azawawi++ | [S:H:P6] A bit of ansi coloring fun.

[16:47] <pmurias> skids: btw if you have any questions about the code feel free to ask

[16:48] <pugs_svn> r27283 | azawawi++ | [S:H:P6] add use lib 'lib'

[16:50] <pugs_svn> r27284 | azawawi++ | [S:H:P6] Fixed ansi coloring to actually work.

[16:52] *** icwiener left
[16:54] *** ChanServ sets mode: +o TimToady

[16:55] *** icwiener joined
[16:56] *** ChanServ sets mode: -o TimToady

[16:57] *** finanalyst left
[16:59] *** Patterner left
[16:59] *** Psyche^ is now known as Patterner

[16:59] *** Chillance left
[17:00] *** _jaldhar joined
[17:04] *** icwiener left
[17:05] *** icwiener joined
[17:12] *** fronty joined
[17:12] *** gbacon joined
[17:15] *** justatheory joined
[17:20] *** synth left
[17:22] <pugs_svn> r27285 | pmurias++ | [re-mildew]

[17:22] <pugs_svn> r27285 | pmurias++ | added infix >

[17:22] <pugs_svn> r27285 | pmurias++ | added example/qsort.pl

[17:22] <pugs_svn> r27286 | pmurias++ | [re-mildew] optional positionals $foo? are supported

[17:24] *** jaldhar left
[17:24] <pugs_svn> r27287 | azawawi++ | [S:H:P6] more coloring

[17:25] *** kane__ joined
[17:39] *** mberends joined
[17:43] *** Limbic_Region left
[17:47] *** justatheory left
[17:48] *** brunov_ joined
[17:52] *** brunov_ left
[18:03] *** Molaf left
[18:03] *** Molaf joined
[18:05] *** loget joined
[18:06] <loget> evalbot: perl6: eval('say 3;');

[18:06] <loget> evalbot: perl6: say 3

[18:06] <loget> evalbot: perl6: 'say 3;'

[18:06] <loget> evalbot: perl6: say 3;

[18:06] <loget> doesn't work

[18:07] <huf> rakudo: say 3;

[18:07] <p6eval> rakudo 6c43f9: OUTPUT«3␤»

[18:07] <loget> oh

[18:07] <huf> std: say 3;

[18:07] <p6eval> std 27287: OUTPUT«ok 00:02 36m␤»

[18:07] <huf> ;)

[18:08] <loget> rakudo: eval('say 3;');

[18:08] <p6eval> rakudo 6c43f9: OUTPUT«3␤»

[18:08] <loget> rakudo: eval('label: say 3;');goto label;

[18:08] <p6eval> rakudo 6c43f9: OUTPUT«Could not find non-existent sub label␤»

[18:08] <loget> -_-

[18:08] <loget> I think that's a bug

[18:09] <loget> rakudo: eval('label: say 3;goto label;');

[18:09] <p6eval> rakudo 6c43f9:  ( no output )

[18:11] <arnsholt> Is schroeer on github someone in here?

[18:14] *** jlaire_ joined
[18:16] *** loget left
[18:18] *** jlaire left
[18:19] *** jlaire_ is now known as jlaire

[18:20] *** bpa joined
[18:26] *** masak joined
[18:26] <masak> ahoj, butterflies!

[18:32] <masak> today's question: (a repeat from yesterday, I think. I missed the answer) -- what happens when a protoregex are defined in a grammar A, grammar B derives from grammar A, and a protoregex with the same name is defined in grammar B?

[18:33] <masak> will there be one or two protoregexes in grammar B?

[18:33] <masak> and -- regardless of the answer to that question -- how do I get the other behaviour?

[18:41] *** nihiliad joined
[18:42] *** fronty left
[18:52] *** ejs0 joined
[18:54] *** meppl left
[18:59] *** M_o_C joined
[19:00] *** m-i-l-a-2 is now known as m-i-l-a-n

[19:00] *** twigil left
[19:02] *** payload joined
[19:04] <jnthn> masak: my first guess would be that you might get inheritance semantics along the lines of multi methods.

[19:04] <jnthn> Though that's a guess rather than a "I can remember a spec reference"

[19:04] <masak> jnthn! \o/ you're back!

[19:04] <[bjoern]> Is there a declarative way to match on the difference between two regexps? As in, "regex Variable { <Name> but not <ReservedName> }"

[19:05] <jnthn> lookahead maybe

[19:06] <jnthn> regex Variable { <!before <ReserveName> <ws>> <Name> }

[19:06] <masak> [bjoern]: <!before <ReservedName>>

[19:06] <jnthn> masak: Yes, back today

[19:06] <masak> jnthn: how was vacation?

[19:07] <jnthn> masak: Great, though very hot at times.

[19:08] <jnthn> Especially the day I was treking up a sulphur-spewing volcano.

[19:08] <[bjoern]> <Name> !~~ ^ <ReservedName> $ ?

[19:08] *** dukeleto_ joined
[19:09] <jnthn> masak: How's things been for you?

[19:09] <masak> jnthn: oh, as usual. a bit hectic this week, but otherwise fine.

[19:10] <masak> I've missed the jnthn-related activity on #perl6 and use.perl.org, so it's nice to have you back. :)

[19:11] <[bjoern]> How about complement ala "Anything but a <Name>" (other than writing it in the same way as before)

[19:11] <masak> jnthn: ok, rules follow inheritance semantics as methods do. how do I make a method in a deriving class say "don't care about the methods in the derived class. MMD stops here."?

[19:12] <masak> [bjoern]: also lookahead, I think.

[19:14] <jnthn> masak: I don't quite get what you want. Do you mean "don't look at the MMD in any parents?"

[19:14] <[bjoern]> The idea being that if, say, <^ReservedName> was the complement of ReservedName you could write <Name> & <^ReservedName>, it would seem

[19:15] <masak> jnthn: the point of MMD/inheritance is fallthrough to parent classes. but in the case of some methods I might want to suppress that.

[19:15] <jnthn> masak: In which case, write a multi with a permissive enough signature to accept anything I guess, and do whatever is meant to happen in that case.

[19:15] <masak> jnthn: ah, ok. guess the same trick works for a proto regex.

[19:16] <jnthn> Perhaps yes, I don't really grok how close the relationship between multis and proto regexes is.

[19:16] <masak> [bjoern]: I still think the solution you want is to be found in lookaheads.

[19:17] <[bjoern]> Yeah but i find those a bit ugly and difficult to understand

[19:17] <jnthn> I've kinda thought of it as a nice-ish way of thinking about it sometimes, but while regex = method is really a quite deep equivalence, I'm not sure protoregexen and multi dispatch would have that same depth of relationship.

[19:17] <masak> jnthn: one difference between regexes-in-grammars and methods-in-classes is that the regexes can occur outside of grammars too. then they feel more like subs.

[19:17] <[bjoern]> In some bnf variants you can just write, say, "Name - ReservedName"

[19:18] <jnthn> masak: Well, annonymous methods maybe fill the same niche as outside-of-class regexes.

[19:20] <masak> jnthn: yes, but regexes outside of grammars are named. and there are anonymous regexes, too.

[19:20] <jnthn> Yes, true.

[19:21] *** wknight8111 left
[19:22] *** wknight8111 joined
[19:22] *** dukeleto left
[19:23] <jnthn> masak: Your 3d is pretty. :-)

[19:25] <jnthn> woo, the YPAC::Asia submissions is open.

[19:25] <jnthn> Now I just need to think of talks to submit.

[19:26] *** ejs0 left
[19:26] <masak> jnthn: thanks. working on making it interactive now.

[19:29] <jnthn> cool

[19:34] <Matt-W> Hurrah for pretty

[19:36] <masak> yes; I will definitely try to focus on the pretty in my blogging from now on.

[19:36] <masak> it seems to have a way of motivating people.

[19:39] <Su-Shee> masak: isn't you blog within perlsphere?!

[19:40] <masak> Su-Shee: no, I don't think so.

[19:40] *** mvuets joined
[19:40] <Su-Shee> masak: may I have the url, then, please? :)

[19:41] *** ejs0 joined
[19:41] <masak> Su-Shee: http://use.perl.org/~masak/journal/ http://use.perl.org/~masak/journal/rss

[19:43] <Su-Shee> masak: funny, yesterday I googled around for some papers about MVC stuff.. 

[19:44] <masak> MVC is still a slightly nebulous concept to me. I think I get the basics, but...

[19:44] <Su-Shee> masak: the wikipedia article got two papers linked I found helpful.

[19:45] * masak heads over to Wikipedia

[19:46] <Su-Shee> masak: the one from Derek Greer and the "What is behind MVC?"

[19:47] <masak> Su-Shee: thanks. I'll have a look.

[19:51] <Su-Shee> masak: and this I forgot: http://oreilly.com/php/archive/mvc-intro.html

[19:51] <Su-Shee> (ignore the php part there.. ;)

[19:51] <masak> I always ignore the PHP part. :)

[19:53] *** cartes joined
[19:55] *** cartes left
[20:00] *** mtve left
[20:08] *** maettu left
[20:09] *** M_o_C left
[20:16] *** payload left
[20:16] *** masak left
[20:16] *** mberends left
[20:16] *** rafl left
[20:16] *** baest left
[20:16] *** eternaleye left
[20:16] *** christine left
[20:16] *** antiphase left
[20:16] *** charsbar_ left
[20:16] *** PerlJam left
[20:16] *** Tene left
[20:16] *** PerlJam joined
[20:16] *** payload joined
[20:16] *** masak joined
[20:16] *** mberends joined
[20:16] *** rafl joined
[20:16] *** baest joined
[20:16] *** christine joined
[20:16] *** eternaleye joined
[20:16] *** charsbar_ joined
[20:16] *** antiphase joined
[20:16] *** Tene joined
[20:16] *** irc.freenode.net sets mode: +oo PerlJam Tene

[20:19] *** baest left
[20:19] *** mberends left
[20:19] *** antiphase left
[20:19] *** payload left
[20:19] *** rafl left
[20:19] *** PerlJam left
[20:19] *** masak left
[20:19] *** christine left
[20:19] *** eternaleye left
[20:19] *** Tene left
[20:19] *** charsbar_ left
[20:20] *** masak joined
[20:21] *** rafl joined
[20:21] *** baest joined
[20:21] *** eiro left
[20:22] *** jlaire left
[20:22] *** PerlJam joined
[20:22] *** payload joined
[20:22] *** mberends joined
[20:22] *** christine joined
[20:22] *** eternaleye joined
[20:22] *** charsbar_ joined
[20:22] *** antiphase joined
[20:22] *** Tene joined
[20:22] *** irc.freenode.net sets mode: +oo PerlJam Tene

[20:22] *** jonathanturner left
[20:27] *** eiro joined
[20:34] <bpa> has anyone used Module::Pluggable::Fast from pugs?

[20:34] *** mvuets left
[20:35] <bpa> I'm trying to get instances of plugins from it, but I'm struggling with it

[20:36] *** ejs joined
[20:43] <bpa> I guess I'll try a different tack

[20:44] <bpa> if I have a class name in $class, how would I create a new instance from that?

[20:44] <bpa> eval doesn't seem to be working

[20:47] <jnthn> orly?

[20:48] <jnthn> rakudo: class Pivo { }; eval('Pivo').new.WHAT.say

[20:48] <p6eval> rakudo 6c43f9: OUTPUT«sh: ./perl6: No such file or directory␤»

[20:48] <jnthn> ?

[20:48] <jnthn> rakudo: class Pivo { }; eval('Pivo').new.WHAT.say

[20:48] <p6eval> rakudo 6c43f9: OUTPUT«sh: ./perl6: No such file or directory␤»

[20:48] <jnthn> es ist kaput.

[20:49] <jnthn> bpa: As I just did there, works for me locally though.

[20:49] <bpa> I hadn't tried it that way

[20:49] <bpa> that's much cleaner than me trying eval("\$obj = Pivo.new")

[20:50] <payload> s/kaput/kaputt/

[20:51] <jnthn> payload: Mein Deutsch ist so kaputt. ;-)

[20:51] <payload> ^^

[20:51] * jnthn never actually learned it, just holidayed/visited Germany/Switzerland/Austria quite a bit and slurped some random bits up.

[20:53] *** ejs0 left
[20:54] *** Su-Shee left
[20:58] <arnsholt> Whee! Criminal Minds opened with a Terry Pratchett quote this time =D

[20:58] <arnsholt> Oh, opps. Wrong window

[21:00] *** desertm4x joined
[21:00] * masak really likes the end of http://perlmonks.org/?node_id=765916

[21:01] <masak> thing is, when TimToady is making things up, they sometimes end up in the spec. :P

[21:07] <payload> rakudo: 0,1...&[+] 

[21:07] <p6eval> rakudo 6c43f9: OUTPUT«Statement not terminated properly at line 2, near "...&[+]"␤in Main (src/gen_setting.pm:3225)␤»

[21:08] <masak> payload: &[+] NYI, I think.

[21:08] <jnthn> masak: aye, nor ... afaik.

[21:08] <jnthn> Though it maybe happened while I was away.

[21:08] <masak> jnthn: it did.

[21:08] <masak> moritz_++

[21:08] <jnthn> moritz_++ indeed...didn't that need laziness, or did we also get that now?

[21:08] <masak> but, of course, this particular examples... aye.

[21:09] <masak> speaking of the spec, the stowaway in the latest big spec update made me return to thinking about defined/undefined vs passed/not-passed in parameters, as well as initialized/not-initialized in attributes. I still think this question merits a solution.

[21:10] <jnthn> Ouch. Over 2,000 photos from the trip to sort through...

[21:11] <masak> the pains of the modern life.

[21:11] <jnthn> masak: I'm interested in that stowaway too. Not really awake enough or back into Perl 6 mode enough to think about it yet.

[21:11] *** M_o_C joined
[21:11] <masak> no prob.

[21:11] *** sjohnson left
[21:12] *** sjohnson joined
[21:12] <masak> I'm not going anywhere. :)

[21:19] *** sjohnson left
[21:23] *** sjohnson joined
[21:23] <eternaleye> rakudo: .say for 0,1...&[+]

[21:23] <p6eval> rakudo 6c43f9: OUTPUT«Statement not terminated properly at line 2, near "...&[+]"␤in Main (src/gen_setting.pm:3225)␤»

[21:24] <eternaleye> rakudo: .say for 0,1...&infix:<+>

[21:24] <p6eval> rakudo 6c43f9: OUTPUT«Null PMC access in find_method()␤in Main (/tmp/G94MMIkkx7:2)␤»

[21:24] <eternaleye> masak: You know what to do!

[21:24] <masak> eternaleye: we don't have lazy yet.

[21:24] *** dukeleto_ is now known as dukeleto

[21:24] <masak> eternaleye: variants of that one have been submitted already, I think.

[21:24] <eternaleye> masak: Null PMC > *

[21:24] <eternaleye> masak: Okay

[21:25] <pmurias> rakudo: say :(1,2,3)

[21:25] <p6eval> rakudo 6c43f9: OUTPUT«Method 'named' not found for invocant of class 'Undef'␤»

[21:25] <masak> pmurias: ooh! is that one new?

[21:25] *** dukeleto left
[21:25] <eternaleye> rakudo: say :(1,2,3).params

[21:25] <p6eval> rakudo 6c43f9: OUTPUT«Null PMC access in find_method()␤in Main (/tmp/fdQBRz0WOb:2)␤»

[21:26] <pmurias> rakudo: say (:($foo)).perl

[21:26] <jnthn> rakudo: sub foo(1,2,3) { }

[21:26] <p6eval> rakudo 6c43f9: OUTPUT«too few arguments passed (0) - 1 params expected␤in Main (/tmp/eBEjsYawep:0)␤»

[21:26] <p6eval> rakudo 6c43f9: OUTPUT«Malformed routine definition at line 2, near "foo(1,2,3)"␤in Main (src/gen_setting.pm:3225)␤»

[21:26] <jnthn> rakudo: say (:(1,2,3)).WHAT

[21:26] <p6eval> rakudo 6c43f9: OUTPUT«Null PMC access in find_method()␤in Main (/tmp/ehmUcLv60H:2)␤»

[21:26] <masak> ETOOMANYBUGS

[21:27] <pmurias> pugs: sub foo($a,$b) {};say &foo.signature.params.perl

[21:27] <p6eval> pugs: OUTPUT«*** No such subroutine: "&params"␤    at /tmp/yLJghBnYku line 1, column 23 - line 2, column 1␤»

[21:27] <jnthn> Not entirely sure if we're attempting any :(...) signature syntax spec tests, mind.

[21:27] <pmurias> jnthn: is &foo.signature.params speced?

[21:28] <jnthn> So I suspect there's a bit of "standalone signatures NYI" here.

[21:28] <eternaleye> pmurias: It worked for me yesterday

[21:28] <jnthn> pmurias: I think there's general agreement signatures should be introspectable.

[21:28] <jnthn> pmurias: Exactly how that looks I think is not yet fully spec'd.

[21:28] <pmurias> jnthn: are the ones in rakudo introspectable?

[21:28] <jnthn> pmurias: Aye.

[21:29] <eternaleye> rakudo: sub foo( *@a ) {}; say &foo.singature.params.perl

[21:29] <p6eval> rakudo 6c43f9: OUTPUT«Method 'singature' not found for invocant of class 'Perl6Sub'␤»

[21:29] <jnthn> Though not through an itnerface that I think is gonna fly.

[21:29] <eternaleye> rakudo: sub foo( *@a ) {}; say &foo.signature.params.perl

[21:29] <p6eval> rakudo 6c43f9: OUTPUT«["named" => 0, "slurpy" => 1, "name" => "\@a", "multi_invocant" => 1, "nom_type" => Any, "type" => Any, "cons_type" => undef]␤»

[21:29] <eternaleye> typos--

[21:30] <pmurias> &foo.signature.params also work in mildew, but it's containts totally different stuff

[21:30] <pmurias> * it contains

[21:30] * masak yawns

[21:30] <jnthn> Maybe it's one of those implementation specific thingies.

[21:30] <eternaleye> jnthn: I think what would make the most sense would probably be a List (indexed by position in the declaration, cf S06:767) of Hash (keyed by property, eg slurpy, positional, named, etc). This would allow an easy check for slurpies in, say, infix:<...> by using 'if +&generator.signature.params.grep( *.<slurpy> )'

[21:30] <jnthn> eternaleye: list of hash is pretty much what Rakudo does.

[21:30] <eternaleye> jnthn: Nope, Array of Pair

[21:31] <eternaleye> rakudo: sub foo( *@a ) {}; say &foo.signature.params.<slurpy>

[21:31] <p6eval> rakudo 6c43f9: OUTPUT«named      0slurpy 1name   @amulti_invocant        1nom_type       Any()type       Any()cons_type  ␤»

[21:31] <eternaleye> rakudo: sub foo( *@a ) {}; say &foo.signature.params.kv.perl

[21:31] <p6eval> rakudo 6c43f9: OUTPUT«[0, "named" => 0, 1, "slurpy" => 1, 2, "name" => "\@a", 3, "multi_invocant" => 1, 4, "nom_type" => Any, 5, "type" => Any, 6, "cons_type" => undef]␤»

[21:31] <jnthn> rakudo: sub foo($a, :$b) { }; &foo.signature.elems.say

[21:31] <p6eval> rakudo 6c43f9: OUTPUT«1␤»

[21:31] <jnthn> rakudo: sub foo($a, :$b) { }; &foo.signature.PARROT

[21:31] <p6eval> rakudo 6c43f9:  ( no output )

[21:31] <jnthn> rakudo: sub foo($a, :$b) { }; say &foo.signature.PARROT

[21:31] <p6eval> rakudo 6c43f9: OUTPUT«Signature␤»

[21:31] <jnthn> rakudo: sub foo($a, :$b) { }; say &foo.signature.params.PARROT

[21:32] <p6eval> rakudo 6c43f9: OUTPUT«ResizablePMCArray␤»

[21:32] <jnthn> rakudo: sub foo($a, :$b) { }; say &foo.signature.params.elems

[21:32] <p6eval> rakudo 6c43f9: OUTPUT«12␤»

[21:32] <jnthn> oh, eww.

[21:32] <eternaleye> Precisely.

[21:32] <jnthn> Somewhere, it's getting flattened out.

[21:32] <jnthn> rakudo: sub foo($a, :$b) { }; say &foo.signature.params[0].PARROT

[21:32] <p6eval> rakudo 6c43f9: OUTPUT«Hash␤»

[21:33] <eternaleye> Maybe a Capture of Hash, which would resist flattening?

[21:33] <jnthn> Last I knew List and Capture were getting unified anyway.

[21:33] <jnthn> No, I suspect $other_issue

[21:33] <eternaleye> jnthn: True

[21:33] <jnthn> I'm not quite sure what without looking more.

[21:33] <masak> I'm off bug-submitting duty tonight.

[21:33] <jnthn> I know that under the hood they are stored as an array of hash because that's how the multi-dispatcher introspects the signature for the stuff it wants.

[21:34] <masak> anyone who finds a but can just submit it at will. :)

[21:34] <jnthn> But clearly there's something wrong in how it's being exposed.

[21:34] <eternaleye> jnthn++ # You'll find it. Anata wo shinjeru!

[21:34] *** ejs left
[21:34] <masak> what language is that?

[21:34] <jnthn> I think Japanese.

[21:34] <eternaleye> Japanese, but scim-- isn't working right now

[21:35] <jnthn> What does shinjeru mean?

[21:35] <eternaleye> The QT immodule crashes programs on input events

[21:35] <jnthn> "Anata wo" is just "you" IIRC.

[21:35] <eternaleye> "believe"

[21:35] <eternaleye> "I believe in you"

[21:35] <pmurias> here's how signatures are implemented in mildew http://svn.pugscode.org/pugs/v6/re-mildew/CORE/Signature.pm

[21:35] <eternaleye> "anata" is 'you', "wo" marks the object in a sentence

[21:36] <jnthn> wo marks the object? OK.

[21:36] * jnthn is trying to get the markers straight in his head.

[21:36] <jnthn> Only started learning Japanese on a train yesterday. ;-)

[21:36] <eternaleye> "wa" for the subject, "ga" for the topic (think given in p6)

[21:36] <jnthn> Ah! OK.

[21:37] <masak> seems a lot like Lojban to me. :)

[21:37] <jnthn> I was wondering if "wo" was just the spelling for what I was hearning as "wa" but OK, they're different.

[21:37] <jnthn> #perl6++ # Perl 6 *and* Japanese support.

[21:37] <eternaleye> ni for non-relative time as well as for direction of motion (it shares the latter with "he" (pron. "eh"))

[21:37] *** pmurias left
[21:38] <eternaleye> "de" for static/current location

[21:38] <jnthn> Are things like "ka" (question marker) also in that set of thingies?

[21:38] <eternaleye> masak: I want to learn Lojban, but I haven't had the time and nobody I know locally (IE near enough to speak aloud) knows it

[21:39] <eternaleye> jnthn: Yes. That set is called "particle" words

[21:39] <masak> eternaleye: I suspect one day I'll learn Lojban, too.

[21:39] <eternaleye> masak: Go for the conlang trifecta, learn Klingon too!

[21:40] <masak> meh. :)

[21:40] <masak> being able to speak Ido and Interlingua fluently would be nice, though.

[21:40] <masak> and Lingua Franca Nova looks cute.

[21:41] <jnthn> Are conlangs generally easier to learn than natural languages?

[21:41] <masak> if they're designed right, yes.

[21:42] <masak> and auxlangs are often designed with ease in mind.

[21:42] <masak> not all conlangs, though.

[21:42] <masak> certainly not Klingon. :)

[21:42] <eternaleye> jnthn: They're much more consistent - you can learn a ruleset rather than a ruleset + exceptions

[21:42] <eternaleye> (in general)

[21:43] <masak> I've been spending the day speaking Esperanto. I'm fortunate enough to be living close to a native speaker.

[21:44] *** mvuets joined
[21:44] <eternaleye> Languages are _fun_. I think that's why I had trouble with Learning Python for my first programming language, but Perl stuck really easily as my firs proglang

[21:44] <eternaleye> Perl is a much more _human_ language.

[21:45] <masak> I had a uni lecture about Perl 5 two days ago. the title was 'Perl -- the programming language for humans'.

[21:45] *** desertm4x left
[21:49] <mvuets> perl6: my @a = <1 3 5>; say "a is @a[]";

[21:49] <p6eval> pugs: OUTPUT«a is 1 3 5␤»

[21:49] <p6eval> ..elf 27287, rakudo 6c43f9: OUTPUT«a is @a[]␤»

[21:49] <jnthn> mvuets: hi! :-)

[21:49] <mvuets> jnthn, hey Jonathan! (: How are you?

[21:49] <jnthn> mvuets: pugs is more correct in this case I think. Rakudo doesn't implement those postfixes yet.

[21:49] <eternaleye> rakudo:  my @a = <1 3 5>; say "a is { @a[] }";

[21:49] <p6eval> rakudo 6c43f9: OUTPUT«a is 1 3 5␤»

[21:50] <jnthn> mvuets: I'm good, thanks...you?

[21:50] <masak> it's blocking on some string parsing, right?

[21:50] <mvuets> jnthn, excelent, thanks. As you see, wanna learn Perl 6 (: Hope this friendly community will help (;

[21:51] <mvuets> eternaleye, oh, thanks.

[21:51] <eternaleye> mvuets: No problem. Rakudo does fine interpolating closures, so it's a useful workaround.

[21:52] <mvuets> jnthn, i have only Rakudo now. Thought something wrong with it. Now see that it's just not implemented yet.

[21:52] <jnthn> mvuets: Oh, I'm sure it will. :-)

[21:52] <jnthn> Just a Not Yet Implemented thingy. 

[21:53] <jnthn> masak: Not 100% sure what it blocks on, but I'd guess that.

[21:53] <jnthn> I kinda leave parsing stuff to pm, he's far better at it than me.

[21:53] <masak> he's far better at it than most of us.

[21:54] <bpa> A quick learning perl6 question:  if you return %hash, does that pass by value or ref?

[21:54] <masak> he implemented a Perl 6 grammar lib in 16k of assembly! :)

[21:54] <masak> 16kloc, I mean.

[21:54] <masak> bpa: good question. I've never been in a position to need to distinguish.

[21:54] <masak> I'd guess by value, though.

[21:55] <mvuets> {} within "" is just interpolated kinda in-line perl or are there some limitations?

[21:56] <masak> rakudo: my %h = 'foo' => 'bar'; sub foo(%h is rw) { return %h }; my %h2 = foo(%h); %h<foo> = 'baz'; say %h.perl

[21:56] <p6eval> rakudo 6c43f9: OUTPUT«{"foo" => "baz"}␤»

[21:56] <masak> bpa: seems it passes it by ref.

[21:58] <eternaleye> rakudo: my @seed = 0, 1; my @fibs = @seed ... { state $count //= 0; $count++ > 100 ?? () !! $^a + $^b ; }; .say for @fibs

[21:58] <p6eval> rakudo 6c43f9: OUTPUT«Null PMC access in find_method()␤in sub infix:... (/tmp/3LXeEOFQs9:2)␤called from Main (/tmp/3LXeEOFQs9:2)␤»

[21:59] <eternaleye> 0.o

[21:59] *** wknight8111 left
[22:00] <masak> I think moritz_++ mentioned that bug.

[22:01] <eternaleye> I could have sworn that worked yesterday, almost exactly the same (although it was (state $something)++, which I changed to avoid a "use of undef" warning)

[22:02] <eternaleye> Can't remember who did it though

[22:02] <masak> I wish there was a way to go back to previous IRC conversations...

[22:03] <masak> 'night, all.

[22:03] *** masak left
[22:04] <bpa> pugs seems to pass by value

[22:06] <eternaleye> rakudo: say 1,2...{ (state $i)++ < 100 ?? $^a + $^b !! () }

[22:06] <p6eval> rakudo 6c43f9: OUTPUT«Use of uninitialized

[22:06] <p6eval> ..value␤123581321345589144233377610987159725844181676510946177112865746368750251213931964183178115142298320401346269217830935245785702887922746514930352241578173908816963245986102334155165580141267914296433494437701408733113490317018363119032971215073480752697677…

[22:07] <eternaleye> (That was what TimToady entered)

[22:07] <eternaleye> rakudo: my @seed = 0, 1; my @fibs = @seed ... { state $count //= 0; $count++ < 100 ?? $^a + $^b !! () }; .say for @fibs

[22:07] <p6eval> rakudo 6c43f9: OUTPUT«Null PMC access in find_method()␤in sub infix:... (/tmp/ZlgW0ndK9v:2)␤called from Main (/tmp/ZlgW0ndK9v:2)␤»

[22:08] <eternaleye> rakudo: my @seed = 0, 1; my @fibs = @seed ... { state $count //= 0; my @foo = $count++ < 100 ?? $^a + $^b !! (); say ~@foo; return @foo };

[22:08] <p6eval> rakudo 6c43f9: OUTPUT«Null PMC access in find_method()␤in sub infix:... (/tmp/6uvtNBCbMo:2)␤called from Main (/tmp/6uvtNBCbMo:2)␤»

[22:09] <eternaleye> rakudo: my @seed = 0, 1; my @fibs = @seed ... { (state $count)++ > 100 ?? () !! $^a + $^b ; }; .say for @fibs

[22:09] <p6eval> rakudo 6c43f9: OUTPUT«Use of uninitialized

[22:09] <p6eval> ..value␤0␤1␤1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤144␤233␤377␤610␤987␤1597␤2584␤4181␤6765␤10946␤17711␤28657␤46368␤75025␤121393␤196418␤317811␤514229␤832040␤1346269␤2178309␤3524578␤5702887␤9227465␤14930352␤24157817␤39088169␤63245986␤102334155␤165580141␤267914296␤433494437␤70140…

[22:09] <eternaleye> Hm, so it's //= that does it

[22:10] <mvuets> pugs: my @a = <1 3 5>; say "a is @a";

[22:10] <p6eval> pugs: OUTPUT«a is @a␤»

[22:10] <eternaleye> rakudo: my @seed = 0, 1; my @fibs = @seed ... { state $count = $count // 0; $count++ > 100 ?? () !! $^a + $^b ; }; .say for @fibs

[22:10] <p6eval> rakudo 6c43f9:

[22:10] <p6eval> ..OUTPUT«0␤1␤1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤144␤233␤377␤610␤987␤1597␤2584␤4181␤6765␤10946␤17711␤28657␤46368␤75025␤121393␤196418␤317811␤514229␤832040␤1346269␤2178309␤3524578␤5702887␤9227465␤14930352␤24157817␤39088169␤63245986␤102334155␤165580141␤267914296␤433494437␤701408733␤1134903170␤1836311903␤…

[22:11] *** DemoFreak left
[22:14] <mvuets> Do you know any russian blogs which describe Perl 6 alike it is done by moritz_'es perlgeek.de blog? perl6.ru is out of date.

[22:15] <obra_> Where are the ENV variables Rakudo pays attention to documented?

[22:15] *** pmurias joined
[22:15] <obra_> (Specifically, I'm looking for how to set @*INC from the commandline)

[22:15] <eternaleye> phenny: ask moritz_ Is it known that &infix:<...> fails on //=, but = $a // $b works fine?

[22:15] <phenny> eternaleye: I'll pass that on when moritz_ is around.

[22:16] <obra_> my assumption is that it's PERL6LIB

[22:16] <eternaleye> phenny: tell moritz_ example: my @seed = 0, 1; my @fibs = @seed ... { state $count //= 0; $count++ < 100 ?? $^a + $^b !! () }; .say for @fibs

[22:16] <phenny> eternaleye: I'll pass that on when moritz_ is around.

[22:22] *** sri_kraih_ joined
[22:25] *** buubot left
[22:30] *** buubot joined
[22:30] *** buubot left
[22:31] <mvuets> I see there's such cool thing as non-ascii alias to hyper-operator, i mean e.g. »+«. Why not to add → (\u2192) as an alias to "->"? I saw Scala uses one.

[22:31] *** vv31 left
[22:34] *** iblechbot left
[22:34] *** buubot joined
[22:34] *** buubot left
[22:36] *** buubot joined
[22:39] *** sri_kraih left
[22:42] *** payload left
[22:42] *** Eevee left
[22:43] *** fridim left
[22:44] *** pmurias left
[22:45] *** dduncan joined
[22:47] *** Eevee joined
[22:49] *** PacoLinux left
[22:49] <lisppaste3> mvuets pasted "new lambda operator looks pretty cool (:" at http://paste.lisp.org/display/82632

[22:49] *** PacoLinux joined
[22:52] *** buubot left
[22:52] *** buubot joined
[22:54] *** snarkyboojum joined
[22:58] *** jlmoko joined
[23:07] *** payload joined
[23:17] *** bpa left
[23:19] *** M_o_C left
[23:22] <mvuets> perl6: say 'match' if 'aéo' ~~ m:a/aeo/;

[23:22] <p6eval> elf 27287:  ( no output )

[23:22] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[23:22] <p6eval> ..rakudo 6c43f9: OUTPUT«Colons cannot be used as delimiters in quoting constructs at line 2, near ":a/aeo/;"␤in Main (src/gen_setting.pm:3225)␤»

[23:24] *** viklund left
[23:24] <mvuets> perl6: say 'match' if 'aEo' ~~ m:i/aeo/;

[23:24] <p6eval> rakudo 6c43f9: OUTPUT«Colons cannot be used as delimiters in quoting constructs at line 2, near ":i/aeo/;"␤in Main (src/gen_setting.pm:3225)␤»

[23:24] <p6eval> ..elf 27287:  ( no output )

[23:24] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[23:26] <mvuets> perl6: say 'match' if 'aeo' ~~ m/aeo/;

[23:26] <p6eval> elf 27287, rakudo 6c43f9: OUTPUT«match␤»

[23:26] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';␤    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime…

[23:30] *** mvuets left
[23:34] *** mikehh joined
[23:34] *** simcop2387 left
[23:54] *** Muixirt left
[23:54] *** last left
[23:55] *** justatheory joined
[23:57] *** nErVe joined
