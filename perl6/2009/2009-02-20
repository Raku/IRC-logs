[00:00] <wayland> I don't see why not

[00:00] <User757> hi!

[00:00] <s1n1> jnthn: i have a question or two about the setting

[00:00] <TimToady> see S09:208

[00:00] <TimToady> er

[00:00] <wayland> multi prefix:<~>(...) or something :)

[00:00] <TimToady> S13:208 rather

[00:01] <wayland> User757: hi! :)

[00:02] <User757> I really don't know what I'm doing here

[00:02] <User757> I

[00:02] <User757> I'm looking for a tf2 pug and got here somehow

[00:03] <s1n1> TimToady: question: infix<~> uses the ACCEPTS method for Ranges, correct?

[00:04] <wayland> User757: One implementation of perl6 is called "pugs".  That's probably how you ended up here.  I'm assuming that TF2 is "Team Fortress 2", but I don't know what a pug is in this context

[00:04] <TimToady> s1n1: I have no idea what you're asking...

[00:05] <TimToady> are you speaking of infix:<~~>?

[00:05] <s1n1> TimToady: yes

[00:05] <s1n1> you beat me to the punch, sorry, infix<~~> use ACCEPTS...

[00:05] <TimToady> except for special syntactic forms, ~~ always uses .ACCEPTS on whatever the righthand type is

[00:06] *** User757 left
[00:06] <s1n1> so $a ~~ $b is the same as $a.ACCEPTS($b)?

[00:06] <TimToady> no

[00:06] <TimToady> $b.ACCEPTS($a)

[00:06] <s1n1> oh, okay

[00:06] <TimToady> it's a backwards single dispatch, basically

[00:07] <TimToady> the match depends primarily on the right side's type

[00:07] <s1n1> so (1..20) ~~ 4 is the same as 4.ACCEPTS(1..20)?

[00:07] <TimToady> $b may or may not choose to pay attention to the type of $a

[00:07] <TimToady> yes, which I would expect to be false

[00:08] <TimToady> because in general a pattern should be more general than what it matches

[00:08] <s1n1> for Range, (1..5).ACCEPTS(1..5) is true though

[00:08] <s1n1> i'm not sure i followed that last statement

[00:09] <TimToady> matching two Ranges is not defined currently

[00:10] <TimToady> it would try to match under the Any ~~ Range line, and I'm not sure what would happen

[00:10] <s1n1> hmmm

[00:11] <TimToady> the spec is your friend, except where it's not...

[00:11] <s1n1> heh the spec definitely does not like me, well either that or my brain is incapable of navigating it

[00:12] <s1n1> was it intentionally left out of the spec?

[00:12] <TimToady> it might work out, since it's defined as [!after] $b.min, $a.min..$a.max, $b.max

[00:13] <TimToady> so what it would tell you if the range on the left was a subset of the range on the right

[00:14] <s1n1> or if $b is not a range, it would be nice to know if it (ie Num) is in the range

[00:14] *** Caelum left
[00:14] <TimToady> I don't recall if we ever explictly thought about Range ~~ Range

[00:14] <TimToady> no, we don't do it that way on purpose

[00:15] <s1n1> or Range ~~ Num

[00:15] <TimToady> otherwise you can't optimize a numeric switch to a jump table

[00:15] <s1n1> that would be neat though :) maybe Num ~~ Range

[00:16] *** Caelum joined
[00:16] <TimToady> we don't autoreverse any .ACCEPTS semantics like the original smartmatching did (and which p5 unfortunately copied)

[00:17] <TimToady> if you want a reversed match, you can write one explicitly with "when { 4 ~~ $_ }"

[00:18] <s1n1> rakudo: (1..10) when { 4 ~~ $_ }

[00:18] <p6eval> rakudo 00e9db: OUTPUT«Parrot VM: Can't stat languages/rakudo/perl6.pbc, code 2.␤main: Packfile loading failed␤»

[00:18] <s1n1> uhoh, well, was that the right idea?

[00:19] <TimToady> rakudo: given 1..10 { say "yes" when { 4 ~~ $_ } }

[00:19] <p6eval> rakudo 00e9db: OUTPUT«Parrot VM: Can't stat languages/rakudo/perl6.pbc, code 2.␤main: Packfile loading failed␤»

[00:19] <TimToady> pugs: given 1..10 { say "yes" when { 4 ~~ $_ } }

[00:19] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "when"␤    expecting operator, ":", "," or "}"␤    at /tmp/xkAJjLZoFf line 1, column 25␤»

[00:19] <TimToady> std: given 1..10 { say "yes" when { 4 ~~ $_ } }

[00:19] <s1n1> wow, that's a crap ton of work to do what you mean by Range ~~ Num (or vice versa)

[00:19] <p6eval> std 25451: OUTPUT«ok 00:04 34m␤»

[00:20] <TimToady> if you want reversed smartmatching it probably means you need to refactor it

[00:21] <s1n1> well, i'd be cool to do something like (2..$max :by(2)) ~~ $odd

[00:21] *** Avada joined
[00:21] <s1n1> without having to refactor, that seems dwim to me

[00:22] *** shinobi-cl joined
[00:22] <TimToady> if you want to put such a test into a switch statement it means you're unclear on what is generic and what is specific in your program

[00:23] <TimToady> it makes it impossible to optimize

[00:23] <s1n1> why would i put that in a switch?

[00:23] <s1n1> if i did that, maybe i just wanted to be lazy and not optimize

[00:23] <TimToady> $value ~~ $pattern isn't long otherwise

[00:24] <s1n1> (btw, i'm too dense to understand why that's not optimizable)

[00:24] <s1n1> by $pattern, what do you mean?

[00:24] <TimToady> if you're that lazy then you should write your own operator :)

[00:24] <s1n1> i didn't want to write my own, just abuse smartmatching :)

[00:24] <TimToady> something that defines a set of values

[00:24] <TimToady> then smartmatching will outsmart you :)

[00:25] <TimToady> re otimizable, suppose you have when 1 {...}; when 2 {...}; when 3 {...} like an ordinary C switch statement

[00:26] <TimToady> C can just jump straight to the right bit of code without testing $_ == 1 || $_ == 2 || $_ == 3

[00:26] <TimToady> but that only works if 4 always does a numeric comparison to something forced into numeric context

[00:26] <TimToady> and +(1..5) is not going to return a range

[00:27] <TimToady> if we have to wait to see what type of the thing on the left is, we don't know that till run time

[00:28] <TimToady> instead, we promise Num.ACCEPTS that it can assume $b == +$a

[00:28] <s1n1> what does +(1..5) return, a List?

[00:28] <TimToady> no, a number

[00:28] <TimToady> that can be compared to $b

[00:28] <TimToady> with ==

[00:28] <s1n1> oh, hmm

[00:29] <TimToady> +(@numbers) == 4 will tell you if there are 4 elements in the list

[00:29] <s1n1> car is ready, going home&

[00:29] *** s1n1 left
[00:31] <shinobi-cl> pugs: say [~] [+] (1..5);

[00:31] <p6eval> pugs: OUTPUT«15␤»

[00:32] <shinobi-cl> pugs: say [+] (1..5);

[00:32] <p6eval> pugs: OUTPUT«15␤»

[00:32] <TimToady> stacking two reduce operators makes little sense

[00:32] <shinobi-cl> but its nice to know that can be done :)

[00:33] <TimToady> indeed

[00:33] <TimToady> btw, you don't need those parens

[00:33] <shinobi-cl> pugs: say [\+] (1..5);

[00:33] <p6eval> pugs: OUTPUT«1361015␤»

[00:35] <shinobi-cl> pugs: say [\+] [\-] (1..5);

[00:35] <p6eval> pugs: OUTPUT«10-4-12-25␤»

[00:36] <TimToady> O_o

[00:38] <shinobi-cl> pugs: ([\+] [\-] (1..5)).perl.say;

[00:38] <p6eval> pugs: OUTPUT«(1, 0, -4, -12, -25)␤»

[00:38] *** skids joined
[00:39] <shinobi-cl> pugs: [X] (1..5);

[00:40] <p6eval> pugs: RESULT«((1, 2, 3, 4, 5),)»

[00:41] *** nihiliad left
[00:43] <wayland> rakudo: multi Str sub foo(Str $string) { print "hi $string"; } foo('everyone')

[00:43] <p6eval> rakudo 00e9db: OUTPUT«Parrot VM: Can't stat languages/rakudo/perl6.pbc, code 2.␤main: Packfile loading failed␤»

[00:43] <wayland> STD: multi Str sub foo(Str $string) { print "hi $string"; } foo('everyone')

[00:43] <wayland> perl6: multi Str sub foo(Str $string) { print "hi $string"; } foo('everyone')

[00:43] <p6eval> rakudo 00e9db: OUTPUT«Parrot VM: Can't stat languages/rakudo/perl6.pbc, code 2.␤main: Packfile loading failed␤»

[00:43] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "sub"␤    expecting "handles", "is", bare trait, subroutine parameters, trait or block␤    at /tmp/pBPuAQnTME line 1, column 11␤»

[00:43] <p6eval> ..elf 25451: OUTPUT«Parse error in: /tmp/5VqOmmed8v␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: multi Str sub foo(Str $string)␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[00:43] <p6eval> ..STD_r...

[00:46] *** meppl joined
[00:49] *** wknight8111 left
[00:52] <shinobi-cl> pugs: [&] [^] [4,3,2,1],[1,3]

[00:52] <p6eval> pugs: RESULT«(((1, 3) ^ (4, 3, 2, 1)))»

[00:52] <shinobi-cl> pugs: [X] [^] [4,3,2,1],[1,3]

[00:52] <p6eval> pugs: RESULT«(((1,), (3,)) ^ ((4,), (3,), (2,), (1,)))»

[00:53] <shinobi-cl> pugs: [^] [X] [4,3,2,1],[1,3]

[00:53] <p6eval> pugs: RESULT«((1, 1) ^ ␤ (1, 3) ^ ␤ (2, 1) ^ ␤ (2, 3) ^ ␤ (3, 1) ^ ␤ (3, 3) ^ ␤ (4, 1) ^ ␤ (4, 3))»

[00:55] <shinobi-cl> pugs: [^] [X] [4,3,2,1]X[1,3]

[00:55] <p6eval> pugs: RESULT«(((1, 1), (1, 3)) ^ ␤ ((2, 1), (2, 3)) ^ ␤ ((3, 1), (3, 3)) ^ ␤ ((4, 1), (4, 3)))»

[00:55] <shinobi-cl> pugs: [^] [X] [1,2,3,4]X[1,3]

[00:55] <p6eval> pugs: RESULT«(((1, 1), (1, 3)) ^ ␤ ((2, 1), (2, 3)) ^ ␤ ((3, 1), (3, 3)) ^ ␤ ((4, 1), (4, 3)))»

[00:56] <shinobi-cl> pugs: [^] [X] [1,2,3,4]X[3,1]

[00:56] <p6eval> pugs: RESULT«(((1, 3), (1, 1)) ^ ␤ ((2, 3), (2, 1)) ^ ␤ ((3, 3), (3, 1)) ^ ␤ ((4, 3), (4, 1)))»

[00:58] <TimToady> std: multi Str sub foo(Str $string) { print "hi $string"; } foo('everyone')

[00:58] <p6eval> std 25451: OUTPUT«############# PARSE FAILED #############␤Malformed "multi" definition␤Malformed routine definition at /tmp/DsSowuGGAx line 1:␤------> [32mmulti Str [31msub foo(Str $string) { print "hi $string[0m␤    expecting any of:␤  routine_def␤      trait␤FAILED 00:02 33m␤»

[00:58] *** fridim_ left
[01:01] <TimToady> std: my Str multi sub foo(Str $string) { print "hi $string"; } foo('everyone')

[01:01] *** iblechbot left
[01:01] <p6eval> std 25451: OUTPUT«############# PARSE FAILED #############␤Malformed "my" declaration␤Malformed "multi" definition␤Malformed routine definition␤Malformed routine definition at /tmp/4z0ZsucSXs line 1:␤------> [32mmy Str multi sub[31m foo(Str $string) { print "hi $string"; [0m␤FAILED 00:02 33m␤»

[01:02] <TimToady> std: my Str multi foo(Str $string) { print "hi $string"; } foo('everyone')

[01:02] <p6eval> std 25451: OUTPUT«############# PARSE FAILED #############␤Malformed "my" declaration␤Malformed "multi" definition␤Malformed routine definition at /tmp/bQI0WGqFU5 line 1:␤------> [32mmy Str multi [31mfoo(Str $string) { print "hi $string"; }[0m␤    expecting declarator␤FAILED 00:02 33m␤»

[01:02] <TimToady> std: my Str multi foo(Str $string) { print "hi $string"; }; foo('everyone')

[01:03] <p6eval> std 25451: OUTPUT«############# PARSE FAILED #############␤Malformed "my" declaration␤Malformed "multi" definition␤Malformed routine definition at /tmp/oc2D26DyA6 line 1:␤------> [32mmy Str multi [31mfoo(Str $string) { print "hi $string"; }[0m␤    expecting declarator␤FAILED 00:02 33m␤»

[01:03] <TimToady> hmm

[01:04] *** alc joined
[01:04] <TimToady> lex damage, I suspect

[01:06] <TimToady> decommuting &

[01:10] <shinobi-cl> pugs: [^] [X] [1,2,3,4]X[3,1].reverse

[01:10] <p6eval> pugs: RESULT«(((1, 1), (1, 3)) ^ ␤ ((2, 1), (2, 3)) ^ ␤ ((3, 1), (3, 3)) ^ ␤ ((4, 1), (4, 3)))»

[01:15] *** eternaleye joined
[01:22] <wayland> @tell Matt-W Form.pm is also documented in Exegesis 7, as I presume you know :)

[01:22] <lambdabot> Consider it noted.

[01:22] <shinobi-cl> pugs: my @a=(1,2,3,4); my @b=(5,6,7,8); say @a Z @b;

[01:22] <p6eval> pugs: OUTPUT«1234␤»

[01:23] <shinobi-cl> pugs: my @a=(1,2,3,4); my @b=(5,6,7,8); @a Z @b;

[01:23] <p6eval> pugs: RESULT«((1, 5), (2, 6), (3, 7), (4, 8))»

[01:23] <shinobi-cl> rakudo: my @a=(1,2,3,4); my @b=(5,6,7,8); say @a Z @b;

[01:23] <p6eval> rakudo 00e9db: OUTPUT«Parrot VM: Can't stat languages/rakudo/perl6.pbc, code 2.␤main: Packfile loading failed␤»

[01:36] <wayland> @tell Matt-W Am I right in presuming that you're going to use a grammar for Form.pm?

[01:36] <lambdabot> Consider it noted.

[01:38] <wayland> Question for the people with perlcabal power; is there some way we can get the new S32 drafts to appear at http://perlcabal.org/syn/ ?

[01:42] <pugs_svn> r25452 | wayland++ | Minor syntax fix

[01:49] <wayland> karma lambdabot

