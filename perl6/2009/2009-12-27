[00:00] *** takadonet left
[00:02] <pmurias> TimToady: why does viv require both YAML::Syck and YAML::XS?

[00:04] *** _jaldhar_ joined
[00:05] * pmurias gets the same STD bug in a independent checkout with a different perl... :(

[00:07] <pmurias> could someone svn co http://svn.pugscode.org/pugs/src/perl6 x;cd x;make and nopaste the output of perl viv -e 'self'

[00:13] <pmurias> sleep&

[00:13] *** pmurias left
[00:22] *** FCO joined
[00:23] *** SmokeMachine left
[00:29] *** lest_away is now known as lestrrat

[00:45] *** colomon joined
[00:47] *** ascent joined
[00:57] *** ascent__ left
[01:14] *** ruoso left
[01:14] <colomon> Does smartmatch do something smart with hashes and keys?

[01:15] *** partisan left
[01:15] *** parduncia left
[01:15] *** ssm left
[01:15] *** krunen left
[01:15] *** cognominal left
[01:16] *** partisan joined
[01:18] *** partisan left
[01:21] *** zibri left
[01:21] *** sjohnson left
[01:21] *** ejs joined
[01:21] *** zibri joined
[01:21] *** sjohnson joined
[01:22] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; $i ~ "[{for @a {f($_, $i + 1)}}]" }; say f([[], [[]], []])

[01:22] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤Null PMC access in find_method('WHAT')␤in Main (file <unknown>, line <unknown>)␤

[01:23] <spinclad> ng: sub f(@a, $i=0) { say "$i: {@a.perl}"; $i ~ "[{for @a {f($_, $i + 1)}}]" }; say f([[], [[]], []])

[01:23] <p6eval> ng 06c947: Method 'perl' not found for invocant of class 'Proxy'␤current instr.: 'perl6;Array;_block3443' pc 232519 (src/gen/core.pir:18562)␤

[01:23] <spinclad> ng: sub f(@a, $i=0) { say "$i: {@a}"; $i ~ "[{for @a {f($_, $i + 1)}}]" }; say f([[], [[]], []])

[01:23] <p6eval> ng 06c947: 0:   ␤1: ␤Method 'HOW' not found for invocant of class 'Undef'␤current instr.: 'perl6;Perl6Role;ACCEPTS' pc -1 ((unknown file):-1)␤

[01:24] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; $i ~ "[{for @a -> $a {f($a, $i + 1)}}]" }; say f([[], [[]], []])

[01:24] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤Null PMC access in find_method('WHAT')␤in Main (file <unknown>, line <unknown>)␤

[01:25] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; for @a -> $a {f($a, $i + 1)} }; say f([[], [[]], []])

[01:25] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤1: [[]]␤2: []␤1: []␤

[01:26] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; for @a {f($_, $i + 1)} }; say f([[], [[]], []])

[01:26] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤1: [[]]␤2: []␤1: []␤

[01:26] *** krunen joined
[01:27] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; "[{for @a {f($_, $i + 1)}}]" }; say f([[], [[]], []])

[01:27] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤Null PMC access in find_method('WHAT')␤in Main (file <unknown>, line <unknown>)␤

[01:28] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; ~(for @a {f($_, $i + 1)}) }; say f([[], [[]], []])

[01:28] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤Null PMC access in find_method('WHAT')␤in Main (file <unknown>, line <unknown>)␤

[01:28] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; (for @a {f($_, $i + 1)}).WHAT }; say f([[], [[]], []])

[01:28] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤Null PMC access in find_method('WHAT')␤in Main (file <unknown>, line <unknown>)␤

[01:28] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; (for @a {f($_, $i + 1)}).PARROT }; say f([[], [[]], []])

[01:28] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤1: [[]]␤2: []␤1: []␤ArrayIterator␤

[01:30] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; (map {f($_, $i + 1)}, @a).PARROT }; say f([[], [[]], []])

[01:30] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤2: [[]]␤3: []␤4: []␤List␤

[01:31] <spinclad> aha, so map fails, for is ok.

[01:32] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; my @b = for @a {f($_, $i + 1)}; say @b.PARROT; @b }; say f([[], [[]], []])

[01:32] <p6eval> rakudo 8dc189: Confused at line 2, near "{f($_, $i "␤in Main (file <unknown>, line <unknown>)␤

[01:32] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; my @b = (for @a {f($_, $i + 1)}); say @b.PARROT; @b }; say f([[], [[]], []])

[01:32] *** cognominal joined
[01:32] *** ssm joined
[01:32] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤Perl6Array␤1: [[]]␤2: []␤Perl6Array␤Perl6Array␤1: []␤Perl6Array␤Perl6Array␤

[01:33] <spinclad> rakudo: sub f(@a, $i=0) { say "$i: {@a.perl}"; my @b = map {f($_, $i + 1)}, @a; say @b.PARROT; @b }; say f([[], [[]], []])

[01:33] <p6eval> rakudo 8dc189: 0: [[], [[]], []]␤1: []␤Perl6Array␤2: [[]]␤3: []␤Perl6Array␤Perl6Array␤4: []␤Perl6Array␤Perl6Array␤␤

[01:33] <spinclad> ng: sub f(@a, $i=0) { say "$i: {@a.perl}"; my @b = (for @a {f($_, $i + 1)}); say @b.PARROT; @b }; say f([[], [[]], []])

[01:33] <p6eval> ng 06c947: Method 'perl' not found for invocant of class 'Proxy'␤current instr.: 'perl6;Array;_block3443' pc 232519 (src/gen/core.pir:18562)␤

[01:34] <spinclad> ng: sub f(@a, $i=0) { say $i, @a.perl; my @b = (for @a {f($_, $i + 1)}); say @b.PARROT; @b }; say f([[], [[]], []])

[01:34] <p6eval> ng 06c947: Method 'perl' not found for invocant of class 'Proxy'␤current instr.: 'perl6;Array;_block3443' pc 232519 (src/gen/core.pir:18562)␤

[01:34] <spinclad> ng: sub f(@a, $i=0) { say $i, @a; my @b = (for @a {f($_, $i + 1)}); say @b.PARROT; @b }; say f([[], [[]], []])

[01:34] <p6eval> ng 06c947: 0␤1␤Method 'HOW' not found for invocant of class 'Undef'␤current instr.: 'perl6;Perl6Role;ACCEPTS' pc -1 ((unknown file):-1)␤

[01:34] *** parduncia joined
[01:35] <spinclad> ng: sub f(@a, $i=0) { say $i, @a; my @b = map {f($_, $i + 1)}, @a; say @b.PARROT; @b }; say f([[], [[]], []])

[01:35] <p6eval> ng 06c947: 0␤Could not find non-existent sub &map␤current instr.: '&f' pc 217 (EVAL_1:59)␤

[01:36] <spinclad> ng: sub f(@a, $i=0) { say $i, @a; my @b = gather for @a {take f($_, $i + 1)}; say @b.PARROT; @b }; say f([[], [[]], []])

[01:36] <p6eval> ng 06c947: 0␤1␤Method 'HOW' not found for invocant of class 'Undef'␤current instr.: 'perl6;Perl6Role;ACCEPTS' pc -1 ((unknown file):-1)␤

[01:38] <spinclad> all right, enough spam now.  finding: map confuses $i's scope somehow.

[01:43] *** _jaldhar_ left
[01:43] *** trondham joined
[01:45] *** jferrero left
[01:49] <colomon> spinclad: I don't have time to go back through that all at the moment, but you should know that $_ doesn't work properly with map in ng.

[01:51] *** _jaldhar_ joined
[01:55] *** vasuvi joined
[01:55] *** parduncia left
[01:55] *** ssm left
[01:55] *** cognominal left
[01:55] <vasuvi> Out of curiousity, is Pugs still alive, or has everybody switched to Rakudo?

[02:09] *** nbrown04 joined
[02:10] *** nbrown04 left
[02:10] *** parduncia joined
[02:10] *** cognominal joined
[02:10] *** ssm joined
[02:14] *** synth left
[02:14] *** pugs_svn left
[02:14] *** mdxi left
[02:14] *** hugme left
[02:14] *** jql left
[02:14] *** Infinoid left
[02:14] *** kcwu left
[02:14] *** gbacon left
[02:14] *** hicx174 left
[02:14] *** cj left
[02:14] *** REPLeffect_ left
[02:14] *** s1n left
[02:14] *** dukelet0 left
[02:14] *** mtve left
[02:14] *** akl left
[02:14] *** RichiH left
[02:14] *** tomaw_ left
[02:18] *** RichiH joined
[02:18] *** REPLeffect_ joined
[02:18] *** synth joined
[02:18] *** cj joined
[02:18] *** kcwu joined
[02:18] *** mdxi joined
[02:18] *** hicx174 joined
[02:18] *** Infinoid joined
[02:18] *** pugs_svn joined
[02:18] *** gbacon joined
[02:18] *** akl joined
[02:18] *** jql joined
[02:18] *** tomaw_ joined
[02:18] *** dukelet0 joined
[02:18] *** s1n joined
[02:18] *** hugme joined
[02:18] *** mtve joined
[02:18] *** irc.freenode.net sets mode: +vv pugs_svn hugme

[02:20] *** RichiH left
[02:21] *** RichiH joined
[02:21] <spinclad> colomon: i don't see map at all in ng at present.

[02:23] <spinclad> vasuvi: pugs still has some life as a set of haskell modules; in the pugs repo it's gone completely quiet these days.

[02:24] <spinclad> colomon: for my finding i should say: in rakudo HEAD, map confuses $i's scope somehow.

[02:27] *** _jaldhar_ left
[02:30] *** trondham left
[02:30] *** _jaldhar_ joined
[02:34] <vasuvi> sinclad: ok, thanks for the info!

[02:34] <vasuvi> *spinclad that is

[02:34] <diakopter> vasuvi: it's maintained on hackage

[02:34] <vasuvi> okies

[02:34] *** diakopter sets mode: +ooo colomon spinclad TimToady

[02:42] *** partisan joined
[03:16] *** mikehh_ joined
[03:16] *** mikehh left
[03:23] *** mberends joined
[03:32] *** ejs left
[03:41] *** araujo left
[03:43] *** justatheory left
[03:43] *** araujo joined
[03:43] *** araujo left
[03:45] *** araujo joined
[03:47] <lisppaste3> mberends32 pasted "self.VAST for pmurias" at http://paste.lisp.org/display/92668

[03:48] *** araujo left
[03:49] *** araujo joined
[04:01] *** Baggio_ joined
[04:17] *** meppl joined
[04:19] <colomon> spinclad: watch.  :)

[04:19] <colomon> ng: (1...11).map({$^a * 3}).perl.say

[04:19] <p6eval> ng 06c947: (3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33)␤

[04:21] *** colomon left
[04:42] *** araujo left
[04:43] *** araujo joined
[04:44] <pugs_svn> r29398 | mberends++ | [src/perl6/viv] remove the apparent fossil 'use YAML::XS' from line 11, the 'make test' passes the same number of files without it 

[04:45] *** Baggio_ left
[04:54] <spinclad> colomon: ah, .map but not &map.

[04:55] <spinclad> ng: sub f(@a, $i=0) { say $i, @a; my @b = @a.map: {f($_, $i + 1)}; say @b.PARROT; @b }; say f([[], [[]], []])

[04:55] <p6eval> ng 06c947: 0␤Array␤

[04:56] <spinclad> ng: sub f($a, $i=0) { say $i, $a; my @b = $a.map: {f($_, $i + 1)}; say @b.PARROT; @b }; say f([[], [[]], []])

[04:56] <p6eval> ng 06c947: 0  ␤Array␤1Mu()␤

[04:56] <pugs_svn> r29399 | Darren_Duncan++ | S06 : typo fix 

[04:56] <spinclad> ng: sub f($a, $i=0) { say $i, $a.perl; my @b = $a.map: {f($_, $i + 1)}; say @b.PARROT; @b }; say f([[], [[]], []])

[04:56] <p6eval> ng 06c947: Method 'perl' not found for invocant of class 'Proxy'␤current instr.: 'perl6;Array;_block3532' pc 233183 (src/gen/core.pir:18815)␤

[04:59] <spinclad> finding: something lacking in array argument passing...

[05:01] <mberends> argh! I've broken 'viv', even though 'make test' was happy :(

[05:02] <diakopter> mberends: oh yeah; I should've mentioned

[05:03] <sjohnson> :)

[05:03] <diakopter> for some reason TimToady (or anyone else) can't discern, XS reads the frozens better (without crashing) than Syck

[05:03] <diakopter> or something somewhat close to that

[05:04] * mberends looks for a way to run viv without two YAML emitters

[05:04] <diakopter> or 3 readers! ;)

[05:04] <diakopter> just write your own emitter... make it 3

[05:05] <mberends> heh, it would be faster, like with your ToJS.pm Occam Razor

[05:06] <diakopter> but srsly, I wouldn't try to remove the XS dependency if I were you... 

[05:06] <mberends> :(

[05:06] <diakopter> it works

[05:07] <mberends> the crash is not with reading, it's viv:93 missing Dump

[05:07] <diakopter> oh?

[05:07] <mberends> it only sometimes goes there, not during 'make test' it seems

[05:08] <diakopter> I bet if you make clean then make test...

[05:08] <mberends> ok, I'll try that again, thought I had anyway

[05:09] <mberends> keeping that mberends64 user out of it this time ;)

[05:16] *** araujo left
[05:18] <mberends> running viv make clean && make test on an eeePC takes some time, the ./tryfile STD.pm and the first few t/spec file have passed

[05:18] <mberends> diakopter: ... you were saying?

[05:19] *** Baggio_ joined
[05:19] *** araujo joined
[05:21] *** araujo left
[05:22] *** araujo joined
[05:24] <diakopter> hm

[05:24] <diakopter> so, I lost the bet :P

[05:25] <mberends> we hadn't shaken on anything yet

[05:25] <mberends> YAML::Syck also exports a Dump(), but its use is only on line 1601

[05:26] *** araujo left
[05:27] <mberends> moving to the top is obviously worth a try, I'll ask mberends64 then

[05:27] *** araujo joined
[05:29] *** araujo left
[05:30] *** araujo joined
[05:33] <mberends> 'make test' with use YAML::Syck at the top instead of YAML::XS happily chugs away through t/spec

[05:38] <mberends> is there something significant in the fact that pugs/t/spec contains 666 test scripts?

[05:38] *** araujo left
[05:38] <allbery_b> *eyeroll*

[05:45] *** araujo joined
[05:46] <diakopter> hm

[05:46] <diakopter> 666 in base10, I assume?

[05:47] <mberends> yes, it doesn't look so ominous in binary

[05:47] <mberends> er, 10 in which base do you mean? ;)

[05:48] <diakopter> heh

[05:48] <mberends> .oO( there are only 10 kinds of people... )

[05:49] <diakopter> in base666, that's 666 people

[05:49] <mberends> ah! :)

[05:51] * diakopter tries to understand for the life of himself, how the gazelle I got jsmeta to detect mutually recursive patterns

[05:51] <diakopter> I guess I shoulda written a comment or two

[05:52] <diakopter> cuz it works

[05:52] <diakopter> but I don't... um... remember... how it works.

[05:52] * mberends sniggers

[05:52] <diakopter> and the code is..... not useful for that purpose.

[05:54] <mberends> the fact that the 'use YAML::Syck;' was in a heredoc does worry me, but moving it to line 11 works everywhere now.  Perhaps if someone had commented on the YAML issues in viv...

[05:54] <diakopter> 'course, jsmeta wasn't compiling to a textual language...

[05:54] <diakopter> hrm

[05:55] <diakopter> so it encountered the mutual recursion lazily, by name

[05:55] <diakopter> <sigh>

[05:55] <diakopter> mberends: so... it works now?

[05:55] <mberends> *lightbulb* I'll write a comment in viv!

[05:55] * diakopter hopes svn blame doesn't show diakopter for that line

[05:56] <mberends> diakopter: works, fsvo works

[05:56] <diakopter> oh

[05:56] <mberends> the testing may not do the right kind of testing

[05:56] *** Baggio_ left
[05:56] *** diakopter sets mode: +o mberends

[05:57] *** diakopter sets mode: +o sjohnson

[05:57] <mberends> works == worksforme atm

[05:57] <diakopter> but is it as fast as XS for loading?

[05:57] * diakopter un-asks that question; sry

[05:57] <mberends> it seemed fast enough

[05:58] <mberends> Syck should as fast as they get

[05:58] <mberends> *be

[05:58] <diakopter> oh

[05:58] <diakopter> hm

[05:59] <diakopter> oh, now I remember how it worked

[05:59] <mberends> but most of these fast YAML libs dive into your native data structure (eg P5's) and don't return until the whole graph is processed

[06:00] <mberends> :) quick, write a comment!

[06:00] <diakopter> public record by ilbot2 irclog moritz_++...

[06:01] <mberends> convenient

[06:01] <diakopter> speaking of irclog, /me feels drawn to lurk on the past 2 weeks of #parrotsketch and #parrot

[06:03] * diakopter blinks back tears and snorts of rage at purl's noise

[06:03] <mberends> I have little to say there, so I generally lurk those via irclog too

[06:03] *** vasuvi left
[06:04] <diakopter> mberends: btw, did you know mono has an llvm backend?  it's not complete (some major-ish bugs and holes), but it largely works

[06:05] <mberends> diakopter: yes I'd read about it briefly, but not figured out when it would make sense to use the combo

[06:05] <mberends> VM-on-VM seems wasteful

[06:06] <diakopter> as a JIT

[06:06] <diakopter> to machine code

[06:07] <mberends> JIT-on-JIT as well seems wasteful

[06:07] <diakopter> instead of mono's JIT

[06:07] <mberends> ok, only one JIT. phew.

[06:08] * diakopter didn't miss anything in #parrot... now for #parrotsketch

[06:10] <diakopter> just F-bombs from two people on #parrot... odd.

[06:11] * diakopter goes back to typing out-loud my recollection of discovering mutual recursion in jsmeta

[06:11] <mberends> plumage is fairly significant for Perl 6, it may take over from proto

[06:13] <diakopter> jsmeta tries to compute a regex pattern-string for the pattern, and it keeps track of the stringifications of the patterns it's entered (HashSet<string>, effectively), and if it enters the same one again, it's recursing, and returns null.

[06:14] <diakopter> in the C# edition's case, it would be more streamlined to catch a thrown exception at the proper time

[06:14] <mberends> so cached results from previous evaluations

[06:14] <diakopter> instead of doing a bazillion null checks like jsmeta was doing

[06:15] <diakopter> hrm

[06:15] <diakopter> msdn doc fail:  HashSet<T>.UnionWith  :  Modifies the current HashSet<(Of <(T>)>) object to contain all elements that are present in both itself and in the specified collection.   http://msdn.microsoft.com/en-us/library/bb342097.aspx

[06:16] <diakopter> erm, I think they mean "... that are present in either itself or in ..."

[06:16] <mberends> can you be sure exceptions as flow control does perform better? It's implementation dependent.

[06:16] <diakopter> streamlined for code readability, I mean

[06:17] <diakopter> it's just compile-time

[06:18] *** SmokeMachine joined
[06:19] *** FCO left
[06:30] * diakopter resignedly but tentatively decides to use the same null-checking/string-returning recursion-detection as jsmeta, since it's known to work

[06:31] <mberends> good. exceptions as a substitute for flow control generally looks suspicious.

[06:33] * diakopter makes a note to learn that lesson someday ;)

[06:34] * diakopter has an insightful realization about something

[06:35] * mberends cringes at a Perl 5 app that used 'die' throughout instead of 'return' for some trivial reason

[06:35] *** jjx joined
[06:35] <diakopter> :)

[06:37] <sjohnson> mberends: maybe the coder thought it was catastrophic if it couldn't return anything

[06:37] *** jjx left
[06:37] <sjohnson> i have written a few dies myself for that reason... but only in those circumstances

[06:38] <mberends> sjohnson: :)

[06:38] <diakopter> mberends: actually I don't need string vs null; I just need true vs false

[06:39] <diakopter> oh good

[06:43] *** wolf2k_ubuntu left
[06:56] *** Baggio_ joined
[07:05] *** Baggio_ left
[07:14] *** Baggio_ joined
[07:22] <pugs_svn> r29400 | mberends++ | [src/perl6/viv] revert r29398 because of collateral damage, and leave a comment to warn other prospective shavers about this yak 

[07:27] *** Baggio_ left
[07:27] *** xinming_ is now known as xinming

[07:49] *** nbrown left
[08:18] *** xinming_ joined
[08:19] *** wayland76 left
[08:19] *** wayland76 joined
[08:21] *** mberends left
[08:33] *** Baggio_ joined
[08:36] *** xinming left
[08:48] *** Baggio__ joined
[08:52] *** Baggio_ left
[08:53] *** tenma joined
[08:55] *** tenma left
[09:07] *** FalseVinylShrub joined
[09:08] *** Baggio__ left
[09:19] *** mberends joined
[09:25] *** ejs joined
[09:32] *** kaare joined
[09:32] *** wayland76 left
[09:32] *** kaare is now known as Guest23543

[09:34] *** soupdragon left
[09:37] *** xinming_ is now known as xinming

[09:38] *** trondham joined
[09:46] *** vorner joined
[09:55] *** ejs left
[09:55] *** wayland76 joined
[09:56] *** Su-Shee joined
[09:57] <Su-Shee> good morning

[09:57] *** iblechbot joined
[09:58] *** Baggio_ joined
[09:59] *** xinming_ joined
[10:00] <mberends> good morning

[10:02] <Su-Shee> moritz, how have you changed. ;) usally he's the one awake. ;)

[10:03] <mberends> the festive days probably played games with our various sleep cycles ;)

[10:04] <Su-Shee> indeed. I went in one night from getting up at 6.30 to 10.30 ;)

[10:05] * mberends is already on today's second waking, perhaps there'll be a third

[10:06] <Su-Shee> children or napping? ;)

[10:06] <mberends> napping :) some call it "thinking" ;)

[10:07] *** ejs joined
[10:08] <Su-Shee> ah. thinking I do while walking. also ironing sheets is great for concentration and contemplation ;)

[10:18] *** xinming left
[10:29] *** mkb_ joined
[10:30] *** diakopter sets mode: +ooo moritz_ mberends Su-Shee

[10:33] *** masak joined
[10:33] <masak> o/

[10:33] <phenny> masak: 26 Dec 18:37Z <colomon> tell masak Why did you take the Int constraint off of .pick?

[10:35] <masak> phenny: tell colomon I took the Int constraint off of .pick because it means the caller has to do one less explicit conversion if the value sent in happens to be a Num or a Str, or the side effect of numifying a List.

[10:35] <phenny> masak: I'll pass that on when colomon is around.

[10:35] <mberends> \o masak

[10:35] <masak> mberends: o/

[10:36] <masak> mberends: I made great strides with GGE yesterday on the bus.

[10:36] <mberends> \o/

[10:36] <masak> the funniest things to implement are things marked TODO in PGE. :)

[10:36] *** colomon joined
[10:37] <masak> rakudo: say "foo" ~~ /<[d..b]>? foo/

[10:37] <p6eval> rakudo 8dc189: foo␤

[10:37] <masak> GGE dies on the reverse range in the enum char class.

[10:37] <masak> ooh!

[10:38] * masak submits rakudobug

[10:38] <masak> :P

[10:38] <masak> ng: say "foo" ~~ /<[d..b]>? foo/

[10:38] <p6eval> ng 06c947: foo␤

[10:38] <masak> heh.

[10:39] * spinclad expects one can see through a TODO more readily in rakudo than PIR

[10:40] <masak> spinclad: aye.

[10:41] <spinclad> i read the TreeSpider change over night, it reads very nicely.

[10:41] <masak> spinclad: still, it would be wonderful if either (1) I got the tuits to 'backport' the features/fixes to PGE, (2) someone else did, or (3) the GGE source informed pmichaud++'s decisions about PGE in some way.

[10:41] <masak> spinclad: thanks! :)

[10:43] <masak> I already have a few extra GGE tests, as well as some improvements to the existing tests, that I think can be backported to PGE without hesitation. still, I'm going to ask pmichaud first.

[10:43] <mberends> masak: hopefully you'll keep the valuable bits of the commit message (ie most of it) within the GGE source itself :)

[10:44] <masak> mberends: that's a good idea.

[10:44] <spinclad> me thinks it would be good if features/fixes could at least be merged into nqp-rx, as PGE's successor.  i don't really expect pmichaud to devote much to PGE henceforth, somehow.

[10:45] <masak> I still haven't really figgered out when to do documentation. right now I'm so caught up in coding that I don't stop to think about it.

[10:45] *** trondham left
[10:45] <masak> spinclad: nod. PGE hasn't reached its end-of-life yet, though. Rakudo still uses it, as well as most other HLLs on Parrot.

[10:45] <spinclad> but (1) or (2) would be good, for projects still using PGE and not ready to switch.

[10:46] <spinclad> aye, rakudo until ng lands

[10:47] <masak> aye.

[10:49] <masak> about five days from now, according to pmichaud's estimate ('in about 10 days') five days ago.

[10:49] *** lestrrat is now known as lest_away

[10:49] <masak> unless that's 10 days of actual coding.

[10:49] <diakopter> or 240 hours of actual coding

[10:49] *** Baggio_ left
[10:50] <masak> :)

[10:54] <mberends> masak: that triggers a reminder to discuss the status of the proto installed-modules branch. It seems workable enough to come master now, unless you have reservations.

[10:55] <masak> mberends: hold on just a bit.

[10:55] <mberends> fine

[10:57] <masak> mberends: http://irclog.perlgeek.de/perl6/2009-12-12#i_1828488

[10:57] <masak> far as I know, that last conflict was never resolved.

[10:57] *** abra joined
[10:59] *** lest_away is now known as lestrrat

[11:06] *** ejs left
[11:08] *** iblechbot left
[11:13] *** pmurias joined
[11:14] *** wayland76 left
[11:14] *** trondham joined
[11:14] <mberends> it seems packages using proto are blocking the installed-modules branch

[11:14] <mberends> masak: three potential solutions: 1) re-path or rename URI.pm in November, 2) notify ihrd++ of the naming collision, and temporarily comment out his uri project in proto's projects.list until that URI.pm is re-pathed or renamed, 3) both 1 and 2

[11:14] *** wayland76 joined
[11:15] <pmurias> mberends: hi

[11:15] <masak> mberends: (1) sounds fine to me.

[11:15] <pmurias> mberends: could you try svn co http://svn.pugscode.org/pugs/src/perl6 x;cd x;make and nopaste the output of perl viv -e 'self'?

[11:16] <masak> mberends: don't know how reachable ihrd is right now.

[11:16] <pmurias> mberends: i'm trying to hunt down the bug that stopped you from building mildew

[11:16] <masak> mberends: the URI.pm in uri looks like a more advanced version of the one in november.

[11:17] <mberends> pmurias: http://irclog.perlgeek.de/perl6/2009-12-27#i_1870447

[11:19] <pmurias> mberends: seen that one, what i would like to try is to check if the bug reappears with a fresh checkout

[11:19] <mberends> ok

[11:20] <pmurias> mberends: as on my machine the output looks of that is different

[11:20] <pmurias> and i checked with two different perls

[11:20] <mberends> right, need just a few minutes..

[11:22] *** trondham left
[11:31] *** xinming_ is now known as xinming

[11:48] *** trondham joined
[11:52] <lisppaste3> mberends32 pasted "viv r29400 -e 'self' output for pmurias" at http://paste.lisp.org/display/92672

[11:53] <mberends> hope this helps :)

[12:00] *** pmurias left
[12:03] *** payload joined
[12:03] *** RichiH is now known as RichiH_26c3

[12:12] *** Baggio_ joined
[12:22] <diakopter> o_o

[12:22] <diakopter> o_.

[12:22] <diakopter> -_.

[12:22] <diakopter> ___

[12:25] <masak> now you can all review http://github.com/masak/gge/blob/master/STATUS for an up-to-date overview of how GGE is doing, and http://github.com/masak/gge/blob/master/COOLTHINGS for an ambitious look towards the future.

[12:25] <masak> lunch &

[12:26] <masak> if someone has a name suggestion for one of the futuristic projects, I'm all ears.

[12:28] *** FalseVinylShrub left
[12:28] *** TiMBuS left
[12:28] *** Baggio_ left
[12:33] *** payload left
[12:38] <jnthn> phenny: tell particle Parrot's r43264 fixes the pbc_to_exe issue that prevented a Rakduo build completing on Win 7 with MS VC++.

[12:38] <phenny> jnthn: I'll pass that on when particle is around.

[12:38] <phenny> jnthn: 26 Dec 15:10Z <colomon> tell jnthn Blocks with $_ or implied $_ don't get the correct arity at the moment in ng.  It's costing us a good number of tests...

[12:39] <jnthn> phenny: tell colomon aye, the reason it's broke is iirc due to a bug in flattening...so .arity keeps coming back with wrong answers. Or something like that. I was waiting on listy stuff getting sorted out. :-/

[12:39] <phenny> jnthn: I'll pass that on when colomon is around.

[12:42] *** Baggio_ joined
[12:52] *** abra left
[12:54] *** abra joined
[13:08] *** Chillance joined
[13:18] <mberends> jnthn: \o

[13:30] <jnthn> mberends: hi

[13:30] <mberends> had/having a nice time with @family?

[13:35] <jnthn> mberends: Yes. :-)

[13:35] <jnthn> mberends: Been taking some much needed relaxation time.

[13:35] <mberends> :-) how's the new laptop?

[13:36] <jnthn> Much faster.

[13:37] <jnthn> Bit lighter and thinner too.

[13:37] <jnthn> Power adapter is a load lighter.

[13:37] <jnthn> Got things about set up again by now.

[13:38] <jnthn> Fixed an issue with the Win 7 Rakudo build earlier on today.

[13:38] <jnthn> Going to do more @relax for rest of today, I expect, but at least it's ready for me to dig into Rakudo hacking again now :-)

[13:39] <mberends> saw that, a Parrot patch. jnthn++

[13:39] *** david_f joined
[13:42] <mberends> (GGE) we can trust masak++ to keep pushing back the boundaries of what's possible on current Rakudo

[13:43] <david_f> hi - Is there a perl6 equivalent of XML::LibXML (I've done a google search and checked the perl6 IRC logs but I can't find mention of one)?

[13:45] <mberends> 'fraid not yet, david_f.  There's some XML related projects in http://github.com/masak/proto/blob/master/projects.list

[13:47] <david_f> mberends: thanks - I thought I'd seen a blog about it somewhere but couldn't track it down :)

[13:48] <mberends> http://github.com/krunen/xml looks a bit stale - June 2009

[13:52] *** orafu left
[13:53] *** orafu joined
[13:53] <david_f> is the native call interface(?) mature enough to make calls to libxml2 directly yet?

[13:53] *** mjk joined
[13:59] *** Su-Shee left
[14:00] *** ssm left
[14:00] *** parduncia left
[14:00] *** cognominal left
[14:00] *** parduncia joined
[14:00] *** cognominal joined
[14:00] *** ssm joined
[14:01] *** Su-Shee joined
[14:02] *** mjk left
[14:11] *** ssm left
[14:11] *** parduncia left
[14:11] *** cognominal left
[14:11] *** parduncia joined
[14:11] *** cognominal joined
[14:11] *** ssm joined
[14:18] *** idemal left
[14:20] <AndChat> Hi I'm running rakudo on parrot (win32) and so far I am unable to create standalone executables from my perl scripts - can someone give me some pointers, please

[14:24] <mberends> AndChat: it's Not Yet Implemented, sorry

[14:26] *** iblechbot joined
[14:26] <AndChat> Ok thought I was doing domething wrong :)  - any idea on timeline for this feature?

[14:27] *** idemal joined
[14:27] *** david_f left
[14:27] <mberends> no idea, unfortunately. Rakudo requires the Parrot Virtual Machine anyway.

[14:28] *** idemal left
[14:28] *** idemal joined
[14:28] <AndChat> Thanks for the quick response

[14:29] <mberends> :-) please enjoy the bits that do work, eg http://perl6advent.wordpress.com

[14:31] <masak> mberends++ # trusty spokesguy

[14:32] <AndChat> Just started learning P6 two nights ago - love it. Thx

[14:32] <masak> in Soviet Russia -- and in other places as well -- Perl 6 loves you. :)

[14:33] *** nbrown joined
[14:33] *** IllvilJa left
[14:33] <AndChat> ;-)    lol

[14:33] <mberends> and the Native Interface calls you

[14:34] *** trondham left
[14:46] *** _jaldhar_ left
[14:52] * colomon might as well get his message from jnthn.  :)

[14:52] <phenny> colomon: 10:35Z <masak> tell colomon I took the Int constraint off of .pick because it means the caller has to do one less explicit conversion if the value sent in happens to be a Num or a Str, or the side effect of numifying a List.

[14:52] <phenny> colomon: 12:39Z <jnthn> tell colomon aye, the reason it's broke is iirc due to a bug in flattening...so .arity keeps coming back with wrong answers. Or something like that. I was waiting on listy stuff getting sorted out. :-/

[14:54] <colomon> oooo, one from masak too!

[14:54] * masak winks

[14:54] <colomon> why .floor instead of prefix:<+> ?

[14:55] <masak> I guess both would work... but .floor feels more explicit, since we actually want to pretend that we're working on an Int inside the method.

[14:59] *** AndChat left
[15:01] *** pmurias joined
[15:01] *** vorner left
[15:02] <pmurias> mberends: thanks for the paste

[15:03] <mberends> pmurias: did it match your local AST?

[15:07] *** patspam left
[15:09] <pmurias> mberends: no

[15:10] *** colomon left
[15:10] <mberends> :( does it seem to be a difference between Perl 5.10.0 and 5.11.0?

[15:11] <lisppaste3> pmurias pasted "the ast i get" at http://paste.lisp.org/display/92681

[15:11] <pmurias> mberends: i get it both with 5.10.0 and 5.11.0

[15:14] *** masak` joined
[15:15] *** pmurias left
[15:15] *** Chillance left
[15:15] *** masak left
[15:15] *** xinming left
[15:15] *** mberends left
[15:15] *** mikehh_ left
[15:15] *** partisan left
[15:15] *** y3llow_ left
[15:15] *** PacoLinux left
[15:15] *** dalek left
[15:15] *** avar left
[15:15] *** slavik left
[15:15] *** cotto left
[15:15] *** pjcj left
[15:15] *** buubot left
[15:15] *** stepnem left
[15:15] *** omega_ left
[15:15] *** lisppaste3 left
[15:16] *** partisan joined
[15:16] *** dalek joined
[15:18] *** pmurias joined
[15:18] *** y3llow joined
[15:18] *** masak` is now known as masak

[15:18] *** pjcj joined
[15:18] <masak> by the way, my latest rakudobug bounced.

[15:19] <masak> I don't know if it's a one-off occurrance or a sign of a larger problem.

[15:19] <masak> if it happens again, I guess I'll try to reach someone.

[15:20] <masak> the error was '<rt-perl6@netlabs.develooper.com>: Sorry, I couldn't find any host named localhost. (#5.1.2)'

[15:20] *** pmurias left
[15:20] *** pmurias joined
[15:21] * rjbs guesses that your script said "HELO localhost"

[15:21] <masak> my script?

[15:21] <masak> I just sent in a bug report as usual.

[15:22] *** pmurias left
[15:22] *** mikehh_ joined
[15:22] *** mikehh_ is now known as mikehh

[15:23] *** xinming joined
[15:24] *** mberends joined
[15:24] *** pmurias joined
[15:24] *** Chillance joined
[15:24] *** PacoLinux joined
[15:24] *** slavik joined
[15:24] *** cotto joined
[15:24] *** buubot joined
[15:24] *** omega_ joined
[15:24] *** lisppaste3 joined
[15:24] *** irc.freenode.net sets mode: +o mberends

[15:24] *** patspam joined
[15:26] *** stepnem joined
[15:26] <rjbs> "the script" then

[15:26] *** omega__ joined
[15:27] <masak> I'm sorry, I'm not following. maybe I know to little about email protocols to be able follow.

[15:27] <masak> s/able/able to/

[15:27] <rjbs> At the beginning of an SMTP conversation, the sender says "HELO $sender-hostname"

[15:28] <masak> I'm certain that the email body didn't contain 'HELO localhost'. why would it?

[15:28] <rjbs> and if your program is saying "localhost" instead of "my-actual-name.domain.com" it may be bounced as bogus

[15:28] <rjbs> Where is the source of rakudobug?

[15:28] *** literal joined
[15:28] <masak> from what I can tell, the rest of the SMTP conversation doesn't contain 'HELO localhost' either.

[15:28] <masak> rjbs: it's RT.

[15:28] *** avar joined
[15:29] <masak> rt3, to be exact. the one at perl.org.

[15:29] <rjbs> So you submitted via the web?

[15:29] <masak> no, that's turned off.

[15:29] <masak> I sent an email to [email@hidden.address]
[15:29] <rjbs> Okay, how did you send the email?

[15:29] <masak> via Gmail, as I always to.

[15:29] <masak> s/to/do/

[15:29] *** Baggio_ left
[15:30] <masak> I got the whole SMTP conversation back. would it help if I nopasted that?

[15:30] <rjbs> Yes!

[15:30] *** pmurias left
[15:31] <masak> http://gist.github.com/264298

[15:31] <rjbs> That contians none of the SMTP conversation.

[15:31] <masak> oh. :/

[15:31] <masak> that's all I got back, though.

[15:31] <rjbs> It's still potentially useful, looking.

[15:32] <rjbs> My guess, reading that, is that something has been misconfigured at Develooper (perl.org)

[15:33] <rjbs> The message is accepted by them from Gmail, then routed around internally a bit before bouncing.

[15:33] <rjbs> I'm guessing they used "localhost" somewhere that it isn't allowed, but it's not clear.  Sorry I can't help more

[15:34] <masak> it does help -- thanks.

[15:34] <masak> obra: ping.

[15:34] *** wolf2k_ubuntu joined
[15:38] *** Baggio_ joined
[15:40] *** avar left
[15:40] *** literal left
[15:40] *** omega__ left
[15:40] *** patspam left
[15:40] *** slavik left
[15:40] *** mberends left
[15:40] *** omega_ left
[15:40] *** cotto left
[15:40] *** buubot left
[15:40] *** Chillance left
[15:40] *** PacoLinux left
[15:40] *** lisppaste3 left
[15:45] *** mberends joined
[15:45] *** patspam joined
[15:45] *** Chillance joined
[15:45] *** PacoLinux joined
[15:45] *** slavik joined
[15:45] *** cotto joined
[15:45] *** buubot joined
[15:45] *** lisppaste3 joined
[15:45] *** irc.freenode.net sets mode: +o mberends

[15:46] *** omega_ joined
[15:48] *** am0c joined
[15:48] *** avar joined
[15:48] *** literal joined
[15:48] *** abra left
[15:54] *** abra joined
[15:56] *** Su-Shee left
[15:56] *** Baggio__ joined
[15:56] *** Su-Shee joined
[15:57] *** colomon joined
[15:57] *** jaldhar joined
[15:58] *** Psyche^ joined
[16:00] *** Patterner left
[16:00] *** Psyche^ is now known as Patterner

[16:00] *** payload joined
[16:00] *** Baggio_ left
[16:01] <masak> colomon: I just backlogged over the reason for your question about .pick and Int. generalizing, fewer core methods/subs should have nominal types than one would perhaps first assume. when we get support for 'as SomeType' auto-conversion, we can encode things like '.= floor' that way.

[16:06] <hejki> any means to figure out filesize apart from qqx{ls -l} ?

[16:07] <masak> hejki: in Perl 5, it's -s

[16:07] <mberends> hejki: Parrot programmers may be able to help you with stat(), which can return all fields in an array from a single call, japhb++ told me

[16:08] <masak> hejki: the Perl 6 version of `-X $file` is `$file ~~ :X`

[16:08] <masak> hejki: I've implemented a few of those. it's not very difficult.

[16:09] <masak> hejki: I don't think :s is implemented, but if you want, I can guide you through it.

[16:13] *** justatheory joined
[16:14] * masak confirms: only :d, :e and :f are implemented so far

[16:14] <masak> but it seems to be a piece of low-hanging fruit to implement :s

[16:14] <masak> hejki: so, what do you say?

[16:14] <hejki> hmm..

[16:14] <hejki> hit me

[16:14] <hejki> :>

[16:15] <masak> excellent.

[16:15] <masak> so here's the deal. you take the clues I give you, produce a patch, and I apply it. instant win.

[16:15] *** abra left
[16:15] <hejki> :D

[16:15] <masak> here are the clues: http://github.com/rakudo/rakudo/blob/master/src/builtins/any-str.pir http://www.parrotcode.org/docs/ops/io.html (the part about 'stat')

[16:15] *** Baggio__ left
[16:16] <masak> feel free to ask further questions if you have any.

[16:16] *** colomon left
[16:19] <Su-Shee> a "is size null" would be nice aka "is empty" 

[16:19] <masak> Su-Shee: then I formally extend the above deal to cover you as well. the clues are the same as above.

[16:20] <Su-Shee> already reading it.. :)

[16:20] <masak> :)

[16:20] <Su-Shee> really doesn't look that difficult.

[16:20] <masak> it really isn't.

[16:21] <Su-Shee> a low hanging fruits list would be nice, I wouldn't even know what has to be done some day and is perfect to get into "implementing things"

[16:21] <masak> the one thing that's perhaps easy to miss is the !EXPORT list at line 26.

[16:23] <hejki> :

[16:23] <hejki> :)

[16:24] *** payload left
[16:29] <Su-Shee> I've tried something blindly: http://sushee.no-ip.org/chop.txt

[16:29] <masak> you don't need the 'lastchar' line.

[16:31] <masak> also, src/setting/Any-str.pm already contains a pure-Perl6 version of .chop

[16:31] <hejki> how about http://heikki.mehtanen.fi/any-str.-s.patch

[16:31] <Su-Shee> just playing.

[16:31] * masak looks

[16:31] <hejki> (should i do any error checking?

[16:32] <masak> Su-Shee: well, apart from that, it looks fine.

[16:32] <hejki> (i'm not sure what language that even is :P)

[16:32] <masak> hejki: it's PIR, Parrot Intermediate Representation. one step above Parrot assembly code.

[16:33] <hejki> kk

[16:33] <masak> hejki: hm, you forgot line 26...

[16:33] <Su-Shee> :))

[16:33] <hejki> the push_eh-part?

[16:33] *** vorner joined
[16:33] <Su-Shee> the export your actual stuff part.

[16:33] <hejki> oh no.. the export :P

[16:33] <hejki> ye :P

[16:33] <masak> aye.

[16:33] <hejki> i'll fix it

[16:34] <hejki> done

[16:34] <masak> hm...

[16:34] <masak> I'm wondering whether we should box the Parrot int before returning it...

[16:34] <masak> we probably should.

[16:34] <masak> hold on, I'll see if I can find a similar case in existing code.

[16:35] <masak> hm, .chars doesn't box, so we'll skip that.

[16:37] *** jaldhar left
[16:37] <masak> hm, the patch didn't apply cleanly...

[16:37] <masak> investigating.

[16:37] <hejki> might be with the filesnames oslt

[16:38] <masak> hejki: I notice you didn't write any documentation...

[16:38] <masak> oh wait.

[16:38] <masak> it's just me being blind. :/

[16:38] <hejki> i did.. it says Returns file size.

[16:38] <masak> hejki++

[16:38] <hejki> should i write more? :)

[16:39] <hejki> go on push it.. i need it for a project ;P

[16:39] <hejki> oh wait.. i guess i could apply the patch locally as well :D

[16:39] <masak> no, this is fine.

[16:39] <masak> I've applied the patch now.

[16:39] <masak> I'll just take it for a spin, and then I'll push.

[16:39] <hejki> :)

[16:40] <masak> ah. line-ending whitespace. git++. fixing.

[16:40] <hejki> dang

[16:40] <masak> probably nothing you did -- you might just have a sucky editor. :P

[16:41] <hejki> i like my vim

[16:41] <masak> vim is OK.

[16:41] <masak> I bet it can be configured not to leave garbage whitespace, too. :)

[16:42] <hejki> it might've been cause of visual mode

[16:42] <hejki> copypasted the basic structure.. :)

[16:42] <masak> ah.

[16:42] <masak> sometimes autoindent causes that, too, I think.

[16:43] <hejki> ye might be

[16:43] <hejki> but hope it works. i think i'm off for some tv and food. laters :)

[16:43] <Su-Shee> is there a "trim" already?

[16:43] <masak> rakudo: say '    foo     '.trim

[16:43] <p6eval> rakudo 8dc189: foo␤

[16:46] <masak> hejki++ # pushed

[16:47] *** jaldhar joined
[16:52] <dalek> rakudo/master: 77bf8cf | masak++ | src/builtins/any-str.pir:

[16:52] <dalek> rakudo/master: [src/builtins/any-str.pir] implemented :s

[16:52] <dalek> rakudo/master: Patch courtesy of Heikki Meht􏿽xE4nen (hejki++).

[16:52] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/77bf8cf13685f4106ffd6687c3fb9b9edb4d7b91

[17:00] <masak> does Perl 6 have a business case? an implicit one, I mean.

[17:02] <Su-Shee> how do you mean?

[17:03] <masak> I was explaining the raison-d'être of Perl 6 to my father. I explained how mathematical notation had evolved over the centuries.

[17:04] <Su-Shee> and he was asking what all this will be good for?

[17:04] <masak> how cumbersome it was to express things that are dead simple today, before the invention of the zero, or the x^2 notation, or the equals sign.

[17:04] <masak> and he asked about the business case of Perl 6.

[17:05] <masak> it made me realize that he perhaps doesn't grok the economic model of open-source development.

[17:05] <masak> but somewhere beneath his misconceptions about it, there's a good kernel of a question.

[17:05] <moritz_> masak: the question is more if *you* have a business case that involves Perl 6

[17:06] <masak> yes, but that's another question than the one I think I'm hinting at.

[17:06] <Su-Shee> so stop hinting and ask ;)

[17:07] <masak> well, FOSS doesn't operate under an money-based model of profit.

[17:07] <masak> still we're definitely building up a kind of economic good here.

[17:07] <masak> but it's measured in some kind of community units, rather than in money.

[17:08] <masak> the real worth of Perl 5 is in CPAN, and PerlMonks, and freenode.

[17:08] <Su-Shee> yes. because using open source has very concrete and tangible advantages in the company environment. starting with not wasting money on licences and being able to adjust/fix "the software"

[17:08] <Su-Shee> no, not just that.

[17:08] <masak> oh, definitely. the freedome/libre/gratis aspects are important, too.

[17:10] <Su-Shee> it's not about the really "nothing to pay", it's its surrounding "how to pay". 

[17:10] <masak> hm... please elaborate.

[17:11] <Su-Shee> like "paying red hat for 5 years security releases backwards - guaranteed"

[17:11] <masak> ah.

[17:12] <Su-Shee> or, you can buy a DVD with handbook with one of those typical shop systems based on LAMP - costs like 300 euro. 

[17:12] <Su-Shee> you pay for the intelligent compilation.

[17:13] <masak> but I'm not out to get paid. that's not why I do Perl 6.

[17:13] <masak> granted, I wouldn't mind if someone threw a heap of money on me. that would probably motivate me somehow.

[17:13] <masak> but I'm not in it for the money.

[17:14] *** payload joined
[17:14] <Su-Shee> open source always was _explicitly_ not about free beer - so the question for money earning use cases of perl 6 is not just legitimate, but also a good and clever question.

[17:15] <Su-Shee> and you want the "business world recognition"

[17:16] <masak> I wasn't implying making money is not a legitimate motivation. I'm just saying that hasn't been my motivation so far.

[17:17] <Su-Shee> na, that's not what I'm trying to say. give me 5 sentences to explain.

[17:17] <masak> :)

[17:17] <Su-Shee> one of the strong suits of OSS is the real world usability in specific business scenarios where OSS is gaining different realms every decade or every five years or so.

[17:18] <Su-Shee> first, it has been "web" (servers, programming languages) - that's still a real stronghold.

[17:19] <Su-Shee> then came data bases - more and more companies made their db available to linux or published even OSS databases. then came the "let's make something for users" era with KDE and GNOME.

[17:20] <Su-Shee> for a few years - besides web 2.0 - it's now "all things tiny" - cell phones, pdas, netbooks, younameit.

[17:20] <Su-Shee> so, what's coming next? and how does perl 6 might play a role in it? that is essentially the question you'll have to explain your dad.

[17:21] <masak> hm.

[17:21] <masak> yes.

[17:21] <masak> what you're saying makes a lot of sense.

[17:22] <Su-Shee> if we look at python, than python took over from perl the realm of nlp, bio inf. and specifically the acadamic realm, where perl never was really strong. php took over "the web". so, what's the realm we would place perl 6 next year? what would be a future use case to gain users, topics and later on businesses?

[17:23] <masak> I can see Perl 6 making the web world a better place. that's why I'm helping with the Web.pm project.

[17:23] <vorner> Su-Shee: May I point out that one of the strongest places for OSS is development - it has much lower entry barier for people who learn, who know a little, or just want to build tools for other tasks with minimum effort

[17:23] <masak> but I'm sure there are more realms.

[17:24] <Su-Shee> vorner: in germany, it also has a very strong position in administration due to the independance from microsoft.

[17:24] <masak> vorner: yes, that's a good point. most people who get interested in Perl 6 are programmers. the vast majority. tiny scripts can function as a sort of 'gateway drug' to more complex use cases.

[17:25] <vorner> I'm not sure if perl can be good at the „learning“ part, but as I see, perl 6 will be a really powerfull tool at the tool building, system scripting, etc

[17:25] <Su-Shee> masak: without excellent and broad and sexy web support, perl 6 won't gain anything. (or any other programming language, for that matter)

[17:26] <masak> Su-Shee: agreed.

[17:26] <masak> we're aiming towards excellent. :)

[17:26] <masak> and broad.

[17:26] <vorner> still, perl6 as is today is little impractical for „real live“ problems

[17:27] <masak> mainly because it's slow and unstable.

[17:27] <mdxi> what does "sexy web support" in a programming language mean? *the browser* is where all "sexy" web development is going, from my point of view

[17:27] <Su-Shee> where I see perl 6 - and I'm really sure, that this realm will matter in very expensive and important terms - is data mining, text processing and all kinds of "analysis stuff". from "mashups" to banking to "social physics"

[17:27] <mdxi> on the programming side, it's been reduced to "do you speak JSON?"

[17:27] <masak> I have a hunch we'll see improvements in speed and stability during 2010.

[17:27] <mdxi> s/programming/server/

[17:27] <Su-Shee> mdxi: it means if it isn't fun and smooth and easy and somewhat cool, I don't use it.

[17:28] <masak> mdxi: how about Perl 6 that can compile down to Javascript?

[17:28] <masak> mdxi: then you can write your whole web application in Perl 6.

[17:28] <vorner> masak: and it lacks libraries still, but yes, the language design is really nice

[17:28] <Su-Shee> it'll be sexy, if it takes the _future_ of how web is done into account.

[17:28] <masak> vorner: agreed, it lacks libraries. but that's a problem that won't be solved overnight, and not without wider adoption.

[17:29] <vorner> masak: no argue there, sure

[17:29] <masak> Su-Shee: could you be more specific?

[17:30] <Su-Shee> hm, how do I say that..

[17:31] <vorner> Another problem I see with perl5 ‒ it can't be easilly compiled into one compact unit that a windows user could just download and run

[17:32] <vorner> the problem somehow does not exist on linux with distros and package managers, but many people develop applications for users in C++ just because of this

[17:32] <mdxi> Strawberry Perl

[17:32] <Su-Shee> masak: in 199x, noone did web MVC style. then came RoR and took the smalltalk paper (which is very good, btw) and poured it into code. and they did it "the right way" - it spoke to all the web designers (!) which had been left out by perl and php and took them at their hands and gave them something easy to deploy.

[17:32] <masak> nod.

[17:32] <Su-Shee> masak: so, what will be necessary, if you want to play in advanced web in 2012?

[17:33] <masak> Success By Being Opinionated In The Dimensions Where It Matters.

[17:33] <Su-Shee> masak: I (and this is really just my feeling) see an even more strict seperation of "gui" and "middleware". I don't see the need for handling sessions in perl anymore or to deal with templating systems.

[17:34] <masak> nod.

[17:34] <Su-Shee> (former due to window.name and DOM sessions, latter due to great JS frameworks which all deal with this stuff, if you do it right)

[17:34] <Su-Shee> aeh, DOM storage.

[17:35] <vorner> mdxi: does this allow a developer to create single exe that does not need to be installed, no modules spread over directories?

[17:35] <Su-Shee> masak: so, how would you do a web framework which still has to support ancient stuff in technology terms (it still is CGI and stateless http, there's no way around it :) 

[17:35] *** jaldhar left
[17:36] <mdxi> vorner: oh, you meant applications. i thought you were talking about the CPAN and such from a developer's point of view.

[17:36] <Su-Shee> masak: but has to support future cool stuff like CSS3 and HTML5 and Javascript and the possibilities _those_ technologies give you?

[17:36] <mdxi> vorner: no, it doesn't.

[17:37] <masak> Su-Shee: good question. there has to be a staircase of opt-in complexity levels somehow.

[17:37] <masak> from 'bare-bones' to 'the whole AJAX thingamajig'.

[17:37] <Su-Shee> masak: it has more to do with "to what people will perl 6 appeal"

[17:38] <vorner> mdxi: I know people who code in C++ just because they can deliver a single exe that will just run no matter where it is, how it got there, what libraries are installed.

[17:38] <Su-Shee> masak: because that's what decides about style and projects and what will work first. 

[17:38] <mdxi> vorner: of course. C++ is the /lingua franca/ of Windows development

[17:38] <masak> Su-Shee: people who expect the same flexibility as with Perl 5, but more expressive power and convenience.

[17:39] <Su-Shee> masak: appeal to the admins, and you probably get great networking support first. appeal to the web folks and you'll get cool web stuff.

[17:39] <masak> I'd welcome a project that would appeal to admins.

[17:39] <Su-Shee> masak: no. brutally speaking "people" don't know perl 5 anymore nowadays. 

[17:39] <mdxi> "people" never did

[17:39] <masak> how so?

[17:40] <vorner> mdxi: Yes, right. Time to change it. It would be great if there was a way to compile perl6 to an .exe, bundle libraries

[17:40] <Su-Shee> mdxi: they did massively up until 2000. the old web was made entirely of perl.

[17:40] <vorner> GUI library that is easy to use, and so on

[17:41] <Su-Shee> masak: because web is done with php, academics use java and python and the rise of embedded stuff has yet to chose its "scripting language". 

[17:41] <vorner> People prefer languages where it is less easy to shoot yourself into the foot. Perl requieres you know what you are doing

[17:42] <Su-Shee> masak: in germany, there aren't even perl job besides some admin scripting anymore.

[17:42] <Su-Shee> (sorry, moritz :)

[17:42] <masak> vorner: I disagree. some people think like that. others prefer expressiveness to safety from your own mistakes.

[17:42] *** payload1 joined
[17:42] *** payload left
[17:42] <masak> s/your/their/

[17:42] <vorner> masak: Yes, I know. That's why I use perl.

[17:43] <masak> and the caveat is less relevant with Perl 6, too.

[17:43] <Su-Shee> vorner is right in certain terms. technians as a mass aren't really the first folk if it comes to expressiveness :)

[17:43] <masak> if you want, you can program quite conservatively in Perl 6.

[17:43] <Su-Shee> technicians.

[17:43] <Su-Shee> masak: yes, but you're not forced to. 

[17:43] <masak> right.

[17:43] <Su-Shee> and you won't with p6.

[17:43] <vorner> But many people think perl to be cryptic and hard to read

[17:43] <masak> opt-in masochism. :)

[17:44] <masak> vorner: bad Perl is.

[17:44] <Su-Shee> vorner: I find it hard to type. 

[17:44] <vorner> There are even jokes around here that say that perl is write-only language, perl should be used to talk, not to program and that it looks the same before and after encryption

[17:44] <huf> it's not like bad perl is worse than bad c

[17:45] <Su-Shee> look, I wouldn't even care for the usual perl critic - focus on what the future of it will bring and place perl 6 there. 

[17:45] <mdxi> bad perl (aka "PERL", aka "CGI") is one reason i'm actually kinda glad Perl and the web aren't synonymous anymore

[17:45] <vorner> I agree that people who want to write bad code always find a way

[17:45] <mdxi> also, honestly, i don't think any language has, or is going to "win" the web

[17:45] <Su-Shee> my favorite perl joke is that it is the only language which you can write programs in only made up by punctuation :)

[17:46] <Su-Shee> mdxi: perl did and afterwards, php did. now ruby is somewhat dominating the pace in terms of "ideas" (not in massive jobs, interestingly)

[17:47] <vorner> However, if perl is to be adobted widely, people must learn it. And to learn it, the myth about near-unlegibility must die, they fear it.

[17:47] <mdxi> i disagree, except that perl definitely did early on. there's an *awful* lot of Java and even stuff like Cold Fusion out there

[17:47] <Su-Shee> what's for example really not good in terms of "reaching the masses" is the lack of contemporary perl books. nowadays books like "xy hacks" or "foobar for beginners" plainly doesn't use perl anymore.

[17:48] <Su-Shee> mdxi: that's true, I forogt java.

[17:48] <Su-Shee> which means that perl 6 has to gain a foot in the business world.

[17:49] <mdxi> Java feels like the COBOL of the web. it's what all the big players latched onto, adn now it, in its various forms, is a huge bulk of legacy code.

[17:49] <mdxi> the modern world is a little less entrenched than in the mainframe days... but... those mainframes are still out there :)

[17:50] <Su-Shee> yeah, well, as long as universities are churning out young, cheap computer scientists which all went through the school of java...

[17:50] *** meppl left
[17:50] <mdxi> which is the really sad part

[17:50] * vorner is glad to be on the one czech university that still has java as optional language only :-)

[17:51] <Su-Shee> luckily, I didn't even study C.S. ;) would have been lisp and pascal and such in my days anyway. 

[17:51] *** partisan left
[17:52] *** partisan joined
[17:52] <moritz_> nothing wrong with learning either language

[17:52] <vorner> Hmm, seems like the time has stopped here, I went trough pascal, lisp, prolog and haskell (and C++) as the languages I was forced to learn

[17:52] <Su-Shee> moritz_: comp sci in 1990 would have been sheer old school boredom. (from my perspective ;)

[17:52] <mdxi> the whole point of languages is that they don't all solve the same problems the same way. they represent different ways to *think*, basically. a monolingual cs program is a travesty (says the guy who collects programming texts from the 1960s and 1970s)

[17:52] <moritz_> Su-Shee: :-)

[17:53] <Su-Shee> anyway. luckily, nowadays we can have something nice. ;)

[17:53] <masak> mdxi: I agree completely.

[17:53] <moritz_> I'm offline most of the time these days, if you want to reach me it's best by email (moritz at faui2k3.org)

[17:54] <moritz_> happy new year if I don't manage to drop in before the 1st!

[17:54] <masak> moritz_: happynewyear!

[17:54] <masak> mdxi: but while pluralism is indeed very good, some languages are clearly better suited as tools for solving some classes of problems.

[17:55] <mdxi> masak: of course. it follows naturally :)

[17:55] <mdxi> and, in some cases, by explicit design

[17:55] <Su-Shee> yeah, that was never really a decision which "businesses" took into account. ;)

[17:56] <masak> Perl 6, while not being revolutionary in any part except perhaps grammars, definitely gives me a warm, fuzzy feeling in many respects, just by being very convenient.

[17:56] <Su-Shee> masak: sadly, that's not what your CEO is interested in. (take CEO as a metaphor here, please)

[17:57] <masak> nod.

[17:57] <masak> the CEO sees the killer apps, but not the underlying tech.

[17:57] <vorner> I fear one thing about it ‒ its unicode support. Perl 5, when you launch it on not-properly formated codepoints, just passes them trough not complaining. I hope this will be possible with perl 6 too.

[17:58] <Su-Shee> and rightly so IMHO. since the web reached "the masses", they have the right not to be interested wether the cool (or shitty) UI is served by perl or something else.

[17:58] <Su-Shee> masak: do you read german by any chance?

[17:59] <masak> Su-Shee: not nearly as well as I'd like.

[18:00] <masak> vorner: you'd better boil that down to a small use case in order to clarify what you mean.

[18:01] <diakopter> invalid surrogate pairing or combining chars

[18:01] <Su-Shee> masak: over the last months, there's popping one article after another about tech which essentially means a massive rise of data mining "for us common folks". and that's where I would place perl 6 first. 

[18:01] <vorner> masak: Imagine an IRC bot and someone just sends something that is not utf8, but something else, lets say iso-8859-2 (happens all the time)

[18:01] <vorner> I noticed a python bot that just drops dead on one channel when this happens

[18:02] <Su-Shee> *hihi*

[18:02] * Su-Shee searches for some polish letters on her keyboard.. ;)

[18:02] <vorner> I wouldn't like this to happen to a perl 6 bot, if I wrote one

[18:06] *** trondham joined
[18:07] *** jaldhar joined
[18:09] <masak> vorner: encodings are non-trivial. Postel teaches that we should try not to die on bad input, though. and Perl has a tradition of being lenient and workaroundy.

[18:10] <Su-Shee> I second that. great tools like "browsers" and mplayer and such show how important that is.

[18:10] <vorner> Or another thing, imagine you want to count lines. Then you read it as a text file. Would be bad if it failed because someone didn't do their homework when setting correct encoding.

[18:12] <masak> nod.

[18:12] <masak> vorner: do you have Rakudo? have you tried to read a badly encoded file?

[18:12] <masak> I can write the line-counting program for you: `say +$*IN.lines` :)

[18:13] <vorner> I tried it some time ago, now it compiles updates from git, but I'll try soon

[18:14] <masak> when you tried it some time ago, did it work?

[18:15] <vorner> no, it failed

[18:15] <vorner> throwing an exception

[18:15] <vorner> I didn't make it to read it as bytestrings

[18:16] <vorner> it was attempt to read and parse mbox files, which turned to be really resource-consuming

[18:16] <vorner> and some of the files contained 8bit transfered mails with other encodings

[18:17] *** soupdragon joined
[18:18] <vorner> yes, it still fails

[18:18] <vorner> recode utf8..iso-8859-2 | ./x.p6 

[18:18] <vorner> ž

[18:18] <vorner> Malformed UTF-8 string

[18:18] <vorner> in Main (file src/gen_setting.pm, line 324)

[18:19] <masak> vorner: care to submit a rakudobug?

[18:19] <vorner> Is it really a bug? Or is it a feature?

[18:20] <vorner> I could submit it, of course

[18:20] <masak> when in doubt, submit. :)

[18:20] <vorner> ok

[18:20] <masak> make sure you include the above discussion about it possibly being a bug.

[18:23] *** jaldhar left
[18:23] *** jaldhar joined
[18:25] *** payload1 left
[18:25] *** IllvilJa joined
[18:28] <vorner> I don't seem to be able to find a place where to put the bug. I managed to log in into some perlbug web, it allows me to search bugs, but I see no „new bug“ button anywhere :-|

[18:32] <masak> it's all done by email. [email@hidden.address]
[18:32] <masak> last time I tried that though, I got a sad message back from some mail-daemon. that may or may not have been fixed since.

[18:33] <vorner> Is there a hepl of how such mail should look like? Or, it can be just normal email with text?

[18:39] <masak> just a normal email with text.

[18:40] <masak> the subject might have the text '[BUG]' (sans quotes) in it. that gives it the right internal tag in RT.

[18:40] <masak> also, it really helps if the subject is descriptive.

[18:40] *** mkb_ left
[18:41] <vorner> Ok, thanks, I'll write it once I get from shower

[18:41] *** payload joined
[18:56] <masak> food &

[18:56] *** masak left
[19:20] *** colomon joined
[19:25] <vorner> Hm, the mailer daemon gives me a really nice error :-D. „Sorry, I couldn't find any host named localhost.“

[19:29] *** ispeak joined
[19:30] *** ejs joined
[19:31] *** jferrero joined
[19:37] *** kensanata joined
[19:46] *** trondham left
[20:34] *** payload left
[20:34] *** payload1 joined
[21:07] *** vorner left
[21:12] *** kensanata left
[21:18] *** ispeak left
[21:18] *** colomon left
[21:37] *** nbrown left
[21:41] *** ispeak joined
[21:42] *** mberends left
[21:53] *** ruoso joined
[21:54] *** trondham joined
[22:14] *** fridim_ joined
[22:17] *** donaldh joined
[22:17] *** donaldh left
[22:23] *** trondham left
[22:24] *** ejs left
[22:28] *** wolf2k_ubuntu left
[22:29] *** iblechbot left
[22:36] *** colomon_ joined
[22:41] *** wayland76 left
[22:53] *** ispeak left
[23:08] *** ispeak joined
[23:11] *** ispeak left
[23:13] *** Su-Shee left
[23:30] *** colomon_ left
[23:30] *** soupdragon left
[23:36] *** soupdragon joined
[23:36] <Tene> anyone available to confirm some ng spectest failures?

[23:38] <diakopter> hi

[23:39] <diakopter> on latest parrot or something?

[23:40] <Tene> No, on $PARROT_REVISION I'm seeing a failure in t/spec/S32-array/end.rakudo

[23:42] *** fridim_ left
[23:52] *** colomon joined
[23:53] <dalek> rakudo/ng: daa5600 | tene++ | src/Perl6/Compiler.pir:

[23:53] <dalek> rakudo/ng: Add a "load_module" method to Perl6::Compiler for HLL interop

[23:53] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/daa56009fd26687adb5b700ea7626a7e3f638acf

[23:53] <dalek> rakudo/ng: 5e19f61 | tene++ | src/ (2 files):

[23:53] <dalek> rakudo/ng: Change the language the compiler is registered under to match both the HLL namespace and the filename.

[23:53] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/5e19f61ca0bb3662482548758c183c94a93d3de0

