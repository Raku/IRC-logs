[00:08] *** Whiteknight left
[00:13] *** lumi joined
[00:13] *** lumi_ left
[00:16] *** missingthepoint joined
[00:21] *** lumi_ joined
[00:21] *** lumi left
[00:26] <masak> Matt-W: (re towers of hanoi) sacrilege! how dare you speak bad of our only opportunity in CS courses to play with differently-sized rings on sticks?

[00:26] <cognominal> masak, do you know weblift?  I like their use of pattern matching for routing.     

[00:27] <masak> cognominal: it sounds familiar, but I don't know what it is.

[00:27] <masak> cognominal: do you have an URL?

[00:27] <masak> cognominal: also, consider joining #november-wiki, where most of the Web.pm discussion takes place.

[00:27] *** justatheory joined
[00:27] <cognominal> I meant lifteb : http://liftweb.net/

[00:27] <masak> ah.

[00:28] <cognominal> I don't see anything like pattern mathing in Perl 6.

[00:28] <masak> sure there is.

[00:28] <masak> I added it. :)

[00:28] <cognominal> smart match seems a hack compared to pattern matching. or I am misunderstanding

[00:29] <cognominal> masak, I am just discovering routing in Web.pm. so my questions

[00:29] <masak> std: multi fib(0) { 0 }; multi fib(1) { 1 }; multi fib(Int $n) { fib($n-1) + fib($n-2) }

[00:29] <p6eval> std 27864:  ( no output )

[00:29] <masak> bah, STD.pm is being a coward today.

[00:29] <cognominal> so multimethod is pattern matching

[00:29] <masak> cognominal: ok. well, thanks for the liftweb reference. I'll digest it.

[00:29] <masak> cognominal: aye.

[00:30] <cognominal> there is a pdf that explains it in detail

[00:32] <cognominal> http://groups.google.com/group/the-lift-book

[00:32] <masak> nice.

[00:32] <masak> it's written in Scala, I see.

[00:32] <masak> Scala seems nice.

[00:33] <cognominal> a little verbose...

[00:34] <cognominal> I have trouble with lift because I don't know anything related to java, but it seems a great framework so it may interest you

[00:34] <masak> it does. thank you.

[00:34] <cognominal> they break the url into a list and do pattern matching on it to do routing

[00:34] <masak> we've been having such thoughts for Perl 6.

[00:35] <masak> ruoso, among other people, has talked about it.

[00:35] <masak> hm. it's late here. I'll likely go to sleep now.

[00:35] <cognominal> I have learnt haskell and scala to learn about types

[00:35] *** lumi_ left
[00:36] <cognominal> masak, good night

[00:36] <masak> cognominal: 'night

[00:36] *** masak left
[00:36] <missingthepoint> night masak :)

[00:38] *** hudnix left
[00:38] *** mberends left
[00:44] *** jauaor left
[00:45] <cognominal> masak :  somei interesting ressources about lifweb :  http://blog.lostlake.org/index.php?/archives/16-Web-Framework-Manifesto.html  (a manifesto by the future author of liftweb)  http://wiki.liftweb.net/index.php/Lift_View_First (what makes it different from rail),  http://blog.getintheloop.eu/ (a blog with lifweb entries),

[00:54] *** kborer joined
[00:56] *** missingthepoint left
[00:56] *** synthEEEE left
[00:56] *** synth joined
[00:56] *** synth left
[00:56] *** nErVe joined
[00:58] *** missingthepoint joined
[01:05] *** lumi joined
[01:16] <wayland76> lambdabot: @seen mas

[01:16] <lambdabot> I haven't seen mas.

[01:16] <wayland76> lambdabot: @seen masak

[01:16] <lambdabot> I saw masak leaving #perl6 39m 34s ago, and .

[01:18] *** aindilis joined
[01:18] *** zamolxes left
[01:20] <Juerd> There are some really scary things in http://blog.lostlake.org/index.php?/archives/16-Web-Framework-Manifesto.html

[01:20] <Juerd> Also some very good points.

[01:20] *** synth joined
[01:20] *** synth left
[01:20] *** synth joined
[01:20] <Juerd> This makes it a hard read. For every bullet point I search myself for an opinion. I can't just go "probably a good idea, because the previous points were good too."

[01:21] *** zamolxes joined
[01:23] <Juerd> It doesn't read like a manifesto. I'd expect broad and abstract statements...

[01:25] *** missingthepoint left
[01:26] *** missingthepoint joined
[01:44] <wayland76> I always try to think of an opinion :)

[01:44] <wayland76> missingthepoint: Australia?

[01:46] <missingthepoint> wayland76: (backlogs quickly)

[01:47] <missingthepoint> wayland76: yes, i live here :)

[01:47] <missingthepoint> what else are you asking?

[01:47] <wayland76> missingthepoint: I'm near Geelong.  Whereabouts are you?

[01:47] <missingthepoint> adelaide

[01:47] <wayland76> Sorry, the "opinion" comment was directed at Juerd

[01:48] <missingthepoint> ah, ok :)

[01:48] <wayland76> Hmm.  So I'm near Melbourne, bacek is in Sydney, and you're in Adelaide :)

[01:48] <missingthepoint> yep... i think skud is in melbourne too

[01:48] <missingthepoint> and pjf

[01:49] <wayland76> It clicked with me because I'm on Internode

[01:49] <wayland76> I've met pjf

[01:49] <wayland76> But I don't see those people in P6 circles :)

[01:58] <tann> rakudo: sub f($n where $ > 0) { say "ok" }; f(0);

[01:58] <p6eval> rakudo 18598d: OUTPUT¬´Unable to parse multisig; couldn't find final ')' at line 2, near "where $ > "‚ê§in Main (src/gen_setting.pm:3363)‚ê§¬ª

[02:00] <wayland76>  tann: Where are you getting that syntax from?

[02:01] <tann> my imaginary mind :)

[02:01] <tann> vaguely remember p6 has where clause for params

[02:01] <wayland76> rakudo: sub f($n where $_ > 0) { say "ok" }; f(0);

[02:01] <p6eval> rakudo 18598d: OUTPUT¬´Unable to parse multisig; couldn't find final ')' at line 2, near "> 0) { say"‚ê§in Main (src/gen_setting.pm:3363)‚ê§¬ª

[02:01] <wayland76> std: sub f($n where $_ > 0) { say "ok" }; f(0);

[02:02] <p6eval> std 27864: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unable to parse signature; couldn't find final ')' at /tmp/4mL6x4WyTF line 1:‚ê§------> [32msub f($n where $_ [33m‚èè[31m> 0) { say "ok" }; f(0);[0m‚ê§    expecting any of:‚ê§     bracketed infix‚ê§  constraint‚ê§       infix or meta-infix (with precedence

[02:02] <p6eval> ..tighter than ‚Ä¶

[02:02] <tann> i think s06 used to have it or something

[02:02] <wayland76> std: sub f(Int $n where { $_ > 0 }) { say "ok" }; f(0);

[02:02] <p6eval> std 27864:  ( no output )

[02:02] <tann> oh

[02:02] <wayland76> There's something like it in S12

[02:02] <wayland76> std: sub f(Int $n where { $_ > 0 }) { say "ok" }; f(0);

[02:02] <tann> so there must be type

[02:02] <p6eval> std 27864:  ( no output )

[02:02] <wayland76> Or curlies; not sure :)

[02:02] <wayland76> std: sub f($n where { $_ > 0 }) { say "ok" }; f(0);

[02:03] <p6eval> std 27864:  ( no output )

[02:03] <tann> ah

[02:03] <tann> there it is

[02:03] <wayland76> Curlies are the key

[02:03] <wayland76> rakudo: sub f($n where { $_ > 0 }) { say "ok" }; f(0);

[02:03] <p6eval> rakudo 18598d: OUTPUT¬´Parameter type check failed; expected [Any, { ... }], but got Int for $n in call to f‚ê§in sub f (/tmp/A8nNMPgtqk:2)‚ê§called from Main (/tmp/A8nNMPgtqk:2)‚ê§¬ª

[02:03] <wayland76> rakudo: sub f($n where { $_ > 0 }) { say "ok" }; f(1);

[02:03] <p6eval> rakudo 18598d: OUTPUT¬´ok‚ê§¬ª

[02:03] <wayland76> Ok, it works :)

[02:04] <wayland76> Although the error message could be a little more informative :)

[02:05] <tann> that's nice

[02:05] <tann> just masak mentioned about tower of hanoi earlier

[02:05] <tann> so thought i would play with the where clause in params

[02:06] *** justatheory left
[02:06] *** justatheory joined
[02:07] *** nErVe left
[02:07] <tann> rakudo:  sub hanoi($n where { $n > 0 }, $to, $from, $user) { hanoi($n - 1, $using, $from, $to); say "move $from -> $to"; hanoi($n - 1, $to, $using, $from); }; hanoi(4, 3, 1, 2);

[02:07] <p6eval> rakudo 18598d: OUTPUT¬´Symbol '$using' not predeclared in hanoi (/tmp/axXaT0y97V:2)‚ê§in Main (src/gen_setting.pm:3363)‚ê§¬ª

[02:08] <tann> rakudo:  sub hanoi($n where { $n > 0 }, $to, $from, $using) { hanoi($n - 1, $using, $from, $to); say "move $from -> $to"; hanoi($n - 1, $to, $using, $from); }; hanoi(4, 3, 1, 2);

[02:08] <p6eval> rakudo 18598d: OUTPUT¬´Parameter type check failed; expected [Any, { ... }], but got Int for $n in call to hanoi‚ê§in sub hanoi (/tmp/XFLLBYlRus:2)‚ê§called from sub hanoi (/tmp/XFLLBYlRus:2)‚ê§called from sub hanoi (/tmp/XFLLBYlRus:2)‚ê§called from sub hanoi (/tmp/XFLLBYlRus:2)‚ê§called from sub hanoi

[02:08] <p6eval> ..(/tmp/XFLLB‚Ä¶

[02:09] <tann> hmm..

[02:12] <tann> rakudo:  sub hanoi($n where { $_ > 0 }, $to, $from, $using) { hanoi($n - 1, $using, $from, $to); say "move $from -> $to"; hanoi($n - 1, $to, $using, $from); }; hanoi(4, 3, 1, 2);

[02:12] <p6eval> rakudo 18598d: OUTPUT¬´Parameter type check failed; expected [Any, { ... }], but got Int for $n in call to hanoi‚ê§in sub hanoi (/tmp/rFrZcNeSau:2)‚ê§called from sub hanoi (/tmp/rFrZcNeSau:2)‚ê§called from sub hanoi (/tmp/rFrZcNeSau:2)‚ê§called from sub hanoi (/tmp/rFrZcNeSau:2)‚ê§called from sub hanoi

[02:12] <p6eval> ..(/tmp/rFrZc‚Ä¶

[02:13] <tann> rakudo: sub f($n where { $_ > 0 }, $x) { say "ok" }; f(1);

[02:13] <p6eval> rakudo 18598d: OUTPUT¬´too few arguments passed (1) - 2 params expected‚ê§in sub f (/tmp/o3GzuCDT3c:1)‚ê§called from Main (/tmp/o3GzuCDT3c:2)‚ê§¬ª

[02:19] <tann> rakudo: multi sub f { }; multi sub f($n where { $_ > 0 }) { say "ok" }; f(0);

[02:19] <p6eval> rakudo 18598d: OUTPUT¬´No applicable candidates found to dispatch to for 'f'‚ê§in Main (/tmp/JKtxq3do57:2)‚ê§¬ª

[02:19] <tann> ^^^ segfault on my osx :)

[02:24] *** ihrd left
[02:26] *** meppl left
[02:32] *** tann left
[02:41] *** ihrd joined
[02:47] *** blackdog_ joined
[02:54] *** alester left
[03:04] *** justatheory left
[03:05] <wayland76> Hmm.  Submitted a rakudobug?

[03:07] *** ihrd left
[03:07] *** ihrd joined
[03:07] *** ihrd left
[03:08] *** blackdog left
[03:11] *** JimmyZ joined
[03:13] *** cdarroch left
[03:19] *** azawawi joined
[03:19] <azawawi> std: 'hi';

[03:19] <p6eval> std 27864: OUTPUT¬´ok 00:02 36m‚ê§¬ª

[03:26] *** alester joined
[03:27] *** pjcj left
[03:34] <eternaleye> cognominal: If you're looking for pattern-based web routing, check out masak++ 's doc on Astaire: http://feather.perl6.nl/~masak/web-spec/Astaire.html

[03:36] *** azawawi left
[03:51] *** finanalyst joined
[03:51] <pugs_svn> r27865 | azawawi++ | [STD] Removed unused YAML::XS dependency

[03:52] *** finanalyst left
[03:56] *** zamolxes left
[03:56] <wayland76> Does anyone know if closures in rules (regexes) are working yet?

[04:07] <cognominal> apparently not.

[04:09] <cognominal> The work around I use is to break a rule on two and used an action objet that contains methods

[04:10] <cognominal> see http://www.google.com/search?client=safari&rls=fr-fr&q=perl6+%22pass+an+action+object%22&ie=UTF-8&oe=UTF-8 for action objects

[04:14] *** nihiliad joined
[04:16] *** azawawi joined
[04:16] <azawawi> std: sub sub($foo) { }; sub(1); 

[04:16] <p6eval> std 27865: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Missing block at /tmp/re9yxCX0l1 line 1:‚ê§------> [32msub sub($foo) { }; sub(1)[33m‚èè[31m;[0m‚ê§    expecting any of:‚ê§  block‚ê§  routine_def‚ê§        terminator‚ê§     trait‚ê§    whitespace‚ê§FAILED 00:02 39m‚ê§¬ª

[04:17] <azawawi> std: sub if($foo) { }; if(1); 

[04:17] <p6eval> std 27865: OUTPUT¬´ok 00:02 38m‚ê§¬ª

[04:18] <azawawi> TimToady: 'sub sub($foo) { }; sub(1);' fails to parse.

[04:18] <azawawi> rakudo: sub sub($foo) { }; sub(1); 

[04:18] <p6eval> rakudo 18598d:  ( no output )

[04:19] <azawawi> rakudo: sub sub($foo) { say 'Hello from $foo"; }; sub(1); 

[04:19] <p6eval> rakudo 18598d: OUTPUT¬´say requires an argument at line 2, near " 'Hello fr"‚ê§in Main (src/gen_setting.pm:2467)‚ê§¬ª

[04:19] <azawawi> rakudo: sub sub($foo) { say "Hello from $foo"; }; sub(1); 

[04:19] *** justatheory joined
[04:19] <p6eval> rakudo 18598d: OUTPUT¬´Hello from 1‚ê§¬ª

[04:20] *** azawawi left
[04:32] *** hercynium left
[04:35] *** skids_ left
[04:40] *** Pismire2 joined
[04:43] <pugs_svn> r27866 | wayland++ | [S32/IO] Stopped referring to IO::Endable, as its functionality seems to be currently 

[04:43] <pugs_svn> r27866 | wayland++ | subsumed into IO::Seekable.  If I've done it wrong, feel free to change it.  

[04:57] *** JimmyZ left
[05:08] *** justatheory left
[05:08] *** tann joined
[05:11] *** Pismire2 left
[05:20] *** justatheory joined
[05:20] *** justatheory left
[05:23] *** frederico joined
[05:23] *** eMaX left
[05:25] *** nihiliad left
[05:29] *** duckyd joined
[05:31] *** ex_spam_convict joined
[05:31] <ex_spam_convict> Posted: Mon Jan 21, 2008 2:56 pm    Post subject: Time Capsule  	Reply with quote

[05:31] <ex_spam_convict> Shame on you Apple for again screwing your customers over. First you say you can plug in an external HD to the Airport Extreme and use it with Time Machine, and then you remove that feature before Leopard's launch. Only to release "Time Capsule" a few months later. Are you trying to milk money out of your customers or something? 

[05:33] <wayland76> ex_spam_convict: What has that got to do with Perl 6?

[05:40] *** orafu left
[05:40] *** orafu joined
[05:40] <tann> wayland76: it has everything to do with perl 6...looking at his nick :D

[05:41] *** ex_spam_convict left
[05:41] <wayland76> What, you mean that spamming programs will be even easier to write in P6?

[05:53] *** duckyd left
[05:53] *** ruz_mac left
[05:53] *** finanalyst joined
[05:58] *** sparc joined
[06:08] <cognominal> STD:   sub swap (*@_ is rw, *%_ is rw) { @_[0,1] = @_[1,0]; %_<status> = "Q:S"; }; say eval( &swap.signature.perl).perl

[06:09] <cognominal> std:   sub swap (*@_ is rw, *%_ is rw) { @_[0,1] = @_[1,0]; %_<status> = "Q:S"; }; say eval( &swap.signature.perl).perl

[06:09] <p6eval> std 27866: OUTPUT¬´ok 00:05 58m‚ê§¬ª

[06:09] <cognominal> WTF?

[06:13] *** fredrecsky joined
[06:15] *** frederico left
[06:16] <wayland76> What sort of error were you expecting?

[06:19] <cognominal> here, I got :

[06:19] <cognominal>  sub swap (*@_ is rw, *%_ is rw) { }; my $s=&swap.signature.perl; say $s; say eval( $s ).perl

[06:19] <cognominal> :(Object *@_, Object *%_)

[06:19] <cognominal> {}

[06:20] <moritz_> rakudo: sub swap (*@_ is rw, *%_ is rw) { }; my  $s=&swap.signature.perl; say $s; say eval( $s ).perl

[06:20] <cognominal> the "is rw" are lost.

[06:20] <p6eval> rakudo 18598d: OUTPUT¬´:(Object *@_, Object *%_)‚ê§{}‚ê§¬ª

[06:21] <cognominal> and the second line should be identical to the first.

[06:21] <moritz_> cognominal: feel free to submit a bug report

[06:21] <cognominal> ho, I called the wrong interpreter

[06:22] <cognominal> I suppose that jnthn knows all that already

[06:22] <cognominal> probably the "is rw" is not handled today.

[06:22] <moritz_> still it would be good to have it in rt

[06:23] <cognominal> better write a test if it is not already done.

[06:24] <moritz_> sure, that's also welcome

[06:26] *** kane___ left
[06:26] *** araujo left
[06:33] *** fredrecsky is now known as frederico

[06:35] <wayland76> Looks like frederico is at YAPC::EU :)

[06:36] *** payload left
[06:36] <frederico> wayland76: yes :)

[06:40] *** blackdog joined
[06:42] *** aindilis left
[06:57] *** Su-Shee joined
[06:57] <Su-Shee> good morning future. :)

[06:58] *** blackdog_ left
[07:04] *** alester left
[07:06] *** unitxt left
[07:06] <wayland76> o/ Su-Shee

[07:08] <dalek> rakudo: 24b26a0 | pmichaud++ | docs/spectest-progress.csv:

[07:08] <dalek> rakudo: spectest-progress.csv update: 426 files, 12179 passing, 8 failing

[07:08] <dalek> rakudo: Failure summary:

[07:08] <dalek> rakudo:     S12-enums/basic.rakudo aborted 2 test(s)

[07:08] <dalek> rakudo:     S12-introspection/walk.t aborted 6 test(s)

[07:08] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/24b26a0e5319646877f9cdfa5976062e1a02b95a

[07:11] *** blackdog left
[07:13] *** eMaX joined
[07:13] *** missingthepoint left
[07:14] <Matt-W> Morning

[07:18] <eternaleye> The nice thing about global projects is that no matter how late you stay up in your timezone, there are people who are just showing up. And thw whole thing of there always being people making improvements ;D

[07:20] * Su-Shee just had her morning dose of perl blogs and read chromatic's entry about PMC and now my head hurts. ;) 

[07:20] *** blackdog joined
[07:26] *** ruz_mac joined
[07:26] *** kane_ joined
[07:32] *** sdgvf joined
[07:33] <Matt-W> Su-Shee: This happens to me a lot

[07:36] <Su-Shee> a daily dose of feeling stupid is the first step on the path to enlightenment. ;)

[07:41] *** frederico left
[07:41] <sdgvf> what, exactly, is a 'null PMC access'

[07:42] <moritz_> sdgvf: it's an internal error in parrot or rakudo

[07:43] <moritz_> it means that a program tried to access a data structured called "PolyMorphic Container" (or "Parrot Magical Cookie"), but found a Null pointer instead

[07:45] <Su-Shee> moritz_: I've always wanted to ask - are you doing your diplom about p6?

[07:53] <Matt-W> sdgvf: it's like the Parrot VM's version of a segmentation fault

[07:53] <moritz_> Su-Shee: no :(

[07:54] <Matt-W> That would be very cool

[07:54] <moritz_> aye

[07:54] <Matt-W> I should've done that

[07:55] <Matt-W> But then my attempt at a PhD was full of mistakes

[07:55] <Matt-W> Considering going Open University... but doing creative writing and literature, this time. I'm done with computer science qualifications

[07:56] <Su-Shee> a friend of mine just got her degree in linguistics and creative writing from the OU.

[07:56] <Matt-W> One of my superiors at work is doing a BSc in Psychology with them

[07:57] <Matt-W> and one of my colleagues is doing an MSc in Mathematics

[07:57] <Matt-W> although I think he might be with a more conventional university, come to think of it

[07:58] <Su-Shee> well one degree is good enough for me. :) 

[07:58] <sdgvf> http://gist.github.com/159435 <- the grammar (and test data) that causes said implosion

[07:59] <Su-Shee> Matt-W: sadly, some subjects aren't really suitable for remote studying. how to learn bio-tech without a lab?

[07:59] <Matt-W> Su-Shee: yeah I'm only looking at a diploma for this, there's no way to get an entire degree without doing far more literature courses than I want to do

[08:00] <Matt-W> Su-Shee: in fact, it appears to be possible to get the diploma in literature and creative writing by doing only creative writing modules, which is exactly what I want to do

[08:00] <Su-Shee> my friend was very satisfied with the lectures/lessons in CW. 

[08:00] <Matt-W> excellent

[08:01] <Matt-W> as it stands, it looks like it would take me three years, because of when the courses start...

[08:01] <Su-Shee> and she's already got a broad background of humanities/writing/lit'n'stuff.

[08:01] <Matt-W> but hey, no rush

[08:01] <moritz_> sdgvf: it works here, at least I get a match tree and no Null PMC access

[08:01] *** ruz_mac left
[08:01] <Su-Shee> well writing is something to learn within a few weeks :)

[08:01] <moritz_> sdgvf: what version of rakudo are you using?

[08:02] <Su-Shee> "isn't"

[08:03] <moritz_> "isn't" makes more sense :-)

[08:04] <sdgvf> I was running the latest from github a few days ago, I did a git pull && Configure --gen-parrot && make about a half an hour ago

[08:05] <moritz_> hm

[08:05] <Matt-W> Su-Shee: 'isn't' makes a lot more sense, I've been trying to learn how to do it for 15 years, so I think it's about time I had some help

[08:06] <moritz_> sdgvf: that's wierd, such errors are usually rather platform independent - but maybe you found an exception :/

[08:06] <moritz_> sdgvf: when you run 'make spectest', is that mostly clean?

[08:07] <moritz_> (as in, 4 failures or so are expected at the moment)

[08:07] <Su-Shee> Matt-W: it starts with reading a lot. 

[08:09] <moritz_> and it goes on with praticing, and structured learning

[08:09] <moritz_> like any skill you want to acquire efficiently

[08:09] <moritz_> (though many skip the "structured" part, and try it the hard way)

[08:10] <Su-Shee> moritz_: the skills for creative writing aren't that easy to aquire in a "structured" way. the crafts & trades of writing are.

[08:11] <moritz_> Su-Shee: still there are courses, and books, and whatnot

[08:11] <moritz_> Su-Shee: just like for learning programming, and learning good programming

[08:11] <moritz_> but somehow many people think that either they are creative, or not

[08:11] <moritz_> or that creativity can't be learned

[08:11] <Su-Shee> moritz_: well it plainly starts with "reading good stuff". the corpus of literature of your native tongue, the main philosphers and the best of journalism.

[08:12] <Su-Shee> which are "the books" :)

[08:12] <moritz_> I never disputed that :-)

[08:12] <Su-Shee> me neither, I'm not argueing. :)

[08:14] <Su-Shee> the nice thing about lit skills is: you can aquire them sitting in a cafe or on the couch or while lying in bed :)

[08:15] <moritz_> right, I enjoy that regularly :-)

[08:18] <Su-Shee> I'd love to write code as fluently as I write text. 

[08:18] <moritz_> it's the other way round for me, sometimes :-)

[08:18] <Matt-W> I think it helps to just have a structure in that the course says 'write this'

[08:18] <Matt-W> and you have to try

[08:18] <Matt-W> it makes you do different things

[08:19] <Matt-W> it's like how I never really programmed properly until I went to university and they made me write things I would never have tried because I didn't think I knew how

[08:19] <moritz_> Su-Shee: one thing I like about programming is that it's so easy to get feedback on what you write

[08:19] <Matt-W> but when you have to do it, you just figure out how and get on with it

[08:19] <moritz_> the compiler/interpreter and test suite tell you if something's right or wrong

[08:19] <moritz_> and you can easily see if code is beautiful

[08:19] <moritz_> it's not that easy with literature

[08:19] <Matt-W> to a certain extent

[08:20] <Matt-W> sometimes code can look fine, but hide something horrible underneath

[08:20] <Matt-W> especially when you start throwing threads into the mix

[08:20] <moritz_> I haven't done much concurrent programming yet

[08:20] <Matt-W> threaded code typically looks awful

[08:20] <moritz_> but I guess that's true

[08:20] <Su-Shee> moritz_: that is as easy with text as with code. there are universal rules of "what is good writing"

[08:21] <Su-Shee> which you learn to recognize first and later you learn to apply it.

[08:21] <moritz_> Su-Shee: then I should narrow my statement to "it's not easy for /me/"

[08:21] <Su-Shee> moritz_: that's actually a skill not that difficult to aquire up to a certain level.

[08:21] <moritz_> but there you go - if I had some structured eduction regarding literature, I'd know about those rules

[08:22] <Su-Shee> you would. 

[08:22] <moritz_> why don't they teach such things in school? I mean I had way too many useless German classes

[08:22] <Su-Shee> Matt-W: yes, plainly "having to write this now" helps a lot. 

[08:23] <Su-Shee> moritz_: I have really _no_ idea. 

[08:23] <Su-Shee> moritz_: it isn't even part of university education in humanities unless you go ahead and learn it by yourself.

[08:24] <moritz_> Su-Shee: any good resources where I could learn it from?

[08:26] <Su-Shee> moritz_: for german it's the books of wolf schneider, the duden "gutes und richtiges deutsch" is a must-have. also helpful: journalism of the weimarer republic - sternstunden des deutschen. in english you start with "elements of style" (strunk/white, it's online).

[08:26] <moritz_> Su-Shee: thanks

[08:27] * moritz_ bookmarks http://irclog.perlgeek.de/perl6/2009-08-04#i_1364628

[08:28] *** tann left
[08:28] <sdgvf> three centuries later, there are a grand total of five test errors

[08:28] <Su-Shee> moritz_: and as a shortcut, read this http://chaosradio.ccc.de/media/ds/ds081.pdf ;)

[08:30] <moritz_> sdgvf: then your local copy is not hosed, and I have no idea what's wrong

[08:41] *** fridim_ joined
[09:04] *** fridim_ left
[09:05] *** fridim_ joined
[09:06] *** blackdog_ joined
[09:08] *** blackdog_ left
[09:18] * ancients is away (4[O.F.F.L.I.N.E])

[09:18] *** ancients is now known as [ancients]

[09:22] *** eMaX left
[09:25] *** missingthepoint joined
[09:26] *** blackdog left
[09:26] *** kane_ left
[09:38] *** payload joined
[09:40] *** bionoid joined
[09:41] <ruoso> cognominal, Faz is an attempt to implement just that in Perl 6, heavily influenced by Catalyst... http://github.com/ruoso/faz/tree -- take a look in the example code

[09:41] * ruoso commute &

[09:43] *** ruoso left
[09:45] *** payload1 joined
[09:45] *** payload left
[09:51] *** JimmyZ joined
[09:53] *** synth left
[10:01] *** pjcj joined
[10:01] *** stepnem left
[10:06] *** donaldh joined
[10:09] *** stepnem joined
[10:11] *** broquaint left
[10:27] *** SmokeMachine left
[10:34] <JimmyZ> rakudo: HOW(x).methods.perl.say

[10:34] <p6eval> rakudo 24b26a: OUTPUT¬´Could not find non-existent sub x‚ê§¬ª

[10:34] <JimmyZ> rakudo: HOW(1).methods.perl.say

[10:34] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'methods' not found for invocant of class 'Int'‚ê§¬ª

[10:34] <JimmyZ> rakudo: HOW(Str).methods.perl.say

[10:34] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'methods' not found for invocant of class ''‚ê§¬ª

[10:35] <JimmyZ> rakudo: HOW(Str).perl.say

[10:35] <p6eval> rakudo 24b26a: OUTPUT¬´Str‚ê§¬ª

[10:35] <JimmyZ> rakudo: Str.perl.say

[10:35] <p6eval> rakudo 24b26a: OUTPUT¬´Str‚ê§¬ª

[10:35] <JimmyZ> rakudo: Str.HOW.perl.say

[10:35] <p6eval> rakudo 24b26a: OUTPUT¬´Str.new()‚ê§¬ª

[10:36] <JimmyZ> rakudo: Str.HOW.methods.perl.say

[10:36] <p6eval> rakudo 24b26a: OUTPUT¬´too few arguments passed (1) - 3 params expected‚ê§in Main (/tmp/6qA1gaFtVi:2)‚ê§¬ª

[10:36] <JimmyZ> rakudo: Str.HOW.methods('').perl.say

[10:36] *** hah joined
[10:36] <p6eval> rakudo 24b26a: OUTPUT¬´[{ ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ...

[10:36] <p6eval> ..}, { ‚Ä¶

[10:39] <JimmyZ> perl6 needs to more test cases...

[10:40] <Matt-W> always

[10:40] <Matt-W> feel free to write some

[10:44] <wayland76> lambdabot: @seen masak jnthn

[10:44] <lambdabot> I saw masak leaving #perl6 10h 7m 39s ago, and .

[10:44] <wayland76> lambdabot: @seen jnthn

[10:44] <lambdabot> jnthn is in #perl6. I last heard jnthn speak 1d 23h 2m 3s ago.

[10:46] *** bionoid left
[10:47] <Matt-W> wayland76: they'll be busy with YAPC::EU at the moment I expect

[10:48] <missingthepoint> is that just the Str.HOW methods deparsing - no serialization yet, so it uses yada to fill in?

[10:48] <Matt-W> missingthepoint: it can't render out code blocks, so it just says yada, yes

[10:48] <missingthepoint> ah, thanks Matt-W 

[10:48] <Matt-W> rakudo: sub a { say "a" }; say &a.perl;

[10:48] <p6eval> rakudo 24b26a: OUTPUT¬´{ ... }‚ê§¬ª

[10:49] *** JimmyZ left
[10:49] <Matt-W> not sure if it's ever supposed to be able to do it

[10:49] <Matt-W> it's not exactly an easy thing...

[10:49] *** JimmyZ joined
[10:49] <Matt-W> at least, not without keeping a string copy of the code that went into a routine around in memory with it, which seems a bit pointless

[10:51] <missingthepoint> But isn't that the only way to get proper deserialization?

[10:51] <JimmyZ> How did http://perlcabal.org/syn/S02.html embed the spectests?

[10:52] <missingthepoint> JimmyZ: see util/smartlinks.pl in pugs repo

[10:54] <JimmyZ> I can't understand it. :(

[10:55] <wayland76> Matt-W: Yeah, I figured, but I thought I'd check anyway

[10:55] <wayland76> They were online in the middle of Nordic Perl Workshop after all :)

[10:56] <JimmyZ> missingthepoint: Is it smartlinks.pl's job?

[10:57] <missingthepoint> JimmyZ: smartlinks.pl uses Text::SmartLinks, which is in util/ as well...

[10:57] <missingthepoint> (more)

[10:58] <JimmyZ> thanks

[10:58] <missingthepoint> if you look in util/Text-Smartlinks/lib/Text/Smartlinks.pm it has a big explanation of how it works :)

[11:01] <JimmyZ> missingthepoint: I don't love it, It has no benefit for printing it to papers.

[11:01] <JimmyZ> ;)

[11:03] <missingthepoint> JimmyZ: do you want to print out the embedded tests with the spec?

[11:07] <JimmyZ> missingthepoint: I had known how to do that, just add some comments to spectests.

[11:08] *** payload1 left
[11:08] *** c1sung_ left
[11:08] *** nnunley left
[11:08] *** huf left
[11:08] *** estrabd left
[11:08] *** integral left
[11:08] *** charsbar left
[11:08] *** PerlJam left
[11:08] *** PZt left
[11:08] *** elmex left
[11:08] *** athomason left
[11:08] *** arthur-_ left
[11:08] *** s1n left
[11:08] *** LCamel left
[11:08] *** [particle] left
[11:08] *** frettled left
[11:08] *** patmat left
[11:08] *** ilbot2 left
[11:08] *** Tene left
[11:08] *** rbuels left
[11:08] *** krunen left
[11:08] *** BinGOs left
[11:08] *** felipe left
[11:08] *** buubot left
[11:08] *** jhelwig left
[11:08] *** eiro left
[11:08] *** ascent_ left
[11:08] *** Hale-Bopp left
[11:08] *** pjcj left
[11:08] *** sdgvf left
[11:08] *** itz_ left
[11:08] *** mdxi left
[11:08] *** bloonix_ left
[11:08] *** bigpresh_ left
[11:08] *** cosimo left
[11:08] *** scrottie left
[11:08] *** hexmode left
[11:08] *** he_ left
[11:08] *** ibrown left
[11:08] *** edenc left
[11:08] *** Lorn left
[11:08] *** c9s left
[11:08] *** sunnavy left
[11:08] *** solarion left
[11:08] *** andreasg_ left
[11:08] *** PacoLinux left
[11:08] *** kolibrie left
[11:08] *** cognominal left
[11:08] *** Matt-W left
[11:08] *** christine left
[11:10] <wayland76> Ooh, network split

[11:10] *** PerlJam joined
[11:10] *** pjcj joined
[11:10] *** payload1 joined
[11:10] *** sdgvf joined
[11:10] *** c1sung_ joined
[11:10] *** athomason joined
[11:10] *** nnunley joined
[11:10] *** estrabd joined
[11:10] *** integral joined
[11:10] *** huf joined
[11:10] *** charsbar joined
[11:10] *** elmex joined
[11:10] *** PZt joined
[11:10] *** cognominal joined
[11:10] *** buubot joined
[11:10] *** arthur-_ joined
[11:10] *** jhelwig joined
[11:10] *** sunnavy joined
[11:10] *** krunen joined
[11:10] *** eiro joined
[11:10] *** felipe joined
[11:10] *** solarion joined
[11:10] *** s1n joined
[11:10] *** andreasg_ joined
[11:10] *** LCamel joined
[11:10] *** [particle] joined
[11:10] *** ascent_ joined
[11:10] *** patmat joined
[11:10] *** Tene joined
[11:10] *** ilbot2 joined
[11:10] *** rbuels joined
[11:10] *** frettled joined
[11:10] *** PacoLinux joined
[11:10] *** itz_ joined
[11:10] *** Matt-W joined
[11:10] *** christine joined
[11:10] *** BinGOs joined
[11:10] *** kolibrie joined
[11:10] *** cosimo joined
[11:10] *** c9s joined
[11:10] *** scrottie joined
[11:10] *** hexmode joined
[11:10] *** edenc joined
[11:10] *** he_ joined
[11:10] *** Lorn joined
[11:10] *** ibrown joined
[11:10] *** Hale-Bopp joined
[11:10] *** bigpresh_ joined
[11:10] *** bloonix_ joined
[11:10] *** mdxi joined
[11:10] *** irc.freenode.net sets mode: +oo PerlJam [particle]

[11:10] <wayland76> Network split/merge :)

[11:13] *** frew__ joined
[11:15] <JimmyZ> rakudo: 'x'.HOW.methods.perl.say;

[11:15] <p6eval> rakudo 24b26a: OUTPUT¬´too few arguments passed (1) - 3 params expected‚ê§in Main (/tmp/3i64vodxcG:2)‚ê§¬ª

[11:15] *** ssm left
[11:15] *** fridim_ left
[11:15] *** frew_ left
[11:15] *** wayland76 left
[11:15] *** Grrrr left
[11:15] *** gfldex left
[11:15] *** lisppaste3 left
[11:15] *** shachaf left
[11:15] *** adhoc left
[11:15] <JimmyZ> rakudo: 'x'.HOW.methods('').perl.say;

[11:15] <p6eval> rakudo 24b26a: OUTPUT¬´[{ ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ... }, { ...

[11:15] <p6eval> ..}, { ‚Ä¶

[11:15] <JimmyZ> rakudo: 'x'.HOW.methods('').say;

[11:15] <p6eval> rakudo 24b26a:

[11:15] <p6eval> ..OUTPUT¬´WHICHACCEPTSperlsprintfScalarpredencodesuccwordsvaluescanlcfirstsrandComplexmappolarciskvsamecaselogmincapitalizemaxfirsttransflipIntdoesp5choplcsubstelemsabsendchompreduceindexceilingp5chomp:dpairs:e:fcombunpolarordchopintcharsrootsuckeysreverseisaucfirstsubstrfmtbytespickevalfile‚Ä¶

[11:16] *** gfldex joined
[11:16] *** wayland76 joined
[11:16] <JimmyZ> rakudo: Str.HOW.methods('').say;

[11:16] <p6eval> rakudo 24b26a:

[11:16] <p6eval> ..OUTPUT¬´WHICHperlACCEPTSsprintfScalarpredencodesuccmincapitalizemaxfirsttransflipIntdoesp5choplcsubstelemsabschompendreduceindexceilingp5chomp:dpairs:e:fcombunpolarordchopintcharsrootsucreversekeysisaucfirstsubstrfmtbytespickevalfilejointrimchrfloorrandtruncatesortroundsqrtrindexsplitmatch‚Ä¶

[11:16] *** fridim_ joined
[11:16] <JimmyZ> rakudo: HOW(Str).methods('').say;

[11:16] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'methods' not found for invocant of class ''‚ê§¬ª

[11:17] *** Grrrr joined
[11:17] *** adhoc joined
[11:17] *** shachaf joined
[11:20] *** donaldh left
[11:20] *** donaldh joined
[11:23] <JimmyZ> missingthepoint: Help, how do I write this tests? 

[11:24] *** gbacon left
[11:24] *** jan_ left
[11:24] *** Patterner left
[11:24] *** xinming left
[11:24] *** jiing left
[11:24] *** Aisling left
[11:24] *** cotto left
[11:24] *** cotto joined
[11:24] *** Aisling joined
[11:24] *** jiing joined
[11:24] *** xinming joined
[11:24] *** Patterner joined
[11:24] *** jan_ joined
[11:24] *** gbacon joined
[11:25] *** fridim_ left
[11:25] *** c1sung_ left
[11:25] *** payload1 left
[11:25] *** huf left
[11:25] *** nnunley left
[11:25] *** estrabd left
[11:25] *** charsbar left
[11:25] *** integral left
[11:25] *** adhoc left
[11:25] *** PZt left
[11:25] *** PerlJam left
[11:25] *** elmex left
[11:25] *** frettled left
[11:25] *** [particle] left
[11:25] *** athomason left
[11:25] *** ilbot2 left
[11:25] *** LCamel left
[11:25] *** patmat left
[11:25] *** s1n left
[11:25] *** rbuels left
[11:25] *** Tene left
[11:25] *** arthur-_ left
[11:25] *** krunen left
[11:25] *** BinGOs left
[11:25] *** Hale-Bopp left
[11:25] *** jhelwig left
[11:25] *** ascent_ left
[11:25] *** buubot left
[11:25] *** eiro left
[11:25] *** Grrrr left
[11:25] *** mdxi left
[11:25] *** bloonix_ left
[11:25] *** ibrown left
[11:25] *** he_ left
[11:25] *** scrottie left
[11:25] *** cosimo left
[11:25] *** itz_ left
[11:25] *** pjcj left
[11:25] *** edenc left
[11:25] *** sdgvf left
[11:25] *** sunnavy left
[11:25] *** hexmode left
[11:25] *** Lorn left
[11:25] *** c9s left
[11:25] *** bigpresh_ left
[11:25] *** kolibrie left
[11:25] *** andreasg_ left
[11:25] *** solarion left
[11:25] *** PacoLinux left
[11:25] *** Matt-W left
[11:25] *** christine left
[11:25] *** cognominal left
[11:25] *** felipe left
[11:25] <JimmyZ> missingthepoint: I don't know how to judge whether the result is right or no.

[11:26] <JimmyZ> s/no/not

[11:26] *** PerlJam joined
[11:26] *** adhoc joined
[11:26] *** Grrrr joined
[11:26] *** fridim_ joined
[11:26] *** pjcj joined
[11:26] *** payload1 joined
[11:26] *** sdgvf joined
[11:26] *** c1sung_ joined
[11:26] *** athomason joined
[11:26] *** nnunley joined
[11:26] *** estrabd joined
[11:26] *** integral joined
[11:26] *** huf joined
[11:26] *** charsbar joined
[11:26] *** elmex joined
[11:26] *** PZt joined
[11:26] *** cognominal joined
[11:26] *** buubot joined
[11:26] *** arthur-_ joined
[11:26] *** jhelwig joined
[11:26] *** sunnavy joined
[11:26] *** krunen joined
[11:26] *** eiro joined
[11:26] *** felipe joined
[11:26] *** solarion joined
[11:26] *** s1n joined
[11:26] *** andreasg_ joined
[11:26] *** LCamel joined
[11:26] *** [particle] joined
[11:26] *** ascent_ joined
[11:26] *** patmat joined
[11:26] *** Tene joined
[11:26] *** ilbot2 joined
[11:26] *** rbuels joined
[11:26] *** frettled joined
[11:26] *** PacoLinux joined
[11:26] *** itz_ joined
[11:26] *** Matt-W joined
[11:26] *** christine joined
[11:26] *** BinGOs joined
[11:26] *** mdxi joined
[11:26] *** bloonix_ joined
[11:26] *** bigpresh_ joined
[11:26] *** Hale-Bopp joined
[11:26] *** ibrown joined
[11:26] *** Lorn joined
[11:26] *** he_ joined
[11:26] *** edenc joined
[11:26] *** hexmode joined
[11:26] *** scrottie joined
[11:26] *** c9s joined
[11:26] *** irc.freenode.net sets mode: +oo PerlJam [particle]

[11:26] *** cosimo joined
[11:26] *** kolibrie joined
[11:26] <missingthepoint> JimmyZ: to judge whether the result is right, you need to read the right part of the spec (http://perlcabal.org/syn/)

[11:27] <missingthepoint> in this case, here: http://perlcabal.org/syn/S12.html#Introspection

[11:27] <missingthepoint> but sometimes things won't be completely specced (i.e. @Larry, the Perl 6 design team) needs to think through things more and actually WRITE the spec

[11:28] <missingthepoint> so if things in the spec are unclear, ask here. asking when you find the spec unclear is helpful.

[11:28] <missingthepoint> does that help?

[11:30] <JimmyZ> missingthepoint++, that's very helpful.

[11:34] <JimmyZ> missingthepoint: HOW function and method are referred to at S02 and S12, I don't know where there are to be added.

[11:34] <missingthepoint> JimmyZ: I could be wrong, but I don't think "HOW(Str).methods" is meant to work.

[11:35] <JimmyZ> missingthepoint: It's from S02.

[11:35] <missingthepoint> ah, you are right :)

[11:36] <JimmyZ> Every object supports a HOW function/method that returns the metaclass instance managing it, regardless of whether the object is defined: 

[11:36] *** ssm joined
[11:37] <JimmyZ> missingthepoint: And it lost tests.

[11:37] <JimmyZ> rakudo: WHICH(Str).say;

[11:37] <p6eval> rakudo 24b26a: OUTPUT¬´Could not find non-existent sub WHICH‚ê§¬ª

[11:37] <JimmyZ> rakudo: HOW(Str).say;

[11:37] <p6eval> rakudo 24b26a: OUTPUT¬´Str()‚ê§¬ª

[11:38] <JimmyZ> rakudo: WHO(Str).say;

[11:38] <p6eval> rakudo 24b26a: OUTPUT¬´Could not find non-existent sub WHO‚ê§¬ª

[11:39] <JimmyZ> seems that there is only HOW supported by S02.

[11:40] <missingthepoint> JimmyZ: i'd put tests in S12-introspection/meta-class.t

[11:41] <JimmyZ> rakudo: Str.methods('').say;

[11:41] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'methods' not found for invocant of class ''‚ê§¬ª

[11:41] <JimmyZ> rakudo: Str.methods().say;

[11:41] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'methods' not found for invocant of class ''‚ê§¬ª

[11:41] <JimmyZ> missingthepoint++

[11:42] *** ihrd joined
[11:51] *** meppl joined
[11:58] <Su-Shee> *hihi* obviously, the whole bunch met in szagabs perl 6 workshop ;) http://szabgab.com/blog/2009/08/1249362072.html

[12:01] *** mkfort left
[12:01] *** gabiruh left
[12:01] *** jeekobu left
[12:01] *** clkao left
[12:01] *** dalek left
[12:01] *** Ingmar left
[12:01] <moritz_> I'd also love it if somebody explained Perl 6 to me

[12:02] <Su-Shee> moritz_: because this is really necessary and not the least bit redundant. :)

[12:03] *** mkfort joined
[12:03] *** dalek joined
[12:03] *** clkao joined
[12:03] *** jeekobu joined
[12:03] *** gabiruh joined
[12:03] *** Ingmar joined
[12:04] <moritz_> Su-Shee: even if I understand it some way already, it's always good to see another perspective on it

[12:04] <missingthepoint> rakudo: BEGIN { if 1 { say 'begin at the beginning.' } }

[12:04] <p6eval> rakudo 24b26a: OUTPUT¬´begin at the beginning.‚ê§¬ª

[12:05] *** Molaf left
[12:05] *** Molaf joined
[12:05] <Su-Shee> moritz_: well let's infiltrate germany, manipulate the press, take over the software industry and we'll have plenty of workshops attend to. ;)

[12:06] <moritz_> where do you beegin in Perl 6?

[12:06] <moritz_> Su-Shee: good idea :-)

[12:07] *** lisppaste3 joined
[12:07] <Matt-W> Su-Shee: so, an afternoon's work then? :P

[12:07] <Su-Shee> moritz_: well if it's for developers: make a little application containing at least a handful of features of perl 6 in a sensible way.

[12:08] <moritz_> Su-Shee: I should do that; I think my introductions normally are too bottom-up

[12:08] <wayland76> Well, there was this hoopy frood, see, named Perl.  She grew an extra head, and numbered her heads 5 and 6.  When she goes out, she puts a cage over head 6 and disguises it as a Parrot :)

[12:08] <Su-Shee> Matt-W: well moritz wrote _the_ german perl 6 article series and I write for the same publisher for 10 years now, so the press manipulation thingie is actually for real (it press that is.. :)

[12:08] *** ruoso joined
[12:08] *** JimmyZ left
[12:09] <moritz_> but writing theses articles was not a matter of an afternoon :-)

[12:09] *** donaldh left
[12:09] <Su-Shee> moritz_: typical thing would be really something like "look, a blog based on Web.pm"

[12:09] <Su-Shee> moritz_: the next will be. or the next after that.

[12:09] *** mkfort left
[12:09] *** gabiruh left
[12:09] *** jeekobu left
[12:09] *** clkao left
[12:09] *** dalek left
[12:09] *** Ingmar left
[12:10] <Su-Shee> moritz_: I usally do something which at least does file i/o, contains some reg ex and manipulates some data in some data structures and has preferably some network connection.

[12:10] *** mkfort joined
[12:10] *** dalek joined
[12:10] *** clkao joined
[12:10] *** jeekobu joined
[12:10] *** gabiruh joined
[12:10] *** Ingmar joined
[12:10] <moritz_> Su-Shee: if it were, I'd dump my current studies and become a writer :-)

[12:10] <Su-Shee> moritz_: no you won't, because you can't pay your rent from writing. ;)

[12:11] <moritz_> Su-Shee: if I can write such an article series in one afternoon, I can :-)

[12:11] <Su-Shee> moritz_: heise is the only one paying that well. and only in print. 

[12:11] <Su-Shee> moritz_: all others pay for 4 pages what heise does for one. ;)

[12:12] <moritz_> even if the others pay only 1/4, it's enough money for half a days work

[12:12] *** KyleHa joined
[12:13] <Su-Shee> moritz_: writing is more of a karma payment in "recognition" currency. ;)

[12:14] *** huf left
[12:14] *** estrabd left
[12:14] *** nnunley left
[12:14] *** c1sung_ left
[12:14] *** payload1 left
[12:14] *** charsbar left
[12:14] *** integral left
[12:14] *** fridim_ left
[12:14] *** mkfort left
[12:14] *** gabiruh left
[12:14] *** jeekobu left
[12:14] *** clkao left
[12:14] *** dalek left
[12:14] *** Ingmar left
[12:14] <moritz_> :-)

[12:14] <Su-Shee> back to perl 6 workshops and examples: please please please make examples real world programming examples. not some "funny" metaphor of animal classes or cartoon characters or something like that.

[12:15] *** mkfort joined
[12:15] *** dalek joined
[12:15] *** clkao joined
[12:15] *** jeekobu joined
[12:15] *** gabiruh joined
[12:15] *** Ingmar joined
[12:15] <moritz_> It would be cool if there was some kind of theme that most of the documentation adheres to

[12:15] <wayland76> rakudo: take "drugs"

[12:15] <p6eval> rakudo 24b26a: OUTPUT¬´take without gather‚ê§¬ª

[12:15] <moritz_> something like "writing a mail user agent"

[12:15] <wayland76> rakudo: gather { take "drugs" }

[12:15] <p6eval> rakudo 24b26a:  ( no output )

[12:16] *** fridim_ joined
[12:16] *** payload1 joined
[12:16] *** c1sung_ joined
[12:16] *** charsbar joined
[12:16] *** huf joined
[12:16] *** integral joined
[12:16] *** estrabd joined
[12:16] *** nnunley joined
[12:16] <Su-Shee> moritz_: yeah, I'd love that. and if you go for a new programming language, you'd have a nice comparison of the differences in styles and "how to actually do it"

[12:16] *** mkfort left
[12:16] *** gabiruh left
[12:16] *** jeekobu left
[12:16] *** clkao left
[12:16] *** dalek left
[12:16] *** Ingmar left
[12:16] *** clkao joined
[12:16] *** gabiruh joined
[12:16] *** jeekobu joined
[12:16] *** Ingmar joined
[12:17] <Su-Shee> moritz_: I think mvc web frameworks are right now the common example. ;))

[12:17] <ruoso> g'morning!

[12:17] <wayland76> ruoso: o/

[12:18] * ruoso waits anxiously for being able to use custom grammars in rakudo, so Faz can have a syntax sugar...

[12:18] *** takadonet joined
[12:19] <takadonet> morning all

[12:19] <moritz_> Su-Shee: I think an MVC framework is too web centric, and we don't want the impression that perl 6 is "just a web language"

[12:19] <wayland76> takadonet: Good evening (I'm in Australia :) )

[12:20] <ruoso> moritz_, MVC is not web-centric at all

[12:20] <ruoso> moritz_, most mvc frameworks only work in the web... but frameworks like Catalyst can be used to a large variety of things

[12:21] <ruoso> I, for instance, have used it to write a command-line application, a XMPP client and a Gtk app

[12:22] <Su-Shee> moritz_: it's one example of many possible. mr shee for example doesn't care for web even though he's a heavy perl user - he uses still CGI.pm. BUT: he does Perl stuff like the filesystem written in perl by the Movable Type fellows and stuff like that. so, essentially you can take your pick as long as it's a usable project

[12:23] <Su-Shee> moritz_: make it a spam filter with grammars. or "DNS server in perl in 20 lines" or something.

[12:23] * wayland76 waits for grammars too :)

[12:24] <Matt-W> grammars! grammars!

[12:24] * Matt-W wants Damian to be able to do Perligata for Perl 6

[12:24] <wayland76> Both my grammas are dead :)

[12:25] <moritz_> ok... so how do write a source filter in Perl 6? *g*

[12:25] * moritz_ runs

[12:25] <Su-Shee> (is there something like a pun tip jar in english? ;)

[12:26] <Matt-W> moritz_: you replace the grammar!

[12:26] <moritz_> are you referring to the "schlechte-wortspiel-kasse"? :-)

[12:26] <moritz_> (that was to Su-Shee)

[12:26] <Su-Shee> kalauer kasse :)

[12:26] <moritz_> :)

[12:26] <moritz_> Matt-W: can I do that with s///?

[12:27] <wayland76> I always ignore pun tip jars

[12:27] <Su-Shee> wayland76: well, for the grammas: PAY UP :)

[12:27] <Matt-W> moritz_: yes, you s/.*/$newgrammar/

[12:27] <Matt-W> and then run make

[12:27] <moritz_> that makes me run

[12:27] <moritz_> or so

[12:27] <Matt-W> :P

[12:27] <Matt-W> well you did ask if you could do it with s///

[12:28] <moritz_> :)

[12:28] * Su-Shee infiltrates perl 6 into germans 2nd largest isp. 

[12:30] *** kcwu left
[12:30] *** kcwu joined
[12:30] <moritz_> I guess t-online is the largest?

[12:32] <Su-Shee> it's a little difficult to count - t-online has the largest dialip customer base ( I think ), but not the largest number of domains or web hosting foobars or dedicated servers or something like that.

[12:32] <Su-Shee> dialup.

[12:33] <moritz_> why can't anything be easy? :)

[12:34] <Matt-W> because then the world would be boring

[12:34] <wayland76> And people wouldn

[12:34] <wayland76> 't pay us to do things

[12:35] *** M_o_C joined
[12:36] <Su-Shee> yesterday I was thinking that one should start with hooking the image magick folks on perl 6. 

[12:40] <moritz_> it might make sense to wait a bit until the parrot NCI is better documented

[12:41] <wayland76> Or ncigen is completed

[12:42] <moritz_> "completed" - there is that nasty word again :)

[12:42] <wayland76> Well, maybe mo' bettah instead

[12:44] <Su-Shee> my thinking was more along the lines of realizing how many projects have to be convinced over the next 2 years to port their stuff to p6.

[12:44] <missingthepoint> (sorry to butt in: is there a version of Test.pm that has three-arg is()?)

[12:44] <moritz_> rakudo: use Test; plan 1; is 1, 1, "yes, Sir";

[12:44] <p6eval> rakudo 24b26a: OUTPUT¬´1..1‚ê§ok 1 - yes, Sir‚ê§¬ª

[12:45] <missingthepoint> moritz_: sorry, it's been a long day :)

[12:45] *** ihrd left
[12:45] <moritz_> missingthepoint: did you mean those three args?

[12:45] <missingthepoint> yep

[12:45] <moritz_> good.

[12:46] <moritz_> I thought maybe you meant cmp_ok instead (implemented in pugs' Test.pm at least) which takes three args for comparison, and an optional description

[12:46] *** skids_ joined
[12:46] <moritz_> pugs: use Test; plan 1; cmp_ok 1, &infix:<==>, 1, 'descr';

[12:46] <p6eval> pugs: OUTPUT¬´pugs: *** Unsafe function 'use' called under safe mode‚ê§    at /tmp/IJbC6FJyAK line 1, column 1‚ê§¬ª

[12:46] <missingthepoint> nope, just blind :)

[12:46] <missingthepoint> but that cmp_ok() looks very cool.

[12:46] <moritz_> as if 'use' was a function... :-)

[12:47] <moritz_> it looks even cooler when you know that you can write &infix:<==> as &[==] today

[12:47] <moritz_> (though NYI in rakudo)

[12:47] * missingthepoint is impressed

[12:48] <wayland76> Question -- is there something to do require_ok in p6?

[12:48] <missingthepoint> Su-Shee: sorry to disrupt your conversation! :|

[12:49] <moritz_> sub require_ok($module, $descr?) { lives_ok { require $module }, $descr};

[12:49] <moritz_> missingthepoint: Perl 6 is never off topic here, so no need to apologize

[12:49] <moritz_> also we're usually multi-threaded in here :-)

[12:49] <wayland76> Su-Shee: Maybe we have to convice lots, but when I passed through gtk-perl about 6 months ago, they sounded convinced, but waiting for things to be ready :)

[12:51] <Su-Shee> wayland76: maybe you should show up again. :)

[12:51] <wayland76> Now I'm wondering if an IRC client could be designed that would help keep track of separate threads in a channel :)

[12:52] <wayland76> Su-Shee: As soon as things are ready :)

[12:52] *** SmokeMachine joined
[12:52] <moritz_> wayland76: I've thought about that a bit, too

[12:52] <moritz_> wayland76: but I didn't come to a positive conclusion

[12:53] <wayland76> I think it'd be possible if people were willing to agree on a standard for threading

[12:53] <wayland76> For example....

[12:53] <wayland76> thread1& So I think NCI is important

[12:53] <Su-Shee> well with the release of rakudo, I was thinking to open up an perl6-users channel.

[12:54] <wayland76> thread2& So I also think Test.pm is important

[12:54] <wayland76> Su-Shee: This *is* the perl6-users channel :)

[12:55] <moritz_> Su-Shee: I think it doesn't make sense to separate developers from users early

[12:55] <wayland76> Basically, I think we should keep things here until the devs decide they need a #perl6-dev channel

[12:55] <Su-Shee> wayland76: or that way around. :)

[12:55] <moritz_> only when the user's traffic becomes too large we should separate

[12:56] <Su-Shee> (you all realize that I totally count on the success ;)

[12:56] <wayland76> From an Australian point of view, the problem is that it's dead in the middle of the day, not that there's too much traffic :)

[12:58] *** dakkar joined
[12:58] <Su-Shee> wayland76: well, infiltrate australia ;)

[12:59] <wayland76> Well, Australia's pretty empty :)

[12:59] <wayland76> If I could get a kangaroo to use Perl, we'd have 8 Perl people in Australia instead of 7 :)

[12:59] <wayland76> (Ok I exaggerate :) )

[13:00] <wayland76> We seem to have 3 P6 people in Australia now

[13:00] <missingthepoint> night all, I badly need sleep :)

[13:00] <Su-Shee> wayland76: wasn't damian conway australian? 

[13:00] <wayland76> (Assuming we count bacek, who is really a #parrot person, I think)

[13:01] <wayland76> Yes, Damian is, I gues I mean #perl6 people instead of p6 people :)

[13:01] *** missingthepoint left
[13:01] <moritz_> hey, he was here, like, once

[13:01] <wayland76> Actually, I'm very much in agreement with missingthepoint :)

[13:02] <Su-Shee> (that's why australia hasn't more perl 6 people. they all sleep ;)

[13:02] <wayland76> Yes, but being here once doesn't solve the "dead in the middle of the day" problem :)

[13:02] <wayland76> I think if I didn't sleep for a long enough period of time, Australia would have one less #perl6 person :)

[13:03] <wayland76> Anyway, merry Christmas(*) to all, and to all a good night         (*) But we're not saying Christmas which year

[13:03] <wayland76> afk&

[13:04] <Su-Shee> n8 :)

[13:09] *** PZt left
[13:09] *** adhoc left
[13:09] *** PerlJam left
[13:09] *** elmex left
[13:09] *** Molaf left
[13:09] *** frettled left
[13:09] *** patmat left
[13:09] *** [particle] left
[13:09] *** s1n left
[13:09] *** athomason left
[13:09] *** ilbot2 left
[13:09] *** LCamel left
[13:09] *** rbuels left
[13:09] *** Tene left
[13:09] *** arthur-_ left
[13:09] *** krunen left
[13:09] *** BinGOs left
[13:09] *** nnunley left
[13:09] *** huf left
[13:09] *** estrabd left
[13:09] *** integral left
[13:09] *** payload1 left
[13:09] *** c1sung_ left
[13:09] *** fridim_ left
[13:09] *** charsbar left
[13:09] *** Ingmar left
[13:09] *** meppl left
[13:09] *** felipe left
[13:09] *** Hale-Bopp left
[13:09] *** ascent_ left
[13:09] *** jhelwig left
[13:09] *** buubot left
[13:09] *** eiro left
[13:09] *** scrottie left
[13:09] *** hexmode left
[13:09] *** he_ left
[13:09] *** ibrown left
[13:09] *** bloonix_ left
[13:09] *** mdxi left
[13:09] *** sdgvf left
[13:09] *** Grrrr left
[13:09] *** pjcj left
[13:09] *** cosimo left
[13:09] *** itz_ left
[13:09] *** edenc left
[13:09] *** Lorn left
[13:09] *** c9s left
[13:09] *** sunnavy left
[13:09] *** bigpresh_ left
[13:09] *** kolibrie left
[13:09] *** solarion left
[13:09] *** andreasg_ left
[13:09] *** PacoLinux left
[13:09] *** christine left
[13:09] *** Matt-W left
[13:09] *** cognominal left
[13:13] <takadonet> hmmm

[13:20] *** Ingmar joined
[13:20] *** nnunley joined
[13:20] *** estrabd joined
[13:20] *** integral joined
[13:20] *** huf joined
[13:20] *** charsbar joined
[13:20] *** c1sung_ joined
[13:20] *** payload1 joined
[13:20] *** fridim_ joined
[13:20] *** meppl joined
[13:20] *** felipe joined
[13:22] *** Grrrr joined
[13:22] *** pjcj joined
[13:22] *** sdgvf joined
[13:22] *** sunnavy joined
[13:22] *** itz_ joined
[13:22] *** mdxi joined
[13:22] *** bloonix_ joined
[13:22] *** bigpresh_ joined
[13:22] *** ibrown joined
[13:22] *** Lorn joined
[13:22] *** he_ joined
[13:22] *** edenc joined
[13:22] *** cosimo joined
[13:22] *** c9s joined
[13:22] *** scrottie joined
[13:22] *** hexmode joined
[13:24] *** sri_kraih joined
[13:25] *** cognominal joined
[13:25] *** Matt-W joined
[13:25] *** christine joined
[13:28] *** szbalint joined
[13:30] *** krunen joined
[13:30] *** BinGOs joined
[13:30] *** [particle] joined
[13:30] *** Molaf joined
[13:30] *** athomason joined
[13:30] *** arthur-_ joined
[13:30] *** s1n joined
[13:30] *** LCamel joined
[13:30] *** frettled joined
[13:30] *** rbuels joined
[13:30] *** ilbot2 joined
[13:30] *** Tene joined
[13:30] *** patmat joined
[13:30] *** irc.freenode.net sets mode: +o [particle]

[13:30] *** buubot joined
[13:30] *** jhelwig joined
[13:30] *** eiro joined
[13:30] *** ascent_ joined
[13:30] *** Hale-Bopp joined
[13:30] *** solarion joined
[13:30] *** andreasg_ joined
[13:30] *** PacoLinux joined
[13:30] *** kolibrie joined
[13:30] *** PerlJam joined
[13:30] *** adhoc joined
[13:30] *** PZt joined
[13:30] *** elmex joined
[13:30] *** irc.freenode.net sets mode: +o PerlJam

[13:34] *** TimToady_ is now known as TimToady

[13:35] <frettled> Nice with live rakudo hacking during the talk, hee-hee.

[13:36] <TimToady> anyone want a commit bit? :)

[13:37] <frettled> Sure.

[13:37] <TimToady> you don't have one?

[13:37] *** sri_kraih_ left
[13:37] <frettled> Nopes, I've managed to keep my soul in merely 41 pieces so far.

[13:37] <frettled> Please take #42.

[13:37] <TimToady> then /msg me your email and preferred nick

[13:37] *** moritz_ sets mode: +o TimToady

[13:37] <TimToady> (svn nick)

[13:38] <Su-Shee> lord frettled voldemort. ;)

[13:38] <frettled> hehe

[13:38] <moritz_> don't use '-' in nick names, the svn bot doesn't like those

[13:38] <moritz_> which is why it doesn't report any commits by Su-Shee++, I guess

[13:39] <TimToady> sent

[13:39] <Su-Shee> moritz_: bad nick, bad karma. :)

[13:39] <frettled> thanks!

[13:39] <TimToady> it's customary to add yourself to AUTHORS as a first test commit

[13:39] <frettled> Hmm.  Now I just need to figure out why I can't get to Gmail, haha.

[13:40] *** molaf_x joined
[13:43] <frettled> Yes, the distinction between "your last programming language" and "the last programming language you ever want to learn" signify different paradigms in optimism.

[13:43] <Su-Shee> *hihi* :))

[13:43] <moritz_> so, what kind of life rakudo hacking happened?

[13:44] <TimToady> I think he demoed adding a .end method

[13:44] <TimToady> but I was busy adding a commit bit :)

[13:44] <dakkar> yes, Any::end was moved from PIR to Perl 6

[13:44] <moritz_> so adding things to the setting?

[13:45] <dakkar> yes

[13:45] <moritz_> nice

[13:45] <dakkar> and the tests passed :)

[13:45] *** bionoid joined
[13:47] <frettled> He'll commit in a bit.

[13:47] <frettled> (a ha ha)

[13:49] <szbalint> jonathan++ talking now :)

[13:50] <moritz_> jnthn++ even :-)

[13:52] <szbalint> heh, I'm too used to irc.perl.org :)

[13:53] <frettled> pmichaud++, btw, and again for having #perl6 open ;)

[13:54] <TimToady> audreyt++ for the original #perl6 bootstrap

[13:57] <TimToady> we still remember, we who dwell / in this dark land beneath the trees, / thy moonlight on the western seas...

[13:59] <KyleHa> How do I do a symbolic reference to a sub?  sub foo { 'x' }; my $s = 'foo';  is ::$s(), 'x', 'works?'

[14:00] <TimToady> &$s()

[14:00] <TimToady> or &($s)()

[14:00] <TimToady> oh, wait, symbolic

[14:01] <TimToady> ::($s)()

[14:01] <PerlJam> KyleHa: pretty sure rakudo doesn't grok it, no matter how it's spelt.

[14:01] <[particle]> &{"$s"}()

[14:01] <TimToady> maybe &::($s)()

[14:01] <TimToady> std: &{"$s"}()

[14:01] <p6eval> std 27866: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Obsolete use of &{"$s"}; in Perl 6 please use &("$s") instead at /tmp/F0KRaAw1QW line 1:‚ê§------> [32m&{"$s"}[33m‚èè[31m()[0m‚ê§FAILED 00:03 54m‚ê§¬ª

[14:01] <[particle]> oot!

[14:02] <[particle]> std: &::($s)()

[14:02] <p6eval> std 27866: OUTPUT¬´Potential difficulties:‚ê§  Variable $s is not predeclared at /tmp/xIZoBeiTHX line 1:‚ê§------> [32m&::($s[33m‚èè[31m)()[0m‚ê§ok 00:02 37m‚ê§¬ª

[14:03] <KyleHa> Looks like &("$s")() is the winner, if STD is to be believed.

[14:03] <frettled> yikes

[14:05] <TimToady> useless use of quotes, actually

[14:05] <ruoso> std: my $s = 'foo'; sub foo { }; ::($s)()

[14:05] <p6eval> std 27866: OUTPUT¬´ok 00:03 37m‚ê§¬ª

[14:05] <ruoso> I think the prefix & is not really needed if you really want to invoke it

[14:05] <TimToady> but &() won't do symbolic

[14:05] <TimToady> only actual code objects

[14:06] <TimToady> in theory ::($s) 'x' should work

[14:06] <TimToady> std: ::($s) 'x'

[14:06] <ruoso> exactly... you only need to use the contextualizer when you might require a cast

[14:06] <p6eval> std 27866: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused (two terms in a row?) at /tmp/6AdhYAvxAu line 1:‚ê§------> [32m::($s) [33m‚èè[31m'x'[0m‚ê§    expecting any of:‚ê§ bracketed infix‚ê§  infix stopper‚ê§    standard stopper‚ê§ statement modifier loop‚ê§  terminator‚ê§Other potential difficulties:‚ê§ 

[14:06] <p6eval> ..Variable $s i‚Ä¶

[14:07] <TimToady> it's not handling ::($s) like a full-fledged name for some reason

[14:07] <TimToady> well, probably assuming it's a type, I suppose

[14:07] <ruoso> TimToady, last time I checked it was parsing it in a pretty confusing way

[14:07] <TimToady> there were some LTM workarounds in that spot, yes

[14:08] <KyleHa> OK, now I'm going with ::(

[14:08] <KyleHa> Oops.

[14:08] <TimToady> but it's a good question whether it should assume ::($s) is a type or a function name

[14:08] <TimToady> can't assume both

[14:08] <KyleHa> That's ::($s)() to call.

[14:08] <TimToady> std: ::($s)()

[14:08] <p6eval> std 27866: OUTPUT¬´Potential difficulties:‚ê§  Variable $s is not predeclared at /tmp/hnRqzKZqhH line 1:‚ê§------> [32m::($s[33m‚èè[31m)()[0m‚ê§ok 00:02 37m‚ê§¬ª

[14:08] <TimToady> well, it liked it, kinda

[14:09] *** alester joined
[14:09] <ruoso> TimToady, ::($s)() makes the invocation explicit

[14:09] <ruoso> making it easier to the parser, i guess

[14:10] <KyleHa> So, could I use this to turn a name into a code reference?  my $code = &{ ::( $name ) };

[14:11] <ruoso> std: my $s = 'foo'; sub foo {}; my $code = ::($s); $code === &foo; # same object

[14:11] <p6eval> std 27866: OUTPUT¬´ok 00:04 55m‚ê§¬ª

[14:11] <ruoso> KyleHa, you don't need the outer &{ }

[14:11] <TimToady> it forces initial :: to parse as a term

[14:11] <KyleHa> Cool, thanks ruoso++

[14:12] <ruoso> TimToady, or am I wrong and that would make a call?\

[14:12] <frettled> hmm, I think this answers a question I forgot to ask about regarding one of my blog entries from NPW ...

[14:12] <TimToady> anything following by () is going to try to call the thing

[14:12] <TimToady> even a type

[14:12] <TimToady> that's how we get Str()

[14:12] <ruoso> TimToady, I mean without the () in the end

[14:12] <TimToady> probably not

[14:12] <ruoso> TimToady, look the last snippet I sent to std

[14:12] *** lumi left
[14:13] <TimToady> I would think that would match

[14:13] * ruoso too

[14:14] <frettled> So, to do a Schwartzian transform, this would be ...

[14:14] <ruoso> frettled, schwartzian transform is part of Perl 6 core now

[14:14] <ruoso> just use the sort sub with only one parameter

[14:15] *** donaldh joined
[14:15] <frettled> @sorted = @unsorted.sort: { ::(  something wonderful ) }

[14:15] <lambdabot> Unknown command, try @list

[14:15] <frettled> woops.

[14:15] * frettled forgot lambdabot

[14:16] <literal> alester: ping

[14:16] <frettled> ruoso: I've used the specialized example with .uc, but not with a symbolic code reference, which is what the ST is all about.

[14:16] <alester> yes

[14:16] <alester> ?

[14:16] * frettled meant to look into this in April, but I forgot

[14:16] <KyleHa> spec tests have &::($name)(), now that I look.

[14:17] <Juerd> ST has nothing to do with symbolic references afaik

[14:17] <literal> alester: made a pull request for you on github regarding vim-perl

[14:17] <ruoso> KyleHa, that's just more explicit

[14:17] <alester> I saw.

[14:17] <ruoso> frettled, is it?

[14:18] *** JimmyZ joined
[14:19] <JimmyZ> Is november wiki any spec or roadmap?

[14:19] <ruoso> TimToady, the ::($s) syntax is only valid for subs and types, right?

[14:19] <ruoso> you still need to use MY::<$foo> in order to access other cariables

[14:19] <ruoso> s/car/var/

[14:19] <JimmyZ> Ts there any roadmap or spec for November?

[14:20] <JimmyZ> s/Ts/Is

[14:20] <KyleHa> std: sub foo { 'I am foo' }; my $name = 'foo'; say ::$name();

[14:20] <p6eval> std 27866: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused (two terms in a row?) at /tmp/YqQM6sgg96 line 1:‚ê§------> [32m{ 'I am foo' }; my $name = 'foo'; say ::[33m‚èè[31m$name();[0m‚ê§    expecting any of:‚ê§   POST‚ê§   bracketed infix‚ê§    infix stopper‚ê§    morename‚ê§       postfix‚ê§ 

[14:20] <p6eval> ..postfix_prefix_meta_operator‚ê§       standa‚Ä¶

[14:20] <alester> literal: Did you note the changes in the changelog?

[14:20] <TimToady> ::() is supposed to allow any indirect identifiers or even names, reparsing :: in the string

[14:20] <JimmyZ> missingthepoint: hello

[14:21] <KyleHa> std: sub foo { 'I am foo' }; my $name = 'foo'; say ::($name)();

[14:21] <literal> alester: ah, didn't notice there's a changelog

[14:21] <ruoso> TimToady, hmm... so it depends on the compiler environment?

[14:21] <p6eval> std 27866: OUTPUT¬´ok 00:02 37m‚ê§¬ª

[14:21] <alester> There might not be one, actually. :-)

[14:21] <literal> alester: I'll add an entry there

[14:21] <alester> Start one if not.

[14:21] <literal> well, there's a Changes file

[14:21] <alester> there ya go.  Thanks.

[14:21] <literal> I see you have stuff about q() ops there

[14:22] <alester> ok

[14:22] <literal> I think that might all be fixed by the change I just made (well, mauke did it)

[14:22] <alester> good.

[14:22] <alester> just note it in there.

[14:22] <literal> will do

[14:22] <ruoso> std: my $s = '$*foo'; say ::($s); # TimToady, does that work?

[14:22] <alester> and I'll pull it when you've done so.  thanks.

[14:22] <p6eval> std 27866: OUTPUT¬´ok 00:02 37m‚ê§¬ª

[14:23] <TimToady> probably not

[14:24] <TimToady> MY::{$var} doesn't do any parsing of $var

[14:24] <ruoso> TimToady, ah... so it isn't really "reparsing" 

[14:24] <TimToady> it's just a hash key

[14:24] <TimToady> the ::() form is supposed to reparse, but is probably not expecting another sigil

[14:24] <ruoso> right... but the subroutines aren't stored without the &

[14:24] <frettled> Juerd, ruoso: well, yes, as I've understood it, an ST allows for an arbitrary function to be applied as a part of the transform.

[14:25] <Juerd> Arbitrary doesn't have to mean symbolic

[14:25] <TimToady> any unary function

[14:25] <ruoso> std: my $s = '$s'; say ::($s); # TimToady, what about that?

[14:25] <p6eval> std 27866: OUTPUT¬´ok 00:02 37m‚ê§¬ª

[14:25] <TimToady> I don't think so

[14:26] <ruoso> right... so ::() is specific to subs and types

[14:26] <ruoso> you need to use MY::{$s} in order to access other variables

[14:26] <TimToady> %::($name)

[14:26] <TimToady> so no

[14:27] *** rfordinal joined
[14:27] <ruoso> you mean the prefix sigil defines the sigil of the actual variable?

[14:27] <TimToady> most places you can put an identifier, you can put ::()

[14:27] <TimToady> (but not all)

[14:28] <ruoso> so...

[14:28] <TimToady> and substitute one or more identifiers separated with ::

[14:28] <ruoso>  my %a; my $s = 'a'; say %::($s).keys 

[14:28] <ruoso> TimToady, I really thought about it as a regular prefix, as in %(::($s))

[14:29] *** cdarroch joined
[14:29] <TimToady> that doesn't make sense to me

[14:29] <ruoso> std: my %a; my $s = 'a'; say %(::($s)).keys 

[14:29] <p6eval> std 27866: OUTPUT¬´ok 00:02 37m‚ê§¬ª

[14:29] <TimToady> %() requires hard ref, and ::() provides a string to interpolate into a name

[14:30] <TimToady> semantic error

[14:30] <TimToady> like

[14:30] <TimToady> std: %("foo")

[14:30] <p6eval> std 27866: OUTPUT¬´ok 00:03 36m‚ê§¬ª

[14:30] *** araujo joined
[14:31] <ruoso> TimToady, so %::("foo") is semantically the same as %foo

[14:31] <TimToady> correct

[14:32] <ruoso> so I guess we need the & in &::($s) 

[14:32] <TimToady> it's name interpolation rather than string interpolation

[14:32] <araujo> morning

[14:32] <TimToady> probably

[14:32] <ruoso> but the variable name contains the sigil....

[14:32] *** dakkar left
[14:33] <TimToady> fine, it's reinterpreting the name after the interpolation

[14:33] <TimToady> unlike MY::{$var}

[14:33] <ruoso> right... so the expression is sigil+"identifier interpolation"

[14:34] <frettled> *confused*  :)

[14:34] <ruoso> which means that a bare ::($s) can only match a type

[14:34] <TimToady> ::("pi")

[14:34] <TimToady> biab &

[14:34] <ruoso> std: my $s = 'foo'; sub foo { }; say &::($s)

[14:34] <p6eval> std 27866: OUTPUT¬´ok 00:03 37m‚ê§¬ª

[14:35] <ruoso> std: my $s = 'foo'; sub foo { }; say &::($s) 'x'

[14:35] <p6eval> std 27866: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused (two terms in a row?) at /tmp/TFxXE7AVpL line 1:‚ê§------> [32mmy $s = 'foo'; sub foo { }; say &::($s) [33m‚èè[31m'x'[0m‚ê§    expecting any of:‚ê§        bracketed infix‚ê§  infix stopper‚ê§    standard stopper‚ê§ statement modifier loop‚ê§ 

[14:35] <p6eval> ..terminator‚ê§FAILED 00:02‚Ä¶

[14:35] <ruoso> TimToady, right... but "pi" in your example is already special, isn't it? I mean... it isn't a regular sub... or is it?

[14:38] <frettled> ah, low battery power, the show stopper of the millennium.

[14:38] <TimToady> values like pi are parsed like types, but are not types

[14:38] <TimToady> and all enums, for example

[14:39] <TimToady> std: True 'x'

[14:39] <p6eval> std 27866: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused (two terms in a row?) at /tmp/X8hzn3cjNL line 1:‚ê§------> [32mTrue [33m‚èè[31m'x'[0m‚ê§    expecting any of:‚ê§   bracketed infix‚ê§  infix stopper‚ê§    standard stopper‚ê§ statement modifier loop‚ê§  terminator‚ê§FAILED 00:02 36m‚ê§¬ª

[14:39] <ruoso> TimToady, right... it means it is installed in the lexpad without the sigil

[14:39] <JimmyZ> rakudo: '\x[0041,0300]'.say;

[14:39] <ruoso> so it fits

[14:39] <p6eval> rakudo 24b26a: OUTPUT¬´\x[0041,0300]‚ê§¬ª

[14:39] <JimmyZ> rakudo: '\x[0041,0300]'.codes

[14:39] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'codes' not found for invocant of class 'Str'‚ê§¬ª

[14:40] <ruoso> rakudo: "\x[0041,0300]".say

[14:40] <p6eval> rakudo 24b26a: OUTPUT¬´AÃÄ‚ê§¬ª

[14:40] <ruoso> rakudo: "\x[0041,0300]".codes

[14:40] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'codes' not found for invocant of class 'Str'‚ê§¬ª

[14:40] *** justatheory joined
[14:43] <JimmyZ> rakudo: '\x[0041,0300]'.graphs

[14:43] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'graphs' not found for invocant of class 'Str'‚ê§¬ª

[14:43] <JimmyZ> rakudo: '\x[0041,0300]'.graphs

[14:43] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'graphs' not found for invocant of class 'Str'‚ê§¬ª

[14:43] <JimmyZ> rakudo: '\x[0041,0300]'.chars

[14:43] <p6eval> rakudo 24b26a:  ( no output )

[14:43] <JimmyZ> rakudo: '\x[0041,0300]'.chars.say

[14:43] <ruoso> JimmyZ, you probably want to use single quotes, anyway

[14:43] <p6eval> rakudo 24b26a: OUTPUT¬´13‚ê§¬ª

[14:44] <ruoso> er... double quotes, I mean

[14:44] <ruoso> rakudo: "\x[0041,0300]".chars.say

[14:44] <JimmyZ> rakudo: \x[0041,0300]".chars.say

[14:44] <p6eval> rakudo 24b26a: OUTPUT¬´2‚ê§¬ª

[14:44] <p6eval> rakudo 24b26a: OUTPUT¬´Leading 0 does not indicate octal in Perl 6‚ê§Leading 0 does not indicate octal in Perl 6‚ê§Statement not terminated properly at line 2, near "\".chars.sa"‚ê§in Main (src/gen_setting.pm:3363)‚ê§¬ª

[14:44] <JimmyZ> rakudo: \x[0041,0300]".graghs

[14:44] <p6eval> rakudo 24b26a: OUTPUT¬´Leading 0 does not indicate octal in Perl 6‚ê§Leading 0 does not indicate octal in Perl 6‚ê§Statement not terminated properly at line 2, near "\".graghs"‚ê§in Main (src/gen_setting.pm:3363)‚ê§¬ª

[14:44] <JimmyZ> rakudo: "\x[0041,0300]".graghs

[14:44] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'graghs' not found for invocant of class 'Str'‚ê§¬ª

[14:45] <JimmyZ> rakudo: "\x[0041,0300]".graphs

[14:45] <p6eval> rakudo 24b26a: OUTPUT¬´Method 'graphs' not found for invocant of class 'Str'‚ê§¬ª

[14:45] <ruoso> rakudo: say Str.^methods(:local).map: { ~$_ }

[14:45] <p6eval> rakudo 24b26a: OUTPUT¬´WHICHperlACCEPTSsprintfScalarpredencodesucc‚ê§¬ª

[14:45] <JimmyZ> ruoso: thanks.

[14:46] <ruoso> rakudo: say join ", ", Str.^methods(:local).map: { ~$_ }

[14:46] <p6eval> rakudo 24b26a: OUTPUT¬´WHICH, ACCEPTS, perl, sprintf, Scalar, pred, encode, succ‚ê§¬ª

[14:46] <JimmyZ> rakudo: say join ", ", Str.^methods(:local)

[14:46] <p6eval> rakudo 24b26a: OUTPUT¬´sprintf, Scalar, pred, encode, succ, ACCEPTS, perl, WHICH‚ê§¬ª

[14:48] <JimmyZ> rakudo: my Int $x = undef;

[14:48] <p6eval> rakudo 24b26a:  ( no output )

[14:48] <JimmyZ> rakudo: my int $x = undef;

[14:48] <p6eval> rakudo 24b26a: OUTPUT¬´Malformed declaration at line 2, near "int $x = u"‚ê§in Main (src/gen_setting.pm:3363)‚ê§¬ª

[14:48] <Matt-W> less than awesome error message

[14:49] <JimmyZ> rakudo: my $x = undef;

[14:49] <p6eval> rakudo 24b26a:  ( no output )

[14:49] <JimmyZ> rakudo: "\x[0041,0300]".say;

[14:49] <p6eval> rakudo 24b26a: OUTPUT¬´AÃÄ‚ê§¬ª

[14:50] <JimmyZ> rakudo: "\x[0041,0300]".perl.say;

[14:50] <p6eval> rakudo 24b26a: OUTPUT¬´"AÃÄ"‚ê§¬ª

[14:51] <literal> alester: will this do? http://github.com/hinrik/vim-perl/raw/4467ec9d39583a7b0d36756c0d627f45f75ee73e/Changes

[14:51] <alester> Jeepers, that's fantastic.

[14:52] <literal> excellent

[14:52] *** Psyche^ joined
[14:52] <literal> you can pull, then

[14:52] <alester> it's now on my to-do.  Thanks very much.

[14:52] <literal> ok

[14:52] <alester> I'm thinking of putting it up on CPAN, too.

[14:57] *** MoC` joined
[14:59] *** [ancients] is now known as ancients

[15:09] *** Patterner left
[15:09] *** Psyche^ is now known as Patterner

[15:15] *** M_o_C left
[15:20] *** donaldh left
[15:20] *** donaldh joined
[15:21] *** unitxt joined
[15:36] *** abra joined
[15:38] *** tann_ joined
[15:56] <KyleHa> rakudo: class A { has $.x; method foo { $!x := 42 } }; my $a = A.new; $a.foo; say A.x;

[15:56] <p6eval> rakudo 24b26a: OUTPUT¬´Null PMC access in set_attr_str()‚ê§in method A::foo (/tmp/zzdHd6D5JR:2)‚ê§called from Main (/tmp/zzdHd6D5JR:2)‚ê§¬ª

[15:57] <KyleHa> std: class A { has $.x; method foo { $!x := 42 } }; my $a = A.new; $a.foo; say A.x;

[15:57] <p6eval> std 27866: OUTPUT¬´ok 00:02 37m‚ê§¬ª

[15:58] <KyleHa> rakudo: class A { has $.x; method foo { $!x = 42 } }; my $a = A.new; $a.foo; say A.x;

[15:58] <p6eval> rakudo 24b26a: OUTPUT¬´Use of uninitialized value‚ê§‚ê§¬ª

[15:58] <KyleHa> rakudo: class A { has $.x; method foo { $.x = 42 } }; my $a = A.new; $a.foo; say A.x;

[15:58] <p6eval> rakudo 24b26a: OUTPUT¬´Cannot assign to readonly variable.‚ê§in method A::foo (/tmp/S6o144GLjQ:2)‚ê§called from Main (/tmp/S6o144GLjQ:2)‚ê§¬ª

[16:00] <KyleHa> rakudo: class A { has $.x; method foo { $!x = 42 }; method bar { $!x}; }; my $a = A.new; $a.foo; say A.bar;

[16:00] *** finanalyst left
[16:00] <p6eval> rakudo 24b26a: OUTPUT¬´Null PMC access in type()‚ê§in Main (/tmp/1FoRI0PQ0p:2)‚ê§¬ª

[16:04] *** JimmyZ left
[16:08] *** tann___ joined
[16:08] *** tann_ left
[16:09] *** unitxt left
[16:15] *** tann___ left
[16:20] <Su-Shee> why is there russian in november's CGI.pm? ;)

[16:21] <moritz_> Su-Shee: because we believe in diversity, or so ;-)

[16:21] <moritz_> anyway, all the interesting comments should have an english version, too

[16:22] <PerlJam> Su-Shee: Because we're the starship Enterprise!

[16:22] <MoC`> Should there be any uninteresting comments? :)

[16:22] *** MoC` is now known as M_o_C

[16:23] <moritz_> no, but that doesn't stop them from being there, usuallz

[16:23] <moritz_> s/z/y/

[16:23] <M_o_C> hehe

[16:23] <moritz_> (switching keyboard layouts)--

[16:26] *** payload1 left
[16:39] <Su-Shee> i have a rakudo cgi... jippi. :)

[16:39] <KyleHa> moritz: t/syntax/symbol_table.t says it's obsolete and seems to test some of the same stuff as S02-names/symbolic-deref.t  Can it die?

[16:39] <moritz_> KyleHa: yes

[16:40] <KyleHa> Wow, that was easy.  I was expecting more hemming and hawing for some reason.

[16:40] <PerlJam> KyleHa: we can argue with you if you like

[16:40] <moritz_> I keep these old tests as inspiration of what the new tests might cover

[16:41] <moritz_> when the new tests show some substance (or existence at all)

[16:41] <KyleHa> Perljam: That's a generous offer.  Can I take a raincheck?

[16:41] <moritz_> ... I'm eager with getting rid of the old stuff

[16:41] <KyleHa> Makes sense.

[16:42] <pugs_svn> r27867 | putter++ | [elfparse] Cleanup - unbreak `make check`; use default `perl`; push old std.pm tweaks.

[16:42] <pugs_svn> r27867 | putter++ | Clearing out old directories, I noticed misc/elfish/elfparse's `make check_STD_blue` (build elf using a gimme5 parser) had been left failing in HEAD.  Fixed.

[16:42] <pugs_svn> r27867 | putter++ | IRx1_FromAST2_create.pl: Fixed a staging violation (a literal rx).  `make check` now passes again.

[16:42] <pugs_svn> r27867 | putter++ | pugs_src_perl6/gimme5,pugs_src_perl6/Makefile: Use default perl, not hardwired /usr/local/bin/perl.

[16:42] <pugs_svn> r27867 | putter++ | std.pm,emit5.pm: Old unpushed babysteps towards getting std.pm to run on elf.  Untested but for ./STD_green_run --start=number -e 3 .  ./STD_green_run --start=comp_unit -e 3 fails.

[16:43] <KyleHa> I have a question about the TPF CLA also.  I sent mine in last week.  Will I get an email about that, or what?  How do I know if/when they got it?

[16:44] <moritz_> KyleHa: you'll probably won't get any feedback

[16:44] <moritz_> KyleHa: so you have to nag pmichaud to ask the appropriate people if it arrived...

[16:44] <moritz_> and give you the commit bit if the answer is positive

[16:44] <KyleHa> Can I nag them directly?

[16:44] <moritz_> that's not quite optimal ;)

[16:45] <moritz_> if you know how they are, sure

[16:45] <KyleHa> OK.  Thanks.  I'll see if I can find my nagging hat.

[16:45] <frettled> Here: ^

[16:45] <pugs_svn> r27868 | kyle++ | [t] remove old obsolete and redundant t/syntax/symbol_table.t

[16:46] <moritz_> KyleHa: I just asked in #parrot, maybe they know better

[16:46] <Su-Shee> is there a tar.gz of the exact parrot version the rakudo-chicago release needs?

[16:46] <KyleHa> Thanks, moritz++

[16:46] <moritz_> Su-Shee: yes, it's the 1.4.0 release of parrot...

[16:46] <Su-Shee> moritz_: the exakt 1.4.0? 

[16:46] <moritz_> (url coming)

[16:46] <moritz_> yes

[16:47] <moritz_> ftp://ftp.parrot.org/pub/parrot/releases/stable/1.4.0/parrot-1.4.0.tar.gz

[16:47] <Su-Shee> moritz_: can I plainly stuff it into the rakudo subdir, and do what.. call perl Configure.pl --gen-parrot ./parrot-1.4.0 ?

[16:48] <moritz_> Su-Shee: either just call 'perl Configure.pl --gen-parrot' and let it download it for you (from svn, but same thing)...

[16:48] <Su-Shee> moritz_: there's no svn available on the target host.

[16:48] <moritz_> Su-Shee: or extract it into the parrot/ dir, cd parrot; perl Configure.pl && make

[16:48] <moritz_> then cd ..

[16:48] <moritz_> and perl Configure.pl; make

[16:49] <Su-Shee> ok, try run.

[16:49] <Su-Shee> will all next rakudo release be in sync with a parrot release? or is it accidental?

[16:50] <moritz_> it's intentional

[16:50] <moritz_> planned, even ;-)

[16:50] <moritz_> that's why rakudo release is usually 2 days after parrot release

[16:50] *** kane_ joined
[16:52] <Su-Shee> moritz_: I've done it with --gen-parrot the last few times.

[17:00] *** tann_ joined
[17:00] *** nihiliad joined
[17:03] <Su-Shee> fine. works as well. nice.

[17:06] <Su-Shee> moritz_: it still has to be a parrot subdir and you still can't remove it?

[17:08] *** abra left
[17:09] <moritz_> Su-Shee: correct

[17:09] <Su-Shee> ok. let's see. 

[17:09] <moritz_> Su-Shee: the installable version of the current rakudo is in a branch, and I expect it to be merged before the next release

[17:14] *** justatheory left
[17:16] *** nihiliad left
[17:21] <Su-Shee> where does Configure.pl come from? I usally have Makefile.PL. 

[17:27] *** payload joined
[17:28] *** sparc left
[17:29] *** abra joined
[17:35] <colomon> Hmmm: http://hanekomu.at/blog/perl6/20090804-1708-rakudo_star-perl_6_released_spring_2010.html

[17:42] <Su-Shee> sounds official now :)

[17:43] <PerlJam> except that Rakudo == Perl 6 will now forever be entrenched in people's minds.

[17:43] <Su-Shee> PerlJam: I've realized a few days ago, that I usally actually say "rakudo perl". 

[17:44] <Su-Shee> and not perl six.

[17:44] <Juerd> I've used "Rakudo Perl 6"

[17:45] <Su-Shee> na, too long :)

[17:54] *** unitxt joined
[18:01] <KyleHa> I've always thought Rakudo == Perl 6.

[18:02] <Su-Shee> in principle, there could be other Perl 6s. :)

[18:02] <KyleHa> I learned later that "Perl 6" is really the specification, but I still think of Rakudo as "official".

[18:03] <Su-Shee> I started out with pugs. 

[18:03] <KyleHa> If something comes along more awesome than Rakudo, I'll adjust my attitude then.  8-)

[18:06] *** abra left
[18:11] *** cognominal left
[18:11] *** M_o_C left
[18:14] *** s1n left
[18:14] *** jan_ left
[18:15] *** eiro left
[18:15] *** eiro_ joined
[18:16] <KyleHa> perl6: 'say 1' ~~ /<Perl6::Grammar::TOP>/; say $/.perl;

[18:17] *** s1n joined
[18:17] <p6eval> elf 27868: OUTPUT¬´Global symbol "$_47" requires explicit package name at (eval 125) line 4.‚ê§ at ./elf_h line 5881‚ê§¬ª

[18:17] <p6eval> ..rakudo 24b26a: OUTPUT¬´Method 'item' not found for invocant of class 'Perl6;Grammar'‚ê§¬ª

[18:17] <p6eval> ..pugs: OUTPUT¬´Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {‚ê§    unshift @INC, '/home/evalenv/pugs/perl5/Pugs-Compiler-Rule/lib';‚ê§    unshift @INC, '/home/evalenv/pugs/third-party/Parse-Yapp/lib';‚ê§    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;‚ê§}‚ê§'Pugs::Runtime‚Ä¶

[18:18] *** jan_ joined
[18:19] <tann_> colomon: good to see xmas in spring

[18:21] <tann_> looks like tim bunce and gang are hard at work to get dbdi up and running...would be awesome to interact with dbs in rakudo

[18:22] <Su-Shee> tann_: wow, very cool. that really would be nice. and a great code example.

[18:22] <arthur-_> dbi <3

[18:23] <tann_> mehears, tim chose to go with jdbc classes for dbdi :)

[18:23] <tann_> time to read java docs ;)

[18:24] <Su-Shee> jdbc?

[18:24] *** hercynium joined
[18:24] <tann_> yup

[18:24] <Su-Shee> what's that exactly?

[18:24] <tann_> he decided that in 2004 i hear

[18:25] <tann_> http://www.nntp.perl.org/group/perl.dbdi.dev/2009/07/msg52.html

[18:27] <Su-Shee> tann_: I don't get it. what's this about the java stuff in there?

[18:28] <tann_> apparently, tim thinks jdbc classes/api are sane and would like to adopt 'em for generic db interface on parrot

[18:29] <tann_> maybe, its should be named pdbc instead of dbdi? :)

[18:30] <Su-Shee> does that mean that java is required to run dbi or that the p6 dbi is just modeled after jdbc?

[18:30] <tann_> that's just at db driver level...if we write perl 6 using dbi, we probably won't see those classes/api

[18:31] <tann_> that's just for db driver implementors on parrot/perl 6...we p6 users won't see those things..afaik

[18:31] <Su-Shee> I stupidly expected something similar as today with let's say mysql, postgres, oracle, sqlite drivers and that's it. 

[18:32] <Su-Shee> tann_: and people who are not users but install the stuff? 

[18:32] <tann_> those are on top of dbdi, methinks

[18:33] <Su-Shee> well that sounds scary. :)

[18:33] *** ancients left
[18:33] <tann_> dbdi is meant to be generic enough so that *all* languages targeting parrot will be able to use its api (or classes)

[18:34] <Su-Shee> that I understand and expect.

[18:34] *** broquaint joined
[18:34] *** ancients joined
[18:35] <pugs_svn> r27869 | kyle++ | [t/spec] Tests for RT #64874

[18:35] <tann_> dbi api is probably changed as well...  for example, selectall_arrayref ....no refs in p6 anymore :)

[18:36] * ruoso was considering re-writing the XML::Grammar as a SAX parser...

[18:36] * ruoso is lacking resources...

[18:37] * arthur-_ want dbic in rakudo

[18:37] <tann_> dbic will be much nicer in p6/rakudo ;)

[18:39] <Su-Shee> "are we there yet? can I have it now? is it done already?" :)

[18:41] <tann_> Su-Shee: contrary to what TimToady's sage words, patience is one of the virtues of a programmer :P

[18:43] <Su-Shee> I know, but with a real release announcement and all, I'm really excited. 

[18:47] *** rfordinal left
[18:47] <ruoso> rakudo: say "\xD"

[18:47] <p6eval> rakudo 24b26a: OUTPUT¬´

[18:47] <ruoso> rakudo: say "\xA"

[18:47] <p6eval> rakudo 24b26a: OUTPUT¬´‚ê§‚ê§¬ª

[19:00] <unitxt> I wonder if the older way of doing OOP in Perl 5 or Moose is the better way to learn for someone that has just read 'Learning Perl', but plans on learning Perl 6 as soon as it's released and there's a book for beginners on it? Or maybe I need to learn both ways?

[19:01] <Tene> unitxt: Moose, definitely.

[19:01] <Tene> Moose borrowed a lot from Perl 6

[19:02] <unitxt> Tene: Thank you.

[19:03] *** payload left
[19:03] <Su-Shee> unitxt: just privately or also job related?

[19:05] *** masak joined
[19:05] <masak> literal: ping

[19:06] <masak> anyone agree that RT #68158 is invalid? http://rt.perl.org/rt3/Ticket/Display.html?id=68158

[19:07] * moritz_ takes a look

[19:07] <moritz_> not sure

[19:07] <masak> moritz_: oh hai

[19:07] <moritz_> one could make a case for a slurpy being not such a tight match as a directly matching signature

[19:08] <moritz_> don't know how it's specced, though

[19:08] <KyleHa> Looks ambiguous to me.

[19:08] <masak> same here.

[19:08] <masak> moritz_: one could make a case for that, yes.

[19:08] <moritz_> otherwise you could never win a dispatch against a (*@a, *%a) signature

[19:08] <moritz_> except by closer types

[19:08] <masak> true.

[19:09] <KyleHa> I'm looking at this one:  http://rt.perl.org/rt3/Ticket/Display.html?id=65610

[19:09] <masak> so in the precense of a () signature, a (*@a) signature should lose out, when calling foo().

[19:10] * masak leaves RT #68158 open for the time being

[19:10] <moritz_> that's my opinion; don't know what the spec says, if it says something at all

[19:10] <KyleHa> No, I'm confused.

[19:10] <moritz_> rakudo: my $m = "foo" ~~ /foo/; $m<greeting> = "OH HAI"; say $m.perl

[19:10] <p6eval> rakudo 24b26a: OUTPUT¬´Method '!_perl' not found for invocant of class 'Str'‚ê§¬ª

[19:13] <KyleHa> Is the assignment to '$m' legal?

[19:13] <moritz_> no

[19:13] <moritz_> unless the regex was matched with an :rw modifier

[19:14] <KyleHa> OK, so I'm not sure I care about this bug.

[19:14] <KyleHa> It's an odd case of RT #64874.

[19:14] <moritz_> rakudo: my $x = 'foo'; $x ~~ m/.(o)/; $1 = 'bar'; say  $x

[19:14] <p6eval> rakudo 24b26a: OUTPUT¬´foo‚ê§¬ª

[19:14] <moritz_> KyleHa: add an eval_dies_ok { $m<greeting> = 'something' }, and be done

[19:15] <KyleHa> OK.

[19:15] <moritz_> the .perl failing is just a fallout of the then corrupted structure of the match object

[19:17] *** iblechbot joined
[19:20] *** donaldh left
[19:20] <pugs_svn> r27870 | kyle++ | [t/spec] Label tests for RT #64880

[19:20] <pugs_svn> r27871 | kyle++ | [t/spec] Test for RT #65610

[19:20] <ruoso> http://gist.github.com/161467 -- a xml grammar closer to the xml spec

[19:20] *** donaldh joined
[19:21] <masak> ruoso++

[19:22] <masak> ruoso: maybe add the distinctiveness of that grammar to krunen's XML module?

[19:26] <ruoso> masak, my idea was more to tease...

[19:26] *** payload joined
[19:26] <masak> ruoso: that's fine, too. :)

[19:30] <colomon> moritz_: Re #68158, as far as I could tell, the spec does not address this case, and the spectests seem to skip it deliberately.  

[19:30] <moritz_> then it's something to bring up to p6l

[19:32] <KyleHa> Does "+$obj" call Num() on the $obj or something else?

[19:32] <moritz_> .Num, yes

[19:32] <moritz_> actually...

[19:32] <moritz_> it calls prefix:<+>($obj)

[19:33] <moritz_> and we expect that to re-dispatch to $obj.Num()

[19:33] <KyleHa> I have a Num method, but it doesn't work, even with "0 + $obj".

[19:33] <KyleHa> Is that a known bug?

[19:34] <masak> moritz_: it calls prefix:<+>($obj), because that's what the syntax +$obj means.

[19:34] <KyleHa> Oh wait, nevermind.  It's a different problem.

[19:34] <moritz_> rakudo: class A { method Num() { 3 } }; say +A.new

[19:34] <p6eval> rakudo 24b26a: OUTPUT¬´3‚ê§¬ª

[19:36] <ruoso> masak, I wish I had the time to work on it... and on Faz... and SMOP, rakudo, mildew, catalyst...  ;)

[19:37] <KyleHa> Next commit would benefit from a review.

[19:37] <pugs_svn> r27872 | kyle++ | [t/spec] Test for RT #64888

[19:37] <KyleHa> Here:  http://dev.pugscode.org/changeset/27872

[19:37] * moritz_ takes a look

[19:37] <masak> ruoso: I know the feeling. my productivity right now is on hold due to pending presentation tomorrow.

[19:38] <KyleHa> Bug number appears seven times in the tests.  I wonder if that's a record.  8-)

[19:38] <ruoso> wayland76, I just replied your mail with another prospective implementation of the grammar, but making it closer to the XML Spec at the same time as trying to make it compatible with the SAX API

[19:39] <moritz_> KyleHa: looks good to me

[19:39] <KyleHa> moritz++ # checking my work  (Thanks!)

[19:39] <ruoso> wayland76, if you look at the XML spec you'll see that it basically describes the grammar... 

[19:43] *** SmokeMachine left
[19:44] <eternaleye> masak: As far as that RT goes, if people want to require a non-empty slurpy, they can just use 'where *.elems > 0'

[19:45] <masak> eternaleye: that is indeed so.

[19:45] <moritz_> eternaleye: that doesn't help if you want to add a tighter multi later to an existing, general multi

[19:46] <masak> eternaleye: I think the question is more of "what should be the default behaviour, and why?"

[19:46] <eternaleye> Mm, yeah

[19:46] <moritz_> eternaleye: if that multi is not code you control, that can get ugly quickly

[19:46] <moritz_> and we want to encourage extensibility, after all

[19:49] *** hah left
[19:49] *** japhb left
[19:49] *** japhb joined
[19:51] *** KyleHa left
[19:59] <alester> OK PMICHAUD DO WE HAVE A PLAN YET? HUH HUH?

[19:59] <masak> alester: actually, pmichaud unveiled a plan during the lightning talk session today.

[19:59] <alester> nice

[20:00] <alester> I'm going to be trying to track that for the project

[20:00] <alester> and spreading it to the outside world.

[20:01] <masak> alester: the response of the auditorium was very positive.

[20:01] <alester> Did he say "Spring 2010"?

[20:01] <masak> it seemed that this was what people had been waiting for.

[20:01] <masak> alester: he did.

[20:02] <masak> alester: he also said "Rakudo Star"/

[20:02] <alester> Did he say that I was super-awesome?

[20:02] <masak> ...which is more of a phase than a version name.

[20:02] <alester> Rakudo Star is the sort of "not quite beta not alpha either" thing?

[20:02] <masak> alester: I might have missed the super-awesome part, but no, I don't believe so.

[20:02] <masak> alester: it's a phase.

[20:03] <alester> It is not.  I continue to be super-awesome.

[20:03] <masak> it's the phase where we want the world to see us a little more, so that we get more app devs.

[20:03] <masak> alester: we're talking cross-purposes, but that's fine. :)

[20:03] <alester> Man, I hate that.  Who wants to deal with crabby dolphins?

[20:04] <PerlJam> alester: you're super-awesome.  (does it count if I say it on #perl6?)

[20:04] * masak gets "pinky and the brain" vibes

[20:04] *** KyleHa joined
[20:04] <payload> my t/spec/S32-io/IO-Socket-INET.t fails :(

[20:05] <moritz_> payload: always? or only sometimes?

[20:05] <Tene> It does?  I touched sockets recently... but that test passed for me.

[20:05] <Tene> Lemme check if I can reproduce.

[20:06] <payload> http://gist.github.com/161489

[20:07] <moritz_> payload: which OS?

[20:07] <payload> ubuntu 8.10

[20:07] * Tene rebuilding rakudo

[20:07] <payload> i rebuild mine too

[20:07] <payload> but i thought i have your commit

[20:07] <PerlJam> payload: did you "make realclean" first?

[20:07] <Tene> my commit shouldn't affect that test at all, one way or another.

[20:08] <Tene> Yes, it passes for me

[20:08] <payload> PerlJam: ^^ now i did... i think i missed it last time

[20:09] <payload> ok, give me some minutes for building

[20:09] <Tene> payload: what platform are you on?

[20:09] <payload> (10:07:23 PM) payload: ubuntu 8.10

[20:09] <Tene> :)

[20:10] <PerlJam> has the test changed?

[20:11] <PerlJam> (I know you said it passed for you Tene, but it may be relevant to payload's problem if the test has changed)

[20:11] *** szbalint left
[20:11] <Tene> PerlJam: that test hasn't changed recently.

[20:11] <moritz_> I added a smartlink on Sunday

[20:11] <PerlJam> Tene: what platform are *you* on?

[20:11] <moritz_> (which is just a comment to Perl)

[20:11] <PerlJam> :)

[20:11] <payload> is there a blog software written _and_used_ in perl 6? i am interessted cause i want to microblog with perl6 about perl6

[20:11] <PerlJam> moritz_: a POD comment?  ;)

[20:11] <Tene> PerlJam: fedora linux x86_64

[20:12] <moritz_> the last previous change was 2009-07-23

[20:12] <Tene> payload: I wrote a very basic blog software, but it's not good enough to be used.

[20:12] <Tene> it could be made usable with not too much work, though

[20:13] *** ruoso left
[20:13] *** ancients left
[20:13] <payload> i wanted to experiment with IO::Socket::INET to write some XMPP interaction.... maybe i can blog via XMPP posts ^^ that would be nice

[20:14] <Tene> Very nice. :)

[20:14] <payload> omg, my setup of rakudo is wrong.. i need some moar minutes ^^ (doesnt make :/ )

[20:15] *** ancients joined
[20:16] <PerlJam> once someone has some basic blog software going, the next thing you know someone will write a markdown parser+actions to render it.

[20:17] <moritz_> PerlJam: masak++ has written parsers for two markup languages already :)

[20:17] <moritz_> so if you're fine with blogging in mediawiki syntax... ;-)

[20:17] <moritz_> don't know what the other format is

[20:18] <payload> yes, it's located in the november wiki repo, i think

[20:18] <masak> yes.

[20:19] <masak> moritz_: the other one was a minimal markup, made by us in the early days of November.

[20:19] <masak> we still keep it around, and call it Minimal.

[20:20] <masak> the MediaWiki format hasn't received much love from me lately. but it already does the most basic things, such as bold, italic, and headings.

[20:21] * PerlJam now has a perl6 project to work on and blog about :)

[20:22] <masak> PerlJam++

[20:23] *** szbalint joined
[20:23] <PerlJam> well, I have *another* one to work on and blog about.  I tend to have too many ideas and not enough time, so nothing quite gets done

[20:24] <masak> sounds like the same issue I'm having.

[20:24] <masak> I find that others' enthusiasm is often a strong drive, though.

[20:24] <masak> so (maybe fortunately), the projects being worked on tend to be the ones others care about.

[20:24] <Su-Shee> yeah. and very distracting from own ideas. 

[20:24] <PerlJam> yeah, if only we could bottle the enthusiasm!

[20:25] <japhb> payload: You might consider porting bloxsom to Perl 6 ... it's supposed to have a small, clean core (I haven't looked at the code, just quoting the buzz)

[20:26] <PerlJam> what happens to me is that I get the idea, get fired up about it, but then realize that I can't devote enough  time to it right now, so I'll put it off until later and either I'll forget about it later or something else comes up later or if I do start on it, it's usually late at night after the kids (and wife!) go to sleep and by then I'm so tired that I fall asleep

[20:26] <japhb> PerlJam: I think you've just described about 80% of us ....

[20:26] <masak> PerlJam: same here, sans kids+wife.

[20:26] <payload> japhb: big thx. i will look into it

[20:27] *** SmokeMachine joined
[20:27] <japhb> payload: sorry, misspelled it, here's the url: http://www.blosxom.com/

[20:30] <buu> Hrm. 

[20:31] <Su-Shee> buu: it'll going to be a perl6 class? ;))

[20:32] <buu> Su-Shee: I'm afraid no, no classes fo rme.

[20:32] <buu> I was just trying to figure exactly which principles perl5 is using for the trie optimizations.

[20:37] <payload> i realized some days ago that everything which makes fun in python is expensive... moving repeating code into a method... slow... overloading operators... slower

[20:38] <payload> are there facilities thinkable or planned in rakudo or parrot to make this "fun" (putting code into methods) cheap in performance?

[20:39] <moritz_> actually method calls aren't all that expensive

[20:39] <moritz_> thanks to jnthn++

[20:40] *** icwiener joined
[20:44] <payload> macros can be used to "inline" code, somewhat right? ^^

[20:45] <moritz_> yes; but they are there for different reasons

[20:50] *** iblechbot left
[21:04] <masak> moritz_: another thing I found out today is that STD.pm compatibility might land in Rakudo by the end of the year.

[21:05] *** Whiteknight joined
[21:05] <masak> and with that, all manner of good things land.

[21:05] <moritz_> masak: I believe that when we have proto regexes and LTM.

[21:05] <masak> heredocs, adverbs, grammar mods...

[21:05] <japhb> I'm looking forward to NQP/PCT getting optimization.

[21:06] <masak> moritz_: pmichaud said today that they're his plan for the coming months.

[21:06] <moritz_> masak: I'm not surprised, but pmichaud tends to have too many things to do ;-)

[21:06] <PerlJam> japhb: even if you have to implement the optimization?  :)

[21:07] <masak> moritz_: right, but this time there's a deadline. and, quoting pmichaud, "when there's a deadline, things tend to get done."

[21:08] *** molaf_x left
[21:09] <japhb> PerlJam: If I had the time to learn the necessary CS, I'd be all over it.  As it is, I think I'm going to be using every bit of my spare cycles just trying to shepherd the Parrot standard library thing.

[21:09] *** holmberg joined
[21:10] <PerlJam> japhb++ do not deviate from your focus!  :)

[21:10] <japhb> I get a feeling the "standard lib" needs a champion to keep it from bikeshedding to a stand still.

[21:10] <japhb> PerlJam: :-)

[21:10] <PerlJam> What's in the standard lib for parrot anyway?

[21:11] <moritz_> nothing yet?

[21:11] <japhb> PerlJam: My/pmichaud's current overview proposal: http://lists.parrot.org/pipermail/parrot-dev/2009-July/002666.html

[21:11] <japhb> Specifics to be laid out when we have more people buy off on the concept.

[21:11] *** SmokeMachine left
[21:11] *** sdgvf left
[21:11] <japhb> I would normally be on that phase already, but I'm cutting everyone some Warnock slack because of YAPC::EU

[21:12] <masak> (Warnock slack)++

[21:13] *** Su-Shee left
[21:13] <moritz_> speaking of ol' warnock, I hope somebody's going to give Ben Morrow better answers than I have so far

[21:14] <holmberg> How do I access the Parrot dynpmc MD5 module in perl6 code? Examples somewhere?

[21:15] <PerlJam> japhb: parrot has a module repo?  :)

[21:16] <japhb> holmberg: Don't see any checked in, but I'd start with "use Digest::MD5:from<parrot>;" and work from there, translating the PIR API to Perl 6.

[21:16] <PerlJam> japhb: anyway, It sounds good to me.  I'm all for it.  Parrot releases on Tue, Batteries on Wed, and Rakudo on Thu    ;)

[21:16] <japhb> PerlJam: great, thanks

[21:16] <PerlJam> But that module repository does niggle a little bit.

[21:17] <japhb> PerlJam: and no, there is no module repo yet.  There will be, though, not least because there is a groundswell of unhappiness about runtime/parrot/library/ as dumping ground.

[21:17] <PerlJam> cpaan?

[21:17] <japhb> PerlJam: deciding on the details of that repo is another subtask.

[21:18] <PerlJam> a big'un if you ask me, given the bikeshedding over CP6AN

[21:18] <PerlJam> (unless some enterprising young soul just does it)

[21:19] <japhb> PerlJam: Nod.  That bikeshedding annoyed me.  If I can't get some consensus over on the Parrot side, I may pick a partner and JFDI.

[21:19] <japhb> "Rough consensus and working code."

[21:19] <PerlJam> indeed.

[21:20] <holmberg> japhb: Thanks. I tried the "use" you proposed. Got "Null PMC access in get_pmc_keyed()". Seems like an error of some kind??

[21:21] <japhb> Wow.  This spam gets right down to it.  The subject line is "Enter new passowrd here".  Phishing for the very direct.

[21:22] <japhb> holmberg: Oy.  Yeah, Null PMC access is always a bug.  Do the PIR tests for the module still work?

[21:23] *** KyleHa left
[21:24] <holmberg> japhb: I don't know ... I just built rakudo+parrot for the first time. I'll have to learn how to run the tests :)

[21:28] *** cytoplasm joined
[21:31] *** skids_ left
[21:36] <holmberg> japhb: "perl -Ilib t/dynpmc/md5.t" works in Parrot. So the "Null PMC access" problem is in rakudo??

[21:37] <japhb> holmberg: Or in the magic that makes :from<parrot> work.  Tene is the expert on that, I'm just a consumer.

[21:38] *** synth joined
[21:38] <Tene> >.>

[21:39] <moritz_> rakudo: use Digest::MD5:from<parrot>;

[21:39] <p6eval> rakudo 24b26a: OUTPUT¬´Null PMC access in get_pmc_keyed()‚ê§in Main (src/gen_setting.pm:445)‚ê§¬ª

[21:40] <Tene> I bet it's the same bug where libraries need to be loaded from the 'parrot' HLL

[21:40] * Tene looks.

[21:41] <Tene> Oh, NM.

[21:41] <Tene> Digest/MD5.pir is in the Digest namespace

[21:41] <Tene> Not Digest;MD5

[21:42] <Tene> Digest::MD5.pir isn't set up to follow the HLL export conventions.

[21:42] <japhb> holmberg: Time to create a Trac ticket.  ;-)

[21:43] *** maja_ joined
[21:43] <payload> what i the correct translation from this perl 5 match ?    [0-9A-Fa-f]{2}

[21:44] <moritz_> payload: <xdigits>**2 or so

[21:44] <moritz_> rakudo: say '0xAF' ~~ / <xdigits> ** 2 /

[21:44] <p6eval> rakudo 24b26a: OUTPUT¬´Unable to find regex 'xdigits'‚ê§in regex PGE::Grammar::_block51 (/tmp/7zeL2KYiRX:1)‚ê§called from Main (/tmp/7zeL2KYiRX:2)‚ê§¬ª

[21:44] <moritz_> rakudo: say '0xAF' ~~ / <xdigit> ** 2 /

[21:44] <p6eval> rakudo 24b26a: OUTPUT¬´AF‚ê§¬ª

[21:44] <moritz_> ok, without the s

[21:45] <masak> oh, and everybody: check out Damian's new Regexp::Grammars: http://search.cpan.org/~dconway/Regexp-Grammars-1.001005/lib/Regexp/Grammars.pm

[21:46] <payload> thx moritz_

[21:47] <masak> it's a module that backports much Perl 6 grammar goodness to Perl 5.

[21:47] <holmberg> japhb: I'll try to do that later. I need to find out what Trac is first :)

[21:47] * moritz_ still likes Perl 6 regexes better

[21:47] <masak> it even has a trace function!

[21:47] <japhb> holmberg: trac.parrot.org, our wiki / bug tracker / svn viewer system.

[21:48] <japhb> our == parrot team

[21:48] <moritz_> %/ looks... ... ... I don't know

[21:48] *** perl7 joined
[21:50] <holmberg> japhb: Thanks for guiding a newcomer.

[21:50] <japhb> holmberg: You'll find this channel to be pretty friendly.  :-)

[21:50] <masak> holmberg: a newcomer! welcome!

[21:53] <holmberg> What I was actually trying to do, was how to connect a "dynpmc" written in C/C++ to perl6, and use it in plain perl6 code. I guessed the MD5 module was a good example. But maybe there are others?

[21:54] <holmberg> masak: thanks. It's partly your fault I'm looking at perl6 now :)

[21:54] <masak> holmberg: glad to hear it.

[21:54] <PerlJam> someone have a quick link to using "make" in perl6?  or documentation or something ?

[21:54] <PerlJam> s/perl6/rakudo/

[21:54] <japhb> holmberg: beyond my skillset, I'm afraid.  Tene, pmichaud, and jnthn would know, having to deal with the dynpmcs that Rakudo itself uses.

[21:55] <masak> PerlJam: check out the create-new-project in Proto.

[21:55] <masak> s/ct/ct script/

[21:55] <PerlJam> masak: thanks.

[21:55] *** maja left
[21:56] *** perl7 left
[21:57] *** nihiliad joined
[21:57] <PerlJam> wait ... let me try to be more clean.  I'm talking about using make from the actions in a grammar in rakudo

[21:57] <PerlJam> s/clean/clear/ even

[21:57] <masak> oh.

[21:57] <PerlJam> (ETOOMUCHMAKE)

[21:57] <masak> PerlJam: hm, well, I don't have any code that does that.

[21:57] <masak> but it's pretty straightforward.

[21:58] <moritz_> and there are even tests for that ;-)

[21:58] <masak> 'make' simply sets an attribute at the relevant location in $/

[21:58] <masak> moritz_++

[21:58] <PerlJam> everythign is straightforward until you do something subtle and it doesn't work and you don't know why

[21:58] <masak> PerlJam: there you go. check the tests. :)

[21:58] <PerlJam> thanks again.

[22:00] *** cottoo joined
[22:00] *** cotto left
[22:03] <holmberg> Where is the best place to ask "complex" questions about Rakudo&Parrot that don't fit the IRC format? Is it the "perl6-users" mailing list?

[22:04] <Tene> Probably.

[22:04] <Tene> That's where I'd send it.

[22:05] <moritz_> aye

[22:06] <masak> but I'd recommend starting on IRC.

[22:06] <masak> we're more used to complexity than it might first seem. :)

[22:06] <Tene> I mostly just ramble on IRC for a while and then tell masak to go figure it out for me.

[22:08] <masak> yeah, that masak guy is one gullible cookie.

[22:08] <Tene> Mmm, cookies.

[22:13] <holmberg> I haven't used IRC before, so I don't know exactly how it works. But isn't a question "lost in space" soon after it is ask asked? (if not answered immediately)

[22:14] <Tene> holmberg: Usually.  Sometimes someone notice sit in the channel history and will answer.  By "start with IRC" he means "Se eif anyone on RIC is avaialable right now to talk about it"

[22:14] <Tene> and if not, then go to the ML.

[22:15] <moritz_> holmberg: also we have public logs at http://irclog.perlgeek.de/perl6/today

[22:15] <moritz_> holmberg: so you can later point people to previous conversations

[22:15] <masak> holmberg: I'd say on #perl6, a relatively high ratio of questions get noticed and answered, even if the answer sometimes is "gee, I have no idea"

[22:19] <holmberg> moritz_: Thanks for the pointer. Good to know that I can go back and re-read things.

[22:26] *** M_o_C joined
[22:27] <holmberg> Thanks everybody. Will be back with more questions later :)

[22:28] *** holmberg left
[22:30] <payload> is there allready a way to translate __DATA__ ? http://gist.github.com/162357

[22:32] *** cognominal joined
[22:38] *** nnunley left
[22:38] *** [particle]1 joined
[22:42] *** nihiliad left
[22:43] *** [particle] left
[22:48] <eternaleye> payload: IIRC, =begin DATA/=end DATA combined with $=DATA (ISTR the = twigil being for Podhandles)

[22:52] <eternaleye> payload: S26 claims S02 contains the spec for inline data, but Firefox just hung when I went there so I can't give you a link to the appropriate section

[22:52] *** icwiener_ joined
[22:55] *** nihiliad joined
[22:57] <payload> well it contains something

[22:58] <literal> you find something if you search for '$=' in http://perlcabal.org/syn/S02.html

[22:59] <payload> yes, found t/spec/S02-literals/pod.t 

[22:59] <payload> thx

[23:00] *** masak left
[23:02] <eternaleye> np

[23:02] *** alester left
[23:06] *** icwiener left
[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:22] *** M_o_C left
[23:22] *** nihiliad left
[23:30] *** nErVe joined
[23:37] *** fridim_ left
[23:41] *** arthur-_ left
[23:47] *** SmokeMachine joined
[23:58] *** nErVe left
