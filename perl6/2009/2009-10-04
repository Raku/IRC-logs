[00:32] *** fridim left
[00:37] *** icwiener_ left
[00:41] *** payload joined
[00:42] *** colomon joined
[00:48] *** eternaleye left
[00:59] *** Ctrl-ZZZ left
[01:01] *** envi_office2 joined
[01:03] *** TiMBuS joined
[01:04] *** rhr_ joined
[01:06] *** meppl left
[01:12] *** envi^office left
[01:16] *** rhr left
[01:21] *** orafu left
[01:21] *** orafu joined
[02:00] *** crythias joined
[02:00] <diakopter> whee

[02:02] <diakopter> mberends: you around?

[02:03] *** Avada joined
[02:05] <crythias> I added some vodka to sprixel and got some fizzy drink that made me giggle.

[02:05] <phenny> crythias: 03 Oct 13:40Z <diakopter> tell crythias someday we'll credit you with coining 'sprixel'

[02:12] <crythias> something punny resulted in xylophones emitting lasers.

[02:13] <crythias> trying to do perl in c ... isn't that a bit xs-ive?

[02:15] <TimToady> you can't have my original pun

[02:15] <crythias> i didn't research it. i guess it was obvious...

[02:16] <TimToady> "independent discovery" :)

[02:16] <diakopter> TimToady: but if it's not original, how is it original?

[02:17] <crythias> but ... but .. they're xylophones with freaking lasers!

[02:24] <pugs_svn> r28581 | diakopter++ | [sprixel] implement rand 

[02:26] <pugs_svn> r28582 | diakopter++ |  

[02:26] <diakopter> perl6: say rand

[02:26] <p6eval> pugs: OUTPUT«0.5032597184188803␤»

[02:26] <p6eval> ..sprixel 28580: OUTPUT«0.18537836335599422␤»

[02:26] <p6eval> ..rakudo e976f2: OUTPUT«0.470813668639497␤»

[02:26] <p6eval> ..elf 28580: OUTPUT«Undefined subroutine &GLOBAL::rand called at (eval 123) line 3.␤ at ./elf_h line 5881␤»

[02:26] <diakopter> pugs wins that one, barely.

[02:26] <diakopter> perl6: say rand

[02:26] <p6eval> rakudo e976f2: OUTPUT«0.853278311275975␤»

[02:26] <p6eval> ..pugs: OUTPUT«0.12474857564660452␤»

[02:26] <p6eval> ..sprixel 28580: OUTPUT«0.8870638972148299␤»

[02:26] <p6eval> ..elf 28580: OUTPUT«Undefined subroutine &GLOBAL::rand called at (eval 123) line 3.␤ at ./elf_h line 5881␤»

[02:27] <diakopter> sprixel edged out rakudo that time

[02:34] *** Whiteknight left
[02:41] *** cognominal joined
[02:45] <pugs_svn> r28583 | diakopter++ | [sprixel] implement lexical sub declaration/installation 

[02:48] <diakopter> sprixel: sub foo { my $a = 'hi from foo'; say $a }; foo;

[02:48] <p6eval> sprixel 28583: OUTPUT«hi from foo␤»

[02:48] *** envi^home joined
[02:51] <diakopter> sprixel: my $x = 0; sub foo { say "hi "~$x }; while ++$x < 6 { foo };

[02:51] <p6eval> sprixel 28583: OUTPUT«hi 1␤hi 2␤hi 3␤hi 4␤hi 5␤»

[02:52] <diakopter> sprixel: my $x = 0; sub foo { say "hi " ~ ++$x }; while $x < 6 { foo };

[02:52] <p6eval> sprixel 28583: OUTPUT«hi 1␤hi 2␤hi 3␤hi 4␤hi 5␤hi 6␤»

[02:53] <diakopter> sprixel: my $x = 0; sub foo { say "hi " ~ ++$x }; { foo } while $x < 6;

[02:53] <p6eval> sprixel 28583: OUTPUT«hi 1␤hi 2␤hi 3␤hi 4␤hi 5␤hi 6␤»

[02:59] <pugs_svn> r28584 | diakopter++ | [sprixel] make another case of trailing while work (dunno why statement_mod_loop didn't cover them all; maybe std/viv oddity) 

[03:00] <diakopter> sprixel: my $x = 0; sub foo { say "hi " ~ ++$x }; foo while $x < 3;

[03:00] <p6eval> sprixel 28583: OUTPUT«hi 1␤hi 2␤hi 3␤»

[03:17] *** sparc joined
[03:26] *** envi_office2 left
[03:26] *** envi^office joined
[03:27] *** xinming_ joined
[03:33] *** ayrnieu joined
[03:35] *** cognominal left
[03:38] *** envi^office left
[03:43] <mikehh> rakudo (e976f23) builds on parrot r41670 - make test PASS / make spectest_smolder (up to r28584 -> #28507) FAIL - Ubuntu 9.04 amd64

[03:43] <mikehh> rakudo - t/spec/S11-modules/nested.t - Parse errors: Bad plan.  You planned 6 tests but ran 5

[03:43] <mikehh> rakudo - t/spec/S32-num/rat.t - Parse errors: No plan found in TAP output

[03:47] *** xinming left
[03:50] <quietfanatic> I have parsed and run a trivial c library in rakudo, during runtime.

[03:50] *** lisppaste3 left
[03:53] <quietfanatic> (trivial meaning "int get_three () { 3; }")

[03:58] <spinclad> so you parse the signature and (find/build) a matching (NCI/equiv) Parrot/Rakudo wrapper?

[03:58] *** lisppaste3 joined
[04:00] <quietfanatic> yeah

[04:00] <diakopter> quietfanatic: you could call it h2xs, except maybe not.  maybe h2nci

[04:00] <quietfanatic> h2justrunit

[04:01] <diakopter> H2JFRI.  Where the F stands for FindAnd

[04:02] <quietfanatic> It's currently just a hack.  It needs a lot of polishing before it's even github-ready.

[04:06] <quietfanatic> sloppiness of note: it parses with perl5, dumps it with Data::Dumper into a temporary file, and evals that file in perl6

[04:08] *** abbe joined
[04:08] <abbe> hi everyone

[04:10] <abbe> hi moritz_

[04:11] <abbe> i'm wondering if laziness is enabled by default in pug or rakudo...

[04:11] <abbe> s/pug/pugs/

[04:13] <quietfanatic> I believe pugs has more laziness than rakudo at the moment

[04:13] <abbe> perl6: my @a = [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(',');

[04:13] <p6eval> pugs, rakudo e976f2: OUTPUT«Came across: 1␤Came across: 2␤Came across: 3␤Forcing evaluation of the list.␤2,4,6␤»

[04:13] <p6eval> ..elf 28584: OUTPUT«Use of uninitialized value $_ in multiplication (*) at (eval 132) line 4.␤Can't use string ("0") as a subroutine ref while "strict refs" in use at ./elf_h line 197.␤ at ./elf_h line 5881␤Came across: $_␤»

[04:13] <p6eval> ..sprixel 28584: OUTPUT«execute(): execute error: real method calls NYI at sprixel.pl line 89.␤»

[04:13] <quietfanatic> I believe also array assignment is eager by default

[04:14] <quietfanatic> my @a = lazy [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(',');

[04:14] <quietfanatic> perl6: my @a = lazy [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(',');

[04:14] <p6eval> sprixel 28584: OUTPUT«execute(): execute error: noun__S_statement_prefix not yet implemented; srsly!!?!?␤last: eval_args␤T,T__noun__S_statement_prefix,_specific,SYM,statement_prefix,M,phase,invoker,context,eval_args at sprixel.pl line 89.␤»

[04:14] <p6eval> ..pugs: OUTPUT«Came across: 1␤Came across: 2␤Came across: 3␤*** Cannot cast from VList [VInt 2,VInt 4,VInt 6] to Pugs.AST.Types.VCode (VCode)␤    at /tmp/jqw4MTvnl0 line 1, column 9-61␤»

[04:14] <p6eval> ..rakudo e976f2: OUTPUT«lazy not implemented at line 2, near "; say \"For"␤in Main (src/gen_setting.pm:608)␤»

[04:14] <p6eval> ..elf 28584: OUTPUT«statement_prefix:lazy: unimplemented at ./elf_h line 5235␤»

[04:14] <quietfanatic> perl6: my @a <== [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(',');

[04:15] <p6eval> rakudo e976f2: OUTPUT«Came across: 1␤Came across: 2␤Came across: 3␤Feed operators are not yet implemented in Rakudo, sorry␤in sub infix:<== (src/gen_setting.pm:1977)␤called from Main (/tmp/VmEAJaBLoq:0)␤»

[04:15] <p6eval> ..pugs: OUTPUT«Came across: 1␤Came across: 2␤Came across: 3␤Forcing evaluation of the list.␤␤»

[04:15] <p6eval> ..elf 28584: OUTPUT«Parse error in: /tmp/lqnqQLAaya␤panic at line 1 column 6 (pos 6): Can't understand next input--giving up␤WHERE: my @a <== [1,2,3].map({ say "Came ac␤WHERE:      /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in

[04:15] <p6eval> ..`comp_uni…

[04:15] <p6eval> ..sprixel 28584: OUTPUT«execute(): execute error:

[04:15] <p6eval> ..sigil,name,context,value,WHAT,set,toString,increment,decrement,do_Additive,do_Multiplicative,toBool,do_infix__S_Lt,do_infix__S_LtEqual,do_infix__S_Gt,do_infix__S_GtEqual,do_infix__S_EqualEqual,do_infix__S_BangEqual,do_infix__S_lt,do_infix__S_le,do_infix__S…

[04:15] <abbe> std: my @a = [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(',');

[04:15] <p6eval> std 28584: OUTPUT«ok 00:03 107m␤»

[04:16] <abbe> rakudo: my @a = [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(',');

[04:16] <p6eval> rakudo e976f2: OUTPUT«Came across: 1␤Came across: 2␤Came across: 3␤Forcing evaluation of the list.␤2,4,6␤»

[04:17] <abbe> rakudo: lazy { my @a = [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(','); };

[04:17] <p6eval> rakudo e976f2: OUTPUT«lazy not implemented at line 2, near ";"␤in Main (src/gen_setting.pm:608)␤»

[04:18] <diakopter> abbe: sprixel very nearly can do that

[04:18] <abbe> diakopter: sprixel ?

[04:18] <diakopter> this Perl 6 interpreter I and others have been working on

[04:19] <abbe> okay

[04:19] <abbe> so the conclusion is that laziness is not implemented yet ?

[04:19] <diakopter> essentially, yes

[04:19] <diakopter> if you want 20-30 minutes, I'll make the above work in sprixel

[04:20] <abbe> diakopter:  s/want/have/ ??

[04:20] <diakopter> wait

[04:20] <diakopter> sorry

[04:21] <abbe> oh, okay, np

[04:21] <abbe> so gather/take are also not implemented.

[04:21] <abbe> rakudo: my @a = gather { [1,2,3].map({ say "Came across: $_"; take $_ * 2; }); }; say "Forcing evaluation of the list."; say @a.join(',');

[04:21] <p6eval> rakudo e976f2: OUTPUT«Came across: 1␤Came across: 2␤Came across: 3␤Forcing evaluation of the list.␤␤»

[04:22] <abbe> pugs: my @a = gather { [1,2,3].map({ say "Came across: $_"; take $_ * 2; }); }; say "Forcing evaluation of the list."; say @a.join(',');

[04:22] <p6eval> pugs: OUTPUT«Came across: 1␤Came across: 2␤Came across: 3␤Forcing evaluation of the list.␤2,4,6␤»

[04:22] <diakopter> abbe: mind you, that example will be just about *all* it could do. :)

[04:23] <diakopter> it won't be a generic solution.  more like proof-of-concept.

[04:23] <diakopter> for demonstration purposes. :)

[04:23] <abbe> diakopter: that example == one you're going to hack ?

[04:24] <diakopter> well I won't hardcode anything specific to that example, no, but the items in the list will indeed be lazily populated

[04:24] <abbe> okay

[04:25] <abbe> std: my @a = gather { [1,2,3].map({ say "Came across: $_"; take $_ * 2; }); }; say "Forcing evaluation of the list."; say @a.join(',');

[04:25] <diakopter> 'course, I don't know which one of those examples is supposed to produce the output you're expecting. :)

[04:25] <p6eval> std 28584: OUTPUT«ok 00:03 110m␤»

[04:25] <diakopter> maybe someone can help...

[04:26] <diakopter> ah well, I'll just make all maps lazy for now. :)

[04:26] <abbe> diakopter: hmm...

[04:26] <diakopter> heh

[04:27] <abbe> diakopter: expected output: Forcing evaluation of the list.\nCame across: 1\nCame across: 2\nCame across: 3\n2,4,6\n

[04:28] <diakopter> for which attempt/input above

[04:29] <abbe> diakopter: my @a = [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(','); # the article by moritz_ says lists are lazy by default.

[04:29] <abbe> diakopter: http://perlgeek.de/en/article/5-to-6

[04:31] <pugs_svn> r28585 | lwall++ | [STD] attach only pad sigs to the pad, not other signatures 

[04:31] <pugs_svn> r28585 | attach final pad sig to the match/ast (as string)

[04:32] *** Avada left
[04:32] <diakopter> r28585: hooray

[04:36] *** crythias left
[04:45] *** Ctrl-ZZZ joined
[04:53] <TimToady> std: BEGIN { $^a }

[04:53] <p6eval> std 28585: OUTPUT«===SORRY!===␤Placeholder variable $^a cannot be used in this kind of block at /tmp/5opcClCLmw line 1:␤------> BEGIN { $^a⏏ }␤    expecting any of:␤       POST␤   postfix␤  postfix_prefix_meta_operator␤       standard stopper␤ terminator␤FAILED

[04:53] <p6eval> ..00:01 100m␤»

[04:56] <diakopter> std: { say $^a }

[04:56] <p6eval> std 28585: OUTPUT«ok 00:02 100m␤»

[04:56] <diakopter> sprixel: { say $^a }

[04:56] <p6eval> sprixel 28585: OUTPUT«execute(): execute error:

[04:56] <p6eval> ..constructor,contextId,$a,say,map,die,next,last,True,Bool::True,False,Bool::False,Int,Num,Str,Bool,Sub,Rat,plan,done_testing,ok,is,isnt,pass,flunk,isa_ok,dies_ok,lives_ok,skip,todo,force_todo,use_ok,cmp_ok,diag,is_deeply,like,skip_rest,unlike,eval_dies_ok,e…

[04:56] <diakopter> heh

[05:00] <abbe> sprixel: my @a = [1,2,3].map({ say "Came across: $_"; $_ * 2; }); say "Forcing evaluation of the list."; say @a.join(','); # the article by moritz_ says lists are lazy by default.

[05:00] <p6eval> sprixel 28585: OUTPUT«execute(): execute error: real method calls NYI at sprixel.pl line 89.␤»

[05:02] <abbe> perl6: if "abc" ~~ m:i/B/ { say "Matched"; }

[05:02] <p6eval> sprixel 28585: OUTPUT«execute(): execute error: quote__S_m not yet implemented; srsly!!?!?␤last: value__S_quote␤T,T__quote__S_m,_specific,SYM,quibble,M,phase,invoker,context,eval_args at sprixel.pl line 89.␤»

[05:02] <p6eval> ..elf 28585:  ( no output )

[05:02] <p6eval> ..rakudo e976f2: OUTPUT«Colons cannot be used as delimiters in quoting constructs at line 2, near ":i/B/ { sa"␤in Main (src/gen_setting.pm:3468)␤»

[05:02] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.14/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[05:02] <abbe> pugs: if "abc" ~~ m:i/B/ { say "Matched"; }

[05:02] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.14/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[05:03] <abbe> pugs: if "abc" ~~ m:/B/ { say "Matched"; }

[05:03] <p6eval> pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting "\\", variable name or ":"␤    at /tmp/4l5gnrSfH5 line 2, column 1␤»

[05:03] <abbe> pugs: if "abc" ~~ m/B/i { say "Matched"; }

[05:03] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.14/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[05:03] <abbe> perl6: if "abc" ~~ m/B/i { say "Matched"; }

[05:04] <p6eval> sprixel 28585: OUTPUT«===SORRY!===␤Obsolete use of suffix regex modifiers; in Perl 6 please use prefix adverbs instead at /tmp/Nz61wDgUNS line 1:␤------> if "abc" ~~ m/B/i⏏ { say "Matched"; }␤Other potential difficulties:␤  Possible obsolete use of /i; in Perl 6

[05:04] <p6eval> ..plea…

[05:04] <p6eval> ..rakudo e976f2: OUTPUT«get_number() not implemented in class 'Sub'␤in sub postfix:i (src/gen_setting.pm:1287)␤called from Main (/tmp/Q2rAEhvTh0:0)␤»

[05:04] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.14/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[05:04] <p6eval> ..elf 28585: OUTPUT«No viable candidate for call to multimethod postfix_i(Regexp) at (eval 128) line 3␤ at ./elf_h line 5881␤»

[05:04] <abbe> perl6: if "abc" ~~ mi/B/ { say "Matched"; }

[05:04] <p6eval> elf 28585: OUTPUT«Parse error in: /tmp/kxo9SVez2q␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: if "abc" ~~ mi/B/ { say "Match␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[05:04] <p6eval> ..STD_red…

[05:04] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "{"␤    at /tmp/7j2xQ1nt7J line 1, column 19␤»

[05:04] <p6eval> ..sprixel 28585: OUTPUT«===SORRY!===␤Expression needs parens to avoid gobbling block at /tmp/rAiTEHJfPx line 1:␤------> if ⏏"abc" ~~ mi/B/ { say "Matched"; }␤Missing block (apparently gobbled by expression) at /tmp/rAiTEHJfPx line 1 (EOF):␤------> if "abc"

[05:04] <p6eval> ..~~ mi/B…

[05:04] <p6eval> ..rakudo e976f2: OUTPUT«Could not find non-existent sub mi␤»

[05:05] <abbe> perl6: if ("abc" ~~ m:i/B/) { say "Matched"; }

[05:05] <p6eval> sprixel 28585: OUTPUT«execute(): execute error: quote__S_m not yet implemented; srsly!!?!?␤last: value__S_quote␤T,T__quote__S_m,_specific,SYM,quibble,M,phase,invoker,context,eval_args at sprixel.pl line 89.␤»

[05:05] <p6eval> ..elf 28585:  ( no output )

[05:05] <p6eval> ..rakudo e976f2: OUTPUT«Colons cannot be used as delimiters in quoting constructs at line 2, near ":i/B/) { s"␤in Main (src/gen_setting.pm:3468)␤»

[05:05] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.14/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[05:05] <abbe> perl6: if ("abc" ~~ mi/B/) { say "Matched"; }

[05:06] <p6eval> pugs: OUTPUT«*** ␤    Unexpected " {"␤    at /tmp/trXGujAKHS line 1, column 20␤»

[05:06] <p6eval> ..elf 28585: OUTPUT«Undefined subroutine &GLOBAL::mi called at (eval 128) line 3.␤ at ./elf_h line 5881␤»

[05:06] <p6eval> ..sprixel 28585: OUTPUT«===SORRY!===␤Unable to parse parenthesized expression; couldn't find final ')' at /tmp/nhrh9dXkjr line 1:␤------> if ("abc" ~~ mi/B/⏏) { say "Matched"; }␤    expecting any of:␤      noun␤   prefix or noun␤     standard stopper␤ term␤  

[05:06] <p6eval> ..terminator␤       whitespace…

[05:06] <p6eval> ..rakudo e976f2: OUTPUT«Confused at line 2, near "/) { say \""␤in Main (src/gen_setting.pm:3468)␤»

[05:06] <abbe> perl6: if ("abc" ~~ m/B/) { say "Matched"; }

[05:06] <abbe> perl6: if ("abc" ~~ m/b/) { say "Matched"; }

[05:06] <p6eval> sprixel 28585: OUTPUT«execute(): execute error: quote__S_m not yet implemented; srsly!!?!?␤last: value__S_quote␤T,T__quote__S_m,_specific,SYM,quibble,M,phase,invoker,context,eval_args at sprixel.pl line 89.␤»

[05:06] <p6eval> ..elf 28585, rakudo e976f2:  ( no output )

[05:06] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.14/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[05:06] <p6eval> sprixel 28585: OUTPUT«execute(): execute error: quote__S_m not yet implemented; srsly!!?!?␤last: value__S_quote␤T,T__quote__S_m,_specific,SYM,quibble,M,phase,invoker,context,eval_args at sprixel.pl line 89.␤»

[05:06] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.14/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[05:06] <p6eval> ..elf 28585, rakudo e976f2: OUTPUT«Matched␤»

[05:07] <diakopter> yay for elf, rakudo

[05:08] *** justatheory left
[05:08] *** nihiliad left
[05:08] *** zloyrusskiy joined
[05:15] <mberends> diakopter++; pmurias++; # srsly, you guys rock!

[05:19] *** zloyrusskiy left
[05:26] <pugs_svn> r28586 | diakopter++ | [sprixel] implement sub closures [slightly more] properly; implement return keyword 

[05:26] <diakopter> mberends: it's late for you! :)

[05:26] <diakopter> I mean, early

[05:27] <mberends> late for you, but cool features!

[05:27] <diakopter> sprixel: sub foo($a, $b) { say $a + $b; sub ($a) { say $a + $b } }; my $f = foo(3,4); $f(9)

[05:27] <p6eval> sprixel 28585: OUTPUT«7␤13␤»

[05:27] <diakopter> currying, ish

[05:27] <mberends> wow.

[05:28] <diakopter> sprixel: sub foo($a, $b) { say $a + $b; sub ($a) { say $a + $b } }; my $f = foo(3,4); $f($f($f(9)));

[05:28] <p6eval> sprixel 28585: OUTPUT«7␤13␤5␤5␤»

[05:28] <diakopter> heh

[05:28] <diakopter> sprixel: sub foo($a, $b) { say $a + $b; sub ($a) { say $a + $b; return $a + $b } }; my $f = foo(3,4); $f($f($f(9)));

[05:29] <p6eval> sprixel 28585: OUTPUT«7␤13␤17␤21␤»

[05:29] <mberends> :-)

[05:29] <diakopter> sprixel: sub foo($a, $b) { say $a + $b; sub ($a) { say $a + $b; return ++$a + $b } }; my $f = foo(3,4); $f($f($f(9)));

[05:29] <p6eval> sprixel 28585: OUTPUT«7␤13␤18␤23␤»

[05:29] <mberends> heh

[05:30] <diakopter> sprixel: sub foo($a, $b) { say $a + $b; sub ($a) { say $a + $b; return ++$a + $b } }; my $f = foo(3,4); say $f($f($f(9)));

[05:30] <p6eval> sprixel 28585: OUTPUT«7␤13␤18␤23␤24␤»

[05:30] <mberends> you got pmurias++ (and ruoso++) all fired up as well :)

[05:31] <mberends> (and TimToady++)

[05:32] <diakopter> s/fired up/nagged to death/  (TimToady at least) :)

[05:32] <mberends> I have an idea to sneak per-test benchmarking into Test.pm.js and the new harness :)

[05:33] *** jaldhar left
[05:33] *** meppl joined
[05:33] *** jaldhar joined
[05:34] *** szabgab joined
[05:34] <diakopter> goodness gracious :)

[05:35] <diakopter> well, sprixel will only get slower, unless it grows an optimization phase or 40

[05:39] <pugs_svn> r28587 | diakopter++ | [sprixel] make predeclaration of variables actually work :) 

[05:40] <diakopter> sprixel: my $AA; sub foo($a, $b) { say $a + $b; $AA = sub ($a) { say $a * $b }; sub ($a) { say $a + $b } }; my $f = foo(3,4); $f(9); $AA(33)

[05:40] <p6eval> sprixel 28585: OUTPUT«7␤13␤132␤»

[05:41] <diakopter> perl6: my $AA; sub foo($a, $b) { say $a + $b; $AA = sub ($a) { say $a * $b }; sub ($a) { say $a + $b } }; my $f = foo(3,4); $f(9); $AA(33)

[05:41] <p6eval> elf 28586, pugs, rakudo e976f2, sprixel 28585: OUTPUT«7␤13␤132␤»

[05:41] <diakopter> nice

[05:43] <mberends> :-) # the "Big Four"

[05:57] <carlin> Is anyone here using FreeBSD?

[06:05] <abbe> carlin: not right now.

[06:09] <carlin> abbe: when you are, would you mind checking what "say $*OS" outputs on it?

[06:10] <abbe> carlin: in rakudo, i hope.

[06:10] <carlin> Oh, yes

[06:10] <abbe> carlin: sure i'll do that :)

[06:10] <carlin> abbe: Thanks :-)

[06:11] <abbe> you're welcome, carlin

[06:29] <ShaneC> can rakudo read files/directories yet?

[06:30] <mberends> sorry, nyi, try $names=qqx{ls $dir} instead

[06:31] <Tene> rakudo: my $f = open('/tmp/foo.txt', :w); $f.say('o hai'); $f.close(); $f = open('/tmp/foo.txt', :r); say $f.readline();

[06:31] <p6eval> rakudo e976f2: OUTPUT«operation not permitted in safe mode␤in Main (/home/p6eval//p2/lib/parrot/1.6.0-devel/languages/perl6/lib/Safe.pm:24)␤»

[06:31] <Tene> Well, that would have worked if it wasn't in safe mode.

[06:32] <Tene> I really should get around to setting up an SELinux sandbox for a rakudo bot.

[06:33] <ShaneC> thanks

[06:35] <Tene> ShaneC: If you really need opendir() or whatever, I bet you could get someone around here to add that for you pretty quick.

[06:38] <ShaneC> does parrot compile with msvc?

[06:38] <ShaneC> i could probably add it

[06:43] *** SmokeMachine left
[06:44] *** SmokeMachine joined
[06:48] *** xinming joined
[06:49] <spinclad> i believe it does, [particle] and others do that

[06:50] <spinclad> (that: msvc on win)

[06:50] *** abbe left
[07:00] *** xinming_ left
[07:05] <Tene> ShaneC: yes, it does.

[07:14] *** abbe joined
[07:15] *** szabgab left
[07:16] *** meppl left
[07:18] *** am0c joined
[07:24] <ShaneC> sorry for all the questions, i've looked but haven't found many helpful docs yet, if you have any good links let me know

[07:24] <ShaneC> does rakudo have a way to get a string's length?

[07:24] <ShaneC> $str.length() isn't working

[07:24] <carlin> rakudo: say "foo".chars;

[07:24] <p6eval> rakudo e976f2: OUTPUT«3␤»

[07:24] <ShaneC> thanks

[07:25] <carlin> np

[07:29] *** jauaor joined
[07:35] *** abbe left
[07:45] *** abra joined
[08:05] *** hanekomu joined
[08:12] <Tene> ShaneC: .length has been split into .bytes and .chars to account for unicode, etc.

[08:14] *** abbe joined
[08:24] *** iblechbot joined
[08:42] *** TopoMorto joined
[08:51] *** abbe left
[08:57] *** araujo left
[09:00] *** payload left
[09:00] *** pmurias joined
[09:01] *** meppl joined
[09:06] *** jauaor_ joined
[09:07] *** araujo joined
[09:07] *** TopoMorto left
[09:13] *** jauaor left
[09:13] *** jauaor_ is now known as jauaor

[09:19] *** silug left
[09:41] *** am0c left
[10:00] *** Khisanth left
[10:00] *** gbacon left
[10:00] *** mspauldi1g left
[10:00] *** cosimo_ left
[10:01] *** Khisanth joined
[10:01] *** gbacon joined
[10:01] *** mspauldi1g joined
[10:01] *** cosimo_ joined
[10:10] *** masak joined
[10:10] <masak> \o/

[10:11] <pmurias> hi

[10:11] <carlin> o/

[10:12] <masak> another glorious day in the future!

[10:15] * carlin finally finished spectesting OpenBSD, took 15926 wallclock secs

[10:18] *** iblechbot left
[10:27] *** hanekomu_ joined
[10:28] <pugs_svn> r28588 | carlin++ | [t/spec/S02-magicals/config.t] Add openbsd as a known and tested OS. Platform specific spectest failures were: S03-operators/arith #163, S32-num/power #11 (the 1**Inf=NaN problem) and S29-context/sleep #2&4 which I think is the result of system slowness 

[10:37] *** NorwayGeek joined
[10:44] *** abra left
[10:45] *** hanekomu left
[10:47] <masak> I've rambled a little here: http://use.perl.org/~masak/journal/39709

[10:48] <masak> I have one or two more blog posts I hope to write today.

[10:49] <masak> moritz_: irc logger seems to be down.

[10:49] *** meppl left
[10:52] <mberends> masak: moritz is away for the weekend. I' about to leave for a week of work in Groningen, hope to be online after hours.

[10:52] <masak> mberends: oki.

[10:52] <masak> mberends: I'm pondering doing some TDD-based temporal sketching somewhere.

[10:52] <masak> probably in a rakudo fork.

[10:53] <mberends> ok :)

[10:54] <mberends> I'm finishing 'make spectest' for sprixel, then probably return to proto

[10:54] *** abra joined
[10:55] <masak> mberends: I had a thought the other day. I changed Duration.day et al to .days, beacuse that feels more logical. but those accessors might also need an adverb, whose name I haven't settled on yet, which expresses the whole Duration in fractional days.

[10:55] <masak> example: 3 days, 12 hours. without the adverb: 3. with the adverb: 3.5

[10:57] <mberends> hmm, depends how easily it reads in a use case

[10:58] *** icwiener joined
[10:58] <masak> aye.

[10:58] <mberends> days :whole

[10:58] <mberends> no, it's confusing

[10:58] <masak> .days(:whole) or .days: :whole, but yes.

[10:59] <mberends> rather call an .Int when you need one

[10:59] <masak> er, that won't work.

[10:59] <masak> the 12 hours might also be 44 hours.

[10:59] <mberends> too many features is bad for a core spec

[10:59] <masak> also, having the default be integers makes sense.

[11:00] <masak> .days(:only)

[11:00] <carlin> http://theintersect.org/2009/out-in-the-open/ # my experiences with rakudo on OpenBSD

[11:01] <mberends> masak: works for me, but don't add stuff that is suitable for modules

[11:02] <masak> mberends: I know, I shouldn't go overboard.

[11:02] <masak> but my use case is actually the same as always:

[11:02] <masak> (DateTime.new('2010-04') - now()).days(:only).floor

[11:03] *** eternaleye joined
[11:03] <mberends> fair enough :)

[11:03] <masak> without the :only adverb, the use case would be much longer.

[11:03] <colomon> .masak: qq:to ?

[11:04] <masak> colomon: I got that right, no?

[11:04] <mberends> must go soon, plan to read http://www.yaml.org/spec/1.2/spec.html offline

[11:04] <masak> mberends: have the appropriate amount of fun. :)

[11:04] <colomon> masak: dang if I know. 

[11:05] <masak> colomon: S02:263

[11:05] <masak> colomon: it has low recognizability, because it's pending some parser refactors, and thus NYI in Rakudo.

[11:08] *** payload joined
[11:12] <colomon> masak: should it be qq:to/SPAM/   in your example?

[11:13] <masak> colomon: there's a regex form too, but I chose the string form.

[11:13] <masak> I could have written it qq:to'SPAM' as well, I guess.

[11:14] *** silug joined
[11:15] <colomon> I don't see any first mention of SPAM in your example?

[11:16] <colomon> (Is it :to<SPAM>, and the brackets are eaten by html?)

[11:18] <masak> oh!

[11:18] * masak changes it to :to'SPAM'

[11:18] <masak> colomon++ # for noticing

[11:19] <colomon> I just couldn't figure out how what I was seeing could work...

[11:19] <masak> :)

[11:20] <masak> I need to stop writing my blog posts in crippled HTML. it's far too primitive.

[11:20] <masak> I should at least make myself a preprocessor.

[11:21] <colomon> I remember being very excited about the leading whitespace eating in p6 the first time I heard of it, but never leaned the syntax.  :)

[11:21] <colomon> (p6 heredocs, I mean.)

[11:22] <masak> aye

[11:22] <mberends> \o for now, will try to get hotel wifi later &

[11:23] <colomon> A pretty significant portion of my $work perl programming is heredocs, and the leading space issue in p5 makes that code ugly and hard to follow.

[11:24] <masak> mberends: enjoy Groningen!

[11:24] <colomon> so I could see what you were trying to do, but the syntax was baffling.  :)

[11:25] *** NorwayGeek left
[11:25] *** NorwayGeek joined
[11:26] *** mberends left
[11:26] <pmurias> colomon: the leading space is removed automatically

[11:27] *** nErVe joined
[11:29] <buu> colomon: Why is a significant portion of your code in heredocs?

[11:29] <colomon> my $work perl code is =

[11:29] <colomon> whoops

[11:30] <buu> colomon: Hrm?

[11:30] <colomon> has alot of automatic generation of C++ code.

[11:30] <buu> !

[11:30] <buu> Now there's a scary thought

[11:31] <buu> Have you considered.. templates?

[11:31] <colomon> I've started using templates for some of it.

[11:32] <colomon> but for things which involve a lot of repetition in a single file, I still like heredocs better. 

[11:33] <carlin> Does anyone know how IO::Socket.recv() is supposed to work? It only seems to return once the server disconnects.

[11:33] *** NorwayGeek left
[11:33] <colomon> I also haven't figured out how to generate good-looking code from a template.

[11:33] *** NorwayGeek joined
[11:34] <colomon> for my purposes the generated code needs to be human-readable.

[11:34] <masak> pmichaud: compilers/pct/src/Regex/P6Regex.pir, line 93: \w [\w+! <?before \w>] -- would that ever match?

[11:35] <masak> and why the []?

[11:37] *** payload left
[11:45] <buu> colomon: Er, the same way you generate readable html?

[11:45] <pmurias> ruoso: hi

[11:46] <masak> buu: write it by hand? :P

[11:47] <buu> masak: Heh, he's the one generating C++!

[11:47] <masak> hugme: hug colomon

[11:47] * hugme hugs colomon

[11:52] <masak> the following spectests gave non-zero exit status today: t/spec/S11-modules/nested.t t/spec/S12-introspection/methods.t t/spec/S32-num/complex.rakudo t/spec/S32-num/log.rakudo t/spec/S32-num/rat.t

[11:52] <masak> (I'm running bleeding Parrot.)

[11:53] <colomon> ooo, I don't seeing issues with complex, log, and rat.

[11:53] <colomon> btw, are you running bleeding rakudo?

[11:54] <masak> methods.t ran fine out of the harness.

[11:54] <masak> yes, bleeding Rakudo.

[11:55] <colomon> all the new trig tests worked okay?

[11:55] <masak> nested.t gave an interesting ambig dispatch. so that actually looks like a regression.

[11:55] <masak> complex.rakudo gives a Parrot failed assertion.

[11:56] <masak> log.rakudo gives "Method 'log10' not found for invocant of class 'Complex'"

[11:57] <masak> rat.t gives "Method 'Rat' not found for invoc..." oh wait.

[11:57] <masak> maybe I'm not running bleeding Rakudo. :/

[11:58] <colomon> how many tests were there?

[11:58] <masak> ah, I'm not. the automatic update failed due to a dirty checkout. sorry about all the fuss.

[12:02] <masak> now I'm getting 'make: *** No rule to make target `src/classes/Complex.pir', needed by `perl6_s1.pbc'.  Stop.'

[12:02] <masak> er, need to... of course.

[12:02] * masak doesn't think he has woken up yet today

[12:03] *** abbe joined
[12:04] <abbe> carlin: freebsd

[12:04] <dalek> rakudo: 809ca9b | masak++ | src/classes/Signature.pir:

[12:04] <dalek> rakudo: [Signature.pir] fixed typo

[12:04] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/809ca9be448d3a48eb153625967577d08d45d6cf

[12:05] <carlin> abbe: do you get any failures in the spectest: "t/spec/S02-magicals/config.t"?

[12:08] <abbe> carlin: check your PM

[12:10] <carlin> abbe: Got it. I'll send you an email now. :-)

[12:10] *** iblechbot joined
[12:11] <abbe> FreeBSD PR for lang/rakudo: http://www.freebsd.org/cgi/query-pr.cgi?pr=ports/139012

[12:12] <cosimo_> masak: about Squerl, i just tried it. this is what I got: http://gist.github.com/201347

[12:12] <cosimo_> and good day everyone :)

[12:12] * masak looks

[12:14] <masak> cosimo_: worksforme

[12:15] <masak> cosimo_: is your Rakudo very old?

[12:17] <masak> cosimo_: the error seems to be caused by your Rakudo not recognizing the 'use SQLite3:from<parrot>;' properly.

[12:17] <masak> at least the type SQLite3 is undefined for some reason.

[12:18] <masak> colomon: do you have runtime/parrot/library/SQLite3.pir in your Parrot dir?

[12:18] <masak> it should be there since r41150.

[12:19] <colomon> masak: yup

[12:19] <masak> huh.

[12:19] *** Whiteknight joined
[12:19] <colomon> masak: wait, you meant to direct that at cosimo_ , not me.

[12:19] <masak> oops. sorry. :/

[12:20] <masak> cosimo_: do you have runtime/parrot/library/SQLite3.pir in your Parrot dir?

[12:22] <cosimo_> masak: i just pulled rakudo and run Configure with --gen-parrot 

[12:22] <masak> cosimo_: it's possible that that Parrot is too old, then.

[12:23] <masak> I guess you could also copy SQLite3.pir somewhere to make it visible to Parrot.

[12:24] *** masak left
[12:24] *** masak joined
[12:24] <masak> oops. wrong button.

[12:24] <cosimo_> masak: i have parrot r41447

[12:25] <masak> that's new enough.

[12:25] <cosimo_> SQLite3.pir is there

[12:25] <masak> then it's a mystery why it doesn't work.

[12:25] <masak> Tene: ping

[12:26] *** sri_ left
[12:26] *** meppl joined
[12:29] *** sri_ joined
[12:34] <masak> hm. is it really possible to serialize something without breaking encapsulation?

[12:36] <masak> I'm about to persist a Druid board, and all I can think of is generating a series of statements which, when run from within a Druid::Game object, sets all the attributes to their respective values.

[12:36] <masak> but that feels... wrong.

[12:36] <pmurias> masak: only if you have a serialize method

[12:36] <masak> I don't.

[12:37] <masak> hm, tricky.

[12:40] <pmurias> you have to break encapsulation then

[12:40] <masak> yes, I think I do.

[12:40] <pmurias> if you do it in a multi it will still be overidable

[12:40] <masak> aye

[12:41] <masak> if I serialize to an executable Perl 6 string, it feels more extensible.

[12:42] <masak> but there's probably a big security hole in there, too.

[12:42] *** meteorjay left
[12:42] <masak> someone with access to the serialization can just inject arbitrary code.

[12:43] *** zloyrusskiy joined
[12:45] *** ayrnieu left
[12:49] *** ejs joined
[12:49] *** eternaleye_ joined
[12:50] *** eternaleye left
[12:54] <colomon> mask: it seems like serializing to an executable Perl 6 string is the right thing to do?

[12:54] <colomon> perhaps with security added on top of that...

[12:54] *** NorwayGeek left
[12:54] <masak> colomon: yes, such as checking with regexes that the expressions look like I expect them to.

[12:55] <masak> rakudo: class A {}; say A === A.clone

[12:55] <p6eval> rakudo 809ca9: OUTPUT«1␤»

[12:55] *** nErVe left
[12:55] <colomon> I was thinking more along the lines of encrypted MD5 checksum or something like that.  :)

[12:55] <masak> hm. :)

[12:55] <colomon> though I guess that isn't a workable solution with open source code, now that I think about it.

[12:56] <masak> still no easy way to do MD5 in Perl 6, AFAIK.

[12:56] *** abbe left
[12:56] <masak> Parrot has it, but I've never seen Perl 6 code use it.

[12:56] <masak> my freeze/thaw methods are called gelatinize/melt :)

[12:56] <pmurias> masak: checking with regexes seems like a textbook security hole

[12:56] <colomon> sounds like another fine project to work on.  ;)

[12:56] *** NorwayGeek joined
[12:57] <masak> pmurias: why? If I'm expecting an array of arrays of integers, and I make sure the regex checks that for me, what's the security hole.

[12:57] <masak> pmurias: now, I agree generally that the whole design is very brittle.

[12:57] <masak> but right now I'm just trying to make anything work.

[12:57] <masak> this serialization step is essential for a web app to work.

[12:58] *** wknight8111 joined
[12:59] <colomon> so, some sort of serialization package is needed for Perl 6.

[12:59] <masak> lurkers: hear that?

[12:59] <colomon> I was thinking .perl was sufficient, but I think the security issues are overwhelming.

[12:59] <pmurias> .yaml?

[12:59] <masak> that'd be nice.

[12:59] <pmurias> pugs: say [1,2,3].yaml

[13:00] <p6eval> pugs: OUTPUT«--- ␤- >-␤  1␤- >-␤  2␤- >-␤  3␤␤»

[13:00] *** ihrd joined
[13:00] <masak> \o/

[13:00] <ihrd> hi there

[13:00] <pmurias> what does \o/ symbolise?

[13:00] <masak> ihrd!

[13:00] <ihrd> masak: Carl!

[13:00] <masak> pmurias: a happy person with arms outstreched.

[13:00] <masak> ihrd: kak zhizn?

[13:01] *** NorwayGeek left
[13:01] <ihrd> masak: хорошо :)

[13:01] * masak should transcribe, it's very lazy

[13:01] <masak> ihrd: good to hear.

[13:02] <ihrd> rakudo: IO.^methods>>.name.join(', ');

[13:02] *** NorwayGeek joined
[13:02] *** iblechbot left
[13:02] <p6eval> rakudo 809ca9:  ( no output )

[13:02] <ihrd> rakudo: use IO; IO.^methods>>.name.join(', ');

[13:02] <p6eval> rakudo 809ca9:  ( no output )

[13:02] <ihrd> hm :(

[13:03] <ihrd> masak: do we have something like IO::Dir::open nowdays?

[13:03] <masak> ihrd: not to my knowledge.

[13:05] <ihrd> masak: readed your last post, very nice!

[13:06] <masak> just rambling. :) but thanks.

[13:06] <masak> I have two more coming up today, provided I take the time: one about tote and my recent thoughts on it, and one Web.pm weekly post.

[13:08] <masak> bah, Druid has bit-rotted. :/

[13:08] <ihrd> masak: I like '.' and have tendency to use it a lot

[13:08] <masak> me too!

[13:09] <ihrd> and because of thet I offen see myself remove it because of cycle

[13:09] <ihrd> I mean I wroating something like { .foo; .bar; .baz}

[13:09] <masak> I don't know if I expressed it properly in the post, but thanks to the separation of topic and OO topic, we now have both a kind of 'this' (self) and 'that' ($_) in Perl 6.

[13:10] <ihrd> and then my method growing and

[13:10] <ihrd> { .foo; .bar; foreach @a{ .baz; # arrgh}}

[13:12] <ihrd> masak: yes, you are expressed very well

[13:12] <masak> ihrd: well, if you use '->' in the inner for loop, you will conserve the outer $_.

[13:13] <ihrd> realy? (gonna check)

[13:13] <masak> and your '# arrgh' should really be '#`[arrgh]', otherwise the comment will gobble up the '}}' :)

[13:13] *** Whiteknight left
[13:13] <masak> ya realy.

[13:16] *** abra left
[13:16] <ihrd> yes, you are totally right

[13:17] <ihrd> #`arrgh`

[13:17] <masak> no, #`[arrgh]

[13:17] <ihrd> #`[arrrgg]

[13:17] <ihrd> looks ugly

[13:18] <masak> that's the idea.

[13:18] <masak> http://www.youtube.com/watch?v=LJfowXTXOfU

[13:19] <ihrd> made it so ugly... so no one will use it? 

[13:19] <masak> well, the ` is chosen so as not to interfere with anything else.

[13:20] <TiMBuS> do multiline block comments need multiple braces? because they never work if i don't use them and I'm not sure if its a parser issue or thats how its meant to work

[13:20] <TiMBuS> ie #`[[ ]] or #`{{ }}

[13:22] <masak> rakudo: #`[ OH HAI ]; say "alive"

[13:22] <p6eval> rakudo 809ca9: OUTPUT«alive␤»

[13:22] <ihrd> TiMbuS: works just fine with #`[] for me

[13:23] <TiMBuS> hm, lemme look for the old one that wasnt working

[13:23] <ihrd> rakudo: for 1..3 { #`<foo> .say}

[13:23] <p6eval> rakudo 809ca9: OUTPUT«1␤2␤3␤»

[13:23] *** PacoLinux left
[13:24] <ihrd> rakudo: for 1..3 { #`"comment" .say}

[13:24] <p6eval> rakudo 809ca9: OUTPUT«1␤2␤3␤»

[13:25] *** PacoLinux joined
[13:25] <TiMBuS> using a #`[ ] and having a regex with [] within it fails, i guess its just not counting nested tokens

[13:26] <masak> TiMBuS: you still haven't given an example of something that fails. :)

[13:26] <masak> an example is worth a thousand words.

[13:27] <ihrd> rakudo: for 1..3 { #`[/foo/] .say}

[13:27] <p6eval> rakudo 809ca9: OUTPUT«1␤2␤3␤»

[13:27] <TiMBuS> oh, no i guess its not an error after all, you just cant nest braces

[13:27] <TiMBuS> like #`( foo() )

[13:30] <ihrd> we can use 'for 1..3 { #`!WTF! .say}'

[13:30] <ihrd> or for 1..3 { #`?WTF? .say}

[13:30] <masak> TiMBuS: the braces you nest have to be fewer in number than the outermost ones, that's all.

[13:30] <ihrd> it`s looks much better... just add some emmotion

[13:32] <TiMBuS> its catching me out when i comment out a large chunk of code, is all.

[13:32] <ihrd> and #`.narrative comment here.

[13:32] <TiMBuS> wont be much of an issue with a text editor with perl6 highlighting though

[13:33] <ihrd> TiMBuS: yeah

[13:33] <masak> TiMBuS: or you can use Pod: '=begin Comment ... =end Comment'

[13:34] <ihrd> I`m gonna sleep

[13:34] <ihrd> bye!

[13:34] <masak> bye!

[13:35] <TiMBuS> ive never used pod to comment out large sections of code.. in fact the idea never crossed my mind =|

[13:35] <TiMBuS> maybe ill do that

[13:36] *** zloyrusskiy left
[13:37] *** ihrd left
[13:45] *** TiMBuS left
[13:47] *** masak left
[13:51] *** abra joined
[13:52] <colomon> You know, commenting out large sections of code is one of those problems I consider solved by using TextMate as my editor.  It's got a "comment out selection" command that does "single line" commenting on every line of the current selection, and is smart enough to know how to do it in both C++, Perl, and shell scripts.  (Probably dozens of other languages as well, but those are the ones I use.)

[13:52] <colomon> It's drastically easier than adding #if 0 #endif or something like that.

[13:56] <carlin> I like the vim "j." trick to comment out lines

[13:58] *** jaldhar left
[13:58] *** icwiener left
[13:59] *** icwiener joined
[14:01] <diakopter> masak: hi

[14:02] <diakopter> oh

[14:10] *** jaldhar joined
[14:16] *** abra left
[14:16] *** jaldhar left
[14:21] *** jaldhar joined
[14:22] *** Patterner left
[14:25] *** jaldhar left
[14:26] *** jan__ left
[14:26] *** jaldhar joined
[14:26] <pugs_svn> r28589 | pmichaud++ | [S08]:  Some notes where online discussions are at odds with the spec. 

[14:27] <pugs_svn> r28590 | pmichaud++ | [S08]:  Update mime-type for .pod document. 

[14:27] *** Patterner joined
[14:27] *** dakkar joined
[14:28] <pugs_svn> r28591 | pmichaud++ | [S08]:  Update svn:eol-style property. 

[14:30] *** jaldhar left
[14:31] *** jferrero joined
[14:33] *** cognominal joined
[14:35] *** cognominal left
[14:36] *** cognominal joined
[14:46] *** pmurias left
[14:50] *** jaldhar joined
[14:54] *** jaldhar left
[15:03] *** justatheory joined
[15:06] *** Maddingue joined
[15:08] *** zloyrusskiy joined
[15:12] *** Gratz474 joined
[15:12] <Gratz474> how is that parrot vm coming along, i saw it after not hearing much about it for like 3 years

[15:14] *** justatheory left
[15:15] <zloyrusskiy> ask later to developers

[15:20] *** tolkad joined
[15:20] <tolkad> When is perl 7 comming out?

[15:20] <diakopter> um

[15:21] <carlin> The idea is that a Perl6 implementation will become sentient and write Perl 7 itself

[15:21] <hanekomu_> tolkad: New Year

[15:21] <Maddingue> Gratz474: Parrot 1.0 is out since a few months : http://www.parrot.org/

[15:21] <Maddingue> tolkad: first public release of Perl 6 next spring

[15:22] <diakopter> well

[15:23] <tolkad> not perl 6, perl 7

[15:23] <diakopter> tolkad: where did you hear about perl 7

[15:23] <tolkad> well you guys are almost done with perl 6 so I thought you would be starting on perl 7 soon

[15:23] <diakopter> hugme: stretch your hug muscles

[15:24] <diakopter> tolkad: almost done with perl 6?

[15:24] <tolkad> yeah you have this irc bot that can execute it and everything

[15:25] <diakopter> it can execute small subset of the Perl 6 specification on several implementations

[15:25] <diakopter> some larger than others

[15:26] <Gratz474> Maddingue, how will the performance of perl 6 be at that point ?

[15:26] <tolkad> well it should be pretty fast, especially since it can compile to assembly

[15:27] <diakopter> Gratz474: on what use scenario?  micro-benchmarks?  terrible.  developer productivity?  high, hopefully all the way along the learning curve.

[15:27] <diakopter> it can compile to assembly?

[15:27] <tolkad> really? cool

[15:28] <diakopter> no, that's what I'm asking

[15:28] <diakopter> you said it can compile to assembly

[15:28] <diakopter> which implementation?

[15:28] <tolkad> well I just assumed that would be the next step

[15:29] <tolkad> I mean why wouldn't it be able to compile to assembly?

[15:29] <diakopter> I don't know if Gratz474 was looking for someone's assumption as the answer to "how will the performance be... "

[15:29] <diakopter> optimizing compilers don't appear out of nowhere

[15:31] <diakopter> Gratz474: for news about Parrot, you can take a look at www.parrot.org

[15:31] *** jan___ joined
[15:31] <diakopter> also, there are usually folks on the irc channel #parrot on the magnet irc network

[15:32] <Gratz474> i mean by performance not like it will be super fast but atleat something not suuuuper slow ;) 

[15:35] <diakopter> ok. here are a couple of microbenchmarks, for the morbidly curious

[15:36] *** jaldhar joined
[15:37] * diakopter waits for each to finish

[15:39] *** xinming_ joined
[15:40] *** gabiruh joined
[15:41] *** zaphar_ps joined
[15:45] *** iblechbot joined
[15:46] *** synth joined
[15:50] *** zloyrusskiy left
[15:53] <diakopter> diakopter@d5dev01:~$ time perl -e 'my $a=0; 1 while ++$a < 500_000_000'

[15:53] <diakopter> real    0m27.460s

[15:53] <diakopter> diakopter@d5dev01:~$ time rakudo -e 'my $a=0; 1 while ++$a < 1_000_000'

[15:53] <diakopter> real    0m26.768s

[15:53] <diakopter> diakopter@d5dev01:~$ time pugs -e 'my $a=0; 1 while ++$a < 100_000'

[15:53] <diakopter> real    0m25.662s

[15:53] <diakopter> diakopter@d5dev01:~$ time perl sprixel.pl -e 'my $a=0; 1 while ++$a < 25_000'

[15:53] <diakopter> real    0m28.661s

[15:54] <diakopter> I ran them with different counts until they were roughly close in duration

[15:54] <colomon> That's 500x difference I expect to see between Perl 5 and current Rakudo.

[15:55] <diakopter> for this microbenchmark, yes. :)

[15:55] <diakopter> it doesn't say all that much about other programs

[15:55] <colomon> yeah, but I've seen similar numbers with other programs that have large loops.

[15:57] <colomon> Or was that other test of mine 5000x slower?

[15:57] *** xinming left
[16:02] <diakopter> oops; I pasted the wrong run for sprixel:

[16:02] <diakopter> diakopter@d5dev01:~/src/pugs/src/perl6$ time perl sprixel.pl -e 'my $a=0; 1 while ++$a < 50_000'

[16:02] <diakopter> real    0m31.087s

[16:06] *** [particle] joined
[16:06] <diakopter> [particle]: howdy

[16:08] *** zaphar_ps left
[16:19] <diakopter> block setup/return:

[16:19] <diakopter> time perl -e '{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}'

[16:19] <diakopter> real    0m0.008s

[16:19] <diakopter> time perl sprixel.pl -e '{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}'

[16:19] <diakopter> real    0m2.263s

[16:19] <diakopter> time rakudo -e '{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}'                                    

[16:20] <diakopter> real    0m2.991s

[16:20] <diakopter> time pugs -e '{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}'

[16:20] <diakopter> real    0m1.071s

[16:23] <diakopter> for sprixel, only 0.05s of that is the run-time (rest is parsing/emission to JS)

[16:23] *** ejs left
[16:24] <diakopter> I imagine that's similar for rakudo

[16:25] *** ayrnieu joined
[16:26] *** snearch joined
[16:32] *** envi^home left
[16:48] *** FOAD joined
[16:49] <tolkad> rakudo: say 3;

[16:49] <p6eval> rakudo 809ca9: OUTPUT«3␤»

[16:49] <tolkad> rakudo: say `ls`;

[16:49] <p6eval> rakudo 809ca9: OUTPUT«say requires an argument at line 2, near " `ls`;"␤in Main (src/gen_setting.pm:2562)␤»

[16:50] <tolkad> rakudo: say system('ls');

[16:50] <p6eval> rakudo 809ca9: OUTPUT«Could not find non-existent sub system␤»

[16:50] <tolkad> rakudo: say exec('ls');

[16:50] <p6eval> rakudo 809ca9: OUTPUT«Could not find non-existent sub exec␤»

[16:50] <tolkad> how do you execute system commands in perl6?

[16:50] <FOAD> rakudo: say `ls .`;

[16:51] <p6eval> rakudo 809ca9: OUTPUT«say requires an argument at line 2, near " `ls .`;"␤in Main (src/gen_setting.pm:2562)␤»

[16:52] <tolkad> rakudo: while(1){echo 1;}

[16:53] <p6eval> rakudo 809ca9: OUTPUT«Confused at line 2, near "{echo 1;}"␤in Main (src/gen_setting.pm:3468)␤»

[16:53] <tolkad> wat

[16:53] <tolkad> rakudo: while(1) {echo 1;}

[16:53] <p6eval> rakudo 809ca9: OUTPUT«Confused at line 2, near "{echo 1;}"␤in Main (src/gen_setting.pm:3468)␤»

[16:53] <ayrnieu> It doesn't know what 'echo' means.

[16:53] <tolkad> rakudo: while(1) {say 1;}

[16:53] <tolkad> oh I forgot

[16:53] <p6eval> rakudo 809ca9: OUTPUT«Confused at line 2, near "{say 1;}"␤in Main (src/gen_setting.pm:3468)␤»

[16:54] <tolkad> rakudo: while(1) say 1;

[16:54] <p6eval> rakudo 809ca9: OUTPUT«Confused at line 2, near "say 1;"␤in Main (src/gen_setting.pm:3468)␤»

[16:55] *** tolkad left
[17:03] *** szabgab joined
[17:05] *** Su-Shee joined
[17:05] <Su-Shee> hi. :)

[17:06] <FOAD> rakudo: say "a"; say "b";

[17:06] <p6eval> rakudo 809ca9: OUTPUT«a␤b␤»

[17:07] <FOAD> rakudo: my $a = "test"; $a = $a.reverse; say $a;

[17:07] <p6eval> rakudo 809ca9:  ( no output )

[17:07] <FOAD> Mmm.

[17:09] *** nErVe joined
[17:09] *** nihiliad joined
[17:09] <FOAD> rakudo: my $a = "test"; $a = $a.flip; say $a;

[17:10] <p6eval> rakudo 809ca9: OUTPUT«tset␤»

[17:10] <FOAD> Ah.

[17:11] <moritz_> good localtime() futurebutterflies

[17:11] *** masak joined
[17:12] <colomon> moritz_: You're back!

[17:13] <dalek> rakudo: a796cf1 | moritz++ | src/setting/Operators.pm:

[17:13] <dalek> rakudo: add another &infix:<...> multi to handle the case 3 ... $+2, $max

[17:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/a796cf1685594947e4682fb0fa72d93928e39850

[17:13] <dalek> rakudo: db7c668 | moritz++ | src/setting/Complex.pm:

[17:13] <dalek> rakudo: Complex.ACCEPTS

[17:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/db7c66847ab27a35484ae5e085e813e016f5e763

[17:13] <masak> and he's committing!

[17:13] <moritz_> sure I am ;-)

[17:13] <pugs_svn> r28592 | moritz++ | [perl.org] refactored style sheet (less duplication) 

[17:13] <masak> moritz_: what's 'the case 3 ... $+2, $max'

[17:14] <colomon> I was just wondering if ...  (as described http://dev.pugscode.org/changeset/28344) worked yet.

[17:14] <colomon> (That change must have happened while I was on vacation.)

[17:14] <moritz_> masak: it's the '&infix<...>($somthing, [Code, $limit)' form

[17:15] <pugs_svn> r28593 | moritz++ | [perl6.org] borders for subpage columns 

[17:15] <pugs_svn> r28594 | moritz++ | [S03] markup 

[17:15] <pugs_svn> r28595 | moritz++ | [S03] thinko 

[17:15] <pugs_svn> r28596 | moritz++ | [S03] be more consequent in removing :by 

[17:15] <FOAD> ]

[17:16] <pugs_svn> r28597 | moritz++ | [S32/Numeric] major overhaul 

[17:16] <pugs_svn> r28597 | 

[17:16] <pugs_svn> r28597 | * Most methods that were in Num are now Numeric

[17:16] <pugs_svn> r28597 | * sign() and the rounding methods are now in Real

[17:16] <pugs_svn> r28597 | * document (at least partially) Rat, Num and Int

[17:16] <masak> FOAD: thanks. :)

[17:17] <colomon> moritz_: Are you using git-svn to do that?

[17:17] <masak> moritz_: so '$+2' should really be '* + 2' or something?

[17:17] <moritz_> masak: uhm, yes, *+2

[17:17] <moritz_> colomon: yes

[17:17] <colomon> rakudo: for 1..10 { say $_; }

[17:17] <p6eval> rakudo 809ca9: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[17:18] <colomon> rakudo: for 1...10 { say $_; }

[17:18] <p6eval> rakudo 809ca9: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[17:18] <FOAD> You're welcome. :P

[17:18] <masak> moritz_++ # features

[17:23] *** absurddoctor left
[17:25] *** kcwu left
[17:25] <colomon> rakudo: for 1, 3 ... 10 { say $_; }

[17:25] <p6eval> rakudo 809ca9: OUTPUT«Multiple Dispatch: No suitable candidate found for 'cmp', with signature 'PP->I'␤in sub infix:... (src/gen_setting.pm:2488)␤called from Main (/tmp/HEuSDm02Jt:0)␤»

[17:28] <pugs_svn> r28598 | moritz++ | [t/spec] correct and unfudge ~~ Complex tests 

[17:28] <pugs_svn> r28599 | moritz++ | [t/spec/TODO] more updating tasks 

[17:28] <pugs_svn> r28600 | moritz++ | [t/spec] remove range-by.t, :by is deprecated 

[17:28] <pugs_svn> r28601 | moritz++ | [t/spec] more tests for series 

[17:28] <pugs_svn> r28602 | moritz++ | [t/spec] clean up lazy-lists.t 

[17:28] <pugs_svn> r28602 | 

[17:28] <pugs_svn> r28602 | tests that rely on the exact form of .perl output are wrong.

[17:29] <pugs_svn> r28603 | moritz++ | [t/spec] more :by removal 

[17:29] <pugs_svn> r28604 | moritz++ | [t/spec] test series operator with scalar on the left 

[17:29] <pugs_svn> r28605 | moritz++ | [t/spec] :let and :temp in regexen 

[17:29] <pugs_svn> r28606 | moritz++ | [t/var] remove two test files which seem rather outdated 

[17:32] *** meppl left
[17:32] *** ilbot2 joined
[17:33] * moritz_ bemoans a lack of IRC logs over the weekend

[17:33] <colomon> it was pretty quiet over the weekend.

[17:34] <colomon> though lanny wrote a nice function to convert a Num to a Rat.

[17:34] <colomon> diakopter did a bunch of cool stuff, as per normal lately.

[17:35] * moritz_ runs his 'update-stuff' script that updates about 15 repositories ;-)

[17:35] <moritz_> I see that perl-5.11.0 wwas released - obra++

[17:35] <masak> obra++

[17:36] <moritz_> masak++ the dot sigil

[17:37] <diakopter> moritz_: can ilbot2 import from irssi logs?

[17:37] <moritz_> diakopter: no

[17:37] <diakopter> sad

[17:37] <moritz_> I've written a script, but sadly some of the display logic depends on monotonic primary keys

[17:37] <moritz_> and importing older stuff would break that

[17:38] *** zloyrusskiy joined
[17:38] *** absurddoctor joined
[17:45] *** kcwu joined
[17:46] *** absurddo1tor joined
[17:53] *** tak11 joined
[17:56] *** absurddoctor left
[17:58] *** Chillance joined
[17:59] <moritz_> mildew-js: say 3, 4

[17:59] <p6eval> mildew-js: OUTPUT«execute(): execute error: ReferenceError: P6Int is not defined at mildew line 336.␤»

[17:59] <moritz_> mildew-js: say '3'

[17:59] <p6eval> mildew-js: OUTPUT«3␤»

[18:05] *** hanekomu_ left
[18:06] *** FOAD_ joined
[18:11] *** snearch left
[18:11] <colomon> moritz_: so when do we start implementing Numeric?  ;)

[18:12] <moritz_> colomon: ;-)

[18:13] <moritz_> colomon: let's wait some more until the bikeshedding has settled

[18:14] <masak> so Numeric is the big all-encompassing role, yes?

[18:15] <moritz_> yes

[18:16] <moritz_> do we still have an 'Ordered' role?

[18:16] <moritz_> the only mentin is in S02:1073:    Range       A pair of Ordered endpoints

[18:16] <moritz_> which might just as well be a typo

[18:18] <colomon> moritz_: I suppose I should learn how to use Roles first anyway.  :)

[18:19] <moritz_> colomon: in this case roles aren't scary - if you know Java's interfaces, you have a very good idea of what happens

[18:19] <moritz_> except that roles can contain implementation too

[18:20] <masak> there's an Order enum.

[18:21] <colomon> moritz_: I have never programmed in Java, but I've read the C# specs for interfaces.  And I've used C++ multiple inheritance in more or less the way roles are supposed to work, I think.

[18:21] <colomon> but it's still a long step from that to using them in practice, I bet.

[18:21] <moritz_> ah, and there's an Ordering too

[18:22] *** FOAD left
[18:22] *** FOAD_ is now known as FOAD

[18:22] *** bionoid left
[18:22] *** bionoid joined
[18:22] <moritz_> oh

[18:23] *** bionoid is now known as Guest83709

[18:23] <moritz_> std: subset Ordering where Signature | KeyExtractor | Comparator | OrderingPair | Whatever;

[18:23] <p6eval> std 28606: OUTPUT«ok 00:01 100m␤»

[18:23] <moritz_> uhm, subset of what?

[18:23] <masak> I have a question about Array.delete. S32/Containers describes it with 'Sets elements specified by C<@indices> in the invocant to a non-existent state, as if they never had a value.' does this mean something different from 'Sets elements specified by C<@indices> in the invocant to C<undef>'?

[18:23] <moritz_> (take straigt from S29)

[18:24] <masak> moritz_: appears it parses, at least.

[18:24] <masak> maybe there's an implicit 'of Object'

[18:24] <moritz_> masak: for typed arrays there's a difference, yes

[18:24] <masak> ah, hence the strange wording.

[18:24] <masak> I see. thanks.

[18:25] <moritz_> yw

[18:25] *** baest_ joined
[18:25] <masak> the 'as if it never had a value' currently has a ghastly interpretation in Rakudo. it gives a Null PMC access.

[18:25] <masak> well, Parrot does.

[18:25] <moritz_> lol

[18:26] *** baest_ is now known as baest

[18:26] <masak> I'm reading the PIR of that routine now. it basically says 'make these indices contain the Null PMC'.

[18:26] <masak> so no wonder.

[18:26] <moritz_> assigning an undef would be much better, even if not quite accurate

[18:27] <masak> maybe I should just port it to the Setting and get it over with.

[18:27] * masak tries

[18:30] <moritz_> colomon: did you apply the Num -> Rat patch?

[18:31] <colomon> moritz_: I did not, thought I have a copy locally.

[18:31] <colomon> Did he send it to perl 6 compiler?  I don't always follow that...

[18:32] <moritz_> it's in RT (and thus p6c, I think)

[18:32] *** absurddo1tor left
[18:32] <colomon> (copy locally == cut and paste from lanny's nopaste)

[18:33] <colomon> If you'd like, I'd be happy to track it down and do it.  Be good practice...

[18:33] <colomon> (track down the proper patch, I mean, so he gets credited properly)

[18:34] <moritz_> sure, would be great

[18:35] * moritz_ looks at the patch

[18:36] <moritz_> I'm a bit worried that sub _modf might be visible to Perl 6 programs

[18:38] *** cahek joined
[18:39] <Tene> masak: pong

[18:39] <masak> Tene: at the place in time where I pinged you, did you notice cosimo_'s troubles with SQLite3?

[18:40] <Tene> masak: I haven't read any scrollback.  I could if you'd like.

[18:40] *** payload joined
[18:41] <colomon> moritz_: interesting... he didn't have _modf in the version I saw.

[18:41] <moritz_> colomon: probably duplication removal

[18:41] <colomon> should it be "my sub" or something like that?

[18:42] <masak> Tene: short summary: SQLite3 evaluates to 'Undef' on line 50 in SQLite.pm. it worksforme, but not for cosimo_. we don't know why.

[18:42] <moritz_> colomon: that would be great. Last time I checked it 'my' functions didn't work in the setting - but maybe they do now

[18:42] <colomon> let me see what happens...

[18:43] <moritz_> I didn't quite understood how the patch works - but it gives 335/113 for pi, which is a very nice approximation ;-)

[18:43] *** RoomsUser_ joined
[18:43] <moritz_> and 1/10 for 0.1, -1.5 for -0.2 etc

[18:44] <moritz_> in short, I like it ;-)

[18:44] <Tene> masak: if you can find anyone who can reproduce the problem, I can troubleshoot it.

[18:44] <masak> cosimo_: ping

[18:44] <Tene> masak: the first step I'd try is running it under strace.  if you can get me an strace log, it should help a lot.

[18:44] <colomon> moritz_: "patch does not apply"

[18:45] <masak> aye. my intuition told me that too, but I'm still too inexperienced to know what to _do_ with such an intuition. :P

[18:45] <moritz_> colomon: it said that for me too, but in fact it did apply

[18:45] <moritz_> I changed a small detail, then did git-add src/setting/Num.pm

[18:45] <moritz_> and then git-am --continue

[18:45] <Tene> masak: you'd grep the log for SQLite to see what paths it looked for the library in.

[18:46] <masak> ah.

[18:46] <colomon> moritz_: didn't apply at all for me.

[18:47] <lisppaste3> moritz_ pasted "version of lanny++'s patch that applies right now" at http://paste.lisp.org/display/88169

[18:47] <moritz_> colomon: try this one

[18:47] <moritz_> (with git-am $filename)

[18:48] <colomon> moritz_: that's just the diffs between his patch and yours, isn't it?

[18:48] <moritz_> uhm, sorry

[18:49] <moritz_> right

[18:49] <moritz_> let me get you the right one

[18:50] <lisppaste3> moritz_ annotated #88169 "next try (actualy patch for colomon++)" at http://paste.lisp.org/display/88169#1

[18:50] *** s1n1 joined
[18:51] <colomon> moritz_++

[18:53] <colomon> working on testing it now.

[18:53] *** RoomsUser_ left
[18:58] *** perl_7_0_0 joined
[18:58] *** zloyrusskiy left
[18:58] <colomon> yeah, the 355/113 test is very nice.  and you can actually get a lot better rational pi by upping the tolerance....

[18:59] <colomon> Trying it as "my sub" now.  (Or should I check it in first and then do that?)

[19:00] <moritz_> first try

[19:00] <colomon> I meant check in lanny's patch and then mess with it -- not sure if I said that clearly the first time.

[19:00] <moritz_> I do it this way usually: 

[19:00] <moritz_> 1) apply the original patch

[19:00] <moritz_> 2) experiment with it

[19:01] <moritz_> 3) commit my changes

[19:01] <moritz_> 4) run git-rebase -i HEAD^3

[19:01] <moritz_> squash my changes in the original patch

[19:01] <moritz_> 5) push

[19:01] <moritz_> 6) profit

[19:02] <colomon> I used "git apply patch", that doesn't seem to have staged the patch or committed it or anything.  I don't seem to have git-am?

[19:02] <masak> a blog post about the non-ubiquity of TDD: http://lastofthecarelessmen.blogspot.com/2009/10/testing.html

[19:02] *** meppl joined
[19:03] <moritz_> colomon: git-am also addes the author information automatically

[19:04] <moritz_> colomon: so if you apply with 'git-apply' you need to commit with 'git commit --author="..."'

[19:04] <colomon> so I probably should do that before making my own change on top of his, yes?

[19:04] <moritz_> yes

[19:05] <colomon> Okay.  btw, my sub seems to have worked, at least with my first crude test of it.

[19:06] *** NorwayGeek left
[19:06] *** NorwayGeek joined
[19:07] <colomon> should I include his e-mail in the author string, do you think?

[19:07] <moritz_> well, if (1.1).Rat lives and Num::$subname doesn't work, it's fine

[19:07] <moritz_> yes, include email address

[19:07] <colomon> danke.

[19:07] *** NorwayGeek left
[19:08] *** NorwayGeek joined
[19:08] *** NorwayGeek left
[19:09] *** NorwayGeek joined
[19:10] *** nErVe left
[19:15] *** nErVe joined
[19:16] <colomon> running tests now.

[19:16] *** Su-Shee left
[19:18] *** perl_7_0_0 left
[19:26] *** crythias joined
[19:27] *** dakkar left
[19:33] *** NorwayGeek left
[19:43] <moritz_> with this patch (with non-'my' sub) I get this error in t/spec/S11-modules/nested.t

[19:43] <moritz_> ok 5 - can use multiple "Role $name" statements (in multiple files) RT 67976

[19:43] <moritz_> Ambiguous dispatch to multi '_block1697'. Ambiguous candidates had signatures:

[19:43] <moritz_> :()

[19:43] <moritz_> in Main (src/gen_setting.pm:3468)

[19:44] <moritz_> looks like a code generation bug to me

[19:44] <moritz_> (or maybe it's a newer parrot version that triggers it, not sure

[19:47] *** s1n joined
[19:47] <colomon> You're ahead of me on the spectest, I'm still in S06.  :)

[19:47] <moritz_> I let both of my cores work on it ;-)

[19:48] <moritz_> ok, that failure seems to be related to parrot

[19:48] <colomon> I think firefox is stealing all my cycles anyway...

[19:49] *** s1n1 left
[19:50] <colomon> oh hey, I get that failure too.

[19:51] <colomon> Hmm... I didn't run perl Configure before this spectest, maybe that would help?

[19:54] <moritz_> I'm currently trying an older parrot revision

[19:56] *** s1n left
[19:57] <masak> I got that error too earlier today.

[19:58] <moritz_> can parrot's parallel build being broken doesn't help with bisecting, really

[19:59] *** nErVe left
[20:00] <masak> sorry, what?

[20:02] <moritz_> s/can /

[20:02] <moritz_> sorry :)

[20:02] *** pmurias joined
[20:03] <masak> ah. :)

[20:03] <colomon> Is -j2 the "use two cores" flag for make?

[20:04] <masak> it is.

[20:06] *** szabgab left
[20:06] * moritz_ is baffled by that parrot error

[20:06] <moritz_> i can got back to a parrot version as old as Wednesday and still reproduce it

[20:08] <masak> the plot thickens!

[20:09] *** s1n joined
[20:09] *** jauaor left
[20:11] <colomon> not a parrot error?  I'm pretty sure I ran the full spectest before committing all the trig stuff on Friday, and it all passed.  My parrot hasn't updated since them, as far as I know.

[20:12] <colomon> (definitely not.)

[20:14] <moritz_> I'm trying older versions of parrot now, step by step

[20:15] <moritz_> can sombody confirm or deny the sanity of http://smolder.plusthree.com/app/public_graphs/start/18 please?

[20:16] *** Kodi joined
[20:16] <colomon> moritz_: I added a few trig tests on friday, if that's what you're asking.  ;)

[20:16] <moritz_> "a few"

[20:17] <moritz_> ;-)

[20:18] <masak> whoa.

[20:19] <Kodi> rakudo: my @foo; my $x = 1; push @foo, $x; ++$x; say $x; say @foo[0];

[20:19] <p6eval> rakudo a796cf: OUTPUT«2␤2␤»

[20:19] <colomon> I wondered when someone would noticel

[20:19] <moritz_> ;-)

[20:19] <masak> spectest finished. duration: 110 minutes. failures in t/spec/S03-operators/series.rakudo t/spec/S03-operators/smartmatch.rakudo t/spec/S11-modules/nested.t t/spec/S32-num/rat.t

[20:20] <moritz_> masak: are you on latest rakudo?

[20:20] <masak> I'll check.

[20:20] <moritz_> that looks suspiciously like tests I touched today

[20:20] <moritz_> (except nested.t)

[20:21] <Kodi> rakudo: my @foo; my $x = 1; @foo[0] = $x; ++$x; say $x; say @foo[0];

[20:21] <p6eval> rakudo a796cf: OUTPUT«2␤1␤»

[20:21] <moritz_> oh wait, it's much easier

[20:21] <moritz_> TimToady++ touched the test recently.

[20:21] <masak> I seem to be on bleeding, yes.

[20:22] <moritz_> masak: could you nopaste the bit more verbose summary please?

[20:22] <masak> aye, no prob.

[20:22] <Kodi> I do think that's a bug— push ought to add the value, not an alias. Does anybody know if it's already been reported?

[20:22] <masak> moritz_: http://gist.github.com/201612

[20:23] <masak> Kodi: it has.

[20:23] <Kodi> masak: Oh, good, thanks.

[20:24] <masak> Kodi: http://rt.perl.org/rt3/Ticket/Display.html?id=69548

[20:24] <Kodi> Yeah, it's pretty freaky all right.

[20:24] <pugs_svn> r28607 | moritz++ | [t/spec] fudge test for rakudo that fails after adding a stubbed role 

[20:25] * moritz_ worksaround that bug by @a.push: do { my $y = $x }

[20:25] <masak> that but report is recent, but I think the bug itself has been known longer. it feels familiar.

[20:25] <moritz_> same as the gather/take bug

[20:25] * masak 's workaround is @a.push($x+0)

[20:25] <moritz_> masak: that only works for numbers

[20:25] <masak> oh, for sure.

[20:25] <masak> my programs only handle numbers. :P

[20:26] <Kodi> I ended up doing @a[@a.end + 1] = $x.

[20:26] <masak> ouch. :)

[20:26] <masak> peraps we should rewrite push that way. :P

[20:26] <Kodi> Indeed.

[20:26] <moritz_> certainly @a[*+1] = $x read nicer, though ;-)

[20:28] <masak> yes, but it's wrong.

[20:28] <masak> it should be 'minus 1'. :P

[20:28] <masak> oh wait.

[20:28] <masak> no, I'm wrong.

[20:28] <moritz_> shouldn't it be *+0 or so?

[20:28] <masak> it should.

[20:28] <moritz_> rakudo: my @a = 1, 2; @a[*+0] = 3; say @a.perl

[20:29] <p6eval> rakudo a796cf: OUTPUT«[1, 2, 3]␤»

[20:29] <masak> Kodi: check if your code is doing what you intend.

[20:29] <moritz_> rakudo: my @a = 1, 2; @a[*] = 3; say @a.perl

[20:29] <p6eval> rakudo a796cf: OUTPUT«[3, undef]␤»

[20:29] <Kodi> moritz_: It's fine now.

[20:29] <masak> that's correct.

[20:29] <moritz_> aye

[20:29] <masak> but perhaps hard to explain to newbies.

[20:29] *** jaldhar left
[20:29] <moritz_> whatever ;-)

[20:30] <masak> 哈哈

[20:31] *** Ctrl-ZZZ left
[20:34] <colomon> why is the @a[*]  is some sort of whatever slice?

[20:35] <colomon> try that again.

[20:35] <colomon> is the @a[*] some sort of whatever slice?

[20:36] *** s1n left
[20:36] <masak> it's the slice of all elements.

[20:36] <masak> at least along the zeroth dimension.

[20:38] *** s1n joined
[20:39] <masak> moritz_++ # nice sprixel post

[20:40] <moritz_> thanks

[20:40] <moritz_> diakopter++ # he reviewed it and improved it here and there

[20:40] <colomon> hey, sweet, spectest runs in 15 minutes on my quad core linux box

[20:40] <colomon> if I use -j4

[20:41] <moritz_> I think the test harness doesn't honour the -j option (that only affects the build), but you can also use 'TEST_JOBS=4 make -j 4 spectest'

[20:42] <moritz_> (it defaults to 3)

[20:43] <colomon> hmmm... so that was just the effect of having 4 cores available to handle 3 jobs?  (And lots of ram.)

[20:43] *** nbrown left
[20:43] <masak> rakudo: class MyHash is Hash {}; my MyHash $h

[20:43] <p6eval> rakudo a796cf: OUTPUT«Could not build C3 linearization: ambiguous hierarchy␤in sub trait_mod:of (src/gen_setting.pm:136)␤called from Main (/tmp/2nZgZpKlVy:0)␤»

[20:43] <masak> workaround: wrap/delegate, I guess.

[20:43] <masak> still, sad.

[20:45] *** nbrown joined
[20:45] <moritz_> colomon: I'd think so

[20:47] *** nErVe joined
[20:47] *** nErVe left
[20:49] <pmurias> masak: url? for the blog pos

[20:49] <pmurias> t

[20:49] <masak> http://perlgeek.de/blog-en/perl-6/announcing-sprixel.html

[20:52] *** Guest83709 is now known as bionoid

[20:52] *** lanny joined
[20:52] *** meppl left
[20:52] <lanny> Hi, all.  In response to backlog _modf should go away when perl6 has a POSIX library.

[20:53] <moritz_> lanny: I think that colomon has a fix right now which makes _modf purely internal...

[20:53] <colomon> at least in theory...

[20:53] <moritz_> which means it's no problem at all

[20:54] <colomon> should I verify that my spectest failures are the same as the general run of spectest failures and then check in lanny's patch?

[20:54] <lanny> Excellent.

[20:54] <moritz_> colomon: yes

[20:55] <lanny> Where is the proper place to bikeshed on Numeric btw?  I'm not looking to retread covered ground.

[20:55] <masak> ah, so Jon Lang, a p6l regular, isn't on IRC at all? I like that subset of the Perl 6 community, they come off as tortoises simply by not being on IRC. :)

[20:55] <masak> nothing wrong with that, of course.

[20:56] <masak> lanny: bikeshedding usually takes place on p6l. but here is fine, too.

[20:56] <lanny> Well in that case... :)

[20:56] <lanny> I notice that sign() is in Real.  Shouldn't it be higher up in the structure.  I would think 7.Int.sign might be of interest.

[20:56] <lanny> I could have used it in Num.Rat in fact.

[20:56] <moritz_> Int is a Real

[20:57] <moritz_> and so is Num

[20:57] <masak> how do I tell an Array to be one element shorter than it is?

[20:57] <lanny> Ok.  How about Rat?

[20:57] <moritz_> Rat is Real too

[20:57] <lanny> Don't make me come over there.  :)

[20:57] <pugs_svn> r28608 | Kodi++ | [t/spec/S32-array/push.t] Added a test for RT #69548 

[20:57] <moritz_> masak: shift? pop?

[20:57] <masak> moritz_: oh, right. thanks.

[20:57] <lanny> Ok.  Real in perl6 must mean something different then in mathematics

[20:58] <moritz_> lanny: Real means "not complex" in Perl 6

[20:58] <moritz_> and as far as I understand mathematics, that's roughly the same

[20:58] <moritz_> and Rat is a subset of Real, of course

[20:58] <lanny> No.  Rats can't represent all Reals so Rats can't be Reals (in math)

[20:59] <moritz_> well, that's why we don't use inheritance for that

[20:59] <lanny> Understood.  I'm just thinking of the confusion such terminology will cause.

[20:59] <moritz_> but rather role composition

[20:59] *** jaldhar joined
[20:59] <lanny> Yeah.  Been playing with that in Scala.  My heads about half wrapped around role composition

[21:00] <moritz_> if you can do $op with Real, then you can do $op with Rat

[21:00] *** Kodi left
[21:00] <moritz_> which is why Rat implements the Real interface/role

[21:00] <lanny> decades of study are yelling at you in my head right now.  :)

[21:01] <moritz_> there's some kind of impedance mismatch between the Perl 6 type system and mathemtical subsets...

[21:01] <lanny> But I don't have a quick counterexample.

[21:01] <lanny> Yes.  I'm just thinking of the pain that's caused in Haskell.

[21:01] <moritz_> lanny: note that I don't say that $op on Rat produces a $at again

[21:01] <lanny> Although wanting to go off the deep in for the prelude isn't something I'd want to see in p6 either.

[21:01] *** jferrero left
[21:02] <moritz_> it might very well produce a Real

[21:02] <lanny> Noted.

[21:02] <moritz_> like sqrt(Rat) -> Real

[21:02] <lanny> Bumped into that trying to produce a multiply-with-carry RNG and not having uint...

[21:07] <lanny> Would you like a sqrt(Rat)->Rat?  I've got one squirreled away somewhere.

[21:07] <colomon> lanny: I think that way lies madness.

[21:07] <lanny> :P

[21:08] <lanny> colomon: was more of a poke than something I think was really needed

[21:08] <colomon> well seriously, all of the trig functions could be implemented to return Rats if called with Rats

[21:08] <lanny> I am still concerned about the terminology though.

[21:09] <moritz_> I don't think it's a good idea

[21:09] <moritz_> conceptually all these functions return reals, not rationals

[21:10] <moritz_> (and yes, I'm away that the computer only knows about rationals...)

[21:11] <pugs_svn> r28609 | diakopter++ | [sprixel] a few medium-ish refactorings; reduced durations of while/preincrement microbenchmark by 50% 

[21:11] *** nErVe joined
[21:12] <masak> tests++ # you are my joy and my greatest enemy

[21:12] <masak> s/enemy/adversary/

[21:12] * moritz_ was about to suggest rm if they were really enemies ;-)

[21:13] <lanny> Surely they are more antagonist?  If they are *your* adversary I'll start saying your name a lot while writing them such that I am overlooked.

[21:14] * moritz_ just needed 2 minutes to find the xterm where he started a largish mv

[21:15] <moritz_> time to clean up my windows, it seems ;-)

[21:15] <masak> beating the tests is fun, though.

[21:15] <masak> the end guy is hard.

[21:16] <lanny> Is there thought that p6 will have a POSIX for things like modf() or will such be rolled into p6 and the posix implementations provide the lifting at the machine level for posix machines?

[21:17] <lanny> Motivating thought is Real.modf()

[21:18] * moritz_ doesn't know

[21:21] <pugs_svn> r28610 | pmurias++ | [mildew-js] moved runtime.js into re-mildew 

[21:21] <pugs_svn> r28611 | pmurias++ | [mildew-js] some progress on the runtime 

[21:21] <pmurias> lanny: the second option is preferable when possible

[21:25] *** nbrown left
[21:25] <lanny> Ok.  So it wouldn't be taken amiss if I document a modf() in role Real for S32?

[21:26] *** xinming joined
[21:27] <lanny> and (looking at POSIX) fmod

[21:27] *** payload left
[21:27] <lanny> alternately I can throw these ideas at perl6-language and see if they stick there.

[21:28] <diakopter> oh.  my microbenchmark comparisons were way off, earlier... due to very large differences in 'startup/parse' time

[21:28] <diakopter> hrmph

[21:28] <moritz_> lanny: we currently try to avoid POSIX names, except when they are very good

[21:28] <moritz_> lanny: and I don't think modf is a good name ;-)

[21:28] <moritz_> s/try/trying/ # time for me to go to bed ;-)

[21:29] <lanny> I agree.  It's just what I had for my perl5 impl

[21:30] <diakopter> pmurias: I did a bunch of refactoring... improved sprixel's runloop/traversal by around 1-2 decimal orders... substituted a smart-ish JS exception handling system for tons and tons of checks

[21:32] <diakopter> also (for some reason), rakudo on my VPS runs 10-20x slower than on my notebook in a vmware linux vm

[21:32] <diakopter> but sprixel runs about the same.

[21:32] <diakopter> v8 & perl are 64-bit on both.

[21:32] <moritz_> is it the same architecture? (32bit vs. 64bit)?

[21:33] <moritz_> hm, ok

[21:34] <diakopter> anyway, here are some updated microbenchmark numbers: (just for entertainment purposes only; do not base any claims on these non-numbers)

[21:36] <diakopter> rakudo -e 'loop (my $x=0;++$x < 100000;) {}; say $x' #real    0m4.392s

[21:36] <diakopter> rakudo -e 'loop (my $x=0;++$x < 1;) {}; say $x' #real    0m0.999s

[21:36] <diakopter> perl sprixel.pl -e 'loop (my $x=0;++$x < 100000;) {}; say $x' #real    0m20.058s

[21:36] <diakopter> perl sprixel.pl -e 'loop (my $x=0;++$x < 1;) {}; say $x' #real    0m1.787s

[21:37] <pugs_svn> r28612 | Darren_Duncan++ | Spec S03 : add Range methods .excl_min, .excl_max 

[21:37] <diakopter> keep in mind, in sprxiel those are bigints, so they're like quadruple boxed

[21:37] <diakopter> spirxel, even

[21:37] <diakopter> I mean.

[21:37] <diakopter> sprixel.

[21:39] *** xinming_ left
[21:40] <pmurias> diakopter: in perl5 it's 0.024

[21:40] *** nbrown joined
[21:42] *** zaphar_ps joined
[21:43] *** iblechbot left
[21:44] *** slavik2 joined
[21:44] <diakopter> pmurias: no it's not. :)  it's 0.014

[21:44] <slavik2> perl6: say "Hello"

[21:45] <p6eval> elf 28612, pugs, rakudo a796cf, sprixel 28609: OUTPUT«Hello␤»

[21:45] <slavik2> perl6: say "Hello";

[21:45] <slavik2> bah

[21:45] <p6eval> elf 28612, pugs, rakudo a796cf, sprixel 28609: OUTPUT«Hello␤»

[21:45] <slavik2> perl6: say (0==1);

[21:45] <p6eval> rakudo a796cf, sprixel 28609: OUTPUT«0␤»

[21:45] <p6eval> ..elf 28612, pugs: OUTPUT«␤»

[21:45] <slavik2> perl6: say (1==1);

[21:46] <p6eval> elf 28612, pugs, rakudo a796cf, sprixel 28609: OUTPUT«1␤»

[21:46] <slavik2> perl6: say ?{1==1};

[21:46] <p6eval> elf 28612, pugs, rakudo a796cf: OUTPUT«1␤»

[21:46] <p6eval> ..sprixel 28609: OUTPUT«execute(): execute error: Symbolic_unary prefix__S_Question not yet implemented; srsly!!?!?? at sprixel.pl line 89.␤»

[21:46] <slavik2> perl6: say ?{1==0};

[21:46] <p6eval> pugs, rakudo a796cf: OUTPUT«1␤»

[21:46] <p6eval> ..sprixel 28609: OUTPUT«execute(): execute error: Symbolic_unary prefix__S_Question not yet implemented; srsly!!?!?? at sprixel.pl line 89.␤»

[21:46] <p6eval> ..elf 28612: OUTPUT«␤»

[21:48] *** PacoLinux left
[21:53] *** nErVe left
[21:54] <slavik2> do assertions work yet?

[21:57] <diakopter> phenny: tell mberends I'm redoing the entirety of sprixel's builtins in Perl 6 (with embedded JS for some things) after I redo the interpreter engine to treat everything as an .invoke(), with proper captures and signatures and the like.

[21:57] <phenny> diakopter: I'll pass that on when mberends is around.

[21:57] <masak> slavik2: you mean in regexes?

[21:57] <slavik2> yes

[21:57] <slavik2> rules/tokens/grammars

[21:57] <masak> slavik2: only the kind where you use double curlies and write the assertion in PIR.

[21:58] <slavik2> masak: {{ pir code }} ?

[21:58] <slavik2> wait ... we can embed pir code in perl?

[21:58] <masak> <? {{ pir code }}>

[21:58] <slavik2> interesting

[21:58] <masak> slavik2: at least for now, we can.

[21:58] <masak> until we have the real thing.

[21:59] <slavik2> how do I refer to $0?

[21:59] <slavik2> I want to do this: <?{ 0 <= $0 <= 255 }>

[21:59] <slavik2> my $string = "1234"; token tok { (\d+) <?{ 0 <= $0 <= 255 }> }; if ($string ~~ /<tok>/) { say $/ } ;

[21:59] <slavik2> roughly

[22:02] <pugs_svn> r28613 | Kodi++ | [perl6.org] Added a mention of Sprixel to the compilers page. 

[22:04] *** icwiener left
[22:06] <colomon> moritz_: errrr.... spectest done, and I only had two failures: push.t and sinh.t?!

[22:12] <masak> yay! all tests pass, including two TODO ones!

[22:13] <masak> but it's too late to run the spectests now, so the commit'll have to come tomorrow.

[22:13] *** Lichtkind joined
[22:13] <quietfanatic> slavik2: According to spec, that case would be something like token tok { [\d+] ~~ {0 <255} }, I think...

[22:13] <quietfanatic> Excuse me

[22:14] <quietfanatic> s/{0 <255}/{0 <= $_ <= 255}/

[22:14] <slavik2> interesting

[22:14] <quietfanatic> But Rakudo's not quite that sophisticated.

[22:14] <masak> I have a fix for RT #67446 locally. http://gist.github.com/201663

[22:15] <quietfanatic> the ~~ doing a submatch

[22:15] <masak> I have a feeling Rakudo might get that sophisticated soon.

[22:16] <slavik2> masak: how soon?

[22:16] <slavik2> I've been waiting since parrot was like 0.6-devel

[22:16] <masak> slavik2: I'm not the one to decide how soon. :) but soon.

[22:17] <slavik2> christmas?

[22:17] <masak> before that.

[22:17] <masak> I'm following the pct-rx development with interest.

[22:17] <masak> it's really progressing nicely.

[22:18] <slavik2> sweet!

[22:18] <colomon> lanny: I've applied your patch to rakudo.  Thanks!

[22:19] <lanny> My pleasure and thanks back.

[22:19] *** pmurias left
[22:19] <quietfanatic> Until then, you'll have to use this :) /<!after \d> [ 25<[0..5]> | 2<[0..4]>\d | 1?\d\d ] <!before \d>/

[22:19] <masak> or PIR.

[22:20] <diakopter> moritz_ (or anyone): any ideas/tips on how to run mangle.pl in reverse... I need to unmangle .... or perhaps I don't.

[22:20] <dalek> rakudo: 42ed85a | (Lanny Ripple)++ | src/setting/Num.pm:

[22:20] <dalek> rakudo: add a cast for Num to Rat with optional error

[22:20] <dalek> rakudo: Adds Num.Rat which creates a Rat approximation of a Num with an error tolerance (defaults to 1e-6).

[22:20] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/42ed85adefc2867d0d23399ac029c2a508fcd68b

[22:20] <dalek> rakudo: 1ca164a | (Solomon Foster)++ | src/setting/Num.pm:

[22:20] <dalek> rakudo: Change Num._modf to "my" to make it private.

[22:20] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/1ca164a87db6324abd21c54070732260995a7a1d

[22:20] <quietfanatic> s/1?\d\d/1?\d?\d/

[22:23] <masak> g'night.

[22:23] <diakopter> quietfanatic: /<!after \d> [ 25<[0..5]> | 2<[0..4]>\d | 1\d\d? | <[2..9]>\d? ] <!before \d>/ # don't allow leading zeroes

[22:23] *** masak left
[22:24] <quietfanatic> diakopter:  /<!after \d> 0* [ 25<[0..5]> | 2<[0..4]>\d | 1?\d?\d ] <!before \d>/  # allow leading zeros

[22:24] <diakopter> oh...

[22:25] <quietfanatic> diakopter: note that 1?\d?\d allows 1\d\d, \d\d, or \d

[22:26] <diakopter> right, I didn't realize the person wanted to match 0<[0..9]>

[22:26] <diakopter> (also I left out the "0" case)

[22:27] <quietfanatic> Even the old one would have matched 00 or 0

[22:27] <quietfanatic> but not 000 :)

[22:28] *** nbrown_ joined
[22:30] <Lichtkind> pmichaud: ping

[22:32] *** nbrown left
[22:32] *** nbrown joined
[22:39] *** nbrown_ left
[22:39] *** nErVe joined
[22:42] *** nErVe left
[22:43] *** cahek left
[23:06] *** zaphar_p1 joined
[23:16] *** zaphar_ps left
[23:20] *** justatheory joined
[23:22] *** payload joined
[23:35] *** eternaleye_ left
[23:35] <diakopter> should I de-[mangle.pl] the node names from STD (see mangle.pl in src/perl6) or mangle them from my JS source  (anyone please feel free to comment)

[23:35] *** eternaleye joined
[23:37] <diakopter> e.g. infix:sym<->  comes across as infix__S_Minus

[23:37] *** ihrd joined
[23:37] *** ihrd left
[23:38] <diakopter> in other words, should the dispath of 'infix__S_Minus' appear internally as 'infix__S_Minus' or 'infix:sym<->'

[23:38] <diakopter> dispatch

[23:38] <diakopter> I see pmurias' mildew-js uses the latter

[23:42] <diakopter> I suspect it should use the mangled edition.

[23:42] *** NorwayGeek joined
[23:43] *** ayrnieu left
[23:45] *** payload left
[23:58] *** rhr joined
[23:59] *** zostay left
